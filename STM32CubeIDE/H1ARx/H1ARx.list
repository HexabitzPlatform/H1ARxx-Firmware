
H1ARx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000173f0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031ac  080174b0  080174b0  000274b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a65c  0801a65c  00030a78  2**0
                  CONTENTS
  4 .ARM          00000008  0801a65c  0801a65c  0002a65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a664  0801a664  00030a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a664  0801a664  0002a664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a66c  0801a66c  0002a66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .myBufBlock   00000008  20000000  0801a670  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000a70  20000008  0801a678  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006960  20000a78  0801b0e8  00030a78  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200073d8  0801b0e8  000373d8  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030a78  2**0
                  CONTENTS, READONLY
 13 .debug_info   00051666  00000000  00000000  00030aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000096a3  00000000  00000000  00082106  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b0e0  00000000  00000000  0008b7a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001a48  00000000  00000000  000a6890  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002e60  00000000  00000000  000a82d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000175b3  00000000  00000000  000ab138  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a333  00000000  00000000  000c26eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000cca1e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000628c  00000000  00000000  000cca9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a78 	.word	0x20000a78
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08017494 	.word	0x08017494

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a7c 	.word	0x20000a7c
 8000100:	08017494 	.word	0x08017494

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	08017b98 	.word	0x08017b98
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	08017bd8 	.word	0x08017bd8
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	08017c18 	.word	0x08017c18
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d26:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <LoadROtopology+0x8c>)
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d28:	4a22      	ldr	r2, [pc, #136]	; (8002db4 <LoadROtopology+0x90>)
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d2a:	881b      	ldrh	r3, [r3, #0]
BOS_Status LoadROtopology(void){
 8002d2c:	b083      	sub	sp, #12
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d2e:	b29b      	uxth	r3, r3
	if(temp == 0xFFFF)				// Memory has been erased
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d035      	beq.n	8002da0 <LoadROtopology+0x7c>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d34:	0a1e      	lsrs	r6, r3, #8
		if(N == 0)
 8002d36:	d02c      	beq.n	8002d92 <LoadROtopology+0x6e>
		N =(uint8_t )(temp >> 8);
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <LoadROtopology+0x94>)
 8002d3a:	b2f6      	uxtb	r6, r6
 8002d3c:	7016      	strb	r6, [r2, #0]
			N =1;
		myID =(uint8_t )temp;
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <LoadROtopology+0x98>)
 8002d40:	7013      	strb	r3, [r2, #0]
 8002d42:	466b      	mov	r3, sp
 8002d44:	1dd9      	adds	r1, r3, #7
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d46:	2300      	movs	r3, #0
		myID =(uint8_t )temp;
 8002d48:	2202      	movs	r2, #2
 8002d4a:	2401      	movs	r4, #1
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d4c:	469c      	mov	ip, r3
 8002d4e:	4d1c      	ldr	r5, [pc, #112]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d50:	4663      	mov	r3, ip
 8002d52:	700b      	strb	r3, [r1, #0]
 8002d54:	780b      	ldrb	r3, [r1, #0]
 8002d56:	2b0a      	cmp	r3, #10
 8002d58:	d814      	bhi.n	8002d84 <LoadROtopology+0x60>
 8002d5a:	1e63      	subs	r3, r4, #1
 8002d5c:	0098      	lsls	r0, r3, #2
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d5e:	18c0      	adds	r0, r0, r3
 8002d60:	0040      	lsls	r0, r0, #1
 8002d62:	18c0      	adds	r0, r0, r3
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <LoadROtopology+0x8c>)
 8002d66:	18d7      	adds	r7, r2, r3
 8002d68:	780b      	ldrb	r3, [r1, #0]
 8002d6a:	883f      	ldrh	r7, [r7, #0]
 8002d6c:	18c3      	adds	r3, r0, r3
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	52ef      	strh	r7, [r5, r3]
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d72:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002d74:	3202      	adds	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d76:	3301      	adds	r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	700b      	strb	r3, [r1, #0]
 8002d7c:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002d7e:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d80:	2b0a      	cmp	r3, #10
 8002d82:	d9ef      	bls.n	8002d64 <LoadROtopology+0x40>
		for(uint8_t i =1; i <= N; i++){
 8002d84:	3401      	adds	r4, #1
 8002d86:	b2e4      	uxtb	r4, r4
 8002d88:	42b4      	cmp	r4, r6
 8002d8a:	d9e1      	bls.n	8002d50 <LoadROtopology+0x2c>
 8002d8c:	2000      	movs	r0, #0
			}
		}
	}
	
	return result;
}
 8002d8e:	b003      	add	sp, #12
 8002d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
			N =1;
 8002d92:	2101      	movs	r1, #1
 8002d94:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <LoadROtopology+0x94>)
		myID =(uint8_t )temp;
 8002d96:	2601      	movs	r6, #1
			N =1;
 8002d98:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8002d9a:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <LoadROtopology+0x98>)
 8002d9c:	7013      	strb	r3, [r2, #0]
 8002d9e:	e7d0      	b.n	8002d42 <LoadROtopology+0x1e>
		N =1;
 8002da0:	2201      	movs	r2, #1
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <LoadROtopology+0x94>)
		return BOS_MEM_ERASED;
 8002da4:	20fa      	movs	r0, #250	; 0xfa
		N =1;
 8002da6:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002da8:	2200      	movs	r2, #0
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <LoadROtopology+0x98>)
 8002dac:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002dae:	e7ee      	b.n	8002d8e <LoadROtopology+0x6a>
 8002db0:	0801d800 	.word	0x0801d800
 8002db4:	0000ffff 	.word	0x0000ffff
 8002db8:	20000008 	.word	0x20000008
 8002dbc:	20000a98 	.word	0x20000a98
 8002dc0:	20000f0c 	.word	0x20000f0c

08002dc4 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc6:	46c6      	mov	lr, r8
 8002dc8:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002dca:	4e0f      	ldr	r6, [pc, #60]	; (8002e08 <LoadEEportsDir+0x44>)
 8002dcc:	7833      	ldrb	r3, [r6, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <LoadEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 8002dd2:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8002dd4:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002dd6:	4698      	mov	r8, r3
 8002dd8:	4f0c      	ldr	r7, [pc, #48]	; (8002e0c <LoadEEportsDir+0x48>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002dda:	1e61      	subs	r1, r4, #1
 8002ddc:	0049      	lsls	r1, r1, #1
 8002dde:	1c65      	adds	r5, r4, #1
 8002de0:	1879      	adds	r1, r7, r1
 8002de2:	b2a8      	uxth	r0, r5
 8002de4:	f004 fd2e 	bl	8007844 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002de8:	2c19      	cmp	r4, #25
 8002dea:	d901      	bls.n	8002df0 <LoadEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8002dec:	230a      	movs	r3, #10
 8002dee:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8002df0:	7833      	ldrb	r3, [r6, #0]
 8002df2:	b2ec      	uxtb	r4, r5
 8002df4:	42a3      	cmp	r3, r4
 8002df6:	d2f0      	bcs.n	8002dda <LoadEEportsDir+0x16>
	}
	
	return result;
}
 8002df8:	4640      	mov	r0, r8
 8002dfa:	bc04      	pop	{r2}
 8002dfc:	4690      	mov	r8, r2
 8002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	4698      	mov	r8, r3
 8002e04:	e7f8      	b.n	8002df8 <LoadEEportsDir+0x34>
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	20000008 	.word	0x20000008
 8002e0c:	20007334 	.word	0x20007334

08002e10 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e12:	464e      	mov	r6, r9
 8002e14:	46de      	mov	lr, fp
 8002e16:	4657      	mov	r7, sl
 8002e18:	4645      	mov	r5, r8
 8002e1a:	b5e0      	push	{r5, r6, r7, lr}
 8002e1c:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e1e:	466b      	mov	r3, sp
 8002e20:	1d9e      	adds	r6, r3, #6
 8002e22:	2300      	movs	r3, #0
 8002e24:	8033      	strh	r3, [r6, #0]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e26:	4698      	mov	r8, r3
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <LoadEEalias+0x78>)
	uint16_t add =0, temp =0;
 8002e2a:	241c      	movs	r4, #28
 8002e2c:	469a      	mov	sl, r3
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <LoadEEalias+0x7c>)
 8002e30:	469b      	mov	fp, r3
 8002e32:	4643      	mov	r3, r8
 8002e34:	009f      	lsls	r7, r3, #2
 8002e36:	18fd      	adds	r5, r7, r3
 8002e38:	1d63      	adds	r3, r4, #5
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	4699      	mov	r9, r3
 8002e3e:	006d      	lsls	r5, r5, #1
 8002e40:	4455      	add	r5, sl
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e42:	0020      	movs	r0, r4
 8002e44:	0031      	movs	r1, r6
 8002e46:	f004 fcfd 	bl	8007844 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002e4a:	8833      	ldrh	r3, [r6, #0]
 8002e4c:	3401      	adds	r4, #1
 8002e4e:	706b      	strb	r3, [r5, #1]
 8002e50:	b2a4      	uxth	r4, r4
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	702b      	strb	r3, [r5, #0]
 8002e56:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002e58:	454c      	cmp	r4, r9
 8002e5a:	d1f2      	bne.n	8002e42 <LoadEEalias+0x32>
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	4447      	add	r7, r8
 8002e60:	007f      	lsls	r7, r7, #1
 8002e62:	4457      	add	r7, sl
 8002e64:	727b      	strb	r3, [r7, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e66:	4643      	mov	r3, r8
 8002e68:	3301      	adds	r3, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4698      	mov	r8, r3
 8002e6e:	465b      	mov	r3, fp
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4543      	cmp	r3, r8
 8002e74:	d2dd      	bcs.n	8002e32 <LoadEEalias+0x22>
	}
	
	return result;
}
 8002e76:	2000      	movs	r0, #0
 8002e78:	b003      	add	sp, #12
 8002e7a:	bc3c      	pop	{r2, r3, r4, r5}
 8002e7c:	4690      	mov	r8, r2
 8002e7e:	4699      	mov	r9, r3
 8002e80:	46a2      	mov	sl, r4
 8002e82:	46ab      	mov	fp, r5
 8002e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	20000dfc 	.word	0x20000dfc
 8002e8c:	20000008 	.word	0x20000008

08002e90 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e92:	4646      	mov	r6, r8
 8002e94:	46d6      	mov	lr, sl
 8002e96:	464f      	mov	r7, r9
 8002e98:	b5c0      	push	{r6, r7, lr}
 8002e9a:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e9c:	466b      	mov	r3, sp
 8002e9e:	1d9e      	adds	r6, r3, #6
 8002ea0:	2300      	movs	r3, #0
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002ea2:	4c22      	ldr	r4, [pc, #136]	; (8002f2c <LoadEEgroup+0x9c>)
	uint16_t add =0, temp =0;
 8002ea4:	8033      	strh	r3, [r6, #0]
	for(i =0; i < N; i++)			// N modules
 8002ea6:	7823      	ldrb	r3, [r4, #0]
	uint16_t add =0, temp =0;
 8002ea8:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d03a      	beq.n	8002f24 <LoadEEgroup+0x94>
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <LoadEEgroup+0xa0>)
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4699      	mov	r9, r3
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb4:	1d1f      	adds	r7, r3, #4
 8002eb6:	0028      	movs	r0, r5
 8002eb8:	0049      	lsls	r1, r1, #1
 8002eba:	30cb      	adds	r0, #203	; 0xcb
 8002ebc:	1879      	adds	r1, r7, r1
 8002ebe:	b280      	uxth	r0, r0
		add++;
 8002ec0:	3501      	adds	r5, #1
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002ec2:	f004 fcbf 	bl	8007844 <EE_ReadVariable>
		add++;
 8002ec6:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002ec8:	7823      	ldrb	r3, [r4, #0]
 8002eca:	b2e9      	uxtb	r1, r5
 8002ecc:	428b      	cmp	r3, r1
 8002ece:	d8f2      	bhi.n	8002eb6 <LoadEEgroup+0x26>
 8002ed0:	2338      	movs	r3, #56	; 0x38
 8002ed2:	002c      	movs	r4, r5
 8002ed4:	35cb      	adds	r5, #203	; 0xcb
 8002ed6:	469c      	mov	ip, r3
 8002ed8:	b2ab      	uxth	r3, r5
 8002eda:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002edc:	2300      	movs	r3, #0
 8002ede:	469a      	mov	sl, r3
 8002ee0:	3499      	adds	r4, #153	; 0x99
 8002ee2:	44e1      	add	r9, ip
 8002ee4:	b2a4      	uxth	r4, r4
	uint16_t add =0, temp =0;
 8002ee6:	464d      	mov	r5, r9
 8002ee8:	1d67      	adds	r7, r4, #5
 8002eea:	b2bf      	uxth	r7, r7
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002eec:	0020      	movs	r0, r4
 8002eee:	0031      	movs	r1, r6
 8002ef0:	f004 fca8 	bl	8007844 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002ef4:	8833      	ldrh	r3, [r6, #0]
 8002ef6:	3401      	adds	r4, #1
 8002ef8:	706b      	strb	r3, [r5, #1]
 8002efa:	b2a4      	uxth	r4, r4
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	702b      	strb	r3, [r5, #0]
 8002f00:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f02:	42bc      	cmp	r4, r7
 8002f04:	d1f2      	bne.n	8002eec <LoadEEgroup+0x5c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002f06:	464b      	mov	r3, r9
 8002f08:	4652      	mov	r2, sl
 8002f0a:	725a      	strb	r2, [r3, #9]
 8002f0c:	230a      	movs	r3, #10
 8002f0e:	469c      	mov	ip, r3
 8002f10:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002f12:	45a0      	cmp	r8, r4
 8002f14:	d1e7      	bne.n	8002ee6 <LoadEEgroup+0x56>
	}
	
	return result;
}
 8002f16:	2000      	movs	r0, #0
 8002f18:	b002      	add	sp, #8
 8002f1a:	bc1c      	pop	{r2, r3, r4}
 8002f1c:	4690      	mov	r8, r2
 8002f1e:	4699      	mov	r9, r3
 8002f20:	46a2      	mov	sl, r4
 8002f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <LoadEEgroup+0xa0>)
 8002f26:	4699      	mov	r9, r3
 8002f28:	e7d2      	b.n	8002ed0 <LoadEEgroup+0x40>
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	20000008 	.word	0x20000008
 8002f30:	20000a98 	.word	0x20000a98

08002f34 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f36:	46ce      	mov	lr, r9
 8002f38:	4647      	mov	r7, r8
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f3a:	260e      	movs	r6, #14
 8002f3c:	2300      	movs	r3, #0
BOS_Status LoadEEstreams(void){
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b085      	sub	sp, #20
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f42:	ac03      	add	r4, sp, #12
 8002f44:	446e      	add	r6, sp
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f46:	0021      	movs	r1, r4
 8002f48:	20e4      	movs	r0, #228	; 0xe4
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f4a:	8023      	strh	r3, [r4, #0]
 8002f4c:	8033      	strh	r3, [r6, #0]
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f4e:	f004 fc79 	bl	8007844 <EE_ReadVariable>
	uint8_t direction =0;
 8002f52:	2700      	movs	r7, #0
	if(!status1){
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d100      	bne.n	8002f5a <LoadEEstreams+0x26>
		direction =(uint8_t )temp1;
 8002f58:	7827      	ldrb	r7, [r4, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f5a:	0021      	movs	r1, r4
 8002f5c:	20e5      	movs	r0, #229	; 0xe5
 8002f5e:	f004 fc71 	bl	8007844 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f62:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f64:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f66:	20e6      	movs	r0, #230	; 0xe6
 8002f68:	f004 fc6c 	bl	8007844 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002f6c:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002f6e:	4305      	orrs	r5, r0
 8002f70:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002f72:	4698      	mov	r8, r3
	if(!status1 && !status2){
 8002f74:	2d00      	cmp	r5, #0
 8002f76:	d104      	bne.n	8002f82 <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002f78:	8823      	ldrh	r3, [r4, #0]
 8002f7a:	8832      	ldrh	r2, [r6, #0]
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	4698      	mov	r8, r3
 8002f80:	4490      	add	r8, r2
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f82:	0021      	movs	r1, r4
 8002f84:	20e7      	movs	r0, #231	; 0xe7
 8002f86:	f004 fc5d 	bl	8007844 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f8a:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f8c:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f8e:	20e8      	movs	r0, #232	; 0xe8
 8002f90:	f004 fc58 	bl	8007844 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002f94:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002f96:	4305      	orrs	r5, r0
 8002f98:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002f9a:	4699      	mov	r9, r3
	if(!status1 && !status2){
 8002f9c:	2d00      	cmp	r5, #0
 8002f9e:	d104      	bne.n	8002faa <LoadEEstreams+0x76>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8002fa0:	8823      	ldrh	r3, [r4, #0]
 8002fa2:	8832      	ldrh	r2, [r6, #0]
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	4699      	mov	r9, r3
 8002fa8:	4491      	add	r9, r2
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8002faa:	0021      	movs	r1, r4
 8002fac:	20e9      	movs	r0, #233	; 0xe9
 8002fae:	f004 fc49 	bl	8007844 <EE_ReadVariable>
	if(!status1){
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	d030      	beq.n	8003018 <LoadEEstreams+0xe4>
 8002fb6:	4d26      	ldr	r5, [pc, #152]	; (8003050 <LoadEEstreams+0x11c>)
		src1 =(uint8_t )(temp1 >> 8);
		dst1 =(uint8_t )temp1;
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8002fb8:	0021      	movs	r1, r4
 8002fba:	20ea      	movs	r0, #234	; 0xea
 8002fbc:	f004 fc42 	bl	8007844 <EE_ReadVariable>
	if(!status1){
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	d103      	bne.n	8002fcc <LoadEEstreams+0x98>
		src2 =(uint8_t )(temp1 >> 8);
 8002fc4:	8823      	ldrh	r3, [r4, #0]
 8002fc6:	0a1a      	lsrs	r2, r3, #8
 8002fc8:	77aa      	strb	r2, [r5, #30]
		dst2 =(uint8_t )temp1;
 8002fca:	77eb      	strb	r3, [r5, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8002fcc:	0021      	movs	r1, r4
 8002fce:	20eb      	movs	r0, #235	; 0xeb
 8002fd0:	f004 fc38 	bl	8007844 <EE_ReadVariable>
	if(!status1){
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d105      	bne.n	8002fe4 <LoadEEstreams+0xb0>
		src3 =(uint8_t )(temp1 >> 8);
 8002fd8:	2220      	movs	r2, #32
 8002fda:	8823      	ldrh	r3, [r4, #0]
 8002fdc:	0a19      	lsrs	r1, r3, #8
 8002fde:	54a9      	strb	r1, [r5, r2]
		dst3 =(uint8_t )temp1;
 8002fe0:	3201      	adds	r2, #1
 8002fe2:	54ab      	strb	r3, [r5, r2]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8002fe4:	7f2b      	ldrb	r3, [r5, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <LoadEEstreams+0xbc>
 8002fea:	7f6a      	ldrb	r2, [r5, #29]
 8002fec:	2a00      	cmp	r2, #0
 8002fee:	d120      	bne.n	8003032 <LoadEEstreams+0xfe>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8002ff0:	7fab      	ldrb	r3, [r5, #30]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <LoadEEstreams+0xc8>
 8002ff6:	7fea      	ldrb	r2, [r5, #31]
 8002ff8:	2a00      	cmp	r2, #0
 8002ffa:	d121      	bne.n	8003040 <LoadEEstreams+0x10c>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	5ceb      	ldrb	r3, [r5, r3]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <LoadEEstreams+0xd8>
 8003004:	2221      	movs	r2, #33	; 0x21
 8003006:	5caa      	ldrb	r2, [r5, r2]
 8003008:	2a00      	cmp	r2, #0
 800300a:	d10b      	bne.n	8003024 <LoadEEstreams+0xf0>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 800300c:	2000      	movs	r0, #0
 800300e:	b005      	add	sp, #20
 8003010:	bc0c      	pop	{r2, r3}
 8003012:	4690      	mov	r8, r2
 8003014:	4699      	mov	r9, r3
 8003016:	bdf0      	pop	{r4, r5, r6, r7, pc}
		src1 =(uint8_t )(temp1 >> 8);
 8003018:	8823      	ldrh	r3, [r4, #0]
 800301a:	4d0d      	ldr	r5, [pc, #52]	; (8003050 <LoadEEstreams+0x11c>)
 800301c:	0a1a      	lsrs	r2, r3, #8
 800301e:	772a      	strb	r2, [r5, #28]
		dst1 =(uint8_t )temp1;
 8003020:	776b      	strb	r3, [r5, #29]
 8003022:	e7c9      	b.n	8002fb8 <LoadEEstreams+0x84>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003024:	9200      	str	r2, [sp, #0]
 8003026:	4641      	mov	r1, r8
 8003028:	464a      	mov	r2, r9
 800302a:	0038      	movs	r0, r7
 800302c:	f006 f9c2 	bl	80093b4 <SetupDMAStreams>
 8003030:	e7ec      	b.n	800300c <LoadEEstreams+0xd8>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 8003032:	9200      	str	r2, [sp, #0]
 8003034:	4641      	mov	r1, r8
 8003036:	464a      	mov	r2, r9
 8003038:	0038      	movs	r0, r7
 800303a:	f006 f9bb 	bl	80093b4 <SetupDMAStreams>
 800303e:	e7d7      	b.n	8002ff0 <LoadEEstreams+0xbc>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003040:	9200      	str	r2, [sp, #0]
 8003042:	4641      	mov	r1, r8
 8003044:	464a      	mov	r2, r9
 8003046:	0038      	movs	r0, r7
 8003048:	f006 f9b4 	bl	80093b4 <SetupDMAStreams>
 800304c:	e7d6      	b.n	8002ffc <LoadEEstreams+0xc8>
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	20000b18 	.word	0x20000b18

08003054 <LoadEEparams>:
BOS_Status LoadEEparams(void){
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003054:	208a      	movs	r0, #138	; 0x8a
BOS_Status LoadEEparams(void){
 8003056:	b570      	push	{r4, r5, r6, lr}
 8003058:	b082      	sub	sp, #8
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 800305a:	ac01      	add	r4, sp, #4
 800305c:	0021      	movs	r1, r4
 800305e:	0040      	lsls	r0, r0, #1
 8003060:	f004 fbf0 	bl	8007844 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003064:	2800      	cmp	r0, #0
 8003066:	d15d      	bne.n	8003124 <LoadEEparams+0xd0>
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003068:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =(uint8_t )temp1;
 800306a:	8823      	ldrh	r3, [r4, #0]
 800306c:	4d54      	ldr	r5, [pc, #336]	; (80031c0 <LoadEEparams+0x16c>)
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800306e:	0021      	movs	r1, r4
		BOSMessaging.response =(uint8_t )temp1;
 8003070:	702b      	strb	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003072:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003078:	f004 fbe4 	bl	8007844 <EE_ReadVariable>

	if(!status1){
 800307c:	2800      	cmp	r0, #0
 800307e:	d15e      	bne.n	800313e <LoadEEparams+0xea>
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003080:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003082:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003084:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003086:	0bda      	lsrs	r2, r3, #15
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003088:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 800308a:	085b      	lsrs	r3, r3, #1
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 800308c:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 800308e:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003090:	f004 fbd8 	bl	8007844 <EE_ReadVariable>
	if(!status1)
		BOS.buttons.debounce =temp1;
 8003094:	4d4b      	ldr	r5, [pc, #300]	; (80031c4 <LoadEEparams+0x170>)
	if(!status1)
 8003096:	2800      	cmp	r0, #0
 8003098:	d15e      	bne.n	8003158 <LoadEEparams+0x104>
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800309a:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =temp1;
 800309c:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800309e:	0021      	movs	r1, r4
 80030a0:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =temp1;
 80030a2:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80030a4:	f004 fbce 	bl	8007844 <EE_ReadVariable>
	if(!status1)
 80030a8:	2800      	cmp	r0, #0
 80030aa:	d15f      	bne.n	800316c <LoadEEparams+0x118>
		BOS.buttons.singleClickTime =temp1;
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030ac:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =temp1;
 80030ae:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030b0:	0021      	movs	r1, r4
 80030b2:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =temp1;
 80030b4:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030b6:	f004 fbc5 	bl	8007844 <EE_ReadVariable>
	if(!status1){
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d160      	bne.n	8003180 <LoadEEparams+0x12c>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 80030be:	8823      	ldrh	r3, [r4, #0]
 80030c0:	712b      	strb	r3, [r5, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	716b      	strb	r3, [r5, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80030c6:	208c      	movs	r0, #140	; 0x8c
 80030c8:	0021      	movs	r1, r4
 80030ca:	0040      	lsls	r0, r0, #1
 80030cc:	f004 fbba 	bl	8007844 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 80030d0:	466b      	mov	r3, sp
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80030d2:	0006      	movs	r6, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 80030d4:	201a      	movs	r0, #26
 80030d6:	1d99      	adds	r1, r3, #6
 80030d8:	30ff      	adds	r0, #255	; 0xff
 80030da:	f004 fbb3 	bl	8007844 <EE_ReadVariable>
	if(!status1 && !status2){
 80030de:	4306      	orrs	r6, r0
 80030e0:	b2b6      	uxth	r6, r6
 80030e2:	2e00      	cmp	r6, #0
 80030e4:	d15f      	bne.n	80031a6 <LoadEEparams+0x152>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 80030e6:	466b      	mov	r3, sp
 80030e8:	88db      	ldrh	r3, [r3, #6]
 80030ea:	8822      	ldrh	r2, [r4, #0]
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60ab      	str	r3, [r5, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 80030f2:	208d      	movs	r0, #141	; 0x8d
 80030f4:	0021      	movs	r1, r4
 80030f6:	0040      	lsls	r0, r0, #1
 80030f8:	f004 fba4 	bl	8007844 <EE_ReadVariable>
	if(!status1){
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d145      	bne.n	800318c <LoadEEparams+0x138>
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003100:	201c      	movs	r0, #28
		BOS.daylightsaving =(int8_t )temp1;
 8003102:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003104:	0021      	movs	r1, r4
		BOS.daylightsaving =(int8_t )temp1;
 8003106:	732b      	strb	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003108:	30ff      	adds	r0, #255	; 0xff
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	736b      	strb	r3, [r5, #13]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800310e:	f004 fb99 	bl	8007844 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003112:	2800      	cmp	r0, #0
 8003114:	d044      	beq.n	80031a0 <LoadEEparams+0x14c>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 8003116:	2326      	movs	r3, #38	; 0x26
 8003118:	4a2b      	ldr	r2, [pc, #172]	; (80031c8 <LoadEEparams+0x174>)
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	76ab      	strb	r3, [r5, #26]
	}
	
	return result;
}
 800311e:	2000      	movs	r0, #0
 8003120:	b002      	add	sp, #8
 8003122:	bd70      	pop	{r4, r5, r6, pc}
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003124:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =BOSMessging_default.response;
 8003126:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <LoadEEparams+0x174>)
 8003128:	4d25      	ldr	r5, [pc, #148]	; (80031c0 <LoadEEparams+0x16c>)
 800312a:	791a      	ldrb	r2, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800312c:	0021      	movs	r1, r4
		BOSMessaging.response =BOSMessging_default.response;
 800312e:	702a      	strb	r2, [r5, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 8003130:	795b      	ldrb	r3, [r3, #5]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003132:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =BOSMessging_default.trace;
 8003134:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003136:	f004 fb85 	bl	8007844 <EE_ReadVariable>
	if(!status1){
 800313a:	2800      	cmp	r0, #0
 800313c:	d0a0      	beq.n	8003080 <LoadEEparams+0x2c>
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 800313e:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003140:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003142:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003144:	7a1a      	ldrb	r2, [r3, #8]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003146:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003148:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 800314a:	895b      	ldrh	r3, [r3, #10]
 800314c:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 800314e:	f004 fb79 	bl	8007844 <EE_ReadVariable>
		BOS.buttons.debounce =temp1;
 8003152:	4d1c      	ldr	r5, [pc, #112]	; (80031c4 <LoadEEparams+0x170>)
	if(!status1)
 8003154:	2800      	cmp	r0, #0
 8003156:	d0a0      	beq.n	800309a <LoadEEparams+0x46>
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003158:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800315c:	0021      	movs	r1, r4
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800315e:	899b      	ldrh	r3, [r3, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003160:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 8003162:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003164:	f004 fb6e 	bl	8007844 <EE_ReadVariable>
	if(!status1)
 8003168:	2800      	cmp	r0, #0
 800316a:	d09f      	beq.n	80030ac <LoadEEparams+0x58>
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 800316c:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 800316e:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003170:	0021      	movs	r1, r4
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003172:	89db      	ldrh	r3, [r3, #14]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003174:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003176:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003178:	f004 fb64 	bl	8007844 <EE_ReadVariable>
	if(!status1){
 800317c:	2800      	cmp	r0, #0
 800317e:	d09e      	beq.n	80030be <LoadEEparams+0x6a>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <LoadEEparams+0x174>)
 8003182:	7c1a      	ldrb	r2, [r3, #16]
 8003184:	712a      	strb	r2, [r5, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 8003186:	7c5b      	ldrb	r3, [r3, #17]
 8003188:	716b      	strb	r3, [r5, #5]
 800318a:	e79c      	b.n	80030c6 <LoadEEparams+0x72>
		BOS.daylightsaving =DAYLIGHT_NONE;
 800318c:	23c0      	movs	r3, #192	; 0xc0
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800318e:	201c      	movs	r0, #28
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003190:	015b      	lsls	r3, r3, #5
 8003192:	81ab      	strh	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003194:	0021      	movs	r1, r4
 8003196:	30ff      	adds	r0, #255	; 0xff
 8003198:	f004 fb54 	bl	8007844 <EE_ReadVariable>
	if(!status1){
 800319c:	2800      	cmp	r0, #0
 800319e:	d1ba      	bne.n	8003116 <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 80031a0:	8823      	ldrh	r3, [r4, #0]
 80031a2:	76ab      	strb	r3, [r5, #26]
 80031a4:	e7bb      	b.n	800311e <LoadEEparams+0xca>
	else if(CLI_LOW_Baudrate_Flag)
 80031a6:	2322      	movs	r3, #34	; 0x22
 80031a8:	4a08      	ldr	r2, [pc, #32]	; (80031cc <LoadEEparams+0x178>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <LoadEEparams+0x164>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80031b0:	23e1      	movs	r3, #225	; 0xe1
 80031b2:	025b      	lsls	r3, r3, #9
 80031b4:	60ab      	str	r3, [r5, #8]
 80031b6:	e79c      	b.n	80030f2 <LoadEEparams+0x9e>
		BOS.clibaudrate =BOS_default.clibaudrate;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <LoadEEparams+0x174>)
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	60ab      	str	r3, [r5, #8]
 80031be:	e798      	b.n	80030f2 <LoadEEparams+0x9e>
 80031c0:	20006e28 	.word	0x20006e28
 80031c4:	20006ea8 	.word	0x20006ea8
 80031c8:	20000008 	.word	0x20000008
 80031cc:	20000b18 	.word	0x20000b18

080031d0 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 80031d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d2:	46de      	mov	lr, fp
 80031d4:	4657      	mov	r7, sl
 80031d6:	464e      	mov	r6, r9
 80031d8:	4645      	mov	r5, r8
 80031da:	b5e0      	push	{r5, r6, r7, lr}
 80031dc:	b08b      	sub	sp, #44	; 0x2c
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 80031de:	ab02      	add	r3, sp, #8
 80031e0:	469c      	mov	ip, r3
 80031e2:	261e      	movs	r6, #30
 80031e4:	2300      	movs	r3, #0
 80031e6:	4466      	add	r6, ip
 80031e8:	8033      	strh	r3, [r6, #0]
 80031ea:	330f      	adds	r3, #15
 80031ec:	469a      	mov	sl, r3
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80031ee:	3b0e      	subs	r3, #14
	uint16_t temp16 =0, status1 =0;
 80031f0:	2501      	movs	r5, #1
 80031f2:	24ec      	movs	r4, #236	; 0xec
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80031f4:	469b      	mov	fp, r3
 80031f6:	e004      	b.n	8003202 <LoadEEbuttons+0x32>
 80031f8:	3404      	adds	r4, #4
 80031fa:	3501      	adds	r5, #1
 80031fc:	b2a4      	uxth	r4, r4
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80031fe:	2d08      	cmp	r5, #8
 8003200:	d05e      	beq.n	80032c0 <LoadEEbuttons+0xf0>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003202:	0031      	movs	r1, r6
 8003204:	0020      	movs	r0, r4
 8003206:	f004 fb1d 	bl	8007844 <EE_ReadVariable>
 800320a:	b2eb      	uxtb	r3, r5
 800320c:	1e07      	subs	r7, r0, #0
 800320e:	4699      	mov	r9, r3
		if(!status1)									// This variable exists
 8003210:	d1f2      	bne.n	80031f8 <LoadEEbuttons+0x28>
			temp8 =(uint8_t )(temp16 >> 8);
 8003212:	8832      	ldrh	r2, [r6, #0]
 8003214:	0a13      	lsrs	r3, r2, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 8003216:	0919      	lsrs	r1, r3, #4
 8003218:	42a9      	cmp	r1, r5
 800321a:	d1ed      	bne.n	80031f8 <LoadEEbuttons+0x28>
 800321c:	4651      	mov	r1, sl
 800321e:	400b      	ands	r3, r1
 8003220:	d0ea      	beq.n	80031f8 <LoadEEbuttons+0x28>
				button[i + 1].type =temp8 & 0x0F;
 8003222:	482b      	ldr	r0, [pc, #172]	; (80032d0 <LoadEEbuttons+0x100>)
 8003224:	00e9      	lsls	r1, r5, #3
 8003226:	4680      	mov	r8, r0
 8003228:	1949      	adds	r1, r1, r5
 800322a:	4488      	add	r8, r1
 800322c:	4641      	mov	r1, r8
 800322e:	00a8      	lsls	r0, r5, #2
 8003230:	704b      	strb	r3, [r1, #1]
 8003232:	b283      	uxth	r3, r0
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003234:	0018      	movs	r0, r3
 8003236:	30e9      	adds	r0, #233	; 0xe9
				button[i + 1].events =(uint8_t )temp16;
 8003238:	720a      	strb	r2, [r1, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 800323a:	b280      	uxth	r0, r0
 800323c:	0031      	movs	r1, r6
 800323e:	9307      	str	r3, [sp, #28]
 8003240:	f004 fb00 	bl	8007844 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003244:	4641      	mov	r1, r8
 8003246:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003248:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800324a:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 800324c:	30ea      	adds	r0, #234	; 0xea
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800324e:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003250:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003252:	b280      	uxth	r0, r0
 8003254:	0031      	movs	r1, r6
 8003256:	f004 faf5 	bl	8007844 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 800325a:	4641      	mov	r1, r8
 800325c:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 800325e:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003260:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003262:	30eb      	adds	r0, #235	; 0xeb
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003264:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 8003266:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003268:	b280      	uxth	r0, r0
 800326a:	0031      	movs	r1, r6
 800326c:	f004 faea 	bl	8007844 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003270:	4641      	mov	r1, r8
 8003272:	8833      	ldrh	r3, [r6, #0]
				AddPortButton(button[i + 1].type,i + 1);
 8003274:	7848      	ldrb	r0, [r1, #1]
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003276:	0a1a      	lsrs	r2, r3, #8
 8003278:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 800327a:	71cb      	strb	r3, [r1, #7]
				AddPortButton(button[i + 1].type,i + 1);
 800327c:	4649      	mov	r1, r9
 800327e:	f005 f8c5 	bl	800840c <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003282:	4643      	mov	r3, r8
 8003284:	4658      	mov	r0, fp
 8003286:	7a19      	ldrb	r1, [r3, #8]
 8003288:	789b      	ldrb	r3, [r3, #2]
 800328a:	104a      	asrs	r2, r1, #1
 800328c:	4002      	ands	r2, r0
 800328e:	4001      	ands	r1, r0
 8003290:	4640      	mov	r0, r8
 8003292:	9705      	str	r7, [sp, #20]
 8003294:	79c0      	ldrb	r0, [r0, #7]
 8003296:	3404      	adds	r4, #4
 8003298:	9004      	str	r0, [sp, #16]
 800329a:	4640      	mov	r0, r8
 800329c:	7980      	ldrb	r0, [r0, #6]
 800329e:	3501      	adds	r5, #1
 80032a0:	9003      	str	r0, [sp, #12]
 80032a2:	4640      	mov	r0, r8
 80032a4:	7940      	ldrb	r0, [r0, #5]
 80032a6:	b2a4      	uxth	r4, r4
 80032a8:	9002      	str	r0, [sp, #8]
 80032aa:	4640      	mov	r0, r8
 80032ac:	7900      	ldrb	r0, [r0, #4]
 80032ae:	9001      	str	r0, [sp, #4]
 80032b0:	4640      	mov	r0, r8
 80032b2:	78c0      	ldrb	r0, [r0, #3]
 80032b4:	9000      	str	r0, [sp, #0]
 80032b6:	4648      	mov	r0, r9
 80032b8:	f005 f9b2 	bl	8008620 <SetButtonEvents>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80032bc:	2d08      	cmp	r5, #8
 80032be:	d1a0      	bne.n	8003202 <LoadEEbuttons+0x32>
			}
		}
	}
	
	return result;
}
 80032c0:	2000      	movs	r0, #0
 80032c2:	b00b      	add	sp, #44	; 0x2c
 80032c4:	bc3c      	pop	{r2, r3, r4, r5}
 80032c6:	4690      	mov	r8, r2
 80032c8:	4699      	mov	r9, r3
 80032ca:	46a2      	mov	sl, r4
 80032cc:	46ab      	mov	fp, r5
 80032ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032d0:	2000191c 	.word	0x2000191c

080032d4 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	46de      	mov	lr, fp
 80032d8:	4645      	mov	r5, r8
 80032da:	4657      	mov	r7, sl
 80032dc:	464e      	mov	r6, r9
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80032de:	2032      	movs	r0, #50	; 0x32
BOS_Status LoadROsnippets(void){
 80032e0:	b5e0      	push	{r5, r6, r7, lr}
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80032e2:	f00f fac1 	bl	8012868 <malloc>
 80032e6:	1e05      	subs	r5, r0, #0
	if(snipBuffer == NULL)
 80032e8:	d065      	beq.n	80033b6 <LoadROsnippets+0xe2>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 80032ea:	4c3b      	ldr	r4, [pc, #236]	; (80033d8 <LoadROsnippets+0x104>)
		return BOS_ERROR;
 80032ec:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 80032ee:	7822      	ldrb	r2, [r4, #0]
 80032f0:	2afe      	cmp	r2, #254	; 0xfe
 80032f2:	d156      	bne.n	80033a2 <LoadROsnippets+0xce>
 80032f4:	1c6b      	adds	r3, r5, #1
 80032f6:	4698      	mov	r8, r3
 80032f8:	2364      	movs	r3, #100	; 0x64
 80032fa:	4699      	mov	r9, r3
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 80032fc:	4b37      	ldr	r3, [pc, #220]	; (80033dc <LoadROsnippets+0x108>)
 80032fe:	4e38      	ldr	r6, [pc, #224]	; (80033e0 <LoadROsnippets+0x10c>)
 8003300:	469b      	mov	fp, r3
 8003302:	44b1      	add	r9, r6
 8003304:	0020      	movs	r0, r4
 8003306:	46a2      	mov	sl, r4
 8003308:	3014      	adds	r0, #20
 800330a:	1b29      	subs	r1, r5, r4
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 800330c:	7822      	ldrb	r2, [r4, #0]
 800330e:	550a      	strb	r2, [r1, r4]
 8003310:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8003312:	4284      	cmp	r4, r0
 8003314:	d1fa      	bne.n	800330c <LoadROsnippets+0x38>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003316:	2214      	movs	r2, #20
 8003318:	4641      	mov	r1, r8
 800331a:	0030      	movs	r0, r6
 800331c:	f00f fcf1 	bl	8012d02 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003320:	2100      	movs	r1, #0
 8003322:	2214      	movs	r2, #20
 8003324:	0028      	movs	r0, r5
 8003326:	f00f fcf5 	bl	8012d14 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800332a:	7821      	ldrb	r1, [r4, #0]
 800332c:	1c8b      	adds	r3, r1, #2
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d942      	bls.n	80033ba <LoadROsnippets+0xe6>
 8003334:	4657      	mov	r7, sl
 8003336:	0028      	movs	r0, r5
 8003338:	3746      	adds	r7, #70	; 0x46
		i =0;
 800333a:	2300      	movs	r3, #0
 800333c:	e002      	b.n	8003344 <LoadROsnippets+0x70>
 800333e:	3001      	adds	r0, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003340:	42a7      	cmp	r7, r4
 8003342:	d034      	beq.n	80033ae <LoadROsnippets+0xda>
			++currentAdd;
 8003344:	3401      	adds	r4, #1
			snipBuffer[i] =*(uint8_t* )currentAdd;
 8003346:	7001      	strb	r1, [r0, #0]
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003348:	7821      	ldrb	r1, [r4, #0]
			++i;
 800334a:	3301      	adds	r3, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800334c:	1c8a      	adds	r2, r1, #2
 800334e:	b2d2      	uxtb	r2, r2
			++i;
 8003350:	b2db      	uxtb	r3, r3
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003352:	2a01      	cmp	r2, #1
 8003354:	d8f3      	bhi.n	800333e <LoadROsnippets+0x6a>
 8003356:	469a      	mov	sl, r3
 8003358:	1e5a      	subs	r2, r3, #1
		if(snipBuffer[i - 1] != 0)
 800335a:	5caa      	ldrb	r2, [r5, r2]
 800335c:	2a00      	cmp	r2, #0
 800335e:	d002      	beq.n	8003366 <LoadROsnippets+0x92>
			++i;	// String termination char was not recorded, then add one
 8003360:	3301      	adds	r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	469a      	mov	sl, r3
		snippets[s].cmd =(char* )malloc(i);
 8003366:	4650      	mov	r0, sl
 8003368:	f00f fa7e 	bl	8012868 <malloc>
 800336c:	60f0      	str	r0, [r6, #12]
		if(snippets[s].cmd == NULL){
 800336e:	2800      	cmp	r0, #0
 8003370:	d028      	beq.n	80033c4 <LoadROsnippets+0xf0>
			memcpy(snippets[s].cmd,snipBuffer,i);
 8003372:	4652      	mov	r2, sl
 8003374:	0029      	movs	r1, r5
 8003376:	f00f fcc4 	bl	8012d02 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800337a:	465b      	mov	r3, fp
 800337c:	465a      	mov	r2, fp
 800337e:	781b      	ldrb	r3, [r3, #0]
			memset(snipBuffer,0,i);
 8003380:	2100      	movs	r1, #0
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003382:	3301      	adds	r3, #1
 8003384:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 8003386:	0028      	movs	r0, r5
 8003388:	4652      	mov	r2, sl
 800338a:	f00f fcc3 	bl	8012d14 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 800338e:	7823      	ldrb	r3, [r4, #0]
 8003390:	2bfe      	cmp	r3, #254	; 0xfe
 8003392:	d102      	bne.n	800339a <LoadROsnippets+0xc6>
 8003394:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003396:	45b1      	cmp	r9, r6
 8003398:	d1b4      	bne.n	8003304 <LoadROsnippets+0x30>
			break;
	}
	
	free(snipBuffer);
 800339a:	0028      	movs	r0, r5
 800339c:	f00f fa6e 	bl	801287c <free>
	return BOS_OK;
 80033a0:	2000      	movs	r0, #0
}
 80033a2:	bc3c      	pop	{r2, r3, r4, r5}
 80033a4:	4690      	mov	r8, r2
 80033a6:	4699      	mov	r9, r3
 80033a8:	46a2      	mov	sl, r4
 80033aa:	46ab      	mov	fp, r5
 80033ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ae:	2332      	movs	r3, #50	; 0x32
 80033b0:	2231      	movs	r2, #49	; 0x31
 80033b2:	469a      	mov	sl, r3
 80033b4:	e7d1      	b.n	800335a <LoadROsnippets+0x86>
		return BOS_MEM_FULL;
 80033b6:	20fb      	movs	r0, #251	; 0xfb
 80033b8:	e7f3      	b.n	80033a2 <LoadROsnippets+0xce>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033ba:	2201      	movs	r2, #1
 80033bc:	2300      	movs	r3, #0
 80033be:	4252      	negs	r2, r2
 80033c0:	469a      	mov	sl, r3
 80033c2:	e7ca      	b.n	800335a <LoadROsnippets+0x86>
			memset(&snippets[s],0,sizeof(snippet_t));
 80033c4:	2214      	movs	r2, #20
 80033c6:	2100      	movs	r1, #0
 80033c8:	0030      	movs	r0, r6
 80033ca:	f00f fca3 	bl	8012d14 <memset>
			free(snipBuffer);
 80033ce:	0028      	movs	r0, r5
 80033d0:	f00f fa54 	bl	801287c <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80033d4:	200e      	movs	r0, #14
 80033d6:	e7e4      	b.n	80033a2 <LoadROsnippets+0xce>
 80033d8:	0801dc00 	.word	0x0801dc00
 80033dc:	20001180 	.word	0x20001180
 80033e0:	20006ec4 	.word	0x20006ec4

080033e4 <LoadEEvars>:
void LoadEEvars(void){
 80033e4:	b510      	push	{r4, lr}
	LoadROtopology();
 80033e6:	f7ff fc9d 	bl	8002d24 <LoadROtopology>
	LoadEEportsDir();
 80033ea:	f7ff fceb 	bl	8002dc4 <LoadEEportsDir>
	LoadEEalias();
 80033ee:	f7ff fd0f 	bl	8002e10 <LoadEEalias>
	LoadEEgroup();
 80033f2:	f7ff fd4d 	bl	8002e90 <LoadEEgroup>
	LoadEEstreams();
 80033f6:	f7ff fd9d 	bl	8002f34 <LoadEEstreams>
	LoadEEparams();
 80033fa:	f7ff fe2b 	bl	8003054 <LoadEEparams>
	LoadEEbuttons();
 80033fe:	f7ff fee7 	bl	80031d0 <LoadEEbuttons>
	LoadROsnippets();
 8003402:	f7ff ff67 	bl	80032d4 <LoadROsnippets>
}
 8003406:	bd10      	pop	{r4, pc}

08003408 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340a:	46c6      	mov	lr, r8
 800340c:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 800340e:	4e10      	ldr	r6, [pc, #64]	; (8003450 <SaveEEportsDir+0x48>)
 8003410:	7833      	ldrb	r3, [r6, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d016      	beq.n	8003444 <SaveEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 8003416:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8003418:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800341a:	4698      	mov	r8, r3
 800341c:	4f0d      	ldr	r7, [pc, #52]	; (8003454 <SaveEEportsDir+0x4c>)
 800341e:	e007      	b.n	8003430 <SaveEEportsDir+0x28>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003420:	2c19      	cmp	r4, #25
 8003422:	d901      	bls.n	8003428 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 8003424:	230a      	movs	r3, #10
 8003426:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003428:	7833      	ldrb	r3, [r6, #0]
 800342a:	b2ec      	uxtb	r4, r5
 800342c:	42a3      	cmp	r3, r4
 800342e:	d30b      	bcc.n	8003448 <SaveEEportsDir+0x40>
		if(arrayPortsDir[i - 1])
 8003430:	1e63      	subs	r3, r4, #1
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	5af9      	ldrh	r1, [r7, r3]
 8003436:	1c65      	adds	r5, r4, #1
 8003438:	2900      	cmp	r1, #0
 800343a:	d0f1      	beq.n	8003420 <SaveEEportsDir+0x18>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800343c:	b2a8      	uxth	r0, r5
 800343e:	f004 fa31 	bl	80078a4 <EE_WriteVariable>
 8003442:	e7ed      	b.n	8003420 <SaveEEportsDir+0x18>
	BOS_Status result =BOS_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	4698      	mov	r8, r3
	}
	
	return result;
}
 8003448:	4640      	mov	r0, r8
 800344a:	bc04      	pop	{r2}
 800344c:	4690      	mov	r8, r2
 800344e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003450:	20000008 	.word	0x20000008
 8003454:	20007334 	.word	0x20007334

08003458 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003458:	2300      	movs	r3, #0
BOS_Status SaveEEalias(void){
 800345a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345c:	4646      	mov	r6, r8
 800345e:	46d6      	mov	lr, sl
 8003460:	464f      	mov	r7, r9
	uint16_t add =0, temp =0;
 8003462:	4698      	mov	r8, r3
 8003464:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <SaveEEalias+0x80>)
BOS_Status SaveEEalias(void){
 8003466:	b5c0      	push	{r6, r7, lr}
 8003468:	4699      	mov	r9, r3
 800346a:	4b1c      	ldr	r3, [pc, #112]	; (80034dc <SaveEEalias+0x84>)
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800346c:	2600      	movs	r6, #0
 800346e:	469a      	mov	sl, r3
 8003470:	e005      	b.n	800347e <SaveEEalias+0x26>
 8003472:	4653      	mov	r3, sl
 8003474:	3601      	adds	r6, #1
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b2f6      	uxtb	r6, r6
 800347a:	42b3      	cmp	r3, r6
 800347c:	d325      	bcc.n	80034ca <SaveEEalias+0x72>
	    {
		if(moduleAlias[i][0]){
 800347e:	464b      	mov	r3, r9
 8003480:	00b4      	lsls	r4, r6, #2
 8003482:	19a4      	adds	r4, r4, r6
 8003484:	0064      	lsls	r4, r4, #1
 8003486:	5d1b      	ldrb	r3, [r3, r4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f2      	beq.n	8003472 <SaveEEalias+0x1a>
 800348c:	4645      	mov	r5, r8
 800348e:	4647      	mov	r7, r8
 8003490:	351c      	adds	r5, #28
 8003492:	3721      	adds	r7, #33	; 0x21
 8003494:	444c      	add	r4, r9
 8003496:	b2ad      	uxth	r5, r5
 8003498:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 800349a:	7861      	ldrb	r1, [r4, #1]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80034a0:	0028      	movs	r0, r5
 80034a2:	3501      	adds	r5, #1
 80034a4:	b289      	uxth	r1, r1
 80034a6:	b2ad      	uxth	r5, r5
 80034a8:	f004 f9fc 	bl	80078a4 <EE_WriteVariable>
 80034ac:	3402      	adds	r4, #2
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034ae:	42bd      	cmp	r5, r7
 80034b0:	d001      	beq.n	80034b6 <SaveEEalias+0x5e>
 80034b2:	7823      	ldrb	r3, [r4, #0]
 80034b4:	e7f1      	b.n	800349a <SaveEEalias+0x42>
 80034b6:	4643      	mov	r3, r8
 80034b8:	3305      	adds	r3, #5
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	4698      	mov	r8, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80034be:	4653      	mov	r3, sl
 80034c0:	3601      	adds	r6, #1
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	b2f6      	uxtb	r6, r6
 80034c6:	42b3      	cmp	r3, r6
 80034c8:	d2d9      	bcs.n	800347e <SaveEEalias+0x26>
			}
		}
	}
	
	return result;
}
 80034ca:	2000      	movs	r0, #0
 80034cc:	bc1c      	pop	{r2, r3, r4}
 80034ce:	4690      	mov	r8, r2
 80034d0:	4699      	mov	r9, r3
 80034d2:	46a2      	mov	sl, r4
 80034d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	20000dfc 	.word	0x20000dfc
 80034dc:	20000008 	.word	0x20000008

080034e0 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80034e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e2:	46de      	mov	lr, fp
 80034e4:	4657      	mov	r7, sl
 80034e6:	464e      	mov	r6, r9
 80034e8:	4645      	mov	r5, r8
 80034ea:	468b      	mov	fp, r1
 80034ec:	b5e0      	push	{r5, r6, r7, lr}
 80034ee:	001e      	movs	r6, r3
 80034f0:	ab0a      	add	r3, sp, #40	; 0x28
 80034f2:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 80034f4:	b281      	uxth	r1, r0
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80034f6:	469a      	mov	sl, r3
 80034f8:	ab0b      	add	r3, sp, #44	; 0x2c
 80034fa:	781d      	ldrb	r5, [r3, #0]
 80034fc:	ab0c      	add	r3, sp, #48	; 0x30
 80034fe:	781b      	ldrb	r3, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003500:	20e4      	movs	r0, #228	; 0xe4
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003502:	4698      	mov	r8, r3
 8003504:	ab0d      	add	r3, sp, #52	; 0x34
 8003506:	781c      	ldrb	r4, [r3, #0]
 8003508:	ab0e      	add	r3, sp, #56	; 0x38
 800350a:	4691      	mov	r9, r2
 800350c:	781f      	ldrb	r7, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 800350e:	f004 f9c9 	bl	80078a4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003512:	465b      	mov	r3, fp
 8003514:	0a19      	lsrs	r1, r3, #8
 8003516:	b289      	uxth	r1, r1
 8003518:	20e5      	movs	r0, #229	; 0xe5
 800351a:	f004 f9c3 	bl	80078a4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 800351e:	465b      	mov	r3, fp
 8003520:	20e6      	movs	r0, #230	; 0xe6
 8003522:	b299      	uxth	r1, r3
 8003524:	f004 f9be 	bl	80078a4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003528:	464b      	mov	r3, r9
 800352a:	0a19      	lsrs	r1, r3, #8
 800352c:	b289      	uxth	r1, r1
 800352e:	20e7      	movs	r0, #231	; 0xe7
 8003530:	f004 f9b8 	bl	80078a4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003534:	464b      	mov	r3, r9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003536:	0236      	lsls	r6, r6, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003538:	b299      	uxth	r1, r3
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800353a:	4456      	add	r6, sl
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 800353c:	20e8      	movs	r0, #232	; 0xe8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 800353e:	022d      	lsls	r5, r5, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003540:	f004 f9b0 	bl	80078a4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003544:	4445      	add	r5, r8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003546:	b2b1      	uxth	r1, r6
 8003548:	20e9      	movs	r0, #233	; 0xe9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 800354a:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800354c:	f004 f9aa 	bl	80078a4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8003550:	19e4      	adds	r4, r4, r7
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003552:	b2a9      	uxth	r1, r5
 8003554:	20ea      	movs	r0, #234	; 0xea
 8003556:	f004 f9a5 	bl	80078a4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 800355a:	b2a1      	uxth	r1, r4
 800355c:	20eb      	movs	r0, #235	; 0xeb
 800355e:	f004 f9a1 	bl	80078a4 <EE_WriteVariable>
	
	return result;
}
 8003562:	2000      	movs	r0, #0
 8003564:	bc3c      	pop	{r2, r3, r4, r5}
 8003566:	4690      	mov	r8, r2
 8003568:	4699      	mov	r9, r3
 800356a:	46a2      	mov	sl, r4
 800356c:	46ab      	mov	fp, r5
 800356e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003570 <SaveEEparams>:

BOS_Status SaveEEparams(void){
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003570:	208a      	movs	r0, #138	; 0x8a
BOS_Status SaveEEparams(void){
 8003572:	b510      	push	{r4, lr}
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003574:	4c1e      	ldr	r4, [pc, #120]	; (80035f0 <SaveEEparams+0x80>)
 8003576:	0040      	lsls	r0, r0, #1
 8003578:	7863      	ldrb	r3, [r4, #1]
 800357a:	7821      	ldrb	r1, [r4, #0]
 800357c:	015b      	lsls	r3, r3, #5
 800357e:	4319      	orrs	r1, r3
 8003580:	f004 f990 	bl	80078a4 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 8003584:	208e      	movs	r0, #142	; 0x8e
 8003586:	7921      	ldrb	r1, [r4, #4]
 8003588:	88e3      	ldrh	r3, [r4, #6]
 800358a:	03c9      	lsls	r1, r1, #15
 800358c:	4319      	orrs	r1, r3
 800358e:	b289      	uxth	r1, r1
 8003590:	0040      	lsls	r0, r0, #1
 8003592:	f004 f987 	bl	80078a4 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003596:	2016      	movs	r0, #22
 8003598:	4c16      	ldr	r4, [pc, #88]	; (80035f4 <SaveEEparams+0x84>)
 800359a:	30ff      	adds	r0, #255	; 0xff
 800359c:	8821      	ldrh	r1, [r4, #0]
 800359e:	f004 f981 	bl	80078a4 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 80035a2:	208b      	movs	r0, #139	; 0x8b
 80035a4:	8861      	ldrh	r1, [r4, #2]
 80035a6:	0040      	lsls	r0, r0, #1
 80035a8:	f004 f97c 	bl	80078a4 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 80035ac:	2018      	movs	r0, #24
 80035ae:	7963      	ldrb	r3, [r4, #5]
 80035b0:	7b21      	ldrb	r1, [r4, #12]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	4319      	orrs	r1, r3
 80035b6:	30ff      	adds	r0, #255	; 0xff
 80035b8:	f004 f974 	bl	80078a4 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80035bc:	208c      	movs	r0, #140	; 0x8c
 80035be:	8921      	ldrh	r1, [r4, #8]
 80035c0:	0040      	lsls	r0, r0, #1
 80035c2:	f004 f96f 	bl	80078a4 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80035c6:	201a      	movs	r0, #26
 80035c8:	8961      	ldrh	r1, [r4, #10]
 80035ca:	30ff      	adds	r0, #255	; 0xff
 80035cc:	f004 f96a 	bl	80078a4 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80035d0:	208d      	movs	r0, #141	; 0x8d
 80035d2:	7b63      	ldrb	r3, [r4, #13]
 80035d4:	7921      	ldrb	r1, [r4, #4]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	4319      	orrs	r1, r3
 80035da:	0040      	lsls	r0, r0, #1
 80035dc:	f004 f962 	bl	80078a4 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 80035e0:	201c      	movs	r0, #28
 80035e2:	7ea1      	ldrb	r1, [r4, #26]
 80035e4:	30ff      	adds	r0, #255	; 0xff
 80035e6:	f004 f95d 	bl	80078a4 <EE_WriteVariable>
	
	return result;
}
 80035ea:	2000      	movs	r0, #0
 80035ec:	bd10      	pop	{r4, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	20006e28 	.word	0x20006e28
 80035f4:	20006ea8 	.word	0x20006ea8

080035f8 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 80035f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fa:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 80035fc:	4f12      	ldr	r7, [pc, #72]	; (8003648 <ClearEEportsDir+0x50>)
BOS_Status ClearEEportsDir(void){
 80035fe:	b500      	push	{lr}
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003600:	2234      	movs	r2, #52	; 0x34
 8003602:	2100      	movs	r1, #0
 8003604:	0038      	movs	r0, r7
 8003606:	f00f fb85 	bl	8012d14 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800360a:	4e10      	ldr	r6, [pc, #64]	; (800364c <ClearEEportsDir+0x54>)
 800360c:	7833      	ldrb	r3, [r6, #0]
	BOS_Status result =BOS_OK;
 800360e:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003610:	2b00      	cmp	r3, #0
 8003612:	d015      	beq.n	8003640 <ClearEEportsDir+0x48>
	BOS_Status result =BOS_OK;
 8003614:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8003616:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003618:	4698      	mov	r8, r3
 800361a:	2502      	movs	r5, #2
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800361c:	2c19      	cmp	r4, #25
 800361e:	d901      	bls.n	8003624 <ClearEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8003620:	230a      	movs	r3, #10
 8003622:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003624:	7833      	ldrb	r3, [r6, #0]
 8003626:	b2ec      	uxtb	r4, r5
 8003628:	42a3      	cmp	r3, r4
 800362a:	d309      	bcc.n	8003640 <ClearEEportsDir+0x48>
 800362c:	1e63      	subs	r3, r4, #1
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	5af9      	ldrh	r1, [r7, r3]
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003632:	1c65      	adds	r5, r4, #1
		if(arrayPortsDir[i - 1])
 8003634:	2900      	cmp	r1, #0
 8003636:	d0f1      	beq.n	800361c <ClearEEportsDir+0x24>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003638:	b2a8      	uxth	r0, r5
 800363a:	f004 f933 	bl	80078a4 <EE_WriteVariable>
 800363e:	e7ed      	b.n	800361c <ClearEEportsDir+0x24>
	}
	
	return result;
}
 8003640:	4640      	mov	r0, r8
 8003642:	bc04      	pop	{r2}
 8003644:	4690      	mov	r8, r2
 8003646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003648:	20007334 	.word	0x20007334
 800364c:	20000008 	.word	0x20000008

08003650 <IsLowerCLIbaud>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003650:	230e      	movs	r3, #14
uint8_t IsLowerCLIbaud(void){
 8003652:	b570      	push	{r4, r5, r6, lr}
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003654:	2412      	movs	r4, #18
uint8_t IsLowerCLIbaud(void){
 8003656:	b08e      	sub	sp, #56	; 0x38
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003658:	ad03      	add	r5, sp, #12
 800365a:	446b      	add	r3, sp
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 800365c:	446c      	add	r4, sp
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	002a      	movs	r2, r5
 8003662:	ab06      	add	r3, sp, #24
 8003664:	a905      	add	r1, sp, #20
 8003666:	2001      	movs	r0, #1
 8003668:	f009 f92e 	bl	800c8c8 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 800366c:	aa04      	add	r2, sp, #16
 800366e:	ab08      	add	r3, sp, #32
 8003670:	a907      	add	r1, sp, #28
 8003672:	9400      	str	r4, [sp, #0]
 8003674:	2002      	movs	r0, #2
 8003676:	f009 f927 	bl	800c8c8 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367a:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367e:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003680:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003682:	a909      	add	r1, sp, #36	; 0x24
 8003684:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003686:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	960b      	str	r6, [sp, #44]	; 0x2c
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 800368a:	f00d fa3d 	bl	8010b08 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800368e:	2302      	movs	r3, #2
 8003690:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003692:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003694:	a909      	add	r1, sp, #36	; 0x24
 8003696:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003698:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800369a:	960a      	str	r6, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 800369c:	f00d fa34 	bl	8010b08 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80036a0:	8829      	ldrh	r1, [r5, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	9805      	ldr	r0, [sp, #20]
 80036a6:	f00d fbcf 	bl	8010e48 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80036aa:	2005      	movs	r0, #5
 80036ac:	f009 fcae 	bl	800d00c <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036b0:	8821      	ldrh	r1, [r4, #0]
 80036b2:	9808      	ldr	r0, [sp, #32]
 80036b4:	f00d fbc2 	bl	8010e3c <HAL_GPIO_ReadPin>
 80036b8:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 80036ba:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10f      	bne.n	80036e0 <IsLowerCLIbaud+0x90>
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 80036c0:	8829      	ldrh	r1, [r5, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	9805      	ldr	r0, [sp, #20]
 80036c6:	f00d fbbf 	bl	8010e48 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 80036ca:	2005      	movs	r0, #5
 80036cc:	f009 fc9e 	bl	800d00c <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 80036d0:	8821      	ldrh	r1, [r4, #0]
 80036d2:	9808      	ldr	r0, [sp, #32]
 80036d4:	f00d fbb2 	bl	8010e3c <HAL_GPIO_ReadPin>
 80036d8:	3801      	subs	r0, #1
 80036da:	4243      	negs	r3, r0
 80036dc:	4158      	adcs	r0, r3
			return 1;
 80036de:	b2c0      	uxtb	r0, r0
}
 80036e0:	b00e      	add	sp, #56	; 0x38
 80036e2:	bd70      	pop	{r4, r5, r6, pc}

080036e4 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 80036e4:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 80036e6:	f009 fecb 	bl	800d480 <GetUart>
	
	huart->Init.BaudRate =57600;
 80036ea:	23e1      	movs	r3, #225	; 0xe1
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 80036f6:	2380      	movs	r3, #128	; 0x80
	UART_HandleTypeDef *huart =GetUart(port);
 80036f8:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 80036fa:	015b      	lsls	r3, r3, #5
 80036fc:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 80036fe:	f00e fee5 	bl	80124cc <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8003702:	2120      	movs	r1, #32
 8003704:	6822      	ldr	r2, [r4, #0]
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	430b      	orrs	r3, r1
 800370a:	6013      	str	r3, [r2, #0]
}
 800370c:	bd10      	pop	{r4, pc}
 800370e:	46c0      	nop			; (mov r8, r8)

08003710 <IsModuleParameter>:

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <IsModuleParameter+0x14>)
uint8_t IsModuleParameter(char *name){
 8003712:	b510      	push	{r4, lr}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003714:	6899      	ldr	r1, [r3, #8]
 8003716:	f7fc fcf5 	bl	8000104 <strcmp>
 800371a:	4243      	negs	r3, r0
 800371c:	4158      	adcs	r0, r3
			return i + 1;
	}
	return 0;
}
 800371e:	b2c0      	uxtb	r0, r0
 8003720:	bd10      	pop	{r4, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	20000094 	.word	0x20000094

08003728 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	46de      	mov	lr, fp
 800372c:	4657      	mov	r7, sl
 800372e:	464e      	mov	r6, r9
 8003730:	4645      	mov	r5, r8
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 8003732:	4923      	ldr	r1, [pc, #140]	; (80037c0 <IsMathOperator+0x98>)
uint8_t IsMathOperator(char *string){
 8003734:	b5e0      	push	{r5, r6, r7, lr}
 8003736:	0004      	movs	r4, r0
		if(!strcmp(string,"="))
 8003738:	f7fc fce4 	bl	8000104 <strcmp>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 800373c:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <IsMathOperator+0x9c>)
		if(!strcmp(string,"="))
 800373e:	0006      	movs	r6, r0
		else if(!strcmp(string,"<"))
 8003740:	4698      	mov	r8, r3
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 8003742:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <IsMathOperator+0xa0>)
		if(!strcmp(string,"="))
 8003744:	2506      	movs	r5, #6
		else if(!strcmp(string,">="))
 8003746:	4699      	mov	r9, r3
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003748:	4b20      	ldr	r3, [pc, #128]	; (80037cc <IsMathOperator+0xa4>)
		else if(!strcmp(string,">"))
 800374a:	4f21      	ldr	r7, [pc, #132]	; (80037d0 <IsMathOperator+0xa8>)
		else if(!strcmp(string,"<="))
 800374c:	469a      	mov	sl, r3
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 800374e:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <IsMathOperator+0xac>)
 8003750:	469b      	mov	fp, r3
		if(!strcmp(string,"="))
 8003752:	2e00      	cmp	r6, #0
 8003754:	d028      	beq.n	80037a8 <IsMathOperator+0x80>
		else if(!strcmp(string,">"))
 8003756:	0039      	movs	r1, r7
 8003758:	0020      	movs	r0, r4
 800375a:	f7fc fcd3 	bl	8000104 <strcmp>
 800375e:	2800      	cmp	r0, #0
 8003760:	d024      	beq.n	80037ac <IsMathOperator+0x84>
		else if(!strcmp(string,"<"))
 8003762:	4641      	mov	r1, r8
 8003764:	0020      	movs	r0, r4
 8003766:	f7fc fccd 	bl	8000104 <strcmp>
 800376a:	2800      	cmp	r0, #0
 800376c:	d020      	beq.n	80037b0 <IsMathOperator+0x88>
		else if(!strcmp(string,">="))
 800376e:	4649      	mov	r1, r9
 8003770:	0020      	movs	r0, r4
 8003772:	f7fc fcc7 	bl	8000104 <strcmp>
 8003776:	2800      	cmp	r0, #0
 8003778:	d01c      	beq.n	80037b4 <IsMathOperator+0x8c>
		else if(!strcmp(string,"<="))
 800377a:	4651      	mov	r1, sl
 800377c:	0020      	movs	r0, r4
 800377e:	f7fc fcc1 	bl	8000104 <strcmp>
 8003782:	2800      	cmp	r0, #0
 8003784:	d018      	beq.n	80037b8 <IsMathOperator+0x90>
		else if(!strcmp(string,"!="))
 8003786:	4659      	mov	r1, fp
 8003788:	0020      	movs	r0, r4
 800378a:	f7fc fcbb 	bl	8000104 <strcmp>
 800378e:	2800      	cmp	r0, #0
 8003790:	d014      	beq.n	80037bc <IsMathOperator+0x94>
 8003792:	3d01      	subs	r5, #1
 8003794:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003796:	2d00      	cmp	r5, #0
 8003798:	d1db      	bne.n	8003752 <IsMathOperator+0x2a>
			return MATH_NOT_EQUAL;
	}
	return 0;
 800379a:	2000      	movs	r0, #0
}
 800379c:	bc3c      	pop	{r2, r3, r4, r5}
 800379e:	4690      	mov	r8, r2
 80037a0:	4699      	mov	r9, r3
 80037a2:	46a2      	mov	sl, r4
 80037a4:	46ab      	mov	fp, r5
 80037a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 80037a8:	2001      	movs	r0, #1
 80037aa:	e7f7      	b.n	800379c <IsMathOperator+0x74>
			return MATH_GREATER;
 80037ac:	2002      	movs	r0, #2
 80037ae:	e7f5      	b.n	800379c <IsMathOperator+0x74>
			return MATH_SMALLER;
 80037b0:	2003      	movs	r0, #3
 80037b2:	e7f3      	b.n	800379c <IsMathOperator+0x74>
			return MATH_GREATER_EQUAL;
 80037b4:	2004      	movs	r0, #4
 80037b6:	e7f1      	b.n	800379c <IsMathOperator+0x74>
			return MATH_SMALLER_EQUAL;
 80037b8:	2005      	movs	r0, #5
 80037ba:	e7ef      	b.n	800379c <IsMathOperator+0x74>
			return MATH_NOT_EQUAL;
 80037bc:	2006      	movs	r0, #6
 80037be:	e7ed      	b.n	800379c <IsMathOperator+0x74>
 80037c0:	08017c58 	.word	0x08017c58
 80037c4:	08017c60 	.word	0x08017c60
 80037c8:	08017c64 	.word	0x08017c64
 80037cc:	08017c68 	.word	0x08017c68
 80037d0:	08017c5c 	.word	0x08017c5c
 80037d4:	08017c6c 	.word	0x08017c6c

080037d8 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037da:	46c6      	mov	lr, r8
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037dc:	4e12      	ldr	r6, [pc, #72]	; (8003828 <ExploreNeighbors+0x50>)
 80037de:	4b13      	ldr	r3, [pc, #76]	; (800382c <ExploreNeighbors+0x54>)
			messageParams[1] =(uint8_t )myPN;
 80037e0:	0035      	movs	r5, r6
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037e2:	0007      	movs	r7, r0
	for(uint8_t port =1; port <= NumOfPorts; port++){
 80037e4:	2401      	movs	r4, #1
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037e6:	4698      	mov	r8, r3
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037e8:	b500      	push	{lr}
			messageParams[1] =(uint8_t )myPN;
 80037ea:	3524      	adds	r5, #36	; 0x24
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037ec:	b082      	sub	sp, #8
		if(port != ignore){
 80037ee:	42a7      	cmp	r7, r4
 80037f0:	d011      	beq.n	8003816 <ExploreNeighbors+0x3e>
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037f2:	4643      	mov	r3, r8
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	2224      	movs	r2, #36	; 0x24
 80037f8:	0a19      	lsrs	r1, r3, #8
			messageParams[1] =(uint8_t )myPN;
 80037fa:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 80037fc:	2303      	movs	r3, #3
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037fe:	54b1      	strb	r1, [r6, r2]
			messageParams[2] =port;
 8003800:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003802:	2200      	movs	r2, #0
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2100      	movs	r1, #0
 8003808:	3307      	adds	r3, #7
 800380a:	0020      	movs	r0, r4
 800380c:	f005 fec6 	bl	800959c <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003810:	200a      	movs	r0, #10
 8003812:	f009 fef9 	bl	800d608 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003816:	3401      	adds	r4, #1
 8003818:	b2e4      	uxtb	r4, r4
 800381a:	2c07      	cmp	r4, #7
 800381c:	d1e7      	bne.n	80037ee <ExploreNeighbors+0x16>
		}
	}
	
	return result;
}
 800381e:	2000      	movs	r0, #0
 8003820:	b002      	add	sp, #8
 8003822:	bc04      	pop	{r2}
 8003824:	4690      	mov	r8, r2
 8003826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003828:	20000b18 	.word	0x20000b18
 800382c:	20000008 	.word	0x20000008

08003830 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003832:	4657      	mov	r7, sl
 8003834:	464e      	mov	r6, r9
 8003836:	4645      	mov	r5, r8
 8003838:	46de      	mov	lr, fp
 800383a:	b5e0      	push	{r5, r6, r7, lr}
 800383c:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 800383e:	466a      	mov	r2, sp
 8003840:	4b4b      	ldr	r3, [pc, #300]	; (8003970 <FindBroadcastRoutes+0x140>)
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003842:	af00      	add	r7, sp, #0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003844:	781d      	ldrb	r5, [r3, #0]
 8003846:	1deb      	adds	r3, r5, #7
 8003848:	08db      	lsrs	r3, r3, #3
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	469d      	mov	sp, r3
 8003850:	466e      	mov	r6, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003852:	2d00      	cmp	r5, #0
 8003854:	d00c      	beq.n	8003870 <FindBroadcastRoutes+0x40>
		modules[m] =0;
 8003856:	2100      	movs	r1, #0
 8003858:	1e6c      	subs	r4, r5, #1
 800385a:	4a46      	ldr	r2, [pc, #280]	; (8003974 <FindBroadcastRoutes+0x144>)
 800385c:	b2e4      	uxtb	r4, r4
 800385e:	3401      	adds	r4, #1
 8003860:	3254      	adds	r2, #84	; 0x54
 8003862:	446c      	add	r4, sp
 8003864:	7019      	strb	r1, [r3, #0]
 8003866:	3301      	adds	r3, #1
		bcastRoutes[m] =0;
 8003868:	8011      	strh	r1, [r2, #0]
 800386a:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 800386c:	42a3      	cmp	r3, r4
 800386e:	d1f9      	bne.n	8003864 <FindBroadcastRoutes+0x34>
	}
	modules[src - 1] =++level;					// Tag the source
 8003870:	2301      	movs	r3, #1
 8003872:	2216      	movs	r2, #22
 8003874:	3801      	subs	r0, #1
 8003876:	5433      	strb	r3, [r6, r0]
 8003878:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <FindBroadcastRoutes+0x148>)
 800387a:	4342      	muls	r2, r0
 800387c:	469c      	mov	ip, r3

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 800387e:	4b3d      	ldr	r3, [pc, #244]	; (8003974 <FindBroadcastRoutes+0x144>)
 8003880:	0040      	lsls	r0, r0, #1
 8003882:	1818      	adds	r0, r3, r0
 8003884:	2301      	movs	r3, #1
 8003886:	3202      	adds	r2, #2
 8003888:	4462      	add	r2, ip
 800388a:	469c      	mov	ip, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 800388c:	3301      	adds	r3, #1
	modules[src - 1] =++level;					// Tag the source
 800388e:	2100      	movs	r1, #0
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003890:	2454      	movs	r4, #84	; 0x54
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003892:	469a      	mov	sl, r3
 8003894:	46b3      	mov	fp, r6
 8003896:	607d      	str	r5, [r7, #4]
		if(array[src - 1][p]){
 8003898:	8813      	ldrh	r3, [r2, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <FindBroadcastRoutes+0x8a>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 800389e:	5b05      	ldrh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80038a0:	08db      	lsrs	r3, r3, #3
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80038a2:	46a8      	mov	r8, r5
 80038a4:	4665      	mov	r5, ip
 80038a6:	408d      	lsls	r5, r1
 80038a8:	46a9      	mov	r9, r5
 80038aa:	4645      	mov	r5, r8
 80038ac:	464e      	mov	r6, r9
 80038ae:	4335      	orrs	r5, r6
 80038b0:	5305      	strh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80038b2:	4655      	mov	r5, sl
 80038b4:	445b      	add	r3, fp
 80038b6:	3b01      	subs	r3, #1
 80038b8:	701d      	strb	r5, [r3, #0]
 80038ba:	3101      	adds	r1, #1
 80038bc:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 80038be:	2906      	cmp	r1, #6
 80038c0:	d1ea      	bne.n	8003898 <FindBroadcastRoutes+0x68>
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038c2:	2254      	movs	r2, #84	; 0x54
	++level;												// Move one level
 80038c4:	2302      	movs	r3, #2
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038c6:	4692      	mov	sl, r2
 80038c8:	465e      	mov	r6, fp
	++level;												// Move one level
 80038ca:	469b      	mov	fp, r3
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038cc:	4b29      	ldr	r3, [pc, #164]	; (8003974 <FindBroadcastRoutes+0x144>)
 80038ce:	687d      	ldr	r5, [r7, #4]
 80038d0:	449a      	add	sl, r3
 80038d2:	4653      	mov	r3, sl
 80038d4:	46a8      	mov	r8, r5
 80038d6:	465d      	mov	r5, fp
 80038d8:	603b      	str	r3, [r7, #0]
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038da:	4643      	mov	r3, r8
		++level;											// Move one level
 80038dc:	3501      	adds	r5, #1
 80038de:	b2ed      	uxtb	r5, r5
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d03b      	beq.n	800395c <FindBroadcastRoutes+0x12c>
 80038e4:	1e6b      	subs	r3, r5, #1
 80038e6:	4699      	mov	r9, r3
		untaged =0;								// Reset the untaged counter
 80038e8:	2300      	movs	r3, #0
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038ea:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 80038ec:	469c      	mov	ip, r3
 80038ee:	46ab      	mov	fp, r5
 80038f0:	e003      	b.n	80038fa <FindBroadcastRoutes+0xca>
 80038f2:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038f4:	b2d3      	uxtb	r3, r2
 80038f6:	4598      	cmp	r8, r3
 80038f8:	d92c      	bls.n	8003954 <FindBroadcastRoutes+0x124>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 80038fa:	5cb3      	ldrb	r3, [r6, r2]
 80038fc:	454b      	cmp	r3, r9
 80038fe:	d1f8      	bne.n	80038f2 <FindBroadcastRoutes+0xc2>
 8003900:	2116      	movs	r1, #22
 8003902:	4b1e      	ldr	r3, [pc, #120]	; (800397c <FindBroadcastRoutes+0x14c>)
 8003904:	4351      	muls	r1, r2
 8003906:	469a      	mov	sl, r3
 8003908:	2000      	movs	r0, #0
 800390a:	4451      	add	r1, sl
 800390c:	46e2      	mov	sl, ip
 800390e:	4694      	mov	ip, r2
 8003910:	0055      	lsls	r5, r2, #1
 8003912:	607d      	str	r5, [r7, #4]
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003914:	880b      	ldrh	r3, [r1, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d012      	beq.n	8003940 <FindBroadcastRoutes+0x110>
 800391a:	08db      	lsrs	r3, r3, #3
 800391c:	3b01      	subs	r3, #1
 800391e:	5cf2      	ldrb	r2, [r6, r3]
 8003920:	2a00      	cmp	r2, #0
 8003922:	d10d      	bne.n	8003940 <FindBroadcastRoutes+0x110>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003924:	683c      	ldr	r4, [r7, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	5b15      	ldrh	r5, [r2, r4]
 800392a:	2201      	movs	r2, #1
 800392c:	4082      	lsls	r2, r0
 800392e:	4315      	orrs	r5, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	5315      	strh	r5, [r2, r4]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
						++untaged;
 8003934:	4654      	mov	r4, sl
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003936:	465a      	mov	r2, fp
						++untaged;
 8003938:	3401      	adds	r4, #1
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 800393a:	54f2      	strb	r2, [r6, r3]
						++untaged;
 800393c:	b2e3      	uxtb	r3, r4
 800393e:	469a      	mov	sl, r3
 8003940:	3001      	adds	r0, #1
 8003942:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003944:	2806      	cmp	r0, #6
 8003946:	d1e5      	bne.n	8003914 <FindBroadcastRoutes+0xe4>
 8003948:	4662      	mov	r2, ip
 800394a:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 800394c:	b2d3      	uxtb	r3, r2
 800394e:	46d4      	mov	ip, sl
 8003950:	4598      	cmp	r8, r3
 8003952:	d8d2      	bhi.n	80038fa <FindBroadcastRoutes+0xca>
					}
				}
			}
		}
	} while(untaged);
 8003954:	4663      	mov	r3, ip
 8003956:	465d      	mov	r5, fp
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1be      	bne.n	80038da <FindBroadcastRoutes+0xaa>
	
	return result;
}
 800395c:	2000      	movs	r0, #0
 800395e:	46bd      	mov	sp, r7
 8003960:	b003      	add	sp, #12
 8003962:	bc3c      	pop	{r2, r3, r4, r5}
 8003964:	4690      	mov	r8, r2
 8003966:	4699      	mov	r9, r3
 8003968:	46a2      	mov	sl, r4
 800396a:	46ab      	mov	fp, r5
 800396c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	20000008 	.word	0x20000008
 8003974:	20000b18 	.word	0x20000b18
 8003978:	20000f0c 	.word	0x20000f0c
 800397c:	20000f0e 	.word	0x20000f0e

08003980 <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003982:	46de      	mov	lr, fp
 8003984:	464e      	mov	r6, r9
 8003986:	4645      	mov	r5, r8
 8003988:	4657      	mov	r7, sl
 800398a:	b5e0      	push	{r5, r6, r7, lr}
 800398c:	b091      	sub	sp, #68	; 0x44
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 800398e:	ac03      	add	r4, sp, #12
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003990:	0005      	movs	r5, r0
 8003992:	000e      	movs	r6, r1
 8003994:	9101      	str	r1, [sp, #4]
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003996:	2232      	movs	r2, #50	; 0x32
 8003998:	2100      	movs	r1, #0
 800399a:	0020      	movs	r0, r4
 800399c:	f00f f9ba 	bl	8012d14 <memset>
	uint8_t alt =0;
	uint8_t u =0;
	uint8_t v =0;
	uint8_t j =0;
	
	memset(route,0,sizeof(route));
 80039a0:	221a      	movs	r2, #26
 80039a2:	2100      	movs	r1, #0
 80039a4:	4862      	ldr	r0, [pc, #392]	; (8003b30 <FindRoute+0x1b0>)
 80039a6:	f00f f9b5 	bl	8012d14 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80039aa:	2100      	movs	r1, #0
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039ac:	2024      	movs	r0, #36	; 0x24
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80039ae:	4b61      	ldr	r3, [pc, #388]	; (8003b34 <FindRoute+0x1b4>)
 80039b0:	1e6a      	subs	r2, r5, #1
 80039b2:	469c      	mov	ip, r3
 80039b4:	189b      	adds	r3, r3, r2
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039b6:	5419      	strb	r1, [r3, r0]
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80039b8:	7219      	strb	r1, [r3, #8]
 80039ba:	2316      	movs	r3, #22
 80039bc:	4353      	muls	r3, r2
 80039be:	4a5e      	ldr	r2, [pc, #376]	; (8003b38 <FindRoute+0x1b8>)
 80039c0:	3302      	adds	r3, #2
 80039c2:	4693      	mov	fp, r2
 80039c4:	445b      	add	r3, fp
 80039c6:	4699      	mov	r9, r3
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039c8:	001a      	movs	r2, r3
	
	/* Check adjacent neighbors first! */
	for(int col =1; col <= 6; col++){
 80039ca:	3823      	subs	r0, #35	; 0x23
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 80039cc:	b2b1      	uxth	r1, r6
 80039ce:	8813      	ldrh	r3, [r2, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <FindRoute+0x5c>
 80039d4:	08db      	lsrs	r3, r3, #3
 80039d6:	428b      	cmp	r3, r1
 80039d8:	d100      	bne.n	80039dc <FindRoute+0x5c>
 80039da:	e099      	b.n	8003b10 <FindRoute+0x190>
	for(int col =1; col <= 6; col++){
 80039dc:	3001      	adds	r0, #1
 80039de:	3202      	adds	r2, #2
 80039e0:	2807      	cmp	r0, #7
 80039e2:	d1f4      	bne.n	80039ce <FindRoute+0x4e>
			return col;
		}
	}
	
	/* Initialization */
	for(int i =1; i <= N; i++){
 80039e4:	4b55      	ldr	r3, [pc, #340]	; (8003b3c <FindRoute+0x1bc>)
 80039e6:	7819      	ldrb	r1, [r3, #0]
 80039e8:	2301      	movs	r3, #1
 80039ea:	2900      	cmp	r1, #0
 80039ec:	d100      	bne.n	80039f0 <FindRoute+0x70>
 80039ee:	e09a      	b.n	8003b26 <FindRoute+0x1a6>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 80039f0:	2208      	movs	r2, #8
 80039f2:	4462      	add	r2, ip
 80039f4:	4690      	mov	r8, r2
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 80039f6:	2200      	movs	r2, #0
 80039f8:	4666      	mov	r6, ip
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 80039fa:	27ff      	movs	r7, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 80039fc:	4692      	mov	sl, r2
 80039fe:	3624      	adds	r6, #36	; 0x24
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003a00:	429d      	cmp	r5, r3
 8003a02:	d005      	beq.n	8003a10 <FindRoute+0x90>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a04:	4640      	mov	r0, r8
 8003a06:	1e5a      	subs	r2, r3, #1
 8003a08:	5487      	strb	r7, [r0, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003a0a:	4650      	mov	r0, sl
 8003a0c:	18b2      	adds	r2, r6, r2
 8003a0e:	7010      	strb	r0, [r2, #0]
	for(int i =1; i <= N; i++){
 8003a10:	3301      	adds	r3, #1
 8003a12:	428b      	cmp	r3, r1
 8003a14:	ddf4      	ble.n	8003a00 <FindRoute+0x80>
 8003a16:	2308      	movs	r3, #8
 8003a18:	4463      	add	r3, ip
	uint8_t u =0;
 8003a1a:	2500      	movs	r5, #0
 8003a1c:	4698      	mov	r8, r3
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
 8003a1e:	2201      	movs	r2, #1
	
	for(int i =0; i < N; i++){
 8003a20:	2300      	movs	r3, #0
		temp &=Q[i];
 8003a22:	5ce0      	ldrb	r0, [r4, r3]
	for(int i =0; i < N; i++){
 8003a24:	3301      	adds	r3, #1
		temp &=Q[i];
 8003a26:	4002      	ands	r2, r0
	for(int i =0; i < N; i++){
 8003a28:	428b      	cmp	r3, r1
 8003a2a:	dbfa      	blt.n	8003a22 <FindRoute+0xa2>
	while(!QnotEmpty(Q)){
 8003a2c:	2a00      	cmp	r2, #0
 8003a2e:	d000      	beq.n	8003a32 <FindRoute+0xb2>
 8003a30:	e07c      	b.n	8003b2c <FindRoute+0x1ac>
 8003a32:	4663      	mov	r3, ip
 8003a34:	7a1a      	ldrb	r2, [r3, #8]
	if(!Q[0])						// Not visited yet
 8003a36:	7823      	ldrb	r3, [r4, #0]
		smallest =arr[0];
 8003a38:	0010      	movs	r0, r2
	if(!Q[0])						// Not visited yet
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d000      	beq.n	8003a40 <FindRoute+0xc0>
	uint8_t smallest =0xFF;
 8003a3e:	20ff      	movs	r0, #255	; 0xff
 8003a40:	2500      	movs	r5, #0
 8003a42:	2300      	movs	r3, #0
 8003a44:	e001      	b.n	8003a4a <FindRoute+0xca>
 8003a46:	4642      	mov	r2, r8
 8003a48:	5c9a      	ldrb	r2, [r3, r2]
		if((arr[i] < smallest) && !Q[i]){
 8003a4a:	4290      	cmp	r0, r2
 8003a4c:	d904      	bls.n	8003a58 <FindRoute+0xd8>
 8003a4e:	5ce6      	ldrb	r6, [r4, r3]
 8003a50:	2e00      	cmp	r6, #0
 8003a52:	d101      	bne.n	8003a58 <FindRoute+0xd8>
			index =i;
 8003a54:	0010      	movs	r0, r2
 8003a56:	b2dd      	uxtb	r5, r3
	for(int i =0; i < N; i++){
 8003a58:	3301      	adds	r3, #1
 8003a5a:	428b      	cmp	r3, r1
 8003a5c:	dbf3      	blt.n	8003a46 <FindRoute+0xc6>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003a5e:	3501      	adds	r5, #1
		if(u == desID){
 8003a60:	9b01      	ldr	r3, [sp, #4]
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003a62:	b2ed      	uxtb	r5, r5
		if(u == desID){
 8003a64:	429d      	cmp	r5, r3
 8003a66:	d023      	beq.n	8003ab0 <FindRoute+0x130>
			Q[u - 1] =1;									// Remove u from Q
 8003a68:	2301      	movs	r3, #1
 8003a6a:	1e6f      	subs	r7, r5, #1
 8003a6c:	55e3      	strb	r3, [r4, r7]
 8003a6e:	2316      	movs	r3, #22
 8003a70:	465e      	mov	r6, fp
 8003a72:	437b      	muls	r3, r7
 8003a74:	360e      	adds	r6, #14
 8003a76:	1c9a      	adds	r2, r3, #2
 8003a78:	445a      	add	r2, fp
 8003a7a:	18f6      	adds	r6, r6, r3
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a7c:	4467      	add	r7, ip
 8003a7e:	9100      	str	r1, [sp, #0]
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003a80:	8813      	ldrh	r3, [r2, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00f      	beq.n	8003aa6 <FindRoute+0x126>
				v =(array[u - 1][n] >> 3);
 8003a86:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	5ce0      	ldrb	r0, [r4, r3]
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d109      	bne.n	8003aa6 <FindRoute+0x126>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a92:	7a38      	ldrb	r0, [r7, #8]
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a94:	4463      	add	r3, ip
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a96:	3001      	adds	r0, #1
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a98:	7a19      	ldrb	r1, [r3, #8]
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a9a:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a9c:	4281      	cmp	r1, r0
 8003a9e:	d902      	bls.n	8003aa6 <FindRoute+0x126>
						routePrev[v - 1] =u;
 8003aa0:	2124      	movs	r1, #36	; 0x24
						routeDist[v - 1] =alt;
 8003aa2:	7218      	strb	r0, [r3, #8]
						routePrev[v - 1] =u;
 8003aa4:	545d      	strb	r5, [r3, r1]
 8003aa6:	3202      	adds	r2, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003aa8:	42b2      	cmp	r2, r6
 8003aaa:	d1e9      	bne.n	8003a80 <FindRoute+0x100>
 8003aac:	9900      	ldr	r1, [sp, #0]
 8003aae:	e7b6      	b.n	8003a1e <FindRoute+0x9e>
 8003ab0:	3b01      	subs	r3, #1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	4463      	add	r3, ip
 8003ab6:	5c9a      	ldrb	r2, [r3, r2]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2a00      	cmp	r2, #0
 8003abc:	d101      	bne.n	8003ac2 <FindRoute+0x142>
 8003abe:	e00b      	b.n	8003ad8 <FindRoute+0x158>
 8003ac0:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003ac2:	491b      	ldr	r1, [pc, #108]	; (8003b30 <FindRoute+0x1b0>)
 8003ac4:	1c58      	adds	r0, r3, #1
 8003ac6:	54cd      	strb	r5, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ac8:	4663      	mov	r3, ip
 8003aca:	189b      	adds	r3, r3, r2
 8003acc:	3323      	adds	r3, #35	; 0x23
 8003ace:	7819      	ldrb	r1, [r3, #0]
 8003ad0:	0015      	movs	r5, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003ad2:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ad4:	2900      	cmp	r1, #0
 8003ad6:	d1f3      	bne.n	8003ac0 <FindRoute+0x140>
	for(int col =1; col <= 6; col++){
 8003ad8:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003ada:	464c      	mov	r4, r9
 8003adc:	9b01      	ldr	r3, [sp, #4]
 8003ade:	4463      	add	r3, ip
 8003ae0:	8822      	ldrh	r2, [r4, #0]
 8003ae2:	2a00      	cmp	r2, #0
 8003ae4:	d008      	beq.n	8003af8 <FindRoute+0x178>
 8003ae6:	4d12      	ldr	r5, [pc, #72]	; (8003b30 <FindRoute+0x1b0>)
 8003ae8:	79d9      	ldrb	r1, [r3, #7]
 8003aea:	46ac      	mov	ip, r5
 8003aec:	4461      	add	r1, ip
 8003aee:	3901      	subs	r1, #1
 8003af0:	7809      	ldrb	r1, [r1, #0]
 8003af2:	08d2      	lsrs	r2, r2, #3
 8003af4:	4291      	cmp	r1, r2
 8003af6:	d014      	beq.n	8003b22 <FindRoute+0x1a2>
	for(int col =1; col <= 6; col++){
 8003af8:	3001      	adds	r0, #1
 8003afa:	3402      	adds	r4, #2
 8003afc:	2807      	cmp	r0, #7
 8003afe:	d1ef      	bne.n	8003ae0 <FindRoute+0x160>
	return 0;
 8003b00:	2000      	movs	r0, #0
}
 8003b02:	b011      	add	sp, #68	; 0x44
 8003b04:	bc3c      	pop	{r2, r3, r4, r5}
 8003b06:	4690      	mov	r8, r2
 8003b08:	4699      	mov	r9, r3
 8003b0a:	46a2      	mov	sl, r4
 8003b0c:	46ab      	mov	fp, r5
 8003b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			routeDist[desID - 1] =1;
 8003b10:	9901      	ldr	r1, [sp, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	000b      	movs	r3, r1
 8003b16:	4463      	add	r3, ip
 8003b18:	71da      	strb	r2, [r3, #7]
			route[0] =desID;
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <FindRoute+0x1b0>)
			return col;
 8003b1c:	b2c0      	uxtb	r0, r0
			route[0] =desID;
 8003b1e:	7019      	strb	r1, [r3, #0]
			return col;
 8003b20:	e7ef      	b.n	8003b02 <FindRoute+0x182>
			return col;
 8003b22:	b2c0      	uxtb	r0, r0
 8003b24:	e7ed      	b.n	8003b02 <FindRoute+0x182>
	for(int i =1; i <= N; i++){
 8003b26:	425b      	negs	r3, r3
 8003b28:	2500      	movs	r5, #0
 8003b2a:	e7c2      	b.n	8003ab2 <FindRoute+0x132>
 8003b2c:	1e6b      	subs	r3, r5, #1
 8003b2e:	e7c0      	b.n	8003ab2 <FindRoute+0x132>
 8003b30:	20006fbc 	.word	0x20006fbc
 8003b34:	20000b98 	.word	0x20000b98
 8003b38:	20000f0c 	.word	0x20000f0c
 8003b3c:	20000008 	.word	0x20000008

08003b40 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b42:	4657      	mov	r7, sl
 8003b44:	464e      	mov	r6, r9
 8003b46:	46de      	mov	lr, fp
 8003b48:	4645      	mov	r5, r8
 8003b4a:	4699      	mov	r9, r3
 8003b4c:	b5e0      	push	{r5, r6, r7, lr}
	myOutport =FindRoute(myID,dst);
 8003b4e:	4c3d      	ldr	r4, [pc, #244]	; (8003c44 <remoteBootloaderUpdate+0x104>)
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003b50:	b085      	sub	sp, #20
 8003b52:	4682      	mov	sl, r0
	myOutport =FindRoute(myID,dst);
 8003b54:	7820      	ldrb	r0, [r4, #0]
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003b56:	4688      	mov	r8, r1
 8003b58:	0017      	movs	r7, r2
	myOutport =FindRoute(myID,dst);
 8003b5a:	f7ff ff11 	bl	8003980 <FindRoute>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003b5e:	464b      	mov	r3, r9
	myOutport =FindRoute(myID,dst);
 8003b60:	0006      	movs	r6, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d126      	bne.n	8003bb4 <remoteBootloaderUpdate+0x74>
		if(NumberOfHops(dst)== 1)
 8003b66:	4b38      	ldr	r3, [pc, #224]	; (8003c48 <remoteBootloaderUpdate+0x108>)
 8003b68:	7821      	ldrb	r1, [r4, #0]
 8003b6a:	4443      	add	r3, r8
 8003b6c:	79da      	ldrb	r2, [r3, #7]
 8003b6e:	2a01      	cmp	r2, #1
 8003b70:	d04e      	beq.n	8003c10 <remoteBootloaderUpdate+0xd0>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8003b72:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <remoteBootloaderUpdate+0x10c>)
 8003b74:	189b      	adds	r3, r3, r2
 8003b76:	3b01      	subs	r3, #1
 8003b78:	781d      	ldrb	r5, [r3, #0]
	if(src == myID){
 8003b7a:	458a      	cmp	sl, r1
 8003b7c:	d120      	bne.n	8003bc0 <remoteBootloaderUpdate+0x80>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003b7e:	f009 fe4f 	bl	800d820 <FreeRTOS_CLIGetOutputBuffer>
 8003b82:	4683      	mov	fp, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8003b84:	4b32      	ldr	r3, [pc, #200]	; (8003c50 <remoteBootloaderUpdate+0x110>)
 8003b86:	4642      	mov	r2, r8
 8003b88:	6819      	ldr	r1, [r3, #0]
 8003b8a:	4658      	mov	r0, fp
 8003b8c:	f00f fabc 	bl	8013108 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8003b90:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <remoteBootloaderUpdate+0x114>)
 8003b92:	4658      	mov	r0, fp
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	f00f fad7 	bl	8013148 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8003b9a:	4658      	mov	r0, fp
 8003b9c:	f7fc fabc 	bl	8000118 <strlen>
 8003ba0:	2332      	movs	r3, #50	; 0x32
 8003ba2:	b282      	uxth	r2, r0
 8003ba4:	4659      	mov	r1, fp
 8003ba6:	0038      	movs	r0, r7
 8003ba8:	f009 fc14 	bl	800d3d4 <writePxITMutex>
		Delay_ms(100);
 8003bac:	2064      	movs	r0, #100	; 0x64
 8003bae:	f00b fcaf 	bl	800f510 <HAL_Delay>
 8003bb2:	e005      	b.n	8003bc0 <remoteBootloaderUpdate+0x80>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003bb4:	7825      	ldrb	r5, [r4, #0]
 8003bb6:	4545      	cmp	r5, r8
 8003bb8:	d026      	beq.n	8003c08 <remoteBootloaderUpdate+0xc8>
	if(src == myID){
 8003bba:	4555      	cmp	r5, sl
 8003bbc:	d02c      	beq.n	8003c18 <remoteBootloaderUpdate+0xd8>
	uint8_t myOutport =0, lastModule =0;
 8003bbe:	2500      	movs	r5, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003bc0:	0038      	movs	r0, r7
 8003bc2:	f7ff fd8f 	bl	80036e4 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003bc6:	0030      	movs	r0, r6
 8003bc8:	f7ff fd8c 	bl	80036e4 <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 8003bcc:	7821      	ldrb	r1, [r4, #0]
 8003bce:	42a9      	cmp	r1, r5
 8003bd0:	d012      	beq.n	8003bf8 <remoteBootloaderUpdate+0xb8>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	9303      	str	r3, [sp, #12]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	9302      	str	r3, [sp, #8]
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	3303      	adds	r3, #3
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	0032      	movs	r2, r6
 8003be2:	000b      	movs	r3, r1
 8003be4:	0038      	movs	r0, r7
 8003be6:	f005 ff5d 	bl	8009aa4 <StartScastDMAStream>
}
 8003bea:	b005      	add	sp, #20
 8003bec:	bc3c      	pop	{r2, r3, r4, r5}
 8003bee:	4690      	mov	r8, r2
 8003bf0:	4699      	mov	r9, r3
 8003bf2:	46a2      	mov	sl, r4
 8003bf4:	46ab      	mov	fp, r5
 8003bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SwapUartPins(GetUart(myOutport),REVERSED);
 8003bf8:	0030      	movs	r0, r6
 8003bfa:	f009 fc41 	bl	800d480 <GetUart>
 8003bfe:	2101      	movs	r1, #1
 8003c00:	f009 fc4a 	bl	800d498 <SwapUartPins>
 8003c04:	7821      	ldrb	r1, [r4, #0]
 8003c06:	e7e4      	b.n	8003bd2 <remoteBootloaderUpdate+0x92>
	if(src == myID){
 8003c08:	4555      	cmp	r5, sl
 8003c0a:	d016      	beq.n	8003c3a <remoteBootloaderUpdate+0xfa>
 8003c0c:	464e      	mov	r6, r9
 8003c0e:	e7d7      	b.n	8003bc0 <remoteBootloaderUpdate+0x80>
 8003c10:	458a      	cmp	sl, r1
 8003c12:	d00d      	beq.n	8003c30 <remoteBootloaderUpdate+0xf0>
 8003c14:	000d      	movs	r5, r1
 8003c16:	e7d3      	b.n	8003bc0 <remoteBootloaderUpdate+0x80>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c18:	f009 fe02 	bl	800d820 <FreeRTOS_CLIGetOutputBuffer>
	uint8_t myOutport =0, lastModule =0;
 8003c1c:	2500      	movs	r5, #0
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c1e:	4683      	mov	fp, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8003c20:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <remoteBootloaderUpdate+0x118>)
 8003c22:	4642      	mov	r2, r8
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	4658      	mov	r0, fp
 8003c28:	464b      	mov	r3, r9
 8003c2a:	f00f fa6d 	bl	8013108 <sprintf>
 8003c2e:	e7af      	b.n	8003b90 <remoteBootloaderUpdate+0x50>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c30:	f009 fdf6 	bl	800d820 <FreeRTOS_CLIGetOutputBuffer>
 8003c34:	4655      	mov	r5, sl
 8003c36:	4683      	mov	fp, r0
 8003c38:	e7a4      	b.n	8003b84 <remoteBootloaderUpdate+0x44>
 8003c3a:	f009 fdf1 	bl	800d820 <FreeRTOS_CLIGetOutputBuffer>
 8003c3e:	464e      	mov	r6, r9
 8003c40:	4683      	mov	fp, r0
 8003c42:	e7ed      	b.n	8003c20 <remoteBootloaderUpdate+0xe0>
 8003c44:	20000a98 	.word	0x20000a98
 8003c48:	20000b98 	.word	0x20000b98
 8003c4c:	20006fbc 	.word	0x20006fbc
 8003c50:	20000090 	.word	0x20000090
 8003c54:	20000088 	.word	0x20000088
 8003c58:	2000008c 	.word	0x2000008c

08003c5c <DisplayTopology>:

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c5c:	4b5c      	ldr	r3, [pc, #368]	; (8003dd0 <DisplayTopology+0x174>)
void DisplayTopology(uint8_t port){
 8003c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c60:	001c      	movs	r4, r3
void DisplayTopology(uint8_t port){
 8003c62:	4645      	mov	r5, r8
 8003c64:	464e      	mov	r6, r9
 8003c66:	46de      	mov	lr, fp
 8003c68:	4657      	mov	r7, sl
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c6a:	3440      	adds	r4, #64	; 0x40
 8003c6c:	0022      	movs	r2, r4
void DisplayTopology(uint8_t port){
 8003c6e:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c70:	4698      	mov	r8, r3
 8003c72:	4b58      	ldr	r3, [pc, #352]	; (8003dd4 <DisplayTopology+0x178>)
void DisplayTopology(uint8_t port){
 8003c74:	0007      	movs	r7, r0
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c76:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003c78:	c223      	stmia	r2!, {r0, r1, r5}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c7a:	2501      	movs	r5, #1
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c7c:	6819      	ldr	r1, [r3, #0]
void DisplayTopology(uint8_t port){
 8003c7e:	b085      	sub	sp, #20
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c80:	6011      	str	r1, [r2, #0]
 8003c82:	889b      	ldrh	r3, [r3, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c84:	426d      	negs	r5, r5
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c86:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c88:	0021      	movs	r1, r4
 8003c8a:	2332      	movs	r3, #50	; 0x32
 8003c8c:	9500      	str	r5, [sp, #0]
 8003c8e:	2211      	movs	r2, #17
 8003c90:	0038      	movs	r0, r7
 8003c92:	f009 fb6d 	bl	800d370 <writePxMutex>
 8003c96:	4b50      	ldr	r3, [pc, #320]	; (8003dd8 <DisplayTopology+0x17c>)
 8003c98:	2601      	movs	r6, #1
 8003c9a:	4699      	mov	r9, r3
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003c9c:	0032      	movs	r2, r6
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	0020      	movs	r0, r4
 8003ca2:	f00f fa31 	bl	8013108 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ca6:	0020      	movs	r0, r4
 8003ca8:	f7fc fa36 	bl	8000118 <strlen>
 8003cac:	3601      	adds	r6, #1
 8003cae:	b282      	uxth	r2, r0
 8003cb0:	9500      	str	r5, [sp, #0]
 8003cb2:	2332      	movs	r3, #50	; 0x32
 8003cb4:	0021      	movs	r1, r4
 8003cb6:	0038      	movs	r0, r7
 8003cb8:	f009 fb5a 	bl	800d370 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003cbc:	2e07      	cmp	r6, #7
 8003cbe:	d1ed      	bne.n	8003c9c <DisplayTopology+0x40>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003cc0:	2332      	movs	r3, #50	; 0x32
 8003cc2:	9500      	str	r5, [sp, #0]
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	4945      	ldr	r1, [pc, #276]	; (8003ddc <DisplayTopology+0x180>)
 8003cc8:	0038      	movs	r0, r7
 8003cca:	f009 fb51 	bl	800d370 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003cce:	4b44      	ldr	r3, [pc, #272]	; (8003de0 <DisplayTopology+0x184>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d06c      	beq.n	8003db0 <DisplayTopology+0x154>
 8003cd6:	4b43      	ldr	r3, [pc, #268]	; (8003de4 <DisplayTopology+0x188>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003cd8:	4645      	mov	r5, r8
 8003cda:	469b      	mov	fp, r3
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cdc:	2301      	movs	r3, #1
 8003cde:	425b      	negs	r3, r3
 8003ce0:	4698      	mov	r8, r3
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003ce2:	4b41      	ldr	r3, [pc, #260]	; (8003de8 <DisplayTopology+0x18c>)
	for(uint8_t row =0; row < N; row++){
 8003ce4:	2400      	movs	r4, #0
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003ce6:	469a      	mov	sl, r3
				sprintf(pcUserMessage,"%d\t",0);
 8003ce8:	4b40      	ldr	r3, [pc, #256]	; (8003dec <DisplayTopology+0x190>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003cea:	3540      	adds	r5, #64	; 0x40
				sprintf(pcUserMessage,"%d\t",0);
 8003cec:	4699      	mov	r9, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003cee:	1c63      	adds	r3, r4, #1
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	493f      	ldr	r1, [pc, #252]	; (8003df0 <DisplayTopology+0x194>)
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	9303      	str	r3, [sp, #12]
 8003cf8:	f00f fa06 	bl	8013108 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cfc:	0028      	movs	r0, r5
 8003cfe:	f7fc fa0b 	bl	8000118 <strlen>
 8003d02:	4643      	mov	r3, r8
 8003d04:	b282      	uxth	r2, r0
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	0029      	movs	r1, r5
 8003d0a:	2332      	movs	r3, #50	; 0x32
 8003d0c:	0038      	movs	r0, r7
 8003d0e:	f009 fb2f 	bl	800d370 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d12:	2316      	movs	r3, #22
 8003d14:	435c      	muls	r4, r3
 8003d16:	465b      	mov	r3, fp
 8003d18:	5b1b      	ldrh	r3, [r3, r4]
 8003d1a:	2205      	movs	r2, #5
 8003d1c:	0059      	lsls	r1, r3, #1
 8003d1e:	18c9      	adds	r1, r1, r3
 8003d20:	4b34      	ldr	r3, [pc, #208]	; (8003df4 <DisplayTopology+0x198>)
 8003d22:	0049      	lsls	r1, r1, #1
 8003d24:	469c      	mov	ip, r3
 8003d26:	0028      	movs	r0, r5
 8003d28:	4461      	add	r1, ip
 8003d2a:	f00f fa42 	bl	80131b2 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003d2e:	4643      	mov	r3, r8
 8003d30:	2205      	movs	r2, #5
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	0029      	movs	r1, r5
 8003d36:	2332      	movs	r3, #50	; 0x32
 8003d38:	0038      	movs	r0, r7
 8003d3a:	f009 fb19 	bl	800d370 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003d3e:	4643      	mov	r3, r8
 8003d40:	2201      	movs	r2, #1
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	492c      	ldr	r1, [pc, #176]	; (8003df8 <DisplayTopology+0x19c>)
 8003d46:	2332      	movs	r3, #50	; 0x32
 8003d48:	0038      	movs	r0, r7
 8003d4a:	f009 fb11 	bl	800d370 <writePxMutex>
 8003d4e:	465b      	mov	r3, fp
 8003d50:	1ca6      	adds	r6, r4, #2
 8003d52:	330e      	adds	r3, #14
 8003d54:	445e      	add	r6, fp
 8003d56:	191c      	adds	r4, r3, r4
 8003d58:	e011      	b.n	8003d7e <DisplayTopology+0x122>
				sprintf(pcUserMessage,"%d\t",0);
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	0028      	movs	r0, r5
 8003d5e:	f00f f9d3 	bl	8013108 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d62:	0028      	movs	r0, r5
 8003d64:	f7fc f9d8 	bl	8000118 <strlen>
 8003d68:	4643      	mov	r3, r8
 8003d6a:	b282      	uxth	r2, r0
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	0029      	movs	r1, r5
 8003d70:	2332      	movs	r3, #50	; 0x32
 8003d72:	0038      	movs	r0, r7
 8003d74:	3602      	adds	r6, #2
 8003d76:	f009 fafb 	bl	800d370 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003d7a:	42a6      	cmp	r6, r4
 8003d7c:	d00a      	beq.n	8003d94 <DisplayTopology+0x138>
			if(!array[row][col])
 8003d7e:	8832      	ldrh	r2, [r6, #0]
 8003d80:	2a00      	cmp	r2, #0
 8003d82:	d0ea      	beq.n	8003d5a <DisplayTopology+0xfe>
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003d84:	2307      	movs	r3, #7
 8003d86:	4651      	mov	r1, sl
 8003d88:	4013      	ands	r3, r2
 8003d8a:	0028      	movs	r0, r5
 8003d8c:	08d2      	lsrs	r2, r2, #3
 8003d8e:	f00f f9bb 	bl	8013108 <sprintf>
 8003d92:	e7e6      	b.n	8003d62 <DisplayTopology+0x106>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003d94:	4643      	mov	r3, r8
 8003d96:	2202      	movs	r2, #2
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	4918      	ldr	r1, [pc, #96]	; (8003dfc <DisplayTopology+0x1a0>)
 8003d9c:	2332      	movs	r3, #50	; 0x32
 8003d9e:	0038      	movs	r0, r7
 8003da0:	f009 fae6 	bl	800d370 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003da4:	466b      	mov	r3, sp
 8003da6:	7b1c      	ldrb	r4, [r3, #12]
 8003da8:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <DisplayTopology+0x184>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	42a3      	cmp	r3, r4
 8003dae:	d89e      	bhi.n	8003cee <DisplayTopology+0x92>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003db0:	2301      	movs	r3, #1
 8003db2:	425b      	negs	r3, r3
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2201      	movs	r2, #1
 8003db8:	3333      	adds	r3, #51	; 0x33
 8003dba:	4911      	ldr	r1, [pc, #68]	; (8003e00 <DisplayTopology+0x1a4>)
 8003dbc:	0038      	movs	r0, r7
 8003dbe:	f009 fad7 	bl	800d370 <writePxMutex>
}
 8003dc2:	b005      	add	sp, #20
 8003dc4:	bc3c      	pop	{r2, r3, r4, r5}
 8003dc6:	4690      	mov	r8, r2
 8003dc8:	4699      	mov	r9, r3
 8003dca:	46a2      	mov	sl, r4
 8003dcc:	46ab      	mov	fp, r5
 8003dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd0:	20000b98 	.word	0x20000b98
 8003dd4:	08017c70 	.word	0x08017c70
 8003dd8:	08017c84 	.word	0x08017c84
 8003ddc:	080188f8 	.word	0x080188f8
 8003de0:	20000008 	.word	0x20000008
 8003de4:	20000f0c 	.word	0x20000f0c
 8003de8:	08017c9c 	.word	0x08017c9c
 8003dec:	08017c98 	.word	0x08017c98
 8003df0:	08017c8c 	.word	0x08017c8c
 8003df4:	0801755c 	.word	0x0801755c
 8003df8:	08017c80 	.word	0x08017c80
 8003dfc:	08017da8 	.word	0x08017da8
 8003e00:	0801930c 	.word	0x0801930c

08003e04 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e06:	4645      	mov	r5, r8
 8003e08:	46de      	mov	lr, fp
 8003e0a:	4657      	mov	r7, sl
 8003e0c:	464e      	mov	r6, r9
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e0e:	4934      	ldr	r1, [pc, #208]	; (8003ee0 <DisplayPortsDir+0xdc>)
void DisplayPortsDir(uint8_t port){
 8003e10:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e12:	3140      	adds	r1, #64	; 0x40
 8003e14:	000a      	movs	r2, r1
 8003e16:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <DisplayPortsDir+0xe0>)
void DisplayPortsDir(uint8_t port){
 8003e18:	4682      	mov	sl, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e1a:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e1c:	c231      	stmia	r2!, {r0, r4, r5}
 8003e1e:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e20:	c231      	stmia	r2!, {r0, r4, r5}
 8003e22:	681b      	ldr	r3, [r3, #0]
void DisplayPortsDir(uint8_t port){
 8003e24:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e26:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e28:	2301      	movs	r3, #1
 8003e2a:	425b      	negs	r3, r3
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	221b      	movs	r2, #27
 8003e30:	3333      	adds	r3, #51	; 0x33
 8003e32:	4650      	mov	r0, sl
 8003e34:	f009 fa9c 	bl	800d370 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003e38:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <DisplayPortsDir+0xe4>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d035      	beq.n	8003eac <DisplayPortsDir+0xa8>
 8003e40:	2301      	movs	r3, #1
 8003e42:	4699      	mov	r9, r3
 8003e44:	4b29      	ldr	r3, [pc, #164]	; (8003eec <DisplayPortsDir+0xe8>)
 8003e46:	4698      	mov	r8, r3
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e48:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <DisplayPortsDir+0xec>)
 8003e4a:	469b      	mov	fp, r3
 8003e4c:	464b      	mov	r3, r9
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e4e:	2680      	movs	r6, #128	; 0x80
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e50:	4f23      	ldr	r7, [pc, #140]	; (8003ee0 <DisplayPortsDir+0xdc>)
 8003e52:	1e5d      	subs	r5, r3, #1
 8003e54:	006d      	lsls	r5, r5, #1
	for(uint8_t i =1; i <= N; i++){
 8003e56:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e58:	0236      	lsls	r6, r6, #8
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e5a:	3740      	adds	r7, #64	; 0x40
 8003e5c:	e002      	b.n	8003e64 <DisplayPortsDir+0x60>
 8003e5e:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e60:	2c0a      	cmp	r4, #10
 8003e62:	d01b      	beq.n	8003e9c <DisplayPortsDir+0x98>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e64:	0031      	movs	r1, r6
 8003e66:	4642      	mov	r2, r8
 8003e68:	4119      	asrs	r1, r3
 8003e6a:	5b52      	ldrh	r2, [r2, r5]
 8003e6c:	1c5c      	adds	r4, r3, #1
 8003e6e:	4211      	tst	r1, r2
 8003e70:	d0f5      	beq.n	8003e5e <DisplayPortsDir+0x5a>
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e72:	0023      	movs	r3, r4
 8003e74:	464a      	mov	r2, r9
 8003e76:	4659      	mov	r1, fp
 8003e78:	0038      	movs	r0, r7
 8003e7a:	f00f f945 	bl	8013108 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003e7e:	0038      	movs	r0, r7
 8003e80:	f7fc f94a 	bl	8000118 <strlen>
 8003e84:	2301      	movs	r3, #1
 8003e86:	425b      	negs	r3, r3
 8003e88:	b282      	uxth	r2, r0
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	0039      	movs	r1, r7
 8003e8e:	3333      	adds	r3, #51	; 0x33
 8003e90:	4650      	mov	r0, sl
 8003e92:	f009 fa6d 	bl	800d370 <writePxMutex>
 8003e96:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e98:	2c0a      	cmp	r4, #10
 8003e9a:	d1e3      	bne.n	8003e64 <DisplayPortsDir+0x60>
	for(uint8_t i =1; i <= N; i++){
 8003e9c:	464b      	mov	r3, r9
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	4699      	mov	r9, r3
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <DisplayPortsDir+0xe4>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	454b      	cmp	r3, r9
 8003eaa:	d2cf      	bcs.n	8003e4c <DisplayPortsDir+0x48>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003eac:	490c      	ldr	r1, [pc, #48]	; (8003ee0 <DisplayPortsDir+0xdc>)
 8003eae:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <DisplayPortsDir+0xf0>)
 8003eb0:	3140      	adds	r1, #64	; 0x40
 8003eb2:	000a      	movs	r2, r1
 8003eb4:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003eb6:	c231      	stmia	r2!, {r0, r4, r5}
 8003eb8:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003eba:	c231      	stmia	r2!, {r0, r4, r5}
 8003ebc:	cb11      	ldmia	r3!, {r0, r4}
 8003ebe:	c211      	stmia	r2!, {r0, r4}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	425b      	negs	r3, r3
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	221f      	movs	r2, #31
 8003ec8:	3333      	adds	r3, #51	; 0x33
 8003eca:	4650      	mov	r0, sl
 8003ecc:	f009 fa50 	bl	800d370 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003ed0:	b003      	add	sp, #12
 8003ed2:	bc3c      	pop	{r2, r3, r4, r5}
 8003ed4:	4690      	mov	r8, r2
 8003ed6:	4699      	mov	r9, r3
 8003ed8:	46a2      	mov	sl, r4
 8003eda:	46ab      	mov	fp, r5
 8003edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	20000b98 	.word	0x20000b98
 8003ee4:	08017ca4 	.word	0x08017ca4
 8003ee8:	20000008 	.word	0x20000008
 8003eec:	20007334 	.word	0x20007334
 8003ef0:	08017cc0 	.word	0x08017cc0
 8003ef4:	08017cd4 	.word	0x08017cd4

08003ef8 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efa:	46de      	mov	lr, fp
 8003efc:	464e      	mov	r6, r9
 8003efe:	4645      	mov	r5, r8
 8003f00:	4657      	mov	r7, sl
 8003f02:	b5e0      	push	{r5, r6, r7, lr}
 8003f04:	b085      	sub	sp, #20
 8003f06:	9002      	str	r0, [sp, #8]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f08:	f009 fc8a 	bl	800d820 <FreeRTOS_CLIGetOutputBuffer>
	
	strcpy((char* )pcOutputString,"");
 8003f0c:	2300      	movs	r3, #0
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f0e:	0004      	movs	r4, r0
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f10:	4d97      	ldr	r5, [pc, #604]	; (8004170 <DisplayModuleStatus+0x278>)
	strcpy((char* )pcOutputString,"");
 8003f12:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f14:	4b97      	ldr	r3, [pc, #604]	; (8004174 <DisplayModuleStatus+0x27c>)
 8003f16:	3540      	adds	r5, #64	; 0x40
 8003f18:	781a      	ldrb	r2, [r3, #0]
 8003f1a:	4997      	ldr	r1, [pc, #604]	; (8004178 <DisplayModuleStatus+0x280>)
 8003f1c:	0028      	movs	r0, r5
 8003f1e:	469a      	mov	sl, r3
 8003f20:	f00f f8f2 	bl	8013108 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f24:	0029      	movs	r1, r5
 8003f26:	0020      	movs	r0, r4
 8003f28:	f00f f90e 	bl	8013148 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003f2c:	4b93      	ldr	r3, [pc, #588]	; (800417c <DisplayModuleStatus+0x284>)
 8003f2e:	4994      	ldr	r1, [pc, #592]	; (8004180 <DisplayModuleStatus+0x288>)
 8003f30:	7c1a      	ldrb	r2, [r3, #16]
 8003f32:	0028      	movs	r0, r5
 8003f34:	4698      	mov	r8, r3
 8003f36:	f00f f8e7 	bl	8013108 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f3a:	0029      	movs	r1, r5
 8003f3c:	0020      	movs	r0, r4
 8003f3e:	f00f f903 	bl	8013148 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003f42:	2305      	movs	r3, #5
 8003f44:	2200      	movs	r2, #0
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	498e      	ldr	r1, [pc, #568]	; (8004184 <DisplayModuleStatus+0x28c>)
 8003f4a:	3b03      	subs	r3, #3
 8003f4c:	0028      	movs	r0, r5
 8003f4e:	f00f f8db 	bl	8013108 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003f52:	0029      	movs	r1, r5
 8003f54:	0020      	movs	r0, r4
 8003f56:	f00f f8f7 	bl	8013148 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003f5a:	4a8b      	ldr	r2, [pc, #556]	; (8004188 <DisplayModuleStatus+0x290>)
 8003f5c:	498b      	ldr	r1, [pc, #556]	; (800418c <DisplayModuleStatus+0x294>)
 8003f5e:	0028      	movs	r0, r5
 8003f60:	f00f f8d2 	bl	8013108 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f64:	0029      	movs	r1, r5
 8003f66:	0020      	movs	r0, r4
 8003f68:	f00f f8ee 	bl	8013148 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003f6c:	4a88      	ldr	r2, [pc, #544]	; (8004190 <DisplayModuleStatus+0x298>)
 8003f6e:	4989      	ldr	r1, [pc, #548]	; (8004194 <DisplayModuleStatus+0x29c>)
 8003f70:	0028      	movs	r0, r5
 8003f72:	f00f f8c9 	bl	8013108 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f76:	0029      	movs	r1, r5
 8003f78:	0020      	movs	r0, r4
 8003f7a:	f00f f8e5 	bl	8013148 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f7e:	002a      	movs	r2, r5
 8003f80:	4b85      	ldr	r3, [pc, #532]	; (8004198 <DisplayModuleStatus+0x2a0>)
 8003f82:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003f84:	c243      	stmia	r2!, {r0, r1, r6}
 8003f86:	6819      	ldr	r1, [r3, #0]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f88:	0020      	movs	r0, r4
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f8a:	6011      	str	r1, [r2, #0]
 8003f8c:	8899      	ldrh	r1, [r3, #4]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f8e:	2601      	movs	r6, #1
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f90:	8091      	strh	r1, [r2, #4]
 8003f92:	799b      	ldrb	r3, [r3, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f94:	0029      	movs	r1, r5
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f96:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f98:	f00f f8d6 	bl	8013148 <strcat>
 8003f9c:	4b7f      	ldr	r3, [pc, #508]	; (800419c <DisplayModuleStatus+0x2a4>)
 8003f9e:	4699      	mov	r9, r3
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8003fa0:	4b7f      	ldr	r3, [pc, #508]	; (80041a0 <DisplayModuleStatus+0x2a8>)
 8003fa2:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"P%d: ",i);
 8003fa4:	0032      	movs	r2, r6
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	0028      	movs	r0, r5
 8003faa:	f00f f8ad 	bl	8013108 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8003fae:	0029      	movs	r1, r5
 8003fb0:	0020      	movs	r0, r4
 8003fb2:	f00f f8c9 	bl	8013148 <strcat>
		switch(portStatus[i]){
 8003fb6:	4643      	mov	r3, r8
 8003fb8:	3314      	adds	r3, #20
 8003fba:	5cf3      	ldrb	r3, [r6, r3]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d80b      	bhi.n	8003fd8 <DisplayModuleStatus+0xe0>
 8003fc0:	465a      	mov	r2, fp
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	58d3      	ldr	r3, [r2, r3]
 8003fc6:	469f      	mov	pc, r3
				break;
			case STREAM:
				sprintf(pcUserMessage,"Streaming\n\r");
				break;
			case CLI:
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8003fc8:	002a      	movs	r2, r5
 8003fca:	4b76      	ldr	r3, [pc, #472]	; (80041a4 <DisplayModuleStatus+0x2ac>)
 8003fcc:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003fce:	c283      	stmia	r2!, {r0, r1, r7}
 8003fd0:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003fd2:	c283      	stmia	r2!, {r0, r1, r7}
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	8013      	strh	r3, [r2, #0]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8003fd8:	0029      	movs	r1, r5
 8003fda:	0020      	movs	r0, r4
 8003fdc:	3601      	adds	r6, #1
 8003fde:	f00f f8b3 	bl	8013148 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003fe2:	2e07      	cmp	r6, #7
 8003fe4:	d1de      	bne.n	8003fa4 <DisplayModuleStatus+0xac>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8003fe6:	002a      	movs	r2, r5
 8003fe8:	4b6f      	ldr	r3, [pc, #444]	; (80041a8 <DisplayModuleStatus+0x2b0>)
	strcat((char* )pcOutputString,pcUserMessage);
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8003fea:	46a0      	mov	r8, r4
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8003fec:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fee:	c243      	stmia	r2!, {r0, r1, r6}
 8003ff0:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ff2:	c243      	stmia	r2!, {r0, r1, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 8003ff4:	0029      	movs	r1, r5
 8003ff6:	0020      	movs	r0, r4
 8003ff8:	f00f f8a6 	bl	8013148 <strcat>
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8003ffc:	4b6b      	ldr	r3, [pc, #428]	; (80041ac <DisplayModuleStatus+0x2b4>)
 8003ffe:	4e6c      	ldr	r6, [pc, #432]	; (80041b0 <DisplayModuleStatus+0x2b8>)
	strcat((char* )pcOutputString,pcUserMessage);
 8004000:	2501      	movs	r5, #1
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004002:	469b      	mov	fp, r3
 8004004:	e01d      	b.n	8004042 <DisplayModuleStatus+0x14a>
 8004006:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004008:	f007 fb84 	bl	800b714 <GetPort>
 800400c:	465a      	mov	r2, fp
 800400e:	00ab      	lsls	r3, r5, #2
 8004010:	3b04      	subs	r3, #4
 8004012:	0004      	movs	r4, r0
 8004014:	58d0      	ldr	r0, [r2, r3]
 8004016:	f007 fb7d 	bl	800b714 <GetPort>
 800401a:	2340      	movs	r3, #64	; 0x40
 800401c:	4699      	mov	r9, r3
 800401e:	4b54      	ldr	r3, [pc, #336]	; (8004170 <DisplayModuleStatus+0x278>)
 8004020:	002a      	movs	r2, r5
 8004022:	469c      	mov	ip, r3
 8004024:	44e1      	add	r9, ip
 8004026:	9000      	str	r0, [sp, #0]
 8004028:	0023      	movs	r3, r4
 800402a:	4962      	ldr	r1, [pc, #392]	; (80041b4 <DisplayModuleStatus+0x2bc>)
 800402c:	4648      	mov	r0, r9
 800402e:	f00f f86b 	bl	8013108 <sprintf>
 8004032:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 8004034:	4649      	mov	r1, r9
 8004036:	4640      	mov	r0, r8
 8004038:	f00f f886 	bl	8013148 <strcat>
 800403c:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 800403e:	2d07      	cmp	r5, #7
 8004040:	d011      	beq.n	8004066 <DisplayModuleStatus+0x16e>
		if(streamDMA[i - 1].Instance == 0){
 8004042:	6833      	ldr	r3, [r6, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1de      	bne.n	8004006 <DisplayModuleStatus+0x10e>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004048:	4c49      	ldr	r4, [pc, #292]	; (8004170 <DisplayModuleStatus+0x278>)
 800404a:	002a      	movs	r2, r5
 800404c:	3440      	adds	r4, #64	; 0x40
 800404e:	495a      	ldr	r1, [pc, #360]	; (80041b8 <DisplayModuleStatus+0x2c0>)
 8004050:	0020      	movs	r0, r4
 8004052:	f00f f859 	bl	8013108 <sprintf>
 8004056:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 8004058:	0021      	movs	r1, r4
 800405a:	4640      	mov	r0, r8
 800405c:	f00f f874 	bl	8013148 <strcat>
 8004060:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 8004062:	2d07      	cmp	r5, #7
 8004064:	d1ed      	bne.n	8004042 <DisplayModuleStatus+0x14a>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004066:	4640      	mov	r0, r8
 8004068:	f7fc f856 	bl	8000118 <strlen>
 800406c:	4644      	mov	r4, r8
 800406e:	0005      	movs	r5, r0
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
	temp =strlen((char* )pcOutputString);
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004070:	2680      	movs	r6, #128	; 0x80
	strcat((char* )pcOutputString,"\n\r");
 8004072:	4b52      	ldr	r3, [pc, #328]	; (80041bc <DisplayModuleStatus+0x2c4>)
 8004074:	2202      	movs	r2, #2
 8004076:	0019      	movs	r1, r3
 8004078:	1820      	adds	r0, r4, r0
 800407a:	4699      	mov	r9, r3
 800407c:	f00e fe41 	bl	8012d02 <memcpy>
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004080:	1ca8      	adds	r0, r5, #2
 8004082:	221d      	movs	r2, #29
 8004084:	1820      	adds	r0, r4, r0
 8004086:	494e      	ldr	r1, [pc, #312]	; (80041c0 <DisplayModuleStatus+0x2c8>)
 8004088:	f00e fe3b 	bl	8012d02 <memcpy>
 800408c:	4b4d      	ldr	r3, [pc, #308]	; (80041c4 <DisplayModuleStatus+0x2cc>)
		{
			sprintf(pcUserMessage,"P%d ",p);
 800408e:	4f38      	ldr	r7, [pc, #224]	; (8004170 <DisplayModuleStatus+0x278>)
 8004090:	4698      	mov	r8, r3
 8004092:	4b4d      	ldr	r3, [pc, #308]	; (80041c8 <DisplayModuleStatus+0x2d0>)
	temp =strlen((char* )pcOutputString);
 8004094:	351e      	adds	r5, #30
 8004096:	9503      	str	r5, [sp, #12]
 8004098:	2200      	movs	r2, #0
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800409a:	0236      	lsls	r6, r6, #8
			sprintf(pcUserMessage,"P%d ",p);
 800409c:	469b      	mov	fp, r3
 800409e:	3740      	adds	r7, #64	; 0x40
 80040a0:	e002      	b.n	80040a8 <DisplayModuleStatus+0x1b0>
 80040a2:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80040a4:	2d06      	cmp	r5, #6
 80040a6:	d016      	beq.n	80040d6 <DisplayModuleStatus+0x1de>
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040a8:	4653      	mov	r3, sl
 80040aa:	4641      	mov	r1, r8
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	1c55      	adds	r5, r2, #1
 80040b0:	3b01      	subs	r3, #1
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	5acb      	ldrh	r3, [r1, r3]
 80040b6:	0031      	movs	r1, r6
 80040b8:	4111      	asrs	r1, r2
 80040ba:	4219      	tst	r1, r3
 80040bc:	d0f1      	beq.n	80040a2 <DisplayModuleStatus+0x1aa>
			sprintf(pcUserMessage,"P%d ",p);
 80040be:	002a      	movs	r2, r5
 80040c0:	4659      	mov	r1, fp
 80040c2:	0038      	movs	r0, r7
 80040c4:	f00f f820 	bl	8013108 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80040c8:	0039      	movs	r1, r7
 80040ca:	0020      	movs	r0, r4
 80040cc:	f00f f83c 	bl	8013148 <strcat>
 80040d0:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80040d2:	2d06      	cmp	r5, #6
 80040d4:	d1e8      	bne.n	80040a8 <DisplayModuleStatus+0x1b0>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 80040d6:	0020      	movs	r0, r4
 80040d8:	f7fc f81e 	bl	8000118 <strlen>
 80040dc:	466b      	mov	r3, sp
 80040de:	899b      	ldrh	r3, [r3, #12]
 80040e0:	0005      	movs	r5, r0
 80040e2:	1820      	adds	r0, r4, r0
 80040e4:	42ab      	cmp	r3, r5
 80040e6:	d03c      	beq.n	8004162 <DisplayModuleStatus+0x26a>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 80040e8:	2203      	movs	r2, #3
 80040ea:	4649      	mov	r1, r9
 80040ec:	f00e fe09 	bl	8012d02 <memcpy>
	
	/* Display output */
	if(port)
 80040f0:	9b02      	ldr	r3, [sp, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <DisplayModuleStatus+0x216>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 80040f6:	0020      	movs	r0, r4
 80040f8:	f7fc f80e 	bl	8000118 <strlen>
 80040fc:	2301      	movs	r3, #1
 80040fe:	425b      	negs	r3, r3
 8004100:	b282      	uxth	r2, r0
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	0021      	movs	r1, r4
 8004106:	3333      	adds	r3, #51	; 0x33
 8004108:	9802      	ldr	r0, [sp, #8]
 800410a:	f009 f931 	bl	800d370 <writePxMutex>
	
}
 800410e:	b005      	add	sp, #20
 8004110:	bc3c      	pop	{r2, r3, r4, r5}
 8004112:	4690      	mov	r8, r2
 8004114:	4699      	mov	r9, r3
 8004116:	46a2      	mov	sl, r4
 8004118:	46ab      	mov	fp, r5
 800411a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"Streaming\n\r");
 800411c:	002a      	movs	r2, r5
 800411e:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <DisplayModuleStatus+0x2d4>)
 8004120:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004122:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 8004124:	e758      	b.n	8003fd8 <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8004126:	002a      	movs	r2, r5
 8004128:	4b29      	ldr	r3, [pc, #164]	; (80041d0 <DisplayModuleStatus+0x2d8>)
 800412a:	cb83      	ldmia	r3!, {r0, r1, r7}
 800412c:	c283      	stmia	r2!, {r0, r1, r7}
 800412e:	cb03      	ldmia	r3!, {r0, r1}
 8004130:	c203      	stmia	r2!, {r0, r1}
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	7013      	strb	r3, [r2, #0]
				break;
 8004136:	e74f      	b.n	8003fd8 <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004138:	002b      	movs	r3, r5
 800413a:	4a26      	ldr	r2, [pc, #152]	; (80041d4 <DisplayModuleStatus+0x2dc>)
 800413c:	ca83      	ldmia	r2!, {r0, r1, r7}
 800413e:	c383      	stmia	r3!, {r0, r1, r7}
 8004140:	ca83      	ldmia	r2!, {r0, r1, r7}
 8004142:	c383      	stmia	r3!, {r0, r1, r7}
 8004144:	6811      	ldr	r1, [r2, #0]
 8004146:	6019      	str	r1, [r3, #0]
 8004148:	8891      	ldrh	r1, [r2, #4]
 800414a:	8099      	strh	r1, [r3, #4]
 800414c:	7992      	ldrb	r2, [r2, #6]
 800414e:	719a      	strb	r2, [r3, #6]
				break;
 8004150:	e742      	b.n	8003fd8 <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Free\n\r");
 8004152:	4b21      	ldr	r3, [pc, #132]	; (80041d8 <DisplayModuleStatus+0x2e0>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	602a      	str	r2, [r5, #0]
 8004158:	889a      	ldrh	r2, [r3, #4]
 800415a:	80aa      	strh	r2, [r5, #4]
 800415c:	799b      	ldrb	r3, [r3, #6]
 800415e:	71ab      	strb	r3, [r5, #6]
				break;
 8004160:	e73a      	b.n	8003fd8 <DisplayModuleStatus+0xe0>
		strcat((char* )pcOutputString,"None");
 8004162:	2205      	movs	r2, #5
 8004164:	491d      	ldr	r1, [pc, #116]	; (80041dc <DisplayModuleStatus+0x2e4>)
 8004166:	f00e fdcc 	bl	8012d02 <memcpy>
 800416a:	1d28      	adds	r0, r5, #4
 800416c:	1820      	adds	r0, r4, r0
 800416e:	e7bb      	b.n	80040e8 <DisplayModuleStatus+0x1f0>
 8004170:	20000b98 	.word	0x20000b98
 8004174:	20000a98 	.word	0x20000a98
 8004178:	08017cf4 	.word	0x08017cf4
 800417c:	20000c18 	.word	0x20000c18
 8004180:	08017d10 	.word	0x08017d10
 8004184:	08017d2c 	.word	0x08017d2c
 8004188:	08017d4c 	.word	0x08017d4c
 800418c:	08017d58 	.word	0x08017d58
 8004190:	08017d70 	.word	0x08017d70
 8004194:	08017d7c 	.word	0x08017d7c
 8004198:	08017d98 	.word	0x08017d98
 800419c:	08017dac 	.word	0x08017dac
 80041a0:	080174b0 	.word	0x080174b0
 80041a4:	08017de0 	.word	0x08017de0
 80041a8:	08017e1c 	.word	0x08017e1c
 80041ac:	2000132c 	.word	0x2000132c
 80041b0:	20001c78 	.word	0x20001c78
 80041b4:	08017e50 	.word	0x08017e50
 80041b8:	08017e34 	.word	0x08017e34
 80041bc:	08017da8 	.word	0x08017da8
 80041c0:	08017e80 	.word	0x08017e80
 80041c4:	20007334 	.word	0x20007334
 80041c8:	08017ea0 	.word	0x08017ea0
 80041cc:	08017dd4 	.word	0x08017dd4
 80041d0:	08017dbc 	.word	0x08017dbc
 80041d4:	08017dfc 	.word	0x08017dfc
 80041d8:	08017db4 	.word	0x08017db4
 80041dc:	08017ea8 	.word	0x08017ea8

080041e0 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 80041e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e2:	46c6      	mov	lr, r8
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 80041e4:	4929      	ldr	r1, [pc, #164]	; (800428c <GetID+0xac>)
int16_t GetID(char *string){
 80041e6:	b500      	push	{lr}
 80041e8:	0006      	movs	r6, r0
	if(!strcmp(string,"me")) /* Check keywords */
 80041ea:	f7fb ff8b 	bl	8000104 <strcmp>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d02c      	beq.n	800424c <GetID+0x6c>
		return myID;
	else if(!strcmp(string,"all"))
 80041f2:	4927      	ldr	r1, [pc, #156]	; (8004290 <GetID+0xb0>)
 80041f4:	0030      	movs	r0, r6
 80041f6:	f7fb ff85 	bl	8000104 <strcmp>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d02b      	beq.n	8004256 <GetID+0x76>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 80041fe:	7833      	ldrb	r3, [r6, #0]
 8004200:	4698      	mov	r8, r3
 8004202:	2b23      	cmp	r3, #35	; 0x23
 8004204:	d030      	beq.n	8004268 <GetID+0x88>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 8004206:	4b23      	ldr	r3, [pc, #140]	; (8004294 <GetID+0xb4>)
 8004208:	781f      	ldrb	r7, [r3, #0]
 800420a:	2f00      	cmp	r7, #0
 800420c:	d00f      	beq.n	800422e <GetID+0x4e>
 800420e:	2400      	movs	r4, #0
 8004210:	4d21      	ldr	r5, [pc, #132]	; (8004298 <GetID+0xb8>)
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004212:	0029      	movs	r1, r5
 8004214:	0030      	movs	r0, r6
 8004216:	f7fb ff75 	bl	8000104 <strcmp>
 800421a:	2800      	cmp	r0, #0
 800421c:	d102      	bne.n	8004224 <GetID+0x44>
 800421e:	4643      	mov	r3, r8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d11a      	bne.n	800425a <GetID+0x7a>
		for(i =0; i < N; i++){
 8004224:	3401      	adds	r4, #1
 8004226:	b2e4      	uxtb	r4, r4
 8004228:	350a      	adds	r5, #10
 800422a:	42a7      	cmp	r7, r4
 800422c:	d1f1      	bne.n	8004212 <GetID+0x32>
 800422e:	2400      	movs	r4, #0
 8004230:	4d1a      	ldr	r5, [pc, #104]	; (800429c <GetID+0xbc>)
 8004232:	3538      	adds	r5, #56	; 0x38
				return (i);
		}
		
		/* Check group alias */
		for(i =0; i < MaxNumOfGroups; i++){
			if(!strcmp(string,groupAlias[i]))
 8004234:	0029      	movs	r1, r5
 8004236:	0030      	movs	r0, r6
 8004238:	f7fb ff64 	bl	8000104 <strcmp>
 800423c:	2800      	cmp	r0, #0
 800423e:	d00e      	beq.n	800425e <GetID+0x7e>
 8004240:	3401      	adds	r4, #1
 8004242:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8004244:	2c0a      	cmp	r4, #10
 8004246:	d1f5      	bne.n	8004234 <GetID+0x54>
				return (BOS_MULTICAST | (i << 8));
		}
		
		return BOS_ERR_WrongName;
 8004248:	2064      	movs	r0, #100	; 0x64
 800424a:	e001      	b.n	8004250 <GetID+0x70>
		return myID;
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <GetID+0xbc>)
 800424e:	7818      	ldrb	r0, [r3, #0]
	}
	
}
 8004250:	bc04      	pop	{r2}
 8004252:	4690      	mov	r8, r2
 8004254:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_BROADCAST;
 8004256:	20ff      	movs	r0, #255	; 0xff
 8004258:	e7fa      	b.n	8004250 <GetID+0x70>
				return (i);
 800425a:	b220      	sxth	r0, r4
 800425c:	e7f8      	b.n	8004250 <GetID+0x70>
				return (BOS_MULTICAST | (i << 8));
 800425e:	20fe      	movs	r0, #254	; 0xfe
 8004260:	0224      	lsls	r4, r4, #8
 8004262:	4320      	orrs	r0, r4
 8004264:	b200      	sxth	r0, r0
 8004266:	e7f3      	b.n	8004250 <GetID+0x70>
		id =atol(string + 1);
 8004268:	1c70      	adds	r0, r6, #1
 800426a:	f00e fa8a 	bl	8012782 <atol>
 800426e:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <GetID+0x9c>
 8004274:	4a07      	ldr	r2, [pc, #28]	; (8004294 <GetID+0xb4>)
 8004276:	7812      	ldrb	r2, [r2, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d204      	bcs.n	8004286 <GetID+0xa6>
		else if(id == myID)
 800427c:	4a07      	ldr	r2, [pc, #28]	; (800429c <GetID+0xbc>)
			return BOS_ERR_WrongID;
 800427e:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 8004280:	7812      	ldrb	r2, [r2, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d1e4      	bne.n	8004250 <GetID+0x70>
			return myID;
 8004286:	b218      	sxth	r0, r3
 8004288:	e7e2      	b.n	8004250 <GetID+0x70>
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	08017eb0 	.word	0x08017eb0
 8004290:	08017eb4 	.word	0x08017eb4
 8004294:	20000008 	.word	0x20000008
 8004298:	20000dfc 	.word	0x20000dfc
 800429c:	20000a98 	.word	0x20000a98

080042a0 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 80042a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a2:	46c6      	mov	lr, r8
 80042a4:	4c2c      	ldr	r4, [pc, #176]	; (8004358 <NameModule+0xb8>)
 80042a6:	0007      	movs	r7, r0
 80042a8:	0026      	movs	r6, r4
 80042aa:	000d      	movs	r5, r1
 80042ac:	b500      	push	{lr}
 80042ae:	3610      	adds	r6, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 80042b0:	0021      	movs	r1, r4
 80042b2:	0028      	movs	r0, r5
 80042b4:	f7fb ff26 	bl	8000104 <strcmp>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d040      	beq.n	800433e <NameModule+0x9e>
 80042bc:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 80042be:	42a6      	cmp	r6, r4
 80042c0:	d1f6      	bne.n	80042b0 <NameModule+0x10>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 80042c2:	4b26      	ldr	r3, [pc, #152]	; (800435c <NameModule+0xbc>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d914      	bls.n	80042f4 <NameModule+0x54>
 80042ca:	4c25      	ldr	r4, [pc, #148]	; (8004360 <NameModule+0xc0>)
 80042cc:	009e      	lsls	r6, r3, #2
 80042ce:	18f6      	adds	r6, r6, r3
 80042d0:	0023      	movs	r3, r4
 80042d2:	0076      	lsls	r6, r6, #1
 80042d4:	3b0a      	subs	r3, #10
 80042d6:	18f6      	adds	r6, r6, r3
 80042d8:	e002      	b.n	80042e0 <NameModule+0x40>
 80042da:	340a      	adds	r4, #10
 80042dc:	42b4      	cmp	r4, r6
 80042de:	d009      	beq.n	80042f4 <NameModule+0x54>
		if(!strcmp(alias,moduleAlias[i]))
 80042e0:	0021      	movs	r1, r4
 80042e2:	0028      	movs	r0, r5
 80042e4:	f7fb ff0e 	bl	8000104 <strcmp>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d1f6      	bne.n	80042da <NameModule+0x3a>
			return BOS_ERR_ExistingAlias;
 80042ec:	2007      	movs	r0, #7

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
	
	return result;
}
 80042ee:	bc04      	pop	{r2}
 80042f0:	4690      	mov	r8, r2
 80042f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f4:	4e1b      	ldr	r6, [pc, #108]	; (8004364 <NameModule+0xc4>)
 80042f6:	0034      	movs	r4, r6
 80042f8:	369c      	adds	r6, #156	; 0x9c
 80042fa:	3438      	adds	r4, #56	; 0x38
		if(!strcmp(alias,groupAlias[i]))
 80042fc:	0021      	movs	r1, r4
 80042fe:	0028      	movs	r0, r5
 8004300:	f7fb ff00 	bl	8000104 <strcmp>
 8004304:	2800      	cmp	r0, #0
 8004306:	d0f1      	beq.n	80042ec <NameModule+0x4c>
 8004308:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 800430a:	42a6      	cmp	r6, r4
 800430c:	d1f6      	bne.n	80042fc <NameModule+0x5c>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800430e:	4b16      	ldr	r3, [pc, #88]	; (8004368 <NameModule+0xc8>)
 8004310:	4c16      	ldr	r4, [pc, #88]	; (800436c <NameModule+0xcc>)
 8004312:	4698      	mov	r8, r3
 8004314:	61dc      	str	r4, [r3, #28]
 8004316:	e004      	b.n	8004322 <NameModule+0x82>
 8004318:	4643      	mov	r3, r8
 800431a:	6864      	ldr	r4, [r4, #4]
 800431c:	61dc      	str	r4, [r3, #28]
 800431e:	2c00      	cmp	r4, #0
 8004320:	d00f      	beq.n	8004342 <NameModule+0xa2>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	681e      	ldr	r6, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004326:	0030      	movs	r0, r6
 8004328:	f7fb fef6 	bl	8000118 <strlen>
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800432c:	0031      	movs	r1, r6
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800432e:	0002      	movs	r2, r0
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004330:	0028      	movs	r0, r5
 8004332:	f00e ff2d 	bl	8013190 <strncmp>
 8004336:	2800      	cmp	r0, #0
 8004338:	d1ee      	bne.n	8004318 <NameModule+0x78>
			return BOS_ERR_ExistingCmd;
 800433a:	2008      	movs	r0, #8
 800433c:	e7d7      	b.n	80042ee <NameModule+0x4e>
			return BOS_ERR_Keyword;
 800433e:	2006      	movs	r0, #6
 8004340:	e7d5      	b.n	80042ee <NameModule+0x4e>
	strcpy(moduleAlias[module],alias);
 8004342:	00b8      	lsls	r0, r7, #2
 8004344:	19c0      	adds	r0, r0, r7
 8004346:	4f0a      	ldr	r7, [pc, #40]	; (8004370 <NameModule+0xd0>)
 8004348:	0040      	lsls	r0, r0, #1
 800434a:	0029      	movs	r1, r5
 800434c:	19c0      	adds	r0, r0, r7
 800434e:	f00e ff17 	bl	8013180 <strcpy>
	result =SaveEEalias();
 8004352:	f7ff f881 	bl	8003458 <SaveEEalias>
	return result;
 8004356:	e7ca      	b.n	80042ee <NameModule+0x4e>
 8004358:	0801750c 	.word	0x0801750c
 800435c:	20000008 	.word	0x20000008
 8004360:	20000e06 	.word	0x20000e06
 8004364:	20000a98 	.word	0x20000a98
 8004368:	20000c18 	.word	0x20000c18
 800436c:	200000b8 	.word	0x200000b8
 8004370:	20000dfc 	.word	0x20000dfc

08004374 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004376:	464f      	mov	r7, r9
 8004378:	4646      	mov	r6, r8
 800437a:	46d6      	mov	lr, sl
 800437c:	4b3e      	ldr	r3, [pc, #248]	; (8004478 <AddModuleToGroup+0x104>)
 800437e:	b5c0      	push	{r6, r7, lr}
 8004380:	001f      	movs	r7, r3
 8004382:	3738      	adds	r7, #56	; 0x38
 8004384:	4680      	mov	r8, r0
 8004386:	000e      	movs	r6, r1
 8004388:	4699      	mov	r9, r3
 800438a:	003c      	movs	r4, r7
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 800438c:	2500      	movs	r5, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800438e:	0021      	movs	r1, r4
 8004390:	0030      	movs	r0, r6
 8004392:	f7fb feb7 	bl	8000104 <strcmp>
 8004396:	2800      	cmp	r0, #0
 8004398:	d02a      	beq.n	80043f0 <AddModuleToGroup+0x7c>
	for(i =0; i < MaxNumOfGroups; i++){
 800439a:	3501      	adds	r5, #1
 800439c:	340a      	adds	r4, #10
 800439e:	2d0a      	cmp	r5, #10
 80043a0:	d1f5      	bne.n	800438e <AddModuleToGroup+0x1a>
 80043a2:	4c36      	ldr	r4, [pc, #216]	; (800447c <AddModuleToGroup+0x108>)
 80043a4:	0025      	movs	r5, r4
 80043a6:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 80043a8:	0021      	movs	r1, r4
 80043aa:	0030      	movs	r0, r6
 80043ac:	f7fb feaa 	bl	8000104 <strcmp>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d051      	beq.n	8004458 <AddModuleToGroup+0xe4>
 80043b4:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 80043b6:	42a5      	cmp	r5, r4
 80043b8:	d1f6      	bne.n	80043a8 <AddModuleToGroup+0x34>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 80043ba:	4b31      	ldr	r3, [pc, #196]	; (8004480 <AddModuleToGroup+0x10c>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d920      	bls.n	8004404 <AddModuleToGroup+0x90>
 80043c2:	4c30      	ldr	r4, [pc, #192]	; (8004484 <AddModuleToGroup+0x110>)
 80043c4:	009d      	lsls	r5, r3, #2
 80043c6:	18ed      	adds	r5, r5, r3
 80043c8:	0023      	movs	r3, r4
 80043ca:	006d      	lsls	r5, r5, #1
 80043cc:	3b0a      	subs	r3, #10
 80043ce:	18ed      	adds	r5, r5, r3
 80043d0:	e002      	b.n	80043d8 <AddModuleToGroup+0x64>
 80043d2:	340a      	adds	r4, #10
 80043d4:	42a5      	cmp	r5, r4
 80043d6:	d015      	beq.n	8004404 <AddModuleToGroup+0x90>
		if(!strcmp(group,moduleAlias[j]))
 80043d8:	0021      	movs	r1, r4
 80043da:	0030      	movs	r0, r6
 80043dc:	f7fb fe92 	bl	8000104 <strcmp>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d1f6      	bne.n	80043d2 <AddModuleToGroup+0x5e>
			return BOS_ERR_ExistingAlias;
 80043e4:	2007      	movs	r0, #7
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 80043e6:	bc1c      	pop	{r2, r3, r4}
 80043e8:	4690      	mov	r8, r2
 80043ea:	4699      	mov	r9, r3
 80043ec:	46a2      	mov	sl, r4
 80043ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			groupModules[module - 1] |=(0x0001 << i);
 80043f0:	2201      	movs	r2, #1
 80043f2:	4647      	mov	r7, r8
 80043f4:	40aa      	lsls	r2, r5
 80043f6:	3f01      	subs	r7, #1
 80043f8:	007f      	lsls	r7, r7, #1
 80043fa:	444f      	add	r7, r9
 80043fc:	88bb      	ldrh	r3, [r7, #4]
 80043fe:	4313      	orrs	r3, r2
 8004400:	80bb      	strh	r3, [r7, #4]
			return result;
 8004402:	e7f0      	b.n	80043e6 <AddModuleToGroup+0x72>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004404:	4b20      	ldr	r3, [pc, #128]	; (8004488 <AddModuleToGroup+0x114>)
 8004406:	4c21      	ldr	r4, [pc, #132]	; (800448c <AddModuleToGroup+0x118>)
 8004408:	469a      	mov	sl, r3
 800440a:	621c      	str	r4, [r3, #32]
 800440c:	e004      	b.n	8004418 <AddModuleToGroup+0xa4>
 800440e:	4653      	mov	r3, sl
 8004410:	6864      	ldr	r4, [r4, #4]
 8004412:	621c      	str	r4, [r3, #32]
 8004414:	2c00      	cmp	r4, #0
 8004416:	d00d      	beq.n	8004434 <AddModuleToGroup+0xc0>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800441c:	0028      	movs	r0, r5
 800441e:	f7fb fe7b 	bl	8000118 <strlen>
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004422:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004424:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004426:	0030      	movs	r0, r6
 8004428:	f00e feb2 	bl	8013190 <strncmp>
 800442c:	2800      	cmp	r0, #0
 800442e:	d1ee      	bne.n	800440e <AddModuleToGroup+0x9a>
			return BOS_ERR_ExistingCmd;
 8004430:	2008      	movs	r0, #8
 8004432:	e7d8      	b.n	80043e6 <AddModuleToGroup+0x72>
		if(!groupAlias[i][0]){
 8004434:	783b      	ldrb	r3, [r7, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d010      	beq.n	800445c <AddModuleToGroup+0xe8>
	for(i =0; i < MaxNumOfGroups; i++){
 800443a:	3401      	adds	r4, #1
 800443c:	370a      	adds	r7, #10
 800443e:	2c0a      	cmp	r4, #10
 8004440:	d1f8      	bne.n	8004434 <AddModuleToGroup+0xc0>
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	00db      	lsls	r3, r3, #3
	groupModules[module - 1] |=(0x0001 << i);
 8004446:	4647      	mov	r7, r8
 8004448:	3f01      	subs	r7, #1
 800444a:	007f      	lsls	r7, r7, #1
 800444c:	444f      	add	r7, r9
 800444e:	88ba      	ldrh	r2, [r7, #4]
	return result;
 8004450:	2000      	movs	r0, #0
	groupModules[module - 1] |=(0x0001 << i);
 8004452:	4313      	orrs	r3, r2
 8004454:	80bb      	strh	r3, [r7, #4]
	return result;
 8004456:	e7c6      	b.n	80043e6 <AddModuleToGroup+0x72>
			return BOS_ERR_Keyword;
 8004458:	2006      	movs	r0, #6
 800445a:	e7c4      	b.n	80043e6 <AddModuleToGroup+0x72>
			strcpy(groupAlias[i],group);
 800445c:	464b      	mov	r3, r9
 800445e:	00a0      	lsls	r0, r4, #2
 8004460:	1900      	adds	r0, r0, r4
 8004462:	3338      	adds	r3, #56	; 0x38
 8004464:	0040      	lsls	r0, r0, #1
 8004466:	1818      	adds	r0, r3, r0
 8004468:	0031      	movs	r1, r6
 800446a:	f00e fe89 	bl	8013180 <strcpy>
 800446e:	2301      	movs	r3, #1
 8004470:	40a3      	lsls	r3, r4
 8004472:	b21b      	sxth	r3, r3
			break;
 8004474:	e7e7      	b.n	8004446 <AddModuleToGroup+0xd2>
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	20000a98 	.word	0x20000a98
 800447c:	0801750c 	.word	0x0801750c
 8004480:	20000008 	.word	0x20000008
 8004484:	20000e06 	.word	0x20000e06
 8004488:	20000c18 	.word	0x20000c18
 800448c:	200000b8 	.word	0x200000b8

08004490 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 8004490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004492:	4657      	mov	r7, sl
 8004494:	46de      	mov	lr, fp
 8004496:	464e      	mov	r6, r9
 8004498:	4645      	mov	r5, r8
 800449a:	b5e0      	push	{r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 800449c:	4b29      	ldr	r3, [pc, #164]	; (8004544 <ReadPortsDir+0xb4>)
BOS_Status ReadPortsDir(void){
 800449e:	b083      	sub	sp, #12
	for(uint8_t i =1; i <= N; i++){
 80044a0:	469a      	mov	sl, r3
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d04a      	beq.n	800453e <ReadPortsDir+0xae>
	BOS_Status result =BOS_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	4b26      	ldr	r3, [pc, #152]	; (8004548 <ReadPortsDir+0xb8>)
	for(uint8_t i =1; i <= N; i++){
 80044ae:	2501      	movs	r5, #1
 80044b0:	4698      	mov	r8, r3
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <ReadPortsDir+0xbc>)
 80044b4:	4699      	mov	r9, r3
			if(responseStatus != BOS_OK){
 80044b6:	4b26      	ldr	r3, [pc, #152]	; (8004550 <ReadPortsDir+0xc0>)
 80044b8:	469b      	mov	fp, r3
 80044ba:	e014      	b.n	80044e6 <ReadPortsDir+0x56>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 80044bc:	2200      	movs	r2, #0
 80044be:	2113      	movs	r1, #19
 80044c0:	0028      	movs	r0, r5
 80044c2:	f005 facb 	bl	8009a5c <SendMessageToModule>
			Delay_ms_no_rtos(50);
 80044c6:	2032      	movs	r0, #50	; 0x32
 80044c8:	f008 fda0 	bl	800d00c <StartMilliDelay>
			if(responseStatus != BOS_OK){
 80044cc:	2324      	movs	r3, #36	; 0x24
 80044ce:	465a      	mov	r2, fp
 80044d0:	5cd3      	ldrb	r3, [r2, r3]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <ReadPortsDir+0x4a>
				result =BOS_ERR_NoResponse;
 80044d6:	2302      	movs	r3, #2
 80044d8:	9301      	str	r3, [sp, #4]
	for(uint8_t i =1; i <= N; i++){
 80044da:	4653      	mov	r3, sl
 80044dc:	3501      	adds	r5, #1
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b2ed      	uxtb	r5, r5
 80044e2:	42ab      	cmp	r3, r5
 80044e4:	d323      	bcc.n	800452e <ReadPortsDir+0x9e>
		if(i != myID){
 80044e6:	4643      	mov	r3, r8
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	42ab      	cmp	r3, r5
 80044ec:	d1e6      	bne.n	80044bc <ReadPortsDir+0x2c>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 80044ee:	2780      	movs	r7, #128	; 0x80
 80044f0:	2600      	movs	r6, #0
			for(uint8_t p =1; p <= NumOfPorts; p++){
 80044f2:	2401      	movs	r4, #1
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 80044f4:	023f      	lsls	r7, r7, #8
 80044f6:	0020      	movs	r0, r4
 80044f8:	f008 ffc2 	bl	800d480 <GetUart>
 80044fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044fe:	42bb      	cmp	r3, r7
 8004500:	d10a      	bne.n	8004518 <ReadPortsDir+0x88>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 8004502:	0039      	movs	r1, r7
 8004504:	4643      	mov	r3, r8
 8004506:	464a      	mov	r2, r9
 8004508:	4131      	asrs	r1, r6
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	3b01      	subs	r3, #1
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	5a9a      	ldrh	r2, [r3, r2]
 8004512:	430a      	orrs	r2, r1
 8004514:	4649      	mov	r1, r9
 8004516:	525a      	strh	r2, [r3, r1]
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004518:	3401      	adds	r4, #1
 800451a:	b2e4      	uxtb	r4, r4
 800451c:	3601      	adds	r6, #1
 800451e:	2c07      	cmp	r4, #7
 8004520:	d1e9      	bne.n	80044f6 <ReadPortsDir+0x66>
	for(uint8_t i =1; i <= N; i++){
 8004522:	4653      	mov	r3, sl
 8004524:	3501      	adds	r5, #1
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	b2ed      	uxtb	r5, r5
 800452a:	42ab      	cmp	r3, r5
 800452c:	d2db      	bcs.n	80044e6 <ReadPortsDir+0x56>
			}
		}
	}
	
	return result;
}
 800452e:	9801      	ldr	r0, [sp, #4]
 8004530:	b003      	add	sp, #12
 8004532:	bc3c      	pop	{r2, r3, r4, r5}
 8004534:	4690      	mov	r8, r2
 8004536:	4699      	mov	r9, r3
 8004538:	46a2      	mov	sl, r4
 800453a:	46ab      	mov	fp, r5
 800453c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	e7f4      	b.n	800452e <ReadPortsDir+0x9e>
 8004544:	20000008 	.word	0x20000008
 8004548:	20000a98 	.word	0x20000a98
 800454c:	20007334 	.word	0x20007334
 8004550:	20000c18 	.word	0x20000c18

08004554 <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 8004554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004556:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004558:	2680      	movs	r6, #128	; 0x80
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <UpdateMyPortsDir+0x5c>)
BOS_Status UpdateMyPortsDir(void){
 800455c:	b500      	push	{lr}
 800455e:	2500      	movs	r5, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004560:	2401      	movs	r4, #1
 8004562:	4698      	mov	r8, r3
 8004564:	4f13      	ldr	r7, [pc, #76]	; (80045b4 <UpdateMyPortsDir+0x60>)
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004566:	0236      	lsls	r6, r6, #8
 8004568:	e009      	b.n	800457e <UpdateMyPortsDir+0x2a>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800456a:	3401      	adds	r4, #1
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
 800456c:	f008 ff88 	bl	800d480 <GetUart>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004570:	b2e4      	uxtb	r4, r4
			SwapUartPins(GetUart(p),NORMAL);
 8004572:	2100      	movs	r1, #0
 8004574:	f008 ff90 	bl	800d498 <SwapUartPins>
 8004578:	3501      	adds	r5, #1
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800457a:	2c07      	cmp	r4, #7
 800457c:	d013      	beq.n	80045a6 <UpdateMyPortsDir+0x52>
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 800457e:	4642      	mov	r2, r8
 8004580:	783b      	ldrb	r3, [r7, #0]
			SwapUartPins(GetUart(p),NORMAL);
 8004582:	0020      	movs	r0, r4
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004584:	3b01      	subs	r3, #1
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	5ad3      	ldrh	r3, [r2, r3]
 800458a:	0032      	movs	r2, r6
 800458c:	412a      	asrs	r2, r5
 800458e:	421a      	tst	r2, r3
 8004590:	d0eb      	beq.n	800456a <UpdateMyPortsDir+0x16>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004592:	3401      	adds	r4, #1
		}
		else{
			/* Port is reversed */
			SwapUartPins(GetUart(p),REVERSED);
 8004594:	f008 ff74 	bl	800d480 <GetUart>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004598:	b2e4      	uxtb	r4, r4
			SwapUartPins(GetUart(p),REVERSED);
 800459a:	2101      	movs	r1, #1
 800459c:	f008 ff7c 	bl	800d498 <SwapUartPins>
 80045a0:	3501      	adds	r5, #1
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80045a2:	2c07      	cmp	r4, #7
 80045a4:	d1eb      	bne.n	800457e <UpdateMyPortsDir+0x2a>
		}
	}
	
	return result;
}
 80045a6:	2000      	movs	r0, #0
 80045a8:	bc04      	pop	{r2}
 80045aa:	4690      	mov	r8, r2
 80045ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	20007334 	.word	0x20007334
 80045b4:	20000a98 	.word	0x20000a98

080045b8 <BOS_Init>:
void BOS_Init(void){
 80045b8:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 80045ba:	f008 fbdb 	bl	800cd74 <RTC_Init>
	GetTimeDate();
 80045be:	f008 fc7f 	bl	800cec0 <GetTimeDate>
	EE_Init();
 80045c2:	f003 fa55 	bl	8007a70 <EE_Init>
	GPIO_Init();
 80045c6:	f008 f93d 	bl	800c844 <GPIO_Init>
	DMA_Init();
 80045ca:	f007 f8d3 	bl	800b774 <DMA_Init>
	TIM_USEC_Init();
 80045ce:	f008 fca9 	bl	800cf24 <TIM_USEC_Init>
	CRC_Init();
 80045d2:	f008 f8f7 	bl	800c7c4 <CRC_Init>
	TIM_MSEC_Init();
 80045d6:	f008 fcd7 	bl	800cf88 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 80045da:	f008 f9e3 	bl	800c9a4 <IsFactoryReset>
 80045de:	2800      	cmp	r0, #0
 80045e0:	d162      	bne.n	80046a8 <BOS_Init+0xf0>
	if(IsLowerCLIbaud()){
 80045e2:	f7ff f835 	bl	8003650 <IsLowerCLIbaud>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d053      	beq.n	8004692 <BOS_Init+0xda>
		CLI_LOW_Baudrate_Flag =1;
 80045ea:	2322      	movs	r3, #34	; 0x22
 80045ec:	2101      	movs	r1, #1
 80045ee:	4a38      	ldr	r2, [pc, #224]	; (80046d0 <BOS_Init+0x118>)
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80045f0:	2032      	movs	r0, #50	; 0x32
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80045f2:	2401      	movs	r4, #1
		CLI_LOW_Baudrate_Flag =1;
 80045f4:	54d1      	strb	r1, [r2, r3]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80045f6:	f008 fd09 	bl	800d00c <StartMilliDelay>
		Module_Peripheral_Init();
 80045fa:	f007 f86f 	bl	800b6dc <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80045fe:	21e1      	movs	r1, #225	; 0xe1
 8004600:	4d34      	ldr	r5, [pc, #208]	; (80046d4 <BOS_Init+0x11c>)
			UpdateBaudrate(port,BOS.clibaudrate);
 8004602:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004604:	3401      	adds	r4, #1
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8004606:	0249      	lsls	r1, r1, #9
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004608:	b2e4      	uxtb	r4, r4
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800460a:	60a9      	str	r1, [r5, #8]
			UpdateBaudrate(port,BOS.clibaudrate);
 800460c:	f008 ff26 	bl	800d45c <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004610:	2c07      	cmp	r4, #7
 8004612:	d007      	beq.n	8004624 <BOS_Init+0x6c>
			UpdateBaudrate(port,BOS.clibaudrate);
 8004614:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004616:	3401      	adds	r4, #1
 8004618:	68a9      	ldr	r1, [r5, #8]
 800461a:	b2e4      	uxtb	r4, r4
			UpdateBaudrate(port,BOS.clibaudrate);
 800461c:	f008 ff1e 	bl	800d45c <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004620:	2c07      	cmp	r4, #7
 8004622:	d1f7      	bne.n	8004614 <BOS_Init+0x5c>
	LoadEEvars();
 8004624:	f7fe fede 	bl	80033e4 <LoadEEvars>
	UpdateMyPortsDir();
 8004628:	f7ff ff94 	bl	8004554 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 800462c:	f007 fd5a 	bl	800c0e4 <SetupMessagingRxDMAs>
		IND_ON();
 8004630:	2180      	movs	r1, #128	; 0x80
 8004632:	2090      	movs	r0, #144	; 0x90
	if(myID == 0) /* Native module */
 8004634:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <BOS_Init+0x120>)
		IND_ON();
 8004636:	2201      	movs	r2, #1
	if(myID == 0) /* Native module */
 8004638:	781b      	ldrb	r3, [r3, #0]
		IND_ON();
 800463a:	0109      	lsls	r1, r1, #4
 800463c:	05c0      	lsls	r0, r0, #23
	if(myID == 0) /* Native module */
 800463e:	2b00      	cmp	r3, #0
 8004640:	d02d      	beq.n	800469e <BOS_Init+0xe6>
		IND_ON();
 8004642:	f00c fc01 	bl	8010e48 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8004646:	20fa      	movs	r0, #250	; 0xfa
 8004648:	0040      	lsls	r0, r0, #1
 800464a:	f008 fcdf 	bl	800d00c <StartMilliDelay>
		IND_OFF();
 800464e:	2180      	movs	r1, #128	; 0x80
 8004650:	2090      	movs	r0, #144	; 0x90
 8004652:	2200      	movs	r2, #0
 8004654:	0109      	lsls	r1, r1, #4
 8004656:	05c0      	lsls	r0, r0, #23
 8004658:	f00c fbf6 	bl	8010e48 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 800465c:	2064      	movs	r0, #100	; 0x64
 800465e:	f008 fcd5 	bl	800d00c <StartMilliDelay>
		IND_ON();
 8004662:	2180      	movs	r1, #128	; 0x80
 8004664:	2090      	movs	r0, #144	; 0x90
 8004666:	2201      	movs	r2, #1
 8004668:	05c0      	lsls	r0, r0, #23
 800466a:	0109      	lsls	r1, r1, #4
 800466c:	f00c fbec 	bl	8010e48 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004670:	2064      	movs	r0, #100	; 0x64
 8004672:	f008 fccb 	bl	800d00c <StartMilliDelay>
		IND_OFF();
 8004676:	2180      	movs	r1, #128	; 0x80
 8004678:	2090      	movs	r0, #144	; 0x90
 800467a:	2200      	movs	r2, #0
 800467c:	0109      	lsls	r1, r1, #4
 800467e:	05c0      	lsls	r0, r0, #23
 8004680:	f00c fbe2 	bl	8010e48 <HAL_GPIO_WritePin>
	ResetUartORE();
 8004684:	f003 f864 	bl	8007750 <ResetUartORE>
	BOS_initialized =1;
 8004688:	2325      	movs	r3, #37	; 0x25
 800468a:	2101      	movs	r1, #1
 800468c:	4a13      	ldr	r2, [pc, #76]	; (80046dc <BOS_Init+0x124>)
 800468e:	54d1      	strb	r1, [r2, r3]
}
 8004690:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004692:	2032      	movs	r0, #50	; 0x32
 8004694:	f008 fcba 	bl	800d00c <StartMilliDelay>
		Module_Peripheral_Init();
 8004698:	f007 f820 	bl	800b6dc <Module_Peripheral_Init>
 800469c:	e7c2      	b.n	8004624 <BOS_Init+0x6c>
		IND_ON();
 800469e:	f00c fbd3 	bl	8010e48 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 80046a2:	20fa      	movs	r0, #250	; 0xfa
 80046a4:	0040      	lsls	r0, r0, #1
 80046a6:	e7e4      	b.n	8004672 <BOS_Init+0xba>
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 80046a8:	4c0d      	ldr	r4, [pc, #52]	; (80046e0 <BOS_Init+0x128>)
 80046aa:	4d0e      	ldr	r5, [pc, #56]	; (80046e4 <BOS_Init+0x12c>)
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	42ab      	cmp	r3, r5
 80046b0:	d004      	beq.n	80046bc <BOS_Init+0x104>
		if(EE_Format() == HAL_OK){
 80046b2:	f003 f98d 	bl	80079d0 <EE_Format>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d100      	bne.n	80046bc <BOS_Init+0x104>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 80046ba:	6025      	str	r5, [r4, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80046bc:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046c0:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <BOS_Init+0x130>)
 80046c2:	4a0a      	ldr	r2, [pc, #40]	; (80046ec <BOS_Init+0x134>)
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	e7fd      	b.n	80046ca <BOS_Init+0x112>
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	20000b18 	.word	0x20000b18
 80046d4:	20006ea8 	.word	0x20006ea8
 80046d8:	20000a98 	.word	0x20000a98
 80046dc:	20000c18 	.word	0x20000c18
 80046e0:	20007ff0 	.word	0x20007ff0
 80046e4:	beefdead 	.word	0xbeefdead
 80046e8:	e000ed00 	.word	0xe000ed00
 80046ec:	05fa0004 	.word	0x05fa0004

080046f0 <Module_Init>:
void Module_Init(void){
 80046f0:	b510      	push	{r4, lr}
	HAL_Init();
 80046f2:	f00a feef 	bl	800f4d4 <HAL_Init>
	SystemClock_Config();
 80046f6:	f006 fe8b 	bl	800b410 <SystemClock_Config>
	BOS_Init();
 80046fa:	f7ff ff5d 	bl	80045b8 <BOS_Init>
	MX_FREERTOS_Init();
 80046fe:	f003 fb0f 	bl	8007d20 <MX_FREERTOS_Init>
	osKernelStart();
 8004702:	f008 ff7b 	bl	800d5fc <osKernelStart>
}
 8004706:	bd10      	pop	{r4, pc}

08004708 <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800470a:	4645      	mov	r5, r8
 800470c:	4657      	mov	r7, sl
 800470e:	464e      	mov	r6, r9
 8004710:	46de      	mov	lr, fp
 8004712:	b5e0      	push	{r5, r6, r7, lr}
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 8004714:	4f82      	ldr	r7, [pc, #520]	; (8004920 <WriteToRemote+0x218>)
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004716:	b083      	sub	sp, #12
 8004718:	ac0c      	add	r4, sp, #48	; 0x30
 800471a:	cc40      	ldmia	r4!, {r6}
	response =BOSMessaging.response;
 800471c:	783d      	ldrb	r5, [r7, #0]
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 800471e:	9001      	str	r0, [sp, #4]
 8004720:	7824      	ldrb	r4, [r4, #0]
	response =BOSMessaging.response;
 8004722:	46a8      	mov	r8, r5
	if(timeout)
 8004724:	2e00      	cmp	r6, #0
 8004726:	d059      	beq.n	80047dc <WriteToRemote+0xd4>
		BOSMessaging.response = BOS_RESPONSE_MSG;
 8004728:	2520      	movs	r5, #32
 800472a:	703d      	strb	r5, [r7, #0]
	else
		BOSMessaging.response = BOS_RESPONSE_NONE;
	
	/* Check if a force write is needed */
	if(force)
		code = CODE_WRITE_REMOTE_FORCE;
 800472c:	4265      	negs	r5, r4
 800472e:	416c      	adcs	r4, r5
 8004730:	2501      	movs	r5, #1
 8004732:	2022      	movs	r0, #34	; 0x22
 8004734:	4264      	negs	r4, r4
 8004736:	43ac      	bics	r4, r5
 8004738:	46a3      	mov	fp, r4
 800473a:	4684      	mov	ip, r0
 800473c:	b2d5      	uxtb	r5, r2
 800473e:	46a9      	mov	r9, r5
	else
		code = CODE_WRITE_REMOTE;
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 8004740:	4d78      	ldr	r5, [pc, #480]	; (8004924 <WriteToRemote+0x21c>)
		code = CODE_WRITE_REMOTE_FORCE;
 8004742:	44e3      	add	fp, ip
	if(remoteAddress < FLASH_BASE){
 8004744:	42aa      	cmp	r2, r5
 8004746:	d829      	bhi.n	800479c <WriteToRemote+0x94>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 8004748:	2224      	movs	r2, #36	; 0x24
 800474a:	464c      	mov	r4, r9
 800474c:	4d76      	ldr	r5, [pc, #472]	; (8004928 <WriteToRemote+0x220>)
 800474e:	54ac      	strb	r4, [r5, r2]
		messageParams[1] =format;						// Send local format
 8004750:	002a      	movs	r2, r5
 8004752:	3224      	adds	r2, #36	; 0x24
 8004754:	7053      	strb	r3, [r2, #1]
		/* Send variable value based on local format */
		switch(format){
 8004756:	2b08      	cmp	r3, #8
 8004758:	d814      	bhi.n	8004784 <WriteToRemote+0x7c>
 800475a:	4a74      	ldr	r2, [pc, #464]	; (800492c <WriteToRemote+0x224>)
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	58d3      	ldr	r3, [r2, r3]
 8004760:	469f      	mov	pc, r3
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
				SendMessageToModule(module,code,10);
				break;
			case FMT_INT32:
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 8004762:	680b      	ldr	r3, [r1, #0]
 8004764:	3524      	adds	r5, #36	; 0x24
 8004766:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 8004768:	680b      	ldr	r3, [r1, #0]
 800476a:	121b      	asrs	r3, r3, #8
 800476c:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 800476e:	680b      	ldr	r3, [r1, #0]
 8004770:	141b      	asrs	r3, r3, #16
 8004772:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004774:	680b      	ldr	r3, [r1, #0]
 8004776:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,code,10);
 8004778:	220a      	movs	r2, #10
 800477a:	4659      	mov	r1, fp
 800477c:	9801      	ldr	r0, [sp, #4]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 800477e:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,code,10);
 8004780:	f005 f96c 	bl	8009a5c <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 8004784:	4643      	mov	r3, r8
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 8004786:	2000      	movs	r0, #0
	BOSMessaging.response =response;
 8004788:	703b      	strb	r3, [r7, #0]
	if(timeout){
 800478a:	2e00      	cmp	r6, #0
 800478c:	d128      	bne.n	80047e0 <WriteToRemote+0xd8>
}
 800478e:	b003      	add	sp, #12
 8004790:	bc3c      	pop	{r2, r3, r4, r5}
 8004792:	4690      	mov	r8, r2
 8004794:	4699      	mov	r9, r3
 8004796:	46a2      	mov	sl, r4
 8004798:	46ab      	mov	fp, r5
 800479a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		messageParams[0] =0;
 800479c:	2024      	movs	r0, #36	; 0x24
 800479e:	4684      	mov	ip, r0
 80047a0:	2000      	movs	r0, #0
 80047a2:	4682      	mov	sl, r0
 80047a4:	4660      	mov	r0, ip
 80047a6:	4654      	mov	r4, sl
 80047a8:	4d5f      	ldr	r5, [pc, #380]	; (8004928 <WriteToRemote+0x220>)
		messageParams[1] =format;							// Local format
 80047aa:	44ac      	add	ip, r5
		messageParams[0] =0;
 80047ac:	542c      	strb	r4, [r5, r0]
		messageParams[1] =format;							// Local format
 80047ae:	4660      	mov	r0, ip
 80047b0:	7043      	strb	r3, [r0, #1]
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 80047b2:	0e10      	lsrs	r0, r2, #24
 80047b4:	4682      	mov	sl, r0
 80047b6:	4660      	mov	r0, ip
 80047b8:	4654      	mov	r4, sl
 80047ba:	7084      	strb	r4, [r0, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80047bc:	0c10      	lsrs	r0, r2, #16
 80047be:	4682      	mov	sl, r0
 80047c0:	4660      	mov	r0, ip
 80047c2:	4654      	mov	r4, sl
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 80047c4:	0a12      	lsrs	r2, r2, #8
 80047c6:	7102      	strb	r2, [r0, #4]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80047c8:	70c4      	strb	r4, [r0, #3]
		messageParams[5] =(uint8_t )remoteAddress;
 80047ca:	4662      	mov	r2, ip
 80047cc:	4648      	mov	r0, r9
 80047ce:	7150      	strb	r0, [r2, #5]
		switch(format){
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d8d7      	bhi.n	8004784 <WriteToRemote+0x7c>
 80047d4:	4a56      	ldr	r2, [pc, #344]	; (8004930 <WriteToRemote+0x228>)
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	58d3      	ldr	r3, [r2, r3]
 80047da:	469f      	mov	pc, r3
		BOSMessaging.response = BOS_RESPONSE_NONE;
 80047dc:	703e      	strb	r6, [r7, #0]
 80047de:	e7a5      	b.n	800472c <WriteToRemote+0x24>
		uint32_t t0 =HAL_GetTick();
 80047e0:	f00a fe90 	bl	800f504 <HAL_GetTick>
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80047e4:	2424      	movs	r4, #36	; 0x24
		uint32_t t0 =HAL_GetTick();
 80047e6:	0007      	movs	r7, r0
 80047e8:	4d52      	ldr	r5, [pc, #328]	; (8004934 <WriteToRemote+0x22c>)
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80047ea:	5d28      	ldrb	r0, [r5, r4]
 80047ec:	2800      	cmp	r0, #0
 80047ee:	d0ce      	beq.n	800478e <WriteToRemote+0x86>
 80047f0:	f00a fe88 	bl	800f504 <HAL_GetTick>
 80047f4:	1bc0      	subs	r0, r0, r7
 80047f6:	42b0      	cmp	r0, r6
 80047f8:	d3f7      	bcc.n	80047ea <WriteToRemote+0xe2>
 80047fa:	5d28      	ldrb	r0, [r5, r4]
		return responseStatus;
 80047fc:	e7c7      	b.n	800478e <WriteToRemote+0x86>
				messageParams[2] =*(__IO int8_t* )localAddress;
 80047fe:	780b      	ldrb	r3, [r1, #0]
 8004800:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 8004802:	2203      	movs	r2, #3
 8004804:	2120      	movs	r1, #32
 8004806:	9801      	ldr	r0, [sp, #4]
				messageParams[2] =*(__IO int8_t* )localAddress;
 8004808:	70ab      	strb	r3, [r5, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 800480a:	f005 f927 	bl	8009a5c <SendMessageToModule>
				break;
 800480e:	e7b9      	b.n	8004784 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO int8_t* )localAddress;
 8004810:	780b      	ldrb	r3, [r1, #0]
 8004812:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,code,7);
 8004814:	2207      	movs	r2, #7
 8004816:	4659      	mov	r1, fp
 8004818:	9801      	ldr	r0, [sp, #4]
				messageParams[6] =*(__IO int8_t* )localAddress;
 800481a:	71ab      	strb	r3, [r5, #6]
				SendMessageToModule(module,code,7);
 800481c:	f005 f91e 	bl	8009a5c <SendMessageToModule>
				break;
 8004820:	e7b0      	b.n	8004784 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 8004822:	680b      	ldr	r3, [r1, #0]
 8004824:	3524      	adds	r5, #36	; 0x24
 8004826:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 8004828:	680b      	ldr	r3, [r1, #0]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 800482e:	680b      	ldr	r3, [r1, #0]
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004834:	680b      	ldr	r3, [r1, #0]
 8004836:	0e1b      	lsrs	r3, r3, #24
 8004838:	e79e      	b.n	8004778 <WriteToRemote+0x70>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 800483a:	780b      	ldrb	r3, [r1, #0]
 800483c:	3524      	adds	r5, #36	; 0x24
 800483e:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004840:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004842:	220a      	movs	r2, #10
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004844:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 8004846:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004848:	9801      	ldr	r0, [sp, #4]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 800484a:	712b      	strb	r3, [r5, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 800484c:	78cb      	ldrb	r3, [r1, #3]
 800484e:	716b      	strb	r3, [r5, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 8004850:	790b      	ldrb	r3, [r1, #4]
 8004852:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 8004854:	794b      	ldrb	r3, [r1, #5]
 8004856:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 8004858:	798b      	ldrb	r3, [r1, #6]
 800485a:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800485c:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800485e:	2120      	movs	r1, #32
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004860:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004862:	f005 f8fb 	bl	8009a5c <SendMessageToModule>
				break;
 8004866:	e78d      	b.n	8004784 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 8004868:	780b      	ldrb	r3, [r1, #0]
 800486a:	3524      	adds	r5, #36	; 0x24
 800486c:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 800486e:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,code,14);
 8004870:	220e      	movs	r2, #14
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004872:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004874:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,code,14);
 8004876:	9801      	ldr	r0, [sp, #4]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004878:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 800487a:	78cb      	ldrb	r3, [r1, #3]
 800487c:	726b      	strb	r3, [r5, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 800487e:	790b      	ldrb	r3, [r1, #4]
 8004880:	72ab      	strb	r3, [r5, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 8004882:	794b      	ldrb	r3, [r1, #5]
 8004884:	72eb      	strb	r3, [r5, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 8004886:	798b      	ldrb	r3, [r1, #6]
 8004888:	732b      	strb	r3, [r5, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800488a:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,code,14);
 800488c:	4659      	mov	r1, fp
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800488e:	736b      	strb	r3, [r5, #13]
				SendMessageToModule(module,code,14);
 8004890:	f005 f8e4 	bl	8009a5c <SendMessageToModule>
				break;
 8004894:	e776      	b.n	8004784 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 8004896:	880b      	ldrh	r3, [r1, #0]
 8004898:	3524      	adds	r5, #36	; 0x24
 800489a:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 800489c:	880b      	ldrh	r3, [r1, #0]
 800489e:	b21b      	sxth	r3, r3
 80048a0:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,code,8);
 80048a2:	2208      	movs	r2, #8
 80048a4:	4659      	mov	r1, fp
 80048a6:	9801      	ldr	r0, [sp, #4]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80048a8:	71eb      	strb	r3, [r5, #7]
				SendMessageToModule(module,code,8);
 80048aa:	f005 f8d7 	bl	8009a5c <SendMessageToModule>
				break;
 80048ae:	e769      	b.n	8004784 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 80048b0:	880b      	ldrh	r3, [r1, #0]
 80048b2:	3524      	adds	r5, #36	; 0x24
 80048b4:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 80048b6:	880b      	ldrh	r3, [r1, #0]
 80048b8:	0a1b      	lsrs	r3, r3, #8
 80048ba:	e7f2      	b.n	80048a2 <WriteToRemote+0x19a>
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 80048bc:	680b      	ldr	r3, [r1, #0]
 80048be:	3524      	adds	r5, #36	; 0x24
 80048c0:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80048c2:	680b      	ldr	r3, [r1, #0]
 80048c4:	121b      	asrs	r3, r3, #8
 80048c6:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 80048c8:	680b      	ldr	r3, [r1, #0]
 80048ca:	141b      	asrs	r3, r3, #16
 80048cc:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80048ce:	680b      	ldr	r3, [r1, #0]
 80048d0:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80048d2:	2206      	movs	r2, #6
 80048d4:	2120      	movs	r1, #32
 80048d6:	9801      	ldr	r0, [sp, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80048d8:	716b      	strb	r3, [r5, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80048da:	f005 f8bf 	bl	8009a5c <SendMessageToModule>
				break;
 80048de:	e751      	b.n	8004784 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 80048e0:	680b      	ldr	r3, [r1, #0]
 80048e2:	3524      	adds	r5, #36	; 0x24
 80048e4:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 80048e6:	680b      	ldr	r3, [r1, #0]
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 80048ec:	680b      	ldr	r3, [r1, #0]
 80048ee:	0c1b      	lsrs	r3, r3, #16
 80048f0:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 80048f2:	680b      	ldr	r3, [r1, #0]
 80048f4:	0e1b      	lsrs	r3, r3, #24
 80048f6:	e7ec      	b.n	80048d2 <WriteToRemote+0x1ca>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 80048f8:	880b      	ldrh	r3, [r1, #0]
 80048fa:	3524      	adds	r5, #36	; 0x24
 80048fc:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80048fe:	880b      	ldrh	r3, [r1, #0]
 8004900:	b21b      	sxth	r3, r3
 8004902:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 8004904:	2204      	movs	r2, #4
 8004906:	2120      	movs	r1, #32
 8004908:	9801      	ldr	r0, [sp, #4]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 800490a:	70eb      	strb	r3, [r5, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 800490c:	f005 f8a6 	bl	8009a5c <SendMessageToModule>
				break;
 8004910:	e738      	b.n	8004784 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 8004912:	880b      	ldrh	r3, [r1, #0]
 8004914:	3524      	adds	r5, #36	; 0x24
 8004916:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 8004918:	880b      	ldrh	r3, [r1, #0]
 800491a:	0a1b      	lsrs	r3, r3, #8
 800491c:	e7f2      	b.n	8004904 <WriteToRemote+0x1fc>
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	20006e28 	.word	0x20006e28
 8004924:	07ffffff 	.word	0x07ffffff
 8004928:	20000b18 	.word	0x20000b18
 800492c:	080174c4 	.word	0x080174c4
 8004930:	080174e8 	.word	0x080174e8
 8004934:	20000c18 	.word	0x20000c18

08004938 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004938:	b530      	push	{r4, r5, lr}
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 800493a:	2101      	movs	r1, #1
char* GetDateString(void){
 800493c:	b083      	sub	sp, #12
	char *buffer =malloc(30 * sizeof(int8_t));
 800493e:	201e      	movs	r0, #30
 8004940:	f00d ff26 	bl	8012790 <calloc>
 8004944:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004946:	4809      	ldr	r0, [pc, #36]	; (800496c <GetDateString+0x34>)
 8004948:	4909      	ldr	r1, [pc, #36]	; (8004970 <GetDateString+0x38>)
 800494a:	7d02      	ldrb	r2, [r0, #20]
 800494c:	8b05      	ldrh	r5, [r0, #24]
 800494e:	7d83      	ldrb	r3, [r0, #22]
 8004950:	3a01      	subs	r2, #1
 8004952:	9501      	str	r5, [sp, #4]
 8004954:	7d40      	ldrb	r0, [r0, #21]
 8004956:	0092      	lsls	r2, r2, #2
 8004958:	188a      	adds	r2, r1, r2
 800495a:	9000      	str	r0, [sp, #0]
 800495c:	6912      	ldr	r2, [r2, #16]
 800495e:	312c      	adds	r1, #44	; 0x2c
 8004960:	0020      	movs	r0, r4
 8004962:	f00e fbd1 	bl	8013108 <sprintf>
	return buffer;
}
 8004966:	0020      	movs	r0, r4
 8004968:	b003      	add	sp, #12
 800496a:	bd30      	pop	{r4, r5, pc}
 800496c:	20006ea8 	.word	0x20006ea8
 8004970:	0801750c 	.word	0x0801750c

08004974 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004974:	b500      	push	{lr}
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <Bridge+0x24>)
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004978:	000a      	movs	r2, r1
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800497a:	7819      	ldrb	r1, [r3, #0]
 800497c:	2301      	movs	r3, #1
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 800497e:	b085      	sub	sp, #20
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004980:	9303      	str	r3, [sp, #12]
 8004982:	3b02      	subs	r3, #2
 8004984:	9302      	str	r3, [sp, #8]
 8004986:	9301      	str	r3, [sp, #4]
 8004988:	3303      	adds	r3, #3
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	000b      	movs	r3, r1
 800498e:	f005 f889 	bl	8009aa4 <StartScastDMAStream>
}
 8004992:	b005      	add	sp, #20
 8004994:	bd00      	pop	{pc}
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	20000a98 	.word	0x20000a98

0800499c <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 800499c:	2300      	movs	r3, #0
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 800499e:	b530      	push	{r4, r5, lr}
 80049a0:	0004      	movs	r4, r0
 80049a2:	000d      	movs	r5, r1
 80049a4:	b087      	sub	sp, #28
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 80049a6:	9304      	str	r3, [sp, #16]
 80049a8:	9303      	str	r3, [sp, #12]
 80049aa:	9302      	str	r3, [sp, #8]
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	2200      	movs	r2, #0
 80049b2:	2100      	movs	r1, #0
 80049b4:	2000      	movs	r0, #0
 80049b6:	f7fe fd93 	bl	80034e0 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80049ba:	1e60      	subs	r0, r4, #1
 80049bc:	00c3      	lsls	r3, r0, #3
 80049be:	4912      	ldr	r1, [pc, #72]	; (8004a08 <Unbridge+0x6c>)
 80049c0:	1a1b      	subs	r3, r3, r0
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	585b      	ldr	r3, [r3, r1]
 80049c6:	1e6a      	subs	r2, r5, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d012      	beq.n	80049f2 <Unbridge+0x56>
 80049cc:	00d3      	lsls	r3, r2, #3
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	585b      	ldr	r3, [r3, r1]
		SwitchStreamDMAToMsg(port1);
 80049d4:	0020      	movs	r0, r4
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d104      	bne.n	80049e4 <Unbridge+0x48>
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port2);
 80049da:	f002 fe15 	bl	8007608 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80049de:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80049e0:	b007      	add	sp, #28
 80049e2:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 80049e4:	f002 fe10 	bl	8007608 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80049e8:	0028      	movs	r0, r5
 80049ea:	f002 fe0d 	bl	8007608 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80049ee:	2000      	movs	r0, #0
 80049f0:	e7f6      	b.n	80049e0 <Unbridge+0x44>
	else if(streamDMA[port2 - 1].Instance != 0){
 80049f2:	00d3      	lsls	r3, r2, #3
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	585b      	ldr	r3, [r3, r1]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <Unbridge+0x66>
		SwitchStreamDMAToMsg(port2);
 80049fe:	0028      	movs	r0, r5
 8004a00:	e7eb      	b.n	80049da <Unbridge+0x3e>
		return BOS_ERR_WrongValue;
 8004a02:	2068      	movs	r0, #104	; 0x68
 8004a04:	e7ec      	b.n	80049e0 <Unbridge+0x44>
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	20001c78 	.word	0x20001c78

08004a0c <AddSnippet.part.0>:

/*-----------------------------------------------------------*/

/* Add a set of Commands to Command Snippets and activate
 */
BOS_Status AddSnippet(uint8_t code,char *string){
 8004a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a0e:	46d6      	mov	lr, sl
 8004a10:	4646      	mov	r6, r8
 8004a12:	464f      	mov	r7, r9
 8004a14:	b5c0      	push	{r6, r7, lr}
		case SNIPPET_CONDITION:
			return ParseSnippetCondition(string);
			
		case SNIPPET_COMMANDS:
			// Did we allocate a buffer already?
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004a16:	4e27      	ldr	r6, [pc, #156]	; (8004ab4 <AddSnippet.part.0+0xa8>)
 8004a18:	4d27      	ldr	r5, [pc, #156]	; (8004ab8 <AddSnippet.part.0+0xac>)
 8004a1a:	7833      	ldrb	r3, [r6, #0]
BOS_Status AddSnippet(uint8_t code,char *string){
 8004a1c:	4680      	mov	r8, r0
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	009c      	lsls	r4, r3, #2
 8004a22:	18e4      	adds	r4, r4, r3
 8004a24:	00a4      	lsls	r4, r4, #2
 8004a26:	192c      	adds	r4, r5, r4
 8004a28:	68e3      	ldr	r3, [r4, #12]
 8004a2a:	469a      	mov	sl, r3
 8004a2c:	f7fb fb74 	bl	8000118 <strlen>
 8004a30:	4653      	mov	r3, sl
 8004a32:	4681      	mov	r9, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d02e      	beq.n	8004a96 <AddSnippet.part.0+0x8a>
				// re-allocate with new size
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004a38:	4650      	mov	r0, sl
 8004a3a:	f7fb fb6d 	bl	8000118 <strlen>
				// Add two more bytes for the ENTER key (0x13) and end of string (0x00)
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a3e:	4649      	mov	r1, r9
 8004a40:	3102      	adds	r1, #2
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004a42:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a44:	1809      	adds	r1, r1, r0
 8004a46:	4650      	mov	r0, sl
 8004a48:	f00e f996 	bl	8012d78 <realloc>
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004a4c:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a4e:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004a50:	3a01      	subs	r2, #1
 8004a52:	0093      	lsls	r3, r2, #2
 8004a54:	189b      	adds	r3, r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	18eb      	adds	r3, r5, r3
 8004a5a:	68d8      	ldr	r0, [r3, #12]
 8004a5c:	1c7a      	adds	r2, r7, #1
 8004a5e:	1880      	adds	r0, r0, r2
 8004a60:	4641      	mov	r1, r8
 8004a62:	f00e fb8d 	bl	8013180 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004a66:	7832      	ldrb	r2, [r6, #0]
 8004a68:	3a01      	subs	r2, #1
 8004a6a:	0093      	lsls	r3, r2, #2
 8004a6c:	189b      	adds	r3, r3, r2
 8004a6e:	2213      	movs	r2, #19
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	18eb      	adds	r3, r5, r3
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	55da      	strb	r2, [r3, r7]
 8004a78:	7833      	ldrb	r3, [r6, #0]
 8004a7a:	3b01      	subs	r3, #1
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
			}
			// Return error if allocation fails
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004a7c:	0098      	lsls	r0, r3, #2
 8004a7e:	18c0      	adds	r0, r0, r3
 8004a80:	0080      	lsls	r0, r0, #2
 8004a82:	1828      	adds	r0, r5, r0
 8004a84:	68c3      	ldr	r3, [r0, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00d      	beq.n	8004aa6 <AddSnippet.part.0+0x9a>
			
		default:
			break;
	}
	
	return BOS_OK;
 8004a8a:	2000      	movs	r0, #0
}
 8004a8c:	bc1c      	pop	{r2, r3, r4}
 8004a8e:	4690      	mov	r8, r2
 8004a90:	4699      	mov	r9, r3
 8004a92:	46a2      	mov	sl, r4
 8004a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004a96:	3001      	adds	r0, #1
 8004a98:	f00d fee6 	bl	8012868 <malloc>
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004a9c:	4641      	mov	r1, r8
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004a9e:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004aa0:	f00e fb6e 	bl	8013180 <strcpy>
 8004aa4:	e7f1      	b.n	8004a8a <AddSnippet.part.0+0x7e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004aa6:	2214      	movs	r2, #20
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	f00e f933 	bl	8012d14 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004aae:	200e      	movs	r0, #14
 8004ab0:	e7ec      	b.n	8004a8c <AddSnippet.part.0+0x80>
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	20001180 	.word	0x20001180
 8004ab8:	20006ec4 	.word	0x20006ec4

08004abc <StringToLowerCase>:
void StringToLowerCase(char *string){
 8004abc:	b570      	push	{r4, r5, r6, lr}
	for(int i =0; string[i]; i++){
 8004abe:	7804      	ldrb	r4, [r0, #0]
void StringToLowerCase(char *string){
 8004ac0:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 8004ac2:	2c00      	cmp	r4, #0
 8004ac4:	d00d      	beq.n	8004ae2 <StringToLowerCase+0x26>
		string[i] =tolower(string[i]);
 8004ac6:	2603      	movs	r6, #3
 8004ac8:	f00d fec0 	bl	801284c <__locale_ctype_ptr>
 8004acc:	1900      	adds	r0, r0, r4
 8004ace:	7842      	ldrb	r2, [r0, #1]
 8004ad0:	4032      	ands	r2, r6
 8004ad2:	2a01      	cmp	r2, #1
 8004ad4:	d100      	bne.n	8004ad8 <StringToLowerCase+0x1c>
 8004ad6:	3420      	adds	r4, #32
 8004ad8:	702c      	strb	r4, [r5, #0]
 8004ada:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 8004adc:	782c      	ldrb	r4, [r5, #0]
 8004ade:	2c00      	cmp	r4, #0
 8004ae0:	d1f2      	bne.n	8004ac8 <StringToLowerCase+0xc>
}
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}

08004ae4 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae6:	4657      	mov	r7, sl
 8004ae8:	464e      	mov	r6, r9
 8004aea:	46de      	mov	lr, fp
 8004aec:	4645      	mov	r5, r8
 8004aee:	b5e0      	push	{r5, r6, r7, lr}
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004af0:	4ed8      	ldr	r6, [pc, #864]	; (8004e54 <ParseSnippetCondition+0x370>)
BOS_Status ParseSnippetCondition(char *string){
 8004af2:	b08b      	sub	sp, #44	; 0x2c
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004af4:	7834      	ldrb	r4, [r6, #0]
BOS_Status ParseSnippetCondition(char *string){
 8004af6:	0007      	movs	r7, r0
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004af8:	2c05      	cmp	r4, #5
 8004afa:	d067      	beq.n	8004bcc <ParseSnippetCondition+0xe8>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004afc:	00a3      	lsls	r3, r4, #2
 8004afe:	4dd6      	ldr	r5, [pc, #856]	; (8004e58 <ParseSnippetCondition+0x374>)
 8004b00:	1918      	adds	r0, r3, r4
 8004b02:	0080      	lsls	r0, r0, #2
 8004b04:	469a      	mov	sl, r3
 8004b06:	182b      	adds	r3, r5, r0
 8004b08:	4699      	mov	r9, r3
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	464a      	mov	r2, r9
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004b0e:	3002      	adds	r0, #2
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004b10:	8013      	strh	r3, [r2, #0]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004b12:	1828      	adds	r0, r5, r0
 8004b14:	2204      	movs	r2, #4
 8004b16:	2100      	movs	r1, #0
 8004b18:	f00e f8fc 	bl	8012d14 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004b1c:	783b      	ldrb	r3, [r7, #0]
 8004b1e:	2b62      	cmp	r3, #98	; 0x62
 8004b20:	d102      	bne.n	8004b28 <ParseSnippetCondition+0x44>
 8004b22:	78bb      	ldrb	r3, [r7, #2]
 8004b24:	2b2e      	cmp	r3, #46	; 0x2e
 8004b26:	d057      	beq.n	8004bd8 <ParseSnippetCondition+0xf4>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004b28:	1d33      	adds	r3, r6, #4
 8004b2a:	4698      	mov	r8, r3
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	0039      	movs	r1, r7
 8004b30:	f00e fb26 	bl	8013180 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004b34:	4cc9      	ldr	r4, [pc, #804]	; (8004e5c <ParseSnippetCondition+0x378>)
 8004b36:	4640      	mov	r0, r8
 8004b38:	0021      	movs	r1, r4
 8004b3a:	f00f f9a1 	bl	8013e80 <strtok>
		secondPart =strtok( NULL," ");
 8004b3e:	0021      	movs	r1, r4
		firstPart =strtok((char* )cInputString," ");
 8004b40:	0007      	movs	r7, r0
		secondPart =strtok( NULL," ");
 8004b42:	2000      	movs	r0, #0
 8004b44:	f00f f99c 	bl	8013e80 <strtok>
		thirdPart =strtok( NULL," ");
 8004b48:	0021      	movs	r1, r4
		secondPart =strtok( NULL," ");
 8004b4a:	4680      	mov	r8, r0
		thirdPart =strtok( NULL," ");
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	f00f f997 	bl	8013e80 <strtok>
 8004b52:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004b54:	2f00      	cmp	r7, #0
 8004b56:	d02f      	beq.n	8004bb8 <ParseSnippetCondition+0xd4>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004b58:	0038      	movs	r0, r7
 8004b5a:	f7fe fdd9 	bl	8003710 <IsModuleParameter>
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004b5e:	4643      	mov	r3, r8
			modPar1 =IsModuleParameter(firstPart);
 8004b60:	1e07      	subs	r7, r0, #0
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004b62:	d036      	beq.n	8004bd2 <ParseSnippetCondition+0xee>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d024      	beq.n	8004bb2 <ParseSnippetCondition+0xce>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004b68:	2c00      	cmp	r4, #0
 8004b6a:	d025      	beq.n	8004bb8 <ParseSnippetCondition+0xd4>
				modPar2 =IsModuleParameter(thirdPart);
 8004b6c:	0020      	movs	r0, r4
 8004b6e:	f7fe fdcf 	bl	8003710 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d06b      	beq.n	8004c4e <ParseSnippetCondition+0x16a>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004b76:	2204      	movs	r2, #4
 8004b78:	7833      	ldrb	r3, [r6, #0]
 8004b7a:	009c      	lsls	r4, r3, #2
 8004b7c:	4699      	mov	r9, r3
 8004b7e:	18e3      	adds	r3, r4, r3
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004b84:	18eb      	adds	r3, r5, r3
 8004b86:	70df      	strb	r7, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004b88:	71d8      	strb	r0, [r3, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b8a:	4640      	mov	r0, r8
 8004b8c:	f7fe fdcc 	bl	8003728 <IsMathOperator>
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b90:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b92:	444c      	add	r4, r9
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b94:	0093      	lsls	r3, r2, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b96:	00a4      	lsls	r4, r4, #2
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b98:	189b      	adds	r3, r3, r2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b9a:	192c      	adds	r4, r5, r4
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b9c:	009b      	lsls	r3, r3, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b9e:	7060      	strb	r0, [r4, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004ba0:	18ed      	adds	r5, r5, r3
 8004ba2:	786b      	ldrb	r3, [r5, #1]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <ParseSnippetCondition+0xd4>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
 8004ba8:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004baa:	3201      	adds	r2, #1
 8004bac:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004bae:	4698      	mov	r8, r3
 8004bb0:	e004      	b.n	8004bbc <ParseSnippetCondition+0xd8>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004bb2:	2c00      	cmp	r4, #0
 8004bb4:	d100      	bne.n	8004bb8 <ParseSnippetCondition+0xd4>
 8004bb6:	e07f      	b.n	8004cb8 <ParseSnippetCondition+0x1d4>
			return BOS_ERR_WrongParam;
 8004bb8:	2367      	movs	r3, #103	; 0x67
 8004bba:	4698      	mov	r8, r3
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	b00b      	add	sp, #44	; 0x2c
 8004bc0:	bc3c      	pop	{r2, r3, r4, r5}
 8004bc2:	4690      	mov	r8, r2
 8004bc4:	4699      	mov	r9, r3
 8004bc6:	46a2      	mov	sl, r4
 8004bc8:	46ab      	mov	fp, r5
 8004bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_SNIP_MEM_FULL;
 8004bcc:	230e      	movs	r3, #14
 8004bce:	4698      	mov	r8, r3
 8004bd0:	e7f4      	b.n	8004bbc <ParseSnippetCondition+0xd8>
			else if(secondPart != NULL && thirdPart != NULL){
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1c8      	bne.n	8004b68 <ParseSnippetCondition+0x84>
 8004bd6:	e7ef      	b.n	8004bb8 <ParseSnippetCondition+0xd4>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004bd8:	787b      	ldrb	r3, [r7, #1]
 8004bda:	3b30      	subs	r3, #48	; 0x30
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	469b      	mov	fp, r3
	BOS_Status status =BOS_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	4698      	mov	r8, r3
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004be4:	465b      	mov	r3, fp
 8004be6:	2b06      	cmp	r3, #6
 8004be8:	d8e8      	bhi.n	8004bbc <ParseSnippetCondition+0xd8>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004bea:	4649      	mov	r1, r9
 8004bec:	2301      	movs	r3, #1
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004bee:	4658      	mov	r0, fp
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004bf0:	800b      	strh	r3, [r1, #0]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004bf2:	1cfb      	adds	r3, r7, #3
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004bf4:	7088      	strb	r0, [r1, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004bf6:	2207      	movs	r2, #7
 8004bf8:	4999      	ldr	r1, [pc, #612]	; (8004e60 <ParseSnippetCondition+0x37c>)
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	9307      	str	r3, [sp, #28]
 8004bfe:	f00e fac7 	bl	8013190 <strncmp>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d03d      	beq.n	8004c82 <ParseSnippetCondition+0x19e>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004c06:	220e      	movs	r2, #14
 8004c08:	4996      	ldr	r1, [pc, #600]	; (8004e64 <ParseSnippetCondition+0x380>)
 8004c0a:	9807      	ldr	r0, [sp, #28]
 8004c0c:	f00e fac0 	bl	8013190 <strncmp>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d15e      	bne.n	8004cd2 <ParseSnippetCondition+0x1ee>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004c14:	2306      	movs	r3, #6
 8004c16:	464a      	mov	r2, r9
 8004c18:	70d3      	strb	r3, [r2, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004c1a:	465b      	mov	r3, fp
 8004c1c:	00da      	lsls	r2, r3, #3
 8004c1e:	4b92      	ldr	r3, [pc, #584]	; (8004e68 <ParseSnippetCondition+0x384>)
 8004c20:	445a      	add	r2, fp
 8004c22:	189b      	adds	r3, r3, r2
 8004c24:	7a1b      	ldrb	r3, [r3, #8]
 8004c26:	079b      	lsls	r3, r3, #30
 8004c28:	d40e      	bmi.n	8004c48 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	9305      	str	r3, [sp, #20]
 8004c2e:	4643      	mov	r3, r8
 8004c30:	2201      	movs	r2, #1
 8004c32:	9304      	str	r3, [sp, #16]
 8004c34:	9303      	str	r3, [sp, #12]
 8004c36:	9302      	str	r3, [sp, #8]
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	2300      	movs	r3, #0
 8004c40:	4658      	mov	r0, fp
 8004c42:	f003 fced 	bl	8008620 <SetButtonEvents>
 8004c46:	7834      	ldrb	r4, [r6, #0]
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004c48:	3401      	adds	r4, #1
 8004c4a:	7034      	strb	r4, [r6, #0]
 8004c4c:	e7b6      	b.n	8004bbc <ParseSnippetCondition+0xd8>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004c4e:	7832      	ldrb	r2, [r6, #0]
					float constant =atof(thirdPart);
 8004c50:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004c52:	0093      	lsls	r3, r2, #2
 8004c54:	189b      	adds	r3, r3, r2
 8004c56:	2203      	movs	r2, #3
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004c5c:	18eb      	adds	r3, r5, r3
 8004c5e:	70df      	strb	r7, [r3, #3]
					float constant =atof(thirdPart);
 8004c60:	f00d fd84 	bl	801276c <atof>
 8004c64:	f7fd ffb0 	bl	8002bc8 <__aeabi_d2f>
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004c68:	7833      	ldrb	r3, [r6, #0]
					float constant =atof(thirdPart);
 8004c6a:	9009      	str	r0, [sp, #36]	; 0x24
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004c6c:	009c      	lsls	r4, r3, #2
 8004c6e:	18e0      	adds	r0, r4, r3
 8004c70:	0080      	lsls	r0, r0, #2
 8004c72:	3006      	adds	r0, #6
 8004c74:	1828      	adds	r0, r5, r0
 8004c76:	2204      	movs	r2, #4
 8004c78:	a909      	add	r1, sp, #36	; 0x24
 8004c7a:	4699      	mov	r9, r3
 8004c7c:	f00e f841 	bl	8012d02 <memcpy>
 8004c80:	e783      	b.n	8004b8a <ParseSnippetCondition+0xa6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004c82:	2305      	movs	r3, #5
 8004c84:	4649      	mov	r1, r9
 8004c86:	70cb      	strb	r3, [r1, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004c88:	4659      	mov	r1, fp
 8004c8a:	4b77      	ldr	r3, [pc, #476]	; (8004e68 <ParseSnippetCondition+0x384>)
 8004c8c:	00ca      	lsls	r2, r1, #3
 8004c8e:	445a      	add	r2, fp
 8004c90:	189b      	adds	r3, r3, r2
 8004c92:	2201      	movs	r2, #1
 8004c94:	7a1b      	ldrb	r3, [r3, #8]
 8004c96:	421a      	tst	r2, r3
 8004c98:	d1d6      	bne.n	8004c48 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	9305      	str	r3, [sp, #20]
 8004c9e:	4643      	mov	r3, r8
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	9304      	str	r3, [sp, #16]
 8004ca4:	9303      	str	r3, [sp, #12]
 8004ca6:	9302      	str	r3, [sp, #8]
 8004ca8:	9301      	str	r3, [sp, #4]
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	2101      	movs	r1, #1
 8004cae:	4658      	mov	r0, fp
 8004cb0:	f003 fcb6 	bl	8008620 <SetButtonEvents>
 8004cb4:	7834      	ldrb	r4, [r6, #0]
 8004cb6:	e7c7      	b.n	8004c48 <ParseSnippetCondition+0x164>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004cb8:	2102      	movs	r1, #2
 8004cba:	7832      	ldrb	r2, [r6, #0]
 8004cbc:	0093      	lsls	r3, r2, #2
 8004cbe:	189b      	adds	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	54e9      	strb	r1, [r5, r3]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cc4:	18ed      	adds	r5, r5, r3
				return BOS_OK;
 8004cc6:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004cc8:	3201      	adds	r2, #1
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cca:	70e8      	strb	r0, [r5, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004ccc:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004cce:	4698      	mov	r8, r3
 8004cd0:	e774      	b.n	8004bbc <ParseSnippetCondition+0xd8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004cd2:	220c      	movs	r2, #12
 8004cd4:	4965      	ldr	r1, [pc, #404]	; (8004e6c <ParseSnippetCondition+0x388>)
 8004cd6:	9807      	ldr	r0, [sp, #28]
 8004cd8:	f00e fa5a 	bl	8013190 <strncmp>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d131      	bne.n	8004d44 <ParseSnippetCondition+0x260>
				if(!button[port].pressedX1Sec){
 8004ce0:	465b      	mov	r3, fp
 8004ce2:	00da      	lsls	r2, r3, #3
 8004ce4:	4b60      	ldr	r3, [pc, #384]	; (8004e68 <ParseSnippetCondition+0x384>)
 8004ce6:	445a      	add	r2, fp
 8004ce8:	189b      	adds	r3, r3, r2
 8004cea:	789a      	ldrb	r2, [r3, #2]
 8004cec:	2a00      	cmp	r2, #0
 8004cee:	d063      	beq.n	8004db8 <ParseSnippetCondition+0x2d4>
				else if(!button[port].pressedX2Sec){
 8004cf0:	78da      	ldrb	r2, [r3, #3]
 8004cf2:	2a00      	cmp	r2, #0
 8004cf4:	d07d      	beq.n	8004df2 <ParseSnippetCondition+0x30e>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004cf6:	220c      	movs	r2, #12
				else if(!button[port].pressedX3Sec){
 8004cf8:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004cfa:	4690      	mov	r8, r2
				else if(!button[port].pressedX3Sec){
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1a3      	bne.n	8004c48 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004d00:	0023      	movs	r3, r4
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004d02:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004d04:	4453      	add	r3, sl
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	18eb      	adds	r3, r5, r3
 8004d0a:	3a01      	subs	r2, #1
 8004d0c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004d0e:	300f      	adds	r0, #15
 8004d10:	f00d fd31 	bl	8012776 <atoi>
 8004d14:	7832      	ldrb	r2, [r6, #0]
 8004d16:	b2c0      	uxtb	r0, r0
 8004d18:	0093      	lsls	r3, r2, #2
 8004d1a:	189b      	adds	r3, r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004d20:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004d22:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004d24:	9305      	str	r3, [sp, #20]
 8004d26:	2300      	movs	r3, #0
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	9304      	str	r3, [sp, #16]
 8004d2e:	9303      	str	r3, [sp, #12]
 8004d30:	9302      	str	r3, [sp, #8]
 8004d32:	9001      	str	r0, [sp, #4]
 8004d34:	9300      	str	r3, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004d36:	4658      	mov	r0, fp
 8004d38:	f003 fc72 	bl	8008620 <SetButtonEvents>
					status =BOS_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	7834      	ldrb	r4, [r6, #0]
 8004d40:	4698      	mov	r8, r3
 8004d42:	e781      	b.n	8004c48 <ParseSnippetCondition+0x164>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004d44:	220d      	movs	r2, #13
 8004d46:	494a      	ldr	r1, [pc, #296]	; (8004e70 <ParseSnippetCondition+0x38c>)
 8004d48:	9807      	ldr	r0, [sp, #28]
 8004d4a:	f00e fa21 	bl	8013190 <strncmp>
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d000      	beq.n	8004d54 <ParseSnippetCondition+0x270>
 8004d52:	e779      	b.n	8004c48 <ParseSnippetCondition+0x164>
				if(!button[port].releasedY1Sec){
 8004d54:	465b      	mov	r3, fp
 8004d56:	4a44      	ldr	r2, [pc, #272]	; (8004e68 <ParseSnippetCondition+0x384>)
 8004d58:	00d9      	lsls	r1, r3, #3
 8004d5a:	18cb      	adds	r3, r1, r3
 8004d5c:	18d3      	adds	r3, r2, r3
 8004d5e:	7958      	ldrb	r0, [r3, #5]
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d05e      	beq.n	8004e22 <ParseSnippetCondition+0x33e>
				else if(!button[port].releasedY2Sec){
 8004d64:	799b      	ldrb	r3, [r3, #6]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d100      	bne.n	8004d6c <ParseSnippetCondition+0x288>
 8004d6a:	e083      	b.n	8004e74 <ParseSnippetCondition+0x390>
				else if(!button[port].releasedY3Sec){
 8004d6c:	4459      	add	r1, fp
 8004d6e:	1852      	adds	r2, r2, r1
 8004d70:	79d3      	ldrb	r3, [r2, #7]
 8004d72:	4699      	mov	r9, r3
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004d74:	230d      	movs	r3, #13
 8004d76:	4698      	mov	r8, r3
				else if(!button[port].releasedY3Sec){
 8004d78:	464b      	mov	r3, r9
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d000      	beq.n	8004d80 <ParseSnippetCondition+0x29c>
 8004d7e:	e763      	b.n	8004c48 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004d80:	3314      	adds	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d82:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004d84:	4698      	mov	r8, r3
 8004d86:	435c      	muls	r4, r3
 8004d88:	3b06      	subs	r3, #6
 8004d8a:	192c      	adds	r4, r5, r4
 8004d8c:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d8e:	3010      	adds	r0, #16
 8004d90:	f00d fcf1 	bl	8012776 <atoi>
 8004d94:	4642      	mov	r2, r8
 8004d96:	7833      	ldrb	r3, [r6, #0]
 8004d98:	b2c0      	uxtb	r0, r0
 8004d9a:	4353      	muls	r3, r2
 8004d9c:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004d9e:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004da0:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004da2:	9305      	str	r3, [sp, #20]
 8004da4:	464b      	mov	r3, r9
 8004da6:	9303      	str	r3, [sp, #12]
 8004da8:	9302      	str	r3, [sp, #8]
 8004daa:	9301      	str	r3, [sp, #4]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	2300      	movs	r3, #0
 8004db0:	9004      	str	r0, [sp, #16]
 8004db2:	001a      	movs	r2, r3
 8004db4:	0019      	movs	r1, r3
 8004db6:	e7be      	b.n	8004d36 <ParseSnippetCondition+0x252>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004db8:	2309      	movs	r3, #9
 8004dba:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dbc:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004dbe:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dc0:	300f      	adds	r0, #15
 8004dc2:	f00d fcd8 	bl	8012776 <atoi>
 8004dc6:	7831      	ldrb	r1, [r6, #0]
 8004dc8:	b2c3      	uxtb	r3, r0
 8004dca:	008a      	lsls	r2, r1, #2
 8004dcc:	1852      	adds	r2, r2, r1
 8004dce:	0092      	lsls	r2, r2, #2
 8004dd0:	18ad      	adds	r5, r5, r2
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004dd2:	2201      	movs	r2, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dd4:	712b      	strb	r3, [r5, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004dd6:	9205      	str	r2, [sp, #20]
 8004dd8:	4642      	mov	r2, r8
 8004dda:	9204      	str	r2, [sp, #16]
 8004ddc:	9203      	str	r2, [sp, #12]
 8004dde:	9202      	str	r2, [sp, #8]
 8004de0:	9201      	str	r2, [sp, #4]
 8004de2:	9200      	str	r2, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004de4:	2200      	movs	r2, #0
 8004de6:	2100      	movs	r1, #0
 8004de8:	4658      	mov	r0, fp
 8004dea:	f003 fc19 	bl	8008620 <SetButtonEvents>
 8004dee:	7834      	ldrb	r4, [r6, #0]
 8004df0:	e72a      	b.n	8004c48 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004df2:	230a      	movs	r3, #10
 8004df4:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004df6:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004df8:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dfa:	300f      	adds	r0, #15
 8004dfc:	f00d fcbb 	bl	8012776 <atoi>
 8004e00:	7832      	ldrb	r2, [r6, #0]
 8004e02:	b2c0      	uxtb	r0, r0
 8004e04:	0093      	lsls	r3, r2, #2
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e0c:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e0e:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e10:	9305      	str	r3, [sp, #20]
 8004e12:	4643      	mov	r3, r8
 8004e14:	9000      	str	r0, [sp, #0]
 8004e16:	9304      	str	r3, [sp, #16]
 8004e18:	9303      	str	r3, [sp, #12]
 8004e1a:	9302      	str	r3, [sp, #8]
 8004e1c:	9301      	str	r3, [sp, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e7e0      	b.n	8004de4 <ParseSnippetCondition+0x300>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004e22:	230c      	movs	r3, #12
 8004e24:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e26:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004e28:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e2a:	3010      	adds	r0, #16
 8004e2c:	f00d fca3 	bl	8012776 <atoi>
 8004e30:	7832      	ldrb	r2, [r6, #0]
 8004e32:	b2c0      	uxtb	r0, r0
 8004e34:	0093      	lsls	r3, r2, #2
 8004e36:	189b      	adds	r3, r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e3c:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e3e:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e40:	9305      	str	r3, [sp, #20]
 8004e42:	4643      	mov	r3, r8
 8004e44:	9002      	str	r0, [sp, #8]
 8004e46:	9304      	str	r3, [sp, #16]
 8004e48:	9303      	str	r3, [sp, #12]
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	e7c8      	b.n	8004de4 <ParseSnippetCondition+0x300>
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	20001180 	.word	0x20001180
 8004e58:	20006ec4 	.word	0x20006ec4
 8004e5c:	08017db0 	.word	0x08017db0
 8004e60:	0801892c 	.word	0x0801892c
 8004e64:	08018100 	.word	0x08018100
 8004e68:	2000191c 	.word	0x2000191c
 8004e6c:	08018110 	.word	0x08018110
 8004e70:	08018120 	.word	0x08018120
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004e74:	0023      	movs	r3, r4
 8004e76:	220d      	movs	r2, #13
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e78:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004e7a:	4453      	add	r3, sl
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	18eb      	adds	r3, r5, r3
 8004e80:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e82:	3010      	adds	r0, #16
 8004e84:	f00d fc77 	bl	8012776 <atoi>
 8004e88:	7832      	ldrb	r2, [r6, #0]
 8004e8a:	b2c0      	uxtb	r0, r0
 8004e8c:	0093      	lsls	r3, r2, #2
 8004e8e:	189b      	adds	r3, r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004e94:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e96:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004e98:	9305      	str	r3, [sp, #20]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9003      	str	r0, [sp, #12]
 8004e9e:	9304      	str	r3, [sp, #16]
 8004ea0:	9302      	str	r3, [sp, #8]
 8004ea2:	9301      	str	r3, [sp, #4]
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	e744      	b.n	8004d36 <ParseSnippetCondition+0x252>

08004eac <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eae:	46de      	mov	lr, fp
 8004eb0:	4657      	mov	r7, sl
 8004eb2:	4645      	mov	r5, r8
 8004eb4:	464e      	mov	r6, r9
 8004eb6:	468a      	mov	sl, r1
 8004eb8:	b5e0      	push	{r5, r6, r7, lr}
 8004eba:	b08b      	sub	sp, #44	; 0x2c
 8004ebc:	9002      	str	r0, [sp, #8]
 8004ebe:	0015      	movs	r5, r2
	char idString[MaxLengthOfAlias] ={0};
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	2209      	movs	r2, #9
 8004ec4:	a807      	add	r0, sp, #28
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004ec6:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004ec8:	f00d ff24 	bl	8012d14 <memset>
 8004ecc:	4bcd      	ldr	r3, [pc, #820]	; (8005204 <CLI_CommandParser+0x358>)
				if(id == myID){
 8004ece:	4656      	mov	r6, sl
 8004ed0:	4698      	mov	r8, r3
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ed2:	4bcd      	ldr	r3, [pc, #820]	; (8005208 <CLI_CommandParser+0x35c>)
				if(id == myID){
 8004ed4:	46ba      	mov	sl, r7
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ed6:	469b      	mov	fp, r3
 8004ed8:	e02d      	b.n	8004f36 <CLI_CommandParser+0x8a>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004eda:	2206      	movs	r2, #6
 8004edc:	49cb      	ldr	r1, [pc, #812]	; (800520c <CLI_CommandParser+0x360>)
 8004ede:	0028      	movs	r0, r5
 8004ee0:	f00e f956 	bl	8013190 <strncmp>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d057      	beq.n	8004f98 <CLI_CommandParser+0xec>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004ee8:	2f02      	cmp	r7, #2
 8004eea:	d100      	bne.n	8004eee <CLI_CommandParser+0x42>
 8004eec:	e0d2      	b.n	8005094 <CLI_CommandParser+0x1e8>
			loc =strchr((char* )cInputString,'.');
 8004eee:	212e      	movs	r1, #46	; 0x2e
 8004ef0:	0028      	movs	r0, r5
 8004ef2:	f00e f937 	bl	8013164 <strchr>
 8004ef6:	1e07      	subs	r7, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ef8:	d007      	beq.n	8004f0a <CLI_CommandParser+0x5e>
 8004efa:	3803      	subs	r0, #3
 8004efc:	2203      	movs	r2, #3
 8004efe:	4659      	mov	r1, fp
 8004f00:	f00e f946 	bl	8013190 <strncmp>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	d000      	beq.n	8004f0a <CLI_CommandParser+0x5e>
 8004f08:	e079      	b.n	8004ffe <CLI_CommandParser+0x152>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f0a:	2299      	movs	r2, #153	; 0x99
 8004f0c:	0021      	movs	r1, r4
 8004f0e:	0092      	lsls	r2, r2, #2
 8004f10:	0028      	movs	r0, r5
 8004f12:	f008 fc0d 	bl	800d730 <FreeRTOS_CLIProcessCommand>
 8004f16:	4682      	mov	sl, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f18:	7823      	ldrb	r3, [r4, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d139      	bne.n	8004f92 <CLI_CommandParser+0xe6>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004f1e:	0020      	movs	r0, r4
 8004f20:	f7fb f8fa 	bl	8000118 <strlen>
 8004f24:	2100      	movs	r1, #0
 8004f26:	0002      	movs	r2, r0
 8004f28:	0020      	movs	r0, r4
 8004f2a:	f00d fef3 	bl	8012d14 <memset>
	} while(xReturned != pdFALSE);
 8004f2e:	4653      	mov	r3, sl
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d100      	bne.n	8004f36 <CLI_CommandParser+0x8a>
 8004f34:	e1d0      	b.n	80052d8 <CLI_CommandParser+0x42c>
		StringToLowerCase((char* )cInputString);
 8004f36:	0028      	movs	r0, r5
 8004f38:	f7ff fdc0 	bl	8004abc <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004f3c:	2336      	movs	r3, #54	; 0x36
 8004f3e:	4699      	mov	r9, r3
 8004f40:	4643      	mov	r3, r8
 8004f42:	464a      	mov	r2, r9
 8004f44:	5c9f      	ldrb	r7, [r3, r2]
 8004f46:	2f00      	cmp	r7, #0
 8004f48:	d1c7      	bne.n	8004eda <CLI_CommandParser+0x2e>
 8004f4a:	3a33      	subs	r2, #51	; 0x33
 8004f4c:	49b0      	ldr	r1, [pc, #704]	; (8005210 <CLI_CommandParser+0x364>)
 8004f4e:	0028      	movs	r0, r5
 8004f50:	f00e f91e 	bl	8013190 <strncmp>
 8004f54:	1e07      	subs	r7, r0, #0
 8004f56:	d1ca      	bne.n	8004eee <CLI_CommandParser+0x42>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004f58:	1ce8      	adds	r0, r5, #3
			return ParseSnippetCondition(string);
 8004f5a:	f7ff fdc3 	bl	8004ae4 <ParseSnippetCondition>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	d000      	beq.n	8004f64 <CLI_CommandParser+0xb8>
 8004f62:	e09f      	b.n	80050a4 <CLI_CommandParser+0x1f8>
				recordSnippet = SNIPPET_COMMANDS;
 8004f64:	2302      	movs	r3, #2
 8004f66:	4642      	mov	r2, r8
 8004f68:	4649      	mov	r1, r9
 8004f6a:	5453      	strb	r3, [r2, r1]
				pcOutputString[0] ='\r';
 8004f6c:	330b      	adds	r3, #11
 8004f6e:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f70:	2e00      	cmp	r6, #0
 8004f72:	d027      	beq.n	8004fc4 <CLI_CommandParser+0x118>
 8004f74:	2300      	movs	r3, #0
 8004f76:	469a      	mov	sl, r3
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004f78:	0020      	movs	r0, r4
 8004f7a:	f7fb f8cd 	bl	8000118 <strlen>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	425b      	negs	r3, r3
 8004f82:	b282      	uxth	r2, r0
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	0021      	movs	r1, r4
 8004f88:	3333      	adds	r3, #51	; 0x33
 8004f8a:	9802      	ldr	r0, [sp, #8]
 8004f8c:	f008 f9f0 	bl	800d370 <writePxMutex>
 8004f90:	e7c5      	b.n	8004f1e <CLI_CommandParser+0x72>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f92:	2e00      	cmp	r6, #0
 8004f94:	d0c3      	beq.n	8004f1e <CLI_CommandParser+0x72>
 8004f96:	e7ef      	b.n	8004f78 <CLI_CommandParser+0xcc>
			recordSnippet =0;
 8004f98:	4643      	mov	r3, r8
 8004f9a:	464a      	mov	r2, r9
 8004f9c:	5498      	strb	r0, [r3, r2]
			snippets[numOfRecordedSnippets - 1].state = true;
 8004f9e:	781a      	ldrb	r2, [r3, #0]
 8004fa0:	3a01      	subs	r2, #1
 8004fa2:	0093      	lsls	r3, r2, #2
 8004fa4:	189b      	adds	r3, r3, r2
 8004fa6:	4a9b      	ldr	r2, [pc, #620]	; (8005214 <CLI_CommandParser+0x368>)
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	18d3      	adds	r3, r2, r3
 8004fac:	2201      	movs	r2, #1
 8004fae:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004fb0:	f006 fa86 	bl	800b4c0 <SaveToRO>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004fb4:	2241      	movs	r2, #65	; 0x41
 8004fb6:	4998      	ldr	r1, [pc, #608]	; (8005218 <CLI_CommandParser+0x36c>)
 8004fb8:	0020      	movs	r0, r4
 8004fba:	f00d fea2 	bl	8012d02 <memcpy>
 8004fbe:	7823      	ldrb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1d5      	bne.n	8004f70 <CLI_CommandParser+0xc4>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004fc4:	0020      	movs	r0, r4
 8004fc6:	f7fb f8a7 	bl	8000118 <strlen>
 8004fca:	2100      	movs	r1, #0
 8004fcc:	0002      	movs	r2, r0
 8004fce:	0020      	movs	r0, r4
 8004fd0:	46b2      	mov	sl, r6
 8004fd2:	f00d fe9f 	bl	8012d14 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8004fd6:	2209      	movs	r2, #9
 8004fd8:	2100      	movs	r1, #0
 8004fda:	a807      	add	r0, sp, #28
 8004fdc:	f00d fe9a 	bl	8012d14 <memset>
	if(!recordSnippet && enableOutput)
 8004fe0:	2336      	movs	r3, #54	; 0x36
 8004fe2:	4642      	mov	r2, r8
 8004fe4:	5cd3      	ldrb	r3, [r2, r3]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d102      	bne.n	8004ff0 <CLI_CommandParser+0x144>
 8004fea:	4653      	mov	r3, sl
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d16a      	bne.n	80050c6 <CLI_CommandParser+0x21a>
}
 8004ff0:	b00b      	add	sp, #44	; 0x2c
 8004ff2:	bc3c      	pop	{r2, r3, r4, r5}
 8004ff4:	4690      	mov	r8, r2
 8004ff6:	4699      	mov	r9, r3
 8004ff8:	46a2      	mov	sl, r4
 8004ffa:	46ab      	mov	fp, r5
 8004ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ffe:	f00d fc25 	bl	801284c <__locale_ctype_ptr>
 8005002:	787b      	ldrb	r3, [r7, #1]
 8005004:	18c0      	adds	r0, r0, r3
 8005006:	7843      	ldrb	r3, [r0, #1]
 8005008:	075b      	lsls	r3, r3, #29
 800500a:	d500      	bpl.n	800500e <CLI_CommandParser+0x162>
 800500c:	e77d      	b.n	8004f0a <CLI_CommandParser+0x5e>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 800500e:	1b7a      	subs	r2, r7, r5
 8005010:	0029      	movs	r1, r5
 8005012:	a807      	add	r0, sp, #28
 8005014:	f00e f8cd 	bl	80131b2 <strncpy>
				id =GetID(idString);
 8005018:	a807      	add	r0, sp, #28
 800501a:	f7ff f8e1 	bl	80041e0 <GetID>
				if(id == myID){
 800501e:	4b7f      	ldr	r3, [pc, #508]	; (800521c <CLI_CommandParser+0x370>)
				id =GetID(idString);
 8005020:	9003      	str	r0, [sp, #12]
				if(id == myID){
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	9305      	str	r3, [sp, #20]
 8005026:	4298      	cmp	r0, r3
 8005028:	d057      	beq.n	80050da <CLI_CommandParser+0x22e>
				else if(id == BOS_ERR_WrongName){
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	2b64      	cmp	r3, #100	; 0x64
 800502e:	d100      	bne.n	8005032 <CLI_CommandParser+0x186>
 8005030:	e0da      	b.n	80051e8 <CLI_CommandParser+0x33c>
				else if(id == BOS_ERR_WrongID){
 8005032:	9b03      	ldr	r3, [sp, #12]
 8005034:	2b66      	cmp	r3, #102	; 0x66
 8005036:	d100      	bne.n	800503a <CLI_CommandParser+0x18e>
 8005038:	e0dd      	b.n	80051f6 <CLI_CommandParser+0x34a>
 800503a:	1c7b      	adds	r3, r7, #1
 800503c:	9304      	str	r3, [sp, #16]
				else if(id == BOS_BROADCAST){
 800503e:	9b03      	ldr	r3, [sp, #12]
 8005040:	2bff      	cmp	r3, #255	; 0xff
 8005042:	d100      	bne.n	8005046 <CLI_CommandParser+0x19a>
 8005044:	e08b      	b.n	800515e <CLI_CommandParser+0x2b2>
				else if((uint8_t )id == BOS_MULTICAST){
 8005046:	466b      	mov	r3, sp
 8005048:	7b1b      	ldrb	r3, [r3, #12]
 800504a:	4699      	mov	r9, r3
 800504c:	2bfe      	cmp	r3, #254	; 0xfe
 800504e:	d100      	bne.n	8005052 <CLI_CommandParser+0x1a6>
 8005050:	e102      	b.n	8005258 <CLI_CommandParser+0x3ac>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8005052:	2206      	movs	r2, #6
 8005054:	4972      	ldr	r1, [pc, #456]	; (8005220 <CLI_CommandParser+0x374>)
 8005056:	9804      	ldr	r0, [sp, #16]
 8005058:	f00e f89a 	bl	8013190 <strncmp>
 800505c:	2800      	cmp	r0, #0
 800505e:	d144      	bne.n	80050ea <CLI_CommandParser+0x23e>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8005060:	4b70      	ldr	r3, [pc, #448]	; (8005224 <CLI_CommandParser+0x378>)
						SendMessageToModule(id,CODE_UPDATE,0);
 8005062:	2200      	movs	r2, #0
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8005064:	7018      	strb	r0, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8005066:	2119      	movs	r1, #25
 8005068:	4648      	mov	r0, r9
						BOSMessaging.response = BOS_RESPONSE_NONE;
 800506a:	469a      	mov	sl, r3
						SendMessageToModule(id,CODE_UPDATE,0);
 800506c:	f004 fcf6 	bl	8009a5c <SendMessageToModule>
						osDelay(100);
 8005070:	2064      	movs	r0, #100	; 0x64
 8005072:	f008 fac9 	bl	800d608 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8005076:	4b6c      	ldr	r3, [pc, #432]	; (8005228 <CLI_CommandParser+0x37c>)
 8005078:	4649      	mov	r1, r9
 800507a:	781a      	ldrb	r2, [r3, #0]
 800507c:	4b67      	ldr	r3, [pc, #412]	; (800521c <CLI_CommandParser+0x370>)
 800507e:	7818      	ldrb	r0, [r3, #0]
 8005080:	2300      	movs	r3, #0
 8005082:	f7fe fd5d 	bl	8003b40 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8005086:	4653      	mov	r3, sl
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b60      	cmp	r3, #96	; 0x60
 800508c:	d100      	bne.n	8005090 <CLI_CommandParser+0x1e4>
 800508e:	e095      	b.n	80051bc <CLI_CommandParser+0x310>
 8005090:	7823      	ldrb	r3, [r4, #0]
 8005092:	e795      	b.n	8004fc0 <CLI_CommandParser+0x114>
 8005094:	0028      	movs	r0, r5
 8005096:	f7ff fcb9 	bl	8004a0c <AddSnippet.part.0>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 800509a:	2800      	cmp	r0, #0
 800509c:	d10c      	bne.n	80050b8 <CLI_CommandParser+0x20c>
				pcOutputString[0] ='\r';
 800509e:	230d      	movs	r3, #13
 80050a0:	7023      	strb	r3, [r4, #0]
 80050a2:	e765      	b.n	8004f70 <CLI_CommandParser+0xc4>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80050a4:	2252      	movs	r2, #82	; 0x52
 80050a6:	4961      	ldr	r1, [pc, #388]	; (800522c <CLI_CommandParser+0x380>)
 80050a8:	0020      	movs	r0, r4
 80050aa:	f00d fe2a 	bl	8012d02 <memcpy>
				recordSnippet =0;
 80050ae:	4643      	mov	r3, r8
 80050b0:	464a      	mov	r2, r9
 80050b2:	549f      	strb	r7, [r3, r2]
 80050b4:	7823      	ldrb	r3, [r4, #0]
 80050b6:	e783      	b.n	8004fc0 <CLI_CommandParser+0x114>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80050b8:	2252      	movs	r2, #82	; 0x52
 80050ba:	495c      	ldr	r1, [pc, #368]	; (800522c <CLI_CommandParser+0x380>)
 80050bc:	0020      	movs	r0, r4
 80050be:	f00d fe20 	bl	8012d02 <memcpy>
 80050c2:	7823      	ldrb	r3, [r4, #0]
 80050c4:	e77c      	b.n	8004fc0 <CLI_CommandParser+0x114>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 80050c6:	2301      	movs	r3, #1
 80050c8:	425b      	negs	r3, r3
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	2238      	movs	r2, #56	; 0x38
 80050ce:	3333      	adds	r3, #51	; 0x33
 80050d0:	4957      	ldr	r1, [pc, #348]	; (8005230 <CLI_CommandParser+0x384>)
 80050d2:	9802      	ldr	r0, [sp, #8]
 80050d4:	f008 f94c 	bl	800d370 <writePxMutex>
}
 80050d8:	e78a      	b.n	8004ff0 <CLI_CommandParser+0x144>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80050da:	2299      	movs	r2, #153	; 0x99
 80050dc:	1c78      	adds	r0, r7, #1
 80050de:	0092      	lsls	r2, r2, #2
 80050e0:	0021      	movs	r1, r4
 80050e2:	f008 fb25 	bl	800d730 <FreeRTOS_CLIProcessCommand>
 80050e6:	4682      	mov	sl, r0
 80050e8:	e716      	b.n	8004f18 <CLI_CommandParser+0x6c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 80050ea:	0028      	movs	r0, r5
 80050ec:	f7fb f814 	bl	8000118 <strlen>
 80050f0:	0007      	movs	r7, r0
 80050f2:	a807      	add	r0, sp, #28
 80050f4:	f7fb f810 	bl	8000118 <strlen>
 80050f8:	4682      	mov	sl, r0
 80050fa:	1e7a      	subs	r2, r7, #1
 80050fc:	1a12      	subs	r2, r2, r0
 80050fe:	9904      	ldr	r1, [sp, #16]
 8005100:	484c      	ldr	r0, [pc, #304]	; (8005234 <CLI_CommandParser+0x388>)
 8005102:	f00e f856 	bl	80131b2 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8005106:	0028      	movs	r0, r5
 8005108:	f7fb f806 	bl	8000118 <strlen>
 800510c:	4653      	mov	r3, sl
 800510e:	3801      	subs	r0, #1
 8005110:	1ac2      	subs	r2, r0, r3
 8005112:	b292      	uxth	r2, r2
 8005114:	2117      	movs	r1, #23
 8005116:	4648      	mov	r0, r9
 8005118:	f004 fca0 	bl	8009a5c <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 800511c:	9a03      	ldr	r2, [sp, #12]
 800511e:	4946      	ldr	r1, [pc, #280]	; (8005238 <CLI_CommandParser+0x38c>)
 8005120:	0020      	movs	r0, r4
 8005122:	f00d fff1 	bl	8013108 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8005126:	7823      	ldrb	r3, [r4, #0]
 8005128:	0020      	movs	r0, r4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00d      	beq.n	800514a <CLI_CommandParser+0x29e>
 800512e:	f7fa fff3 	bl	8000118 <strlen>
 8005132:	0002      	movs	r2, r0
 8005134:	2e00      	cmp	r6, #0
 8005136:	d00b      	beq.n	8005150 <CLI_CommandParser+0x2a4>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8005138:	2301      	movs	r3, #1
 800513a:	b282      	uxth	r2, r0
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	0021      	movs	r1, r4
 8005140:	3331      	adds	r3, #49	; 0x31
 8005142:	9802      	ldr	r0, [sp, #8]
 8005144:	f008 f914 	bl	800d370 <writePxMutex>
 8005148:	0020      	movs	r0, r4
 800514a:	f7fa ffe5 	bl	8000118 <strlen>
 800514e:	0002      	movs	r2, r0
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005150:	2100      	movs	r1, #0
 8005152:	0020      	movs	r0, r4
 8005154:	f00d fdde 	bl	8012d14 <memset>
 8005158:	4b32      	ldr	r3, [pc, #200]	; (8005224 <CLI_CommandParser+0x378>)
 800515a:	469a      	mov	sl, r3
 800515c:	e793      	b.n	8005086 <CLI_CommandParser+0x1da>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800515e:	221a      	movs	r2, #26
 8005160:	2100      	movs	r1, #0
 8005162:	4836      	ldr	r0, [pc, #216]	; (800523c <CLI_CommandParser+0x390>)
 8005164:	f00d fdd6 	bl	8012d14 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005168:	0028      	movs	r0, r5
 800516a:	f7fa ffd5 	bl	8000118 <strlen>
 800516e:	0007      	movs	r7, r0
 8005170:	a807      	add	r0, sp, #28
 8005172:	f7fa ffd1 	bl	8000118 <strlen>
 8005176:	4681      	mov	r9, r0
 8005178:	3f01      	subs	r7, #1
 800517a:	1a3a      	subs	r2, r7, r0
 800517c:	9f04      	ldr	r7, [sp, #16]
 800517e:	482d      	ldr	r0, [pc, #180]	; (8005234 <CLI_CommandParser+0x388>)
 8005180:	0039      	movs	r1, r7
 8005182:	f00e f816 	bl	80131b2 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005186:	0028      	movs	r0, r5
 8005188:	f7fa ffc6 	bl	8000118 <strlen>
 800518c:	464b      	mov	r3, r9
 800518e:	1ac3      	subs	r3, r0, r3
 8005190:	b29b      	uxth	r3, r3
 8005192:	2217      	movs	r2, #23
 8005194:	21ff      	movs	r1, #255	; 0xff
 8005196:	9805      	ldr	r0, [sp, #20]
 8005198:	f004 fc1a 	bl	80099d0 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800519c:	2299      	movs	r2, #153	; 0x99
 800519e:	0021      	movs	r1, r4
 80051a0:	0092      	lsls	r2, r2, #2
 80051a2:	0038      	movs	r0, r7
 80051a4:	f008 fac4 	bl	800d730 <FreeRTOS_CLIProcessCommand>
 80051a8:	4682      	mov	sl, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 80051aa:	0020      	movs	r0, r4
 80051ac:	f7fa ffb4 	bl	8000118 <strlen>
 80051b0:	221d      	movs	r2, #29
 80051b2:	1820      	adds	r0, r4, r0
 80051b4:	4922      	ldr	r1, [pc, #136]	; (8005240 <CLI_CommandParser+0x394>)
 80051b6:	f00d fda4 	bl	8012d02 <memcpy>
 80051ba:	e6ad      	b.n	8004f18 <CLI_CommandParser+0x6c>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 80051bc:	21fa      	movs	r1, #250	; 0xfa
 80051be:	2001      	movs	r0, #1
 80051c0:	0089      	lsls	r1, r1, #2
 80051c2:	f009 fd93 	bl	800ecec <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 80051c6:	4b1f      	ldr	r3, [pc, #124]	; (8005244 <CLI_CommandParser+0x398>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d100      	bne.n	80051d0 <CLI_CommandParser+0x324>
 80051ce:	e75f      	b.n	8005090 <CLI_CommandParser+0x1e4>
							++timedoutMsg;
 80051d0:	4a1d      	ldr	r2, [pc, #116]	; (8005248 <CLI_CommandParser+0x39c>)
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051d2:	491e      	ldr	r1, [pc, #120]	; (800524c <CLI_CommandParser+0x3a0>)
							++timedoutMsg;
 80051d4:	8813      	ldrh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051d6:	0020      	movs	r0, r4
							++timedoutMsg;
 80051d8:	3301      	adds	r3, #1
 80051da:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051dc:	9b03      	ldr	r3, [sp, #12]
 80051de:	0022      	movs	r2, r4
 80051e0:	f00d ff92 	bl	8013108 <sprintf>
 80051e4:	7823      	ldrb	r3, [r4, #0]
 80051e6:	e6eb      	b.n	8004fc0 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 80051e8:	2227      	movs	r2, #39	; 0x27
 80051ea:	4919      	ldr	r1, [pc, #100]	; (8005250 <CLI_CommandParser+0x3a4>)
 80051ec:	0020      	movs	r0, r4
 80051ee:	f00d fd88 	bl	8012d02 <memcpy>
 80051f2:	7823      	ldrb	r3, [r4, #0]
 80051f4:	e6e4      	b.n	8004fc0 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 80051f6:	2225      	movs	r2, #37	; 0x25
 80051f8:	4916      	ldr	r1, [pc, #88]	; (8005254 <CLI_CommandParser+0x3a8>)
 80051fa:	0020      	movs	r0, r4
 80051fc:	f00d fd81 	bl	8012d02 <memcpy>
 8005200:	7823      	ldrb	r3, [r4, #0]
 8005202:	e6dd      	b.n	8004fc0 <CLI_CommandParser+0x114>
 8005204:	20001180 	.word	0x20001180
 8005208:	080181d4 	.word	0x080181d4
 800520c:	08018188 	.word	0x08018188
 8005210:	08018130 	.word	0x08018130
 8005214:	20006ec4 	.word	0x20006ec4
 8005218:	08018190 	.word	0x08018190
 800521c:	20000a98 	.word	0x20000a98
 8005220:	08018274 	.word	0x08018274
 8005224:	20006e28 	.word	0x20006e28
 8005228:	20000c28 	.word	0x20000c28
 800522c:	08018134 	.word	0x08018134
 8005230:	080182c0 	.word	0x080182c0
 8005234:	20000b3c 	.word	0x20000b3c
 8005238:	0801827c 	.word	0x0801827c
 800523c:	20000de0 	.word	0x20000de0
 8005240:	08018228 	.word	0x08018228
 8005244:	20000c3c 	.word	0x20000c3c
 8005248:	20001bce 	.word	0x20001bce
 800524c:	080182a0 	.word	0x080182a0
 8005250:	080181d8 	.word	0x080181d8
 8005254:	08018200 	.word	0x08018200
					group =id >> 8;
 8005258:	4640      	mov	r0, r8
 800525a:	2237      	movs	r2, #55	; 0x37
 800525c:	9b03      	ldr	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800525e:	2100      	movs	r1, #0
					group =id >> 8;
 8005260:	121f      	asrs	r7, r3, #8
 8005262:	b2fb      	uxtb	r3, r7
 8005264:	5483      	strb	r3, [r0, r2]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005266:	3a1d      	subs	r2, #29
 8005268:	481c      	ldr	r0, [pc, #112]	; (80052dc <CLI_CommandParser+0x430>)
					group =id >> 8;
 800526a:	9303      	str	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800526c:	f00d fd52 	bl	8012d14 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005270:	0028      	movs	r0, r5
 8005272:	f7fa ff51 	bl	8000118 <strlen>
 8005276:	0007      	movs	r7, r0
 8005278:	a807      	add	r0, sp, #28
 800527a:	f7fa ff4d 	bl	8000118 <strlen>
 800527e:	4681      	mov	r9, r0
 8005280:	3f01      	subs	r7, #1
 8005282:	1a3a      	subs	r2, r7, r0
 8005284:	9904      	ldr	r1, [sp, #16]
 8005286:	4816      	ldr	r0, [pc, #88]	; (80052e0 <CLI_CommandParser+0x434>)
 8005288:	f00d ff93 	bl	80131b2 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 800528c:	0028      	movs	r0, r5
 800528e:	f7fa ff43 	bl	8000118 <strlen>
 8005292:	464f      	mov	r7, r9
 8005294:	1bc3      	subs	r3, r0, r7
 8005296:	b29b      	uxth	r3, r3
 8005298:	2217      	movs	r2, #23
 800529a:	9903      	ldr	r1, [sp, #12]
 800529c:	9805      	ldr	r0, [sp, #20]
 800529e:	f004 fb97 	bl	80099d0 <BroadcastMessage>
					if(InGroup(myID,group))
 80052a2:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <CLI_CommandParser+0x438>)
 80052a4:	4a10      	ldr	r2, [pc, #64]	; (80052e8 <CLI_CommandParser+0x43c>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	4641      	mov	r1, r8
 80052aa:	3b01      	subs	r3, #1
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	5a9b      	ldrh	r3, [r3, r2]
 80052b0:	2237      	movs	r2, #55	; 0x37
 80052b2:	5c8a      	ldrb	r2, [r1, r2]
 80052b4:	4113      	asrs	r3, r2
 80052b6:	07db      	lsls	r3, r3, #31
 80052b8:	d406      	bmi.n	80052c8 <CLI_CommandParser+0x41c>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 80052ba:	ab07      	add	r3, sp, #28
 80052bc:	0022      	movs	r2, r4
 80052be:	490b      	ldr	r1, [pc, #44]	; (80052ec <CLI_CommandParser+0x440>)
 80052c0:	0020      	movs	r0, r4
 80052c2:	f00d ff21 	bl	8013108 <sprintf>
 80052c6:	e627      	b.n	8004f18 <CLI_CommandParser+0x6c>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80052c8:	2299      	movs	r2, #153	; 0x99
 80052ca:	0021      	movs	r1, r4
 80052cc:	0092      	lsls	r2, r2, #2
 80052ce:	9804      	ldr	r0, [sp, #16]
 80052d0:	f008 fa2e 	bl	800d730 <FreeRTOS_CLIProcessCommand>
 80052d4:	4682      	mov	sl, r0
 80052d6:	e7f0      	b.n	80052ba <CLI_CommandParser+0x40e>
 80052d8:	46b2      	mov	sl, r6
 80052da:	e67c      	b.n	8004fd6 <CLI_CommandParser+0x12a>
 80052dc:	20000de0 	.word	0x20000de0
 80052e0:	20000b3c 	.word	0x20000b3c
 80052e4:	20000a98 	.word	0x20000a98
 80052e8:	20000a9c 	.word	0x20000a9c
 80052ec:	08018248 	.word	0x08018248

080052f0 <prvCLITask>:
void prvCLITask(void *pvParameters){
 80052f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f2:	46de      	mov	lr, fp
 80052f4:	4657      	mov	r7, sl
 80052f6:	464e      	mov	r6, r9
 80052f8:	4645      	mov	r5, r8
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80052fa:	2101      	movs	r1, #1
	char cRxedChar ='\0';
 80052fc:	2300      	movs	r3, #0
void prvCLITask(void *pvParameters){
 80052fe:	b5e0      	push	{r5, r6, r7, lr}
 8005300:	b087      	sub	sp, #28
	char cRxedChar ='\0';
 8005302:	aa02      	add	r2, sp, #8
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005304:	4249      	negs	r1, r1
 8005306:	2001      	movs	r0, #1
	char cRxedChar ='\0';
 8005308:	73d3      	strb	r3, [r2, #15]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800530a:	f009 fcef 	bl	800ecec <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800530e:	f008 fa87 	bl	800d820 <FreeRTOS_CLIGetOutputBuffer>
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005312:	23e1      	movs	r3, #225	; 0xe1
 8005314:	4a62      	ldr	r2, [pc, #392]	; (80054a0 <prvCLITask+0x1b0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005316:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005318:	6892      	ldr	r2, [r2, #8]
 800531a:	031b      	lsls	r3, r3, #12
 800531c:	429a      	cmp	r2, r3
 800531e:	d011      	beq.n	8005344 <prvCLITask+0x54>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005320:	2501      	movs	r5, #1
 8005322:	4b60      	ldr	r3, [pc, #384]	; (80054a4 <prvCLITask+0x1b4>)
 8005324:	7819      	ldrb	r1, [r3, #0]
 8005326:	9302      	str	r3, [sp, #8]
			if(port != PcPort)
 8005328:	428d      	cmp	r5, r1
 800532a:	d006      	beq.n	800533a <prvCLITask+0x4a>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 800532c:	21e1      	movs	r1, #225	; 0xe1
 800532e:	0028      	movs	r0, r5
 8005330:	0309      	lsls	r1, r1, #12
 8005332:	f008 f893 	bl	800d45c <UpdateBaudrate>
 8005336:	9b02      	ldr	r3, [sp, #8]
 8005338:	7819      	ldrb	r1, [r3, #0]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800533a:	3501      	adds	r5, #1
 800533c:	b2ed      	uxtb	r5, r5
 800533e:	2d07      	cmp	r5, #7
 8005340:	d1f2      	bne.n	8005328 <prvCLITask+0x38>
 8005342:	e002      	b.n	800534a <prvCLITask+0x5a>
 8005344:	4b57      	ldr	r3, [pc, #348]	; (80054a4 <prvCLITask+0x1b4>)
 8005346:	7819      	ldrb	r1, [r3, #0]
 8005348:	9302      	str	r3, [sp, #8]
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 800534a:	4b57      	ldr	r3, [pc, #348]	; (80054a8 <prvCLITask+0x1b8>)
 800534c:	4d57      	ldr	r5, [pc, #348]	; (80054ac <prvCLITask+0x1bc>)
 800534e:	881a      	ldrh	r2, [r3, #0]
 8005350:	3538      	adds	r5, #56	; 0x38
 8005352:	0053      	lsls	r3, r2, #1
 8005354:	189b      	adds	r3, r3, r2
 8005356:	4a56      	ldr	r2, [pc, #344]	; (80054b0 <prvCLITask+0x1c0>)
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	189b      	adds	r3, r3, r2
 800535c:	4a55      	ldr	r2, [pc, #340]	; (80054b4 <prvCLITask+0x1c4>)
 800535e:	0028      	movs	r0, r5
 8005360:	7812      	ldrb	r2, [r2, #0]
 8005362:	9100      	str	r1, [sp, #0]
 8005364:	4954      	ldr	r1, [pc, #336]	; (80054b8 <prvCLITask+0x1c8>)
 8005366:	f00d fecf 	bl	8013108 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 800536a:	22a4      	movs	r2, #164	; 0xa4
 800536c:	9c02      	ldr	r4, [sp, #8]
 800536e:	230a      	movs	r3, #10
 8005370:	0092      	lsls	r2, r2, #2
 8005372:	4952      	ldr	r1, [pc, #328]	; (80054bc <prvCLITask+0x1cc>)
 8005374:	7820      	ldrb	r0, [r4, #0]
 8005376:	f008 f82d 	bl	800d3d4 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 800537a:	0028      	movs	r0, r5
 800537c:	f7fa fecc 	bl	8000118 <strlen>
 8005380:	230a      	movs	r3, #10
 8005382:	b282      	uxth	r2, r0
 8005384:	0029      	movs	r1, r5
 8005386:	7820      	ldrb	r0, [r4, #0]
 8005388:	f008 f824 	bl	800d3d4 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 800538c:	2300      	movs	r3, #0
 800538e:	4a4c      	ldr	r2, [pc, #304]	; (80054c0 <prvCLITask+0x1d0>)
				UARTRxBuf[PcPort - 1][chr] =0;
 8005390:	2600      	movs	r6, #0
 8005392:	4690      	mov	r8, r2
 8005394:	4699      	mov	r9, r3
 8005396:	4d4b      	ldr	r5, [pc, #300]	; (80054c4 <prvCLITask+0x1d4>)
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005398:	9b02      	ldr	r3, [sp, #8]
 800539a:	781f      	ldrb	r7, [r3, #0]
 800539c:	1e7c      	subs	r4, r7, #1
 800539e:	5d28      	ldrb	r0, [r5, r4]
 80053a0:	b283      	uxth	r3, r0
 80053a2:	2bbf      	cmp	r3, #191	; 0xbf
 80053a4:	d81d      	bhi.n	80053e2 <prvCLITask+0xf2>
			if(UARTRxBuf[PcPort - 1][chr]){
 80053a6:	0062      	lsls	r2, r4, #1
 80053a8:	1911      	adds	r1, r2, r4
 80053aa:	0189      	lsls	r1, r1, #6
 80053ac:	4441      	add	r1, r8
 80053ae:	4692      	mov	sl, r2
 80053b0:	5c0a      	ldrb	r2, [r1, r0]
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	d10d      	bne.n	80053d2 <prvCLITask+0xe2>
 80053b6:	1c4a      	adds	r2, r1, #1
 80053b8:	4693      	mov	fp, r2
			if(chr == MSG_RX_BUF_SIZE - 1){
 80053ba:	2bbf      	cmp	r3, #191	; 0xbf
 80053bc:	d135      	bne.n	800542a <prvCLITask+0x13a>
			if(UARTRxBuf[PcPort - 1][chr]){
 80053be:	465b      	mov	r3, fp
 80053c0:	781a      	ldrb	r2, [r3, #0]
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80053c2:	552e      	strb	r6, [r5, r4]
			if(UARTRxBuf[PcPort - 1][chr]){
 80053c4:	2a00      	cmp	r2, #0
 80053c6:	d160      	bne.n	800548a <prvCLITask+0x19a>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80053c8:	2302      	movs	r3, #2
			if(UARTRxBuf[PcPort - 1][chr]){
 80053ca:	5cca      	ldrb	r2, [r1, r3]
 80053cc:	0018      	movs	r0, r3
 80053ce:	2a00      	cmp	r2, #0
 80053d0:	d0f3      	beq.n	80053ba <prvCLITask+0xca>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 80053d2:	a902      	add	r1, sp, #8
 80053d4:	73ca      	strb	r2, [r1, #15]
				UARTRxBuf[PcPort - 1][chr] =0;
 80053d6:	4652      	mov	r2, sl
 80053d8:	1912      	adds	r2, r2, r4
 80053da:	0192      	lsls	r2, r2, #6
 80053dc:	4442      	add	r2, r8
 80053de:	5416      	strb	r6, [r2, r0]
				UARTRxBufIndex[PcPort - 1] =chr;
 80053e0:	552b      	strb	r3, [r5, r4]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 80053e2:	a802      	add	r0, sp, #8
 80053e4:	4684      	mov	ip, r0
 80053e6:	210f      	movs	r1, #15
 80053e8:	230a      	movs	r3, #10
 80053ea:	2201      	movs	r2, #1
 80053ec:	4461      	add	r1, ip
 80053ee:	0038      	movs	r0, r7
 80053f0:	f007 fff0 	bl	800d3d4 <writePxITMutex>
		if(cRxedChar == '\r'){
 80053f4:	ab02      	add	r3, sp, #8
 80053f6:	7bdb      	ldrb	r3, [r3, #15]
 80053f8:	2b0d      	cmp	r3, #13
 80053fa:	d026      	beq.n	800544a <prvCLITask+0x15a>
			if(cRxedChar == '\n'){
 80053fc:	2b0a      	cmp	r3, #10
 80053fe:	d011      	beq.n	8005424 <prvCLITask+0x134>
			else if(cRxedChar == '\b' || cRxedChar == 127 ){
 8005400:	2b08      	cmp	r3, #8
 8005402:	d015      	beq.n	8005430 <prvCLITask+0x140>
 8005404:	2b7f      	cmp	r3, #127	; 0x7f
 8005406:	d013      	beq.n	8005430 <prvCLITask+0x140>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 8005408:	001a      	movs	r2, r3
 800540a:	3a20      	subs	r2, #32
 800540c:	2a5e      	cmp	r2, #94	; 0x5e
 800540e:	d809      	bhi.n	8005424 <prvCLITask+0x134>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 8005410:	464a      	mov	r2, r9
 8005412:	2a31      	cmp	r2, #49	; 0x31
 8005414:	dc06      	bgt.n	8005424 <prvCLITask+0x134>
						cInputIndex++;
 8005416:	464c      	mov	r4, r9
						cInputString[cInputIndex] =cRxedChar;
 8005418:	4a2b      	ldr	r2, [pc, #172]	; (80054c8 <prvCLITask+0x1d8>)
						cInputIndex++;
 800541a:	3401      	adds	r4, #1
						cInputString[cInputIndex] =cRxedChar;
 800541c:	444a      	add	r2, r9
 800541e:	7513      	strb	r3, [r2, #20]
						cInputIndex++;
 8005420:	b263      	sxtb	r3, r4
 8005422:	4699      	mov	r9, r3
		taskYIELD();
 8005424:	f009 ff1c 	bl	800f260 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005428:	e7b6      	b.n	8005398 <prvCLITask+0xa8>
 800542a:	3301      	adds	r3, #1
 800542c:	b29b      	uxth	r3, r3
 800542e:	e7cc      	b.n	80053ca <prvCLITask+0xda>
				if(cInputIndex > 0){
 8005430:	464b      	mov	r3, r9
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f6      	beq.n	8005424 <prvCLITask+0x134>
					cInputIndex--;
 8005436:	464c      	mov	r4, r9
 8005438:	3c01      	subs	r4, #1
 800543a:	b2e3      	uxtb	r3, r4
 800543c:	b25a      	sxtb	r2, r3
 800543e:	4691      	mov	r9, r2
					cInputString[cInputIndex] ='\0';
 8005440:	4a21      	ldr	r2, [pc, #132]	; (80054c8 <prvCLITask+0x1d8>)
 8005442:	4694      	mov	ip, r2
 8005444:	4463      	add	r3, ip
 8005446:	751e      	strb	r6, [r3, #20]
 8005448:	e7ec      	b.n	8005424 <prvCLITask+0x134>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 800544a:	9b02      	ldr	r3, [sp, #8]
 800544c:	2202      	movs	r2, #2
 800544e:	7818      	ldrb	r0, [r3, #0]
 8005450:	491e      	ldr	r1, [pc, #120]	; (80054cc <prvCLITask+0x1dc>)
 8005452:	230a      	movs	r3, #10
 8005454:	f007 ffbe 	bl	800d3d4 <writePxITMutex>
			if(cInputIndex == 0){
 8005458:	464b      	mov	r3, r9
 800545a:	2b00      	cmp	r3, #0
 800545c:	d018      	beq.n	8005490 <prvCLITask+0x1a0>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800545e:	4c1a      	ldr	r4, [pc, #104]	; (80054c8 <prvCLITask+0x1d8>)
 8005460:	9b02      	ldr	r3, [sp, #8]
 8005462:	3414      	adds	r4, #20
 8005464:	7818      	ldrb	r0, [r3, #0]
 8005466:	0022      	movs	r2, r4
 8005468:	9b03      	ldr	r3, [sp, #12]
 800546a:	2101      	movs	r1, #1
 800546c:	f7ff fd1e 	bl	8004eac <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 8005470:	480e      	ldr	r0, [pc, #56]	; (80054ac <prvCLITask+0x1bc>)
 8005472:	0021      	movs	r1, r4
 8005474:	3060      	adds	r0, #96	; 0x60
 8005476:	f00d fe83 	bl	8013180 <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 800547a:	2232      	movs	r2, #50	; 0x32
 800547c:	2100      	movs	r1, #0
 800547e:	0020      	movs	r0, r4
 8005480:	f00d fc48 	bl	8012d14 <memset>
			cInputIndex =0;
 8005484:	2300      	movs	r3, #0
 8005486:	4699      	mov	r9, r3
 8005488:	e7cc      	b.n	8005424 <prvCLITask+0x134>
			if(UARTRxBuf[PcPort - 1][chr]){
 800548a:	2001      	movs	r0, #1
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800548c:	2301      	movs	r3, #1
 800548e:	e7a0      	b.n	80053d2 <prvCLITask+0xe2>
				strcpy((char* )cInputString,(char* )cLastInputString);
 8005490:	4906      	ldr	r1, [pc, #24]	; (80054ac <prvCLITask+0x1bc>)
 8005492:	480d      	ldr	r0, [pc, #52]	; (80054c8 <prvCLITask+0x1d8>)
 8005494:	3160      	adds	r1, #96	; 0x60
 8005496:	3014      	adds	r0, #20
 8005498:	f00d fe72 	bl	8013180 <strcpy>
 800549c:	e7df      	b.n	800545e <prvCLITask+0x16e>
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	20006ea8 	.word	0x20006ea8
 80054a4:	20000c28 	.word	0x20000c28
 80054a8:	20000030 	.word	0x20000030
 80054ac:	20001180 	.word	0x20001180
 80054b0:	0801755c 	.word	0x0801755c
 80054b4:	20000a98 	.word	0x20000a98
 80054b8:	080182fc 	.word	0x080182fc
 80054bc:	08018328 	.word	0x08018328
 80054c0:	2000138c 	.word	0x2000138c
 80054c4:	2000134c 	.word	0x2000134c
 80054c8:	20001200 	.word	0x20001200
 80054cc:	08019b18 	.word	0x08019b18

080054d0 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80054d2:	4b1a      	ldr	r3, [pc, #104]	; (800553c <ParseSnippetCommand+0x6c>)
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80054d4:	000c      	movs	r4, r1
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80054d6:	781a      	ldrb	r2, [r3, #0]
 80054d8:	3a01      	subs	r2, #1
 80054da:	0093      	lsls	r3, r2, #2
 80054dc:	189b      	adds	r3, r3, r2
 80054de:	4a18      	ldr	r2, [pc, #96]	; (8005540 <ParseSnippetCommand+0x70>)
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	18d3      	adds	r3, r2, r3
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d018      	beq.n	800551c <ParseSnippetCommand+0x4c>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 80054ea:	4e16      	ldr	r6, [pc, #88]	; (8005544 <ParseSnippetCommand+0x74>)
 80054ec:	6cb5      	ldr	r5, [r6, #72]	; 0x48
 80054ee:	2d00      	cmp	r5, #0
 80054f0:	d016      	beq.n	8005520 <ParseSnippetCommand+0x50>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 80054f2:	782b      	ldrb	r3, [r5, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00e      	beq.n	8005516 <ParseSnippetCommand+0x46>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 80054f8:	2113      	movs	r1, #19
 80054fa:	0028      	movs	r0, r5
 80054fc:	f00d fe32 	bl	8013164 <strchr>
 8005500:	1e07      	subs	r7, r0, #0
	if(ptrEnd != NULL){
 8005502:	d010      	beq.n	8005526 <ParseSnippetCommand+0x56>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8005504:	1b42      	subs	r2, r0, r5
 8005506:	0029      	movs	r1, r5
 8005508:	0020      	movs	r0, r4
 800550a:	f00d fe52 	bl	80131b2 <strncpy>
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 800550e:	2001      	movs	r0, #1
		ptrStart =ptrEnd + 1;
 8005510:	3701      	adds	r7, #1
 8005512:	64b7      	str	r7, [r6, #72]	; 0x48
}
 8005514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ptrStart =0;		// Initialize the start pointer for next Snippet
 8005516:	64b3      	str	r3, [r6, #72]	; 0x48
		return false;
 8005518:	2000      	movs	r0, #0
 800551a:	e7fb      	b.n	8005514 <ParseSnippetCommand+0x44>
		return false;
 800551c:	2000      	movs	r0, #0
 800551e:	e7f9      	b.n	8005514 <ParseSnippetCommand+0x44>
		ptrStart =snippetBuffer;
 8005520:	64b0      	str	r0, [r6, #72]	; 0x48
 8005522:	0005      	movs	r5, r0
 8005524:	e7e5      	b.n	80054f2 <ParseSnippetCommand+0x22>
		strcpy((char* )cliBuffer,ptrStart);
 8005526:	0029      	movs	r1, r5
 8005528:	0020      	movs	r0, r4
 800552a:	f00d fe29 	bl	8013180 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 800552e:	0020      	movs	r0, r4
 8005530:	f7fa fdf2 	bl	8000118 <strlen>
 8005534:	182d      	adds	r5, r5, r0
 8005536:	64b5      	str	r5, [r6, #72]	; 0x48
	return true;
 8005538:	2001      	movs	r0, #1
 800553a:	e7eb      	b.n	8005514 <ParseSnippetCommand+0x44>
 800553c:	20001180 	.word	0x20001180
 8005540:	20006ec4 	.word	0x20006ec4
 8005544:	20001200 	.word	0x20001200

08005548 <CheckSnippetCondition>:
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005548:	0083      	lsls	r3, r0, #2
bool CheckSnippetCondition(uint8_t index){
 800554a:	b530      	push	{r4, r5, lr}
	switch(snippets[index].cond.conditionType){
 800554c:	1818      	adds	r0, r3, r0
 800554e:	492e      	ldr	r1, [pc, #184]	; (8005608 <CheckSnippetCondition+0xc0>)
 8005550:	0080      	lsls	r0, r0, #2
 8005552:	5c0b      	ldrb	r3, [r1, r0]
bool CheckSnippetCondition(uint8_t index){
 8005554:	b083      	sub	sp, #12
	switch(snippets[index].cond.conditionType){
 8005556:	2b01      	cmp	r3, #1
 8005558:	d020      	beq.n	800559c <CheckSnippetCondition+0x54>
 800555a:	2b03      	cmp	r3, #3
 800555c:	d11b      	bne.n	8005596 <CheckSnippetCondition+0x4e>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 800555e:	180c      	adds	r4, r1, r0
 8005560:	78e2      	ldrb	r2, [r4, #3]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005562:	3006      	adds	r0, #6
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005564:	3a01      	subs	r2, #1
 8005566:	0053      	lsls	r3, r2, #1
 8005568:	189b      	adds	r3, r3, r2
 800556a:	4a28      	ldr	r2, [pc, #160]	; (800560c <CheckSnippetCondition+0xc4>)
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	589b      	ldr	r3, [r3, r2]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005570:	1841      	adds	r1, r0, r1
 8005572:	2204      	movs	r2, #4
 8005574:	a801      	add	r0, sp, #4
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005576:	681d      	ldr	r5, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005578:	f00d fbc3 	bl	8012d02 <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 800557c:	7863      	ldrb	r3, [r4, #1]
 800557e:	2b06      	cmp	r3, #6
 8005580:	d809      	bhi.n	8005596 <CheckSnippetCondition+0x4e>
 8005582:	4a23      	ldr	r2, [pc, #140]	; (8005610 <CheckSnippetCondition+0xc8>)
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	58d3      	ldr	r3, [r2, r3]
 8005588:	469f      	mov	pc, r3
				case MATH_GREATER:
					if(flt1 > flt2)
						return true;
					break;
				case MATH_SMALLER:
					if(flt1 < flt2 && flt1 != 0.0f)
 800558a:	1c29      	adds	r1, r5, #0
 800558c:	9801      	ldr	r0, [sp, #4]
 800558e:	f7fa ffb9 	bl	8000504 <__aeabi_fcmpgt>
 8005592:	2800      	cmp	r0, #0
 8005594:	d114      	bne.n	80055c0 <CheckSnippetCondition+0x78>
			
		default:
			break;
	}
	
	return false;
 8005596:	2000      	movs	r0, #0
}
 8005598:	b003      	add	sp, #12
 800559a:	bd30      	pop	{r4, r5, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 800559c:	1808      	adds	r0, r1, r0
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 800559e:	7882      	ldrb	r2, [r0, #2]
 80055a0:	78c0      	ldrb	r0, [r0, #3]
 80055a2:	00d3      	lsls	r3, r2, #3
 80055a4:	189b      	adds	r3, r3, r2
 80055a6:	4a1b      	ldr	r2, [pc, #108]	; (8005614 <CheckSnippetCondition+0xcc>)
 80055a8:	5c9b      	ldrb	r3, [r3, r2]
 80055aa:	1a18      	subs	r0, r3, r0
 80055ac:	4243      	negs	r3, r0
 80055ae:	4158      	adcs	r0, r3
 80055b0:	b2c0      	uxtb	r0, r0
 80055b2:	e7f1      	b.n	8005598 <CheckSnippetCondition+0x50>
					if(flt1 != flt2 && flt1 != 0.0f)
 80055b4:	1c29      	adds	r1, r5, #0
 80055b6:	9801      	ldr	r0, [sp, #4]
 80055b8:	f7fa ff8a 	bl	80004d0 <__aeabi_fcmpeq>
 80055bc:	2800      	cmp	r0, #0
 80055be:	d1ea      	bne.n	8005596 <CheckSnippetCondition+0x4e>
 80055c0:	2100      	movs	r1, #0
 80055c2:	1c28      	adds	r0, r5, #0
 80055c4:	f7fa ff84 	bl	80004d0 <__aeabi_fcmpeq>
 80055c8:	4243      	negs	r3, r0
 80055ca:	4158      	adcs	r0, r3
 80055cc:	e7e4      	b.n	8005598 <CheckSnippetCondition+0x50>
					if(flt1 == flt2)
 80055ce:	1c29      	adds	r1, r5, #0
 80055d0:	9801      	ldr	r0, [sp, #4]
 80055d2:	f7fa ff7d 	bl	80004d0 <__aeabi_fcmpeq>
 80055d6:	1e43      	subs	r3, r0, #1
 80055d8:	4198      	sbcs	r0, r3
 80055da:	e7dd      	b.n	8005598 <CheckSnippetCondition+0x50>
					if(flt1 > flt2)
 80055dc:	1c29      	adds	r1, r5, #0
 80055de:	9801      	ldr	r0, [sp, #4]
 80055e0:	f7fa ff7c 	bl	80004dc <__aeabi_fcmplt>
 80055e4:	1e43      	subs	r3, r0, #1
 80055e6:	4198      	sbcs	r0, r3
 80055e8:	e7d6      	b.n	8005598 <CheckSnippetCondition+0x50>
					if(flt1 >= flt2)
 80055ea:	1c29      	adds	r1, r5, #0
 80055ec:	9801      	ldr	r0, [sp, #4]
 80055ee:	f7fa ff7f 	bl	80004f0 <__aeabi_fcmple>
 80055f2:	1e43      	subs	r3, r0, #1
 80055f4:	4198      	sbcs	r0, r3
 80055f6:	e7cf      	b.n	8005598 <CheckSnippetCondition+0x50>
					if(flt1 <= flt2 && flt1 != 0.0f)
 80055f8:	1c29      	adds	r1, r5, #0
 80055fa:	9801      	ldr	r0, [sp, #4]
 80055fc:	f7fa ff8c 	bl	8000518 <__aeabi_fcmpge>
 8005600:	2800      	cmp	r0, #0
 8005602:	d1dd      	bne.n	80055c0 <CheckSnippetCondition+0x78>
 8005604:	e7c7      	b.n	8005596 <CheckSnippetCondition+0x4e>
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	20006ec4 	.word	0x20006ec4
 800560c:	20000094 	.word	0x20000094
 8005610:	080175f4 	.word	0x080175f4
 8005614:	2000191c 	.word	0x2000191c

08005618 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	46de      	mov	lr, fp
 800561c:	464e      	mov	r6, r9
 800561e:	4645      	mov	r5, r8
 8005620:	4657      	mov	r7, sl
 8005622:	b5e0      	push	{r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005624:	f008 f8fc 	bl	800d820 <FreeRTOS_CLIGetOutputBuffer>
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 8005628:	4b23      	ldr	r3, [pc, #140]	; (80056b8 <ExecuteSnippet+0xa0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800562a:	0006      	movs	r6, r0
	for(s =0; s < numOfRecordedSnippets; s++){
 800562c:	4698      	mov	r8, r3
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d039      	beq.n	80056a8 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
		{
			if(CheckSnippetCondition(s))				// Process Snippet condition
			{
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005634:	4b21      	ldr	r3, [pc, #132]	; (80056bc <ExecuteSnippet+0xa4>)
 8005636:	4f22      	ldr	r7, [pc, #136]	; (80056c0 <ExecuteSnippet+0xa8>)
 8005638:	469b      	mov	fp, r3
 800563a:	2320      	movs	r3, #32
 800563c:	469a      	mov	sl, r3
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 800563e:	4b21      	ldr	r3, [pc, #132]	; (80056c4 <ExecuteSnippet+0xac>)
 8005640:	4d21      	ldr	r5, [pc, #132]	; (80056c8 <ExecuteSnippet+0xb0>)
	for(s =0; s < numOfRecordedSnippets; s++){
 8005642:	2400      	movs	r4, #0
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005644:	374c      	adds	r7, #76	; 0x4c
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005646:	4699      	mov	r9, r3
 8005648:	e006      	b.n	8005658 <ExecuteSnippet+0x40>
	for(s =0; s < numOfRecordedSnippets; s++){
 800564a:	4643      	mov	r3, r8
 800564c:	3401      	adds	r4, #1
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	b2a4      	uxth	r4, r4
 8005652:	3514      	adds	r5, #20
 8005654:	42a3      	cmp	r3, r4
 8005656:	d927      	bls.n	80056a8 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
 8005658:	7c2b      	ldrb	r3, [r5, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0f5      	beq.n	800564a <ExecuteSnippet+0x32>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 800565e:	b2e0      	uxtb	r0, r4
 8005660:	f7ff ff72 	bl	8005548 <CheckSnippetCondition>
 8005664:	2800      	cmp	r0, #0
 8005666:	d0f0      	beq.n	800564a <ExecuteSnippet+0x32>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005668:	465b      	mov	r3, fp
 800566a:	4652      	mov	r2, sl
 800566c:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800566e:	e00e      	b.n	800568e <ExecuteSnippet+0x76>
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005670:	464b      	mov	r3, r9
 8005672:	003a      	movs	r2, r7
 8005674:	7818      	ldrb	r0, [r3, #0]
 8005676:	2100      	movs	r1, #0
 8005678:	0033      	movs	r3, r6
 800567a:	f7ff fc17 	bl	8004eac <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800567e:	0030      	movs	r0, r6
 8005680:	f7fa fd4a 	bl	8000118 <strlen>
 8005684:	2100      	movs	r1, #0
 8005686:	0002      	movs	r2, r0
 8005688:	0030      	movs	r0, r6
 800568a:	f00d fb43 	bl	8012d14 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800568e:	0039      	movs	r1, r7
 8005690:	68e8      	ldr	r0, [r5, #12]
 8005692:	f7ff ff1d 	bl	80054d0 <ParseSnippetCommand>
 8005696:	2800      	cmp	r0, #0
 8005698:	d1ea      	bne.n	8005670 <ExecuteSnippet+0x58>
	for(s =0; s < numOfRecordedSnippets; s++){
 800569a:	4643      	mov	r3, r8
 800569c:	3401      	adds	r4, #1
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	b2a4      	uxth	r4, r4
 80056a2:	3514      	adds	r5, #20
 80056a4:	42a3      	cmp	r3, r4
 80056a6:	d8d7      	bhi.n	8005658 <ExecuteSnippet+0x40>
			}
		}
	}
	
	return result;
}
 80056a8:	2000      	movs	r0, #0
 80056aa:	bc3c      	pop	{r2, r3, r4, r5}
 80056ac:	4690      	mov	r8, r2
 80056ae:	4699      	mov	r9, r3
 80056b0:	46a2      	mov	sl, r4
 80056b2:	46ab      	mov	fp, r5
 80056b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	20001180 	.word	0x20001180
 80056bc:	20006e28 	.word	0x20006e28
 80056c0:	20001200 	.word	0x20001200
 80056c4:	20000c28 	.word	0x20000c28
 80056c8:	20006ec4 	.word	0x20006ec4

080056cc <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 80056cc:	2000      	movs	r0, #0
 80056ce:	4770      	bx	lr

080056d0 <setBaudrateCommand>:

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 80056d0:	2300      	movs	r3, #0
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056d2:	b570      	push	{r4, r5, r6, lr}
 80056d4:	b082      	sub	sp, #8
 80056d6:	0004      	movs	r4, r0
 80056d8:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80056da:	9300      	str	r3, [sp, #0]
	portBASE_TYPE xParameterStringLength2 =0;
 80056dc:	9301      	str	r3, [sp, #4]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80056de:	2800      	cmp	r0, #0
 80056e0:	d017      	beq.n	8005712 <setBaudrateCommand+0x42>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80056e2:	466a      	mov	r2, sp
 80056e4:	2101      	movs	r1, #1
 80056e6:	0028      	movs	r0, r5
 80056e8:	f008 f89e 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80056ec:	2300      	movs	r3, #0
 80056ee:	56c3      	ldrsb	r3, [r0, r3]
 80056f0:	2b70      	cmp	r3, #112	; 0x70
 80056f2:	d010      	beq.n	8005716 <setBaudrateCommand+0x46>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80056f4:	aa01      	add	r2, sp, #4
 80056f6:	2102      	movs	r1, #2
 80056f8:	0028      	movs	r0, r5
 80056fa:	f008 f895 	bl	800d828 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80056fe:	f00d f840 	bl	8012782 <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005702:	2213      	movs	r2, #19
 8005704:	4910      	ldr	r1, [pc, #64]	; (8005748 <setBaudrateCommand+0x78>)
 8005706:	0020      	movs	r0, r4
 8005708:	f00d fafb 	bl	8012d02 <memcpy>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800570c:	2000      	movs	r0, #0
 800570e:	b002      	add	sp, #8
 8005710:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8005712:	b672      	cpsid	i
 8005714:	e7fe      	b.n	8005714 <setBaudrateCommand+0x44>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005716:	3001      	adds	r0, #1
 8005718:	f00d f833 	bl	8012782 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800571c:	aa01      	add	r2, sp, #4
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800571e:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005720:	2102      	movs	r1, #2
 8005722:	0028      	movs	r0, r5
 8005724:	f008 f880 	bl	800d828 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005728:	f00d f82b 	bl	8012782 <atol>
 800572c:	0005      	movs	r5, r0
		UpdateBaudrate(port,baudrate);
 800572e:	b2f0      	uxtb	r0, r6
 8005730:	0029      	movs	r1, r5
 8005732:	f007 fe93 	bl	800d45c <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 8005736:	23ff      	movs	r3, #255	; 0xff
 8005738:	002a      	movs	r2, r5
 800573a:	4033      	ands	r3, r6
 800573c:	4903      	ldr	r1, [pc, #12]	; (800574c <setBaudrateCommand+0x7c>)
 800573e:	0020      	movs	r0, r4
 8005740:	f00d fce2 	bl	8013108 <sprintf>
 8005744:	e7e2      	b.n	800570c <setBaudrateCommand+0x3c>
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	080185e4 	.word	0x080185e4
 800574c:	080185bc 	.word	0x080185bc

08005750 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005750:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005752:	2800      	cmp	r0, #0
 8005754:	d101      	bne.n	800575a <flashsizeCommand+0xa>
 8005756:	b672      	cpsid	i
 8005758:	e7fe      	b.n	8005758 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 800575a:	4b03      	ldr	r3, [pc, #12]	; (8005768 <flashsizeCommand+0x18>)
 800575c:	4903      	ldr	r1, [pc, #12]	; (800576c <flashsizeCommand+0x1c>)
 800575e:	881a      	ldrh	r2, [r3, #0]
 8005760:	f00d fcd2 	bl	8013108 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005764:	2000      	movs	r0, #0
 8005766:	bd10      	pop	{r4, pc}
 8005768:	1ffff7cc 	.word	0x1ffff7cc
 800576c:	080185f8 	.word	0x080185f8

08005770 <GetReadPrecentageCommand>:
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 8005770:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005772:	b510      	push	{r4, lr}
 8005774:	b082      	sub	sp, #8
	portBASE_TYPE xParameterStringLength1 =0;
 8005776:	9300      	str	r3, [sp, #0]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 8005778:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800577a:	0004      	movs	r4, r0
	float ADC_Value_CLI =0;
 800577c:	9301      	str	r3, [sp, #4]
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800577e:	0010      	movs	r0, r2
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005780:	2c00      	cmp	r4, #0
 8005782:	d00f      	beq.n	80057a4 <GetReadPrecentageCommand+0x34>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005784:	466a      	mov	r2, sp
 8005786:	2101      	movs	r1, #1
 8005788:	f008 f84e 	bl	800d828 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800578c:	7803      	ldrb	r3, [r0, #0]
 800578e:	3b32      	subs	r3, #50	; 0x32
 8005790:	2b01      	cmp	r3, #1
 8005792:	d909      	bls.n	80057a8 <GetReadPrecentageCommand+0x38>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005794:	2215      	movs	r2, #21
 8005796:	490c      	ldr	r1, [pc, #48]	; (80057c8 <GetReadPrecentageCommand+0x58>)
 8005798:	0020      	movs	r0, r4
 800579a:	f00d fab2 	bl	8012d02 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 800579e:	2000      	movs	r0, #0
 80057a0:	b002      	add	sp, #8
 80057a2:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 80057a4:	b672      	cpsid	i
 80057a6:	e7fe      	b.n	80057a6 <GetReadPrecentageCommand+0x36>
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80057a8:	f00c ffeb 	bl	8012782 <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 80057ac:	a901      	add	r1, sp, #4
 80057ae:	b2c0      	uxtb	r0, r0
 80057b0:	f003 f97c 	bl	8008aac <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 80057b4:	9801      	ldr	r0, [sp, #4]
 80057b6:	f7fd f9b5 	bl	8002b24 <__aeabi_f2d>
 80057ba:	0002      	movs	r2, r0
 80057bc:	000b      	movs	r3, r1
 80057be:	0020      	movs	r0, r4
 80057c0:	4902      	ldr	r1, [pc, #8]	; (80057cc <GetReadPrecentageCommand+0x5c>)
 80057c2:	f00d fca1 	bl	8013108 <sprintf>
 80057c6:	e7ea      	b.n	800579e <GetReadPrecentageCommand+0x2e>
 80057c8:	0801863c 	.word	0x0801863c
 80057cc:	08018618 	.word	0x08018618

080057d0 <ReadVrefCommand>:
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80057d0:	2300      	movs	r3, #0
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057d2:	b510      	push	{r4, lr}
 80057d4:	b082      	sub	sp, #8
 80057d6:	1e04      	subs	r4, r0, #0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80057dc:	d101      	bne.n	80057e2 <ReadVrefCommand+0x12>
 80057de:	b672      	cpsid	i
 80057e0:	e7fe      	b.n	80057e0 <ReadVrefCommand+0x10>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80057e2:	a901      	add	r1, sp, #4
 80057e4:	4668      	mov	r0, sp
 80057e6:	f003 f893 	bl	8008910 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80057ea:	4669      	mov	r1, sp
 80057ec:	0020      	movs	r0, r4
 80057ee:	f00d fcc7 	bl	8013180 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80057f2:	9801      	ldr	r0, [sp, #4]
 80057f4:	f7fd f996 	bl	8002b24 <__aeabi_f2d>
 80057f8:	0002      	movs	r2, r0
 80057fa:	000b      	movs	r3, r1
 80057fc:	0020      	movs	r0, r4
 80057fe:	4903      	ldr	r1, [pc, #12]	; (800580c <ReadVrefCommand+0x3c>)
 8005800:	f00d fc82 	bl	8013108 <sprintf>
}
 8005804:	2000      	movs	r0, #0
 8005806:	b002      	add	sp, #8
 8005808:	bd10      	pop	{r4, pc}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	08018654 	.word	0x08018654

08005810 <ReadTempCommand>:
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005810:	2300      	movs	r3, #0
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005812:	b510      	push	{r4, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	1e04      	subs	r4, r0, #0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 800581c:	d101      	bne.n	8005822 <ReadTempCommand+0x12>
 800581e:	b672      	cpsid	i
 8005820:	e7fe      	b.n	8005820 <ReadTempCommand+0x10>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005822:	a901      	add	r1, sp, #4
 8005824:	4668      	mov	r0, sp
 8005826:	f003 f873 	bl	8008910 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800582a:	4669      	mov	r1, sp
 800582c:	0020      	movs	r0, r4
 800582e:	f00d fca7 	bl	8013180 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005832:	9800      	ldr	r0, [sp, #0]
 8005834:	f7fd f976 	bl	8002b24 <__aeabi_f2d>
 8005838:	0002      	movs	r2, r0
 800583a:	000b      	movs	r3, r1
 800583c:	0020      	movs	r0, r4
 800583e:	4903      	ldr	r1, [pc, #12]	; (800584c <ReadTempCommand+0x3c>)
 8005840:	f00d fc62 	bl	8013108 <sprintf>
}
 8005844:	2000      	movs	r0, #0
 8005846:	b002      	add	sp, #8
 8005848:	bd10      	pop	{r4, pc}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	0801867c 	.word	0x0801867c

08005850 <ADCReadCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005850:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005852:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005854:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 8005856:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005858:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 800585a:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800585c:	0004      	movs	r4, r0
 800585e:	0016      	movs	r6, r2
	float ADC_Value_CLI =0;
 8005860:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8005862:	2800      	cmp	r0, #0
 8005864:	d017      	beq.n	8005896 <ADCReadCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005866:	aa01      	add	r2, sp, #4
 8005868:	2101      	movs	r1, #1
 800586a:	0030      	movs	r0, r6
 800586c:	f007 ffdc 	bl	800d828 <FreeRTOS_CLIGetParameter>
 8005870:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005872:	aa02      	add	r2, sp, #8
 8005874:	2102      	movs	r1, #2
 8005876:	0030      	movs	r0, r6
 8005878:	f007 ffd6 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800587c:	782b      	ldrb	r3, [r5, #0]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800587e:	0007      	movs	r7, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005880:	3b32      	subs	r3, #50	; 0x32
 8005882:	2b01      	cmp	r3, #1
 8005884:	d909      	bls.n	800589a <ADCReadCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005886:	2215      	movs	r2, #21
 8005888:	491a      	ldr	r1, [pc, #104]	; (80058f4 <ADCReadCommand+0xa4>)
 800588a:	0020      	movs	r0, r4
 800588c:	f00d fa39 	bl	8012d02 <memcpy>
}
 8005890:	2000      	movs	r0, #0
 8005892:	b005      	add	sp, #20
 8005894:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005896:	b672      	cpsid	i
 8005898:	e7fe      	b.n	8005898 <ADCReadCommand+0x48>
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800589a:	0028      	movs	r0, r5
 800589c:	f00c ff71 	bl	8012782 <atol>
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 80058a0:	4e15      	ldr	r6, [pc, #84]	; (80058f8 <ADCReadCommand+0xa8>)
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80058a2:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 80058a4:	0031      	movs	r1, r6
 80058a6:	0038      	movs	r0, r7
 80058a8:	f7fa fc2c 	bl	8000104 <strcmp>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d005      	beq.n	80058bc <ADCReadCommand+0x6c>
 80058b0:	4912      	ldr	r1, [pc, #72]	; (80058fc <ADCReadCommand+0xac>)
 80058b2:	0038      	movs	r0, r7
 80058b4:	f7fa fc26 	bl	8000104 <strcmp>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d115      	bne.n	80058e8 <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports,ADC_Side);
 80058bc:	0031      	movs	r1, r6
 80058be:	0028      	movs	r0, r5
 80058c0:	f003 f9e2 	bl	8008c88 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 80058c4:	aa03      	add	r2, sp, #12
 80058c6:	0031      	movs	r1, r6
 80058c8:	0028      	movs	r0, r5
 80058ca:	f003 fa2d 	bl	8008d28 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 80058ce:	a903      	add	r1, sp, #12
 80058d0:	0020      	movs	r0, r4
 80058d2:	f00d fc55 	bl	8013180 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 80058d6:	9803      	ldr	r0, [sp, #12]
 80058d8:	f7fa fe72 	bl	80005c0 <__aeabi_f2uiz>
 80058dc:	4908      	ldr	r1, [pc, #32]	; (8005900 <ADCReadCommand+0xb0>)
 80058de:	b282      	uxth	r2, r0
 80058e0:	0020      	movs	r0, r4
 80058e2:	f00d fc11 	bl	8013108 <sprintf>
 80058e6:	e7d3      	b.n	8005890 <ADCReadCommand+0x40>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80058e8:	2212      	movs	r2, #18
 80058ea:	4906      	ldr	r1, [pc, #24]	; (8005904 <ADCReadCommand+0xb4>)
 80058ec:	0020      	movs	r0, r4
 80058ee:	f00d fa08 	bl	8012d02 <memcpy>
 80058f2:	e7cd      	b.n	8005890 <ADCReadCommand+0x40>
 80058f4:	0801863c 	.word	0x0801863c
 80058f8:	080186a0 	.word	0x080186a0
 80058fc:	080186a4 	.word	0x080186a4
 8005900:	080186ac 	.word	0x080186ac
 8005904:	080186bc 	.word	0x080186bc

08005908 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800590a:	4645      	mov	r5, r8
 800590c:	46de      	mov	lr, fp
 800590e:	4657      	mov	r7, sl
 8005910:	464e      	mov	r6, r9
	portBASE_TYPE xParameterStringLength1 =0;
 8005912:	2300      	movs	r3, #0
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005914:	b5e0      	push	{r5, r6, r7, lr}
 8005916:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 8005918:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 800591a:	4b5f      	ldr	r3, [pc, #380]	; (8005a98 <testportCommand+0x190>)
 800591c:	ad02      	add	r5, sp, #8
 800591e:	781b      	ldrb	r3, [r3, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005920:	0004      	movs	r4, r0
	char WriteVaule[1] ="H";
 8005922:	702b      	strb	r3, [r5, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005924:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8005926:	2c00      	cmp	r4, #0
 8005928:	d100      	bne.n	800592c <testportCommand+0x24>
 800592a:	e074      	b.n	8005a16 <testportCommand+0x10e>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800592c:	2101      	movs	r1, #1
 800592e:	aa03      	add	r2, sp, #12
 8005930:	f007 ff7a 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005934:	4959      	ldr	r1, [pc, #356]	; (8005a9c <testportCommand+0x194>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005936:	0006      	movs	r6, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005938:	f7fa fbe4 	bl	8000104 <strcmp>
 800593c:	2800      	cmp	r0, #0
 800593e:	d159      	bne.n	80059f4 <testportCommand+0xec>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005940:	2701      	movs	r7, #1
 8005942:	4e57      	ldr	r6, [pc, #348]	; (8005aa0 <testportCommand+0x198>)
 8005944:	4b57      	ldr	r3, [pc, #348]	; (8005aa4 <testportCommand+0x19c>)
 8005946:	7832      	ldrb	r2, [r6, #0]
 8005948:	189b      	adds	r3, r3, r2
 800594a:	3b01      	subs	r3, #1
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	4698      	mov	r8, r3
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005950:	4b55      	ldr	r3, [pc, #340]	; (8005aa8 <testportCommand+0x1a0>)
 8005952:	469b      	mov	fp, r3
 8005954:	b2fb      	uxtb	r3, r7
 8005956:	469a      	mov	sl, r3
			if(PcPort != ports){
 8005958:	429a      	cmp	r2, r3
 800595a:	d107      	bne.n	800596c <testportCommand+0x64>
 800595c:	3701      	adds	r7, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 800595e:	2f07      	cmp	r7, #7
 8005960:	d051      	beq.n	8005a06 <testportCommand+0xfe>
 8005962:	7832      	ldrb	r2, [r6, #0]
 8005964:	b2fb      	uxtb	r3, r7
 8005966:	469a      	mov	sl, r3
			if(PcPort != ports){
 8005968:	429a      	cmp	r2, r3
 800596a:	d0f7      	beq.n	800595c <testportCommand+0x54>
				WriteVaule[0] =rand();
 800596c:	f00d f9ea 	bl	8012d44 <rand>
				writePxMutex(ports,WriteVaule,1,10,100);
 8005970:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 8005972:	7028      	strb	r0, [r5, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005974:	2201      	movs	r2, #1
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	0029      	movs	r1, r5
 800597a:	4699      	mov	r9, r3
 800597c:	4650      	mov	r0, sl
 800597e:	3b5a      	subs	r3, #90	; 0x5a
 8005980:	f007 fcf6 	bl	800d370 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005984:	4650      	mov	r0, sl
 8005986:	f007 fd7b 	bl	800d480 <GetUart>
 800598a:	6803      	ldr	r3, [r0, #0]
				if(WriteVaule[0] == ReadValue[0])
 800598c:	782a      	ldrb	r2, [r5, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800598e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005990:	b2db      	uxtb	r3, r3
 8005992:	429a      	cmp	r2, r3
 8005994:	d041      	beq.n	8005a1a <testportCommand+0x112>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005996:	003a      	movs	r2, r7
 8005998:	4944      	ldr	r1, [pc, #272]	; (8005aac <testportCommand+0x1a4>)
 800599a:	0020      	movs	r0, r4
 800599c:	f00d fbb4 	bl	8013108 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80059a0:	0020      	movs	r0, r4
 80059a2:	f7fa fbb9 	bl	8000118 <strlen>
 80059a6:	464b      	mov	r3, r9
 80059a8:	b282      	uxth	r2, r0
 80059aa:	0021      	movs	r1, r4
 80059ac:	7830      	ldrb	r0, [r6, #0]
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	230a      	movs	r3, #10
 80059b2:	f007 fcdd 	bl	800d370 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 80059b6:	2254      	movs	r2, #84	; 0x54
 80059b8:	493d      	ldr	r1, [pc, #244]	; (8005ab0 <testportCommand+0x1a8>)
 80059ba:	0020      	movs	r0, r4
 80059bc:	f00d f9a1 	bl	8012d02 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80059c0:	2364      	movs	r3, #100	; 0x64
 80059c2:	7830      	ldrb	r0, [r6, #0]
 80059c4:	2253      	movs	r2, #83	; 0x53
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	0021      	movs	r1, r4
 80059ca:	3b5a      	subs	r3, #90	; 0x5a
 80059cc:	f007 fcd0 	bl	800d370 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80059d0:	2301      	movs	r3, #1
 80059d2:	469c      	mov	ip, r3
 80059d4:	44e0      	add	r8, ip
 80059d6:	e002      	b.n	80059de <testportCommand+0xd6>
					Delay_ms(1);
 80059d8:	2001      	movs	r0, #1
 80059da:	f009 fd99 	bl	800f510 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80059de:	7832      	ldrb	r2, [r6, #0]
 80059e0:	3a01      	subs	r2, #1
 80059e2:	0053      	lsls	r3, r2, #1
 80059e4:	189b      	adds	r3, r3, r2
 80059e6:	4642      	mov	r2, r8
 80059e8:	019b      	lsls	r3, r3, #6
 80059ea:	445b      	add	r3, fp
 80059ec:	5c9b      	ldrb	r3, [r3, r2]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f2      	beq.n	80059d8 <testportCommand+0xd0>
 80059f2:	e7b3      	b.n	800595c <testportCommand+0x54>
	else if(pcParameterString1[0] == 'p'){
 80059f4:	2300      	movs	r3, #0
 80059f6:	56f3      	ldrsb	r3, [r6, r3]
 80059f8:	2b70      	cmp	r3, #112	; 0x70
 80059fa:	d01f      	beq.n	8005a3c <testportCommand+0x134>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059fc:	220f      	movs	r2, #15
 80059fe:	492d      	ldr	r1, [pc, #180]	; (8005ab4 <testportCommand+0x1ac>)
 8005a00:	0020      	movs	r0, r4
 8005a02:	f00d f97e 	bl	8012d02 <memcpy>
}
 8005a06:	2000      	movs	r0, #0
 8005a08:	b005      	add	sp, #20
 8005a0a:	bc3c      	pop	{r2, r3, r4, r5}
 8005a0c:	4690      	mov	r8, r2
 8005a0e:	4699      	mov	r9, r3
 8005a10:	46a2      	mov	sl, r4
 8005a12:	46ab      	mov	fp, r5
 8005a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005a16:	b672      	cpsid	i
 8005a18:	e7fe      	b.n	8005a18 <testportCommand+0x110>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 8005a1a:	003a      	movs	r2, r7
 8005a1c:	4926      	ldr	r1, [pc, #152]	; (8005ab8 <testportCommand+0x1b0>)
 8005a1e:	0020      	movs	r0, r4
 8005a20:	f00d fb72 	bl	8013108 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005a24:	0020      	movs	r0, r4
 8005a26:	f7fa fb77 	bl	8000118 <strlen>
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	b282      	uxth	r2, r0
 8005a2e:	0021      	movs	r1, r4
 8005a30:	7830      	ldrb	r0, [r6, #0]
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	3b5a      	subs	r3, #90	; 0x5a
 8005a36:	f007 fc9b 	bl	800d370 <writePxMutex>
 8005a3a:	e7bc      	b.n	80059b6 <testportCommand+0xae>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a3c:	1c70      	adds	r0, r6, #1
 8005a3e:	f00c fea0 	bl	8012782 <atol>
 8005a42:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005a44:	1e7b      	subs	r3, r7, #1
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a46:	0006      	movs	r6, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005a48:	2b05      	cmp	r3, #5
 8005a4a:	d905      	bls.n	8005a58 <testportCommand+0x150>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005a4c:	221b      	movs	r2, #27
 8005a4e:	491b      	ldr	r1, [pc, #108]	; (8005abc <testportCommand+0x1b4>)
 8005a50:	0020      	movs	r0, r4
 8005a52:	f00d f956 	bl	8012d02 <memcpy>
 8005a56:	e7d6      	b.n	8005a06 <testportCommand+0xfe>
				WriteVaule[0] =rand();
 8005a58:	f00d f974 	bl	8012d44 <rand>
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005a5c:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 8005a5e:	7028      	strb	r0, [r5, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005a60:	2201      	movs	r2, #1
 8005a62:	0029      	movs	r1, r5
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	0038      	movs	r0, r7
 8005a68:	3b32      	subs	r3, #50	; 0x32
 8005a6a:	f007 fc81 	bl	800d370 <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005a6e:	0038      	movs	r0, r7
 8005a70:	f007 fd06 	bl	800d480 <GetUart>
 8005a74:	6803      	ldr	r3, [r0, #0]
			if(WriteVaule[0] == ReadValue[0])
 8005a76:	7829      	ldrb	r1, [r5, #0]
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005a78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a7a:	b2f2      	uxtb	r2, r6
			if(WriteVaule[0] == ReadValue[0])
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	4299      	cmp	r1, r3
 8005a80:	d004      	beq.n	8005a8c <testportCommand+0x184>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005a82:	490a      	ldr	r1, [pc, #40]	; (8005aac <testportCommand+0x1a4>)
 8005a84:	0020      	movs	r0, r4
 8005a86:	f00d fb3f 	bl	8013108 <sprintf>
 8005a8a:	e7bc      	b.n	8005a06 <testportCommand+0xfe>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005a8c:	490a      	ldr	r1, [pc, #40]	; (8005ab8 <testportCommand+0x1b0>)
 8005a8e:	0020      	movs	r0, r4
 8005a90:	f00d fb3a 	bl	8013108 <sprintf>
 8005a94:	e7b7      	b.n	8005a06 <testportCommand+0xfe>
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	0801786c 	.word	0x0801786c
 8005a9c:	08017eb4 	.word	0x08017eb4
 8005aa0:	20000c28 	.word	0x20000c28
 8005aa4:	2000134c 	.word	0x2000134c
 8005aa8:	2000138c 	.word	0x2000138c
 8005aac:	080186ec 	.word	0x080186ec
 8005ab0:	08018700 	.word	0x08018700
 8005ab4:	08018770 	.word	0x08018770
 8005ab8:	080186d0 	.word	0x080186d0
 8005abc:	08018754 	.word	0x08018754

08005ac0 <unbridgeCommand>:
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005ac0:	2300      	movs	r3, #0
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	0004      	movs	r4, r0
 8005ac8:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d019      	beq.n	8005b06 <unbridgeCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ad2:	466a      	mov	r2, sp
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	0028      	movs	r0, r5
 8005ad8:	f007 fea6 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005adc:	2300      	movs	r3, #0
 8005ade:	56c3      	ldrsb	r3, [r0, r3]
 8005ae0:	2b70      	cmp	r3, #112	; 0x70
 8005ae2:	d012      	beq.n	8005b0a <unbridgeCommand+0x4a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005ae4:	aa01      	add	r2, sp, #4
 8005ae6:	2102      	movs	r1, #2
 8005ae8:	0028      	movs	r0, r5
 8005aea:	f007 fe9d 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005aee:	2300      	movs	r3, #0
 8005af0:	56c3      	ldrsb	r3, [r0, r3]
 8005af2:	2b70      	cmp	r3, #112	; 0x70
 8005af4:	d029      	beq.n	8005b4a <unbridgeCommand+0x8a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005af6:	220f      	movs	r2, #15
 8005af8:	491a      	ldr	r1, [pc, #104]	; (8005b64 <unbridgeCommand+0xa4>)
 8005afa:	0020      	movs	r0, r4
 8005afc:	f00d f901 	bl	8012d02 <memcpy>
}
 8005b00:	2000      	movs	r0, #0
 8005b02:	b003      	add	sp, #12
 8005b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005b06:	b672      	cpsid	i
 8005b08:	e7fe      	b.n	8005b08 <unbridgeCommand+0x48>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f00c fe39 	bl	8012782 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b10:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005b12:	0006      	movs	r6, r0
 8005b14:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b16:	2102      	movs	r1, #2
 8005b18:	0028      	movs	r0, r5
 8005b1a:	f007 fe85 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005b1e:	2300      	movs	r3, #0
 8005b20:	56c3      	ldrsb	r3, [r0, r3]
 8005b22:	2b70      	cmp	r3, #112	; 0x70
 8005b24:	d1e7      	bne.n	8005af6 <unbridgeCommand+0x36>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005b26:	3001      	adds	r0, #1
 8005b28:	f00c fe2b 	bl	8012782 <atol>
 8005b2c:	0005      	movs	r5, r0
		result =Unbridge(port1,port2);
 8005b2e:	b2c1      	uxtb	r1, r0
 8005b30:	0038      	movs	r0, r7
 8005b32:	f7fe ff33 	bl	800499c <Unbridge>
	if(result == BOS_OK)
 8005b36:	2800      	cmp	r0, #0
 8005b38:	d00b      	beq.n	8005b52 <unbridgeCommand+0x92>
	else if(result == BOS_ERR_WrongParam)
 8005b3a:	2867      	cmp	r0, #103	; 0x67
 8005b3c:	d0db      	beq.n	8005af6 <unbridgeCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005b3e:	2219      	movs	r2, #25
 8005b40:	4909      	ldr	r1, [pc, #36]	; (8005b68 <unbridgeCommand+0xa8>)
 8005b42:	0020      	movs	r0, r4
 8005b44:	f00d f8dd 	bl	8012d02 <memcpy>
	return pdFALSE;
 8005b48:	e7da      	b.n	8005b00 <unbridgeCommand+0x40>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	f00c fe19 	bl	8012782 <atol>
 8005b50:	e7d1      	b.n	8005af6 <unbridgeCommand+0x36>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005b52:	22ff      	movs	r2, #255	; 0xff
 8005b54:	002b      	movs	r3, r5
 8005b56:	4905      	ldr	r1, [pc, #20]	; (8005b6c <unbridgeCommand+0xac>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	0020      	movs	r0, r4
 8005b5c:	4032      	ands	r2, r6
 8005b5e:	f00d fad3 	bl	8013108 <sprintf>
 8005b62:	e7cd      	b.n	8005b00 <unbridgeCommand+0x40>
 8005b64:	08018770 	.word	0x08018770
 8005b68:	080187a0 	.word	0x080187a0
 8005b6c:	08018780 	.word	0x08018780

08005b70 <bridgeCommand>:
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005b70:	2300      	movs	r3, #0
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b74:	b083      	sub	sp, #12
 8005b76:	0004      	movs	r4, r0
 8005b78:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d019      	beq.n	8005bb6 <bridgeCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b82:	466a      	mov	r2, sp
 8005b84:	2101      	movs	r1, #1
 8005b86:	0028      	movs	r0, r5
 8005b88:	f007 fe4e 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	56c3      	ldrsb	r3, [r0, r3]
 8005b90:	2b70      	cmp	r3, #112	; 0x70
 8005b92:	d012      	beq.n	8005bba <bridgeCommand+0x4a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b94:	aa01      	add	r2, sp, #4
 8005b96:	2102      	movs	r1, #2
 8005b98:	0028      	movs	r0, r5
 8005b9a:	f007 fe45 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	56c3      	ldrsb	r3, [r0, r3]
 8005ba2:	2b70      	cmp	r3, #112	; 0x70
 8005ba4:	d029      	beq.n	8005bfa <bridgeCommand+0x8a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005ba6:	220f      	movs	r2, #15
 8005ba8:	491a      	ldr	r1, [pc, #104]	; (8005c14 <bridgeCommand+0xa4>)
 8005baa:	0020      	movs	r0, r4
 8005bac:	f00d f8a9 	bl	8012d02 <memcpy>
}
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	b003      	add	sp, #12
 8005bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005bb6:	b672      	cpsid	i
 8005bb8:	e7fe      	b.n	8005bb8 <bridgeCommand+0x48>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005bba:	3001      	adds	r0, #1
 8005bbc:	f00c fde1 	bl	8012782 <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005bc0:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005bc2:	0006      	movs	r6, r0
 8005bc4:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005bc6:	2102      	movs	r1, #2
 8005bc8:	0028      	movs	r0, r5
 8005bca:	f007 fe2d 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005bce:	2300      	movs	r3, #0
 8005bd0:	56c3      	ldrsb	r3, [r0, r3]
 8005bd2:	2b70      	cmp	r3, #112	; 0x70
 8005bd4:	d1e7      	bne.n	8005ba6 <bridgeCommand+0x36>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	f00c fdd3 	bl	8012782 <atol>
 8005bdc:	0005      	movs	r5, r0
		result =Bridge(port1,port2);
 8005bde:	b2c1      	uxtb	r1, r0
 8005be0:	0038      	movs	r0, r7
 8005be2:	f7fe fec7 	bl	8004974 <Bridge>
	if(result == BOS_OK)
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d00b      	beq.n	8005c02 <bridgeCommand+0x92>
	else if(result == BOS_ERR_WrongParam)
 8005bea:	2867      	cmp	r0, #103	; 0x67
 8005bec:	d0db      	beq.n	8005ba6 <bridgeCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005bee:	2217      	movs	r2, #23
 8005bf0:	4909      	ldr	r1, [pc, #36]	; (8005c18 <bridgeCommand+0xa8>)
 8005bf2:	0020      	movs	r0, r4
 8005bf4:	f00d f885 	bl	8012d02 <memcpy>
	return pdFALSE;
 8005bf8:	e7da      	b.n	8005bb0 <bridgeCommand+0x40>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	f00c fdc1 	bl	8012782 <atol>
 8005c00:	e7d1      	b.n	8005ba6 <bridgeCommand+0x36>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005c02:	22ff      	movs	r2, #255	; 0xff
 8005c04:	002b      	movs	r3, r5
 8005c06:	4905      	ldr	r1, [pc, #20]	; (8005c1c <bridgeCommand+0xac>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	0020      	movs	r0, r4
 8005c0c:	4032      	ands	r2, r6
 8005c0e:	f00d fa7b 	bl	8013108 <sprintf>
 8005c12:	e7cd      	b.n	8005bb0 <bridgeCommand+0x40>
 8005c14:	08018770 	.word	0x08018770
 8005c18:	080187e0 	.word	0x080187e0
 8005c1c:	080187bc 	.word	0x080187bc

08005c20 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c22:	464e      	mov	r6, r9
 8005c24:	4645      	mov	r5, r8
 8005c26:	46de      	mov	lr, fp
 8005c28:	4680      	mov	r8, r0
 8005c2a:	4657      	mov	r7, sl
	configASSERT(pcWriteBuffer);
 8005c2c:	4643      	mov	r3, r8
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c2e:	b5e0      	push	{r5, r6, r7, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 8005c30:	2600      	movs	r6, #0
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c32:	b083      	sub	sp, #12
 8005c34:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005c36:	9601      	str	r6, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01a      	beq.n	8005c72 <delSnipCommand+0x52>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c3c:	aa01      	add	r2, sp, #4
 8005c3e:	2101      	movs	r1, #1
 8005c40:	f007 fdf2 	bl	800d828 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005c44:	f00c fd97 	bl	8012776 <atoi>
 8005c48:	b2c4      	uxtb	r4, r0
	if(!index || index > numOfRecordedSnippets)
 8005c4a:	2c00      	cmp	r4, #0
 8005c4c:	d004      	beq.n	8005c58 <delSnipCommand+0x38>
 8005c4e:	4b2b      	ldr	r3, [pc, #172]	; (8005cfc <delSnipCommand+0xdc>)
 8005c50:	4699      	mov	r9, r3
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	42a3      	cmp	r3, r4
 8005c56:	d20e      	bcs.n	8005c76 <delSnipCommand+0x56>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c58:	2223      	movs	r2, #35	; 0x23
 8005c5a:	4929      	ldr	r1, [pc, #164]	; (8005d00 <delSnipCommand+0xe0>)
 8005c5c:	4640      	mov	r0, r8
 8005c5e:	f00d f850 	bl	8012d02 <memcpy>
}
 8005c62:	2000      	movs	r0, #0
 8005c64:	b003      	add	sp, #12
 8005c66:	bc3c      	pop	{r2, r3, r4, r5}
 8005c68:	4690      	mov	r8, r2
 8005c6a:	4699      	mov	r9, r3
 8005c6c:	46a2      	mov	sl, r4
 8005c6e:	46ab      	mov	fp, r5
 8005c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005c72:	b672      	cpsid	i
 8005c74:	e7fe      	b.n	8005c74 <delSnipCommand+0x54>
		snippets[index - 1].cond.conditionType =0;
 8005c76:	2714      	movs	r7, #20
 8005c78:	4a22      	ldr	r2, [pc, #136]	; (8005d04 <delSnipCommand+0xe4>)
 8005c7a:	b2c3      	uxtb	r3, r0
 8005c7c:	4692      	mov	sl, r2
 8005c7e:	469b      	mov	fp, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	437b      	muls	r3, r7
 8005c84:	189d      	adds	r5, r3, r2
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005c86:	3302      	adds	r3, #2
 8005c88:	4453      	add	r3, sl
 8005c8a:	0018      	movs	r0, r3
		snippets[index - 1].cond.conditionType =0;
 8005c8c:	802e      	strh	r6, [r5, #0]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005c8e:	2204      	movs	r2, #4
 8005c90:	2100      	movs	r1, #0
 8005c92:	f00d f83f 	bl	8012d14 <memset>
		snippets[index - 1].state = false;
 8005c96:	742e      	strb	r6, [r5, #16]
		free(snippets[index - 1].cmd);
 8005c98:	68e8      	ldr	r0, [r5, #12]
 8005c9a:	f00c fdef 	bl	801287c <free>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005c9e:	464b      	mov	r3, r9
		snippets[index - 1].cmd = NULL;
 8005ca0:	60ee      	str	r6, [r5, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005ca2:	781e      	ldrb	r6, [r3, #0]
 8005ca4:	42a6      	cmp	r6, r4
 8005ca6:	d91d      	bls.n	8005ce4 <delSnipCommand+0xc4>
 8005ca8:	465d      	mov	r5, fp
 8005caa:	4653      	mov	r3, sl
 8005cac:	3e01      	subs	r6, #1
 8005cae:	1b34      	subs	r4, r6, r4
 8005cb0:	b2e4      	uxtb	r4, r4
 8005cb2:	445c      	add	r4, fp
 8005cb4:	437d      	muls	r5, r7
 8005cb6:	437c      	muls	r4, r7
 8005cb8:	3314      	adds	r3, #20
 8005cba:	4455      	add	r5, sl
 8005cbc:	18e4      	adds	r4, r4, r3
 8005cbe:	e002      	b.n	8005cc6 <delSnipCommand+0xa6>
 8005cc0:	3514      	adds	r5, #20
 8005cc2:	42a5      	cmp	r5, r4
 8005cc4:	d00f      	beq.n	8005ce6 <delSnipCommand+0xc6>
			if(snippets[s].cond.conditionType){
 8005cc6:	782b      	ldrb	r3, [r5, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0f9      	beq.n	8005cc0 <delSnipCommand+0xa0>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005ccc:	0028      	movs	r0, r5
 8005cce:	003a      	movs	r2, r7
 8005cd0:	0029      	movs	r1, r5
 8005cd2:	3814      	subs	r0, #20
 8005cd4:	f00d f815 	bl	8012d02 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005cd8:	003a      	movs	r2, r7
 8005cda:	2100      	movs	r1, #0
 8005cdc:	0028      	movs	r0, r5
 8005cde:	f00d f819 	bl	8012d14 <memset>
 8005ce2:	e7ed      	b.n	8005cc0 <delSnipCommand+0xa0>
 8005ce4:	3e01      	subs	r6, #1
		--numOfRecordedSnippets;
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	701e      	strb	r6, [r3, #0]
		SaveToRO();
 8005cea:	f005 fbe9 	bl	800b4c0 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005cee:	2236      	movs	r2, #54	; 0x36
 8005cf0:	4905      	ldr	r1, [pc, #20]	; (8005d08 <delSnipCommand+0xe8>)
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	f00d f805 	bl	8012d02 <memcpy>
 8005cf8:	e7b3      	b.n	8005c62 <delSnipCommand+0x42>
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	20001180 	.word	0x20001180
 8005d00:	08018830 	.word	0x08018830
 8005d04:	20006ec4 	.word	0x20006ec4
 8005d08:	080187f8 	.word	0x080187f8

08005d0c <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d0c:	b530      	push	{r4, r5, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 8005d0e:	2500      	movs	r5, #0
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d10:	b083      	sub	sp, #12
 8005d12:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8005d14:	9501      	str	r5, [sp, #4]
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d16:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8005d18:	2c00      	cmp	r4, #0
 8005d1a:	d014      	beq.n	8005d46 <pauseSnipCommand+0x3a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d1c:	aa01      	add	r2, sp, #4
 8005d1e:	2101      	movs	r1, #1
 8005d20:	f007 fd82 	bl	800d828 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005d24:	f00c fd27 	bl	8012776 <atoi>
 8005d28:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <pauseSnipCommand+0x2a>
 8005d2e:	4a0e      	ldr	r2, [pc, #56]	; (8005d68 <pauseSnipCommand+0x5c>)
 8005d30:	7812      	ldrb	r2, [r2, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d209      	bcs.n	8005d4a <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005d36:	2223      	movs	r2, #35	; 0x23
 8005d38:	490c      	ldr	r1, [pc, #48]	; (8005d6c <pauseSnipCommand+0x60>)
 8005d3a:	0020      	movs	r0, r4
 8005d3c:	f00c ffe1 	bl	8012d02 <memcpy>
}
 8005d40:	2000      	movs	r0, #0
 8005d42:	b003      	add	sp, #12
 8005d44:	bd30      	pop	{r4, r5, pc}
	configASSERT(pcWriteBuffer);
 8005d46:	b672      	cpsid	i
 8005d48:	e7fe      	b.n	8005d48 <pauseSnipCommand+0x3c>
		snippets[index - 1].state = false;
 8005d4a:	2314      	movs	r3, #20
 8005d4c:	b2c0      	uxtb	r0, r0
 8005d4e:	3801      	subs	r0, #1
 8005d50:	4343      	muls	r3, r0
 8005d52:	4807      	ldr	r0, [pc, #28]	; (8005d70 <pauseSnipCommand+0x64>)
 8005d54:	18c0      	adds	r0, r0, r3
 8005d56:	7405      	strb	r5, [r0, #16]
		SaveToRO();
 8005d58:	f005 fbb2 	bl	800b4c0 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005d5c:	2235      	movs	r2, #53	; 0x35
 8005d5e:	4905      	ldr	r1, [pc, #20]	; (8005d74 <pauseSnipCommand+0x68>)
 8005d60:	0020      	movs	r0, r4
 8005d62:	f00c ffce 	bl	8012d02 <memcpy>
 8005d66:	e7eb      	b.n	8005d40 <pauseSnipCommand+0x34>
 8005d68:	20001180 	.word	0x20001180
 8005d6c:	08018830 	.word	0x08018830
 8005d70:	20006ec4 	.word	0x20006ec4
 8005d74:	08018854 	.word	0x08018854

08005d78 <actSnipCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005d78:	2300      	movs	r3, #0
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d7a:	b510      	push	{r4, lr}
 8005d7c:	b082      	sub	sp, #8
 8005d7e:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8005d80:	9301      	str	r3, [sp, #4]
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d82:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8005d84:	2c00      	cmp	r4, #0
 8005d86:	d014      	beq.n	8005db2 <actSnipCommand+0x3a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d88:	aa01      	add	r2, sp, #4
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	f007 fd4c 	bl	800d828 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005d90:	f00c fcf1 	bl	8012776 <atoi>
 8005d94:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <actSnipCommand+0x2a>
 8005d9a:	4a0f      	ldr	r2, [pc, #60]	; (8005dd8 <actSnipCommand+0x60>)
 8005d9c:	7812      	ldrb	r2, [r2, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d209      	bcs.n	8005db6 <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005da2:	2223      	movs	r2, #35	; 0x23
 8005da4:	490d      	ldr	r1, [pc, #52]	; (8005ddc <actSnipCommand+0x64>)
 8005da6:	0020      	movs	r0, r4
 8005da8:	f00c ffab 	bl	8012d02 <memcpy>
}
 8005dac:	2000      	movs	r0, #0
 8005dae:	b002      	add	sp, #8
 8005db0:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8005db2:	b672      	cpsid	i
 8005db4:	e7fe      	b.n	8005db4 <actSnipCommand+0x3c>
		snippets[index - 1].state = true;
 8005db6:	2314      	movs	r3, #20
 8005db8:	b2c0      	uxtb	r0, r0
 8005dba:	3801      	subs	r0, #1
 8005dbc:	4343      	muls	r3, r0
 8005dbe:	4808      	ldr	r0, [pc, #32]	; (8005de0 <actSnipCommand+0x68>)
 8005dc0:	18c0      	adds	r0, r0, r3
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005dc6:	f005 fb7b 	bl	800b4c0 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005dca:	2238      	movs	r2, #56	; 0x38
 8005dcc:	4905      	ldr	r1, [pc, #20]	; (8005de4 <actSnipCommand+0x6c>)
 8005dce:	0020      	movs	r0, r4
 8005dd0:	f00c ff97 	bl	8012d02 <memcpy>
 8005dd4:	e7ea      	b.n	8005dac <actSnipCommand+0x34>
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	20001180 	.word	0x20001180
 8005ddc:	08018830 	.word	0x08018830
 8005de0:	20006ec4 	.word	0x20006ec4
 8005de4:	0801888c 	.word	0x0801888c

08005de8 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dea:	464e      	mov	r6, r9
 8005dec:	4645      	mov	r5, r8
 8005dee:	46de      	mov	lr, fp
 8005df0:	4657      	mov	r7, sl
 8005df2:	b5e0      	push	{r5, r6, r7, lr}
	char status[2][7] ={"Paused", "Active"};
 8005df4:	4b70      	ldr	r3, [pc, #448]	; (8005fb8 <snipCommand+0x1d0>)
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005df6:	b08d      	sub	sp, #52	; 0x34
	char status[2][7] ={"Paused", "Active"};
 8005df8:	4699      	mov	r9, r3
 8005dfa:	aa08      	add	r2, sp, #32
 8005dfc:	3304      	adds	r3, #4
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dfe:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005e00:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005e02:	c223      	stmia	r2!, {r0, r1, r5}
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 8005e08:	2c00      	cmp	r4, #0
 8005e0a:	d100      	bne.n	8005e0e <snipCommand+0x26>
 8005e0c:	e0a2      	b.n	8005f54 <snipCommand+0x16c>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005e0e:	4b6b      	ldr	r3, [pc, #428]	; (8005fbc <snipCommand+0x1d4>)
 8005e10:	2237      	movs	r2, #55	; 0x37
 8005e12:	7818      	ldrb	r0, [r3, #0]
 8005e14:	2301      	movs	r3, #1
 8005e16:	425b      	negs	r3, r3
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	4969      	ldr	r1, [pc, #420]	; (8005fc0 <snipCommand+0x1d8>)
 8005e1c:	3333      	adds	r3, #51	; 0x33
 8005e1e:	f007 faa7 	bl	800d370 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005e22:	4b68      	ldr	r3, [pc, #416]	; (8005fc4 <snipCommand+0x1dc>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d041      	beq.n	8005eae <snipCommand+0xc6>
 8005e2a:	2500      	movs	r5, #0
 8005e2c:	4e66      	ldr	r6, [pc, #408]	; (8005fc8 <snipCommand+0x1e0>)
 8005e2e:	4f67      	ldr	r7, [pc, #412]	; (8005fcc <snipCommand+0x1e4>)
 8005e30:	1c6b      	adds	r3, r5, #1
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	469a      	mov	sl, r3
		if(snippets[s].cond.conditionType)
 8005e36:	00ab      	lsls	r3, r5, #2
 8005e38:	9305      	str	r3, [sp, #20]
 8005e3a:	195b      	adds	r3, r3, r5
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4698      	mov	r8, r3
 8005e40:	5cf3      	ldrb	r3, [r6, r3]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d140      	bne.n	8005ec8 <snipCommand+0xe0>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e46:	9b05      	ldr	r3, [sp, #20]
 8005e48:	469c      	mov	ip, r3
 8005e4a:	4465      	add	r5, ip
 8005e4c:	00ad      	lsls	r5, r5, #2
 8005e4e:	1975      	adds	r5, r6, r5
 8005e50:	e00d      	b.n	8005e6e <snipCommand+0x86>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005e52:	0022      	movs	r2, r4
 8005e54:	495e      	ldr	r1, [pc, #376]	; (8005fd0 <snipCommand+0x1e8>)
 8005e56:	003b      	movs	r3, r7
 8005e58:	0020      	movs	r0, r4
 8005e5a:	f00d f955 	bl	8013108 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005e5e:	0038      	movs	r0, r7
 8005e60:	f7fa f95a 	bl	8000118 <strlen>
 8005e64:	2100      	movs	r1, #0
 8005e66:	0002      	movs	r2, r0
 8005e68:	0038      	movs	r0, r7
 8005e6a:	f00c ff53 	bl	8012d14 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e6e:	0039      	movs	r1, r7
 8005e70:	68e8      	ldr	r0, [r5, #12]
 8005e72:	f7ff fb2d 	bl	80054d0 <ParseSnippetCommand>
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d1eb      	bne.n	8005e52 <snipCommand+0x6a>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005e7a:	0020      	movs	r0, r4
 8005e7c:	f7fa f94c 	bl	8000118 <strlen>
 8005e80:	0005      	movs	r5, r0
 8005e82:	220c      	movs	r2, #12
 8005e84:	4953      	ldr	r1, [pc, #332]	; (8005fd4 <snipCommand+0x1ec>)
 8005e86:	1820      	adds	r0, r4, r0
 8005e88:	f00c ff3b 	bl	8012d02 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005e8c:	4b4b      	ldr	r3, [pc, #300]	; (8005fbc <snipCommand+0x1d4>)
 8005e8e:	002a      	movs	r2, r5
 8005e90:	7818      	ldrb	r0, [r3, #0]
 8005e92:	2301      	movs	r3, #1
 8005e94:	320b      	adds	r2, #11
 8005e96:	425b      	negs	r3, r3
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	b292      	uxth	r2, r2
 8005e9c:	3333      	adds	r3, #51	; 0x33
 8005e9e:	0021      	movs	r1, r4
 8005ea0:	f007 fa66 	bl	800d370 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005ea4:	4b47      	ldr	r3, [pc, #284]	; (8005fc4 <snipCommand+0x1dc>)
 8005ea6:	4655      	mov	r5, sl
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	4553      	cmp	r3, sl
 8005eac:	d8c0      	bhi.n	8005e30 <snipCommand+0x48>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005eae:	22b5      	movs	r2, #181	; 0xb5
 8005eb0:	4949      	ldr	r1, [pc, #292]	; (8005fd8 <snipCommand+0x1f0>)
 8005eb2:	0020      	movs	r0, r4
 8005eb4:	f00c ff25 	bl	8012d02 <memcpy>
}
 8005eb8:	2000      	movs	r0, #0
 8005eba:	b00d      	add	sp, #52	; 0x34
 8005ebc:	bc3c      	pop	{r2, r3, r4, r5}
 8005ebe:	4690      	mov	r8, r2
 8005ec0:	4699      	mov	r9, r3
 8005ec2:	46a2      	mov	sl, r4
 8005ec4:	46ab      	mov	fp, r5
 8005ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005ec8:	46b3      	mov	fp, r6
 8005eca:	44c3      	add	fp, r8
 8005ecc:	465b      	mov	r3, fp
 8005ece:	7c1a      	ldrb	r2, [r3, #16]
 8005ed0:	4942      	ldr	r1, [pc, #264]	; (8005fdc <snipCommand+0x1f4>)
 8005ed2:	00d3      	lsls	r3, r2, #3
 8005ed4:	1a9b      	subs	r3, r3, r2
 8005ed6:	aa08      	add	r2, sp, #32
 8005ed8:	4694      	mov	ip, r2
 8005eda:	0020      	movs	r0, r4
 8005edc:	4463      	add	r3, ip
 8005ede:	4652      	mov	r2, sl
 8005ee0:	f00d f912 	bl	8013108 <sprintf>
		switch(snippets[s].cond.conditionType){
 8005ee4:	4643      	mov	r3, r8
 8005ee6:	5cf3      	ldrb	r3, [r6, r3]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d027      	beq.n	8005f3c <snipCommand+0x154>
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d1aa      	bne.n	8005e46 <snipCommand+0x5e>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	3106      	adds	r1, #6
 8005ef4:	1871      	adds	r1, r6, r1
 8005ef6:	2204      	movs	r2, #4
 8005ef8:	a807      	add	r0, sp, #28
 8005efa:	f00c ff02 	bl	8012d02 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005efe:	465b      	mov	r3, fp
 8005f00:	78da      	ldrb	r2, [r3, #3]
 8005f02:	9807      	ldr	r0, [sp, #28]
 8005f04:	3a01      	subs	r2, #1
 8005f06:	0053      	lsls	r3, r2, #1
 8005f08:	189b      	adds	r3, r3, r2
 8005f0a:	4a35      	ldr	r2, [pc, #212]	; (8005fe0 <snipCommand+0x1f8>)
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	18d3      	adds	r3, r2, r3
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	4698      	mov	r8, r3
 8005f14:	f7fc fe06 	bl	8002b24 <__aeabi_f2d>
 8005f18:	465b      	mov	r3, fp
 8005f1a:	464a      	mov	r2, r9
 8005f1c:	9002      	str	r0, [sp, #8]
 8005f1e:	9103      	str	r1, [sp, #12]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	3214      	adds	r2, #20
 8005f24:	3b01      	subs	r3, #1
 8005f26:	0059      	lsls	r1, r3, #1
 8005f28:	18cb      	adds	r3, r1, r3
 8005f2a:	18d3      	adds	r3, r2, r3
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	0022      	movs	r2, r4
 8005f30:	4643      	mov	r3, r8
 8005f32:	492c      	ldr	r1, [pc, #176]	; (8005fe4 <snipCommand+0x1fc>)
 8005f34:	0020      	movs	r0, r4
 8005f36:	f00d f8e7 	bl	8013108 <sprintf>
				break;
 8005f3a:	e784      	b.n	8005e46 <snipCommand+0x5e>
 8005f3c:	465b      	mov	r3, fp
 8005f3e:	68da      	ldr	r2, [r3, #12]
				switch(snippets[s].cond.buffer1[1]){
 8005f40:	78db      	ldrb	r3, [r3, #3]
 8005f42:	3b05      	subs	r3, #5
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b09      	cmp	r3, #9
 8005f48:	d900      	bls.n	8005f4c <snipCommand+0x164>
 8005f4a:	e77c      	b.n	8005e46 <snipCommand+0x5e>
 8005f4c:	4926      	ldr	r1, [pc, #152]	; (8005fe8 <snipCommand+0x200>)
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	58cb      	ldr	r3, [r1, r3]
 8005f52:	469f      	mov	pc, r3
	configASSERT(pcWriteBuffer);
 8005f54:	b672      	cpsid	i
 8005f56:	e7fe      	b.n	8005f56 <snipCommand+0x16e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005f58:	2314      	movs	r3, #20
 8005f5a:	436b      	muls	r3, r5
 8005f5c:	18f3      	adds	r3, r6, r3
 8005f5e:	789b      	ldrb	r3, [r3, #2]
 8005f60:	4922      	ldr	r1, [pc, #136]	; (8005fec <snipCommand+0x204>)
 8005f62:	9200      	str	r2, [sp, #0]
 8005f64:	0020      	movs	r0, r4
 8005f66:	0022      	movs	r2, r4
 8005f68:	f00d f8ce 	bl	8013108 <sprintf>
						break;
 8005f6c:	e76b      	b.n	8005e46 <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005f6e:	2114      	movs	r1, #20
 8005f70:	4369      	muls	r1, r5
 8005f72:	1871      	adds	r1, r6, r1
 8005f74:	788b      	ldrb	r3, [r1, #2]
 8005f76:	9201      	str	r2, [sp, #4]
 8005f78:	790a      	ldrb	r2, [r1, #4]
 8005f7a:	0020      	movs	r0, r4
 8005f7c:	9200      	str	r2, [sp, #0]
 8005f7e:	491c      	ldr	r1, [pc, #112]	; (8005ff0 <snipCommand+0x208>)
 8005f80:	0022      	movs	r2, r4
 8005f82:	f00d f8c1 	bl	8013108 <sprintf>
						break;
 8005f86:	e75e      	b.n	8005e46 <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005f88:	2114      	movs	r1, #20
 8005f8a:	4369      	muls	r1, r5
 8005f8c:	1871      	adds	r1, r6, r1
 8005f8e:	788b      	ldrb	r3, [r1, #2]
 8005f90:	9201      	str	r2, [sp, #4]
 8005f92:	790a      	ldrb	r2, [r1, #4]
 8005f94:	0020      	movs	r0, r4
 8005f96:	9200      	str	r2, [sp, #0]
 8005f98:	4916      	ldr	r1, [pc, #88]	; (8005ff4 <snipCommand+0x20c>)
 8005f9a:	0022      	movs	r2, r4
 8005f9c:	f00d f8b4 	bl	8013108 <sprintf>
						break;
 8005fa0:	e751      	b.n	8005e46 <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005fa2:	2314      	movs	r3, #20
 8005fa4:	436b      	muls	r3, r5
 8005fa6:	18f3      	adds	r3, r6, r3
 8005fa8:	789b      	ldrb	r3, [r3, #2]
 8005faa:	4913      	ldr	r1, [pc, #76]	; (8005ff8 <snipCommand+0x210>)
 8005fac:	9200      	str	r2, [sp, #0]
 8005fae:	0020      	movs	r0, r4
 8005fb0:	0022      	movs	r2, r4
 8005fb2:	f00d f8a9 	bl	8013108 <sprintf>
						break;
 8005fb6:	e746      	b.n	8005e46 <snipCommand+0x5e>
 8005fb8:	0801786c 	.word	0x0801786c
 8005fbc:	20000c28 	.word	0x20000c28
 8005fc0:	080188c4 	.word	0x080188c4
 8005fc4:	20001180 	.word	0x20001180
 8005fc8:	20006ec4 	.word	0x20006ec4
 8005fcc:	20001280 	.word	0x20001280
 8005fd0:	08018978 	.word	0x08018978
 8005fd4:	08018980 	.word	0x08018980
 8005fd8:	0801898c 	.word	0x0801898c
 8005fdc:	080188fc 	.word	0x080188fc
 8005fe0:	20000094 	.word	0x20000094
 8005fe4:	08018968 	.word	0x08018968
 8005fe8:	08017610 	.word	0x08017610
 8005fec:	08018908 	.word	0x08018908
 8005ff0:	0801894c 	.word	0x0801894c
 8005ff4:	08018934 	.word	0x08018934
 8005ff8:	0801891c 	.word	0x0801891c

08005ffc <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ffc:	b510      	push	{r4, lr}
 8005ffe:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006000:	d00c      	beq.n	800601c <idcodeCommand+0x20>
	dev =HAL_GetDEVID();
 8006002:	f009 fa99 	bl	800f538 <HAL_GetDEVID>
	switch(dev){
 8006006:	4a1d      	ldr	r2, [pc, #116]	; (800607c <idcodeCommand+0x80>)
 8006008:	0403      	lsls	r3, r0, #16
 800600a:	4694      	mov	ip, r2
 800600c:	0c1b      	lsrs	r3, r3, #16
 800600e:	4463      	add	r3, ip
 8006010:	2b08      	cmp	r3, #8
 8006012:	d805      	bhi.n	8006020 <idcodeCommand+0x24>
 8006014:	4a1a      	ldr	r2, [pc, #104]	; (8006080 <idcodeCommand+0x84>)
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	58d3      	ldr	r3, [r2, r3]
 800601a:	469f      	mov	pc, r3
	configASSERT(pcWriteBuffer);
 800601c:	b672      	cpsid	i
 800601e:	e7fe      	b.n	800601e <idcodeCommand+0x22>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8006020:	4a18      	ldr	r2, [pc, #96]	; (8006084 <idcodeCommand+0x88>)
 8006022:	4919      	ldr	r1, [pc, #100]	; (8006088 <idcodeCommand+0x8c>)
 8006024:	0020      	movs	r0, r4
 8006026:	f00d f86f 	bl	8013108 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 800602a:	f009 fa7f 	bl	800f52c <HAL_GetREVID>
 800602e:	0022      	movs	r2, r4
 8006030:	0b03      	lsrs	r3, r0, #12
 8006032:	4916      	ldr	r1, [pc, #88]	; (800608c <idcodeCommand+0x90>)
 8006034:	0020      	movs	r0, r4
 8006036:	f00d f867 	bl	8013108 <sprintf>
}
 800603a:	2000      	movs	r0, #0
 800603c:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 800603e:	4a14      	ldr	r2, [pc, #80]	; (8006090 <idcodeCommand+0x94>)
 8006040:	4911      	ldr	r1, [pc, #68]	; (8006088 <idcodeCommand+0x8c>)
 8006042:	0020      	movs	r0, r4
 8006044:	f00d f860 	bl	8013108 <sprintf>
			break;
 8006048:	e7ef      	b.n	800602a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 800604a:	4a12      	ldr	r2, [pc, #72]	; (8006094 <idcodeCommand+0x98>)
 800604c:	490e      	ldr	r1, [pc, #56]	; (8006088 <idcodeCommand+0x8c>)
 800604e:	0020      	movs	r0, r4
 8006050:	f00d f85a 	bl	8013108 <sprintf>
			break;
 8006054:	e7e9      	b.n	800602a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8006056:	4a10      	ldr	r2, [pc, #64]	; (8006098 <idcodeCommand+0x9c>)
 8006058:	490b      	ldr	r1, [pc, #44]	; (8006088 <idcodeCommand+0x8c>)
 800605a:	0020      	movs	r0, r4
 800605c:	f00d f854 	bl	8013108 <sprintf>
			break;
 8006060:	e7e3      	b.n	800602a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8006062:	4a0e      	ldr	r2, [pc, #56]	; (800609c <idcodeCommand+0xa0>)
 8006064:	4908      	ldr	r1, [pc, #32]	; (8006088 <idcodeCommand+0x8c>)
 8006066:	0020      	movs	r0, r4
 8006068:	f00d f84e 	bl	8013108 <sprintf>
			break;
 800606c:	e7dd      	b.n	800602a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 800606e:	4a0c      	ldr	r2, [pc, #48]	; (80060a0 <idcodeCommand+0xa4>)
 8006070:	4905      	ldr	r1, [pc, #20]	; (8006088 <idcodeCommand+0x8c>)
 8006072:	0020      	movs	r0, r4
 8006074:	f00d f848 	bl	8013108 <sprintf>
			break;
 8006078:	e7d7      	b.n	800602a <idcodeCommand+0x2e>
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	fffffbc0 	.word	0xfffffbc0
 8006080:	08017638 	.word	0x08017638
 8006084:	08018a94 	.word	0x08018a94
 8006088:	08018a50 	.word	0x08018a50
 800608c:	08018a9c 	.word	0x08018a9c
 8006090:	08018a7c 	.word	0x08018a7c
 8006094:	08018a64 	.word	0x08018a64
 8006098:	08018a44 	.word	0x08018a44
 800609c:	08018a88 	.word	0x08018a88
 80060a0:	08018a70 	.word	0x08018a70

080060a4 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060a4:	b510      	push	{r4, lr}
 80060a6:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80060a8:	d101      	bne.n	80060ae <dateCommand+0xa>
 80060aa:	b672      	cpsid	i
 80060ac:	e7fe      	b.n	80060ac <dateCommand+0x8>
	GetTimeDate();
 80060ae:	f006 ff07 	bl	800cec0 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 80060b2:	f7fe fc41 	bl	8004938 <GetDateString>
 80060b6:	4903      	ldr	r1, [pc, #12]	; (80060c4 <dateCommand+0x20>)
 80060b8:	0002      	movs	r2, r0
 80060ba:	0020      	movs	r0, r4
 80060bc:	f00d f824 	bl	8013108 <sprintf>
}
 80060c0:	2000      	movs	r0, #0
 80060c2:	bd10      	pop	{r4, pc}
 80060c4:	08018ab4 	.word	0x08018ab4

080060c8 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ca:	46ce      	mov	lr, r9
 80060cc:	4647      	mov	r7, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80060ce:	2300      	movs	r3, #0
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b083      	sub	sp, #12
 80060d4:	0004      	movs	r4, r0
 80060d6:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80060dc:	2800      	cmp	r0, #0
 80060de:	d023      	beq.n	8006128 <getCommand+0x60>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060e0:	466a      	mov	r2, sp
 80060e2:	2101      	movs	r1, #1
 80060e4:	0028      	movs	r0, r5
 80060e6:	f007 fb9f 	bl	800d828 <FreeRTOS_CLIGetParameter>
 80060ea:	4b6c      	ldr	r3, [pc, #432]	; (800629c <getCommand+0x1d4>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060ec:	2204      	movs	r2, #4
 80060ee:	496c      	ldr	r1, [pc, #432]	; (80062a0 <getCommand+0x1d8>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060f0:	0007      	movs	r7, r0
 80060f2:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060f4:	f00d f84c 	bl	8013190 <strncmp>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d117      	bne.n	800612c <getCommand+0x64>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80060fc:	9b00      	ldr	r3, [sp, #0]
 80060fe:	1d3e      	adds	r6, r7, #4
 8006100:	1f1d      	subs	r5, r3, #4
 8006102:	002a      	movs	r2, r5
 8006104:	4967      	ldr	r1, [pc, #412]	; (80062a4 <getCommand+0x1dc>)
 8006106:	0030      	movs	r0, r6
 8006108:	f00d f842 	bl	8013190 <strncmp>
 800610c:	2800      	cmp	r0, #0
 800610e:	d125      	bne.n	800615c <getCommand+0x94>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8006110:	4b65      	ldr	r3, [pc, #404]	; (80062a8 <getCommand+0x1e0>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b60      	cmp	r3, #96	; 0x60
 8006116:	d01b      	beq.n	8006150 <getCommand+0x88>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8006118:	2b20      	cmp	r3, #32
 800611a:	d12c      	bne.n	8006176 <getCommand+0xae>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 800611c:	4a63      	ldr	r2, [pc, #396]	; (80062ac <getCommand+0x1e4>)
 800611e:	4964      	ldr	r1, [pc, #400]	; (80062b0 <getCommand+0x1e8>)
 8006120:	0020      	movs	r0, r4
 8006122:	f00c fff1 	bl	8013108 <sprintf>
 8006126:	e00d      	b.n	8006144 <getCommand+0x7c>
	configASSERT(pcWriteBuffer);
 8006128:	b672      	cpsid	i
 800612a:	e7fe      	b.n	800612a <getCommand+0x62>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 800612c:	2205      	movs	r2, #5
 800612e:	4961      	ldr	r1, [pc, #388]	; (80062b4 <getCommand+0x1ec>)
 8006130:	0038      	movs	r0, r7
 8006132:	f00d f82d 	bl	8013190 <strncmp>
 8006136:	2800      	cmp	r0, #0
 8006138:	d025      	beq.n	8006186 <getCommand+0xbe>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800613a:	2213      	movs	r2, #19
 800613c:	495e      	ldr	r1, [pc, #376]	; (80062b8 <getCommand+0x1f0>)
 800613e:	0020      	movs	r0, r4
 8006140:	f00c fddf 	bl	8012d02 <memcpy>
}
 8006144:	2000      	movs	r0, #0
 8006146:	b003      	add	sp, #12
 8006148:	bc0c      	pop	{r2, r3}
 800614a:	4690      	mov	r8, r2
 800614c:	4699      	mov	r9, r3
 800614e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8006150:	4a5a      	ldr	r2, [pc, #360]	; (80062bc <getCommand+0x1f4>)
 8006152:	4957      	ldr	r1, [pc, #348]	; (80062b0 <getCommand+0x1e8>)
 8006154:	0020      	movs	r0, r4
 8006156:	f00c ffd7 	bl	8013108 <sprintf>
 800615a:	e7f3      	b.n	8006144 <getCommand+0x7c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800615c:	002a      	movs	r2, r5
 800615e:	4958      	ldr	r1, [pc, #352]	; (80062c0 <getCommand+0x1f8>)
 8006160:	0030      	movs	r0, r6
 8006162:	f00d f815 	bl	8013190 <strncmp>
 8006166:	2800      	cmp	r0, #0
 8006168:	d14a      	bne.n	8006200 <getCommand+0x138>
			if(BOSMessaging.trace == TRACE_BOTH)
 800616a:	4b4f      	ldr	r3, [pc, #316]	; (80062a8 <getCommand+0x1e0>)
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b03      	cmp	r3, #3
 8006170:	d0ee      	beq.n	8006150 <getCommand+0x88>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8006172:	2b01      	cmp	r3, #1
 8006174:	d0d2      	beq.n	800611c <getCommand+0x54>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8006176:	2b00      	cmp	r3, #0
 8006178:	d03c      	beq.n	80061f4 <getCommand+0x12c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 800617a:	003a      	movs	r2, r7
 800617c:	4951      	ldr	r1, [pc, #324]	; (80062c4 <getCommand+0x1fc>)
 800617e:	0020      	movs	r0, r4
 8006180:	f00c ffc2 	bl	8013108 <sprintf>
 8006184:	e7de      	b.n	8006144 <getCommand+0x7c>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006186:	0028      	movs	r0, r5
 8006188:	aa01      	add	r2, sp, #4
 800618a:	2102      	movs	r1, #2
 800618c:	f007 fb4c 	bl	800d828 <FreeRTOS_CLIGetParameter>
 8006190:	2600      	movs	r6, #0
 8006192:	0005      	movs	r5, r0
 8006194:	4f4c      	ldr	r7, [pc, #304]	; (80062c8 <getCommand+0x200>)
 8006196:	e003      	b.n	80061a0 <getCommand+0xd8>
 8006198:	3601      	adds	r6, #1
 800619a:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 800619c:	2e0a      	cmp	r6, #10
 800619e:	d05a      	beq.n	8006256 <getCommand+0x18e>
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 80061a0:	0039      	movs	r1, r7
 80061a2:	0028      	movs	r0, r5
 80061a4:	f7f9 ffae 	bl	8000104 <strcmp>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d1f5      	bne.n	8006198 <getCommand+0xd0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 80061ac:	002a      	movs	r2, r5
 80061ae:	4947      	ldr	r1, [pc, #284]	; (80062cc <getCommand+0x204>)
 80061b0:	0020      	movs	r0, r4
 80061b2:	f00c ffa9 	bl	8013108 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 80061b6:	4f46      	ldr	r7, [pc, #280]	; (80062d0 <getCommand+0x208>)
 80061b8:	783b      	ldrb	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0c2      	beq.n	8006144 <getCommand+0x7c>
 80061be:	2501      	movs	r5, #1
 80061c0:	002b      	movs	r3, r5
 80061c2:	40b3      	lsls	r3, r6
 80061c4:	4698      	mov	r8, r3
 80061c6:	4b43      	ldr	r3, [pc, #268]	; (80062d4 <getCommand+0x20c>)
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80061c8:	4e43      	ldr	r6, [pc, #268]	; (80062d8 <getCommand+0x210>)
 80061ca:	4699      	mov	r9, r3
 80061cc:	e004      	b.n	80061d8 <getCommand+0x110>
			for(j =1; j <= N; j++)						// N modules
 80061ce:	3501      	adds	r5, #1
 80061d0:	783b      	ldrb	r3, [r7, #0]
 80061d2:	b2ed      	uxtb	r5, r5
 80061d4:	42ab      	cmp	r3, r5
 80061d6:	d3b5      	bcc.n	8006144 <getCommand+0x7c>
				if(InGroup(j,i)){
 80061d8:	464a      	mov	r2, r9
 80061da:	1e6b      	subs	r3, r5, #1
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	5ad3      	ldrh	r3, [r2, r3]
 80061e0:	4642      	mov	r2, r8
 80061e2:	421a      	tst	r2, r3
 80061e4:	d0f3      	beq.n	80061ce <getCommand+0x106>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80061e6:	002b      	movs	r3, r5
 80061e8:	0022      	movs	r2, r4
 80061ea:	0031      	movs	r1, r6
 80061ec:	0020      	movs	r0, r4
 80061ee:	f00c ff8b 	bl	8013108 <sprintf>
 80061f2:	e7ec      	b.n	80061ce <getCommand+0x106>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 80061f4:	4a39      	ldr	r2, [pc, #228]	; (80062dc <getCommand+0x214>)
 80061f6:	492e      	ldr	r1, [pc, #184]	; (80062b0 <getCommand+0x1e8>)
 80061f8:	0020      	movs	r0, r4
 80061fa:	f00c ff85 	bl	8013108 <sprintf>
 80061fe:	e7a1      	b.n	8006144 <getCommand+0x7c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006200:	002a      	movs	r2, r5
 8006202:	4937      	ldr	r1, [pc, #220]	; (80062e0 <getCommand+0x218>)
 8006204:	0030      	movs	r0, r6
 8006206:	f00c ffc3 	bl	8013190 <strncmp>
 800620a:	2800      	cmp	r0, #0
 800620c:	d037      	beq.n	800627e <getCommand+0x1b6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800620e:	002a      	movs	r2, r5
 8006210:	4934      	ldr	r1, [pc, #208]	; (80062e4 <getCommand+0x21c>)
 8006212:	0030      	movs	r0, r6
 8006214:	f00c ffbc 	bl	8013190 <strncmp>
 8006218:	2800      	cmp	r0, #0
 800621a:	d029      	beq.n	8006270 <getCommand+0x1a8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 800621c:	002a      	movs	r2, r5
 800621e:	4932      	ldr	r1, [pc, #200]	; (80062e8 <getCommand+0x220>)
 8006220:	0030      	movs	r0, r6
 8006222:	f00c ffb5 	bl	8013190 <strncmp>
 8006226:	2800      	cmp	r0, #0
 8006228:	d030      	beq.n	800628c <getCommand+0x1c4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 800622a:	002a      	movs	r2, r5
 800622c:	492f      	ldr	r1, [pc, #188]	; (80062ec <getCommand+0x224>)
 800622e:	0030      	movs	r0, r6
 8006230:	f00c ffae 	bl	8013190 <strncmp>
 8006234:	2800      	cmp	r0, #0
 8006236:	d014      	beq.n	8006262 <getCommand+0x19a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006238:	002a      	movs	r2, r5
 800623a:	492d      	ldr	r1, [pc, #180]	; (80062f0 <getCommand+0x228>)
 800623c:	0030      	movs	r0, r6
 800623e:	f00c ffa7 	bl	8013190 <strncmp>
 8006242:	2800      	cmp	r0, #0
 8006244:	d000      	beq.n	8006248 <getCommand+0x180>
 8006246:	e778      	b.n	800613a <getCommand+0x72>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8006248:	4b2a      	ldr	r3, [pc, #168]	; (80062f4 <getCommand+0x22c>)
 800624a:	492b      	ldr	r1, [pc, #172]	; (80062f8 <getCommand+0x230>)
 800624c:	795a      	ldrb	r2, [r3, #5]
 800624e:	0020      	movs	r0, r4
 8006250:	f00c ff5a 	bl	8013108 <sprintf>
 8006254:	e776      	b.n	8006144 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8006256:	002a      	movs	r2, r5
 8006258:	4928      	ldr	r1, [pc, #160]	; (80062fc <getCommand+0x234>)
 800625a:	0020      	movs	r0, r4
 800625c:	f00c ff54 	bl	8013108 <sprintf>
			return pdFALSE;
 8006260:	e770      	b.n	8006144 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8006262:	4b24      	ldr	r3, [pc, #144]	; (80062f4 <getCommand+0x22c>)
 8006264:	4924      	ldr	r1, [pc, #144]	; (80062f8 <getCommand+0x230>)
 8006266:	791a      	ldrb	r2, [r3, #4]
 8006268:	0020      	movs	r0, r4
 800626a:	f00c ff4d 	bl	8013108 <sprintf>
 800626e:	e769      	b.n	8006144 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8006270:	4b20      	ldr	r3, [pc, #128]	; (80062f4 <getCommand+0x22c>)
 8006272:	4921      	ldr	r1, [pc, #132]	; (80062f8 <getCommand+0x230>)
 8006274:	881a      	ldrh	r2, [r3, #0]
 8006276:	0020      	movs	r0, r4
 8006278:	f00c ff46 	bl	8013108 <sprintf>
 800627c:	e762      	b.n	8006144 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 800627e:	4b1d      	ldr	r3, [pc, #116]	; (80062f4 <getCommand+0x22c>)
 8006280:	491d      	ldr	r1, [pc, #116]	; (80062f8 <getCommand+0x230>)
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	0020      	movs	r0, r4
 8006286:	f00c ff3f 	bl	8013108 <sprintf>
 800628a:	e75b      	b.n	8006144 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 800628c:	4b19      	ldr	r3, [pc, #100]	; (80062f4 <getCommand+0x22c>)
 800628e:	491a      	ldr	r1, [pc, #104]	; (80062f8 <getCommand+0x230>)
 8006290:	885a      	ldrh	r2, [r3, #2]
 8006292:	0020      	movs	r0, r4
 8006294:	f00c ff38 	bl	8013108 <sprintf>
 8006298:	e754      	b.n	8006144 <getCommand+0x7c>
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	20001280 	.word	0x20001280
 80062a0:	08018acc 	.word	0x08018acc
 80062a4:	08018ad4 	.word	0x08018ad4
 80062a8:	20006e28 	.word	0x20006e28
 80062ac:	08018ae0 	.word	0x08018ae0
 80062b0:	08017d90 	.word	0x08017d90
 80062b4:	08018b44 	.word	0x08018b44
 80062b8:	08018b54 	.word	0x08018b54
 80062bc:	08017eb4 	.word	0x08017eb4
 80062c0:	08018aec 	.word	0x08018aec
 80062c4:	08018b68 	.word	0x08018b68
 80062c8:	20000ad0 	.word	0x20000ad0
 80062cc:	08018ba4 	.word	0x08018ba4
 80062d0:	20000008 	.word	0x20000008
 80062d4:	20000a9c 	.word	0x20000a9c
 80062d8:	08018b4c 	.word	0x08018b4c
 80062dc:	08018ae4 	.word	0x08018ae4
 80062e0:	08018af4 	.word	0x08018af4
 80062e4:	08018b00 	.word	0x08018b00
 80062e8:	08018b0c 	.word	0x08018b0c
 80062ec:	08018b1c 	.word	0x08018b1c
 80062f0:	08018b30 	.word	0x08018b30
 80062f4:	20006ea8 	.word	0x20006ea8
 80062f8:	08018298 	.word	0x08018298
 80062fc:	08018b88 	.word	0x08018b88

08006300 <defaultCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006300:	2300      	movs	r3, #0
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006302:	b570      	push	{r4, r5, r6, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8006308:	9301      	str	r3, [sp, #4]
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800630a:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 800630c:	2c00      	cmp	r4, #0
 800630e:	d02c      	beq.n	800636a <defaultCommand+0x6a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006310:	aa01      	add	r2, sp, #4
 8006312:	2101      	movs	r1, #1
 8006314:	f007 fa88 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006318:	9e01      	ldr	r6, [sp, #4]
 800631a:	4920      	ldr	r1, [pc, #128]	; (800639c <defaultCommand+0x9c>)
 800631c:	0032      	movs	r2, r6
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800631e:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006320:	f00c ff36 	bl	8013190 <strncmp>
 8006324:	2800      	cmp	r0, #0
 8006326:	d022      	beq.n	800636e <defaultCommand+0x6e>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006328:	0032      	movs	r2, r6
 800632a:	491d      	ldr	r1, [pc, #116]	; (80063a0 <defaultCommand+0xa0>)
 800632c:	0028      	movs	r0, r5
 800632e:	f00c ff2f 	bl	8013190 <strncmp>
 8006332:	2800      	cmp	r0, #0
 8006334:	d12c      	bne.n	8006390 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006336:	2116      	movs	r1, #22
 8006338:	2200      	movs	r2, #0
 800633a:	20ff      	movs	r0, #255	; 0xff
 800633c:	f003 fb8e 	bl	8009a5c <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8006340:	2202      	movs	r2, #2
 8006342:	4b18      	ldr	r3, [pc, #96]	; (80063a4 <defaultCommand+0xa4>)
		osDelay(100);
 8006344:	2064      	movs	r0, #100	; 0x64
		indMode =IND_TOPOLOGY;
 8006346:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006348:	f007 f95e 	bl	800d608 <osDelay>
		ClearEEportsDir();
 800634c:	f7fd f954 	bl	80035f8 <ClearEEportsDir>
		ClearROtopology();
 8006350:	f005 f9ae 	bl	800b6b0 <ClearROtopology>
		osDelay(100);
 8006354:	2064      	movs	r0, #100	; 0x64
 8006356:	f007 f957 	bl	800d608 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 800635a:	2240      	movs	r2, #64	; 0x40
 800635c:	4912      	ldr	r1, [pc, #72]	; (80063a8 <defaultCommand+0xa8>)
 800635e:	0020      	movs	r0, r4
 8006360:	f00c fccf 	bl	8012d02 <memcpy>
}
 8006364:	2000      	movs	r0, #0
 8006366:	b002      	add	sp, #8
 8006368:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 800636a:	b672      	cpsid	i
 800636c:	e7fe      	b.n	800636c <defaultCommand+0x6c>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 800636e:	490f      	ldr	r1, [pc, #60]	; (80063ac <defaultCommand+0xac>)
 8006370:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <defaultCommand+0xb0>)
 8006372:	000a      	movs	r2, r1
 8006374:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006376:	c223      	stmia	r2!, {r0, r1, r5}
 8006378:	cb23      	ldmia	r3!, {r0, r1, r5}
 800637a:	c223      	stmia	r2!, {r0, r1, r5}
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006380:	f7fd f8f6 	bl	8003570 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006384:	2227      	movs	r2, #39	; 0x27
 8006386:	490b      	ldr	r1, [pc, #44]	; (80063b4 <defaultCommand+0xb4>)
 8006388:	0020      	movs	r0, r4
 800638a:	f00c fcba 	bl	8012d02 <memcpy>
 800638e:	e7e9      	b.n	8006364 <defaultCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006390:	220f      	movs	r2, #15
 8006392:	4909      	ldr	r1, [pc, #36]	; (80063b8 <defaultCommand+0xb8>)
 8006394:	0020      	movs	r0, r4
 8006396:	f00c fcb4 	bl	8012d02 <memcpy>
 800639a:	e7e3      	b.n	8006364 <defaultCommand+0x64>
 800639c:	08018bb8 	.word	0x08018bb8
 80063a0:	08018be8 	.word	0x08018be8
 80063a4:	2000117e 	.word	0x2000117e
 80063a8:	08018c00 	.word	0x08018c00
 80063ac:	20006ea8 	.word	0x20006ea8
 80063b0:	20000014 	.word	0x20000014
 80063b4:	08018bc0 	.word	0x08018bc0
 80063b8:	08018bf0 	.word	0x08018bf0

080063bc <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80063bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063be:	4657      	mov	r7, sl
 80063c0:	46de      	mov	lr, fp
 80063c2:	464e      	mov	r6, r9
 80063c4:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80063c6:	2300      	movs	r3, #0
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80063c8:	b5e0      	push	{r5, r6, r7, lr}
 80063ca:	b08f      	sub	sp, #60	; 0x3c
 80063cc:	0007      	movs	r7, r0
 80063ce:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80063d0:	9309      	str	r3, [sp, #36]	; 0x24
 80063d2:	930a      	str	r3, [sp, #40]	; 0x28
 80063d4:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80063d6:	930c      	str	r3, [sp, #48]	; 0x30
 80063d8:	930d      	str	r3, [sp, #52]	; 0x34
	configASSERT(pcWriteBuffer);
 80063da:	2800      	cmp	r0, #0
 80063dc:	d029      	beq.n	8006432 <setCommand+0x76>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80063de:	aa09      	add	r2, sp, #36	; 0x24
 80063e0:	2101      	movs	r1, #1
 80063e2:	0020      	movs	r0, r4
 80063e4:	f007 fa20 	bl	800d828 <FreeRTOS_CLIGetParameter>
 80063e8:	4dbf      	ldr	r5, [pc, #764]	; (80066e8 <setCommand+0x32c>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80063ea:	2204      	movs	r2, #4
 80063ec:	49bf      	ldr	r1, [pc, #764]	; (80066ec <setCommand+0x330>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80063ee:	4681      	mov	r9, r0
 80063f0:	63a8      	str	r0, [r5, #56]	; 0x38
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80063f2:	f00c fecd 	bl	8013190 <strncmp>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d01d      	beq.n	8006436 <setCommand+0x7a>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 80063fa:	2204      	movs	r2, #4
 80063fc:	49bc      	ldr	r1, [pc, #752]	; (80066f0 <setCommand+0x334>)
 80063fe:	4648      	mov	r0, r9
 8006400:	f00c fec6 	bl	8013190 <strncmp>
 8006404:	2800      	cmp	r0, #0
 8006406:	d100      	bne.n	800640a <setCommand+0x4e>
 8006408:	e0ed      	b.n	80065e6 <setCommand+0x22a>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 800640a:	2204      	movs	r2, #4
 800640c:	49b9      	ldr	r1, [pc, #740]	; (80066f4 <setCommand+0x338>)
 800640e:	4648      	mov	r0, r9
 8006410:	f00c febe 	bl	8013190 <strncmp>
 8006414:	2800      	cmp	r0, #0
 8006416:	d04b      	beq.n	80064b0 <setCommand+0xf4>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006418:	2213      	movs	r2, #19
 800641a:	49b7      	ldr	r1, [pc, #732]	; (80066f8 <setCommand+0x33c>)
 800641c:	0038      	movs	r0, r7
 800641e:	f00c fc70 	bl	8012d02 <memcpy>
}
 8006422:	2000      	movs	r0, #0
 8006424:	b00f      	add	sp, #60	; 0x3c
 8006426:	bc3c      	pop	{r2, r3, r4, r5}
 8006428:	4690      	mov	r8, r2
 800642a:	4699      	mov	r9, r3
 800642c:	46a2      	mov	sl, r4
 800642e:	46ab      	mov	fp, r5
 8006430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006432:	b672      	cpsid	i
 8006434:	e7fe      	b.n	8006434 <setCommand+0x78>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006436:	aa0a      	add	r2, sp, #40	; 0x28
 8006438:	2102      	movs	r1, #2
 800643a:	0020      	movs	r0, r4
 800643c:	f007 f9f4 	bl	800d828 <FreeRTOS_CLIGetParameter>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006440:	6bab      	ldr	r3, [r5, #56]	; 0x38
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006442:	0004      	movs	r4, r0
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006444:	1d1e      	adds	r6, r3, #4
 8006446:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006448:	63e8      	str	r0, [r5, #60]	; 0x3c
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800644a:	3b04      	subs	r3, #4
 800644c:	4698      	mov	r8, r3
 800644e:	4bab      	ldr	r3, [pc, #684]	; (80066fc <setCommand+0x340>)
 8006450:	4642      	mov	r2, r8
 8006452:	0019      	movs	r1, r3
 8006454:	0030      	movs	r0, r6
 8006456:	4699      	mov	r9, r3
 8006458:	f00c fe9a 	bl	8013190 <strncmp>
 800645c:	2800      	cmp	r0, #0
 800645e:	d000      	beq.n	8006462 <setCommand+0xa6>
 8006460:	e269      	b.n	8006936 <setCommand+0x57a>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006462:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006464:	49a6      	ldr	r1, [pc, #664]	; (8006700 <setCommand+0x344>)
 8006466:	0032      	movs	r2, r6
 8006468:	0020      	movs	r0, r4
 800646a:	f00c fe91 	bl	8013190 <strncmp>
 800646e:	2800      	cmp	r0, #0
 8006470:	d100      	bne.n	8006474 <setCommand+0xb8>
 8006472:	e25d      	b.n	8006930 <setCommand+0x574>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006474:	0032      	movs	r2, r6
 8006476:	49a3      	ldr	r1, [pc, #652]	; (8006704 <setCommand+0x348>)
 8006478:	0020      	movs	r0, r4
 800647a:	f00c fe89 	bl	8013190 <strncmp>
 800647e:	2800      	cmp	r0, #0
 8006480:	d100      	bne.n	8006484 <setCommand+0xc8>
 8006482:	e252      	b.n	800692a <setCommand+0x56e>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006484:	0032      	movs	r2, r6
 8006486:	49a0      	ldr	r1, [pc, #640]	; (8006708 <setCommand+0x34c>)
 8006488:	0020      	movs	r0, r4
 800648a:	f00c fe81 	bl	8013190 <strncmp>
 800648e:	2800      	cmp	r0, #0
 8006490:	d100      	bne.n	8006494 <setCommand+0xd8>
 8006492:	e23f      	b.n	8006914 <setCommand+0x558>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006494:	0032      	movs	r2, r6
 8006496:	499d      	ldr	r1, [pc, #628]	; (800670c <setCommand+0x350>)
 8006498:	0020      	movs	r0, r4
 800649a:	f00c fe79 	bl	8013190 <strncmp>
 800649e:	2800      	cmp	r0, #0
 80064a0:	d100      	bne.n	80064a4 <setCommand+0xe8>
 80064a2:	e0fd      	b.n	80066a0 <setCommand+0x2e4>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80064a4:	220f      	movs	r2, #15
 80064a6:	499a      	ldr	r1, [pc, #616]	; (8006710 <setCommand+0x354>)
 80064a8:	0038      	movs	r0, r7
 80064aa:	f00c fc2a 	bl	8012d02 <memcpy>
 80064ae:	e7b8      	b.n	8006422 <setCommand+0x66>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80064b0:	aa0a      	add	r2, sp, #40	; 0x28
 80064b2:	2102      	movs	r1, #2
 80064b4:	0020      	movs	r0, r4
 80064b6:	f007 f9b7 	bl	800d828 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80064ba:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80064bc:	63e8      	str	r0, [r5, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80064be:	2103      	movs	r1, #3
 80064c0:	0020      	movs	r0, r4
 80064c2:	f007 f9b1 	bl	800d828 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80064c6:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80064c8:	6428      	str	r0, [r5, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80064ca:	2104      	movs	r1, #4
 80064cc:	0020      	movs	r0, r4
 80064ce:	f007 f9ab 	bl	800d828 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80064d2:	aa0d      	add	r2, sp, #52	; 0x34
 80064d4:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80064d6:	6468      	str	r0, [r5, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80064d8:	0020      	movs	r0, r4
 80064da:	f007 f9a5 	bl	800d828 <FreeRTOS_CLIGetParameter>
 80064de:	64a8      	str	r0, [r5, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 80064e0:	6c68      	ldr	r0, [r5, #68]	; 0x44
 80064e2:	f00c f948 	bl	8012776 <atoi>
 80064e6:	b2c3      	uxtb	r3, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 80064e8:	6ca8      	ldr	r0, [r5, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 80064ea:	469b      	mov	fp, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 80064ec:	f00c f943 	bl	8012776 <atoi>
 80064f0:	b283      	uxth	r3, r0
 80064f2:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 80064f4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80064f6:	2206      	movs	r2, #6
 80064f8:	4986      	ldr	r1, [pc, #536]	; (8006714 <setCommand+0x358>)
 80064fa:	0018      	movs	r0, r3
 80064fc:	4698      	mov	r8, r3
 80064fe:	f00c fe47 	bl	8013190 <strncmp>
 8006502:	2800      	cmp	r0, #0
 8006504:	d100      	bne.n	8006508 <setCommand+0x14c>
 8006506:	e201      	b.n	800690c <setCommand+0x550>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006508:	2207      	movs	r2, #7
 800650a:	4983      	ldr	r1, [pc, #524]	; (8006718 <setCommand+0x35c>)
 800650c:	4640      	mov	r0, r8
 800650e:	f00c fe3f 	bl	8013190 <strncmp>
 8006512:	4b82      	ldr	r3, [pc, #520]	; (800671c <setCommand+0x360>)
 8006514:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8006516:	9006      	str	r0, [sp, #24]
 8006518:	0019      	movs	r1, r3
 800651a:	2207      	movs	r2, #7
 800651c:	0020      	movs	r0, r4
 800651e:	469a      	mov	sl, r3
 8006520:	f00c fe36 	bl	8013190 <strncmp>
 8006524:	9b06      	ldr	r3, [sp, #24]
 8006526:	9007      	str	r0, [sp, #28]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d100      	bne.n	800652e <setCommand+0x172>
 800652c:	e1ec      	b.n	8006908 <setCommand+0x54c>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 800652e:	2209      	movs	r2, #9
 8006530:	497b      	ldr	r1, [pc, #492]	; (8006720 <setCommand+0x364>)
 8006532:	4640      	mov	r0, r8
 8006534:	f00c fe2c 	bl	8013190 <strncmp>
 8006538:	2800      	cmp	r0, #0
 800653a:	d100      	bne.n	800653e <setCommand+0x182>
 800653c:	e1e2      	b.n	8006904 <setCommand+0x548>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 800653e:	2208      	movs	r2, #8
 8006540:	4978      	ldr	r1, [pc, #480]	; (8006724 <setCommand+0x368>)
 8006542:	4640      	mov	r0, r8
 8006544:	f00c fe24 	bl	8013190 <strncmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	d100      	bne.n	800654e <setCommand+0x192>
 800654c:	e1d8      	b.n	8006900 <setCommand+0x544>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 800654e:	2206      	movs	r2, #6
 8006550:	4975      	ldr	r1, [pc, #468]	; (8006728 <setCommand+0x36c>)
 8006552:	4640      	mov	r0, r8
 8006554:	f00c fe1c 	bl	8013190 <strncmp>
 8006558:	2800      	cmp	r0, #0
 800655a:	d100      	bne.n	800655e <setCommand+0x1a2>
 800655c:	e1ce      	b.n	80068fc <setCommand+0x540>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 800655e:	2208      	movs	r2, #8
 8006560:	4972      	ldr	r1, [pc, #456]	; (800672c <setCommand+0x370>)
 8006562:	4640      	mov	r0, r8
 8006564:	f00c fe14 	bl	8013190 <strncmp>
 8006568:	2800      	cmp	r0, #0
 800656a:	d100      	bne.n	800656e <setCommand+0x1b2>
 800656c:	e1c4      	b.n	80068f8 <setCommand+0x53c>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 800656e:	2206      	movs	r2, #6
 8006570:	496f      	ldr	r1, [pc, #444]	; (8006730 <setCommand+0x374>)
 8006572:	4640      	mov	r0, r8
 8006574:	f00c fe0c 	bl	8013190 <strncmp>
 8006578:	2800      	cmp	r0, #0
 800657a:	d000      	beq.n	800657e <setCommand+0x1c2>
 800657c:	e0ea      	b.n	8006754 <setCommand+0x398>
			temp81 =SUNDAY;
 800657e:	2607      	movs	r6, #7
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006580:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8006582:	2207      	movs	r2, #7
 8006584:	4651      	mov	r1, sl
 8006586:	0020      	movs	r0, r4
 8006588:	f00c fe02 	bl	8013190 <strncmp>
 800658c:	2800      	cmp	r0, #0
 800658e:	d000      	beq.n	8006592 <setCommand+0x1d6>
 8006590:	e098      	b.n	80066c4 <setCommand+0x308>
			temp82 =JANUARY;
 8006592:	2401      	movs	r4, #1
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006594:	465b      	mov	r3, fp
 8006596:	3b01      	subs	r3, #1
 8006598:	2b1e      	cmp	r3, #30
 800659a:	d883      	bhi.n	80064a4 <setCommand+0xe8>
 800659c:	4b65      	ldr	r3, [pc, #404]	; (8006734 <setCommand+0x378>)
 800659e:	444b      	add	r3, r9
 80065a0:	2b64      	cmp	r3, #100	; 0x64
 80065a2:	d900      	bls.n	80065a6 <setCommand+0x1ea>
 80065a4:	e77e      	b.n	80064a4 <setCommand+0xe8>
				GetTimeDate();
 80065a6:	f006 fc8b 	bl	800cec0 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 80065aa:	220c      	movs	r2, #12
 80065ac:	4b62      	ldr	r3, [pc, #392]	; (8006738 <setCommand+0x37c>)
 80065ae:	4659      	mov	r1, fp
 80065b0:	569a      	ldrsb	r2, [r3, r2]
 80065b2:	0020      	movs	r0, r4
 80065b4:	9204      	str	r2, [sp, #16]
 80065b6:	7cda      	ldrb	r2, [r3, #19]
 80065b8:	9203      	str	r2, [sp, #12]
 80065ba:	7c9a      	ldrb	r2, [r3, #18]
 80065bc:	9202      	str	r2, [sp, #8]
 80065be:	7c5a      	ldrb	r2, [r3, #17]
 80065c0:	9201      	str	r2, [sp, #4]
 80065c2:	7c1b      	ldrb	r3, [r3, #16]
 80065c4:	464a      	mov	r2, r9
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	0033      	movs	r3, r6
 80065ca:	f006 fc1f 	bl	800ce0c <BOS_CalendarConfig>
 80065ce:	4680      	mov	r8, r0
	if(result == BOS_OK){
 80065d0:	4643      	mov	r3, r8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d06c      	beq.n	80066b0 <setCommand+0x2f4>
	else if(result == BOS_ERR_WrongParam)
 80065d6:	4643      	mov	r3, r8
 80065d8:	2b67      	cmp	r3, #103	; 0x67
 80065da:	d100      	bne.n	80065de <setCommand+0x222>
 80065dc:	e71c      	b.n	8006418 <setCommand+0x5c>
	else if(result == BOS_ERR_WrongValue)
 80065de:	2b68      	cmp	r3, #104	; 0x68
 80065e0:	d000      	beq.n	80065e4 <setCommand+0x228>
 80065e2:	e71e      	b.n	8006422 <setCommand+0x66>
 80065e4:	e75e      	b.n	80064a4 <setCommand+0xe8>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80065e6:	aa0a      	add	r2, sp, #40	; 0x28
 80065e8:	2102      	movs	r1, #2
 80065ea:	0020      	movs	r0, r4
 80065ec:	f007 f91c 	bl	800d828 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80065f0:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80065f2:	63e8      	str	r0, [r5, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80065f4:	2103      	movs	r1, #3
 80065f6:	0020      	movs	r0, r4
 80065f8:	f007 f916 	bl	800d828 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80065fc:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80065fe:	6428      	str	r0, [r5, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006600:	2104      	movs	r1, #4
 8006602:	0020      	movs	r0, r4
 8006604:	f007 f910 	bl	800d828 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006608:	aa0d      	add	r2, sp, #52	; 0x34
 800660a:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800660c:	6468      	str	r0, [r5, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800660e:	0020      	movs	r0, r4
 8006610:	f007 f90a 	bl	800d828 <FreeRTOS_CLIGetParameter>
 8006614:	64a8      	str	r0, [r5, #72]	; 0x48
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006616:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8006618:	f00c f8ad 	bl	8012776 <atoi>
 800661c:	b2c6      	uxtb	r6, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800661e:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8006620:	f00c f8a9 	bl	8012776 <atoi>
 8006624:	b2c3      	uxtb	r3, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006626:	6c68      	ldr	r0, [r5, #68]	; 0x44
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006628:	4699      	mov	r9, r3
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800662a:	f00c f8a4 	bl	8012776 <atoi>
		if(pcParameterString5 != NULL){
 800662e:	6cac      	ldr	r4, [r5, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006630:	b2c3      	uxtb	r3, r0
 8006632:	469a      	mov	sl, r3
		if(pcParameterString5 != NULL){
 8006634:	2c00      	cmp	r4, #0
 8006636:	d010      	beq.n	800665a <setCommand+0x29e>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006638:	2202      	movs	r2, #2
 800663a:	4940      	ldr	r1, [pc, #256]	; (800673c <setCommand+0x380>)
 800663c:	0020      	movs	r0, r4
 800663e:	f00c fda7 	bl	8013190 <strncmp>
 8006642:	2800      	cmp	r0, #0
 8006644:	d029      	beq.n	800669a <setCommand+0x2de>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006646:	2202      	movs	r2, #2
 8006648:	493d      	ldr	r1, [pc, #244]	; (8006740 <setCommand+0x384>)
 800664a:	0020      	movs	r0, r4
 800664c:	f00c fda0 	bl	8013190 <strncmp>
 8006650:	2800      	cmp	r0, #0
 8006652:	d000      	beq.n	8006656 <setCommand+0x29a>
 8006654:	e726      	b.n	80064a4 <setCommand+0xe8>
				temp84 =RTC_PM;
 8006656:	2302      	movs	r3, #2
 8006658:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 800665a:	2e17      	cmp	r6, #23
 800665c:	d900      	bls.n	8006660 <setCommand+0x2a4>
 800665e:	e721      	b.n	80064a4 <setCommand+0xe8>
 8006660:	464b      	mov	r3, r9
 8006662:	2b3b      	cmp	r3, #59	; 0x3b
 8006664:	d900      	bls.n	8006668 <setCommand+0x2ac>
 8006666:	e71d      	b.n	80064a4 <setCommand+0xe8>
 8006668:	4653      	mov	r3, sl
 800666a:	2b3b      	cmp	r3, #59	; 0x3b
 800666c:	d900      	bls.n	8006670 <setCommand+0x2b4>
 800666e:	e719      	b.n	80064a4 <setCommand+0xe8>
				GetTimeDate();
 8006670:	f006 fc26 	bl	800cec0 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006674:	4c30      	ldr	r4, [pc, #192]	; (8006738 <setCommand+0x37c>)
 8006676:	7d23      	ldrb	r3, [r4, #20]
 8006678:	8b22      	ldrh	r2, [r4, #24]
 800667a:	7d61      	ldrb	r1, [r4, #21]
 800667c:	7da0      	ldrb	r0, [r4, #22]
 800667e:	7b24      	ldrb	r4, [r4, #12]
 8006680:	9602      	str	r6, [sp, #8]
 8006682:	b264      	sxtb	r4, r4
 8006684:	9404      	str	r4, [sp, #16]
 8006686:	4644      	mov	r4, r8
 8006688:	9403      	str	r4, [sp, #12]
 800668a:	464c      	mov	r4, r9
 800668c:	9401      	str	r4, [sp, #4]
 800668e:	4654      	mov	r4, sl
 8006690:	9400      	str	r4, [sp, #0]
 8006692:	f006 fbbb 	bl	800ce0c <BOS_CalendarConfig>
 8006696:	4680      	mov	r8, r0
 8006698:	e79a      	b.n	80065d0 <setCommand+0x214>
				temp84 =RTC_AM;
 800669a:	2301      	movs	r3, #1
 800669c:	4698      	mov	r8, r3
 800669e:	e7dc      	b.n	800665a <setCommand+0x29e>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80066a0:	4b28      	ldr	r3, [pc, #160]	; (8006744 <setCommand+0x388>)
 80066a2:	7018      	strb	r0, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066a4:	208a      	movs	r0, #138	; 0x8a
 80066a6:	7859      	ldrb	r1, [r3, #1]
 80066a8:	0040      	lsls	r0, r0, #1
 80066aa:	0209      	lsls	r1, r1, #8
 80066ac:	f001 f8fa 	bl	80078a4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80066b0:	2300      	movs	r3, #0
 80066b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066b4:	6baa      	ldr	r2, [r5, #56]	; 0x38
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80066b6:	0038      	movs	r0, r7
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80066b8:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80066ba:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80066bc:	4922      	ldr	r1, [pc, #136]	; (8006748 <setCommand+0x38c>)
 80066be:	f00c fd23 	bl	8013108 <sprintf>
	return pdFALSE;
 80066c2:	e6ae      	b.n	8006422 <setCommand+0x66>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80066c4:	2202      	movs	r2, #2
 80066c6:	4921      	ldr	r1, [pc, #132]	; (800674c <setCommand+0x390>)
 80066c8:	0020      	movs	r0, r4
 80066ca:	f00c fd61 	bl	8013190 <strncmp>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d100      	bne.n	80066d4 <setCommand+0x318>
 80066d2:	e75e      	b.n	8006592 <setCommand+0x1d6>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 80066d4:	2208      	movs	r2, #8
 80066d6:	491e      	ldr	r1, [pc, #120]	; (8006750 <setCommand+0x394>)
 80066d8:	0020      	movs	r0, r4
 80066da:	f00c fd59 	bl	8013190 <strncmp>
 80066de:	2800      	cmp	r0, #0
 80066e0:	d000      	beq.n	80066e4 <setCommand+0x328>
 80066e2:	e0fe      	b.n	80068e2 <setCommand+0x526>
			temp82 =FEBRUARY;
 80066e4:	2402      	movs	r4, #2
 80066e6:	e755      	b.n	8006594 <setCommand+0x1d8>
 80066e8:	20001280 	.word	0x20001280
 80066ec:	08018acc 	.word	0x08018acc
 80066f0:	08018d44 	.word	0x08018d44
 80066f4:	08018d54 	.word	0x08018d54
 80066f8:	08018b54 	.word	0x08018b54
 80066fc:	08018ad4 	.word	0x08018ad4
 8006700:	08017eb4 	.word	0x08017eb4
 8006704:	08018c40 	.word	0x08018c40
 8006708:	08018c48 	.word	0x08018c48
 800670c:	08018ae4 	.word	0x08018ae4
 8006710:	08018bf0 	.word	0x08018bf0
 8006714:	08018d5c 	.word	0x08018d5c
 8006718:	08018d64 	.word	0x08018d64
 800671c:	08018d6c 	.word	0x08018d6c
 8006720:	08018d74 	.word	0x08018d74
 8006724:	08018d80 	.word	0x08018d80
 8006728:	08018d8c 	.word	0x08018d8c
 800672c:	08018d94 	.word	0x08018d94
 8006730:	08018da0 	.word	0x08018da0
 8006734:	fffff830 	.word	0xfffff830
 8006738:	20006ea8 	.word	0x20006ea8
 800673c:	08018d4c 	.word	0x08018d4c
 8006740:	08018d50 	.word	0x08018d50
 8006744:	20006e28 	.word	0x20006e28
 8006748:	08018c4c 	.word	0x08018c4c
 800674c:	08018e28 	.word	0x08018e28
 8006750:	08018e2c 	.word	0x08018e2c
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006754:	9b07      	ldr	r3, [sp, #28]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d100      	bne.n	800675c <setCommand+0x3a0>
 800675a:	e6a3      	b.n	80064a4 <setCommand+0xe8>
 800675c:	2202      	movs	r2, #2
 800675e:	49c7      	ldr	r1, [pc, #796]	; (8006a7c <setCommand+0x6c0>)
 8006760:	0020      	movs	r0, r4
 8006762:	f00c fd15 	bl	8013190 <strncmp>
 8006766:	2800      	cmp	r0, #0
 8006768:	d100      	bne.n	800676c <setCommand+0x3b0>
 800676a:	e69b      	b.n	80064a4 <setCommand+0xe8>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 800676c:	2208      	movs	r2, #8
 800676e:	49c4      	ldr	r1, [pc, #784]	; (8006a80 <setCommand+0x6c4>)
 8006770:	0020      	movs	r0, r4
 8006772:	f00c fd0d 	bl	8013190 <strncmp>
 8006776:	2800      	cmp	r0, #0
 8006778:	d100      	bne.n	800677c <setCommand+0x3c0>
 800677a:	e693      	b.n	80064a4 <setCommand+0xe8>
 800677c:	2202      	movs	r2, #2
 800677e:	49c1      	ldr	r1, [pc, #772]	; (8006a84 <setCommand+0x6c8>)
 8006780:	0020      	movs	r0, r4
 8006782:	f00c fd05 	bl	8013190 <strncmp>
 8006786:	2800      	cmp	r0, #0
 8006788:	d100      	bne.n	800678c <setCommand+0x3d0>
 800678a:	e68b      	b.n	80064a4 <setCommand+0xe8>
			result =BOS_ERR_WrongValue;
 800678c:	2368      	movs	r3, #104	; 0x68
 800678e:	4698      	mov	r8, r3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006790:	2205      	movs	r2, #5
 8006792:	49bd      	ldr	r1, [pc, #756]	; (8006a88 <setCommand+0x6cc>)
 8006794:	0020      	movs	r0, r4
 8006796:	f00c fcfb 	bl	8013190 <strncmp>
 800679a:	2800      	cmp	r0, #0
 800679c:	d100      	bne.n	80067a0 <setCommand+0x3e4>
 800679e:	e09e      	b.n	80068de <setCommand+0x522>
 80067a0:	2202      	movs	r2, #2
 80067a2:	49ba      	ldr	r1, [pc, #744]	; (8006a8c <setCommand+0x6d0>)
 80067a4:	0020      	movs	r0, r4
 80067a6:	f00c fcf3 	bl	8013190 <strncmp>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d100      	bne.n	80067b0 <setCommand+0x3f4>
 80067ae:	e096      	b.n	80068de <setCommand+0x522>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 80067b0:	2205      	movs	r2, #5
 80067b2:	49b7      	ldr	r1, [pc, #732]	; (8006a90 <setCommand+0x6d4>)
 80067b4:	0020      	movs	r0, r4
 80067b6:	f00c fceb 	bl	8013190 <strncmp>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d100      	bne.n	80067c0 <setCommand+0x404>
 80067be:	e08c      	b.n	80068da <setCommand+0x51e>
 80067c0:	2202      	movs	r2, #2
 80067c2:	49b4      	ldr	r1, [pc, #720]	; (8006a94 <setCommand+0x6d8>)
 80067c4:	0020      	movs	r0, r4
 80067c6:	f00c fce3 	bl	8013190 <strncmp>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d100      	bne.n	80067d0 <setCommand+0x414>
 80067ce:	e084      	b.n	80068da <setCommand+0x51e>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 80067d0:	2203      	movs	r2, #3
 80067d2:	49b1      	ldr	r1, [pc, #708]	; (8006a98 <setCommand+0x6dc>)
 80067d4:	0020      	movs	r0, r4
 80067d6:	f00c fcdb 	bl	8013190 <strncmp>
 80067da:	2800      	cmp	r0, #0
 80067dc:	d07b      	beq.n	80068d6 <setCommand+0x51a>
 80067de:	2202      	movs	r2, #2
 80067e0:	49ae      	ldr	r1, [pc, #696]	; (8006a9c <setCommand+0x6e0>)
 80067e2:	0020      	movs	r0, r4
 80067e4:	f00c fcd4 	bl	8013190 <strncmp>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d074      	beq.n	80068d6 <setCommand+0x51a>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 80067ec:	2204      	movs	r2, #4
 80067ee:	49ac      	ldr	r1, [pc, #688]	; (8006aa0 <setCommand+0x6e4>)
 80067f0:	0020      	movs	r0, r4
 80067f2:	f00c fccd 	bl	8013190 <strncmp>
 80067f6:	2800      	cmp	r0, #0
 80067f8:	d06b      	beq.n	80068d2 <setCommand+0x516>
 80067fa:	2202      	movs	r2, #2
 80067fc:	49a9      	ldr	r1, [pc, #676]	; (8006aa4 <setCommand+0x6e8>)
 80067fe:	0020      	movs	r0, r4
 8006800:	f00c fcc6 	bl	8013190 <strncmp>
 8006804:	2800      	cmp	r0, #0
 8006806:	d064      	beq.n	80068d2 <setCommand+0x516>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006808:	2204      	movs	r2, #4
 800680a:	49a7      	ldr	r1, [pc, #668]	; (8006aa8 <setCommand+0x6ec>)
 800680c:	0020      	movs	r0, r4
 800680e:	f00c fcbf 	bl	8013190 <strncmp>
 8006812:	2800      	cmp	r0, #0
 8006814:	d05b      	beq.n	80068ce <setCommand+0x512>
 8006816:	2202      	movs	r2, #2
 8006818:	49a4      	ldr	r1, [pc, #656]	; (8006aac <setCommand+0x6f0>)
 800681a:	0020      	movs	r0, r4
 800681c:	f00c fcb8 	bl	8013190 <strncmp>
 8006820:	2800      	cmp	r0, #0
 8006822:	d054      	beq.n	80068ce <setCommand+0x512>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006824:	2205      	movs	r2, #5
 8006826:	49a2      	ldr	r1, [pc, #648]	; (8006ab0 <setCommand+0x6f4>)
 8006828:	0020      	movs	r0, r4
 800682a:	f00c fcb1 	bl	8013190 <strncmp>
 800682e:	2800      	cmp	r0, #0
 8006830:	d04b      	beq.n	80068ca <setCommand+0x50e>
 8006832:	2202      	movs	r2, #2
 8006834:	499f      	ldr	r1, [pc, #636]	; (8006ab4 <setCommand+0x6f8>)
 8006836:	0020      	movs	r0, r4
 8006838:	f00c fcaa 	bl	8013190 <strncmp>
 800683c:	2800      	cmp	r0, #0
 800683e:	d044      	beq.n	80068ca <setCommand+0x50e>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006840:	2209      	movs	r2, #9
 8006842:	499d      	ldr	r1, [pc, #628]	; (8006ab8 <setCommand+0x6fc>)
 8006844:	0020      	movs	r0, r4
 8006846:	f00c fca3 	bl	8013190 <strncmp>
 800684a:	2800      	cmp	r0, #0
 800684c:	d03b      	beq.n	80068c6 <setCommand+0x50a>
 800684e:	2202      	movs	r2, #2
 8006850:	499a      	ldr	r1, [pc, #616]	; (8006abc <setCommand+0x700>)
 8006852:	0020      	movs	r0, r4
 8006854:	f00c fc9c 	bl	8013190 <strncmp>
 8006858:	2800      	cmp	r0, #0
 800685a:	d034      	beq.n	80068c6 <setCommand+0x50a>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 800685c:	2207      	movs	r2, #7
 800685e:	4998      	ldr	r1, [pc, #608]	; (8006ac0 <setCommand+0x704>)
 8006860:	0020      	movs	r0, r4
 8006862:	f00c fc95 	bl	8013190 <strncmp>
 8006866:	2800      	cmp	r0, #0
 8006868:	d02b      	beq.n	80068c2 <setCommand+0x506>
 800686a:	2202      	movs	r2, #2
 800686c:	4995      	ldr	r1, [pc, #596]	; (8006ac4 <setCommand+0x708>)
 800686e:	0020      	movs	r0, r4
 8006870:	f00c fc8e 	bl	8013190 <strncmp>
 8006874:	2800      	cmp	r0, #0
 8006876:	d024      	beq.n	80068c2 <setCommand+0x506>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006878:	2208      	movs	r2, #8
 800687a:	4993      	ldr	r1, [pc, #588]	; (8006ac8 <setCommand+0x70c>)
 800687c:	0020      	movs	r0, r4
 800687e:	f00c fc87 	bl	8013190 <strncmp>
 8006882:	2800      	cmp	r0, #0
 8006884:	d01b      	beq.n	80068be <setCommand+0x502>
 8006886:	2202      	movs	r2, #2
 8006888:	4990      	ldr	r1, [pc, #576]	; (8006acc <setCommand+0x710>)
 800688a:	0020      	movs	r0, r4
 800688c:	f00c fc80 	bl	8013190 <strncmp>
 8006890:	2800      	cmp	r0, #0
 8006892:	d014      	beq.n	80068be <setCommand+0x502>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006894:	2208      	movs	r2, #8
 8006896:	498e      	ldr	r1, [pc, #568]	; (8006ad0 <setCommand+0x714>)
 8006898:	0020      	movs	r0, r4
 800689a:	f00c fc79 	bl	8013190 <strncmp>
 800689e:	2800      	cmp	r0, #0
 80068a0:	d007      	beq.n	80068b2 <setCommand+0x4f6>
 80068a2:	2202      	movs	r2, #2
 80068a4:	498b      	ldr	r1, [pc, #556]	; (8006ad4 <setCommand+0x718>)
 80068a6:	0020      	movs	r0, r4
 80068a8:	f00c fc72 	bl	8013190 <strncmp>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d000      	beq.n	80068b2 <setCommand+0x4f6>
 80068b0:	e5f8      	b.n	80064a4 <setCommand+0xe8>
			temp82 =DECEMBER;
 80068b2:	240c      	movs	r4, #12
		if(result == BOS_OK){
 80068b4:	4643      	mov	r3, r8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d000      	beq.n	80068bc <setCommand+0x500>
 80068ba:	e68c      	b.n	80065d6 <setCommand+0x21a>
 80068bc:	e66a      	b.n	8006594 <setCommand+0x1d8>
			temp82 =NOVEMBER;
 80068be:	240b      	movs	r4, #11
 80068c0:	e7f8      	b.n	80068b4 <setCommand+0x4f8>
			temp82 =OCTOBER;
 80068c2:	240a      	movs	r4, #10
 80068c4:	e7f6      	b.n	80068b4 <setCommand+0x4f8>
			temp82 =SEPTEMBER;
 80068c6:	2409      	movs	r4, #9
 80068c8:	e7f4      	b.n	80068b4 <setCommand+0x4f8>
			temp82 =AUGUST;
 80068ca:	2408      	movs	r4, #8
 80068cc:	e7f2      	b.n	80068b4 <setCommand+0x4f8>
			temp82 =JULY;
 80068ce:	2407      	movs	r4, #7
 80068d0:	e7f0      	b.n	80068b4 <setCommand+0x4f8>
			temp82 =JUNE;
 80068d2:	2406      	movs	r4, #6
 80068d4:	e7ee      	b.n	80068b4 <setCommand+0x4f8>
			temp82 =MAY;
 80068d6:	2405      	movs	r4, #5
 80068d8:	e7ec      	b.n	80068b4 <setCommand+0x4f8>
			temp82 =APRIL;
 80068da:	2404      	movs	r4, #4
 80068dc:	e7ea      	b.n	80068b4 <setCommand+0x4f8>
			temp82 =MARCH;
 80068de:	2403      	movs	r4, #3
 80068e0:	e7e8      	b.n	80068b4 <setCommand+0x4f8>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 80068e2:	2202      	movs	r2, #2
 80068e4:	4967      	ldr	r1, [pc, #412]	; (8006a84 <setCommand+0x6c8>)
 80068e6:	0020      	movs	r0, r4
 80068e8:	f00c fc52 	bl	8013190 <strncmp>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d100      	bne.n	80068f2 <setCommand+0x536>
 80068f0:	e6f8      	b.n	80066e4 <setCommand+0x328>
 80068f2:	2300      	movs	r3, #0
 80068f4:	4698      	mov	r8, r3
 80068f6:	e74b      	b.n	8006790 <setCommand+0x3d4>
			temp81 =SATURDAY;
 80068f8:	2606      	movs	r6, #6
 80068fa:	e641      	b.n	8006580 <setCommand+0x1c4>
			temp81 =FRIDAY;
 80068fc:	2605      	movs	r6, #5
 80068fe:	e63f      	b.n	8006580 <setCommand+0x1c4>
			temp81 =THURSDAY;
 8006900:	2604      	movs	r6, #4
 8006902:	e63d      	b.n	8006580 <setCommand+0x1c4>
			temp81 =WEDNESDAY;
 8006904:	2603      	movs	r6, #3
 8006906:	e63b      	b.n	8006580 <setCommand+0x1c4>
			temp81 =TUESDAY;
 8006908:	2602      	movs	r6, #2
 800690a:	e639      	b.n	8006580 <setCommand+0x1c4>
 800690c:	4b72      	ldr	r3, [pc, #456]	; (8006ad8 <setCommand+0x71c>)
			temp81 =MONDAY;
 800690e:	2601      	movs	r6, #1
 8006910:	469a      	mov	sl, r3
 8006912:	e635      	b.n	8006580 <setCommand+0x1c4>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 8006914:	2140      	movs	r1, #64	; 0x40
 8006916:	4b71      	ldr	r3, [pc, #452]	; (8006adc <setCommand+0x720>)
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006918:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800691a:	785b      	ldrb	r3, [r3, #1]
 800691c:	3015      	adds	r0, #21
 800691e:	021b      	lsls	r3, r3, #8
 8006920:	4319      	orrs	r1, r3
 8006922:	30ff      	adds	r0, #255	; 0xff
 8006924:	f000 ffbe 	bl	80078a4 <EE_WriteVariable>
 8006928:	e6c2      	b.n	80066b0 <setCommand+0x2f4>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 800692a:	4b6c      	ldr	r3, [pc, #432]	; (8006adc <setCommand+0x720>)
 800692c:	2120      	movs	r1, #32
 800692e:	e7f3      	b.n	8006918 <setCommand+0x55c>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006930:	4b6a      	ldr	r3, [pc, #424]	; (8006adc <setCommand+0x720>)
 8006932:	2160      	movs	r1, #96	; 0x60
 8006934:	e7f0      	b.n	8006918 <setCommand+0x55c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006936:	4642      	mov	r2, r8
 8006938:	4969      	ldr	r1, [pc, #420]	; (8006ae0 <setCommand+0x724>)
 800693a:	0030      	movs	r0, r6
 800693c:	f00c fc28 	bl	8013190 <strncmp>
 8006940:	2800      	cmp	r0, #0
 8006942:	d127      	bne.n	8006994 <setCommand+0x5d8>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006944:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006946:	4967      	ldr	r1, [pc, #412]	; (8006ae4 <setCommand+0x728>)
 8006948:	0032      	movs	r2, r6
 800694a:	0020      	movs	r0, r4
 800694c:	f00c fc20 	bl	8013190 <strncmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	d100      	bne.n	8006956 <setCommand+0x59a>
 8006954:	e10b      	b.n	8006b6e <setCommand+0x7b2>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006956:	0032      	movs	r2, r6
 8006958:	4963      	ldr	r1, [pc, #396]	; (8006ae8 <setCommand+0x72c>)
 800695a:	0020      	movs	r0, r4
 800695c:	f00c fc18 	bl	8013190 <strncmp>
 8006960:	2800      	cmp	r0, #0
 8006962:	d100      	bne.n	8006966 <setCommand+0x5aa>
 8006964:	e0f7      	b.n	8006b56 <setCommand+0x79a>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 8006966:	0032      	movs	r2, r6
 8006968:	4649      	mov	r1, r9
 800696a:	0020      	movs	r0, r4
 800696c:	f00c fc10 	bl	8013190 <strncmp>
 8006970:	2800      	cmp	r0, #0
 8006972:	d048      	beq.n	8006a06 <setCommand+0x64a>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006974:	0032      	movs	r2, r6
 8006976:	495d      	ldr	r1, [pc, #372]	; (8006aec <setCommand+0x730>)
 8006978:	0020      	movs	r0, r4
 800697a:	f00c fc09 	bl	8013190 <strncmp>
 800697e:	2800      	cmp	r0, #0
 8006980:	d000      	beq.n	8006984 <setCommand+0x5c8>
 8006982:	e58f      	b.n	80064a4 <setCommand+0xe8>
				BOSMessaging.trace =TRACE_NONE;
 8006984:	4b55      	ldr	r3, [pc, #340]	; (8006adc <setCommand+0x720>)
 8006986:	7058      	strb	r0, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006988:	3015      	adds	r0, #21
 800698a:	7819      	ldrb	r1, [r3, #0]
 800698c:	30ff      	adds	r0, #255	; 0xff
 800698e:	f000 ff89 	bl	80078a4 <EE_WriteVariable>
 8006992:	e68d      	b.n	80066b0 <setCommand+0x2f4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006994:	4642      	mov	r2, r8
 8006996:	4956      	ldr	r1, [pc, #344]	; (8006af0 <setCommand+0x734>)
 8006998:	0030      	movs	r0, r6
 800699a:	f00c fbf9 	bl	8013190 <strncmp>
 800699e:	4681      	mov	r9, r0
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d100      	bne.n	80069a6 <setCommand+0x5ea>
 80069a4:	e0b0      	b.n	8006b08 <setCommand+0x74c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80069a6:	4642      	mov	r2, r8
 80069a8:	4952      	ldr	r1, [pc, #328]	; (8006af4 <setCommand+0x738>)
 80069aa:	0030      	movs	r0, r6
 80069ac:	f00c fbf0 	bl	8013190 <strncmp>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d055      	beq.n	8006a60 <setCommand+0x6a4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80069b4:	4642      	mov	r2, r8
 80069b6:	4950      	ldr	r1, [pc, #320]	; (8006af8 <setCommand+0x73c>)
 80069b8:	0030      	movs	r0, r6
 80069ba:	f00c fbe9 	bl	8013190 <strncmp>
 80069be:	2800      	cmp	r0, #0
 80069c0:	d040      	beq.n	8006a44 <setCommand+0x688>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80069c2:	4642      	mov	r2, r8
 80069c4:	494d      	ldr	r1, [pc, #308]	; (8006afc <setCommand+0x740>)
 80069c6:	0030      	movs	r0, r6
 80069c8:	f00c fbe2 	bl	8013190 <strncmp>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d026      	beq.n	8006a1e <setCommand+0x662>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80069d0:	4642      	mov	r2, r8
 80069d2:	494b      	ldr	r1, [pc, #300]	; (8006b00 <setCommand+0x744>)
 80069d4:	0030      	movs	r0, r6
 80069d6:	f00c fbdb 	bl	8013190 <strncmp>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d000      	beq.n	80069e0 <setCommand+0x624>
 80069de:	e51b      	b.n	8006418 <setCommand+0x5c>
			temp16 =atoi((const char* )pcParameterString2);
 80069e0:	0020      	movs	r0, r4
 80069e2:	f00b fec8 	bl	8012776 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80069e6:	1e43      	subs	r3, r0, #1
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	2bfe      	cmp	r3, #254	; 0xfe
 80069ec:	d900      	bls.n	80069f0 <setCommand+0x634>
 80069ee:	e559      	b.n	80064a4 <setCommand+0xe8>
				BOS.buttons.maxInterClickTime =temp16;
 80069f0:	4b44      	ldr	r3, [pc, #272]	; (8006b04 <setCommand+0x748>)
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80069f2:	7919      	ldrb	r1, [r3, #4]
				BOS.buttons.maxInterClickTime =temp16;
 80069f4:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80069f6:	0200      	lsls	r0, r0, #8
 80069f8:	4301      	orrs	r1, r0
 80069fa:	2018      	movs	r0, #24
 80069fc:	b289      	uxth	r1, r1
 80069fe:	30ff      	adds	r0, #255	; 0xff
 8006a00:	f000 ff50 	bl	80078a4 <EE_WriteVariable>
 8006a04:	e654      	b.n	80066b0 <setCommand+0x2f4>
				BOSMessaging.trace =TRACE_RESPONSE;
 8006a06:	2202      	movs	r2, #2
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006a08:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_RESPONSE;
 8006a0a:	4b34      	ldr	r3, [pc, #208]	; (8006adc <setCommand+0x720>)
 8006a0c:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	0089      	lsls	r1, r1, #2
 8006a12:	3015      	adds	r0, #21
 8006a14:	4319      	orrs	r1, r3
 8006a16:	30ff      	adds	r0, #255	; 0xff
 8006a18:	f000 ff44 	bl	80078a4 <EE_WriteVariable>
 8006a1c:	e648      	b.n	80066b0 <setCommand+0x2f4>
			temp16 =atoi((const char* )pcParameterString2);
 8006a1e:	0020      	movs	r0, r4
 8006a20:	f00b fea9 	bl	8012776 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006a24:	1e43      	subs	r3, r0, #1
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2bfe      	cmp	r3, #254	; 0xfe
 8006a2a:	d900      	bls.n	8006a2e <setCommand+0x672>
 8006a2c:	e53a      	b.n	80064a4 <setCommand+0xe8>
				BOS.buttons.minInterClickTime =temp16;
 8006a2e:	4b35      	ldr	r3, [pc, #212]	; (8006b04 <setCommand+0x748>)
 8006a30:	b2c0      	uxtb	r0, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006a32:	7959      	ldrb	r1, [r3, #5]
				BOS.buttons.minInterClickTime =temp16;
 8006a34:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006a36:	0209      	lsls	r1, r1, #8
 8006a38:	4301      	orrs	r1, r0
 8006a3a:	2018      	movs	r0, #24
 8006a3c:	30ff      	adds	r0, #255	; 0xff
 8006a3e:	f000 ff31 	bl	80078a4 <EE_WriteVariable>
 8006a42:	e635      	b.n	80066b0 <setCommand+0x2f4>
			temp16 =atoi((const char* )pcParameterString2);
 8006a44:	0020      	movs	r0, r4
 8006a46:	f00b fe96 	bl	8012776 <atoi>
 8006a4a:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006a4c:	2900      	cmp	r1, #0
 8006a4e:	d100      	bne.n	8006a52 <setCommand+0x696>
 8006a50:	e528      	b.n	80064a4 <setCommand+0xe8>
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006a52:	208b      	movs	r0, #139	; 0x8b
				BOS.buttons.singleClickTime =temp16;
 8006a54:	4b2b      	ldr	r3, [pc, #172]	; (8006b04 <setCommand+0x748>)
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006a56:	0040      	lsls	r0, r0, #1
				BOS.buttons.singleClickTime =temp16;
 8006a58:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006a5a:	f000 ff23 	bl	80078a4 <EE_WriteVariable>
 8006a5e:	e627      	b.n	80066b0 <setCommand+0x2f4>
			temp16 =atoi((const char* )pcParameterString2);
 8006a60:	0020      	movs	r0, r4
 8006a62:	f00b fe88 	bl	8012776 <atoi>
 8006a66:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	d100      	bne.n	8006a6e <setCommand+0x6b2>
 8006a6c:	e51a      	b.n	80064a4 <setCommand+0xe8>
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006a6e:	2016      	movs	r0, #22
				BOS.buttons.debounce =temp16;
 8006a70:	4b24      	ldr	r3, [pc, #144]	; (8006b04 <setCommand+0x748>)
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006a72:	30ff      	adds	r0, #255	; 0xff
				BOS.buttons.debounce =temp16;
 8006a74:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006a76:	f000 ff15 	bl	80078a4 <EE_WriteVariable>
 8006a7a:	e619      	b.n	80066b0 <setCommand+0x2f4>
 8006a7c:	08018e28 	.word	0x08018e28
 8006a80:	08018e2c 	.word	0x08018e2c
 8006a84:	08018e38 	.word	0x08018e38
 8006a88:	08018da8 	.word	0x08018da8
 8006a8c:	08018db0 	.word	0x08018db0
 8006a90:	08018db4 	.word	0x08018db4
 8006a94:	08018dbc 	.word	0x08018dbc
 8006a98:	08018dc0 	.word	0x08018dc0
 8006a9c:	08018dc4 	.word	0x08018dc4
 8006aa0:	08018dc8 	.word	0x08018dc8
 8006aa4:	08018dd0 	.word	0x08018dd0
 8006aa8:	08018dd4 	.word	0x08018dd4
 8006aac:	08018ddc 	.word	0x08018ddc
 8006ab0:	08018de0 	.word	0x08018de0
 8006ab4:	08018de8 	.word	0x08018de8
 8006ab8:	08018dec 	.word	0x08018dec
 8006abc:	08018df8 	.word	0x08018df8
 8006ac0:	08018dfc 	.word	0x08018dfc
 8006ac4:	08018e04 	.word	0x08018e04
 8006ac8:	08018e08 	.word	0x08018e08
 8006acc:	08018e14 	.word	0x08018e14
 8006ad0:	08018e18 	.word	0x08018e18
 8006ad4:	08018e24 	.word	0x08018e24
 8006ad8:	08018d6c 	.word	0x08018d6c
 8006adc:	20006e28 	.word	0x20006e28
 8006ae0:	08018aec 	.word	0x08018aec
 8006ae4:	08017eb4 	.word	0x08017eb4
 8006ae8:	08018c40 	.word	0x08018c40
 8006aec:	08018ae4 	.word	0x08018ae4
 8006af0:	08018af4 	.word	0x08018af4
 8006af4:	08018b00 	.word	0x08018b00
 8006af8:	08018b0c 	.word	0x08018b0c
 8006afc:	08018b1c 	.word	0x08018b1c
 8006b00:	08018b30 	.word	0x08018b30
 8006b04:	20006ea8 	.word	0x20006ea8
			temp2 =atoi((const char* )pcParameterString2);
 8006b08:	0020      	movs	r0, r4
 8006b0a:	f00b fe34 	bl	8012776 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006b0e:	23e1      	movs	r3, #225	; 0xe1
 8006b10:	031b      	lsls	r3, r3, #12
 8006b12:	4298      	cmp	r0, r3
 8006b14:	d900      	bls.n	8006b18 <setCommand+0x75c>
 8006b16:	e4c5      	b.n	80064a4 <setCommand+0xe8>
				BOS.clibaudrate =temp2;
 8006b18:	4c18      	ldr	r4, [pc, #96]	; (8006b7c <setCommand+0x7c0>)
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006b1a:	b281      	uxth	r1, r0
				BOS.clibaudrate =temp2;
 8006b1c:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006b1e:	208c      	movs	r0, #140	; 0x8c
 8006b20:	0040      	lsls	r0, r0, #1
 8006b22:	f000 febf 	bl	80078a4 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006b26:	201a      	movs	r0, #26
 8006b28:	68a1      	ldr	r1, [r4, #8]
 8006b2a:	30ff      	adds	r0, #255	; 0xff
 8006b2c:	0c09      	lsrs	r1, r1, #16
 8006b2e:	f000 feb9 	bl	80078a4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006b32:	4649      	mov	r1, r9
 8006b34:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006b38:	0038      	movs	r0, r7
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006b3a:	54d1      	strb	r1, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006b3c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006b3e:	4910      	ldr	r1, [pc, #64]	; (8006b80 <setCommand+0x7c4>)
 8006b40:	f00c fae2 	bl	8013108 <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006b44:	490f      	ldr	r1, [pc, #60]	; (8006b84 <setCommand+0x7c8>)
 8006b46:	0038      	movs	r0, r7
 8006b48:	f00c fafe 	bl	8013148 <strcat>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006b4c:	490e      	ldr	r1, [pc, #56]	; (8006b88 <setCommand+0x7cc>)
 8006b4e:	0038      	movs	r0, r7
 8006b50:	f00c fafa 	bl	8013148 <strcat>
 8006b54:	e465      	b.n	8006422 <setCommand+0x66>
				BOSMessaging.trace =TRACE_MESSAGE;
 8006b56:	2201      	movs	r2, #1
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b58:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_MESSAGE;
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <setCommand+0x7d0>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b5c:	0049      	lsls	r1, r1, #1
				BOSMessaging.trace =TRACE_MESSAGE;
 8006b5e:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	3015      	adds	r0, #21
 8006b64:	4319      	orrs	r1, r3
 8006b66:	30ff      	adds	r0, #255	; 0xff
 8006b68:	f000 fe9c 	bl	80078a4 <EE_WriteVariable>
 8006b6c:	e5a0      	b.n	80066b0 <setCommand+0x2f4>
				BOSMessaging.trace =TRACE_BOTH;
 8006b6e:	2203      	movs	r2, #3
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <setCommand+0x7d0>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b72:	21c0      	movs	r1, #192	; 0xc0
				BOSMessaging.trace =TRACE_BOTH;
 8006b74:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	e74a      	b.n	8006a10 <setCommand+0x654>
 8006b7a:	46c0      	nop			; (mov r8, r8)
 8006b7c:	20006ea8 	.word	0x20006ea8
 8006b80:	08018c4c 	.word	0x08018c4c
 8006b84:	08018c60 	.word	0x08018c60
 8006b88:	08018c90 	.word	0x08018c90
 8006b8c:	20006e28 	.word	0x20006e28

08006b90 <removebuttonCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006b90:	2300      	movs	r3, #0
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b92:	b530      	push	{r4, r5, lr}
 8006b94:	b083      	sub	sp, #12
 8006b96:	0005      	movs	r5, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8006b98:	9301      	str	r3, [sp, #4]
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b9a:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8006b9c:	2d00      	cmp	r5, #0
 8006b9e:	d010      	beq.n	8006bc2 <removebuttonCommand+0x32>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006ba0:	aa01      	add	r2, sp, #4
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	f006 fe40 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006ba8:	2300      	movs	r3, #0
 8006baa:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006bac:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006bae:	2b70      	cmp	r3, #112	; 0x70
 8006bb0:	d009      	beq.n	8006bc6 <removebuttonCommand+0x36>
	result =RemovePortButton(port);
 8006bb2:	0020      	movs	r0, r4
 8006bb4:	f001 fca4 	bl	8008500 <RemovePortButton>
	if(result == BOS_OK){
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d009      	beq.n	8006bd0 <removebuttonCommand+0x40>
}
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	b003      	add	sp, #12
 8006bc0:	bd30      	pop	{r4, r5, pc}
	configASSERT(pcWriteBuffer);
 8006bc2:	b672      	cpsid	i
 8006bc4:	e7fe      	b.n	8006bc4 <removebuttonCommand+0x34>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	f00b fddb 	bl	8012782 <atol>
 8006bcc:	b2c4      	uxtb	r4, r0
 8006bce:	e7f0      	b.n	8006bb2 <removebuttonCommand+0x22>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006bd0:	0023      	movs	r3, r4
 8006bd2:	0022      	movs	r2, r4
 8006bd4:	4902      	ldr	r1, [pc, #8]	; (8006be0 <removebuttonCommand+0x50>)
 8006bd6:	0028      	movs	r0, r5
 8006bd8:	f00c fa96 	bl	8013108 <sprintf>
 8006bdc:	e7ee      	b.n	8006bbc <removebuttonCommand+0x2c>
 8006bde:	46c0      	nop			; (mov r8, r8)
 8006be0:	08018e3c 	.word	0x08018e3c

08006be4 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006be6:	46ce      	mov	lr, r9
 8006be8:	4647      	mov	r7, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006bea:	2300      	movs	r3, #0
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	1e06      	subs	r6, r0, #0
 8006bf2:	4691      	mov	r9, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006bf4:	9302      	str	r3, [sp, #8]
 8006bf6:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8006bf8:	d036      	beq.n	8006c68 <addbuttonCommand+0x84>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006bfa:	aa02      	add	r2, sp, #8
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	4648      	mov	r0, r9
 8006c00:	f006 fe12 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c04:	9b02      	ldr	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c06:	4f25      	ldr	r7, [pc, #148]	; (8006c9c <addbuttonCommand+0xb8>)
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c08:	001a      	movs	r2, r3
 8006c0a:	4925      	ldr	r1, [pc, #148]	; (8006ca0 <addbuttonCommand+0xbc>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c0c:	0005      	movs	r5, r0
 8006c0e:	64f8      	str	r0, [r7, #76]	; 0x4c
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c10:	4698      	mov	r8, r3
 8006c12:	f00c fabd 	bl	8013190 <strncmp>
		type =MOMENTARY_NO;
 8006c16:	2401      	movs	r4, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d00f      	beq.n	8006c3c <addbuttonCommand+0x58>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	4921      	ldr	r1, [pc, #132]	; (8006ca4 <addbuttonCommand+0xc0>)
 8006c20:	0028      	movs	r0, r5
 8006c22:	f00c fab5 	bl	8013190 <strncmp>
		type =MOMENTARY_NC;
 8006c26:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d007      	beq.n	8006c3c <addbuttonCommand+0x58>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	491e      	ldr	r1, [pc, #120]	; (8006ca8 <addbuttonCommand+0xc4>)
 8006c30:	0028      	movs	r0, r5
 8006c32:	f00c faad 	bl	8013190 <strncmp>
		type =ONOFF_NO;
 8006c36:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d117      	bne.n	8006c6c <addbuttonCommand+0x88>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c3c:	aa03      	add	r2, sp, #12
 8006c3e:	2102      	movs	r1, #2
 8006c40:	4648      	mov	r0, r9
 8006c42:	f006 fdf1 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006c46:	2300      	movs	r3, #0
 8006c48:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006c4a:	2500      	movs	r5, #0
	if(pcParameterString2[0] == 'p'){
 8006c4c:	2b70      	cmp	r3, #112	; 0x70
 8006c4e:	d020      	beq.n	8006c92 <addbuttonCommand+0xae>
	result =AddPortButton(type,port);
 8006c50:	0029      	movs	r1, r5
 8006c52:	0020      	movs	r0, r4
 8006c54:	f001 fbda 	bl	800840c <AddPortButton>
	if(result == BOS_OK){
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d010      	beq.n	8006c7e <addbuttonCommand+0x9a>
}
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	b005      	add	sp, #20
 8006c60:	bc0c      	pop	{r2, r3}
 8006c62:	4690      	mov	r8, r2
 8006c64:	4699      	mov	r9, r3
 8006c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006c68:	b672      	cpsid	i
 8006c6a:	e7fe      	b.n	8006c6a <addbuttonCommand+0x86>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	490f      	ldr	r1, [pc, #60]	; (8006cac <addbuttonCommand+0xc8>)
 8006c70:	0028      	movs	r0, r5
 8006c72:	f00c fa8d 	bl	8013190 <strncmp>
		type =ONOFF_NC;
 8006c76:	4244      	negs	r4, r0
 8006c78:	4144      	adcs	r4, r0
 8006c7a:	00a4      	lsls	r4, r4, #2
 8006c7c:	e7de      	b.n	8006c3c <addbuttonCommand+0x58>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006c7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c80:	9b02      	ldr	r3, [sp, #8]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006c82:	490b      	ldr	r1, [pc, #44]	; (8006cb0 <addbuttonCommand+0xcc>)
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006c84:	54d0      	strb	r0, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006c86:	9500      	str	r5, [sp, #0]
 8006c88:	002b      	movs	r3, r5
 8006c8a:	0030      	movs	r0, r6
 8006c8c:	f00c fa3c 	bl	8013108 <sprintf>
 8006c90:	e7e4      	b.n	8006c5c <addbuttonCommand+0x78>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006c92:	3001      	adds	r0, #1
 8006c94:	f00b fd75 	bl	8012782 <atol>
 8006c98:	b2c5      	uxtb	r5, r0
 8006c9a:	e7d9      	b.n	8006c50 <addbuttonCommand+0x6c>
 8006c9c:	20001280 	.word	0x20001280
 8006ca0:	08018e64 	.word	0x08018e64
 8006ca4:	08018e74 	.word	0x08018e74
 8006ca8:	08018e84 	.word	0x08018e84
 8006cac:	08018e90 	.word	0x08018e90
 8006cb0:	08018e9c 	.word	0x08018e9c

08006cb4 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb6:	46de      	mov	lr, fp
 8006cb8:	4645      	mov	r5, r8
 8006cba:	4657      	mov	r7, sl
 8006cbc:	464e      	mov	r6, r9
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006cbe:	2300      	movs	r3, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cc0:	b5e0      	push	{r5, r6, r7, lr}
 8006cc2:	b09b      	sub	sp, #108	; 0x6c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006cc4:	af11      	add	r7, sp, #68	; 0x44
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cc6:	0004      	movs	r4, r0
 8006cc8:	9009      	str	r0, [sp, #36]	; 0x24
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006cca:	2100      	movs	r1, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ccc:	0015      	movs	r5, r2
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006cce:	0038      	movs	r0, r7
 8006cd0:	220a      	movs	r2, #10
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006cd2:	930a      	str	r3, [sp, #40]	; 0x28
 8006cd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cd6:	930c      	str	r3, [sp, #48]	; 0x30
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006cd8:	930d      	str	r3, [sp, #52]	; 0x34
 8006cda:	930e      	str	r3, [sp, #56]	; 0x38
 8006cdc:	930f      	str	r3, [sp, #60]	; 0x3c
	portBASE_TYPE xParameterStringLength7 =0;
 8006cde:	9310      	str	r3, [sp, #64]	; 0x40
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006ce0:	f00c f818 	bl	8012d14 <memset>
 8006ce4:	ab14      	add	r3, sp, #80	; 0x50
 8006ce6:	220a      	movs	r2, #10
 8006ce8:	2100      	movs	r1, #0
 8006cea:	0018      	movs	r0, r3
 8006cec:	4698      	mov	r8, r3
 8006cee:	f00c f811 	bl	8012d14 <memset>
 8006cf2:	ab17      	add	r3, sp, #92	; 0x5c
 8006cf4:	220a      	movs	r2, #10
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f00c f80b 	bl	8012d14 <memset>
	configASSERT(pcWriteBuffer);
 8006cfe:	2c00      	cmp	r4, #0
 8006d00:	d100      	bne.n	8006d04 <scastCommand+0x50>
 8006d02:	e07d      	b.n	8006e00 <scastCommand+0x14c>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d04:	aa0a      	add	r2, sp, #40	; 0x28
 8006d06:	2101      	movs	r1, #1
 8006d08:	0028      	movs	r0, r5
 8006d0a:	f006 fd8d 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006d0e:	2300      	movs	r3, #0
 8006d10:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d12:	2600      	movs	r6, #0
	if(pcParameterString1[0] == 'P'){
 8006d14:	2b50      	cmp	r3, #80	; 0x50
 8006d16:	d100      	bne.n	8006d1a <scastCommand+0x66>
 8006d18:	e074      	b.n	8006e04 <scastCommand+0x150>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006d1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d1c:	2102      	movs	r1, #2
 8006d1e:	0028      	movs	r0, r5
 8006d20:	f006 fd82 	bl	800d828 <FreeRTOS_CLIGetParameter>
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006d24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006d26:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006d28:	0038      	movs	r0, r7
 8006d2a:	f00c fa42 	bl	80131b2 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006d2e:	0038      	movs	r0, r7
 8006d30:	f7fd fa56 	bl	80041e0 <GetID>
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006d34:	aa0c      	add	r2, sp, #48	; 0x30
	srcM =(uint8_t )GetID(par1);
 8006d36:	b2c3      	uxtb	r3, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006d38:	2103      	movs	r1, #3
 8006d3a:	0028      	movs	r0, r5
	srcM =(uint8_t )GetID(par1);
 8006d3c:	9307      	str	r3, [sp, #28]
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006d3e:	f006 fd73 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006d42:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d44:	2200      	movs	r2, #0
	if(pcParameterString3[0] == 'p'){
 8006d46:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d48:	4693      	mov	fp, r2
	if(pcParameterString3[0] == 'p'){
 8006d4a:	2b70      	cmp	r3, #112	; 0x70
 8006d4c:	d06e      	beq.n	8006e2c <scastCommand+0x178>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006d4e:	aa0d      	add	r2, sp, #52	; 0x34
 8006d50:	2104      	movs	r1, #4
 8006d52:	0028      	movs	r0, r5
 8006d54:	f006 fd68 	bl	800d828 <FreeRTOS_CLIGetParameter>
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006d58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006d5a:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	f00c fa28 	bl	80131b2 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006d62:	4640      	mov	r0, r8
 8006d64:	f7fd fa3c 	bl	80041e0 <GetID>
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d68:	aa0e      	add	r2, sp, #56	; 0x38
	dstM =(uint8_t )GetID(par2);
 8006d6a:	b2c3      	uxtb	r3, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d6c:	2105      	movs	r1, #5
 8006d6e:	0028      	movs	r0, r5
	dstM =(uint8_t )GetID(par2);
 8006d70:	9308      	str	r3, [sp, #32]
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d72:	f006 fd59 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d78:	492f      	ldr	r1, [pc, #188]	; (8006e38 <scastCommand+0x184>)
 8006d7a:	001a      	movs	r2, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d7c:	4681      	mov	r9, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d7e:	469a      	mov	sl, r3
 8006d80:	f00c fa06 	bl	8013190 <strncmp>
		direction =FORWARD;
 8006d84:	2400      	movs	r4, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d00f      	beq.n	8006daa <scastCommand+0xf6>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d8a:	4652      	mov	r2, sl
 8006d8c:	492b      	ldr	r1, [pc, #172]	; (8006e3c <scastCommand+0x188>)
 8006d8e:	4648      	mov	r0, r9
 8006d90:	f00c f9fe 	bl	8013190 <strncmp>
		direction =BACKWARD;
 8006d94:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d007      	beq.n	8006daa <scastCommand+0xf6>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006d9a:	4652      	mov	r2, sl
 8006d9c:	4928      	ldr	r1, [pc, #160]	; (8006e40 <scastCommand+0x18c>)
 8006d9e:	4648      	mov	r0, r9
 8006da0:	f00c f9f6 	bl	8013190 <strncmp>
		direction =BIDIRECTIONAL;
 8006da4:	4244      	negs	r4, r0
 8006da6:	4144      	adcs	r4, r0
 8006da8:	0064      	lsls	r4, r4, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006daa:	4649      	mov	r1, r9
 8006dac:	4652      	mov	r2, sl
 8006dae:	a817      	add	r0, sp, #92	; 0x5c
 8006db0:	f00c f9ff 	bl	80131b2 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006db4:	aa0f      	add	r2, sp, #60	; 0x3c
 8006db6:	2106      	movs	r1, #6
 8006db8:	0028      	movs	r0, r5
 8006dba:	f006 fd35 	bl	800d828 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006dbe:	f00b fce0 	bl	8012782 <atol>
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006dc2:	aa10      	add	r2, sp, #64	; 0x40
 8006dc4:	2107      	movs	r1, #7
	count =(uint32_t )atol((char* )pcParameterString6);
 8006dc6:	4681      	mov	r9, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006dc8:	0028      	movs	r0, r5
 8006dca:	f006 fd2d 	bl	800d828 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006dce:	f00b fcd8 	bl	8012782 <atol>
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	9303      	str	r3, [sp, #12]
 8006dd6:	464b      	mov	r3, r9
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006dd8:	0005      	movs	r5, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006dda:	9002      	str	r0, [sp, #8]
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	9400      	str	r4, [sp, #0]
 8006de0:	9b08      	ldr	r3, [sp, #32]
 8006de2:	465a      	mov	r2, fp
 8006de4:	9907      	ldr	r1, [sp, #28]
 8006de6:	0030      	movs	r0, r6
 8006de8:	f002 fe5c 	bl	8009aa4 <StartScastDMAStream>
	if(result == BOS_OK){
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d00e      	beq.n	8006e0e <scastCommand+0x15a>
}
 8006df0:	2000      	movs	r0, #0
 8006df2:	b01b      	add	sp, #108	; 0x6c
 8006df4:	bc3c      	pop	{r2, r3, r4, r5}
 8006df6:	4690      	mov	r8, r2
 8006df8:	4699      	mov	r9, r3
 8006dfa:	46a2      	mov	sl, r4
 8006dfc:	46ab      	mov	fp, r5
 8006dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006e00:	b672      	cpsid	i
 8006e02:	e7fe      	b.n	8006e02 <scastCommand+0x14e>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006e04:	3001      	adds	r0, #1
 8006e06:	f00b fcbc 	bl	8012782 <atol>
 8006e0a:	b2c6      	uxtb	r6, r0
 8006e0c:	e785      	b.n	8006d1a <scastCommand+0x66>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006e0e:	464b      	mov	r3, r9
 8006e10:	9303      	str	r3, [sp, #12]
 8006e12:	4643      	mov	r3, r8
 8006e14:	9302      	str	r3, [sp, #8]
 8006e16:	465b      	mov	r3, fp
 8006e18:	9504      	str	r5, [sp, #16]
 8006e1a:	9301      	str	r3, [sp, #4]
 8006e1c:	9700      	str	r7, [sp, #0]
 8006e1e:	0033      	movs	r3, r6
 8006e20:	aa17      	add	r2, sp, #92	; 0x5c
 8006e22:	4908      	ldr	r1, [pc, #32]	; (8006e44 <scastCommand+0x190>)
 8006e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e26:	f00c f96f 	bl	8013108 <sprintf>
 8006e2a:	e7e1      	b.n	8006df0 <scastCommand+0x13c>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	f00b fca8 	bl	8012782 <atol>
 8006e32:	b2c3      	uxtb	r3, r0
 8006e34:	469b      	mov	fp, r3
 8006e36:	e78a      	b.n	8006d4e <scastCommand+0x9a>
 8006e38:	08018ed0 	.word	0x08018ed0
 8006e3c:	08018ed8 	.word	0x08018ed8
 8006e40:	08018ee4 	.word	0x08018ee4
 8006e44:	08018ef4 	.word	0x08018ef4

08006e48 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e4a:	0004      	movs	r4, r0
 8006e4c:	b083      	sub	sp, #12
	configASSERT(pcWriteBuffer);
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d041      	beq.n	8006ed6 <infoCommand+0x8e>
	if(N > 1)
 8006e52:	4d22      	ldr	r5, [pc, #136]	; (8006edc <infoCommand+0x94>)
	BOS_Status result =BOS_OK;
 8006e54:	2700      	movs	r7, #0
	if(N > 1)
 8006e56:	782a      	ldrb	r2, [r5, #0]
 8006e58:	2a01      	cmp	r2, #1
 8006e5a:	d903      	bls.n	8006e64 <infoCommand+0x1c>
		result =ReadPortsDir();
 8006e5c:	f7fd fb18 	bl	8004490 <ReadPortsDir>
 8006e60:	0007      	movs	r7, r0
 8006e62:	782a      	ldrb	r2, [r5, #0]
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006e64:	491e      	ldr	r1, [pc, #120]	; (8006ee0 <infoCommand+0x98>)
 8006e66:	0020      	movs	r0, r4
 8006e68:	f00c f94e 	bl	8013108 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e6c:	2601      	movs	r6, #1
 8006e6e:	0020      	movs	r0, r4
 8006e70:	f7f9 f952 	bl	8000118 <strlen>
 8006e74:	4d1b      	ldr	r5, [pc, #108]	; (8006ee4 <infoCommand+0x9c>)
 8006e76:	4276      	negs	r6, r6
 8006e78:	b282      	uxth	r2, r0
 8006e7a:	2332      	movs	r3, #50	; 0x32
 8006e7c:	7828      	ldrb	r0, [r5, #0]
 8006e7e:	0021      	movs	r1, r4
 8006e80:	9600      	str	r6, [sp, #0]
 8006e82:	f006 fa75 	bl	800d370 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006e86:	2213      	movs	r2, #19
 8006e88:	4917      	ldr	r1, [pc, #92]	; (8006ee8 <infoCommand+0xa0>)
 8006e8a:	0020      	movs	r0, r4
 8006e8c:	f00b ff39 	bl	8012d02 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e90:	7828      	ldrb	r0, [r5, #0]
 8006e92:	2332      	movs	r3, #50	; 0x32
 8006e94:	2212      	movs	r2, #18
 8006e96:	0021      	movs	r1, r4
 8006e98:	9600      	str	r6, [sp, #0]
 8006e9a:	f006 fa69 	bl	800d370 <writePxMutex>
	DisplayTopology(PcPort);
 8006e9e:	7828      	ldrb	r0, [r5, #0]
 8006ea0:	f7fc fedc 	bl	8003c5c <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006ea4:	7828      	ldrb	r0, [r5, #0]
 8006ea6:	f7fc ffad 	bl	8003e04 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006eaa:	2f02      	cmp	r7, #2
 8006eac:	d10b      	bne.n	8006ec6 <infoCommand+0x7e>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006eae:	2244      	movs	r2, #68	; 0x44
 8006eb0:	490e      	ldr	r1, [pc, #56]	; (8006eec <infoCommand+0xa4>)
 8006eb2:	0020      	movs	r0, r4
 8006eb4:	f00b ff25 	bl	8012d02 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006eb8:	7828      	ldrb	r0, [r5, #0]
 8006eba:	2332      	movs	r3, #50	; 0x32
 8006ebc:	9600      	str	r6, [sp, #0]
 8006ebe:	2243      	movs	r2, #67	; 0x43
 8006ec0:	0021      	movs	r1, r4
 8006ec2:	f006 fa55 	bl	800d370 <writePxMutex>
	sprintf((char* )pcWriteBuffer," ");
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	4909      	ldr	r1, [pc, #36]	; (8006ef0 <infoCommand+0xa8>)
 8006eca:	0020      	movs	r0, r4
 8006ecc:	f00b ff19 	bl	8012d02 <memcpy>
}
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	b003      	add	sp, #12
 8006ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006ed6:	b672      	cpsid	i
 8006ed8:	e7fe      	b.n	8006ed8 <infoCommand+0x90>
 8006eda:	46c0      	nop			; (mov r8, r8)
 8006edc:	20000008 	.word	0x20000008
 8006ee0:	08018f7c 	.word	0x08018f7c
 8006ee4:	20000c28 	.word	0x20000c28
 8006ee8:	08018f98 	.word	0x08018f98
 8006eec:	08018fac 	.word	0x08018fac
 8006ef0:	08017db0 	.word	0x08017db0

08006ef4 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ef4:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	d101      	bne.n	8006efe <statusCommand+0xa>
 8006efa:	b672      	cpsid	i
 8006efc:	e7fe      	b.n	8006efc <statusCommand+0x8>
	DisplayModuleStatus(0);
 8006efe:	2000      	movs	r0, #0
 8006f00:	f7fc fffa 	bl	8003ef8 <DisplayModuleStatus>
}
 8006f04:	2000      	movs	r0, #0
 8006f06:	bd10      	pop	{r4, pc}

08006f08 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f0a:	464e      	mov	r6, r9
 8006f0c:	46de      	mov	lr, fp
 8006f0e:	4645      	mov	r5, r8
 8006f10:	4657      	mov	r7, sl
 8006f12:	b5e0      	push	{r5, r6, r7, lr}
 8006f14:	b08f      	sub	sp, #60	; 0x3c
	char module[MaxLengthOfAlias + 30] ={0};
 8006f16:	ae04      	add	r6, sp, #16
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f18:	0005      	movs	r5, r0
	char module[MaxLengthOfAlias + 30] ={0};
 8006f1a:	2100      	movs	r1, #0
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f1c:	4691      	mov	r9, r2
	char module[MaxLengthOfAlias + 30] ={0};
 8006f1e:	0030      	movs	r0, r6
 8006f20:	2227      	movs	r2, #39	; 0x27
 8006f22:	f00b fef7 	bl	8012d14 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006f26:	220a      	movs	r2, #10
 8006f28:	2100      	movs	r1, #0
 8006f2a:	a801      	add	r0, sp, #4
 8006f2c:	f00b fef2 	bl	8012d14 <memset>
	configASSERT(pcWriteBuffer);
 8006f30:	2d00      	cmp	r5, #0
 8006f32:	d063      	beq.n	8006ffc <groupCommand+0xf4>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006f34:	4c54      	ldr	r4, [pc, #336]	; (8007088 <groupCommand+0x180>)
 8006f36:	2101      	movs	r1, #1
 8006f38:	0022      	movs	r2, r4
 8006f3a:	4648      	mov	r0, r9
 8006f3c:	3250      	adds	r2, #80	; 0x50
 8006f3e:	f006 fc73 	bl	800d828 <FreeRTOS_CLIGetParameter>
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006f42:	6d22      	ldr	r2, [r4, #80]	; 0x50
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006f44:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006f46:	a801      	add	r0, sp, #4
 8006f48:	f00c f933 	bl	80131b2 <strncpy>
 8006f4c:	2364      	movs	r3, #100	; 0x64
 8006f4e:	4698      	mov	r8, r3
 8006f50:	4f4e      	ldr	r7, [pc, #312]	; (800708c <groupCommand+0x184>)
 8006f52:	44b8      	add	r8, r7
		if(!strcmp(alias,groupAlias[i])){
 8006f54:	0039      	movs	r1, r7
 8006f56:	a801      	add	r0, sp, #4
 8006f58:	f7f9 f8d4 	bl	8000104 <strcmp>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d04a      	beq.n	8006ff6 <groupCommand+0xee>
 8006f60:	370a      	adds	r7, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006f62:	45b8      	cmp	r8, r7
 8006f64:	d1f6      	bne.n	8006f54 <groupCommand+0x4c>
	type =1;
 8006f66:	2301      	movs	r3, #1
 8006f68:	469a      	mov	sl, r3
	count =2;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	2754      	movs	r7, #84	; 0x54
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006f6e:	220a      	movs	r2, #10
 8006f70:	4947      	ldr	r1, [pc, #284]	; (8007090 <groupCommand+0x188>)
 8006f72:	0028      	movs	r0, r5
	count =2;
 8006f74:	55e3      	strb	r3, [r4, r7]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006f76:	f00b fec4 	bl	8012d02 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006f7a:	0022      	movs	r2, r4
 8006f7c:	2102      	movs	r1, #2
 8006f7e:	3258      	adds	r2, #88	; 0x58
 8006f80:	4648      	mov	r0, r9
 8006f82:	f006 fc51 	bl	800d828 <FreeRTOS_CLIGetParameter>
 8006f86:	65e0      	str	r0, [r4, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d039      	beq.n	8007000 <groupCommand+0xf8>
		module[xParameterStringLength] ='\0';
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	469b      	mov	fp, r3
		if(count > 2)
 8006f90:	3354      	adds	r3, #84	; 0x54
 8006f92:	4698      	mov	r8, r3
 8006f94:	e00f      	b.n	8006fb6 <groupCommand+0xae>
		strcat((char* )pcWriteBuffer,module);
 8006f96:	0031      	movs	r1, r6
 8006f98:	0028      	movs	r0, r5
 8006f9a:	f00c f8d5 	bl	8013148 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006f9e:	0022      	movs	r2, r4
 8006fa0:	4643      	mov	r3, r8
 8006fa2:	1c79      	adds	r1, r7, #1
 8006fa4:	b249      	sxtb	r1, r1
 8006fa6:	3258      	adds	r2, #88	; 0x58
 8006fa8:	4648      	mov	r0, r9
 8006faa:	54e1      	strb	r1, [r4, r3]
 8006fac:	f006 fc3c 	bl	800d828 <FreeRTOS_CLIGetParameter>
 8006fb0:	65e0      	str	r0, [r4, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d03c      	beq.n	8007030 <groupCommand+0x128>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006fb6:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8006fb8:	0001      	movs	r1, r0
 8006fba:	003a      	movs	r2, r7
 8006fbc:	0030      	movs	r0, r6
 8006fbe:	f00c f8f8 	bl	80131b2 <strncpy>
		module[xParameterStringLength] ='\0';
 8006fc2:	465b      	mov	r3, fp
		modID =GetID(module);
 8006fc4:	0030      	movs	r0, r6
		module[xParameterStringLength] ='\0';
 8006fc6:	55f3      	strb	r3, [r6, r7]
		modID =GetID(module);
 8006fc8:	f7fd f90a 	bl	80041e0 <GetID>
		if(modID < 0)
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	db49      	blt.n	8007064 <groupCommand+0x15c>
		result =AddModuleToGroup(modID,alias);
 8006fd0:	b2c0      	uxtb	r0, r0
 8006fd2:	a901      	add	r1, sp, #4
 8006fd4:	f7fd f9ce 	bl	8004374 <AddModuleToGroup>
		if(result != BOS_OK)
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d133      	bne.n	8007044 <groupCommand+0x13c>
		if(count > 2)
 8006fdc:	4643      	mov	r3, r8
 8006fde:	56e7      	ldrsb	r7, [r4, r3]
 8006fe0:	2f02      	cmp	r7, #2
 8006fe2:	ddd8      	ble.n	8006f96 <groupCommand+0x8e>
			strcat((char* )pcWriteBuffer,", ");
 8006fe4:	0028      	movs	r0, r5
 8006fe6:	f7f9 f897 	bl	8000118 <strlen>
 8006fea:	2203      	movs	r2, #3
 8006fec:	1828      	adds	r0, r5, r0
 8006fee:	4929      	ldr	r1, [pc, #164]	; (8007094 <groupCommand+0x18c>)
 8006ff0:	f00b fe87 	bl	8012d02 <memcpy>
 8006ff4:	e7cf      	b.n	8006f96 <groupCommand+0x8e>
			type =0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	469a      	mov	sl, r3
 8006ffa:	e7b6      	b.n	8006f6a <groupCommand+0x62>
	configASSERT(pcWriteBuffer);
 8006ffc:	b672      	cpsid	i
 8006ffe:	e7fe      	b.n	8006ffe <groupCommand+0xf6>
	else if(count == 2)
 8007000:	57e3      	ldrsb	r3, [r4, r7]
 8007002:	2b02      	cmp	r3, #2
 8007004:	d018      	beq.n	8007038 <groupCommand+0x130>
	else if(result == BOS_OK && type){
 8007006:	4653      	mov	r3, sl
		sprintf(module,(char* )pcMessageOKnew,alias);
 8007008:	aa01      	add	r2, sp, #4
 800700a:	4923      	ldr	r1, [pc, #140]	; (8007098 <groupCommand+0x190>)
	else if(result == BOS_OK && type){
 800700c:	2b00      	cmp	r3, #0
 800700e:	d100      	bne.n	8007012 <groupCommand+0x10a>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8007010:	4922      	ldr	r1, [pc, #136]	; (800709c <groupCommand+0x194>)
 8007012:	0030      	movs	r0, r6
 8007014:	f00c f878 	bl	8013108 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8007018:	0031      	movs	r1, r6
 800701a:	0028      	movs	r0, r5
 800701c:	f00c f894 	bl	8013148 <strcat>
}
 8007020:	2000      	movs	r0, #0
 8007022:	b00f      	add	sp, #60	; 0x3c
 8007024:	bc3c      	pop	{r2, r3, r4, r5}
 8007026:	4690      	mov	r8, r2
 8007028:	4699      	mov	r9, r3
 800702a:	46a2      	mov	sl, r4
 800702c:	46ab      	mov	fp, r5
 800702e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8007030:	4643      	mov	r3, r8
 8007032:	56e3      	ldrsb	r3, [r4, r3]
 8007034:	2b02      	cmp	r3, #2
 8007036:	d1e6      	bne.n	8007006 <groupCommand+0xfe>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8007038:	aa01      	add	r2, sp, #4
 800703a:	4919      	ldr	r1, [pc, #100]	; (80070a0 <groupCommand+0x198>)
 800703c:	0028      	movs	r0, r5
 800703e:	f00c f863 	bl	8013108 <sprintf>
 8007042:	e7ed      	b.n	8007020 <groupCommand+0x118>
	else if(count == 2)
 8007044:	2354      	movs	r3, #84	; 0x54
 8007046:	56e3      	ldrsb	r3, [r4, r3]
 8007048:	2b02      	cmp	r3, #2
 800704a:	d0f5      	beq.n	8007038 <groupCommand+0x130>
	else if(result == BOS_ERR_Keyword)
 800704c:	2806      	cmp	r0, #6
 800704e:	d015      	beq.n	800707c <groupCommand+0x174>
	else if(result == BOS_ERR_ExistingAlias)
 8007050:	2807      	cmp	r0, #7
 8007052:	d00d      	beq.n	8007070 <groupCommand+0x168>
	else if(result == BOS_ERR_ExistingCmd)
 8007054:	2808      	cmp	r0, #8
 8007056:	d1e3      	bne.n	8007020 <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8007058:	aa01      	add	r2, sp, #4
 800705a:	4912      	ldr	r1, [pc, #72]	; (80070a4 <groupCommand+0x19c>)
 800705c:	0028      	movs	r0, r5
 800705e:	f00c f853 	bl	8013108 <sprintf>
 8007062:	e7dd      	b.n	8007020 <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8007064:	0032      	movs	r2, r6
 8007066:	4910      	ldr	r1, [pc, #64]	; (80070a8 <groupCommand+0x1a0>)
 8007068:	0028      	movs	r0, r5
 800706a:	f00c f84d 	bl	8013108 <sprintf>
	return pdFALSE;
 800706e:	e7d7      	b.n	8007020 <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8007070:	aa01      	add	r2, sp, #4
 8007072:	490e      	ldr	r1, [pc, #56]	; (80070ac <groupCommand+0x1a4>)
 8007074:	0028      	movs	r0, r5
 8007076:	f00c f847 	bl	8013108 <sprintf>
 800707a:	e7d1      	b.n	8007020 <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 800707c:	aa01      	add	r2, sp, #4
 800707e:	490c      	ldr	r1, [pc, #48]	; (80070b0 <groupCommand+0x1a8>)
 8007080:	0028      	movs	r0, r5
 8007082:	f00c f841 	bl	8013108 <sprintf>
 8007086:	e7cb      	b.n	8007020 <groupCommand+0x118>
 8007088:	20001280 	.word	0x20001280
 800708c:	20000ad0 	.word	0x20000ad0
 8007090:	08018ff0 	.word	0x08018ff0
 8007094:	08018ffc 	.word	0x08018ffc
 8007098:	0801902c 	.word	0x0801902c
 800709c:	08019048 	.word	0x08019048
 80070a0:	08019000 	.word	0x08019000
 80070a4:	080190dc 	.word	0x080190dc
 80070a8:	0801911c 	.word	0x0801911c
 80070ac:	080190a8 	.word	0x080190a8
 80070b0:	08019068 	.word	0x08019068

080070b4 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070b4:	b570      	push	{r4, r5, r6, lr}
 80070b6:	0005      	movs	r5, r0
 80070b8:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 80070ba:	2d00      	cmp	r5, #0
 80070bc:	d01a      	beq.n	80070f4 <nameCommand+0x40>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070be:	4c1b      	ldr	r4, [pc, #108]	; (800712c <nameCommand+0x78>)
 80070c0:	2101      	movs	r1, #1
 80070c2:	0022      	movs	r2, r4
 80070c4:	3260      	adds	r2, #96	; 0x60
 80070c6:	f006 fbaf 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(xParameterStringLength1 > MaxLengthOfAlias){
 80070ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070cc:	0001      	movs	r1, r0
 80070ce:	6660      	str	r0, [r4, #100]	; 0x64
	if(xParameterStringLength1 > MaxLengthOfAlias){
 80070d0:	2b09      	cmp	r3, #9
 80070d2:	dd01      	ble.n	80070d8 <nameCommand+0x24>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 80070d4:	2300      	movs	r3, #0
 80070d6:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 80070d8:	4e15      	ldr	r6, [pc, #84]	; (8007130 <nameCommand+0x7c>)
 80070da:	7830      	ldrb	r0, [r6, #0]
 80070dc:	f7fd f8e0 	bl	80042a0 <NameModule>
	if(result == BOS_OK)
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d009      	beq.n	80070f8 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 80070e4:	2806      	cmp	r0, #6
 80070e6:	d01a      	beq.n	800711e <nameCommand+0x6a>
	else if(result == BOS_ERR_ExistingAlias)
 80070e8:	2807      	cmp	r0, #7
 80070ea:	d012      	beq.n	8007112 <nameCommand+0x5e>
	else if(result == BOS_ERR_ExistingCmd)
 80070ec:	2808      	cmp	r0, #8
 80070ee:	d00a      	beq.n	8007106 <nameCommand+0x52>
}
 80070f0:	2000      	movs	r0, #0
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80070f4:	b672      	cpsid	i
 80070f6:	e7fe      	b.n	80070f6 <nameCommand+0x42>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 80070f8:	7832      	ldrb	r2, [r6, #0]
 80070fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070fc:	490d      	ldr	r1, [pc, #52]	; (8007134 <nameCommand+0x80>)
 80070fe:	0028      	movs	r0, r5
 8007100:	f00c f802 	bl	8013108 <sprintf>
 8007104:	e7f4      	b.n	80070f0 <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8007106:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007108:	490b      	ldr	r1, [pc, #44]	; (8007138 <nameCommand+0x84>)
 800710a:	0028      	movs	r0, r5
 800710c:	f00b fffc 	bl	8013108 <sprintf>
 8007110:	e7ee      	b.n	80070f0 <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8007112:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007114:	4909      	ldr	r1, [pc, #36]	; (800713c <nameCommand+0x88>)
 8007116:	0028      	movs	r0, r5
 8007118:	f00b fff6 	bl	8013108 <sprintf>
 800711c:	e7e8      	b.n	80070f0 <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 800711e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007120:	4907      	ldr	r1, [pc, #28]	; (8007140 <nameCommand+0x8c>)
 8007122:	0028      	movs	r0, r5
 8007124:	f00b fff0 	bl	8013108 <sprintf>
 8007128:	e7e2      	b.n	80070f0 <nameCommand+0x3c>
 800712a:	46c0      	nop			; (mov r8, r8)
 800712c:	20001280 	.word	0x20001280
 8007130:	20000a98 	.word	0x20000a98
 8007134:	08019140 	.word	0x08019140
 8007138:	080190dc 	.word	0x080190dc
 800713c:	080190a8 	.word	0x080190a8
 8007140:	08019068 	.word	0x08019068

08007144 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007146:	46c6      	mov	lr, r8
 8007148:	b500      	push	{lr}
 800714a:	0005      	movs	r5, r0
 800714c:	b082      	sub	sp, #8
 800714e:	4690      	mov	r8, r2
	configASSERT(pcWriteBuffer);
 8007150:	2800      	cmp	r0, #0
 8007152:	d018      	beq.n	8007186 <bootloaderUpdateCommand+0x42>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007154:	4c4d      	ldr	r4, [pc, #308]	; (800728c <bootloaderUpdateCommand+0x148>)
 8007156:	2101      	movs	r1, #1
 8007158:	0022      	movs	r2, r4
 800715a:	4640      	mov	r0, r8
 800715c:	3268      	adds	r2, #104	; 0x68
 800715e:	f006 fb63 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8007162:	2800      	cmp	r0, #0
 8007164:	d048      	beq.n	80071f8 <bootloaderUpdateCommand+0xb4>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8007166:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007168:	4949      	ldr	r1, [pc, #292]	; (8007290 <bootloaderUpdateCommand+0x14c>)
 800716a:	f00c f811 	bl	8013190 <strncmp>
 800716e:	2800      	cmp	r0, #0
 8007170:	d00b      	beq.n	800718a <bootloaderUpdateCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8007172:	220f      	movs	r2, #15
 8007174:	4947      	ldr	r1, [pc, #284]	; (8007294 <bootloaderUpdateCommand+0x150>)
 8007176:	0028      	movs	r0, r5
 8007178:	f00b fdc3 	bl	8012d02 <memcpy>
}
 800717c:	2000      	movs	r0, #0
 800717e:	b002      	add	sp, #8
 8007180:	bc04      	pop	{r2}
 8007182:	4690      	mov	r8, r2
 8007184:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8007186:	b672      	cpsid	i
 8007188:	e7fe      	b.n	8007188 <bootloaderUpdateCommand+0x44>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800718a:	0022      	movs	r2, r4
 800718c:	2102      	movs	r1, #2
 800718e:	326c      	adds	r2, #108	; 0x6c
 8007190:	4640      	mov	r0, r8
 8007192:	f006 fb49 	bl	800d828 <FreeRTOS_CLIGetParameter>
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007196:	0022      	movs	r2, r4
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007198:	6720      	str	r0, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800719a:	3274      	adds	r2, #116	; 0x74
 800719c:	2103      	movs	r1, #3
 800719e:	4640      	mov	r0, r8
 80071a0:	f006 fb42 	bl	800d828 <FreeRTOS_CLIGetParameter>
			if(pcParameterString2[0] == '#'){
 80071a4:	2200      	movs	r2, #0
				result =BOS_ERR_WrongValue;
 80071a6:	2168      	movs	r1, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 80071a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80071aa:	67a0      	str	r0, [r4, #120]	; 0x78
			if(pcParameterString2[0] == '#'){
 80071ac:	569a      	ldrsb	r2, [r3, r2]
				result =BOS_ERR_WrongValue;
 80071ae:	4688      	mov	r8, r1
			if(pcParameterString2[0] == '#'){
 80071b0:	2a23      	cmp	r2, #35	; 0x23
 80071b2:	d062      	beq.n	800727a <bootloaderUpdateCommand+0x136>
			if(pcParameterString3[0] == 'p'){
 80071b4:	2300      	movs	r3, #0
 80071b6:	56c3      	ldrsb	r3, [r0, r3]
 80071b8:	2b70      	cmp	r3, #112	; 0x70
 80071ba:	d059      	beq.n	8007270 <bootloaderUpdateCommand+0x12c>
				result =BOS_ERR_WrongValue;
 80071bc:	2368      	movs	r3, #104	; 0x68
 80071be:	4698      	mov	r8, r3
			if(module != myID){
 80071c0:	4c35      	ldr	r4, [pc, #212]	; (8007298 <bootloaderUpdateCommand+0x154>)
 80071c2:	7823      	ldrb	r3, [r4, #0]
 80071c4:	42bb      	cmp	r3, r7
 80071c6:	d041      	beq.n	800724c <bootloaderUpdateCommand+0x108>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80071c8:	2200      	movs	r2, #0
 80071ca:	4b34      	ldr	r3, [pc, #208]	; (800729c <bootloaderUpdateCommand+0x158>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80071cc:	211a      	movs	r1, #26
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80071ce:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 80071d0:	4b33      	ldr	r3, [pc, #204]	; (80072a0 <bootloaderUpdateCommand+0x15c>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80071d2:	3201      	adds	r2, #1
 80071d4:	0038      	movs	r0, r7
				messageParams[0] =port;
 80071d6:	701e      	strb	r6, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80071d8:	f002 fc40 	bl	8009a5c <SendMessageToModule>
				osDelay(100);
 80071dc:	2064      	movs	r0, #100	; 0x64
 80071de:	f006 fa13 	bl	800d608 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 80071e2:	4b30      	ldr	r3, [pc, #192]	; (80072a4 <bootloaderUpdateCommand+0x160>)
 80071e4:	7820      	ldrb	r0, [r4, #0]
 80071e6:	781a      	ldrb	r2, [r3, #0]
 80071e8:	0039      	movs	r1, r7
 80071ea:	0033      	movs	r3, r6
 80071ec:	f7fc fca8 	bl	8003b40 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 80071f0:	4643      	mov	r3, r8
 80071f2:	2b68      	cmp	r3, #104	; 0x68
 80071f4:	d1c2      	bne.n	800717c <bootloaderUpdateCommand+0x38>
 80071f6:	e7bc      	b.n	8007172 <bootloaderUpdateCommand+0x2e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 80071f8:	4b27      	ldr	r3, [pc, #156]	; (8007298 <bootloaderUpdateCommand+0x154>)
 80071fa:	492b      	ldr	r1, [pc, #172]	; (80072a8 <bootloaderUpdateCommand+0x164>)
 80071fc:	781a      	ldrb	r2, [r3, #0]
 80071fe:	0028      	movs	r0, r5
 8007200:	f00b ff82 	bl	8013108 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8007204:	4b29      	ldr	r3, [pc, #164]	; (80072ac <bootloaderUpdateCommand+0x168>)
 8007206:	0028      	movs	r0, r5
 8007208:	6819      	ldr	r1, [r3, #0]
 800720a:	f00b ff9d 	bl	8013148 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800720e:	0028      	movs	r0, r5
 8007210:	f7f8 ff82 	bl	8000118 <strlen>
 8007214:	4b23      	ldr	r3, [pc, #140]	; (80072a4 <bootloaderUpdateCommand+0x160>)
 8007216:	b282      	uxth	r2, r0
 8007218:	7818      	ldrb	r0, [r3, #0]
 800721a:	2301      	movs	r3, #1
 800721c:	425b      	negs	r3, r3
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	0029      	movs	r1, r5
 8007222:	3333      	adds	r3, #51	; 0x33
 8007224:	f006 f8a4 	bl	800d370 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8007228:	4b21      	ldr	r3, [pc, #132]	; (80072b0 <bootloaderUpdateCommand+0x16c>)
 800722a:	4a22      	ldr	r2, [pc, #136]	; (80072b4 <bootloaderUpdateCommand+0x170>)
		osDelay(10);
 800722c:	200a      	movs	r0, #10
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800722e:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8007230:	2201      	movs	r2, #1
 8007232:	4b21      	ldr	r3, [pc, #132]	; (80072b8 <bootloaderUpdateCommand+0x174>)
 8007234:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8007236:	f006 f9e7 	bl	800d608 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	4b1f      	ldr	r3, [pc, #124]	; (80072bc <bootloaderUpdateCommand+0x178>)
 8007240:	4a1f      	ldr	r2, [pc, #124]	; (80072c0 <bootloaderUpdateCommand+0x17c>)
 8007242:	60da      	str	r2, [r3, #12]
 8007244:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007248:	46c0      	nop			; (mov r8, r8)
 800724a:	e7fd      	b.n	8007248 <bootloaderUpdateCommand+0x104>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 800724c:	2100      	movs	r1, #0
 800724e:	2319      	movs	r3, #25
 8007250:	9100      	str	r1, [sp, #0]
 8007252:	000a      	movs	r2, r1
 8007254:	0030      	movs	r0, r6
 8007256:	f002 f9a1 	bl	800959c <SendMessageFromPort>
				osDelay(100);
 800725a:	2064      	movs	r0, #100	; 0x64
 800725c:	f006 f9d4 	bl	800d608 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8007260:	7820      	ldrb	r0, [r4, #0]
 8007262:	4b10      	ldr	r3, [pc, #64]	; (80072a4 <bootloaderUpdateCommand+0x160>)
 8007264:	0001      	movs	r1, r0
 8007266:	781a      	ldrb	r2, [r3, #0]
 8007268:	0033      	movs	r3, r6
 800726a:	f7fc fc69 	bl	8003b40 <remoteBootloaderUpdate>
 800726e:	e7bf      	b.n	80071f0 <bootloaderUpdateCommand+0xac>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007270:	3001      	adds	r0, #1
 8007272:	f00b fa86 	bl	8012782 <atol>
 8007276:	b2c6      	uxtb	r6, r0
 8007278:	e7a2      	b.n	80071c0 <bootloaderUpdateCommand+0x7c>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800727a:	1c58      	adds	r0, r3, #1
 800727c:	f00b fa81 	bl	8012782 <atol>
	BOS_Status result =BOS_OK;
 8007280:	2300      	movs	r3, #0
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8007282:	b2c7      	uxtb	r7, r0
	BOS_Status result =BOS_OK;
 8007284:	4698      	mov	r8, r3
 8007286:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007288:	e794      	b.n	80071b4 <bootloaderUpdateCommand+0x70>
 800728a:	46c0      	nop			; (mov r8, r8)
 800728c:	20001280 	.word	0x20001280
 8007290:	08019178 	.word	0x08019178
 8007294:	08018bf0 	.word	0x08018bf0
 8007298:	20000a98 	.word	0x20000a98
 800729c:	20006e28 	.word	0x20006e28
 80072a0:	20000b3c 	.word	0x20000b3c
 80072a4:	20000c28 	.word	0x20000c28
 80072a8:	08019158 	.word	0x08019158
 80072ac:	20000084 	.word	0x20000084
 80072b0:	20007ff0 	.word	0x20007ff0
 80072b4:	deadbeef 	.word	0xdeadbeef
 80072b8:	2000117e 	.word	0x2000117e
 80072bc:	e000ed00 	.word	0xe000ed00
 80072c0:	05fa0004 	.word	0x05fa0004

080072c4 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80072c4:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d01f      	beq.n	800730a <pingCommand+0x46>
	if(!moduleAlias[myID][0])
 80072ca:	4b13      	ldr	r3, [pc, #76]	; (8007318 <pingCommand+0x54>)
 80072cc:	4913      	ldr	r1, [pc, #76]	; (800731c <pingCommand+0x58>)
 80072ce:	781a      	ldrb	r2, [r3, #0]
 80072d0:	0093      	lsls	r3, r2, #2
 80072d2:	189b      	adds	r3, r3, r2
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	5c5c      	ldrb	r4, [r3, r1]
 80072d8:	2c00      	cmp	r4, #0
 80072da:	d018      	beq.n	800730e <pingCommand+0x4a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80072dc:	185b      	adds	r3, r3, r1
 80072de:	4910      	ldr	r1, [pc, #64]	; (8007320 <pingCommand+0x5c>)
 80072e0:	f00b ff12 	bl	8013108 <sprintf>
	RTOS_IND_blink(200);
 80072e4:	2180      	movs	r1, #128	; 0x80
 80072e6:	2090      	movs	r0, #144	; 0x90
 80072e8:	2201      	movs	r2, #1
 80072ea:	0109      	lsls	r1, r1, #4
 80072ec:	05c0      	lsls	r0, r0, #23
 80072ee:	f009 fdab 	bl	8010e48 <HAL_GPIO_WritePin>
 80072f2:	20c8      	movs	r0, #200	; 0xc8
 80072f4:	f006 f988 	bl	800d608 <osDelay>
 80072f8:	2180      	movs	r1, #128	; 0x80
 80072fa:	2090      	movs	r0, #144	; 0x90
 80072fc:	2200      	movs	r2, #0
 80072fe:	0109      	lsls	r1, r1, #4
 8007300:	05c0      	lsls	r0, r0, #23
 8007302:	f009 fda1 	bl	8010e48 <HAL_GPIO_WritePin>
}
 8007306:	2000      	movs	r0, #0
 8007308:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800730a:	b672      	cpsid	i
 800730c:	e7fe      	b.n	800730c <pingCommand+0x48>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 800730e:	4905      	ldr	r1, [pc, #20]	; (8007324 <pingCommand+0x60>)
 8007310:	f00b fefa 	bl	8013108 <sprintf>
 8007314:	e7e6      	b.n	80072e4 <pingCommand+0x20>
 8007316:	46c0      	nop			; (mov r8, r8)
 8007318:	20000a98 	.word	0x20000a98
 800731c:	20000dfc 	.word	0x20000dfc
 8007320:	08019190 	.word	0x08019190
 8007324:	0801917c 	.word	0x0801917c

08007328 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007328:	b510      	push	{r4, lr}
 800732a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800732c:	d101      	bne.n	8007332 <prvRunTimeStatsCommand+0xa>
 800732e:	b672      	cpsid	i
 8007330:	e7fe      	b.n	8007330 <prvRunTimeStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007332:	2241      	movs	r2, #65	; 0x41
 8007334:	4904      	ldr	r1, [pc, #16]	; (8007348 <prvRunTimeStatsCommand+0x20>)
 8007336:	f00b fce4 	bl	8012d02 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 800733a:	0020      	movs	r0, r4
 800733c:	3040      	adds	r0, #64	; 0x40
 800733e:	f007 fc6d 	bl	800ec1c <vTaskGetRunTimeStats>
}
 8007342:	2000      	movs	r0, #0
 8007344:	bd10      	pop	{r4, pc}
 8007346:	46c0      	nop			; (mov r8, r8)
 8007348:	080191ac 	.word	0x080191ac

0800734c <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800734c:	b510      	push	{r4, lr}
 800734e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007350:	d101      	bne.n	8007356 <prvTaskStatsCommand+0xa>
 8007352:	b672      	cpsid	i
 8007354:	e7fe      	b.n	8007354 <prvTaskStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007356:	2250      	movs	r2, #80	; 0x50
 8007358:	4904      	ldr	r1, [pc, #16]	; (800736c <prvTaskStatsCommand+0x20>)
 800735a:	f00b fcd2 	bl	8012d02 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 800735e:	0020      	movs	r0, r4
 8007360:	304f      	adds	r0, #79	; 0x4f
 8007362:	f007 fc01 	bl	800eb68 <vTaskList>
}
 8007366:	2000      	movs	r0, #0
 8007368:	bd10      	pop	{r4, pc}
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	080191f0 	.word	0x080191f0

08007370 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007374:	d023      	beq.n	80073be <uuidCommand+0x4e>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8007376:	220e      	movs	r2, #14
 8007378:	4912      	ldr	r1, [pc, #72]	; (80073c4 <uuidCommand+0x54>)
 800737a:	f00b fcc2 	bl	8012d02 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 800737e:	4d12      	ldr	r5, [pc, #72]	; (80073c8 <uuidCommand+0x58>)
 8007380:	4b12      	ldr	r3, [pc, #72]	; (80073cc <uuidCommand+0x5c>)
 8007382:	0029      	movs	r1, r5
 8007384:	0022      	movs	r2, r4
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	0020      	movs	r0, r4
 800738a:	f00b febd 	bl	8013108 <sprintf>
 800738e:	4b10      	ldr	r3, [pc, #64]	; (80073d0 <uuidCommand+0x60>)
 8007390:	0029      	movs	r1, r5
 8007392:	0022      	movs	r2, r4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	0020      	movs	r0, r4
 8007398:	f00b feb6 	bl	8013108 <sprintf>
 800739c:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <uuidCommand+0x64>)
 800739e:	0029      	movs	r1, r5
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	0022      	movs	r2, r4
 80073a4:	0020      	movs	r0, r4
 80073a6:	f00b feaf 	bl	8013108 <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 80073aa:	0020      	movs	r0, r4
 80073ac:	f7f8 feb4 	bl	8000118 <strlen>
 80073b0:	2203      	movs	r2, #3
 80073b2:	1820      	adds	r0, r4, r0
 80073b4:	4908      	ldr	r1, [pc, #32]	; (80073d8 <uuidCommand+0x68>)
 80073b6:	f00b fca4 	bl	8012d02 <memcpy>
}
 80073ba:	2000      	movs	r0, #0
 80073bc:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80073be:	b672      	cpsid	i
 80073c0:	e7fe      	b.n	80073c0 <uuidCommand+0x50>
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	08019240 	.word	0x08019240
 80073c8:	08019250 	.word	0x08019250
 80073cc:	1ffff7ac 	.word	0x1ffff7ac
 80073d0:	1ffff7b0 	.word	0x1ffff7b0
 80073d4:	1ffff7b4 	.word	0x1ffff7b4
 80073d8:	08019b18 	.word	0x08019b18

080073dc <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80073dc:	b510      	push	{r4, lr}
 80073de:	0004      	movs	r4, r0
 80073e0:	b084      	sub	sp, #16
	configASSERT(pcWriteBuffer);
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d00a      	beq.n	80073fc <timeCommand+0x20>
	GetTimeDate();
 80073e6:	f005 fd6b 	bl	800cec0 <GetTimeDate>
	if(BOS.hourformat == 24)
 80073ea:	4916      	ldr	r1, [pc, #88]	; (8007444 <timeCommand+0x68>)
 80073ec:	7b4b      	ldrb	r3, [r1, #13]
 80073ee:	2b18      	cmp	r3, #24
 80073f0:	d006      	beq.n	8007400 <timeCommand+0x24>
	else if(BOS.hourformat == 12){
 80073f2:	2b0c      	cmp	r3, #12
 80073f4:	d00f      	beq.n	8007416 <timeCommand+0x3a>
}
 80073f6:	2000      	movs	r0, #0
 80073f8:	b004      	add	sp, #16
 80073fa:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 80073fc:	b672      	cpsid	i
 80073fe:	e7fe      	b.n	80073fe <timeCommand+0x22>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8007400:	89c8      	ldrh	r0, [r1, #14]
 8007402:	7c4b      	ldrb	r3, [r1, #17]
 8007404:	7c8a      	ldrb	r2, [r1, #18]
 8007406:	9001      	str	r0, [sp, #4]
 8007408:	7c09      	ldrb	r1, [r1, #16]
 800740a:	0020      	movs	r0, r4
 800740c:	9100      	str	r1, [sp, #0]
 800740e:	490e      	ldr	r1, [pc, #56]	; (8007448 <timeCommand+0x6c>)
 8007410:	f00b fe7a 	bl	8013108 <sprintf>
 8007414:	e7ef      	b.n	80073f6 <timeCommand+0x1a>
		if(BOS.time.ampm == RTC_AM)
 8007416:	7ccb      	ldrb	r3, [r1, #19]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d00e      	beq.n	800743a <timeCommand+0x5e>
		else if(BOS.time.ampm == RTC_PM)
 800741c:	2b02      	cmp	r3, #2
 800741e:	d1ea      	bne.n	80073f6 <timeCommand+0x1a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8007420:	7c4b      	ldrb	r3, [r1, #17]
 8007422:	7c8a      	ldrb	r2, [r1, #18]
 8007424:	4809      	ldr	r0, [pc, #36]	; (800744c <timeCommand+0x70>)
 8007426:	9002      	str	r0, [sp, #8]
 8007428:	89c8      	ldrh	r0, [r1, #14]
 800742a:	9001      	str	r0, [sp, #4]
 800742c:	7c09      	ldrb	r1, [r1, #16]
 800742e:	0020      	movs	r0, r4
 8007430:	9100      	str	r1, [sp, #0]
 8007432:	4907      	ldr	r1, [pc, #28]	; (8007450 <timeCommand+0x74>)
 8007434:	f00b fe68 	bl	8013108 <sprintf>
 8007438:	e7dd      	b.n	80073f6 <timeCommand+0x1a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 800743a:	7c4b      	ldrb	r3, [r1, #17]
 800743c:	7c8a      	ldrb	r2, [r1, #18]
 800743e:	4805      	ldr	r0, [pc, #20]	; (8007454 <timeCommand+0x78>)
 8007440:	e7f1      	b.n	8007426 <timeCommand+0x4a>
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	20006ea8 	.word	0x20006ea8
 8007448:	08019258 	.word	0x08019258
 800744c:	080192b0 	.word	0x080192b0
 8007450:	08019280 	.word	0x08019280
 8007454:	080192ac 	.word	0x080192ac

08007458 <resetCommand>:
	configASSERT(pcWriteBuffer);
 8007458:	2800      	cmp	r0, #0
 800745a:	d008      	beq.n	800746e <resetCommand+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	4b04      	ldr	r3, [pc, #16]	; (8007474 <resetCommand+0x1c>)
 8007462:	4a05      	ldr	r2, [pc, #20]	; (8007478 <resetCommand+0x20>)
 8007464:	60da      	str	r2, [r3, #12]
 8007466:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800746a:	46c0      	nop			; (mov r8, r8)
 800746c:	e7fd      	b.n	800746a <resetCommand+0x12>
 800746e:	b672      	cpsid	i
 8007470:	e7fe      	b.n	8007470 <resetCommand+0x18>
 8007472:	46c0      	nop			; (mov r8, r8)
 8007474:	e000ed00 	.word	0xe000ed00
 8007478:	05fa0004 	.word	0x05fa0004

0800747c <RegisterUserCLICommands>:
}
 800747c:	4770      	bx	lr
 800747e:	46c0      	nop			; (mov r8, r8)

08007480 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8007480:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 8007482:	4c45      	ldr	r4, [pc, #276]	; (8007598 <vRegisterCLICommands+0x118>)
 8007484:	0020      	movs	r0, r4
 8007486:	f006 f937 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 800748a:	0020      	movs	r0, r4
 800748c:	3010      	adds	r0, #16
 800748e:	f006 f933 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 8007492:	0020      	movs	r0, r4
 8007494:	3020      	adds	r0, #32
 8007496:	f006 f92f 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 800749a:	0020      	movs	r0, r4
 800749c:	3030      	adds	r0, #48	; 0x30
 800749e:	f006 f92b 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 80074a2:	0020      	movs	r0, r4
 80074a4:	3040      	adds	r0, #64	; 0x40
 80074a6:	f006 f927 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 80074aa:	0020      	movs	r0, r4
 80074ac:	3050      	adds	r0, #80	; 0x50
 80074ae:	f006 f923 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 80074b2:	0020      	movs	r0, r4
 80074b4:	3060      	adds	r0, #96	; 0x60
 80074b6:	f006 f91f 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80074ba:	0020      	movs	r0, r4
 80074bc:	3070      	adds	r0, #112	; 0x70
 80074be:	f006 f91b 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80074c2:	4c36      	ldr	r4, [pc, #216]	; (800759c <vRegisterCLICommands+0x11c>)
 80074c4:	0020      	movs	r0, r4
 80074c6:	f006 f917 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 80074ca:	0020      	movs	r0, r4
 80074cc:	3010      	adds	r0, #16
 80074ce:	f006 f913 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 80074d2:	0020      	movs	r0, r4
 80074d4:	3020      	adds	r0, #32
 80074d6:	f006 f90f 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 80074da:	0020      	movs	r0, r4
 80074dc:	3030      	adds	r0, #48	; 0x30
 80074de:	f006 f90b 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 80074e2:	0020      	movs	r0, r4
 80074e4:	3040      	adds	r0, #64	; 0x40
 80074e6:	f006 f907 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 80074ea:	0020      	movs	r0, r4
 80074ec:	3050      	adds	r0, #80	; 0x50
 80074ee:	f006 f903 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 80074f2:	0020      	movs	r0, r4
 80074f4:	3060      	adds	r0, #96	; 0x60
 80074f6:	f006 f8ff 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 80074fa:	0020      	movs	r0, r4
 80074fc:	3070      	adds	r0, #112	; 0x70
 80074fe:	f006 f8fb 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 8007502:	4c27      	ldr	r4, [pc, #156]	; (80075a0 <vRegisterCLICommands+0x120>)
 8007504:	0020      	movs	r0, r4
 8007506:	f006 f8f7 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 800750a:	0020      	movs	r0, r4
 800750c:	3010      	adds	r0, #16
 800750e:	f006 f8f3 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 8007512:	0020      	movs	r0, r4
 8007514:	3020      	adds	r0, #32
 8007516:	f006 f8ef 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 800751a:	0020      	movs	r0, r4
 800751c:	3030      	adds	r0, #48	; 0x30
 800751e:	f006 f8eb 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007522:	0020      	movs	r0, r4
 8007524:	3040      	adds	r0, #64	; 0x40
 8007526:	f006 f8e7 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 800752a:	0020      	movs	r0, r4
 800752c:	3050      	adds	r0, #80	; 0x50
 800752e:	f006 f8e3 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8007532:	0020      	movs	r0, r4
 8007534:	3060      	adds	r0, #96	; 0x60
 8007536:	f006 f8df 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 800753a:	0020      	movs	r0, r4
 800753c:	3070      	adds	r0, #112	; 0x70
 800753e:	f006 f8db 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 8007542:	4c18      	ldr	r4, [pc, #96]	; (80075a4 <vRegisterCLICommands+0x124>)
 8007544:	0020      	movs	r0, r4
 8007546:	f006 f8d7 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 800754a:	0020      	movs	r0, r4
 800754c:	3010      	adds	r0, #16
 800754e:	f006 f8d3 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8007552:	0020      	movs	r0, r4
 8007554:	3020      	adds	r0, #32
 8007556:	f006 f8cf 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 800755a:	0020      	movs	r0, r4
 800755c:	3030      	adds	r0, #48	; 0x30
 800755e:	f006 f8cb 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007562:	0020      	movs	r0, r4
 8007564:	3040      	adds	r0, #64	; 0x40
 8007566:	f006 f8c7 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 800756a:	0020      	movs	r0, r4
 800756c:	3050      	adds	r0, #80	; 0x50
 800756e:	f006 f8c3 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 8007572:	0020      	movs	r0, r4
 8007574:	3060      	adds	r0, #96	; 0x60
 8007576:	f006 f8bf 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 800757a:	0020      	movs	r0, r4
 800757c:	3070      	adds	r0, #112	; 0x70
 800757e:	f006 f8bb 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 8007582:	4809      	ldr	r0, [pc, #36]	; (80075a8 <vRegisterCLICommands+0x128>)
 8007584:	f006 f8b8 	bl	800d6f8 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 8007588:	2223      	movs	r2, #35	; 0x23
 800758a:	4b08      	ldr	r3, [pc, #32]	; (80075ac <vRegisterCLICommands+0x12c>)
 800758c:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 800758e:	f004 f8bf 	bl	800b710 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 8007592:	f7ff ff73 	bl	800747c <RegisterUserCLICommands>
}
 8007596:	bd10      	pop	{r4, pc}
 8007598:	0801765c 	.word	0x0801765c
 800759c:	080176dc 	.word	0x080176dc
 80075a0:	0801775c 	.word	0x0801775c
 80075a4:	080177dc 	.word	0x080177dc
 80075a8:	0801785c 	.word	0x0801785c
 80075ac:	20006e24 	.word	0x20006e24

080075b0 <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 80075b0:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 80075b2:	1e44      	subs	r4, r0, #1
 80075b4:	00e5      	lsls	r5, r4, #3
 80075b6:	4e07      	ldr	r6, [pc, #28]	; (80075d4 <StopStreamDMA+0x24>)
 80075b8:	1b2d      	subs	r5, r5, r4
 80075ba:	00ed      	lsls	r5, r5, #3
 80075bc:	19a8      	adds	r0, r5, r6
	
	HAL_DMA_Abort(hDMA);
 80075be:	f008 fc99 	bl	800fef4 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	59aa      	ldr	r2, [r5, r6]
	dmaStreamCount[port - 1] =0;
 80075c6:	4804      	ldr	r0, [pc, #16]	; (80075d8 <StopStreamDMA+0x28>)
 80075c8:	00a4      	lsls	r4, r4, #2
	hDMA->Instance->CNDTR =0;
 80075ca:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 80075cc:	5023      	str	r3, [r4, r0]
	dmaStreamTotal[port - 1] =0;
 80075ce:	1904      	adds	r4, r0, r4
 80075d0:	61a3      	str	r3, [r4, #24]
	
}
 80075d2:	bd70      	pop	{r4, r5, r6, pc}
 80075d4:	20001c78 	.word	0x20001c78
 80075d8:	200012fc 	.word	0x200012fc

080075dc <SwitchMsgDMAToStream>:
	hDMA =&msgRxDMA[port - 1];
 80075dc:	3801      	subs	r0, #1

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 80075de:	b570      	push	{r4, r5, r6, lr}
 80075e0:	00c4      	lsls	r4, r0, #3
	hDMA =&msgRxDMA[port - 1];
 80075e2:	4d07      	ldr	r5, [pc, #28]	; (8007600 <SwitchMsgDMAToStream+0x24>)
 80075e4:	1a24      	subs	r4, r4, r0
 80075e6:	00e4      	lsls	r4, r4, #3
 80075e8:	1960      	adds	r0, r4, r5
	HAL_DMA_Abort(hDMA);
 80075ea:	f008 fc83 	bl	800fef4 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	5961      	ldr	r1, [r4, r5]
	
	// Stop the messaging DMA
	StopMsgDMA(port);
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 80075f2:	4804      	ldr	r0, [pc, #16]	; (8007604 <SwitchMsgDMAToStream+0x28>)
	hDMA->Instance->CNDTR =0;
 80075f4:	604b      	str	r3, [r1, #4]
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 80075f6:	1820      	adds	r0, r4, r0
 80075f8:	f004 f9ac 	bl	800b954 <DMA_STREAM_CH_Init>
}
 80075fc:	bd70      	pop	{r4, r5, r6, pc}
 80075fe:	46c0      	nop			; (mov r8, r8)
 8007600:	20001e70 	.word	0x20001e70
 8007604:	20001c78 	.word	0x20001c78

08007608 <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 8007608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800760a:	46d6      	mov	lr, sl
 800760c:	464f      	mov	r7, r9
 800760e:	4646      	mov	r6, r8
 8007610:	b5c0      	push	{r6, r7, lr}
	hDMA =&streamDMA[port - 1];
 8007612:	1e46      	subs	r6, r0, #1
 8007614:	00f4      	lsls	r4, r6, #3
 8007616:	4f15      	ldr	r7, [pc, #84]	; (800766c <SwitchStreamDMAToMsg+0x64>)
 8007618:	1ba4      	subs	r4, r4, r6
 800761a:	00e4      	lsls	r4, r4, #3
 800761c:	19e3      	adds	r3, r4, r7
void SwitchStreamDMAToMsg(uint8_t port){
 800761e:	4680      	mov	r8, r0
	HAL_DMA_Abort(hDMA);
 8007620:	0018      	movs	r0, r3
	hDMA =&streamDMA[port - 1];
 8007622:	4699      	mov	r9, r3
	HAL_DMA_Abort(hDMA);
 8007624:	f008 fc66 	bl	800fef4 <HAL_DMA_Abort>
	// Stop the streaming DMA
	StopStreamDMA(port);
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007628:	4b11      	ldr	r3, [pc, #68]	; (8007670 <SwitchStreamDMAToMsg+0x68>)
	hDMA->Instance->CNDTR =0;
 800762a:	2500      	movs	r5, #0
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 800762c:	469a      	mov	sl, r3
	hDMA->Instance->CNDTR =0;
 800762e:	59e1      	ldr	r1, [r4, r7]
	dmaStreamCount[port - 1] =0;
 8007630:	4a10      	ldr	r2, [pc, #64]	; (8007674 <SwitchStreamDMAToMsg+0x6c>)
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007632:	44a2      	add	sl, r4
	dmaStreamCount[port - 1] =0;
 8007634:	00b6      	lsls	r6, r6, #2
	hDMA->Instance->CNDTR =0;
 8007636:	604d      	str	r5, [r1, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007638:	4650      	mov	r0, sl
	dmaStreamCount[port - 1] =0;
 800763a:	50b5      	str	r5, [r6, r2]
	dmaStreamTotal[port - 1] =0;
 800763c:	1996      	adds	r6, r2, r6
 800763e:	61b5      	str	r5, [r6, #24]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007640:	f004 f976 	bl	800b930 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 8007644:	464b      	mov	r3, r9
 8007646:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007648:	f004 f864 	bl	800b714 <GetPort>
 800764c:	4b0a      	ldr	r3, [pc, #40]	; (8007678 <SwitchStreamDMAToMsg+0x70>)
	streamDMA[port - 1].Instance =0;
 800764e:	51e5      	str	r5, [r4, r7]
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 8007650:	541d      	strb	r5, [r3, r0]
	dmaStreamDst[port - 1] =0;
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 8007652:	4640      	mov	r0, r8
	dmaStreamDst[port - 1] =0;
 8007654:	6335      	str	r5, [r6, #48]	; 0x30
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 8007656:	f005 ff13 	bl	800d480 <GetUart>
 800765a:	4651      	mov	r1, sl
 800765c:	f004 fd28 	bl	800c0b0 <DMA_MSG_RX_Setup>
	
}
 8007660:	bc1c      	pop	{r2, r3, r4}
 8007662:	4690      	mov	r8, r2
 8007664:	4699      	mov	r9, r3
 8007666:	46a2      	mov	sl, r4
 8007668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800766a:	46c0      	nop			; (mov r8, r8)
 800766c:	20001c78 	.word	0x20001c78
 8007670:	20001e70 	.word	0x20001e70
 8007674:	200012fc 	.word	0x200012fc
 8007678:	20000c2c 	.word	0x20000c2c

0800767c <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 800767c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800767e:	46c6      	mov	lr, r8
 8007680:	b500      	push	{lr}
 8007682:	0005      	movs	r5, r0
 8007684:	000f      	movs	r7, r1
 8007686:	4690      	mov	r8, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007688:	f004 f844 	bl	800b714 <GetPort>
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800768c:	4e0e      	ldr	r6, [pc, #56]	; (80076c8 <StartDMAstream+0x4c>)
	uint8_t srcPort =GetPort(huartSrc);
 800768e:	0004      	movs	r4, r0
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007690:	5c33      	ldrb	r3, [r6, r0]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d902      	bls.n	800769c <StartDMAstream+0x20>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007696:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007698:	2b03      	cmp	r3, #3
 800769a:	d111      	bne.n	80076c0 <StartDMAstream+0x44>
		SwitchMsgDMAToStream(srcPort);
 800769c:	0020      	movs	r0, r4
 800769e:	f7ff ff9d 	bl	80075dc <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 80076a2:	4a0a      	ldr	r2, [pc, #40]	; (80076cc <StartDMAstream+0x50>)
 80076a4:	1e63      	subs	r3, r4, #1
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	18d1      	adds	r1, r2, r3
 80076aa:	630f      	str	r7, [r1, #48]	; 0x30
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 80076ac:	2102      	movs	r1, #2
 80076ae:	5531      	strb	r1, [r6, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 80076b0:	2100      	movs	r1, #0
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80076b2:	0028      	movs	r0, r5
	dmaStreamCount[srcPort - 1] =0;
 80076b4:	5099      	str	r1, [r3, r2]
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80076b6:	4642      	mov	r2, r8
 80076b8:	0039      	movs	r1, r7
 80076ba:	f004 fd5f 	bl	800c17c <DMA_STREAM_Setup>
	
	return BOS_OK;
 80076be:	2000      	movs	r0, #0
}
 80076c0:	bc04      	pop	{r2}
 80076c2:	4690      	mov	r8, r2
 80076c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c6:	46c0      	nop			; (mov r8, r8)
 80076c8:	20000c2c 	.word	0x20000c2c
 80076cc:	200012fc 	.word	0x200012fc

080076d0 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	46ce      	mov	lr, r9
 80076d4:	4647      	mov	r7, r8
 80076d6:	b580      	push	{r7, lr}
	if(portStatus[port] != STREAM){
 80076d8:	4a19      	ldr	r2, [pc, #100]	; (8007740 <DMA_IRQHandler+0x70>)
 80076da:	1e45      	subs	r5, r0, #1
 80076dc:	00ee      	lsls	r6, r5, #3
 80076de:	5c12      	ldrb	r2, [r2, r0]
 80076e0:	1b73      	subs	r3, r6, r5
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	2a02      	cmp	r2, #2
 80076e6:	d007      	beq.n	80076f8 <DMA_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 80076e8:	4816      	ldr	r0, [pc, #88]	; (8007744 <DMA_IRQHandler+0x74>)
 80076ea:	1818      	adds	r0, r3, r0
 80076ec:	f008 fc2a 	bl	800ff44 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 80076f0:	bc0c      	pop	{r2, r3}
 80076f2:	4690      	mov	r8, r2
 80076f4:	4699      	mov	r9, r3
 80076f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80076f8:	4a13      	ldr	r2, [pc, #76]	; (8007748 <DMA_IRQHandler+0x78>)
		if(dmaStreamTotal[port - 1])
 80076fa:	00af      	lsls	r7, r5, #2
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80076fc:	4691      	mov	r9, r2
 80076fe:	444b      	add	r3, r9
 8007700:	0018      	movs	r0, r3
 8007702:	001c      	movs	r4, r3
 8007704:	f008 fc1e 	bl	800ff44 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 8007708:	4b10      	ldr	r3, [pc, #64]	; (800774c <DMA_IRQHandler+0x7c>)
 800770a:	4698      	mov	r8, r3
 800770c:	19db      	adds	r3, r3, r7
 800770e:	699a      	ldr	r2, [r3, #24]
 8007710:	2a00      	cmp	r2, #0
 8007712:	d006      	beq.n	8007722 <DMA_IRQHandler+0x52>
			++dmaStreamCount[port - 1];
 8007714:	4643      	mov	r3, r8
 8007716:	4641      	mov	r1, r8
 8007718:	59db      	ldr	r3, [r3, r7]
 800771a:	3301      	adds	r3, #1
 800771c:	51cb      	str	r3, [r1, r7]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 800771e:	429a      	cmp	r2, r3
 8007720:	d8e6      	bhi.n	80076f0 <DMA_IRQHandler+0x20>
	HAL_DMA_Abort(hDMA);
 8007722:	0020      	movs	r0, r4
 8007724:	f008 fbe6 	bl	800fef4 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8007728:	464b      	mov	r3, r9
 800772a:	1b75      	subs	r5, r6, r5
 800772c:	00ed      	lsls	r5, r5, #3
 800772e:	595a      	ldr	r2, [r3, r5]
 8007730:	2300      	movs	r3, #0
 8007732:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 8007734:	4642      	mov	r2, r8
 8007736:	51d3      	str	r3, [r2, r7]
	dmaStreamTotal[port - 1] =0;
 8007738:	4447      	add	r7, r8
 800773a:	61bb      	str	r3, [r7, #24]
 800773c:	e7d8      	b.n	80076f0 <DMA_IRQHandler+0x20>
 800773e:	46c0      	nop			; (mov r8, r8)
 8007740:	20000c2c 	.word	0x20000c2c
 8007744:	20001e70 	.word	0x20001e70
 8007748:	20001c78 	.word	0x20001c78
 800774c:	200012fc 	.word	0x200012fc

08007750 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007750:	4b08      	ldr	r3, [pc, #32]	; (8007774 <ResetUartORE+0x24>)
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	2308      	movs	r3, #8
 8007756:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007758:	4a07      	ldr	r2, [pc, #28]	; (8007778 <ResetUartORE+0x28>)
 800775a:	6812      	ldr	r2, [r2, #0]
 800775c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800775e:	4a07      	ldr	r2, [pc, #28]	; (800777c <ResetUartORE+0x2c>)
 8007760:	6812      	ldr	r2, [r2, #0]
 8007762:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007764:	4a06      	ldr	r2, [pc, #24]	; (8007780 <ResetUartORE+0x30>)
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800776a:	4a06      	ldr	r2, [pc, #24]	; (8007784 <ResetUartORE+0x34>)
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	6213      	str	r3, [r2, #32]
#endif
}
 8007770:	4770      	bx	lr
 8007772:	46c0      	nop			; (mov r8, r8)
 8007774:	200070b8 	.word	0x200070b8
 8007778:	20007208 	.word	0x20007208
 800777c:	20006fd8 	.word	0x20006fd8
 8007780:	20007048 	.word	0x20007048
 8007784:	20007128 	.word	0x20007128

08007788 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	000d      	movs	r5, r1
 800778c:	0006      	movs	r6, r0
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800778e:	4c25      	ldr	r4, [pc, #148]	; (8007824 <EE_VerifyPageFullWriteVariable+0x9c>)
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 8007790:	f009 f878 	bl	8010884 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007794:	4924      	ldr	r1, [pc, #144]	; (8007828 <EE_VerifyPageFullWriteVariable+0xa0>)
 8007796:	880a      	ldrh	r2, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007798:	8823      	ldrh	r3, [r4, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800779a:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800779c:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d105      	bne.n	80077ae <EE_VerifyPageFullWriteVariable+0x26>
				if(PageStatusA == RECEIVE_DATA){
 80077a2:	4b22      	ldr	r3, [pc, #136]	; (800782c <EE_VerifyPageFullWriteVariable+0xa4>)
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d007      	beq.n	80077b8 <EE_VerifyPageFullWriteVariable+0x30>
 80077a8:	4a21      	ldr	r2, [pc, #132]	; (8007830 <EE_VerifyPageFullWriteVariable+0xa8>)
 80077aa:	0023      	movs	r3, r4
 80077ac:	e007      	b.n	80077be <EE_VerifyPageFullWriteVariable+0x36>
			else if(PageStatusA == VALID_PAGE){
 80077ae:	2a00      	cmp	r2, #0
 80077b0:	d122      	bne.n	80077f8 <EE_VerifyPageFullWriteVariable+0x70>
				if(PageStatusB == RECEIVE_DATA){
 80077b2:	4a1e      	ldr	r2, [pc, #120]	; (800782c <EE_VerifyPageFullWriteVariable+0xa4>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d0f7      	beq.n	80077a8 <EE_VerifyPageFullWriteVariable+0x20>
 80077b8:	000c      	movs	r4, r1
 80077ba:	000b      	movs	r3, r1
 80077bc:	4a1d      	ldr	r2, [pc, #116]	; (8007834 <EE_VerifyPageFullWriteVariable+0xac>)
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3301      	adds	r3, #1
 80077c2:	d103      	bne.n	80077cc <EE_VerifyPageFullWriteVariable+0x44>
 80077c4:	e009      	b.n	80077da <EE_VerifyPageFullWriteVariable+0x52>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	3301      	adds	r3, #1
 80077ca:	d006      	beq.n	80077da <EE_VerifyPageFullWriteVariable+0x52>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 80077cc:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 80077ce:	42a2      	cmp	r2, r4
 80077d0:	d8f9      	bhi.n	80077c6 <EE_VerifyPageFullWriteVariable+0x3e>
		}
	}
	
	HAL_FLASH_Lock();
 80077d2:	f009 f869 	bl	80108a8 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 80077d6:	2080      	movs	r0, #128	; 0x80
}
 80077d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 80077da:	002a      	movs	r2, r5
 80077dc:	2300      	movs	r3, #0
 80077de:	0021      	movs	r1, r4
 80077e0:	2001      	movs	r0, #1
 80077e2:	f009 f8af 	bl	8010944 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80077e6:	4814      	ldr	r0, [pc, #80]	; (8007838 <EE_VerifyPageFullWriteVariable+0xb0>)
 80077e8:	f009 f868 	bl	80108bc <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d005      	beq.n	80077fc <EE_VerifyPageFullWriteVariable+0x74>
			return pFlash.ErrorCode;
 80077f0:	4b12      	ldr	r3, [pc, #72]	; (800783c <EE_VerifyPageFullWriteVariable+0xb4>)
 80077f2:	69d8      	ldr	r0, [r3, #28]
 80077f4:	b280      	uxth	r0, r0
 80077f6:	e7ef      	b.n	80077d8 <EE_VerifyPageFullWriteVariable+0x50>
		return NO_VALID_PAGE;
 80077f8:	20ab      	movs	r0, #171	; 0xab
 80077fa:	e7ed      	b.n	80077d8 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80077fc:	2701      	movs	r7, #1
 80077fe:	4d10      	ldr	r5, [pc, #64]	; (8007840 <EE_VerifyPageFullWriteVariable+0xb8>)
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007800:	1ca1      	adds	r1, r4, #2
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007802:	692b      	ldr	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007804:	0032      	movs	r2, r6
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007806:	43bb      	bics	r3, r7
 8007808:	612b      	str	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800780a:	2001      	movs	r0, #1
 800780c:	2300      	movs	r3, #0
 800780e:	f009 f899 	bl	8010944 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007812:	4809      	ldr	r0, [pc, #36]	; (8007838 <EE_VerifyPageFullWriteVariable+0xb0>)
 8007814:	f009 f852 	bl	80108bc <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007818:	2800      	cmp	r0, #0
 800781a:	d1e9      	bne.n	80077f0 <EE_VerifyPageFullWriteVariable+0x68>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800781c:	692b      	ldr	r3, [r5, #16]
 800781e:	43bb      	bics	r3, r7
 8007820:	612b      	str	r3, [r5, #16]
 8007822:	e7e5      	b.n	80077f0 <EE_VerifyPageFullWriteVariable+0x68>
 8007824:	0801f000 	.word	0x0801f000
 8007828:	0801e000 	.word	0x0801e000
 800782c:	0000eeee 	.word	0x0000eeee
 8007830:	0801fffe 	.word	0x0801fffe
 8007834:	0801effe 	.word	0x0801effe
 8007838:	0000c350 	.word	0x0000c350
 800783c:	200073a8 	.word	0x200073a8
 8007840:	40022000 	.word	0x40022000

08007844 <EE_ReadVariable>:
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007844:	4b11      	ldr	r3, [pc, #68]	; (800788c <EE_ReadVariable+0x48>)
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 8007846:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007848:	881a      	ldrh	r2, [r3, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800784a:	4b11      	ldr	r3, [pc, #68]	; (8007890 <EE_ReadVariable+0x4c>)
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 8007850:	2a00      	cmp	r2, #0
 8007852:	d005      	beq.n	8007860 <EE_ReadVariable+0x1c>
			else if(PageStatusB == VALID_PAGE){
 8007854:	2b00      	cmp	r3, #0
 8007856:	d117      	bne.n	8007888 <EE_ReadVariable+0x44>
 8007858:	4b0e      	ldr	r3, [pc, #56]	; (8007894 <EE_ReadVariable+0x50>)
 800785a:	4c0f      	ldr	r4, [pc, #60]	; (8007898 <EE_ReadVariable+0x54>)
 800785c:	001a      	movs	r2, r3
 800785e:	e002      	b.n	8007866 <EE_ReadVariable+0x22>
			if(PageStatusA == VALID_PAGE){
 8007860:	4b0e      	ldr	r3, [pc, #56]	; (800789c <EE_ReadVariable+0x58>)
 8007862:	4c0f      	ldr	r4, [pc, #60]	; (80078a0 <EE_ReadVariable+0x5c>)
 8007864:	001a      	movs	r2, r3
		AddressValue =(*(__IO uint16_t* )Address);
 8007866:	8812      	ldrh	r2, [r2, #0]
		if(AddressValue == VirtAddress){
 8007868:	4290      	cmp	r0, r2
 800786a:	d103      	bne.n	8007874 <EE_ReadVariable+0x30>
 800786c:	e007      	b.n	800787e <EE_ReadVariable+0x3a>
		AddressValue =(*(__IO uint16_t* )Address);
 800786e:	881a      	ldrh	r2, [r3, #0]
		if(AddressValue == VirtAddress){
 8007870:	4282      	cmp	r2, r0
 8007872:	d004      	beq.n	800787e <EE_ReadVariable+0x3a>
			Address =Address - 4;
 8007874:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 8007876:	42a3      	cmp	r3, r4
 8007878:	d8f9      	bhi.n	800786e <EE_ReadVariable+0x2a>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800787a:	2001      	movs	r0, #1
}
 800787c:	bd10      	pop	{r4, pc}
			*Data =(*(__IO uint16_t* )(Address - 2));
 800787e:	3b02      	subs	r3, #2
 8007880:	881b      	ldrh	r3, [r3, #0]
			ReadStatus =0;
 8007882:	2000      	movs	r0, #0
			*Data =(*(__IO uint16_t* )(Address - 2));
 8007884:	800b      	strh	r3, [r1, #0]
			break;
 8007886:	e7f9      	b.n	800787c <EE_ReadVariable+0x38>
		return NO_VALID_PAGE;
 8007888:	20ab      	movs	r0, #171	; 0xab
 800788a:	e7f7      	b.n	800787c <EE_ReadVariable+0x38>
 800788c:	0801e000 	.word	0x0801e000
 8007890:	0801f000 	.word	0x0801f000
 8007894:	0801fffe 	.word	0x0801fffe
 8007898:	0801f002 	.word	0x0801f002
 800789c:	0801effe 	.word	0x0801effe
 80078a0:	0801e002 	.word	0x0801e002

080078a4 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 80078a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078a6:	46d6      	mov	lr, sl
 80078a8:	4646      	mov	r6, r8
 80078aa:	464f      	mov	r7, r9
 80078ac:	000c      	movs	r4, r1
 80078ae:	b5c0      	push	{r6, r7, lr}
 80078b0:	0006      	movs	r6, r0
	HAL_FLASH_Unlock();
 80078b2:	f008 ffe7 	bl	8010884 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 80078b6:	0021      	movs	r1, r4
 80078b8:	0030      	movs	r0, r6
 80078ba:	f7ff ff65 	bl	8007788 <EE_VerifyPageFullWriteVariable>
 80078be:	0005      	movs	r5, r0
	if(Status == PAGE_FULL){
 80078c0:	2880      	cmp	r0, #128	; 0x80
 80078c2:	d007      	beq.n	80078d4 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 80078c4:	f008 fff0 	bl	80108a8 <HAL_FLASH_Lock>
}
 80078c8:	0028      	movs	r0, r5
 80078ca:	bc1c      	pop	{r2, r3, r4}
 80078cc:	4690      	mov	r8, r2
 80078ce:	4699      	mov	r9, r3
 80078d0:	46a2      	mov	sl, r4
 80078d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 80078d4:	f008 ffd6 	bl	8010884 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80078d8:	4935      	ldr	r1, [pc, #212]	; (80079b0 <EE_WriteVariable+0x10c>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80078da:	4a36      	ldr	r2, [pc, #216]	; (80079b4 <EE_WriteVariable+0x110>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80078dc:	8808      	ldrh	r0, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80078de:	8813      	ldrh	r3, [r2, #0]
 80078e0:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d013      	beq.n	800790e <EE_WriteVariable+0x6a>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 80078e6:	352b      	adds	r5, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1eb      	bne.n	80078c4 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 80078ec:	4691      	mov	r9, r2
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 80078ee:	4688      	mov	r8, r1
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 80078f0:	4a31      	ldr	r2, [pc, #196]	; (80079b8 <EE_WriteVariable+0x114>)
 80078f2:	2300      	movs	r3, #0
 80078f4:	4641      	mov	r1, r8
 80078f6:	2001      	movs	r0, #1
 80078f8:	f009 f824 	bl	8010944 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078fc:	482f      	ldr	r0, [pc, #188]	; (80079bc <EE_WriteVariable+0x118>)
 80078fe:	f008 ffdd 	bl	80108bc <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007902:	2800      	cmp	r0, #0
 8007904:	d006      	beq.n	8007914 <EE_WriteVariable+0x70>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
		return pFlash.ErrorCode;
 8007906:	4b2e      	ldr	r3, [pc, #184]	; (80079c0 <EE_WriteVariable+0x11c>)
 8007908:	69dd      	ldr	r5, [r3, #28]
 800790a:	b2ad      	uxth	r5, r5
 800790c:	e7da      	b.n	80078c4 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800790e:	4689      	mov	r9, r1
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007910:	4690      	mov	r8, r2
 8007912:	e7ed      	b.n	80078f0 <EE_WriteVariable+0x4c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007914:	2101      	movs	r1, #1
 8007916:	4a2b      	ldr	r2, [pc, #172]	; (80079c4 <EE_WriteVariable+0x120>)
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007918:	0030      	movs	r0, r6
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800791a:	6913      	ldr	r3, [r2, #16]
 800791c:	438b      	bics	r3, r1
 800791e:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007920:	0021      	movs	r1, r4
 8007922:	f7ff ff31 	bl	8007788 <EE_VerifyPageFullWriteVariable>
 8007926:	1e05      	subs	r5, r0, #0
	if(EepromStatus != HAL_OK){
 8007928:	d1cc      	bne.n	80078c4 <EE_WriteVariable+0x20>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800792a:	4b27      	ldr	r3, [pc, #156]	; (80079c8 <EE_WriteVariable+0x124>)
 800792c:	2401      	movs	r4, #1
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800792e:	4f27      	ldr	r7, [pc, #156]	; (80079cc <EE_WriteVariable+0x128>)
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007930:	469a      	mov	sl, r3
 8007932:	e003      	b.n	800793c <EE_WriteVariable+0x98>
 8007934:	3401      	adds	r4, #1
 8007936:	b2a4      	uxth	r4, r4
 8007938:	4554      	cmp	r4, sl
 800793a:	d00f      	beq.n	800795c <EE_WriteVariable+0xb8>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800793c:	42a6      	cmp	r6, r4
 800793e:	d0f9      	beq.n	8007934 <EE_WriteVariable+0x90>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007940:	0039      	movs	r1, r7
 8007942:	0020      	movs	r0, r4
 8007944:	f7ff ff7e 	bl	8007844 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 8007948:	2801      	cmp	r0, #1
 800794a:	d0f3      	beq.n	8007934 <EE_WriteVariable+0x90>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800794c:	8839      	ldrh	r1, [r7, #0]
 800794e:	0020      	movs	r0, r4
 8007950:	f7ff ff1a 	bl	8007788 <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 8007954:	2800      	cmp	r0, #0
 8007956:	d0ed      	beq.n	8007934 <EE_WriteVariable+0x90>
 8007958:	0005      	movs	r5, r0
 800795a:	e7b3      	b.n	80078c4 <EE_WriteVariable+0x20>
	FLASH_PageErase(OldPageAddress);
 800795c:	4648      	mov	r0, r9
 800795e:	f009 f8c1 	bl	8010ae4 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007962:	4816      	ldr	r0, [pc, #88]	; (80079bc <EE_WriteVariable+0x118>)
 8007964:	f008 ffaa 	bl	80108bc <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007968:	2800      	cmp	r0, #0
 800796a:	d1cc      	bne.n	8007906 <EE_WriteVariable+0x62>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800796c:	2080      	movs	r0, #128	; 0x80
 800796e:	0100      	lsls	r0, r0, #4
 8007970:	4448      	add	r0, r9
 8007972:	f009 f8b7 	bl	8010ae4 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007976:	4811      	ldr	r0, [pc, #68]	; (80079bc <EE_WriteVariable+0x118>)
 8007978:	f008 ffa0 	bl	80108bc <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800797c:	2800      	cmp	r0, #0
 800797e:	d1c2      	bne.n	8007906 <EE_WriteVariable+0x62>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007980:	2202      	movs	r2, #2
 8007982:	4c10      	ldr	r4, [pc, #64]	; (80079c4 <EE_WriteVariable+0x120>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007984:	4641      	mov	r1, r8
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007986:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007988:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800798a:	4393      	bics	r3, r2
 800798c:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800798e:	2200      	movs	r2, #0
 8007990:	2300      	movs	r3, #0
 8007992:	f008 ffd7 	bl	8010944 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007996:	4809      	ldr	r0, [pc, #36]	; (80079bc <EE_WriteVariable+0x118>)
 8007998:	f008 ff90 	bl	80108bc <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800799c:	2800      	cmp	r0, #0
 800799e:	d1b2      	bne.n	8007906 <EE_WriteVariable+0x62>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80079a0:	2201      	movs	r2, #1
 80079a2:	6923      	ldr	r3, [r4, #16]
 80079a4:	4393      	bics	r3, r2
 80079a6:	6123      	str	r3, [r4, #16]
	}
	
	HAL_FLASH_Lock();
 80079a8:	f008 ff7e 	bl	80108a8 <HAL_FLASH_Lock>
 80079ac:	e78a      	b.n	80078c4 <EE_WriteVariable+0x20>
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	0801e000 	.word	0x0801e000
 80079b4:	0801f000 	.word	0x0801f000
 80079b8:	0000eeee 	.word	0x0000eeee
 80079bc:	0000c350 	.word	0x0000c350
 80079c0:	200073a8 	.word	0x200073a8
 80079c4:	40022000 	.word	0x40022000
 80079c8:	00000401 	.word	0x00000401
 80079cc:	2000180c 	.word	0x2000180c

080079d0 <EE_Format>:
uint16_t EE_Format(void){
 80079d0:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 80079d2:	f008 ff57 	bl	8010884 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 80079d6:	481f      	ldr	r0, [pc, #124]	; (8007a54 <EE_Format+0x84>)
 80079d8:	f009 f884 	bl	8010ae4 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079dc:	481e      	ldr	r0, [pc, #120]	; (8007a58 <EE_Format+0x88>)
 80079de:	f008 ff6d 	bl	80108bc <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d003      	beq.n	80079ee <EE_Format+0x1e>
			return pFlash.ErrorCode;
 80079e6:	4b1d      	ldr	r3, [pc, #116]	; (8007a5c <EE_Format+0x8c>)
 80079e8:	69d8      	ldr	r0, [r3, #28]
 80079ea:	b280      	uxth	r0, r0
}
 80079ec:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80079ee:	481c      	ldr	r0, [pc, #112]	; (8007a60 <EE_Format+0x90>)
 80079f0:	f009 f878 	bl	8010ae4 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079f4:	4818      	ldr	r0, [pc, #96]	; (8007a58 <EE_Format+0x88>)
 80079f6:	f008 ff61 	bl	80108bc <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d1f3      	bne.n	80079e6 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80079fe:	2202      	movs	r2, #2
 8007a00:	4c18      	ldr	r4, [pc, #96]	; (8007a64 <EE_Format+0x94>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007a02:	4914      	ldr	r1, [pc, #80]	; (8007a54 <EE_Format+0x84>)
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007a04:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007a06:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007a08:	4393      	bics	r3, r2
 8007a0a:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f008 ff98 	bl	8010944 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a14:	4810      	ldr	r0, [pc, #64]	; (8007a58 <EE_Format+0x88>)
 8007a16:	f008 ff51 	bl	80108bc <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d1e3      	bne.n	80079e6 <EE_Format+0x16>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a1e:	2501      	movs	r5, #1
 8007a20:	6923      	ldr	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007a22:	4811      	ldr	r0, [pc, #68]	; (8007a68 <EE_Format+0x98>)
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a24:	43ab      	bics	r3, r5
 8007a26:	6123      	str	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007a28:	f009 f85c 	bl	8010ae4 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a2c:	480a      	ldr	r0, [pc, #40]	; (8007a58 <EE_Format+0x88>)
 8007a2e:	f008 ff45 	bl	80108bc <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d1d7      	bne.n	80079e6 <EE_Format+0x16>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007a36:	480d      	ldr	r0, [pc, #52]	; (8007a6c <EE_Format+0x9c>)
 8007a38:	f009 f854 	bl	8010ae4 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a3c:	4806      	ldr	r0, [pc, #24]	; (8007a58 <EE_Format+0x88>)
 8007a3e:	f008 ff3d 	bl	80108bc <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d1cf      	bne.n	80079e6 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	43ab      	bics	r3, r5
 8007a4a:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 8007a4c:	f008 ff2c 	bl	80108a8 <HAL_FLASH_Lock>
	return FlashStatus;
 8007a50:	2000      	movs	r0, #0
 8007a52:	e7cb      	b.n	80079ec <EE_Format+0x1c>
 8007a54:	0801e000 	.word	0x0801e000
 8007a58:	0000c350 	.word	0x0000c350
 8007a5c:	200073a8 	.word	0x200073a8
 8007a60:	0801e800 	.word	0x0801e800
 8007a64:	40022000 	.word	0x40022000
 8007a68:	0801f000 	.word	0x0801f000
 8007a6c:	0801f800 	.word	0x0801f800

08007a70 <EE_Init>:
uint16_t EE_Init(void){
 8007a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a72:	46c6      	mov	lr, r8
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a74:	4c9d      	ldr	r4, [pc, #628]	; (8007cec <EE_Init+0x27c>)
uint16_t EE_Init(void){
 8007a76:	b500      	push	{lr}
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a78:	4d9d      	ldr	r5, [pc, #628]	; (8007cf0 <EE_Init+0x280>)
	HAL_FLASH_Unlock();
 8007a7a:	f008 ff03 	bl	8010884 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a7e:	8823      	ldrh	r3, [r4, #0]
	switch(PageStatusA){
 8007a80:	499c      	ldr	r1, [pc, #624]	; (8007cf4 <EE_Init+0x284>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a82:	882a      	ldrh	r2, [r5, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a84:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a86:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007a88:	428b      	cmp	r3, r1
 8007a8a:	d100      	bne.n	8007a8e <EE_Init+0x1e>
 8007a8c:	e06f      	b.n	8007b6e <EE_Init+0xfe>
 8007a8e:	489a      	ldr	r0, [pc, #616]	; (8007cf8 <EE_Init+0x288>)
 8007a90:	4283      	cmp	r3, r0
 8007a92:	d05c      	beq.n	8007b4e <EE_Init+0xde>
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00e      	beq.n	8007ab6 <EE_Init+0x46>
			FlashStatus =EE_Format();
 8007a98:	f7ff ff9a 	bl	80079d0 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a9c:	4897      	ldr	r0, [pc, #604]	; (8007cfc <EE_Init+0x28c>)
 8007a9e:	f008 ff0d 	bl	80108bc <FLASH_WaitForLastOperation>
 8007aa2:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 8007aa4:	2d00      	cmp	r5, #0
 8007aa6:	d102      	bne.n	8007aae <EE_Init+0x3e>
	HAL_FLASH_Lock();
 8007aa8:	f008 fefe 	bl	80108a8 <HAL_FLASH_Lock>
	return HAL_OK;
 8007aac:	2500      	movs	r5, #0
}
 8007aae:	0028      	movs	r0, r5
 8007ab0:	bc04      	pop	{r2}
 8007ab2:	4690      	mov	r8, r2
 8007ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007ab6:	2a00      	cmp	r2, #0
 8007ab8:	d0ee      	beq.n	8007a98 <EE_Init+0x28>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007aba:	4282      	cmp	r2, r0
 8007abc:	d100      	bne.n	8007ac0 <EE_Init+0x50>
 8007abe:	e103      	b.n	8007cc8 <EE_Init+0x258>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007ac0:	4b8f      	ldr	r3, [pc, #572]	; (8007d00 <EE_Init+0x290>)
	int16_t x =-1;
 8007ac2:	2601      	movs	r6, #1
 8007ac4:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007ac6:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007ac8:	4f8e      	ldr	r7, [pc, #568]	; (8007d04 <EE_Init+0x294>)
	int16_t x =-1;
 8007aca:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007acc:	883b      	ldrh	r3, [r7, #0]
 8007ace:	b2a5      	uxth	r5, r4
 8007ad0:	42ab      	cmp	r3, r5
 8007ad2:	d100      	bne.n	8007ad6 <EE_Init+0x66>
						x =VarIdx;
 8007ad4:	b226      	sxth	r6, r4
					if(VarIdx != x){
 8007ad6:	42b4      	cmp	r4, r6
 8007ad8:	d010      	beq.n	8007afc <EE_Init+0x8c>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007ada:	4641      	mov	r1, r8
 8007adc:	0028      	movs	r0, r5
 8007ade:	f7ff feb1 	bl	8007844 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007ae2:	2801      	cmp	r0, #1
 8007ae4:	d00a      	beq.n	8007afc <EE_Init+0x8c>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007ae6:	4643      	mov	r3, r8
 8007ae8:	0028      	movs	r0, r5
 8007aea:	8819      	ldrh	r1, [r3, #0]
 8007aec:	f7ff fe4c 	bl	8007788 <EE_VerifyPageFullWriteVariable>
 8007af0:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007af2:	4882      	ldr	r0, [pc, #520]	; (8007cfc <EE_Init+0x28c>)
 8007af4:	f008 fee2 	bl	80108bc <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007af8:	2800      	cmp	r0, #0
 8007afa:	d1d8      	bne.n	8007aae <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007afc:	4b82      	ldr	r3, [pc, #520]	; (8007d08 <EE_Init+0x298>)
 8007afe:	3401      	adds	r4, #1
 8007b00:	429c      	cmp	r4, r3
 8007b02:	d1e3      	bne.n	8007acc <EE_Init+0x5c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007b04:	2200      	movs	r2, #0
 8007b06:	2300      	movs	r3, #0
 8007b08:	4979      	ldr	r1, [pc, #484]	; (8007cf0 <EE_Init+0x280>)
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	f008 ff1a 	bl	8010944 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b10:	487a      	ldr	r0, [pc, #488]	; (8007cfc <EE_Init+0x28c>)
 8007b12:	f008 fed3 	bl	80108bc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d125      	bne.n	8007b66 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	4c7b      	ldr	r4, [pc, #492]	; (8007d0c <EE_Init+0x29c>)
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007b1e:	4873      	ldr	r0, [pc, #460]	; (8007cec <EE_Init+0x27c>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b20:	6923      	ldr	r3, [r4, #16]
 8007b22:	4393      	bics	r3, r2
 8007b24:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007b26:	f008 ffdd 	bl	8010ae4 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b2a:	4874      	ldr	r0, [pc, #464]	; (8007cfc <EE_Init+0x28c>)
 8007b2c:	f008 fec6 	bl	80108bc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d118      	bne.n	8007b66 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007b34:	4876      	ldr	r0, [pc, #472]	; (8007d10 <EE_Init+0x2a0>)
 8007b36:	f008 ffd5 	bl	8010ae4 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b3a:	4870      	ldr	r0, [pc, #448]	; (8007cfc <EE_Init+0x28c>)
 8007b3c:	f008 febe 	bl	80108bc <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d110      	bne.n	8007b66 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007b44:	2202      	movs	r2, #2
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	4393      	bics	r3, r2
 8007b4a:	6123      	str	r3, [r4, #16]
 8007b4c:	e7ac      	b.n	8007aa8 <EE_Init+0x38>
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007b4e:	2a00      	cmp	r2, #0
 8007b50:	d07b      	beq.n	8007c4a <EE_Init+0x1da>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007b52:	428a      	cmp	r2, r1
 8007b54:	d100      	bne.n	8007b58 <EE_Init+0xe8>
 8007b56:	e08f      	b.n	8007c78 <EE_Init+0x208>
				FlashStatus =EE_Format();
 8007b58:	f7ff ff3a 	bl	80079d0 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b5c:	4867      	ldr	r0, [pc, #412]	; (8007cfc <EE_Init+0x28c>)
 8007b5e:	f008 fead 	bl	80108bc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d0a0      	beq.n	8007aa8 <EE_Init+0x38>
						return pFlash.ErrorCode;
 8007b66:	4b6b      	ldr	r3, [pc, #428]	; (8007d14 <EE_Init+0x2a4>)
 8007b68:	69dd      	ldr	r5, [r3, #28]
 8007b6a:	b2ad      	uxth	r5, r5
 8007b6c:	e79f      	b.n	8007aae <EE_Init+0x3e>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007b6e:	2a00      	cmp	r2, #0
 8007b70:	d143      	bne.n	8007bfa <EE_Init+0x18a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b72:	4b63      	ldr	r3, [pc, #396]	; (8007d00 <EE_Init+0x290>)
	int16_t x =-1;
 8007b74:	2601      	movs	r6, #1
 8007b76:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b78:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b7a:	4f67      	ldr	r7, [pc, #412]	; (8007d18 <EE_Init+0x2a8>)
	int16_t x =-1;
 8007b7c:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b7e:	883b      	ldrh	r3, [r7, #0]
 8007b80:	b2a5      	uxth	r5, r4
 8007b82:	42ab      	cmp	r3, r5
 8007b84:	d100      	bne.n	8007b88 <EE_Init+0x118>
						x =VarIdx;
 8007b86:	b226      	sxth	r6, r4
					if(VarIdx != x){
 8007b88:	42b4      	cmp	r4, r6
 8007b8a:	d011      	beq.n	8007bb0 <EE_Init+0x140>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b8c:	4641      	mov	r1, r8
 8007b8e:	0028      	movs	r0, r5
 8007b90:	f7ff fe58 	bl	8007844 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007b94:	2801      	cmp	r0, #1
 8007b96:	d00b      	beq.n	8007bb0 <EE_Init+0x140>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b98:	4643      	mov	r3, r8
 8007b9a:	0028      	movs	r0, r5
 8007b9c:	8819      	ldrh	r1, [r3, #0]
 8007b9e:	f7ff fdf3 	bl	8007788 <EE_VerifyPageFullWriteVariable>
 8007ba2:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ba4:	4855      	ldr	r0, [pc, #340]	; (8007cfc <EE_Init+0x28c>)
 8007ba6:	f008 fe89 	bl	80108bc <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d000      	beq.n	8007bb0 <EE_Init+0x140>
 8007bae:	e77e      	b.n	8007aae <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007bb0:	4b55      	ldr	r3, [pc, #340]	; (8007d08 <EE_Init+0x298>)
 8007bb2:	3401      	adds	r4, #1
 8007bb4:	429c      	cmp	r4, r3
 8007bb6:	d1e2      	bne.n	8007b7e <EE_Init+0x10e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007bb8:	2200      	movs	r2, #0
 8007bba:	2300      	movs	r3, #0
 8007bbc:	494b      	ldr	r1, [pc, #300]	; (8007cec <EE_Init+0x27c>)
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	f008 fec0 	bl	8010944 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bc4:	484d      	ldr	r0, [pc, #308]	; (8007cfc <EE_Init+0x28c>)
 8007bc6:	f008 fe79 	bl	80108bc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d1cb      	bne.n	8007b66 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007bce:	2201      	movs	r2, #1
 8007bd0:	4c4e      	ldr	r4, [pc, #312]	; (8007d0c <EE_Init+0x29c>)
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bd2:	4847      	ldr	r0, [pc, #284]	; (8007cf0 <EE_Init+0x280>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007bd4:	6923      	ldr	r3, [r4, #16]
 8007bd6:	4393      	bics	r3, r2
 8007bd8:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bda:	f008 ff83 	bl	8010ae4 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bde:	4847      	ldr	r0, [pc, #284]	; (8007cfc <EE_Init+0x28c>)
 8007be0:	f008 fe6c 	bl	80108bc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d1be      	bne.n	8007b66 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007be8:	484c      	ldr	r0, [pc, #304]	; (8007d1c <EE_Init+0x2ac>)
 8007bea:	f008 ff7b 	bl	8010ae4 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bee:	4843      	ldr	r0, [pc, #268]	; (8007cfc <EE_Init+0x28c>)
 8007bf0:	f008 fe64 	bl	80108bc <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d0a5      	beq.n	8007b44 <EE_Init+0xd4>
 8007bf8:	e7b5      	b.n	8007b66 <EE_Init+0xf6>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007bfa:	4b3f      	ldr	r3, [pc, #252]	; (8007cf8 <EE_Init+0x288>)
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d1ab      	bne.n	8007b58 <EE_Init+0xe8>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007c00:	0028      	movs	r0, r5
 8007c02:	f008 ff6f 	bl	8010ae4 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c06:	483d      	ldr	r0, [pc, #244]	; (8007cfc <EE_Init+0x28c>)
 8007c08:	f008 fe58 	bl	80108bc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d1aa      	bne.n	8007b66 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007c10:	4842      	ldr	r0, [pc, #264]	; (8007d1c <EE_Init+0x2ac>)
 8007c12:	f008 ff67 	bl	8010ae4 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c16:	4839      	ldr	r0, [pc, #228]	; (8007cfc <EE_Init+0x28c>)
 8007c18:	f008 fe50 	bl	80108bc <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d1a2      	bne.n	8007b66 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c20:	2202      	movs	r2, #2
 8007c22:	4d3a      	ldr	r5, [pc, #232]	; (8007d0c <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c24:	0021      	movs	r1, r4
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c26:	692b      	ldr	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c28:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c2a:	4393      	bics	r3, r2
 8007c2c:	612b      	str	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2300      	movs	r3, #0
 8007c32:	f008 fe87 	bl	8010944 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c36:	4831      	ldr	r0, [pc, #196]	; (8007cfc <EE_Init+0x28c>)
 8007c38:	f008 fe40 	bl	80108bc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d192      	bne.n	8007b66 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c40:	2201      	movs	r2, #1
 8007c42:	692b      	ldr	r3, [r5, #16]
 8007c44:	4393      	bics	r3, r2
 8007c46:	612b      	str	r3, [r5, #16]
 8007c48:	e72e      	b.n	8007aa8 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007c4a:	0020      	movs	r0, r4
 8007c4c:	f008 ff4a 	bl	8010ae4 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c50:	482a      	ldr	r0, [pc, #168]	; (8007cfc <EE_Init+0x28c>)
 8007c52:	f008 fe33 	bl	80108bc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c56:	2800      	cmp	r0, #0
 8007c58:	d185      	bne.n	8007b66 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007c5a:	482d      	ldr	r0, [pc, #180]	; (8007d10 <EE_Init+0x2a0>)
 8007c5c:	f008 ff42 	bl	8010ae4 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c60:	4826      	ldr	r0, [pc, #152]	; (8007cfc <EE_Init+0x28c>)
 8007c62:	f008 fe2b 	bl	80108bc <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d000      	beq.n	8007c6c <EE_Init+0x1fc>
 8007c6a:	e77c      	b.n	8007b66 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c6c:	2102      	movs	r1, #2
 8007c6e:	4a27      	ldr	r2, [pc, #156]	; (8007d0c <EE_Init+0x29c>)
 8007c70:	6913      	ldr	r3, [r2, #16]
 8007c72:	438b      	bics	r3, r1
 8007c74:	6113      	str	r3, [r2, #16]
 8007c76:	e717      	b.n	8007aa8 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007c78:	0020      	movs	r0, r4
 8007c7a:	f008 ff33 	bl	8010ae4 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c7e:	481f      	ldr	r0, [pc, #124]	; (8007cfc <EE_Init+0x28c>)
 8007c80:	f008 fe1c 	bl	80108bc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d000      	beq.n	8007c8a <EE_Init+0x21a>
 8007c88:	e76d      	b.n	8007b66 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007c8a:	4821      	ldr	r0, [pc, #132]	; (8007d10 <EE_Init+0x2a0>)
 8007c8c:	f008 ff2a 	bl	8010ae4 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c90:	481a      	ldr	r0, [pc, #104]	; (8007cfc <EE_Init+0x28c>)
 8007c92:	f008 fe13 	bl	80108bc <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d000      	beq.n	8007c9c <EE_Init+0x22c>
 8007c9a:	e764      	b.n	8007b66 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	4c1b      	ldr	r4, [pc, #108]	; (8007d0c <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007ca0:	0029      	movs	r1, r5
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007ca2:	6923      	ldr	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007ca4:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007ca6:	4393      	bics	r3, r2
 8007ca8:	6123      	str	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007caa:	2200      	movs	r2, #0
 8007cac:	2300      	movs	r3, #0
 8007cae:	f008 fe49 	bl	8010944 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cb2:	4812      	ldr	r0, [pc, #72]	; (8007cfc <EE_Init+0x28c>)
 8007cb4:	f008 fe02 	bl	80108bc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d000      	beq.n	8007cbe <EE_Init+0x24e>
 8007cbc:	e753      	b.n	8007b66 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	6923      	ldr	r3, [r4, #16]
 8007cc2:	4393      	bics	r3, r2
 8007cc4:	6123      	str	r3, [r4, #16]
 8007cc6:	e6ef      	b.n	8007aa8 <EE_Init+0x38>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007cc8:	0028      	movs	r0, r5
 8007cca:	f008 ff0b 	bl	8010ae4 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cce:	480b      	ldr	r0, [pc, #44]	; (8007cfc <EE_Init+0x28c>)
 8007cd0:	f008 fdf4 	bl	80108bc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d000      	beq.n	8007cda <EE_Init+0x26a>
 8007cd8:	e745      	b.n	8007b66 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007cda:	4810      	ldr	r0, [pc, #64]	; (8007d1c <EE_Init+0x2ac>)
 8007cdc:	f008 ff02 	bl	8010ae4 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ce0:	4806      	ldr	r0, [pc, #24]	; (8007cfc <EE_Init+0x28c>)
 8007ce2:	f008 fdeb 	bl	80108bc <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d0c0      	beq.n	8007c6c <EE_Init+0x1fc>
 8007cea:	e73c      	b.n	8007b66 <EE_Init+0xf6>
 8007cec:	0801e000 	.word	0x0801e000
 8007cf0:	0801f000 	.word	0x0801f000
 8007cf4:	0000eeee 	.word	0x0000eeee
 8007cf8:	0000ffff 	.word	0x0000ffff
 8007cfc:	0000c350 	.word	0x0000c350
 8007d00:	2000180c 	.word	0x2000180c
 8007d04:	0801f006 	.word	0x0801f006
 8007d08:	00000401 	.word	0x00000401
 8007d0c:	40022000 	.word	0x40022000
 8007d10:	0801e800 	.word	0x0801e800
 8007d14:	200073a8 	.word	0x200073a8
 8007d18:	0801e006 	.word	0x0801e006
 8007d1c:	0801f800 	.word	0x0801f800

08007d20 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 8007d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d22:	46c6      	mov	lr, r8
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007d24:	26a0      	movs	r6, #160	; 0xa0
 8007d26:	2400      	movs	r4, #0
 8007d28:	2703      	movs	r7, #3
void MX_FREERTOS_Init(void){
 8007d2a:	b500      	push	{lr}
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007d2c:	4d66      	ldr	r5, [pc, #408]	; (8007ec8 <MX_FREERTOS_Init+0x1a8>)
void MX_FREERTOS_Init(void){
 8007d2e:	b090      	sub	sp, #64	; 0x40
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007d30:	0076      	lsls	r6, r6, #1
 8007d32:	9501      	str	r5, [sp, #4]
 8007d34:	9700      	str	r7, [sp, #0]
 8007d36:	0032      	movs	r2, r6
 8007d38:	9403      	str	r4, [sp, #12]
 8007d3a:	9402      	str	r4, [sp, #8]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4963      	ldr	r1, [pc, #396]	; (8007ecc <MX_FREERTOS_Init+0x1ac>)
 8007d40:	4863      	ldr	r0, [pc, #396]	; (8007ed0 <MX_FREERTOS_Init+0x1b0>)
 8007d42:	f006 fb69 	bl	800e418 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007d46:	1d2b      	adds	r3, r5, #4
 8007d48:	9301      	str	r3, [sp, #4]
 8007d4a:	9700      	str	r7, [sp, #0]
 8007d4c:	0032      	movs	r2, r6
 8007d4e:	9403      	str	r4, [sp, #12]
 8007d50:	9402      	str	r4, [sp, #8]
 8007d52:	2300      	movs	r3, #0
 8007d54:	495f      	ldr	r1, [pc, #380]	; (8007ed4 <MX_FREERTOS_Init+0x1b4>)
 8007d56:	4860      	ldr	r0, [pc, #384]	; (8007ed8 <MX_FREERTOS_Init+0x1b8>)
 8007d58:	f006 fb5e 	bl	800e418 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007d5c:	002b      	movs	r3, r5
 8007d5e:	3308      	adds	r3, #8
 8007d60:	0032      	movs	r2, r6
 8007d62:	9301      	str	r3, [sp, #4]
 8007d64:	9700      	str	r7, [sp, #0]
 8007d66:	2300      	movs	r3, #0
 8007d68:	495c      	ldr	r1, [pc, #368]	; (8007edc <MX_FREERTOS_Init+0x1bc>)
 8007d6a:	9403      	str	r4, [sp, #12]
 8007d6c:	9402      	str	r4, [sp, #8]
 8007d6e:	485c      	ldr	r0, [pc, #368]	; (8007ee0 <MX_FREERTOS_Init+0x1c0>)
 8007d70:	f006 fb52 	bl	800e418 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 8007d74:	f7ff fb84 	bl	8007480 <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007d78:	002b      	movs	r3, r5
 8007d7a:	330c      	adds	r3, #12
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	9700      	str	r7, [sp, #0]
 8007d80:	0032      	movs	r2, r6
 8007d82:	9403      	str	r4, [sp, #12]
 8007d84:	9402      	str	r4, [sp, #8]
 8007d86:	2300      	movs	r3, #0
 8007d88:	4956      	ldr	r1, [pc, #344]	; (8007ee4 <MX_FREERTOS_Init+0x1c4>)
 8007d8a:	4857      	ldr	r0, [pc, #348]	; (8007ee8 <MX_FREERTOS_Init+0x1c8>)
 8007d8c:	f006 fb44 	bl	800e418 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007d90:	002b      	movs	r3, r5
 8007d92:	3310      	adds	r3, #16
 8007d94:	9301      	str	r3, [sp, #4]
 8007d96:	2304      	movs	r3, #4
 8007d98:	4f54      	ldr	r7, [pc, #336]	; (8007eec <MX_FREERTOS_Init+0x1cc>)
 8007d9a:	4698      	mov	r8, r3
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	0032      	movs	r2, r6
 8007da0:	9403      	str	r4, [sp, #12]
 8007da2:	9402      	str	r4, [sp, #8]
 8007da4:	3b03      	subs	r3, #3
 8007da6:	4952      	ldr	r1, [pc, #328]	; (8007ef0 <MX_FREERTOS_Init+0x1d0>)
 8007da8:	0038      	movs	r0, r7
 8007daa:	f006 fb35 	bl	800e418 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8007dae:	002b      	movs	r3, r5
 8007db0:	3314      	adds	r3, #20
 8007db2:	9301      	str	r3, [sp, #4]
 8007db4:	4643      	mov	r3, r8
 8007db6:	0032      	movs	r2, r6
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	9403      	str	r4, [sp, #12]
 8007dbc:	9402      	str	r4, [sp, #8]
 8007dbe:	3b02      	subs	r3, #2
 8007dc0:	494c      	ldr	r1, [pc, #304]	; (8007ef4 <MX_FREERTOS_Init+0x1d4>)
 8007dc2:	0038      	movs	r0, r7
 8007dc4:	f006 fb28 	bl	800e418 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007dc8:	002b      	movs	r3, r5
 8007dca:	3318      	adds	r3, #24
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	4643      	mov	r3, r8
 8007dd0:	0032      	movs	r2, r6
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	9403      	str	r4, [sp, #12]
 8007dd6:	9402      	str	r4, [sp, #8]
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	4947      	ldr	r1, [pc, #284]	; (8007ef8 <MX_FREERTOS_Init+0x1d8>)
 8007ddc:	0038      	movs	r0, r7
 8007dde:	f006 fb1b 	bl	800e418 <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007de2:	002b      	movs	r3, r5
 8007de4:	331c      	adds	r3, #28
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	4643      	mov	r3, r8
 8007dea:	0032      	movs	r2, r6
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	9403      	str	r4, [sp, #12]
 8007df0:	9402      	str	r4, [sp, #8]
 8007df2:	4942      	ldr	r1, [pc, #264]	; (8007efc <MX_FREERTOS_Init+0x1dc>)
 8007df4:	0038      	movs	r0, r7
 8007df6:	f006 fb0f 	bl	800e418 <xTaskGenericCreate>
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8007dfa:	002b      	movs	r3, r5
 8007dfc:	3320      	adds	r3, #32
 8007dfe:	9301      	str	r3, [sp, #4]
 8007e00:	4643      	mov	r3, r8
 8007e02:	0032      	movs	r2, r6
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	9403      	str	r4, [sp, #12]
 8007e08:	9402      	str	r4, [sp, #8]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	493c      	ldr	r1, [pc, #240]	; (8007f00 <MX_FREERTOS_Init+0x1e0>)
 8007e0e:	0038      	movs	r0, r7
 8007e10:	f006 fb02 	bl	800e418 <xTaskGenericCreate>
#endif
#ifdef _P6
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 8007e14:	4643      	mov	r3, r8
 8007e16:	3524      	adds	r5, #36	; 0x24
 8007e18:	0032      	movs	r2, r6
 8007e1a:	9501      	str	r5, [sp, #4]
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	9403      	str	r4, [sp, #12]
 8007e20:	3302      	adds	r3, #2
 8007e22:	9402      	str	r4, [sp, #8]
 8007e24:	4937      	ldr	r1, [pc, #220]	; (8007f04 <MX_FREERTOS_Init+0x1e4>)
 8007e26:	0038      	movs	r0, r7
 8007e28:	f006 faf6 	bl	800e418 <xTaskGenericCreate>
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	a804      	add	r0, sp, #16
	osSemaphoreDef(SemaphoreP1);
 8007e30:	9404      	str	r4, [sp, #16]
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007e32:	f005 fc15 	bl	800d660 <osSemaphoreCreate>
 8007e36:	4e34      	ldr	r6, [pc, #208]	; (8007f08 <MX_FREERTOS_Init+0x1e8>)
	osSemaphoreDef(SemaphoreP2);
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007e38:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007e3a:	6070      	str	r0, [r6, #4]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007e3c:	a805      	add	r0, sp, #20
	osSemaphoreDef(SemaphoreP2);
 8007e3e:	9405      	str	r4, [sp, #20]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007e40:	f005 fc0e 	bl	800d660 <osSemaphoreCreate>
 8007e44:	4d31      	ldr	r5, [pc, #196]	; (8007f0c <MX_FREERTOS_Init+0x1ec>)
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007e46:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007e48:	6068      	str	r0, [r5, #4]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007e4a:	a806      	add	r0, sp, #24
	osSemaphoreDef(SemaphoreP3);
 8007e4c:	9406      	str	r4, [sp, #24]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007e4e:	f005 fc07 	bl	800d660 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP4);
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007e52:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007e54:	60b0      	str	r0, [r6, #8]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007e56:	a807      	add	r0, sp, #28
	osSemaphoreDef(SemaphoreP4);
 8007e58:	9407      	str	r4, [sp, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007e5a:	f005 fc01 	bl	800d660 <osSemaphoreCreate>
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007e5e:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007e60:	60a8      	str	r0, [r5, #8]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007e62:	a808      	add	r0, sp, #32
	osSemaphoreDef(SemaphoreP5);
 8007e64:	9408      	str	r4, [sp, #32]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007e66:	f005 fbfb 	bl	800d660 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP6);
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007e6a:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007e6c:	60f0      	str	r0, [r6, #12]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007e6e:	a809      	add	r0, sp, #36	; 0x24
	osSemaphoreDef(SemaphoreP6);
 8007e70:	9409      	str	r4, [sp, #36]	; 0x24
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007e72:	f005 fbf5 	bl	800d660 <osSemaphoreCreate>
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007e76:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007e78:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007e7a:	a80a      	add	r0, sp, #40	; 0x28
	osSemaphoreDef(SemaphoreP7);
 8007e7c:	940a      	str	r4, [sp, #40]	; 0x28
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007e7e:	f005 fbef 	bl	800d660 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP8);
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007e82:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007e84:	6130      	str	r0, [r6, #16]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007e86:	a80b      	add	r0, sp, #44	; 0x2c
	osSemaphoreDef(SemaphoreP8);
 8007e88:	940b      	str	r4, [sp, #44]	; 0x2c
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007e8a:	f005 fbe9 	bl	800d660 <osSemaphoreCreate>
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007e8e:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007e90:	6128      	str	r0, [r5, #16]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007e92:	a80c      	add	r0, sp, #48	; 0x30
	osSemaphoreDef(SemaphoreP9);
 8007e94:	940c      	str	r4, [sp, #48]	; 0x30
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007e96:	f005 fbe3 	bl	800d660 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP10);
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007e9a:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007e9c:	6170      	str	r0, [r6, #20]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007e9e:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(SemaphoreP10);
 8007ea0:	940d      	str	r4, [sp, #52]	; 0x34
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007ea2:	f005 fbdd 	bl	800d660 <osSemaphoreCreate>
#endif
#ifdef _P6	
	osSemaphoreDef(SemaphoreP11);
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007ea6:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007ea8:	6168      	str	r0, [r5, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007eaa:	a80e      	add	r0, sp, #56	; 0x38
	osSemaphoreDef(SemaphoreP11);
 8007eac:	940e      	str	r4, [sp, #56]	; 0x38
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007eae:	f005 fbd7 	bl	800d660 <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007eb2:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007eb4:	61b0      	str	r0, [r6, #24]
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007eb6:	a80f      	add	r0, sp, #60	; 0x3c
	osSemaphoreDef(SemaphoreP12);
 8007eb8:	940f      	str	r4, [sp, #60]	; 0x3c
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007eba:	f005 fbd1 	bl	800d660 <osSemaphoreCreate>
 8007ebe:	61a8      	str	r0, [r5, #24]
#endif
	
}
 8007ec0:	b010      	add	sp, #64	; 0x40
 8007ec2:	bc04      	pop	{r2}
 8007ec4:	4690      	mov	r8, r2
 8007ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ec8:	20001810 	.word	0x20001810
 8007ecc:	0801a1a8 	.word	0x0801a1a8
 8007ed0:	08008311 	.word	0x08008311
 8007ed4:	0801a1b4 	.word	0x0801a1b4
 8007ed8:	08009c1d 	.word	0x08009c1d
 8007edc:	0801a1c0 	.word	0x0801a1c0
 8007ee0:	08012769 	.word	0x08012769
 8007ee4:	0801a1cc 	.word	0x0801a1cc
 8007ee8:	080052f1 	.word	0x080052f1
 8007eec:	0800a00d 	.word	0x0800a00d
 8007ef0:	0801a1d4 	.word	0x0801a1d4
 8007ef4:	0801a1e0 	.word	0x0801a1e0
 8007ef8:	0801a1ec 	.word	0x0801a1ec
 8007efc:	0801a1f8 	.word	0x0801a1f8
 8007f00:	0801a204 	.word	0x0801a204
 8007f04:	0801a210 	.word	0x0801a210
 8007f08:	20006f4c 	.word	0x20006f4c
 8007f0c:	20006f2c 	.word	0x20006f2c

08007f10 <ExecuteMonitor>:

/*-----------------------------------------------------------*/


void ExecuteMonitor(void)
{
 8007f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f12:	46de      	mov	lr, fp
 8007f14:	4657      	mov	r7, sl
 8007f16:	464e      	mov	r6, r9
 8007f18:	4645      	mov	r5, r8
 8007f1a:	b5e0      	push	{r5, r6, r7, lr}
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(time == INTIAL_VALUE)
 8007f1c:	4bd4      	ldr	r3, [pc, #848]	; (8008270 <ExecuteMonitor+0x360>)
{
 8007f1e:	b085      	sub	sp, #20
    if(time == INTIAL_VALUE)
 8007f20:	469b      	mov	fp, r3
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d006      	beq.n	8007f36 <ExecuteMonitor+0x26>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
  	          	    memset (&UARTRxBuf[2][0],0, COMMAND_SIZE);
		           }
	}
  }
}
 8007f28:	b005      	add	sp, #20
 8007f2a:	bc3c      	pop	{r2, r3, r4, r5}
 8007f2c:	4690      	mov	r8, r2
 8007f2e:	4699      	mov	r9, r3
 8007f30:	46a2      	mov	sl, r4
 8007f32:	46ab      	mov	fp, r5
 8007f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	time=0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	465a      	mov	r2, fp
 8007f3a:	6013      	str	r3, [r2, #0]
	flag=0;
 8007f3c:	7113      	strb	r3, [r2, #4]
	currentCharacter=SPACE;
 8007f3e:	3320      	adds	r3, #32
 8007f40:	7153      	strb	r3, [r2, #5]
 8007f42:	4bcc      	ldr	r3, [pc, #816]	; (8008274 <ExecuteMonitor+0x364>)
 8007f44:	4ecc      	ldr	r6, [pc, #816]	; (8008278 <ExecuteMonitor+0x368>)
 8007f46:	4699      	mov	r9, r3
 8007f48:	4bcc      	ldr	r3, [pc, #816]	; (800827c <ExecuteMonitor+0x36c>)
 8007f4a:	4dcd      	ldr	r5, [pc, #820]	; (8008280 <ExecuteMonitor+0x370>)
 8007f4c:	469a      	mov	sl, r3
 8007f4e:	4ccd      	ldr	r4, [pc, #820]	; (8008284 <ExecuteMonitor+0x374>)
		                    nonProcessingParameterIndex=0;
 8007f50:	2200      	movs	r2, #0
 8007f52:	4bcd      	ldr	r3, [pc, #820]	; (8008288 <ExecuteMonitor+0x378>)
		            	    perviousCharacter= INTIAL_VALUE;
 8007f54:	2703      	movs	r7, #3
		                    nonProcessingParameterIndex=0;
 8007f56:	701a      	strb	r2, [r3, #0]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007f58:	2320      	movs	r3, #32
 8007f5a:	4698      	mov	r8, r3
 8007f5c:	e004      	b.n	8007f68 <ExecuteMonitor+0x58>
 8007f5e:	2a01      	cmp	r2, #1
 8007f60:	d04c      	beq.n	8007ffc <ExecuteMonitor+0xec>
 8007f62:	2a02      	cmp	r2, #2
 8007f64:	d100      	bne.n	8007f68 <ExecuteMonitor+0x58>
 8007f66:	e0a8      	b.n	80080ba <ExecuteMonitor+0x1aa>
		            	    perviousCharacter= INTIAL_VALUE;
 8007f68:	464b      	mov	r3, r9
		            	    Delay_us(100);
 8007f6a:	2064      	movs	r0, #100	; 0x64
		            	    perviousCharacter= INTIAL_VALUE;
 8007f6c:	701f      	strb	r7, [r3, #0]
		            	    Delay_us(100);
 8007f6e:	f005 f83b 	bl	800cfe8 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 8007f72:	465b      	mov	r3, fp
 8007f74:	464a      	mov	r2, r9
 8007f76:	795b      	ldrb	r3, [r3, #5]
 8007f78:	7812      	ldrb	r2, [r2, #0]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d00b      	beq.n	8007f96 <ExecuteMonitor+0x86>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 8007f7e:	4ac2      	ldr	r2, [pc, #776]	; (8008288 <ExecuteMonitor+0x378>)
 8007f80:	48c1      	ldr	r0, [pc, #772]	; (8008288 <ExecuteMonitor+0x378>)
 8007f82:	7812      	ldrb	r2, [r2, #0]
 8007f84:	1c51      	adds	r1, r2, #1
 8007f86:	7001      	strb	r1, [r0, #0]
 8007f88:	2128      	movs	r1, #40	; 0x28
 8007f8a:	4452      	add	r2, sl
 8007f8c:	5453      	strb	r3, [r2, r1]
								perviousCharacter=currentCharacter;
 8007f8e:	464a      	mov	r2, r9
 8007f90:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 8007f92:	465a      	mov	r2, fp
 8007f94:	7157      	strb	r7, [r2, #5]
 8007f96:	465a      	mov	r2, fp
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007f98:	4641      	mov	r1, r8
 8007f9a:	7912      	ldrb	r2, [r2, #4]
 8007f9c:	438b      	bics	r3, r1
 8007f9e:	d1de      	bne.n	8007f5e <ExecuteMonitor+0x4e>
                   if(flag == NonActive)
 8007fa0:	2a00      	cmp	r2, #0
 8007fa2:	d129      	bne.n	8007ff8 <ExecuteMonitor+0xe8>
                	   nonProcessingParameterIndex=0;
 8007fa4:	4bb8      	ldr	r3, [pc, #736]	; (8008288 <ExecuteMonitor+0x378>)
 8007fa6:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 8007fa8:	4653      	mov	r3, sl
 8007faa:	3228      	adds	r2, #40	; 0x28
 8007fac:	5c9b      	ldrb	r3, [r3, r2]
 8007fae:	2b5b      	cmp	r3, #91	; 0x5b
 8007fb0:	d100      	bne.n	8007fb4 <ExecuteMonitor+0xa4>
 8007fb2:	e0eb      	b.n	800818c <ExecuteMonitor+0x27c>
 		            else if(FirstCharacterInParameter == '#')
 8007fb4:	2b23      	cmp	r3, #35	; 0x23
 8007fb6:	d100      	bne.n	8007fba <ExecuteMonitor+0xaa>
 8007fb8:	e141      	b.n	800823e <ExecuteMonitor+0x32e>
 		            else if(FirstCharacterInParameter == '=')
 8007fba:	2b3d      	cmp	r3, #61	; 0x3d
 8007fbc:	d100      	bne.n	8007fc0 <ExecuteMonitor+0xb0>
 8007fbe:	e175      	b.n	80082ac <ExecuteMonitor+0x39c>
 8007fc0:	233c      	movs	r3, #60	; 0x3c
 8007fc2:	4652      	mov	r2, sl
 8007fc4:	5cd7      	ldrb	r7, [r2, r3]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007fc6:	4650      	mov	r0, sl
               	   desiredArray=ParameterLocationIn2dArray;
 8007fc8:	4bb0      	ldr	r3, [pc, #704]	; (800828c <ExecuteMonitor+0x37c>)
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007fca:	0139      	lsls	r1, r7, #4
               	   desiredArray=ParameterLocationIn2dArray;
 8007fcc:	701f      	strb	r7, [r3, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007fce:	3050      	adds	r0, #80	; 0x50
 8007fd0:	1bcf      	subs	r7, r1, r7
 8007fd2:	19c0      	adds	r0, r0, r7
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 8007fd4:	4657      	mov	r7, sl
 8007fd6:	373c      	adds	r7, #60	; 0x3c
 8007fd8:	0039      	movs	r1, r7
 8007fda:	220f      	movs	r2, #15
 8007fdc:	f00a fe91 	bl	8012d02 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 8007fe0:	4650      	mov	r0, sl
 8007fe2:	2214      	movs	r2, #20
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	3028      	adds	r0, #40	; 0x28
 8007fe8:	f00a fe94 	bl	8012d14 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 8007fec:	2214      	movs	r2, #20
 8007fee:	2100      	movs	r1, #0
 8007ff0:	0038      	movs	r0, r7
 8007ff2:	f00a fe8f 	bl	8012d14 <memset>
 8007ff6:	e7ab      	b.n	8007f50 <ExecuteMonitor+0x40>
                   if(flag == RUN_FOR_ONCE)
 8007ff8:	2a01      	cmp	r2, #1
 8007ffa:	d15b      	bne.n	80080b4 <ExecuteMonitor+0x1a4>
                	twoDMatrixIndex=1;
 8007ffc:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 8007ffe:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 8008000:	702b      	strb	r3, [r5, #0]
		          	counter=0;
 8008002:	4ba3      	ldr	r3, [pc, #652]	; (8008290 <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 8008004:	7032      	strb	r2, [r6, #0]
		          	counter=0;
 8008006:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 8008008:	4ba2      	ldr	r3, [pc, #648]	; (8008294 <ExecuteMonitor+0x384>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d02e      	beq.n	800806e <ExecuteMonitor+0x15e>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8008010:	2250      	movs	r2, #80	; 0x50
		           while(counter != numCommandParameters)
 8008012:	2100      	movs	r1, #0
 8008014:	2300      	movs	r3, #0
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8008016:	4690      	mov	r8, r2
		           while(counter != numCommandParameters)
 8008018:	2201      	movs	r2, #1
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800801a:	0010      	movs	r0, r2
 800801c:	2720      	movs	r7, #32
 800801e:	001a      	movs	r2, r3
 8008020:	0003      	movs	r3, r0
 8008022:	e002      	b.n	800802a <ExecuteMonitor+0x11a>
 8008024:	4b9a      	ldr	r3, [pc, #616]	; (8008290 <ExecuteMonitor+0x380>)
 8008026:	781a      	ldrb	r2, [r3, #0]
 8008028:	782b      	ldrb	r3, [r5, #0]
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800802a:	1c58      	adds	r0, r3, #1
 800802c:	7028      	strb	r0, [r5, #0]
 800802e:	1c48      	adds	r0, r1, #1
 8008030:	7030      	strb	r0, [r6, #0]
 8008032:	0110      	lsls	r0, r2, #4
 8008034:	1a82      	subs	r2, r0, r2
 8008036:	4452      	add	r2, sl
 8008038:	18d2      	adds	r2, r2, r3
 800803a:	4643      	mov	r3, r8
 800803c:	5cd3      	ldrb	r3, [r2, r3]
 800803e:	2248      	movs	r2, #72	; 0x48
 8008040:	1861      	adds	r1, r4, r1
		            	Delay_ms(1);
 8008042:	2001      	movs	r0, #1
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8008044:	548b      	strb	r3, [r1, r2]
		            	Delay_ms(1);
 8008046:	f007 fa63 	bl	800f510 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800804a:	7831      	ldrb	r1, [r6, #0]
 800804c:	1863      	adds	r3, r4, r1
 800804e:	3347      	adds	r3, #71	; 0x47
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	43bb      	bics	r3, r7
 8008054:	d1e6      	bne.n	8008024 <ExecuteMonitor+0x114>
		                   counter++;
 8008056:	4b8e      	ldr	r3, [pc, #568]	; (8008290 <ExecuteMonitor+0x380>)
 8008058:	4a8d      	ldr	r2, [pc, #564]	; (8008290 <ExecuteMonitor+0x380>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	3301      	adds	r3, #1
 800805e:	b2db      	uxtb	r3, r3
 8008060:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 8008062:	2201      	movs	r2, #1
 8008064:	702a      	strb	r2, [r5, #0]
		           while(counter != numCommandParameters)
 8008066:	4a8b      	ldr	r2, [pc, #556]	; (8008294 <ExecuteMonitor+0x384>)
 8008068:	7812      	ldrb	r2, [r2, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d1d4      	bne.n	8008018 <ExecuteMonitor+0x108>
		          		   flag=0;
 800806e:	2300      	movs	r3, #0
 8008070:	465a      	mov	r2, fp
 8008072:	7113      	strb	r3, [r2, #4]
		          		   counter=0;
 8008074:	4a86      	ldr	r2, [pc, #536]	; (8008290 <ExecuteMonitor+0x380>)
		          			UARTRxBuf[2][index]=finalMatrix[index];
 8008076:	2748      	movs	r7, #72	; 0x48
		          		   counter=0;
 8008078:	7013      	strb	r3, [r2, #0]
  	          		 for( index=0;index<COMMAND_SIZE;index++)
 800807a:	4a87      	ldr	r2, [pc, #540]	; (8008298 <ExecuteMonitor+0x388>)
 800807c:	7013      	strb	r3, [r2, #0]
 800807e:	2300      	movs	r3, #0
		          			UARTRxBuf[2][index]=finalMatrix[index];
 8008080:	4a86      	ldr	r2, [pc, #536]	; (800829c <ExecuteMonitor+0x38c>)
		          			Delay_ms(1);
 8008082:	2001      	movs	r0, #1
		          			UARTRxBuf[2][index]=finalMatrix[index];
 8008084:	18d2      	adds	r2, r2, r3
 8008086:	18e3      	adds	r3, r4, r3
 8008088:	5ddb      	ldrb	r3, [r3, r7]
 800808a:	3281      	adds	r2, #129	; 0x81
 800808c:	32ff      	adds	r2, #255	; 0xff
 800808e:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 8008090:	f007 fa3e 	bl	800f510 <HAL_Delay>
  	          		 for( index=0;index<COMMAND_SIZE;index++)
 8008094:	4b80      	ldr	r3, [pc, #512]	; (8008298 <ExecuteMonitor+0x388>)
 8008096:	4a80      	ldr	r2, [pc, #512]	; (8008298 <ExecuteMonitor+0x388>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	3301      	adds	r3, #1
 800809c:	b2db      	uxtb	r3, r3
 800809e:	7013      	strb	r3, [r2, #0]
 80080a0:	2b3f      	cmp	r3, #63	; 0x3f
 80080a2:	d9ed      	bls.n	8008080 <ExecuteMonitor+0x170>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 80080a4:	0020      	movs	r0, r4
 80080a6:	2240      	movs	r2, #64	; 0x40
 80080a8:	3048      	adds	r0, #72	; 0x48
 80080aa:	2100      	movs	r1, #0
 80080ac:	f00a fe32 	bl	8012d14 <memset>
 80080b0:	465b      	mov	r3, fp
 80080b2:	791a      	ldrb	r2, [r3, #4]
                   if(flag == CONTINUOUS_RUN)
 80080b4:	2a02      	cmp	r2, #2
 80080b6:	d000      	beq.n	80080ba <ExecuteMonitor+0x1aa>
 80080b8:	e74a      	b.n	8007f50 <ExecuteMonitor+0x40>
                	twoDMatrixIndex=1;
 80080ba:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 80080bc:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 80080be:	702b      	strb	r3, [r5, #0]
   		          	counter=0;
 80080c0:	4b73      	ldr	r3, [pc, #460]	; (8008290 <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 80080c2:	7032      	strb	r2, [r6, #0]
   		          	counter=0;
 80080c4:	701a      	strb	r2, [r3, #0]
   		           while(counter != numCommandParameters)
 80080c6:	4b73      	ldr	r3, [pc, #460]	; (8008294 <ExecuteMonitor+0x384>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d033      	beq.n	8008136 <ExecuteMonitor+0x226>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80080ce:	2250      	movs	r2, #80	; 0x50
   		           while(counter != numCommandParameters)
 80080d0:	2100      	movs	r1, #0
 80080d2:	2300      	movs	r3, #0
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80080d4:	4690      	mov	r8, r2
   		           while(counter != numCommandParameters)
 80080d6:	2201      	movs	r2, #1
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80080d8:	0010      	movs	r0, r2
 80080da:	2720      	movs	r7, #32
 80080dc:	001a      	movs	r2, r3
 80080de:	0003      	movs	r3, r0
 80080e0:	e001      	b.n	80080e6 <ExecuteMonitor+0x1d6>
 80080e2:	781a      	ldrb	r2, [r3, #0]
 80080e4:	782b      	ldrb	r3, [r5, #0]
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80080e6:	1c58      	adds	r0, r3, #1
 80080e8:	7028      	strb	r0, [r5, #0]
 80080ea:	1c48      	adds	r0, r1, #1
 80080ec:	7030      	strb	r0, [r6, #0]
 80080ee:	0110      	lsls	r0, r2, #4
 80080f0:	1a82      	subs	r2, r0, r2
 80080f2:	4452      	add	r2, sl
 80080f4:	18d2      	adds	r2, r2, r3
 80080f6:	4643      	mov	r3, r8
 80080f8:	5cd3      	ldrb	r3, [r2, r3]
 80080fa:	2248      	movs	r2, #72	; 0x48
 80080fc:	1861      	adds	r1, r4, r1
   		            	Delay_ms(1);
 80080fe:	2001      	movs	r0, #1
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8008100:	548b      	strb	r3, [r1, r2]
   		            	Delay_ms(1);
 8008102:	f007 fa05 	bl	800f510 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8008106:	7831      	ldrb	r1, [r6, #0]
 8008108:	1863      	adds	r3, r4, r1
 800810a:	3347      	adds	r3, #71	; 0x47
 800810c:	781a      	ldrb	r2, [r3, #0]
 800810e:	4b60      	ldr	r3, [pc, #384]	; (8008290 <ExecuteMonitor+0x380>)
 8008110:	43ba      	bics	r2, r7
 8008112:	d1e6      	bne.n	80080e2 <ExecuteMonitor+0x1d2>
   		             counter++;
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	485e      	ldr	r0, [pc, #376]	; (8008290 <ExecuteMonitor+0x380>)
 8008118:	3301      	adds	r3, #1
 800811a:	b2db      	uxtb	r3, r3
 800811c:	7003      	strb	r3, [r0, #0]
   		             twoDMatrixIndex=1;
 800811e:	2001      	movs	r0, #1
 8008120:	7028      	strb	r0, [r5, #0]
   		           while(counter != numCommandParameters)
 8008122:	485c      	ldr	r0, [pc, #368]	; (8008294 <ExecuteMonitor+0x384>)
 8008124:	7800      	ldrb	r0, [r0, #0]
 8008126:	4298      	cmp	r0, r3
 8008128:	d1d5      	bne.n	80080d6 <ExecuteMonitor+0x1c6>
 800812a:	465b      	mov	r3, fp
		            counter=0;
 800812c:	4958      	ldr	r1, [pc, #352]	; (8008290 <ExecuteMonitor+0x380>)
 800812e:	791b      	ldrb	r3, [r3, #4]
 8008130:	700a      	strb	r2, [r1, #0]
                  while(flag != NonActive)
 8008132:	2b00      	cmp	r3, #0
 8008134:	d01e      	beq.n	8008174 <ExecuteMonitor+0x264>
		          			UARTRxBuf[2][index]=finalMatrix[index];
 8008136:	2748      	movs	r7, #72	; 0x48
  	          		 for( index=0;index<COMMAND_SIZE;index++)
 8008138:	2200      	movs	r2, #0
 800813a:	4b57      	ldr	r3, [pc, #348]	; (8008298 <ExecuteMonitor+0x388>)
 800813c:	701a      	strb	r2, [r3, #0]
 800813e:	2300      	movs	r3, #0
		          			UARTRxBuf[2][index]=finalMatrix[index];
 8008140:	4a56      	ldr	r2, [pc, #344]	; (800829c <ExecuteMonitor+0x38c>)
		          			Delay_us(200);
 8008142:	20c8      	movs	r0, #200	; 0xc8
		          			UARTRxBuf[2][index]=finalMatrix[index];
 8008144:	18d2      	adds	r2, r2, r3
 8008146:	18e3      	adds	r3, r4, r3
 8008148:	5ddb      	ldrb	r3, [r3, r7]
 800814a:	3281      	adds	r2, #129	; 0x81
 800814c:	32ff      	adds	r2, #255	; 0xff
 800814e:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 8008150:	f004 ff4a 	bl	800cfe8 <StartMicroDelay>
  	          		 for( index=0;index<COMMAND_SIZE;index++)
 8008154:	4b50      	ldr	r3, [pc, #320]	; (8008298 <ExecuteMonitor+0x388>)
 8008156:	4a50      	ldr	r2, [pc, #320]	; (8008298 <ExecuteMonitor+0x388>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	3301      	adds	r3, #1
 800815c:	b2db      	uxtb	r3, r3
 800815e:	7013      	strb	r3, [r2, #0]
 8008160:	2b3f      	cmp	r3, #63	; 0x3f
 8008162:	d9ed      	bls.n	8008140 <ExecuteMonitor+0x230>
  	          		 Delay_ms(time);
 8008164:	465b      	mov	r3, fp
 8008166:	6818      	ldr	r0, [r3, #0]
 8008168:	f007 f9d2 	bl	800f510 <HAL_Delay>
                  while(flag != NonActive)
 800816c:	465b      	mov	r3, fp
 800816e:	791b      	ldrb	r3, [r3, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e1      	bne.n	8008138 <ExecuteMonitor+0x228>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8008174:	0020      	movs	r0, r4
 8008176:	2240      	movs	r2, #64	; 0x40
 8008178:	2100      	movs	r1, #0
 800817a:	3048      	adds	r0, #72	; 0x48
 800817c:	f00a fdca 	bl	8012d14 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, COMMAND_SIZE);
 8008180:	2240      	movs	r2, #64	; 0x40
 8008182:	2100      	movs	r1, #0
 8008184:	4846      	ldr	r0, [pc, #280]	; (80082a0 <ExecuteMonitor+0x390>)
 8008186:	f00a fdc5 	bl	8012d14 <memset>
 800818a:	e6e1      	b.n	8007f50 <ExecuteMonitor+0x40>
 		            	nonProcessingParameterIndex++;
 800818c:	4a3e      	ldr	r2, [pc, #248]	; (8008288 <ExecuteMonitor+0x378>)
 800818e:	3b5a      	subs	r3, #90	; 0x5a
 8008190:	7013      	strb	r3, [r2, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8008192:	4b44      	ldr	r3, [pc, #272]	; (80082a4 <ExecuteMonitor+0x394>)
 8008194:	210a      	movs	r1, #10
 8008196:	781f      	ldrb	r7, [r3, #0]
 8008198:	4653      	mov	r3, sl
 800819a:	9701      	str	r7, [sp, #4]
 800819c:	3328      	adds	r3, #40	; 0x28
 800819e:	7858      	ldrb	r0, [r3, #1]
 80081a0:	f7f8 f85c 	bl	800025c <__aeabi_uidivmod>
 80081a4:	2303      	movs	r3, #3
 80081a6:	b2c9      	uxtb	r1, r1
 80081a8:	4698      	mov	r8, r3
 80081aa:	42b9      	cmp	r1, r7
 80081ac:	d101      	bne.n	80081b2 <ExecuteMonitor+0x2a2>
 80081ae:	e0a1      	b.n	80082f4 <ExecuteMonitor+0x3e4>
 80081b0:	46b8      	mov	r8, r7
 80081b2:	4643      	mov	r3, r8
 80081b4:	1c9f      	adds	r7, r3, #2
 80081b6:	4653      	mov	r3, sl
 80081b8:	2228      	movs	r2, #40	; 0x28
 80081ba:	4443      	add	r3, r8
 80081bc:	5c98      	ldrb	r0, [r3, r2]
 80081be:	210a      	movs	r1, #10
 80081c0:	f7f8 f84c 	bl	800025c <__aeabi_uidivmod>
 80081c4:	9b01      	ldr	r3, [sp, #4]
 80081c6:	b2c9      	uxtb	r1, r1
 80081c8:	b2ff      	uxtb	r7, r7
 80081ca:	4299      	cmp	r1, r3
 80081cc:	d1f0      	bne.n	80081b0 <ExecuteMonitor+0x2a0>
 80081ce:	4643      	mov	r3, r8
 80081d0:	46b8      	mov	r8, r7
 80081d2:	3301      	adds	r3, #1
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	9301      	str	r3, [sp, #4]
 80081d8:	9702      	str	r7, [sp, #8]
 		            			nonProcessingParameterIndex++;
 80081da:	4a2b      	ldr	r2, [pc, #172]	; (8008288 <ExecuteMonitor+0x378>)
 80081dc:	9901      	ldr	r1, [sp, #4]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 80081de:	4453      	add	r3, sl
 		            			nonProcessingParameterIndex++;
 80081e0:	7011      	strb	r1, [r2, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 80081e2:	2228      	movs	r2, #40	; 0x28
 80081e4:	5c9b      	ldrb	r3, [r3, r2]
 80081e6:	210a      	movs	r1, #10
 80081e8:	0018      	movs	r0, r3
 80081ea:	9303      	str	r3, [sp, #12]
 80081ec:	f7f8 f836 	bl	800025c <__aeabi_uidivmod>
 80081f0:	233c      	movs	r3, #60	; 0x3c
 80081f2:	4652      	mov	r2, sl
 80081f4:	b2cf      	uxtb	r7, r1
 80081f6:	54d7      	strb	r7, [r2, r3]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 80081f8:	9b03      	ldr	r3, [sp, #12]
 80081fa:	2b5d      	cmp	r3, #93	; 0x5d
 80081fc:	d00d      	beq.n	800821a <ExecuteMonitor+0x30a>
 80081fe:	9b01      	ldr	r3, [sp, #4]
 8008200:	3301      	adds	r3, #1
 8008202:	b2db      	uxtb	r3, r3
 8008204:	e000      	b.n	8008208 <ExecuteMonitor+0x2f8>
 8008206:	0013      	movs	r3, r2
 8008208:	2128      	movs	r1, #40	; 0x28
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	4453      	add	r3, sl
 800820e:	5c5b      	ldrb	r3, [r3, r1]
 8008210:	b2d2      	uxtb	r2, r2
 8008212:	2b5d      	cmp	r3, #93	; 0x5d
 8008214:	d1f7      	bne.n	8008206 <ExecuteMonitor+0x2f6>
 8008216:	4690      	mov	r8, r2
 8008218:	9202      	str	r2, [sp, #8]
 		            	nonProcessingParameterIndex++;
 800821a:	4642      	mov	r2, r8
 800821c:	4b1a      	ldr	r3, [pc, #104]	; (8008288 <ExecuteMonitor+0x378>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800821e:	4651      	mov	r1, sl
 		            	nonProcessingParameterIndex++;
 8008220:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 8008222:	2301      	movs	r3, #1
 8008224:	4a20      	ldr	r2, [pc, #128]	; (80082a8 <ExecuteMonitor+0x398>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008226:	4650      	mov	r0, sl
 		            	processingParameterIndex=1;
 8008228:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800822a:	9b02      	ldr	r3, [sp, #8]
 800822c:	2214      	movs	r2, #20
 800822e:	469c      	mov	ip, r3
 8008230:	3128      	adds	r1, #40	; 0x28
 8008232:	1ad2      	subs	r2, r2, r3
 8008234:	4461      	add	r1, ip
 8008236:	303d      	adds	r0, #61	; 0x3d
 8008238:	f00a fd63 	bl	8012d02 <memcpy>
 800823c:	e6c3      	b.n	8007fc6 <ExecuteMonitor+0xb6>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 800823e:	4653      	mov	r3, sl
 8008240:	3328      	adds	r3, #40	; 0x28
 8008242:	7858      	ldrb	r0, [r3, #1]
 8008244:	210a      	movs	r1, #10
 8008246:	f7f8 f809 	bl	800025c <__aeabi_uidivmod>
 800824a:	4652      	mov	r2, sl
 800824c:	233c      	movs	r3, #60	; 0x3c
 800824e:	b2cf      	uxtb	r7, r1
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008250:	4650      	mov	r0, sl
 8008252:	4651      	mov	r1, sl
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 8008254:	54d7      	strb	r7, [r2, r3]
 		            	nonProcessingParameterIndex=2;
 8008256:	4a0c      	ldr	r2, [pc, #48]	; (8008288 <ExecuteMonitor+0x378>)
 8008258:	3b3a      	subs	r3, #58	; 0x3a
 800825a:	7013      	strb	r3, [r2, #0]
 		            	processingParameterIndex=1;
 800825c:	4a12      	ldr	r2, [pc, #72]	; (80082a8 <ExecuteMonitor+0x398>)
 800825e:	3b01      	subs	r3, #1
 8008260:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008262:	312a      	adds	r1, #42	; 0x2a
 8008264:	2212      	movs	r2, #18
 8008266:	303d      	adds	r0, #61	; 0x3d
 8008268:	f00a fd4b 	bl	8012d02 <memcpy>
 800826c:	e6ab      	b.n	8007fc6 <ExecuteMonitor+0xb6>
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	20000000 	.word	0x20000000
 8008274:	20006f28 	.word	0x20006f28
 8008278:	20006f6c 	.word	0x20006f6c
 800827c:	20001810 	.word	0x20001810
 8008280:	20006f69 	.word	0x20006f69
 8008284:	20001890 	.word	0x20001890
 8008288:	20006f49 	.word	0x20006f49
 800828c:	20006f6b 	.word	0x20006f6b
 8008290:	20006f4a 	.word	0x20006f4a
 8008294:	20006f68 	.word	0x20006f68
 8008298:	20006f4b 	.word	0x20006f4b
 800829c:	2000138c 	.word	0x2000138c
 80082a0:	2000150c 	.word	0x2000150c
 80082a4:	20006f6a 	.word	0x20006f6a
 80082a8:	20006f48 	.word	0x20006f48
                	    digitTheCommand=nonProcessingParameter[1]%10;
 80082ac:	4657      	mov	r7, sl
 80082ae:	3728      	adds	r7, #40	; 0x28
 80082b0:	7878      	ldrb	r0, [r7, #1]
 80082b2:	210a      	movs	r1, #10
 80082b4:	f7f7 ffd2 	bl	800025c <__aeabi_uidivmod>
 80082b8:	4b11      	ldr	r3, [pc, #68]	; (8008300 <ExecuteMonitor+0x3f0>)
 80082ba:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 80082bc:	78b8      	ldrb	r0, [r7, #2]
 80082be:	210a      	movs	r1, #10
 80082c0:	f7f7 ffcc 	bl	800025c <__aeabi_uidivmod>
 80082c4:	4b0f      	ldr	r3, [pc, #60]	; (8008304 <ExecuteMonitor+0x3f4>)
 80082c6:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 80082c8:	78f8      	ldrb	r0, [r7, #3]
 80082ca:	210a      	movs	r1, #10
 80082cc:	f7f7 ffc6 	bl	800025c <__aeabi_uidivmod>
 80082d0:	4652      	mov	r2, sl
 80082d2:	233c      	movs	r3, #60	; 0x3c
 80082d4:	b2cf      	uxtb	r7, r1
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80082d6:	4650      	mov	r0, sl
 80082d8:	4651      	mov	r1, sl
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 80082da:	54d7      	strb	r7, [r2, r3]
                	    nonProcessingParameterIndex=4;
 80082dc:	4a0a      	ldr	r2, [pc, #40]	; (8008308 <ExecuteMonitor+0x3f8>)
 80082de:	3b38      	subs	r3, #56	; 0x38
 80082e0:	7013      	strb	r3, [r2, #0]
                	    processingParameterIndex=1;
 80082e2:	4a0a      	ldr	r2, [pc, #40]	; (800830c <ExecuteMonitor+0x3fc>)
 80082e4:	3b03      	subs	r3, #3
 80082e6:	7013      	strb	r3, [r2, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80082e8:	312c      	adds	r1, #44	; 0x2c
 80082ea:	2210      	movs	r2, #16
 80082ec:	303d      	adds	r0, #61	; 0x3d
 80082ee:	f00a fd08 	bl	8012d02 <memcpy>
 80082f2:	e668      	b.n	8007fc6 <ExecuteMonitor+0xb6>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 80082f4:	2202      	movs	r2, #2
 80082f6:	9302      	str	r3, [sp, #8]
 80082f8:	9201      	str	r2, [sp, #4]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	e76d      	b.n	80081da <ExecuteMonitor+0x2ca>
 80082fe:	46c0      	nop			; (mov r8, r8)
 8008300:	20006f6a 	.word	0x20006f6a
 8008304:	20006f68 	.word	0x20006f68
 8008308:	20006f49 	.word	0x20006f49
 800830c:	20006f48 	.word	0x20006f48

08008310 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	4c1e      	ldr	r4, [pc, #120]	; (800838c <StartDefaultTask+0x7c>)
 8008314:	4d1e      	ldr	r5, [pc, #120]	; (8008390 <StartDefaultTask+0x80>)
 8008316:	4e1f      	ldr	r6, [pc, #124]	; (8008394 <StartDefaultTask+0x84>)
 8008318:	e00f      	b.n	800833a <StartDefaultTask+0x2a>
		switch(indMode){
 800831a:	2b03      	cmp	r3, #3
 800831c:	d024      	beq.n	8008368 <StartDefaultTask+0x58>
 800831e:	2b01      	cmp	r3, #1
 8008320:	d02b      	beq.n	800837a <StartDefaultTask+0x6a>
		CheckAttachedButtons();
 8008322:	f000 fd95 	bl	8008e50 <CheckAttachedButtons>
		ExecuteSnippet();
 8008326:	f7fd f977 	bl	8005618 <ExecuteSnippet>
		ExecuteMonitor();
 800832a:	f7ff fdf1 	bl	8007f10 <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 800832e:	782b      	ldrb	r3, [r5, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d100      	bne.n	8008336 <StartDefaultTask+0x26>
			delayButtonStateReset = false;
 8008334:	7033      	strb	r3, [r6, #0]
		taskYIELD();
 8008336:	f006 ff93 	bl	800f260 <vPortYield>
		switch(indMode){
 800833a:	7823      	ldrb	r3, [r4, #0]
 800833c:	2b02      	cmp	r3, #2
 800833e:	d1ec      	bne.n	800831a <StartDefaultTask+0xa>
				RTOS_IND_blink(100);
 8008340:	2180      	movs	r1, #128	; 0x80
 8008342:	2090      	movs	r0, #144	; 0x90
 8008344:	2201      	movs	r2, #1
 8008346:	05c0      	lsls	r0, r0, #23
 8008348:	0109      	lsls	r1, r1, #4
 800834a:	f008 fd7d 	bl	8010e48 <HAL_GPIO_WritePin>
 800834e:	2064      	movs	r0, #100	; 0x64
				RTOS_IND_blink(30);
 8008350:	f005 f95a 	bl	800d608 <osDelay>
 8008354:	2180      	movs	r1, #128	; 0x80
 8008356:	2090      	movs	r0, #144	; 0x90
 8008358:	2200      	movs	r2, #0
 800835a:	0109      	lsls	r1, r1, #4
 800835c:	05c0      	lsls	r0, r0, #23
 800835e:	f008 fd73 	bl	8010e48 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8008362:	2300      	movs	r3, #0
 8008364:	7023      	strb	r3, [r4, #0]
				break;
 8008366:	e7dc      	b.n	8008322 <StartDefaultTask+0x12>
				RTOS_IND_blink(30);
 8008368:	2180      	movs	r1, #128	; 0x80
 800836a:	2090      	movs	r0, #144	; 0x90
 800836c:	2201      	movs	r2, #1
 800836e:	05c0      	lsls	r0, r0, #23
 8008370:	0109      	lsls	r1, r1, #4
 8008372:	f008 fd69 	bl	8010e48 <HAL_GPIO_WritePin>
 8008376:	201e      	movs	r0, #30
 8008378:	e7ea      	b.n	8008350 <StartDefaultTask+0x40>
				RTOS_IND_blink(200);
 800837a:	2180      	movs	r1, #128	; 0x80
 800837c:	2090      	movs	r0, #144	; 0x90
 800837e:	2201      	movs	r2, #1
 8008380:	05c0      	lsls	r0, r0, #23
 8008382:	0109      	lsls	r1, r1, #4
 8008384:	f008 fd60 	bl	8010e48 <HAL_GPIO_WritePin>
 8008388:	20c8      	movs	r0, #200	; 0xc8
 800838a:	e7e1      	b.n	8008350 <StartDefaultTask+0x40>
 800838c:	2000117e 	.word	0x2000117e
 8008390:	200019cc 	.word	0x200019cc
 8008394:	200019c0 	.word	0x200019c0

08008398 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8008398:	4b04      	ldr	r3, [pc, #16]	; (80083ac <vMainConfigureTimerForRunTimeStats+0x14>)
void vMainConfigureTimerForRunTimeStats(void){
 800839a:	b510      	push	{r4, lr}
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 800839c:	6818      	ldr	r0, [r3, #0]
 800839e:	4904      	ldr	r1, [pc, #16]	; (80083b0 <vMainConfigureTimerForRunTimeStats+0x18>)
 80083a0:	f7f7 fed6 	bl	8000150 <__udivsi3>
 80083a4:	4b03      	ldr	r3, [pc, #12]	; (80083b4 <vMainConfigureTimerForRunTimeStats+0x1c>)
 80083a6:	6098      	str	r0, [r3, #8]
}
 80083a8:	bd10      	pop	{r4, pc}
 80083aa:	46c0      	nop			; (mov r8, r8)
 80083ac:	200000b0 	.word	0x200000b0
 80083b0:	00002710 	.word	0x00002710
 80083b4:	20001910 	.word	0x20001910

080083b8 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80083b8:	21fa      	movs	r1, #250	; 0xfa
 80083ba:	4b0f      	ldr	r3, [pc, #60]	; (80083f8 <ulMainGetRunTimeCounterValue+0x40>)
uint32_t ulMainGetRunTimeCounterValue(void){
 80083bc:	b570      	push	{r4, r5, r6, lr}
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80083be:	6818      	ldr	r0, [r3, #0]
 80083c0:	0089      	lsls	r1, r1, #2
 80083c2:	f7f7 fec5 	bl	8000150 <__udivsi3>
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80083c6:	4c0d      	ldr	r4, [pc, #52]	; (80083fc <ulMainGetRunTimeCounterValue+0x44>)
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80083c8:	1e45      	subs	r5, r0, #1
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80083ca:	6826      	ldr	r6, [r4, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 80083cc:	f006 f8ce 	bl	800e56c <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 80083d0:	4b0b      	ldr	r3, [pc, #44]	; (8008400 <ulMainGetRunTimeCounterValue+0x48>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	015b      	lsls	r3, r3, #5
 80083d6:	d50c      	bpl.n	80083f2 <ulMainGetRunTimeCounterValue+0x3a>
		 but the tick count not yet incremented. */
		ulTickCount++;
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80083d8:	6823      	ldr	r3, [r4, #0]
		ulTickCount++;
 80083da:	3001      	adds	r0, #1
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80083dc:	1aed      	subs	r5, r5, r3
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80083de:	4b09      	ldr	r3, [pc, #36]	; (8008404 <ulMainGetRunTimeCounterValue+0x4c>)
	ulReturn =(ulTickCount * 10UL);
 80083e0:	0084      	lsls	r4, r0, #2
 80083e2:	1824      	adds	r4, r4, r0
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80083e4:	6899      	ldr	r1, [r3, #8]
 80083e6:	0028      	movs	r0, r5
 80083e8:	f7f7 feb2 	bl	8000150 <__udivsi3>
	ulReturn =(ulTickCount * 10UL);
 80083ec:	0064      	lsls	r4, r4, #1
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80083ee:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 80083f0:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80083f2:	1bad      	subs	r5, r5, r6
 80083f4:	e7f3      	b.n	80083de <ulMainGetRunTimeCounterValue+0x26>
 80083f6:	46c0      	nop			; (mov r8, r8)
 80083f8:	200000b0 	.word	0x200000b0
 80083fc:	e000e018 	.word	0xe000e018
 8008400:	e000ed04 	.word	0xe000ed04
 8008404:	20001910 	.word	0x20001910

08008408 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port){
}
 8008408:	4770      	bx	lr
 800840a:	46c0      	nop			; (mov r8, r8)

0800840c <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 800840c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 =0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if(BOS_initialized){
 800840e:	4d37      	ldr	r5, [pc, #220]	; (80084ec <AddPortButton+0xe0>)
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 8008410:	b08d      	sub	sp, #52	; 0x34
	if(BOS_initialized){
 8008412:	782b      	ldrb	r3, [r5, #0]
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 8008414:	0006      	movs	r6, r0
 8008416:	000c      	movs	r4, r1
	if(BOS_initialized){
 8008418:	2b00      	cmp	r3, #0
 800841a:	d152      	bne.n	80084c2 <AddPortButton+0xb6>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] =PORTBUTTON;
 800841c:	2204      	movs	r2, #4
 800841e:	4b34      	ldr	r3, [pc, #208]	; (80084f0 <AddPortButton+0xe4>)
 8008420:	545a      	strb	r2, [r3, r1]
	if(BOS_initialized){
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 8008422:	250e      	movs	r5, #14
 8008424:	af04      	add	r7, sp, #16
 8008426:	446d      	add	r5, sp
 8008428:	002a      	movs	r2, r5
 800842a:	ab06      	add	r3, sp, #24
 800842c:	a905      	add	r1, sp, #20
 800842e:	9700      	str	r7, [sp, #0]
 8008430:	0020      	movs	r0, r4
 8008432:	f004 fa49 	bl	800c8c8 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin =TX_Pin;
 8008436:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008438:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin =TX_Pin;
 800843a:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800843c:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init((GPIO_TypeDef* )TX_Port,&GPIO_InitStruct);
 800843e:	a907      	add	r1, sp, #28
 8008440:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008442:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008444:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008446:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )TX_Port,&GPIO_InitStruct);
 8008448:	f008 fb5e 	bl	8010b08 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin =RX_Pin;
 800844c:	883b      	ldrh	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 800844e:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin =RX_Pin;
 8008450:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008452:	2302      	movs	r3, #2
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 8008454:	9806      	ldr	r0, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008456:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008458:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 800845a:	f008 fb55 	bl	8010b08 <HAL_GPIO_Init>
	
	/* 4. Update button struct */
	button[port].type =buttonType;
 800845e:	00e2      	lsls	r2, r4, #3
 8008460:	4b24      	ldr	r3, [pc, #144]	; (80084f4 <AddPortButton+0xe8>)
 8008462:	1912      	adds	r2, r2, r4
 8008464:	189b      	adds	r3, r3, r2
	
	/* 5. Add to EEPROM if not already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8008466:	0025      	movs	r5, r4
	button[port].type =buttonType;
 8008468:	705e      	strb	r6, [r3, #1]
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 800846a:	2312      	movs	r3, #18
 800846c:	353a      	adds	r5, #58	; 0x3a
 800846e:	00ad      	lsls	r5, r5, #2
 8008470:	446b      	add	r3, sp
 8008472:	0019      	movs	r1, r3
 8008474:	0028      	movs	r0, r5
 8008476:	f7ff f9e5 	bl	8007844 <EE_ReadVariable>
	if(!res)											// This variable exists
 800847a:	2800      	cmp	r0, #0
 800847c:	d109      	bne.n	8008492 <AddPortButton+0x86>
	{
		temp8 =(uint8_t )(temp16 >> 8);
 800847e:	466b      	mov	r3, sp
 8008480:	8a5b      	ldrh	r3, [r3, #18]
 8008482:	0a1b      	lsrs	r3, r3, #8
		if(((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))											// This is same port and same type, do not update
 8008484:	091a      	lsrs	r2, r3, #4
 8008486:	42a2      	cmp	r2, r4
 8008488:	d103      	bne.n	8008492 <AddPortButton+0x86>
 800848a:	220f      	movs	r2, #15
 800848c:	4013      	ands	r3, r2
 800848e:	42b3      	cmp	r3, r6
 8008490:	d014      	beq.n	80084bc <AddPortButton+0xb0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
		}
	}
	else							// Variable does not exist. Create a new one
	{
		temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 8008492:	466b      	mov	r3, sp
 8008494:	0324      	lsls	r4, r4, #12
 8008496:	0231      	lsls	r1, r6, #8
 8008498:	4321      	orrs	r1, r4
 800849a:	b289      	uxth	r1, r1
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 800849c:	0028      	movs	r0, r5
		temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 800849e:	8259      	strh	r1, [r3, #18]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 80084a0:	f7ff fa00 	bl	80078a4 <EE_WriteVariable>
		/* Reset times */
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 80084a4:	2100      	movs	r1, #0
 80084a6:	1c68      	adds	r0, r5, #1
 80084a8:	f7ff f9fc 	bl	80078a4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 80084ac:	2100      	movs	r1, #0
 80084ae:	1ca8      	adds	r0, r5, #2
 80084b0:	f7ff f9f8 	bl	80078a4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80084b4:	1ce8      	adds	r0, r5, #3
 80084b6:	2100      	movs	r1, #0
 80084b8:	f7ff f9f4 	bl	80078a4 <EE_WriteVariable>
	}
	
	return result;
}
 80084bc:	2000      	movs	r0, #0
 80084be:	b00d      	add	sp, #52	; 0x34
 80084c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 80084c2:	4b0d      	ldr	r3, [pc, #52]	; (80084f8 <AddPortButton+0xec>)
 80084c4:	008f      	lsls	r7, r1, #2
 80084c6:	58f8      	ldr	r0, [r7, r3]
 80084c8:	f005 f90a 	bl	800d6e0 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 80084cc:	4b0b      	ldr	r3, [pc, #44]	; (80084fc <AddPortButton+0xf0>)
 80084ce:	58f8      	ldr	r0, [r7, r3]
 80084d0:	f005 f906 	bl	800d6e0 <osSemaphoreRelease>
	portStatus[port] =PORTBUTTON;
 80084d4:	2104      	movs	r1, #4
 80084d6:	4a06      	ldr	r2, [pc, #24]	; (80084f0 <AddPortButton+0xe4>)
 80084d8:	782b      	ldrb	r3, [r5, #0]
 80084da:	5511      	strb	r1, [r2, r4]
	if(BOS_initialized){
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d0a0      	beq.n	8008422 <AddPortButton+0x16>
		HAL_UART_DeInit(GetUart(port));
 80084e0:	0020      	movs	r0, r4
 80084e2:	f004 ffcd 	bl	800d480 <GetUart>
 80084e6:	f009 fc25 	bl	8011d34 <HAL_UART_DeInit>
 80084ea:	e79a      	b.n	8008422 <AddPortButton+0x16>
 80084ec:	20000c3d 	.word	0x20000c3d
 80084f0:	20000c2c 	.word	0x20000c2c
 80084f4:	2000191c 	.word	0x2000191c
 80084f8:	20006f4c 	.word	0x20006f4c
 80084fc:	20006f2c 	.word	0x20006f2c

08008500 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port){
 8008500:	b570      	push	{r4, r5, r6, lr}
 8008502:	0005      	movs	r5, r0
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type =NONE;
 8008504:	2300      	movs	r3, #0
 8008506:	483b      	ldr	r0, [pc, #236]	; (80085f4 <RemovePortButton+0xf4>)
 8008508:	00e9      	lsls	r1, r5, #3
 800850a:	1949      	adds	r1, r1, r5
	button[port].releasedY1Sec =0;
	button[port].releasedY2Sec =0;
	button[port].releasedY3Sec =0;
	
	/* 2. Remove from EEPROM if it's already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 800850c:	002c      	movs	r4, r5
	button[port].type =NONE;
 800850e:	1842      	adds	r2, r0, r1
BOS_Status RemovePortButton(uint8_t port){
 8008510:	b082      	sub	sp, #8
	button[port].state =NONE;
 8008512:	540b      	strb	r3, [r1, r0]
	button[port].type =NONE;
 8008514:	7053      	strb	r3, [r2, #1]
	button[port].events =0;
 8008516:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec =0;
 8008518:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec =0;
 800851a:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec =0;
 800851c:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec =0;
 800851e:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec =0;
 8008520:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec =0;
 8008522:	71d3      	strb	r3, [r2, #7]
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8008524:	466b      	mov	r3, sp
 8008526:	343a      	adds	r4, #58	; 0x3a
 8008528:	00a4      	lsls	r4, r4, #2
 800852a:	1d99      	adds	r1, r3, #6
 800852c:	0020      	movs	r0, r4
 800852e:	f7ff f989 	bl	8007844 <EE_ReadVariable>
	if(!res)						// This variable exists, reset all to zeros
 8008532:	2800      	cmp	r0, #0
 8008534:	d02b      	beq.n	800858e <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart =GetUart(port);
 8008536:	0028      	movs	r0, r5
 8008538:	f004 ffa2 	bl	800d480 <GetUart>
	
	if(huart->Instance == USART1){
 800853c:	4a2e      	ldr	r2, [pc, #184]	; (80085f8 <RemovePortButton+0xf8>)
 800853e:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart =GetUart(port);
 8008540:	0006      	movs	r6, r0
	if(huart->Instance == USART1){
 8008542:	4293      	cmp	r3, r2
 8008544:	d03b      	beq.n	80085be <RemovePortButton+0xbe>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	}
	else if(huart->Instance == USART2){
 8008546:	4a2d      	ldr	r2, [pc, #180]	; (80085fc <RemovePortButton+0xfc>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d040      	beq.n	80085ce <RemovePortButton+0xce>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	}
	else if(huart->Instance == USART3){
 800854c:	4a2c      	ldr	r2, [pc, #176]	; (8008600 <RemovePortButton+0x100>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d041      	beq.n	80085d6 <RemovePortButton+0xd6>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	}
	else if(huart->Instance == USART4){
 8008552:	4a2c      	ldr	r2, [pc, #176]	; (8008604 <RemovePortButton+0x104>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d044      	beq.n	80085e2 <RemovePortButton+0xe2>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	}
	else if(huart->Instance == USART5){
 8008558:	4a2b      	ldr	r2, [pc, #172]	; (8008608 <RemovePortButton+0x108>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d033      	beq.n	80085c6 <RemovePortButton+0xc6>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	}
	else if(huart->Instance == USART6){
 800855e:	4a2b      	ldr	r2, [pc, #172]	; (800860c <RemovePortButton+0x10c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d042      	beq.n	80085ea <RemovePortButton+0xea>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	}
	else if(huart->Instance == USART7){
 8008564:	4a2a      	ldr	r2, [pc, #168]	; (8008610 <RemovePortButton+0x110>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d039      	beq.n	80085de <RemovePortButton+0xde>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	}
	else if(huart->Instance == USART8){
 800856a:	4a2a      	ldr	r2, [pc, #168]	; (8008614 <RemovePortButton+0x114>)
 800856c:	4694      	mov	ip, r2
 800856e:	4463      	add	r3, ip
 8008570:	1e5c      	subs	r4, r3, #1
 8008572:	41a3      	sbcs	r3, r4
 8008574:	425c      	negs	r4, r3
 8008576:	b2e4      	uxtb	r4, r4
	}
	else
		result =BOS_ERROR;
	
	/* 4. Start scanning this port */
	portStatus[port] =FREE;
 8008578:	2200      	movs	r2, #0
 800857a:	4b27      	ldr	r3, [pc, #156]	; (8008618 <RemovePortButton+0x118>)
	/* Read this port again */
	HAL_UART_Receive_IT(huart,(uint8_t* )&cRxedChar,1);
 800857c:	4927      	ldr	r1, [pc, #156]	; (800861c <RemovePortButton+0x11c>)
	portStatus[port] =FREE;
 800857e:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart,(uint8_t* )&cRxedChar,1);
 8008580:	0030      	movs	r0, r6
 8008582:	3201      	adds	r2, #1
 8008584:	f009 fc24 	bl	8011dd0 <HAL_UART_Receive_IT>
	
	return result;
}
 8008588:	0020      	movs	r0, r4
 800858a:	b002      	add	sp, #8
 800858c:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),0);
 800858e:	2100      	movs	r1, #0
 8008590:	0020      	movs	r0, r4
 8008592:	f7ff f987 	bl	80078a4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 8008596:	2100      	movs	r1, #0
 8008598:	1c60      	adds	r0, r4, #1
 800859a:	f7ff f983 	bl	80078a4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 800859e:	2100      	movs	r1, #0
 80085a0:	1ca0      	adds	r0, r4, #2
 80085a2:	f7ff f97f 	bl	80078a4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80085a6:	2100      	movs	r1, #0
 80085a8:	1ce0      	adds	r0, r4, #3
 80085aa:	f7ff f97b 	bl	80078a4 <EE_WriteVariable>
	UART_HandleTypeDef *huart =GetUart(port);
 80085ae:	0028      	movs	r0, r5
 80085b0:	f004 ff66 	bl	800d480 <GetUart>
	if(huart->Instance == USART1){
 80085b4:	4a10      	ldr	r2, [pc, #64]	; (80085f8 <RemovePortButton+0xf8>)
 80085b6:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart =GetUart(port);
 80085b8:	0006      	movs	r6, r0
	if(huart->Instance == USART1){
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d1c3      	bne.n	8008546 <RemovePortButton+0x46>
		MX_USART1_UART_Init();
 80085be:	f004 fd37 	bl	800d030 <MX_USART1_UART_Init>
	BOS_Status result =BOS_OK;
 80085c2:	2400      	movs	r4, #0
 80085c4:	e7d8      	b.n	8008578 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 80085c6:	f004 fd93 	bl	800d0f0 <MX_USART5_UART_Init>
	BOS_Status result =BOS_OK;
 80085ca:	2400      	movs	r4, #0
 80085cc:	e7d4      	b.n	8008578 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 80085ce:	f004 fd47 	bl	800d060 <MX_USART2_UART_Init>
	BOS_Status result =BOS_OK;
 80085d2:	2400      	movs	r4, #0
 80085d4:	e7d0      	b.n	8008578 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 80085d6:	f004 fd5b 	bl	800d090 <MX_USART3_UART_Init>
	BOS_Status result =BOS_OK;
 80085da:	2400      	movs	r4, #0
 80085dc:	e7cc      	b.n	8008578 <RemovePortButton+0x78>
 80085de:	2400      	movs	r4, #0
 80085e0:	e7ca      	b.n	8008578 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 80085e2:	f004 fd6d 	bl	800d0c0 <MX_USART4_UART_Init>
	BOS_Status result =BOS_OK;
 80085e6:	2400      	movs	r4, #0
 80085e8:	e7c6      	b.n	8008578 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 80085ea:	f004 fd99 	bl	800d120 <MX_USART6_UART_Init>
	BOS_Status result =BOS_OK;
 80085ee:	2400      	movs	r4, #0
 80085f0:	e7c2      	b.n	8008578 <RemovePortButton+0x78>
 80085f2:	46c0      	nop			; (mov r8, r8)
 80085f4:	2000191c 	.word	0x2000191c
 80085f8:	40013800 	.word	0x40013800
 80085fc:	40004400 	.word	0x40004400
 8008600:	40004800 	.word	0x40004800
 8008604:	40004c00 	.word	0x40004c00
 8008608:	40005000 	.word	0x40005000
 800860c:	40011400 	.word	0x40011400
 8008610:	40011800 	.word	0x40011800
 8008614:	bffee400 	.word	0xbffee400
 8008618:	20000c2c 	.word	0x20000c2c
 800861c:	20000c4d 	.word	0x20000c4d

08008620 <SetButtonEvents>:
 dbl_clicked: Double click event (1: Enable, 0: Disable)
 pressed_x1sec, pressed_x1sec, pressed_x1sec: Press time for events X1, X2 and X3 in seconds. Use 0 to disable the event.
 released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event.
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port,uint8_t clicked,uint8_t dbl_clicked,uint8_t pressed_x1sec,uint8_t pressed_x2sec,uint8_t pressed_x3sec,uint8_t released_y1sec,uint8_t released_y2sec,uint8_t released_y3sec,uint8_t mode){
 8008620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008622:	464e      	mov	r6, r9
 8008624:	4645      	mov	r5, r8
 8008626:	46de      	mov	lr, fp
 8008628:	4657      	mov	r7, sl
 800862a:	b5e0      	push	{r5, r6, r7, lr}
 800862c:	b087      	sub	sp, #28
 800862e:	9301      	str	r3, [sp, #4]
 8008630:	ab10      	add	r3, sp, #64	; 0x40
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	0005      	movs	r5, r0
 8008636:	9302      	str	r3, [sp, #8]
 8008638:	ab11      	add	r3, sp, #68	; 0x44
 800863a:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;
	
	if(button[port].type == NONE)
 800863c:	00ec      	lsls	r4, r5, #3
BOS_Status SetButtonEvents(uint8_t port,uint8_t clicked,uint8_t dbl_clicked,uint8_t pressed_x1sec,uint8_t pressed_x2sec,uint8_t pressed_x3sec,uint8_t released_y1sec,uint8_t released_y2sec,uint8_t released_y3sec,uint8_t mode){
 800863e:	9303      	str	r3, [sp, #12]
 8008640:	ab12      	add	r3, sp, #72	; 0x48
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	469a      	mov	sl, r3
 8008646:	ab13      	add	r3, sp, #76	; 0x4c
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	4699      	mov	r9, r3
 800864c:	ab14      	add	r3, sp, #80	; 0x50
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	469b      	mov	fp, r3
 8008652:	ab15      	add	r3, sp, #84	; 0x54
 8008654:	7818      	ldrb	r0, [r3, #0]
	if(button[port].type == NONE)
 8008656:	4b80      	ldr	r3, [pc, #512]	; (8008858 <SetButtonEvents+0x238>)
 8008658:	4698      	mov	r8, r3
 800865a:	1963      	adds	r3, r4, r5
 800865c:	4443      	add	r3, r8
 800865e:	785e      	ldrb	r6, [r3, #1]
 8008660:	2e00      	cmp	r6, #0
 8008662:	d050      	beq.n	8008706 <SetButtonEvents+0xe6>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec =pressed_x1sec;
 8008664:	9e01      	ldr	r6, [sp, #4]
 8008666:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec =pressed_x2sec;
 8008668:	9e02      	ldr	r6, [sp, #8]
 800866a:	70de      	strb	r6, [r3, #3]
	button[port].pressedX3Sec =pressed_x3sec;
 800866c:	9e03      	ldr	r6, [sp, #12]
 800866e:	711e      	strb	r6, [r3, #4]
	button[port].releasedY1Sec =released_y1sec;
 8008670:	4656      	mov	r6, sl
 8008672:	715e      	strb	r6, [r3, #5]
	button[port].releasedY2Sec =released_y2sec;
 8008674:	464e      	mov	r6, r9
 8008676:	719e      	strb	r6, [r3, #6]
	button[port].releasedY3Sec =released_y3sec;
 8008678:	465e      	mov	r6, fp
 800867a:	71de      	strb	r6, [r3, #7]
	
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)){
 800867c:	2801      	cmp	r0, #1
 800867e:	d04b      	beq.n	8008718 <SetButtonEvents+0xf8>
 8008680:	2800      	cmp	r0, #0
 8008682:	d000      	beq.n	8008686 <SetButtonEvents+0x66>
 8008684:	e076      	b.n	8008774 <SetButtonEvents+0x154>
 8008686:	2900      	cmp	r1, #0
 8008688:	d000      	beq.n	800868c <SetButtonEvents+0x6c>
 800868a:	e0bf      	b.n	800880c <SetButtonEvents+0x1ec>
		button[port].events |= BUTTON_EVENT_CLICKED;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !clicked){
		button[port].events &=~BUTTON_EVENT_CLICKED;
 800868c:	2601      	movs	r6, #1
 800868e:	7a19      	ldrb	r1, [r3, #8]
 8008690:	43b1      	bics	r1, r6
 8008692:	7219      	strb	r1, [r3, #8]
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 8008694:	2a00      	cmp	r2, #0
 8008696:	d142      	bne.n	800871e <SetButtonEvents+0xfe>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked){
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
 8008698:	2302      	movs	r3, #2
 800869a:	4399      	bics	r1, r3
 800869c:	1963      	adds	r3, r4, r5
 800869e:	4443      	add	r3, r8
 80086a0:	7219      	strb	r1, [r3, #8]
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 80086a2:	9b01      	ldr	r3, [sp, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d143      	bne.n	8008730 <SetButtonEvents+0x110>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80086a8:	2304      	movs	r3, #4
 80086aa:	4399      	bics	r1, r3
 80086ac:	1963      	adds	r3, r4, r5
 80086ae:	4443      	add	r3, r8
 80086b0:	7219      	strb	r1, [r3, #8]
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 80086b2:	9b02      	ldr	r3, [sp, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d144      	bne.n	8008742 <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80086b8:	2308      	movs	r3, #8
 80086ba:	4399      	bics	r1, r3
 80086bc:	1963      	adds	r3, r4, r5
 80086be:	4443      	add	r3, r8
 80086c0:	7219      	strb	r1, [r3, #8]
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 80086c2:	9b03      	ldr	r3, [sp, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d145      	bne.n	8008754 <SetButtonEvents+0x134>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 80086c8:	2310      	movs	r3, #16
 80086ca:	000a      	movs	r2, r1
 80086cc:	439a      	bics	r2, r3
 80086ce:	1963      	adds	r3, r4, r5
 80086d0:	4443      	add	r3, r8
 80086d2:	721a      	strb	r2, [r3, #8]
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 80086d4:	4653      	mov	r3, sl
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d100      	bne.n	80086dc <SetButtonEvents+0xbc>
 80086da:	e09c      	b.n	8008816 <SetButtonEvents+0x1f6>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80086dc:	2120      	movs	r1, #32
 80086de:	4311      	orrs	r1, r2
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 80086e0:	464a      	mov	r2, r9
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80086e2:	1963      	adds	r3, r4, r5
 80086e4:	4443      	add	r3, r8
 80086e6:	7219      	strb	r1, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 80086e8:	2a00      	cmp	r2, #0
 80086ea:	d100      	bne.n	80086ee <SetButtonEvents+0xce>
 80086ec:	e09d      	b.n	800882a <SetButtonEvents+0x20a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80086ee:	2240      	movs	r2, #64	; 0x40
 80086f0:	430a      	orrs	r2, r1
 80086f2:	721a      	strb	r2, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 80086f4:	465b      	mov	r3, fp
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d136      	bne.n	8008768 <SetButtonEvents+0x148>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 80086fa:	217f      	movs	r1, #127	; 0x7f
 80086fc:	1963      	adds	r3, r4, r5
 80086fe:	4443      	add	r3, r8
 8008700:	4011      	ands	r1, r2
 8008702:	7219      	strb	r1, [r3, #8]
 8008704:	e036      	b.n	8008774 <SetButtonEvents+0x154>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008706:	240b      	movs	r4, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	return result;
}
 8008708:	0020      	movs	r0, r4
 800870a:	b007      	add	sp, #28
 800870c:	bc3c      	pop	{r2, r3, r4, r5}
 800870e:	4690      	mov	r8, r2
 8008710:	4699      	mov	r9, r3
 8008712:	46a2      	mov	sl, r4
 8008714:	46ab      	mov	fp, r5
 8008716:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008718:	7a19      	ldrb	r1, [r3, #8]
 800871a:	2301      	movs	r3, #1
 800871c:	4319      	orrs	r1, r3
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800871e:	2202      	movs	r2, #2
 8008720:	1963      	adds	r3, r4, r5
 8008722:	4443      	add	r3, r8
 8008724:	4311      	orrs	r1, r2
 8008726:	7219      	strb	r1, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 8008728:	2801      	cmp	r0, #1
 800872a:	d000      	beq.n	800872e <SetButtonEvents+0x10e>
 800872c:	e08c      	b.n	8008848 <SetButtonEvents+0x228>
 800872e:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008730:	2204      	movs	r2, #4
 8008732:	1963      	adds	r3, r4, r5
 8008734:	4443      	add	r3, r8
 8008736:	4311      	orrs	r1, r2
 8008738:	7219      	strb	r1, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 800873a:	2801      	cmp	r0, #1
 800873c:	d000      	beq.n	8008740 <SetButtonEvents+0x120>
 800873e:	e07f      	b.n	8008840 <SetButtonEvents+0x220>
 8008740:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008742:	2208      	movs	r2, #8
 8008744:	1963      	adds	r3, r4, r5
 8008746:	4443      	add	r3, r8
 8008748:	4311      	orrs	r1, r2
 800874a:	7219      	strb	r1, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 800874c:	2801      	cmp	r0, #1
 800874e:	d000      	beq.n	8008752 <SetButtonEvents+0x132>
 8008750:	e07e      	b.n	8008850 <SetButtonEvents+0x230>
 8008752:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008754:	2210      	movs	r2, #16
 8008756:	1963      	adds	r3, r4, r5
 8008758:	4443      	add	r3, r8
 800875a:	4311      	orrs	r1, r2
 800875c:	7219      	strb	r1, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 800875e:	2801      	cmp	r0, #1
 8008760:	d16a      	bne.n	8008838 <SetButtonEvents+0x218>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008762:	2260      	movs	r2, #96	; 0x60
 8008764:	b2c9      	uxtb	r1, r1
 8008766:	430a      	orrs	r2, r1
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008768:	2180      	movs	r1, #128	; 0x80
 800876a:	1963      	adds	r3, r4, r5
 800876c:	4249      	negs	r1, r1
 800876e:	4443      	add	r3, r8
 8008770:	4311      	orrs	r1, r2
 8008772:	7219      	strb	r1, [r3, #8]
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8008774:	002e      	movs	r6, r5
 8008776:	ab04      	add	r3, sp, #16
 8008778:	363a      	adds	r6, #58	; 0x3a
 800877a:	00b6      	lsls	r6, r6, #2
 800877c:	1d9f      	adds	r7, r3, #6
 800877e:	0039      	movs	r1, r7
 8008780:	0030      	movs	r0, r6
 8008782:	f7ff f85f 	bl	8007844 <EE_ReadVariable>
	if(!res)											// This variable exists
 8008786:	2800      	cmp	r0, #0
 8008788:	d1bd      	bne.n	8008706 <SetButtonEvents+0xe6>
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
 800878a:	1964      	adds	r4, r4, r5
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
 800878c:	883b      	ldrh	r3, [r7, #0]
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
 800878e:	4444      	add	r4, r8
 8008790:	7a22      	ldrb	r2, [r4, #8]
 8008792:	b2d9      	uxtb	r1, r3
 8008794:	4291      	cmp	r1, r2
 8008796:	d006      	beq.n	80087a6 <SetButtonEvents+0x186>
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
 8008798:	0a19      	lsrs	r1, r3, #8
 800879a:	0209      	lsls	r1, r1, #8
 800879c:	4311      	orrs	r1, r2
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 800879e:	0030      	movs	r0, r6
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
 80087a0:	8039      	strh	r1, [r7, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 80087a2:	f7ff f87f 	bl	80078a4 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
 80087a6:	1c74      	adds	r4, r6, #1
 80087a8:	0039      	movs	r1, r7
 80087aa:	0020      	movs	r0, r4
 80087ac:	f7ff f84a 	bl	8007844 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
 80087b0:	4652      	mov	r2, sl
 80087b2:	9b01      	ldr	r3, [sp, #4]
 80087b4:	0219      	lsls	r1, r3, #8
 80087b6:	883b      	ldrh	r3, [r7, #0]
 80087b8:	430a      	orrs	r2, r1
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d003      	beq.n	80087c6 <SetButtonEvents+0x1a6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec);
 80087be:	b291      	uxth	r1, r2
 80087c0:	0020      	movs	r0, r4
 80087c2:	f7ff f86f 	bl	80078a4 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
 80087c6:	1cb4      	adds	r4, r6, #2
 80087c8:	0039      	movs	r1, r7
 80087ca:	0020      	movs	r0, r4
 80087cc:	f7ff f83a 	bl	8007844 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
 80087d0:	464a      	mov	r2, r9
 80087d2:	9b02      	ldr	r3, [sp, #8]
 80087d4:	0219      	lsls	r1, r3, #8
 80087d6:	883b      	ldrh	r3, [r7, #0]
 80087d8:	430a      	orrs	r2, r1
 80087da:	4293      	cmp	r3, r2
 80087dc:	d003      	beq.n	80087e6 <SetButtonEvents+0x1c6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec);
 80087de:	b291      	uxth	r1, r2
 80087e0:	0020      	movs	r0, r4
 80087e2:	f7ff f85f 	bl	80078a4 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,&temp16);
 80087e6:	3603      	adds	r6, #3
 80087e8:	0039      	movs	r1, r7
 80087ea:	0030      	movs	r0, r6
 80087ec:	f7ff f82a 	bl	8007844 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 80087f0:	465a      	mov	r2, fp
 80087f2:	9b03      	ldr	r3, [sp, #12]
	return result;
 80087f4:	2400      	movs	r4, #0
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 80087f6:	0219      	lsls	r1, r3, #8
 80087f8:	883b      	ldrh	r3, [r7, #0]
 80087fa:	430a      	orrs	r2, r1
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d100      	bne.n	8008802 <SetButtonEvents+0x1e2>
 8008800:	e782      	b.n	8008708 <SetButtonEvents+0xe8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec);
 8008802:	b291      	uxth	r1, r2
 8008804:	0030      	movs	r0, r6
 8008806:	f7ff f84d 	bl	80078a4 <EE_WriteVariable>
 800880a:	e77d      	b.n	8008708 <SetButtonEvents+0xe8>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800880c:	2601      	movs	r6, #1
 800880e:	7a19      	ldrb	r1, [r3, #8]
 8008810:	4331      	orrs	r1, r6
 8008812:	7219      	strb	r1, [r3, #8]
 8008814:	e73e      	b.n	8008694 <SetButtonEvents+0x74>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008816:	2320      	movs	r3, #32
 8008818:	439a      	bics	r2, r3
 800881a:	1963      	adds	r3, r4, r5
 800881c:	4443      	add	r3, r8
 800881e:	0011      	movs	r1, r2
 8008820:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 8008822:	464a      	mov	r2, r9
 8008824:	2a00      	cmp	r2, #0
 8008826:	d000      	beq.n	800882a <SetButtonEvents+0x20a>
 8008828:	e761      	b.n	80086ee <SetButtonEvents+0xce>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800882a:	2340      	movs	r3, #64	; 0x40
 800882c:	000a      	movs	r2, r1
 800882e:	439a      	bics	r2, r3
 8008830:	1963      	adds	r3, r4, r5
 8008832:	4443      	add	r3, r8
 8008834:	721a      	strb	r2, [r3, #8]
 8008836:	e75d      	b.n	80086f4 <SetButtonEvents+0xd4>
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 8008838:	2800      	cmp	r0, #0
 800883a:	d19b      	bne.n	8008774 <SetButtonEvents+0x154>
 800883c:	7a1a      	ldrb	r2, [r3, #8]
 800883e:	e749      	b.n	80086d4 <SetButtonEvents+0xb4>
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 8008840:	2800      	cmp	r0, #0
 8008842:	d197      	bne.n	8008774 <SetButtonEvents+0x154>
 8008844:	7a19      	ldrb	r1, [r3, #8]
 8008846:	e734      	b.n	80086b2 <SetButtonEvents+0x92>
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 8008848:	2800      	cmp	r0, #0
 800884a:	d193      	bne.n	8008774 <SetButtonEvents+0x154>
 800884c:	7a19      	ldrb	r1, [r3, #8]
 800884e:	e728      	b.n	80086a2 <SetButtonEvents+0x82>
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 8008850:	2800      	cmp	r0, #0
 8008852:	d18f      	bne.n	8008774 <SetButtonEvents+0x154>
 8008854:	7a19      	ldrb	r1, [r3, #8]
 8008856:	e734      	b.n	80086c2 <SetButtonEvents+0xa2>
 8008858:	2000191c 	.word	0x2000191c

0800885c <MX_ADC_Init>:
 * to read multiple ADC channel in Port 2 and port 3 and for calculate
 * internal temperature and internal voltage reference which is equal in stm32f0 to around 1.2v.
 *
 */
void MX_ADC_Init(void){
	hadc.Instance = ADC1;
 800885c:	4811      	ldr	r0, [pc, #68]	; (80088a4 <MX_ADC_Init+0x48>)
 800885e:	4b12      	ldr	r3, [pc, #72]	; (80088a8 <MX_ADC_Init+0x4c>)
void MX_ADC_Init(void){
 8008860:	b510      	push	{r4, lr}
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008862:	2104      	movs	r1, #4
	hadc.Instance = ADC1;
 8008864:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008866:	2380      	movs	r3, #128	; 0x80
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008868:	6141      	str	r1, [r0, #20]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800886a:	061b      	lsls	r3, r3, #24
	hadc.Init.LowPowerAutoWait =DISABLE;
	hadc.Init.LowPowerAutoPowerOff =DISABLE;
	hadc.Init.ContinuousConvMode =ENABLE;
	hadc.Init.DiscontinuousConvMode =DISABLE;
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800886c:	21c2      	movs	r1, #194	; 0xc2
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800886e:	2201      	movs	r2, #1
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008870:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008872:	2300      	movs	r3, #0
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008874:	31ff      	adds	r1, #255	; 0xff
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008876:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008878:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800887a:	6102      	str	r2, [r0, #16]
	hadc.Init.LowPowerAutoWait =DISABLE;
 800887c:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff =DISABLE;
 800887e:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode =ENABLE;
 8008880:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode =DISABLE;
 8008882:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008884:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008886:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests =DISABLE;
 8008888:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800888a:	6342      	str	r2, [r0, #52]	; 0x34
	
	if(HAL_ADC_Init(&hadc) != HAL_OK){
 800888c:	f006 ff1c 	bl	800f6c8 <HAL_ADC_Init>
 8008890:	2800      	cmp	r0, #0
 8008892:	d002      	beq.n	800889a <MX_ADC_Init+0x3e>
		return ADC_CHANNEL_5;
}

void Error_Handler(void){
	
	HAL_Delay(100);
 8008894:	2064      	movs	r0, #100	; 0x64
 8008896:	f006 fe3b 	bl	800f510 <HAL_Delay>
	ADC_flag =1;
 800889a:	2378      	movs	r3, #120	; 0x78
 800889c:	2101      	movs	r1, #1
 800889e:	4a03      	ldr	r2, [pc, #12]	; (80088ac <MX_ADC_Init+0x50>)
 80088a0:	54d1      	strb	r1, [r2, r3]
}
 80088a2:	bd10      	pop	{r4, pc}
 80088a4:	20006f70 	.word	0x20006f70
 80088a8:	40012400 	.word	0x40012400
 80088ac:	2000191c 	.word	0x2000191c

080088b0 <ADC_Channels_Config>:
void ADC_Channels_Config(ADC_HandleTypeDef *adcHandle){
 80088b0:	b510      	push	{r4, lr}
 80088b2:	0004      	movs	r4, r0
 80088b4:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 80088b6:	2214      	movs	r2, #20
 80088b8:	2100      	movs	r1, #0
 80088ba:	a803      	add	r0, sp, #12
 80088bc:	f00a fa2a 	bl	8012d14 <memset>
	if(adcHandle->Instance == ADC1){
 80088c0:	4b11      	ldr	r3, [pc, #68]	; (8008908 <ADC_Channels_Config+0x58>)
 80088c2:	6822      	ldr	r2, [r4, #0]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d001      	beq.n	80088cc <ADC_Channels_Config+0x1c>
}
 80088c8:	b008      	add	sp, #32
 80088ca:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 80088cc:	2080      	movs	r0, #128	; 0x80
 80088ce:	4b0f      	ldr	r3, [pc, #60]	; (800890c <ADC_Channels_Config+0x5c>)
 80088d0:	0080      	lsls	r0, r0, #2
 80088d2:	6999      	ldr	r1, [r3, #24]
 80088d4:	4301      	orrs	r1, r0
 80088d6:	6199      	str	r1, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80088d8:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_ADC1_CLK_ENABLE();
 80088da:	699a      	ldr	r2, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80088dc:	0289      	lsls	r1, r1, #10
		__HAL_RCC_ADC1_CLK_ENABLE();
 80088de:	4002      	ands	r2, r0
 80088e0:	9201      	str	r2, [sp, #4]
 80088e2:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80088e4:	695a      	ldr	r2, [r3, #20]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 80088e6:	2090      	movs	r0, #144	; 0x90
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80088e8:	430a      	orrs	r2, r1
 80088ea:	615a      	str	r2, [r3, #20]
 80088ec:	695b      	ldr	r3, [r3, #20]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 80088ee:	05c0      	lsls	r0, r0, #23
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80088f0:	400b      	ands	r3, r1
 80088f2:	9302      	str	r3, [sp, #8]
 80088f4:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80088f6:	233c      	movs	r3, #60	; 0x3c
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 80088f8:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80088fa:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80088fc:	3b39      	subs	r3, #57	; 0x39
 80088fe:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008900:	f008 f902 	bl	8010b08 <HAL_GPIO_Init>
}
 8008904:	e7e0      	b.n	80088c8 <ADC_Channels_Config+0x18>
 8008906:	46c0      	nop			; (mov r8, r8)
 8008908:	40012400 	.word	0x40012400
 800890c:	40021000 	.word	0x40021000

08008910 <ReadTempAndVref>:
void ReadTempAndVref(float *temp,float *Vref){
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008912:	46ce      	mov	lr, r9
 8008914:	4647      	mov	r7, r8
	if(0 == ADC_flag)
 8008916:	2378      	movs	r3, #120	; 0x78
void ReadTempAndVref(float *temp,float *Vref){
 8008918:	b580      	push	{r7, lr}
	if(0 == ADC_flag)
 800891a:	4c57      	ldr	r4, [pc, #348]	; (8008a78 <ReadTempAndVref+0x168>)
void ReadTempAndVref(float *temp,float *Vref){
 800891c:	0007      	movs	r7, r0
	if(0 == ADC_flag)
 800891e:	5ce3      	ldrb	r3, [r4, r3]
void ReadTempAndVref(float *temp,float *Vref){
 8008920:	4689      	mov	r9, r1
	if(0 == ADC_flag)
 8008922:	2b00      	cmp	r3, #0
 8008924:	d100      	bne.n	8008928 <ReadTempAndVref+0x18>
 8008926:	e0a4      	b.n	8008a72 <ReadTempAndVref+0x162>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008928:	2310      	movs	r3, #16
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800892a:	2280      	movs	r2, #128	; 0x80
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800892c:	67e3      	str	r3, [r4, #124]	; 0x7c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800892e:	0152      	lsls	r2, r2, #5
 8008930:	3370      	adds	r3, #112	; 0x70
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008932:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008934:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008936:	2201      	movs	r2, #1
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008938:	4d50      	ldr	r5, [pc, #320]	; (8008a7c <ReadTempAndVref+0x16c>)
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800893a:	3304      	adds	r3, #4
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 800893c:	317c      	adds	r1, #124	; 0x7c
 800893e:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008940:	50e2      	str	r2, [r4, r3]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008942:	f007 f819 	bl	800f978 <HAL_ADC_ConfigChannel>
 8008946:	2800      	cmp	r0, #0
 8008948:	d000      	beq.n	800894c <ReadTempAndVref+0x3c>
 800894a:	e08e      	b.n	8008a6a <ReadTempAndVref+0x15a>
	HAL_ADC_Start(&hadc);
 800894c:	0028      	movs	r0, r5
 800894e:	f006 ff5d 	bl	800f80c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 8008952:	2164      	movs	r1, #100	; 0x64
 8008954:	0028      	movs	r0, r5
 8008956:	f006 ffa5 	bl	800f8a4 <HAL_ADC_PollForConversion>
	ADC_value_temp =HAL_ADC_GetValue(&hadc);
 800895a:	0028      	movs	r0, r5
 800895c:	f007 f806 	bl	800f96c <HAL_ADC_GetValue>
 8008960:	4e47      	ldr	r6, [pc, #284]	; (8008a80 <ReadTempAndVref+0x170>)
 8008962:	8130      	strh	r0, [r6, #8]
	*temp =((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 8008964:	0400      	lsls	r0, r0, #16
 8008966:	0c00      	lsrs	r0, r0, #16
 8008968:	f7fa f870 	bl	8002a4c <__aeabi_i2d>
 800896c:	4a45      	ldr	r2, [pc, #276]	; (8008a84 <ReadTempAndVref+0x174>)
 800896e:	4b46      	ldr	r3, [pc, #280]	; (8008a88 <ReadTempAndVref+0x178>)
 8008970:	f7f9 fa60 	bl	8001e34 <__aeabi_dmul>
 8008974:	2200      	movs	r2, #0
 8008976:	4b45      	ldr	r3, [pc, #276]	; (8008a8c <ReadTempAndVref+0x17c>)
 8008978:	f7f8 fe52 	bl	8001620 <__aeabi_ddiv>
 800897c:	4a44      	ldr	r2, [pc, #272]	; (8008a90 <ReadTempAndVref+0x180>)
 800897e:	4b45      	ldr	r3, [pc, #276]	; (8008a94 <ReadTempAndVref+0x184>)
 8008980:	f7f9 fcca 	bl	8002318 <__aeabi_dsub>
 8008984:	4a44      	ldr	r2, [pc, #272]	; (8008a98 <ReadTempAndVref+0x188>)
 8008986:	4b45      	ldr	r3, [pc, #276]	; (8008a9c <ReadTempAndVref+0x18c>)
 8008988:	f7f8 fe4a 	bl	8001620 <__aeabi_ddiv>
 800898c:	2200      	movs	r2, #0
 800898e:	4b44      	ldr	r3, [pc, #272]	; (8008aa0 <ReadTempAndVref+0x190>)
 8008990:	f7f8 fb2a 	bl	8000fe8 <__aeabi_dadd>
 8008994:	f7fa f918 	bl	8002bc8 <__aeabi_d2f>
 8008998:	6038      	str	r0, [r7, #0]
	HAL_ADC_Stop(&hadc);
 800899a:	0028      	movs	r0, r5
 800899c:	f006 ff62 	bl	800f864 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80089a0:	2310      	movs	r3, #16
	sConfig.Rank = ADC_RANK_NONE;
 80089a2:	4a40      	ldr	r2, [pc, #256]	; (8008aa4 <ReadTempAndVref+0x194>)
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80089a4:	67e3      	str	r3, [r4, #124]	; 0x7c
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80089a6:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 80089a8:	3370      	adds	r3, #112	; 0x70
 80089aa:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80089ac:	2201      	movs	r2, #1
 80089ae:	3304      	adds	r3, #4
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80089b0:	317c      	adds	r1, #124	; 0x7c
 80089b2:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80089b4:	50e2      	str	r2, [r4, r3]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80089b6:	f006 ffdf 	bl	800f978 <HAL_ADC_ConfigChannel>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d151      	bne.n	8008a62 <ReadTempAndVref+0x152>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80089be:	2311      	movs	r3, #17
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80089c0:	2280      	movs	r2, #128	; 0x80
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80089c2:	67e3      	str	r3, [r4, #124]	; 0x7c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80089c4:	0152      	lsls	r2, r2, #5
 80089c6:	336f      	adds	r3, #111	; 0x6f
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80089c8:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80089ca:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80089cc:	2205      	movs	r2, #5
 80089ce:	3304      	adds	r3, #4
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80089d0:	317c      	adds	r1, #124	; 0x7c
 80089d2:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80089d4:	50e2      	str	r2, [r4, r3]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80089d6:	f006 ffcf 	bl	800f978 <HAL_ADC_ConfigChannel>
 80089da:	2800      	cmp	r0, #0
 80089dc:	d13d      	bne.n	8008a5a <ReadTempAndVref+0x14a>
	HAL_ADC_Start(&hadc);
 80089de:	0028      	movs	r0, r5
 80089e0:	f006 ff14 	bl	800f80c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 80089e4:	2164      	movs	r1, #100	; 0x64
 80089e6:	0028      	movs	r0, r5
 80089e8:	f006 ff5c 	bl	800f8a4 <HAL_ADC_PollForConversion>
	ADC_value_Vref =HAL_ADC_GetValue(&hadc);
 80089ec:	0028      	movs	r0, r5
 80089ee:	f006 ffbd 	bl	800f96c <HAL_ADC_GetValue>
 80089f2:	4680      	mov	r8, r0
	*Vref =3.3 * (*Vref_Cal) / ADC_value_Vref;
 80089f4:	4b2c      	ldr	r3, [pc, #176]	; (8008aa8 <ReadTempAndVref+0x198>)
	ADC_value_Vref =HAL_ADC_GetValue(&hadc);
 80089f6:	8170      	strh	r0, [r6, #10]
	*Vref =3.3 * (*Vref_Cal) / ADC_value_Vref;
 80089f8:	8818      	ldrh	r0, [r3, #0]
 80089fa:	f7fa f827 	bl	8002a4c <__aeabi_i2d>
 80089fe:	4a21      	ldr	r2, [pc, #132]	; (8008a84 <ReadTempAndVref+0x174>)
 8008a00:	4b21      	ldr	r3, [pc, #132]	; (8008a88 <ReadTempAndVref+0x178>)
 8008a02:	f7f9 fa17 	bl	8001e34 <__aeabi_dmul>
 8008a06:	4643      	mov	r3, r8
 8008a08:	0006      	movs	r6, r0
 8008a0a:	0418      	lsls	r0, r3, #16
 8008a0c:	0c00      	lsrs	r0, r0, #16
 8008a0e:	000f      	movs	r7, r1
 8008a10:	f7fa f81c 	bl	8002a4c <__aeabi_i2d>
 8008a14:	0002      	movs	r2, r0
 8008a16:	000b      	movs	r3, r1
 8008a18:	0030      	movs	r0, r6
 8008a1a:	0039      	movs	r1, r7
 8008a1c:	f7f8 fe00 	bl	8001620 <__aeabi_ddiv>
 8008a20:	f7fa f8d2 	bl	8002bc8 <__aeabi_d2f>
 8008a24:	464b      	mov	r3, r9
 8008a26:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 8008a28:	0028      	movs	r0, r5
 8008a2a:	f006 ff1b 	bl	800f864 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008a2e:	2311      	movs	r3, #17
	sConfig.Rank = ADC_RANK_NONE;
 8008a30:	4a1c      	ldr	r2, [pc, #112]	; (8008aa4 <ReadTempAndVref+0x194>)
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008a32:	67e3      	str	r3, [r4, #124]	; 0x7c
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008a34:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 8008a36:	336f      	adds	r3, #111	; 0x6f
 8008a38:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	3304      	adds	r3, #4
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008a3e:	317c      	adds	r1, #124	; 0x7c
 8008a40:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008a42:	50e2      	str	r2, [r4, r3]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008a44:	f006 ff98 	bl	800f978 <HAL_ADC_ConfigChannel>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d002      	beq.n	8008a52 <ReadTempAndVref+0x142>
	HAL_Delay(100);
 8008a4c:	2064      	movs	r0, #100	; 0x64
 8008a4e:	f006 fd5f 	bl	800f510 <HAL_Delay>
}
 8008a52:	bc0c      	pop	{r2, r3}
 8008a54:	4690      	mov	r8, r2
 8008a56:	4699      	mov	r9, r3
 8008a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_Delay(100);
 8008a5a:	2064      	movs	r0, #100	; 0x64
 8008a5c:	f006 fd58 	bl	800f510 <HAL_Delay>
 8008a60:	e7bd      	b.n	80089de <ReadTempAndVref+0xce>
 8008a62:	2064      	movs	r0, #100	; 0x64
 8008a64:	f006 fd54 	bl	800f510 <HAL_Delay>
 8008a68:	e7a9      	b.n	80089be <ReadTempAndVref+0xae>
 8008a6a:	2064      	movs	r0, #100	; 0x64
 8008a6c:	f006 fd50 	bl	800f510 <HAL_Delay>
 8008a70:	e76c      	b.n	800894c <ReadTempAndVref+0x3c>
		MX_ADC_Init();
 8008a72:	f7ff fef3 	bl	800885c <MX_ADC_Init>
 8008a76:	e757      	b.n	8008928 <ReadTempAndVref+0x18>
 8008a78:	2000191c 	.word	0x2000191c
 8008a7c:	20006f70 	.word	0x20006f70
 8008a80:	2000199c 	.word	0x2000199c
 8008a84:	66666666 	.word	0x66666666
 8008a88:	400a6666 	.word	0x400a6666
 8008a8c:	40affe00 	.word	0x40affe00
 8008a90:	28f5c28f 	.word	0x28f5c28f
 8008a94:	3ff68f5c 	.word	0x3ff68f5c
 8008a98:	33333333 	.word	0x33333333
 8008a9c:	40113333 	.word	0x40113333
 8008aa0:	40390000 	.word	0x40390000
 8008aa4:	00001001 	.word	0x00001001
 8008aa8:	1ffff7ba 	.word	0x1ffff7ba

08008aac <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port,float *precentageValue){
 8008aac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(port == 2 || port == 3){
 8008aae:	1e83      	subs	r3, r0, #2
float GetReadPrecentage(uint8_t port,float *precentageValue){
 8008ab0:	b087      	sub	sp, #28
 8008ab2:	0006      	movs	r6, r0
 8008ab4:	000f      	movs	r7, r1
	if(port == 2 || port == 3){
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d901      	bls.n	8008abe <GetReadPrecentage+0x12>
}
 8008aba:	b007      	add	sp, #28
 8008abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(0 == ADC_flag){
 8008abe:	2378      	movs	r3, #120	; 0x78
 8008ac0:	4c4e      	ldr	r4, [pc, #312]	; (8008bfc <GetReadPrecentage+0x150>)
 8008ac2:	5ce3      	ldrb	r3, [r4, r3]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d06a      	beq.n	8008b9e <GetReadPrecentage+0xf2>
 8008ac8:	4d4d      	ldr	r5, [pc, #308]	; (8008c00 <GetReadPrecentage+0x154>)
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8008aca:	2090      	movs	r0, #144	; 0x90
 8008acc:	2201      	movs	r2, #1
 8008ace:	2110      	movs	r1, #16
 8008ad0:	05c0      	lsls	r0, r0, #23
 8008ad2:	f008 f9b9 	bl	8010e48 <HAL_GPIO_WritePin>
		Channel =Get_channel(GetUart(port),"bottom");
 8008ad6:	0030      	movs	r0, r6
 8008ad8:	f004 fcd2 	bl	800d480 <GetUart>
	if(huart->Instance == USART2 && side == "top")
 8008adc:	4a49      	ldr	r2, [pc, #292]	; (8008c04 <GetReadPrecentage+0x158>)
 8008ade:	6803      	ldr	r3, [r0, #0]
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d07d      	beq.n	8008be0 <GetReadPrecentage+0x134>
	else if(huart->Instance == USART6 && side == "top")
 8008ae4:	4a48      	ldr	r2, [pc, #288]	; (8008c08 <GetReadPrecentage+0x15c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d04e      	beq.n	8008b88 <GetReadPrecentage+0xdc>
 8008aea:	2300      	movs	r3, #0
 8008aec:	001a      	movs	r2, r3
		Channel =Get_channel(GetUart(port),"bottom");
 8008aee:	4e47      	ldr	r6, [pc, #284]	; (8008c0c <GetReadPrecentage+0x160>)
		sConfig.Channel =Channel;
 8008af0:	67e2      	str	r2, [r4, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008af2:	2280      	movs	r2, #128	; 0x80
		Channel =Get_channel(GetUart(port),"bottom");
 8008af4:	7333      	strb	r3, [r6, #12]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008af6:	2380      	movs	r3, #128	; 0x80
 8008af8:	0152      	lsls	r2, r2, #5
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008afa:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008afc:	50e2      	str	r2, [r4, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008afe:	2201      	movs	r2, #1
 8008b00:	3304      	adds	r3, #4
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b02:	317c      	adds	r1, #124	; 0x7c
 8008b04:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008b06:	50e2      	str	r2, [r4, r3]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b08:	f006 ff36 	bl	800f978 <HAL_ADC_ConfigChannel>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d142      	bne.n	8008b96 <GetReadPrecentage+0xea>
		HAL_ADC_Start(&hadc);
 8008b10:	0028      	movs	r0, r5
 8008b12:	f006 fe7b 	bl	800f80c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008b16:	2164      	movs	r1, #100	; 0x64
 8008b18:	0028      	movs	r0, r5
 8008b1a:	f006 fec3 	bl	800f8a4 <HAL_ADC_PollForConversion>
		percentage =HAL_ADC_GetValue(&hadc);
 8008b1e:	0028      	movs	r0, r5
 8008b20:	f006 ff24 	bl	800f96c <HAL_ADC_GetValue>
 8008b24:	f7f8 fa20 	bl	8000f68 <__aeabi_ui2f>
		percentage =3.3 * percentage / 4095;
 8008b28:	f7f9 fffc 	bl	8002b24 <__aeabi_f2d>
 8008b2c:	4a38      	ldr	r2, [pc, #224]	; (8008c10 <GetReadPrecentage+0x164>)
 8008b2e:	4b39      	ldr	r3, [pc, #228]	; (8008c14 <GetReadPrecentage+0x168>)
 8008b30:	f7f9 f980 	bl	8001e34 <__aeabi_dmul>
 8008b34:	2200      	movs	r2, #0
 8008b36:	4b38      	ldr	r3, [pc, #224]	; (8008c18 <GetReadPrecentage+0x16c>)
 8008b38:	f7f8 fd72 	bl	8001620 <__aeabi_ddiv>
 8008b3c:	f7fa f844 	bl	8002bc8 <__aeabi_d2f>
		current =(100 * percentage) / 3.3;
 8008b40:	4936      	ldr	r1, [pc, #216]	; (8008c1c <GetReadPrecentage+0x170>)
		percentage =3.3 * percentage / 4095;
 8008b42:	6130      	str	r0, [r6, #16]
		current =(100 * percentage) / 3.3;
 8008b44:	f7f7 fefa 	bl	800093c <__aeabi_fmul>
 8008b48:	f7f9 ffec 	bl	8002b24 <__aeabi_f2d>
 8008b4c:	4a30      	ldr	r2, [pc, #192]	; (8008c10 <GetReadPrecentage+0x164>)
 8008b4e:	4b31      	ldr	r3, [pc, #196]	; (8008c14 <GetReadPrecentage+0x168>)
 8008b50:	f7f8 fd66 	bl	8001620 <__aeabi_ddiv>
 8008b54:	f7fa f838 	bl	8002bc8 <__aeabi_d2f>
 8008b58:	6170      	str	r0, [r6, #20]
		*precentageValue =current;
 8008b5a:	6038      	str	r0, [r7, #0]
		HAL_ADC_Stop(&hadc);
 8008b5c:	0028      	movs	r0, r5
 8008b5e:	f006 fe81 	bl	800f864 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008b62:	7b33      	ldrb	r3, [r6, #12]
		sConfig.Rank = ADC_RANK_NONE;
 8008b64:	4a2e      	ldr	r2, [pc, #184]	; (8008c20 <GetReadPrecentage+0x174>)
		sConfig.Channel =Channel;
 8008b66:	67e3      	str	r3, [r4, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_NONE;
 8008b68:	2380      	movs	r3, #128	; 0x80
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b6a:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_NONE;
 8008b6c:	50e2      	str	r2, [r4, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008b6e:	2201      	movs	r2, #1
 8008b70:	3304      	adds	r3, #4
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b72:	317c      	adds	r1, #124	; 0x7c
 8008b74:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008b76:	50e2      	str	r2, [r4, r3]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b78:	f006 fefe 	bl	800f978 <HAL_ADC_ConfigChannel>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d09c      	beq.n	8008aba <GetReadPrecentage+0xe>
	HAL_Delay(100);
 8008b80:	2064      	movs	r0, #100	; 0x64
 8008b82:	f006 fcc5 	bl	800f510 <HAL_Delay>
 8008b86:	e798      	b.n	8008aba <GetReadPrecentage+0xe>
	else if(huart->Instance == USART6 && side == "top")
 8008b88:	4a26      	ldr	r2, [pc, #152]	; (8008c24 <GetReadPrecentage+0x178>)
 8008b8a:	4b27      	ldr	r3, [pc, #156]	; (8008c28 <GetReadPrecentage+0x17c>)
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d031      	beq.n	8008bf4 <GetReadPrecentage+0x148>
 8008b90:	2205      	movs	r2, #5
		return ADC_CHANNEL_5;
 8008b92:	2305      	movs	r3, #5
 8008b94:	e7ab      	b.n	8008aee <GetReadPrecentage+0x42>
	HAL_Delay(100);
 8008b96:	2064      	movs	r0, #100	; 0x64
 8008b98:	f006 fcba 	bl	800f510 <HAL_Delay>
 8008b9c:	e7b8      	b.n	8008b10 <GetReadPrecentage+0x64>
			MX_ADC_Init();
 8008b9e:	f7ff fe5d 	bl	800885c <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 8008ba2:	0030      	movs	r0, r6
 8008ba4:	f004 fc6c 	bl	800d480 <GetUart>
 8008ba8:	f009 f8c4 	bl	8011d34 <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA,GPIO_PIN_4);
 8008bac:	2090      	movs	r0, #144	; 0x90
 8008bae:	2110      	movs	r1, #16
 8008bb0:	05c0      	lsls	r0, r0, #23
 8008bb2:	f008 f8a5 	bl	8010d00 <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 8008bb6:	4d12      	ldr	r5, [pc, #72]	; (8008c00 <GetReadPrecentage+0x154>)
 8008bb8:	0028      	movs	r0, r5
 8008bba:	f006 ff6d 	bl	800fa98 <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008bbe:	2310      	movs	r3, #16
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008bc0:	2090      	movs	r0, #144	; 0x90
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008bc2:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bc4:	3b0f      	subs	r3, #15
 8008bc6:	9302      	str	r3, [sp, #8]
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008bc8:	a901      	add	r1, sp, #4
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008bca:	3302      	adds	r3, #2
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008bcc:	05c0      	lsls	r0, r0, #23
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008bce:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008bd0:	f007 ff9a 	bl	8010b08 <HAL_GPIO_Init>
			portStatus[port - 1] =CUSTOM;
 8008bd4:	2206      	movs	r2, #6
 8008bd6:	4b15      	ldr	r3, [pc, #84]	; (8008c2c <GetReadPrecentage+0x180>)
 8008bd8:	199b      	adds	r3, r3, r6
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	701a      	strb	r2, [r3, #0]
 8008bde:	e774      	b.n	8008aca <GetReadPrecentage+0x1e>
	if(huart->Instance == USART2 && side == "top")
 8008be0:	4a10      	ldr	r2, [pc, #64]	; (8008c24 <GetReadPrecentage+0x178>)
 8008be2:	4b11      	ldr	r3, [pc, #68]	; (8008c28 <GetReadPrecentage+0x17c>)
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d002      	beq.n	8008bee <GetReadPrecentage+0x142>
 8008be8:	2203      	movs	r2, #3
		return ADC_CHANNEL_3;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e77f      	b.n	8008aee <GetReadPrecentage+0x42>
	if(huart->Instance == USART2 && side == "top")
 8008bee:	2202      	movs	r2, #2
		return ADC_CHANNEL_2;
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	e77c      	b.n	8008aee <GetReadPrecentage+0x42>
	else if(huart->Instance == USART6 && side == "top")
 8008bf4:	2204      	movs	r2, #4
		return ADC_CHANNEL_4;
 8008bf6:	2304      	movs	r3, #4
 8008bf8:	e779      	b.n	8008aee <GetReadPrecentage+0x42>
 8008bfa:	46c0      	nop			; (mov r8, r8)
 8008bfc:	2000191c 	.word	0x2000191c
 8008c00:	20006f70 	.word	0x20006f70
 8008c04:	40004400 	.word	0x40004400
 8008c08:	40011400 	.word	0x40011400
 8008c0c:	2000199c 	.word	0x2000199c
 8008c10:	66666666 	.word	0x66666666
 8008c14:	400a6666 	.word	0x400a6666
 8008c18:	40affe00 	.word	0x40affe00
 8008c1c:	42c80000 	.word	0x42c80000
 8008c20:	00001001 	.word	0x00001001
 8008c24:	080186a4 	.word	0x080186a4
 8008c28:	080186a0 	.word	0x080186a0
 8008c2c:	20000c2c 	.word	0x20000c2c

08008c30 <Get_Rank>:
	
}

uint8_t Get_Rank(uint8_t Port,char *side){
	
	if(Port == 2 && side == "top")
 8008c30:	2802      	cmp	r0, #2
 8008c32:	d00e      	beq.n	8008c52 <Get_Rank+0x22>
		Rank_t =0;
	else if(Port == 2 && side == "bottom")
		Rank_t =1;
	else if(Port == 3 && side == "top")
 8008c34:	2803      	cmp	r0, #3
 8008c36:	d002      	beq.n	8008c3e <Get_Rank+0xe>
 8008c38:	4b10      	ldr	r3, [pc, #64]	; (8008c7c <Get_Rank+0x4c>)
 8008c3a:	7e18      	ldrb	r0, [r3, #24]
		Rank_t =2;
	else if(Port == 3 && side == "bottom")
		Rank_t =3;
	return Rank_t;
}
 8008c3c:	4770      	bx	lr
	else if(Port == 3 && side == "top")
 8008c3e:	4b10      	ldr	r3, [pc, #64]	; (8008c80 <Get_Rank+0x50>)
 8008c40:	4299      	cmp	r1, r3
 8008c42:	d016      	beq.n	8008c72 <Get_Rank+0x42>
	else if(Port == 3 && side == "bottom")
 8008c44:	4b0f      	ldr	r3, [pc, #60]	; (8008c84 <Get_Rank+0x54>)
 8008c46:	4299      	cmp	r1, r3
 8008c48:	d1f6      	bne.n	8008c38 <Get_Rank+0x8>
		Rank_t =3;
 8008c4a:	4b0c      	ldr	r3, [pc, #48]	; (8008c7c <Get_Rank+0x4c>)
 8008c4c:	7618      	strb	r0, [r3, #24]
 8008c4e:	2003      	movs	r0, #3
 8008c50:	e7f4      	b.n	8008c3c <Get_Rank+0xc>
	if(Port == 2 && side == "top")
 8008c52:	4b0b      	ldr	r3, [pc, #44]	; (8008c80 <Get_Rank+0x50>)
 8008c54:	4299      	cmp	r1, r3
 8008c56:	d007      	beq.n	8008c68 <Get_Rank+0x38>
	else if(Port == 2 && side == "bottom")
 8008c58:	4b0a      	ldr	r3, [pc, #40]	; (8008c84 <Get_Rank+0x54>)
 8008c5a:	4299      	cmp	r1, r3
 8008c5c:	d1ec      	bne.n	8008c38 <Get_Rank+0x8>
		Rank_t =1;
 8008c5e:	2201      	movs	r2, #1
 8008c60:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <Get_Rank+0x4c>)
 8008c62:	2001      	movs	r0, #1
 8008c64:	761a      	strb	r2, [r3, #24]
 8008c66:	e7e9      	b.n	8008c3c <Get_Rank+0xc>
		Rank_t =0;
 8008c68:	2200      	movs	r2, #0
 8008c6a:	4b04      	ldr	r3, [pc, #16]	; (8008c7c <Get_Rank+0x4c>)
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	761a      	strb	r2, [r3, #24]
 8008c70:	e7e4      	b.n	8008c3c <Get_Rank+0xc>
		Rank_t =2;
 8008c72:	2202      	movs	r2, #2
 8008c74:	4b01      	ldr	r3, [pc, #4]	; (8008c7c <Get_Rank+0x4c>)
 8008c76:	3801      	subs	r0, #1
 8008c78:	761a      	strb	r2, [r3, #24]
 8008c7a:	e7df      	b.n	8008c3c <Get_Rank+0xc>
 8008c7c:	2000199c 	.word	0x2000199c
 8008c80:	080186a0 	.word	0x080186a0
 8008c84:	080186a4 	.word	0x080186a4

08008c88 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port,char *side){
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(ADC_port == 2 || ADC_port == 3){
 8008c8a:	1e83      	subs	r3, r0, #2
void ADCSelectChannel(uint8_t ADC_port,char *side){
 8008c8c:	0004      	movs	r4, r0
 8008c8e:	000d      	movs	r5, r1
	if(ADC_port == 2 || ADC_port == 3){
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d900      	bls.n	8008c96 <ADCSelectChannel+0xe>
}
 8008c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008c96:	f004 fbf3 	bl	800d480 <GetUart>
 8008c9a:	f009 f84b 	bl	8011d34 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] =CUSTOM;
 8008c9e:	2206      	movs	r2, #6
 8008ca0:	4b19      	ldr	r3, [pc, #100]	; (8008d08 <ADCSelectChannel+0x80>)
		ADC_Channels_Config(&hadc);
 8008ca2:	481a      	ldr	r0, [pc, #104]	; (8008d0c <ADCSelectChannel+0x84>)
		portStatus[ADC_port - 1] =CUSTOM;
 8008ca4:	191b      	adds	r3, r3, r4
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	701a      	strb	r2, [r3, #0]
		ADC_Channels_Config(&hadc);
 8008caa:	f7ff fe01 	bl	80088b0 <ADC_Channels_Config>
		Channel =Get_channel(GetUart(ADC_port),side);
 8008cae:	0020      	movs	r0, r4
 8008cb0:	f004 fbe6 	bl	800d480 <GetUart>
	if(huart->Instance == USART2 && side == "top")
 8008cb4:	4a16      	ldr	r2, [pc, #88]	; (8008d10 <ADCSelectChannel+0x88>)
 8008cb6:	6803      	ldr	r3, [r0, #0]
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d011      	beq.n	8008ce0 <ADCSelectChannel+0x58>
	else if(huart->Instance == USART6 && side == "top")
 8008cbc:	4a15      	ldr	r2, [pc, #84]	; (8008d14 <ADCSelectChannel+0x8c>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d016      	beq.n	8008cf0 <ADCSelectChannel+0x68>
		Channel =Get_channel(GetUart(ADC_port),side);
 8008cc2:	4e15      	ldr	r6, [pc, #84]	; (8008d18 <ADCSelectChannel+0x90>)
		Rank_t =Get_Rank(ADC_port,side);
 8008cc4:	0029      	movs	r1, r5
 8008cc6:	0020      	movs	r0, r4
		Channel =Get_channel(GetUart(ADC_port),side);
 8008cc8:	7337      	strb	r7, [r6, #12]
		Rank_t =Get_Rank(ADC_port,side);
 8008cca:	f7ff ffb1 	bl	8008c30 <Get_Rank>
		if(ADC_flag == 0)
 8008cce:	2378      	movs	r3, #120	; 0x78
 8008cd0:	4a12      	ldr	r2, [pc, #72]	; (8008d1c <ADCSelectChannel+0x94>)
		Rank_t =Get_Rank(ADC_port,side);
 8008cd2:	7630      	strb	r0, [r6, #24]
		if(ADC_flag == 0)
 8008cd4:	5cd3      	ldrb	r3, [r2, r3]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1dc      	bne.n	8008c94 <ADCSelectChannel+0xc>
			MX_ADC_Init();
 8008cda:	f7ff fdbf 	bl	800885c <MX_ADC_Init>
}
 8008cde:	e7d9      	b.n	8008c94 <ADCSelectChannel+0xc>
	if(huart->Instance == USART2 && side == "top")
 8008ce0:	4b0f      	ldr	r3, [pc, #60]	; (8008d20 <ADCSelectChannel+0x98>)
 8008ce2:	429d      	cmp	r5, r3
 8008ce4:	d00e      	beq.n	8008d04 <ADCSelectChannel+0x7c>
	else if(huart->Instance == USART2 && side == "bottom")
 8008ce6:	4b0f      	ldr	r3, [pc, #60]	; (8008d24 <ADCSelectChannel+0x9c>)
 8008ce8:	429d      	cmp	r5, r3
 8008cea:	d1ea      	bne.n	8008cc2 <ADCSelectChannel+0x3a>
		return ADC_CHANNEL_3;
 8008cec:	2703      	movs	r7, #3
 8008cee:	e7e8      	b.n	8008cc2 <ADCSelectChannel+0x3a>
	else if(huart->Instance == USART6 && side == "top")
 8008cf0:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <ADCSelectChannel+0x98>)
 8008cf2:	429d      	cmp	r5, r3
 8008cf4:	d004      	beq.n	8008d00 <ADCSelectChannel+0x78>
	else if(huart->Instance == USART6 && side == "bottom")
 8008cf6:	4b0b      	ldr	r3, [pc, #44]	; (8008d24 <ADCSelectChannel+0x9c>)
 8008cf8:	429d      	cmp	r5, r3
 8008cfa:	d1e2      	bne.n	8008cc2 <ADCSelectChannel+0x3a>
		return ADC_CHANNEL_5;
 8008cfc:	2705      	movs	r7, #5
 8008cfe:	e7e0      	b.n	8008cc2 <ADCSelectChannel+0x3a>
		return ADC_CHANNEL_4;
 8008d00:	2704      	movs	r7, #4
 8008d02:	e7de      	b.n	8008cc2 <ADCSelectChannel+0x3a>
		return ADC_CHANNEL_2;
 8008d04:	2702      	movs	r7, #2
 8008d06:	e7dc      	b.n	8008cc2 <ADCSelectChannel+0x3a>
 8008d08:	20000c2c 	.word	0x20000c2c
 8008d0c:	20006f70 	.word	0x20006f70
 8008d10:	40004400 	.word	0x40004400
 8008d14:	40011400 	.word	0x40011400
 8008d18:	2000199c 	.word	0x2000199c
 8008d1c:	2000191c 	.word	0x2000191c
 8008d20:	080186a0 	.word	0x080186a0
 8008d24:	080186a4 	.word	0x080186a4

08008d28 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2a:	4647      	mov	r7, r8
 8008d2c:	46ce      	mov	lr, r9
	if(ADC_flag == 1){
 8008d2e:	2378      	movs	r3, #120	; 0x78
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008d30:	b580      	push	{r7, lr}
	if(ADC_flag == 1){
 8008d32:	4d3a      	ldr	r5, [pc, #232]	; (8008e1c <ReadADCChannel+0xf4>)
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008d34:	4680      	mov	r8, r0
	if(ADC_flag == 1){
 8008d36:	5ceb      	ldrb	r3, [r5, r3]
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008d38:	000f      	movs	r7, r1
 8008d3a:	0016      	movs	r6, r2
	if(ADC_flag == 1){
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d00b      	beq.n	8008d58 <ReadADCChannel+0x30>
 8008d40:	4c37      	ldr	r4, [pc, #220]	; (8008e20 <ReadADCChannel+0xf8>)
	*ADC_Value =(float )ADCchannelvalue[Rank_t];
 8008d42:	7e23      	ldrb	r3, [r4, #24]
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	18e4      	adds	r4, r4, r3
 8008d48:	8ba0      	ldrh	r0, [r4, #28]
 8008d4a:	f7f8 f90d 	bl	8000f68 <__aeabi_ui2f>
 8008d4e:	6030      	str	r0, [r6, #0]
}
 8008d50:	bc0c      	pop	{r2, r3}
 8008d52:	4690      	mov	r8, r2
 8008d54:	4699      	mov	r9, r3
 8008d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel =Get_channel(GetUart(Port),side);
 8008d58:	f004 fb92 	bl	800d480 <GetUart>
	if(huart->Instance == USART2 && side == "top")
 8008d5c:	4a31      	ldr	r2, [pc, #196]	; (8008e24 <ReadADCChannel+0xfc>)
 8008d5e:	6803      	ldr	r3, [r0, #0]
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d03f      	beq.n	8008de4 <ReadADCChannel+0xbc>
	else if(huart->Instance == USART6 && side == "top")
 8008d64:	4a30      	ldr	r2, [pc, #192]	; (8008e28 <ReadADCChannel+0x100>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d049      	beq.n	8008dfe <ReadADCChannel+0xd6>
		Channel =Get_channel(GetUart(Port),side);
 8008d6a:	464b      	mov	r3, r9
 8008d6c:	4c2c      	ldr	r4, [pc, #176]	; (8008e20 <ReadADCChannel+0xf8>)
		Rank_t =Get_Rank(Port,side);
 8008d6e:	0039      	movs	r1, r7
 8008d70:	4640      	mov	r0, r8
		Channel =Get_channel(GetUart(Port),side);
 8008d72:	7323      	strb	r3, [r4, #12]
		Rank_t =Get_Rank(Port,side);
 8008d74:	f7ff ff5c 	bl	8008c30 <Get_Rank>
		sConfig.Channel =Channel;
 8008d78:	7b23      	ldrb	r3, [r4, #12]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008d7a:	2280      	movs	r2, #128	; 0x80
		sConfig.Channel =Channel;
 8008d7c:	67eb      	str	r3, [r5, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008d7e:	2380      	movs	r3, #128	; 0x80
 8008d80:	0152      	lsls	r2, r2, #5
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008d82:	0029      	movs	r1, r5
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008d84:	50ea      	str	r2, [r5, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008d86:	2203      	movs	r2, #3
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008d88:	4f28      	ldr	r7, [pc, #160]	; (8008e2c <ReadADCChannel+0x104>)
		Rank_t =Get_Rank(Port,side);
 8008d8a:	7620      	strb	r0, [r4, #24]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008d8c:	3304      	adds	r3, #4
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008d8e:	317c      	adds	r1, #124	; 0x7c
 8008d90:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008d92:	50ea      	str	r2, [r5, r3]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008d94:	f006 fdf0 	bl	800f978 <HAL_ADC_ConfigChannel>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d12c      	bne.n	8008df6 <ReadADCChannel+0xce>
		HAL_ADC_Start(&hadc);
 8008d9c:	0038      	movs	r0, r7
 8008d9e:	f006 fd35 	bl	800f80c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008da2:	2164      	movs	r1, #100	; 0x64
 8008da4:	0038      	movs	r0, r7
 8008da6:	f006 fd7d 	bl	800f8a4 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] =HAL_ADC_GetValue(&hadc);
 8008daa:	0038      	movs	r0, r7
 8008dac:	f006 fdde 	bl	800f96c <HAL_ADC_GetValue>
 8008db0:	7e23      	ldrb	r3, [r4, #24]
 8008db2:	005b      	lsls	r3, r3, #1
 8008db4:	18e3      	adds	r3, r4, r3
 8008db6:	8398      	strh	r0, [r3, #28]
		HAL_ADC_Stop(&hadc);
 8008db8:	0038      	movs	r0, r7
 8008dba:	f006 fd53 	bl	800f864 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008dbe:	7b23      	ldrb	r3, [r4, #12]
		sConfig.Rank = ADC_RANK_NONE;
 8008dc0:	4a1b      	ldr	r2, [pc, #108]	; (8008e30 <ReadADCChannel+0x108>)
		sConfig.Channel =Channel;
 8008dc2:	67eb      	str	r3, [r5, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_NONE;
 8008dc4:	2380      	movs	r3, #128	; 0x80
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008dc6:	0029      	movs	r1, r5
		sConfig.Rank = ADC_RANK_NONE;
 8008dc8:	50ea      	str	r2, [r5, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008dca:	2203      	movs	r2, #3
 8008dcc:	3304      	adds	r3, #4
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008dce:	317c      	adds	r1, #124	; 0x7c
 8008dd0:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008dd2:	50ea      	str	r2, [r5, r3]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008dd4:	f006 fdd0 	bl	800f978 <HAL_ADC_ConfigChannel>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d0b2      	beq.n	8008d42 <ReadADCChannel+0x1a>
	HAL_Delay(100);
 8008ddc:	2064      	movs	r0, #100	; 0x64
 8008dde:	f006 fb97 	bl	800f510 <HAL_Delay>
 8008de2:	e7ae      	b.n	8008d42 <ReadADCChannel+0x1a>
	if(huart->Instance == USART2 && side == "top")
 8008de4:	4b13      	ldr	r3, [pc, #76]	; (8008e34 <ReadADCChannel+0x10c>)
 8008de6:	429f      	cmp	r7, r3
 8008de8:	d012      	beq.n	8008e10 <ReadADCChannel+0xe8>
	else if(huart->Instance == USART2 && side == "bottom")
 8008dea:	4b13      	ldr	r3, [pc, #76]	; (8008e38 <ReadADCChannel+0x110>)
 8008dec:	429f      	cmp	r7, r3
 8008dee:	d1bc      	bne.n	8008d6a <ReadADCChannel+0x42>
		return ADC_CHANNEL_3;
 8008df0:	2303      	movs	r3, #3
 8008df2:	4699      	mov	r9, r3
 8008df4:	e7b9      	b.n	8008d6a <ReadADCChannel+0x42>
	HAL_Delay(100);
 8008df6:	2064      	movs	r0, #100	; 0x64
 8008df8:	f006 fb8a 	bl	800f510 <HAL_Delay>
 8008dfc:	e7ce      	b.n	8008d9c <ReadADCChannel+0x74>
	else if(huart->Instance == USART6 && side == "top")
 8008dfe:	4b0d      	ldr	r3, [pc, #52]	; (8008e34 <ReadADCChannel+0x10c>)
 8008e00:	429f      	cmp	r7, r3
 8008e02:	d008      	beq.n	8008e16 <ReadADCChannel+0xee>
	else if(huart->Instance == USART6 && side == "bottom")
 8008e04:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <ReadADCChannel+0x110>)
 8008e06:	429f      	cmp	r7, r3
 8008e08:	d1af      	bne.n	8008d6a <ReadADCChannel+0x42>
		return ADC_CHANNEL_5;
 8008e0a:	2305      	movs	r3, #5
 8008e0c:	4699      	mov	r9, r3
 8008e0e:	e7ac      	b.n	8008d6a <ReadADCChannel+0x42>
		return ADC_CHANNEL_2;
 8008e10:	2302      	movs	r3, #2
 8008e12:	4699      	mov	r9, r3
 8008e14:	e7a9      	b.n	8008d6a <ReadADCChannel+0x42>
		return ADC_CHANNEL_4;
 8008e16:	2304      	movs	r3, #4
 8008e18:	4699      	mov	r9, r3
 8008e1a:	e7a6      	b.n	8008d6a <ReadADCChannel+0x42>
 8008e1c:	2000191c 	.word	0x2000191c
 8008e20:	2000199c 	.word	0x2000199c
 8008e24:	40004400 	.word	0x40004400
 8008e28:	40011400 	.word	0x40011400
 8008e2c:	20006f70 	.word	0x20006f70
 8008e30:	00001001 	.word	0x00001001
 8008e34:	080186a0 	.word	0x080186a0
 8008e38:	080186a4 	.word	0x080186a4

08008e3c <buttonReleasedCallback>:
 8008e3c:	4770      	bx	lr
 8008e3e:	46c0      	nop			; (mov r8, r8)

08008e40 <buttonClickedCallback>:
 8008e40:	4770      	bx	lr
 8008e42:	46c0      	nop			; (mov r8, r8)

08008e44 <buttonDblClickedCallback>:
 8008e44:	4770      	bx	lr
 8008e46:	46c0      	nop			; (mov r8, r8)

08008e48 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port,uint8_t eventType){
}
 8008e48:	4770      	bx	lr
 8008e4a:	46c0      	nop			; (mov r8, r8)

08008e4c <buttonReleasedForYCallback>:
 8008e4c:	4770      	bx	lr
 8008e4e:	46c0      	nop			; (mov r8, r8)

08008e50 <CheckAttachedButtons>:
void CheckAttachedButtons(void){
 8008e50:	4bc2      	ldr	r3, [pc, #776]	; (800915c <CheckAttachedButtons+0x30c>)
 8008e52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e54:	4645      	mov	r5, r8
 8008e56:	001c      	movs	r4, r3
 8008e58:	4698      	mov	r8, r3
	uint8_t connected =GPIO_PIN_RESET, state =0;
 8008e5a:	2300      	movs	r3, #0
void CheckAttachedButtons(void){
 8008e5c:	46de      	mov	lr, fp
 8008e5e:	464e      	mov	r6, r9
 8008e60:	4657      	mov	r7, sl
	uint8_t connected =GPIO_PIN_RESET, state =0;
 8008e62:	469b      	mov	fp, r3
void CheckAttachedButtons(void){
 8008e64:	b5e0      	push	{r5, r6, r7, lr}
 8008e66:	b08d      	sub	sp, #52	; 0x34
	uint8_t connected =GPIO_PIN_RESET, state =0;
 8008e68:	9306      	str	r3, [sp, #24]
			if(delayButtonStateReset == false)
 8008e6a:	4bbd      	ldr	r3, [pc, #756]	; (8009160 <CheckAttachedButtons+0x310>)
void CheckAttachedButtons(void){
 8008e6c:	2501      	movs	r5, #1
			if(delayButtonStateReset == false)
 8008e6e:	4699      	mov	r9, r3
						if(dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime){
 8008e70:	465b      	mov	r3, fp
 8008e72:	3409      	adds	r4, #9
 8008e74:	9305      	str	r3, [sp, #20]
 8008e76:	b2eb      	uxtb	r3, r5
 8008e78:	469a      	mov	sl, r3
		if(button[i].type)			// Only check defined butons
 8008e7a:	7863      	ldrb	r3, [r4, #1]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d100      	bne.n	8008e82 <CheckAttachedButtons+0x32>
 8008e80:	e0ec      	b.n	800905c <CheckAttachedButtons+0x20c>
			if(delayButtonStateReset == false)
 8008e82:	2324      	movs	r3, #36	; 0x24
 8008e84:	464a      	mov	r2, r9
 8008e86:	5cd3      	ldrb	r3, [r2, r3]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d100      	bne.n	8008e8e <CheckAttachedButtons+0x3e>
				button[i].state =NONE;
 8008e8c:	7023      	strb	r3, [r4, #0]
			GetPortGPIOs(i,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 8008e8e:	ab06      	add	r3, sp, #24
 8008e90:	469c      	mov	ip, r3
 8008e92:	270e      	movs	r7, #14
 8008e94:	ae09      	add	r6, sp, #36	; 0x24
 8008e96:	4467      	add	r7, ip
 8008e98:	ab0b      	add	r3, sp, #44	; 0x2c
 8008e9a:	0032      	movs	r2, r6
 8008e9c:	a90a      	add	r1, sp, #40	; 0x28
 8008e9e:	9700      	str	r7, [sp, #0]
 8008ea0:	4650      	mov	r0, sl
 8008ea2:	f003 fd11 	bl	800c8c8 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 8008ea6:	8831      	ldrh	r1, [r6, #0]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008eac:	f007 ffcc 	bl	8010e48 <HAL_GPIO_WritePin>
			Delay_us(10);
 8008eb0:	200a      	movs	r0, #10
 8008eb2:	f004 f899 	bl	800cfe8 <StartMicroDelay>
			if(HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin) == GPIO_PIN_RESET){
 8008eb6:	8839      	ldrh	r1, [r7, #0]
 8008eb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008eba:	f007 ffbf 	bl	8010e3c <HAL_GPIO_ReadPin>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d100      	bne.n	8008ec4 <CheckAttachedButtons+0x74>
 8008ec2:	e122      	b.n	800910a <CheckAttachedButtons+0x2ba>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 8008ec4:	8831      	ldrh	r1, [r6, #0]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008eca:	f007 ffbd 	bl	8010e48 <HAL_GPIO_WritePin>
			switch(button[i].type){
 8008ece:	7863      	ldrb	r3, [r4, #1]
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d100      	bne.n	8008ed6 <CheckAttachedButtons+0x86>
 8008ed4:	e0d0      	b.n	8009078 <CheckAttachedButtons+0x228>
 8008ed6:	d800      	bhi.n	8008eda <CheckAttachedButtons+0x8a>
 8008ed8:	e0cc      	b.n	8009074 <CheckAttachedButtons+0x224>
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d100      	bne.n	8008ee0 <CheckAttachedButtons+0x90>
 8008ede:	e14d      	b.n	800917c <CheckAttachedButtons+0x32c>
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	d000      	beq.n	8008ee6 <CheckAttachedButtons+0x96>
 8008ee4:	e11f      	b.n	8009126 <CheckAttachedButtons+0x2d6>
 8008ee6:	4641      	mov	r1, r8
					if(connected == GPIO_PIN_SET)
 8008ee8:	9e05      	ldr	r6, [sp, #20]
 8008eea:	00aa      	lsls	r2, r5, #2
 8008eec:	3140      	adds	r1, #64	; 0x40
 8008eee:	588b      	ldr	r3, [r1, r2]
 8008ef0:	2e01      	cmp	r6, #1
 8008ef2:	d100      	bne.n	8008ef6 <CheckAttachedButtons+0xa6>
 8008ef4:	e14d      	b.n	8009192 <CheckAttachedButtons+0x342>
					else if(connected == GPIO_PIN_RESET)
 8008ef6:	2e00      	cmp	r6, #0
 8008ef8:	d100      	bne.n	8008efc <CheckAttachedButtons+0xac>
 8008efa:	e233      	b.n	8009364 <CheckAttachedButtons+0x514>
			if(state == CLOSED || state == ON){
 8008efc:	9906      	ldr	r1, [sp, #24]
 8008efe:	2904      	cmp	r1, #4
 8008f00:	d100      	bne.n	8008f04 <CheckAttachedButtons+0xb4>
 8008f02:	e118      	b.n	8009136 <CheckAttachedButtons+0x2e6>
 8008f04:	9906      	ldr	r1, [sp, #24]
 8008f06:	2902      	cmp	r1, #2
 8008f08:	d100      	bne.n	8008f0c <CheckAttachedButtons+0xbc>
 8008f0a:	e114      	b.n	8009136 <CheckAttachedButtons+0x2e6>
			if(state == OPEN || state == OFF){
 8008f0c:	9906      	ldr	r1, [sp, #24]
 8008f0e:	2903      	cmp	r1, #3
 8008f10:	d003      	beq.n	8008f1a <CheckAttachedButtons+0xca>
 8008f12:	4894      	ldr	r0, [pc, #592]	; (8009164 <CheckAttachedButtons+0x314>)
 8008f14:	9004      	str	r0, [sp, #16]
 8008f16:	2901      	cmp	r1, #1
 8008f18:	d116      	bne.n	8008f48 <CheckAttachedButtons+0xf8>
				if(releaseCounter[i] < 0xFFFF)
 8008f1a:	4640      	mov	r0, r8
 8008f1c:	305c      	adds	r0, #92	; 0x5c
 8008f1e:	5881      	ldr	r1, [r0, r2]
 8008f20:	4e91      	ldr	r6, [pc, #580]	; (8009168 <CheckAttachedButtons+0x318>)
 8008f22:	42b1      	cmp	r1, r6
 8008f24:	d900      	bls.n	8008f28 <CheckAttachedButtons+0xd8>
 8008f26:	e0bc      	b.n	80090a2 <CheckAttachedButtons+0x252>
					++releaseCounter[i];		// Advance the debounce counter
 8008f28:	3101      	adds	r1, #1
 8008f2a:	5081      	str	r1, [r0, r2]
 8008f2c:	488d      	ldr	r0, [pc, #564]	; (8009164 <CheckAttachedButtons+0x314>)
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8008f2e:	272f      	movs	r7, #47	; 0x2f
 8008f30:	9004      	str	r0, [sp, #16]
 8008f32:	7946      	ldrb	r6, [r0, #5]
 8008f34:	4648      	mov	r0, r9
 8008f36:	498d      	ldr	r1, [pc, #564]	; (800916c <CheckAttachedButtons+0x31c>)
 8008f38:	5dc7      	ldrb	r7, [r0, r7]
 8008f3a:	5c69      	ldrb	r1, [r5, r1]
 8008f3c:	2f02      	cmp	r7, #2
 8008f3e:	d100      	bne.n	8008f42 <CheckAttachedButtons+0xf2>
 8008f40:	e103      	b.n	800914a <CheckAttachedButtons+0x2fa>
				else if(dblCounter[i] > BOS.buttons.maxInterClickTime){
 8008f42:	42b1      	cmp	r1, r6
 8008f44:	d900      	bls.n	8008f48 <CheckAttachedButtons+0xf8>
 8008f46:	e102      	b.n	800914e <CheckAttachedButtons+0x2fe>
 8008f48:	4646      	mov	r6, r8
			if(pressCounter[i] < BOS.buttons.debounce){
 8008f4a:	9904      	ldr	r1, [sp, #16]
 8008f4c:	365c      	adds	r6, #92	; 0x5c
 8008f4e:	58b0      	ldr	r0, [r6, r2]
 8008f50:	8809      	ldrh	r1, [r1, #0]
 8008f52:	9003      	str	r0, [sp, #12]
 8008f54:	4299      	cmp	r1, r3
 8008f56:	d84d      	bhi.n	8008ff4 <CheckAttachedButtons+0x1a4>
				if(pressCounter[i] == BOS.buttons.debounce){
 8008f58:	d105      	bne.n	8008f66 <CheckAttachedButtons+0x116>
					button[i].state =PRESSED;			// Record a PRESSED event. This event is always reset on next tick.
 8008f5a:	2707      	movs	r7, #7
 8008f5c:	7027      	strb	r7, [r4, #0]
					++pressCounter[i];
 8008f5e:	4647      	mov	r7, r8
 8008f60:	3301      	adds	r3, #1
 8008f62:	3740      	adds	r7, #64	; 0x40
 8008f64:	50bb      	str	r3, [r7, r2]
				if(releaseCounter[i] > BOS.buttons.debounce)			// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8008f66:	9803      	ldr	r0, [sp, #12]
 8008f68:	4281      	cmp	r1, r0
 8008f6a:	d205      	bcs.n	8008f78 <CheckAttachedButtons+0x128>
					releaseCounter[i] =0;
 8008f6c:	4646      	mov	r6, r8
 8008f6e:	2700      	movs	r7, #0
 8008f70:	2000      	movs	r0, #0
 8008f72:	365c      	adds	r6, #92	; 0x5c
 8008f74:	50b7      	str	r7, [r6, r2]
 8008f76:	9003      	str	r0, [sp, #12]
				if(pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500){
 8008f78:	9804      	ldr	r0, [sp, #16]
 8008f7a:	8840      	ldrh	r0, [r0, #2]
 8008f7c:	9007      	str	r0, [sp, #28]
 8008f7e:	4298      	cmp	r0, r3
 8008f80:	d204      	bcs.n	8008f8c <CheckAttachedButtons+0x13c>
 8008f82:	20f4      	movs	r0, #244	; 0xf4
 8008f84:	30ff      	adds	r0, #255	; 0xff
 8008f86:	4283      	cmp	r3, r0
 8008f88:	d800      	bhi.n	8008f8c <CheckAttachedButtons+0x13c>
 8008f8a:	e10c      	b.n	80091a6 <CheckAttachedButtons+0x356>
				else if(pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF){
 8008f8c:	4878      	ldr	r0, [pc, #480]	; (8009170 <CheckAttachedButtons+0x320>)
 8008f8e:	4684      	mov	ip, r0
 8008f90:	4878      	ldr	r0, [pc, #480]	; (8009174 <CheckAttachedButtons+0x324>)
 8008f92:	449c      	add	ip, r3
 8008f94:	4584      	cmp	ip, r0
 8008f96:	d82d      	bhi.n	8008ff4 <CheckAttachedButtons+0x1a4>
					if(clicked)
 8008f98:	202f      	movs	r0, #47	; 0x2f
 8008f9a:	4684      	mov	ip, r0
 8008f9c:	4648      	mov	r0, r9
 8008f9e:	4667      	mov	r7, ip
 8008fa0:	5dc0      	ldrb	r0, [r0, r7]
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	d002      	beq.n	8008fac <CheckAttachedButtons+0x15c>
						clicked =0;						// Cannot be a click
 8008fa6:	4648      	mov	r0, r9
 8008fa8:	2600      	movs	r6, #0
 8008faa:	55c6      	strb	r6, [r0, r7]
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 8008fac:	78a0      	ldrb	r0, [r4, #2]
	t1 *=1000;
 8008fae:	0147      	lsls	r7, r0, #5
 8008fb0:	1a3f      	subs	r7, r7, r0
 8008fb2:	00bf      	lsls	r7, r7, #2
 8008fb4:	4683      	mov	fp, r0
 8008fb6:	46bc      	mov	ip, r7
 8008fb8:	44dc      	add	ip, fp
 8008fba:	4660      	mov	r0, ip
 8008fbc:	00c0      	lsls	r0, r0, #3
	if(pressCounter[port] == t1){
 8008fbe:	4298      	cmp	r0, r3
 8008fc0:	d100      	bne.n	8008fc4 <CheckAttachedButtons+0x174>
 8008fc2:	e169      	b.n	8009298 <CheckAttachedButtons+0x448>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 8008fc4:	78e0      	ldrb	r0, [r4, #3]
	t2 *=1000;
 8008fc6:	0147      	lsls	r7, r0, #5
 8008fc8:	1a3f      	subs	r7, r7, r0
 8008fca:	00bf      	lsls	r7, r7, #2
 8008fcc:	4683      	mov	fp, r0
 8008fce:	46bc      	mov	ip, r7
 8008fd0:	44dc      	add	ip, fp
 8008fd2:	4660      	mov	r0, ip
 8008fd4:	00c0      	lsls	r0, r0, #3
	else if(pressCounter[port] == t2){
 8008fd6:	4298      	cmp	r0, r3
 8008fd8:	d100      	bne.n	8008fdc <CheckAttachedButtons+0x18c>
 8008fda:	e175      	b.n	80092c8 <CheckAttachedButtons+0x478>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 8008fdc:	7920      	ldrb	r0, [r4, #4]
	t3 *=1000;
 8008fde:	0146      	lsls	r6, r0, #5
 8008fe0:	1a36      	subs	r6, r6, r0
 8008fe2:	00b6      	lsls	r6, r6, #2
 8008fe4:	4683      	mov	fp, r0
 8008fe6:	46b4      	mov	ip, r6
 8008fe8:	44dc      	add	ip, fp
 8008fea:	4660      	mov	r0, ip
 8008fec:	00c0      	lsls	r0, r0, #3
	else if(pressCounter[port] == t3){
 8008fee:	4298      	cmp	r0, r3
 8008ff0:	d100      	bne.n	8008ff4 <CheckAttachedButtons+0x1a4>
 8008ff2:	e169      	b.n	80092c8 <CheckAttachedButtons+0x478>
			if(releaseCounter[i] < BOS.buttons.debounce){
 8008ff4:	9b03      	ldr	r3, [sp, #12]
 8008ff6:	4299      	cmp	r1, r3
 8008ff8:	d822      	bhi.n	8009040 <CheckAttachedButtons+0x1f0>
 8008ffa:	4643      	mov	r3, r8
 8008ffc:	9804      	ldr	r0, [sp, #16]
 8008ffe:	3340      	adds	r3, #64	; 0x40
 8009000:	8840      	ldrh	r0, [r0, #2]
 8009002:	589b      	ldr	r3, [r3, r2]
 8009004:	9007      	str	r0, [sp, #28]
				if(releaseCounter[i] == BOS.buttons.debounce){
 8009006:	9803      	ldr	r0, [sp, #12]
 8009008:	4281      	cmp	r1, r0
 800900a:	d100      	bne.n	800900e <CheckAttachedButtons+0x1be>
 800900c:	e0c4      	b.n	8009198 <CheckAttachedButtons+0x348>
 800900e:	4640      	mov	r0, r8
 8009010:	305c      	adds	r0, #92	; 0x5c
 8009012:	5880      	ldr	r0, [r0, r2]
				if(pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8009014:	4299      	cmp	r1, r3
 8009016:	d203      	bcs.n	8009020 <CheckAttachedButtons+0x1d0>
					pressCounter[i] =0;
 8009018:	4643      	mov	r3, r8
 800901a:	2100      	movs	r1, #0
 800901c:	3340      	adds	r3, #64	; 0x40
 800901e:	5099      	str	r1, [r3, r2]
				if(releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500){
 8009020:	9b07      	ldr	r3, [sp, #28]
 8009022:	4283      	cmp	r3, r0
 8009024:	d240      	bcs.n	80090a8 <CheckAttachedButtons+0x258>
 8009026:	23f4      	movs	r3, #244	; 0xf4
 8009028:	33ff      	adds	r3, #255	; 0xff
 800902a:	4298      	cmp	r0, r3
 800902c:	d83c      	bhi.n	80090a8 <CheckAttachedButtons+0x258>
					if(clicked == 1){
 800902e:	222f      	movs	r2, #47	; 0x2f
 8009030:	464b      	mov	r3, r9
 8009032:	5c9b      	ldrb	r3, [r3, r2]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d100      	bne.n	800903a <CheckAttachedButtons+0x1ea>
 8009038:	e15e      	b.n	80092f8 <CheckAttachedButtons+0x4a8>
					else if(clicked == 3){
 800903a:	2b03      	cmp	r3, #3
 800903c:	d100      	bne.n	8009040 <CheckAttachedButtons+0x1f0>
 800903e:	e115      	b.n	800926c <CheckAttachedButtons+0x41c>
			switch(button[i].state){
 8009040:	7823      	ldrb	r3, [r4, #0]
 8009042:	3b05      	subs	r3, #5
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b09      	cmp	r3, #9
 8009048:	d808      	bhi.n	800905c <CheckAttachedButtons+0x20c>
 800904a:	4a4b      	ldr	r2, [pc, #300]	; (8009178 <CheckAttachedButtons+0x328>)
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	58d3      	ldr	r3, [r2, r3]
 8009050:	469f      	mov	pc, r3
					buttonPressedCallback(i);
 8009052:	4650      	mov	r0, sl
 8009054:	f7ff f9d8 	bl	8008408 <buttonPressedCallback>
					button[i].state =NONE;
 8009058:	2300      	movs	r3, #0
 800905a:	7023      	strb	r3, [r4, #0]
 800905c:	3501      	adds	r5, #1
 800905e:	3409      	adds	r4, #9
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8009060:	2d07      	cmp	r5, #7
 8009062:	d000      	beq.n	8009066 <CheckAttachedButtons+0x216>
 8009064:	e707      	b.n	8008e76 <CheckAttachedButtons+0x26>
}
 8009066:	b00d      	add	sp, #52	; 0x34
 8009068:	bc3c      	pop	{r2, r3, r4, r5}
 800906a:	4690      	mov	r8, r2
 800906c:	4699      	mov	r9, r3
 800906e:	46a2      	mov	sl, r4
 8009070:	46ab      	mov	fp, r5
 8009072:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch(button[i].type){
 8009074:	2b01      	cmp	r3, #1
 8009076:	d156      	bne.n	8009126 <CheckAttachedButtons+0x2d6>
 8009078:	4641      	mov	r1, r8
					if(connected == GPIO_PIN_SET)
 800907a:	9805      	ldr	r0, [sp, #20]
 800907c:	00aa      	lsls	r2, r5, #2
 800907e:	3140      	adds	r1, #64	; 0x40
 8009080:	588b      	ldr	r3, [r1, r2]
 8009082:	2801      	cmp	r0, #1
 8009084:	d100      	bne.n	8009088 <CheckAttachedButtons+0x238>
 8009086:	e161      	b.n	800934c <CheckAttachedButtons+0x4fc>
					else if(connected == GPIO_PIN_RESET)
 8009088:	9905      	ldr	r1, [sp, #20]
 800908a:	2900      	cmp	r1, #0
 800908c:	d000      	beq.n	8009090 <CheckAttachedButtons+0x240>
 800908e:	e735      	b.n	8008efc <CheckAttachedButtons+0xac>
				if(releaseCounter[i] < 0xFFFF)
 8009090:	4640      	mov	r0, r8
 8009092:	2103      	movs	r1, #3
 8009094:	305c      	adds	r0, #92	; 0x5c
 8009096:	9106      	str	r1, [sp, #24]
 8009098:	4e33      	ldr	r6, [pc, #204]	; (8009168 <CheckAttachedButtons+0x318>)
 800909a:	5881      	ldr	r1, [r0, r2]
 800909c:	42b1      	cmp	r1, r6
 800909e:	d800      	bhi.n	80090a2 <CheckAttachedButtons+0x252>
 80090a0:	e742      	b.n	8008f28 <CheckAttachedButtons+0xd8>
					releaseCounter[i] =0;		// Reset debounce counter
 80090a2:	2100      	movs	r1, #0
 80090a4:	5081      	str	r1, [r0, r2]
 80090a6:	e741      	b.n	8008f2c <CheckAttachedButtons+0xdc>
				else if(releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF){
 80090a8:	0003      	movs	r3, r0
 80090aa:	4a32      	ldr	r2, [pc, #200]	; (8009174 <CheckAttachedButtons+0x324>)
 80090ac:	3bf5      	subs	r3, #245	; 0xf5
 80090ae:	3bff      	subs	r3, #255	; 0xff
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d8c5      	bhi.n	8009040 <CheckAttachedButtons+0x1f0>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 80090b4:	7961      	ldrb	r1, [r4, #5]
	t1 *=1000;
 80090b6:	014b      	lsls	r3, r1, #5
 80090b8:	1a5b      	subs	r3, r3, r1
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	185b      	adds	r3, r3, r1
 80090be:	00db      	lsls	r3, r3, #3
	if(releaseCounter[port] == t1){
 80090c0:	4283      	cmp	r3, r0
 80090c2:	d100      	bne.n	80090c6 <CheckAttachedButtons+0x276>
 80090c4:	e12e      	b.n	8009324 <CheckAttachedButtons+0x4d4>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 80090c6:	79a1      	ldrb	r1, [r4, #6]
	t2 *=1000;
 80090c8:	014b      	lsls	r3, r1, #5
 80090ca:	1a5b      	subs	r3, r3, r1
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	185b      	adds	r3, r3, r1
 80090d0:	00db      	lsls	r3, r3, #3
	else if(releaseCounter[port] == t2){
 80090d2:	4283      	cmp	r3, r0
 80090d4:	d007      	beq.n	80090e6 <CheckAttachedButtons+0x296>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 80090d6:	79e1      	ldrb	r1, [r4, #7]
	t3 *=1000;
 80090d8:	014b      	lsls	r3, r1, #5
 80090da:	1a5b      	subs	r3, r3, r1
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	185b      	adds	r3, r3, r1
 80090e0:	00db      	lsls	r3, r3, #3
	else if(releaseCounter[port] == t3){
 80090e2:	4283      	cmp	r3, r0
 80090e4:	d1ac      	bne.n	8009040 <CheckAttachedButtons+0x1f0>
		button[port].state =RELEASED_FOR_Y2_SEC;
 80090e6:	230d      	movs	r3, #13
 80090e8:	7023      	strb	r3, [r4, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)){
 80090ea:	2324      	movs	r3, #36	; 0x24
 80090ec:	464a      	mov	r2, r9
 80090ee:	5cd2      	ldrb	r2, [r2, r3]
 80090f0:	2a00      	cmp	r2, #0
 80090f2:	d1b3      	bne.n	800905c <CheckAttachedButtons+0x20c>
 80090f4:	7a22      	ldrb	r2, [r4, #8]
 80090f6:	0652      	lsls	r2, r2, #25
 80090f8:	d5b0      	bpl.n	800905c <CheckAttachedButtons+0x20c>
						delayButtonStateReset = true;
 80090fa:	4649      	mov	r1, r9
 80090fc:	2201      	movs	r2, #1
						buttonReleasedForYCallback(i,RELEASED_FOR_Y2_SEC - 11);
 80090fe:	4650      	mov	r0, sl
						delayButtonStateReset = true;
 8009100:	54ca      	strb	r2, [r1, r3]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y2_SEC - 11);
 8009102:	2102      	movs	r1, #2
 8009104:	f7ff fea2 	bl	8008e4c <buttonReleasedForYCallback>
 8009108:	e7a8      	b.n	800905c <CheckAttachedButtons+0x20c>
				HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_SET);
 800910a:	8831      	ldrh	r1, [r6, #0]
 800910c:	2201      	movs	r2, #1
 800910e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009110:	f007 fe9a 	bl	8010e48 <HAL_GPIO_WritePin>
				Delay_us(10);
 8009114:	200a      	movs	r0, #10
 8009116:	f003 ff67 	bl	800cfe8 <StartMicroDelay>
				connected =HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin);
 800911a:	8839      	ldrh	r1, [r7, #0]
 800911c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800911e:	f007 fe8d 	bl	8010e3c <HAL_GPIO_ReadPin>
 8009122:	9005      	str	r0, [sp, #20]
 8009124:	e6ce      	b.n	8008ec4 <CheckAttachedButtons+0x74>
 8009126:	4643      	mov	r3, r8
			if(state == CLOSED || state == ON){
 8009128:	9906      	ldr	r1, [sp, #24]
 800912a:	3340      	adds	r3, #64	; 0x40
 800912c:	00aa      	lsls	r2, r5, #2
 800912e:	589b      	ldr	r3, [r3, r2]
 8009130:	2904      	cmp	r1, #4
 8009132:	d000      	beq.n	8009136 <CheckAttachedButtons+0x2e6>
 8009134:	e6e6      	b.n	8008f04 <CheckAttachedButtons+0xb4>
				if(pressCounter[i] < 0xFFFF)
 8009136:	490c      	ldr	r1, [pc, #48]	; (8009168 <CheckAttachedButtons+0x318>)
 8009138:	428b      	cmp	r3, r1
 800913a:	d84f      	bhi.n	80091dc <CheckAttachedButtons+0x38c>
					++pressCounter[i];			// Advance the debounce counter
 800913c:	4641      	mov	r1, r8
 800913e:	3301      	adds	r3, #1
 8009140:	3140      	adds	r1, #64	; 0x40
 8009142:	508b      	str	r3, [r1, r2]
 8009144:	4907      	ldr	r1, [pc, #28]	; (8009164 <CheckAttachedButtons+0x314>)
 8009146:	9104      	str	r1, [sp, #16]
 8009148:	e6fe      	b.n	8008f48 <CheckAttachedButtons+0xf8>
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 800914a:	42b1      	cmp	r1, r6
 800914c:	d94e      	bls.n	80091ec <CheckAttachedButtons+0x39c>
					clicked =0;
 800914e:	2100      	movs	r1, #0
 8009150:	4648      	mov	r0, r9
 8009152:	262f      	movs	r6, #47	; 0x2f
 8009154:	5581      	strb	r1, [r0, r6]
					dblCounter[i] =0;			// Reset the inter-click counter
 8009156:	4805      	ldr	r0, [pc, #20]	; (800916c <CheckAttachedButtons+0x31c>)
 8009158:	5429      	strb	r1, [r5, r0]
 800915a:	e6f5      	b.n	8008f48 <CheckAttachedButtons+0xf8>
 800915c:	2000191c 	.word	0x2000191c
 8009160:	2000199c 	.word	0x2000199c
 8009164:	20006ea8 	.word	0x20006ea8
 8009168:	0000fffe 	.word	0x0000fffe
 800916c:	200019c4 	.word	0x200019c4
 8009170:	fffffe0c 	.word	0xfffffe0c
 8009174:	0000fe0a 	.word	0x0000fe0a
 8009178:	08017894 	.word	0x08017894
 800917c:	4641      	mov	r1, r8
					if(connected == GPIO_PIN_SET)
 800917e:	9805      	ldr	r0, [sp, #20]
 8009180:	00aa      	lsls	r2, r5, #2
 8009182:	3140      	adds	r1, #64	; 0x40
 8009184:	588b      	ldr	r3, [r1, r2]
 8009186:	2801      	cmp	r0, #1
 8009188:	d063      	beq.n	8009252 <CheckAttachedButtons+0x402>
					else if(connected == GPIO_PIN_RESET)
 800918a:	9905      	ldr	r1, [sp, #20]
 800918c:	2900      	cmp	r1, #0
 800918e:	d000      	beq.n	8009192 <CheckAttachedButtons+0x342>
 8009190:	e6b4      	b.n	8008efc <CheckAttachedButtons+0xac>
						state =OFF;
 8009192:	2101      	movs	r1, #1
 8009194:	9106      	str	r1, [sp, #24]
 8009196:	e6c0      	b.n	8008f1a <CheckAttachedButtons+0xca>
					button[i].state =RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 8009198:	2008      	movs	r0, #8
					++releaseCounter[i];
 800919a:	4646      	mov	r6, r8
					button[i].state =RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800919c:	7020      	strb	r0, [r4, #0]
					++releaseCounter[i];
 800919e:	365c      	adds	r6, #92	; 0x5c
 80091a0:	1c48      	adds	r0, r1, #1
 80091a2:	50b0      	str	r0, [r6, r2]
 80091a4:	e736      	b.n	8009014 <CheckAttachedButtons+0x1c4>
					if(clicked == 0)
 80091a6:	232f      	movs	r3, #47	; 0x2f
 80091a8:	4648      	mov	r0, r9
 80091aa:	5cc7      	ldrb	r7, [r0, r3]
 80091ac:	2f00      	cmp	r7, #0
 80091ae:	d100      	bne.n	80091b2 <CheckAttachedButtons+0x362>
 80091b0:	e0e3      	b.n	800937a <CheckAttachedButtons+0x52a>
					else if(clicked == 2){
 80091b2:	2f02      	cmp	r7, #2
 80091b4:	d000      	beq.n	80091b8 <CheckAttachedButtons+0x368>
 80091b6:	e71d      	b.n	8008ff4 <CheckAttachedButtons+0x1a4>
						if(dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime){
 80091b8:	4875      	ldr	r0, [pc, #468]	; (8009390 <CheckAttachedButtons+0x540>)
 80091ba:	9e04      	ldr	r6, [sp, #16]
 80091bc:	5c2f      	ldrb	r7, [r5, r0]
 80091be:	7930      	ldrb	r0, [r6, #4]
 80091c0:	42b8      	cmp	r0, r7
 80091c2:	d300      	bcc.n	80091c6 <CheckAttachedButtons+0x376>
 80091c4:	e716      	b.n	8008ff4 <CheckAttachedButtons+0x1a4>
 80091c6:	7970      	ldrb	r0, [r6, #5]
 80091c8:	42b8      	cmp	r0, r7
 80091ca:	d800      	bhi.n	80091ce <CheckAttachedButtons+0x37e>
 80091cc:	e712      	b.n	8008ff4 <CheckAttachedButtons+0x1a4>
							clicked =3;	// Record a possible double click
 80091ce:	4648      	mov	r0, r9
 80091d0:	2703      	movs	r7, #3
 80091d2:	54c7      	strb	r7, [r0, r3]
							dblCounter[i] =0;	// Reset the inter-click counter
 80091d4:	2300      	movs	r3, #0
 80091d6:	486e      	ldr	r0, [pc, #440]	; (8009390 <CheckAttachedButtons+0x540>)
 80091d8:	542b      	strb	r3, [r5, r0]
 80091da:	e70b      	b.n	8008ff4 <CheckAttachedButtons+0x1a4>
					pressCounter[i] =0;			// Reset debounce counter
 80091dc:	4643      	mov	r3, r8
 80091de:	2100      	movs	r1, #0
 80091e0:	3340      	adds	r3, #64	; 0x40
 80091e2:	5099      	str	r1, [r3, r2]
 80091e4:	496b      	ldr	r1, [pc, #428]	; (8009394 <CheckAttachedButtons+0x544>)
 80091e6:	2300      	movs	r3, #0
 80091e8:	9104      	str	r1, [sp, #16]
 80091ea:	e6ad      	b.n	8008f48 <CheckAttachedButtons+0xf8>
					++dblCounter[i];
 80091ec:	4868      	ldr	r0, [pc, #416]	; (8009390 <CheckAttachedButtons+0x540>)
 80091ee:	3101      	adds	r1, #1
 80091f0:	5429      	strb	r1, [r5, r0]
 80091f2:	e6a9      	b.n	8008f48 <CheckAttachedButtons+0xf8>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)){
 80091f4:	2324      	movs	r3, #36	; 0x24
 80091f6:	464a      	mov	r2, r9
 80091f8:	5cd2      	ldrb	r2, [r2, r3]
 80091fa:	2a00      	cmp	r2, #0
 80091fc:	d000      	beq.n	8009200 <CheckAttachedButtons+0x3b0>
 80091fe:	e72d      	b.n	800905c <CheckAttachedButtons+0x20c>
 8009200:	7a22      	ldrb	r2, [r4, #8]
 8009202:	2a7f      	cmp	r2, #127	; 0x7f
 8009204:	d800      	bhi.n	8009208 <CheckAttachedButtons+0x3b8>
 8009206:	e729      	b.n	800905c <CheckAttachedButtons+0x20c>
						delayButtonStateReset = true;
 8009208:	4649      	mov	r1, r9
 800920a:	2201      	movs	r2, #1
						buttonReleasedForYCallback(i,RELEASED_FOR_Y3_SEC - 11);
 800920c:	4650      	mov	r0, sl
						delayButtonStateReset = true;
 800920e:	54ca      	strb	r2, [r1, r3]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y3_SEC - 11);
 8009210:	2103      	movs	r1, #3
 8009212:	f7ff fe1b 	bl	8008e4c <buttonReleasedForYCallback>
 8009216:	e721      	b.n	800905c <CheckAttachedButtons+0x20c>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)){
 8009218:	2324      	movs	r3, #36	; 0x24
 800921a:	464a      	mov	r2, r9
 800921c:	5cd2      	ldrb	r2, [r2, r3]
 800921e:	2a00      	cmp	r2, #0
 8009220:	d000      	beq.n	8009224 <CheckAttachedButtons+0x3d4>
 8009222:	e71b      	b.n	800905c <CheckAttachedButtons+0x20c>
 8009224:	7a22      	ldrb	r2, [r4, #8]
 8009226:	06d2      	lsls	r2, r2, #27
 8009228:	d400      	bmi.n	800922c <CheckAttachedButtons+0x3dc>
 800922a:	e717      	b.n	800905c <CheckAttachedButtons+0x20c>
						delayButtonStateReset = true;
 800922c:	4649      	mov	r1, r9
 800922e:	2201      	movs	r2, #1
						buttonPressedForXCallback(i,PRESSED_FOR_X3_SEC - 8);
 8009230:	4650      	mov	r0, sl
						delayButtonStateReset = true;
 8009232:	54ca      	strb	r2, [r1, r3]
						buttonPressedForXCallback(i,PRESSED_FOR_X3_SEC - 8);
 8009234:	2103      	movs	r1, #3
 8009236:	f7ff fe07 	bl	8008e48 <buttonPressedForXCallback>
 800923a:	e70f      	b.n	800905c <CheckAttachedButtons+0x20c>
					buttonReleasedCallback(i);
 800923c:	4650      	mov	r0, sl
 800923e:	f7ff fdfd 	bl	8008e3c <buttonReleasedCallback>
					button[i].state =NONE;
 8009242:	2300      	movs	r3, #0
 8009244:	3501      	adds	r5, #1
 8009246:	7023      	strb	r3, [r4, #0]
 8009248:	3409      	adds	r4, #9
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800924a:	2d07      	cmp	r5, #7
 800924c:	d000      	beq.n	8009250 <CheckAttachedButtons+0x400>
 800924e:	e612      	b.n	8008e76 <CheckAttachedButtons+0x26>
 8009250:	e709      	b.n	8009066 <CheckAttachedButtons+0x216>
				if(pressCounter[i] < 0xFFFF)
 8009252:	4851      	ldr	r0, [pc, #324]	; (8009398 <CheckAttachedButtons+0x548>)
 8009254:	4283      	cmp	r3, r0
 8009256:	d900      	bls.n	800925a <CheckAttachedButtons+0x40a>
 8009258:	e092      	b.n	8009380 <CheckAttachedButtons+0x530>
						state =ON;
 800925a:	2102      	movs	r1, #2
 800925c:	9106      	str	r1, [sp, #24]
					++pressCounter[i];			// Advance the debounce counter
 800925e:	4641      	mov	r1, r8
 8009260:	3301      	adds	r3, #1
 8009262:	3140      	adds	r1, #64	; 0x40
 8009264:	508b      	str	r3, [r1, r2]
 8009266:	494b      	ldr	r1, [pc, #300]	; (8009394 <CheckAttachedButtons+0x544>)
 8009268:	9104      	str	r1, [sp, #16]
 800926a:	e66d      	b.n	8008f48 <CheckAttachedButtons+0xf8>
						button[i].state =DBL_CLICKED;			// Record a double button click event
 800926c:	3303      	adds	r3, #3
 800926e:	7023      	strb	r3, [r4, #0]
						clicked =0;			// Prepare for a single click
 8009270:	4649      	mov	r1, r9
 8009272:	2300      	movs	r3, #0
 8009274:	548b      	strb	r3, [r1, r2]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)){
 8009276:	2324      	movs	r3, #36	; 0x24
 8009278:	464a      	mov	r2, r9
 800927a:	5cd2      	ldrb	r2, [r2, r3]
 800927c:	2a00      	cmp	r2, #0
 800927e:	d000      	beq.n	8009282 <CheckAttachedButtons+0x432>
 8009280:	e6ec      	b.n	800905c <CheckAttachedButtons+0x20c>
 8009282:	7a22      	ldrb	r2, [r4, #8]
 8009284:	0792      	lsls	r2, r2, #30
 8009286:	d400      	bmi.n	800928a <CheckAttachedButtons+0x43a>
 8009288:	e6e8      	b.n	800905c <CheckAttachedButtons+0x20c>
						delayButtonStateReset = true;
 800928a:	2201      	movs	r2, #1
 800928c:	4649      	mov	r1, r9
						buttonDblClickedCallback(i);
 800928e:	4650      	mov	r0, sl
						delayButtonStateReset = true;
 8009290:	54ca      	strb	r2, [r1, r3]
						buttonDblClickedCallback(i);
 8009292:	f7ff fdd7 	bl	8008e44 <buttonDblClickedCallback>
 8009296:	e6e1      	b.n	800905c <CheckAttachedButtons+0x20c>
		button[port].state =PRESSED_FOR_X1_SEC;
 8009298:	2009      	movs	r0, #9
 800929a:	7020      	strb	r0, [r4, #0]
			if(releaseCounter[i] < BOS.buttons.debounce){
 800929c:	9803      	ldr	r0, [sp, #12]
 800929e:	4281      	cmp	r1, r0
 80092a0:	d800      	bhi.n	80092a4 <CheckAttachedButtons+0x454>
 80092a2:	e6b0      	b.n	8009006 <CheckAttachedButtons+0x1b6>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)){
 80092a4:	2324      	movs	r3, #36	; 0x24
 80092a6:	464a      	mov	r2, r9
 80092a8:	5cd2      	ldrb	r2, [r2, r3]
 80092aa:	2a00      	cmp	r2, #0
 80092ac:	d000      	beq.n	80092b0 <CheckAttachedButtons+0x460>
 80092ae:	e6d5      	b.n	800905c <CheckAttachedButtons+0x20c>
 80092b0:	7a22      	ldrb	r2, [r4, #8]
 80092b2:	0752      	lsls	r2, r2, #29
 80092b4:	d400      	bmi.n	80092b8 <CheckAttachedButtons+0x468>
 80092b6:	e6d1      	b.n	800905c <CheckAttachedButtons+0x20c>
						delayButtonStateReset = true;
 80092b8:	4649      	mov	r1, r9
 80092ba:	2201      	movs	r2, #1
						buttonPressedForXCallback(i,PRESSED_FOR_X1_SEC - 8);
 80092bc:	4650      	mov	r0, sl
						delayButtonStateReset = true;
 80092be:	54ca      	strb	r2, [r1, r3]
						buttonPressedForXCallback(i,PRESSED_FOR_X1_SEC - 8);
 80092c0:	2101      	movs	r1, #1
 80092c2:	f7ff fdc1 	bl	8008e48 <buttonPressedForXCallback>
 80092c6:	e6c9      	b.n	800905c <CheckAttachedButtons+0x20c>
		button[port].state =PRESSED_FOR_X2_SEC;
 80092c8:	200a      	movs	r0, #10
 80092ca:	7020      	strb	r0, [r4, #0]
			if(releaseCounter[i] < BOS.buttons.debounce){
 80092cc:	9803      	ldr	r0, [sp, #12]
 80092ce:	4281      	cmp	r1, r0
 80092d0:	d800      	bhi.n	80092d4 <CheckAttachedButtons+0x484>
 80092d2:	e698      	b.n	8009006 <CheckAttachedButtons+0x1b6>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)){
 80092d4:	2324      	movs	r3, #36	; 0x24
 80092d6:	464a      	mov	r2, r9
 80092d8:	5cd2      	ldrb	r2, [r2, r3]
 80092da:	2a00      	cmp	r2, #0
 80092dc:	d000      	beq.n	80092e0 <CheckAttachedButtons+0x490>
 80092de:	e6bd      	b.n	800905c <CheckAttachedButtons+0x20c>
 80092e0:	7a22      	ldrb	r2, [r4, #8]
 80092e2:	0712      	lsls	r2, r2, #28
 80092e4:	d400      	bmi.n	80092e8 <CheckAttachedButtons+0x498>
 80092e6:	e6b9      	b.n	800905c <CheckAttachedButtons+0x20c>
						delayButtonStateReset = true;
 80092e8:	4649      	mov	r1, r9
 80092ea:	2201      	movs	r2, #1
						buttonPressedForXCallback(i,PRESSED_FOR_X2_SEC - 8);
 80092ec:	4650      	mov	r0, sl
						delayButtonStateReset = true;
 80092ee:	54ca      	strb	r2, [r1, r3]
						buttonPressedForXCallback(i,PRESSED_FOR_X2_SEC - 8);
 80092f0:	2102      	movs	r1, #2
 80092f2:	f7ff fda9 	bl	8008e48 <buttonPressedForXCallback>
 80092f6:	e6b1      	b.n	800905c <CheckAttachedButtons+0x20c>
						clicked =2;			// Prepare for a double click
 80092f8:	4649      	mov	r1, r9
						button[i].state =CLICKED;	// Record a single button click event
 80092fa:	3304      	adds	r3, #4
 80092fc:	7023      	strb	r3, [r4, #0]
						clicked =2;			// Prepare for a double click
 80092fe:	3b03      	subs	r3, #3
 8009300:	548b      	strb	r3, [r1, r2]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)){
 8009302:	2324      	movs	r3, #36	; 0x24
 8009304:	464a      	mov	r2, r9
 8009306:	5cd2      	ldrb	r2, [r2, r3]
 8009308:	2a00      	cmp	r2, #0
 800930a:	d000      	beq.n	800930e <CheckAttachedButtons+0x4be>
 800930c:	e6a6      	b.n	800905c <CheckAttachedButtons+0x20c>
 800930e:	7a21      	ldrb	r1, [r4, #8]
 8009310:	3201      	adds	r2, #1
 8009312:	420a      	tst	r2, r1
 8009314:	d100      	bne.n	8009318 <CheckAttachedButtons+0x4c8>
 8009316:	e6a1      	b.n	800905c <CheckAttachedButtons+0x20c>
						delayButtonStateReset = true;
 8009318:	4649      	mov	r1, r9
						buttonClickedCallback(i);
 800931a:	4650      	mov	r0, sl
						delayButtonStateReset = true;
 800931c:	54ca      	strb	r2, [r1, r3]
						buttonClickedCallback(i);
 800931e:	f7ff fd8f 	bl	8008e40 <buttonClickedCallback>
 8009322:	e69b      	b.n	800905c <CheckAttachedButtons+0x20c>
		button[port].state =RELEASED_FOR_Y1_SEC;
 8009324:	230c      	movs	r3, #12
 8009326:	7023      	strb	r3, [r4, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)){
 8009328:	2324      	movs	r3, #36	; 0x24
 800932a:	464a      	mov	r2, r9
 800932c:	5cd2      	ldrb	r2, [r2, r3]
 800932e:	2a00      	cmp	r2, #0
 8009330:	d000      	beq.n	8009334 <CheckAttachedButtons+0x4e4>
 8009332:	e693      	b.n	800905c <CheckAttachedButtons+0x20c>
 8009334:	7a22      	ldrb	r2, [r4, #8]
 8009336:	0692      	lsls	r2, r2, #26
 8009338:	d400      	bmi.n	800933c <CheckAttachedButtons+0x4ec>
 800933a:	e68f      	b.n	800905c <CheckAttachedButtons+0x20c>
						delayButtonStateReset = true;
 800933c:	4649      	mov	r1, r9
 800933e:	2201      	movs	r2, #1
						buttonReleasedForYCallback(i,RELEASED_FOR_Y1_SEC - 11);
 8009340:	4650      	mov	r0, sl
						delayButtonStateReset = true;
 8009342:	54ca      	strb	r2, [r1, r3]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y1_SEC - 11);
 8009344:	2101      	movs	r1, #1
 8009346:	f7ff fd81 	bl	8008e4c <buttonReleasedForYCallback>
 800934a:	e687      	b.n	800905c <CheckAttachedButtons+0x20c>
				if(pressCounter[i] < 0xFFFF)
 800934c:	4812      	ldr	r0, [pc, #72]	; (8009398 <CheckAttachedButtons+0x548>)
 800934e:	4283      	cmp	r3, r0
 8009350:	d806      	bhi.n	8009360 <CheckAttachedButtons+0x510>
					++pressCounter[i];			// Advance the debounce counter
 8009352:	3301      	adds	r3, #1
					pressCounter[i] =0;			// Reset debounce counter
 8009354:	508b      	str	r3, [r1, r2]
						state =CLOSED;
 8009356:	2104      	movs	r1, #4
 8009358:	9106      	str	r1, [sp, #24]
 800935a:	490e      	ldr	r1, [pc, #56]	; (8009394 <CheckAttachedButtons+0x544>)
 800935c:	9104      	str	r1, [sp, #16]
 800935e:	e5f3      	b.n	8008f48 <CheckAttachedButtons+0xf8>
					pressCounter[i] =0;			// Reset debounce counter
 8009360:	2300      	movs	r3, #0
 8009362:	e7f7      	b.n	8009354 <CheckAttachedButtons+0x504>
				if(pressCounter[i] < 0xFFFF)
 8009364:	480c      	ldr	r0, [pc, #48]	; (8009398 <CheckAttachedButtons+0x548>)
 8009366:	4283      	cmp	r3, r0
 8009368:	d800      	bhi.n	800936c <CheckAttachedButtons+0x51c>
 800936a:	e776      	b.n	800925a <CheckAttachedButtons+0x40a>
					pressCounter[i] =0;			// Reset debounce counter
 800936c:	508e      	str	r6, [r1, r2]
						state =ON;
 800936e:	2102      	movs	r1, #2
 8009370:	9106      	str	r1, [sp, #24]
 8009372:	4908      	ldr	r1, [pc, #32]	; (8009394 <CheckAttachedButtons+0x544>)
					pressCounter[i] =0;			// Reset debounce counter
 8009374:	2300      	movs	r3, #0
 8009376:	9104      	str	r1, [sp, #16]
 8009378:	e5e6      	b.n	8008f48 <CheckAttachedButtons+0xf8>
						clicked =1;		// Record a possible single click
 800937a:	3701      	adds	r7, #1
 800937c:	54c7      	strb	r7, [r0, r3]
 800937e:	e639      	b.n	8008ff4 <CheckAttachedButtons+0x1a4>
					pressCounter[i] =0;			// Reset debounce counter
 8009380:	2300      	movs	r3, #0
 8009382:	508b      	str	r3, [r1, r2]
 8009384:	2102      	movs	r1, #2
 8009386:	9106      	str	r1, [sp, #24]
 8009388:	4902      	ldr	r1, [pc, #8]	; (8009394 <CheckAttachedButtons+0x544>)
 800938a:	9104      	str	r1, [sp, #16]
 800938c:	e5dc      	b.n	8008f48 <CheckAttachedButtons+0xf8>
 800938e:	46c0      	nop			; (mov r8, r8)
 8009390:	200019c4 	.word	0x200019c4
 8009394:	20006ea8 	.word	0x20006ea8
 8009398:	0000fffe 	.word	0x0000fffe

0800939c <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 800939c:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 800939e:	f005 fefd 	bl	800f19c <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 80093a2:	b2c4      	uxtb	r4, r0
 80093a4:	0020      	movs	r0, r4
 80093a6:	f7fe f903 	bl	80075b0 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 80093aa:	0020      	movs	r0, r4
 80093ac:	f7fe f92c 	bl	8007608 <SwitchStreamDMAToMsg>
}
 80093b0:	bd10      	pop	{r4, pc}
 80093b2:	46c0      	nop			; (mov r8, r8)

080093b4 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 80093b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093b6:	46ce      	mov	lr, r9
 80093b8:	4647      	mov	r7, r8
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b085      	sub	sp, #20
 80093be:	0015      	movs	r5, r2
 80093c0:	466a      	mov	r2, sp
 80093c2:	73d3      	strb	r3, [r2, #15]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 80093c4:	aa0c      	add	r2, sp, #48	; 0x30
 80093c6:	7812      	ldrb	r2, [r2, #0]
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 80093c8:	000e      	movs	r6, r1
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d06b      	beq.n	80094a6 <SetupDMAStreams+0xf2>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d051      	beq.n	8009476 <SetupDMAStreams+0xc2>
 80093d2:	2a00      	cmp	r2, #0
 80093d4:	d04f      	beq.n	8009476 <SetupDMAStreams+0xc2>
	if(direction == FORWARD){
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d06a      	beq.n	80094b0 <SetupDMAStreams+0xfc>
	else if(direction == BACKWARD){
 80093da:	2801      	cmp	r0, #1
 80093dc:	d052      	beq.n	8009484 <SetupDMAStreams+0xd0>
		return BOS_ERR_WrongParam;
 80093de:	2467      	movs	r4, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 80093e0:	2802      	cmp	r0, #2
 80093e2:	d149      	bne.n	8009478 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 80093e4:	0018      	movs	r0, r3
 80093e6:	f004 f84b 	bl	800d480 <GetUart>
 80093ea:	ab0c      	add	r3, sp, #48	; 0x30
 80093ec:	0004      	movs	r4, r0
 80093ee:	7818      	ldrb	r0, [r3, #0]
 80093f0:	f004 f846 	bl	800d480 <GetUart>
 80093f4:	2201      	movs	r2, #1
 80093f6:	0001      	movs	r1, r0
 80093f8:	0020      	movs	r0, r4
 80093fa:	f7fe f93f 	bl	800767c <StartDMAstream>
 80093fe:	2817      	cmp	r0, #23
 8009400:	d04f      	beq.n	80094a2 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8009402:	21fa      	movs	r1, #250	; 0xfa
 8009404:	0168      	lsls	r0, r5, #5
 8009406:	1b40      	subs	r0, r0, r5
 8009408:	0080      	lsls	r0, r0, #2
 800940a:	1940      	adds	r0, r0, r5
 800940c:	0089      	lsls	r1, r1, #2
 800940e:	00c0      	lsls	r0, r0, #3
 8009410:	f7f6 fe9e 	bl	8000150 <__udivsi3>
 8009414:	4b49      	ldr	r3, [pc, #292]	; (800953c <SetupDMAStreams+0x188>)
 8009416:	4d4a      	ldr	r5, [pc, #296]	; (8009540 <SetupDMAStreams+0x18c>)
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	4698      	mov	r8, r3
 800941c:	230f      	movs	r3, #15
 800941e:	0001      	movs	r1, r0
 8009420:	2200      	movs	r2, #0
 8009422:	446b      	add	r3, sp
 8009424:	0007      	movs	r7, r0
 8009426:	0028      	movs	r0, r5
 8009428:	f005 fd60 	bl	800eeec <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 800942c:	466b      	mov	r3, sp
 800942e:	7bdb      	ldrb	r3, [r3, #15]
 8009430:	4c44      	ldr	r4, [pc, #272]	; (8009544 <SetupDMAStreams+0x190>)
 8009432:	3b01      	subs	r3, #1
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	511e      	str	r6, [r3, r4]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009438:	ab0c      	add	r3, sp, #48	; 0x30
 800943a:	7818      	ldrb	r0, [r3, #0]
 800943c:	f004 f820 	bl	800d480 <GetUart>
 8009440:	466b      	mov	r3, sp
 8009442:	4681      	mov	r9, r0
 8009444:	7bd8      	ldrb	r0, [r3, #15]
 8009446:	f004 f81b 	bl	800d480 <GetUart>
 800944a:	2201      	movs	r2, #1
 800944c:	0001      	movs	r1, r0
 800944e:	4648      	mov	r0, r9
 8009450:	f7fe f914 	bl	800767c <StartDMAstream>
 8009454:	2817      	cmp	r0, #23
 8009456:	d024      	beq.n	80094a2 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009458:	4643      	mov	r3, r8
 800945a:	0028      	movs	r0, r5
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	2200      	movs	r2, #0
 8009460:	ab0c      	add	r3, sp, #48	; 0x30
 8009462:	0039      	movs	r1, r7
 8009464:	f005 fd42 	bl	800eeec <xTimerCreate>
		dmaStreamTotal[dst - 1] =count;
 8009468:	ab0c      	add	r3, sp, #48	; 0x30
 800946a:	781b      	ldrb	r3, [r3, #0]
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 800946c:	0005      	movs	r5, r0
		dmaStreamTotal[dst - 1] =count;
 800946e:	3b01      	subs	r3, #1
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	511e      	str	r6, [r3, r4]
 8009474:	e044      	b.n	8009500 <SetupDMAStreams+0x14c>
		return BOS_ERR_WrongParam;
 8009476:	2467      	movs	r4, #103	; 0x67
}
 8009478:	0020      	movs	r0, r4
 800947a:	b005      	add	sp, #20
 800947c:	bc0c      	pop	{r2, r3}
 800947e:	4690      	mov	r8, r2
 8009480:	4699      	mov	r9, r3
 8009482:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009484:	0010      	movs	r0, r2
 8009486:	f003 fffb 	bl	800d480 <GetUart>
 800948a:	466b      	mov	r3, sp
 800948c:	0004      	movs	r4, r0
 800948e:	7bd8      	ldrb	r0, [r3, #15]
 8009490:	f003 fff6 	bl	800d480 <GetUart>
 8009494:	2201      	movs	r2, #1
 8009496:	0001      	movs	r1, r0
 8009498:	0020      	movs	r0, r4
 800949a:	f7fe f8ef 	bl	800767c <StartDMAstream>
 800949e:	2817      	cmp	r0, #23
 80094a0:	d13d      	bne.n	800951e <SetupDMAStreams+0x16a>
			return BOS_ERR_PORT_BUSY;
 80094a2:	2417      	movs	r4, #23
 80094a4:	e7e8      	b.n	8009478 <SetupDMAStreams+0xc4>
		portStatus[src] =STREAM;
 80094a6:	2102      	movs	r1, #2
 80094a8:	4a27      	ldr	r2, [pc, #156]	; (8009548 <SetupDMAStreams+0x194>)
		return BOS_ERR_WrongParam;
 80094aa:	2467      	movs	r4, #103	; 0x67
		portStatus[src] =STREAM;
 80094ac:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 80094ae:	e7e3      	b.n	8009478 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 80094b0:	0018      	movs	r0, r3
 80094b2:	f003 ffe5 	bl	800d480 <GetUart>
 80094b6:	ab0c      	add	r3, sp, #48	; 0x30
 80094b8:	0004      	movs	r4, r0
 80094ba:	7818      	ldrb	r0, [r3, #0]
 80094bc:	f003 ffe0 	bl	800d480 <GetUart>
 80094c0:	2201      	movs	r2, #1
 80094c2:	0001      	movs	r1, r0
 80094c4:	0020      	movs	r0, r4
 80094c6:	f7fe f8d9 	bl	800767c <StartDMAstream>
 80094ca:	2817      	cmp	r0, #23
 80094cc:	d0e9      	beq.n	80094a2 <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 80094ce:	21fa      	movs	r1, #250	; 0xfa
 80094d0:	0168      	lsls	r0, r5, #5
 80094d2:	1b40      	subs	r0, r0, r5
 80094d4:	0080      	lsls	r0, r0, #2
 80094d6:	1940      	adds	r0, r0, r5
 80094d8:	0089      	lsls	r1, r1, #2
 80094da:	00c0      	lsls	r0, r0, #3
 80094dc:	f7f6 fe38 	bl	8000150 <__udivsi3>
 80094e0:	4b16      	ldr	r3, [pc, #88]	; (800953c <SetupDMAStreams+0x188>)
 80094e2:	0001      	movs	r1, r0
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	230f      	movs	r3, #15
 80094e8:	446b      	add	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80094ea:	2200      	movs	r2, #0
 80094ec:	4814      	ldr	r0, [pc, #80]	; (8009540 <SetupDMAStreams+0x18c>)
 80094ee:	f005 fcfd 	bl	800eeec <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 80094f2:	466b      	mov	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80094f4:	0005      	movs	r5, r0
		dmaStreamTotal[src - 1] =count;
 80094f6:	7bdb      	ldrb	r3, [r3, #15]
 80094f8:	4a12      	ldr	r2, [pc, #72]	; (8009544 <SetupDMAStreams+0x190>)
 80094fa:	3b01      	subs	r3, #1
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 8009500:	2400      	movs	r4, #0
	if(xTimerStream != NULL)
 8009502:	2d00      	cmp	r5, #0
 8009504:	d0b8      	beq.n	8009478 <SetupDMAStreams+0xc4>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8009506:	f005 f82b 	bl	800e560 <xTaskGetTickCount>
 800950a:	2301      	movs	r3, #1
 800950c:	425b      	negs	r3, r3
 800950e:	0002      	movs	r2, r0
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	2101      	movs	r1, #1
 8009514:	2300      	movs	r3, #0
 8009516:	0028      	movs	r0, r5
 8009518:	f005 fd08 	bl	800ef2c <xTimerGenericCommand>
 800951c:	e7ac      	b.n	8009478 <SetupDMAStreams+0xc4>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 800951e:	21fa      	movs	r1, #250	; 0xfa
 8009520:	0168      	lsls	r0, r5, #5
 8009522:	1b40      	subs	r0, r0, r5
 8009524:	0080      	lsls	r0, r0, #2
 8009526:	1940      	adds	r0, r0, r5
 8009528:	0089      	lsls	r1, r1, #2
 800952a:	00c0      	lsls	r0, r0, #3
 800952c:	f7f6 fe10 	bl	8000150 <__udivsi3>
 8009530:	4b02      	ldr	r3, [pc, #8]	; (800953c <SetupDMAStreams+0x188>)
 8009532:	0001      	movs	r1, r0
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	ab0c      	add	r3, sp, #48	; 0x30
 8009538:	e7d7      	b.n	80094ea <SetupDMAStreams+0x136>
 800953a:	46c0      	nop			; (mov r8, r8)
 800953c:	0800939d 	.word	0x0800939d
 8009540:	0801a21c 	.word	0x0801a21c
 8009544:	20001314 	.word	0x20001314
 8009548:	20000c2c 	.word	0x20000c2c

0800954c <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 800954c:	b510      	push	{r4, lr}
	switch(port){
 800954e:	2806      	cmp	r0, #6
 8009550:	d80a      	bhi.n	8009568 <NotifyMessagingTask+0x1c>
 8009552:	4b0b      	ldr	r3, [pc, #44]	; (8009580 <NotifyMessagingTask+0x34>)
 8009554:	0080      	lsls	r0, r0, #2
 8009556:	581b      	ldr	r3, [r3, r0]
 8009558:	469f      	mov	pc, r3
			;
			break;
#endif
#ifdef _P6
		case P6:
			xTaskNotifyGive(P6MsgTaskHandle)
 800955a:	4b0a      	ldr	r3, [pc, #40]	; (8009584 <NotifyMessagingTask+0x38>)
 800955c:	6818      	ldr	r0, [r3, #0]
 800955e:	2202      	movs	r2, #2
 8009560:	2300      	movs	r3, #0
 8009562:	2100      	movs	r1, #0
 8009564:	f005 fc02 	bl	800ed6c <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8009568:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 800956a:	4b07      	ldr	r3, [pc, #28]	; (8009588 <NotifyMessagingTask+0x3c>)
 800956c:	e7f6      	b.n	800955c <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P2MsgTaskHandle)
 800956e:	4b07      	ldr	r3, [pc, #28]	; (800958c <NotifyMessagingTask+0x40>)
 8009570:	e7f4      	b.n	800955c <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P3MsgTaskHandle)
 8009572:	4b07      	ldr	r3, [pc, #28]	; (8009590 <NotifyMessagingTask+0x44>)
 8009574:	e7f2      	b.n	800955c <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P4MsgTaskHandle)
 8009576:	4b07      	ldr	r3, [pc, #28]	; (8009594 <NotifyMessagingTask+0x48>)
 8009578:	e7f0      	b.n	800955c <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P5MsgTaskHandle)
 800957a:	4b07      	ldr	r3, [pc, #28]	; (8009598 <NotifyMessagingTask+0x4c>)
 800957c:	e7ee      	b.n	800955c <NotifyMessagingTask+0x10>
 800957e:	46c0      	nop			; (mov r8, r8)
 8009580:	080178bc 	.word	0x080178bc
 8009584:	20001834 	.word	0x20001834
 8009588:	20001820 	.word	0x20001820
 800958c:	20001824 	.word	0x20001824
 8009590:	20001828 	.word	0x20001828
 8009594:	2000182c 	.word	0x2000182c
 8009598:	20001830 	.word	0x20001830

0800959c <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	ac06      	add	r4, sp, #24
 80095a2:	8825      	ldrh	r5, [r4, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 80095a4:	0004      	movs	r4, r0
 80095a6:	4314      	orrs	r4, r2
 80095a8:	d011      	beq.n	80095ce <SendMessageFromPort+0x32>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d10b      	bne.n	80095c6 <SendMessageFromPort+0x2a>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80095ae:	1c96      	adds	r6, r2, #2
 80095b0:	b2f6      	uxtb	r6, r6
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 80095b2:	2467      	movs	r4, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80095b4:	2e01      	cmp	r6, #1
 80095b6:	d803      	bhi.n	80095c0 <SendMessageFromPort+0x24>
 80095b8:	9500      	str	r5, [sp, #0]
 80095ba:	f000 f80b 	bl	80095d4 <SendMessageFromPort.part.0>
 80095be:	0004      	movs	r4, r0
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
	
	return result;
}
 80095c0:	0020      	movs	r0, r4
 80095c2:	b002      	add	sp, #8
 80095c4:	bd70      	pop	{r4, r5, r6, pc}
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 80095c6:	2900      	cmp	r1, #0
 80095c8:	d0f6      	beq.n	80095b8 <SendMessageFromPort+0x1c>
 80095ca:	2a00      	cmp	r2, #0
 80095cc:	d1f4      	bne.n	80095b8 <SendMessageFromPort+0x1c>
		return BOS_ERR_WrongParam;
 80095ce:	2467      	movs	r4, #103	; 0x67
 80095d0:	e7f6      	b.n	80095c0 <SendMessageFromPort+0x24>
 80095d2:	46c0      	nop			; (mov r8, r8)

080095d4 <SendMessageFromPort.part.0>:
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80095d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095d6:	46de      	mov	lr, fp
 80095d8:	464e      	mov	r6, r9
 80095da:	4645      	mov	r5, r8
 80095dc:	4657      	mov	r7, sl
 80095de:	b5e0      	push	{r5, r6, r7, lr}
 80095e0:	b087      	sub	sp, #28
 80095e2:	0005      	movs	r5, r0
 80095e4:	9003      	str	r0, [sp, #12]
 80095e6:	469b      	mov	fp, r3
	TaskPriority =uxTaskPriorityGet( NULL);
 80095e8:	2000      	movs	r0, #0
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80095ea:	ab10      	add	r3, sp, #64	; 0x40
 80095ec:	4689      	mov	r9, r1
 80095ee:	4690      	mov	r8, r2
 80095f0:	881e      	ldrh	r6, [r3, #0]
	TaskPriority =uxTaskPriorityGet( NULL);
 80095f2:	f004 ff25 	bl	800e440 <uxTaskPriorityGet>
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80095f6:	2105      	movs	r1, #5
	TaskPriority =uxTaskPriorityGet( NULL);
 80095f8:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80095fa:	2000      	movs	r0, #0
 80095fc:	f004 ff30 	bl	800e460 <vTaskPrioritySet>
	message[0] ='H';
 8009600:	2348      	movs	r3, #72	; 0x48
 8009602:	4cd2      	ldr	r4, [pc, #840]	; (800994c <SendMessageFromPort.part.0+0x378>)
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009604:	464a      	mov	r2, r9
	message[0] ='H';
 8009606:	7023      	strb	r3, [r4, #0]
	message[1] ='Z';
 8009608:	3312      	adds	r3, #18
 800960a:	7063      	strb	r3, [r4, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800960c:	002b      	movs	r3, r5
 800960e:	4313      	orrs	r3, r2
 8009610:	d000      	beq.n	8009614 <SendMessageFromPort.part.0+0x40>
 8009612:	e094      	b.n	800973e <SendMessageFromPort.part.0+0x16a>
 8009614:	4643      	mov	r3, r8
 8009616:	1c9f      	adds	r7, r3, #2
 8009618:	b2ff      	uxtb	r7, r7
 800961a:	2f01      	cmp	r7, #1
 800961c:	d800      	bhi.n	8009620 <SendMessageFromPort.part.0+0x4c>
 800961e:	e095      	b.n	800974c <SendMessageFromPort.part.0+0x178>
 8009620:	465b      	mov	r3, fp
 8009622:	2b00      	cmp	r3, #0
 8009624:	d100      	bne.n	8009628 <SendMessageFromPort.part.0+0x54>
 8009626:	e091      	b.n	800974c <SendMessageFromPort.part.0+0x178>
			src =myID;
 8009628:	4bc9      	ldr	r3, [pc, #804]	; (8009950 <SendMessageFromPort.part.0+0x37c>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	4699      	mov	r9, r3
		message[2] =length;
 800962e:	2300      	movs	r3, #0
 8009630:	70a3      	strb	r3, [r4, #2]
		message[3] =dst;
 8009632:	4643      	mov	r3, r8
 8009634:	70e3      	strb	r3, [r4, #3]
		message[4] =src;
 8009636:	464b      	mov	r3, r9
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8009638:	4ac6      	ldr	r2, [pc, #792]	; (8009954 <SendMessageFromPort.part.0+0x380>)
		message[4] =src;
 800963a:	7123      	strb	r3, [r4, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 800963c:	7913      	ldrb	r3, [r2, #4]
 800963e:	7851      	ldrb	r1, [r2, #1]
 8009640:	011b      	lsls	r3, r3, #4
 8009642:	7812      	ldrb	r2, [r2, #0]
 8009644:	0089      	lsls	r1, r1, #2
 8009646:	430b      	orrs	r3, r1
 8009648:	4313      	orrs	r3, r2
		if(code > 0xFF)
 800964a:	22ff      	movs	r2, #255	; 0xff
 800964c:	455a      	cmp	r2, fp
 800964e:	4192      	sbcs	r2, r2
 8009650:	4252      	negs	r2, r2
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8009652:	0052      	lsls	r2, r2, #1
 8009654:	4313      	orrs	r3, r2
		message[6 + shift] =(uint8_t )code;
 8009656:	465a      	mov	r2, fp
 8009658:	71a2      	strb	r2, [r4, #6]
		if(extendCode == true){
 800965a:	2200      	movs	r2, #0
 800965c:	4692      	mov	sl, r2
 800965e:	465a      	mov	r2, fp
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8009660:	b2db      	uxtb	r3, r3
 8009662:	7163      	strb	r3, [r4, #5]
		if(extendCode == true){
 8009664:	2aff      	cmp	r2, #255	; 0xff
 8009666:	d903      	bls.n	8009670 <SendMessageFromPort.part.0+0x9c>
			message[6 + shift] =(uint8_t )(code >> 8);
 8009668:	0a12      	lsrs	r2, r2, #8
 800966a:	71e2      	strb	r2, [r4, #7]
			++shift;
 800966c:	2201      	movs	r2, #1
 800966e:	4692      	mov	sl, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8009670:	2e2e      	cmp	r6, #46	; 0x2e
 8009672:	d800      	bhi.n	8009676 <SendMessageFromPort.part.0+0xa2>
 8009674:	e157      	b.n	8009926 <SendMessageFromPort.part.0+0x352>
			message[5] |=0x80;
 8009676:	2280      	movs	r2, #128	; 0x80
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8009678:	272e      	movs	r7, #46	; 0x2e
			message[5] |=0x80;
 800967a:	4252      	negs	r2, r2
			totalNumberOfParams =numberOfParams;
 800967c:	4db6      	ldr	r5, [pc, #728]	; (8009958 <SendMessageFromPort.part.0+0x384>)
			message[5] |=0x80;
 800967e:	4313      	orrs	r3, r2
 8009680:	7163      	strb	r3, [r4, #5]
			totalNumberOfParams =numberOfParams;
 8009682:	806e      	strh	r6, [r5, #2]
				if((totalNumberOfParams / numberOfParams) >= 1){
 8009684:	2e2d      	cmp	r6, #45	; 0x2d
 8009686:	d900      	bls.n	800968a <SendMessageFromPort.part.0+0xb6>
 8009688:	e136      	b.n	80098f8 <SendMessageFromPort.part.0+0x324>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 800968a:	237f      	movs	r3, #127	; 0x7f
 800968c:	7962      	ldrb	r2, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800968e:	8829      	ldrh	r1, [r5, #0]
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8009690:	4013      	ands	r3, r2
 8009692:	7163      	strb	r3, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009694:	4653      	mov	r3, sl
 8009696:	1dd8      	adds	r0, r3, #7
 8009698:	4bb0      	ldr	r3, [pc, #704]	; (800995c <SendMessageFromPort.part.0+0x388>)
 800969a:	1820      	adds	r0, r4, r0
 800969c:	18c9      	adds	r1, r1, r3
 800969e:	0032      	movs	r2, r6
 80096a0:	f009 fb2f 	bl	8012d02 <memcpy>
					ptrShift =0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 80096a8:	806b      	strh	r3, [r5, #2]
					length =numberOfParams + shift + 4;
 80096aa:	4653      	mov	r3, sl
 80096ac:	1d1d      	adds	r5, r3, #4
 80096ae:	19ad      	adds	r5, r5, r6
 80096b0:	b2ed      	uxtb	r5, r5
		if(AddBcastPayload == true){
 80096b2:	4bab      	ldr	r3, [pc, #684]	; (8009960 <SendMessageFromPort.part.0+0x38c>)
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d03d      	beq.n	8009736 <SendMessageFromPort.part.0+0x162>
			if(dstGroupID < BOS_BROADCAST){
 80096ba:	4baa      	ldr	r3, [pc, #680]	; (8009964 <SendMessageFromPort.part.0+0x390>)
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	2bff      	cmp	r3, #255	; 0xff
 80096c0:	d100      	bne.n	80096c4 <SendMessageFromPort.part.0+0xf0>
 80096c2:	e106      	b.n	80098d2 <SendMessageFromPort.part.0+0x2fe>
				for(uint16_t i =1; i <= N; i++)						// N modules
 80096c4:	4aa8      	ldr	r2, [pc, #672]	; (8009968 <SendMessageFromPort.part.0+0x394>)
 80096c6:	7817      	ldrb	r7, [r2, #0]
 80096c8:	2f00      	cmp	r7, #0
 80096ca:	d100      	bne.n	80096ce <SendMessageFromPort.part.0+0xfa>
 80096cc:	e139      	b.n	8009942 <SendMessageFromPort.part.0+0x36e>
 80096ce:	2201      	movs	r2, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80096d0:	0021      	movs	r1, r4
 80096d2:	409a      	lsls	r2, r3
 80096d4:	4451      	add	r1, sl
 80096d6:	4694      	mov	ip, r2
 80096d8:	9105      	str	r1, [sp, #20]
 80096da:	0039      	movs	r1, r7
			uint8_t groupMembers =0;
 80096dc:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80096de:	4667      	mov	r7, ip
				for(uint16_t i =1; i <= N; i++)						// N modules
 80096e0:	2301      	movs	r3, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80096e2:	46ac      	mov	ip, r5
 80096e4:	000d      	movs	r5, r1
 80096e6:	48a1      	ldr	r0, [pc, #644]	; (800996c <SendMessageFromPort.part.0+0x398>)
					if(InGroup(i,dstGroupID)){
 80096e8:	8801      	ldrh	r1, [r0, #0]
 80096ea:	420f      	tst	r7, r1
 80096ec:	d009      	beq.n	8009702 <SendMessageFromPort.part.0+0x12e>
						++groupMembers;							// Add this member
 80096ee:	3201      	adds	r2, #1
 80096f0:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 80096f2:	1991      	adds	r1, r2, r6
 80096f4:	292c      	cmp	r1, #44	; 0x2c
 80096f6:	dd00      	ble.n	80096fa <SendMessageFromPort.part.0+0x126>
 80096f8:	e0fc      	b.n	80098f4 <SendMessageFromPort.part.0+0x320>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80096fa:	9905      	ldr	r1, [sp, #20]
 80096fc:	1889      	adds	r1, r1, r2
 80096fe:	1989      	adds	r1, r1, r6
 8009700:	718b      	strb	r3, [r1, #6]
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009702:	3301      	adds	r3, #1
 8009704:	b29b      	uxth	r3, r3
 8009706:	3002      	adds	r0, #2
 8009708:	42ab      	cmp	r3, r5
 800970a:	d9ed      	bls.n	80096e8 <SendMessageFromPort.part.0+0x114>
 800970c:	4665      	mov	r5, ip
 800970e:	0010      	movs	r0, r2
 8009710:	1991      	adds	r1, r2, r6
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8009712:	4653      	mov	r3, sl
 8009714:	3307      	adds	r3, #7
 8009716:	199e      	adds	r6, r3, r6
 8009718:	1836      	adds	r6, r6, r0
 800971a:	55a2      	strb	r2, [r4, r6]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 800971c:	292b      	cmp	r1, #43	; 0x2b
 800971e:	dd00      	ble.n	8009722 <SendMessageFromPort.part.0+0x14e>
 8009720:	e0e8      	b.n	80098f4 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8009722:	4993      	ldr	r1, [pc, #588]	; (8009970 <SendMessageFromPort.part.0+0x39c>)
 8009724:	3502      	adds	r5, #2
 8009726:	780b      	ldrb	r3, [r1, #0]
 8009728:	19a6      	adds	r6, r4, r6
 800972a:	3301      	adds	r3, #1
 800972c:	b2db      	uxtb	r3, r3
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 800972e:	18ad      	adds	r5, r5, r2
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8009730:	700b      	strb	r3, [r1, #0]
 8009732:	7073      	strb	r3, [r6, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8009734:	b2ed      	uxtb	r5, r5
 8009736:	4647      	mov	r7, r8
 8009738:	3702      	adds	r7, #2
 800973a:	b2ff      	uxtb	r7, r7
 800973c:	e012      	b.n	8009764 <SendMessageFromPort.part.0+0x190>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800973e:	465b      	mov	r3, fp
 8009740:	2b00      	cmp	r3, #0
 8009742:	d000      	beq.n	8009746 <SendMessageFromPort.part.0+0x172>
 8009744:	e0af      	b.n	80098a6 <SendMessageFromPort.part.0+0x2d2>
 8009746:	4647      	mov	r7, r8
 8009748:	3702      	adds	r7, #2
 800974a:	b2ff      	uxtb	r7, r7
		length =messageLength[numberOfParams - 1];
 800974c:	3e01      	subs	r6, #1
 800974e:	4b89      	ldr	r3, [pc, #548]	; (8009974 <SendMessageFromPort.part.0+0x3a0>)
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8009750:	00f1      	lsls	r1, r6, #3
		length =messageLength[numberOfParams - 1];
 8009752:	5d9d      	ldrb	r5, [r3, r6]
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8009754:	1b89      	subs	r1, r1, r6
 8009756:	4e88      	ldr	r6, [pc, #544]	; (8009978 <SendMessageFromPort.part.0+0x3a4>)
 8009758:	00c9      	lsls	r1, r1, #3
 800975a:	1989      	adds	r1, r1, r6
 800975c:	002a      	movs	r2, r5
 800975e:	4887      	ldr	r0, [pc, #540]	; (800997c <SendMessageFromPort.part.0+0x3a8>)
 8009760:	f009 facf 	bl	8012d02 <memcpy>
	memcpy(crcBuffer,&message[0],length + 3);
 8009764:	1ceb      	adds	r3, r5, #3
 8009766:	469a      	mov	sl, r3
 8009768:	4e85      	ldr	r6, [pc, #532]	; (8009980 <SendMessageFromPort.part.0+0x3ac>)
 800976a:	001a      	movs	r2, r3
 800976c:	0021      	movs	r1, r4
 800976e:	0030      	movs	r0, r6
	message[2] =length;
 8009770:	70a5      	strb	r5, [r4, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8009772:	f009 fac6 	bl	8012d02 <memcpy>
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 8009776:	b2ab      	uxth	r3, r5
 8009778:	4651      	mov	r1, sl
 800977a:	0030      	movs	r0, r6
 800977c:	9305      	str	r3, [sp, #20]
 800977e:	f003 f843 	bl	800c808 <CalculateCRC8>
 8009782:	4653      	mov	r3, sl
	memset(crcBuffer,0,sizeof(crcBuffer));
 8009784:	2238      	movs	r2, #56	; 0x38
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 8009786:	54e0      	strb	r0, [r4, r3]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8009788:	2100      	movs	r1, #0
 800978a:	0030      	movs	r0, r6
 800978c:	f009 fac2 	bl	8012d14 <memset>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8009790:	465b      	mov	r3, fp
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8009792:	2f01      	cmp	r7, #1
 8009794:	d94a      	bls.n	800982c <SendMessageFromPort.part.0+0x258>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8009796:	3b2c      	subs	r3, #44	; 0x2c
 8009798:	2b01      	cmp	r3, #1
 800979a:	d800      	bhi.n	800979e <SendMessageFromPort.part.0+0x1ca>
 800979c:	e08d      	b.n	80098ba <SendMessageFromPort.part.0+0x2e6>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 800979e:	4b6d      	ldr	r3, [pc, #436]	; (8009954 <SendMessageFromPort.part.0+0x380>)
 80097a0:	4698      	mov	r8, r3
 80097a2:	88db      	ldrh	r3, [r3, #6]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d100      	bne.n	80097aa <SendMessageFromPort.part.0+0x1d6>
 80097a8:	e08f      	b.n	80098ca <SendMessageFromPort.part.0+0x2f6>
 80097aa:	9e05      	ldr	r6, [sp, #20]
 80097ac:	4f75      	ldr	r7, [pc, #468]	; (8009984 <SendMessageFromPort.part.0+0x3b0>)
 80097ae:	4b76      	ldr	r3, [pc, #472]	; (8009988 <SendMessageFromPort.part.0+0x3b4>)
 80097b0:	3604      	adds	r6, #4
 80097b2:	46ba      	mov	sl, r7
 80097b4:	b2b6      	uxth	r6, r6
 80097b6:	2500      	movs	r5, #0
 80097b8:	4699      	mov	r9, r3
 80097ba:	9f03      	ldr	r7, [sp, #12]
 80097bc:	e005      	b.n	80097ca <SendMessageFromPort.part.0+0x1f6>
 80097be:	4643      	mov	r3, r8
 80097c0:	3501      	adds	r5, #1
 80097c2:	88db      	ldrh	r3, [r3, #6]
 80097c4:	b2ed      	uxtb	r5, r5
 80097c6:	42ab      	cmp	r3, r5
 80097c8:	d91c      	bls.n	8009804 <SendMessageFromPort.part.0+0x230>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 80097ca:	2332      	movs	r3, #50	; 0x32
 80097cc:	0032      	movs	r2, r6
 80097ce:	0021      	movs	r1, r4
 80097d0:	0038      	movs	r0, r7
 80097d2:	f003 fe1f 	bl	800d414 <writePxDMAMutex>
				osDelay(200);
 80097d6:	20c8      	movs	r0, #200	; 0xc8
 80097d8:	f003 ff16 	bl	800d608 <osDelay>
				if(ACK_FLAG == true)
 80097dc:	464b      	mov	r3, r9
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10f      	bne.n	8009804 <SendMessageFromPort.part.0+0x230>
				if(rejected_FLAG == true)
 80097e4:	4653      	mov	r3, sl
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d0e8      	beq.n	80097be <SendMessageFromPort.part.0+0x1ea>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 80097ec:	2332      	movs	r3, #50	; 0x32
 80097ee:	0032      	movs	r2, r6
 80097f0:	0021      	movs	r1, r4
 80097f2:	0038      	movs	r0, r7
 80097f4:	f003 fe0e 	bl	800d414 <writePxDMAMutex>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 80097f8:	4643      	mov	r3, r8
 80097fa:	3501      	adds	r5, #1
 80097fc:	88db      	ldrh	r3, [r3, #6]
 80097fe:	b2ed      	uxtb	r5, r5
 8009800:	42ab      	cmp	r3, r5
 8009802:	d8e2      	bhi.n	80097ca <SendMessageFromPort.part.0+0x1f6>
 8009804:	4657      	mov	r7, sl
		ACK_FLAG =false; rejected_FLAG=false;
 8009806:	2300      	movs	r3, #0
 8009808:	464a      	mov	r2, r9
 800980a:	703b      	strb	r3, [r7, #0]
 800980c:	7013      	strb	r3, [r2, #0]
	vTaskPrioritySet( NULL,TaskPriority);
 800980e:	2000      	movs	r0, #0
 8009810:	9904      	ldr	r1, [sp, #16]
 8009812:	f004 fe25 	bl	800e460 <vTaskPrioritySet>
	responseStatus =BOS_ERR_NoResponse;
 8009816:	2202      	movs	r2, #2
	return result;
 8009818:	2000      	movs	r0, #0
	responseStatus =BOS_ERR_NoResponse;
 800981a:	4b5c      	ldr	r3, [pc, #368]	; (800998c <SendMessageFromPort.part.0+0x3b8>)
 800981c:	701a      	strb	r2, [r3, #0]
}
 800981e:	b007      	add	sp, #28
 8009820:	bc3c      	pop	{r2, r3, r4, r5}
 8009822:	4690      	mov	r8, r2
 8009824:	4699      	mov	r9, r3
 8009826:	46a2      	mov	sl, r4
 8009828:	46ab      	mov	fp, r5
 800982a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 800982c:	2b00      	cmp	r3, #0
 800982e:	d03e      	beq.n	80098ae <SendMessageFromPort.part.0+0x2da>
		FindBroadcastRoutes(src);
 8009830:	4648      	mov	r0, r9
 8009832:	f7f9 fffd 	bl	8003830 <FindBroadcastRoutes>
 8009836:	2300      	movs	r3, #0
 8009838:	4698      	mov	r8, r3
 800983a:	4b45      	ldr	r3, [pc, #276]	; (8009950 <SendMessageFromPort.part.0+0x37c>)
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 800983c:	9e05      	ldr	r6, [sp, #20]
 800983e:	4699      	mov	r9, r3
 8009840:	4b53      	ldr	r3, [pc, #332]	; (8009990 <SendMessageFromPort.part.0+0x3bc>)
 8009842:	3604      	adds	r6, #4
 8009844:	469b      	mov	fp, r3
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009846:	2301      	movs	r3, #1
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009848:	b2b6      	uxth	r6, r6
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 800984a:	469a      	mov	sl, r3
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 800984c:	0033      	movs	r3, r6
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800984e:	2501      	movs	r5, #1
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009850:	4646      	mov	r6, r8
 8009852:	4f4c      	ldr	r7, [pc, #304]	; (8009984 <SendMessageFromPort.part.0+0x3b0>)
 8009854:	4698      	mov	r8, r3
 8009856:	e009      	b.n	800986c <SendMessageFromPort.part.0+0x298>
			rejected_FLAG=false;
 8009858:	2300      	movs	r3, #0
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800985a:	3501      	adds	r5, #1
			Delay_us(10);
 800985c:	200a      	movs	r0, #10
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800985e:	b2ed      	uxtb	r5, r5
			rejected_FLAG=false;
 8009860:	703b      	strb	r3, [r7, #0]
 8009862:	3601      	adds	r6, #1
			Delay_us(10);
 8009864:	f003 fbc0 	bl	800cfe8 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009868:	2d07      	cmp	r5, #7
 800986a:	d0d0      	beq.n	800980e <SendMessageFromPort.part.0+0x23a>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 800986c:	464b      	mov	r3, r9
 800986e:	465a      	mov	r2, fp
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	3b01      	subs	r3, #1
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	5ad3      	ldrh	r3, [r2, r3]
 8009878:	4652      	mov	r2, sl
 800987a:	4133      	asrs	r3, r6
 800987c:	421a      	tst	r2, r3
 800987e:	d0eb      	beq.n	8009858 <SendMessageFromPort.part.0+0x284>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009880:	2332      	movs	r3, #50	; 0x32
 8009882:	4642      	mov	r2, r8
 8009884:	0021      	movs	r1, r4
 8009886:	0028      	movs	r0, r5
 8009888:	f003 fdc4 	bl	800d414 <writePxDMAMutex>
				osDelay(200);
 800988c:	20c8      	movs	r0, #200	; 0xc8
 800988e:	f003 febb 	bl	800d608 <osDelay>
				if(rejected_FLAG == true)
 8009892:	783b      	ldrb	r3, [r7, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d0df      	beq.n	8009858 <SendMessageFromPort.part.0+0x284>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009898:	2332      	movs	r3, #50	; 0x32
 800989a:	4642      	mov	r2, r8
 800989c:	0021      	movs	r1, r4
 800989e:	9803      	ldr	r0, [sp, #12]
 80098a0:	f003 fdb8 	bl	800d414 <writePxDMAMutex>
 80098a4:	e7d8      	b.n	8009858 <SendMessageFromPort.part.0+0x284>
		if(src == 0)
 80098a6:	2a00      	cmp	r2, #0
 80098a8:	d000      	beq.n	80098ac <SendMessageFromPort.part.0+0x2d8>
 80098aa:	e6c0      	b.n	800962e <SendMessageFromPort.part.0+0x5a>
 80098ac:	e6bc      	b.n	8009628 <SendMessageFromPort.part.0+0x54>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 80098ae:	464b      	mov	r3, r9
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1bd      	bne.n	8009830 <SendMessageFromPort.part.0+0x25c>
			src =message[4];
 80098b4:	7923      	ldrb	r3, [r4, #4]
 80098b6:	4699      	mov	r9, r3
 80098b8:	e7ba      	b.n	8009830 <SendMessageFromPort.part.0+0x25c>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
 80098ba:	9a05      	ldr	r2, [sp, #20]
 80098bc:	2332      	movs	r3, #50	; 0x32
 80098be:	3204      	adds	r2, #4
 80098c0:	b292      	uxth	r2, r2
 80098c2:	0021      	movs	r1, r4
 80098c4:	9803      	ldr	r0, [sp, #12]
 80098c6:	f003 fda5 	bl	800d414 <writePxDMAMutex>
 80098ca:	4b2f      	ldr	r3, [pc, #188]	; (8009988 <SendMessageFromPort.part.0+0x3b4>)
 80098cc:	4f2d      	ldr	r7, [pc, #180]	; (8009984 <SendMessageFromPort.part.0+0x3b0>)
 80098ce:	4699      	mov	r9, r3
 80098d0:	e799      	b.n	8009806 <SendMessageFromPort.part.0+0x232>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 80098d2:	2e2c      	cmp	r6, #44	; 0x2c
 80098d4:	d80e      	bhi.n	80098f4 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams] =++bcastID;
 80098d6:	4a26      	ldr	r2, [pc, #152]	; (8009970 <SendMessageFromPort.part.0+0x39c>)
 80098d8:	4647      	mov	r7, r8
 80098da:	7813      	ldrb	r3, [r2, #0]
				length +=1;		// + bcastID
 80098dc:	3501      	adds	r5, #1
				message[7 + shift + numberOfParams] =++bcastID;
 80098de:	3301      	adds	r3, #1
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	7013      	strb	r3, [r2, #0]
 80098e4:	4652      	mov	r2, sl
 80098e6:	18a2      	adds	r2, r4, r2
 80098e8:	1996      	adds	r6, r2, r6
 80098ea:	3702      	adds	r7, #2
 80098ec:	71f3      	strb	r3, [r6, #7]
				length +=1;		// + bcastID
 80098ee:	b2ed      	uxtb	r5, r5
 80098f0:	b2ff      	uxtb	r7, r7
 80098f2:	e737      	b.n	8009764 <SendMessageFromPort.part.0+0x190>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 80098f4:	2069      	movs	r0, #105	; 0x69
 80098f6:	e792      	b.n	800981e <SendMessageFromPort.part.0+0x24a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 80098f8:	465b      	mov	r3, fp
 80098fa:	4642      	mov	r2, r8
 80098fc:	4649      	mov	r1, r9
 80098fe:	9700      	str	r7, [sp, #0]
 8009900:	9803      	ldr	r0, [sp, #12]
 8009902:	f7ff fe4b 	bl	800959c <SendMessageFromPort>
					osDelay(10);
 8009906:	200a      	movs	r0, #10
 8009908:	f003 fe7e 	bl	800d608 <osDelay>
					totalNumberOfParams -=numberOfParams;
 800990c:	886e      	ldrh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 800990e:	882b      	ldrh	r3, [r5, #0]
					totalNumberOfParams -=numberOfParams;
 8009910:	3e2e      	subs	r6, #46	; 0x2e
 8009912:	b2b6      	uxth	r6, r6
					ptrShift +=numberOfParams;
 8009914:	332e      	adds	r3, #46	; 0x2e
					totalNumberOfParams -=numberOfParams;
 8009916:	806e      	strh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 8009918:	802b      	strh	r3, [r5, #0]
			while(totalNumberOfParams != 0){
 800991a:	2e00      	cmp	r6, #0
 800991c:	d000      	beq.n	8009920 <SendMessageFromPort.part.0+0x34c>
 800991e:	e6b1      	b.n	8009684 <SendMessageFromPort.part.0+0xb0>
 8009920:	2500      	movs	r5, #0
 8009922:	362e      	adds	r6, #46	; 0x2e
 8009924:	e6c5      	b.n	80096b2 <SendMessageFromPort.part.0+0xde>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009926:	4653      	mov	r3, sl
 8009928:	1dd8      	adds	r0, r3, #7
 800992a:	4b0b      	ldr	r3, [pc, #44]	; (8009958 <SendMessageFromPort.part.0+0x384>)
			length =numberOfParams + shift + 4;
 800992c:	1d35      	adds	r5, r6, #4
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800992e:	8819      	ldrh	r1, [r3, #0]
 8009930:	4b0a      	ldr	r3, [pc, #40]	; (800995c <SendMessageFromPort.part.0+0x388>)
 8009932:	1820      	adds	r0, r4, r0
 8009934:	18c9      	adds	r1, r1, r3
 8009936:	0032      	movs	r2, r6
			length =numberOfParams + shift + 4;
 8009938:	4455      	add	r5, sl
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800993a:	f009 f9e2 	bl	8012d02 <memcpy>
			length =numberOfParams + shift + 4;
 800993e:	b2ed      	uxtb	r5, r5
 8009940:	e6b7      	b.n	80096b2 <SendMessageFromPort.part.0+0xde>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009942:	0031      	movs	r1, r6
 8009944:	2000      	movs	r0, #0
			uint8_t groupMembers =0;
 8009946:	2200      	movs	r2, #0
 8009948:	e6e3      	b.n	8009712 <SendMessageFromPort.part.0+0x13e>
 800994a:	46c0      	nop			; (mov r8, r8)
 800994c:	20000c58 	.word	0x20000c58
 8009950:	20000a98 	.word	0x20000a98
 8009954:	20006e28 	.word	0x20006e28
 8009958:	200019d0 	.word	0x200019d0
 800995c:	20000b3c 	.word	0x20000b3c
 8009960:	20001148 	.word	0x20001148
 8009964:	20000050 	.word	0x20000050
 8009968:	20000008 	.word	0x20000008
 800996c:	20000a9c 	.word	0x20000a9c
 8009970:	20000c48 	.word	0x20000c48
 8009974:	20000c50 	.word	0x20000c50
 8009978:	20000c90 	.word	0x20000c90
 800997c:	20000c5b 	.word	0x20000c5b
 8009980:	20001354 	.word	0x20001354
 8009984:	2000117c 	.word	0x2000117c
 8009988:	2000117d 	.word	0x2000117d
 800998c:	20000c3c 	.word	0x20000c3c
 8009990:	20000b6c 	.word	0x20000b6c

08009994 <BroadcastReceivedMessage>:
	AddBcastPayload = false;
 8009994:	2200      	movs	r2, #0
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009996:	b500      	push	{lr}
	AddBcastPayload = false;
 8009998:	4b0b      	ldr	r3, [pc, #44]	; (80099c8 <BroadcastReceivedMessage+0x34>)
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 800999a:	b083      	sub	sp, #12
	AddBcastPayload = false;
 800999c:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 800999e:	4b0b      	ldr	r3, [pc, #44]	; (80099cc <BroadcastReceivedMessage+0x38>)
 80099a0:	b289      	uxth	r1, r1
 80099a2:	7018      	strb	r0, [r3, #0]
 80099a4:	9100      	str	r1, [sp, #0]
 80099a6:	2300      	movs	r3, #0
	if(dstGroup == BOS_BROADCAST)
 80099a8:	28ff      	cmp	r0, #255	; 0xff
 80099aa:	d007      	beq.n	80099bc <BroadcastReceivedMessage+0x28>
 80099ac:	22fe      	movs	r2, #254	; 0xfe
 80099ae:	2100      	movs	r1, #0
 80099b0:	2000      	movs	r0, #0
 80099b2:	f7ff fe0f 	bl	80095d4 <SendMessageFromPort.part.0>
}
 80099b6:	2000      	movs	r0, #0
 80099b8:	b003      	add	sp, #12
 80099ba:	bd00      	pop	{pc}
 80099bc:	32ff      	adds	r2, #255	; 0xff
 80099be:	2100      	movs	r1, #0
 80099c0:	2000      	movs	r0, #0
 80099c2:	f7ff fe07 	bl	80095d4 <SendMessageFromPort.part.0>
 80099c6:	e7f6      	b.n	80099b6 <BroadcastReceivedMessage+0x22>
 80099c8:	20001148 	.word	0x20001148
 80099cc:	20000050 	.word	0x20000050

080099d0 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80099d0:	b530      	push	{r4, r5, lr}
	AddBcastPayload = true;
 80099d2:	2501      	movs	r5, #1
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80099d4:	001c      	movs	r4, r3
	AddBcastPayload = true;
 80099d6:	4b0e      	ldr	r3, [pc, #56]	; (8009a10 <BroadcastMessage+0x40>)
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80099d8:	b083      	sub	sp, #12
	AddBcastPayload = true;
 80099da:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 80099dc:	4b0d      	ldr	r3, [pc, #52]	; (8009a14 <BroadcastMessage+0x44>)
 80099de:	7019      	strb	r1, [r3, #0]
 80099e0:	9400      	str	r4, [sp, #0]
 80099e2:	0013      	movs	r3, r2
	if(dstGroup == BOS_BROADCAST)
 80099e4:	29ff      	cmp	r1, #255	; 0xff
 80099e6:	d00c      	beq.n	8009a02 <BroadcastMessage+0x32>
 80099e8:	0001      	movs	r1, r0
 80099ea:	22fe      	movs	r2, #254	; 0xfe
 80099ec:	2000      	movs	r0, #0
 80099ee:	f7ff fdf1 	bl	80095d4 <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 80099f2:	0022      	movs	r2, r4
 80099f4:	2100      	movs	r1, #0
 80099f6:	4808      	ldr	r0, [pc, #32]	; (8009a18 <BroadcastMessage+0x48>)
 80099f8:	f009 f98c 	bl	8012d14 <memset>
}
 80099fc:	2000      	movs	r0, #0
 80099fe:	b003      	add	sp, #12
 8009a00:	bd30      	pop	{r4, r5, pc}
 8009a02:	0001      	movs	r1, r0
 8009a04:	22ff      	movs	r2, #255	; 0xff
 8009a06:	2000      	movs	r0, #0
 8009a08:	f7ff fde4 	bl	80095d4 <SendMessageFromPort.part.0>
 8009a0c:	e7f1      	b.n	80099f2 <BroadcastMessage+0x22>
 8009a0e:	46c0      	nop			; (mov r8, r8)
 8009a10:	20001148 	.word	0x20001148
 8009a14:	20000050 	.word	0x20000050
 8009a18:	20000b3c 	.word	0x20000b3c

08009a1c <ForwardReceivedMessage>:
	AddBcastPayload = false;
 8009a1c:	2200      	movs	r2, #0
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8009a1e:	b530      	push	{r4, r5, lr}
 8009a20:	0005      	movs	r5, r0
	AddBcastPayload = false;
 8009a22:	4b0b      	ldr	r3, [pc, #44]	; (8009a50 <ForwardReceivedMessage+0x34>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8009a24:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009a26:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8009a28:	1e42      	subs	r2, r0, #1
 8009a2a:	00d3      	lsls	r3, r2, #3
 8009a2c:	1a9b      	subs	r3, r3, r2
 8009a2e:	4a09      	ldr	r2, [pc, #36]	; (8009a54 <ForwardReceivedMessage+0x38>)
 8009a30:	00db      	lsls	r3, r3, #3
 8009a32:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 8009a34:	4b08      	ldr	r3, [pc, #32]	; (8009a58 <ForwardReceivedMessage+0x3c>)
 8009a36:	0021      	movs	r1, r4
 8009a38:	7818      	ldrb	r0, [r3, #0]
 8009a3a:	f7f9 ffa1 	bl	8003980 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8009a3e:	9500      	str	r5, [sp, #0]
 8009a40:	2300      	movs	r3, #0
 8009a42:	0022      	movs	r2, r4
 8009a44:	2100      	movs	r1, #0
 8009a46:	f7ff fda9 	bl	800959c <SendMessageFromPort>
}
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	b003      	add	sp, #12
 8009a4e:	bd30      	pop	{r4, r5, pc}
 8009a50:	20001148 	.word	0x20001148
 8009a54:	20000c90 	.word	0x20000c90
 8009a58:	20000a98 	.word	0x20000a98

08009a5c <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a5e:	4d0f      	ldr	r5, [pc, #60]	; (8009a9c <SendMessageToModule+0x40>)
 8009a60:	0004      	movs	r4, r0
 8009a62:	b083      	sub	sp, #12
 8009a64:	000f      	movs	r7, r1
 8009a66:	0016      	movs	r6, r2
 8009a68:	7828      	ldrb	r0, [r5, #0]
	if(dst != BOS_BROADCAST){
 8009a6a:	2cff      	cmp	r4, #255	; 0xff
 8009a6c:	d010      	beq.n	8009a90 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 8009a6e:	0021      	movs	r1, r4
 8009a70:	f7f9 ff86 	bl	8003980 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8009a74:	7829      	ldrb	r1, [r5, #0]
 8009a76:	0022      	movs	r2, r4
 8009a78:	9600      	str	r6, [sp, #0]
 8009a7a:	003b      	movs	r3, r7
 8009a7c:	f7ff fd8e 	bl	800959c <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8009a80:	0032      	movs	r2, r6
 8009a82:	2100      	movs	r1, #0
 8009a84:	4806      	ldr	r0, [pc, #24]	; (8009aa0 <SendMessageToModule+0x44>)
 8009a86:	f009 f945 	bl	8012d14 <memset>
}
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	b003      	add	sp, #12
 8009a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8009a90:	0013      	movs	r3, r2
 8009a92:	000a      	movs	r2, r1
 8009a94:	21ff      	movs	r1, #255	; 0xff
 8009a96:	f7ff ff9b 	bl	80099d0 <BroadcastMessage>
 8009a9a:	e7f6      	b.n	8009a8a <SendMessageToModule+0x2e>
 8009a9c:	20000a98 	.word	0x20000a98
 8009aa0:	20000b3c 	.word	0x20000b3c

08009aa4 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aa6:	4657      	mov	r7, sl
 8009aa8:	46de      	mov	lr, fp
 8009aaa:	464e      	mov	r6, r9
 8009aac:	4645      	mov	r5, r8
 8009aae:	b5e0      	push	{r5, r6, r7, lr}
 8009ab0:	b08f      	sub	sp, #60	; 0x3c
 8009ab2:	001e      	movs	r6, r3
 8009ab4:	ab18      	add	r3, sp, #96	; 0x60
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	4693      	mov	fp, r2
 8009aba:	469a      	mov	sl, r3
 8009abc:	ab1b      	add	r3, sp, #108	; 0x6c
 8009abe:	781a      	ldrb	r2, [r3, #0]
 8009ac0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ac2:	000f      	movs	r7, r1
 8009ac4:	0e19      	lsrs	r1, r3, #24
 8009ac6:	0c1b      	lsrs	r3, r3, #16
 8009ac8:	b2dc      	uxtb	r4, r3
 8009aca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009acc:	4684      	mov	ip, r0
 8009ace:	0a1b      	lsrs	r3, r3, #8
 8009ad0:	b2dd      	uxtb	r5, r3
 8009ad2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009ad4:	900d      	str	r0, [sp, #52]	; 0x34
 8009ad6:	0e1b      	lsrs	r3, r3, #24
 8009ad8:	0018      	movs	r0, r3
 8009ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8009adc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009ade:	9206      	str	r2, [sp, #24]
 8009ae0:	0c1b      	lsrs	r3, r3, #16
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	9307      	str	r3, [sp, #28]
 8009ae6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009ae8:	9109      	str	r1, [sp, #36]	; 0x24
 8009aea:	0a1b      	lsrs	r3, r3, #8
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8009af0:	4b47      	ldr	r3, [pc, #284]	; (8009c10 <StartScastDMAStream+0x16c>)
 8009af2:	940a      	str	r4, [sp, #40]	; 0x28
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	950c      	str	r5, [sp, #48]	; 0x30
 8009af8:	42bb      	cmp	r3, r7
 8009afa:	d16d      	bne.n	8009bd8 <StartScastDMAStream+0x134>
 8009afc:	231a      	movs	r3, #26
 8009afe:	4698      	mov	r8, r3
 8009b00:	4d44      	ldr	r5, [pc, #272]	; (8009c14 <StartScastDMAStream+0x170>)
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009b02:	4c45      	ldr	r4, [pc, #276]	; (8009c18 <StartScastDMAStream+0x174>)
 8009b04:	44a8      	add	r8, r5
		FindRoute(srcM,dstM);
 8009b06:	0031      	movs	r1, r6
 8009b08:	0038      	movs	r0, r7
 8009b0a:	f7f9 ff39 	bl	8003980 <FindRoute>
		if(route[i]){
 8009b0e:	7868      	ldrb	r0, [r5, #1]
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d035      	beq.n	8009b80 <StartScastDMAStream+0xdc>
			if(route[i + 1]){
 8009b14:	78a9      	ldrb	r1, [r5, #2]
 8009b16:	2900      	cmp	r1, #0
 8009b18:	d100      	bne.n	8009b1c <StartScastDMAStream+0x78>
				temp1 =FindRoute(route[i],srcM);
 8009b1a:	0039      	movs	r1, r7
 8009b1c:	f7f9 ff30 	bl	8003980 <FindRoute>
			FindRoute(srcM,dstM);
 8009b20:	0031      	movs	r1, r6
				temp1 =FindRoute(route[i],srcM);
 8009b22:	4681      	mov	r9, r0
			FindRoute(srcM,dstM);
 8009b24:	0038      	movs	r0, r7
 8009b26:	f7f9 ff2b 	bl	8003980 <FindRoute>
			if(route[i] == dstM){
 8009b2a:	7868      	ldrb	r0, [r5, #1]
				temp2 =dstP;
 8009b2c:	465b      	mov	r3, fp
			if(route[i] == dstM){
 8009b2e:	42b0      	cmp	r0, r6
 8009b30:	d003      	beq.n	8009b3a <StartScastDMAStream+0x96>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009b32:	7829      	ldrb	r1, [r5, #0]
 8009b34:	f7f9 ff24 	bl	8003980 <FindRoute>
 8009b38:	0003      	movs	r3, r0
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009b3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
			messageParams[5] =(uint8_t )(timeout >> 16);
			messageParams[6] =(uint8_t )(timeout >> 8);
			messageParams[7] =(uint8_t )timeout;
			messageParams[8] =direction; /* Stream direction */
			messageParams[9] =temp1; /* Source port */
			messageParams[10] =temp2; /* destination port */
 8009b3c:	72a3      	strb	r3, [r4, #10]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009b3e:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8009b40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			messageParams[11] =stored; /* EEPROM storage */
 8009b42:	9b06      	ldr	r3, [sp, #24]
			messageParams[1] =(uint8_t )(count >> 16);
 8009b44:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8009b46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			FindRoute(srcM,dstM);
 8009b48:	0031      	movs	r1, r6
			messageParams[2] =(uint8_t )(count >> 8);
 8009b4a:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8009b4c:	9a19      	ldr	r2, [sp, #100]	; 0x64
			FindRoute(srcM,dstM);
 8009b4e:	0038      	movs	r0, r7
			messageParams[3] =(uint8_t )count;
 8009b50:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009b52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			messageParams[11] =stored; /* EEPROM storage */
 8009b54:	72e3      	strb	r3, [r4, #11]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009b56:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009b58:	9a07      	ldr	r2, [sp, #28]
 8009b5a:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009b5c:	9a08      	ldr	r2, [sp, #32]
 8009b5e:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8009b60:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b62:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8009b64:	4652      	mov	r2, sl
 8009b66:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8009b68:	464a      	mov	r2, r9
 8009b6a:	7262      	strb	r2, [r4, #9]
			FindRoute(srcM,dstM);
 8009b6c:	f7f9 ff08 	bl	8003980 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8009b70:	7868      	ldrb	r0, [r5, #1]
 8009b72:	220c      	movs	r2, #12
 8009b74:	211b      	movs	r1, #27
 8009b76:	f7ff ff71 	bl	8009a5c <SendMessageToModule>
			osDelay(10);
 8009b7a:	200a      	movs	r0, #10
 8009b7c:	f003 fd44 	bl	800d608 <osDelay>
 8009b80:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8009b82:	4545      	cmp	r5, r8
 8009b84:	d1bf      	bne.n	8009b06 <StartScastDMAStream+0x62>
		}
	}
	
	if(srcM == dstM)
 8009b86:	42b7      	cmp	r7, r6
 8009b88:	d112      	bne.n	8009bb0 <StartScastDMAStream+0x10c>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8009b8a:	465b      	mov	r3, fp
 8009b8c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b94:	4650      	mov	r0, sl
 8009b96:	f7ff fc0d 	bl	80093b4 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 8009b9a:	9b06      	ldr	r3, [sp, #24]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10d      	bne.n	8009bbc <StartScastDMAStream+0x118>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	b00f      	add	sp, #60	; 0x3c
 8009ba4:	bc3c      	pop	{r2, r3, r4, r5}
 8009ba6:	4690      	mov	r8, r2
 8009ba8:	4699      	mov	r9, r3
 8009baa:	46a2      	mov	sl, r4
 8009bac:	46ab      	mov	fp, r5
 8009bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 8009bb0:	0031      	movs	r1, r6
 8009bb2:	0038      	movs	r0, r7
 8009bb4:	f7f9 fee4 	bl	8003980 <FindRoute>
 8009bb8:	4683      	mov	fp, r0
 8009bba:	e7e6      	b.n	8009b8a <StartScastDMAStream+0xe6>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	9304      	str	r3, [sp, #16]
 8009bc0:	9303      	str	r3, [sp, #12]
 8009bc2:	9302      	str	r3, [sp, #8]
 8009bc4:	9301      	str	r3, [sp, #4]
 8009bc6:	465b      	mov	r3, fp
 8009bc8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bd0:	4650      	mov	r0, sl
 8009bd2:	f7f9 fc85 	bl	80034e0 <SaveEEstreams>
 8009bd6:	e7e3      	b.n	8009ba0 <StartScastDMAStream+0xfc>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009bd8:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <StartScastDMAStream+0x174>)
 8009bda:	7019      	strb	r1, [r3, #0]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009bdc:	9907      	ldr	r1, [sp, #28]
		messageParams[1] =(uint8_t )(count >> 16);
 8009bde:	705c      	strb	r4, [r3, #1]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009be0:	7159      	strb	r1, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009be2:	9908      	ldr	r1, [sp, #32]
		messageParams[3] =(uint8_t )count;
 8009be4:	9c19      	ldr	r4, [sp, #100]	; 0x64
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009be6:	7199      	strb	r1, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8009be8:	991a      	ldr	r1, [sp, #104]	; 0x68
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009bea:	7118      	strb	r0, [r3, #4]
		messageParams[7] =(uint8_t )timeout;
 8009bec:	71d9      	strb	r1, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8009bee:	4651      	mov	r1, sl
 8009bf0:	7219      	strb	r1, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8009bf2:	4661      	mov	r1, ip
 8009bf4:	7259      	strb	r1, [r3, #9]
		messageParams[11] =dstP; /* destination port */
 8009bf6:	4659      	mov	r1, fp
		messageParams[12] =stored; /* EEPROM storage */
 8009bf8:	731a      	strb	r2, [r3, #12]
		messageParams[11] =dstP; /* destination port */
 8009bfa:	72d9      	strb	r1, [r3, #11]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009bfc:	220d      	movs	r2, #13
 8009bfe:	211c      	movs	r1, #28
 8009c00:	0038      	movs	r0, r7
		messageParams[2] =(uint8_t )(count >> 8);
 8009c02:	709d      	strb	r5, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8009c04:	70dc      	strb	r4, [r3, #3]
		messageParams[10] =dstM; /* destination module */
 8009c06:	729e      	strb	r6, [r3, #10]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009c08:	f7ff ff28 	bl	8009a5c <SendMessageToModule>
		return result;
 8009c0c:	e7c8      	b.n	8009ba0 <StartScastDMAStream+0xfc>
 8009c0e:	46c0      	nop			; (mov r8, r8)
 8009c10:	20000a98 	.word	0x20000a98
 8009c14:	20006fbb 	.word	0x20006fbb
 8009c18:	20000b3c 	.word	0x20000b3c

08009c1c <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8009c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c1e:	4657      	mov	r7, sl
 8009c20:	4645      	mov	r5, r8
 8009c22:	46de      	mov	lr, fp
 8009c24:	464e      	mov	r6, r9
 8009c26:	4bd7      	ldr	r3, [pc, #860]	; (8009f84 <BackEndTask+0x368>)
 8009c28:	b5e0      	push	{r5, r6, r7, lr}
 8009c2a:	4698      	mov	r8, r3
 8009c2c:	4bd6      	ldr	r3, [pc, #856]	; (8009f88 <BackEndTask+0x36c>)
 8009c2e:	4fd7      	ldr	r7, [pc, #860]	; (8009f8c <BackEndTask+0x370>)
 8009c30:	469a      	mov	sl, r3
 8009c32:	2301      	movs	r3, #1
 8009c34:	b089      	sub	sp, #36	; 0x24
 8009c36:	1bdb      	subs	r3, r3, r7
 8009c38:	9307      	str	r3, [sp, #28]
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	2601      	movs	r6, #1
 8009c3e:	001c      	movs	r4, r3
 8009c40:	e01b      	b.n	8009c7a <BackEndTask+0x5e>
 8009c42:	4bd3      	ldr	r3, [pc, #844]	; (8009f90 <BackEndTask+0x374>)
 8009c44:	469c      	mov	ip, r3
 8009c46:	4465      	add	r5, ip
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
				++rejectedMsg;
			}

			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
 8009c48:	782b      	ldrb	r3, [r5, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00e      	beq.n	8009c6c <BackEndTask+0x50>
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
 8009c4e:	4643      	mov	r3, r8
				MsgDMAStopped[port - 1] = false;
 8009c50:	2200      	movs	r2, #0
				if(portStatus[port] == OVERRUN)
 8009c52:	199b      	adds	r3, r3, r6
 8009c54:	7819      	ldrb	r1, [r3, #0]
				MsgDMAStopped[port - 1] = false;
 8009c56:	702a      	strb	r2, [r5, #0]
				if(portStatus[port] == OVERRUN)
 8009c58:	2905      	cmp	r1, #5
 8009c5a:	d100      	bne.n	8009c5e <BackEndTask+0x42>
					portStatus[port] =FREE;
 8009c5c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 8009c5e:	4658      	mov	r0, fp
 8009c60:	f003 fc0e 	bl	800d480 <GetUart>
 8009c64:	1939      	adds	r1, r7, r4
 8009c66:	22c0      	movs	r2, #192	; 0xc0
 8009c68:	f008 f956 	bl	8011f18 <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 8009c6c:	2390      	movs	r3, #144	; 0x90
 8009c6e:	34c0      	adds	r4, #192	; 0xc0
 8009c70:	3601      	adds	r6, #1
 8009c72:	00db      	lsls	r3, r3, #3
 8009c74:	429c      	cmp	r4, r3
 8009c76:	d100      	bne.n	8009c7a <BackEndTask+0x5e>
 8009c78:	e0a5      	b.n	8009dc6 <BackEndTask+0x1aa>
 8009c7a:	b2f3      	uxtb	r3, r6
 8009c7c:	469b      	mov	fp, r3
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 8009c7e:	4643      	mov	r3, r8
 8009c80:	5d9b      	ldrb	r3, [r3, r6]
 8009c82:	1e75      	subs	r5, r6, #1
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d8dc      	bhi.n	8009c42 <BackEndTask+0x26>
 8009c88:	4bc2      	ldr	r3, [pc, #776]	; (8009f94 <BackEndTask+0x378>)
 8009c8a:	469c      	mov	ip, r3
 8009c8c:	44ac      	add	ip, r5
 8009c8e:	4663      	mov	r3, ip
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009c90:	781a      	ldrb	r2, [r3, #0]
 8009c92:	9303      	str	r3, [sp, #12]
 8009c94:	2abf      	cmp	r2, #191	; 0xbf
 8009c96:	dc2b      	bgt.n	8009cf0 <BackEndTask+0xd4>
							if(BOS.disableCLI == false){
 8009c98:	4bbf      	ldr	r3, [pc, #764]	; (8009f98 <BackEndTask+0x37c>)
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	7e9b      	ldrb	r3, [r3, #26]
 8009c9e:	9102      	str	r1, [sp, #8]
 8009ca0:	9304      	str	r3, [sp, #16]
 8009ca2:	1913      	adds	r3, r2, r4
 8009ca4:	4699      	mov	r9, r3
 8009ca6:	0073      	lsls	r3, r6, #1
 8009ca8:	3201      	adds	r2, #1
 8009caa:	199b      	adds	r3, r3, r6
 8009cac:	019b      	lsls	r3, r3, #6
 8009cae:	9206      	str	r2, [sp, #24]
 8009cb0:	9a07      	ldr	r2, [sp, #28]
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	18fb      	adds	r3, r7, r3
 8009cb6:	44b9      	add	r9, r7
 8009cb8:	1b12      	subs	r2, r2, r4
 8009cba:	9305      	str	r3, [sp, #20]
 8009cbc:	9501      	str	r5, [sp, #4]
 8009cbe:	464b      	mov	r3, r9
 8009cc0:	0011      	movs	r1, r2
 8009cc2:	e003      	b.n	8009ccc <BackEndTask+0xb0>
 8009cc4:	3301      	adds	r3, #1
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009cc6:	2dc0      	cmp	r5, #192	; 0xc0
 8009cc8:	d100      	bne.n	8009ccc <BackEndTask+0xb0>
 8009cca:	e07f      	b.n	8009dcc <BackEndTask+0x1b0>
 8009ccc:	1b1a      	subs	r2, r3, r4
 8009cce:	1bd2      	subs	r2, r2, r7
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009cd0:	2abf      	cmp	r2, #191	; 0xbf
 8009cd2:	d100      	bne.n	8009cd6 <BackEndTask+0xba>
 8009cd4:	e0be      	b.n	8009e54 <BackEndTask+0x238>
 8009cd6:	7818      	ldrb	r0, [r3, #0]
 8009cd8:	18cd      	adds	r5, r1, r3
 8009cda:	2848      	cmp	r0, #72	; 0x48
 8009cdc:	d1f2      	bne.n	8009cc4 <BackEndTask+0xa8>
 8009cde:	7858      	ldrb	r0, [r3, #1]
 8009ce0:	285a      	cmp	r0, #90	; 0x5a
 8009ce2:	d1ef      	bne.n	8009cc4 <BackEndTask+0xa8>
						packetStart = MSG_RX_BUF_SIZE - 1;
 8009ce4:	4653      	mov	r3, sl
 8009ce6:	9d01      	ldr	r5, [sp, #4]
 8009ce8:	605a      	str	r2, [r3, #4]
				if(emptyBuffer){
 8009cea:	9b02      	ldr	r3, [sp, #8]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1bd      	bne.n	8009c6c <BackEndTask+0x50>
				totalnumberofrecevedmesg++;
 8009cf0:	4653      	mov	r3, sl
 8009cf2:	4652      	mov	r2, sl
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	6013      	str	r3, [r2, #0]
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 8009cfa:	6853      	ldr	r3, [r2, #4]
 8009cfc:	4699      	mov	r9, r3
 8009cfe:	2bbd      	cmp	r3, #189	; 0xbd
 8009d00:	d100      	bne.n	8009d04 <BackEndTask+0xe8>
 8009d02:	e083      	b.n	8009e0c <BackEndTask+0x1f0>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009d04:	2bbe      	cmp	r3, #190	; 0xbe
 8009d06:	d100      	bne.n	8009d0a <BackEndTask+0xee>
 8009d08:	e09e      	b.n	8009e48 <BackEndTask+0x22c>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009d0a:	2bbf      	cmp	r3, #191	; 0xbf
 8009d0c:	d100      	bne.n	8009d10 <BackEndTask+0xf4>
 8009d0e:	e0c5      	b.n	8009e9c <BackEndTask+0x280>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8009d10:	006b      	lsls	r3, r5, #1
 8009d12:	195b      	adds	r3, r3, r5
 8009d14:	019b      	lsls	r3, r3, #6
 8009d16:	18fb      	adds	r3, r7, r3
 8009d18:	444b      	add	r3, r9
 8009d1a:	789a      	ldrb	r2, [r3, #2]
 8009d1c:	4653      	mov	r3, sl
 8009d1e:	609a      	str	r2, [r3, #8]
					parseStart =packetStart + 3;
 8009d20:	464b      	mov	r3, r9
 8009d22:	4651      	mov	r1, sl
 8009d24:	3303      	adds	r3, #3
 8009d26:	60cb      	str	r3, [r1, #12]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009d28:	1cd3      	adds	r3, r2, #3
 8009d2a:	9301      	str	r3, [sp, #4]
 8009d2c:	444b      	add	r3, r9
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 8009d2e:	2bbf      	cmp	r3, #191	; 0xbf
 8009d30:	dd4e      	ble.n	8009dd0 <BackEndTask+0x1b4>
					packetEnd -= MSG_RX_BUF_SIZE;
 8009d32:	4651      	mov	r1, sl
 8009d34:	3bc0      	subs	r3, #192	; 0xc0
 8009d36:	610b      	str	r3, [r1, #16]
 8009d38:	4649      	mov	r1, r9
 8009d3a:	1908      	adds	r0, r1, r4
 8009d3c:	1838      	adds	r0, r7, r0
				if(packetStart != packetEnd) // Non-empty packet
 8009d3e:	4599      	cmp	r9, r3
 8009d40:	d04d      	beq.n	8009dde <BackEndTask+0x1c2>
					if(packetStart < packetEnd){
 8009d42:	4599      	cmp	r9, r3
 8009d44:	da6d      	bge.n	8009e22 <BackEndTask+0x206>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 8009d46:	0001      	movs	r1, r0
 8009d48:	9a01      	ldr	r2, [sp, #4]
 8009d4a:	4894      	ldr	r0, [pc, #592]	; (8009f9c <BackEndTask+0x380>)
 8009d4c:	f008 ffd9 	bl	8012d02 <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009d50:	466b      	mov	r3, sp
 8009d52:	4892      	ldr	r0, [pc, #584]	; (8009f9c <BackEndTask+0x380>)
 8009d54:	8899      	ldrh	r1, [r3, #4]
 8009d56:	f002 fd57 	bl	800c808 <CalculateCRC8>
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009d5a:	2238      	movs	r2, #56	; 0x38
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009d5c:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009d5e:	2100      	movs	r1, #0
 8009d60:	488e      	ldr	r0, [pc, #568]	; (8009f9c <BackEndTask+0x380>)
 8009d62:	f008 ffd7 	bl	8012d14 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009d66:	4653      	mov	r3, sl
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	4699      	mov	r9, r3
 8009d6c:	464a      	mov	r2, r9
 8009d6e:	006b      	lsls	r3, r5, #1
 8009d70:	195b      	adds	r3, r3, r5
 8009d72:	019b      	lsls	r3, r3, #6
 8009d74:	18fb      	adds	r3, r7, r3
 8009d76:	5c9b      	ldrb	r3, [r3, r2]
 8009d78:	9a01      	ldr	r2, [sp, #4]
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d100      	bne.n	8009d80 <BackEndTask+0x164>
 8009d7e:	e095      	b.n	8009eac <BackEndTask+0x290>
				if(packetStart < packetEnd){
 8009d80:	4653      	mov	r3, sl
 8009d82:	4652      	mov	r2, sl
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	6892      	ldr	r2, [r2, #8]
 8009d88:	1918      	adds	r0, r3, r4
 8009d8a:	3204      	adds	r2, #4
 8009d8c:	1838      	adds	r0, r7, r0
 8009d8e:	9201      	str	r2, [sp, #4]
 8009d90:	4599      	cmp	r9, r3
 8009d92:	dd26      	ble.n	8009de2 <BackEndTask+0x1c6>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009d94:	2100      	movs	r1, #0
 8009d96:	f008 ffbd 	bl	8012d14 <memset>
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009d9a:	464b      	mov	r3, r9
 8009d9c:	2bbf      	cmp	r3, #191	; 0xbf
 8009d9e:	d031      	beq.n	8009e04 <BackEndTask+0x1e8>
					UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009da0:	9a03      	ldr	r2, [sp, #12]
 8009da2:	3301      	adds	r3, #1
 8009da4:	7013      	strb	r3, [r2, #0]
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
 8009da6:	00f3      	lsls	r3, r6, #3
 8009da8:	1b9b      	subs	r3, r3, r6
 8009daa:	4a7d      	ldr	r2, [pc, #500]	; (8009fa0 <BackEndTask+0x384>)
 8009dac:	00db      	lsls	r3, r3, #3
 8009dae:	3b37      	subs	r3, #55	; 0x37
 8009db0:	5cd0      	ldrb	r0, [r2, r3]
 8009db2:	212d      	movs	r1, #45	; 0x2d
 8009db4:	2200      	movs	r2, #0
 8009db6:	f7ff fe51 	bl	8009a5c <SendMessageToModule>
				++rejectedMsg;
 8009dba:	4653      	mov	r3, sl
 8009dbc:	4652      	mov	r2, sl
 8009dbe:	8adb      	ldrh	r3, [r3, #22]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	82d3      	strh	r3, [r2, #22]
 8009dc4:	e73d      	b.n	8009c42 <BackEndTask+0x26>
			}
		}

		taskYIELD();
 8009dc6:	f005 fa4b 	bl	800f260 <vPortYield>
		for(port =1; port <= NumOfPorts; port++){
 8009dca:	e736      	b.n	8009c3a <BackEndTask+0x1e>
 8009dcc:	9d01      	ldr	r5, [sp, #4]
 8009dce:	e78c      	b.n	8009cea <BackEndTask+0xce>
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009dd0:	4651      	mov	r1, sl
 8009dd2:	610b      	str	r3, [r1, #16]
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	1908      	adds	r0, r1, r4
 8009dd8:	1838      	adds	r0, r7, r0
				if(packetStart != packetEnd) // Non-empty packet
 8009dda:	4599      	cmp	r9, r3
 8009ddc:	d1b1      	bne.n	8009d42 <BackEndTask+0x126>
 8009dde:	3204      	adds	r2, #4
 8009de0:	9201      	str	r2, [sp, #4]
					MSG_RX_BUF_SIZE - packetStart);
 8009de2:	22c0      	movs	r2, #192	; 0xc0
 8009de4:	1ad3      	subs	r3, r2, r3
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8009de6:	001a      	movs	r2, r3
 8009de8:	2100      	movs	r1, #0
 8009dea:	9302      	str	r3, [sp, #8]
 8009dec:	f008 ff92 	bl	8012d14 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009df0:	9b02      	ldr	r3, [sp, #8]
 8009df2:	9a01      	ldr	r2, [sp, #4]
 8009df4:	1938      	adds	r0, r7, r4
 8009df6:	1ad2      	subs	r2, r2, r3
 8009df8:	2100      	movs	r1, #0
 8009dfa:	f008 ff8b 	bl	8012d14 <memset>
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009dfe:	464b      	mov	r3, r9
 8009e00:	2bbf      	cmp	r3, #191	; 0xbf
 8009e02:	d1cd      	bne.n	8009da0 <BackEndTask+0x184>
					UARTRxBufIndex[port - 1] =0;
 8009e04:	2300      	movs	r3, #0
 8009e06:	9a03      	ldr	r2, [sp, #12]
 8009e08:	7013      	strb	r3, [r2, #0]
 8009e0a:	e7cc      	b.n	8009da6 <BackEndTask+0x18a>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009e0c:	0073      	lsls	r3, r6, #1
 8009e0e:	199b      	adds	r3, r3, r6
 8009e10:	019b      	lsls	r3, r3, #6
 8009e12:	3b01      	subs	r3, #1
 8009e14:	5cfa      	ldrb	r2, [r7, r3]
 8009e16:	4653      	mov	r3, sl
					parseStart =0;
 8009e18:	4651      	mov	r1, sl
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009e1a:	609a      	str	r2, [r3, #8]
					parseStart =0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	60cb      	str	r3, [r1, #12]
 8009e20:	e782      	b.n	8009d28 <BackEndTask+0x10c>
						MSG_RX_BUF_SIZE - packetStart);
 8009e22:	22c0      	movs	r2, #192	; 0xc0
 8009e24:	464b      	mov	r3, r9
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	4699      	mov	r9, r3
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009e2a:	001a      	movs	r2, r3
 8009e2c:	0001      	movs	r1, r0
 8009e2e:	485b      	ldr	r0, [pc, #364]	; (8009f9c <BackEndTask+0x380>)
 8009e30:	f008 ff67 	bl	8012d02 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8009e34:	464a      	mov	r2, r9
 8009e36:	4b59      	ldr	r3, [pc, #356]	; (8009f9c <BackEndTask+0x380>)
 8009e38:	1939      	adds	r1, r7, r4
 8009e3a:	444b      	add	r3, r9
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	9b01      	ldr	r3, [sp, #4]
 8009e40:	1a9a      	subs	r2, r3, r2
 8009e42:	f008 ff5e 	bl	8012d02 <memcpy>
 8009e46:	e783      	b.n	8009d50 <BackEndTask+0x134>
					packetLength =UARTRxBuf[port - 1][0];
 8009e48:	4653      	mov	r3, sl
					parseStart =1;
 8009e4a:	2101      	movs	r1, #1
					packetLength =UARTRxBuf[port - 1][0];
 8009e4c:	5d3a      	ldrb	r2, [r7, r4]
					parseStart =1;
 8009e4e:	60d9      	str	r1, [r3, #12]
					packetLength =UARTRxBuf[port - 1][0];
 8009e50:	609a      	str	r2, [r3, #8]
 8009e52:	e769      	b.n	8009d28 <BackEndTask+0x10c>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009e54:	9805      	ldr	r0, [sp, #20]
 8009e56:	7800      	ldrb	r0, [r0, #0]
 8009e58:	2848      	cmp	r0, #72	; 0x48
 8009e5a:	d07a      	beq.n	8009f52 <BackEndTask+0x336>
							if(BOS.disableCLI == false){
 8009e5c:	9a04      	ldr	r2, [sp, #16]
 8009e5e:	2a00      	cmp	r2, #0
 8009e60:	d000      	beq.n	8009e64 <BackEndTask+0x248>
 8009e62:	e703      	b.n	8009c6c <BackEndTask+0x50>
 8009e64:	4648      	mov	r0, r9
 8009e66:	9a06      	ldr	r2, [sp, #24]
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e68:	7805      	ldrb	r5, [r0, #0]
 8009e6a:	469c      	mov	ip, r3
 8009e6c:	1e53      	subs	r3, r2, #1
 8009e6e:	2d0d      	cmp	r5, #13
 8009e70:	d009      	beq.n	8009e86 <BackEndTask+0x26a>
 8009e72:	3001      	adds	r0, #1
 8009e74:	1c55      	adds	r5, r2, #1
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009e76:	2ac0      	cmp	r2, #192	; 0xc0
 8009e78:	d100      	bne.n	8009e7c <BackEndTask+0x260>
 8009e7a:	e6f7      	b.n	8009c6c <BackEndTask+0x50>
							if(BOS.disableCLI == false){
 8009e7c:	002a      	movs	r2, r5
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e7e:	7805      	ldrb	r5, [r0, #0]
 8009e80:	1e53      	subs	r3, r2, #1
 8009e82:	2d0d      	cmp	r5, #13
 8009e84:	d1f5      	bne.n	8009e72 <BackEndTask+0x256>
 8009e86:	2bbf      	cmp	r3, #191	; 0xbf
 8009e88:	d100      	bne.n	8009e8c <BackEndTask+0x270>
 8009e8a:	e0ac      	b.n	8009fe6 <BackEndTask+0x3ca>
 8009e8c:	7845      	ldrb	r5, [r0, #1]
 8009e8e:	2d00      	cmp	r5, #0
 8009e90:	d100      	bne.n	8009e94 <BackEndTask+0x278>
 8009e92:	e08b      	b.n	8009fac <BackEndTask+0x390>
 8009e94:	1c55      	adds	r5, r2, #1
 8009e96:	3001      	adds	r0, #1
							if(BOS.disableCLI == false){
 8009e98:	002a      	movs	r2, r5
 8009e9a:	e7f0      	b.n	8009e7e <BackEndTask+0x262>
					packetLength =UARTRxBuf[port - 1][1];
 8009e9c:	193b      	adds	r3, r7, r4
 8009e9e:	785a      	ldrb	r2, [r3, #1]
 8009ea0:	4653      	mov	r3, sl
					parseStart =2;
 8009ea2:	4651      	mov	r1, sl
					packetLength =UARTRxBuf[port - 1][1];
 8009ea4:	609a      	str	r2, [r3, #8]
					parseStart =2;
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	60cb      	str	r3, [r1, #12]
 8009eaa:	e73d      	b.n	8009d28 <BackEndTask+0x10c>
						portStatus[port] =MSG;
 8009eac:	4643      	mov	r3, r8
 8009eae:	2201      	movs	r2, #1
 8009eb0:	559a      	strb	r2, [r3, r6]
						messageLength[port - 1] =packetLength;
 8009eb2:	4653      	mov	r3, sl
 8009eb4:	4a3b      	ldr	r2, [pc, #236]	; (8009fa4 <BackEndTask+0x388>)
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	00f0      	lsls	r0, r6, #3
 8009eba:	5553      	strb	r3, [r2, r5]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009ebc:	4652      	mov	r2, sl
 8009ebe:	68d1      	ldr	r1, [r2, #12]
 8009ec0:	2238      	movs	r2, #56	; 0x38
 8009ec2:	4252      	negs	r2, r2
 8009ec4:	4694      	mov	ip, r2
 8009ec6:	1b80      	subs	r0, r0, r6
 8009ec8:	00c0      	lsls	r0, r0, #3
 8009eca:	4484      	add	ip, r0
 8009ecc:	4662      	mov	r2, ip
 8009ece:	9202      	str	r2, [sp, #8]
 8009ed0:	4a33      	ldr	r2, [pc, #204]	; (8009fa0 <BackEndTask+0x384>)
 8009ed2:	000d      	movs	r5, r1
 8009ed4:	3a38      	subs	r2, #56	; 0x38
 8009ed6:	1810      	adds	r0, r2, r0
 8009ed8:	22bf      	movs	r2, #191	; 0xbf
 8009eda:	9104      	str	r1, [sp, #16]
 8009edc:	1909      	adds	r1, r1, r4
						messageLength[port - 1] =packetLength;
 8009ede:	9301      	str	r3, [sp, #4]
 8009ee0:	1879      	adds	r1, r7, r1
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009ee2:	1b52      	subs	r2, r2, r5
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	dc38      	bgt.n	8009f5a <BackEndTask+0x33e>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009ee8:	001a      	movs	r2, r3
 8009eea:	f008 ff0a 	bl	8012d02 <memcpy>
						if(packetStart < packetEnd){
 8009eee:	4653      	mov	r3, sl
 8009ef0:	9a01      	ldr	r2, [sp, #4]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	3204      	adds	r2, #4
 8009ef6:	1918      	adds	r0, r3, r4
 8009ef8:	1838      	adds	r0, r7, r0
 8009efa:	9201      	str	r2, [sp, #4]
 8009efc:	4599      	cmp	r9, r3
 8009efe:	dc08      	bgt.n	8009f12 <BackEndTask+0x2f6>
							MSG_RX_BUF_SIZE - packetStart);
 8009f00:	25c0      	movs	r5, #192	; 0xc0
 8009f02:	1aed      	subs	r5, r5, r3
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8009f04:	002a      	movs	r2, r5
 8009f06:	2100      	movs	r1, #0
 8009f08:	f008 ff04 	bl	8012d14 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009f0c:	9b01      	ldr	r3, [sp, #4]
 8009f0e:	1938      	adds	r0, r7, r4
 8009f10:	1b5a      	subs	r2, r3, r5
 8009f12:	2100      	movs	r1, #0
 8009f14:	f008 fefe 	bl	8012d14 <memset>
						if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009f18:	464b      	mov	r3, r9
 8009f1a:	2bbf      	cmp	r3, #191	; 0xbf
 8009f1c:	d02e      	beq.n	8009f7c <BackEndTask+0x360>
							UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009f1e:	9a03      	ldr	r2, [sp, #12]
 8009f20:	3301      	adds	r3, #1
 8009f22:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8009f24:	4653      	mov	r3, sl
 8009f26:	4652      	mov	r2, sl
 8009f28:	8a9b      	ldrh	r3, [r3, #20]
							NotifyMessagingTask(port);
 8009f2a:	4658      	mov	r0, fp
						++acceptedMsg;
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	8293      	strh	r3, [r2, #20]
						if(cMessage[port - 1][0] == myID || cMessage[port - 1][0] == BOS_BROADCAST || cMessage[port - 1][0] == BOS_MULTICAST)
 8009f30:	9a02      	ldr	r2, [sp, #8]
 8009f32:	4b1b      	ldr	r3, [pc, #108]	; (8009fa0 <BackEndTask+0x384>)
 8009f34:	5c9b      	ldrb	r3, [r3, r2]
 8009f36:	4a1c      	ldr	r2, [pc, #112]	; (8009fa8 <BackEndTask+0x38c>)
 8009f38:	7812      	ldrb	r2, [r2, #0]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d006      	beq.n	8009f4c <BackEndTask+0x330>
 8009f3e:	3302      	adds	r3, #2
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d902      	bls.n	8009f4c <BackEndTask+0x330>
							ForwardReceivedMessage(port);
 8009f46:	f7ff fd69 	bl	8009a1c <ForwardReceivedMessage>
 8009f4a:	e68f      	b.n	8009c6c <BackEndTask+0x50>
							NotifyMessagingTask(port);
 8009f4c:	f7ff fafe 	bl	800954c <NotifyMessagingTask>
 8009f50:	e68c      	b.n	8009c6c <BackEndTask+0x50>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009f52:	5d38      	ldrb	r0, [r7, r4]
 8009f54:	285a      	cmp	r0, #90	; 0x5a
 8009f56:	d181      	bne.n	8009e5c <BackEndTask+0x240>
 8009f58:	e6c4      	b.n	8009ce4 <BackEndTask+0xc8>
							MSG_RX_BUF_SIZE - parseStart);
 8009f5a:	25c0      	movs	r5, #192	; 0xc0
 8009f5c:	9b04      	ldr	r3, [sp, #16]
 8009f5e:	1aed      	subs	r5, r5, r3
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009f60:	002a      	movs	r2, r5
 8009f62:	f008 fece 	bl	8012d02 <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 8009f66:	9b02      	ldr	r3, [sp, #8]
 8009f68:	1939      	adds	r1, r7, r4
 8009f6a:	18e8      	adds	r0, r5, r3
 8009f6c:	4b0c      	ldr	r3, [pc, #48]	; (8009fa0 <BackEndTask+0x384>)
 8009f6e:	469c      	mov	ip, r3
 8009f70:	9b01      	ldr	r3, [sp, #4]
 8009f72:	4460      	add	r0, ip
 8009f74:	1b5a      	subs	r2, r3, r5
 8009f76:	f008 fec4 	bl	8012d02 <memcpy>
 8009f7a:	e7b8      	b.n	8009eee <BackEndTask+0x2d2>
							UARTRxBufIndex[port - 1] =0;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	9a03      	ldr	r2, [sp, #12]
 8009f80:	7013      	strb	r3, [r2, #0]
 8009f82:	e7cf      	b.n	8009f24 <BackEndTask+0x308>
 8009f84:	20000c2c 	.word	0x20000c2c
 8009f88:	200019d8 	.word	0x200019d8
 8009f8c:	2000138c 	.word	0x2000138c
 8009f90:	20001344 	.word	0x20001344
 8009f94:	2000134c 	.word	0x2000134c
 8009f98:	20006ea8 	.word	0x20006ea8
 8009f9c:	20001354 	.word	0x20001354
 8009fa0:	20000c90 	.word	0x20000c90
 8009fa4:	20000c50 	.word	0x20000c50
 8009fa8:	20000a98 	.word	0x20000a98
 8009fac:	0018      	movs	r0, r3
 8009fae:	9d01      	ldr	r5, [sp, #4]
 8009fb0:	b2d2      	uxtb	r2, r2
										UARTRxBuf[port - 1][j] =0;
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	006b      	lsls	r3, r5, #1
 8009fb6:	195b      	adds	r3, r3, r5
 8009fb8:	019b      	lsls	r3, r3, #6
 8009fba:	18fb      	adds	r3, r7, r3
 8009fbc:	5419      	strb	r1, [r3, r0]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009fbe:	9b03      	ldr	r3, [sp, #12]
 8009fc0:	701a      	strb	r2, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 8009fc2:	4642      	mov	r2, r8
 8009fc4:	4b0e      	ldr	r3, [pc, #56]	; (800a000 <BackEndTask+0x3e4>)
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	54d1      	strb	r1, [r2, r3]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009fca:	2303      	movs	r3, #3
 8009fcc:	5593      	strb	r3, [r2, r6]
										PcPort =port;
 8009fce:	465a      	mov	r2, fp
 8009fd0:	4b0b      	ldr	r3, [pc, #44]	; (800a000 <BackEndTask+0x3e4>)
 8009fd2:	701a      	strb	r2, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8009fd4:	4b0b      	ldr	r3, [pc, #44]	; (800a004 <BackEndTask+0x3e8>)
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	9301      	str	r3, [sp, #4]
 8009fdc:	9801      	ldr	r0, [sp, #4]
 8009fde:	2300      	movs	r3, #0
 8009fe0:	f004 fec4 	bl	800ed6c <xTaskGenericNotify>
										break;
 8009fe4:	e642      	b.n	8009c6c <BackEndTask+0x50>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009fe6:	5d3a      	ldrb	r2, [r7, r4]
 8009fe8:	0018      	movs	r0, r3
 8009fea:	4663      	mov	r3, ip
 8009fec:	2a00      	cmp	r2, #0
 8009fee:	d003      	beq.n	8009ff8 <BackEndTask+0x3dc>
							emptyBuffer = true;
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	18cd      	adds	r5, r1, r3
 8009ff4:	9202      	str	r2, [sp, #8]
 8009ff6:	e665      	b.n	8009cc4 <BackEndTask+0xa8>
 8009ff8:	9d01      	ldr	r5, [sp, #4]
 8009ffa:	22c0      	movs	r2, #192	; 0xc0
 8009ffc:	e7d9      	b.n	8009fb2 <BackEndTask+0x396>
 8009ffe:	46c0      	nop			; (mov r8, r8)
 800a000:	20000c28 	.word	0x20000c28
 800a004:	2000181c 	.word	0x2000181c

0800a008 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 800a008:	2001      	movs	r0, #1
 800a00a:	4770      	bx	lr

0800a00c <PxMessagingTask>:
void PxMessagingTask(void *argument){
 800a00c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a00e:	4657      	mov	r7, sl
 800a010:	4645      	mov	r5, r8
 800a012:	46de      	mov	lr, fp
 800a014:	464e      	mov	r6, r9
 800a016:	b5e0      	push	{r5, r6, r7, lr}
	port =(int8_t )(unsigned )argument;
 800a018:	b2c3      	uxtb	r3, r0
void PxMessagingTask(void *argument){
 800a01a:	b09d      	sub	sp, #116	; 0x74
	port =(int8_t )(unsigned )argument;
 800a01c:	930d      	str	r3, [sp, #52]	; 0x34
 800a01e:	23ff      	movs	r3, #255	; 0xff
 800a020:	4003      	ands	r3, r0
		if(messageLength[port - 1]){
 800a022:	1e5d      	subs	r5, r3, #1
 800a024:	930b      	str	r3, [sp, #44]	; 0x2c
 800a026:	00eb      	lsls	r3, r5, #3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a028:	4adf      	ldr	r2, [pc, #892]	; (800a3a8 <PxMessagingTask+0x39c>)
 800a02a:	9306      	str	r3, [sp, #24]
 800a02c:	1b5b      	subs	r3, r3, r5
 800a02e:	00db      	lsls	r3, r3, #3
 800a030:	4693      	mov	fp, r2
 800a032:	001a      	movs	r2, r3
 800a034:	445a      	add	r2, fp
 800a036:	920a      	str	r2, [sp, #40]	; 0x28
	HAL_StatusTypeDef status =HAL_OK;
 800a038:	2200      	movs	r2, #0
 800a03a:	920f      	str	r2, [sp, #60]	; 0x3c
 800a03c:	4adb      	ldr	r2, [pc, #876]	; (800a3ac <PxMessagingTask+0x3a0>)
 800a03e:	930e      	str	r3, [sp, #56]	; 0x38
 800a040:	4690      	mov	r8, r2
 800a042:	1c5a      	adds	r2, r3, #1
 800a044:	3305      	adds	r3, #5
 800a046:	9317      	str	r3, [sp, #92]	; 0x5c
 800a048:	4bd9      	ldr	r3, [pc, #868]	; (800a3b0 <PxMessagingTask+0x3a4>)
 800a04a:	9216      	str	r2, [sp, #88]	; 0x58
 800a04c:	4699      	mov	r9, r3
									ADCSide =cMessage[port - 1][shift + 1];
 800a04e:	2338      	movs	r3, #56	; 0x38
 800a050:	00aa      	lsls	r2, r5, #2
 800a052:	9210      	str	r2, [sp, #64]	; 0x40
 800a054:	4ad7      	ldr	r2, [pc, #860]	; (800a3b4 <PxMessagingTask+0x3a8>)
	BOS_Status result =BOS_OK;
 800a056:	2700      	movs	r7, #0
 800a058:	4692      	mov	sl, r2
									ADCSide =cMessage[port - 1][shift + 1];
 800a05a:	436b      	muls	r3, r5
 800a05c:	445b      	add	r3, fp
 800a05e:	9305      	str	r3, [sp, #20]
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800a060:	2101      	movs	r1, #1
 800a062:	2001      	movs	r0, #1
 800a064:	4249      	negs	r1, r1
 800a066:	f004 fe41 	bl	800ecec <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 800a06a:	4643      	mov	r3, r8
 800a06c:	5d5e      	ldrb	r6, [r3, r5]
 800a06e:	2e00      	cmp	r6, #0
 800a070:	d076      	beq.n	800a160 <PxMessagingTask+0x154>
			if(cMessage[port - 1][2] >> 7){
 800a072:	9b06      	ldr	r3, [sp, #24]
 800a074:	1b5b      	subs	r3, r3, r5
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	445b      	add	r3, fp
 800a07a:	7899      	ldrb	r1, [r3, #2]
 800a07c:	b24b      	sxtb	r3, r1
 800a07e:	2b00      	cmp	r3, #0
 800a080:	da01      	bge.n	800a086 <PxMessagingTask+0x7a>
 800a082:	f000 fcc9 	bl	800aa18 <PxMessagingTask+0xa0c>
				longMessage =0;
 800a086:	2300      	movs	r3, #0
 800a088:	4acb      	ldr	r2, [pc, #812]	; (800a3b8 <PxMessagingTask+0x3ac>)
 800a08a:	7013      	strb	r3, [r2, #0]
			dst =cMessage[port - 1][0];
 800a08c:	465a      	mov	r2, fp
 800a08e:	9b06      	ldr	r3, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a090:	4eca      	ldr	r6, [pc, #808]	; (800a3bc <PxMessagingTask+0x3b0>)
			dst =cMessage[port - 1][0];
 800a092:	1b5b      	subs	r3, r3, r5
 800a094:	00db      	lsls	r3, r3, #3
 800a096:	5cd2      	ldrb	r2, [r2, r3]
			src =cMessage[port - 1][1];
 800a098:	445b      	add	r3, fp
			dst =cMessage[port - 1][0];
 800a09a:	9207      	str	r2, [sp, #28]
			src =cMessage[port - 1][1];
 800a09c:	785a      	ldrb	r2, [r3, #1]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a09e:	0708      	lsls	r0, r1, #28
			src =cMessage[port - 1][1];
 800a0a0:	9204      	str	r2, [sp, #16]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	0014      	movs	r4, r2
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a0a6:	0f80      	lsrs	r0, r0, #30
 800a0a8:	7070      	strb	r0, [r6, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 800a0aa:	0908      	lsrs	r0, r1, #4
 800a0ac:	400c      	ands	r4, r1
 800a0ae:	4002      	ands	r2, r0
 800a0b0:	46a4      	mov	ip, r4
 800a0b2:	b2d0      	uxtb	r0, r2
 800a0b4:	70f2      	strb	r2, [r6, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 800a0b6:	2260      	movs	r2, #96	; 0x60
 800a0b8:	4463      	add	r3, ip
 800a0ba:	400a      	ands	r2, r1
 800a0bc:	940c      	str	r4, [sp, #48]	; 0x30
 800a0be:	7032      	strb	r2, [r6, #0]
 800a0c0:	0022      	movs	r2, r4
 800a0c2:	78dc      	ldrb	r4, [r3, #3]
 800a0c4:	9408      	str	r4, [sp, #32]
			if(extendCode == true){
 800a0c6:	0789      	lsls	r1, r1, #30
 800a0c8:	d507      	bpl.n	800a0da <PxMessagingTask+0xce>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a0ca:	46a4      	mov	ip, r4
 800a0cc:	791b      	ldrb	r3, [r3, #4]
				++shift;
 800a0ce:	3201      	adds	r2, #1
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a0d0:	021b      	lsls	r3, r3, #8
 800a0d2:	4463      	add	r3, ip
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	9308      	str	r3, [sp, #32]
				++shift;
 800a0d8:	920c      	str	r2, [sp, #48]	; 0x30
			if(true == BOSMessaging.received_Acknowledgment){
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d001      	beq.n	800a0e2 <PxMessagingTask+0xd6>
 800a0de:	f000 fca0 	bl	800aa22 <PxMessagingTask+0xa16>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a0e2:	9a07      	ldr	r2, [sp, #28]
 800a0e4:	1e53      	subs	r3, r2, #1
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2bfc      	cmp	r3, #252	; 0xfc
 800a0ea:	d801      	bhi.n	800a0f0 <PxMessagingTask+0xe4>
 800a0ec:	f000 fc6e 	bl	800a9cc <PxMessagingTask+0x9c0>
 800a0f0:	4643      	mov	r3, r8
 800a0f2:	5d5e      	ldrb	r6, [r3, r5]
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a0f4:	9b07      	ldr	r3, [sp, #28]
 800a0f6:	2bff      	cmp	r3, #255	; 0xff
 800a0f8:	d001      	beq.n	800a0fe <PxMessagingTask+0xf2>
 800a0fa:	f000 fca7 	bl	800aa4c <PxMessagingTask+0xa40>
 800a0fe:	9b06      	ldr	r3, [sp, #24]
 800a100:	4aaf      	ldr	r2, [pc, #700]	; (800a3c0 <PxMessagingTask+0x3b4>)
 800a102:	1b5c      	subs	r4, r3, r5
 800a104:	00e4      	lsls	r4, r4, #3
 800a106:	445c      	add	r4, fp
 800a108:	19a3      	adds	r3, r4, r6
 800a10a:	3b01      	subs	r3, #1
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	7e12      	ldrb	r2, [r2, #24]
					result =BOS_ERR_MSG_Reflection;
 800a110:	2703      	movs	r7, #3
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a112:	429a      	cmp	r2, r3
 800a114:	d024      	beq.n	800a160 <PxMessagingTask+0x154>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a116:	4aaa      	ldr	r2, [pc, #680]	; (800a3c0 <PxMessagingTask+0x3b4>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a118:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a11a:	7613      	strb	r3, [r2, #24]
 800a11c:	4aa9      	ldr	r2, [pc, #676]	; (800a3c4 <PxMessagingTask+0x3b8>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a11e:	20ff      	movs	r0, #255	; 0xff
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a120:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a122:	f7ff fc37 	bl	8009994 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a126:	4643      	mov	r3, r8
 800a128:	5d5e      	ldrb	r6, [r3, r5]
 800a12a:	2300      	movs	r3, #0
 800a12c:	19a4      	adds	r4, r4, r6
 800a12e:	3c01      	subs	r4, #1
 800a130:	7023      	strb	r3, [r4, #0]
				shift +=4;
 800a132:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a134:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800a136:	1b32      	subs	r2, r6, r4
 800a138:	b2d3      	uxtb	r3, r2
 800a13a:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 800a13c:	9b08      	ldr	r3, [sp, #32]
 800a13e:	2b2d      	cmp	r3, #45	; 0x2d
 800a140:	d900      	bls.n	800a144 <PxMessagingTask+0x138>
 800a142:	e084      	b.n	800a24e <PxMessagingTask+0x242>
 800a144:	4aa0      	ldr	r2, [pc, #640]	; (800a3c8 <PxMessagingTask+0x3bc>)
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	58d3      	ldr	r3, [r2, r3]
 800a14a:	469f      	mov	pc, r3
							SaveToRO();
 800a14c:	f001 f9b8 	bl	800b4c0 <SaveToRO>
							SaveEEportsDir();
 800a150:	f7f9 f95a 	bl	8003408 <SaveEEportsDir>
							indMode =IND_PING;
 800a154:	2301      	movs	r3, #1
							indMode =IND_TOPOLOGY;
 800a156:	4a9d      	ldr	r2, [pc, #628]	; (800a3cc <PxMessagingTask+0x3c0>)
 800a158:	7013      	strb	r3, [r2, #0]
 800a15a:	4643      	mov	r3, r8
							IND_toggle();
 800a15c:	2700      	movs	r7, #0
 800a15e:	5d5e      	ldrb	r6, [r3, r5]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a160:	0032      	movs	r2, r6
 800a162:	2100      	movs	r1, #0
 800a164:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a166:	f008 fdd5 	bl	8012d14 <memset>
		messageLength[port - 1] =0;
 800a16a:	4643      	mov	r3, r8
 800a16c:	2200      	movs	r2, #0
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a16e:	990b      	ldr	r1, [sp, #44]	; 0x2c
		messageLength[port - 1] =0;
 800a170:	555a      	strb	r2, [r3, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a172:	4b97      	ldr	r3, [pc, #604]	; (800a3d0 <PxMessagingTask+0x3c4>)
 800a174:	5c5b      	ldrb	r3, [r3, r1]
 800a176:	3b02      	subs	r3, #2
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d901      	bls.n	800a180 <PxMessagingTask+0x174>
			portStatus[port] =FREE;
 800a17c:	4b94      	ldr	r3, [pc, #592]	; (800a3d0 <PxMessagingTask+0x3c4>)
 800a17e:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 800a180:	f005 f86e 	bl	800f260 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800a184:	e76c      	b.n	800a060 <PxMessagingTask+0x54>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800a186:	9b05      	ldr	r3, [sp, #20]
 800a188:	191a      	adds	r2, r3, r4
 800a18a:	7893      	ldrb	r3, [r2, #2]
 800a18c:	78d1      	ldrb	r1, [r2, #3]
 800a18e:	021b      	lsls	r3, r3, #8
 800a190:	0409      	lsls	r1, r1, #16
 800a192:	185b      	adds	r3, r3, r1
 800a194:	7851      	ldrb	r1, [r2, #1]
 800a196:	7912      	ldrb	r2, [r2, #4]
 800a198:	185b      	adds	r3, r3, r1
 800a19a:	0612      	lsls	r2, r2, #24
 800a19c:	189b      	adds	r3, r3, r2
 800a19e:	4a8d      	ldr	r2, [pc, #564]	; (800a3d4 <PxMessagingTask+0x3c8>)
 800a1a0:	6393      	str	r3, [r2, #56]	; 0x38
									ADCPort =cMessage[port - 1][shift];
 800a1a2:	2644      	movs	r6, #68	; 0x44
									ADCSide =cMessage[port - 1][shift + 1];
 800a1a4:	2146      	movs	r1, #70	; 0x46
									ADCPort =cMessage[port - 1][shift];
 800a1a6:	4b8b      	ldr	r3, [pc, #556]	; (800a3d4 <PxMessagingTask+0x3c8>)
									ADCSide =cMessage[port - 1][shift + 1];
 800a1a8:	4a8a      	ldr	r2, [pc, #552]	; (800a3d4 <PxMessagingTask+0x3c8>)
									ADCPort =cMessage[port - 1][shift];
 800a1aa:	5398      	strh	r0, [r3, r6]
									ADCSide =cMessage[port - 1][shift + 1];
 800a1ac:	9b05      	ldr	r3, [sp, #20]
 800a1ae:	191b      	adds	r3, r3, r4
 800a1b0:	785b      	ldrb	r3, [r3, #1]
 800a1b2:	5253      	strh	r3, [r2, r1]
									if(0 == ADCSide){
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <PxMessagingTask+0x1b0>
 800a1b8:	f000 fdfc 	bl	800adb4 <PxMessagingTask+0xda8>
									else if(1 == ADCSide){
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d109      	bne.n	800a1d4 <PxMessagingTask+0x1c8>
										ADCSelectChannel(ADCPort,"bottom");
 800a1c0:	4985      	ldr	r1, [pc, #532]	; (800a3d8 <PxMessagingTask+0x3cc>)
 800a1c2:	f7fe fd61 	bl	8008c88 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800a1c6:	4a83      	ldr	r2, [pc, #524]	; (800a3d4 <PxMessagingTask+0x3c8>)
 800a1c8:	4b82      	ldr	r3, [pc, #520]	; (800a3d4 <PxMessagingTask+0x3c8>)
 800a1ca:	3248      	adds	r2, #72	; 0x48
 800a1cc:	5d98      	ldrb	r0, [r3, r6]
 800a1ce:	4982      	ldr	r1, [pc, #520]	; (800a3d8 <PxMessagingTask+0x3cc>)
 800a1d0:	f7fe fdaa 	bl	8008d28 <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800a1d4:	497f      	ldr	r1, [pc, #508]	; (800a3d4 <PxMessagingTask+0x3c8>)
 800a1d6:	487f      	ldr	r0, [pc, #508]	; (800a3d4 <PxMessagingTask+0x3c8>)
 800a1d8:	314c      	adds	r1, #76	; 0x4c
 800a1da:	3050      	adds	r0, #80	; 0x50
 800a1dc:	f7fe fb98 	bl	8008910 <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800a1e0:	4a7c      	ldr	r2, [pc, #496]	; (800a3d4 <PxMessagingTask+0x3c8>)
 800a1e2:	9b06      	ldr	r3, [sp, #24]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800a1e4:	0011      	movs	r1, r2
									ADCPort =cMessage[port - 1][shift];
 800a1e6:	1b5e      	subs	r6, r3, r5
 800a1e8:	2344      	movs	r3, #68	; 0x44
 800a1ea:	00f6      	lsls	r6, r6, #3
 800a1ec:	445e      	add	r6, fp
 800a1ee:	5d30      	ldrb	r0, [r6, r4]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800a1f0:	3154      	adds	r1, #84	; 0x54
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800a1f2:	1934      	adds	r4, r6, r4
									ADCPort =cMessage[port - 1][shift];
 800a1f4:	52d0      	strh	r0, [r2, r3]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800a1f6:	f7fe fc59 	bl	8008aac <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800a1fa:	79a3      	ldrb	r3, [r4, #6]
 800a1fc:	79e2      	ldrb	r2, [r4, #7]
 800a1fe:	021b      	lsls	r3, r3, #8
 800a200:	0412      	lsls	r2, r2, #16
 800a202:	189b      	adds	r3, r3, r2
 800a204:	7962      	ldrb	r2, [r4, #5]
 800a206:	189b      	adds	r3, r3, r2
 800a208:	7a22      	ldrb	r2, [r4, #8]
 800a20a:	0612      	lsls	r2, r2, #24
 800a20c:	189b      	adds	r3, r3, r2
 800a20e:	4a71      	ldr	r2, [pc, #452]	; (800a3d4 <PxMessagingTask+0x3c8>)
 800a210:	63d3      	str	r3, [r2, #60]	; 0x3c
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800a212:	7aa3      	ldrb	r3, [r4, #10]
 800a214:	7ae2      	ldrb	r2, [r4, #11]
 800a216:	021b      	lsls	r3, r3, #8
 800a218:	0412      	lsls	r2, r2, #16
 800a21a:	189b      	adds	r3, r3, r2
 800a21c:	7a62      	ldrb	r2, [r4, #9]
 800a21e:	189b      	adds	r3, r3, r2
 800a220:	7b22      	ldrb	r2, [r4, #12]
 800a222:	0612      	lsls	r2, r2, #24
 800a224:	189b      	adds	r3, r3, r2
 800a226:	4a6b      	ldr	r2, [pc, #428]	; (800a3d4 <PxMessagingTask+0x3c8>)
 800a228:	6413      	str	r3, [r2, #64]	; 0x40
							ACK_FLAG =1;
 800a22a:	2301      	movs	r3, #1
 800a22c:	4a6b      	ldr	r2, [pc, #428]	; (800a3dc <PxMessagingTask+0x3d0>)
 800a22e:	2700      	movs	r7, #0
 800a230:	7013      	strb	r3, [r2, #0]
 800a232:	4643      	mov	r3, r8
 800a234:	5d5e      	ldrb	r6, [r3, r5]
 800a236:	e793      	b.n	800a160 <PxMessagingTask+0x154>
							switch(cMessage[port - 1][0 + shift]){
 800a238:	9b06      	ldr	r3, [sp, #24]
 800a23a:	1b5b      	subs	r3, r3, r5
 800a23c:	00db      	lsls	r3, r3, #3
 800a23e:	445b      	add	r3, fp
 800a240:	5d18      	ldrb	r0, [r3, r4]
 800a242:	282b      	cmp	r0, #43	; 0x2b
 800a244:	d8f1      	bhi.n	800a22a <PxMessagingTask+0x21e>
 800a246:	4a66      	ldr	r2, [pc, #408]	; (800a3e0 <PxMessagingTask+0x3d4>)
 800a248:	0083      	lsls	r3, r0, #2
 800a24a:	58d3      	ldr	r3, [r2, r3]
 800a24c:	469f      	mov	pc, r3
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800a24e:	9400      	str	r4, [sp, #0]
 800a250:	9b07      	ldr	r3, [sp, #28]
 800a252:	9a04      	ldr	r2, [sp, #16]
 800a254:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a256:	9808      	ldr	r0, [sp, #32]
 800a258:	f7ff fed6 	bl	800a008 <User_MessagingParser>
 800a25c:	0007      	movs	r7, r0
							if(result == BOS_ERR_UnknownMessage){
 800a25e:	2801      	cmp	r0, #1
 800a260:	d101      	bne.n	800a266 <PxMessagingTask+0x25a>
 800a262:	f000 fc3d 	bl	800aae0 <PxMessagingTask+0xad4>
 800a266:	4643      	mov	r3, r8
 800a268:	5d5e      	ldrb	r6, [r3, r5]
 800a26a:	e779      	b.n	800a160 <PxMessagingTask+0x154>
							rejected_FLAG =1;
 800a26c:	2301      	movs	r3, #1
 800a26e:	4a5d      	ldr	r2, [pc, #372]	; (800a3e4 <PxMessagingTask+0x3d8>)
 800a270:	7013      	strb	r3, [r2, #0]
 800a272:	e772      	b.n	800a15a <PxMessagingTask+0x14e>
							for(p =0; p < numOfParams; p++){
 800a274:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a276:	2b00      	cmp	r3, #0
 800a278:	d01d      	beq.n	800a2b6 <PxMessagingTask+0x2aa>
 800a27a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a27c:	4659      	mov	r1, fp
 800a27e:	46b4      	mov	ip, r6
 800a280:	1930      	adds	r0, r6, r4
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800a282:	2680      	movs	r6, #128	; 0x80
 800a284:	3101      	adds	r1, #1
 800a286:	4461      	add	r1, ip
 800a288:	9a04      	ldr	r2, [sp, #16]
 800a28a:	190c      	adds	r4, r1, r4
 800a28c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a28e:	3a01      	subs	r2, #1
 800a290:	4b55      	ldr	r3, [pc, #340]	; (800a3e8 <PxMessagingTask+0x3dc>)
 800a292:	0052      	lsls	r2, r2, #1
 800a294:	3901      	subs	r1, #1
 800a296:	b2c9      	uxtb	r1, r1
 800a298:	5a9b      	ldrh	r3, [r3, r2]
 800a29a:	4458      	add	r0, fp
 800a29c:	1864      	adds	r4, r4, r1
 800a29e:	0236      	lsls	r6, r6, #8
 800a2a0:	0037      	movs	r7, r6
 800a2a2:	7801      	ldrb	r1, [r0, #0]
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	3901      	subs	r1, #1
 800a2a8:	410f      	asrs	r7, r1
 800a2aa:	433b      	orrs	r3, r7
 800a2ac:	b29b      	uxth	r3, r3
							for(p =0; p < numOfParams; p++){
 800a2ae:	4284      	cmp	r4, r0
 800a2b0:	d1f6      	bne.n	800a2a0 <PxMessagingTask+0x294>
 800a2b2:	494d      	ldr	r1, [pc, #308]	; (800a3e8 <PxMessagingTask+0x3dc>)
 800a2b4:	528b      	strh	r3, [r1, r2]
							responseStatus =BOS_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	e0fd      	b.n	800a4b6 <PxMessagingTask+0x4aa>
							temp =0;
 800a2ba:	2300      	movs	r3, #0
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a2bc:	2680      	movs	r6, #128	; 0x80
							for(p =1; p <= NumOfPorts; p++){
 800a2be:	2401      	movs	r4, #1
							temp =0;
 800a2c0:	9309      	str	r3, [sp, #36]	; 0x24
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a2c2:	0236      	lsls	r6, r6, #8
 800a2c4:	0020      	movs	r0, r4
 800a2c6:	f003 f8db 	bl	800d480 <GetUart>
 800a2ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a2cc:	42b3      	cmp	r3, r6
 800a2ce:	d105      	bne.n	800a2dc <PxMessagingTask+0x2d0>
									messageParams[temp++] =p;
 800a2d0:	4651      	mov	r1, sl
 800a2d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2d4:	1c53      	adds	r3, r2, #1
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	548c      	strb	r4, [r1, r2]
 800a2da:	9309      	str	r3, [sp, #36]	; 0x24
							for(p =1; p <= NumOfPorts; p++){
 800a2dc:	3401      	adds	r4, #1
 800a2de:	b2e4      	uxtb	r4, r4
 800a2e0:	2c07      	cmp	r4, #7
 800a2e2:	d1ef      	bne.n	800a2c4 <PxMessagingTask+0x2b8>
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a2e4:	466b      	mov	r3, sp
 800a2e6:	2114      	movs	r1, #20
 800a2e8:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800a2ea:	9804      	ldr	r0, [sp, #16]
 800a2ec:	f7ff fbb6 	bl	8009a5c <SendMessageToModule>
 800a2f0:	e733      	b.n	800a15a <PxMessagingTask+0x14e>
 800a2f2:	4b3e      	ldr	r3, [pc, #248]	; (800a3ec <PxMessagingTask+0x3e0>)
 800a2f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2f6:	881f      	ldrh	r7, [r3, #0]
 800a2f8:	4b3d      	ldr	r3, [pc, #244]	; (800a3f0 <PxMessagingTask+0x3e4>)
 800a2fa:	4694      	mov	ip, r2
 800a2fc:	19d8      	adds	r0, r3, r7
 800a2fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a300:	4467      	add	r7, ip
 800a302:	18e1      	adds	r1, r4, r3
 800a304:	4643      	mov	r3, r8
 800a306:	5d5e      	ldrb	r6, [r3, r5]
							if(longMessage){
 800a308:	4b2b      	ldr	r3, [pc, #172]	; (800a3b8 <PxMessagingTask+0x3ac>)
 800a30a:	b2bf      	uxth	r7, r7
 800a30c:	781c      	ldrb	r4, [r3, #0]
 800a30e:	4459      	add	r1, fp
 800a310:	2c00      	cmp	r4, #0
 800a312:	d101      	bne.n	800a318 <PxMessagingTask+0x30c>
 800a314:	f000 fc76 	bl	800ac04 <PxMessagingTask+0xbf8>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a318:	f008 fcf3 	bl	8012d02 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a31c:	4b33      	ldr	r3, [pc, #204]	; (800a3ec <PxMessagingTask+0x3e0>)
 800a31e:	801f      	strh	r7, [r3, #0]
 800a320:	2700      	movs	r7, #0
 800a322:	e71d      	b.n	800a160 <PxMessagingTask+0x154>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800a324:	9b06      	ldr	r3, [sp, #24]
 800a326:	1b5b      	subs	r3, r3, r5
 800a328:	00db      	lsls	r3, r3, #3
 800a32a:	445b      	add	r3, fp
 800a32c:	5d1b      	ldrb	r3, [r3, r4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d001      	beq.n	800a336 <PxMessagingTask+0x32a>
 800a332:	f000 fc0c 	bl	800ab4e <PxMessagingTask+0xb42>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800a336:	9b05      	ldr	r3, [sp, #20]
 800a338:	469c      	mov	ip, r3
 800a33a:	4464      	add	r4, ip
 800a33c:	78a3      	ldrb	r3, [r4, #2]
 800a33e:	78e2      	ldrb	r2, [r4, #3]
 800a340:	061b      	lsls	r3, r3, #24
 800a342:	0412      	lsls	r2, r2, #16
 800a344:	189b      	adds	r3, r3, r2
 800a346:	7962      	ldrb	r2, [r4, #5]
 800a348:	189b      	adds	r3, r3, r2
 800a34a:	7922      	ldrb	r2, [r4, #4]
 800a34c:	0212      	lsls	r2, r2, #8
 800a34e:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800a350:	7862      	ldrb	r2, [r4, #1]
 800a352:	3a01      	subs	r2, #1
 800a354:	b2d2      	uxtb	r2, r2
 800a356:	2a07      	cmp	r2, #7
 800a358:	d900      	bls.n	800a35c <PxMessagingTask+0x350>
 800a35a:	e6fe      	b.n	800a15a <PxMessagingTask+0x14e>
 800a35c:	4925      	ldr	r1, [pc, #148]	; (800a3f4 <PxMessagingTask+0x3e8>)
 800a35e:	0092      	lsls	r2, r2, #2
 800a360:	588a      	ldr	r2, [r1, r2]
 800a362:	4697      	mov	pc, r2
							ExploreNeighbors(port);
 800a364:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a366:	f7f9 fa37 	bl	80037d8 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 800a36a:	2302      	movs	r3, #2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a36c:	2401      	movs	r4, #1
							temp =0;
 800a36e:	2700      	movs	r7, #0
							indMode =IND_TOPOLOGY;
 800a370:	4a16      	ldr	r2, [pc, #88]	; (800a3cc <PxMessagingTask+0x3c0>)
							osDelay(10);
 800a372:	200a      	movs	r0, #10
							indMode =IND_TOPOLOGY;
 800a374:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a376:	f003 f947 	bl	800d608 <osDelay>
 800a37a:	4e1f      	ldr	r6, [pc, #124]	; (800a3f8 <PxMessagingTask+0x3ec>)
								if(neighbors[p - 1][0]){
 800a37c:	8833      	ldrh	r3, [r6, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d009      	beq.n	800a396 <PxMessagingTask+0x38a>
									messageParams[temp] =p;
 800a382:	4653      	mov	r3, sl
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a384:	1c78      	adds	r0, r7, #1
 800a386:	4450      	add	r0, sl
 800a388:	2204      	movs	r2, #4
 800a38a:	0031      	movs	r1, r6
									messageParams[temp] =p;
 800a38c:	55dc      	strb	r4, [r3, r7]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a38e:	f008 fcb8 	bl	8012d02 <memcpy>
									temp +=5;
 800a392:	3705      	adds	r7, #5
 800a394:	b2ff      	uxtb	r7, r7
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a396:	3401      	adds	r4, #1
 800a398:	b2e4      	uxtb	r4, r4
 800a39a:	3604      	adds	r6, #4
 800a39c:	2c07      	cmp	r4, #7
 800a39e:	d1ed      	bne.n	800a37c <PxMessagingTask+0x370>
 800a3a0:	9709      	str	r7, [sp, #36]	; 0x24
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 800a3a2:	b2ba      	uxth	r2, r7
 800a3a4:	210d      	movs	r1, #13
 800a3a6:	e7a0      	b.n	800a2ea <PxMessagingTask+0x2de>
 800a3a8:	20000c90 	.word	0x20000c90
 800a3ac:	20000c50 	.word	0x20000c50
 800a3b0:	20000c40 	.word	0x20000c40
 800a3b4:	20000b3c 	.word	0x20000b3c
 800a3b8:	20000c4c 	.word	0x20000c4c
 800a3bc:	20006e28 	.word	0x20006e28
 800a3c0:	200019d8 	.word	0x200019d8
 800a3c4:	20000c48 	.word	0x20000c48
 800a3c8:	080178d8 	.word	0x080178d8
 800a3cc:	2000117e 	.word	0x2000117e
 800a3d0:	20000c2c 	.word	0x20000c2c
 800a3d4:	20001a58 	.word	0x20001a58
 800a3d8:	080186a4 	.word	0x080186a4
 800a3dc:	2000117d 	.word	0x2000117d
 800a3e0:	08017990 	.word	0x08017990
 800a3e4:	2000117c 	.word	0x2000117c
 800a3e8:	20007334 	.word	0x20007334
 800a3ec:	20000c4a 	.word	0x20000c4a
 800a3f0:	20001ab0 	.word	0x20001ab0
 800a3f4:	08017a40 	.word	0x08017a40
 800a3f8:	20001164 	.word	0x20001164
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a3fc:	9b06      	ldr	r3, [sp, #24]
 800a3fe:	9904      	ldr	r1, [sp, #16]
 800a400:	1b5b      	subs	r3, r3, r5
 800a402:	00db      	lsls	r3, r3, #3
 800a404:	445b      	add	r3, fp
 800a406:	1918      	adds	r0, r3, r4
 800a408:	7882      	ldrb	r2, [r0, #2]
 800a40a:	0209      	lsls	r1, r1, #8
 800a40c:	4ed8      	ldr	r6, [pc, #864]	; (800a770 <PxMessagingTask+0x764>)
 800a40e:	1852      	adds	r2, r2, r1
 800a410:	9910      	ldr	r1, [sp, #64]	; 0x40
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a412:	2700      	movs	r7, #0
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a414:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a416:	468c      	mov	ip, r1
 800a418:	0032      	movs	r2, r6
 800a41a:	5d19      	ldrb	r1, [r3, r4]
 800a41c:	7843      	ldrb	r3, [r0, #1]
 800a41e:	0209      	lsls	r1, r1, #8
 800a420:	4462      	add	r2, ip
 800a422:	185b      	adds	r3, r3, r1
 800a424:	8053      	strh	r3, [r2, #2]
							messageParams[1] =(uint8_t )myPN;
 800a426:	4652      	mov	r2, sl
 800a428:	4bd2      	ldr	r3, [pc, #840]	; (800a774 <PxMessagingTask+0x768>)
							messageParams[2] =port;
 800a42a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
							messageParams[1] =(uint8_t )myPN;
 800a42c:	881b      	ldrh	r3, [r3, #0]
							osDelay(2);
 800a42e:	2002      	movs	r0, #2
							messageParams[1] =(uint8_t )myPN;
 800a430:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 800a432:	0a1b      	lsrs	r3, r3, #8
 800a434:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 800a436:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 800a438:	f003 f8e6 	bl	800d608 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a43c:	2303      	movs	r3, #3
 800a43e:	2200      	movs	r2, #0
 800a440:	9300      	str	r3, [sp, #0]
 800a442:	2100      	movs	r1, #0
 800a444:	3308      	adds	r3, #8
 800a446:	0020      	movs	r0, r4
 800a448:	f7ff f8a8 	bl	800959c <SendMessageFromPort>
 800a44c:	4643      	mov	r3, r8
 800a44e:	5d5e      	ldrb	r6, [r3, r5]
 800a450:	e686      	b.n	800a160 <PxMessagingTask+0x154>
							IND_toggle();
 800a452:	2180      	movs	r1, #128	; 0x80
 800a454:	2090      	movs	r0, #144	; 0x90
 800a456:	0109      	lsls	r1, r1, #4
 800a458:	05c0      	lsls	r0, r0, #23
 800a45a:	f006 fcfb 	bl	8010e54 <HAL_GPIO_TogglePin>
 800a45e:	e67c      	b.n	800a15a <PxMessagingTask+0x14e>
							IND_OFF();
 800a460:	2200      	movs	r2, #0
 800a462:	2180      	movs	r1, #128	; 0x80
 800a464:	2090      	movs	r0, #144	; 0x90
 800a466:	0109      	lsls	r1, r1, #4
 800a468:	05c0      	lsls	r0, r0, #23
 800a46a:	f006 fced 	bl	8010e48 <HAL_GPIO_WritePin>
 800a46e:	e674      	b.n	800a15a <PxMessagingTask+0x14e>
							IND_ON();
 800a470:	2201      	movs	r2, #1
 800a472:	e7f6      	b.n	800a462 <PxMessagingTask+0x456>
							if(!moduleAlias[myID][0])
 800a474:	4bc0      	ldr	r3, [pc, #768]	; (800a778 <PxMessagingTask+0x76c>)
 800a476:	781a      	ldrb	r2, [r3, #0]
 800a478:	0093      	lsls	r3, r2, #2
 800a47a:	189b      	adds	r3, r3, r2
 800a47c:	4abf      	ldr	r2, [pc, #764]	; (800a77c <PxMessagingTask+0x770>)
 800a47e:	005b      	lsls	r3, r3, #1
 800a480:	5cd3      	ldrb	r3, [r2, r3]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <PxMessagingTask+0x47e>
 800a486:	f000 fd8d 	bl	800afa4 <PxMessagingTask+0xf98>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800a48a:	48bd      	ldr	r0, [pc, #756]	; (800a780 <PxMessagingTask+0x774>)
 800a48c:	9a04      	ldr	r2, [sp, #16]
 800a48e:	301c      	adds	r0, #28
 800a490:	49bc      	ldr	r1, [pc, #752]	; (800a784 <PxMessagingTask+0x778>)
 800a492:	f008 fe39 	bl	8013108 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 800a496:	4cba      	ldr	r4, [pc, #744]	; (800a780 <PxMessagingTask+0x774>)
 800a498:	341c      	adds	r4, #28
 800a49a:	0020      	movs	r0, r4
 800a49c:	f7f5 fe3c 	bl	8000118 <strlen>
 800a4a0:	4bb9      	ldr	r3, [pc, #740]	; (800a788 <PxMessagingTask+0x77c>)
 800a4a2:	b282      	uxth	r2, r0
 800a4a4:	7818      	ldrb	r0, [r3, #0]
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	425b      	negs	r3, r3
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	0021      	movs	r1, r4
 800a4ae:	3333      	adds	r3, #51	; 0x33
 800a4b0:	f002 ff5e 	bl	800d370 <writePxMutex>
							responseStatus =BOS_OK;
 800a4b4:	2300      	movs	r3, #0
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800a4b6:	4ab5      	ldr	r2, [pc, #724]	; (800a78c <PxMessagingTask+0x780>)
 800a4b8:	2700      	movs	r7, #0
 800a4ba:	7013      	strb	r3, [r2, #0]
 800a4bc:	4643      	mov	r3, r8
 800a4be:	5d5e      	ldrb	r6, [r3, r5]
 800a4c0:	e64e      	b.n	800a160 <PxMessagingTask+0x154>
							indMode =IND_PING;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	4ab2      	ldr	r2, [pc, #712]	; (800a790 <PxMessagingTask+0x784>)
							osDelay(10);
 800a4c6:	200a      	movs	r0, #10
							indMode =IND_PING;
 800a4c8:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a4ca:	f003 f89d 	bl	800d608 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 800a4ce:	2240      	movs	r2, #64	; 0x40
 800a4d0:	4bb0      	ldr	r3, [pc, #704]	; (800a794 <PxMessagingTask+0x788>)
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	4393      	bics	r3, r2
 800a4d6:	2b20      	cmp	r3, #32
 800a4d8:	d000      	beq.n	800a4dc <PxMessagingTask+0x4d0>
 800a4da:	e63e      	b.n	800a15a <PxMessagingTask+0x14e>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800a4dc:	2200      	movs	r2, #0
 800a4de:	2102      	movs	r1, #2
 800a4e0:	e703      	b.n	800a2ea <PxMessagingTask+0x2de>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800a4e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4e6:	469c      	mov	ip, r3
 800a4e8:	9b06      	ldr	r3, [sp, #24]
 800a4ea:	1c61      	adds	r1, r4, #1
 800a4ec:	1b5b      	subs	r3, r3, r5
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	445b      	add	r3, fp
 800a4f2:	5d18      	ldrb	r0, [r3, r4]
 800a4f4:	230a      	movs	r3, #10
 800a4f6:	4461      	add	r1, ip
 800a4f8:	3a01      	subs	r2, #1
 800a4fa:	9300      	str	r3, [sp, #0]
 800a4fc:	b292      	uxth	r2, r2
 800a4fe:	4459      	add	r1, fp
 800a500:	f002 ff36 	bl	800d370 <writePxMutex>
 800a504:	4643      	mov	r3, r8
 800a506:	2700      	movs	r7, #0
 800a508:	5d5e      	ldrb	r6, [r3, r5]
 800a50a:	e629      	b.n	800a160 <PxMessagingTask+0x154>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a50c:	9b06      	ldr	r3, [sp, #24]
 800a50e:	1b5b      	subs	r3, r3, r5
 800a510:	00db      	lsls	r3, r3, #3
 800a512:	445b      	add	r3, fp
 800a514:	5d1b      	ldrb	r3, [r3, r4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d000      	beq.n	800a51c <PxMessagingTask+0x510>
 800a51a:	e340      	b.n	800ab9e <PxMessagingTask+0xb92>
								myID =cMessage[port - 1][1 + shift];
 800a51c:	9b05      	ldr	r3, [sp, #20]
 800a51e:	4a96      	ldr	r2, [pc, #600]	; (800a778 <PxMessagingTask+0x76c>)
 800a520:	469c      	mov	ip, r3
 800a522:	4464      	add	r4, ip
 800a524:	7863      	ldrb	r3, [r4, #1]
 800a526:	2700      	movs	r7, #0
 800a528:	7013      	strb	r3, [r2, #0]
 800a52a:	4643      	mov	r3, r8
 800a52c:	5d5e      	ldrb	r6, [r3, r5]
 800a52e:	e617      	b.n	800a160 <PxMessagingTask+0x154>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a530:	9b06      	ldr	r3, [sp, #24]
 800a532:	1b5b      	subs	r3, r3, r5
 800a534:	00db      	lsls	r3, r3, #3
 800a536:	445b      	add	r3, fp
 800a538:	5d1f      	ldrb	r7, [r3, r4]
 800a53a:	191b      	adds	r3, r3, r4
 800a53c:	78da      	ldrb	r2, [r3, #3]
 800a53e:	063f      	lsls	r7, r7, #24
 800a540:	18bf      	adds	r7, r7, r2
 800a542:	785a      	ldrb	r2, [r3, #1]
 800a544:	0412      	lsls	r2, r2, #16
 800a546:	18bf      	adds	r7, r7, r2
 800a548:	789a      	ldrb	r2, [r3, #2]
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a54a:	791b      	ldrb	r3, [r3, #4]
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a54c:	0212      	lsls	r2, r2, #8
 800a54e:	18bf      	adds	r7, r7, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a550:	9309      	str	r3, [sp, #36]	; 0x24
 800a552:	2bff      	cmp	r3, #255	; 0xff
 800a554:	d100      	bne.n	800a558 <PxMessagingTask+0x54c>
 800a556:	e318      	b.n	800ab8a <PxMessagingTask+0xb7e>
								for(p =0; p < numOfParams; p++){
 800a558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a55a:	2a00      	cmp	r2, #0
 800a55c:	d100      	bne.n	800a560 <PxMessagingTask+0x554>
 800a55e:	e36f      	b.n	800ac40 <PxMessagingTask+0xc34>
 800a560:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a562:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a564:	191e      	adds	r6, r3, r4
 800a566:	465b      	mov	r3, fp
 800a568:	468c      	mov	ip, r1
 800a56a:	3305      	adds	r3, #5
 800a56c:	4463      	add	r3, ip
 800a56e:	191c      	adds	r4, r3, r4
 800a570:	0013      	movs	r3, r2
 800a572:	3b01      	subs	r3, #1
 800a574:	b2db      	uxtb	r3, r3
 800a576:	18e4      	adds	r4, r4, r3
									if(temp > 0 && temp <= NumOfPorts){
 800a578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57a:	445e      	add	r6, fp
 800a57c:	3b01      	subs	r3, #1
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b05      	cmp	r3, #5
 800a582:	d90a      	bls.n	800a59a <PxMessagingTask+0x58e>
								for(p =0; p < numOfParams; p++){
 800a584:	42b4      	cmp	r4, r6
 800a586:	d100      	bne.n	800a58a <PxMessagingTask+0x57e>
 800a588:	e5e7      	b.n	800a15a <PxMessagingTask+0x14e>
 800a58a:	7833      	ldrb	r3, [r6, #0]
 800a58c:	3601      	adds	r6, #1
 800a58e:	9309      	str	r3, [sp, #36]	; 0x24
									if(temp > 0 && temp <= NumOfPorts){
 800a590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a592:	3b01      	subs	r3, #1
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b05      	cmp	r3, #5
 800a598:	d8f4      	bhi.n	800a584 <PxMessagingTask+0x578>
										UpdateBaudrate(temp,temp32);
 800a59a:	0039      	movs	r1, r7
 800a59c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a59e:	f002 ff5d 	bl	800d45c <UpdateBaudrate>
 800a5a2:	e7ef      	b.n	800a584 <PxMessagingTask+0x578>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a5a4:	2601      	movs	r6, #1
 800a5a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5a8:	18e7      	adds	r7, r4, r3
 800a5aa:	445f      	add	r7, fp
								if(p != port)
 800a5ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5ae:	42b3      	cmp	r3, r6
 800a5b0:	d005      	beq.n	800a5be <PxMessagingTask+0x5b2>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a5b2:	0030      	movs	r0, r6
 800a5b4:	f002 ff64 	bl	800d480 <GetUart>
 800a5b8:	7839      	ldrb	r1, [r7, #0]
 800a5ba:	f002 ff6d 	bl	800d498 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a5be:	3601      	adds	r6, #1
 800a5c0:	b2f6      	uxtb	r6, r6
 800a5c2:	3701      	adds	r7, #1
 800a5c4:	2e07      	cmp	r6, #7
 800a5c6:	d1f1      	bne.n	800a5ac <PxMessagingTask+0x5a0>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a5c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a5ca:	f002 ff59 	bl	800d480 <GetUart>
 800a5ce:	9b06      	ldr	r3, [sp, #24]
 800a5d0:	2700      	movs	r7, #0
 800a5d2:	1b5b      	subs	r3, r3, r5
 800a5d4:	00db      	lsls	r3, r3, #3
 800a5d6:	445b      	add	r3, fp
 800a5d8:	191c      	adds	r4, r3, r4
 800a5da:	7aa1      	ldrb	r1, [r4, #10]
 800a5dc:	f002 ff5c 	bl	800d498 <SwapUartPins>
 800a5e0:	4643      	mov	r3, r8
 800a5e2:	5d5e      	ldrb	r6, [r3, r5]
 800a5e4:	e5bc      	b.n	800a160 <PxMessagingTask+0x154>
							temp =numOfParams / 5;
 800a5e6:	2105      	movs	r1, #5
 800a5e8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a5ea:	f7f5 fdb1 	bl	8000150 <__udivsi3>
 800a5ee:	b2c2      	uxtb	r2, r0
 800a5f0:	9209      	str	r2, [sp, #36]	; 0x24
							for(uint8_t k =0; k < temp; k++){
 800a5f2:	2a00      	cmp	r2, #0
 800a5f4:	d100      	bne.n	800a5f8 <PxMessagingTask+0x5ec>
 800a5f6:	e65e      	b.n	800a2b6 <PxMessagingTask+0x2aa>
 800a5f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a5fa:	465b      	mov	r3, fp
 800a5fc:	468c      	mov	ip, r1
 800a5fe:	3305      	adds	r3, #5
 800a600:	4463      	add	r3, ip
 800a602:	190e      	adds	r6, r1, r4
 800a604:	191c      	adds	r4, r3, r4
 800a606:	1e53      	subs	r3, r2, #1
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	009a      	lsls	r2, r3, #2
 800a60c:	18d3      	adds	r3, r2, r3
 800a60e:	445e      	add	r6, fp
 800a610:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a612:	4b61      	ldr	r3, [pc, #388]	; (800a798 <PxMessagingTask+0x78c>)
 800a614:	7830      	ldrb	r0, [r6, #0]
 800a616:	469c      	mov	ip, r3
 800a618:	3801      	subs	r0, #1
 800a61a:	0080      	lsls	r0, r0, #2
 800a61c:	1c71      	adds	r1, r6, #1
 800a61e:	4460      	add	r0, ip
 800a620:	2204      	movs	r2, #4
 800a622:	3605      	adds	r6, #5
 800a624:	f008 fb6d 	bl	8012d02 <memcpy>
							for(uint8_t k =0; k < temp; k++){
 800a628:	42b4      	cmp	r4, r6
 800a62a:	d1f2      	bne.n	800a612 <PxMessagingTask+0x606>
							responseStatus =BOS_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	e742      	b.n	800a4b6 <PxMessagingTask+0x4aa>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a630:	9b06      	ldr	r3, [sp, #24]
 800a632:	9904      	ldr	r1, [sp, #16]
 800a634:	1b5b      	subs	r3, r3, r5
 800a636:	00db      	lsls	r3, r3, #3
 800a638:	445b      	add	r3, fp
 800a63a:	1918      	adds	r0, r3, r4
 800a63c:	7882      	ldrb	r2, [r0, #2]
 800a63e:	0209      	lsls	r1, r1, #8
 800a640:	1852      	adds	r2, r2, r1
 800a642:	4e4b      	ldr	r6, [pc, #300]	; (800a770 <PxMessagingTask+0x764>)
 800a644:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a646:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a648:	468c      	mov	ip, r1
 800a64a:	0032      	movs	r2, r6
 800a64c:	5d19      	ldrb	r1, [r3, r4]
 800a64e:	7843      	ldrb	r3, [r0, #1]
 800a650:	0209      	lsls	r1, r1, #8
 800a652:	185b      	adds	r3, r3, r1
 800a654:	4462      	add	r2, ip
 800a656:	8053      	strh	r3, [r2, #2]
							responseStatus =BOS_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	e72c      	b.n	800a4b6 <PxMessagingTask+0x4aa>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a65c:	4b4f      	ldr	r3, [pc, #316]	; (800a79c <PxMessagingTask+0x790>)
 800a65e:	4a50      	ldr	r2, [pc, #320]	; (800a7a0 <PxMessagingTask+0x794>)
							osDelay(10);
 800a660:	200a      	movs	r0, #10
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a662:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800a664:	2301      	movs	r3, #1
 800a666:	4a4a      	ldr	r2, [pc, #296]	; (800a790 <PxMessagingTask+0x784>)
 800a668:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a66a:	f002 ffcd 	bl	800d608 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	4b4c      	ldr	r3, [pc, #304]	; (800a7a4 <PxMessagingTask+0x798>)
 800a674:	4a4c      	ldr	r2, [pc, #304]	; (800a7a8 <PxMessagingTask+0x79c>)
 800a676:	60da      	str	r2, [r3, #12]
 800a678:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a67c:	46c0      	nop			; (mov r8, r8)
 800a67e:	e7fd      	b.n	800a67c <PxMessagingTask+0x670>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a680:	f003 f8ce 	bl	800d820 <FreeRTOS_CLIGetOutputBuffer>
 800a684:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800a686:	f7f5 fd47 	bl	8000118 <strlen>
 800a68a:	2100      	movs	r1, #0
 800a68c:	0002      	movs	r2, r0
 800a68e:	0030      	movs	r0, r6
 800a690:	f008 fb40 	bl	8012d14 <memset>
 800a694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a696:	18e1      	adds	r1, r4, r3
							if(longMessage){
 800a698:	4b44      	ldr	r3, [pc, #272]	; (800a7ac <PxMessagingTask+0x7a0>)
 800a69a:	4459      	add	r1, fp
 800a69c:	781f      	ldrb	r7, [r3, #0]
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a69e:	4b44      	ldr	r3, [pc, #272]	; (800a7b0 <PxMessagingTask+0x7a4>)
 800a6a0:	8818      	ldrh	r0, [r3, #0]
 800a6a2:	1830      	adds	r0, r6, r0
							if(longMessage){
 800a6a4:	2f00      	cmp	r7, #0
 800a6a6:	d100      	bne.n	800a6aa <PxMessagingTask+0x69e>
 800a6a8:	e299      	b.n	800abde <PxMessagingTask+0xbd2>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a6aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
								longMessageLastPtr +=numOfParams;
 800a6ac:	2700      	movs	r7, #0
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a6ae:	0022      	movs	r2, r4
 800a6b0:	f008 fb27 	bl	8012d02 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a6b4:	46a4      	mov	ip, r4
 800a6b6:	4b3e      	ldr	r3, [pc, #248]	; (800a7b0 <PxMessagingTask+0x7a4>)
 800a6b8:	881a      	ldrh	r2, [r3, #0]
 800a6ba:	4b3d      	ldr	r3, [pc, #244]	; (800a7b0 <PxMessagingTask+0x7a4>)
 800a6bc:	4462      	add	r2, ip
 800a6be:	801a      	strh	r2, [r3, #0]
 800a6c0:	4643      	mov	r3, r8
 800a6c2:	5d5e      	ldrb	r6, [r3, r5]
 800a6c4:	e54c      	b.n	800a160 <PxMessagingTask+0x154>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a6c6:	f003 f8ab 	bl	800d820 <FreeRTOS_CLIGetOutputBuffer>
 800a6ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6cc:	0006      	movs	r6, r0
 800a6ce:	18e1      	adds	r1, r4, r3
							if(dst == BOS_BROADCAST)
 800a6d0:	9b07      	ldr	r3, [sp, #28]
 800a6d2:	4459      	add	r1, fp
 800a6d4:	2bff      	cmp	r3, #255	; 0xff
 800a6d6:	d100      	bne.n	800a6da <PxMessagingTask+0x6ce>
 800a6d8:	e212      	b.n	800ab00 <PxMessagingTask+0xaf4>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a6da:	4829      	ldr	r0, [pc, #164]	; (800a780 <PxMessagingTask+0x774>)
							else if(dst == BOS_MULTICAST)
 800a6dc:	9b07      	ldr	r3, [sp, #28]
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a6de:	306c      	adds	r0, #108	; 0x6c
							else if(dst == BOS_MULTICAST)
 800a6e0:	2bfe      	cmp	r3, #254	; 0xfe
 800a6e2:	d100      	bne.n	800a6e6 <PxMessagingTask+0x6da>
 800a6e4:	e274      	b.n	800abd0 <PxMessagingTask+0xbc4>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a6e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6e8:	f008 fb0b 	bl	8012d02 <memcpy>
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a6ec:	4f24      	ldr	r7, [pc, #144]	; (800a780 <PxMessagingTask+0x774>)
 800a6ee:	376c      	adds	r7, #108	; 0x6c
 800a6f0:	e001      	b.n	800a6f6 <PxMessagingTask+0x6ea>
							} while(xReturned != pdFALSE);
 800a6f2:	2c00      	cmp	r4, #0
 800a6f4:	d028      	beq.n	800a748 <PxMessagingTask+0x73c>
								PcPort =port;
 800a6f6:	4a24      	ldr	r2, [pc, #144]	; (800a788 <PxMessagingTask+0x77c>)
 800a6f8:	990d      	ldr	r1, [sp, #52]	; 0x34
								temp =PcPort;
 800a6fa:	4b23      	ldr	r3, [pc, #140]	; (800a788 <PxMessagingTask+0x77c>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a6fc:	0038      	movs	r0, r7
								temp =PcPort;
 800a6fe:	781b      	ldrb	r3, [r3, #0]
								PcPort =port;
 800a700:	7011      	strb	r1, [r2, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a702:	2299      	movs	r2, #153	; 0x99
 800a704:	0031      	movs	r1, r6
 800a706:	0092      	lsls	r2, r2, #2
								temp =PcPort;
 800a708:	9309      	str	r3, [sp, #36]	; 0x24
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a70a:	f003 f811 	bl	800d730 <FreeRTOS_CLIProcessCommand>
								PcPort =temp;
 800a70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a710:	4a1d      	ldr	r2, [pc, #116]	; (800a788 <PxMessagingTask+0x77c>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a712:	0004      	movs	r4, r0
								PcPort =temp;
 800a714:	7013      	strb	r3, [r2, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800a716:	4b1f      	ldr	r3, [pc, #124]	; (800a794 <PxMessagingTask+0x788>)
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	2b60      	cmp	r3, #96	; 0x60
 800a71c:	d1e9      	bne.n	800a6f2 <PxMessagingTask+0x6e6>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800a71e:	0030      	movs	r0, r6
 800a720:	f7f5 fcfa 	bl	8000118 <strlen>
 800a724:	0031      	movs	r1, r6
 800a726:	0002      	movs	r2, r0
 800a728:	4650      	mov	r0, sl
 800a72a:	f008 faea 	bl	8012d02 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800a72e:	0030      	movs	r0, r6
 800a730:	f7f5 fcf2 	bl	8000118 <strlen>
 800a734:	2118      	movs	r1, #24
 800a736:	b282      	uxth	r2, r0
 800a738:	9804      	ldr	r0, [sp, #16]
 800a73a:	f7ff f98f 	bl	8009a5c <SendMessageToModule>
									osDelay(10);
 800a73e:	200a      	movs	r0, #10
 800a740:	f002 ff62 	bl	800d608 <osDelay>
							} while(xReturned != pdFALSE);
 800a744:	2c00      	cmp	r4, #0
 800a746:	d1d6      	bne.n	800a6f6 <PxMessagingTask+0x6ea>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a748:	480d      	ldr	r0, [pc, #52]	; (800a780 <PxMessagingTask+0x774>)
 800a74a:	2232      	movs	r2, #50	; 0x32
 800a74c:	306c      	adds	r0, #108	; 0x6c
 800a74e:	2100      	movs	r1, #0
 800a750:	f008 fae0 	bl	8012d14 <memset>
 800a754:	4643      	mov	r3, r8
 800a756:	2700      	movs	r7, #0
 800a758:	5d5e      	ldrb	r6, [r3, r5]
 800a75a:	e501      	b.n	800a160 <PxMessagingTask+0x154>
							ClearEEportsDir();
 800a75c:	f7f8 ff4c 	bl	80035f8 <ClearEEportsDir>
							ClearROtopology();
 800a760:	f000 ffa6 	bl	800b6b0 <ClearROtopology>
							osDelay(100);
 800a764:	2064      	movs	r0, #100	; 0x64
 800a766:	f002 ff4f 	bl	800d608 <osDelay>
							indMode =IND_TOPOLOGY;
 800a76a:	2302      	movs	r3, #2
 800a76c:	e4f3      	b.n	800a156 <PxMessagingTask+0x14a>
 800a76e:	46c0      	nop			; (mov r8, r8)
 800a770:	20001164 	.word	0x20001164
 800a774:	20000030 	.word	0x20000030
 800a778:	20000a98 	.word	0x20000a98
 800a77c:	20000dfc 	.word	0x20000dfc
 800a780:	200019d8 	.word	0x200019d8
 800a784:	0801917c 	.word	0x0801917c
 800a788:	20000c28 	.word	0x20000c28
 800a78c:	20000c3c 	.word	0x20000c3c
 800a790:	2000117e 	.word	0x2000117e
 800a794:	20006e28 	.word	0x20006e28
 800a798:	2000114c 	.word	0x2000114c
 800a79c:	20007ff0 	.word	0x20007ff0
 800a7a0:	deadbeef 	.word	0xdeadbeef
 800a7a4:	e000ed00 	.word	0xe000ed00
 800a7a8:	05fa0004 	.word	0x05fa0004
 800a7ac:	20000c4c 	.word	0x20000c4c
 800a7b0:	20000c4a 	.word	0x20000c4a
							temp =cMessage[port - 1][11 + shift];
 800a7b4:	230b      	movs	r3, #11
 800a7b6:	469c      	mov	ip, r3
 800a7b8:	44a4      	add	ip, r4
 800a7ba:	4662      	mov	r2, ip
 800a7bc:	9b06      	ldr	r3, [sp, #24]
 800a7be:	9204      	str	r2, [sp, #16]
 800a7c0:	1b5b      	subs	r3, r3, r5
 800a7c2:	00db      	lsls	r3, r3, #3
 800a7c4:	445b      	add	r3, fp
 800a7c6:	5c9b      	ldrb	r3, [r3, r2]
							if(numOfParams == 15)
 800a7c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7ca:	2a0f      	cmp	r2, #15
 800a7cc:	d100      	bne.n	800a7d0 <PxMessagingTask+0x7c4>
 800a7ce:	e22c      	b.n	800ac2a <PxMessagingTask+0xc1e>
							if(numOfParams == 17)
 800a7d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
							temp =cMessage[port - 1][11 + shift];
 800a7d2:	0019      	movs	r1, r3
							if(numOfParams == 17)
 800a7d4:	2a11      	cmp	r2, #17
 800a7d6:	d101      	bne.n	800a7dc <PxMessagingTask+0x7d0>
 800a7d8:	f000 fd1b 	bl	800b212 <PxMessagingTask+0x1206>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a7dc:	9f06      	ldr	r7, [sp, #24]
 800a7de:	1ca2      	adds	r2, r4, #2
 800a7e0:	9208      	str	r2, [sp, #32]
 800a7e2:	1b7a      	subs	r2, r7, r5
 800a7e4:	00d2      	lsls	r2, r2, #3
 800a7e6:	445a      	add	r2, fp
 800a7e8:	1ce0      	adds	r0, r4, #3
 800a7ea:	5d17      	ldrb	r7, [r2, r4]
 800a7ec:	9009      	str	r0, [sp, #36]	; 0x24
 800a7ee:	5c10      	ldrb	r0, [r2, r0]
 800a7f0:	1c66      	adds	r6, r4, #1
 800a7f2:	063f      	lsls	r7, r7, #24
 800a7f4:	183f      	adds	r7, r7, r0
 800a7f6:	5d90      	ldrb	r0, [r2, r6]
 800a7f8:	9607      	str	r6, [sp, #28]
 800a7fa:	0400      	lsls	r0, r0, #16
 800a7fc:	183f      	adds	r7, r7, r0
 800a7fe:	1ca0      	adds	r0, r4, #2
 800a800:	5c10      	ldrb	r0, [r2, r0]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a802:	1d66      	adds	r6, r4, #5
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a804:	0200      	lsls	r0, r0, #8
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a806:	9612      	str	r6, [sp, #72]	; 0x48
 800a808:	1da6      	adds	r6, r4, #6
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a80a:	183f      	adds	r7, r7, r0
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a80c:	9613      	str	r6, [sp, #76]	; 0x4c
 800a80e:	1d20      	adds	r0, r4, #4
 800a810:	1de6      	adds	r6, r4, #7
 800a812:	9011      	str	r0, [sp, #68]	; 0x44
 800a814:	9614      	str	r6, [sp, #80]	; 0x50
 800a816:	5c16      	ldrb	r6, [r2, r0]
 800a818:	1d60      	adds	r0, r4, #5
 800a81a:	5c10      	ldrb	r0, [r2, r0]
 800a81c:	0636      	lsls	r6, r6, #24
 800a81e:	0400      	lsls	r0, r0, #16
 800a820:	1836      	adds	r6, r6, r0
 800a822:	1de0      	adds	r0, r4, #7
 800a824:	5c10      	ldrb	r0, [r2, r0]
 800a826:	1836      	adds	r6, r6, r0
 800a828:	1da0      	adds	r0, r4, #6
 800a82a:	5c10      	ldrb	r0, [r2, r0]
 800a82c:	0200      	lsls	r0, r0, #8
 800a82e:	1836      	adds	r6, r6, r0
 800a830:	2009      	movs	r0, #9
 800a832:	4684      	mov	ip, r0
 800a834:	44a4      	add	ip, r4
 800a836:	4660      	mov	r0, ip
 800a838:	9015      	str	r0, [sp, #84]	; 0x54
							if(temp == false){
 800a83a:	2900      	cmp	r1, #0
 800a83c:	d001      	beq.n	800a842 <PxMessagingTask+0x836>
 800a83e:	f000 fc8f 	bl	800b160 <PxMessagingTask+0x1154>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800a842:	5c12      	ldrb	r2, [r2, r0]
 800a844:	2a00      	cmp	r2, #0
 800a846:	d00e      	beq.n	800a866 <PxMessagingTask+0x85a>
 800a848:	9905      	ldr	r1, [sp, #20]
 800a84a:	1908      	adds	r0, r1, r4
 800a84c:	7a81      	ldrb	r1, [r0, #10]
 800a84e:	2900      	cmp	r1, #0
 800a850:	d009      	beq.n	800a866 <PxMessagingTask+0x85a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800a852:	0013      	movs	r3, r2
 800a854:	7a00      	ldrb	r0, [r0, #8]
 800a856:	0032      	movs	r2, r6
 800a858:	9100      	str	r1, [sp, #0]
 800a85a:	0039      	movs	r1, r7
 800a85c:	f7fe fdaa 	bl	80093b4 <SetupDMAStreams>
 800a860:	9b05      	ldr	r3, [sp, #20]
 800a862:	9a04      	ldr	r2, [sp, #16]
 800a864:	5c9b      	ldrb	r3, [r3, r2]
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00a      	beq.n	800a880 <PxMessagingTask+0x874>
 800a86a:	9a05      	ldr	r2, [sp, #20]
 800a86c:	1911      	adds	r1, r2, r4
 800a86e:	7b0a      	ldrb	r2, [r1, #12]
 800a870:	2a00      	cmp	r2, #0
 800a872:	d005      	beq.n	800a880 <PxMessagingTask+0x874>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800a874:	7a08      	ldrb	r0, [r1, #8]
 800a876:	9200      	str	r2, [sp, #0]
 800a878:	0039      	movs	r1, r7
 800a87a:	0032      	movs	r2, r6
 800a87c:	f7fe fd9a 	bl	80093b4 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800a880:	9b06      	ldr	r3, [sp, #24]
 800a882:	1b5b      	subs	r3, r3, r5
 800a884:	00db      	lsls	r3, r3, #3
 800a886:	445b      	add	r3, fp
 800a888:	191b      	adds	r3, r3, r4
 800a88a:	7b5b      	ldrb	r3, [r3, #13]
 800a88c:	9309      	str	r3, [sp, #36]	; 0x24
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d100      	bne.n	800a894 <PxMessagingTask+0x888>
 800a892:	e462      	b.n	800a15a <PxMessagingTask+0x14e>
 800a894:	9b05      	ldr	r3, [sp, #20]
 800a896:	469c      	mov	ip, r3
 800a898:	4464      	add	r4, ip
 800a89a:	7ba3      	ldrb	r3, [r4, #14]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d000      	beq.n	800a8a2 <PxMessagingTask+0x896>
 800a8a0:	e1c7      	b.n	800ac32 <PxMessagingTask+0xc26>
 800a8a2:	4642      	mov	r2, r8
 800a8a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8a6:	5d56      	ldrb	r6, [r2, r5]
 800a8a8:	001f      	movs	r7, r3
 800a8aa:	e459      	b.n	800a160 <PxMessagingTask+0x154>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800a8ac:	9b06      	ldr	r3, [sp, #24]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	1b5e      	subs	r6, r3, r5
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	00f6      	lsls	r6, r6, #3
 800a8b6:	445e      	add	r6, fp
 800a8b8:	5d30      	ldrb	r0, [r6, r4]
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	3319      	adds	r3, #25
 800a8c0:	f7fe fe6c 	bl	800959c <SendMessageFromPort>
							osDelay(100);
 800a8c4:	2064      	movs	r0, #100	; 0x64
 800a8c6:	f002 fe9f 	bl	800d608 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800a8ca:	4ae8      	ldr	r2, [pc, #928]	; (800ac6c <PxMessagingTask+0xc60>)
 800a8cc:	5d33      	ldrb	r3, [r6, r4]
 800a8ce:	7811      	ldrb	r1, [r2, #0]
 800a8d0:	9804      	ldr	r0, [sp, #16]
 800a8d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8d4:	f7f9 f934 	bl	8003b40 <remoteBootloaderUpdate>
 800a8d8:	4643      	mov	r3, r8
 800a8da:	2700      	movs	r7, #0
 800a8dc:	5d5e      	ldrb	r6, [r3, r5]
 800a8de:	e43f      	b.n	800a160 <PxMessagingTask+0x154>
							responseStatus =BOS_OK; // Initialize response
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	4ae3      	ldr	r2, [pc, #908]	; (800ac70 <PxMessagingTask+0xc64>)
 800a8e4:	7013      	strb	r3, [r2, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800a8e6:	9b06      	ldr	r3, [sp, #24]
 800a8e8:	1b5b      	subs	r3, r3, r5
 800a8ea:	00db      	lsls	r3, r3, #3
 800a8ec:	445b      	add	r3, fp
 800a8ee:	5d1f      	ldrb	r7, [r3, r4]
 800a8f0:	2f00      	cmp	r7, #0
 800a8f2:	d100      	bne.n	800a8f6 <PxMessagingTask+0x8ea>
 800a8f4:	e2ad      	b.n	800ae52 <PxMessagingTask+0xe46>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800a8f6:	2f1e      	cmp	r7, #30
 800a8f8:	d900      	bls.n	800a8fc <PxMessagingTask+0x8f0>
 800a8fa:	e2a6      	b.n	800ae4a <PxMessagingTask+0xe3e>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a8fc:	2280      	movs	r2, #128	; 0x80
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a8fe:	9905      	ldr	r1, [sp, #20]
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a900:	0592      	lsls	r2, r2, #22
 800a902:	4694      	mov	ip, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a904:	1c62      	adds	r2, r4, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a906:	1e7e      	subs	r6, r7, #1
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a908:	9207      	str	r2, [sp, #28]
 800a90a:	5c8f      	ldrb	r7, [r1, r2]
 800a90c:	220f      	movs	r2, #15
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a90e:	4bd9      	ldr	r3, [pc, #868]	; (800ac74 <PxMessagingTask+0xc68>)
 800a910:	00b6      	lsls	r6, r6, #2
 800a912:	599b      	ldr	r3, [r3, r6]
 800a914:	0c18      	lsrs	r0, r3, #16
 800a916:	4013      	ands	r3, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a918:	1e7a      	subs	r2, r7, #1
 800a91a:	b2d2      	uxtb	r2, r2
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a91c:	4460      	add	r0, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a91e:	2a07      	cmp	r2, #7
 800a920:	d900      	bls.n	800a924 <PxMessagingTask+0x918>
 800a922:	e1dc      	b.n	800acde <PxMessagingTask+0xcd2>
 800a924:	49d4      	ldr	r1, [pc, #848]	; (800ac78 <PxMessagingTask+0xc6c>)
 800a926:	0092      	lsls	r2, r2, #2
 800a928:	588a      	ldr	r2, [r1, r2]
 800a92a:	4697      	mov	pc, r2
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800a92c:	2202      	movs	r2, #2
 800a92e:	4252      	negs	r2, r2
 800a930:	17d3      	asrs	r3, r2, #31
 800a932:	4649      	mov	r1, r9
 800a934:	6808      	ldr	r0, [r1, #0]
 800a936:	6849      	ldr	r1, [r1, #4]
 800a938:	1812      	adds	r2, r2, r0
 800a93a:	414b      	adcs	r3, r1
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <PxMessagingTask+0x938>
 800a940:	f000 fc6f 	bl	800b222 <PxMessagingTask+0x1216>
 800a944:	4643      	mov	r3, r8
 800a946:	5d5e      	ldrb	r6, [r3, r5]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800a948:	4bc9      	ldr	r3, [pc, #804]	; (800ac70 <PxMessagingTask+0xc64>)
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	2b10      	cmp	r3, #16
 800a94e:	d101      	bne.n	800a954 <PxMessagingTask+0x948>
 800a950:	f000 fc64 	bl	800b21c <PxMessagingTask+0x1210>
								responseStatus =BOS_OK;
 800a954:	2300      	movs	r3, #0
 800a956:	4ac6      	ldr	r2, [pc, #792]	; (800ac70 <PxMessagingTask+0xc64>)
 800a958:	2700      	movs	r7, #0
 800a95a:	7013      	strb	r3, [r2, #0]
 800a95c:	f7ff fc00 	bl	800a160 <PxMessagingTask+0x154>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800a960:	9b06      	ldr	r3, [sp, #24]
 800a962:	1b5b      	subs	r3, r3, r5
 800a964:	00db      	lsls	r3, r3, #3
 800a966:	445b      	add	r3, fp
 800a968:	5d1b      	ldrb	r3, [r3, r4]
 800a96a:	e5a4      	b.n	800a4b6 <PxMessagingTask+0x4aa>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a96c:	9b06      	ldr	r3, [sp, #24]
 800a96e:	49bf      	ldr	r1, [pc, #764]	; (800ac6c <PxMessagingTask+0xc60>)
 800a970:	1b58      	subs	r0, r3, r5
 800a972:	00c0      	lsls	r0, r0, #3
 800a974:	7809      	ldrb	r1, [r1, #0]
 800a976:	4458      	add	r0, fp
 800a978:	1902      	adds	r2, r0, r4
 800a97a:	468c      	mov	ip, r1
 800a97c:	7a51      	ldrb	r1, [r2, #9]
 800a97e:	7ad7      	ldrb	r7, [r2, #11]
 800a980:	9104      	str	r1, [sp, #16]
 800a982:	7b11      	ldrb	r1, [r2, #12]
 800a984:	7a93      	ldrb	r3, [r2, #10]
 800a986:	000e      	movs	r6, r1
 800a988:	1e71      	subs	r1, r6, #1
 800a98a:	418e      	sbcs	r6, r1
 800a98c:	9603      	str	r6, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a98e:	7916      	ldrb	r6, [r2, #4]
 800a990:	7951      	ldrb	r1, [r2, #5]
 800a992:	0636      	lsls	r6, r6, #24
 800a994:	0409      	lsls	r1, r1, #16
 800a996:	1871      	adds	r1, r6, r1
 800a998:	79d6      	ldrb	r6, [r2, #7]
 800a99a:	1989      	adds	r1, r1, r6
 800a99c:	7996      	ldrb	r6, [r2, #6]
 800a99e:	0236      	lsls	r6, r6, #8
 800a9a0:	1989      	adds	r1, r1, r6
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a9a2:	9102      	str	r1, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a9a4:	5d01      	ldrb	r1, [r0, r4]
 800a9a6:	78d0      	ldrb	r0, [r2, #3]
 800a9a8:	0609      	lsls	r1, r1, #24
 800a9aa:	1809      	adds	r1, r1, r0
 800a9ac:	7850      	ldrb	r0, [r2, #1]
 800a9ae:	0400      	lsls	r0, r0, #16
 800a9b0:	1809      	adds	r1, r1, r0
 800a9b2:	7890      	ldrb	r0, [r2, #2]
 800a9b4:	0200      	lsls	r0, r0, #8
 800a9b6:	1809      	adds	r1, r1, r0
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a9b8:	9101      	str	r1, [sp, #4]
 800a9ba:	7a12      	ldrb	r2, [r2, #8]
 800a9bc:	4661      	mov	r1, ip
 800a9be:	9200      	str	r2, [sp, #0]
 800a9c0:	9804      	ldr	r0, [sp, #16]
 800a9c2:	003a      	movs	r2, r7
 800a9c4:	f7ff f86e 	bl	8009aa4 <StartScastDMAStream>
 800a9c8:	f7ff fbc7 	bl	800a15a <PxMessagingTask+0x14e>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a9cc:	4ba7      	ldr	r3, [pc, #668]	; (800ac6c <PxMessagingTask+0xc60>)
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d033      	beq.n	800aa3c <PxMessagingTask+0xa30>
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d02e      	beq.n	800aa36 <PxMessagingTask+0xa2a>
				ForwardReceivedMessage(port);
 800a9d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a9da:	f7ff f81f 	bl	8009a1c <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 800a9de:	4ba7      	ldr	r3, [pc, #668]	; (800ac7c <PxMessagingTask+0xc70>)
 800a9e0:	785b      	ldrb	r3, [r3, #1]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d002      	beq.n	800a9ec <PxMessagingTask+0x9e0>
					indMode =IND_SHORT_BLINK;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	4aa5      	ldr	r2, [pc, #660]	; (800ac80 <PxMessagingTask+0xc74>)
 800a9ea:	7013      	strb	r3, [r2, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 800a9ec:	9b08      	ldr	r3, [sp, #32]
 800a9ee:	2b19      	cmp	r3, #25
 800a9f0:	d071      	beq.n	800aad6 <PxMessagingTask+0xaca>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 800a9f2:	9b08      	ldr	r3, [sp, #32]
 800a9f4:	2b1a      	cmp	r3, #26
 800a9f6:	d000      	beq.n	800a9fa <PxMessagingTask+0x9ee>
 800a9f8:	e435      	b.n	800a266 <PxMessagingTask+0x25a>
					Delay_ms(100);
 800a9fa:	2064      	movs	r0, #100	; 0x64
 800a9fc:	f004 fd88 	bl	800f510 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 800aa00:	9b06      	ldr	r3, [sp, #24]
 800aa02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa04:	1b5b      	subs	r3, r3, r5
 800aa06:	00db      	lsls	r3, r3, #3
 800aa08:	445b      	add	r3, fp
 800aa0a:	5c9b      	ldrb	r3, [r3, r2]
 800aa0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa0e:	9907      	ldr	r1, [sp, #28]
 800aa10:	9804      	ldr	r0, [sp, #16]
 800aa12:	f7f9 f895 	bl	8003b40 <remoteBootloaderUpdate>
 800aa16:	e426      	b.n	800a266 <PxMessagingTask+0x25a>
				longMessage =1;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	4a9a      	ldr	r2, [pc, #616]	; (800ac84 <PxMessagingTask+0xc78>)
 800aa1c:	7013      	strb	r3, [r2, #0]
 800aa1e:	f7ff fb35 	bl	800a08c <PxMessagingTask+0x80>
				BOSMessaging.Acknowledgment =false;
 800aa22:	2300      	movs	r3, #0
 800aa24:	4a95      	ldr	r2, [pc, #596]	; (800ac7c <PxMessagingTask+0xc70>)
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800aa26:	212c      	movs	r1, #44	; 0x2c
				BOSMessaging.Acknowledgment =false;
 800aa28:	7113      	strb	r3, [r2, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800aa2a:	9804      	ldr	r0, [sp, #16]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f7ff f815 	bl	8009a5c <SendMessageToModule>
 800aa32:	f7ff fb56 	bl	800a0e2 <PxMessagingTask+0xd6>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800aa36:	9b08      	ldr	r3, [sp, #32]
 800aa38:	2b10      	cmp	r3, #16
 800aa3a:	d1cd      	bne.n	800a9d8 <PxMessagingTask+0x9cc>
 800aa3c:	4643      	mov	r3, r8
 800aa3e:	5d5e      	ldrb	r6, [r3, r5]
				if(result == BOS_OK){
 800aa40:	2f00      	cmp	r7, #0
 800aa42:	d101      	bne.n	800aa48 <PxMessagingTask+0xa3c>
 800aa44:	f7ff fb75 	bl	800a132 <PxMessagingTask+0x126>
				}
 800aa48:	f7ff fb8a 	bl	800a160 <PxMessagingTask+0x154>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800aa4c:	9b07      	ldr	r3, [sp, #28]
 800aa4e:	2bfe      	cmp	r3, #254	; 0xfe
 800aa50:	d1f6      	bne.n	800aa40 <PxMessagingTask+0xa34>
 800aa52:	9b06      	ldr	r3, [sp, #24]
 800aa54:	4a8c      	ldr	r2, [pc, #560]	; (800ac88 <PxMessagingTask+0xc7c>)
 800aa56:	1b5c      	subs	r4, r3, r5
 800aa58:	00e4      	lsls	r4, r4, #3
 800aa5a:	445c      	add	r4, fp
 800aa5c:	19a3      	adds	r3, r4, r6
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	7e12      	ldrb	r2, [r2, #24]
					result =BOS_ERR_MSG_Reflection;
 800aa64:	2703      	movs	r7, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d101      	bne.n	800aa6e <PxMessagingTask+0xa62>
 800aa6a:	f7ff fb79 	bl	800a160 <PxMessagingTask+0x154>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800aa6e:	4a86      	ldr	r2, [pc, #536]	; (800ac88 <PxMessagingTask+0xc7c>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800aa70:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800aa72:	7613      	strb	r3, [r2, #24]
 800aa74:	4a85      	ldr	r2, [pc, #532]	; (800ac8c <PxMessagingTask+0xc80>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800aa76:	20fe      	movs	r0, #254	; 0xfe
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800aa78:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800aa7a:	f7fe ff8b 	bl	8009994 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800aa7e:	4643      	mov	r3, r8
 800aa80:	2200      	movs	r2, #0
 800aa82:	5d5e      	ldrb	r6, [r3, r5]
 800aa84:	19a3      	adds	r3, r4, r6
 800aa86:	3b01      	subs	r3, #1
 800aa88:	701a      	strb	r2, [r3, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800aa8a:	1eb0      	subs	r0, r6, #2
 800aa8c:	5c27      	ldrb	r7, [r4, r0]
 800aa8e:	9709      	str	r7, [sp, #36]	; 0x24
					for(i =0; i < temp; i++){
 800aa90:	2f00      	cmp	r7, #0
 800aa92:	d01d      	beq.n	800aad0 <PxMessagingTask+0xac4>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800aa94:	4b75      	ldr	r3, [pc, #468]	; (800ac6c <PxMessagingTask+0xc60>)
 800aa96:	1bc0      	subs	r0, r0, r7
 800aa98:	7819      	ldrb	r1, [r3, #0]
 800aa9a:	5c23      	ldrb	r3, [r4, r0]
 800aa9c:	428b      	cmp	r3, r1
 800aa9e:	d101      	bne.n	800aaa4 <PxMessagingTask+0xa98>
 800aaa0:	f7ff fb47 	bl	800a132 <PxMessagingTask+0x126>
 800aaa4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800aaa6:	465a      	mov	r2, fp
 800aaa8:	46a4      	mov	ip, r4
 800aaaa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aaac:	3201      	adds	r2, #1
 800aaae:	1e7c      	subs	r4, r7, #1
 800aab0:	4462      	add	r2, ip
 800aab2:	b2e4      	uxtb	r4, r4
 800aab4:	181b      	adds	r3, r3, r0
 800aab6:	1912      	adds	r2, r2, r4
 800aab8:	445b      	add	r3, fp
 800aaba:	1812      	adds	r2, r2, r0
 800aabc:	e006      	b.n	800aacc <PxMessagingTask+0xac0>
 800aabe:	3301      	adds	r3, #1
 800aac0:	1e58      	subs	r0, r3, #1
 800aac2:	7800      	ldrb	r0, [r0, #0]
 800aac4:	4288      	cmp	r0, r1
 800aac6:	d101      	bne.n	800aacc <PxMessagingTask+0xac0>
 800aac8:	f7ff fb33 	bl	800a132 <PxMessagingTask+0x126>
					for(i =0; i < temp; i++){
 800aacc:	429a      	cmp	r2, r3
 800aace:	d1f6      	bne.n	800aabe <PxMessagingTask+0xab2>
					result =BOS_ERR_WrongID;
 800aad0:	2766      	movs	r7, #102	; 0x66
 800aad2:	f7ff fb45 	bl	800a160 <PxMessagingTask+0x154>
					Delay_ms(100);
 800aad6:	2064      	movs	r0, #100	; 0x64
 800aad8:	f004 fd1a 	bl	800f510 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 800aadc:	2300      	movs	r3, #0
 800aade:	e795      	b.n	800aa0c <PxMessagingTask+0xa00>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800aae0:	9a04      	ldr	r2, [sp, #16]
 800aae2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aae4:	9400      	str	r4, [sp, #0]
 800aae6:	9b07      	ldr	r3, [sp, #28]
 800aae8:	9808      	ldr	r0, [sp, #32]
 800aaea:	f000 fe0f 	bl	800b70c <Module_MessagingTask>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800aaee:	2200      	movs	r2, #0
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800aaf0:	0007      	movs	r7, r0
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800aaf2:	2100      	movs	r1, #0
		if(result == BOS_ERR_UnknownMessage){
 800aaf4:	2801      	cmp	r0, #1
 800aaf6:	d101      	bne.n	800aafc <PxMessagingTask+0xaf0>
 800aaf8:	f7ff fbf7 	bl	800a2ea <PxMessagingTask+0x2de>
 800aafc:	f7ff fbb3 	bl	800a266 <PxMessagingTask+0x25a>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800ab00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab02:	4861      	ldr	r0, [pc, #388]	; (800ac88 <PxMessagingTask+0xc7c>)
 800ab04:	3a01      	subs	r2, #1
 800ab06:	306c      	adds	r0, #108	; 0x6c
 800ab08:	f008 f8fb 	bl	8012d02 <memcpy>
 800ab0c:	e5ee      	b.n	800a6ec <PxMessagingTask+0x6e0>
										messageParams[0] =*(__IO int8_t* )temp32;
 800ab0e:	4652      	mov	r2, sl
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	7013      	strb	r3, [r2, #0]
										SendMessageToModule(src,
 800ab14:	2201      	movs	r2, #1
											SendMessageToModule(src,
 800ab16:	211f      	movs	r1, #31
 800ab18:	f7ff fbe7 	bl	800a2ea <PxMessagingTask+0x2de>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800ab1c:	4651      	mov	r1, sl
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	1212      	asrs	r2, r2, #8
 800ab26:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	1412      	asrs	r2, r2, #16
 800ab2c:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800ab2e:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 800ab30:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800ab32:	161b      	asrs	r3, r3, #24
 800ab34:	70cb      	strb	r3, [r1, #3]
 800ab36:	e7ee      	b.n	800ab16 <PxMessagingTask+0xb0a>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800ab38:	4651      	mov	r1, sl
 800ab3a:	781a      	ldrb	r2, [r3, #0]
 800ab3c:	700a      	strb	r2, [r1, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800ab3e:	785a      	ldrb	r2, [r3, #1]
 800ab40:	704a      	strb	r2, [r1, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800ab42:	789a      	ldrb	r2, [r3, #2]
 800ab44:	708a      	strb	r2, [r1, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800ab46:	78db      	ldrb	r3, [r3, #3]
										SendMessageToModule(src,
 800ab48:	2208      	movs	r2, #8
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800ab4a:	70cb      	strb	r3, [r1, #3]
 800ab4c:	e7e3      	b.n	800ab16 <PxMessagingTask+0xb0a>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	d100      	bne.n	800ab54 <PxMessagingTask+0xb48>
 800ab52:	e3ad      	b.n	800b2b0 <PxMessagingTask+0x12a4>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800ab54:	d801      	bhi.n	800ab5a <PxMessagingTask+0xb4e>
 800ab56:	f7ff fb00 	bl	800a15a <PxMessagingTask+0x14e>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800ab5a:	3b04      	subs	r3, #4
 800ab5c:	4a45      	ldr	r2, [pc, #276]	; (800ac74 <PxMessagingTask+0xc68>)
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	270f      	movs	r7, #15
 800ab62:	58d2      	ldr	r2, [r2, r3]
 800ab64:	4653      	mov	r3, sl
 800ab66:	4017      	ands	r7, r2
 800ab68:	701f      	strb	r7, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800ab6a:	d100      	bne.n	800ab6e <PxMessagingTask+0xb62>
 800ab6c:	e397      	b.n	800b29e <PxMessagingTask+0x1292>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800ab6e:	2380      	movs	r3, #128	; 0x80
									switch(messageParams[0]) // requested format
 800ab70:	3f01      	subs	r7, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800ab72:	0c12      	lsrs	r2, r2, #16
 800ab74:	059b      	lsls	r3, r3, #22
									switch(messageParams[0]) // requested format
 800ab76:	b2ff      	uxtb	r7, r7
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800ab78:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 800ab7a:	2f07      	cmp	r7, #7
 800ab7c:	d901      	bls.n	800ab82 <PxMessagingTask+0xb76>
 800ab7e:	f7ff faec 	bl	800a15a <PxMessagingTask+0x14e>
 800ab82:	4943      	ldr	r1, [pc, #268]	; (800ac90 <PxMessagingTask+0xc84>)
 800ab84:	00bf      	lsls	r7, r7, #2
 800ab86:	59c9      	ldr	r1, [r1, r7]
 800ab88:	468f      	mov	pc, r1
								for(p =1; p <= NumOfPorts; p++){
 800ab8a:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 800ab8c:	0020      	movs	r0, r4
								for(p =1; p <= NumOfPorts; p++){
 800ab8e:	3401      	adds	r4, #1
									UpdateBaudrate(p,temp32);
 800ab90:	0039      	movs	r1, r7
								for(p =1; p <= NumOfPorts; p++){
 800ab92:	b2e4      	uxtb	r4, r4
									UpdateBaudrate(p,temp32);
 800ab94:	f002 fc62 	bl	800d45c <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800ab98:	2c07      	cmp	r4, #7
 800ab9a:	d1f7      	bne.n	800ab8c <PxMessagingTask+0xb80>
 800ab9c:	e050      	b.n	800ac40 <PxMessagingTask+0xc34>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d001      	beq.n	800aba6 <PxMessagingTask+0xb9a>
 800aba2:	f7ff fada 	bl	800a15a <PxMessagingTask+0x14e>
								messageParams[0] =0; /* change own ID */
 800aba6:	2700      	movs	r7, #0
 800aba8:	4653      	mov	r3, sl
 800abaa:	701f      	strb	r7, [r3, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800abac:	9b05      	ldr	r3, [sp, #20]
 800abae:	4652      	mov	r2, sl
 800abb0:	469c      	mov	ip, r3
 800abb2:	4464      	add	r4, ip
 800abb4:	7863      	ldrb	r3, [r4, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800abb6:	78a0      	ldrb	r0, [r4, #2]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800abb8:	7053      	strb	r3, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800abba:	2303      	movs	r3, #3
 800abbc:	003a      	movs	r2, r7
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	0039      	movs	r1, r7
 800abc2:	330d      	adds	r3, #13
 800abc4:	f7fe fcea 	bl	800959c <SendMessageFromPort>
 800abc8:	4643      	mov	r3, r8
 800abca:	5d5e      	ldrb	r6, [r3, r5]
 800abcc:	f7ff fac8 	bl	800a160 <PxMessagingTask+0x154>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800abd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abd4:	1a9a      	subs	r2, r3, r2
 800abd6:	3a02      	subs	r2, #2
 800abd8:	f008 f893 	bl	8012d02 <memcpy>
 800abdc:	e586      	b.n	800a6ec <PxMessagingTask+0x6e0>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800abde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abe0:	f008 f88f 	bl	8012d02 <memcpy>
								longMessageLastPtr =0;
 800abe4:	4b2b      	ldr	r3, [pc, #172]	; (800ac94 <PxMessagingTask+0xc88>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800abe6:	482c      	ldr	r0, [pc, #176]	; (800ac98 <PxMessagingTask+0xc8c>)
								longMessageLastPtr =0;
 800abe8:	801f      	strh	r7, [r3, #0]
								responseStatus =BOS_OK;
 800abea:	4b21      	ldr	r3, [pc, #132]	; (800ac70 <PxMessagingTask+0xc64>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800abec:	6800      	ldr	r0, [r0, #0]
								responseStatus =BOS_OK;
 800abee:	701f      	strb	r7, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800abf0:	2300      	movs	r3, #0
 800abf2:	001a      	movs	r2, r3
 800abf4:	0019      	movs	r1, r3
 800abf6:	f004 f8b9 	bl	800ed6c <xTaskGenericNotify>
 800abfa:	4643      	mov	r3, r8
 800abfc:	2700      	movs	r7, #0
 800abfe:	5d5e      	ldrb	r6, [r3, r5]
 800ac00:	f7ff faae 	bl	800a160 <PxMessagingTask+0x154>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800ac04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac06:	f008 f87c 	bl	8012d02 <memcpy>
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800ac0a:	2116      	movs	r1, #22
 800ac0c:	0038      	movs	r0, r7
 800ac0e:	f7f5 fa9f 	bl	8000150 <__udivsi3>
 800ac12:	4b22      	ldr	r3, [pc, #136]	; (800ac9c <PxMessagingTask+0xc90>)
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800ac14:	003a      	movs	r2, r7
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800ac16:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800ac18:	4921      	ldr	r1, [pc, #132]	; (800aca0 <PxMessagingTask+0xc94>)
 800ac1a:	4822      	ldr	r0, [pc, #136]	; (800aca4 <PxMessagingTask+0xc98>)
 800ac1c:	f008 f871 	bl	8012d02 <memcpy>
								longMessageLastPtr =0;
 800ac20:	4b1c      	ldr	r3, [pc, #112]	; (800ac94 <PxMessagingTask+0xc88>)
 800ac22:	2700      	movs	r7, #0
 800ac24:	801c      	strh	r4, [r3, #0]
 800ac26:	f7ff fa9b 	bl	800a160 <PxMessagingTask+0x154>
								temp =cMessage[port - 1][13 + shift];
 800ac2a:	9a05      	ldr	r2, [sp, #20]
 800ac2c:	1912      	adds	r2, r2, r4
 800ac2e:	7b51      	ldrb	r1, [r2, #13]
 800ac30:	e5d4      	b.n	800a7dc <PxMessagingTask+0x7d0>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800ac32:	7a20      	ldrb	r0, [r4, #8]
 800ac34:	0032      	movs	r2, r6
 800ac36:	9300      	str	r3, [sp, #0]
 800ac38:	0039      	movs	r1, r7
 800ac3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac3c:	f7fe fbba 	bl	80093b4 <SetupDMAStreams>
 800ac40:	4643      	mov	r3, r8
 800ac42:	5d5e      	ldrb	r6, [r3, r5]
 800ac44:	2300      	movs	r3, #0
 800ac46:	9309      	str	r3, [sp, #36]	; 0x24
 800ac48:	001f      	movs	r7, r3
 800ac4a:	f7ff fa89 	bl	800a160 <PxMessagingTask+0x154>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800ac4e:	4651      	mov	r1, sl
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	0a12      	lsrs	r2, r2, #8
 800ac58:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	0c12      	lsrs	r2, r2, #16
 800ac5e:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800ac60:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 800ac62:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800ac64:	0e1b      	lsrs	r3, r3, #24
 800ac66:	70cb      	strb	r3, [r1, #3]
 800ac68:	e755      	b.n	800ab16 <PxMessagingTask+0xb0a>
 800ac6a:	46c0      	nop			; (mov r8, r8)
 800ac6c:	20000a98 	.word	0x20000a98
 800ac70:	20000c3c 	.word	0x20000c3c
 800ac74:	20006e30 	.word	0x20006e30
 800ac78:	08017a60 	.word	0x08017a60
 800ac7c:	20006e28 	.word	0x20006e28
 800ac80:	2000117e 	.word	0x2000117e
 800ac84:	20000c4c 	.word	0x20000c4c
 800ac88:	200019d8 	.word	0x200019d8
 800ac8c:	20000c48 	.word	0x20000c48
 800ac90:	08017a80 	.word	0x08017a80
 800ac94:	20000c4a 	.word	0x20000c4a
 800ac98:	2000181c 	.word	0x2000181c
 800ac9c:	20000008 	.word	0x20000008
 800aca0:	20001ab0 	.word	0x20001ab0
 800aca4:	20000f0c 	.word	0x20000f0c
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800aca8:	4651      	mov	r1, sl
 800acaa:	881a      	ldrh	r2, [r3, #0]
 800acac:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800acae:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 800acb0:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800acb2:	b21b      	sxth	r3, r3
 800acb4:	121b      	asrs	r3, r3, #8
 800acb6:	704b      	strb	r3, [r1, #1]
 800acb8:	e72d      	b.n	800ab16 <PxMessagingTask+0xb0a>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800acba:	4651      	mov	r1, sl
 800acbc:	881a      	ldrh	r2, [r3, #0]
 800acbe:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800acc0:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 800acc2:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800acc4:	0a1b      	lsrs	r3, r3, #8
 800acc6:	704b      	strb	r3, [r1, #1]
 800acc8:	e725      	b.n	800ab16 <PxMessagingTask+0xb0a>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800acca:	2b00      	cmp	r3, #0
 800accc:	d02c      	beq.n	800ad28 <PxMessagingTask+0xd1c>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800acce:	9b05      	ldr	r3, [sp, #20]
 800acd0:	1919      	adds	r1, r3, r4
 800acd2:	78ca      	ldrb	r2, [r1, #3]
 800acd4:	788b      	ldrb	r3, [r1, #2]
 800acd6:	0212      	lsls	r2, r2, #8
 800acd8:	189b      	adds	r3, r3, r2
 800acda:	b21b      	sxth	r3, r3
 800acdc:	8003      	strh	r3, [r0, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800acde:	9905      	ldr	r1, [sp, #20]
 800ace0:	9807      	ldr	r0, [sp, #28]
 800ace2:	5d0b      	ldrb	r3, [r1, r4]
 800ace4:	5c09      	ldrb	r1, [r1, r0]
 800ace6:	200f      	movs	r0, #15
 800ace8:	3b01      	subs	r3, #1
 800acea:	4ad8      	ldr	r2, [pc, #864]	; (800b04c <PxMessagingTask+0x1040>)
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	58d2      	ldr	r2, [r2, r3]
 800acf0:	4010      	ands	r0, r2
 800acf2:	4288      	cmp	r0, r1
 800acf4:	d008      	beq.n	800ad08 <PxMessagingTask+0xcfc>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800acf6:	48d6      	ldr	r0, [pc, #856]	; (800b050 <PxMessagingTask+0x1044>)
 800acf8:	4684      	mov	ip, r0
 800acfa:	4461      	add	r1, ip
 800acfc:	400a      	ands	r2, r1
 800acfe:	49d3      	ldr	r1, [pc, #844]	; (800b04c <PxMessagingTask+0x1040>)
 800ad00:	50ca      	str	r2, [r1, r3]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800ad02:	2314      	movs	r3, #20
 800ad04:	4ad3      	ldr	r2, [pc, #844]	; (800b054 <PxMessagingTask+0x1048>)
 800ad06:	7013      	strb	r3, [r2, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 800ad08:	2240      	movs	r2, #64	; 0x40
 800ad0a:	4bd3      	ldr	r3, [pc, #844]	; (800b058 <PxMessagingTask+0x104c>)
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	4393      	bics	r3, r2
 800ad10:	2b20      	cmp	r3, #32
 800ad12:	d001      	beq.n	800ad18 <PxMessagingTask+0xd0c>
 800ad14:	f7ff fa21 	bl	800a15a <PxMessagingTask+0x14e>
								messageParams[0] =responseStatus;
 800ad18:	4652      	mov	r2, sl
 800ad1a:	4bce      	ldr	r3, [pc, #824]	; (800b054 <PxMessagingTask+0x1048>)
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800ad1c:	2121      	movs	r1, #33	; 0x21
								messageParams[0] =responseStatus;
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	7013      	strb	r3, [r2, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800ad22:	2201      	movs	r2, #1
 800ad24:	f7ff fae1 	bl	800a2ea <PxMessagingTask+0x2de>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800ad28:	2002      	movs	r0, #2
 800ad2a:	f007 fd9d 	bl	8012868 <malloc>
												if(temp32 != 0){
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d01e      	beq.n	800ad70 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad32:	0403      	lsls	r3, r0, #16
 800ad34:	4ac5      	ldr	r2, [pc, #788]	; (800b04c <PxMessagingTask+0x1040>)
 800ad36:	3304      	adds	r3, #4
 800ad38:	5193      	str	r3, [r2, r6]
 800ad3a:	e7c8      	b.n	800acce <PxMessagingTask+0xcc2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d025      	beq.n	800ad8c <PxMessagingTask+0xd80>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800ad40:	9b05      	ldr	r3, [sp, #20]
 800ad42:	191b      	adds	r3, r3, r4
 800ad44:	789b      	ldrb	r3, [r3, #2]
 800ad46:	b25b      	sxtb	r3, r3
 800ad48:	7003      	strb	r3, [r0, #0]
 800ad4a:	e7c8      	b.n	800acde <PxMessagingTask+0xcd2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d013      	beq.n	800ad78 <PxMessagingTask+0xd6c>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800ad50:	9b05      	ldr	r3, [sp, #20]
 800ad52:	1919      	adds	r1, r3, r4
 800ad54:	78ca      	ldrb	r2, [r1, #3]
 800ad56:	788b      	ldrb	r3, [r1, #2]
 800ad58:	0212      	lsls	r2, r2, #8
 800ad5a:	189b      	adds	r3, r3, r2
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	8003      	strh	r3, [r0, #0]
 800ad60:	e7bd      	b.n	800acde <PxMessagingTask+0xcd2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d01c      	beq.n	800ada0 <PxMessagingTask+0xd94>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800ad66:	9b05      	ldr	r3, [sp, #20]
 800ad68:	191b      	adds	r3, r3, r4
 800ad6a:	789b      	ldrb	r3, [r3, #2]
 800ad6c:	7003      	strb	r3, [r0, #0]
 800ad6e:	e7b6      	b.n	800acde <PxMessagingTask+0xcd2>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800ad70:	2312      	movs	r3, #18
 800ad72:	4ab8      	ldr	r2, [pc, #736]	; (800b054 <PxMessagingTask+0x1048>)
 800ad74:	7013      	strb	r3, [r2, #0]
 800ad76:	e7b2      	b.n	800acde <PxMessagingTask+0xcd2>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800ad78:	2002      	movs	r0, #2
 800ad7a:	f007 fd75 	bl	8012868 <malloc>
												if(temp32 != 0){
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	d0f6      	beq.n	800ad70 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad82:	0403      	lsls	r3, r0, #16
 800ad84:	4ab1      	ldr	r2, [pc, #708]	; (800b04c <PxMessagingTask+0x1040>)
 800ad86:	3303      	adds	r3, #3
 800ad88:	5193      	str	r3, [r2, r6]
 800ad8a:	e7e1      	b.n	800ad50 <PxMessagingTask+0xd44>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800ad8c:	2001      	movs	r0, #1
 800ad8e:	f007 fd6b 	bl	8012868 <malloc>
												if(temp32 != 0){
 800ad92:	2800      	cmp	r0, #0
 800ad94:	d0ec      	beq.n	800ad70 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad96:	0403      	lsls	r3, r0, #16
 800ad98:	4aac      	ldr	r2, [pc, #688]	; (800b04c <PxMessagingTask+0x1040>)
 800ad9a:	3302      	adds	r3, #2
 800ad9c:	5193      	str	r3, [r2, r6]
 800ad9e:	e7cf      	b.n	800ad40 <PxMessagingTask+0xd34>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800ada0:	2001      	movs	r0, #1
 800ada2:	f007 fd61 	bl	8012868 <malloc>
												if(temp32 != 0){
 800ada6:	2800      	cmp	r0, #0
 800ada8:	d0e2      	beq.n	800ad70 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800adaa:	0403      	lsls	r3, r0, #16
 800adac:	19df      	adds	r7, r3, r7
 800adae:	4ba7      	ldr	r3, [pc, #668]	; (800b04c <PxMessagingTask+0x1040>)
 800adb0:	519f      	str	r7, [r3, r6]
 800adb2:	e7d8      	b.n	800ad66 <PxMessagingTask+0xd5a>
										ADCSelectChannel(ADCPort,"top");
 800adb4:	49a9      	ldr	r1, [pc, #676]	; (800b05c <PxMessagingTask+0x1050>)
 800adb6:	f7fd ff67 	bl	8008c88 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800adba:	4ba9      	ldr	r3, [pc, #676]	; (800b060 <PxMessagingTask+0x1054>)
 800adbc:	4aa8      	ldr	r2, [pc, #672]	; (800b060 <PxMessagingTask+0x1054>)
 800adbe:	5d98      	ldrb	r0, [r3, r6]
 800adc0:	3248      	adds	r2, #72	; 0x48
 800adc2:	49a6      	ldr	r1, [pc, #664]	; (800b05c <PxMessagingTask+0x1050>)
 800adc4:	f7fd ffb0 	bl	8008d28 <ReadADCChannel>
 800adc8:	f7ff fa04 	bl	800a1d4 <PxMessagingTask+0x1c8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d100      	bne.n	800add2 <PxMessagingTask+0xdc6>
 800add0:	e085      	b.n	800aede <PxMessagingTask+0xed2>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800add2:	9b05      	ldr	r3, [sp, #20]
 800add4:	191a      	adds	r2, r3, r4
 800add6:	78d3      	ldrb	r3, [r2, #3]
 800add8:	7911      	ldrb	r1, [r2, #4]
 800adda:	021b      	lsls	r3, r3, #8
 800addc:	0409      	lsls	r1, r1, #16
 800adde:	185b      	adds	r3, r3, r1
 800ade0:	7891      	ldrb	r1, [r2, #2]
 800ade2:	7952      	ldrb	r2, [r2, #5]
 800ade4:	185b      	adds	r3, r3, r1
 800ade6:	0612      	lsls	r2, r2, #24
 800ade8:	189b      	adds	r3, r3, r2
 800adea:	464a      	mov	r2, r9
 800adec:	4649      	mov	r1, r9
 800adee:	6013      	str	r3, [r2, #0]
 800adf0:	2200      	movs	r2, #0
 800adf2:	604a      	str	r2, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800adf4:	6003      	str	r3, [r0, #0]
 800adf6:	e772      	b.n	800acde <PxMessagingTask+0xcd2>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800adf8:	9b05      	ldr	r3, [sp, #20]
 800adfa:	469c      	mov	ip, r3
 800adfc:	4464      	add	r4, ip
 800adfe:	78a3      	ldrb	r3, [r4, #2]
 800ae00:	78e2      	ldrb	r2, [r4, #3]
 800ae02:	021b      	lsls	r3, r3, #8
 800ae04:	0412      	lsls	r2, r2, #16
 800ae06:	189b      	adds	r3, r3, r2
 800ae08:	7862      	ldrb	r2, [r4, #1]
 800ae0a:	189b      	adds	r3, r3, r2
 800ae0c:	7922      	ldrb	r2, [r4, #4]
 800ae0e:	0612      	lsls	r2, r2, #24
 800ae10:	189b      	adds	r3, r3, r2
 800ae12:	4a93      	ldr	r2, [pc, #588]	; (800b060 <PxMessagingTask+0x1054>)
 800ae14:	62d3      	str	r3, [r2, #44]	; 0x2c
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800ae16:	79a3      	ldrb	r3, [r4, #6]
 800ae18:	79e2      	ldrb	r2, [r4, #7]
 800ae1a:	021b      	lsls	r3, r3, #8
 800ae1c:	0412      	lsls	r2, r2, #16
 800ae1e:	189b      	adds	r3, r3, r2
 800ae20:	7962      	ldrb	r2, [r4, #5]
 800ae22:	189b      	adds	r3, r3, r2
 800ae24:	7a22      	ldrb	r2, [r4, #8]
 800ae26:	0612      	lsls	r2, r2, #24
 800ae28:	189b      	adds	r3, r3, r2
 800ae2a:	4a8d      	ldr	r2, [pc, #564]	; (800b060 <PxMessagingTask+0x1054>)
 800ae2c:	6313      	str	r3, [r2, #48]	; 0x30
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800ae2e:	7aa3      	ldrb	r3, [r4, #10]
 800ae30:	7ae2      	ldrb	r2, [r4, #11]
 800ae32:	021b      	lsls	r3, r3, #8
 800ae34:	0412      	lsls	r2, r2, #16
 800ae36:	189b      	adds	r3, r3, r2
 800ae38:	7a62      	ldrb	r2, [r4, #9]
 800ae3a:	189b      	adds	r3, r3, r2
 800ae3c:	7b22      	ldrb	r2, [r4, #12]
 800ae3e:	0612      	lsls	r2, r2, #24
 800ae40:	189b      	adds	r3, r3, r2
 800ae42:	4a87      	ldr	r2, [pc, #540]	; (800b060 <PxMessagingTask+0x1054>)
 800ae44:	6353      	str	r3, [r2, #52]	; 0x34
									break;
 800ae46:	f7ff f9f0 	bl	800a22a <PxMessagingTask+0x21e>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800ae4a:	2313      	movs	r3, #19
 800ae4c:	4a81      	ldr	r2, [pc, #516]	; (800b054 <PxMessagingTask+0x1048>)
 800ae4e:	7013      	strb	r3, [r2, #0]
 800ae50:	e75a      	b.n	800ad08 <PxMessagingTask+0xcfc>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800ae52:	9b05      	ldr	r3, [sp, #20]
 800ae54:	191b      	adds	r3, r3, r4
 800ae56:	789e      	ldrb	r6, [r3, #2]
 800ae58:	78da      	ldrb	r2, [r3, #3]
 800ae5a:	0636      	lsls	r6, r6, #24
 800ae5c:	0412      	lsls	r2, r2, #16
 800ae5e:	18b6      	adds	r6, r6, r2
 800ae60:	795a      	ldrb	r2, [r3, #5]
 800ae62:	18b6      	adds	r6, r6, r2
 800ae64:	791a      	ldrb	r2, [r3, #4]
 800ae66:	0212      	lsls	r2, r2, #8
 800ae68:	18b6      	adds	r6, r6, r2
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800ae6a:	22e0      	movs	r2, #224	; 0xe0
 800ae6c:	0612      	lsls	r2, r2, #24
 800ae6e:	18b1      	adds	r1, r6, r2
 800ae70:	4a7c      	ldr	r2, [pc, #496]	; (800b064 <PxMessagingTask+0x1058>)
 800ae72:	4291      	cmp	r1, r2
 800ae74:	d900      	bls.n	800ae78 <PxMessagingTask+0xe6c>
 800ae76:	e08b      	b.n	800af90 <PxMessagingTask+0xf84>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800ae78:	785b      	ldrb	r3, [r3, #1]
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	2b07      	cmp	r3, #7
 800ae80:	d900      	bls.n	800ae84 <PxMessagingTask+0xe78>
 800ae82:	e741      	b.n	800ad08 <PxMessagingTask+0xcfc>
 800ae84:	4a78      	ldr	r2, [pc, #480]	; (800b068 <PxMessagingTask+0x105c>)
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	58d3      	ldr	r3, [r2, r3]
 800ae8a:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800ae8c:	9b05      	ldr	r3, [sp, #20]
 800ae8e:	469c      	mov	ip, r3
 800ae90:	4464      	add	r4, ip
 800ae92:	78a3      	ldrb	r3, [r4, #2]
 800ae94:	78e2      	ldrb	r2, [r4, #3]
 800ae96:	021b      	lsls	r3, r3, #8
 800ae98:	0412      	lsls	r2, r2, #16
 800ae9a:	189b      	adds	r3, r3, r2
 800ae9c:	7862      	ldrb	r2, [r4, #1]
 800ae9e:	189b      	adds	r3, r3, r2
 800aea0:	7922      	ldrb	r2, [r4, #4]
 800aea2:	0612      	lsls	r2, r2, #24
 800aea4:	189b      	adds	r3, r3, r2
 800aea6:	4a6e      	ldr	r2, [pc, #440]	; (800b060 <PxMessagingTask+0x1054>)
 800aea8:	6213      	str	r3, [r2, #32]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800aeaa:	79a3      	ldrb	r3, [r4, #6]
 800aeac:	79e2      	ldrb	r2, [r4, #7]
 800aeae:	021b      	lsls	r3, r3, #8
 800aeb0:	0412      	lsls	r2, r2, #16
 800aeb2:	189b      	adds	r3, r3, r2
 800aeb4:	7962      	ldrb	r2, [r4, #5]
 800aeb6:	189b      	adds	r3, r3, r2
 800aeb8:	7a22      	ldrb	r2, [r4, #8]
 800aeba:	0612      	lsls	r2, r2, #24
 800aebc:	189b      	adds	r3, r3, r2
 800aebe:	4a68      	ldr	r2, [pc, #416]	; (800b060 <PxMessagingTask+0x1054>)
 800aec0:	6253      	str	r3, [r2, #36]	; 0x24
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800aec2:	7aa3      	ldrb	r3, [r4, #10]
 800aec4:	7ae2      	ldrb	r2, [r4, #11]
 800aec6:	021b      	lsls	r3, r3, #8
 800aec8:	0412      	lsls	r2, r2, #16
 800aeca:	189b      	adds	r3, r3, r2
 800aecc:	7a62      	ldrb	r2, [r4, #9]
 800aece:	189b      	adds	r3, r3, r2
 800aed0:	7b22      	ldrb	r2, [r4, #12]
 800aed2:	0612      	lsls	r2, r2, #24
 800aed4:	189b      	adds	r3, r3, r2
 800aed6:	4a62      	ldr	r2, [pc, #392]	; (800b060 <PxMessagingTask+0x1054>)
 800aed8:	6293      	str	r3, [r2, #40]	; 0x28
									break;
 800aeda:	f7ff f9a6 	bl	800a22a <PxMessagingTask+0x21e>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800aede:	2004      	movs	r0, #4
 800aee0:	f007 fcc2 	bl	8012868 <malloc>
												if(temp32 != 0){
 800aee4:	2800      	cmp	r0, #0
 800aee6:	d100      	bne.n	800aeea <PxMessagingTask+0xede>
 800aee8:	e742      	b.n	800ad70 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800aeea:	0403      	lsls	r3, r0, #16
 800aeec:	4a57      	ldr	r2, [pc, #348]	; (800b04c <PxMessagingTask+0x1040>)
 800aeee:	3307      	adds	r3, #7
 800aef0:	5193      	str	r3, [r2, r6]
 800aef2:	e76e      	b.n	800add2 <PxMessagingTask+0xdc6>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800aef4:	9b05      	ldr	r3, [sp, #20]
 800aef6:	469c      	mov	ip, r3
 800aef8:	4464      	add	r4, ip
 800aefa:	79e3      	ldrb	r3, [r4, #7]
 800aefc:	79a2      	ldrb	r2, [r4, #6]
 800aefe:	021b      	lsls	r3, r3, #8
 800af00:	189b      	adds	r3, r3, r2
 800af02:	7a22      	ldrb	r2, [r4, #8]
 800af04:	0412      	lsls	r2, r2, #16
 800af06:	189b      	adds	r3, r3, r2
 800af08:	7a62      	ldrb	r2, [r4, #9]
 800af0a:	0612      	lsls	r2, r2, #24
 800af0c:	189b      	adds	r3, r3, r2
 800af0e:	6033      	str	r3, [r6, #0]
											break;
 800af10:	e6fa      	b.n	800ad08 <PxMessagingTask+0xcfc>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800af12:	9b05      	ldr	r3, [sp, #20]
 800af14:	469c      	mov	ip, r3
 800af16:	4464      	add	r4, ip
 800af18:	79e3      	ldrb	r3, [r4, #7]
 800af1a:	7a22      	ldrb	r2, [r4, #8]
 800af1c:	021b      	lsls	r3, r3, #8
 800af1e:	0412      	lsls	r2, r2, #16
 800af20:	189b      	adds	r3, r3, r2
 800af22:	79a2      	ldrb	r2, [r4, #6]
 800af24:	e7ef      	b.n	800af06 <PxMessagingTask+0xefa>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800af26:	9b05      	ldr	r3, [sp, #20]
 800af28:	469c      	mov	ip, r3
 800af2a:	4464      	add	r4, ip
 800af2c:	79e2      	ldrb	r2, [r4, #7]
 800af2e:	79a3      	ldrb	r3, [r4, #6]
 800af30:	0212      	lsls	r2, r2, #8
 800af32:	189b      	adds	r3, r3, r2
 800af34:	b21b      	sxth	r3, r3
 800af36:	8033      	strh	r3, [r6, #0]
											break;
 800af38:	e6e6      	b.n	800ad08 <PxMessagingTask+0xcfc>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800af3a:	9b05      	ldr	r3, [sp, #20]
 800af3c:	469c      	mov	ip, r3
 800af3e:	4464      	add	r4, ip
 800af40:	79e2      	ldrb	r2, [r4, #7]
 800af42:	79a3      	ldrb	r3, [r4, #6]
 800af44:	0212      	lsls	r2, r2, #8
 800af46:	189b      	adds	r3, r3, r2
 800af48:	b29b      	uxth	r3, r3
 800af4a:	8033      	strh	r3, [r6, #0]
											break;
 800af4c:	e6dc      	b.n	800ad08 <PxMessagingTask+0xcfc>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800af4e:	9b05      	ldr	r3, [sp, #20]
 800af50:	469c      	mov	ip, r3
 800af52:	2306      	movs	r3, #6
 800af54:	4464      	add	r4, ip
 800af56:	56e3      	ldrsb	r3, [r4, r3]
 800af58:	7033      	strb	r3, [r6, #0]
											break;
 800af5a:	e6d5      	b.n	800ad08 <PxMessagingTask+0xcfc>
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800af5c:	9b05      	ldr	r3, [sp, #20]
 800af5e:	469c      	mov	ip, r3
 800af60:	4464      	add	r4, ip
 800af62:	79a3      	ldrb	r3, [r4, #6]
 800af64:	7033      	strb	r3, [r6, #0]
											break;
 800af66:	e6cf      	b.n	800ad08 <PxMessagingTask+0xcfc>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800af68:	9b05      	ldr	r3, [sp, #20]
 800af6a:	4649      	mov	r1, r9
 800af6c:	469c      	mov	ip, r3
 800af6e:	4464      	add	r4, ip
 800af70:	79e3      	ldrb	r3, [r4, #7]
 800af72:	7a22      	ldrb	r2, [r4, #8]
 800af74:	021b      	lsls	r3, r3, #8
 800af76:	0412      	lsls	r2, r2, #16
 800af78:	189b      	adds	r3, r3, r2
 800af7a:	79a2      	ldrb	r2, [r4, #6]
 800af7c:	189b      	adds	r3, r3, r2
 800af7e:	7a62      	ldrb	r2, [r4, #9]
 800af80:	0612      	lsls	r2, r2, #24
 800af82:	189b      	adds	r3, r3, r2
 800af84:	464a      	mov	r2, r9
 800af86:	6013      	str	r3, [r2, #0]
 800af88:	2200      	movs	r2, #0
 800af8a:	604a      	str	r2, [r1, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800af8c:	6033      	str	r3, [r6, #0]
											break;
 800af8e:	e6bb      	b.n	800ad08 <PxMessagingTask+0xcfc>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800af90:	23f8      	movs	r3, #248	; 0xf8
 800af92:	4a36      	ldr	r2, [pc, #216]	; (800b06c <PxMessagingTask+0x1060>)
 800af94:	061b      	lsls	r3, r3, #24
 800af96:	18f3      	adds	r3, r6, r3
 800af98:	4293      	cmp	r3, r2
 800af9a:	d910      	bls.n	800afbe <PxMessagingTask+0xfb2>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800af9c:	2215      	movs	r2, #21
 800af9e:	4b2d      	ldr	r3, [pc, #180]	; (800b054 <PxMessagingTask+0x1048>)
 800afa0:	701a      	strb	r2, [r3, #0]
 800afa2:	e6b1      	b.n	800ad08 <PxMessagingTask+0xcfc>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800afa4:	230a      	movs	r3, #10
 800afa6:	4932      	ldr	r1, [pc, #200]	; (800b070 <PxMessagingTask+0x1064>)
 800afa8:	9a04      	ldr	r2, [sp, #16]
 800afaa:	468c      	mov	ip, r1
 800afac:	4353      	muls	r3, r2
 800afae:	4831      	ldr	r0, [pc, #196]	; (800b074 <PxMessagingTask+0x1068>)
 800afb0:	4463      	add	r3, ip
 800afb2:	4931      	ldr	r1, [pc, #196]	; (800b078 <PxMessagingTask+0x106c>)
 800afb4:	301c      	adds	r0, #28
 800afb6:	f008 f8a7 	bl	8013108 <sprintf>
 800afba:	f7ff fa6c 	bl	800a496 <PxMessagingTask+0x48a>
									HAL_FLASH_Unlock();
 800afbe:	f005 fc61 	bl	8010884 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800afc2:	9b08      	ldr	r3, [sp, #32]
 800afc4:	2b22      	cmp	r3, #34	; 0x22
 800afc6:	d100      	bne.n	800afca <PxMessagingTask+0xfbe>
 800afc8:	e094      	b.n	800b0f4 <PxMessagingTask+0x10e8>
									if(responseStatus == BOS_OK){
 800afca:	4b22      	ldr	r3, [pc, #136]	; (800b054 <PxMessagingTask+0x1048>)
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d15c      	bne.n	800b08c <PxMessagingTask+0x1080>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800afd2:	9b05      	ldr	r3, [sp, #20]
 800afd4:	191b      	adds	r3, r3, r4
 800afd6:	785b      	ldrb	r3, [r3, #1]
 800afd8:	3b01      	subs	r3, #1
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	2b07      	cmp	r3, #7
 800afde:	d855      	bhi.n	800b08c <PxMessagingTask+0x1080>
 800afe0:	4a26      	ldr	r2, [pc, #152]	; (800b07c <PxMessagingTask+0x1070>)
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	58d3      	ldr	r3, [r2, r3]
 800afe6:	469f      	mov	pc, r3
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d018      	beq.n	800b01e <PxMessagingTask+0x1012>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800afec:	9b05      	ldr	r3, [sp, #20]
 800afee:	191a      	adds	r2, r3, r4
 800aff0:	78d3      	ldrb	r3, [r2, #3]
 800aff2:	7891      	ldrb	r1, [r2, #2]
 800aff4:	021b      	lsls	r3, r3, #8
 800aff6:	185b      	adds	r3, r3, r1
 800aff8:	7911      	ldrb	r1, [r2, #4]
 800affa:	0409      	lsls	r1, r1, #16
 800affc:	7952      	ldrb	r2, [r2, #5]
 800affe:	185b      	adds	r3, r3, r1
 800b000:	0612      	lsls	r2, r2, #24
 800b002:	189b      	adds	r3, r3, r2
 800b004:	6003      	str	r3, [r0, #0]
 800b006:	e66a      	b.n	800acde <PxMessagingTask+0xcd2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d013      	beq.n	800b034 <PxMessagingTask+0x1028>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b00c:	9b05      	ldr	r3, [sp, #20]
 800b00e:	191a      	adds	r2, r3, r4
 800b010:	78d3      	ldrb	r3, [r2, #3]
 800b012:	7911      	ldrb	r1, [r2, #4]
 800b014:	021b      	lsls	r3, r3, #8
 800b016:	0409      	lsls	r1, r1, #16
 800b018:	185b      	adds	r3, r3, r1
 800b01a:	7891      	ldrb	r1, [r2, #2]
 800b01c:	e7ee      	b.n	800affc <PxMessagingTask+0xff0>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800b01e:	2004      	movs	r0, #4
 800b020:	f007 fc22 	bl	8012868 <malloc>
												if(temp32 != 0){
 800b024:	2800      	cmp	r0, #0
 800b026:	d100      	bne.n	800b02a <PxMessagingTask+0x101e>
 800b028:	e6a2      	b.n	800ad70 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b02a:	0403      	lsls	r3, r0, #16
 800b02c:	4a07      	ldr	r2, [pc, #28]	; (800b04c <PxMessagingTask+0x1040>)
 800b02e:	3306      	adds	r3, #6
 800b030:	5193      	str	r3, [r2, r6]
 800b032:	e7db      	b.n	800afec <PxMessagingTask+0xfe0>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800b034:	2004      	movs	r0, #4
 800b036:	f007 fc17 	bl	8012868 <malloc>
												if(temp32 != 0){
 800b03a:	2800      	cmp	r0, #0
 800b03c:	d100      	bne.n	800b040 <PxMessagingTask+0x1034>
 800b03e:	e697      	b.n	800ad70 <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b040:	0403      	lsls	r3, r0, #16
 800b042:	4a02      	ldr	r2, [pc, #8]	; (800b04c <PxMessagingTask+0x1040>)
 800b044:	3305      	adds	r3, #5
 800b046:	5193      	str	r3, [r2, r6]
 800b048:	e7e0      	b.n	800b00c <PxMessagingTask+0x1000>
 800b04a:	46c0      	nop			; (mov r8, r8)
 800b04c:	20006e30 	.word	0x20006e30
 800b050:	0000fff0 	.word	0x0000fff0
 800b054:	20000c3c 	.word	0x20000c3c
 800b058:	20006e28 	.word	0x20006e28
 800b05c:	080186a0 	.word	0x080186a0
 800b060:	20001a58 	.word	0x20001a58
 800b064:	00007fff 	.word	0x00007fff
 800b068:	08017aa0 	.word	0x08017aa0
 800b06c:	0001ffff 	.word	0x0001ffff
 800b070:	20000dfc 	.word	0x20000dfc
 800b074:	200019d8 	.word	0x200019d8
 800b078:	08019190 	.word	0x08019190
 800b07c:	08017ac0 	.word	0x08017ac0
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b080:	6833      	ldr	r3, [r6, #0]
 800b082:	3301      	adds	r3, #1
 800b084:	d00c      	beq.n	800b0a0 <PxMessagingTask+0x1094>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b086:	2316      	movs	r3, #22
 800b088:	4ad6      	ldr	r2, [pc, #856]	; (800b3e4 <PxMessagingTask+0x13d8>)
 800b08a:	7013      	strb	r3, [r2, #0]
									HAL_FLASH_Lock();
 800b08c:	f005 fc0c 	bl	80108a8 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800b090:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b092:	2b00      	cmp	r3, #0
 800b094:	d100      	bne.n	800b098 <PxMessagingTask+0x108c>
 800b096:	e637      	b.n	800ad08 <PxMessagingTask+0xcfc>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b098:	2316      	movs	r3, #22
 800b09a:	4ad2      	ldr	r2, [pc, #840]	; (800b3e4 <PxMessagingTask+0x13d8>)
 800b09c:	7013      	strb	r3, [r2, #0]
 800b09e:	e633      	b.n	800ad08 <PxMessagingTask+0xcfc>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b0a0:	9b05      	ldr	r3, [sp, #20]
 800b0a2:	4649      	mov	r1, r9
 800b0a4:	469c      	mov	ip, r3
 800b0a6:	4464      	add	r4, ip
 800b0a8:	79e2      	ldrb	r2, [r4, #7]
 800b0aa:	7a23      	ldrb	r3, [r4, #8]
 800b0ac:	0212      	lsls	r2, r2, #8
 800b0ae:	041b      	lsls	r3, r3, #16
 800b0b0:	18d2      	adds	r2, r2, r3
 800b0b2:	79a3      	ldrb	r3, [r4, #6]
													status =HAL_FLASH_Program(
 800b0b4:	2002      	movs	r0, #2
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b0b6:	18d2      	adds	r2, r2, r3
 800b0b8:	7a63      	ldrb	r3, [r4, #9]
 800b0ba:	061b      	lsls	r3, r3, #24
 800b0bc:	18d2      	adds	r2, r2, r3
 800b0be:	2300      	movs	r3, #0
 800b0c0:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800b0c2:	0031      	movs	r1, r6
 800b0c4:	f005 fc3e 	bl	8010944 <HAL_FLASH_Program>
 800b0c8:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800b0ca:	e7df      	b.n	800b08c <PxMessagingTask+0x1080>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b0cc:	8832      	ldrh	r2, [r6, #0]
 800b0ce:	4bc6      	ldr	r3, [pc, #792]	; (800b3e8 <PxMessagingTask+0x13dc>)
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d1d8      	bne.n	800b086 <PxMessagingTask+0x107a>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b0d4:	9b05      	ldr	r3, [sp, #20]
 800b0d6:	469c      	mov	ip, r3
 800b0d8:	4464      	add	r4, ip
 800b0da:	79e2      	ldrb	r2, [r4, #7]
 800b0dc:	79a3      	ldrb	r3, [r4, #6]
 800b0de:	0212      	lsls	r2, r2, #8
 800b0e0:	18d2      	adds	r2, r2, r3
 800b0e2:	17d3      	asrs	r3, r2, #31
 800b0e4:	4649      	mov	r1, r9
													status =HAL_FLASH_Program(
 800b0e6:	2001      	movs	r0, #1
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b0e8:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800b0ea:	0031      	movs	r1, r6
 800b0ec:	f005 fc2a 	bl	8010944 <HAL_FLASH_Program>
 800b0f0:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800b0f2:	e7cb      	b.n	800b08c <PxMessagingTask+0x1080>
										erase.NbPages =1;
 800b0f4:	3b21      	subs	r3, #33	; 0x21
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b0f6:	a918      	add	r1, sp, #96	; 0x60
 800b0f8:	a819      	add	r0, sp, #100	; 0x64
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b0fa:	9719      	str	r7, [sp, #100]	; 0x64
										erase.PageAddress =temp32;
 800b0fc:	961a      	str	r6, [sp, #104]	; 0x68
										erase.NbPages =1;
 800b0fe:	931b      	str	r3, [sp, #108]	; 0x6c
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b100:	f005 fc84 	bl	8010a0c <HAL_FLASHEx_Erase>
 800b104:	900f      	str	r0, [sp, #60]	; 0x3c
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b106:	2800      	cmp	r0, #0
 800b108:	d103      	bne.n	800b112 <PxMessagingTask+0x1106>
 800b10a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b10c:	3301      	adds	r3, #1
 800b10e:	d100      	bne.n	800b112 <PxMessagingTask+0x1106>
 800b110:	e75b      	b.n	800afca <PxMessagingTask+0xfbe>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b112:	2316      	movs	r3, #22
 800b114:	4ab3      	ldr	r2, [pc, #716]	; (800b3e4 <PxMessagingTask+0x13d8>)
 800b116:	7013      	strb	r3, [r2, #0]
 800b118:	e757      	b.n	800afca <PxMessagingTask+0xfbe>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b11a:	8832      	ldrh	r2, [r6, #0]
 800b11c:	4bb2      	ldr	r3, [pc, #712]	; (800b3e8 <PxMessagingTask+0x13dc>)
 800b11e:	429a      	cmp	r2, r3
 800b120:	d1b1      	bne.n	800b086 <PxMessagingTask+0x107a>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800b122:	9b05      	ldr	r3, [sp, #20]
 800b124:	469c      	mov	ip, r3
 800b126:	4464      	add	r4, ip
 800b128:	79a2      	ldrb	r2, [r4, #6]
 800b12a:	2300      	movs	r3, #0
 800b12c:	e7da      	b.n	800b0e4 <PxMessagingTask+0x10d8>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b12e:	6833      	ldr	r3, [r6, #0]
 800b130:	3301      	adds	r3, #1
 800b132:	d1a8      	bne.n	800b086 <PxMessagingTask+0x107a>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b134:	9b05      	ldr	r3, [sp, #20]
 800b136:	4649      	mov	r1, r9
 800b138:	469c      	mov	ip, r3
 800b13a:	4464      	add	r4, ip
 800b13c:	79e2      	ldrb	r2, [r4, #7]
 800b13e:	7a23      	ldrb	r3, [r4, #8]
 800b140:	0212      	lsls	r2, r2, #8
 800b142:	041b      	lsls	r3, r3, #16
 800b144:	18d2      	adds	r2, r2, r3
 800b146:	79a3      	ldrb	r3, [r4, #6]
													status =HAL_FLASH_Program(
 800b148:	2003      	movs	r0, #3
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b14a:	18d2      	adds	r2, r2, r3
 800b14c:	7a63      	ldrb	r3, [r4, #9]
 800b14e:	061b      	lsls	r3, r3, #24
 800b150:	18d2      	adds	r2, r2, r3
 800b152:	2300      	movs	r3, #0
 800b154:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800b156:	0031      	movs	r1, r6
 800b158:	f005 fbf4 	bl	8010944 <HAL_FLASH_Program>
 800b15c:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800b15e:	e795      	b.n	800b08c <PxMessagingTask+0x1080>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800b160:	2338      	movs	r3, #56	; 0x38
 800b162:	435d      	muls	r5, r3
 800b164:	445d      	add	r5, fp
 800b166:	192e      	adds	r6, r5, r4
 800b168:	7a31      	ldrb	r1, [r6, #8]
 800b16a:	20e4      	movs	r0, #228	; 0xe4
 800b16c:	f7fc fb9a 	bl	80078a4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800b170:	9a07      	ldr	r2, [sp, #28]
 800b172:	5d2b      	ldrb	r3, [r5, r4]
 800b174:	5ca9      	ldrb	r1, [r5, r2]
 800b176:	021b      	lsls	r3, r3, #8
 800b178:	18c9      	adds	r1, r1, r3
 800b17a:	b289      	uxth	r1, r1
 800b17c:	20e5      	movs	r0, #229	; 0xe5
 800b17e:	f7fc fb91 	bl	80078a4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800b182:	9b08      	ldr	r3, [sp, #32]
 800b184:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b186:	5ceb      	ldrb	r3, [r5, r3]
 800b188:	5ca9      	ldrb	r1, [r5, r2]
 800b18a:	021b      	lsls	r3, r3, #8
 800b18c:	18c9      	adds	r1, r1, r3
 800b18e:	b289      	uxth	r1, r1
 800b190:	20e6      	movs	r0, #230	; 0xe6
 800b192:	f7fc fb87 	bl	80078a4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800b196:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b198:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b19a:	5ceb      	ldrb	r3, [r5, r3]
 800b19c:	5ca9      	ldrb	r1, [r5, r2]
 800b19e:	021b      	lsls	r3, r3, #8
 800b1a0:	18c9      	adds	r1, r1, r3
 800b1a2:	b289      	uxth	r1, r1
 800b1a4:	20e7      	movs	r0, #231	; 0xe7
 800b1a6:	f7fc fb7d 	bl	80078a4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800b1aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b1ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1ae:	5ceb      	ldrb	r3, [r5, r3]
 800b1b0:	5ca9      	ldrb	r1, [r5, r2]
 800b1b2:	021b      	lsls	r3, r3, #8
 800b1b4:	18c9      	adds	r1, r1, r3
 800b1b6:	b289      	uxth	r1, r1
 800b1b8:	20e8      	movs	r0, #232	; 0xe8
 800b1ba:	f7fc fb73 	bl	80078a4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800b1be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1c0:	7ab1      	ldrb	r1, [r6, #10]
 800b1c2:	5ceb      	ldrb	r3, [r5, r3]
 800b1c4:	20e9      	movs	r0, #233	; 0xe9
 800b1c6:	021b      	lsls	r3, r3, #8
 800b1c8:	18c9      	adds	r1, r1, r3
 800b1ca:	b289      	uxth	r1, r1
 800b1cc:	f7fc fb6a 	bl	80078a4 <EE_WriteVariable>
								if(numOfParams == 19)
 800b1d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1d2:	2b13      	cmp	r3, #19
 800b1d4:	d013      	beq.n	800b1fe <PxMessagingTask+0x11f2>
								if(numOfParams == 21)
 800b1d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1d8:	2b15      	cmp	r3, #21
 800b1da:	d107      	bne.n	800b1ec <PxMessagingTask+0x11e0>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800b1dc:	7b73      	ldrb	r3, [r6, #13]
 800b1de:	7bb1      	ldrb	r1, [r6, #14]
 800b1e0:	021b      	lsls	r3, r3, #8
 800b1e2:	18c9      	adds	r1, r1, r3
 800b1e4:	b289      	uxth	r1, r1
 800b1e6:	20eb      	movs	r0, #235	; 0xeb
 800b1e8:	f7fc fb5c 	bl	80078a4 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	4b7e      	ldr	r3, [pc, #504]	; (800b3ec <PxMessagingTask+0x13e0>)
 800b1f2:	4a7f      	ldr	r2, [pc, #508]	; (800b3f0 <PxMessagingTask+0x13e4>)
 800b1f4:	60da      	str	r2, [r3, #12]
 800b1f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800b1fa:	46c0      	nop			; (mov r8, r8)
 800b1fc:	e7fd      	b.n	800b1fa <PxMessagingTask+0x11ee>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800b1fe:	9b04      	ldr	r3, [sp, #16]
 800b200:	7b31      	ldrb	r1, [r6, #12]
 800b202:	5ceb      	ldrb	r3, [r5, r3]
 800b204:	20ea      	movs	r0, #234	; 0xea
 800b206:	021b      	lsls	r3, r3, #8
 800b208:	18c9      	adds	r1, r1, r3
 800b20a:	b289      	uxth	r1, r1
 800b20c:	f7fc fb4a 	bl	80078a4 <EE_WriteVariable>
 800b210:	e7ec      	b.n	800b1ec <PxMessagingTask+0x11e0>
								temp =cMessage[port - 1][15 + shift];
 800b212:	9a05      	ldr	r2, [sp, #20]
 800b214:	1912      	adds	r2, r2, r4
 800b216:	7bd1      	ldrb	r1, [r2, #15]
 800b218:	f7ff fae0 	bl	800a7dc <PxMessagingTask+0x7d0>
 800b21c:	2700      	movs	r7, #0
 800b21e:	f7fe ff9f 	bl	800a160 <PxMessagingTask+0x154>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800b222:	2a01      	cmp	r2, #1
 800b224:	d901      	bls.n	800b22a <PxMessagingTask+0x121e>
 800b226:	f7ff fb8d 	bl	800a944 <PxMessagingTask+0x938>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800b22a:	9b05      	ldr	r3, [sp, #20]
 800b22c:	4a71      	ldr	r2, [pc, #452]	; (800b3f4 <PxMessagingTask+0x13e8>)
 800b22e:	5d1b      	ldrb	r3, [r3, r4]
 800b230:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800b232:	2b08      	cmp	r3, #8
 800b234:	d901      	bls.n	800b23a <PxMessagingTask+0x122e>
 800b236:	f7ff fb85 	bl	800a944 <PxMessagingTask+0x938>
 800b23a:	4a6f      	ldr	r2, [pc, #444]	; (800b3f8 <PxMessagingTask+0x13ec>)
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	58d3      	ldr	r3, [r2, r3]
 800b240:	469f      	mov	pc, r3
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800b242:	4651      	mov	r1, sl
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	0a12      	lsrs	r2, r2, #8
 800b24c:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	0c12      	lsrs	r2, r2, #16
 800b252:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800b254:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 800b256:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800b258:	0e1b      	lsrs	r3, r3, #24
 800b25a:	710b      	strb	r3, [r1, #4]
 800b25c:	e45b      	b.n	800ab16 <PxMessagingTask+0xb0a>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800b25e:	4651      	mov	r1, sl
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	1212      	asrs	r2, r2, #8
 800b268:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	1412      	asrs	r2, r2, #16
 800b26e:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800b270:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 800b272:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800b274:	161b      	asrs	r3, r3, #24
 800b276:	710b      	strb	r3, [r1, #4]
 800b278:	e44d      	b.n	800ab16 <PxMessagingTask+0xb0a>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800b27a:	4651      	mov	r1, sl
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	704b      	strb	r3, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800b280:	4b5e      	ldr	r3, [pc, #376]	; (800b3fc <PxMessagingTask+0x13f0>)
 800b282:	18d3      	adds	r3, r2, r3
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	708b      	strb	r3, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800b288:	4b5d      	ldr	r3, [pc, #372]	; (800b400 <PxMessagingTask+0x13f4>)
 800b28a:	18d3      	adds	r3, r2, r3
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	70cb      	strb	r3, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b290:	4b5c      	ldr	r3, [pc, #368]	; (800b404 <PxMessagingTask+0x13f8>)
 800b292:	469c      	mov	ip, r3
 800b294:	4462      	add	r2, ip
 800b296:	7813      	ldrb	r3, [r2, #0]
											SendMessageToModule(src,
 800b298:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b29a:	710b      	strb	r3, [r1, #4]
 800b29c:	e43b      	b.n	800ab16 <PxMessagingTask+0xb0a>
									SendMessageToModule(src,
 800b29e:	2201      	movs	r2, #1
 800b2a0:	211f      	movs	r1, #31
 800b2a2:	9804      	ldr	r0, [sp, #16]
 800b2a4:	f7fe fbda 	bl	8009a5c <SendMessageToModule>
 800b2a8:	4643      	mov	r3, r8
 800b2aa:	5d5e      	ldrb	r6, [r3, r5]
 800b2ac:	f7fe ff58 	bl	800a160 <PxMessagingTask+0x154>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b2b0:	9b05      	ldr	r3, [sp, #20]
 800b2b2:	2700      	movs	r7, #0
 800b2b4:	469c      	mov	ip, r3
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b2b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b2b8:	4466      	add	r6, ip
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b2ba:	469c      	mov	ip, r3
 800b2bc:	1c60      	adds	r0, r4, #1
 800b2be:	4460      	add	r0, ip
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b2c0:	3e01      	subs	r6, #1
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b2c2:	4458      	add	r0, fp
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b2c4:	7037      	strb	r7, [r6, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b2c6:	f7f8 fa23 	bl	8003710 <IsModuleParameter>
 800b2ca:	9009      	str	r0, [sp, #36]	; 0x24
								if(temp == 0){ // Parameter does not exist
 800b2cc:	42b8      	cmp	r0, r7
 800b2ce:	d03a      	beq.n	800b346 <PxMessagingTask+0x133a>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b2d0:	220c      	movs	r2, #12
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b2d2:	494d      	ldr	r1, [pc, #308]	; (800b408 <PxMessagingTask+0x13fc>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b2d6:	468c      	mov	ip, r1
 800b2d8:	4651      	mov	r1, sl
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	435a      	muls	r2, r3
 800b2de:	4b4a      	ldr	r3, [pc, #296]	; (800b408 <PxMessagingTask+0x13fc>)
 800b2e0:	589b      	ldr	r3, [r3, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b2e2:	4462      	add	r2, ip
 800b2e4:	7912      	ldrb	r2, [r2, #4]
 800b2e6:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800b2e8:	3a01      	subs	r2, #1
 800b2ea:	b2d2      	uxtb	r2, r2
 800b2ec:	2a07      	cmp	r2, #7
 800b2ee:	d901      	bls.n	800b2f4 <PxMessagingTask+0x12e8>
 800b2f0:	f7fe ffb9 	bl	800a266 <PxMessagingTask+0x25a>
 800b2f4:	4945      	ldr	r1, [pc, #276]	; (800b40c <PxMessagingTask+0x1400>)
 800b2f6:	0092      	lsls	r2, r2, #2
 800b2f8:	588a      	ldr	r2, [r1, r2]
 800b2fa:	4697      	mov	pc, r2
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800b2fc:	4651      	mov	r1, sl
 800b2fe:	881a      	ldrh	r2, [r3, #0]
 800b300:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800b302:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 800b304:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800b306:	0a1b      	lsrs	r3, r3, #8
 800b308:	708b      	strb	r3, [r1, #2]
 800b30a:	f7ff fc04 	bl	800ab16 <PxMessagingTask+0xb0a>
											messageParams[1] =*(__IO uint8_t* )temp32;
 800b30e:	4652      	mov	r2, sl
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 800b314:	2202      	movs	r2, #2
 800b316:	f7ff fbfe 	bl	800ab16 <PxMessagingTask+0xb0a>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800b31a:	4651      	mov	r1, sl
 800b31c:	881a      	ldrh	r2, [r3, #0]
 800b31e:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800b320:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 800b322:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800b324:	b21b      	sxth	r3, r3
 800b326:	121b      	asrs	r3, r3, #8
 800b328:	708b      	strb	r3, [r1, #2]
 800b32a:	f7ff fbf4 	bl	800ab16 <PxMessagingTask+0xb0a>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800b32e:	4651      	mov	r1, sl
 800b330:	781a      	ldrb	r2, [r3, #0]
 800b332:	704a      	strb	r2, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800b334:	785a      	ldrb	r2, [r3, #1]
 800b336:	708a      	strb	r2, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800b338:	789a      	ldrb	r2, [r3, #2]
 800b33a:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b33c:	78db      	ldrb	r3, [r3, #3]
											SendMessageToModule(src,
 800b33e:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b340:	710b      	strb	r3, [r1, #4]
 800b342:	f7ff fbe8 	bl	800ab16 <PxMessagingTask+0xb0a>
									SendMessageToModule(src,
 800b346:	2201      	movs	r2, #1
 800b348:	211f      	movs	r1, #31
 800b34a:	9804      	ldr	r0, [sp, #16]
 800b34c:	f7fe fb86 	bl	8009a5c <SendMessageToModule>
 800b350:	4643      	mov	r3, r8
 800b352:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b354:	5d5e      	ldrb	r6, [r3, r5]
 800b356:	f7fe ff03 	bl	800a160 <PxMessagingTask+0x154>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800b35a:	9b05      	ldr	r3, [sp, #20]
 800b35c:	469c      	mov	ip, r3
 800b35e:	4464      	add	r4, ip
 800b360:	78a3      	ldrb	r3, [r4, #2]
 800b362:	7862      	ldrb	r2, [r4, #1]
 800b364:	021b      	lsls	r3, r3, #8
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b366:	189b      	adds	r3, r3, r2
 800b368:	464a      	mov	r2, r9
 800b36a:	6013      	str	r3, [r2, #0]
 800b36c:	17db      	asrs	r3, r3, #31
 800b36e:	6053      	str	r3, [r2, #4]
										break;
 800b370:	f7ff fae8 	bl	800a944 <PxMessagingTask+0x938>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b374:	9b05      	ldr	r3, [sp, #20]
 800b376:	469c      	mov	ip, r3
 800b378:	4464      	add	r4, ip
 800b37a:	78a3      	ldrb	r3, [r4, #2]
 800b37c:	7862      	ldrb	r2, [r4, #1]
 800b37e:	021b      	lsls	r3, r3, #8
 800b380:	189b      	adds	r3, r3, r2
 800b382:	78e2      	ldrb	r2, [r4, #3]
 800b384:	0412      	lsls	r2, r2, #16
 800b386:	189b      	adds	r3, r3, r2
 800b388:	7922      	ldrb	r2, [r4, #4]
 800b38a:	0612      	lsls	r2, r2, #24
 800b38c:	e7eb      	b.n	800b366 <PxMessagingTask+0x135a>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800b38e:	9b05      	ldr	r3, [sp, #20]
 800b390:	464a      	mov	r2, r9
 800b392:	469c      	mov	ip, r3
 800b394:	2301      	movs	r3, #1
 800b396:	4464      	add	r4, ip
 800b398:	56e3      	ldrsb	r3, [r4, r3]
 800b39a:	6013      	str	r3, [r2, #0]
 800b39c:	17db      	asrs	r3, r3, #31
 800b39e:	6053      	str	r3, [r2, #4]
										break;
 800b3a0:	f7ff fad0 	bl	800a944 <PxMessagingTask+0x938>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800b3a4:	9b05      	ldr	r3, [sp, #20]
 800b3a6:	464a      	mov	r2, r9
 800b3a8:	469c      	mov	ip, r3
 800b3aa:	4464      	add	r4, ip
 800b3ac:	7863      	ldrb	r3, [r4, #1]
 800b3ae:	6013      	str	r3, [r2, #0]
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	6053      	str	r3, [r2, #4]
										break;
 800b3b4:	f7ff fac6 	bl	800a944 <PxMessagingTask+0x938>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b3b8:	2310      	movs	r3, #16
 800b3ba:	f7ff f87c 	bl	800a4b6 <PxMessagingTask+0x4aa>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b3be:	9b05      	ldr	r3, [sp, #20]
 800b3c0:	469c      	mov	ip, r3
 800b3c2:	4464      	add	r4, ip
 800b3c4:	78a3      	ldrb	r3, [r4, #2]
 800b3c6:	78e2      	ldrb	r2, [r4, #3]
 800b3c8:	021b      	lsls	r3, r3, #8
 800b3ca:	0412      	lsls	r2, r2, #16
 800b3cc:	189b      	adds	r3, r3, r2
 800b3ce:	7862      	ldrb	r2, [r4, #1]
 800b3d0:	189b      	adds	r3, r3, r2
 800b3d2:	7922      	ldrb	r2, [r4, #4]
 800b3d4:	0612      	lsls	r2, r2, #24
 800b3d6:	189b      	adds	r3, r3, r2
 800b3d8:	464a      	mov	r2, r9
 800b3da:	6013      	str	r3, [r2, #0]
 800b3dc:	2300      	movs	r3, #0
 800b3de:	6053      	str	r3, [r2, #4]
										break;
 800b3e0:	f7ff fab0 	bl	800a944 <PxMessagingTask+0x938>
 800b3e4:	20000c3c 	.word	0x20000c3c
 800b3e8:	0000ffff 	.word	0x0000ffff
 800b3ec:	e000ed00 	.word	0xe000ed00
 800b3f0:	05fa0004 	.word	0x05fa0004
 800b3f4:	20000032 	.word	0x20000032
 800b3f8:	08017ae0 	.word	0x08017ae0
 800b3fc:	20000001 	.word	0x20000001
 800b400:	20000002 	.word	0x20000002
 800b404:	20000003 	.word	0x20000003
 800b408:	20000094 	.word	0x20000094
 800b40c:	08017b04 	.word	0x08017b04

0800b410 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b410:	2310      	movs	r3, #16
{
 800b412:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b414:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b416:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b418:	2680      	movs	r6, #128	; 0x80
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b41a:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b41c:	2500      	movs	r5, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b41e:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b420:	2702      	movs	r7, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b422:	0276      	lsls	r6, r6, #9
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b424:	035b      	lsls	r3, r3, #13
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b426:	a80d      	add	r0, sp, #52	; 0x34
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b428:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b42a:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b42c:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b42e:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b430:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b432:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b434:	9617      	str	r6, [sp, #92]	; 0x5c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b436:	f005 fd1d 	bl	8010e74 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b43a:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b43c:	2101      	movs	r1, #1
 800b43e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b440:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b442:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b444:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b446:	9703      	str	r7, [sp, #12]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b448:	f005 ffb6 	bl	80113b8 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800b44c:	4b1a      	ldr	r3, [pc, #104]	; (800b4b8 <SystemClock_Config+0xa8>)
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b44e:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800b450:	9306      	str	r3, [sp, #24]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b452:	9508      	str	r5, [sp, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b454:	9509      	str	r5, [sp, #36]	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b456:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b458:	f006 f93a 	bl	80116d0 <HAL_RCCEx_PeriphCLKConfig>
	
	__HAL_RCC_PWR_CLK_ENABLE();
 800b45c:	2180      	movs	r1, #128	; 0x80
 800b45e:	4d17      	ldr	r5, [pc, #92]	; (800b4bc <SystemClock_Config+0xac>)
 800b460:	0549      	lsls	r1, r1, #21
 800b462:	69ea      	ldr	r2, [r5, #28]
 800b464:	430a      	orrs	r2, r1
 800b466:	61ea      	str	r2, [r5, #28]
 800b468:	69eb      	ldr	r3, [r5, #28]
 800b46a:	400b      	ands	r3, r1
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800b470:	f005 fcf6 	bl	8010e60 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b474:	23c0      	movs	r3, #192	; 0xc0
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b476:	a806      	add	r0, sp, #24
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	9307      	str	r3, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b47c:	9606      	str	r6, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b47e:	f006 f927 	bl	80116d0 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b482:	f006 f8f7 	bl	8011674 <HAL_RCC_GetHCLKFreq>
 800b486:	21fa      	movs	r1, #250	; 0xfa
 800b488:	0089      	lsls	r1, r1, #2
 800b48a:	f7f4 fe61 	bl	8000150 <__udivsi3>
 800b48e:	f004 fb91 	bl	800fbb4 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b492:	2004      	movs	r0, #4
 800b494:	f004 fbaa 	bl	800fbec <HAL_SYSTICK_CLKSourceConfig>
	

	__SYSCFG_CLK_ENABLE();

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b498:	2001      	movs	r0, #1
	__SYSCFG_CLK_ENABLE();
 800b49a:	69ab      	ldr	r3, [r5, #24]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b49c:	2200      	movs	r2, #0
	__SYSCFG_CLK_ENABLE();
 800b49e:	4323      	orrs	r3, r4
 800b4a0:	61ab      	str	r3, [r5, #24]
 800b4a2:	69ab      	ldr	r3, [r5, #24]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4a4:	2100      	movs	r1, #0
	__SYSCFG_CLK_ENABLE();
 800b4a6:	401c      	ands	r4, r3
 800b4a8:	9401      	str	r4, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4aa:	4240      	negs	r0, r0
	__SYSCFG_CLK_ENABLE();
 800b4ac:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4ae:	f004 fb41 	bl	800fb34 <HAL_NVIC_SetPriority>
	
}
 800b4b2:	b01b      	add	sp, #108	; 0x6c
 800b4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4b6:	46c0      	nop			; (mov r8, r8)
 800b4b8:	00040003 	.word	0x00040003
 800b4bc:	40021000 	.word	0x40021000

0800b4c0 <SaveToRO>:

/* --- Save array topology and Command Snippets in Flash RO --- 
*/
uint8_t SaveToRO(void)
{
 800b4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4c2:	46de      	mov	lr, fp
 800b4c4:	4657      	mov	r7, sl
 800b4c6:	464e      	mov	r6, r9
 800b4c8:	4645      	mov	r5, r8
 800b4ca:	b5e0      	push	{r5, r6, r7, lr}
 800b4cc:	b087      	sub	sp, #28
	BOS_Status result = BOS_OK; 
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800b4ce:	2215      	movs	r2, #21
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	4668      	mov	r0, sp
 800b4d4:	f007 fc1e 	bl	8012d14 <memset>
	
	HAL_FLASH_Unlock();
 800b4d8:	f005 f9d4 	bl	8010884 <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800b4dc:	486a      	ldr	r0, [pc, #424]	; (800b688 <SaveToRO+0x1c8>)
 800b4de:	f005 fb01 	bl	8010ae4 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b4e2:	486a      	ldr	r0, [pc, #424]	; (800b68c <SaveToRO+0x1cc>)
 800b4e4:	f005 f9ea 	bl	80108bc <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d16e      	bne.n	800b5ca <SaveToRO+0x10a>
		return pFlash.ErrorCode;
	} else {			
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b4ec:	2202      	movs	r2, #2
 800b4ee:	4c68      	ldr	r4, [pc, #416]	; (800b690 <SaveToRO+0x1d0>)
 800b4f0:	6923      	ldr	r3, [r4, #16]
 800b4f2:	4393      	bics	r3, r2
 800b4f4:	6123      	str	r3, [r4, #16]
	}	
	
	/* Save number of modules and myID */
	if (myID)
 800b4f6:	4b67      	ldr	r3, [pc, #412]	; (800b694 <SaveToRO+0x1d4>)
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d000      	beq.n	800b500 <SaveToRO+0x40>
 800b4fe:	e06e      	b.n	800b5de <SaveToRO+0x11e>
		}
	}
	
	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b500:	4b65      	ldr	r3, [pc, #404]	; (800b698 <SaveToRO+0x1d8>)
 800b502:	469a      	mov	sl, r3
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d100      	bne.n	800b50c <SaveToRO+0x4c>
 800b50a:	e0b8      	b.n	800b67e <SaveToRO+0x1be>
 800b50c:	4b63      	ldr	r3, [pc, #396]	; (800b69c <SaveToRO+0x1dc>)
 800b50e:	2500      	movs	r5, #0
 800b510:	4c63      	ldr	r4, [pc, #396]	; (800b6a0 <SaveToRO+0x1e0>)
 800b512:	4699      	mov	r9, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
				if (FlashStatus != HAL_OK) {
					return pFlash.ErrorCode;
				} else {
					/* If the program operation is completed, disable the PG Bit */
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b514:	4f5e      	ldr	r7, [pc, #376]	; (800b690 <SaveToRO+0x1d0>)
 800b516:	e006      	b.n	800b526 <SaveToRO+0x66>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b518:	4653      	mov	r3, sl
 800b51a:	3501      	adds	r5, #1
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	b2ed      	uxtb	r5, r5
 800b520:	42ab      	cmp	r3, r5
 800b522:	d800      	bhi.n	800b526 <SaveToRO+0x66>
 800b524:	e0ab      	b.n	800b67e <SaveToRO+0x1be>
		if (snippets[s].cond.conditionType) 
 800b526:	00ab      	lsls	r3, r5, #2
 800b528:	1959      	adds	r1, r3, r5
 800b52a:	4698      	mov	r8, r3
 800b52c:	464b      	mov	r3, r9
 800b52e:	0089      	lsls	r1, r1, #2
 800b530:	5c5b      	ldrb	r3, [r3, r1]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d0f0      	beq.n	800b518 <SaveToRO+0x58>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b536:	466b      	mov	r3, sp
 800b538:	22fe      	movs	r2, #254	; 0xfe
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800b53a:	1c58      	adds	r0, r3, #1
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b53c:	701a      	strb	r2, [r3, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800b53e:	4449      	add	r1, r9
 800b540:	2214      	movs	r2, #20
 800b542:	f007 fbde 	bl	8012d02 <memcpy>
 800b546:	2314      	movs	r3, #20
 800b548:	469b      	mov	fp, r3
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b54a:	466b      	mov	r3, sp
 800b54c:	44a3      	add	fp, r4
 800b54e:	1b1e      	subs	r6, r3, r4
 800b550:	465b      	mov	r3, fp
 800b552:	46ab      	mov	fp, r5
 800b554:	001d      	movs	r5, r3
 800b556:	5b32      	ldrh	r2, [r6, r4]
 800b558:	2300      	movs	r3, #0
 800b55a:	0021      	movs	r1, r4
 800b55c:	2001      	movs	r0, #1
 800b55e:	f005 f9f1 	bl	8010944 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b562:	484a      	ldr	r0, [pc, #296]	; (800b68c <SaveToRO+0x1cc>)
 800b564:	f005 f9aa 	bl	80108bc <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b568:	2800      	cmp	r0, #0
 800b56a:	d12e      	bne.n	800b5ca <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b56c:	2201      	movs	r2, #1
 800b56e:	693b      	ldr	r3, [r7, #16]
					currentAdd += 2;
 800b570:	3402      	adds	r4, #2
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b572:	4393      	bics	r3, r2
 800b574:	613b      	str	r3, [r7, #16]
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b576:	42ac      	cmp	r4, r5
 800b578:	d1ed      	bne.n	800b556 <SaveToRO+0x96>
 800b57a:	465d      	mov	r5, fp
				}				
			}			
			// Copy the snippet commands buffer. Always an even number. Note the string termination char might be skipped
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b57c:	4643      	mov	r3, r8
 800b57e:	195b      	adds	r3, r3, r5
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	444b      	add	r3, r9
 800b584:	2600      	movs	r6, #0
 800b586:	4698      	mov	r8, r3
 800b588:	0025      	movs	r5, r4
 800b58a:	e012      	b.n	800b5b2 <SaveToRO+0xf2>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800b58c:	0073      	lsls	r3, r6, #1
 800b58e:	5ae2      	ldrh	r2, [r4, r3]
 800b590:	0029      	movs	r1, r5
 800b592:	2300      	movs	r3, #0
 800b594:	2001      	movs	r0, #1
 800b596:	f005 f9d5 	bl	8010944 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b59a:	483c      	ldr	r0, [pc, #240]	; (800b68c <SaveToRO+0x1cc>)
 800b59c:	f005 f98e 	bl	80108bc <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d112      	bne.n	800b5ca <SaveToRO+0x10a>
					return pFlash.ErrorCode;
				} else {
					/* If the program operation is completed, disable the PG Bit */
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	693b      	ldr	r3, [r7, #16]
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5a8:	3601      	adds	r6, #1
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5aa:	4393      	bics	r3, r2
 800b5ac:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800b5ae:	3502      	adds	r5, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5b0:	b2f6      	uxtb	r6, r6
 800b5b2:	4643      	mov	r3, r8
 800b5b4:	68dc      	ldr	r4, [r3, #12]
 800b5b6:	0020      	movs	r0, r4
 800b5b8:	f7f4 fdae 	bl	8000118 <strlen>
 800b5bc:	3001      	adds	r0, #1
 800b5be:	0840      	lsrs	r0, r0, #1
 800b5c0:	4286      	cmp	r6, r0
 800b5c2:	d3e3      	bcc.n	800b58c <SaveToRO+0xcc>
 800b5c4:	002c      	movs	r4, r5
 800b5c6:	465d      	mov	r5, fp
 800b5c8:	e7a6      	b.n	800b518 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800b5ca:	4b36      	ldr	r3, [pc, #216]	; (800b6a4 <SaveToRO+0x1e4>)
 800b5cc:	69d8      	ldr	r0, [r3, #28]
 800b5ce:	b2c0      	uxtb	r0, r0
	}
	
	HAL_FLASH_Lock();
	
	return result;
}
 800b5d0:	b007      	add	sp, #28
 800b5d2:	bc3c      	pop	{r2, r3, r4, r5}
 800b5d4:	4690      	mov	r8, r2
 800b5d6:	4699      	mov	r9, r3
 800b5d8:	46a2      	mov	sl, r4
 800b5da:	46ab      	mov	fp, r5
 800b5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800b5de:	4a32      	ldr	r2, [pc, #200]	; (800b6a8 <SaveToRO+0x1e8>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b5e0:	4929      	ldr	r1, [pc, #164]	; (800b688 <SaveToRO+0x1c8>)
		temp = (uint16_t) (N<<8) + myID;
 800b5e2:	4693      	mov	fp, r2
 800b5e4:	7812      	ldrb	r2, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b5e6:	2001      	movs	r0, #1
		temp = (uint16_t) (N<<8) + myID;
 800b5e8:	0212      	lsls	r2, r2, #8
 800b5ea:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b5ec:	b292      	uxth	r2, r2
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	f005 f9a8 	bl	8010944 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b5f4:	4825      	ldr	r0, [pc, #148]	; (800b68c <SaveToRO+0x1cc>)
 800b5f6:	f005 f961 	bl	80108bc <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	d1e5      	bne.n	800b5ca <SaveToRO+0x10a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5fe:	2201      	movs	r2, #1
 800b600:	6923      	ldr	r3, [r4, #16]
 800b602:	4393      	bics	r3, r2
 800b604:	6123      	str	r3, [r4, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800b606:	465b      	mov	r3, fp
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d100      	bne.n	800b610 <SaveToRO+0x150>
 800b60e:	e777      	b.n	800b500 <SaveToRO+0x40>
 800b610:	2301      	movs	r3, #1
 800b612:	469a      	mov	sl, r3
 800b614:	4b25      	ldr	r3, [pc, #148]	; (800b6ac <SaveToRO+0x1ec>)
	uint16_t add = 2, temp = 0;
 800b616:	2602      	movs	r6, #2
 800b618:	4699      	mov	r9, r3
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b61a:	46a0      	mov	r8, r4
 800b61c:	4653      	mov	r3, sl
 800b61e:	1e5d      	subs	r5, r3, #1
 800b620:	2316      	movs	r3, #22
 800b622:	464f      	mov	r7, r9
 800b624:	435d      	muls	r5, r3
 800b626:	464b      	mov	r3, r9
 800b628:	3716      	adds	r7, #22
 800b62a:	195c      	adds	r4, r3, r5
 800b62c:	197f      	adds	r7, r7, r5
 800b62e:	e002      	b.n	800b636 <SaveToRO+0x176>
 800b630:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b632:	42a7      	cmp	r7, r4
 800b634:	d01a      	beq.n	800b66c <SaveToRO+0x1ac>
				if (array[i-1][0]) {
 800b636:	464b      	mov	r3, r9
 800b638:	5b5b      	ldrh	r3, [r3, r5]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d0f8      	beq.n	800b630 <SaveToRO+0x170>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800b63e:	4b12      	ldr	r3, [pc, #72]	; (800b688 <SaveToRO+0x1c8>)
 800b640:	8822      	ldrh	r2, [r4, #0]
 800b642:	18f1      	adds	r1, r6, r3
 800b644:	2001      	movs	r0, #1
 800b646:	2300      	movs	r3, #0
 800b648:	f005 f97c 	bl	8010944 <HAL_FLASH_Program>
					add += 2;
 800b64c:	3602      	adds	r6, #2
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b64e:	480f      	ldr	r0, [pc, #60]	; (800b68c <SaveToRO+0x1cc>)
					add += 2;
 800b650:	b2b6      	uxth	r6, r6
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b652:	f005 f933 	bl	80108bc <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b656:	2800      	cmp	r0, #0
 800b658:	d1b7      	bne.n	800b5ca <SaveToRO+0x10a>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b65a:	4643      	mov	r3, r8
 800b65c:	2201      	movs	r2, #1
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	3402      	adds	r4, #2
 800b662:	4393      	bics	r3, r2
 800b664:	4642      	mov	r2, r8
 800b666:	6113      	str	r3, [r2, #16]
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b668:	42a7      	cmp	r7, r4
 800b66a:	d1e4      	bne.n	800b636 <SaveToRO+0x176>
		for(uint8_t i=1 ; i<=N ; i++)
 800b66c:	4653      	mov	r3, sl
 800b66e:	3301      	adds	r3, #1
 800b670:	b2db      	uxtb	r3, r3
 800b672:	469a      	mov	sl, r3
 800b674:	465b      	mov	r3, fp
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	4553      	cmp	r3, sl
 800b67a:	d2cf      	bcs.n	800b61c <SaveToRO+0x15c>
 800b67c:	e740      	b.n	800b500 <SaveToRO+0x40>
	HAL_FLASH_Lock();
 800b67e:	f005 f913 	bl	80108a8 <HAL_FLASH_Lock>
	return result;
 800b682:	2000      	movs	r0, #0
 800b684:	e7a4      	b.n	800b5d0 <SaveToRO+0x110>
 800b686:	46c0      	nop			; (mov r8, r8)
 800b688:	0801d800 	.word	0x0801d800
 800b68c:	0000c350 	.word	0x0000c350
 800b690:	40022000 	.word	0x40022000
 800b694:	20000a98 	.word	0x20000a98
 800b698:	20001180 	.word	0x20001180
 800b69c:	20006ec4 	.word	0x20006ec4
 800b6a0:	0801dc00 	.word	0x0801dc00
 800b6a4:	200073a8 	.word	0x200073a8
 800b6a8:	20000008 	.word	0x20000008
 800b6ac:	20000f0c 	.word	0x20000f0c

0800b6b0 <ClearROtopology>:
/* --- Clear array topology in SRAM and Flash RO --- 
*/
uint8_t ClearROtopology(void)
{
	// Clear the array 
	memset(array, 0, sizeof(array));
 800b6b0:	228f      	movs	r2, #143	; 0x8f
{
 800b6b2:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800b6b4:	0092      	lsls	r2, r2, #2
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	4805      	ldr	r0, [pc, #20]	; (800b6d0 <ClearROtopology+0x20>)
 800b6ba:	f007 fb2b 	bl	8012d14 <memset>
	N = 1; myID = 0;
 800b6be:	2201      	movs	r2, #1
 800b6c0:	4b04      	ldr	r3, [pc, #16]	; (800b6d4 <ClearROtopology+0x24>)
 800b6c2:	701a      	strb	r2, [r3, #0]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	4b04      	ldr	r3, [pc, #16]	; (800b6d8 <ClearROtopology+0x28>)
 800b6c8:	701a      	strb	r2, [r3, #0]
	
	return SaveToRO();
 800b6ca:	f7ff fef9 	bl	800b4c0 <SaveToRO>
}
 800b6ce:	bd10      	pop	{r4, pc}
 800b6d0:	20000f0c 	.word	0x20000f0c
 800b6d4:	20000008 	.word	0x20000008
 800b6d8:	20000a98 	.word	0x20000a98

0800b6dc <Module_Peripheral_Init>:
/*-----------------------------------------------------------*/
/* --- H1AR0 module initialization. 
*/
void Module_Peripheral_Init(void)
{
 800b6dc:	b510      	push	{r4, lr}
	/* Array ports */
  MX_USART1_UART_Init();
 800b6de:	f001 fca7 	bl	800d030 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b6e2:	f001 fcbd 	bl	800d060 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800b6e6:	f001 fcd3 	bl	800d090 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 800b6ea:	f001 fd01 	bl	800d0f0 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800b6ee:	f001 fd17 	bl	800d120 <MX_USART6_UART_Init>
	
	/* USB port */
  MX_USART4_UART_Init();
 800b6f2:	f001 fce5 	bl	800d0c0 <MX_USART4_UART_Init>
	
	/* Bridge USB and P5 ports by default - only if PUSB is not bridged with any other port */
	if (portStatus[PUSB] != STREAM)
 800b6f6:	4b04      	ldr	r3, [pc, #16]	; (800b708 <Module_Peripheral_Init+0x2c>)
 800b6f8:	799b      	ldrb	r3, [r3, #6]
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d003      	beq.n	800b706 <Module_Peripheral_Init+0x2a>
		Bridge(PUSB, P5);
 800b6fe:	2105      	movs	r1, #5
 800b700:	2006      	movs	r0, #6
 800b702:	f7f9 f937 	bl	8004974 <Bridge>
	
}
 800b706:	bd10      	pop	{r4, pc}
 800b708:	20000c2c 	.word	0x20000c2c

0800b70c <Module_MessagingTask>:
			result = H1AR0_ERR_UnknownMessage;
			break;
	}			

	return result;	
}
 800b70c:	2001      	movs	r0, #1
 800b70e:	4770      	bx	lr

0800b710 <RegisterModuleCLICommands>:
/* --- Register this module CLI Commands 
*/
void RegisterModuleCLICommands(void)
{

}
 800b710:	4770      	bx	lr
 800b712:	46c0      	nop			; (mov r8, r8)

0800b714 <GetPort>:

/* --- Get the port for a given UART. 
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART2)
 800b714:	6800      	ldr	r0, [r0, #0]
 800b716:	4b11      	ldr	r3, [pc, #68]	; (800b75c <GetPort+0x48>)
 800b718:	4298      	cmp	r0, r3
 800b71a:	d014      	beq.n	800b746 <GetPort+0x32>
			return P1;
	else if (huart->Instance == USART6)
 800b71c:	4b10      	ldr	r3, [pc, #64]	; (800b760 <GetPort+0x4c>)
 800b71e:	4298      	cmp	r0, r3
 800b720:	d015      	beq.n	800b74e <GetPort+0x3a>
			return P2;
	else if (huart->Instance == USART3)
 800b722:	4b10      	ldr	r3, [pc, #64]	; (800b764 <GetPort+0x50>)
 800b724:	4298      	cmp	r0, r3
 800b726:	d014      	beq.n	800b752 <GetPort+0x3e>
			return P3;
	else if (huart->Instance == USART1)
 800b728:	4b0f      	ldr	r3, [pc, #60]	; (800b768 <GetPort+0x54>)
 800b72a:	4298      	cmp	r0, r3
 800b72c:	d00d      	beq.n	800b74a <GetPort+0x36>
			return P4;
	else if (huart->Instance == USART5)
 800b72e:	4b0f      	ldr	r3, [pc, #60]	; (800b76c <GetPort+0x58>)
 800b730:	4298      	cmp	r0, r3
 800b732:	d010      	beq.n	800b756 <GetPort+0x42>
			return P5;
	else if (huart->Instance == USART4)
			return P6;
		
	return 0;
 800b734:	4b0e      	ldr	r3, [pc, #56]	; (800b770 <GetPort+0x5c>)
 800b736:	469c      	mov	ip, r3
 800b738:	4460      	add	r0, ip
 800b73a:	4243      	negs	r3, r0
 800b73c:	4158      	adcs	r0, r3
 800b73e:	2306      	movs	r3, #6
 800b740:	4240      	negs	r0, r0
 800b742:	4018      	ands	r0, r3
}
 800b744:	4770      	bx	lr
			return P1;
 800b746:	2001      	movs	r0, #1
 800b748:	e7fc      	b.n	800b744 <GetPort+0x30>
			return P4;
 800b74a:	2004      	movs	r0, #4
 800b74c:	e7fa      	b.n	800b744 <GetPort+0x30>
			return P2;
 800b74e:	2002      	movs	r0, #2
 800b750:	e7f8      	b.n	800b744 <GetPort+0x30>
			return P3;
 800b752:	2003      	movs	r0, #3
 800b754:	e7f6      	b.n	800b744 <GetPort+0x30>
			return P5;
 800b756:	2005      	movs	r0, #5
 800b758:	e7f4      	b.n	800b744 <GetPort+0x30>
 800b75a:	46c0      	nop			; (mov r8, r8)
 800b75c:	40004400 	.word	0x40004400
 800b760:	40011400 	.word	0x40011400
 800b764:	40004800 	.word	0x40004800
 800b768:	40013800 	.word	0x40013800
 800b76c:	40005000 	.word	0x40005000
 800b770:	bfffb400 	.word	0xbfffb400

0800b774 <DMA_Init>:

/** 
  * Initialize the DMAs
  */
void DMA_Init(void) 
{
 800b774:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b776:	46de      	mov	lr, fp
 800b778:	4657      	mov	r7, sl
 800b77a:	464e      	mov	r6, r9
 800b77c:	4645      	mov	r5, r8
	/* DMA controller clock enable */
	__DMA1_CLK_ENABLE();
 800b77e:	2201      	movs	r2, #1
 800b780:	4b5f      	ldr	r3, [pc, #380]	; (800b900 <DMA_Init+0x18c>)
{
 800b782:	b5e0      	push	{r5, r6, r7, lr}
	__DMA1_CLK_ENABLE();
 800b784:	6959      	ldr	r1, [r3, #20]
{
 800b786:	b083      	sub	sp, #12
	__DMA1_CLK_ENABLE();
 800b788:	4311      	orrs	r1, r2
 800b78a:	6159      	str	r1, [r3, #20]
 800b78c:	6959      	ldr	r1, [r3, #20]

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800b78e:	4c5d      	ldr	r4, [pc, #372]	; (800b904 <DMA_Init+0x190>)
	__DMA1_CLK_ENABLE();
 800b790:	400a      	ands	r2, r1
 800b792:	9200      	str	r2, [sp, #0]
 800b794:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800b796:	2202      	movs	r2, #2
 800b798:	6959      	ldr	r1, [r3, #20]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_CIRCULAR; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b79a:	2780      	movs	r7, #128	; 0x80
	__DMA2_CLK_ENABLE();
 800b79c:	4311      	orrs	r1, r2
 800b79e:	6159      	str	r1, [r3, #20]
 800b7a0:	695b      	ldr	r3, [r3, #20]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b7a2:	2500      	movs	r5, #0
	__DMA2_CLK_ENABLE();
 800b7a4:	401a      	ands	r2, r3
 800b7a6:	9201      	str	r2, [sp, #4]
 800b7a8:	9b01      	ldr	r3, [sp, #4]
	hDMA->Instance = ch;
 800b7aa:	4b57      	ldr	r3, [pc, #348]	; (800b908 <DMA_Init+0x194>)
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b7ac:	2680      	movs	r6, #128	; 0x80
	hDMA->Instance = ch;
 800b7ae:	6023      	str	r3, [r4, #0]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b7b0:	2320      	movs	r3, #32
 800b7b2:	469b      	mov	fp, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b7b4:	01bf      	lsls	r7, r7, #6
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b7b6:	6065      	str	r5, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b7b8:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b7ba:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b7bc:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7be:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b7c0:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b7c2:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800b7c4:	0020      	movs	r0, r4
 800b7c6:	f004 fb3d 	bl	800fe44 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b7ca:	4b50      	ldr	r3, [pc, #320]	; (800b90c <DMA_Init+0x198>)
	HAL_DMA_Init(hDMA);		
 800b7cc:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800b7ce:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b7d0:	465b      	mov	r3, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b7d2:	63e5      	str	r5, [r4, #60]	; 0x3c
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b7d4:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b7d6:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b7d8:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7da:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b7dc:	6523      	str	r3, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b7de:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800b7e0:	3038      	adds	r0, #56	; 0x38
 800b7e2:	f004 fb2f 	bl	800fe44 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b7e6:	4b4a      	ldr	r3, [pc, #296]	; (800b910 <DMA_Init+0x19c>)
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b7e8:	465a      	mov	r2, fp
	hDMA->Instance = ch;
 800b7ea:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7ec:	2384      	movs	r3, #132	; 0x84
	HAL_DMA_Init(hDMA);		
 800b7ee:	0020      	movs	r0, r4
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7f0:	50e5      	str	r5, [r4, r3]
 800b7f2:	469a      	mov	sl, r3
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b7f4:	3304      	adds	r3, #4
 800b7f6:	50e2      	str	r2, [r4, r3]
 800b7f8:	4699      	mov	r9, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b7fa:	3304      	adds	r3, #4
 800b7fc:	50e7      	str	r7, [r4, r3]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b7fe:	6765      	str	r5, [r4, #116]	; 0x74
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b800:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b802:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b804:	51a5      	str	r5, [r4, r6]
	HAL_DMA_Init(hDMA);		
 800b806:	3070      	adds	r0, #112	; 0x70
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b808:	4698      	mov	r8, r3
	HAL_DMA_Init(hDMA);		
 800b80a:	f004 fb1b 	bl	800fe44 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b80e:	23a8      	movs	r3, #168	; 0xa8
 800b810:	4a40      	ldr	r2, [pc, #256]	; (800b914 <DMA_Init+0x1a0>)
	HAL_DMA_Init(hDMA);		
 800b812:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800b814:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b816:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b818:	3304      	adds	r3, #4
 800b81a:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b81c:	3304      	adds	r3, #4
 800b81e:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b820:	3304      	adds	r3, #4
 800b822:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b824:	3304      	adds	r3, #4
 800b826:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b828:	3304      	adds	r3, #4
 800b82a:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b82c:	3304      	adds	r3, #4
 800b82e:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b830:	3304      	adds	r3, #4
 800b832:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b834:	30a8      	adds	r0, #168	; 0xa8
 800b836:	f004 fb05 	bl	800fe44 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b83a:	23e0      	movs	r3, #224	; 0xe0
 800b83c:	4a36      	ldr	r2, [pc, #216]	; (800b918 <DMA_Init+0x1a4>)
	HAL_DMA_Init(hDMA);		
 800b83e:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800b840:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b842:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b844:	3304      	adds	r3, #4
 800b846:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b848:	3304      	adds	r3, #4
 800b84a:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b84c:	3304      	adds	r3, #4
 800b84e:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b850:	3304      	adds	r3, #4
 800b852:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b854:	3304      	adds	r3, #4
 800b856:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b858:	3304      	adds	r3, #4
 800b85a:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b85c:	3304      	adds	r3, #4
 800b85e:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b860:	30e0      	adds	r0, #224	; 0xe0
 800b862:	f004 faef 	bl	800fe44 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b866:	238c      	movs	r3, #140	; 0x8c
 800b868:	4a2c      	ldr	r2, [pc, #176]	; (800b91c <DMA_Init+0x1a8>)
 800b86a:	005b      	lsls	r3, r3, #1
 800b86c:	50e2      	str	r2, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b86e:	0020      	movs	r0, r4
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b870:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b872:	3304      	adds	r3, #4
 800b874:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b876:	3304      	adds	r3, #4
 800b878:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b87a:	3304      	adds	r3, #4
 800b87c:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b87e:	3304      	adds	r3, #4
 800b880:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b882:	3304      	adds	r3, #4
 800b884:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b886:	3304      	adds	r3, #4
 800b888:	50e2      	str	r2, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b88a:	3019      	adds	r0, #25
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b88c:	3304      	adds	r3, #4
 800b88e:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b890:	30ff      	adds	r0, #255	; 0xff
 800b892:	f004 fad7 	bl	800fe44 <HAL_DMA_Init>

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800b896:	4c22      	ldr	r4, [pc, #136]	; (800b920 <DMA_Init+0x1ac>)
 800b898:	4b22      	ldr	r3, [pc, #136]	; (800b924 <DMA_Init+0x1b0>)
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b89a:	60a5      	str	r5, [r4, #8]
	hDMA->Instance = ch;
 800b89c:	6023      	str	r3, [r4, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b89e:	2310      	movs	r3, #16
 800b8a0:	469b      	mov	fp, r3
 800b8a2:	6063      	str	r3, [r4, #4]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b8a4:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b8a6:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b8a8:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800b8aa:	61a5      	str	r5, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b8ac:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800b8ae:	0020      	movs	r0, r4
 800b8b0:	f004 fac8 	bl	800fe44 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b8b4:	4b1c      	ldr	r3, [pc, #112]	; (800b928 <DMA_Init+0x1b4>)
	HAL_DMA_Init(hDMA);		
 800b8b6:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800b8b8:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b8ba:	465b      	mov	r3, fp
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b8bc:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b8be:	63e3      	str	r3, [r4, #60]	; 0x3c
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b8c0:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b8c2:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b8c4:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_NORMAL; 
 800b8c6:	6525      	str	r5, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b8c8:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800b8ca:	3038      	adds	r0, #56	; 0x38
 800b8cc:	f004 faba 	bl	800fe44 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b8d0:	4b16      	ldr	r3, [pc, #88]	; (800b92c <DMA_Init+0x1b8>)
	HAL_DMA_Init(hDMA);		
 800b8d2:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800b8d4:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b8d6:	465b      	mov	r3, fp
 800b8d8:	6763      	str	r3, [r4, #116]	; 0x74
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b8da:	4653      	mov	r3, sl
 800b8dc:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_NORMAL; 
 800b8de:	464b      	mov	r3, r9
 800b8e0:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b8e2:	4643      	mov	r3, r8
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b8e4:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b8e6:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b8e8:	51a5      	str	r5, [r4, r6]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b8ea:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b8ec:	3070      	adds	r0, #112	; 0x70
 800b8ee:	f004 faa9 	bl	800fe44 <HAL_DMA_Init>
}
 800b8f2:	b003      	add	sp, #12
 800b8f4:	bc3c      	pop	{r2, r3, r4, r5}
 800b8f6:	4690      	mov	r8, r2
 800b8f8:	4699      	mov	r9, r3
 800b8fa:	46a2      	mov	sl, r4
 800b8fc:	46ab      	mov	fp, r5
 800b8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b900:	40021000 	.word	0x40021000
 800b904:	20001e70 	.word	0x20001e70
 800b908:	40020008 	.word	0x40020008
 800b90c:	40020030 	.word	0x40020030
 800b910:	40020058 	.word	0x40020058
 800b914:	4002006c 	.word	0x4002006c
 800b918:	4002041c 	.word	0x4002041c
 800b91c:	40020430 	.word	0x40020430
 800b920:	20001dc8 	.word	0x20001dc8
 800b924:	4002001c 	.word	0x4002001c
 800b928:	40020044 	.word	0x40020044
 800b92c:	40020080 	.word	0x40020080

0800b930 <DMA_MSG_RX_CH_Init>:
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b930:	2300      	movs	r3, #0
{
 800b932:	b510      	push	{r4, lr}
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b934:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b936:	6083      	str	r3, [r0, #8]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b938:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b93a:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b93c:	3320      	adds	r3, #32
 800b93e:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b940:	2380      	movs	r3, #128	; 0x80
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b942:	2280      	movs	r2, #128	; 0x80
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b944:	019b      	lsls	r3, r3, #6
	hDMA->Instance = ch;
 800b946:	6001      	str	r1, [r0, #0]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b948:	60c2      	str	r2, [r0, #12]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b94a:	61c3      	str	r3, [r0, #28]
	HAL_DMA_Init(hDMA);		
 800b94c:	f004 fa7a 	bl	800fe44 <HAL_DMA_Init>
}
 800b950:	bd10      	pop	{r4, pc}
 800b952:	46c0      	nop			; (mov r8, r8)

0800b954 <DMA_STREAM_CH_Init>:
/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b954:	2300      	movs	r3, #0
{
 800b956:	b510      	push	{r4, lr}
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b958:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b95a:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800b95c:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b95e:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b960:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b962:	3320      	adds	r3, #32
 800b964:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800b966:	2380      	movs	r3, #128	; 0x80
 800b968:	015b      	lsls	r3, r3, #5
	hDMA->Instance = ch;
 800b96a:	6001      	str	r1, [r0, #0]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800b96c:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b96e:	f004 fa69 	bl	800fe44 <HAL_DMA_Init>
}
 800b972:	bd10      	pop	{r4, pc}

0800b974 <SetupDMAInterrupts>:

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
	switch ((uint32_t)hDMA->Instance)
 800b974:	6803      	ldr	r3, [r0, #0]
 800b976:	4a21      	ldr	r2, [pc, #132]	; (800b9fc <SetupDMAInterrupts+0x88>)
{
 800b978:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d01c      	beq.n	800b9b8 <SetupDMAInterrupts+0x44>
 800b97e:	d80e      	bhi.n	800b99e <SetupDMAInterrupts+0x2a>
 800b980:	4a1f      	ldr	r2, [pc, #124]	; (800ba00 <SetupDMAInterrupts+0x8c>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d026      	beq.n	800b9d4 <SetupDMAInterrupts+0x60>
 800b986:	d82d      	bhi.n	800b9e4 <SetupDMAInterrupts+0x70>
 800b988:	4a1e      	ldr	r2, [pc, #120]	; (800ba04 <SetupDMAInterrupts+0x90>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d131      	bne.n	800b9f2 <SetupDMAInterrupts+0x7e>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800b98e:	2009      	movs	r0, #9
 800b990:	2200      	movs	r2, #0
 800b992:	f004 f8cf 	bl	800fb34 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800b996:	2009      	movs	r0, #9
 800b998:	f004 f8f8 	bl	800fb8c <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b99c:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b99e:	4a1a      	ldr	r2, [pc, #104]	; (800ba08 <SetupDMAInterrupts+0x94>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d017      	beq.n	800b9d4 <SetupDMAInterrupts+0x60>
 800b9a4:	d910      	bls.n	800b9c8 <SetupDMAInterrupts+0x54>
 800b9a6:	4a19      	ldr	r2, [pc, #100]	; (800ba0c <SetupDMAInterrupts+0x98>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d005      	beq.n	800b9b8 <SetupDMAInterrupts+0x44>
 800b9ac:	4a18      	ldr	r2, [pc, #96]	; (800ba10 <SetupDMAInterrupts+0x9c>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d002      	beq.n	800b9b8 <SetupDMAInterrupts+0x44>
 800b9b2:	4a18      	ldr	r2, [pc, #96]	; (800ba14 <SetupDMAInterrupts+0xa0>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d1f1      	bne.n	800b99c <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	200b      	movs	r0, #11
 800b9bc:	f004 f8ba 	bl	800fb34 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b9c0:	200b      	movs	r0, #11
 800b9c2:	f004 f8e3 	bl	800fb8c <HAL_NVIC_EnableIRQ>
}
 800b9c6:	e7e9      	b.n	800b99c <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b9c8:	4a13      	ldr	r2, [pc, #76]	; (800ba18 <SetupDMAInterrupts+0xa4>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d0f4      	beq.n	800b9b8 <SetupDMAInterrupts+0x44>
 800b9ce:	4a13      	ldr	r2, [pc, #76]	; (800ba1c <SetupDMAInterrupts+0xa8>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d1e3      	bne.n	800b99c <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	200a      	movs	r0, #10
 800b9d8:	f004 f8ac 	bl	800fb34 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b9dc:	200a      	movs	r0, #10
 800b9de:	f004 f8d5 	bl	800fb8c <HAL_NVIC_EnableIRQ>
			break;
 800b9e2:	e7db      	b.n	800b99c <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b9e4:	4a0e      	ldr	r2, [pc, #56]	; (800ba20 <SetupDMAInterrupts+0xac>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d0e6      	beq.n	800b9b8 <SetupDMAInterrupts+0x44>
 800b9ea:	4a0e      	ldr	r2, [pc, #56]	; (800ba24 <SetupDMAInterrupts+0xb0>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d1d5      	bne.n	800b99c <SetupDMAInterrupts+0x28>
 800b9f0:	e7e2      	b.n	800b9b8 <SetupDMAInterrupts+0x44>
 800b9f2:	4a0d      	ldr	r2, [pc, #52]	; (800ba28 <SetupDMAInterrupts+0xb4>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d0ed      	beq.n	800b9d4 <SetupDMAInterrupts+0x60>
 800b9f8:	e7d0      	b.n	800b99c <SetupDMAInterrupts+0x28>
 800b9fa:	46c0      	nop			; (mov r8, r8)
 800b9fc:	4002006c 	.word	0x4002006c
 800ba00:	40020030 	.word	0x40020030
 800ba04:	40020008 	.word	0x40020008
 800ba08:	4002041c 	.word	0x4002041c
 800ba0c:	40020444 	.word	0x40020444
 800ba10:	40020458 	.word	0x40020458
 800ba14:	40020430 	.word	0x40020430
 800ba18:	40020080 	.word	0x40020080
 800ba1c:	40020408 	.word	0x40020408
 800ba20:	40020044 	.word	0x40020044
 800ba24:	40020058 	.word	0x40020058
 800ba28:	4002001c 	.word	0x4002001c

0800ba2c <UnSetupDMAInterrupts>:

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
	switch ((uint32_t)hDMA->Instance)
 800ba2c:	6803      	ldr	r3, [r0, #0]
 800ba2e:	4a1b      	ldr	r2, [pc, #108]	; (800ba9c <UnSetupDMAInterrupts+0x70>)
{
 800ba30:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d018      	beq.n	800ba68 <UnSetupDMAInterrupts+0x3c>
 800ba36:	d80a      	bhi.n	800ba4e <UnSetupDMAInterrupts+0x22>
 800ba38:	4a19      	ldr	r2, [pc, #100]	; (800baa0 <UnSetupDMAInterrupts+0x74>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d01e      	beq.n	800ba7c <UnSetupDMAInterrupts+0x50>
 800ba3e:	d821      	bhi.n	800ba84 <UnSetupDMAInterrupts+0x58>
 800ba40:	4a18      	ldr	r2, [pc, #96]	; (800baa4 <UnSetupDMAInterrupts+0x78>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d125      	bne.n	800ba92 <UnSetupDMAInterrupts+0x66>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800ba46:	2009      	movs	r0, #9
 800ba48:	f004 f8aa 	bl	800fba0 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800ba4c:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800ba4e:	4a16      	ldr	r2, [pc, #88]	; (800baa8 <UnSetupDMAInterrupts+0x7c>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d013      	beq.n	800ba7c <UnSetupDMAInterrupts+0x50>
 800ba54:	d90c      	bls.n	800ba70 <UnSetupDMAInterrupts+0x44>
 800ba56:	4a15      	ldr	r2, [pc, #84]	; (800baac <UnSetupDMAInterrupts+0x80>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d005      	beq.n	800ba68 <UnSetupDMAInterrupts+0x3c>
 800ba5c:	4a14      	ldr	r2, [pc, #80]	; (800bab0 <UnSetupDMAInterrupts+0x84>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d002      	beq.n	800ba68 <UnSetupDMAInterrupts+0x3c>
 800ba62:	4a14      	ldr	r2, [pc, #80]	; (800bab4 <UnSetupDMAInterrupts+0x88>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d1f1      	bne.n	800ba4c <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800ba68:	200b      	movs	r0, #11
 800ba6a:	f004 f899 	bl	800fba0 <HAL_NVIC_DisableIRQ>
}
 800ba6e:	e7ed      	b.n	800ba4c <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800ba70:	4a11      	ldr	r2, [pc, #68]	; (800bab8 <UnSetupDMAInterrupts+0x8c>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d0f8      	beq.n	800ba68 <UnSetupDMAInterrupts+0x3c>
 800ba76:	4a11      	ldr	r2, [pc, #68]	; (800babc <UnSetupDMAInterrupts+0x90>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d1e7      	bne.n	800ba4c <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800ba7c:	200a      	movs	r0, #10
 800ba7e:	f004 f88f 	bl	800fba0 <HAL_NVIC_DisableIRQ>
			break;
 800ba82:	e7e3      	b.n	800ba4c <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800ba84:	4a0e      	ldr	r2, [pc, #56]	; (800bac0 <UnSetupDMAInterrupts+0x94>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d0ee      	beq.n	800ba68 <UnSetupDMAInterrupts+0x3c>
 800ba8a:	4a0e      	ldr	r2, [pc, #56]	; (800bac4 <UnSetupDMAInterrupts+0x98>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d1dd      	bne.n	800ba4c <UnSetupDMAInterrupts+0x20>
 800ba90:	e7ea      	b.n	800ba68 <UnSetupDMAInterrupts+0x3c>
 800ba92:	4a0d      	ldr	r2, [pc, #52]	; (800bac8 <UnSetupDMAInterrupts+0x9c>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d0f1      	beq.n	800ba7c <UnSetupDMAInterrupts+0x50>
 800ba98:	e7d8      	b.n	800ba4c <UnSetupDMAInterrupts+0x20>
 800ba9a:	46c0      	nop			; (mov r8, r8)
 800ba9c:	4002006c 	.word	0x4002006c
 800baa0:	40020030 	.word	0x40020030
 800baa4:	40020008 	.word	0x40020008
 800baa8:	4002041c 	.word	0x4002041c
 800baac:	40020444 	.word	0x40020444
 800bab0:	40020458 	.word	0x40020458
 800bab4:	40020430 	.word	0x40020430
 800bab8:	40020080 	.word	0x40020080
 800babc:	40020408 	.word	0x40020408
 800bac0:	40020044 	.word	0x40020044
 800bac4:	40020058 	.word	0x40020058
 800bac8:	4002001c 	.word	0x4002001c

0800bacc <DMA_MSG_TX_UnSetup>:
{	
 800bacc:	b510      	push	{r4, lr}
 800bace:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800bad0:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800bad2:	f7ff ffab 	bl	800ba2c <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800bad6:	2300      	movs	r3, #0
 800bad8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bada:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800badc:	6623      	str	r3, [r4, #96]	; 0x60
}
 800bade:	bd10      	pop	{r4, pc}

0800bae0 <RemapAndLinkDMAtoUARTRx>:
/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bae0:	6803      	ldr	r3, [r0, #0]
 800bae2:	4ac6      	ldr	r2, [pc, #792]	; (800bdfc <RemapAndLinkDMAtoUARTRx+0x31c>)
{
 800bae4:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d03a      	beq.n	800bb60 <RemapAndLinkDMAtoUARTRx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800baea:	4ac5      	ldr	r2, [pc, #788]	; (800be00 <RemapAndLinkDMAtoUARTRx+0x320>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d058      	beq.n	800bba2 <RemapAndLinkDMAtoUARTRx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800baf0:	4ac4      	ldr	r2, [pc, #784]	; (800be04 <RemapAndLinkDMAtoUARTRx+0x324>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d100      	bne.n	800baf8 <RemapAndLinkDMAtoUARTRx+0x18>
 800baf6:	e093      	b.n	800bc20 <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800baf8:	4ac3      	ldr	r2, [pc, #780]	; (800be08 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d100      	bne.n	800bb00 <RemapAndLinkDMAtoUARTRx+0x20>
 800bafe:	e0c0      	b.n	800bc82 <RemapAndLinkDMAtoUARTRx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800bb00:	4ac2      	ldr	r2, [pc, #776]	; (800be0c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d100      	bne.n	800bb08 <RemapAndLinkDMAtoUARTRx+0x28>
 800bb06:	e19d      	b.n	800be44 <RemapAndLinkDMAtoUARTRx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800bb08:	4ac1      	ldr	r2, [pc, #772]	; (800be10 <RemapAndLinkDMAtoUARTRx+0x330>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d100      	bne.n	800bb10 <RemapAndLinkDMAtoUARTRx+0x30>
 800bb0e:	e1b9      	b.n	800be84 <RemapAndLinkDMAtoUARTRx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800bb10:	4ac0      	ldr	r2, [pc, #768]	; (800be14 <RemapAndLinkDMAtoUARTRx+0x334>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d000      	beq.n	800bb18 <RemapAndLinkDMAtoUARTRx+0x38>
 800bb16:	e265      	b.n	800bfe4 <RemapAndLinkDMAtoUARTRx+0x504>
 800bb18:	680b      	ldr	r3, [r1, #0]
 800bb1a:	4abf      	ldr	r2, [pc, #764]	; (800be18 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d100      	bne.n	800bb22 <RemapAndLinkDMAtoUARTRx+0x42>
 800bb20:	e230      	b.n	800bf84 <RemapAndLinkDMAtoUARTRx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800bb22:	4abe      	ldr	r2, [pc, #760]	; (800be1c <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d100      	bne.n	800bb2a <RemapAndLinkDMAtoUARTRx+0x4a>
 800bb28:	e237      	b.n	800bf9a <RemapAndLinkDMAtoUARTRx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800bb2a:	4abd      	ldr	r2, [pc, #756]	; (800be20 <RemapAndLinkDMAtoUARTRx+0x340>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d100      	bne.n	800bb32 <RemapAndLinkDMAtoUARTRx+0x52>
 800bb30:	e235      	b.n	800bf9e <RemapAndLinkDMAtoUARTRx+0x4be>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800bb32:	4abc      	ldr	r2, [pc, #752]	; (800be24 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d100      	bne.n	800bb3a <RemapAndLinkDMAtoUARTRx+0x5a>
 800bb38:	e23d      	b.n	800bfb6 <RemapAndLinkDMAtoUARTRx+0x4d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800bb3a:	4abb      	ldr	r2, [pc, #748]	; (800be28 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d100      	bne.n	800bb42 <RemapAndLinkDMAtoUARTRx+0x62>
 800bb40:	e245      	b.n	800bfce <RemapAndLinkDMAtoUARTRx+0x4ee>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800bb42:	4aba      	ldr	r2, [pc, #744]	; (800be2c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d145      	bne.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800bb48:	4ab9      	ldr	r2, [pc, #740]	; (800be30 <RemapAndLinkDMAtoUARTRx+0x350>)
 800bb4a:	23a8      	movs	r3, #168	; 0xa8
 800bb4c:	4db9      	ldr	r5, [pc, #740]	; (800be34 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bb4e:	58d4      	ldr	r4, [r2, r3]
 800bb50:	402c      	ands	r4, r5
 800bb52:	50d4      	str	r4, [r2, r3]
 800bb54:	24e0      	movs	r4, #224	; 0xe0
 800bb56:	58d5      	ldr	r5, [r2, r3]
 800bb58:	0124      	lsls	r4, r4, #4
 800bb5a:	432c      	orrs	r4, r5
 800bb5c:	50d4      	str	r4, [r2, r3]
 800bb5e:	e039      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bb60:	680b      	ldr	r3, [r1, #0]
 800bb62:	4aad      	ldr	r2, [pc, #692]	; (800be18 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d100      	bne.n	800bb6a <RemapAndLinkDMAtoUARTRx+0x8a>
 800bb68:	e07e      	b.n	800bc68 <RemapAndLinkDMAtoUARTRx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800bb6a:	4aac      	ldr	r2, [pc, #688]	; (800be1c <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d100      	bne.n	800bb72 <RemapAndLinkDMAtoUARTRx+0x92>
 800bb70:	e085      	b.n	800bc7e <RemapAndLinkDMAtoUARTRx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800bb72:	4aab      	ldr	r2, [pc, #684]	; (800be20 <RemapAndLinkDMAtoUARTRx+0x340>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d030      	beq.n	800bbda <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800bb78:	4aaa      	ldr	r2, [pc, #680]	; (800be24 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d039      	beq.n	800bbf2 <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800bb7e:	4aaa      	ldr	r2, [pc, #680]	; (800be28 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d042      	beq.n	800bc0a <RemapAndLinkDMAtoUARTRx+0x12a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800bb84:	4aa9      	ldr	r2, [pc, #676]	; (800be2c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d124      	bne.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800bb8a:	4aa9      	ldr	r2, [pc, #676]	; (800be30 <RemapAndLinkDMAtoUARTRx+0x350>)
 800bb8c:	23a8      	movs	r3, #168	; 0xa8
 800bb8e:	4da9      	ldr	r5, [pc, #676]	; (800be34 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bb90:	58d4      	ldr	r4, [r2, r3]
 800bb92:	402c      	ands	r4, r5
 800bb94:	50d4      	str	r4, [r2, r3]
 800bb96:	2480      	movs	r4, #128	; 0x80
 800bb98:	58d5      	ldr	r5, [r2, r3]
 800bb9a:	0124      	lsls	r4, r4, #4
 800bb9c:	432c      	orrs	r4, r5
 800bb9e:	50d4      	str	r4, [r2, r3]
 800bba0:	e018      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800bba2:	680b      	ldr	r3, [r1, #0]
 800bba4:	4a9c      	ldr	r2, [pc, #624]	; (800be18 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d100      	bne.n	800bbac <RemapAndLinkDMAtoUARTRx+0xcc>
 800bbaa:	e0b0      	b.n	800bd0e <RemapAndLinkDMAtoUARTRx+0x22e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800bbac:	4a9b      	ldr	r2, [pc, #620]	; (800be1c <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d100      	bne.n	800bbb4 <RemapAndLinkDMAtoUARTRx+0xd4>
 800bbb2:	e0b7      	b.n	800bd24 <RemapAndLinkDMAtoUARTRx+0x244>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800bbb4:	4a9a      	ldr	r2, [pc, #616]	; (800be20 <RemapAndLinkDMAtoUARTRx+0x340>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d100      	bne.n	800bbbc <RemapAndLinkDMAtoUARTRx+0xdc>
 800bbba:	e0bf      	b.n	800bd3c <RemapAndLinkDMAtoUARTRx+0x25c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800bbbc:	4a99      	ldr	r2, [pc, #612]	; (800be24 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d100      	bne.n	800bbc4 <RemapAndLinkDMAtoUARTRx+0xe4>
 800bbc2:	e0c7      	b.n	800bd54 <RemapAndLinkDMAtoUARTRx+0x274>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800bbc4:	4a98      	ldr	r2, [pc, #608]	; (800be28 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d100      	bne.n	800bbcc <RemapAndLinkDMAtoUARTRx+0xec>
 800bbca:	e0cf      	b.n	800bd6c <RemapAndLinkDMAtoUARTRx+0x28c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800bbcc:	4a97      	ldr	r2, [pc, #604]	; (800be2c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d100      	bne.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
 800bbd2:	e0d6      	b.n	800bd82 <RemapAndLinkDMAtoUARTRx+0x2a2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800bbd4:	6641      	str	r1, [r0, #100]	; 0x64
 800bbd6:	6248      	str	r0, [r1, #36]	; 0x24
}
 800bbd8:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800bbda:	23a8      	movs	r3, #168	; 0xa8
 800bbdc:	4a96      	ldr	r2, [pc, #600]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bbde:	4d97      	ldr	r5, [pc, #604]	; (800be3c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800bbe0:	58d4      	ldr	r4, [r2, r3]
 800bbe2:	402c      	ands	r4, r5
 800bbe4:	50d4      	str	r4, [r2, r3]
 800bbe6:	2480      	movs	r4, #128	; 0x80
 800bbe8:	58d5      	ldr	r5, [r2, r3]
 800bbea:	0324      	lsls	r4, r4, #12
 800bbec:	432c      	orrs	r4, r5
 800bbee:	50d4      	str	r4, [r2, r3]
 800bbf0:	e7f0      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800bbf2:	23a8      	movs	r3, #168	; 0xa8
 800bbf4:	4a90      	ldr	r2, [pc, #576]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bbf6:	4d92      	ldr	r5, [pc, #584]	; (800be40 <RemapAndLinkDMAtoUARTRx+0x360>)
 800bbf8:	58d4      	ldr	r4, [r2, r3]
 800bbfa:	402c      	ands	r4, r5
 800bbfc:	50d4      	str	r4, [r2, r3]
 800bbfe:	2480      	movs	r4, #128	; 0x80
 800bc00:	58d5      	ldr	r5, [r2, r3]
 800bc02:	0424      	lsls	r4, r4, #16
 800bc04:	432c      	orrs	r4, r5
 800bc06:	50d4      	str	r4, [r2, r3]
 800bc08:	e7e4      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800bc0a:	23a8      	movs	r3, #168	; 0xa8
 800bc0c:	25f0      	movs	r5, #240	; 0xf0
 800bc0e:	4a88      	ldr	r2, [pc, #544]	; (800be30 <RemapAndLinkDMAtoUARTRx+0x350>)
 800bc10:	58d4      	ldr	r4, [r2, r3]
 800bc12:	43ac      	bics	r4, r5
 800bc14:	50d4      	str	r4, [r2, r3]
 800bc16:	58d4      	ldr	r4, [r2, r3]
 800bc18:	3d70      	subs	r5, #112	; 0x70
 800bc1a:	432c      	orrs	r4, r5
 800bc1c:	50d4      	str	r4, [r2, r3]
 800bc1e:	e7d9      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800bc20:	680b      	ldr	r3, [r1, #0]
 800bc22:	4a7d      	ldr	r2, [pc, #500]	; (800be18 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d100      	bne.n	800bc2a <RemapAndLinkDMAtoUARTRx+0x14a>
 800bc28:	e0ad      	b.n	800bd86 <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800bc2a:	4a7c      	ldr	r2, [pc, #496]	; (800be1c <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d100      	bne.n	800bc32 <RemapAndLinkDMAtoUARTRx+0x152>
 800bc30:	e0b4      	b.n	800bd9c <RemapAndLinkDMAtoUARTRx+0x2bc>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800bc32:	4a7b      	ldr	r2, [pc, #492]	; (800be20 <RemapAndLinkDMAtoUARTRx+0x340>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d100      	bne.n	800bc3a <RemapAndLinkDMAtoUARTRx+0x15a>
 800bc38:	e0b2      	b.n	800bda0 <RemapAndLinkDMAtoUARTRx+0x2c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800bc3a:	4a7a      	ldr	r2, [pc, #488]	; (800be24 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d100      	bne.n	800bc42 <RemapAndLinkDMAtoUARTRx+0x162>
 800bc40:	e0ba      	b.n	800bdb8 <RemapAndLinkDMAtoUARTRx+0x2d8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800bc42:	4a79      	ldr	r2, [pc, #484]	; (800be28 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d100      	bne.n	800bc4a <RemapAndLinkDMAtoUARTRx+0x16a>
 800bc48:	e0c2      	b.n	800bdd0 <RemapAndLinkDMAtoUARTRx+0x2f0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800bc4a:	4a78      	ldr	r2, [pc, #480]	; (800be2c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d1c1      	bne.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800bc50:	4a77      	ldr	r2, [pc, #476]	; (800be30 <RemapAndLinkDMAtoUARTRx+0x350>)
 800bc52:	23a8      	movs	r3, #168	; 0xa8
 800bc54:	4d77      	ldr	r5, [pc, #476]	; (800be34 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bc56:	58d4      	ldr	r4, [r2, r3]
 800bc58:	402c      	ands	r4, r5
 800bc5a:	50d4      	str	r4, [r2, r3]
 800bc5c:	24a0      	movs	r4, #160	; 0xa0
 800bc5e:	58d5      	ldr	r5, [r2, r3]
 800bc60:	0124      	lsls	r4, r4, #4
 800bc62:	432c      	orrs	r4, r5
 800bc64:	50d4      	str	r4, [r2, r3]
 800bc66:	e7b5      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800bc68:	23a8      	movs	r3, #168	; 0xa8
 800bc6a:	250f      	movs	r5, #15
 800bc6c:	4a72      	ldr	r2, [pc, #456]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bc6e:	58d4      	ldr	r4, [r2, r3]
 800bc70:	43ac      	bics	r4, r5
 800bc72:	50d4      	str	r4, [r2, r3]
 800bc74:	58d4      	ldr	r4, [r2, r3]
 800bc76:	3d07      	subs	r5, #7
 800bc78:	432c      	orrs	r4, r5
 800bc7a:	50d4      	str	r4, [r2, r3]
 800bc7c:	e7aa      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800bc7e:	4a6e      	ldr	r2, [pc, #440]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bc80:	e784      	b.n	800bb8c <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800bc82:	680b      	ldr	r3, [r1, #0]
 800bc84:	4a64      	ldr	r2, [pc, #400]	; (800be18 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d01c      	beq.n	800bcc4 <RemapAndLinkDMAtoUARTRx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800bc8a:	4a64      	ldr	r2, [pc, #400]	; (800be1c <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d024      	beq.n	800bcda <RemapAndLinkDMAtoUARTRx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800bc90:	4a63      	ldr	r2, [pc, #396]	; (800be20 <RemapAndLinkDMAtoUARTRx+0x340>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d023      	beq.n	800bcde <RemapAndLinkDMAtoUARTRx+0x1fe>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800bc96:	4a63      	ldr	r2, [pc, #396]	; (800be24 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d02c      	beq.n	800bcf6 <RemapAndLinkDMAtoUARTRx+0x216>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800bc9c:	4a62      	ldr	r2, [pc, #392]	; (800be28 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d100      	bne.n	800bca4 <RemapAndLinkDMAtoUARTRx+0x1c4>
 800bca2:	e0a0      	b.n	800bde6 <RemapAndLinkDMAtoUARTRx+0x306>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800bca4:	4a61      	ldr	r2, [pc, #388]	; (800be2c <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d000      	beq.n	800bcac <RemapAndLinkDMAtoUARTRx+0x1cc>
 800bcaa:	e793      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800bcac:	4a60      	ldr	r2, [pc, #384]	; (800be30 <RemapAndLinkDMAtoUARTRx+0x350>)
 800bcae:	23a8      	movs	r3, #168	; 0xa8
 800bcb0:	4d60      	ldr	r5, [pc, #384]	; (800be34 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bcb2:	58d4      	ldr	r4, [r2, r3]
 800bcb4:	402c      	ands	r4, r5
 800bcb6:	50d4      	str	r4, [r2, r3]
 800bcb8:	24b0      	movs	r4, #176	; 0xb0
 800bcba:	58d5      	ldr	r5, [r2, r3]
 800bcbc:	0124      	lsls	r4, r4, #4
 800bcbe:	432c      	orrs	r4, r5
 800bcc0:	50d4      	str	r4, [r2, r3]
 800bcc2:	e787      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800bcc4:	23a8      	movs	r3, #168	; 0xa8
 800bcc6:	250f      	movs	r5, #15
 800bcc8:	4a5b      	ldr	r2, [pc, #364]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bcca:	58d4      	ldr	r4, [r2, r3]
 800bccc:	43ac      	bics	r4, r5
 800bcce:	50d4      	str	r4, [r2, r3]
 800bcd0:	58d4      	ldr	r4, [r2, r3]
 800bcd2:	3d04      	subs	r5, #4
 800bcd4:	432c      	orrs	r4, r5
 800bcd6:	50d4      	str	r4, [r2, r3]
 800bcd8:	e77c      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800bcda:	4a57      	ldr	r2, [pc, #348]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bcdc:	e7e7      	b.n	800bcae <RemapAndLinkDMAtoUARTRx+0x1ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800bcde:	23a8      	movs	r3, #168	; 0xa8
 800bce0:	4a55      	ldr	r2, [pc, #340]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bce2:	4d56      	ldr	r5, [pc, #344]	; (800be3c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800bce4:	58d4      	ldr	r4, [r2, r3]
 800bce6:	402c      	ands	r4, r5
 800bce8:	50d4      	str	r4, [r2, r3]
 800bcea:	24b0      	movs	r4, #176	; 0xb0
 800bcec:	58d5      	ldr	r5, [r2, r3]
 800bcee:	0324      	lsls	r4, r4, #12
 800bcf0:	432c      	orrs	r4, r5
 800bcf2:	50d4      	str	r4, [r2, r3]
 800bcf4:	e76e      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800bcf6:	23a8      	movs	r3, #168	; 0xa8
 800bcf8:	4a4f      	ldr	r2, [pc, #316]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bcfa:	4d51      	ldr	r5, [pc, #324]	; (800be40 <RemapAndLinkDMAtoUARTRx+0x360>)
 800bcfc:	58d4      	ldr	r4, [r2, r3]
 800bcfe:	402c      	ands	r4, r5
 800bd00:	50d4      	str	r4, [r2, r3]
 800bd02:	24b0      	movs	r4, #176	; 0xb0
 800bd04:	58d5      	ldr	r5, [r2, r3]
 800bd06:	0424      	lsls	r4, r4, #16
 800bd08:	432c      	orrs	r4, r5
 800bd0a:	50d4      	str	r4, [r2, r3]
 800bd0c:	e762      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800bd0e:	23a8      	movs	r3, #168	; 0xa8
 800bd10:	250f      	movs	r5, #15
 800bd12:	4a49      	ldr	r2, [pc, #292]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd14:	58d4      	ldr	r4, [r2, r3]
 800bd16:	43ac      	bics	r4, r5
 800bd18:	50d4      	str	r4, [r2, r3]
 800bd1a:	58d4      	ldr	r4, [r2, r3]
 800bd1c:	3d06      	subs	r5, #6
 800bd1e:	432c      	orrs	r4, r5
 800bd20:	50d4      	str	r4, [r2, r3]
 800bd22:	e757      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800bd24:	4a44      	ldr	r2, [pc, #272]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800bd26:	23a8      	movs	r3, #168	; 0xa8
 800bd28:	4d42      	ldr	r5, [pc, #264]	; (800be34 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bd2a:	58d4      	ldr	r4, [r2, r3]
 800bd2c:	402c      	ands	r4, r5
 800bd2e:	50d4      	str	r4, [r2, r3]
 800bd30:	2490      	movs	r4, #144	; 0x90
 800bd32:	58d5      	ldr	r5, [r2, r3]
 800bd34:	0124      	lsls	r4, r4, #4
 800bd36:	432c      	orrs	r4, r5
 800bd38:	50d4      	str	r4, [r2, r3]
 800bd3a:	e74b      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800bd3c:	23a8      	movs	r3, #168	; 0xa8
 800bd3e:	4a3e      	ldr	r2, [pc, #248]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd40:	4d3e      	ldr	r5, [pc, #248]	; (800be3c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800bd42:	58d4      	ldr	r4, [r2, r3]
 800bd44:	402c      	ands	r4, r5
 800bd46:	50d4      	str	r4, [r2, r3]
 800bd48:	2490      	movs	r4, #144	; 0x90
 800bd4a:	58d5      	ldr	r5, [r2, r3]
 800bd4c:	0324      	lsls	r4, r4, #12
 800bd4e:	432c      	orrs	r4, r5
 800bd50:	50d4      	str	r4, [r2, r3]
 800bd52:	e73f      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800bd54:	23a8      	movs	r3, #168	; 0xa8
 800bd56:	4a38      	ldr	r2, [pc, #224]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd58:	4d39      	ldr	r5, [pc, #228]	; (800be40 <RemapAndLinkDMAtoUARTRx+0x360>)
 800bd5a:	58d4      	ldr	r4, [r2, r3]
 800bd5c:	402c      	ands	r4, r5
 800bd5e:	50d4      	str	r4, [r2, r3]
 800bd60:	2490      	movs	r4, #144	; 0x90
 800bd62:	58d5      	ldr	r5, [r2, r3]
 800bd64:	0424      	lsls	r4, r4, #16
 800bd66:	432c      	orrs	r4, r5
 800bd68:	50d4      	str	r4, [r2, r3]
 800bd6a:	e733      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800bd6c:	23a8      	movs	r3, #168	; 0xa8
 800bd6e:	25f0      	movs	r5, #240	; 0xf0
 800bd70:	4a2f      	ldr	r2, [pc, #188]	; (800be30 <RemapAndLinkDMAtoUARTRx+0x350>)
 800bd72:	58d4      	ldr	r4, [r2, r3]
 800bd74:	43ac      	bics	r4, r5
 800bd76:	50d4      	str	r4, [r2, r3]
 800bd78:	58d4      	ldr	r4, [r2, r3]
 800bd7a:	3d60      	subs	r5, #96	; 0x60
 800bd7c:	432c      	orrs	r4, r5
 800bd7e:	50d4      	str	r4, [r2, r3]
 800bd80:	e728      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800bd82:	4a2b      	ldr	r2, [pc, #172]	; (800be30 <RemapAndLinkDMAtoUARTRx+0x350>)
 800bd84:	e7cf      	b.n	800bd26 <RemapAndLinkDMAtoUARTRx+0x246>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800bd86:	23a8      	movs	r3, #168	; 0xa8
 800bd88:	250f      	movs	r5, #15
 800bd8a:	4a2b      	ldr	r2, [pc, #172]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd8c:	58d4      	ldr	r4, [r2, r3]
 800bd8e:	43ac      	bics	r4, r5
 800bd90:	50d4      	str	r4, [r2, r3]
 800bd92:	58d4      	ldr	r4, [r2, r3]
 800bd94:	3d05      	subs	r5, #5
 800bd96:	432c      	orrs	r4, r5
 800bd98:	50d4      	str	r4, [r2, r3]
 800bd9a:	e71b      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800bd9c:	4a26      	ldr	r2, [pc, #152]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd9e:	e758      	b.n	800bc52 <RemapAndLinkDMAtoUARTRx+0x172>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800bda0:	23a8      	movs	r3, #168	; 0xa8
 800bda2:	4a25      	ldr	r2, [pc, #148]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bda4:	4d25      	ldr	r5, [pc, #148]	; (800be3c <RemapAndLinkDMAtoUARTRx+0x35c>)
 800bda6:	58d4      	ldr	r4, [r2, r3]
 800bda8:	402c      	ands	r4, r5
 800bdaa:	50d4      	str	r4, [r2, r3]
 800bdac:	24a0      	movs	r4, #160	; 0xa0
 800bdae:	58d5      	ldr	r5, [r2, r3]
 800bdb0:	0324      	lsls	r4, r4, #12
 800bdb2:	432c      	orrs	r4, r5
 800bdb4:	50d4      	str	r4, [r2, r3]
 800bdb6:	e70d      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800bdb8:	23a8      	movs	r3, #168	; 0xa8
 800bdba:	4a1f      	ldr	r2, [pc, #124]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bdbc:	4d20      	ldr	r5, [pc, #128]	; (800be40 <RemapAndLinkDMAtoUARTRx+0x360>)
 800bdbe:	58d4      	ldr	r4, [r2, r3]
 800bdc0:	402c      	ands	r4, r5
 800bdc2:	50d4      	str	r4, [r2, r3]
 800bdc4:	24a0      	movs	r4, #160	; 0xa0
 800bdc6:	58d5      	ldr	r5, [r2, r3]
 800bdc8:	0424      	lsls	r4, r4, #16
 800bdca:	432c      	orrs	r4, r5
 800bdcc:	50d4      	str	r4, [r2, r3]
 800bdce:	e701      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800bdd0:	23a8      	movs	r3, #168	; 0xa8
 800bdd2:	25f0      	movs	r5, #240	; 0xf0
 800bdd4:	4a16      	ldr	r2, [pc, #88]	; (800be30 <RemapAndLinkDMAtoUARTRx+0x350>)
 800bdd6:	58d4      	ldr	r4, [r2, r3]
 800bdd8:	43ac      	bics	r4, r5
 800bdda:	50d4      	str	r4, [r2, r3]
 800bddc:	58d4      	ldr	r4, [r2, r3]
 800bdde:	3d50      	subs	r5, #80	; 0x50
 800bde0:	432c      	orrs	r4, r5
 800bde2:	50d4      	str	r4, [r2, r3]
 800bde4:	e6f6      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800bde6:	23a8      	movs	r3, #168	; 0xa8
 800bde8:	25f0      	movs	r5, #240	; 0xf0
 800bdea:	4a11      	ldr	r2, [pc, #68]	; (800be30 <RemapAndLinkDMAtoUARTRx+0x350>)
 800bdec:	58d4      	ldr	r4, [r2, r3]
 800bdee:	43ac      	bics	r4, r5
 800bdf0:	50d4      	str	r4, [r2, r3]
 800bdf2:	58d4      	ldr	r4, [r2, r3]
 800bdf4:	3d40      	subs	r5, #64	; 0x40
 800bdf6:	432c      	orrs	r4, r5
 800bdf8:	50d4      	str	r4, [r2, r3]
 800bdfa:	e6eb      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
 800bdfc:	40013800 	.word	0x40013800
 800be00:	40004400 	.word	0x40004400
 800be04:	40004800 	.word	0x40004800
 800be08:	40004c00 	.word	0x40004c00
 800be0c:	40005000 	.word	0x40005000
 800be10:	40011400 	.word	0x40011400
 800be14:	40011800 	.word	0x40011800
 800be18:	40020008 	.word	0x40020008
 800be1c:	40020030 	.word	0x40020030
 800be20:	40020058 	.word	0x40020058
 800be24:	4002006c 	.word	0x4002006c
 800be28:	4002041c 	.word	0x4002041c
 800be2c:	40020430 	.word	0x40020430
 800be30:	40020400 	.word	0x40020400
 800be34:	fffff0ff 	.word	0xfffff0ff
 800be38:	40020000 	.word	0x40020000
 800be3c:	fff0ffff 	.word	0xfff0ffff
 800be40:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800be44:	680b      	ldr	r3, [r1, #0]
 800be46:	4a8e      	ldr	r2, [pc, #568]	; (800c080 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d03b      	beq.n	800bec4 <RemapAndLinkDMAtoUARTRx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800be4c:	4a8d      	ldr	r2, [pc, #564]	; (800c084 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d043      	beq.n	800beda <RemapAndLinkDMAtoUARTRx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800be52:	4a8d      	ldr	r2, [pc, #564]	; (800c088 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d042      	beq.n	800bede <RemapAndLinkDMAtoUARTRx+0x3fe>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800be58:	4a8c      	ldr	r2, [pc, #560]	; (800c08c <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d04b      	beq.n	800bef6 <RemapAndLinkDMAtoUARTRx+0x416>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800be5e:	4a8c      	ldr	r2, [pc, #560]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d054      	beq.n	800bf0e <RemapAndLinkDMAtoUARTRx+0x42e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800be64:	4a8b      	ldr	r2, [pc, #556]	; (800c094 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d000      	beq.n	800be6c <RemapAndLinkDMAtoUARTRx+0x38c>
 800be6a:	e6b3      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800be6c:	4a8a      	ldr	r2, [pc, #552]	; (800c098 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800be6e:	23a8      	movs	r3, #168	; 0xa8
 800be70:	4d8a      	ldr	r5, [pc, #552]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800be72:	58d4      	ldr	r4, [r2, r3]
 800be74:	402c      	ands	r4, r5
 800be76:	50d4      	str	r4, [r2, r3]
 800be78:	24c0      	movs	r4, #192	; 0xc0
 800be7a:	58d5      	ldr	r5, [r2, r3]
 800be7c:	0124      	lsls	r4, r4, #4
 800be7e:	432c      	orrs	r4, r5
 800be80:	50d4      	str	r4, [r2, r3]
 800be82:	e6a7      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800be84:	680b      	ldr	r3, [r1, #0]
 800be86:	4a7e      	ldr	r2, [pc, #504]	; (800c080 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d04b      	beq.n	800bf24 <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800be8c:	4a7d      	ldr	r2, [pc, #500]	; (800c084 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d053      	beq.n	800bf3a <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800be92:	4a7d      	ldr	r2, [pc, #500]	; (800c088 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d052      	beq.n	800bf3e <RemapAndLinkDMAtoUARTRx+0x45e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800be98:	4a7c      	ldr	r2, [pc, #496]	; (800c08c <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d05b      	beq.n	800bf56 <RemapAndLinkDMAtoUARTRx+0x476>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800be9e:	4a7c      	ldr	r2, [pc, #496]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d064      	beq.n	800bf6e <RemapAndLinkDMAtoUARTRx+0x48e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800bea4:	4a7b      	ldr	r2, [pc, #492]	; (800c094 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d000      	beq.n	800beac <RemapAndLinkDMAtoUARTRx+0x3cc>
 800beaa:	e693      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800beac:	4a7a      	ldr	r2, [pc, #488]	; (800c098 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800beae:	23a8      	movs	r3, #168	; 0xa8
 800beb0:	4d7a      	ldr	r5, [pc, #488]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800beb2:	58d4      	ldr	r4, [r2, r3]
 800beb4:	402c      	ands	r4, r5
 800beb6:	50d4      	str	r4, [r2, r3]
 800beb8:	24d0      	movs	r4, #208	; 0xd0
 800beba:	58d5      	ldr	r5, [r2, r3]
 800bebc:	0124      	lsls	r4, r4, #4
 800bebe:	432c      	orrs	r4, r5
 800bec0:	50d4      	str	r4, [r2, r3]
 800bec2:	e687      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800bec4:	23a8      	movs	r3, #168	; 0xa8
 800bec6:	250f      	movs	r5, #15
 800bec8:	4a75      	ldr	r2, [pc, #468]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800beca:	58d4      	ldr	r4, [r2, r3]
 800becc:	43ac      	bics	r4, r5
 800bece:	50d4      	str	r4, [r2, r3]
 800bed0:	58d4      	ldr	r4, [r2, r3]
 800bed2:	3d03      	subs	r5, #3
 800bed4:	432c      	orrs	r4, r5
 800bed6:	50d4      	str	r4, [r2, r3]
 800bed8:	e67c      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800beda:	4a71      	ldr	r2, [pc, #452]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bedc:	e7c7      	b.n	800be6e <RemapAndLinkDMAtoUARTRx+0x38e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800bede:	23a8      	movs	r3, #168	; 0xa8
 800bee0:	4a6f      	ldr	r2, [pc, #444]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bee2:	4d70      	ldr	r5, [pc, #448]	; (800c0a4 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800bee4:	58d4      	ldr	r4, [r2, r3]
 800bee6:	402c      	ands	r4, r5
 800bee8:	50d4      	str	r4, [r2, r3]
 800beea:	24c0      	movs	r4, #192	; 0xc0
 800beec:	58d5      	ldr	r5, [r2, r3]
 800beee:	0324      	lsls	r4, r4, #12
 800bef0:	432c      	orrs	r4, r5
 800bef2:	50d4      	str	r4, [r2, r3]
 800bef4:	e66e      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800bef6:	23a8      	movs	r3, #168	; 0xa8
 800bef8:	4a69      	ldr	r2, [pc, #420]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800befa:	4d6b      	ldr	r5, [pc, #428]	; (800c0a8 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800befc:	58d4      	ldr	r4, [r2, r3]
 800befe:	402c      	ands	r4, r5
 800bf00:	50d4      	str	r4, [r2, r3]
 800bf02:	24c0      	movs	r4, #192	; 0xc0
 800bf04:	58d5      	ldr	r5, [r2, r3]
 800bf06:	0424      	lsls	r4, r4, #16
 800bf08:	432c      	orrs	r4, r5
 800bf0a:	50d4      	str	r4, [r2, r3]
 800bf0c:	e662      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800bf0e:	23a8      	movs	r3, #168	; 0xa8
 800bf10:	25f0      	movs	r5, #240	; 0xf0
 800bf12:	4a61      	ldr	r2, [pc, #388]	; (800c098 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800bf14:	58d4      	ldr	r4, [r2, r3]
 800bf16:	43ac      	bics	r4, r5
 800bf18:	50d4      	str	r4, [r2, r3]
 800bf1a:	58d4      	ldr	r4, [r2, r3]
 800bf1c:	3d30      	subs	r5, #48	; 0x30
 800bf1e:	432c      	orrs	r4, r5
 800bf20:	50d4      	str	r4, [r2, r3]
 800bf22:	e657      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800bf24:	23a8      	movs	r3, #168	; 0xa8
 800bf26:	250f      	movs	r5, #15
 800bf28:	4a5d      	ldr	r2, [pc, #372]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf2a:	58d4      	ldr	r4, [r2, r3]
 800bf2c:	43ac      	bics	r4, r5
 800bf2e:	50d4      	str	r4, [r2, r3]
 800bf30:	58d4      	ldr	r4, [r2, r3]
 800bf32:	3d02      	subs	r5, #2
 800bf34:	432c      	orrs	r4, r5
 800bf36:	50d4      	str	r4, [r2, r3]
 800bf38:	e64c      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800bf3a:	4a59      	ldr	r2, [pc, #356]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf3c:	e7b7      	b.n	800beae <RemapAndLinkDMAtoUARTRx+0x3ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800bf3e:	23a8      	movs	r3, #168	; 0xa8
 800bf40:	4a57      	ldr	r2, [pc, #348]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf42:	4d58      	ldr	r5, [pc, #352]	; (800c0a4 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800bf44:	58d4      	ldr	r4, [r2, r3]
 800bf46:	402c      	ands	r4, r5
 800bf48:	50d4      	str	r4, [r2, r3]
 800bf4a:	24d0      	movs	r4, #208	; 0xd0
 800bf4c:	58d5      	ldr	r5, [r2, r3]
 800bf4e:	0324      	lsls	r4, r4, #12
 800bf50:	432c      	orrs	r4, r5
 800bf52:	50d4      	str	r4, [r2, r3]
 800bf54:	e63e      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800bf56:	23a8      	movs	r3, #168	; 0xa8
 800bf58:	4a51      	ldr	r2, [pc, #324]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf5a:	4d53      	ldr	r5, [pc, #332]	; (800c0a8 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800bf5c:	58d4      	ldr	r4, [r2, r3]
 800bf5e:	402c      	ands	r4, r5
 800bf60:	50d4      	str	r4, [r2, r3]
 800bf62:	24d0      	movs	r4, #208	; 0xd0
 800bf64:	58d5      	ldr	r5, [r2, r3]
 800bf66:	0424      	lsls	r4, r4, #16
 800bf68:	432c      	orrs	r4, r5
 800bf6a:	50d4      	str	r4, [r2, r3]
 800bf6c:	e632      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800bf6e:	23a8      	movs	r3, #168	; 0xa8
 800bf70:	25f0      	movs	r5, #240	; 0xf0
 800bf72:	4a49      	ldr	r2, [pc, #292]	; (800c098 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800bf74:	58d4      	ldr	r4, [r2, r3]
 800bf76:	43ac      	bics	r4, r5
 800bf78:	50d4      	str	r4, [r2, r3]
 800bf7a:	58d4      	ldr	r4, [r2, r3]
 800bf7c:	3d20      	subs	r5, #32
 800bf7e:	432c      	orrs	r4, r5
 800bf80:	50d4      	str	r4, [r2, r3]
 800bf82:	e627      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800bf84:	23a8      	movs	r3, #168	; 0xa8
 800bf86:	250f      	movs	r5, #15
 800bf88:	4a45      	ldr	r2, [pc, #276]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf8a:	58d4      	ldr	r4, [r2, r3]
 800bf8c:	43ac      	bics	r4, r5
 800bf8e:	50d4      	str	r4, [r2, r3]
 800bf90:	58d4      	ldr	r4, [r2, r3]
 800bf92:	3d01      	subs	r5, #1
 800bf94:	432c      	orrs	r4, r5
 800bf96:	50d4      	str	r4, [r2, r3]
 800bf98:	e61c      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800bf9a:	4a41      	ldr	r2, [pc, #260]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf9c:	e5d5      	b.n	800bb4a <RemapAndLinkDMAtoUARTRx+0x6a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800bf9e:	23a8      	movs	r3, #168	; 0xa8
 800bfa0:	4a3f      	ldr	r2, [pc, #252]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bfa2:	4d40      	ldr	r5, [pc, #256]	; (800c0a4 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800bfa4:	58d4      	ldr	r4, [r2, r3]
 800bfa6:	402c      	ands	r4, r5
 800bfa8:	50d4      	str	r4, [r2, r3]
 800bfaa:	24e0      	movs	r4, #224	; 0xe0
 800bfac:	58d5      	ldr	r5, [r2, r3]
 800bfae:	0324      	lsls	r4, r4, #12
 800bfb0:	432c      	orrs	r4, r5
 800bfb2:	50d4      	str	r4, [r2, r3]
 800bfb4:	e60e      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800bfb6:	23a8      	movs	r3, #168	; 0xa8
 800bfb8:	4a39      	ldr	r2, [pc, #228]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bfba:	4d3b      	ldr	r5, [pc, #236]	; (800c0a8 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800bfbc:	58d4      	ldr	r4, [r2, r3]
 800bfbe:	402c      	ands	r4, r5
 800bfc0:	50d4      	str	r4, [r2, r3]
 800bfc2:	24e0      	movs	r4, #224	; 0xe0
 800bfc4:	58d5      	ldr	r5, [r2, r3]
 800bfc6:	0424      	lsls	r4, r4, #16
 800bfc8:	432c      	orrs	r4, r5
 800bfca:	50d4      	str	r4, [r2, r3]
 800bfcc:	e602      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800bfce:	23a8      	movs	r3, #168	; 0xa8
 800bfd0:	25f0      	movs	r5, #240	; 0xf0
 800bfd2:	4a31      	ldr	r2, [pc, #196]	; (800c098 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800bfd4:	58d4      	ldr	r4, [r2, r3]
 800bfd6:	43ac      	bics	r4, r5
 800bfd8:	50d4      	str	r4, [r2, r3]
 800bfda:	58d4      	ldr	r4, [r2, r3]
 800bfdc:	3d10      	subs	r5, #16
 800bfde:	432c      	orrs	r4, r5
 800bfe0:	50d4      	str	r4, [r2, r3]
 800bfe2:	e5f7      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800bfe4:	4a31      	ldr	r2, [pc, #196]	; (800c0ac <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d000      	beq.n	800bfec <RemapAndLinkDMAtoUARTRx+0x50c>
 800bfea:	e5f3      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
 800bfec:	680b      	ldr	r3, [r1, #0]
 800bfee:	4a24      	ldr	r2, [pc, #144]	; (800c080 <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d01b      	beq.n	800c02c <RemapAndLinkDMAtoUARTRx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800bff4:	4a23      	ldr	r2, [pc, #140]	; (800c084 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d022      	beq.n	800c040 <RemapAndLinkDMAtoUARTRx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800bffa:	4a23      	ldr	r2, [pc, #140]	; (800c088 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d021      	beq.n	800c044 <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800c000:	4a22      	ldr	r2, [pc, #136]	; (800c08c <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d02a      	beq.n	800c05c <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800c006:	4a22      	ldr	r2, [pc, #136]	; (800c090 <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d033      	beq.n	800c074 <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800c00c:	4a21      	ldr	r2, [pc, #132]	; (800c094 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d000      	beq.n	800c014 <RemapAndLinkDMAtoUARTRx+0x534>
 800c012:	e5df      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800c014:	4a20      	ldr	r2, [pc, #128]	; (800c098 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800c016:	23a8      	movs	r3, #168	; 0xa8
 800c018:	4d20      	ldr	r5, [pc, #128]	; (800c09c <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800c01a:	58d4      	ldr	r4, [r2, r3]
 800c01c:	402c      	ands	r4, r5
 800c01e:	50d4      	str	r4, [r2, r3]
 800c020:	24f0      	movs	r4, #240	; 0xf0
 800c022:	58d5      	ldr	r5, [r2, r3]
 800c024:	0124      	lsls	r4, r4, #4
 800c026:	432c      	orrs	r4, r5
 800c028:	50d4      	str	r4, [r2, r3]
 800c02a:	e5d3      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800c02c:	23a8      	movs	r3, #168	; 0xa8
 800c02e:	260f      	movs	r6, #15
 800c030:	4a1b      	ldr	r2, [pc, #108]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c032:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800c034:	43b5      	bics	r5, r6
 800c036:	50d5      	str	r5, [r2, r3]
 800c038:	58d4      	ldr	r4, [r2, r3]
 800c03a:	4334      	orrs	r4, r6
 800c03c:	50d4      	str	r4, [r2, r3]
 800c03e:	e5c9      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800c040:	4a17      	ldr	r2, [pc, #92]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c042:	e7e8      	b.n	800c016 <RemapAndLinkDMAtoUARTRx+0x536>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800c044:	23a8      	movs	r3, #168	; 0xa8
 800c046:	4a16      	ldr	r2, [pc, #88]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c048:	4d16      	ldr	r5, [pc, #88]	; (800c0a4 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800c04a:	58d4      	ldr	r4, [r2, r3]
 800c04c:	402c      	ands	r4, r5
 800c04e:	50d4      	str	r4, [r2, r3]
 800c050:	24f0      	movs	r4, #240	; 0xf0
 800c052:	58d5      	ldr	r5, [r2, r3]
 800c054:	0324      	lsls	r4, r4, #12
 800c056:	432c      	orrs	r4, r5
 800c058:	50d4      	str	r4, [r2, r3]
 800c05a:	e5bb      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800c05c:	23a8      	movs	r3, #168	; 0xa8
 800c05e:	4a10      	ldr	r2, [pc, #64]	; (800c0a0 <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c060:	4d11      	ldr	r5, [pc, #68]	; (800c0a8 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800c062:	58d4      	ldr	r4, [r2, r3]
 800c064:	402c      	ands	r4, r5
 800c066:	50d4      	str	r4, [r2, r3]
 800c068:	24f0      	movs	r4, #240	; 0xf0
 800c06a:	58d5      	ldr	r5, [r2, r3]
 800c06c:	0424      	lsls	r4, r4, #16
 800c06e:	432c      	orrs	r4, r5
 800c070:	50d4      	str	r4, [r2, r3]
 800c072:	e5af      	b.n	800bbd4 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800c074:	23a8      	movs	r3, #168	; 0xa8
 800c076:	4a08      	ldr	r2, [pc, #32]	; (800c098 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800c078:	26f0      	movs	r6, #240	; 0xf0
 800c07a:	58d5      	ldr	r5, [r2, r3]
 800c07c:	e7da      	b.n	800c034 <RemapAndLinkDMAtoUARTRx+0x554>
 800c07e:	46c0      	nop			; (mov r8, r8)
 800c080:	40020008 	.word	0x40020008
 800c084:	40020030 	.word	0x40020030
 800c088:	40020058 	.word	0x40020058
 800c08c:	4002006c 	.word	0x4002006c
 800c090:	4002041c 	.word	0x4002041c
 800c094:	40020430 	.word	0x40020430
 800c098:	40020400 	.word	0x40020400
 800c09c:	fffff0ff 	.word	0xfffff0ff
 800c0a0:	40020000 	.word	0x40020000
 800c0a4:	fff0ffff 	.word	0xfff0ffff
 800c0a8:	ff0fffff 	.word	0xff0fffff
 800c0ac:	40011c00 	.word	0x40011c00

0800c0b0 <DMA_MSG_RX_Setup>:
{	
 800c0b0:	b570      	push	{r4, r5, r6, lr}
 800c0b2:	000d      	movs	r5, r1
 800c0b4:	0004      	movs	r4, r0
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800c0b6:	f7ff fd13 	bl	800bae0 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c0ba:	0028      	movs	r0, r5
 800c0bc:	2100      	movs	r1, #0
 800c0be:	f7ff fc59 	bl	800b974 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800c0c2:	0020      	movs	r0, r4
 800c0c4:	f7ff fb26 	bl	800b714 <GetPort>
 800c0c8:	3801      	subs	r0, #1
 800c0ca:	0041      	lsls	r1, r0, #1
 800c0cc:	1809      	adds	r1, r1, r0
 800c0ce:	4804      	ldr	r0, [pc, #16]	; (800c0e0 <DMA_MSG_RX_Setup+0x30>)
 800c0d0:	0189      	lsls	r1, r1, #6
 800c0d2:	1809      	adds	r1, r1, r0
 800c0d4:	22c0      	movs	r2, #192	; 0xc0
 800c0d6:	0020      	movs	r0, r4
 800c0d8:	f005 ff1e 	bl	8011f18 <HAL_UART_Receive_DMA>
}
 800c0dc:	bd70      	pop	{r4, r5, r6, pc}
 800c0de:	46c0      	nop			; (mov r8, r8)
 800c0e0:	2000138c 	.word	0x2000138c

0800c0e4 <SetupMessagingRxDMAs>:
{	
 800c0e4:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800c0e6:	4c18      	ldr	r4, [pc, #96]	; (800c148 <SetupMessagingRxDMAs+0x64>)
 800c0e8:	7863      	ldrb	r3, [r4, #1]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d027      	beq.n	800c13e <SetupMessagingRxDMAs+0x5a>
	if (portStatus[P2] == FREE)	
 800c0ee:	78a3      	ldrb	r3, [r4, #2]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d01f      	beq.n	800c134 <SetupMessagingRxDMAs+0x50>
	if (portStatus[P3] == FREE)
 800c0f4:	78e3      	ldrb	r3, [r4, #3]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d017      	beq.n	800c12a <SetupMessagingRxDMAs+0x46>
	if (portStatus[P4] == FREE)
 800c0fa:	7923      	ldrb	r3, [r4, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00f      	beq.n	800c120 <SetupMessagingRxDMAs+0x3c>
	if (portStatus[P5] == FREE)
 800c100:	7963      	ldrb	r3, [r4, #5]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d007      	beq.n	800c116 <SetupMessagingRxDMAs+0x32>
	if (portStatus[P6] == FREE)
 800c106:	79a3      	ldrb	r3, [r4, #6]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d103      	bne.n	800c114 <SetupMessagingRxDMAs+0x30>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800c10c:	490f      	ldr	r1, [pc, #60]	; (800c14c <SetupMessagingRxDMAs+0x68>)
 800c10e:	4810      	ldr	r0, [pc, #64]	; (800c150 <SetupMessagingRxDMAs+0x6c>)
 800c110:	f7ff ffce 	bl	800c0b0 <DMA_MSG_RX_Setup>
}
 800c114:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800c116:	490f      	ldr	r1, [pc, #60]	; (800c154 <SetupMessagingRxDMAs+0x70>)
 800c118:	480f      	ldr	r0, [pc, #60]	; (800c158 <SetupMessagingRxDMAs+0x74>)
 800c11a:	f7ff ffc9 	bl	800c0b0 <DMA_MSG_RX_Setup>
 800c11e:	e7f2      	b.n	800c106 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800c120:	490e      	ldr	r1, [pc, #56]	; (800c15c <SetupMessagingRxDMAs+0x78>)
 800c122:	480f      	ldr	r0, [pc, #60]	; (800c160 <SetupMessagingRxDMAs+0x7c>)
 800c124:	f7ff ffc4 	bl	800c0b0 <DMA_MSG_RX_Setup>
 800c128:	e7ea      	b.n	800c100 <SetupMessagingRxDMAs+0x1c>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800c12a:	490e      	ldr	r1, [pc, #56]	; (800c164 <SetupMessagingRxDMAs+0x80>)
 800c12c:	480e      	ldr	r0, [pc, #56]	; (800c168 <SetupMessagingRxDMAs+0x84>)
 800c12e:	f7ff ffbf 	bl	800c0b0 <DMA_MSG_RX_Setup>
 800c132:	e7e2      	b.n	800c0fa <SetupMessagingRxDMAs+0x16>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800c134:	490d      	ldr	r1, [pc, #52]	; (800c16c <SetupMessagingRxDMAs+0x88>)
 800c136:	480e      	ldr	r0, [pc, #56]	; (800c170 <SetupMessagingRxDMAs+0x8c>)
 800c138:	f7ff ffba 	bl	800c0b0 <DMA_MSG_RX_Setup>
 800c13c:	e7da      	b.n	800c0f4 <SetupMessagingRxDMAs+0x10>
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800c13e:	490d      	ldr	r1, [pc, #52]	; (800c174 <SetupMessagingRxDMAs+0x90>)
 800c140:	480d      	ldr	r0, [pc, #52]	; (800c178 <SetupMessagingRxDMAs+0x94>)
 800c142:	f7ff ffb5 	bl	800c0b0 <DMA_MSG_RX_Setup>
 800c146:	e7d2      	b.n	800c0ee <SetupMessagingRxDMAs+0xa>
 800c148:	20000c2c 	.word	0x20000c2c
 800c14c:	20001f88 	.word	0x20001f88
 800c150:	20007198 	.word	0x20007198
 800c154:	20001f50 	.word	0x20001f50
 800c158:	20007048 	.word	0x20007048
 800c15c:	20001f18 	.word	0x20001f18
 800c160:	200070b8 	.word	0x200070b8
 800c164:	20001ee0 	.word	0x20001ee0
 800c168:	20006fd8 	.word	0x20006fd8
 800c16c:	20001ea8 	.word	0x20001ea8
 800c170:	20007128 	.word	0x20007128
 800c174:	20001e70 	.word	0x20001e70
 800c178:	20007208 	.word	0x20007208

0800c17c <DMA_STREAM_Setup>:
{	
 800c17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c17e:	0016      	movs	r6, r2
 800c180:	0005      	movs	r5, r0
 800c182:	000f      	movs	r7, r1
	uint8_t port = GetPort(huartSrc);
 800c184:	f7ff fac6 	bl	800b714 <GetPort>
	hDMA = &streamDMA[port-1];
 800c188:	3801      	subs	r0, #1
 800c18a:	00c4      	lsls	r4, r0, #3
 800c18c:	1a24      	subs	r4, r4, r0
 800c18e:	480a      	ldr	r0, [pc, #40]	; (800c1b8 <DMA_STREAM_Setup+0x3c>)
 800c190:	00e4      	lsls	r4, r4, #3
 800c192:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800c194:	0021      	movs	r1, r4
 800c196:	0028      	movs	r0, r5
 800c198:	f7ff fca2 	bl	800bae0 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800c19c:	0020      	movs	r0, r4
 800c19e:	2101      	movs	r1, #1
 800c1a0:	f7ff fbe8 	bl	800b974 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800c1a4:	2369      	movs	r3, #105	; 0x69
 800c1a6:	2201      	movs	r2, #1
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c1a8:	6839      	ldr	r1, [r7, #0]
	huartSrc->State = HAL_UART_STATE_READY;
 800c1aa:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c1ac:	0028      	movs	r0, r5
 800c1ae:	0032      	movs	r2, r6
 800c1b0:	3128      	adds	r1, #40	; 0x28
 800c1b2:	f005 feb1 	bl	8011f18 <HAL_UART_Receive_DMA>
}
 800c1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1b8:	20001c78 	.word	0x20001c78

0800c1bc <RemapAndLinkDMAtoUARTTx>:
/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c1bc:	6803      	ldr	r3, [r0, #0]
 800c1be:	4ac6      	ldr	r2, [pc, #792]	; (800c4d8 <RemapAndLinkDMAtoUARTTx+0x31c>)
{
 800c1c0:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d03a      	beq.n	800c23c <RemapAndLinkDMAtoUARTTx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c1c6:	4ac5      	ldr	r2, [pc, #788]	; (800c4dc <RemapAndLinkDMAtoUARTTx+0x320>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d058      	beq.n	800c27e <RemapAndLinkDMAtoUARTTx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c1cc:	4ac4      	ldr	r2, [pc, #784]	; (800c4e0 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d100      	bne.n	800c1d4 <RemapAndLinkDMAtoUARTTx+0x18>
 800c1d2:	e093      	b.n	800c2fc <RemapAndLinkDMAtoUARTTx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c1d4:	4ac3      	ldr	r2, [pc, #780]	; (800c4e4 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d100      	bne.n	800c1dc <RemapAndLinkDMAtoUARTTx+0x20>
 800c1da:	e0c0      	b.n	800c35e <RemapAndLinkDMAtoUARTTx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c1dc:	4ac2      	ldr	r2, [pc, #776]	; (800c4e8 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d100      	bne.n	800c1e4 <RemapAndLinkDMAtoUARTTx+0x28>
 800c1e2:	e19d      	b.n	800c520 <RemapAndLinkDMAtoUARTTx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800c1e4:	4ac1      	ldr	r2, [pc, #772]	; (800c4ec <RemapAndLinkDMAtoUARTTx+0x330>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d100      	bne.n	800c1ec <RemapAndLinkDMAtoUARTTx+0x30>
 800c1ea:	e1b9      	b.n	800c560 <RemapAndLinkDMAtoUARTTx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800c1ec:	4ac0      	ldr	r2, [pc, #768]	; (800c4f0 <RemapAndLinkDMAtoUARTTx+0x334>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d000      	beq.n	800c1f4 <RemapAndLinkDMAtoUARTTx+0x38>
 800c1f2:	e265      	b.n	800c6c0 <RemapAndLinkDMAtoUARTTx+0x504>
 800c1f4:	680b      	ldr	r3, [r1, #0]
 800c1f6:	4abf      	ldr	r2, [pc, #764]	; (800c4f4 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d100      	bne.n	800c1fe <RemapAndLinkDMAtoUARTTx+0x42>
 800c1fc:	e230      	b.n	800c660 <RemapAndLinkDMAtoUARTTx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800c1fe:	4abe      	ldr	r2, [pc, #760]	; (800c4f8 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d100      	bne.n	800c206 <RemapAndLinkDMAtoUARTTx+0x4a>
 800c204:	e237      	b.n	800c676 <RemapAndLinkDMAtoUARTTx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800c206:	4abd      	ldr	r2, [pc, #756]	; (800c4fc <RemapAndLinkDMAtoUARTTx+0x340>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d100      	bne.n	800c20e <RemapAndLinkDMAtoUARTTx+0x52>
 800c20c:	e23f      	b.n	800c68e <RemapAndLinkDMAtoUARTTx+0x4d2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800c20e:	4abc      	ldr	r2, [pc, #752]	; (800c500 <RemapAndLinkDMAtoUARTTx+0x344>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d100      	bne.n	800c216 <RemapAndLinkDMAtoUARTTx+0x5a>
 800c214:	e247      	b.n	800c6a6 <RemapAndLinkDMAtoUARTTx+0x4ea>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800c216:	4abb      	ldr	r2, [pc, #748]	; (800c504 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d100      	bne.n	800c21e <RemapAndLinkDMAtoUARTTx+0x62>
 800c21c:	e24e      	b.n	800c6bc <RemapAndLinkDMAtoUARTTx+0x500>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800c21e:	4aba      	ldr	r2, [pc, #744]	; (800c508 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d145      	bne.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800c224:	23a8      	movs	r3, #168	; 0xa8
 800c226:	4ab9      	ldr	r2, [pc, #740]	; (800c50c <RemapAndLinkDMAtoUARTTx+0x350>)
 800c228:	4db9      	ldr	r5, [pc, #740]	; (800c510 <RemapAndLinkDMAtoUARTTx+0x354>)
 800c22a:	58d4      	ldr	r4, [r2, r3]
 800c22c:	402c      	ands	r4, r5
 800c22e:	50d4      	str	r4, [r2, r3]
 800c230:	24e0      	movs	r4, #224	; 0xe0
 800c232:	58d5      	ldr	r5, [r2, r3]
 800c234:	0324      	lsls	r4, r4, #12
 800c236:	432c      	orrs	r4, r5
 800c238:	50d4      	str	r4, [r2, r3]
 800c23a:	e039      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c23c:	680b      	ldr	r3, [r1, #0]
 800c23e:	4aad      	ldr	r2, [pc, #692]	; (800c4f4 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d100      	bne.n	800c246 <RemapAndLinkDMAtoUARTTx+0x8a>
 800c244:	e07e      	b.n	800c344 <RemapAndLinkDMAtoUARTTx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800c246:	4aac      	ldr	r2, [pc, #688]	; (800c4f8 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d100      	bne.n	800c24e <RemapAndLinkDMAtoUARTTx+0x92>
 800c24c:	e085      	b.n	800c35a <RemapAndLinkDMAtoUARTTx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800c24e:	4aab      	ldr	r2, [pc, #684]	; (800c4fc <RemapAndLinkDMAtoUARTTx+0x340>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d030      	beq.n	800c2b6 <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800c254:	4aaa      	ldr	r2, [pc, #680]	; (800c500 <RemapAndLinkDMAtoUARTTx+0x344>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d039      	beq.n	800c2ce <RemapAndLinkDMAtoUARTTx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800c25a:	4aaa      	ldr	r2, [pc, #680]	; (800c504 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d041      	beq.n	800c2e4 <RemapAndLinkDMAtoUARTTx+0x128>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800c260:	4aa9      	ldr	r2, [pc, #676]	; (800c508 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d124      	bne.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800c266:	23a8      	movs	r3, #168	; 0xa8
 800c268:	4aa8      	ldr	r2, [pc, #672]	; (800c50c <RemapAndLinkDMAtoUARTTx+0x350>)
 800c26a:	4da9      	ldr	r5, [pc, #676]	; (800c510 <RemapAndLinkDMAtoUARTTx+0x354>)
 800c26c:	58d4      	ldr	r4, [r2, r3]
 800c26e:	402c      	ands	r4, r5
 800c270:	50d4      	str	r4, [r2, r3]
 800c272:	2480      	movs	r4, #128	; 0x80
 800c274:	58d5      	ldr	r5, [r2, r3]
 800c276:	0324      	lsls	r4, r4, #12
 800c278:	432c      	orrs	r4, r5
 800c27a:	50d4      	str	r4, [r2, r3]
 800c27c:	e018      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c27e:	680b      	ldr	r3, [r1, #0]
 800c280:	4a9c      	ldr	r2, [pc, #624]	; (800c4f4 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d100      	bne.n	800c288 <RemapAndLinkDMAtoUARTTx+0xcc>
 800c286:	e0b9      	b.n	800c3fc <RemapAndLinkDMAtoUARTTx+0x240>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800c288:	4a9b      	ldr	r2, [pc, #620]	; (800c4f8 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d100      	bne.n	800c290 <RemapAndLinkDMAtoUARTTx+0xd4>
 800c28e:	e0c0      	b.n	800c412 <RemapAndLinkDMAtoUARTTx+0x256>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800c290:	4a9a      	ldr	r2, [pc, #616]	; (800c4fc <RemapAndLinkDMAtoUARTTx+0x340>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d100      	bne.n	800c298 <RemapAndLinkDMAtoUARTTx+0xdc>
 800c296:	e0c8      	b.n	800c42a <RemapAndLinkDMAtoUARTTx+0x26e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800c298:	4a99      	ldr	r2, [pc, #612]	; (800c500 <RemapAndLinkDMAtoUARTTx+0x344>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d100      	bne.n	800c2a0 <RemapAndLinkDMAtoUARTTx+0xe4>
 800c29e:	e0d0      	b.n	800c442 <RemapAndLinkDMAtoUARTTx+0x286>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800c2a0:	4a98      	ldr	r2, [pc, #608]	; (800c504 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d100      	bne.n	800c2a8 <RemapAndLinkDMAtoUARTTx+0xec>
 800c2a6:	e0d7      	b.n	800c458 <RemapAndLinkDMAtoUARTTx+0x29c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800c2a8:	4a97      	ldr	r2, [pc, #604]	; (800c508 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d100      	bne.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
 800c2ae:	e0d5      	b.n	800c45c <RemapAndLinkDMAtoUARTTx+0x2a0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800c2b0:	6601      	str	r1, [r0, #96]	; 0x60
 800c2b2:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c2b4:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800c2b6:	23a8      	movs	r3, #168	; 0xa8
 800c2b8:	4a96      	ldr	r2, [pc, #600]	; (800c514 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c2ba:	4d97      	ldr	r5, [pc, #604]	; (800c518 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c2bc:	58d4      	ldr	r4, [r2, r3]
 800c2be:	402c      	ands	r4, r5
 800c2c0:	50d4      	str	r4, [r2, r3]
 800c2c2:	2480      	movs	r4, #128	; 0x80
 800c2c4:	58d5      	ldr	r5, [r2, r3]
 800c2c6:	0524      	lsls	r4, r4, #20
 800c2c8:	432c      	orrs	r4, r5
 800c2ca:	50d4      	str	r4, [r2, r3]
 800c2cc:	e7f0      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800c2ce:	23a8      	movs	r3, #168	; 0xa8
 800c2d0:	250f      	movs	r5, #15
 800c2d2:	4a8e      	ldr	r2, [pc, #568]	; (800c50c <RemapAndLinkDMAtoUARTTx+0x350>)
 800c2d4:	58d4      	ldr	r4, [r2, r3]
 800c2d6:	43ac      	bics	r4, r5
 800c2d8:	50d4      	str	r4, [r2, r3]
 800c2da:	58d4      	ldr	r4, [r2, r3]
 800c2dc:	3d07      	subs	r5, #7
 800c2de:	432c      	orrs	r4, r5
 800c2e0:	50d4      	str	r4, [r2, r3]
 800c2e2:	e7e5      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800c2e4:	4a89      	ldr	r2, [pc, #548]	; (800c50c <RemapAndLinkDMAtoUARTTx+0x350>)
 800c2e6:	23a8      	movs	r3, #168	; 0xa8
 800c2e8:	4d8c      	ldr	r5, [pc, #560]	; (800c51c <RemapAndLinkDMAtoUARTTx+0x360>)
 800c2ea:	58d4      	ldr	r4, [r2, r3]
 800c2ec:	402c      	ands	r4, r5
 800c2ee:	50d4      	str	r4, [r2, r3]
 800c2f0:	2480      	movs	r4, #128	; 0x80
 800c2f2:	58d5      	ldr	r5, [r2, r3]
 800c2f4:	0224      	lsls	r4, r4, #8
 800c2f6:	432c      	orrs	r4, r5
 800c2f8:	50d4      	str	r4, [r2, r3]
 800c2fa:	e7d9      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c2fc:	680b      	ldr	r3, [r1, #0]
 800c2fe:	4a7d      	ldr	r2, [pc, #500]	; (800c4f4 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d100      	bne.n	800c306 <RemapAndLinkDMAtoUARTTx+0x14a>
 800c304:	e0b6      	b.n	800c474 <RemapAndLinkDMAtoUARTTx+0x2b8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800c306:	4a7c      	ldr	r2, [pc, #496]	; (800c4f8 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d100      	bne.n	800c30e <RemapAndLinkDMAtoUARTTx+0x152>
 800c30c:	e0bd      	b.n	800c48a <RemapAndLinkDMAtoUARTTx+0x2ce>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800c30e:	4a7b      	ldr	r2, [pc, #492]	; (800c4fc <RemapAndLinkDMAtoUARTTx+0x340>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d100      	bne.n	800c316 <RemapAndLinkDMAtoUARTTx+0x15a>
 800c314:	e0c5      	b.n	800c4a2 <RemapAndLinkDMAtoUARTTx+0x2e6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800c316:	4a7a      	ldr	r2, [pc, #488]	; (800c500 <RemapAndLinkDMAtoUARTTx+0x344>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d100      	bne.n	800c31e <RemapAndLinkDMAtoUARTTx+0x162>
 800c31c:	e0cd      	b.n	800c4ba <RemapAndLinkDMAtoUARTTx+0x2fe>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800c31e:	4a79      	ldr	r2, [pc, #484]	; (800c504 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d100      	bne.n	800c326 <RemapAndLinkDMAtoUARTTx+0x16a>
 800c324:	e0d4      	b.n	800c4d0 <RemapAndLinkDMAtoUARTTx+0x314>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800c326:	4a78      	ldr	r2, [pc, #480]	; (800c508 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d1c1      	bne.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800c32c:	23a8      	movs	r3, #168	; 0xa8
 800c32e:	4a77      	ldr	r2, [pc, #476]	; (800c50c <RemapAndLinkDMAtoUARTTx+0x350>)
 800c330:	4d77      	ldr	r5, [pc, #476]	; (800c510 <RemapAndLinkDMAtoUARTTx+0x354>)
 800c332:	58d4      	ldr	r4, [r2, r3]
 800c334:	402c      	ands	r4, r5
 800c336:	50d4      	str	r4, [r2, r3]
 800c338:	24a0      	movs	r4, #160	; 0xa0
 800c33a:	58d5      	ldr	r5, [r2, r3]
 800c33c:	0324      	lsls	r4, r4, #12
 800c33e:	432c      	orrs	r4, r5
 800c340:	50d4      	str	r4, [r2, r3]
 800c342:	e7b5      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800c344:	23a8      	movs	r3, #168	; 0xa8
 800c346:	25f0      	movs	r5, #240	; 0xf0
 800c348:	4a72      	ldr	r2, [pc, #456]	; (800c514 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c34a:	58d4      	ldr	r4, [r2, r3]
 800c34c:	43ac      	bics	r4, r5
 800c34e:	50d4      	str	r4, [r2, r3]
 800c350:	58d4      	ldr	r4, [r2, r3]
 800c352:	3d70      	subs	r5, #112	; 0x70
 800c354:	432c      	orrs	r4, r5
 800c356:	50d4      	str	r4, [r2, r3]
 800c358:	e7aa      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800c35a:	4a6e      	ldr	r2, [pc, #440]	; (800c514 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c35c:	e7c3      	b.n	800c2e6 <RemapAndLinkDMAtoUARTTx+0x12a>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c35e:	680b      	ldr	r3, [r1, #0]
 800c360:	4a64      	ldr	r2, [pc, #400]	; (800c4f4 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d01c      	beq.n	800c3a0 <RemapAndLinkDMAtoUARTTx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800c366:	4a64      	ldr	r2, [pc, #400]	; (800c4f8 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d024      	beq.n	800c3b6 <RemapAndLinkDMAtoUARTTx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800c36c:	4a63      	ldr	r2, [pc, #396]	; (800c4fc <RemapAndLinkDMAtoUARTTx+0x340>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d02d      	beq.n	800c3ce <RemapAndLinkDMAtoUARTTx+0x212>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800c372:	4a63      	ldr	r2, [pc, #396]	; (800c500 <RemapAndLinkDMAtoUARTTx+0x344>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d036      	beq.n	800c3e6 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800c378:	4a62      	ldr	r2, [pc, #392]	; (800c504 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d100      	bne.n	800c380 <RemapAndLinkDMAtoUARTTx+0x1c4>
 800c37e:	e0a9      	b.n	800c4d4 <RemapAndLinkDMAtoUARTTx+0x318>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800c380:	4a61      	ldr	r2, [pc, #388]	; (800c508 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d000      	beq.n	800c388 <RemapAndLinkDMAtoUARTTx+0x1cc>
 800c386:	e793      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800c388:	23a8      	movs	r3, #168	; 0xa8
 800c38a:	4a60      	ldr	r2, [pc, #384]	; (800c50c <RemapAndLinkDMAtoUARTTx+0x350>)
 800c38c:	4d60      	ldr	r5, [pc, #384]	; (800c510 <RemapAndLinkDMAtoUARTTx+0x354>)
 800c38e:	58d4      	ldr	r4, [r2, r3]
 800c390:	402c      	ands	r4, r5
 800c392:	50d4      	str	r4, [r2, r3]
 800c394:	24b0      	movs	r4, #176	; 0xb0
 800c396:	58d5      	ldr	r5, [r2, r3]
 800c398:	0324      	lsls	r4, r4, #12
 800c39a:	432c      	orrs	r4, r5
 800c39c:	50d4      	str	r4, [r2, r3]
 800c39e:	e787      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800c3a0:	23a8      	movs	r3, #168	; 0xa8
 800c3a2:	25f0      	movs	r5, #240	; 0xf0
 800c3a4:	4a5b      	ldr	r2, [pc, #364]	; (800c514 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c3a6:	58d4      	ldr	r4, [r2, r3]
 800c3a8:	43ac      	bics	r4, r5
 800c3aa:	50d4      	str	r4, [r2, r3]
 800c3ac:	58d4      	ldr	r4, [r2, r3]
 800c3ae:	3d40      	subs	r5, #64	; 0x40
 800c3b0:	432c      	orrs	r4, r5
 800c3b2:	50d4      	str	r4, [r2, r3]
 800c3b4:	e77c      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800c3b6:	4a57      	ldr	r2, [pc, #348]	; (800c514 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800c3b8:	23a8      	movs	r3, #168	; 0xa8
 800c3ba:	4d58      	ldr	r5, [pc, #352]	; (800c51c <RemapAndLinkDMAtoUARTTx+0x360>)
 800c3bc:	58d4      	ldr	r4, [r2, r3]
 800c3be:	402c      	ands	r4, r5
 800c3c0:	50d4      	str	r4, [r2, r3]
 800c3c2:	24b0      	movs	r4, #176	; 0xb0
 800c3c4:	58d5      	ldr	r5, [r2, r3]
 800c3c6:	0224      	lsls	r4, r4, #8
 800c3c8:	432c      	orrs	r4, r5
 800c3ca:	50d4      	str	r4, [r2, r3]
 800c3cc:	e770      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800c3ce:	23a8      	movs	r3, #168	; 0xa8
 800c3d0:	4a50      	ldr	r2, [pc, #320]	; (800c514 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c3d2:	4d51      	ldr	r5, [pc, #324]	; (800c518 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c3d4:	58d4      	ldr	r4, [r2, r3]
 800c3d6:	402c      	ands	r4, r5
 800c3d8:	50d4      	str	r4, [r2, r3]
 800c3da:	24b0      	movs	r4, #176	; 0xb0
 800c3dc:	58d5      	ldr	r5, [r2, r3]
 800c3de:	0524      	lsls	r4, r4, #20
 800c3e0:	432c      	orrs	r4, r5
 800c3e2:	50d4      	str	r4, [r2, r3]
 800c3e4:	e764      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800c3e6:	23a8      	movs	r3, #168	; 0xa8
 800c3e8:	250f      	movs	r5, #15
 800c3ea:	4a48      	ldr	r2, [pc, #288]	; (800c50c <RemapAndLinkDMAtoUARTTx+0x350>)
 800c3ec:	58d4      	ldr	r4, [r2, r3]
 800c3ee:	43ac      	bics	r4, r5
 800c3f0:	50d4      	str	r4, [r2, r3]
 800c3f2:	58d4      	ldr	r4, [r2, r3]
 800c3f4:	3d04      	subs	r5, #4
 800c3f6:	432c      	orrs	r4, r5
 800c3f8:	50d4      	str	r4, [r2, r3]
 800c3fa:	e759      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800c3fc:	23a8      	movs	r3, #168	; 0xa8
 800c3fe:	25f0      	movs	r5, #240	; 0xf0
 800c400:	4a44      	ldr	r2, [pc, #272]	; (800c514 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c402:	58d4      	ldr	r4, [r2, r3]
 800c404:	43ac      	bics	r4, r5
 800c406:	50d4      	str	r4, [r2, r3]
 800c408:	58d4      	ldr	r4, [r2, r3]
 800c40a:	3d60      	subs	r5, #96	; 0x60
 800c40c:	432c      	orrs	r4, r5
 800c40e:	50d4      	str	r4, [r2, r3]
 800c410:	e74e      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800c412:	4a40      	ldr	r2, [pc, #256]	; (800c514 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800c414:	23a8      	movs	r3, #168	; 0xa8
 800c416:	4d41      	ldr	r5, [pc, #260]	; (800c51c <RemapAndLinkDMAtoUARTTx+0x360>)
 800c418:	58d4      	ldr	r4, [r2, r3]
 800c41a:	402c      	ands	r4, r5
 800c41c:	50d4      	str	r4, [r2, r3]
 800c41e:	2490      	movs	r4, #144	; 0x90
 800c420:	58d5      	ldr	r5, [r2, r3]
 800c422:	0224      	lsls	r4, r4, #8
 800c424:	432c      	orrs	r4, r5
 800c426:	50d4      	str	r4, [r2, r3]
 800c428:	e742      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800c42a:	23a8      	movs	r3, #168	; 0xa8
 800c42c:	4a39      	ldr	r2, [pc, #228]	; (800c514 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c42e:	4d3a      	ldr	r5, [pc, #232]	; (800c518 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c430:	58d4      	ldr	r4, [r2, r3]
 800c432:	402c      	ands	r4, r5
 800c434:	50d4      	str	r4, [r2, r3]
 800c436:	2490      	movs	r4, #144	; 0x90
 800c438:	58d5      	ldr	r5, [r2, r3]
 800c43a:	0524      	lsls	r4, r4, #20
 800c43c:	432c      	orrs	r4, r5
 800c43e:	50d4      	str	r4, [r2, r3]
 800c440:	e736      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800c442:	23a8      	movs	r3, #168	; 0xa8
 800c444:	250f      	movs	r5, #15
 800c446:	4a31      	ldr	r2, [pc, #196]	; (800c50c <RemapAndLinkDMAtoUARTTx+0x350>)
 800c448:	58d4      	ldr	r4, [r2, r3]
 800c44a:	43ac      	bics	r4, r5
 800c44c:	50d4      	str	r4, [r2, r3]
 800c44e:	58d4      	ldr	r4, [r2, r3]
 800c450:	3d06      	subs	r5, #6
 800c452:	432c      	orrs	r4, r5
 800c454:	50d4      	str	r4, [r2, r3]
 800c456:	e72b      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800c458:	4a2c      	ldr	r2, [pc, #176]	; (800c50c <RemapAndLinkDMAtoUARTTx+0x350>)
 800c45a:	e7db      	b.n	800c414 <RemapAndLinkDMAtoUARTTx+0x258>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800c45c:	23a8      	movs	r3, #168	; 0xa8
 800c45e:	4a2b      	ldr	r2, [pc, #172]	; (800c50c <RemapAndLinkDMAtoUARTTx+0x350>)
 800c460:	4d2b      	ldr	r5, [pc, #172]	; (800c510 <RemapAndLinkDMAtoUARTTx+0x354>)
 800c462:	58d4      	ldr	r4, [r2, r3]
 800c464:	402c      	ands	r4, r5
 800c466:	50d4      	str	r4, [r2, r3]
 800c468:	2490      	movs	r4, #144	; 0x90
 800c46a:	58d5      	ldr	r5, [r2, r3]
 800c46c:	0324      	lsls	r4, r4, #12
 800c46e:	432c      	orrs	r4, r5
 800c470:	50d4      	str	r4, [r2, r3]
 800c472:	e71d      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800c474:	23a8      	movs	r3, #168	; 0xa8
 800c476:	25f0      	movs	r5, #240	; 0xf0
 800c478:	4a26      	ldr	r2, [pc, #152]	; (800c514 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c47a:	58d4      	ldr	r4, [r2, r3]
 800c47c:	43ac      	bics	r4, r5
 800c47e:	50d4      	str	r4, [r2, r3]
 800c480:	58d4      	ldr	r4, [r2, r3]
 800c482:	3d50      	subs	r5, #80	; 0x50
 800c484:	432c      	orrs	r4, r5
 800c486:	50d4      	str	r4, [r2, r3]
 800c488:	e712      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800c48a:	4a22      	ldr	r2, [pc, #136]	; (800c514 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800c48c:	23a8      	movs	r3, #168	; 0xa8
 800c48e:	4d23      	ldr	r5, [pc, #140]	; (800c51c <RemapAndLinkDMAtoUARTTx+0x360>)
 800c490:	58d4      	ldr	r4, [r2, r3]
 800c492:	402c      	ands	r4, r5
 800c494:	50d4      	str	r4, [r2, r3]
 800c496:	24a0      	movs	r4, #160	; 0xa0
 800c498:	58d5      	ldr	r5, [r2, r3]
 800c49a:	0224      	lsls	r4, r4, #8
 800c49c:	432c      	orrs	r4, r5
 800c49e:	50d4      	str	r4, [r2, r3]
 800c4a0:	e706      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800c4a2:	23a8      	movs	r3, #168	; 0xa8
 800c4a4:	4a1b      	ldr	r2, [pc, #108]	; (800c514 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c4a6:	4d1c      	ldr	r5, [pc, #112]	; (800c518 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c4a8:	58d4      	ldr	r4, [r2, r3]
 800c4aa:	402c      	ands	r4, r5
 800c4ac:	50d4      	str	r4, [r2, r3]
 800c4ae:	24a0      	movs	r4, #160	; 0xa0
 800c4b0:	58d5      	ldr	r5, [r2, r3]
 800c4b2:	0524      	lsls	r4, r4, #20
 800c4b4:	432c      	orrs	r4, r5
 800c4b6:	50d4      	str	r4, [r2, r3]
 800c4b8:	e6fa      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800c4ba:	23a8      	movs	r3, #168	; 0xa8
 800c4bc:	250f      	movs	r5, #15
 800c4be:	4a13      	ldr	r2, [pc, #76]	; (800c50c <RemapAndLinkDMAtoUARTTx+0x350>)
 800c4c0:	58d4      	ldr	r4, [r2, r3]
 800c4c2:	43ac      	bics	r4, r5
 800c4c4:	50d4      	str	r4, [r2, r3]
 800c4c6:	58d4      	ldr	r4, [r2, r3]
 800c4c8:	3d05      	subs	r5, #5
 800c4ca:	432c      	orrs	r4, r5
 800c4cc:	50d4      	str	r4, [r2, r3]
 800c4ce:	e6ef      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800c4d0:	4a0e      	ldr	r2, [pc, #56]	; (800c50c <RemapAndLinkDMAtoUARTTx+0x350>)
 800c4d2:	e7db      	b.n	800c48c <RemapAndLinkDMAtoUARTTx+0x2d0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800c4d4:	4a0d      	ldr	r2, [pc, #52]	; (800c50c <RemapAndLinkDMAtoUARTTx+0x350>)
 800c4d6:	e76f      	b.n	800c3b8 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800c4d8:	40013800 	.word	0x40013800
 800c4dc:	40004400 	.word	0x40004400
 800c4e0:	40004800 	.word	0x40004800
 800c4e4:	40004c00 	.word	0x40004c00
 800c4e8:	40005000 	.word	0x40005000
 800c4ec:	40011400 	.word	0x40011400
 800c4f0:	40011800 	.word	0x40011800
 800c4f4:	4002001c 	.word	0x4002001c
 800c4f8:	40020044 	.word	0x40020044
 800c4fc:	40020080 	.word	0x40020080
 800c500:	40020408 	.word	0x40020408
 800c504:	40020444 	.word	0x40020444
 800c508:	40020458 	.word	0x40020458
 800c50c:	40020400 	.word	0x40020400
 800c510:	fff0ffff 	.word	0xfff0ffff
 800c514:	40020000 	.word	0x40020000
 800c518:	f0ffffff 	.word	0xf0ffffff
 800c51c:	ffff0fff 	.word	0xffff0fff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c520:	680b      	ldr	r3, [r1, #0]
 800c522:	4a8e      	ldr	r2, [pc, #568]	; (800c75c <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d03b      	beq.n	800c5a0 <RemapAndLinkDMAtoUARTTx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800c528:	4a8d      	ldr	r2, [pc, #564]	; (800c760 <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d043      	beq.n	800c5b6 <RemapAndLinkDMAtoUARTTx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800c52e:	4a8d      	ldr	r2, [pc, #564]	; (800c764 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d04c      	beq.n	800c5ce <RemapAndLinkDMAtoUARTTx+0x412>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800c534:	4a8c      	ldr	r2, [pc, #560]	; (800c768 <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d055      	beq.n	800c5e6 <RemapAndLinkDMAtoUARTTx+0x42a>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800c53a:	4a8c      	ldr	r2, [pc, #560]	; (800c76c <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d05d      	beq.n	800c5fc <RemapAndLinkDMAtoUARTTx+0x440>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800c540:	4a8b      	ldr	r2, [pc, #556]	; (800c770 <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d000      	beq.n	800c548 <RemapAndLinkDMAtoUARTTx+0x38c>
 800c546:	e6b3      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800c548:	23a8      	movs	r3, #168	; 0xa8
 800c54a:	4a8a      	ldr	r2, [pc, #552]	; (800c774 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c54c:	4d8a      	ldr	r5, [pc, #552]	; (800c778 <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800c54e:	58d4      	ldr	r4, [r2, r3]
 800c550:	402c      	ands	r4, r5
 800c552:	50d4      	str	r4, [r2, r3]
 800c554:	24c0      	movs	r4, #192	; 0xc0
 800c556:	58d5      	ldr	r5, [r2, r3]
 800c558:	0324      	lsls	r4, r4, #12
 800c55a:	432c      	orrs	r4, r5
 800c55c:	50d4      	str	r4, [r2, r3]
 800c55e:	e6a7      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800c560:	680b      	ldr	r3, [r1, #0]
 800c562:	4a7e      	ldr	r2, [pc, #504]	; (800c75c <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d04b      	beq.n	800c600 <RemapAndLinkDMAtoUARTTx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800c568:	4a7d      	ldr	r2, [pc, #500]	; (800c760 <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d053      	beq.n	800c616 <RemapAndLinkDMAtoUARTTx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800c56e:	4a7d      	ldr	r2, [pc, #500]	; (800c764 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d05c      	beq.n	800c62e <RemapAndLinkDMAtoUARTTx+0x472>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800c574:	4a7c      	ldr	r2, [pc, #496]	; (800c768 <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d065      	beq.n	800c646 <RemapAndLinkDMAtoUARTTx+0x48a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800c57a:	4a7c      	ldr	r2, [pc, #496]	; (800c76c <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d06d      	beq.n	800c65c <RemapAndLinkDMAtoUARTTx+0x4a0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800c580:	4a7b      	ldr	r2, [pc, #492]	; (800c770 <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d000      	beq.n	800c588 <RemapAndLinkDMAtoUARTTx+0x3cc>
 800c586:	e693      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800c588:	23a8      	movs	r3, #168	; 0xa8
 800c58a:	4a7a      	ldr	r2, [pc, #488]	; (800c774 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c58c:	4d7a      	ldr	r5, [pc, #488]	; (800c778 <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800c58e:	58d4      	ldr	r4, [r2, r3]
 800c590:	402c      	ands	r4, r5
 800c592:	50d4      	str	r4, [r2, r3]
 800c594:	24d0      	movs	r4, #208	; 0xd0
 800c596:	58d5      	ldr	r5, [r2, r3]
 800c598:	0324      	lsls	r4, r4, #12
 800c59a:	432c      	orrs	r4, r5
 800c59c:	50d4      	str	r4, [r2, r3]
 800c59e:	e687      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800c5a0:	23a8      	movs	r3, #168	; 0xa8
 800c5a2:	25f0      	movs	r5, #240	; 0xf0
 800c5a4:	4a75      	ldr	r2, [pc, #468]	; (800c77c <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c5a6:	58d4      	ldr	r4, [r2, r3]
 800c5a8:	43ac      	bics	r4, r5
 800c5aa:	50d4      	str	r4, [r2, r3]
 800c5ac:	58d4      	ldr	r4, [r2, r3]
 800c5ae:	3d30      	subs	r5, #48	; 0x30
 800c5b0:	432c      	orrs	r4, r5
 800c5b2:	50d4      	str	r4, [r2, r3]
 800c5b4:	e67c      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800c5b6:	4a71      	ldr	r2, [pc, #452]	; (800c77c <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800c5b8:	23a8      	movs	r3, #168	; 0xa8
 800c5ba:	4d71      	ldr	r5, [pc, #452]	; (800c780 <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800c5bc:	58d4      	ldr	r4, [r2, r3]
 800c5be:	402c      	ands	r4, r5
 800c5c0:	50d4      	str	r4, [r2, r3]
 800c5c2:	24c0      	movs	r4, #192	; 0xc0
 800c5c4:	58d5      	ldr	r5, [r2, r3]
 800c5c6:	0224      	lsls	r4, r4, #8
 800c5c8:	432c      	orrs	r4, r5
 800c5ca:	50d4      	str	r4, [r2, r3]
 800c5cc:	e670      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800c5ce:	23a8      	movs	r3, #168	; 0xa8
 800c5d0:	4a6a      	ldr	r2, [pc, #424]	; (800c77c <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c5d2:	4d6c      	ldr	r5, [pc, #432]	; (800c784 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800c5d4:	58d4      	ldr	r4, [r2, r3]
 800c5d6:	402c      	ands	r4, r5
 800c5d8:	50d4      	str	r4, [r2, r3]
 800c5da:	24c0      	movs	r4, #192	; 0xc0
 800c5dc:	58d5      	ldr	r5, [r2, r3]
 800c5de:	0524      	lsls	r4, r4, #20
 800c5e0:	432c      	orrs	r4, r5
 800c5e2:	50d4      	str	r4, [r2, r3]
 800c5e4:	e664      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800c5e6:	23a8      	movs	r3, #168	; 0xa8
 800c5e8:	250f      	movs	r5, #15
 800c5ea:	4a62      	ldr	r2, [pc, #392]	; (800c774 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c5ec:	58d4      	ldr	r4, [r2, r3]
 800c5ee:	43ac      	bics	r4, r5
 800c5f0:	50d4      	str	r4, [r2, r3]
 800c5f2:	58d4      	ldr	r4, [r2, r3]
 800c5f4:	3d03      	subs	r5, #3
 800c5f6:	432c      	orrs	r4, r5
 800c5f8:	50d4      	str	r4, [r2, r3]
 800c5fa:	e659      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800c5fc:	4a5d      	ldr	r2, [pc, #372]	; (800c774 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c5fe:	e7db      	b.n	800c5b8 <RemapAndLinkDMAtoUARTTx+0x3fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800c600:	23a8      	movs	r3, #168	; 0xa8
 800c602:	25f0      	movs	r5, #240	; 0xf0
 800c604:	4a5d      	ldr	r2, [pc, #372]	; (800c77c <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c606:	58d4      	ldr	r4, [r2, r3]
 800c608:	43ac      	bics	r4, r5
 800c60a:	50d4      	str	r4, [r2, r3]
 800c60c:	58d4      	ldr	r4, [r2, r3]
 800c60e:	3d20      	subs	r5, #32
 800c610:	432c      	orrs	r4, r5
 800c612:	50d4      	str	r4, [r2, r3]
 800c614:	e64c      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800c616:	4a59      	ldr	r2, [pc, #356]	; (800c77c <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800c618:	23a8      	movs	r3, #168	; 0xa8
 800c61a:	4d59      	ldr	r5, [pc, #356]	; (800c780 <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800c61c:	58d4      	ldr	r4, [r2, r3]
 800c61e:	402c      	ands	r4, r5
 800c620:	50d4      	str	r4, [r2, r3]
 800c622:	24d0      	movs	r4, #208	; 0xd0
 800c624:	58d5      	ldr	r5, [r2, r3]
 800c626:	0224      	lsls	r4, r4, #8
 800c628:	432c      	orrs	r4, r5
 800c62a:	50d4      	str	r4, [r2, r3]
 800c62c:	e640      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800c62e:	23a8      	movs	r3, #168	; 0xa8
 800c630:	4a52      	ldr	r2, [pc, #328]	; (800c77c <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c632:	4d54      	ldr	r5, [pc, #336]	; (800c784 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800c634:	58d4      	ldr	r4, [r2, r3]
 800c636:	402c      	ands	r4, r5
 800c638:	50d4      	str	r4, [r2, r3]
 800c63a:	24d0      	movs	r4, #208	; 0xd0
 800c63c:	58d5      	ldr	r5, [r2, r3]
 800c63e:	0524      	lsls	r4, r4, #20
 800c640:	432c      	orrs	r4, r5
 800c642:	50d4      	str	r4, [r2, r3]
 800c644:	e634      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800c646:	23a8      	movs	r3, #168	; 0xa8
 800c648:	250f      	movs	r5, #15
 800c64a:	4a4a      	ldr	r2, [pc, #296]	; (800c774 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c64c:	58d4      	ldr	r4, [r2, r3]
 800c64e:	43ac      	bics	r4, r5
 800c650:	50d4      	str	r4, [r2, r3]
 800c652:	58d4      	ldr	r4, [r2, r3]
 800c654:	3d02      	subs	r5, #2
 800c656:	432c      	orrs	r4, r5
 800c658:	50d4      	str	r4, [r2, r3]
 800c65a:	e629      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800c65c:	4a45      	ldr	r2, [pc, #276]	; (800c774 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c65e:	e7db      	b.n	800c618 <RemapAndLinkDMAtoUARTTx+0x45c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800c660:	23a8      	movs	r3, #168	; 0xa8
 800c662:	25f0      	movs	r5, #240	; 0xf0
 800c664:	4a45      	ldr	r2, [pc, #276]	; (800c77c <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c666:	58d4      	ldr	r4, [r2, r3]
 800c668:	43ac      	bics	r4, r5
 800c66a:	50d4      	str	r4, [r2, r3]
 800c66c:	58d4      	ldr	r4, [r2, r3]
 800c66e:	3d10      	subs	r5, #16
 800c670:	432c      	orrs	r4, r5
 800c672:	50d4      	str	r4, [r2, r3]
 800c674:	e61c      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800c676:	4a41      	ldr	r2, [pc, #260]	; (800c77c <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800c678:	23a8      	movs	r3, #168	; 0xa8
 800c67a:	4d41      	ldr	r5, [pc, #260]	; (800c780 <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800c67c:	58d4      	ldr	r4, [r2, r3]
 800c67e:	402c      	ands	r4, r5
 800c680:	50d4      	str	r4, [r2, r3]
 800c682:	24e0      	movs	r4, #224	; 0xe0
 800c684:	58d5      	ldr	r5, [r2, r3]
 800c686:	0224      	lsls	r4, r4, #8
 800c688:	432c      	orrs	r4, r5
 800c68a:	50d4      	str	r4, [r2, r3]
 800c68c:	e610      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800c68e:	23a8      	movs	r3, #168	; 0xa8
 800c690:	4a3a      	ldr	r2, [pc, #232]	; (800c77c <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c692:	4d3c      	ldr	r5, [pc, #240]	; (800c784 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800c694:	58d4      	ldr	r4, [r2, r3]
 800c696:	402c      	ands	r4, r5
 800c698:	50d4      	str	r4, [r2, r3]
 800c69a:	24e0      	movs	r4, #224	; 0xe0
 800c69c:	58d5      	ldr	r5, [r2, r3]
 800c69e:	0524      	lsls	r4, r4, #20
 800c6a0:	432c      	orrs	r4, r5
 800c6a2:	50d4      	str	r4, [r2, r3]
 800c6a4:	e604      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800c6a6:	23a8      	movs	r3, #168	; 0xa8
 800c6a8:	250f      	movs	r5, #15
 800c6aa:	4a32      	ldr	r2, [pc, #200]	; (800c774 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c6ac:	58d4      	ldr	r4, [r2, r3]
 800c6ae:	43ac      	bics	r4, r5
 800c6b0:	50d4      	str	r4, [r2, r3]
 800c6b2:	58d4      	ldr	r4, [r2, r3]
 800c6b4:	3d01      	subs	r5, #1
 800c6b6:	432c      	orrs	r4, r5
 800c6b8:	50d4      	str	r4, [r2, r3]
 800c6ba:	e5f9      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800c6bc:	4a2d      	ldr	r2, [pc, #180]	; (800c774 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c6be:	e7db      	b.n	800c678 <RemapAndLinkDMAtoUARTTx+0x4bc>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800c6c0:	4a31      	ldr	r2, [pc, #196]	; (800c788 <RemapAndLinkDMAtoUARTTx+0x5cc>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d000      	beq.n	800c6c8 <RemapAndLinkDMAtoUARTTx+0x50c>
 800c6c6:	e5f3      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
 800c6c8:	680b      	ldr	r3, [r1, #0]
 800c6ca:	4a24      	ldr	r2, [pc, #144]	; (800c75c <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d01b      	beq.n	800c708 <RemapAndLinkDMAtoUARTTx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800c6d0:	4a23      	ldr	r2, [pc, #140]	; (800c760 <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d022      	beq.n	800c71c <RemapAndLinkDMAtoUARTTx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800c6d6:	4a23      	ldr	r2, [pc, #140]	; (800c764 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d02b      	beq.n	800c734 <RemapAndLinkDMAtoUARTTx+0x578>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800c6dc:	4a22      	ldr	r2, [pc, #136]	; (800c768 <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d034      	beq.n	800c74c <RemapAndLinkDMAtoUARTTx+0x590>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800c6e2:	4a22      	ldr	r2, [pc, #136]	; (800c76c <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d036      	beq.n	800c756 <RemapAndLinkDMAtoUARTTx+0x59a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800c6e8:	4a21      	ldr	r2, [pc, #132]	; (800c770 <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d000      	beq.n	800c6f0 <RemapAndLinkDMAtoUARTTx+0x534>
 800c6ee:	e5df      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800c6f0:	23a8      	movs	r3, #168	; 0xa8
 800c6f2:	4a20      	ldr	r2, [pc, #128]	; (800c774 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c6f4:	4d20      	ldr	r5, [pc, #128]	; (800c778 <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800c6f6:	58d4      	ldr	r4, [r2, r3]
 800c6f8:	402c      	ands	r4, r5
 800c6fa:	50d4      	str	r4, [r2, r3]
 800c6fc:	24f0      	movs	r4, #240	; 0xf0
 800c6fe:	58d5      	ldr	r5, [r2, r3]
 800c700:	0324      	lsls	r4, r4, #12
 800c702:	432c      	orrs	r4, r5
 800c704:	50d4      	str	r4, [r2, r3]
 800c706:	e5d3      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800c708:	23a8      	movs	r3, #168	; 0xa8
 800c70a:	26f0      	movs	r6, #240	; 0xf0
 800c70c:	4a1b      	ldr	r2, [pc, #108]	; (800c77c <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c70e:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800c710:	43b5      	bics	r5, r6
 800c712:	50d5      	str	r5, [r2, r3]
 800c714:	58d4      	ldr	r4, [r2, r3]
 800c716:	4334      	orrs	r4, r6
 800c718:	50d4      	str	r4, [r2, r3]
 800c71a:	e5c9      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800c71c:	4a17      	ldr	r2, [pc, #92]	; (800c77c <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800c71e:	23a8      	movs	r3, #168	; 0xa8
 800c720:	4d17      	ldr	r5, [pc, #92]	; (800c780 <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800c722:	58d4      	ldr	r4, [r2, r3]
 800c724:	402c      	ands	r4, r5
 800c726:	50d4      	str	r4, [r2, r3]
 800c728:	24f0      	movs	r4, #240	; 0xf0
 800c72a:	58d5      	ldr	r5, [r2, r3]
 800c72c:	0224      	lsls	r4, r4, #8
 800c72e:	432c      	orrs	r4, r5
 800c730:	50d4      	str	r4, [r2, r3]
 800c732:	e5bd      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800c734:	23a8      	movs	r3, #168	; 0xa8
 800c736:	4a11      	ldr	r2, [pc, #68]	; (800c77c <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c738:	4d12      	ldr	r5, [pc, #72]	; (800c784 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800c73a:	58d4      	ldr	r4, [r2, r3]
 800c73c:	402c      	ands	r4, r5
 800c73e:	50d4      	str	r4, [r2, r3]
 800c740:	24f0      	movs	r4, #240	; 0xf0
 800c742:	58d5      	ldr	r5, [r2, r3]
 800c744:	0524      	lsls	r4, r4, #20
 800c746:	432c      	orrs	r4, r5
 800c748:	50d4      	str	r4, [r2, r3]
 800c74a:	e5b1      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800c74c:	23a8      	movs	r3, #168	; 0xa8
 800c74e:	4a09      	ldr	r2, [pc, #36]	; (800c774 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c750:	260f      	movs	r6, #15
 800c752:	58d5      	ldr	r5, [r2, r3]
 800c754:	e7dc      	b.n	800c710 <RemapAndLinkDMAtoUARTTx+0x554>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800c756:	4a07      	ldr	r2, [pc, #28]	; (800c774 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c758:	e7e1      	b.n	800c71e <RemapAndLinkDMAtoUARTTx+0x562>
 800c75a:	46c0      	nop			; (mov r8, r8)
 800c75c:	4002001c 	.word	0x4002001c
 800c760:	40020044 	.word	0x40020044
 800c764:	40020080 	.word	0x40020080
 800c768:	40020408 	.word	0x40020408
 800c76c:	40020444 	.word	0x40020444
 800c770:	40020458 	.word	0x40020458
 800c774:	40020400 	.word	0x40020400
 800c778:	fff0ffff 	.word	0xfff0ffff
 800c77c:	40020000 	.word	0x40020000
 800c780:	ffff0fff 	.word	0xffff0fff
 800c784:	f0ffffff 	.word	0xf0ffffff
 800c788:	40011c00 	.word	0x40011c00

0800c78c <DMA_MSG_TX_Setup>:
	if (msgTxDMA[0].Parent == NULL)
 800c78c:	4b0c      	ldr	r3, [pc, #48]	; (800c7c0 <DMA_MSG_TX_Setup+0x34>)
{	
 800c78e:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800c790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c792:	2a00      	cmp	r2, #0
 800c794:	d00f      	beq.n	800c7b6 <DMA_MSG_TX_Setup+0x2a>
	else if (msgTxDMA[1].Parent == NULL)
 800c796:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c798:	2a00      	cmp	r2, #0
 800c79a:	d00b      	beq.n	800c7b4 <DMA_MSG_TX_Setup+0x28>
	else if (msgTxDMA[2].Parent == NULL)
 800c79c:	2294      	movs	r2, #148	; 0x94
 800c79e:	589a      	ldr	r2, [r3, r2]
 800c7a0:	2a00      	cmp	r2, #0
 800c7a2:	d00a      	beq.n	800c7ba <DMA_MSG_TX_Setup+0x2e>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800c7a4:	0021      	movs	r1, r4
 800c7a6:	f7ff fd09 	bl	800c1bc <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	0020      	movs	r0, r4
 800c7ae:	f7ff f8e1 	bl	800b974 <SetupDMAInterrupts>
}
 800c7b2:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[1];
 800c7b4:	3338      	adds	r3, #56	; 0x38
 800c7b6:	001c      	movs	r4, r3
 800c7b8:	e7f4      	b.n	800c7a4 <DMA_MSG_TX_Setup+0x18>
		hDMA = &msgTxDMA[2];  
 800c7ba:	3370      	adds	r3, #112	; 0x70
 800c7bc:	001c      	movs	r4, r3
 800c7be:	e7f1      	b.n	800c7a4 <DMA_MSG_TX_Setup+0x18>
 800c7c0:	20001dc8 	.word	0x20001dc8

0800c7c4 <CRC_Init>:
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
  hcrc.Instance = CRC;
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800c7c4:	2310      	movs	r3, #16
 800c7c6:	4807      	ldr	r0, [pc, #28]	; (800c7e4 <CRC_Init+0x20>)
{
 800c7c8:	b510      	push	{r4, lr}
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800c7ca:	60c3      	str	r3, [r0, #12]
  hcrc.Instance = CRC;
 800c7cc:	4b06      	ldr	r3, [pc, #24]	; (800c7e8 <CRC_Init+0x24>)
 800c7ce:	6003      	str	r3, [r0, #0]
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	8083      	strh	r3, [r0, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800c7d4:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800c7d6:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800c7d8:	3303      	adds	r3, #3
 800c7da:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800c7dc:	f003 fa60 	bl	800fca0 <HAL_CRC_Init>
}
 800c7e0:	bd10      	pop	{r4, pc}
 800c7e2:	46c0      	nop			; (mov r8, r8)
 800c7e4:	20007278 	.word	0x20007278
 800c7e8:	40023000 	.word	0x40023000

0800c7ec <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800c7ec:	2340      	movs	r3, #64	; 0x40
 800c7ee:	4a05      	ldr	r2, [pc, #20]	; (800c804 <HAL_CRC_MspInit+0x18>)
{
 800c7f0:	b082      	sub	sp, #8
	__HAL_RCC_CRC_CLK_ENABLE();
 800c7f2:	6951      	ldr	r1, [r2, #20]
 800c7f4:	4319      	orrs	r1, r3
 800c7f6:	6151      	str	r1, [r2, #20]
 800c7f8:	6952      	ldr	r2, [r2, #20]
 800c7fa:	4013      	ands	r3, r2
 800c7fc:	9301      	str	r3, [sp, #4]
 800c7fe:	9b01      	ldr	r3, [sp, #4]
}
 800c800:	b002      	add	sp, #8
 800c802:	4770      	bx	lr
 800c804:	40021000 	.word	0x40021000

0800c808 <CalculateCRC8>:
	/* Disable peripheral clock */
	__HAL_RCC_CRC_CLK_DISABLE();
}

uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800c808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80a:	0004      	movs	r4, r0
 800c80c:	000d      	movs	r5, r1
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800c80e:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800c810:	2c00      	cmp	r4, #0
 800c812:	d001      	beq.n	800c818 <CalculateCRC8+0x10>
 800c814:	2900      	cmp	r1, #0
 800c816:	d100      	bne.n	800c81a <CalculateCRC8+0x12>
}
 800c818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800c81a:	4f09      	ldr	r7, [pc, #36]	; (800c840 <CalculateCRC8+0x38>)
 800c81c:	088e      	lsrs	r6, r1, #2
 800c81e:	0032      	movs	r2, r6
 800c820:	0021      	movs	r1, r4
 800c822:	0038      	movs	r0, r7
 800c824:	f003 fa9a 	bl	800fd5c <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800c828:	07ab      	lsls	r3, r5, #30
 800c82a:	d101      	bne.n	800c830 <CalculateCRC8+0x28>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800c82c:	b2c0      	uxtb	r0, r0
 800c82e:	e7f3      	b.n	800c818 <CalculateCRC8+0x10>
 800c830:	0131      	lsls	r1, r6, #4
 800c832:	1861      	adds	r1, r4, r1
 800c834:	2201      	movs	r2, #1
 800c836:	0038      	movs	r0, r7
 800c838:	f003 fa66 	bl	800fd08 <HAL_CRC_Accumulate>
 800c83c:	b2c0      	uxtb	r0, r0
 800c83e:	e7eb      	b.n	800c818 <CalculateCRC8+0x10>
 800c840:	20007278 	.word	0x20007278

0800c844 <GPIO_Init>:
/** Pinout Configuration
*/
void GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800c844:	2080      	movs	r0, #128	; 0x80
 800c846:	4b1f      	ldr	r3, [pc, #124]	; (800c8c4 <GPIO_Init+0x80>)
 800c848:	0300      	lsls	r0, r0, #12
 800c84a:	6959      	ldr	r1, [r3, #20]
{
 800c84c:	b500      	push	{lr}
  __GPIOC_CLK_ENABLE();
 800c84e:	4301      	orrs	r1, r0
 800c850:	6159      	str	r1, [r3, #20]
 800c852:	695a      	ldr	r2, [r3, #20]
{
 800c854:	b08b      	sub	sp, #44	; 0x2c
  __GPIOC_CLK_ENABLE();
 800c856:	4002      	ands	r2, r0
  __GPIOA_CLK_ENABLE();
 800c858:	2080      	movs	r0, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800c85a:	9200      	str	r2, [sp, #0]
 800c85c:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 800c85e:	6959      	ldr	r1, [r3, #20]
 800c860:	0280      	lsls	r0, r0, #10
 800c862:	4301      	orrs	r1, r0
 800c864:	6159      	str	r1, [r3, #20]
 800c866:	695a      	ldr	r2, [r3, #20]
 800c868:	4002      	ands	r2, r0
  __GPIOD_CLK_ENABLE();
 800c86a:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800c86c:	9201      	str	r2, [sp, #4]
 800c86e:	9a01      	ldr	r2, [sp, #4]
  __GPIOD_CLK_ENABLE();
 800c870:	6959      	ldr	r1, [r3, #20]
 800c872:	0340      	lsls	r0, r0, #13
 800c874:	4301      	orrs	r1, r0
 800c876:	6159      	str	r1, [r3, #20]
 800c878:	695a      	ldr	r2, [r3, #20]
 800c87a:	4002      	ands	r2, r0
	__GPIOB_CLK_ENABLE();
 800c87c:	2080      	movs	r0, #128	; 0x80
  __GPIOD_CLK_ENABLE();
 800c87e:	9202      	str	r2, [sp, #8]
 800c880:	9a02      	ldr	r2, [sp, #8]
	__GPIOB_CLK_ENABLE();
 800c882:	6959      	ldr	r1, [r3, #20]
 800c884:	02c0      	lsls	r0, r0, #11
 800c886:	4301      	orrs	r1, r0
 800c888:	6159      	str	r1, [r3, #20]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c88a:	2180      	movs	r1, #128	; 0x80
	__GPIOB_CLK_ENABLE();
 800c88c:	695a      	ldr	r2, [r3, #20]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c88e:	03c9      	lsls	r1, r1, #15
	__GPIOB_CLK_ENABLE();
 800c890:	4002      	ands	r2, r0
 800c892:	9203      	str	r2, [sp, #12]
 800c894:	9a03      	ldr	r2, [sp, #12]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c896:	695a      	ldr	r2, [r3, #20]
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c898:	2090      	movs	r0, #144	; 0x90
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c89a:	430a      	orrs	r2, r1
 800c89c:	615a      	str	r2, [r3, #20]
 800c89e:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c8a0:	05c0      	lsls	r0, r0, #23
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c8a2:	400b      	ands	r3, r1
 800c8a4:	9304      	str	r3, [sp, #16]
 800c8a6:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800c8a8:	2380      	movs	r3, #128	; 0x80
 800c8aa:	011b      	lsls	r3, r3, #4
 800c8ac:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8b2:	2300      	movs	r3, #0
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c8b4:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8b6:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c8b8:	3303      	adds	r3, #3
 800c8ba:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c8bc:	f004 f924 	bl	8010b08 <HAL_GPIO_Init>
}
 800c8c0:	b00b      	add	sp, #44	; 0x2c
 800c8c2:	bd00      	pop	{pc}
 800c8c4:	40021000 	.word	0x40021000

0800c8c8 <GetPortGPIOs>:
}

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800c8c8:	b570      	push	{r4, r5, r6, lr}
 800c8ca:	0015      	movs	r5, r2
 800c8cc:	001c      	movs	r4, r3
 800c8ce:	000e      	movs	r6, r1
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800c8d0:	f000 fdd6 	bl	800d480 <GetUart>
	
	if (huart == &huart1) 
 800c8d4:	4a2c      	ldr	r2, [pc, #176]	; (800c988 <GetPortGPIOs+0xc0>)
	UART_HandleTypeDef* huart = GetUart(port);
 800c8d6:	0003      	movs	r3, r0
	if (huart == &huart1) 
 800c8d8:	4290      	cmp	r0, r2
 800c8da:	d010      	beq.n	800c8fe <GetPortGPIOs+0x36>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800c8dc:	4a2b      	ldr	r2, [pc, #172]	; (800c98c <GetPortGPIOs+0xc4>)
 800c8de:	4290      	cmp	r0, r2
 800c8e0:	d031      	beq.n	800c946 <GetPortGPIOs+0x7e>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800c8e2:	4a2b      	ldr	r2, [pc, #172]	; (800c990 <GetPortGPIOs+0xc8>)
 800c8e4:	4290      	cmp	r0, r2
 800c8e6:	d017      	beq.n	800c918 <GetPortGPIOs+0x50>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800c8e8:	4a2a      	ldr	r2, [pc, #168]	; (800c994 <GetPortGPIOs+0xcc>)
 800c8ea:	4290      	cmp	r0, r2
 800c8ec:	d036      	beq.n	800c95c <GetPortGPIOs+0x94>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800c8ee:	4a2a      	ldr	r2, [pc, #168]	; (800c998 <GetPortGPIOs+0xd0>)
 800c8f0:	4290      	cmp	r0, r2
 800c8f2:	d03e      	beq.n	800c972 <GetPortGPIOs+0xaa>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800c8f4:	4a29      	ldr	r2, [pc, #164]	; (800c99c <GetPortGPIOs+0xd4>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800c8f6:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d019      	beq.n	800c930 <GetPortGPIOs+0x68>
	
	return result;	
}
 800c8fc:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c8fe:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART1_TX_PIN;
 800c900:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c902:	05db      	lsls	r3, r3, #23
		*TX_Pin = USART1_TX_PIN;
 800c904:	0092      	lsls	r2, r2, #2
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c906:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800c908:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800c90a:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800c90c:	2380      	movs	r3, #128	; 0x80
 800c90e:	9a04      	ldr	r2, [sp, #16]
 800c910:	00db      	lsls	r3, r3, #3
 800c912:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c914:	2000      	movs	r0, #0
 800c916:	e7f1      	b.n	800c8fc <GetPortGPIOs+0x34>
		*TX_Pin = USART3_TX_PIN;
 800c918:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800c91a:	4b21      	ldr	r3, [pc, #132]	; (800c9a0 <GetPortGPIOs+0xd8>)
		*TX_Pin = USART3_TX_PIN;
 800c91c:	00d2      	lsls	r2, r2, #3
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800c91e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800c920:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800c922:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800c924:	2380      	movs	r3, #128	; 0x80
 800c926:	9a04      	ldr	r2, [sp, #16]
 800c928:	011b      	lsls	r3, r3, #4
 800c92a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c92c:	2000      	movs	r0, #0
 800c92e:	e7e5      	b.n	800c8fc <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800c930:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART6_TX_PIN;
 800c932:	2210      	movs	r2, #16
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800c934:	05db      	lsls	r3, r3, #23
 800c936:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800c938:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800c93a:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800c93c:	2320      	movs	r3, #32
 800c93e:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800c940:	2000      	movs	r0, #0
		*RX_Pin = USART6_RX_PIN;
 800c942:	8013      	strh	r3, [r2, #0]
 800c944:	e7da      	b.n	800c8fc <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800c946:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART2_TX_PIN;
 800c948:	2204      	movs	r2, #4
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800c94a:	05db      	lsls	r3, r3, #23
 800c94c:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800c94e:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800c950:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800c952:	2308      	movs	r3, #8
 800c954:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800c956:	2000      	movs	r0, #0
		*RX_Pin = USART2_RX_PIN;
 800c958:	8013      	strh	r3, [r2, #0]
 800c95a:	e7cf      	b.n	800c8fc <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800c95c:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART4_TX_PIN;
 800c95e:	2201      	movs	r2, #1
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800c960:	05db      	lsls	r3, r3, #23
 800c962:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800c964:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800c966:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800c968:	2302      	movs	r3, #2
 800c96a:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800c96c:	2000      	movs	r0, #0
		*RX_Pin = USART4_RX_PIN;
 800c96e:	8013      	strh	r3, [r2, #0]
 800c970:	e7c4      	b.n	800c8fc <GetPortGPIOs+0x34>
		*TX_Pin = USART5_TX_PIN;
 800c972:	2208      	movs	r2, #8
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800c974:	4b0a      	ldr	r3, [pc, #40]	; (800c9a0 <GetPortGPIOs+0xd8>)
	BOS_Status result = BOS_OK;
 800c976:	2000      	movs	r0, #0
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800c978:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800c97a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800c97c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800c97e:	2310      	movs	r3, #16
 800c980:	9a04      	ldr	r2, [sp, #16]
 800c982:	8013      	strh	r3, [r2, #0]
 800c984:	e7ba      	b.n	800c8fc <GetPortGPIOs+0x34>
 800c986:	46c0      	nop			; (mov r8, r8)
 800c988:	200070b8 	.word	0x200070b8
 800c98c:	20007208 	.word	0x20007208
 800c990:	20006fd8 	.word	0x20006fd8
 800c994:	20007198 	.word	0x20007198
 800c998:	20007048 	.word	0x20007048
 800c99c:	20007128 	.word	0x20007128
 800c9a0:	48000400 	.word	0x48000400

0800c9a4 <IsFactoryReset>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P_last_TX_Pin, P_last_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
  /* Enable all GPIO Ports Clocks */
  __GPIOA_CLK_ENABLE();
 800c9a4:	2080      	movs	r0, #128	; 0x80
 800c9a6:	4b38      	ldr	r3, [pc, #224]	; (800ca88 <IsFactoryReset+0xe4>)
 800c9a8:	0280      	lsls	r0, r0, #10
 800c9aa:	6959      	ldr	r1, [r3, #20]
{
 800c9ac:	b570      	push	{r4, r5, r6, lr}
  __GPIOA_CLK_ENABLE();
 800c9ae:	4301      	orrs	r1, r0
 800c9b0:	6159      	str	r1, [r3, #20]
 800c9b2:	695a      	ldr	r2, [r3, #20]
{
 800c9b4:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800c9b6:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800c9b8:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800c9ba:	9209      	str	r2, [sp, #36]	; 0x24
 800c9bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __GPIOB_CLK_ENABLE();
 800c9be:	6959      	ldr	r1, [r3, #20]
 800c9c0:	02c0      	lsls	r0, r0, #11
 800c9c2:	4301      	orrs	r1, r0
 800c9c4:	6159      	str	r1, [r3, #20]
 800c9c6:	695a      	ldr	r2, [r3, #20]
  __GPIOC_CLK_ENABLE();
	__GPIOD_CLK_ENABLE();
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800c9c8:	2412      	movs	r4, #18
  __GPIOB_CLK_ENABLE();
 800c9ca:	4002      	ands	r2, r0
  __GPIOC_CLK_ENABLE();
 800c9cc:	2080      	movs	r0, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800c9ce:	920a      	str	r2, [sp, #40]	; 0x28
 800c9d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __GPIOC_CLK_ENABLE();
 800c9d2:	6959      	ldr	r1, [r3, #20]
 800c9d4:	0300      	lsls	r0, r0, #12
 800c9d6:	4301      	orrs	r1, r0
 800c9d8:	6159      	str	r1, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800c9da:	2180      	movs	r1, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800c9dc:	695a      	ldr	r2, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800c9de:	0349      	lsls	r1, r1, #13
  __GPIOC_CLK_ENABLE();
 800c9e0:	4002      	ands	r2, r0
 800c9e2:	920b      	str	r2, [sp, #44]	; 0x2c
 800c9e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__GPIOD_CLK_ENABLE();
 800c9e6:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800c9e8:	ad03      	add	r5, sp, #12
	__GPIOD_CLK_ENABLE();
 800c9ea:	430a      	orrs	r2, r1
 800c9ec:	615a      	str	r2, [r3, #20]
 800c9ee:	695b      	ldr	r3, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800c9f0:	446c      	add	r4, sp
	__GPIOD_CLK_ENABLE();
 800c9f2:	400b      	ands	r3, r1
 800c9f4:	930c      	str	r3, [sp, #48]	; 0x30
 800c9f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800c9f8:	230e      	movs	r3, #14
 800c9fa:	446b      	add	r3, sp
 800c9fc:	9300      	str	r3, [sp, #0]
 800c9fe:	002a      	movs	r2, r5
 800ca00:	ab06      	add	r3, sp, #24
 800ca02:	a905      	add	r1, sp, #20
 800ca04:	2001      	movs	r0, #1
 800ca06:	f7ff ff5f 	bl	800c8c8 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800ca0a:	aa04      	add	r2, sp, #16
 800ca0c:	ab08      	add	r3, sp, #32
 800ca0e:	a907      	add	r1, sp, #28
 800ca10:	9400      	str	r4, [sp, #0]
 800ca12:	2006      	movs	r0, #6
 800ca14:	f7ff ff58 	bl	800c8c8 <GetPortGPIOs>
	
	/* TXD of first port */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ca18:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca1a:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ca1c:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800ca1e:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800ca20:	a90d      	add	r1, sp, #52	; 0x34
 800ca22:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800ca24:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca26:	960f      	str	r6, [sp, #60]	; 0x3c
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800ca28:	f004 f86e 	bl	8010b08 <HAL_GPIO_Init>
	
	/* RXD of last port */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800ca2c:	2302      	movs	r3, #2
 800ca2e:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800ca30:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800ca32:	a90d      	add	r1, sp, #52	; 0x34
 800ca34:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800ca36:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ca38:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800ca3a:	f004 f865 	bl	8010b08 <HAL_GPIO_Init>

	
	/* Check for factory reset conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800ca3e:	8829      	ldrh	r1, [r5, #0]
 800ca40:	2200      	movs	r2, #0
 800ca42:	9805      	ldr	r0, [sp, #20]
 800ca44:	f004 fa00 	bl	8010e48 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800ca48:	2005      	movs	r0, #5
 800ca4a:	f000 fadf 	bl	800d00c <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800ca4e:	8821      	ldrh	r1, [r4, #0]
 800ca50:	9808      	ldr	r0, [sp, #32]
 800ca52:	f004 f9f3 	bl	8010e3c <HAL_GPIO_ReadPin>
 800ca56:	2800      	cmp	r0, #0
 800ca58:	d006      	beq.n	800ca68 <IsFactoryReset+0xc4>
		}
	}

	/* Clear flag for formated EEPROM if it was already set */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800ca5a:	2201      	movs	r2, #1
	
	return 0;
 800ca5c:	2000      	movs	r0, #0
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800ca5e:	4b0b      	ldr	r3, [pc, #44]	; (800ca8c <IsFactoryReset+0xe8>)
 800ca60:	4252      	negs	r2, r2
 800ca62:	601a      	str	r2, [r3, #0]
}
 800ca64:	b012      	add	sp, #72	; 0x48
 800ca66:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800ca68:	8829      	ldrh	r1, [r5, #0]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	9805      	ldr	r0, [sp, #20]
 800ca6e:	f004 f9eb 	bl	8010e48 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800ca72:	2005      	movs	r0, #5
 800ca74:	f000 faca 	bl	800d00c <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800ca78:	8821      	ldrh	r1, [r4, #0]
 800ca7a:	9808      	ldr	r0, [sp, #32]
 800ca7c:	f004 f9de 	bl	8010e3c <HAL_GPIO_ReadPin>
 800ca80:	2801      	cmp	r0, #1
 800ca82:	d1ea      	bne.n	800ca5a <IsFactoryReset+0xb6>
 800ca84:	e7ee      	b.n	800ca64 <IsFactoryReset+0xc0>
 800ca86:	46c0      	nop			; (mov r8, r8)
 800ca88:	40021000 	.word	0x40021000
 800ca8c:	20007ff0 	.word	0x20007ff0

0800ca90 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800ca90:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800ca92:	f002 fd2f 	bl	800f4f4 <HAL_IncTick>
  osSystickHandler();  
 800ca96:	f000 fe27 	bl	800d6e8 <osSystickHandler>

}
 800ca9a:	bd10      	pop	{r4, pc}

0800ca9c <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800ca9c:	e7fe      	b.n	800ca9c <HardFault_Handler>
 800ca9e:	46c0      	nop			; (mov r8, r8)

0800caa0 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800caa0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800caa2:	4802      	ldr	r0, [pc, #8]	; (800caac <USART1_IRQHandler+0xc>)
 800caa4:	f005 fdd8 	bl	8012658 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800caa8:	bd10      	pop	{r4, pc}
 800caaa:	46c0      	nop			; (mov r8, r8)
 800caac:	200070b8 	.word	0x200070b8

0800cab0 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800cab0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800cab2:	4802      	ldr	r0, [pc, #8]	; (800cabc <USART2_IRQHandler+0xc>)
 800cab4:	f005 fdd0 	bl	8012658 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cab8:	bd10      	pop	{r4, pc}
 800caba:	46c0      	nop			; (mov r8, r8)
 800cabc:	20007208 	.word	0x20007208

0800cac0 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800cac0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800cac2:	4806      	ldr	r0, [pc, #24]	; (800cadc <USART3_8_IRQHandler+0x1c>)
 800cac4:	f005 fdc8 	bl	8012658 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800cac8:	4805      	ldr	r0, [pc, #20]	; (800cae0 <USART3_8_IRQHandler+0x20>)
 800caca:	f005 fdc5 	bl	8012658 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800cace:	4805      	ldr	r0, [pc, #20]	; (800cae4 <USART3_8_IRQHandler+0x24>)
 800cad0:	f005 fdc2 	bl	8012658 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800cad4:	4804      	ldr	r0, [pc, #16]	; (800cae8 <USART3_8_IRQHandler+0x28>)
 800cad6:	f005 fdbf 	bl	8012658 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cada:	bd10      	pop	{r4, pc}
 800cadc:	20006fd8 	.word	0x20006fd8
 800cae0:	20007198 	.word	0x20007198
 800cae4:	20007048 	.word	0x20007048
 800cae8:	20007128 	.word	0x20007128

0800caec <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800caec:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800caee:	2001      	movs	r0, #1
 800caf0:	f7fa fdee 	bl	80076d0 <DMA_IRQHandler>
	
}
 800caf4:	bd10      	pop	{r4, pc}
 800caf6:	46c0      	nop			; (mov r8, r8)

0800caf8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800caf8:	4b0c      	ldr	r3, [pc, #48]	; (800cb2c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
{
 800cafa:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	2310      	movs	r3, #16
 800cb00:	4213      	tst	r3, r2
 800cb02:	d10e      	bne.n	800cb22 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800cb04:	4a0a      	ldr	r2, [pc, #40]	; (800cb30 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cb06:	6811      	ldr	r1, [r2, #0]
 800cb08:	05c9      	lsls	r1, r1, #23
 800cb0a:	d406      	bmi.n	800cb1a <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800cb0c:	6812      	ldr	r2, [r2, #0]
 800cb0e:	4213      	tst	r3, r2
 800cb10:	d002      	beq.n	800cb18 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800cb12:	4808      	ldr	r0, [pc, #32]	; (800cb34 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800cb14:	f003 fa16 	bl	800ff44 <HAL_DMA_IRQHandler>
	}
}
 800cb18:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800cb1a:	2002      	movs	r0, #2
 800cb1c:	f7fa fdd8 	bl	80076d0 <DMA_IRQHandler>
 800cb20:	e7fa      	b.n	800cb18 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		DMA_IRQHandler(P5);
 800cb22:	2005      	movs	r0, #5
 800cb24:	f7fa fdd4 	bl	80076d0 <DMA_IRQHandler>
 800cb28:	e7f6      	b.n	800cb18 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
 800cb2a:	46c0      	nop			; (mov r8, r8)
 800cb2c:	40020400 	.word	0x40020400
 800cb30:	40020000 	.word	0x40020000
 800cb34:	20001dc8 	.word	0x20001dc8

0800cb38 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cb38:	4b12      	ldr	r3, [pc, #72]	; (800cb84 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
{
 800cb3a:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	03d2      	lsls	r2, r2, #15
 800cb40:	d414      	bmi.n	800cb6c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x34>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	02d2      	lsls	r2, r2, #11
 800cb46:	d40d      	bmi.n	800cb64 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2c>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800cb48:	4a0f      	ldr	r2, [pc, #60]	; (800cb88 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800cb4a:	6812      	ldr	r2, [r2, #0]
 800cb4c:	05d2      	lsls	r2, r2, #23
 800cb4e:	d411      	bmi.n	800cb74 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3c>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	04d2      	lsls	r2, r2, #19
 800cb54:	d412      	bmi.n	800cb7c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	01db      	lsls	r3, r3, #7
 800cb5a:	d506      	bpl.n	800cb6a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800cb5c:	480b      	ldr	r0, [pc, #44]	; (800cb8c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cb5e:	f003 f9f1 	bl	800ff44 <HAL_DMA_IRQHandler>
	}
}
 800cb62:	e002      	b.n	800cb6a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);
 800cb64:	2004      	movs	r0, #4
 800cb66:	f7fa fdb3 	bl	80076d0 <DMA_IRQHandler>
}
 800cb6a:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P3);
 800cb6c:	2003      	movs	r0, #3
 800cb6e:	f7fa fdaf 	bl	80076d0 <DMA_IRQHandler>
 800cb72:	e7fa      	b.n	800cb6a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P6);
 800cb74:	2006      	movs	r0, #6
 800cb76:	f7fa fdab 	bl	80076d0 <DMA_IRQHandler>
 800cb7a:	e7f6      	b.n	800cb6a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800cb7c:	4804      	ldr	r0, [pc, #16]	; (800cb90 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800cb7e:	f003 f9e1 	bl	800ff44 <HAL_DMA_IRQHandler>
 800cb82:	e7f2      	b.n	800cb6a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
 800cb84:	40020000 	.word	0x40020000
 800cb88:	40020400 	.word	0x40020400
 800cb8c:	20001e38 	.word	0x20001e38
 800cb90:	20001e00 	.word	0x20001e00

0800cb94 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cb94:	2300      	movs	r3, #0
{
 800cb96:	b510      	push	{r4, lr}
 800cb98:	b082      	sub	sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cb9a:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800cb9c:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 800cb9e:	0004      	movs	r4, r0
	if(huart->hdmatx != NULL)
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d001      	beq.n	800cba8 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800cba4:	f7fe ff92 	bl	800bacc <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800cba8:	0020      	movs	r0, r4
 800cbaa:	f7fe fdb3 	bl	800b714 <GetPort>
 800cbae:	4b04      	ldr	r3, [pc, #16]	; (800cbc0 <HAL_UART_TxCpltCallback+0x2c>)
 800cbb0:	0080      	lsls	r0, r0, #2
 800cbb2:	58c0      	ldr	r0, [r0, r3]
 800cbb4:	a901      	add	r1, sp, #4
 800cbb6:	f001 f917 	bl	800dde8 <xQueueGiveFromISR>
}
 800cbba:	b002      	add	sp, #8
 800cbbc:	bd10      	pop	{r4, pc}
 800cbbe:	46c0      	nop			; (mov r8, r8)
 800cbc0:	20006f2c 	.word	0x20006f2c

0800cbc4 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cbc4:	b570      	push	{r4, r5, r6, lr}
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800cbc6:	2369      	movs	r3, #105	; 0x69
 800cbc8:	2501      	movs	r5, #1
 800cbca:	54c5      	strb	r5, [r0, r3]
{
 800cbcc:	0004      	movs	r4, r0
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800cbce:	f7fe fda1 	bl	800b714 <GetPort>
	if (portStatus[port] == STREAM) {
 800cbd2:	4b0b      	ldr	r3, [pc, #44]	; (800cc00 <HAL_UART_ErrorCallback+0x3c>)
 800cbd4:	5c1b      	ldrb	r3, [r3, r0]
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	d004      	beq.n	800cbe4 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800cbda:	4b0a      	ldr	r3, [pc, #40]	; (800cc04 <HAL_UART_ErrorCallback+0x40>)
 800cbdc:	1818      	adds	r0, r3, r0
 800cbde:	3801      	subs	r0, #1
 800cbe0:	7005      	strb	r5, [r0, #0]
	}	
}
 800cbe2:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800cbe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbe6:	3801      	subs	r0, #1
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	0080      	lsls	r0, r0, #2
 800cbec:	685a      	ldr	r2, [r3, #4]
 800cbee:	4b06      	ldr	r3, [pc, #24]	; (800cc08 <HAL_UART_ErrorCallback+0x44>)
 800cbf0:	b292      	uxth	r2, r2
 800cbf2:	58c3      	ldr	r3, [r0, r3]
 800cbf4:	0020      	movs	r0, r4
 800cbf6:	6819      	ldr	r1, [r3, #0]
 800cbf8:	3128      	adds	r1, #40	; 0x28
 800cbfa:	f005 f98d 	bl	8011f18 <HAL_UART_Receive_DMA>
 800cbfe:	e7f0      	b.n	800cbe2 <HAL_UART_ErrorCallback+0x1e>
 800cc00:	20000c2c 	.word	0x20000c2c
 800cc04:	20001344 	.word	0x20001344
 800cc08:	2000132c 	.word	0x2000132c

0800cc0c <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc0c:	b570      	push	{r4, r5, r6, lr}
 800cc0e:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800cc10:	f7fe fd80 	bl	800b714 <GetPort>
 800cc14:	4d12      	ldr	r5, [pc, #72]	; (800cc60 <HAL_UART_RxCpltCallback+0x54>)
 800cc16:	5c2b      	ldrb	r3, [r5, r0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d006      	beq.n	800cc2a <HAL_UART_RxCpltCallback+0x1e>
 800cc1c:	0020      	movs	r0, r4
 800cc1e:	f7fe fd79 	bl	800b714 <GetPort>
 800cc22:	5c2b      	ldrb	r3, [r5, r0]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d000      	beq.n	800cc2a <HAL_UART_RxCpltCallback+0x1e>
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
	}
}
 800cc28:	bd70      	pop	{r4, r5, r6, pc}
		BOSMessaging.overrun = GetPort(huart);
 800cc2a:	0020      	movs	r0, r4
 800cc2c:	f7fe fd72 	bl	800b714 <GetPort>
 800cc30:	4b0c      	ldr	r3, [pc, #48]	; (800cc64 <HAL_UART_RxCpltCallback+0x58>)
 800cc32:	7098      	strb	r0, [r3, #2]
		portStatus[GetPort(huart)] = OVERRUN;
 800cc34:	0020      	movs	r0, r4
 800cc36:	f7fe fd6d 	bl	800b714 <GetPort>
 800cc3a:	2305      	movs	r3, #5
 800cc3c:	542b      	strb	r3, [r5, r0]
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800cc3e:	0020      	movs	r0, r4
 800cc40:	f7fe fd68 	bl	800b714 <GetPort>
 800cc44:	4b08      	ldr	r3, [pc, #32]	; (800cc68 <HAL_UART_RxCpltCallback+0x5c>)
 800cc46:	1818      	adds	r0, r3, r0
 800cc48:	2300      	movs	r3, #0
 800cc4a:	3801      	subs	r0, #1
 800cc4c:	7003      	strb	r3, [r0, #0]
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800cc4e:	0020      	movs	r0, r4
 800cc50:	f7fe fd60 	bl	800b714 <GetPort>
 800cc54:	4b05      	ldr	r3, [pc, #20]	; (800cc6c <HAL_UART_RxCpltCallback+0x60>)
 800cc56:	1818      	adds	r0, r3, r0
 800cc58:	2301      	movs	r3, #1
 800cc5a:	3801      	subs	r0, #1
 800cc5c:	7003      	strb	r3, [r0, #0]
 800cc5e:	e7e3      	b.n	800cc28 <HAL_UART_RxCpltCallback+0x1c>
 800cc60:	20000c2c 	.word	0x20000c2c
 800cc64:	20006e28 	.word	0x20006e28
 800cc68:	2000134c 	.word	0x2000134c
 800cc6c:	20001344 	.word	0x20001344

0800cc70 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800cc70:	b672      	cpsid	i
 800cc72:	e7fe      	b.n	800cc72 <vApplicationStackOverflowHook+0x2>

0800cc74 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800cc74:	b672      	cpsid	i
 800cc76:	e7fe      	b.n	800cc76 <vApplicationMallocFailedHook+0x2>

0800cc78 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800cc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc7a:	46de      	mov	lr, fp
 800cc7c:	464e      	mov	r6, r9
 800cc7e:	4645      	mov	r5, r8
 800cc80:	4657      	mov	r7, sl
 800cc82:	b5e0      	push	{r5, r6, r7, lr}
 800cc84:	b08d      	sub	sp, #52	; 0x34
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cc86:	ae04      	add	r6, sp, #16
 800cc88:	0032      	movs	r2, r6
 800cc8a:	4b34      	ldr	r3, [pc, #208]	; (800cd5c <RTC_CalendarConfig+0xe4>)
 800cc8c:	cb13      	ldmia	r3!, {r0, r1, r4}
 800cc8e:	c213      	stmia	r2!, {r0, r1, r4}
 800cc90:	ab01      	add	r3, sp, #4
 800cc92:	4698      	mov	r8, r3
 800cc94:	4642      	mov	r2, r8
 800cc96:	4b32      	ldr	r3, [pc, #200]	; (800cd60 <RTC_CalendarConfig+0xe8>)
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
  *(comDate + 6) = 0;
 800cc98:	2400      	movs	r4, #0
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cc9a:	cb03      	ldmia	r3!, {r0, r1}
 800cc9c:	c203      	stmia	r2!, {r0, r1}
  year = atoi(comDate + 9);		// only last 2 digits
 800cc9e:	2019      	movs	r0, #25
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cca0:	781b      	ldrb	r3, [r3, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800cca2:	4468      	add	r0, sp
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cca4:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800cca6:	f005 fd66 	bl	8012776 <atoi>
 800ccaa:	b2c3      	uxtb	r3, r0
  day = atoi(comDate + 4);
 800ccac:	a805      	add	r0, sp, #20
  year = atoi(comDate + 9);		// only last 2 digits
 800ccae:	469a      	mov	sl, r3
  *(comDate + 6) = 0;
 800ccb0:	71b4      	strb	r4, [r6, #6]
  day = atoi(comDate + 4);
 800ccb2:	f005 fd60 	bl	8012776 <atoi>
 800ccb6:	b2c3      	uxtb	r3, r0
 800ccb8:	4699      	mov	r9, r3
 800ccba:	4d2a      	ldr	r5, [pc, #168]	; (800cd64 <RTC_CalendarConfig+0xec>)
  *(comDate + 3) = 0;
 800ccbc:	70f4      	strb	r4, [r6, #3]
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800ccbe:	6829      	ldr	r1, [r5, #0]
 800ccc0:	0030      	movs	r0, r6
 800ccc2:	f7f3 fa1f 	bl	8000104 <strcmp>
 800ccc6:	3401      	adds	r4, #1
 800ccc8:	b2e4      	uxtb	r4, r4
 800ccca:	2800      	cmp	r0, #0
 800cccc:	d100      	bne.n	800ccd0 <RTC_CalendarConfig+0x58>
 800ccce:	0027      	movs	r7, r4
 800ccd0:	3504      	adds	r5, #4
  for (uint8_t i = 0; i < 12; i++)
 800ccd2:	2c0c      	cmp	r4, #12
 800ccd4:	d1f3      	bne.n	800ccbe <RTC_CalendarConfig+0x46>
			month = i + 1;
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800ccd6:	200a      	movs	r0, #10
 800ccd8:	4468      	add	r0, sp
 800ccda:	f005 fd4c 	bl	8012776 <atoi>
	*(comDate + 5) = 0;
 800ccde:	2300      	movs	r3, #0
 800cce0:	7173      	strb	r3, [r6, #5]
 800cce2:	469b      	mov	fp, r3
	minutes = atoi(comTime + 3);
 800cce4:	466b      	mov	r3, sp
	seconds = atoi(comTime + 6);
 800cce6:	0004      	movs	r4, r0
	minutes = atoi(comTime + 3);
 800cce8:	1dd8      	adds	r0, r3, #7
 800ccea:	f005 fd44 	bl	8012776 <atoi>
	*(comDate + 2) = 0;
 800ccee:	465b      	mov	r3, fp
	minutes = atoi(comTime + 3);
 800ccf0:	0005      	movs	r5, r0
	hours = atoi(comTime);
 800ccf2:	4640      	mov	r0, r8
	*(comDate + 2) = 0;
 800ccf4:	70b3      	strb	r3, [r6, #2]
	hours = atoi(comTime);
 800ccf6:	f005 fd3e 	bl	8012776 <atoi>
	
  /* Set Date */
  sdatestructure.Year = year;
 800ccfa:	466b      	mov	r3, sp
 800ccfc:	4652      	mov	r2, sl
 800ccfe:	70da      	strb	r2, [r3, #3]
  sdatestructure.Month = month;
  sdatestructure.Date = day;
 800cd00:	464a      	mov	r2, r9
  sdatestructure.Month = month;
 800cd02:	705f      	strb	r7, [r3, #1]
  sdatestructure.Date = day;
 800cd04:	709a      	strb	r2, [r3, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800cd06:	466a      	mov	r2, sp
 800cd08:	2301      	movs	r3, #1
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cd0a:	4f17      	ldr	r7, [pc, #92]	; (800cd68 <RTC_CalendarConfig+0xf0>)
	hours = atoi(comTime);
 800cd0c:	0006      	movs	r6, r0
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800cd0e:	7013      	strb	r3, [r2, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cd10:	4669      	mov	r1, sp
 800cd12:	2200      	movs	r2, #0
 800cd14:	0038      	movs	r0, r7
 800cd16:	f004 fee5 	bl	8011ae4 <HAL_RTC_SetDate>
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	d116      	bne.n	800cd4c <RTC_CalendarConfig+0xd4>

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
  stimestructure.Seconds = seconds;
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800cd1e:	2218      	movs	r2, #24
 800cd20:	4b12      	ldr	r3, [pc, #72]	; (800cd6c <RTC_CalendarConfig+0xf4>)
  stimestructure.Hours = hours;
 800cd22:	a907      	add	r1, sp, #28
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800cd24:	7208      	strb	r0, [r1, #8]
 800cd26:	735a      	strb	r2, [r3, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cd28:	60c8      	str	r0, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800cd2a:	6108      	str	r0, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	0038      	movs	r0, r7
  stimestructure.Hours = hours;
 800cd30:	700e      	strb	r6, [r1, #0]
  stimestructure.Minutes = minutes;
 800cd32:	704d      	strb	r5, [r1, #1]
  stimestructure.Seconds = seconds;
 800cd34:	708c      	strb	r4, [r1, #2]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cd36:	f004 fe41 	bl	80119bc <HAL_RTC_SetTime>
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d106      	bne.n	800cd4c <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800cd3e:	0038      	movs	r0, r7
 800cd40:	4a0b      	ldr	r2, [pc, #44]	; (800cd70 <RTC_CalendarConfig+0xf8>)
 800cd42:	2101      	movs	r1, #1
 800cd44:	f004 ff4a 	bl	8011bdc <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800cd48:	2000      	movs	r0, #0
 800cd4a:	e000      	b.n	800cd4e <RTC_CalendarConfig+0xd6>
		return BOS_ERROR;
 800cd4c:	20ff      	movs	r0, #255	; 0xff
}
 800cd4e:	b00d      	add	sp, #52	; 0x34
 800cd50:	bc3c      	pop	{r2, r3, r4, r5}
 800cd52:	4690      	mov	r8, r2
 800cd54:	4699      	mov	r9, r3
 800cd56:	46a2      	mov	sl, r4
 800cd58:	46ab      	mov	fp, r5
 800cd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd5c:	08017d4c 	.word	0x08017d4c
 800cd60:	08017d70 	.word	0x08017d70
 800cd64:	20000054 	.word	0x20000054
 800cd68:	2000729c 	.word	0x2000729c
 800cd6c:	20006ea8 	.word	0x20006ea8
 800cd70:	000032f2 	.word	0x000032f2

0800cd74 <RTC_Init>:
  __HAL_RCC_RTC_ENABLE();
 800cd74:	2380      	movs	r3, #128	; 0x80
{
 800cd76:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_RTC_ENABLE();
 800cd78:	4d1e      	ldr	r5, [pc, #120]	; (800cdf4 <RTC_Init+0x80>)
 800cd7a:	021b      	lsls	r3, r3, #8
 800cd7c:	6a2a      	ldr	r2, [r5, #32]
	RtcHandle.Instance = RTC; 
 800cd7e:	4c1e      	ldr	r4, [pc, #120]	; (800cdf8 <RTC_Init+0x84>)
  __HAL_RCC_RTC_ENABLE();
 800cd80:	4313      	orrs	r3, r2
 800cd82:	622b      	str	r3, [r5, #32]
  RtcHandle.Init.AsynchPrediv = 124;
 800cd84:	227c      	movs	r2, #124	; 0x7c
	RtcHandle.Instance = RTC; 
 800cd86:	4b1d      	ldr	r3, [pc, #116]	; (800cdfc <RTC_Init+0x88>)
  RtcHandle.Init.AsynchPrediv = 124;
 800cd88:	60a2      	str	r2, [r4, #8]
	RtcHandle.Instance = RTC; 
 800cd8a:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800cd8c:	2300      	movs	r3, #0
  RtcHandle.Init.SynchPrediv = 1999;
 800cd8e:	4a1c      	ldr	r2, [pc, #112]	; (800ce00 <RTC_Init+0x8c>)
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800cd90:	0020      	movs	r0, r4
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800cd92:	6063      	str	r3, [r4, #4]
  RtcHandle.Init.SynchPrediv = 1999;
 800cd94:	60e2      	str	r2, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800cd96:	6123      	str	r3, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800cd98:	6163      	str	r3, [r4, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800cd9a:	61a3      	str	r3, [r4, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800cd9c:	f004 fdc6 	bl	801192c <HAL_RTC_Init>
 800cda0:	0006      	movs	r6, r0
 800cda2:	20ff      	movs	r0, #255	; 0xff
 800cda4:	2e00      	cmp	r6, #0
 800cda6:	d119      	bne.n	800cddc <RTC_Init+0x68>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800cda8:	2101      	movs	r1, #1
 800cdaa:	0020      	movs	r0, r4
 800cdac:	f004 ff1c 	bl	8011be8 <HAL_RTCEx_BKUPRead>
 800cdb0:	4b14      	ldr	r3, [pc, #80]	; (800ce04 <RTC_Init+0x90>)
 800cdb2:	4298      	cmp	r0, r3
 800cdb4:	d113      	bne.n	800cdde <RTC_Init+0x6a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800cdb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cdb8:	011b      	lsls	r3, r3, #4
 800cdba:	d501      	bpl.n	800cdc0 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800cdbc:	4b12      	ldr	r3, [pc, #72]	; (800ce08 <RTC_Init+0x94>)
 800cdbe:	701e      	strb	r6, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800cdc0:	4b0c      	ldr	r3, [pc, #48]	; (800cdf4 <RTC_Init+0x80>)
 800cdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc4:	015b      	lsls	r3, r3, #5
 800cdc6:	d50c      	bpl.n	800cde2 <RTC_Init+0x6e>
			bootStatus = RESET_BOOT;
 800cdc8:	2201      	movs	r2, #1
 800cdca:	4b0f      	ldr	r3, [pc, #60]	; (800ce08 <RTC_Init+0x94>)
	return BOS_OK;
 800cdcc:	2000      	movs	r0, #0
			bootStatus = RESET_BOOT;
 800cdce:	701a      	strb	r2, [r3, #0]
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800cdd0:	2380      	movs	r3, #128	; 0x80
 800cdd2:	4a08      	ldr	r2, [pc, #32]	; (800cdf4 <RTC_Init+0x80>)
 800cdd4:	045b      	lsls	r3, r3, #17
 800cdd6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800cdd8:	430b      	orrs	r3, r1
 800cdda:	6253      	str	r3, [r2, #36]	; 0x24
}
 800cddc:	bd70      	pop	{r4, r5, r6, pc}
    RTC_CalendarConfig();
 800cdde:	f7ff ff4b 	bl	800cc78 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800cde2:	2380      	movs	r3, #128	; 0x80
 800cde4:	4a03      	ldr	r2, [pc, #12]	; (800cdf4 <RTC_Init+0x80>)
 800cde6:	045b      	lsls	r3, r3, #17
 800cde8:	6a51      	ldr	r1, [r2, #36]	; 0x24
	return BOS_OK;
 800cdea:	2000      	movs	r0, #0
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800cdec:	430b      	orrs	r3, r1
 800cdee:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800cdf0:	e7f4      	b.n	800cddc <RTC_Init+0x68>
 800cdf2:	46c0      	nop			; (mov r8, r8)
 800cdf4:	40021000 	.word	0x40021000
 800cdf8:	2000729c 	.word	0x2000729c
 800cdfc:	40002800 	.word	0x40002800
 800ce00:	000007cf 	.word	0x000007cf
 800ce04:	000032f2 	.word	0x000032f2
 800ce08:	20001fc0 	.word	0x20001fc0

0800ce0c <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800ce0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce0e:	46c6      	mov	lr, r8
 800ce10:	b500      	push	{lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	ac0c      	add	r4, sp, #48	; 0x30
 800ce16:	7827      	ldrb	r7, [r4, #0]
 800ce18:	ac0d      	add	r4, sp, #52	; 0x34
 800ce1a:	7824      	ldrb	r4, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800ce1c:	3230      	adds	r2, #48	; 0x30
{
 800ce1e:	46a0      	mov	r8, r4
 800ce20:	ac0e      	add	r4, sp, #56	; 0x38
 800ce22:	7825      	ldrb	r5, [r4, #0]
 800ce24:	ac0f      	add	r4, sp, #60	; 0x3c
 800ce26:	7826      	ldrb	r6, [r4, #0]
  sdatestructure.Year = year-2000;
 800ce28:	466c      	mov	r4, sp
 800ce2a:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800ce2c:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800ce2e:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800ce30:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800ce32:	4c20      	ldr	r4, [pc, #128]	; (800ceb4 <BOS_CalendarConfig+0xa8>)
 800ce34:	2200      	movs	r2, #0
 800ce36:	4669      	mov	r1, sp
 800ce38:	0020      	movs	r0, r4
 800ce3a:	f004 fe53 	bl	8011ae4 <HAL_RTC_SetDate>
 800ce3e:	2800      	cmp	r0, #0
 800ce40:	d123      	bne.n	800ce8a <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
 800ce42:	4643      	mov	r3, r8
  stimestructure.Hours = hours;
 800ce44:	a901      	add	r1, sp, #4
 800ce46:	700d      	strb	r5, [r1, #0]
  stimestructure.Minutes = minutes;
 800ce48:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds; 
 800ce4a:	708f      	strb	r7, [r1, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800ce4c:	6108      	str	r0, [r1, #16]
//	else if (daylightsaving == DAYLIGHT_ADD1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
 800ce4e:	2d0c      	cmp	r5, #12
 800ce50:	d820      	bhi.n	800ce94 <BOS_CalendarConfig+0x88>
 800ce52:	4d19      	ldr	r5, [pc, #100]	; (800ceb8 <BOS_CalendarConfig+0xac>)
	
	if (AMPM == RTC_AM) {
 800ce54:	2e01      	cmp	r6, #1
 800ce56:	d022      	beq.n	800ce9e <BOS_CalendarConfig+0x92>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800ce58:	2e02      	cmp	r6, #2
 800ce5a:	d025      	beq.n	800cea8 <BOS_CalendarConfig+0x9c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800ce5c:	2318      	movs	r3, #24
 800ce5e:	736b      	strb	r3, [r5, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800ce60:	2200      	movs	r2, #0
 800ce62:	0020      	movs	r0, r4
 800ce64:	f004 fdaa 	bl	80119bc <HAL_RTC_SetTime>
 800ce68:	2800      	cmp	r0, #0
 800ce6a:	d10e      	bne.n	800ce8a <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800ce6c:	7b6b      	ldrb	r3, [r5, #13]
 800ce6e:	7929      	ldrb	r1, [r5, #4]
 800ce70:	021b      	lsls	r3, r3, #8
 800ce72:	301b      	adds	r0, #27
 800ce74:	4319      	orrs	r1, r3
 800ce76:	30ff      	adds	r0, #255	; 0xff
 800ce78:	f7fa fd14 	bl	80078a4 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800ce7c:	0020      	movs	r0, r4
 800ce7e:	4a0f      	ldr	r2, [pc, #60]	; (800cebc <BOS_CalendarConfig+0xb0>)
 800ce80:	2101      	movs	r1, #1
 800ce82:	f004 feab 	bl	8011bdc <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800ce86:	2000      	movs	r0, #0
 800ce88:	e000      	b.n	800ce8c <BOS_CalendarConfig+0x80>
		return BOS_ERROR;
 800ce8a:	20ff      	movs	r0, #255	; 0xff
}
 800ce8c:	b006      	add	sp, #24
 800ce8e:	bc04      	pop	{r2}
 800ce90:	4690      	mov	r8, r2
 800ce92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hours > 12)	BOS.hourformat = 24;
 800ce94:	2318      	movs	r3, #24
 800ce96:	4d08      	ldr	r5, [pc, #32]	; (800ceb8 <BOS_CalendarConfig+0xac>)
 800ce98:	736b      	strb	r3, [r5, #13]
	if (AMPM == RTC_AM) {
 800ce9a:	2e01      	cmp	r6, #1
 800ce9c:	d1dc      	bne.n	800ce58 <BOS_CalendarConfig+0x4c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800cea2:	330c      	adds	r3, #12
 800cea4:	736b      	strb	r3, [r5, #13]
 800cea6:	e7db      	b.n	800ce60 <BOS_CalendarConfig+0x54>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800cea8:	2340      	movs	r3, #64	; 0x40
 800ceaa:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800ceac:	3b34      	subs	r3, #52	; 0x34
 800ceae:	736b      	strb	r3, [r5, #13]
 800ceb0:	e7d6      	b.n	800ce60 <BOS_CalendarConfig+0x54>
 800ceb2:	46c0      	nop			; (mov r8, r8)
 800ceb4:	2000729c 	.word	0x2000729c
 800ceb8:	20006ea8 	.word	0x20006ea8
 800cebc:	000032f2 	.word	0x000032f2

0800cec0 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800cec0:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800cec2:	4d16      	ldr	r5, [pc, #88]	; (800cf1c <GetTimeDate+0x5c>)
{
 800cec4:	b087      	sub	sp, #28
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800cec6:	ac01      	add	r4, sp, #4
 800cec8:	0021      	movs	r1, r4
 800ceca:	2200      	movs	r2, #0
 800cecc:	0028      	movs	r0, r5
 800cece:	f004 fc95 	bl	80117fc <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800ced2:	4669      	mov	r1, sp
 800ced4:	2200      	movs	r2, #0
 800ced6:	0028      	movs	r0, r5
 800ced8:	f004 fcc0 	bl	801185c <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800cedc:	7a22      	ldrb	r2, [r4, #8]
 800cede:	4b10      	ldr	r3, [pc, #64]	; (800cf20 <GetTimeDate+0x60>)
 800cee0:	09d2      	lsrs	r2, r2, #7
 800cee2:	3201      	adds	r2, #1
 800cee4:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800cee6:	6862      	ldr	r2, [r4, #4]
	BOS.time.minutes = stimestructureget.Minutes;
	BOS.time.hours = stimestructureget.Hours;
	BOS.date.day = sdatestructureget.Date;
	BOS.date.month = sdatestructureget.Month;
	BOS.date.weekday = sdatestructureget.WeekDay;
	BOS.date.year = sdatestructureget.Year + 2000;
 800cee8:	21fa      	movs	r1, #250	; 0xfa
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800ceea:	0852      	lsrs	r2, r2, #1
 800ceec:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800ceee:	78a2      	ldrb	r2, [r4, #2]
	BOS.date.year = sdatestructureget.Year + 2000;
 800cef0:	00c9      	lsls	r1, r1, #3
	BOS.time.seconds = stimestructureget.Seconds;
 800cef2:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800cef4:	7862      	ldrb	r2, [r4, #1]
	BOS.date.year = sdatestructureget.Year + 2000;
 800cef6:	468c      	mov	ip, r1
	BOS.time.minutes = stimestructureget.Minutes;
 800cef8:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800cefa:	7822      	ldrb	r2, [r4, #0]
 800cefc:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800cefe:	466a      	mov	r2, sp
 800cf00:	7892      	ldrb	r2, [r2, #2]
 800cf02:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800cf04:	466a      	mov	r2, sp
 800cf06:	7852      	ldrb	r2, [r2, #1]
 800cf08:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800cf0a:	466a      	mov	r2, sp
 800cf0c:	7812      	ldrb	r2, [r2, #0]
 800cf0e:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800cf10:	466a      	mov	r2, sp
 800cf12:	78d2      	ldrb	r2, [r2, #3]
 800cf14:	4462      	add	r2, ip
 800cf16:	831a      	strh	r2, [r3, #24]
}
 800cf18:	b007      	add	sp, #28
 800cf1a:	bd30      	pop	{r4, r5, pc}
 800cf1c:	2000729c 	.word	0x2000729c
 800cf20:	20006ea8 	.word	0x20006ea8

0800cf24 <TIM_USEC_Init>:
void TIM_USEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800cf24:	2080      	movs	r0, #128	; 0x80
 800cf26:	4a13      	ldr	r2, [pc, #76]	; (800cf74 <TIM_USEC_Init+0x50>)
{
 800cf28:	b530      	push	{r4, r5, lr}
	__TIM14_CLK_ENABLE();
 800cf2a:	69d1      	ldr	r1, [r2, #28]
 800cf2c:	0040      	lsls	r0, r0, #1
 800cf2e:	4301      	orrs	r1, r0
 800cf30:	61d1      	str	r1, [r2, #28]
 800cf32:	69d3      	ldr	r3, [r2, #28]
{
 800cf34:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 800cf36:	4003      	ands	r3, r0
 800cf38:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800cf3a:	4c0f      	ldr	r4, [pc, #60]	; (800cf78 <TIM_USEC_Init+0x54>)
	__TIM14_CLK_ENABLE();
 800cf3c:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 800cf3e:	4b0f      	ldr	r3, [pc, #60]	; (800cf7c <TIM_USEC_Init+0x58>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf40:	2500      	movs	r5, #0
  htim14.Instance = TIM14;
 800cf42:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800cf44:	f004 fbaa 	bl	801169c <HAL_RCC_GetPCLK1Freq>
 800cf48:	490d      	ldr	r1, [pc, #52]	; (800cf80 <TIM_USEC_Init+0x5c>)
 800cf4a:	f7f3 f901 	bl	8000150 <__udivsi3>
  htim14.Init.Period = 0xFFFF;
 800cf4e:	4b0d      	ldr	r3, [pc, #52]	; (800cf84 <TIM_USEC_Init+0x60>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800cf50:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim14);
 800cf52:	0020      	movs	r0, r4
  htim14.Init.Period = 0xFFFF;
 800cf54:	60e3      	str	r3, [r4, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf56:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim14);
 800cf58:	f004 feae 	bl	8011cb8 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800cf5c:	a902      	add	r1, sp, #8
 800cf5e:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cf60:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cf62:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800cf64:	f004 fec2 	bl	8011cec <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800cf68:	0020      	movs	r0, r4
 800cf6a:	f004 fe45 	bl	8011bf8 <HAL_TIM_Base_Start>
}
 800cf6e:	b005      	add	sp, #20
 800cf70:	bd30      	pop	{r4, r5, pc}
 800cf72:	46c0      	nop			; (mov r8, r8)
 800cf74:	40021000 	.word	0x40021000
 800cf78:	200072f8 	.word	0x200072f8
 800cf7c:	40002000 	.word	0x40002000
 800cf80:	000f4240 	.word	0x000f4240
 800cf84:	0000ffff 	.word	0x0000ffff

0800cf88 <TIM_MSEC_Init>:
void TIM_MSEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800cf88:	2080      	movs	r0, #128	; 0x80
 800cf8a:	4a13      	ldr	r2, [pc, #76]	; (800cfd8 <TIM_MSEC_Init+0x50>)
{
 800cf8c:	b530      	push	{r4, r5, lr}
	__TIM15_CLK_ENABLE();
 800cf8e:	6991      	ldr	r1, [r2, #24]
 800cf90:	0240      	lsls	r0, r0, #9
 800cf92:	4301      	orrs	r1, r0
 800cf94:	6191      	str	r1, [r2, #24]
 800cf96:	6993      	ldr	r3, [r2, #24]
{
 800cf98:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 800cf9a:	4003      	ands	r3, r0
 800cf9c:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800cf9e:	4c0f      	ldr	r4, [pc, #60]	; (800cfdc <TIM_MSEC_Init+0x54>)
	__TIM15_CLK_ENABLE();
 800cfa0:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 800cfa2:	4b0f      	ldr	r3, [pc, #60]	; (800cfe0 <TIM_MSEC_Init+0x58>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cfa4:	2500      	movs	r5, #0
  htim15.Instance = TIM15;
 800cfa6:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800cfa8:	f004 fb78 	bl	801169c <HAL_RCC_GetPCLK1Freq>
 800cfac:	21fa      	movs	r1, #250	; 0xfa
 800cfae:	0089      	lsls	r1, r1, #2
 800cfb0:	f7f3 f8ce 	bl	8000150 <__udivsi3>
  htim15.Init.Period = 0xFFFF;
 800cfb4:	4b0b      	ldr	r3, [pc, #44]	; (800cfe4 <TIM_MSEC_Init+0x5c>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800cfb6:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim15);
 800cfb8:	0020      	movs	r0, r4
  htim15.Init.Period = 0xFFFF;
 800cfba:	60e3      	str	r3, [r4, #12]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cfbc:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim15);
 800cfbe:	f004 fe7b 	bl	8011cb8 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800cfc2:	a902      	add	r1, sp, #8
 800cfc4:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cfc6:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cfc8:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800cfca:	f004 fe8f 	bl	8011cec <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800cfce:	0020      	movs	r0, r4
 800cfd0:	f004 fe12 	bl	8011bf8 <HAL_TIM_Base_Start>
}
 800cfd4:	b005      	add	sp, #20
 800cfd6:	bd30      	pop	{r4, r5, pc}
 800cfd8:	40021000 	.word	0x40021000
 800cfdc:	200072bc 	.word	0x200072bc
 800cfe0:	40014000 	.word	0x40014000
 800cfe4:	0000ffff 	.word	0x0000ffff

0800cfe8 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800cfe8:	b510      	push	{r4, lr}
 800cfea:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800cfec:	f002 f944 	bl	800f278 <vPortEnterCritical>
	
	if (Delay)
 800cff0:	2c00      	cmp	r4, #0
 800cff2:	d006      	beq.n	800d002 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800cff4:	4b04      	ldr	r3, [pc, #16]	; (800d008 <StartMicroDelay+0x20>)
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800cffa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800cffc:	1a5b      	subs	r3, r3, r1
 800cffe:	42a3      	cmp	r3, r4
 800d000:	d9fb      	bls.n	800cffa <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d002:	f002 f945 	bl	800f290 <vPortExitCritical>
}
 800d006:	bd10      	pop	{r4, pc}
 800d008:	200072f8 	.word	0x200072f8

0800d00c <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800d00c:	b510      	push	{r4, lr}
 800d00e:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800d010:	f002 f932 	bl	800f278 <vPortEnterCritical>
	
	if (Delay)
 800d014:	2c00      	cmp	r4, #0
 800d016:	d006      	beq.n	800d026 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800d018:	4b04      	ldr	r3, [pc, #16]	; (800d02c <StartMilliDelay+0x20>)
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800d01e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d020:	1a5b      	subs	r3, r3, r1
 800d022:	42a3      	cmp	r3, r4
 800d024:	d9fb      	bls.n	800d01e <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d026:	f002 f933 	bl	800f290 <vPortExitCritical>
}
 800d02a:	bd10      	pop	{r4, pc}
 800d02c:	200072bc 	.word	0x200072bc

0800d030 <MX_USART1_UART_Init>:

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
 800d030:	4809      	ldr	r0, [pc, #36]	; (800d058 <MX_USART1_UART_Init+0x28>)
 800d032:	4b0a      	ldr	r3, [pc, #40]	; (800d05c <MX_USART1_UART_Init+0x2c>)
{
 800d034:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800d036:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d038:	23e1      	movs	r3, #225	; 0xe1
 800d03a:	031b      	lsls	r3, r3, #12
 800d03c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d03e:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d040:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d042:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d044:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d046:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d048:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d04a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d04c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d04e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d050:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800d052:	f005 fa3b 	bl	80124cc <HAL_UART_Init>
	#if _P4pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800d056:	bd10      	pop	{r4, pc}
 800d058:	200070b8 	.word	0x200070b8
 800d05c:	40013800 	.word	0x40013800

0800d060 <MX_USART2_UART_Init>:

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
 800d060:	4809      	ldr	r0, [pc, #36]	; (800d088 <MX_USART2_UART_Init+0x28>)
 800d062:	4b0a      	ldr	r3, [pc, #40]	; (800d08c <MX_USART2_UART_Init+0x2c>)
{
 800d064:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d066:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d068:	23e1      	movs	r3, #225	; 0xe1
 800d06a:	031b      	lsls	r3, r3, #12
 800d06c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d06e:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d070:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d072:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d074:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d076:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d078:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d07a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d07c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d07e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d080:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d082:	f005 fa23 	bl	80124cc <HAL_UART_Init>
	#if _P1pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800d086:	bd10      	pop	{r4, pc}
 800d088:	20007208 	.word	0x20007208
 800d08c:	40004400 	.word	0x40004400

0800d090 <MX_USART3_UART_Init>:

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
  huart3.Instance = USART3;
 800d090:	4809      	ldr	r0, [pc, #36]	; (800d0b8 <MX_USART3_UART_Init+0x28>)
 800d092:	4b0a      	ldr	r3, [pc, #40]	; (800d0bc <MX_USART3_UART_Init+0x2c>)
{
 800d094:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d096:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d098:	23e1      	movs	r3, #225	; 0xe1
 800d09a:	031b      	lsls	r3, r3, #12
 800d09c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d09e:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d0a0:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d0a2:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d0a4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d0a6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d0a8:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0aa:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0ac:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d0ae:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d0b0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d0b2:	f005 fa0b 	bl	80124cc <HAL_UART_Init>
	#if _P3pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800d0b6:	bd10      	pop	{r4, pc}
 800d0b8:	20006fd8 	.word	0x20006fd8
 800d0bc:	40004800 	.word	0x40004800

0800d0c0 <MX_USART4_UART_Init>:

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
  huart4.Instance = USART4;
 800d0c0:	4809      	ldr	r0, [pc, #36]	; (800d0e8 <MX_USART4_UART_Init+0x28>)
 800d0c2:	4b0a      	ldr	r3, [pc, #40]	; (800d0ec <MX_USART4_UART_Init+0x2c>)
{
 800d0c4:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800d0c6:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d0c8:	23e1      	movs	r3, #225	; 0xe1
 800d0ca:	031b      	lsls	r3, r3, #12
 800d0cc:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d0ce:	220c      	movs	r2, #12
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d0d0:	2300      	movs	r3, #0
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d0d2:	6142      	str	r2, [r0, #20]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d0d4:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d0d6:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d0d8:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0da:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0dc:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d0de:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d0e0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800d0e2:	f005 f9f3 	bl	80124cc <HAL_UART_Init>
	#if _P6pol_reversed	
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800d0e6:	bd10      	pop	{r4, pc}
 800d0e8:	20007198 	.word	0x20007198
 800d0ec:	40004c00 	.word	0x40004c00

0800d0f0 <MX_USART5_UART_Init>:

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
  huart5.Instance = USART5;
 800d0f0:	4809      	ldr	r0, [pc, #36]	; (800d118 <MX_USART5_UART_Init+0x28>)
 800d0f2:	4b0a      	ldr	r3, [pc, #40]	; (800d11c <MX_USART5_UART_Init+0x2c>)
{
 800d0f4:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800d0f6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d0f8:	23e1      	movs	r3, #225	; 0xe1
 800d0fa:	031b      	lsls	r3, r3, #12
 800d0fc:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d0fe:	220c      	movs	r2, #12
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d100:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d102:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d104:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d106:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d108:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d10a:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d10c:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d10e:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d110:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800d112:	f005 f9db 	bl	80124cc <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800d116:	bd10      	pop	{r4, pc}
 800d118:	20007048 	.word	0x20007048
 800d11c:	40005000 	.word	0x40005000

0800d120 <MX_USART6_UART_Init>:

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
  huart6.Instance = USART6;
 800d120:	4809      	ldr	r0, [pc, #36]	; (800d148 <MX_USART6_UART_Init+0x28>)
 800d122:	4b0a      	ldr	r3, [pc, #40]	; (800d14c <MX_USART6_UART_Init+0x2c>)
{
 800d124:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d126:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d128:	23e1      	movs	r3, #225	; 0xe1
 800d12a:	031b      	lsls	r3, r3, #12
 800d12c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d12e:	220c      	movs	r2, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d130:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d132:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d134:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d136:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d138:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d13a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d13c:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d13e:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d140:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d142:	f005 f9c3 	bl	80124cc <HAL_UART_Init>
	#if _P2pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800d146:	bd10      	pop	{r4, pc}
 800d148:	20007128 	.word	0x20007128
 800d14c:	40011400 	.word	0x40011400

0800d150 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d150:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d152:	46c6      	mov	lr, r8
 800d154:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800d156:	6803      	ldr	r3, [r0, #0]
 800d158:	4a7d      	ldr	r2, [pc, #500]	; (800d350 <HAL_UART_MspInit+0x200>)
{
 800d15a:	b08c      	sub	sp, #48	; 0x30
  if(huart->Instance==USART1)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d040      	beq.n	800d1e2 <HAL_UART_MspInit+0x92>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800d160:	4a7c      	ldr	r2, [pc, #496]	; (800d354 <HAL_UART_MspInit+0x204>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d06b      	beq.n	800d23e <HAL_UART_MspInit+0xee>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800d166:	4a7c      	ldr	r2, [pc, #496]	; (800d358 <HAL_UART_MspInit+0x208>)
 800d168:	4293      	cmp	r3, r2
 800d16a:	d100      	bne.n	800d16e <HAL_UART_MspInit+0x1e>
 800d16c:	e093      	b.n	800d296 <HAL_UART_MspInit+0x146>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800d16e:	4a7b      	ldr	r2, [pc, #492]	; (800d35c <HAL_UART_MspInit+0x20c>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d100      	bne.n	800d176 <HAL_UART_MspInit+0x26>
 800d174:	e0ab      	b.n	800d2ce <HAL_UART_MspInit+0x17e>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800d176:	4a7a      	ldr	r2, [pc, #488]	; (800d360 <HAL_UART_MspInit+0x210>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d007      	beq.n	800d18c <HAL_UART_MspInit+0x3c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800d17c:	4a79      	ldr	r2, [pc, #484]	; (800d364 <HAL_UART_MspInit+0x214>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d100      	bne.n	800d184 <HAL_UART_MspInit+0x34>
 800d182:	e0c5      	b.n	800d310 <HAL_UART_MspInit+0x1c0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800d184:	b00c      	add	sp, #48	; 0x30
 800d186:	bc04      	pop	{r2}
 800d188:	4690      	mov	r8, r2
 800d18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART5_CLK_ENABLE();
 800d18c:	2080      	movs	r0, #128	; 0x80
 800d18e:	4a76      	ldr	r2, [pc, #472]	; (800d368 <HAL_UART_MspInit+0x218>)
 800d190:	0340      	lsls	r0, r0, #13
 800d192:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d194:	2702      	movs	r7, #2
    __USART5_CLK_ENABLE();
 800d196:	4301      	orrs	r1, r0
 800d198:	61d1      	str	r1, [r2, #28]
 800d19a:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d19c:	2601      	movs	r6, #1
    __USART5_CLK_ENABLE();
 800d19e:	4003      	ands	r3, r0
 800d1a0:	9305      	str	r3, [sp, #20]
 800d1a2:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1a4:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d1a6:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d1a8:	2404      	movs	r4, #4
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d1aa:	a907      	add	r1, sp, #28
 800d1ac:	486f      	ldr	r0, [pc, #444]	; (800d36c <HAL_UART_MspInit+0x21c>)
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d1ae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1b0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1b2:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1b4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d1b6:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d1b8:	f003 fca6 	bl	8010b08 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d1bc:	2310      	movs	r3, #16
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d1be:	486b      	ldr	r0, [pc, #428]	; (800d36c <HAL_UART_MspInit+0x21c>)
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d1c0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1c2:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1c4:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1c6:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800d1c8:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d1ca:	a907      	add	r1, sp, #28
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d1cc:	f003 fc9c 	bl	8010b08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	2101      	movs	r1, #1
 800d1d4:	201d      	movs	r0, #29
 800d1d6:	f002 fcad 	bl	800fb34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d1da:	201d      	movs	r0, #29
 800d1dc:	f002 fcd6 	bl	800fb8c <HAL_NVIC_EnableIRQ>
}
 800d1e0:	e7d0      	b.n	800d184 <HAL_UART_MspInit+0x34>
    __USART1_CLK_ENABLE();
 800d1e2:	2080      	movs	r0, #128	; 0x80
 800d1e4:	4a60      	ldr	r2, [pc, #384]	; (800d368 <HAL_UART_MspInit+0x218>)
 800d1e6:	01c0      	lsls	r0, r0, #7
 800d1e8:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1ea:	2401      	movs	r4, #1
    __USART1_CLK_ENABLE();
 800d1ec:	4301      	orrs	r1, r0
 800d1ee:	6191      	str	r1, [r2, #24]
 800d1f0:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1f2:	2602      	movs	r6, #2
    __USART1_CLK_ENABLE();
 800d1f4:	4003      	ands	r3, r0
 800d1f6:	9301      	str	r3, [sp, #4]
 800d1f8:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d1fa:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d1fc:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1fe:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d200:	009b      	lsls	r3, r3, #2
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d202:	a907      	add	r1, sp, #28
 800d204:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d206:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d208:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d20a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d20c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800d20e:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d210:	f003 fc7a 	bl	8010b08 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d214:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d216:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d218:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d21a:	a907      	add	r1, sp, #28
 800d21c:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d21e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d220:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d222:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d224:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800d226:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d228:	f003 fc6e 	bl	8010b08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800d22c:	2200      	movs	r2, #0
 800d22e:	2101      	movs	r1, #1
 800d230:	201b      	movs	r0, #27
 800d232:	f002 fc7f 	bl	800fb34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d236:	201b      	movs	r0, #27
 800d238:	f002 fca8 	bl	800fb8c <HAL_NVIC_EnableIRQ>
 800d23c:	e7a2      	b.n	800d184 <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800d23e:	2080      	movs	r0, #128	; 0x80
 800d240:	4a49      	ldr	r2, [pc, #292]	; (800d368 <HAL_UART_MspInit+0x218>)
 800d242:	0280      	lsls	r0, r0, #10
 800d244:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d246:	2401      	movs	r4, #1
    __USART2_CLK_ENABLE();
 800d248:	4301      	orrs	r1, r0
 800d24a:	61d1      	str	r1, [r2, #28]
 800d24c:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d24e:	2602      	movs	r6, #2
    __USART2_CLK_ENABLE();
 800d250:	4003      	ands	r3, r0
 800d252:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d254:	2090      	movs	r0, #144	; 0x90
    __USART2_CLK_ENABLE();
 800d256:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d258:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d25a:	2304      	movs	r3, #4
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d25c:	a907      	add	r1, sp, #28
 800d25e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d260:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d262:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d264:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d266:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800d268:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d26a:	f003 fc4d 	bl	8010b08 <HAL_GPIO_Init>
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d26e:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d270:	2308      	movs	r3, #8
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d272:	a907      	add	r1, sp, #28
 800d274:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d276:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d278:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d27a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d27c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800d27e:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d280:	f003 fc42 	bl	8010b08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d284:	2200      	movs	r2, #0
 800d286:	2101      	movs	r1, #1
 800d288:	201c      	movs	r0, #28
 800d28a:	f002 fc53 	bl	800fb34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d28e:	201c      	movs	r0, #28
 800d290:	f002 fc7c 	bl	800fb8c <HAL_NVIC_EnableIRQ>
 800d294:	e776      	b.n	800d184 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800d296:	2080      	movs	r0, #128	; 0x80
 800d298:	4a33      	ldr	r2, [pc, #204]	; (800d368 <HAL_UART_MspInit+0x218>)
 800d29a:	02c0      	lsls	r0, r0, #11
 800d29c:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d29e:	2702      	movs	r7, #2
    __USART3_CLK_ENABLE();
 800d2a0:	4301      	orrs	r1, r0
 800d2a2:	61d1      	str	r1, [r2, #28]
 800d2a4:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2a6:	2601      	movs	r6, #1
    __USART3_CLK_ENABLE();
 800d2a8:	4003      	ands	r3, r0
 800d2aa:	9303      	str	r3, [sp, #12]
 800d2ac:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d2ae:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2b0:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d2b2:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d2b4:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d2b6:	a907      	add	r1, sp, #28
 800d2b8:	482c      	ldr	r0, [pc, #176]	; (800d36c <HAL_UART_MspInit+0x21c>)
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d2ba:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2bc:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2be:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2c0:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d2c2:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d2c4:	f003 fc20 	bl	8010b08 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800d2c8:	2380      	movs	r3, #128	; 0x80
 800d2ca:	011b      	lsls	r3, r3, #4
 800d2cc:	e777      	b.n	800d1be <HAL_UART_MspInit+0x6e>
    __USART4_CLK_ENABLE();
 800d2ce:	2080      	movs	r0, #128	; 0x80
 800d2d0:	4a25      	ldr	r2, [pc, #148]	; (800d368 <HAL_UART_MspInit+0x218>)
 800d2d2:	0300      	lsls	r0, r0, #12
 800d2d4:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800d2d6:	2401      	movs	r4, #1
    __USART4_CLK_ENABLE();
 800d2d8:	4301      	orrs	r1, r0
 800d2da:	61d1      	str	r1, [r2, #28]
 800d2dc:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2de:	2502      	movs	r5, #2
    __USART4_CLK_ENABLE();
 800d2e0:	4003      	ands	r3, r0
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800d2e2:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2e4:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = USART4_AF;	
 800d2e6:	2604      	movs	r6, #4
    __USART4_CLK_ENABLE();
 800d2e8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800d2ea:	a907      	add	r1, sp, #28
 800d2ec:	05c0      	lsls	r0, r0, #23
    __USART4_CLK_ENABLE();
 800d2ee:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800d2f0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2f2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2f4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2f6:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800d2f8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800d2fa:	f003 fc05 	bl	8010b08 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800d2fe:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d300:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d302:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d304:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800d306:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d308:	2090      	movs	r0, #144	; 0x90
 800d30a:	a907      	add	r1, sp, #28
 800d30c:	05c0      	lsls	r0, r0, #23
 800d30e:	e75d      	b.n	800d1cc <HAL_UART_MspInit+0x7c>
    __USART6_CLK_ENABLE();
 800d310:	2420      	movs	r4, #32
 800d312:	4b15      	ldr	r3, [pc, #84]	; (800d368 <HAL_UART_MspInit+0x218>)
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d314:	2090      	movs	r0, #144	; 0x90
    __USART6_CLK_ENABLE();
 800d316:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d318:	2701      	movs	r7, #1
    __USART6_CLK_ENABLE();
 800d31a:	4322      	orrs	r2, r4
 800d31c:	619a      	str	r2, [r3, #24]
 800d31e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d320:	2603      	movs	r6, #3
    __USART6_CLK_ENABLE();
 800d322:	4023      	ands	r3, r4
 800d324:	9306      	str	r3, [sp, #24]
 800d326:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800d328:	2310      	movs	r3, #16
 800d32a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d32c:	3b0e      	subs	r3, #14
 800d32e:	4698      	mov	r8, r3
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d330:	2505      	movs	r5, #5
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d332:	a907      	add	r1, sp, #28
 800d334:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d336:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d338:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d33a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d33c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d33e:	f003 fbe3 	bl	8010b08 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d342:	4643      	mov	r3, r8
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800d344:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d346:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d348:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d34a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800d34c:	950b      	str	r5, [sp, #44]	; 0x2c
 800d34e:	e7db      	b.n	800d308 <HAL_UART_MspInit+0x1b8>
 800d350:	40013800 	.word	0x40013800
 800d354:	40004400 	.word	0x40004400
 800d358:	40004800 	.word	0x40004800
 800d35c:	40004c00 	.word	0x40004c00
 800d360:	40005000 	.word	0x40005000
 800d364:	40011400 	.word	0x40011400
 800d368:	40021000 	.word	0x40021000
 800d36c:	48000400 	.word	0x48000400

0800d370 <writePxMutex>:
}

/* --- Blocking (polling-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout, uint32_t portTimeout)
{
 800d370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d372:	4647      	mov	r7, r8
 800d374:	46ce      	mov	lr, r9
 800d376:	b580      	push	{r7, lr}
 800d378:	0017      	movs	r7, r2
 800d37a:	1e42      	subs	r2, r0, #1
 800d37c:	b2d2      	uxtb	r2, r2
 800d37e:	000e      	movs	r6, r1
 800d380:	2a05      	cmp	r2, #5
 800d382:	d80e      	bhi.n	800d3a2 <writePxMutex+0x32>
 800d384:	4911      	ldr	r1, [pc, #68]	; (800d3cc <writePxMutex+0x5c>)
 800d386:	0092      	lsls	r2, r2, #2
 800d388:	5852      	ldr	r2, [r2, r1]
 800d38a:	4690      	mov	r8, r2
	HAL_StatusTypeDef result = HAL_ERROR;
	
	if (GetUart(port) != NULL) {
 800d38c:	2a00      	cmp	r2, #0
 800d38e:	d008      	beq.n	800d3a2 <writePxMutex+0x32>
		/*/ Wait for the semaphore to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d390:	4a0f      	ldr	r2, [pc, #60]	; (800d3d0 <writePxMutex+0x60>)
 800d392:	0085      	lsls	r5, r0, #2
 800d394:	0019      	movs	r1, r3
 800d396:	5950      	ldr	r0, [r2, r5]
 800d398:	4691      	mov	r9, r2
 800d39a:	f000 f977 	bl	800d68c <osSemaphoreWait>
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	d007      	beq.n	800d3b2 <writePxMutex+0x42>
	HAL_StatusTypeDef result = HAL_ERROR;
 800d3a2:	2401      	movs	r4, #1
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
		}
	}
	
	return result;
}
 800d3a4:	0020      	movs	r0, r4
 800d3a6:	bc0c      	pop	{r2, r3}
 800d3a8:	4690      	mov	r8, r2
 800d3aa:	4699      	mov	r9, r3
 800d3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d3ae:	2803      	cmp	r0, #3
 800d3b0:	d007      	beq.n	800d3c2 <writePxMutex+0x52>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800d3b2:	9b08      	ldr	r3, [sp, #32]
 800d3b4:	003a      	movs	r2, r7
 800d3b6:	0031      	movs	r1, r6
 800d3b8:	4640      	mov	r0, r8
 800d3ba:	f004 ffe5 	bl	8012388 <HAL_UART_Transmit>
 800d3be:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d3c0:	d1f5      	bne.n	800d3ae <writePxMutex+0x3e>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800d3c2:	464b      	mov	r3, r9
 800d3c4:	5958      	ldr	r0, [r3, r5]
 800d3c6:	f000 f98b 	bl	800d6e0 <osSemaphoreRelease>
 800d3ca:	e7eb      	b.n	800d3a4 <writePxMutex+0x34>
 800d3cc:	08017b24 	.word	0x08017b24
 800d3d0:	20006f2c 	.word	0x20006f2c

0800d3d4 <writePxITMutex>:
}

/* --- Non-blocking (interrupt-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxITMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800d3d4:	b570      	push	{r4, r5, r6, lr}
 800d3d6:	0015      	movs	r5, r2
 800d3d8:	1e42      	subs	r2, r0, #1
 800d3da:	b2d2      	uxtb	r2, r2
 800d3dc:	000c      	movs	r4, r1
 800d3de:	2a05      	cmp	r2, #5
 800d3e0:	d80c      	bhi.n	800d3fc <writePxITMutex+0x28>
 800d3e2:	490a      	ldr	r1, [pc, #40]	; (800d40c <writePxITMutex+0x38>)
 800d3e4:	0092      	lsls	r2, r2, #2
 800d3e6:	5856      	ldr	r6, [r2, r1]
	HAL_StatusTypeDef result = HAL_ERROR; 

	if (GetUart(port) != NULL) {	
 800d3e8:	2e00      	cmp	r6, #0
 800d3ea:	d007      	beq.n	800d3fc <writePxITMutex+0x28>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d3ec:	4a08      	ldr	r2, [pc, #32]	; (800d410 <writePxITMutex+0x3c>)
 800d3ee:	0080      	lsls	r0, r0, #2
 800d3f0:	5880      	ldr	r0, [r0, r2]
 800d3f2:	0019      	movs	r1, r3
 800d3f4:	f000 f94a 	bl	800d68c <osSemaphoreWait>
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	d001      	beq.n	800d400 <writePxITMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d3fc:	2001      	movs	r0, #1
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800d3fe:	bd70      	pop	{r4, r5, r6, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800d400:	002a      	movs	r2, r5
 800d402:	0021      	movs	r1, r4
 800d404:	0030      	movs	r0, r6
 800d406:	f004 fcaf 	bl	8011d68 <HAL_UART_Transmit_IT>
 800d40a:	e7f8      	b.n	800d3fe <writePxITMutex+0x2a>
 800d40c:	08017b24 	.word	0x08017b24
 800d410:	20006f2c 	.word	0x20006f2c

0800d414 <writePxDMAMutex>:

/* --- Non-blocking (DMA-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxDMAMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800d414:	b570      	push	{r4, r5, r6, lr}
 800d416:	0015      	movs	r5, r2
 800d418:	1e42      	subs	r2, r0, #1
 800d41a:	b2d2      	uxtb	r2, r2
 800d41c:	000c      	movs	r4, r1
 800d41e:	2a05      	cmp	r2, #5
 800d420:	d80c      	bhi.n	800d43c <writePxDMAMutex+0x28>
 800d422:	490c      	ldr	r1, [pc, #48]	; (800d454 <writePxDMAMutex+0x40>)
 800d424:	0092      	lsls	r2, r2, #2
 800d426:	5856      	ldr	r6, [r2, r1]
	HAL_StatusTypeDef result = HAL_ERROR; 
	UART_HandleTypeDef* hUart = GetUart(port);

	if (hUart != NULL) {	
 800d428:	2e00      	cmp	r6, #0
 800d42a:	d007      	beq.n	800d43c <writePxDMAMutex+0x28>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d42c:	4a0a      	ldr	r2, [pc, #40]	; (800d458 <writePxDMAMutex+0x44>)
 800d42e:	0080      	lsls	r0, r0, #2
 800d430:	5880      	ldr	r0, [r0, r2]
 800d432:	0019      	movs	r1, r3
 800d434:	f000 f92a 	bl	800d68c <osSemaphoreWait>
 800d438:	2800      	cmp	r0, #0
 800d43a:	d001      	beq.n	800d440 <writePxDMAMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d43c:	2001      	movs	r0, #1
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800d43e:	bd70      	pop	{r4, r5, r6, pc}
			DMA_MSG_TX_Setup(hUart);
 800d440:	0030      	movs	r0, r6
 800d442:	f7ff f9a3 	bl	800c78c <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800d446:	002a      	movs	r2, r5
 800d448:	0021      	movs	r1, r4
 800d44a:	0030      	movs	r0, r6
 800d44c:	f004 fd1e 	bl	8011e8c <HAL_UART_Transmit_DMA>
 800d450:	e7f5      	b.n	800d43e <writePxDMAMutex+0x2a>
 800d452:	46c0      	nop			; (mov r8, r8)
 800d454:	08017b24 	.word	0x08017b24
 800d458:	20006f2c 	.word	0x20006f2c

0800d45c <UpdateBaudrate>:

/* --- Update baudrate for this port --- 
*/
BOS_Status UpdateBaudrate(uint8_t port, uint32_t baudrate)
{
 800d45c:	3801      	subs	r0, #1
 800d45e:	b2c0      	uxtb	r0, r0
 800d460:	b510      	push	{r4, lr}
 800d462:	2805      	cmp	r0, #5
 800d464:	d807      	bhi.n	800d476 <UpdateBaudrate+0x1a>
 800d466:	4b05      	ldr	r3, [pc, #20]	; (800d47c <UpdateBaudrate+0x20>)
 800d468:	0080      	lsls	r0, r0, #2
 800d46a:	58c0      	ldr	r0, [r0, r3]
	BOS_Status result = BOS_OK; 
	UART_HandleTypeDef *huart = GetUart(port);

	huart->Init.BaudRate = baudrate;
 800d46c:	6041      	str	r1, [r0, #4]
	HAL_UART_Init(huart);
 800d46e:	f005 f82d 	bl	80124cc <HAL_UART_Init>
	
	return result;
}
 800d472:	2000      	movs	r0, #0
 800d474:	bd10      	pop	{r4, pc}
	huart->Init.BaudRate = baudrate;
 800d476:	2300      	movs	r3, #0
 800d478:	605b      	str	r3, [r3, #4]
 800d47a:	deff      	udf	#255	; 0xff
 800d47c:	08017b24 	.word	0x08017b24

0800d480 <GetUart>:


/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
 800d480:	3801      	subs	r0, #1
 800d482:	b2c3      	uxtb	r3, r0
 800d484:	2000      	movs	r0, #0
 800d486:	2b05      	cmp	r3, #5
 800d488:	d802      	bhi.n	800d490 <GetUart+0x10>
 800d48a:	4a02      	ldr	r2, [pc, #8]	; (800d494 <GetUart+0x14>)
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	5898      	ldr	r0, [r3, r2]
			return P10uart;
	#endif
		default:
			return 0;
	}		
}
 800d490:	4770      	bx	lr
 800d492:	46c0      	nop			; (mov r8, r8)
 800d494:	08017b24 	.word	0x08017b24

0800d498 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800d498:	b570      	push	{r4, r5, r6, lr}
 800d49a:	0004      	movs	r4, r0
 800d49c:	000d      	movs	r5, r1
	if (huart != NULL) {
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d003      	beq.n	800d4aa <SwapUartPins+0x12>
		if (direction == REVERSED) {
 800d4a2:	2901      	cmp	r1, #1
 800d4a4:	d017      	beq.n	800d4d6 <SwapUartPins+0x3e>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800d4a6:	2900      	cmp	r1, #0
 800d4a8:	d000      	beq.n	800d4ac <SwapUartPins+0x14>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800d4aa:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d4ac:	f7fe f932 	bl	800b714 <GetPort>
 800d4b0:	2180      	movs	r1, #128	; 0x80
 800d4b2:	3801      	subs	r0, #1
 800d4b4:	0209      	lsls	r1, r1, #8
 800d4b6:	4101      	asrs	r1, r0
 800d4b8:	4b12      	ldr	r3, [pc, #72]	; (800d504 <SwapUartPins+0x6c>)
 800d4ba:	4e13      	ldr	r6, [pc, #76]	; (800d508 <SwapUartPins+0x70>)
 800d4bc:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800d4be:	6365      	str	r5, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	005b      	lsls	r3, r3, #1
 800d4c4:	5b9a      	ldrh	r2, [r3, r6]
			HAL_UART_Init(huart);		
 800d4c6:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d4c8:	438a      	bics	r2, r1
 800d4ca:	539a      	strh	r2, [r3, r6]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d4cc:	2308      	movs	r3, #8
 800d4ce:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);		
 800d4d0:	f004 fffc 	bl	80124cc <HAL_UART_Init>
}
 800d4d4:	e7e9      	b.n	800d4aa <SwapUartPins+0x12>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d4d6:	f7fe f91d 	bl	800b714 <GetPort>
 800d4da:	2180      	movs	r1, #128	; 0x80
 800d4dc:	0209      	lsls	r1, r1, #8
 800d4de:	000a      	movs	r2, r1
 800d4e0:	3801      	subs	r0, #1
 800d4e2:	4102      	asrs	r2, r0
 800d4e4:	4b07      	ldr	r3, [pc, #28]	; (800d504 <SwapUartPins+0x6c>)
 800d4e6:	4d08      	ldr	r5, [pc, #32]	; (800d508 <SwapUartPins+0x70>)
 800d4e8:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d4ea:	6361      	str	r1, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d4ec:	3b01      	subs	r3, #1
 800d4ee:	005b      	lsls	r3, r3, #1
 800d4f0:	5b58      	ldrh	r0, [r3, r5]
 800d4f2:	4302      	orrs	r2, r0
 800d4f4:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d4f6:	2308      	movs	r3, #8
			HAL_UART_Init(huart);
 800d4f8:	0020      	movs	r0, r4
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d4fa:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);
 800d4fc:	f004 ffe6 	bl	80124cc <HAL_UART_Init>
 800d500:	e7d3      	b.n	800d4aa <SwapUartPins+0x12>
 800d502:	46c0      	nop			; (mov r8, r8)
 800d504:	20000a98 	.word	0x20000a98
 800d508:	20007334 	.word	0x20007334

0800d50c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d50c:	4816      	ldr	r0, [pc, #88]	; (800d568 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d50e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d510:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d512:	e003      	b.n	800d51c <LoopCopyDataInit>

0800d514 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d514:	4b15      	ldr	r3, [pc, #84]	; (800d56c <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800d516:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d518:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d51a:	3104      	adds	r1, #4

0800d51c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d51c:	4814      	ldr	r0, [pc, #80]	; (800d570 <LoopForever+0xc>)
  ldr r3, =_edata
 800d51e:	4b15      	ldr	r3, [pc, #84]	; (800d574 <LoopForever+0x10>)
  adds r2, r0, r1
 800d520:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d522:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d524:	d3f6      	bcc.n	800d514 <CopyDataInit>
  ldr r2, =_sbss
 800d526:	4a14      	ldr	r2, [pc, #80]	; (800d578 <LoopForever+0x14>)
  b LoopFillZerobss
 800d528:	e002      	b.n	800d530 <LoopFillZerobss>

0800d52a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d52a:	2300      	movs	r3, #0
  str  r3, [r2]
 800d52c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d52e:	3204      	adds	r2, #4

0800d530 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d530:	4b12      	ldr	r3, [pc, #72]	; (800d57c <LoopForever+0x18>)
  cmp r2, r3
 800d532:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d534:	d3f9      	bcc.n	800d52a <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d536:	4812      	ldr	r0, [pc, #72]	; (800d580 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800d538:	4912      	ldr	r1, [pc, #72]	; (800d584 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800d53a:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800d53c:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800d53e:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800d540:	d005      	beq.n	800d54e <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d542:	f000 f82b 	bl	800d59c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d546:	f005 f959 	bl	80127fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d54a:	f005 f909 	bl	8012760 <main>

0800d54e <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d54e:	480e      	ldr	r0, [pc, #56]	; (800d588 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d550:	490e      	ldr	r1, [pc, #56]	; (800d58c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d552:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d554:	480e      	ldr	r0, [pc, #56]	; (800d590 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800d556:	490d      	ldr	r1, [pc, #52]	; (800d58c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d558:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d55a:	480e      	ldr	r0, [pc, #56]	; (800d594 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800d55c:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800d55e:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800d560:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800d562:	4700      	bx	r0

0800d564 <LoopForever>:


LoopForever:
    b LoopForever
 800d564:	e7fe      	b.n	800d564 <LoopForever>
 800d566:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d568:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800d56c:	0801a678 	.word	0x0801a678
  ldr r0, =_sdata
 800d570:	20000008 	.word	0x20000008
  ldr r3, =_edata
 800d574:	20000a78 	.word	0x20000a78
  ldr r2, =_sbss
 800d578:	20000a78 	.word	0x20000a78
  ldr r3, = _ebss
 800d57c:	200073d8 	.word	0x200073d8
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d580:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800d584:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d588:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d58c:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d590:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d594:	1fffd800 	.word	0x1fffd800

0800d598 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d598:	e7fe      	b.n	800d598 <ADC1_COMP_IRQHandler>
	...

0800d59c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d59c:	2101      	movs	r1, #1
 800d59e:	4b11      	ldr	r3, [pc, #68]	; (800d5e4 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d5a0:	4811      	ldr	r0, [pc, #68]	; (800d5e8 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	430a      	orrs	r2, r1
 800d5a6:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d5a8:	685a      	ldr	r2, [r3, #4]
 800d5aa:	4002      	ands	r2, r0
 800d5ac:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	480e      	ldr	r0, [pc, #56]	; (800d5ec <SystemInit+0x50>)
 800d5b2:	4002      	ands	r2, r0
 800d5b4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	480d      	ldr	r0, [pc, #52]	; (800d5f0 <SystemInit+0x54>)
 800d5ba:	4002      	ands	r2, r0
 800d5bc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d5be:	685a      	ldr	r2, [r3, #4]
 800d5c0:	480c      	ldr	r0, [pc, #48]	; (800d5f4 <SystemInit+0x58>)
 800d5c2:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d5c4:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d5c6:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ca:	4382      	bics	r2, r0
 800d5cc:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800d5ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d5d0:	4809      	ldr	r0, [pc, #36]	; (800d5f8 <SystemInit+0x5c>)
 800d5d2:	4002      	ands	r2, r0
 800d5d4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800d5d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5d8:	438a      	bics	r2, r1
 800d5da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d5dc:	2200      	movs	r2, #0
 800d5de:	609a      	str	r2, [r3, #8]

}
 800d5e0:	4770      	bx	lr
 800d5e2:	46c0      	nop			; (mov r8, r8)
 800d5e4:	40021000 	.word	0x40021000
 800d5e8:	08ffb80c 	.word	0x08ffb80c
 800d5ec:	fef6ffff 	.word	0xfef6ffff
 800d5f0:	fffbffff 	.word	0xfffbffff
 800d5f4:	ffc0ffff 	.word	0xffc0ffff
 800d5f8:	fff0feac 	.word	0xfff0feac

0800d5fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d5fc:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800d5fe:	f000 ff81 	bl	800e504 <vTaskStartScheduler>
  
  return osOK;
}
 800d602:	2000      	movs	r0, #0
 800d604:	bd10      	pop	{r4, pc}
 800d606:	46c0      	nop			; (mov r8, r8)

0800d608 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d608:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d60a:	2800      	cmp	r0, #0
 800d60c:	d100      	bne.n	800d610 <osDelay+0x8>
 800d60e:	3001      	adds	r0, #1
 800d610:	f001 f89e 	bl	800e750 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d614:	2000      	movs	r0, #0
 800d616:	bd10      	pop	{r4, pc}

0800d618 <osMutexRelease>:
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d618:	2300      	movs	r3, #0
{
 800d61a:	b500      	push	{lr}
 800d61c:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;
 800d61e:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d620:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00a      	beq.n	800d63e <osMutexRelease+0x26>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d628:	a901      	add	r1, sp, #4
 800d62a:	f000 fbdd 	bl	800dde8 <xQueueGiveFromISR>
 800d62e:	2801      	cmp	r0, #1
 800d630:	d10c      	bne.n	800d64c <osMutexRelease+0x34>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d632:	9b01      	ldr	r3, [sp, #4]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d10b      	bne.n	800d650 <osMutexRelease+0x38>
  osStatus result = osOK;
 800d638:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800d63a:	b003      	add	sp, #12
 800d63c:	bd00      	pop	{pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d63e:	2300      	movs	r3, #0
 800d640:	2200      	movs	r2, #0
 800d642:	2100      	movs	r1, #0
 800d644:	f000 faec 	bl	800dc20 <xQueueGenericSend>
 800d648:	2801      	cmp	r0, #1
 800d64a:	d0f5      	beq.n	800d638 <osMutexRelease+0x20>
    result = osErrorOS;
 800d64c:	20ff      	movs	r0, #255	; 0xff
 800d64e:	e7f4      	b.n	800d63a <osMutexRelease+0x22>
    portEND_SWITCHING_ISR(taskWoken);
 800d650:	2280      	movs	r2, #128	; 0x80
 800d652:	4b02      	ldr	r3, [pc, #8]	; (800d65c <osMutexRelease+0x44>)
 800d654:	0552      	lsls	r2, r2, #21
 800d656:	601a      	str	r2, [r3, #0]
 800d658:	e7ee      	b.n	800d638 <osMutexRelease+0x20>
 800d65a:	46c0      	nop			; (mov r8, r8)
 800d65c:	e000ed04 	.word	0xe000ed04

0800d660 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800d660:	b510      	push	{r4, lr}
 800d662:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800d664:	2901      	cmp	r1, #1
 800d666:	d005      	beq.n	800d674 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800d668:	2100      	movs	r1, #0
 800d66a:	f000 fac5 	bl	800dbf8 <xQueueCreateCountingSemaphore>
 800d66e:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800d670:	0020      	movs	r0, r4
 800d672:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800d674:	2203      	movs	r2, #3
 800d676:	2100      	movs	r1, #0
 800d678:	f000 fa96 	bl	800dba8 <xQueueGenericCreate>
 800d67c:	1e04      	subs	r4, r0, #0
 800d67e:	d0f7      	beq.n	800d670 <osSemaphoreCreate+0x10>
 800d680:	2300      	movs	r3, #0
 800d682:	2200      	movs	r2, #0
 800d684:	2100      	movs	r1, #0
 800d686:	f000 facb 	bl	800dc20 <xQueueGenericSend>
 800d68a:	e7f1      	b.n	800d670 <osSemaphoreCreate+0x10>

0800d68c <osSemaphoreWait>:
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d68c:	2300      	movs	r3, #0
{
 800d68e:	b500      	push	{lr}
 800d690:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;  
 800d692:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800d694:	2800      	cmp	r0, #0
 800d696:	d01e      	beq.n	800d6d6 <osSemaphoreWait+0x4a>
 800d698:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d00b      	beq.n	800d6b8 <osSemaphoreWait+0x2c>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d6a0:	aa01      	add	r2, sp, #4
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	f000 fc8e 	bl	800dfc4 <xQueueReceiveFromISR>
 800d6a8:	2801      	cmp	r0, #1
 800d6aa:	d10c      	bne.n	800d6c6 <osSemaphoreWait+0x3a>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d6ac:	9b01      	ldr	r3, [sp, #4]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d10b      	bne.n	800d6ca <osSemaphoreWait+0x3e>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800d6b2:	2000      	movs	r0, #0
}
 800d6b4:	b003      	add	sp, #12
 800d6b6:	bd00      	pop	{pc}
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d6b8:	000a      	movs	r2, r1
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	2100      	movs	r1, #0
 800d6be:	f000 fbcd 	bl	800de5c <xQueueGenericReceive>
 800d6c2:	2801      	cmp	r0, #1
 800d6c4:	d0f5      	beq.n	800d6b2 <osSemaphoreWait+0x26>
      return osErrorOS;
 800d6c6:	20ff      	movs	r0, #255	; 0xff
 800d6c8:	e7f4      	b.n	800d6b4 <osSemaphoreWait+0x28>
	portEND_SWITCHING_ISR(taskWoken);
 800d6ca:	2280      	movs	r2, #128	; 0x80
 800d6cc:	4b03      	ldr	r3, [pc, #12]	; (800d6dc <osSemaphoreWait+0x50>)
 800d6ce:	0552      	lsls	r2, r2, #21
 800d6d0:	601a      	str	r2, [r3, #0]
  return osOK;
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	e7ee      	b.n	800d6b4 <osSemaphoreWait+0x28>
    return osErrorParameter;
 800d6d6:	2080      	movs	r0, #128	; 0x80
 800d6d8:	e7ec      	b.n	800d6b4 <osSemaphoreWait+0x28>
 800d6da:	46c0      	nop			; (mov r8, r8)
 800d6dc:	e000ed04 	.word	0xe000ed04

0800d6e0 <osSemaphoreRelease>:
 800d6e0:	b510      	push	{r4, lr}
 800d6e2:	f7ff ff99 	bl	800d618 <osMutexRelease>
 800d6e6:	bd10      	pop	{r4, pc}

0800d6e8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800d6e8:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d6ea:	f001 f9bf 	bl	800ea6c <xTaskGetSchedulerState>
 800d6ee:	2801      	cmp	r0, #1
 800d6f0:	d001      	beq.n	800d6f6 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800d6f2:	f001 fe07 	bl	800f304 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800d6f6:	bd10      	pop	{r4, pc}

0800d6f8 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800d6f8:	b570      	push	{r4, r5, r6, lr}
 800d6fa:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800d6fc:	d013      	beq.n	800d726 <FreeRTOS_CLIRegisterCommand+0x2e>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d6fe:	2008      	movs	r0, #8
 800d700:	f001 fe38 	bl	800f374 <pvPortMalloc>
 800d704:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800d706:	d101      	bne.n	800d70c <FreeRTOS_CLIRegisterCommand+0x14>
 800d708:	b672      	cpsid	i
 800d70a:	e7fe      	b.n	800d70a <FreeRTOS_CLIRegisterCommand+0x12>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800d70c:	f001 fdb4 	bl	800f278 <vPortEnterCritical>
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800d710:	2300      	movs	r3, #0
 800d712:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800d714:	4b05      	ldr	r3, [pc, #20]	; (800d72c <FreeRTOS_CLIRegisterCommand+0x34>)
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800d716:	6025      	str	r5, [r4, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800d71c:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800d71e:	f001 fdb7 	bl	800f290 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800d722:	2001      	movs	r0, #1
 800d724:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxCommandToRegister );
 800d726:	b672      	cpsid	i
 800d728:	e7fe      	b.n	800d728 <FreeRTOS_CLIRegisterCommand+0x30>
 800d72a:	46c0      	nop			; (mov r8, r8)
 800d72c:	200000b4 	.word	0x200000b4

0800d730 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800d730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d732:	4657      	mov	r7, sl
 800d734:	46de      	mov	lr, fp
 800d736:	464e      	mov	r6, r9
 800d738:	4645      	mov	r5, r8
 800d73a:	b5e0      	push	{r5, r6, r7, lr}
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800d73c:	4f34      	ldr	r7, [pc, #208]	; (800d810 <FreeRTOS_CLIProcessCommand+0xe0>)
{
 800d73e:	0006      	movs	r6, r0
	if( pxCommand == NULL )
 800d740:	683b      	ldr	r3, [r7, #0]
{
 800d742:	468a      	mov	sl, r1
 800d744:	4693      	mov	fp, r2
	if( pxCommand == NULL )
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00e      	beq.n	800d768 <FreeRTOS_CLIProcessCommand+0x38>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	0032      	movs	r2, r6
 800d74e:	689b      	ldr	r3, [r3, #8]
 800d750:	4659      	mov	r1, fp
 800d752:	4650      	mov	r0, sl
 800d754:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800d756:	2800      	cmp	r0, #0
 800d758:	d100      	bne.n	800d75c <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800d75a:	6038      	str	r0, [r7, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800d75c:	bc3c      	pop	{r2, r3, r4, r5}
 800d75e:	4690      	mov	r8, r2
 800d760:	4699      	mov	r9, r3
 800d762:	46a2      	mov	sl, r4
 800d764:	46ab      	mov	fp, r5
 800d766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d768:	3320      	adds	r3, #32
 800d76a:	4699      	mov	r9, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d76c:	4c29      	ldr	r4, [pc, #164]	; (800d814 <FreeRTOS_CLIProcessCommand+0xe4>)
 800d76e:	3404      	adds	r4, #4
 800d770:	603c      	str	r4, [r7, #0]
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800d772:	6823      	ldr	r3, [r4, #0]
 800d774:	681d      	ldr	r5, [r3, #0]
 800d776:	4698      	mov	r8, r3
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800d778:	0028      	movs	r0, r5
 800d77a:	f7f2 fccd 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d77e:	464a      	mov	r2, r9
 800d780:	5c33      	ldrb	r3, [r6, r0]
 800d782:	4393      	bics	r3, r2
 800d784:	d106      	bne.n	800d794 <FreeRTOS_CLIProcessCommand+0x64>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800d786:	0002      	movs	r2, r0
 800d788:	0029      	movs	r1, r5
 800d78a:	0030      	movs	r0, r6
 800d78c:	f005 fd00 	bl	8013190 <strncmp>
 800d790:	2800      	cmp	r0, #0
 800d792:	d00a      	beq.n	800d7aa <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d794:	6864      	ldr	r4, [r4, #4]
 800d796:	603c      	str	r4, [r7, #0]
 800d798:	2c00      	cmp	r4, #0
 800d79a:	d1ea      	bne.n	800d772 <FreeRTOS_CLIProcessCommand+0x42>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d79c:	465a      	mov	r2, fp
 800d79e:	491e      	ldr	r1, [pc, #120]	; (800d818 <FreeRTOS_CLIProcessCommand+0xe8>)
 800d7a0:	4650      	mov	r0, sl
 800d7a2:	f005 fd06 	bl	80131b2 <strncpy>
		xReturn = pdFALSE;
 800d7a6:	2000      	movs	r0, #0
	return xReturn;
 800d7a8:	e7d8      	b.n	800d75c <FreeRTOS_CLIProcessCommand+0x2c>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800d7aa:	4643      	mov	r3, r8
 800d7ac:	250c      	movs	r5, #12
 800d7ae:	575d      	ldrsb	r5, [r3, r5]
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	2d00      	cmp	r5, #0
 800d7b4:	db26      	blt.n	800d804 <FreeRTOS_CLIProcessCommand+0xd4>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	56b2      	ldrsb	r2, [r6, r2]
 800d7ba:	2a00      	cmp	r2, #0
 800d7bc:	d025      	beq.n	800d80a <FreeRTOS_CLIProcessCommand+0xda>
 800d7be:	0031      	movs	r1, r6
int8_t cParameters = 0;
 800d7c0:	2400      	movs	r4, #0
 800d7c2:	e005      	b.n	800d7d0 <FreeRTOS_CLIProcessCommand+0xa0>
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800d7c4:	2000      	movs	r0, #0
	while( *pcCommandString != 0x00 )
 800d7c6:	2200      	movs	r2, #0
		}

		pcCommandString++;
 800d7c8:	3101      	adds	r1, #1
	while( *pcCommandString != 0x00 )
 800d7ca:	568a      	ldrsb	r2, [r1, r2]
 800d7cc:	2a00      	cmp	r2, #0
 800d7ce:	d007      	beq.n	800d7e0 <FreeRTOS_CLIProcessCommand+0xb0>
		if( ( *pcCommandString ) == ' ' )
 800d7d0:	2a20      	cmp	r2, #32
 800d7d2:	d1f7      	bne.n	800d7c4 <FreeRTOS_CLIProcessCommand+0x94>
			if( xLastCharacterWasSpace != pdTRUE )
 800d7d4:	2801      	cmp	r0, #1
 800d7d6:	d0f6      	beq.n	800d7c6 <FreeRTOS_CLIProcessCommand+0x96>
				cParameters++;
 800d7d8:	3401      	adds	r4, #1
 800d7da:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800d7dc:	2001      	movs	r0, #1
 800d7de:	e7f2      	b.n	800d7c6 <FreeRTOS_CLIProcessCommand+0x96>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800d7e0:	2801      	cmp	r0, #1
 800d7e2:	d00c      	beq.n	800d7fe <FreeRTOS_CLIProcessCommand+0xce>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800d7e4:	42a5      	cmp	r5, r4
 800d7e6:	d00d      	beq.n	800d804 <FreeRTOS_CLIProcessCommand+0xd4>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d0d7      	beq.n	800d79c <FreeRTOS_CLIProcessCommand+0x6c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d7ec:	465a      	mov	r2, fp
 800d7ee:	490b      	ldr	r1, [pc, #44]	; (800d81c <FreeRTOS_CLIProcessCommand+0xec>)
 800d7f0:	4650      	mov	r0, sl
 800d7f2:	f005 fcde 	bl	80131b2 <strncpy>
		pxCommand = NULL;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	603b      	str	r3, [r7, #0]
 800d7fc:	e7ae      	b.n	800d75c <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800d7fe:	3c01      	subs	r4, #1
 800d800:	b264      	sxtb	r4, r4
 800d802:	e7ef      	b.n	800d7e4 <FreeRTOS_CLIProcessCommand+0xb4>
	else if( pxCommand != NULL )
 800d804:	2b00      	cmp	r3, #0
 800d806:	d1a0      	bne.n	800d74a <FreeRTOS_CLIProcessCommand+0x1a>
 800d808:	e7c8      	b.n	800d79c <FreeRTOS_CLIProcessCommand+0x6c>
int8_t cParameters = 0;
 800d80a:	2400      	movs	r4, #0
 800d80c:	e7ea      	b.n	800d7e4 <FreeRTOS_CLIProcessCommand+0xb4>
 800d80e:	46c0      	nop			; (mov r8, r8)
 800d810:	20001fc4 	.word	0x20001fc4
 800d814:	200000b4 	.word	0x200000b4
 800d818:	0801a280 	.word	0x0801a280
 800d81c:	0801a228 	.word	0x0801a228

0800d820 <FreeRTOS_CLIGetOutputBuffer>:
}
 800d820:	4800      	ldr	r0, [pc, #0]	; (800d824 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800d822:	4770      	bx	lr
 800d824:	20001fd4 	.word	0x20001fd4

0800d828 <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
 800d828:	2300      	movs	r3, #0
{
 800d82a:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800d82c:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800d82e:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800d830:	2900      	cmp	r1, #0
 800d832:	d021      	beq.n	800d878 <FreeRTOS_CLIGetParameter+0x50>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d834:	2300      	movs	r3, #0
 800d836:	56c3      	ldrsb	r3, [r0, r3]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d105      	bne.n	800d848 <FreeRTOS_CLIGetParameter+0x20>
 800d83c:	e01c      	b.n	800d878 <FreeRTOS_CLIGetParameter+0x50>
 800d83e:	2300      	movs	r3, #0
			pcCommandString++;
 800d840:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d842:	56c3      	ldrsb	r3, [r0, r3]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d017      	beq.n	800d878 <FreeRTOS_CLIGetParameter+0x50>
 800d848:	2b20      	cmp	r3, #32
 800d84a:	d1f8      	bne.n	800d83e <FreeRTOS_CLIGetParameter+0x16>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d84c:	2300      	movs	r3, #0
			pcCommandString++;
 800d84e:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d850:	56c3      	ldrsb	r3, [r0, r3]
 800d852:	2b20      	cmp	r3, #32
 800d854:	d0fa      	beq.n	800d84c <FreeRTOS_CLIGetParameter+0x24>
		if( *pcCommandString != 0x00 )
 800d856:	2b00      	cmp	r3, #0
 800d858:	d00e      	beq.n	800d878 <FreeRTOS_CLIGetParameter+0x50>
			uxParametersFound++;
 800d85a:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800d85c:	42a1      	cmp	r1, r4
 800d85e:	d1e9      	bne.n	800d834 <FreeRTOS_CLIGetParameter+0xc>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d860:	2120      	movs	r1, #32
 800d862:	7803      	ldrb	r3, [r0, #0]
 800d864:	438b      	bics	r3, r1
 800d866:	d007      	beq.n	800d878 <FreeRTOS_CLIGetParameter+0x50>
 800d868:	2300      	movs	r3, #0
 800d86a:	2420      	movs	r4, #32
					( *pxParameterStringLength )++;
 800d86c:	3301      	adds	r3, #1
 800d86e:	6013      	str	r3, [r2, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d870:	5cc1      	ldrb	r1, [r0, r3]
 800d872:	43a1      	bics	r1, r4
 800d874:	d1fa      	bne.n	800d86c <FreeRTOS_CLIGetParameter+0x44>
 800d876:	e000      	b.n	800d87a <FreeRTOS_CLIGetParameter+0x52>
					pcReturn = NULL;
 800d878:	2000      	movs	r0, #0
}
 800d87a:	bd10      	pop	{r4, pc}

0800d87c <prvHelpCommand>:
{
 800d87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d87e:	46ce      	mov	lr, r9
 800d880:	4647      	mov	r7, r8
portBASE_TYPE xParameterStringLength1 = 0;
 800d882:	2300      	movs	r3, #0
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b083      	sub	sp, #12
 800d888:	0004      	movs	r4, r0
 800d88a:	000d      	movs	r5, r1
 800d88c:	0010      	movs	r0, r2
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d88e:	2101      	movs	r1, #1
 800d890:	aa01      	add	r2, sp, #4
portBASE_TYPE xParameterStringLength1 = 0;
 800d892:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d894:	f7ff ffc8 	bl	800d828 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800d898:	2800      	cmp	r0, #0
 800d89a:	d024      	beq.n	800d8e6 <prvHelpCommand+0x6a>
 800d89c:	2206      	movs	r2, #6
 800d89e:	4931      	ldr	r1, [pc, #196]	; (800d964 <prvHelpCommand+0xe8>)
 800d8a0:	f005 fc76 	bl	8013190 <strncmp>
 800d8a4:	1e07      	subs	r7, r0, #0
 800d8a6:	d118      	bne.n	800d8da <prvHelpCommand+0x5e>
		if( str == NumOfParamsHelpStrings )
 800d8a8:	4b2f      	ldr	r3, [pc, #188]	; (800d968 <prvHelpCommand+0xec>)
 800d8aa:	4698      	mov	r8, r3
 800d8ac:	791b      	ldrb	r3, [r3, #4]
 800d8ae:	2b07      	cmp	r3, #7
 800d8b0:	d047      	beq.n	800d942 <prvHelpCommand+0xc6>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d8b2:	1c5a      	adds	r2, r3, #1
 800d8b4:	b2d2      	uxtb	r2, r2
 800d8b6:	4691      	mov	r9, r2
 800d8b8:	4642      	mov	r2, r8
 800d8ba:	4649      	mov	r1, r9
 800d8bc:	7111      	strb	r1, [r2, #4]
 800d8be:	4a2b      	ldr	r2, [pc, #172]	; (800d96c <prvHelpCommand+0xf0>)
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	5899      	ldr	r1, [r3, r2]
 800d8c4:	0020      	movs	r0, r4
 800d8c6:	002a      	movs	r2, r5
 800d8c8:	f005 fc73 	bl	80131b2 <strncpy>
		if( str == NumOfParamsHelpStrings )
 800d8cc:	464b      	mov	r3, r9
			xReturn = pdTRUE;
 800d8ce:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800d8d0:	2b07      	cmp	r3, #7
 800d8d2:	d102      	bne.n	800d8da <prvHelpCommand+0x5e>
			xReturn = pdFALSE; str = 0;
 800d8d4:	4643      	mov	r3, r8
 800d8d6:	2600      	movs	r6, #0
 800d8d8:	711f      	strb	r7, [r3, #4]
}
 800d8da:	0030      	movs	r0, r6
 800d8dc:	b003      	add	sp, #12
 800d8de:	bc0c      	pop	{r2, r3}
 800d8e0:	4690      	mov	r8, r2
 800d8e2:	4699      	mov	r9, r3
 800d8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800d8e6:	4f20      	ldr	r7, [pc, #128]	; (800d968 <prvHelpCommand+0xec>)
 800d8e8:	68be      	ldr	r6, [r7, #8]
 800d8ea:	2e00      	cmp	r6, #0
 800d8ec:	d020      	beq.n	800d930 <prvHelpCommand+0xb4>
 800d8ee:	7b3b      	ldrb	r3, [r7, #12]
 800d8f0:	1c5a      	adds	r2, r3, #1
 800d8f2:	b2d2      	uxtb	r2, r2
 800d8f4:	4690      	mov	r8, r2
 800d8f6:	6832      	ldr	r2, [r6, #0]
 800d8f8:	6851      	ldr	r1, [r2, #4]
		if (counter > numOfBosCommands) {
 800d8fa:	4a1d      	ldr	r2, [pc, #116]	; (800d970 <prvHelpCommand+0xf4>)
 800d8fc:	7812      	ldrb	r2, [r2, #0]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d22a      	bcs.n	800d958 <prvHelpCommand+0xdc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800d902:	002a      	movs	r2, r5
 800d904:	0020      	movs	r0, r4
 800d906:	3a08      	subs	r2, #8
 800d908:	3008      	adds	r0, #8
 800d90a:	f005 fc52 	bl	80131b2 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800d90e:	1c60      	adds	r0, r4, #1
 800d910:	4918      	ldr	r1, [pc, #96]	; (800d974 <prvHelpCommand+0xf8>)
 800d912:	f005 fc35 	bl	8013180 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800d916:	2328      	movs	r3, #40	; 0x28
 800d918:	7023      	strb	r3, [r4, #0]
 800d91a:	3301      	adds	r3, #1
 800d91c:	71a3      	strb	r3, [r4, #6]
 800d91e:	3b09      	subs	r3, #9
 800d920:	71e3      	strb	r3, [r4, #7]
		counter++;
 800d922:	4643      	mov	r3, r8
		pxCommand = pxCommand->pxNext;
 800d924:	6876      	ldr	r6, [r6, #4]
		counter++;
 800d926:	733b      	strb	r3, [r7, #12]
		pxCommand = pxCommand->pxNext;
 800d928:	60be      	str	r6, [r7, #8]
			xReturn = pdTRUE;
 800d92a:	1e73      	subs	r3, r6, #1
 800d92c:	419e      	sbcs	r6, r3
 800d92e:	e7d4      	b.n	800d8da <prvHelpCommand+0x5e>
			counter = 1;
 800d930:	2301      	movs	r3, #1
			pxCommand = &xRegisteredCommands;
 800d932:	4e11      	ldr	r6, [pc, #68]	; (800d978 <prvHelpCommand+0xfc>)
			counter = 1;
 800d934:	733b      	strb	r3, [r7, #12]
			pxCommand = &xRegisteredCommands;
 800d936:	3604      	adds	r6, #4
			counter = 1;
 800d938:	3301      	adds	r3, #1
 800d93a:	4698      	mov	r8, r3
			pxCommand = &xRegisteredCommands;
 800d93c:	60be      	str	r6, [r7, #8]
			counter = 1;
 800d93e:	3b01      	subs	r3, #1
 800d940:	e7d9      	b.n	800d8f6 <prvHelpCommand+0x7a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d942:	4642      	mov	r2, r8
 800d944:	3b06      	subs	r3, #6
 800d946:	7113      	strb	r3, [r2, #4]
 800d948:	4b08      	ldr	r3, [pc, #32]	; (800d96c <prvHelpCommand+0xf0>)
 800d94a:	002a      	movs	r2, r5
 800d94c:	6819      	ldr	r1, [r3, #0]
 800d94e:	0020      	movs	r0, r4
 800d950:	f005 fc2f 	bl	80131b2 <strncpy>
			xReturn = pdTRUE;
 800d954:	2601      	movs	r6, #1
 800d956:	e7c0      	b.n	800d8da <prvHelpCommand+0x5e>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800d958:	002a      	movs	r2, r5
 800d95a:	0020      	movs	r0, r4
 800d95c:	f005 fc29 	bl	80131b2 <strncpy>
 800d960:	e7df      	b.n	800d922 <prvHelpCommand+0xa6>
 800d962:	46c0      	nop			; (mov r8, r8)
 800d964:	08018bb8 	.word	0x08018bb8
 800d968:	20001fc4 	.word	0x20001fc4
 800d96c:	20000034 	.word	0x20000034
 800d970:	20006e24 	.word	0x20006e24
 800d974:	080175bc 	.word	0x080175bc
 800d978:	200000b4 	.word	0x200000b4

0800d97c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d97c:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d97e:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d980:	3308      	adds	r3, #8
 800d982:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d984:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d986:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d988:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d98a:	4252      	negs	r2, r2
 800d98c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d98e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d990:	4770      	bx	lr
 800d992:	46c0      	nop			; (mov r8, r8)

0800d994 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d994:	2300      	movs	r3, #0
 800d996:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d998:	4770      	bx	lr
 800d99a:	46c0      	nop			; (mov r8, r8)

0800d99c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d99c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d99e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d9a0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d9a2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d9a4:	689a      	ldr	r2, [r3, #8]
 800d9a6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d9a8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800d9aa:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d9ac:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	6003      	str	r3, [r0, #0]
}
 800d9b2:	4770      	bx	lr

0800d9b4 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9b4:	0002      	movs	r2, r0
{
 800d9b6:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d9b8:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9ba:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800d9bc:	1c63      	adds	r3, r4, #1
 800d9be:	d101      	bne.n	800d9c4 <vListInsert+0x10>
 800d9c0:	e00d      	b.n	800d9de <vListInsert+0x2a>
 800d9c2:	001a      	movs	r2, r3
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9c4:	6853      	ldr	r3, [r2, #4]
 800d9c6:	681d      	ldr	r5, [r3, #0]
 800d9c8:	42a5      	cmp	r5, r4
 800d9ca:	d9fa      	bls.n	800d9c2 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d9cc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d9ce:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800d9d0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800d9d2:	608a      	str	r2, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800d9d4:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800d9d6:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d9d8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d9da:	6003      	str	r3, [r0, #0]
}
 800d9dc:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800d9de:	6902      	ldr	r2, [r0, #16]
 800d9e0:	6853      	ldr	r3, [r2, #4]
 800d9e2:	e7f3      	b.n	800d9cc <vListInsert+0x18>

0800d9e4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d9e4:	6842      	ldr	r2, [r0, #4]
 800d9e6:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d9e8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d9ea:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d9ec:	6881      	ldr	r1, [r0, #8]
 800d9ee:	604a      	str	r2, [r1, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d9f0:	685a      	ldr	r2, [r3, #4]
 800d9f2:	4282      	cmp	r2, r0
 800d9f4:	d100      	bne.n	800d9f8 <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d9f6:	6059      	str	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	1e50      	subs	r0, r2, #1
 800da00:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800da02:	4770      	bx	lr

0800da04 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800da04:	b570      	push	{r4, r5, r6, lr}
 800da06:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800da08:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800da0a:	0004      	movs	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800da0c:	2a00      	cmp	r2, #0
 800da0e:	d107      	bne.n	800da20 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da10:	6805      	ldr	r5, [r0, #0]
 800da12:	2d00      	cmp	r5, #0
 800da14:	d02d      	beq.n	800da72 <prvCopyDataToQueue+0x6e>
BaseType_t xReturn = pdFALSE;
 800da16:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800da18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da1a:	3301      	adds	r3, #1
 800da1c:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800da1e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800da20:	2d00      	cmp	r5, #0
 800da22:	d10e      	bne.n	800da42 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800da24:	6880      	ldr	r0, [r0, #8]
 800da26:	f005 f96c 	bl	8012d02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800da2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800da2c:	68a3      	ldr	r3, [r4, #8]
 800da2e:	4694      	mov	ip, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da30:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800da32:	4463      	add	r3, ip
 800da34:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da36:	4293      	cmp	r3, r2
 800da38:	d3ed      	bcc.n	800da16 <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800da3a:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800da3c:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800da3e:	60a3      	str	r3, [r4, #8]
 800da40:	e7ea      	b.n	800da18 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da42:	68c0      	ldr	r0, [r0, #12]
 800da44:	f005 f95d 	bl	8012d02 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800da48:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da4a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800da4c:	425a      	negs	r2, r3
 800da4e:	68e3      	ldr	r3, [r4, #12]
 800da50:	189b      	adds	r3, r3, r2
 800da52:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da54:	428b      	cmp	r3, r1
 800da56:	d203      	bcs.n	800da60 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800da58:	6863      	ldr	r3, [r4, #4]
 800da5a:	469c      	mov	ip, r3
 800da5c:	4462      	add	r2, ip
 800da5e:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800da60:	2d02      	cmp	r5, #2
 800da62:	d1d8      	bne.n	800da16 <prvCopyDataToQueue+0x12>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da66:	2b00      	cmp	r3, #0
 800da68:	d0d5      	beq.n	800da16 <prvCopyDataToQueue+0x12>
				--( pxQueue->uxMessagesWaiting );
 800da6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da6c:	3b01      	subs	r3, #1
 800da6e:	63a3      	str	r3, [r4, #56]	; 0x38
 800da70:	e7d1      	b.n	800da16 <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800da72:	6840      	ldr	r0, [r0, #4]
 800da74:	f001 f842 	bl	800eafc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800da78:	6065      	str	r5, [r4, #4]
 800da7a:	e7cd      	b.n	800da18 <prvCopyDataToQueue+0x14>

0800da7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800da7e:	b510      	push	{r4, lr}
 800da80:	000b      	movs	r3, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da82:	2a00      	cmp	r2, #0
 800da84:	d008      	beq.n	800da98 <prvCopyDataFromQueue+0x1c>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800da86:	68c1      	ldr	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800da88:	6844      	ldr	r4, [r0, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800da8a:	1889      	adds	r1, r1, r2
 800da8c:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800da8e:	42a1      	cmp	r1, r4
 800da90:	d203      	bcs.n	800da9a <prvCopyDataFromQueue+0x1e>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800da92:	0018      	movs	r0, r3
 800da94:	f005 f935 	bl	8012d02 <memcpy>
	}
}
 800da98:	bd10      	pop	{r4, pc}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800da9a:	6801      	ldr	r1, [r0, #0]
 800da9c:	60c1      	str	r1, [r0, #12]
 800da9e:	e7f8      	b.n	800da92 <prvCopyDataFromQueue+0x16>

0800daa0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800daa0:	b570      	push	{r4, r5, r6, lr}
 800daa2:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800daa4:	f001 fbe8 	bl	800f278 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800daa8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800daaa:	2b00      	cmp	r3, #0
 800daac:	dd1b      	ble.n	800dae6 <prvUnlockQueue+0x46>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800daae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d018      	beq.n	800dae6 <prvUnlockQueue+0x46>
 800dab4:	0025      	movs	r5, r4
 800dab6:	3524      	adds	r5, #36	; 0x24
 800dab8:	e008      	b.n	800dacc <prvUnlockQueue+0x2c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800daba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dabc:	3b01      	subs	r3, #1
 800dabe:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dac0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	dd0f      	ble.n	800dae6 <prvUnlockQueue+0x46>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00c      	beq.n	800dae6 <prvUnlockQueue+0x46>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dacc:	0028      	movs	r0, r5
 800dace:	f000 ff49 	bl	800e964 <xTaskRemoveFromEventList>
 800dad2:	2800      	cmp	r0, #0
 800dad4:	d0f1      	beq.n	800daba <prvUnlockQueue+0x1a>
						vTaskMissedYield();
 800dad6:	f000 ffc3 	bl	800ea60 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800dada:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dadc:	3b01      	subs	r3, #1
 800dade:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dae0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	dcef      	bgt.n	800dac6 <prvUnlockQueue+0x26>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800dae6:	2301      	movs	r3, #1
 800dae8:	425b      	negs	r3, r3
 800daea:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800daec:	f001 fbd0 	bl	800f290 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800daf0:	f001 fbc2 	bl	800f278 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800daf4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	dd1b      	ble.n	800db32 <prvUnlockQueue+0x92>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dafa:	6923      	ldr	r3, [r4, #16]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d018      	beq.n	800db32 <prvUnlockQueue+0x92>
 800db00:	0025      	movs	r5, r4
 800db02:	3510      	adds	r5, #16
 800db04:	e008      	b.n	800db18 <prvUnlockQueue+0x78>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800db06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db08:	3b01      	subs	r3, #1
 800db0a:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800db0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db0e:	2b00      	cmp	r3, #0
 800db10:	dd0f      	ble.n	800db32 <prvUnlockQueue+0x92>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db12:	6923      	ldr	r3, [r4, #16]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d00c      	beq.n	800db32 <prvUnlockQueue+0x92>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db18:	0028      	movs	r0, r5
 800db1a:	f000 ff23 	bl	800e964 <xTaskRemoveFromEventList>
 800db1e:	2800      	cmp	r0, #0
 800db20:	d0f1      	beq.n	800db06 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800db22:	f000 ff9d 	bl	800ea60 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800db26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db28:	3b01      	subs	r3, #1
 800db2a:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800db2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db2e:	2b00      	cmp	r3, #0
 800db30:	dcef      	bgt.n	800db12 <prvUnlockQueue+0x72>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800db32:	2301      	movs	r3, #1
 800db34:	425b      	negs	r3, r3
 800db36:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800db38:	f001 fbaa 	bl	800f290 <vPortExitCritical>
}
 800db3c:	bd70      	pop	{r4, r5, r6, pc}
 800db3e:	46c0      	nop			; (mov r8, r8)

0800db40 <xQueueGenericReset>:
{
 800db40:	b570      	push	{r4, r5, r6, lr}
 800db42:	0004      	movs	r4, r0
 800db44:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800db46:	2800      	cmp	r0, #0
 800db48:	d01a      	beq.n	800db80 <xQueueGenericReset+0x40>
	taskENTER_CRITICAL();
 800db4a:	f001 fb95 	bl	800f278 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800db4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800db50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800db52:	6822      	ldr	r2, [r4, #0]
 800db54:	434b      	muls	r3, r1
 800db56:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800db58:	1a5b      	subs	r3, r3, r1
 800db5a:	18d3      	adds	r3, r2, r3
 800db5c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800db5e:	2301      	movs	r3, #1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800db60:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800db62:	2000      	movs	r0, #0
		pxQueue->xRxLock = queueUNLOCKED;
 800db64:	425b      	negs	r3, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800db66:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800db68:	60a2      	str	r2, [r4, #8]
		pxQueue->xRxLock = queueUNLOCKED;
 800db6a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800db6c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800db6e:	2d00      	cmp	r5, #0
 800db70:	d108      	bne.n	800db84 <xQueueGenericReset+0x44>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db72:	6923      	ldr	r3, [r4, #16]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d10e      	bne.n	800db96 <xQueueGenericReset+0x56>
	taskEXIT_CRITICAL();
 800db78:	f001 fb8a 	bl	800f290 <vPortExitCritical>
}
 800db7c:	2001      	movs	r0, #1
 800db7e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800db80:	b672      	cpsid	i
 800db82:	e7fe      	b.n	800db82 <xQueueGenericReset+0x42>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800db84:	0020      	movs	r0, r4
 800db86:	3010      	adds	r0, #16
 800db88:	f7ff fef8 	bl	800d97c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800db8c:	0020      	movs	r0, r4
 800db8e:	3024      	adds	r0, #36	; 0x24
 800db90:	f7ff fef4 	bl	800d97c <vListInitialise>
 800db94:	e7f0      	b.n	800db78 <xQueueGenericReset+0x38>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800db96:	0020      	movs	r0, r4
 800db98:	3010      	adds	r0, #16
 800db9a:	f000 fee3 	bl	800e964 <xTaskRemoveFromEventList>
 800db9e:	2801      	cmp	r0, #1
 800dba0:	d1ea      	bne.n	800db78 <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 800dba2:	f001 fb5d 	bl	800f260 <vPortYield>
 800dba6:	e7e7      	b.n	800db78 <xQueueGenericReset+0x38>

0800dba8 <xQueueGenericCreate>:
{
 800dba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbaa:	0005      	movs	r5, r0
 800dbac:	000e      	movs	r6, r1
 800dbae:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d101      	bne.n	800dbb8 <xQueueGenericCreate+0x10>
 800dbb4:	b672      	cpsid	i
 800dbb6:	e7fe      	b.n	800dbb6 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800dbb8:	2900      	cmp	r1, #0
 800dbba:	d013      	beq.n	800dbe4 <xQueueGenericCreate+0x3c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbbc:	0008      	movs	r0, r1
 800dbbe:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dbc0:	3055      	adds	r0, #85	; 0x55
 800dbc2:	f001 fbd7 	bl	800f374 <pvPortMalloc>
 800dbc6:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800dbc8:	d011      	beq.n	800dbee <xQueueGenericCreate+0x46>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800dbca:	0003      	movs	r3, r0
 800dbcc:	3354      	adds	r3, #84	; 0x54
 800dbce:	6003      	str	r3, [r0, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800dbd0:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800dbd2:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dbd4:	2101      	movs	r1, #1
 800dbd6:	0020      	movs	r0, r4
 800dbd8:	f7ff ffb2 	bl	800db40 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800dbdc:	2350      	movs	r3, #80	; 0x50
}
 800dbde:	0020      	movs	r0, r4
			pxNewQueue->ucQueueType = ucQueueType;
 800dbe0:	54e7      	strb	r7, [r4, r3]
}
 800dbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dbe4:	2054      	movs	r0, #84	; 0x54
 800dbe6:	f001 fbc5 	bl	800f374 <pvPortMalloc>
 800dbea:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800dbec:	d101      	bne.n	800dbf2 <xQueueGenericCreate+0x4a>
	configASSERT( xReturn );
 800dbee:	b672      	cpsid	i
 800dbf0:	e7fe      	b.n	800dbf0 <xQueueGenericCreate+0x48>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dbf2:	6024      	str	r4, [r4, #0]
 800dbf4:	e7ec      	b.n	800dbd0 <xQueueGenericCreate+0x28>
 800dbf6:	46c0      	nop			; (mov r8, r8)

0800dbf8 <xQueueCreateCountingSemaphore>:
	{
 800dbf8:	b510      	push	{r4, lr}
 800dbfa:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	d101      	bne.n	800dc04 <xQueueCreateCountingSemaphore+0xc>
 800dc00:	b672      	cpsid	i
 800dc02:	e7fe      	b.n	800dc02 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dc04:	4288      	cmp	r0, r1
 800dc06:	d201      	bcs.n	800dc0c <xQueueCreateCountingSemaphore+0x14>
 800dc08:	b672      	cpsid	i
 800dc0a:	e7fe      	b.n	800dc0a <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dc0c:	2202      	movs	r2, #2
 800dc0e:	2100      	movs	r1, #0
 800dc10:	f7ff ffca 	bl	800dba8 <xQueueGenericCreate>
		if( xHandle != NULL )
 800dc14:	2800      	cmp	r0, #0
 800dc16:	d001      	beq.n	800dc1c <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dc18:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800dc1a:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800dc1c:	b672      	cpsid	i
 800dc1e:	e7fe      	b.n	800dc1e <xQueueCreateCountingSemaphore+0x26>

0800dc20 <xQueueGenericSend>:
{
 800dc20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc22:	46c6      	mov	lr, r8
 800dc24:	b500      	push	{lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	0004      	movs	r4, r0
 800dc2a:	000f      	movs	r7, r1
 800dc2c:	9201      	str	r2, [sp, #4]
 800dc2e:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d100      	bne.n	800dc36 <xQueueGenericSend+0x16>
 800dc34:	e07a      	b.n	800dd2c <xQueueGenericSend+0x10c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc36:	2900      	cmp	r1, #0
 800dc38:	d100      	bne.n	800dc3c <xQueueGenericSend+0x1c>
 800dc3a:	e071      	b.n	800dd20 <xQueueGenericSend+0x100>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc3c:	2d02      	cmp	r5, #2
 800dc3e:	d104      	bne.n	800dc4a <xQueueGenericSend+0x2a>
 800dc40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d001      	beq.n	800dc4a <xQueueGenericSend+0x2a>
 800dc46:	b672      	cpsid	i
 800dc48:	e7fe      	b.n	800dc48 <xQueueGenericSend+0x28>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc4a:	f000 ff0f 	bl	800ea6c <xTaskGetSchedulerState>
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	d104      	bne.n	800dc5c <xQueueGenericSend+0x3c>
 800dc52:	9b01      	ldr	r3, [sp, #4]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d001      	beq.n	800dc5c <xQueueGenericSend+0x3c>
 800dc58:	b672      	cpsid	i
 800dc5a:	e7fe      	b.n	800dc5a <xQueueGenericSend+0x3a>
		prvLockQueue( pxQueue );
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	4698      	mov	r8, r3
		taskENTER_CRITICAL();
 800dc60:	f001 fb0a 	bl	800f278 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dc66:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dc68:	2600      	movs	r6, #0
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d335      	bcc.n	800dcda <xQueueGenericSend+0xba>
 800dc6e:	2d02      	cmp	r5, #2
 800dc70:	d033      	beq.n	800dcda <xQueueGenericSend+0xba>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc72:	9b01      	ldr	r3, [sp, #4]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d05b      	beq.n	800dd30 <xQueueGenericSend+0x110>
				else if( xEntryTimeSet == pdFALSE )
 800dc78:	2e00      	cmp	r6, #0
 800dc7a:	d102      	bne.n	800dc82 <xQueueGenericSend+0x62>
					vTaskSetTimeOutState( &xTimeOut );
 800dc7c:	a802      	add	r0, sp, #8
 800dc7e:	f000 feab 	bl	800e9d8 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800dc82:	f001 fb05 	bl	800f290 <vPortExitCritical>
		vTaskSuspendAll();
 800dc86:	f000 fc63 	bl	800e550 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc8a:	f001 faf5 	bl	800f278 <vPortEnterCritical>
 800dc8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dc90:	3301      	adds	r3, #1
 800dc92:	d101      	bne.n	800dc98 <xQueueGenericSend+0x78>
 800dc94:	4643      	mov	r3, r8
 800dc96:	6463      	str	r3, [r4, #68]	; 0x44
 800dc98:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	d101      	bne.n	800dca2 <xQueueGenericSend+0x82>
 800dc9e:	4643      	mov	r3, r8
 800dca0:	64a3      	str	r3, [r4, #72]	; 0x48
 800dca2:	f001 faf5 	bl	800f290 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dca6:	a901      	add	r1, sp, #4
 800dca8:	a802      	add	r0, sp, #8
 800dcaa:	f000 fea5 	bl	800e9f8 <xTaskCheckForTimeOut>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d14b      	bne.n	800dd4a <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcb2:	f001 fae1 	bl	800f278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dcb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dcb8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d01e      	beq.n	800dcfc <xQueueGenericSend+0xdc>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800dcbe:	f001 fae7 	bl	800f290 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800dcc2:	0020      	movs	r0, r4
 800dcc4:	f7ff feec 	bl	800daa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dcc8:	f000 fce2 	bl	800e690 <xTaskResumeAll>
 800dccc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800dcce:	f001 fad3 	bl	800f278 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dcd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dcd4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d2c9      	bcs.n	800dc6e <xQueueGenericSend+0x4e>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dcda:	002a      	movs	r2, r5
 800dcdc:	0039      	movs	r1, r7
 800dcde:	0020      	movs	r0, r4
 800dce0:	f7ff fe90 	bl	800da04 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dce4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d126      	bne.n	800dd38 <xQueueGenericSend+0x118>
					else if( xYieldRequired != pdFALSE )
 800dcea:	2800      	cmp	r0, #0
 800dcec:	d12a      	bne.n	800dd44 <xQueueGenericSend+0x124>
				taskEXIT_CRITICAL();
 800dcee:	f001 facf 	bl	800f290 <vPortExitCritical>
				return pdPASS;
 800dcf2:	2001      	movs	r0, #1
}
 800dcf4:	b004      	add	sp, #16
 800dcf6:	bc04      	pop	{r2}
 800dcf8:	4690      	mov	r8, r2
 800dcfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	taskEXIT_CRITICAL();
 800dcfc:	f001 fac8 	bl	800f290 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dd00:	0020      	movs	r0, r4
 800dd02:	9901      	ldr	r1, [sp, #4]
 800dd04:	3010      	adds	r0, #16
 800dd06:	f000 fdf7 	bl	800e8f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd0a:	0020      	movs	r0, r4
 800dd0c:	f7ff fec8 	bl	800daa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd10:	f000 fcbe 	bl	800e690 <xTaskResumeAll>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d1d9      	bne.n	800dccc <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800dd18:	f001 faa2 	bl	800f260 <vPortYield>
 800dd1c:	2601      	movs	r6, #1
 800dd1e:	e7d6      	b.n	800dcce <xQueueGenericSend+0xae>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd20:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d100      	bne.n	800dd28 <xQueueGenericSend+0x108>
 800dd26:	e789      	b.n	800dc3c <xQueueGenericSend+0x1c>
 800dd28:	b672      	cpsid	i
 800dd2a:	e7fe      	b.n	800dd2a <xQueueGenericSend+0x10a>
	configASSERT( pxQueue );
 800dd2c:	b672      	cpsid	i
 800dd2e:	e7fe      	b.n	800dd2e <xQueueGenericSend+0x10e>
					taskEXIT_CRITICAL();
 800dd30:	f001 faae 	bl	800f290 <vPortExitCritical>
					return errQUEUE_FULL;
 800dd34:	2000      	movs	r0, #0
 800dd36:	e7dd      	b.n	800dcf4 <xQueueGenericSend+0xd4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800dd38:	0020      	movs	r0, r4
 800dd3a:	3024      	adds	r0, #36	; 0x24
 800dd3c:	f000 fe12 	bl	800e964 <xTaskRemoveFromEventList>
 800dd40:	2801      	cmp	r0, #1
 800dd42:	d1d4      	bne.n	800dcee <xQueueGenericSend+0xce>
							queueYIELD_IF_USING_PREEMPTION();
 800dd44:	f001 fa8c 	bl	800f260 <vPortYield>
 800dd48:	e7d1      	b.n	800dcee <xQueueGenericSend+0xce>
			prvUnlockQueue( pxQueue );
 800dd4a:	0020      	movs	r0, r4
 800dd4c:	f7ff fea8 	bl	800daa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd50:	f000 fc9e 	bl	800e690 <xTaskResumeAll>
			return errQUEUE_FULL;
 800dd54:	2000      	movs	r0, #0
 800dd56:	e7cd      	b.n	800dcf4 <xQueueGenericSend+0xd4>

0800dd58 <xQueueGenericSendFromISR>:
{
 800dd58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd5a:	46c6      	mov	lr, r8
 800dd5c:	0004      	movs	r4, r0
 800dd5e:	b500      	push	{lr}
 800dd60:	000d      	movs	r5, r1
 800dd62:	0017      	movs	r7, r2
 800dd64:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d01d      	beq.n	800dda6 <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd6a:	2900      	cmp	r1, #0
 800dd6c:	d016      	beq.n	800dd9c <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dd6e:	4643      	mov	r3, r8
 800dd70:	2b02      	cmp	r3, #2
 800dd72:	d104      	bne.n	800dd7e <xQueueGenericSendFromISR+0x26>
 800dd74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	d017      	beq.n	800ddaa <xQueueGenericSendFromISR+0x52>
 800dd7a:	b672      	cpsid	i
 800dd7c:	e7fe      	b.n	800dd7c <xQueueGenericSendFromISR+0x24>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd7e:	f001 fa95 	bl	800f2ac <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd84:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd86:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d312      	bcc.n	800ddb2 <xQueueGenericSendFromISR+0x5a>
			xReturn = errQUEUE_FULL;
 800dd8c:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800dd8e:	0030      	movs	r0, r6
 800dd90:	f001 fa92 	bl	800f2b8 <vClearInterruptMaskFromISR>
}
 800dd94:	0028      	movs	r0, r5
 800dd96:	bc04      	pop	{r2}
 800dd98:	4690      	mov	r8, r2
 800dd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd9c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d0e5      	beq.n	800dd6e <xQueueGenericSendFromISR+0x16>
 800dda2:	b672      	cpsid	i
 800dda4:	e7fe      	b.n	800dda4 <xQueueGenericSendFromISR+0x4c>
	configASSERT( pxQueue );
 800dda6:	b672      	cpsid	i
 800dda8:	e7fe      	b.n	800dda8 <xQueueGenericSendFromISR+0x50>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ddaa:	f001 fa7f 	bl	800f2ac <ulSetInterruptMaskFromISR>
 800ddae:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ddb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ddb2:	4642      	mov	r2, r8
 800ddb4:	0029      	movs	r1, r5
 800ddb6:	0020      	movs	r0, r4
 800ddb8:	f7ff fe24 	bl	800da04 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800ddbc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	d004      	beq.n	800ddcc <xQueueGenericSendFromISR+0x74>
				++( pxQueue->xTxLock );
 800ddc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800ddc4:	2501      	movs	r5, #1
				++( pxQueue->xTxLock );
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	64a3      	str	r3, [r4, #72]	; 0x48
 800ddca:	e7e0      	b.n	800dd8e <xQueueGenericSendFromISR+0x36>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ddcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
 800ddce:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d0dc      	beq.n	800dd8e <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ddd4:	0020      	movs	r0, r4
 800ddd6:	3024      	adds	r0, #36	; 0x24
 800ddd8:	f000 fdc4 	bl	800e964 <xTaskRemoveFromEventList>
 800dddc:	2800      	cmp	r0, #0
 800ddde:	d0d6      	beq.n	800dd8e <xQueueGenericSendFromISR+0x36>
							if( pxHigherPriorityTaskWoken != NULL )
 800dde0:	2f00      	cmp	r7, #0
 800dde2:	d0d4      	beq.n	800dd8e <xQueueGenericSendFromISR+0x36>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dde4:	603d      	str	r5, [r7, #0]
 800dde6:	e7d2      	b.n	800dd8e <xQueueGenericSendFromISR+0x36>

0800dde8 <xQueueGiveFromISR>:
{
 800dde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddea:	0004      	movs	r4, r0
 800ddec:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	d01e      	beq.n	800de30 <xQueueGiveFromISR+0x48>
	configASSERT( pxQueue->uxItemSize == 0 );
 800ddf2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d001      	beq.n	800ddfc <xQueueGiveFromISR+0x14>
 800ddf8:	b672      	cpsid	i
 800ddfa:	e7fe      	b.n	800ddfa <xQueueGiveFromISR+0x12>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ddfc:	6803      	ldr	r3, [r0, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d018      	beq.n	800de34 <xQueueGiveFromISR+0x4c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de02:	f001 fa53 	bl	800f2ac <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800de06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de0a:	0006      	movs	r6, r0
			xReturn = errQUEUE_FULL;
 800de0c:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800de0e:	4293      	cmp	r3, r2
 800de10:	d209      	bcs.n	800de26 <xQueueGiveFromISR+0x3e>
			++( pxQueue->uxMessagesWaiting );
 800de12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de14:	3301      	adds	r3, #1
 800de16:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800de18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de1a:	3301      	adds	r3, #1
 800de1c:	d00f      	beq.n	800de3e <xQueueGiveFromISR+0x56>
				++( pxQueue->xTxLock );
 800de1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de20:	3301      	adds	r3, #1
 800de22:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800de24:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800de26:	0030      	movs	r0, r6
 800de28:	f001 fa46 	bl	800f2b8 <vClearInterruptMaskFromISR>
}
 800de2c:	0028      	movs	r0, r5
 800de2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800de30:	b672      	cpsid	i
 800de32:	e7fe      	b.n	800de32 <xQueueGiveFromISR+0x4a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800de34:	6843      	ldr	r3, [r0, #4]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d0e3      	beq.n	800de02 <xQueueGiveFromISR+0x1a>
 800de3a:	b672      	cpsid	i
 800de3c:	e7fe      	b.n	800de3c <xQueueGiveFromISR+0x54>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de40:	42ab      	cmp	r3, r5
 800de42:	d0ef      	beq.n	800de24 <xQueueGiveFromISR+0x3c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de44:	0020      	movs	r0, r4
 800de46:	3024      	adds	r0, #36	; 0x24
 800de48:	f000 fd8c 	bl	800e964 <xTaskRemoveFromEventList>
 800de4c:	2800      	cmp	r0, #0
 800de4e:	d0e9      	beq.n	800de24 <xQueueGiveFromISR+0x3c>
							if( pxHigherPriorityTaskWoken != NULL )
 800de50:	2f00      	cmp	r7, #0
 800de52:	d0e7      	beq.n	800de24 <xQueueGiveFromISR+0x3c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800de54:	2501      	movs	r5, #1
 800de56:	603d      	str	r5, [r7, #0]
 800de58:	e7e5      	b.n	800de26 <xQueueGiveFromISR+0x3e>
 800de5a:	46c0      	nop			; (mov r8, r8)

0800de5c <xQueueGenericReceive>:
{
 800de5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de5e:	46c6      	mov	lr, r8
 800de60:	b500      	push	{lr}
 800de62:	b084      	sub	sp, #16
 800de64:	0004      	movs	r4, r0
 800de66:	000d      	movs	r5, r1
 800de68:	9201      	str	r2, [sp, #4]
 800de6a:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800de6c:	2800      	cmp	r0, #0
 800de6e:	d100      	bne.n	800de72 <xQueueGenericReceive+0x16>
 800de70:	e07c      	b.n	800df6c <xQueueGenericReceive+0x110>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de72:	2900      	cmp	r1, #0
 800de74:	d100      	bne.n	800de78 <xQueueGenericReceive+0x1c>
 800de76:	e073      	b.n	800df60 <xQueueGenericReceive+0x104>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de78:	f000 fdf8 	bl	800ea6c <xTaskGetSchedulerState>
 800de7c:	2800      	cmp	r0, #0
 800de7e:	d104      	bne.n	800de8a <xQueueGenericReceive+0x2e>
 800de80:	9b01      	ldr	r3, [sp, #4]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d001      	beq.n	800de8a <xQueueGenericReceive+0x2e>
 800de86:	b672      	cpsid	i
 800de88:	e7fe      	b.n	800de88 <xQueueGenericReceive+0x2c>
		taskENTER_CRITICAL();
 800de8a:	f001 f9f5 	bl	800f278 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de90:	2b00      	cmp	r3, #0
 800de92:	d14b      	bne.n	800df2c <xQueueGenericReceive+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800de94:	9b01      	ldr	r3, [sp, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d100      	bne.n	800de9c <xQueueGenericReceive+0x40>
 800de9a:	e08f      	b.n	800dfbc <xQueueGenericReceive+0x160>
					vTaskSetTimeOutState( &xTimeOut );
 800de9c:	a802      	add	r0, sp, #8
 800de9e:	f000 fd9b 	bl	800e9d8 <vTaskSetTimeOutState>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dea2:	2324      	movs	r3, #36	; 0x24
 800dea4:	4698      	mov	r8, r3
		prvLockQueue( pxQueue );
 800dea6:	2600      	movs	r6, #0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dea8:	44a0      	add	r8, r4
 800deaa:	e00f      	b.n	800decc <xQueueGenericReceive+0x70>
	taskEXIT_CRITICAL();
 800deac:	f001 f9f0 	bl	800f290 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800deb0:	0020      	movs	r0, r4
 800deb2:	f7ff fdf5 	bl	800daa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800deb6:	f000 fbeb 	bl	800e690 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800deba:	f001 f9dd 	bl	800f278 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800debe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d133      	bne.n	800df2c <xQueueGenericReceive+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dec4:	9b01      	ldr	r3, [sp, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d100      	bne.n	800decc <xQueueGenericReceive+0x70>
 800deca:	e077      	b.n	800dfbc <xQueueGenericReceive+0x160>
		taskEXIT_CRITICAL();
 800decc:	f001 f9e0 	bl	800f290 <vPortExitCritical>
		vTaskSuspendAll();
 800ded0:	f000 fb3e 	bl	800e550 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ded4:	f001 f9d0 	bl	800f278 <vPortEnterCritical>
 800ded8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800deda:	3301      	adds	r3, #1
 800dedc:	d100      	bne.n	800dee0 <xQueueGenericReceive+0x84>
 800dede:	6466      	str	r6, [r4, #68]	; 0x44
 800dee0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dee2:	3301      	adds	r3, #1
 800dee4:	d100      	bne.n	800dee8 <xQueueGenericReceive+0x8c>
 800dee6:	64a6      	str	r6, [r4, #72]	; 0x48
 800dee8:	f001 f9d2 	bl	800f290 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800deec:	a901      	add	r1, sp, #4
 800deee:	a802      	add	r0, sp, #8
 800def0:	f000 fd82 	bl	800e9f8 <xTaskCheckForTimeOut>
 800def4:	2800      	cmp	r0, #0
 800def6:	d15a      	bne.n	800dfae <xQueueGenericReceive+0x152>
	taskENTER_CRITICAL();
 800def8:	f001 f9be 	bl	800f278 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800defc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800defe:	2b00      	cmp	r3, #0
 800df00:	d1d4      	bne.n	800deac <xQueueGenericReceive+0x50>
	taskEXIT_CRITICAL();
 800df02:	f001 f9c5 	bl	800f290 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df06:	6823      	ldr	r3, [r4, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d034      	beq.n	800df76 <xQueueGenericReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df0c:	9901      	ldr	r1, [sp, #4]
 800df0e:	4640      	mov	r0, r8
 800df10:	f000 fcf2 	bl	800e8f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df14:	0020      	movs	r0, r4
 800df16:	f7ff fdc3 	bl	800daa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df1a:	f000 fbb9 	bl	800e690 <xTaskResumeAll>
 800df1e:	2800      	cmp	r0, #0
 800df20:	d026      	beq.n	800df70 <xQueueGenericReceive+0x114>
		taskENTER_CRITICAL();
 800df22:	f001 f9a9 	bl	800f278 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d0cb      	beq.n	800dec4 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df2c:	0029      	movs	r1, r5
 800df2e:	0020      	movs	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800df30:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df32:	f7ff fda3 	bl	800da7c <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800df36:	2f00      	cmp	r7, #0
 800df38:	d125      	bne.n	800df86 <xQueueGenericReceive+0x12a>
					--( pxQueue->uxMessagesWaiting );
 800df3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df3c:	3b01      	subs	r3, #1
 800df3e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df40:	6823      	ldr	r3, [r4, #0]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d102      	bne.n	800df4c <xQueueGenericReceive+0xf0>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800df46:	f000 fec5 	bl	800ecd4 <pvTaskIncrementMutexHeldCount>
 800df4a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df4c:	6923      	ldr	r3, [r4, #16]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d126      	bne.n	800dfa0 <xQueueGenericReceive+0x144>
				taskEXIT_CRITICAL();
 800df52:	f001 f99d 	bl	800f290 <vPortExitCritical>
				return pdPASS;
 800df56:	2001      	movs	r0, #1
}
 800df58:	b004      	add	sp, #16
 800df5a:	bc04      	pop	{r2}
 800df5c:	4690      	mov	r8, r2
 800df5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df60:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800df62:	2b00      	cmp	r3, #0
 800df64:	d100      	bne.n	800df68 <xQueueGenericReceive+0x10c>
 800df66:	e787      	b.n	800de78 <xQueueGenericReceive+0x1c>
 800df68:	b672      	cpsid	i
 800df6a:	e7fe      	b.n	800df6a <xQueueGenericReceive+0x10e>
	configASSERT( pxQueue );
 800df6c:	b672      	cpsid	i
 800df6e:	e7fe      	b.n	800df6e <xQueueGenericReceive+0x112>
					portYIELD_WITHIN_API();
 800df70:	f001 f976 	bl	800f260 <vPortYield>
 800df74:	e7d5      	b.n	800df22 <xQueueGenericReceive+0xc6>
						taskENTER_CRITICAL();
 800df76:	f001 f97f 	bl	800f278 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800df7a:	6860      	ldr	r0, [r4, #4]
 800df7c:	f000 fd86 	bl	800ea8c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800df80:	f001 f986 	bl	800f290 <vPortExitCritical>
 800df84:	e7c2      	b.n	800df0c <xQueueGenericReceive+0xb0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df86:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800df88:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d0e1      	beq.n	800df52 <xQueueGenericReceive+0xf6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df8e:	0020      	movs	r0, r4
 800df90:	3024      	adds	r0, #36	; 0x24
 800df92:	f000 fce7 	bl	800e964 <xTaskRemoveFromEventList>
 800df96:	2800      	cmp	r0, #0
 800df98:	d0db      	beq.n	800df52 <xQueueGenericReceive+0xf6>
							queueYIELD_IF_USING_PREEMPTION();
 800df9a:	f001 f961 	bl	800f260 <vPortYield>
 800df9e:	e7d8      	b.n	800df52 <xQueueGenericReceive+0xf6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800dfa0:	0020      	movs	r0, r4
 800dfa2:	3010      	adds	r0, #16
 800dfa4:	f000 fcde 	bl	800e964 <xTaskRemoveFromEventList>
 800dfa8:	2801      	cmp	r0, #1
 800dfaa:	d1d2      	bne.n	800df52 <xQueueGenericReceive+0xf6>
 800dfac:	e7f5      	b.n	800df9a <xQueueGenericReceive+0x13e>
			prvUnlockQueue( pxQueue );
 800dfae:	0020      	movs	r0, r4
 800dfb0:	f7ff fd76 	bl	800daa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dfb4:	f000 fb6c 	bl	800e690 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800dfb8:	2000      	movs	r0, #0
 800dfba:	e7cd      	b.n	800df58 <xQueueGenericReceive+0xfc>
					taskEXIT_CRITICAL();
 800dfbc:	f001 f968 	bl	800f290 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	e7c9      	b.n	800df58 <xQueueGenericReceive+0xfc>

0800dfc4 <xQueueReceiveFromISR>:
{
 800dfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfc6:	46c6      	mov	lr, r8
 800dfc8:	0004      	movs	r4, r0
 800dfca:	b500      	push	{lr}
 800dfcc:	4688      	mov	r8, r1
 800dfce:	0017      	movs	r7, r2
	configASSERT( pxQueue );
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d00f      	beq.n	800dff4 <xQueueReceiveFromISR+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dfd4:	2900      	cmp	r1, #0
 800dfd6:	d01d      	beq.n	800e014 <xQueueReceiveFromISR+0x50>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dfd8:	f001 f968 	bl	800f2ac <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dfdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dfde:	0006      	movs	r6, r0
			xReturn = pdFAIL;
 800dfe0:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d108      	bne.n	800dff8 <xQueueReceiveFromISR+0x34>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800dfe6:	0030      	movs	r0, r6
 800dfe8:	f001 f966 	bl	800f2b8 <vClearInterruptMaskFromISR>
}
 800dfec:	0028      	movs	r0, r5
 800dfee:	bc04      	pop	{r2}
 800dff0:	4690      	mov	r8, r2
 800dff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800dff4:	b672      	cpsid	i
 800dff6:	e7fe      	b.n	800dff6 <xQueueReceiveFromISR+0x32>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dff8:	4641      	mov	r1, r8
 800dffa:	0020      	movs	r0, r4
 800dffc:	f7ff fd3e 	bl	800da7c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800e000:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e002:	3b01      	subs	r3, #1
 800e004:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e006:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e008:	3301      	adds	r3, #1
 800e00a:	d008      	beq.n	800e01e <xQueueReceiveFromISR+0x5a>
				++( pxQueue->xRxLock );
 800e00c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e00e:	3301      	adds	r3, #1
 800e010:	6463      	str	r3, [r4, #68]	; 0x44
 800e012:	e007      	b.n	800e024 <xQueueReceiveFromISR+0x60>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e014:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e016:	2b00      	cmp	r3, #0
 800e018:	d0de      	beq.n	800dfd8 <xQueueReceiveFromISR+0x14>
 800e01a:	b672      	cpsid	i
 800e01c:	e7fe      	b.n	800e01c <xQueueReceiveFromISR+0x58>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e01e:	6923      	ldr	r3, [r4, #16]
 800e020:	42ab      	cmp	r3, r5
 800e022:	d101      	bne.n	800e028 <xQueueReceiveFromISR+0x64>
			xReturn = pdPASS;
 800e024:	2501      	movs	r5, #1
 800e026:	e7de      	b.n	800dfe6 <xQueueReceiveFromISR+0x22>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e028:	0020      	movs	r0, r4
 800e02a:	3010      	adds	r0, #16
 800e02c:	f000 fc9a 	bl	800e964 <xTaskRemoveFromEventList>
 800e030:	2800      	cmp	r0, #0
 800e032:	d0f7      	beq.n	800e024 <xQueueReceiveFromISR+0x60>
						if( pxHigherPriorityTaskWoken != NULL )
 800e034:	2f00      	cmp	r7, #0
 800e036:	d0f5      	beq.n	800e024 <xQueueReceiveFromISR+0x60>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e038:	2501      	movs	r5, #1
 800e03a:	603d      	str	r5, [r7, #0]
 800e03c:	e7d3      	b.n	800dfe6 <xQueueReceiveFromISR+0x22>
 800e03e:	46c0      	nop			; (mov r8, r8)

0800e040 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e040:	2300      	movs	r3, #0
	{
 800e042:	b570      	push	{r4, r5, r6, lr}
 800e044:	4d06      	ldr	r5, [pc, #24]	; (800e060 <vQueueAddToRegistry+0x20>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e046:	00dc      	lsls	r4, r3, #3
 800e048:	192a      	adds	r2, r5, r4
 800e04a:	6816      	ldr	r6, [r2, #0]
 800e04c:	2e00      	cmp	r6, #0
 800e04e:	d003      	beq.n	800e058 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e050:	3301      	adds	r3, #1
 800e052:	2b08      	cmp	r3, #8
 800e054:	d1f7      	bne.n	800e046 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e056:	bd70      	pop	{r4, r5, r6, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e058:	5129      	str	r1, [r5, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e05a:	6050      	str	r0, [r2, #4]
				break;
 800e05c:	e7fb      	b.n	800e056 <vQueueAddToRegistry+0x16>
 800e05e:	46c0      	nop			; (mov r8, r8)
 800e060:	20007368 	.word	0x20007368

0800e064 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e064:	b570      	push	{r4, r5, r6, lr}
 800e066:	0004      	movs	r4, r0
 800e068:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e06a:	f001 f905 	bl	800f278 <vPortEnterCritical>
 800e06e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e070:	3301      	adds	r3, #1
 800e072:	d101      	bne.n	800e078 <vQueueWaitForMessageRestricted+0x14>
 800e074:	2300      	movs	r3, #0
 800e076:	6463      	str	r3, [r4, #68]	; 0x44
 800e078:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e07a:	3301      	adds	r3, #1
 800e07c:	d101      	bne.n	800e082 <vQueueWaitForMessageRestricted+0x1e>
 800e07e:	2300      	movs	r3, #0
 800e080:	64a3      	str	r3, [r4, #72]	; 0x48
 800e082:	f001 f905 	bl	800f290 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e086:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d104      	bne.n	800e096 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e08c:	0020      	movs	r0, r4
 800e08e:	0029      	movs	r1, r5
 800e090:	3024      	adds	r0, #36	; 0x24
 800e092:	f000 fc51 	bl	800e938 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e096:	0020      	movs	r0, r4
 800e098:	f7ff fd02 	bl	800daa0 <prvUnlockQueue>
	}
 800e09c:	bd70      	pop	{r4, r5, r6, pc}
 800e09e:	46c0      	nop			; (mov r8, r8)

0800e0a0 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e0a0:	b510      	push	{r4, lr}
 800e0a2:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e0a4:	f005 f86c 	bl	8013180 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e0a8:	0020      	movs	r0, r4
 800e0aa:	f7f2 f835 	bl	8000118 <strlen>
 800e0ae:	0003      	movs	r3, r0
 800e0b0:	280b      	cmp	r0, #11
 800e0b2:	d808      	bhi.n	800e0c6 <prvWriteNameToBuffer+0x26>
 800e0b4:	0022      	movs	r2, r4
		{
			pcBuffer[ x ] = ' ';
 800e0b6:	2320      	movs	r3, #32
 800e0b8:	1820      	adds	r0, r4, r0
 800e0ba:	320c      	adds	r2, #12
 800e0bc:	7003      	strb	r3, [r0, #0]
 800e0be:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e0c0:	4290      	cmp	r0, r2
 800e0c2:	d1fb      	bne.n	800e0bc <prvWriteNameToBuffer+0x1c>
 800e0c4:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800e0c6:	18e0      	adds	r0, r4, r3
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800e0cc:	bd10      	pop	{r4, pc}
 800e0ce:	46c0      	nop			; (mov r8, r8)

0800e0d0 <prvListTaskWithinSingleList.part.1>:
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0d2:	46d6      	mov	lr, sl
 800e0d4:	464f      	mov	r7, r9
 800e0d6:	4646      	mov	r6, r8
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e0d8:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e0da:	b5c0      	push	{r6, r7, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e0dc:	685f      	ldr	r7, [r3, #4]
 800e0de:	2308      	movs	r3, #8
 800e0e0:	469c      	mov	ip, r3
 800e0e2:	448c      	add	ip, r1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e0e4:	4692      	mov	sl, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e0e6:	604f      	str	r7, [r1, #4]
 800e0e8:	4567      	cmp	r7, ip
 800e0ea:	d042      	beq.n	800e172 <prvListTaskWithinSingleList.part.1+0xa2>
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	0005      	movs	r5, r0
 800e0f0:	4698      	mov	r8, r3
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e0f2:	2302      	movs	r3, #2
	UBaseType_t uxTask = 0;
 800e0f4:	2000      	movs	r0, #0
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e0f6:	4699      	mov	r9, r3
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e0f8:	687f      	ldr	r7, [r7, #4]
 800e0fa:	604f      	str	r7, [r1, #4]
 800e0fc:	45bc      	cmp	ip, r7
 800e0fe:	d035      	beq.n	800e16c <prvListTaskWithinSingleList.part.1+0x9c>
 800e100:	68fe      	ldr	r6, [r7, #12]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e102:	0033      	movs	r3, r6
 800e104:	3334      	adds	r3, #52	; 0x34
 800e106:	606b      	str	r3, [r5, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e108:	6c73      	ldr	r3, [r6, #68]	; 0x44
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e10a:	602e      	str	r6, [r5, #0]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e10c:	60ab      	str	r3, [r5, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e10e:	4653      	mov	r3, sl
 800e110:	732b      	strb	r3, [r5, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e112:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e114:	612b      	str	r3, [r5, #16]
					if( eState == eSuspended )
 800e116:	4653      	mov	r3, sl
 800e118:	2b03      	cmp	r3, #3
 800e11a:	d018      	beq.n	800e14e <prvListTaskWithinSingleList.part.1+0x7e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e11c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800e11e:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e120:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e122:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e124:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e126:	7813      	ldrb	r3, [r2, #0]
 800e128:	2ba5      	cmp	r3, #165	; 0xa5
 800e12a:	d11d      	bne.n	800e168 <prvListTaskWithinSingleList.part.1+0x98>
	uint32_t ulCount = 0U;
 800e12c:	2300      	movs	r3, #0
			ulCount++;
 800e12e:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e130:	5cd4      	ldrb	r4, [r2, r3]
 800e132:	2ca5      	cmp	r4, #165	; 0xa5
 800e134:	d0fb      	beq.n	800e12e <prvListTaskWithinSingleList.part.1+0x5e>
 800e136:	089b      	lsrs	r3, r3, #2
 800e138:	b29b      	uxth	r3, r3
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e13a:	83ab      	strh	r3, [r5, #28]
				uxTask++;
 800e13c:	3001      	adds	r0, #1
 800e13e:	3520      	adds	r5, #32
			} while( pxNextTCB != pxFirstTCB );
 800e140:	45b0      	cmp	r8, r6
 800e142:	d1d9      	bne.n	800e0f8 <prvListTaskWithinSingleList.part.1+0x28>
	}
 800e144:	bc1c      	pop	{r2, r3, r4}
 800e146:	4690      	mov	r8, r2
 800e148:	4699      	mov	r9, r3
 800e14a:	46a2      	mov	sl, r4
 800e14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e14e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800e150:	2b00      	cmp	r3, #0
 800e152:	d0e3      	beq.n	800e11c <prvListTaskWithinSingleList.part.1+0x4c>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e154:	464b      	mov	r3, r9
 800e156:	732b      	strb	r3, [r5, #12]
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e158:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800e15a:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e15c:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e15e:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e160:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e162:	7813      	ldrb	r3, [r2, #0]
 800e164:	2ba5      	cmp	r3, #165	; 0xa5
 800e166:	d0e1      	beq.n	800e12c <prvListTaskWithinSingleList.part.1+0x5c>
 800e168:	2300      	movs	r3, #0
 800e16a:	e7e6      	b.n	800e13a <prvListTaskWithinSingleList.part.1+0x6a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e16c:	68cf      	ldr	r7, [r1, #12]
 800e16e:	604f      	str	r7, [r1, #4]
 800e170:	e7c6      	b.n	800e100 <prvListTaskWithinSingleList.part.1+0x30>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e172:	68cf      	ldr	r7, [r1, #12]
 800e174:	e7ba      	b.n	800e0ec <prvListTaskWithinSingleList.part.1+0x1c>
 800e176:	46c0      	nop			; (mov r8, r8)

0800e178 <prvResetNextTaskUnblockTime.part.2>:
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e178:	4b03      	ldr	r3, [pc, #12]	; (800e188 <prvResetNextTaskUnblockTime.part.2+0x10>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e17e:	68db      	ldr	r3, [r3, #12]
 800e180:	685a      	ldr	r2, [r3, #4]
 800e182:	4b02      	ldr	r3, [pc, #8]	; (800e18c <prvResetNextTaskUnblockTime.part.2+0x14>)
 800e184:	601a      	str	r2, [r3, #0]
}
 800e186:	4770      	bx	lr
 800e188:	20002238 	.word	0x20002238
 800e18c:	200000c0 	.word	0x200000c0

0800e190 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e190:	4b0c      	ldr	r3, [pc, #48]	; (800e1c4 <prvAddCurrentTaskToDelayedList+0x34>)
{
 800e192:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e194:	685a      	ldr	r2, [r3, #4]
{
 800e196:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e198:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800e19a:	689a      	ldr	r2, [r3, #8]
 800e19c:	4282      	cmp	r2, r0
 800e19e:	d80a      	bhi.n	800e1b6 <prvAddCurrentTaskToDelayedList+0x26>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e1a0:	6818      	ldr	r0, [r3, #0]
 800e1a2:	6859      	ldr	r1, [r3, #4]
 800e1a4:	3104      	adds	r1, #4
 800e1a6:	f7ff fc05 	bl	800d9b4 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e1aa:	4b07      	ldr	r3, [pc, #28]	; (800e1c8 <prvAddCurrentTaskToDelayedList+0x38>)
 800e1ac:	681a      	ldr	r2, [r3, #0]
 800e1ae:	42a2      	cmp	r2, r4
 800e1b0:	d900      	bls.n	800e1b4 <prvAddCurrentTaskToDelayedList+0x24>
			xNextTaskUnblockTime = xTimeToWake;
 800e1b2:	601c      	str	r4, [r3, #0]
}
 800e1b4:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e1b6:	68d8      	ldr	r0, [r3, #12]
 800e1b8:	6859      	ldr	r1, [r3, #4]
 800e1ba:	3104      	adds	r1, #4
 800e1bc:	f7ff fbfa 	bl	800d9b4 <vListInsert>
 800e1c0:	e7f8      	b.n	800e1b4 <prvAddCurrentTaskToDelayedList+0x24>
 800e1c2:	46c0      	nop			; (mov r8, r8)
 800e1c4:	20002238 	.word	0x20002238
 800e1c8:	200000c0 	.word	0x200000c0

0800e1cc <xTaskGenericCreate.part.5>:
BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 800e1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1ce:	464f      	mov	r7, r9
 800e1d0:	4646      	mov	r6, r8
 800e1d2:	46d6      	mov	lr, sl
 800e1d4:	b5c0      	push	{r6, r7, lr}
 800e1d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e1d8:	4680      	mov	r8, r0
 800e1da:	000c      	movs	r4, r1
 800e1dc:	0015      	movs	r5, r2
 800e1de:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1e0:	2f00      	cmp	r7, #0
 800e1e2:	d100      	bne.n	800e1e6 <xTaskGenericCreate.part.5+0x1a>
 800e1e4:	e0ab      	b.n	800e33e <xTaskGenericCreate.part.5+0x172>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e1e6:	2060      	movs	r0, #96	; 0x60
 800e1e8:	f001 f8c4 	bl	800f374 <pvPortMalloc>
 800e1ec:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800e1ee:	d100      	bne.n	800e1f2 <xTaskGenericCreate.part.5+0x26>
 800e1f0:	e0ae      	b.n	800e350 <xTaskGenericCreate.part.5+0x184>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e1f2:	00ad      	lsls	r5, r5, #2
				pxNewTCB->pxStack = pxStack;
 800e1f4:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e1f6:	002a      	movs	r2, r5
 800e1f8:	0038      	movs	r0, r7
 800e1fa:	21a5      	movs	r1, #165	; 0xa5
 800e1fc:	f004 fd8a 	bl	8012d14 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e200:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800e202:	1f2f      	subs	r7, r5, #4
 800e204:	469c      	mov	ip, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e206:	2307      	movs	r3, #7
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e208:	4467      	add	r7, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e20a:	439f      	bics	r7, r3
 800e20c:	0030      	movs	r0, r6
 800e20e:	0033      	movs	r3, r6
 800e210:	3041      	adds	r0, #65	; 0x41
 800e212:	3334      	adds	r3, #52	; 0x34
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e214:	7822      	ldrb	r2, [r4, #0]
 800e216:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 800e218:	7822      	ldrb	r2, [r4, #0]
 800e21a:	2a00      	cmp	r2, #0
 800e21c:	d003      	beq.n	800e226 <xTaskGenericCreate.part.5+0x5a>
 800e21e:	3301      	adds	r3, #1
 800e220:	3401      	adds	r4, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e222:	4298      	cmp	r0, r3
 800e224:	d1f6      	bne.n	800e214 <xTaskGenericCreate.part.5+0x48>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e226:	2340      	movs	r3, #64	; 0x40
 800e228:	2200      	movs	r2, #0
 800e22a:	9d08      	ldr	r5, [sp, #32]
 800e22c:	54f2      	strb	r2, [r6, r3]
 800e22e:	2d06      	cmp	r5, #6
 800e230:	d84f      	bhi.n	800e2d2 <xTaskGenericCreate.part.5+0x106>
		pxTCB->uxMutexesHeld = 0;
 800e232:	2400      	movs	r4, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e234:	1d33      	adds	r3, r6, #4
 800e236:	0018      	movs	r0, r3
	pxTCB->uxPriority = uxPriority;
 800e238:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800e23a:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800e23c:	6534      	str	r4, [r6, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e23e:	469a      	mov	sl, r3
 800e240:	f7ff fba8 	bl	800d994 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800e244:	0030      	movs	r0, r6
 800e246:	3018      	adds	r0, #24
 800e248:	f7ff fba4 	bl	800d994 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e24c:	2307      	movs	r3, #7
 800e24e:	1b5b      	subs	r3, r3, r5
 800e250:	61b3      	str	r3, [r6, #24]
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e252:	235c      	movs	r3, #92	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800e254:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800e256:	6276      	str	r6, [r6, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800e258:	6574      	str	r4, [r6, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800e25a:	65b4      	str	r4, [r6, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e25c:	464a      	mov	r2, r9
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e25e:	54f4      	strb	r4, [r6, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e260:	4641      	mov	r1, r8
 800e262:	0038      	movs	r0, r7
 800e264:	f000 ffc0 	bl	800f1e8 <pxPortInitialiseStack>
		if( ( void * ) pxCreatedTask != NULL )
 800e268:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e26a:	6030      	str	r0, [r6, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d000      	beq.n	800e272 <xTaskGenericCreate.part.5+0xa6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e270:	601e      	str	r6, [r3, #0]
		taskENTER_CRITICAL();
 800e272:	f001 f801 	bl	800f278 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800e276:	4c39      	ldr	r4, [pc, #228]	; (800e35c <xTaskGenericCreate.part.5+0x190>)
 800e278:	6923      	ldr	r3, [r4, #16]
 800e27a:	3301      	adds	r3, #1
 800e27c:	6123      	str	r3, [r4, #16]
			if( pxCurrentTCB == NULL )
 800e27e:	6863      	ldr	r3, [r4, #4]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d02f      	beq.n	800e2e4 <xTaskGenericCreate.part.5+0x118>
				if( xSchedulerRunning == pdFALSE )
 800e284:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e286:	2b00      	cmp	r3, #0
 800e288:	d025      	beq.n	800e2d6 <xTaskGenericCreate.part.5+0x10a>
 800e28a:	4d35      	ldr	r5, [pc, #212]	; (800e360 <xTaskGenericCreate.part.5+0x194>)
			uxTaskNumber++;
 800e28c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
			prvAddTaskToReadyList( pxNewTCB );
 800e28e:	4a35      	ldr	r2, [pc, #212]	; (800e364 <xTaskGenericCreate.part.5+0x198>)
			uxTaskNumber++;
 800e290:	3301      	adds	r3, #1
 800e292:	67e3      	str	r3, [r4, #124]	; 0x7c
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e294:	6473      	str	r3, [r6, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800e296:	6811      	ldr	r1, [r2, #0]
 800e298:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e29a:	428b      	cmp	r3, r1
 800e29c:	d817      	bhi.n	800e2ce <xTaskGenericCreate.part.5+0x102>
 800e29e:	0098      	lsls	r0, r3, #2
 800e2a0:	18c0      	adds	r0, r0, r3
 800e2a2:	0080      	lsls	r0, r0, #2
 800e2a4:	1828      	adds	r0, r5, r0
 800e2a6:	4651      	mov	r1, sl
 800e2a8:	f7ff fb78 	bl	800d99c <vListInsertEnd>
		taskEXIT_CRITICAL();
 800e2ac:	f000 fff0 	bl	800f290 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e2b0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
			xReturn = pdPASS;
 800e2b2:	2501      	movs	r5, #1
		if( xSchedulerRunning != pdFALSE )
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d004      	beq.n	800e2c2 <xTaskGenericCreate.part.5+0xf6>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800e2b8:	6863      	ldr	r3, [r4, #4]
 800e2ba:	9a08      	ldr	r2, [sp, #32]
 800e2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d83a      	bhi.n	800e338 <xTaskGenericCreate.part.5+0x16c>
}
 800e2c2:	0028      	movs	r0, r5
 800e2c4:	bc1c      	pop	{r2, r3, r4}
 800e2c6:	4690      	mov	r8, r2
 800e2c8:	4699      	mov	r9, r3
 800e2ca:	46a2      	mov	sl, r4
 800e2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvAddTaskToReadyList( pxNewTCB );
 800e2ce:	6013      	str	r3, [r2, #0]
 800e2d0:	e7e5      	b.n	800e29e <xTaskGenericCreate.part.5+0xd2>
 800e2d2:	2506      	movs	r5, #6
 800e2d4:	e7ad      	b.n	800e232 <xTaskGenericCreate.part.5+0x66>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800e2d6:	6863      	ldr	r3, [r4, #4]
 800e2d8:	9a08      	ldr	r2, [sp, #32]
 800e2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d3d4      	bcc.n	800e28a <xTaskGenericCreate.part.5+0xbe>
						pxCurrentTCB = pxNewTCB;
 800e2e0:	6066      	str	r6, [r4, #4]
 800e2e2:	e7d2      	b.n	800e28a <xTaskGenericCreate.part.5+0xbe>
				pxCurrentTCB =  pxNewTCB;
 800e2e4:	6066      	str	r6, [r4, #4]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e2e6:	6923      	ldr	r3, [r4, #16]
 800e2e8:	4d1d      	ldr	r5, [pc, #116]	; (800e360 <xTaskGenericCreate.part.5+0x194>)
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	d1ce      	bne.n	800e28c <xTaskGenericCreate.part.5+0xc0>
 800e2ee:	238c      	movs	r3, #140	; 0x8c
 800e2f0:	4698      	mov	r8, r3
 800e2f2:	002f      	movs	r7, r5
 800e2f4:	44a8      	add	r8, r5
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e2f6:	0038      	movs	r0, r7
 800e2f8:	3714      	adds	r7, #20
 800e2fa:	f7ff fb3f 	bl	800d97c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2fe:	45b8      	cmp	r8, r7
 800e300:	d1f9      	bne.n	800e2f6 <xTaskGenericCreate.part.5+0x12a>
	vListInitialise( &xDelayedTaskList1 );
 800e302:	2314      	movs	r3, #20
 800e304:	4698      	mov	r8, r3
	vListInitialise( &xDelayedTaskList2 );
 800e306:	0027      	movs	r7, r4
	vListInitialise( &xDelayedTaskList1 );
 800e308:	44a0      	add	r8, r4
 800e30a:	4640      	mov	r0, r8
	vListInitialise( &xDelayedTaskList2 );
 800e30c:	3728      	adds	r7, #40	; 0x28
	vListInitialise( &xDelayedTaskList1 );
 800e30e:	f7ff fb35 	bl	800d97c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e312:	0038      	movs	r0, r7
 800e314:	f7ff fb32 	bl	800d97c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e318:	0020      	movs	r0, r4
 800e31a:	303c      	adds	r0, #60	; 0x3c
 800e31c:	f7ff fb2e 	bl	800d97c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e320:	0020      	movs	r0, r4
 800e322:	3050      	adds	r0, #80	; 0x50
 800e324:	f7ff fb2a 	bl	800d97c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e328:	0020      	movs	r0, r4
 800e32a:	3064      	adds	r0, #100	; 0x64
 800e32c:	f7ff fb26 	bl	800d97c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e330:	4643      	mov	r3, r8
 800e332:	6023      	str	r3, [r4, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e334:	60e7      	str	r7, [r4, #12]
 800e336:	e7a9      	b.n	800e28c <xTaskGenericCreate.part.5+0xc0>
				taskYIELD_IF_USING_PREEMPTION();
 800e338:	f000 ff92 	bl	800f260 <vPortYield>
 800e33c:	e7c1      	b.n	800e2c2 <xTaskGenericCreate.part.5+0xf6>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e33e:	0090      	lsls	r0, r2, #2
 800e340:	f001 f818 	bl	800f374 <pvPortMalloc>
 800e344:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 800e346:	d000      	beq.n	800e34a <xTaskGenericCreate.part.5+0x17e>
 800e348:	e74d      	b.n	800e1e6 <xTaskGenericCreate.part.5+0x1a>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e34a:	2501      	movs	r5, #1
 800e34c:	426d      	negs	r5, r5
 800e34e:	e7b8      	b.n	800e2c2 <xTaskGenericCreate.part.5+0xf6>
 800e350:	2501      	movs	r5, #1
				vPortFree( pxStack );
 800e352:	0038      	movs	r0, r7
 800e354:	f001 f88a 	bl	800f46c <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e358:	426d      	negs	r5, r5
 800e35a:	e7b2      	b.n	800e2c2 <xTaskGenericCreate.part.5+0xf6>
 800e35c:	20002238 	.word	0x20002238
 800e360:	200022d4 	.word	0x200022d4
 800e364:	200022b8 	.word	0x200022b8

0800e368 <vTaskSwitchContext.part.6>:
		xYieldPending = pdFALSE;
 800e368:	2300      	movs	r3, #0
void vTaskSwitchContext( void )
 800e36a:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
 800e36c:	4d26      	ldr	r5, [pc, #152]	; (800e408 <vTaskSwitchContext.part.6+0xa0>)
 800e36e:	606b      	str	r3, [r5, #4]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e370:	f7fa f822 	bl	80083b8 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e374:	68ab      	ldr	r3, [r5, #8]
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e376:	4c25      	ldr	r4, [pc, #148]	; (800e40c <vTaskSwitchContext.part.6+0xa4>)
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e378:	4298      	cmp	r0, r3
 800e37a:	d904      	bls.n	800e386 <vTaskSwitchContext.part.6+0x1e>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e37c:	6862      	ldr	r2, [r4, #4]
 800e37e:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800e380:	1acb      	subs	r3, r1, r3
 800e382:	181b      	adds	r3, r3, r0
 800e384:	6553      	str	r3, [r2, #84]	; 0x54
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e386:	6862      	ldr	r2, [r4, #4]
 800e388:	6863      	ldr	r3, [r4, #4]
 800e38a:	6812      	ldr	r2, [r2, #0]
 800e38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				ulTaskSwitchedInTime = ulTotalRunTime;
 800e38e:	60a8      	str	r0, [r5, #8]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e390:	429a      	cmp	r2, r3
 800e392:	d804      	bhi.n	800e39e <vTaskSwitchContext.part.6+0x36>
 800e394:	6860      	ldr	r0, [r4, #4]
 800e396:	6861      	ldr	r1, [r4, #4]
 800e398:	3134      	adds	r1, #52	; 0x34
 800e39a:	f7fe fc69 	bl	800cc70 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e39e:	6863      	ldr	r3, [r4, #4]
 800e3a0:	2214      	movs	r2, #20
 800e3a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e3a4:	491a      	ldr	r1, [pc, #104]	; (800e410 <vTaskSwitchContext.part.6+0xa8>)
 800e3a6:	f004 fc9d 	bl	8012ce4 <memcmp>
 800e3aa:	2800      	cmp	r0, #0
 800e3ac:	d004      	beq.n	800e3b8 <vTaskSwitchContext.part.6+0x50>
 800e3ae:	6860      	ldr	r0, [r4, #4]
 800e3b0:	6861      	ldr	r1, [r4, #4]
 800e3b2:	3134      	adds	r1, #52	; 0x34
 800e3b4:	f7fe fc5c 	bl	800cc70 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e3b8:	6829      	ldr	r1, [r5, #0]
 800e3ba:	4a16      	ldr	r2, [pc, #88]	; (800e414 <vTaskSwitchContext.part.6+0xac>)
 800e3bc:	e006      	b.n	800e3cc <vTaskSwitchContext.part.6+0x64>
 800e3be:	682b      	ldr	r3, [r5, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d018      	beq.n	800e3f6 <vTaskSwitchContext.part.6+0x8e>
 800e3c4:	682b      	ldr	r3, [r5, #0]
 800e3c6:	3b01      	subs	r3, #1
 800e3c8:	602b      	str	r3, [r5, #0]
 800e3ca:	6829      	ldr	r1, [r5, #0]
 800e3cc:	008b      	lsls	r3, r1, #2
 800e3ce:	185b      	adds	r3, r3, r1
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	58d3      	ldr	r3, [r2, r3]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d0f2      	beq.n	800e3be <vTaskSwitchContext.part.6+0x56>
 800e3d8:	6828      	ldr	r0, [r5, #0]
 800e3da:	0083      	lsls	r3, r0, #2
 800e3dc:	181b      	adds	r3, r3, r0
 800e3de:	009b      	lsls	r3, r3, #2
 800e3e0:	18d5      	adds	r5, r2, r3
 800e3e2:	6869      	ldr	r1, [r5, #4]
 800e3e4:	3308      	adds	r3, #8
 800e3e6:	6849      	ldr	r1, [r1, #4]
 800e3e8:	18d3      	adds	r3, r2, r3
 800e3ea:	6069      	str	r1, [r5, #4]
 800e3ec:	4299      	cmp	r1, r3
 800e3ee:	d004      	beq.n	800e3fa <vTaskSwitchContext.part.6+0x92>
 800e3f0:	68cb      	ldr	r3, [r1, #12]
 800e3f2:	6063      	str	r3, [r4, #4]
}
 800e3f4:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e3f6:	b672      	cpsid	i
 800e3f8:	e7fe      	b.n	800e3f8 <vTaskSwitchContext.part.6+0x90>
 800e3fa:	2314      	movs	r3, #20
 800e3fc:	4343      	muls	r3, r0
 800e3fe:	6849      	ldr	r1, [r1, #4]
 800e400:	18d2      	adds	r2, r2, r3
 800e402:	6051      	str	r1, [r2, #4]
 800e404:	e7f4      	b.n	800e3f0 <vTaskSwitchContext.part.6+0x88>
 800e406:	46c0      	nop			; (mov r8, r8)
 800e408:	200022b8 	.word	0x200022b8
 800e40c:	20002238 	.word	0x20002238
 800e410:	08017b4c 	.word	0x08017b4c
 800e414:	200022d4 	.word	0x200022d4

0800e418 <xTaskGenericCreate>:
{
 800e418:	b530      	push	{r4, r5, lr}
 800e41a:	b085      	sub	sp, #20
 800e41c:	9c08      	ldr	r4, [sp, #32]
	configASSERT( pxTaskCode );
 800e41e:	2800      	cmp	r0, #0
 800e420:	d003      	beq.n	800e42a <xTaskGenericCreate+0x12>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800e422:	2c06      	cmp	r4, #6
 800e424:	d903      	bls.n	800e42e <xTaskGenericCreate+0x16>
 800e426:	b672      	cpsid	i
 800e428:	e7fe      	b.n	800e428 <xTaskGenericCreate+0x10>
	configASSERT( pxTaskCode );
 800e42a:	b672      	cpsid	i
 800e42c:	e7fe      	b.n	800e42c <xTaskGenericCreate+0x14>
 800e42e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e430:	9400      	str	r4, [sp, #0]
 800e432:	9502      	str	r5, [sp, #8]
 800e434:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e436:	9501      	str	r5, [sp, #4]
 800e438:	f7ff fec8 	bl	800e1cc <xTaskGenericCreate.part.5>
}
 800e43c:	b005      	add	sp, #20
 800e43e:	bd30      	pop	{r4, r5, pc}

0800e440 <uxTaskPriorityGet>:
	{
 800e440:	b510      	push	{r4, lr}
 800e442:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800e444:	f000 ff18 	bl	800f278 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e448:	2c00      	cmp	r4, #0
 800e44a:	d101      	bne.n	800e450 <uxTaskPriorityGet+0x10>
 800e44c:	4b03      	ldr	r3, [pc, #12]	; (800e45c <uxTaskPriorityGet+0x1c>)
 800e44e:	685c      	ldr	r4, [r3, #4]
			uxReturn = pxTCB->uxPriority;
 800e450:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800e452:	f000 ff1d 	bl	800f290 <vPortExitCritical>
	}
 800e456:	0020      	movs	r0, r4
 800e458:	bd10      	pop	{r4, pc}
 800e45a:	46c0      	nop			; (mov r8, r8)
 800e45c:	20002238 	.word	0x20002238

0800e460 <vTaskPrioritySet>:
	{
 800e460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e462:	0004      	movs	r4, r0
 800e464:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800e466:	2906      	cmp	r1, #6
 800e468:	d901      	bls.n	800e46e <vTaskPrioritySet+0xe>
 800e46a:	b672      	cpsid	i
 800e46c:	e7fe      	b.n	800e46c <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800e46e:	f000 ff03 	bl	800f278 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e472:	2c00      	cmp	r4, #0
 800e474:	d101      	bne.n	800e47a <vTaskPrioritySet+0x1a>
 800e476:	4b20      	ldr	r3, [pc, #128]	; (800e4f8 <vTaskPrioritySet+0x98>)
 800e478:	685c      	ldr	r4, [r3, #4]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e47a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800e47c:	4295      	cmp	r5, r2
 800e47e:	d01f      	beq.n	800e4c0 <vTaskPrioritySet+0x60>
					if( pxTCB != pxCurrentTCB )
 800e480:	4b1d      	ldr	r3, [pc, #116]	; (800e4f8 <vTaskPrioritySet+0x98>)
				if( uxNewPriority > uxCurrentBasePriority )
 800e482:	d931      	bls.n	800e4e8 <vTaskPrioritySet+0x88>
					if( pxTCB != pxCurrentTCB )
 800e484:	6859      	ldr	r1, [r3, #4]
 800e486:	42a1      	cmp	r1, r4
 800e488:	d033      	beq.n	800e4f2 <vTaskPrioritySet+0x92>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800e48a:	2600      	movs	r6, #0
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e490:	429d      	cmp	r5, r3
 800e492:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e494:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800e496:	428a      	cmp	r2, r1
 800e498:	d100      	bne.n	800e49c <vTaskPrioritySet+0x3c>
						pxTCB->uxPriority = uxNewPriority;
 800e49a:	62e5      	str	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e49c:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxBasePriority = uxNewPriority;
 800e49e:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	db02      	blt.n	800e4aa <vTaskPrioritySet+0x4a>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4a4:	2207      	movs	r2, #7
 800e4a6:	1b55      	subs	r5, r2, r5
 800e4a8:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e4aa:	2314      	movs	r3, #20
 800e4ac:	434b      	muls	r3, r1
 800e4ae:	4d13      	ldr	r5, [pc, #76]	; (800e4fc <vTaskPrioritySet+0x9c>)
 800e4b0:	6962      	ldr	r2, [r4, #20]
 800e4b2:	18eb      	adds	r3, r5, r3
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d006      	beq.n	800e4c6 <vTaskPrioritySet+0x66>
				if( xYieldRequired == pdTRUE )
 800e4b8:	2e01      	cmp	r6, #1
 800e4ba:	d101      	bne.n	800e4c0 <vTaskPrioritySet+0x60>
					taskYIELD_IF_USING_PREEMPTION();
 800e4bc:	f000 fed0 	bl	800f260 <vPortYield>
		taskEXIT_CRITICAL();
 800e4c0:	f000 fee6 	bl	800f290 <vPortExitCritical>
	}
 800e4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e4c6:	1d27      	adds	r7, r4, #4
 800e4c8:	0038      	movs	r0, r7
 800e4ca:	f7ff fa8b 	bl	800d9e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e4ce:	4a0c      	ldr	r2, [pc, #48]	; (800e500 <vTaskPrioritySet+0xa0>)
 800e4d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e4d2:	6811      	ldr	r1, [r2, #0]
 800e4d4:	428b      	cmp	r3, r1
 800e4d6:	d900      	bls.n	800e4da <vTaskPrioritySet+0x7a>
 800e4d8:	6013      	str	r3, [r2, #0]
 800e4da:	2014      	movs	r0, #20
 800e4dc:	4358      	muls	r0, r3
 800e4de:	0039      	movs	r1, r7
 800e4e0:	1828      	adds	r0, r5, r0
 800e4e2:	f7ff fa5b 	bl	800d99c <vListInsertEnd>
 800e4e6:	e7e7      	b.n	800e4b8 <vTaskPrioritySet+0x58>
				else if( pxTCB == pxCurrentTCB )
 800e4e8:	685e      	ldr	r6, [r3, #4]
 800e4ea:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800e4ec:	4273      	negs	r3, r6
 800e4ee:	415e      	adcs	r6, r3
 800e4f0:	e7d0      	b.n	800e494 <vTaskPrioritySet+0x34>
	BaseType_t xYieldRequired = pdFALSE;
 800e4f2:	2600      	movs	r6, #0
 800e4f4:	e7ce      	b.n	800e494 <vTaskPrioritySet+0x34>
 800e4f6:	46c0      	nop			; (mov r8, r8)
 800e4f8:	20002238 	.word	0x20002238
 800e4fc:	200022d4 	.word	0x200022d4
 800e500:	200022b8 	.word	0x200022b8

0800e504 <vTaskStartScheduler>:
{
 800e504:	b510      	push	{r4, lr}
 800e506:	2400      	movs	r4, #0
 800e508:	b084      	sub	sp, #16
 800e50a:	9402      	str	r4, [sp, #8]
 800e50c:	9401      	str	r4, [sp, #4]
 800e50e:	9400      	str	r4, [sp, #0]
 800e510:	2300      	movs	r3, #0
 800e512:	22a0      	movs	r2, #160	; 0xa0
 800e514:	490b      	ldr	r1, [pc, #44]	; (800e544 <vTaskStartScheduler+0x40>)
 800e516:	480c      	ldr	r0, [pc, #48]	; (800e548 <vTaskStartScheduler+0x44>)
 800e518:	f7ff fe58 	bl	800e1cc <xTaskGenericCreate.part.5>
		if( xReturn == pdPASS )
 800e51c:	2801      	cmp	r0, #1
 800e51e:	d003      	beq.n	800e528 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800e520:	2800      	cmp	r0, #0
 800e522:	d10d      	bne.n	800e540 <vTaskStartScheduler+0x3c>
 800e524:	b672      	cpsid	i
 800e526:	e7fe      	b.n	800e526 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800e528:	f000 fcc0 	bl	800eeac <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e52c:	2801      	cmp	r0, #1
 800e52e:	d1f7      	bne.n	800e520 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800e530:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800e532:	4b06      	ldr	r3, [pc, #24]	; (800e54c <vTaskStartScheduler+0x48>)
 800e534:	6798      	str	r0, [r3, #120]	; 0x78
		xTickCount = ( TickType_t ) 0U;
 800e536:	609c      	str	r4, [r3, #8]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e538:	f7f9 ff2e 	bl	8008398 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800e53c:	f000 fe66 	bl	800f20c <xPortStartScheduler>
}
 800e540:	b004      	add	sp, #16
 800e542:	bd10      	pop	{r4, pc}
 800e544:	0801a354 	.word	0x0801a354
 800e548:	0800e795 	.word	0x0800e795
 800e54c:	20002238 	.word	0x20002238

0800e550 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e550:	4a02      	ldr	r2, [pc, #8]	; (800e55c <vTaskSuspendAll+0xc>)
 800e552:	6913      	ldr	r3, [r2, #16]
 800e554:	3301      	adds	r3, #1
 800e556:	6113      	str	r3, [r2, #16]
}
 800e558:	4770      	bx	lr
 800e55a:	46c0      	nop			; (mov r8, r8)
 800e55c:	200022b8 	.word	0x200022b8

0800e560 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e560:	4b01      	ldr	r3, [pc, #4]	; (800e568 <xTaskGetTickCount+0x8>)
 800e562:	6898      	ldr	r0, [r3, #8]
}
 800e564:	4770      	bx	lr
 800e566:	46c0      	nop			; (mov r8, r8)
 800e568:	20002238 	.word	0x20002238

0800e56c <xTaskGetTickCountFromISR>:
 800e56c:	4b01      	ldr	r3, [pc, #4]	; (800e574 <xTaskGetTickCountFromISR+0x8>)
 800e56e:	6898      	ldr	r0, [r3, #8]
 800e570:	4770      	bx	lr
 800e572:	46c0      	nop			; (mov r8, r8)
 800e574:	20002238 	.word	0x20002238

0800e578 <xTaskIncrementTick>:
{
 800e578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e57a:	4645      	mov	r5, r8
 800e57c:	46de      	mov	lr, fp
 800e57e:	4657      	mov	r7, sl
 800e580:	464e      	mov	r6, r9
 800e582:	b5e0      	push	{r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e584:	4d3e      	ldr	r5, [pc, #248]	; (800e680 <xTaskIncrementTick+0x108>)
 800e586:	692b      	ldr	r3, [r5, #16]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d119      	bne.n	800e5c0 <xTaskIncrementTick+0x48>
		++xTickCount;
 800e58c:	4c3d      	ldr	r4, [pc, #244]	; (800e684 <xTaskIncrementTick+0x10c>)
 800e58e:	68a3      	ldr	r3, [r4, #8]
 800e590:	3301      	adds	r3, #1
 800e592:	60a3      	str	r3, [r4, #8]
			const TickType_t xConstTickCount = xTickCount;
 800e594:	68a3      	ldr	r3, [r4, #8]
 800e596:	469a      	mov	sl, r3
			if( xConstTickCount == ( TickType_t ) 0U )
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d020      	beq.n	800e5de <xTaskIncrementTick+0x66>
 800e59c:	4f3a      	ldr	r7, [pc, #232]	; (800e688 <xTaskIncrementTick+0x110>)
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e59e:	683b      	ldr	r3, [r7, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e5a0:	2600      	movs	r6, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e5a2:	4553      	cmp	r3, sl
 800e5a4:	d921      	bls.n	800e5ea <xTaskIncrementTick+0x72>
 800e5a6:	4b39      	ldr	r3, [pc, #228]	; (800e68c <xTaskIncrementTick+0x114>)
 800e5a8:	4699      	mov	r9, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e5aa:	6863      	ldr	r3, [r4, #4]
 800e5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ae:	0093      	lsls	r3, r2, #2
 800e5b0:	189b      	adds	r3, r3, r2
 800e5b2:	464a      	mov	r2, r9
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	58d3      	ldr	r3, [r2, r3]
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d905      	bls.n	800e5c8 <xTaskIncrementTick+0x50>
				xSwitchRequired = pdTRUE;
 800e5bc:	2601      	movs	r6, #1
 800e5be:	e003      	b.n	800e5c8 <xTaskIncrementTick+0x50>
BaseType_t xSwitchRequired = pdFALSE;
 800e5c0:	2600      	movs	r6, #0
		++uxPendedTicks;
 800e5c2:	69ab      	ldr	r3, [r5, #24]
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	61ab      	str	r3, [r5, #24]
		if( xYieldPending != pdFALSE )
 800e5c8:	686b      	ldr	r3, [r5, #4]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d000      	beq.n	800e5d0 <xTaskIncrementTick+0x58>
			xSwitchRequired = pdTRUE;
 800e5ce:	2601      	movs	r6, #1
}
 800e5d0:	0030      	movs	r0, r6
 800e5d2:	bc3c      	pop	{r2, r3, r4, r5}
 800e5d4:	4690      	mov	r8, r2
 800e5d6:	4699      	mov	r9, r3
 800e5d8:	46a2      	mov	sl, r4
 800e5da:	46ab      	mov	fp, r5
 800e5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				taskSWITCH_DELAYED_LISTS();
 800e5de:	6823      	ldr	r3, [r4, #0]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d039      	beq.n	800e65a <xTaskIncrementTick+0xe2>
 800e5e6:	b672      	cpsid	i
 800e5e8:	e7fe      	b.n	800e5e8 <xTaskIncrementTick+0x70>
 800e5ea:	4b28      	ldr	r3, [pc, #160]	; (800e68c <xTaskIncrementTick+0x114>)
 800e5ec:	4699      	mov	r9, r3
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5ee:	6823      	ldr	r3, [r4, #0]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d02c      	beq.n	800e650 <xTaskIncrementTick+0xd8>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e5f6:	6823      	ldr	r3, [r4, #0]
 800e5f8:	68db      	ldr	r3, [r3, #12]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	4698      	mov	r8, r3
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800e5fe:	685b      	ldr	r3, [r3, #4]
						if( xConstTickCount < xItemValue )
 800e600:	459a      	cmp	sl, r3
 800e602:	d328      	bcc.n	800e656 <xTaskIncrementTick+0xde>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e604:	2304      	movs	r3, #4
 800e606:	4443      	add	r3, r8
 800e608:	0018      	movs	r0, r3
 800e60a:	469b      	mov	fp, r3
 800e60c:	f7ff f9ea 	bl	800d9e4 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e610:	4643      	mov	r3, r8
 800e612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e614:	2b00      	cmp	r3, #0
 800e616:	d003      	beq.n	800e620 <xTaskIncrementTick+0xa8>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e618:	4640      	mov	r0, r8
 800e61a:	3018      	adds	r0, #24
 800e61c:	f7ff f9e2 	bl	800d9e4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e620:	4643      	mov	r3, r8
 800e622:	682a      	ldr	r2, [r5, #0]
 800e624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e626:	4293      	cmp	r3, r2
 800e628:	d900      	bls.n	800e62c <xTaskIncrementTick+0xb4>
 800e62a:	602b      	str	r3, [r5, #0]
 800e62c:	0098      	lsls	r0, r3, #2
 800e62e:	18c0      	adds	r0, r0, r3
 800e630:	0080      	lsls	r0, r0, #2
 800e632:	4448      	add	r0, r9
 800e634:	4659      	mov	r1, fp
 800e636:	f7ff f9b1 	bl	800d99c <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e63a:	4642      	mov	r2, r8
 800e63c:	6863      	ldr	r3, [r4, #4]
 800e63e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e642:	429a      	cmp	r2, r3
 800e644:	d3d3      	bcc.n	800e5ee <xTaskIncrementTick+0x76>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e646:	6823      	ldr	r3, [r4, #0]
								xSwitchRequired = pdTRUE;
 800e648:	2601      	movs	r6, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d1d2      	bne.n	800e5f6 <xTaskIncrementTick+0x7e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800e650:	3b01      	subs	r3, #1
 800e652:	603b      	str	r3, [r7, #0]
						break;
 800e654:	e7a9      	b.n	800e5aa <xTaskIncrementTick+0x32>
							xNextTaskUnblockTime = xItemValue;
 800e656:	603b      	str	r3, [r7, #0]
							break;
 800e658:	e7a7      	b.n	800e5aa <xTaskIncrementTick+0x32>
				taskSWITCH_DELAYED_LISTS();
 800e65a:	6823      	ldr	r3, [r4, #0]
 800e65c:	68e2      	ldr	r2, [r4, #12]
 800e65e:	6022      	str	r2, [r4, #0]
 800e660:	60e3      	str	r3, [r4, #12]
 800e662:	696b      	ldr	r3, [r5, #20]
 800e664:	3301      	adds	r3, #1
 800e666:	616b      	str	r3, [r5, #20]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e668:	6823      	ldr	r3, [r4, #0]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d103      	bne.n	800e678 <xTaskIncrementTick+0x100>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e670:	4f05      	ldr	r7, [pc, #20]	; (800e688 <xTaskIncrementTick+0x110>)
 800e672:	3b01      	subs	r3, #1
 800e674:	603b      	str	r3, [r7, #0]
 800e676:	e792      	b.n	800e59e <xTaskIncrementTick+0x26>
 800e678:	f7ff fd7e 	bl	800e178 <prvResetNextTaskUnblockTime.part.2>
 800e67c:	e78e      	b.n	800e59c <xTaskIncrementTick+0x24>
 800e67e:	46c0      	nop			; (mov r8, r8)
 800e680:	200022b8 	.word	0x200022b8
 800e684:	20002238 	.word	0x20002238
 800e688:	200000c0 	.word	0x200000c0
 800e68c:	200022d4 	.word	0x200022d4

0800e690 <xTaskResumeAll>:
{
 800e690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e692:	46ce      	mov	lr, r9
 800e694:	4647      	mov	r7, r8
	configASSERT( uxSchedulerSuspended );
 800e696:	4c2b      	ldr	r4, [pc, #172]	; (800e744 <xTaskResumeAll+0xb4>)
{
 800e698:	b580      	push	{r7, lr}
	configASSERT( uxSchedulerSuspended );
 800e69a:	6923      	ldr	r3, [r4, #16]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d101      	bne.n	800e6a4 <xTaskResumeAll+0x14>
 800e6a0:	b672      	cpsid	i
 800e6a2:	e7fe      	b.n	800e6a2 <xTaskResumeAll+0x12>
	taskENTER_CRITICAL();
 800e6a4:	f000 fde8 	bl	800f278 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e6a8:	6923      	ldr	r3, [r4, #16]
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	6123      	str	r3, [r4, #16]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6ae:	6923      	ldr	r3, [r4, #16]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d12d      	bne.n	800e710 <xTaskResumeAll+0x80>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e6b4:	4d24      	ldr	r5, [pc, #144]	; (800e748 <xTaskResumeAll+0xb8>)
 800e6b6:	692b      	ldr	r3, [r5, #16]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d029      	beq.n	800e710 <xTaskResumeAll+0x80>
					prvAddTaskToReadyList( pxTCB );
 800e6bc:	4b23      	ldr	r3, [pc, #140]	; (800e74c <xTaskResumeAll+0xbc>)
 800e6be:	4699      	mov	r9, r3
						xYieldPending = pdTRUE;
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	4698      	mov	r8, r3
 800e6c4:	e01a      	b.n	800e6fc <xTaskResumeAll+0x6c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e6c6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800e6c8:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6ca:	0030      	movs	r0, r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e6cc:	1d37      	adds	r7, r6, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6ce:	3018      	adds	r0, #24
 800e6d0:	f7ff f988 	bl	800d9e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e6d4:	0038      	movs	r0, r7
 800e6d6:	f7ff f985 	bl	800d9e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6da:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e6dc:	6822      	ldr	r2, [r4, #0]
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	d900      	bls.n	800e6e4 <xTaskResumeAll+0x54>
 800e6e2:	6023      	str	r3, [r4, #0]
 800e6e4:	0098      	lsls	r0, r3, #2
 800e6e6:	18c0      	adds	r0, r0, r3
 800e6e8:	0080      	lsls	r0, r0, #2
 800e6ea:	4448      	add	r0, r9
 800e6ec:	0039      	movs	r1, r7
 800e6ee:	f7ff f955 	bl	800d99c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6f2:	686b      	ldr	r3, [r5, #4]
 800e6f4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800e6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d211      	bcs.n	800e720 <xTaskResumeAll+0x90>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6fc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d1e1      	bne.n	800e6c6 <xTaskResumeAll+0x36>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e702:	69a3      	ldr	r3, [r4, #24]
							xYieldPending = pdTRUE;
 800e704:	2501      	movs	r5, #1
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e706:	2b00      	cmp	r3, #0
 800e708:	d110      	bne.n	800e72c <xTaskResumeAll+0x9c>
				if( xYieldPending == pdTRUE )
 800e70a:	6864      	ldr	r4, [r4, #4]
 800e70c:	2c01      	cmp	r4, #1
 800e70e:	d00a      	beq.n	800e726 <xTaskResumeAll+0x96>
BaseType_t xAlreadyYielded = pdFALSE;
 800e710:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e712:	f000 fdbd 	bl	800f290 <vPortExitCritical>
}
 800e716:	0020      	movs	r0, r4
 800e718:	bc0c      	pop	{r2, r3}
 800e71a:	4690      	mov	r8, r2
 800e71c:	4699      	mov	r9, r3
 800e71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xYieldPending = pdTRUE;
 800e720:	4643      	mov	r3, r8
 800e722:	6063      	str	r3, [r4, #4]
 800e724:	e7ea      	b.n	800e6fc <xTaskResumeAll+0x6c>
					taskYIELD_IF_USING_PREEMPTION();
 800e726:	f000 fd9b 	bl	800f260 <vPortYield>
 800e72a:	e7f2      	b.n	800e712 <xTaskResumeAll+0x82>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e72c:	69a3      	ldr	r3, [r4, #24]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d0eb      	beq.n	800e70a <xTaskResumeAll+0x7a>
						if( xTaskIncrementTick() != pdFALSE )
 800e732:	f7ff ff21 	bl	800e578 <xTaskIncrementTick>
 800e736:	2800      	cmp	r0, #0
 800e738:	d000      	beq.n	800e73c <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
 800e73a:	6065      	str	r5, [r4, #4]
						--uxPendedTicks;
 800e73c:	69a3      	ldr	r3, [r4, #24]
 800e73e:	3b01      	subs	r3, #1
 800e740:	61a3      	str	r3, [r4, #24]
 800e742:	e7f3      	b.n	800e72c <xTaskResumeAll+0x9c>
 800e744:	200022b8 	.word	0x200022b8
 800e748:	20002238 	.word	0x20002238
 800e74c:	200022d4 	.word	0x200022d4

0800e750 <vTaskDelay>:
	{
 800e750:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e752:	2800      	cmp	r0, #0
 800e754:	d016      	beq.n	800e784 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800e756:	4b0d      	ldr	r3, [pc, #52]	; (800e78c <vTaskDelay+0x3c>)
 800e758:	691a      	ldr	r2, [r3, #16]
 800e75a:	2a00      	cmp	r2, #0
 800e75c:	d001      	beq.n	800e762 <vTaskDelay+0x12>
 800e75e:	b672      	cpsid	i
 800e760:	e7fe      	b.n	800e760 <vTaskDelay+0x10>
	++uxSchedulerSuspended;
 800e762:	691a      	ldr	r2, [r3, #16]
 800e764:	3201      	adds	r2, #1
 800e766:	611a      	str	r2, [r3, #16]
				xTimeToWake = xTickCount + xTicksToDelay;
 800e768:	4b09      	ldr	r3, [pc, #36]	; (800e790 <vTaskDelay+0x40>)
 800e76a:	689c      	ldr	r4, [r3, #8]
 800e76c:	1824      	adds	r4, r4, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e76e:	6858      	ldr	r0, [r3, #4]
 800e770:	3004      	adds	r0, #4
 800e772:	f7ff f937 	bl	800d9e4 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e776:	0020      	movs	r0, r4
 800e778:	f7ff fd0a 	bl	800e190 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e77c:	f7ff ff88 	bl	800e690 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e780:	2800      	cmp	r0, #0
 800e782:	d101      	bne.n	800e788 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800e784:	f000 fd6c 	bl	800f260 <vPortYield>
	}
 800e788:	bd10      	pop	{r4, pc}
 800e78a:	46c0      	nop			; (mov r8, r8)
 800e78c:	200022b8 	.word	0x200022b8
 800e790:	20002238 	.word	0x20002238

0800e794 <prvIdleTask>:
{
 800e794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e796:	4e15      	ldr	r6, [pc, #84]	; (800e7ec <prvIdleTask+0x58>)
 800e798:	4c15      	ldr	r4, [pc, #84]	; (800e7f0 <prvIdleTask+0x5c>)
 800e79a:	4f16      	ldr	r7, [pc, #88]	; (800e7f4 <prvIdleTask+0x60>)
 800e79c:	e007      	b.n	800e7ae <prvIdleTask+0x1a>
	++uxSchedulerSuspended;
 800e79e:	6923      	ldr	r3, [r4, #16]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e7a0:	6d35      	ldr	r5, [r6, #80]	; 0x50
	++uxSchedulerSuspended;
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	6123      	str	r3, [r4, #16]
			( void ) xTaskResumeAll();
 800e7a6:	f7ff ff73 	bl	800e690 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800e7aa:	2d00      	cmp	r5, #0
 800e7ac:	d108      	bne.n	800e7c0 <prvIdleTask+0x2c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e7ae:	68e3      	ldr	r3, [r4, #12]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d1f4      	bne.n	800e79e <prvIdleTask+0xa>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	2b01      	cmp	r3, #1
 800e7b8:	d9f9      	bls.n	800e7ae <prvIdleTask+0x1a>
				taskYIELD();
 800e7ba:	f000 fd51 	bl	800f260 <vPortYield>
 800e7be:	e7f6      	b.n	800e7ae <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
 800e7c0:	f000 fd5a 	bl	800f278 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e7c4:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800e7c6:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e7c8:	1d28      	adds	r0, r5, #4
 800e7ca:	f7ff f90b 	bl	800d9e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e7ce:	6933      	ldr	r3, [r6, #16]
 800e7d0:	3b01      	subs	r3, #1
 800e7d2:	6133      	str	r3, [r6, #16]
					--uxTasksDeleted;
 800e7d4:	68e3      	ldr	r3, [r4, #12]
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	60e3      	str	r3, [r4, #12]
				taskEXIT_CRITICAL();
 800e7da:	f000 fd59 	bl	800f290 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800e7de:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e7e0:	f000 fe44 	bl	800f46c <vPortFree>
		vPortFree( pxTCB );
 800e7e4:	0028      	movs	r0, r5
 800e7e6:	f000 fe41 	bl	800f46c <vPortFree>
 800e7ea:	e7e0      	b.n	800e7ae <prvIdleTask+0x1a>
 800e7ec:	20002238 	.word	0x20002238
 800e7f0:	200022b8 	.word	0x200022b8
 800e7f4:	200022d4 	.word	0x200022d4

0800e7f8 <uxTaskGetSystemState>:
	{
 800e7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7fa:	4647      	mov	r7, r8
 800e7fc:	46ce      	mov	lr, r9
 800e7fe:	4690      	mov	r8, r2
	++uxSchedulerSuspended;
 800e800:	4a33      	ldr	r2, [pc, #204]	; (800e8d0 <uxTaskGetSystemState+0xd8>)
	{
 800e802:	b580      	push	{r7, lr}
	++uxSchedulerSuspended;
 800e804:	6913      	ldr	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e806:	4f33      	ldr	r7, [pc, #204]	; (800e8d4 <uxTaskGetSystemState+0xdc>)
	++uxSchedulerSuspended;
 800e808:	3301      	adds	r3, #1
 800e80a:	6113      	str	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e80c:	693b      	ldr	r3, [r7, #16]
	{
 800e80e:	0006      	movs	r6, r0
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e810:	2500      	movs	r5, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e812:	428b      	cmp	r3, r1
 800e814:	d82c      	bhi.n	800e870 <uxTaskGetSystemState+0x78>
 800e816:	238c      	movs	r3, #140	; 0x8c
 800e818:	425b      	negs	r3, r3
 800e81a:	4699      	mov	r9, r3
 800e81c:	4c2e      	ldr	r4, [pc, #184]	; (800e8d8 <uxTaskGetSystemState+0xe0>)
 800e81e:	2300      	movs	r3, #0
 800e820:	44a1      	add	r9, r4
 800e822:	e002      	b.n	800e82a <uxTaskGetSystemState+0x32>
 800e824:	3c14      	subs	r4, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e826:	454c      	cmp	r4, r9
 800e828:	d00d      	beq.n	800e846 <uxTaskGetSystemState+0x4e>
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e82a:	6822      	ldr	r2, [r4, #0]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e82c:	18f0      	adds	r0, r6, r3
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e82e:	2a00      	cmp	r2, #0
 800e830:	d0f8      	beq.n	800e824 <uxTaskGetSystemState+0x2c>
 800e832:	0021      	movs	r1, r4
 800e834:	2201      	movs	r2, #1
 800e836:	f7ff fc4b 	bl	800e0d0 <prvListTaskWithinSingleList.part.1>
 800e83a:	182d      	adds	r5, r5, r0
 800e83c:	016b      	lsls	r3, r5, #5
 800e83e:	3c14      	subs	r4, #20
 800e840:	18f0      	adds	r0, r6, r3
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e842:	454c      	cmp	r4, r9
 800e844:	d1f1      	bne.n	800e82a <uxTaskGetSystemState+0x32>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e846:	6839      	ldr	r1, [r7, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e848:	680b      	ldr	r3, [r1, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d121      	bne.n	800e892 <uxTaskGetSystemState+0x9a>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e84e:	68f9      	ldr	r1, [r7, #12]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e850:	680b      	ldr	r3, [r1, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d127      	bne.n	800e8a6 <uxTaskGetSystemState+0xae>
 800e856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d12d      	bne.n	800e8b8 <uxTaskGetSystemState+0xc0>
 800e85c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d10d      	bne.n	800e87e <uxTaskGetSystemState+0x86>
					if( pulTotalRunTime != NULL )
 800e862:	4643      	mov	r3, r8
 800e864:	2b00      	cmp	r3, #0
 800e866:	d003      	beq.n	800e870 <uxTaskGetSystemState+0x78>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e868:	f7f9 fda6 	bl	80083b8 <ulMainGetRunTimeCounterValue>
 800e86c:	4643      	mov	r3, r8
 800e86e:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800e870:	f7ff ff0e 	bl	800e690 <xTaskResumeAll>
	}
 800e874:	0028      	movs	r0, r5
 800e876:	bc0c      	pop	{r2, r3}
 800e878:	4690      	mov	r8, r2
 800e87a:	4699      	mov	r9, r3
 800e87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e87e:	0039      	movs	r1, r7
 800e880:	2203      	movs	r2, #3
 800e882:	3164      	adds	r1, #100	; 0x64
 800e884:	f7ff fc24 	bl	800e0d0 <prvListTaskWithinSingleList.part.1>
					if( pulTotalRunTime != NULL )
 800e888:	4643      	mov	r3, r8
 800e88a:	182d      	adds	r5, r5, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d1eb      	bne.n	800e868 <uxTaskGetSystemState+0x70>
 800e890:	e7ee      	b.n	800e870 <uxTaskGetSystemState+0x78>
 800e892:	2202      	movs	r2, #2
 800e894:	f7ff fc1c 	bl	800e0d0 <prvListTaskWithinSingleList.part.1>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e898:	68f9      	ldr	r1, [r7, #12]
 800e89a:	182d      	adds	r5, r5, r0
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e89c:	680b      	ldr	r3, [r1, #0]
 800e89e:	0168      	lsls	r0, r5, #5
 800e8a0:	1830      	adds	r0, r6, r0
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d0d7      	beq.n	800e856 <uxTaskGetSystemState+0x5e>
 800e8a6:	2202      	movs	r2, #2
 800e8a8:	f7ff fc12 	bl	800e0d0 <prvListTaskWithinSingleList.part.1>
 800e8ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8ae:	182d      	adds	r5, r5, r0
 800e8b0:	0168      	lsls	r0, r5, #5
 800e8b2:	1830      	adds	r0, r6, r0
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d0d1      	beq.n	800e85c <uxTaskGetSystemState+0x64>
 800e8b8:	0039      	movs	r1, r7
 800e8ba:	2204      	movs	r2, #4
 800e8bc:	3150      	adds	r1, #80	; 0x50
 800e8be:	f7ff fc07 	bl	800e0d0 <prvListTaskWithinSingleList.part.1>
 800e8c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8c4:	182d      	adds	r5, r5, r0
 800e8c6:	0168      	lsls	r0, r5, #5
 800e8c8:	1830      	adds	r0, r6, r0
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d0c9      	beq.n	800e862 <uxTaskGetSystemState+0x6a>
 800e8ce:	e7d6      	b.n	800e87e <uxTaskGetSystemState+0x86>
 800e8d0:	200022b8 	.word	0x200022b8
 800e8d4:	20002238 	.word	0x20002238
 800e8d8:	2000234c 	.word	0x2000234c

0800e8dc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e8dc:	4b05      	ldr	r3, [pc, #20]	; (800e8f4 <vTaskSwitchContext+0x18>)
{
 800e8de:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e8e0:	691a      	ldr	r2, [r3, #16]
 800e8e2:	2a00      	cmp	r2, #0
 800e8e4:	d002      	beq.n	800e8ec <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	605a      	str	r2, [r3, #4]
}
 800e8ea:	bd10      	pop	{r4, pc}
 800e8ec:	f7ff fd3c 	bl	800e368 <vTaskSwitchContext.part.6>
 800e8f0:	e7fb      	b.n	800e8ea <vTaskSwitchContext+0xe>
 800e8f2:	46c0      	nop			; (mov r8, r8)
 800e8f4:	200022b8 	.word	0x200022b8

0800e8f8 <vTaskPlaceOnEventList>:
{
 800e8f8:	b570      	push	{r4, r5, r6, lr}
 800e8fa:	000d      	movs	r5, r1
	configASSERT( pxEventList );
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	d00f      	beq.n	800e920 <vTaskPlaceOnEventList+0x28>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e900:	4c0c      	ldr	r4, [pc, #48]	; (800e934 <vTaskPlaceOnEventList+0x3c>)
 800e902:	6861      	ldr	r1, [r4, #4]
 800e904:	3118      	adds	r1, #24
 800e906:	f7ff f855 	bl	800d9b4 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e90a:	6860      	ldr	r0, [r4, #4]
 800e90c:	3004      	adds	r0, #4
 800e90e:	f7ff f869 	bl	800d9e4 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800e912:	1c6b      	adds	r3, r5, #1
 800e914:	d006      	beq.n	800e924 <vTaskPlaceOnEventList+0x2c>
			xTimeToWake = xTickCount + xTicksToWait;
 800e916:	68a0      	ldr	r0, [r4, #8]
 800e918:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e91a:	f7ff fc39 	bl	800e190 <prvAddCurrentTaskToDelayedList>
}
 800e91e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
 800e920:	b672      	cpsid	i
 800e922:	e7fe      	b.n	800e922 <vTaskPlaceOnEventList+0x2a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e924:	0020      	movs	r0, r4
 800e926:	6861      	ldr	r1, [r4, #4]
 800e928:	3064      	adds	r0, #100	; 0x64
 800e92a:	3104      	adds	r1, #4
 800e92c:	f7ff f836 	bl	800d99c <vListInsertEnd>
 800e930:	e7f5      	b.n	800e91e <vTaskPlaceOnEventList+0x26>
 800e932:	46c0      	nop			; (mov r8, r8)
 800e934:	20002238 	.word	0x20002238

0800e938 <vTaskPlaceOnEventListRestricted>:
	{
 800e938:	b570      	push	{r4, r5, r6, lr}
 800e93a:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800e93c:	2800      	cmp	r0, #0
 800e93e:	d101      	bne.n	800e944 <vTaskPlaceOnEventListRestricted+0xc>
 800e940:	b672      	cpsid	i
 800e942:	e7fe      	b.n	800e942 <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e944:	4c06      	ldr	r4, [pc, #24]	; (800e960 <vTaskPlaceOnEventListRestricted+0x28>)
 800e946:	6861      	ldr	r1, [r4, #4]
 800e948:	3118      	adds	r1, #24
 800e94a:	f7ff f827 	bl	800d99c <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e94e:	6860      	ldr	r0, [r4, #4]
 800e950:	3004      	adds	r0, #4
 800e952:	f7ff f847 	bl	800d9e4 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800e956:	68a0      	ldr	r0, [r4, #8]
 800e958:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e95a:	f7ff fc19 	bl	800e190 <prvAddCurrentTaskToDelayedList>
	}
 800e95e:	bd70      	pop	{r4, r5, r6, pc}
 800e960:	20002238 	.word	0x20002238

0800e964 <xTaskRemoveFromEventList>:
{
 800e964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e966:	68c3      	ldr	r3, [r0, #12]
 800e968:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e96a:	2c00      	cmp	r4, #0
 800e96c:	d024      	beq.n	800e9b8 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e96e:	0027      	movs	r7, r4
 800e970:	3718      	adds	r7, #24
 800e972:	0038      	movs	r0, r7
 800e974:	f7ff f836 	bl	800d9e4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e978:	4d14      	ldr	r5, [pc, #80]	; (800e9cc <xTaskRemoveFromEventList+0x68>)
 800e97a:	692b      	ldr	r3, [r5, #16]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d11d      	bne.n	800e9bc <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800e980:	1d26      	adds	r6, r4, #4
 800e982:	0030      	movs	r0, r6
 800e984:	f7ff f82e 	bl	800d9e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e988:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e98a:	682a      	ldr	r2, [r5, #0]
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d900      	bls.n	800e992 <xTaskRemoveFromEventList+0x2e>
 800e990:	602b      	str	r3, [r5, #0]
 800e992:	0098      	lsls	r0, r3, #2
 800e994:	18c0      	adds	r0, r0, r3
 800e996:	4b0e      	ldr	r3, [pc, #56]	; (800e9d0 <xTaskRemoveFromEventList+0x6c>)
 800e998:	0080      	lsls	r0, r0, #2
 800e99a:	0031      	movs	r1, r6
 800e99c:	18c0      	adds	r0, r0, r3
 800e99e:	f7fe fffd 	bl	800d99c <vListInsertEnd>
 800e9a2:	4e0c      	ldr	r6, [pc, #48]	; (800e9d4 <xTaskRemoveFromEventList+0x70>)
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e9a4:	6873      	ldr	r3, [r6, #4]
 800e9a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800e9aa:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d902      	bls.n	800e9b6 <xTaskRemoveFromEventList+0x52>
		xYieldPending = pdTRUE;
 800e9b0:	2301      	movs	r3, #1
		xReturn = pdTRUE;
 800e9b2:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800e9b4:	606b      	str	r3, [r5, #4]
}
 800e9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxUnblockedTCB );
 800e9b8:	b672      	cpsid	i
 800e9ba:	e7fe      	b.n	800e9ba <xTaskRemoveFromEventList+0x56>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e9bc:	4e05      	ldr	r6, [pc, #20]	; (800e9d4 <xTaskRemoveFromEventList+0x70>)
 800e9be:	0039      	movs	r1, r7
 800e9c0:	0030      	movs	r0, r6
 800e9c2:	303c      	adds	r0, #60	; 0x3c
 800e9c4:	f7fe ffea 	bl	800d99c <vListInsertEnd>
 800e9c8:	e7ec      	b.n	800e9a4 <xTaskRemoveFromEventList+0x40>
 800e9ca:	46c0      	nop			; (mov r8, r8)
 800e9cc:	200022b8 	.word	0x200022b8
 800e9d0:	200022d4 	.word	0x200022d4
 800e9d4:	20002238 	.word	0x20002238

0800e9d8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	d006      	beq.n	800e9ea <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e9dc:	4b04      	ldr	r3, [pc, #16]	; (800e9f0 <vTaskSetTimeOutState+0x18>)
 800e9de:	695b      	ldr	r3, [r3, #20]
 800e9e0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e9e2:	4b04      	ldr	r3, [pc, #16]	; (800e9f4 <vTaskSetTimeOutState+0x1c>)
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	6043      	str	r3, [r0, #4]
}
 800e9e8:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800e9ea:	b672      	cpsid	i
 800e9ec:	e7fe      	b.n	800e9ec <vTaskSetTimeOutState+0x14>
 800e9ee:	46c0      	nop			; (mov r8, r8)
 800e9f0:	200022b8 	.word	0x200022b8
 800e9f4:	20002238 	.word	0x20002238

0800e9f8 <xTaskCheckForTimeOut>:
{
 800e9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9fa:	0004      	movs	r4, r0
 800e9fc:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800e9fe:	2800      	cmp	r0, #0
 800ea00:	d025      	beq.n	800ea4e <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTicksToWait );
 800ea02:	2900      	cmp	r1, #0
 800ea04:	d021      	beq.n	800ea4a <xTaskCheckForTimeOut+0x52>
	taskENTER_CRITICAL();
 800ea06:	f000 fc37 	bl	800f278 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ea0a:	4f13      	ldr	r7, [pc, #76]	; (800ea58 <xTaskCheckForTimeOut+0x60>)
			if( *pxTicksToWait == portMAX_DELAY )
 800ea0c:	6833      	ldr	r3, [r6, #0]
		const TickType_t xConstTickCount = xTickCount;
 800ea0e:	68b9      	ldr	r1, [r7, #8]
			if( *pxTicksToWait == portMAX_DELAY )
 800ea10:	1c5a      	adds	r2, r3, #1
 800ea12:	d01e      	beq.n	800ea52 <xTaskCheckForTimeOut+0x5a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea14:	4a11      	ldr	r2, [pc, #68]	; (800ea5c <xTaskCheckForTimeOut+0x64>)
 800ea16:	6825      	ldr	r5, [r4, #0]
 800ea18:	6950      	ldr	r0, [r2, #20]
 800ea1a:	4694      	mov	ip, r2
 800ea1c:	6862      	ldr	r2, [r4, #4]
 800ea1e:	4285      	cmp	r5, r0
 800ea20:	d002      	beq.n	800ea28 <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
 800ea22:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea24:	4291      	cmp	r1, r2
 800ea26:	d20c      	bcs.n	800ea42 <xTaskCheckForTimeOut+0x4a>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ea28:	1a88      	subs	r0, r1, r2
			xReturn = pdTRUE;
 800ea2a:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ea2c:	4283      	cmp	r3, r0
 800ea2e:	d908      	bls.n	800ea42 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800ea30:	1a5b      	subs	r3, r3, r1
 800ea32:	189b      	adds	r3, r3, r2
 800ea34:	6033      	str	r3, [r6, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea36:	4663      	mov	r3, ip
			xReturn = pdFALSE;
 800ea38:	2500      	movs	r5, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea3a:	695b      	ldr	r3, [r3, #20]
 800ea3c:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800ea42:	f000 fc25 	bl	800f290 <vPortExitCritical>
}
 800ea46:	0028      	movs	r0, r5
 800ea48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
 800ea4a:	b672      	cpsid	i
 800ea4c:	e7fe      	b.n	800ea4c <xTaskCheckForTimeOut+0x54>
	configASSERT( pxTimeOut );
 800ea4e:	b672      	cpsid	i
 800ea50:	e7fe      	b.n	800ea50 <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
 800ea52:	2500      	movs	r5, #0
 800ea54:	e7f5      	b.n	800ea42 <xTaskCheckForTimeOut+0x4a>
 800ea56:	46c0      	nop			; (mov r8, r8)
 800ea58:	20002238 	.word	0x20002238
 800ea5c:	200022b8 	.word	0x200022b8

0800ea60 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ea60:	2201      	movs	r2, #1
 800ea62:	4b01      	ldr	r3, [pc, #4]	; (800ea68 <vTaskMissedYield+0x8>)
 800ea64:	605a      	str	r2, [r3, #4]
}
 800ea66:	4770      	bx	lr
 800ea68:	200022b8 	.word	0x200022b8

0800ea6c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ea6c:	4b05      	ldr	r3, [pc, #20]	; (800ea84 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea6e:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800ea70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d004      	beq.n	800ea80 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea76:	4b04      	ldr	r3, [pc, #16]	; (800ea88 <xTaskGetSchedulerState+0x1c>)
 800ea78:	6918      	ldr	r0, [r3, #16]
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea7a:	4243      	negs	r3, r0
 800ea7c:	4158      	adcs	r0, r3
 800ea7e:	0040      	lsls	r0, r0, #1
	}
 800ea80:	4770      	bx	lr
 800ea82:	46c0      	nop			; (mov r8, r8)
 800ea84:	20002238 	.word	0x20002238
 800ea88:	200022b8 	.word	0x200022b8

0800ea8c <vTaskPriorityInherit>:
	{
 800ea8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea8e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800ea90:	d018      	beq.n	800eac4 <vTaskPriorityInherit+0x38>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ea92:	4d17      	ldr	r5, [pc, #92]	; (800eaf0 <vTaskPriorityInherit+0x64>)
 800ea94:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ea96:	686b      	ldr	r3, [r5, #4]
 800ea98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d212      	bcs.n	800eac4 <vTaskPriorityInherit+0x38>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea9e:	6983      	ldr	r3, [r0, #24]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	db04      	blt.n	800eaae <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eaa4:	686b      	ldr	r3, [r5, #4]
 800eaa6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800eaa8:	2307      	movs	r3, #7
 800eaaa:	1a5b      	subs	r3, r3, r1
 800eaac:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800eaae:	0093      	lsls	r3, r2, #2
 800eab0:	189b      	adds	r3, r3, r2
 800eab2:	4e10      	ldr	r6, [pc, #64]	; (800eaf4 <vTaskPriorityInherit+0x68>)
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	6962      	ldr	r2, [r4, #20]
 800eab8:	18f3      	adds	r3, r6, r3
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d003      	beq.n	800eac6 <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eabe:	686b      	ldr	r3, [r5, #4]
 800eac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac2:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800eac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eac6:	1d27      	adds	r7, r4, #4
 800eac8:	0038      	movs	r0, r7
 800eaca:	f7fe ff8b 	bl	800d9e4 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eace:	686b      	ldr	r3, [r5, #4]
					prvAddTaskToReadyList( pxTCB );
 800ead0:	4a09      	ldr	r2, [pc, #36]	; (800eaf8 <vTaskPriorityInherit+0x6c>)
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ead2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ead4:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ead6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ead8:	428b      	cmp	r3, r1
 800eada:	d900      	bls.n	800eade <vTaskPriorityInherit+0x52>
 800eadc:	6013      	str	r3, [r2, #0]
 800eade:	0098      	lsls	r0, r3, #2
 800eae0:	18c0      	adds	r0, r0, r3
 800eae2:	0080      	lsls	r0, r0, #2
 800eae4:	1830      	adds	r0, r6, r0
 800eae6:	0039      	movs	r1, r7
 800eae8:	f7fe ff58 	bl	800d99c <vListInsertEnd>
	}
 800eaec:	e7ea      	b.n	800eac4 <vTaskPriorityInherit+0x38>
 800eaee:	46c0      	nop			; (mov r8, r8)
 800eaf0:	20002238 	.word	0x20002238
 800eaf4:	200022d4 	.word	0x200022d4
 800eaf8:	200022b8 	.word	0x200022b8

0800eafc <xTaskPriorityDisinherit>:
	{
 800eafc:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800eafe:	2800      	cmp	r0, #0
 800eb00:	d005      	beq.n	800eb0e <xTaskPriorityDisinherit+0x12>
			configASSERT( pxTCB == pxCurrentTCB );
 800eb02:	4b16      	ldr	r3, [pc, #88]	; (800eb5c <xTaskPriorityDisinherit+0x60>)
 800eb04:	685c      	ldr	r4, [r3, #4]
 800eb06:	4284      	cmp	r4, r0
 800eb08:	d003      	beq.n	800eb12 <xTaskPriorityDisinherit+0x16>
 800eb0a:	b672      	cpsid	i
 800eb0c:	e7fe      	b.n	800eb0c <xTaskPriorityDisinherit+0x10>
	BaseType_t xReturn = pdFALSE;
 800eb0e:	2000      	movs	r0, #0
	}
 800eb10:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 800eb12:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d101      	bne.n	800eb1c <xTaskPriorityDisinherit+0x20>
 800eb18:	b672      	cpsid	i
 800eb1a:	e7fe      	b.n	800eb1a <xTaskPriorityDisinherit+0x1e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800eb1e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800eb20:	3b01      	subs	r3, #1
 800eb22:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb24:	428a      	cmp	r2, r1
 800eb26:	d0f2      	beq.n	800eb0e <xTaskPriorityDisinherit+0x12>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d1f0      	bne.n	800eb0e <xTaskPriorityDisinherit+0x12>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eb2c:	1d25      	adds	r5, r4, #4
 800eb2e:	0028      	movs	r0, r5
 800eb30:	f7fe ff58 	bl	800d9e4 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb34:	2207      	movs	r2, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb36:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb38:	1ad2      	subs	r2, r2, r3
 800eb3a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800eb3c:	4a08      	ldr	r2, [pc, #32]	; (800eb60 <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb3e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800eb40:	6811      	ldr	r1, [r2, #0]
 800eb42:	428b      	cmp	r3, r1
 800eb44:	d900      	bls.n	800eb48 <xTaskPriorityDisinherit+0x4c>
 800eb46:	6013      	str	r3, [r2, #0]
 800eb48:	2014      	movs	r0, #20
 800eb4a:	4358      	muls	r0, r3
 800eb4c:	4b05      	ldr	r3, [pc, #20]	; (800eb64 <xTaskPriorityDisinherit+0x68>)
 800eb4e:	0029      	movs	r1, r5
 800eb50:	18c0      	adds	r0, r0, r3
 800eb52:	f7fe ff23 	bl	800d99c <vListInsertEnd>
					xReturn = pdTRUE;
 800eb56:	2001      	movs	r0, #1
		return xReturn;
 800eb58:	e7da      	b.n	800eb10 <xTaskPriorityDisinherit+0x14>
 800eb5a:	46c0      	nop			; (mov r8, r8)
 800eb5c:	20002238 	.word	0x20002238
 800eb60:	200022b8 	.word	0x200022b8
 800eb64:	200022d4 	.word	0x200022d4

0800eb68 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800eb68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb6a:	46c6      	mov	lr, r8
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800eb6c:	2600      	movs	r6, #0
	{
 800eb6e:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800eb70:	4b27      	ldr	r3, [pc, #156]	; (800ec10 <vTaskList+0xa8>)
	{
 800eb72:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800eb74:	691a      	ldr	r2, [r3, #16]
		*pcWriteBuffer = 0x00;
 800eb76:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800eb78:	9202      	str	r2, [sp, #8]
	{
 800eb7a:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800eb7c:	6918      	ldr	r0, [r3, #16]
 800eb7e:	0140      	lsls	r0, r0, #5
 800eb80:	f000 fbf8 	bl	800f374 <pvPortMalloc>
 800eb84:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800eb86:	d03f      	beq.n	800ec08 <vTaskList+0xa0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800eb88:	2200      	movs	r2, #0
 800eb8a:	9902      	ldr	r1, [sp, #8]
 800eb8c:	f7ff fe34 	bl	800e7f8 <uxTaskGetSystemState>
 800eb90:	9002      	str	r0, [sp, #8]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800eb92:	9603      	str	r6, [sp, #12]
 800eb94:	9b03      	ldr	r3, [sp, #12]
 800eb96:	9a02      	ldr	r2, [sp, #8]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d932      	bls.n	800ec02 <vTaskList+0x9a>
 800eb9c:	4b1d      	ldr	r3, [pc, #116]	; (800ec14 <vTaskList+0xac>)
 800eb9e:	4e1e      	ldr	r6, [pc, #120]	; (800ec18 <vTaskList+0xb0>)
 800eba0:	4698      	mov	r8, r3
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800eba2:	9b03      	ldr	r3, [sp, #12]
 800eba4:	2700      	movs	r7, #0
 800eba6:	015b      	lsls	r3, r3, #5
 800eba8:	18eb      	adds	r3, r5, r3
 800ebaa:	7b1b      	ldrb	r3, [r3, #12]
 800ebac:	3b01      	subs	r3, #1
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	2b03      	cmp	r3, #3
 800ebb2:	d801      	bhi.n	800ebb8 <vTaskList+0x50>
 800ebb4:	4443      	add	r3, r8
 800ebb6:	7d1f      	ldrb	r7, [r3, #20]
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ebb8:	9b03      	ldr	r3, [sp, #12]
 800ebba:	0020      	movs	r0, r4
 800ebbc:	015b      	lsls	r3, r3, #5
 800ebbe:	18eb      	adds	r3, r5, r3
 800ebc0:	6859      	ldr	r1, [r3, #4]
 800ebc2:	f7ff fa6d 	bl	800e0a0 <prvWriteNameToBuffer>
 800ebc6:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ebc8:	9b03      	ldr	r3, [sp, #12]
 800ebca:	9a03      	ldr	r2, [sp, #12]
 800ebcc:	9903      	ldr	r1, [sp, #12]
 800ebce:	015b      	lsls	r3, r3, #5
 800ebd0:	0149      	lsls	r1, r1, #5
 800ebd2:	1869      	adds	r1, r5, r1
 800ebd4:	6889      	ldr	r1, [r1, #8]
 800ebd6:	18eb      	adds	r3, r5, r3
 800ebd8:	0152      	lsls	r2, r2, #5
 800ebda:	691b      	ldr	r3, [r3, #16]
 800ebdc:	18aa      	adds	r2, r5, r2
 800ebde:	9101      	str	r1, [sp, #4]
 800ebe0:	8b92      	ldrh	r2, [r2, #28]
 800ebe2:	0031      	movs	r1, r6
 800ebe4:	9200      	str	r2, [sp, #0]
 800ebe6:	003a      	movs	r2, r7
 800ebe8:	f004 fa8e 	bl	8013108 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ebec:	0020      	movs	r0, r4
 800ebee:	f7f1 fa93 	bl	8000118 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 800ebf2:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ebf4:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	9303      	str	r3, [sp, #12]
 800ebfa:	9a03      	ldr	r2, [sp, #12]
 800ebfc:	9b02      	ldr	r3, [sp, #8]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d3cf      	bcc.n	800eba2 <vTaskList+0x3a>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ec02:	0028      	movs	r0, r5
 800ec04:	f000 fc32 	bl	800f46c <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec08:	b004      	add	sp, #16
 800ec0a:	bc04      	pop	{r2}
 800ec0c:	4690      	mov	r8, r2
 800ec0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec10:	20002238 	.word	0x20002238
 800ec14:	08017b4c 	.word	0x08017b4c
 800ec18:	0801a35c 	.word	0x0801a35c

0800ec1c <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800ec1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec1e:	46c6      	mov	lr, r8
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ec20:	2600      	movs	r6, #0
	{
 800ec22:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ec24:	4b28      	ldr	r3, [pc, #160]	; (800ecc8 <vTaskGetRunTimeStats+0xac>)
	{
 800ec26:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800ec28:	691a      	ldr	r2, [r3, #16]
		*pcWriteBuffer = 0x00;
 800ec2a:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800ec2c:	9201      	str	r2, [sp, #4]
	{
 800ec2e:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ec30:	6918      	ldr	r0, [r3, #16]
 800ec32:	0140      	lsls	r0, r0, #5
 800ec34:	f000 fb9e 	bl	800f374 <pvPortMalloc>
 800ec38:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800ec3a:	d040      	beq.n	800ecbe <vTaskGetRunTimeStats+0xa2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ec3c:	9901      	ldr	r1, [sp, #4]
 800ec3e:	aa03      	add	r2, sp, #12
 800ec40:	f7ff fdda 	bl	800e7f8 <uxTaskGetSystemState>

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800ec44:	2164      	movs	r1, #100	; 0x64
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ec46:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 800ec48:	9803      	ldr	r0, [sp, #12]
 800ec4a:	f7f1 fa81 	bl	8000150 <__udivsi3>
 800ec4e:	1e01      	subs	r1, r0, #0
 800ec50:	9003      	str	r0, [sp, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800ec52:	d031      	beq.n	800ecb8 <vTaskGetRunTimeStats+0x9c>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800ec54:	9602      	str	r6, [sp, #8]
 800ec56:	9b02      	ldr	r3, [sp, #8]
 800ec58:	9a01      	ldr	r2, [sp, #4]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d92c      	bls.n	800ecb8 <vTaskGetRunTimeStats+0x9c>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ec5e:	4b1b      	ldr	r3, [pc, #108]	; (800eccc <vTaskGetRunTimeStats+0xb0>)
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ec60:	4f1b      	ldr	r7, [pc, #108]	; (800ecd0 <vTaskGetRunTimeStats+0xb4>)
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ec62:	4698      	mov	r8, r3
 800ec64:	e00f      	b.n	800ec86 <vTaskGetRunTimeStats+0x6a>
 800ec66:	0033      	movs	r3, r6
 800ec68:	4641      	mov	r1, r8
 800ec6a:	f004 fa4d 	bl	8013108 <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800ec6e:	0020      	movs	r0, r4
 800ec70:	f7f1 fa52 	bl	8000118 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 800ec74:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer += strlen( pcWriteBuffer );
 800ec76:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800ec78:	3301      	adds	r3, #1
 800ec7a:	9302      	str	r3, [sp, #8]
 800ec7c:	9a02      	ldr	r2, [sp, #8]
 800ec7e:	9b01      	ldr	r3, [sp, #4]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d219      	bcs.n	800ecb8 <vTaskGetRunTimeStats+0x9c>
 800ec84:	9903      	ldr	r1, [sp, #12]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ec86:	9b02      	ldr	r3, [sp, #8]
 800ec88:	015b      	lsls	r3, r3, #5
 800ec8a:	18eb      	adds	r3, r5, r3
 800ec8c:	6998      	ldr	r0, [r3, #24]
 800ec8e:	f7f1 fa5f 	bl	8000150 <__udivsi3>
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ec92:	9b02      	ldr	r3, [sp, #8]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ec94:	0006      	movs	r6, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ec96:	015b      	lsls	r3, r3, #5
 800ec98:	18eb      	adds	r3, r5, r3
 800ec9a:	6859      	ldr	r1, [r3, #4]
 800ec9c:	0020      	movs	r0, r4
 800ec9e:	f7ff f9ff 	bl	800e0a0 <prvWriteNameToBuffer>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800eca2:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800eca4:	0004      	movs	r4, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800eca6:	015b      	lsls	r3, r3, #5
 800eca8:	18eb      	adds	r3, r5, r3
 800ecaa:	699a      	ldr	r2, [r3, #24]
					if( ulStatsAsPercentage > 0UL )
 800ecac:	2e00      	cmp	r6, #0
 800ecae:	d1da      	bne.n	800ec66 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ecb0:	0039      	movs	r1, r7
 800ecb2:	f004 fa29 	bl	8013108 <sprintf>
 800ecb6:	e7da      	b.n	800ec6e <vTaskGetRunTimeStats+0x52>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ecb8:	0028      	movs	r0, r5
 800ecba:	f000 fbd7 	bl	800f46c <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecbe:	b004      	add	sp, #16
 800ecc0:	bc04      	pop	{r2}
 800ecc2:	4690      	mov	r8, r2
 800ecc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecc6:	46c0      	nop			; (mov r8, r8)
 800ecc8:	20002238 	.word	0x20002238
 800eccc:	0801a36c 	.word	0x0801a36c
 800ecd0:	0801a378 	.word	0x0801a378

0800ecd4 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ecd4:	4b04      	ldr	r3, [pc, #16]	; (800ece8 <pvTaskIncrementMutexHeldCount+0x14>)
 800ecd6:	685a      	ldr	r2, [r3, #4]
 800ecd8:	2a00      	cmp	r2, #0
 800ecda:	d003      	beq.n	800ece4 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ecdc:	6859      	ldr	r1, [r3, #4]
 800ecde:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800ece0:	3201      	adds	r2, #1
 800ece2:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ece4:	6858      	ldr	r0, [r3, #4]
	}
 800ece6:	4770      	bx	lr
 800ece8:	20002238 	.word	0x20002238

0800ecec <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ecec:	b570      	push	{r4, r5, r6, lr}
 800ecee:	0006      	movs	r6, r0
 800ecf0:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ecf2:	f000 fac1 	bl	800f278 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ecf6:	4c1c      	ldr	r4, [pc, #112]	; (800ed68 <ulTaskNotifyTake+0x7c>)
 800ecf8:	6863      	ldr	r3, [r4, #4]
 800ecfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d105      	bne.n	800ed0c <ulTaskNotifyTake+0x20>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800ed00:	2101      	movs	r1, #1
 800ed02:	6862      	ldr	r2, [r4, #4]
 800ed04:	335c      	adds	r3, #92	; 0x5c
 800ed06:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800ed08:	2d00      	cmp	r5, #0
 800ed0a:	d119      	bne.n	800ed40 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ed0c:	f000 fac0 	bl	800f290 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ed10:	f000 fab2 	bl	800f278 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ed14:	6863      	ldr	r3, [r4, #4]
 800ed16:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800ed18:	2d00      	cmp	r5, #0
 800ed1a:	d005      	beq.n	800ed28 <ulTaskNotifyTake+0x3c>
			{
				if( xClearCountOnExit != pdFALSE )
 800ed1c:	2e00      	cmp	r6, #0
 800ed1e:	d10b      	bne.n	800ed38 <ulTaskNotifyTake+0x4c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800ed20:	6862      	ldr	r2, [r4, #4]
 800ed22:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ed24:	3b01      	subs	r3, #1
 800ed26:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800ed28:	235c      	movs	r3, #92	; 0x5c
 800ed2a:	2100      	movs	r1, #0
 800ed2c:	6862      	ldr	r2, [r4, #4]
 800ed2e:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800ed30:	f000 faae 	bl	800f290 <vPortExitCritical>

		return ulReturn;
	}
 800ed34:	0028      	movs	r0, r5
 800ed36:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ed38:	2200      	movs	r2, #0
 800ed3a:	6863      	ldr	r3, [r4, #4]
 800ed3c:	659a      	str	r2, [r3, #88]	; 0x58
 800ed3e:	e7f3      	b.n	800ed28 <ulTaskNotifyTake+0x3c>
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ed40:	6860      	ldr	r0, [r4, #4]
 800ed42:	3004      	adds	r0, #4
 800ed44:	f7fe fe4e 	bl	800d9e4 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800ed48:	1c6b      	adds	r3, r5, #1
 800ed4a:	d006      	beq.n	800ed5a <ulTaskNotifyTake+0x6e>
							xTimeToWake = xTickCount + xTicksToWait;
 800ed4c:	68a0      	ldr	r0, [r4, #8]
 800ed4e:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ed50:	f7ff fa1e 	bl	800e190 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800ed54:	f000 fa84 	bl	800f260 <vPortYield>
 800ed58:	e7d8      	b.n	800ed0c <ulTaskNotifyTake+0x20>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ed5a:	0020      	movs	r0, r4
 800ed5c:	6861      	ldr	r1, [r4, #4]
 800ed5e:	3064      	adds	r0, #100	; 0x64
 800ed60:	3104      	adds	r1, #4
 800ed62:	f7fe fe1b 	bl	800d99c <vListInsertEnd>
 800ed66:	e7f5      	b.n	800ed54 <ulTaskNotifyTake+0x68>
 800ed68:	20002238 	.word	0x20002238

0800ed6c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ed6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed6e:	0004      	movs	r4, r0
 800ed70:	000e      	movs	r6, r1
 800ed72:	0015      	movs	r5, r2
 800ed74:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800ed76:	2800      	cmp	r0, #0
 800ed78:	d01b      	beq.n	800edb2 <xTaskGenericNotify+0x46>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800ed7a:	f000 fa7d 	bl	800f278 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ed7e:	2f00      	cmp	r7, #0
 800ed80:	d001      	beq.n	800ed86 <xTaskGenericNotify+0x1a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ed82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed84:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800ed86:	225c      	movs	r2, #92	; 0x5c

			pxTCB->eNotifyState = eNotified;
 800ed88:	2102      	movs	r1, #2
			eOriginalNotifyState = pxTCB->eNotifyState;
 800ed8a:	5ca3      	ldrb	r3, [r4, r2]
			pxTCB->eNotifyState = eNotified;
 800ed8c:	54a1      	strb	r1, [r4, r2]
			eOriginalNotifyState = pxTCB->eNotifyState;
 800ed8e:	b2db      	uxtb	r3, r3

			switch( eAction )
 800ed90:	2d02      	cmp	r5, #2
 800ed92:	d010      	beq.n	800edb6 <xTaskGenericNotify+0x4a>
 800ed94:	d934      	bls.n	800ee00 <xTaskGenericNotify+0x94>
 800ed96:	2d03      	cmp	r5, #3
 800ed98:	d003      	beq.n	800eda2 <xTaskGenericNotify+0x36>
 800ed9a:	2d04      	cmp	r5, #4
 800ed9c:	d102      	bne.n	800eda4 <xTaskGenericNotify+0x38>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800ed9e:	2b02      	cmp	r3, #2
 800eda0:	d02c      	beq.n	800edfc <xTaskGenericNotify+0x90>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800eda2:	65a6      	str	r6, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800eda4:	2b01      	cmp	r3, #1
 800eda6:	d00a      	beq.n	800edbe <xTaskGenericNotify+0x52>
 800eda8:	2401      	movs	r4, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800edaa:	f000 fa71 	bl	800f290 <vPortExitCritical>

		return xReturn;
	}
 800edae:	0020      	movs	r0, r4
 800edb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		configASSERT( xTaskToNotify );
 800edb2:	b672      	cpsid	i
 800edb4:	e7fe      	b.n	800edb4 <xTaskGenericNotify+0x48>
					( pxTCB->ulNotifiedValue )++;
 800edb6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800edb8:	3201      	adds	r2, #1
 800edba:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800edbc:	e7f2      	b.n	800eda4 <xTaskGenericNotify+0x38>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800edbe:	1d25      	adds	r5, r4, #4
 800edc0:	0028      	movs	r0, r5
 800edc2:	f7fe fe0f 	bl	800d9e4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800edc6:	4a11      	ldr	r2, [pc, #68]	; (800ee0c <xTaskGenericNotify+0xa0>)
 800edc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800edca:	6811      	ldr	r1, [r2, #0]
 800edcc:	428b      	cmp	r3, r1
 800edce:	d900      	bls.n	800edd2 <xTaskGenericNotify+0x66>
 800edd0:	6013      	str	r3, [r2, #0]
 800edd2:	2014      	movs	r0, #20
 800edd4:	4358      	muls	r0, r3
 800edd6:	4b0e      	ldr	r3, [pc, #56]	; (800ee10 <xTaskGenericNotify+0xa4>)
 800edd8:	0029      	movs	r1, r5
 800edda:	18c0      	adds	r0, r0, r3
 800eddc:	f7fe fdde 	bl	800d99c <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ede0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d001      	beq.n	800edea <xTaskGenericNotify+0x7e>
 800ede6:	b672      	cpsid	i
 800ede8:	e7fe      	b.n	800ede8 <xTaskGenericNotify+0x7c>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800edea:	4b0a      	ldr	r3, [pc, #40]	; (800ee14 <xTaskGenericNotify+0xa8>)
 800edec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d9d8      	bls.n	800eda8 <xTaskGenericNotify+0x3c>
					taskYIELD_IF_USING_PREEMPTION();
 800edf6:	f000 fa33 	bl	800f260 <vPortYield>
 800edfa:	e7d5      	b.n	800eda8 <xTaskGenericNotify+0x3c>
						xReturn = pdFAIL;
 800edfc:	2400      	movs	r4, #0
 800edfe:	e7d4      	b.n	800edaa <xTaskGenericNotify+0x3e>
			switch( eAction )
 800ee00:	2d01      	cmp	r5, #1
 800ee02:	d1cf      	bne.n	800eda4 <xTaskGenericNotify+0x38>
					pxTCB->ulNotifiedValue |= ulValue;
 800ee04:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ee06:	4316      	orrs	r6, r2
 800ee08:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800ee0a:	e7cb      	b.n	800eda4 <xTaskGenericNotify+0x38>
 800ee0c:	200022b8 	.word	0x200022b8
 800ee10:	200022d4 	.word	0x200022d4
 800ee14:	20002238 	.word	0x20002238

0800ee18 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ee18:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ee1a:	f000 fa2d 	bl	800f278 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ee1e:	4c10      	ldr	r4, [pc, #64]	; (800ee60 <prvCheckForValidListAndQueue+0x48>)
 800ee20:	6823      	ldr	r3, [r4, #0]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d002      	beq.n	800ee2c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee26:	f000 fa33 	bl	800f290 <vPortExitCritical>
}
 800ee2a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList2 );
 800ee2c:	0025      	movs	r5, r4
			vListInitialise( &xActiveTimerList1 );
 800ee2e:	1d26      	adds	r6, r4, #4
 800ee30:	0030      	movs	r0, r6
			vListInitialise( &xActiveTimerList2 );
 800ee32:	3518      	adds	r5, #24
			vListInitialise( &xActiveTimerList1 );
 800ee34:	f7fe fda2 	bl	800d97c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ee38:	0028      	movs	r0, r5
 800ee3a:	f7fe fd9f 	bl	800d97c <vListInitialise>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ee3e:	2200      	movs	r2, #0
 800ee40:	2110      	movs	r1, #16
 800ee42:	2004      	movs	r0, #4
			pxCurrentTimerList = &xActiveTimerList1;
 800ee44:	62e6      	str	r6, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
 800ee46:	6325      	str	r5, [r4, #48]	; 0x30
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ee48:	f7fe feae 	bl	800dba8 <xQueueGenericCreate>
 800ee4c:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	d003      	beq.n	800ee5a <prvCheckForValidListAndQueue+0x42>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ee52:	4904      	ldr	r1, [pc, #16]	; (800ee64 <prvCheckForValidListAndQueue+0x4c>)
 800ee54:	f7ff f8f4 	bl	800e040 <vQueueAddToRegistry>
 800ee58:	e7e5      	b.n	800ee26 <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
 800ee5a:	b672      	cpsid	i
 800ee5c:	e7fe      	b.n	800ee5c <prvCheckForValidListAndQueue+0x44>
 800ee5e:	46c0      	nop			; (mov r8, r8)
 800ee60:	20002360 	.word	0x20002360
 800ee64:	0801a384 	.word	0x0801a384

0800ee68 <prvInsertTimerInActiveList>:
{
 800ee68:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ee6a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee6c:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800ee6e:	4291      	cmp	r1, r2
 800ee70:	d806      	bhi.n	800ee80 <prvInsertTimerInActiveList+0x18>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800ee72:	1ad2      	subs	r2, r2, r3
 800ee74:	6983      	ldr	r3, [r0, #24]
			xProcessTimerNow = pdTRUE;
 800ee76:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d30d      	bcc.n	800ee98 <prvInsertTimerInActiveList+0x30>
}
 800ee7c:	0020      	movs	r0, r4
 800ee7e:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d202      	bcs.n	800ee8a <prvInsertTimerInActiveList+0x22>
			xProcessTimerNow = pdTRUE;
 800ee84:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ee86:	4299      	cmp	r1, r3
 800ee88:	d2f8      	bcs.n	800ee7c <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee8a:	4b07      	ldr	r3, [pc, #28]	; (800eea8 <prvInsertTimerInActiveList+0x40>)
 800ee8c:	1d01      	adds	r1, r0, #4
 800ee8e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ee90:	f7fe fd90 	bl	800d9b4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ee94:	2400      	movs	r4, #0
 800ee96:	e7f1      	b.n	800ee7c <prvInsertTimerInActiveList+0x14>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ee98:	4b03      	ldr	r3, [pc, #12]	; (800eea8 <prvInsertTimerInActiveList+0x40>)
 800ee9a:	1d01      	adds	r1, r0, #4
 800ee9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ee9e:	f7fe fd89 	bl	800d9b4 <vListInsert>
 800eea2:	2400      	movs	r4, #0
 800eea4:	e7ea      	b.n	800ee7c <prvInsertTimerInActiveList+0x14>
 800eea6:	46c0      	nop			; (mov r8, r8)
 800eea8:	20002360 	.word	0x20002360

0800eeac <xTimerCreateTimerTask>:
{
 800eeac:	b500      	push	{lr}
 800eeae:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800eeb0:	f7ff ffb2 	bl	800ee18 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800eeb4:	4b0a      	ldr	r3, [pc, #40]	; (800eee0 <xTimerCreateTimerTask+0x34>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d00d      	beq.n	800eed8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800eebc:	2300      	movs	r3, #0
 800eebe:	9303      	str	r3, [sp, #12]
 800eec0:	9302      	str	r3, [sp, #8]
 800eec2:	9301      	str	r3, [sp, #4]
 800eec4:	3303      	adds	r3, #3
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	22a0      	movs	r2, #160	; 0xa0
 800eeca:	2300      	movs	r3, #0
 800eecc:	4905      	ldr	r1, [pc, #20]	; (800eee4 <xTimerCreateTimerTask+0x38>)
 800eece:	4806      	ldr	r0, [pc, #24]	; (800eee8 <xTimerCreateTimerTask+0x3c>)
 800eed0:	f7ff faa2 	bl	800e418 <xTaskGenericCreate>
	configASSERT( xReturn );
 800eed4:	2800      	cmp	r0, #0
 800eed6:	d101      	bne.n	800eedc <xTimerCreateTimerTask+0x30>
 800eed8:	b672      	cpsid	i
 800eeda:	e7fe      	b.n	800eeda <xTimerCreateTimerTask+0x2e>
}
 800eedc:	b005      	add	sp, #20
 800eede:	bd00      	pop	{pc}
 800eee0:	20002360 	.word	0x20002360
 800eee4:	0801a38c 	.word	0x0801a38c
 800eee8:	0800eff5 	.word	0x0800eff5

0800eeec <xTimerCreate>:
{
 800eeec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeee:	46c6      	mov	lr, r8
 800eef0:	000d      	movs	r5, r1
 800eef2:	b500      	push	{lr}
 800eef4:	4680      	mov	r8, r0
 800eef6:	0017      	movs	r7, r2
 800eef8:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800eefa:	2900      	cmp	r1, #0
 800eefc:	d014      	beq.n	800ef28 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800eefe:	202c      	movs	r0, #44	; 0x2c
 800ef00:	f000 fa38 	bl	800f374 <pvPortMalloc>
 800ef04:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800ef06:	d00b      	beq.n	800ef20 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800ef08:	f7ff ff86 	bl	800ee18 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800ef0c:	4643      	mov	r3, r8
 800ef0e:	6023      	str	r3, [r4, #0]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ef10:	9b06      	ldr	r3, [sp, #24]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ef12:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800ef14:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800ef16:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ef18:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ef1a:	1d20      	adds	r0, r4, #4
 800ef1c:	f7fe fd3a 	bl	800d994 <vListInitialiseItem>
}
 800ef20:	0020      	movs	r0, r4
 800ef22:	bc04      	pop	{r2}
 800ef24:	4690      	mov	r8, r2
 800ef26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ef28:	b672      	cpsid	i
 800ef2a:	e7fe      	b.n	800ef2a <xTimerCreate+0x3e>

0800ef2c <xTimerGenericCommand>:
{
 800ef2c:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800ef2e:	4d13      	ldr	r5, [pc, #76]	; (800ef7c <xTimerGenericCommand+0x50>)
{
 800ef30:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800ef32:	682c      	ldr	r4, [r5, #0]
{
 800ef34:	001e      	movs	r6, r3
	if( xTimerQueue != NULL )
 800ef36:	2c00      	cmp	r4, #0
 800ef38:	d017      	beq.n	800ef6a <xTimerGenericCommand+0x3e>
		xMessage.xMessageID = xCommandID;
 800ef3a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ef3c:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800ef3e:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef40:	2905      	cmp	r1, #5
 800ef42:	dc0a      	bgt.n	800ef5a <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ef44:	f7ff fd92 	bl	800ea6c <xTaskGetSchedulerState>
 800ef48:	2802      	cmp	r0, #2
 800ef4a:	d010      	beq.n	800ef6e <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ef4c:	6828      	ldr	r0, [r5, #0]
 800ef4e:	2300      	movs	r3, #0
 800ef50:	2200      	movs	r2, #0
 800ef52:	4669      	mov	r1, sp
 800ef54:	f7fe fe64 	bl	800dc20 <xQueueGenericSend>
 800ef58:	e005      	b.n	800ef66 <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	0032      	movs	r2, r6
 800ef5e:	4669      	mov	r1, sp
 800ef60:	0020      	movs	r0, r4
 800ef62:	f7fe fef9 	bl	800dd58 <xQueueGenericSendFromISR>
}
 800ef66:	b004      	add	sp, #16
 800ef68:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 800ef6a:	2000      	movs	r0, #0
	return xReturn;
 800ef6c:	e7fb      	b.n	800ef66 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ef6e:	6828      	ldr	r0, [r5, #0]
 800ef70:	2300      	movs	r3, #0
 800ef72:	9a08      	ldr	r2, [sp, #32]
 800ef74:	4669      	mov	r1, sp
 800ef76:	f7fe fe53 	bl	800dc20 <xQueueGenericSend>
 800ef7a:	e7f4      	b.n	800ef66 <xTimerGenericCommand+0x3a>
 800ef7c:	20002360 	.word	0x20002360

0800ef80 <prvSwitchTimerLists>:
{
 800ef80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef82:	46c6      	mov	lr, r8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef84:	2300      	movs	r3, #0
{
 800ef86:	b500      	push	{lr}
 800ef88:	4e19      	ldr	r6, [pc, #100]	; (800eff0 <prvSwitchTimerLists+0x70>)
 800ef8a:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef8c:	4698      	mov	r8, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef8e:	e00c      	b.n	800efaa <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef90:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef92:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef94:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef96:	1d25      	adds	r5, r4, #4
 800ef98:	0028      	movs	r0, r5
 800ef9a:	f7fe fd23 	bl	800d9e4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efa0:	0020      	movs	r0, r4
 800efa2:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800efa4:	69e3      	ldr	r3, [r4, #28]
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d00a      	beq.n	800efc0 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efaa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	2a00      	cmp	r2, #0
 800efb0:	d1ee      	bne.n	800ef90 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
 800efb2:	6b32      	ldr	r2, [r6, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
 800efb4:	6333      	str	r3, [r6, #48]	; 0x30
	pxCurrentTimerList = pxOverflowTimerList;
 800efb6:	62f2      	str	r2, [r6, #44]	; 0x2c
}
 800efb8:	b002      	add	sp, #8
 800efba:	bc04      	pop	{r2}
 800efbc:	4690      	mov	r8, r2
 800efbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800efc0:	69a3      	ldr	r3, [r4, #24]
 800efc2:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 800efc4:	429f      	cmp	r7, r3
 800efc6:	d206      	bcs.n	800efd6 <prvSwitchTimerLists+0x56>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800efc8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800efca:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800efcc:	0029      	movs	r1, r5
 800efce:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800efd0:	f7fe fcf0 	bl	800d9b4 <vListInsert>
 800efd4:	e7e9      	b.n	800efaa <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800efd6:	4643      	mov	r3, r8
 800efd8:	003a      	movs	r2, r7
 800efda:	9300      	str	r3, [sp, #0]
 800efdc:	2100      	movs	r1, #0
 800efde:	2300      	movs	r3, #0
 800efe0:	0020      	movs	r0, r4
 800efe2:	f7ff ffa3 	bl	800ef2c <xTimerGenericCommand>
				configASSERT( xResult );
 800efe6:	2800      	cmp	r0, #0
 800efe8:	d1df      	bne.n	800efaa <prvSwitchTimerLists+0x2a>
 800efea:	b672      	cpsid	i
 800efec:	e7fe      	b.n	800efec <prvSwitchTimerLists+0x6c>
 800efee:	46c0      	nop			; (mov r8, r8)
 800eff0:	20002360 	.word	0x20002360

0800eff4 <prvTimerTask>:
{
 800eff4:	2301      	movs	r3, #1
 800eff6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eff8:	4646      	mov	r6, r8
 800effa:	46d6      	mov	lr, sl
 800effc:	464f      	mov	r7, r9
 800effe:	4698      	mov	r8, r3
 800f000:	b5c0      	push	{r6, r7, lr}
 800f002:	4d65      	ldr	r5, [pc, #404]	; (800f198 <prvTimerTask+0x1a4>)
 800f004:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f006:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	if( *pxListWasEmpty == pdFALSE )
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	2a00      	cmp	r2, #0
 800f00c:	d04f      	beq.n	800f0ae <prvTimerTask+0xba>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f00e:	68db      	ldr	r3, [r3, #12]
 800f010:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 800f012:	f7ff fa9d 	bl	800e550 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800f016:	f7ff faa3 	bl	800e560 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f01a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f01c:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800f01e:	4283      	cmp	r3, r0
 800f020:	d84d      	bhi.n	800f0be <prvTimerTask+0xca>
	xLastTime = xTimeNow;
 800f022:	6368      	str	r0, [r5, #52]	; 0x34
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f024:	4287      	cmp	r7, r0
 800f026:	d960      	bls.n	800f0ea <prvTimerTask+0xf6>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f028:	1b39      	subs	r1, r7, r4
 800f02a:	6828      	ldr	r0, [r5, #0]
 800f02c:	f7ff f81a 	bl	800e064 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f030:	f7ff fb2e 	bl	800e690 <xTaskResumeAll>
 800f034:	2800      	cmp	r0, #0
 800f036:	d055      	beq.n	800f0e4 <prvTimerTask+0xf0>
 800f038:	2684      	movs	r6, #132	; 0x84
 800f03a:	00b6      	lsls	r6, r6, #2
 800f03c:	27c7      	movs	r7, #199	; 0xc7
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f03e:	2300      	movs	r3, #0
 800f040:	2200      	movs	r2, #0
 800f042:	a904      	add	r1, sp, #16
 800f044:	6828      	ldr	r0, [r5, #0]
 800f046:	f7fe ff09 	bl	800de5c <xQueueGenericReceive>
 800f04a:	2800      	cmp	r0, #0
 800f04c:	d0db      	beq.n	800f006 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f04e:	9b04      	ldr	r3, [sp, #16]
 800f050:	9c06      	ldr	r4, [sp, #24]
 800f052:	9302      	str	r3, [sp, #8]
 800f054:	2b00      	cmp	r3, #0
 800f056:	da0b      	bge.n	800f070 <prvTimerTask+0x7c>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f058:	9b07      	ldr	r3, [sp, #28]
 800f05a:	0020      	movs	r0, r4
 800f05c:	9302      	str	r3, [sp, #8]
 800f05e:	9b05      	ldr	r3, [sp, #20]
 800f060:	9902      	ldr	r1, [sp, #8]
 800f062:	9303      	str	r3, [sp, #12]
 800f064:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f066:	9b04      	ldr	r3, [sp, #16]
 800f068:	9302      	str	r3, [sp, #8]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	dbe7      	blt.n	800f03e <prvTimerTask+0x4a>
 800f06e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f070:	6963      	ldr	r3, [r4, #20]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d002      	beq.n	800f07c <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f076:	1d20      	adds	r0, r4, #4
 800f078:	f7fe fcb4 	bl	800d9e4 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800f07c:	f7ff fa70 	bl	800e560 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f080:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f082:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 800f084:	4298      	cmp	r0, r3
 800f086:	d320      	bcc.n	800f0ca <prvTimerTask+0xd6>
	xLastTime = xTimeNow;
 800f088:	464b      	mov	r3, r9
 800f08a:	636b      	str	r3, [r5, #52]	; 0x34
 800f08c:	9b04      	ldr	r3, [sp, #16]
 800f08e:	2b09      	cmp	r3, #9
 800f090:	d8d5      	bhi.n	800f03e <prvTimerTask+0x4a>
 800f092:	4642      	mov	r2, r8
 800f094:	409a      	lsls	r2, r3
 800f096:	0013      	movs	r3, r2
 800f098:	4032      	ands	r2, r6
 800f09a:	4692      	mov	sl, r2
 800f09c:	d15a      	bne.n	800f154 <prvTimerTask+0x160>
 800f09e:	421f      	tst	r7, r3
 800f0a0:	d132      	bne.n	800f108 <prvTimerTask+0x114>
 800f0a2:	069b      	lsls	r3, r3, #26
 800f0a4:	d5cb      	bpl.n	800f03e <prvTimerTask+0x4a>
					vPortFree( pxTimer );
 800f0a6:	0020      	movs	r0, r4
 800f0a8:	f000 f9e0 	bl	800f46c <vPortFree>
 800f0ac:	e7c6      	b.n	800f03c <prvTimerTask+0x48>
	vTaskSuspendAll();
 800f0ae:	f7ff fa4f 	bl	800e550 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800f0b2:	f7ff fa55 	bl	800e560 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f0b6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f0b8:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800f0ba:	4298      	cmp	r0, r3
 800f0bc:	d208      	bcs.n	800f0d0 <prvTimerTask+0xdc>
		prvSwitchTimerLists();
 800f0be:	f7ff ff5f 	bl	800ef80 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800f0c2:	636c      	str	r4, [r5, #52]	; 0x34
			( void ) xTaskResumeAll();
 800f0c4:	f7ff fae4 	bl	800e690 <xTaskResumeAll>
 800f0c8:	e7b6      	b.n	800f038 <prvTimerTask+0x44>
		prvSwitchTimerLists();
 800f0ca:	f7ff ff59 	bl	800ef80 <prvSwitchTimerLists>
 800f0ce:	e7db      	b.n	800f088 <prvTimerTask+0x94>
		xNextExpireTime = ( TickType_t ) 0U;
 800f0d0:	2700      	movs	r7, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f0d2:	6828      	ldr	r0, [r5, #0]
 800f0d4:	1b39      	subs	r1, r7, r4
	xLastTime = xTimeNow;
 800f0d6:	636c      	str	r4, [r5, #52]	; 0x34
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f0d8:	f7fe ffc4 	bl	800e064 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f0dc:	f7ff fad8 	bl	800e690 <xTaskResumeAll>
 800f0e0:	2800      	cmp	r0, #0
 800f0e2:	d1a9      	bne.n	800f038 <prvTimerTask+0x44>
					portYIELD_WITHIN_API();
 800f0e4:	f000 f8bc 	bl	800f260 <vPortYield>
 800f0e8:	e7a6      	b.n	800f038 <prvTimerTask+0x44>
				( void ) xTaskResumeAll();
 800f0ea:	f7ff fad1 	bl	800e690 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f0f0:	68db      	ldr	r3, [r3, #12]
 800f0f2:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0f4:	1d30      	adds	r0, r6, #4
 800f0f6:	f7fe fc75 	bl	800d9e4 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f0fa:	69f3      	ldr	r3, [r6, #28]
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d034      	beq.n	800f16a <prvTimerTask+0x176>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f100:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f102:	0030      	movs	r0, r6
 800f104:	4798      	blx	r3
 800f106:	e797      	b.n	800f038 <prvTimerTask+0x44>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f108:	9b05      	ldr	r3, [sp, #20]
 800f10a:	0020      	movs	r0, r4
 800f10c:	9302      	str	r3, [sp, #8]
 800f10e:	9a02      	ldr	r2, [sp, #8]
 800f110:	69a3      	ldr	r3, [r4, #24]
 800f112:	4694      	mov	ip, r2
 800f114:	4463      	add	r3, ip
 800f116:	0019      	movs	r1, r3
 800f118:	0013      	movs	r3, r2
 800f11a:	464a      	mov	r2, r9
 800f11c:	f7ff fea4 	bl	800ee68 <prvInsertTimerInActiveList>
 800f120:	2801      	cmp	r0, #1
 800f122:	d18b      	bne.n	800f03c <prvTimerTask+0x48>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f124:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f126:	0020      	movs	r0, r4
 800f128:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f12a:	69e3      	ldr	r3, [r4, #28]
 800f12c:	2b01      	cmp	r3, #1
 800f12e:	d185      	bne.n	800f03c <prvTimerTask+0x48>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f130:	69a1      	ldr	r1, [r4, #24]
 800f132:	9b05      	ldr	r3, [sp, #20]
 800f134:	468c      	mov	ip, r1
 800f136:	9302      	str	r3, [sp, #8]
 800f138:	4463      	add	r3, ip
 800f13a:	001a      	movs	r2, r3
 800f13c:	4653      	mov	r3, sl
 800f13e:	2100      	movs	r1, #0
 800f140:	9300      	str	r3, [sp, #0]
 800f142:	0020      	movs	r0, r4
 800f144:	2300      	movs	r3, #0
 800f146:	f7ff fef1 	bl	800ef2c <xTimerGenericCommand>
							configASSERT( xResult );
 800f14a:	2800      	cmp	r0, #0
 800f14c:	d000      	beq.n	800f150 <prvTimerTask+0x15c>
 800f14e:	e775      	b.n	800f03c <prvTimerTask+0x48>
 800f150:	b672      	cpsid	i
 800f152:	e7fe      	b.n	800f152 <prvTimerTask+0x15e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f154:	9905      	ldr	r1, [sp, #20]
 800f156:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f158:	2900      	cmp	r1, #0
 800f15a:	d01a      	beq.n	800f192 <prvTimerTask+0x19e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f15c:	4449      	add	r1, r9
 800f15e:	464b      	mov	r3, r9
 800f160:	464a      	mov	r2, r9
 800f162:	0020      	movs	r0, r4
 800f164:	f7ff fe80 	bl	800ee68 <prvInsertTimerInActiveList>
 800f168:	e768      	b.n	800f03c <prvTimerTask+0x48>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f16a:	69b3      	ldr	r3, [r6, #24]
 800f16c:	0022      	movs	r2, r4
 800f16e:	18f9      	adds	r1, r7, r3
 800f170:	0030      	movs	r0, r6
 800f172:	003b      	movs	r3, r7
 800f174:	f7ff fe78 	bl	800ee68 <prvInsertTimerInActiveList>
 800f178:	2801      	cmp	r0, #1
 800f17a:	d1c1      	bne.n	800f100 <prvTimerTask+0x10c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f17c:	2300      	movs	r3, #0
 800f17e:	003a      	movs	r2, r7
 800f180:	9300      	str	r3, [sp, #0]
 800f182:	2100      	movs	r1, #0
 800f184:	0030      	movs	r0, r6
 800f186:	f7ff fed1 	bl	800ef2c <xTimerGenericCommand>
			configASSERT( xResult );
 800f18a:	2800      	cmp	r0, #0
 800f18c:	d1b8      	bne.n	800f100 <prvTimerTask+0x10c>
 800f18e:	b672      	cpsid	i
 800f190:	e7fe      	b.n	800f190 <prvTimerTask+0x19c>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f192:	b672      	cpsid	i
 800f194:	e7fe      	b.n	800f194 <prvTimerTask+0x1a0>
 800f196:	46c0      	nop			; (mov r8, r8)
 800f198:	20002360 	.word	0x20002360

0800f19c <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f19c:	b510      	push	{r4, lr}
 800f19e:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800f1a0:	d101      	bne.n	800f1a6 <pvTimerGetTimerID+0xa>
 800f1a2:	b672      	cpsid	i
 800f1a4:	e7fe      	b.n	800f1a4 <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 800f1a6:	f000 f867 	bl	800f278 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f1aa:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f1ac:	f000 f870 	bl	800f290 <vPortExitCritical>

	return pvReturn;
}
 800f1b0:	0020      	movs	r0, r4
 800f1b2:	bd10      	pop	{r4, pc}

0800f1b4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f1b4:	4b03      	ldr	r3, [pc, #12]	; (800f1c4 <prvTaskExitError+0x10>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	d001      	beq.n	800f1c0 <prvTaskExitError+0xc>
 800f1bc:	b672      	cpsid	i
 800f1be:	e7fe      	b.n	800f1be <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800f1c0:	b672      	cpsid	i
 800f1c2:	e7fe      	b.n	800f1c2 <prvTaskExitError+0xe>
 800f1c4:	200000c4 	.word	0x200000c4

0800f1c8 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f1c8:	4a06      	ldr	r2, [pc, #24]	; (800f1e4 <pxCurrentTCBConst2>)
 800f1ca:	6813      	ldr	r3, [r2, #0]
 800f1cc:	6818      	ldr	r0, [r3, #0]
 800f1ce:	3020      	adds	r0, #32
 800f1d0:	f380 8809 	msr	PSP, r0
 800f1d4:	2002      	movs	r0, #2
 800f1d6:	f380 8814 	msr	CONTROL, r0
 800f1da:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f1dc:	46ae      	mov	lr, r5
 800f1de:	b662      	cpsie	i
 800f1e0:	bd00      	pop	{pc}
 800f1e2:	46c0      	nop			; (mov r8, r8)

0800f1e4 <pxCurrentTCBConst2>:
 800f1e4:	2000223c 	.word	0x2000223c

0800f1e8 <pxPortInitialiseStack>:
{
 800f1e8:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f1ea:	2480      	movs	r4, #128	; 0x80
 800f1ec:	1f03      	subs	r3, r0, #4
 800f1ee:	0464      	lsls	r4, r4, #17
 800f1f0:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f1f2:	3b04      	subs	r3, #4
 800f1f4:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f1f6:	4903      	ldr	r1, [pc, #12]	; (800f204 <pxPortInitialiseStack+0x1c>)
 800f1f8:	3b04      	subs	r3, #4
 800f1fa:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f1fc:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800f1fe:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f200:	601a      	str	r2, [r3, #0]
}
 800f202:	bd10      	pop	{r4, pc}
 800f204:	0800f1b5 	.word	0x0800f1b5

0800f208 <SVC_Handler>:
}
 800f208:	4770      	bx	lr
 800f20a:	46c0      	nop			; (mov r8, r8)

0800f20c <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f20c:	22ff      	movs	r2, #255	; 0xff
 800f20e:	4b0f      	ldr	r3, [pc, #60]	; (800f24c <xPortStartScheduler+0x40>)
 800f210:	0412      	lsls	r2, r2, #16
 800f212:	6819      	ldr	r1, [r3, #0]
{
 800f214:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f216:	430a      	orrs	r2, r1
 800f218:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f21a:	22ff      	movs	r2, #255	; 0xff
 800f21c:	6819      	ldr	r1, [r3, #0]
 800f21e:	0612      	lsls	r2, r2, #24
 800f220:	430a      	orrs	r2, r1
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f222:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f224:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f226:	4b0a      	ldr	r3, [pc, #40]	; (800f250 <xPortStartScheduler+0x44>)
 800f228:	0089      	lsls	r1, r1, #2
 800f22a:	6818      	ldr	r0, [r3, #0]
 800f22c:	f7f0 ff90 	bl	8000150 <__udivsi3>
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f230:	2207      	movs	r2, #7
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f232:	4b08      	ldr	r3, [pc, #32]	; (800f254 <xPortStartScheduler+0x48>)
 800f234:	3801      	subs	r0, #1
 800f236:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f238:	4b07      	ldr	r3, [pc, #28]	; (800f258 <xPortStartScheduler+0x4c>)
 800f23a:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f23c:	2200      	movs	r2, #0
 800f23e:	4b07      	ldr	r3, [pc, #28]	; (800f25c <xPortStartScheduler+0x50>)
 800f240:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f242:	f7ff ffc1 	bl	800f1c8 <vPortStartFirstTask>
	prvTaskExitError();
 800f246:	f7ff ffb5 	bl	800f1b4 <prvTaskExitError>
 800f24a:	46c0      	nop			; (mov r8, r8)
 800f24c:	e000ed20 	.word	0xe000ed20
 800f250:	200000b0 	.word	0x200000b0
 800f254:	e000e014 	.word	0xe000e014
 800f258:	e000e010 	.word	0xe000e010
 800f25c:	200000c4 	.word	0x200000c4

0800f260 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f260:	2280      	movs	r2, #128	; 0x80
 800f262:	4b04      	ldr	r3, [pc, #16]	; (800f274 <vPortYield+0x14>)
 800f264:	0552      	lsls	r2, r2, #21
 800f266:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f268:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f26c:	f3bf 8f6f 	isb	sy
}
 800f270:	4770      	bx	lr
 800f272:	46c0      	nop			; (mov r8, r8)
 800f274:	e000ed04 	.word	0xe000ed04

0800f278 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f278:	b672      	cpsid	i
    uxCriticalNesting++;
 800f27a:	4a04      	ldr	r2, [pc, #16]	; (800f28c <vPortEnterCritical+0x14>)
 800f27c:	6813      	ldr	r3, [r2, #0]
 800f27e:	3301      	adds	r3, #1
 800f280:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f282:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f286:	f3bf 8f6f 	isb	sy
}
 800f28a:	4770      	bx	lr
 800f28c:	200000c4 	.word	0x200000c4

0800f290 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800f290:	4a05      	ldr	r2, [pc, #20]	; (800f2a8 <vPortExitCritical+0x18>)
 800f292:	6813      	ldr	r3, [r2, #0]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d101      	bne.n	800f29c <vPortExitCritical+0xc>
 800f298:	b672      	cpsid	i
 800f29a:	e7fe      	b.n	800f29a <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800f29c:	3b01      	subs	r3, #1
 800f29e:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d100      	bne.n	800f2a6 <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
 800f2a4:	b662      	cpsie	i
}
 800f2a6:	4770      	bx	lr
 800f2a8:	200000c4 	.word	0x200000c4

0800f2ac <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f2ac:	f3ef 8010 	mrs	r0, PRIMASK
 800f2b0:	b672      	cpsid	i
 800f2b2:	4770      	bx	lr
}
 800f2b4:	2000      	movs	r0, #0
 800f2b6:	46c0      	nop			; (mov r8, r8)

0800f2b8 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f2b8:	f380 8810 	msr	PRIMASK, r0
 800f2bc:	4770      	bx	lr
 800f2be:	46c0      	nop			; (mov r8, r8)

0800f2c0 <PendSV_Handler>:
	__asm volatile
 800f2c0:	f3ef 8009 	mrs	r0, PSP
 800f2c4:	4b0e      	ldr	r3, [pc, #56]	; (800f300 <pxCurrentTCBConst>)
 800f2c6:	681a      	ldr	r2, [r3, #0]
 800f2c8:	3820      	subs	r0, #32
 800f2ca:	6010      	str	r0, [r2, #0]
 800f2cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f2ce:	4644      	mov	r4, r8
 800f2d0:	464d      	mov	r5, r9
 800f2d2:	4656      	mov	r6, sl
 800f2d4:	465f      	mov	r7, fp
 800f2d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f2d8:	b508      	push	{r3, lr}
 800f2da:	b672      	cpsid	i
 800f2dc:	f7ff fafe 	bl	800e8dc <vTaskSwitchContext>
 800f2e0:	b662      	cpsie	i
 800f2e2:	bc0c      	pop	{r2, r3}
 800f2e4:	6811      	ldr	r1, [r2, #0]
 800f2e6:	6808      	ldr	r0, [r1, #0]
 800f2e8:	3010      	adds	r0, #16
 800f2ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f2ec:	46a0      	mov	r8, r4
 800f2ee:	46a9      	mov	r9, r5
 800f2f0:	46b2      	mov	sl, r6
 800f2f2:	46bb      	mov	fp, r7
 800f2f4:	f380 8809 	msr	PSP, r0
 800f2f8:	3820      	subs	r0, #32
 800f2fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f2fc:	4718      	bx	r3
 800f2fe:	46c0      	nop			; (mov r8, r8)

0800f300 <pxCurrentTCBConst>:
 800f300:	2000223c 	.word	0x2000223c

0800f304 <xPortSysTickHandler>:
{
 800f304:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f306:	f7ff ffd1 	bl	800f2ac <ulSetInterruptMaskFromISR>
 800f30a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800f30c:	f7ff f934 	bl	800e578 <xTaskIncrementTick>
 800f310:	2800      	cmp	r0, #0
 800f312:	d003      	beq.n	800f31c <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800f314:	2280      	movs	r2, #128	; 0x80
 800f316:	4b03      	ldr	r3, [pc, #12]	; (800f324 <xPortSysTickHandler+0x20>)
 800f318:	0552      	lsls	r2, r2, #21
 800f31a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f31c:	0020      	movs	r0, r4
 800f31e:	f7ff ffcb 	bl	800f2b8 <vClearInterruptMaskFromISR>
}
 800f322:	bd10      	pop	{r4, pc}
 800f324:	e000ed04 	.word	0xe000ed04

0800f328 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f328:	4b11      	ldr	r3, [pc, #68]	; (800f370 <prvInsertBlockIntoFreeList+0x48>)
{
 800f32a:	b530      	push	{r4, r5, lr}
 800f32c:	001d      	movs	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f32e:	681a      	ldr	r2, [r3, #0]
 800f330:	4282      	cmp	r2, r0
 800f332:	d201      	bcs.n	800f338 <prvInsertBlockIntoFreeList+0x10>
 800f334:	0013      	movs	r3, r2
 800f336:	e7fa      	b.n	800f32e <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f338:	685c      	ldr	r4, [r3, #4]
 800f33a:	1919      	adds	r1, r3, r4
 800f33c:	4288      	cmp	r0, r1
 800f33e:	d103      	bne.n	800f348 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f340:	6841      	ldr	r1, [r0, #4]
 800f342:	0018      	movs	r0, r3
 800f344:	1909      	adds	r1, r1, r4
 800f346:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f348:	6841      	ldr	r1, [r0, #4]
 800f34a:	1844      	adds	r4, r0, r1
 800f34c:	42a2      	cmp	r2, r4
 800f34e:	d109      	bne.n	800f364 <prvInsertBlockIntoFreeList+0x3c>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f350:	68ac      	ldr	r4, [r5, #8]
 800f352:	42a2      	cmp	r2, r4
 800f354:	d006      	beq.n	800f364 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f356:	6854      	ldr	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f358:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f35a:	46a4      	mov	ip, r4
 800f35c:	4461      	add	r1, ip
 800f35e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f360:	6002      	str	r2, [r0, #0]
 800f362:	e000      	b.n	800f366 <prvInsertBlockIntoFreeList+0x3e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f364:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f366:	4298      	cmp	r0, r3
 800f368:	d000      	beq.n	800f36c <prvInsertBlockIntoFreeList+0x44>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f36a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f36c:	bd30      	pop	{r4, r5, pc}
 800f36e:	46c0      	nop			; (mov r8, r8)
 800f370:	20002398 	.word	0x20002398

0800f374 <pvPortMalloc>:
{
 800f374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f376:	46c6      	mov	lr, r8
 800f378:	b500      	push	{lr}
 800f37a:	0005      	movs	r5, r0
	vTaskSuspendAll();
 800f37c:	f7ff f8e8 	bl	800e550 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f380:	4c37      	ldr	r4, [pc, #220]	; (800f460 <pvPortMalloc+0xec>)
 800f382:	68a3      	ldr	r3, [r4, #8]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d02a      	beq.n	800f3de <pvPortMalloc+0x6a>
 800f388:	68e6      	ldr	r6, [r4, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f38a:	422e      	tst	r6, r5
 800f38c:	d143      	bne.n	800f416 <pvPortMalloc+0xa2>
			if( xWantedSize > 0 )
 800f38e:	2d00      	cmp	r5, #0
 800f390:	d041      	beq.n	800f416 <pvPortMalloc+0xa2>
				xWantedSize += xHeapStructSize;
 800f392:	002b      	movs	r3, r5
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f394:	2207      	movs	r2, #7
				xWantedSize += xHeapStructSize;
 800f396:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f398:	421a      	tst	r2, r3
 800f39a:	d001      	beq.n	800f3a0 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f39c:	4393      	bics	r3, r2
 800f39e:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d038      	beq.n	800f416 <pvPortMalloc+0xa2>
 800f3a4:	6962      	ldr	r2, [r4, #20]
 800f3a6:	4690      	mov	r8, r2
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d334      	bcc.n	800f416 <pvPortMalloc+0xa2>
				pxBlock = xStart.pxNextFreeBlock;
 800f3ac:	6825      	ldr	r5, [r4, #0]
				pxPreviousBlock = &xStart;
 800f3ae:	0021      	movs	r1, r4
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3b0:	e004      	b.n	800f3bc <pvPortMalloc+0x48>
 800f3b2:	6828      	ldr	r0, [r5, #0]
 800f3b4:	2800      	cmp	r0, #0
 800f3b6:	d004      	beq.n	800f3c2 <pvPortMalloc+0x4e>
 800f3b8:	0029      	movs	r1, r5
 800f3ba:	0005      	movs	r5, r0
 800f3bc:	686a      	ldr	r2, [r5, #4]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d3f7      	bcc.n	800f3b2 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800f3c2:	68a0      	ldr	r0, [r4, #8]
 800f3c4:	42a8      	cmp	r0, r5
 800f3c6:	d026      	beq.n	800f416 <pvPortMalloc+0xa2>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f3c8:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f3ca:	680f      	ldr	r7, [r1, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f3cc:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f3ce:	1ad1      	subs	r1, r2, r3
 800f3d0:	2910      	cmp	r1, #16
 800f3d2:	d931      	bls.n	800f438 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f3d4:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3d6:	0742      	lsls	r2, r0, #29
 800f3d8:	d029      	beq.n	800f42e <pvPortMalloc+0xba>
 800f3da:	b672      	cpsid	i
 800f3dc:	e7fe      	b.n	800f3dc <pvPortMalloc+0x68>
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f3de:	2107      	movs	r1, #7
	ulAddress = ( uint32_t ) ucHeap;
 800f3e0:	4b20      	ldr	r3, [pc, #128]	; (800f464 <pvPortMalloc+0xf0>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f3e2:	4219      	tst	r1, r3
 800f3e4:	d020      	beq.n	800f428 <pvPortMalloc+0xb4>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800f3e6:	185a      	adds	r2, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f3e8:	438a      	bics	r2, r1
 800f3ea:	0011      	movs	r1, r2
	ulAddress -= xHeapStructSize;
 800f3ec:	4e1e      	ldr	r6, [pc, #120]	; (800f468 <pvPortMalloc+0xf4>)
	xStart.xBlockSize = ( size_t ) 0;
 800f3ee:	2000      	movs	r0, #0
	ulAddress -= xHeapStructSize;
 800f3f0:	46b4      	mov	ip, r6
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f3f2:	2607      	movs	r6, #7
	ulAddress -= xHeapStructSize;
 800f3f4:	4463      	add	r3, ip
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f3f6:	43b3      	bics	r3, r6
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f3f8:	2680      	movs	r6, #128	; 0x80
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f3fa:	1a9a      	subs	r2, r3, r2
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f3fc:	0636      	lsls	r6, r6, #24
	xStart.xBlockSize = ( size_t ) 0;
 800f3fe:	6060      	str	r0, [r4, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f400:	6021      	str	r1, [r4, #0]
	pxEnd->xBlockSize = 0;
 800f402:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f404:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) ulAddress;
 800f406:	60a3      	str	r3, [r4, #8]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f408:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f40a:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f40c:	6122      	str	r2, [r4, #16]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f40e:	6162      	str	r2, [r4, #20]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f410:	60e6      	str	r6, [r4, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f412:	422e      	tst	r6, r5
 800f414:	d0bb      	beq.n	800f38e <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
 800f416:	f7ff f93b 	bl	800e690 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800f41a:	f7fd fc2b 	bl	800cc74 <vApplicationMallocFailedHook>
 800f41e:	2700      	movs	r7, #0
}
 800f420:	0038      	movs	r0, r7
 800f422:	bc04      	pop	{r2}
 800f424:	4690      	mov	r8, r2
 800f426:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f428:	001a      	movs	r2, r3
 800f42a:	0019      	movs	r1, r3
 800f42c:	e7de      	b.n	800f3ec <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f42e:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f430:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800f432:	f7ff ff79 	bl	800f328 <prvInsertBlockIntoFreeList>
 800f436:	686a      	ldr	r2, [r5, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f438:	4643      	mov	r3, r8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f43a:	6921      	ldr	r1, [r4, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f43c:	1a9b      	subs	r3, r3, r2
 800f43e:	6163      	str	r3, [r4, #20]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f440:	428b      	cmp	r3, r1
 800f442:	d200      	bcs.n	800f446 <pvPortMalloc+0xd2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f444:	6123      	str	r3, [r4, #16]
					pxBlock->pxNextFreeBlock = NULL;
 800f446:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f448:	4332      	orrs	r2, r6
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f44a:	3708      	adds	r7, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f44c:	606a      	str	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f44e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800f450:	f7ff f91e 	bl	800e690 <xTaskResumeAll>
		if( pvReturn == NULL )
 800f454:	2f00      	cmp	r7, #0
 800f456:	d0e0      	beq.n	800f41a <pvPortMalloc+0xa6>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f458:	077b      	lsls	r3, r7, #29
 800f45a:	d0e1      	beq.n	800f420 <pvPortMalloc+0xac>
 800f45c:	b672      	cpsid	i
 800f45e:	e7fe      	b.n	800f45e <pvPortMalloc+0xea>
 800f460:	20002398 	.word	0x20002398
 800f464:	200023b0 	.word	0x200023b0
 800f468:	00004a30 	.word	0x00004a30

0800f46c <vPortFree>:
{
 800f46c:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800f46e:	2800      	cmp	r0, #0
 800f470:	d01b      	beq.n	800f4aa <vPortFree+0x3e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f472:	4d0e      	ldr	r5, [pc, #56]	; (800f4ac <vPortFree+0x40>)
 800f474:	3808      	subs	r0, #8
 800f476:	6843      	ldr	r3, [r0, #4]
 800f478:	68ea      	ldr	r2, [r5, #12]
 800f47a:	0004      	movs	r4, r0
 800f47c:	421a      	tst	r2, r3
 800f47e:	d101      	bne.n	800f484 <vPortFree+0x18>
 800f480:	b672      	cpsid	i
 800f482:	e7fe      	b.n	800f482 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f484:	6801      	ldr	r1, [r0, #0]
 800f486:	2900      	cmp	r1, #0
 800f488:	d001      	beq.n	800f48e <vPortFree+0x22>
 800f48a:	b672      	cpsid	i
 800f48c:	e7fe      	b.n	800f48c <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f48e:	4393      	bics	r3, r2
 800f490:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800f492:	f7ff f85d 	bl	800e550 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f496:	696a      	ldr	r2, [r5, #20]
 800f498:	6863      	ldr	r3, [r4, #4]
 800f49a:	4694      	mov	ip, r2
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f49c:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f49e:	4463      	add	r3, ip
 800f4a0:	616b      	str	r3, [r5, #20]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f4a2:	f7ff ff41 	bl	800f328 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800f4a6:	f7ff f8f3 	bl	800e690 <xTaskResumeAll>
}
 800f4aa:	bd70      	pop	{r4, r5, r6, pc}
 800f4ac:	20002398 	.word	0x20002398

0800f4b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f4b0:	b510      	push	{r4, lr}
 800f4b2:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f4b4:	f002 f8de 	bl	8011674 <HAL_RCC_GetHCLKFreq>
 800f4b8:	21fa      	movs	r1, #250	; 0xfa
 800f4ba:	0089      	lsls	r1, r1, #2
 800f4bc:	f7f0 fe48 	bl	8000150 <__udivsi3>
 800f4c0:	f000 fb78 	bl	800fbb4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800f4c4:	2001      	movs	r0, #1
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	0021      	movs	r1, r4
 800f4ca:	4240      	negs	r0, r0
 800f4cc:	f000 fb32 	bl	800fb34 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800f4d0:	2000      	movs	r0, #0
 800f4d2:	bd10      	pop	{r4, pc}

0800f4d4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f4d4:	2110      	movs	r1, #16
 800f4d6:	4a06      	ldr	r2, [pc, #24]	; (800f4f0 <HAL_Init+0x1c>)
{
 800f4d8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f4da:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f4dc:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f4de:	430b      	orrs	r3, r1
 800f4e0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f4e2:	f7ff ffe5 	bl	800f4b0 <HAL_InitTick>
  HAL_MspInit();
 800f4e6:	f001 fcb9 	bl	8010e5c <HAL_MspInit>
}
 800f4ea:	2000      	movs	r0, #0
 800f4ec:	bd10      	pop	{r4, pc}
 800f4ee:	46c0      	nop			; (mov r8, r8)
 800f4f0:	40022000 	.word	0x40022000

0800f4f4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800f4f4:	4a02      	ldr	r2, [pc, #8]	; (800f500 <HAL_IncTick+0xc>)
 800f4f6:	6813      	ldr	r3, [r2, #0]
 800f4f8:	3301      	adds	r3, #1
 800f4fa:	6013      	str	r3, [r2, #0]
}
 800f4fc:	4770      	bx	lr
 800f4fe:	46c0      	nop			; (mov r8, r8)
 800f500:	20006de8 	.word	0x20006de8

0800f504 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800f504:	4b01      	ldr	r3, [pc, #4]	; (800f50c <HAL_GetTick+0x8>)
 800f506:	6818      	ldr	r0, [r3, #0]
}
 800f508:	4770      	bx	lr
 800f50a:	46c0      	nop			; (mov r8, r8)
 800f50c:	20006de8 	.word	0x20006de8

0800f510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800f510:	b510      	push	{r4, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800f516:	f7ff fff5 	bl	800f504 <HAL_GetTick>
 800f51a:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800f51c:	f7ff fff2 	bl	800f504 <HAL_GetTick>
 800f520:	9b01      	ldr	r3, [sp, #4]
 800f522:	1b00      	subs	r0, r0, r4
 800f524:	4298      	cmp	r0, r3
 800f526:	d3f9      	bcc.n	800f51c <HAL_Delay+0xc>
  {
  }
}
 800f528:	b002      	add	sp, #8
 800f52a:	bd10      	pop	{r4, pc}

0800f52c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800f52c:	4b01      	ldr	r3, [pc, #4]	; (800f534 <HAL_GetREVID+0x8>)
 800f52e:	6818      	ldr	r0, [r3, #0]
 800f530:	0c00      	lsrs	r0, r0, #16
}
 800f532:	4770      	bx	lr
 800f534:	40015800 	.word	0x40015800

0800f538 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800f538:	4b02      	ldr	r3, [pc, #8]	; (800f544 <HAL_GetDEVID+0xc>)
 800f53a:	6818      	ldr	r0, [r3, #0]
 800f53c:	0500      	lsls	r0, r0, #20
 800f53e:	0d00      	lsrs	r0, r0, #20
}
 800f540:	4770      	bx	lr
 800f542:	46c0      	nop			; (mov r8, r8)
 800f544:	40015800 	.word	0x40015800

0800f548 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f548:	2303      	movs	r3, #3
 800f54a:	6802      	ldr	r2, [r0, #0]
{
 800f54c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f54e:	6891      	ldr	r1, [r2, #8]
{
 800f550:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f552:	400b      	ands	r3, r1
 800f554:	2b01      	cmp	r3, #1
 800f556:	d001      	beq.n	800f55c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800f558:	2000      	movs	r0, #0
}
 800f55a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f55c:	6811      	ldr	r1, [r2, #0]
 800f55e:	420b      	tst	r3, r1
 800f560:	d00e      	beq.n	800f580 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800f562:	2305      	movs	r3, #5
 800f564:	6891      	ldr	r1, [r2, #8]
 800f566:	400b      	ands	r3, r1
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d00d      	beq.n	800f588 <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f56c:	2210      	movs	r2, #16
 800f56e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800f570:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f572:	4313      	orrs	r3, r2
 800f574:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f576:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f578:	3a0f      	subs	r2, #15
 800f57a:	4313      	orrs	r3, r2
 800f57c:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800f57e:	e7ec      	b.n	800f55a <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f580:	68d3      	ldr	r3, [r2, #12]
 800f582:	041b      	lsls	r3, r3, #16
 800f584:	d4ed      	bmi.n	800f562 <ADC_Disable+0x1a>
 800f586:	e7e7      	b.n	800f558 <ADC_Disable+0x10>
      __HAL_ADC_DISABLE(hadc);
 800f588:	2102      	movs	r1, #2
 800f58a:	6893      	ldr	r3, [r2, #8]
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f58c:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 800f58e:	430b      	orrs	r3, r1
 800f590:	6093      	str	r3, [r2, #8]
 800f592:	2303      	movs	r3, #3
 800f594:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800f596:	f7ff ffb5 	bl	800f504 <HAL_GetTick>
 800f59a:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f59c:	e004      	b.n	800f5a8 <ADC_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800f59e:	f7ff ffb1 	bl	800f504 <HAL_GetTick>
 800f5a2:	1b80      	subs	r0, r0, r6
 800f5a4:	2802      	cmp	r0, #2
 800f5a6:	d804      	bhi.n	800f5b2 <ADC_Disable+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f5a8:	6823      	ldr	r3, [r4, #0]
 800f5aa:	689b      	ldr	r3, [r3, #8]
 800f5ac:	421d      	tst	r5, r3
 800f5ae:	d1f6      	bne.n	800f59e <ADC_Disable+0x56>
 800f5b0:	e7d2      	b.n	800f558 <ADC_Disable+0x10>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f5b2:	2210      	movs	r2, #16
 800f5b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800f5b6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f5b8:	4313      	orrs	r3, r2
 800f5ba:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f5bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f5be:	431d      	orrs	r5, r3
 800f5c0:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f5c2:	e7ca      	b.n	800f55a <ADC_Disable+0x12>

0800f5c4 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 800f5c4:	2300      	movs	r3, #0
{
 800f5c6:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f5c8:	6802      	ldr	r2, [r0, #0]
{
 800f5ca:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 800f5cc:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f5ce:	6891      	ldr	r1, [r2, #8]
 800f5d0:	3303      	adds	r3, #3
{
 800f5d2:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f5d4:	400b      	ands	r3, r1
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	d031      	beq.n	800f63e <ADC_Enable+0x7a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f5da:	6891      	ldr	r1, [r2, #8]
 800f5dc:	4b20      	ldr	r3, [pc, #128]	; (800f660 <ADC_Enable+0x9c>)
 800f5de:	4219      	tst	r1, r3
 800f5e0:	d122      	bne.n	800f628 <ADC_Enable+0x64>
    __HAL_ADC_ENABLE(hadc);
 800f5e2:	2101      	movs	r1, #1
 800f5e4:	6893      	ldr	r3, [r2, #8]
 800f5e6:	430b      	orrs	r3, r1
 800f5e8:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800f5ea:	4b1e      	ldr	r3, [pc, #120]	; (800f664 <ADC_Enable+0xa0>)
 800f5ec:	491e      	ldr	r1, [pc, #120]	; (800f668 <ADC_Enable+0xa4>)
 800f5ee:	6818      	ldr	r0, [r3, #0]
 800f5f0:	f7f0 fdae 	bl	8000150 <__udivsi3>
 800f5f4:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800f5f6:	9b01      	ldr	r3, [sp, #4]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d005      	beq.n	800f608 <ADC_Enable+0x44>
      wait_loop_index--;
 800f5fc:	9b01      	ldr	r3, [sp, #4]
 800f5fe:	3b01      	subs	r3, #1
 800f600:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800f602:	9b01      	ldr	r3, [sp, #4]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d1f9      	bne.n	800f5fc <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800f608:	f7ff ff7c 	bl	800f504 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f60c:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800f60e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f610:	e004      	b.n	800f61c <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f612:	f7ff ff77 	bl	800f504 <HAL_GetTick>
 800f616:	1b80      	subs	r0, r0, r6
 800f618:	2802      	cmp	r0, #2
 800f61a:	d818      	bhi.n	800f64e <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f61c:	6823      	ldr	r3, [r4, #0]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	421d      	tst	r5, r3
 800f622:	d0f6      	beq.n	800f612 <ADC_Enable+0x4e>
  return HAL_OK;
 800f624:	2000      	movs	r0, #0
 800f626:	e008      	b.n	800f63a <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f628:	2210      	movs	r2, #16
      return HAL_ERROR;
 800f62a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f62c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f62e:	4313      	orrs	r3, r2
 800f630:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f632:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f634:	3a0f      	subs	r2, #15
 800f636:	4313      	orrs	r3, r2
 800f638:	64a3      	str	r3, [r4, #72]	; 0x48
}
 800f63a:	b002      	add	sp, #8
 800f63c:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f63e:	6811      	ldr	r1, [r2, #0]
 800f640:	420b      	tst	r3, r1
 800f642:	d1ef      	bne.n	800f624 <ADC_Enable+0x60>
 800f644:	68d3      	ldr	r3, [r2, #12]
 800f646:	041b      	lsls	r3, r3, #16
 800f648:	d5c7      	bpl.n	800f5da <ADC_Enable+0x16>
  return HAL_OK;
 800f64a:	2000      	movs	r0, #0
 800f64c:	e7f5      	b.n	800f63a <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f64e:	2210      	movs	r2, #16
 800f650:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800f652:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f654:	4313      	orrs	r3, r2
 800f656:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f658:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f65a:	431d      	orrs	r5, r3
 800f65c:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f65e:	e7ec      	b.n	800f63a <ADC_Enable+0x76>
 800f660:	80000017 	.word	0x80000017
 800f664:	200000b0 	.word	0x200000b0
 800f668:	000f4240 	.word	0x000f4240

0800f66c <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f66c:	2204      	movs	r2, #4
 800f66e:	6803      	ldr	r3, [r0, #0]
{
 800f670:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f672:	6899      	ldr	r1, [r3, #8]
{
 800f674:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f676:	420a      	tst	r2, r1
 800f678:	d010      	beq.n	800f69c <ADC_ConversionStop+0x30>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f67a:	6899      	ldr	r1, [r3, #8]
 800f67c:	420a      	tst	r2, r1
 800f67e:	d10f      	bne.n	800f6a0 <ADC_ConversionStop+0x34>
      hadc->Instance->CR |= ADC_CR_ADSTP;
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800f680:	f7ff ff40 	bl	800f504 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f684:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 800f686:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f688:	e004      	b.n	800f694 <ADC_ConversionStop+0x28>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800f68a:	f7ff ff3b 	bl	800f504 <HAL_GetTick>
 800f68e:	1b80      	subs	r0, r0, r6
 800f690:	2802      	cmp	r0, #2
 800f692:	d80d      	bhi.n	800f6b0 <ADC_ConversionStop+0x44>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f694:	6823      	ldr	r3, [r4, #0]
 800f696:	689b      	ldr	r3, [r3, #8]
 800f698:	421d      	tst	r5, r3
 800f69a:	d1f6      	bne.n	800f68a <ADC_ConversionStop+0x1e>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800f69c:	2000      	movs	r0, #0
}
 800f69e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800f6a0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f6a2:	0792      	lsls	r2, r2, #30
 800f6a4:	d4ec      	bmi.n	800f680 <ADC_ConversionStop+0x14>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800f6a6:	2110      	movs	r1, #16
 800f6a8:	689a      	ldr	r2, [r3, #8]
 800f6aa:	430a      	orrs	r2, r1
 800f6ac:	609a      	str	r2, [r3, #8]
 800f6ae:	e7e7      	b.n	800f680 <ADC_ConversionStop+0x14>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f6b0:	2210      	movs	r2, #16
 800f6b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f6b4:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f6b6:	4313      	orrs	r3, r2
 800f6b8:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f6ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f6bc:	3a0f      	subs	r2, #15
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	64a3      	str	r3, [r4, #72]	; 0x48
 800f6c2:	e7ec      	b.n	800f69e <ADC_ConversionStop+0x32>

0800f6c4 <HAL_ADC_MspInit>:
}
 800f6c4:	4770      	bx	lr
 800f6c6:	46c0      	nop			; (mov r8, r8)

0800f6c8 <HAL_ADC_Init>:
{
 800f6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ca:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800f6cc:	d100      	bne.n	800f6d0 <HAL_ADC_Init+0x8>
 800f6ce:	e075      	b.n	800f7bc <HAL_ADC_Init+0xf4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f6d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d068      	beq.n	800f7a8 <HAL_ADC_Init+0xe0>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f6d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f6d8:	06db      	lsls	r3, r3, #27
 800f6da:	d505      	bpl.n	800f6e8 <HAL_ADC_Init+0x20>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f6dc:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 800f6de:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f6e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f6e2:	4313      	orrs	r3, r2
 800f6e4:	6463      	str	r3, [r4, #68]	; 0x44
}
 800f6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800f6e8:	2004      	movs	r0, #4
 800f6ea:	6823      	ldr	r3, [r4, #0]
 800f6ec:	689a      	ldr	r2, [r3, #8]
 800f6ee:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800f6f0:	d1f4      	bne.n	800f6dc <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800f6f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f6f4:	4942      	ldr	r1, [pc, #264]	; (800f800 <HAL_ADC_Init+0x138>)
 800f6f6:	400a      	ands	r2, r1
 800f6f8:	3106      	adds	r1, #6
 800f6fa:	31ff      	adds	r1, #255	; 0xff
 800f6fc:	430a      	orrs	r2, r1
 800f6fe:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f700:	2203      	movs	r2, #3
 800f702:	6899      	ldr	r1, [r3, #8]
 800f704:	400a      	ands	r2, r1
 800f706:	2a01      	cmp	r2, #1
 800f708:	d073      	beq.n	800f7f2 <HAL_ADC_Init+0x12a>
      MODIFY_REG(hadc->Instance->CFGR1,
 800f70a:	2118      	movs	r1, #24
 800f70c:	68da      	ldr	r2, [r3, #12]
 800f70e:	438a      	bics	r2, r1
 800f710:	68a1      	ldr	r1, [r4, #8]
 800f712:	430a      	orrs	r2, r1
 800f714:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800f716:	691a      	ldr	r2, [r3, #16]
 800f718:	6861      	ldr	r1, [r4, #4]
 800f71a:	0092      	lsls	r2, r2, #2
 800f71c:	0892      	lsrs	r2, r2, #2
 800f71e:	430a      	orrs	r2, r1
 800f720:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f722:	68da      	ldr	r2, [r3, #12]
 800f724:	4937      	ldr	r1, [pc, #220]	; (800f804 <HAL_ADC_Init+0x13c>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f726:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f728:	400a      	ands	r2, r1
 800f72a:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f72c:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f72e:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f730:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800f732:	69e2      	ldr	r2, [r4, #28]
 800f734:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f736:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800f738:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f73a:	3a01      	subs	r2, #1
 800f73c:	1e55      	subs	r5, r2, #1
 800f73e:	41aa      	sbcs	r2, r5
 800f740:	0315      	lsls	r5, r2, #12
 800f742:	68e2      	ldr	r2, [r4, #12]
 800f744:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f746:	6922      	ldr	r2, [r4, #16]
 800f748:	4339      	orrs	r1, r7
 800f74a:	2a02      	cmp	r2, #2
 800f74c:	d100      	bne.n	800f750 <HAL_ADC_Init+0x88>
 800f74e:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800f750:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f752:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f754:	430a      	orrs	r2, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f756:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f758:	432a      	orrs	r2, r5
 800f75a:	4302      	orrs	r2, r0
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f75c:	2901      	cmp	r1, #1
 800f75e:	d042      	beq.n	800f7e6 <HAL_ADC_Init+0x11e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f760:	20c2      	movs	r0, #194	; 0xc2
 800f762:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f764:	30ff      	adds	r0, #255	; 0xff
 800f766:	4281      	cmp	r1, r0
 800f768:	d002      	beq.n	800f770 <HAL_ADC_Init+0xa8>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800f76a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f76c:	4301      	orrs	r1, r0
 800f76e:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f770:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f772:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f774:	4311      	orrs	r1, r2
 800f776:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f778:	2180      	movs	r1, #128	; 0x80
 800f77a:	0549      	lsls	r1, r1, #21
 800f77c:	428d      	cmp	r5, r1
 800f77e:	d01f      	beq.n	800f7c0 <HAL_ADC_Init+0xf8>
 800f780:	1e69      	subs	r1, r5, #1
 800f782:	2906      	cmp	r1, #6
 800f784:	d91c      	bls.n	800f7c0 <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	491f      	ldr	r1, [pc, #124]	; (800f808 <HAL_ADC_Init+0x140>)
 800f78a:	400b      	ands	r3, r1
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d020      	beq.n	800f7d2 <HAL_ADC_Init+0x10a>
      ADC_STATE_CLR_SET(hadc->State,
 800f790:	2212      	movs	r2, #18
 800f792:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 800f794:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800f796:	4393      	bics	r3, r2
 800f798:	3a02      	subs	r2, #2
 800f79a:	4313      	orrs	r3, r2
 800f79c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f79e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f7a0:	3a0f      	subs	r2, #15
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	64a3      	str	r3, [r4, #72]	; 0x48
 800f7a6:	e79e      	b.n	800f6e6 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800f7a8:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800f7aa:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800f7ac:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800f7ae:	f7ff ff89 	bl	800f6c4 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f7b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f7b4:	06db      	lsls	r3, r3, #27
 800f7b6:	d500      	bpl.n	800f7ba <HAL_ADC_Init+0xf2>
 800f7b8:	e790      	b.n	800f6dc <HAL_ADC_Init+0x14>
 800f7ba:	e795      	b.n	800f6e8 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 800f7bc:	2001      	movs	r0, #1
 800f7be:	e792      	b.n	800f6e6 <HAL_ADC_Init+0x1e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800f7c0:	2107      	movs	r1, #7
 800f7c2:	6958      	ldr	r0, [r3, #20]
 800f7c4:	4388      	bics	r0, r1
 800f7c6:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800f7c8:	6958      	ldr	r0, [r3, #20]
 800f7ca:	4029      	ands	r1, r5
 800f7cc:	4301      	orrs	r1, r0
 800f7ce:	6159      	str	r1, [r3, #20]
 800f7d0:	e7d9      	b.n	800f786 <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 800f7d2:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f7d4:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800f7d6:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800f7d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f7da:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f7dc:	4393      	bics	r3, r2
 800f7de:	3a02      	subs	r2, #2
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	6463      	str	r3, [r4, #68]	; 0x44
 800f7e4:	e77f      	b.n	800f6e6 <HAL_ADC_Init+0x1e>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f7e6:	2e00      	cmp	r6, #0
 800f7e8:	d1ba      	bne.n	800f760 <HAL_ADC_Init+0x98>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800f7ea:	2180      	movs	r1, #128	; 0x80
 800f7ec:	0249      	lsls	r1, r1, #9
 800f7ee:	430a      	orrs	r2, r1
 800f7f0:	e7b6      	b.n	800f760 <HAL_ADC_Init+0x98>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f7f2:	6819      	ldr	r1, [r3, #0]
 800f7f4:	420a      	tst	r2, r1
 800f7f6:	d194      	bne.n	800f722 <HAL_ADC_Init+0x5a>
 800f7f8:	68da      	ldr	r2, [r3, #12]
 800f7fa:	0412      	lsls	r2, r2, #16
 800f7fc:	d491      	bmi.n	800f722 <HAL_ADC_Init+0x5a>
 800f7fe:	e784      	b.n	800f70a <HAL_ADC_Init+0x42>
 800f800:	fffffefd 	.word	0xfffffefd
 800f804:	fffe0219 	.word	0xfffe0219
 800f808:	833fffe7 	.word	0x833fffe7

0800f80c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f80c:	6803      	ldr	r3, [r0, #0]
{
 800f80e:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f810:	689a      	ldr	r2, [r3, #8]
{
 800f812:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f814:	0752      	lsls	r2, r2, #29
 800f816:	d421      	bmi.n	800f85c <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 800f818:	2240      	movs	r2, #64	; 0x40
 800f81a:	5c81      	ldrb	r1, [r0, r2]
 800f81c:	2901      	cmp	r1, #1
 800f81e:	d01d      	beq.n	800f85c <HAL_ADC_Start+0x50>
 800f820:	2101      	movs	r1, #1
 800f822:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f824:	69c2      	ldr	r2, [r0, #28]
 800f826:	2a01      	cmp	r2, #1
 800f828:	d112      	bne.n	800f850 <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 800f82a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f82c:	490c      	ldr	r1, [pc, #48]	; (800f860 <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f82e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f830:	4011      	ands	r1, r2
 800f832:	2280      	movs	r2, #128	; 0x80
 800f834:	0052      	lsls	r2, r2, #1
 800f836:	430a      	orrs	r2, r1
 800f838:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800f83a:	2140      	movs	r1, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 800f83c:	2200      	movs	r2, #0
 800f83e:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800f840:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f842:	321c      	adds	r2, #28
 800f844:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f846:	689a      	ldr	r2, [r3, #8]
 800f848:	393c      	subs	r1, #60	; 0x3c
 800f84a:	430a      	orrs	r2, r1
 800f84c:	609a      	str	r2, [r3, #8]
}
 800f84e:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800f850:	f7ff feb8 	bl	800f5c4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800f854:	2800      	cmp	r0, #0
 800f856:	d1fa      	bne.n	800f84e <HAL_ADC_Start+0x42>
 800f858:	6823      	ldr	r3, [r4, #0]
 800f85a:	e7e6      	b.n	800f82a <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 800f85c:	2002      	movs	r0, #2
 800f85e:	e7f6      	b.n	800f84e <HAL_ADC_Start+0x42>
 800f860:	fffff0fe 	.word	0xfffff0fe

0800f864 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800f864:	2340      	movs	r3, #64	; 0x40
{ 
 800f866:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800f868:	5cc2      	ldrb	r2, [r0, r3]
{ 
 800f86a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800f86c:	2a01      	cmp	r2, #1
 800f86e:	d014      	beq.n	800f89a <HAL_ADC_Stop+0x36>
 800f870:	2501      	movs	r5, #1
 800f872:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800f874:	f7ff fefa 	bl	800f66c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800f878:	2800      	cmp	r0, #0
 800f87a:	d003      	beq.n	800f884 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800f87c:	2340      	movs	r3, #64	; 0x40
 800f87e:	2200      	movs	r2, #0
 800f880:	54e2      	strb	r2, [r4, r3]
}
 800f882:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800f884:	0020      	movs	r0, r4
 800f886:	f7ff fe5f 	bl	800f548 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800f88a:	2800      	cmp	r0, #0
 800f88c:	d1f6      	bne.n	800f87c <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800f88e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f890:	4a03      	ldr	r2, [pc, #12]	; (800f8a0 <HAL_ADC_Stop+0x3c>)
 800f892:	4013      	ands	r3, r2
 800f894:	431d      	orrs	r5, r3
 800f896:	6465      	str	r5, [r4, #68]	; 0x44
 800f898:	e7f0      	b.n	800f87c <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800f89a:	2002      	movs	r0, #2
 800f89c:	e7f1      	b.n	800f882 <HAL_ADC_Stop+0x1e>
 800f89e:	46c0      	nop			; (mov r8, r8)
 800f8a0:	fffffefe 	.word	0xfffffefe

0800f8a4 <HAL_ADC_PollForConversion>:
{
 800f8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f8a6:	6943      	ldr	r3, [r0, #20]
{
 800f8a8:	0006      	movs	r6, r0
 800f8aa:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f8ac:	2b08      	cmp	r3, #8
 800f8ae:	d04c      	beq.n	800f94a <HAL_ADC_PollForConversion+0xa6>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f8b0:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f8b2:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f8b4:	68db      	ldr	r3, [r3, #12]
 800f8b6:	07db      	lsls	r3, r3, #31
 800f8b8:	d43e      	bmi.n	800f938 <HAL_ADC_PollForConversion+0x94>
  tickstart = HAL_GetTick();
 800f8ba:	f7ff fe23 	bl	800f504 <HAL_GetTick>
 800f8be:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f8c0:	6832      	ldr	r2, [r6, #0]
 800f8c2:	e001      	b.n	800f8c8 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 800f8c4:	1c63      	adds	r3, r4, #1
 800f8c6:	d127      	bne.n	800f918 <HAL_ADC_PollForConversion+0x74>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f8c8:	6813      	ldr	r3, [r2, #0]
 800f8ca:	421d      	tst	r5, r3
 800f8cc:	d0fa      	beq.n	800f8c4 <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f8ce:	2380      	movs	r3, #128	; 0x80
 800f8d0:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	430b      	orrs	r3, r1
 800f8d6:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800f8d8:	23c0      	movs	r3, #192	; 0xc0
 800f8da:	68d1      	ldr	r1, [r2, #12]
 800f8dc:	011b      	lsls	r3, r3, #4
 800f8de:	4219      	tst	r1, r3
 800f8e0:	d113      	bne.n	800f90a <HAL_ADC_PollForConversion+0x66>
 800f8e2:	6a33      	ldr	r3, [r6, #32]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d110      	bne.n	800f90a <HAL_ADC_PollForConversion+0x66>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800f8e8:	6813      	ldr	r3, [r2, #0]
 800f8ea:	071b      	lsls	r3, r3, #28
 800f8ec:	d50d      	bpl.n	800f90a <HAL_ADC_PollForConversion+0x66>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f8ee:	6893      	ldr	r3, [r2, #8]
 800f8f0:	075b      	lsls	r3, r3, #29
 800f8f2:	d42f      	bmi.n	800f954 <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f8f4:	210c      	movs	r1, #12
 800f8f6:	6853      	ldr	r3, [r2, #4]
 800f8f8:	438b      	bics	r3, r1
 800f8fa:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800f8fc:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f8fe:	491a      	ldr	r1, [pc, #104]	; (800f968 <HAL_ADC_PollForConversion+0xc4>)
 800f900:	400b      	ands	r3, r1
 800f902:	3104      	adds	r1, #4
 800f904:	31ff      	adds	r1, #255	; 0xff
 800f906:	430b      	orrs	r3, r1
 800f908:	6473      	str	r3, [r6, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f90a:	69b3      	ldr	r3, [r6, #24]
  return HAL_OK;
 800f90c:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d101      	bne.n	800f916 <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f912:	330c      	adds	r3, #12
 800f914:	6013      	str	r3, [r2, #0]
}
 800f916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800f918:	2c00      	cmp	r4, #0
 800f91a:	d004      	beq.n	800f926 <HAL_ADC_PollForConversion+0x82>
 800f91c:	f7ff fdf2 	bl	800f504 <HAL_GetTick>
 800f920:	1bc0      	subs	r0, r0, r7
 800f922:	42a0      	cmp	r0, r4
 800f924:	d9cc      	bls.n	800f8c0 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f926:	2204      	movs	r2, #4
 800f928:	6c73      	ldr	r3, [r6, #68]	; 0x44
        return HAL_TIMEOUT;
 800f92a:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f92c:	4313      	orrs	r3, r2
 800f92e:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800f930:	2200      	movs	r2, #0
 800f932:	2340      	movs	r3, #64	; 0x40
 800f934:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800f936:	e7ee      	b.n	800f916 <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f938:	2220      	movs	r2, #32
 800f93a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f93c:	4313      	orrs	r3, r2
 800f93e:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800f940:	2200      	movs	r2, #0
 800f942:	2340      	movs	r3, #64	; 0x40
 800f944:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800f946:	2001      	movs	r0, #1
 800f948:	e7e5      	b.n	800f916 <HAL_ADC_PollForConversion+0x72>
  tickstart = HAL_GetTick();
 800f94a:	f7ff fddb 	bl	800f504 <HAL_GetTick>
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f94e:	2508      	movs	r5, #8
  tickstart = HAL_GetTick();
 800f950:	0007      	movs	r7, r0
 800f952:	e7b5      	b.n	800f8c0 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f954:	2120      	movs	r1, #32
 800f956:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f958:	430b      	orrs	r3, r1
 800f95a:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f95c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800f95e:	391f      	subs	r1, #31
 800f960:	430b      	orrs	r3, r1
 800f962:	64b3      	str	r3, [r6, #72]	; 0x48
 800f964:	e7d1      	b.n	800f90a <HAL_ADC_PollForConversion+0x66>
 800f966:	46c0      	nop			; (mov r8, r8)
 800f968:	fffffefe 	.word	0xfffffefe

0800f96c <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800f96c:	2208      	movs	r2, #8
 800f96e:	6803      	ldr	r3, [r0, #0]
 800f970:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800f972:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800f974:	4770      	bx	lr
 800f976:	46c0      	nop			; (mov r8, r8)

0800f978 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 800f978:	2300      	movs	r3, #0
{
 800f97a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f97c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800f97e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800f980:	3340      	adds	r3, #64	; 0x40
 800f982:	5cc2      	ldrb	r2, [r0, r3]
{
 800f984:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800f986:	2a01      	cmp	r2, #1
 800f988:	d044      	beq.n	800fa14 <HAL_ADC_ConfigChannel+0x9c>
 800f98a:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f98c:	6826      	ldr	r6, [r4, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f98e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  __HAL_LOCK(hadc);
 800f990:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f992:	68b3      	ldr	r3, [r6, #8]
 800f994:	075b      	lsls	r3, r3, #29
 800f996:	d509      	bpl.n	800f9ac <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f998:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 800f99a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f99c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f99e:	4313      	orrs	r3, r2
 800f9a0:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800f9a2:	2340      	movs	r3, #64	; 0x40
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	54e2      	strb	r2, [r4, r3]
}
 800f9a8:	b003      	add	sp, #12
 800f9aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9ac:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 800f9ae:	4d33      	ldr	r5, [pc, #204]	; (800fa7c <HAL_ADC_ConfigChannel+0x104>)
 800f9b0:	001f      	movs	r7, r3
 800f9b2:	46ac      	mov	ip, r5
 800f9b4:	684d      	ldr	r5, [r1, #4]
 800f9b6:	409a      	lsls	r2, r3
 800f9b8:	3f10      	subs	r7, #16
 800f9ba:	4565      	cmp	r5, ip
 800f9bc:	d02c      	beq.n	800fa18 <HAL_ADC_ConfigChannel+0xa0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800f9be:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 800f9c0:	432a      	orrs	r2, r5
 800f9c2:	62b2      	str	r2, [r6, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f9c4:	2280      	movs	r2, #128	; 0x80
 800f9c6:	0552      	lsls	r2, r2, #21
 800f9c8:	4290      	cmp	r0, r2
 800f9ca:	d00f      	beq.n	800f9ec <HAL_ADC_ConfigChannel+0x74>
 800f9cc:	3801      	subs	r0, #1
 800f9ce:	2806      	cmp	r0, #6
 800f9d0:	d90c      	bls.n	800f9ec <HAL_ADC_ConfigChannel+0x74>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800f9d2:	2207      	movs	r2, #7
 800f9d4:	6888      	ldr	r0, [r1, #8]
 800f9d6:	6971      	ldr	r1, [r6, #20]
 800f9d8:	4011      	ands	r1, r2
 800f9da:	4288      	cmp	r0, r1
 800f9dc:	d006      	beq.n	800f9ec <HAL_ADC_ConfigChannel+0x74>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800f9de:	6971      	ldr	r1, [r6, #20]
 800f9e0:	4391      	bics	r1, r2
 800f9e2:	6171      	str	r1, [r6, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800f9e4:	6971      	ldr	r1, [r6, #20]
 800f9e6:	4002      	ands	r2, r0
 800f9e8:	430a      	orrs	r2, r1
 800f9ea:	6172      	str	r2, [r6, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800f9ec:	2f02      	cmp	r7, #2
 800f9ee:	d80f      	bhi.n	800fa10 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800f9f0:	4923      	ldr	r1, [pc, #140]	; (800fa80 <HAL_ADC_ConfigChannel+0x108>)
 800f9f2:	680a      	ldr	r2, [r1, #0]
 800f9f4:	2b10      	cmp	r3, #16
 800f9f6:	d029      	beq.n	800fa4c <HAL_ADC_ConfigChannel+0xd4>
 800f9f8:	3b11      	subs	r3, #17
 800f9fa:	4258      	negs	r0, r3
 800f9fc:	4143      	adcs	r3, r0
 800f9fe:	4821      	ldr	r0, [pc, #132]	; (800fa84 <HAL_ADC_ConfigChannel+0x10c>)
 800fa00:	425b      	negs	r3, r3
 800fa02:	4003      	ands	r3, r0
 800fa04:	2080      	movs	r0, #128	; 0x80
 800fa06:	0440      	lsls	r0, r0, #17
 800fa08:	4684      	mov	ip, r0
 800fa0a:	4463      	add	r3, ip
 800fa0c:	4313      	orrs	r3, r2
 800fa0e:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fa10:	2000      	movs	r0, #0
 800fa12:	e7c6      	b.n	800f9a2 <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 800fa14:	2002      	movs	r0, #2
 800fa16:	e7c7      	b.n	800f9a8 <HAL_ADC_ConfigChannel+0x30>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fa18:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800fa1a:	4391      	bics	r1, r2
 800fa1c:	62b1      	str	r1, [r6, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fa1e:	2f02      	cmp	r7, #2
 800fa20:	d8f6      	bhi.n	800fa10 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fa22:	4a17      	ldr	r2, [pc, #92]	; (800fa80 <HAL_ADC_ConfigChannel+0x108>)
 800fa24:	6811      	ldr	r1, [r2, #0]
 800fa26:	2b10      	cmp	r3, #16
 800fa28:	d00e      	beq.n	800fa48 <HAL_ADC_ConfigChannel+0xd0>
 800fa2a:	3b11      	subs	r3, #17
 800fa2c:	001a      	movs	r2, r3
 800fa2e:	1e53      	subs	r3, r2, #1
 800fa30:	419a      	sbcs	r2, r3
 800fa32:	4b14      	ldr	r3, [pc, #80]	; (800fa84 <HAL_ADC_ConfigChannel+0x10c>)
 800fa34:	4252      	negs	r2, r2
 800fa36:	4013      	ands	r3, r2
 800fa38:	4a13      	ldr	r2, [pc, #76]	; (800fa88 <HAL_ADC_ConfigChannel+0x110>)
 800fa3a:	4694      	mov	ip, r2
 800fa3c:	4463      	add	r3, ip
 800fa3e:	4a10      	ldr	r2, [pc, #64]	; (800fa80 <HAL_ADC_ConfigChannel+0x108>)
 800fa40:	400b      	ands	r3, r1
 800fa42:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fa44:	2000      	movs	r0, #0
 800fa46:	e7ac      	b.n	800f9a2 <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fa48:	4b10      	ldr	r3, [pc, #64]	; (800fa8c <HAL_ADC_ConfigChannel+0x114>)
 800fa4a:	e7f8      	b.n	800fa3e <HAL_ADC_ConfigChannel+0xc6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fa4c:	2380      	movs	r3, #128	; 0x80
 800fa4e:	041b      	lsls	r3, r3, #16
 800fa50:	431a      	orrs	r2, r3
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800fa52:	4b0f      	ldr	r3, [pc, #60]	; (800fa90 <HAL_ADC_ConfigChannel+0x118>)
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fa54:	600a      	str	r2, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800fa56:	6818      	ldr	r0, [r3, #0]
 800fa58:	490e      	ldr	r1, [pc, #56]	; (800fa94 <HAL_ADC_ConfigChannel+0x11c>)
 800fa5a:	f7f0 fb79 	bl	8000150 <__udivsi3>
 800fa5e:	0083      	lsls	r3, r0, #2
 800fa60:	1818      	adds	r0, r3, r0
 800fa62:	0040      	lsls	r0, r0, #1
 800fa64:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 800fa66:	9b01      	ldr	r3, [sp, #4]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d0d1      	beq.n	800fa10 <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 800fa6c:	9b01      	ldr	r3, [sp, #4]
 800fa6e:	3b01      	subs	r3, #1
 800fa70:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800fa72:	9b01      	ldr	r3, [sp, #4]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d1f9      	bne.n	800fa6c <HAL_ADC_ConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fa78:	2000      	movs	r0, #0
 800fa7a:	e792      	b.n	800f9a2 <HAL_ADC_ConfigChannel+0x2a>
 800fa7c:	00001001 	.word	0x00001001
 800fa80:	40012708 	.word	0x40012708
 800fa84:	ff400000 	.word	0xff400000
 800fa88:	ffbfffff 	.word	0xffbfffff
 800fa8c:	ff7fffff 	.word	0xff7fffff
 800fa90:	200000b0 	.word	0x200000b0
 800fa94:	000f4240 	.word	0x000f4240

0800fa98 <HAL_ADCEx_Calibration_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800fa98:	2340      	movs	r3, #64	; 0x40
{
 800fa9a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800fa9c:	5cc2      	ldrb	r2, [r0, r3]
{
 800fa9e:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800faa0:	2a01      	cmp	r2, #1
 800faa2:	d042      	beq.n	800fb2a <HAL_ADCEx_Calibration_Start+0x92>
 800faa4:	2201      	movs	r2, #1
 800faa6:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800faa8:	6802      	ldr	r2, [r0, #0]
 800faaa:	3b3d      	subs	r3, #61	; 0x3d
 800faac:	6891      	ldr	r1, [r2, #8]
 800faae:	400b      	ands	r3, r1
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d105      	bne.n	800fac0 <HAL_ADCEx_Calibration_Start+0x28>
 800fab4:	6811      	ldr	r1, [r2, #0]
 800fab6:	420b      	tst	r3, r1
 800fab8:	d126      	bne.n	800fb08 <HAL_ADCEx_Calibration_Start+0x70>
 800faba:	68d3      	ldr	r3, [r2, #12]
 800fabc:	041b      	lsls	r3, r3, #16
 800fabe:	d423      	bmi.n	800fb08 <HAL_ADCEx_Calibration_Start+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800fac0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fac2:	491b      	ldr	r1, [pc, #108]	; (800fb30 <HAL_ADCEx_Calibration_Start+0x98>)
 800fac4:	400b      	ands	r3, r1
 800fac6:	3106      	adds	r1, #6
 800fac8:	31ff      	adds	r1, #255	; 0xff
 800faca:	430b      	orrs	r3, r1
 800facc:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800face:	2380      	movs	r3, #128	; 0x80
 800fad0:	6891      	ldr	r1, [r2, #8]
 800fad2:	061b      	lsls	r3, r3, #24
 800fad4:	430b      	orrs	r3, r1
 800fad6:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 800fad8:	f7ff fd14 	bl	800f504 <HAL_GetTick>
 800fadc:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800fade:	e004      	b.n	800faea <HAL_ADCEx_Calibration_Start+0x52>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800fae0:	f7ff fd10 	bl	800f504 <HAL_GetTick>
 800fae4:	1b40      	subs	r0, r0, r5
 800fae6:	2802      	cmp	r0, #2
 800fae8:	d814      	bhi.n	800fb14 <HAL_ADCEx_Calibration_Start+0x7c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800faea:	6823      	ldr	r3, [r4, #0]
 800faec:	689b      	ldr	r3, [r3, #8]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	dbf6      	blt.n	800fae0 <HAL_ADCEx_Calibration_Start+0x48>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800faf2:	2203      	movs	r2, #3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800faf4:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 800faf6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800faf8:	4393      	bics	r3, r2
 800fafa:	3a02      	subs	r2, #2
 800fafc:	4313      	orrs	r3, r2
 800fafe:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fb00:	2340      	movs	r3, #64	; 0x40
 800fb02:	2200      	movs	r2, #0
 800fb04:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 800fb06:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fb08:	2220      	movs	r2, #32
 800fb0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800fb0c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	6463      	str	r3, [r4, #68]	; 0x44
 800fb12:	e7f5      	b.n	800fb00 <HAL_ADCEx_Calibration_Start+0x68>
        ADC_STATE_CLR_SET(hadc->State,
 800fb14:	2212      	movs	r2, #18
 800fb16:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800fb18:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800fb1a:	4393      	bics	r3, r2
 800fb1c:	3a02      	subs	r2, #2
 800fb1e:	4313      	orrs	r3, r2
 800fb20:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800fb22:	2200      	movs	r2, #0
 800fb24:	2340      	movs	r3, #64	; 0x40
 800fb26:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 800fb28:	e7ed      	b.n	800fb06 <HAL_ADCEx_Calibration_Start+0x6e>
  __HAL_LOCK(hadc);
 800fb2a:	2002      	movs	r0, #2
 800fb2c:	e7eb      	b.n	800fb06 <HAL_ADCEx_Calibration_Start+0x6e>
 800fb2e:	46c0      	nop			; (mov r8, r8)
 800fb30:	fffffefd 	.word	0xfffffefd

0800fb34 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fb34:	22ff      	movs	r2, #255	; 0xff
 800fb36:	2303      	movs	r3, #3
 800fb38:	b530      	push	{r4, r5, lr}
 800fb3a:	0014      	movs	r4, r2
 800fb3c:	b2c5      	uxtb	r5, r0
 800fb3e:	402b      	ands	r3, r5
 800fb40:	00db      	lsls	r3, r3, #3
 800fb42:	409c      	lsls	r4, r3
 800fb44:	0189      	lsls	r1, r1, #6
 800fb46:	400a      	ands	r2, r1
 800fb48:	43e4      	mvns	r4, r4
 800fb4a:	409a      	lsls	r2, r3
  if((int32_t)(IRQn) < 0) {
 800fb4c:	2800      	cmp	r0, #0
 800fb4e:	db0b      	blt.n	800fb68 <HAL_NVIC_SetPriority+0x34>
 800fb50:	4b0c      	ldr	r3, [pc, #48]	; (800fb84 <HAL_NVIC_SetPriority+0x50>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fb52:	0880      	lsrs	r0, r0, #2
 800fb54:	469c      	mov	ip, r3
 800fb56:	23c0      	movs	r3, #192	; 0xc0
 800fb58:	0080      	lsls	r0, r0, #2
 800fb5a:	4460      	add	r0, ip
 800fb5c:	009b      	lsls	r3, r3, #2
 800fb5e:	58c1      	ldr	r1, [r0, r3]
 800fb60:	400c      	ands	r4, r1
 800fb62:	4322      	orrs	r2, r4
 800fb64:	50c2      	str	r2, [r0, r3]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800fb66:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fb68:	230f      	movs	r3, #15
 800fb6a:	4907      	ldr	r1, [pc, #28]	; (800fb88 <HAL_NVIC_SetPriority+0x54>)
 800fb6c:	402b      	ands	r3, r5
 800fb6e:	468c      	mov	ip, r1
 800fb70:	3b08      	subs	r3, #8
 800fb72:	089b      	lsrs	r3, r3, #2
 800fb74:	009b      	lsls	r3, r3, #2
 800fb76:	4463      	add	r3, ip
 800fb78:	69d9      	ldr	r1, [r3, #28]
 800fb7a:	400c      	ands	r4, r1
 800fb7c:	4322      	orrs	r2, r4
 800fb7e:	61da      	str	r2, [r3, #28]
 800fb80:	e7f1      	b.n	800fb66 <HAL_NVIC_SetPriority+0x32>
 800fb82:	46c0      	nop			; (mov r8, r8)
 800fb84:	e000e100 	.word	0xe000e100
 800fb88:	e000ed00 	.word	0xe000ed00

0800fb8c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fb8c:	231f      	movs	r3, #31
 800fb8e:	4018      	ands	r0, r3
 800fb90:	3b1e      	subs	r3, #30
 800fb92:	4083      	lsls	r3, r0
 800fb94:	4a01      	ldr	r2, [pc, #4]	; (800fb9c <HAL_NVIC_EnableIRQ+0x10>)
 800fb96:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800fb98:	4770      	bx	lr
 800fb9a:	46c0      	nop			; (mov r8, r8)
 800fb9c:	e000e100 	.word	0xe000e100

0800fba0 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fba0:	231f      	movs	r3, #31
 800fba2:	4018      	ands	r0, r3
 800fba4:	3b1e      	subs	r3, #30
 800fba6:	4083      	lsls	r3, r0
 800fba8:	2280      	movs	r2, #128	; 0x80
 800fbaa:	4901      	ldr	r1, [pc, #4]	; (800fbb0 <HAL_NVIC_DisableIRQ+0x10>)
 800fbac:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800fbae:	4770      	bx	lr
 800fbb0:	e000e100 	.word	0xe000e100

0800fbb4 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800fbb4:	4a0a      	ldr	r2, [pc, #40]	; (800fbe0 <HAL_SYSTICK_Config+0x2c>)
 800fbb6:	1e43      	subs	r3, r0, #1
 800fbb8:	2001      	movs	r0, #1
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d80e      	bhi.n	800fbdc <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fbbe:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fbc0:	4a08      	ldr	r2, [pc, #32]	; (800fbe4 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fbc2:	4809      	ldr	r0, [pc, #36]	; (800fbe8 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fbc4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fbc6:	6a03      	ldr	r3, [r0, #32]
 800fbc8:	0609      	lsls	r1, r1, #24
 800fbca:	021b      	lsls	r3, r3, #8
 800fbcc:	0a1b      	lsrs	r3, r3, #8
 800fbce:	430b      	orrs	r3, r1
 800fbd0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fbd2:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fbd4:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fbd6:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fbd8:	3307      	adds	r3, #7
 800fbda:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800fbdc:	4770      	bx	lr
 800fbde:	46c0      	nop			; (mov r8, r8)
 800fbe0:	00ffffff 	.word	0x00ffffff
 800fbe4:	e000e010 	.word	0xe000e010
 800fbe8:	e000ed00 	.word	0xe000ed00

0800fbec <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fbec:	4a05      	ldr	r2, [pc, #20]	; (800fc04 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 800fbee:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800fbf0:	2804      	cmp	r0, #4
 800fbf2:	d003      	beq.n	800fbfc <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800fbf4:	2104      	movs	r1, #4
 800fbf6:	438b      	bics	r3, r1
 800fbf8:	6013      	str	r3, [r2, #0]
  }
}
 800fbfa:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fbfc:	4318      	orrs	r0, r3
 800fbfe:	6010      	str	r0, [r2, #0]
 800fc00:	e7fb      	b.n	800fbfa <HAL_SYSTICK_CLKSourceConfig+0xe>
 800fc02:	46c0      	nop			; (mov r8, r8)
 800fc04:	e000e010 	.word	0xe000e010

0800fc08 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800fc08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc0a:	468c      	mov	ip, r1
 800fc0c:	6806      	ldr	r6, [r0, #0]
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800fc0e:	0891      	lsrs	r1, r2, #2
 800fc10:	d010      	beq.n	800fc34 <CRC_Handle_8+0x2c>
 800fc12:	4664      	mov	r4, ip
 800fc14:	008f      	lsls	r7, r1, #2
 800fc16:	4467      	add	r7, ip
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800fc18:	7823      	ldrb	r3, [r4, #0]
 800fc1a:	7865      	ldrb	r5, [r4, #1]
 800fc1c:	061b      	lsls	r3, r3, #24
 800fc1e:	042d      	lsls	r5, r5, #16
 800fc20:	432b      	orrs	r3, r5
 800fc22:	78e5      	ldrb	r5, [r4, #3]
 800fc24:	432b      	orrs	r3, r5
 800fc26:	78a5      	ldrb	r5, [r4, #2]
 800fc28:	3404      	adds	r4, #4
 800fc2a:	022d      	lsls	r5, r5, #8
 800fc2c:	432b      	orrs	r3, r5
 800fc2e:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 800fc30:	42a7      	cmp	r7, r4
 800fc32:	d1f1      	bne.n	800fc18 <CRC_Handle_8+0x10>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800fc34:	2303      	movs	r3, #3
 800fc36:	401a      	ands	r2, r3
 800fc38:	d00b      	beq.n	800fc52 <CRC_Handle_8+0x4a>
   {
     if  (BufferLength%4 == 1)
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800fc3a:	0089      	lsls	r1, r1, #2
 800fc3c:	4663      	mov	r3, ip
     if  (BufferLength%4 == 1)
 800fc3e:	2a01      	cmp	r2, #1
 800fc40:	d013      	beq.n	800fc6a <CRC_Handle_8+0x62>
     }
     if  (BufferLength%4 == 2)
 800fc42:	2a02      	cmp	r2, #2
 800fc44:	d107      	bne.n	800fc56 <CRC_Handle_8+0x4e>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800fc46:	5c5a      	ldrb	r2, [r3, r1]
 800fc48:	4461      	add	r1, ip
 800fc4a:	784b      	ldrb	r3, [r1, #1]
 800fc4c:	0212      	lsls	r2, r2, #8
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800fc52:	6830      	ldr	r0, [r6, #0]
}
 800fc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800fc56:	5c5a      	ldrb	r2, [r3, r1]
 800fc58:	4461      	add	r1, ip
 800fc5a:	784b      	ldrb	r3, [r1, #1]
 800fc5c:	0212      	lsls	r2, r2, #8
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800fc62:	788b      	ldrb	r3, [r1, #2]
 800fc64:	7033      	strb	r3, [r6, #0]
 800fc66:	6806      	ldr	r6, [r0, #0]
 800fc68:	e7f3      	b.n	800fc52 <CRC_Handle_8+0x4a>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800fc6a:	5ccb      	ldrb	r3, [r1, r3]
 800fc6c:	7033      	strb	r3, [r6, #0]
 800fc6e:	6806      	ldr	r6, [r0, #0]
 800fc70:	e7ef      	b.n	800fc52 <CRC_Handle_8+0x4a>
 800fc72:	46c0      	nop			; (mov r8, r8)

0800fc74 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800fc74:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800fc76:	0857      	lsrs	r7, r2, #1
 800fc78:	6805      	ldr	r5, [r0, #0]
 800fc7a:	d00a      	beq.n	800fc92 <CRC_Handle_16+0x1e>
 800fc7c:	0008      	movs	r0, r1
 800fc7e:	00be      	lsls	r6, r7, #2
 800fc80:	1876      	adds	r6, r6, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800fc82:	8803      	ldrh	r3, [r0, #0]
 800fc84:	8844      	ldrh	r4, [r0, #2]
 800fc86:	041b      	lsls	r3, r3, #16
 800fc88:	4323      	orrs	r3, r4
 800fc8a:	3004      	adds	r0, #4
 800fc8c:	602b      	str	r3, [r5, #0]
  for(i = 0; i < (BufferLength/2); i++)
 800fc8e:	4286      	cmp	r6, r0
 800fc90:	d1f7      	bne.n	800fc82 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800fc92:	07d3      	lsls	r3, r2, #31
 800fc94:	d502      	bpl.n	800fc9c <CRC_Handle_16+0x28>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800fc96:	00bf      	lsls	r7, r7, #2
 800fc98:	5a7b      	ldrh	r3, [r7, r1]
 800fc9a:	802b      	strh	r3, [r5, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800fc9c:	6828      	ldr	r0, [r5, #0]
}
 800fc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fca0 <HAL_CRC_Init>:
{
 800fca0:	b510      	push	{r4, lr}
 800fca2:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800fca4:	d01f      	beq.n	800fce6 <HAL_CRC_Init+0x46>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800fca6:	7f43      	ldrb	r3, [r0, #29]
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d01d      	beq.n	800fcea <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fcae:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fcb0:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fcb2:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fcb4:	f000 f8ae 	bl	800fe14 <HAL_CRCEx_Init>
 800fcb8:	2800      	cmp	r0, #0
 800fcba:	d114      	bne.n	800fce6 <HAL_CRC_Init+0x46>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800fcbc:	7963      	ldrb	r3, [r4, #5]
 800fcbe:	6822      	ldr	r2, [r4, #0]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d01d      	beq.n	800fd00 <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800fcc4:	6923      	ldr	r3, [r4, #16]
 800fcc6:	6113      	str	r3, [r2, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800fcc8:	2160      	movs	r1, #96	; 0x60
 800fcca:	6893      	ldr	r3, [r2, #8]
 800fccc:	438b      	bics	r3, r1
 800fcce:	6961      	ldr	r1, [r4, #20]
 800fcd0:	430b      	orrs	r3, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800fcd2:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800fcd4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800fcd6:	6893      	ldr	r3, [r2, #8]
 800fcd8:	438b      	bics	r3, r1
 800fcda:	69a1      	ldr	r1, [r4, #24]
 800fcdc:	430b      	orrs	r3, r1
 800fcde:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800fce0:	2301      	movs	r3, #1
 800fce2:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800fce4:	e000      	b.n	800fce8 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800fce6:	2001      	movs	r0, #1
}
 800fce8:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800fcea:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800fcec:	f7fc fd7e 	bl	800c7ec <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fcf0:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fcf2:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fcf4:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fcf6:	f000 f88d 	bl	800fe14 <HAL_CRCEx_Init>
 800fcfa:	2800      	cmp	r0, #0
 800fcfc:	d0de      	beq.n	800fcbc <HAL_CRC_Init+0x1c>
 800fcfe:	e7f2      	b.n	800fce6 <HAL_CRC_Init+0x46>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800fd00:	3b01      	subs	r3, #1
 800fd02:	6113      	str	r3, [r2, #16]
 800fd04:	e7e0      	b.n	800fcc8 <HAL_CRC_Init+0x28>
 800fd06:	46c0      	nop			; (mov r8, r8)

0800fd08 <HAL_CRC_Accumulate>:
{
 800fd08:	b510      	push	{r4, lr}
  __HAL_LOCK(hcrc); 
 800fd0a:	7f03      	ldrb	r3, [r0, #28]
{
 800fd0c:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800fd0e:	2b01      	cmp	r3, #1
 800fd10:	d021      	beq.n	800fd56 <HAL_CRC_Accumulate+0x4e>
 800fd12:	2301      	movs	r3, #1
 800fd14:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800fd16:	3301      	adds	r3, #1
 800fd18:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800fd1a:	6a03      	ldr	r3, [r0, #32]
 800fd1c:	2b02      	cmp	r3, #2
 800fd1e:	d017      	beq.n	800fd50 <HAL_CRC_Accumulate+0x48>
 800fd20:	2b03      	cmp	r3, #3
 800fd22:	d00a      	beq.n	800fd3a <HAL_CRC_Accumulate+0x32>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800fd24:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	d102      	bne.n	800fd30 <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800fd2a:	0020      	movs	r0, r4
 800fd2c:	f7ff ff6c 	bl	800fc08 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY; 
 800fd30:	2301      	movs	r3, #1
 800fd32:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800fd34:	2300      	movs	r3, #0
 800fd36:	7723      	strb	r3, [r4, #28]
}
 800fd38:	bd10      	pop	{r4, pc}
 800fd3a:	6800      	ldr	r0, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800fd3c:	2a00      	cmp	r2, #0
 800fd3e:	d005      	beq.n	800fd4c <HAL_CRC_Accumulate+0x44>
 800fd40:	0092      	lsls	r2, r2, #2
 800fd42:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800fd44:	c908      	ldmia	r1!, {r3}
 800fd46:	6003      	str	r3, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800fd48:	428a      	cmp	r2, r1
 800fd4a:	d1fb      	bne.n	800fd44 <HAL_CRC_Accumulate+0x3c>
      temp = hcrc->Instance->DR;
 800fd4c:	6800      	ldr	r0, [r0, #0]
      break;
 800fd4e:	e7ef      	b.n	800fd30 <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800fd50:	f7ff ff90 	bl	800fc74 <CRC_Handle_16>
      break;
 800fd54:	e7ec      	b.n	800fd30 <HAL_CRC_Accumulate+0x28>
  __HAL_LOCK(hcrc); 
 800fd56:	2002      	movs	r0, #2
 800fd58:	e7ee      	b.n	800fd38 <HAL_CRC_Accumulate+0x30>
 800fd5a:	46c0      	nop			; (mov r8, r8)

0800fd5c <HAL_CRC_Calculate>:
{
 800fd5c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hcrc); 
 800fd5e:	7f03      	ldrb	r3, [r0, #28]
{
 800fd60:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800fd62:	2b01      	cmp	r3, #1
 800fd64:	d026      	beq.n	800fdb4 <HAL_CRC_Calculate+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800fd66:	2302      	movs	r3, #2
  __HAL_LOCK(hcrc); 
 800fd68:	2501      	movs	r5, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 800fd6a:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800fd6c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hcrc); 
 800fd6e:	7705      	strb	r5, [r0, #28]
  __HAL_CRC_DR_RESET(hcrc);
 800fd70:	6898      	ldr	r0, [r3, #8]
 800fd72:	4328      	orrs	r0, r5
 800fd74:	6098      	str	r0, [r3, #8]
  switch (hcrc->InputDataFormat)
 800fd76:	6a20      	ldr	r0, [r4, #32]
 800fd78:	2802      	cmp	r0, #2
 800fd7a:	d017      	beq.n	800fdac <HAL_CRC_Calculate+0x50>
 800fd7c:	2803      	cmp	r0, #3
 800fd7e:	d007      	beq.n	800fd90 <HAL_CRC_Calculate+0x34>
 800fd80:	2801      	cmp	r0, #1
 800fd82:	d00f      	beq.n	800fda4 <HAL_CRC_Calculate+0x48>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800fd84:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 800fd86:	2301      	movs	r3, #1
 800fd88:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	7723      	strb	r3, [r4, #28]
}
 800fd8e:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800fd90:	2a00      	cmp	r2, #0
 800fd92:	d005      	beq.n	800fda0 <HAL_CRC_Calculate+0x44>
 800fd94:	0092      	lsls	r2, r2, #2
 800fd96:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800fd98:	c901      	ldmia	r1!, {r0}
 800fd9a:	6018      	str	r0, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 800fd9c:	4291      	cmp	r1, r2
 800fd9e:	d1fb      	bne.n	800fd98 <HAL_CRC_Calculate+0x3c>
      temp = hcrc->Instance->DR;
 800fda0:	6818      	ldr	r0, [r3, #0]
      break;
 800fda2:	e7f0      	b.n	800fd86 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800fda4:	0020      	movs	r0, r4
 800fda6:	f7ff ff2f 	bl	800fc08 <CRC_Handle_8>
      break;
 800fdaa:	e7ec      	b.n	800fd86 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800fdac:	0020      	movs	r0, r4
 800fdae:	f7ff ff61 	bl	800fc74 <CRC_Handle_16>
      break;
 800fdb2:	e7e8      	b.n	800fd86 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800fdb4:	2002      	movs	r0, #2
 800fdb6:	e7ea      	b.n	800fd8e <HAL_CRC_Calculate+0x32>

0800fdb8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800fdb8:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800fdba:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800fdbc:	2501      	movs	r5, #1
 800fdbe:	e001      	b.n	800fdc4 <HAL_CRCEx_Polynomial_Set+0xc>
 800fdc0:	3b01      	subs	r3, #1
 800fdc2:	d312      	bcc.n	800fdea <HAL_CRCEx_Polynomial_Set+0x32>
 800fdc4:	002c      	movs	r4, r5
 800fdc6:	409c      	lsls	r4, r3
 800fdc8:	4221      	tst	r1, r4
 800fdca:	d0f9      	beq.n	800fdc0 <HAL_CRCEx_Polynomial_Set+0x8>
  {}

  switch (PolyLength)
 800fdcc:	2a10      	cmp	r2, #16
 800fdce:	d01c      	beq.n	800fe0a <HAL_CRCEx_Polynomial_Set+0x52>
 800fdd0:	2a18      	cmp	r2, #24
 800fdd2:	d012      	beq.n	800fdfa <HAL_CRCEx_Polynomial_Set+0x42>
 800fdd4:	2a08      	cmp	r2, #8
 800fdd6:	d014      	beq.n	800fe02 <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800fdd8:	6800      	ldr	r0, [r0, #0]
 800fdda:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800fddc:	2118      	movs	r1, #24
 800fdde:	6883      	ldr	r3, [r0, #8]
 800fde0:	438b      	bics	r3, r1
 800fde2:	431a      	orrs	r2, r3
 800fde4:	6082      	str	r2, [r0, #8]
 800fde6:	2000      	movs	r0, #0
  
  /* Return function status */
  return HAL_OK;
}
 800fde8:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 800fdea:	2a10      	cmp	r2, #16
 800fdec:	d003      	beq.n	800fdf6 <HAL_CRCEx_Polynomial_Set+0x3e>
 800fdee:	2a18      	cmp	r2, #24
 800fdf0:	d001      	beq.n	800fdf6 <HAL_CRCEx_Polynomial_Set+0x3e>
 800fdf2:	2a08      	cmp	r2, #8
 800fdf4:	d1f0      	bne.n	800fdd8 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800fdf6:	2001      	movs	r0, #1
 800fdf8:	e7f6      	b.n	800fde8 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_7B)
 800fdfa:	2b06      	cmp	r3, #6
 800fdfc:	d9ec      	bls.n	800fdd8 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800fdfe:	2001      	movs	r0, #1
 800fe00:	e7f2      	b.n	800fde8 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_16B)
 800fe02:	2b0f      	cmp	r3, #15
 800fe04:	d9e8      	bls.n	800fdd8 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800fe06:	2001      	movs	r0, #1
 800fe08:	e7ee      	b.n	800fde8 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_8B)
 800fe0a:	2b07      	cmp	r3, #7
 800fe0c:	d9e4      	bls.n	800fdd8 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800fe0e:	2001      	movs	r0, #1
 800fe10:	e7ea      	b.n	800fde8 <HAL_CRCEx_Polynomial_Set+0x30>
 800fe12:	46c0      	nop			; (mov r8, r8)

0800fe14 <HAL_CRCEx_Init>:
{
 800fe14:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800fe16:	7903      	ldrb	r3, [r0, #4]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d108      	bne.n	800fe2e <HAL_CRCEx_Init+0x1a>
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800fe1c:	2118      	movs	r1, #24
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800fe1e:	6803      	ldr	r3, [r0, #0]
   return HAL_OK;
 800fe20:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800fe22:	4a07      	ldr	r2, [pc, #28]	; (800fe40 <HAL_CRCEx_Init+0x2c>)
 800fe24:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800fe26:	689a      	ldr	r2, [r3, #8]
 800fe28:	438a      	bics	r2, r1
 800fe2a:	609a      	str	r2, [r3, #8]
}
 800fe2c:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800fe2e:	68c2      	ldr	r2, [r0, #12]
 800fe30:	6881      	ldr	r1, [r0, #8]
 800fe32:	f7ff ffc1 	bl	800fdb8 <HAL_CRCEx_Polynomial_Set>
 800fe36:	1e43      	subs	r3, r0, #1
 800fe38:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 800fe3a:	b2c0      	uxtb	r0, r0
 800fe3c:	e7f6      	b.n	800fe2c <HAL_CRCEx_Init+0x18>
 800fe3e:	46c0      	nop			; (mov r8, r8)
 800fe40:	04c11db7 	.word	0x04c11db7

0800fe44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800fe44:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800fe46:	2800      	cmp	r0, #0
 800fe48:	d023      	beq.n	800fe92 <HAL_DMA_Init+0x4e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 800fe4a:	2321      	movs	r3, #33	; 0x21
 800fe4c:	5cc3      	ldrb	r3, [r0, r3]
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d01b      	beq.n	800fe8c <HAL_DMA_Init+0x48>
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800fe54:	2121      	movs	r1, #33	; 0x21
 800fe56:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800fe58:	6804      	ldr	r4, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800fe5a:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 800fe5c:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800fe5e:	4a0e      	ldr	r2, [pc, #56]	; (800fe98 <HAL_DMA_Init+0x54>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800fe60:	6885      	ldr	r5, [r0, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800fe62:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800fe64:	6843      	ldr	r3, [r0, #4]
 800fe66:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fe68:	68c5      	ldr	r5, [r0, #12]
 800fe6a:	432b      	orrs	r3, r5
 800fe6c:	6905      	ldr	r5, [r0, #16]
 800fe6e:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fe70:	6945      	ldr	r5, [r0, #20]
 800fe72:	432b      	orrs	r3, r5
 800fe74:	6985      	ldr	r5, [r0, #24]
 800fe76:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800fe78:	69c5      	ldr	r5, [r0, #28]
 800fe7a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800fe7c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800fe7e:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fe80:	2300      	movs	r3, #0
 800fe82:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800fe84:	3301      	adds	r3, #1
 800fe86:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 800fe88:	2000      	movs	r0, #0
}  
 800fe8a:	bd30      	pop	{r4, r5, pc}
    hdma->Lock = HAL_UNLOCKED;
 800fe8c:	2220      	movs	r2, #32
 800fe8e:	5483      	strb	r3, [r0, r2]
 800fe90:	e7e0      	b.n	800fe54 <HAL_DMA_Init+0x10>
    return HAL_ERROR;
 800fe92:	2001      	movs	r0, #1
 800fe94:	e7f9      	b.n	800fe8a <HAL_DMA_Init+0x46>
 800fe96:	46c0      	nop			; (mov r8, r8)
 800fe98:	ffffc00f 	.word	0xffffc00f

0800fe9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fe9c:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800fe9e:	2420      	movs	r4, #32
 800fea0:	5d05      	ldrb	r5, [r0, r4]
 800fea2:	2d01      	cmp	r5, #1
 800fea4:	d023      	beq.n	800feee <HAL_DMA_Start_IT+0x52>
 800fea6:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800fea8:	2502      	movs	r5, #2
  __HAL_LOCK(hdma);
 800feaa:	5506      	strb	r6, [r0, r4]
  hdma->State = HAL_DMA_STATE_BUSY;  
 800feac:	3401      	adds	r4, #1
 800feae:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800feb0:	6804      	ldr	r4, [r0, #0]
 800feb2:	6825      	ldr	r5, [r4, #0]
 800feb4:	43b5      	bics	r5, r6
 800feb6:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800feb8:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800feba:	6843      	ldr	r3, [r0, #4]
 800febc:	2b10      	cmp	r3, #16
 800febe:	d013      	beq.n	800fee8 <HAL_DMA_Start_IT+0x4c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800fec0:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800fec2:	60e2      	str	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800fec4:	2202      	movs	r2, #2
  return HAL_OK;    
 800fec6:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800fec8:	6823      	ldr	r3, [r4, #0]
 800feca:	4313      	orrs	r3, r2
 800fecc:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800fece:	6823      	ldr	r3, [r4, #0]
 800fed0:	3202      	adds	r2, #2
 800fed2:	4313      	orrs	r3, r2
 800fed4:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800fed6:	6823      	ldr	r3, [r4, #0]
 800fed8:	3204      	adds	r2, #4
 800feda:	4313      	orrs	r3, r2
 800fedc:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 800fede:	6823      	ldr	r3, [r4, #0]
 800fee0:	3a07      	subs	r2, #7
 800fee2:	4313      	orrs	r3, r2
 800fee4:	6023      	str	r3, [r4, #0]
} 
 800fee6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800fee8:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800feea:	60e1      	str	r1, [r4, #12]
 800feec:	e7ea      	b.n	800fec4 <HAL_DMA_Start_IT+0x28>
  __HAL_LOCK(hdma);
 800feee:	2002      	movs	r0, #2
 800fef0:	e7f9      	b.n	800fee6 <HAL_DMA_Start_IT+0x4a>
 800fef2:	46c0      	nop			; (mov r8, r8)

0800fef4 <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 800fef4:	2101      	movs	r1, #1
 800fef6:	6802      	ldr	r2, [r0, #0]
{
 800fef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 800fefa:	6813      	ldr	r3, [r2, #0]
{
 800fefc:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800fefe:	438b      	bics	r3, r1
 800ff00:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800ff02:	f7ff faff 	bl	800f504 <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800ff06:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 800ff08:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800ff0a:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800ff0c:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800ff0e:	e004      	b.n	800ff1a <HAL_DMA_Abort+0x26>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800ff10:	f7ff faf8 	bl	800f504 <HAL_GetTick>
 800ff14:	1bc0      	subs	r0, r0, r7
 800ff16:	42b0      	cmp	r0, r6
 800ff18:	d809      	bhi.n	800ff2e <HAL_DMA_Abort+0x3a>
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800ff1a:	6823      	ldr	r3, [r4, #0]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	402b      	ands	r3, r5
 800ff20:	d1f6      	bne.n	800ff10 <HAL_DMA_Abort+0x1c>
  hdma->State = HAL_DMA_STATE_READY; 
 800ff22:	2221      	movs	r2, #33	; 0x21
  return HAL_OK; 
 800ff24:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 800ff26:	54a5      	strb	r5, [r4, r2]
  __HAL_UNLOCK(hdma);
 800ff28:	3a01      	subs	r2, #1
 800ff2a:	54a3      	strb	r3, [r4, r2]
}
 800ff2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800ff2e:	2220      	movs	r2, #32
 800ff30:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ff32:	2103      	movs	r1, #3
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800ff34:	4313      	orrs	r3, r2
 800ff36:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ff38:	2321      	movs	r3, #33	; 0x21
 800ff3a:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 800ff3c:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800ff3e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdma);
 800ff40:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 800ff42:	e7f3      	b.n	800ff2c <HAL_DMA_Abort+0x38>

0800ff44 <HAL_DMA_IRQHandler>:
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff44:	6803      	ldr	r3, [r0, #0]
 800ff46:	4aa2      	ldr	r2, [pc, #648]	; (80101d0 <HAL_DMA_IRQHandler+0x28c>)
{        
 800ff48:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff4a:	0019      	movs	r1, r3
{        
 800ff4c:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d937      	bls.n	800ffc2 <HAL_DMA_IRQHandler+0x7e>
 800ff52:	48a0      	ldr	r0, [pc, #640]	; (80101d4 <HAL_DMA_IRQHandler+0x290>)
 800ff54:	4da0      	ldr	r5, [pc, #640]	; (80101d8 <HAL_DMA_IRQHandler+0x294>)
 800ff56:	6806      	ldr	r6, [r0, #0]
 800ff58:	42ab      	cmp	r3, r5
 800ff5a:	d100      	bne.n	800ff5e <HAL_DMA_IRQHandler+0x1a>
 800ff5c:	e0ed      	b.n	801013a <HAL_DMA_IRQHandler+0x1f6>
 800ff5e:	4d9f      	ldr	r5, [pc, #636]	; (80101dc <HAL_DMA_IRQHandler+0x298>)
 800ff60:	42ab      	cmp	r3, r5
 800ff62:	d100      	bne.n	800ff66 <HAL_DMA_IRQHandler+0x22>
 800ff64:	e334      	b.n	80105d0 <HAL_DMA_IRQHandler+0x68c>
 800ff66:	4d9e      	ldr	r5, [pc, #632]	; (80101e0 <HAL_DMA_IRQHandler+0x29c>)
 800ff68:	42ab      	cmp	r3, r5
 800ff6a:	d100      	bne.n	800ff6e <HAL_DMA_IRQHandler+0x2a>
 800ff6c:	e129      	b.n	80101c2 <HAL_DMA_IRQHandler+0x27e>
 800ff6e:	4d9d      	ldr	r5, [pc, #628]	; (80101e4 <HAL_DMA_IRQHandler+0x2a0>)
 800ff70:	42ab      	cmp	r3, r5
 800ff72:	d100      	bne.n	800ff76 <HAL_DMA_IRQHandler+0x32>
 800ff74:	e34b      	b.n	801060e <HAL_DMA_IRQHandler+0x6ca>
 800ff76:	4d9c      	ldr	r5, [pc, #624]	; (80101e8 <HAL_DMA_IRQHandler+0x2a4>)
 800ff78:	42ab      	cmp	r3, r5
 800ff7a:	d100      	bne.n	800ff7e <HAL_DMA_IRQHandler+0x3a>
 800ff7c:	e38b      	b.n	8010696 <HAL_DMA_IRQHandler+0x752>
 800ff7e:	4d9b      	ldr	r5, [pc, #620]	; (80101ec <HAL_DMA_IRQHandler+0x2a8>)
 800ff80:	42ab      	cmp	r3, r5
 800ff82:	d100      	bne.n	800ff86 <HAL_DMA_IRQHandler+0x42>
 800ff84:	e3cf      	b.n	8010726 <HAL_DMA_IRQHandler+0x7e2>
 800ff86:	4293      	cmp	r3, r2
 800ff88:	d100      	bne.n	800ff8c <HAL_DMA_IRQHandler+0x48>
 800ff8a:	e35e      	b.n	801064a <HAL_DMA_IRQHandler+0x706>
 800ff8c:	4a98      	ldr	r2, [pc, #608]	; (80101f0 <HAL_DMA_IRQHandler+0x2ac>)
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	d101      	bne.n	800ff96 <HAL_DMA_IRQHandler+0x52>
 800ff92:	f000 fbe8 	bl	8010766 <HAL_DMA_IRQHandler+0x822>
 800ff96:	4a97      	ldr	r2, [pc, #604]	; (80101f4 <HAL_DMA_IRQHandler+0x2b0>)
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d101      	bne.n	800ffa0 <HAL_DMA_IRQHandler+0x5c>
 800ff9c:	f000 fc04 	bl	80107a8 <HAL_DMA_IRQHandler+0x864>
 800ffa0:	4a95      	ldr	r2, [pc, #596]	; (80101f8 <HAL_DMA_IRQHandler+0x2b4>)
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	d101      	bne.n	800ffaa <HAL_DMA_IRQHandler+0x66>
 800ffa6:	f000 fc21 	bl	80107ec <HAL_DMA_IRQHandler+0x8a8>
 800ffaa:	4a94      	ldr	r2, [pc, #592]	; (80101fc <HAL_DMA_IRQHandler+0x2b8>)
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d101      	bne.n	800ffb4 <HAL_DMA_IRQHandler+0x70>
 800ffb0:	f000 fc37 	bl	8010822 <HAL_DMA_IRQHandler+0x8de>
 800ffb4:	0332      	lsls	r2, r6, #12
 800ffb6:	d43c      	bmi.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ffb8:	4a86      	ldr	r2, [pc, #536]	; (80101d4 <HAL_DMA_IRQHandler+0x290>)
 800ffba:	6810      	ldr	r0, [r2, #0]
 800ffbc:	2280      	movs	r2, #128	; 0x80
 800ffbe:	02d2      	lsls	r2, r2, #11
 800ffc0:	e0c0      	b.n	8010144 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ffc2:	488f      	ldr	r0, [pc, #572]	; (8010200 <HAL_DMA_IRQHandler+0x2bc>)
 800ffc4:	4d84      	ldr	r5, [pc, #528]	; (80101d8 <HAL_DMA_IRQHandler+0x294>)
 800ffc6:	6806      	ldr	r6, [r0, #0]
 800ffc8:	42ab      	cmp	r3, r5
 800ffca:	d02e      	beq.n	801002a <HAL_DMA_IRQHandler+0xe6>
 800ffcc:	4d83      	ldr	r5, [pc, #524]	; (80101dc <HAL_DMA_IRQHandler+0x298>)
 800ffce:	42ab      	cmp	r3, r5
 800ffd0:	d100      	bne.n	800ffd4 <HAL_DMA_IRQHandler+0x90>
 800ffd2:	e2f6      	b.n	80105c2 <HAL_DMA_IRQHandler+0x67e>
 800ffd4:	4d82      	ldr	r5, [pc, #520]	; (80101e0 <HAL_DMA_IRQHandler+0x29c>)
 800ffd6:	42ab      	cmp	r3, r5
 800ffd8:	d100      	bne.n	800ffdc <HAL_DMA_IRQHandler+0x98>
 800ffda:	e0ea      	b.n	80101b2 <HAL_DMA_IRQHandler+0x26e>
 800ffdc:	4d81      	ldr	r5, [pc, #516]	; (80101e4 <HAL_DMA_IRQHandler+0x2a0>)
 800ffde:	42ab      	cmp	r3, r5
 800ffe0:	d100      	bne.n	800ffe4 <HAL_DMA_IRQHandler+0xa0>
 800ffe2:	e30c      	b.n	80105fe <HAL_DMA_IRQHandler+0x6ba>
 800ffe4:	4d80      	ldr	r5, [pc, #512]	; (80101e8 <HAL_DMA_IRQHandler+0x2a4>)
 800ffe6:	42ab      	cmp	r3, r5
 800ffe8:	d100      	bne.n	800ffec <HAL_DMA_IRQHandler+0xa8>
 800ffea:	e35b      	b.n	80106a4 <HAL_DMA_IRQHandler+0x760>
 800ffec:	4d7f      	ldr	r5, [pc, #508]	; (80101ec <HAL_DMA_IRQHandler+0x2a8>)
 800ffee:	42ab      	cmp	r3, r5
 800fff0:	d100      	bne.n	800fff4 <HAL_DMA_IRQHandler+0xb0>
 800fff2:	e390      	b.n	8010716 <HAL_DMA_IRQHandler+0x7d2>
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d100      	bne.n	800fffa <HAL_DMA_IRQHandler+0xb6>
 800fff8:	e31f      	b.n	801063a <HAL_DMA_IRQHandler+0x6f6>
 800fffa:	4a7d      	ldr	r2, [pc, #500]	; (80101f0 <HAL_DMA_IRQHandler+0x2ac>)
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d100      	bne.n	8010002 <HAL_DMA_IRQHandler+0xbe>
 8010000:	e3aa      	b.n	8010758 <HAL_DMA_IRQHandler+0x814>
 8010002:	4a7c      	ldr	r2, [pc, #496]	; (80101f4 <HAL_DMA_IRQHandler+0x2b0>)
 8010004:	4293      	cmp	r3, r2
 8010006:	d100      	bne.n	801000a <HAL_DMA_IRQHandler+0xc6>
 8010008:	e3c7      	b.n	801079a <HAL_DMA_IRQHandler+0x856>
 801000a:	4a7b      	ldr	r2, [pc, #492]	; (80101f8 <HAL_DMA_IRQHandler+0x2b4>)
 801000c:	4293      	cmp	r3, r2
 801000e:	d101      	bne.n	8010014 <HAL_DMA_IRQHandler+0xd0>
 8010010:	f000 fbe4 	bl	80107dc <HAL_DMA_IRQHandler+0x898>
 8010014:	4a79      	ldr	r2, [pc, #484]	; (80101fc <HAL_DMA_IRQHandler+0x2b8>)
 8010016:	4293      	cmp	r3, r2
 8010018:	d100      	bne.n	801001c <HAL_DMA_IRQHandler+0xd8>
 801001a:	e2e8      	b.n	80105ee <HAL_DMA_IRQHandler+0x6aa>
 801001c:	0332      	lsls	r2, r6, #12
 801001e:	d408      	bmi.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010020:	4a77      	ldr	r2, [pc, #476]	; (8010200 <HAL_DMA_IRQHandler+0x2bc>)
 8010022:	6810      	ldr	r0, [r2, #0]
 8010024:	2280      	movs	r2, #128	; 0x80
 8010026:	02d2      	lsls	r2, r2, #11
 8010028:	e15f      	b.n	80102ea <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801002a:	0732      	lsls	r2, r6, #28
 801002c:	d401      	bmi.n	8010032 <HAL_DMA_IRQHandler+0xee>
 801002e:	f000 fc0a 	bl	8010846 <HAL_DMA_IRQHandler+0x902>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010032:	2208      	movs	r2, #8
 8010034:	6818      	ldr	r0, [r3, #0]
 8010036:	4202      	tst	r2, r0
 8010038:	d100      	bne.n	801003c <HAL_DMA_IRQHandler+0xf8>
 801003a:	e1f4      	b.n	8010426 <HAL_DMA_IRQHandler+0x4e2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 801003c:	6818      	ldr	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801003e:	4d66      	ldr	r5, [pc, #408]	; (80101d8 <HAL_DMA_IRQHandler+0x294>)
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010040:	4390      	bics	r0, r2
 8010042:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010044:	4862      	ldr	r0, [pc, #392]	; (80101d0 <HAL_DMA_IRQHandler+0x28c>)
 8010046:	4283      	cmp	r3, r0
 8010048:	d800      	bhi.n	801004c <HAL_DMA_IRQHandler+0x108>
 801004a:	e1a9      	b.n	80103a0 <HAL_DMA_IRQHandler+0x45c>
 801004c:	42ab      	cmp	r3, r5
 801004e:	d100      	bne.n	8010052 <HAL_DMA_IRQHandler+0x10e>
 8010050:	e310      	b.n	8010674 <HAL_DMA_IRQHandler+0x730>
 8010052:	4a62      	ldr	r2, [pc, #392]	; (80101dc <HAL_DMA_IRQHandler+0x298>)
 8010054:	4293      	cmp	r3, r2
 8010056:	d100      	bne.n	801005a <HAL_DMA_IRQHandler+0x116>
 8010058:	e337      	b.n	80106ca <HAL_DMA_IRQHandler+0x786>
 801005a:	4a61      	ldr	r2, [pc, #388]	; (80101e0 <HAL_DMA_IRQHandler+0x29c>)
 801005c:	4293      	cmp	r3, r2
 801005e:	d100      	bne.n	8010062 <HAL_DMA_IRQHandler+0x11e>
 8010060:	e2df      	b.n	8010622 <HAL_DMA_IRQHandler+0x6de>
 8010062:	4a60      	ldr	r2, [pc, #384]	; (80101e4 <HAL_DMA_IRQHandler+0x2a0>)
 8010064:	4293      	cmp	r3, r2
 8010066:	d100      	bne.n	801006a <HAL_DMA_IRQHandler+0x126>
 8010068:	e370      	b.n	801074c <HAL_DMA_IRQHandler+0x808>
 801006a:	4a5f      	ldr	r2, [pc, #380]	; (80101e8 <HAL_DMA_IRQHandler+0x2a4>)
 801006c:	4293      	cmp	r3, r2
 801006e:	d100      	bne.n	8010072 <HAL_DMA_IRQHandler+0x12e>
 8010070:	e38a      	b.n	8010788 <HAL_DMA_IRQHandler+0x844>
 8010072:	4a5e      	ldr	r2, [pc, #376]	; (80101ec <HAL_DMA_IRQHandler+0x2a8>)
 8010074:	4293      	cmp	r3, r2
 8010076:	d100      	bne.n	801007a <HAL_DMA_IRQHandler+0x136>
 8010078:	e3a4      	b.n	80107c4 <HAL_DMA_IRQHandler+0x880>
 801007a:	4283      	cmp	r3, r0
 801007c:	d100      	bne.n	8010080 <HAL_DMA_IRQHandler+0x13c>
 801007e:	e3cd      	b.n	801081c <HAL_DMA_IRQHandler+0x8d8>
 8010080:	4a5b      	ldr	r2, [pc, #364]	; (80101f0 <HAL_DMA_IRQHandler+0x2ac>)
 8010082:	4293      	cmp	r3, r2
 8010084:	d100      	bne.n	8010088 <HAL_DMA_IRQHandler+0x144>
 8010086:	e3d8      	b.n	801083a <HAL_DMA_IRQHandler+0x8f6>
 8010088:	4a5a      	ldr	r2, [pc, #360]	; (80101f4 <HAL_DMA_IRQHandler+0x2b0>)
 801008a:	4293      	cmp	r3, r2
 801008c:	d100      	bne.n	8010090 <HAL_DMA_IRQHandler+0x14c>
 801008e:	e3d8      	b.n	8010842 <HAL_DMA_IRQHandler+0x8fe>
 8010090:	4a59      	ldr	r2, [pc, #356]	; (80101f8 <HAL_DMA_IRQHandler+0x2b4>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d100      	bne.n	8010098 <HAL_DMA_IRQHandler+0x154>
 8010096:	e2c4      	b.n	8010622 <HAL_DMA_IRQHandler+0x6de>
 8010098:	4a5a      	ldr	r2, [pc, #360]	; (8010204 <HAL_DMA_IRQHandler+0x2c0>)
 801009a:	189a      	adds	r2, r3, r2
 801009c:	4250      	negs	r0, r2
 801009e:	4142      	adcs	r2, r0
 80100a0:	4859      	ldr	r0, [pc, #356]	; (8010208 <HAL_DMA_IRQHandler+0x2c4>)
 80100a2:	4252      	negs	r2, r2
 80100a4:	4002      	ands	r2, r0
 80100a6:	2080      	movs	r0, #128	; 0x80
 80100a8:	0300      	lsls	r0, r0, #12
 80100aa:	4684      	mov	ip, r0
 80100ac:	4462      	add	r2, ip
 80100ae:	4849      	ldr	r0, [pc, #292]	; (80101d4 <HAL_DMA_IRQHandler+0x290>)
 80100b0:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80100b2:	2001      	movs	r0, #1
 80100b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80100b6:	4302      	orrs	r2, r0
 80100b8:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80100ba:	2221      	movs	r2, #33	; 0x21
 80100bc:	3003      	adds	r0, #3
 80100be:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80100c0:	2000      	movs	r0, #0
 80100c2:	3a01      	subs	r2, #1
 80100c4:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80100c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80100c8:	2a00      	cmp	r2, #0
 80100ca:	d000      	beq.n	80100ce <HAL_DMA_IRQHandler+0x18a>
 80100cc:	e1a7      	b.n	801041e <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80100ce:	4a41      	ldr	r2, [pc, #260]	; (80101d4 <HAL_DMA_IRQHandler+0x290>)
 80100d0:	4d41      	ldr	r5, [pc, #260]	; (80101d8 <HAL_DMA_IRQHandler+0x294>)
 80100d2:	6810      	ldr	r0, [r2, #0]
 80100d4:	2204      	movs	r2, #4
 80100d6:	42ab      	cmp	r3, r5
 80100d8:	d034      	beq.n	8010144 <HAL_DMA_IRQHandler+0x200>
 80100da:	4d40      	ldr	r5, [pc, #256]	; (80101dc <HAL_DMA_IRQHandler+0x298>)
 80100dc:	2240      	movs	r2, #64	; 0x40
 80100de:	42ab      	cmp	r3, r5
 80100e0:	d030      	beq.n	8010144 <HAL_DMA_IRQHandler+0x200>
 80100e2:	4a3f      	ldr	r2, [pc, #252]	; (80101e0 <HAL_DMA_IRQHandler+0x29c>)
 80100e4:	4293      	cmp	r3, r2
 80100e6:	d100      	bne.n	80100ea <HAL_DMA_IRQHandler+0x1a6>
 80100e8:	e3b1      	b.n	801084e <HAL_DMA_IRQHandler+0x90a>
 80100ea:	4a3e      	ldr	r2, [pc, #248]	; (80101e4 <HAL_DMA_IRQHandler+0x2a0>)
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d100      	bne.n	80100f2 <HAL_DMA_IRQHandler+0x1ae>
 80100f0:	e39e      	b.n	8010830 <HAL_DMA_IRQHandler+0x8ec>
 80100f2:	4a3d      	ldr	r2, [pc, #244]	; (80101e8 <HAL_DMA_IRQHandler+0x2a4>)
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d100      	bne.n	80100fa <HAL_DMA_IRQHandler+0x1b6>
 80100f8:	e760      	b.n	800ffbc <HAL_DMA_IRQHandler+0x78>
 80100fa:	4a3c      	ldr	r2, [pc, #240]	; (80101ec <HAL_DMA_IRQHandler+0x2a8>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d100      	bne.n	8010102 <HAL_DMA_IRQHandler+0x1be>
 8010100:	e315      	b.n	801072e <HAL_DMA_IRQHandler+0x7ea>
 8010102:	4a33      	ldr	r2, [pc, #204]	; (80101d0 <HAL_DMA_IRQHandler+0x28c>)
 8010104:	4293      	cmp	r3, r2
 8010106:	d100      	bne.n	801010a <HAL_DMA_IRQHandler+0x1c6>
 8010108:	e2a3      	b.n	8010652 <HAL_DMA_IRQHandler+0x70e>
 801010a:	4d39      	ldr	r5, [pc, #228]	; (80101f0 <HAL_DMA_IRQHandler+0x2ac>)
 801010c:	2204      	movs	r2, #4
 801010e:	42ab      	cmp	r3, r5
 8010110:	d018      	beq.n	8010144 <HAL_DMA_IRQHandler+0x200>
 8010112:	4d38      	ldr	r5, [pc, #224]	; (80101f4 <HAL_DMA_IRQHandler+0x2b0>)
 8010114:	323c      	adds	r2, #60	; 0x3c
 8010116:	42ab      	cmp	r3, r5
 8010118:	d014      	beq.n	8010144 <HAL_DMA_IRQHandler+0x200>
 801011a:	4a37      	ldr	r2, [pc, #220]	; (80101f8 <HAL_DMA_IRQHandler+0x2b4>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d100      	bne.n	8010122 <HAL_DMA_IRQHandler+0x1de>
 8010120:	e395      	b.n	801084e <HAL_DMA_IRQHandler+0x90a>
 8010122:	4a38      	ldr	r2, [pc, #224]	; (8010204 <HAL_DMA_IRQHandler+0x2c0>)
 8010124:	189a      	adds	r2, r3, r2
 8010126:	4255      	negs	r5, r2
 8010128:	416a      	adcs	r2, r5
 801012a:	4d38      	ldr	r5, [pc, #224]	; (801020c <HAL_DMA_IRQHandler+0x2c8>)
 801012c:	4252      	negs	r2, r2
 801012e:	402a      	ands	r2, r5
 8010130:	2580      	movs	r5, #128	; 0x80
 8010132:	02ed      	lsls	r5, r5, #11
 8010134:	46ac      	mov	ip, r5
 8010136:	4462      	add	r2, ip
 8010138:	e004      	b.n	8010144 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801013a:	0732      	lsls	r2, r6, #28
 801013c:	d500      	bpl.n	8010140 <HAL_DMA_IRQHandler+0x1fc>
 801013e:	e778      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010140:	2204      	movs	r2, #4
 8010142:	6800      	ldr	r0, [r0, #0]
 8010144:	4210      	tst	r0, r2
 8010146:	d000      	beq.n	801014a <HAL_DMA_IRQHandler+0x206>
 8010148:	e0d1      	b.n	80102ee <HAL_DMA_IRQHandler+0x3aa>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801014a:	4a22      	ldr	r2, [pc, #136]	; (80101d4 <HAL_DMA_IRQHandler+0x290>)
 801014c:	6810      	ldr	r0, [r2, #0]
 801014e:	4a22      	ldr	r2, [pc, #136]	; (80101d8 <HAL_DMA_IRQHandler+0x294>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d100      	bne.n	8010156 <HAL_DMA_IRQHandler+0x212>
 8010154:	e122      	b.n	801039c <HAL_DMA_IRQHandler+0x458>
 8010156:	4a21      	ldr	r2, [pc, #132]	; (80101dc <HAL_DMA_IRQHandler+0x298>)
 8010158:	4293      	cmp	r3, r2
 801015a:	d05b      	beq.n	8010214 <HAL_DMA_IRQHandler+0x2d0>
 801015c:	4a20      	ldr	r2, [pc, #128]	; (80101e0 <HAL_DMA_IRQHandler+0x29c>)
 801015e:	4293      	cmp	r3, r2
 8010160:	d100      	bne.n	8010164 <HAL_DMA_IRQHandler+0x220>
 8010162:	e19a      	b.n	801049a <HAL_DMA_IRQHandler+0x556>
 8010164:	4a1f      	ldr	r2, [pc, #124]	; (80101e4 <HAL_DMA_IRQHandler+0x2a0>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d100      	bne.n	801016c <HAL_DMA_IRQHandler+0x228>
 801016a:	e237      	b.n	80105dc <HAL_DMA_IRQHandler+0x698>
 801016c:	4a1e      	ldr	r2, [pc, #120]	; (80101e8 <HAL_DMA_IRQHandler+0x2a4>)
 801016e:	4293      	cmp	r3, r2
 8010170:	d100      	bne.n	8010174 <HAL_DMA_IRQHandler+0x230>
 8010172:	e239      	b.n	80105e8 <HAL_DMA_IRQHandler+0x6a4>
 8010174:	4a1d      	ldr	r2, [pc, #116]	; (80101ec <HAL_DMA_IRQHandler+0x2a8>)
 8010176:	4293      	cmp	r3, r2
 8010178:	d100      	bne.n	801017c <HAL_DMA_IRQHandler+0x238>
 801017a:	e24f      	b.n	801061c <HAL_DMA_IRQHandler+0x6d8>
 801017c:	4a14      	ldr	r2, [pc, #80]	; (80101d0 <HAL_DMA_IRQHandler+0x28c>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d100      	bne.n	8010184 <HAL_DMA_IRQHandler+0x240>
 8010182:	e297      	b.n	80106b4 <HAL_DMA_IRQHandler+0x770>
 8010184:	4a1a      	ldr	r2, [pc, #104]	; (80101f0 <HAL_DMA_IRQHandler+0x2ac>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d100      	bne.n	801018c <HAL_DMA_IRQHandler+0x248>
 801018a:	e107      	b.n	801039c <HAL_DMA_IRQHandler+0x458>
 801018c:	4a19      	ldr	r2, [pc, #100]	; (80101f4 <HAL_DMA_IRQHandler+0x2b0>)
 801018e:	4293      	cmp	r3, r2
 8010190:	d040      	beq.n	8010214 <HAL_DMA_IRQHandler+0x2d0>
 8010192:	4a19      	ldr	r2, [pc, #100]	; (80101f8 <HAL_DMA_IRQHandler+0x2b4>)
 8010194:	4293      	cmp	r3, r2
 8010196:	d100      	bne.n	801019a <HAL_DMA_IRQHandler+0x256>
 8010198:	e17f      	b.n	801049a <HAL_DMA_IRQHandler+0x556>
 801019a:	4a1a      	ldr	r2, [pc, #104]	; (8010204 <HAL_DMA_IRQHandler+0x2c0>)
 801019c:	1899      	adds	r1, r3, r2
 801019e:	424a      	negs	r2, r1
 80101a0:	4151      	adcs	r1, r2
 80101a2:	4a1b      	ldr	r2, [pc, #108]	; (8010210 <HAL_DMA_IRQHandler+0x2cc>)
 80101a4:	4249      	negs	r1, r1
 80101a6:	400a      	ands	r2, r1
 80101a8:	2180      	movs	r1, #128	; 0x80
 80101aa:	0289      	lsls	r1, r1, #10
 80101ac:	468c      	mov	ip, r1
 80101ae:	4462      	add	r2, ip
 80101b0:	e031      	b.n	8010216 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80101b2:	0532      	lsls	r2, r6, #20
 80101b4:	d500      	bpl.n	80101b8 <HAL_DMA_IRQHandler+0x274>
 80101b6:	e73c      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80101b8:	2280      	movs	r2, #128	; 0x80
 80101ba:	6800      	ldr	r0, [r0, #0]
 80101bc:	0019      	movs	r1, r3
 80101be:	00d2      	lsls	r2, r2, #3
 80101c0:	e093      	b.n	80102ea <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80101c2:	0532      	lsls	r2, r6, #20
 80101c4:	d500      	bpl.n	80101c8 <HAL_DMA_IRQHandler+0x284>
 80101c6:	e734      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80101c8:	2280      	movs	r2, #128	; 0x80
 80101ca:	6800      	ldr	r0, [r0, #0]
 80101cc:	00d2      	lsls	r2, r2, #3
 80101ce:	e7b9      	b.n	8010144 <HAL_DMA_IRQHandler+0x200>
 80101d0:	40020080 	.word	0x40020080
 80101d4:	40020400 	.word	0x40020400
 80101d8:	40020008 	.word	0x40020008
 80101dc:	4002001c 	.word	0x4002001c
 80101e0:	40020030 	.word	0x40020030
 80101e4:	40020044 	.word	0x40020044
 80101e8:	40020058 	.word	0x40020058
 80101ec:	4002006c 	.word	0x4002006c
 80101f0:	40020408 	.word	0x40020408
 80101f4:	4002041c 	.word	0x4002041c
 80101f8:	40020430 	.word	0x40020430
 80101fc:	40020444 	.word	0x40020444
 8010200:	40020000 	.word	0x40020000
 8010204:	bffdfbbc 	.word	0xbffdfbbc
 8010208:	fff88000 	.word	0xfff88000
 801020c:	fffc4000 	.word	0xfffc4000
 8010210:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010214:	2220      	movs	r2, #32
 8010216:	4002      	ands	r2, r0
 8010218:	1e51      	subs	r1, r2, #1
 801021a:	418a      	sbcs	r2, r1
 801021c:	b2d2      	uxtb	r2, r2
 801021e:	2a00      	cmp	r2, #0
 8010220:	d050      	beq.n	80102c4 <HAL_DMA_IRQHandler+0x380>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010222:	2202      	movs	r2, #2
 8010224:	6819      	ldr	r1, [r3, #0]
 8010226:	420a      	tst	r2, r1
 8010228:	d04c      	beq.n	80102c4 <HAL_DMA_IRQHandler+0x380>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801022a:	6819      	ldr	r1, [r3, #0]
 801022c:	0689      	lsls	r1, r1, #26
 801022e:	d402      	bmi.n	8010236 <HAL_DMA_IRQHandler+0x2f2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8010230:	6819      	ldr	r1, [r3, #0]
 8010232:	4391      	bics	r1, r2
 8010234:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010236:	4ab5      	ldr	r2, [pc, #724]	; (801050c <HAL_DMA_IRQHandler+0x5c8>)
 8010238:	49b5      	ldr	r1, [pc, #724]	; (8010510 <HAL_DMA_IRQHandler+0x5cc>)
 801023a:	4293      	cmp	r3, r2
 801023c:	d800      	bhi.n	8010240 <HAL_DMA_IRQHandler+0x2fc>
 801023e:	e12f      	b.n	80104a0 <HAL_DMA_IRQHandler+0x55c>
 8010240:	428b      	cmp	r3, r1
 8010242:	d100      	bne.n	8010246 <HAL_DMA_IRQHandler+0x302>
 8010244:	e20e      	b.n	8010664 <HAL_DMA_IRQHandler+0x720>
 8010246:	49b3      	ldr	r1, [pc, #716]	; (8010514 <HAL_DMA_IRQHandler+0x5d0>)
 8010248:	428b      	cmp	r3, r1
 801024a:	d100      	bne.n	801024e <HAL_DMA_IRQHandler+0x30a>
 801024c:	e237      	b.n	80106be <HAL_DMA_IRQHandler+0x77a>
 801024e:	49b2      	ldr	r1, [pc, #712]	; (8010518 <HAL_DMA_IRQHandler+0x5d4>)
 8010250:	428b      	cmp	r3, r1
 8010252:	d100      	bne.n	8010256 <HAL_DMA_IRQHandler+0x312>
 8010254:	e271      	b.n	801073a <HAL_DMA_IRQHandler+0x7f6>
 8010256:	49b1      	ldr	r1, [pc, #708]	; (801051c <HAL_DMA_IRQHandler+0x5d8>)
 8010258:	428b      	cmp	r3, r1
 801025a:	d100      	bne.n	801025e <HAL_DMA_IRQHandler+0x31a>
 801025c:	e1fc      	b.n	8010658 <HAL_DMA_IRQHandler+0x714>
 801025e:	49b0      	ldr	r1, [pc, #704]	; (8010520 <HAL_DMA_IRQHandler+0x5dc>)
 8010260:	428b      	cmp	r3, r1
 8010262:	d100      	bne.n	8010266 <HAL_DMA_IRQHandler+0x322>
 8010264:	e28a      	b.n	801077c <HAL_DMA_IRQHandler+0x838>
 8010266:	49af      	ldr	r1, [pc, #700]	; (8010524 <HAL_DMA_IRQHandler+0x5e0>)
 8010268:	428b      	cmp	r3, r1
 801026a:	d100      	bne.n	801026e <HAL_DMA_IRQHandler+0x32a>
 801026c:	e2a7      	b.n	80107be <HAL_DMA_IRQHandler+0x87a>
 801026e:	4293      	cmp	r3, r2
 8010270:	d100      	bne.n	8010274 <HAL_DMA_IRQHandler+0x330>
 8010272:	e2c4      	b.n	80107fe <HAL_DMA_IRQHandler+0x8ba>
 8010274:	4aac      	ldr	r2, [pc, #688]	; (8010528 <HAL_DMA_IRQHandler+0x5e4>)
 8010276:	4293      	cmp	r3, r2
 8010278:	d100      	bne.n	801027c <HAL_DMA_IRQHandler+0x338>
 801027a:	e1f3      	b.n	8010664 <HAL_DMA_IRQHandler+0x720>
 801027c:	4aab      	ldr	r2, [pc, #684]	; (801052c <HAL_DMA_IRQHandler+0x5e8>)
 801027e:	4293      	cmp	r3, r2
 8010280:	d100      	bne.n	8010284 <HAL_DMA_IRQHandler+0x340>
 8010282:	e21c      	b.n	80106be <HAL_DMA_IRQHandler+0x77a>
 8010284:	4aaa      	ldr	r2, [pc, #680]	; (8010530 <HAL_DMA_IRQHandler+0x5ec>)
 8010286:	4293      	cmp	r3, r2
 8010288:	d100      	bne.n	801028c <HAL_DMA_IRQHandler+0x348>
 801028a:	e256      	b.n	801073a <HAL_DMA_IRQHandler+0x7f6>
 801028c:	4aa9      	ldr	r2, [pc, #676]	; (8010534 <HAL_DMA_IRQHandler+0x5f0>)
 801028e:	4694      	mov	ip, r2
 8010290:	4463      	add	r3, ip
 8010292:	1e5a      	subs	r2, r3, #1
 8010294:	4193      	sbcs	r3, r2
 8010296:	22f0      	movs	r2, #240	; 0xf0
 8010298:	425b      	negs	r3, r3
 801029a:	0252      	lsls	r2, r2, #9
 801029c:	4013      	ands	r3, r2
 801029e:	2280      	movs	r2, #128	; 0x80
 80102a0:	0192      	lsls	r2, r2, #6
 80102a2:	4694      	mov	ip, r2
 80102a4:	4463      	add	r3, ip
 80102a6:	4aa4      	ldr	r2, [pc, #656]	; (8010538 <HAL_DMA_IRQHandler+0x5f4>)
 80102a8:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80102aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 80102ac:	2201      	movs	r2, #1
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80102ae:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 80102b0:	2321      	movs	r3, #33	; 0x21
 80102b2:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 80102b4:	2200      	movs	r2, #0
 80102b6:	3b01      	subs	r3, #1
 80102b8:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80102ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d001      	beq.n	80102c4 <HAL_DMA_IRQHandler+0x380>
        hdma->XferCpltCallback(hdma);
 80102c0:	0020      	movs	r0, r4
 80102c2:	4798      	blx	r3
}  
 80102c4:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80102c6:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80102c8:	489c      	ldr	r0, [pc, #624]	; (801053c <HAL_DMA_IRQHandler+0x5f8>)
 80102ca:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80102cc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80102ce:	432a      	orrs	r2, r5
 80102d0:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80102d2:	2221      	movs	r2, #33	; 0x21
 80102d4:	3503      	adds	r5, #3
 80102d6:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80102d8:	2500      	movs	r5, #0
 80102da:	3a01      	subs	r2, #1
 80102dc:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80102de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80102e0:	2a00      	cmp	r2, #0
 80102e2:	d000      	beq.n	80102e6 <HAL_DMA_IRQHandler+0x3a2>
 80102e4:	e09b      	b.n	801041e <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80102e6:	6800      	ldr	r0, [r0, #0]
 80102e8:	2204      	movs	r2, #4
 80102ea:	4210      	tst	r0, r2
 80102ec:	d050      	beq.n	8010390 <HAL_DMA_IRQHandler+0x44c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80102ee:	2204      	movs	r2, #4
 80102f0:	6818      	ldr	r0, [r3, #0]
 80102f2:	4202      	tst	r2, r0
 80102f4:	d048      	beq.n	8010388 <HAL_DMA_IRQHandler+0x444>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80102f6:	6818      	ldr	r0, [r3, #0]
 80102f8:	0680      	lsls	r0, r0, #26
 80102fa:	d402      	bmi.n	8010302 <HAL_DMA_IRQHandler+0x3be>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80102fc:	6818      	ldr	r0, [r3, #0]
 80102fe:	4390      	bics	r0, r2
 8010300:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010302:	4a82      	ldr	r2, [pc, #520]	; (801050c <HAL_DMA_IRQHandler+0x5c8>)
 8010304:	4291      	cmp	r1, r2
 8010306:	d800      	bhi.n	801030a <HAL_DMA_IRQHandler+0x3c6>
 8010308:	e11e      	b.n	8010548 <HAL_DMA_IRQHandler+0x604>
 801030a:	4981      	ldr	r1, [pc, #516]	; (8010510 <HAL_DMA_IRQHandler+0x5cc>)
 801030c:	428b      	cmp	r3, r1
 801030e:	d100      	bne.n	8010312 <HAL_DMA_IRQHandler+0x3ce>
 8010310:	e1ac      	b.n	801066c <HAL_DMA_IRQHandler+0x728>
 8010312:	4980      	ldr	r1, [pc, #512]	; (8010514 <HAL_DMA_IRQHandler+0x5d0>)
 8010314:	428b      	cmp	r3, r1
 8010316:	d100      	bne.n	801031a <HAL_DMA_IRQHandler+0x3d6>
 8010318:	e1d5      	b.n	80106c6 <HAL_DMA_IRQHandler+0x782>
 801031a:	497f      	ldr	r1, [pc, #508]	; (8010518 <HAL_DMA_IRQHandler+0x5d4>)
 801031c:	428b      	cmp	r3, r1
 801031e:	d100      	bne.n	8010322 <HAL_DMA_IRQHandler+0x3de>
 8010320:	e188      	b.n	8010634 <HAL_DMA_IRQHandler+0x6f0>
 8010322:	497e      	ldr	r1, [pc, #504]	; (801051c <HAL_DMA_IRQHandler+0x5d8>)
 8010324:	428b      	cmp	r3, r1
 8010326:	d100      	bne.n	801032a <HAL_DMA_IRQHandler+0x3e6>
 8010328:	e20a      	b.n	8010740 <HAL_DMA_IRQHandler+0x7fc>
 801032a:	497d      	ldr	r1, [pc, #500]	; (8010520 <HAL_DMA_IRQHandler+0x5dc>)
 801032c:	428b      	cmp	r3, r1
 801032e:	d100      	bne.n	8010332 <HAL_DMA_IRQHandler+0x3ee>
 8010330:	e22d      	b.n	801078e <HAL_DMA_IRQHandler+0x84a>
 8010332:	497c      	ldr	r1, [pc, #496]	; (8010524 <HAL_DMA_IRQHandler+0x5e0>)
 8010334:	428b      	cmp	r3, r1
 8010336:	d100      	bne.n	801033a <HAL_DMA_IRQHandler+0x3f6>
 8010338:	e247      	b.n	80107ca <HAL_DMA_IRQHandler+0x886>
 801033a:	4293      	cmp	r3, r2
 801033c:	d100      	bne.n	8010340 <HAL_DMA_IRQHandler+0x3fc>
 801033e:	e264      	b.n	801080a <HAL_DMA_IRQHandler+0x8c6>
 8010340:	4a79      	ldr	r2, [pc, #484]	; (8010528 <HAL_DMA_IRQHandler+0x5e4>)
 8010342:	4293      	cmp	r3, r2
 8010344:	d100      	bne.n	8010348 <HAL_DMA_IRQHandler+0x404>
 8010346:	e191      	b.n	801066c <HAL_DMA_IRQHandler+0x728>
 8010348:	4a78      	ldr	r2, [pc, #480]	; (801052c <HAL_DMA_IRQHandler+0x5e8>)
 801034a:	4293      	cmp	r3, r2
 801034c:	d100      	bne.n	8010350 <HAL_DMA_IRQHandler+0x40c>
 801034e:	e1ba      	b.n	80106c6 <HAL_DMA_IRQHandler+0x782>
 8010350:	4a77      	ldr	r2, [pc, #476]	; (8010530 <HAL_DMA_IRQHandler+0x5ec>)
 8010352:	4293      	cmp	r3, r2
 8010354:	d100      	bne.n	8010358 <HAL_DMA_IRQHandler+0x414>
 8010356:	e16d      	b.n	8010634 <HAL_DMA_IRQHandler+0x6f0>
 8010358:	4a76      	ldr	r2, [pc, #472]	; (8010534 <HAL_DMA_IRQHandler+0x5f0>)
 801035a:	189a      	adds	r2, r3, r2
 801035c:	1e51      	subs	r1, r2, #1
 801035e:	418a      	sbcs	r2, r1
 8010360:	21f0      	movs	r1, #240	; 0xf0
 8010362:	4252      	negs	r2, r2
 8010364:	0289      	lsls	r1, r1, #10
 8010366:	400a      	ands	r2, r1
 8010368:	2180      	movs	r1, #128	; 0x80
 801036a:	01c9      	lsls	r1, r1, #7
 801036c:	468c      	mov	ip, r1
 801036e:	4462      	add	r2, ip
 8010370:	4971      	ldr	r1, [pc, #452]	; (8010538 <HAL_DMA_IRQHandler+0x5f4>)
 8010372:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010374:	2221      	movs	r2, #33	; 0x21
 8010376:	2111      	movs	r1, #17
 8010378:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801037a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801037c:	2a00      	cmp	r2, #0
 801037e:	d100      	bne.n	8010382 <HAL_DMA_IRQHandler+0x43e>
 8010380:	e6e3      	b.n	801014a <HAL_DMA_IRQHandler+0x206>
        hdma->XferHalfCpltCallback(hdma);
 8010382:	0020      	movs	r0, r4
 8010384:	4790      	blx	r2
 8010386:	6823      	ldr	r3, [r4, #0]
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010388:	4a60      	ldr	r2, [pc, #384]	; (801050c <HAL_DMA_IRQHandler+0x5c8>)
 801038a:	4293      	cmp	r3, r2
 801038c:	d900      	bls.n	8010390 <HAL_DMA_IRQHandler+0x44c>
 801038e:	e6dc      	b.n	801014a <HAL_DMA_IRQHandler+0x206>
 8010390:	4a6a      	ldr	r2, [pc, #424]	; (801053c <HAL_DMA_IRQHandler+0x5f8>)
 8010392:	6810      	ldr	r0, [r2, #0]
 8010394:	4a5e      	ldr	r2, [pc, #376]	; (8010510 <HAL_DMA_IRQHandler+0x5cc>)
 8010396:	4293      	cmp	r3, r2
 8010398:	d000      	beq.n	801039c <HAL_DMA_IRQHandler+0x458>
 801039a:	e6dc      	b.n	8010156 <HAL_DMA_IRQHandler+0x212>
 801039c:	2202      	movs	r2, #2
 801039e:	e73a      	b.n	8010216 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80103a0:	42ab      	cmp	r3, r5
 80103a2:	d090      	beq.n	80102c6 <HAL_DMA_IRQHandler+0x382>
 80103a4:	4a5b      	ldr	r2, [pc, #364]	; (8010514 <HAL_DMA_IRQHandler+0x5d0>)
 80103a6:	4293      	cmp	r3, r2
 80103a8:	d100      	bne.n	80103ac <HAL_DMA_IRQHandler+0x468>
 80103aa:	e1a1      	b.n	80106f0 <HAL_DMA_IRQHandler+0x7ac>
 80103ac:	4a5a      	ldr	r2, [pc, #360]	; (8010518 <HAL_DMA_IRQHandler+0x5d4>)
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d100      	bne.n	80103b4 <HAL_DMA_IRQHandler+0x470>
 80103b2:	e13c      	b.n	801062e <HAL_DMA_IRQHandler+0x6ea>
 80103b4:	4a59      	ldr	r2, [pc, #356]	; (801051c <HAL_DMA_IRQHandler+0x5d8>)
 80103b6:	4293      	cmp	r3, r2
 80103b8:	d100      	bne.n	80103bc <HAL_DMA_IRQHandler+0x478>
 80103ba:	e1ca      	b.n	8010752 <HAL_DMA_IRQHandler+0x80e>
 80103bc:	4a58      	ldr	r2, [pc, #352]	; (8010520 <HAL_DMA_IRQHandler+0x5dc>)
 80103be:	4293      	cmp	r3, r2
 80103c0:	d100      	bne.n	80103c4 <HAL_DMA_IRQHandler+0x480>
 80103c2:	e1de      	b.n	8010782 <HAL_DMA_IRQHandler+0x83e>
 80103c4:	4a57      	ldr	r2, [pc, #348]	; (8010524 <HAL_DMA_IRQHandler+0x5e0>)
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d100      	bne.n	80103cc <HAL_DMA_IRQHandler+0x488>
 80103ca:	e201      	b.n	80107d0 <HAL_DMA_IRQHandler+0x88c>
 80103cc:	4283      	cmp	r3, r0
 80103ce:	d100      	bne.n	80103d2 <HAL_DMA_IRQHandler+0x48e>
 80103d0:	e21e      	b.n	8010810 <HAL_DMA_IRQHandler+0x8cc>
 80103d2:	4a55      	ldr	r2, [pc, #340]	; (8010528 <HAL_DMA_IRQHandler+0x5e4>)
 80103d4:	4293      	cmp	r3, r2
 80103d6:	d100      	bne.n	80103da <HAL_DMA_IRQHandler+0x496>
 80103d8:	e22d      	b.n	8010836 <HAL_DMA_IRQHandler+0x8f2>
 80103da:	4a54      	ldr	r2, [pc, #336]	; (801052c <HAL_DMA_IRQHandler+0x5e8>)
 80103dc:	4293      	cmp	r3, r2
 80103de:	d100      	bne.n	80103e2 <HAL_DMA_IRQHandler+0x49e>
 80103e0:	e22d      	b.n	801083e <HAL_DMA_IRQHandler+0x8fa>
 80103e2:	4a53      	ldr	r2, [pc, #332]	; (8010530 <HAL_DMA_IRQHandler+0x5ec>)
 80103e4:	4293      	cmp	r3, r2
 80103e6:	d100      	bne.n	80103ea <HAL_DMA_IRQHandler+0x4a6>
 80103e8:	e121      	b.n	801062e <HAL_DMA_IRQHandler+0x6ea>
 80103ea:	4a52      	ldr	r2, [pc, #328]	; (8010534 <HAL_DMA_IRQHandler+0x5f0>)
 80103ec:	189a      	adds	r2, r3, r2
 80103ee:	4250      	negs	r0, r2
 80103f0:	4142      	adcs	r2, r0
 80103f2:	4853      	ldr	r0, [pc, #332]	; (8010540 <HAL_DMA_IRQHandler+0x5fc>)
 80103f4:	4252      	negs	r2, r2
 80103f6:	4002      	ands	r2, r0
 80103f8:	2080      	movs	r0, #128	; 0x80
 80103fa:	0300      	lsls	r0, r0, #12
 80103fc:	4684      	mov	ip, r0
 80103fe:	4462      	add	r2, ip
 8010400:	484e      	ldr	r0, [pc, #312]	; (801053c <HAL_DMA_IRQHandler+0x5f8>)
 8010402:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010404:	2001      	movs	r0, #1
 8010406:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010408:	4302      	orrs	r2, r0
 801040a:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801040c:	2221      	movs	r2, #33	; 0x21
 801040e:	3003      	adds	r0, #3
 8010410:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010412:	2000      	movs	r0, #0
 8010414:	3a01      	subs	r2, #1
 8010416:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010418:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801041a:	2a00      	cmp	r2, #0
 801041c:	d007      	beq.n	801042e <HAL_DMA_IRQHandler+0x4ea>
        hdma->XferErrorCallback(hdma);
 801041e:	0020      	movs	r0, r4
 8010420:	4790      	blx	r2
 8010422:	6823      	ldr	r3, [r4, #0]
 8010424:	0019      	movs	r1, r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010426:	4a39      	ldr	r2, [pc, #228]	; (801050c <HAL_DMA_IRQHandler+0x5c8>)
 8010428:	4293      	cmp	r3, r2
 801042a:	d900      	bls.n	801042e <HAL_DMA_IRQHandler+0x4ea>
 801042c:	e64f      	b.n	80100ce <HAL_DMA_IRQHandler+0x18a>
 801042e:	4a43      	ldr	r2, [pc, #268]	; (801053c <HAL_DMA_IRQHandler+0x5f8>)
 8010430:	6810      	ldr	r0, [r2, #0]
 8010432:	4a37      	ldr	r2, [pc, #220]	; (8010510 <HAL_DMA_IRQHandler+0x5cc>)
 8010434:	4293      	cmp	r3, r2
 8010436:	d100      	bne.n	801043a <HAL_DMA_IRQHandler+0x4f6>
 8010438:	e756      	b.n	80102e8 <HAL_DMA_IRQHandler+0x3a4>
 801043a:	4a36      	ldr	r2, [pc, #216]	; (8010514 <HAL_DMA_IRQHandler+0x5d0>)
 801043c:	4293      	cmp	r3, r2
 801043e:	d100      	bne.n	8010442 <HAL_DMA_IRQHandler+0x4fe>
 8010440:	e0c4      	b.n	80105cc <HAL_DMA_IRQHandler+0x688>
 8010442:	4a35      	ldr	r2, [pc, #212]	; (8010518 <HAL_DMA_IRQHandler+0x5d4>)
 8010444:	4293      	cmp	r3, r2
 8010446:	d100      	bne.n	801044a <HAL_DMA_IRQHandler+0x506>
 8010448:	e0cb      	b.n	80105e2 <HAL_DMA_IRQHandler+0x69e>
 801044a:	4a34      	ldr	r2, [pc, #208]	; (801051c <HAL_DMA_IRQHandler+0x5d8>)
 801044c:	4293      	cmp	r3, r2
 801044e:	d100      	bne.n	8010452 <HAL_DMA_IRQHandler+0x50e>
 8010450:	e0d2      	b.n	80105f8 <HAL_DMA_IRQHandler+0x6b4>
 8010452:	4a33      	ldr	r2, [pc, #204]	; (8010520 <HAL_DMA_IRQHandler+0x5dc>)
 8010454:	4293      	cmp	r3, r2
 8010456:	d100      	bne.n	801045a <HAL_DMA_IRQHandler+0x516>
 8010458:	e5e4      	b.n	8010024 <HAL_DMA_IRQHandler+0xe0>
 801045a:	4a32      	ldr	r2, [pc, #200]	; (8010524 <HAL_DMA_IRQHandler+0x5e0>)
 801045c:	4293      	cmp	r3, r2
 801045e:	d100      	bne.n	8010462 <HAL_DMA_IRQHandler+0x51e>
 8010460:	e15e      	b.n	8010720 <HAL_DMA_IRQHandler+0x7dc>
 8010462:	4a2a      	ldr	r2, [pc, #168]	; (801050c <HAL_DMA_IRQHandler+0x5c8>)
 8010464:	4293      	cmp	r3, r2
 8010466:	d100      	bne.n	801046a <HAL_DMA_IRQHandler+0x526>
 8010468:	e0ec      	b.n	8010644 <HAL_DMA_IRQHandler+0x700>
 801046a:	4a2f      	ldr	r2, [pc, #188]	; (8010528 <HAL_DMA_IRQHandler+0x5e4>)
 801046c:	4293      	cmp	r3, r2
 801046e:	d100      	bne.n	8010472 <HAL_DMA_IRQHandler+0x52e>
 8010470:	e73a      	b.n	80102e8 <HAL_DMA_IRQHandler+0x3a4>
 8010472:	4a2e      	ldr	r2, [pc, #184]	; (801052c <HAL_DMA_IRQHandler+0x5e8>)
 8010474:	4293      	cmp	r3, r2
 8010476:	d100      	bne.n	801047a <HAL_DMA_IRQHandler+0x536>
 8010478:	e0a8      	b.n	80105cc <HAL_DMA_IRQHandler+0x688>
 801047a:	4a2d      	ldr	r2, [pc, #180]	; (8010530 <HAL_DMA_IRQHandler+0x5ec>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d100      	bne.n	8010482 <HAL_DMA_IRQHandler+0x53e>
 8010480:	e0af      	b.n	80105e2 <HAL_DMA_IRQHandler+0x69e>
 8010482:	4a2c      	ldr	r2, [pc, #176]	; (8010534 <HAL_DMA_IRQHandler+0x5f0>)
 8010484:	189a      	adds	r2, r3, r2
 8010486:	4255      	negs	r5, r2
 8010488:	416a      	adcs	r2, r5
 801048a:	4d2e      	ldr	r5, [pc, #184]	; (8010544 <HAL_DMA_IRQHandler+0x600>)
 801048c:	4252      	negs	r2, r2
 801048e:	402a      	ands	r2, r5
 8010490:	2580      	movs	r5, #128	; 0x80
 8010492:	02ed      	lsls	r5, r5, #11
 8010494:	46ac      	mov	ip, r5
 8010496:	4462      	add	r2, ip
 8010498:	e727      	b.n	80102ea <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801049a:	2280      	movs	r2, #128	; 0x80
 801049c:	0092      	lsls	r2, r2, #2
 801049e:	e6ba      	b.n	8010216 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80104a0:	428b      	cmp	r3, r1
 80104a2:	d100      	bne.n	80104a6 <HAL_DMA_IRQHandler+0x562>
 80104a4:	e0e0      	b.n	8010668 <HAL_DMA_IRQHandler+0x724>
 80104a6:	491b      	ldr	r1, [pc, #108]	; (8010514 <HAL_DMA_IRQHandler+0x5d0>)
 80104a8:	428b      	cmp	r3, r1
 80104aa:	d100      	bne.n	80104ae <HAL_DMA_IRQHandler+0x56a>
 80104ac:	e105      	b.n	80106ba <HAL_DMA_IRQHandler+0x776>
 80104ae:	491a      	ldr	r1, [pc, #104]	; (8010518 <HAL_DMA_IRQHandler+0x5d4>)
 80104b0:	428b      	cmp	r3, r1
 80104b2:	d100      	bne.n	80104b6 <HAL_DMA_IRQHandler+0x572>
 80104b4:	e13e      	b.n	8010734 <HAL_DMA_IRQHandler+0x7f0>
 80104b6:	4919      	ldr	r1, [pc, #100]	; (801051c <HAL_DMA_IRQHandler+0x5d8>)
 80104b8:	428b      	cmp	r3, r1
 80104ba:	d100      	bne.n	80104be <HAL_DMA_IRQHandler+0x57a>
 80104bc:	e0cf      	b.n	801065e <HAL_DMA_IRQHandler+0x71a>
 80104be:	4918      	ldr	r1, [pc, #96]	; (8010520 <HAL_DMA_IRQHandler+0x5dc>)
 80104c0:	428b      	cmp	r3, r1
 80104c2:	d100      	bne.n	80104c6 <HAL_DMA_IRQHandler+0x582>
 80104c4:	e157      	b.n	8010776 <HAL_DMA_IRQHandler+0x832>
 80104c6:	4917      	ldr	r1, [pc, #92]	; (8010524 <HAL_DMA_IRQHandler+0x5e0>)
 80104c8:	428b      	cmp	r3, r1
 80104ca:	d100      	bne.n	80104ce <HAL_DMA_IRQHandler+0x58a>
 80104cc:	e174      	b.n	80107b8 <HAL_DMA_IRQHandler+0x874>
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d100      	bne.n	80104d4 <HAL_DMA_IRQHandler+0x590>
 80104d2:	e197      	b.n	8010804 <HAL_DMA_IRQHandler+0x8c0>
 80104d4:	4a14      	ldr	r2, [pc, #80]	; (8010528 <HAL_DMA_IRQHandler+0x5e4>)
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d100      	bne.n	80104dc <HAL_DMA_IRQHandler+0x598>
 80104da:	e0c5      	b.n	8010668 <HAL_DMA_IRQHandler+0x724>
 80104dc:	4a13      	ldr	r2, [pc, #76]	; (801052c <HAL_DMA_IRQHandler+0x5e8>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d100      	bne.n	80104e4 <HAL_DMA_IRQHandler+0x5a0>
 80104e2:	e0ea      	b.n	80106ba <HAL_DMA_IRQHandler+0x776>
 80104e4:	4a12      	ldr	r2, [pc, #72]	; (8010530 <HAL_DMA_IRQHandler+0x5ec>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d100      	bne.n	80104ec <HAL_DMA_IRQHandler+0x5a8>
 80104ea:	e123      	b.n	8010734 <HAL_DMA_IRQHandler+0x7f0>
 80104ec:	4a11      	ldr	r2, [pc, #68]	; (8010534 <HAL_DMA_IRQHandler+0x5f0>)
 80104ee:	4694      	mov	ip, r2
 80104f0:	4463      	add	r3, ip
 80104f2:	1e5a      	subs	r2, r3, #1
 80104f4:	4193      	sbcs	r3, r2
 80104f6:	22f0      	movs	r2, #240	; 0xf0
 80104f8:	425b      	negs	r3, r3
 80104fa:	0252      	lsls	r2, r2, #9
 80104fc:	4013      	ands	r3, r2
 80104fe:	2280      	movs	r2, #128	; 0x80
 8010500:	0192      	lsls	r2, r2, #6
 8010502:	4694      	mov	ip, r2
 8010504:	4463      	add	r3, ip
 8010506:	4a0d      	ldr	r2, [pc, #52]	; (801053c <HAL_DMA_IRQHandler+0x5f8>)
 8010508:	6053      	str	r3, [r2, #4]
 801050a:	e6ce      	b.n	80102aa <HAL_DMA_IRQHandler+0x366>
 801050c:	40020080 	.word	0x40020080
 8010510:	40020008 	.word	0x40020008
 8010514:	4002001c 	.word	0x4002001c
 8010518:	40020030 	.word	0x40020030
 801051c:	40020044 	.word	0x40020044
 8010520:	40020058 	.word	0x40020058
 8010524:	4002006c 	.word	0x4002006c
 8010528:	40020408 	.word	0x40020408
 801052c:	4002041c 	.word	0x4002041c
 8010530:	40020430 	.word	0x40020430
 8010534:	bffdfbbc 	.word	0xbffdfbbc
 8010538:	40020400 	.word	0x40020400
 801053c:	40020000 	.word	0x40020000
 8010540:	fff88000 	.word	0xfff88000
 8010544:	fffc4000 	.word	0xfffc4000
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010548:	49c2      	ldr	r1, [pc, #776]	; (8010854 <HAL_DMA_IRQHandler+0x910>)
 801054a:	428b      	cmp	r3, r1
 801054c:	d100      	bne.n	8010550 <HAL_DMA_IRQHandler+0x60c>
 801054e:	e08f      	b.n	8010670 <HAL_DMA_IRQHandler+0x72c>
 8010550:	49c1      	ldr	r1, [pc, #772]	; (8010858 <HAL_DMA_IRQHandler+0x914>)
 8010552:	428b      	cmp	r3, r1
 8010554:	d100      	bne.n	8010558 <HAL_DMA_IRQHandler+0x614>
 8010556:	e0b4      	b.n	80106c2 <HAL_DMA_IRQHandler+0x77e>
 8010558:	49c0      	ldr	r1, [pc, #768]	; (801085c <HAL_DMA_IRQHandler+0x918>)
 801055a:	428b      	cmp	r3, r1
 801055c:	d064      	beq.n	8010628 <HAL_DMA_IRQHandler+0x6e4>
 801055e:	49c0      	ldr	r1, [pc, #768]	; (8010860 <HAL_DMA_IRQHandler+0x91c>)
 8010560:	428b      	cmp	r3, r1
 8010562:	d100      	bne.n	8010566 <HAL_DMA_IRQHandler+0x622>
 8010564:	e0ef      	b.n	8010746 <HAL_DMA_IRQHandler+0x802>
 8010566:	49bf      	ldr	r1, [pc, #764]	; (8010864 <HAL_DMA_IRQHandler+0x920>)
 8010568:	428b      	cmp	r3, r1
 801056a:	d100      	bne.n	801056e <HAL_DMA_IRQHandler+0x62a>
 801056c:	e112      	b.n	8010794 <HAL_DMA_IRQHandler+0x850>
 801056e:	49be      	ldr	r1, [pc, #760]	; (8010868 <HAL_DMA_IRQHandler+0x924>)
 8010570:	428b      	cmp	r3, r1
 8010572:	d100      	bne.n	8010576 <HAL_DMA_IRQHandler+0x632>
 8010574:	e12f      	b.n	80107d6 <HAL_DMA_IRQHandler+0x892>
 8010576:	4293      	cmp	r3, r2
 8010578:	d100      	bne.n	801057c <HAL_DMA_IRQHandler+0x638>
 801057a:	e14c      	b.n	8010816 <HAL_DMA_IRQHandler+0x8d2>
 801057c:	4abb      	ldr	r2, [pc, #748]	; (801086c <HAL_DMA_IRQHandler+0x928>)
 801057e:	4293      	cmp	r3, r2
 8010580:	d076      	beq.n	8010670 <HAL_DMA_IRQHandler+0x72c>
 8010582:	4abb      	ldr	r2, [pc, #748]	; (8010870 <HAL_DMA_IRQHandler+0x92c>)
 8010584:	4293      	cmp	r3, r2
 8010586:	d100      	bne.n	801058a <HAL_DMA_IRQHandler+0x646>
 8010588:	e09b      	b.n	80106c2 <HAL_DMA_IRQHandler+0x77e>
 801058a:	4aba      	ldr	r2, [pc, #744]	; (8010874 <HAL_DMA_IRQHandler+0x930>)
 801058c:	4293      	cmp	r3, r2
 801058e:	d04b      	beq.n	8010628 <HAL_DMA_IRQHandler+0x6e4>
 8010590:	4ab9      	ldr	r2, [pc, #740]	; (8010878 <HAL_DMA_IRQHandler+0x934>)
 8010592:	189a      	adds	r2, r3, r2
 8010594:	1e51      	subs	r1, r2, #1
 8010596:	418a      	sbcs	r2, r1
 8010598:	21f0      	movs	r1, #240	; 0xf0
 801059a:	4252      	negs	r2, r2
 801059c:	0289      	lsls	r1, r1, #10
 801059e:	400a      	ands	r2, r1
 80105a0:	2180      	movs	r1, #128	; 0x80
 80105a2:	01c9      	lsls	r1, r1, #7
 80105a4:	468c      	mov	ip, r1
 80105a6:	4462      	add	r2, ip
 80105a8:	49b4      	ldr	r1, [pc, #720]	; (801087c <HAL_DMA_IRQHandler+0x938>)
 80105aa:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80105ac:	2221      	movs	r2, #33	; 0x21
 80105ae:	2111      	movs	r1, #17
 80105b0:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80105b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80105b4:	2a00      	cmp	r2, #0
 80105b6:	d100      	bne.n	80105ba <HAL_DMA_IRQHandler+0x676>
 80105b8:	e6ea      	b.n	8010390 <HAL_DMA_IRQHandler+0x44c>
        hdma->XferHalfCpltCallback(hdma);
 80105ba:	0020      	movs	r0, r4
 80105bc:	4790      	blx	r2
 80105be:	6823      	ldr	r3, [r4, #0]
 80105c0:	e6e2      	b.n	8010388 <HAL_DMA_IRQHandler+0x444>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80105c2:	0632      	lsls	r2, r6, #24
 80105c4:	d500      	bpl.n	80105c8 <HAL_DMA_IRQHandler+0x684>
 80105c6:	e534      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80105c8:	0019      	movs	r1, r3
 80105ca:	6800      	ldr	r0, [r0, #0]
 80105cc:	2240      	movs	r2, #64	; 0x40
 80105ce:	e68c      	b.n	80102ea <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80105d0:	0632      	lsls	r2, r6, #24
 80105d2:	d500      	bpl.n	80105d6 <HAL_DMA_IRQHandler+0x692>
 80105d4:	e52d      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80105d6:	6800      	ldr	r0, [r0, #0]
 80105d8:	2240      	movs	r2, #64	; 0x40
 80105da:	e5b3      	b.n	8010144 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80105dc:	2280      	movs	r2, #128	; 0x80
 80105de:	0192      	lsls	r2, r2, #6
 80105e0:	e619      	b.n	8010216 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80105e2:	2280      	movs	r2, #128	; 0x80
 80105e4:	00d2      	lsls	r2, r2, #3
 80105e6:	e680      	b.n	80102ea <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80105e8:	2280      	movs	r2, #128	; 0x80
 80105ea:	0292      	lsls	r2, r2, #10
 80105ec:	e613      	b.n	8010216 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80105ee:	0432      	lsls	r2, r6, #16
 80105f0:	d500      	bpl.n	80105f4 <HAL_DMA_IRQHandler+0x6b0>
 80105f2:	e51e      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80105f4:	4aa1      	ldr	r2, [pc, #644]	; (801087c <HAL_DMA_IRQHandler+0x938>)
 80105f6:	6810      	ldr	r0, [r2, #0]
 80105f8:	2280      	movs	r2, #128	; 0x80
 80105fa:	01d2      	lsls	r2, r2, #7
 80105fc:	e675      	b.n	80102ea <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80105fe:	0432      	lsls	r2, r6, #16
 8010600:	d500      	bpl.n	8010604 <HAL_DMA_IRQHandler+0x6c0>
 8010602:	e516      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010604:	2280      	movs	r2, #128	; 0x80
 8010606:	6800      	ldr	r0, [r0, #0]
 8010608:	0019      	movs	r1, r3
 801060a:	01d2      	lsls	r2, r2, #7
 801060c:	e66d      	b.n	80102ea <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801060e:	0432      	lsls	r2, r6, #16
 8010610:	d500      	bpl.n	8010614 <HAL_DMA_IRQHandler+0x6d0>
 8010612:	e50e      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010614:	2280      	movs	r2, #128	; 0x80
 8010616:	6800      	ldr	r0, [r0, #0]
 8010618:	01d2      	lsls	r2, r2, #7
 801061a:	e593      	b.n	8010144 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801061c:	2280      	movs	r2, #128	; 0x80
 801061e:	0392      	lsls	r2, r2, #14
 8010620:	e5f9      	b.n	8010216 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010622:	2280      	movs	r2, #128	; 0x80
 8010624:	0112      	lsls	r2, r2, #4
 8010626:	e542      	b.n	80100ae <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010628:	2280      	movs	r2, #128	; 0x80
 801062a:	00d2      	lsls	r2, r2, #3
 801062c:	e7bc      	b.n	80105a8 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801062e:	2280      	movs	r2, #128	; 0x80
 8010630:	0112      	lsls	r2, r2, #4
 8010632:	e6e5      	b.n	8010400 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010634:	2280      	movs	r2, #128	; 0x80
 8010636:	00d2      	lsls	r2, r2, #3
 8010638:	e69a      	b.n	8010370 <HAL_DMA_IRQHandler+0x42c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801063a:	0132      	lsls	r2, r6, #4
 801063c:	d500      	bpl.n	8010640 <HAL_DMA_IRQHandler+0x6fc>
 801063e:	e4f8      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010640:	0019      	movs	r1, r3
 8010642:	6800      	ldr	r0, [r0, #0]
 8010644:	2280      	movs	r2, #128	; 0x80
 8010646:	04d2      	lsls	r2, r2, #19
 8010648:	e64f      	b.n	80102ea <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801064a:	0132      	lsls	r2, r6, #4
 801064c:	d500      	bpl.n	8010650 <HAL_DMA_IRQHandler+0x70c>
 801064e:	e4f0      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010650:	6800      	ldr	r0, [r0, #0]
 8010652:	2280      	movs	r2, #128	; 0x80
 8010654:	04d2      	lsls	r2, r2, #19
 8010656:	e575      	b.n	8010144 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010658:	2380      	movs	r3, #128	; 0x80
 801065a:	019b      	lsls	r3, r3, #6
 801065c:	e623      	b.n	80102a6 <HAL_DMA_IRQHandler+0x362>
 801065e:	2380      	movs	r3, #128	; 0x80
 8010660:	019b      	lsls	r3, r3, #6
 8010662:	e750      	b.n	8010506 <HAL_DMA_IRQHandler+0x5c2>
 8010664:	2302      	movs	r3, #2
 8010666:	e61e      	b.n	80102a6 <HAL_DMA_IRQHandler+0x362>
 8010668:	2302      	movs	r3, #2
 801066a:	e74c      	b.n	8010506 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801066c:	2204      	movs	r2, #4
 801066e:	e67f      	b.n	8010370 <HAL_DMA_IRQHandler+0x42c>
 8010670:	2204      	movs	r2, #4
 8010672:	e799      	b.n	80105a8 <HAL_DMA_IRQHandler+0x664>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010674:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010676:	4882      	ldr	r0, [pc, #520]	; (8010880 <HAL_DMA_IRQHandler+0x93c>)
 8010678:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801067a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801067c:	432a      	orrs	r2, r5
 801067e:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010680:	2221      	movs	r2, #33	; 0x21
 8010682:	3503      	adds	r5, #3
 8010684:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010686:	2500      	movs	r5, #0
 8010688:	3a01      	subs	r2, #1
 801068a:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801068c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801068e:	2a00      	cmp	r2, #0
 8010690:	d000      	beq.n	8010694 <HAL_DMA_IRQHandler+0x750>
 8010692:	e6c4      	b.n	801041e <HAL_DMA_IRQHandler+0x4da>
 8010694:	e554      	b.n	8010140 <HAL_DMA_IRQHandler+0x1fc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010696:	0332      	lsls	r2, r6, #12
 8010698:	d500      	bpl.n	801069c <HAL_DMA_IRQHandler+0x758>
 801069a:	e4ca      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801069c:	2280      	movs	r2, #128	; 0x80
 801069e:	6800      	ldr	r0, [r0, #0]
 80106a0:	02d2      	lsls	r2, r2, #11
 80106a2:	e54f      	b.n	8010144 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80106a4:	0332      	lsls	r2, r6, #12
 80106a6:	d500      	bpl.n	80106aa <HAL_DMA_IRQHandler+0x766>
 80106a8:	e4c3      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80106aa:	2280      	movs	r2, #128	; 0x80
 80106ac:	6800      	ldr	r0, [r0, #0]
 80106ae:	0019      	movs	r1, r3
 80106b0:	02d2      	lsls	r2, r2, #11
 80106b2:	e61a      	b.n	80102ea <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80106b4:	2280      	movs	r2, #128	; 0x80
 80106b6:	0492      	lsls	r2, r2, #18
 80106b8:	e5ad      	b.n	8010216 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80106ba:	2320      	movs	r3, #32
 80106bc:	e723      	b.n	8010506 <HAL_DMA_IRQHandler+0x5c2>
 80106be:	2320      	movs	r3, #32
 80106c0:	e5f1      	b.n	80102a6 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80106c2:	2240      	movs	r2, #64	; 0x40
 80106c4:	e770      	b.n	80105a8 <HAL_DMA_IRQHandler+0x664>
 80106c6:	2240      	movs	r2, #64	; 0x40
 80106c8:	e652      	b.n	8010370 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80106ca:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80106cc:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80106ce:	486c      	ldr	r0, [pc, #432]	; (8010880 <HAL_DMA_IRQHandler+0x93c>)
 80106d0:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80106d2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80106d4:	432a      	orrs	r2, r5
 80106d6:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80106d8:	2221      	movs	r2, #33	; 0x21
 80106da:	3503      	adds	r5, #3
 80106dc:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80106de:	2500      	movs	r5, #0
 80106e0:	3a01      	subs	r2, #1
 80106e2:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80106e4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80106e6:	2a00      	cmp	r2, #0
 80106e8:	d000      	beq.n	80106ec <HAL_DMA_IRQHandler+0x7a8>
 80106ea:	e698      	b.n	801041e <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80106ec:	6800      	ldr	r0, [r0, #0]
 80106ee:	e4f4      	b.n	80100da <HAL_DMA_IRQHandler+0x196>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80106f0:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80106f2:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80106f4:	4861      	ldr	r0, [pc, #388]	; (801087c <HAL_DMA_IRQHandler+0x938>)
 80106f6:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80106f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80106fa:	432a      	orrs	r2, r5
 80106fc:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80106fe:	2221      	movs	r2, #33	; 0x21
 8010700:	3503      	adds	r5, #3
 8010702:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010704:	2500      	movs	r5, #0
 8010706:	3a01      	subs	r2, #1
 8010708:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801070a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801070c:	2a00      	cmp	r2, #0
 801070e:	d000      	beq.n	8010712 <HAL_DMA_IRQHandler+0x7ce>
 8010710:	e685      	b.n	801041e <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010712:	6800      	ldr	r0, [r0, #0]
 8010714:	e691      	b.n	801043a <HAL_DMA_IRQHandler+0x4f6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010716:	0232      	lsls	r2, r6, #8
 8010718:	d500      	bpl.n	801071c <HAL_DMA_IRQHandler+0x7d8>
 801071a:	e48a      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801071c:	0019      	movs	r1, r3
 801071e:	6800      	ldr	r0, [r0, #0]
 8010720:	2280      	movs	r2, #128	; 0x80
 8010722:	03d2      	lsls	r2, r2, #15
 8010724:	e5e1      	b.n	80102ea <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010726:	0232      	lsls	r2, r6, #8
 8010728:	d500      	bpl.n	801072c <HAL_DMA_IRQHandler+0x7e8>
 801072a:	e482      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801072c:	6800      	ldr	r0, [r0, #0]
 801072e:	2280      	movs	r2, #128	; 0x80
 8010730:	03d2      	lsls	r2, r2, #15
 8010732:	e507      	b.n	8010144 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010734:	2380      	movs	r3, #128	; 0x80
 8010736:	009b      	lsls	r3, r3, #2
 8010738:	e6e5      	b.n	8010506 <HAL_DMA_IRQHandler+0x5c2>
 801073a:	2380      	movs	r3, #128	; 0x80
 801073c:	009b      	lsls	r3, r3, #2
 801073e:	e5b2      	b.n	80102a6 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010740:	2280      	movs	r2, #128	; 0x80
 8010742:	01d2      	lsls	r2, r2, #7
 8010744:	e614      	b.n	8010370 <HAL_DMA_IRQHandler+0x42c>
 8010746:	2280      	movs	r2, #128	; 0x80
 8010748:	01d2      	lsls	r2, r2, #7
 801074a:	e72d      	b.n	80105a8 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801074c:	2280      	movs	r2, #128	; 0x80
 801074e:	0212      	lsls	r2, r2, #8
 8010750:	e4ad      	b.n	80100ae <HAL_DMA_IRQHandler+0x16a>
 8010752:	2280      	movs	r2, #128	; 0x80
 8010754:	0212      	lsls	r2, r2, #8
 8010756:	e653      	b.n	8010400 <HAL_DMA_IRQHandler+0x4bc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010758:	0732      	lsls	r2, r6, #28
 801075a:	d500      	bpl.n	801075e <HAL_DMA_IRQHandler+0x81a>
 801075c:	e469      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801075e:	4a47      	ldr	r2, [pc, #284]	; (801087c <HAL_DMA_IRQHandler+0x938>)
 8010760:	6810      	ldr	r0, [r2, #0]
 8010762:	2204      	movs	r2, #4
 8010764:	e5c1      	b.n	80102ea <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010766:	0732      	lsls	r2, r6, #28
 8010768:	d500      	bpl.n	801076c <HAL_DMA_IRQHandler+0x828>
 801076a:	e462      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801076c:	4a44      	ldr	r2, [pc, #272]	; (8010880 <HAL_DMA_IRQHandler+0x93c>)
 801076e:	493f      	ldr	r1, [pc, #252]	; (801086c <HAL_DMA_IRQHandler+0x928>)
 8010770:	6810      	ldr	r0, [r2, #0]
 8010772:	2204      	movs	r2, #4
 8010774:	e4e6      	b.n	8010144 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010776:	2380      	movs	r3, #128	; 0x80
 8010778:	029b      	lsls	r3, r3, #10
 801077a:	e6c4      	b.n	8010506 <HAL_DMA_IRQHandler+0x5c2>
 801077c:	2380      	movs	r3, #128	; 0x80
 801077e:	029b      	lsls	r3, r3, #10
 8010780:	e591      	b.n	80102a6 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010782:	2280      	movs	r2, #128	; 0x80
 8010784:	0312      	lsls	r2, r2, #12
 8010786:	e63b      	b.n	8010400 <HAL_DMA_IRQHandler+0x4bc>
 8010788:	2280      	movs	r2, #128	; 0x80
 801078a:	0312      	lsls	r2, r2, #12
 801078c:	e48f      	b.n	80100ae <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801078e:	2280      	movs	r2, #128	; 0x80
 8010790:	02d2      	lsls	r2, r2, #11
 8010792:	e5ed      	b.n	8010370 <HAL_DMA_IRQHandler+0x42c>
 8010794:	2280      	movs	r2, #128	; 0x80
 8010796:	02d2      	lsls	r2, r2, #11
 8010798:	e706      	b.n	80105a8 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801079a:	0632      	lsls	r2, r6, #24
 801079c:	d500      	bpl.n	80107a0 <HAL_DMA_IRQHandler+0x85c>
 801079e:	e448      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80107a0:	4a36      	ldr	r2, [pc, #216]	; (801087c <HAL_DMA_IRQHandler+0x938>)
 80107a2:	6810      	ldr	r0, [r2, #0]
 80107a4:	2240      	movs	r2, #64	; 0x40
 80107a6:	e5a0      	b.n	80102ea <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80107a8:	0632      	lsls	r2, r6, #24
 80107aa:	d500      	bpl.n	80107ae <HAL_DMA_IRQHandler+0x86a>
 80107ac:	e441      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80107ae:	4a34      	ldr	r2, [pc, #208]	; (8010880 <HAL_DMA_IRQHandler+0x93c>)
 80107b0:	492f      	ldr	r1, [pc, #188]	; (8010870 <HAL_DMA_IRQHandler+0x92c>)
 80107b2:	6810      	ldr	r0, [r2, #0]
 80107b4:	2240      	movs	r2, #64	; 0x40
 80107b6:	e4c5      	b.n	8010144 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80107b8:	2380      	movs	r3, #128	; 0x80
 80107ba:	039b      	lsls	r3, r3, #14
 80107bc:	e6a3      	b.n	8010506 <HAL_DMA_IRQHandler+0x5c2>
 80107be:	2380      	movs	r3, #128	; 0x80
 80107c0:	039b      	lsls	r3, r3, #14
 80107c2:	e570      	b.n	80102a6 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80107c4:	2280      	movs	r2, #128	; 0x80
 80107c6:	0412      	lsls	r2, r2, #16
 80107c8:	e471      	b.n	80100ae <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80107ca:	2280      	movs	r2, #128	; 0x80
 80107cc:	03d2      	lsls	r2, r2, #15
 80107ce:	e5cf      	b.n	8010370 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80107d0:	2280      	movs	r2, #128	; 0x80
 80107d2:	0412      	lsls	r2, r2, #16
 80107d4:	e614      	b.n	8010400 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80107d6:	2280      	movs	r2, #128	; 0x80
 80107d8:	03d2      	lsls	r2, r2, #15
 80107da:	e6e5      	b.n	80105a8 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80107dc:	0532      	lsls	r2, r6, #20
 80107de:	d500      	bpl.n	80107e2 <HAL_DMA_IRQHandler+0x89e>
 80107e0:	e427      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80107e2:	4a26      	ldr	r2, [pc, #152]	; (801087c <HAL_DMA_IRQHandler+0x938>)
 80107e4:	6810      	ldr	r0, [r2, #0]
 80107e6:	2280      	movs	r2, #128	; 0x80
 80107e8:	00d2      	lsls	r2, r2, #3
 80107ea:	e57e      	b.n	80102ea <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80107ec:	0532      	lsls	r2, r6, #20
 80107ee:	d500      	bpl.n	80107f2 <HAL_DMA_IRQHandler+0x8ae>
 80107f0:	e41f      	b.n	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80107f2:	4a23      	ldr	r2, [pc, #140]	; (8010880 <HAL_DMA_IRQHandler+0x93c>)
 80107f4:	0019      	movs	r1, r3
 80107f6:	6810      	ldr	r0, [r2, #0]
 80107f8:	2280      	movs	r2, #128	; 0x80
 80107fa:	00d2      	lsls	r2, r2, #3
 80107fc:	e4a2      	b.n	8010144 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80107fe:	2380      	movs	r3, #128	; 0x80
 8010800:	049b      	lsls	r3, r3, #18
 8010802:	e550      	b.n	80102a6 <HAL_DMA_IRQHandler+0x362>
 8010804:	2380      	movs	r3, #128	; 0x80
 8010806:	049b      	lsls	r3, r3, #18
 8010808:	e67d      	b.n	8010506 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801080a:	2280      	movs	r2, #128	; 0x80
 801080c:	04d2      	lsls	r2, r2, #19
 801080e:	e5af      	b.n	8010370 <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010810:	2280      	movs	r2, #128	; 0x80
 8010812:	0512      	lsls	r2, r2, #20
 8010814:	e5f4      	b.n	8010400 <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010816:	2280      	movs	r2, #128	; 0x80
 8010818:	04d2      	lsls	r2, r2, #19
 801081a:	e6c5      	b.n	80105a8 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801081c:	2280      	movs	r2, #128	; 0x80
 801081e:	0512      	lsls	r2, r2, #20
 8010820:	e445      	b.n	80100ae <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010822:	0432      	lsls	r2, r6, #16
 8010824:	d501      	bpl.n	801082a <HAL_DMA_IRQHandler+0x8e6>
 8010826:	f7ff fc04 	bl	8010032 <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801082a:	0019      	movs	r1, r3
 801082c:	4a14      	ldr	r2, [pc, #80]	; (8010880 <HAL_DMA_IRQHandler+0x93c>)
 801082e:	6810      	ldr	r0, [r2, #0]
 8010830:	2280      	movs	r2, #128	; 0x80
 8010832:	01d2      	lsls	r2, r2, #7
 8010834:	e486      	b.n	8010144 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010836:	2208      	movs	r2, #8
 8010838:	e5e2      	b.n	8010400 <HAL_DMA_IRQHandler+0x4bc>
 801083a:	2208      	movs	r2, #8
 801083c:	e437      	b.n	80100ae <HAL_DMA_IRQHandler+0x16a>
 801083e:	2280      	movs	r2, #128	; 0x80
 8010840:	e5de      	b.n	8010400 <HAL_DMA_IRQHandler+0x4bc>
 8010842:	2280      	movs	r2, #128	; 0x80
 8010844:	e433      	b.n	80100ae <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010846:	6800      	ldr	r0, [r0, #0]
 8010848:	0019      	movs	r1, r3
 801084a:	2204      	movs	r2, #4
 801084c:	e54d      	b.n	80102ea <HAL_DMA_IRQHandler+0x3a6>
 801084e:	2280      	movs	r2, #128	; 0x80
 8010850:	00d2      	lsls	r2, r2, #3
 8010852:	e477      	b.n	8010144 <HAL_DMA_IRQHandler+0x200>
 8010854:	40020008 	.word	0x40020008
 8010858:	4002001c 	.word	0x4002001c
 801085c:	40020030 	.word	0x40020030
 8010860:	40020044 	.word	0x40020044
 8010864:	40020058 	.word	0x40020058
 8010868:	4002006c 	.word	0x4002006c
 801086c:	40020408 	.word	0x40020408
 8010870:	4002041c 	.word	0x4002041c
 8010874:	40020430 	.word	0x40020430
 8010878:	bffdfbbc 	.word	0xbffdfbbc
 801087c:	40020000 	.word	0x40020000
 8010880:	40020400 	.word	0x40020400

08010884 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010884:	4b05      	ldr	r3, [pc, #20]	; (801089c <HAL_FLASH_Unlock+0x18>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
  }
  else
  {
    return HAL_ERROR;
 8010886:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010888:	691a      	ldr	r2, [r3, #16]
 801088a:	0612      	lsls	r2, r2, #24
 801088c:	d504      	bpl.n	8010898 <HAL_FLASH_Unlock+0x14>
  }

  return HAL_OK; 
 801088e:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010890:	4a03      	ldr	r2, [pc, #12]	; (80108a0 <HAL_FLASH_Unlock+0x1c>)
 8010892:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010894:	4a03      	ldr	r2, [pc, #12]	; (80108a4 <HAL_FLASH_Unlock+0x20>)
 8010896:	605a      	str	r2, [r3, #4]
}
 8010898:	4770      	bx	lr
 801089a:	46c0      	nop			; (mov r8, r8)
 801089c:	40022000 	.word	0x40022000
 80108a0:	45670123 	.word	0x45670123
 80108a4:	cdef89ab 	.word	0xcdef89ab

080108a8 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80108a8:	2180      	movs	r1, #128	; 0x80
 80108aa:	4a03      	ldr	r2, [pc, #12]	; (80108b8 <HAL_FLASH_Lock+0x10>)
  

  return HAL_OK;  
}
 80108ac:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80108ae:	6913      	ldr	r3, [r2, #16]
 80108b0:	430b      	orrs	r3, r1
 80108b2:	6113      	str	r3, [r2, #16]
}
 80108b4:	4770      	bx	lr
 80108b6:	46c0      	nop			; (mov r8, r8)
 80108b8:	40022000 	.word	0x40022000

080108bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80108bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108be:	0005      	movs	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80108c0:	f7fe fe20 	bl	800f504 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80108c4:	4c1d      	ldr	r4, [pc, #116]	; (801093c <FLASH_WaitForLastOperation+0x80>)
  uint32_t tickstart = HAL_GetTick();
 80108c6:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80108c8:	2601      	movs	r6, #1
 80108ca:	e001      	b.n	80108d0 <FLASH_WaitForLastOperation+0x14>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80108cc:	1c6b      	adds	r3, r5, #1
 80108ce:	d11d      	bne.n	801090c <FLASH_WaitForLastOperation+0x50>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80108d0:	68e3      	ldr	r3, [r4, #12]
 80108d2:	421e      	tst	r6, r3
 80108d4:	d1fa      	bne.n	80108cc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80108d6:	2320      	movs	r3, #32
 80108d8:	68e2      	ldr	r2, [r4, #12]
 80108da:	4213      	tst	r3, r2
 80108dc:	d000      	beq.n	80108e0 <FLASH_WaitForLastOperation+0x24>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80108de:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80108e0:	4b16      	ldr	r3, [pc, #88]	; (801093c <FLASH_WaitForLastOperation+0x80>)
 80108e2:	68da      	ldr	r2, [r3, #12]
 80108e4:	06d2      	lsls	r2, r2, #27
 80108e6:	d51a      	bpl.n	801091e <FLASH_WaitForLastOperation+0x62>
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80108e8:	4b14      	ldr	r3, [pc, #80]	; (801093c <FLASH_WaitForLastOperation+0x80>)
 80108ea:	68db      	ldr	r3, [r3, #12]
 80108ec:	06db      	lsls	r3, r3, #27
 80108ee:	d504      	bpl.n	80108fa <FLASH_WaitForLastOperation+0x3e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80108f0:	2102      	movs	r1, #2
 80108f2:	4a13      	ldr	r2, [pc, #76]	; (8010940 <FLASH_WaitForLastOperation+0x84>)
 80108f4:	69d3      	ldr	r3, [r2, #28]
 80108f6:	430b      	orrs	r3, r1
 80108f8:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80108fa:	4b10      	ldr	r3, [pc, #64]	; (801093c <FLASH_WaitForLastOperation+0x80>)
 80108fc:	68db      	ldr	r3, [r3, #12]
 80108fe:	075b      	lsls	r3, r3, #29
 8010900:	d416      	bmi.n	8010930 <FLASH_WaitForLastOperation+0x74>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010902:	2214      	movs	r2, #20
    return HAL_ERROR;
 8010904:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010906:	4b0d      	ldr	r3, [pc, #52]	; (801093c <FLASH_WaitForLastOperation+0x80>)
 8010908:	60da      	str	r2, [r3, #12]
}
 801090a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801090c:	2d00      	cmp	r5, #0
 801090e:	d004      	beq.n	801091a <FLASH_WaitForLastOperation+0x5e>
 8010910:	f7fe fdf8 	bl	800f504 <HAL_GetTick>
 8010914:	1bc0      	subs	r0, r0, r7
 8010916:	42a8      	cmp	r0, r5
 8010918:	d9da      	bls.n	80108d0 <FLASH_WaitForLastOperation+0x14>
        return HAL_TIMEOUT;
 801091a:	2003      	movs	r0, #3
 801091c:	e7f5      	b.n	801090a <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801091e:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8010920:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010922:	075b      	lsls	r3, r3, #29
 8010924:	d5f1      	bpl.n	801090a <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010926:	4b05      	ldr	r3, [pc, #20]	; (801093c <FLASH_WaitForLastOperation+0x80>)
 8010928:	68db      	ldr	r3, [r3, #12]
 801092a:	06db      	lsls	r3, r3, #27
 801092c:	d5e5      	bpl.n	80108fa <FLASH_WaitForLastOperation+0x3e>
 801092e:	e7df      	b.n	80108f0 <FLASH_WaitForLastOperation+0x34>
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8010930:	2101      	movs	r1, #1
 8010932:	4a03      	ldr	r2, [pc, #12]	; (8010940 <FLASH_WaitForLastOperation+0x84>)
 8010934:	69d3      	ldr	r3, [r2, #28]
 8010936:	430b      	orrs	r3, r1
 8010938:	61d3      	str	r3, [r2, #28]
 801093a:	e7e2      	b.n	8010902 <FLASH_WaitForLastOperation+0x46>
 801093c:	40022000 	.word	0x40022000
 8010940:	200073a8 	.word	0x200073a8

08010944 <HAL_FLASH_Program>:
{
 8010944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010946:	464e      	mov	r6, r9
 8010948:	4657      	mov	r7, sl
 801094a:	46de      	mov	lr, fp
 801094c:	4645      	mov	r5, r8
 801094e:	b5e0      	push	{r5, r6, r7, lr}
 8010950:	469a      	mov	sl, r3
 8010952:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 8010954:	4b2a      	ldr	r3, [pc, #168]	; (8010a00 <HAL_FLASH_Program+0xbc>)
{
 8010956:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8010958:	4699      	mov	r9, r3
 801095a:	7e1b      	ldrb	r3, [r3, #24]
{
 801095c:	0004      	movs	r4, r0
 801095e:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8010960:	2b01      	cmp	r3, #1
 8010962:	d048      	beq.n	80109f6 <HAL_FLASH_Program+0xb2>
 8010964:	2501      	movs	r5, #1
 8010966:	464b      	mov	r3, r9
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010968:	4826      	ldr	r0, [pc, #152]	; (8010a04 <HAL_FLASH_Program+0xc0>)
  __HAL_LOCK(&pFlash);
 801096a:	761d      	strb	r5, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801096c:	f7ff ffa6 	bl	80108bc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8010970:	2800      	cmp	r0, #0
 8010972:	d136      	bne.n	80109e2 <HAL_FLASH_Program+0x9e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010974:	2c01      	cmp	r4, #1
 8010976:	d040      	beq.n	80109fa <HAL_FLASH_Program+0xb6>
      nbiterations = 4;
 8010978:	3c02      	subs	r4, #2
 801097a:	4263      	negs	r3, r4
 801097c:	415c      	adcs	r4, r3
 801097e:	2304      	movs	r3, #4
 8010980:	4264      	negs	r4, r4
 8010982:	43ac      	bics	r4, r5
 8010984:	46a0      	mov	r8, r4
 8010986:	469c      	mov	ip, r3
 8010988:	44e0      	add	r8, ip
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801098a:	2300      	movs	r3, #0
      nbiterations = 4;
 801098c:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801098e:	469b      	mov	fp, r3
 8010990:	e018      	b.n	80109c4 <HAL_FLASH_Program+0x80>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010992:	4653      	mov	r3, sl
 8010994:	40d3      	lsrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010996:	464a      	mov	r2, r9
 8010998:	4659      	mov	r1, fp
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 801099a:	2701      	movs	r7, #1
 801099c:	4c1a      	ldr	r4, [pc, #104]	; (8010a08 <HAL_FLASH_Program+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801099e:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80109a0:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80109a2:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80109a4:	433a      	orrs	r2, r7
 80109a6:	6122      	str	r2, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80109a8:	4816      	ldr	r0, [pc, #88]	; (8010a04 <HAL_FLASH_Program+0xc0>)
  *(__IO uint16_t*)Address = Data;
 80109aa:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80109ac:	f7ff ff86 	bl	80108bc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80109b0:	6923      	ldr	r3, [r4, #16]
 80109b2:	43bb      	bics	r3, r7
 80109b4:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 80109b6:	2800      	cmp	r0, #0
 80109b8:	d113      	bne.n	80109e2 <HAL_FLASH_Program+0x9e>
 80109ba:	3501      	adds	r5, #1
    for (index = 0; index < nbiterations; index++)
 80109bc:	b2eb      	uxtb	r3, r5
 80109be:	3602      	adds	r6, #2
 80109c0:	4598      	cmp	r8, r3
 80109c2:	d90e      	bls.n	80109e2 <HAL_FLASH_Program+0x9e>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80109c4:	2220      	movs	r2, #32
 80109c6:	012b      	lsls	r3, r5, #4
 80109c8:	4252      	negs	r2, r2
 80109ca:	189a      	adds	r2, r3, r2
 80109cc:	d5e1      	bpl.n	8010992 <HAL_FLASH_Program+0x4e>
 80109ce:	2220      	movs	r2, #32
 80109d0:	4651      	mov	r1, sl
 80109d2:	1ad2      	subs	r2, r2, r3
 80109d4:	4091      	lsls	r1, r2
 80109d6:	000a      	movs	r2, r1
 80109d8:	9901      	ldr	r1, [sp, #4]
 80109da:	40d9      	lsrs	r1, r3
 80109dc:	000b      	movs	r3, r1
 80109de:	4313      	orrs	r3, r2
 80109e0:	e7d9      	b.n	8010996 <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 80109e2:	2300      	movs	r3, #0
 80109e4:	464a      	mov	r2, r9
 80109e6:	7613      	strb	r3, [r2, #24]
}
 80109e8:	b003      	add	sp, #12
 80109ea:	bc3c      	pop	{r2, r3, r4, r5}
 80109ec:	4690      	mov	r8, r2
 80109ee:	4699      	mov	r9, r3
 80109f0:	46a2      	mov	sl, r4
 80109f2:	46ab      	mov	fp, r5
 80109f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80109f6:	2002      	movs	r0, #2
 80109f8:	e7f6      	b.n	80109e8 <HAL_FLASH_Program+0xa4>
      nbiterations = 1;
 80109fa:	2301      	movs	r3, #1
 80109fc:	4698      	mov	r8, r3
 80109fe:	e7c4      	b.n	801098a <HAL_FLASH_Program+0x46>
 8010a00:	200073a8 	.word	0x200073a8
 8010a04:	0000c350 	.word	0x0000c350
 8010a08:	40022000 	.word	0x40022000

08010a0c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8010a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a0e:	464f      	mov	r7, r9
 8010a10:	4646      	mov	r6, r8
 8010a12:	46d6      	mov	lr, sl
 8010a14:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010a16:	4f30      	ldr	r7, [pc, #192]	; (8010ad8 <HAL_FLASHEx_Erase+0xcc>)
{
 8010a18:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8010a1a:	7e3b      	ldrb	r3, [r7, #24]
{
 8010a1c:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 8010a1e:	2b01      	cmp	r3, #1
 8010a20:	d057      	beq.n	8010ad2 <HAL_FLASHEx_Erase+0xc6>
 8010a22:	2301      	movs	r3, #1
 8010a24:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010a26:	6803      	ldr	r3, [r0, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010a28:	482c      	ldr	r0, [pc, #176]	; (8010adc <HAL_FLASHEx_Erase+0xd0>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010a2a:	2b01      	cmp	r3, #1
 8010a2c:	d034      	beq.n	8010a98 <HAL_FLASHEx_Erase+0x8c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010a2e:	f7ff ff45 	bl	80108bc <FLASH_WaitForLastOperation>
 8010a32:	2800      	cmp	r0, #0
 8010a34:	d134      	bne.n	8010aa0 <HAL_FLASHEx_Erase+0x94>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 8010a36:	2301      	movs	r3, #1
 8010a38:	464a      	mov	r2, r9
 8010a3a:	425b      	negs	r3, r3
 8010a3c:	6013      	str	r3, [r2, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010a3e:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 8010a40:	6875      	ldr	r5, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010a42:	02db      	lsls	r3, r3, #11
 8010a44:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 8010a46:	429d      	cmp	r5, r3
 8010a48:	d22a      	bcs.n	8010aa0 <HAL_FLASHEx_Erase+0x94>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010a4a:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010a4c:	4c24      	ldr	r4, [pc, #144]	; (8010ae0 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010a4e:	4698      	mov	r8, r3
 8010a50:	e00a      	b.n	8010a68 <HAL_FLASHEx_Erase+0x5c>
            address += FLASH_PAGE_SIZE)
 8010a52:	2380      	movs	r3, #128	; 0x80
 8010a54:	011b      	lsls	r3, r3, #4
 8010a56:	469c      	mov	ip, r3
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010a58:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 8010a5a:	4465      	add	r5, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010a5c:	4694      	mov	ip, r2
 8010a5e:	68b3      	ldr	r3, [r6, #8]
 8010a60:	02db      	lsls	r3, r3, #11
 8010a62:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8010a64:	42ab      	cmp	r3, r5
 8010a66:	d91c      	bls.n	8010aa2 <HAL_FLASHEx_Erase+0x96>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010a68:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010a6a:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010a6c:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010a6e:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010a70:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010a72:	481a      	ldr	r0, [pc, #104]	; (8010adc <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010a74:	4313      	orrs	r3, r2
 8010a76:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010a78:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010a7a:	6923      	ldr	r3, [r4, #16]
 8010a7c:	323e      	adds	r2, #62	; 0x3e
 8010a7e:	4313      	orrs	r3, r2
 8010a80:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010a82:	f7ff ff1b 	bl	80108bc <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010a86:	4652      	mov	r2, sl
 8010a88:	6923      	ldr	r3, [r4, #16]
 8010a8a:	4393      	bics	r3, r2
 8010a8c:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8010a8e:	2800      	cmp	r0, #0
 8010a90:	d0df      	beq.n	8010a52 <HAL_FLASHEx_Erase+0x46>
            *PageError = address;
 8010a92:	464b      	mov	r3, r9
 8010a94:	601d      	str	r5, [r3, #0]
            break;
 8010a96:	e004      	b.n	8010aa2 <HAL_FLASHEx_Erase+0x96>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010a98:	f7ff ff10 	bl	80108bc <FLASH_WaitForLastOperation>
 8010a9c:	2800      	cmp	r0, #0
 8010a9e:	d007      	beq.n	8010ab0 <HAL_FLASHEx_Erase+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010aa0:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	763b      	strb	r3, [r7, #24]
}
 8010aa6:	bc1c      	pop	{r2, r3, r4}
 8010aa8:	4690      	mov	r8, r2
 8010aaa:	4699      	mov	r9, r3
 8010aac:	46a2      	mov	sl, r4
 8010aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010ab0:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010ab2:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010ab4:	4c0a      	ldr	r4, [pc, #40]	; (8010ae0 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010ab6:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010ab8:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010aba:	4808      	ldr	r0, [pc, #32]	; (8010adc <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010abc:	432b      	orrs	r3, r5
 8010abe:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010ac0:	6923      	ldr	r3, [r4, #16]
 8010ac2:	4313      	orrs	r3, r2
 8010ac4:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010ac6:	f7ff fef9 	bl	80108bc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8010aca:	6923      	ldr	r3, [r4, #16]
 8010acc:	43ab      	bics	r3, r5
 8010ace:	6123      	str	r3, [r4, #16]
 8010ad0:	e7e7      	b.n	8010aa2 <HAL_FLASHEx_Erase+0x96>
  __HAL_LOCK(&pFlash);
 8010ad2:	2002      	movs	r0, #2
 8010ad4:	e7e7      	b.n	8010aa6 <HAL_FLASHEx_Erase+0x9a>
 8010ad6:	46c0      	nop			; (mov r8, r8)
 8010ad8:	200073a8 	.word	0x200073a8
 8010adc:	0000c350 	.word	0x0000c350
 8010ae0:	40022000 	.word	0x40022000

08010ae4 <FLASH_PageErase>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010ae4:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010ae6:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010ae8:	4b05      	ldr	r3, [pc, #20]	; (8010b00 <FLASH_PageErase+0x1c>)
 8010aea:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010aec:	4b05      	ldr	r3, [pc, #20]	; (8010b04 <FLASH_PageErase+0x20>)
 8010aee:	691a      	ldr	r2, [r3, #16]
 8010af0:	430a      	orrs	r2, r1
 8010af2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010af4:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010af6:	691a      	ldr	r2, [r3, #16]
 8010af8:	313e      	adds	r1, #62	; 0x3e
 8010afa:	430a      	orrs	r2, r1
 8010afc:	611a      	str	r2, [r3, #16]
}
 8010afe:	4770      	bx	lr
 8010b00:	200073a8 	.word	0x200073a8
 8010b04:	40022000 	.word	0x40022000

08010b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8010b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b0a:	464e      	mov	r6, r9
 8010b0c:	46de      	mov	lr, fp
 8010b0e:	4657      	mov	r7, sl
 8010b10:	4645      	mov	r5, r8
 8010b12:	b5e0      	push	{r5, r6, r7, lr}
 8010b14:	4689      	mov	r9, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8010b16:	6809      	ldr	r1, [r1, #0]
{ 
 8010b18:	b085      	sub	sp, #20
  while ((GPIO_Init->Pin) >> position)
 8010b1a:	2900      	cmp	r1, #0
 8010b1c:	d100      	bne.n	8010b20 <HAL_GPIO_Init+0x18>
 8010b1e:	e080      	b.n	8010c22 <HAL_GPIO_Init+0x11a>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010b20:	4b70      	ldr	r3, [pc, #448]	; (8010ce4 <HAL_GPIO_Init+0x1dc>)
  uint32_t position = 0x00;
 8010b22:	2400      	movs	r4, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010b24:	469b      	mov	fp, r3
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010b26:	4b70      	ldr	r3, [pc, #448]	; (8010ce8 <HAL_GPIO_Init+0x1e0>)
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010b28:	2601      	movs	r6, #1
        temp = EXTI->IMR;
 8010b2a:	4698      	mov	r8, r3
 8010b2c:	468a      	mov	sl, r1
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010b2e:	0033      	movs	r3, r6
 8010b30:	4652      	mov	r2, sl
 8010b32:	40a3      	lsls	r3, r4
 8010b34:	4013      	ands	r3, r2
 8010b36:	9300      	str	r3, [sp, #0]
    if(iocurrent)
 8010b38:	d06f      	beq.n	8010c1a <HAL_GPIO_Init+0x112>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010b3a:	464b      	mov	r3, r9
 8010b3c:	6859      	ldr	r1, [r3, #4]
 8010b3e:	2310      	movs	r3, #16
 8010b40:	000f      	movs	r7, r1
 8010b42:	439f      	bics	r7, r3
 8010b44:	003b      	movs	r3, r7
 8010b46:	9701      	str	r7, [sp, #4]
 8010b48:	2f02      	cmp	r7, #2
 8010b4a:	d100      	bne.n	8010b4e <HAL_GPIO_Init+0x46>
 8010b4c:	e070      	b.n	8010c30 <HAL_GPIO_Init+0x128>
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010b4e:	2203      	movs	r2, #3
 8010b50:	0065      	lsls	r5, r4, #1
 8010b52:	40aa      	lsls	r2, r5
 8010b54:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010b56:	6803      	ldr	r3, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010b58:	4013      	ands	r3, r2
 8010b5a:	001f      	movs	r7, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010b5c:	2303      	movs	r3, #3
 8010b5e:	400b      	ands	r3, r1
 8010b60:	40ab      	lsls	r3, r5
 8010b62:	469c      	mov	ip, r3
 8010b64:	003b      	movs	r3, r7
 8010b66:	4667      	mov	r7, ip
 8010b68:	433b      	orrs	r3, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010b6a:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8010b6c:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010b6e:	3f01      	subs	r7, #1
 8010b70:	2f01      	cmp	r7, #1
 8010b72:	d800      	bhi.n	8010b76 <HAL_GPIO_Init+0x6e>
 8010b74:	e079      	b.n	8010c6a <HAL_GPIO_Init+0x162>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010b76:	464b      	mov	r3, r9
      temp = GPIOx->PUPDR;
 8010b78:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010b7a:	403a      	ands	r2, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010b7c:	689f      	ldr	r7, [r3, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010b7e:	2380      	movs	r3, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010b80:	40af      	lsls	r7, r5
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010b82:	055b      	lsls	r3, r3, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010b84:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8010b86:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010b88:	4219      	tst	r1, r3
 8010b8a:	d046      	beq.n	8010c1a <HAL_GPIO_Init+0x112>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010b8c:	465b      	mov	r3, fp
 8010b8e:	699a      	ldr	r2, [r3, #24]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010b90:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010b92:	4332      	orrs	r2, r6
 8010b94:	619a      	str	r2, [r3, #24]
 8010b96:	699a      	ldr	r2, [r3, #24]
 8010b98:	4b54      	ldr	r3, [pc, #336]	; (8010cec <HAL_GPIO_Init+0x1e4>)
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010b9a:	4027      	ands	r7, r4
 8010b9c:	469c      	mov	ip, r3
 8010b9e:	230f      	movs	r3, #15
 8010ba0:	00bf      	lsls	r7, r7, #2
 8010ba2:	40bb      	lsls	r3, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010ba4:	4032      	ands	r2, r6
 8010ba6:	9203      	str	r2, [sp, #12]
 8010ba8:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8010baa:	08a2      	lsrs	r2, r4, #2
 8010bac:	0092      	lsls	r2, r2, #2
 8010bae:	4462      	add	r2, ip
 8010bb0:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010bb2:	439d      	bics	r5, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010bb4:	2390      	movs	r3, #144	; 0x90
 8010bb6:	05db      	lsls	r3, r3, #23
 8010bb8:	4298      	cmp	r0, r3
 8010bba:	d012      	beq.n	8010be2 <HAL_GPIO_Init+0xda>
 8010bbc:	4b4c      	ldr	r3, [pc, #304]	; (8010cf0 <HAL_GPIO_Init+0x1e8>)
 8010bbe:	4298      	cmp	r0, r3
 8010bc0:	d100      	bne.n	8010bc4 <HAL_GPIO_Init+0xbc>
 8010bc2:	e083      	b.n	8010ccc <HAL_GPIO_Init+0x1c4>
 8010bc4:	4b4b      	ldr	r3, [pc, #300]	; (8010cf4 <HAL_GPIO_Init+0x1ec>)
 8010bc6:	4298      	cmp	r0, r3
 8010bc8:	d100      	bne.n	8010bcc <HAL_GPIO_Init+0xc4>
 8010bca:	e07b      	b.n	8010cc4 <HAL_GPIO_Init+0x1bc>
 8010bcc:	4b4a      	ldr	r3, [pc, #296]	; (8010cf8 <HAL_GPIO_Init+0x1f0>)
 8010bce:	4298      	cmp	r0, r3
 8010bd0:	d100      	bne.n	8010bd4 <HAL_GPIO_Init+0xcc>
 8010bd2:	e07f      	b.n	8010cd4 <HAL_GPIO_Init+0x1cc>
 8010bd4:	4b49      	ldr	r3, [pc, #292]	; (8010cfc <HAL_GPIO_Init+0x1f4>)
 8010bd6:	4298      	cmp	r0, r3
 8010bd8:	d100      	bne.n	8010bdc <HAL_GPIO_Init+0xd4>
 8010bda:	e07f      	b.n	8010cdc <HAL_GPIO_Init+0x1d4>
 8010bdc:	2305      	movs	r3, #5
 8010bde:	40bb      	lsls	r3, r7
 8010be0:	431d      	orrs	r5, r3
        temp = EXTI->IMR;
 8010be2:	4643      	mov	r3, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 8010be4:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8010be6:	681a      	ldr	r2, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010be8:	9b00      	ldr	r3, [sp, #0]
 8010bea:	43dd      	mvns	r5, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010bec:	03cb      	lsls	r3, r1, #15
 8010bee:	d451      	bmi.n	8010c94 <HAL_GPIO_Init+0x18c>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8010bf0:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010bf2:	402a      	ands	r2, r5
        EXTI->IMR = temp;
 8010bf4:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8010bf6:	685a      	ldr	r2, [r3, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010bf8:	038b      	lsls	r3, r1, #14
 8010bfa:	d452      	bmi.n	8010ca2 <HAL_GPIO_Init+0x19a>
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8010bfc:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8010bfe:	402a      	ands	r2, r5
        EXTI->EMR = temp;
 8010c00:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010c02:	689a      	ldr	r2, [r3, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010c04:	02cb      	lsls	r3, r1, #11
 8010c06:	d453      	bmi.n	8010cb0 <HAL_GPIO_Init+0x1a8>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8010c08:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010c0a:	402a      	ands	r2, r5
        EXTI->RTSR = temp;
 8010c0c:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8010c0e:	68da      	ldr	r2, [r3, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010c10:	028b      	lsls	r3, r1, #10
 8010c12:	d454      	bmi.n	8010cbe <HAL_GPIO_Init+0x1b6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010c14:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8010c16:	4643      	mov	r3, r8
 8010c18:	60da      	str	r2, [r3, #12]
  while ((GPIO_Init->Pin) >> position)
 8010c1a:	4653      	mov	r3, sl
      }
    }
    
    position++;
 8010c1c:	3401      	adds	r4, #1
  while ((GPIO_Init->Pin) >> position)
 8010c1e:	40e3      	lsrs	r3, r4
 8010c20:	d185      	bne.n	8010b2e <HAL_GPIO_Init+0x26>
  } 
}
 8010c22:	b005      	add	sp, #20
 8010c24:	bc3c      	pop	{r2, r3, r4, r5}
 8010c26:	4690      	mov	r8, r2
 8010c28:	4699      	mov	r9, r3
 8010c2a:	46a2      	mov	sl, r4
 8010c2c:	46ab      	mov	fp, r5
 8010c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010c30:	2507      	movs	r5, #7
 8010c32:	4025      	ands	r5, r4
 8010c34:	00ad      	lsls	r5, r5, #2
 8010c36:	330d      	adds	r3, #13
 8010c38:	40ab      	lsls	r3, r5
        temp = GPIOx->AFR[position >> 3];
 8010c3a:	08e2      	lsrs	r2, r4, #3
 8010c3c:	0092      	lsls	r2, r2, #2
 8010c3e:	1882      	adds	r2, r0, r2
 8010c40:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010c42:	439f      	bics	r7, r3
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8010c44:	464b      	mov	r3, r9
 8010c46:	691b      	ldr	r3, [r3, #16]
 8010c48:	40ab      	lsls	r3, r5
 8010c4a:	001d      	movs	r5, r3
 8010c4c:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8010c4e:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010c50:	2203      	movs	r2, #3
 8010c52:	0065      	lsls	r5, r4, #1
 8010c54:	40aa      	lsls	r2, r5
 8010c56:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010c58:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010c5a:	4017      	ands	r7, r2
 8010c5c:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010c5e:	2703      	movs	r7, #3
 8010c60:	400f      	ands	r7, r1
 8010c62:	40af      	lsls	r7, r5
 8010c64:	4663      	mov	r3, ip
 8010c66:	431f      	orrs	r7, r3
      GPIOx->MODER = temp;
 8010c68:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8010c6a:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010c6c:	464b      	mov	r3, r9
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010c6e:	4017      	ands	r7, r2
 8010c70:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010c72:	68df      	ldr	r7, [r3, #12]
 8010c74:	4663      	mov	r3, ip
 8010c76:	40af      	lsls	r7, r5
 8010c78:	431f      	orrs	r7, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010c7a:	0033      	movs	r3, r6
 8010c7c:	40a3      	lsls	r3, r4
        GPIOx->OSPEEDR = temp;
 8010c7e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8010c80:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010c82:	439f      	bics	r7, r3
 8010c84:	46bc      	mov	ip, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8010c86:	090f      	lsrs	r7, r1, #4
 8010c88:	4037      	ands	r7, r6
 8010c8a:	40a7      	lsls	r7, r4
 8010c8c:	4663      	mov	r3, ip
 8010c8e:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8010c90:	6047      	str	r7, [r0, #4]
 8010c92:	e770      	b.n	8010b76 <HAL_GPIO_Init+0x6e>
          SET_BIT(temp, iocurrent); 
 8010c94:	9b00      	ldr	r3, [sp, #0]
 8010c96:	431a      	orrs	r2, r3
        EXTI->IMR = temp;
 8010c98:	4643      	mov	r3, r8
 8010c9a:	601a      	str	r2, [r3, #0]
        temp = EXTI->EMR;
 8010c9c:	685a      	ldr	r2, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010c9e:	038b      	lsls	r3, r1, #14
 8010ca0:	d5ac      	bpl.n	8010bfc <HAL_GPIO_Init+0xf4>
          SET_BIT(temp, iocurrent); 
 8010ca2:	9b00      	ldr	r3, [sp, #0]
 8010ca4:	431a      	orrs	r2, r3
        EXTI->EMR = temp;
 8010ca6:	4643      	mov	r3, r8
 8010ca8:	605a      	str	r2, [r3, #4]
        temp = EXTI->RTSR;
 8010caa:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010cac:	02cb      	lsls	r3, r1, #11
 8010cae:	d5ab      	bpl.n	8010c08 <HAL_GPIO_Init+0x100>
          SET_BIT(temp, iocurrent); 
 8010cb0:	9b00      	ldr	r3, [sp, #0]
 8010cb2:	431a      	orrs	r2, r3
        EXTI->RTSR = temp;
 8010cb4:	4643      	mov	r3, r8
 8010cb6:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 8010cb8:	68da      	ldr	r2, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010cba:	028b      	lsls	r3, r1, #10
 8010cbc:	d5aa      	bpl.n	8010c14 <HAL_GPIO_Init+0x10c>
          SET_BIT(temp, iocurrent); 
 8010cbe:	9b00      	ldr	r3, [sp, #0]
 8010cc0:	431a      	orrs	r2, r3
 8010cc2:	e7a8      	b.n	8010c16 <HAL_GPIO_Init+0x10e>
 8010cc4:	2302      	movs	r3, #2
 8010cc6:	40bb      	lsls	r3, r7
 8010cc8:	431d      	orrs	r5, r3
 8010cca:	e78a      	b.n	8010be2 <HAL_GPIO_Init+0xda>
 8010ccc:	0033      	movs	r3, r6
 8010cce:	40bb      	lsls	r3, r7
 8010cd0:	431d      	orrs	r5, r3
 8010cd2:	e786      	b.n	8010be2 <HAL_GPIO_Init+0xda>
 8010cd4:	2303      	movs	r3, #3
 8010cd6:	40bb      	lsls	r3, r7
 8010cd8:	431d      	orrs	r5, r3
 8010cda:	e782      	b.n	8010be2 <HAL_GPIO_Init+0xda>
 8010cdc:	2304      	movs	r3, #4
 8010cde:	40bb      	lsls	r3, r7
 8010ce0:	431d      	orrs	r5, r3
 8010ce2:	e77e      	b.n	8010be2 <HAL_GPIO_Init+0xda>
 8010ce4:	40021000 	.word	0x40021000
 8010ce8:	40010400 	.word	0x40010400
 8010cec:	40010000 	.word	0x40010000
 8010cf0:	48000400 	.word	0x48000400
 8010cf4:	48000800 	.word	0x48000800
 8010cf8:	48000c00 	.word	0x48000c00
 8010cfc:	48001000 	.word	0x48001000

08010d00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d02:	46de      	mov	lr, fp
 8010d04:	4657      	mov	r7, sl
 8010d06:	464e      	mov	r6, r9
 8010d08:	4645      	mov	r5, r8
 8010d0a:	b5e0      	push	{r5, r6, r7, lr}
 8010d0c:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8010d0e:	2900      	cmp	r1, #0
 8010d10:	d055      	beq.n	8010dbe <HAL_GPIO_DeInit+0xbe>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8010d12:	2201      	movs	r2, #1
 8010d14:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010d16:	3202      	adds	r2, #2
 8010d18:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010d1a:	320c      	adds	r2, #12
  uint32_t position = 0x00;
 8010d1c:	2300      	movs	r3, #0
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010d1e:	4691      	mov	r9, r2
    iocurrent = (GPIO_Pin) & (1 << position);
 8010d20:	4666      	mov	r6, ip
 8010d22:	000d      	movs	r5, r1
 8010d24:	409e      	lsls	r6, r3
 8010d26:	4035      	ands	r5, r6
    if (iocurrent)
 8010d28:	d045      	beq.n	8010db6 <HAL_GPIO_DeInit+0xb6>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010d2a:	4647      	mov	r7, r8
 8010d2c:	005c      	lsls	r4, r3, #1
 8010d2e:	40a7      	lsls	r7, r4
 8010d30:	43fc      	mvns	r4, r7
 8010d32:	6802      	ldr	r2, [r0, #0]
 8010d34:	4022      	ands	r2, r4
 8010d36:	6002      	str	r2, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010d38:	08da      	lsrs	r2, r3, #3
 8010d3a:	0092      	lsls	r2, r2, #2
 8010d3c:	1887      	adds	r7, r0, r2
 8010d3e:	9701      	str	r7, [sp, #4]
 8010d40:	6a3f      	ldr	r7, [r7, #32]
 8010d42:	46ba      	mov	sl, r7
 8010d44:	2707      	movs	r7, #7
 8010d46:	401f      	ands	r7, r3
 8010d48:	00bf      	lsls	r7, r7, #2
 8010d4a:	46bb      	mov	fp, r7
 8010d4c:	464f      	mov	r7, r9
 8010d4e:	465a      	mov	r2, fp
 8010d50:	4097      	lsls	r7, r2
 8010d52:	46bb      	mov	fp, r7
 8010d54:	4657      	mov	r7, sl
 8010d56:	465a      	mov	r2, fp
 8010d58:	4397      	bics	r7, r2
 8010d5a:	003a      	movs	r2, r7
 8010d5c:	9f01      	ldr	r7, [sp, #4]
 8010d5e:	623a      	str	r2, [r7, #32]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010d60:	6882      	ldr	r2, [r0, #8]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010d62:	464f      	mov	r7, r9
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010d64:	4022      	ands	r2, r4
 8010d66:	6082      	str	r2, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8010d68:	6842      	ldr	r2, [r0, #4]
 8010d6a:	43b2      	bics	r2, r6
 8010d6c:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010d6e:	68c2      	ldr	r2, [r0, #12]
 8010d70:	4014      	ands	r4, r2
 8010d72:	60c4      	str	r4, [r0, #12]
 8010d74:	4c2b      	ldr	r4, [pc, #172]	; (8010e24 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2];
 8010d76:	089a      	lsrs	r2, r3, #2
 8010d78:	46a2      	mov	sl, r4
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010d7a:	4644      	mov	r4, r8
 8010d7c:	401c      	ands	r4, r3
 8010d7e:	00a4      	lsls	r4, r4, #2
 8010d80:	40a7      	lsls	r7, r4
 8010d82:	0092      	lsls	r2, r2, #2
 8010d84:	4452      	add	r2, sl
      tmp = SYSCFG->EXTICR[position >> 2];
 8010d86:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010d88:	46ba      	mov	sl, r7
 8010d8a:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010d8c:	2790      	movs	r7, #144	; 0x90
 8010d8e:	05ff      	lsls	r7, r7, #23
 8010d90:	42b8      	cmp	r0, r7
 8010d92:	d01b      	beq.n	8010dcc <HAL_GPIO_DeInit+0xcc>
 8010d94:	4f24      	ldr	r7, [pc, #144]	; (8010e28 <HAL_GPIO_DeInit+0x128>)
 8010d96:	42b8      	cmp	r0, r7
 8010d98:	d033      	beq.n	8010e02 <HAL_GPIO_DeInit+0x102>
 8010d9a:	4f24      	ldr	r7, [pc, #144]	; (8010e2c <HAL_GPIO_DeInit+0x12c>)
 8010d9c:	42b8      	cmp	r0, r7
 8010d9e:	d038      	beq.n	8010e12 <HAL_GPIO_DeInit+0x112>
 8010da0:	4f23      	ldr	r7, [pc, #140]	; (8010e30 <HAL_GPIO_DeInit+0x130>)
 8010da2:	42b8      	cmp	r0, r7
 8010da4:	d039      	beq.n	8010e1a <HAL_GPIO_DeInit+0x11a>
 8010da6:	4f23      	ldr	r7, [pc, #140]	; (8010e34 <HAL_GPIO_DeInit+0x134>)
 8010da8:	42b8      	cmp	r0, r7
 8010daa:	d02e      	beq.n	8010e0a <HAL_GPIO_DeInit+0x10a>
 8010dac:	2705      	movs	r7, #5
 8010dae:	40a7      	lsls	r7, r4
 8010db0:	003c      	movs	r4, r7
 8010db2:	42a6      	cmp	r6, r4
 8010db4:	d00d      	beq.n	8010dd2 <HAL_GPIO_DeInit+0xd2>
  while (GPIO_Pin >> position)
 8010db6:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8010db8:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8010dba:	40da      	lsrs	r2, r3
 8010dbc:	d1b0      	bne.n	8010d20 <HAL_GPIO_DeInit+0x20>
  }
}
 8010dbe:	b003      	add	sp, #12
 8010dc0:	bc3c      	pop	{r2, r3, r4, r5}
 8010dc2:	4690      	mov	r8, r2
 8010dc4:	4699      	mov	r9, r3
 8010dc6:	46a2      	mov	sl, r4
 8010dc8:	46ab      	mov	fp, r5
 8010dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dcc:	2400      	movs	r4, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010dce:	42a6      	cmp	r6, r4
 8010dd0:	d1f1      	bne.n	8010db6 <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010dd2:	4656      	mov	r6, sl
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8010dd4:	43ed      	mvns	r5, r5
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010dd6:	6894      	ldr	r4, [r2, #8]
    position++;
 8010dd8:	3301      	adds	r3, #1
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010dda:	43b4      	bics	r4, r6
 8010ddc:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8010dde:	4c16      	ldr	r4, [pc, #88]	; (8010e38 <HAL_GPIO_DeInit+0x138>)
 8010de0:	6822      	ldr	r2, [r4, #0]
 8010de2:	402a      	ands	r2, r5
 8010de4:	6022      	str	r2, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8010de6:	6862      	ldr	r2, [r4, #4]
 8010de8:	402a      	ands	r2, r5
 8010dea:	6062      	str	r2, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8010dec:	68a2      	ldr	r2, [r4, #8]
 8010dee:	402a      	ands	r2, r5
 8010df0:	60a2      	str	r2, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8010df2:	68e2      	ldr	r2, [r4, #12]
 8010df4:	4015      	ands	r5, r2
  while (GPIO_Pin >> position)
 8010df6:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8010df8:	60e5      	str	r5, [r4, #12]
  while (GPIO_Pin >> position)
 8010dfa:	40da      	lsrs	r2, r3
 8010dfc:	d000      	beq.n	8010e00 <HAL_GPIO_DeInit+0x100>
 8010dfe:	e78f      	b.n	8010d20 <HAL_GPIO_DeInit+0x20>
 8010e00:	e7dd      	b.n	8010dbe <HAL_GPIO_DeInit+0xbe>
 8010e02:	4667      	mov	r7, ip
 8010e04:	40a7      	lsls	r7, r4
 8010e06:	003c      	movs	r4, r7
 8010e08:	e7e1      	b.n	8010dce <HAL_GPIO_DeInit+0xce>
 8010e0a:	2704      	movs	r7, #4
 8010e0c:	40a7      	lsls	r7, r4
 8010e0e:	003c      	movs	r4, r7
 8010e10:	e7dd      	b.n	8010dce <HAL_GPIO_DeInit+0xce>
 8010e12:	2702      	movs	r7, #2
 8010e14:	40a7      	lsls	r7, r4
 8010e16:	003c      	movs	r4, r7
 8010e18:	e7d9      	b.n	8010dce <HAL_GPIO_DeInit+0xce>
 8010e1a:	4647      	mov	r7, r8
 8010e1c:	40a7      	lsls	r7, r4
 8010e1e:	003c      	movs	r4, r7
 8010e20:	e7d5      	b.n	8010dce <HAL_GPIO_DeInit+0xce>
 8010e22:	46c0      	nop			; (mov r8, r8)
 8010e24:	40010000 	.word	0x40010000
 8010e28:	48000400 	.word	0x48000400
 8010e2c:	48000800 	.word	0x48000800
 8010e30:	48000c00 	.word	0x48000c00
 8010e34:	48001000 	.word	0x48001000
 8010e38:	40010400 	.word	0x40010400

08010e3c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010e3c:	6900      	ldr	r0, [r0, #16]
 8010e3e:	4008      	ands	r0, r1
 8010e40:	1e41      	subs	r1, r0, #1
 8010e42:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8010e44:	b2c0      	uxtb	r0, r0
  }
 8010e46:	4770      	bx	lr

08010e48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010e48:	2a00      	cmp	r2, #0
 8010e4a:	d101      	bne.n	8010e50 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010e4c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8010e4e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010e50:	6181      	str	r1, [r0, #24]
 8010e52:	e7fc      	b.n	8010e4e <HAL_GPIO_WritePin+0x6>

08010e54 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8010e54:	6943      	ldr	r3, [r0, #20]
 8010e56:	4059      	eors	r1, r3
 8010e58:	6141      	str	r1, [r0, #20]
}
 8010e5a:	4770      	bx	lr

08010e5c <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8010e5c:	4770      	bx	lr
 8010e5e:	46c0      	nop			; (mov r8, r8)

08010e60 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8010e60:	2380      	movs	r3, #128	; 0x80
 8010e62:	4a03      	ldr	r2, [pc, #12]	; (8010e70 <HAL_PWR_EnableBkUpAccess+0x10>)
 8010e64:	005b      	lsls	r3, r3, #1
 8010e66:	6811      	ldr	r1, [r2, #0]
 8010e68:	430b      	orrs	r3, r1
 8010e6a:	6013      	str	r3, [r2, #0]
}
 8010e6c:	4770      	bx	lr
 8010e6e:	46c0      	nop			; (mov r8, r8)
 8010e70:	40007000 	.word	0x40007000

08010e74 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e76:	46c6      	mov	lr, r8
 8010e78:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010e7a:	6803      	ldr	r3, [r0, #0]
{
 8010e7c:	b082      	sub	sp, #8
 8010e7e:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010e80:	07da      	lsls	r2, r3, #31
 8010e82:	d54b      	bpl.n	8010f1c <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8010e84:	210c      	movs	r1, #12
 8010e86:	48c4      	ldr	r0, [pc, #784]	; (8011198 <HAL_RCC_OscConfig+0x324>)
 8010e88:	6842      	ldr	r2, [r0, #4]
 8010e8a:	400a      	ands	r2, r1
 8010e8c:	2a04      	cmp	r2, #4
 8010e8e:	d100      	bne.n	8010e92 <HAL_RCC_OscConfig+0x1e>
 8010e90:	e153      	b.n	801113a <HAL_RCC_OscConfig+0x2c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8010e92:	6842      	ldr	r2, [r0, #4]
 8010e94:	4011      	ands	r1, r2
 8010e96:	2908      	cmp	r1, #8
 8010e98:	d108      	bne.n	8010eac <HAL_RCC_OscConfig+0x38>
 8010e9a:	21c0      	movs	r1, #192	; 0xc0
 8010e9c:	6842      	ldr	r2, [r0, #4]
 8010e9e:	0249      	lsls	r1, r1, #9
 8010ea0:	400a      	ands	r2, r1
 8010ea2:	2180      	movs	r1, #128	; 0x80
 8010ea4:	0249      	lsls	r1, r1, #9
 8010ea6:	428a      	cmp	r2, r1
 8010ea8:	d100      	bne.n	8010eac <HAL_RCC_OscConfig+0x38>
 8010eaa:	e146      	b.n	801113a <HAL_RCC_OscConfig+0x2c6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010eac:	4dba      	ldr	r5, [pc, #744]	; (8011198 <HAL_RCC_OscConfig+0x324>)
 8010eae:	4abb      	ldr	r2, [pc, #748]	; (801119c <HAL_RCC_OscConfig+0x328>)
 8010eb0:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010eb2:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010eb4:	4013      	ands	r3, r2
 8010eb6:	602b      	str	r3, [r5, #0]
 8010eb8:	682b      	ldr	r3, [r5, #0]
 8010eba:	4ab9      	ldr	r2, [pc, #740]	; (80111a0 <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010ebc:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010ebe:	4013      	ands	r3, r2
 8010ec0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8010ec2:	f7fe fb1f 	bl	800f504 <HAL_GetTick>
 8010ec6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010ec8:	e005      	b.n	8010ed6 <HAL_RCC_OscConfig+0x62>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010eca:	f7fe fb1b 	bl	800f504 <HAL_GetTick>
 8010ece:	1bc0      	subs	r0, r0, r7
 8010ed0:	2864      	cmp	r0, #100	; 0x64
 8010ed2:	d900      	bls.n	8010ed6 <HAL_RCC_OscConfig+0x62>
 8010ed4:	e13b      	b.n	801114e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010ed6:	682b      	ldr	r3, [r5, #0]
 8010ed8:	4233      	tst	r3, r6
 8010eda:	d1f6      	bne.n	8010eca <HAL_RCC_OscConfig+0x56>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010edc:	6863      	ldr	r3, [r4, #4]
 8010ede:	2b01      	cmp	r3, #1
 8010ee0:	d100      	bne.n	8010ee4 <HAL_RCC_OscConfig+0x70>
 8010ee2:	e196      	b.n	8011212 <HAL_RCC_OscConfig+0x39e>
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d000      	beq.n	8010eea <HAL_RCC_OscConfig+0x76>
 8010ee8:	e1bc      	b.n	8011264 <HAL_RCC_OscConfig+0x3f0>
 8010eea:	682b      	ldr	r3, [r5, #0]
 8010eec:	4aab      	ldr	r2, [pc, #684]	; (801119c <HAL_RCC_OscConfig+0x328>)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010eee:	4eaa      	ldr	r6, [pc, #680]	; (8011198 <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010ef0:	4013      	ands	r3, r2
 8010ef2:	602b      	str	r3, [r5, #0]
 8010ef4:	682b      	ldr	r3, [r5, #0]
 8010ef6:	4aaa      	ldr	r2, [pc, #680]	; (80111a0 <HAL_RCC_OscConfig+0x32c>)
 8010ef8:	4013      	ands	r3, r2
 8010efa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010efc:	f7fe fb02 	bl	800f504 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f00:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8010f02:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f04:	02ad      	lsls	r5, r5, #10
 8010f06:	e005      	b.n	8010f14 <HAL_RCC_OscConfig+0xa0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010f08:	f7fe fafc 	bl	800f504 <HAL_GetTick>
 8010f0c:	1bc0      	subs	r0, r0, r7
 8010f0e:	2864      	cmp	r0, #100	; 0x64
 8010f10:	d900      	bls.n	8010f14 <HAL_RCC_OscConfig+0xa0>
 8010f12:	e11c      	b.n	801114e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f14:	6833      	ldr	r3, [r6, #0]
 8010f16:	422b      	tst	r3, r5
 8010f18:	d1f6      	bne.n	8010f08 <HAL_RCC_OscConfig+0x94>
 8010f1a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010f1c:	079a      	lsls	r2, r3, #30
 8010f1e:	d529      	bpl.n	8010f74 <HAL_RCC_OscConfig+0x100>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8010f20:	220c      	movs	r2, #12
 8010f22:	499d      	ldr	r1, [pc, #628]	; (8011198 <HAL_RCC_OscConfig+0x324>)
 8010f24:	6848      	ldr	r0, [r1, #4]
 8010f26:	4202      	tst	r2, r0
 8010f28:	d100      	bne.n	8010f2c <HAL_RCC_OscConfig+0xb8>
 8010f2a:	e0fd      	b.n	8011128 <HAL_RCC_OscConfig+0x2b4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8010f2c:	6848      	ldr	r0, [r1, #4]
 8010f2e:	4002      	ands	r2, r0
 8010f30:	2a08      	cmp	r2, #8
 8010f32:	d100      	bne.n	8010f36 <HAL_RCC_OscConfig+0xc2>
 8010f34:	e0ef      	b.n	8011116 <HAL_RCC_OscConfig+0x2a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010f36:	68e3      	ldr	r3, [r4, #12]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d100      	bne.n	8010f3e <HAL_RCC_OscConfig+0xca>
 8010f3c:	e138      	b.n	80111b0 <HAL_RCC_OscConfig+0x33c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010f3e:	2201      	movs	r2, #1
 8010f40:	4f95      	ldr	r7, [pc, #596]	; (8011198 <HAL_RCC_OscConfig+0x324>)
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010f42:	2502      	movs	r5, #2
        __HAL_RCC_HSI_ENABLE();
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	4313      	orrs	r3, r2
 8010f48:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8010f4a:	f7fe fadb 	bl	800f504 <HAL_GetTick>
 8010f4e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010f50:	e005      	b.n	8010f5e <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010f52:	f7fe fad7 	bl	800f504 <HAL_GetTick>
 8010f56:	1b80      	subs	r0, r0, r6
 8010f58:	2864      	cmp	r0, #100	; 0x64
 8010f5a:	d900      	bls.n	8010f5e <HAL_RCC_OscConfig+0xea>
 8010f5c:	e0f7      	b.n	801114e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	421d      	tst	r5, r3
 8010f62:	d0f6      	beq.n	8010f52 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010f64:	21f8      	movs	r1, #248	; 0xf8
 8010f66:	683a      	ldr	r2, [r7, #0]
 8010f68:	6923      	ldr	r3, [r4, #16]
 8010f6a:	438a      	bics	r2, r1
 8010f6c:	00db      	lsls	r3, r3, #3
 8010f6e:	4313      	orrs	r3, r2
 8010f70:	603b      	str	r3, [r7, #0]
 8010f72:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010f74:	071a      	lsls	r2, r3, #28
 8010f76:	d45d      	bmi.n	8011034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010f78:	075a      	lsls	r2, r3, #29
 8010f7a:	d474      	bmi.n	8011066 <HAL_RCC_OscConfig+0x1f2>
      }
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8010f7c:	06da      	lsls	r2, r3, #27
 8010f7e:	d512      	bpl.n	8010fa6 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8010f80:	6962      	ldr	r2, [r4, #20]
 8010f82:	2a01      	cmp	r2, #1
 8010f84:	d100      	bne.n	8010f88 <HAL_RCC_OscConfig+0x114>
 8010f86:	e18c      	b.n	80112a2 <HAL_RCC_OscConfig+0x42e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8010f88:	3205      	adds	r2, #5
 8010f8a:	d000      	beq.n	8010f8e <HAL_RCC_OscConfig+0x11a>
 8010f8c:	e124      	b.n	80111d8 <HAL_RCC_OscConfig+0x364>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8010f8e:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010f90:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8010f92:	4981      	ldr	r1, [pc, #516]	; (8011198 <HAL_RCC_OscConfig+0x324>)
 8010f94:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8010f96:	4382      	bics	r2, r0
 8010f98:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010f9a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8010f9c:	69a2      	ldr	r2, [r4, #24]
 8010f9e:	43a8      	bics	r0, r5
 8010fa0:	00d2      	lsls	r2, r2, #3
 8010fa2:	4302      	orrs	r2, r0
 8010fa4:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_CR2_HSI48ON)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010fa6:	069b      	lsls	r3, r3, #26
 8010fa8:	d522      	bpl.n	8010ff0 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010faa:	220c      	movs	r2, #12
 8010fac:	497a      	ldr	r1, [pc, #488]	; (8011198 <HAL_RCC_OscConfig+0x324>)
 8010fae:	684b      	ldr	r3, [r1, #4]
 8010fb0:	4013      	ands	r3, r2
 8010fb2:	2b0c      	cmp	r3, #12
 8010fb4:	d100      	bne.n	8010fb8 <HAL_RCC_OscConfig+0x144>
 8010fb6:	e14a      	b.n	801124e <HAL_RCC_OscConfig+0x3da>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010fb8:	684b      	ldr	r3, [r1, #4]
 8010fba:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010fbc:	2a08      	cmp	r2, #8
 8010fbe:	d100      	bne.n	8010fc2 <HAL_RCC_OscConfig+0x14e>
 8010fc0:	e13e      	b.n	8011240 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010fc2:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8010fc4:	4d74      	ldr	r5, [pc, #464]	; (8011198 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d100      	bne.n	8010fcc <HAL_RCC_OscConfig+0x158>
 8010fca:	e156      	b.n	801127a <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8010fcc:	2680      	movs	r6, #128	; 0x80
 8010fce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010fd0:	0276      	lsls	r6, r6, #9
 8010fd2:	4333      	orrs	r3, r6
 8010fd4:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010fd6:	f7fe fa95 	bl	800f504 <HAL_GetTick>
 8010fda:	0007      	movs	r7, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010fdc:	e005      	b.n	8010fea <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010fde:	f7fe fa91 	bl	800f504 <HAL_GetTick>
 8010fe2:	1bc0      	subs	r0, r0, r7
 8010fe4:	2864      	cmp	r0, #100	; 0x64
 8010fe6:	d900      	bls.n	8010fea <HAL_RCC_OscConfig+0x176>
 8010fe8:	e0b1      	b.n	801114e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010fea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010fec:	4233      	tst	r3, r6
 8010fee:	d0f6      	beq.n	8010fde <HAL_RCC_OscConfig+0x16a>
#endif /* RCC_CR2_HSI48ON */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d01c      	beq.n	8011030 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010ff6:	220c      	movs	r2, #12
 8010ff8:	4d67      	ldr	r5, [pc, #412]	; (8011198 <HAL_RCC_OscConfig+0x324>)
 8010ffa:	6869      	ldr	r1, [r5, #4]
 8010ffc:	400a      	ands	r2, r1
 8010ffe:	2a08      	cmp	r2, #8
 8011000:	d100      	bne.n	8011004 <HAL_RCC_OscConfig+0x190>
 8011002:	e098      	b.n	8011136 <HAL_RCC_OscConfig+0x2c2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011004:	2b02      	cmp	r3, #2
 8011006:	d100      	bne.n	801100a <HAL_RCC_OscConfig+0x196>
 8011008:	e16a      	b.n	80112e0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801100a:	682b      	ldr	r3, [r5, #0]
 801100c:	4a65      	ldr	r2, [pc, #404]	; (80111a4 <HAL_RCC_OscConfig+0x330>)
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801100e:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8011010:	4013      	ands	r3, r2
 8011012:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011014:	f7fe fa76 	bl	800f504 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011018:	04a4      	lsls	r4, r4, #18
        tickstart = HAL_GetTick();
 801101a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801101c:	e005      	b.n	801102a <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801101e:	f7fe fa71 	bl	800f504 <HAL_GetTick>
 8011022:	1b80      	subs	r0, r0, r6
 8011024:	2864      	cmp	r0, #100	; 0x64
 8011026:	d900      	bls.n	801102a <HAL_RCC_OscConfig+0x1b6>
 8011028:	e091      	b.n	801114e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801102a:	682b      	ldr	r3, [r5, #0]
 801102c:	4223      	tst	r3, r4
 801102e:	d1f6      	bne.n	801101e <HAL_RCC_OscConfig+0x1aa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8011030:	2000      	movs	r0, #0
 8011032:	e08d      	b.n	8011150 <HAL_RCC_OscConfig+0x2dc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011034:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_LSI_ENABLE();
 8011036:	4d58      	ldr	r5, [pc, #352]	; (8011198 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011038:	2b00      	cmp	r3, #0
 801103a:	d100      	bne.n	801103e <HAL_RCC_OscConfig+0x1ca>
 801103c:	e08c      	b.n	8011158 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_LSI_ENABLE();
 801103e:	2201      	movs	r2, #1
 8011040:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011042:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8011044:	4313      	orrs	r3, r2
 8011046:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011048:	f7fe fa5c 	bl	800f504 <HAL_GetTick>
 801104c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801104e:	e004      	b.n	801105a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011050:	f7fe fa58 	bl	800f504 <HAL_GetTick>
 8011054:	1bc0      	subs	r0, r0, r7
 8011056:	2864      	cmp	r0, #100	; 0x64
 8011058:	d879      	bhi.n	801114e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801105a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801105c:	421e      	tst	r6, r3
 801105e:	d0f7      	beq.n	8011050 <HAL_RCC_OscConfig+0x1dc>
 8011060:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011062:	075a      	lsls	r2, r3, #29
 8011064:	d58a      	bpl.n	8010f7c <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_PWR_CLK_ENABLE();
 8011066:	2080      	movs	r0, #128	; 0x80
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011068:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 801106a:	4a4b      	ldr	r2, [pc, #300]	; (8011198 <HAL_RCC_OscConfig+0x324>)
 801106c:	0540      	lsls	r0, r0, #21
 801106e:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011070:	4d4d      	ldr	r5, [pc, #308]	; (80111a8 <HAL_RCC_OscConfig+0x334>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8011072:	4301      	orrs	r1, r0
 8011074:	61d1      	str	r1, [r2, #28]
 8011076:	69d3      	ldr	r3, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011078:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 801107a:	4003      	ands	r3, r0
 801107c:	9301      	str	r3, [sp, #4]
 801107e:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011080:	682b      	ldr	r3, [r5, #0]
 8011082:	4333      	orrs	r3, r6
 8011084:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8011086:	f7fe fa3d 	bl	800f504 <HAL_GetTick>
 801108a:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801108c:	e004      	b.n	8011098 <HAL_RCC_OscConfig+0x224>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801108e:	f7fe fa39 	bl	800f504 <HAL_GetTick>
 8011092:	1bc0      	subs	r0, r0, r7
 8011094:	2864      	cmp	r0, #100	; 0x64
 8011096:	d85a      	bhi.n	801114e <HAL_RCC_OscConfig+0x2da>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011098:	682b      	ldr	r3, [r5, #0]
 801109a:	4233      	tst	r3, r6
 801109c:	d0f7      	beq.n	801108e <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 801109e:	2201      	movs	r2, #1
 80110a0:	4d3d      	ldr	r5, [pc, #244]	; (8011198 <HAL_RCC_OscConfig+0x324>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80110a2:	2602      	movs	r6, #2
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80110a4:	6a2b      	ldr	r3, [r5, #32]
 80110a6:	4393      	bics	r3, r2
 80110a8:	622b      	str	r3, [r5, #32]
 80110aa:	6a2b      	ldr	r3, [r5, #32]
 80110ac:	3203      	adds	r2, #3
 80110ae:	4393      	bics	r3, r2
 80110b0:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
 80110b2:	f7fe fa27 	bl	800f504 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80110b6:	4b3d      	ldr	r3, [pc, #244]	; (80111ac <HAL_RCC_OscConfig+0x338>)
    tickstart = HAL_GetTick();
 80110b8:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80110ba:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80110bc:	e004      	b.n	80110c8 <HAL_RCC_OscConfig+0x254>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80110be:	f7fe fa21 	bl	800f504 <HAL_GetTick>
 80110c2:	1bc0      	subs	r0, r0, r7
 80110c4:	4540      	cmp	r0, r8
 80110c6:	d842      	bhi.n	801114e <HAL_RCC_OscConfig+0x2da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80110c8:	6a2b      	ldr	r3, [r5, #32]
 80110ca:	421e      	tst	r6, r3
 80110cc:	d1f7      	bne.n	80110be <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80110ce:	68a3      	ldr	r3, [r4, #8]
 80110d0:	2b01      	cmp	r3, #1
 80110d2:	d100      	bne.n	80110d6 <HAL_RCC_OscConfig+0x262>
 80110d4:	e157      	b.n	8011386 <HAL_RCC_OscConfig+0x512>
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d100      	bne.n	80110dc <HAL_RCC_OscConfig+0x268>
 80110da:	e139      	b.n	8011350 <HAL_RCC_OscConfig+0x4dc>
 80110dc:	2b05      	cmp	r3, #5
 80110de:	d100      	bne.n	80110e2 <HAL_RCC_OscConfig+0x26e>
 80110e0:	e155      	b.n	801138e <HAL_RCC_OscConfig+0x51a>
 80110e2:	2201      	movs	r2, #1
 80110e4:	6a2b      	ldr	r3, [r5, #32]
 80110e6:	4393      	bics	r3, r2
 80110e8:	622b      	str	r3, [r5, #32]
 80110ea:	6a2b      	ldr	r3, [r5, #32]
 80110ec:	3203      	adds	r2, #3
 80110ee:	4393      	bics	r3, r2
 80110f0:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80110f2:	f7fe fa07 	bl	800f504 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80110f6:	4e28      	ldr	r6, [pc, #160]	; (8011198 <HAL_RCC_OscConfig+0x324>)
      tickstart = HAL_GetTick();
 80110f8:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80110fa:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80110fc:	4f2b      	ldr	r7, [pc, #172]	; (80111ac <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80110fe:	e005      	b.n	801110c <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011100:	f7fe fa00 	bl	800f504 <HAL_GetTick>
 8011104:	4643      	mov	r3, r8
 8011106:	1ac0      	subs	r0, r0, r3
 8011108:	42b8      	cmp	r0, r7
 801110a:	d820      	bhi.n	801114e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801110c:	6a33      	ldr	r3, [r6, #32]
 801110e:	421d      	tst	r5, r3
 8011110:	d0f6      	beq.n	8011100 <HAL_RCC_OscConfig+0x28c>
 8011112:	6823      	ldr	r3, [r4, #0]
 8011114:	e732      	b.n	8010f7c <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011116:	684a      	ldr	r2, [r1, #4]
 8011118:	21c0      	movs	r1, #192	; 0xc0
 801111a:	0249      	lsls	r1, r1, #9
 801111c:	400a      	ands	r2, r1
 801111e:	2180      	movs	r1, #128	; 0x80
 8011120:	0209      	lsls	r1, r1, #8
 8011122:	428a      	cmp	r2, r1
 8011124:	d000      	beq.n	8011128 <HAL_RCC_OscConfig+0x2b4>
 8011126:	e706      	b.n	8010f36 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011128:	4a1b      	ldr	r2, [pc, #108]	; (8011198 <HAL_RCC_OscConfig+0x324>)
 801112a:	6812      	ldr	r2, [r2, #0]
 801112c:	0792      	lsls	r2, r2, #30
 801112e:	d526      	bpl.n	801117e <HAL_RCC_OscConfig+0x30a>
 8011130:	68e2      	ldr	r2, [r4, #12]
 8011132:	2a01      	cmp	r2, #1
 8011134:	d023      	beq.n	801117e <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8011136:	2001      	movs	r0, #1
 8011138:	e00a      	b.n	8011150 <HAL_RCC_OscConfig+0x2dc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801113a:	4a17      	ldr	r2, [pc, #92]	; (8011198 <HAL_RCC_OscConfig+0x324>)
 801113c:	6812      	ldr	r2, [r2, #0]
 801113e:	0392      	lsls	r2, r2, #14
 8011140:	d400      	bmi.n	8011144 <HAL_RCC_OscConfig+0x2d0>
 8011142:	e6eb      	b.n	8010f1c <HAL_RCC_OscConfig+0xa8>
 8011144:	6862      	ldr	r2, [r4, #4]
 8011146:	2a00      	cmp	r2, #0
 8011148:	d000      	beq.n	801114c <HAL_RCC_OscConfig+0x2d8>
 801114a:	e6e7      	b.n	8010f1c <HAL_RCC_OscConfig+0xa8>
 801114c:	e7f3      	b.n	8011136 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 801114e:	2003      	movs	r0, #3
}
 8011150:	b002      	add	sp, #8
 8011152:	bc04      	pop	{r2}
 8011154:	4690      	mov	r8, r2
 8011156:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8011158:	2201      	movs	r2, #1
 801115a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801115c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 801115e:	4393      	bics	r3, r2
 8011160:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011162:	f7fe f9cf 	bl	800f504 <HAL_GetTick>
 8011166:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011168:	e004      	b.n	8011174 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801116a:	f7fe f9cb 	bl	800f504 <HAL_GetTick>
 801116e:	1bc0      	subs	r0, r0, r7
 8011170:	2864      	cmp	r0, #100	; 0x64
 8011172:	d8ec      	bhi.n	801114e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011174:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011176:	421e      	tst	r6, r3
 8011178:	d1f7      	bne.n	801116a <HAL_RCC_OscConfig+0x2f6>
 801117a:	6823      	ldr	r3, [r4, #0]
 801117c:	e771      	b.n	8011062 <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801117e:	25f8      	movs	r5, #248	; 0xf8
 8011180:	4805      	ldr	r0, [pc, #20]	; (8011198 <HAL_RCC_OscConfig+0x324>)
 8011182:	6922      	ldr	r2, [r4, #16]
 8011184:	6801      	ldr	r1, [r0, #0]
 8011186:	00d2      	lsls	r2, r2, #3
 8011188:	43a9      	bics	r1, r5
 801118a:	430a      	orrs	r2, r1
 801118c:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801118e:	071a      	lsls	r2, r3, #28
 8011190:	d400      	bmi.n	8011194 <HAL_RCC_OscConfig+0x320>
 8011192:	e6f1      	b.n	8010f78 <HAL_RCC_OscConfig+0x104>
 8011194:	e74e      	b.n	8011034 <HAL_RCC_OscConfig+0x1c0>
 8011196:	46c0      	nop			; (mov r8, r8)
 8011198:	40021000 	.word	0x40021000
 801119c:	fffeffff 	.word	0xfffeffff
 80111a0:	fffbffff 	.word	0xfffbffff
 80111a4:	feffffff 	.word	0xfeffffff
 80111a8:	40007000 	.word	0x40007000
 80111ac:	00001388 	.word	0x00001388
        __HAL_RCC_HSI_DISABLE();
 80111b0:	2201      	movs	r2, #1
 80111b2:	4d7b      	ldr	r5, [pc, #492]	; (80113a0 <HAL_RCC_OscConfig+0x52c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80111b4:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80111b6:	682b      	ldr	r3, [r5, #0]
 80111b8:	4393      	bics	r3, r2
 80111ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80111bc:	f7fe f9a2 	bl	800f504 <HAL_GetTick>
 80111c0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80111c2:	e004      	b.n	80111ce <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80111c4:	f7fe f99e 	bl	800f504 <HAL_GetTick>
 80111c8:	1bc0      	subs	r0, r0, r7
 80111ca:	2864      	cmp	r0, #100	; 0x64
 80111cc:	d8bf      	bhi.n	801114e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80111ce:	682b      	ldr	r3, [r5, #0]
 80111d0:	421e      	tst	r6, r3
 80111d2:	d1f7      	bne.n	80111c4 <HAL_RCC_OscConfig+0x350>
 80111d4:	6823      	ldr	r3, [r4, #0]
 80111d6:	e6cd      	b.n	8010f74 <HAL_RCC_OscConfig+0x100>
      __HAL_RCC_HSI14ADC_DISABLE();
 80111d8:	2204      	movs	r2, #4
 80111da:	4d71      	ldr	r5, [pc, #452]	; (80113a0 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80111dc:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80111de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80111e0:	4313      	orrs	r3, r2
 80111e2:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80111e4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80111e6:	3a03      	subs	r2, #3
 80111e8:	4393      	bics	r3, r2
 80111ea:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80111ec:	f7fe f98a 	bl	800f504 <HAL_GetTick>
 80111f0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80111f2:	e004      	b.n	80111fe <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80111f4:	f7fe f986 	bl	800f504 <HAL_GetTick>
 80111f8:	1bc0      	subs	r0, r0, r7
 80111fa:	2864      	cmp	r0, #100	; 0x64
 80111fc:	d8a7      	bhi.n	801114e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80111fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011200:	421e      	tst	r6, r3
 8011202:	d1f7      	bne.n	80111f4 <HAL_RCC_OscConfig+0x380>
 8011204:	6823      	ldr	r3, [r4, #0]
 8011206:	e6ce      	b.n	8010fa6 <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011208:	2380      	movs	r3, #128	; 0x80
 801120a:	682a      	ldr	r2, [r5, #0]
 801120c:	02db      	lsls	r3, r3, #11
 801120e:	4313      	orrs	r3, r2
 8011210:	602b      	str	r3, [r5, #0]
 8011212:	2380      	movs	r3, #128	; 0x80
 8011214:	682a      	ldr	r2, [r5, #0]
 8011216:	025b      	lsls	r3, r3, #9
 8011218:	4313      	orrs	r3, r2
 801121a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801121c:	f7fe f972 	bl	800f504 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011220:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8011222:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011224:	4e5e      	ldr	r6, [pc, #376]	; (80113a0 <HAL_RCC_OscConfig+0x52c>)
 8011226:	02ad      	lsls	r5, r5, #10
 8011228:	e005      	b.n	8011236 <HAL_RCC_OscConfig+0x3c2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801122a:	f7fe f96b 	bl	800f504 <HAL_GetTick>
 801122e:	1bc0      	subs	r0, r0, r7
 8011230:	2864      	cmp	r0, #100	; 0x64
 8011232:	d900      	bls.n	8011236 <HAL_RCC_OscConfig+0x3c2>
 8011234:	e78b      	b.n	801114e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011236:	6833      	ldr	r3, [r6, #0]
 8011238:	422b      	tst	r3, r5
 801123a:	d0f6      	beq.n	801122a <HAL_RCC_OscConfig+0x3b6>
 801123c:	6823      	ldr	r3, [r4, #0]
 801123e:	e66d      	b.n	8010f1c <HAL_RCC_OscConfig+0xa8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011240:	22c0      	movs	r2, #192	; 0xc0
 8011242:	684b      	ldr	r3, [r1, #4]
 8011244:	0252      	lsls	r2, r2, #9
 8011246:	4013      	ands	r3, r2
 8011248:	4293      	cmp	r3, r2
 801124a:	d000      	beq.n	801124e <HAL_RCC_OscConfig+0x3da>
 801124c:	e6b9      	b.n	8010fc2 <HAL_RCC_OscConfig+0x14e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 801124e:	4b54      	ldr	r3, [pc, #336]	; (80113a0 <HAL_RCC_OscConfig+0x52c>)
 8011250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011252:	03db      	lsls	r3, r3, #15
 8011254:	d400      	bmi.n	8011258 <HAL_RCC_OscConfig+0x3e4>
 8011256:	e6cb      	b.n	8010ff0 <HAL_RCC_OscConfig+0x17c>
 8011258:	69e3      	ldr	r3, [r4, #28]
 801125a:	2b01      	cmp	r3, #1
 801125c:	d100      	bne.n	8011260 <HAL_RCC_OscConfig+0x3ec>
 801125e:	e6c7      	b.n	8010ff0 <HAL_RCC_OscConfig+0x17c>
        return HAL_ERROR;
 8011260:	2001      	movs	r0, #1
 8011262:	e775      	b.n	8011150 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011264:	2b05      	cmp	r3, #5
 8011266:	d0cf      	beq.n	8011208 <HAL_RCC_OscConfig+0x394>
 8011268:	682b      	ldr	r3, [r5, #0]
 801126a:	4a4e      	ldr	r2, [pc, #312]	; (80113a4 <HAL_RCC_OscConfig+0x530>)
 801126c:	4013      	ands	r3, r2
 801126e:	602b      	str	r3, [r5, #0]
 8011270:	682b      	ldr	r3, [r5, #0]
 8011272:	4a4d      	ldr	r2, [pc, #308]	; (80113a8 <HAL_RCC_OscConfig+0x534>)
 8011274:	4013      	ands	r3, r2
 8011276:	602b      	str	r3, [r5, #0]
 8011278:	e7d0      	b.n	801121c <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI48_DISABLE();
 801127a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801127c:	4a49      	ldr	r2, [pc, #292]	; (80113a4 <HAL_RCC_OscConfig+0x530>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 801127e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8011280:	4013      	ands	r3, r2
 8011282:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011284:	f7fe f93e 	bl	800f504 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011288:	0276      	lsls	r6, r6, #9
        tickstart = HAL_GetTick();
 801128a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 801128c:	e005      	b.n	801129a <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801128e:	f7fe f939 	bl	800f504 <HAL_GetTick>
 8011292:	1bc0      	subs	r0, r0, r7
 8011294:	2864      	cmp	r0, #100	; 0x64
 8011296:	d900      	bls.n	801129a <HAL_RCC_OscConfig+0x426>
 8011298:	e759      	b.n	801114e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 801129a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801129c:	4233      	tst	r3, r6
 801129e:	d1f6      	bne.n	801128e <HAL_RCC_OscConfig+0x41a>
 80112a0:	e6a6      	b.n	8010ff0 <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSI14ADC_DISABLE();
 80112a2:	2104      	movs	r1, #4
 80112a4:	4d3e      	ldr	r5, [pc, #248]	; (80113a0 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80112a6:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80112a8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80112aa:	430b      	orrs	r3, r1
 80112ac:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80112ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80112b0:	431a      	orrs	r2, r3
 80112b2:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80112b4:	f7fe f926 	bl	800f504 <HAL_GetTick>
 80112b8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80112ba:	e005      	b.n	80112c8 <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80112bc:	f7fe f922 	bl	800f504 <HAL_GetTick>
 80112c0:	1bc0      	subs	r0, r0, r7
 80112c2:	2864      	cmp	r0, #100	; 0x64
 80112c4:	d900      	bls.n	80112c8 <HAL_RCC_OscConfig+0x454>
 80112c6:	e742      	b.n	801114e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80112c8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80112ca:	421e      	tst	r6, r3
 80112cc:	d0f6      	beq.n	80112bc <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80112ce:	21f8      	movs	r1, #248	; 0xf8
 80112d0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80112d2:	69a3      	ldr	r3, [r4, #24]
 80112d4:	438a      	bics	r2, r1
 80112d6:	00db      	lsls	r3, r3, #3
 80112d8:	4313      	orrs	r3, r2
 80112da:	636b      	str	r3, [r5, #52]	; 0x34
 80112dc:	6823      	ldr	r3, [r4, #0]
 80112de:	e662      	b.n	8010fa6 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_PLL_DISABLE();
 80112e0:	682b      	ldr	r3, [r5, #0]
 80112e2:	4a32      	ldr	r2, [pc, #200]	; (80113ac <HAL_RCC_OscConfig+0x538>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80112e4:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80112e6:	4013      	ands	r3, r2
 80112e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80112ea:	f7fe f90b 	bl	800f504 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80112ee:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80112f0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80112f2:	e005      	b.n	8011300 <HAL_RCC_OscConfig+0x48c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80112f4:	f7fe f906 	bl	800f504 <HAL_GetTick>
 80112f8:	1bc0      	subs	r0, r0, r7
 80112fa:	2864      	cmp	r0, #100	; 0x64
 80112fc:	d900      	bls.n	8011300 <HAL_RCC_OscConfig+0x48c>
 80112fe:	e726      	b.n	801114e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011300:	682b      	ldr	r3, [r5, #0]
 8011302:	4233      	tst	r3, r6
 8011304:	d1f6      	bne.n	80112f4 <HAL_RCC_OscConfig+0x480>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011306:	220f      	movs	r2, #15
 8011308:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801130a:	4393      	bics	r3, r2
 801130c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801130e:	4313      	orrs	r3, r2
 8011310:	62eb      	str	r3, [r5, #44]	; 0x2c
 8011312:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011314:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011316:	686a      	ldr	r2, [r5, #4]
 8011318:	430b      	orrs	r3, r1
 801131a:	4925      	ldr	r1, [pc, #148]	; (80113b0 <HAL_RCC_OscConfig+0x53c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801131c:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801131e:	400a      	ands	r2, r1
 8011320:	4313      	orrs	r3, r2
 8011322:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8011324:	2380      	movs	r3, #128	; 0x80
 8011326:	682a      	ldr	r2, [r5, #0]
 8011328:	045b      	lsls	r3, r3, #17
 801132a:	4313      	orrs	r3, r2
 801132c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801132e:	f7fe f8e9 	bl	800f504 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011332:	4d1b      	ldr	r5, [pc, #108]	; (80113a0 <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 8011334:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011336:	04a4      	lsls	r4, r4, #18
 8011338:	e005      	b.n	8011346 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801133a:	f7fe f8e3 	bl	800f504 <HAL_GetTick>
 801133e:	1b80      	subs	r0, r0, r6
 8011340:	2864      	cmp	r0, #100	; 0x64
 8011342:	d900      	bls.n	8011346 <HAL_RCC_OscConfig+0x4d2>
 8011344:	e703      	b.n	801114e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011346:	682b      	ldr	r3, [r5, #0]
 8011348:	4223      	tst	r3, r4
 801134a:	d0f6      	beq.n	801133a <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 801134c:	2000      	movs	r0, #0
 801134e:	e6ff      	b.n	8011150 <HAL_RCC_OscConfig+0x2dc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011350:	2201      	movs	r2, #1
 8011352:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011354:	4e12      	ldr	r6, [pc, #72]	; (80113a0 <HAL_RCC_OscConfig+0x52c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011356:	4393      	bics	r3, r2
 8011358:	622b      	str	r3, [r5, #32]
 801135a:	6a2b      	ldr	r3, [r5, #32]
 801135c:	3203      	adds	r2, #3
 801135e:	4393      	bics	r3, r2
 8011360:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8011362:	f7fe f8cf 	bl	800f504 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011366:	2502      	movs	r5, #2
      tickstart = HAL_GetTick();
 8011368:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801136a:	4f12      	ldr	r7, [pc, #72]	; (80113b4 <HAL_RCC_OscConfig+0x540>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801136c:	e006      	b.n	801137c <HAL_RCC_OscConfig+0x508>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801136e:	f7fe f8c9 	bl	800f504 <HAL_GetTick>
 8011372:	4643      	mov	r3, r8
 8011374:	1ac0      	subs	r0, r0, r3
 8011376:	42b8      	cmp	r0, r7
 8011378:	d900      	bls.n	801137c <HAL_RCC_OscConfig+0x508>
 801137a:	e6e8      	b.n	801114e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801137c:	6a33      	ldr	r3, [r6, #32]
 801137e:	421d      	tst	r5, r3
 8011380:	d1f5      	bne.n	801136e <HAL_RCC_OscConfig+0x4fa>
 8011382:	6823      	ldr	r3, [r4, #0]
 8011384:	e5fa      	b.n	8010f7c <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011386:	6a2a      	ldr	r2, [r5, #32]
 8011388:	4313      	orrs	r3, r2
 801138a:	622b      	str	r3, [r5, #32]
 801138c:	e6b1      	b.n	80110f2 <HAL_RCC_OscConfig+0x27e>
 801138e:	2204      	movs	r2, #4
 8011390:	6a2b      	ldr	r3, [r5, #32]
 8011392:	4313      	orrs	r3, r2
 8011394:	622b      	str	r3, [r5, #32]
 8011396:	6a2b      	ldr	r3, [r5, #32]
 8011398:	3a03      	subs	r2, #3
 801139a:	4313      	orrs	r3, r2
 801139c:	622b      	str	r3, [r5, #32]
 801139e:	e6a8      	b.n	80110f2 <HAL_RCC_OscConfig+0x27e>
 80113a0:	40021000 	.word	0x40021000
 80113a4:	fffeffff 	.word	0xfffeffff
 80113a8:	fffbffff 	.word	0xfffbffff
 80113ac:	feffffff 	.word	0xfeffffff
 80113b0:	ffc27fff 	.word	0xffc27fff
 80113b4:	00001388 	.word	0x00001388

080113b8 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80113b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ba:	46ce      	mov	lr, r9
 80113bc:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80113be:	2301      	movs	r3, #1
{
 80113c0:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80113c2:	4985      	ldr	r1, [pc, #532]	; (80115d8 <HAL_RCC_ClockConfig+0x220>)
{
 80113c4:	b580      	push	{r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80113c6:	680a      	ldr	r2, [r1, #0]
{
 80113c8:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80113ca:	401a      	ands	r2, r3
 80113cc:	42a2      	cmp	r2, r4
 80113ce:	d20c      	bcs.n	80113ea <HAL_RCC_ClockConfig+0x32>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80113d0:	680a      	ldr	r2, [r1, #0]
 80113d2:	439a      	bics	r2, r3
 80113d4:	4322      	orrs	r2, r4
 80113d6:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80113d8:	680a      	ldr	r2, [r1, #0]
 80113da:	4013      	ands	r3, r2
 80113dc:	42a3      	cmp	r3, r4
 80113de:	d054      	beq.n	801148a <HAL_RCC_ClockConfig+0xd2>
    {
      return HAL_ERROR;
 80113e0:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80113e2:	bc0c      	pop	{r2, r3}
 80113e4:	4690      	mov	r8, r2
 80113e6:	4699      	mov	r9, r3
 80113e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80113ea:	6803      	ldr	r3, [r0, #0]
 80113ec:	079a      	lsls	r2, r3, #30
 80113ee:	d506      	bpl.n	80113fe <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80113f0:	20f0      	movs	r0, #240	; 0xf0
 80113f2:	497a      	ldr	r1, [pc, #488]	; (80115dc <HAL_RCC_ClockConfig+0x224>)
 80113f4:	684a      	ldr	r2, [r1, #4]
 80113f6:	4382      	bics	r2, r0
 80113f8:	68a8      	ldr	r0, [r5, #8]
 80113fa:	4302      	orrs	r2, r0
 80113fc:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80113fe:	07db      	lsls	r3, r3, #31
 8011400:	d52a      	bpl.n	8011458 <HAL_RCC_ClockConfig+0xa0>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011402:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011404:	4a75      	ldr	r2, [pc, #468]	; (80115dc <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011406:	2b01      	cmp	r3, #1
 8011408:	d073      	beq.n	80114f2 <HAL_RCC_ClockConfig+0x13a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801140a:	2b02      	cmp	r3, #2
 801140c:	d075      	beq.n	80114fa <HAL_RCC_ClockConfig+0x142>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801140e:	2b03      	cmp	r3, #3
 8011410:	d100      	bne.n	8011414 <HAL_RCC_ClockConfig+0x5c>
 8011412:	e09c      	b.n	801154e <HAL_RCC_ClockConfig+0x196>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011414:	6812      	ldr	r2, [r2, #0]
 8011416:	0792      	lsls	r2, r2, #30
 8011418:	d5e2      	bpl.n	80113e0 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801141a:	2103      	movs	r1, #3
 801141c:	4e6f      	ldr	r6, [pc, #444]	; (80115dc <HAL_RCC_ClockConfig+0x224>)
 801141e:	6872      	ldr	r2, [r6, #4]
 8011420:	438a      	bics	r2, r1
 8011422:	4313      	orrs	r3, r2
 8011424:	6073      	str	r3, [r6, #4]
      tickstart = HAL_GetTick();
 8011426:	f7fe f86d 	bl	800f504 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801142a:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 801142c:	0007      	movs	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801142e:	2b01      	cmp	r3, #1
 8011430:	d07d      	beq.n	801152e <HAL_RCC_ClockConfig+0x176>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011432:	2b02      	cmp	r3, #2
 8011434:	d100      	bne.n	8011438 <HAL_RCC_ClockConfig+0x80>
 8011436:	e093      	b.n	8011560 <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011438:	2b03      	cmp	r3, #3
 801143a:	d066      	beq.n	801150a <HAL_RCC_ClockConfig+0x152>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801143c:	230c      	movs	r3, #12
 801143e:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011440:	4b67      	ldr	r3, [pc, #412]	; (80115e0 <HAL_RCC_ClockConfig+0x228>)
 8011442:	4699      	mov	r9, r3
 8011444:	e004      	b.n	8011450 <HAL_RCC_ClockConfig+0x98>
 8011446:	f7fe f85d 	bl	800f504 <HAL_GetTick>
 801144a:	1bc0      	subs	r0, r0, r7
 801144c:	4548      	cmp	r0, r9
 801144e:	d86c      	bhi.n	801152a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011450:	4642      	mov	r2, r8
 8011452:	6873      	ldr	r3, [r6, #4]
 8011454:	421a      	tst	r2, r3
 8011456:	d1f6      	bne.n	8011446 <HAL_RCC_ClockConfig+0x8e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011458:	2201      	movs	r2, #1
 801145a:	495f      	ldr	r1, [pc, #380]	; (80115d8 <HAL_RCC_ClockConfig+0x220>)
 801145c:	680b      	ldr	r3, [r1, #0]
 801145e:	4393      	bics	r3, r2
 8011460:	4323      	orrs	r3, r4
 8011462:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011464:	680b      	ldr	r3, [r1, #0]
 8011466:	401a      	ands	r2, r3
 8011468:	42a2      	cmp	r2, r4
 801146a:	d1b9      	bne.n	80113e0 <HAL_RCC_ClockConfig+0x28>
 801146c:	682b      	ldr	r3, [r5, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801146e:	075b      	lsls	r3, r3, #29
 8011470:	d506      	bpl.n	8011480 <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8011472:	4a5a      	ldr	r2, [pc, #360]	; (80115dc <HAL_RCC_ClockConfig+0x224>)
 8011474:	495b      	ldr	r1, [pc, #364]	; (80115e4 <HAL_RCC_ClockConfig+0x22c>)
 8011476:	6853      	ldr	r3, [r2, #4]
 8011478:	400b      	ands	r3, r1
 801147a:	68e9      	ldr	r1, [r5, #12]
 801147c:	430b      	orrs	r3, r1
 801147e:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8011480:	2000      	movs	r0, #0
 8011482:	f7fe f815 	bl	800f4b0 <HAL_InitTick>
  return HAL_OK;
 8011486:	2000      	movs	r0, #0
 8011488:	e7ab      	b.n	80113e2 <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801148a:	6803      	ldr	r3, [r0, #0]
 801148c:	079a      	lsls	r2, r3, #30
 801148e:	d506      	bpl.n	801149e <HAL_RCC_ClockConfig+0xe6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011490:	20f0      	movs	r0, #240	; 0xf0
 8011492:	4952      	ldr	r1, [pc, #328]	; (80115dc <HAL_RCC_ClockConfig+0x224>)
 8011494:	684a      	ldr	r2, [r1, #4]
 8011496:	4382      	bics	r2, r0
 8011498:	68a8      	ldr	r0, [r5, #8]
 801149a:	4302      	orrs	r2, r0
 801149c:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801149e:	07da      	lsls	r2, r3, #31
 80114a0:	d5e5      	bpl.n	801146e <HAL_RCC_ClockConfig+0xb6>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80114a2:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80114a4:	4a4d      	ldr	r2, [pc, #308]	; (80115dc <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80114a6:	2b01      	cmp	r3, #1
 80114a8:	d056      	beq.n	8011558 <HAL_RCC_ClockConfig+0x1a0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80114aa:	2b02      	cmp	r3, #2
 80114ac:	d029      	beq.n	8011502 <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80114ae:	2b03      	cmp	r3, #3
 80114b0:	d073      	beq.n	801159a <HAL_RCC_ClockConfig+0x1e2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80114b2:	6812      	ldr	r2, [r2, #0]
 80114b4:	0792      	lsls	r2, r2, #30
 80114b6:	d593      	bpl.n	80113e0 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80114b8:	2103      	movs	r1, #3
 80114ba:	4c48      	ldr	r4, [pc, #288]	; (80115dc <HAL_RCC_ClockConfig+0x224>)
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80114bc:	270c      	movs	r7, #12
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80114be:	6862      	ldr	r2, [r4, #4]
 80114c0:	438a      	bics	r2, r1
 80114c2:	4313      	orrs	r3, r2
 80114c4:	6063      	str	r3, [r4, #4]
      tickstart = HAL_GetTick();
 80114c6:	f7fe f81d 	bl	800f504 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80114ca:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 80114cc:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	d056      	beq.n	8011580 <HAL_RCC_ClockConfig+0x1c8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80114d2:	2b02      	cmp	r3, #2
 80114d4:	d065      	beq.n	80115a2 <HAL_RCC_ClockConfig+0x1ea>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80114d6:	2b03      	cmp	r3, #3
 80114d8:	d070      	beq.n	80115bc <HAL_RCC_ClockConfig+0x204>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80114da:	4b41      	ldr	r3, [pc, #260]	; (80115e0 <HAL_RCC_ClockConfig+0x228>)
 80114dc:	4698      	mov	r8, r3
 80114de:	e004      	b.n	80114ea <HAL_RCC_ClockConfig+0x132>
 80114e0:	f7fe f810 	bl	800f504 <HAL_GetTick>
 80114e4:	1b80      	subs	r0, r0, r6
 80114e6:	4540      	cmp	r0, r8
 80114e8:	d81f      	bhi.n	801152a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80114ea:	6863      	ldr	r3, [r4, #4]
 80114ec:	421f      	tst	r7, r3
 80114ee:	d1f7      	bne.n	80114e0 <HAL_RCC_ClockConfig+0x128>
 80114f0:	e7bc      	b.n	801146c <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80114f2:	6812      	ldr	r2, [r2, #0]
 80114f4:	0392      	lsls	r2, r2, #14
 80114f6:	d490      	bmi.n	801141a <HAL_RCC_ClockConfig+0x62>
 80114f8:	e772      	b.n	80113e0 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80114fa:	6812      	ldr	r2, [r2, #0]
 80114fc:	0192      	lsls	r2, r2, #6
 80114fe:	d48c      	bmi.n	801141a <HAL_RCC_ClockConfig+0x62>
 8011500:	e76e      	b.n	80113e0 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011502:	6812      	ldr	r2, [r2, #0]
 8011504:	0192      	lsls	r2, r2, #6
 8011506:	d4d7      	bmi.n	80114b8 <HAL_RCC_ClockConfig+0x100>
 8011508:	e76a      	b.n	80113e0 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801150a:	3309      	adds	r3, #9
 801150c:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801150e:	4b34      	ldr	r3, [pc, #208]	; (80115e0 <HAL_RCC_ClockConfig+0x228>)
 8011510:	4699      	mov	r9, r3
 8011512:	e004      	b.n	801151e <HAL_RCC_ClockConfig+0x166>
 8011514:	f7fd fff6 	bl	800f504 <HAL_GetTick>
 8011518:	1bc0      	subs	r0, r0, r7
 801151a:	4548      	cmp	r0, r9
 801151c:	d805      	bhi.n	801152a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801151e:	4642      	mov	r2, r8
 8011520:	6873      	ldr	r3, [r6, #4]
 8011522:	4013      	ands	r3, r2
 8011524:	2b0c      	cmp	r3, #12
 8011526:	d1f5      	bne.n	8011514 <HAL_RCC_ClockConfig+0x15c>
 8011528:	e796      	b.n	8011458 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 801152a:	2003      	movs	r0, #3
 801152c:	e759      	b.n	80113e2 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801152e:	330b      	adds	r3, #11
 8011530:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011532:	4b2b      	ldr	r3, [pc, #172]	; (80115e0 <HAL_RCC_ClockConfig+0x228>)
 8011534:	4699      	mov	r9, r3
 8011536:	e004      	b.n	8011542 <HAL_RCC_ClockConfig+0x18a>
 8011538:	f7fd ffe4 	bl	800f504 <HAL_GetTick>
 801153c:	1bc0      	subs	r0, r0, r7
 801153e:	4548      	cmp	r0, r9
 8011540:	d8f3      	bhi.n	801152a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011542:	4642      	mov	r2, r8
 8011544:	6873      	ldr	r3, [r6, #4]
 8011546:	4013      	ands	r3, r2
 8011548:	2b04      	cmp	r3, #4
 801154a:	d1f5      	bne.n	8011538 <HAL_RCC_ClockConfig+0x180>
 801154c:	e784      	b.n	8011458 <HAL_RCC_ClockConfig+0xa0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801154e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011550:	03d2      	lsls	r2, r2, #15
 8011552:	d500      	bpl.n	8011556 <HAL_RCC_ClockConfig+0x19e>
 8011554:	e761      	b.n	801141a <HAL_RCC_ClockConfig+0x62>
 8011556:	e743      	b.n	80113e0 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011558:	6812      	ldr	r2, [r2, #0]
 801155a:	0392      	lsls	r2, r2, #14
 801155c:	d4ac      	bmi.n	80114b8 <HAL_RCC_ClockConfig+0x100>
 801155e:	e73f      	b.n	80113e0 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011560:	330a      	adds	r3, #10
 8011562:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011564:	4b1e      	ldr	r3, [pc, #120]	; (80115e0 <HAL_RCC_ClockConfig+0x228>)
 8011566:	4699      	mov	r9, r3
 8011568:	e004      	b.n	8011574 <HAL_RCC_ClockConfig+0x1bc>
 801156a:	f7fd ffcb 	bl	800f504 <HAL_GetTick>
 801156e:	1bc0      	subs	r0, r0, r7
 8011570:	4548      	cmp	r0, r9
 8011572:	d8da      	bhi.n	801152a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011574:	4642      	mov	r2, r8
 8011576:	6873      	ldr	r3, [r6, #4]
 8011578:	4013      	ands	r3, r2
 801157a:	2b08      	cmp	r3, #8
 801157c:	d1f5      	bne.n	801156a <HAL_RCC_ClockConfig+0x1b2>
 801157e:	e76b      	b.n	8011458 <HAL_RCC_ClockConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011580:	4b17      	ldr	r3, [pc, #92]	; (80115e0 <HAL_RCC_ClockConfig+0x228>)
 8011582:	4698      	mov	r8, r3
 8011584:	e004      	b.n	8011590 <HAL_RCC_ClockConfig+0x1d8>
 8011586:	f7fd ffbd 	bl	800f504 <HAL_GetTick>
 801158a:	1b80      	subs	r0, r0, r6
 801158c:	4540      	cmp	r0, r8
 801158e:	d8cc      	bhi.n	801152a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011590:	6863      	ldr	r3, [r4, #4]
 8011592:	403b      	ands	r3, r7
 8011594:	2b04      	cmp	r3, #4
 8011596:	d1f6      	bne.n	8011586 <HAL_RCC_ClockConfig+0x1ce>
 8011598:	e768      	b.n	801146c <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801159a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801159c:	03d2      	lsls	r2, r2, #15
 801159e:	d48b      	bmi.n	80114b8 <HAL_RCC_ClockConfig+0x100>
 80115a0:	e71e      	b.n	80113e0 <HAL_RCC_ClockConfig+0x28>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115a2:	4b0f      	ldr	r3, [pc, #60]	; (80115e0 <HAL_RCC_ClockConfig+0x228>)
 80115a4:	4698      	mov	r8, r3
 80115a6:	e004      	b.n	80115b2 <HAL_RCC_ClockConfig+0x1fa>
 80115a8:	f7fd ffac 	bl	800f504 <HAL_GetTick>
 80115ac:	1b80      	subs	r0, r0, r6
 80115ae:	4540      	cmp	r0, r8
 80115b0:	d8bb      	bhi.n	801152a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80115b2:	6863      	ldr	r3, [r4, #4]
 80115b4:	403b      	ands	r3, r7
 80115b6:	2b08      	cmp	r3, #8
 80115b8:	d1f6      	bne.n	80115a8 <HAL_RCC_ClockConfig+0x1f0>
 80115ba:	e757      	b.n	801146c <HAL_RCC_ClockConfig+0xb4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115bc:	4b08      	ldr	r3, [pc, #32]	; (80115e0 <HAL_RCC_ClockConfig+0x228>)
 80115be:	4698      	mov	r8, r3
 80115c0:	e004      	b.n	80115cc <HAL_RCC_ClockConfig+0x214>
 80115c2:	f7fd ff9f 	bl	800f504 <HAL_GetTick>
 80115c6:	1b80      	subs	r0, r0, r6
 80115c8:	4540      	cmp	r0, r8
 80115ca:	d8ae      	bhi.n	801152a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80115cc:	6863      	ldr	r3, [r4, #4]
 80115ce:	403b      	ands	r3, r7
 80115d0:	2b0c      	cmp	r3, #12
 80115d2:	d1f6      	bne.n	80115c2 <HAL_RCC_ClockConfig+0x20a>
 80115d4:	e74a      	b.n	801146c <HAL_RCC_ClockConfig+0xb4>
 80115d6:	46c0      	nop			; (mov r8, r8)
 80115d8:	40022000 	.word	0x40022000
 80115dc:	40021000 	.word	0x40021000
 80115e0:	00001388 	.word	0x00001388
 80115e4:	fffff8ff 	.word	0xfffff8ff

080115e8 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80115e8:	b570      	push	{r4, r5, r6, lr}
 80115ea:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 80115ec:	4669      	mov	r1, sp
 80115ee:	4b1c      	ldr	r3, [pc, #112]	; (8011660 <HAL_RCC_GetSysClockFreq+0x78>)
 80115f0:	000a      	movs	r2, r1
 80115f2:	0018      	movs	r0, r3
 80115f4:	c870      	ldmia	r0!, {r4, r5, r6}
 80115f6:	c270      	stmia	r2!, {r4, r5, r6}
 80115f8:	6800      	ldr	r0, [r0, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 80115fa:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 80115fc:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 80115fe:	aa04      	add	r2, sp, #16
 8011600:	0010      	movs	r0, r2
 8011602:	cb70      	ldmia	r3!, {r4, r5, r6}
 8011604:	c070      	stmia	r0!, {r4, r5, r6}
 8011606:	681b      	ldr	r3, [r3, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8011608:	4d16      	ldr	r5, [pc, #88]	; (8011664 <HAL_RCC_GetSysClockFreq+0x7c>)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 801160a:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801160c:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 801160e:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8011610:	4018      	ands	r0, r3
 8011612:	2808      	cmp	r0, #8
 8011614:	d00a      	beq.n	801162c <HAL_RCC_GetSysClockFreq+0x44>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8011616:	380c      	subs	r0, #12
 8011618:	4243      	negs	r3, r0
 801161a:	4158      	adcs	r0, r3
 801161c:	4b12      	ldr	r3, [pc, #72]	; (8011668 <HAL_RCC_GetSysClockFreq+0x80>)
 801161e:	4240      	negs	r0, r0
 8011620:	4018      	ands	r0, r3
 8011622:	4b12      	ldr	r3, [pc, #72]	; (801166c <HAL_RCC_GetSysClockFreq+0x84>)
 8011624:	469c      	mov	ip, r3
 8011626:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011628:	b008      	add	sp, #32
 801162a:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 801162c:	200f      	movs	r0, #15
 801162e:	0c9c      	lsrs	r4, r3, #18
 8011630:	4004      	ands	r4, r0
 8011632:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8011634:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8011636:	4008      	ands	r0, r1
 8011638:	5c11      	ldrb	r1, [r2, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 801163a:	22c0      	movs	r2, #192	; 0xc0
 801163c:	2080      	movs	r0, #128	; 0x80
 801163e:	0252      	lsls	r2, r2, #9
 8011640:	4013      	ands	r3, r2
 8011642:	0240      	lsls	r0, r0, #9
 8011644:	4283      	cmp	r3, r0
 8011646:	d001      	beq.n	801164c <HAL_RCC_GetSysClockFreq+0x64>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8011648:	4293      	cmp	r3, r2
 801164a:	d004      	beq.n	8011656 <HAL_RCC_GetSysClockFreq+0x6e>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 801164c:	4807      	ldr	r0, [pc, #28]	; (801166c <HAL_RCC_GetSysClockFreq+0x84>)
 801164e:	f7ee fd7f 	bl	8000150 <__udivsi3>
 8011652:	4360      	muls	r0, r4
 8011654:	e7e8      	b.n	8011628 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8011656:	4806      	ldr	r0, [pc, #24]	; (8011670 <HAL_RCC_GetSysClockFreq+0x88>)
 8011658:	f7ee fd7a 	bl	8000150 <__udivsi3>
 801165c:	4360      	muls	r0, r4
 801165e:	e7e3      	b.n	8011628 <HAL_RCC_GetSysClockFreq+0x40>
 8011660:	08017b64 	.word	0x08017b64
 8011664:	40021000 	.word	0x40021000
 8011668:	02625a00 	.word	0x02625a00
 801166c:	007a1200 	.word	0x007a1200
 8011670:	02dc6c00 	.word	0x02dc6c00

08011674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011674:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011676:	f7ff ffb7 	bl	80115e8 <HAL_RCC_GetSysClockFreq>
 801167a:	4b05      	ldr	r3, [pc, #20]	; (8011690 <HAL_RCC_GetHCLKFreq+0x1c>)
 801167c:	4a05      	ldr	r2, [pc, #20]	; (8011694 <HAL_RCC_GetHCLKFreq+0x20>)
 801167e:	685b      	ldr	r3, [r3, #4]
 8011680:	3220      	adds	r2, #32
 8011682:	061b      	lsls	r3, r3, #24
 8011684:	0f1b      	lsrs	r3, r3, #28
 8011686:	5cd3      	ldrb	r3, [r2, r3]
 8011688:	40d8      	lsrs	r0, r3
 801168a:	4b03      	ldr	r3, [pc, #12]	; (8011698 <HAL_RCC_GetHCLKFreq+0x24>)
 801168c:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 801168e:	bd10      	pop	{r4, pc}
 8011690:	40021000 	.word	0x40021000
 8011694:	08017b64 	.word	0x08017b64
 8011698:	200000b0 	.word	0x200000b0

0801169c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801169c:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 801169e:	f7ff ffa3 	bl	80115e8 <HAL_RCC_GetSysClockFreq>
 80116a2:	4908      	ldr	r1, [pc, #32]	; (80116c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80116a4:	4a08      	ldr	r2, [pc, #32]	; (80116c8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80116a6:	684b      	ldr	r3, [r1, #4]
 80116a8:	3220      	adds	r2, #32
 80116aa:	061b      	lsls	r3, r3, #24
 80116ac:	0f1b      	lsrs	r3, r3, #28
 80116ae:	5cd3      	ldrb	r3, [r2, r3]
 80116b0:	40d8      	lsrs	r0, r3
 80116b2:	4b06      	ldr	r3, [pc, #24]	; (80116cc <HAL_RCC_GetPCLK1Freq+0x30>)
 80116b4:	6018      	str	r0, [r3, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 80116b6:	684b      	ldr	r3, [r1, #4]
 80116b8:	055b      	lsls	r3, r3, #21
 80116ba:	0f5b      	lsrs	r3, r3, #29
 80116bc:	5cd3      	ldrb	r3, [r2, r3]
 80116be:	40d8      	lsrs	r0, r3
}    
 80116c0:	bd10      	pop	{r4, pc}
 80116c2:	46c0      	nop			; (mov r8, r8)
 80116c4:	40021000 	.word	0x40021000
 80116c8:	08017b64 	.word	0x08017b64
 80116cc:	200000b0 	.word	0x200000b0

080116d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80116d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116d2:	46c6      	mov	lr, r8
 80116d4:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80116d6:	6803      	ldr	r3, [r0, #0]
{
 80116d8:	b082      	sub	sp, #8
 80116da:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80116dc:	03da      	lsls	r2, r3, #15
 80116de:	d507      	bpl.n	80116f0 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80116e0:	493e      	ldr	r1, [pc, #248]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80116e2:	6840      	ldr	r0, [r0, #4]
 80116e4:	6a0a      	ldr	r2, [r1, #32]
 80116e6:	4042      	eors	r2, r0
 80116e8:	20c0      	movs	r0, #192	; 0xc0
 80116ea:	0080      	lsls	r0, r0, #2
 80116ec:	4202      	tst	r2, r0
 80116ee:	d131      	bne.n	8011754 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80116f0:	07da      	lsls	r2, r3, #31
 80116f2:	d506      	bpl.n	8011702 <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80116f4:	2003      	movs	r0, #3
 80116f6:	4939      	ldr	r1, [pc, #228]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80116f8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80116fa:	4382      	bics	r2, r0
 80116fc:	68a0      	ldr	r0, [r4, #8]
 80116fe:	4302      	orrs	r2, r0
 8011700:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011702:	079a      	lsls	r2, r3, #30
 8011704:	d506      	bpl.n	8011714 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011706:	4935      	ldr	r1, [pc, #212]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011708:	4835      	ldr	r0, [pc, #212]	; (80117e0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 801170a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 801170c:	4002      	ands	r2, r0
 801170e:	68e0      	ldr	r0, [r4, #12]
 8011710:	4302      	orrs	r2, r0
 8011712:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011714:	035a      	lsls	r2, r3, #13
 8011716:	d506      	bpl.n	8011726 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011718:	4930      	ldr	r1, [pc, #192]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801171a:	4832      	ldr	r0, [pc, #200]	; (80117e4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801171c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 801171e:	4002      	ands	r2, r0
 8011720:	6920      	ldr	r0, [r4, #16]
 8011722:	4302      	orrs	r2, r0
 8011724:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011726:	069a      	lsls	r2, r3, #26
 8011728:	d506      	bpl.n	8011738 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801172a:	2010      	movs	r0, #16
 801172c:	492b      	ldr	r1, [pc, #172]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801172e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011730:	4382      	bics	r2, r0
 8011732:	6960      	ldr	r0, [r4, #20]
 8011734:	4302      	orrs	r2, r0
 8011736:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8011738:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801173a:	055b      	lsls	r3, r3, #21
 801173c:	d506      	bpl.n	801174c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801173e:	2140      	movs	r1, #64	; 0x40
 8011740:	4a26      	ldr	r2, [pc, #152]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011742:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011744:	438b      	bics	r3, r1
 8011746:	69a1      	ldr	r1, [r4, #24]
 8011748:	430b      	orrs	r3, r1
 801174a:	6313      	str	r3, [r2, #48]	; 0x30
}
 801174c:	b002      	add	sp, #8
 801174e:	bc04      	pop	{r2}
 8011750:	4690      	mov	r8, r2
 8011752:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8011754:	2080      	movs	r0, #128	; 0x80
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011756:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 8011758:	69ca      	ldr	r2, [r1, #28]
 801175a:	0540      	lsls	r0, r0, #21
 801175c:	4302      	orrs	r2, r0
 801175e:	61ca      	str	r2, [r1, #28]
 8011760:	69cb      	ldr	r3, [r1, #28]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011762:	4d21      	ldr	r5, [pc, #132]	; (80117e8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8011764:	4003      	ands	r3, r0
 8011766:	9301      	str	r3, [sp, #4]
 8011768:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801176a:	682b      	ldr	r3, [r5, #0]
 801176c:	0076      	lsls	r6, r6, #1
 801176e:	4333      	orrs	r3, r6
 8011770:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8011772:	f7fd fec7 	bl	800f504 <HAL_GetTick>
 8011776:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011778:	e004      	b.n	8011784 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801177a:	f7fd fec3 	bl	800f504 <HAL_GetTick>
 801177e:	1bc0      	subs	r0, r0, r7
 8011780:	2864      	cmp	r0, #100	; 0x64
 8011782:	d829      	bhi.n	80117d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011784:	682b      	ldr	r3, [r5, #0]
 8011786:	4233      	tst	r3, r6
 8011788:	d0f7      	beq.n	801177a <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_BACKUPRESET_FORCE();
 801178a:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801178c:	4d13      	ldr	r5, [pc, #76]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 801178e:	0252      	lsls	r2, r2, #9
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011790:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8011792:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011794:	4b15      	ldr	r3, [pc, #84]	; (80117ec <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8011796:	4302      	orrs	r2, r0
 8011798:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801179a:	6a2a      	ldr	r2, [r5, #32]
 801179c:	4814      	ldr	r0, [pc, #80]	; (80117f0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801179e:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80117a0:	4002      	ands	r2, r0
 80117a2:	622a      	str	r2, [r5, #32]
      RCC->BDCR = temp_reg;
 80117a4:	622b      	str	r3, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 80117a6:	078b      	lsls	r3, r1, #30
 80117a8:	d408      	bmi.n	80117bc <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80117aa:	4a0c      	ldr	r2, [pc, #48]	; (80117dc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80117ac:	490f      	ldr	r1, [pc, #60]	; (80117ec <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80117ae:	6a13      	ldr	r3, [r2, #32]
 80117b0:	400b      	ands	r3, r1
 80117b2:	6861      	ldr	r1, [r4, #4]
 80117b4:	430b      	orrs	r3, r1
 80117b6:	6213      	str	r3, [r2, #32]
 80117b8:	6823      	ldr	r3, [r4, #0]
 80117ba:	e799      	b.n	80116f0 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 80117bc:	f7fd fea2 	bl	800f504 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80117c0:	4b0c      	ldr	r3, [pc, #48]	; (80117f4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 80117c2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80117c4:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80117c6:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80117c8:	6a2b      	ldr	r3, [r5, #32]
 80117ca:	421e      	tst	r6, r3
 80117cc:	d1ed      	bne.n	80117aa <HAL_RCCEx_PeriphCLKConfig+0xda>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80117ce:	f7fd fe99 	bl	800f504 <HAL_GetTick>
 80117d2:	1bc0      	subs	r0, r0, r7
 80117d4:	4540      	cmp	r0, r8
 80117d6:	d9f7      	bls.n	80117c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 80117d8:	2003      	movs	r0, #3
 80117da:	e7b7      	b.n	801174c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80117dc:	40021000 	.word	0x40021000
 80117e0:	fffcffff 	.word	0xfffcffff
 80117e4:	fff3ffff 	.word	0xfff3ffff
 80117e8:	40007000 	.word	0x40007000
 80117ec:	fffffcff 	.word	0xfffffcff
 80117f0:	fffeffff 	.word	0xfffeffff
 80117f4:	00001388 	.word	0x00001388

080117f8 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 80117f8:	4770      	bx	lr
 80117fa:	46c0      	nop			; (mov r8, r8)

080117fc <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80117fc:	6803      	ldr	r3, [r0, #0]
{
 80117fe:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011800:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011802:	2640      	movs	r6, #64	; 0x40
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011804:	6048      	str	r0, [r1, #4]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011806:	203f      	movs	r0, #63	; 0x3f
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8011808:	681c      	ldr	r4, [r3, #0]
 801180a:	4b13      	ldr	r3, [pc, #76]	; (8011858 <HAL_RTC_GetTime+0x5c>)
 801180c:	401c      	ands	r4, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801180e:	0c25      	lsrs	r5, r4, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011810:	0a23      	lsrs	r3, r4, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011812:	4028      	ands	r0, r5
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011814:	b2db      	uxtb	r3, r3
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011816:	b2e4      	uxtb	r4, r4
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011818:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801181a:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 801181c:	704b      	strb	r3, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801181e:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011820:	720e      	strb	r6, [r1, #8]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011822:	2a00      	cmp	r2, #0
 8011824:	d115      	bne.n	8011852 <HAL_RTC_GetTime+0x56>
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8011826:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011828:	0900      	lsrs	r0, r0, #4
 801182a:	0082      	lsls	r2, r0, #2
 801182c:	1810      	adds	r0, r2, r0
 801182e:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011830:	4035      	ands	r5, r6
 8011832:	1945      	adds	r5, r0, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011834:	0918      	lsrs	r0, r3, #4
 8011836:	0082      	lsls	r2, r0, #2
 8011838:	1812      	adds	r2, r2, r0
 801183a:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801183c:	4033      	ands	r3, r6
 801183e:	18d3      	adds	r3, r2, r3
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011840:	0922      	lsrs	r2, r4, #4
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011842:	704b      	strb	r3, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011844:	0093      	lsls	r3, r2, #2
 8011846:	189b      	adds	r3, r3, r2
 8011848:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801184a:	4034      	ands	r4, r6
 801184c:	191c      	adds	r4, r3, r4
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801184e:	700d      	strb	r5, [r1, #0]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8011850:	708c      	strb	r4, [r1, #2]
}
 8011852:	2000      	movs	r0, #0
 8011854:	bd70      	pop	{r4, r5, r6, pc}
 8011856:	46c0      	nop			; (mov r8, r8)
 8011858:	007f7f7f 	.word	0x007f7f7f

0801185c <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 801185c:	6803      	ldr	r3, [r0, #0]
 801185e:	4815      	ldr	r0, [pc, #84]	; (80118b4 <HAL_RTC_GetDate+0x58>)
 8011860:	685b      	ldr	r3, [r3, #4]
{
 8011862:	b5f0      	push	{r4, r5, r6, r7, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8011864:	4003      	ands	r3, r0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011866:	201f      	movs	r0, #31
 8011868:	0a1c      	lsrs	r4, r3, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 801186a:	0c1f      	lsrs	r7, r3, #16
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801186c:	b2dd      	uxtb	r5, r3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801186e:	b2e4      	uxtb	r4, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8011870:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011872:	4020      	ands	r0, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8011874:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8011876:	70cf      	strb	r7, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011878:	7048      	strb	r0, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801187a:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 801187c:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 801187e:	2a00      	cmp	r2, #0
 8011880:	d115      	bne.n	80118ae <HAL_RTC_GetDate+0x52>
  return (tmp + (Value & (uint8_t)0x0F));
 8011882:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011884:	093b      	lsrs	r3, r7, #4
 8011886:	009a      	lsls	r2, r3, #2
 8011888:	18d2      	adds	r2, r2, r3
 801188a:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801188c:	4037      	ands	r7, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801188e:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8011890:	19d2      	adds	r2, r2, r7
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011892:	0098      	lsls	r0, r3, #2
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011894:	70ca      	strb	r2, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011896:	092a      	lsrs	r2, r5, #4
 8011898:	18c0      	adds	r0, r0, r3
 801189a:	0093      	lsls	r3, r2, #2
 801189c:	189b      	adds	r3, r3, r2
 801189e:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80118a0:	4034      	ands	r4, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80118a2:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80118a4:	4035      	ands	r5, r6
 80118a6:	1904      	adds	r4, r0, r4
 80118a8:	195b      	adds	r3, r3, r5
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80118aa:	704c      	strb	r4, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80118ac:	708b      	strb	r3, [r1, #2]
}
 80118ae:	2000      	movs	r0, #0
 80118b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118b2:	46c0      	nop			; (mov r8, r8)
 80118b4:	00ffff3f 	.word	0x00ffff3f

080118b8 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80118b8:	21a0      	movs	r1, #160	; 0xa0
 80118ba:	6802      	ldr	r2, [r0, #0]
{
 80118bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80118be:	68d3      	ldr	r3, [r2, #12]
{
 80118c0:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80118c2:	438b      	bics	r3, r1
 80118c4:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 80118c6:	f7fd fe1d 	bl	800f504 <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80118ca:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 80118cc:	0007      	movs	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80118ce:	2520      	movs	r5, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80118d0:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80118d2:	e004      	b.n	80118de <HAL_RTC_WaitForSynchro+0x26>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80118d4:	f7fd fe16 	bl	800f504 <HAL_GetTick>
 80118d8:	1bc0      	subs	r0, r0, r7
 80118da:	42b0      	cmp	r0, r6
 80118dc:	d805      	bhi.n	80118ea <HAL_RTC_WaitForSynchro+0x32>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80118de:	6823      	ldr	r3, [r4, #0]
 80118e0:	68db      	ldr	r3, [r3, #12]
 80118e2:	421d      	tst	r5, r3
 80118e4:	d0f6      	beq.n	80118d4 <HAL_RTC_WaitForSynchro+0x1c>
  return HAL_OK;
 80118e6:	2000      	movs	r0, #0
}
 80118e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 80118ea:	2003      	movs	r0, #3
 80118ec:	e7fc      	b.n	80118e8 <HAL_RTC_WaitForSynchro+0x30>
 80118ee:	46c0      	nop			; (mov r8, r8)

080118f0 <RTC_EnterInitMode>:
{
 80118f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80118f2:	6803      	ldr	r3, [r0, #0]
{
 80118f4:	0004      	movs	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80118f6:	68da      	ldr	r2, [r3, #12]
 80118f8:	0652      	lsls	r2, r2, #25
 80118fa:	d501      	bpl.n	8011900 <RTC_EnterInitMode+0x10>
  return HAL_OK;  
 80118fc:	2000      	movs	r0, #0
}
 80118fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011900:	2201      	movs	r2, #1
 8011902:	4252      	negs	r2, r2
 8011904:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8011906:	f7fd fdfd 	bl	800f504 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801190a:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 801190c:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801190e:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011910:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011912:	e004      	b.n	801191e <RTC_EnterInitMode+0x2e>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011914:	f7fd fdf6 	bl	800f504 <HAL_GetTick>
 8011918:	1bc0      	subs	r0, r0, r7
 801191a:	42b0      	cmp	r0, r6
 801191c:	d804      	bhi.n	8011928 <RTC_EnterInitMode+0x38>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801191e:	6823      	ldr	r3, [r4, #0]
 8011920:	68db      	ldr	r3, [r3, #12]
 8011922:	421d      	tst	r5, r3
 8011924:	d0f6      	beq.n	8011914 <RTC_EnterInitMode+0x24>
 8011926:	e7e9      	b.n	80118fc <RTC_EnterInitMode+0xc>
        return HAL_TIMEOUT;
 8011928:	2003      	movs	r0, #3
 801192a:	e7e8      	b.n	80118fe <RTC_EnterInitMode+0xe>

0801192c <HAL_RTC_Init>:
{
 801192c:	b570      	push	{r4, r5, r6, lr}
 801192e:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8011930:	d03e      	beq.n	80119b0 <HAL_RTC_Init+0x84>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8011932:	7f43      	ldrb	r3, [r0, #29]
 8011934:	b2db      	uxtb	r3, r3
 8011936:	2b00      	cmp	r3, #0
 8011938:	d036      	beq.n	80119a8 <HAL_RTC_Init+0x7c>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 801193a:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801193c:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 801193e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011940:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011942:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011944:	625a      	str	r2, [r3, #36]	; 0x24
 8011946:	3a77      	subs	r2, #119	; 0x77
 8011948:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801194a:	f7ff ffd1 	bl	80118f0 <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801194e:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011950:	2800      	cmp	r0, #0
 8011952:	d123      	bne.n	801199c <HAL_RTC_Init+0x70>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011954:	689a      	ldr	r2, [r3, #8]
 8011956:	4917      	ldr	r1, [pc, #92]	; (80119b4 <HAL_RTC_Init+0x88>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011958:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801195a:	400a      	ands	r2, r1
 801195c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801195e:	6862      	ldr	r2, [r4, #4]
 8011960:	6899      	ldr	r1, [r3, #8]
 8011962:	432a      	orrs	r2, r5
 8011964:	6965      	ldr	r5, [r4, #20]
 8011966:	432a      	orrs	r2, r5
 8011968:	430a      	orrs	r2, r1
 801196a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801196c:	68e2      	ldr	r2, [r4, #12]
 801196e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011970:	68a2      	ldr	r2, [r4, #8]
 8011972:	6919      	ldr	r1, [r3, #16]
 8011974:	0412      	lsls	r2, r2, #16
 8011976:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011978:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 801197a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 801197c:	68da      	ldr	r2, [r3, #12]
 801197e:	438a      	bics	r2, r1
 8011980:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8011982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011984:	490c      	ldr	r1, [pc, #48]	; (80119b8 <HAL_RTC_Init+0x8c>)
 8011986:	400a      	ands	r2, r1
 8011988:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 801198a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801198c:	69a1      	ldr	r1, [r4, #24]
 801198e:	430a      	orrs	r2, r1
 8011990:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011992:	22ff      	movs	r2, #255	; 0xff
 8011994:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011996:	2301      	movs	r3, #1
 8011998:	7763      	strb	r3, [r4, #29]
}
 801199a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801199c:	22ff      	movs	r2, #255	; 0xff
 801199e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80119a0:	2304      	movs	r3, #4
    return HAL_ERROR;
 80119a2:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 80119a4:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80119a6:	e7f8      	b.n	801199a <HAL_RTC_Init+0x6e>
    hrtc->Lock = HAL_UNLOCKED;
 80119a8:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80119aa:	f7ff ff25 	bl	80117f8 <HAL_RTC_MspInit>
 80119ae:	e7c4      	b.n	801193a <HAL_RTC_Init+0xe>
     return HAL_ERROR;
 80119b0:	2001      	movs	r0, #1
 80119b2:	e7f2      	b.n	801199a <HAL_RTC_Init+0x6e>
 80119b4:	ff8fffbf 	.word	0xff8fffbf
 80119b8:	fffbffff 	.word	0xfffbffff

080119bc <HAL_RTC_SetTime>:
{
 80119bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80119be:	7f03      	ldrb	r3, [r0, #28]
{
 80119c0:	0004      	movs	r4, r0
 80119c2:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80119c4:	2b01      	cmp	r3, #1
 80119c6:	d100      	bne.n	80119ca <HAL_RTC_SetTime+0xe>
 80119c8:	e074      	b.n	8011ab4 <HAL_RTC_SetTime+0xf8>
 80119ca:	2301      	movs	r3, #1
 80119cc:	6806      	ldr	r6, [r0, #0]
 80119ce:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80119d0:	3301      	adds	r3, #1
 80119d2:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80119d4:	68b3      	ldr	r3, [r6, #8]
 80119d6:	2740      	movs	r7, #64	; 0x40
  if(Format == RTC_FORMAT_BIN)
 80119d8:	2a00      	cmp	r2, #0
 80119da:	d031      	beq.n	8011a40 <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80119dc:	403b      	ands	r3, r7
 80119de:	d065      	beq.n	8011aac <HAL_RTC_SetTime+0xf0>
 80119e0:	7a0b      	ldrb	r3, [r1, #8]
 80119e2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80119e4:	782f      	ldrb	r7, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80119e6:	7869      	ldrb	r1, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80119e8:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80119ea:	0209      	lsls	r1, r1, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80119ec:	430f      	orrs	r7, r1
              ((uint32_t)sTime->Seconds) | \
 80119ee:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80119f0:	430f      	orrs	r7, r1
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80119f2:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80119f4:	23ca      	movs	r3, #202	; 0xca
 80119f6:	6273      	str	r3, [r6, #36]	; 0x24
 80119f8:	3b77      	subs	r3, #119	; 0x77
 80119fa:	6273      	str	r3, [r6, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80119fc:	0020      	movs	r0, r4
 80119fe:	f7ff ff77 	bl	80118f0 <RTC_EnterInitMode>
 8011a02:	1e06      	subs	r6, r0, #0
 8011a04:	d149      	bne.n	8011a9a <HAL_RTC_SetTime+0xde>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011a06:	4935      	ldr	r1, [pc, #212]	; (8011adc <HAL_RTC_SetTime+0x120>)
 8011a08:	6822      	ldr	r2, [r4, #0]
 8011a0a:	4039      	ands	r1, r7
 8011a0c:	6011      	str	r1, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011a0e:	6893      	ldr	r3, [r2, #8]
 8011a10:	4933      	ldr	r1, [pc, #204]	; (8011ae0 <HAL_RTC_SetTime+0x124>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011a12:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011a14:	400b      	ands	r3, r1
 8011a16:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011a18:	68eb      	ldr	r3, [r5, #12]
 8011a1a:	6891      	ldr	r1, [r2, #8]
 8011a1c:	4303      	orrs	r3, r0
 8011a1e:	430b      	orrs	r3, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011a20:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011a22:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011a24:	68d3      	ldr	r3, [r2, #12]
 8011a26:	438b      	bics	r3, r1
 8011a28:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011a2a:	6893      	ldr	r3, [r2, #8]
 8011a2c:	069b      	lsls	r3, r3, #26
 8011a2e:	d543      	bpl.n	8011ab8 <HAL_RTC_SetTime+0xfc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011a30:	23ff      	movs	r3, #255	; 0xff
 8011a32:	6253      	str	r3, [r2, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8011a34:	3bfe      	subs	r3, #254	; 0xfe
 8011a36:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8011a38:	2300      	movs	r3, #0
 8011a3a:	7723      	strb	r3, [r4, #28]
}
 8011a3c:	0030      	movs	r0, r6
 8011a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011a40:	401f      	ands	r7, r3
 8011a42:	d035      	beq.n	8011ab0 <HAL_RTC_SetTime+0xf4>
 8011a44:	7a0f      	ldrb	r7, [r1, #8]
 8011a46:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011a48:	7828      	ldrb	r0, [r5, #0]
  uint32_t bcdhigh = 0;
 8011a4a:	2300      	movs	r3, #0
  while(Value >= 10)
 8011a4c:	2809      	cmp	r0, #9
 8011a4e:	d906      	bls.n	8011a5e <HAL_RTC_SetTime+0xa2>
    Value -= 10;
 8011a50:	380a      	subs	r0, #10
 8011a52:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8011a54:	3301      	adds	r3, #1
  while(Value >= 10)
 8011a56:	2809      	cmp	r0, #9
 8011a58:	d8fa      	bhi.n	8011a50 <HAL_RTC_SetTime+0x94>
 8011a5a:	011b      	lsls	r3, r3, #4
 8011a5c:	b2db      	uxtb	r3, r3
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011a5e:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011a60:	786b      	ldrb	r3, [r5, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011a62:	0400      	lsls	r0, r0, #16
  uint32_t bcdhigh = 0;
 8011a64:	2100      	movs	r1, #0
  while(Value >= 10)
 8011a66:	2b09      	cmp	r3, #9
 8011a68:	d906      	bls.n	8011a78 <HAL_RTC_SetTime+0xbc>
    Value -= 10;
 8011a6a:	3b0a      	subs	r3, #10
 8011a6c:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8011a6e:	3101      	adds	r1, #1
  while(Value >= 10)
 8011a70:	2b09      	cmp	r3, #9
 8011a72:	d8fa      	bhi.n	8011a6a <HAL_RTC_SetTime+0xae>
 8011a74:	0109      	lsls	r1, r1, #4
 8011a76:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011a78:	430b      	orrs	r3, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011a7a:	78a9      	ldrb	r1, [r5, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011a7c:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 8011a7e:	2909      	cmp	r1, #9
 8011a80:	d929      	bls.n	8011ad6 <HAL_RTC_SetTime+0x11a>
    Value -= 10;
 8011a82:	390a      	subs	r1, #10
 8011a84:	b2c9      	uxtb	r1, r1
    bcdhigh++;
 8011a86:	3201      	adds	r2, #1
  while(Value >= 10)
 8011a88:	2909      	cmp	r1, #9
 8011a8a:	d8fa      	bhi.n	8011a82 <HAL_RTC_SetTime+0xc6>
 8011a8c:	0112      	lsls	r2, r2, #4
 8011a8e:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011a90:	4307      	orrs	r7, r0
 8011a92:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011a94:	4311      	orrs	r1, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011a96:	430f      	orrs	r7, r1
 8011a98:	e7ac      	b.n	80119f4 <HAL_RTC_SetTime+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011a9a:	22ff      	movs	r2, #255	; 0xff
 8011a9c:	6823      	ldr	r3, [r4, #0]
    return HAL_ERROR;
 8011a9e:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011aa2:	2304      	movs	r3, #4
 8011aa4:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011aaa:	e7c7      	b.n	8011a3c <HAL_RTC_SetTime+0x80>
      sTime->TimeFormat = 0x00;
 8011aac:	720b      	strb	r3, [r1, #8]
 8011aae:	e799      	b.n	80119e4 <HAL_RTC_SetTime+0x28>
      sTime->TimeFormat = 0x00;
 8011ab0:	720f      	strb	r7, [r1, #8]
 8011ab2:	e7c9      	b.n	8011a48 <HAL_RTC_SetTime+0x8c>
  __HAL_LOCK(hrtc);
 8011ab4:	2602      	movs	r6, #2
 8011ab6:	e7c1      	b.n	8011a3c <HAL_RTC_SetTime+0x80>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011ab8:	0020      	movs	r0, r4
 8011aba:	f7ff fefd 	bl	80118b8 <HAL_RTC_WaitForSynchro>
 8011abe:	2800      	cmp	r0, #0
 8011ac0:	d101      	bne.n	8011ac6 <HAL_RTC_SetTime+0x10a>
 8011ac2:	6822      	ldr	r2, [r4, #0]
 8011ac4:	e7b4      	b.n	8011a30 <HAL_RTC_SetTime+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011ac6:	22ff      	movs	r2, #255	; 0xff
 8011ac8:	6823      	ldr	r3, [r4, #0]
 8011aca:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011acc:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8011ace:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011ad0:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8011ad2:	2601      	movs	r6, #1
 8011ad4:	e7b2      	b.n	8011a3c <HAL_RTC_SetTime+0x80>
  while(Value >= 10)
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	e7da      	b.n	8011a90 <HAL_RTC_SetTime+0xd4>
 8011ada:	46c0      	nop			; (mov r8, r8)
 8011adc:	007f7f7f 	.word	0x007f7f7f
 8011ae0:	fffbffff 	.word	0xfffbffff

08011ae4 <HAL_RTC_SetDate>:
{
 8011ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8011ae6:	7f03      	ldrb	r3, [r0, #28]
{
 8011ae8:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 8011aea:	2b01      	cmp	r3, #1
 8011aec:	d062      	beq.n	8011bb4 <HAL_RTC_SetDate+0xd0>
 8011aee:	2301      	movs	r3, #1
 8011af0:	780f      	ldrb	r7, [r1, #0]
 8011af2:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8011af4:	3301      	adds	r3, #1
 8011af6:	7743      	strb	r3, [r0, #29]
 8011af8:	7848      	ldrb	r0, [r1, #1]
 8011afa:	788e      	ldrb	r6, [r1, #2]
 8011afc:	78cb      	ldrb	r3, [r1, #3]
 8011afe:	037f      	lsls	r7, r7, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011b00:	2a00      	cmp	r2, #0
 8011b02:	d022      	beq.n	8011b4a <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011b04:	041b      	lsls	r3, r3, #16
 8011b06:	433b      	orrs	r3, r7
 8011b08:	001c      	movs	r4, r3
                  (((uint32_t)sDate->Month) << 8) | \
 8011b0a:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011b0c:	4334      	orrs	r4, r6
 8011b0e:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b10:	22ca      	movs	r2, #202	; 0xca
 8011b12:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011b14:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b16:	625a      	str	r2, [r3, #36]	; 0x24
 8011b18:	3a77      	subs	r2, #119	; 0x77
 8011b1a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011b1c:	f7ff fee8 	bl	80118f0 <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011b20:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011b22:	1e06      	subs	r6, r0, #0
 8011b24:	d13e      	bne.n	8011ba4 <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011b26:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011b28:	4a2b      	ldr	r2, [pc, #172]	; (8011bd8 <HAL_RTC_SetDate+0xf4>)
 8011b2a:	4014      	ands	r4, r2
 8011b2c:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011b2e:	68da      	ldr	r2, [r3, #12]
 8011b30:	438a      	bics	r2, r1
 8011b32:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011b34:	689a      	ldr	r2, [r3, #8]
 8011b36:	0692      	lsls	r2, r2, #26
 8011b38:	d53e      	bpl.n	8011bb8 <HAL_RTC_SetDate+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011b3a:	22ff      	movs	r2, #255	; 0xff
 8011b3c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8011b3e:	2301      	movs	r3, #1
 8011b40:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8011b42:	2300      	movs	r3, #0
 8011b44:	772b      	strb	r3, [r5, #28]
}
 8011b46:	0030      	movs	r0, r6
 8011b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011b4a:	2410      	movs	r4, #16
 8011b4c:	4204      	tst	r4, r0
 8011b4e:	d003      	beq.n	8011b58 <HAL_RTC_SetDate+0x74>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8011b50:	43a0      	bics	r0, r4
 8011b52:	300a      	adds	r0, #10
 8011b54:	b2c0      	uxtb	r0, r0
 8011b56:	7048      	strb	r0, [r1, #1]
  uint32_t bcdhigh = 0;
 8011b58:	2100      	movs	r1, #0
  while(Value >= 10)
 8011b5a:	2b09      	cmp	r3, #9
 8011b5c:	d906      	bls.n	8011b6c <HAL_RTC_SetDate+0x88>
    Value -= 10;
 8011b5e:	3b0a      	subs	r3, #10
 8011b60:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8011b62:	3101      	adds	r1, #1
  while(Value >= 10)
 8011b64:	2b09      	cmp	r3, #9
 8011b66:	d8fa      	bhi.n	8011b5e <HAL_RTC_SetDate+0x7a>
 8011b68:	0109      	lsls	r1, r1, #4
 8011b6a:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011b6c:	430b      	orrs	r3, r1
 8011b6e:	041b      	lsls	r3, r3, #16
  uint32_t bcdhigh = 0;
 8011b70:	2100      	movs	r1, #0
  while(Value >= 10)
 8011b72:	2809      	cmp	r0, #9
 8011b74:	d906      	bls.n	8011b84 <HAL_RTC_SetDate+0xa0>
    Value -= 10;
 8011b76:	380a      	subs	r0, #10
 8011b78:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8011b7a:	3101      	adds	r1, #1
  while(Value >= 10)
 8011b7c:	2809      	cmp	r0, #9
 8011b7e:	d8fa      	bhi.n	8011b76 <HAL_RTC_SetDate+0x92>
 8011b80:	0109      	lsls	r1, r1, #4
 8011b82:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011b84:	4308      	orrs	r0, r1
 8011b86:	0200      	lsls	r0, r0, #8
  while(Value >= 10)
 8011b88:	2e09      	cmp	r6, #9
 8011b8a:	d922      	bls.n	8011bd2 <HAL_RTC_SetDate+0xee>
    Value -= 10;
 8011b8c:	3e0a      	subs	r6, #10
 8011b8e:	b2f6      	uxtb	r6, r6
    bcdhigh++;
 8011b90:	3201      	adds	r2, #1
  while(Value >= 10)
 8011b92:	2e09      	cmp	r6, #9
 8011b94:	d8fa      	bhi.n	8011b8c <HAL_RTC_SetDate+0xa8>
 8011b96:	0112      	lsls	r2, r2, #4
 8011b98:	b2d4      	uxtb	r4, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011b9a:	433b      	orrs	r3, r7
 8011b9c:	4303      	orrs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8011b9e:	4334      	orrs	r4, r6
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011ba0:	431c      	orrs	r4, r3
 8011ba2:	e7b5      	b.n	8011b10 <HAL_RTC_SetDate+0x2c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011ba4:	22ff      	movs	r2, #255	; 0xff
 8011ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011ba8:	2304      	movs	r3, #4
 8011baa:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8011bac:	2300      	movs	r3, #0
    return HAL_ERROR;
 8011bae:	2601      	movs	r6, #1
    __HAL_UNLOCK(hrtc);
 8011bb0:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 8011bb2:	e7c8      	b.n	8011b46 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8011bb4:	2602      	movs	r6, #2
 8011bb6:	e7c6      	b.n	8011b46 <HAL_RTC_SetDate+0x62>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011bb8:	0028      	movs	r0, r5
 8011bba:	f7ff fe7d 	bl	80118b8 <HAL_RTC_WaitForSynchro>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011bbe:	682b      	ldr	r3, [r5, #0]
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	d0ba      	beq.n	8011b3a <HAL_RTC_SetDate+0x56>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011bc4:	22ff      	movs	r2, #255	; 0xff
 8011bc6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011bc8:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8011bca:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011bcc:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8011bce:	2601      	movs	r6, #1
 8011bd0:	e7b9      	b.n	8011b46 <HAL_RTC_SetDate+0x62>
  while(Value >= 10)
 8011bd2:	2400      	movs	r4, #0
 8011bd4:	e7e1      	b.n	8011b9a <HAL_RTC_SetDate+0xb6>
 8011bd6:	46c0      	nop			; (mov r8, r8)
 8011bd8:	00ffff3f 	.word	0x00ffff3f

08011bdc <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011bdc:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8011bde:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011be0:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011be2:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8011be4:	600a      	str	r2, [r1, #0]
}
 8011be6:	4770      	bx	lr

08011be8 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011be8:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8011bea:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011bec:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011bee:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8011bf0:	6808      	ldr	r0, [r1, #0]
}
 8011bf2:	4770      	bx	lr

08011bf4 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8011bf4:	4770      	bx	lr
 8011bf6:	46c0      	nop			; (mov r8, r8)

08011bf8 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8011bf8:	2239      	movs	r2, #57	; 0x39
 8011bfa:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8011bfc:	2101      	movs	r1, #1
{
 8011bfe:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 8011c00:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8011c02:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8011c04:	6823      	ldr	r3, [r4, #0]
 8011c06:	430b      	orrs	r3, r1
 8011c08:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8011c0a:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	bd10      	pop	{r4, pc}

08011c10 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011c10:	4a22      	ldr	r2, [pc, #136]	; (8011c9c <TIM_Base_SetConfig+0x8c>)
{
 8011c12:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 8011c14:	6803      	ldr	r3, [r0, #0]
 8011c16:	688d      	ldr	r5, [r1, #8]
 8011c18:	680c      	ldr	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011c1a:	4290      	cmp	r0, r2
 8011c1c:	d02c      	beq.n	8011c78 <TIM_Base_SetConfig+0x68>
 8011c1e:	2280      	movs	r2, #128	; 0x80
 8011c20:	05d2      	lsls	r2, r2, #23
 8011c22:	4290      	cmp	r0, r2
 8011c24:	d012      	beq.n	8011c4c <TIM_Base_SetConfig+0x3c>
 8011c26:	4a1e      	ldr	r2, [pc, #120]	; (8011ca0 <TIM_Base_SetConfig+0x90>)
 8011c28:	4290      	cmp	r0, r2
 8011c2a:	d00f      	beq.n	8011c4c <TIM_Base_SetConfig+0x3c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011c2c:	4a1d      	ldr	r2, [pc, #116]	; (8011ca4 <TIM_Base_SetConfig+0x94>)
 8011c2e:	4290      	cmp	r0, r2
 8011c30:	d02e      	beq.n	8011c90 <TIM_Base_SetConfig+0x80>
 8011c32:	4a1d      	ldr	r2, [pc, #116]	; (8011ca8 <TIM_Base_SetConfig+0x98>)
 8011c34:	4290      	cmp	r0, r2
 8011c36:	d023      	beq.n	8011c80 <TIM_Base_SetConfig+0x70>
 8011c38:	4a1c      	ldr	r2, [pc, #112]	; (8011cac <TIM_Base_SetConfig+0x9c>)
 8011c3a:	4290      	cmp	r0, r2
 8011c3c:	d020      	beq.n	8011c80 <TIM_Base_SetConfig+0x70>
 8011c3e:	4a1c      	ldr	r2, [pc, #112]	; (8011cb0 <TIM_Base_SetConfig+0xa0>)
 8011c40:	4290      	cmp	r0, r2
 8011c42:	d01d      	beq.n	8011c80 <TIM_Base_SetConfig+0x70>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8011c44:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011c46:	62c5      	str	r5, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011c48:	6284      	str	r4, [r0, #40]	; 0x28
 8011c4a:	e012      	b.n	8011c72 <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011c4c:	2270      	movs	r2, #112	; 0x70
 8011c4e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011c50:	684a      	ldr	r2, [r1, #4]
 8011c52:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011c54:	4a17      	ldr	r2, [pc, #92]	; (8011cb4 <TIM_Base_SetConfig+0xa4>)
 8011c56:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011c58:	68ca      	ldr	r2, [r1, #12]
 8011c5a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011c5c:	6003      	str	r3, [r0, #0]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011c5e:	4b13      	ldr	r3, [pc, #76]	; (8011cac <TIM_Base_SetConfig+0x9c>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011c60:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011c62:	6284      	str	r4, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011c64:	4298      	cmp	r0, r3
 8011c66:	d002      	beq.n	8011c6e <TIM_Base_SetConfig+0x5e>
 8011c68:	4b11      	ldr	r3, [pc, #68]	; (8011cb0 <TIM_Base_SetConfig+0xa0>)
 8011c6a:	4298      	cmp	r0, r3
 8011c6c:	d101      	bne.n	8011c72 <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011c6e:	690b      	ldr	r3, [r1, #16]
 8011c70:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8011c72:	2301      	movs	r3, #1
 8011c74:	6143      	str	r3, [r0, #20]
}
 8011c76:	bd30      	pop	{r4, r5, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011c78:	2270      	movs	r2, #112	; 0x70
 8011c7a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011c7c:	684a      	ldr	r2, [r1, #4]
 8011c7e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011c80:	4a0c      	ldr	r2, [pc, #48]	; (8011cb4 <TIM_Base_SetConfig+0xa4>)
 8011c82:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011c84:	68ca      	ldr	r2, [r1, #12]
 8011c86:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011c88:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011c8a:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011c8c:	6284      	str	r4, [r0, #40]	; 0x28
 8011c8e:	e7ee      	b.n	8011c6e <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011c90:	4a08      	ldr	r2, [pc, #32]	; (8011cb4 <TIM_Base_SetConfig+0xa4>)
 8011c92:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011c94:	68ca      	ldr	r2, [r1, #12]
 8011c96:	4313      	orrs	r3, r2
 8011c98:	e7d4      	b.n	8011c44 <TIM_Base_SetConfig+0x34>
 8011c9a:	46c0      	nop			; (mov r8, r8)
 8011c9c:	40012c00 	.word	0x40012c00
 8011ca0:	40000400 	.word	0x40000400
 8011ca4:	40002000 	.word	0x40002000
 8011ca8:	40014000 	.word	0x40014000
 8011cac:	40014400 	.word	0x40014400
 8011cb0:	40014800 	.word	0x40014800
 8011cb4:	fffffcff 	.word	0xfffffcff

08011cb8 <HAL_TIM_Base_Init>:
{
 8011cb8:	b570      	push	{r4, r5, r6, lr}
 8011cba:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8011cbc:	d014      	beq.n	8011ce8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8011cbe:	2339      	movs	r3, #57	; 0x39
 8011cc0:	5cc3      	ldrb	r3, [r0, r3]
 8011cc2:	b2db      	uxtb	r3, r3
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d00a      	beq.n	8011cde <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8011cc8:	2302      	movs	r3, #2
 8011cca:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011ccc:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8011cce:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011cd0:	1d21      	adds	r1, r4, #4
 8011cd2:	f7ff ff9d 	bl	8011c10 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8011cd6:	2301      	movs	r3, #1
  return HAL_OK;
 8011cd8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8011cda:	5563      	strb	r3, [r4, r5]
}
 8011cdc:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8011cde:	2238      	movs	r2, #56	; 0x38
 8011ce0:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 8011ce2:	f7ff ff87 	bl	8011bf4 <HAL_TIM_Base_MspInit>
 8011ce6:	e7ef      	b.n	8011cc8 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8011ce8:	2001      	movs	r0, #1
 8011cea:	e7f7      	b.n	8011cdc <HAL_TIM_Base_Init+0x24>

08011cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8011cec:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8011cee:	2438      	movs	r4, #56	; 0x38
 8011cf0:	5d03      	ldrb	r3, [r0, r4]
 8011cf2:	2b01      	cmp	r3, #1
 8011cf4:	d019      	beq.n	8011d2a <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 8011cf6:	2539      	movs	r5, #57	; 0x39
 8011cf8:	2302      	movs	r3, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011cfa:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8011cfc:	5543      	strb	r3, [r0, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011cfe:	6803      	ldr	r3, [r0, #0]
 8011d00:	685a      	ldr	r2, [r3, #4]
 8011d02:	43b2      	bics	r2, r6
 8011d04:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011d06:	685a      	ldr	r2, [r3, #4]
 8011d08:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011d0a:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011d0c:	4332      	orrs	r2, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011d0e:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011d10:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011d12:	689a      	ldr	r2, [r3, #8]
 8011d14:	43b2      	bics	r2, r6
 8011d16:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011d18:	689a      	ldr	r2, [r3, #8]
 8011d1a:	430a      	orrs	r2, r1
 8011d1c:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8011d1e:	2301      	movs	r3, #1
 8011d20:	5543      	strb	r3, [r0, r5]

  __HAL_UNLOCK(htim);
 8011d22:	2300      	movs	r3, #0
 8011d24:	5503      	strb	r3, [r0, r4]

  return HAL_OK;
 8011d26:	2000      	movs	r0, #0
}
 8011d28:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8011d2a:	2002      	movs	r0, #2
 8011d2c:	e7fc      	b.n	8011d28 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8011d2e:	46c0      	nop			; (mov r8, r8)

08011d30 <HAL_UART_MspDeInit>:
 8011d30:	4770      	bx	lr
 8011d32:	46c0      	nop			; (mov r8, r8)

08011d34 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8011d34:	b570      	push	{r4, r5, r6, lr}
 8011d36:	0004      	movs	r4, r0
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8011d38:	2001      	movs	r0, #1
  if(huart == NULL)
 8011d3a:	2c00      	cmp	r4, #0
 8011d3c:	d012      	beq.n	8011d64 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 8011d3e:	2669      	movs	r6, #105	; 0x69
 8011d40:	2302      	movs	r3, #2

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0;
 8011d42:	2500      	movs	r5, #0
  huart->State = HAL_UART_STATE_BUSY;
 8011d44:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8011d46:	6823      	ldr	r3, [r4, #0]
 8011d48:	681a      	ldr	r2, [r3, #0]
 8011d4a:	4382      	bics	r2, r0
 8011d4c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0;
  huart->Instance->CR3 = 0x0;

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8011d4e:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0;
 8011d50:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8011d52:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8011d54:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8011d56:	f7ff ffeb 	bl	8011d30 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8011d5a:	2368      	movs	r3, #104	; 0x68

  return HAL_OK;
 8011d5c:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d5e:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8011d60:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8011d62:	54e5      	strb	r5, [r4, r3]
}
 8011d64:	bd70      	pop	{r4, r5, r6, pc}
 8011d66:	46c0      	nop			; (mov r8, r8)

08011d68 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011d68:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011d6a:	2069      	movs	r0, #105	; 0x69
{
 8011d6c:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011d6e:	5c1c      	ldrb	r4, [r3, r0]
 8011d70:	2c01      	cmp	r4, #1
 8011d72:	d003      	beq.n	8011d7c <HAL_UART_Transmit_IT+0x14>
 8011d74:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011d76:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011d78:	2c22      	cmp	r4, #34	; 0x22
 8011d7a:	d122      	bne.n	8011dc2 <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 8011d7c:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011d7e:	2900      	cmp	r1, #0
 8011d80:	d01f      	beq.n	8011dc2 <HAL_UART_Transmit_IT+0x5a>
 8011d82:	2a00      	cmp	r2, #0
 8011d84:	d01d      	beq.n	8011dc2 <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 8011d86:	2468      	movs	r4, #104	; 0x68
 8011d88:	5d1d      	ldrb	r5, [r3, r4]
 8011d8a:	2d01      	cmp	r5, #1
 8011d8c:	d01d      	beq.n	8011dca <HAL_UART_Transmit_IT+0x62>
 8011d8e:	5518      	strb	r0, [r3, r4]
    huart->pTxBuffPtr = pData;
 8011d90:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8011d92:	2150      	movs	r1, #80	; 0x50
 8011d94:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011d96:	3102      	adds	r1, #2
 8011d98:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011d9e:	3269      	adds	r2, #105	; 0x69
 8011da0:	5c99      	ldrb	r1, [r3, r2]
 8011da2:	2922      	cmp	r1, #34	; 0x22
 8011da4:	d00e      	beq.n	8011dc4 <HAL_UART_Transmit_IT+0x5c>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011da6:	2112      	movs	r1, #18
 8011da8:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011daa:	2001      	movs	r0, #1
 8011dac:	681a      	ldr	r2, [r3, #0]
 8011dae:	6891      	ldr	r1, [r2, #8]
 8011db0:	4301      	orrs	r1, r0
 8011db2:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8011db4:	2000      	movs	r0, #0
 8011db6:	2168      	movs	r1, #104	; 0x68
 8011db8:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8011dba:	6813      	ldr	r3, [r2, #0]
 8011dbc:	3118      	adds	r1, #24
 8011dbe:	430b      	orrs	r3, r1
 8011dc0:	6013      	str	r3, [r2, #0]
  }
}
 8011dc2:	bd30      	pop	{r4, r5, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011dc4:	3110      	adds	r1, #16
 8011dc6:	5499      	strb	r1, [r3, r2]
 8011dc8:	e7ef      	b.n	8011daa <HAL_UART_Transmit_IT+0x42>
    return HAL_BUSY;
 8011dca:	2002      	movs	r0, #2
 8011dcc:	e7f9      	b.n	8011dc2 <HAL_UART_Transmit_IT+0x5a>
 8011dce:	46c0      	nop			; (mov r8, r8)

08011dd0 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011dd0:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011dd2:	2069      	movs	r0, #105	; 0x69
{
 8011dd4:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011dd6:	5c1c      	ldrb	r4, [r3, r0]
 8011dd8:	2c01      	cmp	r4, #1
 8011dda:	d003      	beq.n	8011de4 <HAL_UART_Receive_IT+0x14>
 8011ddc:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011dde:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011de0:	2c12      	cmp	r4, #18
 8011de2:	d134      	bne.n	8011e4e <HAL_UART_Receive_IT+0x7e>
      return HAL_ERROR;
 8011de4:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011de6:	2900      	cmp	r1, #0
 8011de8:	d031      	beq.n	8011e4e <HAL_UART_Receive_IT+0x7e>
 8011dea:	2a00      	cmp	r2, #0
 8011dec:	d02f      	beq.n	8011e4e <HAL_UART_Receive_IT+0x7e>
    __HAL_LOCK(huart);
 8011dee:	2468      	movs	r4, #104	; 0x68
 8011df0:	5d1d      	ldrb	r5, [r3, r4]
 8011df2:	2d01      	cmp	r5, #1
 8011df4:	d041      	beq.n	8011e7a <HAL_UART_Receive_IT+0xaa>
 8011df6:	5518      	strb	r0, [r3, r4]
    huart->pRxBuffPtr = pData;
 8011df8:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8011dfa:	2158      	movs	r1, #88	; 0x58
 8011dfc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8011dfe:	3102      	adds	r1, #2
 8011e00:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 8011e02:	2180      	movs	r1, #128	; 0x80
 8011e04:	689a      	ldr	r2, [r3, #8]
 8011e06:	0149      	lsls	r1, r1, #5
 8011e08:	428a      	cmp	r2, r1
 8011e0a:	d021      	beq.n	8011e50 <HAL_UART_Receive_IT+0x80>
 8011e0c:	2a00      	cmp	r2, #0
 8011e0e:	d129      	bne.n	8011e64 <HAL_UART_Receive_IT+0x94>
 8011e10:	691a      	ldr	r2, [r3, #16]
 8011e12:	2a00      	cmp	r2, #0
 8011e14:	d133      	bne.n	8011e7e <HAL_UART_Receive_IT+0xae>
 8011e16:	225c      	movs	r2, #92	; 0x5c
 8011e18:	21ff      	movs	r1, #255	; 0xff
 8011e1a:	5299      	strh	r1, [r3, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8011e20:	3269      	adds	r2, #105	; 0x69
 8011e22:	5c99      	ldrb	r1, [r3, r2]
 8011e24:	2912      	cmp	r1, #18
 8011e26:	d01a      	beq.n	8011e5e <HAL_UART_Receive_IT+0x8e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011e28:	2122      	movs	r1, #34	; 0x22
 8011e2a:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011e2c:	2180      	movs	r1, #128	; 0x80
 8011e2e:	681a      	ldr	r2, [r3, #0]
 8011e30:	0049      	lsls	r1, r1, #1
 8011e32:	6810      	ldr	r0, [r2, #0]
 8011e34:	4301      	orrs	r1, r0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011e36:	2001      	movs	r0, #1
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011e38:	6011      	str	r1, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011e3a:	6891      	ldr	r1, [r2, #8]
 8011e3c:	4301      	orrs	r1, r0
 8011e3e:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8011e40:	2000      	movs	r0, #0
 8011e42:	2168      	movs	r1, #104	; 0x68
 8011e44:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011e46:	6813      	ldr	r3, [r2, #0]
 8011e48:	3948      	subs	r1, #72	; 0x48
 8011e4a:	430b      	orrs	r3, r1
 8011e4c:	6013      	str	r3, [r2, #0]
  }
}
 8011e4e:	bd30      	pop	{r4, r5, pc}
    UART_MASK_COMPUTATION(huart);
 8011e50:	691a      	ldr	r2, [r3, #16]
 8011e52:	2a00      	cmp	r2, #0
 8011e54:	d1df      	bne.n	8011e16 <HAL_UART_Receive_IT+0x46>
 8011e56:	490c      	ldr	r1, [pc, #48]	; (8011e88 <HAL_UART_Receive_IT+0xb8>)
 8011e58:	325c      	adds	r2, #92	; 0x5c
 8011e5a:	5299      	strh	r1, [r3, r2]
 8011e5c:	e7de      	b.n	8011e1c <HAL_UART_Receive_IT+0x4c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011e5e:	3120      	adds	r1, #32
 8011e60:	5499      	strb	r1, [r3, r2]
 8011e62:	e7e3      	b.n	8011e2c <HAL_UART_Receive_IT+0x5c>
    UART_MASK_COMPUTATION(huart);
 8011e64:	2180      	movs	r1, #128	; 0x80
 8011e66:	0549      	lsls	r1, r1, #21
 8011e68:	428a      	cmp	r2, r1
 8011e6a:	d1d7      	bne.n	8011e1c <HAL_UART_Receive_IT+0x4c>
 8011e6c:	691a      	ldr	r2, [r3, #16]
 8011e6e:	2a00      	cmp	r2, #0
 8011e70:	d005      	beq.n	8011e7e <HAL_UART_Receive_IT+0xae>
 8011e72:	225c      	movs	r2, #92	; 0x5c
 8011e74:	213f      	movs	r1, #63	; 0x3f
 8011e76:	5299      	strh	r1, [r3, r2]
 8011e78:	e7d0      	b.n	8011e1c <HAL_UART_Receive_IT+0x4c>
    return HAL_BUSY;
 8011e7a:	2002      	movs	r0, #2
 8011e7c:	e7e7      	b.n	8011e4e <HAL_UART_Receive_IT+0x7e>
    UART_MASK_COMPUTATION(huart);
 8011e7e:	225c      	movs	r2, #92	; 0x5c
 8011e80:	217f      	movs	r1, #127	; 0x7f
 8011e82:	5299      	strh	r1, [r3, r2]
 8011e84:	e7ca      	b.n	8011e1c <HAL_UART_Receive_IT+0x4c>
 8011e86:	46c0      	nop			; (mov r8, r8)
 8011e88:	000001ff 	.word	0x000001ff

08011e8c <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011e8c:	b570      	push	{r4, r5, r6, lr}
 8011e8e:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011e90:	2069      	movs	r0, #105	; 0x69
 8011e92:	5c23      	ldrb	r3, [r4, r0]
 8011e94:	2b01      	cmp	r3, #1
 8011e96:	d003      	beq.n	8011ea0 <HAL_UART_Transmit_DMA+0x14>
 8011e98:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011e9a:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011e9c:	2b22      	cmp	r3, #34	; 0x22
 8011e9e:	d12e      	bne.n	8011efe <HAL_UART_Transmit_DMA+0x72>
      return HAL_ERROR;
 8011ea0:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011ea2:	2900      	cmp	r1, #0
 8011ea4:	d02b      	beq.n	8011efe <HAL_UART_Transmit_DMA+0x72>
 8011ea6:	2a00      	cmp	r2, #0
 8011ea8:	d029      	beq.n	8011efe <HAL_UART_Transmit_DMA+0x72>
    __HAL_LOCK(huart);
 8011eaa:	2368      	movs	r3, #104	; 0x68
 8011eac:	5ce5      	ldrb	r5, [r4, r3]
 8011eae:	2d01      	cmp	r5, #1
 8011eb0:	d029      	beq.n	8011f06 <HAL_UART_Transmit_DMA+0x7a>
 8011eb2:	54e0      	strb	r0, [r4, r3]
    huart->TxXferSize = Size;
 8011eb4:	3b18      	subs	r3, #24
    huart->pTxBuffPtr = pData;
 8011eb6:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8011eb8:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8011eba:	3302      	adds	r3, #2
 8011ebc:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011ec2:	3369      	adds	r3, #105	; 0x69
 8011ec4:	5ce0      	ldrb	r0, [r4, r3]
 8011ec6:	2822      	cmp	r0, #34	; 0x22
 8011ec8:	d01a      	beq.n	8011f00 <HAL_UART_Transmit_DMA+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011eca:	2012      	movs	r0, #18
 8011ecc:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011ece:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8011ed0:	4b0e      	ldr	r3, [pc, #56]	; (8011f0c <HAL_UART_Transmit_DMA+0x80>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8011ed2:	6825      	ldr	r5, [r4, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011ed4:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011ed6:	4b0e      	ldr	r3, [pc, #56]	; (8011f10 <HAL_UART_Transmit_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8011ed8:	3528      	adds	r5, #40	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011eda:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011edc:	4b0d      	ldr	r3, [pc, #52]	; (8011f14 <HAL_UART_Transmit_DMA+0x88>)
 8011ede:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8011ee0:	0013      	movs	r3, r2
 8011ee2:	002a      	movs	r2, r5
 8011ee4:	f7fd ffda 	bl	800fe9c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011ee8:	2240      	movs	r2, #64	; 0x40
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8011eea:	2180      	movs	r1, #128	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011eec:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8011eee:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011ef0:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8011ef2:	689a      	ldr	r2, [r3, #8]
 8011ef4:	430a      	orrs	r2, r1
 8011ef6:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8011ef8:	2368      	movs	r3, #104	; 0x68
 8011efa:	2200      	movs	r2, #0
 8011efc:	54e2      	strb	r2, [r4, r3]
  }
}
 8011efe:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011f00:	3010      	adds	r0, #16
 8011f02:	54e0      	strb	r0, [r4, r3]
 8011f04:	e7e3      	b.n	8011ece <HAL_UART_Transmit_DMA+0x42>
    return HAL_BUSY;
 8011f06:	2002      	movs	r0, #2
 8011f08:	e7f9      	b.n	8011efe <HAL_UART_Transmit_DMA+0x72>
 8011f0a:	46c0      	nop			; (mov r8, r8)
 8011f0c:	08011f9d 	.word	0x08011f9d
 8011f10:	08011fd1 	.word	0x08011fd1
 8011f14:	08012025 	.word	0x08012025

08011f18 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011f18:	b570      	push	{r4, r5, r6, lr}
 8011f1a:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011f1c:	2069      	movs	r0, #105	; 0x69
 8011f1e:	5c25      	ldrb	r5, [r4, r0]
 8011f20:	2d01      	cmp	r5, #1
 8011f22:	d003      	beq.n	8011f2c <HAL_UART_Receive_DMA+0x14>
 8011f24:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011f26:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011f28:	2b12      	cmp	r3, #18
 8011f2a:	d12b      	bne.n	8011f84 <HAL_UART_Receive_DMA+0x6c>
      return HAL_ERROR;
 8011f2c:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011f2e:	2900      	cmp	r1, #0
 8011f30:	d028      	beq.n	8011f84 <HAL_UART_Receive_DMA+0x6c>
 8011f32:	2a00      	cmp	r2, #0
 8011f34:	d026      	beq.n	8011f84 <HAL_UART_Receive_DMA+0x6c>
    __HAL_LOCK(huart);
 8011f36:	2368      	movs	r3, #104	; 0x68
 8011f38:	5ce5      	ldrb	r5, [r4, r3]
 8011f3a:	2d01      	cmp	r5, #1
 8011f3c:	d026      	beq.n	8011f8c <HAL_UART_Receive_DMA+0x74>
 8011f3e:	54e0      	strb	r0, [r4, r3]
    huart->RxXferSize = Size;
 8011f40:	3b10      	subs	r3, #16
    huart->pRxBuffPtr = pData;
 8011f42:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8011f44:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f46:	2300      	movs	r3, #0
 8011f48:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8011f4a:	3369      	adds	r3, #105	; 0x69
 8011f4c:	5ce0      	ldrb	r0, [r4, r3]
 8011f4e:	2812      	cmp	r0, #18
 8011f50:	d019      	beq.n	8011f86 <HAL_UART_Receive_DMA+0x6e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011f52:	2022      	movs	r0, #34	; 0x22
 8011f54:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011f56:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8011f58:	4b0d      	ldr	r3, [pc, #52]	; (8011f90 <HAL_UART_Receive_DMA+0x78>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8011f5a:	6825      	ldr	r5, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011f5c:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011f5e:	4b0d      	ldr	r3, [pc, #52]	; (8011f94 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8011f60:	3524      	adds	r5, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011f62:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011f64:	4b0c      	ldr	r3, [pc, #48]	; (8011f98 <HAL_UART_Receive_DMA+0x80>)
 8011f66:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8011f68:	0013      	movs	r3, r2
 8011f6a:	000a      	movs	r2, r1
 8011f6c:	0029      	movs	r1, r5
 8011f6e:	f7fd ff95 	bl	800fe9c <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8011f72:	2140      	movs	r1, #64	; 0x40
 8011f74:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8011f76:	2000      	movs	r0, #0
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8011f78:	6893      	ldr	r3, [r2, #8]
 8011f7a:	430b      	orrs	r3, r1
 8011f7c:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8011f7e:	2368      	movs	r3, #104	; 0x68
 8011f80:	2200      	movs	r2, #0
 8011f82:	54e2      	strb	r2, [r4, r3]
  }
}
 8011f84:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011f86:	3020      	adds	r0, #32
 8011f88:	54e0      	strb	r0, [r4, r3]
 8011f8a:	e7e4      	b.n	8011f56 <HAL_UART_Receive_DMA+0x3e>
    return HAL_BUSY;
 8011f8c:	2002      	movs	r0, #2
 8011f8e:	e7f9      	b.n	8011f84 <HAL_UART_Receive_DMA+0x6c>
 8011f90:	08011fdd 	.word	0x08011fdd
 8011f94:	08012019 	.word	0x08012019
 8011f98:	08012025 	.word	0x08012025

08011f9c <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011f9c:	6803      	ldr	r3, [r0, #0]
{
 8011f9e:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011fa0:	6819      	ldr	r1, [r3, #0]
 8011fa2:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011fa4:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011fa6:	400b      	ands	r3, r1
 8011fa8:	d10b      	bne.n	8011fc2 <UART_DMATransmitCplt+0x26>
  {  
    huart->TxXferCount = 0;
 8011faa:	2152      	movs	r1, #82	; 0x52
 8011fac:	5253      	strh	r3, [r2, r1]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8011fae:	6813      	ldr	r3, [r2, #0]
 8011fb0:	312e      	adds	r1, #46	; 0x2e
 8011fb2:	689a      	ldr	r2, [r3, #8]
 8011fb4:	438a      	bics	r2, r1
 8011fb6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011fb8:	681a      	ldr	r2, [r3, #0]
 8011fba:	3940      	subs	r1, #64	; 0x40
 8011fbc:	430a      	orrs	r2, r1
 8011fbe:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8011fc0:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8011fc2:	0010      	movs	r0, r2
 8011fc4:	f7fa fde6 	bl	800cb94 <HAL_UART_TxCpltCallback>
}
 8011fc8:	e7fa      	b.n	8011fc0 <UART_DMATransmitCplt+0x24>
 8011fca:	46c0      	nop			; (mov r8, r8)

08011fcc <HAL_UART_TxHalfCpltCallback>:
 8011fcc:	4770      	bx	lr
 8011fce:	46c0      	nop			; (mov r8, r8)

08011fd0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011fd0:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8011fd2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011fd4:	f7ff fffa 	bl	8011fcc <HAL_UART_TxHalfCpltCallback>
}
 8011fd8:	bd10      	pop	{r4, pc}
 8011fda:	46c0      	nop			; (mov r8, r8)

08011fdc <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011fdc:	6803      	ldr	r3, [r0, #0]
{
 8011fde:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011fe0:	6819      	ldr	r1, [r3, #0]
 8011fe2:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011fe4:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011fe6:	400b      	ands	r3, r1
 8011fe8:	d10c      	bne.n	8012004 <UART_DMAReceiveCplt+0x28>
  {
    huart->RxXferCount = 0;
 8011fea:	215a      	movs	r1, #90	; 0x5a

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8011fec:	2040      	movs	r0, #64	; 0x40
    huart->RxXferCount = 0;
 8011fee:	5253      	strh	r3, [r2, r1]
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8011ff0:	6811      	ldr	r1, [r2, #0]
 8011ff2:	688b      	ldr	r3, [r1, #8]
 8011ff4:	4383      	bics	r3, r0
 8011ff6:	608b      	str	r3, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011ff8:	2369      	movs	r3, #105	; 0x69
 8011ffa:	5cd1      	ldrb	r1, [r2, r3]
 8011ffc:	2932      	cmp	r1, #50	; 0x32
 8011ffe:	d005      	beq.n	801200c <UART_DMAReceiveCplt+0x30>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012000:	2101      	movs	r1, #1
 8012002:	54d1      	strb	r1, [r2, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8012004:	0010      	movs	r0, r2
 8012006:	f7fa fe01 	bl	800cc0c <HAL_UART_RxCpltCallback>
}
 801200a:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 801200c:	3920      	subs	r1, #32
 801200e:	54d1      	strb	r1, [r2, r3]
 8012010:	e7f8      	b.n	8012004 <UART_DMAReceiveCplt+0x28>
 8012012:	46c0      	nop			; (mov r8, r8)

08012014 <HAL_UART_RxHalfCpltCallback>:
 8012014:	4770      	bx	lr
 8012016:	46c0      	nop			; (mov r8, r8)

08012018 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012018:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 801201a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801201c:	f7ff fffa 	bl	8012014 <HAL_UART_RxHalfCpltCallback>
}
 8012020:	bd10      	pop	{r4, pc}
 8012022:	46c0      	nop			; (mov r8, r8)

08012024 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0;
 8012024:	2300      	movs	r3, #0
 8012026:	225a      	movs	r2, #90	; 0x5a
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012028:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 801202a:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 801202c:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 801202e:	3a08      	subs	r2, #8
 8012030:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8012032:	3369      	adds	r3, #105	; 0x69
 8012034:	3a51      	subs	r2, #81	; 0x51
 8012036:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012038:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801203a:	320f      	adds	r2, #15
 801203c:	4313      	orrs	r3, r2
 801203e:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8012040:	f7fa fdc0 	bl	800cbc4 <HAL_UART_ErrorCallback>
}
 8012044:	bd10      	pop	{r4, pc}
 8012046:	46c0      	nop			; (mov r8, r8)

08012048 <UART_SetConfig>:
{
 8012048:	b570      	push	{r4, r5, r6, lr}
 801204a:	0005      	movs	r5, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801204c:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801204e:	69c1      	ldr	r1, [r0, #28]
 8012050:	6883      	ldr	r3, [r0, #8]
 8012052:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012054:	6822      	ldr	r2, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012056:	4303      	orrs	r3, r0
 8012058:	6968      	ldr	r0, [r5, #20]
 801205a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801205c:	4861      	ldr	r0, [pc, #388]	; (80121e4 <UART_SetConfig+0x19c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801205e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012060:	4002      	ands	r2, r0
 8012062:	4313      	orrs	r3, r2
 8012064:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012066:	6863      	ldr	r3, [r4, #4]
 8012068:	4a5f      	ldr	r2, [pc, #380]	; (80121e8 <UART_SetConfig+0x1a0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 801206a:	6a28      	ldr	r0, [r5, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801206c:	4013      	ands	r3, r2
 801206e:	68ea      	ldr	r2, [r5, #12]
 8012070:	4313      	orrs	r3, r2
 8012072:	6063      	str	r3, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012074:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8012076:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012078:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801207a:	485c      	ldr	r0, [pc, #368]	; (80121ec <UART_SetConfig+0x1a4>)
 801207c:	4002      	ands	r2, r0
 801207e:	4313      	orrs	r3, r2
 8012080:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012082:	4b5b      	ldr	r3, [pc, #364]	; (80121f0 <UART_SetConfig+0x1a8>)
 8012084:	429c      	cmp	r4, r3
 8012086:	d044      	beq.n	8012112 <UART_SetConfig+0xca>
 8012088:	4b5a      	ldr	r3, [pc, #360]	; (80121f4 <UART_SetConfig+0x1ac>)
 801208a:	429c      	cmp	r4, r3
 801208c:	d018      	beq.n	80120c0 <UART_SetConfig+0x78>
 801208e:	4b5a      	ldr	r3, [pc, #360]	; (80121f8 <UART_SetConfig+0x1b0>)
 8012090:	429c      	cmp	r4, r3
 8012092:	d100      	bne.n	8012096 <UART_SetConfig+0x4e>
 8012094:	e085      	b.n	80121a2 <UART_SetConfig+0x15a>
 8012096:	4b59      	ldr	r3, [pc, #356]	; (80121fc <UART_SetConfig+0x1b4>)
 8012098:	429c      	cmp	r4, r3
 801209a:	d031      	beq.n	8012100 <UART_SetConfig+0xb8>
 801209c:	4b58      	ldr	r3, [pc, #352]	; (8012200 <UART_SetConfig+0x1b8>)
 801209e:	429c      	cmp	r4, r3
 80120a0:	d02e      	beq.n	8012100 <UART_SetConfig+0xb8>
 80120a2:	4b58      	ldr	r3, [pc, #352]	; (8012204 <UART_SetConfig+0x1bc>)
 80120a4:	429c      	cmp	r4, r3
 80120a6:	d02b      	beq.n	8012100 <UART_SetConfig+0xb8>
 80120a8:	4b57      	ldr	r3, [pc, #348]	; (8012208 <UART_SetConfig+0x1c0>)
 80120aa:	429c      	cmp	r4, r3
 80120ac:	d028      	beq.n	8012100 <UART_SetConfig+0xb8>
 80120ae:	4b57      	ldr	r3, [pc, #348]	; (801220c <UART_SetConfig+0x1c4>)
 80120b0:	429c      	cmp	r4, r3
 80120b2:	d025      	beq.n	8012100 <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80120b4:	2380      	movs	r3, #128	; 0x80
 80120b6:	021b      	lsls	r3, r3, #8
 80120b8:	4299      	cmp	r1, r3
 80120ba:	d050      	beq.n	801215e <UART_SetConfig+0x116>
        ret = HAL_ERROR;
 80120bc:	2001      	movs	r0, #1
 80120be:	e01c      	b.n	80120fa <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80120c0:	20c0      	movs	r0, #192	; 0xc0
 80120c2:	2280      	movs	r2, #128	; 0x80
 80120c4:	4b52      	ldr	r3, [pc, #328]	; (8012210 <UART_SetConfig+0x1c8>)
 80120c6:	0280      	lsls	r0, r0, #10
 80120c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120ca:	0252      	lsls	r2, r2, #9
 80120cc:	4003      	ands	r3, r0
 80120ce:	4293      	cmp	r3, r2
 80120d0:	d049      	beq.n	8012166 <UART_SetConfig+0x11e>
 80120d2:	d913      	bls.n	80120fc <UART_SetConfig+0xb4>
 80120d4:	2280      	movs	r2, #128	; 0x80
 80120d6:	0292      	lsls	r2, r2, #10
 80120d8:	4293      	cmp	r3, r2
 80120da:	d100      	bne.n	80120de <UART_SetConfig+0x96>
 80120dc:	e070      	b.n	80121c0 <UART_SetConfig+0x178>
 80120de:	4283      	cmp	r3, r0
 80120e0:	d1e8      	bne.n	80120b4 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80120e2:	2380      	movs	r3, #128	; 0x80
 80120e4:	021b      	lsls	r3, r3, #8
 80120e6:	4299      	cmp	r1, r3
 80120e8:	d056      	beq.n	8012198 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 80120ea:	6869      	ldr	r1, [r5, #4]
 80120ec:	4849      	ldr	r0, [pc, #292]	; (8012214 <UART_SetConfig+0x1cc>)
 80120ee:	f7ee f82f 	bl	8000150 <__udivsi3>
 80120f2:	0400      	lsls	r0, r0, #16
 80120f4:	0c00      	lsrs	r0, r0, #16
 80120f6:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80120f8:	2000      	movs	r0, #0
}
 80120fa:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d1d9      	bne.n	80120b4 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012100:	2380      	movs	r3, #128	; 0x80
 8012102:	021b      	lsls	r3, r3, #8
 8012104:	4299      	cmp	r1, r3
 8012106:	d060      	beq.n	80121ca <UART_SetConfig+0x182>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012108:	f7ff fac8 	bl	801169c <HAL_RCC_GetPCLK1Freq>
 801210c:	682c      	ldr	r4, [r5, #0]
 801210e:	6869      	ldr	r1, [r5, #4]
 8012110:	e7ed      	b.n	80120ee <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012112:	4b3f      	ldr	r3, [pc, #252]	; (8012210 <UART_SetConfig+0x1c8>)
 8012114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012116:	2303      	movs	r3, #3
 8012118:	4013      	ands	r3, r2
 801211a:	4a3f      	ldr	r2, [pc, #252]	; (8012218 <UART_SetConfig+0x1d0>)
 801211c:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801211e:	2280      	movs	r2, #128	; 0x80
 8012120:	0212      	lsls	r2, r2, #8
 8012122:	4291      	cmp	r1, r2
 8012124:	d00e      	beq.n	8012144 <UART_SetConfig+0xfc>
    switch (clocksource)
 8012126:	2b02      	cmp	r3, #2
 8012128:	d0df      	beq.n	80120ea <UART_SetConfig+0xa2>
 801212a:	d956      	bls.n	80121da <UART_SetConfig+0x192>
 801212c:	2b04      	cmp	r3, #4
 801212e:	d01e      	beq.n	801216e <UART_SetConfig+0x126>
 8012130:	2b08      	cmp	r3, #8
 8012132:	d1c3      	bne.n	80120bc <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8012134:	2080      	movs	r0, #128	; 0x80
 8012136:	6869      	ldr	r1, [r5, #4]
 8012138:	0200      	lsls	r0, r0, #8
 801213a:	f7ee f809 	bl	8000150 <__udivsi3>
 801213e:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012140:	2000      	movs	r0, #0
        break;
 8012142:	e7da      	b.n	80120fa <UART_SetConfig+0xb2>
    switch (clocksource)
 8012144:	2b02      	cmp	r3, #2
 8012146:	d027      	beq.n	8012198 <UART_SetConfig+0x150>
 8012148:	d907      	bls.n	801215a <UART_SetConfig+0x112>
 801214a:	2b04      	cmp	r3, #4
 801214c:	d014      	beq.n	8012178 <UART_SetConfig+0x130>
 801214e:	2b08      	cmp	r3, #8
 8012150:	d105      	bne.n	801215e <UART_SetConfig+0x116>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012152:	2080      	movs	r0, #128	; 0x80
 8012154:	6869      	ldr	r1, [r5, #4]
 8012156:	0240      	lsls	r0, r0, #9
 8012158:	e020      	b.n	801219c <UART_SetConfig+0x154>
    switch (clocksource)
 801215a:	2b00      	cmp	r3, #0
 801215c:	d035      	beq.n	80121ca <UART_SetConfig+0x182>
 801215e:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 8012160:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8012162:	60e3      	str	r3, [r4, #12]
 8012164:	e7c9      	b.n	80120fa <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012166:	2380      	movs	r3, #128	; 0x80
 8012168:	021b      	lsls	r3, r3, #8
 801216a:	4299      	cmp	r1, r3
 801216c:	d004      	beq.n	8012178 <UART_SetConfig+0x130>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801216e:	f7ff fa3b 	bl	80115e8 <HAL_RCC_GetSysClockFreq>
 8012172:	682c      	ldr	r4, [r5, #0]
 8012174:	6869      	ldr	r1, [r5, #4]
 8012176:	e7ba      	b.n	80120ee <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012178:	f7ff fa36 	bl	80115e8 <HAL_RCC_GetSysClockFreq>
 801217c:	6869      	ldr	r1, [r5, #4]
 801217e:	0040      	lsls	r0, r0, #1
 8012180:	f7ed ffe6 	bl	8000150 <__udivsi3>
 8012184:	682c      	ldr	r4, [r5, #0]
 8012186:	220f      	movs	r2, #15
 8012188:	0703      	lsls	r3, r0, #28
 801218a:	0f5b      	lsrs	r3, r3, #29
 801218c:	4390      	bics	r0, r2
 801218e:	4303      	orrs	r3, r0
 8012190:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8012192:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 8012194:	60e3      	str	r3, [r4, #12]
 8012196:	e7b0      	b.n	80120fa <UART_SetConfig+0xb2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012198:	6869      	ldr	r1, [r5, #4]
 801219a:	4820      	ldr	r0, [pc, #128]	; (801221c <UART_SetConfig+0x1d4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 801219c:	f7ed ffd8 	bl	8000150 <__udivsi3>
 80121a0:	e7f1      	b.n	8012186 <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80121a2:	20c0      	movs	r0, #192	; 0xc0
 80121a4:	2280      	movs	r2, #128	; 0x80
 80121a6:	4b1a      	ldr	r3, [pc, #104]	; (8012210 <UART_SetConfig+0x1c8>)
 80121a8:	0300      	lsls	r0, r0, #12
 80121aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121ac:	02d2      	lsls	r2, r2, #11
 80121ae:	4003      	ands	r3, r0
 80121b0:	4293      	cmp	r3, r2
 80121b2:	d0d8      	beq.n	8012166 <UART_SetConfig+0x11e>
 80121b4:	d9a2      	bls.n	80120fc <UART_SetConfig+0xb4>
 80121b6:	2280      	movs	r2, #128	; 0x80
 80121b8:	0312      	lsls	r2, r2, #12
 80121ba:	4293      	cmp	r3, r2
 80121bc:	d000      	beq.n	80121c0 <UART_SetConfig+0x178>
 80121be:	e78e      	b.n	80120de <UART_SetConfig+0x96>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80121c0:	2380      	movs	r3, #128	; 0x80
 80121c2:	021b      	lsls	r3, r3, #8
 80121c4:	4299      	cmp	r1, r3
 80121c6:	d1b5      	bne.n	8012134 <UART_SetConfig+0xec>
 80121c8:	e7c3      	b.n	8012152 <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80121ca:	f7ff fa67 	bl	801169c <HAL_RCC_GetPCLK1Freq>
 80121ce:	6869      	ldr	r1, [r5, #4]
 80121d0:	0040      	lsls	r0, r0, #1
 80121d2:	f7ed ffbd 	bl	8000150 <__udivsi3>
 80121d6:	682c      	ldr	r4, [r5, #0]
 80121d8:	e7d5      	b.n	8012186 <UART_SetConfig+0x13e>
    switch (clocksource)
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d094      	beq.n	8012108 <UART_SetConfig+0xc0>
        ret = HAL_ERROR;
 80121de:	2001      	movs	r0, #1
 80121e0:	e78b      	b.n	80120fa <UART_SetConfig+0xb2>
 80121e2:	46c0      	nop			; (mov r8, r8)
 80121e4:	efff69f3 	.word	0xefff69f3
 80121e8:	ffffcfff 	.word	0xffffcfff
 80121ec:	fffff4ff 	.word	0xfffff4ff
 80121f0:	40013800 	.word	0x40013800
 80121f4:	40004400 	.word	0x40004400
 80121f8:	40004800 	.word	0x40004800
 80121fc:	40004c00 	.word	0x40004c00
 8012200:	40005000 	.word	0x40005000
 8012204:	40011400 	.word	0x40011400
 8012208:	40011800 	.word	0x40011800
 801220c:	40011c00 	.word	0x40011c00
 8012210:	40021000 	.word	0x40021000
 8012214:	007a1200 	.word	0x007a1200
 8012218:	08017b94 	.word	0x08017b94
 801221c:	00f42400 	.word	0x00f42400

08012220 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012220:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8012222:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012224:	07da      	lsls	r2, r3, #31
 8012226:	d506      	bpl.n	8012236 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012228:	6801      	ldr	r1, [r0, #0]
 801222a:	4c28      	ldr	r4, [pc, #160]	; (80122cc <UART_AdvFeatureConfig+0xac>)
 801222c:	684a      	ldr	r2, [r1, #4]
 801222e:	4022      	ands	r2, r4
 8012230:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012232:	4322      	orrs	r2, r4
 8012234:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012236:	079a      	lsls	r2, r3, #30
 8012238:	d506      	bpl.n	8012248 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801223a:	6801      	ldr	r1, [r0, #0]
 801223c:	4c24      	ldr	r4, [pc, #144]	; (80122d0 <UART_AdvFeatureConfig+0xb0>)
 801223e:	684a      	ldr	r2, [r1, #4]
 8012240:	4022      	ands	r2, r4
 8012242:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8012244:	4322      	orrs	r2, r4
 8012246:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012248:	075a      	lsls	r2, r3, #29
 801224a:	d506      	bpl.n	801225a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801224c:	6801      	ldr	r1, [r0, #0]
 801224e:	4c21      	ldr	r4, [pc, #132]	; (80122d4 <UART_AdvFeatureConfig+0xb4>)
 8012250:	684a      	ldr	r2, [r1, #4]
 8012252:	4022      	ands	r2, r4
 8012254:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8012256:	4322      	orrs	r2, r4
 8012258:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801225a:	071a      	lsls	r2, r3, #28
 801225c:	d506      	bpl.n	801226c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801225e:	6801      	ldr	r1, [r0, #0]
 8012260:	4c1d      	ldr	r4, [pc, #116]	; (80122d8 <UART_AdvFeatureConfig+0xb8>)
 8012262:	684a      	ldr	r2, [r1, #4]
 8012264:	4022      	ands	r2, r4
 8012266:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8012268:	4322      	orrs	r2, r4
 801226a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801226c:	06da      	lsls	r2, r3, #27
 801226e:	d506      	bpl.n	801227e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012270:	6801      	ldr	r1, [r0, #0]
 8012272:	4c1a      	ldr	r4, [pc, #104]	; (80122dc <UART_AdvFeatureConfig+0xbc>)
 8012274:	688a      	ldr	r2, [r1, #8]
 8012276:	4022      	ands	r2, r4
 8012278:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801227a:	4322      	orrs	r2, r4
 801227c:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801227e:	069a      	lsls	r2, r3, #26
 8012280:	d506      	bpl.n	8012290 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012282:	6801      	ldr	r1, [r0, #0]
 8012284:	4c16      	ldr	r4, [pc, #88]	; (80122e0 <UART_AdvFeatureConfig+0xc0>)
 8012286:	688a      	ldr	r2, [r1, #8]
 8012288:	4022      	ands	r2, r4
 801228a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 801228c:	4322      	orrs	r2, r4
 801228e:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012290:	065a      	lsls	r2, r3, #25
 8012292:	d50a      	bpl.n	80122aa <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012294:	6801      	ldr	r1, [r0, #0]
 8012296:	4d13      	ldr	r5, [pc, #76]	; (80122e4 <UART_AdvFeatureConfig+0xc4>)
 8012298:	684a      	ldr	r2, [r1, #4]
 801229a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801229c:	402a      	ands	r2, r5
 801229e:	4322      	orrs	r2, r4
 80122a0:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80122a2:	2280      	movs	r2, #128	; 0x80
 80122a4:	0352      	lsls	r2, r2, #13
 80122a6:	4294      	cmp	r4, r2
 80122a8:	d009      	beq.n	80122be <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80122aa:	061b      	lsls	r3, r3, #24
 80122ac:	d506      	bpl.n	80122bc <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80122ae:	6802      	ldr	r2, [r0, #0]
 80122b0:	490d      	ldr	r1, [pc, #52]	; (80122e8 <UART_AdvFeatureConfig+0xc8>)
 80122b2:	6853      	ldr	r3, [r2, #4]
 80122b4:	400b      	ands	r3, r1
 80122b6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80122b8:	430b      	orrs	r3, r1
 80122ba:	6053      	str	r3, [r2, #4]
}
 80122bc:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80122be:	684a      	ldr	r2, [r1, #4]
 80122c0:	4c0a      	ldr	r4, [pc, #40]	; (80122ec <UART_AdvFeatureConfig+0xcc>)
 80122c2:	4022      	ands	r2, r4
 80122c4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80122c6:	4322      	orrs	r2, r4
 80122c8:	604a      	str	r2, [r1, #4]
 80122ca:	e7ee      	b.n	80122aa <UART_AdvFeatureConfig+0x8a>
 80122cc:	fffdffff 	.word	0xfffdffff
 80122d0:	fffeffff 	.word	0xfffeffff
 80122d4:	fffbffff 	.word	0xfffbffff
 80122d8:	ffff7fff 	.word	0xffff7fff
 80122dc:	ffffefff 	.word	0xffffefff
 80122e0:	ffffdfff 	.word	0xffffdfff
 80122e4:	ffefffff 	.word	0xffefffff
 80122e8:	fff7ffff 	.word	0xfff7ffff
 80122ec:	ff9fffff 	.word	0xff9fffff

080122f0 <UART_WaitOnFlagUntilTimeout>:
{
 80122f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122f2:	46c6      	mov	lr, r8
 80122f4:	4690      	mov	r8, r2
 80122f6:	b500      	push	{lr}
 80122f8:	001d      	movs	r5, r3
 80122fa:	0006      	movs	r6, r0
 80122fc:	000c      	movs	r4, r1
  uint32_t tickstart = HAL_GetTick();
 80122fe:	f7fd f901 	bl	800f504 <HAL_GetTick>
  if(Status == RESET)
 8012302:	4643      	mov	r3, r8
  uint32_t tickstart = HAL_GetTick();
 8012304:	0007      	movs	r7, r0
  if(Status == RESET)
 8012306:	2b00      	cmp	r3, #0
 8012308:	d112      	bne.n	8012330 <UART_WaitOnFlagUntilTimeout+0x40>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 801230a:	6832      	ldr	r2, [r6, #0]
 801230c:	e001      	b.n	8012312 <UART_WaitOnFlagUntilTimeout+0x22>
      if(Timeout != HAL_MAX_DELAY)
 801230e:	1c6b      	adds	r3, r5, #1
 8012310:	d117      	bne.n	8012342 <UART_WaitOnFlagUntilTimeout+0x52>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012312:	69d3      	ldr	r3, [r2, #28]
 8012314:	4023      	ands	r3, r4
 8012316:	42a3      	cmp	r3, r4
 8012318:	d1f9      	bne.n	801230e <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 801231a:	2000      	movs	r0, #0
}
 801231c:	bc04      	pop	{r2}
 801231e:	4690      	mov	r8, r2
 8012320:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012322:	2d00      	cmp	r5, #0
 8012324:	d015      	beq.n	8012352 <UART_WaitOnFlagUntilTimeout+0x62>
 8012326:	f7fd f8ed 	bl	800f504 <HAL_GetTick>
 801232a:	1bc0      	subs	r0, r0, r7
 801232c:	42a8      	cmp	r0, r5
 801232e:	d80f      	bhi.n	8012350 <UART_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8012330:	6832      	ldr	r2, [r6, #0]
 8012332:	e001      	b.n	8012338 <UART_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 8012334:	1c6b      	adds	r3, r5, #1
 8012336:	d1f4      	bne.n	8012322 <UART_WaitOnFlagUntilTimeout+0x32>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8012338:	69d3      	ldr	r3, [r2, #28]
 801233a:	4023      	ands	r3, r4
 801233c:	42a3      	cmp	r3, r4
 801233e:	d0f9      	beq.n	8012334 <UART_WaitOnFlagUntilTimeout+0x44>
 8012340:	e7eb      	b.n	801231a <UART_WaitOnFlagUntilTimeout+0x2a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012342:	2d00      	cmp	r5, #0
 8012344:	d005      	beq.n	8012352 <UART_WaitOnFlagUntilTimeout+0x62>
 8012346:	f7fd f8dd 	bl	800f504 <HAL_GetTick>
 801234a:	1bc0      	subs	r0, r0, r7
 801234c:	42a8      	cmp	r0, r5
 801234e:	d9dc      	bls.n	801230a <UART_WaitOnFlagUntilTimeout+0x1a>
 8012350:	6832      	ldr	r2, [r6, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012352:	2180      	movs	r1, #128	; 0x80
 8012354:	6813      	ldr	r3, [r2, #0]
          return HAL_TIMEOUT;
 8012356:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012358:	438b      	bics	r3, r1
 801235a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801235c:	6813      	ldr	r3, [r2, #0]
 801235e:	3960      	subs	r1, #96	; 0x60
 8012360:	438b      	bics	r3, r1
 8012362:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012364:	6813      	ldr	r3, [r2, #0]
 8012366:	4907      	ldr	r1, [pc, #28]	; (8012384 <UART_WaitOnFlagUntilTimeout+0x94>)
 8012368:	400b      	ands	r3, r1
 801236a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801236c:	6893      	ldr	r3, [r2, #8]
 801236e:	3103      	adds	r1, #3
 8012370:	31ff      	adds	r1, #255	; 0xff
 8012372:	438b      	bics	r3, r1
 8012374:	6093      	str	r3, [r2, #8]
          huart->State = HAL_UART_STATE_READY;
 8012376:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 8012378:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 801237a:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 801237c:	3b01      	subs	r3, #1
 801237e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8012380:	e7cc      	b.n	801231c <UART_WaitOnFlagUntilTimeout+0x2c>
 8012382:	46c0      	nop			; (mov r8, r8)
 8012384:	fffffeff 	.word	0xfffffeff

08012388 <HAL_UART_Transmit>:
{
 8012388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801238a:	46c6      	mov	lr, r8
 801238c:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801238e:	2369      	movs	r3, #105	; 0x69
{
 8012390:	b500      	push	{lr}
 8012392:	000d      	movs	r5, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012394:	5cc1      	ldrb	r1, [r0, r3]
{
 8012396:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012398:	2901      	cmp	r1, #1
 801239a:	d003      	beq.n	80123a4 <HAL_UART_Transmit+0x1c>
 801239c:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 801239e:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80123a0:	2b22      	cmp	r3, #34	; 0x22
 80123a2:	d147      	bne.n	8012434 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 80123a4:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80123a6:	2d00      	cmp	r5, #0
 80123a8:	d044      	beq.n	8012434 <HAL_UART_Transmit+0xac>
 80123aa:	2a00      	cmp	r2, #0
 80123ac:	d042      	beq.n	8012434 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80123ae:	2368      	movs	r3, #104	; 0x68
 80123b0:	5ce1      	ldrb	r1, [r4, r3]
 80123b2:	2901      	cmp	r1, #1
 80123b4:	d046      	beq.n	8012444 <HAL_UART_Transmit+0xbc>
 80123b6:	54e0      	strb	r0, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123b8:	2300      	movs	r3, #0
 80123ba:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80123bc:	3369      	adds	r3, #105	; 0x69
 80123be:	5ce1      	ldrb	r1, [r4, r3]
 80123c0:	2922      	cmp	r1, #34	; 0x22
 80123c2:	d03a      	beq.n	801243a <HAL_UART_Transmit+0xb2>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80123c4:	2112      	movs	r1, #18
 80123c6:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80123c8:	2350      	movs	r3, #80	; 0x50
 80123ca:	52e2      	strh	r2, [r4, r3]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80123cc:	2380      	movs	r3, #128	; 0x80
 80123ce:	015b      	lsls	r3, r3, #5
      huart->TxXferCount--;
 80123d0:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80123d2:	4698      	mov	r8, r3
 80123d4:	e005      	b.n	80123e2 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80123d6:	782a      	ldrb	r2, [r5, #0]
 80123d8:	3501      	adds	r5, #1
 80123da:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 80123dc:	5ba2      	ldrh	r2, [r4, r6]
 80123de:	2a00      	cmp	r2, #0
 80123e0:	d018      	beq.n	8012414 <HAL_UART_Transmit+0x8c>
      huart->TxXferCount--;
 80123e2:	3a01      	subs	r2, #1
 80123e4:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80123e6:	003b      	movs	r3, r7
 80123e8:	2200      	movs	r2, #0
 80123ea:	2180      	movs	r1, #128	; 0x80
 80123ec:	0020      	movs	r0, r4
 80123ee:	f7ff ff7f 	bl	80122f0 <UART_WaitOnFlagUntilTimeout>
 80123f2:	2800      	cmp	r0, #0
 80123f4:	d124      	bne.n	8012440 <HAL_UART_Transmit+0xb8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80123f6:	68a2      	ldr	r2, [r4, #8]
 80123f8:	6823      	ldr	r3, [r4, #0]
 80123fa:	4542      	cmp	r2, r8
 80123fc:	d1eb      	bne.n	80123d6 <HAL_UART_Transmit+0x4e>
 80123fe:	6922      	ldr	r2, [r4, #16]
 8012400:	2a00      	cmp	r2, #0
 8012402:	d1e8      	bne.n	80123d6 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012404:	882a      	ldrh	r2, [r5, #0]
        pData += 2;
 8012406:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012408:	05d2      	lsls	r2, r2, #23
 801240a:	0dd2      	lsrs	r2, r2, #23
 801240c:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 801240e:	5ba2      	ldrh	r2, [r4, r6]
 8012410:	2a00      	cmp	r2, #0
 8012412:	d1e6      	bne.n	80123e2 <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8012414:	003b      	movs	r3, r7
 8012416:	2140      	movs	r1, #64	; 0x40
 8012418:	0020      	movs	r0, r4
 801241a:	f7ff ff69 	bl	80122f0 <UART_WaitOnFlagUntilTimeout>
 801241e:	2800      	cmp	r0, #0
 8012420:	d10e      	bne.n	8012440 <HAL_UART_Transmit+0xb8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012422:	2369      	movs	r3, #105	; 0x69
 8012424:	5ce2      	ldrb	r2, [r4, r3]
 8012426:	2a32      	cmp	r2, #50	; 0x32
 8012428:	d00e      	beq.n	8012448 <HAL_UART_Transmit+0xc0>
      huart->State = HAL_UART_STATE_READY;
 801242a:	2201      	movs	r2, #1
 801242c:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 801242e:	2368      	movs	r3, #104	; 0x68
 8012430:	2200      	movs	r2, #0
 8012432:	54e2      	strb	r2, [r4, r3]
}
 8012434:	bc04      	pop	{r2}
 8012436:	4690      	mov	r8, r2
 8012438:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801243a:	3110      	adds	r1, #16
 801243c:	54e1      	strb	r1, [r4, r3]
 801243e:	e7c3      	b.n	80123c8 <HAL_UART_Transmit+0x40>
        return HAL_TIMEOUT;
 8012440:	2003      	movs	r0, #3
 8012442:	e7f7      	b.n	8012434 <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 8012444:	2002      	movs	r0, #2
 8012446:	e7f5      	b.n	8012434 <HAL_UART_Transmit+0xac>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012448:	3a10      	subs	r2, #16
 801244a:	54e2      	strb	r2, [r4, r3]
 801244c:	e7ef      	b.n	801242e <HAL_UART_Transmit+0xa6>
 801244e:	46c0      	nop			; (mov r8, r8)

08012450 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012450:	2300      	movs	r3, #0
{
 8012452:	b510      	push	{r4, lr}
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012454:	4a1a      	ldr	r2, [pc, #104]	; (80124c0 <UART_CheckIdleState+0x70>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012456:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012458:	6803      	ldr	r3, [r0, #0]
{
 801245a:	0004      	movs	r4, r0
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 801245c:	4293      	cmp	r3, r2
 801245e:	d00d      	beq.n	801247c <UART_CheckIdleState+0x2c>
 8012460:	4a18      	ldr	r2, [pc, #96]	; (80124c4 <UART_CheckIdleState+0x74>)
 8012462:	4293      	cmp	r3, r2
 8012464:	d00a      	beq.n	801247c <UART_CheckIdleState+0x2c>
 8012466:	4a18      	ldr	r2, [pc, #96]	; (80124c8 <UART_CheckIdleState+0x78>)
 8012468:	4293      	cmp	r3, r2
 801246a:	d007      	beq.n	801247c <UART_CheckIdleState+0x2c>
  huart->State= HAL_UART_STATE_READY;
 801246c:	2369      	movs	r3, #105	; 0x69
 801246e:	2201      	movs	r2, #1
 8012470:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8012472:	2200      	movs	r2, #0
  return HAL_OK;
 8012474:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8012476:	3b01      	subs	r3, #1
 8012478:	54e2      	strb	r2, [r4, r3]
}
 801247a:	bd10      	pop	{r4, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	0712      	lsls	r2, r2, #28
 8012480:	d40e      	bmi.n	80124a0 <UART_CheckIdleState+0x50>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	075b      	lsls	r3, r3, #29
 8012486:	d5f1      	bpl.n	801246c <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012488:	23fa      	movs	r3, #250	; 0xfa
 801248a:	2180      	movs	r1, #128	; 0x80
 801248c:	009b      	lsls	r3, r3, #2
 801248e:	2200      	movs	r2, #0
 8012490:	03c9      	lsls	r1, r1, #15
 8012492:	0020      	movs	r0, r4
 8012494:	f7ff ff2c 	bl	80122f0 <UART_WaitOnFlagUntilTimeout>
 8012498:	2800      	cmp	r0, #0
 801249a:	d0e7      	beq.n	801246c <UART_CheckIdleState+0x1c>
        return HAL_TIMEOUT;
 801249c:	2003      	movs	r0, #3
 801249e:	e7ec      	b.n	801247a <UART_CheckIdleState+0x2a>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80124a0:	23fa      	movs	r3, #250	; 0xfa
 80124a2:	2180      	movs	r1, #128	; 0x80
 80124a4:	009b      	lsls	r3, r3, #2
 80124a6:	2200      	movs	r2, #0
 80124a8:	0389      	lsls	r1, r1, #14
 80124aa:	0020      	movs	r0, r4
 80124ac:	f7ff ff20 	bl	80122f0 <UART_WaitOnFlagUntilTimeout>
 80124b0:	2800      	cmp	r0, #0
 80124b2:	d1f3      	bne.n	801249c <UART_CheckIdleState+0x4c>
 80124b4:	6823      	ldr	r3, [r4, #0]
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	075b      	lsls	r3, r3, #29
 80124ba:	d5d7      	bpl.n	801246c <UART_CheckIdleState+0x1c>
 80124bc:	e7e4      	b.n	8012488 <UART_CheckIdleState+0x38>
 80124be:	46c0      	nop			; (mov r8, r8)
 80124c0:	40013800 	.word	0x40013800
 80124c4:	40004400 	.word	0x40004400
 80124c8:	40004800 	.word	0x40004800

080124cc <HAL_UART_Init>:
{
 80124cc:	b510      	push	{r4, lr}
 80124ce:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80124d0:	d02a      	beq.n	8012528 <HAL_UART_Init+0x5c>
  if(huart->State == HAL_UART_STATE_RESET)
 80124d2:	2369      	movs	r3, #105	; 0x69
 80124d4:	5cc3      	ldrb	r3, [r0, r3]
 80124d6:	b2db      	uxtb	r3, r3
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d020      	beq.n	801251e <HAL_UART_Init+0x52>
  huart->State = HAL_UART_STATE_BUSY;
 80124dc:	2369      	movs	r3, #105	; 0x69
 80124de:	2202      	movs	r2, #2
  __HAL_UART_DISABLE(huart);
 80124e0:	2101      	movs	r1, #1
  huart->State = HAL_UART_STATE_BUSY;
 80124e2:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80124e4:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80124e6:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80124e8:	6813      	ldr	r3, [r2, #0]
 80124ea:	438b      	bics	r3, r1
 80124ec:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80124ee:	f7ff fdab 	bl	8012048 <UART_SetConfig>
 80124f2:	2801      	cmp	r0, #1
 80124f4:	d018      	beq.n	8012528 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80124f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d117      	bne.n	801252c <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80124fc:	6823      	ldr	r3, [r4, #0]
 80124fe:	490d      	ldr	r1, [pc, #52]	; (8012534 <HAL_UART_Init+0x68>)
 8012500:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8012502:	0020      	movs	r0, r4
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012504:	400a      	ands	r2, r1
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8012506:	212a      	movs	r1, #42	; 0x2a
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012508:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 801250a:	689a      	ldr	r2, [r3, #8]
 801250c:	438a      	bics	r2, r1
 801250e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8012510:	681a      	ldr	r2, [r3, #0]
 8012512:	3929      	subs	r1, #41	; 0x29
 8012514:	430a      	orrs	r2, r1
 8012516:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8012518:	f7ff ff9a 	bl	8012450 <UART_CheckIdleState>
}
 801251c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 801251e:	2268      	movs	r2, #104	; 0x68
 8012520:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8012522:	f7fa fe15 	bl	800d150 <HAL_UART_MspInit>
 8012526:	e7d9      	b.n	80124dc <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8012528:	2001      	movs	r0, #1
 801252a:	e7f7      	b.n	801251c <HAL_UART_Init+0x50>
    UART_AdvFeatureConfig(huart);
 801252c:	0020      	movs	r0, r4
 801252e:	f7ff fe77 	bl	8012220 <UART_AdvFeatureConfig>
 8012532:	e7e3      	b.n	80124fc <HAL_UART_Init+0x30>
 8012534:	ffffb7ff 	.word	0xffffb7ff

08012538 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012538:	2269      	movs	r2, #105	; 0x69
{
 801253a:	b530      	push	{r4, r5, lr}
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801253c:	5c81      	ldrb	r1, [r0, r2]
{
 801253e:	0003      	movs	r3, r0
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012540:	2912      	cmp	r1, #18
 8012542:	d003      	beq.n	801254c <UART_Transmit_IT+0x14>
 8012544:	5c82      	ldrb	r2, [r0, r2]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8012546:	2002      	movs	r0, #2
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012548:	2a32      	cmp	r2, #50	; 0x32
 801254a:	d112      	bne.n	8012572 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 801254c:	2252      	movs	r2, #82	; 0x52
 801254e:	5a9a      	ldrh	r2, [r3, r2]
 8012550:	6819      	ldr	r1, [r3, #0]
 8012552:	2a00      	cmp	r2, #0
 8012554:	d00e      	beq.n	8012574 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012556:	2480      	movs	r4, #128	; 0x80
 8012558:	689d      	ldr	r5, [r3, #8]
 801255a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801255c:	0164      	lsls	r4, r4, #5
 801255e:	42a5      	cmp	r5, r4
 8012560:	d012      	beq.n	8012588 <UART_Transmit_IT+0x50>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8012562:	1c44      	adds	r4, r0, #1
 8012564:	64dc      	str	r4, [r3, #76]	; 0x4c
 8012566:	7800      	ldrb	r0, [r0, #0]
 8012568:	8508      	strh	r0, [r1, #40]	; 0x28
      huart->TxXferCount--;
 801256a:	2152      	movs	r1, #82	; 0x52
      return HAL_OK;
 801256c:	2000      	movs	r0, #0
      huart->TxXferCount--;
 801256e:	3a01      	subs	r2, #1
 8012570:	525a      	strh	r2, [r3, r1]
  }
}
 8012572:	bd30      	pop	{r4, r5, pc}
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012574:	680b      	ldr	r3, [r1, #0]
 8012576:	3280      	adds	r2, #128	; 0x80
 8012578:	4393      	bics	r3, r2
 801257a:	600b      	str	r3, [r1, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801257c:	680b      	ldr	r3, [r1, #0]
 801257e:	3a40      	subs	r2, #64	; 0x40
 8012580:	4313      	orrs	r3, r2
 8012582:	600b      	str	r3, [r1, #0]
      return HAL_OK;
 8012584:	2000      	movs	r0, #0
 8012586:	e7f4      	b.n	8012572 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012588:	691c      	ldr	r4, [r3, #16]
 801258a:	2c00      	cmp	r4, #0
 801258c:	d1e9      	bne.n	8012562 <UART_Transmit_IT+0x2a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 801258e:	8804      	ldrh	r4, [r0, #0]
        huart->pTxBuffPtr += 2;
 8012590:	3002      	adds	r0, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012592:	05e4      	lsls	r4, r4, #23
 8012594:	0de4      	lsrs	r4, r4, #23
 8012596:	850c      	strh	r4, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8012598:	64d8      	str	r0, [r3, #76]	; 0x4c
 801259a:	e7e6      	b.n	801256a <UART_Transmit_IT+0x32>

0801259c <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801259c:	2140      	movs	r1, #64	; 0x40
 801259e:	6803      	ldr	r3, [r0, #0]
{
 80125a0:	b510      	push	{r4, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80125a2:	681a      	ldr	r2, [r3, #0]
 80125a4:	438a      	bics	r2, r1
 80125a6:	601a      	str	r2, [r3, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80125a8:	2269      	movs	r2, #105	; 0x69
 80125aa:	5c81      	ldrb	r1, [r0, r2]
 80125ac:	2932      	cmp	r1, #50	; 0x32
 80125ae:	d008      	beq.n	80125c2 <UART_EndTransmit_IT+0x26>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80125b0:	2401      	movs	r4, #1
 80125b2:	6899      	ldr	r1, [r3, #8]
 80125b4:	43a1      	bics	r1, r4
 80125b6:	6099      	str	r1, [r3, #8]

    huart->State = HAL_UART_STATE_READY;
 80125b8:	5484      	strb	r4, [r0, r2]
  }

  HAL_UART_TxCpltCallback(huart);
 80125ba:	f7fa faeb 	bl	800cb94 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80125be:	2000      	movs	r0, #0
 80125c0:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 80125c2:	2322      	movs	r3, #34	; 0x22
 80125c4:	5483      	strb	r3, [r0, r2]
 80125c6:	e7f8      	b.n	80125ba <UART_EndTransmit_IT+0x1e>

080125c8 <UART_Receive_IT>:
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80125c8:	2369      	movs	r3, #105	; 0x69
{
 80125ca:	b570      	push	{r4, r5, r6, lr}
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80125cc:	5cc2      	ldrb	r2, [r0, r3]
 80125ce:	2a22      	cmp	r2, #34	; 0x22
 80125d0:	d003      	beq.n	80125da <UART_Receive_IT+0x12>
 80125d2:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80125d4:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80125d6:	2b32      	cmp	r3, #50	; 0x32
 80125d8:	d12b      	bne.n	8012632 <UART_Receive_IT+0x6a>
  uint16_t uhMask = huart->Mask;
 80125da:	235c      	movs	r3, #92	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80125dc:	2180      	movs	r1, #128	; 0x80
 80125de:	6885      	ldr	r5, [r0, #8]
  uint16_t uhMask = huart->Mask;
 80125e0:	5ac3      	ldrh	r3, [r0, r3]
 80125e2:	6804      	ldr	r4, [r0, #0]
 80125e4:	6d42      	ldr	r2, [r0, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80125e6:	0149      	lsls	r1, r1, #5
 80125e8:	428d      	cmp	r5, r1
 80125ea:	d024      	beq.n	8012636 <UART_Receive_IT+0x6e>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80125ec:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80125ee:	1c54      	adds	r4, r2, #1
 80125f0:	400b      	ands	r3, r1
 80125f2:	6544      	str	r4, [r0, #84]	; 0x54
 80125f4:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 80125f6:	225a      	movs	r2, #90	; 0x5a
 80125f8:	5a83      	ldrh	r3, [r0, r2]
 80125fa:	3b01      	subs	r3, #1
 80125fc:	b29b      	uxth	r3, r3
 80125fe:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 8012600:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8012602:	2b00      	cmp	r3, #0
 8012604:	d115      	bne.n	8012632 <UART_Receive_IT+0x6a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012606:	2120      	movs	r1, #32
 8012608:	6803      	ldr	r3, [r0, #0]
 801260a:	681a      	ldr	r2, [r3, #0]
 801260c:	438a      	bics	r2, r1
 801260e:	601a      	str	r2, [r3, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012610:	2269      	movs	r2, #105	; 0x69
 8012612:	5c81      	ldrb	r1, [r0, r2]
 8012614:	2932      	cmp	r1, #50	; 0x32
 8012616:	d017      	beq.n	8012648 <UART_Receive_IT+0x80>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012618:	6819      	ldr	r1, [r3, #0]
 801261a:	4c0d      	ldr	r4, [pc, #52]	; (8012650 <UART_Receive_IT+0x88>)
 801261c:	4021      	ands	r1, r4
 801261e:	6019      	str	r1, [r3, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012620:	6899      	ldr	r1, [r3, #8]
 8012622:	3403      	adds	r4, #3
 8012624:	34ff      	adds	r4, #255	; 0xff
 8012626:	43a1      	bics	r1, r4
 8012628:	6099      	str	r1, [r3, #8]
        huart->State = HAL_UART_STATE_READY;
 801262a:	5484      	strb	r4, [r0, r2]
      HAL_UART_RxCpltCallback(huart);
 801262c:	f7fa faee 	bl	800cc0c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8012630:	2200      	movs	r2, #0
  }
}
 8012632:	0010      	movs	r0, r2
 8012634:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012636:	6901      	ldr	r1, [r0, #16]
 8012638:	2900      	cmp	r1, #0
 801263a:	d1d7      	bne.n	80125ec <UART_Receive_IT+0x24>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 801263c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801263e:	400b      	ands	r3, r1
 8012640:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8012642:	3202      	adds	r2, #2
 8012644:	6542      	str	r2, [r0, #84]	; 0x54
 8012646:	e7d6      	b.n	80125f6 <UART_Receive_IT+0x2e>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8012648:	2312      	movs	r3, #18
 801264a:	5483      	strb	r3, [r0, r2]
 801264c:	e7ee      	b.n	801262c <UART_Receive_IT+0x64>
 801264e:	46c0      	nop			; (mov r8, r8)
 8012650:	fffffeff 	.word	0xfffffeff

08012654 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8012654:	4770      	bx	lr
 8012656:	46c0      	nop			; (mov r8, r8)

08012658 <HAL_UART_IRQHandler>:
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8012658:	2201      	movs	r2, #1
 801265a:	6803      	ldr	r3, [r0, #0]
{
 801265c:	b510      	push	{r4, lr}
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 801265e:	69d9      	ldr	r1, [r3, #28]
{
 8012660:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8012662:	420a      	tst	r2, r1
 8012664:	d002      	beq.n	801266c <HAL_UART_IRQHandler+0x14>
 8012666:	6819      	ldr	r1, [r3, #0]
 8012668:	05c9      	lsls	r1, r1, #23
 801266a:	d456      	bmi.n	801271a <HAL_UART_IRQHandler+0xc2>
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 801266c:	2202      	movs	r2, #2
 801266e:	69d9      	ldr	r1, [r3, #28]
 8012670:	420a      	tst	r2, r1
 8012672:	d003      	beq.n	801267c <HAL_UART_IRQHandler+0x24>
 8012674:	2101      	movs	r1, #1
 8012676:	6898      	ldr	r0, [r3, #8]
 8012678:	4201      	tst	r1, r0
 801267a:	d146      	bne.n	801270a <HAL_UART_IRQHandler+0xb2>
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 801267c:	2204      	movs	r2, #4
 801267e:	69d9      	ldr	r1, [r3, #28]
 8012680:	420a      	tst	r2, r1
 8012682:	d003      	beq.n	801268c <HAL_UART_IRQHandler+0x34>
 8012684:	2101      	movs	r1, #1
 8012686:	6898      	ldr	r0, [r3, #8]
 8012688:	4201      	tst	r1, r0
 801268a:	d136      	bne.n	80126fa <HAL_UART_IRQHandler+0xa2>
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 801268c:	2208      	movs	r2, #8
 801268e:	69d9      	ldr	r1, [r3, #28]
 8012690:	420a      	tst	r2, r1
 8012692:	d003      	beq.n	801269c <HAL_UART_IRQHandler+0x44>
 8012694:	2101      	movs	r1, #1
 8012696:	6898      	ldr	r0, [r3, #8]
 8012698:	4201      	tst	r1, r0
 801269a:	d120      	bne.n	80126de <HAL_UART_IRQHandler+0x86>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 801269c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801269e:	2a00      	cmp	r2, #0
 80126a0:	d126      	bne.n	80126f0 <HAL_UART_IRQHandler+0x98>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80126a2:	2280      	movs	r2, #128	; 0x80
 80126a4:	69d9      	ldr	r1, [r3, #28]
 80126a6:	0352      	lsls	r2, r2, #13
 80126a8:	4211      	tst	r1, r2
 80126aa:	d002      	beq.n	80126b2 <HAL_UART_IRQHandler+0x5a>
 80126ac:	6899      	ldr	r1, [r3, #8]
 80126ae:	0249      	lsls	r1, r1, #9
 80126b0:	d43e      	bmi.n	8012730 <HAL_UART_IRQHandler+0xd8>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 80126b2:	2220      	movs	r2, #32
 80126b4:	69d9      	ldr	r1, [r3, #28]
 80126b6:	420a      	tst	r2, r1
 80126b8:	d002      	beq.n	80126c0 <HAL_UART_IRQHandler+0x68>
 80126ba:	6819      	ldr	r1, [r3, #0]
 80126bc:	420a      	tst	r2, r1
 80126be:	d140      	bne.n	8012742 <HAL_UART_IRQHandler+0xea>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 80126c0:	2280      	movs	r2, #128	; 0x80
 80126c2:	69d9      	ldr	r1, [r3, #28]
 80126c4:	420a      	tst	r2, r1
 80126c6:	d002      	beq.n	80126ce <HAL_UART_IRQHandler+0x76>
 80126c8:	6819      	ldr	r1, [r3, #0]
 80126ca:	420a      	tst	r2, r1
 80126cc:	d142      	bne.n	8012754 <HAL_UART_IRQHandler+0xfc>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 80126ce:	2240      	movs	r2, #64	; 0x40
 80126d0:	69d9      	ldr	r1, [r3, #28]
 80126d2:	420a      	tst	r2, r1
 80126d4:	d002      	beq.n	80126dc <HAL_UART_IRQHandler+0x84>
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	421a      	tst	r2, r3
 80126da:	d125      	bne.n	8012728 <HAL_UART_IRQHandler+0xd0>
}
 80126dc:	bd10      	pop	{r4, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80126de:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80126e0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80126e2:	4302      	orrs	r2, r0
 80126e4:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80126e6:	2269      	movs	r2, #105	; 0x69
 80126e8:	54a1      	strb	r1, [r4, r2]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80126ea:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80126ec:	2a00      	cmp	r2, #0
 80126ee:	d0d8      	beq.n	80126a2 <HAL_UART_IRQHandler+0x4a>
    HAL_UART_ErrorCallback(huart);
 80126f0:	0020      	movs	r0, r4
 80126f2:	f7fa fa67 	bl	800cbc4 <HAL_UART_ErrorCallback>
 80126f6:	6823      	ldr	r3, [r4, #0]
 80126f8:	e7d3      	b.n	80126a2 <HAL_UART_IRQHandler+0x4a>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80126fa:	2002      	movs	r0, #2
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80126fc:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80126fe:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8012700:	4302      	orrs	r2, r0
 8012702:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012704:	2269      	movs	r2, #105	; 0x69
 8012706:	54a1      	strb	r1, [r4, r2]
 8012708:	e7c0      	b.n	801268c <HAL_UART_IRQHandler+0x34>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 801270a:	2004      	movs	r0, #4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 801270c:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 801270e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8012710:	4302      	orrs	r2, r0
 8012712:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012714:	2269      	movs	r2, #105	; 0x69
 8012716:	54a1      	strb	r1, [r4, r2]
 8012718:	e7b0      	b.n	801267c <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 801271a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 801271c:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 801271e:	4311      	orrs	r1, r2
 8012720:	66c1      	str	r1, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012722:	2169      	movs	r1, #105	; 0x69
 8012724:	5442      	strb	r2, [r0, r1]
 8012726:	e7a1      	b.n	801266c <HAL_UART_IRQHandler+0x14>
    UART_EndTransmit_IT(huart);
 8012728:	0020      	movs	r0, r4
 801272a:	f7ff ff37 	bl	801259c <UART_EndTransmit_IT>
}
 801272e:	e7d5      	b.n	80126dc <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8012730:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8012732:	2369      	movs	r3, #105	; 0x69
 8012734:	2201      	movs	r2, #1
    HAL_UARTEx_WakeupCallback(huart);
 8012736:	0020      	movs	r0, r4
    huart->State = HAL_UART_STATE_READY;
 8012738:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 801273a:	f7ff ff8b 	bl	8012654 <HAL_UARTEx_WakeupCallback>
 801273e:	6823      	ldr	r3, [r4, #0]
 8012740:	e7b7      	b.n	80126b2 <HAL_UART_IRQHandler+0x5a>
    UART_Receive_IT(huart);
 8012742:	0020      	movs	r0, r4
 8012744:	f7ff ff40 	bl	80125c8 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012748:	2108      	movs	r1, #8
 801274a:	6823      	ldr	r3, [r4, #0]
 801274c:	699a      	ldr	r2, [r3, #24]
 801274e:	430a      	orrs	r2, r1
 8012750:	619a      	str	r2, [r3, #24]
 8012752:	e7b5      	b.n	80126c0 <HAL_UART_IRQHandler+0x68>
    UART_Transmit_IT(huart);
 8012754:	0020      	movs	r0, r4
 8012756:	f7ff feef 	bl	8012538 <UART_Transmit_IT>
 801275a:	6823      	ldr	r3, [r4, #0]
 801275c:	e7b7      	b.n	80126ce <HAL_UART_IRQHandler+0x76>
 801275e:	46c0      	nop			; (mov r8, r8)

08012760 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8012760:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8012762:	f7f1 ffc5 	bl	80046f0 <Module_Init>
 8012766:	e7fe      	b.n	8012766 <main+0x6>

08012768 <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8012768:	e7fe      	b.n	8012768 <UserTask>
 801276a:	46c0      	nop			; (mov r8, r8)

0801276c <atof>:
 801276c:	b510      	push	{r4, lr}
 801276e:	2100      	movs	r1, #0
 8012770:	f001 fb74 	bl	8013e5c <strtod>
 8012774:	bd10      	pop	{r4, pc}

08012776 <atoi>:
 8012776:	b510      	push	{r4, lr}
 8012778:	220a      	movs	r2, #10
 801277a:	2100      	movs	r1, #0
 801277c:	f001 fc3a 	bl	8013ff4 <strtol>
 8012780:	bd10      	pop	{r4, pc}

08012782 <atol>:
 8012782:	b510      	push	{r4, lr}
 8012784:	220a      	movs	r2, #10
 8012786:	2100      	movs	r1, #0
 8012788:	f001 fc34 	bl	8013ff4 <strtol>
 801278c:	bd10      	pop	{r4, pc}
	...

08012790 <calloc>:
 8012790:	b510      	push	{r4, lr}
 8012792:	4b03      	ldr	r3, [pc, #12]	; (80127a0 <calloc+0x10>)
 8012794:	000a      	movs	r2, r1
 8012796:	0001      	movs	r1, r0
 8012798:	6818      	ldr	r0, [r3, #0]
 801279a:	f000 f803 	bl	80127a4 <_calloc_r>
 801279e:	bd10      	pop	{r4, pc}
 80127a0:	200000c8 	.word	0x200000c8

080127a4 <_calloc_r>:
 80127a4:	b510      	push	{r4, lr}
 80127a6:	4351      	muls	r1, r2
 80127a8:	f000 f872 	bl	8012890 <_malloc_r>
 80127ac:	1e04      	subs	r4, r0, #0
 80127ae:	d01a      	beq.n	80127e6 <_calloc_r+0x42>
 80127b0:	0003      	movs	r3, r0
 80127b2:	3b08      	subs	r3, #8
 80127b4:	685a      	ldr	r2, [r3, #4]
 80127b6:	2303      	movs	r3, #3
 80127b8:	439a      	bics	r2, r3
 80127ba:	3a04      	subs	r2, #4
 80127bc:	2a24      	cmp	r2, #36	; 0x24
 80127be:	d819      	bhi.n	80127f4 <_calloc_r+0x50>
 80127c0:	0003      	movs	r3, r0
 80127c2:	2a13      	cmp	r2, #19
 80127c4:	d90b      	bls.n	80127de <_calloc_r+0x3a>
 80127c6:	2100      	movs	r1, #0
 80127c8:	3308      	adds	r3, #8
 80127ca:	6001      	str	r1, [r0, #0]
 80127cc:	6041      	str	r1, [r0, #4]
 80127ce:	2a1b      	cmp	r2, #27
 80127d0:	d905      	bls.n	80127de <_calloc_r+0x3a>
 80127d2:	6081      	str	r1, [r0, #8]
 80127d4:	60c1      	str	r1, [r0, #12]
 80127d6:	2a24      	cmp	r2, #36	; 0x24
 80127d8:	d007      	beq.n	80127ea <_calloc_r+0x46>
 80127da:	0003      	movs	r3, r0
 80127dc:	3310      	adds	r3, #16
 80127de:	2200      	movs	r2, #0
 80127e0:	601a      	str	r2, [r3, #0]
 80127e2:	605a      	str	r2, [r3, #4]
 80127e4:	609a      	str	r2, [r3, #8]
 80127e6:	0020      	movs	r0, r4
 80127e8:	bd10      	pop	{r4, pc}
 80127ea:	0003      	movs	r3, r0
 80127ec:	6101      	str	r1, [r0, #16]
 80127ee:	3318      	adds	r3, #24
 80127f0:	6141      	str	r1, [r0, #20]
 80127f2:	e7f4      	b.n	80127de <_calloc_r+0x3a>
 80127f4:	2100      	movs	r1, #0
 80127f6:	f000 fa8d 	bl	8012d14 <memset>
 80127fa:	e7f4      	b.n	80127e6 <_calloc_r+0x42>

080127fc <__libc_init_array>:
 80127fc:	b570      	push	{r4, r5, r6, lr}
 80127fe:	2600      	movs	r6, #0
 8012800:	4d0c      	ldr	r5, [pc, #48]	; (8012834 <__libc_init_array+0x38>)
 8012802:	4c0d      	ldr	r4, [pc, #52]	; (8012838 <__libc_init_array+0x3c>)
 8012804:	1b64      	subs	r4, r4, r5
 8012806:	10a4      	asrs	r4, r4, #2
 8012808:	42a6      	cmp	r6, r4
 801280a:	d109      	bne.n	8012820 <__libc_init_array+0x24>
 801280c:	2600      	movs	r6, #0
 801280e:	f004 fe41 	bl	8017494 <_init>
 8012812:	4d0a      	ldr	r5, [pc, #40]	; (801283c <__libc_init_array+0x40>)
 8012814:	4c0a      	ldr	r4, [pc, #40]	; (8012840 <__libc_init_array+0x44>)
 8012816:	1b64      	subs	r4, r4, r5
 8012818:	10a4      	asrs	r4, r4, #2
 801281a:	42a6      	cmp	r6, r4
 801281c:	d105      	bne.n	801282a <__libc_init_array+0x2e>
 801281e:	bd70      	pop	{r4, r5, r6, pc}
 8012820:	00b3      	lsls	r3, r6, #2
 8012822:	58eb      	ldr	r3, [r5, r3]
 8012824:	4798      	blx	r3
 8012826:	3601      	adds	r6, #1
 8012828:	e7ee      	b.n	8012808 <__libc_init_array+0xc>
 801282a:	00b3      	lsls	r3, r6, #2
 801282c:	58eb      	ldr	r3, [r5, r3]
 801282e:	4798      	blx	r3
 8012830:	3601      	adds	r6, #1
 8012832:	e7f2      	b.n	801281a <__libc_init_array+0x1e>
 8012834:	0801a664 	.word	0x0801a664
 8012838:	0801a664 	.word	0x0801a664
 801283c:	0801a664 	.word	0x0801a664
 8012840:	0801a66c 	.word	0x0801a66c

08012844 <__locale_ctype_ptr_l>:
 8012844:	30ec      	adds	r0, #236	; 0xec
 8012846:	6800      	ldr	r0, [r0, #0]
 8012848:	4770      	bx	lr
	...

0801284c <__locale_ctype_ptr>:
 801284c:	4b04      	ldr	r3, [pc, #16]	; (8012860 <__locale_ctype_ptr+0x14>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012852:	2b00      	cmp	r3, #0
 8012854:	d100      	bne.n	8012858 <__locale_ctype_ptr+0xc>
 8012856:	4b03      	ldr	r3, [pc, #12]	; (8012864 <__locale_ctype_ptr+0x18>)
 8012858:	33ec      	adds	r3, #236	; 0xec
 801285a:	6818      	ldr	r0, [r3, #0]
 801285c:	4770      	bx	lr
 801285e:	46c0      	nop			; (mov r8, r8)
 8012860:	200000c8 	.word	0x200000c8
 8012864:	200004f8 	.word	0x200004f8

08012868 <malloc>:
 8012868:	b510      	push	{r4, lr}
 801286a:	4b03      	ldr	r3, [pc, #12]	; (8012878 <malloc+0x10>)
 801286c:	0001      	movs	r1, r0
 801286e:	6818      	ldr	r0, [r3, #0]
 8012870:	f000 f80e 	bl	8012890 <_malloc_r>
 8012874:	bd10      	pop	{r4, pc}
 8012876:	46c0      	nop			; (mov r8, r8)
 8012878:	200000c8 	.word	0x200000c8

0801287c <free>:
 801287c:	b510      	push	{r4, lr}
 801287e:	4b03      	ldr	r3, [pc, #12]	; (801288c <free+0x10>)
 8012880:	0001      	movs	r1, r0
 8012882:	6818      	ldr	r0, [r3, #0]
 8012884:	f003 fd10 	bl	80162a8 <_free_r>
 8012888:	bd10      	pop	{r4, pc}
 801288a:	46c0      	nop			; (mov r8, r8)
 801288c:	200000c8 	.word	0x200000c8

08012890 <_malloc_r>:
 8012890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012892:	000d      	movs	r5, r1
 8012894:	b085      	sub	sp, #20
 8012896:	350b      	adds	r5, #11
 8012898:	9001      	str	r0, [sp, #4]
 801289a:	2d16      	cmp	r5, #22
 801289c:	d908      	bls.n	80128b0 <_malloc_r+0x20>
 801289e:	2307      	movs	r3, #7
 80128a0:	439d      	bics	r5, r3
 80128a2:	d506      	bpl.n	80128b2 <_malloc_r+0x22>
 80128a4:	230c      	movs	r3, #12
 80128a6:	9a01      	ldr	r2, [sp, #4]
 80128a8:	6013      	str	r3, [r2, #0]
 80128aa:	2000      	movs	r0, #0
 80128ac:	b005      	add	sp, #20
 80128ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128b0:	2510      	movs	r5, #16
 80128b2:	428d      	cmp	r5, r1
 80128b4:	d3f6      	bcc.n	80128a4 <_malloc_r+0x14>
 80128b6:	9801      	ldr	r0, [sp, #4]
 80128b8:	f000 fa34 	bl	8012d24 <__malloc_lock>
 80128bc:	23f8      	movs	r3, #248	; 0xf8
 80128be:	33ff      	adds	r3, #255	; 0xff
 80128c0:	4ac4      	ldr	r2, [pc, #784]	; (8012bd4 <_malloc_r+0x344>)
 80128c2:	429d      	cmp	r5, r3
 80128c4:	d820      	bhi.n	8012908 <_malloc_r+0x78>
 80128c6:	0029      	movs	r1, r5
 80128c8:	3108      	adds	r1, #8
 80128ca:	1851      	adds	r1, r2, r1
 80128cc:	0008      	movs	r0, r1
 80128ce:	684c      	ldr	r4, [r1, #4]
 80128d0:	3808      	subs	r0, #8
 80128d2:	08eb      	lsrs	r3, r5, #3
 80128d4:	4284      	cmp	r4, r0
 80128d6:	d104      	bne.n	80128e2 <_malloc_r+0x52>
 80128d8:	68cc      	ldr	r4, [r1, #12]
 80128da:	3302      	adds	r3, #2
 80128dc:	469c      	mov	ip, r3
 80128de:	42a1      	cmp	r1, r4
 80128e0:	d02a      	beq.n	8012938 <_malloc_r+0xa8>
 80128e2:	2303      	movs	r3, #3
 80128e4:	6862      	ldr	r2, [r4, #4]
 80128e6:	68a1      	ldr	r1, [r4, #8]
 80128e8:	439a      	bics	r2, r3
 80128ea:	0013      	movs	r3, r2
 80128ec:	68e2      	ldr	r2, [r4, #12]
 80128ee:	18e3      	adds	r3, r4, r3
 80128f0:	60ca      	str	r2, [r1, #12]
 80128f2:	6091      	str	r1, [r2, #8]
 80128f4:	2201      	movs	r2, #1
 80128f6:	6859      	ldr	r1, [r3, #4]
 80128f8:	430a      	orrs	r2, r1
 80128fa:	605a      	str	r2, [r3, #4]
 80128fc:	9801      	ldr	r0, [sp, #4]
 80128fe:	f000 fa19 	bl	8012d34 <__malloc_unlock>
 8012902:	0020      	movs	r0, r4
 8012904:	3008      	adds	r0, #8
 8012906:	e7d1      	b.n	80128ac <_malloc_r+0x1c>
 8012908:	0a69      	lsrs	r1, r5, #9
 801290a:	233f      	movs	r3, #63	; 0x3f
 801290c:	2900      	cmp	r1, #0
 801290e:	d003      	beq.n	8012918 <_malloc_r+0x88>
 8012910:	2904      	cmp	r1, #4
 8012912:	d828      	bhi.n	8012966 <_malloc_r+0xd6>
 8012914:	09ab      	lsrs	r3, r5, #6
 8012916:	3338      	adds	r3, #56	; 0x38
 8012918:	2103      	movs	r1, #3
 801291a:	468c      	mov	ip, r1
 801291c:	00d8      	lsls	r0, r3, #3
 801291e:	1880      	adds	r0, r0, r2
 8012920:	68c4      	ldr	r4, [r0, #12]
 8012922:	4284      	cmp	r4, r0
 8012924:	d006      	beq.n	8012934 <_malloc_r+0xa4>
 8012926:	4666      	mov	r6, ip
 8012928:	6861      	ldr	r1, [r4, #4]
 801292a:	43b1      	bics	r1, r6
 801292c:	1b4f      	subs	r7, r1, r5
 801292e:	2f0f      	cmp	r7, #15
 8012930:	dd31      	ble.n	8012996 <_malloc_r+0x106>
 8012932:	3b01      	subs	r3, #1
 8012934:	3301      	adds	r3, #1
 8012936:	469c      	mov	ip, r3
 8012938:	6914      	ldr	r4, [r2, #16]
 801293a:	49a7      	ldr	r1, [pc, #668]	; (8012bd8 <_malloc_r+0x348>)
 801293c:	428c      	cmp	r4, r1
 801293e:	d055      	beq.n	80129ec <_malloc_r+0x15c>
 8012940:	2303      	movs	r3, #3
 8012942:	6860      	ldr	r0, [r4, #4]
 8012944:	4398      	bics	r0, r3
 8012946:	0003      	movs	r3, r0
 8012948:	1b46      	subs	r6, r0, r5
 801294a:	2e0f      	cmp	r6, #15
 801294c:	dd31      	ble.n	80129b2 <_malloc_r+0x122>
 801294e:	2701      	movs	r7, #1
 8012950:	1960      	adds	r0, r4, r5
 8012952:	433d      	orrs	r5, r7
 8012954:	4337      	orrs	r7, r6
 8012956:	6065      	str	r5, [r4, #4]
 8012958:	6150      	str	r0, [r2, #20]
 801295a:	6110      	str	r0, [r2, #16]
 801295c:	60c1      	str	r1, [r0, #12]
 801295e:	6081      	str	r1, [r0, #8]
 8012960:	6047      	str	r7, [r0, #4]
 8012962:	50e6      	str	r6, [r4, r3]
 8012964:	e7ca      	b.n	80128fc <_malloc_r+0x6c>
 8012966:	2914      	cmp	r1, #20
 8012968:	d802      	bhi.n	8012970 <_malloc_r+0xe0>
 801296a:	000b      	movs	r3, r1
 801296c:	335b      	adds	r3, #91	; 0x5b
 801296e:	e7d3      	b.n	8012918 <_malloc_r+0x88>
 8012970:	2954      	cmp	r1, #84	; 0x54
 8012972:	d802      	bhi.n	801297a <_malloc_r+0xea>
 8012974:	0b2b      	lsrs	r3, r5, #12
 8012976:	336e      	adds	r3, #110	; 0x6e
 8012978:	e7ce      	b.n	8012918 <_malloc_r+0x88>
 801297a:	23aa      	movs	r3, #170	; 0xaa
 801297c:	005b      	lsls	r3, r3, #1
 801297e:	4299      	cmp	r1, r3
 8012980:	d802      	bhi.n	8012988 <_malloc_r+0xf8>
 8012982:	0beb      	lsrs	r3, r5, #15
 8012984:	3377      	adds	r3, #119	; 0x77
 8012986:	e7c7      	b.n	8012918 <_malloc_r+0x88>
 8012988:	4894      	ldr	r0, [pc, #592]	; (8012bdc <_malloc_r+0x34c>)
 801298a:	237e      	movs	r3, #126	; 0x7e
 801298c:	4281      	cmp	r1, r0
 801298e:	d8c3      	bhi.n	8012918 <_malloc_r+0x88>
 8012990:	0cab      	lsrs	r3, r5, #18
 8012992:	337c      	adds	r3, #124	; 0x7c
 8012994:	e7c0      	b.n	8012918 <_malloc_r+0x88>
 8012996:	68e6      	ldr	r6, [r4, #12]
 8012998:	2f00      	cmp	r7, #0
 801299a:	db08      	blt.n	80129ae <_malloc_r+0x11e>
 801299c:	68a3      	ldr	r3, [r4, #8]
 801299e:	1861      	adds	r1, r4, r1
 80129a0:	60de      	str	r6, [r3, #12]
 80129a2:	60b3      	str	r3, [r6, #8]
 80129a4:	2301      	movs	r3, #1
 80129a6:	684a      	ldr	r2, [r1, #4]
 80129a8:	4313      	orrs	r3, r2
 80129aa:	604b      	str	r3, [r1, #4]
 80129ac:	e7a6      	b.n	80128fc <_malloc_r+0x6c>
 80129ae:	0034      	movs	r4, r6
 80129b0:	e7b7      	b.n	8012922 <_malloc_r+0x92>
 80129b2:	6151      	str	r1, [r2, #20]
 80129b4:	6111      	str	r1, [r2, #16]
 80129b6:	2e00      	cmp	r6, #0
 80129b8:	db05      	blt.n	80129c6 <_malloc_r+0x136>
 80129ba:	2101      	movs	r1, #1
 80129bc:	1823      	adds	r3, r4, r0
 80129be:	685a      	ldr	r2, [r3, #4]
 80129c0:	4311      	orrs	r1, r2
 80129c2:	6059      	str	r1, [r3, #4]
 80129c4:	e79a      	b.n	80128fc <_malloc_r+0x6c>
 80129c6:	4986      	ldr	r1, [pc, #536]	; (8012be0 <_malloc_r+0x350>)
 80129c8:	6857      	ldr	r7, [r2, #4]
 80129ca:	4288      	cmp	r0, r1
 80129cc:	d900      	bls.n	80129d0 <_malloc_r+0x140>
 80129ce:	e090      	b.n	8012af2 <_malloc_r+0x262>
 80129d0:	08c3      	lsrs	r3, r0, #3
 80129d2:	39ff      	subs	r1, #255	; 0xff
 80129d4:	1098      	asrs	r0, r3, #2
 80129d6:	39ff      	subs	r1, #255	; 0xff
 80129d8:	4081      	lsls	r1, r0
 80129da:	00db      	lsls	r3, r3, #3
 80129dc:	4339      	orrs	r1, r7
 80129de:	6051      	str	r1, [r2, #4]
 80129e0:	189a      	adds	r2, r3, r2
 80129e2:	6893      	ldr	r3, [r2, #8]
 80129e4:	60e2      	str	r2, [r4, #12]
 80129e6:	60a3      	str	r3, [r4, #8]
 80129e8:	6094      	str	r4, [r2, #8]
 80129ea:	60dc      	str	r4, [r3, #12]
 80129ec:	4663      	mov	r3, ip
 80129ee:	2201      	movs	r2, #1
 80129f0:	4978      	ldr	r1, [pc, #480]	; (8012bd4 <_malloc_r+0x344>)
 80129f2:	109b      	asrs	r3, r3, #2
 80129f4:	6848      	ldr	r0, [r1, #4]
 80129f6:	409a      	lsls	r2, r3
 80129f8:	4290      	cmp	r0, r2
 80129fa:	d32d      	bcc.n	8012a58 <_malloc_r+0x1c8>
 80129fc:	4202      	tst	r2, r0
 80129fe:	d109      	bne.n	8012a14 <_malloc_r+0x184>
 8012a00:	2303      	movs	r3, #3
 8012a02:	4664      	mov	r4, ip
 8012a04:	439c      	bics	r4, r3
 8012a06:	0023      	movs	r3, r4
 8012a08:	3304      	adds	r3, #4
 8012a0a:	469c      	mov	ip, r3
 8012a0c:	0052      	lsls	r2, r2, #1
 8012a0e:	4202      	tst	r2, r0
 8012a10:	d100      	bne.n	8012a14 <_malloc_r+0x184>
 8012a12:	e0a4      	b.n	8012b5e <_malloc_r+0x2ce>
 8012a14:	4663      	mov	r3, ip
 8012a16:	00db      	lsls	r3, r3, #3
 8012a18:	18cb      	adds	r3, r1, r3
 8012a1a:	9303      	str	r3, [sp, #12]
 8012a1c:	001f      	movs	r7, r3
 8012a1e:	4663      	mov	r3, ip
 8012a20:	9302      	str	r3, [sp, #8]
 8012a22:	68fc      	ldr	r4, [r7, #12]
 8012a24:	42bc      	cmp	r4, r7
 8012a26:	d000      	beq.n	8012a2a <_malloc_r+0x19a>
 8012a28:	e09c      	b.n	8012b64 <_malloc_r+0x2d4>
 8012a2a:	2003      	movs	r0, #3
 8012a2c:	9b02      	ldr	r3, [sp, #8]
 8012a2e:	3708      	adds	r7, #8
 8012a30:	3301      	adds	r3, #1
 8012a32:	9302      	str	r3, [sp, #8]
 8012a34:	4203      	tst	r3, r0
 8012a36:	d1f4      	bne.n	8012a22 <_malloc_r+0x192>
 8012a38:	4663      	mov	r3, ip
 8012a3a:	2003      	movs	r0, #3
 8012a3c:	4203      	tst	r3, r0
 8012a3e:	d000      	beq.n	8012a42 <_malloc_r+0x1b2>
 8012a40:	e0b3      	b.n	8012baa <_malloc_r+0x31a>
 8012a42:	684b      	ldr	r3, [r1, #4]
 8012a44:	4393      	bics	r3, r2
 8012a46:	604b      	str	r3, [r1, #4]
 8012a48:	4b62      	ldr	r3, [pc, #392]	; (8012bd4 <_malloc_r+0x344>)
 8012a4a:	0052      	lsls	r2, r2, #1
 8012a4c:	685b      	ldr	r3, [r3, #4]
 8012a4e:	4293      	cmp	r3, r2
 8012a50:	d302      	bcc.n	8012a58 <_malloc_r+0x1c8>
 8012a52:	2a00      	cmp	r2, #0
 8012a54:	d000      	beq.n	8012a58 <_malloc_r+0x1c8>
 8012a56:	e0b9      	b.n	8012bcc <_malloc_r+0x33c>
 8012a58:	2303      	movs	r3, #3
 8012a5a:	688f      	ldr	r7, [r1, #8]
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	439a      	bics	r2, r3
 8012a60:	9202      	str	r2, [sp, #8]
 8012a62:	42aa      	cmp	r2, r5
 8012a64:	d303      	bcc.n	8012a6e <_malloc_r+0x1de>
 8012a66:	1b52      	subs	r2, r2, r5
 8012a68:	2a0f      	cmp	r2, #15
 8012a6a:	dd00      	ble.n	8012a6e <_malloc_r+0x1de>
 8012a6c:	e116      	b.n	8012c9c <_malloc_r+0x40c>
 8012a6e:	4b5d      	ldr	r3, [pc, #372]	; (8012be4 <_malloc_r+0x354>)
 8012a70:	2008      	movs	r0, #8
 8012a72:	681e      	ldr	r6, [r3, #0]
 8012a74:	f002 fd26 	bl	80154c4 <sysconf>
 8012a78:	4b5b      	ldr	r3, [pc, #364]	; (8012be8 <_malloc_r+0x358>)
 8012a7a:	3610      	adds	r6, #16
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	1976      	adds	r6, r6, r5
 8012a80:	9003      	str	r0, [sp, #12]
 8012a82:	3301      	adds	r3, #1
 8012a84:	d003      	beq.n	8012a8e <_malloc_r+0x1fe>
 8012a86:	3e01      	subs	r6, #1
 8012a88:	1836      	adds	r6, r6, r0
 8012a8a:	4243      	negs	r3, r0
 8012a8c:	401e      	ands	r6, r3
 8012a8e:	0031      	movs	r1, r6
 8012a90:	9801      	ldr	r0, [sp, #4]
 8012a92:	f000 fb27 	bl	80130e4 <_sbrk_r>
 8012a96:	0004      	movs	r4, r0
 8012a98:	1c43      	adds	r3, r0, #1
 8012a9a:	d100      	bne.n	8012a9e <_malloc_r+0x20e>
 8012a9c:	e0d6      	b.n	8012c4c <_malloc_r+0x3bc>
 8012a9e:	9b02      	ldr	r3, [sp, #8]
 8012aa0:	18fb      	adds	r3, r7, r3
 8012aa2:	4283      	cmp	r3, r0
 8012aa4:	d903      	bls.n	8012aae <_malloc_r+0x21e>
 8012aa6:	4a4b      	ldr	r2, [pc, #300]	; (8012bd4 <_malloc_r+0x344>)
 8012aa8:	4297      	cmp	r7, r2
 8012aaa:	d000      	beq.n	8012aae <_malloc_r+0x21e>
 8012aac:	e0ce      	b.n	8012c4c <_malloc_r+0x3bc>
 8012aae:	494f      	ldr	r1, [pc, #316]	; (8012bec <_malloc_r+0x35c>)
 8012ab0:	680a      	ldr	r2, [r1, #0]
 8012ab2:	18b2      	adds	r2, r6, r2
 8012ab4:	600a      	str	r2, [r1, #0]
 8012ab6:	9903      	ldr	r1, [sp, #12]
 8012ab8:	4694      	mov	ip, r2
 8012aba:	1e48      	subs	r0, r1, #1
 8012abc:	42a3      	cmp	r3, r4
 8012abe:	d000      	beq.n	8012ac2 <_malloc_r+0x232>
 8012ac0:	e09a      	b.n	8012bf8 <_malloc_r+0x368>
 8012ac2:	4203      	tst	r3, r0
 8012ac4:	d000      	beq.n	8012ac8 <_malloc_r+0x238>
 8012ac6:	e097      	b.n	8012bf8 <_malloc_r+0x368>
 8012ac8:	9a02      	ldr	r2, [sp, #8]
 8012aca:	4b42      	ldr	r3, [pc, #264]	; (8012bd4 <_malloc_r+0x344>)
 8012acc:	1992      	adds	r2, r2, r6
 8012ace:	2601      	movs	r6, #1
 8012ad0:	689b      	ldr	r3, [r3, #8]
 8012ad2:	4316      	orrs	r6, r2
 8012ad4:	605e      	str	r6, [r3, #4]
 8012ad6:	4b45      	ldr	r3, [pc, #276]	; (8012bec <_malloc_r+0x35c>)
 8012ad8:	4a45      	ldr	r2, [pc, #276]	; (8012bf0 <_malloc_r+0x360>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	6811      	ldr	r1, [r2, #0]
 8012ade:	428b      	cmp	r3, r1
 8012ae0:	d900      	bls.n	8012ae4 <_malloc_r+0x254>
 8012ae2:	6013      	str	r3, [r2, #0]
 8012ae4:	4a43      	ldr	r2, [pc, #268]	; (8012bf4 <_malloc_r+0x364>)
 8012ae6:	6811      	ldr	r1, [r2, #0]
 8012ae8:	428b      	cmp	r3, r1
 8012aea:	d800      	bhi.n	8012aee <_malloc_r+0x25e>
 8012aec:	e0ae      	b.n	8012c4c <_malloc_r+0x3bc>
 8012aee:	6013      	str	r3, [r2, #0]
 8012af0:	e0ac      	b.n	8012c4c <_malloc_r+0x3bc>
 8012af2:	0a40      	lsrs	r0, r0, #9
 8012af4:	2804      	cmp	r0, #4
 8012af6:	d810      	bhi.n	8012b1a <_malloc_r+0x28a>
 8012af8:	0999      	lsrs	r1, r3, #6
 8012afa:	3138      	adds	r1, #56	; 0x38
 8012afc:	00ce      	lsls	r6, r1, #3
 8012afe:	18b6      	adds	r6, r6, r2
 8012b00:	68b0      	ldr	r0, [r6, #8]
 8012b02:	4286      	cmp	r6, r0
 8012b04:	d124      	bne.n	8012b50 <_malloc_r+0x2c0>
 8012b06:	2301      	movs	r3, #1
 8012b08:	1089      	asrs	r1, r1, #2
 8012b0a:	408b      	lsls	r3, r1
 8012b0c:	433b      	orrs	r3, r7
 8012b0e:	6053      	str	r3, [r2, #4]
 8012b10:	60e6      	str	r6, [r4, #12]
 8012b12:	60a0      	str	r0, [r4, #8]
 8012b14:	60b4      	str	r4, [r6, #8]
 8012b16:	60c4      	str	r4, [r0, #12]
 8012b18:	e768      	b.n	80129ec <_malloc_r+0x15c>
 8012b1a:	2814      	cmp	r0, #20
 8012b1c:	d802      	bhi.n	8012b24 <_malloc_r+0x294>
 8012b1e:	0001      	movs	r1, r0
 8012b20:	315b      	adds	r1, #91	; 0x5b
 8012b22:	e7eb      	b.n	8012afc <_malloc_r+0x26c>
 8012b24:	2854      	cmp	r0, #84	; 0x54
 8012b26:	d802      	bhi.n	8012b2e <_malloc_r+0x29e>
 8012b28:	0b19      	lsrs	r1, r3, #12
 8012b2a:	316e      	adds	r1, #110	; 0x6e
 8012b2c:	e7e6      	b.n	8012afc <_malloc_r+0x26c>
 8012b2e:	21aa      	movs	r1, #170	; 0xaa
 8012b30:	0049      	lsls	r1, r1, #1
 8012b32:	4288      	cmp	r0, r1
 8012b34:	d802      	bhi.n	8012b3c <_malloc_r+0x2ac>
 8012b36:	0bd9      	lsrs	r1, r3, #15
 8012b38:	3177      	adds	r1, #119	; 0x77
 8012b3a:	e7df      	b.n	8012afc <_malloc_r+0x26c>
 8012b3c:	4e27      	ldr	r6, [pc, #156]	; (8012bdc <_malloc_r+0x34c>)
 8012b3e:	217e      	movs	r1, #126	; 0x7e
 8012b40:	42b0      	cmp	r0, r6
 8012b42:	d8db      	bhi.n	8012afc <_malloc_r+0x26c>
 8012b44:	0c99      	lsrs	r1, r3, #18
 8012b46:	317c      	adds	r1, #124	; 0x7c
 8012b48:	e7d8      	b.n	8012afc <_malloc_r+0x26c>
 8012b4a:	6880      	ldr	r0, [r0, #8]
 8012b4c:	4286      	cmp	r6, r0
 8012b4e:	d004      	beq.n	8012b5a <_malloc_r+0x2ca>
 8012b50:	2103      	movs	r1, #3
 8012b52:	6842      	ldr	r2, [r0, #4]
 8012b54:	438a      	bics	r2, r1
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d8f7      	bhi.n	8012b4a <_malloc_r+0x2ba>
 8012b5a:	68c6      	ldr	r6, [r0, #12]
 8012b5c:	e7d8      	b.n	8012b10 <_malloc_r+0x280>
 8012b5e:	2304      	movs	r3, #4
 8012b60:	449c      	add	ip, r3
 8012b62:	e753      	b.n	8012a0c <_malloc_r+0x17c>
 8012b64:	2003      	movs	r0, #3
 8012b66:	6863      	ldr	r3, [r4, #4]
 8012b68:	4383      	bics	r3, r0
 8012b6a:	1b5e      	subs	r6, r3, r5
 8012b6c:	68e0      	ldr	r0, [r4, #12]
 8012b6e:	2e0f      	cmp	r6, #15
 8012b70:	dd0e      	ble.n	8012b90 <_malloc_r+0x300>
 8012b72:	2701      	movs	r7, #1
 8012b74:	1962      	adds	r2, r4, r5
 8012b76:	433d      	orrs	r5, r7
 8012b78:	6065      	str	r5, [r4, #4]
 8012b7a:	68a5      	ldr	r5, [r4, #8]
 8012b7c:	4337      	orrs	r7, r6
 8012b7e:	60e8      	str	r0, [r5, #12]
 8012b80:	6085      	str	r5, [r0, #8]
 8012b82:	614a      	str	r2, [r1, #20]
 8012b84:	610a      	str	r2, [r1, #16]
 8012b86:	4914      	ldr	r1, [pc, #80]	; (8012bd8 <_malloc_r+0x348>)
 8012b88:	6057      	str	r7, [r2, #4]
 8012b8a:	60d1      	str	r1, [r2, #12]
 8012b8c:	6091      	str	r1, [r2, #8]
 8012b8e:	e6e8      	b.n	8012962 <_malloc_r+0xd2>
 8012b90:	2e00      	cmp	r6, #0
 8012b92:	db08      	blt.n	8012ba6 <_malloc_r+0x316>
 8012b94:	2201      	movs	r2, #1
 8012b96:	18e3      	adds	r3, r4, r3
 8012b98:	6859      	ldr	r1, [r3, #4]
 8012b9a:	430a      	orrs	r2, r1
 8012b9c:	605a      	str	r2, [r3, #4]
 8012b9e:	68a3      	ldr	r3, [r4, #8]
 8012ba0:	60d8      	str	r0, [r3, #12]
 8012ba2:	6083      	str	r3, [r0, #8]
 8012ba4:	e6aa      	b.n	80128fc <_malloc_r+0x6c>
 8012ba6:	0004      	movs	r4, r0
 8012ba8:	e73c      	b.n	8012a24 <_malloc_r+0x194>
 8012baa:	2301      	movs	r3, #1
 8012bac:	425b      	negs	r3, r3
 8012bae:	449c      	add	ip, r3
 8012bb0:	9b03      	ldr	r3, [sp, #12]
 8012bb2:	6818      	ldr	r0, [r3, #0]
 8012bb4:	3b08      	subs	r3, #8
 8012bb6:	9003      	str	r0, [sp, #12]
 8012bb8:	4298      	cmp	r0, r3
 8012bba:	d100      	bne.n	8012bbe <_malloc_r+0x32e>
 8012bbc:	e73c      	b.n	8012a38 <_malloc_r+0x1a8>
 8012bbe:	e743      	b.n	8012a48 <_malloc_r+0x1b8>
 8012bc0:	2004      	movs	r0, #4
 8012bc2:	0052      	lsls	r2, r2, #1
 8012bc4:	4484      	add	ip, r0
 8012bc6:	421a      	tst	r2, r3
 8012bc8:	d0fa      	beq.n	8012bc0 <_malloc_r+0x330>
 8012bca:	e723      	b.n	8012a14 <_malloc_r+0x184>
 8012bcc:	9802      	ldr	r0, [sp, #8]
 8012bce:	4684      	mov	ip, r0
 8012bd0:	e7f9      	b.n	8012bc6 <_malloc_r+0x336>
 8012bd2:	46c0      	nop			; (mov r8, r8)
 8012bd4:	20000664 	.word	0x20000664
 8012bd8:	2000066c 	.word	0x2000066c
 8012bdc:	00000554 	.word	0x00000554
 8012be0:	000001ff 	.word	0x000001ff
 8012be4:	20006e1c 	.word	0x20006e1c
 8012be8:	20000a6c 	.word	0x20000a6c
 8012bec:	20006dec 	.word	0x20006dec
 8012bf0:	20006e14 	.word	0x20006e14
 8012bf4:	20006e18 	.word	0x20006e18
 8012bf8:	492e      	ldr	r1, [pc, #184]	; (8012cb4 <_malloc_r+0x424>)
 8012bfa:	680a      	ldr	r2, [r1, #0]
 8012bfc:	3201      	adds	r2, #1
 8012bfe:	d133      	bne.n	8012c68 <_malloc_r+0x3d8>
 8012c00:	600c      	str	r4, [r1, #0]
 8012c02:	2307      	movs	r3, #7
 8012c04:	4023      	ands	r3, r4
 8012c06:	d002      	beq.n	8012c0e <_malloc_r+0x37e>
 8012c08:	2208      	movs	r2, #8
 8012c0a:	1ad3      	subs	r3, r2, r3
 8012c0c:	18e4      	adds	r4, r4, r3
 8012c0e:	9a03      	ldr	r2, [sp, #12]
 8012c10:	19a6      	adds	r6, r4, r6
 8012c12:	18d3      	adds	r3, r2, r3
 8012c14:	4006      	ands	r6, r0
 8012c16:	1b9e      	subs	r6, r3, r6
 8012c18:	0031      	movs	r1, r6
 8012c1a:	9801      	ldr	r0, [sp, #4]
 8012c1c:	f000 fa62 	bl	80130e4 <_sbrk_r>
 8012c20:	1c43      	adds	r3, r0, #1
 8012c22:	d101      	bne.n	8012c28 <_malloc_r+0x398>
 8012c24:	0020      	movs	r0, r4
 8012c26:	2600      	movs	r6, #0
 8012c28:	4a23      	ldr	r2, [pc, #140]	; (8012cb8 <_malloc_r+0x428>)
 8012c2a:	1b00      	subs	r0, r0, r4
 8012c2c:	6813      	ldr	r3, [r2, #0]
 8012c2e:	199b      	adds	r3, r3, r6
 8012c30:	6013      	str	r3, [r2, #0]
 8012c32:	2301      	movs	r3, #1
 8012c34:	4a21      	ldr	r2, [pc, #132]	; (8012cbc <_malloc_r+0x42c>)
 8012c36:	1986      	adds	r6, r0, r6
 8012c38:	431e      	orrs	r6, r3
 8012c3a:	6094      	str	r4, [r2, #8]
 8012c3c:	6066      	str	r6, [r4, #4]
 8012c3e:	4297      	cmp	r7, r2
 8012c40:	d100      	bne.n	8012c44 <_malloc_r+0x3b4>
 8012c42:	e748      	b.n	8012ad6 <_malloc_r+0x246>
 8012c44:	9a02      	ldr	r2, [sp, #8]
 8012c46:	2a0f      	cmp	r2, #15
 8012c48:	d813      	bhi.n	8012c72 <_malloc_r+0x3e2>
 8012c4a:	6063      	str	r3, [r4, #4]
 8012c4c:	2203      	movs	r2, #3
 8012c4e:	4b1b      	ldr	r3, [pc, #108]	; (8012cbc <_malloc_r+0x42c>)
 8012c50:	689b      	ldr	r3, [r3, #8]
 8012c52:	685b      	ldr	r3, [r3, #4]
 8012c54:	4393      	bics	r3, r2
 8012c56:	1b5a      	subs	r2, r3, r5
 8012c58:	42ab      	cmp	r3, r5
 8012c5a:	d301      	bcc.n	8012c60 <_malloc_r+0x3d0>
 8012c5c:	2a0f      	cmp	r2, #15
 8012c5e:	dc1d      	bgt.n	8012c9c <_malloc_r+0x40c>
 8012c60:	9801      	ldr	r0, [sp, #4]
 8012c62:	f000 f867 	bl	8012d34 <__malloc_unlock>
 8012c66:	e620      	b.n	80128aa <_malloc_r+0x1a>
 8012c68:	1ae3      	subs	r3, r4, r3
 8012c6a:	4a13      	ldr	r2, [pc, #76]	; (8012cb8 <_malloc_r+0x428>)
 8012c6c:	4463      	add	r3, ip
 8012c6e:	6013      	str	r3, [r2, #0]
 8012c70:	e7c7      	b.n	8012c02 <_malloc_r+0x372>
 8012c72:	2207      	movs	r2, #7
 8012c74:	9e02      	ldr	r6, [sp, #8]
 8012c76:	3e0c      	subs	r6, #12
 8012c78:	4396      	bics	r6, r2
 8012c7a:	687a      	ldr	r2, [r7, #4]
 8012c7c:	4013      	ands	r3, r2
 8012c7e:	2205      	movs	r2, #5
 8012c80:	4333      	orrs	r3, r6
 8012c82:	607b      	str	r3, [r7, #4]
 8012c84:	19bb      	adds	r3, r7, r6
 8012c86:	605a      	str	r2, [r3, #4]
 8012c88:	609a      	str	r2, [r3, #8]
 8012c8a:	2e0f      	cmp	r6, #15
 8012c8c:	d800      	bhi.n	8012c90 <_malloc_r+0x400>
 8012c8e:	e722      	b.n	8012ad6 <_malloc_r+0x246>
 8012c90:	0039      	movs	r1, r7
 8012c92:	9801      	ldr	r0, [sp, #4]
 8012c94:	3108      	adds	r1, #8
 8012c96:	f003 fb07 	bl	80162a8 <_free_r>
 8012c9a:	e71c      	b.n	8012ad6 <_malloc_r+0x246>
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	0018      	movs	r0, r3
 8012ca0:	4906      	ldr	r1, [pc, #24]	; (8012cbc <_malloc_r+0x42c>)
 8012ca2:	4328      	orrs	r0, r5
 8012ca4:	688c      	ldr	r4, [r1, #8]
 8012ca6:	4313      	orrs	r3, r2
 8012ca8:	1965      	adds	r5, r4, r5
 8012caa:	6060      	str	r0, [r4, #4]
 8012cac:	608d      	str	r5, [r1, #8]
 8012cae:	606b      	str	r3, [r5, #4]
 8012cb0:	e624      	b.n	80128fc <_malloc_r+0x6c>
 8012cb2:	46c0      	nop			; (mov r8, r8)
 8012cb4:	20000a6c 	.word	0x20000a6c
 8012cb8:	20006dec 	.word	0x20006dec
 8012cbc:	20000664 	.word	0x20000664

08012cc0 <__ascii_mbtowc>:
 8012cc0:	b082      	sub	sp, #8
 8012cc2:	2900      	cmp	r1, #0
 8012cc4:	d100      	bne.n	8012cc8 <__ascii_mbtowc+0x8>
 8012cc6:	a901      	add	r1, sp, #4
 8012cc8:	1e10      	subs	r0, r2, #0
 8012cca:	d006      	beq.n	8012cda <__ascii_mbtowc+0x1a>
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d006      	beq.n	8012cde <__ascii_mbtowc+0x1e>
 8012cd0:	7813      	ldrb	r3, [r2, #0]
 8012cd2:	600b      	str	r3, [r1, #0]
 8012cd4:	7810      	ldrb	r0, [r2, #0]
 8012cd6:	1e43      	subs	r3, r0, #1
 8012cd8:	4198      	sbcs	r0, r3
 8012cda:	b002      	add	sp, #8
 8012cdc:	4770      	bx	lr
 8012cde:	2002      	movs	r0, #2
 8012ce0:	4240      	negs	r0, r0
 8012ce2:	e7fa      	b.n	8012cda <__ascii_mbtowc+0x1a>

08012ce4 <memcmp>:
 8012ce4:	b530      	push	{r4, r5, lr}
 8012ce6:	2400      	movs	r4, #0
 8012ce8:	42a2      	cmp	r2, r4
 8012cea:	d101      	bne.n	8012cf0 <memcmp+0xc>
 8012cec:	2000      	movs	r0, #0
 8012cee:	e005      	b.n	8012cfc <memcmp+0x18>
 8012cf0:	5d03      	ldrb	r3, [r0, r4]
 8012cf2:	1c65      	adds	r5, r4, #1
 8012cf4:	5d0c      	ldrb	r4, [r1, r4]
 8012cf6:	42a3      	cmp	r3, r4
 8012cf8:	d001      	beq.n	8012cfe <memcmp+0x1a>
 8012cfa:	1b18      	subs	r0, r3, r4
 8012cfc:	bd30      	pop	{r4, r5, pc}
 8012cfe:	002c      	movs	r4, r5
 8012d00:	e7f2      	b.n	8012ce8 <memcmp+0x4>

08012d02 <memcpy>:
 8012d02:	2300      	movs	r3, #0
 8012d04:	b510      	push	{r4, lr}
 8012d06:	429a      	cmp	r2, r3
 8012d08:	d100      	bne.n	8012d0c <memcpy+0xa>
 8012d0a:	bd10      	pop	{r4, pc}
 8012d0c:	5ccc      	ldrb	r4, [r1, r3]
 8012d0e:	54c4      	strb	r4, [r0, r3]
 8012d10:	3301      	adds	r3, #1
 8012d12:	e7f8      	b.n	8012d06 <memcpy+0x4>

08012d14 <memset>:
 8012d14:	0003      	movs	r3, r0
 8012d16:	1812      	adds	r2, r2, r0
 8012d18:	4293      	cmp	r3, r2
 8012d1a:	d100      	bne.n	8012d1e <memset+0xa>
 8012d1c:	4770      	bx	lr
 8012d1e:	7019      	strb	r1, [r3, #0]
 8012d20:	3301      	adds	r3, #1
 8012d22:	e7f9      	b.n	8012d18 <memset+0x4>

08012d24 <__malloc_lock>:
 8012d24:	b510      	push	{r4, lr}
 8012d26:	4802      	ldr	r0, [pc, #8]	; (8012d30 <__malloc_lock+0xc>)
 8012d28:	f003 feb2 	bl	8016a90 <__retarget_lock_acquire_recursive>
 8012d2c:	bd10      	pop	{r4, pc}
 8012d2e:	46c0      	nop			; (mov r8, r8)
 8012d30:	200073cc 	.word	0x200073cc

08012d34 <__malloc_unlock>:
 8012d34:	b510      	push	{r4, lr}
 8012d36:	4802      	ldr	r0, [pc, #8]	; (8012d40 <__malloc_unlock+0xc>)
 8012d38:	f003 feab 	bl	8016a92 <__retarget_lock_release_recursive>
 8012d3c:	bd10      	pop	{r4, pc}
 8012d3e:	46c0      	nop			; (mov r8, r8)
 8012d40:	200073cc 	.word	0x200073cc

08012d44 <rand>:
 8012d44:	4b09      	ldr	r3, [pc, #36]	; (8012d6c <rand+0x28>)
 8012d46:	b510      	push	{r4, lr}
 8012d48:	681c      	ldr	r4, [r3, #0]
 8012d4a:	4a09      	ldr	r2, [pc, #36]	; (8012d70 <rand+0x2c>)
 8012d4c:	34a8      	adds	r4, #168	; 0xa8
 8012d4e:	6820      	ldr	r0, [r4, #0]
 8012d50:	6861      	ldr	r1, [r4, #4]
 8012d52:	4b08      	ldr	r3, [pc, #32]	; (8012d74 <rand+0x30>)
 8012d54:	f7ed fc0a 	bl	800056c <__aeabi_lmul>
 8012d58:	2201      	movs	r2, #1
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	1880      	adds	r0, r0, r2
 8012d5e:	4159      	adcs	r1, r3
 8012d60:	6020      	str	r0, [r4, #0]
 8012d62:	6061      	str	r1, [r4, #4]
 8012d64:	0048      	lsls	r0, r1, #1
 8012d66:	0840      	lsrs	r0, r0, #1
 8012d68:	bd10      	pop	{r4, pc}
 8012d6a:	46c0      	nop			; (mov r8, r8)
 8012d6c:	200000c8 	.word	0x200000c8
 8012d70:	4c957f2d 	.word	0x4c957f2d
 8012d74:	5851f42d 	.word	0x5851f42d

08012d78 <realloc>:
 8012d78:	b510      	push	{r4, lr}
 8012d7a:	4b03      	ldr	r3, [pc, #12]	; (8012d88 <realloc+0x10>)
 8012d7c:	000a      	movs	r2, r1
 8012d7e:	0001      	movs	r1, r0
 8012d80:	6818      	ldr	r0, [r3, #0]
 8012d82:	f000 f803 	bl	8012d8c <_realloc_r>
 8012d86:	bd10      	pop	{r4, pc}
 8012d88:	200000c8 	.word	0x200000c8

08012d8c <_realloc_r>:
 8012d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d8e:	b087      	sub	sp, #28
 8012d90:	9003      	str	r0, [sp, #12]
 8012d92:	1e0c      	subs	r4, r1, #0
 8012d94:	9205      	str	r2, [sp, #20]
 8012d96:	d106      	bne.n	8012da6 <_realloc_r+0x1a>
 8012d98:	0011      	movs	r1, r2
 8012d9a:	f7ff fd79 	bl	8012890 <_malloc_r>
 8012d9e:	0007      	movs	r7, r0
 8012da0:	0038      	movs	r0, r7
 8012da2:	b007      	add	sp, #28
 8012da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012da6:	9803      	ldr	r0, [sp, #12]
 8012da8:	f7ff ffbc 	bl	8012d24 <__malloc_lock>
 8012dac:	0023      	movs	r3, r4
 8012dae:	3b08      	subs	r3, #8
 8012db0:	685f      	ldr	r7, [r3, #4]
 8012db2:	9302      	str	r3, [sp, #8]
 8012db4:	003a      	movs	r2, r7
 8012db6:	2303      	movs	r3, #3
 8012db8:	9e05      	ldr	r6, [sp, #20]
 8012dba:	439a      	bics	r2, r3
 8012dbc:	360b      	adds	r6, #11
 8012dbe:	9204      	str	r2, [sp, #16]
 8012dc0:	2e16      	cmp	r6, #22
 8012dc2:	d908      	bls.n	8012dd6 <_realloc_r+0x4a>
 8012dc4:	3304      	adds	r3, #4
 8012dc6:	439e      	bics	r6, r3
 8012dc8:	9601      	str	r6, [sp, #4]
 8012dca:	d506      	bpl.n	8012dda <_realloc_r+0x4e>
 8012dcc:	230c      	movs	r3, #12
 8012dce:	9a03      	ldr	r2, [sp, #12]
 8012dd0:	2700      	movs	r7, #0
 8012dd2:	6013      	str	r3, [r2, #0]
 8012dd4:	e7e4      	b.n	8012da0 <_realloc_r+0x14>
 8012dd6:	2310      	movs	r3, #16
 8012dd8:	9301      	str	r3, [sp, #4]
 8012dda:	9b01      	ldr	r3, [sp, #4]
 8012ddc:	9a05      	ldr	r2, [sp, #20]
 8012dde:	4293      	cmp	r3, r2
 8012de0:	d3f4      	bcc.n	8012dcc <_realloc_r+0x40>
 8012de2:	9b01      	ldr	r3, [sp, #4]
 8012de4:	9a04      	ldr	r2, [sp, #16]
 8012de6:	4293      	cmp	r3, r2
 8012de8:	dc00      	bgt.n	8012dec <_realloc_r+0x60>
 8012dea:	e16f      	b.n	80130cc <_realloc_r+0x340>
 8012dec:	9b02      	ldr	r3, [sp, #8]
 8012dee:	48bc      	ldr	r0, [pc, #752]	; (80130e0 <_realloc_r+0x354>)
 8012df0:	189b      	adds	r3, r3, r2
 8012df2:	6882      	ldr	r2, [r0, #8]
 8012df4:	4694      	mov	ip, r2
 8012df6:	685a      	ldr	r2, [r3, #4]
 8012df8:	459c      	cmp	ip, r3
 8012dfa:	d006      	beq.n	8012e0a <_realloc_r+0x7e>
 8012dfc:	2501      	movs	r5, #1
 8012dfe:	0011      	movs	r1, r2
 8012e00:	43a9      	bics	r1, r5
 8012e02:	1859      	adds	r1, r3, r1
 8012e04:	6849      	ldr	r1, [r1, #4]
 8012e06:	4229      	tst	r1, r5
 8012e08:	d146      	bne.n	8012e98 <_realloc_r+0x10c>
 8012e0a:	2103      	movs	r1, #3
 8012e0c:	438a      	bics	r2, r1
 8012e0e:	9904      	ldr	r1, [sp, #16]
 8012e10:	188e      	adds	r6, r1, r2
 8012e12:	9901      	ldr	r1, [sp, #4]
 8012e14:	459c      	cmp	ip, r3
 8012e16:	d117      	bne.n	8012e48 <_realloc_r+0xbc>
 8012e18:	3110      	adds	r1, #16
 8012e1a:	42b1      	cmp	r1, r6
 8012e1c:	dc3e      	bgt.n	8012e9c <_realloc_r+0x110>
 8012e1e:	9901      	ldr	r1, [sp, #4]
 8012e20:	9b02      	ldr	r3, [sp, #8]
 8012e22:	468c      	mov	ip, r1
 8012e24:	4463      	add	r3, ip
 8012e26:	6083      	str	r3, [r0, #8]
 8012e28:	001a      	movs	r2, r3
 8012e2a:	1a73      	subs	r3, r6, r1
 8012e2c:	2601      	movs	r6, #1
 8012e2e:	4333      	orrs	r3, r6
 8012e30:	6053      	str	r3, [r2, #4]
 8012e32:	0023      	movs	r3, r4
 8012e34:	3b08      	subs	r3, #8
 8012e36:	685a      	ldr	r2, [r3, #4]
 8012e38:	9803      	ldr	r0, [sp, #12]
 8012e3a:	4016      	ands	r6, r2
 8012e3c:	430e      	orrs	r6, r1
 8012e3e:	605e      	str	r6, [r3, #4]
 8012e40:	f7ff ff78 	bl	8012d34 <__malloc_unlock>
 8012e44:	0027      	movs	r7, r4
 8012e46:	e7ab      	b.n	8012da0 <_realloc_r+0x14>
 8012e48:	42b1      	cmp	r1, r6
 8012e4a:	dc27      	bgt.n	8012e9c <_realloc_r+0x110>
 8012e4c:	68da      	ldr	r2, [r3, #12]
 8012e4e:	689b      	ldr	r3, [r3, #8]
 8012e50:	60da      	str	r2, [r3, #12]
 8012e52:	6093      	str	r3, [r2, #8]
 8012e54:	9b01      	ldr	r3, [sp, #4]
 8012e56:	9a02      	ldr	r2, [sp, #8]
 8012e58:	1af4      	subs	r4, r6, r3
 8012e5a:	9b02      	ldr	r3, [sp, #8]
 8012e5c:	1992      	adds	r2, r2, r6
 8012e5e:	685b      	ldr	r3, [r3, #4]
 8012e60:	9304      	str	r3, [sp, #16]
 8012e62:	2301      	movs	r3, #1
 8012e64:	9804      	ldr	r0, [sp, #16]
 8012e66:	4018      	ands	r0, r3
 8012e68:	2c0f      	cmp	r4, #15
 8012e6a:	d800      	bhi.n	8012e6e <_realloc_r+0xe2>
 8012e6c:	e130      	b.n	80130d0 <_realloc_r+0x344>
 8012e6e:	9d01      	ldr	r5, [sp, #4]
 8012e70:	9902      	ldr	r1, [sp, #8]
 8012e72:	4328      	orrs	r0, r5
 8012e74:	1949      	adds	r1, r1, r5
 8012e76:	9d02      	ldr	r5, [sp, #8]
 8012e78:	431c      	orrs	r4, r3
 8012e7a:	6068      	str	r0, [r5, #4]
 8012e7c:	604c      	str	r4, [r1, #4]
 8012e7e:	6850      	ldr	r0, [r2, #4]
 8012e80:	3108      	adds	r1, #8
 8012e82:	4303      	orrs	r3, r0
 8012e84:	6053      	str	r3, [r2, #4]
 8012e86:	9803      	ldr	r0, [sp, #12]
 8012e88:	f003 fa0e 	bl	80162a8 <_free_r>
 8012e8c:	9803      	ldr	r0, [sp, #12]
 8012e8e:	f7ff ff51 	bl	8012d34 <__malloc_unlock>
 8012e92:	9f02      	ldr	r7, [sp, #8]
 8012e94:	3708      	adds	r7, #8
 8012e96:	e783      	b.n	8012da0 <_realloc_r+0x14>
 8012e98:	2200      	movs	r2, #0
 8012e9a:	0013      	movs	r3, r2
 8012e9c:	07f9      	lsls	r1, r7, #31
 8012e9e:	d500      	bpl.n	8012ea2 <_realloc_r+0x116>
 8012ea0:	e0c6      	b.n	8013030 <_realloc_r+0x2a4>
 8012ea2:	0021      	movs	r1, r4
 8012ea4:	3908      	subs	r1, #8
 8012ea6:	680d      	ldr	r5, [r1, #0]
 8012ea8:	9902      	ldr	r1, [sp, #8]
 8012eaa:	1b4d      	subs	r5, r1, r5
 8012eac:	2103      	movs	r1, #3
 8012eae:	686f      	ldr	r7, [r5, #4]
 8012eb0:	438f      	bics	r7, r1
 8012eb2:	9904      	ldr	r1, [sp, #16]
 8012eb4:	187f      	adds	r7, r7, r1
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d100      	bne.n	8012ebc <_realloc_r+0x130>
 8012eba:	e084      	b.n	8012fc6 <_realloc_r+0x23a>
 8012ebc:	19d6      	adds	r6, r2, r7
 8012ebe:	459c      	cmp	ip, r3
 8012ec0:	d148      	bne.n	8012f54 <_realloc_r+0x1c8>
 8012ec2:	9b01      	ldr	r3, [sp, #4]
 8012ec4:	3310      	adds	r3, #16
 8012ec6:	42b3      	cmp	r3, r6
 8012ec8:	dc7d      	bgt.n	8012fc6 <_realloc_r+0x23a>
 8012eca:	68aa      	ldr	r2, [r5, #8]
 8012ecc:	68eb      	ldr	r3, [r5, #12]
 8012ece:	002f      	movs	r7, r5
 8012ed0:	60d3      	str	r3, [r2, #12]
 8012ed2:	609a      	str	r2, [r3, #8]
 8012ed4:	000a      	movs	r2, r1
 8012ed6:	3a04      	subs	r2, #4
 8012ed8:	3708      	adds	r7, #8
 8012eda:	2a24      	cmp	r2, #36	; 0x24
 8012edc:	d835      	bhi.n	8012f4a <_realloc_r+0x1be>
 8012ede:	003b      	movs	r3, r7
 8012ee0:	2a13      	cmp	r2, #19
 8012ee2:	d908      	bls.n	8012ef6 <_realloc_r+0x16a>
 8012ee4:	6823      	ldr	r3, [r4, #0]
 8012ee6:	60ab      	str	r3, [r5, #8]
 8012ee8:	6863      	ldr	r3, [r4, #4]
 8012eea:	60eb      	str	r3, [r5, #12]
 8012eec:	2a1b      	cmp	r2, #27
 8012eee:	d81a      	bhi.n	8012f26 <_realloc_r+0x19a>
 8012ef0:	002b      	movs	r3, r5
 8012ef2:	3408      	adds	r4, #8
 8012ef4:	3310      	adds	r3, #16
 8012ef6:	6822      	ldr	r2, [r4, #0]
 8012ef8:	601a      	str	r2, [r3, #0]
 8012efa:	6862      	ldr	r2, [r4, #4]
 8012efc:	605a      	str	r2, [r3, #4]
 8012efe:	68a2      	ldr	r2, [r4, #8]
 8012f00:	609a      	str	r2, [r3, #8]
 8012f02:	9b01      	ldr	r3, [sp, #4]
 8012f04:	18ea      	adds	r2, r5, r3
 8012f06:	4b76      	ldr	r3, [pc, #472]	; (80130e0 <_realloc_r+0x354>)
 8012f08:	609a      	str	r2, [r3, #8]
 8012f0a:	9b01      	ldr	r3, [sp, #4]
 8012f0c:	1af3      	subs	r3, r6, r3
 8012f0e:	2601      	movs	r6, #1
 8012f10:	4333      	orrs	r3, r6
 8012f12:	6053      	str	r3, [r2, #4]
 8012f14:	686b      	ldr	r3, [r5, #4]
 8012f16:	401e      	ands	r6, r3
 8012f18:	9b01      	ldr	r3, [sp, #4]
 8012f1a:	431e      	orrs	r6, r3
 8012f1c:	606e      	str	r6, [r5, #4]
 8012f1e:	9803      	ldr	r0, [sp, #12]
 8012f20:	f7ff ff08 	bl	8012d34 <__malloc_unlock>
 8012f24:	e73c      	b.n	8012da0 <_realloc_r+0x14>
 8012f26:	68a3      	ldr	r3, [r4, #8]
 8012f28:	612b      	str	r3, [r5, #16]
 8012f2a:	68e3      	ldr	r3, [r4, #12]
 8012f2c:	616b      	str	r3, [r5, #20]
 8012f2e:	2a24      	cmp	r2, #36	; 0x24
 8012f30:	d003      	beq.n	8012f3a <_realloc_r+0x1ae>
 8012f32:	002b      	movs	r3, r5
 8012f34:	3410      	adds	r4, #16
 8012f36:	3318      	adds	r3, #24
 8012f38:	e7dd      	b.n	8012ef6 <_realloc_r+0x16a>
 8012f3a:	6923      	ldr	r3, [r4, #16]
 8012f3c:	61ab      	str	r3, [r5, #24]
 8012f3e:	002b      	movs	r3, r5
 8012f40:	6962      	ldr	r2, [r4, #20]
 8012f42:	3320      	adds	r3, #32
 8012f44:	61ea      	str	r2, [r5, #28]
 8012f46:	3418      	adds	r4, #24
 8012f48:	e7d5      	b.n	8012ef6 <_realloc_r+0x16a>
 8012f4a:	0021      	movs	r1, r4
 8012f4c:	0038      	movs	r0, r7
 8012f4e:	f003 fdac 	bl	8016aaa <memmove>
 8012f52:	e7d6      	b.n	8012f02 <_realloc_r+0x176>
 8012f54:	9a01      	ldr	r2, [sp, #4]
 8012f56:	42b2      	cmp	r2, r6
 8012f58:	dc35      	bgt.n	8012fc6 <_realloc_r+0x23a>
 8012f5a:	0028      	movs	r0, r5
 8012f5c:	68da      	ldr	r2, [r3, #12]
 8012f5e:	689b      	ldr	r3, [r3, #8]
 8012f60:	3008      	adds	r0, #8
 8012f62:	60da      	str	r2, [r3, #12]
 8012f64:	6093      	str	r3, [r2, #8]
 8012f66:	68aa      	ldr	r2, [r5, #8]
 8012f68:	68eb      	ldr	r3, [r5, #12]
 8012f6a:	60d3      	str	r3, [r2, #12]
 8012f6c:	609a      	str	r2, [r3, #8]
 8012f6e:	9a04      	ldr	r2, [sp, #16]
 8012f70:	3a04      	subs	r2, #4
 8012f72:	2a24      	cmp	r2, #36	; 0x24
 8012f74:	d823      	bhi.n	8012fbe <_realloc_r+0x232>
 8012f76:	2a13      	cmp	r2, #19
 8012f78:	d907      	bls.n	8012f8a <_realloc_r+0x1fe>
 8012f7a:	6823      	ldr	r3, [r4, #0]
 8012f7c:	60ab      	str	r3, [r5, #8]
 8012f7e:	6863      	ldr	r3, [r4, #4]
 8012f80:	60eb      	str	r3, [r5, #12]
 8012f82:	2a1b      	cmp	r2, #27
 8012f84:	d809      	bhi.n	8012f9a <_realloc_r+0x20e>
 8012f86:	3408      	adds	r4, #8
 8012f88:	3008      	adds	r0, #8
 8012f8a:	6823      	ldr	r3, [r4, #0]
 8012f8c:	6003      	str	r3, [r0, #0]
 8012f8e:	6863      	ldr	r3, [r4, #4]
 8012f90:	6043      	str	r3, [r0, #4]
 8012f92:	68a3      	ldr	r3, [r4, #8]
 8012f94:	6083      	str	r3, [r0, #8]
 8012f96:	9502      	str	r5, [sp, #8]
 8012f98:	e75c      	b.n	8012e54 <_realloc_r+0xc8>
 8012f9a:	68a3      	ldr	r3, [r4, #8]
 8012f9c:	612b      	str	r3, [r5, #16]
 8012f9e:	68e3      	ldr	r3, [r4, #12]
 8012fa0:	616b      	str	r3, [r5, #20]
 8012fa2:	2a24      	cmp	r2, #36	; 0x24
 8012fa4:	d003      	beq.n	8012fae <_realloc_r+0x222>
 8012fa6:	0028      	movs	r0, r5
 8012fa8:	3410      	adds	r4, #16
 8012faa:	3018      	adds	r0, #24
 8012fac:	e7ed      	b.n	8012f8a <_realloc_r+0x1fe>
 8012fae:	0028      	movs	r0, r5
 8012fb0:	6923      	ldr	r3, [r4, #16]
 8012fb2:	3020      	adds	r0, #32
 8012fb4:	61ab      	str	r3, [r5, #24]
 8012fb6:	6963      	ldr	r3, [r4, #20]
 8012fb8:	3418      	adds	r4, #24
 8012fba:	61eb      	str	r3, [r5, #28]
 8012fbc:	e7e5      	b.n	8012f8a <_realloc_r+0x1fe>
 8012fbe:	0021      	movs	r1, r4
 8012fc0:	f003 fd73 	bl	8016aaa <memmove>
 8012fc4:	e7e7      	b.n	8012f96 <_realloc_r+0x20a>
 8012fc6:	9b01      	ldr	r3, [sp, #4]
 8012fc8:	42bb      	cmp	r3, r7
 8012fca:	dc31      	bgt.n	8013030 <_realloc_r+0x2a4>
 8012fcc:	0028      	movs	r0, r5
 8012fce:	68aa      	ldr	r2, [r5, #8]
 8012fd0:	68eb      	ldr	r3, [r5, #12]
 8012fd2:	3008      	adds	r0, #8
 8012fd4:	60d3      	str	r3, [r2, #12]
 8012fd6:	609a      	str	r2, [r3, #8]
 8012fd8:	9a04      	ldr	r2, [sp, #16]
 8012fda:	3a04      	subs	r2, #4
 8012fdc:	2a24      	cmp	r2, #36	; 0x24
 8012fde:	d823      	bhi.n	8013028 <_realloc_r+0x29c>
 8012fe0:	2a13      	cmp	r2, #19
 8012fe2:	d907      	bls.n	8012ff4 <_realloc_r+0x268>
 8012fe4:	6823      	ldr	r3, [r4, #0]
 8012fe6:	60ab      	str	r3, [r5, #8]
 8012fe8:	6863      	ldr	r3, [r4, #4]
 8012fea:	60eb      	str	r3, [r5, #12]
 8012fec:	2a1b      	cmp	r2, #27
 8012fee:	d809      	bhi.n	8013004 <_realloc_r+0x278>
 8012ff0:	3408      	adds	r4, #8
 8012ff2:	3008      	adds	r0, #8
 8012ff4:	6823      	ldr	r3, [r4, #0]
 8012ff6:	6003      	str	r3, [r0, #0]
 8012ff8:	6863      	ldr	r3, [r4, #4]
 8012ffa:	6043      	str	r3, [r0, #4]
 8012ffc:	68a3      	ldr	r3, [r4, #8]
 8012ffe:	6083      	str	r3, [r0, #8]
 8013000:	003e      	movs	r6, r7
 8013002:	e7c8      	b.n	8012f96 <_realloc_r+0x20a>
 8013004:	68a3      	ldr	r3, [r4, #8]
 8013006:	612b      	str	r3, [r5, #16]
 8013008:	68e3      	ldr	r3, [r4, #12]
 801300a:	616b      	str	r3, [r5, #20]
 801300c:	2a24      	cmp	r2, #36	; 0x24
 801300e:	d003      	beq.n	8013018 <_realloc_r+0x28c>
 8013010:	0028      	movs	r0, r5
 8013012:	3410      	adds	r4, #16
 8013014:	3018      	adds	r0, #24
 8013016:	e7ed      	b.n	8012ff4 <_realloc_r+0x268>
 8013018:	0028      	movs	r0, r5
 801301a:	6923      	ldr	r3, [r4, #16]
 801301c:	3020      	adds	r0, #32
 801301e:	61ab      	str	r3, [r5, #24]
 8013020:	6963      	ldr	r3, [r4, #20]
 8013022:	3418      	adds	r4, #24
 8013024:	61eb      	str	r3, [r5, #28]
 8013026:	e7e5      	b.n	8012ff4 <_realloc_r+0x268>
 8013028:	0021      	movs	r1, r4
 801302a:	f003 fd3e 	bl	8016aaa <memmove>
 801302e:	e7e7      	b.n	8013000 <_realloc_r+0x274>
 8013030:	9905      	ldr	r1, [sp, #20]
 8013032:	9803      	ldr	r0, [sp, #12]
 8013034:	f7ff fc2c 	bl	8012890 <_malloc_r>
 8013038:	1e07      	subs	r7, r0, #0
 801303a:	d100      	bne.n	801303e <_realloc_r+0x2b2>
 801303c:	e76f      	b.n	8012f1e <_realloc_r+0x192>
 801303e:	0023      	movs	r3, r4
 8013040:	2201      	movs	r2, #1
 8013042:	3b08      	subs	r3, #8
 8013044:	685b      	ldr	r3, [r3, #4]
 8013046:	4393      	bics	r3, r2
 8013048:	9a02      	ldr	r2, [sp, #8]
 801304a:	18d3      	adds	r3, r2, r3
 801304c:	0002      	movs	r2, r0
 801304e:	3a08      	subs	r2, #8
 8013050:	4293      	cmp	r3, r2
 8013052:	d105      	bne.n	8013060 <_realloc_r+0x2d4>
 8013054:	685e      	ldr	r6, [r3, #4]
 8013056:	2303      	movs	r3, #3
 8013058:	439e      	bics	r6, r3
 801305a:	9b04      	ldr	r3, [sp, #16]
 801305c:	18f6      	adds	r6, r6, r3
 801305e:	e6f9      	b.n	8012e54 <_realloc_r+0xc8>
 8013060:	9a04      	ldr	r2, [sp, #16]
 8013062:	3a04      	subs	r2, #4
 8013064:	2a24      	cmp	r2, #36	; 0x24
 8013066:	d82d      	bhi.n	80130c4 <_realloc_r+0x338>
 8013068:	2a13      	cmp	r2, #19
 801306a:	d928      	bls.n	80130be <_realloc_r+0x332>
 801306c:	6823      	ldr	r3, [r4, #0]
 801306e:	6003      	str	r3, [r0, #0]
 8013070:	6863      	ldr	r3, [r4, #4]
 8013072:	6043      	str	r3, [r0, #4]
 8013074:	2a1b      	cmp	r2, #27
 8013076:	d80e      	bhi.n	8013096 <_realloc_r+0x30a>
 8013078:	0022      	movs	r2, r4
 801307a:	0003      	movs	r3, r0
 801307c:	3208      	adds	r2, #8
 801307e:	3308      	adds	r3, #8
 8013080:	6811      	ldr	r1, [r2, #0]
 8013082:	6019      	str	r1, [r3, #0]
 8013084:	6851      	ldr	r1, [r2, #4]
 8013086:	6059      	str	r1, [r3, #4]
 8013088:	6892      	ldr	r2, [r2, #8]
 801308a:	609a      	str	r2, [r3, #8]
 801308c:	0021      	movs	r1, r4
 801308e:	9803      	ldr	r0, [sp, #12]
 8013090:	f003 f90a 	bl	80162a8 <_free_r>
 8013094:	e743      	b.n	8012f1e <_realloc_r+0x192>
 8013096:	68a3      	ldr	r3, [r4, #8]
 8013098:	6083      	str	r3, [r0, #8]
 801309a:	68e3      	ldr	r3, [r4, #12]
 801309c:	60c3      	str	r3, [r0, #12]
 801309e:	2a24      	cmp	r2, #36	; 0x24
 80130a0:	d004      	beq.n	80130ac <_realloc_r+0x320>
 80130a2:	0022      	movs	r2, r4
 80130a4:	0003      	movs	r3, r0
 80130a6:	3210      	adds	r2, #16
 80130a8:	3310      	adds	r3, #16
 80130aa:	e7e9      	b.n	8013080 <_realloc_r+0x2f4>
 80130ac:	6923      	ldr	r3, [r4, #16]
 80130ae:	0022      	movs	r2, r4
 80130b0:	6103      	str	r3, [r0, #16]
 80130b2:	0003      	movs	r3, r0
 80130b4:	6961      	ldr	r1, [r4, #20]
 80130b6:	3218      	adds	r2, #24
 80130b8:	3318      	adds	r3, #24
 80130ba:	6141      	str	r1, [r0, #20]
 80130bc:	e7e0      	b.n	8013080 <_realloc_r+0x2f4>
 80130be:	0003      	movs	r3, r0
 80130c0:	0022      	movs	r2, r4
 80130c2:	e7dd      	b.n	8013080 <_realloc_r+0x2f4>
 80130c4:	0021      	movs	r1, r4
 80130c6:	f003 fcf0 	bl	8016aaa <memmove>
 80130ca:	e7df      	b.n	801308c <_realloc_r+0x300>
 80130cc:	9e04      	ldr	r6, [sp, #16]
 80130ce:	e6c1      	b.n	8012e54 <_realloc_r+0xc8>
 80130d0:	9902      	ldr	r1, [sp, #8]
 80130d2:	4306      	orrs	r6, r0
 80130d4:	604e      	str	r6, [r1, #4]
 80130d6:	6851      	ldr	r1, [r2, #4]
 80130d8:	430b      	orrs	r3, r1
 80130da:	6053      	str	r3, [r2, #4]
 80130dc:	e6d6      	b.n	8012e8c <_realloc_r+0x100>
 80130de:	46c0      	nop			; (mov r8, r8)
 80130e0:	20000664 	.word	0x20000664

080130e4 <_sbrk_r>:
 80130e4:	2300      	movs	r3, #0
 80130e6:	b570      	push	{r4, r5, r6, lr}
 80130e8:	4c06      	ldr	r4, [pc, #24]	; (8013104 <_sbrk_r+0x20>)
 80130ea:	0005      	movs	r5, r0
 80130ec:	0008      	movs	r0, r1
 80130ee:	6023      	str	r3, [r4, #0]
 80130f0:	f004 f9c0 	bl	8017474 <_sbrk>
 80130f4:	1c43      	adds	r3, r0, #1
 80130f6:	d103      	bne.n	8013100 <_sbrk_r+0x1c>
 80130f8:	6823      	ldr	r3, [r4, #0]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d000      	beq.n	8013100 <_sbrk_r+0x1c>
 80130fe:	602b      	str	r3, [r5, #0]
 8013100:	bd70      	pop	{r4, r5, r6, pc}
 8013102:	46c0      	nop			; (mov r8, r8)
 8013104:	200073d4 	.word	0x200073d4

08013108 <sprintf>:
 8013108:	b40e      	push	{r1, r2, r3}
 801310a:	b500      	push	{lr}
 801310c:	490b      	ldr	r1, [pc, #44]	; (801313c <sprintf+0x34>)
 801310e:	b09c      	sub	sp, #112	; 0x70
 8013110:	ab1d      	add	r3, sp, #116	; 0x74
 8013112:	9002      	str	r0, [sp, #8]
 8013114:	9006      	str	r0, [sp, #24]
 8013116:	9107      	str	r1, [sp, #28]
 8013118:	9104      	str	r1, [sp, #16]
 801311a:	4809      	ldr	r0, [pc, #36]	; (8013140 <sprintf+0x38>)
 801311c:	4909      	ldr	r1, [pc, #36]	; (8013144 <sprintf+0x3c>)
 801311e:	cb04      	ldmia	r3!, {r2}
 8013120:	9105      	str	r1, [sp, #20]
 8013122:	6800      	ldr	r0, [r0, #0]
 8013124:	a902      	add	r1, sp, #8
 8013126:	9301      	str	r3, [sp, #4]
 8013128:	f000 ff78 	bl	801401c <_svfprintf_r>
 801312c:	2300      	movs	r3, #0
 801312e:	9a02      	ldr	r2, [sp, #8]
 8013130:	7013      	strb	r3, [r2, #0]
 8013132:	b01c      	add	sp, #112	; 0x70
 8013134:	bc08      	pop	{r3}
 8013136:	b003      	add	sp, #12
 8013138:	4718      	bx	r3
 801313a:	46c0      	nop			; (mov r8, r8)
 801313c:	7fffffff 	.word	0x7fffffff
 8013140:	200000c8 	.word	0x200000c8
 8013144:	ffff0208 	.word	0xffff0208

08013148 <strcat>:
 8013148:	0002      	movs	r2, r0
 801314a:	b510      	push	{r4, lr}
 801314c:	7813      	ldrb	r3, [r2, #0]
 801314e:	1c54      	adds	r4, r2, #1
 8013150:	2b00      	cmp	r3, #0
 8013152:	d105      	bne.n	8013160 <strcat+0x18>
 8013154:	5ccc      	ldrb	r4, [r1, r3]
 8013156:	54d4      	strb	r4, [r2, r3]
 8013158:	3301      	adds	r3, #1
 801315a:	2c00      	cmp	r4, #0
 801315c:	d1fa      	bne.n	8013154 <strcat+0xc>
 801315e:	bd10      	pop	{r4, pc}
 8013160:	0022      	movs	r2, r4
 8013162:	e7f3      	b.n	801314c <strcat+0x4>

08013164 <strchr>:
 8013164:	b2c9      	uxtb	r1, r1
 8013166:	7803      	ldrb	r3, [r0, #0]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d004      	beq.n	8013176 <strchr+0x12>
 801316c:	428b      	cmp	r3, r1
 801316e:	d100      	bne.n	8013172 <strchr+0xe>
 8013170:	4770      	bx	lr
 8013172:	3001      	adds	r0, #1
 8013174:	e7f7      	b.n	8013166 <strchr+0x2>
 8013176:	424b      	negs	r3, r1
 8013178:	4159      	adcs	r1, r3
 801317a:	4249      	negs	r1, r1
 801317c:	4008      	ands	r0, r1
 801317e:	e7f7      	b.n	8013170 <strchr+0xc>

08013180 <strcpy>:
 8013180:	0003      	movs	r3, r0
 8013182:	780a      	ldrb	r2, [r1, #0]
 8013184:	3101      	adds	r1, #1
 8013186:	701a      	strb	r2, [r3, #0]
 8013188:	3301      	adds	r3, #1
 801318a:	2a00      	cmp	r2, #0
 801318c:	d1f9      	bne.n	8013182 <strcpy+0x2>
 801318e:	4770      	bx	lr

08013190 <strncmp>:
 8013190:	2300      	movs	r3, #0
 8013192:	b530      	push	{r4, r5, lr}
 8013194:	429a      	cmp	r2, r3
 8013196:	d00a      	beq.n	80131ae <strncmp+0x1e>
 8013198:	3a01      	subs	r2, #1
 801319a:	5cc4      	ldrb	r4, [r0, r3]
 801319c:	5ccd      	ldrb	r5, [r1, r3]
 801319e:	42ac      	cmp	r4, r5
 80131a0:	d104      	bne.n	80131ac <strncmp+0x1c>
 80131a2:	4293      	cmp	r3, r2
 80131a4:	d002      	beq.n	80131ac <strncmp+0x1c>
 80131a6:	3301      	adds	r3, #1
 80131a8:	2c00      	cmp	r4, #0
 80131aa:	d1f6      	bne.n	801319a <strncmp+0xa>
 80131ac:	1b63      	subs	r3, r4, r5
 80131ae:	0018      	movs	r0, r3
 80131b0:	bd30      	pop	{r4, r5, pc}

080131b2 <strncpy>:
 80131b2:	b530      	push	{r4, r5, lr}
 80131b4:	0005      	movs	r5, r0
 80131b6:	2a00      	cmp	r2, #0
 80131b8:	d100      	bne.n	80131bc <strncpy+0xa>
 80131ba:	bd30      	pop	{r4, r5, pc}
 80131bc:	780c      	ldrb	r4, [r1, #0]
 80131be:	3a01      	subs	r2, #1
 80131c0:	1c6b      	adds	r3, r5, #1
 80131c2:	702c      	strb	r4, [r5, #0]
 80131c4:	3101      	adds	r1, #1
 80131c6:	2c00      	cmp	r4, #0
 80131c8:	d105      	bne.n	80131d6 <strncpy+0x24>
 80131ca:	189a      	adds	r2, r3, r2
 80131cc:	429a      	cmp	r2, r3
 80131ce:	d0f4      	beq.n	80131ba <strncpy+0x8>
 80131d0:	701c      	strb	r4, [r3, #0]
 80131d2:	3301      	adds	r3, #1
 80131d4:	e7fa      	b.n	80131cc <strncpy+0x1a>
 80131d6:	001d      	movs	r5, r3
 80131d8:	e7ed      	b.n	80131b6 <strncpy+0x4>
	...

080131dc <sulp>:
 80131dc:	b570      	push	{r4, r5, r6, lr}
 80131de:	0016      	movs	r6, r2
 80131e0:	000d      	movs	r5, r1
 80131e2:	f003 ff17 	bl	8017014 <__ulp>
 80131e6:	2e00      	cmp	r6, #0
 80131e8:	d00d      	beq.n	8013206 <sulp+0x2a>
 80131ea:	236b      	movs	r3, #107	; 0x6b
 80131ec:	006a      	lsls	r2, r5, #1
 80131ee:	0d52      	lsrs	r2, r2, #21
 80131f0:	1a9b      	subs	r3, r3, r2
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	dd07      	ble.n	8013206 <sulp+0x2a>
 80131f6:	2400      	movs	r4, #0
 80131f8:	4a03      	ldr	r2, [pc, #12]	; (8013208 <sulp+0x2c>)
 80131fa:	051b      	lsls	r3, r3, #20
 80131fc:	189d      	adds	r5, r3, r2
 80131fe:	002b      	movs	r3, r5
 8013200:	0022      	movs	r2, r4
 8013202:	f7ee fe17 	bl	8001e34 <__aeabi_dmul>
 8013206:	bd70      	pop	{r4, r5, r6, pc}
 8013208:	3ff00000 	.word	0x3ff00000

0801320c <_strtod_l>:
 801320c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801320e:	b0a7      	sub	sp, #156	; 0x9c
 8013210:	9307      	str	r3, [sp, #28]
 8013212:	2300      	movs	r3, #0
 8013214:	9004      	str	r0, [sp, #16]
 8013216:	9807      	ldr	r0, [sp, #28]
 8013218:	9322      	str	r3, [sp, #136]	; 0x88
 801321a:	9106      	str	r1, [sp, #24]
 801321c:	921d      	str	r2, [sp, #116]	; 0x74
 801321e:	f003 fc28 	bl	8016a72 <__localeconv_l>
 8013222:	0005      	movs	r5, r0
 8013224:	6800      	ldr	r0, [r0, #0]
 8013226:	f7ec ff77 	bl	8000118 <strlen>
 801322a:	2600      	movs	r6, #0
 801322c:	2700      	movs	r7, #0
 801322e:	9b06      	ldr	r3, [sp, #24]
 8013230:	9005      	str	r0, [sp, #20]
 8013232:	9321      	str	r3, [sp, #132]	; 0x84
 8013234:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013236:	781a      	ldrb	r2, [r3, #0]
 8013238:	2a0d      	cmp	r2, #13
 801323a:	d839      	bhi.n	80132b0 <_strtod_l+0xa4>
 801323c:	2a09      	cmp	r2, #9
 801323e:	d23d      	bcs.n	80132bc <_strtod_l+0xb0>
 8013240:	2a00      	cmp	r2, #0
 8013242:	d044      	beq.n	80132ce <_strtod_l+0xc2>
 8013244:	2300      	movs	r3, #0
 8013246:	9313      	str	r3, [sp, #76]	; 0x4c
 8013248:	2200      	movs	r2, #0
 801324a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801324c:	920c      	str	r2, [sp, #48]	; 0x30
 801324e:	7823      	ldrb	r3, [r4, #0]
 8013250:	2b30      	cmp	r3, #48	; 0x30
 8013252:	d000      	beq.n	8013256 <_strtod_l+0x4a>
 8013254:	e07e      	b.n	8013354 <_strtod_l+0x148>
 8013256:	7863      	ldrb	r3, [r4, #1]
 8013258:	2b58      	cmp	r3, #88	; 0x58
 801325a:	d002      	beq.n	8013262 <_strtod_l+0x56>
 801325c:	2b78      	cmp	r3, #120	; 0x78
 801325e:	d000      	beq.n	8013262 <_strtod_l+0x56>
 8013260:	e06e      	b.n	8013340 <_strtod_l+0x134>
 8013262:	9b07      	ldr	r3, [sp, #28]
 8013264:	4a96      	ldr	r2, [pc, #600]	; (80134c0 <_strtod_l+0x2b4>)
 8013266:	9302      	str	r3, [sp, #8]
 8013268:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801326a:	a921      	add	r1, sp, #132	; 0x84
 801326c:	9301      	str	r3, [sp, #4]
 801326e:	ab22      	add	r3, sp, #136	; 0x88
 8013270:	9300      	str	r3, [sp, #0]
 8013272:	9804      	ldr	r0, [sp, #16]
 8013274:	ab23      	add	r3, sp, #140	; 0x8c
 8013276:	f003 f914 	bl	80164a2 <__gethex>
 801327a:	2507      	movs	r5, #7
 801327c:	9005      	str	r0, [sp, #20]
 801327e:	4005      	ands	r5, r0
 8013280:	d005      	beq.n	801328e <_strtod_l+0x82>
 8013282:	2d06      	cmp	r5, #6
 8013284:	d12f      	bne.n	80132e6 <_strtod_l+0xda>
 8013286:	2300      	movs	r3, #0
 8013288:	3401      	adds	r4, #1
 801328a:	9421      	str	r4, [sp, #132]	; 0x84
 801328c:	9313      	str	r3, [sp, #76]	; 0x4c
 801328e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013290:	2b00      	cmp	r3, #0
 8013292:	d002      	beq.n	801329a <_strtod_l+0x8e>
 8013294:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013296:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013298:	601a      	str	r2, [r3, #0]
 801329a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801329c:	2b00      	cmp	r3, #0
 801329e:	d01d      	beq.n	80132dc <_strtod_l+0xd0>
 80132a0:	2380      	movs	r3, #128	; 0x80
 80132a2:	0032      	movs	r2, r6
 80132a4:	061b      	lsls	r3, r3, #24
 80132a6:	18fb      	adds	r3, r7, r3
 80132a8:	0010      	movs	r0, r2
 80132aa:	0019      	movs	r1, r3
 80132ac:	b027      	add	sp, #156	; 0x9c
 80132ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132b0:	2a2b      	cmp	r2, #43	; 0x2b
 80132b2:	d016      	beq.n	80132e2 <_strtod_l+0xd6>
 80132b4:	2a2d      	cmp	r2, #45	; 0x2d
 80132b6:	d003      	beq.n	80132c0 <_strtod_l+0xb4>
 80132b8:	2a20      	cmp	r2, #32
 80132ba:	d1c3      	bne.n	8013244 <_strtod_l+0x38>
 80132bc:	3301      	adds	r3, #1
 80132be:	e7b8      	b.n	8013232 <_strtod_l+0x26>
 80132c0:	2201      	movs	r2, #1
 80132c2:	9213      	str	r2, [sp, #76]	; 0x4c
 80132c4:	1c5a      	adds	r2, r3, #1
 80132c6:	9221      	str	r2, [sp, #132]	; 0x84
 80132c8:	785b      	ldrb	r3, [r3, #1]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d1bc      	bne.n	8013248 <_strtod_l+0x3c>
 80132ce:	9b06      	ldr	r3, [sp, #24]
 80132d0:	9321      	str	r3, [sp, #132]	; 0x84
 80132d2:	2300      	movs	r3, #0
 80132d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80132d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d1db      	bne.n	8013294 <_strtod_l+0x88>
 80132dc:	0032      	movs	r2, r6
 80132de:	003b      	movs	r3, r7
 80132e0:	e7e2      	b.n	80132a8 <_strtod_l+0x9c>
 80132e2:	2200      	movs	r2, #0
 80132e4:	e7ed      	b.n	80132c2 <_strtod_l+0xb6>
 80132e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80132e8:	2a00      	cmp	r2, #0
 80132ea:	d007      	beq.n	80132fc <_strtod_l+0xf0>
 80132ec:	2135      	movs	r1, #53	; 0x35
 80132ee:	a824      	add	r0, sp, #144	; 0x90
 80132f0:	f003 ff7d 	bl	80171ee <__copybits>
 80132f4:	9922      	ldr	r1, [sp, #136]	; 0x88
 80132f6:	9804      	ldr	r0, [sp, #16]
 80132f8:	f003 fc12 	bl	8016b20 <_Bfree>
 80132fc:	1e68      	subs	r0, r5, #1
 80132fe:	2804      	cmp	r0, #4
 8013300:	d806      	bhi.n	8013310 <_strtod_l+0x104>
 8013302:	f7ec ff11 	bl	8000128 <__gnu_thumb1_case_uqi>
 8013306:	030c      	.short	0x030c
 8013308:	1917      	.short	0x1917
 801330a:	0c          	.byte	0x0c
 801330b:	00          	.byte	0x00
 801330c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801330e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8013310:	9b05      	ldr	r3, [sp, #20]
 8013312:	071b      	lsls	r3, r3, #28
 8013314:	d5bb      	bpl.n	801328e <_strtod_l+0x82>
 8013316:	2380      	movs	r3, #128	; 0x80
 8013318:	061b      	lsls	r3, r3, #24
 801331a:	431f      	orrs	r7, r3
 801331c:	e7b7      	b.n	801328e <_strtod_l+0x82>
 801331e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013320:	4a68      	ldr	r2, [pc, #416]	; (80134c4 <_strtod_l+0x2b8>)
 8013322:	4969      	ldr	r1, [pc, #420]	; (80134c8 <_strtod_l+0x2bc>)
 8013324:	401a      	ands	r2, r3
 8013326:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013328:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801332a:	185b      	adds	r3, r3, r1
 801332c:	051b      	lsls	r3, r3, #20
 801332e:	431a      	orrs	r2, r3
 8013330:	0017      	movs	r7, r2
 8013332:	e7ed      	b.n	8013310 <_strtod_l+0x104>
 8013334:	4f65      	ldr	r7, [pc, #404]	; (80134cc <_strtod_l+0x2c0>)
 8013336:	e7eb      	b.n	8013310 <_strtod_l+0x104>
 8013338:	2601      	movs	r6, #1
 801333a:	4f65      	ldr	r7, [pc, #404]	; (80134d0 <_strtod_l+0x2c4>)
 801333c:	4276      	negs	r6, r6
 801333e:	e7e7      	b.n	8013310 <_strtod_l+0x104>
 8013340:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013342:	1c5a      	adds	r2, r3, #1
 8013344:	9221      	str	r2, [sp, #132]	; 0x84
 8013346:	785b      	ldrb	r3, [r3, #1]
 8013348:	2b30      	cmp	r3, #48	; 0x30
 801334a:	d0f9      	beq.n	8013340 <_strtod_l+0x134>
 801334c:	2b00      	cmp	r3, #0
 801334e:	d09e      	beq.n	801328e <_strtod_l+0x82>
 8013350:	2301      	movs	r3, #1
 8013352:	930c      	str	r3, [sp, #48]	; 0x30
 8013354:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013356:	220a      	movs	r2, #10
 8013358:	9312      	str	r3, [sp, #72]	; 0x48
 801335a:	2300      	movs	r3, #0
 801335c:	930b      	str	r3, [sp, #44]	; 0x2c
 801335e:	9308      	str	r3, [sp, #32]
 8013360:	930a      	str	r3, [sp, #40]	; 0x28
 8013362:	9821      	ldr	r0, [sp, #132]	; 0x84
 8013364:	7804      	ldrb	r4, [r0, #0]
 8013366:	0023      	movs	r3, r4
 8013368:	3b30      	subs	r3, #48	; 0x30
 801336a:	b2d9      	uxtb	r1, r3
 801336c:	2909      	cmp	r1, #9
 801336e:	d934      	bls.n	80133da <_strtod_l+0x1ce>
 8013370:	9a05      	ldr	r2, [sp, #20]
 8013372:	6829      	ldr	r1, [r5, #0]
 8013374:	f7ff ff0c 	bl	8013190 <strncmp>
 8013378:	2800      	cmp	r0, #0
 801337a:	d040      	beq.n	80133fe <_strtod_l+0x1f2>
 801337c:	2000      	movs	r0, #0
 801337e:	0023      	movs	r3, r4
 8013380:	4684      	mov	ip, r0
 8013382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013384:	9007      	str	r0, [sp, #28]
 8013386:	9205      	str	r2, [sp, #20]
 8013388:	2220      	movs	r2, #32
 801338a:	0019      	movs	r1, r3
 801338c:	4391      	bics	r1, r2
 801338e:	000a      	movs	r2, r1
 8013390:	2100      	movs	r1, #0
 8013392:	2a45      	cmp	r2, #69	; 0x45
 8013394:	d000      	beq.n	8013398 <_strtod_l+0x18c>
 8013396:	e0bf      	b.n	8013518 <_strtod_l+0x30c>
 8013398:	9b05      	ldr	r3, [sp, #20]
 801339a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801339c:	4303      	orrs	r3, r0
 801339e:	4313      	orrs	r3, r2
 80133a0:	428b      	cmp	r3, r1
 80133a2:	d094      	beq.n	80132ce <_strtod_l+0xc2>
 80133a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80133a6:	9306      	str	r3, [sp, #24]
 80133a8:	3301      	adds	r3, #1
 80133aa:	9321      	str	r3, [sp, #132]	; 0x84
 80133ac:	9b06      	ldr	r3, [sp, #24]
 80133ae:	785b      	ldrb	r3, [r3, #1]
 80133b0:	2b2b      	cmp	r3, #43	; 0x2b
 80133b2:	d100      	bne.n	80133b6 <_strtod_l+0x1aa>
 80133b4:	e082      	b.n	80134bc <_strtod_l+0x2b0>
 80133b6:	000c      	movs	r4, r1
 80133b8:	2b2d      	cmp	r3, #45	; 0x2d
 80133ba:	d105      	bne.n	80133c8 <_strtod_l+0x1bc>
 80133bc:	2401      	movs	r4, #1
 80133be:	9b06      	ldr	r3, [sp, #24]
 80133c0:	3302      	adds	r3, #2
 80133c2:	9321      	str	r3, [sp, #132]	; 0x84
 80133c4:	9b06      	ldr	r3, [sp, #24]
 80133c6:	789b      	ldrb	r3, [r3, #2]
 80133c8:	001a      	movs	r2, r3
 80133ca:	3a30      	subs	r2, #48	; 0x30
 80133cc:	2a09      	cmp	r2, #9
 80133ce:	d800      	bhi.n	80133d2 <_strtod_l+0x1c6>
 80133d0:	e084      	b.n	80134dc <_strtod_l+0x2d0>
 80133d2:	9a06      	ldr	r2, [sp, #24]
 80133d4:	2100      	movs	r1, #0
 80133d6:	9221      	str	r2, [sp, #132]	; 0x84
 80133d8:	e09e      	b.n	8013518 <_strtod_l+0x30c>
 80133da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80133dc:	2908      	cmp	r1, #8
 80133de:	dc09      	bgt.n	80133f4 <_strtod_l+0x1e8>
 80133e0:	9908      	ldr	r1, [sp, #32]
 80133e2:	4351      	muls	r1, r2
 80133e4:	18cb      	adds	r3, r1, r3
 80133e6:	9308      	str	r3, [sp, #32]
 80133e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133ea:	3001      	adds	r0, #1
 80133ec:	3301      	adds	r3, #1
 80133ee:	930a      	str	r3, [sp, #40]	; 0x28
 80133f0:	9021      	str	r0, [sp, #132]	; 0x84
 80133f2:	e7b6      	b.n	8013362 <_strtod_l+0x156>
 80133f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80133f6:	4351      	muls	r1, r2
 80133f8:	18cb      	adds	r3, r1, r3
 80133fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80133fc:	e7f4      	b.n	80133e8 <_strtod_l+0x1dc>
 80133fe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013400:	9b05      	ldr	r3, [sp, #20]
 8013402:	4694      	mov	ip, r2
 8013404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013406:	4463      	add	r3, ip
 8013408:	9321      	str	r3, [sp, #132]	; 0x84
 801340a:	781b      	ldrb	r3, [r3, #0]
 801340c:	2a00      	cmp	r2, #0
 801340e:	d036      	beq.n	801347e <_strtod_l+0x272>
 8013410:	4684      	mov	ip, r0
 8013412:	9205      	str	r2, [sp, #20]
 8013414:	001a      	movs	r2, r3
 8013416:	3a30      	subs	r2, #48	; 0x30
 8013418:	2a09      	cmp	r2, #9
 801341a:	d912      	bls.n	8013442 <_strtod_l+0x236>
 801341c:	2201      	movs	r2, #1
 801341e:	9207      	str	r2, [sp, #28]
 8013420:	e7b2      	b.n	8013388 <_strtod_l+0x17c>
 8013422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013424:	3001      	adds	r0, #1
 8013426:	1c5a      	adds	r2, r3, #1
 8013428:	9221      	str	r2, [sp, #132]	; 0x84
 801342a:	785b      	ldrb	r3, [r3, #1]
 801342c:	2b30      	cmp	r3, #48	; 0x30
 801342e:	d0f8      	beq.n	8013422 <_strtod_l+0x216>
 8013430:	001a      	movs	r2, r3
 8013432:	3a31      	subs	r2, #49	; 0x31
 8013434:	2a08      	cmp	r2, #8
 8013436:	d83c      	bhi.n	80134b2 <_strtod_l+0x2a6>
 8013438:	4684      	mov	ip, r0
 801343a:	2000      	movs	r0, #0
 801343c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801343e:	9005      	str	r0, [sp, #20]
 8013440:	9212      	str	r2, [sp, #72]	; 0x48
 8013442:	3b30      	subs	r3, #48	; 0x30
 8013444:	1c42      	adds	r2, r0, #1
 8013446:	2b00      	cmp	r3, #0
 8013448:	d013      	beq.n	8013472 <_strtod_l+0x266>
 801344a:	210a      	movs	r1, #10
 801344c:	4494      	add	ip, r2
 801344e:	9a05      	ldr	r2, [sp, #20]
 8013450:	1885      	adds	r5, r0, r2
 8013452:	42aa      	cmp	r2, r5
 8013454:	d115      	bne.n	8013482 <_strtod_l+0x276>
 8013456:	9905      	ldr	r1, [sp, #20]
 8013458:	9a05      	ldr	r2, [sp, #20]
 801345a:	3101      	adds	r1, #1
 801345c:	1809      	adds	r1, r1, r0
 801345e:	1812      	adds	r2, r2, r0
 8013460:	9105      	str	r1, [sp, #20]
 8013462:	2a08      	cmp	r2, #8
 8013464:	dc1b      	bgt.n	801349e <_strtod_l+0x292>
 8013466:	220a      	movs	r2, #10
 8013468:	9908      	ldr	r1, [sp, #32]
 801346a:	434a      	muls	r2, r1
 801346c:	189b      	adds	r3, r3, r2
 801346e:	2200      	movs	r2, #0
 8013470:	9308      	str	r3, [sp, #32]
 8013472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013474:	0010      	movs	r0, r2
 8013476:	1c59      	adds	r1, r3, #1
 8013478:	9121      	str	r1, [sp, #132]	; 0x84
 801347a:	785b      	ldrb	r3, [r3, #1]
 801347c:	e7ca      	b.n	8013414 <_strtod_l+0x208>
 801347e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013480:	e7d4      	b.n	801342c <_strtod_l+0x220>
 8013482:	1c54      	adds	r4, r2, #1
 8013484:	2a08      	cmp	r2, #8
 8013486:	dc04      	bgt.n	8013492 <_strtod_l+0x286>
 8013488:	9a08      	ldr	r2, [sp, #32]
 801348a:	434a      	muls	r2, r1
 801348c:	9208      	str	r2, [sp, #32]
 801348e:	0022      	movs	r2, r4
 8013490:	e7df      	b.n	8013452 <_strtod_l+0x246>
 8013492:	2c10      	cmp	r4, #16
 8013494:	dcfb      	bgt.n	801348e <_strtod_l+0x282>
 8013496:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013498:	434a      	muls	r2, r1
 801349a:	920b      	str	r2, [sp, #44]	; 0x2c
 801349c:	e7f7      	b.n	801348e <_strtod_l+0x282>
 801349e:	9905      	ldr	r1, [sp, #20]
 80134a0:	2200      	movs	r2, #0
 80134a2:	2910      	cmp	r1, #16
 80134a4:	dce5      	bgt.n	8013472 <_strtod_l+0x266>
 80134a6:	210a      	movs	r1, #10
 80134a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80134aa:	4341      	muls	r1, r0
 80134ac:	185b      	adds	r3, r3, r1
 80134ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80134b0:	e7df      	b.n	8013472 <_strtod_l+0x266>
 80134b2:	2200      	movs	r2, #0
 80134b4:	4694      	mov	ip, r2
 80134b6:	9205      	str	r2, [sp, #20]
 80134b8:	3201      	adds	r2, #1
 80134ba:	e7b0      	b.n	801341e <_strtod_l+0x212>
 80134bc:	000c      	movs	r4, r1
 80134be:	e77e      	b.n	80133be <_strtod_l+0x1b2>
 80134c0:	0801a3a4 	.word	0x0801a3a4
 80134c4:	ffefffff 	.word	0xffefffff
 80134c8:	00000433 	.word	0x00000433
 80134cc:	7ff00000 	.word	0x7ff00000
 80134d0:	7fffffff 	.word	0x7fffffff
 80134d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134d6:	1c5a      	adds	r2, r3, #1
 80134d8:	9221      	str	r2, [sp, #132]	; 0x84
 80134da:	785b      	ldrb	r3, [r3, #1]
 80134dc:	2b30      	cmp	r3, #48	; 0x30
 80134de:	d0f9      	beq.n	80134d4 <_strtod_l+0x2c8>
 80134e0:	001a      	movs	r2, r3
 80134e2:	3a31      	subs	r2, #49	; 0x31
 80134e4:	2100      	movs	r1, #0
 80134e6:	2a08      	cmp	r2, #8
 80134e8:	d816      	bhi.n	8013518 <_strtod_l+0x30c>
 80134ea:	3b30      	subs	r3, #48	; 0x30
 80134ec:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80134ee:	930e      	str	r3, [sp, #56]	; 0x38
 80134f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134f2:	1c59      	adds	r1, r3, #1
 80134f4:	9121      	str	r1, [sp, #132]	; 0x84
 80134f6:	785b      	ldrb	r3, [r3, #1]
 80134f8:	001a      	movs	r2, r3
 80134fa:	3a30      	subs	r2, #48	; 0x30
 80134fc:	2a09      	cmp	r2, #9
 80134fe:	d932      	bls.n	8013566 <_strtod_l+0x35a>
 8013500:	1b4a      	subs	r2, r1, r5
 8013502:	4dad      	ldr	r5, [pc, #692]	; (80137b8 <_strtod_l+0x5ac>)
 8013504:	0029      	movs	r1, r5
 8013506:	2a08      	cmp	r2, #8
 8013508:	dc03      	bgt.n	8013512 <_strtod_l+0x306>
 801350a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801350c:	42a9      	cmp	r1, r5
 801350e:	dd00      	ble.n	8013512 <_strtod_l+0x306>
 8013510:	0029      	movs	r1, r5
 8013512:	2c00      	cmp	r4, #0
 8013514:	d000      	beq.n	8013518 <_strtod_l+0x30c>
 8013516:	4249      	negs	r1, r1
 8013518:	9a05      	ldr	r2, [sp, #20]
 801351a:	2a00      	cmp	r2, #0
 801351c:	d149      	bne.n	80135b2 <_strtod_l+0x3a6>
 801351e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013520:	4310      	orrs	r0, r2
 8013522:	d000      	beq.n	8013526 <_strtod_l+0x31a>
 8013524:	e6b3      	b.n	801328e <_strtod_l+0x82>
 8013526:	9a07      	ldr	r2, [sp, #28]
 8013528:	2a00      	cmp	r2, #0
 801352a:	d000      	beq.n	801352e <_strtod_l+0x322>
 801352c:	e6cf      	b.n	80132ce <_strtod_l+0xc2>
 801352e:	2b4e      	cmp	r3, #78	; 0x4e
 8013530:	d025      	beq.n	801357e <_strtod_l+0x372>
 8013532:	dc1f      	bgt.n	8013574 <_strtod_l+0x368>
 8013534:	2b49      	cmp	r3, #73	; 0x49
 8013536:	d000      	beq.n	801353a <_strtod_l+0x32e>
 8013538:	e6c9      	b.n	80132ce <_strtod_l+0xc2>
 801353a:	49a0      	ldr	r1, [pc, #640]	; (80137bc <_strtod_l+0x5b0>)
 801353c:	a821      	add	r0, sp, #132	; 0x84
 801353e:	f003 f9ed 	bl	801691c <__match>
 8013542:	2800      	cmp	r0, #0
 8013544:	d100      	bne.n	8013548 <_strtod_l+0x33c>
 8013546:	e6c2      	b.n	80132ce <_strtod_l+0xc2>
 8013548:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801354a:	499d      	ldr	r1, [pc, #628]	; (80137c0 <_strtod_l+0x5b4>)
 801354c:	3b01      	subs	r3, #1
 801354e:	a821      	add	r0, sp, #132	; 0x84
 8013550:	9321      	str	r3, [sp, #132]	; 0x84
 8013552:	f003 f9e3 	bl	801691c <__match>
 8013556:	2800      	cmp	r0, #0
 8013558:	d102      	bne.n	8013560 <_strtod_l+0x354>
 801355a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801355c:	3301      	adds	r3, #1
 801355e:	9321      	str	r3, [sp, #132]	; 0x84
 8013560:	4f98      	ldr	r7, [pc, #608]	; (80137c4 <_strtod_l+0x5b8>)
 8013562:	2600      	movs	r6, #0
 8013564:	e693      	b.n	801328e <_strtod_l+0x82>
 8013566:	220a      	movs	r2, #10
 8013568:	990e      	ldr	r1, [sp, #56]	; 0x38
 801356a:	434a      	muls	r2, r1
 801356c:	18d2      	adds	r2, r2, r3
 801356e:	3a30      	subs	r2, #48	; 0x30
 8013570:	920e      	str	r2, [sp, #56]	; 0x38
 8013572:	e7bd      	b.n	80134f0 <_strtod_l+0x2e4>
 8013574:	2b69      	cmp	r3, #105	; 0x69
 8013576:	d0e0      	beq.n	801353a <_strtod_l+0x32e>
 8013578:	2b6e      	cmp	r3, #110	; 0x6e
 801357a:	d000      	beq.n	801357e <_strtod_l+0x372>
 801357c:	e6a7      	b.n	80132ce <_strtod_l+0xc2>
 801357e:	4992      	ldr	r1, [pc, #584]	; (80137c8 <_strtod_l+0x5bc>)
 8013580:	a821      	add	r0, sp, #132	; 0x84
 8013582:	f003 f9cb 	bl	801691c <__match>
 8013586:	2800      	cmp	r0, #0
 8013588:	d100      	bne.n	801358c <_strtod_l+0x380>
 801358a:	e6a0      	b.n	80132ce <_strtod_l+0xc2>
 801358c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801358e:	781b      	ldrb	r3, [r3, #0]
 8013590:	2b28      	cmp	r3, #40	; 0x28
 8013592:	d10c      	bne.n	80135ae <_strtod_l+0x3a2>
 8013594:	aa24      	add	r2, sp, #144	; 0x90
 8013596:	498d      	ldr	r1, [pc, #564]	; (80137cc <_strtod_l+0x5c0>)
 8013598:	a821      	add	r0, sp, #132	; 0x84
 801359a:	f003 f9d3 	bl	8016944 <__hexnan>
 801359e:	2805      	cmp	r0, #5
 80135a0:	d105      	bne.n	80135ae <_strtod_l+0x3a2>
 80135a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80135a4:	4a87      	ldr	r2, [pc, #540]	; (80137c4 <_strtod_l+0x5b8>)
 80135a6:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80135a8:	431a      	orrs	r2, r3
 80135aa:	0017      	movs	r7, r2
 80135ac:	e66f      	b.n	801328e <_strtod_l+0x82>
 80135ae:	4f88      	ldr	r7, [pc, #544]	; (80137d0 <_strtod_l+0x5c4>)
 80135b0:	e7d7      	b.n	8013562 <_strtod_l+0x356>
 80135b2:	4663      	mov	r3, ip
 80135b4:	1acb      	subs	r3, r1, r3
 80135b6:	9307      	str	r3, [sp, #28]
 80135b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d101      	bne.n	80135c2 <_strtod_l+0x3b6>
 80135be:	9b05      	ldr	r3, [sp, #20]
 80135c0:	930a      	str	r3, [sp, #40]	; 0x28
 80135c2:	9c05      	ldr	r4, [sp, #20]
 80135c4:	2c10      	cmp	r4, #16
 80135c6:	dd00      	ble.n	80135ca <_strtod_l+0x3be>
 80135c8:	2410      	movs	r4, #16
 80135ca:	9808      	ldr	r0, [sp, #32]
 80135cc:	f7ef fa78 	bl	8002ac0 <__aeabi_ui2d>
 80135d0:	9b05      	ldr	r3, [sp, #20]
 80135d2:	0006      	movs	r6, r0
 80135d4:	000f      	movs	r7, r1
 80135d6:	2b09      	cmp	r3, #9
 80135d8:	dc15      	bgt.n	8013606 <_strtod_l+0x3fa>
 80135da:	9b07      	ldr	r3, [sp, #28]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d100      	bne.n	80135e2 <_strtod_l+0x3d6>
 80135e0:	e655      	b.n	801328e <_strtod_l+0x82>
 80135e2:	9b07      	ldr	r3, [sp, #28]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	dc00      	bgt.n	80135ea <_strtod_l+0x3de>
 80135e8:	e07d      	b.n	80136e6 <_strtod_l+0x4da>
 80135ea:	2b16      	cmp	r3, #22
 80135ec:	dc62      	bgt.n	80136b4 <_strtod_l+0x4a8>
 80135ee:	00dc      	lsls	r4, r3, #3
 80135f0:	4b78      	ldr	r3, [pc, #480]	; (80137d4 <_strtod_l+0x5c8>)
 80135f2:	0032      	movs	r2, r6
 80135f4:	1919      	adds	r1, r3, r4
 80135f6:	003b      	movs	r3, r7
 80135f8:	6808      	ldr	r0, [r1, #0]
 80135fa:	6849      	ldr	r1, [r1, #4]
 80135fc:	f7ee fc1a 	bl	8001e34 <__aeabi_dmul>
 8013600:	0006      	movs	r6, r0
 8013602:	000f      	movs	r7, r1
 8013604:	e643      	b.n	801328e <_strtod_l+0x82>
 8013606:	0022      	movs	r2, r4
 8013608:	4b72      	ldr	r3, [pc, #456]	; (80137d4 <_strtod_l+0x5c8>)
 801360a:	3a09      	subs	r2, #9
 801360c:	00d2      	lsls	r2, r2, #3
 801360e:	189b      	adds	r3, r3, r2
 8013610:	681a      	ldr	r2, [r3, #0]
 8013612:	685b      	ldr	r3, [r3, #4]
 8013614:	f7ee fc0e 	bl	8001e34 <__aeabi_dmul>
 8013618:	0006      	movs	r6, r0
 801361a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801361c:	000f      	movs	r7, r1
 801361e:	f7ef fa4f 	bl	8002ac0 <__aeabi_ui2d>
 8013622:	000b      	movs	r3, r1
 8013624:	0002      	movs	r2, r0
 8013626:	0039      	movs	r1, r7
 8013628:	0030      	movs	r0, r6
 801362a:	f7ed fcdd 	bl	8000fe8 <__aeabi_dadd>
 801362e:	9b05      	ldr	r3, [sp, #20]
 8013630:	0006      	movs	r6, r0
 8013632:	000f      	movs	r7, r1
 8013634:	2b0f      	cmp	r3, #15
 8013636:	ddd0      	ble.n	80135da <_strtod_l+0x3ce>
 8013638:	9b05      	ldr	r3, [sp, #20]
 801363a:	1b1c      	subs	r4, r3, r4
 801363c:	9b07      	ldr	r3, [sp, #28]
 801363e:	18e4      	adds	r4, r4, r3
 8013640:	2c00      	cmp	r4, #0
 8013642:	dc00      	bgt.n	8013646 <_strtod_l+0x43a>
 8013644:	e094      	b.n	8013770 <_strtod_l+0x564>
 8013646:	230f      	movs	r3, #15
 8013648:	4023      	ands	r3, r4
 801364a:	d00a      	beq.n	8013662 <_strtod_l+0x456>
 801364c:	4961      	ldr	r1, [pc, #388]	; (80137d4 <_strtod_l+0x5c8>)
 801364e:	00db      	lsls	r3, r3, #3
 8013650:	18c9      	adds	r1, r1, r3
 8013652:	0032      	movs	r2, r6
 8013654:	6808      	ldr	r0, [r1, #0]
 8013656:	6849      	ldr	r1, [r1, #4]
 8013658:	003b      	movs	r3, r7
 801365a:	f7ee fbeb 	bl	8001e34 <__aeabi_dmul>
 801365e:	0006      	movs	r6, r0
 8013660:	000f      	movs	r7, r1
 8013662:	230f      	movs	r3, #15
 8013664:	439c      	bics	r4, r3
 8013666:	d06e      	beq.n	8013746 <_strtod_l+0x53a>
 8013668:	3326      	adds	r3, #38	; 0x26
 801366a:	33ff      	adds	r3, #255	; 0xff
 801366c:	429c      	cmp	r4, r3
 801366e:	dd48      	ble.n	8013702 <_strtod_l+0x4f6>
 8013670:	2400      	movs	r4, #0
 8013672:	9405      	str	r4, [sp, #20]
 8013674:	940b      	str	r4, [sp, #44]	; 0x2c
 8013676:	940a      	str	r4, [sp, #40]	; 0x28
 8013678:	2322      	movs	r3, #34	; 0x22
 801367a:	2600      	movs	r6, #0
 801367c:	9a04      	ldr	r2, [sp, #16]
 801367e:	4f51      	ldr	r7, [pc, #324]	; (80137c4 <_strtod_l+0x5b8>)
 8013680:	6013      	str	r3, [r2, #0]
 8013682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013684:	42b3      	cmp	r3, r6
 8013686:	d100      	bne.n	801368a <_strtod_l+0x47e>
 8013688:	e601      	b.n	801328e <_strtod_l+0x82>
 801368a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801368c:	9804      	ldr	r0, [sp, #16]
 801368e:	f003 fa47 	bl	8016b20 <_Bfree>
 8013692:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013694:	9804      	ldr	r0, [sp, #16]
 8013696:	f003 fa43 	bl	8016b20 <_Bfree>
 801369a:	9905      	ldr	r1, [sp, #20]
 801369c:	9804      	ldr	r0, [sp, #16]
 801369e:	f003 fa3f 	bl	8016b20 <_Bfree>
 80136a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80136a4:	9804      	ldr	r0, [sp, #16]
 80136a6:	f003 fa3b 	bl	8016b20 <_Bfree>
 80136aa:	0021      	movs	r1, r4
 80136ac:	9804      	ldr	r0, [sp, #16]
 80136ae:	f003 fa37 	bl	8016b20 <_Bfree>
 80136b2:	e5ec      	b.n	801328e <_strtod_l+0x82>
 80136b4:	2325      	movs	r3, #37	; 0x25
 80136b6:	9a05      	ldr	r2, [sp, #20]
 80136b8:	1a9b      	subs	r3, r3, r2
 80136ba:	9a07      	ldr	r2, [sp, #28]
 80136bc:	4293      	cmp	r3, r2
 80136be:	dbbb      	blt.n	8013638 <_strtod_l+0x42c>
 80136c0:	230f      	movs	r3, #15
 80136c2:	9a05      	ldr	r2, [sp, #20]
 80136c4:	4c43      	ldr	r4, [pc, #268]	; (80137d4 <_strtod_l+0x5c8>)
 80136c6:	1a9d      	subs	r5, r3, r2
 80136c8:	00e9      	lsls	r1, r5, #3
 80136ca:	1861      	adds	r1, r4, r1
 80136cc:	0032      	movs	r2, r6
 80136ce:	6808      	ldr	r0, [r1, #0]
 80136d0:	6849      	ldr	r1, [r1, #4]
 80136d2:	003b      	movs	r3, r7
 80136d4:	f7ee fbae 	bl	8001e34 <__aeabi_dmul>
 80136d8:	9b07      	ldr	r3, [sp, #28]
 80136da:	1b5e      	subs	r6, r3, r5
 80136dc:	00f6      	lsls	r6, r6, #3
 80136de:	19a6      	adds	r6, r4, r6
 80136e0:	6832      	ldr	r2, [r6, #0]
 80136e2:	6873      	ldr	r3, [r6, #4]
 80136e4:	e78a      	b.n	80135fc <_strtod_l+0x3f0>
 80136e6:	9b07      	ldr	r3, [sp, #28]
 80136e8:	3316      	adds	r3, #22
 80136ea:	dba5      	blt.n	8013638 <_strtod_l+0x42c>
 80136ec:	9b07      	ldr	r3, [sp, #28]
 80136ee:	0030      	movs	r0, r6
 80136f0:	00da      	lsls	r2, r3, #3
 80136f2:	4b38      	ldr	r3, [pc, #224]	; (80137d4 <_strtod_l+0x5c8>)
 80136f4:	0039      	movs	r1, r7
 80136f6:	1a9b      	subs	r3, r3, r2
 80136f8:	681a      	ldr	r2, [r3, #0]
 80136fa:	685b      	ldr	r3, [r3, #4]
 80136fc:	f7ed ff90 	bl	8001620 <__aeabi_ddiv>
 8013700:	e77e      	b.n	8013600 <_strtod_l+0x3f4>
 8013702:	2300      	movs	r3, #0
 8013704:	0030      	movs	r0, r6
 8013706:	0039      	movs	r1, r7
 8013708:	001d      	movs	r5, r3
 801370a:	1124      	asrs	r4, r4, #4
 801370c:	2c01      	cmp	r4, #1
 801370e:	dc1d      	bgt.n	801374c <_strtod_l+0x540>
 8013710:	2b00      	cmp	r3, #0
 8013712:	d001      	beq.n	8013718 <_strtod_l+0x50c>
 8013714:	0006      	movs	r6, r0
 8013716:	000f      	movs	r7, r1
 8013718:	4b2f      	ldr	r3, [pc, #188]	; (80137d8 <_strtod_l+0x5cc>)
 801371a:	00ed      	lsls	r5, r5, #3
 801371c:	18ff      	adds	r7, r7, r3
 801371e:	4b2f      	ldr	r3, [pc, #188]	; (80137dc <_strtod_l+0x5d0>)
 8013720:	0032      	movs	r2, r6
 8013722:	195d      	adds	r5, r3, r5
 8013724:	6828      	ldr	r0, [r5, #0]
 8013726:	6869      	ldr	r1, [r5, #4]
 8013728:	003b      	movs	r3, r7
 801372a:	f7ee fb83 	bl	8001e34 <__aeabi_dmul>
 801372e:	4b25      	ldr	r3, [pc, #148]	; (80137c4 <_strtod_l+0x5b8>)
 8013730:	4a2b      	ldr	r2, [pc, #172]	; (80137e0 <_strtod_l+0x5d4>)
 8013732:	0006      	movs	r6, r0
 8013734:	400b      	ands	r3, r1
 8013736:	4293      	cmp	r3, r2
 8013738:	d89a      	bhi.n	8013670 <_strtod_l+0x464>
 801373a:	4a2a      	ldr	r2, [pc, #168]	; (80137e4 <_strtod_l+0x5d8>)
 801373c:	4293      	cmp	r3, r2
 801373e:	d913      	bls.n	8013768 <_strtod_l+0x55c>
 8013740:	2601      	movs	r6, #1
 8013742:	4f29      	ldr	r7, [pc, #164]	; (80137e8 <_strtod_l+0x5dc>)
 8013744:	4276      	negs	r6, r6
 8013746:	2300      	movs	r3, #0
 8013748:	9306      	str	r3, [sp, #24]
 801374a:	e07b      	b.n	8013844 <_strtod_l+0x638>
 801374c:	2201      	movs	r2, #1
 801374e:	4214      	tst	r4, r2
 8013750:	d007      	beq.n	8013762 <_strtod_l+0x556>
 8013752:	4a22      	ldr	r2, [pc, #136]	; (80137dc <_strtod_l+0x5d0>)
 8013754:	00eb      	lsls	r3, r5, #3
 8013756:	189b      	adds	r3, r3, r2
 8013758:	681a      	ldr	r2, [r3, #0]
 801375a:	685b      	ldr	r3, [r3, #4]
 801375c:	f7ee fb6a 	bl	8001e34 <__aeabi_dmul>
 8013760:	2301      	movs	r3, #1
 8013762:	3501      	adds	r5, #1
 8013764:	1064      	asrs	r4, r4, #1
 8013766:	e7d1      	b.n	801370c <_strtod_l+0x500>
 8013768:	23d4      	movs	r3, #212	; 0xd4
 801376a:	049b      	lsls	r3, r3, #18
 801376c:	18cf      	adds	r7, r1, r3
 801376e:	e7ea      	b.n	8013746 <_strtod_l+0x53a>
 8013770:	2c00      	cmp	r4, #0
 8013772:	d0e8      	beq.n	8013746 <_strtod_l+0x53a>
 8013774:	230f      	movs	r3, #15
 8013776:	4264      	negs	r4, r4
 8013778:	4023      	ands	r3, r4
 801377a:	d00a      	beq.n	8013792 <_strtod_l+0x586>
 801377c:	4a15      	ldr	r2, [pc, #84]	; (80137d4 <_strtod_l+0x5c8>)
 801377e:	00db      	lsls	r3, r3, #3
 8013780:	18d3      	adds	r3, r2, r3
 8013782:	0030      	movs	r0, r6
 8013784:	681a      	ldr	r2, [r3, #0]
 8013786:	685b      	ldr	r3, [r3, #4]
 8013788:	0039      	movs	r1, r7
 801378a:	f7ed ff49 	bl	8001620 <__aeabi_ddiv>
 801378e:	0006      	movs	r6, r0
 8013790:	000f      	movs	r7, r1
 8013792:	1124      	asrs	r4, r4, #4
 8013794:	d0d7      	beq.n	8013746 <_strtod_l+0x53a>
 8013796:	2c1f      	cmp	r4, #31
 8013798:	dd28      	ble.n	80137ec <_strtod_l+0x5e0>
 801379a:	2400      	movs	r4, #0
 801379c:	9405      	str	r4, [sp, #20]
 801379e:	940b      	str	r4, [sp, #44]	; 0x2c
 80137a0:	940a      	str	r4, [sp, #40]	; 0x28
 80137a2:	2322      	movs	r3, #34	; 0x22
 80137a4:	9a04      	ldr	r2, [sp, #16]
 80137a6:	2600      	movs	r6, #0
 80137a8:	6013      	str	r3, [r2, #0]
 80137aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137ac:	2700      	movs	r7, #0
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d000      	beq.n	80137b4 <_strtod_l+0x5a8>
 80137b2:	e76a      	b.n	801368a <_strtod_l+0x47e>
 80137b4:	e56b      	b.n	801328e <_strtod_l+0x82>
 80137b6:	46c0      	nop			; (mov r8, r8)
 80137b8:	00004e1f 	.word	0x00004e1f
 80137bc:	0801a3fd 	.word	0x0801a3fd
 80137c0:	0801a550 	.word	0x0801a550
 80137c4:	7ff00000 	.word	0x7ff00000
 80137c8:	0801a405 	.word	0x0801a405
 80137cc:	0801a3b8 	.word	0x0801a3b8
 80137d0:	fff80000 	.word	0xfff80000
 80137d4:	0801a588 	.word	0x0801a588
 80137d8:	fcb00000 	.word	0xfcb00000
 80137dc:	0801a560 	.word	0x0801a560
 80137e0:	7ca00000 	.word	0x7ca00000
 80137e4:	7c900000 	.word	0x7c900000
 80137e8:	7fefffff 	.word	0x7fefffff
 80137ec:	2310      	movs	r3, #16
 80137ee:	4023      	ands	r3, r4
 80137f0:	9306      	str	r3, [sp, #24]
 80137f2:	d001      	beq.n	80137f8 <_strtod_l+0x5ec>
 80137f4:	236a      	movs	r3, #106	; 0x6a
 80137f6:	9306      	str	r3, [sp, #24]
 80137f8:	2300      	movs	r3, #0
 80137fa:	0030      	movs	r0, r6
 80137fc:	0039      	movs	r1, r7
 80137fe:	001d      	movs	r5, r3
 8013800:	2c00      	cmp	r4, #0
 8013802:	dd00      	ble.n	8013806 <_strtod_l+0x5fa>
 8013804:	e10e      	b.n	8013a24 <_strtod_l+0x818>
 8013806:	2b00      	cmp	r3, #0
 8013808:	d001      	beq.n	801380e <_strtod_l+0x602>
 801380a:	0006      	movs	r6, r0
 801380c:	000f      	movs	r7, r1
 801380e:	9b06      	ldr	r3, [sp, #24]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d00f      	beq.n	8013834 <_strtod_l+0x628>
 8013814:	236b      	movs	r3, #107	; 0x6b
 8013816:	0079      	lsls	r1, r7, #1
 8013818:	0d49      	lsrs	r1, r1, #21
 801381a:	003a      	movs	r2, r7
 801381c:	1a5b      	subs	r3, r3, r1
 801381e:	2b00      	cmp	r3, #0
 8013820:	dd08      	ble.n	8013834 <_strtod_l+0x628>
 8013822:	2b1f      	cmp	r3, #31
 8013824:	dc00      	bgt.n	8013828 <_strtod_l+0x61c>
 8013826:	e112      	b.n	8013a4e <_strtod_l+0x842>
 8013828:	2600      	movs	r6, #0
 801382a:	2b34      	cmp	r3, #52	; 0x34
 801382c:	dc00      	bgt.n	8013830 <_strtod_l+0x624>
 801382e:	e107      	b.n	8013a40 <_strtod_l+0x834>
 8013830:	27dc      	movs	r7, #220	; 0xdc
 8013832:	04bf      	lsls	r7, r7, #18
 8013834:	2200      	movs	r2, #0
 8013836:	2300      	movs	r3, #0
 8013838:	0030      	movs	r0, r6
 801383a:	0039      	movs	r1, r7
 801383c:	f7ec fe0e 	bl	800045c <__aeabi_dcmpeq>
 8013840:	2800      	cmp	r0, #0
 8013842:	d1aa      	bne.n	801379a <_strtod_l+0x58e>
 8013844:	9b08      	ldr	r3, [sp, #32]
 8013846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013848:	9300      	str	r3, [sp, #0]
 801384a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801384c:	9b05      	ldr	r3, [sp, #20]
 801384e:	9804      	ldr	r0, [sp, #16]
 8013850:	f003 f9ae 	bl	8016bb0 <__s2b>
 8013854:	900b      	str	r0, [sp, #44]	; 0x2c
 8013856:	2800      	cmp	r0, #0
 8013858:	d100      	bne.n	801385c <_strtod_l+0x650>
 801385a:	e709      	b.n	8013670 <_strtod_l+0x464>
 801385c:	9b07      	ldr	r3, [sp, #28]
 801385e:	9a07      	ldr	r2, [sp, #28]
 8013860:	17db      	asrs	r3, r3, #31
 8013862:	4252      	negs	r2, r2
 8013864:	4013      	ands	r3, r2
 8013866:	9315      	str	r3, [sp, #84]	; 0x54
 8013868:	9b07      	ldr	r3, [sp, #28]
 801386a:	2400      	movs	r4, #0
 801386c:	43db      	mvns	r3, r3
 801386e:	9a07      	ldr	r2, [sp, #28]
 8013870:	17db      	asrs	r3, r3, #31
 8013872:	401a      	ands	r2, r3
 8013874:	921c      	str	r2, [sp, #112]	; 0x70
 8013876:	9405      	str	r4, [sp, #20]
 8013878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801387a:	9804      	ldr	r0, [sp, #16]
 801387c:	6859      	ldr	r1, [r3, #4]
 801387e:	f003 f927 	bl	8016ad0 <_Balloc>
 8013882:	900a      	str	r0, [sp, #40]	; 0x28
 8013884:	2800      	cmp	r0, #0
 8013886:	d100      	bne.n	801388a <_strtod_l+0x67e>
 8013888:	e6f6      	b.n	8013678 <_strtod_l+0x46c>
 801388a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801388c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801388e:	691b      	ldr	r3, [r3, #16]
 8013890:	310c      	adds	r1, #12
 8013892:	1c9a      	adds	r2, r3, #2
 8013894:	0092      	lsls	r2, r2, #2
 8013896:	300c      	adds	r0, #12
 8013898:	9308      	str	r3, [sp, #32]
 801389a:	f7ff fa32 	bl	8012d02 <memcpy>
 801389e:	ab24      	add	r3, sp, #144	; 0x90
 80138a0:	9301      	str	r3, [sp, #4]
 80138a2:	ab23      	add	r3, sp, #140	; 0x8c
 80138a4:	9300      	str	r3, [sp, #0]
 80138a6:	0032      	movs	r2, r6
 80138a8:	003b      	movs	r3, r7
 80138aa:	9804      	ldr	r0, [sp, #16]
 80138ac:	960e      	str	r6, [sp, #56]	; 0x38
 80138ae:	970f      	str	r7, [sp, #60]	; 0x3c
 80138b0:	f003 fc22 	bl	80170f8 <__d2b>
 80138b4:	9022      	str	r0, [sp, #136]	; 0x88
 80138b6:	2800      	cmp	r0, #0
 80138b8:	d100      	bne.n	80138bc <_strtod_l+0x6b0>
 80138ba:	e6dd      	b.n	8013678 <_strtod_l+0x46c>
 80138bc:	2101      	movs	r1, #1
 80138be:	9804      	ldr	r0, [sp, #16]
 80138c0:	f003 f9fd 	bl	8016cbe <__i2b>
 80138c4:	9005      	str	r0, [sp, #20]
 80138c6:	2800      	cmp	r0, #0
 80138c8:	d100      	bne.n	80138cc <_strtod_l+0x6c0>
 80138ca:	e6d5      	b.n	8013678 <_strtod_l+0x46c>
 80138cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	da00      	bge.n	80138d4 <_strtod_l+0x6c8>
 80138d2:	e0c1      	b.n	8013a58 <_strtod_l+0x84c>
 80138d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80138d6:	189d      	adds	r5, r3, r2
 80138d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80138da:	4694      	mov	ip, r2
 80138dc:	9906      	ldr	r1, [sp, #24]
 80138de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80138e0:	1a5b      	subs	r3, r3, r1
 80138e2:	2136      	movs	r1, #54	; 0x36
 80138e4:	189b      	adds	r3, r3, r2
 80138e6:	1a8a      	subs	r2, r1, r2
 80138e8:	49b2      	ldr	r1, [pc, #712]	; (8013bb4 <_strtod_l+0x9a8>)
 80138ea:	3b01      	subs	r3, #1
 80138ec:	2001      	movs	r0, #1
 80138ee:	428b      	cmp	r3, r1
 80138f0:	db00      	blt.n	80138f4 <_strtod_l+0x6e8>
 80138f2:	e0bd      	b.n	8013a70 <_strtod_l+0x864>
 80138f4:	1ac9      	subs	r1, r1, r3
 80138f6:	1a52      	subs	r2, r2, r1
 80138f8:	291f      	cmp	r1, #31
 80138fa:	dd00      	ble.n	80138fe <_strtod_l+0x6f2>
 80138fc:	e0b1      	b.n	8013a62 <_strtod_l+0x856>
 80138fe:	4088      	lsls	r0, r1
 8013900:	2300      	movs	r3, #0
 8013902:	9014      	str	r0, [sp, #80]	; 0x50
 8013904:	9310      	str	r3, [sp, #64]	; 0x40
 8013906:	18ab      	adds	r3, r5, r2
 8013908:	9308      	str	r3, [sp, #32]
 801390a:	0013      	movs	r3, r2
 801390c:	9a06      	ldr	r2, [sp, #24]
 801390e:	4463      	add	r3, ip
 8013910:	18d3      	adds	r3, r2, r3
 8013912:	9a08      	ldr	r2, [sp, #32]
 8013914:	930c      	str	r3, [sp, #48]	; 0x30
 8013916:	002b      	movs	r3, r5
 8013918:	4295      	cmp	r5, r2
 801391a:	dd00      	ble.n	801391e <_strtod_l+0x712>
 801391c:	0013      	movs	r3, r2
 801391e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013920:	4293      	cmp	r3, r2
 8013922:	dd00      	ble.n	8013926 <_strtod_l+0x71a>
 8013924:	0013      	movs	r3, r2
 8013926:	2b00      	cmp	r3, #0
 8013928:	dd06      	ble.n	8013938 <_strtod_l+0x72c>
 801392a:	9a08      	ldr	r2, [sp, #32]
 801392c:	1aed      	subs	r5, r5, r3
 801392e:	1ad2      	subs	r2, r2, r3
 8013930:	9208      	str	r2, [sp, #32]
 8013932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013934:	1ad2      	subs	r2, r2, r3
 8013936:	920c      	str	r2, [sp, #48]	; 0x30
 8013938:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801393a:	2b00      	cmp	r3, #0
 801393c:	d017      	beq.n	801396e <_strtod_l+0x762>
 801393e:	001a      	movs	r2, r3
 8013940:	9905      	ldr	r1, [sp, #20]
 8013942:	9804      	ldr	r0, [sp, #16]
 8013944:	f003 fa54 	bl	8016df0 <__pow5mult>
 8013948:	9005      	str	r0, [sp, #20]
 801394a:	2800      	cmp	r0, #0
 801394c:	d100      	bne.n	8013950 <_strtod_l+0x744>
 801394e:	e693      	b.n	8013678 <_strtod_l+0x46c>
 8013950:	0001      	movs	r1, r0
 8013952:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013954:	9804      	ldr	r0, [sp, #16]
 8013956:	f003 f9bb 	bl	8016cd0 <__multiply>
 801395a:	9012      	str	r0, [sp, #72]	; 0x48
 801395c:	2800      	cmp	r0, #0
 801395e:	d100      	bne.n	8013962 <_strtod_l+0x756>
 8013960:	e68a      	b.n	8013678 <_strtod_l+0x46c>
 8013962:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013964:	9804      	ldr	r0, [sp, #16]
 8013966:	f003 f8db 	bl	8016b20 <_Bfree>
 801396a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801396c:	9322      	str	r3, [sp, #136]	; 0x88
 801396e:	9b08      	ldr	r3, [sp, #32]
 8013970:	2b00      	cmp	r3, #0
 8013972:	dd00      	ble.n	8013976 <_strtod_l+0x76a>
 8013974:	e07f      	b.n	8013a76 <_strtod_l+0x86a>
 8013976:	9b07      	ldr	r3, [sp, #28]
 8013978:	2b00      	cmp	r3, #0
 801397a:	dd08      	ble.n	801398e <_strtod_l+0x782>
 801397c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801397e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013980:	9804      	ldr	r0, [sp, #16]
 8013982:	f003 fa35 	bl	8016df0 <__pow5mult>
 8013986:	900a      	str	r0, [sp, #40]	; 0x28
 8013988:	2800      	cmp	r0, #0
 801398a:	d100      	bne.n	801398e <_strtod_l+0x782>
 801398c:	e674      	b.n	8013678 <_strtod_l+0x46c>
 801398e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013990:	2b00      	cmp	r3, #0
 8013992:	dd08      	ble.n	80139a6 <_strtod_l+0x79a>
 8013994:	001a      	movs	r2, r3
 8013996:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013998:	9804      	ldr	r0, [sp, #16]
 801399a:	f003 fa6b 	bl	8016e74 <__lshift>
 801399e:	900a      	str	r0, [sp, #40]	; 0x28
 80139a0:	2800      	cmp	r0, #0
 80139a2:	d100      	bne.n	80139a6 <_strtod_l+0x79a>
 80139a4:	e668      	b.n	8013678 <_strtod_l+0x46c>
 80139a6:	2d00      	cmp	r5, #0
 80139a8:	dd08      	ble.n	80139bc <_strtod_l+0x7b0>
 80139aa:	002a      	movs	r2, r5
 80139ac:	9905      	ldr	r1, [sp, #20]
 80139ae:	9804      	ldr	r0, [sp, #16]
 80139b0:	f003 fa60 	bl	8016e74 <__lshift>
 80139b4:	9005      	str	r0, [sp, #20]
 80139b6:	2800      	cmp	r0, #0
 80139b8:	d100      	bne.n	80139bc <_strtod_l+0x7b0>
 80139ba:	e65d      	b.n	8013678 <_strtod_l+0x46c>
 80139bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139be:	9922      	ldr	r1, [sp, #136]	; 0x88
 80139c0:	9804      	ldr	r0, [sp, #16]
 80139c2:	f003 fac3 	bl	8016f4c <__mdiff>
 80139c6:	1e04      	subs	r4, r0, #0
 80139c8:	d100      	bne.n	80139cc <_strtod_l+0x7c0>
 80139ca:	e655      	b.n	8013678 <_strtod_l+0x46c>
 80139cc:	2500      	movs	r5, #0
 80139ce:	68c3      	ldr	r3, [r0, #12]
 80139d0:	9905      	ldr	r1, [sp, #20]
 80139d2:	60c5      	str	r5, [r0, #12]
 80139d4:	9312      	str	r3, [sp, #72]	; 0x48
 80139d6:	f003 fa9f 	bl	8016f18 <__mcmp>
 80139da:	42a8      	cmp	r0, r5
 80139dc:	da55      	bge.n	8013a8a <_strtod_l+0x87e>
 80139de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80139e0:	42ab      	cmp	r3, r5
 80139e2:	d11b      	bne.n	8013a1c <_strtod_l+0x810>
 80139e4:	42ae      	cmp	r6, r5
 80139e6:	d119      	bne.n	8013a1c <_strtod_l+0x810>
 80139e8:	033b      	lsls	r3, r7, #12
 80139ea:	42ab      	cmp	r3, r5
 80139ec:	d116      	bne.n	8013a1c <_strtod_l+0x810>
 80139ee:	22d6      	movs	r2, #214	; 0xd6
 80139f0:	4b71      	ldr	r3, [pc, #452]	; (8013bb8 <_strtod_l+0x9ac>)
 80139f2:	04d2      	lsls	r2, r2, #19
 80139f4:	403b      	ands	r3, r7
 80139f6:	4293      	cmp	r3, r2
 80139f8:	d910      	bls.n	8013a1c <_strtod_l+0x810>
 80139fa:	6963      	ldr	r3, [r4, #20]
 80139fc:	42ab      	cmp	r3, r5
 80139fe:	d102      	bne.n	8013a06 <_strtod_l+0x7fa>
 8013a00:	6923      	ldr	r3, [r4, #16]
 8013a02:	2b01      	cmp	r3, #1
 8013a04:	dd0a      	ble.n	8013a1c <_strtod_l+0x810>
 8013a06:	0021      	movs	r1, r4
 8013a08:	2201      	movs	r2, #1
 8013a0a:	9804      	ldr	r0, [sp, #16]
 8013a0c:	f003 fa32 	bl	8016e74 <__lshift>
 8013a10:	9905      	ldr	r1, [sp, #20]
 8013a12:	0004      	movs	r4, r0
 8013a14:	f003 fa80 	bl	8016f18 <__mcmp>
 8013a18:	2800      	cmp	r0, #0
 8013a1a:	dc6b      	bgt.n	8013af4 <_strtod_l+0x8e8>
 8013a1c:	9b06      	ldr	r3, [sp, #24]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d178      	bne.n	8013b14 <_strtod_l+0x908>
 8013a22:	e632      	b.n	801368a <_strtod_l+0x47e>
 8013a24:	2201      	movs	r2, #1
 8013a26:	4214      	tst	r4, r2
 8013a28:	d007      	beq.n	8013a3a <_strtod_l+0x82e>
 8013a2a:	4a64      	ldr	r2, [pc, #400]	; (8013bbc <_strtod_l+0x9b0>)
 8013a2c:	00eb      	lsls	r3, r5, #3
 8013a2e:	18d3      	adds	r3, r2, r3
 8013a30:	681a      	ldr	r2, [r3, #0]
 8013a32:	685b      	ldr	r3, [r3, #4]
 8013a34:	f7ee f9fe 	bl	8001e34 <__aeabi_dmul>
 8013a38:	2301      	movs	r3, #1
 8013a3a:	3501      	adds	r5, #1
 8013a3c:	1064      	asrs	r4, r4, #1
 8013a3e:	e6df      	b.n	8013800 <_strtod_l+0x5f4>
 8013a40:	2101      	movs	r1, #1
 8013a42:	3b20      	subs	r3, #32
 8013a44:	4249      	negs	r1, r1
 8013a46:	4099      	lsls	r1, r3
 8013a48:	400a      	ands	r2, r1
 8013a4a:	0017      	movs	r7, r2
 8013a4c:	e6f2      	b.n	8013834 <_strtod_l+0x628>
 8013a4e:	2201      	movs	r2, #1
 8013a50:	4252      	negs	r2, r2
 8013a52:	409a      	lsls	r2, r3
 8013a54:	4016      	ands	r6, r2
 8013a56:	e6ed      	b.n	8013834 <_strtod_l+0x628>
 8013a58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013a5a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013a5c:	1ad2      	subs	r2, r2, r3
 8013a5e:	4694      	mov	ip, r2
 8013a60:	e73c      	b.n	80138dc <_strtod_l+0x6d0>
 8013a62:	4957      	ldr	r1, [pc, #348]	; (8013bc0 <_strtod_l+0x9b4>)
 8013a64:	1acb      	subs	r3, r1, r3
 8013a66:	0001      	movs	r1, r0
 8013a68:	4099      	lsls	r1, r3
 8013a6a:	9110      	str	r1, [sp, #64]	; 0x40
 8013a6c:	9014      	str	r0, [sp, #80]	; 0x50
 8013a6e:	e74a      	b.n	8013906 <_strtod_l+0x6fa>
 8013a70:	2300      	movs	r3, #0
 8013a72:	9310      	str	r3, [sp, #64]	; 0x40
 8013a74:	e7fa      	b.n	8013a6c <_strtod_l+0x860>
 8013a76:	9a08      	ldr	r2, [sp, #32]
 8013a78:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013a7a:	9804      	ldr	r0, [sp, #16]
 8013a7c:	f003 f9fa 	bl	8016e74 <__lshift>
 8013a80:	9022      	str	r0, [sp, #136]	; 0x88
 8013a82:	2800      	cmp	r0, #0
 8013a84:	d000      	beq.n	8013a88 <_strtod_l+0x87c>
 8013a86:	e776      	b.n	8013976 <_strtod_l+0x76a>
 8013a88:	e5f6      	b.n	8013678 <_strtod_l+0x46c>
 8013a8a:	970c      	str	r7, [sp, #48]	; 0x30
 8013a8c:	2800      	cmp	r0, #0
 8013a8e:	d000      	beq.n	8013a92 <_strtod_l+0x886>
 8013a90:	e0a0      	b.n	8013bd4 <_strtod_l+0x9c8>
 8013a92:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a94:	033b      	lsls	r3, r7, #12
 8013a96:	0b1b      	lsrs	r3, r3, #12
 8013a98:	2a00      	cmp	r2, #0
 8013a9a:	d027      	beq.n	8013aec <_strtod_l+0x8e0>
 8013a9c:	4a49      	ldr	r2, [pc, #292]	; (8013bc4 <_strtod_l+0x9b8>)
 8013a9e:	4293      	cmp	r3, r2
 8013aa0:	d157      	bne.n	8013b52 <_strtod_l+0x946>
 8013aa2:	2201      	movs	r2, #1
 8013aa4:	9b06      	ldr	r3, [sp, #24]
 8013aa6:	4252      	negs	r2, r2
 8013aa8:	0031      	movs	r1, r6
 8013aaa:	0010      	movs	r0, r2
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d00b      	beq.n	8013ac8 <_strtod_l+0x8bc>
 8013ab0:	25d4      	movs	r5, #212	; 0xd4
 8013ab2:	4b41      	ldr	r3, [pc, #260]	; (8013bb8 <_strtod_l+0x9ac>)
 8013ab4:	04ed      	lsls	r5, r5, #19
 8013ab6:	403b      	ands	r3, r7
 8013ab8:	0010      	movs	r0, r2
 8013aba:	42ab      	cmp	r3, r5
 8013abc:	d804      	bhi.n	8013ac8 <_strtod_l+0x8bc>
 8013abe:	306c      	adds	r0, #108	; 0x6c
 8013ac0:	0d1b      	lsrs	r3, r3, #20
 8013ac2:	1ac3      	subs	r3, r0, r3
 8013ac4:	409a      	lsls	r2, r3
 8013ac6:	0010      	movs	r0, r2
 8013ac8:	4281      	cmp	r1, r0
 8013aca:	d142      	bne.n	8013b52 <_strtod_l+0x946>
 8013acc:	4b3e      	ldr	r3, [pc, #248]	; (8013bc8 <_strtod_l+0x9bc>)
 8013ace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	d102      	bne.n	8013ada <_strtod_l+0x8ce>
 8013ad4:	1c4b      	adds	r3, r1, #1
 8013ad6:	d100      	bne.n	8013ada <_strtod_l+0x8ce>
 8013ad8:	e5ce      	b.n	8013678 <_strtod_l+0x46c>
 8013ada:	4b37      	ldr	r3, [pc, #220]	; (8013bb8 <_strtod_l+0x9ac>)
 8013adc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ade:	2600      	movs	r6, #0
 8013ae0:	401a      	ands	r2, r3
 8013ae2:	0013      	movs	r3, r2
 8013ae4:	2280      	movs	r2, #128	; 0x80
 8013ae6:	0352      	lsls	r2, r2, #13
 8013ae8:	189f      	adds	r7, r3, r2
 8013aea:	e797      	b.n	8013a1c <_strtod_l+0x810>
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d130      	bne.n	8013b52 <_strtod_l+0x946>
 8013af0:	2e00      	cmp	r6, #0
 8013af2:	d12e      	bne.n	8013b52 <_strtod_l+0x946>
 8013af4:	9906      	ldr	r1, [sp, #24]
 8013af6:	003b      	movs	r3, r7
 8013af8:	4a2f      	ldr	r2, [pc, #188]	; (8013bb8 <_strtod_l+0x9ac>)
 8013afa:	2900      	cmp	r1, #0
 8013afc:	d020      	beq.n	8013b40 <_strtod_l+0x934>
 8013afe:	0011      	movs	r1, r2
 8013b00:	20d6      	movs	r0, #214	; 0xd6
 8013b02:	4039      	ands	r1, r7
 8013b04:	04c0      	lsls	r0, r0, #19
 8013b06:	4281      	cmp	r1, r0
 8013b08:	dc1a      	bgt.n	8013b40 <_strtod_l+0x934>
 8013b0a:	23dc      	movs	r3, #220	; 0xdc
 8013b0c:	049b      	lsls	r3, r3, #18
 8013b0e:	4299      	cmp	r1, r3
 8013b10:	dc00      	bgt.n	8013b14 <_strtod_l+0x908>
 8013b12:	e646      	b.n	80137a2 <_strtod_l+0x596>
 8013b14:	4b2d      	ldr	r3, [pc, #180]	; (8013bcc <_strtod_l+0x9c0>)
 8013b16:	0030      	movs	r0, r6
 8013b18:	931b      	str	r3, [sp, #108]	; 0x6c
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	931a      	str	r3, [sp, #104]	; 0x68
 8013b1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013b20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b22:	0039      	movs	r1, r7
 8013b24:	f7ee f986 	bl	8001e34 <__aeabi_dmul>
 8013b28:	0006      	movs	r6, r0
 8013b2a:	000f      	movs	r7, r1
 8013b2c:	1e0b      	subs	r3, r1, #0
 8013b2e:	d000      	beq.n	8013b32 <_strtod_l+0x926>
 8013b30:	e5ab      	b.n	801368a <_strtod_l+0x47e>
 8013b32:	2800      	cmp	r0, #0
 8013b34:	d000      	beq.n	8013b38 <_strtod_l+0x92c>
 8013b36:	e5a8      	b.n	801368a <_strtod_l+0x47e>
 8013b38:	9a04      	ldr	r2, [sp, #16]
 8013b3a:	3322      	adds	r3, #34	; 0x22
 8013b3c:	6013      	str	r3, [r2, #0]
 8013b3e:	e5a4      	b.n	801368a <_strtod_l+0x47e>
 8013b40:	2601      	movs	r6, #1
 8013b42:	4013      	ands	r3, r2
 8013b44:	4a22      	ldr	r2, [pc, #136]	; (8013bd0 <_strtod_l+0x9c4>)
 8013b46:	4276      	negs	r6, r6
 8013b48:	189b      	adds	r3, r3, r2
 8013b4a:	4a1e      	ldr	r2, [pc, #120]	; (8013bc4 <_strtod_l+0x9b8>)
 8013b4c:	431a      	orrs	r2, r3
 8013b4e:	0017      	movs	r7, r2
 8013b50:	e764      	b.n	8013a1c <_strtod_l+0x810>
 8013b52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d015      	beq.n	8013b84 <_strtod_l+0x978>
 8013b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013b5c:	4213      	tst	r3, r2
 8013b5e:	d100      	bne.n	8013b62 <_strtod_l+0x956>
 8013b60:	e75c      	b.n	8013a1c <_strtod_l+0x810>
 8013b62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013b64:	9a06      	ldr	r2, [sp, #24]
 8013b66:	0030      	movs	r0, r6
 8013b68:	0039      	movs	r1, r7
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d00f      	beq.n	8013b8e <_strtod_l+0x982>
 8013b6e:	f7ff fb35 	bl	80131dc <sulp>
 8013b72:	0002      	movs	r2, r0
 8013b74:	000b      	movs	r3, r1
 8013b76:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013b78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013b7a:	f7ed fa35 	bl	8000fe8 <__aeabi_dadd>
 8013b7e:	0006      	movs	r6, r0
 8013b80:	000f      	movs	r7, r1
 8013b82:	e74b      	b.n	8013a1c <_strtod_l+0x810>
 8013b84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013b86:	4233      	tst	r3, r6
 8013b88:	d100      	bne.n	8013b8c <_strtod_l+0x980>
 8013b8a:	e747      	b.n	8013a1c <_strtod_l+0x810>
 8013b8c:	e7e9      	b.n	8013b62 <_strtod_l+0x956>
 8013b8e:	f7ff fb25 	bl	80131dc <sulp>
 8013b92:	0002      	movs	r2, r0
 8013b94:	000b      	movs	r3, r1
 8013b96:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013b98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013b9a:	f7ee fbbd 	bl	8002318 <__aeabi_dsub>
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	0006      	movs	r6, r0
 8013ba4:	000f      	movs	r7, r1
 8013ba6:	f7ec fc59 	bl	800045c <__aeabi_dcmpeq>
 8013baa:	2800      	cmp	r0, #0
 8013bac:	d000      	beq.n	8013bb0 <_strtod_l+0x9a4>
 8013bae:	e5f8      	b.n	80137a2 <_strtod_l+0x596>
 8013bb0:	e734      	b.n	8013a1c <_strtod_l+0x810>
 8013bb2:	46c0      	nop			; (mov r8, r8)
 8013bb4:	fffffc02 	.word	0xfffffc02
 8013bb8:	7ff00000 	.word	0x7ff00000
 8013bbc:	0801a3d0 	.word	0x0801a3d0
 8013bc0:	fffffbe2 	.word	0xfffffbe2
 8013bc4:	000fffff 	.word	0x000fffff
 8013bc8:	7fefffff 	.word	0x7fefffff
 8013bcc:	39500000 	.word	0x39500000
 8013bd0:	fff00000 	.word	0xfff00000
 8013bd4:	9905      	ldr	r1, [sp, #20]
 8013bd6:	0020      	movs	r0, r4
 8013bd8:	f003 fae2 	bl	80171a0 <__ratio>
 8013bdc:	2380      	movs	r3, #128	; 0x80
 8013bde:	2200      	movs	r2, #0
 8013be0:	05db      	lsls	r3, r3, #23
 8013be2:	9008      	str	r0, [sp, #32]
 8013be4:	9109      	str	r1, [sp, #36]	; 0x24
 8013be6:	f7ec fc49 	bl	800047c <__aeabi_dcmple>
 8013bea:	2800      	cmp	r0, #0
 8013bec:	d100      	bne.n	8013bf0 <_strtod_l+0x9e4>
 8013bee:	e07f      	b.n	8013cf0 <_strtod_l+0xae4>
 8013bf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d04b      	beq.n	8013c8e <_strtod_l+0xa82>
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	4b8a      	ldr	r3, [pc, #552]	; (8013e24 <_strtod_l+0xc18>)
 8013bfa:	9210      	str	r2, [sp, #64]	; 0x40
 8013bfc:	9311      	str	r3, [sp, #68]	; 0x44
 8013bfe:	4b89      	ldr	r3, [pc, #548]	; (8013e24 <_strtod_l+0xc18>)
 8013c00:	9308      	str	r3, [sp, #32]
 8013c02:	4a89      	ldr	r2, [pc, #548]	; (8013e28 <_strtod_l+0xc1c>)
 8013c04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c06:	4013      	ands	r3, r2
 8013c08:	9314      	str	r3, [sp, #80]	; 0x50
 8013c0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013c0c:	4b87      	ldr	r3, [pc, #540]	; (8013e2c <_strtod_l+0xc20>)
 8013c0e:	429a      	cmp	r2, r3
 8013c10:	d000      	beq.n	8013c14 <_strtod_l+0xa08>
 8013c12:	e0ba      	b.n	8013d8a <_strtod_l+0xb7e>
 8013c14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c18:	921a      	str	r2, [sp, #104]	; 0x68
 8013c1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8013c1c:	4a84      	ldr	r2, [pc, #528]	; (8013e30 <_strtod_l+0xc24>)
 8013c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c20:	4694      	mov	ip, r2
 8013c22:	4463      	add	r3, ip
 8013c24:	001f      	movs	r7, r3
 8013c26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013c28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013c2a:	0030      	movs	r0, r6
 8013c2c:	0039      	movs	r1, r7
 8013c2e:	920c      	str	r2, [sp, #48]	; 0x30
 8013c30:	930d      	str	r3, [sp, #52]	; 0x34
 8013c32:	f003 f9ef 	bl	8017014 <__ulp>
 8013c36:	0002      	movs	r2, r0
 8013c38:	000b      	movs	r3, r1
 8013c3a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013c3c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013c3e:	f7ee f8f9 	bl	8001e34 <__aeabi_dmul>
 8013c42:	0032      	movs	r2, r6
 8013c44:	003b      	movs	r3, r7
 8013c46:	f7ed f9cf 	bl	8000fe8 <__aeabi_dadd>
 8013c4a:	4a77      	ldr	r2, [pc, #476]	; (8013e28 <_strtod_l+0xc1c>)
 8013c4c:	4b79      	ldr	r3, [pc, #484]	; (8013e34 <_strtod_l+0xc28>)
 8013c4e:	0006      	movs	r6, r0
 8013c50:	400a      	ands	r2, r1
 8013c52:	429a      	cmp	r2, r3
 8013c54:	d964      	bls.n	8013d20 <_strtod_l+0xb14>
 8013c56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c58:	4a77      	ldr	r2, [pc, #476]	; (8013e38 <_strtod_l+0xc2c>)
 8013c5a:	4293      	cmp	r3, r2
 8013c5c:	d103      	bne.n	8013c66 <_strtod_l+0xa5a>
 8013c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c60:	3301      	adds	r3, #1
 8013c62:	d100      	bne.n	8013c66 <_strtod_l+0xa5a>
 8013c64:	e508      	b.n	8013678 <_strtod_l+0x46c>
 8013c66:	2601      	movs	r6, #1
 8013c68:	4f73      	ldr	r7, [pc, #460]	; (8013e38 <_strtod_l+0xc2c>)
 8013c6a:	4276      	negs	r6, r6
 8013c6c:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013c6e:	9804      	ldr	r0, [sp, #16]
 8013c70:	f002 ff56 	bl	8016b20 <_Bfree>
 8013c74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c76:	9804      	ldr	r0, [sp, #16]
 8013c78:	f002 ff52 	bl	8016b20 <_Bfree>
 8013c7c:	9905      	ldr	r1, [sp, #20]
 8013c7e:	9804      	ldr	r0, [sp, #16]
 8013c80:	f002 ff4e 	bl	8016b20 <_Bfree>
 8013c84:	0021      	movs	r1, r4
 8013c86:	9804      	ldr	r0, [sp, #16]
 8013c88:	f002 ff4a 	bl	8016b20 <_Bfree>
 8013c8c:	e5f4      	b.n	8013878 <_strtod_l+0x66c>
 8013c8e:	2e00      	cmp	r6, #0
 8013c90:	d11e      	bne.n	8013cd0 <_strtod_l+0xac4>
 8013c92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c94:	031b      	lsls	r3, r3, #12
 8013c96:	d121      	bne.n	8013cdc <_strtod_l+0xad0>
 8013c98:	9808      	ldr	r0, [sp, #32]
 8013c9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	4b61      	ldr	r3, [pc, #388]	; (8013e24 <_strtod_l+0xc18>)
 8013ca0:	f7ec fbe2 	bl	8000468 <__aeabi_dcmplt>
 8013ca4:	2800      	cmp	r0, #0
 8013ca6:	d11f      	bne.n	8013ce8 <_strtod_l+0xadc>
 8013ca8:	9808      	ldr	r0, [sp, #32]
 8013caa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013cac:	2200      	movs	r2, #0
 8013cae:	4b63      	ldr	r3, [pc, #396]	; (8013e3c <_strtod_l+0xc30>)
 8013cb0:	f7ee f8c0 	bl	8001e34 <__aeabi_dmul>
 8013cb4:	0005      	movs	r5, r0
 8013cb6:	9108      	str	r1, [sp, #32]
 8013cb8:	2280      	movs	r2, #128	; 0x80
 8013cba:	0612      	lsls	r2, r2, #24
 8013cbc:	4694      	mov	ip, r2
 8013cbe:	9b08      	ldr	r3, [sp, #32]
 8013cc0:	951e      	str	r5, [sp, #120]	; 0x78
 8013cc2:	4463      	add	r3, ip
 8013cc4:	931f      	str	r3, [sp, #124]	; 0x7c
 8013cc6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013cc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013cca:	9210      	str	r2, [sp, #64]	; 0x40
 8013ccc:	9311      	str	r3, [sp, #68]	; 0x44
 8013cce:	e798      	b.n	8013c02 <_strtod_l+0x9f6>
 8013cd0:	2e01      	cmp	r6, #1
 8013cd2:	d103      	bne.n	8013cdc <_strtod_l+0xad0>
 8013cd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d100      	bne.n	8013cdc <_strtod_l+0xad0>
 8013cda:	e562      	b.n	80137a2 <_strtod_l+0x596>
 8013cdc:	2200      	movs	r2, #0
 8013cde:	4b58      	ldr	r3, [pc, #352]	; (8013e40 <_strtod_l+0xc34>)
 8013ce0:	2500      	movs	r5, #0
 8013ce2:	9210      	str	r2, [sp, #64]	; 0x40
 8013ce4:	9311      	str	r3, [sp, #68]	; 0x44
 8013ce6:	e78a      	b.n	8013bfe <_strtod_l+0x9f2>
 8013ce8:	4b54      	ldr	r3, [pc, #336]	; (8013e3c <_strtod_l+0xc30>)
 8013cea:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013cec:	9308      	str	r3, [sp, #32]
 8013cee:	e7e3      	b.n	8013cb8 <_strtod_l+0xaac>
 8013cf0:	4b52      	ldr	r3, [pc, #328]	; (8013e3c <_strtod_l+0xc30>)
 8013cf2:	9808      	ldr	r0, [sp, #32]
 8013cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	f7ee f89c 	bl	8001e34 <__aeabi_dmul>
 8013cfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013cfe:	0005      	movs	r5, r0
 8013d00:	9108      	str	r1, [sp, #32]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d107      	bne.n	8013d16 <_strtod_l+0xb0a>
 8013d06:	2380      	movs	r3, #128	; 0x80
 8013d08:	061b      	lsls	r3, r3, #24
 8013d0a:	18cb      	adds	r3, r1, r3
 8013d0c:	9016      	str	r0, [sp, #88]	; 0x58
 8013d0e:	9317      	str	r3, [sp, #92]	; 0x5c
 8013d10:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013d12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d14:	e7d9      	b.n	8013cca <_strtod_l+0xabe>
 8013d16:	0002      	movs	r2, r0
 8013d18:	9b08      	ldr	r3, [sp, #32]
 8013d1a:	9216      	str	r2, [sp, #88]	; 0x58
 8013d1c:	9317      	str	r3, [sp, #92]	; 0x5c
 8013d1e:	e7f7      	b.n	8013d10 <_strtod_l+0xb04>
 8013d20:	23d4      	movs	r3, #212	; 0xd4
 8013d22:	049b      	lsls	r3, r3, #18
 8013d24:	18cf      	adds	r7, r1, r3
 8013d26:	9b06      	ldr	r3, [sp, #24]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d19f      	bne.n	8013c6c <_strtod_l+0xa60>
 8013d2c:	4b3e      	ldr	r3, [pc, #248]	; (8013e28 <_strtod_l+0xc1c>)
 8013d2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013d30:	970c      	str	r7, [sp, #48]	; 0x30
 8013d32:	403b      	ands	r3, r7
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d199      	bne.n	8013c6c <_strtod_l+0xa60>
 8013d38:	9908      	ldr	r1, [sp, #32]
 8013d3a:	0028      	movs	r0, r5
 8013d3c:	f7ee fe50 	bl	80029e0 <__aeabi_d2iz>
 8013d40:	f7ee fe84 	bl	8002a4c <__aeabi_i2d>
 8013d44:	000b      	movs	r3, r1
 8013d46:	0002      	movs	r2, r0
 8013d48:	9908      	ldr	r1, [sp, #32]
 8013d4a:	0028      	movs	r0, r5
 8013d4c:	f7ee fae4 	bl	8002318 <__aeabi_dsub>
 8013d50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013d52:	9008      	str	r0, [sp, #32]
 8013d54:	9109      	str	r1, [sp, #36]	; 0x24
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d104      	bne.n	8013d64 <_strtod_l+0xb58>
 8013d5a:	2e00      	cmp	r6, #0
 8013d5c:	d102      	bne.n	8013d64 <_strtod_l+0xb58>
 8013d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d60:	031b      	lsls	r3, r3, #12
 8013d62:	d058      	beq.n	8013e16 <_strtod_l+0xc0a>
 8013d64:	9808      	ldr	r0, [sp, #32]
 8013d66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d68:	4a36      	ldr	r2, [pc, #216]	; (8013e44 <_strtod_l+0xc38>)
 8013d6a:	4b37      	ldr	r3, [pc, #220]	; (8013e48 <_strtod_l+0xc3c>)
 8013d6c:	f7ec fb7c 	bl	8000468 <__aeabi_dcmplt>
 8013d70:	2800      	cmp	r0, #0
 8013d72:	d000      	beq.n	8013d76 <_strtod_l+0xb6a>
 8013d74:	e489      	b.n	801368a <_strtod_l+0x47e>
 8013d76:	9808      	ldr	r0, [sp, #32]
 8013d78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d7a:	4a34      	ldr	r2, [pc, #208]	; (8013e4c <_strtod_l+0xc40>)
 8013d7c:	4b2f      	ldr	r3, [pc, #188]	; (8013e3c <_strtod_l+0xc30>)
 8013d7e:	f7ec fb87 	bl	8000490 <__aeabi_dcmpgt>
 8013d82:	2800      	cmp	r0, #0
 8013d84:	d100      	bne.n	8013d88 <_strtod_l+0xb7c>
 8013d86:	e771      	b.n	8013c6c <_strtod_l+0xa60>
 8013d88:	e47f      	b.n	801368a <_strtod_l+0x47e>
 8013d8a:	9b06      	ldr	r3, [sp, #24]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d02a      	beq.n	8013de6 <_strtod_l+0xbda>
 8013d90:	23d4      	movs	r3, #212	; 0xd4
 8013d92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013d94:	04db      	lsls	r3, r3, #19
 8013d96:	429a      	cmp	r2, r3
 8013d98:	d825      	bhi.n	8013de6 <_strtod_l+0xbda>
 8013d9a:	4a2d      	ldr	r2, [pc, #180]	; (8013e50 <_strtod_l+0xc44>)
 8013d9c:	4b2d      	ldr	r3, [pc, #180]	; (8013e54 <_strtod_l+0xc48>)
 8013d9e:	0028      	movs	r0, r5
 8013da0:	9908      	ldr	r1, [sp, #32]
 8013da2:	f7ec fb6b 	bl	800047c <__aeabi_dcmple>
 8013da6:	2800      	cmp	r0, #0
 8013da8:	d016      	beq.n	8013dd8 <_strtod_l+0xbcc>
 8013daa:	0028      	movs	r0, r5
 8013dac:	9908      	ldr	r1, [sp, #32]
 8013dae:	f7ec fc1f 	bl	80005f0 <__aeabi_d2uiz>
 8013db2:	2800      	cmp	r0, #0
 8013db4:	d100      	bne.n	8013db8 <_strtod_l+0xbac>
 8013db6:	3001      	adds	r0, #1
 8013db8:	f7ee fe82 	bl	8002ac0 <__aeabi_ui2d>
 8013dbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013dbe:	0005      	movs	r5, r0
 8013dc0:	9108      	str	r1, [sp, #32]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d122      	bne.n	8013e0c <_strtod_l+0xc00>
 8013dc6:	2380      	movs	r3, #128	; 0x80
 8013dc8:	061b      	lsls	r3, r3, #24
 8013dca:	18cb      	adds	r3, r1, r3
 8013dcc:	9018      	str	r0, [sp, #96]	; 0x60
 8013dce:	9319      	str	r3, [sp, #100]	; 0x64
 8013dd0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013dd2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013dd4:	9210      	str	r2, [sp, #64]	; 0x40
 8013dd6:	9311      	str	r3, [sp, #68]	; 0x44
 8013dd8:	22d6      	movs	r2, #214	; 0xd6
 8013dda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ddc:	04d2      	lsls	r2, r2, #19
 8013dde:	189b      	adds	r3, r3, r2
 8013de0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013de2:	1a9b      	subs	r3, r3, r2
 8013de4:	9311      	str	r3, [sp, #68]	; 0x44
 8013de6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013de8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013dea:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013dec:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013dee:	f003 f911 	bl	8017014 <__ulp>
 8013df2:	0002      	movs	r2, r0
 8013df4:	000b      	movs	r3, r1
 8013df6:	0030      	movs	r0, r6
 8013df8:	0039      	movs	r1, r7
 8013dfa:	f7ee f81b 	bl	8001e34 <__aeabi_dmul>
 8013dfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013e00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e02:	f7ed f8f1 	bl	8000fe8 <__aeabi_dadd>
 8013e06:	0006      	movs	r6, r0
 8013e08:	000f      	movs	r7, r1
 8013e0a:	e78c      	b.n	8013d26 <_strtod_l+0xb1a>
 8013e0c:	0002      	movs	r2, r0
 8013e0e:	9b08      	ldr	r3, [sp, #32]
 8013e10:	9218      	str	r2, [sp, #96]	; 0x60
 8013e12:	9319      	str	r3, [sp, #100]	; 0x64
 8013e14:	e7dc      	b.n	8013dd0 <_strtod_l+0xbc4>
 8013e16:	4a0b      	ldr	r2, [pc, #44]	; (8013e44 <_strtod_l+0xc38>)
 8013e18:	4b0f      	ldr	r3, [pc, #60]	; (8013e58 <_strtod_l+0xc4c>)
 8013e1a:	9808      	ldr	r0, [sp, #32]
 8013e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e1e:	f7ec fb23 	bl	8000468 <__aeabi_dcmplt>
 8013e22:	e7ae      	b.n	8013d82 <_strtod_l+0xb76>
 8013e24:	3ff00000 	.word	0x3ff00000
 8013e28:	7ff00000 	.word	0x7ff00000
 8013e2c:	7fe00000 	.word	0x7fe00000
 8013e30:	fcb00000 	.word	0xfcb00000
 8013e34:	7c9fffff 	.word	0x7c9fffff
 8013e38:	7fefffff 	.word	0x7fefffff
 8013e3c:	3fe00000 	.word	0x3fe00000
 8013e40:	bff00000 	.word	0xbff00000
 8013e44:	94a03595 	.word	0x94a03595
 8013e48:	3fdfffff 	.word	0x3fdfffff
 8013e4c:	35afe535 	.word	0x35afe535
 8013e50:	ffc00000 	.word	0xffc00000
 8013e54:	41dfffff 	.word	0x41dfffff
 8013e58:	3fcfffff 	.word	0x3fcfffff

08013e5c <strtod>:
 8013e5c:	4b06      	ldr	r3, [pc, #24]	; (8013e78 <strtod+0x1c>)
 8013e5e:	b510      	push	{r4, lr}
 8013e60:	0004      	movs	r4, r0
 8013e62:	6818      	ldr	r0, [r3, #0]
 8013e64:	000a      	movs	r2, r1
 8013e66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d100      	bne.n	8013e6e <strtod+0x12>
 8013e6c:	4b03      	ldr	r3, [pc, #12]	; (8013e7c <strtod+0x20>)
 8013e6e:	0021      	movs	r1, r4
 8013e70:	f7ff f9cc 	bl	801320c <_strtod_l>
 8013e74:	bd10      	pop	{r4, pc}
 8013e76:	46c0      	nop			; (mov r8, r8)
 8013e78:	200000c8 	.word	0x200000c8
 8013e7c:	200004f8 	.word	0x200004f8

08013e80 <strtok>:
 8013e80:	4b03      	ldr	r3, [pc, #12]	; (8013e90 <strtok+0x10>)
 8013e82:	b510      	push	{r4, lr}
 8013e84:	681a      	ldr	r2, [r3, #0]
 8013e86:	2301      	movs	r3, #1
 8013e88:	325c      	adds	r2, #92	; 0x5c
 8013e8a:	f000 f803 	bl	8013e94 <__strtok_r>
 8013e8e:	bd10      	pop	{r4, pc}
 8013e90:	200000c8 	.word	0x200000c8

08013e94 <__strtok_r>:
 8013e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e96:	2800      	cmp	r0, #0
 8013e98:	d104      	bne.n	8013ea4 <__strtok_r+0x10>
 8013e9a:	6810      	ldr	r0, [r2, #0]
 8013e9c:	2800      	cmp	r0, #0
 8013e9e:	d101      	bne.n	8013ea4 <__strtok_r+0x10>
 8013ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ea2:	0020      	movs	r0, r4
 8013ea4:	000e      	movs	r6, r1
 8013ea6:	7805      	ldrb	r5, [r0, #0]
 8013ea8:	1c44      	adds	r4, r0, #1
 8013eaa:	7837      	ldrb	r7, [r6, #0]
 8013eac:	2f00      	cmp	r7, #0
 8013eae:	d104      	bne.n	8013eba <__strtok_r+0x26>
 8013eb0:	2d00      	cmp	r5, #0
 8013eb2:	d110      	bne.n	8013ed6 <__strtok_r+0x42>
 8013eb4:	6015      	str	r5, [r2, #0]
 8013eb6:	0028      	movs	r0, r5
 8013eb8:	e7f2      	b.n	8013ea0 <__strtok_r+0xc>
 8013eba:	3601      	adds	r6, #1
 8013ebc:	42bd      	cmp	r5, r7
 8013ebe:	d1f4      	bne.n	8013eaa <__strtok_r+0x16>
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d1ee      	bne.n	8013ea2 <__strtok_r+0xe>
 8013ec4:	6014      	str	r4, [r2, #0]
 8013ec6:	7003      	strb	r3, [r0, #0]
 8013ec8:	e7ea      	b.n	8013ea0 <__strtok_r+0xc>
 8013eca:	0033      	movs	r3, r6
 8013ecc:	e00d      	b.n	8013eea <__strtok_r+0x56>
 8013ece:	3501      	adds	r5, #1
 8013ed0:	2f00      	cmp	r7, #0
 8013ed2:	d103      	bne.n	8013edc <__strtok_r+0x48>
 8013ed4:	001c      	movs	r4, r3
 8013ed6:	000d      	movs	r5, r1
 8013ed8:	7826      	ldrb	r6, [r4, #0]
 8013eda:	1c63      	adds	r3, r4, #1
 8013edc:	782f      	ldrb	r7, [r5, #0]
 8013ede:	42be      	cmp	r6, r7
 8013ee0:	d1f5      	bne.n	8013ece <__strtok_r+0x3a>
 8013ee2:	2e00      	cmp	r6, #0
 8013ee4:	d0f1      	beq.n	8013eca <__strtok_r+0x36>
 8013ee6:	2100      	movs	r1, #0
 8013ee8:	7021      	strb	r1, [r4, #0]
 8013eea:	6013      	str	r3, [r2, #0]
 8013eec:	e7d8      	b.n	8013ea0 <__strtok_r+0xc>
	...

08013ef0 <_strtol_l.isra.0>:
 8013ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ef2:	001f      	movs	r7, r3
 8013ef4:	000e      	movs	r6, r1
 8013ef6:	b087      	sub	sp, #28
 8013ef8:	9005      	str	r0, [sp, #20]
 8013efa:	9101      	str	r1, [sp, #4]
 8013efc:	9202      	str	r2, [sp, #8]
 8013efe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013f00:	7834      	ldrb	r4, [r6, #0]
 8013f02:	f7fe fc9f 	bl	8012844 <__locale_ctype_ptr_l>
 8013f06:	2208      	movs	r2, #8
 8013f08:	1900      	adds	r0, r0, r4
 8013f0a:	7843      	ldrb	r3, [r0, #1]
 8013f0c:	1c75      	adds	r5, r6, #1
 8013f0e:	4013      	ands	r3, r2
 8013f10:	d136      	bne.n	8013f80 <_strtol_l.isra.0+0x90>
 8013f12:	2c2d      	cmp	r4, #45	; 0x2d
 8013f14:	d136      	bne.n	8013f84 <_strtol_l.isra.0+0x94>
 8013f16:	1cb5      	adds	r5, r6, #2
 8013f18:	7874      	ldrb	r4, [r6, #1]
 8013f1a:	2601      	movs	r6, #1
 8013f1c:	2f00      	cmp	r7, #0
 8013f1e:	d062      	beq.n	8013fe6 <_strtol_l.isra.0+0xf6>
 8013f20:	2f10      	cmp	r7, #16
 8013f22:	d109      	bne.n	8013f38 <_strtol_l.isra.0+0x48>
 8013f24:	2c30      	cmp	r4, #48	; 0x30
 8013f26:	d107      	bne.n	8013f38 <_strtol_l.isra.0+0x48>
 8013f28:	2220      	movs	r2, #32
 8013f2a:	782b      	ldrb	r3, [r5, #0]
 8013f2c:	4393      	bics	r3, r2
 8013f2e:	2b58      	cmp	r3, #88	; 0x58
 8013f30:	d154      	bne.n	8013fdc <_strtol_l.isra.0+0xec>
 8013f32:	2710      	movs	r7, #16
 8013f34:	786c      	ldrb	r4, [r5, #1]
 8013f36:	3502      	adds	r5, #2
 8013f38:	4b2d      	ldr	r3, [pc, #180]	; (8013ff0 <_strtol_l.isra.0+0x100>)
 8013f3a:	0039      	movs	r1, r7
 8013f3c:	18f3      	adds	r3, r6, r3
 8013f3e:	0018      	movs	r0, r3
 8013f40:	9303      	str	r3, [sp, #12]
 8013f42:	f7ec f98b 	bl	800025c <__aeabi_uidivmod>
 8013f46:	9104      	str	r1, [sp, #16]
 8013f48:	2101      	movs	r1, #1
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	4249      	negs	r1, r1
 8013f4e:	0002      	movs	r2, r0
 8013f50:	468c      	mov	ip, r1
 8013f52:	0018      	movs	r0, r3
 8013f54:	0021      	movs	r1, r4
 8013f56:	3930      	subs	r1, #48	; 0x30
 8013f58:	2909      	cmp	r1, #9
 8013f5a:	d81a      	bhi.n	8013f92 <_strtol_l.isra.0+0xa2>
 8013f5c:	000c      	movs	r4, r1
 8013f5e:	42a7      	cmp	r7, r4
 8013f60:	dd23      	ble.n	8013faa <_strtol_l.isra.0+0xba>
 8013f62:	1c59      	adds	r1, r3, #1
 8013f64:	d009      	beq.n	8013f7a <_strtol_l.isra.0+0x8a>
 8013f66:	4663      	mov	r3, ip
 8013f68:	4282      	cmp	r2, r0
 8013f6a:	d306      	bcc.n	8013f7a <_strtol_l.isra.0+0x8a>
 8013f6c:	d102      	bne.n	8013f74 <_strtol_l.isra.0+0x84>
 8013f6e:	9904      	ldr	r1, [sp, #16]
 8013f70:	42a1      	cmp	r1, r4
 8013f72:	db02      	blt.n	8013f7a <_strtol_l.isra.0+0x8a>
 8013f74:	2301      	movs	r3, #1
 8013f76:	4378      	muls	r0, r7
 8013f78:	1820      	adds	r0, r4, r0
 8013f7a:	782c      	ldrb	r4, [r5, #0]
 8013f7c:	3501      	adds	r5, #1
 8013f7e:	e7e9      	b.n	8013f54 <_strtol_l.isra.0+0x64>
 8013f80:	002e      	movs	r6, r5
 8013f82:	e7bc      	b.n	8013efe <_strtol_l.isra.0+0xe>
 8013f84:	2c2b      	cmp	r4, #43	; 0x2b
 8013f86:	d001      	beq.n	8013f8c <_strtol_l.isra.0+0x9c>
 8013f88:	001e      	movs	r6, r3
 8013f8a:	e7c7      	b.n	8013f1c <_strtol_l.isra.0+0x2c>
 8013f8c:	1cb5      	adds	r5, r6, #2
 8013f8e:	7874      	ldrb	r4, [r6, #1]
 8013f90:	e7fa      	b.n	8013f88 <_strtol_l.isra.0+0x98>
 8013f92:	0021      	movs	r1, r4
 8013f94:	3941      	subs	r1, #65	; 0x41
 8013f96:	2919      	cmp	r1, #25
 8013f98:	d801      	bhi.n	8013f9e <_strtol_l.isra.0+0xae>
 8013f9a:	3c37      	subs	r4, #55	; 0x37
 8013f9c:	e7df      	b.n	8013f5e <_strtol_l.isra.0+0x6e>
 8013f9e:	0021      	movs	r1, r4
 8013fa0:	3961      	subs	r1, #97	; 0x61
 8013fa2:	2919      	cmp	r1, #25
 8013fa4:	d801      	bhi.n	8013faa <_strtol_l.isra.0+0xba>
 8013fa6:	3c57      	subs	r4, #87	; 0x57
 8013fa8:	e7d9      	b.n	8013f5e <_strtol_l.isra.0+0x6e>
 8013faa:	1c5a      	adds	r2, r3, #1
 8013fac:	d108      	bne.n	8013fc0 <_strtol_l.isra.0+0xd0>
 8013fae:	9a05      	ldr	r2, [sp, #20]
 8013fb0:	3323      	adds	r3, #35	; 0x23
 8013fb2:	6013      	str	r3, [r2, #0]
 8013fb4:	9b02      	ldr	r3, [sp, #8]
 8013fb6:	9803      	ldr	r0, [sp, #12]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d109      	bne.n	8013fd0 <_strtol_l.isra.0+0xe0>
 8013fbc:	b007      	add	sp, #28
 8013fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fc0:	2e00      	cmp	r6, #0
 8013fc2:	d000      	beq.n	8013fc6 <_strtol_l.isra.0+0xd6>
 8013fc4:	4240      	negs	r0, r0
 8013fc6:	9a02      	ldr	r2, [sp, #8]
 8013fc8:	2a00      	cmp	r2, #0
 8013fca:	d0f7      	beq.n	8013fbc <_strtol_l.isra.0+0xcc>
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d001      	beq.n	8013fd4 <_strtol_l.isra.0+0xe4>
 8013fd0:	1e6b      	subs	r3, r5, #1
 8013fd2:	9301      	str	r3, [sp, #4]
 8013fd4:	9b02      	ldr	r3, [sp, #8]
 8013fd6:	9a01      	ldr	r2, [sp, #4]
 8013fd8:	601a      	str	r2, [r3, #0]
 8013fda:	e7ef      	b.n	8013fbc <_strtol_l.isra.0+0xcc>
 8013fdc:	2430      	movs	r4, #48	; 0x30
 8013fde:	2f00      	cmp	r7, #0
 8013fe0:	d1aa      	bne.n	8013f38 <_strtol_l.isra.0+0x48>
 8013fe2:	2708      	movs	r7, #8
 8013fe4:	e7a8      	b.n	8013f38 <_strtol_l.isra.0+0x48>
 8013fe6:	2c30      	cmp	r4, #48	; 0x30
 8013fe8:	d09e      	beq.n	8013f28 <_strtol_l.isra.0+0x38>
 8013fea:	270a      	movs	r7, #10
 8013fec:	e7a4      	b.n	8013f38 <_strtol_l.isra.0+0x48>
 8013fee:	46c0      	nop			; (mov r8, r8)
 8013ff0:	7fffffff 	.word	0x7fffffff

08013ff4 <strtol>:
 8013ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ff6:	0013      	movs	r3, r2
 8013ff8:	4a06      	ldr	r2, [pc, #24]	; (8014014 <strtol+0x20>)
 8013ffa:	0005      	movs	r5, r0
 8013ffc:	6810      	ldr	r0, [r2, #0]
 8013ffe:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8014000:	2c00      	cmp	r4, #0
 8014002:	d100      	bne.n	8014006 <strtol+0x12>
 8014004:	4c04      	ldr	r4, [pc, #16]	; (8014018 <strtol+0x24>)
 8014006:	000a      	movs	r2, r1
 8014008:	9400      	str	r4, [sp, #0]
 801400a:	0029      	movs	r1, r5
 801400c:	f7ff ff70 	bl	8013ef0 <_strtol_l.isra.0>
 8014010:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8014012:	46c0      	nop			; (mov r8, r8)
 8014014:	200000c8 	.word	0x200000c8
 8014018:	200004f8 	.word	0x200004f8

0801401c <_svfprintf_r>:
 801401c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801401e:	b0d9      	sub	sp, #356	; 0x164
 8014020:	910b      	str	r1, [sp, #44]	; 0x2c
 8014022:	9209      	str	r2, [sp, #36]	; 0x24
 8014024:	001c      	movs	r4, r3
 8014026:	900a      	str	r0, [sp, #40]	; 0x28
 8014028:	f002 fd26 	bl	8016a78 <_localeconv_r>
 801402c:	6803      	ldr	r3, [r0, #0]
 801402e:	0018      	movs	r0, r3
 8014030:	931c      	str	r3, [sp, #112]	; 0x70
 8014032:	f7ec f871 	bl	8000118 <strlen>
 8014036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014038:	9014      	str	r0, [sp, #80]	; 0x50
 801403a:	899b      	ldrh	r3, [r3, #12]
 801403c:	061b      	lsls	r3, r3, #24
 801403e:	d518      	bpl.n	8014072 <_svfprintf_r+0x56>
 8014040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014042:	691b      	ldr	r3, [r3, #16]
 8014044:	9308      	str	r3, [sp, #32]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d113      	bne.n	8014072 <_svfprintf_r+0x56>
 801404a:	2140      	movs	r1, #64	; 0x40
 801404c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801404e:	f7fe fc1f 	bl	8012890 <_malloc_r>
 8014052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014054:	6018      	str	r0, [r3, #0]
 8014056:	6118      	str	r0, [r3, #16]
 8014058:	2800      	cmp	r0, #0
 801405a:	d107      	bne.n	801406c <_svfprintf_r+0x50>
 801405c:	230c      	movs	r3, #12
 801405e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014060:	6013      	str	r3, [r2, #0]
 8014062:	3b0d      	subs	r3, #13
 8014064:	9315      	str	r3, [sp, #84]	; 0x54
 8014066:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014068:	b059      	add	sp, #356	; 0x164
 801406a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801406c:	2340      	movs	r3, #64	; 0x40
 801406e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014070:	6153      	str	r3, [r2, #20]
 8014072:	2600      	movs	r6, #0
 8014074:	af2f      	add	r7, sp, #188	; 0xbc
 8014076:	972c      	str	r7, [sp, #176]	; 0xb0
 8014078:	962e      	str	r6, [sp, #184]	; 0xb8
 801407a:	962d      	str	r6, [sp, #180]	; 0xb4
 801407c:	960d      	str	r6, [sp, #52]	; 0x34
 801407e:	961a      	str	r6, [sp, #104]	; 0x68
 8014080:	9619      	str	r6, [sp, #100]	; 0x64
 8014082:	961e      	str	r6, [sp, #120]	; 0x78
 8014084:	961d      	str	r6, [sp, #116]	; 0x74
 8014086:	9613      	str	r6, [sp, #76]	; 0x4c
 8014088:	961b      	str	r6, [sp, #108]	; 0x6c
 801408a:	961f      	str	r6, [sp, #124]	; 0x7c
 801408c:	9615      	str	r6, [sp, #84]	; 0x54
 801408e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014090:	782b      	ldrb	r3, [r5, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d002      	beq.n	801409c <_svfprintf_r+0x80>
 8014096:	2b25      	cmp	r3, #37	; 0x25
 8014098:	d000      	beq.n	801409c <_svfprintf_r+0x80>
 801409a:	e095      	b.n	80141c8 <_svfprintf_r+0x1ac>
 801409c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801409e:	1aee      	subs	r6, r5, r3
 80140a0:	d017      	beq.n	80140d2 <_svfprintf_r+0xb6>
 80140a2:	603b      	str	r3, [r7, #0]
 80140a4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80140a6:	607e      	str	r6, [r7, #4]
 80140a8:	199b      	adds	r3, r3, r6
 80140aa:	932e      	str	r3, [sp, #184]	; 0xb8
 80140ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80140ae:	3708      	adds	r7, #8
 80140b0:	9308      	str	r3, [sp, #32]
 80140b2:	3301      	adds	r3, #1
 80140b4:	932d      	str	r3, [sp, #180]	; 0xb4
 80140b6:	2b07      	cmp	r3, #7
 80140b8:	dd08      	ble.n	80140cc <_svfprintf_r+0xb0>
 80140ba:	aa2c      	add	r2, sp, #176	; 0xb0
 80140bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80140be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80140c0:	f003 f900 	bl	80172c4 <__ssprint_r>
 80140c4:	2800      	cmp	r0, #0
 80140c6:	d000      	beq.n	80140ca <_svfprintf_r+0xae>
 80140c8:	e2d9      	b.n	801467e <_svfprintf_r+0x662>
 80140ca:	af2f      	add	r7, sp, #188	; 0xbc
 80140cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80140ce:	199b      	adds	r3, r3, r6
 80140d0:	9315      	str	r3, [sp, #84]	; 0x54
 80140d2:	782b      	ldrb	r3, [r5, #0]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d101      	bne.n	80140dc <_svfprintf_r+0xc0>
 80140d8:	f001 f9e5 	bl	80154a6 <_svfprintf_r+0x148a>
 80140dc:	1c6b      	adds	r3, r5, #1
 80140de:	221b      	movs	r2, #27
 80140e0:	9311      	str	r3, [sp, #68]	; 0x44
 80140e2:	2300      	movs	r3, #0
 80140e4:	a91e      	add	r1, sp, #120	; 0x78
 80140e6:	1852      	adds	r2, r2, r1
 80140e8:	7013      	strb	r3, [r2, #0]
 80140ea:	2201      	movs	r2, #1
 80140ec:	001e      	movs	r6, r3
 80140ee:	2520      	movs	r5, #32
 80140f0:	4252      	negs	r2, r2
 80140f2:	9208      	str	r2, [sp, #32]
 80140f4:	9316      	str	r3, [sp, #88]	; 0x58
 80140f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80140f8:	781b      	ldrb	r3, [r3, #0]
 80140fa:	930e      	str	r3, [sp, #56]	; 0x38
 80140fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80140fe:	3301      	adds	r3, #1
 8014100:	9311      	str	r3, [sp, #68]	; 0x44
 8014102:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014104:	3820      	subs	r0, #32
 8014106:	285a      	cmp	r0, #90	; 0x5a
 8014108:	d901      	bls.n	801410e <_svfprintf_r+0xf2>
 801410a:	f000 fe3d 	bl	8014d88 <_svfprintf_r+0xd6c>
 801410e:	f7ec f815 	bl	800013c <__gnu_thumb1_case_shi>
 8014112:	009e      	.short	0x009e
 8014114:	063b063b 	.word	0x063b063b
 8014118:	063b00a7 	.word	0x063b00a7
 801411c:	063b063b 	.word	0x063b063b
 8014120:	063b0080 	.word	0x063b0080
 8014124:	00a9063b 	.word	0x00a9063b
 8014128:	063b00b3 	.word	0x063b00b3
 801412c:	00b900b1 	.word	0x00b900b1
 8014130:	00dd063b 	.word	0x00dd063b
 8014134:	00df00df 	.word	0x00df00df
 8014138:	00df00df 	.word	0x00df00df
 801413c:	00df00df 	.word	0x00df00df
 8014140:	00df00df 	.word	0x00df00df
 8014144:	063b00df 	.word	0x063b00df
 8014148:	063b063b 	.word	0x063b063b
 801414c:	063b063b 	.word	0x063b063b
 8014150:	063b063b 	.word	0x063b063b
 8014154:	063b0240 	.word	0x063b0240
 8014158:	01fd010a 	.word	0x01fd010a
 801415c:	02400240 	.word	0x02400240
 8014160:	063b0240 	.word	0x063b0240
 8014164:	063b063b 	.word	0x063b063b
 8014168:	00f1063b 	.word	0x00f1063b
 801416c:	063b063b 	.word	0x063b063b
 8014170:	063b04e2 	.word	0x063b04e2
 8014174:	063b063b 	.word	0x063b063b
 8014178:	063b0537 	.word	0x063b0537
 801417c:	063b0557 	.word	0x063b0557
 8014180:	005d063b 	.word	0x005d063b
 8014184:	063b063b 	.word	0x063b063b
 8014188:	063b063b 	.word	0x063b063b
 801418c:	063b063b 	.word	0x063b063b
 8014190:	063b063b 	.word	0x063b063b
 8014194:	063b0240 	.word	0x063b0240
 8014198:	01ff010a 	.word	0x01ff010a
 801419c:	02400240 	.word	0x02400240
 80141a0:	00f30240 	.word	0x00f30240
 80141a4:	010601ff 	.word	0x010601ff
 80141a8:	00ff063b 	.word	0x00ff063b
 80141ac:	04c5063b 	.word	0x04c5063b
 80141b0:	052704e4 	.word	0x052704e4
 80141b4:	063b0106 	.word	0x063b0106
 80141b8:	fff20537 	.word	0xfff20537
 80141bc:	063b0559 	.word	0x063b0559
 80141c0:	0582063b 	.word	0x0582063b
 80141c4:	fff2063b 	.word	0xfff2063b
 80141c8:	3501      	adds	r5, #1
 80141ca:	e761      	b.n	8014090 <_svfprintf_r+0x74>
 80141cc:	4bcb      	ldr	r3, [pc, #812]	; (80144fc <_svfprintf_r+0x4e0>)
 80141ce:	2220      	movs	r2, #32
 80141d0:	931e      	str	r3, [sp, #120]	; 0x78
 80141d2:	4032      	ands	r2, r6
 80141d4:	d101      	bne.n	80141da <_svfprintf_r+0x1be>
 80141d6:	f000 fd21 	bl	8014c1c <_svfprintf_r+0xc00>
 80141da:	2307      	movs	r3, #7
 80141dc:	3407      	adds	r4, #7
 80141de:	439c      	bics	r4, r3
 80141e0:	0023      	movs	r3, r4
 80141e2:	3308      	adds	r3, #8
 80141e4:	9312      	str	r3, [sp, #72]	; 0x48
 80141e6:	6823      	ldr	r3, [r4, #0]
 80141e8:	6864      	ldr	r4, [r4, #4]
 80141ea:	9306      	str	r3, [sp, #24]
 80141ec:	9407      	str	r4, [sp, #28]
 80141ee:	07f3      	lsls	r3, r6, #31
 80141f0:	d50a      	bpl.n	8014208 <_svfprintf_r+0x1ec>
 80141f2:	9b06      	ldr	r3, [sp, #24]
 80141f4:	9a07      	ldr	r2, [sp, #28]
 80141f6:	4313      	orrs	r3, r2
 80141f8:	d006      	beq.n	8014208 <_svfprintf_r+0x1ec>
 80141fa:	2230      	movs	r2, #48	; 0x30
 80141fc:	ab25      	add	r3, sp, #148	; 0x94
 80141fe:	701a      	strb	r2, [r3, #0]
 8014200:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014202:	705a      	strb	r2, [r3, #1]
 8014204:	2302      	movs	r3, #2
 8014206:	431e      	orrs	r6, r3
 8014208:	4bbd      	ldr	r3, [pc, #756]	; (8014500 <_svfprintf_r+0x4e4>)
 801420a:	401e      	ands	r6, r3
 801420c:	2302      	movs	r3, #2
 801420e:	f000 fc74 	bl	8014afa <_svfprintf_r+0xade>
 8014212:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014214:	f002 fc30 	bl	8016a78 <_localeconv_r>
 8014218:	6843      	ldr	r3, [r0, #4]
 801421a:	0018      	movs	r0, r3
 801421c:	931f      	str	r3, [sp, #124]	; 0x7c
 801421e:	f7eb ff7b 	bl	8000118 <strlen>
 8014222:	901b      	str	r0, [sp, #108]	; 0x6c
 8014224:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014226:	f002 fc27 	bl	8016a78 <_localeconv_r>
 801422a:	6883      	ldr	r3, [r0, #8]
 801422c:	9313      	str	r3, [sp, #76]	; 0x4c
 801422e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014230:	2b00      	cmp	r3, #0
 8014232:	d100      	bne.n	8014236 <_svfprintf_r+0x21a>
 8014234:	e75f      	b.n	80140f6 <_svfprintf_r+0xda>
 8014236:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014238:	2b00      	cmp	r3, #0
 801423a:	d100      	bne.n	801423e <_svfprintf_r+0x222>
 801423c:	e75b      	b.n	80140f6 <_svfprintf_r+0xda>
 801423e:	781b      	ldrb	r3, [r3, #0]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d100      	bne.n	8014246 <_svfprintf_r+0x22a>
 8014244:	e757      	b.n	80140f6 <_svfprintf_r+0xda>
 8014246:	2380      	movs	r3, #128	; 0x80
 8014248:	00db      	lsls	r3, r3, #3
 801424a:	431e      	orrs	r6, r3
 801424c:	e753      	b.n	80140f6 <_svfprintf_r+0xda>
 801424e:	231b      	movs	r3, #27
 8014250:	aa1e      	add	r2, sp, #120	; 0x78
 8014252:	189b      	adds	r3, r3, r2
 8014254:	781a      	ldrb	r2, [r3, #0]
 8014256:	2a00      	cmp	r2, #0
 8014258:	d000      	beq.n	801425c <_svfprintf_r+0x240>
 801425a:	e74c      	b.n	80140f6 <_svfprintf_r+0xda>
 801425c:	701d      	strb	r5, [r3, #0]
 801425e:	e74a      	b.n	80140f6 <_svfprintf_r+0xda>
 8014260:	2301      	movs	r3, #1
 8014262:	e7f2      	b.n	801424a <_svfprintf_r+0x22e>
 8014264:	6823      	ldr	r3, [r4, #0]
 8014266:	3404      	adds	r4, #4
 8014268:	9316      	str	r3, [sp, #88]	; 0x58
 801426a:	2b00      	cmp	r3, #0
 801426c:	db00      	blt.n	8014270 <_svfprintf_r+0x254>
 801426e:	e742      	b.n	80140f6 <_svfprintf_r+0xda>
 8014270:	425b      	negs	r3, r3
 8014272:	9316      	str	r3, [sp, #88]	; 0x58
 8014274:	2304      	movs	r3, #4
 8014276:	e7e8      	b.n	801424a <_svfprintf_r+0x22e>
 8014278:	231b      	movs	r3, #27
 801427a:	aa1e      	add	r2, sp, #120	; 0x78
 801427c:	189b      	adds	r3, r3, r2
 801427e:	222b      	movs	r2, #43	; 0x2b
 8014280:	701a      	strb	r2, [r3, #0]
 8014282:	e738      	b.n	80140f6 <_svfprintf_r+0xda>
 8014284:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014286:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014288:	7812      	ldrb	r2, [r2, #0]
 801428a:	3301      	adds	r3, #1
 801428c:	920e      	str	r2, [sp, #56]	; 0x38
 801428e:	2a2a      	cmp	r2, #42	; 0x2a
 8014290:	d008      	beq.n	80142a4 <_svfprintf_r+0x288>
 8014292:	2200      	movs	r2, #0
 8014294:	9208      	str	r2, [sp, #32]
 8014296:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014298:	001a      	movs	r2, r3
 801429a:	3930      	subs	r1, #48	; 0x30
 801429c:	2909      	cmp	r1, #9
 801429e:	d90c      	bls.n	80142ba <_svfprintf_r+0x29e>
 80142a0:	9211      	str	r2, [sp, #68]	; 0x44
 80142a2:	e72e      	b.n	8014102 <_svfprintf_r+0xe6>
 80142a4:	6821      	ldr	r1, [r4, #0]
 80142a6:	1d22      	adds	r2, r4, #4
 80142a8:	9108      	str	r1, [sp, #32]
 80142aa:	2900      	cmp	r1, #0
 80142ac:	da02      	bge.n	80142b4 <_svfprintf_r+0x298>
 80142ae:	2101      	movs	r1, #1
 80142b0:	4249      	negs	r1, r1
 80142b2:	9108      	str	r1, [sp, #32]
 80142b4:	0014      	movs	r4, r2
 80142b6:	9311      	str	r3, [sp, #68]	; 0x44
 80142b8:	e71d      	b.n	80140f6 <_svfprintf_r+0xda>
 80142ba:	200a      	movs	r0, #10
 80142bc:	9a08      	ldr	r2, [sp, #32]
 80142be:	4342      	muls	r2, r0
 80142c0:	1852      	adds	r2, r2, r1
 80142c2:	9208      	str	r2, [sp, #32]
 80142c4:	781a      	ldrb	r2, [r3, #0]
 80142c6:	3301      	adds	r3, #1
 80142c8:	920e      	str	r2, [sp, #56]	; 0x38
 80142ca:	e7e4      	b.n	8014296 <_svfprintf_r+0x27a>
 80142cc:	2380      	movs	r3, #128	; 0x80
 80142ce:	e7bc      	b.n	801424a <_svfprintf_r+0x22e>
 80142d0:	2300      	movs	r3, #0
 80142d2:	9316      	str	r3, [sp, #88]	; 0x58
 80142d4:	220a      	movs	r2, #10
 80142d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80142d8:	4353      	muls	r3, r2
 80142da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80142dc:	3a30      	subs	r2, #48	; 0x30
 80142de:	18d3      	adds	r3, r2, r3
 80142e0:	9316      	str	r3, [sp, #88]	; 0x58
 80142e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80142e4:	1c5a      	adds	r2, r3, #1
 80142e6:	781b      	ldrb	r3, [r3, #0]
 80142e8:	9211      	str	r2, [sp, #68]	; 0x44
 80142ea:	930e      	str	r3, [sp, #56]	; 0x38
 80142ec:	3b30      	subs	r3, #48	; 0x30
 80142ee:	2b09      	cmp	r3, #9
 80142f0:	d9f0      	bls.n	80142d4 <_svfprintf_r+0x2b8>
 80142f2:	e7d5      	b.n	80142a0 <_svfprintf_r+0x284>
 80142f4:	2308      	movs	r3, #8
 80142f6:	e7a8      	b.n	801424a <_svfprintf_r+0x22e>
 80142f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80142fa:	781b      	ldrb	r3, [r3, #0]
 80142fc:	2b68      	cmp	r3, #104	; 0x68
 80142fe:	d105      	bne.n	801430c <_svfprintf_r+0x2f0>
 8014300:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014302:	3301      	adds	r3, #1
 8014304:	9311      	str	r3, [sp, #68]	; 0x44
 8014306:	2380      	movs	r3, #128	; 0x80
 8014308:	009b      	lsls	r3, r3, #2
 801430a:	e79e      	b.n	801424a <_svfprintf_r+0x22e>
 801430c:	2340      	movs	r3, #64	; 0x40
 801430e:	e79c      	b.n	801424a <_svfprintf_r+0x22e>
 8014310:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014312:	781b      	ldrb	r3, [r3, #0]
 8014314:	2b6c      	cmp	r3, #108	; 0x6c
 8014316:	d104      	bne.n	8014322 <_svfprintf_r+0x306>
 8014318:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801431a:	3301      	adds	r3, #1
 801431c:	9311      	str	r3, [sp, #68]	; 0x44
 801431e:	432e      	orrs	r6, r5
 8014320:	e6e9      	b.n	80140f6 <_svfprintf_r+0xda>
 8014322:	2310      	movs	r3, #16
 8014324:	e791      	b.n	801424a <_svfprintf_r+0x22e>
 8014326:	1d23      	adds	r3, r4, #4
 8014328:	6822      	ldr	r2, [r4, #0]
 801432a:	9312      	str	r3, [sp, #72]	; 0x48
 801432c:	ab3f      	add	r3, sp, #252	; 0xfc
 801432e:	701a      	strb	r2, [r3, #0]
 8014330:	221b      	movs	r2, #27
 8014332:	2000      	movs	r0, #0
 8014334:	a91e      	add	r1, sp, #120	; 0x78
 8014336:	1852      	adds	r2, r2, r1
 8014338:	7010      	strb	r0, [r2, #0]
 801433a:	2201      	movs	r2, #1
 801433c:	0005      	movs	r5, r0
 801433e:	900c      	str	r0, [sp, #48]	; 0x30
 8014340:	9208      	str	r2, [sp, #32]
 8014342:	9017      	str	r0, [sp, #92]	; 0x5c
 8014344:	9010      	str	r0, [sp, #64]	; 0x40
 8014346:	900f      	str	r0, [sp, #60]	; 0x3c
 8014348:	9309      	str	r3, [sp, #36]	; 0x24
 801434a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801434c:	9a08      	ldr	r2, [sp, #32]
 801434e:	9318      	str	r3, [sp, #96]	; 0x60
 8014350:	4293      	cmp	r3, r2
 8014352:	da00      	bge.n	8014356 <_svfprintf_r+0x33a>
 8014354:	9218      	str	r2, [sp, #96]	; 0x60
 8014356:	231b      	movs	r3, #27
 8014358:	aa1e      	add	r2, sp, #120	; 0x78
 801435a:	189b      	adds	r3, r3, r2
 801435c:	781b      	ldrb	r3, [r3, #0]
 801435e:	1e5a      	subs	r2, r3, #1
 8014360:	4193      	sbcs	r3, r2
 8014362:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014364:	18d3      	adds	r3, r2, r3
 8014366:	9318      	str	r3, [sp, #96]	; 0x60
 8014368:	2302      	movs	r3, #2
 801436a:	4033      	ands	r3, r6
 801436c:	9320      	str	r3, [sp, #128]	; 0x80
 801436e:	d002      	beq.n	8014376 <_svfprintf_r+0x35a>
 8014370:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014372:	3302      	adds	r3, #2
 8014374:	9318      	str	r3, [sp, #96]	; 0x60
 8014376:	2384      	movs	r3, #132	; 0x84
 8014378:	4033      	ands	r3, r6
 801437a:	9321      	str	r3, [sp, #132]	; 0x84
 801437c:	d121      	bne.n	80143c2 <_svfprintf_r+0x3a6>
 801437e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014380:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014382:	1a9c      	subs	r4, r3, r2
 8014384:	2c00      	cmp	r4, #0
 8014386:	dd1c      	ble.n	80143c2 <_svfprintf_r+0x3a6>
 8014388:	0039      	movs	r1, r7
 801438a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801438c:	485d      	ldr	r0, [pc, #372]	; (8014504 <_svfprintf_r+0x4e8>)
 801438e:	9322      	str	r3, [sp, #136]	; 0x88
 8014390:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014392:	3301      	adds	r3, #1
 8014394:	3108      	adds	r1, #8
 8014396:	6038      	str	r0, [r7, #0]
 8014398:	2c10      	cmp	r4, #16
 801439a:	dd01      	ble.n	80143a0 <_svfprintf_r+0x384>
 801439c:	f000 fd08 	bl	8014db0 <_svfprintf_r+0xd94>
 80143a0:	607c      	str	r4, [r7, #4]
 80143a2:	18a4      	adds	r4, r4, r2
 80143a4:	942e      	str	r4, [sp, #184]	; 0xb8
 80143a6:	932d      	str	r3, [sp, #180]	; 0xb4
 80143a8:	000f      	movs	r7, r1
 80143aa:	2b07      	cmp	r3, #7
 80143ac:	dd09      	ble.n	80143c2 <_svfprintf_r+0x3a6>
 80143ae:	aa2c      	add	r2, sp, #176	; 0xb0
 80143b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80143b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80143b4:	f002 ff86 	bl	80172c4 <__ssprint_r>
 80143b8:	2800      	cmp	r0, #0
 80143ba:	d001      	beq.n	80143c0 <_svfprintf_r+0x3a4>
 80143bc:	f001 f852 	bl	8015464 <_svfprintf_r+0x1448>
 80143c0:	af2f      	add	r7, sp, #188	; 0xbc
 80143c2:	231b      	movs	r3, #27
 80143c4:	aa1e      	add	r2, sp, #120	; 0x78
 80143c6:	189b      	adds	r3, r3, r2
 80143c8:	781a      	ldrb	r2, [r3, #0]
 80143ca:	2a00      	cmp	r2, #0
 80143cc:	d017      	beq.n	80143fe <_svfprintf_r+0x3e2>
 80143ce:	603b      	str	r3, [r7, #0]
 80143d0:	2301      	movs	r3, #1
 80143d2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80143d4:	607b      	str	r3, [r7, #4]
 80143d6:	0013      	movs	r3, r2
 80143d8:	3301      	adds	r3, #1
 80143da:	932e      	str	r3, [sp, #184]	; 0xb8
 80143dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80143de:	3708      	adds	r7, #8
 80143e0:	9322      	str	r3, [sp, #136]	; 0x88
 80143e2:	3301      	adds	r3, #1
 80143e4:	932d      	str	r3, [sp, #180]	; 0xb4
 80143e6:	2b07      	cmp	r3, #7
 80143e8:	dd09      	ble.n	80143fe <_svfprintf_r+0x3e2>
 80143ea:	aa2c      	add	r2, sp, #176	; 0xb0
 80143ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80143ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80143f0:	f002 ff68 	bl	80172c4 <__ssprint_r>
 80143f4:	2800      	cmp	r0, #0
 80143f6:	d001      	beq.n	80143fc <_svfprintf_r+0x3e0>
 80143f8:	f001 f834 	bl	8015464 <_svfprintf_r+0x1448>
 80143fc:	af2f      	add	r7, sp, #188	; 0xbc
 80143fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014400:	2b00      	cmp	r3, #0
 8014402:	d019      	beq.n	8014438 <_svfprintf_r+0x41c>
 8014404:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014406:	9320      	str	r3, [sp, #128]	; 0x80
 8014408:	ab25      	add	r3, sp, #148	; 0x94
 801440a:	603b      	str	r3, [r7, #0]
 801440c:	2302      	movs	r3, #2
 801440e:	607b      	str	r3, [r7, #4]
 8014410:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014412:	3708      	adds	r7, #8
 8014414:	3302      	adds	r3, #2
 8014416:	932e      	str	r3, [sp, #184]	; 0xb8
 8014418:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801441a:	9320      	str	r3, [sp, #128]	; 0x80
 801441c:	3301      	adds	r3, #1
 801441e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014420:	2b07      	cmp	r3, #7
 8014422:	dd09      	ble.n	8014438 <_svfprintf_r+0x41c>
 8014424:	aa2c      	add	r2, sp, #176	; 0xb0
 8014426:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014428:	980a      	ldr	r0, [sp, #40]	; 0x28
 801442a:	f002 ff4b 	bl	80172c4 <__ssprint_r>
 801442e:	2800      	cmp	r0, #0
 8014430:	d001      	beq.n	8014436 <_svfprintf_r+0x41a>
 8014432:	f001 f817 	bl	8015464 <_svfprintf_r+0x1448>
 8014436:	af2f      	add	r7, sp, #188	; 0xbc
 8014438:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801443a:	2b80      	cmp	r3, #128	; 0x80
 801443c:	d121      	bne.n	8014482 <_svfprintf_r+0x466>
 801443e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014440:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014442:	1a9c      	subs	r4, r3, r2
 8014444:	2c00      	cmp	r4, #0
 8014446:	dd1c      	ble.n	8014482 <_svfprintf_r+0x466>
 8014448:	0039      	movs	r1, r7
 801444a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801444c:	482e      	ldr	r0, [pc, #184]	; (8014508 <_svfprintf_r+0x4ec>)
 801444e:	9320      	str	r3, [sp, #128]	; 0x80
 8014450:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014452:	3301      	adds	r3, #1
 8014454:	3108      	adds	r1, #8
 8014456:	6038      	str	r0, [r7, #0]
 8014458:	2c10      	cmp	r4, #16
 801445a:	dd01      	ble.n	8014460 <_svfprintf_r+0x444>
 801445c:	f000 fcbc 	bl	8014dd8 <_svfprintf_r+0xdbc>
 8014460:	607c      	str	r4, [r7, #4]
 8014462:	18a4      	adds	r4, r4, r2
 8014464:	942e      	str	r4, [sp, #184]	; 0xb8
 8014466:	932d      	str	r3, [sp, #180]	; 0xb4
 8014468:	000f      	movs	r7, r1
 801446a:	2b07      	cmp	r3, #7
 801446c:	dd09      	ble.n	8014482 <_svfprintf_r+0x466>
 801446e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014472:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014474:	f002 ff26 	bl	80172c4 <__ssprint_r>
 8014478:	2800      	cmp	r0, #0
 801447a:	d001      	beq.n	8014480 <_svfprintf_r+0x464>
 801447c:	f000 fff2 	bl	8015464 <_svfprintf_r+0x1448>
 8014480:	af2f      	add	r7, sp, #188	; 0xbc
 8014482:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014484:	9a08      	ldr	r2, [sp, #32]
 8014486:	1a9c      	subs	r4, r3, r2
 8014488:	2c00      	cmp	r4, #0
 801448a:	dd1c      	ble.n	80144c6 <_svfprintf_r+0x4aa>
 801448c:	0039      	movs	r1, r7
 801448e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014490:	481d      	ldr	r0, [pc, #116]	; (8014508 <_svfprintf_r+0x4ec>)
 8014492:	9317      	str	r3, [sp, #92]	; 0x5c
 8014494:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014496:	3301      	adds	r3, #1
 8014498:	3108      	adds	r1, #8
 801449a:	6038      	str	r0, [r7, #0]
 801449c:	2c10      	cmp	r4, #16
 801449e:	dd01      	ble.n	80144a4 <_svfprintf_r+0x488>
 80144a0:	f000 fcb4 	bl	8014e0c <_svfprintf_r+0xdf0>
 80144a4:	18a2      	adds	r2, r4, r2
 80144a6:	607c      	str	r4, [r7, #4]
 80144a8:	922e      	str	r2, [sp, #184]	; 0xb8
 80144aa:	932d      	str	r3, [sp, #180]	; 0xb4
 80144ac:	000f      	movs	r7, r1
 80144ae:	2b07      	cmp	r3, #7
 80144b0:	dd09      	ble.n	80144c6 <_svfprintf_r+0x4aa>
 80144b2:	aa2c      	add	r2, sp, #176	; 0xb0
 80144b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80144b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144b8:	f002 ff04 	bl	80172c4 <__ssprint_r>
 80144bc:	2800      	cmp	r0, #0
 80144be:	d001      	beq.n	80144c4 <_svfprintf_r+0x4a8>
 80144c0:	f000 ffd0 	bl	8015464 <_svfprintf_r+0x1448>
 80144c4:	af2f      	add	r7, sp, #188	; 0xbc
 80144c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80144c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80144ca:	05f3      	lsls	r3, r6, #23
 80144cc:	d501      	bpl.n	80144d2 <_svfprintf_r+0x4b6>
 80144ce:	f000 fcb1 	bl	8014e34 <_svfprintf_r+0xe18>
 80144d2:	9a08      	ldr	r2, [sp, #32]
 80144d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144d6:	4694      	mov	ip, r2
 80144d8:	603b      	str	r3, [r7, #0]
 80144da:	9b08      	ldr	r3, [sp, #32]
 80144dc:	607b      	str	r3, [r7, #4]
 80144de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144e0:	4463      	add	r3, ip
 80144e2:	932e      	str	r3, [sp, #184]	; 0xb8
 80144e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80144e6:	9308      	str	r3, [sp, #32]
 80144e8:	3301      	adds	r3, #1
 80144ea:	932d      	str	r3, [sp, #180]	; 0xb4
 80144ec:	2b07      	cmp	r3, #7
 80144ee:	dd01      	ble.n	80144f4 <_svfprintf_r+0x4d8>
 80144f0:	f000 fd94 	bl	801501c <_svfprintf_r+0x1000>
 80144f4:	3708      	adds	r7, #8
 80144f6:	f000 fce4 	bl	8014ec2 <_svfprintf_r+0xea6>
 80144fa:	46c0      	nop			; (mov r8, r8)
 80144fc:	0801a419 	.word	0x0801a419
 8014500:	fffffbff 	.word	0xfffffbff
 8014504:	0801a42c 	.word	0x0801a42c
 8014508:	0801a43c 	.word	0x0801a43c
 801450c:	2310      	movs	r3, #16
 801450e:	431e      	orrs	r6, r3
 8014510:	06b3      	lsls	r3, r6, #26
 8014512:	d52c      	bpl.n	801456e <_svfprintf_r+0x552>
 8014514:	2307      	movs	r3, #7
 8014516:	3407      	adds	r4, #7
 8014518:	439c      	bics	r4, r3
 801451a:	0023      	movs	r3, r4
 801451c:	3308      	adds	r3, #8
 801451e:	9312      	str	r3, [sp, #72]	; 0x48
 8014520:	6823      	ldr	r3, [r4, #0]
 8014522:	6864      	ldr	r4, [r4, #4]
 8014524:	9306      	str	r3, [sp, #24]
 8014526:	9407      	str	r4, [sp, #28]
 8014528:	9b07      	ldr	r3, [sp, #28]
 801452a:	2b00      	cmp	r3, #0
 801452c:	da0b      	bge.n	8014546 <_svfprintf_r+0x52a>
 801452e:	9906      	ldr	r1, [sp, #24]
 8014530:	9a07      	ldr	r2, [sp, #28]
 8014532:	2400      	movs	r4, #0
 8014534:	424b      	negs	r3, r1
 8014536:	4194      	sbcs	r4, r2
 8014538:	9306      	str	r3, [sp, #24]
 801453a:	9407      	str	r4, [sp, #28]
 801453c:	231b      	movs	r3, #27
 801453e:	aa1e      	add	r2, sp, #120	; 0x78
 8014540:	189b      	adds	r3, r3, r2
 8014542:	222d      	movs	r2, #45	; 0x2d
 8014544:	701a      	strb	r2, [r3, #0]
 8014546:	9b08      	ldr	r3, [sp, #32]
 8014548:	3301      	adds	r3, #1
 801454a:	d000      	beq.n	801454e <_svfprintf_r+0x532>
 801454c:	e382      	b.n	8014c54 <_svfprintf_r+0xc38>
 801454e:	9b07      	ldr	r3, [sp, #28]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d000      	beq.n	8014556 <_svfprintf_r+0x53a>
 8014554:	e3b0      	b.n	8014cb8 <_svfprintf_r+0xc9c>
 8014556:	9b06      	ldr	r3, [sp, #24]
 8014558:	2b09      	cmp	r3, #9
 801455a:	d900      	bls.n	801455e <_svfprintf_r+0x542>
 801455c:	e3ac      	b.n	8014cb8 <_svfprintf_r+0xc9c>
 801455e:	23e7      	movs	r3, #231	; 0xe7
 8014560:	aa1e      	add	r2, sp, #120	; 0x78
 8014562:	189b      	adds	r3, r3, r2
 8014564:	9a06      	ldr	r2, [sp, #24]
 8014566:	3230      	adds	r2, #48	; 0x30
 8014568:	701a      	strb	r2, [r3, #0]
 801456a:	9309      	str	r3, [sp, #36]	; 0x24
 801456c:	e395      	b.n	8014c9a <_svfprintf_r+0xc7e>
 801456e:	1d23      	adds	r3, r4, #4
 8014570:	9312      	str	r3, [sp, #72]	; 0x48
 8014572:	06f3      	lsls	r3, r6, #27
 8014574:	d504      	bpl.n	8014580 <_svfprintf_r+0x564>
 8014576:	6823      	ldr	r3, [r4, #0]
 8014578:	9306      	str	r3, [sp, #24]
 801457a:	17db      	asrs	r3, r3, #31
 801457c:	9307      	str	r3, [sp, #28]
 801457e:	e7d3      	b.n	8014528 <_svfprintf_r+0x50c>
 8014580:	6823      	ldr	r3, [r4, #0]
 8014582:	0672      	lsls	r2, r6, #25
 8014584:	d501      	bpl.n	801458a <_svfprintf_r+0x56e>
 8014586:	b21b      	sxth	r3, r3
 8014588:	e7f6      	b.n	8014578 <_svfprintf_r+0x55c>
 801458a:	05b2      	lsls	r2, r6, #22
 801458c:	d5f4      	bpl.n	8014578 <_svfprintf_r+0x55c>
 801458e:	b25b      	sxtb	r3, r3
 8014590:	e7f2      	b.n	8014578 <_svfprintf_r+0x55c>
 8014592:	2307      	movs	r3, #7
 8014594:	3407      	adds	r4, #7
 8014596:	439c      	bics	r4, r3
 8014598:	0023      	movs	r3, r4
 801459a:	2201      	movs	r2, #1
 801459c:	3308      	adds	r3, #8
 801459e:	9312      	str	r3, [sp, #72]	; 0x48
 80145a0:	6823      	ldr	r3, [r4, #0]
 80145a2:	4252      	negs	r2, r2
 80145a4:	931a      	str	r3, [sp, #104]	; 0x68
 80145a6:	6863      	ldr	r3, [r4, #4]
 80145a8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80145aa:	005c      	lsls	r4, r3, #1
 80145ac:	0864      	lsrs	r4, r4, #1
 80145ae:	9319      	str	r3, [sp, #100]	; 0x64
 80145b0:	0028      	movs	r0, r5
 80145b2:	4bcf      	ldr	r3, [pc, #828]	; (80148f0 <_svfprintf_r+0x8d4>)
 80145b4:	0021      	movs	r1, r4
 80145b6:	f7ee f9f7 	bl	80029a8 <__aeabi_dcmpun>
 80145ba:	2800      	cmp	r0, #0
 80145bc:	d125      	bne.n	801460a <_svfprintf_r+0x5ee>
 80145be:	2201      	movs	r2, #1
 80145c0:	4bcb      	ldr	r3, [pc, #812]	; (80148f0 <_svfprintf_r+0x8d4>)
 80145c2:	4252      	negs	r2, r2
 80145c4:	0028      	movs	r0, r5
 80145c6:	0021      	movs	r1, r4
 80145c8:	f7eb ff58 	bl	800047c <__aeabi_dcmple>
 80145cc:	2800      	cmp	r0, #0
 80145ce:	d11c      	bne.n	801460a <_svfprintf_r+0x5ee>
 80145d0:	2200      	movs	r2, #0
 80145d2:	2300      	movs	r3, #0
 80145d4:	981a      	ldr	r0, [sp, #104]	; 0x68
 80145d6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80145d8:	f7eb ff46 	bl	8000468 <__aeabi_dcmplt>
 80145dc:	2800      	cmp	r0, #0
 80145de:	d004      	beq.n	80145ea <_svfprintf_r+0x5ce>
 80145e0:	231b      	movs	r3, #27
 80145e2:	aa1e      	add	r2, sp, #120	; 0x78
 80145e4:	189b      	adds	r3, r3, r2
 80145e6:	222d      	movs	r2, #45	; 0x2d
 80145e8:	701a      	strb	r2, [r3, #0]
 80145ea:	4bc2      	ldr	r3, [pc, #776]	; (80148f4 <_svfprintf_r+0x8d8>)
 80145ec:	9309      	str	r3, [sp, #36]	; 0x24
 80145ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145f0:	2b47      	cmp	r3, #71	; 0x47
 80145f2:	dc01      	bgt.n	80145f8 <_svfprintf_r+0x5dc>
 80145f4:	4bc0      	ldr	r3, [pc, #768]	; (80148f8 <_svfprintf_r+0x8dc>)
 80145f6:	9309      	str	r3, [sp, #36]	; 0x24
 80145f8:	2380      	movs	r3, #128	; 0x80
 80145fa:	439e      	bics	r6, r3
 80145fc:	2300      	movs	r3, #0
 80145fe:	930c      	str	r3, [sp, #48]	; 0x30
 8014600:	3303      	adds	r3, #3
 8014602:	9308      	str	r3, [sp, #32]
 8014604:	2300      	movs	r3, #0
 8014606:	9317      	str	r3, [sp, #92]	; 0x5c
 8014608:	e34f      	b.n	8014caa <_svfprintf_r+0xc8e>
 801460a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801460c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801460e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014610:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014612:	f7ee f9c9 	bl	80029a8 <__aeabi_dcmpun>
 8014616:	2800      	cmp	r0, #0
 8014618:	d00e      	beq.n	8014638 <_svfprintf_r+0x61c>
 801461a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801461c:	2b00      	cmp	r3, #0
 801461e:	da04      	bge.n	801462a <_svfprintf_r+0x60e>
 8014620:	231b      	movs	r3, #27
 8014622:	aa1e      	add	r2, sp, #120	; 0x78
 8014624:	189b      	adds	r3, r3, r2
 8014626:	222d      	movs	r2, #45	; 0x2d
 8014628:	701a      	strb	r2, [r3, #0]
 801462a:	4bb4      	ldr	r3, [pc, #720]	; (80148fc <_svfprintf_r+0x8e0>)
 801462c:	9309      	str	r3, [sp, #36]	; 0x24
 801462e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014630:	2b47      	cmp	r3, #71	; 0x47
 8014632:	dce1      	bgt.n	80145f8 <_svfprintf_r+0x5dc>
 8014634:	4bb2      	ldr	r3, [pc, #712]	; (8014900 <_svfprintf_r+0x8e4>)
 8014636:	e7de      	b.n	80145f6 <_svfprintf_r+0x5da>
 8014638:	2320      	movs	r3, #32
 801463a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801463c:	439a      	bics	r2, r3
 801463e:	920f      	str	r2, [sp, #60]	; 0x3c
 8014640:	2a41      	cmp	r2, #65	; 0x41
 8014642:	d124      	bne.n	801468e <_svfprintf_r+0x672>
 8014644:	2230      	movs	r2, #48	; 0x30
 8014646:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014648:	ab25      	add	r3, sp, #148	; 0x94
 801464a:	701a      	strb	r2, [r3, #0]
 801464c:	3228      	adds	r2, #40	; 0x28
 801464e:	2961      	cmp	r1, #97	; 0x61
 8014650:	d100      	bne.n	8014654 <_svfprintf_r+0x638>
 8014652:	3220      	adds	r2, #32
 8014654:	705a      	strb	r2, [r3, #1]
 8014656:	2302      	movs	r3, #2
 8014658:	431e      	orrs	r6, r3
 801465a:	9b08      	ldr	r3, [sp, #32]
 801465c:	2b63      	cmp	r3, #99	; 0x63
 801465e:	dc00      	bgt.n	8014662 <_svfprintf_r+0x646>
 8014660:	e09e      	b.n	80147a0 <_svfprintf_r+0x784>
 8014662:	1c59      	adds	r1, r3, #1
 8014664:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014666:	f7fe f913 	bl	8012890 <_malloc_r>
 801466a:	9009      	str	r0, [sp, #36]	; 0x24
 801466c:	2800      	cmp	r0, #0
 801466e:	d000      	beq.n	8014672 <_svfprintf_r+0x656>
 8014670:	e09b      	b.n	80147aa <_svfprintf_r+0x78e>
 8014672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014674:	899a      	ldrh	r2, [r3, #12]
 8014676:	2340      	movs	r3, #64	; 0x40
 8014678:	4313      	orrs	r3, r2
 801467a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801467c:	8193      	strh	r3, [r2, #12]
 801467e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014680:	899b      	ldrh	r3, [r3, #12]
 8014682:	065b      	lsls	r3, r3, #25
 8014684:	d400      	bmi.n	8014688 <_svfprintf_r+0x66c>
 8014686:	e4ee      	b.n	8014066 <_svfprintf_r+0x4a>
 8014688:	2301      	movs	r3, #1
 801468a:	425b      	negs	r3, r3
 801468c:	e4ea      	b.n	8014064 <_svfprintf_r+0x48>
 801468e:	9b08      	ldr	r3, [sp, #32]
 8014690:	900c      	str	r0, [sp, #48]	; 0x30
 8014692:	3301      	adds	r3, #1
 8014694:	d100      	bne.n	8014698 <_svfprintf_r+0x67c>
 8014696:	e08b      	b.n	80147b0 <_svfprintf_r+0x794>
 8014698:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801469a:	2b47      	cmp	r3, #71	; 0x47
 801469c:	d103      	bne.n	80146a6 <_svfprintf_r+0x68a>
 801469e:	9b08      	ldr	r3, [sp, #32]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d100      	bne.n	80146a6 <_svfprintf_r+0x68a>
 80146a4:	e087      	b.n	80147b6 <_svfprintf_r+0x79a>
 80146a6:	2380      	movs	r3, #128	; 0x80
 80146a8:	005b      	lsls	r3, r3, #1
 80146aa:	4333      	orrs	r3, r6
 80146ac:	9320      	str	r3, [sp, #128]	; 0x80
 80146ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80146b0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	db00      	blt.n	80146b8 <_svfprintf_r+0x69c>
 80146b6:	e082      	b.n	80147be <_svfprintf_r+0x7a2>
 80146b8:	2280      	movs	r2, #128	; 0x80
 80146ba:	0612      	lsls	r2, r2, #24
 80146bc:	4694      	mov	ip, r2
 80146be:	4463      	add	r3, ip
 80146c0:	930d      	str	r3, [sp, #52]	; 0x34
 80146c2:	232d      	movs	r3, #45	; 0x2d
 80146c4:	9322      	str	r3, [sp, #136]	; 0x88
 80146c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146c8:	2b41      	cmp	r3, #65	; 0x41
 80146ca:	d000      	beq.n	80146ce <_svfprintf_r+0x6b2>
 80146cc:	e105      	b.n	80148da <_svfprintf_r+0x8be>
 80146ce:	aa26      	add	r2, sp, #152	; 0x98
 80146d0:	0020      	movs	r0, r4
 80146d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80146d4:	f002 fdc4 	bl	8017260 <frexp>
 80146d8:	23ff      	movs	r3, #255	; 0xff
 80146da:	2200      	movs	r2, #0
 80146dc:	059b      	lsls	r3, r3, #22
 80146de:	f7ed fba9 	bl	8001e34 <__aeabi_dmul>
 80146e2:	2200      	movs	r2, #0
 80146e4:	2300      	movs	r3, #0
 80146e6:	0004      	movs	r4, r0
 80146e8:	000d      	movs	r5, r1
 80146ea:	f7eb feb7 	bl	800045c <__aeabi_dcmpeq>
 80146ee:	2800      	cmp	r0, #0
 80146f0:	d001      	beq.n	80146f6 <_svfprintf_r+0x6da>
 80146f2:	2301      	movs	r3, #1
 80146f4:	9326      	str	r3, [sp, #152]	; 0x98
 80146f6:	4b83      	ldr	r3, [pc, #524]	; (8014904 <_svfprintf_r+0x8e8>)
 80146f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80146fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146fc:	2b61      	cmp	r3, #97	; 0x61
 80146fe:	d101      	bne.n	8014704 <_svfprintf_r+0x6e8>
 8014700:	4b81      	ldr	r3, [pc, #516]	; (8014908 <_svfprintf_r+0x8ec>)
 8014702:	9317      	str	r3, [sp, #92]	; 0x5c
 8014704:	9b08      	ldr	r3, [sp, #32]
 8014706:	3b01      	subs	r3, #1
 8014708:	9310      	str	r3, [sp, #64]	; 0x40
 801470a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801470c:	9318      	str	r3, [sp, #96]	; 0x60
 801470e:	2200      	movs	r2, #0
 8014710:	4b7e      	ldr	r3, [pc, #504]	; (801490c <_svfprintf_r+0x8f0>)
 8014712:	0020      	movs	r0, r4
 8014714:	0029      	movs	r1, r5
 8014716:	f7ed fb8d 	bl	8001e34 <__aeabi_dmul>
 801471a:	000d      	movs	r5, r1
 801471c:	0004      	movs	r4, r0
 801471e:	f7ee f95f 	bl	80029e0 <__aeabi_d2iz>
 8014722:	9021      	str	r0, [sp, #132]	; 0x84
 8014724:	f7ee f992 	bl	8002a4c <__aeabi_i2d>
 8014728:	0002      	movs	r2, r0
 801472a:	000b      	movs	r3, r1
 801472c:	0020      	movs	r0, r4
 801472e:	0029      	movs	r1, r5
 8014730:	f7ed fdf2 	bl	8002318 <__aeabi_dsub>
 8014734:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014736:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014738:	3301      	adds	r3, #1
 801473a:	930d      	str	r3, [sp, #52]	; 0x34
 801473c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801473e:	0004      	movs	r4, r0
 8014740:	5c9b      	ldrb	r3, [r3, r2]
 8014742:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014744:	000d      	movs	r5, r1
 8014746:	7013      	strb	r3, [r2, #0]
 8014748:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801474a:	9323      	str	r3, [sp, #140]	; 0x8c
 801474c:	3301      	adds	r3, #1
 801474e:	d00a      	beq.n	8014766 <_svfprintf_r+0x74a>
 8014750:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014752:	2200      	movs	r2, #0
 8014754:	3b01      	subs	r3, #1
 8014756:	9310      	str	r3, [sp, #64]	; 0x40
 8014758:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801475a:	9318      	str	r3, [sp, #96]	; 0x60
 801475c:	2300      	movs	r3, #0
 801475e:	f7eb fe7d 	bl	800045c <__aeabi_dcmpeq>
 8014762:	2800      	cmp	r0, #0
 8014764:	d0d3      	beq.n	801470e <_svfprintf_r+0x6f2>
 8014766:	2200      	movs	r2, #0
 8014768:	4b69      	ldr	r3, [pc, #420]	; (8014910 <_svfprintf_r+0x8f4>)
 801476a:	0020      	movs	r0, r4
 801476c:	0029      	movs	r1, r5
 801476e:	f7eb fe8f 	bl	8000490 <__aeabi_dcmpgt>
 8014772:	2800      	cmp	r0, #0
 8014774:	d126      	bne.n	80147c4 <_svfprintf_r+0x7a8>
 8014776:	2200      	movs	r2, #0
 8014778:	4b65      	ldr	r3, [pc, #404]	; (8014910 <_svfprintf_r+0x8f4>)
 801477a:	0020      	movs	r0, r4
 801477c:	0029      	movs	r1, r5
 801477e:	f7eb fe6d 	bl	800045c <__aeabi_dcmpeq>
 8014782:	2800      	cmp	r0, #0
 8014784:	d002      	beq.n	801478c <_svfprintf_r+0x770>
 8014786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014788:	07db      	lsls	r3, r3, #31
 801478a:	d41b      	bmi.n	80147c4 <_svfprintf_r+0x7a8>
 801478c:	2130      	movs	r1, #48	; 0x30
 801478e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014790:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8014792:	1898      	adds	r0, r3, r2
 8014794:	930d      	str	r3, [sp, #52]	; 0x34
 8014796:	1ac2      	subs	r2, r0, r3
 8014798:	d426      	bmi.n	80147e8 <_svfprintf_r+0x7cc>
 801479a:	7019      	strb	r1, [r3, #0]
 801479c:	3301      	adds	r3, #1
 801479e:	e7f9      	b.n	8014794 <_svfprintf_r+0x778>
 80147a0:	2300      	movs	r3, #0
 80147a2:	930c      	str	r3, [sp, #48]	; 0x30
 80147a4:	ab3f      	add	r3, sp, #252	; 0xfc
 80147a6:	9309      	str	r3, [sp, #36]	; 0x24
 80147a8:	e77d      	b.n	80146a6 <_svfprintf_r+0x68a>
 80147aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147ac:	930c      	str	r3, [sp, #48]	; 0x30
 80147ae:	e77a      	b.n	80146a6 <_svfprintf_r+0x68a>
 80147b0:	2306      	movs	r3, #6
 80147b2:	9308      	str	r3, [sp, #32]
 80147b4:	e777      	b.n	80146a6 <_svfprintf_r+0x68a>
 80147b6:	9b08      	ldr	r3, [sp, #32]
 80147b8:	930c      	str	r3, [sp, #48]	; 0x30
 80147ba:	2301      	movs	r3, #1
 80147bc:	e7f9      	b.n	80147b2 <_svfprintf_r+0x796>
 80147be:	930d      	str	r3, [sp, #52]	; 0x34
 80147c0:	2300      	movs	r3, #0
 80147c2:	e77f      	b.n	80146c4 <_svfprintf_r+0x6a8>
 80147c4:	2030      	movs	r0, #48	; 0x30
 80147c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80147c8:	932a      	str	r3, [sp, #168]	; 0xa8
 80147ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80147cc:	7bda      	ldrb	r2, [r3, #15]
 80147ce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80147d0:	3b01      	subs	r3, #1
 80147d2:	932a      	str	r3, [sp, #168]	; 0xa8
 80147d4:	7819      	ldrb	r1, [r3, #0]
 80147d6:	4291      	cmp	r1, r2
 80147d8:	d07d      	beq.n	80148d6 <_svfprintf_r+0x8ba>
 80147da:	1c4a      	adds	r2, r1, #1
 80147dc:	b2d2      	uxtb	r2, r2
 80147de:	2939      	cmp	r1, #57	; 0x39
 80147e0:	d101      	bne.n	80147e6 <_svfprintf_r+0x7ca>
 80147e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80147e4:	7a92      	ldrb	r2, [r2, #10]
 80147e6:	701a      	strb	r2, [r3, #0]
 80147e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80147ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80147ec:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80147ee:	1a9b      	subs	r3, r3, r2
 80147f0:	930d      	str	r3, [sp, #52]	; 0x34
 80147f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147f4:	2b47      	cmp	r3, #71	; 0x47
 80147f6:	d000      	beq.n	80147fa <_svfprintf_r+0x7de>
 80147f8:	e0d2      	b.n	80149a0 <_svfprintf_r+0x984>
 80147fa:	1ceb      	adds	r3, r5, #3
 80147fc:	db03      	blt.n	8014806 <_svfprintf_r+0x7ea>
 80147fe:	9b08      	ldr	r3, [sp, #32]
 8014800:	42ab      	cmp	r3, r5
 8014802:	db00      	blt.n	8014806 <_svfprintf_r+0x7ea>
 8014804:	e0fd      	b.n	8014a02 <_svfprintf_r+0x9e6>
 8014806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014808:	3b02      	subs	r3, #2
 801480a:	930e      	str	r3, [sp, #56]	; 0x38
 801480c:	2238      	movs	r2, #56	; 0x38
 801480e:	466b      	mov	r3, sp
 8014810:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014812:	189b      	adds	r3, r3, r2
 8014814:	3a18      	subs	r2, #24
 8014816:	4391      	bics	r1, r2
 8014818:	1e6c      	subs	r4, r5, #1
 801481a:	000a      	movs	r2, r1
 801481c:	9426      	str	r4, [sp, #152]	; 0x98
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	2100      	movs	r1, #0
 8014822:	2a41      	cmp	r2, #65	; 0x41
 8014824:	d102      	bne.n	801482c <_svfprintf_r+0x810>
 8014826:	330f      	adds	r3, #15
 8014828:	b2db      	uxtb	r3, r3
 801482a:	3101      	adds	r1, #1
 801482c:	aa28      	add	r2, sp, #160	; 0xa0
 801482e:	7013      	strb	r3, [r2, #0]
 8014830:	232b      	movs	r3, #43	; 0x2b
 8014832:	2c00      	cmp	r4, #0
 8014834:	da02      	bge.n	801483c <_svfprintf_r+0x820>
 8014836:	2401      	movs	r4, #1
 8014838:	232d      	movs	r3, #45	; 0x2d
 801483a:	1b64      	subs	r4, r4, r5
 801483c:	7053      	strb	r3, [r2, #1]
 801483e:	2c09      	cmp	r4, #9
 8014840:	dc00      	bgt.n	8014844 <_svfprintf_r+0x828>
 8014842:	e0c7      	b.n	80149d4 <_svfprintf_r+0x9b8>
 8014844:	2537      	movs	r5, #55	; 0x37
 8014846:	ab1e      	add	r3, sp, #120	; 0x78
 8014848:	18ed      	adds	r5, r5, r3
 801484a:	1e6b      	subs	r3, r5, #1
 801484c:	0020      	movs	r0, r4
 801484e:	210a      	movs	r1, #10
 8014850:	9308      	str	r3, [sp, #32]
 8014852:	f7eb fded 	bl	8000430 <__aeabi_idivmod>
 8014856:	1e6b      	subs	r3, r5, #1
 8014858:	3130      	adds	r1, #48	; 0x30
 801485a:	7019      	strb	r1, [r3, #0]
 801485c:	0020      	movs	r0, r4
 801485e:	210a      	movs	r1, #10
 8014860:	f7eb fd00 	bl	8000264 <__divsi3>
 8014864:	0004      	movs	r4, r0
 8014866:	2809      	cmp	r0, #9
 8014868:	dd00      	ble.n	801486c <_svfprintf_r+0x850>
 801486a:	e0ac      	b.n	80149c6 <_svfprintf_r+0x9aa>
 801486c:	232a      	movs	r3, #42	; 0x2a
 801486e:	2137      	movs	r1, #55	; 0x37
 8014870:	aa1e      	add	r2, sp, #120	; 0x78
 8014872:	3d02      	subs	r5, #2
 8014874:	3430      	adds	r4, #48	; 0x30
 8014876:	702c      	strb	r4, [r5, #0]
 8014878:	189b      	adds	r3, r3, r2
 801487a:	1889      	adds	r1, r1, r2
 801487c:	001a      	movs	r2, r3
 801487e:	428d      	cmp	r5, r1
 8014880:	d200      	bcs.n	8014884 <_svfprintf_r+0x868>
 8014882:	e0a2      	b.n	80149ca <_svfprintf_r+0x9ae>
 8014884:	ab28      	add	r3, sp, #160	; 0xa0
 8014886:	1ad3      	subs	r3, r2, r3
 8014888:	931d      	str	r3, [sp, #116]	; 0x74
 801488a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801488c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801488e:	4694      	mov	ip, r2
 8014890:	4463      	add	r3, ip
 8014892:	9308      	str	r3, [sp, #32]
 8014894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014896:	2b01      	cmp	r3, #1
 8014898:	dc01      	bgt.n	801489e <_svfprintf_r+0x882>
 801489a:	07f3      	lsls	r3, r6, #31
 801489c:	d504      	bpl.n	80148a8 <_svfprintf_r+0x88c>
 801489e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80148a0:	9b08      	ldr	r3, [sp, #32]
 80148a2:	4694      	mov	ip, r2
 80148a4:	4463      	add	r3, ip
 80148a6:	9308      	str	r3, [sp, #32]
 80148a8:	2280      	movs	r2, #128	; 0x80
 80148aa:	4b1a      	ldr	r3, [pc, #104]	; (8014914 <_svfprintf_r+0x8f8>)
 80148ac:	0052      	lsls	r2, r2, #1
 80148ae:	4033      	ands	r3, r6
 80148b0:	431a      	orrs	r2, r3
 80148b2:	2300      	movs	r3, #0
 80148b4:	001d      	movs	r5, r3
 80148b6:	9220      	str	r2, [sp, #128]	; 0x80
 80148b8:	9310      	str	r3, [sp, #64]	; 0x40
 80148ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80148bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d100      	bne.n	80148c4 <_svfprintf_r+0x8a8>
 80148c2:	e270      	b.n	8014da6 <_svfprintf_r+0xd8a>
 80148c4:	231b      	movs	r3, #27
 80148c6:	aa1e      	add	r2, sp, #120	; 0x78
 80148c8:	189b      	adds	r3, r3, r2
 80148ca:	222d      	movs	r2, #45	; 0x2d
 80148cc:	701a      	strb	r2, [r3, #0]
 80148ce:	2300      	movs	r3, #0
 80148d0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80148d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80148d4:	e539      	b.n	801434a <_svfprintf_r+0x32e>
 80148d6:	7018      	strb	r0, [r3, #0]
 80148d8:	e779      	b.n	80147ce <_svfprintf_r+0x7b2>
 80148da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148dc:	2b46      	cmp	r3, #70	; 0x46
 80148de:	d01b      	beq.n	8014918 <_svfprintf_r+0x8fc>
 80148e0:	9d08      	ldr	r5, [sp, #32]
 80148e2:	2b45      	cmp	r3, #69	; 0x45
 80148e4:	d101      	bne.n	80148ea <_svfprintf_r+0x8ce>
 80148e6:	9b08      	ldr	r3, [sp, #32]
 80148e8:	1c5d      	adds	r5, r3, #1
 80148ea:	2302      	movs	r3, #2
 80148ec:	e016      	b.n	801491c <_svfprintf_r+0x900>
 80148ee:	46c0      	nop			; (mov r8, r8)
 80148f0:	7fefffff 	.word	0x7fefffff
 80148f4:	0801a3fc 	.word	0x0801a3fc
 80148f8:	0801a3f8 	.word	0x0801a3f8
 80148fc:	0801a404 	.word	0x0801a404
 8014900:	0801a400 	.word	0x0801a400
 8014904:	0801a419 	.word	0x0801a419
 8014908:	0801a408 	.word	0x0801a408
 801490c:	40300000 	.word	0x40300000
 8014910:	3fe00000 	.word	0x3fe00000
 8014914:	fffffbff 	.word	0xfffffbff
 8014918:	2303      	movs	r3, #3
 801491a:	9d08      	ldr	r5, [sp, #32]
 801491c:	aa2a      	add	r2, sp, #168	; 0xa8
 801491e:	9204      	str	r2, [sp, #16]
 8014920:	aa27      	add	r2, sp, #156	; 0x9c
 8014922:	9203      	str	r2, [sp, #12]
 8014924:	aa26      	add	r2, sp, #152	; 0x98
 8014926:	9202      	str	r2, [sp, #8]
 8014928:	9300      	str	r3, [sp, #0]
 801492a:	9501      	str	r5, [sp, #4]
 801492c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801492e:	0022      	movs	r2, r4
 8014930:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014932:	f000 fe79 	bl	8015628 <_dtoa_r>
 8014936:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014938:	9009      	str	r0, [sp, #36]	; 0x24
 801493a:	2b47      	cmp	r3, #71	; 0x47
 801493c:	d101      	bne.n	8014942 <_svfprintf_r+0x926>
 801493e:	07f3      	lsls	r3, r6, #31
 8014940:	d524      	bpl.n	801498c <_svfprintf_r+0x970>
 8014942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014944:	195b      	adds	r3, r3, r5
 8014946:	9310      	str	r3, [sp, #64]	; 0x40
 8014948:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801494a:	2b46      	cmp	r3, #70	; 0x46
 801494c:	d113      	bne.n	8014976 <_svfprintf_r+0x95a>
 801494e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014950:	781b      	ldrb	r3, [r3, #0]
 8014952:	2b30      	cmp	r3, #48	; 0x30
 8014954:	d10a      	bne.n	801496c <_svfprintf_r+0x950>
 8014956:	2200      	movs	r2, #0
 8014958:	2300      	movs	r3, #0
 801495a:	0020      	movs	r0, r4
 801495c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801495e:	f7eb fd7d 	bl	800045c <__aeabi_dcmpeq>
 8014962:	2800      	cmp	r0, #0
 8014964:	d102      	bne.n	801496c <_svfprintf_r+0x950>
 8014966:	2301      	movs	r3, #1
 8014968:	1b5d      	subs	r5, r3, r5
 801496a:	9526      	str	r5, [sp, #152]	; 0x98
 801496c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801496e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014970:	4694      	mov	ip, r2
 8014972:	4463      	add	r3, ip
 8014974:	9310      	str	r3, [sp, #64]	; 0x40
 8014976:	2200      	movs	r2, #0
 8014978:	2300      	movs	r3, #0
 801497a:	0020      	movs	r0, r4
 801497c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801497e:	f7eb fd6d 	bl	800045c <__aeabi_dcmpeq>
 8014982:	2230      	movs	r2, #48	; 0x30
 8014984:	2800      	cmp	r0, #0
 8014986:	d006      	beq.n	8014996 <_svfprintf_r+0x97a>
 8014988:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801498a:	932a      	str	r3, [sp, #168]	; 0xa8
 801498c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801498e:	e72c      	b.n	80147ea <_svfprintf_r+0x7ce>
 8014990:	1c59      	adds	r1, r3, #1
 8014992:	912a      	str	r1, [sp, #168]	; 0xa8
 8014994:	701a      	strb	r2, [r3, #0]
 8014996:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014998:	9910      	ldr	r1, [sp, #64]	; 0x40
 801499a:	4299      	cmp	r1, r3
 801499c:	d8f8      	bhi.n	8014990 <_svfprintf_r+0x974>
 801499e:	e7f5      	b.n	801498c <_svfprintf_r+0x970>
 80149a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149a2:	2b46      	cmp	r3, #70	; 0x46
 80149a4:	d000      	beq.n	80149a8 <_svfprintf_r+0x98c>
 80149a6:	e731      	b.n	801480c <_svfprintf_r+0x7f0>
 80149a8:	9b08      	ldr	r3, [sp, #32]
 80149aa:	2d00      	cmp	r5, #0
 80149ac:	dd21      	ble.n	80149f2 <_svfprintf_r+0x9d6>
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d101      	bne.n	80149b6 <_svfprintf_r+0x99a>
 80149b2:	07f3      	lsls	r3, r6, #31
 80149b4:	d54a      	bpl.n	8014a4c <_svfprintf_r+0xa30>
 80149b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80149b8:	18eb      	adds	r3, r5, r3
 80149ba:	9a08      	ldr	r2, [sp, #32]
 80149bc:	18d3      	adds	r3, r2, r3
 80149be:	9308      	str	r3, [sp, #32]
 80149c0:	2366      	movs	r3, #102	; 0x66
 80149c2:	930e      	str	r3, [sp, #56]	; 0x38
 80149c4:	e034      	b.n	8014a30 <_svfprintf_r+0xa14>
 80149c6:	9d08      	ldr	r5, [sp, #32]
 80149c8:	e73f      	b.n	801484a <_svfprintf_r+0x82e>
 80149ca:	782a      	ldrb	r2, [r5, #0]
 80149cc:	3501      	adds	r5, #1
 80149ce:	701a      	strb	r2, [r3, #0]
 80149d0:	3301      	adds	r3, #1
 80149d2:	e753      	b.n	801487c <_svfprintf_r+0x860>
 80149d4:	232a      	movs	r3, #42	; 0x2a
 80149d6:	aa1e      	add	r2, sp, #120	; 0x78
 80149d8:	189b      	adds	r3, r3, r2
 80149da:	2900      	cmp	r1, #0
 80149dc:	d105      	bne.n	80149ea <_svfprintf_r+0x9ce>
 80149de:	2230      	movs	r2, #48	; 0x30
 80149e0:	ab28      	add	r3, sp, #160	; 0xa0
 80149e2:	709a      	strb	r2, [r3, #2]
 80149e4:	232b      	movs	r3, #43	; 0x2b
 80149e6:	aa1e      	add	r2, sp, #120	; 0x78
 80149e8:	189b      	adds	r3, r3, r2
 80149ea:	3430      	adds	r4, #48	; 0x30
 80149ec:	1c5a      	adds	r2, r3, #1
 80149ee:	701c      	strb	r4, [r3, #0]
 80149f0:	e748      	b.n	8014884 <_svfprintf_r+0x868>
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d102      	bne.n	80149fc <_svfprintf_r+0x9e0>
 80149f6:	3301      	adds	r3, #1
 80149f8:	421e      	tst	r6, r3
 80149fa:	d029      	beq.n	8014a50 <_svfprintf_r+0xa34>
 80149fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80149fe:	3301      	adds	r3, #1
 8014a00:	e7db      	b.n	80149ba <_svfprintf_r+0x99e>
 8014a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a04:	42ab      	cmp	r3, r5
 8014a06:	dc06      	bgt.n	8014a16 <_svfprintf_r+0x9fa>
 8014a08:	07f3      	lsls	r3, r6, #31
 8014a0a:	d524      	bpl.n	8014a56 <_svfprintf_r+0xa3a>
 8014a0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014a0e:	18eb      	adds	r3, r5, r3
 8014a10:	9308      	str	r3, [sp, #32]
 8014a12:	2367      	movs	r3, #103	; 0x67
 8014a14:	e7d5      	b.n	80149c2 <_svfprintf_r+0x9a6>
 8014a16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014a18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a1a:	4694      	mov	ip, r2
 8014a1c:	4463      	add	r3, ip
 8014a1e:	9308      	str	r3, [sp, #32]
 8014a20:	2367      	movs	r3, #103	; 0x67
 8014a22:	930e      	str	r3, [sp, #56]	; 0x38
 8014a24:	2d00      	cmp	r5, #0
 8014a26:	dc03      	bgt.n	8014a30 <_svfprintf_r+0xa14>
 8014a28:	9b08      	ldr	r3, [sp, #32]
 8014a2a:	1b5b      	subs	r3, r3, r5
 8014a2c:	3301      	adds	r3, #1
 8014a2e:	9308      	str	r3, [sp, #32]
 8014a30:	2380      	movs	r3, #128	; 0x80
 8014a32:	00db      	lsls	r3, r3, #3
 8014a34:	401e      	ands	r6, r3
 8014a36:	2300      	movs	r3, #0
 8014a38:	960f      	str	r6, [sp, #60]	; 0x3c
 8014a3a:	9310      	str	r3, [sp, #64]	; 0x40
 8014a3c:	2e00      	cmp	r6, #0
 8014a3e:	d100      	bne.n	8014a42 <_svfprintf_r+0xa26>
 8014a40:	e73c      	b.n	80148bc <_svfprintf_r+0x8a0>
 8014a42:	2d00      	cmp	r5, #0
 8014a44:	dc27      	bgt.n	8014a96 <_svfprintf_r+0xa7a>
 8014a46:	2300      	movs	r3, #0
 8014a48:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a4a:	e737      	b.n	80148bc <_svfprintf_r+0x8a0>
 8014a4c:	9508      	str	r5, [sp, #32]
 8014a4e:	e7b7      	b.n	80149c0 <_svfprintf_r+0x9a4>
 8014a50:	2266      	movs	r2, #102	; 0x66
 8014a52:	920e      	str	r2, [sp, #56]	; 0x38
 8014a54:	e7eb      	b.n	8014a2e <_svfprintf_r+0xa12>
 8014a56:	9508      	str	r5, [sp, #32]
 8014a58:	e7db      	b.n	8014a12 <_svfprintf_r+0x9f6>
 8014a5a:	42ab      	cmp	r3, r5
 8014a5c:	da0e      	bge.n	8014a7c <_svfprintf_r+0xa60>
 8014a5e:	1aed      	subs	r5, r5, r3
 8014a60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a62:	785b      	ldrb	r3, [r3, #1]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d012      	beq.n	8014a8e <_svfprintf_r+0xa72>
 8014a68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a6a:	3301      	adds	r3, #1
 8014a6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a70:	3301      	adds	r3, #1
 8014a72:	9313      	str	r3, [sp, #76]	; 0x4c
 8014a74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a76:	781b      	ldrb	r3, [r3, #0]
 8014a78:	2bff      	cmp	r3, #255	; 0xff
 8014a7a:	d1ee      	bne.n	8014a5a <_svfprintf_r+0xa3e>
 8014a7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014a7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a80:	189b      	adds	r3, r3, r2
 8014a82:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014a84:	4353      	muls	r3, r2
 8014a86:	9a08      	ldr	r2, [sp, #32]
 8014a88:	189b      	adds	r3, r3, r2
 8014a8a:	9308      	str	r3, [sp, #32]
 8014a8c:	e716      	b.n	80148bc <_svfprintf_r+0x8a0>
 8014a8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a90:	3301      	adds	r3, #1
 8014a92:	9310      	str	r3, [sp, #64]	; 0x40
 8014a94:	e7ee      	b.n	8014a74 <_svfprintf_r+0xa58>
 8014a96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a9a:	e7eb      	b.n	8014a74 <_svfprintf_r+0xa58>
 8014a9c:	0022      	movs	r2, r4
 8014a9e:	ca08      	ldmia	r2!, {r3}
 8014aa0:	9212      	str	r2, [sp, #72]	; 0x48
 8014aa2:	06b2      	lsls	r2, r6, #26
 8014aa4:	d508      	bpl.n	8014ab8 <_svfprintf_r+0xa9c>
 8014aa6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014aa8:	601a      	str	r2, [r3, #0]
 8014aaa:	17d2      	asrs	r2, r2, #31
 8014aac:	605a      	str	r2, [r3, #4]
 8014aae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014ab0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8014ab4:	f7ff faeb 	bl	801408e <_svfprintf_r+0x72>
 8014ab8:	06f2      	lsls	r2, r6, #27
 8014aba:	d502      	bpl.n	8014ac2 <_svfprintf_r+0xaa6>
 8014abc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014abe:	601a      	str	r2, [r3, #0]
 8014ac0:	e7f5      	b.n	8014aae <_svfprintf_r+0xa92>
 8014ac2:	0672      	lsls	r2, r6, #25
 8014ac4:	d502      	bpl.n	8014acc <_svfprintf_r+0xab0>
 8014ac6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014ac8:	801a      	strh	r2, [r3, #0]
 8014aca:	e7f0      	b.n	8014aae <_svfprintf_r+0xa92>
 8014acc:	05b2      	lsls	r2, r6, #22
 8014ace:	d5f5      	bpl.n	8014abc <_svfprintf_r+0xaa0>
 8014ad0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014ad2:	701a      	strb	r2, [r3, #0]
 8014ad4:	e7eb      	b.n	8014aae <_svfprintf_r+0xa92>
 8014ad6:	2310      	movs	r3, #16
 8014ad8:	431e      	orrs	r6, r3
 8014ada:	2220      	movs	r2, #32
 8014adc:	4032      	ands	r2, r6
 8014ade:	d025      	beq.n	8014b2c <_svfprintf_r+0xb10>
 8014ae0:	2307      	movs	r3, #7
 8014ae2:	3407      	adds	r4, #7
 8014ae4:	439c      	bics	r4, r3
 8014ae6:	0023      	movs	r3, r4
 8014ae8:	3308      	adds	r3, #8
 8014aea:	9312      	str	r3, [sp, #72]	; 0x48
 8014aec:	6823      	ldr	r3, [r4, #0]
 8014aee:	6864      	ldr	r4, [r4, #4]
 8014af0:	9306      	str	r3, [sp, #24]
 8014af2:	9407      	str	r4, [sp, #28]
 8014af4:	4bc2      	ldr	r3, [pc, #776]	; (8014e00 <_svfprintf_r+0xde4>)
 8014af6:	401e      	ands	r6, r3
 8014af8:	2300      	movs	r3, #0
 8014afa:	221b      	movs	r2, #27
 8014afc:	a91e      	add	r1, sp, #120	; 0x78
 8014afe:	1852      	adds	r2, r2, r1
 8014b00:	2100      	movs	r1, #0
 8014b02:	7011      	strb	r1, [r2, #0]
 8014b04:	9a08      	ldr	r2, [sp, #32]
 8014b06:	3201      	adds	r2, #1
 8014b08:	d100      	bne.n	8014b0c <_svfprintf_r+0xaf0>
 8014b0a:	e0a6      	b.n	8014c5a <_svfprintf_r+0xc3e>
 8014b0c:	0032      	movs	r2, r6
 8014b0e:	2180      	movs	r1, #128	; 0x80
 8014b10:	9807      	ldr	r0, [sp, #28]
 8014b12:	438e      	bics	r6, r1
 8014b14:	9906      	ldr	r1, [sp, #24]
 8014b16:	4301      	orrs	r1, r0
 8014b18:	d000      	beq.n	8014b1c <_svfprintf_r+0xb00>
 8014b1a:	e09e      	b.n	8014c5a <_svfprintf_r+0xc3e>
 8014b1c:	9908      	ldr	r1, [sp, #32]
 8014b1e:	2900      	cmp	r1, #0
 8014b20:	d100      	bne.n	8014b24 <_svfprintf_r+0xb08>
 8014b22:	e125      	b.n	8014d70 <_svfprintf_r+0xd54>
 8014b24:	2b01      	cmp	r3, #1
 8014b26:	d000      	beq.n	8014b2a <_svfprintf_r+0xb0e>
 8014b28:	e09a      	b.n	8014c60 <_svfprintf_r+0xc44>
 8014b2a:	e518      	b.n	801455e <_svfprintf_r+0x542>
 8014b2c:	1d23      	adds	r3, r4, #4
 8014b2e:	9312      	str	r3, [sp, #72]	; 0x48
 8014b30:	2310      	movs	r3, #16
 8014b32:	4033      	ands	r3, r6
 8014b34:	d003      	beq.n	8014b3e <_svfprintf_r+0xb22>
 8014b36:	6823      	ldr	r3, [r4, #0]
 8014b38:	9306      	str	r3, [sp, #24]
 8014b3a:	9207      	str	r2, [sp, #28]
 8014b3c:	e7da      	b.n	8014af4 <_svfprintf_r+0xad8>
 8014b3e:	2240      	movs	r2, #64	; 0x40
 8014b40:	4032      	ands	r2, r6
 8014b42:	d004      	beq.n	8014b4e <_svfprintf_r+0xb32>
 8014b44:	6822      	ldr	r2, [r4, #0]
 8014b46:	b292      	uxth	r2, r2
 8014b48:	9206      	str	r2, [sp, #24]
 8014b4a:	9307      	str	r3, [sp, #28]
 8014b4c:	e7d2      	b.n	8014af4 <_svfprintf_r+0xad8>
 8014b4e:	2380      	movs	r3, #128	; 0x80
 8014b50:	009b      	lsls	r3, r3, #2
 8014b52:	4033      	ands	r3, r6
 8014b54:	d002      	beq.n	8014b5c <_svfprintf_r+0xb40>
 8014b56:	6823      	ldr	r3, [r4, #0]
 8014b58:	b2db      	uxtb	r3, r3
 8014b5a:	e7ed      	b.n	8014b38 <_svfprintf_r+0xb1c>
 8014b5c:	6822      	ldr	r2, [r4, #0]
 8014b5e:	e7f3      	b.n	8014b48 <_svfprintf_r+0xb2c>
 8014b60:	1d23      	adds	r3, r4, #4
 8014b62:	49a8      	ldr	r1, [pc, #672]	; (8014e04 <_svfprintf_r+0xde8>)
 8014b64:	aa25      	add	r2, sp, #148	; 0x94
 8014b66:	9312      	str	r3, [sp, #72]	; 0x48
 8014b68:	6823      	ldr	r3, [r4, #0]
 8014b6a:	8011      	strh	r1, [r2, #0]
 8014b6c:	4aa6      	ldr	r2, [pc, #664]	; (8014e08 <_svfprintf_r+0xdec>)
 8014b6e:	9306      	str	r3, [sp, #24]
 8014b70:	2300      	movs	r3, #0
 8014b72:	921e      	str	r2, [sp, #120]	; 0x78
 8014b74:	2278      	movs	r2, #120	; 0x78
 8014b76:	9307      	str	r3, [sp, #28]
 8014b78:	3302      	adds	r3, #2
 8014b7a:	431e      	orrs	r6, r3
 8014b7c:	920e      	str	r2, [sp, #56]	; 0x38
 8014b7e:	e7bc      	b.n	8014afa <_svfprintf_r+0xade>
 8014b80:	1d23      	adds	r3, r4, #4
 8014b82:	9312      	str	r3, [sp, #72]	; 0x48
 8014b84:	6823      	ldr	r3, [r4, #0]
 8014b86:	2400      	movs	r4, #0
 8014b88:	9309      	str	r3, [sp, #36]	; 0x24
 8014b8a:	231b      	movs	r3, #27
 8014b8c:	aa1e      	add	r2, sp, #120	; 0x78
 8014b8e:	189b      	adds	r3, r3, r2
 8014b90:	701c      	strb	r4, [r3, #0]
 8014b92:	9b08      	ldr	r3, [sp, #32]
 8014b94:	3301      	adds	r3, #1
 8014b96:	d00e      	beq.n	8014bb6 <_svfprintf_r+0xb9a>
 8014b98:	9a08      	ldr	r2, [sp, #32]
 8014b9a:	0021      	movs	r1, r4
 8014b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b9e:	f001 ff79 	bl	8016a94 <memchr>
 8014ba2:	900c      	str	r0, [sp, #48]	; 0x30
 8014ba4:	42a0      	cmp	r0, r4
 8014ba6:	d100      	bne.n	8014baa <_svfprintf_r+0xb8e>
 8014ba8:	e100      	b.n	8014dac <_svfprintf_r+0xd90>
 8014baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014bac:	1a83      	subs	r3, r0, r2
 8014bae:	9308      	str	r3, [sp, #32]
 8014bb0:	940c      	str	r4, [sp, #48]	; 0x30
 8014bb2:	0023      	movs	r3, r4
 8014bb4:	e527      	b.n	8014606 <_svfprintf_r+0x5ea>
 8014bb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014bb8:	f7eb faae 	bl	8000118 <strlen>
 8014bbc:	9008      	str	r0, [sp, #32]
 8014bbe:	e7f7      	b.n	8014bb0 <_svfprintf_r+0xb94>
 8014bc0:	2310      	movs	r3, #16
 8014bc2:	431e      	orrs	r6, r3
 8014bc4:	2220      	movs	r2, #32
 8014bc6:	4032      	ands	r2, r6
 8014bc8:	d00b      	beq.n	8014be2 <_svfprintf_r+0xbc6>
 8014bca:	2307      	movs	r3, #7
 8014bcc:	3407      	adds	r4, #7
 8014bce:	439c      	bics	r4, r3
 8014bd0:	0023      	movs	r3, r4
 8014bd2:	3308      	adds	r3, #8
 8014bd4:	9312      	str	r3, [sp, #72]	; 0x48
 8014bd6:	6823      	ldr	r3, [r4, #0]
 8014bd8:	6864      	ldr	r4, [r4, #4]
 8014bda:	9306      	str	r3, [sp, #24]
 8014bdc:	9407      	str	r4, [sp, #28]
 8014bde:	2301      	movs	r3, #1
 8014be0:	e78b      	b.n	8014afa <_svfprintf_r+0xade>
 8014be2:	1d23      	adds	r3, r4, #4
 8014be4:	9312      	str	r3, [sp, #72]	; 0x48
 8014be6:	2310      	movs	r3, #16
 8014be8:	4033      	ands	r3, r6
 8014bea:	d003      	beq.n	8014bf4 <_svfprintf_r+0xbd8>
 8014bec:	6823      	ldr	r3, [r4, #0]
 8014bee:	9306      	str	r3, [sp, #24]
 8014bf0:	9207      	str	r2, [sp, #28]
 8014bf2:	e7f4      	b.n	8014bde <_svfprintf_r+0xbc2>
 8014bf4:	2240      	movs	r2, #64	; 0x40
 8014bf6:	4032      	ands	r2, r6
 8014bf8:	d004      	beq.n	8014c04 <_svfprintf_r+0xbe8>
 8014bfa:	6822      	ldr	r2, [r4, #0]
 8014bfc:	b292      	uxth	r2, r2
 8014bfe:	9206      	str	r2, [sp, #24]
 8014c00:	9307      	str	r3, [sp, #28]
 8014c02:	e7ec      	b.n	8014bde <_svfprintf_r+0xbc2>
 8014c04:	2380      	movs	r3, #128	; 0x80
 8014c06:	009b      	lsls	r3, r3, #2
 8014c08:	4033      	ands	r3, r6
 8014c0a:	d002      	beq.n	8014c12 <_svfprintf_r+0xbf6>
 8014c0c:	6823      	ldr	r3, [r4, #0]
 8014c0e:	b2db      	uxtb	r3, r3
 8014c10:	e7ed      	b.n	8014bee <_svfprintf_r+0xbd2>
 8014c12:	6822      	ldr	r2, [r4, #0]
 8014c14:	e7f3      	b.n	8014bfe <_svfprintf_r+0xbe2>
 8014c16:	4b7c      	ldr	r3, [pc, #496]	; (8014e08 <_svfprintf_r+0xdec>)
 8014c18:	f7ff fad9 	bl	80141ce <_svfprintf_r+0x1b2>
 8014c1c:	1d23      	adds	r3, r4, #4
 8014c1e:	9312      	str	r3, [sp, #72]	; 0x48
 8014c20:	2310      	movs	r3, #16
 8014c22:	4033      	ands	r3, r6
 8014c24:	d004      	beq.n	8014c30 <_svfprintf_r+0xc14>
 8014c26:	6823      	ldr	r3, [r4, #0]
 8014c28:	9306      	str	r3, [sp, #24]
 8014c2a:	9207      	str	r2, [sp, #28]
 8014c2c:	f7ff fadf 	bl	80141ee <_svfprintf_r+0x1d2>
 8014c30:	2240      	movs	r2, #64	; 0x40
 8014c32:	4032      	ands	r2, r6
 8014c34:	d005      	beq.n	8014c42 <_svfprintf_r+0xc26>
 8014c36:	6822      	ldr	r2, [r4, #0]
 8014c38:	b292      	uxth	r2, r2
 8014c3a:	9206      	str	r2, [sp, #24]
 8014c3c:	9307      	str	r3, [sp, #28]
 8014c3e:	f7ff fad6 	bl	80141ee <_svfprintf_r+0x1d2>
 8014c42:	2380      	movs	r3, #128	; 0x80
 8014c44:	009b      	lsls	r3, r3, #2
 8014c46:	4033      	ands	r3, r6
 8014c48:	d002      	beq.n	8014c50 <_svfprintf_r+0xc34>
 8014c4a:	6823      	ldr	r3, [r4, #0]
 8014c4c:	b2db      	uxtb	r3, r3
 8014c4e:	e7eb      	b.n	8014c28 <_svfprintf_r+0xc0c>
 8014c50:	6822      	ldr	r2, [r4, #0]
 8014c52:	e7f2      	b.n	8014c3a <_svfprintf_r+0xc1e>
 8014c54:	0032      	movs	r2, r6
 8014c56:	2301      	movs	r3, #1
 8014c58:	e759      	b.n	8014b0e <_svfprintf_r+0xaf2>
 8014c5a:	2b01      	cmp	r3, #1
 8014c5c:	d100      	bne.n	8014c60 <_svfprintf_r+0xc44>
 8014c5e:	e476      	b.n	801454e <_svfprintf_r+0x532>
 8014c60:	2b02      	cmp	r3, #2
 8014c62:	d06b      	beq.n	8014d3c <_svfprintf_r+0xd20>
 8014c64:	2507      	movs	r5, #7
 8014c66:	ab58      	add	r3, sp, #352	; 0x160
 8014c68:	1e5a      	subs	r2, r3, #1
 8014c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8014c6c:	9a06      	ldr	r2, [sp, #24]
 8014c6e:	1e59      	subs	r1, r3, #1
 8014c70:	402a      	ands	r2, r5
 8014c72:	3230      	adds	r2, #48	; 0x30
 8014c74:	700a      	strb	r2, [r1, #0]
 8014c76:	9907      	ldr	r1, [sp, #28]
 8014c78:	074c      	lsls	r4, r1, #29
 8014c7a:	9906      	ldr	r1, [sp, #24]
 8014c7c:	08c8      	lsrs	r0, r1, #3
 8014c7e:	9907      	ldr	r1, [sp, #28]
 8014c80:	4304      	orrs	r4, r0
 8014c82:	08c9      	lsrs	r1, r1, #3
 8014c84:	9107      	str	r1, [sp, #28]
 8014c86:	0021      	movs	r1, r4
 8014c88:	9807      	ldr	r0, [sp, #28]
 8014c8a:	9406      	str	r4, [sp, #24]
 8014c8c:	4301      	orrs	r1, r0
 8014c8e:	d111      	bne.n	8014cb4 <_svfprintf_r+0xc98>
 8014c90:	07f1      	lsls	r1, r6, #31
 8014c92:	d502      	bpl.n	8014c9a <_svfprintf_r+0xc7e>
 8014c94:	3b02      	subs	r3, #2
 8014c96:	2a30      	cmp	r2, #48	; 0x30
 8014c98:	d173      	bne.n	8014d82 <_svfprintf_r+0xd66>
 8014c9a:	9b08      	ldr	r3, [sp, #32]
 8014c9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014ca0:	ab58      	add	r3, sp, #352	; 0x160
 8014ca2:	1a9b      	subs	r3, r3, r2
 8014ca4:	9308      	str	r3, [sp, #32]
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	930c      	str	r3, [sp, #48]	; 0x30
 8014caa:	9310      	str	r3, [sp, #64]	; 0x40
 8014cac:	930f      	str	r3, [sp, #60]	; 0x3c
 8014cae:	001d      	movs	r5, r3
 8014cb0:	f7ff fb4b 	bl	801434a <_svfprintf_r+0x32e>
 8014cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cb6:	e7d7      	b.n	8014c68 <_svfprintf_r+0xc4c>
 8014cb8:	2480      	movs	r4, #128	; 0x80
 8014cba:	2300      	movs	r3, #0
 8014cbc:	00e4      	lsls	r4, r4, #3
 8014cbe:	930d      	str	r3, [sp, #52]	; 0x34
 8014cc0:	4034      	ands	r4, r6
 8014cc2:	ab58      	add	r3, sp, #352	; 0x160
 8014cc4:	3b01      	subs	r3, #1
 8014cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8014cc8:	220a      	movs	r2, #10
 8014cca:	9806      	ldr	r0, [sp, #24]
 8014ccc:	9907      	ldr	r1, [sp, #28]
 8014cce:	2300      	movs	r3, #0
 8014cd0:	f7eb fc2c 	bl	800052c <__aeabi_uldivmod>
 8014cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cd6:	3230      	adds	r2, #48	; 0x30
 8014cd8:	701a      	strb	r2, [r3, #0]
 8014cda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cdc:	3301      	adds	r3, #1
 8014cde:	930d      	str	r3, [sp, #52]	; 0x34
 8014ce0:	2c00      	cmp	r4, #0
 8014ce2:	d01d      	beq.n	8014d20 <_svfprintf_r+0xd04>
 8014ce4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014ce6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014ce8:	781b      	ldrb	r3, [r3, #0]
 8014cea:	429a      	cmp	r2, r3
 8014cec:	d118      	bne.n	8014d20 <_svfprintf_r+0xd04>
 8014cee:	2aff      	cmp	r2, #255	; 0xff
 8014cf0:	d016      	beq.n	8014d20 <_svfprintf_r+0xd04>
 8014cf2:	9b07      	ldr	r3, [sp, #28]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d102      	bne.n	8014cfe <_svfprintf_r+0xce2>
 8014cf8:	9b06      	ldr	r3, [sp, #24]
 8014cfa:	2b09      	cmp	r3, #9
 8014cfc:	d910      	bls.n	8014d20 <_svfprintf_r+0xd04>
 8014cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d00:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014d02:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014d04:	1a9b      	subs	r3, r3, r2
 8014d06:	0018      	movs	r0, r3
 8014d08:	9309      	str	r3, [sp, #36]	; 0x24
 8014d0a:	f7fe fa52 	bl	80131b2 <strncpy>
 8014d0e:	2200      	movs	r2, #0
 8014d10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d12:	920d      	str	r2, [sp, #52]	; 0x34
 8014d14:	785b      	ldrb	r3, [r3, #1]
 8014d16:	1e5a      	subs	r2, r3, #1
 8014d18:	4193      	sbcs	r3, r2
 8014d1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014d1c:	18d3      	adds	r3, r2, r3
 8014d1e:	9313      	str	r3, [sp, #76]	; 0x4c
 8014d20:	220a      	movs	r2, #10
 8014d22:	9806      	ldr	r0, [sp, #24]
 8014d24:	9907      	ldr	r1, [sp, #28]
 8014d26:	2300      	movs	r3, #0
 8014d28:	f7eb fc00 	bl	800052c <__aeabi_uldivmod>
 8014d2c:	9006      	str	r0, [sp, #24]
 8014d2e:	9107      	str	r1, [sp, #28]
 8014d30:	9b06      	ldr	r3, [sp, #24]
 8014d32:	9a07      	ldr	r2, [sp, #28]
 8014d34:	4313      	orrs	r3, r2
 8014d36:	d0b0      	beq.n	8014c9a <_svfprintf_r+0xc7e>
 8014d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d3a:	e7c3      	b.n	8014cc4 <_svfprintf_r+0xca8>
 8014d3c:	200f      	movs	r0, #15
 8014d3e:	ab58      	add	r3, sp, #352	; 0x160
 8014d40:	9309      	str	r3, [sp, #36]	; 0x24
 8014d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014d46:	3b01      	subs	r3, #1
 8014d48:	9309      	str	r3, [sp, #36]	; 0x24
 8014d4a:	9b06      	ldr	r3, [sp, #24]
 8014d4c:	4003      	ands	r3, r0
 8014d4e:	5cd3      	ldrb	r3, [r2, r3]
 8014d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d52:	7013      	strb	r3, [r2, #0]
 8014d54:	9b07      	ldr	r3, [sp, #28]
 8014d56:	0719      	lsls	r1, r3, #28
 8014d58:	9b06      	ldr	r3, [sp, #24]
 8014d5a:	091a      	lsrs	r2, r3, #4
 8014d5c:	9b07      	ldr	r3, [sp, #28]
 8014d5e:	4311      	orrs	r1, r2
 8014d60:	091b      	lsrs	r3, r3, #4
 8014d62:	9307      	str	r3, [sp, #28]
 8014d64:	000b      	movs	r3, r1
 8014d66:	9a07      	ldr	r2, [sp, #28]
 8014d68:	9106      	str	r1, [sp, #24]
 8014d6a:	4313      	orrs	r3, r2
 8014d6c:	d1e9      	bne.n	8014d42 <_svfprintf_r+0xd26>
 8014d6e:	e794      	b.n	8014c9a <_svfprintf_r+0xc7e>
 8014d70:	a958      	add	r1, sp, #352	; 0x160
 8014d72:	9109      	str	r1, [sp, #36]	; 0x24
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d190      	bne.n	8014c9a <_svfprintf_r+0xc7e>
 8014d78:	07d3      	lsls	r3, r2, #31
 8014d7a:	d58e      	bpl.n	8014c9a <_svfprintf_r+0xc7e>
 8014d7c:	23e7      	movs	r3, #231	; 0xe7
 8014d7e:	aa1e      	add	r2, sp, #120	; 0x78
 8014d80:	189b      	adds	r3, r3, r2
 8014d82:	2230      	movs	r2, #48	; 0x30
 8014d84:	f7ff fbf0 	bl	8014568 <_svfprintf_r+0x54c>
 8014d88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d100      	bne.n	8014d90 <_svfprintf_r+0xd74>
 8014d8e:	e38a      	b.n	80154a6 <_svfprintf_r+0x148a>
 8014d90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d92:	ab3f      	add	r3, sp, #252	; 0xfc
 8014d94:	701a      	strb	r2, [r3, #0]
 8014d96:	221b      	movs	r2, #27
 8014d98:	2000      	movs	r0, #0
 8014d9a:	a91e      	add	r1, sp, #120	; 0x78
 8014d9c:	1852      	adds	r2, r2, r1
 8014d9e:	7010      	strb	r0, [r2, #0]
 8014da0:	9412      	str	r4, [sp, #72]	; 0x48
 8014da2:	f7ff faca 	bl	801433a <_svfprintf_r+0x31e>
 8014da6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014da8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014daa:	e592      	b.n	80148d2 <_svfprintf_r+0x8b6>
 8014dac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014dae:	e42a      	b.n	8014606 <_svfprintf_r+0x5ea>
 8014db0:	2010      	movs	r0, #16
 8014db2:	1812      	adds	r2, r2, r0
 8014db4:	6078      	str	r0, [r7, #4]
 8014db6:	922e      	str	r2, [sp, #184]	; 0xb8
 8014db8:	932d      	str	r3, [sp, #180]	; 0xb4
 8014dba:	2b07      	cmp	r3, #7
 8014dbc:	dd08      	ble.n	8014dd0 <_svfprintf_r+0xdb4>
 8014dbe:	aa2c      	add	r2, sp, #176	; 0xb0
 8014dc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014dc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014dc4:	f002 fa7e 	bl	80172c4 <__ssprint_r>
 8014dc8:	2800      	cmp	r0, #0
 8014dca:	d000      	beq.n	8014dce <_svfprintf_r+0xdb2>
 8014dcc:	e34a      	b.n	8015464 <_svfprintf_r+0x1448>
 8014dce:	a92f      	add	r1, sp, #188	; 0xbc
 8014dd0:	3c10      	subs	r4, #16
 8014dd2:	000f      	movs	r7, r1
 8014dd4:	f7ff fad8 	bl	8014388 <_svfprintf_r+0x36c>
 8014dd8:	2010      	movs	r0, #16
 8014dda:	1812      	adds	r2, r2, r0
 8014ddc:	6078      	str	r0, [r7, #4]
 8014dde:	922e      	str	r2, [sp, #184]	; 0xb8
 8014de0:	932d      	str	r3, [sp, #180]	; 0xb4
 8014de2:	2b07      	cmp	r3, #7
 8014de4:	dd08      	ble.n	8014df8 <_svfprintf_r+0xddc>
 8014de6:	aa2c      	add	r2, sp, #176	; 0xb0
 8014de8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014dea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014dec:	f002 fa6a 	bl	80172c4 <__ssprint_r>
 8014df0:	2800      	cmp	r0, #0
 8014df2:	d000      	beq.n	8014df6 <_svfprintf_r+0xdda>
 8014df4:	e336      	b.n	8015464 <_svfprintf_r+0x1448>
 8014df6:	a92f      	add	r1, sp, #188	; 0xbc
 8014df8:	3c10      	subs	r4, #16
 8014dfa:	000f      	movs	r7, r1
 8014dfc:	f7ff fb24 	bl	8014448 <_svfprintf_r+0x42c>
 8014e00:	fffffbff 	.word	0xfffffbff
 8014e04:	00007830 	.word	0x00007830
 8014e08:	0801a408 	.word	0x0801a408
 8014e0c:	2010      	movs	r0, #16
 8014e0e:	1812      	adds	r2, r2, r0
 8014e10:	6078      	str	r0, [r7, #4]
 8014e12:	922e      	str	r2, [sp, #184]	; 0xb8
 8014e14:	932d      	str	r3, [sp, #180]	; 0xb4
 8014e16:	2b07      	cmp	r3, #7
 8014e18:	dd08      	ble.n	8014e2c <_svfprintf_r+0xe10>
 8014e1a:	aa2c      	add	r2, sp, #176	; 0xb0
 8014e1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014e20:	f002 fa50 	bl	80172c4 <__ssprint_r>
 8014e24:	2800      	cmp	r0, #0
 8014e26:	d000      	beq.n	8014e2a <_svfprintf_r+0xe0e>
 8014e28:	e31c      	b.n	8015464 <_svfprintf_r+0x1448>
 8014e2a:	a92f      	add	r1, sp, #188	; 0xbc
 8014e2c:	3c10      	subs	r4, #16
 8014e2e:	000f      	movs	r7, r1
 8014e30:	f7ff fb2c 	bl	801448c <_svfprintf_r+0x470>
 8014e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e36:	2b65      	cmp	r3, #101	; 0x65
 8014e38:	dc00      	bgt.n	8014e3c <_svfprintf_r+0xe20>
 8014e3a:	e259      	b.n	80152f0 <_svfprintf_r+0x12d4>
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	2300      	movs	r3, #0
 8014e40:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014e42:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014e44:	f7eb fb0a 	bl	800045c <__aeabi_dcmpeq>
 8014e48:	2800      	cmp	r0, #0
 8014e4a:	d07c      	beq.n	8014f46 <_svfprintf_r+0xf2a>
 8014e4c:	4b81      	ldr	r3, [pc, #516]	; (8015054 <_svfprintf_r+0x1038>)
 8014e4e:	603b      	str	r3, [r7, #0]
 8014e50:	2301      	movs	r3, #1
 8014e52:	607b      	str	r3, [r7, #4]
 8014e54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e56:	3708      	adds	r7, #8
 8014e58:	3301      	adds	r3, #1
 8014e5a:	932e      	str	r3, [sp, #184]	; 0xb8
 8014e5c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014e5e:	9308      	str	r3, [sp, #32]
 8014e60:	3301      	adds	r3, #1
 8014e62:	932d      	str	r3, [sp, #180]	; 0xb4
 8014e64:	2b07      	cmp	r3, #7
 8014e66:	dd08      	ble.n	8014e7a <_svfprintf_r+0xe5e>
 8014e68:	aa2c      	add	r2, sp, #176	; 0xb0
 8014e6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014e6e:	f002 fa29 	bl	80172c4 <__ssprint_r>
 8014e72:	2800      	cmp	r0, #0
 8014e74:	d000      	beq.n	8014e78 <_svfprintf_r+0xe5c>
 8014e76:	e2f5      	b.n	8015464 <_svfprintf_r+0x1448>
 8014e78:	af2f      	add	r7, sp, #188	; 0xbc
 8014e7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014e7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014e7e:	4293      	cmp	r3, r2
 8014e80:	db01      	blt.n	8014e86 <_svfprintf_r+0xe6a>
 8014e82:	07f3      	lsls	r3, r6, #31
 8014e84:	d51d      	bpl.n	8014ec2 <_svfprintf_r+0xea6>
 8014e86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014e88:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014e8a:	4694      	mov	ip, r2
 8014e8c:	603b      	str	r3, [r7, #0]
 8014e8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014e90:	607b      	str	r3, [r7, #4]
 8014e92:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014e94:	3708      	adds	r7, #8
 8014e96:	4463      	add	r3, ip
 8014e98:	932e      	str	r3, [sp, #184]	; 0xb8
 8014e9a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014e9c:	9308      	str	r3, [sp, #32]
 8014e9e:	3301      	adds	r3, #1
 8014ea0:	932d      	str	r3, [sp, #180]	; 0xb4
 8014ea2:	2b07      	cmp	r3, #7
 8014ea4:	dd08      	ble.n	8014eb8 <_svfprintf_r+0xe9c>
 8014ea6:	aa2c      	add	r2, sp, #176	; 0xb0
 8014ea8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014eaa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014eac:	f002 fa0a 	bl	80172c4 <__ssprint_r>
 8014eb0:	2800      	cmp	r0, #0
 8014eb2:	d000      	beq.n	8014eb6 <_svfprintf_r+0xe9a>
 8014eb4:	e2d6      	b.n	8015464 <_svfprintf_r+0x1448>
 8014eb6:	af2f      	add	r7, sp, #188	; 0xbc
 8014eb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014eba:	2510      	movs	r5, #16
 8014ebc:	1e5c      	subs	r4, r3, #1
 8014ebe:	2c00      	cmp	r4, #0
 8014ec0:	dc2f      	bgt.n	8014f22 <_svfprintf_r+0xf06>
 8014ec2:	0773      	lsls	r3, r6, #29
 8014ec4:	d500      	bpl.n	8014ec8 <_svfprintf_r+0xeac>
 8014ec6:	e2af      	b.n	8015428 <_svfprintf_r+0x140c>
 8014ec8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014eca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014ecc:	4293      	cmp	r3, r2
 8014ece:	da00      	bge.n	8014ed2 <_svfprintf_r+0xeb6>
 8014ed0:	0013      	movs	r3, r2
 8014ed2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014ed4:	18d3      	adds	r3, r2, r3
 8014ed6:	9315      	str	r3, [sp, #84]	; 0x54
 8014ed8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014eda:	9308      	str	r3, [sp, #32]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d007      	beq.n	8014ef0 <_svfprintf_r+0xed4>
 8014ee0:	aa2c      	add	r2, sp, #176	; 0xb0
 8014ee2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ee4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014ee6:	f002 f9ed 	bl	80172c4 <__ssprint_r>
 8014eea:	2800      	cmp	r0, #0
 8014eec:	d000      	beq.n	8014ef0 <_svfprintf_r+0xed4>
 8014eee:	e2b9      	b.n	8015464 <_svfprintf_r+0x1448>
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	932d      	str	r3, [sp, #180]	; 0xb4
 8014ef4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d000      	beq.n	8014efc <_svfprintf_r+0xee0>
 8014efa:	e2cf      	b.n	801549c <_svfprintf_r+0x1480>
 8014efc:	af2f      	add	r7, sp, #188	; 0xbc
 8014efe:	e5d6      	b.n	8014aae <_svfprintf_r+0xa92>
 8014f00:	3210      	adds	r2, #16
 8014f02:	607d      	str	r5, [r7, #4]
 8014f04:	922e      	str	r2, [sp, #184]	; 0xb8
 8014f06:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f08:	2b07      	cmp	r3, #7
 8014f0a:	dd08      	ble.n	8014f1e <_svfprintf_r+0xf02>
 8014f0c:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f12:	f002 f9d7 	bl	80172c4 <__ssprint_r>
 8014f16:	2800      	cmp	r0, #0
 8014f18:	d000      	beq.n	8014f1c <_svfprintf_r+0xf00>
 8014f1a:	e2a3      	b.n	8015464 <_svfprintf_r+0x1448>
 8014f1c:	a92f      	add	r1, sp, #188	; 0xbc
 8014f1e:	000f      	movs	r7, r1
 8014f20:	3c10      	subs	r4, #16
 8014f22:	0039      	movs	r1, r7
 8014f24:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014f26:	484c      	ldr	r0, [pc, #304]	; (8015058 <_svfprintf_r+0x103c>)
 8014f28:	9308      	str	r3, [sp, #32]
 8014f2a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014f2c:	3301      	adds	r3, #1
 8014f2e:	3108      	adds	r1, #8
 8014f30:	6038      	str	r0, [r7, #0]
 8014f32:	2c10      	cmp	r4, #16
 8014f34:	dce4      	bgt.n	8014f00 <_svfprintf_r+0xee4>
 8014f36:	607c      	str	r4, [r7, #4]
 8014f38:	18a4      	adds	r4, r4, r2
 8014f3a:	942e      	str	r4, [sp, #184]	; 0xb8
 8014f3c:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f3e:	000f      	movs	r7, r1
 8014f40:	2b07      	cmp	r3, #7
 8014f42:	ddbe      	ble.n	8014ec2 <_svfprintf_r+0xea6>
 8014f44:	e06a      	b.n	801501c <_svfprintf_r+0x1000>
 8014f46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	dd00      	ble.n	8014f4e <_svfprintf_r+0xf32>
 8014f4c:	e086      	b.n	801505c <_svfprintf_r+0x1040>
 8014f4e:	4b41      	ldr	r3, [pc, #260]	; (8015054 <_svfprintf_r+0x1038>)
 8014f50:	603b      	str	r3, [r7, #0]
 8014f52:	2301      	movs	r3, #1
 8014f54:	607b      	str	r3, [r7, #4]
 8014f56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f58:	3708      	adds	r7, #8
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	932e      	str	r3, [sp, #184]	; 0xb8
 8014f5e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014f60:	9308      	str	r3, [sp, #32]
 8014f62:	3301      	adds	r3, #1
 8014f64:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f66:	2b07      	cmp	r3, #7
 8014f68:	dd08      	ble.n	8014f7c <_svfprintf_r+0xf60>
 8014f6a:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f70:	f002 f9a8 	bl	80172c4 <__ssprint_r>
 8014f74:	2800      	cmp	r0, #0
 8014f76:	d000      	beq.n	8014f7a <_svfprintf_r+0xf5e>
 8014f78:	e274      	b.n	8015464 <_svfprintf_r+0x1448>
 8014f7a:	af2f      	add	r7, sp, #188	; 0xbc
 8014f7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d104      	bne.n	8014f8c <_svfprintf_r+0xf70>
 8014f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d101      	bne.n	8014f8c <_svfprintf_r+0xf70>
 8014f88:	07f3      	lsls	r3, r6, #31
 8014f8a:	d59a      	bpl.n	8014ec2 <_svfprintf_r+0xea6>
 8014f8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014f8e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014f90:	4694      	mov	ip, r2
 8014f92:	603b      	str	r3, [r7, #0]
 8014f94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014f96:	607b      	str	r3, [r7, #4]
 8014f98:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014f9a:	3708      	adds	r7, #8
 8014f9c:	4463      	add	r3, ip
 8014f9e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014fa0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014fa2:	9308      	str	r3, [sp, #32]
 8014fa4:	3301      	adds	r3, #1
 8014fa6:	932d      	str	r3, [sp, #180]	; 0xb4
 8014fa8:	2b07      	cmp	r3, #7
 8014faa:	dd08      	ble.n	8014fbe <_svfprintf_r+0xfa2>
 8014fac:	aa2c      	add	r2, sp, #176	; 0xb0
 8014fae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014fb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014fb2:	f002 f987 	bl	80172c4 <__ssprint_r>
 8014fb6:	2800      	cmp	r0, #0
 8014fb8:	d000      	beq.n	8014fbc <_svfprintf_r+0xfa0>
 8014fba:	e253      	b.n	8015464 <_svfprintf_r+0x1448>
 8014fbc:	af2f      	add	r7, sp, #188	; 0xbc
 8014fbe:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8014fc0:	2c00      	cmp	r4, #0
 8014fc2:	da1a      	bge.n	8014ffa <_svfprintf_r+0xfde>
 8014fc4:	0039      	movs	r1, r7
 8014fc6:	2510      	movs	r5, #16
 8014fc8:	4264      	negs	r4, r4
 8014fca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014fcc:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8014fce:	9308      	str	r3, [sp, #32]
 8014fd0:	1c5a      	adds	r2, r3, #1
 8014fd2:	4b21      	ldr	r3, [pc, #132]	; (8015058 <_svfprintf_r+0x103c>)
 8014fd4:	3708      	adds	r7, #8
 8014fd6:	600b      	str	r3, [r1, #0]
 8014fd8:	2c10      	cmp	r4, #16
 8014fda:	dc29      	bgt.n	8015030 <_svfprintf_r+0x1014>
 8014fdc:	604c      	str	r4, [r1, #4]
 8014fde:	1824      	adds	r4, r4, r0
 8014fe0:	942e      	str	r4, [sp, #184]	; 0xb8
 8014fe2:	922d      	str	r2, [sp, #180]	; 0xb4
 8014fe4:	2a07      	cmp	r2, #7
 8014fe6:	dd08      	ble.n	8014ffa <_svfprintf_r+0xfde>
 8014fe8:	aa2c      	add	r2, sp, #176	; 0xb0
 8014fea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014fec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014fee:	f002 f969 	bl	80172c4 <__ssprint_r>
 8014ff2:	2800      	cmp	r0, #0
 8014ff4:	d000      	beq.n	8014ff8 <_svfprintf_r+0xfdc>
 8014ff6:	e235      	b.n	8015464 <_svfprintf_r+0x1448>
 8014ff8:	af2f      	add	r7, sp, #188	; 0xbc
 8014ffa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ffe:	468c      	mov	ip, r1
 8015000:	603b      	str	r3, [r7, #0]
 8015002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015004:	607b      	str	r3, [r7, #4]
 8015006:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015008:	4463      	add	r3, ip
 801500a:	932e      	str	r3, [sp, #184]	; 0xb8
 801500c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801500e:	1c5a      	adds	r2, r3, #1
 8015010:	9308      	str	r3, [sp, #32]
 8015012:	922d      	str	r2, [sp, #180]	; 0xb4
 8015014:	2a07      	cmp	r2, #7
 8015016:	dc01      	bgt.n	801501c <_svfprintf_r+0x1000>
 8015018:	f7ff fa6c 	bl	80144f4 <_svfprintf_r+0x4d8>
 801501c:	aa2c      	add	r2, sp, #176	; 0xb0
 801501e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015020:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015022:	f002 f94f 	bl	80172c4 <__ssprint_r>
 8015026:	2800      	cmp	r0, #0
 8015028:	d000      	beq.n	801502c <_svfprintf_r+0x1010>
 801502a:	e21b      	b.n	8015464 <_svfprintf_r+0x1448>
 801502c:	af2f      	add	r7, sp, #188	; 0xbc
 801502e:	e748      	b.n	8014ec2 <_svfprintf_r+0xea6>
 8015030:	3010      	adds	r0, #16
 8015032:	604d      	str	r5, [r1, #4]
 8015034:	902e      	str	r0, [sp, #184]	; 0xb8
 8015036:	922d      	str	r2, [sp, #180]	; 0xb4
 8015038:	2a07      	cmp	r2, #7
 801503a:	dd08      	ble.n	801504e <_svfprintf_r+0x1032>
 801503c:	aa2c      	add	r2, sp, #176	; 0xb0
 801503e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015040:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015042:	f002 f93f 	bl	80172c4 <__ssprint_r>
 8015046:	2800      	cmp	r0, #0
 8015048:	d000      	beq.n	801504c <_svfprintf_r+0x1030>
 801504a:	e20b      	b.n	8015464 <_svfprintf_r+0x1448>
 801504c:	af2f      	add	r7, sp, #188	; 0xbc
 801504e:	3c10      	subs	r4, #16
 8015050:	0039      	movs	r1, r7
 8015052:	e7ba      	b.n	8014fca <_svfprintf_r+0xfae>
 8015054:	0801a42a 	.word	0x0801a42a
 8015058:	0801a43c 	.word	0x0801a43c
 801505c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801505e:	002c      	movs	r4, r5
 8015060:	429d      	cmp	r5, r3
 8015062:	dd00      	ble.n	8015066 <_svfprintf_r+0x104a>
 8015064:	001c      	movs	r4, r3
 8015066:	2c00      	cmp	r4, #0
 8015068:	dd15      	ble.n	8015096 <_svfprintf_r+0x107a>
 801506a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801506c:	607c      	str	r4, [r7, #4]
 801506e:	603b      	str	r3, [r7, #0]
 8015070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015072:	3708      	adds	r7, #8
 8015074:	18e3      	adds	r3, r4, r3
 8015076:	932e      	str	r3, [sp, #184]	; 0xb8
 8015078:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801507a:	9308      	str	r3, [sp, #32]
 801507c:	3301      	adds	r3, #1
 801507e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015080:	2b07      	cmp	r3, #7
 8015082:	dd08      	ble.n	8015096 <_svfprintf_r+0x107a>
 8015084:	aa2c      	add	r2, sp, #176	; 0xb0
 8015086:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015088:	980a      	ldr	r0, [sp, #40]	; 0x28
 801508a:	f002 f91b 	bl	80172c4 <__ssprint_r>
 801508e:	2800      	cmp	r0, #0
 8015090:	d000      	beq.n	8015094 <_svfprintf_r+0x1078>
 8015092:	e1e7      	b.n	8015464 <_svfprintf_r+0x1448>
 8015094:	af2f      	add	r7, sp, #188	; 0xbc
 8015096:	43e3      	mvns	r3, r4
 8015098:	17db      	asrs	r3, r3, #31
 801509a:	401c      	ands	r4, r3
 801509c:	1b2c      	subs	r4, r5, r4
 801509e:	2c00      	cmp	r4, #0
 80150a0:	dd1a      	ble.n	80150d8 <_svfprintf_r+0x10bc>
 80150a2:	0039      	movs	r1, r7
 80150a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150a6:	48d4      	ldr	r0, [pc, #848]	; (80153f8 <_svfprintf_r+0x13dc>)
 80150a8:	9308      	str	r3, [sp, #32]
 80150aa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80150ac:	3301      	adds	r3, #1
 80150ae:	3108      	adds	r1, #8
 80150b0:	6038      	str	r0, [r7, #0]
 80150b2:	2c10      	cmp	r4, #16
 80150b4:	dd00      	ble.n	80150b8 <_svfprintf_r+0x109c>
 80150b6:	e089      	b.n	80151cc <_svfprintf_r+0x11b0>
 80150b8:	607c      	str	r4, [r7, #4]
 80150ba:	18a4      	adds	r4, r4, r2
 80150bc:	942e      	str	r4, [sp, #184]	; 0xb8
 80150be:	932d      	str	r3, [sp, #180]	; 0xb4
 80150c0:	000f      	movs	r7, r1
 80150c2:	2b07      	cmp	r3, #7
 80150c4:	dd08      	ble.n	80150d8 <_svfprintf_r+0x10bc>
 80150c6:	aa2c      	add	r2, sp, #176	; 0xb0
 80150c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150cc:	f002 f8fa 	bl	80172c4 <__ssprint_r>
 80150d0:	2800      	cmp	r0, #0
 80150d2:	d000      	beq.n	80150d6 <_svfprintf_r+0x10ba>
 80150d4:	e1c6      	b.n	8015464 <_svfprintf_r+0x1448>
 80150d6:	af2f      	add	r7, sp, #188	; 0xbc
 80150d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150da:	195d      	adds	r5, r3, r5
 80150dc:	0573      	lsls	r3, r6, #21
 80150de:	d50d      	bpl.n	80150fc <_svfprintf_r+0x10e0>
 80150e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d000      	beq.n	80150e8 <_svfprintf_r+0x10cc>
 80150e6:	e084      	b.n	80151f2 <_svfprintf_r+0x11d6>
 80150e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d000      	beq.n	80150f0 <_svfprintf_r+0x10d4>
 80150ee:	e083      	b.n	80151f8 <_svfprintf_r+0x11dc>
 80150f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80150f4:	189b      	adds	r3, r3, r2
 80150f6:	429d      	cmp	r5, r3
 80150f8:	d900      	bls.n	80150fc <_svfprintf_r+0x10e0>
 80150fa:	001d      	movs	r5, r3
 80150fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80150fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015100:	4293      	cmp	r3, r2
 8015102:	db01      	blt.n	8015108 <_svfprintf_r+0x10ec>
 8015104:	07f3      	lsls	r3, r6, #31
 8015106:	d518      	bpl.n	801513a <_svfprintf_r+0x111e>
 8015108:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801510a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801510c:	4694      	mov	ip, r2
 801510e:	603b      	str	r3, [r7, #0]
 8015110:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015112:	607b      	str	r3, [r7, #4]
 8015114:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015116:	3708      	adds	r7, #8
 8015118:	4463      	add	r3, ip
 801511a:	932e      	str	r3, [sp, #184]	; 0xb8
 801511c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801511e:	9308      	str	r3, [sp, #32]
 8015120:	3301      	adds	r3, #1
 8015122:	932d      	str	r3, [sp, #180]	; 0xb4
 8015124:	2b07      	cmp	r3, #7
 8015126:	dd08      	ble.n	801513a <_svfprintf_r+0x111e>
 8015128:	aa2c      	add	r2, sp, #176	; 0xb0
 801512a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801512c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801512e:	f002 f8c9 	bl	80172c4 <__ssprint_r>
 8015132:	2800      	cmp	r0, #0
 8015134:	d000      	beq.n	8015138 <_svfprintf_r+0x111c>
 8015136:	e195      	b.n	8015464 <_svfprintf_r+0x1448>
 8015138:	af2f      	add	r7, sp, #188	; 0xbc
 801513a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801513c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801513e:	4694      	mov	ip, r2
 8015140:	9926      	ldr	r1, [sp, #152]	; 0x98
 8015142:	4463      	add	r3, ip
 8015144:	1b5b      	subs	r3, r3, r5
 8015146:	1a54      	subs	r4, r2, r1
 8015148:	429c      	cmp	r4, r3
 801514a:	dd00      	ble.n	801514e <_svfprintf_r+0x1132>
 801514c:	001c      	movs	r4, r3
 801514e:	2c00      	cmp	r4, #0
 8015150:	dd14      	ble.n	801517c <_svfprintf_r+0x1160>
 8015152:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015154:	603d      	str	r5, [r7, #0]
 8015156:	18e3      	adds	r3, r4, r3
 8015158:	932e      	str	r3, [sp, #184]	; 0xb8
 801515a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801515c:	607c      	str	r4, [r7, #4]
 801515e:	9308      	str	r3, [sp, #32]
 8015160:	3301      	adds	r3, #1
 8015162:	932d      	str	r3, [sp, #180]	; 0xb4
 8015164:	3708      	adds	r7, #8
 8015166:	2b07      	cmp	r3, #7
 8015168:	dd08      	ble.n	801517c <_svfprintf_r+0x1160>
 801516a:	aa2c      	add	r2, sp, #176	; 0xb0
 801516c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801516e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015170:	f002 f8a8 	bl	80172c4 <__ssprint_r>
 8015174:	2800      	cmp	r0, #0
 8015176:	d000      	beq.n	801517a <_svfprintf_r+0x115e>
 8015178:	e174      	b.n	8015464 <_svfprintf_r+0x1448>
 801517a:	af2f      	add	r7, sp, #188	; 0xbc
 801517c:	43e3      	mvns	r3, r4
 801517e:	17db      	asrs	r3, r3, #31
 8015180:	401c      	ands	r4, r3
 8015182:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015186:	2510      	movs	r5, #16
 8015188:	1a9b      	subs	r3, r3, r2
 801518a:	1b1c      	subs	r4, r3, r4
 801518c:	2c00      	cmp	r4, #0
 801518e:	dc00      	bgt.n	8015192 <_svfprintf_r+0x1176>
 8015190:	e697      	b.n	8014ec2 <_svfprintf_r+0xea6>
 8015192:	0039      	movs	r1, r7
 8015194:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015196:	4898      	ldr	r0, [pc, #608]	; (80153f8 <_svfprintf_r+0x13dc>)
 8015198:	9308      	str	r3, [sp, #32]
 801519a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801519c:	3301      	adds	r3, #1
 801519e:	3108      	adds	r1, #8
 80151a0:	6038      	str	r0, [r7, #0]
 80151a2:	2c10      	cmp	r4, #16
 80151a4:	dc00      	bgt.n	80151a8 <_svfprintf_r+0x118c>
 80151a6:	e6c6      	b.n	8014f36 <_svfprintf_r+0xf1a>
 80151a8:	3210      	adds	r2, #16
 80151aa:	607d      	str	r5, [r7, #4]
 80151ac:	922e      	str	r2, [sp, #184]	; 0xb8
 80151ae:	932d      	str	r3, [sp, #180]	; 0xb4
 80151b0:	2b07      	cmp	r3, #7
 80151b2:	dd08      	ble.n	80151c6 <_svfprintf_r+0x11aa>
 80151b4:	aa2c      	add	r2, sp, #176	; 0xb0
 80151b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151ba:	f002 f883 	bl	80172c4 <__ssprint_r>
 80151be:	2800      	cmp	r0, #0
 80151c0:	d000      	beq.n	80151c4 <_svfprintf_r+0x11a8>
 80151c2:	e14f      	b.n	8015464 <_svfprintf_r+0x1448>
 80151c4:	a92f      	add	r1, sp, #188	; 0xbc
 80151c6:	3c10      	subs	r4, #16
 80151c8:	000f      	movs	r7, r1
 80151ca:	e7e2      	b.n	8015192 <_svfprintf_r+0x1176>
 80151cc:	2010      	movs	r0, #16
 80151ce:	1812      	adds	r2, r2, r0
 80151d0:	6078      	str	r0, [r7, #4]
 80151d2:	922e      	str	r2, [sp, #184]	; 0xb8
 80151d4:	932d      	str	r3, [sp, #180]	; 0xb4
 80151d6:	2b07      	cmp	r3, #7
 80151d8:	dd08      	ble.n	80151ec <_svfprintf_r+0x11d0>
 80151da:	aa2c      	add	r2, sp, #176	; 0xb0
 80151dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151e0:	f002 f870 	bl	80172c4 <__ssprint_r>
 80151e4:	2800      	cmp	r0, #0
 80151e6:	d000      	beq.n	80151ea <_svfprintf_r+0x11ce>
 80151e8:	e13c      	b.n	8015464 <_svfprintf_r+0x1448>
 80151ea:	a92f      	add	r1, sp, #188	; 0xbc
 80151ec:	3c10      	subs	r4, #16
 80151ee:	000f      	movs	r7, r1
 80151f0:	e757      	b.n	80150a2 <_svfprintf_r+0x1086>
 80151f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d061      	beq.n	80152bc <_svfprintf_r+0x12a0>
 80151f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80151fa:	3b01      	subs	r3, #1
 80151fc:	9310      	str	r3, [sp, #64]	; 0x40
 80151fe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015200:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015202:	4694      	mov	ip, r2
 8015204:	603b      	str	r3, [r7, #0]
 8015206:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015208:	607b      	str	r3, [r7, #4]
 801520a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801520c:	3708      	adds	r7, #8
 801520e:	4463      	add	r3, ip
 8015210:	932e      	str	r3, [sp, #184]	; 0xb8
 8015212:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015214:	9308      	str	r3, [sp, #32]
 8015216:	3301      	adds	r3, #1
 8015218:	932d      	str	r3, [sp, #180]	; 0xb4
 801521a:	2b07      	cmp	r3, #7
 801521c:	dd08      	ble.n	8015230 <_svfprintf_r+0x1214>
 801521e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015220:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015222:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015224:	f002 f84e 	bl	80172c4 <__ssprint_r>
 8015228:	2800      	cmp	r0, #0
 801522a:	d000      	beq.n	801522e <_svfprintf_r+0x1212>
 801522c:	e11a      	b.n	8015464 <_svfprintf_r+0x1448>
 801522e:	af2f      	add	r7, sp, #188	; 0xbc
 8015230:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015234:	189b      	adds	r3, r3, r2
 8015236:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015238:	1b5b      	subs	r3, r3, r5
 801523a:	7814      	ldrb	r4, [r2, #0]
 801523c:	429c      	cmp	r4, r3
 801523e:	dd00      	ble.n	8015242 <_svfprintf_r+0x1226>
 8015240:	001c      	movs	r4, r3
 8015242:	2c00      	cmp	r4, #0
 8015244:	dd14      	ble.n	8015270 <_svfprintf_r+0x1254>
 8015246:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015248:	603d      	str	r5, [r7, #0]
 801524a:	18e3      	adds	r3, r4, r3
 801524c:	932e      	str	r3, [sp, #184]	; 0xb8
 801524e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015250:	607c      	str	r4, [r7, #4]
 8015252:	9308      	str	r3, [sp, #32]
 8015254:	3301      	adds	r3, #1
 8015256:	932d      	str	r3, [sp, #180]	; 0xb4
 8015258:	3708      	adds	r7, #8
 801525a:	2b07      	cmp	r3, #7
 801525c:	dd08      	ble.n	8015270 <_svfprintf_r+0x1254>
 801525e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015260:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015262:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015264:	f002 f82e 	bl	80172c4 <__ssprint_r>
 8015268:	2800      	cmp	r0, #0
 801526a:	d000      	beq.n	801526e <_svfprintf_r+0x1252>
 801526c:	e0fa      	b.n	8015464 <_svfprintf_r+0x1448>
 801526e:	af2f      	add	r7, sp, #188	; 0xbc
 8015270:	43e3      	mvns	r3, r4
 8015272:	17db      	asrs	r3, r3, #31
 8015274:	401c      	ands	r4, r3
 8015276:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015278:	781b      	ldrb	r3, [r3, #0]
 801527a:	1b1c      	subs	r4, r3, r4
 801527c:	2c00      	cmp	r4, #0
 801527e:	dd19      	ble.n	80152b4 <_svfprintf_r+0x1298>
 8015280:	0039      	movs	r1, r7
 8015282:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015284:	485c      	ldr	r0, [pc, #368]	; (80153f8 <_svfprintf_r+0x13dc>)
 8015286:	9308      	str	r3, [sp, #32]
 8015288:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801528a:	3301      	adds	r3, #1
 801528c:	3108      	adds	r1, #8
 801528e:	6038      	str	r0, [r7, #0]
 8015290:	2c10      	cmp	r4, #16
 8015292:	dc1a      	bgt.n	80152ca <_svfprintf_r+0x12ae>
 8015294:	607c      	str	r4, [r7, #4]
 8015296:	18a4      	adds	r4, r4, r2
 8015298:	942e      	str	r4, [sp, #184]	; 0xb8
 801529a:	932d      	str	r3, [sp, #180]	; 0xb4
 801529c:	000f      	movs	r7, r1
 801529e:	2b07      	cmp	r3, #7
 80152a0:	dd08      	ble.n	80152b4 <_svfprintf_r+0x1298>
 80152a2:	aa2c      	add	r2, sp, #176	; 0xb0
 80152a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152a8:	f002 f80c 	bl	80172c4 <__ssprint_r>
 80152ac:	2800      	cmp	r0, #0
 80152ae:	d000      	beq.n	80152b2 <_svfprintf_r+0x1296>
 80152b0:	e0d8      	b.n	8015464 <_svfprintf_r+0x1448>
 80152b2:	af2f      	add	r7, sp, #188	; 0xbc
 80152b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80152b6:	781b      	ldrb	r3, [r3, #0]
 80152b8:	18ed      	adds	r5, r5, r3
 80152ba:	e711      	b.n	80150e0 <_svfprintf_r+0x10c4>
 80152bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80152be:	3b01      	subs	r3, #1
 80152c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80152c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152c4:	3b01      	subs	r3, #1
 80152c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80152c8:	e799      	b.n	80151fe <_svfprintf_r+0x11e2>
 80152ca:	2010      	movs	r0, #16
 80152cc:	1812      	adds	r2, r2, r0
 80152ce:	6078      	str	r0, [r7, #4]
 80152d0:	922e      	str	r2, [sp, #184]	; 0xb8
 80152d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80152d4:	2b07      	cmp	r3, #7
 80152d6:	dd08      	ble.n	80152ea <_svfprintf_r+0x12ce>
 80152d8:	aa2c      	add	r2, sp, #176	; 0xb0
 80152da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152de:	f001 fff1 	bl	80172c4 <__ssprint_r>
 80152e2:	2800      	cmp	r0, #0
 80152e4:	d000      	beq.n	80152e8 <_svfprintf_r+0x12cc>
 80152e6:	e0bd      	b.n	8015464 <_svfprintf_r+0x1448>
 80152e8:	a92f      	add	r1, sp, #188	; 0xbc
 80152ea:	3c10      	subs	r4, #16
 80152ec:	000f      	movs	r7, r1
 80152ee:	e7c7      	b.n	8015280 <_svfprintf_r+0x1264>
 80152f0:	003c      	movs	r4, r7
 80152f2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80152f4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80152f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80152f8:	9308      	str	r3, [sp, #32]
 80152fa:	3101      	adds	r1, #1
 80152fc:	3301      	adds	r3, #1
 80152fe:	3408      	adds	r4, #8
 8015300:	2a01      	cmp	r2, #1
 8015302:	dc03      	bgt.n	801530c <_svfprintf_r+0x12f0>
 8015304:	2201      	movs	r2, #1
 8015306:	4216      	tst	r6, r2
 8015308:	d100      	bne.n	801530c <_svfprintf_r+0x12f0>
 801530a:	e088      	b.n	801541e <_svfprintf_r+0x1402>
 801530c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801530e:	912e      	str	r1, [sp, #184]	; 0xb8
 8015310:	603a      	str	r2, [r7, #0]
 8015312:	2201      	movs	r2, #1
 8015314:	932d      	str	r3, [sp, #180]	; 0xb4
 8015316:	607a      	str	r2, [r7, #4]
 8015318:	2b07      	cmp	r3, #7
 801531a:	dd08      	ble.n	801532e <_svfprintf_r+0x1312>
 801531c:	aa2c      	add	r2, sp, #176	; 0xb0
 801531e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015320:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015322:	f001 ffcf 	bl	80172c4 <__ssprint_r>
 8015326:	2800      	cmp	r0, #0
 8015328:	d000      	beq.n	801532c <_svfprintf_r+0x1310>
 801532a:	e09b      	b.n	8015464 <_svfprintf_r+0x1448>
 801532c:	ac2f      	add	r4, sp, #188	; 0xbc
 801532e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015330:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015332:	4694      	mov	ip, r2
 8015334:	6023      	str	r3, [r4, #0]
 8015336:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015338:	6063      	str	r3, [r4, #4]
 801533a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801533c:	3408      	adds	r4, #8
 801533e:	4463      	add	r3, ip
 8015340:	932e      	str	r3, [sp, #184]	; 0xb8
 8015342:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015344:	9308      	str	r3, [sp, #32]
 8015346:	3301      	adds	r3, #1
 8015348:	932d      	str	r3, [sp, #180]	; 0xb4
 801534a:	2b07      	cmp	r3, #7
 801534c:	dd08      	ble.n	8015360 <_svfprintf_r+0x1344>
 801534e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015350:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015352:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015354:	f001 ffb6 	bl	80172c4 <__ssprint_r>
 8015358:	2800      	cmp	r0, #0
 801535a:	d000      	beq.n	801535e <_svfprintf_r+0x1342>
 801535c:	e082      	b.n	8015464 <_svfprintf_r+0x1448>
 801535e:	ac2f      	add	r4, sp, #188	; 0xbc
 8015360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015362:	2200      	movs	r2, #0
 8015364:	1e5d      	subs	r5, r3, #1
 8015366:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015368:	2300      	movs	r3, #0
 801536a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801536c:	f7eb f876 	bl	800045c <__aeabi_dcmpeq>
 8015370:	2800      	cmp	r0, #0
 8015372:	d12c      	bne.n	80153ce <_svfprintf_r+0x13b2>
 8015374:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015376:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015378:	9308      	str	r3, [sp, #32]
 801537a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801537c:	6065      	str	r5, [r4, #4]
 801537e:	1c5a      	adds	r2, r3, #1
 8015380:	930e      	str	r3, [sp, #56]	; 0x38
 8015382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015384:	922d      	str	r2, [sp, #180]	; 0xb4
 8015386:	3301      	adds	r3, #1
 8015388:	6023      	str	r3, [r4, #0]
 801538a:	9b08      	ldr	r3, [sp, #32]
 801538c:	3408      	adds	r4, #8
 801538e:	3b01      	subs	r3, #1
 8015390:	185b      	adds	r3, r3, r1
 8015392:	932e      	str	r3, [sp, #184]	; 0xb8
 8015394:	2a07      	cmp	r2, #7
 8015396:	dd07      	ble.n	80153a8 <_svfprintf_r+0x138c>
 8015398:	aa2c      	add	r2, sp, #176	; 0xb0
 801539a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801539c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801539e:	f001 ff91 	bl	80172c4 <__ssprint_r>
 80153a2:	2800      	cmp	r0, #0
 80153a4:	d15e      	bne.n	8015464 <_svfprintf_r+0x1448>
 80153a6:	ac2f      	add	r4, sp, #188	; 0xbc
 80153a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80153aa:	ab28      	add	r3, sp, #160	; 0xa0
 80153ac:	4694      	mov	ip, r2
 80153ae:	6023      	str	r3, [r4, #0]
 80153b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80153b2:	6063      	str	r3, [r4, #4]
 80153b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80153b6:	4463      	add	r3, ip
 80153b8:	932e      	str	r3, [sp, #184]	; 0xb8
 80153ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153bc:	9308      	str	r3, [sp, #32]
 80153be:	3301      	adds	r3, #1
 80153c0:	932d      	str	r3, [sp, #180]	; 0xb4
 80153c2:	2b07      	cmp	r3, #7
 80153c4:	dd00      	ble.n	80153c8 <_svfprintf_r+0x13ac>
 80153c6:	e629      	b.n	801501c <_svfprintf_r+0x1000>
 80153c8:	3408      	adds	r4, #8
 80153ca:	0027      	movs	r7, r4
 80153cc:	e579      	b.n	8014ec2 <_svfprintf_r+0xea6>
 80153ce:	2710      	movs	r7, #16
 80153d0:	2d00      	cmp	r5, #0
 80153d2:	dde9      	ble.n	80153a8 <_svfprintf_r+0x138c>
 80153d4:	0021      	movs	r1, r4
 80153d6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153d8:	4807      	ldr	r0, [pc, #28]	; (80153f8 <_svfprintf_r+0x13dc>)
 80153da:	9308      	str	r3, [sp, #32]
 80153dc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80153de:	3301      	adds	r3, #1
 80153e0:	3108      	adds	r1, #8
 80153e2:	6020      	str	r0, [r4, #0]
 80153e4:	2d10      	cmp	r5, #16
 80153e6:	dc09      	bgt.n	80153fc <_svfprintf_r+0x13e0>
 80153e8:	6065      	str	r5, [r4, #4]
 80153ea:	000c      	movs	r4, r1
 80153ec:	18ad      	adds	r5, r5, r2
 80153ee:	952e      	str	r5, [sp, #184]	; 0xb8
 80153f0:	932d      	str	r3, [sp, #180]	; 0xb4
 80153f2:	2b07      	cmp	r3, #7
 80153f4:	ddd8      	ble.n	80153a8 <_svfprintf_r+0x138c>
 80153f6:	e7cf      	b.n	8015398 <_svfprintf_r+0x137c>
 80153f8:	0801a43c 	.word	0x0801a43c
 80153fc:	3210      	adds	r2, #16
 80153fe:	6067      	str	r7, [r4, #4]
 8015400:	922e      	str	r2, [sp, #184]	; 0xb8
 8015402:	932d      	str	r3, [sp, #180]	; 0xb4
 8015404:	2b07      	cmp	r3, #7
 8015406:	dd07      	ble.n	8015418 <_svfprintf_r+0x13fc>
 8015408:	aa2c      	add	r2, sp, #176	; 0xb0
 801540a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801540c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801540e:	f001 ff59 	bl	80172c4 <__ssprint_r>
 8015412:	2800      	cmp	r0, #0
 8015414:	d126      	bne.n	8015464 <_svfprintf_r+0x1448>
 8015416:	a92f      	add	r1, sp, #188	; 0xbc
 8015418:	3d10      	subs	r5, #16
 801541a:	000c      	movs	r4, r1
 801541c:	e7da      	b.n	80153d4 <_svfprintf_r+0x13b8>
 801541e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015420:	912e      	str	r1, [sp, #184]	; 0xb8
 8015422:	c705      	stmia	r7!, {r0, r2}
 8015424:	932d      	str	r3, [sp, #180]	; 0xb4
 8015426:	e7e4      	b.n	80153f2 <_svfprintf_r+0x13d6>
 8015428:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801542a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801542c:	2510      	movs	r5, #16
 801542e:	1a9c      	subs	r4, r3, r2
 8015430:	2c00      	cmp	r4, #0
 8015432:	dc00      	bgt.n	8015436 <_svfprintf_r+0x141a>
 8015434:	e548      	b.n	8014ec8 <_svfprintf_r+0xeac>
 8015436:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015438:	4921      	ldr	r1, [pc, #132]	; (80154c0 <_svfprintf_r+0x14a4>)
 801543a:	9308      	str	r3, [sp, #32]
 801543c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801543e:	3301      	adds	r3, #1
 8015440:	6039      	str	r1, [r7, #0]
 8015442:	2c10      	cmp	r4, #16
 8015444:	dc19      	bgt.n	801547a <_svfprintf_r+0x145e>
 8015446:	607c      	str	r4, [r7, #4]
 8015448:	18a4      	adds	r4, r4, r2
 801544a:	942e      	str	r4, [sp, #184]	; 0xb8
 801544c:	932d      	str	r3, [sp, #180]	; 0xb4
 801544e:	2b07      	cmp	r3, #7
 8015450:	dc00      	bgt.n	8015454 <_svfprintf_r+0x1438>
 8015452:	e539      	b.n	8014ec8 <_svfprintf_r+0xeac>
 8015454:	aa2c      	add	r2, sp, #176	; 0xb0
 8015456:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015458:	980a      	ldr	r0, [sp, #40]	; 0x28
 801545a:	f001 ff33 	bl	80172c4 <__ssprint_r>
 801545e:	2800      	cmp	r0, #0
 8015460:	d100      	bne.n	8015464 <_svfprintf_r+0x1448>
 8015462:	e531      	b.n	8014ec8 <_svfprintf_r+0xeac>
 8015464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015466:	2b00      	cmp	r3, #0
 8015468:	d101      	bne.n	801546e <_svfprintf_r+0x1452>
 801546a:	f7ff f908 	bl	801467e <_svfprintf_r+0x662>
 801546e:	0019      	movs	r1, r3
 8015470:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015472:	f000 ff19 	bl	80162a8 <_free_r>
 8015476:	f7ff f902 	bl	801467e <_svfprintf_r+0x662>
 801547a:	3210      	adds	r2, #16
 801547c:	607d      	str	r5, [r7, #4]
 801547e:	922e      	str	r2, [sp, #184]	; 0xb8
 8015480:	932d      	str	r3, [sp, #180]	; 0xb4
 8015482:	3708      	adds	r7, #8
 8015484:	2b07      	cmp	r3, #7
 8015486:	dd07      	ble.n	8015498 <_svfprintf_r+0x147c>
 8015488:	aa2c      	add	r2, sp, #176	; 0xb0
 801548a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801548c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801548e:	f001 ff19 	bl	80172c4 <__ssprint_r>
 8015492:	2800      	cmp	r0, #0
 8015494:	d1e6      	bne.n	8015464 <_svfprintf_r+0x1448>
 8015496:	af2f      	add	r7, sp, #188	; 0xbc
 8015498:	3c10      	subs	r4, #16
 801549a:	e7cc      	b.n	8015436 <_svfprintf_r+0x141a>
 801549c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801549e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154a0:	f000 ff02 	bl	80162a8 <_free_r>
 80154a4:	e52a      	b.n	8014efc <_svfprintf_r+0xee0>
 80154a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80154a8:	9306      	str	r3, [sp, #24]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d101      	bne.n	80154b2 <_svfprintf_r+0x1496>
 80154ae:	f7ff f8e6 	bl	801467e <_svfprintf_r+0x662>
 80154b2:	aa2c      	add	r2, sp, #176	; 0xb0
 80154b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154b8:	f001 ff04 	bl	80172c4 <__ssprint_r>
 80154bc:	f7ff f8df 	bl	801467e <_svfprintf_r+0x662>
 80154c0:	0801a42c 	.word	0x0801a42c

080154c4 <sysconf>:
 80154c4:	2380      	movs	r3, #128	; 0x80
 80154c6:	b510      	push	{r4, lr}
 80154c8:	015b      	lsls	r3, r3, #5
 80154ca:	2808      	cmp	r0, #8
 80154cc:	d004      	beq.n	80154d8 <sysconf+0x14>
 80154ce:	f000 fe7d 	bl	80161cc <__errno>
 80154d2:	2316      	movs	r3, #22
 80154d4:	6003      	str	r3, [r0, #0]
 80154d6:	3b17      	subs	r3, #23
 80154d8:	0018      	movs	r0, r3
 80154da:	bd10      	pop	{r4, pc}

080154dc <__ascii_wctomb>:
 80154dc:	1e0b      	subs	r3, r1, #0
 80154de:	d004      	beq.n	80154ea <__ascii_wctomb+0xe>
 80154e0:	2aff      	cmp	r2, #255	; 0xff
 80154e2:	d904      	bls.n	80154ee <__ascii_wctomb+0x12>
 80154e4:	238a      	movs	r3, #138	; 0x8a
 80154e6:	6003      	str	r3, [r0, #0]
 80154e8:	3b8b      	subs	r3, #139	; 0x8b
 80154ea:	0018      	movs	r0, r3
 80154ec:	4770      	bx	lr
 80154ee:	700a      	strb	r2, [r1, #0]
 80154f0:	2301      	movs	r3, #1
 80154f2:	e7fa      	b.n	80154ea <__ascii_wctomb+0xe>

080154f4 <register_fini>:
 80154f4:	4b03      	ldr	r3, [pc, #12]	; (8015504 <register_fini+0x10>)
 80154f6:	b510      	push	{r4, lr}
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d002      	beq.n	8015502 <register_fini+0xe>
 80154fc:	4802      	ldr	r0, [pc, #8]	; (8015508 <register_fini+0x14>)
 80154fe:	f000 f805 	bl	801550c <atexit>
 8015502:	bd10      	pop	{r4, pc}
 8015504:	00000000 	.word	0x00000000
 8015508:	080161d9 	.word	0x080161d9

0801550c <atexit>:
 801550c:	2300      	movs	r3, #0
 801550e:	b510      	push	{r4, lr}
 8015510:	0001      	movs	r1, r0
 8015512:	001a      	movs	r2, r3
 8015514:	0018      	movs	r0, r3
 8015516:	f001 ff53 	bl	80173c0 <__register_exitproc>
 801551a:	bd10      	pop	{r4, pc}

0801551c <quorem>:
 801551c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801551e:	6903      	ldr	r3, [r0, #16]
 8015520:	690c      	ldr	r4, [r1, #16]
 8015522:	b089      	sub	sp, #36	; 0x24
 8015524:	0007      	movs	r7, r0
 8015526:	9105      	str	r1, [sp, #20]
 8015528:	2600      	movs	r6, #0
 801552a:	42a3      	cmp	r3, r4
 801552c:	db65      	blt.n	80155fa <quorem+0xde>
 801552e:	000b      	movs	r3, r1
 8015530:	3c01      	subs	r4, #1
 8015532:	3314      	adds	r3, #20
 8015534:	00a5      	lsls	r5, r4, #2
 8015536:	9303      	str	r3, [sp, #12]
 8015538:	195b      	adds	r3, r3, r5
 801553a:	9304      	str	r3, [sp, #16]
 801553c:	0003      	movs	r3, r0
 801553e:	3314      	adds	r3, #20
 8015540:	9302      	str	r3, [sp, #8]
 8015542:	195d      	adds	r5, r3, r5
 8015544:	9b04      	ldr	r3, [sp, #16]
 8015546:	6828      	ldr	r0, [r5, #0]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	1c59      	adds	r1, r3, #1
 801554c:	9301      	str	r3, [sp, #4]
 801554e:	f7ea fdff 	bl	8000150 <__udivsi3>
 8015552:	9001      	str	r0, [sp, #4]
 8015554:	42b0      	cmp	r0, r6
 8015556:	d029      	beq.n	80155ac <quorem+0x90>
 8015558:	9b03      	ldr	r3, [sp, #12]
 801555a:	9802      	ldr	r0, [sp, #8]
 801555c:	469c      	mov	ip, r3
 801555e:	9606      	str	r6, [sp, #24]
 8015560:	4662      	mov	r2, ip
 8015562:	ca08      	ldmia	r2!, {r3}
 8015564:	4694      	mov	ip, r2
 8015566:	9a01      	ldr	r2, [sp, #4]
 8015568:	b299      	uxth	r1, r3
 801556a:	4351      	muls	r1, r2
 801556c:	0c1b      	lsrs	r3, r3, #16
 801556e:	4353      	muls	r3, r2
 8015570:	1989      	adds	r1, r1, r6
 8015572:	0c0a      	lsrs	r2, r1, #16
 8015574:	189b      	adds	r3, r3, r2
 8015576:	9307      	str	r3, [sp, #28]
 8015578:	0c1e      	lsrs	r6, r3, #16
 801557a:	6803      	ldr	r3, [r0, #0]
 801557c:	b289      	uxth	r1, r1
 801557e:	b29a      	uxth	r2, r3
 8015580:	9b06      	ldr	r3, [sp, #24]
 8015582:	18d2      	adds	r2, r2, r3
 8015584:	6803      	ldr	r3, [r0, #0]
 8015586:	1a52      	subs	r2, r2, r1
 8015588:	0c19      	lsrs	r1, r3, #16
 801558a:	466b      	mov	r3, sp
 801558c:	8b9b      	ldrh	r3, [r3, #28]
 801558e:	1acb      	subs	r3, r1, r3
 8015590:	1411      	asrs	r1, r2, #16
 8015592:	185b      	adds	r3, r3, r1
 8015594:	1419      	asrs	r1, r3, #16
 8015596:	b292      	uxth	r2, r2
 8015598:	041b      	lsls	r3, r3, #16
 801559a:	431a      	orrs	r2, r3
 801559c:	9b04      	ldr	r3, [sp, #16]
 801559e:	9106      	str	r1, [sp, #24]
 80155a0:	c004      	stmia	r0!, {r2}
 80155a2:	4563      	cmp	r3, ip
 80155a4:	d2dc      	bcs.n	8015560 <quorem+0x44>
 80155a6:	682b      	ldr	r3, [r5, #0]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d02d      	beq.n	8015608 <quorem+0xec>
 80155ac:	9905      	ldr	r1, [sp, #20]
 80155ae:	0038      	movs	r0, r7
 80155b0:	f001 fcb2 	bl	8016f18 <__mcmp>
 80155b4:	2800      	cmp	r0, #0
 80155b6:	db1f      	blt.n	80155f8 <quorem+0xdc>
 80155b8:	2500      	movs	r5, #0
 80155ba:	9b01      	ldr	r3, [sp, #4]
 80155bc:	9802      	ldr	r0, [sp, #8]
 80155be:	3301      	adds	r3, #1
 80155c0:	9903      	ldr	r1, [sp, #12]
 80155c2:	9301      	str	r3, [sp, #4]
 80155c4:	6802      	ldr	r2, [r0, #0]
 80155c6:	c908      	ldmia	r1!, {r3}
 80155c8:	b292      	uxth	r2, r2
 80155ca:	1955      	adds	r5, r2, r5
 80155cc:	b29a      	uxth	r2, r3
 80155ce:	1aaa      	subs	r2, r5, r2
 80155d0:	6805      	ldr	r5, [r0, #0]
 80155d2:	0c1b      	lsrs	r3, r3, #16
 80155d4:	0c2d      	lsrs	r5, r5, #16
 80155d6:	1aeb      	subs	r3, r5, r3
 80155d8:	1415      	asrs	r5, r2, #16
 80155da:	195b      	adds	r3, r3, r5
 80155dc:	141d      	asrs	r5, r3, #16
 80155de:	b292      	uxth	r2, r2
 80155e0:	041b      	lsls	r3, r3, #16
 80155e2:	4313      	orrs	r3, r2
 80155e4:	c008      	stmia	r0!, {r3}
 80155e6:	9b04      	ldr	r3, [sp, #16]
 80155e8:	428b      	cmp	r3, r1
 80155ea:	d2eb      	bcs.n	80155c4 <quorem+0xa8>
 80155ec:	9a02      	ldr	r2, [sp, #8]
 80155ee:	00a3      	lsls	r3, r4, #2
 80155f0:	18d3      	adds	r3, r2, r3
 80155f2:	681a      	ldr	r2, [r3, #0]
 80155f4:	2a00      	cmp	r2, #0
 80155f6:	d011      	beq.n	801561c <quorem+0x100>
 80155f8:	9e01      	ldr	r6, [sp, #4]
 80155fa:	0030      	movs	r0, r6
 80155fc:	b009      	add	sp, #36	; 0x24
 80155fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015600:	682b      	ldr	r3, [r5, #0]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d104      	bne.n	8015610 <quorem+0xf4>
 8015606:	3c01      	subs	r4, #1
 8015608:	9b02      	ldr	r3, [sp, #8]
 801560a:	3d04      	subs	r5, #4
 801560c:	42ab      	cmp	r3, r5
 801560e:	d3f7      	bcc.n	8015600 <quorem+0xe4>
 8015610:	613c      	str	r4, [r7, #16]
 8015612:	e7cb      	b.n	80155ac <quorem+0x90>
 8015614:	681a      	ldr	r2, [r3, #0]
 8015616:	2a00      	cmp	r2, #0
 8015618:	d104      	bne.n	8015624 <quorem+0x108>
 801561a:	3c01      	subs	r4, #1
 801561c:	9a02      	ldr	r2, [sp, #8]
 801561e:	3b04      	subs	r3, #4
 8015620:	429a      	cmp	r2, r3
 8015622:	d3f7      	bcc.n	8015614 <quorem+0xf8>
 8015624:	613c      	str	r4, [r7, #16]
 8015626:	e7e7      	b.n	80155f8 <quorem+0xdc>

08015628 <_dtoa_r>:
 8015628:	b5f0      	push	{r4, r5, r6, r7, lr}
 801562a:	0014      	movs	r4, r2
 801562c:	001d      	movs	r5, r3
 801562e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8015630:	b09b      	sub	sp, #108	; 0x6c
 8015632:	9002      	str	r0, [sp, #8]
 8015634:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8015636:	9406      	str	r4, [sp, #24]
 8015638:	9507      	str	r5, [sp, #28]
 801563a:	2900      	cmp	r1, #0
 801563c:	d009      	beq.n	8015652 <_dtoa_r+0x2a>
 801563e:	2301      	movs	r3, #1
 8015640:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015642:	4093      	lsls	r3, r2
 8015644:	604a      	str	r2, [r1, #4]
 8015646:	608b      	str	r3, [r1, #8]
 8015648:	f001 fa6a 	bl	8016b20 <_Bfree>
 801564c:	2300      	movs	r3, #0
 801564e:	9a02      	ldr	r2, [sp, #8]
 8015650:	6413      	str	r3, [r2, #64]	; 0x40
 8015652:	2d00      	cmp	r5, #0
 8015654:	da20      	bge.n	8015698 <_dtoa_r+0x70>
 8015656:	2301      	movs	r3, #1
 8015658:	6033      	str	r3, [r6, #0]
 801565a:	006b      	lsls	r3, r5, #1
 801565c:	085b      	lsrs	r3, r3, #1
 801565e:	9307      	str	r3, [sp, #28]
 8015660:	9c07      	ldr	r4, [sp, #28]
 8015662:	4bb2      	ldr	r3, [pc, #712]	; (801592c <_dtoa_r+0x304>)
 8015664:	0022      	movs	r2, r4
 8015666:	9317      	str	r3, [sp, #92]	; 0x5c
 8015668:	401a      	ands	r2, r3
 801566a:	429a      	cmp	r2, r3
 801566c:	d117      	bne.n	801569e <_dtoa_r+0x76>
 801566e:	4bb0      	ldr	r3, [pc, #704]	; (8015930 <_dtoa_r+0x308>)
 8015670:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015672:	6013      	str	r3, [r2, #0]
 8015674:	9b06      	ldr	r3, [sp, #24]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d103      	bne.n	8015682 <_dtoa_r+0x5a>
 801567a:	0324      	lsls	r4, r4, #12
 801567c:	d101      	bne.n	8015682 <_dtoa_r+0x5a>
 801567e:	f000 fd89 	bl	8016194 <_dtoa_r+0xb6c>
 8015682:	4bac      	ldr	r3, [pc, #688]	; (8015934 <_dtoa_r+0x30c>)
 8015684:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015686:	9308      	str	r3, [sp, #32]
 8015688:	2a00      	cmp	r2, #0
 801568a:	d002      	beq.n	8015692 <_dtoa_r+0x6a>
 801568c:	4baa      	ldr	r3, [pc, #680]	; (8015938 <_dtoa_r+0x310>)
 801568e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015690:	6013      	str	r3, [r2, #0]
 8015692:	9808      	ldr	r0, [sp, #32]
 8015694:	b01b      	add	sp, #108	; 0x6c
 8015696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015698:	2300      	movs	r3, #0
 801569a:	6033      	str	r3, [r6, #0]
 801569c:	e7e0      	b.n	8015660 <_dtoa_r+0x38>
 801569e:	9e06      	ldr	r6, [sp, #24]
 80156a0:	9f07      	ldr	r7, [sp, #28]
 80156a2:	2200      	movs	r2, #0
 80156a4:	2300      	movs	r3, #0
 80156a6:	0030      	movs	r0, r6
 80156a8:	0039      	movs	r1, r7
 80156aa:	f7ea fed7 	bl	800045c <__aeabi_dcmpeq>
 80156ae:	1e05      	subs	r5, r0, #0
 80156b0:	d00b      	beq.n	80156ca <_dtoa_r+0xa2>
 80156b2:	2301      	movs	r3, #1
 80156b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80156b6:	6013      	str	r3, [r2, #0]
 80156b8:	4ba0      	ldr	r3, [pc, #640]	; (801593c <_dtoa_r+0x314>)
 80156ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80156bc:	9308      	str	r3, [sp, #32]
 80156be:	2a00      	cmp	r2, #0
 80156c0:	d0e7      	beq.n	8015692 <_dtoa_r+0x6a>
 80156c2:	4a9f      	ldr	r2, [pc, #636]	; (8015940 <_dtoa_r+0x318>)
 80156c4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80156c6:	600a      	str	r2, [r1, #0]
 80156c8:	e7e3      	b.n	8015692 <_dtoa_r+0x6a>
 80156ca:	ab18      	add	r3, sp, #96	; 0x60
 80156cc:	9301      	str	r3, [sp, #4]
 80156ce:	ab19      	add	r3, sp, #100	; 0x64
 80156d0:	9300      	str	r3, [sp, #0]
 80156d2:	0032      	movs	r2, r6
 80156d4:	003b      	movs	r3, r7
 80156d6:	9802      	ldr	r0, [sp, #8]
 80156d8:	f001 fd0e 	bl	80170f8 <__d2b>
 80156dc:	0063      	lsls	r3, r4, #1
 80156de:	9003      	str	r0, [sp, #12]
 80156e0:	0d5b      	lsrs	r3, r3, #21
 80156e2:	d074      	beq.n	80157ce <_dtoa_r+0x1a6>
 80156e4:	033a      	lsls	r2, r7, #12
 80156e6:	4c97      	ldr	r4, [pc, #604]	; (8015944 <_dtoa_r+0x31c>)
 80156e8:	0b12      	lsrs	r2, r2, #12
 80156ea:	4314      	orrs	r4, r2
 80156ec:	0021      	movs	r1, r4
 80156ee:	4a96      	ldr	r2, [pc, #600]	; (8015948 <_dtoa_r+0x320>)
 80156f0:	0030      	movs	r0, r6
 80156f2:	9516      	str	r5, [sp, #88]	; 0x58
 80156f4:	189e      	adds	r6, r3, r2
 80156f6:	2200      	movs	r2, #0
 80156f8:	4b94      	ldr	r3, [pc, #592]	; (801594c <_dtoa_r+0x324>)
 80156fa:	f7ec fe0d 	bl	8002318 <__aeabi_dsub>
 80156fe:	4a94      	ldr	r2, [pc, #592]	; (8015950 <_dtoa_r+0x328>)
 8015700:	4b94      	ldr	r3, [pc, #592]	; (8015954 <_dtoa_r+0x32c>)
 8015702:	f7ec fb97 	bl	8001e34 <__aeabi_dmul>
 8015706:	4a94      	ldr	r2, [pc, #592]	; (8015958 <_dtoa_r+0x330>)
 8015708:	4b94      	ldr	r3, [pc, #592]	; (801595c <_dtoa_r+0x334>)
 801570a:	f7eb fc6d 	bl	8000fe8 <__aeabi_dadd>
 801570e:	0004      	movs	r4, r0
 8015710:	0030      	movs	r0, r6
 8015712:	000d      	movs	r5, r1
 8015714:	f7ed f99a 	bl	8002a4c <__aeabi_i2d>
 8015718:	4a91      	ldr	r2, [pc, #580]	; (8015960 <_dtoa_r+0x338>)
 801571a:	4b92      	ldr	r3, [pc, #584]	; (8015964 <_dtoa_r+0x33c>)
 801571c:	f7ec fb8a 	bl	8001e34 <__aeabi_dmul>
 8015720:	0002      	movs	r2, r0
 8015722:	000b      	movs	r3, r1
 8015724:	0020      	movs	r0, r4
 8015726:	0029      	movs	r1, r5
 8015728:	f7eb fc5e 	bl	8000fe8 <__aeabi_dadd>
 801572c:	0004      	movs	r4, r0
 801572e:	000d      	movs	r5, r1
 8015730:	f7ed f956 	bl	80029e0 <__aeabi_d2iz>
 8015734:	2200      	movs	r2, #0
 8015736:	0007      	movs	r7, r0
 8015738:	2300      	movs	r3, #0
 801573a:	0020      	movs	r0, r4
 801573c:	0029      	movs	r1, r5
 801573e:	f7ea fe93 	bl	8000468 <__aeabi_dcmplt>
 8015742:	2800      	cmp	r0, #0
 8015744:	d009      	beq.n	801575a <_dtoa_r+0x132>
 8015746:	0038      	movs	r0, r7
 8015748:	f7ed f980 	bl	8002a4c <__aeabi_i2d>
 801574c:	002b      	movs	r3, r5
 801574e:	0022      	movs	r2, r4
 8015750:	f7ea fe84 	bl	800045c <__aeabi_dcmpeq>
 8015754:	4243      	negs	r3, r0
 8015756:	4158      	adcs	r0, r3
 8015758:	1a3f      	subs	r7, r7, r0
 801575a:	2301      	movs	r3, #1
 801575c:	9314      	str	r3, [sp, #80]	; 0x50
 801575e:	2f16      	cmp	r7, #22
 8015760:	d80d      	bhi.n	801577e <_dtoa_r+0x156>
 8015762:	4981      	ldr	r1, [pc, #516]	; (8015968 <_dtoa_r+0x340>)
 8015764:	00fb      	lsls	r3, r7, #3
 8015766:	18c9      	adds	r1, r1, r3
 8015768:	6808      	ldr	r0, [r1, #0]
 801576a:	6849      	ldr	r1, [r1, #4]
 801576c:	9a06      	ldr	r2, [sp, #24]
 801576e:	9b07      	ldr	r3, [sp, #28]
 8015770:	f7ea fe8e 	bl	8000490 <__aeabi_dcmpgt>
 8015774:	2800      	cmp	r0, #0
 8015776:	d046      	beq.n	8015806 <_dtoa_r+0x1de>
 8015778:	2300      	movs	r3, #0
 801577a:	3f01      	subs	r7, #1
 801577c:	9314      	str	r3, [sp, #80]	; 0x50
 801577e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015780:	1b9e      	subs	r6, r3, r6
 8015782:	2300      	movs	r3, #0
 8015784:	930a      	str	r3, [sp, #40]	; 0x28
 8015786:	0033      	movs	r3, r6
 8015788:	3b01      	subs	r3, #1
 801578a:	930b      	str	r3, [sp, #44]	; 0x2c
 801578c:	d504      	bpl.n	8015798 <_dtoa_r+0x170>
 801578e:	2301      	movs	r3, #1
 8015790:	1b9b      	subs	r3, r3, r6
 8015792:	930a      	str	r3, [sp, #40]	; 0x28
 8015794:	2300      	movs	r3, #0
 8015796:	930b      	str	r3, [sp, #44]	; 0x2c
 8015798:	2f00      	cmp	r7, #0
 801579a:	db36      	blt.n	801580a <_dtoa_r+0x1e2>
 801579c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801579e:	9711      	str	r7, [sp, #68]	; 0x44
 80157a0:	19db      	adds	r3, r3, r7
 80157a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80157a4:	2300      	movs	r3, #0
 80157a6:	9304      	str	r3, [sp, #16]
 80157a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80157aa:	2401      	movs	r4, #1
 80157ac:	2b09      	cmp	r3, #9
 80157ae:	d900      	bls.n	80157b2 <_dtoa_r+0x18a>
 80157b0:	e082      	b.n	80158b8 <_dtoa_r+0x290>
 80157b2:	2b05      	cmp	r3, #5
 80157b4:	dd02      	ble.n	80157bc <_dtoa_r+0x194>
 80157b6:	2400      	movs	r4, #0
 80157b8:	3b04      	subs	r3, #4
 80157ba:	9320      	str	r3, [sp, #128]	; 0x80
 80157bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80157be:	1e98      	subs	r0, r3, #2
 80157c0:	2803      	cmp	r0, #3
 80157c2:	d900      	bls.n	80157c6 <_dtoa_r+0x19e>
 80157c4:	e082      	b.n	80158cc <_dtoa_r+0x2a4>
 80157c6:	f7ea fcaf 	bl	8000128 <__gnu_thumb1_case_uqi>
 80157ca:	7573      	.short	0x7573
 80157cc:	6828      	.short	0x6828
 80157ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80157d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80157d2:	189e      	adds	r6, r3, r2
 80157d4:	4b65      	ldr	r3, [pc, #404]	; (801596c <_dtoa_r+0x344>)
 80157d6:	18f2      	adds	r2, r6, r3
 80157d8:	2a20      	cmp	r2, #32
 80157da:	dd0f      	ble.n	80157fc <_dtoa_r+0x1d4>
 80157dc:	2340      	movs	r3, #64	; 0x40
 80157de:	1a9b      	subs	r3, r3, r2
 80157e0:	409c      	lsls	r4, r3
 80157e2:	4b63      	ldr	r3, [pc, #396]	; (8015970 <_dtoa_r+0x348>)
 80157e4:	9806      	ldr	r0, [sp, #24]
 80157e6:	18f3      	adds	r3, r6, r3
 80157e8:	40d8      	lsrs	r0, r3
 80157ea:	4320      	orrs	r0, r4
 80157ec:	f7ed f968 	bl	8002ac0 <__aeabi_ui2d>
 80157f0:	2301      	movs	r3, #1
 80157f2:	4c60      	ldr	r4, [pc, #384]	; (8015974 <_dtoa_r+0x34c>)
 80157f4:	3e01      	subs	r6, #1
 80157f6:	1909      	adds	r1, r1, r4
 80157f8:	9316      	str	r3, [sp, #88]	; 0x58
 80157fa:	e77c      	b.n	80156f6 <_dtoa_r+0xce>
 80157fc:	2320      	movs	r3, #32
 80157fe:	9806      	ldr	r0, [sp, #24]
 8015800:	1a9b      	subs	r3, r3, r2
 8015802:	4098      	lsls	r0, r3
 8015804:	e7f2      	b.n	80157ec <_dtoa_r+0x1c4>
 8015806:	9014      	str	r0, [sp, #80]	; 0x50
 8015808:	e7b9      	b.n	801577e <_dtoa_r+0x156>
 801580a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801580c:	1bdb      	subs	r3, r3, r7
 801580e:	930a      	str	r3, [sp, #40]	; 0x28
 8015810:	427b      	negs	r3, r7
 8015812:	9304      	str	r3, [sp, #16]
 8015814:	2300      	movs	r3, #0
 8015816:	9311      	str	r3, [sp, #68]	; 0x44
 8015818:	e7c6      	b.n	80157a8 <_dtoa_r+0x180>
 801581a:	2301      	movs	r3, #1
 801581c:	930d      	str	r3, [sp, #52]	; 0x34
 801581e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015820:	2b00      	cmp	r3, #0
 8015822:	dd57      	ble.n	80158d4 <_dtoa_r+0x2ac>
 8015824:	930c      	str	r3, [sp, #48]	; 0x30
 8015826:	9309      	str	r3, [sp, #36]	; 0x24
 8015828:	2200      	movs	r2, #0
 801582a:	9902      	ldr	r1, [sp, #8]
 801582c:	644a      	str	r2, [r1, #68]	; 0x44
 801582e:	3204      	adds	r2, #4
 8015830:	0010      	movs	r0, r2
 8015832:	9902      	ldr	r1, [sp, #8]
 8015834:	3014      	adds	r0, #20
 8015836:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8015838:	4298      	cmp	r0, r3
 801583a:	d950      	bls.n	80158de <_dtoa_r+0x2b6>
 801583c:	9802      	ldr	r0, [sp, #8]
 801583e:	f001 f947 	bl	8016ad0 <_Balloc>
 8015842:	9b02      	ldr	r3, [sp, #8]
 8015844:	9008      	str	r0, [sp, #32]
 8015846:	6418      	str	r0, [r3, #64]	; 0x40
 8015848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801584a:	2b0e      	cmp	r3, #14
 801584c:	d900      	bls.n	8015850 <_dtoa_r+0x228>
 801584e:	e10c      	b.n	8015a6a <_dtoa_r+0x442>
 8015850:	2c00      	cmp	r4, #0
 8015852:	d100      	bne.n	8015856 <_dtoa_r+0x22e>
 8015854:	e109      	b.n	8015a6a <_dtoa_r+0x442>
 8015856:	9b06      	ldr	r3, [sp, #24]
 8015858:	9c07      	ldr	r4, [sp, #28]
 801585a:	9312      	str	r3, [sp, #72]	; 0x48
 801585c:	9413      	str	r4, [sp, #76]	; 0x4c
 801585e:	2f00      	cmp	r7, #0
 8015860:	dc00      	bgt.n	8015864 <_dtoa_r+0x23c>
 8015862:	e08b      	b.n	801597c <_dtoa_r+0x354>
 8015864:	210f      	movs	r1, #15
 8015866:	003a      	movs	r2, r7
 8015868:	4b3f      	ldr	r3, [pc, #252]	; (8015968 <_dtoa_r+0x340>)
 801586a:	400a      	ands	r2, r1
 801586c:	00d2      	lsls	r2, r2, #3
 801586e:	189b      	adds	r3, r3, r2
 8015870:	681d      	ldr	r5, [r3, #0]
 8015872:	685e      	ldr	r6, [r3, #4]
 8015874:	2302      	movs	r3, #2
 8015876:	113c      	asrs	r4, r7, #4
 8015878:	930e      	str	r3, [sp, #56]	; 0x38
 801587a:	06e3      	lsls	r3, r4, #27
 801587c:	d50b      	bpl.n	8015896 <_dtoa_r+0x26e>
 801587e:	4b3e      	ldr	r3, [pc, #248]	; (8015978 <_dtoa_r+0x350>)
 8015880:	400c      	ands	r4, r1
 8015882:	6a1a      	ldr	r2, [r3, #32]
 8015884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015886:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015888:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801588a:	f7eb fec9 	bl	8001620 <__aeabi_ddiv>
 801588e:	2303      	movs	r3, #3
 8015890:	9006      	str	r0, [sp, #24]
 8015892:	9107      	str	r1, [sp, #28]
 8015894:	930e      	str	r3, [sp, #56]	; 0x38
 8015896:	2300      	movs	r3, #0
 8015898:	e03b      	b.n	8015912 <_dtoa_r+0x2ea>
 801589a:	2301      	movs	r3, #1
 801589c:	930d      	str	r3, [sp, #52]	; 0x34
 801589e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158a0:	18fb      	adds	r3, r7, r3
 80158a2:	930c      	str	r3, [sp, #48]	; 0x30
 80158a4:	3301      	adds	r3, #1
 80158a6:	9309      	str	r3, [sp, #36]	; 0x24
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	dcbd      	bgt.n	8015828 <_dtoa_r+0x200>
 80158ac:	2301      	movs	r3, #1
 80158ae:	e7bb      	b.n	8015828 <_dtoa_r+0x200>
 80158b0:	2300      	movs	r3, #0
 80158b2:	e7b3      	b.n	801581c <_dtoa_r+0x1f4>
 80158b4:	2300      	movs	r3, #0
 80158b6:	e7f1      	b.n	801589c <_dtoa_r+0x274>
 80158b8:	2300      	movs	r3, #0
 80158ba:	940d      	str	r4, [sp, #52]	; 0x34
 80158bc:	9320      	str	r3, [sp, #128]	; 0x80
 80158be:	3b01      	subs	r3, #1
 80158c0:	2200      	movs	r2, #0
 80158c2:	930c      	str	r3, [sp, #48]	; 0x30
 80158c4:	9309      	str	r3, [sp, #36]	; 0x24
 80158c6:	3313      	adds	r3, #19
 80158c8:	9221      	str	r2, [sp, #132]	; 0x84
 80158ca:	e7ad      	b.n	8015828 <_dtoa_r+0x200>
 80158cc:	2301      	movs	r3, #1
 80158ce:	930d      	str	r3, [sp, #52]	; 0x34
 80158d0:	3b02      	subs	r3, #2
 80158d2:	e7f5      	b.n	80158c0 <_dtoa_r+0x298>
 80158d4:	2301      	movs	r3, #1
 80158d6:	930c      	str	r3, [sp, #48]	; 0x30
 80158d8:	9309      	str	r3, [sp, #36]	; 0x24
 80158da:	001a      	movs	r2, r3
 80158dc:	e7f4      	b.n	80158c8 <_dtoa_r+0x2a0>
 80158de:	9802      	ldr	r0, [sp, #8]
 80158e0:	3101      	adds	r1, #1
 80158e2:	6441      	str	r1, [r0, #68]	; 0x44
 80158e4:	0052      	lsls	r2, r2, #1
 80158e6:	e7a3      	b.n	8015830 <_dtoa_r+0x208>
 80158e8:	2301      	movs	r3, #1
 80158ea:	421c      	tst	r4, r3
 80158ec:	d00e      	beq.n	801590c <_dtoa_r+0x2e4>
 80158ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158f0:	4a21      	ldr	r2, [pc, #132]	; (8015978 <_dtoa_r+0x350>)
 80158f2:	3301      	adds	r3, #1
 80158f4:	930e      	str	r3, [sp, #56]	; 0x38
 80158f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80158f8:	0028      	movs	r0, r5
 80158fa:	00db      	lsls	r3, r3, #3
 80158fc:	189b      	adds	r3, r3, r2
 80158fe:	0031      	movs	r1, r6
 8015900:	681a      	ldr	r2, [r3, #0]
 8015902:	685b      	ldr	r3, [r3, #4]
 8015904:	f7ec fa96 	bl	8001e34 <__aeabi_dmul>
 8015908:	0005      	movs	r5, r0
 801590a:	000e      	movs	r6, r1
 801590c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801590e:	1064      	asrs	r4, r4, #1
 8015910:	3301      	adds	r3, #1
 8015912:	9310      	str	r3, [sp, #64]	; 0x40
 8015914:	2c00      	cmp	r4, #0
 8015916:	d1e7      	bne.n	80158e8 <_dtoa_r+0x2c0>
 8015918:	9806      	ldr	r0, [sp, #24]
 801591a:	9907      	ldr	r1, [sp, #28]
 801591c:	002a      	movs	r2, r5
 801591e:	0033      	movs	r3, r6
 8015920:	f7eb fe7e 	bl	8001620 <__aeabi_ddiv>
 8015924:	9006      	str	r0, [sp, #24]
 8015926:	9107      	str	r1, [sp, #28]
 8015928:	e043      	b.n	80159b2 <_dtoa_r+0x38a>
 801592a:	46c0      	nop			; (mov r8, r8)
 801592c:	7ff00000 	.word	0x7ff00000
 8015930:	0000270f 	.word	0x0000270f
 8015934:	0801a556 	.word	0x0801a556
 8015938:	0801a559 	.word	0x0801a559
 801593c:	0801a42a 	.word	0x0801a42a
 8015940:	0801a42b 	.word	0x0801a42b
 8015944:	3ff00000 	.word	0x3ff00000
 8015948:	fffffc01 	.word	0xfffffc01
 801594c:	3ff80000 	.word	0x3ff80000
 8015950:	636f4361 	.word	0x636f4361
 8015954:	3fd287a7 	.word	0x3fd287a7
 8015958:	8b60c8b3 	.word	0x8b60c8b3
 801595c:	3fc68a28 	.word	0x3fc68a28
 8015960:	509f79fb 	.word	0x509f79fb
 8015964:	3fd34413 	.word	0x3fd34413
 8015968:	0801a588 	.word	0x0801a588
 801596c:	00000432 	.word	0x00000432
 8015970:	00000412 	.word	0x00000412
 8015974:	fe100000 	.word	0xfe100000
 8015978:	0801a560 	.word	0x0801a560
 801597c:	2302      	movs	r3, #2
 801597e:	930e      	str	r3, [sp, #56]	; 0x38
 8015980:	2f00      	cmp	r7, #0
 8015982:	d016      	beq.n	80159b2 <_dtoa_r+0x38a>
 8015984:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015986:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015988:	427c      	negs	r4, r7
 801598a:	330d      	adds	r3, #13
 801598c:	4023      	ands	r3, r4
 801598e:	4acf      	ldr	r2, [pc, #828]	; (8015ccc <_dtoa_r+0x6a4>)
 8015990:	00db      	lsls	r3, r3, #3
 8015992:	18d3      	adds	r3, r2, r3
 8015994:	681a      	ldr	r2, [r3, #0]
 8015996:	685b      	ldr	r3, [r3, #4]
 8015998:	f7ec fa4c 	bl	8001e34 <__aeabi_dmul>
 801599c:	2300      	movs	r3, #0
 801599e:	2601      	movs	r6, #1
 80159a0:	001d      	movs	r5, r3
 80159a2:	9006      	str	r0, [sp, #24]
 80159a4:	9107      	str	r1, [sp, #28]
 80159a6:	1124      	asrs	r4, r4, #4
 80159a8:	2c00      	cmp	r4, #0
 80159aa:	d000      	beq.n	80159ae <_dtoa_r+0x386>
 80159ac:	e08c      	b.n	8015ac8 <_dtoa_r+0x4a0>
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d1b8      	bne.n	8015924 <_dtoa_r+0x2fc>
 80159b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d100      	bne.n	80159ba <_dtoa_r+0x392>
 80159b8:	e096      	b.n	8015ae8 <_dtoa_r+0x4c0>
 80159ba:	9c06      	ldr	r4, [sp, #24]
 80159bc:	9d07      	ldr	r5, [sp, #28]
 80159be:	2200      	movs	r2, #0
 80159c0:	4bc3      	ldr	r3, [pc, #780]	; (8015cd0 <_dtoa_r+0x6a8>)
 80159c2:	0020      	movs	r0, r4
 80159c4:	0029      	movs	r1, r5
 80159c6:	f7ea fd4f 	bl	8000468 <__aeabi_dcmplt>
 80159ca:	2800      	cmp	r0, #0
 80159cc:	d100      	bne.n	80159d0 <_dtoa_r+0x3a8>
 80159ce:	e08b      	b.n	8015ae8 <_dtoa_r+0x4c0>
 80159d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d100      	bne.n	80159d8 <_dtoa_r+0x3b0>
 80159d6:	e087      	b.n	8015ae8 <_dtoa_r+0x4c0>
 80159d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159da:	2b00      	cmp	r3, #0
 80159dc:	dd41      	ble.n	8015a62 <_dtoa_r+0x43a>
 80159de:	4bbd      	ldr	r3, [pc, #756]	; (8015cd4 <_dtoa_r+0x6ac>)
 80159e0:	2200      	movs	r2, #0
 80159e2:	0020      	movs	r0, r4
 80159e4:	0029      	movs	r1, r5
 80159e6:	f7ec fa25 	bl	8001e34 <__aeabi_dmul>
 80159ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80159ec:	9006      	str	r0, [sp, #24]
 80159ee:	9107      	str	r1, [sp, #28]
 80159f0:	3301      	adds	r3, #1
 80159f2:	930e      	str	r3, [sp, #56]	; 0x38
 80159f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159f6:	1e7e      	subs	r6, r7, #1
 80159f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80159fa:	9310      	str	r3, [sp, #64]	; 0x40
 80159fc:	f7ed f826 	bl	8002a4c <__aeabi_i2d>
 8015a00:	9a06      	ldr	r2, [sp, #24]
 8015a02:	9b07      	ldr	r3, [sp, #28]
 8015a04:	f7ec fa16 	bl	8001e34 <__aeabi_dmul>
 8015a08:	2200      	movs	r2, #0
 8015a0a:	4bb3      	ldr	r3, [pc, #716]	; (8015cd8 <_dtoa_r+0x6b0>)
 8015a0c:	f7eb faec 	bl	8000fe8 <__aeabi_dadd>
 8015a10:	4ab2      	ldr	r2, [pc, #712]	; (8015cdc <_dtoa_r+0x6b4>)
 8015a12:	900e      	str	r0, [sp, #56]	; 0x38
 8015a14:	910f      	str	r1, [sp, #60]	; 0x3c
 8015a16:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015a18:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015a1a:	4694      	mov	ip, r2
 8015a1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a1e:	4463      	add	r3, ip
 8015a20:	9315      	str	r3, [sp, #84]	; 0x54
 8015a22:	001d      	movs	r5, r3
 8015a24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d161      	bne.n	8015aee <_dtoa_r+0x4c6>
 8015a2a:	9806      	ldr	r0, [sp, #24]
 8015a2c:	9907      	ldr	r1, [sp, #28]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	4bab      	ldr	r3, [pc, #684]	; (8015ce0 <_dtoa_r+0x6b8>)
 8015a32:	f7ec fc71 	bl	8002318 <__aeabi_dsub>
 8015a36:	0022      	movs	r2, r4
 8015a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a3a:	9006      	str	r0, [sp, #24]
 8015a3c:	9107      	str	r1, [sp, #28]
 8015a3e:	f7ea fd27 	bl	8000490 <__aeabi_dcmpgt>
 8015a42:	2800      	cmp	r0, #0
 8015a44:	d000      	beq.n	8015a48 <_dtoa_r+0x420>
 8015a46:	e2aa      	b.n	8015f9e <_dtoa_r+0x976>
 8015a48:	48a6      	ldr	r0, [pc, #664]	; (8015ce4 <_dtoa_r+0x6bc>)
 8015a4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015a4c:	4684      	mov	ip, r0
 8015a4e:	4461      	add	r1, ip
 8015a50:	000b      	movs	r3, r1
 8015a52:	9806      	ldr	r0, [sp, #24]
 8015a54:	9907      	ldr	r1, [sp, #28]
 8015a56:	0022      	movs	r2, r4
 8015a58:	f7ea fd06 	bl	8000468 <__aeabi_dcmplt>
 8015a5c:	2800      	cmp	r0, #0
 8015a5e:	d000      	beq.n	8015a62 <_dtoa_r+0x43a>
 8015a60:	e297      	b.n	8015f92 <_dtoa_r+0x96a>
 8015a62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015a64:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015a66:	9306      	str	r3, [sp, #24]
 8015a68:	9407      	str	r4, [sp, #28]
 8015a6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	da00      	bge.n	8015a72 <_dtoa_r+0x44a>
 8015a70:	e15e      	b.n	8015d30 <_dtoa_r+0x708>
 8015a72:	2f0e      	cmp	r7, #14
 8015a74:	dd00      	ble.n	8015a78 <_dtoa_r+0x450>
 8015a76:	e15b      	b.n	8015d30 <_dtoa_r+0x708>
 8015a78:	4b94      	ldr	r3, [pc, #592]	; (8015ccc <_dtoa_r+0x6a4>)
 8015a7a:	00fa      	lsls	r2, r7, #3
 8015a7c:	189b      	adds	r3, r3, r2
 8015a7e:	685c      	ldr	r4, [r3, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	9304      	str	r3, [sp, #16]
 8015a84:	9405      	str	r4, [sp, #20]
 8015a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	db00      	blt.n	8015a8e <_dtoa_r+0x466>
 8015a8c:	e0da      	b.n	8015c44 <_dtoa_r+0x61c>
 8015a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	dd00      	ble.n	8015a96 <_dtoa_r+0x46e>
 8015a94:	e0d6      	b.n	8015c44 <_dtoa_r+0x61c>
 8015a96:	d000      	beq.n	8015a9a <_dtoa_r+0x472>
 8015a98:	e27f      	b.n	8015f9a <_dtoa_r+0x972>
 8015a9a:	9804      	ldr	r0, [sp, #16]
 8015a9c:	9905      	ldr	r1, [sp, #20]
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	4b8f      	ldr	r3, [pc, #572]	; (8015ce0 <_dtoa_r+0x6b8>)
 8015aa2:	f7ec f9c7 	bl	8001e34 <__aeabi_dmul>
 8015aa6:	9a06      	ldr	r2, [sp, #24]
 8015aa8:	9b07      	ldr	r3, [sp, #28]
 8015aaa:	f7ea fcfb 	bl	80004a4 <__aeabi_dcmpge>
 8015aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ab0:	9304      	str	r3, [sp, #16]
 8015ab2:	001e      	movs	r6, r3
 8015ab4:	2800      	cmp	r0, #0
 8015ab6:	d000      	beq.n	8015aba <_dtoa_r+0x492>
 8015ab8:	e251      	b.n	8015f5e <_dtoa_r+0x936>
 8015aba:	9b08      	ldr	r3, [sp, #32]
 8015abc:	9a08      	ldr	r2, [sp, #32]
 8015abe:	1c5d      	adds	r5, r3, #1
 8015ac0:	2331      	movs	r3, #49	; 0x31
 8015ac2:	3701      	adds	r7, #1
 8015ac4:	7013      	strb	r3, [r2, #0]
 8015ac6:	e24d      	b.n	8015f64 <_dtoa_r+0x93c>
 8015ac8:	4234      	tst	r4, r6
 8015aca:	d00a      	beq.n	8015ae2 <_dtoa_r+0x4ba>
 8015acc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ace:	4a86      	ldr	r2, [pc, #536]	; (8015ce8 <_dtoa_r+0x6c0>)
 8015ad0:	3301      	adds	r3, #1
 8015ad2:	930e      	str	r3, [sp, #56]	; 0x38
 8015ad4:	00eb      	lsls	r3, r5, #3
 8015ad6:	189b      	adds	r3, r3, r2
 8015ad8:	681a      	ldr	r2, [r3, #0]
 8015ada:	685b      	ldr	r3, [r3, #4]
 8015adc:	f7ec f9aa 	bl	8001e34 <__aeabi_dmul>
 8015ae0:	0033      	movs	r3, r6
 8015ae2:	1064      	asrs	r4, r4, #1
 8015ae4:	3501      	adds	r5, #1
 8015ae6:	e75f      	b.n	80159a8 <_dtoa_r+0x380>
 8015ae8:	003e      	movs	r6, r7
 8015aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015aec:	e784      	b.n	80159f8 <_dtoa_r+0x3d0>
 8015aee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015af0:	1e5a      	subs	r2, r3, #1
 8015af2:	4b76      	ldr	r3, [pc, #472]	; (8015ccc <_dtoa_r+0x6a4>)
 8015af4:	00d2      	lsls	r2, r2, #3
 8015af6:	189b      	adds	r3, r3, r2
 8015af8:	6818      	ldr	r0, [r3, #0]
 8015afa:	6859      	ldr	r1, [r3, #4]
 8015afc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d04b      	beq.n	8015b9a <_dtoa_r+0x572>
 8015b02:	0002      	movs	r2, r0
 8015b04:	000b      	movs	r3, r1
 8015b06:	2000      	movs	r0, #0
 8015b08:	4978      	ldr	r1, [pc, #480]	; (8015cec <_dtoa_r+0x6c4>)
 8015b0a:	f7eb fd89 	bl	8001620 <__aeabi_ddiv>
 8015b0e:	002b      	movs	r3, r5
 8015b10:	0022      	movs	r2, r4
 8015b12:	f7ec fc01 	bl	8002318 <__aeabi_dsub>
 8015b16:	9b08      	ldr	r3, [sp, #32]
 8015b18:	900e      	str	r0, [sp, #56]	; 0x38
 8015b1a:	910f      	str	r1, [sp, #60]	; 0x3c
 8015b1c:	9315      	str	r3, [sp, #84]	; 0x54
 8015b1e:	9806      	ldr	r0, [sp, #24]
 8015b20:	9907      	ldr	r1, [sp, #28]
 8015b22:	f7ec ff5d 	bl	80029e0 <__aeabi_d2iz>
 8015b26:	0004      	movs	r4, r0
 8015b28:	f7ec ff90 	bl	8002a4c <__aeabi_i2d>
 8015b2c:	0002      	movs	r2, r0
 8015b2e:	000b      	movs	r3, r1
 8015b30:	9806      	ldr	r0, [sp, #24]
 8015b32:	9907      	ldr	r1, [sp, #28]
 8015b34:	f7ec fbf0 	bl	8002318 <__aeabi_dsub>
 8015b38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b3a:	3430      	adds	r4, #48	; 0x30
 8015b3c:	1c5d      	adds	r5, r3, #1
 8015b3e:	701c      	strb	r4, [r3, #0]
 8015b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015b42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b44:	9006      	str	r0, [sp, #24]
 8015b46:	9107      	str	r1, [sp, #28]
 8015b48:	f7ea fc8e 	bl	8000468 <__aeabi_dcmplt>
 8015b4c:	2800      	cmp	r0, #0
 8015b4e:	d16c      	bne.n	8015c2a <_dtoa_r+0x602>
 8015b50:	9a06      	ldr	r2, [sp, #24]
 8015b52:	9b07      	ldr	r3, [sp, #28]
 8015b54:	2000      	movs	r0, #0
 8015b56:	495e      	ldr	r1, [pc, #376]	; (8015cd0 <_dtoa_r+0x6a8>)
 8015b58:	f7ec fbde 	bl	8002318 <__aeabi_dsub>
 8015b5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015b5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b60:	f7ea fc82 	bl	8000468 <__aeabi_dcmplt>
 8015b64:	2800      	cmp	r0, #0
 8015b66:	d000      	beq.n	8015b6a <_dtoa_r+0x542>
 8015b68:	e0c3      	b.n	8015cf2 <_dtoa_r+0x6ca>
 8015b6a:	9b08      	ldr	r3, [sp, #32]
 8015b6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015b6e:	1aeb      	subs	r3, r5, r3
 8015b70:	429a      	cmp	r2, r3
 8015b72:	dc00      	bgt.n	8015b76 <_dtoa_r+0x54e>
 8015b74:	e775      	b.n	8015a62 <_dtoa_r+0x43a>
 8015b76:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015b78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	4b55      	ldr	r3, [pc, #340]	; (8015cd4 <_dtoa_r+0x6ac>)
 8015b7e:	f7ec f959 	bl	8001e34 <__aeabi_dmul>
 8015b82:	2200      	movs	r2, #0
 8015b84:	900e      	str	r0, [sp, #56]	; 0x38
 8015b86:	910f      	str	r1, [sp, #60]	; 0x3c
 8015b88:	9806      	ldr	r0, [sp, #24]
 8015b8a:	9907      	ldr	r1, [sp, #28]
 8015b8c:	4b51      	ldr	r3, [pc, #324]	; (8015cd4 <_dtoa_r+0x6ac>)
 8015b8e:	f7ec f951 	bl	8001e34 <__aeabi_dmul>
 8015b92:	9515      	str	r5, [sp, #84]	; 0x54
 8015b94:	9006      	str	r0, [sp, #24]
 8015b96:	9107      	str	r1, [sp, #28]
 8015b98:	e7c1      	b.n	8015b1e <_dtoa_r+0x4f6>
 8015b9a:	0022      	movs	r2, r4
 8015b9c:	002b      	movs	r3, r5
 8015b9e:	f7ec f949 	bl	8001e34 <__aeabi_dmul>
 8015ba2:	9c08      	ldr	r4, [sp, #32]
 8015ba4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015ba6:	0023      	movs	r3, r4
 8015ba8:	4694      	mov	ip, r2
 8015baa:	900e      	str	r0, [sp, #56]	; 0x38
 8015bac:	910f      	str	r1, [sp, #60]	; 0x3c
 8015bae:	4463      	add	r3, ip
 8015bb0:	9315      	str	r3, [sp, #84]	; 0x54
 8015bb2:	9806      	ldr	r0, [sp, #24]
 8015bb4:	9907      	ldr	r1, [sp, #28]
 8015bb6:	f7ec ff13 	bl	80029e0 <__aeabi_d2iz>
 8015bba:	0005      	movs	r5, r0
 8015bbc:	f7ec ff46 	bl	8002a4c <__aeabi_i2d>
 8015bc0:	000b      	movs	r3, r1
 8015bc2:	0002      	movs	r2, r0
 8015bc4:	9806      	ldr	r0, [sp, #24]
 8015bc6:	9907      	ldr	r1, [sp, #28]
 8015bc8:	f7ec fba6 	bl	8002318 <__aeabi_dsub>
 8015bcc:	3530      	adds	r5, #48	; 0x30
 8015bce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015bd0:	7025      	strb	r5, [r4, #0]
 8015bd2:	3401      	adds	r4, #1
 8015bd4:	9006      	str	r0, [sp, #24]
 8015bd6:	9107      	str	r1, [sp, #28]
 8015bd8:	42a3      	cmp	r3, r4
 8015bda:	d12a      	bne.n	8015c32 <_dtoa_r+0x60a>
 8015bdc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015bde:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015be0:	9a08      	ldr	r2, [sp, #32]
 8015be2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015be4:	4694      	mov	ip, r2
 8015be6:	4463      	add	r3, ip
 8015be8:	2200      	movs	r2, #0
 8015bea:	001d      	movs	r5, r3
 8015bec:	4b3f      	ldr	r3, [pc, #252]	; (8015cec <_dtoa_r+0x6c4>)
 8015bee:	f7eb f9fb 	bl	8000fe8 <__aeabi_dadd>
 8015bf2:	0002      	movs	r2, r0
 8015bf4:	000b      	movs	r3, r1
 8015bf6:	9806      	ldr	r0, [sp, #24]
 8015bf8:	9907      	ldr	r1, [sp, #28]
 8015bfa:	f7ea fc49 	bl	8000490 <__aeabi_dcmpgt>
 8015bfe:	2800      	cmp	r0, #0
 8015c00:	d000      	beq.n	8015c04 <_dtoa_r+0x5dc>
 8015c02:	e076      	b.n	8015cf2 <_dtoa_r+0x6ca>
 8015c04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c08:	2000      	movs	r0, #0
 8015c0a:	4938      	ldr	r1, [pc, #224]	; (8015cec <_dtoa_r+0x6c4>)
 8015c0c:	f7ec fb84 	bl	8002318 <__aeabi_dsub>
 8015c10:	0002      	movs	r2, r0
 8015c12:	000b      	movs	r3, r1
 8015c14:	9806      	ldr	r0, [sp, #24]
 8015c16:	9907      	ldr	r1, [sp, #28]
 8015c18:	f7ea fc26 	bl	8000468 <__aeabi_dcmplt>
 8015c1c:	2800      	cmp	r0, #0
 8015c1e:	d100      	bne.n	8015c22 <_dtoa_r+0x5fa>
 8015c20:	e71f      	b.n	8015a62 <_dtoa_r+0x43a>
 8015c22:	1e6b      	subs	r3, r5, #1
 8015c24:	781a      	ldrb	r2, [r3, #0]
 8015c26:	2a30      	cmp	r2, #48	; 0x30
 8015c28:	d001      	beq.n	8015c2e <_dtoa_r+0x606>
 8015c2a:	0037      	movs	r7, r6
 8015c2c:	e03f      	b.n	8015cae <_dtoa_r+0x686>
 8015c2e:	001d      	movs	r5, r3
 8015c30:	e7f7      	b.n	8015c22 <_dtoa_r+0x5fa>
 8015c32:	9806      	ldr	r0, [sp, #24]
 8015c34:	9907      	ldr	r1, [sp, #28]
 8015c36:	2200      	movs	r2, #0
 8015c38:	4b26      	ldr	r3, [pc, #152]	; (8015cd4 <_dtoa_r+0x6ac>)
 8015c3a:	f7ec f8fb 	bl	8001e34 <__aeabi_dmul>
 8015c3e:	9006      	str	r0, [sp, #24]
 8015c40:	9107      	str	r1, [sp, #28]
 8015c42:	e7b6      	b.n	8015bb2 <_dtoa_r+0x58a>
 8015c44:	9e08      	ldr	r6, [sp, #32]
 8015c46:	9a04      	ldr	r2, [sp, #16]
 8015c48:	9b05      	ldr	r3, [sp, #20]
 8015c4a:	9806      	ldr	r0, [sp, #24]
 8015c4c:	9907      	ldr	r1, [sp, #28]
 8015c4e:	f7eb fce7 	bl	8001620 <__aeabi_ddiv>
 8015c52:	f7ec fec5 	bl	80029e0 <__aeabi_d2iz>
 8015c56:	0004      	movs	r4, r0
 8015c58:	f7ec fef8 	bl	8002a4c <__aeabi_i2d>
 8015c5c:	9a04      	ldr	r2, [sp, #16]
 8015c5e:	9b05      	ldr	r3, [sp, #20]
 8015c60:	f7ec f8e8 	bl	8001e34 <__aeabi_dmul>
 8015c64:	0002      	movs	r2, r0
 8015c66:	000b      	movs	r3, r1
 8015c68:	9806      	ldr	r0, [sp, #24]
 8015c6a:	9907      	ldr	r1, [sp, #28]
 8015c6c:	f7ec fb54 	bl	8002318 <__aeabi_dsub>
 8015c70:	0023      	movs	r3, r4
 8015c72:	3330      	adds	r3, #48	; 0x30
 8015c74:	7033      	strb	r3, [r6, #0]
 8015c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c78:	9b08      	ldr	r3, [sp, #32]
 8015c7a:	1c75      	adds	r5, r6, #1
 8015c7c:	1aeb      	subs	r3, r5, r3
 8015c7e:	429a      	cmp	r2, r3
 8015c80:	d148      	bne.n	8015d14 <_dtoa_r+0x6ec>
 8015c82:	0002      	movs	r2, r0
 8015c84:	000b      	movs	r3, r1
 8015c86:	f7eb f9af 	bl	8000fe8 <__aeabi_dadd>
 8015c8a:	9a04      	ldr	r2, [sp, #16]
 8015c8c:	9b05      	ldr	r3, [sp, #20]
 8015c8e:	9006      	str	r0, [sp, #24]
 8015c90:	9107      	str	r1, [sp, #28]
 8015c92:	f7ea fbfd 	bl	8000490 <__aeabi_dcmpgt>
 8015c96:	2800      	cmp	r0, #0
 8015c98:	d12a      	bne.n	8015cf0 <_dtoa_r+0x6c8>
 8015c9a:	9a04      	ldr	r2, [sp, #16]
 8015c9c:	9b05      	ldr	r3, [sp, #20]
 8015c9e:	9806      	ldr	r0, [sp, #24]
 8015ca0:	9907      	ldr	r1, [sp, #28]
 8015ca2:	f7ea fbdb 	bl	800045c <__aeabi_dcmpeq>
 8015ca6:	2800      	cmp	r0, #0
 8015ca8:	d001      	beq.n	8015cae <_dtoa_r+0x686>
 8015caa:	07e3      	lsls	r3, r4, #31
 8015cac:	d420      	bmi.n	8015cf0 <_dtoa_r+0x6c8>
 8015cae:	9903      	ldr	r1, [sp, #12]
 8015cb0:	9802      	ldr	r0, [sp, #8]
 8015cb2:	f000 ff35 	bl	8016b20 <_Bfree>
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	702b      	strb	r3, [r5, #0]
 8015cba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015cbc:	3701      	adds	r7, #1
 8015cbe:	601f      	str	r7, [r3, #0]
 8015cc0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d100      	bne.n	8015cc8 <_dtoa_r+0x6a0>
 8015cc6:	e4e4      	b.n	8015692 <_dtoa_r+0x6a>
 8015cc8:	601d      	str	r5, [r3, #0]
 8015cca:	e4e2      	b.n	8015692 <_dtoa_r+0x6a>
 8015ccc:	0801a588 	.word	0x0801a588
 8015cd0:	3ff00000 	.word	0x3ff00000
 8015cd4:	40240000 	.word	0x40240000
 8015cd8:	401c0000 	.word	0x401c0000
 8015cdc:	fcc00000 	.word	0xfcc00000
 8015ce0:	40140000 	.word	0x40140000
 8015ce4:	7cc00000 	.word	0x7cc00000
 8015ce8:	0801a560 	.word	0x0801a560
 8015cec:	3fe00000 	.word	0x3fe00000
 8015cf0:	003e      	movs	r6, r7
 8015cf2:	1e6b      	subs	r3, r5, #1
 8015cf4:	781a      	ldrb	r2, [r3, #0]
 8015cf6:	2a39      	cmp	r2, #57	; 0x39
 8015cf8:	d106      	bne.n	8015d08 <_dtoa_r+0x6e0>
 8015cfa:	9a08      	ldr	r2, [sp, #32]
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d107      	bne.n	8015d10 <_dtoa_r+0x6e8>
 8015d00:	2330      	movs	r3, #48	; 0x30
 8015d02:	7013      	strb	r3, [r2, #0]
 8015d04:	0013      	movs	r3, r2
 8015d06:	3601      	adds	r6, #1
 8015d08:	781a      	ldrb	r2, [r3, #0]
 8015d0a:	3201      	adds	r2, #1
 8015d0c:	701a      	strb	r2, [r3, #0]
 8015d0e:	e78c      	b.n	8015c2a <_dtoa_r+0x602>
 8015d10:	001d      	movs	r5, r3
 8015d12:	e7ee      	b.n	8015cf2 <_dtoa_r+0x6ca>
 8015d14:	2200      	movs	r2, #0
 8015d16:	4ba4      	ldr	r3, [pc, #656]	; (8015fa8 <_dtoa_r+0x980>)
 8015d18:	f7ec f88c 	bl	8001e34 <__aeabi_dmul>
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	2300      	movs	r3, #0
 8015d20:	9006      	str	r0, [sp, #24]
 8015d22:	9107      	str	r1, [sp, #28]
 8015d24:	002e      	movs	r6, r5
 8015d26:	f7ea fb99 	bl	800045c <__aeabi_dcmpeq>
 8015d2a:	2800      	cmp	r0, #0
 8015d2c:	d08b      	beq.n	8015c46 <_dtoa_r+0x61e>
 8015d2e:	e7be      	b.n	8015cae <_dtoa_r+0x686>
 8015d30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015d32:	2a00      	cmp	r2, #0
 8015d34:	d100      	bne.n	8015d38 <_dtoa_r+0x710>
 8015d36:	e0da      	b.n	8015eee <_dtoa_r+0x8c6>
 8015d38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015d3a:	2a01      	cmp	r2, #1
 8015d3c:	dd00      	ble.n	8015d40 <_dtoa_r+0x718>
 8015d3e:	e0bd      	b.n	8015ebc <_dtoa_r+0x894>
 8015d40:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015d42:	2a00      	cmp	r2, #0
 8015d44:	d100      	bne.n	8015d48 <_dtoa_r+0x720>
 8015d46:	e0b5      	b.n	8015eb4 <_dtoa_r+0x88c>
 8015d48:	4a98      	ldr	r2, [pc, #608]	; (8015fac <_dtoa_r+0x984>)
 8015d4a:	189b      	adds	r3, r3, r2
 8015d4c:	9d04      	ldr	r5, [sp, #16]
 8015d4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d52:	2101      	movs	r1, #1
 8015d54:	18d2      	adds	r2, r2, r3
 8015d56:	920a      	str	r2, [sp, #40]	; 0x28
 8015d58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d5a:	9802      	ldr	r0, [sp, #8]
 8015d5c:	18d3      	adds	r3, r2, r3
 8015d5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d60:	f000 ffad 	bl	8016cbe <__i2b>
 8015d64:	0006      	movs	r6, r0
 8015d66:	2c00      	cmp	r4, #0
 8015d68:	dd0e      	ble.n	8015d88 <_dtoa_r+0x760>
 8015d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	dd0b      	ble.n	8015d88 <_dtoa_r+0x760>
 8015d70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d72:	0023      	movs	r3, r4
 8015d74:	4294      	cmp	r4, r2
 8015d76:	dd00      	ble.n	8015d7a <_dtoa_r+0x752>
 8015d78:	0013      	movs	r3, r2
 8015d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d7c:	1ae4      	subs	r4, r4, r3
 8015d7e:	1ad2      	subs	r2, r2, r3
 8015d80:	920a      	str	r2, [sp, #40]	; 0x28
 8015d82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d84:	1ad3      	subs	r3, r2, r3
 8015d86:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d88:	9b04      	ldr	r3, [sp, #16]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d01f      	beq.n	8015dce <_dtoa_r+0x7a6>
 8015d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d100      	bne.n	8015d96 <_dtoa_r+0x76e>
 8015d94:	e0af      	b.n	8015ef6 <_dtoa_r+0x8ce>
 8015d96:	2d00      	cmp	r5, #0
 8015d98:	d011      	beq.n	8015dbe <_dtoa_r+0x796>
 8015d9a:	0031      	movs	r1, r6
 8015d9c:	002a      	movs	r2, r5
 8015d9e:	9802      	ldr	r0, [sp, #8]
 8015da0:	f001 f826 	bl	8016df0 <__pow5mult>
 8015da4:	9a03      	ldr	r2, [sp, #12]
 8015da6:	0001      	movs	r1, r0
 8015da8:	0006      	movs	r6, r0
 8015daa:	9802      	ldr	r0, [sp, #8]
 8015dac:	f000 ff90 	bl	8016cd0 <__multiply>
 8015db0:	9903      	ldr	r1, [sp, #12]
 8015db2:	9010      	str	r0, [sp, #64]	; 0x40
 8015db4:	9802      	ldr	r0, [sp, #8]
 8015db6:	f000 feb3 	bl	8016b20 <_Bfree>
 8015dba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015dbc:	9303      	str	r3, [sp, #12]
 8015dbe:	9b04      	ldr	r3, [sp, #16]
 8015dc0:	1b5a      	subs	r2, r3, r5
 8015dc2:	d004      	beq.n	8015dce <_dtoa_r+0x7a6>
 8015dc4:	9903      	ldr	r1, [sp, #12]
 8015dc6:	9802      	ldr	r0, [sp, #8]
 8015dc8:	f001 f812 	bl	8016df0 <__pow5mult>
 8015dcc:	9003      	str	r0, [sp, #12]
 8015dce:	2101      	movs	r1, #1
 8015dd0:	9802      	ldr	r0, [sp, #8]
 8015dd2:	f000 ff74 	bl	8016cbe <__i2b>
 8015dd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015dd8:	9004      	str	r0, [sp, #16]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d100      	bne.n	8015de0 <_dtoa_r+0x7b8>
 8015dde:	e1e3      	b.n	80161a8 <_dtoa_r+0xb80>
 8015de0:	001a      	movs	r2, r3
 8015de2:	0001      	movs	r1, r0
 8015de4:	9802      	ldr	r0, [sp, #8]
 8015de6:	f001 f803 	bl	8016df0 <__pow5mult>
 8015dea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015dec:	9004      	str	r0, [sp, #16]
 8015dee:	2b01      	cmp	r3, #1
 8015df0:	dd00      	ble.n	8015df4 <_dtoa_r+0x7cc>
 8015df2:	e082      	b.n	8015efa <_dtoa_r+0x8d2>
 8015df4:	2500      	movs	r5, #0
 8015df6:	9b06      	ldr	r3, [sp, #24]
 8015df8:	42ab      	cmp	r3, r5
 8015dfa:	d10e      	bne.n	8015e1a <_dtoa_r+0x7f2>
 8015dfc:	9b07      	ldr	r3, [sp, #28]
 8015dfe:	031b      	lsls	r3, r3, #12
 8015e00:	42ab      	cmp	r3, r5
 8015e02:	d10a      	bne.n	8015e1a <_dtoa_r+0x7f2>
 8015e04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e06:	9a07      	ldr	r2, [sp, #28]
 8015e08:	4213      	tst	r3, r2
 8015e0a:	d006      	beq.n	8015e1a <_dtoa_r+0x7f2>
 8015e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e0e:	3501      	adds	r5, #1
 8015e10:	3301      	adds	r3, #1
 8015e12:	930a      	str	r3, [sp, #40]	; 0x28
 8015e14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e16:	3301      	adds	r3, #1
 8015e18:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e1c:	2001      	movs	r0, #1
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d16c      	bne.n	8015efc <_dtoa_r+0x8d4>
 8015e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e24:	1818      	adds	r0, r3, r0
 8015e26:	231f      	movs	r3, #31
 8015e28:	4018      	ands	r0, r3
 8015e2a:	d07e      	beq.n	8015f2a <_dtoa_r+0x902>
 8015e2c:	3301      	adds	r3, #1
 8015e2e:	1a1b      	subs	r3, r3, r0
 8015e30:	2b04      	cmp	r3, #4
 8015e32:	dd70      	ble.n	8015f16 <_dtoa_r+0x8ee>
 8015e34:	231c      	movs	r3, #28
 8015e36:	1a18      	subs	r0, r3, r0
 8015e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e3a:	1824      	adds	r4, r4, r0
 8015e3c:	181b      	adds	r3, r3, r0
 8015e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8015e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e42:	181b      	adds	r3, r3, r0
 8015e44:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	dd05      	ble.n	8015e58 <_dtoa_r+0x830>
 8015e4c:	001a      	movs	r2, r3
 8015e4e:	9903      	ldr	r1, [sp, #12]
 8015e50:	9802      	ldr	r0, [sp, #8]
 8015e52:	f001 f80f 	bl	8016e74 <__lshift>
 8015e56:	9003      	str	r0, [sp, #12]
 8015e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	dd05      	ble.n	8015e6a <_dtoa_r+0x842>
 8015e5e:	001a      	movs	r2, r3
 8015e60:	9904      	ldr	r1, [sp, #16]
 8015e62:	9802      	ldr	r0, [sp, #8]
 8015e64:	f001 f806 	bl	8016e74 <__lshift>
 8015e68:	9004      	str	r0, [sp, #16]
 8015e6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d05e      	beq.n	8015f2e <_dtoa_r+0x906>
 8015e70:	9904      	ldr	r1, [sp, #16]
 8015e72:	9803      	ldr	r0, [sp, #12]
 8015e74:	f001 f850 	bl	8016f18 <__mcmp>
 8015e78:	2800      	cmp	r0, #0
 8015e7a:	da58      	bge.n	8015f2e <_dtoa_r+0x906>
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	220a      	movs	r2, #10
 8015e80:	9903      	ldr	r1, [sp, #12]
 8015e82:	9802      	ldr	r0, [sp, #8]
 8015e84:	f000 fe56 	bl	8016b34 <__multadd>
 8015e88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e8a:	3f01      	subs	r7, #1
 8015e8c:	9003      	str	r0, [sp, #12]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d100      	bne.n	8015e94 <_dtoa_r+0x86c>
 8015e92:	e190      	b.n	80161b6 <_dtoa_r+0xb8e>
 8015e94:	2300      	movs	r3, #0
 8015e96:	0031      	movs	r1, r6
 8015e98:	220a      	movs	r2, #10
 8015e9a:	9802      	ldr	r0, [sp, #8]
 8015e9c:	f000 fe4a 	bl	8016b34 <__multadd>
 8015ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ea2:	0006      	movs	r6, r0
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	dd00      	ble.n	8015eaa <_dtoa_r+0x882>
 8015ea8:	e088      	b.n	8015fbc <_dtoa_r+0x994>
 8015eaa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015eac:	2b02      	cmp	r3, #2
 8015eae:	dc00      	bgt.n	8015eb2 <_dtoa_r+0x88a>
 8015eb0:	e084      	b.n	8015fbc <_dtoa_r+0x994>
 8015eb2:	e044      	b.n	8015f3e <_dtoa_r+0x916>
 8015eb4:	2336      	movs	r3, #54	; 0x36
 8015eb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015eb8:	1a9b      	subs	r3, r3, r2
 8015eba:	e747      	b.n	8015d4c <_dtoa_r+0x724>
 8015ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ebe:	1e5d      	subs	r5, r3, #1
 8015ec0:	9b04      	ldr	r3, [sp, #16]
 8015ec2:	42ab      	cmp	r3, r5
 8015ec4:	db08      	blt.n	8015ed8 <_dtoa_r+0x8b0>
 8015ec6:	1b5d      	subs	r5, r3, r5
 8015ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	da0c      	bge.n	8015ee8 <_dtoa_r+0x8c0>
 8015ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ed2:	1a9c      	subs	r4, r3, r2
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	e73b      	b.n	8015d50 <_dtoa_r+0x728>
 8015ed8:	9b04      	ldr	r3, [sp, #16]
 8015eda:	9504      	str	r5, [sp, #16]
 8015edc:	1aea      	subs	r2, r5, r3
 8015ede:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ee0:	2500      	movs	r5, #0
 8015ee2:	189b      	adds	r3, r3, r2
 8015ee4:	9311      	str	r3, [sp, #68]	; 0x44
 8015ee6:	e7ef      	b.n	8015ec8 <_dtoa_r+0x8a0>
 8015ee8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eec:	e730      	b.n	8015d50 <_dtoa_r+0x728>
 8015eee:	9d04      	ldr	r5, [sp, #16]
 8015ef0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015ef2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8015ef4:	e737      	b.n	8015d66 <_dtoa_r+0x73e>
 8015ef6:	9a04      	ldr	r2, [sp, #16]
 8015ef8:	e764      	b.n	8015dc4 <_dtoa_r+0x79c>
 8015efa:	2500      	movs	r5, #0
 8015efc:	9b04      	ldr	r3, [sp, #16]
 8015efe:	9a04      	ldr	r2, [sp, #16]
 8015f00:	691b      	ldr	r3, [r3, #16]
 8015f02:	9310      	str	r3, [sp, #64]	; 0x40
 8015f04:	3303      	adds	r3, #3
 8015f06:	009b      	lsls	r3, r3, #2
 8015f08:	18d3      	adds	r3, r2, r3
 8015f0a:	6858      	ldr	r0, [r3, #4]
 8015f0c:	f000 fe8e 	bl	8016c2c <__hi0bits>
 8015f10:	2320      	movs	r3, #32
 8015f12:	1a18      	subs	r0, r3, r0
 8015f14:	e785      	b.n	8015e22 <_dtoa_r+0x7fa>
 8015f16:	2b04      	cmp	r3, #4
 8015f18:	d095      	beq.n	8015e46 <_dtoa_r+0x81e>
 8015f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015f1c:	331c      	adds	r3, #28
 8015f1e:	18d2      	adds	r2, r2, r3
 8015f20:	920a      	str	r2, [sp, #40]	; 0x28
 8015f22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015f24:	18e4      	adds	r4, r4, r3
 8015f26:	18d3      	adds	r3, r2, r3
 8015f28:	e78c      	b.n	8015e44 <_dtoa_r+0x81c>
 8015f2a:	0003      	movs	r3, r0
 8015f2c:	e7f5      	b.n	8015f1a <_dtoa_r+0x8f2>
 8015f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	dc3d      	bgt.n	8015fb0 <_dtoa_r+0x988>
 8015f34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015f36:	2b02      	cmp	r3, #2
 8015f38:	dd3a      	ble.n	8015fb0 <_dtoa_r+0x988>
 8015f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f3c:	930c      	str	r3, [sp, #48]	; 0x30
 8015f3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d10c      	bne.n	8015f5e <_dtoa_r+0x936>
 8015f44:	9904      	ldr	r1, [sp, #16]
 8015f46:	2205      	movs	r2, #5
 8015f48:	9802      	ldr	r0, [sp, #8]
 8015f4a:	f000 fdf3 	bl	8016b34 <__multadd>
 8015f4e:	9004      	str	r0, [sp, #16]
 8015f50:	0001      	movs	r1, r0
 8015f52:	9803      	ldr	r0, [sp, #12]
 8015f54:	f000 ffe0 	bl	8016f18 <__mcmp>
 8015f58:	2800      	cmp	r0, #0
 8015f5a:	dd00      	ble.n	8015f5e <_dtoa_r+0x936>
 8015f5c:	e5ad      	b.n	8015aba <_dtoa_r+0x492>
 8015f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015f60:	9d08      	ldr	r5, [sp, #32]
 8015f62:	43df      	mvns	r7, r3
 8015f64:	2300      	movs	r3, #0
 8015f66:	9309      	str	r3, [sp, #36]	; 0x24
 8015f68:	9904      	ldr	r1, [sp, #16]
 8015f6a:	9802      	ldr	r0, [sp, #8]
 8015f6c:	f000 fdd8 	bl	8016b20 <_Bfree>
 8015f70:	2e00      	cmp	r6, #0
 8015f72:	d100      	bne.n	8015f76 <_dtoa_r+0x94e>
 8015f74:	e69b      	b.n	8015cae <_dtoa_r+0x686>
 8015f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d005      	beq.n	8015f88 <_dtoa_r+0x960>
 8015f7c:	42b3      	cmp	r3, r6
 8015f7e:	d003      	beq.n	8015f88 <_dtoa_r+0x960>
 8015f80:	0019      	movs	r1, r3
 8015f82:	9802      	ldr	r0, [sp, #8]
 8015f84:	f000 fdcc 	bl	8016b20 <_Bfree>
 8015f88:	0031      	movs	r1, r6
 8015f8a:	9802      	ldr	r0, [sp, #8]
 8015f8c:	f000 fdc8 	bl	8016b20 <_Bfree>
 8015f90:	e68d      	b.n	8015cae <_dtoa_r+0x686>
 8015f92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f94:	9304      	str	r3, [sp, #16]
 8015f96:	001e      	movs	r6, r3
 8015f98:	e7e1      	b.n	8015f5e <_dtoa_r+0x936>
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	e7fa      	b.n	8015f94 <_dtoa_r+0x96c>
 8015f9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015fa0:	0037      	movs	r7, r6
 8015fa2:	9304      	str	r3, [sp, #16]
 8015fa4:	001e      	movs	r6, r3
 8015fa6:	e588      	b.n	8015aba <_dtoa_r+0x492>
 8015fa8:	40240000 	.word	0x40240000
 8015fac:	00000433 	.word	0x00000433
 8015fb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d100      	bne.n	8015fb8 <_dtoa_r+0x990>
 8015fb6:	e0b2      	b.n	801611e <_dtoa_r+0xaf6>
 8015fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fba:	930c      	str	r3, [sp, #48]	; 0x30
 8015fbc:	2c00      	cmp	r4, #0
 8015fbe:	dd05      	ble.n	8015fcc <_dtoa_r+0x9a4>
 8015fc0:	0031      	movs	r1, r6
 8015fc2:	0022      	movs	r2, r4
 8015fc4:	9802      	ldr	r0, [sp, #8]
 8015fc6:	f000 ff55 	bl	8016e74 <__lshift>
 8015fca:	0006      	movs	r6, r0
 8015fcc:	0030      	movs	r0, r6
 8015fce:	2d00      	cmp	r5, #0
 8015fd0:	d011      	beq.n	8015ff6 <_dtoa_r+0x9ce>
 8015fd2:	6871      	ldr	r1, [r6, #4]
 8015fd4:	9802      	ldr	r0, [sp, #8]
 8015fd6:	f000 fd7b 	bl	8016ad0 <_Balloc>
 8015fda:	0031      	movs	r1, r6
 8015fdc:	0004      	movs	r4, r0
 8015fde:	6933      	ldr	r3, [r6, #16]
 8015fe0:	310c      	adds	r1, #12
 8015fe2:	1c9a      	adds	r2, r3, #2
 8015fe4:	0092      	lsls	r2, r2, #2
 8015fe6:	300c      	adds	r0, #12
 8015fe8:	f7fc fe8b 	bl	8012d02 <memcpy>
 8015fec:	2201      	movs	r2, #1
 8015fee:	0021      	movs	r1, r4
 8015ff0:	9802      	ldr	r0, [sp, #8]
 8015ff2:	f000 ff3f 	bl	8016e74 <__lshift>
 8015ff6:	9609      	str	r6, [sp, #36]	; 0x24
 8015ff8:	0006      	movs	r6, r0
 8015ffa:	9b08      	ldr	r3, [sp, #32]
 8015ffc:	930a      	str	r3, [sp, #40]	; 0x28
 8015ffe:	9904      	ldr	r1, [sp, #16]
 8016000:	9803      	ldr	r0, [sp, #12]
 8016002:	f7ff fa8b 	bl	801551c <quorem>
 8016006:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016008:	900d      	str	r0, [sp, #52]	; 0x34
 801600a:	0004      	movs	r4, r0
 801600c:	9803      	ldr	r0, [sp, #12]
 801600e:	f000 ff83 	bl	8016f18 <__mcmp>
 8016012:	0032      	movs	r2, r6
 8016014:	9010      	str	r0, [sp, #64]	; 0x40
 8016016:	9904      	ldr	r1, [sp, #16]
 8016018:	9802      	ldr	r0, [sp, #8]
 801601a:	f000 ff97 	bl	8016f4c <__mdiff>
 801601e:	2301      	movs	r3, #1
 8016020:	930b      	str	r3, [sp, #44]	; 0x2c
 8016022:	68c3      	ldr	r3, [r0, #12]
 8016024:	3430      	adds	r4, #48	; 0x30
 8016026:	0005      	movs	r5, r0
 8016028:	2b00      	cmp	r3, #0
 801602a:	d104      	bne.n	8016036 <_dtoa_r+0xa0e>
 801602c:	0001      	movs	r1, r0
 801602e:	9803      	ldr	r0, [sp, #12]
 8016030:	f000 ff72 	bl	8016f18 <__mcmp>
 8016034:	900b      	str	r0, [sp, #44]	; 0x2c
 8016036:	0029      	movs	r1, r5
 8016038:	9802      	ldr	r0, [sp, #8]
 801603a:	f000 fd71 	bl	8016b20 <_Bfree>
 801603e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016040:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016042:	4313      	orrs	r3, r2
 8016044:	d10e      	bne.n	8016064 <_dtoa_r+0xa3c>
 8016046:	9a06      	ldr	r2, [sp, #24]
 8016048:	3301      	adds	r3, #1
 801604a:	4213      	tst	r3, r2
 801604c:	d10a      	bne.n	8016064 <_dtoa_r+0xa3c>
 801604e:	2c39      	cmp	r4, #57	; 0x39
 8016050:	d026      	beq.n	80160a0 <_dtoa_r+0xa78>
 8016052:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016054:	2b00      	cmp	r3, #0
 8016056:	dd01      	ble.n	801605c <_dtoa_r+0xa34>
 8016058:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801605a:	3431      	adds	r4, #49	; 0x31
 801605c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801605e:	1c5d      	adds	r5, r3, #1
 8016060:	701c      	strb	r4, [r3, #0]
 8016062:	e781      	b.n	8015f68 <_dtoa_r+0x940>
 8016064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016066:	2b00      	cmp	r3, #0
 8016068:	db07      	blt.n	801607a <_dtoa_r+0xa52>
 801606a:	001d      	movs	r5, r3
 801606c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801606e:	431d      	orrs	r5, r3
 8016070:	d122      	bne.n	80160b8 <_dtoa_r+0xa90>
 8016072:	2301      	movs	r3, #1
 8016074:	9a06      	ldr	r2, [sp, #24]
 8016076:	4213      	tst	r3, r2
 8016078:	d11e      	bne.n	80160b8 <_dtoa_r+0xa90>
 801607a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801607c:	2b00      	cmp	r3, #0
 801607e:	dded      	ble.n	801605c <_dtoa_r+0xa34>
 8016080:	9903      	ldr	r1, [sp, #12]
 8016082:	2201      	movs	r2, #1
 8016084:	9802      	ldr	r0, [sp, #8]
 8016086:	f000 fef5 	bl	8016e74 <__lshift>
 801608a:	9904      	ldr	r1, [sp, #16]
 801608c:	9003      	str	r0, [sp, #12]
 801608e:	f000 ff43 	bl	8016f18 <__mcmp>
 8016092:	2800      	cmp	r0, #0
 8016094:	dc02      	bgt.n	801609c <_dtoa_r+0xa74>
 8016096:	d1e1      	bne.n	801605c <_dtoa_r+0xa34>
 8016098:	07e3      	lsls	r3, r4, #31
 801609a:	d5df      	bpl.n	801605c <_dtoa_r+0xa34>
 801609c:	2c39      	cmp	r4, #57	; 0x39
 801609e:	d1db      	bne.n	8016058 <_dtoa_r+0xa30>
 80160a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160a4:	1c5d      	adds	r5, r3, #1
 80160a6:	2339      	movs	r3, #57	; 0x39
 80160a8:	7013      	strb	r3, [r2, #0]
 80160aa:	1e6b      	subs	r3, r5, #1
 80160ac:	781a      	ldrb	r2, [r3, #0]
 80160ae:	2a39      	cmp	r2, #57	; 0x39
 80160b0:	d067      	beq.n	8016182 <_dtoa_r+0xb5a>
 80160b2:	3201      	adds	r2, #1
 80160b4:	701a      	strb	r2, [r3, #0]
 80160b6:	e757      	b.n	8015f68 <_dtoa_r+0x940>
 80160b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160ba:	1c5d      	adds	r5, r3, #1
 80160bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160be:	2b00      	cmp	r3, #0
 80160c0:	dd04      	ble.n	80160cc <_dtoa_r+0xaa4>
 80160c2:	2c39      	cmp	r4, #57	; 0x39
 80160c4:	d0ec      	beq.n	80160a0 <_dtoa_r+0xa78>
 80160c6:	3401      	adds	r4, #1
 80160c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160ca:	e7c9      	b.n	8016060 <_dtoa_r+0xa38>
 80160cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80160d0:	701c      	strb	r4, [r3, #0]
 80160d2:	9b08      	ldr	r3, [sp, #32]
 80160d4:	1aeb      	subs	r3, r5, r3
 80160d6:	4293      	cmp	r3, r2
 80160d8:	d03e      	beq.n	8016158 <_dtoa_r+0xb30>
 80160da:	2300      	movs	r3, #0
 80160dc:	220a      	movs	r2, #10
 80160de:	9903      	ldr	r1, [sp, #12]
 80160e0:	9802      	ldr	r0, [sp, #8]
 80160e2:	f000 fd27 	bl	8016b34 <__multadd>
 80160e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160e8:	9003      	str	r0, [sp, #12]
 80160ea:	42b3      	cmp	r3, r6
 80160ec:	d109      	bne.n	8016102 <_dtoa_r+0xada>
 80160ee:	2300      	movs	r3, #0
 80160f0:	220a      	movs	r2, #10
 80160f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80160f4:	9802      	ldr	r0, [sp, #8]
 80160f6:	f000 fd1d 	bl	8016b34 <__multadd>
 80160fa:	9009      	str	r0, [sp, #36]	; 0x24
 80160fc:	0006      	movs	r6, r0
 80160fe:	950a      	str	r5, [sp, #40]	; 0x28
 8016100:	e77d      	b.n	8015ffe <_dtoa_r+0x9d6>
 8016102:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016104:	2300      	movs	r3, #0
 8016106:	220a      	movs	r2, #10
 8016108:	9802      	ldr	r0, [sp, #8]
 801610a:	f000 fd13 	bl	8016b34 <__multadd>
 801610e:	2300      	movs	r3, #0
 8016110:	9009      	str	r0, [sp, #36]	; 0x24
 8016112:	220a      	movs	r2, #10
 8016114:	0031      	movs	r1, r6
 8016116:	9802      	ldr	r0, [sp, #8]
 8016118:	f000 fd0c 	bl	8016b34 <__multadd>
 801611c:	e7ee      	b.n	80160fc <_dtoa_r+0xad4>
 801611e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016120:	930c      	str	r3, [sp, #48]	; 0x30
 8016122:	9b08      	ldr	r3, [sp, #32]
 8016124:	9306      	str	r3, [sp, #24]
 8016126:	9904      	ldr	r1, [sp, #16]
 8016128:	9803      	ldr	r0, [sp, #12]
 801612a:	f7ff f9f7 	bl	801551c <quorem>
 801612e:	9b06      	ldr	r3, [sp, #24]
 8016130:	3030      	adds	r0, #48	; 0x30
 8016132:	1c5d      	adds	r5, r3, #1
 8016134:	7018      	strb	r0, [r3, #0]
 8016136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016138:	9b08      	ldr	r3, [sp, #32]
 801613a:	0004      	movs	r4, r0
 801613c:	1aeb      	subs	r3, r5, r3
 801613e:	429a      	cmp	r2, r3
 8016140:	dd08      	ble.n	8016154 <_dtoa_r+0xb2c>
 8016142:	2300      	movs	r3, #0
 8016144:	220a      	movs	r2, #10
 8016146:	9903      	ldr	r1, [sp, #12]
 8016148:	9802      	ldr	r0, [sp, #8]
 801614a:	f000 fcf3 	bl	8016b34 <__multadd>
 801614e:	9506      	str	r5, [sp, #24]
 8016150:	9003      	str	r0, [sp, #12]
 8016152:	e7e8      	b.n	8016126 <_dtoa_r+0xafe>
 8016154:	2300      	movs	r3, #0
 8016156:	9309      	str	r3, [sp, #36]	; 0x24
 8016158:	9903      	ldr	r1, [sp, #12]
 801615a:	2201      	movs	r2, #1
 801615c:	9802      	ldr	r0, [sp, #8]
 801615e:	f000 fe89 	bl	8016e74 <__lshift>
 8016162:	9904      	ldr	r1, [sp, #16]
 8016164:	9003      	str	r0, [sp, #12]
 8016166:	f000 fed7 	bl	8016f18 <__mcmp>
 801616a:	2800      	cmp	r0, #0
 801616c:	dc9d      	bgt.n	80160aa <_dtoa_r+0xa82>
 801616e:	d101      	bne.n	8016174 <_dtoa_r+0xb4c>
 8016170:	07e3      	lsls	r3, r4, #31
 8016172:	d49a      	bmi.n	80160aa <_dtoa_r+0xa82>
 8016174:	1e6b      	subs	r3, r5, #1
 8016176:	781a      	ldrb	r2, [r3, #0]
 8016178:	2a30      	cmp	r2, #48	; 0x30
 801617a:	d000      	beq.n	801617e <_dtoa_r+0xb56>
 801617c:	e6f4      	b.n	8015f68 <_dtoa_r+0x940>
 801617e:	001d      	movs	r5, r3
 8016180:	e7f8      	b.n	8016174 <_dtoa_r+0xb4c>
 8016182:	9a08      	ldr	r2, [sp, #32]
 8016184:	429a      	cmp	r2, r3
 8016186:	d103      	bne.n	8016190 <_dtoa_r+0xb68>
 8016188:	2331      	movs	r3, #49	; 0x31
 801618a:	3701      	adds	r7, #1
 801618c:	7013      	strb	r3, [r2, #0]
 801618e:	e6eb      	b.n	8015f68 <_dtoa_r+0x940>
 8016190:	001d      	movs	r5, r3
 8016192:	e78a      	b.n	80160aa <_dtoa_r+0xa82>
 8016194:	4b0b      	ldr	r3, [pc, #44]	; (80161c4 <_dtoa_r+0xb9c>)
 8016196:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016198:	9308      	str	r3, [sp, #32]
 801619a:	4b0b      	ldr	r3, [pc, #44]	; (80161c8 <_dtoa_r+0xba0>)
 801619c:	2a00      	cmp	r2, #0
 801619e:	d001      	beq.n	80161a4 <_dtoa_r+0xb7c>
 80161a0:	f7ff fa75 	bl	801568e <_dtoa_r+0x66>
 80161a4:	f7ff fa75 	bl	8015692 <_dtoa_r+0x6a>
 80161a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80161aa:	2b01      	cmp	r3, #1
 80161ac:	dc00      	bgt.n	80161b0 <_dtoa_r+0xb88>
 80161ae:	e621      	b.n	8015df4 <_dtoa_r+0x7cc>
 80161b0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80161b2:	2001      	movs	r0, #1
 80161b4:	e635      	b.n	8015e22 <_dtoa_r+0x7fa>
 80161b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	dcb2      	bgt.n	8016122 <_dtoa_r+0xafa>
 80161bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80161be:	2b02      	cmp	r3, #2
 80161c0:	ddaf      	ble.n	8016122 <_dtoa_r+0xafa>
 80161c2:	e6bc      	b.n	8015f3e <_dtoa_r+0x916>
 80161c4:	0801a54d 	.word	0x0801a54d
 80161c8:	0801a555 	.word	0x0801a555

080161cc <__errno>:
 80161cc:	4b01      	ldr	r3, [pc, #4]	; (80161d4 <__errno+0x8>)
 80161ce:	6818      	ldr	r0, [r3, #0]
 80161d0:	4770      	bx	lr
 80161d2:	46c0      	nop			; (mov r8, r8)
 80161d4:	200000c8 	.word	0x200000c8

080161d8 <__libc_fini_array>:
 80161d8:	b570      	push	{r4, r5, r6, lr}
 80161da:	4d07      	ldr	r5, [pc, #28]	; (80161f8 <__libc_fini_array+0x20>)
 80161dc:	4c07      	ldr	r4, [pc, #28]	; (80161fc <__libc_fini_array+0x24>)
 80161de:	1b64      	subs	r4, r4, r5
 80161e0:	10a4      	asrs	r4, r4, #2
 80161e2:	2c00      	cmp	r4, #0
 80161e4:	d102      	bne.n	80161ec <__libc_fini_array+0x14>
 80161e6:	f001 f95b 	bl	80174a0 <_fini>
 80161ea:	bd70      	pop	{r4, r5, r6, pc}
 80161ec:	3c01      	subs	r4, #1
 80161ee:	00a3      	lsls	r3, r4, #2
 80161f0:	58eb      	ldr	r3, [r5, r3]
 80161f2:	4798      	blx	r3
 80161f4:	e7f5      	b.n	80161e2 <__libc_fini_array+0xa>
 80161f6:	46c0      	nop			; (mov r8, r8)
 80161f8:	0801a66c 	.word	0x0801a66c
 80161fc:	0801a670 	.word	0x0801a670

08016200 <_malloc_trim_r>:
 8016200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016202:	0005      	movs	r5, r0
 8016204:	2008      	movs	r0, #8
 8016206:	000c      	movs	r4, r1
 8016208:	f7ff f95c 	bl	80154c4 <sysconf>
 801620c:	0007      	movs	r7, r0
 801620e:	0028      	movs	r0, r5
 8016210:	f7fc fd88 	bl	8012d24 <__malloc_lock>
 8016214:	2203      	movs	r2, #3
 8016216:	4e21      	ldr	r6, [pc, #132]	; (801629c <_malloc_trim_r+0x9c>)
 8016218:	0039      	movs	r1, r7
 801621a:	68b3      	ldr	r3, [r6, #8]
 801621c:	685b      	ldr	r3, [r3, #4]
 801621e:	4393      	bics	r3, r2
 8016220:	1b18      	subs	r0, r3, r4
 8016222:	3811      	subs	r0, #17
 8016224:	19c0      	adds	r0, r0, r7
 8016226:	9301      	str	r3, [sp, #4]
 8016228:	f7e9 ff92 	bl	8000150 <__udivsi3>
 801622c:	1e44      	subs	r4, r0, #1
 801622e:	437c      	muls	r4, r7
 8016230:	42a7      	cmp	r7, r4
 8016232:	dd04      	ble.n	801623e <_malloc_trim_r+0x3e>
 8016234:	0028      	movs	r0, r5
 8016236:	f7fc fd7d 	bl	8012d34 <__malloc_unlock>
 801623a:	2000      	movs	r0, #0
 801623c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801623e:	2100      	movs	r1, #0
 8016240:	0028      	movs	r0, r5
 8016242:	f7fc ff4f 	bl	80130e4 <_sbrk_r>
 8016246:	68b3      	ldr	r3, [r6, #8]
 8016248:	9a01      	ldr	r2, [sp, #4]
 801624a:	189b      	adds	r3, r3, r2
 801624c:	4298      	cmp	r0, r3
 801624e:	d1f1      	bne.n	8016234 <_malloc_trim_r+0x34>
 8016250:	4261      	negs	r1, r4
 8016252:	0028      	movs	r0, r5
 8016254:	f7fc ff46 	bl	80130e4 <_sbrk_r>
 8016258:	1c43      	adds	r3, r0, #1
 801625a:	d110      	bne.n	801627e <_malloc_trim_r+0x7e>
 801625c:	2100      	movs	r1, #0
 801625e:	0028      	movs	r0, r5
 8016260:	f7fc ff40 	bl	80130e4 <_sbrk_r>
 8016264:	68b2      	ldr	r2, [r6, #8]
 8016266:	1a81      	subs	r1, r0, r2
 8016268:	290f      	cmp	r1, #15
 801626a:	dde3      	ble.n	8016234 <_malloc_trim_r+0x34>
 801626c:	4b0c      	ldr	r3, [pc, #48]	; (80162a0 <_malloc_trim_r+0xa0>)
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	1ac0      	subs	r0, r0, r3
 8016272:	4b0c      	ldr	r3, [pc, #48]	; (80162a4 <_malloc_trim_r+0xa4>)
 8016274:	6018      	str	r0, [r3, #0]
 8016276:	2301      	movs	r3, #1
 8016278:	430b      	orrs	r3, r1
 801627a:	6053      	str	r3, [r2, #4]
 801627c:	e7da      	b.n	8016234 <_malloc_trim_r+0x34>
 801627e:	68b2      	ldr	r2, [r6, #8]
 8016280:	2601      	movs	r6, #1
 8016282:	9b01      	ldr	r3, [sp, #4]
 8016284:	0028      	movs	r0, r5
 8016286:	1b1b      	subs	r3, r3, r4
 8016288:	4333      	orrs	r3, r6
 801628a:	6053      	str	r3, [r2, #4]
 801628c:	4b05      	ldr	r3, [pc, #20]	; (80162a4 <_malloc_trim_r+0xa4>)
 801628e:	681a      	ldr	r2, [r3, #0]
 8016290:	1b14      	subs	r4, r2, r4
 8016292:	601c      	str	r4, [r3, #0]
 8016294:	f7fc fd4e 	bl	8012d34 <__malloc_unlock>
 8016298:	0030      	movs	r0, r6
 801629a:	e7cf      	b.n	801623c <_malloc_trim_r+0x3c>
 801629c:	20000664 	.word	0x20000664
 80162a0:	20000a6c 	.word	0x20000a6c
 80162a4:	20006dec 	.word	0x20006dec

080162a8 <_free_r>:
 80162a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80162aa:	1e0d      	subs	r5, r1, #0
 80162ac:	9001      	str	r0, [sp, #4]
 80162ae:	d02d      	beq.n	801630c <_free_r+0x64>
 80162b0:	f7fc fd38 	bl	8012d24 <__malloc_lock>
 80162b4:	2301      	movs	r3, #1
 80162b6:	0029      	movs	r1, r5
 80162b8:	469c      	mov	ip, r3
 80162ba:	3908      	subs	r1, #8
 80162bc:	684f      	ldr	r7, [r1, #4]
 80162be:	4662      	mov	r2, ip
 80162c0:	003b      	movs	r3, r7
 80162c2:	4666      	mov	r6, ip
 80162c4:	4393      	bics	r3, r2
 80162c6:	18c8      	adds	r0, r1, r3
 80162c8:	6845      	ldr	r5, [r0, #4]
 80162ca:	3202      	adds	r2, #2
 80162cc:	4395      	bics	r5, r2
 80162ce:	4a4a      	ldr	r2, [pc, #296]	; (80163f8 <_free_r+0x150>)
 80162d0:	4037      	ands	r7, r6
 80162d2:	6896      	ldr	r6, [r2, #8]
 80162d4:	4286      	cmp	r6, r0
 80162d6:	d11a      	bne.n	801630e <_free_r+0x66>
 80162d8:	195b      	adds	r3, r3, r5
 80162da:	2f00      	cmp	r7, #0
 80162dc:	d106      	bne.n	80162ec <_free_r+0x44>
 80162de:	6808      	ldr	r0, [r1, #0]
 80162e0:	1a09      	subs	r1, r1, r0
 80162e2:	688d      	ldr	r5, [r1, #8]
 80162e4:	181b      	adds	r3, r3, r0
 80162e6:	68c8      	ldr	r0, [r1, #12]
 80162e8:	60e8      	str	r0, [r5, #12]
 80162ea:	6085      	str	r5, [r0, #8]
 80162ec:	2001      	movs	r0, #1
 80162ee:	4318      	orrs	r0, r3
 80162f0:	6048      	str	r0, [r1, #4]
 80162f2:	6091      	str	r1, [r2, #8]
 80162f4:	4a41      	ldr	r2, [pc, #260]	; (80163fc <_free_r+0x154>)
 80162f6:	6812      	ldr	r2, [r2, #0]
 80162f8:	429a      	cmp	r2, r3
 80162fa:	d804      	bhi.n	8016306 <_free_r+0x5e>
 80162fc:	4b40      	ldr	r3, [pc, #256]	; (8016400 <_free_r+0x158>)
 80162fe:	9801      	ldr	r0, [sp, #4]
 8016300:	6819      	ldr	r1, [r3, #0]
 8016302:	f7ff ff7d 	bl	8016200 <_malloc_trim_r>
 8016306:	9801      	ldr	r0, [sp, #4]
 8016308:	f7fc fd14 	bl	8012d34 <__malloc_unlock>
 801630c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801630e:	2600      	movs	r6, #0
 8016310:	6045      	str	r5, [r0, #4]
 8016312:	42b7      	cmp	r7, r6
 8016314:	d109      	bne.n	801632a <_free_r+0x82>
 8016316:	680f      	ldr	r7, [r1, #0]
 8016318:	4c3a      	ldr	r4, [pc, #232]	; (8016404 <_free_r+0x15c>)
 801631a:	1bc9      	subs	r1, r1, r7
 801631c:	19db      	adds	r3, r3, r7
 801631e:	688f      	ldr	r7, [r1, #8]
 8016320:	42a7      	cmp	r7, r4
 8016322:	d02b      	beq.n	801637c <_free_r+0xd4>
 8016324:	68cc      	ldr	r4, [r1, #12]
 8016326:	60fc      	str	r4, [r7, #12]
 8016328:	60a7      	str	r7, [r4, #8]
 801632a:	1947      	adds	r7, r0, r5
 801632c:	687c      	ldr	r4, [r7, #4]
 801632e:	2701      	movs	r7, #1
 8016330:	423c      	tst	r4, r7
 8016332:	d10b      	bne.n	801634c <_free_r+0xa4>
 8016334:	195b      	adds	r3, r3, r5
 8016336:	6885      	ldr	r5, [r0, #8]
 8016338:	2e00      	cmp	r6, #0
 801633a:	d121      	bne.n	8016380 <_free_r+0xd8>
 801633c:	4c31      	ldr	r4, [pc, #196]	; (8016404 <_free_r+0x15c>)
 801633e:	42a5      	cmp	r5, r4
 8016340:	d11e      	bne.n	8016380 <_free_r+0xd8>
 8016342:	003e      	movs	r6, r7
 8016344:	6151      	str	r1, [r2, #20]
 8016346:	6111      	str	r1, [r2, #16]
 8016348:	60cd      	str	r5, [r1, #12]
 801634a:	608d      	str	r5, [r1, #8]
 801634c:	2001      	movs	r0, #1
 801634e:	0005      	movs	r5, r0
 8016350:	431d      	orrs	r5, r3
 8016352:	604d      	str	r5, [r1, #4]
 8016354:	50cb      	str	r3, [r1, r3]
 8016356:	2e00      	cmp	r6, #0
 8016358:	d1d5      	bne.n	8016306 <_free_r+0x5e>
 801635a:	4d2b      	ldr	r5, [pc, #172]	; (8016408 <_free_r+0x160>)
 801635c:	42ab      	cmp	r3, r5
 801635e:	d813      	bhi.n	8016388 <_free_r+0xe0>
 8016360:	08db      	lsrs	r3, r3, #3
 8016362:	109d      	asrs	r5, r3, #2
 8016364:	40a8      	lsls	r0, r5
 8016366:	6854      	ldr	r4, [r2, #4]
 8016368:	00db      	lsls	r3, r3, #3
 801636a:	4320      	orrs	r0, r4
 801636c:	6050      	str	r0, [r2, #4]
 801636e:	189a      	adds	r2, r3, r2
 8016370:	6893      	ldr	r3, [r2, #8]
 8016372:	60ca      	str	r2, [r1, #12]
 8016374:	608b      	str	r3, [r1, #8]
 8016376:	6091      	str	r1, [r2, #8]
 8016378:	60d9      	str	r1, [r3, #12]
 801637a:	e7c4      	b.n	8016306 <_free_r+0x5e>
 801637c:	4666      	mov	r6, ip
 801637e:	e7d4      	b.n	801632a <_free_r+0x82>
 8016380:	68c0      	ldr	r0, [r0, #12]
 8016382:	60e8      	str	r0, [r5, #12]
 8016384:	6085      	str	r5, [r0, #8]
 8016386:	e7e1      	b.n	801634c <_free_r+0xa4>
 8016388:	0a5d      	lsrs	r5, r3, #9
 801638a:	2d04      	cmp	r5, #4
 801638c:	d812      	bhi.n	80163b4 <_free_r+0x10c>
 801638e:	0998      	lsrs	r0, r3, #6
 8016390:	3038      	adds	r0, #56	; 0x38
 8016392:	00c6      	lsls	r6, r0, #3
 8016394:	18b6      	adds	r6, r6, r2
 8016396:	68b5      	ldr	r5, [r6, #8]
 8016398:	2703      	movs	r7, #3
 801639a:	42ae      	cmp	r6, r5
 801639c:	d125      	bne.n	80163ea <_free_r+0x142>
 801639e:	2301      	movs	r3, #1
 80163a0:	1080      	asrs	r0, r0, #2
 80163a2:	4083      	lsls	r3, r0
 80163a4:	6850      	ldr	r0, [r2, #4]
 80163a6:	4303      	orrs	r3, r0
 80163a8:	6053      	str	r3, [r2, #4]
 80163aa:	60ce      	str	r6, [r1, #12]
 80163ac:	608d      	str	r5, [r1, #8]
 80163ae:	60b1      	str	r1, [r6, #8]
 80163b0:	60e9      	str	r1, [r5, #12]
 80163b2:	e7a8      	b.n	8016306 <_free_r+0x5e>
 80163b4:	2d14      	cmp	r5, #20
 80163b6:	d802      	bhi.n	80163be <_free_r+0x116>
 80163b8:	0028      	movs	r0, r5
 80163ba:	305b      	adds	r0, #91	; 0x5b
 80163bc:	e7e9      	b.n	8016392 <_free_r+0xea>
 80163be:	2d54      	cmp	r5, #84	; 0x54
 80163c0:	d802      	bhi.n	80163c8 <_free_r+0x120>
 80163c2:	0b18      	lsrs	r0, r3, #12
 80163c4:	306e      	adds	r0, #110	; 0x6e
 80163c6:	e7e4      	b.n	8016392 <_free_r+0xea>
 80163c8:	20aa      	movs	r0, #170	; 0xaa
 80163ca:	0040      	lsls	r0, r0, #1
 80163cc:	4285      	cmp	r5, r0
 80163ce:	d802      	bhi.n	80163d6 <_free_r+0x12e>
 80163d0:	0bd8      	lsrs	r0, r3, #15
 80163d2:	3077      	adds	r0, #119	; 0x77
 80163d4:	e7dd      	b.n	8016392 <_free_r+0xea>
 80163d6:	4e0d      	ldr	r6, [pc, #52]	; (801640c <_free_r+0x164>)
 80163d8:	207e      	movs	r0, #126	; 0x7e
 80163da:	42b5      	cmp	r5, r6
 80163dc:	d8d9      	bhi.n	8016392 <_free_r+0xea>
 80163de:	0c98      	lsrs	r0, r3, #18
 80163e0:	307c      	adds	r0, #124	; 0x7c
 80163e2:	e7d6      	b.n	8016392 <_free_r+0xea>
 80163e4:	68ad      	ldr	r5, [r5, #8]
 80163e6:	42ae      	cmp	r6, r5
 80163e8:	d003      	beq.n	80163f2 <_free_r+0x14a>
 80163ea:	686a      	ldr	r2, [r5, #4]
 80163ec:	43ba      	bics	r2, r7
 80163ee:	429a      	cmp	r2, r3
 80163f0:	d8f8      	bhi.n	80163e4 <_free_r+0x13c>
 80163f2:	68ee      	ldr	r6, [r5, #12]
 80163f4:	e7d9      	b.n	80163aa <_free_r+0x102>
 80163f6:	46c0      	nop			; (mov r8, r8)
 80163f8:	20000664 	.word	0x20000664
 80163fc:	20000a70 	.word	0x20000a70
 8016400:	20006e1c 	.word	0x20006e1c
 8016404:	2000066c 	.word	0x2000066c
 8016408:	000001ff 	.word	0x000001ff
 801640c:	00000554 	.word	0x00000554

08016410 <rshift>:
 8016410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016412:	0004      	movs	r4, r0
 8016414:	6905      	ldr	r5, [r0, #16]
 8016416:	3414      	adds	r4, #20
 8016418:	114b      	asrs	r3, r1, #5
 801641a:	0026      	movs	r6, r4
 801641c:	429d      	cmp	r5, r3
 801641e:	dd14      	ble.n	801644a <rshift+0x3a>
 8016420:	221f      	movs	r2, #31
 8016422:	00ad      	lsls	r5, r5, #2
 8016424:	009b      	lsls	r3, r3, #2
 8016426:	4011      	ands	r1, r2
 8016428:	1965      	adds	r5, r4, r5
 801642a:	18e3      	adds	r3, r4, r3
 801642c:	0022      	movs	r2, r4
 801642e:	2900      	cmp	r1, #0
 8016430:	d01e      	beq.n	8016470 <rshift+0x60>
 8016432:	cb04      	ldmia	r3!, {r2}
 8016434:	2720      	movs	r7, #32
 8016436:	40ca      	lsrs	r2, r1
 8016438:	46a4      	mov	ip, r4
 801643a:	1a7f      	subs	r7, r7, r1
 801643c:	4666      	mov	r6, ip
 801643e:	429d      	cmp	r5, r3
 8016440:	d80b      	bhi.n	801645a <rshift+0x4a>
 8016442:	6032      	str	r2, [r6, #0]
 8016444:	2a00      	cmp	r2, #0
 8016446:	d000      	beq.n	801644a <rshift+0x3a>
 8016448:	3604      	adds	r6, #4
 801644a:	1b33      	subs	r3, r6, r4
 801644c:	109b      	asrs	r3, r3, #2
 801644e:	6103      	str	r3, [r0, #16]
 8016450:	42a6      	cmp	r6, r4
 8016452:	d101      	bne.n	8016458 <rshift+0x48>
 8016454:	2300      	movs	r3, #0
 8016456:	6143      	str	r3, [r0, #20]
 8016458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801645a:	681e      	ldr	r6, [r3, #0]
 801645c:	40be      	lsls	r6, r7
 801645e:	4332      	orrs	r2, r6
 8016460:	4666      	mov	r6, ip
 8016462:	c604      	stmia	r6!, {r2}
 8016464:	cb04      	ldmia	r3!, {r2}
 8016466:	46b4      	mov	ip, r6
 8016468:	40ca      	lsrs	r2, r1
 801646a:	e7e7      	b.n	801643c <rshift+0x2c>
 801646c:	cb02      	ldmia	r3!, {r1}
 801646e:	c202      	stmia	r2!, {r1}
 8016470:	0016      	movs	r6, r2
 8016472:	429d      	cmp	r5, r3
 8016474:	d8fa      	bhi.n	801646c <rshift+0x5c>
 8016476:	e7e8      	b.n	801644a <rshift+0x3a>

08016478 <__hexdig_fun>:
 8016478:	0003      	movs	r3, r0
 801647a:	3b30      	subs	r3, #48	; 0x30
 801647c:	2b09      	cmp	r3, #9
 801647e:	d803      	bhi.n	8016488 <__hexdig_fun+0x10>
 8016480:	3820      	subs	r0, #32
 8016482:	b2c3      	uxtb	r3, r0
 8016484:	0018      	movs	r0, r3
 8016486:	4770      	bx	lr
 8016488:	0003      	movs	r3, r0
 801648a:	3b61      	subs	r3, #97	; 0x61
 801648c:	2b05      	cmp	r3, #5
 801648e:	d801      	bhi.n	8016494 <__hexdig_fun+0x1c>
 8016490:	3847      	subs	r0, #71	; 0x47
 8016492:	e7f6      	b.n	8016482 <__hexdig_fun+0xa>
 8016494:	0002      	movs	r2, r0
 8016496:	3a41      	subs	r2, #65	; 0x41
 8016498:	2300      	movs	r3, #0
 801649a:	2a05      	cmp	r2, #5
 801649c:	d8f2      	bhi.n	8016484 <__hexdig_fun+0xc>
 801649e:	3827      	subs	r0, #39	; 0x27
 80164a0:	e7ef      	b.n	8016482 <__hexdig_fun+0xa>

080164a2 <__gethex>:
 80164a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164a4:	b08d      	sub	sp, #52	; 0x34
 80164a6:	9005      	str	r0, [sp, #20]
 80164a8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80164aa:	9109      	str	r1, [sp, #36]	; 0x24
 80164ac:	9202      	str	r2, [sp, #8]
 80164ae:	930a      	str	r3, [sp, #40]	; 0x28
 80164b0:	f000 fadf 	bl	8016a72 <__localeconv_l>
 80164b4:	6803      	ldr	r3, [r0, #0]
 80164b6:	0018      	movs	r0, r3
 80164b8:	9307      	str	r3, [sp, #28]
 80164ba:	f7e9 fe2d 	bl	8000118 <strlen>
 80164be:	2202      	movs	r2, #2
 80164c0:	9b07      	ldr	r3, [sp, #28]
 80164c2:	4252      	negs	r2, r2
 80164c4:	181b      	adds	r3, r3, r0
 80164c6:	3b01      	subs	r3, #1
 80164c8:	781b      	ldrb	r3, [r3, #0]
 80164ca:	9004      	str	r0, [sp, #16]
 80164cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80164ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164d0:	6819      	ldr	r1, [r3, #0]
 80164d2:	1c8b      	adds	r3, r1, #2
 80164d4:	1a52      	subs	r2, r2, r1
 80164d6:	18d1      	adds	r1, r2, r3
 80164d8:	9301      	str	r3, [sp, #4]
 80164da:	9108      	str	r1, [sp, #32]
 80164dc:	9901      	ldr	r1, [sp, #4]
 80164de:	3301      	adds	r3, #1
 80164e0:	7808      	ldrb	r0, [r1, #0]
 80164e2:	2830      	cmp	r0, #48	; 0x30
 80164e4:	d0f7      	beq.n	80164d6 <__gethex+0x34>
 80164e6:	f7ff ffc7 	bl	8016478 <__hexdig_fun>
 80164ea:	1e07      	subs	r7, r0, #0
 80164ec:	d000      	beq.n	80164f0 <__gethex+0x4e>
 80164ee:	e06f      	b.n	80165d0 <__gethex+0x12e>
 80164f0:	9a04      	ldr	r2, [sp, #16]
 80164f2:	9907      	ldr	r1, [sp, #28]
 80164f4:	9801      	ldr	r0, [sp, #4]
 80164f6:	f7fc fe4b 	bl	8013190 <strncmp>
 80164fa:	2800      	cmp	r0, #0
 80164fc:	d000      	beq.n	8016500 <__gethex+0x5e>
 80164fe:	e06d      	b.n	80165dc <__gethex+0x13a>
 8016500:	9b01      	ldr	r3, [sp, #4]
 8016502:	9a04      	ldr	r2, [sp, #16]
 8016504:	189c      	adds	r4, r3, r2
 8016506:	7820      	ldrb	r0, [r4, #0]
 8016508:	f7ff ffb6 	bl	8016478 <__hexdig_fun>
 801650c:	2800      	cmp	r0, #0
 801650e:	d069      	beq.n	80165e4 <__gethex+0x142>
 8016510:	9401      	str	r4, [sp, #4]
 8016512:	9b01      	ldr	r3, [sp, #4]
 8016514:	7818      	ldrb	r0, [r3, #0]
 8016516:	2830      	cmp	r0, #48	; 0x30
 8016518:	d009      	beq.n	801652e <__gethex+0x8c>
 801651a:	f7ff ffad 	bl	8016478 <__hexdig_fun>
 801651e:	4243      	negs	r3, r0
 8016520:	4143      	adcs	r3, r0
 8016522:	9303      	str	r3, [sp, #12]
 8016524:	2301      	movs	r3, #1
 8016526:	0026      	movs	r6, r4
 8016528:	9308      	str	r3, [sp, #32]
 801652a:	9c01      	ldr	r4, [sp, #4]
 801652c:	e004      	b.n	8016538 <__gethex+0x96>
 801652e:	9b01      	ldr	r3, [sp, #4]
 8016530:	3301      	adds	r3, #1
 8016532:	9301      	str	r3, [sp, #4]
 8016534:	e7ed      	b.n	8016512 <__gethex+0x70>
 8016536:	3401      	adds	r4, #1
 8016538:	7820      	ldrb	r0, [r4, #0]
 801653a:	f7ff ff9d 	bl	8016478 <__hexdig_fun>
 801653e:	2800      	cmp	r0, #0
 8016540:	d1f9      	bne.n	8016536 <__gethex+0x94>
 8016542:	9a04      	ldr	r2, [sp, #16]
 8016544:	9907      	ldr	r1, [sp, #28]
 8016546:	0020      	movs	r0, r4
 8016548:	f7fc fe22 	bl	8013190 <strncmp>
 801654c:	2800      	cmp	r0, #0
 801654e:	d109      	bne.n	8016564 <__gethex+0xc2>
 8016550:	2e00      	cmp	r6, #0
 8016552:	d10a      	bne.n	801656a <__gethex+0xc8>
 8016554:	9b04      	ldr	r3, [sp, #16]
 8016556:	18e4      	adds	r4, r4, r3
 8016558:	0026      	movs	r6, r4
 801655a:	7820      	ldrb	r0, [r4, #0]
 801655c:	f7ff ff8c 	bl	8016478 <__hexdig_fun>
 8016560:	2800      	cmp	r0, #0
 8016562:	d139      	bne.n	80165d8 <__gethex+0x136>
 8016564:	2700      	movs	r7, #0
 8016566:	42be      	cmp	r6, r7
 8016568:	d001      	beq.n	801656e <__gethex+0xcc>
 801656a:	1b37      	subs	r7, r6, r4
 801656c:	00bf      	lsls	r7, r7, #2
 801656e:	7823      	ldrb	r3, [r4, #0]
 8016570:	2b50      	cmp	r3, #80	; 0x50
 8016572:	d001      	beq.n	8016578 <__gethex+0xd6>
 8016574:	2b70      	cmp	r3, #112	; 0x70
 8016576:	d142      	bne.n	80165fe <__gethex+0x15c>
 8016578:	7863      	ldrb	r3, [r4, #1]
 801657a:	2b2b      	cmp	r3, #43	; 0x2b
 801657c:	d034      	beq.n	80165e8 <__gethex+0x146>
 801657e:	2b2d      	cmp	r3, #45	; 0x2d
 8016580:	d036      	beq.n	80165f0 <__gethex+0x14e>
 8016582:	2300      	movs	r3, #0
 8016584:	1c66      	adds	r6, r4, #1
 8016586:	9306      	str	r3, [sp, #24]
 8016588:	7830      	ldrb	r0, [r6, #0]
 801658a:	f7ff ff75 	bl	8016478 <__hexdig_fun>
 801658e:	1e43      	subs	r3, r0, #1
 8016590:	b2db      	uxtb	r3, r3
 8016592:	2b18      	cmp	r3, #24
 8016594:	d833      	bhi.n	80165fe <__gethex+0x15c>
 8016596:	3810      	subs	r0, #16
 8016598:	0005      	movs	r5, r0
 801659a:	3601      	adds	r6, #1
 801659c:	7830      	ldrb	r0, [r6, #0]
 801659e:	f7ff ff6b 	bl	8016478 <__hexdig_fun>
 80165a2:	1e43      	subs	r3, r0, #1
 80165a4:	b2db      	uxtb	r3, r3
 80165a6:	2b18      	cmp	r3, #24
 80165a8:	d924      	bls.n	80165f4 <__gethex+0x152>
 80165aa:	9b06      	ldr	r3, [sp, #24]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d000      	beq.n	80165b2 <__gethex+0x110>
 80165b0:	426d      	negs	r5, r5
 80165b2:	197f      	adds	r7, r7, r5
 80165b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165b6:	601e      	str	r6, [r3, #0]
 80165b8:	9b03      	ldr	r3, [sp, #12]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d021      	beq.n	8016602 <__gethex+0x160>
 80165be:	9b08      	ldr	r3, [sp, #32]
 80165c0:	2606      	movs	r6, #6
 80165c2:	425a      	negs	r2, r3
 80165c4:	4153      	adcs	r3, r2
 80165c6:	425b      	negs	r3, r3
 80165c8:	401e      	ands	r6, r3
 80165ca:	0030      	movs	r0, r6
 80165cc:	b00d      	add	sp, #52	; 0x34
 80165ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165d0:	2300      	movs	r3, #0
 80165d2:	9303      	str	r3, [sp, #12]
 80165d4:	001e      	movs	r6, r3
 80165d6:	e7a8      	b.n	801652a <__gethex+0x88>
 80165d8:	3401      	adds	r4, #1
 80165da:	e7be      	b.n	801655a <__gethex+0xb8>
 80165dc:	9c01      	ldr	r4, [sp, #4]
 80165de:	2301      	movs	r3, #1
 80165e0:	9303      	str	r3, [sp, #12]
 80165e2:	e7c4      	b.n	801656e <__gethex+0xcc>
 80165e4:	0007      	movs	r7, r0
 80165e6:	e7fa      	b.n	80165de <__gethex+0x13c>
 80165e8:	2300      	movs	r3, #0
 80165ea:	9306      	str	r3, [sp, #24]
 80165ec:	1ca6      	adds	r6, r4, #2
 80165ee:	e7cb      	b.n	8016588 <__gethex+0xe6>
 80165f0:	2301      	movs	r3, #1
 80165f2:	e7fa      	b.n	80165ea <__gethex+0x148>
 80165f4:	230a      	movs	r3, #10
 80165f6:	435d      	muls	r5, r3
 80165f8:	182d      	adds	r5, r5, r0
 80165fa:	3d10      	subs	r5, #16
 80165fc:	e7cd      	b.n	801659a <__gethex+0xf8>
 80165fe:	0026      	movs	r6, r4
 8016600:	e7d8      	b.n	80165b4 <__gethex+0x112>
 8016602:	9b01      	ldr	r3, [sp, #4]
 8016604:	9903      	ldr	r1, [sp, #12]
 8016606:	1ae3      	subs	r3, r4, r3
 8016608:	3b01      	subs	r3, #1
 801660a:	2b07      	cmp	r3, #7
 801660c:	dc47      	bgt.n	801669e <__gethex+0x1fc>
 801660e:	9805      	ldr	r0, [sp, #20]
 8016610:	f000 fa5e 	bl	8016ad0 <_Balloc>
 8016614:	0003      	movs	r3, r0
 8016616:	3314      	adds	r3, #20
 8016618:	9303      	str	r3, [sp, #12]
 801661a:	9308      	str	r3, [sp, #32]
 801661c:	2300      	movs	r3, #0
 801661e:	0005      	movs	r5, r0
 8016620:	001e      	movs	r6, r3
 8016622:	9306      	str	r3, [sp, #24]
 8016624:	9b01      	ldr	r3, [sp, #4]
 8016626:	42a3      	cmp	r3, r4
 8016628:	d33c      	bcc.n	80166a4 <__gethex+0x202>
 801662a:	9c08      	ldr	r4, [sp, #32]
 801662c:	9b03      	ldr	r3, [sp, #12]
 801662e:	c440      	stmia	r4!, {r6}
 8016630:	1ae4      	subs	r4, r4, r3
 8016632:	10a4      	asrs	r4, r4, #2
 8016634:	612c      	str	r4, [r5, #16]
 8016636:	0030      	movs	r0, r6
 8016638:	f000 faf8 	bl	8016c2c <__hi0bits>
 801663c:	9b02      	ldr	r3, [sp, #8]
 801663e:	0164      	lsls	r4, r4, #5
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	1a26      	subs	r6, r4, r0
 8016644:	9301      	str	r3, [sp, #4]
 8016646:	429e      	cmp	r6, r3
 8016648:	dd5f      	ble.n	801670a <__gethex+0x268>
 801664a:	1af6      	subs	r6, r6, r3
 801664c:	0031      	movs	r1, r6
 801664e:	0028      	movs	r0, r5
 8016650:	f000 fde3 	bl	801721a <__any_on>
 8016654:	1e04      	subs	r4, r0, #0
 8016656:	d00f      	beq.n	8016678 <__gethex+0x1d6>
 8016658:	2401      	movs	r4, #1
 801665a:	211f      	movs	r1, #31
 801665c:	0020      	movs	r0, r4
 801665e:	1e73      	subs	r3, r6, #1
 8016660:	4019      	ands	r1, r3
 8016662:	4088      	lsls	r0, r1
 8016664:	0001      	movs	r1, r0
 8016666:	115a      	asrs	r2, r3, #5
 8016668:	9803      	ldr	r0, [sp, #12]
 801666a:	0092      	lsls	r2, r2, #2
 801666c:	5812      	ldr	r2, [r2, r0]
 801666e:	420a      	tst	r2, r1
 8016670:	d002      	beq.n	8016678 <__gethex+0x1d6>
 8016672:	42a3      	cmp	r3, r4
 8016674:	dc41      	bgt.n	80166fa <__gethex+0x258>
 8016676:	2402      	movs	r4, #2
 8016678:	0031      	movs	r1, r6
 801667a:	0028      	movs	r0, r5
 801667c:	f7ff fec8 	bl	8016410 <rshift>
 8016680:	19bf      	adds	r7, r7, r6
 8016682:	9b02      	ldr	r3, [sp, #8]
 8016684:	689b      	ldr	r3, [r3, #8]
 8016686:	9304      	str	r3, [sp, #16]
 8016688:	42bb      	cmp	r3, r7
 801668a:	da4e      	bge.n	801672a <__gethex+0x288>
 801668c:	0029      	movs	r1, r5
 801668e:	9805      	ldr	r0, [sp, #20]
 8016690:	f000 fa46 	bl	8016b20 <_Bfree>
 8016694:	2300      	movs	r3, #0
 8016696:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016698:	26a3      	movs	r6, #163	; 0xa3
 801669a:	6013      	str	r3, [r2, #0]
 801669c:	e795      	b.n	80165ca <__gethex+0x128>
 801669e:	3101      	adds	r1, #1
 80166a0:	105b      	asrs	r3, r3, #1
 80166a2:	e7b2      	b.n	801660a <__gethex+0x168>
 80166a4:	1e63      	subs	r3, r4, #1
 80166a6:	9309      	str	r3, [sp, #36]	; 0x24
 80166a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80166aa:	781b      	ldrb	r3, [r3, #0]
 80166ac:	4293      	cmp	r3, r2
 80166ae:	d015      	beq.n	80166dc <__gethex+0x23a>
 80166b0:	9b06      	ldr	r3, [sp, #24]
 80166b2:	2b20      	cmp	r3, #32
 80166b4:	d105      	bne.n	80166c2 <__gethex+0x220>
 80166b6:	9b08      	ldr	r3, [sp, #32]
 80166b8:	601e      	str	r6, [r3, #0]
 80166ba:	2600      	movs	r6, #0
 80166bc:	3304      	adds	r3, #4
 80166be:	9308      	str	r3, [sp, #32]
 80166c0:	9606      	str	r6, [sp, #24]
 80166c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166c4:	7818      	ldrb	r0, [r3, #0]
 80166c6:	f7ff fed7 	bl	8016478 <__hexdig_fun>
 80166ca:	230f      	movs	r3, #15
 80166cc:	4018      	ands	r0, r3
 80166ce:	9b06      	ldr	r3, [sp, #24]
 80166d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80166d2:	4098      	lsls	r0, r3
 80166d4:	3304      	adds	r3, #4
 80166d6:	4306      	orrs	r6, r0
 80166d8:	9306      	str	r3, [sp, #24]
 80166da:	e7a3      	b.n	8016624 <__gethex+0x182>
 80166dc:	2301      	movs	r3, #1
 80166de:	9a04      	ldr	r2, [sp, #16]
 80166e0:	1a9c      	subs	r4, r3, r2
 80166e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166e4:	191c      	adds	r4, r3, r4
 80166e6:	9b01      	ldr	r3, [sp, #4]
 80166e8:	429c      	cmp	r4, r3
 80166ea:	d3e1      	bcc.n	80166b0 <__gethex+0x20e>
 80166ec:	9907      	ldr	r1, [sp, #28]
 80166ee:	0020      	movs	r0, r4
 80166f0:	f7fc fd4e 	bl	8013190 <strncmp>
 80166f4:	2800      	cmp	r0, #0
 80166f6:	d1db      	bne.n	80166b0 <__gethex+0x20e>
 80166f8:	e794      	b.n	8016624 <__gethex+0x182>
 80166fa:	1eb1      	subs	r1, r6, #2
 80166fc:	0028      	movs	r0, r5
 80166fe:	f000 fd8c 	bl	801721a <__any_on>
 8016702:	2800      	cmp	r0, #0
 8016704:	d0b7      	beq.n	8016676 <__gethex+0x1d4>
 8016706:	2403      	movs	r4, #3
 8016708:	e7b6      	b.n	8016678 <__gethex+0x1d6>
 801670a:	9b01      	ldr	r3, [sp, #4]
 801670c:	2400      	movs	r4, #0
 801670e:	429e      	cmp	r6, r3
 8016710:	dab7      	bge.n	8016682 <__gethex+0x1e0>
 8016712:	1b9e      	subs	r6, r3, r6
 8016714:	0029      	movs	r1, r5
 8016716:	0032      	movs	r2, r6
 8016718:	9805      	ldr	r0, [sp, #20]
 801671a:	f000 fbab 	bl	8016e74 <__lshift>
 801671e:	0003      	movs	r3, r0
 8016720:	3314      	adds	r3, #20
 8016722:	0005      	movs	r5, r0
 8016724:	1bbf      	subs	r7, r7, r6
 8016726:	9303      	str	r3, [sp, #12]
 8016728:	e7ab      	b.n	8016682 <__gethex+0x1e0>
 801672a:	9b02      	ldr	r3, [sp, #8]
 801672c:	685e      	ldr	r6, [r3, #4]
 801672e:	42be      	cmp	r6, r7
 8016730:	dd6b      	ble.n	801680a <__gethex+0x368>
 8016732:	9b01      	ldr	r3, [sp, #4]
 8016734:	1bf6      	subs	r6, r6, r7
 8016736:	42b3      	cmp	r3, r6
 8016738:	dc32      	bgt.n	80167a0 <__gethex+0x2fe>
 801673a:	9b02      	ldr	r3, [sp, #8]
 801673c:	68db      	ldr	r3, [r3, #12]
 801673e:	2b02      	cmp	r3, #2
 8016740:	d026      	beq.n	8016790 <__gethex+0x2ee>
 8016742:	2b03      	cmp	r3, #3
 8016744:	d028      	beq.n	8016798 <__gethex+0x2f6>
 8016746:	2b01      	cmp	r3, #1
 8016748:	d119      	bne.n	801677e <__gethex+0x2dc>
 801674a:	9b01      	ldr	r3, [sp, #4]
 801674c:	42b3      	cmp	r3, r6
 801674e:	d116      	bne.n	801677e <__gethex+0x2dc>
 8016750:	2b01      	cmp	r3, #1
 8016752:	dc0d      	bgt.n	8016770 <__gethex+0x2ce>
 8016754:	9b02      	ldr	r3, [sp, #8]
 8016756:	2662      	movs	r6, #98	; 0x62
 8016758:	685b      	ldr	r3, [r3, #4]
 801675a:	9301      	str	r3, [sp, #4]
 801675c:	9a01      	ldr	r2, [sp, #4]
 801675e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016760:	601a      	str	r2, [r3, #0]
 8016762:	2301      	movs	r3, #1
 8016764:	9a03      	ldr	r2, [sp, #12]
 8016766:	612b      	str	r3, [r5, #16]
 8016768:	6013      	str	r3, [r2, #0]
 801676a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801676c:	601d      	str	r5, [r3, #0]
 801676e:	e72c      	b.n	80165ca <__gethex+0x128>
 8016770:	9901      	ldr	r1, [sp, #4]
 8016772:	0028      	movs	r0, r5
 8016774:	3901      	subs	r1, #1
 8016776:	f000 fd50 	bl	801721a <__any_on>
 801677a:	2800      	cmp	r0, #0
 801677c:	d1ea      	bne.n	8016754 <__gethex+0x2b2>
 801677e:	0029      	movs	r1, r5
 8016780:	9805      	ldr	r0, [sp, #20]
 8016782:	f000 f9cd 	bl	8016b20 <_Bfree>
 8016786:	2300      	movs	r3, #0
 8016788:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801678a:	2650      	movs	r6, #80	; 0x50
 801678c:	6013      	str	r3, [r2, #0]
 801678e:	e71c      	b.n	80165ca <__gethex+0x128>
 8016790:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016792:	2b00      	cmp	r3, #0
 8016794:	d0de      	beq.n	8016754 <__gethex+0x2b2>
 8016796:	e7f2      	b.n	801677e <__gethex+0x2dc>
 8016798:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801679a:	2b00      	cmp	r3, #0
 801679c:	d1da      	bne.n	8016754 <__gethex+0x2b2>
 801679e:	e7ee      	b.n	801677e <__gethex+0x2dc>
 80167a0:	1e77      	subs	r7, r6, #1
 80167a2:	2c00      	cmp	r4, #0
 80167a4:	d12f      	bne.n	8016806 <__gethex+0x364>
 80167a6:	2f00      	cmp	r7, #0
 80167a8:	d004      	beq.n	80167b4 <__gethex+0x312>
 80167aa:	0039      	movs	r1, r7
 80167ac:	0028      	movs	r0, r5
 80167ae:	f000 fd34 	bl	801721a <__any_on>
 80167b2:	0004      	movs	r4, r0
 80167b4:	231f      	movs	r3, #31
 80167b6:	117a      	asrs	r2, r7, #5
 80167b8:	401f      	ands	r7, r3
 80167ba:	3b1e      	subs	r3, #30
 80167bc:	40bb      	lsls	r3, r7
 80167be:	9903      	ldr	r1, [sp, #12]
 80167c0:	0092      	lsls	r2, r2, #2
 80167c2:	5852      	ldr	r2, [r2, r1]
 80167c4:	421a      	tst	r2, r3
 80167c6:	d001      	beq.n	80167cc <__gethex+0x32a>
 80167c8:	2302      	movs	r3, #2
 80167ca:	431c      	orrs	r4, r3
 80167cc:	9b01      	ldr	r3, [sp, #4]
 80167ce:	0031      	movs	r1, r6
 80167d0:	1b9b      	subs	r3, r3, r6
 80167d2:	2602      	movs	r6, #2
 80167d4:	0028      	movs	r0, r5
 80167d6:	9301      	str	r3, [sp, #4]
 80167d8:	f7ff fe1a 	bl	8016410 <rshift>
 80167dc:	9b02      	ldr	r3, [sp, #8]
 80167de:	685f      	ldr	r7, [r3, #4]
 80167e0:	2c00      	cmp	r4, #0
 80167e2:	d040      	beq.n	8016866 <__gethex+0x3c4>
 80167e4:	9b02      	ldr	r3, [sp, #8]
 80167e6:	68db      	ldr	r3, [r3, #12]
 80167e8:	2b02      	cmp	r3, #2
 80167ea:	d010      	beq.n	801680e <__gethex+0x36c>
 80167ec:	2b03      	cmp	r3, #3
 80167ee:	d012      	beq.n	8016816 <__gethex+0x374>
 80167f0:	2b01      	cmp	r3, #1
 80167f2:	d106      	bne.n	8016802 <__gethex+0x360>
 80167f4:	07a2      	lsls	r2, r4, #30
 80167f6:	d504      	bpl.n	8016802 <__gethex+0x360>
 80167f8:	9a03      	ldr	r2, [sp, #12]
 80167fa:	6812      	ldr	r2, [r2, #0]
 80167fc:	4314      	orrs	r4, r2
 80167fe:	421c      	tst	r4, r3
 8016800:	d10c      	bne.n	801681c <__gethex+0x37a>
 8016802:	2310      	movs	r3, #16
 8016804:	e02e      	b.n	8016864 <__gethex+0x3c2>
 8016806:	2401      	movs	r4, #1
 8016808:	e7d4      	b.n	80167b4 <__gethex+0x312>
 801680a:	2601      	movs	r6, #1
 801680c:	e7e8      	b.n	80167e0 <__gethex+0x33e>
 801680e:	2301      	movs	r3, #1
 8016810:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016812:	1a9b      	subs	r3, r3, r2
 8016814:	9313      	str	r3, [sp, #76]	; 0x4c
 8016816:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016818:	2b00      	cmp	r3, #0
 801681a:	d0f2      	beq.n	8016802 <__gethex+0x360>
 801681c:	692c      	ldr	r4, [r5, #16]
 801681e:	00a3      	lsls	r3, r4, #2
 8016820:	9304      	str	r3, [sp, #16]
 8016822:	002b      	movs	r3, r5
 8016824:	00a2      	lsls	r2, r4, #2
 8016826:	3314      	adds	r3, #20
 8016828:	1899      	adds	r1, r3, r2
 801682a:	2200      	movs	r2, #0
 801682c:	4694      	mov	ip, r2
 801682e:	681a      	ldr	r2, [r3, #0]
 8016830:	1c50      	adds	r0, r2, #1
 8016832:	d01d      	beq.n	8016870 <__gethex+0x3ce>
 8016834:	3201      	adds	r2, #1
 8016836:	601a      	str	r2, [r3, #0]
 8016838:	002b      	movs	r3, r5
 801683a:	3314      	adds	r3, #20
 801683c:	2e02      	cmp	r6, #2
 801683e:	d13a      	bne.n	80168b6 <__gethex+0x414>
 8016840:	9a02      	ldr	r2, [sp, #8]
 8016842:	9901      	ldr	r1, [sp, #4]
 8016844:	6812      	ldr	r2, [r2, #0]
 8016846:	3a01      	subs	r2, #1
 8016848:	428a      	cmp	r2, r1
 801684a:	d10a      	bne.n	8016862 <__gethex+0x3c0>
 801684c:	114a      	asrs	r2, r1, #5
 801684e:	211f      	movs	r1, #31
 8016850:	9801      	ldr	r0, [sp, #4]
 8016852:	0092      	lsls	r2, r2, #2
 8016854:	4001      	ands	r1, r0
 8016856:	2001      	movs	r0, #1
 8016858:	0004      	movs	r4, r0
 801685a:	408c      	lsls	r4, r1
 801685c:	58d3      	ldr	r3, [r2, r3]
 801685e:	4223      	tst	r3, r4
 8016860:	d148      	bne.n	80168f4 <__gethex+0x452>
 8016862:	2320      	movs	r3, #32
 8016864:	431e      	orrs	r6, r3
 8016866:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016868:	601d      	str	r5, [r3, #0]
 801686a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801686c:	601f      	str	r7, [r3, #0]
 801686e:	e6ac      	b.n	80165ca <__gethex+0x128>
 8016870:	4662      	mov	r2, ip
 8016872:	c304      	stmia	r3!, {r2}
 8016874:	4299      	cmp	r1, r3
 8016876:	d8da      	bhi.n	801682e <__gethex+0x38c>
 8016878:	68ab      	ldr	r3, [r5, #8]
 801687a:	429c      	cmp	r4, r3
 801687c:	db12      	blt.n	80168a4 <__gethex+0x402>
 801687e:	686b      	ldr	r3, [r5, #4]
 8016880:	9805      	ldr	r0, [sp, #20]
 8016882:	1c59      	adds	r1, r3, #1
 8016884:	f000 f924 	bl	8016ad0 <_Balloc>
 8016888:	0029      	movs	r1, r5
 801688a:	692b      	ldr	r3, [r5, #16]
 801688c:	9003      	str	r0, [sp, #12]
 801688e:	1c9a      	adds	r2, r3, #2
 8016890:	0092      	lsls	r2, r2, #2
 8016892:	310c      	adds	r1, #12
 8016894:	300c      	adds	r0, #12
 8016896:	f7fc fa34 	bl	8012d02 <memcpy>
 801689a:	0029      	movs	r1, r5
 801689c:	9805      	ldr	r0, [sp, #20]
 801689e:	f000 f93f 	bl	8016b20 <_Bfree>
 80168a2:	9d03      	ldr	r5, [sp, #12]
 80168a4:	692b      	ldr	r3, [r5, #16]
 80168a6:	1c5a      	adds	r2, r3, #1
 80168a8:	612a      	str	r2, [r5, #16]
 80168aa:	2201      	movs	r2, #1
 80168ac:	3304      	adds	r3, #4
 80168ae:	009b      	lsls	r3, r3, #2
 80168b0:	18eb      	adds	r3, r5, r3
 80168b2:	605a      	str	r2, [r3, #4]
 80168b4:	e7c0      	b.n	8016838 <__gethex+0x396>
 80168b6:	692a      	ldr	r2, [r5, #16]
 80168b8:	42a2      	cmp	r2, r4
 80168ba:	dd0a      	ble.n	80168d2 <__gethex+0x430>
 80168bc:	2101      	movs	r1, #1
 80168be:	0028      	movs	r0, r5
 80168c0:	f7ff fda6 	bl	8016410 <rshift>
 80168c4:	9b02      	ldr	r3, [sp, #8]
 80168c6:	3701      	adds	r7, #1
 80168c8:	689b      	ldr	r3, [r3, #8]
 80168ca:	2601      	movs	r6, #1
 80168cc:	42bb      	cmp	r3, r7
 80168ce:	dac8      	bge.n	8016862 <__gethex+0x3c0>
 80168d0:	e6dc      	b.n	801668c <__gethex+0x1ea>
 80168d2:	241f      	movs	r4, #31
 80168d4:	9a01      	ldr	r2, [sp, #4]
 80168d6:	2601      	movs	r6, #1
 80168d8:	4022      	ands	r2, r4
 80168da:	1e14      	subs	r4, r2, #0
 80168dc:	d0c1      	beq.n	8016862 <__gethex+0x3c0>
 80168de:	9a04      	ldr	r2, [sp, #16]
 80168e0:	189b      	adds	r3, r3, r2
 80168e2:	3b04      	subs	r3, #4
 80168e4:	6818      	ldr	r0, [r3, #0]
 80168e6:	f000 f9a1 	bl	8016c2c <__hi0bits>
 80168ea:	2120      	movs	r1, #32
 80168ec:	1b0c      	subs	r4, r1, r4
 80168ee:	42a0      	cmp	r0, r4
 80168f0:	dbe4      	blt.n	80168bc <__gethex+0x41a>
 80168f2:	e7b6      	b.n	8016862 <__gethex+0x3c0>
 80168f4:	0006      	movs	r6, r0
 80168f6:	e7b4      	b.n	8016862 <__gethex+0x3c0>

080168f8 <L_shift>:
 80168f8:	2308      	movs	r3, #8
 80168fa:	b570      	push	{r4, r5, r6, lr}
 80168fc:	2520      	movs	r5, #32
 80168fe:	1a9a      	subs	r2, r3, r2
 8016900:	0092      	lsls	r2, r2, #2
 8016902:	1aad      	subs	r5, r5, r2
 8016904:	6843      	ldr	r3, [r0, #4]
 8016906:	6806      	ldr	r6, [r0, #0]
 8016908:	001c      	movs	r4, r3
 801690a:	40ac      	lsls	r4, r5
 801690c:	40d3      	lsrs	r3, r2
 801690e:	4334      	orrs	r4, r6
 8016910:	6004      	str	r4, [r0, #0]
 8016912:	6043      	str	r3, [r0, #4]
 8016914:	3004      	adds	r0, #4
 8016916:	4288      	cmp	r0, r1
 8016918:	d3f4      	bcc.n	8016904 <L_shift+0xc>
 801691a:	bd70      	pop	{r4, r5, r6, pc}

0801691c <__match>:
 801691c:	b530      	push	{r4, r5, lr}
 801691e:	6803      	ldr	r3, [r0, #0]
 8016920:	780c      	ldrb	r4, [r1, #0]
 8016922:	3301      	adds	r3, #1
 8016924:	2c00      	cmp	r4, #0
 8016926:	d102      	bne.n	801692e <__match+0x12>
 8016928:	6003      	str	r3, [r0, #0]
 801692a:	2001      	movs	r0, #1
 801692c:	bd30      	pop	{r4, r5, pc}
 801692e:	781a      	ldrb	r2, [r3, #0]
 8016930:	0015      	movs	r5, r2
 8016932:	3d41      	subs	r5, #65	; 0x41
 8016934:	2d19      	cmp	r5, #25
 8016936:	d800      	bhi.n	801693a <__match+0x1e>
 8016938:	3220      	adds	r2, #32
 801693a:	3101      	adds	r1, #1
 801693c:	42a2      	cmp	r2, r4
 801693e:	d0ef      	beq.n	8016920 <__match+0x4>
 8016940:	2000      	movs	r0, #0
 8016942:	e7f3      	b.n	801692c <__match+0x10>

08016944 <__hexnan>:
 8016944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016946:	b08b      	sub	sp, #44	; 0x2c
 8016948:	9201      	str	r2, [sp, #4]
 801694a:	680a      	ldr	r2, [r1, #0]
 801694c:	9901      	ldr	r1, [sp, #4]
 801694e:	1153      	asrs	r3, r2, #5
 8016950:	009b      	lsls	r3, r3, #2
 8016952:	18cb      	adds	r3, r1, r3
 8016954:	9304      	str	r3, [sp, #16]
 8016956:	231f      	movs	r3, #31
 8016958:	401a      	ands	r2, r3
 801695a:	9008      	str	r0, [sp, #32]
 801695c:	9206      	str	r2, [sp, #24]
 801695e:	d002      	beq.n	8016966 <__hexnan+0x22>
 8016960:	9b04      	ldr	r3, [sp, #16]
 8016962:	3304      	adds	r3, #4
 8016964:	9304      	str	r3, [sp, #16]
 8016966:	9b04      	ldr	r3, [sp, #16]
 8016968:	2500      	movs	r5, #0
 801696a:	1f1e      	subs	r6, r3, #4
 801696c:	0037      	movs	r7, r6
 801696e:	0034      	movs	r4, r6
 8016970:	9b08      	ldr	r3, [sp, #32]
 8016972:	6035      	str	r5, [r6, #0]
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	9507      	str	r5, [sp, #28]
 8016978:	9305      	str	r3, [sp, #20]
 801697a:	9502      	str	r5, [sp, #8]
 801697c:	9b05      	ldr	r3, [sp, #20]
 801697e:	3301      	adds	r3, #1
 8016980:	9309      	str	r3, [sp, #36]	; 0x24
 8016982:	9b05      	ldr	r3, [sp, #20]
 8016984:	785b      	ldrb	r3, [r3, #1]
 8016986:	9303      	str	r3, [sp, #12]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d028      	beq.n	80169de <__hexnan+0x9a>
 801698c:	9803      	ldr	r0, [sp, #12]
 801698e:	f7ff fd73 	bl	8016478 <__hexdig_fun>
 8016992:	2800      	cmp	r0, #0
 8016994:	d145      	bne.n	8016a22 <__hexnan+0xde>
 8016996:	9b03      	ldr	r3, [sp, #12]
 8016998:	2b20      	cmp	r3, #32
 801699a:	d819      	bhi.n	80169d0 <__hexnan+0x8c>
 801699c:	9b02      	ldr	r3, [sp, #8]
 801699e:	9a07      	ldr	r2, [sp, #28]
 80169a0:	4293      	cmp	r3, r2
 80169a2:	dd12      	ble.n	80169ca <__hexnan+0x86>
 80169a4:	42bc      	cmp	r4, r7
 80169a6:	d206      	bcs.n	80169b6 <__hexnan+0x72>
 80169a8:	2d07      	cmp	r5, #7
 80169aa:	dc04      	bgt.n	80169b6 <__hexnan+0x72>
 80169ac:	002a      	movs	r2, r5
 80169ae:	0039      	movs	r1, r7
 80169b0:	0020      	movs	r0, r4
 80169b2:	f7ff ffa1 	bl	80168f8 <L_shift>
 80169b6:	9b01      	ldr	r3, [sp, #4]
 80169b8:	2508      	movs	r5, #8
 80169ba:	429c      	cmp	r4, r3
 80169bc:	d905      	bls.n	80169ca <__hexnan+0x86>
 80169be:	1f27      	subs	r7, r4, #4
 80169c0:	2500      	movs	r5, #0
 80169c2:	003c      	movs	r4, r7
 80169c4:	9b02      	ldr	r3, [sp, #8]
 80169c6:	603d      	str	r5, [r7, #0]
 80169c8:	9307      	str	r3, [sp, #28]
 80169ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169cc:	9305      	str	r3, [sp, #20]
 80169ce:	e7d5      	b.n	801697c <__hexnan+0x38>
 80169d0:	9b03      	ldr	r3, [sp, #12]
 80169d2:	2b29      	cmp	r3, #41	; 0x29
 80169d4:	d14a      	bne.n	8016a6c <__hexnan+0x128>
 80169d6:	9b05      	ldr	r3, [sp, #20]
 80169d8:	9a08      	ldr	r2, [sp, #32]
 80169da:	3302      	adds	r3, #2
 80169dc:	6013      	str	r3, [r2, #0]
 80169de:	9b02      	ldr	r3, [sp, #8]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d043      	beq.n	8016a6c <__hexnan+0x128>
 80169e4:	42bc      	cmp	r4, r7
 80169e6:	d206      	bcs.n	80169f6 <__hexnan+0xb2>
 80169e8:	2d07      	cmp	r5, #7
 80169ea:	dc04      	bgt.n	80169f6 <__hexnan+0xb2>
 80169ec:	002a      	movs	r2, r5
 80169ee:	0039      	movs	r1, r7
 80169f0:	0020      	movs	r0, r4
 80169f2:	f7ff ff81 	bl	80168f8 <L_shift>
 80169f6:	9b01      	ldr	r3, [sp, #4]
 80169f8:	429c      	cmp	r4, r3
 80169fa:	d926      	bls.n	8016a4a <__hexnan+0x106>
 80169fc:	cc04      	ldmia	r4!, {r2}
 80169fe:	601a      	str	r2, [r3, #0]
 8016a00:	3304      	adds	r3, #4
 8016a02:	42a6      	cmp	r6, r4
 8016a04:	d2fa      	bcs.n	80169fc <__hexnan+0xb8>
 8016a06:	2200      	movs	r2, #0
 8016a08:	c304      	stmia	r3!, {r2}
 8016a0a:	429e      	cmp	r6, r3
 8016a0c:	d2fc      	bcs.n	8016a08 <__hexnan+0xc4>
 8016a0e:	6833      	ldr	r3, [r6, #0]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d104      	bne.n	8016a1e <__hexnan+0xda>
 8016a14:	9b01      	ldr	r3, [sp, #4]
 8016a16:	429e      	cmp	r6, r3
 8016a18:	d126      	bne.n	8016a68 <__hexnan+0x124>
 8016a1a:	2301      	movs	r3, #1
 8016a1c:	6033      	str	r3, [r6, #0]
 8016a1e:	2005      	movs	r0, #5
 8016a20:	e025      	b.n	8016a6e <__hexnan+0x12a>
 8016a22:	9b02      	ldr	r3, [sp, #8]
 8016a24:	3501      	adds	r5, #1
 8016a26:	3301      	adds	r3, #1
 8016a28:	9302      	str	r3, [sp, #8]
 8016a2a:	2d08      	cmp	r5, #8
 8016a2c:	dd06      	ble.n	8016a3c <__hexnan+0xf8>
 8016a2e:	9b01      	ldr	r3, [sp, #4]
 8016a30:	429c      	cmp	r4, r3
 8016a32:	d9ca      	bls.n	80169ca <__hexnan+0x86>
 8016a34:	2300      	movs	r3, #0
 8016a36:	2501      	movs	r5, #1
 8016a38:	3c04      	subs	r4, #4
 8016a3a:	6023      	str	r3, [r4, #0]
 8016a3c:	220f      	movs	r2, #15
 8016a3e:	6823      	ldr	r3, [r4, #0]
 8016a40:	4010      	ands	r0, r2
 8016a42:	011b      	lsls	r3, r3, #4
 8016a44:	4318      	orrs	r0, r3
 8016a46:	6020      	str	r0, [r4, #0]
 8016a48:	e7bf      	b.n	80169ca <__hexnan+0x86>
 8016a4a:	9b06      	ldr	r3, [sp, #24]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d0de      	beq.n	8016a0e <__hexnan+0xca>
 8016a50:	2120      	movs	r1, #32
 8016a52:	9a06      	ldr	r2, [sp, #24]
 8016a54:	9b04      	ldr	r3, [sp, #16]
 8016a56:	1a89      	subs	r1, r1, r2
 8016a58:	2201      	movs	r2, #1
 8016a5a:	4252      	negs	r2, r2
 8016a5c:	40ca      	lsrs	r2, r1
 8016a5e:	3b04      	subs	r3, #4
 8016a60:	6819      	ldr	r1, [r3, #0]
 8016a62:	400a      	ands	r2, r1
 8016a64:	601a      	str	r2, [r3, #0]
 8016a66:	e7d2      	b.n	8016a0e <__hexnan+0xca>
 8016a68:	3e04      	subs	r6, #4
 8016a6a:	e7d0      	b.n	8016a0e <__hexnan+0xca>
 8016a6c:	2004      	movs	r0, #4
 8016a6e:	b00b      	add	sp, #44	; 0x2c
 8016a70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016a72 <__localeconv_l>:
 8016a72:	30f0      	adds	r0, #240	; 0xf0
 8016a74:	4770      	bx	lr
	...

08016a78 <_localeconv_r>:
 8016a78:	4b03      	ldr	r3, [pc, #12]	; (8016a88 <_localeconv_r+0x10>)
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016a7e:	2800      	cmp	r0, #0
 8016a80:	d100      	bne.n	8016a84 <_localeconv_r+0xc>
 8016a82:	4802      	ldr	r0, [pc, #8]	; (8016a8c <_localeconv_r+0x14>)
 8016a84:	30f0      	adds	r0, #240	; 0xf0
 8016a86:	4770      	bx	lr
 8016a88:	200000c8 	.word	0x200000c8
 8016a8c:	200004f8 	.word	0x200004f8

08016a90 <__retarget_lock_acquire_recursive>:
 8016a90:	4770      	bx	lr

08016a92 <__retarget_lock_release_recursive>:
 8016a92:	4770      	bx	lr

08016a94 <memchr>:
 8016a94:	b2c9      	uxtb	r1, r1
 8016a96:	1882      	adds	r2, r0, r2
 8016a98:	4290      	cmp	r0, r2
 8016a9a:	d101      	bne.n	8016aa0 <memchr+0xc>
 8016a9c:	2000      	movs	r0, #0
 8016a9e:	4770      	bx	lr
 8016aa0:	7803      	ldrb	r3, [r0, #0]
 8016aa2:	428b      	cmp	r3, r1
 8016aa4:	d0fb      	beq.n	8016a9e <memchr+0xa>
 8016aa6:	3001      	adds	r0, #1
 8016aa8:	e7f6      	b.n	8016a98 <memchr+0x4>

08016aaa <memmove>:
 8016aaa:	b510      	push	{r4, lr}
 8016aac:	4288      	cmp	r0, r1
 8016aae:	d902      	bls.n	8016ab6 <memmove+0xc>
 8016ab0:	188b      	adds	r3, r1, r2
 8016ab2:	4298      	cmp	r0, r3
 8016ab4:	d303      	bcc.n	8016abe <memmove+0x14>
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	e007      	b.n	8016aca <memmove+0x20>
 8016aba:	5c8b      	ldrb	r3, [r1, r2]
 8016abc:	5483      	strb	r3, [r0, r2]
 8016abe:	3a01      	subs	r2, #1
 8016ac0:	d2fb      	bcs.n	8016aba <memmove+0x10>
 8016ac2:	bd10      	pop	{r4, pc}
 8016ac4:	5ccc      	ldrb	r4, [r1, r3]
 8016ac6:	54c4      	strb	r4, [r0, r3]
 8016ac8:	3301      	adds	r3, #1
 8016aca:	429a      	cmp	r2, r3
 8016acc:	d1fa      	bne.n	8016ac4 <memmove+0x1a>
 8016ace:	e7f8      	b.n	8016ac2 <memmove+0x18>

08016ad0 <_Balloc>:
 8016ad0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016ad2:	b570      	push	{r4, r5, r6, lr}
 8016ad4:	0004      	movs	r4, r0
 8016ad6:	000d      	movs	r5, r1
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d012      	beq.n	8016b02 <_Balloc+0x32>
 8016adc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016ade:	00ab      	lsls	r3, r5, #2
 8016ae0:	18d3      	adds	r3, r2, r3
 8016ae2:	6818      	ldr	r0, [r3, #0]
 8016ae4:	2800      	cmp	r0, #0
 8016ae6:	d115      	bne.n	8016b14 <_Balloc+0x44>
 8016ae8:	2101      	movs	r1, #1
 8016aea:	000e      	movs	r6, r1
 8016aec:	40ae      	lsls	r6, r5
 8016aee:	1d72      	adds	r2, r6, #5
 8016af0:	0092      	lsls	r2, r2, #2
 8016af2:	0020      	movs	r0, r4
 8016af4:	f7fb fe56 	bl	80127a4 <_calloc_r>
 8016af8:	2800      	cmp	r0, #0
 8016afa:	d009      	beq.n	8016b10 <_Balloc+0x40>
 8016afc:	6045      	str	r5, [r0, #4]
 8016afe:	6086      	str	r6, [r0, #8]
 8016b00:	e00a      	b.n	8016b18 <_Balloc+0x48>
 8016b02:	2221      	movs	r2, #33	; 0x21
 8016b04:	2104      	movs	r1, #4
 8016b06:	f7fb fe4d 	bl	80127a4 <_calloc_r>
 8016b0a:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016b0c:	2800      	cmp	r0, #0
 8016b0e:	d1e5      	bne.n	8016adc <_Balloc+0xc>
 8016b10:	2000      	movs	r0, #0
 8016b12:	bd70      	pop	{r4, r5, r6, pc}
 8016b14:	6802      	ldr	r2, [r0, #0]
 8016b16:	601a      	str	r2, [r3, #0]
 8016b18:	2300      	movs	r3, #0
 8016b1a:	6103      	str	r3, [r0, #16]
 8016b1c:	60c3      	str	r3, [r0, #12]
 8016b1e:	e7f8      	b.n	8016b12 <_Balloc+0x42>

08016b20 <_Bfree>:
 8016b20:	2900      	cmp	r1, #0
 8016b22:	d006      	beq.n	8016b32 <_Bfree+0x12>
 8016b24:	684b      	ldr	r3, [r1, #4]
 8016b26:	009a      	lsls	r2, r3, #2
 8016b28:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016b2a:	189b      	adds	r3, r3, r2
 8016b2c:	681a      	ldr	r2, [r3, #0]
 8016b2e:	600a      	str	r2, [r1, #0]
 8016b30:	6019      	str	r1, [r3, #0]
 8016b32:	4770      	bx	lr

08016b34 <__multadd>:
 8016b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016b36:	001e      	movs	r6, r3
 8016b38:	2314      	movs	r3, #20
 8016b3a:	469c      	mov	ip, r3
 8016b3c:	0007      	movs	r7, r0
 8016b3e:	000c      	movs	r4, r1
 8016b40:	2000      	movs	r0, #0
 8016b42:	690d      	ldr	r5, [r1, #16]
 8016b44:	448c      	add	ip, r1
 8016b46:	4663      	mov	r3, ip
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	3001      	adds	r0, #1
 8016b4c:	b299      	uxth	r1, r3
 8016b4e:	4663      	mov	r3, ip
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	4351      	muls	r1, r2
 8016b54:	0c1b      	lsrs	r3, r3, #16
 8016b56:	4353      	muls	r3, r2
 8016b58:	1989      	adds	r1, r1, r6
 8016b5a:	0c0e      	lsrs	r6, r1, #16
 8016b5c:	199b      	adds	r3, r3, r6
 8016b5e:	b289      	uxth	r1, r1
 8016b60:	0c1e      	lsrs	r6, r3, #16
 8016b62:	041b      	lsls	r3, r3, #16
 8016b64:	185b      	adds	r3, r3, r1
 8016b66:	4661      	mov	r1, ip
 8016b68:	c108      	stmia	r1!, {r3}
 8016b6a:	468c      	mov	ip, r1
 8016b6c:	4285      	cmp	r5, r0
 8016b6e:	dcea      	bgt.n	8016b46 <__multadd+0x12>
 8016b70:	2e00      	cmp	r6, #0
 8016b72:	d01b      	beq.n	8016bac <__multadd+0x78>
 8016b74:	68a3      	ldr	r3, [r4, #8]
 8016b76:	42ab      	cmp	r3, r5
 8016b78:	dc12      	bgt.n	8016ba0 <__multadd+0x6c>
 8016b7a:	6863      	ldr	r3, [r4, #4]
 8016b7c:	0038      	movs	r0, r7
 8016b7e:	1c59      	adds	r1, r3, #1
 8016b80:	f7ff ffa6 	bl	8016ad0 <_Balloc>
 8016b84:	0021      	movs	r1, r4
 8016b86:	6923      	ldr	r3, [r4, #16]
 8016b88:	9001      	str	r0, [sp, #4]
 8016b8a:	1c9a      	adds	r2, r3, #2
 8016b8c:	0092      	lsls	r2, r2, #2
 8016b8e:	310c      	adds	r1, #12
 8016b90:	300c      	adds	r0, #12
 8016b92:	f7fc f8b6 	bl	8012d02 <memcpy>
 8016b96:	0021      	movs	r1, r4
 8016b98:	0038      	movs	r0, r7
 8016b9a:	f7ff ffc1 	bl	8016b20 <_Bfree>
 8016b9e:	9c01      	ldr	r4, [sp, #4]
 8016ba0:	1d2b      	adds	r3, r5, #4
 8016ba2:	009b      	lsls	r3, r3, #2
 8016ba4:	18e3      	adds	r3, r4, r3
 8016ba6:	3501      	adds	r5, #1
 8016ba8:	605e      	str	r6, [r3, #4]
 8016baa:	6125      	str	r5, [r4, #16]
 8016bac:	0020      	movs	r0, r4
 8016bae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08016bb0 <__s2b>:
 8016bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016bb2:	0006      	movs	r6, r0
 8016bb4:	0018      	movs	r0, r3
 8016bb6:	000c      	movs	r4, r1
 8016bb8:	3008      	adds	r0, #8
 8016bba:	2109      	movs	r1, #9
 8016bbc:	9301      	str	r3, [sp, #4]
 8016bbe:	0015      	movs	r5, r2
 8016bc0:	f7e9 fb50 	bl	8000264 <__divsi3>
 8016bc4:	2301      	movs	r3, #1
 8016bc6:	2100      	movs	r1, #0
 8016bc8:	4283      	cmp	r3, r0
 8016bca:	db1f      	blt.n	8016c0c <__s2b+0x5c>
 8016bcc:	0030      	movs	r0, r6
 8016bce:	f7ff ff7f 	bl	8016ad0 <_Balloc>
 8016bd2:	9b08      	ldr	r3, [sp, #32]
 8016bd4:	6143      	str	r3, [r0, #20]
 8016bd6:	2301      	movs	r3, #1
 8016bd8:	6103      	str	r3, [r0, #16]
 8016bda:	2d09      	cmp	r5, #9
 8016bdc:	dd19      	ble.n	8016c12 <__s2b+0x62>
 8016bde:	0023      	movs	r3, r4
 8016be0:	3309      	adds	r3, #9
 8016be2:	001f      	movs	r7, r3
 8016be4:	9300      	str	r3, [sp, #0]
 8016be6:	1964      	adds	r4, r4, r5
 8016be8:	783b      	ldrb	r3, [r7, #0]
 8016bea:	0001      	movs	r1, r0
 8016bec:	3b30      	subs	r3, #48	; 0x30
 8016bee:	220a      	movs	r2, #10
 8016bf0:	0030      	movs	r0, r6
 8016bf2:	3701      	adds	r7, #1
 8016bf4:	f7ff ff9e 	bl	8016b34 <__multadd>
 8016bf8:	42a7      	cmp	r7, r4
 8016bfa:	d1f5      	bne.n	8016be8 <__s2b+0x38>
 8016bfc:	9b00      	ldr	r3, [sp, #0]
 8016bfe:	195c      	adds	r4, r3, r5
 8016c00:	3c08      	subs	r4, #8
 8016c02:	002f      	movs	r7, r5
 8016c04:	9b01      	ldr	r3, [sp, #4]
 8016c06:	429f      	cmp	r7, r3
 8016c08:	db06      	blt.n	8016c18 <__s2b+0x68>
 8016c0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016c0c:	005b      	lsls	r3, r3, #1
 8016c0e:	3101      	adds	r1, #1
 8016c10:	e7da      	b.n	8016bc8 <__s2b+0x18>
 8016c12:	340a      	adds	r4, #10
 8016c14:	2509      	movs	r5, #9
 8016c16:	e7f4      	b.n	8016c02 <__s2b+0x52>
 8016c18:	1b63      	subs	r3, r4, r5
 8016c1a:	5ddb      	ldrb	r3, [r3, r7]
 8016c1c:	0001      	movs	r1, r0
 8016c1e:	3b30      	subs	r3, #48	; 0x30
 8016c20:	220a      	movs	r2, #10
 8016c22:	0030      	movs	r0, r6
 8016c24:	f7ff ff86 	bl	8016b34 <__multadd>
 8016c28:	3701      	adds	r7, #1
 8016c2a:	e7eb      	b.n	8016c04 <__s2b+0x54>

08016c2c <__hi0bits>:
 8016c2c:	0003      	movs	r3, r0
 8016c2e:	0c02      	lsrs	r2, r0, #16
 8016c30:	2000      	movs	r0, #0
 8016c32:	4282      	cmp	r2, r0
 8016c34:	d101      	bne.n	8016c3a <__hi0bits+0xe>
 8016c36:	041b      	lsls	r3, r3, #16
 8016c38:	3010      	adds	r0, #16
 8016c3a:	0e1a      	lsrs	r2, r3, #24
 8016c3c:	d101      	bne.n	8016c42 <__hi0bits+0x16>
 8016c3e:	3008      	adds	r0, #8
 8016c40:	021b      	lsls	r3, r3, #8
 8016c42:	0f1a      	lsrs	r2, r3, #28
 8016c44:	d101      	bne.n	8016c4a <__hi0bits+0x1e>
 8016c46:	3004      	adds	r0, #4
 8016c48:	011b      	lsls	r3, r3, #4
 8016c4a:	0f9a      	lsrs	r2, r3, #30
 8016c4c:	d101      	bne.n	8016c52 <__hi0bits+0x26>
 8016c4e:	3002      	adds	r0, #2
 8016c50:	009b      	lsls	r3, r3, #2
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	db03      	blt.n	8016c5e <__hi0bits+0x32>
 8016c56:	3001      	adds	r0, #1
 8016c58:	005b      	lsls	r3, r3, #1
 8016c5a:	d400      	bmi.n	8016c5e <__hi0bits+0x32>
 8016c5c:	2020      	movs	r0, #32
 8016c5e:	4770      	bx	lr

08016c60 <__lo0bits>:
 8016c60:	2207      	movs	r2, #7
 8016c62:	6803      	ldr	r3, [r0, #0]
 8016c64:	b510      	push	{r4, lr}
 8016c66:	0001      	movs	r1, r0
 8016c68:	401a      	ands	r2, r3
 8016c6a:	d00d      	beq.n	8016c88 <__lo0bits+0x28>
 8016c6c:	2401      	movs	r4, #1
 8016c6e:	2000      	movs	r0, #0
 8016c70:	4223      	tst	r3, r4
 8016c72:	d105      	bne.n	8016c80 <__lo0bits+0x20>
 8016c74:	3002      	adds	r0, #2
 8016c76:	4203      	tst	r3, r0
 8016c78:	d003      	beq.n	8016c82 <__lo0bits+0x22>
 8016c7a:	40e3      	lsrs	r3, r4
 8016c7c:	0020      	movs	r0, r4
 8016c7e:	600b      	str	r3, [r1, #0]
 8016c80:	bd10      	pop	{r4, pc}
 8016c82:	089b      	lsrs	r3, r3, #2
 8016c84:	600b      	str	r3, [r1, #0]
 8016c86:	e7fb      	b.n	8016c80 <__lo0bits+0x20>
 8016c88:	b29c      	uxth	r4, r3
 8016c8a:	0010      	movs	r0, r2
 8016c8c:	2c00      	cmp	r4, #0
 8016c8e:	d101      	bne.n	8016c94 <__lo0bits+0x34>
 8016c90:	2010      	movs	r0, #16
 8016c92:	0c1b      	lsrs	r3, r3, #16
 8016c94:	b2da      	uxtb	r2, r3
 8016c96:	2a00      	cmp	r2, #0
 8016c98:	d101      	bne.n	8016c9e <__lo0bits+0x3e>
 8016c9a:	3008      	adds	r0, #8
 8016c9c:	0a1b      	lsrs	r3, r3, #8
 8016c9e:	071a      	lsls	r2, r3, #28
 8016ca0:	d101      	bne.n	8016ca6 <__lo0bits+0x46>
 8016ca2:	3004      	adds	r0, #4
 8016ca4:	091b      	lsrs	r3, r3, #4
 8016ca6:	079a      	lsls	r2, r3, #30
 8016ca8:	d101      	bne.n	8016cae <__lo0bits+0x4e>
 8016caa:	3002      	adds	r0, #2
 8016cac:	089b      	lsrs	r3, r3, #2
 8016cae:	07da      	lsls	r2, r3, #31
 8016cb0:	d4e8      	bmi.n	8016c84 <__lo0bits+0x24>
 8016cb2:	085b      	lsrs	r3, r3, #1
 8016cb4:	d001      	beq.n	8016cba <__lo0bits+0x5a>
 8016cb6:	3001      	adds	r0, #1
 8016cb8:	e7e4      	b.n	8016c84 <__lo0bits+0x24>
 8016cba:	2020      	movs	r0, #32
 8016cbc:	e7e0      	b.n	8016c80 <__lo0bits+0x20>

08016cbe <__i2b>:
 8016cbe:	b510      	push	{r4, lr}
 8016cc0:	000c      	movs	r4, r1
 8016cc2:	2101      	movs	r1, #1
 8016cc4:	f7ff ff04 	bl	8016ad0 <_Balloc>
 8016cc8:	2301      	movs	r3, #1
 8016cca:	6144      	str	r4, [r0, #20]
 8016ccc:	6103      	str	r3, [r0, #16]
 8016cce:	bd10      	pop	{r4, pc}

08016cd0 <__multiply>:
 8016cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cd2:	690b      	ldr	r3, [r1, #16]
 8016cd4:	0014      	movs	r4, r2
 8016cd6:	6912      	ldr	r2, [r2, #16]
 8016cd8:	b089      	sub	sp, #36	; 0x24
 8016cda:	000d      	movs	r5, r1
 8016cdc:	4293      	cmp	r3, r2
 8016cde:	da01      	bge.n	8016ce4 <__multiply+0x14>
 8016ce0:	0025      	movs	r5, r4
 8016ce2:	000c      	movs	r4, r1
 8016ce4:	692f      	ldr	r7, [r5, #16]
 8016ce6:	6926      	ldr	r6, [r4, #16]
 8016ce8:	6869      	ldr	r1, [r5, #4]
 8016cea:	19bb      	adds	r3, r7, r6
 8016cec:	9302      	str	r3, [sp, #8]
 8016cee:	68ab      	ldr	r3, [r5, #8]
 8016cf0:	19ba      	adds	r2, r7, r6
 8016cf2:	4293      	cmp	r3, r2
 8016cf4:	da00      	bge.n	8016cf8 <__multiply+0x28>
 8016cf6:	3101      	adds	r1, #1
 8016cf8:	f7ff feea 	bl	8016ad0 <_Balloc>
 8016cfc:	0002      	movs	r2, r0
 8016cfe:	19bb      	adds	r3, r7, r6
 8016d00:	3214      	adds	r2, #20
 8016d02:	009b      	lsls	r3, r3, #2
 8016d04:	18d3      	adds	r3, r2, r3
 8016d06:	469c      	mov	ip, r3
 8016d08:	2100      	movs	r1, #0
 8016d0a:	0013      	movs	r3, r2
 8016d0c:	9004      	str	r0, [sp, #16]
 8016d0e:	4563      	cmp	r3, ip
 8016d10:	d31d      	bcc.n	8016d4e <__multiply+0x7e>
 8016d12:	3514      	adds	r5, #20
 8016d14:	00bf      	lsls	r7, r7, #2
 8016d16:	19eb      	adds	r3, r5, r7
 8016d18:	3414      	adds	r4, #20
 8016d1a:	00b6      	lsls	r6, r6, #2
 8016d1c:	9305      	str	r3, [sp, #20]
 8016d1e:	19a3      	adds	r3, r4, r6
 8016d20:	9503      	str	r5, [sp, #12]
 8016d22:	9401      	str	r4, [sp, #4]
 8016d24:	9307      	str	r3, [sp, #28]
 8016d26:	9b07      	ldr	r3, [sp, #28]
 8016d28:	9901      	ldr	r1, [sp, #4]
 8016d2a:	4299      	cmp	r1, r3
 8016d2c:	d311      	bcc.n	8016d52 <__multiply+0x82>
 8016d2e:	9b02      	ldr	r3, [sp, #8]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	dd06      	ble.n	8016d42 <__multiply+0x72>
 8016d34:	2304      	movs	r3, #4
 8016d36:	425b      	negs	r3, r3
 8016d38:	449c      	add	ip, r3
 8016d3a:	4663      	mov	r3, ip
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d051      	beq.n	8016de6 <__multiply+0x116>
 8016d42:	9b04      	ldr	r3, [sp, #16]
 8016d44:	9a02      	ldr	r2, [sp, #8]
 8016d46:	0018      	movs	r0, r3
 8016d48:	611a      	str	r2, [r3, #16]
 8016d4a:	b009      	add	sp, #36	; 0x24
 8016d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d4e:	c302      	stmia	r3!, {r1}
 8016d50:	e7dd      	b.n	8016d0e <__multiply+0x3e>
 8016d52:	9b01      	ldr	r3, [sp, #4]
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	b298      	uxth	r0, r3
 8016d58:	2800      	cmp	r0, #0
 8016d5a:	d01c      	beq.n	8016d96 <__multiply+0xc6>
 8016d5c:	0015      	movs	r5, r2
 8016d5e:	2600      	movs	r6, #0
 8016d60:	9f03      	ldr	r7, [sp, #12]
 8016d62:	cf02      	ldmia	r7!, {r1}
 8016d64:	682c      	ldr	r4, [r5, #0]
 8016d66:	b28b      	uxth	r3, r1
 8016d68:	4343      	muls	r3, r0
 8016d6a:	0c09      	lsrs	r1, r1, #16
 8016d6c:	4341      	muls	r1, r0
 8016d6e:	b2a4      	uxth	r4, r4
 8016d70:	191b      	adds	r3, r3, r4
 8016d72:	199b      	adds	r3, r3, r6
 8016d74:	000e      	movs	r6, r1
 8016d76:	6829      	ldr	r1, [r5, #0]
 8016d78:	9506      	str	r5, [sp, #24]
 8016d7a:	0c09      	lsrs	r1, r1, #16
 8016d7c:	1871      	adds	r1, r6, r1
 8016d7e:	0c1e      	lsrs	r6, r3, #16
 8016d80:	1989      	adds	r1, r1, r6
 8016d82:	0c0e      	lsrs	r6, r1, #16
 8016d84:	b29b      	uxth	r3, r3
 8016d86:	0409      	lsls	r1, r1, #16
 8016d88:	430b      	orrs	r3, r1
 8016d8a:	c508      	stmia	r5!, {r3}
 8016d8c:	9b05      	ldr	r3, [sp, #20]
 8016d8e:	42bb      	cmp	r3, r7
 8016d90:	d8e7      	bhi.n	8016d62 <__multiply+0x92>
 8016d92:	9b06      	ldr	r3, [sp, #24]
 8016d94:	605e      	str	r6, [r3, #4]
 8016d96:	9b01      	ldr	r3, [sp, #4]
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	0c1d      	lsrs	r5, r3, #16
 8016d9c:	d01e      	beq.n	8016ddc <__multiply+0x10c>
 8016d9e:	0010      	movs	r0, r2
 8016da0:	2700      	movs	r7, #0
 8016da2:	6813      	ldr	r3, [r2, #0]
 8016da4:	9e03      	ldr	r6, [sp, #12]
 8016da6:	6831      	ldr	r1, [r6, #0]
 8016da8:	6804      	ldr	r4, [r0, #0]
 8016daa:	b289      	uxth	r1, r1
 8016dac:	4369      	muls	r1, r5
 8016dae:	0c24      	lsrs	r4, r4, #16
 8016db0:	1909      	adds	r1, r1, r4
 8016db2:	19c9      	adds	r1, r1, r7
 8016db4:	040f      	lsls	r7, r1, #16
 8016db6:	b29b      	uxth	r3, r3
 8016db8:	433b      	orrs	r3, r7
 8016dba:	6003      	str	r3, [r0, #0]
 8016dbc:	ce80      	ldmia	r6!, {r7}
 8016dbe:	6843      	ldr	r3, [r0, #4]
 8016dc0:	0c3f      	lsrs	r7, r7, #16
 8016dc2:	436f      	muls	r7, r5
 8016dc4:	b29b      	uxth	r3, r3
 8016dc6:	18fb      	adds	r3, r7, r3
 8016dc8:	0c09      	lsrs	r1, r1, #16
 8016dca:	185b      	adds	r3, r3, r1
 8016dcc:	9905      	ldr	r1, [sp, #20]
 8016dce:	9006      	str	r0, [sp, #24]
 8016dd0:	0c1f      	lsrs	r7, r3, #16
 8016dd2:	3004      	adds	r0, #4
 8016dd4:	42b1      	cmp	r1, r6
 8016dd6:	d8e6      	bhi.n	8016da6 <__multiply+0xd6>
 8016dd8:	9906      	ldr	r1, [sp, #24]
 8016dda:	604b      	str	r3, [r1, #4]
 8016ddc:	9b01      	ldr	r3, [sp, #4]
 8016dde:	3204      	adds	r2, #4
 8016de0:	3304      	adds	r3, #4
 8016de2:	9301      	str	r3, [sp, #4]
 8016de4:	e79f      	b.n	8016d26 <__multiply+0x56>
 8016de6:	9b02      	ldr	r3, [sp, #8]
 8016de8:	3b01      	subs	r3, #1
 8016dea:	9302      	str	r3, [sp, #8]
 8016dec:	e79f      	b.n	8016d2e <__multiply+0x5e>
	...

08016df0 <__pow5mult>:
 8016df0:	2303      	movs	r3, #3
 8016df2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016df4:	4013      	ands	r3, r2
 8016df6:	0006      	movs	r6, r0
 8016df8:	000f      	movs	r7, r1
 8016dfa:	0015      	movs	r5, r2
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d008      	beq.n	8016e12 <__pow5mult+0x22>
 8016e00:	491a      	ldr	r1, [pc, #104]	; (8016e6c <__pow5mult+0x7c>)
 8016e02:	3b01      	subs	r3, #1
 8016e04:	009a      	lsls	r2, r3, #2
 8016e06:	5852      	ldr	r2, [r2, r1]
 8016e08:	2300      	movs	r3, #0
 8016e0a:	0039      	movs	r1, r7
 8016e0c:	f7ff fe92 	bl	8016b34 <__multadd>
 8016e10:	0007      	movs	r7, r0
 8016e12:	10ad      	asrs	r5, r5, #2
 8016e14:	d027      	beq.n	8016e66 <__pow5mult+0x76>
 8016e16:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8016e18:	2c00      	cmp	r4, #0
 8016e1a:	d107      	bne.n	8016e2c <__pow5mult+0x3c>
 8016e1c:	4914      	ldr	r1, [pc, #80]	; (8016e70 <__pow5mult+0x80>)
 8016e1e:	0030      	movs	r0, r6
 8016e20:	f7ff ff4d 	bl	8016cbe <__i2b>
 8016e24:	2300      	movs	r3, #0
 8016e26:	0004      	movs	r4, r0
 8016e28:	64b0      	str	r0, [r6, #72]	; 0x48
 8016e2a:	6003      	str	r3, [r0, #0]
 8016e2c:	2301      	movs	r3, #1
 8016e2e:	421d      	tst	r5, r3
 8016e30:	d00a      	beq.n	8016e48 <__pow5mult+0x58>
 8016e32:	0039      	movs	r1, r7
 8016e34:	0022      	movs	r2, r4
 8016e36:	0030      	movs	r0, r6
 8016e38:	f7ff ff4a 	bl	8016cd0 <__multiply>
 8016e3c:	0039      	movs	r1, r7
 8016e3e:	9001      	str	r0, [sp, #4]
 8016e40:	0030      	movs	r0, r6
 8016e42:	f7ff fe6d 	bl	8016b20 <_Bfree>
 8016e46:	9f01      	ldr	r7, [sp, #4]
 8016e48:	106d      	asrs	r5, r5, #1
 8016e4a:	d00c      	beq.n	8016e66 <__pow5mult+0x76>
 8016e4c:	6820      	ldr	r0, [r4, #0]
 8016e4e:	2800      	cmp	r0, #0
 8016e50:	d107      	bne.n	8016e62 <__pow5mult+0x72>
 8016e52:	0022      	movs	r2, r4
 8016e54:	0021      	movs	r1, r4
 8016e56:	0030      	movs	r0, r6
 8016e58:	f7ff ff3a 	bl	8016cd0 <__multiply>
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	6020      	str	r0, [r4, #0]
 8016e60:	6003      	str	r3, [r0, #0]
 8016e62:	0004      	movs	r4, r0
 8016e64:	e7e2      	b.n	8016e2c <__pow5mult+0x3c>
 8016e66:	0038      	movs	r0, r7
 8016e68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016e6a:	46c0      	nop			; (mov r8, r8)
 8016e6c:	0801a650 	.word	0x0801a650
 8016e70:	00000271 	.word	0x00000271

08016e74 <__lshift>:
 8016e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e76:	000d      	movs	r5, r1
 8016e78:	0017      	movs	r7, r2
 8016e7a:	692b      	ldr	r3, [r5, #16]
 8016e7c:	1154      	asrs	r4, r2, #5
 8016e7e:	b085      	sub	sp, #20
 8016e80:	18e3      	adds	r3, r4, r3
 8016e82:	9301      	str	r3, [sp, #4]
 8016e84:	3301      	adds	r3, #1
 8016e86:	9300      	str	r3, [sp, #0]
 8016e88:	6849      	ldr	r1, [r1, #4]
 8016e8a:	68ab      	ldr	r3, [r5, #8]
 8016e8c:	9002      	str	r0, [sp, #8]
 8016e8e:	9a00      	ldr	r2, [sp, #0]
 8016e90:	4293      	cmp	r3, r2
 8016e92:	db35      	blt.n	8016f00 <__lshift+0x8c>
 8016e94:	9802      	ldr	r0, [sp, #8]
 8016e96:	f7ff fe1b 	bl	8016ad0 <_Balloc>
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	0002      	movs	r2, r0
 8016e9e:	0006      	movs	r6, r0
 8016ea0:	0019      	movs	r1, r3
 8016ea2:	3214      	adds	r2, #20
 8016ea4:	42a3      	cmp	r3, r4
 8016ea6:	db2e      	blt.n	8016f06 <__lshift+0x92>
 8016ea8:	43e3      	mvns	r3, r4
 8016eaa:	17db      	asrs	r3, r3, #31
 8016eac:	401c      	ands	r4, r3
 8016eae:	002b      	movs	r3, r5
 8016eb0:	00a4      	lsls	r4, r4, #2
 8016eb2:	1914      	adds	r4, r2, r4
 8016eb4:	692a      	ldr	r2, [r5, #16]
 8016eb6:	3314      	adds	r3, #20
 8016eb8:	0092      	lsls	r2, r2, #2
 8016eba:	189a      	adds	r2, r3, r2
 8016ebc:	4694      	mov	ip, r2
 8016ebe:	221f      	movs	r2, #31
 8016ec0:	4017      	ands	r7, r2
 8016ec2:	d024      	beq.n	8016f0e <__lshift+0x9a>
 8016ec4:	3201      	adds	r2, #1
 8016ec6:	1bd2      	subs	r2, r2, r7
 8016ec8:	9203      	str	r2, [sp, #12]
 8016eca:	2200      	movs	r2, #0
 8016ecc:	6819      	ldr	r1, [r3, #0]
 8016ece:	0020      	movs	r0, r4
 8016ed0:	40b9      	lsls	r1, r7
 8016ed2:	430a      	orrs	r2, r1
 8016ed4:	c404      	stmia	r4!, {r2}
 8016ed6:	cb04      	ldmia	r3!, {r2}
 8016ed8:	9903      	ldr	r1, [sp, #12]
 8016eda:	40ca      	lsrs	r2, r1
 8016edc:	459c      	cmp	ip, r3
 8016ede:	d8f5      	bhi.n	8016ecc <__lshift+0x58>
 8016ee0:	6042      	str	r2, [r0, #4]
 8016ee2:	2a00      	cmp	r2, #0
 8016ee4:	d002      	beq.n	8016eec <__lshift+0x78>
 8016ee6:	9b01      	ldr	r3, [sp, #4]
 8016ee8:	3302      	adds	r3, #2
 8016eea:	9300      	str	r3, [sp, #0]
 8016eec:	9b00      	ldr	r3, [sp, #0]
 8016eee:	9802      	ldr	r0, [sp, #8]
 8016ef0:	3b01      	subs	r3, #1
 8016ef2:	6133      	str	r3, [r6, #16]
 8016ef4:	0029      	movs	r1, r5
 8016ef6:	f7ff fe13 	bl	8016b20 <_Bfree>
 8016efa:	0030      	movs	r0, r6
 8016efc:	b005      	add	sp, #20
 8016efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f00:	3101      	adds	r1, #1
 8016f02:	005b      	lsls	r3, r3, #1
 8016f04:	e7c3      	b.n	8016e8e <__lshift+0x1a>
 8016f06:	0098      	lsls	r0, r3, #2
 8016f08:	5011      	str	r1, [r2, r0]
 8016f0a:	3301      	adds	r3, #1
 8016f0c:	e7ca      	b.n	8016ea4 <__lshift+0x30>
 8016f0e:	cb04      	ldmia	r3!, {r2}
 8016f10:	c404      	stmia	r4!, {r2}
 8016f12:	459c      	cmp	ip, r3
 8016f14:	d8fb      	bhi.n	8016f0e <__lshift+0x9a>
 8016f16:	e7e9      	b.n	8016eec <__lshift+0x78>

08016f18 <__mcmp>:
 8016f18:	690a      	ldr	r2, [r1, #16]
 8016f1a:	6903      	ldr	r3, [r0, #16]
 8016f1c:	b530      	push	{r4, r5, lr}
 8016f1e:	1a9b      	subs	r3, r3, r2
 8016f20:	d10d      	bne.n	8016f3e <__mcmp+0x26>
 8016f22:	0092      	lsls	r2, r2, #2
 8016f24:	3014      	adds	r0, #20
 8016f26:	3114      	adds	r1, #20
 8016f28:	1884      	adds	r4, r0, r2
 8016f2a:	1889      	adds	r1, r1, r2
 8016f2c:	3c04      	subs	r4, #4
 8016f2e:	3904      	subs	r1, #4
 8016f30:	6825      	ldr	r5, [r4, #0]
 8016f32:	680a      	ldr	r2, [r1, #0]
 8016f34:	4295      	cmp	r5, r2
 8016f36:	d004      	beq.n	8016f42 <__mcmp+0x2a>
 8016f38:	2301      	movs	r3, #1
 8016f3a:	4295      	cmp	r5, r2
 8016f3c:	d304      	bcc.n	8016f48 <__mcmp+0x30>
 8016f3e:	0018      	movs	r0, r3
 8016f40:	bd30      	pop	{r4, r5, pc}
 8016f42:	42a0      	cmp	r0, r4
 8016f44:	d3f2      	bcc.n	8016f2c <__mcmp+0x14>
 8016f46:	e7fa      	b.n	8016f3e <__mcmp+0x26>
 8016f48:	425b      	negs	r3, r3
 8016f4a:	e7f8      	b.n	8016f3e <__mcmp+0x26>

08016f4c <__mdiff>:
 8016f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f4e:	000d      	movs	r5, r1
 8016f50:	b085      	sub	sp, #20
 8016f52:	0007      	movs	r7, r0
 8016f54:	0011      	movs	r1, r2
 8016f56:	0028      	movs	r0, r5
 8016f58:	0014      	movs	r4, r2
 8016f5a:	f7ff ffdd 	bl	8016f18 <__mcmp>
 8016f5e:	1e06      	subs	r6, r0, #0
 8016f60:	d108      	bne.n	8016f74 <__mdiff+0x28>
 8016f62:	0001      	movs	r1, r0
 8016f64:	0038      	movs	r0, r7
 8016f66:	f7ff fdb3 	bl	8016ad0 <_Balloc>
 8016f6a:	2301      	movs	r3, #1
 8016f6c:	6146      	str	r6, [r0, #20]
 8016f6e:	6103      	str	r3, [r0, #16]
 8016f70:	b005      	add	sp, #20
 8016f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f74:	2301      	movs	r3, #1
 8016f76:	9301      	str	r3, [sp, #4]
 8016f78:	2800      	cmp	r0, #0
 8016f7a:	db04      	blt.n	8016f86 <__mdiff+0x3a>
 8016f7c:	0023      	movs	r3, r4
 8016f7e:	002c      	movs	r4, r5
 8016f80:	001d      	movs	r5, r3
 8016f82:	2300      	movs	r3, #0
 8016f84:	9301      	str	r3, [sp, #4]
 8016f86:	6861      	ldr	r1, [r4, #4]
 8016f88:	0038      	movs	r0, r7
 8016f8a:	f7ff fda1 	bl	8016ad0 <_Balloc>
 8016f8e:	002f      	movs	r7, r5
 8016f90:	2200      	movs	r2, #0
 8016f92:	9b01      	ldr	r3, [sp, #4]
 8016f94:	6926      	ldr	r6, [r4, #16]
 8016f96:	60c3      	str	r3, [r0, #12]
 8016f98:	3414      	adds	r4, #20
 8016f9a:	00b3      	lsls	r3, r6, #2
 8016f9c:	18e3      	adds	r3, r4, r3
 8016f9e:	9302      	str	r3, [sp, #8]
 8016fa0:	692b      	ldr	r3, [r5, #16]
 8016fa2:	3714      	adds	r7, #20
 8016fa4:	009b      	lsls	r3, r3, #2
 8016fa6:	18fb      	adds	r3, r7, r3
 8016fa8:	9303      	str	r3, [sp, #12]
 8016faa:	0003      	movs	r3, r0
 8016fac:	4694      	mov	ip, r2
 8016fae:	3314      	adds	r3, #20
 8016fb0:	cc20      	ldmia	r4!, {r5}
 8016fb2:	cf04      	ldmia	r7!, {r2}
 8016fb4:	9201      	str	r2, [sp, #4]
 8016fb6:	b2aa      	uxth	r2, r5
 8016fb8:	4494      	add	ip, r2
 8016fba:	466a      	mov	r2, sp
 8016fbc:	4661      	mov	r1, ip
 8016fbe:	8892      	ldrh	r2, [r2, #4]
 8016fc0:	0c2d      	lsrs	r5, r5, #16
 8016fc2:	1a8a      	subs	r2, r1, r2
 8016fc4:	9901      	ldr	r1, [sp, #4]
 8016fc6:	0c09      	lsrs	r1, r1, #16
 8016fc8:	1a69      	subs	r1, r5, r1
 8016fca:	1415      	asrs	r5, r2, #16
 8016fcc:	1949      	adds	r1, r1, r5
 8016fce:	140d      	asrs	r5, r1, #16
 8016fd0:	b292      	uxth	r2, r2
 8016fd2:	0409      	lsls	r1, r1, #16
 8016fd4:	430a      	orrs	r2, r1
 8016fd6:	601a      	str	r2, [r3, #0]
 8016fd8:	9a03      	ldr	r2, [sp, #12]
 8016fda:	46ac      	mov	ip, r5
 8016fdc:	3304      	adds	r3, #4
 8016fde:	42ba      	cmp	r2, r7
 8016fe0:	d8e6      	bhi.n	8016fb0 <__mdiff+0x64>
 8016fe2:	9902      	ldr	r1, [sp, #8]
 8016fe4:	001a      	movs	r2, r3
 8016fe6:	428c      	cmp	r4, r1
 8016fe8:	d305      	bcc.n	8016ff6 <__mdiff+0xaa>
 8016fea:	3a04      	subs	r2, #4
 8016fec:	6813      	ldr	r3, [r2, #0]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d00e      	beq.n	8017010 <__mdiff+0xc4>
 8016ff2:	6106      	str	r6, [r0, #16]
 8016ff4:	e7bc      	b.n	8016f70 <__mdiff+0x24>
 8016ff6:	cc04      	ldmia	r4!, {r2}
 8016ff8:	b291      	uxth	r1, r2
 8016ffa:	4461      	add	r1, ip
 8016ffc:	140d      	asrs	r5, r1, #16
 8016ffe:	0c12      	lsrs	r2, r2, #16
 8017000:	1952      	adds	r2, r2, r5
 8017002:	1415      	asrs	r5, r2, #16
 8017004:	b289      	uxth	r1, r1
 8017006:	0412      	lsls	r2, r2, #16
 8017008:	430a      	orrs	r2, r1
 801700a:	46ac      	mov	ip, r5
 801700c:	c304      	stmia	r3!, {r2}
 801700e:	e7e8      	b.n	8016fe2 <__mdiff+0x96>
 8017010:	3e01      	subs	r6, #1
 8017012:	e7ea      	b.n	8016fea <__mdiff+0x9e>

08017014 <__ulp>:
 8017014:	000b      	movs	r3, r1
 8017016:	4910      	ldr	r1, [pc, #64]	; (8017058 <__ulp+0x44>)
 8017018:	b510      	push	{r4, lr}
 801701a:	4019      	ands	r1, r3
 801701c:	4b0f      	ldr	r3, [pc, #60]	; (801705c <__ulp+0x48>)
 801701e:	18c9      	adds	r1, r1, r3
 8017020:	2900      	cmp	r1, #0
 8017022:	dd04      	ble.n	801702e <__ulp+0x1a>
 8017024:	2200      	movs	r2, #0
 8017026:	000b      	movs	r3, r1
 8017028:	0010      	movs	r0, r2
 801702a:	0019      	movs	r1, r3
 801702c:	bd10      	pop	{r4, pc}
 801702e:	4249      	negs	r1, r1
 8017030:	1509      	asrs	r1, r1, #20
 8017032:	2200      	movs	r2, #0
 8017034:	2300      	movs	r3, #0
 8017036:	2913      	cmp	r1, #19
 8017038:	dc04      	bgt.n	8017044 <__ulp+0x30>
 801703a:	2080      	movs	r0, #128	; 0x80
 801703c:	0300      	lsls	r0, r0, #12
 801703e:	4108      	asrs	r0, r1
 8017040:	0003      	movs	r3, r0
 8017042:	e7f1      	b.n	8017028 <__ulp+0x14>
 8017044:	3914      	subs	r1, #20
 8017046:	2001      	movs	r0, #1
 8017048:	291e      	cmp	r1, #30
 801704a:	dc02      	bgt.n	8017052 <__ulp+0x3e>
 801704c:	241f      	movs	r4, #31
 801704e:	1a61      	subs	r1, r4, r1
 8017050:	4088      	lsls	r0, r1
 8017052:	0002      	movs	r2, r0
 8017054:	e7e8      	b.n	8017028 <__ulp+0x14>
 8017056:	46c0      	nop			; (mov r8, r8)
 8017058:	7ff00000 	.word	0x7ff00000
 801705c:	fcc00000 	.word	0xfcc00000

08017060 <__b2d>:
 8017060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017062:	0006      	movs	r6, r0
 8017064:	6903      	ldr	r3, [r0, #16]
 8017066:	3614      	adds	r6, #20
 8017068:	009b      	lsls	r3, r3, #2
 801706a:	18f3      	adds	r3, r6, r3
 801706c:	1f1d      	subs	r5, r3, #4
 801706e:	682c      	ldr	r4, [r5, #0]
 8017070:	000f      	movs	r7, r1
 8017072:	0020      	movs	r0, r4
 8017074:	9301      	str	r3, [sp, #4]
 8017076:	f7ff fdd9 	bl	8016c2c <__hi0bits>
 801707a:	2320      	movs	r3, #32
 801707c:	1a1b      	subs	r3, r3, r0
 801707e:	603b      	str	r3, [r7, #0]
 8017080:	491c      	ldr	r1, [pc, #112]	; (80170f4 <__b2d+0x94>)
 8017082:	280a      	cmp	r0, #10
 8017084:	dc16      	bgt.n	80170b4 <__b2d+0x54>
 8017086:	230b      	movs	r3, #11
 8017088:	0027      	movs	r7, r4
 801708a:	1a1b      	subs	r3, r3, r0
 801708c:	40df      	lsrs	r7, r3
 801708e:	4339      	orrs	r1, r7
 8017090:	469c      	mov	ip, r3
 8017092:	000b      	movs	r3, r1
 8017094:	2100      	movs	r1, #0
 8017096:	42ae      	cmp	r6, r5
 8017098:	d202      	bcs.n	80170a0 <__b2d+0x40>
 801709a:	9901      	ldr	r1, [sp, #4]
 801709c:	3908      	subs	r1, #8
 801709e:	6809      	ldr	r1, [r1, #0]
 80170a0:	3015      	adds	r0, #21
 80170a2:	4084      	lsls	r4, r0
 80170a4:	4660      	mov	r0, ip
 80170a6:	40c1      	lsrs	r1, r0
 80170a8:	430c      	orrs	r4, r1
 80170aa:	0022      	movs	r2, r4
 80170ac:	0010      	movs	r0, r2
 80170ae:	0019      	movs	r1, r3
 80170b0:	b003      	add	sp, #12
 80170b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170b4:	2700      	movs	r7, #0
 80170b6:	42ae      	cmp	r6, r5
 80170b8:	d202      	bcs.n	80170c0 <__b2d+0x60>
 80170ba:	9d01      	ldr	r5, [sp, #4]
 80170bc:	3d08      	subs	r5, #8
 80170be:	682f      	ldr	r7, [r5, #0]
 80170c0:	380b      	subs	r0, #11
 80170c2:	4684      	mov	ip, r0
 80170c4:	1e03      	subs	r3, r0, #0
 80170c6:	d012      	beq.n	80170ee <__b2d+0x8e>
 80170c8:	409c      	lsls	r4, r3
 80170ca:	2020      	movs	r0, #32
 80170cc:	4321      	orrs	r1, r4
 80170ce:	003c      	movs	r4, r7
 80170d0:	1ac0      	subs	r0, r0, r3
 80170d2:	40c4      	lsrs	r4, r0
 80170d4:	4321      	orrs	r1, r4
 80170d6:	000b      	movs	r3, r1
 80170d8:	2100      	movs	r1, #0
 80170da:	42b5      	cmp	r5, r6
 80170dc:	d901      	bls.n	80170e2 <__b2d+0x82>
 80170de:	3d04      	subs	r5, #4
 80170e0:	6829      	ldr	r1, [r5, #0]
 80170e2:	4664      	mov	r4, ip
 80170e4:	40c1      	lsrs	r1, r0
 80170e6:	40a7      	lsls	r7, r4
 80170e8:	430f      	orrs	r7, r1
 80170ea:	003a      	movs	r2, r7
 80170ec:	e7de      	b.n	80170ac <__b2d+0x4c>
 80170ee:	4321      	orrs	r1, r4
 80170f0:	000b      	movs	r3, r1
 80170f2:	e7fa      	b.n	80170ea <__b2d+0x8a>
 80170f4:	3ff00000 	.word	0x3ff00000

080170f8 <__d2b>:
 80170f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80170fa:	001d      	movs	r5, r3
 80170fc:	2101      	movs	r1, #1
 80170fe:	0014      	movs	r4, r2
 8017100:	9f08      	ldr	r7, [sp, #32]
 8017102:	f7ff fce5 	bl	8016ad0 <_Balloc>
 8017106:	032b      	lsls	r3, r5, #12
 8017108:	006d      	lsls	r5, r5, #1
 801710a:	0006      	movs	r6, r0
 801710c:	0b1b      	lsrs	r3, r3, #12
 801710e:	0d6d      	lsrs	r5, r5, #21
 8017110:	d124      	bne.n	801715c <__d2b+0x64>
 8017112:	9301      	str	r3, [sp, #4]
 8017114:	2c00      	cmp	r4, #0
 8017116:	d027      	beq.n	8017168 <__d2b+0x70>
 8017118:	4668      	mov	r0, sp
 801711a:	9400      	str	r4, [sp, #0]
 801711c:	f7ff fda0 	bl	8016c60 <__lo0bits>
 8017120:	9c00      	ldr	r4, [sp, #0]
 8017122:	2800      	cmp	r0, #0
 8017124:	d01e      	beq.n	8017164 <__d2b+0x6c>
 8017126:	9b01      	ldr	r3, [sp, #4]
 8017128:	2120      	movs	r1, #32
 801712a:	001a      	movs	r2, r3
 801712c:	1a09      	subs	r1, r1, r0
 801712e:	408a      	lsls	r2, r1
 8017130:	40c3      	lsrs	r3, r0
 8017132:	4322      	orrs	r2, r4
 8017134:	6172      	str	r2, [r6, #20]
 8017136:	9301      	str	r3, [sp, #4]
 8017138:	9c01      	ldr	r4, [sp, #4]
 801713a:	61b4      	str	r4, [r6, #24]
 801713c:	1e63      	subs	r3, r4, #1
 801713e:	419c      	sbcs	r4, r3
 8017140:	3401      	adds	r4, #1
 8017142:	6134      	str	r4, [r6, #16]
 8017144:	2d00      	cmp	r5, #0
 8017146:	d018      	beq.n	801717a <__d2b+0x82>
 8017148:	4b12      	ldr	r3, [pc, #72]	; (8017194 <__d2b+0x9c>)
 801714a:	18ed      	adds	r5, r5, r3
 801714c:	2335      	movs	r3, #53	; 0x35
 801714e:	182d      	adds	r5, r5, r0
 8017150:	603d      	str	r5, [r7, #0]
 8017152:	1a18      	subs	r0, r3, r0
 8017154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017156:	6018      	str	r0, [r3, #0]
 8017158:	0030      	movs	r0, r6
 801715a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801715c:	2280      	movs	r2, #128	; 0x80
 801715e:	0352      	lsls	r2, r2, #13
 8017160:	4313      	orrs	r3, r2
 8017162:	e7d6      	b.n	8017112 <__d2b+0x1a>
 8017164:	6174      	str	r4, [r6, #20]
 8017166:	e7e7      	b.n	8017138 <__d2b+0x40>
 8017168:	a801      	add	r0, sp, #4
 801716a:	f7ff fd79 	bl	8016c60 <__lo0bits>
 801716e:	2401      	movs	r4, #1
 8017170:	9b01      	ldr	r3, [sp, #4]
 8017172:	6134      	str	r4, [r6, #16]
 8017174:	6173      	str	r3, [r6, #20]
 8017176:	3020      	adds	r0, #32
 8017178:	e7e4      	b.n	8017144 <__d2b+0x4c>
 801717a:	4b07      	ldr	r3, [pc, #28]	; (8017198 <__d2b+0xa0>)
 801717c:	18c0      	adds	r0, r0, r3
 801717e:	4b07      	ldr	r3, [pc, #28]	; (801719c <__d2b+0xa4>)
 8017180:	6038      	str	r0, [r7, #0]
 8017182:	18e3      	adds	r3, r4, r3
 8017184:	009b      	lsls	r3, r3, #2
 8017186:	18f3      	adds	r3, r6, r3
 8017188:	6958      	ldr	r0, [r3, #20]
 801718a:	f7ff fd4f 	bl	8016c2c <__hi0bits>
 801718e:	0164      	lsls	r4, r4, #5
 8017190:	1a20      	subs	r0, r4, r0
 8017192:	e7df      	b.n	8017154 <__d2b+0x5c>
 8017194:	fffffbcd 	.word	0xfffffbcd
 8017198:	fffffbce 	.word	0xfffffbce
 801719c:	3fffffff 	.word	0x3fffffff

080171a0 <__ratio>:
 80171a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171a2:	b085      	sub	sp, #20
 80171a4:	000f      	movs	r7, r1
 80171a6:	a902      	add	r1, sp, #8
 80171a8:	0006      	movs	r6, r0
 80171aa:	f7ff ff59 	bl	8017060 <__b2d>
 80171ae:	0004      	movs	r4, r0
 80171b0:	000d      	movs	r5, r1
 80171b2:	0038      	movs	r0, r7
 80171b4:	a903      	add	r1, sp, #12
 80171b6:	9400      	str	r4, [sp, #0]
 80171b8:	9501      	str	r5, [sp, #4]
 80171ba:	f7ff ff51 	bl	8017060 <__b2d>
 80171be:	6936      	ldr	r6, [r6, #16]
 80171c0:	693f      	ldr	r7, [r7, #16]
 80171c2:	0002      	movs	r2, r0
 80171c4:	1bf7      	subs	r7, r6, r7
 80171c6:	017e      	lsls	r6, r7, #5
 80171c8:	46b4      	mov	ip, r6
 80171ca:	9f03      	ldr	r7, [sp, #12]
 80171cc:	9e02      	ldr	r6, [sp, #8]
 80171ce:	000b      	movs	r3, r1
 80171d0:	1bf6      	subs	r6, r6, r7
 80171d2:	4466      	add	r6, ip
 80171d4:	0537      	lsls	r7, r6, #20
 80171d6:	2e00      	cmp	r6, #0
 80171d8:	dd07      	ble.n	80171ea <__ratio+0x4a>
 80171da:	1979      	adds	r1, r7, r5
 80171dc:	9101      	str	r1, [sp, #4]
 80171de:	9800      	ldr	r0, [sp, #0]
 80171e0:	9901      	ldr	r1, [sp, #4]
 80171e2:	f7ea fa1d 	bl	8001620 <__aeabi_ddiv>
 80171e6:	b005      	add	sp, #20
 80171e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171ea:	1bcb      	subs	r3, r1, r7
 80171ec:	e7f7      	b.n	80171de <__ratio+0x3e>

080171ee <__copybits>:
 80171ee:	0013      	movs	r3, r2
 80171f0:	3901      	subs	r1, #1
 80171f2:	b510      	push	{r4, lr}
 80171f4:	1149      	asrs	r1, r1, #5
 80171f6:	6912      	ldr	r2, [r2, #16]
 80171f8:	3101      	adds	r1, #1
 80171fa:	0089      	lsls	r1, r1, #2
 80171fc:	3314      	adds	r3, #20
 80171fe:	0092      	lsls	r2, r2, #2
 8017200:	1841      	adds	r1, r0, r1
 8017202:	189a      	adds	r2, r3, r2
 8017204:	429a      	cmp	r2, r3
 8017206:	d803      	bhi.n	8017210 <__copybits+0x22>
 8017208:	2300      	movs	r3, #0
 801720a:	4281      	cmp	r1, r0
 801720c:	d803      	bhi.n	8017216 <__copybits+0x28>
 801720e:	bd10      	pop	{r4, pc}
 8017210:	cb10      	ldmia	r3!, {r4}
 8017212:	c010      	stmia	r0!, {r4}
 8017214:	e7f6      	b.n	8017204 <__copybits+0x16>
 8017216:	c008      	stmia	r0!, {r3}
 8017218:	e7f7      	b.n	801720a <__copybits+0x1c>

0801721a <__any_on>:
 801721a:	0002      	movs	r2, r0
 801721c:	6900      	ldr	r0, [r0, #16]
 801721e:	b510      	push	{r4, lr}
 8017220:	3214      	adds	r2, #20
 8017222:	114b      	asrs	r3, r1, #5
 8017224:	4298      	cmp	r0, r3
 8017226:	db12      	blt.n	801724e <__any_on+0x34>
 8017228:	dd0b      	ble.n	8017242 <__any_on+0x28>
 801722a:	201f      	movs	r0, #31
 801722c:	4001      	ands	r1, r0
 801722e:	d008      	beq.n	8017242 <__any_on+0x28>
 8017230:	0098      	lsls	r0, r3, #2
 8017232:	5884      	ldr	r4, [r0, r2]
 8017234:	0020      	movs	r0, r4
 8017236:	40c8      	lsrs	r0, r1
 8017238:	4088      	lsls	r0, r1
 801723a:	0001      	movs	r1, r0
 801723c:	2001      	movs	r0, #1
 801723e:	428c      	cmp	r4, r1
 8017240:	d104      	bne.n	801724c <__any_on+0x32>
 8017242:	009b      	lsls	r3, r3, #2
 8017244:	18d3      	adds	r3, r2, r3
 8017246:	4293      	cmp	r3, r2
 8017248:	d803      	bhi.n	8017252 <__any_on+0x38>
 801724a:	2000      	movs	r0, #0
 801724c:	bd10      	pop	{r4, pc}
 801724e:	0003      	movs	r3, r0
 8017250:	e7f7      	b.n	8017242 <__any_on+0x28>
 8017252:	3b04      	subs	r3, #4
 8017254:	6819      	ldr	r1, [r3, #0]
 8017256:	2900      	cmp	r1, #0
 8017258:	d0f5      	beq.n	8017246 <__any_on+0x2c>
 801725a:	2001      	movs	r0, #1
 801725c:	e7f6      	b.n	801724c <__any_on+0x32>
	...

08017260 <frexp>:
 8017260:	b570      	push	{r4, r5, r6, lr}
 8017262:	0014      	movs	r4, r2
 8017264:	2500      	movs	r5, #0
 8017266:	6025      	str	r5, [r4, #0]
 8017268:	4d10      	ldr	r5, [pc, #64]	; (80172ac <frexp+0x4c>)
 801726a:	004b      	lsls	r3, r1, #1
 801726c:	000a      	movs	r2, r1
 801726e:	085b      	lsrs	r3, r3, #1
 8017270:	42ab      	cmp	r3, r5
 8017272:	dc1a      	bgt.n	80172aa <frexp+0x4a>
 8017274:	001d      	movs	r5, r3
 8017276:	4305      	orrs	r5, r0
 8017278:	d017      	beq.n	80172aa <frexp+0x4a>
 801727a:	4d0d      	ldr	r5, [pc, #52]	; (80172b0 <frexp+0x50>)
 801727c:	42ab      	cmp	r3, r5
 801727e:	dc09      	bgt.n	8017294 <frexp+0x34>
 8017280:	2200      	movs	r2, #0
 8017282:	4b0c      	ldr	r3, [pc, #48]	; (80172b4 <frexp+0x54>)
 8017284:	f7ea fdd6 	bl	8001e34 <__aeabi_dmul>
 8017288:	2536      	movs	r5, #54	; 0x36
 801728a:	000a      	movs	r2, r1
 801728c:	004b      	lsls	r3, r1, #1
 801728e:	426d      	negs	r5, r5
 8017290:	085b      	lsrs	r3, r3, #1
 8017292:	6025      	str	r5, [r4, #0]
 8017294:	4d08      	ldr	r5, [pc, #32]	; (80172b8 <frexp+0x58>)
 8017296:	151b      	asrs	r3, r3, #20
 8017298:	195b      	adds	r3, r3, r5
 801729a:	6825      	ldr	r5, [r4, #0]
 801729c:	18eb      	adds	r3, r5, r3
 801729e:	6023      	str	r3, [r4, #0]
 80172a0:	4b06      	ldr	r3, [pc, #24]	; (80172bc <frexp+0x5c>)
 80172a2:	401a      	ands	r2, r3
 80172a4:	4b06      	ldr	r3, [pc, #24]	; (80172c0 <frexp+0x60>)
 80172a6:	4313      	orrs	r3, r2
 80172a8:	0019      	movs	r1, r3
 80172aa:	bd70      	pop	{r4, r5, r6, pc}
 80172ac:	7fefffff 	.word	0x7fefffff
 80172b0:	000fffff 	.word	0x000fffff
 80172b4:	43500000 	.word	0x43500000
 80172b8:	fffffc02 	.word	0xfffffc02
 80172bc:	800fffff 	.word	0x800fffff
 80172c0:	3fe00000 	.word	0x3fe00000

080172c4 <__ssprint_r>:
 80172c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172c6:	6893      	ldr	r3, [r2, #8]
 80172c8:	b087      	sub	sp, #28
 80172ca:	9002      	str	r0, [sp, #8]
 80172cc:	000c      	movs	r4, r1
 80172ce:	0016      	movs	r6, r2
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d063      	beq.n	801739c <__ssprint_r+0xd8>
 80172d4:	6813      	ldr	r3, [r2, #0]
 80172d6:	9303      	str	r3, [sp, #12]
 80172d8:	2300      	movs	r3, #0
 80172da:	001f      	movs	r7, r3
 80172dc:	9305      	str	r3, [sp, #20]
 80172de:	2f00      	cmp	r7, #0
 80172e0:	d02e      	beq.n	8017340 <__ssprint_r+0x7c>
 80172e2:	68a5      	ldr	r5, [r4, #8]
 80172e4:	42af      	cmp	r7, r5
 80172e6:	d347      	bcc.n	8017378 <__ssprint_r+0xb4>
 80172e8:	2390      	movs	r3, #144	; 0x90
 80172ea:	89a2      	ldrh	r2, [r4, #12]
 80172ec:	00db      	lsls	r3, r3, #3
 80172ee:	421a      	tst	r2, r3
 80172f0:	d042      	beq.n	8017378 <__ssprint_r+0xb4>
 80172f2:	2003      	movs	r0, #3
 80172f4:	6921      	ldr	r1, [r4, #16]
 80172f6:	6823      	ldr	r3, [r4, #0]
 80172f8:	1a5b      	subs	r3, r3, r1
 80172fa:	9304      	str	r3, [sp, #16]
 80172fc:	6963      	ldr	r3, [r4, #20]
 80172fe:	4343      	muls	r3, r0
 8017300:	0fd8      	lsrs	r0, r3, #31
 8017302:	18c3      	adds	r3, r0, r3
 8017304:	105b      	asrs	r3, r3, #1
 8017306:	9301      	str	r3, [sp, #4]
 8017308:	9b04      	ldr	r3, [sp, #16]
 801730a:	9801      	ldr	r0, [sp, #4]
 801730c:	3301      	adds	r3, #1
 801730e:	19db      	adds	r3, r3, r7
 8017310:	4283      	cmp	r3, r0
 8017312:	d900      	bls.n	8017316 <__ssprint_r+0x52>
 8017314:	9301      	str	r3, [sp, #4]
 8017316:	0553      	lsls	r3, r2, #21
 8017318:	d544      	bpl.n	80173a4 <__ssprint_r+0xe0>
 801731a:	9901      	ldr	r1, [sp, #4]
 801731c:	9802      	ldr	r0, [sp, #8]
 801731e:	f7fb fab7 	bl	8012890 <_malloc_r>
 8017322:	1e05      	subs	r5, r0, #0
 8017324:	d114      	bne.n	8017350 <__ssprint_r+0x8c>
 8017326:	230c      	movs	r3, #12
 8017328:	9a02      	ldr	r2, [sp, #8]
 801732a:	2001      	movs	r0, #1
 801732c:	6013      	str	r3, [r2, #0]
 801732e:	2340      	movs	r3, #64	; 0x40
 8017330:	89a2      	ldrh	r2, [r4, #12]
 8017332:	4240      	negs	r0, r0
 8017334:	4313      	orrs	r3, r2
 8017336:	81a3      	strh	r3, [r4, #12]
 8017338:	2300      	movs	r3, #0
 801733a:	60b3      	str	r3, [r6, #8]
 801733c:	6073      	str	r3, [r6, #4]
 801733e:	e02f      	b.n	80173a0 <__ssprint_r+0xdc>
 8017340:	9b03      	ldr	r3, [sp, #12]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	9305      	str	r3, [sp, #20]
 8017346:	9b03      	ldr	r3, [sp, #12]
 8017348:	685f      	ldr	r7, [r3, #4]
 801734a:	3308      	adds	r3, #8
 801734c:	9303      	str	r3, [sp, #12]
 801734e:	e7c6      	b.n	80172de <__ssprint_r+0x1a>
 8017350:	9a04      	ldr	r2, [sp, #16]
 8017352:	6921      	ldr	r1, [r4, #16]
 8017354:	f7fb fcd5 	bl	8012d02 <memcpy>
 8017358:	89a3      	ldrh	r3, [r4, #12]
 801735a:	4a18      	ldr	r2, [pc, #96]	; (80173bc <__ssprint_r+0xf8>)
 801735c:	401a      	ands	r2, r3
 801735e:	2380      	movs	r3, #128	; 0x80
 8017360:	4313      	orrs	r3, r2
 8017362:	81a3      	strh	r3, [r4, #12]
 8017364:	9b04      	ldr	r3, [sp, #16]
 8017366:	6125      	str	r5, [r4, #16]
 8017368:	18ed      	adds	r5, r5, r3
 801736a:	6025      	str	r5, [r4, #0]
 801736c:	003d      	movs	r5, r7
 801736e:	9b01      	ldr	r3, [sp, #4]
 8017370:	9a04      	ldr	r2, [sp, #16]
 8017372:	6163      	str	r3, [r4, #20]
 8017374:	1a9b      	subs	r3, r3, r2
 8017376:	60a3      	str	r3, [r4, #8]
 8017378:	42bd      	cmp	r5, r7
 801737a:	d900      	bls.n	801737e <__ssprint_r+0xba>
 801737c:	003d      	movs	r5, r7
 801737e:	002a      	movs	r2, r5
 8017380:	9905      	ldr	r1, [sp, #20]
 8017382:	6820      	ldr	r0, [r4, #0]
 8017384:	f7ff fb91 	bl	8016aaa <memmove>
 8017388:	68a3      	ldr	r3, [r4, #8]
 801738a:	1b5b      	subs	r3, r3, r5
 801738c:	60a3      	str	r3, [r4, #8]
 801738e:	6823      	ldr	r3, [r4, #0]
 8017390:	195d      	adds	r5, r3, r5
 8017392:	68b3      	ldr	r3, [r6, #8]
 8017394:	6025      	str	r5, [r4, #0]
 8017396:	1bdb      	subs	r3, r3, r7
 8017398:	60b3      	str	r3, [r6, #8]
 801739a:	d1d1      	bne.n	8017340 <__ssprint_r+0x7c>
 801739c:	2000      	movs	r0, #0
 801739e:	6070      	str	r0, [r6, #4]
 80173a0:	b007      	add	sp, #28
 80173a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173a4:	9a01      	ldr	r2, [sp, #4]
 80173a6:	9802      	ldr	r0, [sp, #8]
 80173a8:	f7fb fcf0 	bl	8012d8c <_realloc_r>
 80173ac:	1e05      	subs	r5, r0, #0
 80173ae:	d1d9      	bne.n	8017364 <__ssprint_r+0xa0>
 80173b0:	6921      	ldr	r1, [r4, #16]
 80173b2:	9802      	ldr	r0, [sp, #8]
 80173b4:	f7fe ff78 	bl	80162a8 <_free_r>
 80173b8:	e7b5      	b.n	8017326 <__ssprint_r+0x62>
 80173ba:	46c0      	nop			; (mov r8, r8)
 80173bc:	fffffb7f 	.word	0xfffffb7f

080173c0 <__register_exitproc>:
 80173c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80173c2:	4d29      	ldr	r5, [pc, #164]	; (8017468 <__register_exitproc+0xa8>)
 80173c4:	0006      	movs	r6, r0
 80173c6:	6828      	ldr	r0, [r5, #0]
 80173c8:	9301      	str	r3, [sp, #4]
 80173ca:	9100      	str	r1, [sp, #0]
 80173cc:	0017      	movs	r7, r2
 80173ce:	f7ff fb5f 	bl	8016a90 <__retarget_lock_acquire_recursive>
 80173d2:	4b26      	ldr	r3, [pc, #152]	; (801746c <__register_exitproc+0xac>)
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	001c      	movs	r4, r3
 80173d8:	34fc      	adds	r4, #252	; 0xfc
 80173da:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80173dc:	2800      	cmp	r0, #0
 80173de:	d103      	bne.n	80173e8 <__register_exitproc+0x28>
 80173e0:	334d      	adds	r3, #77	; 0x4d
 80173e2:	33ff      	adds	r3, #255	; 0xff
 80173e4:	0018      	movs	r0, r3
 80173e6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80173e8:	6843      	ldr	r3, [r0, #4]
 80173ea:	2b1f      	cmp	r3, #31
 80173ec:	dd18      	ble.n	8017420 <__register_exitproc+0x60>
 80173ee:	4b20      	ldr	r3, [pc, #128]	; (8017470 <__register_exitproc+0xb0>)
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d105      	bne.n	8017400 <__register_exitproc+0x40>
 80173f4:	6828      	ldr	r0, [r5, #0]
 80173f6:	f7ff fb4c 	bl	8016a92 <__retarget_lock_release_recursive>
 80173fa:	2001      	movs	r0, #1
 80173fc:	4240      	negs	r0, r0
 80173fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017400:	20c8      	movs	r0, #200	; 0xc8
 8017402:	0040      	lsls	r0, r0, #1
 8017404:	f7fb fa30 	bl	8012868 <malloc>
 8017408:	2800      	cmp	r0, #0
 801740a:	d0f3      	beq.n	80173f4 <__register_exitproc+0x34>
 801740c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801740e:	2300      	movs	r3, #0
 8017410:	6002      	str	r2, [r0, #0]
 8017412:	22c4      	movs	r2, #196	; 0xc4
 8017414:	0052      	lsls	r2, r2, #1
 8017416:	6043      	str	r3, [r0, #4]
 8017418:	64e0      	str	r0, [r4, #76]	; 0x4c
 801741a:	5083      	str	r3, [r0, r2]
 801741c:	3204      	adds	r2, #4
 801741e:	5083      	str	r3, [r0, r2]
 8017420:	6843      	ldr	r3, [r0, #4]
 8017422:	2e00      	cmp	r6, #0
 8017424:	d014      	beq.n	8017450 <__register_exitproc+0x90>
 8017426:	009a      	lsls	r2, r3, #2
 8017428:	1882      	adds	r2, r0, r2
 801742a:	0011      	movs	r1, r2
 801742c:	3188      	adds	r1, #136	; 0x88
 801742e:	600f      	str	r7, [r1, #0]
 8017430:	2101      	movs	r1, #1
 8017432:	0004      	movs	r4, r0
 8017434:	4099      	lsls	r1, r3
 8017436:	3485      	adds	r4, #133	; 0x85
 8017438:	34ff      	adds	r4, #255	; 0xff
 801743a:	6865      	ldr	r5, [r4, #4]
 801743c:	32fc      	adds	r2, #252	; 0xfc
 801743e:	430d      	orrs	r5, r1
 8017440:	6065      	str	r5, [r4, #4]
 8017442:	9d01      	ldr	r5, [sp, #4]
 8017444:	60d5      	str	r5, [r2, #12]
 8017446:	2e02      	cmp	r6, #2
 8017448:	d102      	bne.n	8017450 <__register_exitproc+0x90>
 801744a:	68a2      	ldr	r2, [r4, #8]
 801744c:	4311      	orrs	r1, r2
 801744e:	60a1      	str	r1, [r4, #8]
 8017450:	1c5a      	adds	r2, r3, #1
 8017452:	6042      	str	r2, [r0, #4]
 8017454:	3302      	adds	r3, #2
 8017456:	9a00      	ldr	r2, [sp, #0]
 8017458:	009b      	lsls	r3, r3, #2
 801745a:	501a      	str	r2, [r3, r0]
 801745c:	4b02      	ldr	r3, [pc, #8]	; (8017468 <__register_exitproc+0xa8>)
 801745e:	6818      	ldr	r0, [r3, #0]
 8017460:	f7ff fb17 	bl	8016a92 <__retarget_lock_release_recursive>
 8017464:	2000      	movs	r0, #0
 8017466:	e7ca      	b.n	80173fe <__register_exitproc+0x3e>
 8017468:	20000a74 	.word	0x20000a74
 801746c:	0801a394 	.word	0x0801a394
 8017470:	08012869 	.word	0x08012869

08017474 <_sbrk>:
 8017474:	4b05      	ldr	r3, [pc, #20]	; (801748c <_sbrk+0x18>)
 8017476:	0002      	movs	r2, r0
 8017478:	6819      	ldr	r1, [r3, #0]
 801747a:	2900      	cmp	r1, #0
 801747c:	d101      	bne.n	8017482 <_sbrk+0xe>
 801747e:	4904      	ldr	r1, [pc, #16]	; (8017490 <_sbrk+0x1c>)
 8017480:	6019      	str	r1, [r3, #0]
 8017482:	6818      	ldr	r0, [r3, #0]
 8017484:	1882      	adds	r2, r0, r2
 8017486:	601a      	str	r2, [r3, #0]
 8017488:	4770      	bx	lr
 801748a:	46c0      	nop			; (mov r8, r8)
 801748c:	20006e20 	.word	0x20006e20
 8017490:	200073d8 	.word	0x200073d8

08017494 <_init>:
 8017494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017496:	46c0      	nop			; (mov r8, r8)
 8017498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801749a:	bc08      	pop	{r3}
 801749c:	469e      	mov	lr, r3
 801749e:	4770      	bx	lr

080174a0 <_fini>:
 80174a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174a2:	46c0      	nop			; (mov r8, r8)
 80174a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80174a6:	bc08      	pop	{r3}
 80174a8:	469e      	mov	lr, r3
 80174aa:	4770      	bx	lr
