
H1ARx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001738c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031bc  08017448  08017448  00027448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a604  0801a604  00030a78  2**0
                  CONTENTS
  4 .ARM          00000008  0801a604  0801a604  0002a604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a60c  0801a60c  00030a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a60c  0801a60c  0002a60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a614  0801a614  0002a614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    00000008  20000000  0801a618  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000a70  20000008  0801a620  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006960  20000a78  0801b090  00030a78  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200073d8  0801b090  000373d8  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030a78  2**0
                  CONTENTS, READONLY
 13 .debug_info   000509a1  00000000  00000000  00030aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00009485  00000000  00000000  00081441  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001affd  00000000  00000000  0008a8c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001a28  00000000  00000000  000a58c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002e50  00000000  00000000  000a72f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001712b  00000000  00000000  000aa140  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a2e6  00000000  00000000  000c126b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000cb551  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006260  00000000  00000000  000cb5cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a78 	.word	0x20000a78
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08017430 	.word	0x08017430

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a7c 	.word	0x20000a7c
 8000100:	08017430 	.word	0x08017430

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	08017b40 	.word	0x08017b40
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	08017b80 	.word	0x08017b80
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	08017bc0 	.word	0x08017bc0
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d26:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <LoadROtopology+0x8c>)
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d28:	4a22      	ldr	r2, [pc, #136]	; (8002db4 <LoadROtopology+0x90>)
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d2a:	881b      	ldrh	r3, [r3, #0]
BOS_Status LoadROtopology(void){
 8002d2c:	b083      	sub	sp, #12
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d2e:	b29b      	uxth	r3, r3
	if(temp == 0xFFFF)				// Memory has been erased
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d035      	beq.n	8002da0 <LoadROtopology+0x7c>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d34:	0a1e      	lsrs	r6, r3, #8
		if(N == 0)
 8002d36:	d02c      	beq.n	8002d92 <LoadROtopology+0x6e>
		N =(uint8_t )(temp >> 8);
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <LoadROtopology+0x94>)
 8002d3a:	b2f6      	uxtb	r6, r6
 8002d3c:	7016      	strb	r6, [r2, #0]
			N =1;
		myID =(uint8_t )temp;
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <LoadROtopology+0x98>)
 8002d40:	7013      	strb	r3, [r2, #0]
 8002d42:	466b      	mov	r3, sp
 8002d44:	1dd9      	adds	r1, r3, #7
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d46:	2300      	movs	r3, #0
		myID =(uint8_t )temp;
 8002d48:	2202      	movs	r2, #2
 8002d4a:	2401      	movs	r4, #1
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d4c:	469c      	mov	ip, r3
 8002d4e:	4d1c      	ldr	r5, [pc, #112]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d50:	4663      	mov	r3, ip
 8002d52:	700b      	strb	r3, [r1, #0]
 8002d54:	780b      	ldrb	r3, [r1, #0]
 8002d56:	2b0a      	cmp	r3, #10
 8002d58:	d814      	bhi.n	8002d84 <LoadROtopology+0x60>
 8002d5a:	1e63      	subs	r3, r4, #1
 8002d5c:	0098      	lsls	r0, r3, #2
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d5e:	18c0      	adds	r0, r0, r3
 8002d60:	0040      	lsls	r0, r0, #1
 8002d62:	18c0      	adds	r0, r0, r3
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <LoadROtopology+0x8c>)
 8002d66:	18d7      	adds	r7, r2, r3
 8002d68:	780b      	ldrb	r3, [r1, #0]
 8002d6a:	883f      	ldrh	r7, [r7, #0]
 8002d6c:	18c3      	adds	r3, r0, r3
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	52ef      	strh	r7, [r5, r3]
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d72:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002d74:	3202      	adds	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d76:	3301      	adds	r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	700b      	strb	r3, [r1, #0]
 8002d7c:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002d7e:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d80:	2b0a      	cmp	r3, #10
 8002d82:	d9ef      	bls.n	8002d64 <LoadROtopology+0x40>
		for(uint8_t i =1; i <= N; i++){
 8002d84:	3401      	adds	r4, #1
 8002d86:	b2e4      	uxtb	r4, r4
 8002d88:	42b4      	cmp	r4, r6
 8002d8a:	d9e1      	bls.n	8002d50 <LoadROtopology+0x2c>
 8002d8c:	2000      	movs	r0, #0
			}
		}
	}
	
	return result;
}
 8002d8e:	b003      	add	sp, #12
 8002d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
			N =1;
 8002d92:	2101      	movs	r1, #1
 8002d94:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <LoadROtopology+0x94>)
		myID =(uint8_t )temp;
 8002d96:	2601      	movs	r6, #1
			N =1;
 8002d98:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8002d9a:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <LoadROtopology+0x98>)
 8002d9c:	7013      	strb	r3, [r2, #0]
 8002d9e:	e7d0      	b.n	8002d42 <LoadROtopology+0x1e>
		N =1;
 8002da0:	2201      	movs	r2, #1
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <LoadROtopology+0x94>)
		return BOS_MEM_ERASED;
 8002da4:	20fa      	movs	r0, #250	; 0xfa
		N =1;
 8002da6:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002da8:	2200      	movs	r2, #0
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <LoadROtopology+0x98>)
 8002dac:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002dae:	e7ee      	b.n	8002d8e <LoadROtopology+0x6a>
 8002db0:	0801d800 	.word	0x0801d800
 8002db4:	0000ffff 	.word	0x0000ffff
 8002db8:	20000008 	.word	0x20000008
 8002dbc:	20000a98 	.word	0x20000a98
 8002dc0:	20000f0c 	.word	0x20000f0c

08002dc4 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc6:	46c6      	mov	lr, r8
 8002dc8:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002dca:	4e0f      	ldr	r6, [pc, #60]	; (8002e08 <LoadEEportsDir+0x44>)
 8002dcc:	7833      	ldrb	r3, [r6, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <LoadEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 8002dd2:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8002dd4:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002dd6:	4698      	mov	r8, r3
 8002dd8:	4f0c      	ldr	r7, [pc, #48]	; (8002e0c <LoadEEportsDir+0x48>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002dda:	1e61      	subs	r1, r4, #1
 8002ddc:	0049      	lsls	r1, r1, #1
 8002dde:	1c65      	adds	r5, r4, #1
 8002de0:	1879      	adds	r1, r7, r1
 8002de2:	b2a8      	uxth	r0, r5
 8002de4:	f004 fd2e 	bl	8007844 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002de8:	2c19      	cmp	r4, #25
 8002dea:	d901      	bls.n	8002df0 <LoadEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8002dec:	230a      	movs	r3, #10
 8002dee:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8002df0:	7833      	ldrb	r3, [r6, #0]
 8002df2:	b2ec      	uxtb	r4, r5
 8002df4:	42a3      	cmp	r3, r4
 8002df6:	d2f0      	bcs.n	8002dda <LoadEEportsDir+0x16>
	}
	
	return result;
}
 8002df8:	4640      	mov	r0, r8
 8002dfa:	bc04      	pop	{r2}
 8002dfc:	4690      	mov	r8, r2
 8002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	4698      	mov	r8, r3
 8002e04:	e7f8      	b.n	8002df8 <LoadEEportsDir+0x34>
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	20000008 	.word	0x20000008
 8002e0c:	20007334 	.word	0x20007334

08002e10 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e12:	464e      	mov	r6, r9
 8002e14:	46de      	mov	lr, fp
 8002e16:	4657      	mov	r7, sl
 8002e18:	4645      	mov	r5, r8
 8002e1a:	b5e0      	push	{r5, r6, r7, lr}
 8002e1c:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e1e:	466b      	mov	r3, sp
 8002e20:	1d9e      	adds	r6, r3, #6
 8002e22:	2300      	movs	r3, #0
 8002e24:	8033      	strh	r3, [r6, #0]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e26:	4698      	mov	r8, r3
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <LoadEEalias+0x78>)
	uint16_t add =0, temp =0;
 8002e2a:	241c      	movs	r4, #28
 8002e2c:	469a      	mov	sl, r3
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <LoadEEalias+0x7c>)
 8002e30:	469b      	mov	fp, r3
 8002e32:	4643      	mov	r3, r8
 8002e34:	009f      	lsls	r7, r3, #2
 8002e36:	18fd      	adds	r5, r7, r3
 8002e38:	1d63      	adds	r3, r4, #5
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	4699      	mov	r9, r3
 8002e3e:	006d      	lsls	r5, r5, #1
 8002e40:	4455      	add	r5, sl
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e42:	0020      	movs	r0, r4
 8002e44:	0031      	movs	r1, r6
 8002e46:	f004 fcfd 	bl	8007844 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002e4a:	8833      	ldrh	r3, [r6, #0]
 8002e4c:	3401      	adds	r4, #1
 8002e4e:	706b      	strb	r3, [r5, #1]
 8002e50:	b2a4      	uxth	r4, r4
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	702b      	strb	r3, [r5, #0]
 8002e56:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002e58:	454c      	cmp	r4, r9
 8002e5a:	d1f2      	bne.n	8002e42 <LoadEEalias+0x32>
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	4447      	add	r7, r8
 8002e60:	007f      	lsls	r7, r7, #1
 8002e62:	4457      	add	r7, sl
 8002e64:	727b      	strb	r3, [r7, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e66:	4643      	mov	r3, r8
 8002e68:	3301      	adds	r3, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4698      	mov	r8, r3
 8002e6e:	465b      	mov	r3, fp
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4543      	cmp	r3, r8
 8002e74:	d2dd      	bcs.n	8002e32 <LoadEEalias+0x22>
	}
	
	return result;
}
 8002e76:	2000      	movs	r0, #0
 8002e78:	b003      	add	sp, #12
 8002e7a:	bc3c      	pop	{r2, r3, r4, r5}
 8002e7c:	4690      	mov	r8, r2
 8002e7e:	4699      	mov	r9, r3
 8002e80:	46a2      	mov	sl, r4
 8002e82:	46ab      	mov	fp, r5
 8002e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	20000dfc 	.word	0x20000dfc
 8002e8c:	20000008 	.word	0x20000008

08002e90 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e92:	4646      	mov	r6, r8
 8002e94:	46d6      	mov	lr, sl
 8002e96:	464f      	mov	r7, r9
 8002e98:	b5c0      	push	{r6, r7, lr}
 8002e9a:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e9c:	466b      	mov	r3, sp
 8002e9e:	1d9e      	adds	r6, r3, #6
 8002ea0:	2300      	movs	r3, #0
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002ea2:	4c22      	ldr	r4, [pc, #136]	; (8002f2c <LoadEEgroup+0x9c>)
	uint16_t add =0, temp =0;
 8002ea4:	8033      	strh	r3, [r6, #0]
	for(i =0; i < N; i++)			// N modules
 8002ea6:	7823      	ldrb	r3, [r4, #0]
	uint16_t add =0, temp =0;
 8002ea8:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d03a      	beq.n	8002f24 <LoadEEgroup+0x94>
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <LoadEEgroup+0xa0>)
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4699      	mov	r9, r3
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb4:	1d1f      	adds	r7, r3, #4
 8002eb6:	0028      	movs	r0, r5
 8002eb8:	0049      	lsls	r1, r1, #1
 8002eba:	30cb      	adds	r0, #203	; 0xcb
 8002ebc:	1879      	adds	r1, r7, r1
 8002ebe:	b280      	uxth	r0, r0
		add++;
 8002ec0:	3501      	adds	r5, #1
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002ec2:	f004 fcbf 	bl	8007844 <EE_ReadVariable>
		add++;
 8002ec6:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002ec8:	7823      	ldrb	r3, [r4, #0]
 8002eca:	b2e9      	uxtb	r1, r5
 8002ecc:	428b      	cmp	r3, r1
 8002ece:	d8f2      	bhi.n	8002eb6 <LoadEEgroup+0x26>
 8002ed0:	2338      	movs	r3, #56	; 0x38
 8002ed2:	002c      	movs	r4, r5
 8002ed4:	35cb      	adds	r5, #203	; 0xcb
 8002ed6:	469c      	mov	ip, r3
 8002ed8:	b2ab      	uxth	r3, r5
 8002eda:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002edc:	2300      	movs	r3, #0
 8002ede:	469a      	mov	sl, r3
 8002ee0:	3499      	adds	r4, #153	; 0x99
 8002ee2:	44e1      	add	r9, ip
 8002ee4:	b2a4      	uxth	r4, r4
	uint16_t add =0, temp =0;
 8002ee6:	464d      	mov	r5, r9
 8002ee8:	1d67      	adds	r7, r4, #5
 8002eea:	b2bf      	uxth	r7, r7
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002eec:	0020      	movs	r0, r4
 8002eee:	0031      	movs	r1, r6
 8002ef0:	f004 fca8 	bl	8007844 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002ef4:	8833      	ldrh	r3, [r6, #0]
 8002ef6:	3401      	adds	r4, #1
 8002ef8:	706b      	strb	r3, [r5, #1]
 8002efa:	b2a4      	uxth	r4, r4
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	702b      	strb	r3, [r5, #0]
 8002f00:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f02:	42bc      	cmp	r4, r7
 8002f04:	d1f2      	bne.n	8002eec <LoadEEgroup+0x5c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002f06:	464b      	mov	r3, r9
 8002f08:	4652      	mov	r2, sl
 8002f0a:	725a      	strb	r2, [r3, #9]
 8002f0c:	230a      	movs	r3, #10
 8002f0e:	469c      	mov	ip, r3
 8002f10:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002f12:	45a0      	cmp	r8, r4
 8002f14:	d1e7      	bne.n	8002ee6 <LoadEEgroup+0x56>
	}
	
	return result;
}
 8002f16:	2000      	movs	r0, #0
 8002f18:	b002      	add	sp, #8
 8002f1a:	bc1c      	pop	{r2, r3, r4}
 8002f1c:	4690      	mov	r8, r2
 8002f1e:	4699      	mov	r9, r3
 8002f20:	46a2      	mov	sl, r4
 8002f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <LoadEEgroup+0xa0>)
 8002f26:	4699      	mov	r9, r3
 8002f28:	e7d2      	b.n	8002ed0 <LoadEEgroup+0x40>
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	20000008 	.word	0x20000008
 8002f30:	20000a98 	.word	0x20000a98

08002f34 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f36:	46ce      	mov	lr, r9
 8002f38:	4647      	mov	r7, r8
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f3a:	260e      	movs	r6, #14
 8002f3c:	2300      	movs	r3, #0
BOS_Status LoadEEstreams(void){
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b085      	sub	sp, #20
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f42:	ac03      	add	r4, sp, #12
 8002f44:	446e      	add	r6, sp
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f46:	0021      	movs	r1, r4
 8002f48:	20e4      	movs	r0, #228	; 0xe4
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f4a:	8023      	strh	r3, [r4, #0]
 8002f4c:	8033      	strh	r3, [r6, #0]
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f4e:	f004 fc79 	bl	8007844 <EE_ReadVariable>
	uint8_t direction =0;
 8002f52:	2700      	movs	r7, #0
	if(!status1){
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d100      	bne.n	8002f5a <LoadEEstreams+0x26>
		direction =(uint8_t )temp1;
 8002f58:	7827      	ldrb	r7, [r4, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f5a:	0021      	movs	r1, r4
 8002f5c:	20e5      	movs	r0, #229	; 0xe5
 8002f5e:	f004 fc71 	bl	8007844 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f62:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f64:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f66:	20e6      	movs	r0, #230	; 0xe6
 8002f68:	f004 fc6c 	bl	8007844 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002f6c:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002f6e:	4305      	orrs	r5, r0
 8002f70:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002f72:	4698      	mov	r8, r3
	if(!status1 && !status2){
 8002f74:	2d00      	cmp	r5, #0
 8002f76:	d104      	bne.n	8002f82 <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002f78:	8823      	ldrh	r3, [r4, #0]
 8002f7a:	8832      	ldrh	r2, [r6, #0]
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	4698      	mov	r8, r3
 8002f80:	4490      	add	r8, r2
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f82:	0021      	movs	r1, r4
 8002f84:	20e7      	movs	r0, #231	; 0xe7
 8002f86:	f004 fc5d 	bl	8007844 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f8a:	0031      	movs	r1, r6
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f8c:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f8e:	20e8      	movs	r0, #232	; 0xe8
 8002f90:	f004 fc58 	bl	8007844 <EE_ReadVariable>
	uint32_t count =0, timeout =0;
 8002f94:	2300      	movs	r3, #0
	if(!status1 && !status2){
 8002f96:	4305      	orrs	r5, r0
 8002f98:	b2ad      	uxth	r5, r5
	uint32_t count =0, timeout =0;
 8002f9a:	4699      	mov	r9, r3
	if(!status1 && !status2){
 8002f9c:	2d00      	cmp	r5, #0
 8002f9e:	d104      	bne.n	8002faa <LoadEEstreams+0x76>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8002fa0:	8823      	ldrh	r3, [r4, #0]
 8002fa2:	8832      	ldrh	r2, [r6, #0]
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	4699      	mov	r9, r3
 8002fa8:	4491      	add	r9, r2
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8002faa:	0021      	movs	r1, r4
 8002fac:	20e9      	movs	r0, #233	; 0xe9
 8002fae:	f004 fc49 	bl	8007844 <EE_ReadVariable>
	if(!status1){
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	d030      	beq.n	8003018 <LoadEEstreams+0xe4>
 8002fb6:	4d26      	ldr	r5, [pc, #152]	; (8003050 <LoadEEstreams+0x11c>)
		src1 =(uint8_t )(temp1 >> 8);
		dst1 =(uint8_t )temp1;
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8002fb8:	0021      	movs	r1, r4
 8002fba:	20ea      	movs	r0, #234	; 0xea
 8002fbc:	f004 fc42 	bl	8007844 <EE_ReadVariable>
	if(!status1){
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	d103      	bne.n	8002fcc <LoadEEstreams+0x98>
		src2 =(uint8_t )(temp1 >> 8);
 8002fc4:	8823      	ldrh	r3, [r4, #0]
 8002fc6:	0a1a      	lsrs	r2, r3, #8
 8002fc8:	77aa      	strb	r2, [r5, #30]
		dst2 =(uint8_t )temp1;
 8002fca:	77eb      	strb	r3, [r5, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8002fcc:	0021      	movs	r1, r4
 8002fce:	20eb      	movs	r0, #235	; 0xeb
 8002fd0:	f004 fc38 	bl	8007844 <EE_ReadVariable>
	if(!status1){
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d105      	bne.n	8002fe4 <LoadEEstreams+0xb0>
		src3 =(uint8_t )(temp1 >> 8);
 8002fd8:	2220      	movs	r2, #32
 8002fda:	8823      	ldrh	r3, [r4, #0]
 8002fdc:	0a19      	lsrs	r1, r3, #8
 8002fde:	54a9      	strb	r1, [r5, r2]
		dst3 =(uint8_t )temp1;
 8002fe0:	3201      	adds	r2, #1
 8002fe2:	54ab      	strb	r3, [r5, r2]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8002fe4:	7f2b      	ldrb	r3, [r5, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <LoadEEstreams+0xbc>
 8002fea:	7f6a      	ldrb	r2, [r5, #29]
 8002fec:	2a00      	cmp	r2, #0
 8002fee:	d120      	bne.n	8003032 <LoadEEstreams+0xfe>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8002ff0:	7fab      	ldrb	r3, [r5, #30]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <LoadEEstreams+0xc8>
 8002ff6:	7fea      	ldrb	r2, [r5, #31]
 8002ff8:	2a00      	cmp	r2, #0
 8002ffa:	d121      	bne.n	8003040 <LoadEEstreams+0x10c>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	5ceb      	ldrb	r3, [r5, r3]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <LoadEEstreams+0xd8>
 8003004:	2221      	movs	r2, #33	; 0x21
 8003006:	5caa      	ldrb	r2, [r5, r2]
 8003008:	2a00      	cmp	r2, #0
 800300a:	d10b      	bne.n	8003024 <LoadEEstreams+0xf0>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 800300c:	2000      	movs	r0, #0
 800300e:	b005      	add	sp, #20
 8003010:	bc0c      	pop	{r2, r3}
 8003012:	4690      	mov	r8, r2
 8003014:	4699      	mov	r9, r3
 8003016:	bdf0      	pop	{r4, r5, r6, r7, pc}
		src1 =(uint8_t )(temp1 >> 8);
 8003018:	8823      	ldrh	r3, [r4, #0]
 800301a:	4d0d      	ldr	r5, [pc, #52]	; (8003050 <LoadEEstreams+0x11c>)
 800301c:	0a1a      	lsrs	r2, r3, #8
 800301e:	772a      	strb	r2, [r5, #28]
		dst1 =(uint8_t )temp1;
 8003020:	776b      	strb	r3, [r5, #29]
 8003022:	e7c9      	b.n	8002fb8 <LoadEEstreams+0x84>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003024:	9200      	str	r2, [sp, #0]
 8003026:	4641      	mov	r1, r8
 8003028:	464a      	mov	r2, r9
 800302a:	0038      	movs	r0, r7
 800302c:	f006 f9e0 	bl	80093f0 <SetupDMAStreams>
 8003030:	e7ec      	b.n	800300c <LoadEEstreams+0xd8>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 8003032:	9200      	str	r2, [sp, #0]
 8003034:	4641      	mov	r1, r8
 8003036:	464a      	mov	r2, r9
 8003038:	0038      	movs	r0, r7
 800303a:	f006 f9d9 	bl	80093f0 <SetupDMAStreams>
 800303e:	e7d7      	b.n	8002ff0 <LoadEEstreams+0xbc>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003040:	9200      	str	r2, [sp, #0]
 8003042:	4641      	mov	r1, r8
 8003044:	464a      	mov	r2, r9
 8003046:	0038      	movs	r0, r7
 8003048:	f006 f9d2 	bl	80093f0 <SetupDMAStreams>
 800304c:	e7d6      	b.n	8002ffc <LoadEEstreams+0xc8>
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	20000b18 	.word	0x20000b18

08003054 <LoadEEparams>:
BOS_Status LoadEEparams(void){
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003054:	208a      	movs	r0, #138	; 0x8a
BOS_Status LoadEEparams(void){
 8003056:	b570      	push	{r4, r5, r6, lr}
 8003058:	b082      	sub	sp, #8
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 800305a:	ac01      	add	r4, sp, #4
 800305c:	0021      	movs	r1, r4
 800305e:	0040      	lsls	r0, r0, #1
 8003060:	f004 fbf0 	bl	8007844 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003064:	2800      	cmp	r0, #0
 8003066:	d15d      	bne.n	8003124 <LoadEEparams+0xd0>
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003068:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =(uint8_t )temp1;
 800306a:	8823      	ldrh	r3, [r4, #0]
 800306c:	4d54      	ldr	r5, [pc, #336]	; (80031c0 <LoadEEparams+0x16c>)
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800306e:	0021      	movs	r1, r4
		BOSMessaging.response =(uint8_t )temp1;
 8003070:	702b      	strb	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003072:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003078:	f004 fbe4 	bl	8007844 <EE_ReadVariable>

	if(!status1){
 800307c:	2800      	cmp	r0, #0
 800307e:	d15e      	bne.n	800313e <LoadEEparams+0xea>
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003080:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003082:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003084:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003086:	0bda      	lsrs	r2, r3, #15
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003088:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 800308a:	085b      	lsrs	r3, r3, #1
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 800308c:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 800308e:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003090:	f004 fbd8 	bl	8007844 <EE_ReadVariable>
	if(!status1)
		BOS.buttons.debounce =temp1;
 8003094:	4d4b      	ldr	r5, [pc, #300]	; (80031c4 <LoadEEparams+0x170>)
	if(!status1)
 8003096:	2800      	cmp	r0, #0
 8003098:	d15e      	bne.n	8003158 <LoadEEparams+0x104>
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800309a:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =temp1;
 800309c:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800309e:	0021      	movs	r1, r4
 80030a0:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =temp1;
 80030a2:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80030a4:	f004 fbce 	bl	8007844 <EE_ReadVariable>
	if(!status1)
 80030a8:	2800      	cmp	r0, #0
 80030aa:	d15f      	bne.n	800316c <LoadEEparams+0x118>
		BOS.buttons.singleClickTime =temp1;
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030ac:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =temp1;
 80030ae:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030b0:	0021      	movs	r1, r4
 80030b2:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =temp1;
 80030b4:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030b6:	f004 fbc5 	bl	8007844 <EE_ReadVariable>
	if(!status1){
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d160      	bne.n	8003180 <LoadEEparams+0x12c>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 80030be:	8823      	ldrh	r3, [r4, #0]
 80030c0:	712b      	strb	r3, [r5, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	716b      	strb	r3, [r5, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80030c6:	208c      	movs	r0, #140	; 0x8c
 80030c8:	0021      	movs	r1, r4
 80030ca:	0040      	lsls	r0, r0, #1
 80030cc:	f004 fbba 	bl	8007844 <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 80030d0:	466b      	mov	r3, sp
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80030d2:	0006      	movs	r6, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 80030d4:	201a      	movs	r0, #26
 80030d6:	1d99      	adds	r1, r3, #6
 80030d8:	30ff      	adds	r0, #255	; 0xff
 80030da:	f004 fbb3 	bl	8007844 <EE_ReadVariable>
	if(!status1 && !status2){
 80030de:	4306      	orrs	r6, r0
 80030e0:	b2b6      	uxth	r6, r6
 80030e2:	2e00      	cmp	r6, #0
 80030e4:	d15f      	bne.n	80031a6 <LoadEEparams+0x152>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 80030e6:	466b      	mov	r3, sp
 80030e8:	88db      	ldrh	r3, [r3, #6]
 80030ea:	8822      	ldrh	r2, [r4, #0]
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60ab      	str	r3, [r5, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 80030f2:	208d      	movs	r0, #141	; 0x8d
 80030f4:	0021      	movs	r1, r4
 80030f6:	0040      	lsls	r0, r0, #1
 80030f8:	f004 fba4 	bl	8007844 <EE_ReadVariable>
	if(!status1){
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d145      	bne.n	800318c <LoadEEparams+0x138>
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003100:	201c      	movs	r0, #28
		BOS.daylightsaving =(int8_t )temp1;
 8003102:	8823      	ldrh	r3, [r4, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003104:	0021      	movs	r1, r4
		BOS.daylightsaving =(int8_t )temp1;
 8003106:	732b      	strb	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003108:	30ff      	adds	r0, #255	; 0xff
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	736b      	strb	r3, [r5, #13]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800310e:	f004 fb99 	bl	8007844 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003112:	2800      	cmp	r0, #0
 8003114:	d044      	beq.n	80031a0 <LoadEEparams+0x14c>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 8003116:	2326      	movs	r3, #38	; 0x26
 8003118:	4a2b      	ldr	r2, [pc, #172]	; (80031c8 <LoadEEparams+0x174>)
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	76ab      	strb	r3, [r5, #26]
	}
	
	return result;
}
 800311e:	2000      	movs	r0, #0
 8003120:	b002      	add	sp, #8
 8003122:	bd70      	pop	{r4, r5, r6, pc}
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003124:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =BOSMessging_default.response;
 8003126:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <LoadEEparams+0x174>)
 8003128:	4d25      	ldr	r5, [pc, #148]	; (80031c0 <LoadEEparams+0x16c>)
 800312a:	791a      	ldrb	r2, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800312c:	0021      	movs	r1, r4
		BOSMessaging.response =BOSMessging_default.response;
 800312e:	702a      	strb	r2, [r5, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 8003130:	795b      	ldrb	r3, [r3, #5]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003132:	0040      	lsls	r0, r0, #1
		BOSMessaging.trace =BOSMessging_default.trace;
 8003134:	706b      	strb	r3, [r5, #1]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003136:	f004 fb85 	bl	8007844 <EE_ReadVariable>
	if(!status1){
 800313a:	2800      	cmp	r0, #0
 800313c:	d0a0      	beq.n	8003080 <LoadEEparams+0x2c>
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 800313e:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003140:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003142:	0021      	movs	r1, r4
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003144:	7a1a      	ldrb	r2, [r3, #8]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003146:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003148:	712a      	strb	r2, [r5, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 800314a:	895b      	ldrh	r3, [r3, #10]
 800314c:	80eb      	strh	r3, [r5, #6]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 800314e:	f004 fb79 	bl	8007844 <EE_ReadVariable>
		BOS.buttons.debounce =temp1;
 8003152:	4d1c      	ldr	r5, [pc, #112]	; (80031c4 <LoadEEparams+0x170>)
	if(!status1)
 8003154:	2800      	cmp	r0, #0
 8003156:	d0a0      	beq.n	800309a <LoadEEparams+0x46>
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003158:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800315c:	0021      	movs	r1, r4
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800315e:	899b      	ldrh	r3, [r3, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003160:	0040      	lsls	r0, r0, #1
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 8003162:	802b      	strh	r3, [r5, #0]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003164:	f004 fb6e 	bl	8007844 <EE_ReadVariable>
	if(!status1)
 8003168:	2800      	cmp	r0, #0
 800316a:	d09f      	beq.n	80030ac <LoadEEparams+0x58>
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 800316c:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 800316e:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <LoadEEparams+0x174>)
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003170:	0021      	movs	r1, r4
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003172:	89db      	ldrh	r3, [r3, #14]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003174:	30ff      	adds	r0, #255	; 0xff
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003176:	806b      	strh	r3, [r5, #2]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003178:	f004 fb64 	bl	8007844 <EE_ReadVariable>
	if(!status1){
 800317c:	2800      	cmp	r0, #0
 800317e:	d09e      	beq.n	80030be <LoadEEparams+0x6a>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <LoadEEparams+0x174>)
 8003182:	7c1a      	ldrb	r2, [r3, #16]
 8003184:	712a      	strb	r2, [r5, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 8003186:	7c5b      	ldrb	r3, [r3, #17]
 8003188:	716b      	strb	r3, [r5, #5]
 800318a:	e79c      	b.n	80030c6 <LoadEEparams+0x72>
		BOS.daylightsaving =DAYLIGHT_NONE;
 800318c:	23c0      	movs	r3, #192	; 0xc0
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800318e:	201c      	movs	r0, #28
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003190:	015b      	lsls	r3, r3, #5
 8003192:	81ab      	strh	r3, [r5, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003194:	0021      	movs	r1, r4
 8003196:	30ff      	adds	r0, #255	; 0xff
 8003198:	f004 fb54 	bl	8007844 <EE_ReadVariable>
	if(!status1){
 800319c:	2800      	cmp	r0, #0
 800319e:	d1ba      	bne.n	8003116 <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 80031a0:	8823      	ldrh	r3, [r4, #0]
 80031a2:	76ab      	strb	r3, [r5, #26]
 80031a4:	e7bb      	b.n	800311e <LoadEEparams+0xca>
	else if(CLI_LOW_Baudrate_Flag)
 80031a6:	2322      	movs	r3, #34	; 0x22
 80031a8:	4a08      	ldr	r2, [pc, #32]	; (80031cc <LoadEEparams+0x178>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <LoadEEparams+0x164>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80031b0:	23e1      	movs	r3, #225	; 0xe1
 80031b2:	025b      	lsls	r3, r3, #9
 80031b4:	60ab      	str	r3, [r5, #8]
 80031b6:	e79c      	b.n	80030f2 <LoadEEparams+0x9e>
		BOS.clibaudrate =BOS_default.clibaudrate;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <LoadEEparams+0x174>)
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	60ab      	str	r3, [r5, #8]
 80031be:	e798      	b.n	80030f2 <LoadEEparams+0x9e>
 80031c0:	20006e28 	.word	0x20006e28
 80031c4:	20006ea8 	.word	0x20006ea8
 80031c8:	20000008 	.word	0x20000008
 80031cc:	20000b18 	.word	0x20000b18

080031d0 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 80031d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d2:	46de      	mov	lr, fp
 80031d4:	4657      	mov	r7, sl
 80031d6:	464e      	mov	r6, r9
 80031d8:	4645      	mov	r5, r8
 80031da:	b5e0      	push	{r5, r6, r7, lr}
 80031dc:	b08b      	sub	sp, #44	; 0x2c
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 80031de:	ab02      	add	r3, sp, #8
 80031e0:	469c      	mov	ip, r3
 80031e2:	261e      	movs	r6, #30
 80031e4:	2300      	movs	r3, #0
 80031e6:	4466      	add	r6, ip
 80031e8:	8033      	strh	r3, [r6, #0]
 80031ea:	330f      	adds	r3, #15
 80031ec:	469a      	mov	sl, r3
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80031ee:	3b0e      	subs	r3, #14
	uint16_t temp16 =0, status1 =0;
 80031f0:	2501      	movs	r5, #1
 80031f2:	24ec      	movs	r4, #236	; 0xec
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80031f4:	469b      	mov	fp, r3
 80031f6:	e004      	b.n	8003202 <LoadEEbuttons+0x32>
 80031f8:	3404      	adds	r4, #4
 80031fa:	3501      	adds	r5, #1
 80031fc:	b2a4      	uxth	r4, r4
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80031fe:	2d08      	cmp	r5, #8
 8003200:	d05e      	beq.n	80032c0 <LoadEEbuttons+0xf0>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003202:	0031      	movs	r1, r6
 8003204:	0020      	movs	r0, r4
 8003206:	f004 fb1d 	bl	8007844 <EE_ReadVariable>
 800320a:	b2eb      	uxtb	r3, r5
 800320c:	1e07      	subs	r7, r0, #0
 800320e:	4699      	mov	r9, r3
		if(!status1)									// This variable exists
 8003210:	d1f2      	bne.n	80031f8 <LoadEEbuttons+0x28>
			temp8 =(uint8_t )(temp16 >> 8);
 8003212:	8832      	ldrh	r2, [r6, #0]
 8003214:	0a13      	lsrs	r3, r2, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 8003216:	0919      	lsrs	r1, r3, #4
 8003218:	42a9      	cmp	r1, r5
 800321a:	d1ed      	bne.n	80031f8 <LoadEEbuttons+0x28>
 800321c:	4651      	mov	r1, sl
 800321e:	400b      	ands	r3, r1
 8003220:	d0ea      	beq.n	80031f8 <LoadEEbuttons+0x28>
				button[i + 1].type =temp8 & 0x0F;
 8003222:	482b      	ldr	r0, [pc, #172]	; (80032d0 <LoadEEbuttons+0x100>)
 8003224:	00e9      	lsls	r1, r5, #3
 8003226:	4680      	mov	r8, r0
 8003228:	1949      	adds	r1, r1, r5
 800322a:	4488      	add	r8, r1
 800322c:	4641      	mov	r1, r8
 800322e:	00a8      	lsls	r0, r5, #2
 8003230:	704b      	strb	r3, [r1, #1]
 8003232:	b283      	uxth	r3, r0
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003234:	0018      	movs	r0, r3
 8003236:	30e9      	adds	r0, #233	; 0xe9
				button[i + 1].events =(uint8_t )temp16;
 8003238:	720a      	strb	r2, [r1, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 800323a:	b280      	uxth	r0, r0
 800323c:	0031      	movs	r1, r6
 800323e:	9307      	str	r3, [sp, #28]
 8003240:	f004 fb00 	bl	8007844 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003244:	4641      	mov	r1, r8
 8003246:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003248:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800324a:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 800324c:	30ea      	adds	r0, #234	; 0xea
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800324e:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003250:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003252:	b280      	uxth	r0, r0
 8003254:	0031      	movs	r1, r6
 8003256:	f004 faf5 	bl	8007844 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 800325a:	4641      	mov	r1, r8
 800325c:	8833      	ldrh	r3, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 800325e:	9807      	ldr	r0, [sp, #28]
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003260:	0a1a      	lsrs	r2, r3, #8
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003262:	30eb      	adds	r0, #235	; 0xeb
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003264:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 8003266:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003268:	b280      	uxth	r0, r0
 800326a:	0031      	movs	r1, r6
 800326c:	f004 faea 	bl	8007844 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003270:	4641      	mov	r1, r8
 8003272:	8833      	ldrh	r3, [r6, #0]
				AddPortButton(button[i + 1].type,i + 1);
 8003274:	7848      	ldrb	r0, [r1, #1]
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003276:	0a1a      	lsrs	r2, r3, #8
 8003278:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 800327a:	71cb      	strb	r3, [r1, #7]
				AddPortButton(button[i + 1].type,i + 1);
 800327c:	4649      	mov	r1, r9
 800327e:	f005 f8c5 	bl	800840c <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003282:	4643      	mov	r3, r8
 8003284:	4658      	mov	r0, fp
 8003286:	7a19      	ldrb	r1, [r3, #8]
 8003288:	789b      	ldrb	r3, [r3, #2]
 800328a:	104a      	asrs	r2, r1, #1
 800328c:	4002      	ands	r2, r0
 800328e:	4001      	ands	r1, r0
 8003290:	4640      	mov	r0, r8
 8003292:	9705      	str	r7, [sp, #20]
 8003294:	79c0      	ldrb	r0, [r0, #7]
 8003296:	3404      	adds	r4, #4
 8003298:	9004      	str	r0, [sp, #16]
 800329a:	4640      	mov	r0, r8
 800329c:	7980      	ldrb	r0, [r0, #6]
 800329e:	3501      	adds	r5, #1
 80032a0:	9003      	str	r0, [sp, #12]
 80032a2:	4640      	mov	r0, r8
 80032a4:	7940      	ldrb	r0, [r0, #5]
 80032a6:	b2a4      	uxth	r4, r4
 80032a8:	9002      	str	r0, [sp, #8]
 80032aa:	4640      	mov	r0, r8
 80032ac:	7900      	ldrb	r0, [r0, #4]
 80032ae:	9001      	str	r0, [sp, #4]
 80032b0:	4640      	mov	r0, r8
 80032b2:	78c0      	ldrb	r0, [r0, #3]
 80032b4:	9000      	str	r0, [sp, #0]
 80032b6:	4648      	mov	r0, r9
 80032b8:	f005 f9b2 	bl	8008620 <SetButtonEvents>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80032bc:	2d08      	cmp	r5, #8
 80032be:	d1a0      	bne.n	8003202 <LoadEEbuttons+0x32>
			}
		}
	}
	
	return result;
}
 80032c0:	2000      	movs	r0, #0
 80032c2:	b00b      	add	sp, #44	; 0x2c
 80032c4:	bc3c      	pop	{r2, r3, r4, r5}
 80032c6:	4690      	mov	r8, r2
 80032c8:	4699      	mov	r9, r3
 80032ca:	46a2      	mov	sl, r4
 80032cc:	46ab      	mov	fp, r5
 80032ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032d0:	2000191c 	.word	0x2000191c

080032d4 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	46de      	mov	lr, fp
 80032d8:	4645      	mov	r5, r8
 80032da:	4657      	mov	r7, sl
 80032dc:	464e      	mov	r6, r9
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80032de:	2032      	movs	r0, #50	; 0x32
BOS_Status LoadROsnippets(void){
 80032e0:	b5e0      	push	{r5, r6, r7, lr}
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80032e2:	f00f fa8f 	bl	8012804 <malloc>
 80032e6:	1e05      	subs	r5, r0, #0
	if(snipBuffer == NULL)
 80032e8:	d065      	beq.n	80033b6 <LoadROsnippets+0xe2>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 80032ea:	4c3b      	ldr	r4, [pc, #236]	; (80033d8 <LoadROsnippets+0x104>)
		return BOS_ERROR;
 80032ec:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 80032ee:	7822      	ldrb	r2, [r4, #0]
 80032f0:	2afe      	cmp	r2, #254	; 0xfe
 80032f2:	d156      	bne.n	80033a2 <LoadROsnippets+0xce>
 80032f4:	1c6b      	adds	r3, r5, #1
 80032f6:	4698      	mov	r8, r3
 80032f8:	2364      	movs	r3, #100	; 0x64
 80032fa:	4699      	mov	r9, r3
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 80032fc:	4b37      	ldr	r3, [pc, #220]	; (80033dc <LoadROsnippets+0x108>)
 80032fe:	4e38      	ldr	r6, [pc, #224]	; (80033e0 <LoadROsnippets+0x10c>)
 8003300:	469b      	mov	fp, r3
 8003302:	44b1      	add	r9, r6
 8003304:	0020      	movs	r0, r4
 8003306:	46a2      	mov	sl, r4
 8003308:	3014      	adds	r0, #20
 800330a:	1b29      	subs	r1, r5, r4
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 800330c:	7822      	ldrb	r2, [r4, #0]
 800330e:	550a      	strb	r2, [r1, r4]
 8003310:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8003312:	4284      	cmp	r4, r0
 8003314:	d1fa      	bne.n	800330c <LoadROsnippets+0x38>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003316:	2214      	movs	r2, #20
 8003318:	4641      	mov	r1, r8
 800331a:	0030      	movs	r0, r6
 800331c:	f00f fcbf 	bl	8012c9e <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003320:	2100      	movs	r1, #0
 8003322:	2214      	movs	r2, #20
 8003324:	0028      	movs	r0, r5
 8003326:	f00f fcc3 	bl	8012cb0 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800332a:	7821      	ldrb	r1, [r4, #0]
 800332c:	1c8b      	adds	r3, r1, #2
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d942      	bls.n	80033ba <LoadROsnippets+0xe6>
 8003334:	4657      	mov	r7, sl
 8003336:	0028      	movs	r0, r5
 8003338:	3746      	adds	r7, #70	; 0x46
		i =0;
 800333a:	2300      	movs	r3, #0
 800333c:	e002      	b.n	8003344 <LoadROsnippets+0x70>
 800333e:	3001      	adds	r0, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003340:	42a7      	cmp	r7, r4
 8003342:	d034      	beq.n	80033ae <LoadROsnippets+0xda>
			++currentAdd;
 8003344:	3401      	adds	r4, #1
			snipBuffer[i] =*(uint8_t* )currentAdd;
 8003346:	7001      	strb	r1, [r0, #0]
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003348:	7821      	ldrb	r1, [r4, #0]
			++i;
 800334a:	3301      	adds	r3, #1
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800334c:	1c8a      	adds	r2, r1, #2
 800334e:	b2d2      	uxtb	r2, r2
			++i;
 8003350:	b2db      	uxtb	r3, r3
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003352:	2a01      	cmp	r2, #1
 8003354:	d8f3      	bhi.n	800333e <LoadROsnippets+0x6a>
 8003356:	469a      	mov	sl, r3
 8003358:	1e5a      	subs	r2, r3, #1
		if(snipBuffer[i - 1] != 0)
 800335a:	5caa      	ldrb	r2, [r5, r2]
 800335c:	2a00      	cmp	r2, #0
 800335e:	d002      	beq.n	8003366 <LoadROsnippets+0x92>
			++i;	// String termination char was not recorded, then add one
 8003360:	3301      	adds	r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	469a      	mov	sl, r3
		snippets[s].cmd =(char* )malloc(i);
 8003366:	4650      	mov	r0, sl
 8003368:	f00f fa4c 	bl	8012804 <malloc>
 800336c:	60f0      	str	r0, [r6, #12]
		if(snippets[s].cmd == NULL){
 800336e:	2800      	cmp	r0, #0
 8003370:	d028      	beq.n	80033c4 <LoadROsnippets+0xf0>
			memcpy(snippets[s].cmd,snipBuffer,i);
 8003372:	4652      	mov	r2, sl
 8003374:	0029      	movs	r1, r5
 8003376:	f00f fc92 	bl	8012c9e <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800337a:	465b      	mov	r3, fp
 800337c:	465a      	mov	r2, fp
 800337e:	781b      	ldrb	r3, [r3, #0]
			memset(snipBuffer,0,i);
 8003380:	2100      	movs	r1, #0
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003382:	3301      	adds	r3, #1
 8003384:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 8003386:	0028      	movs	r0, r5
 8003388:	4652      	mov	r2, sl
 800338a:	f00f fc91 	bl	8012cb0 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 800338e:	7823      	ldrb	r3, [r4, #0]
 8003390:	2bfe      	cmp	r3, #254	; 0xfe
 8003392:	d102      	bne.n	800339a <LoadROsnippets+0xc6>
 8003394:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003396:	45b1      	cmp	r9, r6
 8003398:	d1b4      	bne.n	8003304 <LoadROsnippets+0x30>
			break;
	}
	
	free(snipBuffer);
 800339a:	0028      	movs	r0, r5
 800339c:	f00f fa3c 	bl	8012818 <free>
	return BOS_OK;
 80033a0:	2000      	movs	r0, #0
}
 80033a2:	bc3c      	pop	{r2, r3, r4, r5}
 80033a4:	4690      	mov	r8, r2
 80033a6:	4699      	mov	r9, r3
 80033a8:	46a2      	mov	sl, r4
 80033aa:	46ab      	mov	fp, r5
 80033ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ae:	2332      	movs	r3, #50	; 0x32
 80033b0:	2231      	movs	r2, #49	; 0x31
 80033b2:	469a      	mov	sl, r3
 80033b4:	e7d1      	b.n	800335a <LoadROsnippets+0x86>
		return BOS_MEM_FULL;
 80033b6:	20fb      	movs	r0, #251	; 0xfb
 80033b8:	e7f3      	b.n	80033a2 <LoadROsnippets+0xce>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033ba:	2201      	movs	r2, #1
 80033bc:	2300      	movs	r3, #0
 80033be:	4252      	negs	r2, r2
 80033c0:	469a      	mov	sl, r3
 80033c2:	e7ca      	b.n	800335a <LoadROsnippets+0x86>
			memset(&snippets[s],0,sizeof(snippet_t));
 80033c4:	2214      	movs	r2, #20
 80033c6:	2100      	movs	r1, #0
 80033c8:	0030      	movs	r0, r6
 80033ca:	f00f fc71 	bl	8012cb0 <memset>
			free(snipBuffer);
 80033ce:	0028      	movs	r0, r5
 80033d0:	f00f fa22 	bl	8012818 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80033d4:	200e      	movs	r0, #14
 80033d6:	e7e4      	b.n	80033a2 <LoadROsnippets+0xce>
 80033d8:	0801dc00 	.word	0x0801dc00
 80033dc:	20001180 	.word	0x20001180
 80033e0:	20006ec4 	.word	0x20006ec4

080033e4 <LoadEEvars>:
void LoadEEvars(void){
 80033e4:	b510      	push	{r4, lr}
	LoadROtopology();
 80033e6:	f7ff fc9d 	bl	8002d24 <LoadROtopology>
	LoadEEportsDir();
 80033ea:	f7ff fceb 	bl	8002dc4 <LoadEEportsDir>
	LoadEEalias();
 80033ee:	f7ff fd0f 	bl	8002e10 <LoadEEalias>
	LoadEEgroup();
 80033f2:	f7ff fd4d 	bl	8002e90 <LoadEEgroup>
	LoadEEstreams();
 80033f6:	f7ff fd9d 	bl	8002f34 <LoadEEstreams>
	LoadEEparams();
 80033fa:	f7ff fe2b 	bl	8003054 <LoadEEparams>
	LoadEEbuttons();
 80033fe:	f7ff fee7 	bl	80031d0 <LoadEEbuttons>
	LoadROsnippets();
 8003402:	f7ff ff67 	bl	80032d4 <LoadROsnippets>
}
 8003406:	bd10      	pop	{r4, pc}

08003408 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340a:	46c6      	mov	lr, r8
 800340c:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 800340e:	4e10      	ldr	r6, [pc, #64]	; (8003450 <SaveEEportsDir+0x48>)
 8003410:	7833      	ldrb	r3, [r6, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d016      	beq.n	8003444 <SaveEEportsDir+0x3c>
	BOS_Status result =BOS_OK;
 8003416:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8003418:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800341a:	4698      	mov	r8, r3
 800341c:	4f0d      	ldr	r7, [pc, #52]	; (8003454 <SaveEEportsDir+0x4c>)
 800341e:	e007      	b.n	8003430 <SaveEEportsDir+0x28>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003420:	2c19      	cmp	r4, #25
 8003422:	d901      	bls.n	8003428 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 8003424:	230a      	movs	r3, #10
 8003426:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003428:	7833      	ldrb	r3, [r6, #0]
 800342a:	b2ec      	uxtb	r4, r5
 800342c:	42a3      	cmp	r3, r4
 800342e:	d30b      	bcc.n	8003448 <SaveEEportsDir+0x40>
		if(arrayPortsDir[i - 1])
 8003430:	1e63      	subs	r3, r4, #1
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	5af9      	ldrh	r1, [r7, r3]
 8003436:	1c65      	adds	r5, r4, #1
 8003438:	2900      	cmp	r1, #0
 800343a:	d0f1      	beq.n	8003420 <SaveEEportsDir+0x18>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800343c:	b2a8      	uxth	r0, r5
 800343e:	f004 fa31 	bl	80078a4 <EE_WriteVariable>
 8003442:	e7ed      	b.n	8003420 <SaveEEportsDir+0x18>
	BOS_Status result =BOS_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	4698      	mov	r8, r3
	}
	
	return result;
}
 8003448:	4640      	mov	r0, r8
 800344a:	bc04      	pop	{r2}
 800344c:	4690      	mov	r8, r2
 800344e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003450:	20000008 	.word	0x20000008
 8003454:	20007334 	.word	0x20007334

08003458 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003458:	2300      	movs	r3, #0
BOS_Status SaveEEalias(void){
 800345a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345c:	4646      	mov	r6, r8
 800345e:	46d6      	mov	lr, sl
 8003460:	464f      	mov	r7, r9
	uint16_t add =0, temp =0;
 8003462:	4698      	mov	r8, r3
 8003464:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <SaveEEalias+0x80>)
BOS_Status SaveEEalias(void){
 8003466:	b5c0      	push	{r6, r7, lr}
 8003468:	4699      	mov	r9, r3
 800346a:	4b1c      	ldr	r3, [pc, #112]	; (80034dc <SaveEEalias+0x84>)
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800346c:	2600      	movs	r6, #0
 800346e:	469a      	mov	sl, r3
 8003470:	e005      	b.n	800347e <SaveEEalias+0x26>
 8003472:	4653      	mov	r3, sl
 8003474:	3601      	adds	r6, #1
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b2f6      	uxtb	r6, r6
 800347a:	42b3      	cmp	r3, r6
 800347c:	d325      	bcc.n	80034ca <SaveEEalias+0x72>
	    {
		if(moduleAlias[i][0]){
 800347e:	464b      	mov	r3, r9
 8003480:	00b4      	lsls	r4, r6, #2
 8003482:	19a4      	adds	r4, r4, r6
 8003484:	0064      	lsls	r4, r4, #1
 8003486:	5d1b      	ldrb	r3, [r3, r4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f2      	beq.n	8003472 <SaveEEalias+0x1a>
 800348c:	4645      	mov	r5, r8
 800348e:	4647      	mov	r7, r8
 8003490:	351c      	adds	r5, #28
 8003492:	3721      	adds	r7, #33	; 0x21
 8003494:	444c      	add	r4, r9
 8003496:	b2ad      	uxth	r5, r5
 8003498:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 800349a:	7861      	ldrb	r1, [r4, #1]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80034a0:	0028      	movs	r0, r5
 80034a2:	3501      	adds	r5, #1
 80034a4:	b289      	uxth	r1, r1
 80034a6:	b2ad      	uxth	r5, r5
 80034a8:	f004 f9fc 	bl	80078a4 <EE_WriteVariable>
 80034ac:	3402      	adds	r4, #2
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034ae:	42bd      	cmp	r5, r7
 80034b0:	d001      	beq.n	80034b6 <SaveEEalias+0x5e>
 80034b2:	7823      	ldrb	r3, [r4, #0]
 80034b4:	e7f1      	b.n	800349a <SaveEEalias+0x42>
 80034b6:	4643      	mov	r3, r8
 80034b8:	3305      	adds	r3, #5
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	4698      	mov	r8, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80034be:	4653      	mov	r3, sl
 80034c0:	3601      	adds	r6, #1
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	b2f6      	uxtb	r6, r6
 80034c6:	42b3      	cmp	r3, r6
 80034c8:	d2d9      	bcs.n	800347e <SaveEEalias+0x26>
			}
		}
	}
	
	return result;
}
 80034ca:	2000      	movs	r0, #0
 80034cc:	bc1c      	pop	{r2, r3, r4}
 80034ce:	4690      	mov	r8, r2
 80034d0:	4699      	mov	r9, r3
 80034d2:	46a2      	mov	sl, r4
 80034d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	20000dfc 	.word	0x20000dfc
 80034dc:	20000008 	.word	0x20000008

080034e0 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80034e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e2:	46de      	mov	lr, fp
 80034e4:	4657      	mov	r7, sl
 80034e6:	464e      	mov	r6, r9
 80034e8:	4645      	mov	r5, r8
 80034ea:	468b      	mov	fp, r1
 80034ec:	b5e0      	push	{r5, r6, r7, lr}
 80034ee:	001e      	movs	r6, r3
 80034f0:	ab0a      	add	r3, sp, #40	; 0x28
 80034f2:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 80034f4:	b281      	uxth	r1, r0
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80034f6:	469a      	mov	sl, r3
 80034f8:	ab0b      	add	r3, sp, #44	; 0x2c
 80034fa:	781d      	ldrb	r5, [r3, #0]
 80034fc:	ab0c      	add	r3, sp, #48	; 0x30
 80034fe:	781b      	ldrb	r3, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003500:	20e4      	movs	r0, #228	; 0xe4
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003502:	4698      	mov	r8, r3
 8003504:	ab0d      	add	r3, sp, #52	; 0x34
 8003506:	781c      	ldrb	r4, [r3, #0]
 8003508:	ab0e      	add	r3, sp, #56	; 0x38
 800350a:	4691      	mov	r9, r2
 800350c:	781f      	ldrb	r7, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 800350e:	f004 f9c9 	bl	80078a4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003512:	465b      	mov	r3, fp
 8003514:	0a19      	lsrs	r1, r3, #8
 8003516:	b289      	uxth	r1, r1
 8003518:	20e5      	movs	r0, #229	; 0xe5
 800351a:	f004 f9c3 	bl	80078a4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 800351e:	465b      	mov	r3, fp
 8003520:	20e6      	movs	r0, #230	; 0xe6
 8003522:	b299      	uxth	r1, r3
 8003524:	f004 f9be 	bl	80078a4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003528:	464b      	mov	r3, r9
 800352a:	0a19      	lsrs	r1, r3, #8
 800352c:	b289      	uxth	r1, r1
 800352e:	20e7      	movs	r0, #231	; 0xe7
 8003530:	f004 f9b8 	bl	80078a4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003534:	464b      	mov	r3, r9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003536:	0236      	lsls	r6, r6, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003538:	b299      	uxth	r1, r3
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800353a:	4456      	add	r6, sl
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 800353c:	20e8      	movs	r0, #232	; 0xe8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 800353e:	022d      	lsls	r5, r5, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003540:	f004 f9b0 	bl	80078a4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003544:	4445      	add	r5, r8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003546:	b2b1      	uxth	r1, r6
 8003548:	20e9      	movs	r0, #233	; 0xe9
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 800354a:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800354c:	f004 f9aa 	bl	80078a4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8003550:	19e4      	adds	r4, r4, r7
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003552:	b2a9      	uxth	r1, r5
 8003554:	20ea      	movs	r0, #234	; 0xea
 8003556:	f004 f9a5 	bl	80078a4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 800355a:	b2a1      	uxth	r1, r4
 800355c:	20eb      	movs	r0, #235	; 0xeb
 800355e:	f004 f9a1 	bl	80078a4 <EE_WriteVariable>
	
	return result;
}
 8003562:	2000      	movs	r0, #0
 8003564:	bc3c      	pop	{r2, r3, r4, r5}
 8003566:	4690      	mov	r8, r2
 8003568:	4699      	mov	r9, r3
 800356a:	46a2      	mov	sl, r4
 800356c:	46ab      	mov	fp, r5
 800356e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003570 <SaveEEparams>:

BOS_Status SaveEEparams(void){
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003570:	208a      	movs	r0, #138	; 0x8a
BOS_Status SaveEEparams(void){
 8003572:	b510      	push	{r4, lr}
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003574:	4c1e      	ldr	r4, [pc, #120]	; (80035f0 <SaveEEparams+0x80>)
 8003576:	0040      	lsls	r0, r0, #1
 8003578:	7863      	ldrb	r3, [r4, #1]
 800357a:	7821      	ldrb	r1, [r4, #0]
 800357c:	015b      	lsls	r3, r3, #5
 800357e:	4319      	orrs	r1, r3
 8003580:	f004 f990 	bl	80078a4 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 8003584:	208e      	movs	r0, #142	; 0x8e
 8003586:	7921      	ldrb	r1, [r4, #4]
 8003588:	88e3      	ldrh	r3, [r4, #6]
 800358a:	03c9      	lsls	r1, r1, #15
 800358c:	4319      	orrs	r1, r3
 800358e:	b289      	uxth	r1, r1
 8003590:	0040      	lsls	r0, r0, #1
 8003592:	f004 f987 	bl	80078a4 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003596:	2016      	movs	r0, #22
 8003598:	4c16      	ldr	r4, [pc, #88]	; (80035f4 <SaveEEparams+0x84>)
 800359a:	30ff      	adds	r0, #255	; 0xff
 800359c:	8821      	ldrh	r1, [r4, #0]
 800359e:	f004 f981 	bl	80078a4 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 80035a2:	208b      	movs	r0, #139	; 0x8b
 80035a4:	8861      	ldrh	r1, [r4, #2]
 80035a6:	0040      	lsls	r0, r0, #1
 80035a8:	f004 f97c 	bl	80078a4 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 80035ac:	2018      	movs	r0, #24
 80035ae:	7963      	ldrb	r3, [r4, #5]
 80035b0:	7b21      	ldrb	r1, [r4, #12]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	4319      	orrs	r1, r3
 80035b6:	30ff      	adds	r0, #255	; 0xff
 80035b8:	f004 f974 	bl	80078a4 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80035bc:	208c      	movs	r0, #140	; 0x8c
 80035be:	8921      	ldrh	r1, [r4, #8]
 80035c0:	0040      	lsls	r0, r0, #1
 80035c2:	f004 f96f 	bl	80078a4 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80035c6:	201a      	movs	r0, #26
 80035c8:	8961      	ldrh	r1, [r4, #10]
 80035ca:	30ff      	adds	r0, #255	; 0xff
 80035cc:	f004 f96a 	bl	80078a4 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80035d0:	208d      	movs	r0, #141	; 0x8d
 80035d2:	7b63      	ldrb	r3, [r4, #13]
 80035d4:	7921      	ldrb	r1, [r4, #4]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	4319      	orrs	r1, r3
 80035da:	0040      	lsls	r0, r0, #1
 80035dc:	f004 f962 	bl	80078a4 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 80035e0:	201c      	movs	r0, #28
 80035e2:	7ea1      	ldrb	r1, [r4, #26]
 80035e4:	30ff      	adds	r0, #255	; 0xff
 80035e6:	f004 f95d 	bl	80078a4 <EE_WriteVariable>
	
	return result;
}
 80035ea:	2000      	movs	r0, #0
 80035ec:	bd10      	pop	{r4, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	20006e28 	.word	0x20006e28
 80035f4:	20006ea8 	.word	0x20006ea8

080035f8 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 80035f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fa:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 80035fc:	4f12      	ldr	r7, [pc, #72]	; (8003648 <ClearEEportsDir+0x50>)
BOS_Status ClearEEportsDir(void){
 80035fe:	b500      	push	{lr}
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003600:	2234      	movs	r2, #52	; 0x34
 8003602:	2100      	movs	r1, #0
 8003604:	0038      	movs	r0, r7
 8003606:	f00f fb53 	bl	8012cb0 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800360a:	4e10      	ldr	r6, [pc, #64]	; (800364c <ClearEEportsDir+0x54>)
 800360c:	7833      	ldrb	r3, [r6, #0]
	BOS_Status result =BOS_OK;
 800360e:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003610:	2b00      	cmp	r3, #0
 8003612:	d015      	beq.n	8003640 <ClearEEportsDir+0x48>
	BOS_Status result =BOS_OK;
 8003614:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8003616:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003618:	4698      	mov	r8, r3
 800361a:	2502      	movs	r5, #2
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800361c:	2c19      	cmp	r4, #25
 800361e:	d901      	bls.n	8003624 <ClearEEportsDir+0x2c>
			result =BOS_ERR_EEPROM;
 8003620:	230a      	movs	r3, #10
 8003622:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003624:	7833      	ldrb	r3, [r6, #0]
 8003626:	b2ec      	uxtb	r4, r5
 8003628:	42a3      	cmp	r3, r4
 800362a:	d309      	bcc.n	8003640 <ClearEEportsDir+0x48>
 800362c:	1e63      	subs	r3, r4, #1
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	5af9      	ldrh	r1, [r7, r3]
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003632:	1c65      	adds	r5, r4, #1
		if(arrayPortsDir[i - 1])
 8003634:	2900      	cmp	r1, #0
 8003636:	d0f1      	beq.n	800361c <ClearEEportsDir+0x24>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003638:	b2a8      	uxth	r0, r5
 800363a:	f004 f933 	bl	80078a4 <EE_WriteVariable>
 800363e:	e7ed      	b.n	800361c <ClearEEportsDir+0x24>
	}
	
	return result;
}
 8003640:	4640      	mov	r0, r8
 8003642:	bc04      	pop	{r2}
 8003644:	4690      	mov	r8, r2
 8003646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003648:	20007334 	.word	0x20007334
 800364c:	20000008 	.word	0x20000008

08003650 <IsLowerCLIbaud>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003650:	230e      	movs	r3, #14
uint8_t IsLowerCLIbaud(void){
 8003652:	b570      	push	{r4, r5, r6, lr}
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003654:	2412      	movs	r4, #18
uint8_t IsLowerCLIbaud(void){
 8003656:	b08e      	sub	sp, #56	; 0x38
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003658:	ad03      	add	r5, sp, #12
 800365a:	446b      	add	r3, sp
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 800365c:	446c      	add	r4, sp
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	002a      	movs	r2, r5
 8003662:	ab06      	add	r3, sp, #24
 8003664:	a905      	add	r1, sp, #20
 8003666:	2001      	movs	r0, #1
 8003668:	f009 f94c 	bl	800c904 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 800366c:	aa04      	add	r2, sp, #16
 800366e:	ab08      	add	r3, sp, #32
 8003670:	a907      	add	r1, sp, #28
 8003672:	9400      	str	r4, [sp, #0]
 8003674:	2002      	movs	r0, #2
 8003676:	f009 f945 	bl	800c904 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367a:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367e:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003680:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003682:	a909      	add	r1, sp, #36	; 0x24
 8003684:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003686:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	960b      	str	r6, [sp, #44]	; 0x2c
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 800368a:	f00d fa0b 	bl	8010aa4 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800368e:	2302      	movs	r3, #2
 8003690:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003692:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003694:	a909      	add	r1, sp, #36	; 0x24
 8003696:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003698:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800369a:	960a      	str	r6, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 800369c:	f00d fa02 	bl	8010aa4 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80036a0:	8829      	ldrh	r1, [r5, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	9805      	ldr	r0, [sp, #20]
 80036a6:	f00d fb9d 	bl	8010de4 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80036aa:	2005      	movs	r0, #5
 80036ac:	f009 fccc 	bl	800d048 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036b0:	8821      	ldrh	r1, [r4, #0]
 80036b2:	9808      	ldr	r0, [sp, #32]
 80036b4:	f00d fb90 	bl	8010dd8 <HAL_GPIO_ReadPin>
 80036b8:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 80036ba:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10f      	bne.n	80036e0 <IsLowerCLIbaud+0x90>
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 80036c0:	8829      	ldrh	r1, [r5, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	9805      	ldr	r0, [sp, #20]
 80036c6:	f00d fb8d 	bl	8010de4 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 80036ca:	2005      	movs	r0, #5
 80036cc:	f009 fcbc 	bl	800d048 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 80036d0:	8821      	ldrh	r1, [r4, #0]
 80036d2:	9808      	ldr	r0, [sp, #32]
 80036d4:	f00d fb80 	bl	8010dd8 <HAL_GPIO_ReadPin>
 80036d8:	3801      	subs	r0, #1
 80036da:	4243      	negs	r3, r0
 80036dc:	4158      	adcs	r0, r3
			return 1;
 80036de:	b2c0      	uxtb	r0, r0
}
 80036e0:	b00e      	add	sp, #56	; 0x38
 80036e2:	bd70      	pop	{r4, r5, r6, pc}

080036e4 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 80036e4:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 80036e6:	f009 fee9 	bl	800d4bc <GetUart>
	
	huart->Init.BaudRate =57600;
 80036ea:	23e1      	movs	r3, #225	; 0xe1
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 80036f6:	2380      	movs	r3, #128	; 0x80
	UART_HandleTypeDef *huart =GetUart(port);
 80036f8:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 80036fa:	015b      	lsls	r3, r3, #5
 80036fc:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 80036fe:	f00e feb3 	bl	8012468 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8003702:	2120      	movs	r1, #32
 8003704:	6822      	ldr	r2, [r4, #0]
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	430b      	orrs	r3, r1
 800370a:	6013      	str	r3, [r2, #0]
}
 800370c:	bd10      	pop	{r4, pc}
 800370e:	46c0      	nop			; (mov r8, r8)

08003710 <IsModuleParameter>:

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <IsModuleParameter+0x14>)
uint8_t IsModuleParameter(char *name){
 8003712:	b510      	push	{r4, lr}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003714:	6899      	ldr	r1, [r3, #8]
 8003716:	f7fc fcf5 	bl	8000104 <strcmp>
 800371a:	4243      	negs	r3, r0
 800371c:	4158      	adcs	r0, r3
			return i + 1;
	}
	return 0;
}
 800371e:	b2c0      	uxtb	r0, r0
 8003720:	bd10      	pop	{r4, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	20000094 	.word	0x20000094

08003728 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	46de      	mov	lr, fp
 800372c:	4657      	mov	r7, sl
 800372e:	464e      	mov	r6, r9
 8003730:	4645      	mov	r5, r8
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 8003732:	4923      	ldr	r1, [pc, #140]	; (80037c0 <IsMathOperator+0x98>)
uint8_t IsMathOperator(char *string){
 8003734:	b5e0      	push	{r5, r6, r7, lr}
 8003736:	0004      	movs	r4, r0
		if(!strcmp(string,"="))
 8003738:	f7fc fce4 	bl	8000104 <strcmp>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 800373c:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <IsMathOperator+0x9c>)
		if(!strcmp(string,"="))
 800373e:	0006      	movs	r6, r0
		else if(!strcmp(string,"<"))
 8003740:	4698      	mov	r8, r3
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 8003742:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <IsMathOperator+0xa0>)
		if(!strcmp(string,"="))
 8003744:	2506      	movs	r5, #6
		else if(!strcmp(string,">="))
 8003746:	4699      	mov	r9, r3
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003748:	4b20      	ldr	r3, [pc, #128]	; (80037cc <IsMathOperator+0xa4>)
		else if(!strcmp(string,">"))
 800374a:	4f21      	ldr	r7, [pc, #132]	; (80037d0 <IsMathOperator+0xa8>)
		else if(!strcmp(string,"<="))
 800374c:	469a      	mov	sl, r3
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 800374e:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <IsMathOperator+0xac>)
 8003750:	469b      	mov	fp, r3
		if(!strcmp(string,"="))
 8003752:	2e00      	cmp	r6, #0
 8003754:	d028      	beq.n	80037a8 <IsMathOperator+0x80>
		else if(!strcmp(string,">"))
 8003756:	0039      	movs	r1, r7
 8003758:	0020      	movs	r0, r4
 800375a:	f7fc fcd3 	bl	8000104 <strcmp>
 800375e:	2800      	cmp	r0, #0
 8003760:	d024      	beq.n	80037ac <IsMathOperator+0x84>
		else if(!strcmp(string,"<"))
 8003762:	4641      	mov	r1, r8
 8003764:	0020      	movs	r0, r4
 8003766:	f7fc fccd 	bl	8000104 <strcmp>
 800376a:	2800      	cmp	r0, #0
 800376c:	d020      	beq.n	80037b0 <IsMathOperator+0x88>
		else if(!strcmp(string,">="))
 800376e:	4649      	mov	r1, r9
 8003770:	0020      	movs	r0, r4
 8003772:	f7fc fcc7 	bl	8000104 <strcmp>
 8003776:	2800      	cmp	r0, #0
 8003778:	d01c      	beq.n	80037b4 <IsMathOperator+0x8c>
		else if(!strcmp(string,"<="))
 800377a:	4651      	mov	r1, sl
 800377c:	0020      	movs	r0, r4
 800377e:	f7fc fcc1 	bl	8000104 <strcmp>
 8003782:	2800      	cmp	r0, #0
 8003784:	d018      	beq.n	80037b8 <IsMathOperator+0x90>
		else if(!strcmp(string,"!="))
 8003786:	4659      	mov	r1, fp
 8003788:	0020      	movs	r0, r4
 800378a:	f7fc fcbb 	bl	8000104 <strcmp>
 800378e:	2800      	cmp	r0, #0
 8003790:	d014      	beq.n	80037bc <IsMathOperator+0x94>
 8003792:	3d01      	subs	r5, #1
 8003794:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003796:	2d00      	cmp	r5, #0
 8003798:	d1db      	bne.n	8003752 <IsMathOperator+0x2a>
			return MATH_NOT_EQUAL;
	}
	return 0;
 800379a:	2000      	movs	r0, #0
}
 800379c:	bc3c      	pop	{r2, r3, r4, r5}
 800379e:	4690      	mov	r8, r2
 80037a0:	4699      	mov	r9, r3
 80037a2:	46a2      	mov	sl, r4
 80037a4:	46ab      	mov	fp, r5
 80037a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 80037a8:	2001      	movs	r0, #1
 80037aa:	e7f7      	b.n	800379c <IsMathOperator+0x74>
			return MATH_GREATER;
 80037ac:	2002      	movs	r0, #2
 80037ae:	e7f5      	b.n	800379c <IsMathOperator+0x74>
			return MATH_SMALLER;
 80037b0:	2003      	movs	r0, #3
 80037b2:	e7f3      	b.n	800379c <IsMathOperator+0x74>
			return MATH_GREATER_EQUAL;
 80037b4:	2004      	movs	r0, #4
 80037b6:	e7f1      	b.n	800379c <IsMathOperator+0x74>
			return MATH_SMALLER_EQUAL;
 80037b8:	2005      	movs	r0, #5
 80037ba:	e7ef      	b.n	800379c <IsMathOperator+0x74>
			return MATH_NOT_EQUAL;
 80037bc:	2006      	movs	r0, #6
 80037be:	e7ed      	b.n	800379c <IsMathOperator+0x74>
 80037c0:	08017c00 	.word	0x08017c00
 80037c4:	08017c08 	.word	0x08017c08
 80037c8:	08017c0c 	.word	0x08017c0c
 80037cc:	08017c10 	.word	0x08017c10
 80037d0:	08017c04 	.word	0x08017c04
 80037d4:	08017c14 	.word	0x08017c14

080037d8 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037da:	46c6      	mov	lr, r8
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037dc:	4e12      	ldr	r6, [pc, #72]	; (8003828 <ExploreNeighbors+0x50>)
 80037de:	4b13      	ldr	r3, [pc, #76]	; (800382c <ExploreNeighbors+0x54>)
			messageParams[1] =(uint8_t )myPN;
 80037e0:	0035      	movs	r5, r6
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037e2:	0007      	movs	r7, r0
	for(uint8_t port =1; port <= NumOfPorts; port++){
 80037e4:	2401      	movs	r4, #1
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037e6:	4698      	mov	r8, r3
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037e8:	b500      	push	{lr}
			messageParams[1] =(uint8_t )myPN;
 80037ea:	3524      	adds	r5, #36	; 0x24
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037ec:	b082      	sub	sp, #8
		if(port != ignore){
 80037ee:	42a7      	cmp	r7, r4
 80037f0:	d011      	beq.n	8003816 <ExploreNeighbors+0x3e>
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037f2:	4643      	mov	r3, r8
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	2224      	movs	r2, #36	; 0x24
 80037f8:	0a19      	lsrs	r1, r3, #8
			messageParams[1] =(uint8_t )myPN;
 80037fa:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 80037fc:	2303      	movs	r3, #3
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037fe:	54b1      	strb	r1, [r6, r2]
			messageParams[2] =port;
 8003800:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003802:	2200      	movs	r2, #0
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2100      	movs	r1, #0
 8003808:	3307      	adds	r3, #7
 800380a:	0020      	movs	r0, r4
 800380c:	f005 fee4 	bl	80095d8 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003810:	200a      	movs	r0, #10
 8003812:	f009 ff17 	bl	800d644 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003816:	3401      	adds	r4, #1
 8003818:	b2e4      	uxtb	r4, r4
 800381a:	2c07      	cmp	r4, #7
 800381c:	d1e7      	bne.n	80037ee <ExploreNeighbors+0x16>
		}
	}
	
	return result;
}
 800381e:	2000      	movs	r0, #0
 8003820:	b002      	add	sp, #8
 8003822:	bc04      	pop	{r2}
 8003824:	4690      	mov	r8, r2
 8003826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003828:	20000b18 	.word	0x20000b18
 800382c:	20000008 	.word	0x20000008

08003830 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003832:	4657      	mov	r7, sl
 8003834:	464e      	mov	r6, r9
 8003836:	4645      	mov	r5, r8
 8003838:	46de      	mov	lr, fp
 800383a:	b5e0      	push	{r5, r6, r7, lr}
 800383c:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 800383e:	466a      	mov	r2, sp
 8003840:	4b4b      	ldr	r3, [pc, #300]	; (8003970 <FindBroadcastRoutes+0x140>)
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003842:	af00      	add	r7, sp, #0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003844:	781d      	ldrb	r5, [r3, #0]
 8003846:	1deb      	adds	r3, r5, #7
 8003848:	08db      	lsrs	r3, r3, #3
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	469d      	mov	sp, r3
 8003850:	466e      	mov	r6, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003852:	2d00      	cmp	r5, #0
 8003854:	d00c      	beq.n	8003870 <FindBroadcastRoutes+0x40>
		modules[m] =0;
 8003856:	2100      	movs	r1, #0
 8003858:	1e6c      	subs	r4, r5, #1
 800385a:	4a46      	ldr	r2, [pc, #280]	; (8003974 <FindBroadcastRoutes+0x144>)
 800385c:	b2e4      	uxtb	r4, r4
 800385e:	3401      	adds	r4, #1
 8003860:	3254      	adds	r2, #84	; 0x54
 8003862:	446c      	add	r4, sp
 8003864:	7019      	strb	r1, [r3, #0]
 8003866:	3301      	adds	r3, #1
		bcastRoutes[m] =0;
 8003868:	8011      	strh	r1, [r2, #0]
 800386a:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 800386c:	42a3      	cmp	r3, r4
 800386e:	d1f9      	bne.n	8003864 <FindBroadcastRoutes+0x34>
	}
	modules[src - 1] =++level;					// Tag the source
 8003870:	2301      	movs	r3, #1
 8003872:	2216      	movs	r2, #22
 8003874:	3801      	subs	r0, #1
 8003876:	5433      	strb	r3, [r6, r0]
 8003878:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <FindBroadcastRoutes+0x148>)
 800387a:	4342      	muls	r2, r0
 800387c:	469c      	mov	ip, r3

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 800387e:	4b3d      	ldr	r3, [pc, #244]	; (8003974 <FindBroadcastRoutes+0x144>)
 8003880:	0040      	lsls	r0, r0, #1
 8003882:	1818      	adds	r0, r3, r0
 8003884:	2301      	movs	r3, #1
 8003886:	3202      	adds	r2, #2
 8003888:	4462      	add	r2, ip
 800388a:	469c      	mov	ip, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 800388c:	3301      	adds	r3, #1
	modules[src - 1] =++level;					// Tag the source
 800388e:	2100      	movs	r1, #0
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003890:	2454      	movs	r4, #84	; 0x54
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003892:	469a      	mov	sl, r3
 8003894:	46b3      	mov	fp, r6
 8003896:	607d      	str	r5, [r7, #4]
		if(array[src - 1][p]){
 8003898:	8813      	ldrh	r3, [r2, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <FindBroadcastRoutes+0x8a>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 800389e:	5b05      	ldrh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80038a0:	08db      	lsrs	r3, r3, #3
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80038a2:	46a8      	mov	r8, r5
 80038a4:	4665      	mov	r5, ip
 80038a6:	408d      	lsls	r5, r1
 80038a8:	46a9      	mov	r9, r5
 80038aa:	4645      	mov	r5, r8
 80038ac:	464e      	mov	r6, r9
 80038ae:	4335      	orrs	r5, r6
 80038b0:	5305      	strh	r5, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80038b2:	4655      	mov	r5, sl
 80038b4:	445b      	add	r3, fp
 80038b6:	3b01      	subs	r3, #1
 80038b8:	701d      	strb	r5, [r3, #0]
 80038ba:	3101      	adds	r1, #1
 80038bc:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 80038be:	2906      	cmp	r1, #6
 80038c0:	d1ea      	bne.n	8003898 <FindBroadcastRoutes+0x68>
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038c2:	2254      	movs	r2, #84	; 0x54
	++level;												// Move one level
 80038c4:	2302      	movs	r3, #2
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038c6:	4692      	mov	sl, r2
 80038c8:	465e      	mov	r6, fp
	++level;												// Move one level
 80038ca:	469b      	mov	fp, r3
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038cc:	4b29      	ldr	r3, [pc, #164]	; (8003974 <FindBroadcastRoutes+0x144>)
 80038ce:	687d      	ldr	r5, [r7, #4]
 80038d0:	449a      	add	sl, r3
 80038d2:	4653      	mov	r3, sl
 80038d4:	46a8      	mov	r8, r5
 80038d6:	465d      	mov	r5, fp
 80038d8:	603b      	str	r3, [r7, #0]
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038da:	4643      	mov	r3, r8
		++level;											// Move one level
 80038dc:	3501      	adds	r5, #1
 80038de:	b2ed      	uxtb	r5, r5
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d03b      	beq.n	800395c <FindBroadcastRoutes+0x12c>
 80038e4:	1e6b      	subs	r3, r5, #1
 80038e6:	4699      	mov	r9, r3
		untaged =0;								// Reset the untaged counter
 80038e8:	2300      	movs	r3, #0
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038ea:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 80038ec:	469c      	mov	ip, r3
 80038ee:	46ab      	mov	fp, r5
 80038f0:	e003      	b.n	80038fa <FindBroadcastRoutes+0xca>
 80038f2:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038f4:	b2d3      	uxtb	r3, r2
 80038f6:	4598      	cmp	r8, r3
 80038f8:	d92c      	bls.n	8003954 <FindBroadcastRoutes+0x124>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 80038fa:	5cb3      	ldrb	r3, [r6, r2]
 80038fc:	454b      	cmp	r3, r9
 80038fe:	d1f8      	bne.n	80038f2 <FindBroadcastRoutes+0xc2>
 8003900:	2116      	movs	r1, #22
 8003902:	4b1e      	ldr	r3, [pc, #120]	; (800397c <FindBroadcastRoutes+0x14c>)
 8003904:	4351      	muls	r1, r2
 8003906:	469a      	mov	sl, r3
 8003908:	2000      	movs	r0, #0
 800390a:	4451      	add	r1, sl
 800390c:	46e2      	mov	sl, ip
 800390e:	4694      	mov	ip, r2
 8003910:	0055      	lsls	r5, r2, #1
 8003912:	607d      	str	r5, [r7, #4]
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003914:	880b      	ldrh	r3, [r1, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d012      	beq.n	8003940 <FindBroadcastRoutes+0x110>
 800391a:	08db      	lsrs	r3, r3, #3
 800391c:	3b01      	subs	r3, #1
 800391e:	5cf2      	ldrb	r2, [r6, r3]
 8003920:	2a00      	cmp	r2, #0
 8003922:	d10d      	bne.n	8003940 <FindBroadcastRoutes+0x110>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003924:	683c      	ldr	r4, [r7, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	5b15      	ldrh	r5, [r2, r4]
 800392a:	2201      	movs	r2, #1
 800392c:	4082      	lsls	r2, r0
 800392e:	4315      	orrs	r5, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	5315      	strh	r5, [r2, r4]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
						++untaged;
 8003934:	4654      	mov	r4, sl
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003936:	465a      	mov	r2, fp
						++untaged;
 8003938:	3401      	adds	r4, #1
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 800393a:	54f2      	strb	r2, [r6, r3]
						++untaged;
 800393c:	b2e3      	uxtb	r3, r4
 800393e:	469a      	mov	sl, r3
 8003940:	3001      	adds	r0, #1
 8003942:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003944:	2806      	cmp	r0, #6
 8003946:	d1e5      	bne.n	8003914 <FindBroadcastRoutes+0xe4>
 8003948:	4662      	mov	r2, ip
 800394a:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 800394c:	b2d3      	uxtb	r3, r2
 800394e:	46d4      	mov	ip, sl
 8003950:	4598      	cmp	r8, r3
 8003952:	d8d2      	bhi.n	80038fa <FindBroadcastRoutes+0xca>
					}
				}
			}
		}
	} while(untaged);
 8003954:	4663      	mov	r3, ip
 8003956:	465d      	mov	r5, fp
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1be      	bne.n	80038da <FindBroadcastRoutes+0xaa>
	
	return result;
}
 800395c:	2000      	movs	r0, #0
 800395e:	46bd      	mov	sp, r7
 8003960:	b003      	add	sp, #12
 8003962:	bc3c      	pop	{r2, r3, r4, r5}
 8003964:	4690      	mov	r8, r2
 8003966:	4699      	mov	r9, r3
 8003968:	46a2      	mov	sl, r4
 800396a:	46ab      	mov	fp, r5
 800396c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	20000008 	.word	0x20000008
 8003974:	20000b18 	.word	0x20000b18
 8003978:	20000f0c 	.word	0x20000f0c
 800397c:	20000f0e 	.word	0x20000f0e

08003980 <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003982:	46de      	mov	lr, fp
 8003984:	464e      	mov	r6, r9
 8003986:	4645      	mov	r5, r8
 8003988:	4657      	mov	r7, sl
 800398a:	b5e0      	push	{r5, r6, r7, lr}
 800398c:	b091      	sub	sp, #68	; 0x44
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 800398e:	ac03      	add	r4, sp, #12
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003990:	0005      	movs	r5, r0
 8003992:	000e      	movs	r6, r1
 8003994:	9101      	str	r1, [sp, #4]
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003996:	2232      	movs	r2, #50	; 0x32
 8003998:	2100      	movs	r1, #0
 800399a:	0020      	movs	r0, r4
 800399c:	f00f f988 	bl	8012cb0 <memset>
	uint8_t alt =0;
	uint8_t u =0;
	uint8_t v =0;
	uint8_t j =0;
	
	memset(route,0,sizeof(route));
 80039a0:	221a      	movs	r2, #26
 80039a2:	2100      	movs	r1, #0
 80039a4:	4862      	ldr	r0, [pc, #392]	; (8003b30 <FindRoute+0x1b0>)
 80039a6:	f00f f983 	bl	8012cb0 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80039aa:	2100      	movs	r1, #0
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039ac:	2024      	movs	r0, #36	; 0x24
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80039ae:	4b61      	ldr	r3, [pc, #388]	; (8003b34 <FindRoute+0x1b4>)
 80039b0:	1e6a      	subs	r2, r5, #1
 80039b2:	469c      	mov	ip, r3
 80039b4:	189b      	adds	r3, r3, r2
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039b6:	5419      	strb	r1, [r3, r0]
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80039b8:	7219      	strb	r1, [r3, #8]
 80039ba:	2316      	movs	r3, #22
 80039bc:	4353      	muls	r3, r2
 80039be:	4a5e      	ldr	r2, [pc, #376]	; (8003b38 <FindRoute+0x1b8>)
 80039c0:	3302      	adds	r3, #2
 80039c2:	4693      	mov	fp, r2
 80039c4:	445b      	add	r3, fp
 80039c6:	4699      	mov	r9, r3
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039c8:	001a      	movs	r2, r3
	
	/* Check adjacent neighbors first! */
	for(int col =1; col <= 6; col++){
 80039ca:	3823      	subs	r0, #35	; 0x23
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 80039cc:	b2b1      	uxth	r1, r6
 80039ce:	8813      	ldrh	r3, [r2, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <FindRoute+0x5c>
 80039d4:	08db      	lsrs	r3, r3, #3
 80039d6:	428b      	cmp	r3, r1
 80039d8:	d100      	bne.n	80039dc <FindRoute+0x5c>
 80039da:	e099      	b.n	8003b10 <FindRoute+0x190>
	for(int col =1; col <= 6; col++){
 80039dc:	3001      	adds	r0, #1
 80039de:	3202      	adds	r2, #2
 80039e0:	2807      	cmp	r0, #7
 80039e2:	d1f4      	bne.n	80039ce <FindRoute+0x4e>
			return col;
		}
	}
	
	/* Initialization */
	for(int i =1; i <= N; i++){
 80039e4:	4b55      	ldr	r3, [pc, #340]	; (8003b3c <FindRoute+0x1bc>)
 80039e6:	7819      	ldrb	r1, [r3, #0]
 80039e8:	2301      	movs	r3, #1
 80039ea:	2900      	cmp	r1, #0
 80039ec:	d100      	bne.n	80039f0 <FindRoute+0x70>
 80039ee:	e09a      	b.n	8003b26 <FindRoute+0x1a6>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 80039f0:	2208      	movs	r2, #8
 80039f2:	4462      	add	r2, ip
 80039f4:	4690      	mov	r8, r2
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 80039f6:	2200      	movs	r2, #0
 80039f8:	4666      	mov	r6, ip
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 80039fa:	27ff      	movs	r7, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 80039fc:	4692      	mov	sl, r2
 80039fe:	3624      	adds	r6, #36	; 0x24
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003a00:	429d      	cmp	r5, r3
 8003a02:	d005      	beq.n	8003a10 <FindRoute+0x90>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a04:	4640      	mov	r0, r8
 8003a06:	1e5a      	subs	r2, r3, #1
 8003a08:	5487      	strb	r7, [r0, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003a0a:	4650      	mov	r0, sl
 8003a0c:	18b2      	adds	r2, r6, r2
 8003a0e:	7010      	strb	r0, [r2, #0]
	for(int i =1; i <= N; i++){
 8003a10:	3301      	adds	r3, #1
 8003a12:	428b      	cmp	r3, r1
 8003a14:	ddf4      	ble.n	8003a00 <FindRoute+0x80>
 8003a16:	2308      	movs	r3, #8
 8003a18:	4463      	add	r3, ip
	uint8_t u =0;
 8003a1a:	2500      	movs	r5, #0
 8003a1c:	4698      	mov	r8, r3
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
 8003a1e:	2201      	movs	r2, #1
	
	for(int i =0; i < N; i++){
 8003a20:	2300      	movs	r3, #0
		temp &=Q[i];
 8003a22:	5ce0      	ldrb	r0, [r4, r3]
	for(int i =0; i < N; i++){
 8003a24:	3301      	adds	r3, #1
		temp &=Q[i];
 8003a26:	4002      	ands	r2, r0
	for(int i =0; i < N; i++){
 8003a28:	428b      	cmp	r3, r1
 8003a2a:	dbfa      	blt.n	8003a22 <FindRoute+0xa2>
	while(!QnotEmpty(Q)){
 8003a2c:	2a00      	cmp	r2, #0
 8003a2e:	d000      	beq.n	8003a32 <FindRoute+0xb2>
 8003a30:	e07c      	b.n	8003b2c <FindRoute+0x1ac>
 8003a32:	4663      	mov	r3, ip
 8003a34:	7a1a      	ldrb	r2, [r3, #8]
	if(!Q[0])						// Not visited yet
 8003a36:	7823      	ldrb	r3, [r4, #0]
		smallest =arr[0];
 8003a38:	0010      	movs	r0, r2
	if(!Q[0])						// Not visited yet
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d000      	beq.n	8003a40 <FindRoute+0xc0>
	uint8_t smallest =0xFF;
 8003a3e:	20ff      	movs	r0, #255	; 0xff
 8003a40:	2500      	movs	r5, #0
 8003a42:	2300      	movs	r3, #0
 8003a44:	e001      	b.n	8003a4a <FindRoute+0xca>
 8003a46:	4642      	mov	r2, r8
 8003a48:	5c9a      	ldrb	r2, [r3, r2]
		if((arr[i] < smallest) && !Q[i]){
 8003a4a:	4290      	cmp	r0, r2
 8003a4c:	d904      	bls.n	8003a58 <FindRoute+0xd8>
 8003a4e:	5ce6      	ldrb	r6, [r4, r3]
 8003a50:	2e00      	cmp	r6, #0
 8003a52:	d101      	bne.n	8003a58 <FindRoute+0xd8>
			index =i;
 8003a54:	0010      	movs	r0, r2
 8003a56:	b2dd      	uxtb	r5, r3
	for(int i =0; i < N; i++){
 8003a58:	3301      	adds	r3, #1
 8003a5a:	428b      	cmp	r3, r1
 8003a5c:	dbf3      	blt.n	8003a46 <FindRoute+0xc6>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003a5e:	3501      	adds	r5, #1
		if(u == desID){
 8003a60:	9b01      	ldr	r3, [sp, #4]
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003a62:	b2ed      	uxtb	r5, r5
		if(u == desID){
 8003a64:	429d      	cmp	r5, r3
 8003a66:	d023      	beq.n	8003ab0 <FindRoute+0x130>
			Q[u - 1] =1;									// Remove u from Q
 8003a68:	2301      	movs	r3, #1
 8003a6a:	1e6f      	subs	r7, r5, #1
 8003a6c:	55e3      	strb	r3, [r4, r7]
 8003a6e:	2316      	movs	r3, #22
 8003a70:	465e      	mov	r6, fp
 8003a72:	437b      	muls	r3, r7
 8003a74:	360e      	adds	r6, #14
 8003a76:	1c9a      	adds	r2, r3, #2
 8003a78:	445a      	add	r2, fp
 8003a7a:	18f6      	adds	r6, r6, r3
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a7c:	4467      	add	r7, ip
 8003a7e:	9100      	str	r1, [sp, #0]
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003a80:	8813      	ldrh	r3, [r2, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00f      	beq.n	8003aa6 <FindRoute+0x126>
				v =(array[u - 1][n] >> 3);
 8003a86:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	5ce0      	ldrb	r0, [r4, r3]
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d109      	bne.n	8003aa6 <FindRoute+0x126>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a92:	7a38      	ldrb	r0, [r7, #8]
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a94:	4463      	add	r3, ip
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a96:	3001      	adds	r0, #1
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a98:	7a19      	ldrb	r1, [r3, #8]
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a9a:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a9c:	4281      	cmp	r1, r0
 8003a9e:	d902      	bls.n	8003aa6 <FindRoute+0x126>
						routePrev[v - 1] =u;
 8003aa0:	2124      	movs	r1, #36	; 0x24
						routeDist[v - 1] =alt;
 8003aa2:	7218      	strb	r0, [r3, #8]
						routePrev[v - 1] =u;
 8003aa4:	545d      	strb	r5, [r3, r1]
 8003aa6:	3202      	adds	r2, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003aa8:	42b2      	cmp	r2, r6
 8003aaa:	d1e9      	bne.n	8003a80 <FindRoute+0x100>
 8003aac:	9900      	ldr	r1, [sp, #0]
 8003aae:	e7b6      	b.n	8003a1e <FindRoute+0x9e>
 8003ab0:	3b01      	subs	r3, #1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	4463      	add	r3, ip
 8003ab6:	5c9a      	ldrb	r2, [r3, r2]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2a00      	cmp	r2, #0
 8003abc:	d101      	bne.n	8003ac2 <FindRoute+0x142>
 8003abe:	e00b      	b.n	8003ad8 <FindRoute+0x158>
 8003ac0:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003ac2:	491b      	ldr	r1, [pc, #108]	; (8003b30 <FindRoute+0x1b0>)
 8003ac4:	1c58      	adds	r0, r3, #1
 8003ac6:	54cd      	strb	r5, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ac8:	4663      	mov	r3, ip
 8003aca:	189b      	adds	r3, r3, r2
 8003acc:	3323      	adds	r3, #35	; 0x23
 8003ace:	7819      	ldrb	r1, [r3, #0]
 8003ad0:	0015      	movs	r5, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003ad2:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ad4:	2900      	cmp	r1, #0
 8003ad6:	d1f3      	bne.n	8003ac0 <FindRoute+0x140>
	for(int col =1; col <= 6; col++){
 8003ad8:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003ada:	464c      	mov	r4, r9
 8003adc:	9b01      	ldr	r3, [sp, #4]
 8003ade:	4463      	add	r3, ip
 8003ae0:	8822      	ldrh	r2, [r4, #0]
 8003ae2:	2a00      	cmp	r2, #0
 8003ae4:	d008      	beq.n	8003af8 <FindRoute+0x178>
 8003ae6:	4d12      	ldr	r5, [pc, #72]	; (8003b30 <FindRoute+0x1b0>)
 8003ae8:	79d9      	ldrb	r1, [r3, #7]
 8003aea:	46ac      	mov	ip, r5
 8003aec:	4461      	add	r1, ip
 8003aee:	3901      	subs	r1, #1
 8003af0:	7809      	ldrb	r1, [r1, #0]
 8003af2:	08d2      	lsrs	r2, r2, #3
 8003af4:	4291      	cmp	r1, r2
 8003af6:	d014      	beq.n	8003b22 <FindRoute+0x1a2>
	for(int col =1; col <= 6; col++){
 8003af8:	3001      	adds	r0, #1
 8003afa:	3402      	adds	r4, #2
 8003afc:	2807      	cmp	r0, #7
 8003afe:	d1ef      	bne.n	8003ae0 <FindRoute+0x160>
	return 0;
 8003b00:	2000      	movs	r0, #0
}
 8003b02:	b011      	add	sp, #68	; 0x44
 8003b04:	bc3c      	pop	{r2, r3, r4, r5}
 8003b06:	4690      	mov	r8, r2
 8003b08:	4699      	mov	r9, r3
 8003b0a:	46a2      	mov	sl, r4
 8003b0c:	46ab      	mov	fp, r5
 8003b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			routeDist[desID - 1] =1;
 8003b10:	9901      	ldr	r1, [sp, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	000b      	movs	r3, r1
 8003b16:	4463      	add	r3, ip
 8003b18:	71da      	strb	r2, [r3, #7]
			route[0] =desID;
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <FindRoute+0x1b0>)
			return col;
 8003b1c:	b2c0      	uxtb	r0, r0
			route[0] =desID;
 8003b1e:	7019      	strb	r1, [r3, #0]
			return col;
 8003b20:	e7ef      	b.n	8003b02 <FindRoute+0x182>
			return col;
 8003b22:	b2c0      	uxtb	r0, r0
 8003b24:	e7ed      	b.n	8003b02 <FindRoute+0x182>
	for(int i =1; i <= N; i++){
 8003b26:	425b      	negs	r3, r3
 8003b28:	2500      	movs	r5, #0
 8003b2a:	e7c2      	b.n	8003ab2 <FindRoute+0x132>
 8003b2c:	1e6b      	subs	r3, r5, #1
 8003b2e:	e7c0      	b.n	8003ab2 <FindRoute+0x132>
 8003b30:	20006fbc 	.word	0x20006fbc
 8003b34:	20000b98 	.word	0x20000b98
 8003b38:	20000f0c 	.word	0x20000f0c
 8003b3c:	20000008 	.word	0x20000008

08003b40 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b42:	4657      	mov	r7, sl
 8003b44:	464e      	mov	r6, r9
 8003b46:	46de      	mov	lr, fp
 8003b48:	4645      	mov	r5, r8
 8003b4a:	4699      	mov	r9, r3
 8003b4c:	b5e0      	push	{r5, r6, r7, lr}
	myOutport =FindRoute(myID,dst);
 8003b4e:	4c3d      	ldr	r4, [pc, #244]	; (8003c44 <remoteBootloaderUpdate+0x104>)
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003b50:	b085      	sub	sp, #20
 8003b52:	4682      	mov	sl, r0
	myOutport =FindRoute(myID,dst);
 8003b54:	7820      	ldrb	r0, [r4, #0]
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003b56:	4688      	mov	r8, r1
 8003b58:	0017      	movs	r7, r2
	myOutport =FindRoute(myID,dst);
 8003b5a:	f7ff ff11 	bl	8003980 <FindRoute>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003b5e:	464b      	mov	r3, r9
	myOutport =FindRoute(myID,dst);
 8003b60:	0006      	movs	r6, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d126      	bne.n	8003bb4 <remoteBootloaderUpdate+0x74>
		if(NumberOfHops(dst)== 1)
 8003b66:	4b38      	ldr	r3, [pc, #224]	; (8003c48 <remoteBootloaderUpdate+0x108>)
 8003b68:	7821      	ldrb	r1, [r4, #0]
 8003b6a:	4443      	add	r3, r8
 8003b6c:	79da      	ldrb	r2, [r3, #7]
 8003b6e:	2a01      	cmp	r2, #1
 8003b70:	d04e      	beq.n	8003c10 <remoteBootloaderUpdate+0xd0>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8003b72:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <remoteBootloaderUpdate+0x10c>)
 8003b74:	189b      	adds	r3, r3, r2
 8003b76:	3b01      	subs	r3, #1
 8003b78:	781d      	ldrb	r5, [r3, #0]
	if(src == myID){
 8003b7a:	458a      	cmp	sl, r1
 8003b7c:	d120      	bne.n	8003bc0 <remoteBootloaderUpdate+0x80>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003b7e:	f009 fe6d 	bl	800d85c <FreeRTOS_CLIGetOutputBuffer>
 8003b82:	4683      	mov	fp, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8003b84:	4b32      	ldr	r3, [pc, #200]	; (8003c50 <remoteBootloaderUpdate+0x110>)
 8003b86:	4642      	mov	r2, r8
 8003b88:	6819      	ldr	r1, [r3, #0]
 8003b8a:	4658      	mov	r0, fp
 8003b8c:	f00f fa8a 	bl	80130a4 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8003b90:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <remoteBootloaderUpdate+0x114>)
 8003b92:	4658      	mov	r0, fp
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	f00f faa5 	bl	80130e4 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8003b9a:	4658      	mov	r0, fp
 8003b9c:	f7fc fabc 	bl	8000118 <strlen>
 8003ba0:	2332      	movs	r3, #50	; 0x32
 8003ba2:	b282      	uxth	r2, r0
 8003ba4:	4659      	mov	r1, fp
 8003ba6:	0038      	movs	r0, r7
 8003ba8:	f009 fc32 	bl	800d410 <writePxITMutex>
		Delay_ms(100);
 8003bac:	2064      	movs	r0, #100	; 0x64
 8003bae:	f00b fccd 	bl	800f54c <HAL_Delay>
 8003bb2:	e005      	b.n	8003bc0 <remoteBootloaderUpdate+0x80>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003bb4:	7825      	ldrb	r5, [r4, #0]
 8003bb6:	4545      	cmp	r5, r8
 8003bb8:	d026      	beq.n	8003c08 <remoteBootloaderUpdate+0xc8>
	if(src == myID){
 8003bba:	4555      	cmp	r5, sl
 8003bbc:	d02c      	beq.n	8003c18 <remoteBootloaderUpdate+0xd8>
	uint8_t myOutport =0, lastModule =0;
 8003bbe:	2500      	movs	r5, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003bc0:	0038      	movs	r0, r7
 8003bc2:	f7ff fd8f 	bl	80036e4 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003bc6:	0030      	movs	r0, r6
 8003bc8:	f7ff fd8c 	bl	80036e4 <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 8003bcc:	7821      	ldrb	r1, [r4, #0]
 8003bce:	42a9      	cmp	r1, r5
 8003bd0:	d012      	beq.n	8003bf8 <remoteBootloaderUpdate+0xb8>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	9303      	str	r3, [sp, #12]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	9302      	str	r3, [sp, #8]
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	3303      	adds	r3, #3
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	0032      	movs	r2, r6
 8003be2:	000b      	movs	r3, r1
 8003be4:	0038      	movs	r0, r7
 8003be6:	f005 ff7b 	bl	8009ae0 <StartScastDMAStream>
}
 8003bea:	b005      	add	sp, #20
 8003bec:	bc3c      	pop	{r2, r3, r4, r5}
 8003bee:	4690      	mov	r8, r2
 8003bf0:	4699      	mov	r9, r3
 8003bf2:	46a2      	mov	sl, r4
 8003bf4:	46ab      	mov	fp, r5
 8003bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SwapUartPins(GetUart(myOutport),REVERSED);
 8003bf8:	0030      	movs	r0, r6
 8003bfa:	f009 fc5f 	bl	800d4bc <GetUart>
 8003bfe:	2101      	movs	r1, #1
 8003c00:	f009 fc68 	bl	800d4d4 <SwapUartPins>
 8003c04:	7821      	ldrb	r1, [r4, #0]
 8003c06:	e7e4      	b.n	8003bd2 <remoteBootloaderUpdate+0x92>
	if(src == myID){
 8003c08:	4555      	cmp	r5, sl
 8003c0a:	d016      	beq.n	8003c3a <remoteBootloaderUpdate+0xfa>
 8003c0c:	464e      	mov	r6, r9
 8003c0e:	e7d7      	b.n	8003bc0 <remoteBootloaderUpdate+0x80>
 8003c10:	458a      	cmp	sl, r1
 8003c12:	d00d      	beq.n	8003c30 <remoteBootloaderUpdate+0xf0>
 8003c14:	000d      	movs	r5, r1
 8003c16:	e7d3      	b.n	8003bc0 <remoteBootloaderUpdate+0x80>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c18:	f009 fe20 	bl	800d85c <FreeRTOS_CLIGetOutputBuffer>
	uint8_t myOutport =0, lastModule =0;
 8003c1c:	2500      	movs	r5, #0
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c1e:	4683      	mov	fp, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8003c20:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <remoteBootloaderUpdate+0x118>)
 8003c22:	4642      	mov	r2, r8
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	4658      	mov	r0, fp
 8003c28:	464b      	mov	r3, r9
 8003c2a:	f00f fa3b 	bl	80130a4 <sprintf>
 8003c2e:	e7af      	b.n	8003b90 <remoteBootloaderUpdate+0x50>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c30:	f009 fe14 	bl	800d85c <FreeRTOS_CLIGetOutputBuffer>
 8003c34:	4655      	mov	r5, sl
 8003c36:	4683      	mov	fp, r0
 8003c38:	e7a4      	b.n	8003b84 <remoteBootloaderUpdate+0x44>
 8003c3a:	f009 fe0f 	bl	800d85c <FreeRTOS_CLIGetOutputBuffer>
 8003c3e:	464e      	mov	r6, r9
 8003c40:	4683      	mov	fp, r0
 8003c42:	e7ed      	b.n	8003c20 <remoteBootloaderUpdate+0xe0>
 8003c44:	20000a98 	.word	0x20000a98
 8003c48:	20000b98 	.word	0x20000b98
 8003c4c:	20006fbc 	.word	0x20006fbc
 8003c50:	20000090 	.word	0x20000090
 8003c54:	20000088 	.word	0x20000088
 8003c58:	2000008c 	.word	0x2000008c

08003c5c <DisplayTopology>:

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c5c:	4b5c      	ldr	r3, [pc, #368]	; (8003dd0 <DisplayTopology+0x174>)
void DisplayTopology(uint8_t port){
 8003c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c60:	001c      	movs	r4, r3
void DisplayTopology(uint8_t port){
 8003c62:	4645      	mov	r5, r8
 8003c64:	464e      	mov	r6, r9
 8003c66:	46de      	mov	lr, fp
 8003c68:	4657      	mov	r7, sl
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c6a:	3440      	adds	r4, #64	; 0x40
 8003c6c:	0022      	movs	r2, r4
void DisplayTopology(uint8_t port){
 8003c6e:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c70:	4698      	mov	r8, r3
 8003c72:	4b58      	ldr	r3, [pc, #352]	; (8003dd4 <DisplayTopology+0x178>)
void DisplayTopology(uint8_t port){
 8003c74:	0007      	movs	r7, r0
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c76:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003c78:	c223      	stmia	r2!, {r0, r1, r5}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c7a:	2501      	movs	r5, #1
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c7c:	6819      	ldr	r1, [r3, #0]
void DisplayTopology(uint8_t port){
 8003c7e:	b085      	sub	sp, #20
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c80:	6011      	str	r1, [r2, #0]
 8003c82:	889b      	ldrh	r3, [r3, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c84:	426d      	negs	r5, r5
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c86:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c88:	0021      	movs	r1, r4
 8003c8a:	2332      	movs	r3, #50	; 0x32
 8003c8c:	9500      	str	r5, [sp, #0]
 8003c8e:	2211      	movs	r2, #17
 8003c90:	0038      	movs	r0, r7
 8003c92:	f009 fb8b 	bl	800d3ac <writePxMutex>
 8003c96:	4b50      	ldr	r3, [pc, #320]	; (8003dd8 <DisplayTopology+0x17c>)
 8003c98:	2601      	movs	r6, #1
 8003c9a:	4699      	mov	r9, r3
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003c9c:	0032      	movs	r2, r6
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	0020      	movs	r0, r4
 8003ca2:	f00f f9ff 	bl	80130a4 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ca6:	0020      	movs	r0, r4
 8003ca8:	f7fc fa36 	bl	8000118 <strlen>
 8003cac:	3601      	adds	r6, #1
 8003cae:	b282      	uxth	r2, r0
 8003cb0:	9500      	str	r5, [sp, #0]
 8003cb2:	2332      	movs	r3, #50	; 0x32
 8003cb4:	0021      	movs	r1, r4
 8003cb6:	0038      	movs	r0, r7
 8003cb8:	f009 fb78 	bl	800d3ac <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003cbc:	2e07      	cmp	r6, #7
 8003cbe:	d1ed      	bne.n	8003c9c <DisplayTopology+0x40>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003cc0:	2332      	movs	r3, #50	; 0x32
 8003cc2:	9500      	str	r5, [sp, #0]
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	4945      	ldr	r1, [pc, #276]	; (8003ddc <DisplayTopology+0x180>)
 8003cc8:	0038      	movs	r0, r7
 8003cca:	f009 fb6f 	bl	800d3ac <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003cce:	4b44      	ldr	r3, [pc, #272]	; (8003de0 <DisplayTopology+0x184>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d06c      	beq.n	8003db0 <DisplayTopology+0x154>
 8003cd6:	4b43      	ldr	r3, [pc, #268]	; (8003de4 <DisplayTopology+0x188>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003cd8:	4645      	mov	r5, r8
 8003cda:	469b      	mov	fp, r3
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cdc:	2301      	movs	r3, #1
 8003cde:	425b      	negs	r3, r3
 8003ce0:	4698      	mov	r8, r3
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003ce2:	4b41      	ldr	r3, [pc, #260]	; (8003de8 <DisplayTopology+0x18c>)
	for(uint8_t row =0; row < N; row++){
 8003ce4:	2400      	movs	r4, #0
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003ce6:	469a      	mov	sl, r3
				sprintf(pcUserMessage,"%d\t",0);
 8003ce8:	4b40      	ldr	r3, [pc, #256]	; (8003dec <DisplayTopology+0x190>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003cea:	3540      	adds	r5, #64	; 0x40
				sprintf(pcUserMessage,"%d\t",0);
 8003cec:	4699      	mov	r9, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003cee:	1c63      	adds	r3, r4, #1
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	493f      	ldr	r1, [pc, #252]	; (8003df0 <DisplayTopology+0x194>)
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	9303      	str	r3, [sp, #12]
 8003cf8:	f00f f9d4 	bl	80130a4 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cfc:	0028      	movs	r0, r5
 8003cfe:	f7fc fa0b 	bl	8000118 <strlen>
 8003d02:	4643      	mov	r3, r8
 8003d04:	b282      	uxth	r2, r0
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	0029      	movs	r1, r5
 8003d0a:	2332      	movs	r3, #50	; 0x32
 8003d0c:	0038      	movs	r0, r7
 8003d0e:	f009 fb4d 	bl	800d3ac <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d12:	2316      	movs	r3, #22
 8003d14:	435c      	muls	r4, r3
 8003d16:	465b      	mov	r3, fp
 8003d18:	5b1b      	ldrh	r3, [r3, r4]
 8003d1a:	2205      	movs	r2, #5
 8003d1c:	0059      	lsls	r1, r3, #1
 8003d1e:	18c9      	adds	r1, r1, r3
 8003d20:	4b34      	ldr	r3, [pc, #208]	; (8003df4 <DisplayTopology+0x198>)
 8003d22:	0049      	lsls	r1, r1, #1
 8003d24:	469c      	mov	ip, r3
 8003d26:	0028      	movs	r0, r5
 8003d28:	4461      	add	r1, ip
 8003d2a:	f00f fa10 	bl	801314e <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003d2e:	4643      	mov	r3, r8
 8003d30:	2205      	movs	r2, #5
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	0029      	movs	r1, r5
 8003d36:	2332      	movs	r3, #50	; 0x32
 8003d38:	0038      	movs	r0, r7
 8003d3a:	f009 fb37 	bl	800d3ac <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003d3e:	4643      	mov	r3, r8
 8003d40:	2201      	movs	r2, #1
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	492c      	ldr	r1, [pc, #176]	; (8003df8 <DisplayTopology+0x19c>)
 8003d46:	2332      	movs	r3, #50	; 0x32
 8003d48:	0038      	movs	r0, r7
 8003d4a:	f009 fb2f 	bl	800d3ac <writePxMutex>
 8003d4e:	465b      	mov	r3, fp
 8003d50:	1ca6      	adds	r6, r4, #2
 8003d52:	330e      	adds	r3, #14
 8003d54:	445e      	add	r6, fp
 8003d56:	191c      	adds	r4, r3, r4
 8003d58:	e011      	b.n	8003d7e <DisplayTopology+0x122>
				sprintf(pcUserMessage,"%d\t",0);
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	0028      	movs	r0, r5
 8003d5e:	f00f f9a1 	bl	80130a4 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d62:	0028      	movs	r0, r5
 8003d64:	f7fc f9d8 	bl	8000118 <strlen>
 8003d68:	4643      	mov	r3, r8
 8003d6a:	b282      	uxth	r2, r0
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	0029      	movs	r1, r5
 8003d70:	2332      	movs	r3, #50	; 0x32
 8003d72:	0038      	movs	r0, r7
 8003d74:	3602      	adds	r6, #2
 8003d76:	f009 fb19 	bl	800d3ac <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003d7a:	42a6      	cmp	r6, r4
 8003d7c:	d00a      	beq.n	8003d94 <DisplayTopology+0x138>
			if(!array[row][col])
 8003d7e:	8832      	ldrh	r2, [r6, #0]
 8003d80:	2a00      	cmp	r2, #0
 8003d82:	d0ea      	beq.n	8003d5a <DisplayTopology+0xfe>
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003d84:	2307      	movs	r3, #7
 8003d86:	4651      	mov	r1, sl
 8003d88:	4013      	ands	r3, r2
 8003d8a:	0028      	movs	r0, r5
 8003d8c:	08d2      	lsrs	r2, r2, #3
 8003d8e:	f00f f989 	bl	80130a4 <sprintf>
 8003d92:	e7e6      	b.n	8003d62 <DisplayTopology+0x106>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003d94:	4643      	mov	r3, r8
 8003d96:	2202      	movs	r2, #2
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	4918      	ldr	r1, [pc, #96]	; (8003dfc <DisplayTopology+0x1a0>)
 8003d9c:	2332      	movs	r3, #50	; 0x32
 8003d9e:	0038      	movs	r0, r7
 8003da0:	f009 fb04 	bl	800d3ac <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003da4:	466b      	mov	r3, sp
 8003da6:	7b1c      	ldrb	r4, [r3, #12]
 8003da8:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <DisplayTopology+0x184>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	42a3      	cmp	r3, r4
 8003dae:	d89e      	bhi.n	8003cee <DisplayTopology+0x92>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003db0:	2301      	movs	r3, #1
 8003db2:	425b      	negs	r3, r3
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2201      	movs	r2, #1
 8003db8:	3333      	adds	r3, #51	; 0x33
 8003dba:	4911      	ldr	r1, [pc, #68]	; (8003e00 <DisplayTopology+0x1a4>)
 8003dbc:	0038      	movs	r0, r7
 8003dbe:	f009 faf5 	bl	800d3ac <writePxMutex>
}
 8003dc2:	b005      	add	sp, #20
 8003dc4:	bc3c      	pop	{r2, r3, r4, r5}
 8003dc6:	4690      	mov	r8, r2
 8003dc8:	4699      	mov	r9, r3
 8003dca:	46a2      	mov	sl, r4
 8003dcc:	46ab      	mov	fp, r5
 8003dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd0:	20000b98 	.word	0x20000b98
 8003dd4:	08017c18 	.word	0x08017c18
 8003dd8:	08017c2c 	.word	0x08017c2c
 8003ddc:	080188a0 	.word	0x080188a0
 8003de0:	20000008 	.word	0x20000008
 8003de4:	20000f0c 	.word	0x20000f0c
 8003de8:	08017c44 	.word	0x08017c44
 8003dec:	08017c40 	.word	0x08017c40
 8003df0:	08017c34 	.word	0x08017c34
 8003df4:	080174f4 	.word	0x080174f4
 8003df8:	08017c28 	.word	0x08017c28
 8003dfc:	08017d50 	.word	0x08017d50
 8003e00:	080192b4 	.word	0x080192b4

08003e04 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e06:	4645      	mov	r5, r8
 8003e08:	46de      	mov	lr, fp
 8003e0a:	4657      	mov	r7, sl
 8003e0c:	464e      	mov	r6, r9
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e0e:	4934      	ldr	r1, [pc, #208]	; (8003ee0 <DisplayPortsDir+0xdc>)
void DisplayPortsDir(uint8_t port){
 8003e10:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e12:	3140      	adds	r1, #64	; 0x40
 8003e14:	000a      	movs	r2, r1
 8003e16:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <DisplayPortsDir+0xe0>)
void DisplayPortsDir(uint8_t port){
 8003e18:	4682      	mov	sl, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e1a:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e1c:	c231      	stmia	r2!, {r0, r4, r5}
 8003e1e:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e20:	c231      	stmia	r2!, {r0, r4, r5}
 8003e22:	681b      	ldr	r3, [r3, #0]
void DisplayPortsDir(uint8_t port){
 8003e24:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e26:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e28:	2301      	movs	r3, #1
 8003e2a:	425b      	negs	r3, r3
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	221b      	movs	r2, #27
 8003e30:	3333      	adds	r3, #51	; 0x33
 8003e32:	4650      	mov	r0, sl
 8003e34:	f009 faba 	bl	800d3ac <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003e38:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <DisplayPortsDir+0xe4>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d035      	beq.n	8003eac <DisplayPortsDir+0xa8>
 8003e40:	2301      	movs	r3, #1
 8003e42:	4699      	mov	r9, r3
 8003e44:	4b29      	ldr	r3, [pc, #164]	; (8003eec <DisplayPortsDir+0xe8>)
 8003e46:	4698      	mov	r8, r3
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e48:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <DisplayPortsDir+0xec>)
 8003e4a:	469b      	mov	fp, r3
 8003e4c:	464b      	mov	r3, r9
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e4e:	2680      	movs	r6, #128	; 0x80
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e50:	4f23      	ldr	r7, [pc, #140]	; (8003ee0 <DisplayPortsDir+0xdc>)
 8003e52:	1e5d      	subs	r5, r3, #1
 8003e54:	006d      	lsls	r5, r5, #1
	for(uint8_t i =1; i <= N; i++){
 8003e56:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e58:	0236      	lsls	r6, r6, #8
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e5a:	3740      	adds	r7, #64	; 0x40
 8003e5c:	e002      	b.n	8003e64 <DisplayPortsDir+0x60>
 8003e5e:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e60:	2c0a      	cmp	r4, #10
 8003e62:	d01b      	beq.n	8003e9c <DisplayPortsDir+0x98>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e64:	0031      	movs	r1, r6
 8003e66:	4642      	mov	r2, r8
 8003e68:	4119      	asrs	r1, r3
 8003e6a:	5b52      	ldrh	r2, [r2, r5]
 8003e6c:	1c5c      	adds	r4, r3, #1
 8003e6e:	4211      	tst	r1, r2
 8003e70:	d0f5      	beq.n	8003e5e <DisplayPortsDir+0x5a>
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e72:	0023      	movs	r3, r4
 8003e74:	464a      	mov	r2, r9
 8003e76:	4659      	mov	r1, fp
 8003e78:	0038      	movs	r0, r7
 8003e7a:	f00f f913 	bl	80130a4 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003e7e:	0038      	movs	r0, r7
 8003e80:	f7fc f94a 	bl	8000118 <strlen>
 8003e84:	2301      	movs	r3, #1
 8003e86:	425b      	negs	r3, r3
 8003e88:	b282      	uxth	r2, r0
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	0039      	movs	r1, r7
 8003e8e:	3333      	adds	r3, #51	; 0x33
 8003e90:	4650      	mov	r0, sl
 8003e92:	f009 fa8b 	bl	800d3ac <writePxMutex>
 8003e96:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e98:	2c0a      	cmp	r4, #10
 8003e9a:	d1e3      	bne.n	8003e64 <DisplayPortsDir+0x60>
	for(uint8_t i =1; i <= N; i++){
 8003e9c:	464b      	mov	r3, r9
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	4699      	mov	r9, r3
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <DisplayPortsDir+0xe4>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	454b      	cmp	r3, r9
 8003eaa:	d2cf      	bcs.n	8003e4c <DisplayPortsDir+0x48>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003eac:	490c      	ldr	r1, [pc, #48]	; (8003ee0 <DisplayPortsDir+0xdc>)
 8003eae:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <DisplayPortsDir+0xf0>)
 8003eb0:	3140      	adds	r1, #64	; 0x40
 8003eb2:	000a      	movs	r2, r1
 8003eb4:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003eb6:	c231      	stmia	r2!, {r0, r4, r5}
 8003eb8:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003eba:	c231      	stmia	r2!, {r0, r4, r5}
 8003ebc:	cb11      	ldmia	r3!, {r0, r4}
 8003ebe:	c211      	stmia	r2!, {r0, r4}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	425b      	negs	r3, r3
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	221f      	movs	r2, #31
 8003ec8:	3333      	adds	r3, #51	; 0x33
 8003eca:	4650      	mov	r0, sl
 8003ecc:	f009 fa6e 	bl	800d3ac <writePxMutex>
	HAL_MAX_DELAY);
}
 8003ed0:	b003      	add	sp, #12
 8003ed2:	bc3c      	pop	{r2, r3, r4, r5}
 8003ed4:	4690      	mov	r8, r2
 8003ed6:	4699      	mov	r9, r3
 8003ed8:	46a2      	mov	sl, r4
 8003eda:	46ab      	mov	fp, r5
 8003edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	20000b98 	.word	0x20000b98
 8003ee4:	08017c4c 	.word	0x08017c4c
 8003ee8:	20000008 	.word	0x20000008
 8003eec:	20007334 	.word	0x20007334
 8003ef0:	08017c68 	.word	0x08017c68
 8003ef4:	08017c7c 	.word	0x08017c7c

08003ef8 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efa:	46de      	mov	lr, fp
 8003efc:	464e      	mov	r6, r9
 8003efe:	4645      	mov	r5, r8
 8003f00:	4657      	mov	r7, sl
 8003f02:	b5e0      	push	{r5, r6, r7, lr}
 8003f04:	b085      	sub	sp, #20
 8003f06:	9002      	str	r0, [sp, #8]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f08:	f009 fca8 	bl	800d85c <FreeRTOS_CLIGetOutputBuffer>
	
	strcpy((char* )pcOutputString,"");
 8003f0c:	2300      	movs	r3, #0
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f0e:	0004      	movs	r4, r0
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f10:	4d97      	ldr	r5, [pc, #604]	; (8004170 <DisplayModuleStatus+0x278>)
	strcpy((char* )pcOutputString,"");
 8003f12:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f14:	4b97      	ldr	r3, [pc, #604]	; (8004174 <DisplayModuleStatus+0x27c>)
 8003f16:	3540      	adds	r5, #64	; 0x40
 8003f18:	781a      	ldrb	r2, [r3, #0]
 8003f1a:	4997      	ldr	r1, [pc, #604]	; (8004178 <DisplayModuleStatus+0x280>)
 8003f1c:	0028      	movs	r0, r5
 8003f1e:	469a      	mov	sl, r3
 8003f20:	f00f f8c0 	bl	80130a4 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f24:	0029      	movs	r1, r5
 8003f26:	0020      	movs	r0, r4
 8003f28:	f00f f8dc 	bl	80130e4 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003f2c:	4b93      	ldr	r3, [pc, #588]	; (800417c <DisplayModuleStatus+0x284>)
 8003f2e:	4994      	ldr	r1, [pc, #592]	; (8004180 <DisplayModuleStatus+0x288>)
 8003f30:	7c1a      	ldrb	r2, [r3, #16]
 8003f32:	0028      	movs	r0, r5
 8003f34:	4698      	mov	r8, r3
 8003f36:	f00f f8b5 	bl	80130a4 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f3a:	0029      	movs	r1, r5
 8003f3c:	0020      	movs	r0, r4
 8003f3e:	f00f f8d1 	bl	80130e4 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003f42:	2306      	movs	r3, #6
 8003f44:	2200      	movs	r2, #0
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	498e      	ldr	r1, [pc, #568]	; (8004184 <DisplayModuleStatus+0x28c>)
 8003f4a:	3b04      	subs	r3, #4
 8003f4c:	0028      	movs	r0, r5
 8003f4e:	f00f f8a9 	bl	80130a4 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003f52:	0029      	movs	r1, r5
 8003f54:	0020      	movs	r0, r4
 8003f56:	f00f f8c5 	bl	80130e4 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003f5a:	4a8b      	ldr	r2, [pc, #556]	; (8004188 <DisplayModuleStatus+0x290>)
 8003f5c:	498b      	ldr	r1, [pc, #556]	; (800418c <DisplayModuleStatus+0x294>)
 8003f5e:	0028      	movs	r0, r5
 8003f60:	f00f f8a0 	bl	80130a4 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f64:	0029      	movs	r1, r5
 8003f66:	0020      	movs	r0, r4
 8003f68:	f00f f8bc 	bl	80130e4 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003f6c:	4a88      	ldr	r2, [pc, #544]	; (8004190 <DisplayModuleStatus+0x298>)
 8003f6e:	4989      	ldr	r1, [pc, #548]	; (8004194 <DisplayModuleStatus+0x29c>)
 8003f70:	0028      	movs	r0, r5
 8003f72:	f00f f897 	bl	80130a4 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f76:	0029      	movs	r1, r5
 8003f78:	0020      	movs	r0, r4
 8003f7a:	f00f f8b3 	bl	80130e4 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f7e:	002a      	movs	r2, r5
 8003f80:	4b85      	ldr	r3, [pc, #532]	; (8004198 <DisplayModuleStatus+0x2a0>)
 8003f82:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003f84:	c243      	stmia	r2!, {r0, r1, r6}
 8003f86:	6819      	ldr	r1, [r3, #0]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f88:	0020      	movs	r0, r4
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f8a:	6011      	str	r1, [r2, #0]
 8003f8c:	8899      	ldrh	r1, [r3, #4]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f8e:	2601      	movs	r6, #1
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f90:	8091      	strh	r1, [r2, #4]
 8003f92:	799b      	ldrb	r3, [r3, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f94:	0029      	movs	r1, r5
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f96:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f98:	f00f f8a4 	bl	80130e4 <strcat>
 8003f9c:	4b7f      	ldr	r3, [pc, #508]	; (800419c <DisplayModuleStatus+0x2a4>)
 8003f9e:	4699      	mov	r9, r3
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8003fa0:	4b7f      	ldr	r3, [pc, #508]	; (80041a0 <DisplayModuleStatus+0x2a8>)
 8003fa2:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"P%d: ",i);
 8003fa4:	0032      	movs	r2, r6
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	0028      	movs	r0, r5
 8003faa:	f00f f87b 	bl	80130a4 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8003fae:	0029      	movs	r1, r5
 8003fb0:	0020      	movs	r0, r4
 8003fb2:	f00f f897 	bl	80130e4 <strcat>
		switch(portStatus[i]){
 8003fb6:	4643      	mov	r3, r8
 8003fb8:	3314      	adds	r3, #20
 8003fba:	5cf3      	ldrb	r3, [r6, r3]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d80b      	bhi.n	8003fd8 <DisplayModuleStatus+0xe0>
 8003fc0:	465a      	mov	r2, fp
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	58d3      	ldr	r3, [r2, r3]
 8003fc6:	469f      	mov	pc, r3
				break;
			case STREAM:
				sprintf(pcUserMessage,"Streaming\n\r");
				break;
			case CLI:
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8003fc8:	002a      	movs	r2, r5
 8003fca:	4b76      	ldr	r3, [pc, #472]	; (80041a4 <DisplayModuleStatus+0x2ac>)
 8003fcc:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003fce:	c283      	stmia	r2!, {r0, r1, r7}
 8003fd0:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003fd2:	c283      	stmia	r2!, {r0, r1, r7}
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	8013      	strh	r3, [r2, #0]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8003fd8:	0029      	movs	r1, r5
 8003fda:	0020      	movs	r0, r4
 8003fdc:	3601      	adds	r6, #1
 8003fde:	f00f f881 	bl	80130e4 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003fe2:	2e07      	cmp	r6, #7
 8003fe4:	d1de      	bne.n	8003fa4 <DisplayModuleStatus+0xac>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8003fe6:	002a      	movs	r2, r5
 8003fe8:	4b6f      	ldr	r3, [pc, #444]	; (80041a8 <DisplayModuleStatus+0x2b0>)
	strcat((char* )pcOutputString,pcUserMessage);
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8003fea:	46a0      	mov	r8, r4
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8003fec:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fee:	c243      	stmia	r2!, {r0, r1, r6}
 8003ff0:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ff2:	c243      	stmia	r2!, {r0, r1, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 8003ff4:	0029      	movs	r1, r5
 8003ff6:	0020      	movs	r0, r4
 8003ff8:	f00f f874 	bl	80130e4 <strcat>
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8003ffc:	4b6b      	ldr	r3, [pc, #428]	; (80041ac <DisplayModuleStatus+0x2b4>)
 8003ffe:	4e6c      	ldr	r6, [pc, #432]	; (80041b0 <DisplayModuleStatus+0x2b8>)
	strcat((char* )pcOutputString,pcUserMessage);
 8004000:	2501      	movs	r5, #1
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004002:	469b      	mov	fp, r3
 8004004:	e01d      	b.n	8004042 <DisplayModuleStatus+0x14a>
 8004006:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004008:	f007 fba2 	bl	800b750 <GetPort>
 800400c:	465a      	mov	r2, fp
 800400e:	00ab      	lsls	r3, r5, #2
 8004010:	3b04      	subs	r3, #4
 8004012:	0004      	movs	r4, r0
 8004014:	58d0      	ldr	r0, [r2, r3]
 8004016:	f007 fb9b 	bl	800b750 <GetPort>
 800401a:	2340      	movs	r3, #64	; 0x40
 800401c:	4699      	mov	r9, r3
 800401e:	4b54      	ldr	r3, [pc, #336]	; (8004170 <DisplayModuleStatus+0x278>)
 8004020:	002a      	movs	r2, r5
 8004022:	469c      	mov	ip, r3
 8004024:	44e1      	add	r9, ip
 8004026:	9000      	str	r0, [sp, #0]
 8004028:	0023      	movs	r3, r4
 800402a:	4962      	ldr	r1, [pc, #392]	; (80041b4 <DisplayModuleStatus+0x2bc>)
 800402c:	4648      	mov	r0, r9
 800402e:	f00f f839 	bl	80130a4 <sprintf>
 8004032:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 8004034:	4649      	mov	r1, r9
 8004036:	4640      	mov	r0, r8
 8004038:	f00f f854 	bl	80130e4 <strcat>
 800403c:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 800403e:	2d07      	cmp	r5, #7
 8004040:	d011      	beq.n	8004066 <DisplayModuleStatus+0x16e>
		if(streamDMA[i - 1].Instance == 0){
 8004042:	6833      	ldr	r3, [r6, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1de      	bne.n	8004006 <DisplayModuleStatus+0x10e>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004048:	4c49      	ldr	r4, [pc, #292]	; (8004170 <DisplayModuleStatus+0x278>)
 800404a:	002a      	movs	r2, r5
 800404c:	3440      	adds	r4, #64	; 0x40
 800404e:	495a      	ldr	r1, [pc, #360]	; (80041b8 <DisplayModuleStatus+0x2c0>)
 8004050:	0020      	movs	r0, r4
 8004052:	f00f f827 	bl	80130a4 <sprintf>
 8004056:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 8004058:	0021      	movs	r1, r4
 800405a:	4640      	mov	r0, r8
 800405c:	f00f f842 	bl	80130e4 <strcat>
 8004060:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 8004062:	2d07      	cmp	r5, #7
 8004064:	d1ed      	bne.n	8004042 <DisplayModuleStatus+0x14a>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004066:	4640      	mov	r0, r8
 8004068:	f7fc f856 	bl	8000118 <strlen>
 800406c:	4644      	mov	r4, r8
 800406e:	0005      	movs	r5, r0
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
	temp =strlen((char* )pcOutputString);
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004070:	2680      	movs	r6, #128	; 0x80
	strcat((char* )pcOutputString,"\n\r");
 8004072:	4b52      	ldr	r3, [pc, #328]	; (80041bc <DisplayModuleStatus+0x2c4>)
 8004074:	2202      	movs	r2, #2
 8004076:	0019      	movs	r1, r3
 8004078:	1820      	adds	r0, r4, r0
 800407a:	4699      	mov	r9, r3
 800407c:	f00e fe0f 	bl	8012c9e <memcpy>
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004080:	1ca8      	adds	r0, r5, #2
 8004082:	221d      	movs	r2, #29
 8004084:	1820      	adds	r0, r4, r0
 8004086:	494e      	ldr	r1, [pc, #312]	; (80041c0 <DisplayModuleStatus+0x2c8>)
 8004088:	f00e fe09 	bl	8012c9e <memcpy>
 800408c:	4b4d      	ldr	r3, [pc, #308]	; (80041c4 <DisplayModuleStatus+0x2cc>)
		{
			sprintf(pcUserMessage,"P%d ",p);
 800408e:	4f38      	ldr	r7, [pc, #224]	; (8004170 <DisplayModuleStatus+0x278>)
 8004090:	4698      	mov	r8, r3
 8004092:	4b4d      	ldr	r3, [pc, #308]	; (80041c8 <DisplayModuleStatus+0x2d0>)
	temp =strlen((char* )pcOutputString);
 8004094:	351e      	adds	r5, #30
 8004096:	9503      	str	r5, [sp, #12]
 8004098:	2200      	movs	r2, #0
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800409a:	0236      	lsls	r6, r6, #8
			sprintf(pcUserMessage,"P%d ",p);
 800409c:	469b      	mov	fp, r3
 800409e:	3740      	adds	r7, #64	; 0x40
 80040a0:	e002      	b.n	80040a8 <DisplayModuleStatus+0x1b0>
 80040a2:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80040a4:	2d06      	cmp	r5, #6
 80040a6:	d016      	beq.n	80040d6 <DisplayModuleStatus+0x1de>
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040a8:	4653      	mov	r3, sl
 80040aa:	4641      	mov	r1, r8
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	1c55      	adds	r5, r2, #1
 80040b0:	3b01      	subs	r3, #1
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	5acb      	ldrh	r3, [r1, r3]
 80040b6:	0031      	movs	r1, r6
 80040b8:	4111      	asrs	r1, r2
 80040ba:	4219      	tst	r1, r3
 80040bc:	d0f1      	beq.n	80040a2 <DisplayModuleStatus+0x1aa>
			sprintf(pcUserMessage,"P%d ",p);
 80040be:	002a      	movs	r2, r5
 80040c0:	4659      	mov	r1, fp
 80040c2:	0038      	movs	r0, r7
 80040c4:	f00e ffee 	bl	80130a4 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80040c8:	0039      	movs	r1, r7
 80040ca:	0020      	movs	r0, r4
 80040cc:	f00f f80a 	bl	80130e4 <strcat>
 80040d0:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80040d2:	2d06      	cmp	r5, #6
 80040d4:	d1e8      	bne.n	80040a8 <DisplayModuleStatus+0x1b0>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 80040d6:	0020      	movs	r0, r4
 80040d8:	f7fc f81e 	bl	8000118 <strlen>
 80040dc:	466b      	mov	r3, sp
 80040de:	899b      	ldrh	r3, [r3, #12]
 80040e0:	0005      	movs	r5, r0
 80040e2:	1820      	adds	r0, r4, r0
 80040e4:	42ab      	cmp	r3, r5
 80040e6:	d03c      	beq.n	8004162 <DisplayModuleStatus+0x26a>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 80040e8:	2203      	movs	r2, #3
 80040ea:	4649      	mov	r1, r9
 80040ec:	f00e fdd7 	bl	8012c9e <memcpy>
	
	/* Display output */
	if(port)
 80040f0:	9b02      	ldr	r3, [sp, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <DisplayModuleStatus+0x216>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 80040f6:	0020      	movs	r0, r4
 80040f8:	f7fc f80e 	bl	8000118 <strlen>
 80040fc:	2301      	movs	r3, #1
 80040fe:	425b      	negs	r3, r3
 8004100:	b282      	uxth	r2, r0
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	0021      	movs	r1, r4
 8004106:	3333      	adds	r3, #51	; 0x33
 8004108:	9802      	ldr	r0, [sp, #8]
 800410a:	f009 f94f 	bl	800d3ac <writePxMutex>
	
}
 800410e:	b005      	add	sp, #20
 8004110:	bc3c      	pop	{r2, r3, r4, r5}
 8004112:	4690      	mov	r8, r2
 8004114:	4699      	mov	r9, r3
 8004116:	46a2      	mov	sl, r4
 8004118:	46ab      	mov	fp, r5
 800411a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"Streaming\n\r");
 800411c:	002a      	movs	r2, r5
 800411e:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <DisplayModuleStatus+0x2d4>)
 8004120:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004122:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 8004124:	e758      	b.n	8003fd8 <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8004126:	002a      	movs	r2, r5
 8004128:	4b29      	ldr	r3, [pc, #164]	; (80041d0 <DisplayModuleStatus+0x2d8>)
 800412a:	cb83      	ldmia	r3!, {r0, r1, r7}
 800412c:	c283      	stmia	r2!, {r0, r1, r7}
 800412e:	cb03      	ldmia	r3!, {r0, r1}
 8004130:	c203      	stmia	r2!, {r0, r1}
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	7013      	strb	r3, [r2, #0]
				break;
 8004136:	e74f      	b.n	8003fd8 <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004138:	002b      	movs	r3, r5
 800413a:	4a26      	ldr	r2, [pc, #152]	; (80041d4 <DisplayModuleStatus+0x2dc>)
 800413c:	ca83      	ldmia	r2!, {r0, r1, r7}
 800413e:	c383      	stmia	r3!, {r0, r1, r7}
 8004140:	ca83      	ldmia	r2!, {r0, r1, r7}
 8004142:	c383      	stmia	r3!, {r0, r1, r7}
 8004144:	6811      	ldr	r1, [r2, #0]
 8004146:	6019      	str	r1, [r3, #0]
 8004148:	8891      	ldrh	r1, [r2, #4]
 800414a:	8099      	strh	r1, [r3, #4]
 800414c:	7992      	ldrb	r2, [r2, #6]
 800414e:	719a      	strb	r2, [r3, #6]
				break;
 8004150:	e742      	b.n	8003fd8 <DisplayModuleStatus+0xe0>
				sprintf(pcUserMessage,"Free\n\r");
 8004152:	4b21      	ldr	r3, [pc, #132]	; (80041d8 <DisplayModuleStatus+0x2e0>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	602a      	str	r2, [r5, #0]
 8004158:	889a      	ldrh	r2, [r3, #4]
 800415a:	80aa      	strh	r2, [r5, #4]
 800415c:	799b      	ldrb	r3, [r3, #6]
 800415e:	71ab      	strb	r3, [r5, #6]
				break;
 8004160:	e73a      	b.n	8003fd8 <DisplayModuleStatus+0xe0>
		strcat((char* )pcOutputString,"None");
 8004162:	2205      	movs	r2, #5
 8004164:	491d      	ldr	r1, [pc, #116]	; (80041dc <DisplayModuleStatus+0x2e4>)
 8004166:	f00e fd9a 	bl	8012c9e <memcpy>
 800416a:	1d28      	adds	r0, r5, #4
 800416c:	1820      	adds	r0, r4, r0
 800416e:	e7bb      	b.n	80040e8 <DisplayModuleStatus+0x1f0>
 8004170:	20000b98 	.word	0x20000b98
 8004174:	20000a98 	.word	0x20000a98
 8004178:	08017c9c 	.word	0x08017c9c
 800417c:	20000c18 	.word	0x20000c18
 8004180:	08017cb8 	.word	0x08017cb8
 8004184:	08017cd4 	.word	0x08017cd4
 8004188:	08017cf4 	.word	0x08017cf4
 800418c:	08017d00 	.word	0x08017d00
 8004190:	08017d18 	.word	0x08017d18
 8004194:	08017d24 	.word	0x08017d24
 8004198:	08017d40 	.word	0x08017d40
 800419c:	08017d54 	.word	0x08017d54
 80041a0:	08017448 	.word	0x08017448
 80041a4:	08017d88 	.word	0x08017d88
 80041a8:	08017dc4 	.word	0x08017dc4
 80041ac:	2000132c 	.word	0x2000132c
 80041b0:	20001c78 	.word	0x20001c78
 80041b4:	08017df8 	.word	0x08017df8
 80041b8:	08017ddc 	.word	0x08017ddc
 80041bc:	08017d50 	.word	0x08017d50
 80041c0:	08017e28 	.word	0x08017e28
 80041c4:	20007334 	.word	0x20007334
 80041c8:	08017e48 	.word	0x08017e48
 80041cc:	08017d7c 	.word	0x08017d7c
 80041d0:	08017d64 	.word	0x08017d64
 80041d4:	08017da4 	.word	0x08017da4
 80041d8:	08017d5c 	.word	0x08017d5c
 80041dc:	08017e50 	.word	0x08017e50

080041e0 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 80041e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e2:	46c6      	mov	lr, r8
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 80041e4:	4929      	ldr	r1, [pc, #164]	; (800428c <GetID+0xac>)
int16_t GetID(char *string){
 80041e6:	b500      	push	{lr}
 80041e8:	0006      	movs	r6, r0
	if(!strcmp(string,"me")) /* Check keywords */
 80041ea:	f7fb ff8b 	bl	8000104 <strcmp>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d02c      	beq.n	800424c <GetID+0x6c>
		return myID;
	else if(!strcmp(string,"all"))
 80041f2:	4927      	ldr	r1, [pc, #156]	; (8004290 <GetID+0xb0>)
 80041f4:	0030      	movs	r0, r6
 80041f6:	f7fb ff85 	bl	8000104 <strcmp>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d02b      	beq.n	8004256 <GetID+0x76>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 80041fe:	7833      	ldrb	r3, [r6, #0]
 8004200:	4698      	mov	r8, r3
 8004202:	2b23      	cmp	r3, #35	; 0x23
 8004204:	d030      	beq.n	8004268 <GetID+0x88>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 8004206:	4b23      	ldr	r3, [pc, #140]	; (8004294 <GetID+0xb4>)
 8004208:	781f      	ldrb	r7, [r3, #0]
 800420a:	2f00      	cmp	r7, #0
 800420c:	d00f      	beq.n	800422e <GetID+0x4e>
 800420e:	2400      	movs	r4, #0
 8004210:	4d21      	ldr	r5, [pc, #132]	; (8004298 <GetID+0xb8>)
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004212:	0029      	movs	r1, r5
 8004214:	0030      	movs	r0, r6
 8004216:	f7fb ff75 	bl	8000104 <strcmp>
 800421a:	2800      	cmp	r0, #0
 800421c:	d102      	bne.n	8004224 <GetID+0x44>
 800421e:	4643      	mov	r3, r8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d11a      	bne.n	800425a <GetID+0x7a>
		for(i =0; i < N; i++){
 8004224:	3401      	adds	r4, #1
 8004226:	b2e4      	uxtb	r4, r4
 8004228:	350a      	adds	r5, #10
 800422a:	42a7      	cmp	r7, r4
 800422c:	d1f1      	bne.n	8004212 <GetID+0x32>
 800422e:	2400      	movs	r4, #0
 8004230:	4d1a      	ldr	r5, [pc, #104]	; (800429c <GetID+0xbc>)
 8004232:	3538      	adds	r5, #56	; 0x38
				return (i);
		}
		
		/* Check group alias */
		for(i =0; i < MaxNumOfGroups; i++){
			if(!strcmp(string,groupAlias[i]))
 8004234:	0029      	movs	r1, r5
 8004236:	0030      	movs	r0, r6
 8004238:	f7fb ff64 	bl	8000104 <strcmp>
 800423c:	2800      	cmp	r0, #0
 800423e:	d00e      	beq.n	800425e <GetID+0x7e>
 8004240:	3401      	adds	r4, #1
 8004242:	350a      	adds	r5, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8004244:	2c0a      	cmp	r4, #10
 8004246:	d1f5      	bne.n	8004234 <GetID+0x54>
				return (BOS_MULTICAST | (i << 8));
		}
		
		return BOS_ERR_WrongName;
 8004248:	2064      	movs	r0, #100	; 0x64
 800424a:	e001      	b.n	8004250 <GetID+0x70>
		return myID;
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <GetID+0xbc>)
 800424e:	7818      	ldrb	r0, [r3, #0]
	}
	
}
 8004250:	bc04      	pop	{r2}
 8004252:	4690      	mov	r8, r2
 8004254:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_BROADCAST;
 8004256:	20ff      	movs	r0, #255	; 0xff
 8004258:	e7fa      	b.n	8004250 <GetID+0x70>
				return (i);
 800425a:	b220      	sxth	r0, r4
 800425c:	e7f8      	b.n	8004250 <GetID+0x70>
				return (BOS_MULTICAST | (i << 8));
 800425e:	20fe      	movs	r0, #254	; 0xfe
 8004260:	0224      	lsls	r4, r4, #8
 8004262:	4320      	orrs	r0, r4
 8004264:	b200      	sxth	r0, r0
 8004266:	e7f3      	b.n	8004250 <GetID+0x70>
		id =atol(string + 1);
 8004268:	1c70      	adds	r0, r6, #1
 800426a:	f00e fa58 	bl	801271e <atol>
 800426e:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <GetID+0x9c>
 8004274:	4a07      	ldr	r2, [pc, #28]	; (8004294 <GetID+0xb4>)
 8004276:	7812      	ldrb	r2, [r2, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d204      	bcs.n	8004286 <GetID+0xa6>
		else if(id == myID)
 800427c:	4a07      	ldr	r2, [pc, #28]	; (800429c <GetID+0xbc>)
			return BOS_ERR_WrongID;
 800427e:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 8004280:	7812      	ldrb	r2, [r2, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d1e4      	bne.n	8004250 <GetID+0x70>
			return myID;
 8004286:	b218      	sxth	r0, r3
 8004288:	e7e2      	b.n	8004250 <GetID+0x70>
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	08017e58 	.word	0x08017e58
 8004290:	08017e5c 	.word	0x08017e5c
 8004294:	20000008 	.word	0x20000008
 8004298:	20000dfc 	.word	0x20000dfc
 800429c:	20000a98 	.word	0x20000a98

080042a0 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 80042a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a2:	46c6      	mov	lr, r8
 80042a4:	4c2c      	ldr	r4, [pc, #176]	; (8004358 <NameModule+0xb8>)
 80042a6:	0007      	movs	r7, r0
 80042a8:	0026      	movs	r6, r4
 80042aa:	000d      	movs	r5, r1
 80042ac:	b500      	push	{lr}
 80042ae:	3610      	adds	r6, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 80042b0:	0021      	movs	r1, r4
 80042b2:	0028      	movs	r0, r5
 80042b4:	f7fb ff26 	bl	8000104 <strcmp>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d040      	beq.n	800433e <NameModule+0x9e>
 80042bc:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 80042be:	42a6      	cmp	r6, r4
 80042c0:	d1f6      	bne.n	80042b0 <NameModule+0x10>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 80042c2:	4b26      	ldr	r3, [pc, #152]	; (800435c <NameModule+0xbc>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d914      	bls.n	80042f4 <NameModule+0x54>
 80042ca:	4c25      	ldr	r4, [pc, #148]	; (8004360 <NameModule+0xc0>)
 80042cc:	009e      	lsls	r6, r3, #2
 80042ce:	18f6      	adds	r6, r6, r3
 80042d0:	0023      	movs	r3, r4
 80042d2:	0076      	lsls	r6, r6, #1
 80042d4:	3b0a      	subs	r3, #10
 80042d6:	18f6      	adds	r6, r6, r3
 80042d8:	e002      	b.n	80042e0 <NameModule+0x40>
 80042da:	340a      	adds	r4, #10
 80042dc:	42b4      	cmp	r4, r6
 80042de:	d009      	beq.n	80042f4 <NameModule+0x54>
		if(!strcmp(alias,moduleAlias[i]))
 80042e0:	0021      	movs	r1, r4
 80042e2:	0028      	movs	r0, r5
 80042e4:	f7fb ff0e 	bl	8000104 <strcmp>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d1f6      	bne.n	80042da <NameModule+0x3a>
			return BOS_ERR_ExistingAlias;
 80042ec:	2007      	movs	r0, #7

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
	
	return result;
}
 80042ee:	bc04      	pop	{r2}
 80042f0:	4690      	mov	r8, r2
 80042f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f4:	4e1b      	ldr	r6, [pc, #108]	; (8004364 <NameModule+0xc4>)
 80042f6:	0034      	movs	r4, r6
 80042f8:	369c      	adds	r6, #156	; 0x9c
 80042fa:	3438      	adds	r4, #56	; 0x38
		if(!strcmp(alias,groupAlias[i]))
 80042fc:	0021      	movs	r1, r4
 80042fe:	0028      	movs	r0, r5
 8004300:	f7fb ff00 	bl	8000104 <strcmp>
 8004304:	2800      	cmp	r0, #0
 8004306:	d0f1      	beq.n	80042ec <NameModule+0x4c>
 8004308:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 800430a:	42a6      	cmp	r6, r4
 800430c:	d1f6      	bne.n	80042fc <NameModule+0x5c>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800430e:	4b16      	ldr	r3, [pc, #88]	; (8004368 <NameModule+0xc8>)
 8004310:	4c16      	ldr	r4, [pc, #88]	; (800436c <NameModule+0xcc>)
 8004312:	4698      	mov	r8, r3
 8004314:	61dc      	str	r4, [r3, #28]
 8004316:	e004      	b.n	8004322 <NameModule+0x82>
 8004318:	4643      	mov	r3, r8
 800431a:	6864      	ldr	r4, [r4, #4]
 800431c:	61dc      	str	r4, [r3, #28]
 800431e:	2c00      	cmp	r4, #0
 8004320:	d00f      	beq.n	8004342 <NameModule+0xa2>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	681e      	ldr	r6, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004326:	0030      	movs	r0, r6
 8004328:	f7fb fef6 	bl	8000118 <strlen>
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800432c:	0031      	movs	r1, r6
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800432e:	0002      	movs	r2, r0
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004330:	0028      	movs	r0, r5
 8004332:	f00e fefb 	bl	801312c <strncmp>
 8004336:	2800      	cmp	r0, #0
 8004338:	d1ee      	bne.n	8004318 <NameModule+0x78>
			return BOS_ERR_ExistingCmd;
 800433a:	2008      	movs	r0, #8
 800433c:	e7d7      	b.n	80042ee <NameModule+0x4e>
			return BOS_ERR_Keyword;
 800433e:	2006      	movs	r0, #6
 8004340:	e7d5      	b.n	80042ee <NameModule+0x4e>
	strcpy(moduleAlias[module],alias);
 8004342:	00b8      	lsls	r0, r7, #2
 8004344:	19c0      	adds	r0, r0, r7
 8004346:	4f0a      	ldr	r7, [pc, #40]	; (8004370 <NameModule+0xd0>)
 8004348:	0040      	lsls	r0, r0, #1
 800434a:	0029      	movs	r1, r5
 800434c:	19c0      	adds	r0, r0, r7
 800434e:	f00e fee5 	bl	801311c <strcpy>
	result =SaveEEalias();
 8004352:	f7ff f881 	bl	8003458 <SaveEEalias>
	return result;
 8004356:	e7ca      	b.n	80042ee <NameModule+0x4e>
 8004358:	080174a4 	.word	0x080174a4
 800435c:	20000008 	.word	0x20000008
 8004360:	20000e06 	.word	0x20000e06
 8004364:	20000a98 	.word	0x20000a98
 8004368:	20000c18 	.word	0x20000c18
 800436c:	200000b8 	.word	0x200000b8
 8004370:	20000dfc 	.word	0x20000dfc

08004374 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004376:	464f      	mov	r7, r9
 8004378:	4646      	mov	r6, r8
 800437a:	46d6      	mov	lr, sl
 800437c:	4b3e      	ldr	r3, [pc, #248]	; (8004478 <AddModuleToGroup+0x104>)
 800437e:	b5c0      	push	{r6, r7, lr}
 8004380:	001f      	movs	r7, r3
 8004382:	3738      	adds	r7, #56	; 0x38
 8004384:	4680      	mov	r8, r0
 8004386:	000e      	movs	r6, r1
 8004388:	4699      	mov	r9, r3
 800438a:	003c      	movs	r4, r7
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 800438c:	2500      	movs	r5, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800438e:	0021      	movs	r1, r4
 8004390:	0030      	movs	r0, r6
 8004392:	f7fb feb7 	bl	8000104 <strcmp>
 8004396:	2800      	cmp	r0, #0
 8004398:	d02a      	beq.n	80043f0 <AddModuleToGroup+0x7c>
	for(i =0; i < MaxNumOfGroups; i++){
 800439a:	3501      	adds	r5, #1
 800439c:	340a      	adds	r4, #10
 800439e:	2d0a      	cmp	r5, #10
 80043a0:	d1f5      	bne.n	800438e <AddModuleToGroup+0x1a>
 80043a2:	4c36      	ldr	r4, [pc, #216]	; (800447c <AddModuleToGroup+0x108>)
 80043a4:	0025      	movs	r5, r4
 80043a6:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 80043a8:	0021      	movs	r1, r4
 80043aa:	0030      	movs	r0, r6
 80043ac:	f7fb feaa 	bl	8000104 <strcmp>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d051      	beq.n	8004458 <AddModuleToGroup+0xe4>
 80043b4:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 80043b6:	42a5      	cmp	r5, r4
 80043b8:	d1f6      	bne.n	80043a8 <AddModuleToGroup+0x34>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 80043ba:	4b31      	ldr	r3, [pc, #196]	; (8004480 <AddModuleToGroup+0x10c>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d920      	bls.n	8004404 <AddModuleToGroup+0x90>
 80043c2:	4c30      	ldr	r4, [pc, #192]	; (8004484 <AddModuleToGroup+0x110>)
 80043c4:	009d      	lsls	r5, r3, #2
 80043c6:	18ed      	adds	r5, r5, r3
 80043c8:	0023      	movs	r3, r4
 80043ca:	006d      	lsls	r5, r5, #1
 80043cc:	3b0a      	subs	r3, #10
 80043ce:	18ed      	adds	r5, r5, r3
 80043d0:	e002      	b.n	80043d8 <AddModuleToGroup+0x64>
 80043d2:	340a      	adds	r4, #10
 80043d4:	42a5      	cmp	r5, r4
 80043d6:	d015      	beq.n	8004404 <AddModuleToGroup+0x90>
		if(!strcmp(group,moduleAlias[j]))
 80043d8:	0021      	movs	r1, r4
 80043da:	0030      	movs	r0, r6
 80043dc:	f7fb fe92 	bl	8000104 <strcmp>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d1f6      	bne.n	80043d2 <AddModuleToGroup+0x5e>
			return BOS_ERR_ExistingAlias;
 80043e4:	2007      	movs	r0, #7
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 80043e6:	bc1c      	pop	{r2, r3, r4}
 80043e8:	4690      	mov	r8, r2
 80043ea:	4699      	mov	r9, r3
 80043ec:	46a2      	mov	sl, r4
 80043ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			groupModules[module - 1] |=(0x0001 << i);
 80043f0:	2201      	movs	r2, #1
 80043f2:	4647      	mov	r7, r8
 80043f4:	40aa      	lsls	r2, r5
 80043f6:	3f01      	subs	r7, #1
 80043f8:	007f      	lsls	r7, r7, #1
 80043fa:	444f      	add	r7, r9
 80043fc:	88bb      	ldrh	r3, [r7, #4]
 80043fe:	4313      	orrs	r3, r2
 8004400:	80bb      	strh	r3, [r7, #4]
			return result;
 8004402:	e7f0      	b.n	80043e6 <AddModuleToGroup+0x72>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004404:	4b20      	ldr	r3, [pc, #128]	; (8004488 <AddModuleToGroup+0x114>)
 8004406:	4c21      	ldr	r4, [pc, #132]	; (800448c <AddModuleToGroup+0x118>)
 8004408:	469a      	mov	sl, r3
 800440a:	621c      	str	r4, [r3, #32]
 800440c:	e004      	b.n	8004418 <AddModuleToGroup+0xa4>
 800440e:	4653      	mov	r3, sl
 8004410:	6864      	ldr	r4, [r4, #4]
 8004412:	621c      	str	r4, [r3, #32]
 8004414:	2c00      	cmp	r4, #0
 8004416:	d00d      	beq.n	8004434 <AddModuleToGroup+0xc0>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800441c:	0028      	movs	r0, r5
 800441e:	f7fb fe7b 	bl	8000118 <strlen>
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004422:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004424:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004426:	0030      	movs	r0, r6
 8004428:	f00e fe80 	bl	801312c <strncmp>
 800442c:	2800      	cmp	r0, #0
 800442e:	d1ee      	bne.n	800440e <AddModuleToGroup+0x9a>
			return BOS_ERR_ExistingCmd;
 8004430:	2008      	movs	r0, #8
 8004432:	e7d8      	b.n	80043e6 <AddModuleToGroup+0x72>
		if(!groupAlias[i][0]){
 8004434:	783b      	ldrb	r3, [r7, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d010      	beq.n	800445c <AddModuleToGroup+0xe8>
	for(i =0; i < MaxNumOfGroups; i++){
 800443a:	3401      	adds	r4, #1
 800443c:	370a      	adds	r7, #10
 800443e:	2c0a      	cmp	r4, #10
 8004440:	d1f8      	bne.n	8004434 <AddModuleToGroup+0xc0>
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	00db      	lsls	r3, r3, #3
	groupModules[module - 1] |=(0x0001 << i);
 8004446:	4647      	mov	r7, r8
 8004448:	3f01      	subs	r7, #1
 800444a:	007f      	lsls	r7, r7, #1
 800444c:	444f      	add	r7, r9
 800444e:	88ba      	ldrh	r2, [r7, #4]
	return result;
 8004450:	2000      	movs	r0, #0
	groupModules[module - 1] |=(0x0001 << i);
 8004452:	4313      	orrs	r3, r2
 8004454:	80bb      	strh	r3, [r7, #4]
	return result;
 8004456:	e7c6      	b.n	80043e6 <AddModuleToGroup+0x72>
			return BOS_ERR_Keyword;
 8004458:	2006      	movs	r0, #6
 800445a:	e7c4      	b.n	80043e6 <AddModuleToGroup+0x72>
			strcpy(groupAlias[i],group);
 800445c:	464b      	mov	r3, r9
 800445e:	00a0      	lsls	r0, r4, #2
 8004460:	1900      	adds	r0, r0, r4
 8004462:	3338      	adds	r3, #56	; 0x38
 8004464:	0040      	lsls	r0, r0, #1
 8004466:	1818      	adds	r0, r3, r0
 8004468:	0031      	movs	r1, r6
 800446a:	f00e fe57 	bl	801311c <strcpy>
 800446e:	2301      	movs	r3, #1
 8004470:	40a3      	lsls	r3, r4
 8004472:	b21b      	sxth	r3, r3
			break;
 8004474:	e7e7      	b.n	8004446 <AddModuleToGroup+0xd2>
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	20000a98 	.word	0x20000a98
 800447c:	080174a4 	.word	0x080174a4
 8004480:	20000008 	.word	0x20000008
 8004484:	20000e06 	.word	0x20000e06
 8004488:	20000c18 	.word	0x20000c18
 800448c:	200000b8 	.word	0x200000b8

08004490 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 8004490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004492:	4657      	mov	r7, sl
 8004494:	46de      	mov	lr, fp
 8004496:	464e      	mov	r6, r9
 8004498:	4645      	mov	r5, r8
 800449a:	b5e0      	push	{r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 800449c:	4b29      	ldr	r3, [pc, #164]	; (8004544 <ReadPortsDir+0xb4>)
BOS_Status ReadPortsDir(void){
 800449e:	b083      	sub	sp, #12
	for(uint8_t i =1; i <= N; i++){
 80044a0:	469a      	mov	sl, r3
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d04a      	beq.n	800453e <ReadPortsDir+0xae>
	BOS_Status result =BOS_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	4b26      	ldr	r3, [pc, #152]	; (8004548 <ReadPortsDir+0xb8>)
	for(uint8_t i =1; i <= N; i++){
 80044ae:	2501      	movs	r5, #1
 80044b0:	4698      	mov	r8, r3
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <ReadPortsDir+0xbc>)
 80044b4:	4699      	mov	r9, r3
			if(responseStatus != BOS_OK){
 80044b6:	4b26      	ldr	r3, [pc, #152]	; (8004550 <ReadPortsDir+0xc0>)
 80044b8:	469b      	mov	fp, r3
 80044ba:	e014      	b.n	80044e6 <ReadPortsDir+0x56>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 80044bc:	2200      	movs	r2, #0
 80044be:	2113      	movs	r1, #19
 80044c0:	0028      	movs	r0, r5
 80044c2:	f005 fae9 	bl	8009a98 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 80044c6:	2032      	movs	r0, #50	; 0x32
 80044c8:	f008 fdbe 	bl	800d048 <StartMilliDelay>
			if(responseStatus != BOS_OK){
 80044cc:	2324      	movs	r3, #36	; 0x24
 80044ce:	465a      	mov	r2, fp
 80044d0:	5cd3      	ldrb	r3, [r2, r3]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <ReadPortsDir+0x4a>
				result =BOS_ERR_NoResponse;
 80044d6:	2302      	movs	r3, #2
 80044d8:	9301      	str	r3, [sp, #4]
	for(uint8_t i =1; i <= N; i++){
 80044da:	4653      	mov	r3, sl
 80044dc:	3501      	adds	r5, #1
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b2ed      	uxtb	r5, r5
 80044e2:	42ab      	cmp	r3, r5
 80044e4:	d323      	bcc.n	800452e <ReadPortsDir+0x9e>
		if(i != myID){
 80044e6:	4643      	mov	r3, r8
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	42ab      	cmp	r3, r5
 80044ec:	d1e6      	bne.n	80044bc <ReadPortsDir+0x2c>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 80044ee:	2780      	movs	r7, #128	; 0x80
 80044f0:	2600      	movs	r6, #0
			for(uint8_t p =1; p <= NumOfPorts; p++){
 80044f2:	2401      	movs	r4, #1
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 80044f4:	023f      	lsls	r7, r7, #8
 80044f6:	0020      	movs	r0, r4
 80044f8:	f008 ffe0 	bl	800d4bc <GetUart>
 80044fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044fe:	42bb      	cmp	r3, r7
 8004500:	d10a      	bne.n	8004518 <ReadPortsDir+0x88>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 8004502:	0039      	movs	r1, r7
 8004504:	4643      	mov	r3, r8
 8004506:	464a      	mov	r2, r9
 8004508:	4131      	asrs	r1, r6
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	3b01      	subs	r3, #1
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	5a9a      	ldrh	r2, [r3, r2]
 8004512:	430a      	orrs	r2, r1
 8004514:	4649      	mov	r1, r9
 8004516:	525a      	strh	r2, [r3, r1]
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004518:	3401      	adds	r4, #1
 800451a:	b2e4      	uxtb	r4, r4
 800451c:	3601      	adds	r6, #1
 800451e:	2c07      	cmp	r4, #7
 8004520:	d1e9      	bne.n	80044f6 <ReadPortsDir+0x66>
	for(uint8_t i =1; i <= N; i++){
 8004522:	4653      	mov	r3, sl
 8004524:	3501      	adds	r5, #1
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	b2ed      	uxtb	r5, r5
 800452a:	42ab      	cmp	r3, r5
 800452c:	d2db      	bcs.n	80044e6 <ReadPortsDir+0x56>
			}
		}
	}
	
	return result;
}
 800452e:	9801      	ldr	r0, [sp, #4]
 8004530:	b003      	add	sp, #12
 8004532:	bc3c      	pop	{r2, r3, r4, r5}
 8004534:	4690      	mov	r8, r2
 8004536:	4699      	mov	r9, r3
 8004538:	46a2      	mov	sl, r4
 800453a:	46ab      	mov	fp, r5
 800453c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status result =BOS_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	e7f4      	b.n	800452e <ReadPortsDir+0x9e>
 8004544:	20000008 	.word	0x20000008
 8004548:	20000a98 	.word	0x20000a98
 800454c:	20007334 	.word	0x20007334
 8004550:	20000c18 	.word	0x20000c18

08004554 <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 8004554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004556:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004558:	2680      	movs	r6, #128	; 0x80
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <UpdateMyPortsDir+0x5c>)
BOS_Status UpdateMyPortsDir(void){
 800455c:	b500      	push	{lr}
 800455e:	2500      	movs	r5, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004560:	2401      	movs	r4, #1
 8004562:	4698      	mov	r8, r3
 8004564:	4f13      	ldr	r7, [pc, #76]	; (80045b4 <UpdateMyPortsDir+0x60>)
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004566:	0236      	lsls	r6, r6, #8
 8004568:	e009      	b.n	800457e <UpdateMyPortsDir+0x2a>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800456a:	3401      	adds	r4, #1
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
 800456c:	f008 ffa6 	bl	800d4bc <GetUart>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004570:	b2e4      	uxtb	r4, r4
			SwapUartPins(GetUart(p),NORMAL);
 8004572:	2100      	movs	r1, #0
 8004574:	f008 ffae 	bl	800d4d4 <SwapUartPins>
 8004578:	3501      	adds	r5, #1
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800457a:	2c07      	cmp	r4, #7
 800457c:	d013      	beq.n	80045a6 <UpdateMyPortsDir+0x52>
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 800457e:	4642      	mov	r2, r8
 8004580:	783b      	ldrb	r3, [r7, #0]
			SwapUartPins(GetUart(p),NORMAL);
 8004582:	0020      	movs	r0, r4
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004584:	3b01      	subs	r3, #1
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	5ad3      	ldrh	r3, [r2, r3]
 800458a:	0032      	movs	r2, r6
 800458c:	412a      	asrs	r2, r5
 800458e:	421a      	tst	r2, r3
 8004590:	d0eb      	beq.n	800456a <UpdateMyPortsDir+0x16>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004592:	3401      	adds	r4, #1
		}
		else{
			/* Port is reversed */
			SwapUartPins(GetUart(p),REVERSED);
 8004594:	f008 ff92 	bl	800d4bc <GetUart>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004598:	b2e4      	uxtb	r4, r4
			SwapUartPins(GetUart(p),REVERSED);
 800459a:	2101      	movs	r1, #1
 800459c:	f008 ff9a 	bl	800d4d4 <SwapUartPins>
 80045a0:	3501      	adds	r5, #1
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80045a2:	2c07      	cmp	r4, #7
 80045a4:	d1eb      	bne.n	800457e <UpdateMyPortsDir+0x2a>
		}
	}
	
	return result;
}
 80045a6:	2000      	movs	r0, #0
 80045a8:	bc04      	pop	{r2}
 80045aa:	4690      	mov	r8, r2
 80045ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	20007334 	.word	0x20007334
 80045b4:	20000a98 	.word	0x20000a98

080045b8 <BOS_Init>:
void BOS_Init(void){
 80045b8:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 80045ba:	f008 fbf9 	bl	800cdb0 <RTC_Init>
	GetTimeDate();
 80045be:	f008 fc9d 	bl	800cefc <GetTimeDate>
	EE_Init();
 80045c2:	f003 fa55 	bl	8007a70 <EE_Init>
	GPIO_Init();
 80045c6:	f008 f95b 	bl	800c880 <GPIO_Init>
	DMA_Init();
 80045ca:	f007 f8f1 	bl	800b7b0 <DMA_Init>
	TIM_USEC_Init();
 80045ce:	f008 fcc7 	bl	800cf60 <TIM_USEC_Init>
	CRC_Init();
 80045d2:	f008 f915 	bl	800c800 <CRC_Init>
	TIM_MSEC_Init();
 80045d6:	f008 fcf5 	bl	800cfc4 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 80045da:	f008 fa01 	bl	800c9e0 <IsFactoryReset>
 80045de:	2800      	cmp	r0, #0
 80045e0:	d162      	bne.n	80046a8 <BOS_Init+0xf0>
	if(IsLowerCLIbaud()){
 80045e2:	f7ff f835 	bl	8003650 <IsLowerCLIbaud>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d053      	beq.n	8004692 <BOS_Init+0xda>
		CLI_LOW_Baudrate_Flag =1;
 80045ea:	2322      	movs	r3, #34	; 0x22
 80045ec:	2101      	movs	r1, #1
 80045ee:	4a38      	ldr	r2, [pc, #224]	; (80046d0 <BOS_Init+0x118>)
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80045f0:	2032      	movs	r0, #50	; 0x32
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80045f2:	2401      	movs	r4, #1
		CLI_LOW_Baudrate_Flag =1;
 80045f4:	54d1      	strb	r1, [r2, r3]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80045f6:	f008 fd27 	bl	800d048 <StartMilliDelay>
		Module_Peripheral_Init();
 80045fa:	f007 f88d 	bl	800b718 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80045fe:	21e1      	movs	r1, #225	; 0xe1
 8004600:	4d34      	ldr	r5, [pc, #208]	; (80046d4 <BOS_Init+0x11c>)
			UpdateBaudrate(port,BOS.clibaudrate);
 8004602:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004604:	3401      	adds	r4, #1
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8004606:	0249      	lsls	r1, r1, #9
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004608:	b2e4      	uxtb	r4, r4
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800460a:	60a9      	str	r1, [r5, #8]
			UpdateBaudrate(port,BOS.clibaudrate);
 800460c:	f008 ff44 	bl	800d498 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004610:	2c07      	cmp	r4, #7
 8004612:	d007      	beq.n	8004624 <BOS_Init+0x6c>
			UpdateBaudrate(port,BOS.clibaudrate);
 8004614:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004616:	3401      	adds	r4, #1
 8004618:	68a9      	ldr	r1, [r5, #8]
 800461a:	b2e4      	uxtb	r4, r4
			UpdateBaudrate(port,BOS.clibaudrate);
 800461c:	f008 ff3c 	bl	800d498 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004620:	2c07      	cmp	r4, #7
 8004622:	d1f7      	bne.n	8004614 <BOS_Init+0x5c>
	LoadEEvars();
 8004624:	f7fe fede 	bl	80033e4 <LoadEEvars>
	UpdateMyPortsDir();
 8004628:	f7ff ff94 	bl	8004554 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 800462c:	f007 fd78 	bl	800c120 <SetupMessagingRxDMAs>
		IND_ON();
 8004630:	2180      	movs	r1, #128	; 0x80
 8004632:	2090      	movs	r0, #144	; 0x90
	if(myID == 0) /* Native module */
 8004634:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <BOS_Init+0x120>)
		IND_ON();
 8004636:	2201      	movs	r2, #1
	if(myID == 0) /* Native module */
 8004638:	781b      	ldrb	r3, [r3, #0]
		IND_ON();
 800463a:	0109      	lsls	r1, r1, #4
 800463c:	05c0      	lsls	r0, r0, #23
	if(myID == 0) /* Native module */
 800463e:	2b00      	cmp	r3, #0
 8004640:	d02d      	beq.n	800469e <BOS_Init+0xe6>
		IND_ON();
 8004642:	f00c fbcf 	bl	8010de4 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8004646:	20fa      	movs	r0, #250	; 0xfa
 8004648:	0040      	lsls	r0, r0, #1
 800464a:	f008 fcfd 	bl	800d048 <StartMilliDelay>
		IND_OFF();
 800464e:	2180      	movs	r1, #128	; 0x80
 8004650:	2090      	movs	r0, #144	; 0x90
 8004652:	2200      	movs	r2, #0
 8004654:	0109      	lsls	r1, r1, #4
 8004656:	05c0      	lsls	r0, r0, #23
 8004658:	f00c fbc4 	bl	8010de4 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 800465c:	2064      	movs	r0, #100	; 0x64
 800465e:	f008 fcf3 	bl	800d048 <StartMilliDelay>
		IND_ON();
 8004662:	2180      	movs	r1, #128	; 0x80
 8004664:	2090      	movs	r0, #144	; 0x90
 8004666:	2201      	movs	r2, #1
 8004668:	05c0      	lsls	r0, r0, #23
 800466a:	0109      	lsls	r1, r1, #4
 800466c:	f00c fbba 	bl	8010de4 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004670:	2064      	movs	r0, #100	; 0x64
 8004672:	f008 fce9 	bl	800d048 <StartMilliDelay>
		IND_OFF();
 8004676:	2180      	movs	r1, #128	; 0x80
 8004678:	2090      	movs	r0, #144	; 0x90
 800467a:	2200      	movs	r2, #0
 800467c:	0109      	lsls	r1, r1, #4
 800467e:	05c0      	lsls	r0, r0, #23
 8004680:	f00c fbb0 	bl	8010de4 <HAL_GPIO_WritePin>
	ResetUartORE();
 8004684:	f003 f864 	bl	8007750 <ResetUartORE>
	BOS_initialized =1;
 8004688:	2325      	movs	r3, #37	; 0x25
 800468a:	2101      	movs	r1, #1
 800468c:	4a13      	ldr	r2, [pc, #76]	; (80046dc <BOS_Init+0x124>)
 800468e:	54d1      	strb	r1, [r2, r3]
}
 8004690:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004692:	2032      	movs	r0, #50	; 0x32
 8004694:	f008 fcd8 	bl	800d048 <StartMilliDelay>
		Module_Peripheral_Init();
 8004698:	f007 f83e 	bl	800b718 <Module_Peripheral_Init>
 800469c:	e7c2      	b.n	8004624 <BOS_Init+0x6c>
		IND_ON();
 800469e:	f00c fba1 	bl	8010de4 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 80046a2:	20fa      	movs	r0, #250	; 0xfa
 80046a4:	0040      	lsls	r0, r0, #1
 80046a6:	e7e4      	b.n	8004672 <BOS_Init+0xba>
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 80046a8:	4c0d      	ldr	r4, [pc, #52]	; (80046e0 <BOS_Init+0x128>)
 80046aa:	4d0e      	ldr	r5, [pc, #56]	; (80046e4 <BOS_Init+0x12c>)
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	42ab      	cmp	r3, r5
 80046b0:	d004      	beq.n	80046bc <BOS_Init+0x104>
		if(EE_Format() == HAL_OK){
 80046b2:	f003 f98d 	bl	80079d0 <EE_Format>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d100      	bne.n	80046bc <BOS_Init+0x104>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 80046ba:	6025      	str	r5, [r4, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80046bc:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046c0:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <BOS_Init+0x130>)
 80046c2:	4a0a      	ldr	r2, [pc, #40]	; (80046ec <BOS_Init+0x134>)
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	e7fd      	b.n	80046ca <BOS_Init+0x112>
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	20000b18 	.word	0x20000b18
 80046d4:	20006ea8 	.word	0x20006ea8
 80046d8:	20000a98 	.word	0x20000a98
 80046dc:	20000c18 	.word	0x20000c18
 80046e0:	20007ff0 	.word	0x20007ff0
 80046e4:	beefdead 	.word	0xbeefdead
 80046e8:	e000ed00 	.word	0xe000ed00
 80046ec:	05fa0004 	.word	0x05fa0004

080046f0 <Module_Init>:
void Module_Init(void){
 80046f0:	b510      	push	{r4, lr}
	HAL_Init();
 80046f2:	f00a ff0d 	bl	800f510 <HAL_Init>
	SystemClock_Config();
 80046f6:	f006 fea9 	bl	800b44c <SystemClock_Config>
	BOS_Init();
 80046fa:	f7ff ff5d 	bl	80045b8 <BOS_Init>
	MX_FREERTOS_Init();
 80046fe:	f003 fb0f 	bl	8007d20 <MX_FREERTOS_Init>
	osKernelStart();
 8004702:	f008 ff99 	bl	800d638 <osKernelStart>
}
 8004706:	bd10      	pop	{r4, pc}

08004708 <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800470a:	4645      	mov	r5, r8
 800470c:	4657      	mov	r7, sl
 800470e:	464e      	mov	r6, r9
 8004710:	46de      	mov	lr, fp
 8004712:	b5e0      	push	{r5, r6, r7, lr}
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 8004714:	4f82      	ldr	r7, [pc, #520]	; (8004920 <WriteToRemote+0x218>)
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 8004716:	b083      	sub	sp, #12
 8004718:	ac0c      	add	r4, sp, #48	; 0x30
 800471a:	cc40      	ldmia	r4!, {r6}
	response =BOSMessaging.response;
 800471c:	783d      	ldrb	r5, [r7, #0]
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 800471e:	9001      	str	r0, [sp, #4]
 8004720:	7824      	ldrb	r4, [r4, #0]
	response =BOSMessaging.response;
 8004722:	46a8      	mov	r8, r5
	if(timeout)
 8004724:	2e00      	cmp	r6, #0
 8004726:	d059      	beq.n	80047dc <WriteToRemote+0xd4>
		BOSMessaging.response = BOS_RESPONSE_MSG;
 8004728:	2520      	movs	r5, #32
 800472a:	703d      	strb	r5, [r7, #0]
	else
		BOSMessaging.response = BOS_RESPONSE_NONE;
	
	/* Check if a force write is needed */
	if(force)
		code = CODE_WRITE_REMOTE_FORCE;
 800472c:	4265      	negs	r5, r4
 800472e:	416c      	adcs	r4, r5
 8004730:	2501      	movs	r5, #1
 8004732:	2022      	movs	r0, #34	; 0x22
 8004734:	4264      	negs	r4, r4
 8004736:	43ac      	bics	r4, r5
 8004738:	46a3      	mov	fp, r4
 800473a:	4684      	mov	ip, r0
 800473c:	b2d5      	uxtb	r5, r2
 800473e:	46a9      	mov	r9, r5
	else
		code = CODE_WRITE_REMOTE;
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 8004740:	4d78      	ldr	r5, [pc, #480]	; (8004924 <WriteToRemote+0x21c>)
		code = CODE_WRITE_REMOTE_FORCE;
 8004742:	44e3      	add	fp, ip
	if(remoteAddress < FLASH_BASE){
 8004744:	42aa      	cmp	r2, r5
 8004746:	d829      	bhi.n	800479c <WriteToRemote+0x94>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 8004748:	2224      	movs	r2, #36	; 0x24
 800474a:	464c      	mov	r4, r9
 800474c:	4d76      	ldr	r5, [pc, #472]	; (8004928 <WriteToRemote+0x220>)
 800474e:	54ac      	strb	r4, [r5, r2]
		messageParams[1] =format;						// Send local format
 8004750:	002a      	movs	r2, r5
 8004752:	3224      	adds	r2, #36	; 0x24
 8004754:	7053      	strb	r3, [r2, #1]
		/* Send variable value based on local format */
		switch(format){
 8004756:	2b08      	cmp	r3, #8
 8004758:	d814      	bhi.n	8004784 <WriteToRemote+0x7c>
 800475a:	4a74      	ldr	r2, [pc, #464]	; (800492c <WriteToRemote+0x224>)
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	58d3      	ldr	r3, [r2, r3]
 8004760:	469f      	mov	pc, r3
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
				SendMessageToModule(module,code,10);
				break;
			case FMT_INT32:
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 8004762:	680b      	ldr	r3, [r1, #0]
 8004764:	3524      	adds	r5, #36	; 0x24
 8004766:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 8004768:	680b      	ldr	r3, [r1, #0]
 800476a:	121b      	asrs	r3, r3, #8
 800476c:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 800476e:	680b      	ldr	r3, [r1, #0]
 8004770:	141b      	asrs	r3, r3, #16
 8004772:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004774:	680b      	ldr	r3, [r1, #0]
 8004776:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,code,10);
 8004778:	220a      	movs	r2, #10
 800477a:	4659      	mov	r1, fp
 800477c:	9801      	ldr	r0, [sp, #4]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 800477e:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,code,10);
 8004780:	f005 f98a 	bl	8009a98 <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 8004784:	4643      	mov	r3, r8
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 8004786:	2000      	movs	r0, #0
	BOSMessaging.response =response;
 8004788:	703b      	strb	r3, [r7, #0]
	if(timeout){
 800478a:	2e00      	cmp	r6, #0
 800478c:	d128      	bne.n	80047e0 <WriteToRemote+0xd8>
}
 800478e:	b003      	add	sp, #12
 8004790:	bc3c      	pop	{r2, r3, r4, r5}
 8004792:	4690      	mov	r8, r2
 8004794:	4699      	mov	r9, r3
 8004796:	46a2      	mov	sl, r4
 8004798:	46ab      	mov	fp, r5
 800479a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		messageParams[0] =0;
 800479c:	2024      	movs	r0, #36	; 0x24
 800479e:	4684      	mov	ip, r0
 80047a0:	2000      	movs	r0, #0
 80047a2:	4682      	mov	sl, r0
 80047a4:	4660      	mov	r0, ip
 80047a6:	4654      	mov	r4, sl
 80047a8:	4d5f      	ldr	r5, [pc, #380]	; (8004928 <WriteToRemote+0x220>)
		messageParams[1] =format;							// Local format
 80047aa:	44ac      	add	ip, r5
		messageParams[0] =0;
 80047ac:	542c      	strb	r4, [r5, r0]
		messageParams[1] =format;							// Local format
 80047ae:	4660      	mov	r0, ip
 80047b0:	7043      	strb	r3, [r0, #1]
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 80047b2:	0e10      	lsrs	r0, r2, #24
 80047b4:	4682      	mov	sl, r0
 80047b6:	4660      	mov	r0, ip
 80047b8:	4654      	mov	r4, sl
 80047ba:	7084      	strb	r4, [r0, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80047bc:	0c10      	lsrs	r0, r2, #16
 80047be:	4682      	mov	sl, r0
 80047c0:	4660      	mov	r0, ip
 80047c2:	4654      	mov	r4, sl
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 80047c4:	0a12      	lsrs	r2, r2, #8
 80047c6:	7102      	strb	r2, [r0, #4]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80047c8:	70c4      	strb	r4, [r0, #3]
		messageParams[5] =(uint8_t )remoteAddress;
 80047ca:	4662      	mov	r2, ip
 80047cc:	4648      	mov	r0, r9
 80047ce:	7150      	strb	r0, [r2, #5]
		switch(format){
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d8d7      	bhi.n	8004784 <WriteToRemote+0x7c>
 80047d4:	4a56      	ldr	r2, [pc, #344]	; (8004930 <WriteToRemote+0x228>)
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	58d3      	ldr	r3, [r2, r3]
 80047da:	469f      	mov	pc, r3
		BOSMessaging.response = BOS_RESPONSE_NONE;
 80047dc:	703e      	strb	r6, [r7, #0]
 80047de:	e7a5      	b.n	800472c <WriteToRemote+0x24>
		uint32_t t0 =HAL_GetTick();
 80047e0:	f00a feae 	bl	800f540 <HAL_GetTick>
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80047e4:	2424      	movs	r4, #36	; 0x24
		uint32_t t0 =HAL_GetTick();
 80047e6:	0007      	movs	r7, r0
 80047e8:	4d52      	ldr	r5, [pc, #328]	; (8004934 <WriteToRemote+0x22c>)
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 80047ea:	5d28      	ldrb	r0, [r5, r4]
 80047ec:	2800      	cmp	r0, #0
 80047ee:	d0ce      	beq.n	800478e <WriteToRemote+0x86>
 80047f0:	f00a fea6 	bl	800f540 <HAL_GetTick>
 80047f4:	1bc0      	subs	r0, r0, r7
 80047f6:	42b0      	cmp	r0, r6
 80047f8:	d3f7      	bcc.n	80047ea <WriteToRemote+0xe2>
 80047fa:	5d28      	ldrb	r0, [r5, r4]
		return responseStatus;
 80047fc:	e7c7      	b.n	800478e <WriteToRemote+0x86>
				messageParams[2] =*(__IO int8_t* )localAddress;
 80047fe:	780b      	ldrb	r3, [r1, #0]
 8004800:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 8004802:	2203      	movs	r2, #3
 8004804:	2120      	movs	r1, #32
 8004806:	9801      	ldr	r0, [sp, #4]
				messageParams[2] =*(__IO int8_t* )localAddress;
 8004808:	70ab      	strb	r3, [r5, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 800480a:	f005 f945 	bl	8009a98 <SendMessageToModule>
				break;
 800480e:	e7b9      	b.n	8004784 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO int8_t* )localAddress;
 8004810:	780b      	ldrb	r3, [r1, #0]
 8004812:	3524      	adds	r5, #36	; 0x24
				SendMessageToModule(module,code,7);
 8004814:	2207      	movs	r2, #7
 8004816:	4659      	mov	r1, fp
 8004818:	9801      	ldr	r0, [sp, #4]
				messageParams[6] =*(__IO int8_t* )localAddress;
 800481a:	71ab      	strb	r3, [r5, #6]
				SendMessageToModule(module,code,7);
 800481c:	f005 f93c 	bl	8009a98 <SendMessageToModule>
				break;
 8004820:	e7b0      	b.n	8004784 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 8004822:	680b      	ldr	r3, [r1, #0]
 8004824:	3524      	adds	r5, #36	; 0x24
 8004826:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 8004828:	680b      	ldr	r3, [r1, #0]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 800482e:	680b      	ldr	r3, [r1, #0]
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	722b      	strb	r3, [r5, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004834:	680b      	ldr	r3, [r1, #0]
 8004836:	0e1b      	lsrs	r3, r3, #24
 8004838:	e79e      	b.n	8004778 <WriteToRemote+0x70>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 800483a:	780b      	ldrb	r3, [r1, #0]
 800483c:	3524      	adds	r5, #36	; 0x24
 800483e:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004840:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004842:	220a      	movs	r2, #10
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004844:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 8004846:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004848:	9801      	ldr	r0, [sp, #4]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 800484a:	712b      	strb	r3, [r5, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 800484c:	78cb      	ldrb	r3, [r1, #3]
 800484e:	716b      	strb	r3, [r5, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 8004850:	790b      	ldrb	r3, [r1, #4]
 8004852:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 8004854:	794b      	ldrb	r3, [r1, #5]
 8004856:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 8004858:	798b      	ldrb	r3, [r1, #6]
 800485a:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800485c:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800485e:	2120      	movs	r1, #32
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004860:	726b      	strb	r3, [r5, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004862:	f005 f919 	bl	8009a98 <SendMessageToModule>
				break;
 8004866:	e78d      	b.n	8004784 <WriteToRemote+0x7c>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 8004868:	780b      	ldrb	r3, [r1, #0]
 800486a:	3524      	adds	r5, #36	; 0x24
 800486c:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 800486e:	784b      	ldrb	r3, [r1, #1]
				SendMessageToModule(module,code,14);
 8004870:	220e      	movs	r2, #14
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004872:	71eb      	strb	r3, [r5, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004874:	788b      	ldrb	r3, [r1, #2]
				SendMessageToModule(module,code,14);
 8004876:	9801      	ldr	r0, [sp, #4]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004878:	722b      	strb	r3, [r5, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 800487a:	78cb      	ldrb	r3, [r1, #3]
 800487c:	726b      	strb	r3, [r5, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 800487e:	790b      	ldrb	r3, [r1, #4]
 8004880:	72ab      	strb	r3, [r5, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 8004882:	794b      	ldrb	r3, [r1, #5]
 8004884:	72eb      	strb	r3, [r5, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 8004886:	798b      	ldrb	r3, [r1, #6]
 8004888:	732b      	strb	r3, [r5, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800488a:	79cb      	ldrb	r3, [r1, #7]
				SendMessageToModule(module,code,14);
 800488c:	4659      	mov	r1, fp
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800488e:	736b      	strb	r3, [r5, #13]
				SendMessageToModule(module,code,14);
 8004890:	f005 f902 	bl	8009a98 <SendMessageToModule>
				break;
 8004894:	e776      	b.n	8004784 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 8004896:	880b      	ldrh	r3, [r1, #0]
 8004898:	3524      	adds	r5, #36	; 0x24
 800489a:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 800489c:	880b      	ldrh	r3, [r1, #0]
 800489e:	b21b      	sxth	r3, r3
 80048a0:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,code,8);
 80048a2:	2208      	movs	r2, #8
 80048a4:	4659      	mov	r1, fp
 80048a6:	9801      	ldr	r0, [sp, #4]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80048a8:	71eb      	strb	r3, [r5, #7]
				SendMessageToModule(module,code,8);
 80048aa:	f005 f8f5 	bl	8009a98 <SendMessageToModule>
				break;
 80048ae:	e769      	b.n	8004784 <WriteToRemote+0x7c>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 80048b0:	880b      	ldrh	r3, [r1, #0]
 80048b2:	3524      	adds	r5, #36	; 0x24
 80048b4:	71ab      	strb	r3, [r5, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 80048b6:	880b      	ldrh	r3, [r1, #0]
 80048b8:	0a1b      	lsrs	r3, r3, #8
 80048ba:	e7f2      	b.n	80048a2 <WriteToRemote+0x19a>
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 80048bc:	680b      	ldr	r3, [r1, #0]
 80048be:	3524      	adds	r5, #36	; 0x24
 80048c0:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80048c2:	680b      	ldr	r3, [r1, #0]
 80048c4:	121b      	asrs	r3, r3, #8
 80048c6:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 80048c8:	680b      	ldr	r3, [r1, #0]
 80048ca:	141b      	asrs	r3, r3, #16
 80048cc:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80048ce:	680b      	ldr	r3, [r1, #0]
 80048d0:	161b      	asrs	r3, r3, #24
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80048d2:	2206      	movs	r2, #6
 80048d4:	2120      	movs	r1, #32
 80048d6:	9801      	ldr	r0, [sp, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80048d8:	716b      	strb	r3, [r5, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 80048da:	f005 f8dd 	bl	8009a98 <SendMessageToModule>
				break;
 80048de:	e751      	b.n	8004784 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 80048e0:	680b      	ldr	r3, [r1, #0]
 80048e2:	3524      	adds	r5, #36	; 0x24
 80048e4:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 80048e6:	680b      	ldr	r3, [r1, #0]
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	70eb      	strb	r3, [r5, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 80048ec:	680b      	ldr	r3, [r1, #0]
 80048ee:	0c1b      	lsrs	r3, r3, #16
 80048f0:	712b      	strb	r3, [r5, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 80048f2:	680b      	ldr	r3, [r1, #0]
 80048f4:	0e1b      	lsrs	r3, r3, #24
 80048f6:	e7ec      	b.n	80048d2 <WriteToRemote+0x1ca>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 80048f8:	880b      	ldrh	r3, [r1, #0]
 80048fa:	3524      	adds	r5, #36	; 0x24
 80048fc:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80048fe:	880b      	ldrh	r3, [r1, #0]
 8004900:	b21b      	sxth	r3, r3
 8004902:	121b      	asrs	r3, r3, #8
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 8004904:	2204      	movs	r2, #4
 8004906:	2120      	movs	r1, #32
 8004908:	9801      	ldr	r0, [sp, #4]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 800490a:	70eb      	strb	r3, [r5, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 800490c:	f005 f8c4 	bl	8009a98 <SendMessageToModule>
				break;
 8004910:	e738      	b.n	8004784 <WriteToRemote+0x7c>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 8004912:	880b      	ldrh	r3, [r1, #0]
 8004914:	3524      	adds	r5, #36	; 0x24
 8004916:	70ab      	strb	r3, [r5, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 8004918:	880b      	ldrh	r3, [r1, #0]
 800491a:	0a1b      	lsrs	r3, r3, #8
 800491c:	e7f2      	b.n	8004904 <WriteToRemote+0x1fc>
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	20006e28 	.word	0x20006e28
 8004924:	07ffffff 	.word	0x07ffffff
 8004928:	20000b18 	.word	0x20000b18
 800492c:	0801745c 	.word	0x0801745c
 8004930:	08017480 	.word	0x08017480
 8004934:	20000c18 	.word	0x20000c18

08004938 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004938:	b530      	push	{r4, r5, lr}
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 800493a:	2101      	movs	r1, #1
char* GetDateString(void){
 800493c:	b083      	sub	sp, #12
	char *buffer =malloc(30 * sizeof(int8_t));
 800493e:	201e      	movs	r0, #30
 8004940:	f00d fef4 	bl	801272c <calloc>
 8004944:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004946:	4809      	ldr	r0, [pc, #36]	; (800496c <GetDateString+0x34>)
 8004948:	4909      	ldr	r1, [pc, #36]	; (8004970 <GetDateString+0x38>)
 800494a:	7d02      	ldrb	r2, [r0, #20]
 800494c:	8b05      	ldrh	r5, [r0, #24]
 800494e:	7d83      	ldrb	r3, [r0, #22]
 8004950:	3a01      	subs	r2, #1
 8004952:	9501      	str	r5, [sp, #4]
 8004954:	7d40      	ldrb	r0, [r0, #21]
 8004956:	0092      	lsls	r2, r2, #2
 8004958:	188a      	adds	r2, r1, r2
 800495a:	9000      	str	r0, [sp, #0]
 800495c:	6912      	ldr	r2, [r2, #16]
 800495e:	312c      	adds	r1, #44	; 0x2c
 8004960:	0020      	movs	r0, r4
 8004962:	f00e fb9f 	bl	80130a4 <sprintf>
	return buffer;
}
 8004966:	0020      	movs	r0, r4
 8004968:	b003      	add	sp, #12
 800496a:	bd30      	pop	{r4, r5, pc}
 800496c:	20006ea8 	.word	0x20006ea8
 8004970:	080174a4 	.word	0x080174a4

08004974 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004974:	b500      	push	{lr}
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <Bridge+0x24>)
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004978:	000a      	movs	r2, r1
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800497a:	7819      	ldrb	r1, [r3, #0]
 800497c:	2301      	movs	r3, #1
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 800497e:	b085      	sub	sp, #20
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004980:	9303      	str	r3, [sp, #12]
 8004982:	3b02      	subs	r3, #2
 8004984:	9302      	str	r3, [sp, #8]
 8004986:	9301      	str	r3, [sp, #4]
 8004988:	3303      	adds	r3, #3
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	000b      	movs	r3, r1
 800498e:	f005 f8a7 	bl	8009ae0 <StartScastDMAStream>
}
 8004992:	b005      	add	sp, #20
 8004994:	bd00      	pop	{pc}
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	20000a98 	.word	0x20000a98

0800499c <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 800499c:	2300      	movs	r3, #0
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 800499e:	b530      	push	{r4, r5, lr}
 80049a0:	0004      	movs	r4, r0
 80049a2:	000d      	movs	r5, r1
 80049a4:	b087      	sub	sp, #28
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 80049a6:	9304      	str	r3, [sp, #16]
 80049a8:	9303      	str	r3, [sp, #12]
 80049aa:	9302      	str	r3, [sp, #8]
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	2200      	movs	r2, #0
 80049b2:	2100      	movs	r1, #0
 80049b4:	2000      	movs	r0, #0
 80049b6:	f7fe fd93 	bl	80034e0 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80049ba:	1e60      	subs	r0, r4, #1
 80049bc:	00c3      	lsls	r3, r0, #3
 80049be:	4912      	ldr	r1, [pc, #72]	; (8004a08 <Unbridge+0x6c>)
 80049c0:	1a1b      	subs	r3, r3, r0
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	585b      	ldr	r3, [r3, r1]
 80049c6:	1e6a      	subs	r2, r5, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d012      	beq.n	80049f2 <Unbridge+0x56>
 80049cc:	00d3      	lsls	r3, r2, #3
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	585b      	ldr	r3, [r3, r1]
		SwitchStreamDMAToMsg(port1);
 80049d4:	0020      	movs	r0, r4
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d104      	bne.n	80049e4 <Unbridge+0x48>
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port2);
 80049da:	f002 fe15 	bl	8007608 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80049de:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80049e0:	b007      	add	sp, #28
 80049e2:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 80049e4:	f002 fe10 	bl	8007608 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80049e8:	0028      	movs	r0, r5
 80049ea:	f002 fe0d 	bl	8007608 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80049ee:	2000      	movs	r0, #0
 80049f0:	e7f6      	b.n	80049e0 <Unbridge+0x44>
	else if(streamDMA[port2 - 1].Instance != 0){
 80049f2:	00d3      	lsls	r3, r2, #3
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	585b      	ldr	r3, [r3, r1]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <Unbridge+0x66>
		SwitchStreamDMAToMsg(port2);
 80049fe:	0028      	movs	r0, r5
 8004a00:	e7eb      	b.n	80049da <Unbridge+0x3e>
		return BOS_ERR_WrongValue;
 8004a02:	2068      	movs	r0, #104	; 0x68
 8004a04:	e7ec      	b.n	80049e0 <Unbridge+0x44>
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	20001c78 	.word	0x20001c78

08004a0c <AddSnippet.part.0>:

/*-----------------------------------------------------------*/

/* Add a set of Commands to Command Snippets and activate
 */
BOS_Status AddSnippet(uint8_t code,char *string){
 8004a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a0e:	46d6      	mov	lr, sl
 8004a10:	4646      	mov	r6, r8
 8004a12:	464f      	mov	r7, r9
 8004a14:	b5c0      	push	{r6, r7, lr}
		case SNIPPET_CONDITION:
			return ParseSnippetCondition(string);
			
		case SNIPPET_COMMANDS:
			// Did we allocate a buffer already?
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004a16:	4e27      	ldr	r6, [pc, #156]	; (8004ab4 <AddSnippet.part.0+0xa8>)
 8004a18:	4d27      	ldr	r5, [pc, #156]	; (8004ab8 <AddSnippet.part.0+0xac>)
 8004a1a:	7833      	ldrb	r3, [r6, #0]
BOS_Status AddSnippet(uint8_t code,char *string){
 8004a1c:	4680      	mov	r8, r0
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	009c      	lsls	r4, r3, #2
 8004a22:	18e4      	adds	r4, r4, r3
 8004a24:	00a4      	lsls	r4, r4, #2
 8004a26:	192c      	adds	r4, r5, r4
 8004a28:	68e3      	ldr	r3, [r4, #12]
 8004a2a:	469a      	mov	sl, r3
 8004a2c:	f7fb fb74 	bl	8000118 <strlen>
 8004a30:	4653      	mov	r3, sl
 8004a32:	4681      	mov	r9, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d02e      	beq.n	8004a96 <AddSnippet.part.0+0x8a>
				// re-allocate with new size
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004a38:	4650      	mov	r0, sl
 8004a3a:	f7fb fb6d 	bl	8000118 <strlen>
				// Add two more bytes for the ENTER key (0x13) and end of string (0x00)
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a3e:	4649      	mov	r1, r9
 8004a40:	3102      	adds	r1, #2
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004a42:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a44:	1809      	adds	r1, r1, r0
 8004a46:	4650      	mov	r0, sl
 8004a48:	f00e f964 	bl	8012d14 <realloc>
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004a4c:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a4e:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004a50:	3a01      	subs	r2, #1
 8004a52:	0093      	lsls	r3, r2, #2
 8004a54:	189b      	adds	r3, r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	18eb      	adds	r3, r5, r3
 8004a5a:	68d8      	ldr	r0, [r3, #12]
 8004a5c:	1c7a      	adds	r2, r7, #1
 8004a5e:	1880      	adds	r0, r0, r2
 8004a60:	4641      	mov	r1, r8
 8004a62:	f00e fb5b 	bl	801311c <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004a66:	7832      	ldrb	r2, [r6, #0]
 8004a68:	3a01      	subs	r2, #1
 8004a6a:	0093      	lsls	r3, r2, #2
 8004a6c:	189b      	adds	r3, r3, r2
 8004a6e:	2213      	movs	r2, #19
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	18eb      	adds	r3, r5, r3
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	55da      	strb	r2, [r3, r7]
 8004a78:	7833      	ldrb	r3, [r6, #0]
 8004a7a:	3b01      	subs	r3, #1
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
			}
			// Return error if allocation fails
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004a7c:	0098      	lsls	r0, r3, #2
 8004a7e:	18c0      	adds	r0, r0, r3
 8004a80:	0080      	lsls	r0, r0, #2
 8004a82:	1828      	adds	r0, r5, r0
 8004a84:	68c3      	ldr	r3, [r0, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00d      	beq.n	8004aa6 <AddSnippet.part.0+0x9a>
			
		default:
			break;
	}
	
	return BOS_OK;
 8004a8a:	2000      	movs	r0, #0
}
 8004a8c:	bc1c      	pop	{r2, r3, r4}
 8004a8e:	4690      	mov	r8, r2
 8004a90:	4699      	mov	r9, r3
 8004a92:	46a2      	mov	sl, r4
 8004a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004a96:	3001      	adds	r0, #1
 8004a98:	f00d feb4 	bl	8012804 <malloc>
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004a9c:	4641      	mov	r1, r8
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004a9e:	60e0      	str	r0, [r4, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004aa0:	f00e fb3c 	bl	801311c <strcpy>
 8004aa4:	e7f1      	b.n	8004a8a <AddSnippet.part.0+0x7e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004aa6:	2214      	movs	r2, #20
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	f00e f901 	bl	8012cb0 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004aae:	200e      	movs	r0, #14
 8004ab0:	e7ec      	b.n	8004a8c <AddSnippet.part.0+0x80>
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	20001180 	.word	0x20001180
 8004ab8:	20006ec4 	.word	0x20006ec4

08004abc <StringToLowerCase>:
void StringToLowerCase(char *string){
 8004abc:	b570      	push	{r4, r5, r6, lr}
	for(int i =0; string[i]; i++){
 8004abe:	7804      	ldrb	r4, [r0, #0]
void StringToLowerCase(char *string){
 8004ac0:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 8004ac2:	2c00      	cmp	r4, #0
 8004ac4:	d00d      	beq.n	8004ae2 <StringToLowerCase+0x26>
		string[i] =tolower(string[i]);
 8004ac6:	2603      	movs	r6, #3
 8004ac8:	f00d fe8e 	bl	80127e8 <__locale_ctype_ptr>
 8004acc:	1900      	adds	r0, r0, r4
 8004ace:	7842      	ldrb	r2, [r0, #1]
 8004ad0:	4032      	ands	r2, r6
 8004ad2:	2a01      	cmp	r2, #1
 8004ad4:	d100      	bne.n	8004ad8 <StringToLowerCase+0x1c>
 8004ad6:	3420      	adds	r4, #32
 8004ad8:	702c      	strb	r4, [r5, #0]
 8004ada:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 8004adc:	782c      	ldrb	r4, [r5, #0]
 8004ade:	2c00      	cmp	r4, #0
 8004ae0:	d1f2      	bne.n	8004ac8 <StringToLowerCase+0xc>
}
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}

08004ae4 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae6:	4657      	mov	r7, sl
 8004ae8:	464e      	mov	r6, r9
 8004aea:	46de      	mov	lr, fp
 8004aec:	4645      	mov	r5, r8
 8004aee:	b5e0      	push	{r5, r6, r7, lr}
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004af0:	4ed8      	ldr	r6, [pc, #864]	; (8004e54 <ParseSnippetCondition+0x370>)
BOS_Status ParseSnippetCondition(char *string){
 8004af2:	b08b      	sub	sp, #44	; 0x2c
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004af4:	7834      	ldrb	r4, [r6, #0]
BOS_Status ParseSnippetCondition(char *string){
 8004af6:	0007      	movs	r7, r0
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004af8:	2c05      	cmp	r4, #5
 8004afa:	d067      	beq.n	8004bcc <ParseSnippetCondition+0xe8>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004afc:	00a3      	lsls	r3, r4, #2
 8004afe:	4dd6      	ldr	r5, [pc, #856]	; (8004e58 <ParseSnippetCondition+0x374>)
 8004b00:	1918      	adds	r0, r3, r4
 8004b02:	0080      	lsls	r0, r0, #2
 8004b04:	469a      	mov	sl, r3
 8004b06:	182b      	adds	r3, r5, r0
 8004b08:	4699      	mov	r9, r3
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	464a      	mov	r2, r9
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004b0e:	3002      	adds	r0, #2
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004b10:	8013      	strh	r3, [r2, #0]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004b12:	1828      	adds	r0, r5, r0
 8004b14:	2204      	movs	r2, #4
 8004b16:	2100      	movs	r1, #0
 8004b18:	f00e f8ca 	bl	8012cb0 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004b1c:	783b      	ldrb	r3, [r7, #0]
 8004b1e:	2b62      	cmp	r3, #98	; 0x62
 8004b20:	d102      	bne.n	8004b28 <ParseSnippetCondition+0x44>
 8004b22:	78bb      	ldrb	r3, [r7, #2]
 8004b24:	2b2e      	cmp	r3, #46	; 0x2e
 8004b26:	d057      	beq.n	8004bd8 <ParseSnippetCondition+0xf4>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004b28:	1d33      	adds	r3, r6, #4
 8004b2a:	4698      	mov	r8, r3
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	0039      	movs	r1, r7
 8004b30:	f00e faf4 	bl	801311c <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004b34:	4cc9      	ldr	r4, [pc, #804]	; (8004e5c <ParseSnippetCondition+0x378>)
 8004b36:	4640      	mov	r0, r8
 8004b38:	0021      	movs	r1, r4
 8004b3a:	f00f f96f 	bl	8013e1c <strtok>
		secondPart =strtok( NULL," ");
 8004b3e:	0021      	movs	r1, r4
		firstPart =strtok((char* )cInputString," ");
 8004b40:	0007      	movs	r7, r0
		secondPart =strtok( NULL," ");
 8004b42:	2000      	movs	r0, #0
 8004b44:	f00f f96a 	bl	8013e1c <strtok>
		thirdPart =strtok( NULL," ");
 8004b48:	0021      	movs	r1, r4
		secondPart =strtok( NULL," ");
 8004b4a:	4680      	mov	r8, r0
		thirdPart =strtok( NULL," ");
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	f00f f965 	bl	8013e1c <strtok>
 8004b52:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004b54:	2f00      	cmp	r7, #0
 8004b56:	d02f      	beq.n	8004bb8 <ParseSnippetCondition+0xd4>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004b58:	0038      	movs	r0, r7
 8004b5a:	f7fe fdd9 	bl	8003710 <IsModuleParameter>
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004b5e:	4643      	mov	r3, r8
			modPar1 =IsModuleParameter(firstPart);
 8004b60:	1e07      	subs	r7, r0, #0
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004b62:	d036      	beq.n	8004bd2 <ParseSnippetCondition+0xee>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d024      	beq.n	8004bb2 <ParseSnippetCondition+0xce>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004b68:	2c00      	cmp	r4, #0
 8004b6a:	d025      	beq.n	8004bb8 <ParseSnippetCondition+0xd4>
				modPar2 =IsModuleParameter(thirdPart);
 8004b6c:	0020      	movs	r0, r4
 8004b6e:	f7fe fdcf 	bl	8003710 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d06b      	beq.n	8004c4e <ParseSnippetCondition+0x16a>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004b76:	2204      	movs	r2, #4
 8004b78:	7833      	ldrb	r3, [r6, #0]
 8004b7a:	009c      	lsls	r4, r3, #2
 8004b7c:	4699      	mov	r9, r3
 8004b7e:	18e3      	adds	r3, r4, r3
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004b84:	18eb      	adds	r3, r5, r3
 8004b86:	70df      	strb	r7, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004b88:	71d8      	strb	r0, [r3, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b8a:	4640      	mov	r0, r8
 8004b8c:	f7fe fdcc 	bl	8003728 <IsMathOperator>
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b90:	7832      	ldrb	r2, [r6, #0]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b92:	444c      	add	r4, r9
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b94:	0093      	lsls	r3, r2, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b96:	00a4      	lsls	r4, r4, #2
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b98:	189b      	adds	r3, r3, r2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b9a:	192c      	adds	r4, r5, r4
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b9c:	009b      	lsls	r3, r3, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b9e:	7060      	strb	r0, [r4, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004ba0:	18ed      	adds	r5, r5, r3
 8004ba2:	786b      	ldrb	r3, [r5, #1]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <ParseSnippetCondition+0xd4>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
 8004ba8:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004baa:	3201      	adds	r2, #1
 8004bac:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004bae:	4698      	mov	r8, r3
 8004bb0:	e004      	b.n	8004bbc <ParseSnippetCondition+0xd8>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004bb2:	2c00      	cmp	r4, #0
 8004bb4:	d100      	bne.n	8004bb8 <ParseSnippetCondition+0xd4>
 8004bb6:	e07f      	b.n	8004cb8 <ParseSnippetCondition+0x1d4>
			return BOS_ERR_WrongParam;
 8004bb8:	2367      	movs	r3, #103	; 0x67
 8004bba:	4698      	mov	r8, r3
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	b00b      	add	sp, #44	; 0x2c
 8004bc0:	bc3c      	pop	{r2, r3, r4, r5}
 8004bc2:	4690      	mov	r8, r2
 8004bc4:	4699      	mov	r9, r3
 8004bc6:	46a2      	mov	sl, r4
 8004bc8:	46ab      	mov	fp, r5
 8004bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_SNIP_MEM_FULL;
 8004bcc:	230e      	movs	r3, #14
 8004bce:	4698      	mov	r8, r3
 8004bd0:	e7f4      	b.n	8004bbc <ParseSnippetCondition+0xd8>
			else if(secondPart != NULL && thirdPart != NULL){
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1c8      	bne.n	8004b68 <ParseSnippetCondition+0x84>
 8004bd6:	e7ef      	b.n	8004bb8 <ParseSnippetCondition+0xd4>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004bd8:	787b      	ldrb	r3, [r7, #1]
 8004bda:	3b30      	subs	r3, #48	; 0x30
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	469b      	mov	fp, r3
	BOS_Status status =BOS_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	4698      	mov	r8, r3
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004be4:	465b      	mov	r3, fp
 8004be6:	2b06      	cmp	r3, #6
 8004be8:	d8e8      	bhi.n	8004bbc <ParseSnippetCondition+0xd8>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004bea:	4649      	mov	r1, r9
 8004bec:	2301      	movs	r3, #1
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004bee:	4658      	mov	r0, fp
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004bf0:	800b      	strh	r3, [r1, #0]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004bf2:	1cfb      	adds	r3, r7, #3
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004bf4:	7088      	strb	r0, [r1, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004bf6:	2207      	movs	r2, #7
 8004bf8:	4999      	ldr	r1, [pc, #612]	; (8004e60 <ParseSnippetCondition+0x37c>)
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	9307      	str	r3, [sp, #28]
 8004bfe:	f00e fa95 	bl	801312c <strncmp>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d03d      	beq.n	8004c82 <ParseSnippetCondition+0x19e>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004c06:	220e      	movs	r2, #14
 8004c08:	4996      	ldr	r1, [pc, #600]	; (8004e64 <ParseSnippetCondition+0x380>)
 8004c0a:	9807      	ldr	r0, [sp, #28]
 8004c0c:	f00e fa8e 	bl	801312c <strncmp>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d15e      	bne.n	8004cd2 <ParseSnippetCondition+0x1ee>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004c14:	2306      	movs	r3, #6
 8004c16:	464a      	mov	r2, r9
 8004c18:	70d3      	strb	r3, [r2, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004c1a:	465b      	mov	r3, fp
 8004c1c:	00da      	lsls	r2, r3, #3
 8004c1e:	4b92      	ldr	r3, [pc, #584]	; (8004e68 <ParseSnippetCondition+0x384>)
 8004c20:	445a      	add	r2, fp
 8004c22:	189b      	adds	r3, r3, r2
 8004c24:	7a1b      	ldrb	r3, [r3, #8]
 8004c26:	079b      	lsls	r3, r3, #30
 8004c28:	d40e      	bmi.n	8004c48 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	9305      	str	r3, [sp, #20]
 8004c2e:	4643      	mov	r3, r8
 8004c30:	2201      	movs	r2, #1
 8004c32:	9304      	str	r3, [sp, #16]
 8004c34:	9303      	str	r3, [sp, #12]
 8004c36:	9302      	str	r3, [sp, #8]
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	2300      	movs	r3, #0
 8004c40:	4658      	mov	r0, fp
 8004c42:	f003 fced 	bl	8008620 <SetButtonEvents>
 8004c46:	7834      	ldrb	r4, [r6, #0]
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004c48:	3401      	adds	r4, #1
 8004c4a:	7034      	strb	r4, [r6, #0]
 8004c4c:	e7b6      	b.n	8004bbc <ParseSnippetCondition+0xd8>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004c4e:	7832      	ldrb	r2, [r6, #0]
					float constant =atof(thirdPart);
 8004c50:	0020      	movs	r0, r4
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004c52:	0093      	lsls	r3, r2, #2
 8004c54:	189b      	adds	r3, r3, r2
 8004c56:	2203      	movs	r2, #3
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	54ea      	strb	r2, [r5, r3]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004c5c:	18eb      	adds	r3, r5, r3
 8004c5e:	70df      	strb	r7, [r3, #3]
					float constant =atof(thirdPart);
 8004c60:	f00d fd52 	bl	8012708 <atof>
 8004c64:	f7fd ffb0 	bl	8002bc8 <__aeabi_d2f>
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004c68:	7833      	ldrb	r3, [r6, #0]
					float constant =atof(thirdPart);
 8004c6a:	9009      	str	r0, [sp, #36]	; 0x24
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004c6c:	009c      	lsls	r4, r3, #2
 8004c6e:	18e0      	adds	r0, r4, r3
 8004c70:	0080      	lsls	r0, r0, #2
 8004c72:	3006      	adds	r0, #6
 8004c74:	1828      	adds	r0, r5, r0
 8004c76:	2204      	movs	r2, #4
 8004c78:	a909      	add	r1, sp, #36	; 0x24
 8004c7a:	4699      	mov	r9, r3
 8004c7c:	f00e f80f 	bl	8012c9e <memcpy>
 8004c80:	e783      	b.n	8004b8a <ParseSnippetCondition+0xa6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004c82:	2305      	movs	r3, #5
 8004c84:	4649      	mov	r1, r9
 8004c86:	70cb      	strb	r3, [r1, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004c88:	4659      	mov	r1, fp
 8004c8a:	4b77      	ldr	r3, [pc, #476]	; (8004e68 <ParseSnippetCondition+0x384>)
 8004c8c:	00ca      	lsls	r2, r1, #3
 8004c8e:	445a      	add	r2, fp
 8004c90:	189b      	adds	r3, r3, r2
 8004c92:	2201      	movs	r2, #1
 8004c94:	7a1b      	ldrb	r3, [r3, #8]
 8004c96:	421a      	tst	r2, r3
 8004c98:	d1d6      	bne.n	8004c48 <ParseSnippetCondition+0x164>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	9305      	str	r3, [sp, #20]
 8004c9e:	4643      	mov	r3, r8
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	9304      	str	r3, [sp, #16]
 8004ca4:	9303      	str	r3, [sp, #12]
 8004ca6:	9302      	str	r3, [sp, #8]
 8004ca8:	9301      	str	r3, [sp, #4]
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	2101      	movs	r1, #1
 8004cae:	4658      	mov	r0, fp
 8004cb0:	f003 fcb6 	bl	8008620 <SetButtonEvents>
 8004cb4:	7834      	ldrb	r4, [r6, #0]
 8004cb6:	e7c7      	b.n	8004c48 <ParseSnippetCondition+0x164>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004cb8:	2102      	movs	r1, #2
 8004cba:	7832      	ldrb	r2, [r6, #0]
 8004cbc:	0093      	lsls	r3, r2, #2
 8004cbe:	189b      	adds	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	54e9      	strb	r1, [r5, r3]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cc4:	18ed      	adds	r5, r5, r3
				return BOS_OK;
 8004cc6:	2300      	movs	r3, #0
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004cc8:	3201      	adds	r2, #1
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004cca:	70e8      	strb	r0, [r5, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004ccc:	7032      	strb	r2, [r6, #0]
				return BOS_OK;
 8004cce:	4698      	mov	r8, r3
 8004cd0:	e774      	b.n	8004bbc <ParseSnippetCondition+0xd8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004cd2:	220c      	movs	r2, #12
 8004cd4:	4965      	ldr	r1, [pc, #404]	; (8004e6c <ParseSnippetCondition+0x388>)
 8004cd6:	9807      	ldr	r0, [sp, #28]
 8004cd8:	f00e fa28 	bl	801312c <strncmp>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d131      	bne.n	8004d44 <ParseSnippetCondition+0x260>
				if(!button[port].pressedX1Sec){
 8004ce0:	465b      	mov	r3, fp
 8004ce2:	00da      	lsls	r2, r3, #3
 8004ce4:	4b60      	ldr	r3, [pc, #384]	; (8004e68 <ParseSnippetCondition+0x384>)
 8004ce6:	445a      	add	r2, fp
 8004ce8:	189b      	adds	r3, r3, r2
 8004cea:	789a      	ldrb	r2, [r3, #2]
 8004cec:	2a00      	cmp	r2, #0
 8004cee:	d063      	beq.n	8004db8 <ParseSnippetCondition+0x2d4>
				else if(!button[port].pressedX2Sec){
 8004cf0:	78da      	ldrb	r2, [r3, #3]
 8004cf2:	2a00      	cmp	r2, #0
 8004cf4:	d07d      	beq.n	8004df2 <ParseSnippetCondition+0x30e>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004cf6:	220c      	movs	r2, #12
				else if(!button[port].pressedX3Sec){
 8004cf8:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004cfa:	4690      	mov	r8, r2
				else if(!button[port].pressedX3Sec){
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1a3      	bne.n	8004c48 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004d00:	0023      	movs	r3, r4
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004d02:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004d04:	4453      	add	r3, sl
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	18eb      	adds	r3, r5, r3
 8004d0a:	3a01      	subs	r2, #1
 8004d0c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004d0e:	300f      	adds	r0, #15
 8004d10:	f00d fcff 	bl	8012712 <atoi>
 8004d14:	7832      	ldrb	r2, [r6, #0]
 8004d16:	b2c0      	uxtb	r0, r0
 8004d18:	0093      	lsls	r3, r2, #2
 8004d1a:	189b      	adds	r3, r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004d20:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004d22:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004d24:	9305      	str	r3, [sp, #20]
 8004d26:	2300      	movs	r3, #0
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	9304      	str	r3, [sp, #16]
 8004d2e:	9303      	str	r3, [sp, #12]
 8004d30:	9302      	str	r3, [sp, #8]
 8004d32:	9001      	str	r0, [sp, #4]
 8004d34:	9300      	str	r3, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004d36:	4658      	mov	r0, fp
 8004d38:	f003 fc72 	bl	8008620 <SetButtonEvents>
					status =BOS_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	7834      	ldrb	r4, [r6, #0]
 8004d40:	4698      	mov	r8, r3
 8004d42:	e781      	b.n	8004c48 <ParseSnippetCondition+0x164>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004d44:	220d      	movs	r2, #13
 8004d46:	494a      	ldr	r1, [pc, #296]	; (8004e70 <ParseSnippetCondition+0x38c>)
 8004d48:	9807      	ldr	r0, [sp, #28]
 8004d4a:	f00e f9ef 	bl	801312c <strncmp>
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d000      	beq.n	8004d54 <ParseSnippetCondition+0x270>
 8004d52:	e779      	b.n	8004c48 <ParseSnippetCondition+0x164>
				if(!button[port].releasedY1Sec){
 8004d54:	465b      	mov	r3, fp
 8004d56:	4a44      	ldr	r2, [pc, #272]	; (8004e68 <ParseSnippetCondition+0x384>)
 8004d58:	00d9      	lsls	r1, r3, #3
 8004d5a:	18cb      	adds	r3, r1, r3
 8004d5c:	18d3      	adds	r3, r2, r3
 8004d5e:	7958      	ldrb	r0, [r3, #5]
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d05e      	beq.n	8004e22 <ParseSnippetCondition+0x33e>
				else if(!button[port].releasedY2Sec){
 8004d64:	799b      	ldrb	r3, [r3, #6]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d100      	bne.n	8004d6c <ParseSnippetCondition+0x288>
 8004d6a:	e083      	b.n	8004e74 <ParseSnippetCondition+0x390>
				else if(!button[port].releasedY3Sec){
 8004d6c:	4459      	add	r1, fp
 8004d6e:	1852      	adds	r2, r2, r1
 8004d70:	79d3      	ldrb	r3, [r2, #7]
 8004d72:	4699      	mov	r9, r3
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004d74:	230d      	movs	r3, #13
 8004d76:	4698      	mov	r8, r3
				else if(!button[port].releasedY3Sec){
 8004d78:	464b      	mov	r3, r9
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d000      	beq.n	8004d80 <ParseSnippetCondition+0x29c>
 8004d7e:	e763      	b.n	8004c48 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004d80:	3314      	adds	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d82:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004d84:	4698      	mov	r8, r3
 8004d86:	435c      	muls	r4, r3
 8004d88:	3b06      	subs	r3, #6
 8004d8a:	192c      	adds	r4, r5, r4
 8004d8c:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d8e:	3010      	adds	r0, #16
 8004d90:	f00d fcbf 	bl	8012712 <atoi>
 8004d94:	4642      	mov	r2, r8
 8004d96:	7833      	ldrb	r3, [r6, #0]
 8004d98:	b2c0      	uxtb	r0, r0
 8004d9a:	4353      	muls	r3, r2
 8004d9c:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004d9e:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004da0:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004da2:	9305      	str	r3, [sp, #20]
 8004da4:	464b      	mov	r3, r9
 8004da6:	9303      	str	r3, [sp, #12]
 8004da8:	9302      	str	r3, [sp, #8]
 8004daa:	9301      	str	r3, [sp, #4]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	2300      	movs	r3, #0
 8004db0:	9004      	str	r0, [sp, #16]
 8004db2:	001a      	movs	r2, r3
 8004db4:	0019      	movs	r1, r3
 8004db6:	e7be      	b.n	8004d36 <ParseSnippetCondition+0x252>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004db8:	2309      	movs	r3, #9
 8004dba:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dbc:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004dbe:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dc0:	300f      	adds	r0, #15
 8004dc2:	f00d fca6 	bl	8012712 <atoi>
 8004dc6:	7831      	ldrb	r1, [r6, #0]
 8004dc8:	b2c3      	uxtb	r3, r0
 8004dca:	008a      	lsls	r2, r1, #2
 8004dcc:	1852      	adds	r2, r2, r1
 8004dce:	0092      	lsls	r2, r2, #2
 8004dd0:	18ad      	adds	r5, r5, r2
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004dd2:	2201      	movs	r2, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dd4:	712b      	strb	r3, [r5, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004dd6:	9205      	str	r2, [sp, #20]
 8004dd8:	4642      	mov	r2, r8
 8004dda:	9204      	str	r2, [sp, #16]
 8004ddc:	9203      	str	r2, [sp, #12]
 8004dde:	9202      	str	r2, [sp, #8]
 8004de0:	9201      	str	r2, [sp, #4]
 8004de2:	9200      	str	r2, [sp, #0]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004de4:	2200      	movs	r2, #0
 8004de6:	2100      	movs	r1, #0
 8004de8:	4658      	mov	r0, fp
 8004dea:	f003 fc19 	bl	8008620 <SetButtonEvents>
 8004dee:	7834      	ldrb	r4, [r6, #0]
 8004df0:	e72a      	b.n	8004c48 <ParseSnippetCondition+0x164>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004df2:	230a      	movs	r3, #10
 8004df4:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004df6:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004df8:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004dfa:	300f      	adds	r0, #15
 8004dfc:	f00d fc89 	bl	8012712 <atoi>
 8004e00:	7832      	ldrb	r2, [r6, #0]
 8004e02:	b2c0      	uxtb	r0, r0
 8004e04:	0093      	lsls	r3, r2, #2
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e0c:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004e0e:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004e10:	9305      	str	r3, [sp, #20]
 8004e12:	4643      	mov	r3, r8
 8004e14:	9000      	str	r0, [sp, #0]
 8004e16:	9304      	str	r3, [sp, #16]
 8004e18:	9303      	str	r3, [sp, #12]
 8004e1a:	9302      	str	r3, [sp, #8]
 8004e1c:	9301      	str	r3, [sp, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e7e0      	b.n	8004de4 <ParseSnippetCondition+0x300>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004e22:	230c      	movs	r3, #12
 8004e24:	464a      	mov	r2, r9
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e26:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004e28:	70d3      	strb	r3, [r2, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e2a:	3010      	adds	r0, #16
 8004e2c:	f00d fc71 	bl	8012712 <atoi>
 8004e30:	7832      	ldrb	r2, [r6, #0]
 8004e32:	b2c0      	uxtb	r0, r0
 8004e34:	0093      	lsls	r3, r2, #2
 8004e36:	189b      	adds	r3, r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e3c:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e3e:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004e40:	9305      	str	r3, [sp, #20]
 8004e42:	4643      	mov	r3, r8
 8004e44:	9002      	str	r0, [sp, #8]
 8004e46:	9304      	str	r3, [sp, #16]
 8004e48:	9303      	str	r3, [sp, #12]
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	e7c8      	b.n	8004de4 <ParseSnippetCondition+0x300>
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	20001180 	.word	0x20001180
 8004e58:	20006ec4 	.word	0x20006ec4
 8004e5c:	08017d58 	.word	0x08017d58
 8004e60:	080188d4 	.word	0x080188d4
 8004e64:	080180a8 	.word	0x080180a8
 8004e68:	2000191c 	.word	0x2000191c
 8004e6c:	080180b8 	.word	0x080180b8
 8004e70:	080180c8 	.word	0x080180c8
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004e74:	0023      	movs	r3, r4
 8004e76:	220d      	movs	r2, #13
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e78:	0038      	movs	r0, r7
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004e7a:	4453      	add	r3, sl
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	18eb      	adds	r3, r5, r3
 8004e80:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e82:	3010      	adds	r0, #16
 8004e84:	f00d fc45 	bl	8012712 <atoi>
 8004e88:	7832      	ldrb	r2, [r6, #0]
 8004e8a:	b2c0      	uxtb	r0, r0
 8004e8c:	0093      	lsls	r3, r2, #2
 8004e8e:	189b      	adds	r3, r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	18ed      	adds	r5, r5, r3
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004e94:	2301      	movs	r3, #1
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004e96:	7128      	strb	r0, [r5, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004e98:	9305      	str	r3, [sp, #20]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9003      	str	r0, [sp, #12]
 8004e9e:	9304      	str	r3, [sp, #16]
 8004ea0:	9302      	str	r3, [sp, #8]
 8004ea2:	9301      	str	r3, [sp, #4]
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	e744      	b.n	8004d36 <ParseSnippetCondition+0x252>

08004eac <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eae:	46de      	mov	lr, fp
 8004eb0:	4657      	mov	r7, sl
 8004eb2:	4645      	mov	r5, r8
 8004eb4:	464e      	mov	r6, r9
 8004eb6:	468a      	mov	sl, r1
 8004eb8:	b5e0      	push	{r5, r6, r7, lr}
 8004eba:	b08b      	sub	sp, #44	; 0x2c
 8004ebc:	9002      	str	r0, [sp, #8]
 8004ebe:	0015      	movs	r5, r2
	char idString[MaxLengthOfAlias] ={0};
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	2209      	movs	r2, #9
 8004ec4:	a807      	add	r0, sp, #28
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004ec6:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004ec8:	f00d fef2 	bl	8012cb0 <memset>
 8004ecc:	4bcd      	ldr	r3, [pc, #820]	; (8005204 <CLI_CommandParser+0x358>)
				if(id == myID){
 8004ece:	4656      	mov	r6, sl
 8004ed0:	4698      	mov	r8, r3
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ed2:	4bcd      	ldr	r3, [pc, #820]	; (8005208 <CLI_CommandParser+0x35c>)
				if(id == myID){
 8004ed4:	46ba      	mov	sl, r7
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ed6:	469b      	mov	fp, r3
 8004ed8:	e02d      	b.n	8004f36 <CLI_CommandParser+0x8a>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004eda:	2206      	movs	r2, #6
 8004edc:	49cb      	ldr	r1, [pc, #812]	; (800520c <CLI_CommandParser+0x360>)
 8004ede:	0028      	movs	r0, r5
 8004ee0:	f00e f924 	bl	801312c <strncmp>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d057      	beq.n	8004f98 <CLI_CommandParser+0xec>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004ee8:	2f02      	cmp	r7, #2
 8004eea:	d100      	bne.n	8004eee <CLI_CommandParser+0x42>
 8004eec:	e0d2      	b.n	8005094 <CLI_CommandParser+0x1e8>
			loc =strchr((char* )cInputString,'.');
 8004eee:	212e      	movs	r1, #46	; 0x2e
 8004ef0:	0028      	movs	r0, r5
 8004ef2:	f00e f905 	bl	8013100 <strchr>
 8004ef6:	1e07      	subs	r7, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ef8:	d007      	beq.n	8004f0a <CLI_CommandParser+0x5e>
 8004efa:	3803      	subs	r0, #3
 8004efc:	2203      	movs	r2, #3
 8004efe:	4659      	mov	r1, fp
 8004f00:	f00e f914 	bl	801312c <strncmp>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	d000      	beq.n	8004f0a <CLI_CommandParser+0x5e>
 8004f08:	e079      	b.n	8004ffe <CLI_CommandParser+0x152>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f0a:	2299      	movs	r2, #153	; 0x99
 8004f0c:	0021      	movs	r1, r4
 8004f0e:	0092      	lsls	r2, r2, #2
 8004f10:	0028      	movs	r0, r5
 8004f12:	f008 fc2b 	bl	800d76c <FreeRTOS_CLIProcessCommand>
 8004f16:	4682      	mov	sl, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f18:	7823      	ldrb	r3, [r4, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d139      	bne.n	8004f92 <CLI_CommandParser+0xe6>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004f1e:	0020      	movs	r0, r4
 8004f20:	f7fb f8fa 	bl	8000118 <strlen>
 8004f24:	2100      	movs	r1, #0
 8004f26:	0002      	movs	r2, r0
 8004f28:	0020      	movs	r0, r4
 8004f2a:	f00d fec1 	bl	8012cb0 <memset>
	} while(xReturned != pdFALSE);
 8004f2e:	4653      	mov	r3, sl
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d100      	bne.n	8004f36 <CLI_CommandParser+0x8a>
 8004f34:	e1d0      	b.n	80052d8 <CLI_CommandParser+0x42c>
		StringToLowerCase((char* )cInputString);
 8004f36:	0028      	movs	r0, r5
 8004f38:	f7ff fdc0 	bl	8004abc <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004f3c:	2336      	movs	r3, #54	; 0x36
 8004f3e:	4699      	mov	r9, r3
 8004f40:	4643      	mov	r3, r8
 8004f42:	464a      	mov	r2, r9
 8004f44:	5c9f      	ldrb	r7, [r3, r2]
 8004f46:	2f00      	cmp	r7, #0
 8004f48:	d1c7      	bne.n	8004eda <CLI_CommandParser+0x2e>
 8004f4a:	3a33      	subs	r2, #51	; 0x33
 8004f4c:	49b0      	ldr	r1, [pc, #704]	; (8005210 <CLI_CommandParser+0x364>)
 8004f4e:	0028      	movs	r0, r5
 8004f50:	f00e f8ec 	bl	801312c <strncmp>
 8004f54:	1e07      	subs	r7, r0, #0
 8004f56:	d1ca      	bne.n	8004eee <CLI_CommandParser+0x42>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004f58:	1ce8      	adds	r0, r5, #3
			return ParseSnippetCondition(string);
 8004f5a:	f7ff fdc3 	bl	8004ae4 <ParseSnippetCondition>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	d000      	beq.n	8004f64 <CLI_CommandParser+0xb8>
 8004f62:	e09f      	b.n	80050a4 <CLI_CommandParser+0x1f8>
				recordSnippet = SNIPPET_COMMANDS;
 8004f64:	2302      	movs	r3, #2
 8004f66:	4642      	mov	r2, r8
 8004f68:	4649      	mov	r1, r9
 8004f6a:	5453      	strb	r3, [r2, r1]
				pcOutputString[0] ='\r';
 8004f6c:	330b      	adds	r3, #11
 8004f6e:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f70:	2e00      	cmp	r6, #0
 8004f72:	d027      	beq.n	8004fc4 <CLI_CommandParser+0x118>
 8004f74:	2300      	movs	r3, #0
 8004f76:	469a      	mov	sl, r3
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004f78:	0020      	movs	r0, r4
 8004f7a:	f7fb f8cd 	bl	8000118 <strlen>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	425b      	negs	r3, r3
 8004f82:	b282      	uxth	r2, r0
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	0021      	movs	r1, r4
 8004f88:	3333      	adds	r3, #51	; 0x33
 8004f8a:	9802      	ldr	r0, [sp, #8]
 8004f8c:	f008 fa0e 	bl	800d3ac <writePxMutex>
 8004f90:	e7c5      	b.n	8004f1e <CLI_CommandParser+0x72>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f92:	2e00      	cmp	r6, #0
 8004f94:	d0c3      	beq.n	8004f1e <CLI_CommandParser+0x72>
 8004f96:	e7ef      	b.n	8004f78 <CLI_CommandParser+0xcc>
			recordSnippet =0;
 8004f98:	4643      	mov	r3, r8
 8004f9a:	464a      	mov	r2, r9
 8004f9c:	5498      	strb	r0, [r3, r2]
			snippets[numOfRecordedSnippets - 1].state = true;
 8004f9e:	781a      	ldrb	r2, [r3, #0]
 8004fa0:	3a01      	subs	r2, #1
 8004fa2:	0093      	lsls	r3, r2, #2
 8004fa4:	189b      	adds	r3, r3, r2
 8004fa6:	4a9b      	ldr	r2, [pc, #620]	; (8005214 <CLI_CommandParser+0x368>)
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	18d3      	adds	r3, r2, r3
 8004fac:	2201      	movs	r2, #1
 8004fae:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004fb0:	f006 faa4 	bl	800b4fc <SaveToRO>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004fb4:	2241      	movs	r2, #65	; 0x41
 8004fb6:	4998      	ldr	r1, [pc, #608]	; (8005218 <CLI_CommandParser+0x36c>)
 8004fb8:	0020      	movs	r0, r4
 8004fba:	f00d fe70 	bl	8012c9e <memcpy>
 8004fbe:	7823      	ldrb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1d5      	bne.n	8004f70 <CLI_CommandParser+0xc4>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004fc4:	0020      	movs	r0, r4
 8004fc6:	f7fb f8a7 	bl	8000118 <strlen>
 8004fca:	2100      	movs	r1, #0
 8004fcc:	0002      	movs	r2, r0
 8004fce:	0020      	movs	r0, r4
 8004fd0:	46b2      	mov	sl, r6
 8004fd2:	f00d fe6d 	bl	8012cb0 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8004fd6:	2209      	movs	r2, #9
 8004fd8:	2100      	movs	r1, #0
 8004fda:	a807      	add	r0, sp, #28
 8004fdc:	f00d fe68 	bl	8012cb0 <memset>
	if(!recordSnippet && enableOutput)
 8004fe0:	2336      	movs	r3, #54	; 0x36
 8004fe2:	4642      	mov	r2, r8
 8004fe4:	5cd3      	ldrb	r3, [r2, r3]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d102      	bne.n	8004ff0 <CLI_CommandParser+0x144>
 8004fea:	4653      	mov	r3, sl
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d16a      	bne.n	80050c6 <CLI_CommandParser+0x21a>
}
 8004ff0:	b00b      	add	sp, #44	; 0x2c
 8004ff2:	bc3c      	pop	{r2, r3, r4, r5}
 8004ff4:	4690      	mov	r8, r2
 8004ff6:	4699      	mov	r9, r3
 8004ff8:	46a2      	mov	sl, r4
 8004ffa:	46ab      	mov	fp, r5
 8004ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ffe:	f00d fbf3 	bl	80127e8 <__locale_ctype_ptr>
 8005002:	787b      	ldrb	r3, [r7, #1]
 8005004:	18c0      	adds	r0, r0, r3
 8005006:	7843      	ldrb	r3, [r0, #1]
 8005008:	075b      	lsls	r3, r3, #29
 800500a:	d500      	bpl.n	800500e <CLI_CommandParser+0x162>
 800500c:	e77d      	b.n	8004f0a <CLI_CommandParser+0x5e>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 800500e:	1b7a      	subs	r2, r7, r5
 8005010:	0029      	movs	r1, r5
 8005012:	a807      	add	r0, sp, #28
 8005014:	f00e f89b 	bl	801314e <strncpy>
				id =GetID(idString);
 8005018:	a807      	add	r0, sp, #28
 800501a:	f7ff f8e1 	bl	80041e0 <GetID>
				if(id == myID){
 800501e:	4b7f      	ldr	r3, [pc, #508]	; (800521c <CLI_CommandParser+0x370>)
				id =GetID(idString);
 8005020:	9003      	str	r0, [sp, #12]
				if(id == myID){
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	9305      	str	r3, [sp, #20]
 8005026:	4298      	cmp	r0, r3
 8005028:	d057      	beq.n	80050da <CLI_CommandParser+0x22e>
				else if(id == BOS_ERR_WrongName){
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	2b64      	cmp	r3, #100	; 0x64
 800502e:	d100      	bne.n	8005032 <CLI_CommandParser+0x186>
 8005030:	e0da      	b.n	80051e8 <CLI_CommandParser+0x33c>
				else if(id == BOS_ERR_WrongID){
 8005032:	9b03      	ldr	r3, [sp, #12]
 8005034:	2b66      	cmp	r3, #102	; 0x66
 8005036:	d100      	bne.n	800503a <CLI_CommandParser+0x18e>
 8005038:	e0dd      	b.n	80051f6 <CLI_CommandParser+0x34a>
 800503a:	1c7b      	adds	r3, r7, #1
 800503c:	9304      	str	r3, [sp, #16]
				else if(id == BOS_BROADCAST){
 800503e:	9b03      	ldr	r3, [sp, #12]
 8005040:	2bff      	cmp	r3, #255	; 0xff
 8005042:	d100      	bne.n	8005046 <CLI_CommandParser+0x19a>
 8005044:	e08b      	b.n	800515e <CLI_CommandParser+0x2b2>
				else if((uint8_t )id == BOS_MULTICAST){
 8005046:	466b      	mov	r3, sp
 8005048:	7b1b      	ldrb	r3, [r3, #12]
 800504a:	4699      	mov	r9, r3
 800504c:	2bfe      	cmp	r3, #254	; 0xfe
 800504e:	d100      	bne.n	8005052 <CLI_CommandParser+0x1a6>
 8005050:	e102      	b.n	8005258 <CLI_CommandParser+0x3ac>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8005052:	2206      	movs	r2, #6
 8005054:	4972      	ldr	r1, [pc, #456]	; (8005220 <CLI_CommandParser+0x374>)
 8005056:	9804      	ldr	r0, [sp, #16]
 8005058:	f00e f868 	bl	801312c <strncmp>
 800505c:	2800      	cmp	r0, #0
 800505e:	d144      	bne.n	80050ea <CLI_CommandParser+0x23e>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8005060:	4b70      	ldr	r3, [pc, #448]	; (8005224 <CLI_CommandParser+0x378>)
						SendMessageToModule(id,CODE_UPDATE,0);
 8005062:	2200      	movs	r2, #0
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8005064:	7018      	strb	r0, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8005066:	2119      	movs	r1, #25
 8005068:	4648      	mov	r0, r9
						BOSMessaging.response = BOS_RESPONSE_NONE;
 800506a:	469a      	mov	sl, r3
						SendMessageToModule(id,CODE_UPDATE,0);
 800506c:	f004 fd14 	bl	8009a98 <SendMessageToModule>
						osDelay(100);
 8005070:	2064      	movs	r0, #100	; 0x64
 8005072:	f008 fae7 	bl	800d644 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8005076:	4b6c      	ldr	r3, [pc, #432]	; (8005228 <CLI_CommandParser+0x37c>)
 8005078:	4649      	mov	r1, r9
 800507a:	781a      	ldrb	r2, [r3, #0]
 800507c:	4b67      	ldr	r3, [pc, #412]	; (800521c <CLI_CommandParser+0x370>)
 800507e:	7818      	ldrb	r0, [r3, #0]
 8005080:	2300      	movs	r3, #0
 8005082:	f7fe fd5d 	bl	8003b40 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8005086:	4653      	mov	r3, sl
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b60      	cmp	r3, #96	; 0x60
 800508c:	d100      	bne.n	8005090 <CLI_CommandParser+0x1e4>
 800508e:	e095      	b.n	80051bc <CLI_CommandParser+0x310>
 8005090:	7823      	ldrb	r3, [r4, #0]
 8005092:	e795      	b.n	8004fc0 <CLI_CommandParser+0x114>
 8005094:	0028      	movs	r0, r5
 8005096:	f7ff fcb9 	bl	8004a0c <AddSnippet.part.0>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 800509a:	2800      	cmp	r0, #0
 800509c:	d10c      	bne.n	80050b8 <CLI_CommandParser+0x20c>
				pcOutputString[0] ='\r';
 800509e:	230d      	movs	r3, #13
 80050a0:	7023      	strb	r3, [r4, #0]
 80050a2:	e765      	b.n	8004f70 <CLI_CommandParser+0xc4>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80050a4:	2252      	movs	r2, #82	; 0x52
 80050a6:	4961      	ldr	r1, [pc, #388]	; (800522c <CLI_CommandParser+0x380>)
 80050a8:	0020      	movs	r0, r4
 80050aa:	f00d fdf8 	bl	8012c9e <memcpy>
				recordSnippet =0;
 80050ae:	4643      	mov	r3, r8
 80050b0:	464a      	mov	r2, r9
 80050b2:	549f      	strb	r7, [r3, r2]
 80050b4:	7823      	ldrb	r3, [r4, #0]
 80050b6:	e783      	b.n	8004fc0 <CLI_CommandParser+0x114>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80050b8:	2252      	movs	r2, #82	; 0x52
 80050ba:	495c      	ldr	r1, [pc, #368]	; (800522c <CLI_CommandParser+0x380>)
 80050bc:	0020      	movs	r0, r4
 80050be:	f00d fdee 	bl	8012c9e <memcpy>
 80050c2:	7823      	ldrb	r3, [r4, #0]
 80050c4:	e77c      	b.n	8004fc0 <CLI_CommandParser+0x114>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 80050c6:	2301      	movs	r3, #1
 80050c8:	425b      	negs	r3, r3
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	2238      	movs	r2, #56	; 0x38
 80050ce:	3333      	adds	r3, #51	; 0x33
 80050d0:	4957      	ldr	r1, [pc, #348]	; (8005230 <CLI_CommandParser+0x384>)
 80050d2:	9802      	ldr	r0, [sp, #8]
 80050d4:	f008 f96a 	bl	800d3ac <writePxMutex>
}
 80050d8:	e78a      	b.n	8004ff0 <CLI_CommandParser+0x144>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80050da:	2299      	movs	r2, #153	; 0x99
 80050dc:	1c78      	adds	r0, r7, #1
 80050de:	0092      	lsls	r2, r2, #2
 80050e0:	0021      	movs	r1, r4
 80050e2:	f008 fb43 	bl	800d76c <FreeRTOS_CLIProcessCommand>
 80050e6:	4682      	mov	sl, r0
 80050e8:	e716      	b.n	8004f18 <CLI_CommandParser+0x6c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 80050ea:	0028      	movs	r0, r5
 80050ec:	f7fb f814 	bl	8000118 <strlen>
 80050f0:	0007      	movs	r7, r0
 80050f2:	a807      	add	r0, sp, #28
 80050f4:	f7fb f810 	bl	8000118 <strlen>
 80050f8:	4682      	mov	sl, r0
 80050fa:	1e7a      	subs	r2, r7, #1
 80050fc:	1a12      	subs	r2, r2, r0
 80050fe:	9904      	ldr	r1, [sp, #16]
 8005100:	484c      	ldr	r0, [pc, #304]	; (8005234 <CLI_CommandParser+0x388>)
 8005102:	f00e f824 	bl	801314e <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8005106:	0028      	movs	r0, r5
 8005108:	f7fb f806 	bl	8000118 <strlen>
 800510c:	4653      	mov	r3, sl
 800510e:	3801      	subs	r0, #1
 8005110:	1ac2      	subs	r2, r0, r3
 8005112:	b292      	uxth	r2, r2
 8005114:	2117      	movs	r1, #23
 8005116:	4648      	mov	r0, r9
 8005118:	f004 fcbe 	bl	8009a98 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 800511c:	9a03      	ldr	r2, [sp, #12]
 800511e:	4946      	ldr	r1, [pc, #280]	; (8005238 <CLI_CommandParser+0x38c>)
 8005120:	0020      	movs	r0, r4
 8005122:	f00d ffbf 	bl	80130a4 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8005126:	7823      	ldrb	r3, [r4, #0]
 8005128:	0020      	movs	r0, r4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00d      	beq.n	800514a <CLI_CommandParser+0x29e>
 800512e:	f7fa fff3 	bl	8000118 <strlen>
 8005132:	0002      	movs	r2, r0
 8005134:	2e00      	cmp	r6, #0
 8005136:	d00b      	beq.n	8005150 <CLI_CommandParser+0x2a4>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8005138:	2301      	movs	r3, #1
 800513a:	b282      	uxth	r2, r0
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	0021      	movs	r1, r4
 8005140:	3331      	adds	r3, #49	; 0x31
 8005142:	9802      	ldr	r0, [sp, #8]
 8005144:	f008 f932 	bl	800d3ac <writePxMutex>
 8005148:	0020      	movs	r0, r4
 800514a:	f7fa ffe5 	bl	8000118 <strlen>
 800514e:	0002      	movs	r2, r0
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005150:	2100      	movs	r1, #0
 8005152:	0020      	movs	r0, r4
 8005154:	f00d fdac 	bl	8012cb0 <memset>
 8005158:	4b32      	ldr	r3, [pc, #200]	; (8005224 <CLI_CommandParser+0x378>)
 800515a:	469a      	mov	sl, r3
 800515c:	e793      	b.n	8005086 <CLI_CommandParser+0x1da>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800515e:	221a      	movs	r2, #26
 8005160:	2100      	movs	r1, #0
 8005162:	4836      	ldr	r0, [pc, #216]	; (800523c <CLI_CommandParser+0x390>)
 8005164:	f00d fda4 	bl	8012cb0 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005168:	0028      	movs	r0, r5
 800516a:	f7fa ffd5 	bl	8000118 <strlen>
 800516e:	0007      	movs	r7, r0
 8005170:	a807      	add	r0, sp, #28
 8005172:	f7fa ffd1 	bl	8000118 <strlen>
 8005176:	4681      	mov	r9, r0
 8005178:	3f01      	subs	r7, #1
 800517a:	1a3a      	subs	r2, r7, r0
 800517c:	9f04      	ldr	r7, [sp, #16]
 800517e:	482d      	ldr	r0, [pc, #180]	; (8005234 <CLI_CommandParser+0x388>)
 8005180:	0039      	movs	r1, r7
 8005182:	f00d ffe4 	bl	801314e <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005186:	0028      	movs	r0, r5
 8005188:	f7fa ffc6 	bl	8000118 <strlen>
 800518c:	464b      	mov	r3, r9
 800518e:	1ac3      	subs	r3, r0, r3
 8005190:	b29b      	uxth	r3, r3
 8005192:	2217      	movs	r2, #23
 8005194:	21ff      	movs	r1, #255	; 0xff
 8005196:	9805      	ldr	r0, [sp, #20]
 8005198:	f004 fc38 	bl	8009a0c <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800519c:	2299      	movs	r2, #153	; 0x99
 800519e:	0021      	movs	r1, r4
 80051a0:	0092      	lsls	r2, r2, #2
 80051a2:	0038      	movs	r0, r7
 80051a4:	f008 fae2 	bl	800d76c <FreeRTOS_CLIProcessCommand>
 80051a8:	4682      	mov	sl, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 80051aa:	0020      	movs	r0, r4
 80051ac:	f7fa ffb4 	bl	8000118 <strlen>
 80051b0:	221d      	movs	r2, #29
 80051b2:	1820      	adds	r0, r4, r0
 80051b4:	4922      	ldr	r1, [pc, #136]	; (8005240 <CLI_CommandParser+0x394>)
 80051b6:	f00d fd72 	bl	8012c9e <memcpy>
 80051ba:	e6ad      	b.n	8004f18 <CLI_CommandParser+0x6c>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 80051bc:	21fa      	movs	r1, #250	; 0xfa
 80051be:	2001      	movs	r0, #1
 80051c0:	0089      	lsls	r1, r1, #2
 80051c2:	f009 fdb1 	bl	800ed28 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 80051c6:	4b1f      	ldr	r3, [pc, #124]	; (8005244 <CLI_CommandParser+0x398>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d100      	bne.n	80051d0 <CLI_CommandParser+0x324>
 80051ce:	e75f      	b.n	8005090 <CLI_CommandParser+0x1e4>
							++timedoutMsg;
 80051d0:	4a1d      	ldr	r2, [pc, #116]	; (8005248 <CLI_CommandParser+0x39c>)
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051d2:	491e      	ldr	r1, [pc, #120]	; (800524c <CLI_CommandParser+0x3a0>)
							++timedoutMsg;
 80051d4:	8813      	ldrh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051d6:	0020      	movs	r0, r4
							++timedoutMsg;
 80051d8:	3301      	adds	r3, #1
 80051da:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80051dc:	9b03      	ldr	r3, [sp, #12]
 80051de:	0022      	movs	r2, r4
 80051e0:	f00d ff60 	bl	80130a4 <sprintf>
 80051e4:	7823      	ldrb	r3, [r4, #0]
 80051e6:	e6eb      	b.n	8004fc0 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 80051e8:	2227      	movs	r2, #39	; 0x27
 80051ea:	4919      	ldr	r1, [pc, #100]	; (8005250 <CLI_CommandParser+0x3a4>)
 80051ec:	0020      	movs	r0, r4
 80051ee:	f00d fd56 	bl	8012c9e <memcpy>
 80051f2:	7823      	ldrb	r3, [r4, #0]
 80051f4:	e6e4      	b.n	8004fc0 <CLI_CommandParser+0x114>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 80051f6:	2225      	movs	r2, #37	; 0x25
 80051f8:	4916      	ldr	r1, [pc, #88]	; (8005254 <CLI_CommandParser+0x3a8>)
 80051fa:	0020      	movs	r0, r4
 80051fc:	f00d fd4f 	bl	8012c9e <memcpy>
 8005200:	7823      	ldrb	r3, [r4, #0]
 8005202:	e6dd      	b.n	8004fc0 <CLI_CommandParser+0x114>
 8005204:	20001180 	.word	0x20001180
 8005208:	0801817c 	.word	0x0801817c
 800520c:	08018130 	.word	0x08018130
 8005210:	080180d8 	.word	0x080180d8
 8005214:	20006ec4 	.word	0x20006ec4
 8005218:	08018138 	.word	0x08018138
 800521c:	20000a98 	.word	0x20000a98
 8005220:	0801821c 	.word	0x0801821c
 8005224:	20006e28 	.word	0x20006e28
 8005228:	20000c28 	.word	0x20000c28
 800522c:	080180dc 	.word	0x080180dc
 8005230:	08018268 	.word	0x08018268
 8005234:	20000b3c 	.word	0x20000b3c
 8005238:	08018224 	.word	0x08018224
 800523c:	20000de0 	.word	0x20000de0
 8005240:	080181d0 	.word	0x080181d0
 8005244:	20000c3c 	.word	0x20000c3c
 8005248:	20001bce 	.word	0x20001bce
 800524c:	08018248 	.word	0x08018248
 8005250:	08018180 	.word	0x08018180
 8005254:	080181a8 	.word	0x080181a8
					group =id >> 8;
 8005258:	4640      	mov	r0, r8
 800525a:	2237      	movs	r2, #55	; 0x37
 800525c:	9b03      	ldr	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800525e:	2100      	movs	r1, #0
					group =id >> 8;
 8005260:	121f      	asrs	r7, r3, #8
 8005262:	b2fb      	uxtb	r3, r7
 8005264:	5483      	strb	r3, [r0, r2]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005266:	3a1d      	subs	r2, #29
 8005268:	481c      	ldr	r0, [pc, #112]	; (80052dc <CLI_CommandParser+0x430>)
					group =id >> 8;
 800526a:	9303      	str	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800526c:	f00d fd20 	bl	8012cb0 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005270:	0028      	movs	r0, r5
 8005272:	f7fa ff51 	bl	8000118 <strlen>
 8005276:	0007      	movs	r7, r0
 8005278:	a807      	add	r0, sp, #28
 800527a:	f7fa ff4d 	bl	8000118 <strlen>
 800527e:	4681      	mov	r9, r0
 8005280:	3f01      	subs	r7, #1
 8005282:	1a3a      	subs	r2, r7, r0
 8005284:	9904      	ldr	r1, [sp, #16]
 8005286:	4816      	ldr	r0, [pc, #88]	; (80052e0 <CLI_CommandParser+0x434>)
 8005288:	f00d ff61 	bl	801314e <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 800528c:	0028      	movs	r0, r5
 800528e:	f7fa ff43 	bl	8000118 <strlen>
 8005292:	464f      	mov	r7, r9
 8005294:	1bc3      	subs	r3, r0, r7
 8005296:	b29b      	uxth	r3, r3
 8005298:	2217      	movs	r2, #23
 800529a:	9903      	ldr	r1, [sp, #12]
 800529c:	9805      	ldr	r0, [sp, #20]
 800529e:	f004 fbb5 	bl	8009a0c <BroadcastMessage>
					if(InGroup(myID,group))
 80052a2:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <CLI_CommandParser+0x438>)
 80052a4:	4a10      	ldr	r2, [pc, #64]	; (80052e8 <CLI_CommandParser+0x43c>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	4641      	mov	r1, r8
 80052aa:	3b01      	subs	r3, #1
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	5a9b      	ldrh	r3, [r3, r2]
 80052b0:	2237      	movs	r2, #55	; 0x37
 80052b2:	5c8a      	ldrb	r2, [r1, r2]
 80052b4:	4113      	asrs	r3, r2
 80052b6:	07db      	lsls	r3, r3, #31
 80052b8:	d406      	bmi.n	80052c8 <CLI_CommandParser+0x41c>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 80052ba:	ab07      	add	r3, sp, #28
 80052bc:	0022      	movs	r2, r4
 80052be:	490b      	ldr	r1, [pc, #44]	; (80052ec <CLI_CommandParser+0x440>)
 80052c0:	0020      	movs	r0, r4
 80052c2:	f00d feef 	bl	80130a4 <sprintf>
 80052c6:	e627      	b.n	8004f18 <CLI_CommandParser+0x6c>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80052c8:	2299      	movs	r2, #153	; 0x99
 80052ca:	0021      	movs	r1, r4
 80052cc:	0092      	lsls	r2, r2, #2
 80052ce:	9804      	ldr	r0, [sp, #16]
 80052d0:	f008 fa4c 	bl	800d76c <FreeRTOS_CLIProcessCommand>
 80052d4:	4682      	mov	sl, r0
 80052d6:	e7f0      	b.n	80052ba <CLI_CommandParser+0x40e>
 80052d8:	46b2      	mov	sl, r6
 80052da:	e67c      	b.n	8004fd6 <CLI_CommandParser+0x12a>
 80052dc:	20000de0 	.word	0x20000de0
 80052e0:	20000b3c 	.word	0x20000b3c
 80052e4:	20000a98 	.word	0x20000a98
 80052e8:	20000a9c 	.word	0x20000a9c
 80052ec:	080181f0 	.word	0x080181f0

080052f0 <prvCLITask>:
void prvCLITask(void *pvParameters){
 80052f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f2:	46de      	mov	lr, fp
 80052f4:	4657      	mov	r7, sl
 80052f6:	464e      	mov	r6, r9
 80052f8:	4645      	mov	r5, r8
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80052fa:	2101      	movs	r1, #1
	char cRxedChar ='\0';
 80052fc:	2300      	movs	r3, #0
void prvCLITask(void *pvParameters){
 80052fe:	b5e0      	push	{r5, r6, r7, lr}
 8005300:	b087      	sub	sp, #28
	char cRxedChar ='\0';
 8005302:	aa02      	add	r2, sp, #8
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005304:	4249      	negs	r1, r1
 8005306:	2001      	movs	r0, #1
	char cRxedChar ='\0';
 8005308:	73d3      	strb	r3, [r2, #15]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800530a:	f009 fd0d 	bl	800ed28 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800530e:	f008 faa5 	bl	800d85c <FreeRTOS_CLIGetOutputBuffer>
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005312:	23e1      	movs	r3, #225	; 0xe1
 8005314:	4a62      	ldr	r2, [pc, #392]	; (80054a0 <prvCLITask+0x1b0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005316:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005318:	6892      	ldr	r2, [r2, #8]
 800531a:	031b      	lsls	r3, r3, #12
 800531c:	429a      	cmp	r2, r3
 800531e:	d011      	beq.n	8005344 <prvCLITask+0x54>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005320:	2501      	movs	r5, #1
 8005322:	4b60      	ldr	r3, [pc, #384]	; (80054a4 <prvCLITask+0x1b4>)
 8005324:	7819      	ldrb	r1, [r3, #0]
 8005326:	9302      	str	r3, [sp, #8]
			if(port != PcPort)
 8005328:	428d      	cmp	r5, r1
 800532a:	d006      	beq.n	800533a <prvCLITask+0x4a>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 800532c:	21e1      	movs	r1, #225	; 0xe1
 800532e:	0028      	movs	r0, r5
 8005330:	0309      	lsls	r1, r1, #12
 8005332:	f008 f8b1 	bl	800d498 <UpdateBaudrate>
 8005336:	9b02      	ldr	r3, [sp, #8]
 8005338:	7819      	ldrb	r1, [r3, #0]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800533a:	3501      	adds	r5, #1
 800533c:	b2ed      	uxtb	r5, r5
 800533e:	2d07      	cmp	r5, #7
 8005340:	d1f2      	bne.n	8005328 <prvCLITask+0x38>
 8005342:	e002      	b.n	800534a <prvCLITask+0x5a>
 8005344:	4b57      	ldr	r3, [pc, #348]	; (80054a4 <prvCLITask+0x1b4>)
 8005346:	7819      	ldrb	r1, [r3, #0]
 8005348:	9302      	str	r3, [sp, #8]
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 800534a:	4b57      	ldr	r3, [pc, #348]	; (80054a8 <prvCLITask+0x1b8>)
 800534c:	4d57      	ldr	r5, [pc, #348]	; (80054ac <prvCLITask+0x1bc>)
 800534e:	881a      	ldrh	r2, [r3, #0]
 8005350:	3538      	adds	r5, #56	; 0x38
 8005352:	0053      	lsls	r3, r2, #1
 8005354:	189b      	adds	r3, r3, r2
 8005356:	4a56      	ldr	r2, [pc, #344]	; (80054b0 <prvCLITask+0x1c0>)
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	189b      	adds	r3, r3, r2
 800535c:	4a55      	ldr	r2, [pc, #340]	; (80054b4 <prvCLITask+0x1c4>)
 800535e:	0028      	movs	r0, r5
 8005360:	7812      	ldrb	r2, [r2, #0]
 8005362:	9100      	str	r1, [sp, #0]
 8005364:	4954      	ldr	r1, [pc, #336]	; (80054b8 <prvCLITask+0x1c8>)
 8005366:	f00d fe9d 	bl	80130a4 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 800536a:	22a4      	movs	r2, #164	; 0xa4
 800536c:	9c02      	ldr	r4, [sp, #8]
 800536e:	230a      	movs	r3, #10
 8005370:	0092      	lsls	r2, r2, #2
 8005372:	4952      	ldr	r1, [pc, #328]	; (80054bc <prvCLITask+0x1cc>)
 8005374:	7820      	ldrb	r0, [r4, #0]
 8005376:	f008 f84b 	bl	800d410 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 800537a:	0028      	movs	r0, r5
 800537c:	f7fa fecc 	bl	8000118 <strlen>
 8005380:	230a      	movs	r3, #10
 8005382:	b282      	uxth	r2, r0
 8005384:	0029      	movs	r1, r5
 8005386:	7820      	ldrb	r0, [r4, #0]
 8005388:	f008 f842 	bl	800d410 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 800538c:	2300      	movs	r3, #0
 800538e:	4a4c      	ldr	r2, [pc, #304]	; (80054c0 <prvCLITask+0x1d0>)
				UARTRxBuf[PcPort - 1][chr] =0;
 8005390:	2600      	movs	r6, #0
 8005392:	4690      	mov	r8, r2
 8005394:	4699      	mov	r9, r3
 8005396:	4d4b      	ldr	r5, [pc, #300]	; (80054c4 <prvCLITask+0x1d4>)
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005398:	9b02      	ldr	r3, [sp, #8]
 800539a:	781f      	ldrb	r7, [r3, #0]
 800539c:	1e7c      	subs	r4, r7, #1
 800539e:	5d28      	ldrb	r0, [r5, r4]
 80053a0:	b283      	uxth	r3, r0
 80053a2:	2bbf      	cmp	r3, #191	; 0xbf
 80053a4:	d81d      	bhi.n	80053e2 <prvCLITask+0xf2>
			if(UARTRxBuf[PcPort - 1][chr]){
 80053a6:	0062      	lsls	r2, r4, #1
 80053a8:	1911      	adds	r1, r2, r4
 80053aa:	0189      	lsls	r1, r1, #6
 80053ac:	4441      	add	r1, r8
 80053ae:	4692      	mov	sl, r2
 80053b0:	5c0a      	ldrb	r2, [r1, r0]
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	d10d      	bne.n	80053d2 <prvCLITask+0xe2>
 80053b6:	1c4a      	adds	r2, r1, #1
 80053b8:	4693      	mov	fp, r2
			if(chr == MSG_RX_BUF_SIZE - 1){
 80053ba:	2bbf      	cmp	r3, #191	; 0xbf
 80053bc:	d135      	bne.n	800542a <prvCLITask+0x13a>
			if(UARTRxBuf[PcPort - 1][chr]){
 80053be:	465b      	mov	r3, fp
 80053c0:	781a      	ldrb	r2, [r3, #0]
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80053c2:	552e      	strb	r6, [r5, r4]
			if(UARTRxBuf[PcPort - 1][chr]){
 80053c4:	2a00      	cmp	r2, #0
 80053c6:	d160      	bne.n	800548a <prvCLITask+0x19a>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80053c8:	2302      	movs	r3, #2
			if(UARTRxBuf[PcPort - 1][chr]){
 80053ca:	5cca      	ldrb	r2, [r1, r3]
 80053cc:	0018      	movs	r0, r3
 80053ce:	2a00      	cmp	r2, #0
 80053d0:	d0f3      	beq.n	80053ba <prvCLITask+0xca>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 80053d2:	a902      	add	r1, sp, #8
 80053d4:	73ca      	strb	r2, [r1, #15]
				UARTRxBuf[PcPort - 1][chr] =0;
 80053d6:	4652      	mov	r2, sl
 80053d8:	1912      	adds	r2, r2, r4
 80053da:	0192      	lsls	r2, r2, #6
 80053dc:	4442      	add	r2, r8
 80053de:	5416      	strb	r6, [r2, r0]
				UARTRxBufIndex[PcPort - 1] =chr;
 80053e0:	552b      	strb	r3, [r5, r4]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 80053e2:	a802      	add	r0, sp, #8
 80053e4:	4684      	mov	ip, r0
 80053e6:	210f      	movs	r1, #15
 80053e8:	230a      	movs	r3, #10
 80053ea:	2201      	movs	r2, #1
 80053ec:	4461      	add	r1, ip
 80053ee:	0038      	movs	r0, r7
 80053f0:	f008 f80e 	bl	800d410 <writePxITMutex>
		if(cRxedChar == '\r'){
 80053f4:	ab02      	add	r3, sp, #8
 80053f6:	7bdb      	ldrb	r3, [r3, #15]
 80053f8:	2b0d      	cmp	r3, #13
 80053fa:	d026      	beq.n	800544a <prvCLITask+0x15a>
			if(cRxedChar == '\n'){
 80053fc:	2b0a      	cmp	r3, #10
 80053fe:	d011      	beq.n	8005424 <prvCLITask+0x134>
			else if(cRxedChar == '\b' || cRxedChar == 127 ){
 8005400:	2b08      	cmp	r3, #8
 8005402:	d015      	beq.n	8005430 <prvCLITask+0x140>
 8005404:	2b7f      	cmp	r3, #127	; 0x7f
 8005406:	d013      	beq.n	8005430 <prvCLITask+0x140>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 8005408:	001a      	movs	r2, r3
 800540a:	3a20      	subs	r2, #32
 800540c:	2a5e      	cmp	r2, #94	; 0x5e
 800540e:	d809      	bhi.n	8005424 <prvCLITask+0x134>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 8005410:	464a      	mov	r2, r9
 8005412:	2a31      	cmp	r2, #49	; 0x31
 8005414:	dc06      	bgt.n	8005424 <prvCLITask+0x134>
						cInputIndex++;
 8005416:	464c      	mov	r4, r9
						cInputString[cInputIndex] =cRxedChar;
 8005418:	4a2b      	ldr	r2, [pc, #172]	; (80054c8 <prvCLITask+0x1d8>)
						cInputIndex++;
 800541a:	3401      	adds	r4, #1
						cInputString[cInputIndex] =cRxedChar;
 800541c:	444a      	add	r2, r9
 800541e:	7513      	strb	r3, [r2, #20]
						cInputIndex++;
 8005420:	b263      	sxtb	r3, r4
 8005422:	4699      	mov	r9, r3
		taskYIELD();
 8005424:	f009 ff3a 	bl	800f29c <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005428:	e7b6      	b.n	8005398 <prvCLITask+0xa8>
 800542a:	3301      	adds	r3, #1
 800542c:	b29b      	uxth	r3, r3
 800542e:	e7cc      	b.n	80053ca <prvCLITask+0xda>
				if(cInputIndex > 0){
 8005430:	464b      	mov	r3, r9
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f6      	beq.n	8005424 <prvCLITask+0x134>
					cInputIndex--;
 8005436:	464c      	mov	r4, r9
 8005438:	3c01      	subs	r4, #1
 800543a:	b2e3      	uxtb	r3, r4
 800543c:	b25a      	sxtb	r2, r3
 800543e:	4691      	mov	r9, r2
					cInputString[cInputIndex] ='\0';
 8005440:	4a21      	ldr	r2, [pc, #132]	; (80054c8 <prvCLITask+0x1d8>)
 8005442:	4694      	mov	ip, r2
 8005444:	4463      	add	r3, ip
 8005446:	751e      	strb	r6, [r3, #20]
 8005448:	e7ec      	b.n	8005424 <prvCLITask+0x134>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 800544a:	9b02      	ldr	r3, [sp, #8]
 800544c:	2202      	movs	r2, #2
 800544e:	7818      	ldrb	r0, [r3, #0]
 8005450:	491e      	ldr	r1, [pc, #120]	; (80054cc <prvCLITask+0x1dc>)
 8005452:	230a      	movs	r3, #10
 8005454:	f007 ffdc 	bl	800d410 <writePxITMutex>
			if(cInputIndex == 0){
 8005458:	464b      	mov	r3, r9
 800545a:	2b00      	cmp	r3, #0
 800545c:	d018      	beq.n	8005490 <prvCLITask+0x1a0>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800545e:	4c1a      	ldr	r4, [pc, #104]	; (80054c8 <prvCLITask+0x1d8>)
 8005460:	9b02      	ldr	r3, [sp, #8]
 8005462:	3414      	adds	r4, #20
 8005464:	7818      	ldrb	r0, [r3, #0]
 8005466:	0022      	movs	r2, r4
 8005468:	9b03      	ldr	r3, [sp, #12]
 800546a:	2101      	movs	r1, #1
 800546c:	f7ff fd1e 	bl	8004eac <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 8005470:	480e      	ldr	r0, [pc, #56]	; (80054ac <prvCLITask+0x1bc>)
 8005472:	0021      	movs	r1, r4
 8005474:	3060      	adds	r0, #96	; 0x60
 8005476:	f00d fe51 	bl	801311c <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 800547a:	2232      	movs	r2, #50	; 0x32
 800547c:	2100      	movs	r1, #0
 800547e:	0020      	movs	r0, r4
 8005480:	f00d fc16 	bl	8012cb0 <memset>
			cInputIndex =0;
 8005484:	2300      	movs	r3, #0
 8005486:	4699      	mov	r9, r3
 8005488:	e7cc      	b.n	8005424 <prvCLITask+0x134>
			if(UARTRxBuf[PcPort - 1][chr]){
 800548a:	2001      	movs	r0, #1
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800548c:	2301      	movs	r3, #1
 800548e:	e7a0      	b.n	80053d2 <prvCLITask+0xe2>
				strcpy((char* )cInputString,(char* )cLastInputString);
 8005490:	4906      	ldr	r1, [pc, #24]	; (80054ac <prvCLITask+0x1bc>)
 8005492:	480d      	ldr	r0, [pc, #52]	; (80054c8 <prvCLITask+0x1d8>)
 8005494:	3160      	adds	r1, #96	; 0x60
 8005496:	3014      	adds	r0, #20
 8005498:	f00d fe40 	bl	801311c <strcpy>
 800549c:	e7df      	b.n	800545e <prvCLITask+0x16e>
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	20006ea8 	.word	0x20006ea8
 80054a4:	20000c28 	.word	0x20000c28
 80054a8:	20000030 	.word	0x20000030
 80054ac:	20001180 	.word	0x20001180
 80054b0:	080174f4 	.word	0x080174f4
 80054b4:	20000a98 	.word	0x20000a98
 80054b8:	080182a4 	.word	0x080182a4
 80054bc:	080182d0 	.word	0x080182d0
 80054c0:	2000138c 	.word	0x2000138c
 80054c4:	2000134c 	.word	0x2000134c
 80054c8:	20001200 	.word	0x20001200
 80054cc:	08019ac0 	.word	0x08019ac0

080054d0 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80054d2:	4b1a      	ldr	r3, [pc, #104]	; (800553c <ParseSnippetCommand+0x6c>)
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80054d4:	000c      	movs	r4, r1
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80054d6:	781a      	ldrb	r2, [r3, #0]
 80054d8:	3a01      	subs	r2, #1
 80054da:	0093      	lsls	r3, r2, #2
 80054dc:	189b      	adds	r3, r3, r2
 80054de:	4a18      	ldr	r2, [pc, #96]	; (8005540 <ParseSnippetCommand+0x70>)
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	18d3      	adds	r3, r2, r3
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d018      	beq.n	800551c <ParseSnippetCommand+0x4c>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 80054ea:	4e16      	ldr	r6, [pc, #88]	; (8005544 <ParseSnippetCommand+0x74>)
 80054ec:	6cb5      	ldr	r5, [r6, #72]	; 0x48
 80054ee:	2d00      	cmp	r5, #0
 80054f0:	d016      	beq.n	8005520 <ParseSnippetCommand+0x50>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 80054f2:	782b      	ldrb	r3, [r5, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00e      	beq.n	8005516 <ParseSnippetCommand+0x46>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 80054f8:	2113      	movs	r1, #19
 80054fa:	0028      	movs	r0, r5
 80054fc:	f00d fe00 	bl	8013100 <strchr>
 8005500:	1e07      	subs	r7, r0, #0
	if(ptrEnd != NULL){
 8005502:	d010      	beq.n	8005526 <ParseSnippetCommand+0x56>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8005504:	1b42      	subs	r2, r0, r5
 8005506:	0029      	movs	r1, r5
 8005508:	0020      	movs	r0, r4
 800550a:	f00d fe20 	bl	801314e <strncpy>
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 800550e:	2001      	movs	r0, #1
		ptrStart =ptrEnd + 1;
 8005510:	3701      	adds	r7, #1
 8005512:	64b7      	str	r7, [r6, #72]	; 0x48
}
 8005514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ptrStart =0;		// Initialize the start pointer for next Snippet
 8005516:	64b3      	str	r3, [r6, #72]	; 0x48
		return false;
 8005518:	2000      	movs	r0, #0
 800551a:	e7fb      	b.n	8005514 <ParseSnippetCommand+0x44>
		return false;
 800551c:	2000      	movs	r0, #0
 800551e:	e7f9      	b.n	8005514 <ParseSnippetCommand+0x44>
		ptrStart =snippetBuffer;
 8005520:	64b0      	str	r0, [r6, #72]	; 0x48
 8005522:	0005      	movs	r5, r0
 8005524:	e7e5      	b.n	80054f2 <ParseSnippetCommand+0x22>
		strcpy((char* )cliBuffer,ptrStart);
 8005526:	0029      	movs	r1, r5
 8005528:	0020      	movs	r0, r4
 800552a:	f00d fdf7 	bl	801311c <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 800552e:	0020      	movs	r0, r4
 8005530:	f7fa fdf2 	bl	8000118 <strlen>
 8005534:	182d      	adds	r5, r5, r0
 8005536:	64b5      	str	r5, [r6, #72]	; 0x48
	return true;
 8005538:	2001      	movs	r0, #1
 800553a:	e7eb      	b.n	8005514 <ParseSnippetCommand+0x44>
 800553c:	20001180 	.word	0x20001180
 8005540:	20006ec4 	.word	0x20006ec4
 8005544:	20001200 	.word	0x20001200

08005548 <CheckSnippetCondition>:
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005548:	0083      	lsls	r3, r0, #2
bool CheckSnippetCondition(uint8_t index){
 800554a:	b530      	push	{r4, r5, lr}
	switch(snippets[index].cond.conditionType){
 800554c:	1818      	adds	r0, r3, r0
 800554e:	492e      	ldr	r1, [pc, #184]	; (8005608 <CheckSnippetCondition+0xc0>)
 8005550:	0080      	lsls	r0, r0, #2
 8005552:	5c0b      	ldrb	r3, [r1, r0]
bool CheckSnippetCondition(uint8_t index){
 8005554:	b083      	sub	sp, #12
	switch(snippets[index].cond.conditionType){
 8005556:	2b01      	cmp	r3, #1
 8005558:	d020      	beq.n	800559c <CheckSnippetCondition+0x54>
 800555a:	2b03      	cmp	r3, #3
 800555c:	d11b      	bne.n	8005596 <CheckSnippetCondition+0x4e>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 800555e:	180c      	adds	r4, r1, r0
 8005560:	78e2      	ldrb	r2, [r4, #3]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005562:	3006      	adds	r0, #6
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005564:	3a01      	subs	r2, #1
 8005566:	0053      	lsls	r3, r2, #1
 8005568:	189b      	adds	r3, r3, r2
 800556a:	4a28      	ldr	r2, [pc, #160]	; (800560c <CheckSnippetCondition+0xc4>)
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	589b      	ldr	r3, [r3, r2]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005570:	1841      	adds	r1, r0, r1
 8005572:	2204      	movs	r2, #4
 8005574:	a801      	add	r0, sp, #4
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005576:	681d      	ldr	r5, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005578:	f00d fb91 	bl	8012c9e <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 800557c:	7863      	ldrb	r3, [r4, #1]
 800557e:	2b06      	cmp	r3, #6
 8005580:	d809      	bhi.n	8005596 <CheckSnippetCondition+0x4e>
 8005582:	4a23      	ldr	r2, [pc, #140]	; (8005610 <CheckSnippetCondition+0xc8>)
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	58d3      	ldr	r3, [r2, r3]
 8005588:	469f      	mov	pc, r3
				case MATH_GREATER:
					if(flt1 > flt2)
						return true;
					break;
				case MATH_SMALLER:
					if(flt1 < flt2 && flt1 != 0.0f)
 800558a:	1c29      	adds	r1, r5, #0
 800558c:	9801      	ldr	r0, [sp, #4]
 800558e:	f7fa ffb9 	bl	8000504 <__aeabi_fcmpgt>
 8005592:	2800      	cmp	r0, #0
 8005594:	d114      	bne.n	80055c0 <CheckSnippetCondition+0x78>
			
		default:
			break;
	}
	
	return false;
 8005596:	2000      	movs	r0, #0
}
 8005598:	b003      	add	sp, #12
 800559a:	bd30      	pop	{r4, r5, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 800559c:	1808      	adds	r0, r1, r0
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 800559e:	7882      	ldrb	r2, [r0, #2]
 80055a0:	78c0      	ldrb	r0, [r0, #3]
 80055a2:	00d3      	lsls	r3, r2, #3
 80055a4:	189b      	adds	r3, r3, r2
 80055a6:	4a1b      	ldr	r2, [pc, #108]	; (8005614 <CheckSnippetCondition+0xcc>)
 80055a8:	5c9b      	ldrb	r3, [r3, r2]
 80055aa:	1a18      	subs	r0, r3, r0
 80055ac:	4243      	negs	r3, r0
 80055ae:	4158      	adcs	r0, r3
 80055b0:	b2c0      	uxtb	r0, r0
 80055b2:	e7f1      	b.n	8005598 <CheckSnippetCondition+0x50>
					if(flt1 != flt2 && flt1 != 0.0f)
 80055b4:	1c29      	adds	r1, r5, #0
 80055b6:	9801      	ldr	r0, [sp, #4]
 80055b8:	f7fa ff8a 	bl	80004d0 <__aeabi_fcmpeq>
 80055bc:	2800      	cmp	r0, #0
 80055be:	d1ea      	bne.n	8005596 <CheckSnippetCondition+0x4e>
 80055c0:	2100      	movs	r1, #0
 80055c2:	1c28      	adds	r0, r5, #0
 80055c4:	f7fa ff84 	bl	80004d0 <__aeabi_fcmpeq>
 80055c8:	4243      	negs	r3, r0
 80055ca:	4158      	adcs	r0, r3
 80055cc:	e7e4      	b.n	8005598 <CheckSnippetCondition+0x50>
					if(flt1 == flt2)
 80055ce:	1c29      	adds	r1, r5, #0
 80055d0:	9801      	ldr	r0, [sp, #4]
 80055d2:	f7fa ff7d 	bl	80004d0 <__aeabi_fcmpeq>
 80055d6:	1e43      	subs	r3, r0, #1
 80055d8:	4198      	sbcs	r0, r3
 80055da:	e7dd      	b.n	8005598 <CheckSnippetCondition+0x50>
					if(flt1 > flt2)
 80055dc:	1c29      	adds	r1, r5, #0
 80055de:	9801      	ldr	r0, [sp, #4]
 80055e0:	f7fa ff7c 	bl	80004dc <__aeabi_fcmplt>
 80055e4:	1e43      	subs	r3, r0, #1
 80055e6:	4198      	sbcs	r0, r3
 80055e8:	e7d6      	b.n	8005598 <CheckSnippetCondition+0x50>
					if(flt1 >= flt2)
 80055ea:	1c29      	adds	r1, r5, #0
 80055ec:	9801      	ldr	r0, [sp, #4]
 80055ee:	f7fa ff7f 	bl	80004f0 <__aeabi_fcmple>
 80055f2:	1e43      	subs	r3, r0, #1
 80055f4:	4198      	sbcs	r0, r3
 80055f6:	e7cf      	b.n	8005598 <CheckSnippetCondition+0x50>
					if(flt1 <= flt2 && flt1 != 0.0f)
 80055f8:	1c29      	adds	r1, r5, #0
 80055fa:	9801      	ldr	r0, [sp, #4]
 80055fc:	f7fa ff8c 	bl	8000518 <__aeabi_fcmpge>
 8005600:	2800      	cmp	r0, #0
 8005602:	d1dd      	bne.n	80055c0 <CheckSnippetCondition+0x78>
 8005604:	e7c7      	b.n	8005596 <CheckSnippetCondition+0x4e>
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	20006ec4 	.word	0x20006ec4
 800560c:	20000094 	.word	0x20000094
 8005610:	0801759c 	.word	0x0801759c
 8005614:	2000191c 	.word	0x2000191c

08005618 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	46de      	mov	lr, fp
 800561c:	464e      	mov	r6, r9
 800561e:	4645      	mov	r5, r8
 8005620:	4657      	mov	r7, sl
 8005622:	b5e0      	push	{r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005624:	f008 f91a 	bl	800d85c <FreeRTOS_CLIGetOutputBuffer>
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 8005628:	4b23      	ldr	r3, [pc, #140]	; (80056b8 <ExecuteSnippet+0xa0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800562a:	0006      	movs	r6, r0
	for(s =0; s < numOfRecordedSnippets; s++){
 800562c:	4698      	mov	r8, r3
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d039      	beq.n	80056a8 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
		{
			if(CheckSnippetCondition(s))				// Process Snippet condition
			{
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005634:	4b21      	ldr	r3, [pc, #132]	; (80056bc <ExecuteSnippet+0xa4>)
 8005636:	4f22      	ldr	r7, [pc, #136]	; (80056c0 <ExecuteSnippet+0xa8>)
 8005638:	469b      	mov	fp, r3
 800563a:	2320      	movs	r3, #32
 800563c:	469a      	mov	sl, r3
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 800563e:	4b21      	ldr	r3, [pc, #132]	; (80056c4 <ExecuteSnippet+0xac>)
 8005640:	4d21      	ldr	r5, [pc, #132]	; (80056c8 <ExecuteSnippet+0xb0>)
	for(s =0; s < numOfRecordedSnippets; s++){
 8005642:	2400      	movs	r4, #0
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005644:	374c      	adds	r7, #76	; 0x4c
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005646:	4699      	mov	r9, r3
 8005648:	e006      	b.n	8005658 <ExecuteSnippet+0x40>
	for(s =0; s < numOfRecordedSnippets; s++){
 800564a:	4643      	mov	r3, r8
 800564c:	3401      	adds	r4, #1
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	b2a4      	uxth	r4, r4
 8005652:	3514      	adds	r5, #20
 8005654:	42a3      	cmp	r3, r4
 8005656:	d927      	bls.n	80056a8 <ExecuteSnippet+0x90>
		if(snippets[s].state)								// Check for activated Snippets
 8005658:	7c2b      	ldrb	r3, [r5, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0f5      	beq.n	800564a <ExecuteSnippet+0x32>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 800565e:	b2e0      	uxtb	r0, r4
 8005660:	f7ff ff72 	bl	8005548 <CheckSnippetCondition>
 8005664:	2800      	cmp	r0, #0
 8005666:	d0f0      	beq.n	800564a <ExecuteSnippet+0x32>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005668:	465b      	mov	r3, fp
 800566a:	4652      	mov	r2, sl
 800566c:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800566e:	e00e      	b.n	800568e <ExecuteSnippet+0x76>
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005670:	464b      	mov	r3, r9
 8005672:	003a      	movs	r2, r7
 8005674:	7818      	ldrb	r0, [r3, #0]
 8005676:	2100      	movs	r1, #0
 8005678:	0033      	movs	r3, r6
 800567a:	f7ff fc17 	bl	8004eac <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800567e:	0030      	movs	r0, r6
 8005680:	f7fa fd4a 	bl	8000118 <strlen>
 8005684:	2100      	movs	r1, #0
 8005686:	0002      	movs	r2, r0
 8005688:	0030      	movs	r0, r6
 800568a:	f00d fb11 	bl	8012cb0 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800568e:	0039      	movs	r1, r7
 8005690:	68e8      	ldr	r0, [r5, #12]
 8005692:	f7ff ff1d 	bl	80054d0 <ParseSnippetCommand>
 8005696:	2800      	cmp	r0, #0
 8005698:	d1ea      	bne.n	8005670 <ExecuteSnippet+0x58>
	for(s =0; s < numOfRecordedSnippets; s++){
 800569a:	4643      	mov	r3, r8
 800569c:	3401      	adds	r4, #1
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	b2a4      	uxth	r4, r4
 80056a2:	3514      	adds	r5, #20
 80056a4:	42a3      	cmp	r3, r4
 80056a6:	d8d7      	bhi.n	8005658 <ExecuteSnippet+0x40>
			}
		}
	}
	
	return result;
}
 80056a8:	2000      	movs	r0, #0
 80056aa:	bc3c      	pop	{r2, r3, r4, r5}
 80056ac:	4690      	mov	r8, r2
 80056ae:	4699      	mov	r9, r3
 80056b0:	46a2      	mov	sl, r4
 80056b2:	46ab      	mov	fp, r5
 80056b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	20001180 	.word	0x20001180
 80056bc:	20006e28 	.word	0x20006e28
 80056c0:	20001200 	.word	0x20001200
 80056c4:	20000c28 	.word	0x20000c28
 80056c8:	20006ec4 	.word	0x20006ec4

080056cc <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 80056cc:	2000      	movs	r0, #0
 80056ce:	4770      	bx	lr

080056d0 <setBaudrateCommand>:

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 80056d0:	2300      	movs	r3, #0
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056d2:	b570      	push	{r4, r5, r6, lr}
 80056d4:	b082      	sub	sp, #8
 80056d6:	0004      	movs	r4, r0
 80056d8:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80056da:	9300      	str	r3, [sp, #0]
	portBASE_TYPE xParameterStringLength2 =0;
 80056dc:	9301      	str	r3, [sp, #4]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80056de:	2800      	cmp	r0, #0
 80056e0:	d017      	beq.n	8005712 <setBaudrateCommand+0x42>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80056e2:	466a      	mov	r2, sp
 80056e4:	2101      	movs	r1, #1
 80056e6:	0028      	movs	r0, r5
 80056e8:	f008 f8bc 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80056ec:	2300      	movs	r3, #0
 80056ee:	56c3      	ldrsb	r3, [r0, r3]
 80056f0:	2b70      	cmp	r3, #112	; 0x70
 80056f2:	d010      	beq.n	8005716 <setBaudrateCommand+0x46>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80056f4:	aa01      	add	r2, sp, #4
 80056f6:	2102      	movs	r1, #2
 80056f8:	0028      	movs	r0, r5
 80056fa:	f008 f8b3 	bl	800d864 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80056fe:	f00d f80e 	bl	801271e <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005702:	2213      	movs	r2, #19
 8005704:	4910      	ldr	r1, [pc, #64]	; (8005748 <setBaudrateCommand+0x78>)
 8005706:	0020      	movs	r0, r4
 8005708:	f00d fac9 	bl	8012c9e <memcpy>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800570c:	2000      	movs	r0, #0
 800570e:	b002      	add	sp, #8
 8005710:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8005712:	b672      	cpsid	i
 8005714:	e7fe      	b.n	8005714 <setBaudrateCommand+0x44>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005716:	3001      	adds	r0, #1
 8005718:	f00d f801 	bl	801271e <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800571c:	aa01      	add	r2, sp, #4
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800571e:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005720:	2102      	movs	r1, #2
 8005722:	0028      	movs	r0, r5
 8005724:	f008 f89e 	bl	800d864 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005728:	f00c fff9 	bl	801271e <atol>
 800572c:	0005      	movs	r5, r0
		UpdateBaudrate(port,baudrate);
 800572e:	b2f0      	uxtb	r0, r6
 8005730:	0029      	movs	r1, r5
 8005732:	f007 feb1 	bl	800d498 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 8005736:	23ff      	movs	r3, #255	; 0xff
 8005738:	002a      	movs	r2, r5
 800573a:	4033      	ands	r3, r6
 800573c:	4903      	ldr	r1, [pc, #12]	; (800574c <setBaudrateCommand+0x7c>)
 800573e:	0020      	movs	r0, r4
 8005740:	f00d fcb0 	bl	80130a4 <sprintf>
 8005744:	e7e2      	b.n	800570c <setBaudrateCommand+0x3c>
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	0801858c 	.word	0x0801858c
 800574c:	08018564 	.word	0x08018564

08005750 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005750:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005752:	2800      	cmp	r0, #0
 8005754:	d101      	bne.n	800575a <flashsizeCommand+0xa>
 8005756:	b672      	cpsid	i
 8005758:	e7fe      	b.n	8005758 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 800575a:	4b03      	ldr	r3, [pc, #12]	; (8005768 <flashsizeCommand+0x18>)
 800575c:	4903      	ldr	r1, [pc, #12]	; (800576c <flashsizeCommand+0x1c>)
 800575e:	881a      	ldrh	r2, [r3, #0]
 8005760:	f00d fca0 	bl	80130a4 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005764:	2000      	movs	r0, #0
 8005766:	bd10      	pop	{r4, pc}
 8005768:	1ffff7cc 	.word	0x1ffff7cc
 800576c:	080185a0 	.word	0x080185a0

08005770 <GetReadPrecentageCommand>:
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 8005770:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005772:	b510      	push	{r4, lr}
 8005774:	b082      	sub	sp, #8
	portBASE_TYPE xParameterStringLength1 =0;
 8005776:	9300      	str	r3, [sp, #0]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 8005778:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800577a:	0004      	movs	r4, r0
	float ADC_Value_CLI =0;
 800577c:	9301      	str	r3, [sp, #4]
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800577e:	0010      	movs	r0, r2
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005780:	2c00      	cmp	r4, #0
 8005782:	d00f      	beq.n	80057a4 <GetReadPrecentageCommand+0x34>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005784:	466a      	mov	r2, sp
 8005786:	2101      	movs	r1, #1
 8005788:	f008 f86c 	bl	800d864 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800578c:	7803      	ldrb	r3, [r0, #0]
 800578e:	3b32      	subs	r3, #50	; 0x32
 8005790:	2b01      	cmp	r3, #1
 8005792:	d909      	bls.n	80057a8 <GetReadPrecentageCommand+0x38>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005794:	2215      	movs	r2, #21
 8005796:	490c      	ldr	r1, [pc, #48]	; (80057c8 <GetReadPrecentageCommand+0x58>)
 8005798:	0020      	movs	r0, r4
 800579a:	f00d fa80 	bl	8012c9e <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 800579e:	2000      	movs	r0, #0
 80057a0:	b002      	add	sp, #8
 80057a2:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 80057a4:	b672      	cpsid	i
 80057a6:	e7fe      	b.n	80057a6 <GetReadPrecentageCommand+0x36>
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80057a8:	f00c ffb9 	bl	801271e <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 80057ac:	a901      	add	r1, sp, #4
 80057ae:	b2c0      	uxtb	r0, r0
 80057b0:	f003 f97c 	bl	8008aac <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 80057b4:	9801      	ldr	r0, [sp, #4]
 80057b6:	f7fd f9b5 	bl	8002b24 <__aeabi_f2d>
 80057ba:	0002      	movs	r2, r0
 80057bc:	000b      	movs	r3, r1
 80057be:	0020      	movs	r0, r4
 80057c0:	4902      	ldr	r1, [pc, #8]	; (80057cc <GetReadPrecentageCommand+0x5c>)
 80057c2:	f00d fc6f 	bl	80130a4 <sprintf>
 80057c6:	e7ea      	b.n	800579e <GetReadPrecentageCommand+0x2e>
 80057c8:	080185e4 	.word	0x080185e4
 80057cc:	080185c0 	.word	0x080185c0

080057d0 <ReadVrefCommand>:
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80057d0:	2300      	movs	r3, #0
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057d2:	b510      	push	{r4, lr}
 80057d4:	b082      	sub	sp, #8
 80057d6:	1e04      	subs	r4, r0, #0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80057dc:	d101      	bne.n	80057e2 <ReadVrefCommand+0x12>
 80057de:	b672      	cpsid	i
 80057e0:	e7fe      	b.n	80057e0 <ReadVrefCommand+0x10>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80057e2:	a901      	add	r1, sp, #4
 80057e4:	4668      	mov	r0, sp
 80057e6:	f003 f893 	bl	8008910 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80057ea:	4669      	mov	r1, sp
 80057ec:	0020      	movs	r0, r4
 80057ee:	f00d fc95 	bl	801311c <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80057f2:	9801      	ldr	r0, [sp, #4]
 80057f4:	f7fd f996 	bl	8002b24 <__aeabi_f2d>
 80057f8:	0002      	movs	r2, r0
 80057fa:	000b      	movs	r3, r1
 80057fc:	0020      	movs	r0, r4
 80057fe:	4903      	ldr	r1, [pc, #12]	; (800580c <ReadVrefCommand+0x3c>)
 8005800:	f00d fc50 	bl	80130a4 <sprintf>
}
 8005804:	2000      	movs	r0, #0
 8005806:	b002      	add	sp, #8
 8005808:	bd10      	pop	{r4, pc}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	080185fc 	.word	0x080185fc

08005810 <ReadTempCommand>:
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005810:	2300      	movs	r3, #0
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005812:	b510      	push	{r4, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	1e04      	subs	r4, r0, #0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 800581c:	d101      	bne.n	8005822 <ReadTempCommand+0x12>
 800581e:	b672      	cpsid	i
 8005820:	e7fe      	b.n	8005820 <ReadTempCommand+0x10>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005822:	a901      	add	r1, sp, #4
 8005824:	4668      	mov	r0, sp
 8005826:	f003 f873 	bl	8008910 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800582a:	4669      	mov	r1, sp
 800582c:	0020      	movs	r0, r4
 800582e:	f00d fc75 	bl	801311c <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005832:	9800      	ldr	r0, [sp, #0]
 8005834:	f7fd f976 	bl	8002b24 <__aeabi_f2d>
 8005838:	0002      	movs	r2, r0
 800583a:	000b      	movs	r3, r1
 800583c:	0020      	movs	r0, r4
 800583e:	4903      	ldr	r1, [pc, #12]	; (800584c <ReadTempCommand+0x3c>)
 8005840:	f00d fc30 	bl	80130a4 <sprintf>
}
 8005844:	2000      	movs	r0, #0
 8005846:	b002      	add	sp, #8
 8005848:	bd10      	pop	{r4, pc}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	08018624 	.word	0x08018624

08005850 <ADCReadCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005850:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005852:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005854:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 8005856:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005858:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 800585a:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800585c:	0004      	movs	r4, r0
 800585e:	0016      	movs	r6, r2
	float ADC_Value_CLI =0;
 8005860:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8005862:	2800      	cmp	r0, #0
 8005864:	d017      	beq.n	8005896 <ADCReadCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005866:	aa01      	add	r2, sp, #4
 8005868:	2101      	movs	r1, #1
 800586a:	0030      	movs	r0, r6
 800586c:	f007 fffa 	bl	800d864 <FreeRTOS_CLIGetParameter>
 8005870:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005872:	aa02      	add	r2, sp, #8
 8005874:	2102      	movs	r1, #2
 8005876:	0030      	movs	r0, r6
 8005878:	f007 fff4 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800587c:	782b      	ldrb	r3, [r5, #0]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800587e:	0007      	movs	r7, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005880:	3b32      	subs	r3, #50	; 0x32
 8005882:	2b01      	cmp	r3, #1
 8005884:	d909      	bls.n	800589a <ADCReadCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005886:	2215      	movs	r2, #21
 8005888:	491a      	ldr	r1, [pc, #104]	; (80058f4 <ADCReadCommand+0xa4>)
 800588a:	0020      	movs	r0, r4
 800588c:	f00d fa07 	bl	8012c9e <memcpy>
}
 8005890:	2000      	movs	r0, #0
 8005892:	b005      	add	sp, #20
 8005894:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005896:	b672      	cpsid	i
 8005898:	e7fe      	b.n	8005898 <ADCReadCommand+0x48>
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800589a:	0028      	movs	r0, r5
 800589c:	f00c ff3f 	bl	801271e <atol>
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 80058a0:	4e15      	ldr	r6, [pc, #84]	; (80058f8 <ADCReadCommand+0xa8>)
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80058a2:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 80058a4:	0031      	movs	r1, r6
 80058a6:	0038      	movs	r0, r7
 80058a8:	f7fa fc2c 	bl	8000104 <strcmp>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d005      	beq.n	80058bc <ADCReadCommand+0x6c>
 80058b0:	4912      	ldr	r1, [pc, #72]	; (80058fc <ADCReadCommand+0xac>)
 80058b2:	0038      	movs	r0, r7
 80058b4:	f7fa fc26 	bl	8000104 <strcmp>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d115      	bne.n	80058e8 <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports,ADC_Side);
 80058bc:	0031      	movs	r1, r6
 80058be:	0028      	movs	r0, r5
 80058c0:	f003 f9f8 	bl	8008cb4 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 80058c4:	aa03      	add	r2, sp, #12
 80058c6:	0031      	movs	r1, r6
 80058c8:	0028      	movs	r0, r5
 80058ca:	f003 fa4b 	bl	8008d64 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 80058ce:	a903      	add	r1, sp, #12
 80058d0:	0020      	movs	r0, r4
 80058d2:	f00d fc23 	bl	801311c <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 80058d6:	9803      	ldr	r0, [sp, #12]
 80058d8:	f7fa fe72 	bl	80005c0 <__aeabi_f2uiz>
 80058dc:	4908      	ldr	r1, [pc, #32]	; (8005900 <ADCReadCommand+0xb0>)
 80058de:	b282      	uxth	r2, r0
 80058e0:	0020      	movs	r0, r4
 80058e2:	f00d fbdf 	bl	80130a4 <sprintf>
 80058e6:	e7d3      	b.n	8005890 <ADCReadCommand+0x40>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80058e8:	2212      	movs	r2, #18
 80058ea:	4906      	ldr	r1, [pc, #24]	; (8005904 <ADCReadCommand+0xb4>)
 80058ec:	0020      	movs	r0, r4
 80058ee:	f00d f9d6 	bl	8012c9e <memcpy>
 80058f2:	e7cd      	b.n	8005890 <ADCReadCommand+0x40>
 80058f4:	080185e4 	.word	0x080185e4
 80058f8:	08018648 	.word	0x08018648
 80058fc:	0801864c 	.word	0x0801864c
 8005900:	08018654 	.word	0x08018654
 8005904:	08018664 	.word	0x08018664

08005908 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800590a:	4645      	mov	r5, r8
 800590c:	46de      	mov	lr, fp
 800590e:	4657      	mov	r7, sl
 8005910:	464e      	mov	r6, r9
	portBASE_TYPE xParameterStringLength1 =0;
 8005912:	2300      	movs	r3, #0
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005914:	b5e0      	push	{r5, r6, r7, lr}
 8005916:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 8005918:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 800591a:	4b5f      	ldr	r3, [pc, #380]	; (8005a98 <testportCommand+0x190>)
 800591c:	ad02      	add	r5, sp, #8
 800591e:	781b      	ldrb	r3, [r3, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005920:	0004      	movs	r4, r0
	char WriteVaule[1] ="H";
 8005922:	702b      	strb	r3, [r5, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005924:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8005926:	2c00      	cmp	r4, #0
 8005928:	d100      	bne.n	800592c <testportCommand+0x24>
 800592a:	e074      	b.n	8005a16 <testportCommand+0x10e>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800592c:	2101      	movs	r1, #1
 800592e:	aa03      	add	r2, sp, #12
 8005930:	f007 ff98 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005934:	4959      	ldr	r1, [pc, #356]	; (8005a9c <testportCommand+0x194>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005936:	0006      	movs	r6, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005938:	f7fa fbe4 	bl	8000104 <strcmp>
 800593c:	2800      	cmp	r0, #0
 800593e:	d159      	bne.n	80059f4 <testportCommand+0xec>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005940:	2701      	movs	r7, #1
 8005942:	4e57      	ldr	r6, [pc, #348]	; (8005aa0 <testportCommand+0x198>)
 8005944:	4b57      	ldr	r3, [pc, #348]	; (8005aa4 <testportCommand+0x19c>)
 8005946:	7832      	ldrb	r2, [r6, #0]
 8005948:	189b      	adds	r3, r3, r2
 800594a:	3b01      	subs	r3, #1
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	4698      	mov	r8, r3
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005950:	4b55      	ldr	r3, [pc, #340]	; (8005aa8 <testportCommand+0x1a0>)
 8005952:	469b      	mov	fp, r3
 8005954:	b2fb      	uxtb	r3, r7
 8005956:	469a      	mov	sl, r3
			if(PcPort != ports){
 8005958:	429a      	cmp	r2, r3
 800595a:	d107      	bne.n	800596c <testportCommand+0x64>
 800595c:	3701      	adds	r7, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 800595e:	2f07      	cmp	r7, #7
 8005960:	d051      	beq.n	8005a06 <testportCommand+0xfe>
 8005962:	7832      	ldrb	r2, [r6, #0]
 8005964:	b2fb      	uxtb	r3, r7
 8005966:	469a      	mov	sl, r3
			if(PcPort != ports){
 8005968:	429a      	cmp	r2, r3
 800596a:	d0f7      	beq.n	800595c <testportCommand+0x54>
				WriteVaule[0] =rand();
 800596c:	f00d f9b8 	bl	8012ce0 <rand>
				writePxMutex(ports,WriteVaule,1,10,100);
 8005970:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 8005972:	7028      	strb	r0, [r5, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005974:	2201      	movs	r2, #1
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	0029      	movs	r1, r5
 800597a:	4699      	mov	r9, r3
 800597c:	4650      	mov	r0, sl
 800597e:	3b5a      	subs	r3, #90	; 0x5a
 8005980:	f007 fd14 	bl	800d3ac <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005984:	4650      	mov	r0, sl
 8005986:	f007 fd99 	bl	800d4bc <GetUart>
 800598a:	6803      	ldr	r3, [r0, #0]
				if(WriteVaule[0] == ReadValue[0])
 800598c:	782a      	ldrb	r2, [r5, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800598e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005990:	b2db      	uxtb	r3, r3
 8005992:	429a      	cmp	r2, r3
 8005994:	d041      	beq.n	8005a1a <testportCommand+0x112>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005996:	003a      	movs	r2, r7
 8005998:	4944      	ldr	r1, [pc, #272]	; (8005aac <testportCommand+0x1a4>)
 800599a:	0020      	movs	r0, r4
 800599c:	f00d fb82 	bl	80130a4 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80059a0:	0020      	movs	r0, r4
 80059a2:	f7fa fbb9 	bl	8000118 <strlen>
 80059a6:	464b      	mov	r3, r9
 80059a8:	b282      	uxth	r2, r0
 80059aa:	0021      	movs	r1, r4
 80059ac:	7830      	ldrb	r0, [r6, #0]
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	230a      	movs	r3, #10
 80059b2:	f007 fcfb 	bl	800d3ac <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 80059b6:	2254      	movs	r2, #84	; 0x54
 80059b8:	493d      	ldr	r1, [pc, #244]	; (8005ab0 <testportCommand+0x1a8>)
 80059ba:	0020      	movs	r0, r4
 80059bc:	f00d f96f 	bl	8012c9e <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80059c0:	2364      	movs	r3, #100	; 0x64
 80059c2:	7830      	ldrb	r0, [r6, #0]
 80059c4:	2253      	movs	r2, #83	; 0x53
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	0021      	movs	r1, r4
 80059ca:	3b5a      	subs	r3, #90	; 0x5a
 80059cc:	f007 fcee 	bl	800d3ac <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80059d0:	2301      	movs	r3, #1
 80059d2:	469c      	mov	ip, r3
 80059d4:	44e0      	add	r8, ip
 80059d6:	e002      	b.n	80059de <testportCommand+0xd6>
					Delay_ms(1);
 80059d8:	2001      	movs	r0, #1
 80059da:	f009 fdb7 	bl	800f54c <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80059de:	7832      	ldrb	r2, [r6, #0]
 80059e0:	3a01      	subs	r2, #1
 80059e2:	0053      	lsls	r3, r2, #1
 80059e4:	189b      	adds	r3, r3, r2
 80059e6:	4642      	mov	r2, r8
 80059e8:	019b      	lsls	r3, r3, #6
 80059ea:	445b      	add	r3, fp
 80059ec:	5c9b      	ldrb	r3, [r3, r2]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f2      	beq.n	80059d8 <testportCommand+0xd0>
 80059f2:	e7b3      	b.n	800595c <testportCommand+0x54>
	else if(pcParameterString1[0] == 'p'){
 80059f4:	2300      	movs	r3, #0
 80059f6:	56f3      	ldrsb	r3, [r6, r3]
 80059f8:	2b70      	cmp	r3, #112	; 0x70
 80059fa:	d01f      	beq.n	8005a3c <testportCommand+0x134>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059fc:	220f      	movs	r2, #15
 80059fe:	492d      	ldr	r1, [pc, #180]	; (8005ab4 <testportCommand+0x1ac>)
 8005a00:	0020      	movs	r0, r4
 8005a02:	f00d f94c 	bl	8012c9e <memcpy>
}
 8005a06:	2000      	movs	r0, #0
 8005a08:	b005      	add	sp, #20
 8005a0a:	bc3c      	pop	{r2, r3, r4, r5}
 8005a0c:	4690      	mov	r8, r2
 8005a0e:	4699      	mov	r9, r3
 8005a10:	46a2      	mov	sl, r4
 8005a12:	46ab      	mov	fp, r5
 8005a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005a16:	b672      	cpsid	i
 8005a18:	e7fe      	b.n	8005a18 <testportCommand+0x110>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 8005a1a:	003a      	movs	r2, r7
 8005a1c:	4926      	ldr	r1, [pc, #152]	; (8005ab8 <testportCommand+0x1b0>)
 8005a1e:	0020      	movs	r0, r4
 8005a20:	f00d fb40 	bl	80130a4 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005a24:	0020      	movs	r0, r4
 8005a26:	f7fa fb77 	bl	8000118 <strlen>
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	b282      	uxth	r2, r0
 8005a2e:	0021      	movs	r1, r4
 8005a30:	7830      	ldrb	r0, [r6, #0]
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	3b5a      	subs	r3, #90	; 0x5a
 8005a36:	f007 fcb9 	bl	800d3ac <writePxMutex>
 8005a3a:	e7bc      	b.n	80059b6 <testportCommand+0xae>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a3c:	1c70      	adds	r0, r6, #1
 8005a3e:	f00c fe6e 	bl	801271e <atol>
 8005a42:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005a44:	1e7b      	subs	r3, r7, #1
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a46:	0006      	movs	r6, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005a48:	2b05      	cmp	r3, #5
 8005a4a:	d905      	bls.n	8005a58 <testportCommand+0x150>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005a4c:	221b      	movs	r2, #27
 8005a4e:	491b      	ldr	r1, [pc, #108]	; (8005abc <testportCommand+0x1b4>)
 8005a50:	0020      	movs	r0, r4
 8005a52:	f00d f924 	bl	8012c9e <memcpy>
 8005a56:	e7d6      	b.n	8005a06 <testportCommand+0xfe>
				WriteVaule[0] =rand();
 8005a58:	f00d f942 	bl	8012ce0 <rand>
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005a5c:	2364      	movs	r3, #100	; 0x64
				WriteVaule[0] =rand();
 8005a5e:	7028      	strb	r0, [r5, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005a60:	2201      	movs	r2, #1
 8005a62:	0029      	movs	r1, r5
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	0038      	movs	r0, r7
 8005a68:	3b32      	subs	r3, #50	; 0x32
 8005a6a:	f007 fc9f 	bl	800d3ac <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005a6e:	0038      	movs	r0, r7
 8005a70:	f007 fd24 	bl	800d4bc <GetUart>
 8005a74:	6803      	ldr	r3, [r0, #0]
			if(WriteVaule[0] == ReadValue[0])
 8005a76:	7829      	ldrb	r1, [r5, #0]
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005a78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a7a:	b2f2      	uxtb	r2, r6
			if(WriteVaule[0] == ReadValue[0])
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	4299      	cmp	r1, r3
 8005a80:	d004      	beq.n	8005a8c <testportCommand+0x184>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005a82:	490a      	ldr	r1, [pc, #40]	; (8005aac <testportCommand+0x1a4>)
 8005a84:	0020      	movs	r0, r4
 8005a86:	f00d fb0d 	bl	80130a4 <sprintf>
 8005a8a:	e7bc      	b.n	8005a06 <testportCommand+0xfe>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005a8c:	490a      	ldr	r1, [pc, #40]	; (8005ab8 <testportCommand+0x1b0>)
 8005a8e:	0020      	movs	r0, r4
 8005a90:	f00d fb08 	bl	80130a4 <sprintf>
 8005a94:	e7b7      	b.n	8005a06 <testportCommand+0xfe>
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	08017814 	.word	0x08017814
 8005a9c:	08017e5c 	.word	0x08017e5c
 8005aa0:	20000c28 	.word	0x20000c28
 8005aa4:	2000134c 	.word	0x2000134c
 8005aa8:	2000138c 	.word	0x2000138c
 8005aac:	08018694 	.word	0x08018694
 8005ab0:	080186a8 	.word	0x080186a8
 8005ab4:	08018718 	.word	0x08018718
 8005ab8:	08018678 	.word	0x08018678
 8005abc:	080186fc 	.word	0x080186fc

08005ac0 <unbridgeCommand>:
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005ac0:	2300      	movs	r3, #0
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	0004      	movs	r4, r0
 8005ac8:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d019      	beq.n	8005b06 <unbridgeCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ad2:	466a      	mov	r2, sp
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	0028      	movs	r0, r5
 8005ad8:	f007 fec4 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005adc:	2300      	movs	r3, #0
 8005ade:	56c3      	ldrsb	r3, [r0, r3]
 8005ae0:	2b70      	cmp	r3, #112	; 0x70
 8005ae2:	d012      	beq.n	8005b0a <unbridgeCommand+0x4a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005ae4:	aa01      	add	r2, sp, #4
 8005ae6:	2102      	movs	r1, #2
 8005ae8:	0028      	movs	r0, r5
 8005aea:	f007 febb 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005aee:	2300      	movs	r3, #0
 8005af0:	56c3      	ldrsb	r3, [r0, r3]
 8005af2:	2b70      	cmp	r3, #112	; 0x70
 8005af4:	d029      	beq.n	8005b4a <unbridgeCommand+0x8a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005af6:	220f      	movs	r2, #15
 8005af8:	491a      	ldr	r1, [pc, #104]	; (8005b64 <unbridgeCommand+0xa4>)
 8005afa:	0020      	movs	r0, r4
 8005afc:	f00d f8cf 	bl	8012c9e <memcpy>
}
 8005b00:	2000      	movs	r0, #0
 8005b02:	b003      	add	sp, #12
 8005b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005b06:	b672      	cpsid	i
 8005b08:	e7fe      	b.n	8005b08 <unbridgeCommand+0x48>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f00c fe07 	bl	801271e <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b10:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005b12:	0006      	movs	r6, r0
 8005b14:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b16:	2102      	movs	r1, #2
 8005b18:	0028      	movs	r0, r5
 8005b1a:	f007 fea3 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005b1e:	2300      	movs	r3, #0
 8005b20:	56c3      	ldrsb	r3, [r0, r3]
 8005b22:	2b70      	cmp	r3, #112	; 0x70
 8005b24:	d1e7      	bne.n	8005af6 <unbridgeCommand+0x36>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005b26:	3001      	adds	r0, #1
 8005b28:	f00c fdf9 	bl	801271e <atol>
 8005b2c:	0005      	movs	r5, r0
		result =Unbridge(port1,port2);
 8005b2e:	b2c1      	uxtb	r1, r0
 8005b30:	0038      	movs	r0, r7
 8005b32:	f7fe ff33 	bl	800499c <Unbridge>
	if(result == BOS_OK)
 8005b36:	2800      	cmp	r0, #0
 8005b38:	d00b      	beq.n	8005b52 <unbridgeCommand+0x92>
	else if(result == BOS_ERR_WrongParam)
 8005b3a:	2867      	cmp	r0, #103	; 0x67
 8005b3c:	d0db      	beq.n	8005af6 <unbridgeCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005b3e:	2219      	movs	r2, #25
 8005b40:	4909      	ldr	r1, [pc, #36]	; (8005b68 <unbridgeCommand+0xa8>)
 8005b42:	0020      	movs	r0, r4
 8005b44:	f00d f8ab 	bl	8012c9e <memcpy>
	return pdFALSE;
 8005b48:	e7da      	b.n	8005b00 <unbridgeCommand+0x40>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	f00c fde7 	bl	801271e <atol>
 8005b50:	e7d1      	b.n	8005af6 <unbridgeCommand+0x36>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005b52:	22ff      	movs	r2, #255	; 0xff
 8005b54:	002b      	movs	r3, r5
 8005b56:	4905      	ldr	r1, [pc, #20]	; (8005b6c <unbridgeCommand+0xac>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	0020      	movs	r0, r4
 8005b5c:	4032      	ands	r2, r6
 8005b5e:	f00d faa1 	bl	80130a4 <sprintf>
 8005b62:	e7cd      	b.n	8005b00 <unbridgeCommand+0x40>
 8005b64:	08018718 	.word	0x08018718
 8005b68:	08018748 	.word	0x08018748
 8005b6c:	08018728 	.word	0x08018728

08005b70 <bridgeCommand>:
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005b70:	2300      	movs	r3, #0
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b74:	b083      	sub	sp, #12
 8005b76:	0004      	movs	r4, r0
 8005b78:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d019      	beq.n	8005bb6 <bridgeCommand+0x46>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b82:	466a      	mov	r2, sp
 8005b84:	2101      	movs	r1, #1
 8005b86:	0028      	movs	r0, r5
 8005b88:	f007 fe6c 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	56c3      	ldrsb	r3, [r0, r3]
 8005b90:	2b70      	cmp	r3, #112	; 0x70
 8005b92:	d012      	beq.n	8005bba <bridgeCommand+0x4a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b94:	aa01      	add	r2, sp, #4
 8005b96:	2102      	movs	r1, #2
 8005b98:	0028      	movs	r0, r5
 8005b9a:	f007 fe63 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	56c3      	ldrsb	r3, [r0, r3]
 8005ba2:	2b70      	cmp	r3, #112	; 0x70
 8005ba4:	d029      	beq.n	8005bfa <bridgeCommand+0x8a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005ba6:	220f      	movs	r2, #15
 8005ba8:	491a      	ldr	r1, [pc, #104]	; (8005c14 <bridgeCommand+0xa4>)
 8005baa:	0020      	movs	r0, r4
 8005bac:	f00d f877 	bl	8012c9e <memcpy>
}
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	b003      	add	sp, #12
 8005bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005bb6:	b672      	cpsid	i
 8005bb8:	e7fe      	b.n	8005bb8 <bridgeCommand+0x48>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005bba:	3001      	adds	r0, #1
 8005bbc:	f00c fdaf 	bl	801271e <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005bc0:	aa01      	add	r2, sp, #4
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005bc2:	0006      	movs	r6, r0
 8005bc4:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005bc6:	2102      	movs	r1, #2
 8005bc8:	0028      	movs	r0, r5
 8005bca:	f007 fe4b 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005bce:	2300      	movs	r3, #0
 8005bd0:	56c3      	ldrsb	r3, [r0, r3]
 8005bd2:	2b70      	cmp	r3, #112	; 0x70
 8005bd4:	d1e7      	bne.n	8005ba6 <bridgeCommand+0x36>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	f00c fda1 	bl	801271e <atol>
 8005bdc:	0005      	movs	r5, r0
		result =Bridge(port1,port2);
 8005bde:	b2c1      	uxtb	r1, r0
 8005be0:	0038      	movs	r0, r7
 8005be2:	f7fe fec7 	bl	8004974 <Bridge>
	if(result == BOS_OK)
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d00b      	beq.n	8005c02 <bridgeCommand+0x92>
	else if(result == BOS_ERR_WrongParam)
 8005bea:	2867      	cmp	r0, #103	; 0x67
 8005bec:	d0db      	beq.n	8005ba6 <bridgeCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005bee:	2217      	movs	r2, #23
 8005bf0:	4909      	ldr	r1, [pc, #36]	; (8005c18 <bridgeCommand+0xa8>)
 8005bf2:	0020      	movs	r0, r4
 8005bf4:	f00d f853 	bl	8012c9e <memcpy>
	return pdFALSE;
 8005bf8:	e7da      	b.n	8005bb0 <bridgeCommand+0x40>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	f00c fd8f 	bl	801271e <atol>
 8005c00:	e7d1      	b.n	8005ba6 <bridgeCommand+0x36>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005c02:	22ff      	movs	r2, #255	; 0xff
 8005c04:	002b      	movs	r3, r5
 8005c06:	4905      	ldr	r1, [pc, #20]	; (8005c1c <bridgeCommand+0xac>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	0020      	movs	r0, r4
 8005c0c:	4032      	ands	r2, r6
 8005c0e:	f00d fa49 	bl	80130a4 <sprintf>
 8005c12:	e7cd      	b.n	8005bb0 <bridgeCommand+0x40>
 8005c14:	08018718 	.word	0x08018718
 8005c18:	08018788 	.word	0x08018788
 8005c1c:	08018764 	.word	0x08018764

08005c20 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c22:	464e      	mov	r6, r9
 8005c24:	4645      	mov	r5, r8
 8005c26:	46de      	mov	lr, fp
 8005c28:	4680      	mov	r8, r0
 8005c2a:	4657      	mov	r7, sl
	configASSERT(pcWriteBuffer);
 8005c2c:	4643      	mov	r3, r8
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c2e:	b5e0      	push	{r5, r6, r7, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 8005c30:	2600      	movs	r6, #0
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c32:	b083      	sub	sp, #12
 8005c34:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005c36:	9601      	str	r6, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01a      	beq.n	8005c72 <delSnipCommand+0x52>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c3c:	aa01      	add	r2, sp, #4
 8005c3e:	2101      	movs	r1, #1
 8005c40:	f007 fe10 	bl	800d864 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005c44:	f00c fd65 	bl	8012712 <atoi>
 8005c48:	b2c4      	uxtb	r4, r0
	if(!index || index > numOfRecordedSnippets)
 8005c4a:	2c00      	cmp	r4, #0
 8005c4c:	d004      	beq.n	8005c58 <delSnipCommand+0x38>
 8005c4e:	4b2b      	ldr	r3, [pc, #172]	; (8005cfc <delSnipCommand+0xdc>)
 8005c50:	4699      	mov	r9, r3
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	42a3      	cmp	r3, r4
 8005c56:	d20e      	bcs.n	8005c76 <delSnipCommand+0x56>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c58:	2223      	movs	r2, #35	; 0x23
 8005c5a:	4929      	ldr	r1, [pc, #164]	; (8005d00 <delSnipCommand+0xe0>)
 8005c5c:	4640      	mov	r0, r8
 8005c5e:	f00d f81e 	bl	8012c9e <memcpy>
}
 8005c62:	2000      	movs	r0, #0
 8005c64:	b003      	add	sp, #12
 8005c66:	bc3c      	pop	{r2, r3, r4, r5}
 8005c68:	4690      	mov	r8, r2
 8005c6a:	4699      	mov	r9, r3
 8005c6c:	46a2      	mov	sl, r4
 8005c6e:	46ab      	mov	fp, r5
 8005c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8005c72:	b672      	cpsid	i
 8005c74:	e7fe      	b.n	8005c74 <delSnipCommand+0x54>
		snippets[index - 1].cond.conditionType =0;
 8005c76:	2714      	movs	r7, #20
 8005c78:	4a22      	ldr	r2, [pc, #136]	; (8005d04 <delSnipCommand+0xe4>)
 8005c7a:	b2c3      	uxtb	r3, r0
 8005c7c:	4692      	mov	sl, r2
 8005c7e:	469b      	mov	fp, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	437b      	muls	r3, r7
 8005c84:	189d      	adds	r5, r3, r2
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005c86:	3302      	adds	r3, #2
 8005c88:	4453      	add	r3, sl
 8005c8a:	0018      	movs	r0, r3
		snippets[index - 1].cond.conditionType =0;
 8005c8c:	802e      	strh	r6, [r5, #0]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005c8e:	2204      	movs	r2, #4
 8005c90:	2100      	movs	r1, #0
 8005c92:	f00d f80d 	bl	8012cb0 <memset>
		snippets[index - 1].state = false;
 8005c96:	742e      	strb	r6, [r5, #16]
		free(snippets[index - 1].cmd);
 8005c98:	68e8      	ldr	r0, [r5, #12]
 8005c9a:	f00c fdbd 	bl	8012818 <free>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005c9e:	464b      	mov	r3, r9
		snippets[index - 1].cmd = NULL;
 8005ca0:	60ee      	str	r6, [r5, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005ca2:	781e      	ldrb	r6, [r3, #0]
 8005ca4:	42a6      	cmp	r6, r4
 8005ca6:	d91d      	bls.n	8005ce4 <delSnipCommand+0xc4>
 8005ca8:	465d      	mov	r5, fp
 8005caa:	4653      	mov	r3, sl
 8005cac:	3e01      	subs	r6, #1
 8005cae:	1b34      	subs	r4, r6, r4
 8005cb0:	b2e4      	uxtb	r4, r4
 8005cb2:	445c      	add	r4, fp
 8005cb4:	437d      	muls	r5, r7
 8005cb6:	437c      	muls	r4, r7
 8005cb8:	3314      	adds	r3, #20
 8005cba:	4455      	add	r5, sl
 8005cbc:	18e4      	adds	r4, r4, r3
 8005cbe:	e002      	b.n	8005cc6 <delSnipCommand+0xa6>
 8005cc0:	3514      	adds	r5, #20
 8005cc2:	42a5      	cmp	r5, r4
 8005cc4:	d00f      	beq.n	8005ce6 <delSnipCommand+0xc6>
			if(snippets[s].cond.conditionType){
 8005cc6:	782b      	ldrb	r3, [r5, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0f9      	beq.n	8005cc0 <delSnipCommand+0xa0>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005ccc:	0028      	movs	r0, r5
 8005cce:	003a      	movs	r2, r7
 8005cd0:	0029      	movs	r1, r5
 8005cd2:	3814      	subs	r0, #20
 8005cd4:	f00c ffe3 	bl	8012c9e <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005cd8:	003a      	movs	r2, r7
 8005cda:	2100      	movs	r1, #0
 8005cdc:	0028      	movs	r0, r5
 8005cde:	f00c ffe7 	bl	8012cb0 <memset>
 8005ce2:	e7ed      	b.n	8005cc0 <delSnipCommand+0xa0>
 8005ce4:	3e01      	subs	r6, #1
		--numOfRecordedSnippets;
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	701e      	strb	r6, [r3, #0]
		SaveToRO();
 8005cea:	f005 fc07 	bl	800b4fc <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005cee:	2236      	movs	r2, #54	; 0x36
 8005cf0:	4905      	ldr	r1, [pc, #20]	; (8005d08 <delSnipCommand+0xe8>)
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	f00c ffd3 	bl	8012c9e <memcpy>
 8005cf8:	e7b3      	b.n	8005c62 <delSnipCommand+0x42>
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	20001180 	.word	0x20001180
 8005d00:	080187d8 	.word	0x080187d8
 8005d04:	20006ec4 	.word	0x20006ec4
 8005d08:	080187a0 	.word	0x080187a0

08005d0c <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d0c:	b530      	push	{r4, r5, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 8005d0e:	2500      	movs	r5, #0
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d10:	b083      	sub	sp, #12
 8005d12:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8005d14:	9501      	str	r5, [sp, #4]
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d16:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8005d18:	2c00      	cmp	r4, #0
 8005d1a:	d014      	beq.n	8005d46 <pauseSnipCommand+0x3a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d1c:	aa01      	add	r2, sp, #4
 8005d1e:	2101      	movs	r1, #1
 8005d20:	f007 fda0 	bl	800d864 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005d24:	f00c fcf5 	bl	8012712 <atoi>
 8005d28:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <pauseSnipCommand+0x2a>
 8005d2e:	4a0e      	ldr	r2, [pc, #56]	; (8005d68 <pauseSnipCommand+0x5c>)
 8005d30:	7812      	ldrb	r2, [r2, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d209      	bcs.n	8005d4a <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005d36:	2223      	movs	r2, #35	; 0x23
 8005d38:	490c      	ldr	r1, [pc, #48]	; (8005d6c <pauseSnipCommand+0x60>)
 8005d3a:	0020      	movs	r0, r4
 8005d3c:	f00c ffaf 	bl	8012c9e <memcpy>
}
 8005d40:	2000      	movs	r0, #0
 8005d42:	b003      	add	sp, #12
 8005d44:	bd30      	pop	{r4, r5, pc}
	configASSERT(pcWriteBuffer);
 8005d46:	b672      	cpsid	i
 8005d48:	e7fe      	b.n	8005d48 <pauseSnipCommand+0x3c>
		snippets[index - 1].state = false;
 8005d4a:	2314      	movs	r3, #20
 8005d4c:	b2c0      	uxtb	r0, r0
 8005d4e:	3801      	subs	r0, #1
 8005d50:	4343      	muls	r3, r0
 8005d52:	4807      	ldr	r0, [pc, #28]	; (8005d70 <pauseSnipCommand+0x64>)
 8005d54:	18c0      	adds	r0, r0, r3
 8005d56:	7405      	strb	r5, [r0, #16]
		SaveToRO();
 8005d58:	f005 fbd0 	bl	800b4fc <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005d5c:	2235      	movs	r2, #53	; 0x35
 8005d5e:	4905      	ldr	r1, [pc, #20]	; (8005d74 <pauseSnipCommand+0x68>)
 8005d60:	0020      	movs	r0, r4
 8005d62:	f00c ff9c 	bl	8012c9e <memcpy>
 8005d66:	e7eb      	b.n	8005d40 <pauseSnipCommand+0x34>
 8005d68:	20001180 	.word	0x20001180
 8005d6c:	080187d8 	.word	0x080187d8
 8005d70:	20006ec4 	.word	0x20006ec4
 8005d74:	080187fc 	.word	0x080187fc

08005d78 <actSnipCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005d78:	2300      	movs	r3, #0
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d7a:	b510      	push	{r4, lr}
 8005d7c:	b082      	sub	sp, #8
 8005d7e:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8005d80:	9301      	str	r3, [sp, #4]
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d82:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8005d84:	2c00      	cmp	r4, #0
 8005d86:	d014      	beq.n	8005db2 <actSnipCommand+0x3a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d88:	aa01      	add	r2, sp, #4
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	f007 fd6a 	bl	800d864 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005d90:	f00c fcbf 	bl	8012712 <atoi>
 8005d94:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <actSnipCommand+0x2a>
 8005d9a:	4a0f      	ldr	r2, [pc, #60]	; (8005dd8 <actSnipCommand+0x60>)
 8005d9c:	7812      	ldrb	r2, [r2, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d209      	bcs.n	8005db6 <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005da2:	2223      	movs	r2, #35	; 0x23
 8005da4:	490d      	ldr	r1, [pc, #52]	; (8005ddc <actSnipCommand+0x64>)
 8005da6:	0020      	movs	r0, r4
 8005da8:	f00c ff79 	bl	8012c9e <memcpy>
}
 8005dac:	2000      	movs	r0, #0
 8005dae:	b002      	add	sp, #8
 8005db0:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8005db2:	b672      	cpsid	i
 8005db4:	e7fe      	b.n	8005db4 <actSnipCommand+0x3c>
		snippets[index - 1].state = true;
 8005db6:	2314      	movs	r3, #20
 8005db8:	b2c0      	uxtb	r0, r0
 8005dba:	3801      	subs	r0, #1
 8005dbc:	4343      	muls	r3, r0
 8005dbe:	4808      	ldr	r0, [pc, #32]	; (8005de0 <actSnipCommand+0x68>)
 8005dc0:	18c0      	adds	r0, r0, r3
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005dc6:	f005 fb99 	bl	800b4fc <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005dca:	2238      	movs	r2, #56	; 0x38
 8005dcc:	4905      	ldr	r1, [pc, #20]	; (8005de4 <actSnipCommand+0x6c>)
 8005dce:	0020      	movs	r0, r4
 8005dd0:	f00c ff65 	bl	8012c9e <memcpy>
 8005dd4:	e7ea      	b.n	8005dac <actSnipCommand+0x34>
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	20001180 	.word	0x20001180
 8005ddc:	080187d8 	.word	0x080187d8
 8005de0:	20006ec4 	.word	0x20006ec4
 8005de4:	08018834 	.word	0x08018834

08005de8 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dea:	464e      	mov	r6, r9
 8005dec:	4645      	mov	r5, r8
 8005dee:	46de      	mov	lr, fp
 8005df0:	4657      	mov	r7, sl
 8005df2:	b5e0      	push	{r5, r6, r7, lr}
	char status[2][7] ={"Paused", "Active"};
 8005df4:	4b70      	ldr	r3, [pc, #448]	; (8005fb8 <snipCommand+0x1d0>)
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005df6:	b08d      	sub	sp, #52	; 0x34
	char status[2][7] ={"Paused", "Active"};
 8005df8:	4699      	mov	r9, r3
 8005dfa:	aa08      	add	r2, sp, #32
 8005dfc:	3304      	adds	r3, #4
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dfe:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005e00:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005e02:	c223      	stmia	r2!, {r0, r1, r5}
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 8005e08:	2c00      	cmp	r4, #0
 8005e0a:	d100      	bne.n	8005e0e <snipCommand+0x26>
 8005e0c:	e0a2      	b.n	8005f54 <snipCommand+0x16c>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005e0e:	4b6b      	ldr	r3, [pc, #428]	; (8005fbc <snipCommand+0x1d4>)
 8005e10:	2237      	movs	r2, #55	; 0x37
 8005e12:	7818      	ldrb	r0, [r3, #0]
 8005e14:	2301      	movs	r3, #1
 8005e16:	425b      	negs	r3, r3
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	4969      	ldr	r1, [pc, #420]	; (8005fc0 <snipCommand+0x1d8>)
 8005e1c:	3333      	adds	r3, #51	; 0x33
 8005e1e:	f007 fac5 	bl	800d3ac <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005e22:	4b68      	ldr	r3, [pc, #416]	; (8005fc4 <snipCommand+0x1dc>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d041      	beq.n	8005eae <snipCommand+0xc6>
 8005e2a:	2500      	movs	r5, #0
 8005e2c:	4e66      	ldr	r6, [pc, #408]	; (8005fc8 <snipCommand+0x1e0>)
 8005e2e:	4f67      	ldr	r7, [pc, #412]	; (8005fcc <snipCommand+0x1e4>)
 8005e30:	1c6b      	adds	r3, r5, #1
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	469a      	mov	sl, r3
		if(snippets[s].cond.conditionType)
 8005e36:	00ab      	lsls	r3, r5, #2
 8005e38:	9305      	str	r3, [sp, #20]
 8005e3a:	195b      	adds	r3, r3, r5
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4698      	mov	r8, r3
 8005e40:	5cf3      	ldrb	r3, [r6, r3]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d140      	bne.n	8005ec8 <snipCommand+0xe0>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e46:	9b05      	ldr	r3, [sp, #20]
 8005e48:	469c      	mov	ip, r3
 8005e4a:	4465      	add	r5, ip
 8005e4c:	00ad      	lsls	r5, r5, #2
 8005e4e:	1975      	adds	r5, r6, r5
 8005e50:	e00d      	b.n	8005e6e <snipCommand+0x86>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005e52:	0022      	movs	r2, r4
 8005e54:	495e      	ldr	r1, [pc, #376]	; (8005fd0 <snipCommand+0x1e8>)
 8005e56:	003b      	movs	r3, r7
 8005e58:	0020      	movs	r0, r4
 8005e5a:	f00d f923 	bl	80130a4 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005e5e:	0038      	movs	r0, r7
 8005e60:	f7fa f95a 	bl	8000118 <strlen>
 8005e64:	2100      	movs	r1, #0
 8005e66:	0002      	movs	r2, r0
 8005e68:	0038      	movs	r0, r7
 8005e6a:	f00c ff21 	bl	8012cb0 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e6e:	0039      	movs	r1, r7
 8005e70:	68e8      	ldr	r0, [r5, #12]
 8005e72:	f7ff fb2d 	bl	80054d0 <ParseSnippetCommand>
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d1eb      	bne.n	8005e52 <snipCommand+0x6a>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005e7a:	0020      	movs	r0, r4
 8005e7c:	f7fa f94c 	bl	8000118 <strlen>
 8005e80:	0005      	movs	r5, r0
 8005e82:	220c      	movs	r2, #12
 8005e84:	4953      	ldr	r1, [pc, #332]	; (8005fd4 <snipCommand+0x1ec>)
 8005e86:	1820      	adds	r0, r4, r0
 8005e88:	f00c ff09 	bl	8012c9e <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005e8c:	4b4b      	ldr	r3, [pc, #300]	; (8005fbc <snipCommand+0x1d4>)
 8005e8e:	002a      	movs	r2, r5
 8005e90:	7818      	ldrb	r0, [r3, #0]
 8005e92:	2301      	movs	r3, #1
 8005e94:	320b      	adds	r2, #11
 8005e96:	425b      	negs	r3, r3
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	b292      	uxth	r2, r2
 8005e9c:	3333      	adds	r3, #51	; 0x33
 8005e9e:	0021      	movs	r1, r4
 8005ea0:	f007 fa84 	bl	800d3ac <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005ea4:	4b47      	ldr	r3, [pc, #284]	; (8005fc4 <snipCommand+0x1dc>)
 8005ea6:	4655      	mov	r5, sl
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	4553      	cmp	r3, sl
 8005eac:	d8c0      	bhi.n	8005e30 <snipCommand+0x48>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005eae:	22b5      	movs	r2, #181	; 0xb5
 8005eb0:	4949      	ldr	r1, [pc, #292]	; (8005fd8 <snipCommand+0x1f0>)
 8005eb2:	0020      	movs	r0, r4
 8005eb4:	f00c fef3 	bl	8012c9e <memcpy>
}
 8005eb8:	2000      	movs	r0, #0
 8005eba:	b00d      	add	sp, #52	; 0x34
 8005ebc:	bc3c      	pop	{r2, r3, r4, r5}
 8005ebe:	4690      	mov	r8, r2
 8005ec0:	4699      	mov	r9, r3
 8005ec2:	46a2      	mov	sl, r4
 8005ec4:	46ab      	mov	fp, r5
 8005ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005ec8:	46b3      	mov	fp, r6
 8005eca:	44c3      	add	fp, r8
 8005ecc:	465b      	mov	r3, fp
 8005ece:	7c1a      	ldrb	r2, [r3, #16]
 8005ed0:	4942      	ldr	r1, [pc, #264]	; (8005fdc <snipCommand+0x1f4>)
 8005ed2:	00d3      	lsls	r3, r2, #3
 8005ed4:	1a9b      	subs	r3, r3, r2
 8005ed6:	aa08      	add	r2, sp, #32
 8005ed8:	4694      	mov	ip, r2
 8005eda:	0020      	movs	r0, r4
 8005edc:	4463      	add	r3, ip
 8005ede:	4652      	mov	r2, sl
 8005ee0:	f00d f8e0 	bl	80130a4 <sprintf>
		switch(snippets[s].cond.conditionType){
 8005ee4:	4643      	mov	r3, r8
 8005ee6:	5cf3      	ldrb	r3, [r6, r3]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d027      	beq.n	8005f3c <snipCommand+0x154>
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d1aa      	bne.n	8005e46 <snipCommand+0x5e>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	3106      	adds	r1, #6
 8005ef4:	1871      	adds	r1, r6, r1
 8005ef6:	2204      	movs	r2, #4
 8005ef8:	a807      	add	r0, sp, #28
 8005efa:	f00c fed0 	bl	8012c9e <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005efe:	465b      	mov	r3, fp
 8005f00:	78da      	ldrb	r2, [r3, #3]
 8005f02:	9807      	ldr	r0, [sp, #28]
 8005f04:	3a01      	subs	r2, #1
 8005f06:	0053      	lsls	r3, r2, #1
 8005f08:	189b      	adds	r3, r3, r2
 8005f0a:	4a35      	ldr	r2, [pc, #212]	; (8005fe0 <snipCommand+0x1f8>)
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	18d3      	adds	r3, r2, r3
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	4698      	mov	r8, r3
 8005f14:	f7fc fe06 	bl	8002b24 <__aeabi_f2d>
 8005f18:	465b      	mov	r3, fp
 8005f1a:	464a      	mov	r2, r9
 8005f1c:	9002      	str	r0, [sp, #8]
 8005f1e:	9103      	str	r1, [sp, #12]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	3214      	adds	r2, #20
 8005f24:	3b01      	subs	r3, #1
 8005f26:	0059      	lsls	r1, r3, #1
 8005f28:	18cb      	adds	r3, r1, r3
 8005f2a:	18d3      	adds	r3, r2, r3
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	0022      	movs	r2, r4
 8005f30:	4643      	mov	r3, r8
 8005f32:	492c      	ldr	r1, [pc, #176]	; (8005fe4 <snipCommand+0x1fc>)
 8005f34:	0020      	movs	r0, r4
 8005f36:	f00d f8b5 	bl	80130a4 <sprintf>
				break;
 8005f3a:	e784      	b.n	8005e46 <snipCommand+0x5e>
 8005f3c:	465b      	mov	r3, fp
 8005f3e:	68da      	ldr	r2, [r3, #12]
				switch(snippets[s].cond.buffer1[1]){
 8005f40:	78db      	ldrb	r3, [r3, #3]
 8005f42:	3b05      	subs	r3, #5
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b09      	cmp	r3, #9
 8005f48:	d900      	bls.n	8005f4c <snipCommand+0x164>
 8005f4a:	e77c      	b.n	8005e46 <snipCommand+0x5e>
 8005f4c:	4926      	ldr	r1, [pc, #152]	; (8005fe8 <snipCommand+0x200>)
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	58cb      	ldr	r3, [r1, r3]
 8005f52:	469f      	mov	pc, r3
	configASSERT(pcWriteBuffer);
 8005f54:	b672      	cpsid	i
 8005f56:	e7fe      	b.n	8005f56 <snipCommand+0x16e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005f58:	2314      	movs	r3, #20
 8005f5a:	436b      	muls	r3, r5
 8005f5c:	18f3      	adds	r3, r6, r3
 8005f5e:	789b      	ldrb	r3, [r3, #2]
 8005f60:	4922      	ldr	r1, [pc, #136]	; (8005fec <snipCommand+0x204>)
 8005f62:	9200      	str	r2, [sp, #0]
 8005f64:	0020      	movs	r0, r4
 8005f66:	0022      	movs	r2, r4
 8005f68:	f00d f89c 	bl	80130a4 <sprintf>
						break;
 8005f6c:	e76b      	b.n	8005e46 <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005f6e:	2114      	movs	r1, #20
 8005f70:	4369      	muls	r1, r5
 8005f72:	1871      	adds	r1, r6, r1
 8005f74:	788b      	ldrb	r3, [r1, #2]
 8005f76:	9201      	str	r2, [sp, #4]
 8005f78:	790a      	ldrb	r2, [r1, #4]
 8005f7a:	0020      	movs	r0, r4
 8005f7c:	9200      	str	r2, [sp, #0]
 8005f7e:	491c      	ldr	r1, [pc, #112]	; (8005ff0 <snipCommand+0x208>)
 8005f80:	0022      	movs	r2, r4
 8005f82:	f00d f88f 	bl	80130a4 <sprintf>
						break;
 8005f86:	e75e      	b.n	8005e46 <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005f88:	2114      	movs	r1, #20
 8005f8a:	4369      	muls	r1, r5
 8005f8c:	1871      	adds	r1, r6, r1
 8005f8e:	788b      	ldrb	r3, [r1, #2]
 8005f90:	9201      	str	r2, [sp, #4]
 8005f92:	790a      	ldrb	r2, [r1, #4]
 8005f94:	0020      	movs	r0, r4
 8005f96:	9200      	str	r2, [sp, #0]
 8005f98:	4916      	ldr	r1, [pc, #88]	; (8005ff4 <snipCommand+0x20c>)
 8005f9a:	0022      	movs	r2, r4
 8005f9c:	f00d f882 	bl	80130a4 <sprintf>
						break;
 8005fa0:	e751      	b.n	8005e46 <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005fa2:	2314      	movs	r3, #20
 8005fa4:	436b      	muls	r3, r5
 8005fa6:	18f3      	adds	r3, r6, r3
 8005fa8:	789b      	ldrb	r3, [r3, #2]
 8005faa:	4913      	ldr	r1, [pc, #76]	; (8005ff8 <snipCommand+0x210>)
 8005fac:	9200      	str	r2, [sp, #0]
 8005fae:	0020      	movs	r0, r4
 8005fb0:	0022      	movs	r2, r4
 8005fb2:	f00d f877 	bl	80130a4 <sprintf>
						break;
 8005fb6:	e746      	b.n	8005e46 <snipCommand+0x5e>
 8005fb8:	08017814 	.word	0x08017814
 8005fbc:	20000c28 	.word	0x20000c28
 8005fc0:	0801886c 	.word	0x0801886c
 8005fc4:	20001180 	.word	0x20001180
 8005fc8:	20006ec4 	.word	0x20006ec4
 8005fcc:	20001280 	.word	0x20001280
 8005fd0:	08018920 	.word	0x08018920
 8005fd4:	08018928 	.word	0x08018928
 8005fd8:	08018934 	.word	0x08018934
 8005fdc:	080188a4 	.word	0x080188a4
 8005fe0:	20000094 	.word	0x20000094
 8005fe4:	08018910 	.word	0x08018910
 8005fe8:	080175b8 	.word	0x080175b8
 8005fec:	080188b0 	.word	0x080188b0
 8005ff0:	080188f4 	.word	0x080188f4
 8005ff4:	080188dc 	.word	0x080188dc
 8005ff8:	080188c4 	.word	0x080188c4

08005ffc <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ffc:	b510      	push	{r4, lr}
 8005ffe:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006000:	d00c      	beq.n	800601c <idcodeCommand+0x20>
	dev =HAL_GetDEVID();
 8006002:	f009 fab7 	bl	800f574 <HAL_GetDEVID>
	switch(dev){
 8006006:	4a1d      	ldr	r2, [pc, #116]	; (800607c <idcodeCommand+0x80>)
 8006008:	0403      	lsls	r3, r0, #16
 800600a:	4694      	mov	ip, r2
 800600c:	0c1b      	lsrs	r3, r3, #16
 800600e:	4463      	add	r3, ip
 8006010:	2b08      	cmp	r3, #8
 8006012:	d805      	bhi.n	8006020 <idcodeCommand+0x24>
 8006014:	4a1a      	ldr	r2, [pc, #104]	; (8006080 <idcodeCommand+0x84>)
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	58d3      	ldr	r3, [r2, r3]
 800601a:	469f      	mov	pc, r3
	configASSERT(pcWriteBuffer);
 800601c:	b672      	cpsid	i
 800601e:	e7fe      	b.n	800601e <idcodeCommand+0x22>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8006020:	4a18      	ldr	r2, [pc, #96]	; (8006084 <idcodeCommand+0x88>)
 8006022:	4919      	ldr	r1, [pc, #100]	; (8006088 <idcodeCommand+0x8c>)
 8006024:	0020      	movs	r0, r4
 8006026:	f00d f83d 	bl	80130a4 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 800602a:	f009 fa9d 	bl	800f568 <HAL_GetREVID>
 800602e:	0022      	movs	r2, r4
 8006030:	0b03      	lsrs	r3, r0, #12
 8006032:	4916      	ldr	r1, [pc, #88]	; (800608c <idcodeCommand+0x90>)
 8006034:	0020      	movs	r0, r4
 8006036:	f00d f835 	bl	80130a4 <sprintf>
}
 800603a:	2000      	movs	r0, #0
 800603c:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 800603e:	4a14      	ldr	r2, [pc, #80]	; (8006090 <idcodeCommand+0x94>)
 8006040:	4911      	ldr	r1, [pc, #68]	; (8006088 <idcodeCommand+0x8c>)
 8006042:	0020      	movs	r0, r4
 8006044:	f00d f82e 	bl	80130a4 <sprintf>
			break;
 8006048:	e7ef      	b.n	800602a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 800604a:	4a12      	ldr	r2, [pc, #72]	; (8006094 <idcodeCommand+0x98>)
 800604c:	490e      	ldr	r1, [pc, #56]	; (8006088 <idcodeCommand+0x8c>)
 800604e:	0020      	movs	r0, r4
 8006050:	f00d f828 	bl	80130a4 <sprintf>
			break;
 8006054:	e7e9      	b.n	800602a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8006056:	4a10      	ldr	r2, [pc, #64]	; (8006098 <idcodeCommand+0x9c>)
 8006058:	490b      	ldr	r1, [pc, #44]	; (8006088 <idcodeCommand+0x8c>)
 800605a:	0020      	movs	r0, r4
 800605c:	f00d f822 	bl	80130a4 <sprintf>
			break;
 8006060:	e7e3      	b.n	800602a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8006062:	4a0e      	ldr	r2, [pc, #56]	; (800609c <idcodeCommand+0xa0>)
 8006064:	4908      	ldr	r1, [pc, #32]	; (8006088 <idcodeCommand+0x8c>)
 8006066:	0020      	movs	r0, r4
 8006068:	f00d f81c 	bl	80130a4 <sprintf>
			break;
 800606c:	e7dd      	b.n	800602a <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 800606e:	4a0c      	ldr	r2, [pc, #48]	; (80060a0 <idcodeCommand+0xa4>)
 8006070:	4905      	ldr	r1, [pc, #20]	; (8006088 <idcodeCommand+0x8c>)
 8006072:	0020      	movs	r0, r4
 8006074:	f00d f816 	bl	80130a4 <sprintf>
			break;
 8006078:	e7d7      	b.n	800602a <idcodeCommand+0x2e>
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	fffffbc0 	.word	0xfffffbc0
 8006080:	080175e0 	.word	0x080175e0
 8006084:	08018a3c 	.word	0x08018a3c
 8006088:	080189f8 	.word	0x080189f8
 800608c:	08018a44 	.word	0x08018a44
 8006090:	08018a24 	.word	0x08018a24
 8006094:	08018a0c 	.word	0x08018a0c
 8006098:	080189ec 	.word	0x080189ec
 800609c:	08018a30 	.word	0x08018a30
 80060a0:	08018a18 	.word	0x08018a18

080060a4 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060a4:	b510      	push	{r4, lr}
 80060a6:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80060a8:	d101      	bne.n	80060ae <dateCommand+0xa>
 80060aa:	b672      	cpsid	i
 80060ac:	e7fe      	b.n	80060ac <dateCommand+0x8>
	GetTimeDate();
 80060ae:	f006 ff25 	bl	800cefc <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 80060b2:	f7fe fc41 	bl	8004938 <GetDateString>
 80060b6:	4903      	ldr	r1, [pc, #12]	; (80060c4 <dateCommand+0x20>)
 80060b8:	0002      	movs	r2, r0
 80060ba:	0020      	movs	r0, r4
 80060bc:	f00c fff2 	bl	80130a4 <sprintf>
}
 80060c0:	2000      	movs	r0, #0
 80060c2:	bd10      	pop	{r4, pc}
 80060c4:	08018a5c 	.word	0x08018a5c

080060c8 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ca:	46ce      	mov	lr, r9
 80060cc:	4647      	mov	r7, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80060ce:	2300      	movs	r3, #0
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b083      	sub	sp, #12
 80060d4:	0004      	movs	r4, r0
 80060d6:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80060dc:	2800      	cmp	r0, #0
 80060de:	d023      	beq.n	8006128 <getCommand+0x60>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060e0:	466a      	mov	r2, sp
 80060e2:	2101      	movs	r1, #1
 80060e4:	0028      	movs	r0, r5
 80060e6:	f007 fbbd 	bl	800d864 <FreeRTOS_CLIGetParameter>
 80060ea:	4b6c      	ldr	r3, [pc, #432]	; (800629c <getCommand+0x1d4>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060ec:	2204      	movs	r2, #4
 80060ee:	496c      	ldr	r1, [pc, #432]	; (80062a0 <getCommand+0x1d8>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060f0:	0007      	movs	r7, r0
 80060f2:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060f4:	f00d f81a 	bl	801312c <strncmp>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d117      	bne.n	800612c <getCommand+0x64>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80060fc:	9b00      	ldr	r3, [sp, #0]
 80060fe:	1d3e      	adds	r6, r7, #4
 8006100:	1f1d      	subs	r5, r3, #4
 8006102:	002a      	movs	r2, r5
 8006104:	4967      	ldr	r1, [pc, #412]	; (80062a4 <getCommand+0x1dc>)
 8006106:	0030      	movs	r0, r6
 8006108:	f00d f810 	bl	801312c <strncmp>
 800610c:	2800      	cmp	r0, #0
 800610e:	d125      	bne.n	800615c <getCommand+0x94>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8006110:	4b65      	ldr	r3, [pc, #404]	; (80062a8 <getCommand+0x1e0>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b60      	cmp	r3, #96	; 0x60
 8006116:	d01b      	beq.n	8006150 <getCommand+0x88>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8006118:	2b20      	cmp	r3, #32
 800611a:	d12c      	bne.n	8006176 <getCommand+0xae>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 800611c:	4a63      	ldr	r2, [pc, #396]	; (80062ac <getCommand+0x1e4>)
 800611e:	4964      	ldr	r1, [pc, #400]	; (80062b0 <getCommand+0x1e8>)
 8006120:	0020      	movs	r0, r4
 8006122:	f00c ffbf 	bl	80130a4 <sprintf>
 8006126:	e00d      	b.n	8006144 <getCommand+0x7c>
	configASSERT(pcWriteBuffer);
 8006128:	b672      	cpsid	i
 800612a:	e7fe      	b.n	800612a <getCommand+0x62>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 800612c:	2205      	movs	r2, #5
 800612e:	4961      	ldr	r1, [pc, #388]	; (80062b4 <getCommand+0x1ec>)
 8006130:	0038      	movs	r0, r7
 8006132:	f00c fffb 	bl	801312c <strncmp>
 8006136:	2800      	cmp	r0, #0
 8006138:	d025      	beq.n	8006186 <getCommand+0xbe>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800613a:	2213      	movs	r2, #19
 800613c:	495e      	ldr	r1, [pc, #376]	; (80062b8 <getCommand+0x1f0>)
 800613e:	0020      	movs	r0, r4
 8006140:	f00c fdad 	bl	8012c9e <memcpy>
}
 8006144:	2000      	movs	r0, #0
 8006146:	b003      	add	sp, #12
 8006148:	bc0c      	pop	{r2, r3}
 800614a:	4690      	mov	r8, r2
 800614c:	4699      	mov	r9, r3
 800614e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8006150:	4a5a      	ldr	r2, [pc, #360]	; (80062bc <getCommand+0x1f4>)
 8006152:	4957      	ldr	r1, [pc, #348]	; (80062b0 <getCommand+0x1e8>)
 8006154:	0020      	movs	r0, r4
 8006156:	f00c ffa5 	bl	80130a4 <sprintf>
 800615a:	e7f3      	b.n	8006144 <getCommand+0x7c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800615c:	002a      	movs	r2, r5
 800615e:	4958      	ldr	r1, [pc, #352]	; (80062c0 <getCommand+0x1f8>)
 8006160:	0030      	movs	r0, r6
 8006162:	f00c ffe3 	bl	801312c <strncmp>
 8006166:	2800      	cmp	r0, #0
 8006168:	d14a      	bne.n	8006200 <getCommand+0x138>
			if(BOSMessaging.trace == TRACE_BOTH)
 800616a:	4b4f      	ldr	r3, [pc, #316]	; (80062a8 <getCommand+0x1e0>)
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b03      	cmp	r3, #3
 8006170:	d0ee      	beq.n	8006150 <getCommand+0x88>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8006172:	2b01      	cmp	r3, #1
 8006174:	d0d2      	beq.n	800611c <getCommand+0x54>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8006176:	2b00      	cmp	r3, #0
 8006178:	d03c      	beq.n	80061f4 <getCommand+0x12c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 800617a:	003a      	movs	r2, r7
 800617c:	4951      	ldr	r1, [pc, #324]	; (80062c4 <getCommand+0x1fc>)
 800617e:	0020      	movs	r0, r4
 8006180:	f00c ff90 	bl	80130a4 <sprintf>
 8006184:	e7de      	b.n	8006144 <getCommand+0x7c>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006186:	0028      	movs	r0, r5
 8006188:	aa01      	add	r2, sp, #4
 800618a:	2102      	movs	r1, #2
 800618c:	f007 fb6a 	bl	800d864 <FreeRTOS_CLIGetParameter>
 8006190:	2600      	movs	r6, #0
 8006192:	0005      	movs	r5, r0
 8006194:	4f4c      	ldr	r7, [pc, #304]	; (80062c8 <getCommand+0x200>)
 8006196:	e003      	b.n	80061a0 <getCommand+0xd8>
 8006198:	3601      	adds	r6, #1
 800619a:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 800619c:	2e0a      	cmp	r6, #10
 800619e:	d05a      	beq.n	8006256 <getCommand+0x18e>
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 80061a0:	0039      	movs	r1, r7
 80061a2:	0028      	movs	r0, r5
 80061a4:	f7f9 ffae 	bl	8000104 <strcmp>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d1f5      	bne.n	8006198 <getCommand+0xd0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 80061ac:	002a      	movs	r2, r5
 80061ae:	4947      	ldr	r1, [pc, #284]	; (80062cc <getCommand+0x204>)
 80061b0:	0020      	movs	r0, r4
 80061b2:	f00c ff77 	bl	80130a4 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 80061b6:	4f46      	ldr	r7, [pc, #280]	; (80062d0 <getCommand+0x208>)
 80061b8:	783b      	ldrb	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0c2      	beq.n	8006144 <getCommand+0x7c>
 80061be:	2501      	movs	r5, #1
 80061c0:	002b      	movs	r3, r5
 80061c2:	40b3      	lsls	r3, r6
 80061c4:	4698      	mov	r8, r3
 80061c6:	4b43      	ldr	r3, [pc, #268]	; (80062d4 <getCommand+0x20c>)
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80061c8:	4e43      	ldr	r6, [pc, #268]	; (80062d8 <getCommand+0x210>)
 80061ca:	4699      	mov	r9, r3
 80061cc:	e004      	b.n	80061d8 <getCommand+0x110>
			for(j =1; j <= N; j++)						// N modules
 80061ce:	3501      	adds	r5, #1
 80061d0:	783b      	ldrb	r3, [r7, #0]
 80061d2:	b2ed      	uxtb	r5, r5
 80061d4:	42ab      	cmp	r3, r5
 80061d6:	d3b5      	bcc.n	8006144 <getCommand+0x7c>
				if(InGroup(j,i)){
 80061d8:	464a      	mov	r2, r9
 80061da:	1e6b      	subs	r3, r5, #1
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	5ad3      	ldrh	r3, [r2, r3]
 80061e0:	4642      	mov	r2, r8
 80061e2:	421a      	tst	r2, r3
 80061e4:	d0f3      	beq.n	80061ce <getCommand+0x106>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80061e6:	002b      	movs	r3, r5
 80061e8:	0022      	movs	r2, r4
 80061ea:	0031      	movs	r1, r6
 80061ec:	0020      	movs	r0, r4
 80061ee:	f00c ff59 	bl	80130a4 <sprintf>
 80061f2:	e7ec      	b.n	80061ce <getCommand+0x106>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 80061f4:	4a39      	ldr	r2, [pc, #228]	; (80062dc <getCommand+0x214>)
 80061f6:	492e      	ldr	r1, [pc, #184]	; (80062b0 <getCommand+0x1e8>)
 80061f8:	0020      	movs	r0, r4
 80061fa:	f00c ff53 	bl	80130a4 <sprintf>
 80061fe:	e7a1      	b.n	8006144 <getCommand+0x7c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006200:	002a      	movs	r2, r5
 8006202:	4937      	ldr	r1, [pc, #220]	; (80062e0 <getCommand+0x218>)
 8006204:	0030      	movs	r0, r6
 8006206:	f00c ff91 	bl	801312c <strncmp>
 800620a:	2800      	cmp	r0, #0
 800620c:	d037      	beq.n	800627e <getCommand+0x1b6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800620e:	002a      	movs	r2, r5
 8006210:	4934      	ldr	r1, [pc, #208]	; (80062e4 <getCommand+0x21c>)
 8006212:	0030      	movs	r0, r6
 8006214:	f00c ff8a 	bl	801312c <strncmp>
 8006218:	2800      	cmp	r0, #0
 800621a:	d029      	beq.n	8006270 <getCommand+0x1a8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 800621c:	002a      	movs	r2, r5
 800621e:	4932      	ldr	r1, [pc, #200]	; (80062e8 <getCommand+0x220>)
 8006220:	0030      	movs	r0, r6
 8006222:	f00c ff83 	bl	801312c <strncmp>
 8006226:	2800      	cmp	r0, #0
 8006228:	d030      	beq.n	800628c <getCommand+0x1c4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 800622a:	002a      	movs	r2, r5
 800622c:	492f      	ldr	r1, [pc, #188]	; (80062ec <getCommand+0x224>)
 800622e:	0030      	movs	r0, r6
 8006230:	f00c ff7c 	bl	801312c <strncmp>
 8006234:	2800      	cmp	r0, #0
 8006236:	d014      	beq.n	8006262 <getCommand+0x19a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006238:	002a      	movs	r2, r5
 800623a:	492d      	ldr	r1, [pc, #180]	; (80062f0 <getCommand+0x228>)
 800623c:	0030      	movs	r0, r6
 800623e:	f00c ff75 	bl	801312c <strncmp>
 8006242:	2800      	cmp	r0, #0
 8006244:	d000      	beq.n	8006248 <getCommand+0x180>
 8006246:	e778      	b.n	800613a <getCommand+0x72>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8006248:	4b2a      	ldr	r3, [pc, #168]	; (80062f4 <getCommand+0x22c>)
 800624a:	492b      	ldr	r1, [pc, #172]	; (80062f8 <getCommand+0x230>)
 800624c:	795a      	ldrb	r2, [r3, #5]
 800624e:	0020      	movs	r0, r4
 8006250:	f00c ff28 	bl	80130a4 <sprintf>
 8006254:	e776      	b.n	8006144 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8006256:	002a      	movs	r2, r5
 8006258:	4928      	ldr	r1, [pc, #160]	; (80062fc <getCommand+0x234>)
 800625a:	0020      	movs	r0, r4
 800625c:	f00c ff22 	bl	80130a4 <sprintf>
			return pdFALSE;
 8006260:	e770      	b.n	8006144 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8006262:	4b24      	ldr	r3, [pc, #144]	; (80062f4 <getCommand+0x22c>)
 8006264:	4924      	ldr	r1, [pc, #144]	; (80062f8 <getCommand+0x230>)
 8006266:	791a      	ldrb	r2, [r3, #4]
 8006268:	0020      	movs	r0, r4
 800626a:	f00c ff1b 	bl	80130a4 <sprintf>
 800626e:	e769      	b.n	8006144 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8006270:	4b20      	ldr	r3, [pc, #128]	; (80062f4 <getCommand+0x22c>)
 8006272:	4921      	ldr	r1, [pc, #132]	; (80062f8 <getCommand+0x230>)
 8006274:	881a      	ldrh	r2, [r3, #0]
 8006276:	0020      	movs	r0, r4
 8006278:	f00c ff14 	bl	80130a4 <sprintf>
 800627c:	e762      	b.n	8006144 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 800627e:	4b1d      	ldr	r3, [pc, #116]	; (80062f4 <getCommand+0x22c>)
 8006280:	491d      	ldr	r1, [pc, #116]	; (80062f8 <getCommand+0x230>)
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	0020      	movs	r0, r4
 8006286:	f00c ff0d 	bl	80130a4 <sprintf>
 800628a:	e75b      	b.n	8006144 <getCommand+0x7c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 800628c:	4b19      	ldr	r3, [pc, #100]	; (80062f4 <getCommand+0x22c>)
 800628e:	491a      	ldr	r1, [pc, #104]	; (80062f8 <getCommand+0x230>)
 8006290:	885a      	ldrh	r2, [r3, #2]
 8006292:	0020      	movs	r0, r4
 8006294:	f00c ff06 	bl	80130a4 <sprintf>
 8006298:	e754      	b.n	8006144 <getCommand+0x7c>
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	20001280 	.word	0x20001280
 80062a0:	08018a74 	.word	0x08018a74
 80062a4:	08018a7c 	.word	0x08018a7c
 80062a8:	20006e28 	.word	0x20006e28
 80062ac:	08018a88 	.word	0x08018a88
 80062b0:	08017d38 	.word	0x08017d38
 80062b4:	08018aec 	.word	0x08018aec
 80062b8:	08018afc 	.word	0x08018afc
 80062bc:	08017e5c 	.word	0x08017e5c
 80062c0:	08018a94 	.word	0x08018a94
 80062c4:	08018b10 	.word	0x08018b10
 80062c8:	20000ad0 	.word	0x20000ad0
 80062cc:	08018b4c 	.word	0x08018b4c
 80062d0:	20000008 	.word	0x20000008
 80062d4:	20000a9c 	.word	0x20000a9c
 80062d8:	08018af4 	.word	0x08018af4
 80062dc:	08018a8c 	.word	0x08018a8c
 80062e0:	08018a9c 	.word	0x08018a9c
 80062e4:	08018aa8 	.word	0x08018aa8
 80062e8:	08018ab4 	.word	0x08018ab4
 80062ec:	08018ac4 	.word	0x08018ac4
 80062f0:	08018ad8 	.word	0x08018ad8
 80062f4:	20006ea8 	.word	0x20006ea8
 80062f8:	08018240 	.word	0x08018240
 80062fc:	08018b30 	.word	0x08018b30

08006300 <defaultCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006300:	2300      	movs	r3, #0
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006302:	b570      	push	{r4, r5, r6, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	0004      	movs	r4, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8006308:	9301      	str	r3, [sp, #4]
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800630a:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 800630c:	2c00      	cmp	r4, #0
 800630e:	d02c      	beq.n	800636a <defaultCommand+0x6a>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006310:	aa01      	add	r2, sp, #4
 8006312:	2101      	movs	r1, #1
 8006314:	f007 faa6 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006318:	9e01      	ldr	r6, [sp, #4]
 800631a:	4920      	ldr	r1, [pc, #128]	; (800639c <defaultCommand+0x9c>)
 800631c:	0032      	movs	r2, r6
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800631e:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006320:	f00c ff04 	bl	801312c <strncmp>
 8006324:	2800      	cmp	r0, #0
 8006326:	d022      	beq.n	800636e <defaultCommand+0x6e>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006328:	0032      	movs	r2, r6
 800632a:	491d      	ldr	r1, [pc, #116]	; (80063a0 <defaultCommand+0xa0>)
 800632c:	0028      	movs	r0, r5
 800632e:	f00c fefd 	bl	801312c <strncmp>
 8006332:	2800      	cmp	r0, #0
 8006334:	d12c      	bne.n	8006390 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006336:	2116      	movs	r1, #22
 8006338:	2200      	movs	r2, #0
 800633a:	20ff      	movs	r0, #255	; 0xff
 800633c:	f003 fbac 	bl	8009a98 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8006340:	2202      	movs	r2, #2
 8006342:	4b18      	ldr	r3, [pc, #96]	; (80063a4 <defaultCommand+0xa4>)
		osDelay(100);
 8006344:	2064      	movs	r0, #100	; 0x64
		indMode =IND_TOPOLOGY;
 8006346:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006348:	f007 f97c 	bl	800d644 <osDelay>
		ClearEEportsDir();
 800634c:	f7fd f954 	bl	80035f8 <ClearEEportsDir>
		ClearROtopology();
 8006350:	f005 f9cc 	bl	800b6ec <ClearROtopology>
		osDelay(100);
 8006354:	2064      	movs	r0, #100	; 0x64
 8006356:	f007 f975 	bl	800d644 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 800635a:	2240      	movs	r2, #64	; 0x40
 800635c:	4912      	ldr	r1, [pc, #72]	; (80063a8 <defaultCommand+0xa8>)
 800635e:	0020      	movs	r0, r4
 8006360:	f00c fc9d 	bl	8012c9e <memcpy>
}
 8006364:	2000      	movs	r0, #0
 8006366:	b002      	add	sp, #8
 8006368:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 800636a:	b672      	cpsid	i
 800636c:	e7fe      	b.n	800636c <defaultCommand+0x6c>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 800636e:	490f      	ldr	r1, [pc, #60]	; (80063ac <defaultCommand+0xac>)
 8006370:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <defaultCommand+0xb0>)
 8006372:	000a      	movs	r2, r1
 8006374:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006376:	c223      	stmia	r2!, {r0, r1, r5}
 8006378:	cb23      	ldmia	r3!, {r0, r1, r5}
 800637a:	c223      	stmia	r2!, {r0, r1, r5}
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006380:	f7fd f8f6 	bl	8003570 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006384:	2227      	movs	r2, #39	; 0x27
 8006386:	490b      	ldr	r1, [pc, #44]	; (80063b4 <defaultCommand+0xb4>)
 8006388:	0020      	movs	r0, r4
 800638a:	f00c fc88 	bl	8012c9e <memcpy>
 800638e:	e7e9      	b.n	8006364 <defaultCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006390:	220f      	movs	r2, #15
 8006392:	4909      	ldr	r1, [pc, #36]	; (80063b8 <defaultCommand+0xb8>)
 8006394:	0020      	movs	r0, r4
 8006396:	f00c fc82 	bl	8012c9e <memcpy>
 800639a:	e7e3      	b.n	8006364 <defaultCommand+0x64>
 800639c:	08018b60 	.word	0x08018b60
 80063a0:	08018b90 	.word	0x08018b90
 80063a4:	2000117e 	.word	0x2000117e
 80063a8:	08018ba8 	.word	0x08018ba8
 80063ac:	20006ea8 	.word	0x20006ea8
 80063b0:	20000014 	.word	0x20000014
 80063b4:	08018b68 	.word	0x08018b68
 80063b8:	08018b98 	.word	0x08018b98

080063bc <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80063bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063be:	4657      	mov	r7, sl
 80063c0:	46de      	mov	lr, fp
 80063c2:	464e      	mov	r6, r9
 80063c4:	4645      	mov	r5, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80063c6:	2300      	movs	r3, #0
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80063c8:	b5e0      	push	{r5, r6, r7, lr}
 80063ca:	b08f      	sub	sp, #60	; 0x3c
 80063cc:	0007      	movs	r7, r0
 80063ce:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80063d0:	9309      	str	r3, [sp, #36]	; 0x24
 80063d2:	930a      	str	r3, [sp, #40]	; 0x28
 80063d4:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80063d6:	930c      	str	r3, [sp, #48]	; 0x30
 80063d8:	930d      	str	r3, [sp, #52]	; 0x34
	configASSERT(pcWriteBuffer);
 80063da:	2800      	cmp	r0, #0
 80063dc:	d029      	beq.n	8006432 <setCommand+0x76>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80063de:	aa09      	add	r2, sp, #36	; 0x24
 80063e0:	2101      	movs	r1, #1
 80063e2:	0020      	movs	r0, r4
 80063e4:	f007 fa3e 	bl	800d864 <FreeRTOS_CLIGetParameter>
 80063e8:	4dbf      	ldr	r5, [pc, #764]	; (80066e8 <setCommand+0x32c>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80063ea:	2204      	movs	r2, #4
 80063ec:	49bf      	ldr	r1, [pc, #764]	; (80066ec <setCommand+0x330>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80063ee:	4681      	mov	r9, r0
 80063f0:	63a8      	str	r0, [r5, #56]	; 0x38
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80063f2:	f00c fe9b 	bl	801312c <strncmp>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d01d      	beq.n	8006436 <setCommand+0x7a>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 80063fa:	2204      	movs	r2, #4
 80063fc:	49bc      	ldr	r1, [pc, #752]	; (80066f0 <setCommand+0x334>)
 80063fe:	4648      	mov	r0, r9
 8006400:	f00c fe94 	bl	801312c <strncmp>
 8006404:	2800      	cmp	r0, #0
 8006406:	d100      	bne.n	800640a <setCommand+0x4e>
 8006408:	e0ed      	b.n	80065e6 <setCommand+0x22a>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 800640a:	2204      	movs	r2, #4
 800640c:	49b9      	ldr	r1, [pc, #740]	; (80066f4 <setCommand+0x338>)
 800640e:	4648      	mov	r0, r9
 8006410:	f00c fe8c 	bl	801312c <strncmp>
 8006414:	2800      	cmp	r0, #0
 8006416:	d04b      	beq.n	80064b0 <setCommand+0xf4>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006418:	2213      	movs	r2, #19
 800641a:	49b7      	ldr	r1, [pc, #732]	; (80066f8 <setCommand+0x33c>)
 800641c:	0038      	movs	r0, r7
 800641e:	f00c fc3e 	bl	8012c9e <memcpy>
}
 8006422:	2000      	movs	r0, #0
 8006424:	b00f      	add	sp, #60	; 0x3c
 8006426:	bc3c      	pop	{r2, r3, r4, r5}
 8006428:	4690      	mov	r8, r2
 800642a:	4699      	mov	r9, r3
 800642c:	46a2      	mov	sl, r4
 800642e:	46ab      	mov	fp, r5
 8006430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006432:	b672      	cpsid	i
 8006434:	e7fe      	b.n	8006434 <setCommand+0x78>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006436:	aa0a      	add	r2, sp, #40	; 0x28
 8006438:	2102      	movs	r1, #2
 800643a:	0020      	movs	r0, r4
 800643c:	f007 fa12 	bl	800d864 <FreeRTOS_CLIGetParameter>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006440:	6bab      	ldr	r3, [r5, #56]	; 0x38
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006442:	0004      	movs	r4, r0
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006444:	1d1e      	adds	r6, r3, #4
 8006446:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006448:	63e8      	str	r0, [r5, #60]	; 0x3c
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800644a:	3b04      	subs	r3, #4
 800644c:	4698      	mov	r8, r3
 800644e:	4bab      	ldr	r3, [pc, #684]	; (80066fc <setCommand+0x340>)
 8006450:	4642      	mov	r2, r8
 8006452:	0019      	movs	r1, r3
 8006454:	0030      	movs	r0, r6
 8006456:	4699      	mov	r9, r3
 8006458:	f00c fe68 	bl	801312c <strncmp>
 800645c:	2800      	cmp	r0, #0
 800645e:	d000      	beq.n	8006462 <setCommand+0xa6>
 8006460:	e269      	b.n	8006936 <setCommand+0x57a>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006462:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006464:	49a6      	ldr	r1, [pc, #664]	; (8006700 <setCommand+0x344>)
 8006466:	0032      	movs	r2, r6
 8006468:	0020      	movs	r0, r4
 800646a:	f00c fe5f 	bl	801312c <strncmp>
 800646e:	2800      	cmp	r0, #0
 8006470:	d100      	bne.n	8006474 <setCommand+0xb8>
 8006472:	e25d      	b.n	8006930 <setCommand+0x574>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006474:	0032      	movs	r2, r6
 8006476:	49a3      	ldr	r1, [pc, #652]	; (8006704 <setCommand+0x348>)
 8006478:	0020      	movs	r0, r4
 800647a:	f00c fe57 	bl	801312c <strncmp>
 800647e:	2800      	cmp	r0, #0
 8006480:	d100      	bne.n	8006484 <setCommand+0xc8>
 8006482:	e252      	b.n	800692a <setCommand+0x56e>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006484:	0032      	movs	r2, r6
 8006486:	49a0      	ldr	r1, [pc, #640]	; (8006708 <setCommand+0x34c>)
 8006488:	0020      	movs	r0, r4
 800648a:	f00c fe4f 	bl	801312c <strncmp>
 800648e:	2800      	cmp	r0, #0
 8006490:	d100      	bne.n	8006494 <setCommand+0xd8>
 8006492:	e23f      	b.n	8006914 <setCommand+0x558>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006494:	0032      	movs	r2, r6
 8006496:	499d      	ldr	r1, [pc, #628]	; (800670c <setCommand+0x350>)
 8006498:	0020      	movs	r0, r4
 800649a:	f00c fe47 	bl	801312c <strncmp>
 800649e:	2800      	cmp	r0, #0
 80064a0:	d100      	bne.n	80064a4 <setCommand+0xe8>
 80064a2:	e0fd      	b.n	80066a0 <setCommand+0x2e4>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80064a4:	220f      	movs	r2, #15
 80064a6:	499a      	ldr	r1, [pc, #616]	; (8006710 <setCommand+0x354>)
 80064a8:	0038      	movs	r0, r7
 80064aa:	f00c fbf8 	bl	8012c9e <memcpy>
 80064ae:	e7b8      	b.n	8006422 <setCommand+0x66>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80064b0:	aa0a      	add	r2, sp, #40	; 0x28
 80064b2:	2102      	movs	r1, #2
 80064b4:	0020      	movs	r0, r4
 80064b6:	f007 f9d5 	bl	800d864 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80064ba:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80064bc:	63e8      	str	r0, [r5, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80064be:	2103      	movs	r1, #3
 80064c0:	0020      	movs	r0, r4
 80064c2:	f007 f9cf 	bl	800d864 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80064c6:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80064c8:	6428      	str	r0, [r5, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80064ca:	2104      	movs	r1, #4
 80064cc:	0020      	movs	r0, r4
 80064ce:	f007 f9c9 	bl	800d864 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80064d2:	aa0d      	add	r2, sp, #52	; 0x34
 80064d4:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80064d6:	6468      	str	r0, [r5, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80064d8:	0020      	movs	r0, r4
 80064da:	f007 f9c3 	bl	800d864 <FreeRTOS_CLIGetParameter>
 80064de:	64a8      	str	r0, [r5, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 80064e0:	6c68      	ldr	r0, [r5, #68]	; 0x44
 80064e2:	f00c f916 	bl	8012712 <atoi>
 80064e6:	b2c3      	uxtb	r3, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 80064e8:	6ca8      	ldr	r0, [r5, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 80064ea:	469b      	mov	fp, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 80064ec:	f00c f911 	bl	8012712 <atoi>
 80064f0:	b283      	uxth	r3, r0
 80064f2:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 80064f4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80064f6:	2206      	movs	r2, #6
 80064f8:	4986      	ldr	r1, [pc, #536]	; (8006714 <setCommand+0x358>)
 80064fa:	0018      	movs	r0, r3
 80064fc:	4698      	mov	r8, r3
 80064fe:	f00c fe15 	bl	801312c <strncmp>
 8006502:	2800      	cmp	r0, #0
 8006504:	d100      	bne.n	8006508 <setCommand+0x14c>
 8006506:	e201      	b.n	800690c <setCommand+0x550>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006508:	2207      	movs	r2, #7
 800650a:	4983      	ldr	r1, [pc, #524]	; (8006718 <setCommand+0x35c>)
 800650c:	4640      	mov	r0, r8
 800650e:	f00c fe0d 	bl	801312c <strncmp>
 8006512:	4b82      	ldr	r3, [pc, #520]	; (800671c <setCommand+0x360>)
 8006514:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8006516:	9006      	str	r0, [sp, #24]
 8006518:	0019      	movs	r1, r3
 800651a:	2207      	movs	r2, #7
 800651c:	0020      	movs	r0, r4
 800651e:	469a      	mov	sl, r3
 8006520:	f00c fe04 	bl	801312c <strncmp>
 8006524:	9b06      	ldr	r3, [sp, #24]
 8006526:	9007      	str	r0, [sp, #28]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d100      	bne.n	800652e <setCommand+0x172>
 800652c:	e1ec      	b.n	8006908 <setCommand+0x54c>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 800652e:	2209      	movs	r2, #9
 8006530:	497b      	ldr	r1, [pc, #492]	; (8006720 <setCommand+0x364>)
 8006532:	4640      	mov	r0, r8
 8006534:	f00c fdfa 	bl	801312c <strncmp>
 8006538:	2800      	cmp	r0, #0
 800653a:	d100      	bne.n	800653e <setCommand+0x182>
 800653c:	e1e2      	b.n	8006904 <setCommand+0x548>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 800653e:	2208      	movs	r2, #8
 8006540:	4978      	ldr	r1, [pc, #480]	; (8006724 <setCommand+0x368>)
 8006542:	4640      	mov	r0, r8
 8006544:	f00c fdf2 	bl	801312c <strncmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	d100      	bne.n	800654e <setCommand+0x192>
 800654c:	e1d8      	b.n	8006900 <setCommand+0x544>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 800654e:	2206      	movs	r2, #6
 8006550:	4975      	ldr	r1, [pc, #468]	; (8006728 <setCommand+0x36c>)
 8006552:	4640      	mov	r0, r8
 8006554:	f00c fdea 	bl	801312c <strncmp>
 8006558:	2800      	cmp	r0, #0
 800655a:	d100      	bne.n	800655e <setCommand+0x1a2>
 800655c:	e1ce      	b.n	80068fc <setCommand+0x540>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 800655e:	2208      	movs	r2, #8
 8006560:	4972      	ldr	r1, [pc, #456]	; (800672c <setCommand+0x370>)
 8006562:	4640      	mov	r0, r8
 8006564:	f00c fde2 	bl	801312c <strncmp>
 8006568:	2800      	cmp	r0, #0
 800656a:	d100      	bne.n	800656e <setCommand+0x1b2>
 800656c:	e1c4      	b.n	80068f8 <setCommand+0x53c>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 800656e:	2206      	movs	r2, #6
 8006570:	496f      	ldr	r1, [pc, #444]	; (8006730 <setCommand+0x374>)
 8006572:	4640      	mov	r0, r8
 8006574:	f00c fdda 	bl	801312c <strncmp>
 8006578:	2800      	cmp	r0, #0
 800657a:	d000      	beq.n	800657e <setCommand+0x1c2>
 800657c:	e0ea      	b.n	8006754 <setCommand+0x398>
			temp81 =SUNDAY;
 800657e:	2607      	movs	r6, #7
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006580:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8006582:	2207      	movs	r2, #7
 8006584:	4651      	mov	r1, sl
 8006586:	0020      	movs	r0, r4
 8006588:	f00c fdd0 	bl	801312c <strncmp>
 800658c:	2800      	cmp	r0, #0
 800658e:	d000      	beq.n	8006592 <setCommand+0x1d6>
 8006590:	e098      	b.n	80066c4 <setCommand+0x308>
			temp82 =JANUARY;
 8006592:	2401      	movs	r4, #1
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006594:	465b      	mov	r3, fp
 8006596:	3b01      	subs	r3, #1
 8006598:	2b1e      	cmp	r3, #30
 800659a:	d883      	bhi.n	80064a4 <setCommand+0xe8>
 800659c:	4b65      	ldr	r3, [pc, #404]	; (8006734 <setCommand+0x378>)
 800659e:	444b      	add	r3, r9
 80065a0:	2b64      	cmp	r3, #100	; 0x64
 80065a2:	d900      	bls.n	80065a6 <setCommand+0x1ea>
 80065a4:	e77e      	b.n	80064a4 <setCommand+0xe8>
				GetTimeDate();
 80065a6:	f006 fca9 	bl	800cefc <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 80065aa:	220c      	movs	r2, #12
 80065ac:	4b62      	ldr	r3, [pc, #392]	; (8006738 <setCommand+0x37c>)
 80065ae:	4659      	mov	r1, fp
 80065b0:	569a      	ldrsb	r2, [r3, r2]
 80065b2:	0020      	movs	r0, r4
 80065b4:	9204      	str	r2, [sp, #16]
 80065b6:	7cda      	ldrb	r2, [r3, #19]
 80065b8:	9203      	str	r2, [sp, #12]
 80065ba:	7c9a      	ldrb	r2, [r3, #18]
 80065bc:	9202      	str	r2, [sp, #8]
 80065be:	7c5a      	ldrb	r2, [r3, #17]
 80065c0:	9201      	str	r2, [sp, #4]
 80065c2:	7c1b      	ldrb	r3, [r3, #16]
 80065c4:	464a      	mov	r2, r9
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	0033      	movs	r3, r6
 80065ca:	f006 fc3d 	bl	800ce48 <BOS_CalendarConfig>
 80065ce:	4680      	mov	r8, r0
	if(result == BOS_OK){
 80065d0:	4643      	mov	r3, r8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d06c      	beq.n	80066b0 <setCommand+0x2f4>
	else if(result == BOS_ERR_WrongParam)
 80065d6:	4643      	mov	r3, r8
 80065d8:	2b67      	cmp	r3, #103	; 0x67
 80065da:	d100      	bne.n	80065de <setCommand+0x222>
 80065dc:	e71c      	b.n	8006418 <setCommand+0x5c>
	else if(result == BOS_ERR_WrongValue)
 80065de:	2b68      	cmp	r3, #104	; 0x68
 80065e0:	d000      	beq.n	80065e4 <setCommand+0x228>
 80065e2:	e71e      	b.n	8006422 <setCommand+0x66>
 80065e4:	e75e      	b.n	80064a4 <setCommand+0xe8>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80065e6:	aa0a      	add	r2, sp, #40	; 0x28
 80065e8:	2102      	movs	r1, #2
 80065ea:	0020      	movs	r0, r4
 80065ec:	f007 f93a 	bl	800d864 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80065f0:	aa0b      	add	r2, sp, #44	; 0x2c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80065f2:	63e8      	str	r0, [r5, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80065f4:	2103      	movs	r1, #3
 80065f6:	0020      	movs	r0, r4
 80065f8:	f007 f934 	bl	800d864 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80065fc:	aa0c      	add	r2, sp, #48	; 0x30
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80065fe:	6428      	str	r0, [r5, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006600:	2104      	movs	r1, #4
 8006602:	0020      	movs	r0, r4
 8006604:	f007 f92e 	bl	800d864 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006608:	aa0d      	add	r2, sp, #52	; 0x34
 800660a:	2105      	movs	r1, #5
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800660c:	6468      	str	r0, [r5, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800660e:	0020      	movs	r0, r4
 8006610:	f007 f928 	bl	800d864 <FreeRTOS_CLIGetParameter>
 8006614:	64a8      	str	r0, [r5, #72]	; 0x48
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006616:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8006618:	f00c f87b 	bl	8012712 <atoi>
 800661c:	b2c6      	uxtb	r6, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800661e:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8006620:	f00c f877 	bl	8012712 <atoi>
 8006624:	b2c3      	uxtb	r3, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006626:	6c68      	ldr	r0, [r5, #68]	; 0x44
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006628:	4699      	mov	r9, r3
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800662a:	f00c f872 	bl	8012712 <atoi>
		if(pcParameterString5 != NULL){
 800662e:	6cac      	ldr	r4, [r5, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006630:	b2c3      	uxtb	r3, r0
 8006632:	469a      	mov	sl, r3
		if(pcParameterString5 != NULL){
 8006634:	2c00      	cmp	r4, #0
 8006636:	d010      	beq.n	800665a <setCommand+0x29e>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006638:	2202      	movs	r2, #2
 800663a:	4940      	ldr	r1, [pc, #256]	; (800673c <setCommand+0x380>)
 800663c:	0020      	movs	r0, r4
 800663e:	f00c fd75 	bl	801312c <strncmp>
 8006642:	2800      	cmp	r0, #0
 8006644:	d029      	beq.n	800669a <setCommand+0x2de>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006646:	2202      	movs	r2, #2
 8006648:	493d      	ldr	r1, [pc, #244]	; (8006740 <setCommand+0x384>)
 800664a:	0020      	movs	r0, r4
 800664c:	f00c fd6e 	bl	801312c <strncmp>
 8006650:	2800      	cmp	r0, #0
 8006652:	d000      	beq.n	8006656 <setCommand+0x29a>
 8006654:	e726      	b.n	80064a4 <setCommand+0xe8>
				temp84 =RTC_PM;
 8006656:	2302      	movs	r3, #2
 8006658:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 800665a:	2e17      	cmp	r6, #23
 800665c:	d900      	bls.n	8006660 <setCommand+0x2a4>
 800665e:	e721      	b.n	80064a4 <setCommand+0xe8>
 8006660:	464b      	mov	r3, r9
 8006662:	2b3b      	cmp	r3, #59	; 0x3b
 8006664:	d900      	bls.n	8006668 <setCommand+0x2ac>
 8006666:	e71d      	b.n	80064a4 <setCommand+0xe8>
 8006668:	4653      	mov	r3, sl
 800666a:	2b3b      	cmp	r3, #59	; 0x3b
 800666c:	d900      	bls.n	8006670 <setCommand+0x2b4>
 800666e:	e719      	b.n	80064a4 <setCommand+0xe8>
				GetTimeDate();
 8006670:	f006 fc44 	bl	800cefc <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006674:	4c30      	ldr	r4, [pc, #192]	; (8006738 <setCommand+0x37c>)
 8006676:	7d23      	ldrb	r3, [r4, #20]
 8006678:	8b22      	ldrh	r2, [r4, #24]
 800667a:	7d61      	ldrb	r1, [r4, #21]
 800667c:	7da0      	ldrb	r0, [r4, #22]
 800667e:	7b24      	ldrb	r4, [r4, #12]
 8006680:	9602      	str	r6, [sp, #8]
 8006682:	b264      	sxtb	r4, r4
 8006684:	9404      	str	r4, [sp, #16]
 8006686:	4644      	mov	r4, r8
 8006688:	9403      	str	r4, [sp, #12]
 800668a:	464c      	mov	r4, r9
 800668c:	9401      	str	r4, [sp, #4]
 800668e:	4654      	mov	r4, sl
 8006690:	9400      	str	r4, [sp, #0]
 8006692:	f006 fbd9 	bl	800ce48 <BOS_CalendarConfig>
 8006696:	4680      	mov	r8, r0
 8006698:	e79a      	b.n	80065d0 <setCommand+0x214>
				temp84 =RTC_AM;
 800669a:	2301      	movs	r3, #1
 800669c:	4698      	mov	r8, r3
 800669e:	e7dc      	b.n	800665a <setCommand+0x29e>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80066a0:	4b28      	ldr	r3, [pc, #160]	; (8006744 <setCommand+0x388>)
 80066a2:	7018      	strb	r0, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066a4:	208a      	movs	r0, #138	; 0x8a
 80066a6:	7859      	ldrb	r1, [r3, #1]
 80066a8:	0040      	lsls	r0, r0, #1
 80066aa:	0209      	lsls	r1, r1, #8
 80066ac:	f001 f8fa 	bl	80078a4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80066b0:	2300      	movs	r3, #0
 80066b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066b4:	6baa      	ldr	r2, [r5, #56]	; 0x38
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80066b6:	0038      	movs	r0, r7
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80066b8:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80066ba:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80066bc:	4922      	ldr	r1, [pc, #136]	; (8006748 <setCommand+0x38c>)
 80066be:	f00c fcf1 	bl	80130a4 <sprintf>
	return pdFALSE;
 80066c2:	e6ae      	b.n	8006422 <setCommand+0x66>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80066c4:	2202      	movs	r2, #2
 80066c6:	4921      	ldr	r1, [pc, #132]	; (800674c <setCommand+0x390>)
 80066c8:	0020      	movs	r0, r4
 80066ca:	f00c fd2f 	bl	801312c <strncmp>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d100      	bne.n	80066d4 <setCommand+0x318>
 80066d2:	e75e      	b.n	8006592 <setCommand+0x1d6>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 80066d4:	2208      	movs	r2, #8
 80066d6:	491e      	ldr	r1, [pc, #120]	; (8006750 <setCommand+0x394>)
 80066d8:	0020      	movs	r0, r4
 80066da:	f00c fd27 	bl	801312c <strncmp>
 80066de:	2800      	cmp	r0, #0
 80066e0:	d000      	beq.n	80066e4 <setCommand+0x328>
 80066e2:	e0fe      	b.n	80068e2 <setCommand+0x526>
			temp82 =FEBRUARY;
 80066e4:	2402      	movs	r4, #2
 80066e6:	e755      	b.n	8006594 <setCommand+0x1d8>
 80066e8:	20001280 	.word	0x20001280
 80066ec:	08018a74 	.word	0x08018a74
 80066f0:	08018cec 	.word	0x08018cec
 80066f4:	08018cfc 	.word	0x08018cfc
 80066f8:	08018afc 	.word	0x08018afc
 80066fc:	08018a7c 	.word	0x08018a7c
 8006700:	08017e5c 	.word	0x08017e5c
 8006704:	08018be8 	.word	0x08018be8
 8006708:	08018bf0 	.word	0x08018bf0
 800670c:	08018a8c 	.word	0x08018a8c
 8006710:	08018b98 	.word	0x08018b98
 8006714:	08018d04 	.word	0x08018d04
 8006718:	08018d0c 	.word	0x08018d0c
 800671c:	08018d14 	.word	0x08018d14
 8006720:	08018d1c 	.word	0x08018d1c
 8006724:	08018d28 	.word	0x08018d28
 8006728:	08018d34 	.word	0x08018d34
 800672c:	08018d3c 	.word	0x08018d3c
 8006730:	08018d48 	.word	0x08018d48
 8006734:	fffff830 	.word	0xfffff830
 8006738:	20006ea8 	.word	0x20006ea8
 800673c:	08018cf4 	.word	0x08018cf4
 8006740:	08018cf8 	.word	0x08018cf8
 8006744:	20006e28 	.word	0x20006e28
 8006748:	08018bf4 	.word	0x08018bf4
 800674c:	08018dd0 	.word	0x08018dd0
 8006750:	08018dd4 	.word	0x08018dd4
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006754:	9b07      	ldr	r3, [sp, #28]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d100      	bne.n	800675c <setCommand+0x3a0>
 800675a:	e6a3      	b.n	80064a4 <setCommand+0xe8>
 800675c:	2202      	movs	r2, #2
 800675e:	49c7      	ldr	r1, [pc, #796]	; (8006a7c <setCommand+0x6c0>)
 8006760:	0020      	movs	r0, r4
 8006762:	f00c fce3 	bl	801312c <strncmp>
 8006766:	2800      	cmp	r0, #0
 8006768:	d100      	bne.n	800676c <setCommand+0x3b0>
 800676a:	e69b      	b.n	80064a4 <setCommand+0xe8>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 800676c:	2208      	movs	r2, #8
 800676e:	49c4      	ldr	r1, [pc, #784]	; (8006a80 <setCommand+0x6c4>)
 8006770:	0020      	movs	r0, r4
 8006772:	f00c fcdb 	bl	801312c <strncmp>
 8006776:	2800      	cmp	r0, #0
 8006778:	d100      	bne.n	800677c <setCommand+0x3c0>
 800677a:	e693      	b.n	80064a4 <setCommand+0xe8>
 800677c:	2202      	movs	r2, #2
 800677e:	49c1      	ldr	r1, [pc, #772]	; (8006a84 <setCommand+0x6c8>)
 8006780:	0020      	movs	r0, r4
 8006782:	f00c fcd3 	bl	801312c <strncmp>
 8006786:	2800      	cmp	r0, #0
 8006788:	d100      	bne.n	800678c <setCommand+0x3d0>
 800678a:	e68b      	b.n	80064a4 <setCommand+0xe8>
			result =BOS_ERR_WrongValue;
 800678c:	2368      	movs	r3, #104	; 0x68
 800678e:	4698      	mov	r8, r3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006790:	2205      	movs	r2, #5
 8006792:	49bd      	ldr	r1, [pc, #756]	; (8006a88 <setCommand+0x6cc>)
 8006794:	0020      	movs	r0, r4
 8006796:	f00c fcc9 	bl	801312c <strncmp>
 800679a:	2800      	cmp	r0, #0
 800679c:	d100      	bne.n	80067a0 <setCommand+0x3e4>
 800679e:	e09e      	b.n	80068de <setCommand+0x522>
 80067a0:	2202      	movs	r2, #2
 80067a2:	49ba      	ldr	r1, [pc, #744]	; (8006a8c <setCommand+0x6d0>)
 80067a4:	0020      	movs	r0, r4
 80067a6:	f00c fcc1 	bl	801312c <strncmp>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d100      	bne.n	80067b0 <setCommand+0x3f4>
 80067ae:	e096      	b.n	80068de <setCommand+0x522>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 80067b0:	2205      	movs	r2, #5
 80067b2:	49b7      	ldr	r1, [pc, #732]	; (8006a90 <setCommand+0x6d4>)
 80067b4:	0020      	movs	r0, r4
 80067b6:	f00c fcb9 	bl	801312c <strncmp>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d100      	bne.n	80067c0 <setCommand+0x404>
 80067be:	e08c      	b.n	80068da <setCommand+0x51e>
 80067c0:	2202      	movs	r2, #2
 80067c2:	49b4      	ldr	r1, [pc, #720]	; (8006a94 <setCommand+0x6d8>)
 80067c4:	0020      	movs	r0, r4
 80067c6:	f00c fcb1 	bl	801312c <strncmp>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d100      	bne.n	80067d0 <setCommand+0x414>
 80067ce:	e084      	b.n	80068da <setCommand+0x51e>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 80067d0:	2203      	movs	r2, #3
 80067d2:	49b1      	ldr	r1, [pc, #708]	; (8006a98 <setCommand+0x6dc>)
 80067d4:	0020      	movs	r0, r4
 80067d6:	f00c fca9 	bl	801312c <strncmp>
 80067da:	2800      	cmp	r0, #0
 80067dc:	d07b      	beq.n	80068d6 <setCommand+0x51a>
 80067de:	2202      	movs	r2, #2
 80067e0:	49ae      	ldr	r1, [pc, #696]	; (8006a9c <setCommand+0x6e0>)
 80067e2:	0020      	movs	r0, r4
 80067e4:	f00c fca2 	bl	801312c <strncmp>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d074      	beq.n	80068d6 <setCommand+0x51a>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 80067ec:	2204      	movs	r2, #4
 80067ee:	49ac      	ldr	r1, [pc, #688]	; (8006aa0 <setCommand+0x6e4>)
 80067f0:	0020      	movs	r0, r4
 80067f2:	f00c fc9b 	bl	801312c <strncmp>
 80067f6:	2800      	cmp	r0, #0
 80067f8:	d06b      	beq.n	80068d2 <setCommand+0x516>
 80067fa:	2202      	movs	r2, #2
 80067fc:	49a9      	ldr	r1, [pc, #676]	; (8006aa4 <setCommand+0x6e8>)
 80067fe:	0020      	movs	r0, r4
 8006800:	f00c fc94 	bl	801312c <strncmp>
 8006804:	2800      	cmp	r0, #0
 8006806:	d064      	beq.n	80068d2 <setCommand+0x516>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006808:	2204      	movs	r2, #4
 800680a:	49a7      	ldr	r1, [pc, #668]	; (8006aa8 <setCommand+0x6ec>)
 800680c:	0020      	movs	r0, r4
 800680e:	f00c fc8d 	bl	801312c <strncmp>
 8006812:	2800      	cmp	r0, #0
 8006814:	d05b      	beq.n	80068ce <setCommand+0x512>
 8006816:	2202      	movs	r2, #2
 8006818:	49a4      	ldr	r1, [pc, #656]	; (8006aac <setCommand+0x6f0>)
 800681a:	0020      	movs	r0, r4
 800681c:	f00c fc86 	bl	801312c <strncmp>
 8006820:	2800      	cmp	r0, #0
 8006822:	d054      	beq.n	80068ce <setCommand+0x512>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006824:	2205      	movs	r2, #5
 8006826:	49a2      	ldr	r1, [pc, #648]	; (8006ab0 <setCommand+0x6f4>)
 8006828:	0020      	movs	r0, r4
 800682a:	f00c fc7f 	bl	801312c <strncmp>
 800682e:	2800      	cmp	r0, #0
 8006830:	d04b      	beq.n	80068ca <setCommand+0x50e>
 8006832:	2202      	movs	r2, #2
 8006834:	499f      	ldr	r1, [pc, #636]	; (8006ab4 <setCommand+0x6f8>)
 8006836:	0020      	movs	r0, r4
 8006838:	f00c fc78 	bl	801312c <strncmp>
 800683c:	2800      	cmp	r0, #0
 800683e:	d044      	beq.n	80068ca <setCommand+0x50e>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006840:	2209      	movs	r2, #9
 8006842:	499d      	ldr	r1, [pc, #628]	; (8006ab8 <setCommand+0x6fc>)
 8006844:	0020      	movs	r0, r4
 8006846:	f00c fc71 	bl	801312c <strncmp>
 800684a:	2800      	cmp	r0, #0
 800684c:	d03b      	beq.n	80068c6 <setCommand+0x50a>
 800684e:	2202      	movs	r2, #2
 8006850:	499a      	ldr	r1, [pc, #616]	; (8006abc <setCommand+0x700>)
 8006852:	0020      	movs	r0, r4
 8006854:	f00c fc6a 	bl	801312c <strncmp>
 8006858:	2800      	cmp	r0, #0
 800685a:	d034      	beq.n	80068c6 <setCommand+0x50a>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 800685c:	2207      	movs	r2, #7
 800685e:	4998      	ldr	r1, [pc, #608]	; (8006ac0 <setCommand+0x704>)
 8006860:	0020      	movs	r0, r4
 8006862:	f00c fc63 	bl	801312c <strncmp>
 8006866:	2800      	cmp	r0, #0
 8006868:	d02b      	beq.n	80068c2 <setCommand+0x506>
 800686a:	2202      	movs	r2, #2
 800686c:	4995      	ldr	r1, [pc, #596]	; (8006ac4 <setCommand+0x708>)
 800686e:	0020      	movs	r0, r4
 8006870:	f00c fc5c 	bl	801312c <strncmp>
 8006874:	2800      	cmp	r0, #0
 8006876:	d024      	beq.n	80068c2 <setCommand+0x506>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006878:	2208      	movs	r2, #8
 800687a:	4993      	ldr	r1, [pc, #588]	; (8006ac8 <setCommand+0x70c>)
 800687c:	0020      	movs	r0, r4
 800687e:	f00c fc55 	bl	801312c <strncmp>
 8006882:	2800      	cmp	r0, #0
 8006884:	d01b      	beq.n	80068be <setCommand+0x502>
 8006886:	2202      	movs	r2, #2
 8006888:	4990      	ldr	r1, [pc, #576]	; (8006acc <setCommand+0x710>)
 800688a:	0020      	movs	r0, r4
 800688c:	f00c fc4e 	bl	801312c <strncmp>
 8006890:	2800      	cmp	r0, #0
 8006892:	d014      	beq.n	80068be <setCommand+0x502>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006894:	2208      	movs	r2, #8
 8006896:	498e      	ldr	r1, [pc, #568]	; (8006ad0 <setCommand+0x714>)
 8006898:	0020      	movs	r0, r4
 800689a:	f00c fc47 	bl	801312c <strncmp>
 800689e:	2800      	cmp	r0, #0
 80068a0:	d007      	beq.n	80068b2 <setCommand+0x4f6>
 80068a2:	2202      	movs	r2, #2
 80068a4:	498b      	ldr	r1, [pc, #556]	; (8006ad4 <setCommand+0x718>)
 80068a6:	0020      	movs	r0, r4
 80068a8:	f00c fc40 	bl	801312c <strncmp>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d000      	beq.n	80068b2 <setCommand+0x4f6>
 80068b0:	e5f8      	b.n	80064a4 <setCommand+0xe8>
			temp82 =DECEMBER;
 80068b2:	240c      	movs	r4, #12
		if(result == BOS_OK){
 80068b4:	4643      	mov	r3, r8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d000      	beq.n	80068bc <setCommand+0x500>
 80068ba:	e68c      	b.n	80065d6 <setCommand+0x21a>
 80068bc:	e66a      	b.n	8006594 <setCommand+0x1d8>
			temp82 =NOVEMBER;
 80068be:	240b      	movs	r4, #11
 80068c0:	e7f8      	b.n	80068b4 <setCommand+0x4f8>
			temp82 =OCTOBER;
 80068c2:	240a      	movs	r4, #10
 80068c4:	e7f6      	b.n	80068b4 <setCommand+0x4f8>
			temp82 =SEPTEMBER;
 80068c6:	2409      	movs	r4, #9
 80068c8:	e7f4      	b.n	80068b4 <setCommand+0x4f8>
			temp82 =AUGUST;
 80068ca:	2408      	movs	r4, #8
 80068cc:	e7f2      	b.n	80068b4 <setCommand+0x4f8>
			temp82 =JULY;
 80068ce:	2407      	movs	r4, #7
 80068d0:	e7f0      	b.n	80068b4 <setCommand+0x4f8>
			temp82 =JUNE;
 80068d2:	2406      	movs	r4, #6
 80068d4:	e7ee      	b.n	80068b4 <setCommand+0x4f8>
			temp82 =MAY;
 80068d6:	2405      	movs	r4, #5
 80068d8:	e7ec      	b.n	80068b4 <setCommand+0x4f8>
			temp82 =APRIL;
 80068da:	2404      	movs	r4, #4
 80068dc:	e7ea      	b.n	80068b4 <setCommand+0x4f8>
			temp82 =MARCH;
 80068de:	2403      	movs	r4, #3
 80068e0:	e7e8      	b.n	80068b4 <setCommand+0x4f8>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 80068e2:	2202      	movs	r2, #2
 80068e4:	4967      	ldr	r1, [pc, #412]	; (8006a84 <setCommand+0x6c8>)
 80068e6:	0020      	movs	r0, r4
 80068e8:	f00c fc20 	bl	801312c <strncmp>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d100      	bne.n	80068f2 <setCommand+0x536>
 80068f0:	e6f8      	b.n	80066e4 <setCommand+0x328>
 80068f2:	2300      	movs	r3, #0
 80068f4:	4698      	mov	r8, r3
 80068f6:	e74b      	b.n	8006790 <setCommand+0x3d4>
			temp81 =SATURDAY;
 80068f8:	2606      	movs	r6, #6
 80068fa:	e641      	b.n	8006580 <setCommand+0x1c4>
			temp81 =FRIDAY;
 80068fc:	2605      	movs	r6, #5
 80068fe:	e63f      	b.n	8006580 <setCommand+0x1c4>
			temp81 =THURSDAY;
 8006900:	2604      	movs	r6, #4
 8006902:	e63d      	b.n	8006580 <setCommand+0x1c4>
			temp81 =WEDNESDAY;
 8006904:	2603      	movs	r6, #3
 8006906:	e63b      	b.n	8006580 <setCommand+0x1c4>
			temp81 =TUESDAY;
 8006908:	2602      	movs	r6, #2
 800690a:	e639      	b.n	8006580 <setCommand+0x1c4>
 800690c:	4b72      	ldr	r3, [pc, #456]	; (8006ad8 <setCommand+0x71c>)
			temp81 =MONDAY;
 800690e:	2601      	movs	r6, #1
 8006910:	469a      	mov	sl, r3
 8006912:	e635      	b.n	8006580 <setCommand+0x1c4>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 8006914:	2140      	movs	r1, #64	; 0x40
 8006916:	4b71      	ldr	r3, [pc, #452]	; (8006adc <setCommand+0x720>)
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006918:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800691a:	785b      	ldrb	r3, [r3, #1]
 800691c:	3015      	adds	r0, #21
 800691e:	021b      	lsls	r3, r3, #8
 8006920:	4319      	orrs	r1, r3
 8006922:	30ff      	adds	r0, #255	; 0xff
 8006924:	f000 ffbe 	bl	80078a4 <EE_WriteVariable>
 8006928:	e6c2      	b.n	80066b0 <setCommand+0x2f4>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 800692a:	4b6c      	ldr	r3, [pc, #432]	; (8006adc <setCommand+0x720>)
 800692c:	2120      	movs	r1, #32
 800692e:	e7f3      	b.n	8006918 <setCommand+0x55c>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006930:	4b6a      	ldr	r3, [pc, #424]	; (8006adc <setCommand+0x720>)
 8006932:	2160      	movs	r1, #96	; 0x60
 8006934:	e7f0      	b.n	8006918 <setCommand+0x55c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006936:	4642      	mov	r2, r8
 8006938:	4969      	ldr	r1, [pc, #420]	; (8006ae0 <setCommand+0x724>)
 800693a:	0030      	movs	r0, r6
 800693c:	f00c fbf6 	bl	801312c <strncmp>
 8006940:	2800      	cmp	r0, #0
 8006942:	d127      	bne.n	8006994 <setCommand+0x5d8>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006944:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006946:	4967      	ldr	r1, [pc, #412]	; (8006ae4 <setCommand+0x728>)
 8006948:	0032      	movs	r2, r6
 800694a:	0020      	movs	r0, r4
 800694c:	f00c fbee 	bl	801312c <strncmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	d100      	bne.n	8006956 <setCommand+0x59a>
 8006954:	e10b      	b.n	8006b6e <setCommand+0x7b2>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006956:	0032      	movs	r2, r6
 8006958:	4963      	ldr	r1, [pc, #396]	; (8006ae8 <setCommand+0x72c>)
 800695a:	0020      	movs	r0, r4
 800695c:	f00c fbe6 	bl	801312c <strncmp>
 8006960:	2800      	cmp	r0, #0
 8006962:	d100      	bne.n	8006966 <setCommand+0x5aa>
 8006964:	e0f7      	b.n	8006b56 <setCommand+0x79a>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 8006966:	0032      	movs	r2, r6
 8006968:	4649      	mov	r1, r9
 800696a:	0020      	movs	r0, r4
 800696c:	f00c fbde 	bl	801312c <strncmp>
 8006970:	2800      	cmp	r0, #0
 8006972:	d048      	beq.n	8006a06 <setCommand+0x64a>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006974:	0032      	movs	r2, r6
 8006976:	495d      	ldr	r1, [pc, #372]	; (8006aec <setCommand+0x730>)
 8006978:	0020      	movs	r0, r4
 800697a:	f00c fbd7 	bl	801312c <strncmp>
 800697e:	2800      	cmp	r0, #0
 8006980:	d000      	beq.n	8006984 <setCommand+0x5c8>
 8006982:	e58f      	b.n	80064a4 <setCommand+0xe8>
				BOSMessaging.trace =TRACE_NONE;
 8006984:	4b55      	ldr	r3, [pc, #340]	; (8006adc <setCommand+0x720>)
 8006986:	7058      	strb	r0, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006988:	3015      	adds	r0, #21
 800698a:	7819      	ldrb	r1, [r3, #0]
 800698c:	30ff      	adds	r0, #255	; 0xff
 800698e:	f000 ff89 	bl	80078a4 <EE_WriteVariable>
 8006992:	e68d      	b.n	80066b0 <setCommand+0x2f4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006994:	4642      	mov	r2, r8
 8006996:	4956      	ldr	r1, [pc, #344]	; (8006af0 <setCommand+0x734>)
 8006998:	0030      	movs	r0, r6
 800699a:	f00c fbc7 	bl	801312c <strncmp>
 800699e:	4681      	mov	r9, r0
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d100      	bne.n	80069a6 <setCommand+0x5ea>
 80069a4:	e0b0      	b.n	8006b08 <setCommand+0x74c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80069a6:	4642      	mov	r2, r8
 80069a8:	4952      	ldr	r1, [pc, #328]	; (8006af4 <setCommand+0x738>)
 80069aa:	0030      	movs	r0, r6
 80069ac:	f00c fbbe 	bl	801312c <strncmp>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d055      	beq.n	8006a60 <setCommand+0x6a4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80069b4:	4642      	mov	r2, r8
 80069b6:	4950      	ldr	r1, [pc, #320]	; (8006af8 <setCommand+0x73c>)
 80069b8:	0030      	movs	r0, r6
 80069ba:	f00c fbb7 	bl	801312c <strncmp>
 80069be:	2800      	cmp	r0, #0
 80069c0:	d040      	beq.n	8006a44 <setCommand+0x688>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80069c2:	4642      	mov	r2, r8
 80069c4:	494d      	ldr	r1, [pc, #308]	; (8006afc <setCommand+0x740>)
 80069c6:	0030      	movs	r0, r6
 80069c8:	f00c fbb0 	bl	801312c <strncmp>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d026      	beq.n	8006a1e <setCommand+0x662>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80069d0:	4642      	mov	r2, r8
 80069d2:	494b      	ldr	r1, [pc, #300]	; (8006b00 <setCommand+0x744>)
 80069d4:	0030      	movs	r0, r6
 80069d6:	f00c fba9 	bl	801312c <strncmp>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d000      	beq.n	80069e0 <setCommand+0x624>
 80069de:	e51b      	b.n	8006418 <setCommand+0x5c>
			temp16 =atoi((const char* )pcParameterString2);
 80069e0:	0020      	movs	r0, r4
 80069e2:	f00b fe96 	bl	8012712 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80069e6:	1e43      	subs	r3, r0, #1
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	2bfe      	cmp	r3, #254	; 0xfe
 80069ec:	d900      	bls.n	80069f0 <setCommand+0x634>
 80069ee:	e559      	b.n	80064a4 <setCommand+0xe8>
				BOS.buttons.maxInterClickTime =temp16;
 80069f0:	4b44      	ldr	r3, [pc, #272]	; (8006b04 <setCommand+0x748>)
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80069f2:	7919      	ldrb	r1, [r3, #4]
				BOS.buttons.maxInterClickTime =temp16;
 80069f4:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80069f6:	0200      	lsls	r0, r0, #8
 80069f8:	4301      	orrs	r1, r0
 80069fa:	2018      	movs	r0, #24
 80069fc:	b289      	uxth	r1, r1
 80069fe:	30ff      	adds	r0, #255	; 0xff
 8006a00:	f000 ff50 	bl	80078a4 <EE_WriteVariable>
 8006a04:	e654      	b.n	80066b0 <setCommand+0x2f4>
				BOSMessaging.trace =TRACE_RESPONSE;
 8006a06:	2202      	movs	r2, #2
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006a08:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_RESPONSE;
 8006a0a:	4b34      	ldr	r3, [pc, #208]	; (8006adc <setCommand+0x720>)
 8006a0c:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	0089      	lsls	r1, r1, #2
 8006a12:	3015      	adds	r0, #21
 8006a14:	4319      	orrs	r1, r3
 8006a16:	30ff      	adds	r0, #255	; 0xff
 8006a18:	f000 ff44 	bl	80078a4 <EE_WriteVariable>
 8006a1c:	e648      	b.n	80066b0 <setCommand+0x2f4>
			temp16 =atoi((const char* )pcParameterString2);
 8006a1e:	0020      	movs	r0, r4
 8006a20:	f00b fe77 	bl	8012712 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006a24:	1e43      	subs	r3, r0, #1
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2bfe      	cmp	r3, #254	; 0xfe
 8006a2a:	d900      	bls.n	8006a2e <setCommand+0x672>
 8006a2c:	e53a      	b.n	80064a4 <setCommand+0xe8>
				BOS.buttons.minInterClickTime =temp16;
 8006a2e:	4b35      	ldr	r3, [pc, #212]	; (8006b04 <setCommand+0x748>)
 8006a30:	b2c0      	uxtb	r0, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006a32:	7959      	ldrb	r1, [r3, #5]
				BOS.buttons.minInterClickTime =temp16;
 8006a34:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006a36:	0209      	lsls	r1, r1, #8
 8006a38:	4301      	orrs	r1, r0
 8006a3a:	2018      	movs	r0, #24
 8006a3c:	30ff      	adds	r0, #255	; 0xff
 8006a3e:	f000 ff31 	bl	80078a4 <EE_WriteVariable>
 8006a42:	e635      	b.n	80066b0 <setCommand+0x2f4>
			temp16 =atoi((const char* )pcParameterString2);
 8006a44:	0020      	movs	r0, r4
 8006a46:	f00b fe64 	bl	8012712 <atoi>
 8006a4a:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006a4c:	2900      	cmp	r1, #0
 8006a4e:	d100      	bne.n	8006a52 <setCommand+0x696>
 8006a50:	e528      	b.n	80064a4 <setCommand+0xe8>
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006a52:	208b      	movs	r0, #139	; 0x8b
				BOS.buttons.singleClickTime =temp16;
 8006a54:	4b2b      	ldr	r3, [pc, #172]	; (8006b04 <setCommand+0x748>)
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006a56:	0040      	lsls	r0, r0, #1
				BOS.buttons.singleClickTime =temp16;
 8006a58:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006a5a:	f000 ff23 	bl	80078a4 <EE_WriteVariable>
 8006a5e:	e627      	b.n	80066b0 <setCommand+0x2f4>
			temp16 =atoi((const char* )pcParameterString2);
 8006a60:	0020      	movs	r0, r4
 8006a62:	f00b fe56 	bl	8012712 <atoi>
 8006a66:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	d100      	bne.n	8006a6e <setCommand+0x6b2>
 8006a6c:	e51a      	b.n	80064a4 <setCommand+0xe8>
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006a6e:	2016      	movs	r0, #22
				BOS.buttons.debounce =temp16;
 8006a70:	4b24      	ldr	r3, [pc, #144]	; (8006b04 <setCommand+0x748>)
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006a72:	30ff      	adds	r0, #255	; 0xff
				BOS.buttons.debounce =temp16;
 8006a74:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006a76:	f000 ff15 	bl	80078a4 <EE_WriteVariable>
 8006a7a:	e619      	b.n	80066b0 <setCommand+0x2f4>
 8006a7c:	08018dd0 	.word	0x08018dd0
 8006a80:	08018dd4 	.word	0x08018dd4
 8006a84:	08018de0 	.word	0x08018de0
 8006a88:	08018d50 	.word	0x08018d50
 8006a8c:	08018d58 	.word	0x08018d58
 8006a90:	08018d5c 	.word	0x08018d5c
 8006a94:	08018d64 	.word	0x08018d64
 8006a98:	08018d68 	.word	0x08018d68
 8006a9c:	08018d6c 	.word	0x08018d6c
 8006aa0:	08018d70 	.word	0x08018d70
 8006aa4:	08018d78 	.word	0x08018d78
 8006aa8:	08018d7c 	.word	0x08018d7c
 8006aac:	08018d84 	.word	0x08018d84
 8006ab0:	08018d88 	.word	0x08018d88
 8006ab4:	08018d90 	.word	0x08018d90
 8006ab8:	08018d94 	.word	0x08018d94
 8006abc:	08018da0 	.word	0x08018da0
 8006ac0:	08018da4 	.word	0x08018da4
 8006ac4:	08018dac 	.word	0x08018dac
 8006ac8:	08018db0 	.word	0x08018db0
 8006acc:	08018dbc 	.word	0x08018dbc
 8006ad0:	08018dc0 	.word	0x08018dc0
 8006ad4:	08018dcc 	.word	0x08018dcc
 8006ad8:	08018d14 	.word	0x08018d14
 8006adc:	20006e28 	.word	0x20006e28
 8006ae0:	08018a94 	.word	0x08018a94
 8006ae4:	08017e5c 	.word	0x08017e5c
 8006ae8:	08018be8 	.word	0x08018be8
 8006aec:	08018a8c 	.word	0x08018a8c
 8006af0:	08018a9c 	.word	0x08018a9c
 8006af4:	08018aa8 	.word	0x08018aa8
 8006af8:	08018ab4 	.word	0x08018ab4
 8006afc:	08018ac4 	.word	0x08018ac4
 8006b00:	08018ad8 	.word	0x08018ad8
 8006b04:	20006ea8 	.word	0x20006ea8
			temp2 =atoi((const char* )pcParameterString2);
 8006b08:	0020      	movs	r0, r4
 8006b0a:	f00b fe02 	bl	8012712 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006b0e:	23e1      	movs	r3, #225	; 0xe1
 8006b10:	031b      	lsls	r3, r3, #12
 8006b12:	4298      	cmp	r0, r3
 8006b14:	d900      	bls.n	8006b18 <setCommand+0x75c>
 8006b16:	e4c5      	b.n	80064a4 <setCommand+0xe8>
				BOS.clibaudrate =temp2;
 8006b18:	4c18      	ldr	r4, [pc, #96]	; (8006b7c <setCommand+0x7c0>)
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006b1a:	b281      	uxth	r1, r0
				BOS.clibaudrate =temp2;
 8006b1c:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006b1e:	208c      	movs	r0, #140	; 0x8c
 8006b20:	0040      	lsls	r0, r0, #1
 8006b22:	f000 febf 	bl	80078a4 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006b26:	201a      	movs	r0, #26
 8006b28:	68a1      	ldr	r1, [r4, #8]
 8006b2a:	30ff      	adds	r0, #255	; 0xff
 8006b2c:	0c09      	lsrs	r1, r1, #16
 8006b2e:	f000 feb9 	bl	80078a4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006b32:	4649      	mov	r1, r9
 8006b34:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006b38:	0038      	movs	r0, r7
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006b3a:	54d1      	strb	r1, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006b3c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006b3e:	4910      	ldr	r1, [pc, #64]	; (8006b80 <setCommand+0x7c4>)
 8006b40:	f00c fab0 	bl	80130a4 <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006b44:	490f      	ldr	r1, [pc, #60]	; (8006b84 <setCommand+0x7c8>)
 8006b46:	0038      	movs	r0, r7
 8006b48:	f00c facc 	bl	80130e4 <strcat>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006b4c:	490e      	ldr	r1, [pc, #56]	; (8006b88 <setCommand+0x7cc>)
 8006b4e:	0038      	movs	r0, r7
 8006b50:	f00c fac8 	bl	80130e4 <strcat>
 8006b54:	e465      	b.n	8006422 <setCommand+0x66>
				BOSMessaging.trace =TRACE_MESSAGE;
 8006b56:	2201      	movs	r2, #1
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b58:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_MESSAGE;
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <setCommand+0x7d0>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b5c:	0049      	lsls	r1, r1, #1
				BOSMessaging.trace =TRACE_MESSAGE;
 8006b5e:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	3015      	adds	r0, #21
 8006b64:	4319      	orrs	r1, r3
 8006b66:	30ff      	adds	r0, #255	; 0xff
 8006b68:	f000 fe9c 	bl	80078a4 <EE_WriteVariable>
 8006b6c:	e5a0      	b.n	80066b0 <setCommand+0x2f4>
				BOSMessaging.trace =TRACE_BOTH;
 8006b6e:	2203      	movs	r2, #3
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <setCommand+0x7d0>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b72:	21c0      	movs	r1, #192	; 0xc0
				BOSMessaging.trace =TRACE_BOTH;
 8006b74:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	e74a      	b.n	8006a10 <setCommand+0x654>
 8006b7a:	46c0      	nop			; (mov r8, r8)
 8006b7c:	20006ea8 	.word	0x20006ea8
 8006b80:	08018bf4 	.word	0x08018bf4
 8006b84:	08018c08 	.word	0x08018c08
 8006b88:	08018c38 	.word	0x08018c38
 8006b8c:	20006e28 	.word	0x20006e28

08006b90 <removebuttonCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006b90:	2300      	movs	r3, #0
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b92:	b530      	push	{r4, r5, lr}
 8006b94:	b083      	sub	sp, #12
 8006b96:	0005      	movs	r5, r0
	portBASE_TYPE xParameterStringLength1 =0;
 8006b98:	9301      	str	r3, [sp, #4]
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b9a:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8006b9c:	2d00      	cmp	r5, #0
 8006b9e:	d010      	beq.n	8006bc2 <removebuttonCommand+0x32>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006ba0:	aa01      	add	r2, sp, #4
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	f006 fe5e 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006ba8:	2300      	movs	r3, #0
 8006baa:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006bac:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006bae:	2b70      	cmp	r3, #112	; 0x70
 8006bb0:	d009      	beq.n	8006bc6 <removebuttonCommand+0x36>
	result =RemovePortButton(port);
 8006bb2:	0020      	movs	r0, r4
 8006bb4:	f001 fca4 	bl	8008500 <RemovePortButton>
	if(result == BOS_OK){
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d009      	beq.n	8006bd0 <removebuttonCommand+0x40>
}
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	b003      	add	sp, #12
 8006bc0:	bd30      	pop	{r4, r5, pc}
	configASSERT(pcWriteBuffer);
 8006bc2:	b672      	cpsid	i
 8006bc4:	e7fe      	b.n	8006bc4 <removebuttonCommand+0x34>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	f00b fda9 	bl	801271e <atol>
 8006bcc:	b2c4      	uxtb	r4, r0
 8006bce:	e7f0      	b.n	8006bb2 <removebuttonCommand+0x22>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006bd0:	0023      	movs	r3, r4
 8006bd2:	0022      	movs	r2, r4
 8006bd4:	4902      	ldr	r1, [pc, #8]	; (8006be0 <removebuttonCommand+0x50>)
 8006bd6:	0028      	movs	r0, r5
 8006bd8:	f00c fa64 	bl	80130a4 <sprintf>
 8006bdc:	e7ee      	b.n	8006bbc <removebuttonCommand+0x2c>
 8006bde:	46c0      	nop			; (mov r8, r8)
 8006be0:	08018de4 	.word	0x08018de4

08006be4 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006be6:	46ce      	mov	lr, r9
 8006be8:	4647      	mov	r7, r8
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006bea:	2300      	movs	r3, #0
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	1e06      	subs	r6, r0, #0
 8006bf2:	4691      	mov	r9, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006bf4:	9302      	str	r3, [sp, #8]
 8006bf6:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8006bf8:	d036      	beq.n	8006c68 <addbuttonCommand+0x84>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006bfa:	aa02      	add	r2, sp, #8
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	4648      	mov	r0, r9
 8006c00:	f006 fe30 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c04:	9b02      	ldr	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c06:	4f25      	ldr	r7, [pc, #148]	; (8006c9c <addbuttonCommand+0xb8>)
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c08:	001a      	movs	r2, r3
 8006c0a:	4925      	ldr	r1, [pc, #148]	; (8006ca0 <addbuttonCommand+0xbc>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c0c:	0005      	movs	r5, r0
 8006c0e:	64f8      	str	r0, [r7, #76]	; 0x4c
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c10:	4698      	mov	r8, r3
 8006c12:	f00c fa8b 	bl	801312c <strncmp>
		type =MOMENTARY_NO;
 8006c16:	2401      	movs	r4, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d00f      	beq.n	8006c3c <addbuttonCommand+0x58>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	4921      	ldr	r1, [pc, #132]	; (8006ca4 <addbuttonCommand+0xc0>)
 8006c20:	0028      	movs	r0, r5
 8006c22:	f00c fa83 	bl	801312c <strncmp>
		type =MOMENTARY_NC;
 8006c26:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d007      	beq.n	8006c3c <addbuttonCommand+0x58>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	491e      	ldr	r1, [pc, #120]	; (8006ca8 <addbuttonCommand+0xc4>)
 8006c30:	0028      	movs	r0, r5
 8006c32:	f00c fa7b 	bl	801312c <strncmp>
		type =ONOFF_NO;
 8006c36:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d117      	bne.n	8006c6c <addbuttonCommand+0x88>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c3c:	aa03      	add	r2, sp, #12
 8006c3e:	2102      	movs	r1, #2
 8006c40:	4648      	mov	r0, r9
 8006c42:	f006 fe0f 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006c46:	2300      	movs	r3, #0
 8006c48:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006c4a:	2500      	movs	r5, #0
	if(pcParameterString2[0] == 'p'){
 8006c4c:	2b70      	cmp	r3, #112	; 0x70
 8006c4e:	d020      	beq.n	8006c92 <addbuttonCommand+0xae>
	result =AddPortButton(type,port);
 8006c50:	0029      	movs	r1, r5
 8006c52:	0020      	movs	r0, r4
 8006c54:	f001 fbda 	bl	800840c <AddPortButton>
	if(result == BOS_OK){
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d010      	beq.n	8006c7e <addbuttonCommand+0x9a>
}
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	b005      	add	sp, #20
 8006c60:	bc0c      	pop	{r2, r3}
 8006c62:	4690      	mov	r8, r2
 8006c64:	4699      	mov	r9, r3
 8006c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006c68:	b672      	cpsid	i
 8006c6a:	e7fe      	b.n	8006c6a <addbuttonCommand+0x86>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	490f      	ldr	r1, [pc, #60]	; (8006cac <addbuttonCommand+0xc8>)
 8006c70:	0028      	movs	r0, r5
 8006c72:	f00c fa5b 	bl	801312c <strncmp>
		type =ONOFF_NC;
 8006c76:	4244      	negs	r4, r0
 8006c78:	4144      	adcs	r4, r0
 8006c7a:	00a4      	lsls	r4, r4, #2
 8006c7c:	e7de      	b.n	8006c3c <addbuttonCommand+0x58>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006c7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c80:	9b02      	ldr	r3, [sp, #8]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006c82:	490b      	ldr	r1, [pc, #44]	; (8006cb0 <addbuttonCommand+0xcc>)
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006c84:	54d0      	strb	r0, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006c86:	9500      	str	r5, [sp, #0]
 8006c88:	002b      	movs	r3, r5
 8006c8a:	0030      	movs	r0, r6
 8006c8c:	f00c fa0a 	bl	80130a4 <sprintf>
 8006c90:	e7e4      	b.n	8006c5c <addbuttonCommand+0x78>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006c92:	3001      	adds	r0, #1
 8006c94:	f00b fd43 	bl	801271e <atol>
 8006c98:	b2c5      	uxtb	r5, r0
 8006c9a:	e7d9      	b.n	8006c50 <addbuttonCommand+0x6c>
 8006c9c:	20001280 	.word	0x20001280
 8006ca0:	08018e0c 	.word	0x08018e0c
 8006ca4:	08018e1c 	.word	0x08018e1c
 8006ca8:	08018e2c 	.word	0x08018e2c
 8006cac:	08018e38 	.word	0x08018e38
 8006cb0:	08018e44 	.word	0x08018e44

08006cb4 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb6:	46de      	mov	lr, fp
 8006cb8:	4645      	mov	r5, r8
 8006cba:	4657      	mov	r7, sl
 8006cbc:	464e      	mov	r6, r9
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006cbe:	2300      	movs	r3, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cc0:	b5e0      	push	{r5, r6, r7, lr}
 8006cc2:	b09b      	sub	sp, #108	; 0x6c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006cc4:	af11      	add	r7, sp, #68	; 0x44
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cc6:	0004      	movs	r4, r0
 8006cc8:	9009      	str	r0, [sp, #36]	; 0x24
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006cca:	2100      	movs	r1, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ccc:	0015      	movs	r5, r2
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006cce:	0038      	movs	r0, r7
 8006cd0:	220a      	movs	r2, #10
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006cd2:	930a      	str	r3, [sp, #40]	; 0x28
 8006cd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cd6:	930c      	str	r3, [sp, #48]	; 0x30
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006cd8:	930d      	str	r3, [sp, #52]	; 0x34
 8006cda:	930e      	str	r3, [sp, #56]	; 0x38
 8006cdc:	930f      	str	r3, [sp, #60]	; 0x3c
	portBASE_TYPE xParameterStringLength7 =0;
 8006cde:	9310      	str	r3, [sp, #64]	; 0x40
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006ce0:	f00b ffe6 	bl	8012cb0 <memset>
 8006ce4:	ab14      	add	r3, sp, #80	; 0x50
 8006ce6:	220a      	movs	r2, #10
 8006ce8:	2100      	movs	r1, #0
 8006cea:	0018      	movs	r0, r3
 8006cec:	4698      	mov	r8, r3
 8006cee:	f00b ffdf 	bl	8012cb0 <memset>
 8006cf2:	ab17      	add	r3, sp, #92	; 0x5c
 8006cf4:	220a      	movs	r2, #10
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f00b ffd9 	bl	8012cb0 <memset>
	configASSERT(pcWriteBuffer);
 8006cfe:	2c00      	cmp	r4, #0
 8006d00:	d100      	bne.n	8006d04 <scastCommand+0x50>
 8006d02:	e07d      	b.n	8006e00 <scastCommand+0x14c>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d04:	aa0a      	add	r2, sp, #40	; 0x28
 8006d06:	2101      	movs	r1, #1
 8006d08:	0028      	movs	r0, r5
 8006d0a:	f006 fdab 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006d0e:	2300      	movs	r3, #0
 8006d10:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d12:	2600      	movs	r6, #0
	if(pcParameterString1[0] == 'P'){
 8006d14:	2b50      	cmp	r3, #80	; 0x50
 8006d16:	d100      	bne.n	8006d1a <scastCommand+0x66>
 8006d18:	e074      	b.n	8006e04 <scastCommand+0x150>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006d1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d1c:	2102      	movs	r1, #2
 8006d1e:	0028      	movs	r0, r5
 8006d20:	f006 fda0 	bl	800d864 <FreeRTOS_CLIGetParameter>
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006d24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006d26:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006d28:	0038      	movs	r0, r7
 8006d2a:	f00c fa10 	bl	801314e <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006d2e:	0038      	movs	r0, r7
 8006d30:	f7fd fa56 	bl	80041e0 <GetID>
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006d34:	aa0c      	add	r2, sp, #48	; 0x30
	srcM =(uint8_t )GetID(par1);
 8006d36:	b2c3      	uxtb	r3, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006d38:	2103      	movs	r1, #3
 8006d3a:	0028      	movs	r0, r5
	srcM =(uint8_t )GetID(par1);
 8006d3c:	9307      	str	r3, [sp, #28]
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006d3e:	f006 fd91 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006d42:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d44:	2200      	movs	r2, #0
	if(pcParameterString3[0] == 'p'){
 8006d46:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d48:	4693      	mov	fp, r2
	if(pcParameterString3[0] == 'p'){
 8006d4a:	2b70      	cmp	r3, #112	; 0x70
 8006d4c:	d06e      	beq.n	8006e2c <scastCommand+0x178>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006d4e:	aa0d      	add	r2, sp, #52	; 0x34
 8006d50:	2104      	movs	r1, #4
 8006d52:	0028      	movs	r0, r5
 8006d54:	f006 fd86 	bl	800d864 <FreeRTOS_CLIGetParameter>
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006d58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006d5a:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	f00c f9f6 	bl	801314e <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006d62:	4640      	mov	r0, r8
 8006d64:	f7fd fa3c 	bl	80041e0 <GetID>
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d68:	aa0e      	add	r2, sp, #56	; 0x38
	dstM =(uint8_t )GetID(par2);
 8006d6a:	b2c3      	uxtb	r3, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d6c:	2105      	movs	r1, #5
 8006d6e:	0028      	movs	r0, r5
	dstM =(uint8_t )GetID(par2);
 8006d70:	9308      	str	r3, [sp, #32]
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d72:	f006 fd77 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d78:	492f      	ldr	r1, [pc, #188]	; (8006e38 <scastCommand+0x184>)
 8006d7a:	001a      	movs	r2, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d7c:	4681      	mov	r9, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d7e:	469a      	mov	sl, r3
 8006d80:	f00c f9d4 	bl	801312c <strncmp>
		direction =FORWARD;
 8006d84:	2400      	movs	r4, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d00f      	beq.n	8006daa <scastCommand+0xf6>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d8a:	4652      	mov	r2, sl
 8006d8c:	492b      	ldr	r1, [pc, #172]	; (8006e3c <scastCommand+0x188>)
 8006d8e:	4648      	mov	r0, r9
 8006d90:	f00c f9cc 	bl	801312c <strncmp>
		direction =BACKWARD;
 8006d94:	3401      	adds	r4, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d007      	beq.n	8006daa <scastCommand+0xf6>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006d9a:	4652      	mov	r2, sl
 8006d9c:	4928      	ldr	r1, [pc, #160]	; (8006e40 <scastCommand+0x18c>)
 8006d9e:	4648      	mov	r0, r9
 8006da0:	f00c f9c4 	bl	801312c <strncmp>
		direction =BIDIRECTIONAL;
 8006da4:	4244      	negs	r4, r0
 8006da6:	4144      	adcs	r4, r0
 8006da8:	0064      	lsls	r4, r4, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006daa:	4649      	mov	r1, r9
 8006dac:	4652      	mov	r2, sl
 8006dae:	a817      	add	r0, sp, #92	; 0x5c
 8006db0:	f00c f9cd 	bl	801314e <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006db4:	aa0f      	add	r2, sp, #60	; 0x3c
 8006db6:	2106      	movs	r1, #6
 8006db8:	0028      	movs	r0, r5
 8006dba:	f006 fd53 	bl	800d864 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006dbe:	f00b fcae 	bl	801271e <atol>
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006dc2:	aa10      	add	r2, sp, #64	; 0x40
 8006dc4:	2107      	movs	r1, #7
	count =(uint32_t )atol((char* )pcParameterString6);
 8006dc6:	4681      	mov	r9, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006dc8:	0028      	movs	r0, r5
 8006dca:	f006 fd4b 	bl	800d864 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006dce:	f00b fca6 	bl	801271e <atol>
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	9303      	str	r3, [sp, #12]
 8006dd6:	464b      	mov	r3, r9
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006dd8:	0005      	movs	r5, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006dda:	9002      	str	r0, [sp, #8]
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	9400      	str	r4, [sp, #0]
 8006de0:	9b08      	ldr	r3, [sp, #32]
 8006de2:	465a      	mov	r2, fp
 8006de4:	9907      	ldr	r1, [sp, #28]
 8006de6:	0030      	movs	r0, r6
 8006de8:	f002 fe7a 	bl	8009ae0 <StartScastDMAStream>
	if(result == BOS_OK){
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d00e      	beq.n	8006e0e <scastCommand+0x15a>
}
 8006df0:	2000      	movs	r0, #0
 8006df2:	b01b      	add	sp, #108	; 0x6c
 8006df4:	bc3c      	pop	{r2, r3, r4, r5}
 8006df6:	4690      	mov	r8, r2
 8006df8:	4699      	mov	r9, r3
 8006dfa:	46a2      	mov	sl, r4
 8006dfc:	46ab      	mov	fp, r5
 8006dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006e00:	b672      	cpsid	i
 8006e02:	e7fe      	b.n	8006e02 <scastCommand+0x14e>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006e04:	3001      	adds	r0, #1
 8006e06:	f00b fc8a 	bl	801271e <atol>
 8006e0a:	b2c6      	uxtb	r6, r0
 8006e0c:	e785      	b.n	8006d1a <scastCommand+0x66>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006e0e:	464b      	mov	r3, r9
 8006e10:	9303      	str	r3, [sp, #12]
 8006e12:	4643      	mov	r3, r8
 8006e14:	9302      	str	r3, [sp, #8]
 8006e16:	465b      	mov	r3, fp
 8006e18:	9504      	str	r5, [sp, #16]
 8006e1a:	9301      	str	r3, [sp, #4]
 8006e1c:	9700      	str	r7, [sp, #0]
 8006e1e:	0033      	movs	r3, r6
 8006e20:	aa17      	add	r2, sp, #92	; 0x5c
 8006e22:	4908      	ldr	r1, [pc, #32]	; (8006e44 <scastCommand+0x190>)
 8006e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e26:	f00c f93d 	bl	80130a4 <sprintf>
 8006e2a:	e7e1      	b.n	8006df0 <scastCommand+0x13c>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	f00b fc76 	bl	801271e <atol>
 8006e32:	b2c3      	uxtb	r3, r0
 8006e34:	469b      	mov	fp, r3
 8006e36:	e78a      	b.n	8006d4e <scastCommand+0x9a>
 8006e38:	08018e78 	.word	0x08018e78
 8006e3c:	08018e80 	.word	0x08018e80
 8006e40:	08018e8c 	.word	0x08018e8c
 8006e44:	08018e9c 	.word	0x08018e9c

08006e48 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e4a:	0004      	movs	r4, r0
 8006e4c:	b083      	sub	sp, #12
	configASSERT(pcWriteBuffer);
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d041      	beq.n	8006ed6 <infoCommand+0x8e>
	if(N > 1)
 8006e52:	4d22      	ldr	r5, [pc, #136]	; (8006edc <infoCommand+0x94>)
	BOS_Status result =BOS_OK;
 8006e54:	2700      	movs	r7, #0
	if(N > 1)
 8006e56:	782a      	ldrb	r2, [r5, #0]
 8006e58:	2a01      	cmp	r2, #1
 8006e5a:	d903      	bls.n	8006e64 <infoCommand+0x1c>
		result =ReadPortsDir();
 8006e5c:	f7fd fb18 	bl	8004490 <ReadPortsDir>
 8006e60:	0007      	movs	r7, r0
 8006e62:	782a      	ldrb	r2, [r5, #0]
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006e64:	491e      	ldr	r1, [pc, #120]	; (8006ee0 <infoCommand+0x98>)
 8006e66:	0020      	movs	r0, r4
 8006e68:	f00c f91c 	bl	80130a4 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e6c:	2601      	movs	r6, #1
 8006e6e:	0020      	movs	r0, r4
 8006e70:	f7f9 f952 	bl	8000118 <strlen>
 8006e74:	4d1b      	ldr	r5, [pc, #108]	; (8006ee4 <infoCommand+0x9c>)
 8006e76:	4276      	negs	r6, r6
 8006e78:	b282      	uxth	r2, r0
 8006e7a:	2332      	movs	r3, #50	; 0x32
 8006e7c:	7828      	ldrb	r0, [r5, #0]
 8006e7e:	0021      	movs	r1, r4
 8006e80:	9600      	str	r6, [sp, #0]
 8006e82:	f006 fa93 	bl	800d3ac <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006e86:	2213      	movs	r2, #19
 8006e88:	4917      	ldr	r1, [pc, #92]	; (8006ee8 <infoCommand+0xa0>)
 8006e8a:	0020      	movs	r0, r4
 8006e8c:	f00b ff07 	bl	8012c9e <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e90:	7828      	ldrb	r0, [r5, #0]
 8006e92:	2332      	movs	r3, #50	; 0x32
 8006e94:	2212      	movs	r2, #18
 8006e96:	0021      	movs	r1, r4
 8006e98:	9600      	str	r6, [sp, #0]
 8006e9a:	f006 fa87 	bl	800d3ac <writePxMutex>
	DisplayTopology(PcPort);
 8006e9e:	7828      	ldrb	r0, [r5, #0]
 8006ea0:	f7fc fedc 	bl	8003c5c <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006ea4:	7828      	ldrb	r0, [r5, #0]
 8006ea6:	f7fc ffad 	bl	8003e04 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006eaa:	2f02      	cmp	r7, #2
 8006eac:	d10b      	bne.n	8006ec6 <infoCommand+0x7e>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006eae:	2244      	movs	r2, #68	; 0x44
 8006eb0:	490e      	ldr	r1, [pc, #56]	; (8006eec <infoCommand+0xa4>)
 8006eb2:	0020      	movs	r0, r4
 8006eb4:	f00b fef3 	bl	8012c9e <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006eb8:	7828      	ldrb	r0, [r5, #0]
 8006eba:	2332      	movs	r3, #50	; 0x32
 8006ebc:	9600      	str	r6, [sp, #0]
 8006ebe:	2243      	movs	r2, #67	; 0x43
 8006ec0:	0021      	movs	r1, r4
 8006ec2:	f006 fa73 	bl	800d3ac <writePxMutex>
	sprintf((char* )pcWriteBuffer," ");
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	4909      	ldr	r1, [pc, #36]	; (8006ef0 <infoCommand+0xa8>)
 8006eca:	0020      	movs	r0, r4
 8006ecc:	f00b fee7 	bl	8012c9e <memcpy>
}
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	b003      	add	sp, #12
 8006ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006ed6:	b672      	cpsid	i
 8006ed8:	e7fe      	b.n	8006ed8 <infoCommand+0x90>
 8006eda:	46c0      	nop			; (mov r8, r8)
 8006edc:	20000008 	.word	0x20000008
 8006ee0:	08018f24 	.word	0x08018f24
 8006ee4:	20000c28 	.word	0x20000c28
 8006ee8:	08018f40 	.word	0x08018f40
 8006eec:	08018f54 	.word	0x08018f54
 8006ef0:	08017d58 	.word	0x08017d58

08006ef4 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ef4:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	d101      	bne.n	8006efe <statusCommand+0xa>
 8006efa:	b672      	cpsid	i
 8006efc:	e7fe      	b.n	8006efc <statusCommand+0x8>
	DisplayModuleStatus(0);
 8006efe:	2000      	movs	r0, #0
 8006f00:	f7fc fffa 	bl	8003ef8 <DisplayModuleStatus>
}
 8006f04:	2000      	movs	r0, #0
 8006f06:	bd10      	pop	{r4, pc}

08006f08 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f0a:	464e      	mov	r6, r9
 8006f0c:	46de      	mov	lr, fp
 8006f0e:	4645      	mov	r5, r8
 8006f10:	4657      	mov	r7, sl
 8006f12:	b5e0      	push	{r5, r6, r7, lr}
 8006f14:	b08f      	sub	sp, #60	; 0x3c
	char module[MaxLengthOfAlias + 30] ={0};
 8006f16:	ae04      	add	r6, sp, #16
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f18:	0005      	movs	r5, r0
	char module[MaxLengthOfAlias + 30] ={0};
 8006f1a:	2100      	movs	r1, #0
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f1c:	4691      	mov	r9, r2
	char module[MaxLengthOfAlias + 30] ={0};
 8006f1e:	0030      	movs	r0, r6
 8006f20:	2227      	movs	r2, #39	; 0x27
 8006f22:	f00b fec5 	bl	8012cb0 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006f26:	220a      	movs	r2, #10
 8006f28:	2100      	movs	r1, #0
 8006f2a:	a801      	add	r0, sp, #4
 8006f2c:	f00b fec0 	bl	8012cb0 <memset>
	configASSERT(pcWriteBuffer);
 8006f30:	2d00      	cmp	r5, #0
 8006f32:	d063      	beq.n	8006ffc <groupCommand+0xf4>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006f34:	4c54      	ldr	r4, [pc, #336]	; (8007088 <groupCommand+0x180>)
 8006f36:	2101      	movs	r1, #1
 8006f38:	0022      	movs	r2, r4
 8006f3a:	4648      	mov	r0, r9
 8006f3c:	3250      	adds	r2, #80	; 0x50
 8006f3e:	f006 fc91 	bl	800d864 <FreeRTOS_CLIGetParameter>
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006f42:	6d22      	ldr	r2, [r4, #80]	; 0x50
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006f44:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006f46:	a801      	add	r0, sp, #4
 8006f48:	f00c f901 	bl	801314e <strncpy>
 8006f4c:	2364      	movs	r3, #100	; 0x64
 8006f4e:	4698      	mov	r8, r3
 8006f50:	4f4e      	ldr	r7, [pc, #312]	; (800708c <groupCommand+0x184>)
 8006f52:	44b8      	add	r8, r7
		if(!strcmp(alias,groupAlias[i])){
 8006f54:	0039      	movs	r1, r7
 8006f56:	a801      	add	r0, sp, #4
 8006f58:	f7f9 f8d4 	bl	8000104 <strcmp>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d04a      	beq.n	8006ff6 <groupCommand+0xee>
 8006f60:	370a      	adds	r7, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006f62:	45b8      	cmp	r8, r7
 8006f64:	d1f6      	bne.n	8006f54 <groupCommand+0x4c>
	type =1;
 8006f66:	2301      	movs	r3, #1
 8006f68:	469a      	mov	sl, r3
	count =2;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	2754      	movs	r7, #84	; 0x54
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006f6e:	220a      	movs	r2, #10
 8006f70:	4947      	ldr	r1, [pc, #284]	; (8007090 <groupCommand+0x188>)
 8006f72:	0028      	movs	r0, r5
	count =2;
 8006f74:	55e3      	strb	r3, [r4, r7]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006f76:	f00b fe92 	bl	8012c9e <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006f7a:	0022      	movs	r2, r4
 8006f7c:	2102      	movs	r1, #2
 8006f7e:	3258      	adds	r2, #88	; 0x58
 8006f80:	4648      	mov	r0, r9
 8006f82:	f006 fc6f 	bl	800d864 <FreeRTOS_CLIGetParameter>
 8006f86:	65e0      	str	r0, [r4, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d039      	beq.n	8007000 <groupCommand+0xf8>
		module[xParameterStringLength] ='\0';
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	469b      	mov	fp, r3
		if(count > 2)
 8006f90:	3354      	adds	r3, #84	; 0x54
 8006f92:	4698      	mov	r8, r3
 8006f94:	e00f      	b.n	8006fb6 <groupCommand+0xae>
		strcat((char* )pcWriteBuffer,module);
 8006f96:	0031      	movs	r1, r6
 8006f98:	0028      	movs	r0, r5
 8006f9a:	f00c f8a3 	bl	80130e4 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006f9e:	0022      	movs	r2, r4
 8006fa0:	4643      	mov	r3, r8
 8006fa2:	1c79      	adds	r1, r7, #1
 8006fa4:	b249      	sxtb	r1, r1
 8006fa6:	3258      	adds	r2, #88	; 0x58
 8006fa8:	4648      	mov	r0, r9
 8006faa:	54e1      	strb	r1, [r4, r3]
 8006fac:	f006 fc5a 	bl	800d864 <FreeRTOS_CLIGetParameter>
 8006fb0:	65e0      	str	r0, [r4, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d03c      	beq.n	8007030 <groupCommand+0x128>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006fb6:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8006fb8:	0001      	movs	r1, r0
 8006fba:	003a      	movs	r2, r7
 8006fbc:	0030      	movs	r0, r6
 8006fbe:	f00c f8c6 	bl	801314e <strncpy>
		module[xParameterStringLength] ='\0';
 8006fc2:	465b      	mov	r3, fp
		modID =GetID(module);
 8006fc4:	0030      	movs	r0, r6
		module[xParameterStringLength] ='\0';
 8006fc6:	55f3      	strb	r3, [r6, r7]
		modID =GetID(module);
 8006fc8:	f7fd f90a 	bl	80041e0 <GetID>
		if(modID < 0)
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	db49      	blt.n	8007064 <groupCommand+0x15c>
		result =AddModuleToGroup(modID,alias);
 8006fd0:	b2c0      	uxtb	r0, r0
 8006fd2:	a901      	add	r1, sp, #4
 8006fd4:	f7fd f9ce 	bl	8004374 <AddModuleToGroup>
		if(result != BOS_OK)
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d133      	bne.n	8007044 <groupCommand+0x13c>
		if(count > 2)
 8006fdc:	4643      	mov	r3, r8
 8006fde:	56e7      	ldrsb	r7, [r4, r3]
 8006fe0:	2f02      	cmp	r7, #2
 8006fe2:	ddd8      	ble.n	8006f96 <groupCommand+0x8e>
			strcat((char* )pcWriteBuffer,", ");
 8006fe4:	0028      	movs	r0, r5
 8006fe6:	f7f9 f897 	bl	8000118 <strlen>
 8006fea:	2203      	movs	r2, #3
 8006fec:	1828      	adds	r0, r5, r0
 8006fee:	4929      	ldr	r1, [pc, #164]	; (8007094 <groupCommand+0x18c>)
 8006ff0:	f00b fe55 	bl	8012c9e <memcpy>
 8006ff4:	e7cf      	b.n	8006f96 <groupCommand+0x8e>
			type =0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	469a      	mov	sl, r3
 8006ffa:	e7b6      	b.n	8006f6a <groupCommand+0x62>
	configASSERT(pcWriteBuffer);
 8006ffc:	b672      	cpsid	i
 8006ffe:	e7fe      	b.n	8006ffe <groupCommand+0xf6>
	else if(count == 2)
 8007000:	57e3      	ldrsb	r3, [r4, r7]
 8007002:	2b02      	cmp	r3, #2
 8007004:	d018      	beq.n	8007038 <groupCommand+0x130>
	else if(result == BOS_OK && type){
 8007006:	4653      	mov	r3, sl
		sprintf(module,(char* )pcMessageOKnew,alias);
 8007008:	aa01      	add	r2, sp, #4
 800700a:	4923      	ldr	r1, [pc, #140]	; (8007098 <groupCommand+0x190>)
	else if(result == BOS_OK && type){
 800700c:	2b00      	cmp	r3, #0
 800700e:	d100      	bne.n	8007012 <groupCommand+0x10a>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8007010:	4922      	ldr	r1, [pc, #136]	; (800709c <groupCommand+0x194>)
 8007012:	0030      	movs	r0, r6
 8007014:	f00c f846 	bl	80130a4 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8007018:	0031      	movs	r1, r6
 800701a:	0028      	movs	r0, r5
 800701c:	f00c f862 	bl	80130e4 <strcat>
}
 8007020:	2000      	movs	r0, #0
 8007022:	b00f      	add	sp, #60	; 0x3c
 8007024:	bc3c      	pop	{r2, r3, r4, r5}
 8007026:	4690      	mov	r8, r2
 8007028:	4699      	mov	r9, r3
 800702a:	46a2      	mov	sl, r4
 800702c:	46ab      	mov	fp, r5
 800702e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8007030:	4643      	mov	r3, r8
 8007032:	56e3      	ldrsb	r3, [r4, r3]
 8007034:	2b02      	cmp	r3, #2
 8007036:	d1e6      	bne.n	8007006 <groupCommand+0xfe>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8007038:	aa01      	add	r2, sp, #4
 800703a:	4919      	ldr	r1, [pc, #100]	; (80070a0 <groupCommand+0x198>)
 800703c:	0028      	movs	r0, r5
 800703e:	f00c f831 	bl	80130a4 <sprintf>
 8007042:	e7ed      	b.n	8007020 <groupCommand+0x118>
	else if(count == 2)
 8007044:	2354      	movs	r3, #84	; 0x54
 8007046:	56e3      	ldrsb	r3, [r4, r3]
 8007048:	2b02      	cmp	r3, #2
 800704a:	d0f5      	beq.n	8007038 <groupCommand+0x130>
	else if(result == BOS_ERR_Keyword)
 800704c:	2806      	cmp	r0, #6
 800704e:	d015      	beq.n	800707c <groupCommand+0x174>
	else if(result == BOS_ERR_ExistingAlias)
 8007050:	2807      	cmp	r0, #7
 8007052:	d00d      	beq.n	8007070 <groupCommand+0x168>
	else if(result == BOS_ERR_ExistingCmd)
 8007054:	2808      	cmp	r0, #8
 8007056:	d1e3      	bne.n	8007020 <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8007058:	aa01      	add	r2, sp, #4
 800705a:	4912      	ldr	r1, [pc, #72]	; (80070a4 <groupCommand+0x19c>)
 800705c:	0028      	movs	r0, r5
 800705e:	f00c f821 	bl	80130a4 <sprintf>
 8007062:	e7dd      	b.n	8007020 <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8007064:	0032      	movs	r2, r6
 8007066:	4910      	ldr	r1, [pc, #64]	; (80070a8 <groupCommand+0x1a0>)
 8007068:	0028      	movs	r0, r5
 800706a:	f00c f81b 	bl	80130a4 <sprintf>
	return pdFALSE;
 800706e:	e7d7      	b.n	8007020 <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8007070:	aa01      	add	r2, sp, #4
 8007072:	490e      	ldr	r1, [pc, #56]	; (80070ac <groupCommand+0x1a4>)
 8007074:	0028      	movs	r0, r5
 8007076:	f00c f815 	bl	80130a4 <sprintf>
 800707a:	e7d1      	b.n	8007020 <groupCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 800707c:	aa01      	add	r2, sp, #4
 800707e:	490c      	ldr	r1, [pc, #48]	; (80070b0 <groupCommand+0x1a8>)
 8007080:	0028      	movs	r0, r5
 8007082:	f00c f80f 	bl	80130a4 <sprintf>
 8007086:	e7cb      	b.n	8007020 <groupCommand+0x118>
 8007088:	20001280 	.word	0x20001280
 800708c:	20000ad0 	.word	0x20000ad0
 8007090:	08018f98 	.word	0x08018f98
 8007094:	08018fa4 	.word	0x08018fa4
 8007098:	08018fd4 	.word	0x08018fd4
 800709c:	08018ff0 	.word	0x08018ff0
 80070a0:	08018fa8 	.word	0x08018fa8
 80070a4:	08019084 	.word	0x08019084
 80070a8:	080190c4 	.word	0x080190c4
 80070ac:	08019050 	.word	0x08019050
 80070b0:	08019010 	.word	0x08019010

080070b4 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070b4:	b570      	push	{r4, r5, r6, lr}
 80070b6:	0005      	movs	r5, r0
 80070b8:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 80070ba:	2d00      	cmp	r5, #0
 80070bc:	d01a      	beq.n	80070f4 <nameCommand+0x40>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070be:	4c1b      	ldr	r4, [pc, #108]	; (800712c <nameCommand+0x78>)
 80070c0:	2101      	movs	r1, #1
 80070c2:	0022      	movs	r2, r4
 80070c4:	3260      	adds	r2, #96	; 0x60
 80070c6:	f006 fbcd 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(xParameterStringLength1 > MaxLengthOfAlias){
 80070ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070cc:	0001      	movs	r1, r0
 80070ce:	6660      	str	r0, [r4, #100]	; 0x64
	if(xParameterStringLength1 > MaxLengthOfAlias){
 80070d0:	2b09      	cmp	r3, #9
 80070d2:	dd01      	ble.n	80070d8 <nameCommand+0x24>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 80070d4:	2300      	movs	r3, #0
 80070d6:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 80070d8:	4e15      	ldr	r6, [pc, #84]	; (8007130 <nameCommand+0x7c>)
 80070da:	7830      	ldrb	r0, [r6, #0]
 80070dc:	f7fd f8e0 	bl	80042a0 <NameModule>
	if(result == BOS_OK)
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d009      	beq.n	80070f8 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 80070e4:	2806      	cmp	r0, #6
 80070e6:	d01a      	beq.n	800711e <nameCommand+0x6a>
	else if(result == BOS_ERR_ExistingAlias)
 80070e8:	2807      	cmp	r0, #7
 80070ea:	d012      	beq.n	8007112 <nameCommand+0x5e>
	else if(result == BOS_ERR_ExistingCmd)
 80070ec:	2808      	cmp	r0, #8
 80070ee:	d00a      	beq.n	8007106 <nameCommand+0x52>
}
 80070f0:	2000      	movs	r0, #0
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80070f4:	b672      	cpsid	i
 80070f6:	e7fe      	b.n	80070f6 <nameCommand+0x42>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 80070f8:	7832      	ldrb	r2, [r6, #0]
 80070fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070fc:	490d      	ldr	r1, [pc, #52]	; (8007134 <nameCommand+0x80>)
 80070fe:	0028      	movs	r0, r5
 8007100:	f00b ffd0 	bl	80130a4 <sprintf>
 8007104:	e7f4      	b.n	80070f0 <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8007106:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007108:	490b      	ldr	r1, [pc, #44]	; (8007138 <nameCommand+0x84>)
 800710a:	0028      	movs	r0, r5
 800710c:	f00b ffca 	bl	80130a4 <sprintf>
 8007110:	e7ee      	b.n	80070f0 <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8007112:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007114:	4909      	ldr	r1, [pc, #36]	; (800713c <nameCommand+0x88>)
 8007116:	0028      	movs	r0, r5
 8007118:	f00b ffc4 	bl	80130a4 <sprintf>
 800711c:	e7e8      	b.n	80070f0 <nameCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 800711e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007120:	4907      	ldr	r1, [pc, #28]	; (8007140 <nameCommand+0x8c>)
 8007122:	0028      	movs	r0, r5
 8007124:	f00b ffbe 	bl	80130a4 <sprintf>
 8007128:	e7e2      	b.n	80070f0 <nameCommand+0x3c>
 800712a:	46c0      	nop			; (mov r8, r8)
 800712c:	20001280 	.word	0x20001280
 8007130:	20000a98 	.word	0x20000a98
 8007134:	080190e8 	.word	0x080190e8
 8007138:	08019084 	.word	0x08019084
 800713c:	08019050 	.word	0x08019050
 8007140:	08019010 	.word	0x08019010

08007144 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007146:	46c6      	mov	lr, r8
 8007148:	b500      	push	{lr}
 800714a:	0005      	movs	r5, r0
 800714c:	b082      	sub	sp, #8
 800714e:	4690      	mov	r8, r2
	configASSERT(pcWriteBuffer);
 8007150:	2800      	cmp	r0, #0
 8007152:	d018      	beq.n	8007186 <bootloaderUpdateCommand+0x42>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007154:	4c4d      	ldr	r4, [pc, #308]	; (800728c <bootloaderUpdateCommand+0x148>)
 8007156:	2101      	movs	r1, #1
 8007158:	0022      	movs	r2, r4
 800715a:	4640      	mov	r0, r8
 800715c:	3268      	adds	r2, #104	; 0x68
 800715e:	f006 fb81 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8007162:	2800      	cmp	r0, #0
 8007164:	d048      	beq.n	80071f8 <bootloaderUpdateCommand+0xb4>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8007166:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007168:	4949      	ldr	r1, [pc, #292]	; (8007290 <bootloaderUpdateCommand+0x14c>)
 800716a:	f00b ffdf 	bl	801312c <strncmp>
 800716e:	2800      	cmp	r0, #0
 8007170:	d00b      	beq.n	800718a <bootloaderUpdateCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8007172:	220f      	movs	r2, #15
 8007174:	4947      	ldr	r1, [pc, #284]	; (8007294 <bootloaderUpdateCommand+0x150>)
 8007176:	0028      	movs	r0, r5
 8007178:	f00b fd91 	bl	8012c9e <memcpy>
}
 800717c:	2000      	movs	r0, #0
 800717e:	b002      	add	sp, #8
 8007180:	bc04      	pop	{r2}
 8007182:	4690      	mov	r8, r2
 8007184:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8007186:	b672      	cpsid	i
 8007188:	e7fe      	b.n	8007188 <bootloaderUpdateCommand+0x44>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800718a:	0022      	movs	r2, r4
 800718c:	2102      	movs	r1, #2
 800718e:	326c      	adds	r2, #108	; 0x6c
 8007190:	4640      	mov	r0, r8
 8007192:	f006 fb67 	bl	800d864 <FreeRTOS_CLIGetParameter>
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007196:	0022      	movs	r2, r4
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007198:	6720      	str	r0, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800719a:	3274      	adds	r2, #116	; 0x74
 800719c:	2103      	movs	r1, #3
 800719e:	4640      	mov	r0, r8
 80071a0:	f006 fb60 	bl	800d864 <FreeRTOS_CLIGetParameter>
			if(pcParameterString2[0] == '#'){
 80071a4:	2200      	movs	r2, #0
				result =BOS_ERR_WrongValue;
 80071a6:	2168      	movs	r1, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 80071a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80071aa:	67a0      	str	r0, [r4, #120]	; 0x78
			if(pcParameterString2[0] == '#'){
 80071ac:	569a      	ldrsb	r2, [r3, r2]
				result =BOS_ERR_WrongValue;
 80071ae:	4688      	mov	r8, r1
			if(pcParameterString2[0] == '#'){
 80071b0:	2a23      	cmp	r2, #35	; 0x23
 80071b2:	d062      	beq.n	800727a <bootloaderUpdateCommand+0x136>
			if(pcParameterString3[0] == 'p'){
 80071b4:	2300      	movs	r3, #0
 80071b6:	56c3      	ldrsb	r3, [r0, r3]
 80071b8:	2b70      	cmp	r3, #112	; 0x70
 80071ba:	d059      	beq.n	8007270 <bootloaderUpdateCommand+0x12c>
				result =BOS_ERR_WrongValue;
 80071bc:	2368      	movs	r3, #104	; 0x68
 80071be:	4698      	mov	r8, r3
			if(module != myID){
 80071c0:	4c35      	ldr	r4, [pc, #212]	; (8007298 <bootloaderUpdateCommand+0x154>)
 80071c2:	7823      	ldrb	r3, [r4, #0]
 80071c4:	42bb      	cmp	r3, r7
 80071c6:	d041      	beq.n	800724c <bootloaderUpdateCommand+0x108>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80071c8:	2200      	movs	r2, #0
 80071ca:	4b34      	ldr	r3, [pc, #208]	; (800729c <bootloaderUpdateCommand+0x158>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80071cc:	211a      	movs	r1, #26
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80071ce:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 80071d0:	4b33      	ldr	r3, [pc, #204]	; (80072a0 <bootloaderUpdateCommand+0x15c>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80071d2:	3201      	adds	r2, #1
 80071d4:	0038      	movs	r0, r7
				messageParams[0] =port;
 80071d6:	701e      	strb	r6, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80071d8:	f002 fc5e 	bl	8009a98 <SendMessageToModule>
				osDelay(100);
 80071dc:	2064      	movs	r0, #100	; 0x64
 80071de:	f006 fa31 	bl	800d644 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 80071e2:	4b30      	ldr	r3, [pc, #192]	; (80072a4 <bootloaderUpdateCommand+0x160>)
 80071e4:	7820      	ldrb	r0, [r4, #0]
 80071e6:	781a      	ldrb	r2, [r3, #0]
 80071e8:	0039      	movs	r1, r7
 80071ea:	0033      	movs	r3, r6
 80071ec:	f7fc fca8 	bl	8003b40 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 80071f0:	4643      	mov	r3, r8
 80071f2:	2b68      	cmp	r3, #104	; 0x68
 80071f4:	d1c2      	bne.n	800717c <bootloaderUpdateCommand+0x38>
 80071f6:	e7bc      	b.n	8007172 <bootloaderUpdateCommand+0x2e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 80071f8:	4b27      	ldr	r3, [pc, #156]	; (8007298 <bootloaderUpdateCommand+0x154>)
 80071fa:	492b      	ldr	r1, [pc, #172]	; (80072a8 <bootloaderUpdateCommand+0x164>)
 80071fc:	781a      	ldrb	r2, [r3, #0]
 80071fe:	0028      	movs	r0, r5
 8007200:	f00b ff50 	bl	80130a4 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8007204:	4b29      	ldr	r3, [pc, #164]	; (80072ac <bootloaderUpdateCommand+0x168>)
 8007206:	0028      	movs	r0, r5
 8007208:	6819      	ldr	r1, [r3, #0]
 800720a:	f00b ff6b 	bl	80130e4 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800720e:	0028      	movs	r0, r5
 8007210:	f7f8 ff82 	bl	8000118 <strlen>
 8007214:	4b23      	ldr	r3, [pc, #140]	; (80072a4 <bootloaderUpdateCommand+0x160>)
 8007216:	b282      	uxth	r2, r0
 8007218:	7818      	ldrb	r0, [r3, #0]
 800721a:	2301      	movs	r3, #1
 800721c:	425b      	negs	r3, r3
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	0029      	movs	r1, r5
 8007222:	3333      	adds	r3, #51	; 0x33
 8007224:	f006 f8c2 	bl	800d3ac <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8007228:	4b21      	ldr	r3, [pc, #132]	; (80072b0 <bootloaderUpdateCommand+0x16c>)
 800722a:	4a22      	ldr	r2, [pc, #136]	; (80072b4 <bootloaderUpdateCommand+0x170>)
		osDelay(10);
 800722c:	200a      	movs	r0, #10
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800722e:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8007230:	2201      	movs	r2, #1
 8007232:	4b21      	ldr	r3, [pc, #132]	; (80072b8 <bootloaderUpdateCommand+0x174>)
 8007234:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8007236:	f006 fa05 	bl	800d644 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	4b1f      	ldr	r3, [pc, #124]	; (80072bc <bootloaderUpdateCommand+0x178>)
 8007240:	4a1f      	ldr	r2, [pc, #124]	; (80072c0 <bootloaderUpdateCommand+0x17c>)
 8007242:	60da      	str	r2, [r3, #12]
 8007244:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007248:	46c0      	nop			; (mov r8, r8)
 800724a:	e7fd      	b.n	8007248 <bootloaderUpdateCommand+0x104>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 800724c:	2100      	movs	r1, #0
 800724e:	2319      	movs	r3, #25
 8007250:	9100      	str	r1, [sp, #0]
 8007252:	000a      	movs	r2, r1
 8007254:	0030      	movs	r0, r6
 8007256:	f002 f9bf 	bl	80095d8 <SendMessageFromPort>
				osDelay(100);
 800725a:	2064      	movs	r0, #100	; 0x64
 800725c:	f006 f9f2 	bl	800d644 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8007260:	7820      	ldrb	r0, [r4, #0]
 8007262:	4b10      	ldr	r3, [pc, #64]	; (80072a4 <bootloaderUpdateCommand+0x160>)
 8007264:	0001      	movs	r1, r0
 8007266:	781a      	ldrb	r2, [r3, #0]
 8007268:	0033      	movs	r3, r6
 800726a:	f7fc fc69 	bl	8003b40 <remoteBootloaderUpdate>
 800726e:	e7bf      	b.n	80071f0 <bootloaderUpdateCommand+0xac>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007270:	3001      	adds	r0, #1
 8007272:	f00b fa54 	bl	801271e <atol>
 8007276:	b2c6      	uxtb	r6, r0
 8007278:	e7a2      	b.n	80071c0 <bootloaderUpdateCommand+0x7c>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800727a:	1c58      	adds	r0, r3, #1
 800727c:	f00b fa4f 	bl	801271e <atol>
	BOS_Status result =BOS_OK;
 8007280:	2300      	movs	r3, #0
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8007282:	b2c7      	uxtb	r7, r0
	BOS_Status result =BOS_OK;
 8007284:	4698      	mov	r8, r3
 8007286:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007288:	e794      	b.n	80071b4 <bootloaderUpdateCommand+0x70>
 800728a:	46c0      	nop			; (mov r8, r8)
 800728c:	20001280 	.word	0x20001280
 8007290:	08019120 	.word	0x08019120
 8007294:	08018b98 	.word	0x08018b98
 8007298:	20000a98 	.word	0x20000a98
 800729c:	20006e28 	.word	0x20006e28
 80072a0:	20000b3c 	.word	0x20000b3c
 80072a4:	20000c28 	.word	0x20000c28
 80072a8:	08019100 	.word	0x08019100
 80072ac:	20000084 	.word	0x20000084
 80072b0:	20007ff0 	.word	0x20007ff0
 80072b4:	deadbeef 	.word	0xdeadbeef
 80072b8:	2000117e 	.word	0x2000117e
 80072bc:	e000ed00 	.word	0xe000ed00
 80072c0:	05fa0004 	.word	0x05fa0004

080072c4 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80072c4:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d01f      	beq.n	800730a <pingCommand+0x46>
	if(!moduleAlias[myID][0])
 80072ca:	4b13      	ldr	r3, [pc, #76]	; (8007318 <pingCommand+0x54>)
 80072cc:	4913      	ldr	r1, [pc, #76]	; (800731c <pingCommand+0x58>)
 80072ce:	781a      	ldrb	r2, [r3, #0]
 80072d0:	0093      	lsls	r3, r2, #2
 80072d2:	189b      	adds	r3, r3, r2
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	5c5c      	ldrb	r4, [r3, r1]
 80072d8:	2c00      	cmp	r4, #0
 80072da:	d018      	beq.n	800730e <pingCommand+0x4a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80072dc:	185b      	adds	r3, r3, r1
 80072de:	4910      	ldr	r1, [pc, #64]	; (8007320 <pingCommand+0x5c>)
 80072e0:	f00b fee0 	bl	80130a4 <sprintf>
	RTOS_IND_blink(200);
 80072e4:	2180      	movs	r1, #128	; 0x80
 80072e6:	2090      	movs	r0, #144	; 0x90
 80072e8:	2201      	movs	r2, #1
 80072ea:	0109      	lsls	r1, r1, #4
 80072ec:	05c0      	lsls	r0, r0, #23
 80072ee:	f009 fd79 	bl	8010de4 <HAL_GPIO_WritePin>
 80072f2:	20c8      	movs	r0, #200	; 0xc8
 80072f4:	f006 f9a6 	bl	800d644 <osDelay>
 80072f8:	2180      	movs	r1, #128	; 0x80
 80072fa:	2090      	movs	r0, #144	; 0x90
 80072fc:	2200      	movs	r2, #0
 80072fe:	0109      	lsls	r1, r1, #4
 8007300:	05c0      	lsls	r0, r0, #23
 8007302:	f009 fd6f 	bl	8010de4 <HAL_GPIO_WritePin>
}
 8007306:	2000      	movs	r0, #0
 8007308:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 800730a:	b672      	cpsid	i
 800730c:	e7fe      	b.n	800730c <pingCommand+0x48>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 800730e:	4905      	ldr	r1, [pc, #20]	; (8007324 <pingCommand+0x60>)
 8007310:	f00b fec8 	bl	80130a4 <sprintf>
 8007314:	e7e6      	b.n	80072e4 <pingCommand+0x20>
 8007316:	46c0      	nop			; (mov r8, r8)
 8007318:	20000a98 	.word	0x20000a98
 800731c:	20000dfc 	.word	0x20000dfc
 8007320:	08019138 	.word	0x08019138
 8007324:	08019124 	.word	0x08019124

08007328 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007328:	b510      	push	{r4, lr}
 800732a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800732c:	d101      	bne.n	8007332 <prvRunTimeStatsCommand+0xa>
 800732e:	b672      	cpsid	i
 8007330:	e7fe      	b.n	8007330 <prvRunTimeStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007332:	2241      	movs	r2, #65	; 0x41
 8007334:	4904      	ldr	r1, [pc, #16]	; (8007348 <prvRunTimeStatsCommand+0x20>)
 8007336:	f00b fcb2 	bl	8012c9e <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 800733a:	0020      	movs	r0, r4
 800733c:	3040      	adds	r0, #64	; 0x40
 800733e:	f007 fc8b 	bl	800ec58 <vTaskGetRunTimeStats>
}
 8007342:	2000      	movs	r0, #0
 8007344:	bd10      	pop	{r4, pc}
 8007346:	46c0      	nop			; (mov r8, r8)
 8007348:	08019154 	.word	0x08019154

0800734c <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800734c:	b510      	push	{r4, lr}
 800734e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007350:	d101      	bne.n	8007356 <prvTaskStatsCommand+0xa>
 8007352:	b672      	cpsid	i
 8007354:	e7fe      	b.n	8007354 <prvTaskStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007356:	2250      	movs	r2, #80	; 0x50
 8007358:	4904      	ldr	r1, [pc, #16]	; (800736c <prvTaskStatsCommand+0x20>)
 800735a:	f00b fca0 	bl	8012c9e <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 800735e:	0020      	movs	r0, r4
 8007360:	304f      	adds	r0, #79	; 0x4f
 8007362:	f007 fc1f 	bl	800eba4 <vTaskList>
}
 8007366:	2000      	movs	r0, #0
 8007368:	bd10      	pop	{r4, pc}
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	08019198 	.word	0x08019198

08007370 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007374:	d023      	beq.n	80073be <uuidCommand+0x4e>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8007376:	220e      	movs	r2, #14
 8007378:	4912      	ldr	r1, [pc, #72]	; (80073c4 <uuidCommand+0x54>)
 800737a:	f00b fc90 	bl	8012c9e <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 800737e:	4d12      	ldr	r5, [pc, #72]	; (80073c8 <uuidCommand+0x58>)
 8007380:	4b12      	ldr	r3, [pc, #72]	; (80073cc <uuidCommand+0x5c>)
 8007382:	0029      	movs	r1, r5
 8007384:	0022      	movs	r2, r4
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	0020      	movs	r0, r4
 800738a:	f00b fe8b 	bl	80130a4 <sprintf>
 800738e:	4b10      	ldr	r3, [pc, #64]	; (80073d0 <uuidCommand+0x60>)
 8007390:	0029      	movs	r1, r5
 8007392:	0022      	movs	r2, r4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	0020      	movs	r0, r4
 8007398:	f00b fe84 	bl	80130a4 <sprintf>
 800739c:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <uuidCommand+0x64>)
 800739e:	0029      	movs	r1, r5
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	0022      	movs	r2, r4
 80073a4:	0020      	movs	r0, r4
 80073a6:	f00b fe7d 	bl	80130a4 <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 80073aa:	0020      	movs	r0, r4
 80073ac:	f7f8 feb4 	bl	8000118 <strlen>
 80073b0:	2203      	movs	r2, #3
 80073b2:	1820      	adds	r0, r4, r0
 80073b4:	4908      	ldr	r1, [pc, #32]	; (80073d8 <uuidCommand+0x68>)
 80073b6:	f00b fc72 	bl	8012c9e <memcpy>
}
 80073ba:	2000      	movs	r0, #0
 80073bc:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80073be:	b672      	cpsid	i
 80073c0:	e7fe      	b.n	80073c0 <uuidCommand+0x50>
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	080191e8 	.word	0x080191e8
 80073c8:	080191f8 	.word	0x080191f8
 80073cc:	1ffff7ac 	.word	0x1ffff7ac
 80073d0:	1ffff7b0 	.word	0x1ffff7b0
 80073d4:	1ffff7b4 	.word	0x1ffff7b4
 80073d8:	08019ac0 	.word	0x08019ac0

080073dc <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80073dc:	b510      	push	{r4, lr}
 80073de:	0004      	movs	r4, r0
 80073e0:	b084      	sub	sp, #16
	configASSERT(pcWriteBuffer);
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d00a      	beq.n	80073fc <timeCommand+0x20>
	GetTimeDate();
 80073e6:	f005 fd89 	bl	800cefc <GetTimeDate>
	if(BOS.hourformat == 24)
 80073ea:	4916      	ldr	r1, [pc, #88]	; (8007444 <timeCommand+0x68>)
 80073ec:	7b4b      	ldrb	r3, [r1, #13]
 80073ee:	2b18      	cmp	r3, #24
 80073f0:	d006      	beq.n	8007400 <timeCommand+0x24>
	else if(BOS.hourformat == 12){
 80073f2:	2b0c      	cmp	r3, #12
 80073f4:	d00f      	beq.n	8007416 <timeCommand+0x3a>
}
 80073f6:	2000      	movs	r0, #0
 80073f8:	b004      	add	sp, #16
 80073fa:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 80073fc:	b672      	cpsid	i
 80073fe:	e7fe      	b.n	80073fe <timeCommand+0x22>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8007400:	89c8      	ldrh	r0, [r1, #14]
 8007402:	7c4b      	ldrb	r3, [r1, #17]
 8007404:	7c8a      	ldrb	r2, [r1, #18]
 8007406:	9001      	str	r0, [sp, #4]
 8007408:	7c09      	ldrb	r1, [r1, #16]
 800740a:	0020      	movs	r0, r4
 800740c:	9100      	str	r1, [sp, #0]
 800740e:	490e      	ldr	r1, [pc, #56]	; (8007448 <timeCommand+0x6c>)
 8007410:	f00b fe48 	bl	80130a4 <sprintf>
 8007414:	e7ef      	b.n	80073f6 <timeCommand+0x1a>
		if(BOS.time.ampm == RTC_AM)
 8007416:	7ccb      	ldrb	r3, [r1, #19]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d00e      	beq.n	800743a <timeCommand+0x5e>
		else if(BOS.time.ampm == RTC_PM)
 800741c:	2b02      	cmp	r3, #2
 800741e:	d1ea      	bne.n	80073f6 <timeCommand+0x1a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8007420:	7c4b      	ldrb	r3, [r1, #17]
 8007422:	7c8a      	ldrb	r2, [r1, #18]
 8007424:	4809      	ldr	r0, [pc, #36]	; (800744c <timeCommand+0x70>)
 8007426:	9002      	str	r0, [sp, #8]
 8007428:	89c8      	ldrh	r0, [r1, #14]
 800742a:	9001      	str	r0, [sp, #4]
 800742c:	7c09      	ldrb	r1, [r1, #16]
 800742e:	0020      	movs	r0, r4
 8007430:	9100      	str	r1, [sp, #0]
 8007432:	4907      	ldr	r1, [pc, #28]	; (8007450 <timeCommand+0x74>)
 8007434:	f00b fe36 	bl	80130a4 <sprintf>
 8007438:	e7dd      	b.n	80073f6 <timeCommand+0x1a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 800743a:	7c4b      	ldrb	r3, [r1, #17]
 800743c:	7c8a      	ldrb	r2, [r1, #18]
 800743e:	4805      	ldr	r0, [pc, #20]	; (8007454 <timeCommand+0x78>)
 8007440:	e7f1      	b.n	8007426 <timeCommand+0x4a>
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	20006ea8 	.word	0x20006ea8
 8007448:	08019200 	.word	0x08019200
 800744c:	08019258 	.word	0x08019258
 8007450:	08019228 	.word	0x08019228
 8007454:	08019254 	.word	0x08019254

08007458 <resetCommand>:
	configASSERT(pcWriteBuffer);
 8007458:	2800      	cmp	r0, #0
 800745a:	d008      	beq.n	800746e <resetCommand+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	4b04      	ldr	r3, [pc, #16]	; (8007474 <resetCommand+0x1c>)
 8007462:	4a05      	ldr	r2, [pc, #20]	; (8007478 <resetCommand+0x20>)
 8007464:	60da      	str	r2, [r3, #12]
 8007466:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800746a:	46c0      	nop			; (mov r8, r8)
 800746c:	e7fd      	b.n	800746a <resetCommand+0x12>
 800746e:	b672      	cpsid	i
 8007470:	e7fe      	b.n	8007470 <resetCommand+0x18>
 8007472:	46c0      	nop			; (mov r8, r8)
 8007474:	e000ed00 	.word	0xe000ed00
 8007478:	05fa0004 	.word	0x05fa0004

0800747c <RegisterUserCLICommands>:
}
 800747c:	4770      	bx	lr
 800747e:	46c0      	nop			; (mov r8, r8)

08007480 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8007480:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 8007482:	4c45      	ldr	r4, [pc, #276]	; (8007598 <vRegisterCLICommands+0x118>)
 8007484:	0020      	movs	r0, r4
 8007486:	f006 f955 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 800748a:	0020      	movs	r0, r4
 800748c:	3010      	adds	r0, #16
 800748e:	f006 f951 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 8007492:	0020      	movs	r0, r4
 8007494:	3020      	adds	r0, #32
 8007496:	f006 f94d 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 800749a:	0020      	movs	r0, r4
 800749c:	3030      	adds	r0, #48	; 0x30
 800749e:	f006 f949 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 80074a2:	0020      	movs	r0, r4
 80074a4:	3040      	adds	r0, #64	; 0x40
 80074a6:	f006 f945 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 80074aa:	0020      	movs	r0, r4
 80074ac:	3050      	adds	r0, #80	; 0x50
 80074ae:	f006 f941 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 80074b2:	0020      	movs	r0, r4
 80074b4:	3060      	adds	r0, #96	; 0x60
 80074b6:	f006 f93d 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80074ba:	0020      	movs	r0, r4
 80074bc:	3070      	adds	r0, #112	; 0x70
 80074be:	f006 f939 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80074c2:	4c36      	ldr	r4, [pc, #216]	; (800759c <vRegisterCLICommands+0x11c>)
 80074c4:	0020      	movs	r0, r4
 80074c6:	f006 f935 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 80074ca:	0020      	movs	r0, r4
 80074cc:	3010      	adds	r0, #16
 80074ce:	f006 f931 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 80074d2:	0020      	movs	r0, r4
 80074d4:	3020      	adds	r0, #32
 80074d6:	f006 f92d 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 80074da:	0020      	movs	r0, r4
 80074dc:	3030      	adds	r0, #48	; 0x30
 80074de:	f006 f929 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 80074e2:	0020      	movs	r0, r4
 80074e4:	3040      	adds	r0, #64	; 0x40
 80074e6:	f006 f925 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 80074ea:	0020      	movs	r0, r4
 80074ec:	3050      	adds	r0, #80	; 0x50
 80074ee:	f006 f921 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 80074f2:	0020      	movs	r0, r4
 80074f4:	3060      	adds	r0, #96	; 0x60
 80074f6:	f006 f91d 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 80074fa:	0020      	movs	r0, r4
 80074fc:	3070      	adds	r0, #112	; 0x70
 80074fe:	f006 f919 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 8007502:	4c27      	ldr	r4, [pc, #156]	; (80075a0 <vRegisterCLICommands+0x120>)
 8007504:	0020      	movs	r0, r4
 8007506:	f006 f915 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 800750a:	0020      	movs	r0, r4
 800750c:	3010      	adds	r0, #16
 800750e:	f006 f911 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 8007512:	0020      	movs	r0, r4
 8007514:	3020      	adds	r0, #32
 8007516:	f006 f90d 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 800751a:	0020      	movs	r0, r4
 800751c:	3030      	adds	r0, #48	; 0x30
 800751e:	f006 f909 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007522:	0020      	movs	r0, r4
 8007524:	3040      	adds	r0, #64	; 0x40
 8007526:	f006 f905 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 800752a:	0020      	movs	r0, r4
 800752c:	3050      	adds	r0, #80	; 0x50
 800752e:	f006 f901 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8007532:	0020      	movs	r0, r4
 8007534:	3060      	adds	r0, #96	; 0x60
 8007536:	f006 f8fd 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 800753a:	0020      	movs	r0, r4
 800753c:	3070      	adds	r0, #112	; 0x70
 800753e:	f006 f8f9 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 8007542:	4c18      	ldr	r4, [pc, #96]	; (80075a4 <vRegisterCLICommands+0x124>)
 8007544:	0020      	movs	r0, r4
 8007546:	f006 f8f5 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 800754a:	0020      	movs	r0, r4
 800754c:	3010      	adds	r0, #16
 800754e:	f006 f8f1 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8007552:	0020      	movs	r0, r4
 8007554:	3020      	adds	r0, #32
 8007556:	f006 f8ed 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 800755a:	0020      	movs	r0, r4
 800755c:	3030      	adds	r0, #48	; 0x30
 800755e:	f006 f8e9 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007562:	0020      	movs	r0, r4
 8007564:	3040      	adds	r0, #64	; 0x40
 8007566:	f006 f8e5 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 800756a:	0020      	movs	r0, r4
 800756c:	3050      	adds	r0, #80	; 0x50
 800756e:	f006 f8e1 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 8007572:	0020      	movs	r0, r4
 8007574:	3060      	adds	r0, #96	; 0x60
 8007576:	f006 f8dd 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 800757a:	0020      	movs	r0, r4
 800757c:	3070      	adds	r0, #112	; 0x70
 800757e:	f006 f8d9 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 8007582:	4809      	ldr	r0, [pc, #36]	; (80075a8 <vRegisterCLICommands+0x128>)
 8007584:	f006 f8d6 	bl	800d734 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 8007588:	2223      	movs	r2, #35	; 0x23
 800758a:	4b08      	ldr	r3, [pc, #32]	; (80075ac <vRegisterCLICommands+0x12c>)
 800758c:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 800758e:	f004 f8dd 	bl	800b74c <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 8007592:	f7ff ff73 	bl	800747c <RegisterUserCLICommands>
}
 8007596:	bd10      	pop	{r4, pc}
 8007598:	08017604 	.word	0x08017604
 800759c:	08017684 	.word	0x08017684
 80075a0:	08017704 	.word	0x08017704
 80075a4:	08017784 	.word	0x08017784
 80075a8:	08017804 	.word	0x08017804
 80075ac:	20006e24 	.word	0x20006e24

080075b0 <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 80075b0:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 80075b2:	1e44      	subs	r4, r0, #1
 80075b4:	00e5      	lsls	r5, r4, #3
 80075b6:	4e07      	ldr	r6, [pc, #28]	; (80075d4 <StopStreamDMA+0x24>)
 80075b8:	1b2d      	subs	r5, r5, r4
 80075ba:	00ed      	lsls	r5, r5, #3
 80075bc:	19a8      	adds	r0, r5, r6
	
	HAL_DMA_Abort(hDMA);
 80075be:	f008 fc67 	bl	800fe90 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	59aa      	ldr	r2, [r5, r6]
	dmaStreamCount[port - 1] =0;
 80075c6:	4804      	ldr	r0, [pc, #16]	; (80075d8 <StopStreamDMA+0x28>)
 80075c8:	00a4      	lsls	r4, r4, #2
	hDMA->Instance->CNDTR =0;
 80075ca:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 80075cc:	5023      	str	r3, [r4, r0]
	dmaStreamTotal[port - 1] =0;
 80075ce:	1904      	adds	r4, r0, r4
 80075d0:	61a3      	str	r3, [r4, #24]
	
}
 80075d2:	bd70      	pop	{r4, r5, r6, pc}
 80075d4:	20001c78 	.word	0x20001c78
 80075d8:	200012fc 	.word	0x200012fc

080075dc <SwitchMsgDMAToStream>:
	hDMA =&msgRxDMA[port - 1];
 80075dc:	3801      	subs	r0, #1

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 80075de:	b570      	push	{r4, r5, r6, lr}
 80075e0:	00c4      	lsls	r4, r0, #3
	hDMA =&msgRxDMA[port - 1];
 80075e2:	4d07      	ldr	r5, [pc, #28]	; (8007600 <SwitchMsgDMAToStream+0x24>)
 80075e4:	1a24      	subs	r4, r4, r0
 80075e6:	00e4      	lsls	r4, r4, #3
 80075e8:	1960      	adds	r0, r4, r5
	HAL_DMA_Abort(hDMA);
 80075ea:	f008 fc51 	bl	800fe90 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	5961      	ldr	r1, [r4, r5]
	
	// Stop the messaging DMA
	StopMsgDMA(port);
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 80075f2:	4804      	ldr	r0, [pc, #16]	; (8007604 <SwitchMsgDMAToStream+0x28>)
	hDMA->Instance->CNDTR =0;
 80075f4:	604b      	str	r3, [r1, #4]
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 80075f6:	1820      	adds	r0, r4, r0
 80075f8:	f004 f9ca 	bl	800b990 <DMA_STREAM_CH_Init>
}
 80075fc:	bd70      	pop	{r4, r5, r6, pc}
 80075fe:	46c0      	nop			; (mov r8, r8)
 8007600:	20001e70 	.word	0x20001e70
 8007604:	20001c78 	.word	0x20001c78

08007608 <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 8007608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800760a:	46d6      	mov	lr, sl
 800760c:	464f      	mov	r7, r9
 800760e:	4646      	mov	r6, r8
 8007610:	b5c0      	push	{r6, r7, lr}
	hDMA =&streamDMA[port - 1];
 8007612:	1e46      	subs	r6, r0, #1
 8007614:	00f4      	lsls	r4, r6, #3
 8007616:	4f15      	ldr	r7, [pc, #84]	; (800766c <SwitchStreamDMAToMsg+0x64>)
 8007618:	1ba4      	subs	r4, r4, r6
 800761a:	00e4      	lsls	r4, r4, #3
 800761c:	19e3      	adds	r3, r4, r7
void SwitchStreamDMAToMsg(uint8_t port){
 800761e:	4680      	mov	r8, r0
	HAL_DMA_Abort(hDMA);
 8007620:	0018      	movs	r0, r3
	hDMA =&streamDMA[port - 1];
 8007622:	4699      	mov	r9, r3
	HAL_DMA_Abort(hDMA);
 8007624:	f008 fc34 	bl	800fe90 <HAL_DMA_Abort>
	// Stop the streaming DMA
	StopStreamDMA(port);
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007628:	4b11      	ldr	r3, [pc, #68]	; (8007670 <SwitchStreamDMAToMsg+0x68>)
	hDMA->Instance->CNDTR =0;
 800762a:	2500      	movs	r5, #0
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 800762c:	469a      	mov	sl, r3
	hDMA->Instance->CNDTR =0;
 800762e:	59e1      	ldr	r1, [r4, r7]
	dmaStreamCount[port - 1] =0;
 8007630:	4a10      	ldr	r2, [pc, #64]	; (8007674 <SwitchStreamDMAToMsg+0x6c>)
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007632:	44a2      	add	sl, r4
	dmaStreamCount[port - 1] =0;
 8007634:	00b6      	lsls	r6, r6, #2
	hDMA->Instance->CNDTR =0;
 8007636:	604d      	str	r5, [r1, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007638:	4650      	mov	r0, sl
	dmaStreamCount[port - 1] =0;
 800763a:	50b5      	str	r5, [r6, r2]
	dmaStreamTotal[port - 1] =0;
 800763c:	1996      	adds	r6, r2, r6
 800763e:	61b5      	str	r5, [r6, #24]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007640:	f004 f994 	bl	800b96c <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 8007644:	464b      	mov	r3, r9
 8007646:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007648:	f004 f882 	bl	800b750 <GetPort>
 800764c:	4b0a      	ldr	r3, [pc, #40]	; (8007678 <SwitchStreamDMAToMsg+0x70>)
	streamDMA[port - 1].Instance =0;
 800764e:	51e5      	str	r5, [r4, r7]
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 8007650:	541d      	strb	r5, [r3, r0]
	dmaStreamDst[port - 1] =0;
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 8007652:	4640      	mov	r0, r8
	dmaStreamDst[port - 1] =0;
 8007654:	6335      	str	r5, [r6, #48]	; 0x30
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 8007656:	f005 ff31 	bl	800d4bc <GetUart>
 800765a:	4651      	mov	r1, sl
 800765c:	f004 fd46 	bl	800c0ec <DMA_MSG_RX_Setup>
	
}
 8007660:	bc1c      	pop	{r2, r3, r4}
 8007662:	4690      	mov	r8, r2
 8007664:	4699      	mov	r9, r3
 8007666:	46a2      	mov	sl, r4
 8007668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800766a:	46c0      	nop			; (mov r8, r8)
 800766c:	20001c78 	.word	0x20001c78
 8007670:	20001e70 	.word	0x20001e70
 8007674:	200012fc 	.word	0x200012fc
 8007678:	20000c2c 	.word	0x20000c2c

0800767c <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 800767c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800767e:	46c6      	mov	lr, r8
 8007680:	b500      	push	{lr}
 8007682:	0005      	movs	r5, r0
 8007684:	000f      	movs	r7, r1
 8007686:	4690      	mov	r8, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007688:	f004 f862 	bl	800b750 <GetPort>
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800768c:	4e0e      	ldr	r6, [pc, #56]	; (80076c8 <StartDMAstream+0x4c>)
	uint8_t srcPort =GetPort(huartSrc);
 800768e:	0004      	movs	r4, r0
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007690:	5c33      	ldrb	r3, [r6, r0]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d902      	bls.n	800769c <StartDMAstream+0x20>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007696:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007698:	2b03      	cmp	r3, #3
 800769a:	d111      	bne.n	80076c0 <StartDMAstream+0x44>
		SwitchMsgDMAToStream(srcPort);
 800769c:	0020      	movs	r0, r4
 800769e:	f7ff ff9d 	bl	80075dc <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 80076a2:	4a0a      	ldr	r2, [pc, #40]	; (80076cc <StartDMAstream+0x50>)
 80076a4:	1e63      	subs	r3, r4, #1
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	18d1      	adds	r1, r2, r3
 80076aa:	630f      	str	r7, [r1, #48]	; 0x30
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 80076ac:	2102      	movs	r1, #2
 80076ae:	5531      	strb	r1, [r6, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 80076b0:	2100      	movs	r1, #0
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80076b2:	0028      	movs	r0, r5
	dmaStreamCount[srcPort - 1] =0;
 80076b4:	5099      	str	r1, [r3, r2]
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80076b6:	4642      	mov	r2, r8
 80076b8:	0039      	movs	r1, r7
 80076ba:	f004 fd7d 	bl	800c1b8 <DMA_STREAM_Setup>
	
	return BOS_OK;
 80076be:	2000      	movs	r0, #0
}
 80076c0:	bc04      	pop	{r2}
 80076c2:	4690      	mov	r8, r2
 80076c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c6:	46c0      	nop			; (mov r8, r8)
 80076c8:	20000c2c 	.word	0x20000c2c
 80076cc:	200012fc 	.word	0x200012fc

080076d0 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	46ce      	mov	lr, r9
 80076d4:	4647      	mov	r7, r8
 80076d6:	b580      	push	{r7, lr}
	if(portStatus[port] != STREAM){
 80076d8:	4a19      	ldr	r2, [pc, #100]	; (8007740 <DMA_IRQHandler+0x70>)
 80076da:	1e45      	subs	r5, r0, #1
 80076dc:	00ee      	lsls	r6, r5, #3
 80076de:	5c12      	ldrb	r2, [r2, r0]
 80076e0:	1b73      	subs	r3, r6, r5
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	2a02      	cmp	r2, #2
 80076e6:	d007      	beq.n	80076f8 <DMA_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 80076e8:	4816      	ldr	r0, [pc, #88]	; (8007744 <DMA_IRQHandler+0x74>)
 80076ea:	1818      	adds	r0, r3, r0
 80076ec:	f008 fbf8 	bl	800fee0 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 80076f0:	bc0c      	pop	{r2, r3}
 80076f2:	4690      	mov	r8, r2
 80076f4:	4699      	mov	r9, r3
 80076f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80076f8:	4a13      	ldr	r2, [pc, #76]	; (8007748 <DMA_IRQHandler+0x78>)
		if(dmaStreamTotal[port - 1])
 80076fa:	00af      	lsls	r7, r5, #2
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80076fc:	4691      	mov	r9, r2
 80076fe:	444b      	add	r3, r9
 8007700:	0018      	movs	r0, r3
 8007702:	001c      	movs	r4, r3
 8007704:	f008 fbec 	bl	800fee0 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 8007708:	4b10      	ldr	r3, [pc, #64]	; (800774c <DMA_IRQHandler+0x7c>)
 800770a:	4698      	mov	r8, r3
 800770c:	19db      	adds	r3, r3, r7
 800770e:	699a      	ldr	r2, [r3, #24]
 8007710:	2a00      	cmp	r2, #0
 8007712:	d006      	beq.n	8007722 <DMA_IRQHandler+0x52>
			++dmaStreamCount[port - 1];
 8007714:	4643      	mov	r3, r8
 8007716:	4641      	mov	r1, r8
 8007718:	59db      	ldr	r3, [r3, r7]
 800771a:	3301      	adds	r3, #1
 800771c:	51cb      	str	r3, [r1, r7]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 800771e:	429a      	cmp	r2, r3
 8007720:	d8e6      	bhi.n	80076f0 <DMA_IRQHandler+0x20>
	HAL_DMA_Abort(hDMA);
 8007722:	0020      	movs	r0, r4
 8007724:	f008 fbb4 	bl	800fe90 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8007728:	464b      	mov	r3, r9
 800772a:	1b75      	subs	r5, r6, r5
 800772c:	00ed      	lsls	r5, r5, #3
 800772e:	595a      	ldr	r2, [r3, r5]
 8007730:	2300      	movs	r3, #0
 8007732:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 8007734:	4642      	mov	r2, r8
 8007736:	51d3      	str	r3, [r2, r7]
	dmaStreamTotal[port - 1] =0;
 8007738:	4447      	add	r7, r8
 800773a:	61bb      	str	r3, [r7, #24]
 800773c:	e7d8      	b.n	80076f0 <DMA_IRQHandler+0x20>
 800773e:	46c0      	nop			; (mov r8, r8)
 8007740:	20000c2c 	.word	0x20000c2c
 8007744:	20001e70 	.word	0x20001e70
 8007748:	20001c78 	.word	0x20001c78
 800774c:	200012fc 	.word	0x200012fc

08007750 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007750:	4b08      	ldr	r3, [pc, #32]	; (8007774 <ResetUartORE+0x24>)
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	2308      	movs	r3, #8
 8007756:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007758:	4a07      	ldr	r2, [pc, #28]	; (8007778 <ResetUartORE+0x28>)
 800775a:	6812      	ldr	r2, [r2, #0]
 800775c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800775e:	4a07      	ldr	r2, [pc, #28]	; (800777c <ResetUartORE+0x2c>)
 8007760:	6812      	ldr	r2, [r2, #0]
 8007762:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007764:	4a06      	ldr	r2, [pc, #24]	; (8007780 <ResetUartORE+0x30>)
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800776a:	4a06      	ldr	r2, [pc, #24]	; (8007784 <ResetUartORE+0x34>)
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	6213      	str	r3, [r2, #32]
#endif
}
 8007770:	4770      	bx	lr
 8007772:	46c0      	nop			; (mov r8, r8)
 8007774:	200070b8 	.word	0x200070b8
 8007778:	20007208 	.word	0x20007208
 800777c:	20006fd8 	.word	0x20006fd8
 8007780:	20007048 	.word	0x20007048
 8007784:	20007128 	.word	0x20007128

08007788 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	000d      	movs	r5, r1
 800778c:	0006      	movs	r6, r0
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800778e:	4c25      	ldr	r4, [pc, #148]	; (8007824 <EE_VerifyPageFullWriteVariable+0x9c>)
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 8007790:	f009 f846 	bl	8010820 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007794:	4924      	ldr	r1, [pc, #144]	; (8007828 <EE_VerifyPageFullWriteVariable+0xa0>)
 8007796:	880a      	ldrh	r2, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007798:	8823      	ldrh	r3, [r4, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800779a:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800779c:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d105      	bne.n	80077ae <EE_VerifyPageFullWriteVariable+0x26>
				if(PageStatusA == RECEIVE_DATA){
 80077a2:	4b22      	ldr	r3, [pc, #136]	; (800782c <EE_VerifyPageFullWriteVariable+0xa4>)
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d007      	beq.n	80077b8 <EE_VerifyPageFullWriteVariable+0x30>
 80077a8:	4a21      	ldr	r2, [pc, #132]	; (8007830 <EE_VerifyPageFullWriteVariable+0xa8>)
 80077aa:	0023      	movs	r3, r4
 80077ac:	e007      	b.n	80077be <EE_VerifyPageFullWriteVariable+0x36>
			else if(PageStatusA == VALID_PAGE){
 80077ae:	2a00      	cmp	r2, #0
 80077b0:	d122      	bne.n	80077f8 <EE_VerifyPageFullWriteVariable+0x70>
				if(PageStatusB == RECEIVE_DATA){
 80077b2:	4a1e      	ldr	r2, [pc, #120]	; (800782c <EE_VerifyPageFullWriteVariable+0xa4>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d0f7      	beq.n	80077a8 <EE_VerifyPageFullWriteVariable+0x20>
 80077b8:	000c      	movs	r4, r1
 80077ba:	000b      	movs	r3, r1
 80077bc:	4a1d      	ldr	r2, [pc, #116]	; (8007834 <EE_VerifyPageFullWriteVariable+0xac>)
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3301      	adds	r3, #1
 80077c2:	d103      	bne.n	80077cc <EE_VerifyPageFullWriteVariable+0x44>
 80077c4:	e009      	b.n	80077da <EE_VerifyPageFullWriteVariable+0x52>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	3301      	adds	r3, #1
 80077ca:	d006      	beq.n	80077da <EE_VerifyPageFullWriteVariable+0x52>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 80077cc:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 80077ce:	42a2      	cmp	r2, r4
 80077d0:	d8f9      	bhi.n	80077c6 <EE_VerifyPageFullWriteVariable+0x3e>
		}
	}
	
	HAL_FLASH_Lock();
 80077d2:	f009 f837 	bl	8010844 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 80077d6:	2080      	movs	r0, #128	; 0x80
}
 80077d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 80077da:	002a      	movs	r2, r5
 80077dc:	2300      	movs	r3, #0
 80077de:	0021      	movs	r1, r4
 80077e0:	2001      	movs	r0, #1
 80077e2:	f009 f87d 	bl	80108e0 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80077e6:	4814      	ldr	r0, [pc, #80]	; (8007838 <EE_VerifyPageFullWriteVariable+0xb0>)
 80077e8:	f009 f836 	bl	8010858 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d005      	beq.n	80077fc <EE_VerifyPageFullWriteVariable+0x74>
			return pFlash.ErrorCode;
 80077f0:	4b12      	ldr	r3, [pc, #72]	; (800783c <EE_VerifyPageFullWriteVariable+0xb4>)
 80077f2:	69d8      	ldr	r0, [r3, #28]
 80077f4:	b280      	uxth	r0, r0
 80077f6:	e7ef      	b.n	80077d8 <EE_VerifyPageFullWriteVariable+0x50>
		return NO_VALID_PAGE;
 80077f8:	20ab      	movs	r0, #171	; 0xab
 80077fa:	e7ed      	b.n	80077d8 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80077fc:	2701      	movs	r7, #1
 80077fe:	4d10      	ldr	r5, [pc, #64]	; (8007840 <EE_VerifyPageFullWriteVariable+0xb8>)
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007800:	1ca1      	adds	r1, r4, #2
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007802:	692b      	ldr	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007804:	0032      	movs	r2, r6
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007806:	43bb      	bics	r3, r7
 8007808:	612b      	str	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800780a:	2001      	movs	r0, #1
 800780c:	2300      	movs	r3, #0
 800780e:	f009 f867 	bl	80108e0 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007812:	4809      	ldr	r0, [pc, #36]	; (8007838 <EE_VerifyPageFullWriteVariable+0xb0>)
 8007814:	f009 f820 	bl	8010858 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007818:	2800      	cmp	r0, #0
 800781a:	d1e9      	bne.n	80077f0 <EE_VerifyPageFullWriteVariable+0x68>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800781c:	692b      	ldr	r3, [r5, #16]
 800781e:	43bb      	bics	r3, r7
 8007820:	612b      	str	r3, [r5, #16]
 8007822:	e7e5      	b.n	80077f0 <EE_VerifyPageFullWriteVariable+0x68>
 8007824:	0801f000 	.word	0x0801f000
 8007828:	0801e000 	.word	0x0801e000
 800782c:	0000eeee 	.word	0x0000eeee
 8007830:	0801fffe 	.word	0x0801fffe
 8007834:	0801effe 	.word	0x0801effe
 8007838:	0000c350 	.word	0x0000c350
 800783c:	200073a8 	.word	0x200073a8
 8007840:	40022000 	.word	0x40022000

08007844 <EE_ReadVariable>:
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007844:	4b11      	ldr	r3, [pc, #68]	; (800788c <EE_ReadVariable+0x48>)
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 8007846:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007848:	881a      	ldrh	r2, [r3, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800784a:	4b11      	ldr	r3, [pc, #68]	; (8007890 <EE_ReadVariable+0x4c>)
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 8007850:	2a00      	cmp	r2, #0
 8007852:	d005      	beq.n	8007860 <EE_ReadVariable+0x1c>
			else if(PageStatusB == VALID_PAGE){
 8007854:	2b00      	cmp	r3, #0
 8007856:	d117      	bne.n	8007888 <EE_ReadVariable+0x44>
 8007858:	4b0e      	ldr	r3, [pc, #56]	; (8007894 <EE_ReadVariable+0x50>)
 800785a:	4c0f      	ldr	r4, [pc, #60]	; (8007898 <EE_ReadVariable+0x54>)
 800785c:	001a      	movs	r2, r3
 800785e:	e002      	b.n	8007866 <EE_ReadVariable+0x22>
			if(PageStatusA == VALID_PAGE){
 8007860:	4b0e      	ldr	r3, [pc, #56]	; (800789c <EE_ReadVariable+0x58>)
 8007862:	4c0f      	ldr	r4, [pc, #60]	; (80078a0 <EE_ReadVariable+0x5c>)
 8007864:	001a      	movs	r2, r3
		AddressValue =(*(__IO uint16_t* )Address);
 8007866:	8812      	ldrh	r2, [r2, #0]
		if(AddressValue == VirtAddress){
 8007868:	4290      	cmp	r0, r2
 800786a:	d103      	bne.n	8007874 <EE_ReadVariable+0x30>
 800786c:	e007      	b.n	800787e <EE_ReadVariable+0x3a>
		AddressValue =(*(__IO uint16_t* )Address);
 800786e:	881a      	ldrh	r2, [r3, #0]
		if(AddressValue == VirtAddress){
 8007870:	4282      	cmp	r2, r0
 8007872:	d004      	beq.n	800787e <EE_ReadVariable+0x3a>
			Address =Address - 4;
 8007874:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 8007876:	42a3      	cmp	r3, r4
 8007878:	d8f9      	bhi.n	800786e <EE_ReadVariable+0x2a>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800787a:	2001      	movs	r0, #1
}
 800787c:	bd10      	pop	{r4, pc}
			*Data =(*(__IO uint16_t* )(Address - 2));
 800787e:	3b02      	subs	r3, #2
 8007880:	881b      	ldrh	r3, [r3, #0]
			ReadStatus =0;
 8007882:	2000      	movs	r0, #0
			*Data =(*(__IO uint16_t* )(Address - 2));
 8007884:	800b      	strh	r3, [r1, #0]
			break;
 8007886:	e7f9      	b.n	800787c <EE_ReadVariable+0x38>
		return NO_VALID_PAGE;
 8007888:	20ab      	movs	r0, #171	; 0xab
 800788a:	e7f7      	b.n	800787c <EE_ReadVariable+0x38>
 800788c:	0801e000 	.word	0x0801e000
 8007890:	0801f000 	.word	0x0801f000
 8007894:	0801fffe 	.word	0x0801fffe
 8007898:	0801f002 	.word	0x0801f002
 800789c:	0801effe 	.word	0x0801effe
 80078a0:	0801e002 	.word	0x0801e002

080078a4 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 80078a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078a6:	46d6      	mov	lr, sl
 80078a8:	4646      	mov	r6, r8
 80078aa:	464f      	mov	r7, r9
 80078ac:	000c      	movs	r4, r1
 80078ae:	b5c0      	push	{r6, r7, lr}
 80078b0:	0006      	movs	r6, r0
	HAL_FLASH_Unlock();
 80078b2:	f008 ffb5 	bl	8010820 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 80078b6:	0021      	movs	r1, r4
 80078b8:	0030      	movs	r0, r6
 80078ba:	f7ff ff65 	bl	8007788 <EE_VerifyPageFullWriteVariable>
 80078be:	0005      	movs	r5, r0
	if(Status == PAGE_FULL){
 80078c0:	2880      	cmp	r0, #128	; 0x80
 80078c2:	d007      	beq.n	80078d4 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 80078c4:	f008 ffbe 	bl	8010844 <HAL_FLASH_Lock>
}
 80078c8:	0028      	movs	r0, r5
 80078ca:	bc1c      	pop	{r2, r3, r4}
 80078cc:	4690      	mov	r8, r2
 80078ce:	4699      	mov	r9, r3
 80078d0:	46a2      	mov	sl, r4
 80078d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 80078d4:	f008 ffa4 	bl	8010820 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80078d8:	4935      	ldr	r1, [pc, #212]	; (80079b0 <EE_WriteVariable+0x10c>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80078da:	4a36      	ldr	r2, [pc, #216]	; (80079b4 <EE_WriteVariable+0x110>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80078dc:	8808      	ldrh	r0, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80078de:	8813      	ldrh	r3, [r2, #0]
 80078e0:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d013      	beq.n	800790e <EE_WriteVariable+0x6a>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 80078e6:	352b      	adds	r5, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1eb      	bne.n	80078c4 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 80078ec:	4691      	mov	r9, r2
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 80078ee:	4688      	mov	r8, r1
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 80078f0:	4a31      	ldr	r2, [pc, #196]	; (80079b8 <EE_WriteVariable+0x114>)
 80078f2:	2300      	movs	r3, #0
 80078f4:	4641      	mov	r1, r8
 80078f6:	2001      	movs	r0, #1
 80078f8:	f008 fff2 	bl	80108e0 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078fc:	482f      	ldr	r0, [pc, #188]	; (80079bc <EE_WriteVariable+0x118>)
 80078fe:	f008 ffab 	bl	8010858 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007902:	2800      	cmp	r0, #0
 8007904:	d006      	beq.n	8007914 <EE_WriteVariable+0x70>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
		return pFlash.ErrorCode;
 8007906:	4b2e      	ldr	r3, [pc, #184]	; (80079c0 <EE_WriteVariable+0x11c>)
 8007908:	69dd      	ldr	r5, [r3, #28]
 800790a:	b2ad      	uxth	r5, r5
 800790c:	e7da      	b.n	80078c4 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800790e:	4689      	mov	r9, r1
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007910:	4690      	mov	r8, r2
 8007912:	e7ed      	b.n	80078f0 <EE_WriteVariable+0x4c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007914:	2101      	movs	r1, #1
 8007916:	4a2b      	ldr	r2, [pc, #172]	; (80079c4 <EE_WriteVariable+0x120>)
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007918:	0030      	movs	r0, r6
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800791a:	6913      	ldr	r3, [r2, #16]
 800791c:	438b      	bics	r3, r1
 800791e:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007920:	0021      	movs	r1, r4
 8007922:	f7ff ff31 	bl	8007788 <EE_VerifyPageFullWriteVariable>
 8007926:	1e05      	subs	r5, r0, #0
	if(EepromStatus != HAL_OK){
 8007928:	d1cc      	bne.n	80078c4 <EE_WriteVariable+0x20>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800792a:	4b27      	ldr	r3, [pc, #156]	; (80079c8 <EE_WriteVariable+0x124>)
 800792c:	2401      	movs	r4, #1
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800792e:	4f27      	ldr	r7, [pc, #156]	; (80079cc <EE_WriteVariable+0x128>)
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007930:	469a      	mov	sl, r3
 8007932:	e003      	b.n	800793c <EE_WriteVariable+0x98>
 8007934:	3401      	adds	r4, #1
 8007936:	b2a4      	uxth	r4, r4
 8007938:	4554      	cmp	r4, sl
 800793a:	d00f      	beq.n	800795c <EE_WriteVariable+0xb8>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800793c:	42a6      	cmp	r6, r4
 800793e:	d0f9      	beq.n	8007934 <EE_WriteVariable+0x90>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007940:	0039      	movs	r1, r7
 8007942:	0020      	movs	r0, r4
 8007944:	f7ff ff7e 	bl	8007844 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 8007948:	2801      	cmp	r0, #1
 800794a:	d0f3      	beq.n	8007934 <EE_WriteVariable+0x90>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800794c:	8839      	ldrh	r1, [r7, #0]
 800794e:	0020      	movs	r0, r4
 8007950:	f7ff ff1a 	bl	8007788 <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 8007954:	2800      	cmp	r0, #0
 8007956:	d0ed      	beq.n	8007934 <EE_WriteVariable+0x90>
 8007958:	0005      	movs	r5, r0
 800795a:	e7b3      	b.n	80078c4 <EE_WriteVariable+0x20>
	FLASH_PageErase(OldPageAddress);
 800795c:	4648      	mov	r0, r9
 800795e:	f009 f88f 	bl	8010a80 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007962:	4816      	ldr	r0, [pc, #88]	; (80079bc <EE_WriteVariable+0x118>)
 8007964:	f008 ff78 	bl	8010858 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007968:	2800      	cmp	r0, #0
 800796a:	d1cc      	bne.n	8007906 <EE_WriteVariable+0x62>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800796c:	2080      	movs	r0, #128	; 0x80
 800796e:	0100      	lsls	r0, r0, #4
 8007970:	4448      	add	r0, r9
 8007972:	f009 f885 	bl	8010a80 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007976:	4811      	ldr	r0, [pc, #68]	; (80079bc <EE_WriteVariable+0x118>)
 8007978:	f008 ff6e 	bl	8010858 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800797c:	2800      	cmp	r0, #0
 800797e:	d1c2      	bne.n	8007906 <EE_WriteVariable+0x62>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007980:	2202      	movs	r2, #2
 8007982:	4c10      	ldr	r4, [pc, #64]	; (80079c4 <EE_WriteVariable+0x120>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007984:	4641      	mov	r1, r8
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007986:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007988:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800798a:	4393      	bics	r3, r2
 800798c:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800798e:	2200      	movs	r2, #0
 8007990:	2300      	movs	r3, #0
 8007992:	f008 ffa5 	bl	80108e0 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007996:	4809      	ldr	r0, [pc, #36]	; (80079bc <EE_WriteVariable+0x118>)
 8007998:	f008 ff5e 	bl	8010858 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800799c:	2800      	cmp	r0, #0
 800799e:	d1b2      	bne.n	8007906 <EE_WriteVariable+0x62>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80079a0:	2201      	movs	r2, #1
 80079a2:	6923      	ldr	r3, [r4, #16]
 80079a4:	4393      	bics	r3, r2
 80079a6:	6123      	str	r3, [r4, #16]
	}
	
	HAL_FLASH_Lock();
 80079a8:	f008 ff4c 	bl	8010844 <HAL_FLASH_Lock>
 80079ac:	e78a      	b.n	80078c4 <EE_WriteVariable+0x20>
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	0801e000 	.word	0x0801e000
 80079b4:	0801f000 	.word	0x0801f000
 80079b8:	0000eeee 	.word	0x0000eeee
 80079bc:	0000c350 	.word	0x0000c350
 80079c0:	200073a8 	.word	0x200073a8
 80079c4:	40022000 	.word	0x40022000
 80079c8:	00000401 	.word	0x00000401
 80079cc:	2000180c 	.word	0x2000180c

080079d0 <EE_Format>:
uint16_t EE_Format(void){
 80079d0:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 80079d2:	f008 ff25 	bl	8010820 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 80079d6:	481f      	ldr	r0, [pc, #124]	; (8007a54 <EE_Format+0x84>)
 80079d8:	f009 f852 	bl	8010a80 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079dc:	481e      	ldr	r0, [pc, #120]	; (8007a58 <EE_Format+0x88>)
 80079de:	f008 ff3b 	bl	8010858 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d003      	beq.n	80079ee <EE_Format+0x1e>
			return pFlash.ErrorCode;
 80079e6:	4b1d      	ldr	r3, [pc, #116]	; (8007a5c <EE_Format+0x8c>)
 80079e8:	69d8      	ldr	r0, [r3, #28]
 80079ea:	b280      	uxth	r0, r0
}
 80079ec:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80079ee:	481c      	ldr	r0, [pc, #112]	; (8007a60 <EE_Format+0x90>)
 80079f0:	f009 f846 	bl	8010a80 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079f4:	4818      	ldr	r0, [pc, #96]	; (8007a58 <EE_Format+0x88>)
 80079f6:	f008 ff2f 	bl	8010858 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d1f3      	bne.n	80079e6 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80079fe:	2202      	movs	r2, #2
 8007a00:	4c18      	ldr	r4, [pc, #96]	; (8007a64 <EE_Format+0x94>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007a02:	4914      	ldr	r1, [pc, #80]	; (8007a54 <EE_Format+0x84>)
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007a04:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007a06:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007a08:	4393      	bics	r3, r2
 8007a0a:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f008 ff66 	bl	80108e0 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a14:	4810      	ldr	r0, [pc, #64]	; (8007a58 <EE_Format+0x88>)
 8007a16:	f008 ff1f 	bl	8010858 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d1e3      	bne.n	80079e6 <EE_Format+0x16>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a1e:	2501      	movs	r5, #1
 8007a20:	6923      	ldr	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007a22:	4811      	ldr	r0, [pc, #68]	; (8007a68 <EE_Format+0x98>)
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a24:	43ab      	bics	r3, r5
 8007a26:	6123      	str	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007a28:	f009 f82a 	bl	8010a80 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a2c:	480a      	ldr	r0, [pc, #40]	; (8007a58 <EE_Format+0x88>)
 8007a2e:	f008 ff13 	bl	8010858 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d1d7      	bne.n	80079e6 <EE_Format+0x16>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007a36:	480d      	ldr	r0, [pc, #52]	; (8007a6c <EE_Format+0x9c>)
 8007a38:	f009 f822 	bl	8010a80 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a3c:	4806      	ldr	r0, [pc, #24]	; (8007a58 <EE_Format+0x88>)
 8007a3e:	f008 ff0b 	bl	8010858 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d1cf      	bne.n	80079e6 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	43ab      	bics	r3, r5
 8007a4a:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 8007a4c:	f008 fefa 	bl	8010844 <HAL_FLASH_Lock>
	return FlashStatus;
 8007a50:	2000      	movs	r0, #0
 8007a52:	e7cb      	b.n	80079ec <EE_Format+0x1c>
 8007a54:	0801e000 	.word	0x0801e000
 8007a58:	0000c350 	.word	0x0000c350
 8007a5c:	200073a8 	.word	0x200073a8
 8007a60:	0801e800 	.word	0x0801e800
 8007a64:	40022000 	.word	0x40022000
 8007a68:	0801f000 	.word	0x0801f000
 8007a6c:	0801f800 	.word	0x0801f800

08007a70 <EE_Init>:
uint16_t EE_Init(void){
 8007a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a72:	46c6      	mov	lr, r8
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a74:	4c9d      	ldr	r4, [pc, #628]	; (8007cec <EE_Init+0x27c>)
uint16_t EE_Init(void){
 8007a76:	b500      	push	{lr}
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a78:	4d9d      	ldr	r5, [pc, #628]	; (8007cf0 <EE_Init+0x280>)
	HAL_FLASH_Unlock();
 8007a7a:	f008 fed1 	bl	8010820 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a7e:	8823      	ldrh	r3, [r4, #0]
	switch(PageStatusA){
 8007a80:	499c      	ldr	r1, [pc, #624]	; (8007cf4 <EE_Init+0x284>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a82:	882a      	ldrh	r2, [r5, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a84:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a86:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007a88:	428b      	cmp	r3, r1
 8007a8a:	d100      	bne.n	8007a8e <EE_Init+0x1e>
 8007a8c:	e06f      	b.n	8007b6e <EE_Init+0xfe>
 8007a8e:	489a      	ldr	r0, [pc, #616]	; (8007cf8 <EE_Init+0x288>)
 8007a90:	4283      	cmp	r3, r0
 8007a92:	d05c      	beq.n	8007b4e <EE_Init+0xde>
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00e      	beq.n	8007ab6 <EE_Init+0x46>
			FlashStatus =EE_Format();
 8007a98:	f7ff ff9a 	bl	80079d0 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a9c:	4897      	ldr	r0, [pc, #604]	; (8007cfc <EE_Init+0x28c>)
 8007a9e:	f008 fedb 	bl	8010858 <FLASH_WaitForLastOperation>
 8007aa2:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 8007aa4:	2d00      	cmp	r5, #0
 8007aa6:	d102      	bne.n	8007aae <EE_Init+0x3e>
	HAL_FLASH_Lock();
 8007aa8:	f008 fecc 	bl	8010844 <HAL_FLASH_Lock>
	return HAL_OK;
 8007aac:	2500      	movs	r5, #0
}
 8007aae:	0028      	movs	r0, r5
 8007ab0:	bc04      	pop	{r2}
 8007ab2:	4690      	mov	r8, r2
 8007ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007ab6:	2a00      	cmp	r2, #0
 8007ab8:	d0ee      	beq.n	8007a98 <EE_Init+0x28>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007aba:	4282      	cmp	r2, r0
 8007abc:	d100      	bne.n	8007ac0 <EE_Init+0x50>
 8007abe:	e103      	b.n	8007cc8 <EE_Init+0x258>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007ac0:	4b8f      	ldr	r3, [pc, #572]	; (8007d00 <EE_Init+0x290>)
	int16_t x =-1;
 8007ac2:	2601      	movs	r6, #1
 8007ac4:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007ac6:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007ac8:	4f8e      	ldr	r7, [pc, #568]	; (8007d04 <EE_Init+0x294>)
	int16_t x =-1;
 8007aca:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007acc:	883b      	ldrh	r3, [r7, #0]
 8007ace:	b2a5      	uxth	r5, r4
 8007ad0:	42ab      	cmp	r3, r5
 8007ad2:	d100      	bne.n	8007ad6 <EE_Init+0x66>
						x =VarIdx;
 8007ad4:	b226      	sxth	r6, r4
					if(VarIdx != x){
 8007ad6:	42b4      	cmp	r4, r6
 8007ad8:	d010      	beq.n	8007afc <EE_Init+0x8c>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007ada:	4641      	mov	r1, r8
 8007adc:	0028      	movs	r0, r5
 8007ade:	f7ff feb1 	bl	8007844 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007ae2:	2801      	cmp	r0, #1
 8007ae4:	d00a      	beq.n	8007afc <EE_Init+0x8c>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007ae6:	4643      	mov	r3, r8
 8007ae8:	0028      	movs	r0, r5
 8007aea:	8819      	ldrh	r1, [r3, #0]
 8007aec:	f7ff fe4c 	bl	8007788 <EE_VerifyPageFullWriteVariable>
 8007af0:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007af2:	4882      	ldr	r0, [pc, #520]	; (8007cfc <EE_Init+0x28c>)
 8007af4:	f008 feb0 	bl	8010858 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007af8:	2800      	cmp	r0, #0
 8007afa:	d1d8      	bne.n	8007aae <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007afc:	4b82      	ldr	r3, [pc, #520]	; (8007d08 <EE_Init+0x298>)
 8007afe:	3401      	adds	r4, #1
 8007b00:	429c      	cmp	r4, r3
 8007b02:	d1e3      	bne.n	8007acc <EE_Init+0x5c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007b04:	2200      	movs	r2, #0
 8007b06:	2300      	movs	r3, #0
 8007b08:	4979      	ldr	r1, [pc, #484]	; (8007cf0 <EE_Init+0x280>)
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	f008 fee8 	bl	80108e0 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b10:	487a      	ldr	r0, [pc, #488]	; (8007cfc <EE_Init+0x28c>)
 8007b12:	f008 fea1 	bl	8010858 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d125      	bne.n	8007b66 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	4c7b      	ldr	r4, [pc, #492]	; (8007d0c <EE_Init+0x29c>)
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007b1e:	4873      	ldr	r0, [pc, #460]	; (8007cec <EE_Init+0x27c>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b20:	6923      	ldr	r3, [r4, #16]
 8007b22:	4393      	bics	r3, r2
 8007b24:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007b26:	f008 ffab 	bl	8010a80 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b2a:	4874      	ldr	r0, [pc, #464]	; (8007cfc <EE_Init+0x28c>)
 8007b2c:	f008 fe94 	bl	8010858 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d118      	bne.n	8007b66 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007b34:	4876      	ldr	r0, [pc, #472]	; (8007d10 <EE_Init+0x2a0>)
 8007b36:	f008 ffa3 	bl	8010a80 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b3a:	4870      	ldr	r0, [pc, #448]	; (8007cfc <EE_Init+0x28c>)
 8007b3c:	f008 fe8c 	bl	8010858 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d110      	bne.n	8007b66 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007b44:	2202      	movs	r2, #2
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	4393      	bics	r3, r2
 8007b4a:	6123      	str	r3, [r4, #16]
 8007b4c:	e7ac      	b.n	8007aa8 <EE_Init+0x38>
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007b4e:	2a00      	cmp	r2, #0
 8007b50:	d07b      	beq.n	8007c4a <EE_Init+0x1da>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007b52:	428a      	cmp	r2, r1
 8007b54:	d100      	bne.n	8007b58 <EE_Init+0xe8>
 8007b56:	e08f      	b.n	8007c78 <EE_Init+0x208>
				FlashStatus =EE_Format();
 8007b58:	f7ff ff3a 	bl	80079d0 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b5c:	4867      	ldr	r0, [pc, #412]	; (8007cfc <EE_Init+0x28c>)
 8007b5e:	f008 fe7b 	bl	8010858 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d0a0      	beq.n	8007aa8 <EE_Init+0x38>
						return pFlash.ErrorCode;
 8007b66:	4b6b      	ldr	r3, [pc, #428]	; (8007d14 <EE_Init+0x2a4>)
 8007b68:	69dd      	ldr	r5, [r3, #28]
 8007b6a:	b2ad      	uxth	r5, r5
 8007b6c:	e79f      	b.n	8007aae <EE_Init+0x3e>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007b6e:	2a00      	cmp	r2, #0
 8007b70:	d143      	bne.n	8007bfa <EE_Init+0x18a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b72:	4b63      	ldr	r3, [pc, #396]	; (8007d00 <EE_Init+0x290>)
	int16_t x =-1;
 8007b74:	2601      	movs	r6, #1
 8007b76:	2401      	movs	r4, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b78:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b7a:	4f67      	ldr	r7, [pc, #412]	; (8007d18 <EE_Init+0x2a8>)
	int16_t x =-1;
 8007b7c:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b7e:	883b      	ldrh	r3, [r7, #0]
 8007b80:	b2a5      	uxth	r5, r4
 8007b82:	42ab      	cmp	r3, r5
 8007b84:	d100      	bne.n	8007b88 <EE_Init+0x118>
						x =VarIdx;
 8007b86:	b226      	sxth	r6, r4
					if(VarIdx != x){
 8007b88:	42b4      	cmp	r4, r6
 8007b8a:	d011      	beq.n	8007bb0 <EE_Init+0x140>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b8c:	4641      	mov	r1, r8
 8007b8e:	0028      	movs	r0, r5
 8007b90:	f7ff fe58 	bl	8007844 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007b94:	2801      	cmp	r0, #1
 8007b96:	d00b      	beq.n	8007bb0 <EE_Init+0x140>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b98:	4643      	mov	r3, r8
 8007b9a:	0028      	movs	r0, r5
 8007b9c:	8819      	ldrh	r1, [r3, #0]
 8007b9e:	f7ff fdf3 	bl	8007788 <EE_VerifyPageFullWriteVariable>
 8007ba2:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ba4:	4855      	ldr	r0, [pc, #340]	; (8007cfc <EE_Init+0x28c>)
 8007ba6:	f008 fe57 	bl	8010858 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d000      	beq.n	8007bb0 <EE_Init+0x140>
 8007bae:	e77e      	b.n	8007aae <EE_Init+0x3e>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007bb0:	4b55      	ldr	r3, [pc, #340]	; (8007d08 <EE_Init+0x298>)
 8007bb2:	3401      	adds	r4, #1
 8007bb4:	429c      	cmp	r4, r3
 8007bb6:	d1e2      	bne.n	8007b7e <EE_Init+0x10e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007bb8:	2200      	movs	r2, #0
 8007bba:	2300      	movs	r3, #0
 8007bbc:	494b      	ldr	r1, [pc, #300]	; (8007cec <EE_Init+0x27c>)
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	f008 fe8e 	bl	80108e0 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bc4:	484d      	ldr	r0, [pc, #308]	; (8007cfc <EE_Init+0x28c>)
 8007bc6:	f008 fe47 	bl	8010858 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d1cb      	bne.n	8007b66 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007bce:	2201      	movs	r2, #1
 8007bd0:	4c4e      	ldr	r4, [pc, #312]	; (8007d0c <EE_Init+0x29c>)
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bd2:	4847      	ldr	r0, [pc, #284]	; (8007cf0 <EE_Init+0x280>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007bd4:	6923      	ldr	r3, [r4, #16]
 8007bd6:	4393      	bics	r3, r2
 8007bd8:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bda:	f008 ff51 	bl	8010a80 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bde:	4847      	ldr	r0, [pc, #284]	; (8007cfc <EE_Init+0x28c>)
 8007be0:	f008 fe3a 	bl	8010858 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d1be      	bne.n	8007b66 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007be8:	484c      	ldr	r0, [pc, #304]	; (8007d1c <EE_Init+0x2ac>)
 8007bea:	f008 ff49 	bl	8010a80 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bee:	4843      	ldr	r0, [pc, #268]	; (8007cfc <EE_Init+0x28c>)
 8007bf0:	f008 fe32 	bl	8010858 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d0a5      	beq.n	8007b44 <EE_Init+0xd4>
 8007bf8:	e7b5      	b.n	8007b66 <EE_Init+0xf6>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007bfa:	4b3f      	ldr	r3, [pc, #252]	; (8007cf8 <EE_Init+0x288>)
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d1ab      	bne.n	8007b58 <EE_Init+0xe8>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007c00:	0028      	movs	r0, r5
 8007c02:	f008 ff3d 	bl	8010a80 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c06:	483d      	ldr	r0, [pc, #244]	; (8007cfc <EE_Init+0x28c>)
 8007c08:	f008 fe26 	bl	8010858 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d1aa      	bne.n	8007b66 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007c10:	4842      	ldr	r0, [pc, #264]	; (8007d1c <EE_Init+0x2ac>)
 8007c12:	f008 ff35 	bl	8010a80 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c16:	4839      	ldr	r0, [pc, #228]	; (8007cfc <EE_Init+0x28c>)
 8007c18:	f008 fe1e 	bl	8010858 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d1a2      	bne.n	8007b66 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c20:	2202      	movs	r2, #2
 8007c22:	4d3a      	ldr	r5, [pc, #232]	; (8007d0c <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c24:	0021      	movs	r1, r4
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c26:	692b      	ldr	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c28:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c2a:	4393      	bics	r3, r2
 8007c2c:	612b      	str	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2300      	movs	r3, #0
 8007c32:	f008 fe55 	bl	80108e0 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c36:	4831      	ldr	r0, [pc, #196]	; (8007cfc <EE_Init+0x28c>)
 8007c38:	f008 fe0e 	bl	8010858 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d192      	bne.n	8007b66 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c40:	2201      	movs	r2, #1
 8007c42:	692b      	ldr	r3, [r5, #16]
 8007c44:	4393      	bics	r3, r2
 8007c46:	612b      	str	r3, [r5, #16]
 8007c48:	e72e      	b.n	8007aa8 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007c4a:	0020      	movs	r0, r4
 8007c4c:	f008 ff18 	bl	8010a80 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c50:	482a      	ldr	r0, [pc, #168]	; (8007cfc <EE_Init+0x28c>)
 8007c52:	f008 fe01 	bl	8010858 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c56:	2800      	cmp	r0, #0
 8007c58:	d185      	bne.n	8007b66 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007c5a:	482d      	ldr	r0, [pc, #180]	; (8007d10 <EE_Init+0x2a0>)
 8007c5c:	f008 ff10 	bl	8010a80 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c60:	4826      	ldr	r0, [pc, #152]	; (8007cfc <EE_Init+0x28c>)
 8007c62:	f008 fdf9 	bl	8010858 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d000      	beq.n	8007c6c <EE_Init+0x1fc>
 8007c6a:	e77c      	b.n	8007b66 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c6c:	2102      	movs	r1, #2
 8007c6e:	4a27      	ldr	r2, [pc, #156]	; (8007d0c <EE_Init+0x29c>)
 8007c70:	6913      	ldr	r3, [r2, #16]
 8007c72:	438b      	bics	r3, r1
 8007c74:	6113      	str	r3, [r2, #16]
 8007c76:	e717      	b.n	8007aa8 <EE_Init+0x38>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007c78:	0020      	movs	r0, r4
 8007c7a:	f008 ff01 	bl	8010a80 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c7e:	481f      	ldr	r0, [pc, #124]	; (8007cfc <EE_Init+0x28c>)
 8007c80:	f008 fdea 	bl	8010858 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d000      	beq.n	8007c8a <EE_Init+0x21a>
 8007c88:	e76d      	b.n	8007b66 <EE_Init+0xf6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007c8a:	4821      	ldr	r0, [pc, #132]	; (8007d10 <EE_Init+0x2a0>)
 8007c8c:	f008 fef8 	bl	8010a80 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c90:	481a      	ldr	r0, [pc, #104]	; (8007cfc <EE_Init+0x28c>)
 8007c92:	f008 fde1 	bl	8010858 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d000      	beq.n	8007c9c <EE_Init+0x22c>
 8007c9a:	e764      	b.n	8007b66 <EE_Init+0xf6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	4c1b      	ldr	r4, [pc, #108]	; (8007d0c <EE_Init+0x29c>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007ca0:	0029      	movs	r1, r5
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007ca2:	6923      	ldr	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007ca4:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007ca6:	4393      	bics	r3, r2
 8007ca8:	6123      	str	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007caa:	2200      	movs	r2, #0
 8007cac:	2300      	movs	r3, #0
 8007cae:	f008 fe17 	bl	80108e0 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cb2:	4812      	ldr	r0, [pc, #72]	; (8007cfc <EE_Init+0x28c>)
 8007cb4:	f008 fdd0 	bl	8010858 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d000      	beq.n	8007cbe <EE_Init+0x24e>
 8007cbc:	e753      	b.n	8007b66 <EE_Init+0xf6>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	6923      	ldr	r3, [r4, #16]
 8007cc2:	4393      	bics	r3, r2
 8007cc4:	6123      	str	r3, [r4, #16]
 8007cc6:	e6ef      	b.n	8007aa8 <EE_Init+0x38>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007cc8:	0028      	movs	r0, r5
 8007cca:	f008 fed9 	bl	8010a80 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cce:	480b      	ldr	r0, [pc, #44]	; (8007cfc <EE_Init+0x28c>)
 8007cd0:	f008 fdc2 	bl	8010858 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d000      	beq.n	8007cda <EE_Init+0x26a>
 8007cd8:	e745      	b.n	8007b66 <EE_Init+0xf6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007cda:	4810      	ldr	r0, [pc, #64]	; (8007d1c <EE_Init+0x2ac>)
 8007cdc:	f008 fed0 	bl	8010a80 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ce0:	4806      	ldr	r0, [pc, #24]	; (8007cfc <EE_Init+0x28c>)
 8007ce2:	f008 fdb9 	bl	8010858 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d0c0      	beq.n	8007c6c <EE_Init+0x1fc>
 8007cea:	e73c      	b.n	8007b66 <EE_Init+0xf6>
 8007cec:	0801e000 	.word	0x0801e000
 8007cf0:	0801f000 	.word	0x0801f000
 8007cf4:	0000eeee 	.word	0x0000eeee
 8007cf8:	0000ffff 	.word	0x0000ffff
 8007cfc:	0000c350 	.word	0x0000c350
 8007d00:	2000180c 	.word	0x2000180c
 8007d04:	0801f006 	.word	0x0801f006
 8007d08:	00000401 	.word	0x00000401
 8007d0c:	40022000 	.word	0x40022000
 8007d10:	0801e800 	.word	0x0801e800
 8007d14:	200073a8 	.word	0x200073a8
 8007d18:	0801e006 	.word	0x0801e006
 8007d1c:	0801f800 	.word	0x0801f800

08007d20 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 8007d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d22:	46c6      	mov	lr, r8
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007d24:	26a0      	movs	r6, #160	; 0xa0
 8007d26:	2400      	movs	r4, #0
 8007d28:	2703      	movs	r7, #3
void MX_FREERTOS_Init(void){
 8007d2a:	b500      	push	{lr}
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007d2c:	4d66      	ldr	r5, [pc, #408]	; (8007ec8 <MX_FREERTOS_Init+0x1a8>)
void MX_FREERTOS_Init(void){
 8007d2e:	b090      	sub	sp, #64	; 0x40
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007d30:	0076      	lsls	r6, r6, #1
 8007d32:	9501      	str	r5, [sp, #4]
 8007d34:	9700      	str	r7, [sp, #0]
 8007d36:	0032      	movs	r2, r6
 8007d38:	9403      	str	r4, [sp, #12]
 8007d3a:	9402      	str	r4, [sp, #8]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4963      	ldr	r1, [pc, #396]	; (8007ecc <MX_FREERTOS_Init+0x1ac>)
 8007d40:	4863      	ldr	r0, [pc, #396]	; (8007ed0 <MX_FREERTOS_Init+0x1b0>)
 8007d42:	f006 fb87 	bl	800e454 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007d46:	1d2b      	adds	r3, r5, #4
 8007d48:	9301      	str	r3, [sp, #4]
 8007d4a:	9700      	str	r7, [sp, #0]
 8007d4c:	0032      	movs	r2, r6
 8007d4e:	9403      	str	r4, [sp, #12]
 8007d50:	9402      	str	r4, [sp, #8]
 8007d52:	2300      	movs	r3, #0
 8007d54:	495f      	ldr	r1, [pc, #380]	; (8007ed4 <MX_FREERTOS_Init+0x1b4>)
 8007d56:	4860      	ldr	r0, [pc, #384]	; (8007ed8 <MX_FREERTOS_Init+0x1b8>)
 8007d58:	f006 fb7c 	bl	800e454 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007d5c:	002b      	movs	r3, r5
 8007d5e:	3308      	adds	r3, #8
 8007d60:	0032      	movs	r2, r6
 8007d62:	9301      	str	r3, [sp, #4]
 8007d64:	9700      	str	r7, [sp, #0]
 8007d66:	2300      	movs	r3, #0
 8007d68:	495c      	ldr	r1, [pc, #368]	; (8007edc <MX_FREERTOS_Init+0x1bc>)
 8007d6a:	9403      	str	r4, [sp, #12]
 8007d6c:	9402      	str	r4, [sp, #8]
 8007d6e:	485c      	ldr	r0, [pc, #368]	; (8007ee0 <MX_FREERTOS_Init+0x1c0>)
 8007d70:	f006 fb70 	bl	800e454 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 8007d74:	f7ff fb84 	bl	8007480 <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007d78:	002b      	movs	r3, r5
 8007d7a:	330c      	adds	r3, #12
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	9700      	str	r7, [sp, #0]
 8007d80:	0032      	movs	r2, r6
 8007d82:	9403      	str	r4, [sp, #12]
 8007d84:	9402      	str	r4, [sp, #8]
 8007d86:	2300      	movs	r3, #0
 8007d88:	4956      	ldr	r1, [pc, #344]	; (8007ee4 <MX_FREERTOS_Init+0x1c4>)
 8007d8a:	4857      	ldr	r0, [pc, #348]	; (8007ee8 <MX_FREERTOS_Init+0x1c8>)
 8007d8c:	f006 fb62 	bl	800e454 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007d90:	002b      	movs	r3, r5
 8007d92:	3310      	adds	r3, #16
 8007d94:	9301      	str	r3, [sp, #4]
 8007d96:	2304      	movs	r3, #4
 8007d98:	4f54      	ldr	r7, [pc, #336]	; (8007eec <MX_FREERTOS_Init+0x1cc>)
 8007d9a:	4698      	mov	r8, r3
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	0032      	movs	r2, r6
 8007da0:	9403      	str	r4, [sp, #12]
 8007da2:	9402      	str	r4, [sp, #8]
 8007da4:	3b03      	subs	r3, #3
 8007da6:	4952      	ldr	r1, [pc, #328]	; (8007ef0 <MX_FREERTOS_Init+0x1d0>)
 8007da8:	0038      	movs	r0, r7
 8007daa:	f006 fb53 	bl	800e454 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8007dae:	002b      	movs	r3, r5
 8007db0:	3314      	adds	r3, #20
 8007db2:	9301      	str	r3, [sp, #4]
 8007db4:	4643      	mov	r3, r8
 8007db6:	0032      	movs	r2, r6
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	9403      	str	r4, [sp, #12]
 8007dbc:	9402      	str	r4, [sp, #8]
 8007dbe:	3b02      	subs	r3, #2
 8007dc0:	494c      	ldr	r1, [pc, #304]	; (8007ef4 <MX_FREERTOS_Init+0x1d4>)
 8007dc2:	0038      	movs	r0, r7
 8007dc4:	f006 fb46 	bl	800e454 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007dc8:	002b      	movs	r3, r5
 8007dca:	3318      	adds	r3, #24
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	4643      	mov	r3, r8
 8007dd0:	0032      	movs	r2, r6
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	9403      	str	r4, [sp, #12]
 8007dd6:	9402      	str	r4, [sp, #8]
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	4947      	ldr	r1, [pc, #284]	; (8007ef8 <MX_FREERTOS_Init+0x1d8>)
 8007ddc:	0038      	movs	r0, r7
 8007dde:	f006 fb39 	bl	800e454 <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007de2:	002b      	movs	r3, r5
 8007de4:	331c      	adds	r3, #28
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	4643      	mov	r3, r8
 8007dea:	0032      	movs	r2, r6
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	9403      	str	r4, [sp, #12]
 8007df0:	9402      	str	r4, [sp, #8]
 8007df2:	4942      	ldr	r1, [pc, #264]	; (8007efc <MX_FREERTOS_Init+0x1dc>)
 8007df4:	0038      	movs	r0, r7
 8007df6:	f006 fb2d 	bl	800e454 <xTaskGenericCreate>
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8007dfa:	002b      	movs	r3, r5
 8007dfc:	3320      	adds	r3, #32
 8007dfe:	9301      	str	r3, [sp, #4]
 8007e00:	4643      	mov	r3, r8
 8007e02:	0032      	movs	r2, r6
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	9403      	str	r4, [sp, #12]
 8007e08:	9402      	str	r4, [sp, #8]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	493c      	ldr	r1, [pc, #240]	; (8007f00 <MX_FREERTOS_Init+0x1e0>)
 8007e0e:	0038      	movs	r0, r7
 8007e10:	f006 fb20 	bl	800e454 <xTaskGenericCreate>
#endif
#ifdef _P6
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 8007e14:	4643      	mov	r3, r8
 8007e16:	3524      	adds	r5, #36	; 0x24
 8007e18:	0032      	movs	r2, r6
 8007e1a:	9501      	str	r5, [sp, #4]
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	9403      	str	r4, [sp, #12]
 8007e20:	3302      	adds	r3, #2
 8007e22:	9402      	str	r4, [sp, #8]
 8007e24:	4937      	ldr	r1, [pc, #220]	; (8007f04 <MX_FREERTOS_Init+0x1e4>)
 8007e26:	0038      	movs	r0, r7
 8007e28:	f006 fb14 	bl	800e454 <xTaskGenericCreate>
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	a804      	add	r0, sp, #16
	osSemaphoreDef(SemaphoreP1);
 8007e30:	9404      	str	r4, [sp, #16]
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007e32:	f005 fc33 	bl	800d69c <osSemaphoreCreate>
 8007e36:	4e34      	ldr	r6, [pc, #208]	; (8007f08 <MX_FREERTOS_Init+0x1e8>)
	osSemaphoreDef(SemaphoreP2);
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007e38:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007e3a:	6070      	str	r0, [r6, #4]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007e3c:	a805      	add	r0, sp, #20
	osSemaphoreDef(SemaphoreP2);
 8007e3e:	9405      	str	r4, [sp, #20]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007e40:	f005 fc2c 	bl	800d69c <osSemaphoreCreate>
 8007e44:	4d31      	ldr	r5, [pc, #196]	; (8007f0c <MX_FREERTOS_Init+0x1ec>)
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007e46:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007e48:	6068      	str	r0, [r5, #4]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007e4a:	a806      	add	r0, sp, #24
	osSemaphoreDef(SemaphoreP3);
 8007e4c:	9406      	str	r4, [sp, #24]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007e4e:	f005 fc25 	bl	800d69c <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP4);
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007e52:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007e54:	60b0      	str	r0, [r6, #8]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007e56:	a807      	add	r0, sp, #28
	osSemaphoreDef(SemaphoreP4);
 8007e58:	9407      	str	r4, [sp, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007e5a:	f005 fc1f 	bl	800d69c <osSemaphoreCreate>
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007e5e:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007e60:	60a8      	str	r0, [r5, #8]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007e62:	a808      	add	r0, sp, #32
	osSemaphoreDef(SemaphoreP5);
 8007e64:	9408      	str	r4, [sp, #32]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007e66:	f005 fc19 	bl	800d69c <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP6);
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007e6a:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007e6c:	60f0      	str	r0, [r6, #12]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007e6e:	a809      	add	r0, sp, #36	; 0x24
	osSemaphoreDef(SemaphoreP6);
 8007e70:	9409      	str	r4, [sp, #36]	; 0x24
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007e72:	f005 fc13 	bl	800d69c <osSemaphoreCreate>
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007e76:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007e78:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007e7a:	a80a      	add	r0, sp, #40	; 0x28
	osSemaphoreDef(SemaphoreP7);
 8007e7c:	940a      	str	r4, [sp, #40]	; 0x28
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007e7e:	f005 fc0d 	bl	800d69c <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP8);
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007e82:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007e84:	6130      	str	r0, [r6, #16]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007e86:	a80b      	add	r0, sp, #44	; 0x2c
	osSemaphoreDef(SemaphoreP8);
 8007e88:	940b      	str	r4, [sp, #44]	; 0x2c
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007e8a:	f005 fc07 	bl	800d69c <osSemaphoreCreate>
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007e8e:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007e90:	6128      	str	r0, [r5, #16]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007e92:	a80c      	add	r0, sp, #48	; 0x30
	osSemaphoreDef(SemaphoreP9);
 8007e94:	940c      	str	r4, [sp, #48]	; 0x30
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007e96:	f005 fc01 	bl	800d69c <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP10);
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007e9a:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007e9c:	6170      	str	r0, [r6, #20]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007e9e:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(SemaphoreP10);
 8007ea0:	940d      	str	r4, [sp, #52]	; 0x34
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007ea2:	f005 fbfb 	bl	800d69c <osSemaphoreCreate>
#endif
#ifdef _P6	
	osSemaphoreDef(SemaphoreP11);
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007ea6:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007ea8:	6168      	str	r0, [r5, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007eaa:	a80e      	add	r0, sp, #56	; 0x38
	osSemaphoreDef(SemaphoreP11);
 8007eac:	940e      	str	r4, [sp, #56]	; 0x38
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007eae:	f005 fbf5 	bl	800d69c <osSemaphoreCreate>
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007eb2:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007eb4:	61b0      	str	r0, [r6, #24]
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007eb6:	a80f      	add	r0, sp, #60	; 0x3c
	osSemaphoreDef(SemaphoreP12);
 8007eb8:	940f      	str	r4, [sp, #60]	; 0x3c
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007eba:	f005 fbef 	bl	800d69c <osSemaphoreCreate>
 8007ebe:	61a8      	str	r0, [r5, #24]
#endif
	
}
 8007ec0:	b010      	add	sp, #64	; 0x40
 8007ec2:	bc04      	pop	{r2}
 8007ec4:	4690      	mov	r8, r2
 8007ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ec8:	20001810 	.word	0x20001810
 8007ecc:	0801a150 	.word	0x0801a150
 8007ed0:	08008311 	.word	0x08008311
 8007ed4:	0801a15c 	.word	0x0801a15c
 8007ed8:	08009c59 	.word	0x08009c59
 8007edc:	0801a168 	.word	0x0801a168
 8007ee0:	08012705 	.word	0x08012705
 8007ee4:	0801a174 	.word	0x0801a174
 8007ee8:	080052f1 	.word	0x080052f1
 8007eec:	0800a049 	.word	0x0800a049
 8007ef0:	0801a17c 	.word	0x0801a17c
 8007ef4:	0801a188 	.word	0x0801a188
 8007ef8:	0801a194 	.word	0x0801a194
 8007efc:	0801a1a0 	.word	0x0801a1a0
 8007f00:	0801a1ac 	.word	0x0801a1ac
 8007f04:	0801a1b8 	.word	0x0801a1b8
 8007f08:	20006f4c 	.word	0x20006f4c
 8007f0c:	20006f2c 	.word	0x20006f2c

08007f10 <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 8007f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f12:	46de      	mov	lr, fp
 8007f14:	4657      	mov	r7, sl
 8007f16:	464e      	mov	r6, r9
 8007f18:	4645      	mov	r5, r8
 8007f1a:	b5e0      	push	{r5, r6, r7, lr}
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 8007f1c:	4bd4      	ldr	r3, [pc, #848]	; (8008270 <ExecuteMonitor+0x360>)
{
 8007f1e:	b085      	sub	sp, #20
    if(Monitor_time == INTIAL_VALUE)
 8007f20:	469b      	mov	fp, r3
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d006      	beq.n	8007f36 <ExecuteMonitor+0x26>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
		           }
	}
  }
}
 8007f28:	b005      	add	sp, #20
 8007f2a:	bc3c      	pop	{r2, r3, r4, r5}
 8007f2c:	4690      	mov	r8, r2
 8007f2e:	4699      	mov	r9, r3
 8007f30:	46a2      	mov	sl, r4
 8007f32:	46ab      	mov	fp, r5
 8007f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Monitor_time =0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	465a      	mov	r2, fp
 8007f3a:	6013      	str	r3, [r2, #0]
	flag=0;
 8007f3c:	7113      	strb	r3, [r2, #4]
	currentCharacter=SPACE;
 8007f3e:	3320      	adds	r3, #32
 8007f40:	7153      	strb	r3, [r2, #5]
 8007f42:	4bcc      	ldr	r3, [pc, #816]	; (8008274 <ExecuteMonitor+0x364>)
 8007f44:	4ecc      	ldr	r6, [pc, #816]	; (8008278 <ExecuteMonitor+0x368>)
 8007f46:	4699      	mov	r9, r3
 8007f48:	4bcc      	ldr	r3, [pc, #816]	; (800827c <ExecuteMonitor+0x36c>)
 8007f4a:	4dcd      	ldr	r5, [pc, #820]	; (8008280 <ExecuteMonitor+0x370>)
 8007f4c:	469a      	mov	sl, r3
 8007f4e:	4ccd      	ldr	r4, [pc, #820]	; (8008284 <ExecuteMonitor+0x374>)
		                    nonProcessingParameterIndex=0;
 8007f50:	2200      	movs	r2, #0
 8007f52:	4bcd      	ldr	r3, [pc, #820]	; (8008288 <ExecuteMonitor+0x378>)
		            	    perviousCharacter= INTIAL_VALUE;
 8007f54:	2703      	movs	r7, #3
		                    nonProcessingParameterIndex=0;
 8007f56:	701a      	strb	r2, [r3, #0]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007f58:	2320      	movs	r3, #32
 8007f5a:	4698      	mov	r8, r3
 8007f5c:	e004      	b.n	8007f68 <ExecuteMonitor+0x58>
 8007f5e:	2a01      	cmp	r2, #1
 8007f60:	d04c      	beq.n	8007ffc <ExecuteMonitor+0xec>
 8007f62:	2a02      	cmp	r2, #2
 8007f64:	d100      	bne.n	8007f68 <ExecuteMonitor+0x58>
 8007f66:	e0a8      	b.n	80080ba <ExecuteMonitor+0x1aa>
		            	    perviousCharacter= INTIAL_VALUE;
 8007f68:	464b      	mov	r3, r9
		            	    Delay_us(100);
 8007f6a:	2064      	movs	r0, #100	; 0x64
		            	    perviousCharacter= INTIAL_VALUE;
 8007f6c:	701f      	strb	r7, [r3, #0]
		            	    Delay_us(100);
 8007f6e:	f005 f859 	bl	800d024 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 8007f72:	465b      	mov	r3, fp
 8007f74:	464a      	mov	r2, r9
 8007f76:	795b      	ldrb	r3, [r3, #5]
 8007f78:	7812      	ldrb	r2, [r2, #0]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d00b      	beq.n	8007f96 <ExecuteMonitor+0x86>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 8007f7e:	4ac2      	ldr	r2, [pc, #776]	; (8008288 <ExecuteMonitor+0x378>)
 8007f80:	48c1      	ldr	r0, [pc, #772]	; (8008288 <ExecuteMonitor+0x378>)
 8007f82:	7812      	ldrb	r2, [r2, #0]
 8007f84:	1c51      	adds	r1, r2, #1
 8007f86:	7001      	strb	r1, [r0, #0]
 8007f88:	2128      	movs	r1, #40	; 0x28
 8007f8a:	4452      	add	r2, sl
 8007f8c:	5453      	strb	r3, [r2, r1]
								perviousCharacter=currentCharacter;
 8007f8e:	464a      	mov	r2, r9
 8007f90:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 8007f92:	465a      	mov	r2, fp
 8007f94:	7157      	strb	r7, [r2, #5]
 8007f96:	465a      	mov	r2, fp
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007f98:	4641      	mov	r1, r8
 8007f9a:	7912      	ldrb	r2, [r2, #4]
 8007f9c:	438b      	bics	r3, r1
 8007f9e:	d1de      	bne.n	8007f5e <ExecuteMonitor+0x4e>
                   if(flag == NonActive)
 8007fa0:	2a00      	cmp	r2, #0
 8007fa2:	d129      	bne.n	8007ff8 <ExecuteMonitor+0xe8>
                	   nonProcessingParameterIndex=0;
 8007fa4:	4bb8      	ldr	r3, [pc, #736]	; (8008288 <ExecuteMonitor+0x378>)
 8007fa6:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 8007fa8:	4653      	mov	r3, sl
 8007faa:	3228      	adds	r2, #40	; 0x28
 8007fac:	5c9b      	ldrb	r3, [r3, r2]
 8007fae:	2b5b      	cmp	r3, #91	; 0x5b
 8007fb0:	d100      	bne.n	8007fb4 <ExecuteMonitor+0xa4>
 8007fb2:	e0eb      	b.n	800818c <ExecuteMonitor+0x27c>
 		            else if(FirstCharacterInParameter == '#')
 8007fb4:	2b23      	cmp	r3, #35	; 0x23
 8007fb6:	d100      	bne.n	8007fba <ExecuteMonitor+0xaa>
 8007fb8:	e141      	b.n	800823e <ExecuteMonitor+0x32e>
 		            else if(FirstCharacterInParameter == '=')
 8007fba:	2b3d      	cmp	r3, #61	; 0x3d
 8007fbc:	d100      	bne.n	8007fc0 <ExecuteMonitor+0xb0>
 8007fbe:	e175      	b.n	80082ac <ExecuteMonitor+0x39c>
 8007fc0:	233c      	movs	r3, #60	; 0x3c
 8007fc2:	4652      	mov	r2, sl
 8007fc4:	5cd7      	ldrb	r7, [r2, r3]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007fc6:	4650      	mov	r0, sl
               	   desiredArray=ParameterLocationIn2dArray;
 8007fc8:	4bb0      	ldr	r3, [pc, #704]	; (800828c <ExecuteMonitor+0x37c>)
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007fca:	0139      	lsls	r1, r7, #4
               	   desiredArray=ParameterLocationIn2dArray;
 8007fcc:	701f      	strb	r7, [r3, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007fce:	3050      	adds	r0, #80	; 0x50
 8007fd0:	1bcf      	subs	r7, r1, r7
 8007fd2:	19c0      	adds	r0, r0, r7
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 8007fd4:	4657      	mov	r7, sl
 8007fd6:	373c      	adds	r7, #60	; 0x3c
 8007fd8:	0039      	movs	r1, r7
 8007fda:	220f      	movs	r2, #15
 8007fdc:	f00a fe5f 	bl	8012c9e <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 8007fe0:	4650      	mov	r0, sl
 8007fe2:	2214      	movs	r2, #20
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	3028      	adds	r0, #40	; 0x28
 8007fe8:	f00a fe62 	bl	8012cb0 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 8007fec:	2214      	movs	r2, #20
 8007fee:	2100      	movs	r1, #0
 8007ff0:	0038      	movs	r0, r7
 8007ff2:	f00a fe5d 	bl	8012cb0 <memset>
 8007ff6:	e7ab      	b.n	8007f50 <ExecuteMonitor+0x40>
                   if(flag == RUN_FOR_ONCE)
 8007ff8:	2a01      	cmp	r2, #1
 8007ffa:	d15b      	bne.n	80080b4 <ExecuteMonitor+0x1a4>
                	twoDMatrixIndex=1;
 8007ffc:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 8007ffe:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 8008000:	702b      	strb	r3, [r5, #0]
		          	counter=0;
 8008002:	4ba3      	ldr	r3, [pc, #652]	; (8008290 <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 8008004:	7032      	strb	r2, [r6, #0]
		          	counter=0;
 8008006:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 8008008:	4ba2      	ldr	r3, [pc, #648]	; (8008294 <ExecuteMonitor+0x384>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d02e      	beq.n	800806e <ExecuteMonitor+0x15e>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8008010:	2250      	movs	r2, #80	; 0x50
		           while(counter != numCommandParameters)
 8008012:	2100      	movs	r1, #0
 8008014:	2300      	movs	r3, #0
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8008016:	4690      	mov	r8, r2
		           while(counter != numCommandParameters)
 8008018:	2201      	movs	r2, #1
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800801a:	0010      	movs	r0, r2
 800801c:	2720      	movs	r7, #32
 800801e:	001a      	movs	r2, r3
 8008020:	0003      	movs	r3, r0
 8008022:	e002      	b.n	800802a <ExecuteMonitor+0x11a>
 8008024:	4b9a      	ldr	r3, [pc, #616]	; (8008290 <ExecuteMonitor+0x380>)
 8008026:	781a      	ldrb	r2, [r3, #0]
 8008028:	782b      	ldrb	r3, [r5, #0]
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800802a:	1c58      	adds	r0, r3, #1
 800802c:	7028      	strb	r0, [r5, #0]
 800802e:	1c48      	adds	r0, r1, #1
 8008030:	7030      	strb	r0, [r6, #0]
 8008032:	0110      	lsls	r0, r2, #4
 8008034:	1a82      	subs	r2, r0, r2
 8008036:	4452      	add	r2, sl
 8008038:	18d2      	adds	r2, r2, r3
 800803a:	4643      	mov	r3, r8
 800803c:	5cd3      	ldrb	r3, [r2, r3]
 800803e:	2248      	movs	r2, #72	; 0x48
 8008040:	1861      	adds	r1, r4, r1
		            	Delay_ms(1);
 8008042:	2001      	movs	r0, #1
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8008044:	548b      	strb	r3, [r1, r2]
		            	Delay_ms(1);
 8008046:	f007 fa81 	bl	800f54c <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800804a:	7831      	ldrb	r1, [r6, #0]
 800804c:	1863      	adds	r3, r4, r1
 800804e:	3347      	adds	r3, #71	; 0x47
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	43bb      	bics	r3, r7
 8008054:	d1e6      	bne.n	8008024 <ExecuteMonitor+0x114>
		                   counter++;
 8008056:	4b8e      	ldr	r3, [pc, #568]	; (8008290 <ExecuteMonitor+0x380>)
 8008058:	4a8d      	ldr	r2, [pc, #564]	; (8008290 <ExecuteMonitor+0x380>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	3301      	adds	r3, #1
 800805e:	b2db      	uxtb	r3, r3
 8008060:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 8008062:	2201      	movs	r2, #1
 8008064:	702a      	strb	r2, [r5, #0]
		           while(counter != numCommandParameters)
 8008066:	4a8b      	ldr	r2, [pc, #556]	; (8008294 <ExecuteMonitor+0x384>)
 8008068:	7812      	ldrb	r2, [r2, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d1d4      	bne.n	8008018 <ExecuteMonitor+0x108>
		          		   flag=0;
 800806e:	2300      	movs	r3, #0
 8008070:	465a      	mov	r2, fp
 8008072:	7113      	strb	r3, [r2, #4]
		          		   counter=0;
 8008074:	4a86      	ldr	r2, [pc, #536]	; (8008290 <ExecuteMonitor+0x380>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008076:	2748      	movs	r7, #72	; 0x48
		          		   counter=0;
 8008078:	7013      	strb	r3, [r2, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800807a:	4a87      	ldr	r2, [pc, #540]	; (8008298 <ExecuteMonitor+0x388>)
 800807c:	7013      	strb	r3, [r2, #0]
 800807e:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008080:	4a86      	ldr	r2, [pc, #536]	; (800829c <ExecuteMonitor+0x38c>)
		          			Delay_ms(1);
 8008082:	2001      	movs	r0, #1
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008084:	18d2      	adds	r2, r2, r3
 8008086:	18e3      	adds	r3, r4, r3
 8008088:	5ddb      	ldrb	r3, [r3, r7]
 800808a:	3281      	adds	r2, #129	; 0x81
 800808c:	32ff      	adds	r2, #255	; 0xff
 800808e:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 8008090:	f007 fa5c 	bl	800f54c <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8008094:	4b80      	ldr	r3, [pc, #512]	; (8008298 <ExecuteMonitor+0x388>)
 8008096:	4a80      	ldr	r2, [pc, #512]	; (8008298 <ExecuteMonitor+0x388>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	3301      	adds	r3, #1
 800809c:	b2db      	uxtb	r3, r3
 800809e:	7013      	strb	r3, [r2, #0]
 80080a0:	2b3f      	cmp	r3, #63	; 0x3f
 80080a2:	d9ed      	bls.n	8008080 <ExecuteMonitor+0x170>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 80080a4:	0020      	movs	r0, r4
 80080a6:	2240      	movs	r2, #64	; 0x40
 80080a8:	3048      	adds	r0, #72	; 0x48
 80080aa:	2100      	movs	r1, #0
 80080ac:	f00a fe00 	bl	8012cb0 <memset>
 80080b0:	465b      	mov	r3, fp
 80080b2:	791a      	ldrb	r2, [r3, #4]
                   if(flag == CONTINUOUS_RUN)
 80080b4:	2a02      	cmp	r2, #2
 80080b6:	d000      	beq.n	80080ba <ExecuteMonitor+0x1aa>
 80080b8:	e74a      	b.n	8007f50 <ExecuteMonitor+0x40>
                	twoDMatrixIndex=1;
 80080ba:	2301      	movs	r3, #1
                	finalMatrixIndex=0;
 80080bc:	2200      	movs	r2, #0
                	twoDMatrixIndex=1;
 80080be:	702b      	strb	r3, [r5, #0]
   		          	counter=0;
 80080c0:	4b73      	ldr	r3, [pc, #460]	; (8008290 <ExecuteMonitor+0x380>)
                	finalMatrixIndex=0;
 80080c2:	7032      	strb	r2, [r6, #0]
   		          	counter=0;
 80080c4:	701a      	strb	r2, [r3, #0]
   		           while(counter != numCommandParameters)
 80080c6:	4b73      	ldr	r3, [pc, #460]	; (8008294 <ExecuteMonitor+0x384>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d033      	beq.n	8008136 <ExecuteMonitor+0x226>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80080ce:	2250      	movs	r2, #80	; 0x50
   		           while(counter != numCommandParameters)
 80080d0:	2100      	movs	r1, #0
 80080d2:	2300      	movs	r3, #0
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80080d4:	4690      	mov	r8, r2
   		           while(counter != numCommandParameters)
 80080d6:	2201      	movs	r2, #1
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80080d8:	0010      	movs	r0, r2
 80080da:	2720      	movs	r7, #32
 80080dc:	001a      	movs	r2, r3
 80080de:	0003      	movs	r3, r0
 80080e0:	e001      	b.n	80080e6 <ExecuteMonitor+0x1d6>
 80080e2:	781a      	ldrb	r2, [r3, #0]
 80080e4:	782b      	ldrb	r3, [r5, #0]
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80080e6:	1c58      	adds	r0, r3, #1
 80080e8:	7028      	strb	r0, [r5, #0]
 80080ea:	1c48      	adds	r0, r1, #1
 80080ec:	7030      	strb	r0, [r6, #0]
 80080ee:	0110      	lsls	r0, r2, #4
 80080f0:	1a82      	subs	r2, r0, r2
 80080f2:	4452      	add	r2, sl
 80080f4:	18d2      	adds	r2, r2, r3
 80080f6:	4643      	mov	r3, r8
 80080f8:	5cd3      	ldrb	r3, [r2, r3]
 80080fa:	2248      	movs	r2, #72	; 0x48
 80080fc:	1861      	adds	r1, r4, r1
   		            	Delay_ms(1);
 80080fe:	2001      	movs	r0, #1
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8008100:	548b      	strb	r3, [r1, r2]
   		            	Delay_ms(1);
 8008102:	f007 fa23 	bl	800f54c <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8008106:	7831      	ldrb	r1, [r6, #0]
 8008108:	1863      	adds	r3, r4, r1
 800810a:	3347      	adds	r3, #71	; 0x47
 800810c:	781a      	ldrb	r2, [r3, #0]
 800810e:	4b60      	ldr	r3, [pc, #384]	; (8008290 <ExecuteMonitor+0x380>)
 8008110:	43ba      	bics	r2, r7
 8008112:	d1e6      	bne.n	80080e2 <ExecuteMonitor+0x1d2>
   		             counter++;
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	485e      	ldr	r0, [pc, #376]	; (8008290 <ExecuteMonitor+0x380>)
 8008118:	3301      	adds	r3, #1
 800811a:	b2db      	uxtb	r3, r3
 800811c:	7003      	strb	r3, [r0, #0]
   		             twoDMatrixIndex=1;
 800811e:	2001      	movs	r0, #1
 8008120:	7028      	strb	r0, [r5, #0]
   		           while(counter != numCommandParameters)
 8008122:	485c      	ldr	r0, [pc, #368]	; (8008294 <ExecuteMonitor+0x384>)
 8008124:	7800      	ldrb	r0, [r0, #0]
 8008126:	4298      	cmp	r0, r3
 8008128:	d1d5      	bne.n	80080d6 <ExecuteMonitor+0x1c6>
 800812a:	465b      	mov	r3, fp
		            counter=0;
 800812c:	4958      	ldr	r1, [pc, #352]	; (8008290 <ExecuteMonitor+0x380>)
 800812e:	791b      	ldrb	r3, [r3, #4]
 8008130:	700a      	strb	r2, [r1, #0]
                  while(flag != NonActive)
 8008132:	2b00      	cmp	r3, #0
 8008134:	d01e      	beq.n	8008174 <ExecuteMonitor+0x264>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008136:	2748      	movs	r7, #72	; 0x48
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8008138:	2200      	movs	r2, #0
 800813a:	4b57      	ldr	r3, [pc, #348]	; (8008298 <ExecuteMonitor+0x388>)
 800813c:	701a      	strb	r2, [r3, #0]
 800813e:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008140:	4a56      	ldr	r2, [pc, #344]	; (800829c <ExecuteMonitor+0x38c>)
		          			Delay_us(200);
 8008142:	20c8      	movs	r0, #200	; 0xc8
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008144:	18d2      	adds	r2, r2, r3
 8008146:	18e3      	adds	r3, r4, r3
 8008148:	5ddb      	ldrb	r3, [r3, r7]
 800814a:	3281      	adds	r2, #129	; 0x81
 800814c:	32ff      	adds	r2, #255	; 0xff
 800814e:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 8008150:	f004 ff68 	bl	800d024 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8008154:	4b50      	ldr	r3, [pc, #320]	; (8008298 <ExecuteMonitor+0x388>)
 8008156:	4a50      	ldr	r2, [pc, #320]	; (8008298 <ExecuteMonitor+0x388>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	3301      	adds	r3, #1
 800815c:	b2db      	uxtb	r3, r3
 800815e:	7013      	strb	r3, [r2, #0]
 8008160:	2b3f      	cmp	r3, #63	; 0x3f
 8008162:	d9ed      	bls.n	8008140 <ExecuteMonitor+0x230>
  	          		 Delay_ms(Monitor_time);
 8008164:	465b      	mov	r3, fp
 8008166:	6818      	ldr	r0, [r3, #0]
 8008168:	f007 f9f0 	bl	800f54c <HAL_Delay>
                  while(flag != NonActive)
 800816c:	465b      	mov	r3, fp
 800816e:	791b      	ldrb	r3, [r3, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e1      	bne.n	8008138 <ExecuteMonitor+0x228>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8008174:	0020      	movs	r0, r4
 8008176:	2240      	movs	r2, #64	; 0x40
 8008178:	2100      	movs	r1, #0
 800817a:	3048      	adds	r0, #72	; 0x48
 800817c:	f00a fd98 	bl	8012cb0 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 8008180:	22c0      	movs	r2, #192	; 0xc0
 8008182:	2100      	movs	r1, #0
 8008184:	4846      	ldr	r0, [pc, #280]	; (80082a0 <ExecuteMonitor+0x390>)
 8008186:	f00a fd93 	bl	8012cb0 <memset>
 800818a:	e6e1      	b.n	8007f50 <ExecuteMonitor+0x40>
 		            	nonProcessingParameterIndex++;
 800818c:	4a3e      	ldr	r2, [pc, #248]	; (8008288 <ExecuteMonitor+0x378>)
 800818e:	3b5a      	subs	r3, #90	; 0x5a
 8008190:	7013      	strb	r3, [r2, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8008192:	4b44      	ldr	r3, [pc, #272]	; (80082a4 <ExecuteMonitor+0x394>)
 8008194:	210a      	movs	r1, #10
 8008196:	781f      	ldrb	r7, [r3, #0]
 8008198:	4653      	mov	r3, sl
 800819a:	9701      	str	r7, [sp, #4]
 800819c:	3328      	adds	r3, #40	; 0x28
 800819e:	7858      	ldrb	r0, [r3, #1]
 80081a0:	f7f8 f85c 	bl	800025c <__aeabi_uidivmod>
 80081a4:	2303      	movs	r3, #3
 80081a6:	b2c9      	uxtb	r1, r1
 80081a8:	4698      	mov	r8, r3
 80081aa:	42b9      	cmp	r1, r7
 80081ac:	d101      	bne.n	80081b2 <ExecuteMonitor+0x2a2>
 80081ae:	e0a1      	b.n	80082f4 <ExecuteMonitor+0x3e4>
 80081b0:	46b8      	mov	r8, r7
 80081b2:	4643      	mov	r3, r8
 80081b4:	1c9f      	adds	r7, r3, #2
 80081b6:	4653      	mov	r3, sl
 80081b8:	2228      	movs	r2, #40	; 0x28
 80081ba:	4443      	add	r3, r8
 80081bc:	5c98      	ldrb	r0, [r3, r2]
 80081be:	210a      	movs	r1, #10
 80081c0:	f7f8 f84c 	bl	800025c <__aeabi_uidivmod>
 80081c4:	9b01      	ldr	r3, [sp, #4]
 80081c6:	b2c9      	uxtb	r1, r1
 80081c8:	b2ff      	uxtb	r7, r7
 80081ca:	4299      	cmp	r1, r3
 80081cc:	d1f0      	bne.n	80081b0 <ExecuteMonitor+0x2a0>
 80081ce:	4643      	mov	r3, r8
 80081d0:	46b8      	mov	r8, r7
 80081d2:	3301      	adds	r3, #1
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	9301      	str	r3, [sp, #4]
 80081d8:	9702      	str	r7, [sp, #8]
 		            			nonProcessingParameterIndex++;
 80081da:	4a2b      	ldr	r2, [pc, #172]	; (8008288 <ExecuteMonitor+0x378>)
 80081dc:	9901      	ldr	r1, [sp, #4]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 80081de:	4453      	add	r3, sl
 		            			nonProcessingParameterIndex++;
 80081e0:	7011      	strb	r1, [r2, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 80081e2:	2228      	movs	r2, #40	; 0x28
 80081e4:	5c9b      	ldrb	r3, [r3, r2]
 80081e6:	210a      	movs	r1, #10
 80081e8:	0018      	movs	r0, r3
 80081ea:	9303      	str	r3, [sp, #12]
 80081ec:	f7f8 f836 	bl	800025c <__aeabi_uidivmod>
 80081f0:	233c      	movs	r3, #60	; 0x3c
 80081f2:	4652      	mov	r2, sl
 80081f4:	b2cf      	uxtb	r7, r1
 80081f6:	54d7      	strb	r7, [r2, r3]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 80081f8:	9b03      	ldr	r3, [sp, #12]
 80081fa:	2b5d      	cmp	r3, #93	; 0x5d
 80081fc:	d00d      	beq.n	800821a <ExecuteMonitor+0x30a>
 80081fe:	9b01      	ldr	r3, [sp, #4]
 8008200:	3301      	adds	r3, #1
 8008202:	b2db      	uxtb	r3, r3
 8008204:	e000      	b.n	8008208 <ExecuteMonitor+0x2f8>
 8008206:	0013      	movs	r3, r2
 8008208:	2128      	movs	r1, #40	; 0x28
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	4453      	add	r3, sl
 800820e:	5c5b      	ldrb	r3, [r3, r1]
 8008210:	b2d2      	uxtb	r2, r2
 8008212:	2b5d      	cmp	r3, #93	; 0x5d
 8008214:	d1f7      	bne.n	8008206 <ExecuteMonitor+0x2f6>
 8008216:	4690      	mov	r8, r2
 8008218:	9202      	str	r2, [sp, #8]
 		            	nonProcessingParameterIndex++;
 800821a:	4642      	mov	r2, r8
 800821c:	4b1a      	ldr	r3, [pc, #104]	; (8008288 <ExecuteMonitor+0x378>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800821e:	4651      	mov	r1, sl
 		            	nonProcessingParameterIndex++;
 8008220:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 8008222:	2301      	movs	r3, #1
 8008224:	4a20      	ldr	r2, [pc, #128]	; (80082a8 <ExecuteMonitor+0x398>)
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008226:	4650      	mov	r0, sl
 		            	processingParameterIndex=1;
 8008228:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800822a:	9b02      	ldr	r3, [sp, #8]
 800822c:	2214      	movs	r2, #20
 800822e:	469c      	mov	ip, r3
 8008230:	3128      	adds	r1, #40	; 0x28
 8008232:	1ad2      	subs	r2, r2, r3
 8008234:	4461      	add	r1, ip
 8008236:	303d      	adds	r0, #61	; 0x3d
 8008238:	f00a fd31 	bl	8012c9e <memcpy>
 800823c:	e6c3      	b.n	8007fc6 <ExecuteMonitor+0xb6>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 800823e:	4653      	mov	r3, sl
 8008240:	3328      	adds	r3, #40	; 0x28
 8008242:	7858      	ldrb	r0, [r3, #1]
 8008244:	210a      	movs	r1, #10
 8008246:	f7f8 f809 	bl	800025c <__aeabi_uidivmod>
 800824a:	4652      	mov	r2, sl
 800824c:	233c      	movs	r3, #60	; 0x3c
 800824e:	b2cf      	uxtb	r7, r1
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008250:	4650      	mov	r0, sl
 8008252:	4651      	mov	r1, sl
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 8008254:	54d7      	strb	r7, [r2, r3]
 		            	nonProcessingParameterIndex=2;
 8008256:	4a0c      	ldr	r2, [pc, #48]	; (8008288 <ExecuteMonitor+0x378>)
 8008258:	3b3a      	subs	r3, #58	; 0x3a
 800825a:	7013      	strb	r3, [r2, #0]
 		            	processingParameterIndex=1;
 800825c:	4a12      	ldr	r2, [pc, #72]	; (80082a8 <ExecuteMonitor+0x398>)
 800825e:	3b01      	subs	r3, #1
 8008260:	7013      	strb	r3, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008262:	312a      	adds	r1, #42	; 0x2a
 8008264:	2212      	movs	r2, #18
 8008266:	303d      	adds	r0, #61	; 0x3d
 8008268:	f00a fd19 	bl	8012c9e <memcpy>
 800826c:	e6ab      	b.n	8007fc6 <ExecuteMonitor+0xb6>
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	20000000 	.word	0x20000000
 8008274:	20006f28 	.word	0x20006f28
 8008278:	20006f6c 	.word	0x20006f6c
 800827c:	20001810 	.word	0x20001810
 8008280:	20006f69 	.word	0x20006f69
 8008284:	20001890 	.word	0x20001890
 8008288:	20006f49 	.word	0x20006f49
 800828c:	20006f6b 	.word	0x20006f6b
 8008290:	20006f4a 	.word	0x20006f4a
 8008294:	20006f68 	.word	0x20006f68
 8008298:	20006f29 	.word	0x20006f29
 800829c:	2000138c 	.word	0x2000138c
 80082a0:	2000150c 	.word	0x2000150c
 80082a4:	20006f6a 	.word	0x20006f6a
 80082a8:	20006f48 	.word	0x20006f48
                	    digitTheCommand=nonProcessingParameter[1]%10;
 80082ac:	4657      	mov	r7, sl
 80082ae:	3728      	adds	r7, #40	; 0x28
 80082b0:	7878      	ldrb	r0, [r7, #1]
 80082b2:	210a      	movs	r1, #10
 80082b4:	f7f7 ffd2 	bl	800025c <__aeabi_uidivmod>
 80082b8:	4b11      	ldr	r3, [pc, #68]	; (8008300 <ExecuteMonitor+0x3f0>)
 80082ba:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 80082bc:	78b8      	ldrb	r0, [r7, #2]
 80082be:	210a      	movs	r1, #10
 80082c0:	f7f7 ffcc 	bl	800025c <__aeabi_uidivmod>
 80082c4:	4b0f      	ldr	r3, [pc, #60]	; (8008304 <ExecuteMonitor+0x3f4>)
 80082c6:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 80082c8:	78f8      	ldrb	r0, [r7, #3]
 80082ca:	210a      	movs	r1, #10
 80082cc:	f7f7 ffc6 	bl	800025c <__aeabi_uidivmod>
 80082d0:	4652      	mov	r2, sl
 80082d2:	233c      	movs	r3, #60	; 0x3c
 80082d4:	b2cf      	uxtb	r7, r1
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80082d6:	4650      	mov	r0, sl
 80082d8:	4651      	mov	r1, sl
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 80082da:	54d7      	strb	r7, [r2, r3]
                	    nonProcessingParameterIndex=4;
 80082dc:	4a0a      	ldr	r2, [pc, #40]	; (8008308 <ExecuteMonitor+0x3f8>)
 80082de:	3b38      	subs	r3, #56	; 0x38
 80082e0:	7013      	strb	r3, [r2, #0]
                	    processingParameterIndex=1;
 80082e2:	4a0a      	ldr	r2, [pc, #40]	; (800830c <ExecuteMonitor+0x3fc>)
 80082e4:	3b03      	subs	r3, #3
 80082e6:	7013      	strb	r3, [r2, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80082e8:	312c      	adds	r1, #44	; 0x2c
 80082ea:	2210      	movs	r2, #16
 80082ec:	303d      	adds	r0, #61	; 0x3d
 80082ee:	f00a fcd6 	bl	8012c9e <memcpy>
 80082f2:	e668      	b.n	8007fc6 <ExecuteMonitor+0xb6>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 80082f4:	2202      	movs	r2, #2
 80082f6:	9302      	str	r3, [sp, #8]
 80082f8:	9201      	str	r2, [sp, #4]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	e76d      	b.n	80081da <ExecuteMonitor+0x2ca>
 80082fe:	46c0      	nop			; (mov r8, r8)
 8008300:	20006f6a 	.word	0x20006f6a
 8008304:	20006f68 	.word	0x20006f68
 8008308:	20006f49 	.word	0x20006f49
 800830c:	20006f48 	.word	0x20006f48

08008310 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	4c1e      	ldr	r4, [pc, #120]	; (800838c <StartDefaultTask+0x7c>)
 8008314:	4d1e      	ldr	r5, [pc, #120]	; (8008390 <StartDefaultTask+0x80>)
 8008316:	4e1f      	ldr	r6, [pc, #124]	; (8008394 <StartDefaultTask+0x84>)
 8008318:	e00f      	b.n	800833a <StartDefaultTask+0x2a>
		switch(indMode){
 800831a:	2b03      	cmp	r3, #3
 800831c:	d024      	beq.n	8008368 <StartDefaultTask+0x58>
 800831e:	2b01      	cmp	r3, #1
 8008320:	d02b      	beq.n	800837a <StartDefaultTask+0x6a>
		CheckAttachedButtons();
 8008322:	f000 fdb3 	bl	8008e8c <CheckAttachedButtons>
		ExecuteSnippet();
 8008326:	f7fd f977 	bl	8005618 <ExecuteSnippet>
		ExecuteMonitor();
 800832a:	f7ff fdf1 	bl	8007f10 <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 800832e:	782b      	ldrb	r3, [r5, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d100      	bne.n	8008336 <StartDefaultTask+0x26>
			delayButtonStateReset = false;
 8008334:	7033      	strb	r3, [r6, #0]
		taskYIELD();
 8008336:	f006 ffb1 	bl	800f29c <vPortYield>
		switch(indMode){
 800833a:	7823      	ldrb	r3, [r4, #0]
 800833c:	2b02      	cmp	r3, #2
 800833e:	d1ec      	bne.n	800831a <StartDefaultTask+0xa>
				RTOS_IND_blink(100);
 8008340:	2180      	movs	r1, #128	; 0x80
 8008342:	2090      	movs	r0, #144	; 0x90
 8008344:	2201      	movs	r2, #1
 8008346:	05c0      	lsls	r0, r0, #23
 8008348:	0109      	lsls	r1, r1, #4
 800834a:	f008 fd4b 	bl	8010de4 <HAL_GPIO_WritePin>
 800834e:	2064      	movs	r0, #100	; 0x64
				RTOS_IND_blink(30);
 8008350:	f005 f978 	bl	800d644 <osDelay>
 8008354:	2180      	movs	r1, #128	; 0x80
 8008356:	2090      	movs	r0, #144	; 0x90
 8008358:	2200      	movs	r2, #0
 800835a:	0109      	lsls	r1, r1, #4
 800835c:	05c0      	lsls	r0, r0, #23
 800835e:	f008 fd41 	bl	8010de4 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8008362:	2300      	movs	r3, #0
 8008364:	7023      	strb	r3, [r4, #0]
				break;
 8008366:	e7dc      	b.n	8008322 <StartDefaultTask+0x12>
				RTOS_IND_blink(30);
 8008368:	2180      	movs	r1, #128	; 0x80
 800836a:	2090      	movs	r0, #144	; 0x90
 800836c:	2201      	movs	r2, #1
 800836e:	05c0      	lsls	r0, r0, #23
 8008370:	0109      	lsls	r1, r1, #4
 8008372:	f008 fd37 	bl	8010de4 <HAL_GPIO_WritePin>
 8008376:	201e      	movs	r0, #30
 8008378:	e7ea      	b.n	8008350 <StartDefaultTask+0x40>
				RTOS_IND_blink(200);
 800837a:	2180      	movs	r1, #128	; 0x80
 800837c:	2090      	movs	r0, #144	; 0x90
 800837e:	2201      	movs	r2, #1
 8008380:	05c0      	lsls	r0, r0, #23
 8008382:	0109      	lsls	r1, r1, #4
 8008384:	f008 fd2e 	bl	8010de4 <HAL_GPIO_WritePin>
 8008388:	20c8      	movs	r0, #200	; 0xc8
 800838a:	e7e1      	b.n	8008350 <StartDefaultTask+0x40>
 800838c:	2000117e 	.word	0x2000117e
 8008390:	200019cc 	.word	0x200019cc
 8008394:	200019c0 	.word	0x200019c0

08008398 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8008398:	4b04      	ldr	r3, [pc, #16]	; (80083ac <vMainConfigureTimerForRunTimeStats+0x14>)
void vMainConfigureTimerForRunTimeStats(void){
 800839a:	b510      	push	{r4, lr}
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 800839c:	6818      	ldr	r0, [r3, #0]
 800839e:	4904      	ldr	r1, [pc, #16]	; (80083b0 <vMainConfigureTimerForRunTimeStats+0x18>)
 80083a0:	f7f7 fed6 	bl	8000150 <__udivsi3>
 80083a4:	4b03      	ldr	r3, [pc, #12]	; (80083b4 <vMainConfigureTimerForRunTimeStats+0x1c>)
 80083a6:	6098      	str	r0, [r3, #8]
}
 80083a8:	bd10      	pop	{r4, pc}
 80083aa:	46c0      	nop			; (mov r8, r8)
 80083ac:	200000b0 	.word	0x200000b0
 80083b0:	00002710 	.word	0x00002710
 80083b4:	20001910 	.word	0x20001910

080083b8 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80083b8:	21fa      	movs	r1, #250	; 0xfa
 80083ba:	4b0f      	ldr	r3, [pc, #60]	; (80083f8 <ulMainGetRunTimeCounterValue+0x40>)
uint32_t ulMainGetRunTimeCounterValue(void){
 80083bc:	b570      	push	{r4, r5, r6, lr}
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80083be:	6818      	ldr	r0, [r3, #0]
 80083c0:	0089      	lsls	r1, r1, #2
 80083c2:	f7f7 fec5 	bl	8000150 <__udivsi3>
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80083c6:	4c0d      	ldr	r4, [pc, #52]	; (80083fc <ulMainGetRunTimeCounterValue+0x44>)
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80083c8:	1e45      	subs	r5, r0, #1
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80083ca:	6826      	ldr	r6, [r4, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 80083cc:	f006 f8ec 	bl	800e5a8 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 80083d0:	4b0b      	ldr	r3, [pc, #44]	; (8008400 <ulMainGetRunTimeCounterValue+0x48>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	015b      	lsls	r3, r3, #5
 80083d6:	d50c      	bpl.n	80083f2 <ulMainGetRunTimeCounterValue+0x3a>
		 but the tick count not yet incremented. */
		ulTickCount++;
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80083d8:	6823      	ldr	r3, [r4, #0]
		ulTickCount++;
 80083da:	3001      	adds	r0, #1
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80083dc:	1aed      	subs	r5, r5, r3
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80083de:	4b09      	ldr	r3, [pc, #36]	; (8008404 <ulMainGetRunTimeCounterValue+0x4c>)
	ulReturn =(ulTickCount * 10UL);
 80083e0:	0084      	lsls	r4, r0, #2
 80083e2:	1824      	adds	r4, r4, r0
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80083e4:	6899      	ldr	r1, [r3, #8]
 80083e6:	0028      	movs	r0, r5
 80083e8:	f7f7 feb2 	bl	8000150 <__udivsi3>
	ulReturn =(ulTickCount * 10UL);
 80083ec:	0064      	lsls	r4, r4, #1
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80083ee:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 80083f0:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80083f2:	1bad      	subs	r5, r5, r6
 80083f4:	e7f3      	b.n	80083de <ulMainGetRunTimeCounterValue+0x26>
 80083f6:	46c0      	nop			; (mov r8, r8)
 80083f8:	200000b0 	.word	0x200000b0
 80083fc:	e000e018 	.word	0xe000e018
 8008400:	e000ed04 	.word	0xe000ed04
 8008404:	20001910 	.word	0x20001910

08008408 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 8008408:	4770      	bx	lr
 800840a:	46c0      	nop			; (mov r8, r8)

0800840c <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800840c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800840e:	4d37      	ldr	r5, [pc, #220]	; (80084ec <AddPortButton+0xe0>)
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 8008410:	b08d      	sub	sp, #52	; 0x34
	if (BOS_initialized) {
 8008412:	782b      	ldrb	r3, [r5, #0]
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 8008414:	0006      	movs	r6, r0
 8008416:	000c      	movs	r4, r1
	if (BOS_initialized) {
 8008418:	2b00      	cmp	r3, #0
 800841a:	d152      	bne.n	80084c2 <AddPortButton+0xb6>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800841c:	2204      	movs	r2, #4
 800841e:	4b34      	ldr	r3, [pc, #208]	; (80084f0 <AddPortButton+0xe4>)
 8008420:	545a      	strb	r2, [r3, r1]
	if (BOS_initialized) {
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8008422:	250e      	movs	r5, #14
 8008424:	af04      	add	r7, sp, #16
 8008426:	446d      	add	r5, sp
 8008428:	002a      	movs	r2, r5
 800842a:	ab06      	add	r3, sp, #24
 800842c:	a905      	add	r1, sp, #20
 800842e:	9700      	str	r7, [sp, #0]
 8008430:	0020      	movs	r0, r4
 8008432:	f004 fa67 	bl	800c904 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 8008436:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008438:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = TX_Pin;
 800843a:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800843c:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800843e:	a907      	add	r1, sp, #28
 8008440:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008442:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008444:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008446:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 8008448:	f008 fb2c 	bl	8010aa4 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800844c:	883b      	ldrh	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800844e:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = RX_Pin;
 8008450:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008452:	2302      	movs	r3, #2
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 8008454:	9806      	ldr	r0, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008456:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008458:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800845a:	f008 fb23 	bl	8010aa4 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800845e:	00e2      	lsls	r2, r4, #3
 8008460:	4b24      	ldr	r3, [pc, #144]	; (80084f4 <AddPortButton+0xe8>)
 8008462:	1912      	adds	r2, r2, r4
 8008464:	189b      	adds	r3, r3, r2

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 8008466:	0025      	movs	r5, r4
	button[port].type = buttonType;
 8008468:	705e      	strb	r6, [r3, #1]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800846a:	2312      	movs	r3, #18
 800846c:	353a      	adds	r5, #58	; 0x3a
 800846e:	00ad      	lsls	r5, r5, #2
 8008470:	446b      	add	r3, sp
 8008472:	0019      	movs	r1, r3
 8008474:	0028      	movs	r0, r5
 8008476:	f7ff f9e5 	bl	8007844 <EE_ReadVariable>
	if (!res)											// This variable exists
 800847a:	2800      	cmp	r0, #0
 800847c:	d109      	bne.n	8008492 <AddPortButton+0x86>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800847e:	466b      	mov	r3, sp
 8008480:	8a5b      	ldrh	r3, [r3, #18]
 8008482:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 8008484:	091a      	lsrs	r2, r3, #4
 8008486:	42a2      	cmp	r2, r4
 8008488:	d103      	bne.n	8008492 <AddPortButton+0x86>
 800848a:	220f      	movs	r2, #15
 800848c:	4013      	ands	r3, r2
 800848e:	42b3      	cmp	r3, r6
 8008490:	d014      	beq.n	80084bc <AddPortButton+0xb0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
		}
	} else							// Variable does not exist. Create a new one
	{
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 8008492:	466b      	mov	r3, sp
 8008494:	0324      	lsls	r4, r4, #12
 8008496:	0231      	lsls	r1, r6, #8
 8008498:	4321      	orrs	r1, r4
 800849a:	b289      	uxth	r1, r1
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800849c:	0028      	movs	r0, r5
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800849e:	8259      	strh	r1, [r3, #18]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 80084a0:	f7ff fa00 	bl	80078a4 <EE_WriteVariable>
		/* Reset times */
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 80084a4:	2100      	movs	r1, #0
 80084a6:	1c68      	adds	r0, r5, #1
 80084a8:	f7ff f9fc 	bl	80078a4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 80084ac:	2100      	movs	r1, #0
 80084ae:	1ca8      	adds	r0, r5, #2
 80084b0:	f7ff f9f8 	bl	80078a4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 80084b4:	1ce8      	adds	r0, r5, #3
 80084b6:	2100      	movs	r1, #0
 80084b8:	f7ff f9f4 	bl	80078a4 <EE_WriteVariable>
	}

	return result;
}
 80084bc:	2000      	movs	r0, #0
 80084be:	b00d      	add	sp, #52	; 0x34
 80084c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 80084c2:	4b0d      	ldr	r3, [pc, #52]	; (80084f8 <AddPortButton+0xec>)
 80084c4:	008f      	lsls	r7, r1, #2
 80084c6:	58f8      	ldr	r0, [r7, r3]
 80084c8:	f005 f928 	bl	800d71c <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 80084cc:	4b0b      	ldr	r3, [pc, #44]	; (80084fc <AddPortButton+0xf0>)
 80084ce:	58f8      	ldr	r0, [r7, r3]
 80084d0:	f005 f924 	bl	800d71c <osSemaphoreRelease>
	portStatus[port] = PORTBUTTON;
 80084d4:	2104      	movs	r1, #4
 80084d6:	4a06      	ldr	r2, [pc, #24]	; (80084f0 <AddPortButton+0xe4>)
 80084d8:	782b      	ldrb	r3, [r5, #0]
 80084da:	5511      	strb	r1, [r2, r4]
	if (BOS_initialized) {
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d0a0      	beq.n	8008422 <AddPortButton+0x16>
		HAL_UART_DeInit(GetUart(port));
 80084e0:	0020      	movs	r0, r4
 80084e2:	f004 ffeb 	bl	800d4bc <GetUart>
 80084e6:	f009 fbf3 	bl	8011cd0 <HAL_UART_DeInit>
 80084ea:	e79a      	b.n	8008422 <AddPortButton+0x16>
 80084ec:	20000c3d 	.word	0x20000c3d
 80084f0:	20000c2c 	.word	0x20000c2c
 80084f4:	2000191c 	.word	0x2000191c
 80084f8:	20006f4c 	.word	0x20006f4c
 80084fc:	20006f2c 	.word	0x20006f2c

08008500 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 8008500:	b570      	push	{r4, r5, r6, lr}
 8008502:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 8008504:	2300      	movs	r3, #0
 8008506:	483b      	ldr	r0, [pc, #236]	; (80085f4 <RemovePortButton+0xf4>)
 8008508:	00e9      	lsls	r1, r5, #3
 800850a:	1949      	adds	r1, r1, r5
	button[port].releasedY1Sec = 0;
	button[port].releasedY2Sec = 0;
	button[port].releasedY3Sec = 0;

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800850c:	002c      	movs	r4, r5
	button[port].type = NONE;
 800850e:	1842      	adds	r2, r0, r1
BOS_Status RemovePortButton(uint8_t port) {
 8008510:	b082      	sub	sp, #8
	button[port].state = NONE;
 8008512:	540b      	strb	r3, [r1, r0]
	button[port].type = NONE;
 8008514:	7053      	strb	r3, [r2, #1]
	button[port].events = 0;
 8008516:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 8008518:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800851a:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800851c:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800851e:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 8008520:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 8008522:	71d3      	strb	r3, [r2, #7]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 8008524:	466b      	mov	r3, sp
 8008526:	343a      	adds	r4, #58	; 0x3a
 8008528:	00a4      	lsls	r4, r4, #2
 800852a:	1d99      	adds	r1, r3, #6
 800852c:	0020      	movs	r0, r4
 800852e:	f7ff f989 	bl	8007844 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 8008532:	2800      	cmp	r0, #0
 8008534:	d02b      	beq.n	800858e <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 8008536:	0028      	movs	r0, r5
 8008538:	f004 ffc0 	bl	800d4bc <GetUart>

	if (huart->Instance == USART1) {
 800853c:	4a2e      	ldr	r2, [pc, #184]	; (80085f8 <RemovePortButton+0xf8>)
 800853e:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 8008540:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 8008542:	4293      	cmp	r3, r2
 8008544:	d03b      	beq.n	80085be <RemovePortButton+0xbe>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 8008546:	4a2d      	ldr	r2, [pc, #180]	; (80085fc <RemovePortButton+0xfc>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d040      	beq.n	80085ce <RemovePortButton+0xce>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800854c:	4a2c      	ldr	r2, [pc, #176]	; (8008600 <RemovePortButton+0x100>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d041      	beq.n	80085d6 <RemovePortButton+0xd6>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 8008552:	4a2c      	ldr	r2, [pc, #176]	; (8008604 <RemovePortButton+0x104>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d044      	beq.n	80085e2 <RemovePortButton+0xe2>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 8008558:	4a2b      	ldr	r2, [pc, #172]	; (8008608 <RemovePortButton+0x108>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d033      	beq.n	80085c6 <RemovePortButton+0xc6>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800855e:	4a2b      	ldr	r2, [pc, #172]	; (800860c <RemovePortButton+0x10c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d042      	beq.n	80085ea <RemovePortButton+0xea>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 8008564:	4a2a      	ldr	r2, [pc, #168]	; (8008610 <RemovePortButton+0x110>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d039      	beq.n	80085de <RemovePortButton+0xde>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800856a:	4a2a      	ldr	r2, [pc, #168]	; (8008614 <RemovePortButton+0x114>)
 800856c:	4694      	mov	ip, r2
 800856e:	4463      	add	r3, ip
 8008570:	1e5c      	subs	r4, r3, #1
 8008572:	41a3      	sbcs	r3, r4
 8008574:	425c      	negs	r4, r3
 8008576:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 8008578:	2200      	movs	r2, #0
 800857a:	4b27      	ldr	r3, [pc, #156]	; (8008618 <RemovePortButton+0x118>)
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800857c:	4927      	ldr	r1, [pc, #156]	; (800861c <RemovePortButton+0x11c>)
	portStatus[port] = FREE;
 800857e:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 8008580:	0030      	movs	r0, r6
 8008582:	3201      	adds	r2, #1
 8008584:	f009 fbf2 	bl	8011d6c <HAL_UART_Receive_IT>

	return result;
}
 8008588:	0020      	movs	r0, r4
 800858a:	b002      	add	sp, #8
 800858c:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800858e:	2100      	movs	r1, #0
 8008590:	0020      	movs	r0, r4
 8008592:	f7ff f987 	bl	80078a4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 8008596:	2100      	movs	r1, #0
 8008598:	1c60      	adds	r0, r4, #1
 800859a:	f7ff f983 	bl	80078a4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800859e:	2100      	movs	r1, #0
 80085a0:	1ca0      	adds	r0, r4, #2
 80085a2:	f7ff f97f 	bl	80078a4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 80085a6:	2100      	movs	r1, #0
 80085a8:	1ce0      	adds	r0, r4, #3
 80085aa:	f7ff f97b 	bl	80078a4 <EE_WriteVariable>
	UART_HandleTypeDef *huart = GetUart(port);
 80085ae:	0028      	movs	r0, r5
 80085b0:	f004 ff84 	bl	800d4bc <GetUart>
	if (huart->Instance == USART1) {
 80085b4:	4a10      	ldr	r2, [pc, #64]	; (80085f8 <RemovePortButton+0xf8>)
 80085b6:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 80085b8:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d1c3      	bne.n	8008546 <RemovePortButton+0x46>
		MX_USART1_UART_Init();
 80085be:	f004 fd55 	bl	800d06c <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 80085c2:	2400      	movs	r4, #0
 80085c4:	e7d8      	b.n	8008578 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 80085c6:	f004 fdb1 	bl	800d12c <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 80085ca:	2400      	movs	r4, #0
 80085cc:	e7d4      	b.n	8008578 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 80085ce:	f004 fd65 	bl	800d09c <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 80085d2:	2400      	movs	r4, #0
 80085d4:	e7d0      	b.n	8008578 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 80085d6:	f004 fd79 	bl	800d0cc <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 80085da:	2400      	movs	r4, #0
 80085dc:	e7cc      	b.n	8008578 <RemovePortButton+0x78>
 80085de:	2400      	movs	r4, #0
 80085e0:	e7ca      	b.n	8008578 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 80085e2:	f004 fd8b 	bl	800d0fc <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 80085e6:	2400      	movs	r4, #0
 80085e8:	e7c6      	b.n	8008578 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 80085ea:	f004 fdb7 	bl	800d15c <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 80085ee:	2400      	movs	r4, #0
 80085f0:	e7c2      	b.n	8008578 <RemovePortButton+0x78>
 80085f2:	46c0      	nop			; (mov r8, r8)
 80085f4:	2000191c 	.word	0x2000191c
 80085f8:	40013800 	.word	0x40013800
 80085fc:	40004400 	.word	0x40004400
 8008600:	40004800 	.word	0x40004800
 8008604:	40004c00 	.word	0x40004c00
 8008608:	40005000 	.word	0x40005000
 800860c:	40011400 	.word	0x40011400
 8008610:	40011800 	.word	0x40011800
 8008614:	bffee400 	.word	0xbffee400
 8008618:	20000c2c 	.word	0x20000c2c
 800861c:	20000c4d 	.word	0x20000c4d

08008620 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 8008620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008622:	464e      	mov	r6, r9
 8008624:	4645      	mov	r5, r8
 8008626:	46de      	mov	lr, fp
 8008628:	4657      	mov	r7, sl
 800862a:	b5e0      	push	{r5, r6, r7, lr}
 800862c:	b087      	sub	sp, #28
 800862e:	9301      	str	r3, [sp, #4]
 8008630:	ab10      	add	r3, sp, #64	; 0x40
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	0005      	movs	r5, r0
 8008636:	9302      	str	r3, [sp, #8]
 8008638:	ab11      	add	r3, sp, #68	; 0x44
 800863a:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800863c:	00ec      	lsls	r4, r5, #3
		uint8_t mode) {
 800863e:	9303      	str	r3, [sp, #12]
 8008640:	ab12      	add	r3, sp, #72	; 0x48
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	469a      	mov	sl, r3
 8008646:	ab13      	add	r3, sp, #76	; 0x4c
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	4699      	mov	r9, r3
 800864c:	ab14      	add	r3, sp, #80	; 0x50
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	469b      	mov	fp, r3
 8008652:	ab15      	add	r3, sp, #84	; 0x54
 8008654:	7818      	ldrb	r0, [r3, #0]
	if (button[port].type == NONE)
 8008656:	4b80      	ldr	r3, [pc, #512]	; (8008858 <SetButtonEvents+0x238>)
 8008658:	4698      	mov	r8, r3
 800865a:	1963      	adds	r3, r4, r5
 800865c:	4443      	add	r3, r8
 800865e:	785e      	ldrb	r6, [r3, #1]
 8008660:	2e00      	cmp	r6, #0
 8008662:	d050      	beq.n	8008706 <SetButtonEvents+0xe6>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 8008664:	9e01      	ldr	r6, [sp, #4]
 8008666:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 8008668:	9e02      	ldr	r6, [sp, #8]
 800866a:	70de      	strb	r6, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800866c:	9e03      	ldr	r6, [sp, #12]
 800866e:	711e      	strb	r6, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 8008670:	4656      	mov	r6, sl
 8008672:	715e      	strb	r6, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 8008674:	464e      	mov	r6, r9
 8008676:	719e      	strb	r6, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 8008678:	465e      	mov	r6, fp
 800867a:	71de      	strb	r6, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800867c:	2801      	cmp	r0, #1
 800867e:	d04b      	beq.n	8008718 <SetButtonEvents+0xf8>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 8008680:	2800      	cmp	r0, #0
 8008682:	d000      	beq.n	8008686 <SetButtonEvents+0x66>
 8008684:	e076      	b.n	8008774 <SetButtonEvents+0x154>
 8008686:	2900      	cmp	r1, #0
 8008688:	d000      	beq.n	800868c <SetButtonEvents+0x6c>
 800868a:	e0bf      	b.n	800880c <SetButtonEvents+0x1ec>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800868c:	2601      	movs	r6, #1
 800868e:	7a19      	ldrb	r1, [r3, #8]
 8008690:	43b1      	bics	r1, r6
 8008692:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 8008694:	2a00      	cmp	r2, #0
 8008696:	d142      	bne.n	800871e <SetButtonEvents+0xfe>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 8008698:	2302      	movs	r3, #2
 800869a:	4399      	bics	r1, r3
 800869c:	1963      	adds	r3, r4, r5
 800869e:	4443      	add	r3, r8
 80086a0:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 80086a2:	9b01      	ldr	r3, [sp, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d143      	bne.n	8008730 <SetButtonEvents+0x110>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80086a8:	2304      	movs	r3, #4
 80086aa:	4399      	bics	r1, r3
 80086ac:	1963      	adds	r3, r4, r5
 80086ae:	4443      	add	r3, r8
 80086b0:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 80086b2:	9b02      	ldr	r3, [sp, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d144      	bne.n	8008742 <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80086b8:	2308      	movs	r3, #8
 80086ba:	4399      	bics	r1, r3
 80086bc:	1963      	adds	r3, r4, r5
 80086be:	4443      	add	r3, r8
 80086c0:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 80086c2:	9b03      	ldr	r3, [sp, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d145      	bne.n	8008754 <SetButtonEvents+0x134>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 80086c8:	2310      	movs	r3, #16
 80086ca:	000a      	movs	r2, r1
 80086cc:	439a      	bics	r2, r3
 80086ce:	1963      	adds	r3, r4, r5
 80086d0:	4443      	add	r3, r8
 80086d2:	721a      	strb	r2, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 80086d4:	4653      	mov	r3, sl
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d100      	bne.n	80086dc <SetButtonEvents+0xbc>
 80086da:	e09c      	b.n	8008816 <SetButtonEvents+0x1f6>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80086dc:	2120      	movs	r1, #32
 80086de:	4311      	orrs	r1, r2
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 80086e0:	464a      	mov	r2, r9
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80086e2:	1963      	adds	r3, r4, r5
 80086e4:	4443      	add	r3, r8
 80086e6:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 80086e8:	2a00      	cmp	r2, #0
 80086ea:	d100      	bne.n	80086ee <SetButtonEvents+0xce>
 80086ec:	e09d      	b.n	800882a <SetButtonEvents+0x20a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80086ee:	2240      	movs	r2, #64	; 0x40
 80086f0:	430a      	orrs	r2, r1
 80086f2:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 80086f4:	465b      	mov	r3, fp
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d136      	bne.n	8008768 <SetButtonEvents+0x148>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 80086fa:	217f      	movs	r1, #127	; 0x7f
 80086fc:	1963      	adds	r3, r4, r5
 80086fe:	4443      	add	r3, r8
 8008700:	4011      	ands	r1, r2
 8008702:	7219      	strb	r1, [r3, #8]
 8008704:	e036      	b.n	8008774 <SetButtonEvents+0x154>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008706:	240b      	movs	r4, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 8008708:	0020      	movs	r0, r4
 800870a:	b007      	add	sp, #28
 800870c:	bc3c      	pop	{r2, r3, r4, r5}
 800870e:	4690      	mov	r8, r2
 8008710:	4699      	mov	r9, r3
 8008712:	46a2      	mov	sl, r4
 8008714:	46ab      	mov	fp, r5
 8008716:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008718:	7a19      	ldrb	r1, [r3, #8]
 800871a:	2301      	movs	r3, #1
 800871c:	4319      	orrs	r1, r3
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800871e:	2202      	movs	r2, #2
 8008720:	1963      	adds	r3, r4, r5
 8008722:	4443      	add	r3, r8
 8008724:	4311      	orrs	r1, r2
 8008726:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008728:	2801      	cmp	r0, #1
 800872a:	d000      	beq.n	800872e <SetButtonEvents+0x10e>
 800872c:	e08c      	b.n	8008848 <SetButtonEvents+0x228>
 800872e:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008730:	2204      	movs	r2, #4
 8008732:	1963      	adds	r3, r4, r5
 8008734:	4443      	add	r3, r8
 8008736:	4311      	orrs	r1, r2
 8008738:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800873a:	2801      	cmp	r0, #1
 800873c:	d000      	beq.n	8008740 <SetButtonEvents+0x120>
 800873e:	e07f      	b.n	8008840 <SetButtonEvents+0x220>
 8008740:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008742:	2208      	movs	r2, #8
 8008744:	1963      	adds	r3, r4, r5
 8008746:	4443      	add	r3, r8
 8008748:	4311      	orrs	r1, r2
 800874a:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800874c:	2801      	cmp	r0, #1
 800874e:	d000      	beq.n	8008752 <SetButtonEvents+0x132>
 8008750:	e07e      	b.n	8008850 <SetButtonEvents+0x230>
 8008752:	b2c9      	uxtb	r1, r1
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008754:	2210      	movs	r2, #16
 8008756:	1963      	adds	r3, r4, r5
 8008758:	4443      	add	r3, r8
 800875a:	4311      	orrs	r1, r2
 800875c:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800875e:	2801      	cmp	r0, #1
 8008760:	d16a      	bne.n	8008838 <SetButtonEvents+0x218>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008762:	2260      	movs	r2, #96	; 0x60
 8008764:	b2c9      	uxtb	r1, r1
 8008766:	430a      	orrs	r2, r1
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008768:	2180      	movs	r1, #128	; 0x80
 800876a:	1963      	adds	r3, r4, r5
 800876c:	4249      	negs	r1, r1
 800876e:	4443      	add	r3, r8
 8008770:	4311      	orrs	r1, r2
 8008772:	7219      	strb	r1, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 8008774:	002e      	movs	r6, r5
 8008776:	ab04      	add	r3, sp, #16
 8008778:	363a      	adds	r6, #58	; 0x3a
 800877a:	00b6      	lsls	r6, r6, #2
 800877c:	1d9f      	adds	r7, r3, #6
 800877e:	0039      	movs	r1, r7
 8008780:	0030      	movs	r0, r6
 8008782:	f7ff f85f 	bl	8007844 <EE_ReadVariable>
	if (!res)											// This variable exists
 8008786:	2800      	cmp	r0, #0
 8008788:	d1bd      	bne.n	8008706 <SetButtonEvents+0xe6>
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800878a:	1964      	adds	r4, r4, r5
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800878c:	883b      	ldrh	r3, [r7, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800878e:	4444      	add	r4, r8
 8008790:	7a22      	ldrb	r2, [r4, #8]
 8008792:	b2d9      	uxtb	r1, r3
 8008794:	4291      	cmp	r1, r2
 8008796:	d006      	beq.n	80087a6 <SetButtonEvents+0x186>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 8008798:	0a19      	lsrs	r1, r3, #8
 800879a:	0209      	lsls	r1, r1, #8
 800879c:	4311      	orrs	r1, r2
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800879e:	0030      	movs	r0, r6
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 80087a0:	8039      	strh	r1, [r7, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 80087a2:	f7ff f87f 	bl	80078a4 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 80087a6:	1c74      	adds	r4, r6, #1
 80087a8:	0039      	movs	r1, r7
 80087aa:	0020      	movs	r0, r4
 80087ac:	f7ff f84a 	bl	8007844 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 80087b0:	4652      	mov	r2, sl
 80087b2:	9b01      	ldr	r3, [sp, #4]
 80087b4:	0219      	lsls	r1, r3, #8
 80087b6:	883b      	ldrh	r3, [r7, #0]
 80087b8:	430a      	orrs	r2, r1
		if (temp16
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d003      	beq.n	80087c6 <SetButtonEvents+0x1a6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 80087be:	b291      	uxth	r1, r2
 80087c0:	0020      	movs	r0, r4
 80087c2:	f7ff f86f 	bl	80078a4 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 80087c6:	1cb4      	adds	r4, r6, #2
 80087c8:	0039      	movs	r1, r7
 80087ca:	0020      	movs	r0, r4
 80087cc:	f7ff f83a 	bl	8007844 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 80087d0:	464a      	mov	r2, r9
 80087d2:	9b02      	ldr	r3, [sp, #8]
 80087d4:	0219      	lsls	r1, r3, #8
 80087d6:	883b      	ldrh	r3, [r7, #0]
 80087d8:	430a      	orrs	r2, r1
		if (temp16
 80087da:	4293      	cmp	r3, r2
 80087dc:	d003      	beq.n	80087e6 <SetButtonEvents+0x1c6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 80087de:	b291      	uxth	r1, r2
 80087e0:	0020      	movs	r0, r4
 80087e2:	f7ff f85f 	bl	80078a4 <EE_WriteVariable>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 80087e6:	3603      	adds	r6, #3
 80087e8:	0039      	movs	r1, r7
 80087ea:	0030      	movs	r0, r6
 80087ec:	f7ff f82a 	bl	8007844 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 80087f0:	465a      	mov	r2, fp
 80087f2:	9b03      	ldr	r3, [sp, #12]
	return result;
 80087f4:	2400      	movs	r4, #0
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 80087f6:	0219      	lsls	r1, r3, #8
 80087f8:	883b      	ldrh	r3, [r7, #0]
 80087fa:	430a      	orrs	r2, r1
		if (temp16
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d100      	bne.n	8008802 <SetButtonEvents+0x1e2>
 8008800:	e782      	b.n	8008708 <SetButtonEvents+0xe8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 8008802:	b291      	uxth	r1, r2
 8008804:	0030      	movs	r0, r6
 8008806:	f7ff f84d 	bl	80078a4 <EE_WriteVariable>
 800880a:	e77d      	b.n	8008708 <SetButtonEvents+0xe8>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800880c:	2601      	movs	r6, #1
 800880e:	7a19      	ldrb	r1, [r3, #8]
 8008810:	4331      	orrs	r1, r6
 8008812:	7219      	strb	r1, [r3, #8]
 8008814:	e73e      	b.n	8008694 <SetButtonEvents+0x74>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008816:	2320      	movs	r3, #32
 8008818:	439a      	bics	r2, r3
 800881a:	1963      	adds	r3, r4, r5
 800881c:	4443      	add	r3, r8
 800881e:	0011      	movs	r1, r2
 8008820:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 8008822:	464a      	mov	r2, r9
 8008824:	2a00      	cmp	r2, #0
 8008826:	d000      	beq.n	800882a <SetButtonEvents+0x20a>
 8008828:	e761      	b.n	80086ee <SetButtonEvents+0xce>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800882a:	2340      	movs	r3, #64	; 0x40
 800882c:	000a      	movs	r2, r1
 800882e:	439a      	bics	r2, r3
 8008830:	1963      	adds	r3, r4, r5
 8008832:	4443      	add	r3, r8
 8008834:	721a      	strb	r2, [r3, #8]
 8008836:	e75d      	b.n	80086f4 <SetButtonEvents+0xd4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 8008838:	2800      	cmp	r0, #0
 800883a:	d19b      	bne.n	8008774 <SetButtonEvents+0x154>
 800883c:	7a1a      	ldrb	r2, [r3, #8]
 800883e:	e749      	b.n	80086d4 <SetButtonEvents+0xb4>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 8008840:	2800      	cmp	r0, #0
 8008842:	d197      	bne.n	8008774 <SetButtonEvents+0x154>
 8008844:	7a19      	ldrb	r1, [r3, #8]
 8008846:	e734      	b.n	80086b2 <SetButtonEvents+0x92>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 8008848:	2800      	cmp	r0, #0
 800884a:	d193      	bne.n	8008774 <SetButtonEvents+0x154>
 800884c:	7a19      	ldrb	r1, [r3, #8]
 800884e:	e728      	b.n	80086a2 <SetButtonEvents+0x82>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 8008850:	2800      	cmp	r0, #0
 8008852:	d18f      	bne.n	8008774 <SetButtonEvents+0x154>
 8008854:	7a19      	ldrb	r1, [r3, #8]
 8008856:	e734      	b.n	80086c2 <SetButtonEvents+0xa2>
 8008858:	2000191c 	.word	0x2000191c

0800885c <MX_ADC_Init>:
 * to read multiple ADC channel in Port 2 and port 3 and for calculate
 * internal temperature and internal voltage reference which is equal in stm32f0 to around 1.2v.
 *
 */
void MX_ADC_Init(void) {
	hadc.Instance = ADC1;
 800885c:	4811      	ldr	r0, [pc, #68]	; (80088a4 <MX_ADC_Init+0x48>)
 800885e:	4b12      	ldr	r3, [pc, #72]	; (80088a8 <MX_ADC_Init+0x4c>)
void MX_ADC_Init(void) {
 8008860:	b510      	push	{r4, lr}
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008862:	2104      	movs	r1, #4
	hadc.Instance = ADC1;
 8008864:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008866:	2380      	movs	r3, #128	; 0x80
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008868:	6141      	str	r1, [r0, #20]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800886a:	061b      	lsls	r3, r3, #24
	hadc.Init.LowPowerAutoWait = DISABLE;
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
	hadc.Init.ContinuousConvMode = ENABLE;
	hadc.Init.DiscontinuousConvMode = DISABLE;
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800886c:	21c2      	movs	r1, #194	; 0xc2
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800886e:	2201      	movs	r2, #1
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008870:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008872:	2300      	movs	r3, #0
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008874:	31ff      	adds	r1, #255	; 0xff
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008876:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008878:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800887a:	6102      	str	r2, [r0, #16]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800887c:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800887e:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 8008880:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8008882:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008884:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008886:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 8008888:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800888a:	6342      	str	r2, [r0, #52]	; 0x34

	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800888c:	f006 ff38 	bl	800f700 <HAL_ADC_Init>
 8008890:	2800      	cmp	r0, #0
 8008892:	d002      	beq.n	800889a <MX_ADC_Init+0x3e>
		return ADC_CHANNEL_5;
}

void Error_Handler(void) {

	HAL_Delay(100);
 8008894:	2064      	movs	r0, #100	; 0x64
 8008896:	f006 fe59 	bl	800f54c <HAL_Delay>
	ADC_flag = 1;
 800889a:	2378      	movs	r3, #120	; 0x78
 800889c:	2101      	movs	r1, #1
 800889e:	4a03      	ldr	r2, [pc, #12]	; (80088ac <MX_ADC_Init+0x50>)
 80088a0:	54d1      	strb	r1, [r2, r3]
}
 80088a2:	bd10      	pop	{r4, pc}
 80088a4:	20006f70 	.word	0x20006f70
 80088a8:	40012400 	.word	0x40012400
 80088ac:	2000191c 	.word	0x2000191c

080088b0 <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 80088b0:	b500      	push	{lr}
 80088b2:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80088b4:	2214      	movs	r2, #20
 80088b6:	2100      	movs	r1, #0
 80088b8:	a803      	add	r0, sp, #12
 80088ba:	f00a f9f9 	bl	8012cb0 <memset>
		__HAL_RCC_ADC1_CLK_ENABLE();
 80088be:	2080      	movs	r0, #128	; 0x80
 80088c0:	4b11      	ldr	r3, [pc, #68]	; (8008908 <HAL_ADC_MspInit+0x58>)
 80088c2:	0080      	lsls	r0, r0, #2
 80088c4:	6999      	ldr	r1, [r3, #24]
 80088c6:	4301      	orrs	r1, r0
 80088c8:	6199      	str	r1, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80088ca:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_ADC1_CLK_ENABLE();
 80088cc:	699a      	ldr	r2, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80088ce:	0289      	lsls	r1, r1, #10
		__HAL_RCC_ADC1_CLK_ENABLE();
 80088d0:	4002      	ands	r2, r0
 80088d2:	9201      	str	r2, [sp, #4]
 80088d4:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80088d6:	695a      	ldr	r2, [r3, #20]
 80088d8:	430a      	orrs	r2, r1
 80088da:	615a      	str	r2, [r3, #20]
 80088dc:	695b      	ldr	r3, [r3, #20]
		if(flag_ADC_Select==1){
 80088de:	4a0b      	ldr	r2, [pc, #44]	; (800890c <HAL_ADC_MspInit+0x5c>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80088e0:	400b      	ands	r3, r1
 80088e2:	9302      	str	r3, [sp, #8]
 80088e4:	9b02      	ldr	r3, [sp, #8]
		if(flag_ADC_Select==1){
 80088e6:	2379      	movs	r3, #121	; 0x79
 80088e8:	5cd3      	ldrb	r3, [r2, r3]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d001      	beq.n	80088f2 <HAL_ADC_MspInit+0x42>
}
 80088ee:	b009      	add	sp, #36	; 0x24
 80088f0:	bd00      	pop	{pc}
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 80088f2:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80088f4:	333b      	adds	r3, #59	; 0x3b
 80088f6:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 80088f8:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80088fa:	3b39      	subs	r3, #57	; 0x39
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 80088fc:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80088fe:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 8008900:	f008 f8d0 	bl	8010aa4 <HAL_GPIO_Init>
}
 8008904:	e7f3      	b.n	80088ee <HAL_ADC_MspInit+0x3e>
 8008906:	46c0      	nop			; (mov r8, r8)
 8008908:	40021000 	.word	0x40021000
 800890c:	2000191c 	.word	0x2000191c

08008910 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008912:	46ce      	mov	lr, r9
 8008914:	4647      	mov	r7, r8
	if (0 == ADC_flag)
 8008916:	2378      	movs	r3, #120	; 0x78
void ReadTempAndVref(float *temp, float *Vref) {
 8008918:	b580      	push	{r7, lr}
	if (0 == ADC_flag)
 800891a:	4c57      	ldr	r4, [pc, #348]	; (8008a78 <ReadTempAndVref+0x168>)
void ReadTempAndVref(float *temp, float *Vref) {
 800891c:	0007      	movs	r7, r0
	if (0 == ADC_flag)
 800891e:	5ce3      	ldrb	r3, [r4, r3]
void ReadTempAndVref(float *temp, float *Vref) {
 8008920:	4689      	mov	r9, r1
	if (0 == ADC_flag)
 8008922:	2b00      	cmp	r3, #0
 8008924:	d100      	bne.n	8008928 <ReadTempAndVref+0x18>
 8008926:	e0a4      	b.n	8008a72 <ReadTempAndVref+0x162>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008928:	2310      	movs	r3, #16
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800892a:	2280      	movs	r2, #128	; 0x80
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800892c:	67e3      	str	r3, [r4, #124]	; 0x7c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800892e:	0152      	lsls	r2, r2, #5
 8008930:	3370      	adds	r3, #112	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008932:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008934:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008936:	2201      	movs	r2, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008938:	4d50      	ldr	r5, [pc, #320]	; (8008a7c <ReadTempAndVref+0x16c>)
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800893a:	3304      	adds	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800893c:	317c      	adds	r1, #124	; 0x7c
 800893e:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008940:	50e2      	str	r2, [r4, r3]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008942:	f007 f835 	bl	800f9b0 <HAL_ADC_ConfigChannel>
 8008946:	2800      	cmp	r0, #0
 8008948:	d000      	beq.n	800894c <ReadTempAndVref+0x3c>
 800894a:	e08e      	b.n	8008a6a <ReadTempAndVref+0x15a>
	HAL_ADC_Start(&hadc);
 800894c:	0028      	movs	r0, r5
 800894e:	f006 ff79 	bl	800f844 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8008952:	2164      	movs	r1, #100	; 0x64
 8008954:	0028      	movs	r0, r5
 8008956:	f006 ffc1 	bl	800f8dc <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800895a:	0028      	movs	r0, r5
 800895c:	f007 f822 	bl	800f9a4 <HAL_ADC_GetValue>
 8008960:	4e47      	ldr	r6, [pc, #284]	; (8008a80 <ReadTempAndVref+0x170>)
 8008962:	8130      	strh	r0, [r6, #8]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 8008964:	0400      	lsls	r0, r0, #16
 8008966:	0c00      	lsrs	r0, r0, #16
 8008968:	f7fa f870 	bl	8002a4c <__aeabi_i2d>
 800896c:	4a45      	ldr	r2, [pc, #276]	; (8008a84 <ReadTempAndVref+0x174>)
 800896e:	4b46      	ldr	r3, [pc, #280]	; (8008a88 <ReadTempAndVref+0x178>)
 8008970:	f7f9 fa60 	bl	8001e34 <__aeabi_dmul>
 8008974:	2200      	movs	r2, #0
 8008976:	4b45      	ldr	r3, [pc, #276]	; (8008a8c <ReadTempAndVref+0x17c>)
 8008978:	f7f8 fe52 	bl	8001620 <__aeabi_ddiv>
 800897c:	4a44      	ldr	r2, [pc, #272]	; (8008a90 <ReadTempAndVref+0x180>)
 800897e:	4b45      	ldr	r3, [pc, #276]	; (8008a94 <ReadTempAndVref+0x184>)
 8008980:	f7f9 fcca 	bl	8002318 <__aeabi_dsub>
 8008984:	4a44      	ldr	r2, [pc, #272]	; (8008a98 <ReadTempAndVref+0x188>)
 8008986:	4b45      	ldr	r3, [pc, #276]	; (8008a9c <ReadTempAndVref+0x18c>)
 8008988:	f7f8 fe4a 	bl	8001620 <__aeabi_ddiv>
 800898c:	2200      	movs	r2, #0
 800898e:	4b44      	ldr	r3, [pc, #272]	; (8008aa0 <ReadTempAndVref+0x190>)
 8008990:	f7f8 fb2a 	bl	8000fe8 <__aeabi_dadd>
 8008994:	f7fa f918 	bl	8002bc8 <__aeabi_d2f>
 8008998:	6038      	str	r0, [r7, #0]
	HAL_ADC_Stop(&hadc);
 800899a:	0028      	movs	r0, r5
 800899c:	f006 ff7e 	bl	800f89c <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80089a0:	2310      	movs	r3, #16
	sConfig.Rank = ADC_RANK_NONE;
 80089a2:	4a40      	ldr	r2, [pc, #256]	; (8008aa4 <ReadTempAndVref+0x194>)
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80089a4:	67e3      	str	r3, [r4, #124]	; 0x7c
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80089a6:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 80089a8:	3370      	adds	r3, #112	; 0x70
 80089aa:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80089ac:	2201      	movs	r2, #1
 80089ae:	3304      	adds	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80089b0:	317c      	adds	r1, #124	; 0x7c
 80089b2:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80089b4:	50e2      	str	r2, [r4, r3]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80089b6:	f006 fffb 	bl	800f9b0 <HAL_ADC_ConfigChannel>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d151      	bne.n	8008a62 <ReadTempAndVref+0x152>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80089be:	2311      	movs	r3, #17
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80089c0:	2280      	movs	r2, #128	; 0x80
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80089c2:	67e3      	str	r3, [r4, #124]	; 0x7c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80089c4:	0152      	lsls	r2, r2, #5
 80089c6:	336f      	adds	r3, #111	; 0x6f
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80089c8:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80089ca:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80089cc:	2205      	movs	r2, #5
 80089ce:	3304      	adds	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80089d0:	317c      	adds	r1, #124	; 0x7c
 80089d2:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80089d4:	50e2      	str	r2, [r4, r3]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80089d6:	f006 ffeb 	bl	800f9b0 <HAL_ADC_ConfigChannel>
 80089da:	2800      	cmp	r0, #0
 80089dc:	d13d      	bne.n	8008a5a <ReadTempAndVref+0x14a>
	HAL_ADC_Start(&hadc);
 80089de:	0028      	movs	r0, r5
 80089e0:	f006 ff30 	bl	800f844 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 80089e4:	2164      	movs	r1, #100	; 0x64
 80089e6:	0028      	movs	r0, r5
 80089e8:	f006 ff78 	bl	800f8dc <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 80089ec:	0028      	movs	r0, r5
 80089ee:	f006 ffd9 	bl	800f9a4 <HAL_ADC_GetValue>
 80089f2:	4680      	mov	r8, r0
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 80089f4:	4b2c      	ldr	r3, [pc, #176]	; (8008aa8 <ReadTempAndVref+0x198>)
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 80089f6:	8170      	strh	r0, [r6, #10]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 80089f8:	8818      	ldrh	r0, [r3, #0]
 80089fa:	f7fa f827 	bl	8002a4c <__aeabi_i2d>
 80089fe:	4a21      	ldr	r2, [pc, #132]	; (8008a84 <ReadTempAndVref+0x174>)
 8008a00:	4b21      	ldr	r3, [pc, #132]	; (8008a88 <ReadTempAndVref+0x178>)
 8008a02:	f7f9 fa17 	bl	8001e34 <__aeabi_dmul>
 8008a06:	4643      	mov	r3, r8
 8008a08:	0006      	movs	r6, r0
 8008a0a:	0418      	lsls	r0, r3, #16
 8008a0c:	0c00      	lsrs	r0, r0, #16
 8008a0e:	000f      	movs	r7, r1
 8008a10:	f7fa f81c 	bl	8002a4c <__aeabi_i2d>
 8008a14:	0002      	movs	r2, r0
 8008a16:	000b      	movs	r3, r1
 8008a18:	0030      	movs	r0, r6
 8008a1a:	0039      	movs	r1, r7
 8008a1c:	f7f8 fe00 	bl	8001620 <__aeabi_ddiv>
 8008a20:	f7fa f8d2 	bl	8002bc8 <__aeabi_d2f>
 8008a24:	464b      	mov	r3, r9
 8008a26:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 8008a28:	0028      	movs	r0, r5
 8008a2a:	f006 ff37 	bl	800f89c <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008a2e:	2311      	movs	r3, #17
	sConfig.Rank = ADC_RANK_NONE;
 8008a30:	4a1c      	ldr	r2, [pc, #112]	; (8008aa4 <ReadTempAndVref+0x194>)
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008a32:	67e3      	str	r3, [r4, #124]	; 0x7c
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008a34:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 8008a36:	336f      	adds	r3, #111	; 0x6f
 8008a38:	50e2      	str	r2, [r4, r3]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	3304      	adds	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008a3e:	317c      	adds	r1, #124	; 0x7c
 8008a40:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008a42:	50e2      	str	r2, [r4, r3]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008a44:	f006 ffb4 	bl	800f9b0 <HAL_ADC_ConfigChannel>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d002      	beq.n	8008a52 <ReadTempAndVref+0x142>
	HAL_Delay(100);
 8008a4c:	2064      	movs	r0, #100	; 0x64
 8008a4e:	f006 fd7d 	bl	800f54c <HAL_Delay>
}
 8008a52:	bc0c      	pop	{r2, r3}
 8008a54:	4690      	mov	r8, r2
 8008a56:	4699      	mov	r9, r3
 8008a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_Delay(100);
 8008a5a:	2064      	movs	r0, #100	; 0x64
 8008a5c:	f006 fd76 	bl	800f54c <HAL_Delay>
 8008a60:	e7bd      	b.n	80089de <ReadTempAndVref+0xce>
 8008a62:	2064      	movs	r0, #100	; 0x64
 8008a64:	f006 fd72 	bl	800f54c <HAL_Delay>
 8008a68:	e7a9      	b.n	80089be <ReadTempAndVref+0xae>
 8008a6a:	2064      	movs	r0, #100	; 0x64
 8008a6c:	f006 fd6e 	bl	800f54c <HAL_Delay>
 8008a70:	e76c      	b.n	800894c <ReadTempAndVref+0x3c>
		MX_ADC_Init();
 8008a72:	f7ff fef3 	bl	800885c <MX_ADC_Init>
 8008a76:	e757      	b.n	8008928 <ReadTempAndVref+0x18>
 8008a78:	2000191c 	.word	0x2000191c
 8008a7c:	20006f70 	.word	0x20006f70
 8008a80:	2000199c 	.word	0x2000199c
 8008a84:	66666666 	.word	0x66666666
 8008a88:	400a6666 	.word	0x400a6666
 8008a8c:	40affe00 	.word	0x40affe00
 8008a90:	28f5c28f 	.word	0x28f5c28f
 8008a94:	3ff68f5c 	.word	0x3ff68f5c
 8008a98:	33333333 	.word	0x33333333
 8008a9c:	40113333 	.word	0x40113333
 8008aa0:	40390000 	.word	0x40390000
 8008aa4:	00001001 	.word	0x00001001
 8008aa8:	1ffff7ba 	.word	0x1ffff7ba

08008aac <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 8008aac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (port == 2 || port == 3) {
 8008aae:	1e83      	subs	r3, r0, #2
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 8008ab0:	b087      	sub	sp, #28
 8008ab2:	0005      	movs	r5, r0
 8008ab4:	000f      	movs	r7, r1
	if (port == 2 || port == 3) {
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d901      	bls.n	8008abe <GetReadPrecentage+0x12>
}
 8008aba:	b007      	add	sp, #28
 8008abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (0 == ADC_flag) {
 8008abe:	2378      	movs	r3, #120	; 0x78
 8008ac0:	4c59      	ldr	r4, [pc, #356]	; (8008c28 <GetReadPrecentage+0x17c>)
 8008ac2:	5ce3      	ldrb	r3, [r4, r3]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d065      	beq.n	8008b94 <GetReadPrecentage+0xe8>
		Channel = Get_channel(GetUart(port), "bottom");
 8008ac8:	0028      	movs	r0, r5
 8008aca:	f004 fcf7 	bl	800d4bc <GetUart>
	if (huart->Instance == USART2 && side == "top")
 8008ace:	4a57      	ldr	r2, [pc, #348]	; (8008c2c <GetReadPrecentage+0x180>)
 8008ad0:	6803      	ldr	r3, [r0, #0]
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d100      	bne.n	8008ad8 <GetReadPrecentage+0x2c>
 8008ad6:	e080      	b.n	8008bda <GetReadPrecentage+0x12e>
	else if (huart->Instance == USART6 && side == "top")
 8008ad8:	4a55      	ldr	r2, [pc, #340]	; (8008c30 <GetReadPrecentage+0x184>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d04f      	beq.n	8008b7e <GetReadPrecentage+0xd2>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	001a      	movs	r2, r3
		Channel = Get_channel(GetUart(port), "bottom");
 8008ae2:	4e54      	ldr	r6, [pc, #336]	; (8008c34 <GetReadPrecentage+0x188>)
		sConfig.Channel = Channel;
 8008ae4:	67e2      	str	r2, [r4, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008ae6:	2280      	movs	r2, #128	; 0x80
		Channel = Get_channel(GetUart(port), "bottom");
 8008ae8:	7333      	strb	r3, [r6, #12]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008aea:	2380      	movs	r3, #128	; 0x80
 8008aec:	0152      	lsls	r2, r2, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008aee:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008af0:	50e2      	str	r2, [r4, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008af2:	2201      	movs	r2, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008af4:	4d50      	ldr	r5, [pc, #320]	; (8008c38 <GetReadPrecentage+0x18c>)
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008af6:	3304      	adds	r3, #4
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008af8:	317c      	adds	r1, #124	; 0x7c
 8008afa:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008afc:	50e2      	str	r2, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008afe:	f006 ff57 	bl	800f9b0 <HAL_ADC_ConfigChannel>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d142      	bne.n	8008b8c <GetReadPrecentage+0xe0>
		HAL_ADC_Start(&hadc);
 8008b06:	0028      	movs	r0, r5
 8008b08:	f006 fe9c 	bl	800f844 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 8008b0c:	2164      	movs	r1, #100	; 0x64
 8008b0e:	0028      	movs	r0, r5
 8008b10:	f006 fee4 	bl	800f8dc <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 8008b14:	0028      	movs	r0, r5
 8008b16:	f006 ff45 	bl	800f9a4 <HAL_ADC_GetValue>
 8008b1a:	f7f8 fa25 	bl	8000f68 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 8008b1e:	f7fa f801 	bl	8002b24 <__aeabi_f2d>
 8008b22:	4a46      	ldr	r2, [pc, #280]	; (8008c3c <GetReadPrecentage+0x190>)
 8008b24:	4b46      	ldr	r3, [pc, #280]	; (8008c40 <GetReadPrecentage+0x194>)
 8008b26:	f7f9 f985 	bl	8001e34 <__aeabi_dmul>
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	4b45      	ldr	r3, [pc, #276]	; (8008c44 <GetReadPrecentage+0x198>)
 8008b2e:	f7f8 fd77 	bl	8001620 <__aeabi_ddiv>
 8008b32:	f7fa f849 	bl	8002bc8 <__aeabi_d2f>
		current = (100 * percentage) / 3.3;
 8008b36:	4944      	ldr	r1, [pc, #272]	; (8008c48 <GetReadPrecentage+0x19c>)
		percentage = 3.3 * percentage / 4095;
 8008b38:	6130      	str	r0, [r6, #16]
		current = (100 * percentage) / 3.3;
 8008b3a:	f7f7 feff 	bl	800093c <__aeabi_fmul>
 8008b3e:	f7f9 fff1 	bl	8002b24 <__aeabi_f2d>
 8008b42:	4a3e      	ldr	r2, [pc, #248]	; (8008c3c <GetReadPrecentage+0x190>)
 8008b44:	4b3e      	ldr	r3, [pc, #248]	; (8008c40 <GetReadPrecentage+0x194>)
 8008b46:	f7f8 fd6b 	bl	8001620 <__aeabi_ddiv>
 8008b4a:	f7fa f83d 	bl	8002bc8 <__aeabi_d2f>
 8008b4e:	6170      	str	r0, [r6, #20]
		*precentageValue = current;
 8008b50:	6038      	str	r0, [r7, #0]
		HAL_ADC_Stop(&hadc);
 8008b52:	0028      	movs	r0, r5
 8008b54:	f006 fea2 	bl	800f89c <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 8008b58:	7b33      	ldrb	r3, [r6, #12]
		sConfig.Rank = ADC_RANK_NONE;
 8008b5a:	4a3c      	ldr	r2, [pc, #240]	; (8008c4c <GetReadPrecentage+0x1a0>)
		sConfig.Channel = Channel;
 8008b5c:	67e3      	str	r3, [r4, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_NONE;
 8008b5e:	2380      	movs	r3, #128	; 0x80
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008b60:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_NONE;
 8008b62:	50e2      	str	r2, [r4, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008b64:	2201      	movs	r2, #1
 8008b66:	3304      	adds	r3, #4
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008b68:	317c      	adds	r1, #124	; 0x7c
 8008b6a:	0028      	movs	r0, r5
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008b6c:	50e2      	str	r2, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008b6e:	f006 ff1f 	bl	800f9b0 <HAL_ADC_ConfigChannel>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d0a1      	beq.n	8008aba <GetReadPrecentage+0xe>
	HAL_Delay(100);
 8008b76:	2064      	movs	r0, #100	; 0x64
 8008b78:	f006 fce8 	bl	800f54c <HAL_Delay>
 8008b7c:	e79d      	b.n	8008aba <GetReadPrecentage+0xe>
	else if (huart->Instance == USART6 && side == "top")
 8008b7e:	4a34      	ldr	r2, [pc, #208]	; (8008c50 <GetReadPrecentage+0x1a4>)
 8008b80:	4b34      	ldr	r3, [pc, #208]	; (8008c54 <GetReadPrecentage+0x1a8>)
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d04c      	beq.n	8008c20 <GetReadPrecentage+0x174>
 8008b86:	2205      	movs	r2, #5
		return ADC_CHANNEL_5;
 8008b88:	2305      	movs	r3, #5
 8008b8a:	e7aa      	b.n	8008ae2 <GetReadPrecentage+0x36>
	HAL_Delay(100);
 8008b8c:	2064      	movs	r0, #100	; 0x64
 8008b8e:	f006 fcdd 	bl	800f54c <HAL_Delay>
 8008b92:	e7b8      	b.n	8008b06 <GetReadPrecentage+0x5a>
			MX_ADC_Init();
 8008b94:	f7ff fe62 	bl	800885c <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 8008b98:	0028      	movs	r0, r5
 8008b9a:	f004 fc8f 	bl	800d4bc <GetUart>
 8008b9e:	f009 f897 	bl	8011cd0 <HAL_UART_DeInit>
			if (port == 3) {
 8008ba2:	2d03      	cmp	r5, #3
 8008ba4:	d020      	beq.n	8008be8 <GetReadPrecentage+0x13c>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8008ba6:	2090      	movs	r0, #144	; 0x90
 8008ba8:	2104      	movs	r1, #4
 8008baa:	05c0      	lsls	r0, r0, #23
 8008bac:	f008 f876 	bl	8010c9c <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008bb0:	2304      	movs	r3, #4
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bb2:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008bb4:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bb6:	3b03      	subs	r3, #3
 8008bb8:	9302      	str	r3, [sp, #8]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bba:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008bbc:	3302      	adds	r3, #2
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bbe:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008bc0:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bc2:	f007 ff6f 	bl	8010aa4 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 8008bc6:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8008bc8:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 8008bca:	4b23      	ldr	r3, [pc, #140]	; (8008c58 <GetReadPrecentage+0x1ac>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8008bcc:	2104      	movs	r1, #4
				portStatus[port - 1] = CUSTOM;
 8008bce:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8008bd0:	05c0      	lsls	r0, r0, #23
 8008bd2:	3a05      	subs	r2, #5
 8008bd4:	f008 f906 	bl	8010de4 <HAL_GPIO_WritePin>
 8008bd8:	e776      	b.n	8008ac8 <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 8008bda:	4a1d      	ldr	r2, [pc, #116]	; (8008c50 <GetReadPrecentage+0x1a4>)
 8008bdc:	4b1d      	ldr	r3, [pc, #116]	; (8008c54 <GetReadPrecentage+0x1a8>)
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d01b      	beq.n	8008c1a <GetReadPrecentage+0x16e>
 8008be2:	2203      	movs	r2, #3
		return ADC_CHANNEL_3;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e77c      	b.n	8008ae2 <GetReadPrecentage+0x36>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8008be8:	2090      	movs	r0, #144	; 0x90
 8008bea:	2110      	movs	r1, #16
 8008bec:	05c0      	lsls	r0, r0, #23
 8008bee:	f008 f855 	bl	8010c9c <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008bf2:	2310      	movs	r3, #16
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bf4:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008bf6:	9301      	str	r3, [sp, #4]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bf8:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bfa:	3b0f      	subs	r3, #15
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bfc:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bfe:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008c00:	9504      	str	r5, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c02:	f007 ff4f 	bl	8010aa4 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 8008c06:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8008c08:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 8008c0a:	4b13      	ldr	r3, [pc, #76]	; (8008c58 <GetReadPrecentage+0x1ac>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8008c0c:	2110      	movs	r1, #16
				portStatus[port - 1] = CUSTOM;
 8008c0e:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8008c10:	05c0      	lsls	r0, r0, #23
 8008c12:	3a05      	subs	r2, #5
 8008c14:	f008 f8e6 	bl	8010de4 <HAL_GPIO_WritePin>
 8008c18:	e756      	b.n	8008ac8 <GetReadPrecentage+0x1c>
	if (huart->Instance == USART2 && side == "top")
 8008c1a:	2202      	movs	r2, #2
		return ADC_CHANNEL_2;
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	e760      	b.n	8008ae2 <GetReadPrecentage+0x36>
	else if (huart->Instance == USART6 && side == "top")
 8008c20:	2204      	movs	r2, #4
		return ADC_CHANNEL_4;
 8008c22:	2304      	movs	r3, #4
 8008c24:	e75d      	b.n	8008ae2 <GetReadPrecentage+0x36>
 8008c26:	46c0      	nop			; (mov r8, r8)
 8008c28:	2000191c 	.word	0x2000191c
 8008c2c:	40004400 	.word	0x40004400
 8008c30:	40011400 	.word	0x40011400
 8008c34:	2000199c 	.word	0x2000199c
 8008c38:	20006f70 	.word	0x20006f70
 8008c3c:	66666666 	.word	0x66666666
 8008c40:	400a6666 	.word	0x400a6666
 8008c44:	40affe00 	.word	0x40affe00
 8008c48:	42c80000 	.word	0x42c80000
 8008c4c:	00001001 	.word	0x00001001
 8008c50:	0801864c 	.word	0x0801864c
 8008c54:	08018648 	.word	0x08018648
 8008c58:	20000c2c 	.word	0x20000c2c

08008c5c <Get_Rank>:

}

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 8008c5c:	2802      	cmp	r0, #2
 8008c5e:	d00e      	beq.n	8008c7e <Get_Rank+0x22>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 8008c60:	2803      	cmp	r0, #3
 8008c62:	d002      	beq.n	8008c6a <Get_Rank+0xe>
 8008c64:	4b10      	ldr	r3, [pc, #64]	; (8008ca8 <Get_Rank+0x4c>)
 8008c66:	7e18      	ldrb	r0, [r3, #24]
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
}
 8008c68:	4770      	bx	lr
	else if (Port == 3 && side == "top")
 8008c6a:	4b10      	ldr	r3, [pc, #64]	; (8008cac <Get_Rank+0x50>)
 8008c6c:	4299      	cmp	r1, r3
 8008c6e:	d016      	beq.n	8008c9e <Get_Rank+0x42>
	else if (Port == 3 && side == "bottom")
 8008c70:	4b0f      	ldr	r3, [pc, #60]	; (8008cb0 <Get_Rank+0x54>)
 8008c72:	4299      	cmp	r1, r3
 8008c74:	d1f6      	bne.n	8008c64 <Get_Rank+0x8>
		Rank_t = 3;
 8008c76:	4b0c      	ldr	r3, [pc, #48]	; (8008ca8 <Get_Rank+0x4c>)
 8008c78:	7618      	strb	r0, [r3, #24]
 8008c7a:	2003      	movs	r0, #3
 8008c7c:	e7f4      	b.n	8008c68 <Get_Rank+0xc>
	if (Port == 2 && side == "top")
 8008c7e:	4b0b      	ldr	r3, [pc, #44]	; (8008cac <Get_Rank+0x50>)
 8008c80:	4299      	cmp	r1, r3
 8008c82:	d007      	beq.n	8008c94 <Get_Rank+0x38>
	else if (Port == 2 && side == "bottom")
 8008c84:	4b0a      	ldr	r3, [pc, #40]	; (8008cb0 <Get_Rank+0x54>)
 8008c86:	4299      	cmp	r1, r3
 8008c88:	d1ec      	bne.n	8008c64 <Get_Rank+0x8>
		Rank_t = 1;
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	4b06      	ldr	r3, [pc, #24]	; (8008ca8 <Get_Rank+0x4c>)
 8008c8e:	2001      	movs	r0, #1
 8008c90:	761a      	strb	r2, [r3, #24]
 8008c92:	e7e9      	b.n	8008c68 <Get_Rank+0xc>
		Rank_t = 0;
 8008c94:	2200      	movs	r2, #0
 8008c96:	4b04      	ldr	r3, [pc, #16]	; (8008ca8 <Get_Rank+0x4c>)
 8008c98:	2000      	movs	r0, #0
 8008c9a:	761a      	strb	r2, [r3, #24]
 8008c9c:	e7e4      	b.n	8008c68 <Get_Rank+0xc>
		Rank_t = 2;
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	4b01      	ldr	r3, [pc, #4]	; (8008ca8 <Get_Rank+0x4c>)
 8008ca2:	3801      	subs	r0, #1
 8008ca4:	761a      	strb	r2, [r3, #24]
 8008ca6:	e7df      	b.n	8008c68 <Get_Rank+0xc>
 8008ca8:	2000199c 	.word	0x2000199c
 8008cac:	08018648 	.word	0x08018648
 8008cb0:	0801864c 	.word	0x0801864c

08008cb4 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 8008cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cb6:	46c6      	mov	lr, r8
	if (ADC_port == 2 || ADC_port == 3) {
 8008cb8:	1e83      	subs	r3, r0, #2
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 8008cba:	b500      	push	{lr}
 8008cbc:	0004      	movs	r4, r0
 8008cbe:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d902      	bls.n	8008cca <ADCSelectChannel+0x16>
}
 8008cc4:	bc04      	pop	{r2}
 8008cc6:	4690      	mov	r8, r2
 8008cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flag_ADC_Select=1;
 8008cca:	2379      	movs	r3, #121	; 0x79
 8008ccc:	2201      	movs	r2, #1
 8008cce:	4e1e      	ldr	r6, [pc, #120]	; (8008d48 <ADCSelectChannel+0x94>)
 8008cd0:	54f2      	strb	r2, [r6, r3]
		HAL_UART_DeInit(GetUart(ADC_port));
 8008cd2:	f004 fbf3 	bl	800d4bc <GetUart>
 8008cd6:	f008 fffb 	bl	8011cd0 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 8008cda:	2206      	movs	r2, #6
 8008cdc:	4b1b      	ldr	r3, [pc, #108]	; (8008d4c <ADCSelectChannel+0x98>)
		Channel = Get_channel(GetUart(ADC_port), side);
 8008cde:	0020      	movs	r0, r4
		portStatus[ADC_port - 1] = CUSTOM;
 8008ce0:	191b      	adds	r3, r3, r4
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 8008ce6:	f004 fbe9 	bl	800d4bc <GetUart>
	if (huart->Instance == USART2 && side == "top")
 8008cea:	4a19      	ldr	r2, [pc, #100]	; (8008d50 <ADCSelectChannel+0x9c>)
 8008cec:	6803      	ldr	r3, [r0, #0]
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d011      	beq.n	8008d16 <ADCSelectChannel+0x62>
	else if (huart->Instance == USART6 && side == "top")
 8008cf2:	4a18      	ldr	r2, [pc, #96]	; (8008d54 <ADCSelectChannel+0xa0>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d017      	beq.n	8008d28 <ADCSelectChannel+0x74>
		Channel = Get_channel(GetUart(ADC_port), side);
 8008cf8:	4643      	mov	r3, r8
 8008cfa:	4f17      	ldr	r7, [pc, #92]	; (8008d58 <ADCSelectChannel+0xa4>)
		Rank_t = Get_Rank(ADC_port, side);
 8008cfc:	0029      	movs	r1, r5
 8008cfe:	0020      	movs	r0, r4
		Channel = Get_channel(GetUart(ADC_port), side);
 8008d00:	733b      	strb	r3, [r7, #12]
		Rank_t = Get_Rank(ADC_port, side);
 8008d02:	f7ff ffab 	bl	8008c5c <Get_Rank>
		if (ADC_flag == 0)
 8008d06:	2378      	movs	r3, #120	; 0x78
 8008d08:	5cf3      	ldrb	r3, [r6, r3]
		Rank_t = Get_Rank(ADC_port, side);
 8008d0a:	7638      	strb	r0, [r7, #24]
		if (ADC_flag == 0)
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1d9      	bne.n	8008cc4 <ADCSelectChannel+0x10>
			MX_ADC_Init();
 8008d10:	f7ff fda4 	bl	800885c <MX_ADC_Init>
}
 8008d14:	e7d6      	b.n	8008cc4 <ADCSelectChannel+0x10>
	if (huart->Instance == USART2 && side == "top")
 8008d16:	4b11      	ldr	r3, [pc, #68]	; (8008d5c <ADCSelectChannel+0xa8>)
 8008d18:	429d      	cmp	r5, r3
 8008d1a:	d011      	beq.n	8008d40 <ADCSelectChannel+0x8c>
	else if (huart->Instance == USART2 && side == "bottom")
 8008d1c:	4b10      	ldr	r3, [pc, #64]	; (8008d60 <ADCSelectChannel+0xac>)
 8008d1e:	429d      	cmp	r5, r3
 8008d20:	d1ea      	bne.n	8008cf8 <ADCSelectChannel+0x44>
		return ADC_CHANNEL_3;
 8008d22:	2303      	movs	r3, #3
 8008d24:	4698      	mov	r8, r3
 8008d26:	e7e7      	b.n	8008cf8 <ADCSelectChannel+0x44>
	else if (huart->Instance == USART6 && side == "top")
 8008d28:	4b0c      	ldr	r3, [pc, #48]	; (8008d5c <ADCSelectChannel+0xa8>)
 8008d2a:	429d      	cmp	r5, r3
 8008d2c:	d005      	beq.n	8008d3a <ADCSelectChannel+0x86>
	else if (huart->Instance == USART6 && side == "bottom")
 8008d2e:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <ADCSelectChannel+0xac>)
 8008d30:	429d      	cmp	r5, r3
 8008d32:	d1e1      	bne.n	8008cf8 <ADCSelectChannel+0x44>
		return ADC_CHANNEL_5;
 8008d34:	2305      	movs	r3, #5
 8008d36:	4698      	mov	r8, r3
 8008d38:	e7de      	b.n	8008cf8 <ADCSelectChannel+0x44>
		return ADC_CHANNEL_4;
 8008d3a:	2304      	movs	r3, #4
 8008d3c:	4698      	mov	r8, r3
 8008d3e:	e7db      	b.n	8008cf8 <ADCSelectChannel+0x44>
		return ADC_CHANNEL_2;
 8008d40:	2302      	movs	r3, #2
 8008d42:	4698      	mov	r8, r3
 8008d44:	e7d8      	b.n	8008cf8 <ADCSelectChannel+0x44>
 8008d46:	46c0      	nop			; (mov r8, r8)
 8008d48:	2000191c 	.word	0x2000191c
 8008d4c:	20000c2c 	.word	0x20000c2c
 8008d50:	40004400 	.word	0x40004400
 8008d54:	40011400 	.word	0x40011400
 8008d58:	2000199c 	.word	0x2000199c
 8008d5c:	08018648 	.word	0x08018648
 8008d60:	0801864c 	.word	0x0801864c

08008d64 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	4647      	mov	r7, r8
 8008d68:	46ce      	mov	lr, r9
	if (ADC_flag == 1) {
 8008d6a:	2378      	movs	r3, #120	; 0x78
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008d6c:	b580      	push	{r7, lr}
	if (ADC_flag == 1) {
 8008d6e:	4d3a      	ldr	r5, [pc, #232]	; (8008e58 <ReadADCChannel+0xf4>)
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008d70:	4680      	mov	r8, r0
	if (ADC_flag == 1) {
 8008d72:	5ceb      	ldrb	r3, [r5, r3]
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008d74:	000f      	movs	r7, r1
 8008d76:	0016      	movs	r6, r2
	if (ADC_flag == 1) {
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d00b      	beq.n	8008d94 <ReadADCChannel+0x30>
 8008d7c:	4c37      	ldr	r4, [pc, #220]	; (8008e5c <ReadADCChannel+0xf8>)
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 8008d7e:	7e23      	ldrb	r3, [r4, #24]
 8008d80:	005b      	lsls	r3, r3, #1
 8008d82:	18e4      	adds	r4, r4, r3
 8008d84:	8ba0      	ldrh	r0, [r4, #28]
 8008d86:	f7f8 f8ef 	bl	8000f68 <__aeabi_ui2f>
 8008d8a:	6030      	str	r0, [r6, #0]
}
 8008d8c:	bc0c      	pop	{r2, r3}
 8008d8e:	4690      	mov	r8, r2
 8008d90:	4699      	mov	r9, r3
 8008d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 8008d94:	f004 fb92 	bl	800d4bc <GetUart>
	if (huart->Instance == USART2 && side == "top")
 8008d98:	4a31      	ldr	r2, [pc, #196]	; (8008e60 <ReadADCChannel+0xfc>)
 8008d9a:	6803      	ldr	r3, [r0, #0]
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d03f      	beq.n	8008e20 <ReadADCChannel+0xbc>
	else if (huart->Instance == USART6 && side == "top")
 8008da0:	4a30      	ldr	r2, [pc, #192]	; (8008e64 <ReadADCChannel+0x100>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d049      	beq.n	8008e3a <ReadADCChannel+0xd6>
		Channel = Get_channel(GetUart(Port), side);
 8008da6:	464b      	mov	r3, r9
 8008da8:	4c2c      	ldr	r4, [pc, #176]	; (8008e5c <ReadADCChannel+0xf8>)
		Rank_t = Get_Rank(Port, side);
 8008daa:	0039      	movs	r1, r7
 8008dac:	4640      	mov	r0, r8
		Channel = Get_channel(GetUart(Port), side);
 8008dae:	7323      	strb	r3, [r4, #12]
		Rank_t = Get_Rank(Port, side);
 8008db0:	f7ff ff54 	bl	8008c5c <Get_Rank>
		sConfig.Channel = Channel;
 8008db4:	7b23      	ldrb	r3, [r4, #12]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008db6:	2280      	movs	r2, #128	; 0x80
		sConfig.Channel = Channel;
 8008db8:	67eb      	str	r3, [r5, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008dba:	2380      	movs	r3, #128	; 0x80
 8008dbc:	0152      	lsls	r2, r2, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008dbe:	0029      	movs	r1, r5
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008dc0:	50ea      	str	r2, [r5, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008dc2:	2203      	movs	r2, #3
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008dc4:	4f28      	ldr	r7, [pc, #160]	; (8008e68 <ReadADCChannel+0x104>)
		Rank_t = Get_Rank(Port, side);
 8008dc6:	7620      	strb	r0, [r4, #24]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008dc8:	3304      	adds	r3, #4
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008dca:	317c      	adds	r1, #124	; 0x7c
 8008dcc:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008dce:	50ea      	str	r2, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008dd0:	f006 fdee 	bl	800f9b0 <HAL_ADC_ConfigChannel>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d12c      	bne.n	8008e32 <ReadADCChannel+0xce>
		HAL_ADC_Start(&hadc);
 8008dd8:	0038      	movs	r0, r7
 8008dda:	f006 fd33 	bl	800f844 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 8008dde:	2164      	movs	r1, #100	; 0x64
 8008de0:	0038      	movs	r0, r7
 8008de2:	f006 fd7b 	bl	800f8dc <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 8008de6:	0038      	movs	r0, r7
 8008de8:	f006 fddc 	bl	800f9a4 <HAL_ADC_GetValue>
 8008dec:	7e23      	ldrb	r3, [r4, #24]
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	18e3      	adds	r3, r4, r3
 8008df2:	8398      	strh	r0, [r3, #28]
		HAL_ADC_Stop(&hadc);
 8008df4:	0038      	movs	r0, r7
 8008df6:	f006 fd51 	bl	800f89c <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 8008dfa:	7b23      	ldrb	r3, [r4, #12]
		sConfig.Rank = ADC_RANK_NONE;
 8008dfc:	4a1b      	ldr	r2, [pc, #108]	; (8008e6c <ReadADCChannel+0x108>)
		sConfig.Channel = Channel;
 8008dfe:	67eb      	str	r3, [r5, #124]	; 0x7c
		sConfig.Rank = ADC_RANK_NONE;
 8008e00:	2380      	movs	r3, #128	; 0x80
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008e02:	0029      	movs	r1, r5
		sConfig.Rank = ADC_RANK_NONE;
 8008e04:	50ea      	str	r2, [r5, r3]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008e06:	2203      	movs	r2, #3
 8008e08:	3304      	adds	r3, #4
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008e0a:	317c      	adds	r1, #124	; 0x7c
 8008e0c:	0038      	movs	r0, r7
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008e0e:	50ea      	str	r2, [r5, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008e10:	f006 fdce 	bl	800f9b0 <HAL_ADC_ConfigChannel>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d0b2      	beq.n	8008d7e <ReadADCChannel+0x1a>
	HAL_Delay(100);
 8008e18:	2064      	movs	r0, #100	; 0x64
 8008e1a:	f006 fb97 	bl	800f54c <HAL_Delay>
 8008e1e:	e7ae      	b.n	8008d7e <ReadADCChannel+0x1a>
	if (huart->Instance == USART2 && side == "top")
 8008e20:	4b13      	ldr	r3, [pc, #76]	; (8008e70 <ReadADCChannel+0x10c>)
 8008e22:	429f      	cmp	r7, r3
 8008e24:	d012      	beq.n	8008e4c <ReadADCChannel+0xe8>
	else if (huart->Instance == USART2 && side == "bottom")
 8008e26:	4b13      	ldr	r3, [pc, #76]	; (8008e74 <ReadADCChannel+0x110>)
 8008e28:	429f      	cmp	r7, r3
 8008e2a:	d1bc      	bne.n	8008da6 <ReadADCChannel+0x42>
		return ADC_CHANNEL_3;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	4699      	mov	r9, r3
 8008e30:	e7b9      	b.n	8008da6 <ReadADCChannel+0x42>
	HAL_Delay(100);
 8008e32:	2064      	movs	r0, #100	; 0x64
 8008e34:	f006 fb8a 	bl	800f54c <HAL_Delay>
 8008e38:	e7ce      	b.n	8008dd8 <ReadADCChannel+0x74>
	else if (huart->Instance == USART6 && side == "top")
 8008e3a:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <ReadADCChannel+0x10c>)
 8008e3c:	429f      	cmp	r7, r3
 8008e3e:	d008      	beq.n	8008e52 <ReadADCChannel+0xee>
	else if (huart->Instance == USART6 && side == "bottom")
 8008e40:	4b0c      	ldr	r3, [pc, #48]	; (8008e74 <ReadADCChannel+0x110>)
 8008e42:	429f      	cmp	r7, r3
 8008e44:	d1af      	bne.n	8008da6 <ReadADCChannel+0x42>
		return ADC_CHANNEL_5;
 8008e46:	2305      	movs	r3, #5
 8008e48:	4699      	mov	r9, r3
 8008e4a:	e7ac      	b.n	8008da6 <ReadADCChannel+0x42>
		return ADC_CHANNEL_2;
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	4699      	mov	r9, r3
 8008e50:	e7a9      	b.n	8008da6 <ReadADCChannel+0x42>
		return ADC_CHANNEL_4;
 8008e52:	2304      	movs	r3, #4
 8008e54:	4699      	mov	r9, r3
 8008e56:	e7a6      	b.n	8008da6 <ReadADCChannel+0x42>
 8008e58:	2000191c 	.word	0x2000191c
 8008e5c:	2000199c 	.word	0x2000199c
 8008e60:	40004400 	.word	0x40004400
 8008e64:	40011400 	.word	0x40011400
 8008e68:	20006f70 	.word	0x20006f70
 8008e6c:	00001001 	.word	0x00001001
 8008e70:	08018648 	.word	0x08018648
 8008e74:	0801864c 	.word	0x0801864c

08008e78 <buttonReleasedCallback>:
 8008e78:	4770      	bx	lr
 8008e7a:	46c0      	nop			; (mov r8, r8)

08008e7c <buttonClickedCallback>:
 8008e7c:	4770      	bx	lr
 8008e7e:	46c0      	nop			; (mov r8, r8)

08008e80 <buttonDblClickedCallback>:
 8008e80:	4770      	bx	lr
 8008e82:	46c0      	nop			; (mov r8, r8)

08008e84 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 8008e84:	4770      	bx	lr
 8008e86:	46c0      	nop			; (mov r8, r8)

08008e88 <buttonReleasedForYCallback>:
 8008e88:	4770      	bx	lr
 8008e8a:	46c0      	nop			; (mov r8, r8)

08008e8c <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 8008e8c:	4bc2      	ldr	r3, [pc, #776]	; (8009198 <CheckAttachedButtons+0x30c>)
 8008e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e90:	4645      	mov	r5, r8
 8008e92:	001c      	movs	r4, r3
 8008e94:	4698      	mov	r8, r3
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8008e96:	2300      	movs	r3, #0
void CheckAttachedButtons(void) {
 8008e98:	46de      	mov	lr, fp
 8008e9a:	464e      	mov	r6, r9
 8008e9c:	4657      	mov	r7, sl
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8008e9e:	469b      	mov	fp, r3
void CheckAttachedButtons(void) {
 8008ea0:	b5e0      	push	{r5, r6, r7, lr}
 8008ea2:	b08d      	sub	sp, #52	; 0x34
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8008ea4:	9306      	str	r3, [sp, #24]
			if (delayButtonStateReset == false)
 8008ea6:	4bbd      	ldr	r3, [pc, #756]	; (800919c <CheckAttachedButtons+0x310>)
void CheckAttachedButtons(void) {
 8008ea8:	2501      	movs	r5, #1
			if (delayButtonStateReset == false)
 8008eaa:	4699      	mov	r9, r3
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 8008eac:	465b      	mov	r3, fp
 8008eae:	3409      	adds	r4, #9
 8008eb0:	9305      	str	r3, [sp, #20]
 8008eb2:	b2eb      	uxtb	r3, r5
 8008eb4:	469a      	mov	sl, r3
		if (button[i].type)			// Only check defined butons
 8008eb6:	7863      	ldrb	r3, [r4, #1]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d100      	bne.n	8008ebe <CheckAttachedButtons+0x32>
 8008ebc:	e0ec      	b.n	8009098 <CheckAttachedButtons+0x20c>
			if (delayButtonStateReset == false)
 8008ebe:	2324      	movs	r3, #36	; 0x24
 8008ec0:	464a      	mov	r2, r9
 8008ec2:	5cd3      	ldrb	r3, [r2, r3]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d100      	bne.n	8008eca <CheckAttachedButtons+0x3e>
				button[i].state = NONE;
 8008ec8:	7023      	strb	r3, [r4, #0]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8008eca:	ab06      	add	r3, sp, #24
 8008ecc:	469c      	mov	ip, r3
 8008ece:	270e      	movs	r7, #14
 8008ed0:	ae09      	add	r6, sp, #36	; 0x24
 8008ed2:	4467      	add	r7, ip
 8008ed4:	ab0b      	add	r3, sp, #44	; 0x2c
 8008ed6:	0032      	movs	r2, r6
 8008ed8:	a90a      	add	r1, sp, #40	; 0x28
 8008eda:	9700      	str	r7, [sp, #0]
 8008edc:	4650      	mov	r0, sl
 8008ede:	f003 fd11 	bl	800c904 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 8008ee2:	8831      	ldrh	r1, [r6, #0]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008ee8:	f007 ff7c 	bl	8010de4 <HAL_GPIO_WritePin>
			Delay_us(10);
 8008eec:	200a      	movs	r0, #10
 8008eee:	f004 f899 	bl	800d024 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 8008ef2:	8839      	ldrh	r1, [r7, #0]
 8008ef4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008ef6:	f007 ff6f 	bl	8010dd8 <HAL_GPIO_ReadPin>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d100      	bne.n	8008f00 <CheckAttachedButtons+0x74>
 8008efe:	e122      	b.n	8009146 <CheckAttachedButtons+0x2ba>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 8008f00:	8831      	ldrh	r1, [r6, #0]
 8008f02:	2200      	movs	r2, #0
 8008f04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f06:	f007 ff6d 	bl	8010de4 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 8008f0a:	7863      	ldrb	r3, [r4, #1]
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d100      	bne.n	8008f12 <CheckAttachedButtons+0x86>
 8008f10:	e0d0      	b.n	80090b4 <CheckAttachedButtons+0x228>
 8008f12:	d800      	bhi.n	8008f16 <CheckAttachedButtons+0x8a>
 8008f14:	e0cc      	b.n	80090b0 <CheckAttachedButtons+0x224>
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d100      	bne.n	8008f1c <CheckAttachedButtons+0x90>
 8008f1a:	e14d      	b.n	80091b8 <CheckAttachedButtons+0x32c>
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	d000      	beq.n	8008f22 <CheckAttachedButtons+0x96>
 8008f20:	e11f      	b.n	8009162 <CheckAttachedButtons+0x2d6>
 8008f22:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 8008f24:	9e05      	ldr	r6, [sp, #20]
 8008f26:	00aa      	lsls	r2, r5, #2
 8008f28:	3140      	adds	r1, #64	; 0x40
 8008f2a:	588b      	ldr	r3, [r1, r2]
 8008f2c:	2e01      	cmp	r6, #1
 8008f2e:	d100      	bne.n	8008f32 <CheckAttachedButtons+0xa6>
 8008f30:	e14d      	b.n	80091ce <CheckAttachedButtons+0x342>
				else if (connected == GPIO_PIN_RESET)
 8008f32:	2e00      	cmp	r6, #0
 8008f34:	d100      	bne.n	8008f38 <CheckAttachedButtons+0xac>
 8008f36:	e233      	b.n	80093a0 <CheckAttachedButtons+0x514>
			if (state == CLOSED || state == ON) {
 8008f38:	9906      	ldr	r1, [sp, #24]
 8008f3a:	2904      	cmp	r1, #4
 8008f3c:	d100      	bne.n	8008f40 <CheckAttachedButtons+0xb4>
 8008f3e:	e118      	b.n	8009172 <CheckAttachedButtons+0x2e6>
 8008f40:	9906      	ldr	r1, [sp, #24]
 8008f42:	2902      	cmp	r1, #2
 8008f44:	d100      	bne.n	8008f48 <CheckAttachedButtons+0xbc>
 8008f46:	e114      	b.n	8009172 <CheckAttachedButtons+0x2e6>
			if (state == OPEN || state == OFF) {
 8008f48:	9906      	ldr	r1, [sp, #24]
 8008f4a:	2903      	cmp	r1, #3
 8008f4c:	d003      	beq.n	8008f56 <CheckAttachedButtons+0xca>
 8008f4e:	4894      	ldr	r0, [pc, #592]	; (80091a0 <CheckAttachedButtons+0x314>)
 8008f50:	9004      	str	r0, [sp, #16]
 8008f52:	2901      	cmp	r1, #1
 8008f54:	d116      	bne.n	8008f84 <CheckAttachedButtons+0xf8>
				if (releaseCounter[i] < 0xFFFF)
 8008f56:	4640      	mov	r0, r8
 8008f58:	305c      	adds	r0, #92	; 0x5c
 8008f5a:	5881      	ldr	r1, [r0, r2]
 8008f5c:	4e91      	ldr	r6, [pc, #580]	; (80091a4 <CheckAttachedButtons+0x318>)
 8008f5e:	42b1      	cmp	r1, r6
 8008f60:	d900      	bls.n	8008f64 <CheckAttachedButtons+0xd8>
 8008f62:	e0bc      	b.n	80090de <CheckAttachedButtons+0x252>
					++releaseCounter[i];		// Advance the debounce counter
 8008f64:	3101      	adds	r1, #1
 8008f66:	5081      	str	r1, [r0, r2]
 8008f68:	488d      	ldr	r0, [pc, #564]	; (80091a0 <CheckAttachedButtons+0x314>)
				if (clicked == 2
 8008f6a:	272f      	movs	r7, #47	; 0x2f
 8008f6c:	9004      	str	r0, [sp, #16]
 8008f6e:	7946      	ldrb	r6, [r0, #5]
 8008f70:	4648      	mov	r0, r9
 8008f72:	498d      	ldr	r1, [pc, #564]	; (80091a8 <CheckAttachedButtons+0x31c>)
 8008f74:	5dc7      	ldrb	r7, [r0, r7]
 8008f76:	5c69      	ldrb	r1, [r5, r1]
 8008f78:	2f02      	cmp	r7, #2
 8008f7a:	d100      	bne.n	8008f7e <CheckAttachedButtons+0xf2>
 8008f7c:	e103      	b.n	8009186 <CheckAttachedButtons+0x2fa>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 8008f7e:	42b1      	cmp	r1, r6
 8008f80:	d900      	bls.n	8008f84 <CheckAttachedButtons+0xf8>
 8008f82:	e102      	b.n	800918a <CheckAttachedButtons+0x2fe>
 8008f84:	4646      	mov	r6, r8
			if (pressCounter[i] < BOS.buttons.debounce) {
 8008f86:	9904      	ldr	r1, [sp, #16]
 8008f88:	365c      	adds	r6, #92	; 0x5c
 8008f8a:	58b0      	ldr	r0, [r6, r2]
 8008f8c:	8809      	ldrh	r1, [r1, #0]
 8008f8e:	9003      	str	r0, [sp, #12]
 8008f90:	4299      	cmp	r1, r3
 8008f92:	d84d      	bhi.n	8009030 <CheckAttachedButtons+0x1a4>
				if (pressCounter[i] == BOS.buttons.debounce) {
 8008f94:	d105      	bne.n	8008fa2 <CheckAttachedButtons+0x116>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 8008f96:	2707      	movs	r7, #7
 8008f98:	7027      	strb	r7, [r4, #0]
					++pressCounter[i];
 8008f9a:	4647      	mov	r7, r8
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	3740      	adds	r7, #64	; 0x40
 8008fa0:	50bb      	str	r3, [r7, r2]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8008fa2:	9803      	ldr	r0, [sp, #12]
 8008fa4:	4281      	cmp	r1, r0
 8008fa6:	d205      	bcs.n	8008fb4 <CheckAttachedButtons+0x128>
					releaseCounter[i] = 0;
 8008fa8:	4646      	mov	r6, r8
 8008faa:	2700      	movs	r7, #0
 8008fac:	2000      	movs	r0, #0
 8008fae:	365c      	adds	r6, #92	; 0x5c
 8008fb0:	50b7      	str	r7, [r6, r2]
 8008fb2:	9003      	str	r0, [sp, #12]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 8008fb4:	9804      	ldr	r0, [sp, #16]
 8008fb6:	8840      	ldrh	r0, [r0, #2]
 8008fb8:	9007      	str	r0, [sp, #28]
 8008fba:	4298      	cmp	r0, r3
 8008fbc:	d204      	bcs.n	8008fc8 <CheckAttachedButtons+0x13c>
						&& pressCounter[i] < 500) {
 8008fbe:	20f4      	movs	r0, #244	; 0xf4
 8008fc0:	30ff      	adds	r0, #255	; 0xff
 8008fc2:	4283      	cmp	r3, r0
 8008fc4:	d800      	bhi.n	8008fc8 <CheckAttachedButtons+0x13c>
 8008fc6:	e10c      	b.n	80091e2 <CheckAttachedButtons+0x356>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 8008fc8:	4878      	ldr	r0, [pc, #480]	; (80091ac <CheckAttachedButtons+0x320>)
 8008fca:	4684      	mov	ip, r0
 8008fcc:	4878      	ldr	r0, [pc, #480]	; (80091b0 <CheckAttachedButtons+0x324>)
 8008fce:	449c      	add	ip, r3
 8008fd0:	4584      	cmp	ip, r0
 8008fd2:	d82d      	bhi.n	8009030 <CheckAttachedButtons+0x1a4>
					if (clicked)
 8008fd4:	202f      	movs	r0, #47	; 0x2f
 8008fd6:	4684      	mov	ip, r0
 8008fd8:	4648      	mov	r0, r9
 8008fda:	4667      	mov	r7, ip
 8008fdc:	5dc0      	ldrb	r0, [r0, r7]
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d002      	beq.n	8008fe8 <CheckAttachedButtons+0x15c>
						clicked = 0;						// Cannot be a click
 8008fe2:	4648      	mov	r0, r9
 8008fe4:	2600      	movs	r6, #0
 8008fe6:	55c6      	strb	r6, [r0, r7]
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 8008fe8:	78a0      	ldrb	r0, [r4, #2]
	t1 *= 1000;
 8008fea:	0147      	lsls	r7, r0, #5
 8008fec:	1a3f      	subs	r7, r7, r0
 8008fee:	00bf      	lsls	r7, r7, #2
 8008ff0:	4683      	mov	fp, r0
 8008ff2:	46bc      	mov	ip, r7
 8008ff4:	44dc      	add	ip, fp
 8008ff6:	4660      	mov	r0, ip
 8008ff8:	00c0      	lsls	r0, r0, #3
	if (pressCounter[port] == t1) {
 8008ffa:	4298      	cmp	r0, r3
 8008ffc:	d100      	bne.n	8009000 <CheckAttachedButtons+0x174>
 8008ffe:	e169      	b.n	80092d4 <CheckAttachedButtons+0x448>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 8009000:	78e0      	ldrb	r0, [r4, #3]
	t2 *= 1000;
 8009002:	0147      	lsls	r7, r0, #5
 8009004:	1a3f      	subs	r7, r7, r0
 8009006:	00bf      	lsls	r7, r7, #2
 8009008:	4683      	mov	fp, r0
 800900a:	46bc      	mov	ip, r7
 800900c:	44dc      	add	ip, fp
 800900e:	4660      	mov	r0, ip
 8009010:	00c0      	lsls	r0, r0, #3
	} else if (pressCounter[port] == t2) {
 8009012:	4298      	cmp	r0, r3
 8009014:	d100      	bne.n	8009018 <CheckAttachedButtons+0x18c>
 8009016:	e175      	b.n	8009304 <CheckAttachedButtons+0x478>
			t3 = button[port].pressedX3Sec;
 8009018:	7920      	ldrb	r0, [r4, #4]
	t3 *= 1000;
 800901a:	0146      	lsls	r6, r0, #5
 800901c:	1a36      	subs	r6, r6, r0
 800901e:	00b6      	lsls	r6, r6, #2
 8009020:	4683      	mov	fp, r0
 8009022:	46b4      	mov	ip, r6
 8009024:	44dc      	add	ip, fp
 8009026:	4660      	mov	r0, ip
 8009028:	00c0      	lsls	r0, r0, #3
	} else if (pressCounter[port] == t3) {
 800902a:	4298      	cmp	r0, r3
 800902c:	d100      	bne.n	8009030 <CheckAttachedButtons+0x1a4>
 800902e:	e169      	b.n	8009304 <CheckAttachedButtons+0x478>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 8009030:	9b03      	ldr	r3, [sp, #12]
 8009032:	4299      	cmp	r1, r3
 8009034:	d822      	bhi.n	800907c <CheckAttachedButtons+0x1f0>
 8009036:	4643      	mov	r3, r8
 8009038:	9804      	ldr	r0, [sp, #16]
 800903a:	3340      	adds	r3, #64	; 0x40
 800903c:	8840      	ldrh	r0, [r0, #2]
 800903e:	589b      	ldr	r3, [r3, r2]
 8009040:	9007      	str	r0, [sp, #28]
				if (releaseCounter[i] == BOS.buttons.debounce) {
 8009042:	9803      	ldr	r0, [sp, #12]
 8009044:	4281      	cmp	r1, r0
 8009046:	d100      	bne.n	800904a <CheckAttachedButtons+0x1be>
 8009048:	e0c4      	b.n	80091d4 <CheckAttachedButtons+0x348>
 800904a:	4640      	mov	r0, r8
 800904c:	305c      	adds	r0, #92	; 0x5c
 800904e:	5880      	ldr	r0, [r0, r2]
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8009050:	4299      	cmp	r1, r3
 8009052:	d203      	bcs.n	800905c <CheckAttachedButtons+0x1d0>
					pressCounter[i] = 0;
 8009054:	4643      	mov	r3, r8
 8009056:	2100      	movs	r1, #0
 8009058:	3340      	adds	r3, #64	; 0x40
 800905a:	5099      	str	r1, [r3, r2]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800905c:	9b07      	ldr	r3, [sp, #28]
 800905e:	4283      	cmp	r3, r0
 8009060:	d240      	bcs.n	80090e4 <CheckAttachedButtons+0x258>
						&& releaseCounter[i] < 500) {
 8009062:	23f4      	movs	r3, #244	; 0xf4
 8009064:	33ff      	adds	r3, #255	; 0xff
 8009066:	4298      	cmp	r0, r3
 8009068:	d83c      	bhi.n	80090e4 <CheckAttachedButtons+0x258>
					if (clicked == 1) {
 800906a:	222f      	movs	r2, #47	; 0x2f
 800906c:	464b      	mov	r3, r9
 800906e:	5c9b      	ldrb	r3, [r3, r2]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d100      	bne.n	8009076 <CheckAttachedButtons+0x1ea>
 8009074:	e15e      	b.n	8009334 <CheckAttachedButtons+0x4a8>
					} else if (clicked == 3) {
 8009076:	2b03      	cmp	r3, #3
 8009078:	d100      	bne.n	800907c <CheckAttachedButtons+0x1f0>
 800907a:	e115      	b.n	80092a8 <CheckAttachedButtons+0x41c>
			switch (button[i].state) {
 800907c:	7823      	ldrb	r3, [r4, #0]
 800907e:	3b05      	subs	r3, #5
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b09      	cmp	r3, #9
 8009084:	d808      	bhi.n	8009098 <CheckAttachedButtons+0x20c>
 8009086:	4a4b      	ldr	r2, [pc, #300]	; (80091b4 <CheckAttachedButtons+0x328>)
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	58d3      	ldr	r3, [r2, r3]
 800908c:	469f      	mov	pc, r3
				buttonPressedCallback(i);
 800908e:	4650      	mov	r0, sl
 8009090:	f7ff f9ba 	bl	8008408 <buttonPressedCallback>
				button[i].state = NONE;
 8009094:	2300      	movs	r3, #0
 8009096:	7023      	strb	r3, [r4, #0]
 8009098:	3501      	adds	r5, #1
 800909a:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800909c:	2d07      	cmp	r5, #7
 800909e:	d000      	beq.n	80090a2 <CheckAttachedButtons+0x216>
 80090a0:	e707      	b.n	8008eb2 <CheckAttachedButtons+0x26>
}
 80090a2:	b00d      	add	sp, #52	; 0x34
 80090a4:	bc3c      	pop	{r2, r3, r4, r5}
 80090a6:	4690      	mov	r8, r2
 80090a8:	4699      	mov	r9, r3
 80090aa:	46a2      	mov	sl, r4
 80090ac:	46ab      	mov	fp, r5
 80090ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch (button[i].type) {
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d156      	bne.n	8009162 <CheckAttachedButtons+0x2d6>
 80090b4:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 80090b6:	9805      	ldr	r0, [sp, #20]
 80090b8:	00aa      	lsls	r2, r5, #2
 80090ba:	3140      	adds	r1, #64	; 0x40
 80090bc:	588b      	ldr	r3, [r1, r2]
 80090be:	2801      	cmp	r0, #1
 80090c0:	d100      	bne.n	80090c4 <CheckAttachedButtons+0x238>
 80090c2:	e161      	b.n	8009388 <CheckAttachedButtons+0x4fc>
				else if (connected == GPIO_PIN_RESET)
 80090c4:	9905      	ldr	r1, [sp, #20]
 80090c6:	2900      	cmp	r1, #0
 80090c8:	d000      	beq.n	80090cc <CheckAttachedButtons+0x240>
 80090ca:	e735      	b.n	8008f38 <CheckAttachedButtons+0xac>
				if (releaseCounter[i] < 0xFFFF)
 80090cc:	4640      	mov	r0, r8
 80090ce:	2103      	movs	r1, #3
 80090d0:	305c      	adds	r0, #92	; 0x5c
 80090d2:	9106      	str	r1, [sp, #24]
 80090d4:	4e33      	ldr	r6, [pc, #204]	; (80091a4 <CheckAttachedButtons+0x318>)
 80090d6:	5881      	ldr	r1, [r0, r2]
 80090d8:	42b1      	cmp	r1, r6
 80090da:	d800      	bhi.n	80090de <CheckAttachedButtons+0x252>
 80090dc:	e742      	b.n	8008f64 <CheckAttachedButtons+0xd8>
					releaseCounter[i] = 0;		// Reset debounce counter
 80090de:	2100      	movs	r1, #0
 80090e0:	5081      	str	r1, [r0, r2]
 80090e2:	e741      	b.n	8008f68 <CheckAttachedButtons+0xdc>
				} else if (releaseCounter[i] >= 500
 80090e4:	0003      	movs	r3, r0
 80090e6:	4a32      	ldr	r2, [pc, #200]	; (80091b0 <CheckAttachedButtons+0x324>)
 80090e8:	3bf5      	subs	r3, #245	; 0xf5
 80090ea:	3bff      	subs	r3, #255	; 0xff
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d8c5      	bhi.n	800907c <CheckAttachedButtons+0x1f0>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 80090f0:	7961      	ldrb	r1, [r4, #5]
	t1 *= 1000;
 80090f2:	014b      	lsls	r3, r1, #5
 80090f4:	1a5b      	subs	r3, r3, r1
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	185b      	adds	r3, r3, r1
 80090fa:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 80090fc:	4283      	cmp	r3, r0
 80090fe:	d100      	bne.n	8009102 <CheckAttachedButtons+0x276>
 8009100:	e12e      	b.n	8009360 <CheckAttachedButtons+0x4d4>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 8009102:	79a1      	ldrb	r1, [r4, #6]
	t2 *= 1000;
 8009104:	014b      	lsls	r3, r1, #5
 8009106:	1a5b      	subs	r3, r3, r1
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	185b      	adds	r3, r3, r1
 800910c:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t2) {
 800910e:	4283      	cmp	r3, r0
 8009110:	d007      	beq.n	8009122 <CheckAttachedButtons+0x296>
			t3 = button[port].releasedY3Sec;
 8009112:	79e1      	ldrb	r1, [r4, #7]
	t3 *= 1000;
 8009114:	014b      	lsls	r3, r1, #5
 8009116:	1a5b      	subs	r3, r3, r1
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	185b      	adds	r3, r3, r1
 800911c:	00db      	lsls	r3, r3, #3
	} else if (releaseCounter[port] == t3) {
 800911e:	4283      	cmp	r3, r0
 8009120:	d1ac      	bne.n	800907c <CheckAttachedButtons+0x1f0>
		button[port].state = RELEASED_FOR_Y2_SEC;
 8009122:	230d      	movs	r3, #13
 8009124:	7023      	strb	r3, [r4, #0]
				if (!delayButtonStateReset
 8009126:	2324      	movs	r3, #36	; 0x24
 8009128:	464a      	mov	r2, r9
 800912a:	5cd2      	ldrb	r2, [r2, r3]
 800912c:	2a00      	cmp	r2, #0
 800912e:	d1b3      	bne.n	8009098 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 8009130:	7a22      	ldrb	r2, [r4, #8]
 8009132:	0652      	lsls	r2, r2, #25
 8009134:	d5b0      	bpl.n	8009098 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 8009136:	4649      	mov	r1, r9
 8009138:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800913a:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800913c:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800913e:	2102      	movs	r1, #2
 8009140:	f7ff fea2 	bl	8008e88 <buttonReleasedForYCallback>
 8009144:	e7a8      	b.n	8009098 <CheckAttachedButtons+0x20c>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 8009146:	8831      	ldrh	r1, [r6, #0]
 8009148:	2201      	movs	r2, #1
 800914a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800914c:	f007 fe4a 	bl	8010de4 <HAL_GPIO_WritePin>
				Delay_us(10);
 8009150:	200a      	movs	r0, #10
 8009152:	f003 ff67 	bl	800d024 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 8009156:	8839      	ldrh	r1, [r7, #0]
 8009158:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800915a:	f007 fe3d 	bl	8010dd8 <HAL_GPIO_ReadPin>
 800915e:	9005      	str	r0, [sp, #20]
 8009160:	e6ce      	b.n	8008f00 <CheckAttachedButtons+0x74>
 8009162:	4643      	mov	r3, r8
			if (state == CLOSED || state == ON) {
 8009164:	9906      	ldr	r1, [sp, #24]
 8009166:	3340      	adds	r3, #64	; 0x40
 8009168:	00aa      	lsls	r2, r5, #2
 800916a:	589b      	ldr	r3, [r3, r2]
 800916c:	2904      	cmp	r1, #4
 800916e:	d000      	beq.n	8009172 <CheckAttachedButtons+0x2e6>
 8009170:	e6e6      	b.n	8008f40 <CheckAttachedButtons+0xb4>
				if (pressCounter[i] < 0xFFFF)
 8009172:	490c      	ldr	r1, [pc, #48]	; (80091a4 <CheckAttachedButtons+0x318>)
 8009174:	428b      	cmp	r3, r1
 8009176:	d84f      	bhi.n	8009218 <CheckAttachedButtons+0x38c>
					++pressCounter[i];			// Advance the debounce counter
 8009178:	4641      	mov	r1, r8
 800917a:	3301      	adds	r3, #1
 800917c:	3140      	adds	r1, #64	; 0x40
 800917e:	508b      	str	r3, [r1, r2]
 8009180:	4907      	ldr	r1, [pc, #28]	; (80091a0 <CheckAttachedButtons+0x314>)
 8009182:	9104      	str	r1, [sp, #16]
 8009184:	e6fe      	b.n	8008f84 <CheckAttachedButtons+0xf8>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 8009186:	42b1      	cmp	r1, r6
 8009188:	d94e      	bls.n	8009228 <CheckAttachedButtons+0x39c>
					clicked = 0;
 800918a:	2100      	movs	r1, #0
 800918c:	4648      	mov	r0, r9
 800918e:	262f      	movs	r6, #47	; 0x2f
 8009190:	5581      	strb	r1, [r0, r6]
					dblCounter[i] = 0;			// Reset the inter-click counter
 8009192:	4805      	ldr	r0, [pc, #20]	; (80091a8 <CheckAttachedButtons+0x31c>)
 8009194:	5429      	strb	r1, [r5, r0]
 8009196:	e6f5      	b.n	8008f84 <CheckAttachedButtons+0xf8>
 8009198:	2000191c 	.word	0x2000191c
 800919c:	2000199c 	.word	0x2000199c
 80091a0:	20006ea8 	.word	0x20006ea8
 80091a4:	0000fffe 	.word	0x0000fffe
 80091a8:	200019c4 	.word	0x200019c4
 80091ac:	fffffe0c 	.word	0xfffffe0c
 80091b0:	0000fe0a 	.word	0x0000fe0a
 80091b4:	0801783c 	.word	0x0801783c
 80091b8:	4641      	mov	r1, r8
				if (connected == GPIO_PIN_SET)
 80091ba:	9805      	ldr	r0, [sp, #20]
 80091bc:	00aa      	lsls	r2, r5, #2
 80091be:	3140      	adds	r1, #64	; 0x40
 80091c0:	588b      	ldr	r3, [r1, r2]
 80091c2:	2801      	cmp	r0, #1
 80091c4:	d063      	beq.n	800928e <CheckAttachedButtons+0x402>
				else if (connected == GPIO_PIN_RESET)
 80091c6:	9905      	ldr	r1, [sp, #20]
 80091c8:	2900      	cmp	r1, #0
 80091ca:	d000      	beq.n	80091ce <CheckAttachedButtons+0x342>
 80091cc:	e6b4      	b.n	8008f38 <CheckAttachedButtons+0xac>
					state = OFF;
 80091ce:	2101      	movs	r1, #1
 80091d0:	9106      	str	r1, [sp, #24]
 80091d2:	e6c0      	b.n	8008f56 <CheckAttachedButtons+0xca>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 80091d4:	2008      	movs	r0, #8
					++releaseCounter[i];
 80091d6:	4646      	mov	r6, r8
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 80091d8:	7020      	strb	r0, [r4, #0]
					++releaseCounter[i];
 80091da:	365c      	adds	r6, #92	; 0x5c
 80091dc:	1c48      	adds	r0, r1, #1
 80091de:	50b0      	str	r0, [r6, r2]
 80091e0:	e736      	b.n	8009050 <CheckAttachedButtons+0x1c4>
					if (clicked == 0)
 80091e2:	232f      	movs	r3, #47	; 0x2f
 80091e4:	4648      	mov	r0, r9
 80091e6:	5cc7      	ldrb	r7, [r0, r3]
 80091e8:	2f00      	cmp	r7, #0
 80091ea:	d100      	bne.n	80091ee <CheckAttachedButtons+0x362>
 80091ec:	e0e3      	b.n	80093b6 <CheckAttachedButtons+0x52a>
					else if (clicked == 2) {
 80091ee:	2f02      	cmp	r7, #2
 80091f0:	d000      	beq.n	80091f4 <CheckAttachedButtons+0x368>
 80091f2:	e71d      	b.n	8009030 <CheckAttachedButtons+0x1a4>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 80091f4:	4875      	ldr	r0, [pc, #468]	; (80093cc <CheckAttachedButtons+0x540>)
 80091f6:	9e04      	ldr	r6, [sp, #16]
 80091f8:	5c2f      	ldrb	r7, [r5, r0]
 80091fa:	7930      	ldrb	r0, [r6, #4]
 80091fc:	42b8      	cmp	r0, r7
 80091fe:	d300      	bcc.n	8009202 <CheckAttachedButtons+0x376>
 8009200:	e716      	b.n	8009030 <CheckAttachedButtons+0x1a4>
								&& dblCounter[i]
 8009202:	7970      	ldrb	r0, [r6, #5]
 8009204:	42b8      	cmp	r0, r7
 8009206:	d800      	bhi.n	800920a <CheckAttachedButtons+0x37e>
 8009208:	e712      	b.n	8009030 <CheckAttachedButtons+0x1a4>
							clicked = 3;	// Record a possible double click
 800920a:	4648      	mov	r0, r9
 800920c:	2703      	movs	r7, #3
 800920e:	54c7      	strb	r7, [r0, r3]
							dblCounter[i] = 0;	// Reset the inter-click counter
 8009210:	2300      	movs	r3, #0
 8009212:	486e      	ldr	r0, [pc, #440]	; (80093cc <CheckAttachedButtons+0x540>)
 8009214:	542b      	strb	r3, [r5, r0]
 8009216:	e70b      	b.n	8009030 <CheckAttachedButtons+0x1a4>
					pressCounter[i] = 0;			// Reset debounce counter
 8009218:	4643      	mov	r3, r8
 800921a:	2100      	movs	r1, #0
 800921c:	3340      	adds	r3, #64	; 0x40
 800921e:	5099      	str	r1, [r3, r2]
 8009220:	496b      	ldr	r1, [pc, #428]	; (80093d0 <CheckAttachedButtons+0x544>)
 8009222:	2300      	movs	r3, #0
 8009224:	9104      	str	r1, [sp, #16]
 8009226:	e6ad      	b.n	8008f84 <CheckAttachedButtons+0xf8>
					++dblCounter[i];
 8009228:	4868      	ldr	r0, [pc, #416]	; (80093cc <CheckAttachedButtons+0x540>)
 800922a:	3101      	adds	r1, #1
 800922c:	5429      	strb	r1, [r5, r0]
 800922e:	e6a9      	b.n	8008f84 <CheckAttachedButtons+0xf8>
				if (!delayButtonStateReset
 8009230:	2324      	movs	r3, #36	; 0x24
 8009232:	464a      	mov	r2, r9
 8009234:	5cd2      	ldrb	r2, [r2, r3]
 8009236:	2a00      	cmp	r2, #0
 8009238:	d000      	beq.n	800923c <CheckAttachedButtons+0x3b0>
 800923a:	e72d      	b.n	8009098 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800923c:	7a22      	ldrb	r2, [r4, #8]
 800923e:	2a7f      	cmp	r2, #127	; 0x7f
 8009240:	d800      	bhi.n	8009244 <CheckAttachedButtons+0x3b8>
 8009242:	e729      	b.n	8009098 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 8009244:	4649      	mov	r1, r9
 8009246:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 8009248:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800924a:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800924c:	2103      	movs	r1, #3
 800924e:	f7ff fe1b 	bl	8008e88 <buttonReleasedForYCallback>
 8009252:	e721      	b.n	8009098 <CheckAttachedButtons+0x20c>
				if (!delayButtonStateReset
 8009254:	2324      	movs	r3, #36	; 0x24
 8009256:	464a      	mov	r2, r9
 8009258:	5cd2      	ldrb	r2, [r2, r3]
 800925a:	2a00      	cmp	r2, #0
 800925c:	d000      	beq.n	8009260 <CheckAttachedButtons+0x3d4>
 800925e:	e71b      	b.n	8009098 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 8009260:	7a22      	ldrb	r2, [r4, #8]
 8009262:	06d2      	lsls	r2, r2, #27
 8009264:	d400      	bmi.n	8009268 <CheckAttachedButtons+0x3dc>
 8009266:	e717      	b.n	8009098 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 8009268:	4649      	mov	r1, r9
 800926a:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800926c:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800926e:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 8009270:	2103      	movs	r1, #3
 8009272:	f7ff fe07 	bl	8008e84 <buttonPressedForXCallback>
 8009276:	e70f      	b.n	8009098 <CheckAttachedButtons+0x20c>
				buttonReleasedCallback(i);
 8009278:	4650      	mov	r0, sl
 800927a:	f7ff fdfd 	bl	8008e78 <buttonReleasedCallback>
				button[i].state = NONE;
 800927e:	2300      	movs	r3, #0
 8009280:	3501      	adds	r5, #1
 8009282:	7023      	strb	r3, [r4, #0]
 8009284:	3409      	adds	r4, #9
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 8009286:	2d07      	cmp	r5, #7
 8009288:	d000      	beq.n	800928c <CheckAttachedButtons+0x400>
 800928a:	e612      	b.n	8008eb2 <CheckAttachedButtons+0x26>
 800928c:	e709      	b.n	80090a2 <CheckAttachedButtons+0x216>
				if (pressCounter[i] < 0xFFFF)
 800928e:	4851      	ldr	r0, [pc, #324]	; (80093d4 <CheckAttachedButtons+0x548>)
 8009290:	4283      	cmp	r3, r0
 8009292:	d900      	bls.n	8009296 <CheckAttachedButtons+0x40a>
 8009294:	e092      	b.n	80093bc <CheckAttachedButtons+0x530>
					state = ON;
 8009296:	2102      	movs	r1, #2
 8009298:	9106      	str	r1, [sp, #24]
					++pressCounter[i];			// Advance the debounce counter
 800929a:	4641      	mov	r1, r8
 800929c:	3301      	adds	r3, #1
 800929e:	3140      	adds	r1, #64	; 0x40
 80092a0:	508b      	str	r3, [r1, r2]
 80092a2:	494b      	ldr	r1, [pc, #300]	; (80093d0 <CheckAttachedButtons+0x544>)
 80092a4:	9104      	str	r1, [sp, #16]
 80092a6:	e66d      	b.n	8008f84 <CheckAttachedButtons+0xf8>
						button[i].state = DBL_CLICKED;// Record a double button click event
 80092a8:	3303      	adds	r3, #3
 80092aa:	7023      	strb	r3, [r4, #0]
						clicked = 0;			// Prepare for a single click
 80092ac:	4649      	mov	r1, r9
 80092ae:	2300      	movs	r3, #0
 80092b0:	548b      	strb	r3, [r1, r2]
				if (!delayButtonStateReset
 80092b2:	2324      	movs	r3, #36	; 0x24
 80092b4:	464a      	mov	r2, r9
 80092b6:	5cd2      	ldrb	r2, [r2, r3]
 80092b8:	2a00      	cmp	r2, #0
 80092ba:	d000      	beq.n	80092be <CheckAttachedButtons+0x432>
 80092bc:	e6ec      	b.n	8009098 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 80092be:	7a22      	ldrb	r2, [r4, #8]
 80092c0:	0792      	lsls	r2, r2, #30
 80092c2:	d400      	bmi.n	80092c6 <CheckAttachedButtons+0x43a>
 80092c4:	e6e8      	b.n	8009098 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 80092c6:	2201      	movs	r2, #1
 80092c8:	4649      	mov	r1, r9
					buttonDblClickedCallback(i);
 80092ca:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 80092cc:	54ca      	strb	r2, [r1, r3]
					buttonDblClickedCallback(i);
 80092ce:	f7ff fdd7 	bl	8008e80 <buttonDblClickedCallback>
 80092d2:	e6e1      	b.n	8009098 <CheckAttachedButtons+0x20c>
		button[port].state = PRESSED_FOR_X1_SEC;
 80092d4:	2009      	movs	r0, #9
 80092d6:	7020      	strb	r0, [r4, #0]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 80092d8:	9803      	ldr	r0, [sp, #12]
 80092da:	4281      	cmp	r1, r0
 80092dc:	d800      	bhi.n	80092e0 <CheckAttachedButtons+0x454>
 80092de:	e6b0      	b.n	8009042 <CheckAttachedButtons+0x1b6>
				if (!delayButtonStateReset
 80092e0:	2324      	movs	r3, #36	; 0x24
 80092e2:	464a      	mov	r2, r9
 80092e4:	5cd2      	ldrb	r2, [r2, r3]
 80092e6:	2a00      	cmp	r2, #0
 80092e8:	d000      	beq.n	80092ec <CheckAttachedButtons+0x460>
 80092ea:	e6d5      	b.n	8009098 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 80092ec:	7a22      	ldrb	r2, [r4, #8]
 80092ee:	0752      	lsls	r2, r2, #29
 80092f0:	d400      	bmi.n	80092f4 <CheckAttachedButtons+0x468>
 80092f2:	e6d1      	b.n	8009098 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 80092f4:	4649      	mov	r1, r9
 80092f6:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 80092f8:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 80092fa:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 80092fc:	2101      	movs	r1, #1
 80092fe:	f7ff fdc1 	bl	8008e84 <buttonPressedForXCallback>
 8009302:	e6c9      	b.n	8009098 <CheckAttachedButtons+0x20c>
		button[port].state = PRESSED_FOR_X2_SEC;
 8009304:	200a      	movs	r0, #10
 8009306:	7020      	strb	r0, [r4, #0]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 8009308:	9803      	ldr	r0, [sp, #12]
 800930a:	4281      	cmp	r1, r0
 800930c:	d800      	bhi.n	8009310 <CheckAttachedButtons+0x484>
 800930e:	e698      	b.n	8009042 <CheckAttachedButtons+0x1b6>
				if (!delayButtonStateReset
 8009310:	2324      	movs	r3, #36	; 0x24
 8009312:	464a      	mov	r2, r9
 8009314:	5cd2      	ldrb	r2, [r2, r3]
 8009316:	2a00      	cmp	r2, #0
 8009318:	d000      	beq.n	800931c <CheckAttachedButtons+0x490>
 800931a:	e6bd      	b.n	8009098 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800931c:	7a22      	ldrb	r2, [r4, #8]
 800931e:	0712      	lsls	r2, r2, #28
 8009320:	d400      	bmi.n	8009324 <CheckAttachedButtons+0x498>
 8009322:	e6b9      	b.n	8009098 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 8009324:	4649      	mov	r1, r9
 8009326:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 8009328:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800932a:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800932c:	2102      	movs	r1, #2
 800932e:	f7ff fda9 	bl	8008e84 <buttonPressedForXCallback>
 8009332:	e6b1      	b.n	8009098 <CheckAttachedButtons+0x20c>
						clicked = 2;			// Prepare for a double click
 8009334:	4649      	mov	r1, r9
						button[i].state = CLICKED;// Record a single button click event
 8009336:	3304      	adds	r3, #4
 8009338:	7023      	strb	r3, [r4, #0]
						clicked = 2;			// Prepare for a double click
 800933a:	3b03      	subs	r3, #3
 800933c:	548b      	strb	r3, [r1, r2]
				if (!delayButtonStateReset
 800933e:	2324      	movs	r3, #36	; 0x24
 8009340:	464a      	mov	r2, r9
 8009342:	5cd2      	ldrb	r2, [r2, r3]
 8009344:	2a00      	cmp	r2, #0
 8009346:	d000      	beq.n	800934a <CheckAttachedButtons+0x4be>
 8009348:	e6a6      	b.n	8009098 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800934a:	7a21      	ldrb	r1, [r4, #8]
 800934c:	3201      	adds	r2, #1
 800934e:	420a      	tst	r2, r1
 8009350:	d100      	bne.n	8009354 <CheckAttachedButtons+0x4c8>
 8009352:	e6a1      	b.n	8009098 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 8009354:	4649      	mov	r1, r9
					buttonClickedCallback(i);
 8009356:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 8009358:	54ca      	strb	r2, [r1, r3]
					buttonClickedCallback(i);
 800935a:	f7ff fd8f 	bl	8008e7c <buttonClickedCallback>
 800935e:	e69b      	b.n	8009098 <CheckAttachedButtons+0x20c>
		button[port].state = RELEASED_FOR_Y1_SEC;
 8009360:	230c      	movs	r3, #12
 8009362:	7023      	strb	r3, [r4, #0]
				if (!delayButtonStateReset
 8009364:	2324      	movs	r3, #36	; 0x24
 8009366:	464a      	mov	r2, r9
 8009368:	5cd2      	ldrb	r2, [r2, r3]
 800936a:	2a00      	cmp	r2, #0
 800936c:	d000      	beq.n	8009370 <CheckAttachedButtons+0x4e4>
 800936e:	e693      	b.n	8009098 <CheckAttachedButtons+0x20c>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 8009370:	7a22      	ldrb	r2, [r4, #8]
 8009372:	0692      	lsls	r2, r2, #26
 8009374:	d400      	bmi.n	8009378 <CheckAttachedButtons+0x4ec>
 8009376:	e68f      	b.n	8009098 <CheckAttachedButtons+0x20c>
					delayButtonStateReset = true;
 8009378:	4649      	mov	r1, r9
 800937a:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800937c:	4650      	mov	r0, sl
					delayButtonStateReset = true;
 800937e:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 8009380:	2101      	movs	r1, #1
 8009382:	f7ff fd81 	bl	8008e88 <buttonReleasedForYCallback>
 8009386:	e687      	b.n	8009098 <CheckAttachedButtons+0x20c>
				if (pressCounter[i] < 0xFFFF)
 8009388:	4812      	ldr	r0, [pc, #72]	; (80093d4 <CheckAttachedButtons+0x548>)
 800938a:	4283      	cmp	r3, r0
 800938c:	d806      	bhi.n	800939c <CheckAttachedButtons+0x510>
					++pressCounter[i];			// Advance the debounce counter
 800938e:	3301      	adds	r3, #1
					pressCounter[i] = 0;			// Reset debounce counter
 8009390:	508b      	str	r3, [r1, r2]
					state = CLOSED;
 8009392:	2104      	movs	r1, #4
 8009394:	9106      	str	r1, [sp, #24]
 8009396:	490e      	ldr	r1, [pc, #56]	; (80093d0 <CheckAttachedButtons+0x544>)
 8009398:	9104      	str	r1, [sp, #16]
 800939a:	e5f3      	b.n	8008f84 <CheckAttachedButtons+0xf8>
					pressCounter[i] = 0;			// Reset debounce counter
 800939c:	2300      	movs	r3, #0
 800939e:	e7f7      	b.n	8009390 <CheckAttachedButtons+0x504>
				if (pressCounter[i] < 0xFFFF)
 80093a0:	480c      	ldr	r0, [pc, #48]	; (80093d4 <CheckAttachedButtons+0x548>)
 80093a2:	4283      	cmp	r3, r0
 80093a4:	d800      	bhi.n	80093a8 <CheckAttachedButtons+0x51c>
 80093a6:	e776      	b.n	8009296 <CheckAttachedButtons+0x40a>
					pressCounter[i] = 0;			// Reset debounce counter
 80093a8:	508e      	str	r6, [r1, r2]
					state = ON;
 80093aa:	2102      	movs	r1, #2
 80093ac:	9106      	str	r1, [sp, #24]
 80093ae:	4908      	ldr	r1, [pc, #32]	; (80093d0 <CheckAttachedButtons+0x544>)
					pressCounter[i] = 0;			// Reset debounce counter
 80093b0:	2300      	movs	r3, #0
 80093b2:	9104      	str	r1, [sp, #16]
 80093b4:	e5e6      	b.n	8008f84 <CheckAttachedButtons+0xf8>
						clicked = 1;		// Record a possible single click
 80093b6:	3701      	adds	r7, #1
 80093b8:	54c7      	strb	r7, [r0, r3]
 80093ba:	e639      	b.n	8009030 <CheckAttachedButtons+0x1a4>
					pressCounter[i] = 0;			// Reset debounce counter
 80093bc:	2300      	movs	r3, #0
 80093be:	508b      	str	r3, [r1, r2]
 80093c0:	2102      	movs	r1, #2
 80093c2:	9106      	str	r1, [sp, #24]
 80093c4:	4902      	ldr	r1, [pc, #8]	; (80093d0 <CheckAttachedButtons+0x544>)
 80093c6:	9104      	str	r1, [sp, #16]
 80093c8:	e5dc      	b.n	8008f84 <CheckAttachedButtons+0xf8>
 80093ca:	46c0      	nop			; (mov r8, r8)
 80093cc:	200019c4 	.word	0x200019c4
 80093d0:	20006ea8 	.word	0x20006ea8
 80093d4:	0000fffe 	.word	0x0000fffe

080093d8 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 80093d8:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 80093da:	f005 fefd 	bl	800f1d8 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 80093de:	b2c4      	uxtb	r4, r0
 80093e0:	0020      	movs	r0, r4
 80093e2:	f7fe f8e5 	bl	80075b0 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 80093e6:	0020      	movs	r0, r4
 80093e8:	f7fe f90e 	bl	8007608 <SwitchStreamDMAToMsg>
}
 80093ec:	bd10      	pop	{r4, pc}
 80093ee:	46c0      	nop			; (mov r8, r8)

080093f0 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 80093f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093f2:	46ce      	mov	lr, r9
 80093f4:	4647      	mov	r7, r8
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b085      	sub	sp, #20
 80093fa:	0015      	movs	r5, r2
 80093fc:	466a      	mov	r2, sp
 80093fe:	73d3      	strb	r3, [r2, #15]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8009400:	aa0c      	add	r2, sp, #48	; 0x30
 8009402:	7812      	ldrb	r2, [r2, #0]
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8009404:	000e      	movs	r6, r1
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8009406:	4293      	cmp	r3, r2
 8009408:	d06b      	beq.n	80094e2 <SetupDMAStreams+0xf2>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 800940a:	2b00      	cmp	r3, #0
 800940c:	d051      	beq.n	80094b2 <SetupDMAStreams+0xc2>
 800940e:	2a00      	cmp	r2, #0
 8009410:	d04f      	beq.n	80094b2 <SetupDMAStreams+0xc2>
	if(direction == FORWARD){
 8009412:	2800      	cmp	r0, #0
 8009414:	d06a      	beq.n	80094ec <SetupDMAStreams+0xfc>
	else if(direction == BACKWARD){
 8009416:	2801      	cmp	r0, #1
 8009418:	d052      	beq.n	80094c0 <SetupDMAStreams+0xd0>
		return BOS_ERR_WrongParam;
 800941a:	2467      	movs	r4, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 800941c:	2802      	cmp	r0, #2
 800941e:	d149      	bne.n	80094b4 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009420:	0018      	movs	r0, r3
 8009422:	f004 f84b 	bl	800d4bc <GetUart>
 8009426:	ab0c      	add	r3, sp, #48	; 0x30
 8009428:	0004      	movs	r4, r0
 800942a:	7818      	ldrb	r0, [r3, #0]
 800942c:	f004 f846 	bl	800d4bc <GetUart>
 8009430:	2201      	movs	r2, #1
 8009432:	0001      	movs	r1, r0
 8009434:	0020      	movs	r0, r4
 8009436:	f7fe f921 	bl	800767c <StartDMAstream>
 800943a:	2817      	cmp	r0, #23
 800943c:	d04f      	beq.n	80094de <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 800943e:	21fa      	movs	r1, #250	; 0xfa
 8009440:	0168      	lsls	r0, r5, #5
 8009442:	1b40      	subs	r0, r0, r5
 8009444:	0080      	lsls	r0, r0, #2
 8009446:	1940      	adds	r0, r0, r5
 8009448:	0089      	lsls	r1, r1, #2
 800944a:	00c0      	lsls	r0, r0, #3
 800944c:	f7f6 fe80 	bl	8000150 <__udivsi3>
 8009450:	4b49      	ldr	r3, [pc, #292]	; (8009578 <SetupDMAStreams+0x188>)
 8009452:	4d4a      	ldr	r5, [pc, #296]	; (800957c <SetupDMAStreams+0x18c>)
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	4698      	mov	r8, r3
 8009458:	230f      	movs	r3, #15
 800945a:	0001      	movs	r1, r0
 800945c:	2200      	movs	r2, #0
 800945e:	446b      	add	r3, sp
 8009460:	0007      	movs	r7, r0
 8009462:	0028      	movs	r0, r5
 8009464:	f005 fd60 	bl	800ef28 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8009468:	466b      	mov	r3, sp
 800946a:	7bdb      	ldrb	r3, [r3, #15]
 800946c:	4c44      	ldr	r4, [pc, #272]	; (8009580 <SetupDMAStreams+0x190>)
 800946e:	3b01      	subs	r3, #1
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	511e      	str	r6, [r3, r4]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009474:	ab0c      	add	r3, sp, #48	; 0x30
 8009476:	7818      	ldrb	r0, [r3, #0]
 8009478:	f004 f820 	bl	800d4bc <GetUart>
 800947c:	466b      	mov	r3, sp
 800947e:	4681      	mov	r9, r0
 8009480:	7bd8      	ldrb	r0, [r3, #15]
 8009482:	f004 f81b 	bl	800d4bc <GetUart>
 8009486:	2201      	movs	r2, #1
 8009488:	0001      	movs	r1, r0
 800948a:	4648      	mov	r0, r9
 800948c:	f7fe f8f6 	bl	800767c <StartDMAstream>
 8009490:	2817      	cmp	r0, #23
 8009492:	d024      	beq.n	80094de <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009494:	4643      	mov	r3, r8
 8009496:	0028      	movs	r0, r5
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	2200      	movs	r2, #0
 800949c:	ab0c      	add	r3, sp, #48	; 0x30
 800949e:	0039      	movs	r1, r7
 80094a0:	f005 fd42 	bl	800ef28 <xTimerCreate>
		dmaStreamTotal[dst - 1] =count;
 80094a4:	ab0c      	add	r3, sp, #48	; 0x30
 80094a6:	781b      	ldrb	r3, [r3, #0]
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80094a8:	0005      	movs	r5, r0
		dmaStreamTotal[dst - 1] =count;
 80094aa:	3b01      	subs	r3, #1
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	511e      	str	r6, [r3, r4]
 80094b0:	e044      	b.n	800953c <SetupDMAStreams+0x14c>
		return BOS_ERR_WrongParam;
 80094b2:	2467      	movs	r4, #103	; 0x67
}
 80094b4:	0020      	movs	r0, r4
 80094b6:	b005      	add	sp, #20
 80094b8:	bc0c      	pop	{r2, r3}
 80094ba:	4690      	mov	r8, r2
 80094bc:	4699      	mov	r9, r3
 80094be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 80094c0:	0010      	movs	r0, r2
 80094c2:	f003 fffb 	bl	800d4bc <GetUart>
 80094c6:	466b      	mov	r3, sp
 80094c8:	0004      	movs	r4, r0
 80094ca:	7bd8      	ldrb	r0, [r3, #15]
 80094cc:	f003 fff6 	bl	800d4bc <GetUart>
 80094d0:	2201      	movs	r2, #1
 80094d2:	0001      	movs	r1, r0
 80094d4:	0020      	movs	r0, r4
 80094d6:	f7fe f8d1 	bl	800767c <StartDMAstream>
 80094da:	2817      	cmp	r0, #23
 80094dc:	d13d      	bne.n	800955a <SetupDMAStreams+0x16a>
			return BOS_ERR_PORT_BUSY;
 80094de:	2417      	movs	r4, #23
 80094e0:	e7e8      	b.n	80094b4 <SetupDMAStreams+0xc4>
		portStatus[src] =STREAM;
 80094e2:	2102      	movs	r1, #2
 80094e4:	4a27      	ldr	r2, [pc, #156]	; (8009584 <SetupDMAStreams+0x194>)
		return BOS_ERR_WrongParam;
 80094e6:	2467      	movs	r4, #103	; 0x67
		portStatus[src] =STREAM;
 80094e8:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 80094ea:	e7e3      	b.n	80094b4 <SetupDMAStreams+0xc4>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 80094ec:	0018      	movs	r0, r3
 80094ee:	f003 ffe5 	bl	800d4bc <GetUart>
 80094f2:	ab0c      	add	r3, sp, #48	; 0x30
 80094f4:	0004      	movs	r4, r0
 80094f6:	7818      	ldrb	r0, [r3, #0]
 80094f8:	f003 ffe0 	bl	800d4bc <GetUart>
 80094fc:	2201      	movs	r2, #1
 80094fe:	0001      	movs	r1, r0
 8009500:	0020      	movs	r0, r4
 8009502:	f7fe f8bb 	bl	800767c <StartDMAstream>
 8009506:	2817      	cmp	r0, #23
 8009508:	d0e9      	beq.n	80094de <SetupDMAStreams+0xee>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 800950a:	21fa      	movs	r1, #250	; 0xfa
 800950c:	0168      	lsls	r0, r5, #5
 800950e:	1b40      	subs	r0, r0, r5
 8009510:	0080      	lsls	r0, r0, #2
 8009512:	1940      	adds	r0, r0, r5
 8009514:	0089      	lsls	r1, r1, #2
 8009516:	00c0      	lsls	r0, r0, #3
 8009518:	f7f6 fe1a 	bl	8000150 <__udivsi3>
 800951c:	4b16      	ldr	r3, [pc, #88]	; (8009578 <SetupDMAStreams+0x188>)
 800951e:	0001      	movs	r1, r0
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	230f      	movs	r3, #15
 8009524:	446b      	add	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009526:	2200      	movs	r2, #0
 8009528:	4814      	ldr	r0, [pc, #80]	; (800957c <SetupDMAStreams+0x18c>)
 800952a:	f005 fcfd 	bl	800ef28 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 800952e:	466b      	mov	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009530:	0005      	movs	r5, r0
		dmaStreamTotal[src - 1] =count;
 8009532:	7bdb      	ldrb	r3, [r3, #15]
 8009534:	4a12      	ldr	r2, [pc, #72]	; (8009580 <SetupDMAStreams+0x190>)
 8009536:	3b01      	subs	r3, #1
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 800953c:	2400      	movs	r4, #0
	if(xTimerStream != NULL)
 800953e:	2d00      	cmp	r5, #0
 8009540:	d0b8      	beq.n	80094b4 <SetupDMAStreams+0xc4>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8009542:	f005 f82b 	bl	800e59c <xTaskGetTickCount>
 8009546:	2301      	movs	r3, #1
 8009548:	425b      	negs	r3, r3
 800954a:	0002      	movs	r2, r0
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	2101      	movs	r1, #1
 8009550:	2300      	movs	r3, #0
 8009552:	0028      	movs	r0, r5
 8009554:	f005 fd08 	bl	800ef68 <xTimerGenericCommand>
 8009558:	e7ac      	b.n	80094b4 <SetupDMAStreams+0xc4>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 800955a:	21fa      	movs	r1, #250	; 0xfa
 800955c:	0168      	lsls	r0, r5, #5
 800955e:	1b40      	subs	r0, r0, r5
 8009560:	0080      	lsls	r0, r0, #2
 8009562:	1940      	adds	r0, r0, r5
 8009564:	0089      	lsls	r1, r1, #2
 8009566:	00c0      	lsls	r0, r0, #3
 8009568:	f7f6 fdf2 	bl	8000150 <__udivsi3>
 800956c:	4b02      	ldr	r3, [pc, #8]	; (8009578 <SetupDMAStreams+0x188>)
 800956e:	0001      	movs	r1, r0
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	ab0c      	add	r3, sp, #48	; 0x30
 8009574:	e7d7      	b.n	8009526 <SetupDMAStreams+0x136>
 8009576:	46c0      	nop			; (mov r8, r8)
 8009578:	080093d9 	.word	0x080093d9
 800957c:	0801a1c4 	.word	0x0801a1c4
 8009580:	20001314 	.word	0x20001314
 8009584:	20000c2c 	.word	0x20000c2c

08009588 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8009588:	b510      	push	{r4, lr}
	switch(port){
 800958a:	2806      	cmp	r0, #6
 800958c:	d80a      	bhi.n	80095a4 <NotifyMessagingTask+0x1c>
 800958e:	4b0b      	ldr	r3, [pc, #44]	; (80095bc <NotifyMessagingTask+0x34>)
 8009590:	0080      	lsls	r0, r0, #2
 8009592:	581b      	ldr	r3, [r3, r0]
 8009594:	469f      	mov	pc, r3
			;
			break;
#endif
#ifdef _P6
		case P6:
			xTaskNotifyGive(P6MsgTaskHandle)
 8009596:	4b0a      	ldr	r3, [pc, #40]	; (80095c0 <NotifyMessagingTask+0x38>)
 8009598:	6818      	ldr	r0, [r3, #0]
 800959a:	2202      	movs	r2, #2
 800959c:	2300      	movs	r3, #0
 800959e:	2100      	movs	r1, #0
 80095a0:	f005 fc02 	bl	800eda8 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 80095a4:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 80095a6:	4b07      	ldr	r3, [pc, #28]	; (80095c4 <NotifyMessagingTask+0x3c>)
 80095a8:	e7f6      	b.n	8009598 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P2MsgTaskHandle)
 80095aa:	4b07      	ldr	r3, [pc, #28]	; (80095c8 <NotifyMessagingTask+0x40>)
 80095ac:	e7f4      	b.n	8009598 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P3MsgTaskHandle)
 80095ae:	4b07      	ldr	r3, [pc, #28]	; (80095cc <NotifyMessagingTask+0x44>)
 80095b0:	e7f2      	b.n	8009598 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P4MsgTaskHandle)
 80095b2:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <NotifyMessagingTask+0x48>)
 80095b4:	e7f0      	b.n	8009598 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P5MsgTaskHandle)
 80095b6:	4b07      	ldr	r3, [pc, #28]	; (80095d4 <NotifyMessagingTask+0x4c>)
 80095b8:	e7ee      	b.n	8009598 <NotifyMessagingTask+0x10>
 80095ba:	46c0      	nop			; (mov r8, r8)
 80095bc:	08017864 	.word	0x08017864
 80095c0:	20001834 	.word	0x20001834
 80095c4:	20001820 	.word	0x20001820
 80095c8:	20001824 	.word	0x20001824
 80095cc:	20001828 	.word	0x20001828
 80095d0:	2000182c 	.word	0x2000182c
 80095d4:	20001830 	.word	0x20001830

080095d8 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	ac06      	add	r4, sp, #24
 80095de:	8825      	ldrh	r5, [r4, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 80095e0:	0004      	movs	r4, r0
 80095e2:	4314      	orrs	r4, r2
 80095e4:	d011      	beq.n	800960a <SendMessageFromPort+0x32>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d10b      	bne.n	8009602 <SendMessageFromPort+0x2a>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80095ea:	1c96      	adds	r6, r2, #2
 80095ec:	b2f6      	uxtb	r6, r6
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 80095ee:	2467      	movs	r4, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80095f0:	2e01      	cmp	r6, #1
 80095f2:	d803      	bhi.n	80095fc <SendMessageFromPort+0x24>
 80095f4:	9500      	str	r5, [sp, #0]
 80095f6:	f000 f80b 	bl	8009610 <SendMessageFromPort.part.0>
 80095fa:	0004      	movs	r4, r0
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
	
	return result;
}
 80095fc:	0020      	movs	r0, r4
 80095fe:	b002      	add	sp, #8
 8009600:	bd70      	pop	{r4, r5, r6, pc}
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8009602:	2900      	cmp	r1, #0
 8009604:	d0f6      	beq.n	80095f4 <SendMessageFromPort+0x1c>
 8009606:	2a00      	cmp	r2, #0
 8009608:	d1f4      	bne.n	80095f4 <SendMessageFromPort+0x1c>
		return BOS_ERR_WrongParam;
 800960a:	2467      	movs	r4, #103	; 0x67
 800960c:	e7f6      	b.n	80095fc <SendMessageFromPort+0x24>
 800960e:	46c0      	nop			; (mov r8, r8)

08009610 <SendMessageFromPort.part.0>:
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009612:	46de      	mov	lr, fp
 8009614:	464e      	mov	r6, r9
 8009616:	4645      	mov	r5, r8
 8009618:	4657      	mov	r7, sl
 800961a:	b5e0      	push	{r5, r6, r7, lr}
 800961c:	b087      	sub	sp, #28
 800961e:	0005      	movs	r5, r0
 8009620:	9003      	str	r0, [sp, #12]
 8009622:	469b      	mov	fp, r3
	TaskPriority =uxTaskPriorityGet( NULL);
 8009624:	2000      	movs	r0, #0
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009626:	ab10      	add	r3, sp, #64	; 0x40
 8009628:	4689      	mov	r9, r1
 800962a:	4690      	mov	r8, r2
 800962c:	881e      	ldrh	r6, [r3, #0]
	TaskPriority =uxTaskPriorityGet( NULL);
 800962e:	f004 ff25 	bl	800e47c <uxTaskPriorityGet>
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8009632:	2105      	movs	r1, #5
	TaskPriority =uxTaskPriorityGet( NULL);
 8009634:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8009636:	2000      	movs	r0, #0
 8009638:	f004 ff30 	bl	800e49c <vTaskPrioritySet>
	message[0] ='H';
 800963c:	2348      	movs	r3, #72	; 0x48
 800963e:	4cd2      	ldr	r4, [pc, #840]	; (8009988 <SendMessageFromPort.part.0+0x378>)
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009640:	464a      	mov	r2, r9
	message[0] ='H';
 8009642:	7023      	strb	r3, [r4, #0]
	message[1] ='Z';
 8009644:	3312      	adds	r3, #18
 8009646:	7063      	strb	r3, [r4, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009648:	002b      	movs	r3, r5
 800964a:	4313      	orrs	r3, r2
 800964c:	d000      	beq.n	8009650 <SendMessageFromPort.part.0+0x40>
 800964e:	e094      	b.n	800977a <SendMessageFromPort.part.0+0x16a>
 8009650:	4643      	mov	r3, r8
 8009652:	1c9f      	adds	r7, r3, #2
 8009654:	b2ff      	uxtb	r7, r7
 8009656:	2f01      	cmp	r7, #1
 8009658:	d800      	bhi.n	800965c <SendMessageFromPort.part.0+0x4c>
 800965a:	e095      	b.n	8009788 <SendMessageFromPort.part.0+0x178>
 800965c:	465b      	mov	r3, fp
 800965e:	2b00      	cmp	r3, #0
 8009660:	d100      	bne.n	8009664 <SendMessageFromPort.part.0+0x54>
 8009662:	e091      	b.n	8009788 <SendMessageFromPort.part.0+0x178>
			src =myID;
 8009664:	4bc9      	ldr	r3, [pc, #804]	; (800998c <SendMessageFromPort.part.0+0x37c>)
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	4699      	mov	r9, r3
		message[2] =length;
 800966a:	2300      	movs	r3, #0
 800966c:	70a3      	strb	r3, [r4, #2]
		message[3] =dst;
 800966e:	4643      	mov	r3, r8
 8009670:	70e3      	strb	r3, [r4, #3]
		message[4] =src;
 8009672:	464b      	mov	r3, r9
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8009674:	4ac6      	ldr	r2, [pc, #792]	; (8009990 <SendMessageFromPort.part.0+0x380>)
		message[4] =src;
 8009676:	7123      	strb	r3, [r4, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8009678:	7913      	ldrb	r3, [r2, #4]
 800967a:	7851      	ldrb	r1, [r2, #1]
 800967c:	011b      	lsls	r3, r3, #4
 800967e:	7812      	ldrb	r2, [r2, #0]
 8009680:	0089      	lsls	r1, r1, #2
 8009682:	430b      	orrs	r3, r1
 8009684:	4313      	orrs	r3, r2
		if(code > 0xFF)
 8009686:	22ff      	movs	r2, #255	; 0xff
 8009688:	455a      	cmp	r2, fp
 800968a:	4192      	sbcs	r2, r2
 800968c:	4252      	negs	r2, r2
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 800968e:	0052      	lsls	r2, r2, #1
 8009690:	4313      	orrs	r3, r2
		message[6 + shift] =(uint8_t )code;
 8009692:	465a      	mov	r2, fp
 8009694:	71a2      	strb	r2, [r4, #6]
		if(extendCode == true){
 8009696:	2200      	movs	r2, #0
 8009698:	4692      	mov	sl, r2
 800969a:	465a      	mov	r2, fp
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 800969c:	b2db      	uxtb	r3, r3
 800969e:	7163      	strb	r3, [r4, #5]
		if(extendCode == true){
 80096a0:	2aff      	cmp	r2, #255	; 0xff
 80096a2:	d903      	bls.n	80096ac <SendMessageFromPort.part.0+0x9c>
			message[6 + shift] =(uint8_t )(code >> 8);
 80096a4:	0a12      	lsrs	r2, r2, #8
 80096a6:	71e2      	strb	r2, [r4, #7]
			++shift;
 80096a8:	2201      	movs	r2, #1
 80096aa:	4692      	mov	sl, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 80096ac:	2e2e      	cmp	r6, #46	; 0x2e
 80096ae:	d800      	bhi.n	80096b2 <SendMessageFromPort.part.0+0xa2>
 80096b0:	e157      	b.n	8009962 <SendMessageFromPort.part.0+0x352>
			message[5] |=0x80;
 80096b2:	2280      	movs	r2, #128	; 0x80
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 80096b4:	272e      	movs	r7, #46	; 0x2e
			message[5] |=0x80;
 80096b6:	4252      	negs	r2, r2
			totalNumberOfParams =numberOfParams;
 80096b8:	4db6      	ldr	r5, [pc, #728]	; (8009994 <SendMessageFromPort.part.0+0x384>)
			message[5] |=0x80;
 80096ba:	4313      	orrs	r3, r2
 80096bc:	7163      	strb	r3, [r4, #5]
			totalNumberOfParams =numberOfParams;
 80096be:	806e      	strh	r6, [r5, #2]
				if((totalNumberOfParams / numberOfParams) >= 1){
 80096c0:	2e2d      	cmp	r6, #45	; 0x2d
 80096c2:	d900      	bls.n	80096c6 <SendMessageFromPort.part.0+0xb6>
 80096c4:	e136      	b.n	8009934 <SendMessageFromPort.part.0+0x324>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 80096c6:	237f      	movs	r3, #127	; 0x7f
 80096c8:	7962      	ldrb	r2, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80096ca:	8829      	ldrh	r1, [r5, #0]
					message[5] &=0x7F; /* Last message. Reset long message flag */
 80096cc:	4013      	ands	r3, r2
 80096ce:	7163      	strb	r3, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80096d0:	4653      	mov	r3, sl
 80096d2:	1dd8      	adds	r0, r3, #7
 80096d4:	4bb0      	ldr	r3, [pc, #704]	; (8009998 <SendMessageFromPort.part.0+0x388>)
 80096d6:	1820      	adds	r0, r4, r0
 80096d8:	18c9      	adds	r1, r1, r3
 80096da:	0032      	movs	r2, r6
 80096dc:	f009 fadf 	bl	8012c9e <memcpy>
					ptrShift =0;
 80096e0:	2300      	movs	r3, #0
 80096e2:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 80096e4:	806b      	strh	r3, [r5, #2]
					length =numberOfParams + shift + 4;
 80096e6:	4653      	mov	r3, sl
 80096e8:	1d1d      	adds	r5, r3, #4
 80096ea:	19ad      	adds	r5, r5, r6
 80096ec:	b2ed      	uxtb	r5, r5
		if(AddBcastPayload == true){
 80096ee:	4bab      	ldr	r3, [pc, #684]	; (800999c <SendMessageFromPort.part.0+0x38c>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d03d      	beq.n	8009772 <SendMessageFromPort.part.0+0x162>
			if(dstGroupID < BOS_BROADCAST){
 80096f6:	4baa      	ldr	r3, [pc, #680]	; (80099a0 <SendMessageFromPort.part.0+0x390>)
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	2bff      	cmp	r3, #255	; 0xff
 80096fc:	d100      	bne.n	8009700 <SendMessageFromPort.part.0+0xf0>
 80096fe:	e106      	b.n	800990e <SendMessageFromPort.part.0+0x2fe>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009700:	4aa8      	ldr	r2, [pc, #672]	; (80099a4 <SendMessageFromPort.part.0+0x394>)
 8009702:	7817      	ldrb	r7, [r2, #0]
 8009704:	2f00      	cmp	r7, #0
 8009706:	d100      	bne.n	800970a <SendMessageFromPort.part.0+0xfa>
 8009708:	e139      	b.n	800997e <SendMessageFromPort.part.0+0x36e>
 800970a:	2201      	movs	r2, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 800970c:	0021      	movs	r1, r4
 800970e:	409a      	lsls	r2, r3
 8009710:	4451      	add	r1, sl
 8009712:	4694      	mov	ip, r2
 8009714:	9105      	str	r1, [sp, #20]
 8009716:	0039      	movs	r1, r7
			uint8_t groupMembers =0;
 8009718:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 800971a:	4667      	mov	r7, ip
				for(uint16_t i =1; i <= N; i++)						// N modules
 800971c:	2301      	movs	r3, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 800971e:	46ac      	mov	ip, r5
 8009720:	000d      	movs	r5, r1
 8009722:	48a1      	ldr	r0, [pc, #644]	; (80099a8 <SendMessageFromPort.part.0+0x398>)
					if(InGroup(i,dstGroupID)){
 8009724:	8801      	ldrh	r1, [r0, #0]
 8009726:	420f      	tst	r7, r1
 8009728:	d009      	beq.n	800973e <SendMessageFromPort.part.0+0x12e>
						++groupMembers;							// Add this member
 800972a:	3201      	adds	r2, #1
 800972c:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 800972e:	1991      	adds	r1, r2, r6
 8009730:	292c      	cmp	r1, #44	; 0x2c
 8009732:	dd00      	ble.n	8009736 <SendMessageFromPort.part.0+0x126>
 8009734:	e0fc      	b.n	8009930 <SendMessageFromPort.part.0+0x320>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009736:	9905      	ldr	r1, [sp, #20]
 8009738:	1889      	adds	r1, r1, r2
 800973a:	1989      	adds	r1, r1, r6
 800973c:	718b      	strb	r3, [r1, #6]
				for(uint16_t i =1; i <= N; i++)						// N modules
 800973e:	3301      	adds	r3, #1
 8009740:	b29b      	uxth	r3, r3
 8009742:	3002      	adds	r0, #2
 8009744:	42ab      	cmp	r3, r5
 8009746:	d9ed      	bls.n	8009724 <SendMessageFromPort.part.0+0x114>
 8009748:	4665      	mov	r5, ip
 800974a:	0010      	movs	r0, r2
 800974c:	1991      	adds	r1, r2, r6
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 800974e:	4653      	mov	r3, sl
 8009750:	3307      	adds	r3, #7
 8009752:	199e      	adds	r6, r3, r6
 8009754:	1836      	adds	r6, r6, r0
 8009756:	55a2      	strb	r2, [r4, r6]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8009758:	292b      	cmp	r1, #43	; 0x2b
 800975a:	dd00      	ble.n	800975e <SendMessageFromPort.part.0+0x14e>
 800975c:	e0e8      	b.n	8009930 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 800975e:	4993      	ldr	r1, [pc, #588]	; (80099ac <SendMessageFromPort.part.0+0x39c>)
 8009760:	3502      	adds	r5, #2
 8009762:	780b      	ldrb	r3, [r1, #0]
 8009764:	19a6      	adds	r6, r4, r6
 8009766:	3301      	adds	r3, #1
 8009768:	b2db      	uxtb	r3, r3
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 800976a:	18ad      	adds	r5, r5, r2
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 800976c:	700b      	strb	r3, [r1, #0]
 800976e:	7073      	strb	r3, [r6, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8009770:	b2ed      	uxtb	r5, r5
 8009772:	4647      	mov	r7, r8
 8009774:	3702      	adds	r7, #2
 8009776:	b2ff      	uxtb	r7, r7
 8009778:	e012      	b.n	80097a0 <SendMessageFromPort.part.0+0x190>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800977a:	465b      	mov	r3, fp
 800977c:	2b00      	cmp	r3, #0
 800977e:	d000      	beq.n	8009782 <SendMessageFromPort.part.0+0x172>
 8009780:	e0af      	b.n	80098e2 <SendMessageFromPort.part.0+0x2d2>
 8009782:	4647      	mov	r7, r8
 8009784:	3702      	adds	r7, #2
 8009786:	b2ff      	uxtb	r7, r7
		length =messageLength[numberOfParams - 1];
 8009788:	3e01      	subs	r6, #1
 800978a:	4b89      	ldr	r3, [pc, #548]	; (80099b0 <SendMessageFromPort.part.0+0x3a0>)
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 800978c:	00f1      	lsls	r1, r6, #3
		length =messageLength[numberOfParams - 1];
 800978e:	5d9d      	ldrb	r5, [r3, r6]
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8009790:	1b89      	subs	r1, r1, r6
 8009792:	4e88      	ldr	r6, [pc, #544]	; (80099b4 <SendMessageFromPort.part.0+0x3a4>)
 8009794:	00c9      	lsls	r1, r1, #3
 8009796:	1989      	adds	r1, r1, r6
 8009798:	002a      	movs	r2, r5
 800979a:	4887      	ldr	r0, [pc, #540]	; (80099b8 <SendMessageFromPort.part.0+0x3a8>)
 800979c:	f009 fa7f 	bl	8012c9e <memcpy>
	memcpy(crcBuffer,&message[0],length + 3);
 80097a0:	1ceb      	adds	r3, r5, #3
 80097a2:	469a      	mov	sl, r3
 80097a4:	4e85      	ldr	r6, [pc, #532]	; (80099bc <SendMessageFromPort.part.0+0x3ac>)
 80097a6:	001a      	movs	r2, r3
 80097a8:	0021      	movs	r1, r4
 80097aa:	0030      	movs	r0, r6
	message[2] =length;
 80097ac:	70a5      	strb	r5, [r4, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 80097ae:	f009 fa76 	bl	8012c9e <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 80097b2:	b2ab      	uxth	r3, r5
 80097b4:	4651      	mov	r1, sl
 80097b6:	0030      	movs	r0, r6
 80097b8:	9305      	str	r3, [sp, #20]
 80097ba:	f003 f843 	bl	800c844 <CalculateCRC8>
 80097be:	4653      	mov	r3, sl
	memset(crcBuffer,0,sizeof(crcBuffer));
 80097c0:	2238      	movs	r2, #56	; 0x38
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 80097c2:	54e0      	strb	r0, [r4, r3]
	memset(crcBuffer,0,sizeof(crcBuffer));
 80097c4:	2100      	movs	r1, #0
 80097c6:	0030      	movs	r0, r6
 80097c8:	f009 fa72 	bl	8012cb0 <memset>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 80097cc:	465b      	mov	r3, fp
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 80097ce:	2f01      	cmp	r7, #1
 80097d0:	d94a      	bls.n	8009868 <SendMessageFromPort.part.0+0x258>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 80097d2:	3b2c      	subs	r3, #44	; 0x2c
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d800      	bhi.n	80097da <SendMessageFromPort.part.0+0x1ca>
 80097d8:	e08d      	b.n	80098f6 <SendMessageFromPort.part.0+0x2e6>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 80097da:	4b6d      	ldr	r3, [pc, #436]	; (8009990 <SendMessageFromPort.part.0+0x380>)
 80097dc:	4698      	mov	r8, r3
 80097de:	88db      	ldrh	r3, [r3, #6]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d100      	bne.n	80097e6 <SendMessageFromPort.part.0+0x1d6>
 80097e4:	e08f      	b.n	8009906 <SendMessageFromPort.part.0+0x2f6>
 80097e6:	9e05      	ldr	r6, [sp, #20]
 80097e8:	4f75      	ldr	r7, [pc, #468]	; (80099c0 <SendMessageFromPort.part.0+0x3b0>)
 80097ea:	4b76      	ldr	r3, [pc, #472]	; (80099c4 <SendMessageFromPort.part.0+0x3b4>)
 80097ec:	3604      	adds	r6, #4
 80097ee:	46ba      	mov	sl, r7
 80097f0:	b2b6      	uxth	r6, r6
 80097f2:	2500      	movs	r5, #0
 80097f4:	4699      	mov	r9, r3
 80097f6:	9f03      	ldr	r7, [sp, #12]
 80097f8:	e005      	b.n	8009806 <SendMessageFromPort.part.0+0x1f6>
 80097fa:	4643      	mov	r3, r8
 80097fc:	3501      	adds	r5, #1
 80097fe:	88db      	ldrh	r3, [r3, #6]
 8009800:	b2ed      	uxtb	r5, r5
 8009802:	42ab      	cmp	r3, r5
 8009804:	d91c      	bls.n	8009840 <SendMessageFromPort.part.0+0x230>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009806:	2332      	movs	r3, #50	; 0x32
 8009808:	0032      	movs	r2, r6
 800980a:	0021      	movs	r1, r4
 800980c:	0038      	movs	r0, r7
 800980e:	f003 fe1f 	bl	800d450 <writePxDMAMutex>
				osDelay(200);
 8009812:	20c8      	movs	r0, #200	; 0xc8
 8009814:	f003 ff16 	bl	800d644 <osDelay>
				if(ACK_FLAG == true)
 8009818:	464b      	mov	r3, r9
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10f      	bne.n	8009840 <SendMessageFromPort.part.0+0x230>
				if(rejected_FLAG == true)
 8009820:	4653      	mov	r3, sl
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d0e8      	beq.n	80097fa <SendMessageFromPort.part.0+0x1ea>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009828:	2332      	movs	r3, #50	; 0x32
 800982a:	0032      	movs	r2, r6
 800982c:	0021      	movs	r1, r4
 800982e:	0038      	movs	r0, r7
 8009830:	f003 fe0e 	bl	800d450 <writePxDMAMutex>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8009834:	4643      	mov	r3, r8
 8009836:	3501      	adds	r5, #1
 8009838:	88db      	ldrh	r3, [r3, #6]
 800983a:	b2ed      	uxtb	r5, r5
 800983c:	42ab      	cmp	r3, r5
 800983e:	d8e2      	bhi.n	8009806 <SendMessageFromPort.part.0+0x1f6>
 8009840:	4657      	mov	r7, sl
		ACK_FLAG =false; rejected_FLAG=false;
 8009842:	2300      	movs	r3, #0
 8009844:	464a      	mov	r2, r9
 8009846:	703b      	strb	r3, [r7, #0]
 8009848:	7013      	strb	r3, [r2, #0]
	vTaskPrioritySet( NULL,TaskPriority);
 800984a:	2000      	movs	r0, #0
 800984c:	9904      	ldr	r1, [sp, #16]
 800984e:	f004 fe25 	bl	800e49c <vTaskPrioritySet>
	responseStatus =BOS_ERR_NoResponse;
 8009852:	2202      	movs	r2, #2
	return result;
 8009854:	2000      	movs	r0, #0
	responseStatus =BOS_ERR_NoResponse;
 8009856:	4b5c      	ldr	r3, [pc, #368]	; (80099c8 <SendMessageFromPort.part.0+0x3b8>)
 8009858:	701a      	strb	r2, [r3, #0]
}
 800985a:	b007      	add	sp, #28
 800985c:	bc3c      	pop	{r2, r3, r4, r5}
 800985e:	4690      	mov	r8, r2
 8009860:	4699      	mov	r9, r3
 8009862:	46a2      	mov	sl, r4
 8009864:	46ab      	mov	fp, r5
 8009866:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8009868:	2b00      	cmp	r3, #0
 800986a:	d03e      	beq.n	80098ea <SendMessageFromPort.part.0+0x2da>
		FindBroadcastRoutes(src);
 800986c:	4648      	mov	r0, r9
 800986e:	f7f9 ffdf 	bl	8003830 <FindBroadcastRoutes>
 8009872:	2300      	movs	r3, #0
 8009874:	4698      	mov	r8, r3
 8009876:	4b45      	ldr	r3, [pc, #276]	; (800998c <SendMessageFromPort.part.0+0x37c>)
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009878:	9e05      	ldr	r6, [sp, #20]
 800987a:	4699      	mov	r9, r3
 800987c:	4b53      	ldr	r3, [pc, #332]	; (80099cc <SendMessageFromPort.part.0+0x3bc>)
 800987e:	3604      	adds	r6, #4
 8009880:	469b      	mov	fp, r3
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009882:	2301      	movs	r3, #1
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009884:	b2b6      	uxth	r6, r6
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009886:	469a      	mov	sl, r3
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009888:	0033      	movs	r3, r6
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800988a:	2501      	movs	r5, #1
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 800988c:	4646      	mov	r6, r8
 800988e:	4f4c      	ldr	r7, [pc, #304]	; (80099c0 <SendMessageFromPort.part.0+0x3b0>)
 8009890:	4698      	mov	r8, r3
 8009892:	e009      	b.n	80098a8 <SendMessageFromPort.part.0+0x298>
			rejected_FLAG=false;
 8009894:	2300      	movs	r3, #0
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009896:	3501      	adds	r5, #1
			Delay_us(10);
 8009898:	200a      	movs	r0, #10
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800989a:	b2ed      	uxtb	r5, r5
			rejected_FLAG=false;
 800989c:	703b      	strb	r3, [r7, #0]
 800989e:	3601      	adds	r6, #1
			Delay_us(10);
 80098a0:	f003 fbc0 	bl	800d024 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 80098a4:	2d07      	cmp	r5, #7
 80098a6:	d0d0      	beq.n	800984a <SendMessageFromPort.part.0+0x23a>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 80098a8:	464b      	mov	r3, r9
 80098aa:	465a      	mov	r2, fp
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	3b01      	subs	r3, #1
 80098b0:	005b      	lsls	r3, r3, #1
 80098b2:	5ad3      	ldrh	r3, [r2, r3]
 80098b4:	4652      	mov	r2, sl
 80098b6:	4133      	asrs	r3, r6
 80098b8:	421a      	tst	r2, r3
 80098ba:	d0eb      	beq.n	8009894 <SendMessageFromPort.part.0+0x284>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 80098bc:	2332      	movs	r3, #50	; 0x32
 80098be:	4642      	mov	r2, r8
 80098c0:	0021      	movs	r1, r4
 80098c2:	0028      	movs	r0, r5
 80098c4:	f003 fdc4 	bl	800d450 <writePxDMAMutex>
				osDelay(200);
 80098c8:	20c8      	movs	r0, #200	; 0xc8
 80098ca:	f003 febb 	bl	800d644 <osDelay>
				if(rejected_FLAG == true)
 80098ce:	783b      	ldrb	r3, [r7, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d0df      	beq.n	8009894 <SendMessageFromPort.part.0+0x284>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 80098d4:	2332      	movs	r3, #50	; 0x32
 80098d6:	4642      	mov	r2, r8
 80098d8:	0021      	movs	r1, r4
 80098da:	9803      	ldr	r0, [sp, #12]
 80098dc:	f003 fdb8 	bl	800d450 <writePxDMAMutex>
 80098e0:	e7d8      	b.n	8009894 <SendMessageFromPort.part.0+0x284>
		if(src == 0)
 80098e2:	2a00      	cmp	r2, #0
 80098e4:	d000      	beq.n	80098e8 <SendMessageFromPort.part.0+0x2d8>
 80098e6:	e6c0      	b.n	800966a <SendMessageFromPort.part.0+0x5a>
 80098e8:	e6bc      	b.n	8009664 <SendMessageFromPort.part.0+0x54>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 80098ea:	464b      	mov	r3, r9
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1bd      	bne.n	800986c <SendMessageFromPort.part.0+0x25c>
			src =message[4];
 80098f0:	7923      	ldrb	r3, [r4, #4]
 80098f2:	4699      	mov	r9, r3
 80098f4:	e7ba      	b.n	800986c <SendMessageFromPort.part.0+0x25c>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
 80098f6:	9a05      	ldr	r2, [sp, #20]
 80098f8:	2332      	movs	r3, #50	; 0x32
 80098fa:	3204      	adds	r2, #4
 80098fc:	b292      	uxth	r2, r2
 80098fe:	0021      	movs	r1, r4
 8009900:	9803      	ldr	r0, [sp, #12]
 8009902:	f003 fda5 	bl	800d450 <writePxDMAMutex>
 8009906:	4b2f      	ldr	r3, [pc, #188]	; (80099c4 <SendMessageFromPort.part.0+0x3b4>)
 8009908:	4f2d      	ldr	r7, [pc, #180]	; (80099c0 <SendMessageFromPort.part.0+0x3b0>)
 800990a:	4699      	mov	r9, r3
 800990c:	e799      	b.n	8009842 <SendMessageFromPort.part.0+0x232>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 800990e:	2e2c      	cmp	r6, #44	; 0x2c
 8009910:	d80e      	bhi.n	8009930 <SendMessageFromPort.part.0+0x320>
				message[7 + shift + numberOfParams] =++bcastID;
 8009912:	4a26      	ldr	r2, [pc, #152]	; (80099ac <SendMessageFromPort.part.0+0x39c>)
 8009914:	4647      	mov	r7, r8
 8009916:	7813      	ldrb	r3, [r2, #0]
				length +=1;		// + bcastID
 8009918:	3501      	adds	r5, #1
				message[7 + shift + numberOfParams] =++bcastID;
 800991a:	3301      	adds	r3, #1
 800991c:	b2db      	uxtb	r3, r3
 800991e:	7013      	strb	r3, [r2, #0]
 8009920:	4652      	mov	r2, sl
 8009922:	18a2      	adds	r2, r4, r2
 8009924:	1996      	adds	r6, r2, r6
 8009926:	3702      	adds	r7, #2
 8009928:	71f3      	strb	r3, [r6, #7]
				length +=1;		// + bcastID
 800992a:	b2ed      	uxtb	r5, r5
 800992c:	b2ff      	uxtb	r7, r7
 800992e:	e737      	b.n	80097a0 <SendMessageFromPort.part.0+0x190>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8009930:	2069      	movs	r0, #105	; 0x69
 8009932:	e792      	b.n	800985a <SendMessageFromPort.part.0+0x24a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8009934:	465b      	mov	r3, fp
 8009936:	4642      	mov	r2, r8
 8009938:	4649      	mov	r1, r9
 800993a:	9700      	str	r7, [sp, #0]
 800993c:	9803      	ldr	r0, [sp, #12]
 800993e:	f7ff fe4b 	bl	80095d8 <SendMessageFromPort>
					osDelay(10);
 8009942:	200a      	movs	r0, #10
 8009944:	f003 fe7e 	bl	800d644 <osDelay>
					totalNumberOfParams -=numberOfParams;
 8009948:	886e      	ldrh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 800994a:	882b      	ldrh	r3, [r5, #0]
					totalNumberOfParams -=numberOfParams;
 800994c:	3e2e      	subs	r6, #46	; 0x2e
 800994e:	b2b6      	uxth	r6, r6
					ptrShift +=numberOfParams;
 8009950:	332e      	adds	r3, #46	; 0x2e
					totalNumberOfParams -=numberOfParams;
 8009952:	806e      	strh	r6, [r5, #2]
					ptrShift +=numberOfParams;
 8009954:	802b      	strh	r3, [r5, #0]
			while(totalNumberOfParams != 0){
 8009956:	2e00      	cmp	r6, #0
 8009958:	d000      	beq.n	800995c <SendMessageFromPort.part.0+0x34c>
 800995a:	e6b1      	b.n	80096c0 <SendMessageFromPort.part.0+0xb0>
 800995c:	2500      	movs	r5, #0
 800995e:	362e      	adds	r6, #46	; 0x2e
 8009960:	e6c5      	b.n	80096ee <SendMessageFromPort.part.0+0xde>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009962:	4653      	mov	r3, sl
 8009964:	1dd8      	adds	r0, r3, #7
 8009966:	4b0b      	ldr	r3, [pc, #44]	; (8009994 <SendMessageFromPort.part.0+0x384>)
			length =numberOfParams + shift + 4;
 8009968:	1d35      	adds	r5, r6, #4
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800996a:	8819      	ldrh	r1, [r3, #0]
 800996c:	4b0a      	ldr	r3, [pc, #40]	; (8009998 <SendMessageFromPort.part.0+0x388>)
 800996e:	1820      	adds	r0, r4, r0
 8009970:	18c9      	adds	r1, r1, r3
 8009972:	0032      	movs	r2, r6
			length =numberOfParams + shift + 4;
 8009974:	4455      	add	r5, sl
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009976:	f009 f992 	bl	8012c9e <memcpy>
			length =numberOfParams + shift + 4;
 800997a:	b2ed      	uxtb	r5, r5
 800997c:	e6b7      	b.n	80096ee <SendMessageFromPort.part.0+0xde>
				for(uint16_t i =1; i <= N; i++)						// N modules
 800997e:	0031      	movs	r1, r6
 8009980:	2000      	movs	r0, #0
			uint8_t groupMembers =0;
 8009982:	2200      	movs	r2, #0
 8009984:	e6e3      	b.n	800974e <SendMessageFromPort.part.0+0x13e>
 8009986:	46c0      	nop			; (mov r8, r8)
 8009988:	20000c58 	.word	0x20000c58
 800998c:	20000a98 	.word	0x20000a98
 8009990:	20006e28 	.word	0x20006e28
 8009994:	200019d0 	.word	0x200019d0
 8009998:	20000b3c 	.word	0x20000b3c
 800999c:	20001148 	.word	0x20001148
 80099a0:	20000050 	.word	0x20000050
 80099a4:	20000008 	.word	0x20000008
 80099a8:	20000a9c 	.word	0x20000a9c
 80099ac:	20000c48 	.word	0x20000c48
 80099b0:	20000c50 	.word	0x20000c50
 80099b4:	20000c90 	.word	0x20000c90
 80099b8:	20000c5b 	.word	0x20000c5b
 80099bc:	20001354 	.word	0x20001354
 80099c0:	2000117c 	.word	0x2000117c
 80099c4:	2000117d 	.word	0x2000117d
 80099c8:	20000c3c 	.word	0x20000c3c
 80099cc:	20000b6c 	.word	0x20000b6c

080099d0 <BroadcastReceivedMessage>:
	AddBcastPayload = false;
 80099d0:	2200      	movs	r2, #0
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 80099d2:	b500      	push	{lr}
	AddBcastPayload = false;
 80099d4:	4b0b      	ldr	r3, [pc, #44]	; (8009a04 <BroadcastReceivedMessage+0x34>)
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 80099d6:	b083      	sub	sp, #12
	AddBcastPayload = false;
 80099d8:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 80099da:	4b0b      	ldr	r3, [pc, #44]	; (8009a08 <BroadcastReceivedMessage+0x38>)
 80099dc:	b289      	uxth	r1, r1
 80099de:	7018      	strb	r0, [r3, #0]
 80099e0:	9100      	str	r1, [sp, #0]
 80099e2:	2300      	movs	r3, #0
	if(dstGroup == BOS_BROADCAST)
 80099e4:	28ff      	cmp	r0, #255	; 0xff
 80099e6:	d007      	beq.n	80099f8 <BroadcastReceivedMessage+0x28>
 80099e8:	22fe      	movs	r2, #254	; 0xfe
 80099ea:	2100      	movs	r1, #0
 80099ec:	2000      	movs	r0, #0
 80099ee:	f7ff fe0f 	bl	8009610 <SendMessageFromPort.part.0>
}
 80099f2:	2000      	movs	r0, #0
 80099f4:	b003      	add	sp, #12
 80099f6:	bd00      	pop	{pc}
 80099f8:	32ff      	adds	r2, #255	; 0xff
 80099fa:	2100      	movs	r1, #0
 80099fc:	2000      	movs	r0, #0
 80099fe:	f7ff fe07 	bl	8009610 <SendMessageFromPort.part.0>
 8009a02:	e7f6      	b.n	80099f2 <BroadcastReceivedMessage+0x22>
 8009a04:	20001148 	.word	0x20001148
 8009a08:	20000050 	.word	0x20000050

08009a0c <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009a0c:	b530      	push	{r4, r5, lr}
	AddBcastPayload = true;
 8009a0e:	2501      	movs	r5, #1
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009a10:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8009a12:	4b0e      	ldr	r3, [pc, #56]	; (8009a4c <BroadcastMessage+0x40>)
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009a14:	b083      	sub	sp, #12
	AddBcastPayload = true;
 8009a16:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8009a18:	4b0d      	ldr	r3, [pc, #52]	; (8009a50 <BroadcastMessage+0x44>)
 8009a1a:	7019      	strb	r1, [r3, #0]
 8009a1c:	9400      	str	r4, [sp, #0]
 8009a1e:	0013      	movs	r3, r2
	if(dstGroup == BOS_BROADCAST)
 8009a20:	29ff      	cmp	r1, #255	; 0xff
 8009a22:	d00c      	beq.n	8009a3e <BroadcastMessage+0x32>
 8009a24:	0001      	movs	r1, r0
 8009a26:	22fe      	movs	r2, #254	; 0xfe
 8009a28:	2000      	movs	r0, #0
 8009a2a:	f7ff fdf1 	bl	8009610 <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 8009a2e:	0022      	movs	r2, r4
 8009a30:	2100      	movs	r1, #0
 8009a32:	4808      	ldr	r0, [pc, #32]	; (8009a54 <BroadcastMessage+0x48>)
 8009a34:	f009 f93c 	bl	8012cb0 <memset>
}
 8009a38:	2000      	movs	r0, #0
 8009a3a:	b003      	add	sp, #12
 8009a3c:	bd30      	pop	{r4, r5, pc}
 8009a3e:	0001      	movs	r1, r0
 8009a40:	22ff      	movs	r2, #255	; 0xff
 8009a42:	2000      	movs	r0, #0
 8009a44:	f7ff fde4 	bl	8009610 <SendMessageFromPort.part.0>
 8009a48:	e7f1      	b.n	8009a2e <BroadcastMessage+0x22>
 8009a4a:	46c0      	nop			; (mov r8, r8)
 8009a4c:	20001148 	.word	0x20001148
 8009a50:	20000050 	.word	0x20000050
 8009a54:	20000b3c 	.word	0x20000b3c

08009a58 <ForwardReceivedMessage>:
	AddBcastPayload = false;
 8009a58:	2200      	movs	r2, #0
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8009a5a:	b530      	push	{r4, r5, lr}
 8009a5c:	0005      	movs	r5, r0
	AddBcastPayload = false;
 8009a5e:	4b0b      	ldr	r3, [pc, #44]	; (8009a8c <ForwardReceivedMessage+0x34>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8009a60:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009a62:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8009a64:	1e42      	subs	r2, r0, #1
 8009a66:	00d3      	lsls	r3, r2, #3
 8009a68:	1a9b      	subs	r3, r3, r2
 8009a6a:	4a09      	ldr	r2, [pc, #36]	; (8009a90 <ForwardReceivedMessage+0x38>)
 8009a6c:	00db      	lsls	r3, r3, #3
 8009a6e:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 8009a70:	4b08      	ldr	r3, [pc, #32]	; (8009a94 <ForwardReceivedMessage+0x3c>)
 8009a72:	0021      	movs	r1, r4
 8009a74:	7818      	ldrb	r0, [r3, #0]
 8009a76:	f7f9 ff83 	bl	8003980 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8009a7a:	9500      	str	r5, [sp, #0]
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	0022      	movs	r2, r4
 8009a80:	2100      	movs	r1, #0
 8009a82:	f7ff fda9 	bl	80095d8 <SendMessageFromPort>
}
 8009a86:	2000      	movs	r0, #0
 8009a88:	b003      	add	sp, #12
 8009a8a:	bd30      	pop	{r4, r5, pc}
 8009a8c:	20001148 	.word	0x20001148
 8009a90:	20000c90 	.word	0x20000c90
 8009a94:	20000a98 	.word	0x20000a98

08009a98 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a9a:	4d0f      	ldr	r5, [pc, #60]	; (8009ad8 <SendMessageToModule+0x40>)
 8009a9c:	0004      	movs	r4, r0
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	000f      	movs	r7, r1
 8009aa2:	0016      	movs	r6, r2
 8009aa4:	7828      	ldrb	r0, [r5, #0]
	if(dst != BOS_BROADCAST){
 8009aa6:	2cff      	cmp	r4, #255	; 0xff
 8009aa8:	d010      	beq.n	8009acc <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 8009aaa:	0021      	movs	r1, r4
 8009aac:	f7f9 ff68 	bl	8003980 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8009ab0:	7829      	ldrb	r1, [r5, #0]
 8009ab2:	0022      	movs	r2, r4
 8009ab4:	9600      	str	r6, [sp, #0]
 8009ab6:	003b      	movs	r3, r7
 8009ab8:	f7ff fd8e 	bl	80095d8 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8009abc:	0032      	movs	r2, r6
 8009abe:	2100      	movs	r1, #0
 8009ac0:	4806      	ldr	r0, [pc, #24]	; (8009adc <SendMessageToModule+0x44>)
 8009ac2:	f009 f8f5 	bl	8012cb0 <memset>
}
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	b003      	add	sp, #12
 8009aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8009acc:	0013      	movs	r3, r2
 8009ace:	000a      	movs	r2, r1
 8009ad0:	21ff      	movs	r1, #255	; 0xff
 8009ad2:	f7ff ff9b 	bl	8009a0c <BroadcastMessage>
 8009ad6:	e7f6      	b.n	8009ac6 <SendMessageToModule+0x2e>
 8009ad8:	20000a98 	.word	0x20000a98
 8009adc:	20000b3c 	.word	0x20000b3c

08009ae0 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ae2:	4657      	mov	r7, sl
 8009ae4:	46de      	mov	lr, fp
 8009ae6:	464e      	mov	r6, r9
 8009ae8:	4645      	mov	r5, r8
 8009aea:	b5e0      	push	{r5, r6, r7, lr}
 8009aec:	b08f      	sub	sp, #60	; 0x3c
 8009aee:	001e      	movs	r6, r3
 8009af0:	ab18      	add	r3, sp, #96	; 0x60
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	4693      	mov	fp, r2
 8009af6:	469a      	mov	sl, r3
 8009af8:	ab1b      	add	r3, sp, #108	; 0x6c
 8009afa:	781a      	ldrb	r2, [r3, #0]
 8009afc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009afe:	000f      	movs	r7, r1
 8009b00:	0e19      	lsrs	r1, r3, #24
 8009b02:	0c1b      	lsrs	r3, r3, #16
 8009b04:	b2dc      	uxtb	r4, r3
 8009b06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b08:	4684      	mov	ip, r0
 8009b0a:	0a1b      	lsrs	r3, r3, #8
 8009b0c:	b2dd      	uxtb	r5, r3
 8009b0e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009b10:	900d      	str	r0, [sp, #52]	; 0x34
 8009b12:	0e1b      	lsrs	r3, r3, #24
 8009b14:	0018      	movs	r0, r3
 8009b16:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b18:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009b1a:	9206      	str	r2, [sp, #24]
 8009b1c:	0c1b      	lsrs	r3, r3, #16
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	9307      	str	r3, [sp, #28]
 8009b22:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009b24:	9109      	str	r1, [sp, #36]	; 0x24
 8009b26:	0a1b      	lsrs	r3, r3, #8
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8009b2c:	4b47      	ldr	r3, [pc, #284]	; (8009c4c <StartScastDMAStream+0x16c>)
 8009b2e:	940a      	str	r4, [sp, #40]	; 0x28
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	950c      	str	r5, [sp, #48]	; 0x30
 8009b34:	42bb      	cmp	r3, r7
 8009b36:	d16d      	bne.n	8009c14 <StartScastDMAStream+0x134>
 8009b38:	231a      	movs	r3, #26
 8009b3a:	4698      	mov	r8, r3
 8009b3c:	4d44      	ldr	r5, [pc, #272]	; (8009c50 <StartScastDMAStream+0x170>)
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009b3e:	4c45      	ldr	r4, [pc, #276]	; (8009c54 <StartScastDMAStream+0x174>)
 8009b40:	44a8      	add	r8, r5
		FindRoute(srcM,dstM);
 8009b42:	0031      	movs	r1, r6
 8009b44:	0038      	movs	r0, r7
 8009b46:	f7f9 ff1b 	bl	8003980 <FindRoute>
		if(route[i]){
 8009b4a:	7868      	ldrb	r0, [r5, #1]
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d035      	beq.n	8009bbc <StartScastDMAStream+0xdc>
			if(route[i + 1]){
 8009b50:	78a9      	ldrb	r1, [r5, #2]
 8009b52:	2900      	cmp	r1, #0
 8009b54:	d100      	bne.n	8009b58 <StartScastDMAStream+0x78>
				temp1 =FindRoute(route[i],srcM);
 8009b56:	0039      	movs	r1, r7
 8009b58:	f7f9 ff12 	bl	8003980 <FindRoute>
			FindRoute(srcM,dstM);
 8009b5c:	0031      	movs	r1, r6
				temp1 =FindRoute(route[i],srcM);
 8009b5e:	4681      	mov	r9, r0
			FindRoute(srcM,dstM);
 8009b60:	0038      	movs	r0, r7
 8009b62:	f7f9 ff0d 	bl	8003980 <FindRoute>
			if(route[i] == dstM){
 8009b66:	7868      	ldrb	r0, [r5, #1]
				temp2 =dstP;
 8009b68:	465b      	mov	r3, fp
			if(route[i] == dstM){
 8009b6a:	42b0      	cmp	r0, r6
 8009b6c:	d003      	beq.n	8009b76 <StartScastDMAStream+0x96>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009b6e:	7829      	ldrb	r1, [r5, #0]
 8009b70:	f7f9 ff06 	bl	8003980 <FindRoute>
 8009b74:	0003      	movs	r3, r0
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
			messageParams[5] =(uint8_t )(timeout >> 16);
			messageParams[6] =(uint8_t )(timeout >> 8);
			messageParams[7] =(uint8_t )timeout;
			messageParams[8] =direction; /* Stream direction */
			messageParams[9] =temp1; /* Source port */
			messageParams[10] =temp2; /* destination port */
 8009b78:	72a3      	strb	r3, [r4, #10]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009b7a:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8009b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			messageParams[11] =stored; /* EEPROM storage */
 8009b7e:	9b06      	ldr	r3, [sp, #24]
			messageParams[1] =(uint8_t )(count >> 16);
 8009b80:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8009b82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			FindRoute(srcM,dstM);
 8009b84:	0031      	movs	r1, r6
			messageParams[2] =(uint8_t )(count >> 8);
 8009b86:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8009b88:	9a19      	ldr	r2, [sp, #100]	; 0x64
			FindRoute(srcM,dstM);
 8009b8a:	0038      	movs	r0, r7
			messageParams[3] =(uint8_t )count;
 8009b8c:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009b8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			messageParams[11] =stored; /* EEPROM storage */
 8009b90:	72e3      	strb	r3, [r4, #11]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009b92:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009b94:	9a07      	ldr	r2, [sp, #28]
 8009b96:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009b98:	9a08      	ldr	r2, [sp, #32]
 8009b9a:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8009b9c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b9e:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8009ba0:	4652      	mov	r2, sl
 8009ba2:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8009ba4:	464a      	mov	r2, r9
 8009ba6:	7262      	strb	r2, [r4, #9]
			FindRoute(srcM,dstM);
 8009ba8:	f7f9 feea 	bl	8003980 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8009bac:	7868      	ldrb	r0, [r5, #1]
 8009bae:	220c      	movs	r2, #12
 8009bb0:	211b      	movs	r1, #27
 8009bb2:	f7ff ff71 	bl	8009a98 <SendMessageToModule>
			osDelay(10);
 8009bb6:	200a      	movs	r0, #10
 8009bb8:	f003 fd44 	bl	800d644 <osDelay>
 8009bbc:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8009bbe:	4545      	cmp	r5, r8
 8009bc0:	d1bf      	bne.n	8009b42 <StartScastDMAStream+0x62>
		}
	}
	
	if(srcM == dstM)
 8009bc2:	42b7      	cmp	r7, r6
 8009bc4:	d112      	bne.n	8009bec <StartScastDMAStream+0x10c>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8009bc6:	465b      	mov	r3, fp
 8009bc8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bd0:	4650      	mov	r0, sl
 8009bd2:	f7ff fc0d 	bl	80093f0 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 8009bd6:	9b06      	ldr	r3, [sp, #24]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10d      	bne.n	8009bf8 <StartScastDMAStream+0x118>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8009bdc:	2000      	movs	r0, #0
 8009bde:	b00f      	add	sp, #60	; 0x3c
 8009be0:	bc3c      	pop	{r2, r3, r4, r5}
 8009be2:	4690      	mov	r8, r2
 8009be4:	4699      	mov	r9, r3
 8009be6:	46a2      	mov	sl, r4
 8009be8:	46ab      	mov	fp, r5
 8009bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 8009bec:	0031      	movs	r1, r6
 8009bee:	0038      	movs	r0, r7
 8009bf0:	f7f9 fec6 	bl	8003980 <FindRoute>
 8009bf4:	4683      	mov	fp, r0
 8009bf6:	e7e6      	b.n	8009bc6 <StartScastDMAStream+0xe6>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	9304      	str	r3, [sp, #16]
 8009bfc:	9303      	str	r3, [sp, #12]
 8009bfe:	9302      	str	r3, [sp, #8]
 8009c00:	9301      	str	r3, [sp, #4]
 8009c02:	465b      	mov	r3, fp
 8009c04:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c0c:	4650      	mov	r0, sl
 8009c0e:	f7f9 fc67 	bl	80034e0 <SaveEEstreams>
 8009c12:	e7e3      	b.n	8009bdc <StartScastDMAStream+0xfc>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009c14:	4b0f      	ldr	r3, [pc, #60]	; (8009c54 <StartScastDMAStream+0x174>)
 8009c16:	7019      	strb	r1, [r3, #0]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009c18:	9907      	ldr	r1, [sp, #28]
		messageParams[1] =(uint8_t )(count >> 16);
 8009c1a:	705c      	strb	r4, [r3, #1]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009c1c:	7159      	strb	r1, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009c1e:	9908      	ldr	r1, [sp, #32]
		messageParams[3] =(uint8_t )count;
 8009c20:	9c19      	ldr	r4, [sp, #100]	; 0x64
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009c22:	7199      	strb	r1, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8009c24:	991a      	ldr	r1, [sp, #104]	; 0x68
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009c26:	7118      	strb	r0, [r3, #4]
		messageParams[7] =(uint8_t )timeout;
 8009c28:	71d9      	strb	r1, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8009c2a:	4651      	mov	r1, sl
 8009c2c:	7219      	strb	r1, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8009c2e:	4661      	mov	r1, ip
 8009c30:	7259      	strb	r1, [r3, #9]
		messageParams[11] =dstP; /* destination port */
 8009c32:	4659      	mov	r1, fp
		messageParams[12] =stored; /* EEPROM storage */
 8009c34:	731a      	strb	r2, [r3, #12]
		messageParams[11] =dstP; /* destination port */
 8009c36:	72d9      	strb	r1, [r3, #11]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009c38:	220d      	movs	r2, #13
 8009c3a:	211c      	movs	r1, #28
 8009c3c:	0038      	movs	r0, r7
		messageParams[2] =(uint8_t )(count >> 8);
 8009c3e:	709d      	strb	r5, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8009c40:	70dc      	strb	r4, [r3, #3]
		messageParams[10] =dstM; /* destination module */
 8009c42:	729e      	strb	r6, [r3, #10]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009c44:	f7ff ff28 	bl	8009a98 <SendMessageToModule>
		return result;
 8009c48:	e7c8      	b.n	8009bdc <StartScastDMAStream+0xfc>
 8009c4a:	46c0      	nop			; (mov r8, r8)
 8009c4c:	20000a98 	.word	0x20000a98
 8009c50:	20006fbb 	.word	0x20006fbb
 8009c54:	20000b3c 	.word	0x20000b3c

08009c58 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8009c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c5a:	4657      	mov	r7, sl
 8009c5c:	4645      	mov	r5, r8
 8009c5e:	46de      	mov	lr, fp
 8009c60:	464e      	mov	r6, r9
 8009c62:	4bd7      	ldr	r3, [pc, #860]	; (8009fc0 <BackEndTask+0x368>)
 8009c64:	b5e0      	push	{r5, r6, r7, lr}
 8009c66:	4698      	mov	r8, r3
 8009c68:	4bd6      	ldr	r3, [pc, #856]	; (8009fc4 <BackEndTask+0x36c>)
 8009c6a:	4fd7      	ldr	r7, [pc, #860]	; (8009fc8 <BackEndTask+0x370>)
 8009c6c:	469a      	mov	sl, r3
 8009c6e:	2301      	movs	r3, #1
 8009c70:	b089      	sub	sp, #36	; 0x24
 8009c72:	1bdb      	subs	r3, r3, r7
 8009c74:	9307      	str	r3, [sp, #28]
 8009c76:	2300      	movs	r3, #0
 8009c78:	2601      	movs	r6, #1
 8009c7a:	001c      	movs	r4, r3
 8009c7c:	e01b      	b.n	8009cb6 <BackEndTask+0x5e>
 8009c7e:	4bd3      	ldr	r3, [pc, #844]	; (8009fcc <BackEndTask+0x374>)
 8009c80:	469c      	mov	ip, r3
 8009c82:	4465      	add	r5, ip
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
				++rejectedMsg;
			}

			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
 8009c84:	782b      	ldrb	r3, [r5, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00e      	beq.n	8009ca8 <BackEndTask+0x50>
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
 8009c8a:	4643      	mov	r3, r8
				MsgDMAStopped[port - 1] = false;
 8009c8c:	2200      	movs	r2, #0
				if(portStatus[port] == OVERRUN)
 8009c8e:	199b      	adds	r3, r3, r6
 8009c90:	7819      	ldrb	r1, [r3, #0]
				MsgDMAStopped[port - 1] = false;
 8009c92:	702a      	strb	r2, [r5, #0]
				if(portStatus[port] == OVERRUN)
 8009c94:	2905      	cmp	r1, #5
 8009c96:	d100      	bne.n	8009c9a <BackEndTask+0x42>
					portStatus[port] =FREE;
 8009c98:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 8009c9a:	4658      	mov	r0, fp
 8009c9c:	f003 fc0e 	bl	800d4bc <GetUart>
 8009ca0:	1939      	adds	r1, r7, r4
 8009ca2:	22c0      	movs	r2, #192	; 0xc0
 8009ca4:	f008 f906 	bl	8011eb4 <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 8009ca8:	2390      	movs	r3, #144	; 0x90
 8009caa:	34c0      	adds	r4, #192	; 0xc0
 8009cac:	3601      	adds	r6, #1
 8009cae:	00db      	lsls	r3, r3, #3
 8009cb0:	429c      	cmp	r4, r3
 8009cb2:	d100      	bne.n	8009cb6 <BackEndTask+0x5e>
 8009cb4:	e0a5      	b.n	8009e02 <BackEndTask+0x1aa>
 8009cb6:	b2f3      	uxtb	r3, r6
 8009cb8:	469b      	mov	fp, r3
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 8009cba:	4643      	mov	r3, r8
 8009cbc:	5d9b      	ldrb	r3, [r3, r6]
 8009cbe:	1e75      	subs	r5, r6, #1
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d8dc      	bhi.n	8009c7e <BackEndTask+0x26>
 8009cc4:	4bc2      	ldr	r3, [pc, #776]	; (8009fd0 <BackEndTask+0x378>)
 8009cc6:	469c      	mov	ip, r3
 8009cc8:	44ac      	add	ip, r5
 8009cca:	4663      	mov	r3, ip
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009ccc:	781a      	ldrb	r2, [r3, #0]
 8009cce:	9303      	str	r3, [sp, #12]
 8009cd0:	2abf      	cmp	r2, #191	; 0xbf
 8009cd2:	dc2b      	bgt.n	8009d2c <BackEndTask+0xd4>
							if(BOS.disableCLI == false){
 8009cd4:	4bbf      	ldr	r3, [pc, #764]	; (8009fd4 <BackEndTask+0x37c>)
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	7e9b      	ldrb	r3, [r3, #26]
 8009cda:	9102      	str	r1, [sp, #8]
 8009cdc:	9304      	str	r3, [sp, #16]
 8009cde:	1913      	adds	r3, r2, r4
 8009ce0:	4699      	mov	r9, r3
 8009ce2:	0073      	lsls	r3, r6, #1
 8009ce4:	3201      	adds	r2, #1
 8009ce6:	199b      	adds	r3, r3, r6
 8009ce8:	019b      	lsls	r3, r3, #6
 8009cea:	9206      	str	r2, [sp, #24]
 8009cec:	9a07      	ldr	r2, [sp, #28]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	18fb      	adds	r3, r7, r3
 8009cf2:	44b9      	add	r9, r7
 8009cf4:	1b12      	subs	r2, r2, r4
 8009cf6:	9305      	str	r3, [sp, #20]
 8009cf8:	9501      	str	r5, [sp, #4]
 8009cfa:	464b      	mov	r3, r9
 8009cfc:	0011      	movs	r1, r2
 8009cfe:	e003      	b.n	8009d08 <BackEndTask+0xb0>
 8009d00:	3301      	adds	r3, #1
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009d02:	2dc0      	cmp	r5, #192	; 0xc0
 8009d04:	d100      	bne.n	8009d08 <BackEndTask+0xb0>
 8009d06:	e07f      	b.n	8009e08 <BackEndTask+0x1b0>
 8009d08:	1b1a      	subs	r2, r3, r4
 8009d0a:	1bd2      	subs	r2, r2, r7
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009d0c:	2abf      	cmp	r2, #191	; 0xbf
 8009d0e:	d100      	bne.n	8009d12 <BackEndTask+0xba>
 8009d10:	e0be      	b.n	8009e90 <BackEndTask+0x238>
 8009d12:	7818      	ldrb	r0, [r3, #0]
 8009d14:	18cd      	adds	r5, r1, r3
 8009d16:	2848      	cmp	r0, #72	; 0x48
 8009d18:	d1f2      	bne.n	8009d00 <BackEndTask+0xa8>
 8009d1a:	7858      	ldrb	r0, [r3, #1]
 8009d1c:	285a      	cmp	r0, #90	; 0x5a
 8009d1e:	d1ef      	bne.n	8009d00 <BackEndTask+0xa8>
						packetStart = MSG_RX_BUF_SIZE - 1;
 8009d20:	4653      	mov	r3, sl
 8009d22:	9d01      	ldr	r5, [sp, #4]
 8009d24:	605a      	str	r2, [r3, #4]
				if(emptyBuffer){
 8009d26:	9b02      	ldr	r3, [sp, #8]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1bd      	bne.n	8009ca8 <BackEndTask+0x50>
				totalnumberofrecevedmesg++;
 8009d2c:	4653      	mov	r3, sl
 8009d2e:	4652      	mov	r2, sl
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3301      	adds	r3, #1
 8009d34:	6013      	str	r3, [r2, #0]
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 8009d36:	6853      	ldr	r3, [r2, #4]
 8009d38:	4699      	mov	r9, r3
 8009d3a:	2bbd      	cmp	r3, #189	; 0xbd
 8009d3c:	d100      	bne.n	8009d40 <BackEndTask+0xe8>
 8009d3e:	e083      	b.n	8009e48 <BackEndTask+0x1f0>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009d40:	2bbe      	cmp	r3, #190	; 0xbe
 8009d42:	d100      	bne.n	8009d46 <BackEndTask+0xee>
 8009d44:	e09e      	b.n	8009e84 <BackEndTask+0x22c>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009d46:	2bbf      	cmp	r3, #191	; 0xbf
 8009d48:	d100      	bne.n	8009d4c <BackEndTask+0xf4>
 8009d4a:	e0c5      	b.n	8009ed8 <BackEndTask+0x280>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8009d4c:	006b      	lsls	r3, r5, #1
 8009d4e:	195b      	adds	r3, r3, r5
 8009d50:	019b      	lsls	r3, r3, #6
 8009d52:	18fb      	adds	r3, r7, r3
 8009d54:	444b      	add	r3, r9
 8009d56:	789a      	ldrb	r2, [r3, #2]
 8009d58:	4653      	mov	r3, sl
 8009d5a:	609a      	str	r2, [r3, #8]
					parseStart =packetStart + 3;
 8009d5c:	464b      	mov	r3, r9
 8009d5e:	4651      	mov	r1, sl
 8009d60:	3303      	adds	r3, #3
 8009d62:	60cb      	str	r3, [r1, #12]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009d64:	1cd3      	adds	r3, r2, #3
 8009d66:	9301      	str	r3, [sp, #4]
 8009d68:	444b      	add	r3, r9
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 8009d6a:	2bbf      	cmp	r3, #191	; 0xbf
 8009d6c:	dd4e      	ble.n	8009e0c <BackEndTask+0x1b4>
					packetEnd -= MSG_RX_BUF_SIZE;
 8009d6e:	4651      	mov	r1, sl
 8009d70:	3bc0      	subs	r3, #192	; 0xc0
 8009d72:	610b      	str	r3, [r1, #16]
 8009d74:	4649      	mov	r1, r9
 8009d76:	1908      	adds	r0, r1, r4
 8009d78:	1838      	adds	r0, r7, r0
				if(packetStart != packetEnd) // Non-empty packet
 8009d7a:	4599      	cmp	r9, r3
 8009d7c:	d04d      	beq.n	8009e1a <BackEndTask+0x1c2>
					if(packetStart < packetEnd){
 8009d7e:	4599      	cmp	r9, r3
 8009d80:	da6d      	bge.n	8009e5e <BackEndTask+0x206>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 8009d82:	0001      	movs	r1, r0
 8009d84:	9a01      	ldr	r2, [sp, #4]
 8009d86:	4894      	ldr	r0, [pc, #592]	; (8009fd8 <BackEndTask+0x380>)
 8009d88:	f008 ff89 	bl	8012c9e <memcpy>
					crc8 =CalculateCRC8(crcBuffer,(packetLength + 3));
 8009d8c:	466b      	mov	r3, sp
 8009d8e:	4892      	ldr	r0, [pc, #584]	; (8009fd8 <BackEndTask+0x380>)
 8009d90:	8899      	ldrh	r1, [r3, #4]
 8009d92:	f002 fd57 	bl	800c844 <CalculateCRC8>
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009d96:	2238      	movs	r2, #56	; 0x38
					crc8 =CalculateCRC8(crcBuffer,(packetLength + 3));
 8009d98:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	488e      	ldr	r0, [pc, #568]	; (8009fd8 <BackEndTask+0x380>)
 8009d9e:	f008 ff87 	bl	8012cb0 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009da2:	4653      	mov	r3, sl
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	4699      	mov	r9, r3
 8009da8:	464a      	mov	r2, r9
 8009daa:	006b      	lsls	r3, r5, #1
 8009dac:	195b      	adds	r3, r3, r5
 8009dae:	019b      	lsls	r3, r3, #6
 8009db0:	18fb      	adds	r3, r7, r3
 8009db2:	5c9b      	ldrb	r3, [r3, r2]
 8009db4:	9a01      	ldr	r2, [sp, #4]
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d100      	bne.n	8009dbc <BackEndTask+0x164>
 8009dba:	e095      	b.n	8009ee8 <BackEndTask+0x290>
				if(packetStart < packetEnd){
 8009dbc:	4653      	mov	r3, sl
 8009dbe:	4652      	mov	r2, sl
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	6892      	ldr	r2, [r2, #8]
 8009dc4:	1918      	adds	r0, r3, r4
 8009dc6:	3204      	adds	r2, #4
 8009dc8:	1838      	adds	r0, r7, r0
 8009dca:	9201      	str	r2, [sp, #4]
 8009dcc:	4599      	cmp	r9, r3
 8009dce:	dd26      	ble.n	8009e1e <BackEndTask+0x1c6>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	f008 ff6d 	bl	8012cb0 <memset>
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009dd6:	464b      	mov	r3, r9
 8009dd8:	2bbf      	cmp	r3, #191	; 0xbf
 8009dda:	d031      	beq.n	8009e40 <BackEndTask+0x1e8>
					UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009ddc:	9a03      	ldr	r2, [sp, #12]
 8009dde:	3301      	adds	r3, #1
 8009de0:	7013      	strb	r3, [r2, #0]
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
 8009de2:	00f3      	lsls	r3, r6, #3
 8009de4:	1b9b      	subs	r3, r3, r6
 8009de6:	4a7d      	ldr	r2, [pc, #500]	; (8009fdc <BackEndTask+0x384>)
 8009de8:	00db      	lsls	r3, r3, #3
 8009dea:	3b37      	subs	r3, #55	; 0x37
 8009dec:	5cd0      	ldrb	r0, [r2, r3]
 8009dee:	212d      	movs	r1, #45	; 0x2d
 8009df0:	2200      	movs	r2, #0
 8009df2:	f7ff fe51 	bl	8009a98 <SendMessageToModule>
				++rejectedMsg;
 8009df6:	4653      	mov	r3, sl
 8009df8:	4652      	mov	r2, sl
 8009dfa:	8adb      	ldrh	r3, [r3, #22]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	82d3      	strh	r3, [r2, #22]
 8009e00:	e73d      	b.n	8009c7e <BackEndTask+0x26>
			}
		}

		taskYIELD();
 8009e02:	f005 fa4b 	bl	800f29c <vPortYield>
		for(port =1; port <= NumOfPorts; port++){
 8009e06:	e736      	b.n	8009c76 <BackEndTask+0x1e>
 8009e08:	9d01      	ldr	r5, [sp, #4]
 8009e0a:	e78c      	b.n	8009d26 <BackEndTask+0xce>
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009e0c:	4651      	mov	r1, sl
 8009e0e:	610b      	str	r3, [r1, #16]
 8009e10:	4649      	mov	r1, r9
 8009e12:	1908      	adds	r0, r1, r4
 8009e14:	1838      	adds	r0, r7, r0
				if(packetStart != packetEnd) // Non-empty packet
 8009e16:	4599      	cmp	r9, r3
 8009e18:	d1b1      	bne.n	8009d7e <BackEndTask+0x126>
 8009e1a:	3204      	adds	r2, #4
 8009e1c:	9201      	str	r2, [sp, #4]
					MSG_RX_BUF_SIZE - packetStart);
 8009e1e:	22c0      	movs	r2, #192	; 0xc0
 8009e20:	1ad3      	subs	r3, r2, r3
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8009e22:	001a      	movs	r2, r3
 8009e24:	2100      	movs	r1, #0
 8009e26:	9302      	str	r3, [sp, #8]
 8009e28:	f008 ff42 	bl	8012cb0 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009e2c:	9b02      	ldr	r3, [sp, #8]
 8009e2e:	9a01      	ldr	r2, [sp, #4]
 8009e30:	1938      	adds	r0, r7, r4
 8009e32:	1ad2      	subs	r2, r2, r3
 8009e34:	2100      	movs	r1, #0
 8009e36:	f008 ff3b 	bl	8012cb0 <memset>
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009e3a:	464b      	mov	r3, r9
 8009e3c:	2bbf      	cmp	r3, #191	; 0xbf
 8009e3e:	d1cd      	bne.n	8009ddc <BackEndTask+0x184>
					UARTRxBufIndex[port - 1] =0;
 8009e40:	2300      	movs	r3, #0
 8009e42:	9a03      	ldr	r2, [sp, #12]
 8009e44:	7013      	strb	r3, [r2, #0]
 8009e46:	e7cc      	b.n	8009de2 <BackEndTask+0x18a>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009e48:	0073      	lsls	r3, r6, #1
 8009e4a:	199b      	adds	r3, r3, r6
 8009e4c:	019b      	lsls	r3, r3, #6
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	5cfa      	ldrb	r2, [r7, r3]
 8009e52:	4653      	mov	r3, sl
					parseStart =0;
 8009e54:	4651      	mov	r1, sl
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009e56:	609a      	str	r2, [r3, #8]
					parseStart =0;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	60cb      	str	r3, [r1, #12]
 8009e5c:	e782      	b.n	8009d64 <BackEndTask+0x10c>
						MSG_RX_BUF_SIZE - packetStart);
 8009e5e:	22c0      	movs	r2, #192	; 0xc0
 8009e60:	464b      	mov	r3, r9
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	4699      	mov	r9, r3
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009e66:	001a      	movs	r2, r3
 8009e68:	0001      	movs	r1, r0
 8009e6a:	485b      	ldr	r0, [pc, #364]	; (8009fd8 <BackEndTask+0x380>)
 8009e6c:	f008 ff17 	bl	8012c9e <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8009e70:	464a      	mov	r2, r9
 8009e72:	4b59      	ldr	r3, [pc, #356]	; (8009fd8 <BackEndTask+0x380>)
 8009e74:	1939      	adds	r1, r7, r4
 8009e76:	444b      	add	r3, r9
 8009e78:	0018      	movs	r0, r3
 8009e7a:	9b01      	ldr	r3, [sp, #4]
 8009e7c:	1a9a      	subs	r2, r3, r2
 8009e7e:	f008 ff0e 	bl	8012c9e <memcpy>
 8009e82:	e783      	b.n	8009d8c <BackEndTask+0x134>
					packetLength =UARTRxBuf[port - 1][0];
 8009e84:	4653      	mov	r3, sl
					parseStart =1;
 8009e86:	2101      	movs	r1, #1
					packetLength =UARTRxBuf[port - 1][0];
 8009e88:	5d3a      	ldrb	r2, [r7, r4]
					parseStart =1;
 8009e8a:	60d9      	str	r1, [r3, #12]
					packetLength =UARTRxBuf[port - 1][0];
 8009e8c:	609a      	str	r2, [r3, #8]
 8009e8e:	e769      	b.n	8009d64 <BackEndTask+0x10c>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009e90:	9805      	ldr	r0, [sp, #20]
 8009e92:	7800      	ldrb	r0, [r0, #0]
 8009e94:	2848      	cmp	r0, #72	; 0x48
 8009e96:	d07a      	beq.n	8009f8e <BackEndTask+0x336>
							if(BOS.disableCLI == false){
 8009e98:	9a04      	ldr	r2, [sp, #16]
 8009e9a:	2a00      	cmp	r2, #0
 8009e9c:	d000      	beq.n	8009ea0 <BackEndTask+0x248>
 8009e9e:	e703      	b.n	8009ca8 <BackEndTask+0x50>
 8009ea0:	4648      	mov	r0, r9
 8009ea2:	9a06      	ldr	r2, [sp, #24]
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009ea4:	7805      	ldrb	r5, [r0, #0]
 8009ea6:	469c      	mov	ip, r3
 8009ea8:	1e53      	subs	r3, r2, #1
 8009eaa:	2d0d      	cmp	r5, #13
 8009eac:	d009      	beq.n	8009ec2 <BackEndTask+0x26a>
 8009eae:	3001      	adds	r0, #1
 8009eb0:	1c55      	adds	r5, r2, #1
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009eb2:	2ac0      	cmp	r2, #192	; 0xc0
 8009eb4:	d100      	bne.n	8009eb8 <BackEndTask+0x260>
 8009eb6:	e6f7      	b.n	8009ca8 <BackEndTask+0x50>
							if(BOS.disableCLI == false){
 8009eb8:	002a      	movs	r2, r5
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009eba:	7805      	ldrb	r5, [r0, #0]
 8009ebc:	1e53      	subs	r3, r2, #1
 8009ebe:	2d0d      	cmp	r5, #13
 8009ec0:	d1f5      	bne.n	8009eae <BackEndTask+0x256>
 8009ec2:	2bbf      	cmp	r3, #191	; 0xbf
 8009ec4:	d100      	bne.n	8009ec8 <BackEndTask+0x270>
 8009ec6:	e0ac      	b.n	800a022 <BackEndTask+0x3ca>
 8009ec8:	7845      	ldrb	r5, [r0, #1]
 8009eca:	2d00      	cmp	r5, #0
 8009ecc:	d100      	bne.n	8009ed0 <BackEndTask+0x278>
 8009ece:	e08b      	b.n	8009fe8 <BackEndTask+0x390>
 8009ed0:	1c55      	adds	r5, r2, #1
 8009ed2:	3001      	adds	r0, #1
							if(BOS.disableCLI == false){
 8009ed4:	002a      	movs	r2, r5
 8009ed6:	e7f0      	b.n	8009eba <BackEndTask+0x262>
					packetLength =UARTRxBuf[port - 1][1];
 8009ed8:	193b      	adds	r3, r7, r4
 8009eda:	785a      	ldrb	r2, [r3, #1]
 8009edc:	4653      	mov	r3, sl
					parseStart =2;
 8009ede:	4651      	mov	r1, sl
					packetLength =UARTRxBuf[port - 1][1];
 8009ee0:	609a      	str	r2, [r3, #8]
					parseStart =2;
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	60cb      	str	r3, [r1, #12]
 8009ee6:	e73d      	b.n	8009d64 <BackEndTask+0x10c>
						portStatus[port] =MSG;
 8009ee8:	4643      	mov	r3, r8
 8009eea:	2201      	movs	r2, #1
 8009eec:	559a      	strb	r2, [r3, r6]
						messageLength[port - 1] =packetLength;
 8009eee:	4653      	mov	r3, sl
 8009ef0:	4a3b      	ldr	r2, [pc, #236]	; (8009fe0 <BackEndTask+0x388>)
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	00f0      	lsls	r0, r6, #3
 8009ef6:	5553      	strb	r3, [r2, r5]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009ef8:	4652      	mov	r2, sl
 8009efa:	68d1      	ldr	r1, [r2, #12]
 8009efc:	2238      	movs	r2, #56	; 0x38
 8009efe:	4252      	negs	r2, r2
 8009f00:	4694      	mov	ip, r2
 8009f02:	1b80      	subs	r0, r0, r6
 8009f04:	00c0      	lsls	r0, r0, #3
 8009f06:	4484      	add	ip, r0
 8009f08:	4662      	mov	r2, ip
 8009f0a:	9202      	str	r2, [sp, #8]
 8009f0c:	4a33      	ldr	r2, [pc, #204]	; (8009fdc <BackEndTask+0x384>)
 8009f0e:	000d      	movs	r5, r1
 8009f10:	3a38      	subs	r2, #56	; 0x38
 8009f12:	1810      	adds	r0, r2, r0
 8009f14:	22bf      	movs	r2, #191	; 0xbf
 8009f16:	9104      	str	r1, [sp, #16]
 8009f18:	1909      	adds	r1, r1, r4
						messageLength[port - 1] =packetLength;
 8009f1a:	9301      	str	r3, [sp, #4]
 8009f1c:	1879      	adds	r1, r7, r1
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009f1e:	1b52      	subs	r2, r2, r5
 8009f20:	4293      	cmp	r3, r2
 8009f22:	dc38      	bgt.n	8009f96 <BackEndTask+0x33e>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009f24:	001a      	movs	r2, r3
 8009f26:	f008 feba 	bl	8012c9e <memcpy>
						if(packetStart < packetEnd){
 8009f2a:	4653      	mov	r3, sl
 8009f2c:	9a01      	ldr	r2, [sp, #4]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	3204      	adds	r2, #4
 8009f32:	1918      	adds	r0, r3, r4
 8009f34:	1838      	adds	r0, r7, r0
 8009f36:	9201      	str	r2, [sp, #4]
 8009f38:	4599      	cmp	r9, r3
 8009f3a:	dc08      	bgt.n	8009f4e <BackEndTask+0x2f6>
							MSG_RX_BUF_SIZE - packetStart);
 8009f3c:	25c0      	movs	r5, #192	; 0xc0
 8009f3e:	1aed      	subs	r5, r5, r3
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8009f40:	002a      	movs	r2, r5
 8009f42:	2100      	movs	r1, #0
 8009f44:	f008 feb4 	bl	8012cb0 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009f48:	9b01      	ldr	r3, [sp, #4]
 8009f4a:	1938      	adds	r0, r7, r4
 8009f4c:	1b5a      	subs	r2, r3, r5
 8009f4e:	2100      	movs	r1, #0
 8009f50:	f008 feae 	bl	8012cb0 <memset>
						if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009f54:	464b      	mov	r3, r9
 8009f56:	2bbf      	cmp	r3, #191	; 0xbf
 8009f58:	d02e      	beq.n	8009fb8 <BackEndTask+0x360>
							UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009f5a:	9a03      	ldr	r2, [sp, #12]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8009f60:	4653      	mov	r3, sl
 8009f62:	4652      	mov	r2, sl
 8009f64:	8a9b      	ldrh	r3, [r3, #20]
							NotifyMessagingTask(port);
 8009f66:	4658      	mov	r0, fp
						++acceptedMsg;
 8009f68:	3301      	adds	r3, #1
 8009f6a:	8293      	strh	r3, [r2, #20]
						if(cMessage[port - 1][0] == myID || cMessage[port - 1][0] == BOS_BROADCAST || cMessage[port - 1][0] == BOS_MULTICAST)
 8009f6c:	9a02      	ldr	r2, [sp, #8]
 8009f6e:	4b1b      	ldr	r3, [pc, #108]	; (8009fdc <BackEndTask+0x384>)
 8009f70:	5c9b      	ldrb	r3, [r3, r2]
 8009f72:	4a1c      	ldr	r2, [pc, #112]	; (8009fe4 <BackEndTask+0x38c>)
 8009f74:	7812      	ldrb	r2, [r2, #0]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d006      	beq.n	8009f88 <BackEndTask+0x330>
 8009f7a:	3302      	adds	r3, #2
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d902      	bls.n	8009f88 <BackEndTask+0x330>
							ForwardReceivedMessage(port);
 8009f82:	f7ff fd69 	bl	8009a58 <ForwardReceivedMessage>
 8009f86:	e68f      	b.n	8009ca8 <BackEndTask+0x50>
							NotifyMessagingTask(port);
 8009f88:	f7ff fafe 	bl	8009588 <NotifyMessagingTask>
 8009f8c:	e68c      	b.n	8009ca8 <BackEndTask+0x50>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009f8e:	5d38      	ldrb	r0, [r7, r4]
 8009f90:	285a      	cmp	r0, #90	; 0x5a
 8009f92:	d181      	bne.n	8009e98 <BackEndTask+0x240>
 8009f94:	e6c4      	b.n	8009d20 <BackEndTask+0xc8>
							MSG_RX_BUF_SIZE - parseStart);
 8009f96:	25c0      	movs	r5, #192	; 0xc0
 8009f98:	9b04      	ldr	r3, [sp, #16]
 8009f9a:	1aed      	subs	r5, r5, r3
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009f9c:	002a      	movs	r2, r5
 8009f9e:	f008 fe7e 	bl	8012c9e <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 8009fa2:	9b02      	ldr	r3, [sp, #8]
 8009fa4:	1939      	adds	r1, r7, r4
 8009fa6:	18e8      	adds	r0, r5, r3
 8009fa8:	4b0c      	ldr	r3, [pc, #48]	; (8009fdc <BackEndTask+0x384>)
 8009faa:	469c      	mov	ip, r3
 8009fac:	9b01      	ldr	r3, [sp, #4]
 8009fae:	4460      	add	r0, ip
 8009fb0:	1b5a      	subs	r2, r3, r5
 8009fb2:	f008 fe74 	bl	8012c9e <memcpy>
 8009fb6:	e7b8      	b.n	8009f2a <BackEndTask+0x2d2>
							UARTRxBufIndex[port - 1] =0;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	9a03      	ldr	r2, [sp, #12]
 8009fbc:	7013      	strb	r3, [r2, #0]
 8009fbe:	e7cf      	b.n	8009f60 <BackEndTask+0x308>
 8009fc0:	20000c2c 	.word	0x20000c2c
 8009fc4:	200019d8 	.word	0x200019d8
 8009fc8:	2000138c 	.word	0x2000138c
 8009fcc:	20001344 	.word	0x20001344
 8009fd0:	2000134c 	.word	0x2000134c
 8009fd4:	20006ea8 	.word	0x20006ea8
 8009fd8:	20001354 	.word	0x20001354
 8009fdc:	20000c90 	.word	0x20000c90
 8009fe0:	20000c50 	.word	0x20000c50
 8009fe4:	20000a98 	.word	0x20000a98
 8009fe8:	0018      	movs	r0, r3
 8009fea:	9d01      	ldr	r5, [sp, #4]
 8009fec:	b2d2      	uxtb	r2, r2
										UARTRxBuf[port - 1][j] =0;
 8009fee:	2100      	movs	r1, #0
 8009ff0:	006b      	lsls	r3, r5, #1
 8009ff2:	195b      	adds	r3, r3, r5
 8009ff4:	019b      	lsls	r3, r3, #6
 8009ff6:	18fb      	adds	r3, r7, r3
 8009ff8:	5419      	strb	r1, [r3, r0]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009ffa:	9b03      	ldr	r3, [sp, #12]
 8009ffc:	701a      	strb	r2, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 8009ffe:	4642      	mov	r2, r8
 800a000:	4b0e      	ldr	r3, [pc, #56]	; (800a03c <BackEndTask+0x3e4>)
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	54d1      	strb	r1, [r2, r3]
										portStatus[port] =CLI; // Continue the CLI session on this port
 800a006:	2303      	movs	r3, #3
 800a008:	5593      	strb	r3, [r2, r6]
										PcPort =port;
 800a00a:	465a      	mov	r2, fp
 800a00c:	4b0b      	ldr	r3, [pc, #44]	; (800a03c <BackEndTask+0x3e4>)
 800a00e:	701a      	strb	r2, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 800a010:	4b0b      	ldr	r3, [pc, #44]	; (800a040 <BackEndTask+0x3e8>)
 800a012:	2202      	movs	r2, #2
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	9301      	str	r3, [sp, #4]
 800a018:	9801      	ldr	r0, [sp, #4]
 800a01a:	2300      	movs	r3, #0
 800a01c:	f004 fec4 	bl	800eda8 <xTaskGenericNotify>
										break;
 800a020:	e642      	b.n	8009ca8 <BackEndTask+0x50>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 800a022:	5d3a      	ldrb	r2, [r7, r4]
 800a024:	0018      	movs	r0, r3
 800a026:	4663      	mov	r3, ip
 800a028:	2a00      	cmp	r2, #0
 800a02a:	d003      	beq.n	800a034 <BackEndTask+0x3dc>
							emptyBuffer = true;
 800a02c:	2201      	movs	r2, #1
 800a02e:	18cd      	adds	r5, r1, r3
 800a030:	9202      	str	r2, [sp, #8]
 800a032:	e665      	b.n	8009d00 <BackEndTask+0xa8>
 800a034:	9d01      	ldr	r5, [sp, #4]
 800a036:	22c0      	movs	r2, #192	; 0xc0
 800a038:	e7d9      	b.n	8009fee <BackEndTask+0x396>
 800a03a:	46c0      	nop			; (mov r8, r8)
 800a03c:	20000c28 	.word	0x20000c28
 800a040:	2000181c 	.word	0x2000181c

0800a044 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 800a044:	2001      	movs	r0, #1
 800a046:	4770      	bx	lr

0800a048 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 800a048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a04a:	4657      	mov	r7, sl
 800a04c:	4645      	mov	r5, r8
 800a04e:	46de      	mov	lr, fp
 800a050:	464e      	mov	r6, r9
 800a052:	b5e0      	push	{r5, r6, r7, lr}
	port =(int8_t )(unsigned )argument;
 800a054:	b2c3      	uxtb	r3, r0
void PxMessagingTask(void *argument){
 800a056:	b09d      	sub	sp, #116	; 0x74
	port =(int8_t )(unsigned )argument;
 800a058:	930d      	str	r3, [sp, #52]	; 0x34
 800a05a:	23ff      	movs	r3, #255	; 0xff
 800a05c:	4003      	ands	r3, r0
		if(messageLength[port - 1]){
 800a05e:	1e5d      	subs	r5, r3, #1
 800a060:	930b      	str	r3, [sp, #44]	; 0x2c
 800a062:	00eb      	lsls	r3, r5, #3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a064:	4adf      	ldr	r2, [pc, #892]	; (800a3e4 <PxMessagingTask+0x39c>)
 800a066:	9306      	str	r3, [sp, #24]
 800a068:	1b5b      	subs	r3, r3, r5
 800a06a:	00db      	lsls	r3, r3, #3
 800a06c:	4693      	mov	fp, r2
 800a06e:	001a      	movs	r2, r3
 800a070:	445a      	add	r2, fp
 800a072:	920a      	str	r2, [sp, #40]	; 0x28
	HAL_StatusTypeDef status =HAL_OK;
 800a074:	2200      	movs	r2, #0
 800a076:	920f      	str	r2, [sp, #60]	; 0x3c
 800a078:	4adb      	ldr	r2, [pc, #876]	; (800a3e8 <PxMessagingTask+0x3a0>)
 800a07a:	930e      	str	r3, [sp, #56]	; 0x38
 800a07c:	4690      	mov	r8, r2
 800a07e:	1c5a      	adds	r2, r3, #1
 800a080:	3305      	adds	r3, #5
 800a082:	9317      	str	r3, [sp, #92]	; 0x5c
 800a084:	4bd9      	ldr	r3, [pc, #868]	; (800a3ec <PxMessagingTask+0x3a4>)
 800a086:	9216      	str	r2, [sp, #88]	; 0x58
 800a088:	4699      	mov	r9, r3
									ADCSide =cMessage[port - 1][shift + 1];
 800a08a:	2338      	movs	r3, #56	; 0x38
 800a08c:	00aa      	lsls	r2, r5, #2
 800a08e:	9210      	str	r2, [sp, #64]	; 0x40
 800a090:	4ad7      	ldr	r2, [pc, #860]	; (800a3f0 <PxMessagingTask+0x3a8>)
	BOS_Status result =BOS_OK;
 800a092:	2700      	movs	r7, #0
 800a094:	4692      	mov	sl, r2
									ADCSide =cMessage[port - 1][shift + 1];
 800a096:	436b      	muls	r3, r5
 800a098:	445b      	add	r3, fp
 800a09a:	9305      	str	r3, [sp, #20]
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800a09c:	2101      	movs	r1, #1
 800a09e:	2001      	movs	r0, #1
 800a0a0:	4249      	negs	r1, r1
 800a0a2:	f004 fe41 	bl	800ed28 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 800a0a6:	4643      	mov	r3, r8
 800a0a8:	5d5e      	ldrb	r6, [r3, r5]
 800a0aa:	2e00      	cmp	r6, #0
 800a0ac:	d076      	beq.n	800a19c <PxMessagingTask+0x154>
			if(cMessage[port - 1][2] >> 7){
 800a0ae:	9b06      	ldr	r3, [sp, #24]
 800a0b0:	1b5b      	subs	r3, r3, r5
 800a0b2:	00db      	lsls	r3, r3, #3
 800a0b4:	445b      	add	r3, fp
 800a0b6:	7899      	ldrb	r1, [r3, #2]
 800a0b8:	b24b      	sxtb	r3, r1
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	da01      	bge.n	800a0c2 <PxMessagingTask+0x7a>
 800a0be:	f000 fcc9 	bl	800aa54 <PxMessagingTask+0xa0c>
				longMessage =0;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	4acb      	ldr	r2, [pc, #812]	; (800a3f4 <PxMessagingTask+0x3ac>)
 800a0c6:	7013      	strb	r3, [r2, #0]
			dst =cMessage[port - 1][0];
 800a0c8:	465a      	mov	r2, fp
 800a0ca:	9b06      	ldr	r3, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a0cc:	4eca      	ldr	r6, [pc, #808]	; (800a3f8 <PxMessagingTask+0x3b0>)
			dst =cMessage[port - 1][0];
 800a0ce:	1b5b      	subs	r3, r3, r5
 800a0d0:	00db      	lsls	r3, r3, #3
 800a0d2:	5cd2      	ldrb	r2, [r2, r3]
			src =cMessage[port - 1][1];
 800a0d4:	445b      	add	r3, fp
			dst =cMessage[port - 1][0];
 800a0d6:	9207      	str	r2, [sp, #28]
			src =cMessage[port - 1][1];
 800a0d8:	785a      	ldrb	r2, [r3, #1]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a0da:	0708      	lsls	r0, r1, #28
			src =cMessage[port - 1][1];
 800a0dc:	9204      	str	r2, [sp, #16]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	0014      	movs	r4, r2
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a0e2:	0f80      	lsrs	r0, r0, #30
 800a0e4:	7070      	strb	r0, [r6, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 800a0e6:	0908      	lsrs	r0, r1, #4
 800a0e8:	400c      	ands	r4, r1
 800a0ea:	4002      	ands	r2, r0
 800a0ec:	46a4      	mov	ip, r4
 800a0ee:	b2d0      	uxtb	r0, r2
 800a0f0:	70f2      	strb	r2, [r6, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 800a0f2:	2260      	movs	r2, #96	; 0x60
 800a0f4:	4463      	add	r3, ip
 800a0f6:	400a      	ands	r2, r1
 800a0f8:	940c      	str	r4, [sp, #48]	; 0x30
 800a0fa:	7032      	strb	r2, [r6, #0]
 800a0fc:	0022      	movs	r2, r4
 800a0fe:	78dc      	ldrb	r4, [r3, #3]
 800a100:	9408      	str	r4, [sp, #32]
			if(extendCode == true){
 800a102:	0789      	lsls	r1, r1, #30
 800a104:	d507      	bpl.n	800a116 <PxMessagingTask+0xce>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a106:	46a4      	mov	ip, r4
 800a108:	791b      	ldrb	r3, [r3, #4]
				++shift;
 800a10a:	3201      	adds	r2, #1
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a10c:	021b      	lsls	r3, r3, #8
 800a10e:	4463      	add	r3, ip
 800a110:	b29b      	uxth	r3, r3
 800a112:	9308      	str	r3, [sp, #32]
				++shift;
 800a114:	920c      	str	r2, [sp, #48]	; 0x30
			if(true == BOSMessaging.received_Acknowledgment){
 800a116:	2800      	cmp	r0, #0
 800a118:	d001      	beq.n	800a11e <PxMessagingTask+0xd6>
 800a11a:	f000 fca0 	bl	800aa5e <PxMessagingTask+0xa16>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a11e:	9a07      	ldr	r2, [sp, #28]
 800a120:	1e53      	subs	r3, r2, #1
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2bfc      	cmp	r3, #252	; 0xfc
 800a126:	d801      	bhi.n	800a12c <PxMessagingTask+0xe4>
 800a128:	f000 fc6e 	bl	800aa08 <PxMessagingTask+0x9c0>
 800a12c:	4643      	mov	r3, r8
 800a12e:	5d5e      	ldrb	r6, [r3, r5]
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a130:	9b07      	ldr	r3, [sp, #28]
 800a132:	2bff      	cmp	r3, #255	; 0xff
 800a134:	d001      	beq.n	800a13a <PxMessagingTask+0xf2>
 800a136:	f000 fca7 	bl	800aa88 <PxMessagingTask+0xa40>
 800a13a:	9b06      	ldr	r3, [sp, #24]
 800a13c:	4aaf      	ldr	r2, [pc, #700]	; (800a3fc <PxMessagingTask+0x3b4>)
 800a13e:	1b5c      	subs	r4, r3, r5
 800a140:	00e4      	lsls	r4, r4, #3
 800a142:	445c      	add	r4, fp
 800a144:	19a3      	adds	r3, r4, r6
 800a146:	3b01      	subs	r3, #1
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	7e12      	ldrb	r2, [r2, #24]
					result =BOS_ERR_MSG_Reflection;
 800a14c:	2703      	movs	r7, #3
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a14e:	429a      	cmp	r2, r3
 800a150:	d024      	beq.n	800a19c <PxMessagingTask+0x154>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a152:	4aaa      	ldr	r2, [pc, #680]	; (800a3fc <PxMessagingTask+0x3b4>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a154:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a156:	7613      	strb	r3, [r2, #24]
 800a158:	4aa9      	ldr	r2, [pc, #676]	; (800a400 <PxMessagingTask+0x3b8>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a15a:	20ff      	movs	r0, #255	; 0xff
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a15c:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a15e:	f7ff fc37 	bl	80099d0 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a162:	4643      	mov	r3, r8
 800a164:	5d5e      	ldrb	r6, [r3, r5]
 800a166:	2300      	movs	r3, #0
 800a168:	19a4      	adds	r4, r4, r6
 800a16a:	3c01      	subs	r4, #1
 800a16c:	7023      	strb	r3, [r4, #0]
				shift +=4;
 800a16e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a170:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800a172:	1b32      	subs	r2, r6, r4
 800a174:	b2d3      	uxtb	r3, r2
 800a176:	930c      	str	r3, [sp, #48]	; 0x30
					switch(code){
 800a178:	9b08      	ldr	r3, [sp, #32]
 800a17a:	2b2d      	cmp	r3, #45	; 0x2d
 800a17c:	d900      	bls.n	800a180 <PxMessagingTask+0x138>
 800a17e:	e084      	b.n	800a28a <PxMessagingTask+0x242>
 800a180:	4aa0      	ldr	r2, [pc, #640]	; (800a404 <PxMessagingTask+0x3bc>)
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	58d3      	ldr	r3, [r2, r3]
 800a186:	469f      	mov	pc, r3
							SaveToRO();
 800a188:	f001 f9b8 	bl	800b4fc <SaveToRO>
							SaveEEportsDir();
 800a18c:	f7f9 f93c 	bl	8003408 <SaveEEportsDir>
							indMode =IND_PING;
 800a190:	2301      	movs	r3, #1
							indMode =IND_TOPOLOGY;
 800a192:	4a9d      	ldr	r2, [pc, #628]	; (800a408 <PxMessagingTask+0x3c0>)
 800a194:	7013      	strb	r3, [r2, #0]
 800a196:	4643      	mov	r3, r8
							IND_toggle();
 800a198:	2700      	movs	r7, #0
 800a19a:	5d5e      	ldrb	r6, [r3, r5]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a19c:	0032      	movs	r2, r6
 800a19e:	2100      	movs	r1, #0
 800a1a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a1a2:	f008 fd85 	bl	8012cb0 <memset>
		messageLength[port - 1] =0;
 800a1a6:	4643      	mov	r3, r8
 800a1a8:	2200      	movs	r2, #0
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a1aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
		messageLength[port - 1] =0;
 800a1ac:	555a      	strb	r2, [r3, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a1ae:	4b97      	ldr	r3, [pc, #604]	; (800a40c <PxMessagingTask+0x3c4>)
 800a1b0:	5c5b      	ldrb	r3, [r3, r1]
 800a1b2:	3b02      	subs	r3, #2
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d901      	bls.n	800a1bc <PxMessagingTask+0x174>
			portStatus[port] =FREE;
 800a1b8:	4b94      	ldr	r3, [pc, #592]	; (800a40c <PxMessagingTask+0x3c4>)
 800a1ba:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 800a1bc:	f005 f86e 	bl	800f29c <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800a1c0:	e76c      	b.n	800a09c <PxMessagingTask+0x54>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800a1c2:	9b05      	ldr	r3, [sp, #20]
 800a1c4:	191a      	adds	r2, r3, r4
 800a1c6:	7893      	ldrb	r3, [r2, #2]
 800a1c8:	78d1      	ldrb	r1, [r2, #3]
 800a1ca:	021b      	lsls	r3, r3, #8
 800a1cc:	0409      	lsls	r1, r1, #16
 800a1ce:	185b      	adds	r3, r3, r1
 800a1d0:	7851      	ldrb	r1, [r2, #1]
 800a1d2:	7912      	ldrb	r2, [r2, #4]
 800a1d4:	185b      	adds	r3, r3, r1
 800a1d6:	0612      	lsls	r2, r2, #24
 800a1d8:	189b      	adds	r3, r3, r2
 800a1da:	4a8d      	ldr	r2, [pc, #564]	; (800a410 <PxMessagingTask+0x3c8>)
 800a1dc:	6393      	str	r3, [r2, #56]	; 0x38
									ADCPort =cMessage[port - 1][shift];
 800a1de:	2644      	movs	r6, #68	; 0x44
									ADCSide =cMessage[port - 1][shift + 1];
 800a1e0:	2146      	movs	r1, #70	; 0x46
									ADCPort =cMessage[port - 1][shift];
 800a1e2:	4b8b      	ldr	r3, [pc, #556]	; (800a410 <PxMessagingTask+0x3c8>)
									ADCSide =cMessage[port - 1][shift + 1];
 800a1e4:	4a8a      	ldr	r2, [pc, #552]	; (800a410 <PxMessagingTask+0x3c8>)
									ADCPort =cMessage[port - 1][shift];
 800a1e6:	5398      	strh	r0, [r3, r6]
									ADCSide =cMessage[port - 1][shift + 1];
 800a1e8:	9b05      	ldr	r3, [sp, #20]
 800a1ea:	191b      	adds	r3, r3, r4
 800a1ec:	785b      	ldrb	r3, [r3, #1]
 800a1ee:	5253      	strh	r3, [r2, r1]
									if(0 == ADCSide){
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <PxMessagingTask+0x1b0>
 800a1f4:	f000 fdfc 	bl	800adf0 <PxMessagingTask+0xda8>
									else if(1 == ADCSide){
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d109      	bne.n	800a210 <PxMessagingTask+0x1c8>
										ADCSelectChannel(ADCPort,"bottom");
 800a1fc:	4985      	ldr	r1, [pc, #532]	; (800a414 <PxMessagingTask+0x3cc>)
 800a1fe:	f7fe fd59 	bl	8008cb4 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800a202:	4a83      	ldr	r2, [pc, #524]	; (800a410 <PxMessagingTask+0x3c8>)
 800a204:	4b82      	ldr	r3, [pc, #520]	; (800a410 <PxMessagingTask+0x3c8>)
 800a206:	3248      	adds	r2, #72	; 0x48
 800a208:	5d98      	ldrb	r0, [r3, r6]
 800a20a:	4982      	ldr	r1, [pc, #520]	; (800a414 <PxMessagingTask+0x3cc>)
 800a20c:	f7fe fdaa 	bl	8008d64 <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800a210:	497f      	ldr	r1, [pc, #508]	; (800a410 <PxMessagingTask+0x3c8>)
 800a212:	487f      	ldr	r0, [pc, #508]	; (800a410 <PxMessagingTask+0x3c8>)
 800a214:	314c      	adds	r1, #76	; 0x4c
 800a216:	3050      	adds	r0, #80	; 0x50
 800a218:	f7fe fb7a 	bl	8008910 <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800a21c:	4a7c      	ldr	r2, [pc, #496]	; (800a410 <PxMessagingTask+0x3c8>)
 800a21e:	9b06      	ldr	r3, [sp, #24]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800a220:	0011      	movs	r1, r2
									ADCPort =cMessage[port - 1][shift];
 800a222:	1b5e      	subs	r6, r3, r5
 800a224:	2344      	movs	r3, #68	; 0x44
 800a226:	00f6      	lsls	r6, r6, #3
 800a228:	445e      	add	r6, fp
 800a22a:	5d30      	ldrb	r0, [r6, r4]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800a22c:	3154      	adds	r1, #84	; 0x54
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800a22e:	1934      	adds	r4, r6, r4
									ADCPort =cMessage[port - 1][shift];
 800a230:	52d0      	strh	r0, [r2, r3]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800a232:	f7fe fc3b 	bl	8008aac <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800a236:	79a3      	ldrb	r3, [r4, #6]
 800a238:	79e2      	ldrb	r2, [r4, #7]
 800a23a:	021b      	lsls	r3, r3, #8
 800a23c:	0412      	lsls	r2, r2, #16
 800a23e:	189b      	adds	r3, r3, r2
 800a240:	7962      	ldrb	r2, [r4, #5]
 800a242:	189b      	adds	r3, r3, r2
 800a244:	7a22      	ldrb	r2, [r4, #8]
 800a246:	0612      	lsls	r2, r2, #24
 800a248:	189b      	adds	r3, r3, r2
 800a24a:	4a71      	ldr	r2, [pc, #452]	; (800a410 <PxMessagingTask+0x3c8>)
 800a24c:	63d3      	str	r3, [r2, #60]	; 0x3c
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800a24e:	7aa3      	ldrb	r3, [r4, #10]
 800a250:	7ae2      	ldrb	r2, [r4, #11]
 800a252:	021b      	lsls	r3, r3, #8
 800a254:	0412      	lsls	r2, r2, #16
 800a256:	189b      	adds	r3, r3, r2
 800a258:	7a62      	ldrb	r2, [r4, #9]
 800a25a:	189b      	adds	r3, r3, r2
 800a25c:	7b22      	ldrb	r2, [r4, #12]
 800a25e:	0612      	lsls	r2, r2, #24
 800a260:	189b      	adds	r3, r3, r2
 800a262:	4a6b      	ldr	r2, [pc, #428]	; (800a410 <PxMessagingTask+0x3c8>)
 800a264:	6413      	str	r3, [r2, #64]	; 0x40
							ACK_FLAG =1;
 800a266:	2301      	movs	r3, #1
 800a268:	4a6b      	ldr	r2, [pc, #428]	; (800a418 <PxMessagingTask+0x3d0>)
 800a26a:	2700      	movs	r7, #0
 800a26c:	7013      	strb	r3, [r2, #0]
 800a26e:	4643      	mov	r3, r8
 800a270:	5d5e      	ldrb	r6, [r3, r5]
 800a272:	e793      	b.n	800a19c <PxMessagingTask+0x154>
							switch(cMessage[port - 1][0 + shift]){
 800a274:	9b06      	ldr	r3, [sp, #24]
 800a276:	1b5b      	subs	r3, r3, r5
 800a278:	00db      	lsls	r3, r3, #3
 800a27a:	445b      	add	r3, fp
 800a27c:	5d18      	ldrb	r0, [r3, r4]
 800a27e:	282b      	cmp	r0, #43	; 0x2b
 800a280:	d8f1      	bhi.n	800a266 <PxMessagingTask+0x21e>
 800a282:	4a66      	ldr	r2, [pc, #408]	; (800a41c <PxMessagingTask+0x3d4>)
 800a284:	0083      	lsls	r3, r0, #2
 800a286:	58d3      	ldr	r3, [r2, r3]
 800a288:	469f      	mov	pc, r3
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800a28a:	9400      	str	r4, [sp, #0]
 800a28c:	9b07      	ldr	r3, [sp, #28]
 800a28e:	9a04      	ldr	r2, [sp, #16]
 800a290:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a292:	9808      	ldr	r0, [sp, #32]
 800a294:	f7ff fed6 	bl	800a044 <User_MessagingParser>
 800a298:	0007      	movs	r7, r0
							if(result == BOS_ERR_UnknownMessage){
 800a29a:	2801      	cmp	r0, #1
 800a29c:	d101      	bne.n	800a2a2 <PxMessagingTask+0x25a>
 800a29e:	f000 fc3d 	bl	800ab1c <PxMessagingTask+0xad4>
 800a2a2:	4643      	mov	r3, r8
 800a2a4:	5d5e      	ldrb	r6, [r3, r5]
 800a2a6:	e779      	b.n	800a19c <PxMessagingTask+0x154>
							rejected_FLAG =1;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	4a5d      	ldr	r2, [pc, #372]	; (800a420 <PxMessagingTask+0x3d8>)
 800a2ac:	7013      	strb	r3, [r2, #0]
 800a2ae:	e772      	b.n	800a196 <PxMessagingTask+0x14e>
							for(p =0; p < numOfParams; p++){
 800a2b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d01d      	beq.n	800a2f2 <PxMessagingTask+0x2aa>
 800a2b6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a2b8:	4659      	mov	r1, fp
 800a2ba:	46b4      	mov	ip, r6
 800a2bc:	1930      	adds	r0, r6, r4
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800a2be:	2680      	movs	r6, #128	; 0x80
 800a2c0:	3101      	adds	r1, #1
 800a2c2:	4461      	add	r1, ip
 800a2c4:	9a04      	ldr	r2, [sp, #16]
 800a2c6:	190c      	adds	r4, r1, r4
 800a2c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a2ca:	3a01      	subs	r2, #1
 800a2cc:	4b55      	ldr	r3, [pc, #340]	; (800a424 <PxMessagingTask+0x3dc>)
 800a2ce:	0052      	lsls	r2, r2, #1
 800a2d0:	3901      	subs	r1, #1
 800a2d2:	b2c9      	uxtb	r1, r1
 800a2d4:	5a9b      	ldrh	r3, [r3, r2]
 800a2d6:	4458      	add	r0, fp
 800a2d8:	1864      	adds	r4, r4, r1
 800a2da:	0236      	lsls	r6, r6, #8
 800a2dc:	0037      	movs	r7, r6
 800a2de:	7801      	ldrb	r1, [r0, #0]
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	3901      	subs	r1, #1
 800a2e4:	410f      	asrs	r7, r1
 800a2e6:	433b      	orrs	r3, r7
 800a2e8:	b29b      	uxth	r3, r3
							for(p =0; p < numOfParams; p++){
 800a2ea:	4284      	cmp	r4, r0
 800a2ec:	d1f6      	bne.n	800a2dc <PxMessagingTask+0x294>
 800a2ee:	494d      	ldr	r1, [pc, #308]	; (800a424 <PxMessagingTask+0x3dc>)
 800a2f0:	528b      	strh	r3, [r1, r2]
							responseStatus =BOS_OK;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	e0fd      	b.n	800a4f2 <PxMessagingTask+0x4aa>
							temp =0;
 800a2f6:	2300      	movs	r3, #0
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a2f8:	2680      	movs	r6, #128	; 0x80
							for(p =1; p <= NumOfPorts; p++){
 800a2fa:	2401      	movs	r4, #1
							temp =0;
 800a2fc:	9309      	str	r3, [sp, #36]	; 0x24
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a2fe:	0236      	lsls	r6, r6, #8
 800a300:	0020      	movs	r0, r4
 800a302:	f003 f8db 	bl	800d4bc <GetUart>
 800a306:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a308:	42b3      	cmp	r3, r6
 800a30a:	d105      	bne.n	800a318 <PxMessagingTask+0x2d0>
									messageParams[temp++] =p;
 800a30c:	4651      	mov	r1, sl
 800a30e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a310:	1c53      	adds	r3, r2, #1
 800a312:	b2db      	uxtb	r3, r3
 800a314:	548c      	strb	r4, [r1, r2]
 800a316:	9309      	str	r3, [sp, #36]	; 0x24
							for(p =1; p <= NumOfPorts; p++){
 800a318:	3401      	adds	r4, #1
 800a31a:	b2e4      	uxtb	r4, r4
 800a31c:	2c07      	cmp	r4, #7
 800a31e:	d1ef      	bne.n	800a300 <PxMessagingTask+0x2b8>
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a320:	466b      	mov	r3, sp
 800a322:	2114      	movs	r1, #20
 800a324:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800a326:	9804      	ldr	r0, [sp, #16]
 800a328:	f7ff fbb6 	bl	8009a98 <SendMessageToModule>
 800a32c:	e733      	b.n	800a196 <PxMessagingTask+0x14e>
 800a32e:	4b3e      	ldr	r3, [pc, #248]	; (800a428 <PxMessagingTask+0x3e0>)
 800a330:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a332:	881f      	ldrh	r7, [r3, #0]
 800a334:	4b3d      	ldr	r3, [pc, #244]	; (800a42c <PxMessagingTask+0x3e4>)
 800a336:	4694      	mov	ip, r2
 800a338:	19d8      	adds	r0, r3, r7
 800a33a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a33c:	4467      	add	r7, ip
 800a33e:	18e1      	adds	r1, r4, r3
 800a340:	4643      	mov	r3, r8
 800a342:	5d5e      	ldrb	r6, [r3, r5]
							if(longMessage){
 800a344:	4b2b      	ldr	r3, [pc, #172]	; (800a3f4 <PxMessagingTask+0x3ac>)
 800a346:	b2bf      	uxth	r7, r7
 800a348:	781c      	ldrb	r4, [r3, #0]
 800a34a:	4459      	add	r1, fp
 800a34c:	2c00      	cmp	r4, #0
 800a34e:	d101      	bne.n	800a354 <PxMessagingTask+0x30c>
 800a350:	f000 fc76 	bl	800ac40 <PxMessagingTask+0xbf8>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a354:	f008 fca3 	bl	8012c9e <memcpy>
								longMessageLastPtr +=numOfParams;
 800a358:	4b33      	ldr	r3, [pc, #204]	; (800a428 <PxMessagingTask+0x3e0>)
 800a35a:	801f      	strh	r7, [r3, #0]
 800a35c:	2700      	movs	r7, #0
 800a35e:	e71d      	b.n	800a19c <PxMessagingTask+0x154>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800a360:	9b06      	ldr	r3, [sp, #24]
 800a362:	1b5b      	subs	r3, r3, r5
 800a364:	00db      	lsls	r3, r3, #3
 800a366:	445b      	add	r3, fp
 800a368:	5d1b      	ldrb	r3, [r3, r4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <PxMessagingTask+0x32a>
 800a36e:	f000 fc0c 	bl	800ab8a <PxMessagingTask+0xb42>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800a372:	9b05      	ldr	r3, [sp, #20]
 800a374:	469c      	mov	ip, r3
 800a376:	4464      	add	r4, ip
 800a378:	78a3      	ldrb	r3, [r4, #2]
 800a37a:	78e2      	ldrb	r2, [r4, #3]
 800a37c:	061b      	lsls	r3, r3, #24
 800a37e:	0412      	lsls	r2, r2, #16
 800a380:	189b      	adds	r3, r3, r2
 800a382:	7962      	ldrb	r2, [r4, #5]
 800a384:	189b      	adds	r3, r3, r2
 800a386:	7922      	ldrb	r2, [r4, #4]
 800a388:	0212      	lsls	r2, r2, #8
 800a38a:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800a38c:	7862      	ldrb	r2, [r4, #1]
 800a38e:	3a01      	subs	r2, #1
 800a390:	b2d2      	uxtb	r2, r2
 800a392:	2a07      	cmp	r2, #7
 800a394:	d900      	bls.n	800a398 <PxMessagingTask+0x350>
 800a396:	e6fe      	b.n	800a196 <PxMessagingTask+0x14e>
 800a398:	4925      	ldr	r1, [pc, #148]	; (800a430 <PxMessagingTask+0x3e8>)
 800a39a:	0092      	lsls	r2, r2, #2
 800a39c:	588a      	ldr	r2, [r1, r2]
 800a39e:	4697      	mov	pc, r2
							ExploreNeighbors(port);
 800a3a0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a3a2:	f7f9 fa19 	bl	80037d8 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 800a3a6:	2302      	movs	r3, #2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a3a8:	2401      	movs	r4, #1
							temp =0;
 800a3aa:	2700      	movs	r7, #0
							indMode =IND_TOPOLOGY;
 800a3ac:	4a16      	ldr	r2, [pc, #88]	; (800a408 <PxMessagingTask+0x3c0>)
							osDelay(10);
 800a3ae:	200a      	movs	r0, #10
							indMode =IND_TOPOLOGY;
 800a3b0:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a3b2:	f003 f947 	bl	800d644 <osDelay>
 800a3b6:	4e1f      	ldr	r6, [pc, #124]	; (800a434 <PxMessagingTask+0x3ec>)
								if(neighbors[p - 1][0]){
 800a3b8:	8833      	ldrh	r3, [r6, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d009      	beq.n	800a3d2 <PxMessagingTask+0x38a>
									messageParams[temp] =p;
 800a3be:	4653      	mov	r3, sl
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a3c0:	1c78      	adds	r0, r7, #1
 800a3c2:	4450      	add	r0, sl
 800a3c4:	2204      	movs	r2, #4
 800a3c6:	0031      	movs	r1, r6
									messageParams[temp] =p;
 800a3c8:	55dc      	strb	r4, [r3, r7]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a3ca:	f008 fc68 	bl	8012c9e <memcpy>
									temp +=5;
 800a3ce:	3705      	adds	r7, #5
 800a3d0:	b2ff      	uxtb	r7, r7
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a3d2:	3401      	adds	r4, #1
 800a3d4:	b2e4      	uxtb	r4, r4
 800a3d6:	3604      	adds	r6, #4
 800a3d8:	2c07      	cmp	r4, #7
 800a3da:	d1ed      	bne.n	800a3b8 <PxMessagingTask+0x370>
 800a3dc:	9709      	str	r7, [sp, #36]	; 0x24
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 800a3de:	b2ba      	uxth	r2, r7
 800a3e0:	210d      	movs	r1, #13
 800a3e2:	e7a0      	b.n	800a326 <PxMessagingTask+0x2de>
 800a3e4:	20000c90 	.word	0x20000c90
 800a3e8:	20000c50 	.word	0x20000c50
 800a3ec:	20000c40 	.word	0x20000c40
 800a3f0:	20000b3c 	.word	0x20000b3c
 800a3f4:	20000c4c 	.word	0x20000c4c
 800a3f8:	20006e28 	.word	0x20006e28
 800a3fc:	200019d8 	.word	0x200019d8
 800a400:	20000c48 	.word	0x20000c48
 800a404:	08017880 	.word	0x08017880
 800a408:	2000117e 	.word	0x2000117e
 800a40c:	20000c2c 	.word	0x20000c2c
 800a410:	20001a58 	.word	0x20001a58
 800a414:	0801864c 	.word	0x0801864c
 800a418:	2000117d 	.word	0x2000117d
 800a41c:	08017938 	.word	0x08017938
 800a420:	2000117c 	.word	0x2000117c
 800a424:	20007334 	.word	0x20007334
 800a428:	20000c4a 	.word	0x20000c4a
 800a42c:	20001ab0 	.word	0x20001ab0
 800a430:	080179e8 	.word	0x080179e8
 800a434:	20001164 	.word	0x20001164
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a438:	9b06      	ldr	r3, [sp, #24]
 800a43a:	9904      	ldr	r1, [sp, #16]
 800a43c:	1b5b      	subs	r3, r3, r5
 800a43e:	00db      	lsls	r3, r3, #3
 800a440:	445b      	add	r3, fp
 800a442:	1918      	adds	r0, r3, r4
 800a444:	7882      	ldrb	r2, [r0, #2]
 800a446:	0209      	lsls	r1, r1, #8
 800a448:	4ed8      	ldr	r6, [pc, #864]	; (800a7ac <PxMessagingTask+0x764>)
 800a44a:	1852      	adds	r2, r2, r1
 800a44c:	9910      	ldr	r1, [sp, #64]	; 0x40
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a44e:	2700      	movs	r7, #0
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a450:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a452:	468c      	mov	ip, r1
 800a454:	0032      	movs	r2, r6
 800a456:	5d19      	ldrb	r1, [r3, r4]
 800a458:	7843      	ldrb	r3, [r0, #1]
 800a45a:	0209      	lsls	r1, r1, #8
 800a45c:	4462      	add	r2, ip
 800a45e:	185b      	adds	r3, r3, r1
 800a460:	8053      	strh	r3, [r2, #2]
							messageParams[1] =(uint8_t )myPN;
 800a462:	4652      	mov	r2, sl
 800a464:	4bd2      	ldr	r3, [pc, #840]	; (800a7b0 <PxMessagingTask+0x768>)
							messageParams[2] =port;
 800a466:	9c0d      	ldr	r4, [sp, #52]	; 0x34
							messageParams[1] =(uint8_t )myPN;
 800a468:	881b      	ldrh	r3, [r3, #0]
							osDelay(2);
 800a46a:	2002      	movs	r0, #2
							messageParams[1] =(uint8_t )myPN;
 800a46c:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 800a46e:	0a1b      	lsrs	r3, r3, #8
 800a470:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 800a472:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 800a474:	f003 f8e6 	bl	800d644 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a478:	2303      	movs	r3, #3
 800a47a:	2200      	movs	r2, #0
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	2100      	movs	r1, #0
 800a480:	3308      	adds	r3, #8
 800a482:	0020      	movs	r0, r4
 800a484:	f7ff f8a8 	bl	80095d8 <SendMessageFromPort>
 800a488:	4643      	mov	r3, r8
 800a48a:	5d5e      	ldrb	r6, [r3, r5]
 800a48c:	e686      	b.n	800a19c <PxMessagingTask+0x154>
							IND_toggle();
 800a48e:	2180      	movs	r1, #128	; 0x80
 800a490:	2090      	movs	r0, #144	; 0x90
 800a492:	0109      	lsls	r1, r1, #4
 800a494:	05c0      	lsls	r0, r0, #23
 800a496:	f006 fcab 	bl	8010df0 <HAL_GPIO_TogglePin>
 800a49a:	e67c      	b.n	800a196 <PxMessagingTask+0x14e>
							IND_OFF();
 800a49c:	2200      	movs	r2, #0
 800a49e:	2180      	movs	r1, #128	; 0x80
 800a4a0:	2090      	movs	r0, #144	; 0x90
 800a4a2:	0109      	lsls	r1, r1, #4
 800a4a4:	05c0      	lsls	r0, r0, #23
 800a4a6:	f006 fc9d 	bl	8010de4 <HAL_GPIO_WritePin>
 800a4aa:	e674      	b.n	800a196 <PxMessagingTask+0x14e>
							IND_ON();
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	e7f6      	b.n	800a49e <PxMessagingTask+0x456>
							if(!moduleAlias[myID][0])
 800a4b0:	4bc0      	ldr	r3, [pc, #768]	; (800a7b4 <PxMessagingTask+0x76c>)
 800a4b2:	781a      	ldrb	r2, [r3, #0]
 800a4b4:	0093      	lsls	r3, r2, #2
 800a4b6:	189b      	adds	r3, r3, r2
 800a4b8:	4abf      	ldr	r2, [pc, #764]	; (800a7b8 <PxMessagingTask+0x770>)
 800a4ba:	005b      	lsls	r3, r3, #1
 800a4bc:	5cd3      	ldrb	r3, [r2, r3]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <PxMessagingTask+0x47e>
 800a4c2:	f000 fd8d 	bl	800afe0 <PxMessagingTask+0xf98>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800a4c6:	48bd      	ldr	r0, [pc, #756]	; (800a7bc <PxMessagingTask+0x774>)
 800a4c8:	9a04      	ldr	r2, [sp, #16]
 800a4ca:	301c      	adds	r0, #28
 800a4cc:	49bc      	ldr	r1, [pc, #752]	; (800a7c0 <PxMessagingTask+0x778>)
 800a4ce:	f008 fde9 	bl	80130a4 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 800a4d2:	4cba      	ldr	r4, [pc, #744]	; (800a7bc <PxMessagingTask+0x774>)
 800a4d4:	341c      	adds	r4, #28
 800a4d6:	0020      	movs	r0, r4
 800a4d8:	f7f5 fe1e 	bl	8000118 <strlen>
 800a4dc:	4bb9      	ldr	r3, [pc, #740]	; (800a7c4 <PxMessagingTask+0x77c>)
 800a4de:	b282      	uxth	r2, r0
 800a4e0:	7818      	ldrb	r0, [r3, #0]
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	425b      	negs	r3, r3
 800a4e6:	9300      	str	r3, [sp, #0]
 800a4e8:	0021      	movs	r1, r4
 800a4ea:	3333      	adds	r3, #51	; 0x33
 800a4ec:	f002 ff5e 	bl	800d3ac <writePxMutex>
							responseStatus =BOS_OK;
 800a4f0:	2300      	movs	r3, #0
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800a4f2:	4ab5      	ldr	r2, [pc, #724]	; (800a7c8 <PxMessagingTask+0x780>)
 800a4f4:	2700      	movs	r7, #0
 800a4f6:	7013      	strb	r3, [r2, #0]
 800a4f8:	4643      	mov	r3, r8
 800a4fa:	5d5e      	ldrb	r6, [r3, r5]
 800a4fc:	e64e      	b.n	800a19c <PxMessagingTask+0x154>
							indMode =IND_PING;
 800a4fe:	2301      	movs	r3, #1
 800a500:	4ab2      	ldr	r2, [pc, #712]	; (800a7cc <PxMessagingTask+0x784>)
							osDelay(10);
 800a502:	200a      	movs	r0, #10
							indMode =IND_PING;
 800a504:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a506:	f003 f89d 	bl	800d644 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 800a50a:	2240      	movs	r2, #64	; 0x40
 800a50c:	4bb0      	ldr	r3, [pc, #704]	; (800a7d0 <PxMessagingTask+0x788>)
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	4393      	bics	r3, r2
 800a512:	2b20      	cmp	r3, #32
 800a514:	d000      	beq.n	800a518 <PxMessagingTask+0x4d0>
 800a516:	e63e      	b.n	800a196 <PxMessagingTask+0x14e>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800a518:	2200      	movs	r2, #0
 800a51a:	2102      	movs	r1, #2
 800a51c:	e703      	b.n	800a326 <PxMessagingTask+0x2de>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800a51e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a520:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a522:	469c      	mov	ip, r3
 800a524:	9b06      	ldr	r3, [sp, #24]
 800a526:	1c61      	adds	r1, r4, #1
 800a528:	1b5b      	subs	r3, r3, r5
 800a52a:	00db      	lsls	r3, r3, #3
 800a52c:	445b      	add	r3, fp
 800a52e:	5d18      	ldrb	r0, [r3, r4]
 800a530:	230a      	movs	r3, #10
 800a532:	4461      	add	r1, ip
 800a534:	3a01      	subs	r2, #1
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	b292      	uxth	r2, r2
 800a53a:	4459      	add	r1, fp
 800a53c:	f002 ff36 	bl	800d3ac <writePxMutex>
 800a540:	4643      	mov	r3, r8
 800a542:	2700      	movs	r7, #0
 800a544:	5d5e      	ldrb	r6, [r3, r5]
 800a546:	e629      	b.n	800a19c <PxMessagingTask+0x154>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a548:	9b06      	ldr	r3, [sp, #24]
 800a54a:	1b5b      	subs	r3, r3, r5
 800a54c:	00db      	lsls	r3, r3, #3
 800a54e:	445b      	add	r3, fp
 800a550:	5d1b      	ldrb	r3, [r3, r4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d000      	beq.n	800a558 <PxMessagingTask+0x510>
 800a556:	e340      	b.n	800abda <PxMessagingTask+0xb92>
								myID =cMessage[port - 1][1 + shift];
 800a558:	9b05      	ldr	r3, [sp, #20]
 800a55a:	4a96      	ldr	r2, [pc, #600]	; (800a7b4 <PxMessagingTask+0x76c>)
 800a55c:	469c      	mov	ip, r3
 800a55e:	4464      	add	r4, ip
 800a560:	7863      	ldrb	r3, [r4, #1]
 800a562:	2700      	movs	r7, #0
 800a564:	7013      	strb	r3, [r2, #0]
 800a566:	4643      	mov	r3, r8
 800a568:	5d5e      	ldrb	r6, [r3, r5]
 800a56a:	e617      	b.n	800a19c <PxMessagingTask+0x154>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a56c:	9b06      	ldr	r3, [sp, #24]
 800a56e:	1b5b      	subs	r3, r3, r5
 800a570:	00db      	lsls	r3, r3, #3
 800a572:	445b      	add	r3, fp
 800a574:	5d1f      	ldrb	r7, [r3, r4]
 800a576:	191b      	adds	r3, r3, r4
 800a578:	78da      	ldrb	r2, [r3, #3]
 800a57a:	063f      	lsls	r7, r7, #24
 800a57c:	18bf      	adds	r7, r7, r2
 800a57e:	785a      	ldrb	r2, [r3, #1]
 800a580:	0412      	lsls	r2, r2, #16
 800a582:	18bf      	adds	r7, r7, r2
 800a584:	789a      	ldrb	r2, [r3, #2]
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a586:	791b      	ldrb	r3, [r3, #4]
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a588:	0212      	lsls	r2, r2, #8
 800a58a:	18bf      	adds	r7, r7, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a58c:	9309      	str	r3, [sp, #36]	; 0x24
 800a58e:	2bff      	cmp	r3, #255	; 0xff
 800a590:	d100      	bne.n	800a594 <PxMessagingTask+0x54c>
 800a592:	e318      	b.n	800abc6 <PxMessagingTask+0xb7e>
								for(p =0; p < numOfParams; p++){
 800a594:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a596:	2a00      	cmp	r2, #0
 800a598:	d100      	bne.n	800a59c <PxMessagingTask+0x554>
 800a59a:	e36f      	b.n	800ac7c <PxMessagingTask+0xc34>
 800a59c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a59e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a5a0:	191e      	adds	r6, r3, r4
 800a5a2:	465b      	mov	r3, fp
 800a5a4:	468c      	mov	ip, r1
 800a5a6:	3305      	adds	r3, #5
 800a5a8:	4463      	add	r3, ip
 800a5aa:	191c      	adds	r4, r3, r4
 800a5ac:	0013      	movs	r3, r2
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	18e4      	adds	r4, r4, r3
									if(temp > 0 && temp <= NumOfPorts){
 800a5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b6:	445e      	add	r6, fp
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b05      	cmp	r3, #5
 800a5be:	d90a      	bls.n	800a5d6 <PxMessagingTask+0x58e>
								for(p =0; p < numOfParams; p++){
 800a5c0:	42b4      	cmp	r4, r6
 800a5c2:	d100      	bne.n	800a5c6 <PxMessagingTask+0x57e>
 800a5c4:	e5e7      	b.n	800a196 <PxMessagingTask+0x14e>
 800a5c6:	7833      	ldrb	r3, [r6, #0]
 800a5c8:	3601      	adds	r6, #1
 800a5ca:	9309      	str	r3, [sp, #36]	; 0x24
									if(temp > 0 && temp <= NumOfPorts){
 800a5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	2b05      	cmp	r3, #5
 800a5d4:	d8f4      	bhi.n	800a5c0 <PxMessagingTask+0x578>
										UpdateBaudrate(temp,temp32);
 800a5d6:	0039      	movs	r1, r7
 800a5d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5da:	f002 ff5d 	bl	800d498 <UpdateBaudrate>
 800a5de:	e7ef      	b.n	800a5c0 <PxMessagingTask+0x578>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a5e0:	2601      	movs	r6, #1
 800a5e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5e4:	18e7      	adds	r7, r4, r3
 800a5e6:	445f      	add	r7, fp
								if(p != port)
 800a5e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5ea:	42b3      	cmp	r3, r6
 800a5ec:	d005      	beq.n	800a5fa <PxMessagingTask+0x5b2>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a5ee:	0030      	movs	r0, r6
 800a5f0:	f002 ff64 	bl	800d4bc <GetUart>
 800a5f4:	7839      	ldrb	r1, [r7, #0]
 800a5f6:	f002 ff6d 	bl	800d4d4 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a5fa:	3601      	adds	r6, #1
 800a5fc:	b2f6      	uxtb	r6, r6
 800a5fe:	3701      	adds	r7, #1
 800a600:	2e07      	cmp	r6, #7
 800a602:	d1f1      	bne.n	800a5e8 <PxMessagingTask+0x5a0>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a604:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a606:	f002 ff59 	bl	800d4bc <GetUart>
 800a60a:	9b06      	ldr	r3, [sp, #24]
 800a60c:	2700      	movs	r7, #0
 800a60e:	1b5b      	subs	r3, r3, r5
 800a610:	00db      	lsls	r3, r3, #3
 800a612:	445b      	add	r3, fp
 800a614:	191c      	adds	r4, r3, r4
 800a616:	7aa1      	ldrb	r1, [r4, #10]
 800a618:	f002 ff5c 	bl	800d4d4 <SwapUartPins>
 800a61c:	4643      	mov	r3, r8
 800a61e:	5d5e      	ldrb	r6, [r3, r5]
 800a620:	e5bc      	b.n	800a19c <PxMessagingTask+0x154>
							temp =numOfParams / 5;
 800a622:	2105      	movs	r1, #5
 800a624:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a626:	f7f5 fd93 	bl	8000150 <__udivsi3>
 800a62a:	b2c2      	uxtb	r2, r0
 800a62c:	9209      	str	r2, [sp, #36]	; 0x24
							for(uint8_t k =0; k < temp; k++){
 800a62e:	2a00      	cmp	r2, #0
 800a630:	d100      	bne.n	800a634 <PxMessagingTask+0x5ec>
 800a632:	e65e      	b.n	800a2f2 <PxMessagingTask+0x2aa>
 800a634:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a636:	465b      	mov	r3, fp
 800a638:	468c      	mov	ip, r1
 800a63a:	3305      	adds	r3, #5
 800a63c:	4463      	add	r3, ip
 800a63e:	190e      	adds	r6, r1, r4
 800a640:	191c      	adds	r4, r3, r4
 800a642:	1e53      	subs	r3, r2, #1
 800a644:	b2db      	uxtb	r3, r3
 800a646:	009a      	lsls	r2, r3, #2
 800a648:	18d3      	adds	r3, r2, r3
 800a64a:	445e      	add	r6, fp
 800a64c:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a64e:	4b61      	ldr	r3, [pc, #388]	; (800a7d4 <PxMessagingTask+0x78c>)
 800a650:	7830      	ldrb	r0, [r6, #0]
 800a652:	469c      	mov	ip, r3
 800a654:	3801      	subs	r0, #1
 800a656:	0080      	lsls	r0, r0, #2
 800a658:	1c71      	adds	r1, r6, #1
 800a65a:	4460      	add	r0, ip
 800a65c:	2204      	movs	r2, #4
 800a65e:	3605      	adds	r6, #5
 800a660:	f008 fb1d 	bl	8012c9e <memcpy>
							for(uint8_t k =0; k < temp; k++){
 800a664:	42b4      	cmp	r4, r6
 800a666:	d1f2      	bne.n	800a64e <PxMessagingTask+0x606>
							responseStatus =BOS_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	e742      	b.n	800a4f2 <PxMessagingTask+0x4aa>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a66c:	9b06      	ldr	r3, [sp, #24]
 800a66e:	9904      	ldr	r1, [sp, #16]
 800a670:	1b5b      	subs	r3, r3, r5
 800a672:	00db      	lsls	r3, r3, #3
 800a674:	445b      	add	r3, fp
 800a676:	1918      	adds	r0, r3, r4
 800a678:	7882      	ldrb	r2, [r0, #2]
 800a67a:	0209      	lsls	r1, r1, #8
 800a67c:	1852      	adds	r2, r2, r1
 800a67e:	4e4b      	ldr	r6, [pc, #300]	; (800a7ac <PxMessagingTask+0x764>)
 800a680:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a682:	538a      	strh	r2, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a684:	468c      	mov	ip, r1
 800a686:	0032      	movs	r2, r6
 800a688:	5d19      	ldrb	r1, [r3, r4]
 800a68a:	7843      	ldrb	r3, [r0, #1]
 800a68c:	0209      	lsls	r1, r1, #8
 800a68e:	185b      	adds	r3, r3, r1
 800a690:	4462      	add	r2, ip
 800a692:	8053      	strh	r3, [r2, #2]
							responseStatus =BOS_OK;
 800a694:	2300      	movs	r3, #0
 800a696:	e72c      	b.n	800a4f2 <PxMessagingTask+0x4aa>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a698:	4b4f      	ldr	r3, [pc, #316]	; (800a7d8 <PxMessagingTask+0x790>)
 800a69a:	4a50      	ldr	r2, [pc, #320]	; (800a7dc <PxMessagingTask+0x794>)
							osDelay(10);
 800a69c:	200a      	movs	r0, #10
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a69e:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	4a4a      	ldr	r2, [pc, #296]	; (800a7cc <PxMessagingTask+0x784>)
 800a6a4:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 800a6a6:	f002 ffcd 	bl	800d644 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	4b4c      	ldr	r3, [pc, #304]	; (800a7e0 <PxMessagingTask+0x798>)
 800a6b0:	4a4c      	ldr	r2, [pc, #304]	; (800a7e4 <PxMessagingTask+0x79c>)
 800a6b2:	60da      	str	r2, [r3, #12]
 800a6b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a6b8:	46c0      	nop			; (mov r8, r8)
 800a6ba:	e7fd      	b.n	800a6b8 <PxMessagingTask+0x670>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a6bc:	f003 f8ce 	bl	800d85c <FreeRTOS_CLIGetOutputBuffer>
 800a6c0:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800a6c2:	f7f5 fd29 	bl	8000118 <strlen>
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	0002      	movs	r2, r0
 800a6ca:	0030      	movs	r0, r6
 800a6cc:	f008 faf0 	bl	8012cb0 <memset>
 800a6d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6d2:	18e1      	adds	r1, r4, r3
							if(longMessage){
 800a6d4:	4b44      	ldr	r3, [pc, #272]	; (800a7e8 <PxMessagingTask+0x7a0>)
 800a6d6:	4459      	add	r1, fp
 800a6d8:	781f      	ldrb	r7, [r3, #0]
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a6da:	4b44      	ldr	r3, [pc, #272]	; (800a7ec <PxMessagingTask+0x7a4>)
 800a6dc:	8818      	ldrh	r0, [r3, #0]
 800a6de:	1830      	adds	r0, r6, r0
							if(longMessage){
 800a6e0:	2f00      	cmp	r7, #0
 800a6e2:	d100      	bne.n	800a6e6 <PxMessagingTask+0x69e>
 800a6e4:	e299      	b.n	800ac1a <PxMessagingTask+0xbd2>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a6e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
								longMessageLastPtr +=numOfParams;
 800a6e8:	2700      	movs	r7, #0
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a6ea:	0022      	movs	r2, r4
 800a6ec:	f008 fad7 	bl	8012c9e <memcpy>
								longMessageLastPtr +=numOfParams;
 800a6f0:	46a4      	mov	ip, r4
 800a6f2:	4b3e      	ldr	r3, [pc, #248]	; (800a7ec <PxMessagingTask+0x7a4>)
 800a6f4:	881a      	ldrh	r2, [r3, #0]
 800a6f6:	4b3d      	ldr	r3, [pc, #244]	; (800a7ec <PxMessagingTask+0x7a4>)
 800a6f8:	4462      	add	r2, ip
 800a6fa:	801a      	strh	r2, [r3, #0]
 800a6fc:	4643      	mov	r3, r8
 800a6fe:	5d5e      	ldrb	r6, [r3, r5]
 800a700:	e54c      	b.n	800a19c <PxMessagingTask+0x154>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a702:	f003 f8ab 	bl	800d85c <FreeRTOS_CLIGetOutputBuffer>
 800a706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a708:	0006      	movs	r6, r0
 800a70a:	18e1      	adds	r1, r4, r3
							if(dst == BOS_BROADCAST)
 800a70c:	9b07      	ldr	r3, [sp, #28]
 800a70e:	4459      	add	r1, fp
 800a710:	2bff      	cmp	r3, #255	; 0xff
 800a712:	d100      	bne.n	800a716 <PxMessagingTask+0x6ce>
 800a714:	e212      	b.n	800ab3c <PxMessagingTask+0xaf4>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a716:	4829      	ldr	r0, [pc, #164]	; (800a7bc <PxMessagingTask+0x774>)
							else if(dst == BOS_MULTICAST)
 800a718:	9b07      	ldr	r3, [sp, #28]
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a71a:	306c      	adds	r0, #108	; 0x6c
							else if(dst == BOS_MULTICAST)
 800a71c:	2bfe      	cmp	r3, #254	; 0xfe
 800a71e:	d100      	bne.n	800a722 <PxMessagingTask+0x6da>
 800a720:	e274      	b.n	800ac0c <PxMessagingTask+0xbc4>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a722:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a724:	f008 fabb 	bl	8012c9e <memcpy>
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a728:	4f24      	ldr	r7, [pc, #144]	; (800a7bc <PxMessagingTask+0x774>)
 800a72a:	376c      	adds	r7, #108	; 0x6c
 800a72c:	e001      	b.n	800a732 <PxMessagingTask+0x6ea>
							} while(xReturned != pdFALSE);
 800a72e:	2c00      	cmp	r4, #0
 800a730:	d028      	beq.n	800a784 <PxMessagingTask+0x73c>
								PcPort =port;
 800a732:	4a24      	ldr	r2, [pc, #144]	; (800a7c4 <PxMessagingTask+0x77c>)
 800a734:	990d      	ldr	r1, [sp, #52]	; 0x34
								temp =PcPort;
 800a736:	4b23      	ldr	r3, [pc, #140]	; (800a7c4 <PxMessagingTask+0x77c>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a738:	0038      	movs	r0, r7
								temp =PcPort;
 800a73a:	781b      	ldrb	r3, [r3, #0]
								PcPort =port;
 800a73c:	7011      	strb	r1, [r2, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a73e:	2299      	movs	r2, #153	; 0x99
 800a740:	0031      	movs	r1, r6
 800a742:	0092      	lsls	r2, r2, #2
								temp =PcPort;
 800a744:	9309      	str	r3, [sp, #36]	; 0x24
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a746:	f003 f811 	bl	800d76c <FreeRTOS_CLIProcessCommand>
								PcPort =temp;
 800a74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a74c:	4a1d      	ldr	r2, [pc, #116]	; (800a7c4 <PxMessagingTask+0x77c>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a74e:	0004      	movs	r4, r0
								PcPort =temp;
 800a750:	7013      	strb	r3, [r2, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800a752:	4b1f      	ldr	r3, [pc, #124]	; (800a7d0 <PxMessagingTask+0x788>)
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	2b60      	cmp	r3, #96	; 0x60
 800a758:	d1e9      	bne.n	800a72e <PxMessagingTask+0x6e6>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800a75a:	0030      	movs	r0, r6
 800a75c:	f7f5 fcdc 	bl	8000118 <strlen>
 800a760:	0031      	movs	r1, r6
 800a762:	0002      	movs	r2, r0
 800a764:	4650      	mov	r0, sl
 800a766:	f008 fa9a 	bl	8012c9e <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800a76a:	0030      	movs	r0, r6
 800a76c:	f7f5 fcd4 	bl	8000118 <strlen>
 800a770:	2118      	movs	r1, #24
 800a772:	b282      	uxth	r2, r0
 800a774:	9804      	ldr	r0, [sp, #16]
 800a776:	f7ff f98f 	bl	8009a98 <SendMessageToModule>
									osDelay(10);
 800a77a:	200a      	movs	r0, #10
 800a77c:	f002 ff62 	bl	800d644 <osDelay>
							} while(xReturned != pdFALSE);
 800a780:	2c00      	cmp	r4, #0
 800a782:	d1d6      	bne.n	800a732 <PxMessagingTask+0x6ea>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a784:	480d      	ldr	r0, [pc, #52]	; (800a7bc <PxMessagingTask+0x774>)
 800a786:	2232      	movs	r2, #50	; 0x32
 800a788:	306c      	adds	r0, #108	; 0x6c
 800a78a:	2100      	movs	r1, #0
 800a78c:	f008 fa90 	bl	8012cb0 <memset>
 800a790:	4643      	mov	r3, r8
 800a792:	2700      	movs	r7, #0
 800a794:	5d5e      	ldrb	r6, [r3, r5]
 800a796:	e501      	b.n	800a19c <PxMessagingTask+0x154>
							ClearEEportsDir();
 800a798:	f7f8 ff2e 	bl	80035f8 <ClearEEportsDir>
							ClearROtopology();
 800a79c:	f000 ffa6 	bl	800b6ec <ClearROtopology>
							osDelay(100);
 800a7a0:	2064      	movs	r0, #100	; 0x64
 800a7a2:	f002 ff4f 	bl	800d644 <osDelay>
							indMode =IND_TOPOLOGY;
 800a7a6:	2302      	movs	r3, #2
 800a7a8:	e4f3      	b.n	800a192 <PxMessagingTask+0x14a>
 800a7aa:	46c0      	nop			; (mov r8, r8)
 800a7ac:	20001164 	.word	0x20001164
 800a7b0:	20000030 	.word	0x20000030
 800a7b4:	20000a98 	.word	0x20000a98
 800a7b8:	20000dfc 	.word	0x20000dfc
 800a7bc:	200019d8 	.word	0x200019d8
 800a7c0:	08019124 	.word	0x08019124
 800a7c4:	20000c28 	.word	0x20000c28
 800a7c8:	20000c3c 	.word	0x20000c3c
 800a7cc:	2000117e 	.word	0x2000117e
 800a7d0:	20006e28 	.word	0x20006e28
 800a7d4:	2000114c 	.word	0x2000114c
 800a7d8:	20007ff0 	.word	0x20007ff0
 800a7dc:	deadbeef 	.word	0xdeadbeef
 800a7e0:	e000ed00 	.word	0xe000ed00
 800a7e4:	05fa0004 	.word	0x05fa0004
 800a7e8:	20000c4c 	.word	0x20000c4c
 800a7ec:	20000c4a 	.word	0x20000c4a
							temp =cMessage[port - 1][11 + shift];
 800a7f0:	230b      	movs	r3, #11
 800a7f2:	469c      	mov	ip, r3
 800a7f4:	44a4      	add	ip, r4
 800a7f6:	4662      	mov	r2, ip
 800a7f8:	9b06      	ldr	r3, [sp, #24]
 800a7fa:	9204      	str	r2, [sp, #16]
 800a7fc:	1b5b      	subs	r3, r3, r5
 800a7fe:	00db      	lsls	r3, r3, #3
 800a800:	445b      	add	r3, fp
 800a802:	5c9b      	ldrb	r3, [r3, r2]
							if(numOfParams == 15)
 800a804:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a806:	2a0f      	cmp	r2, #15
 800a808:	d100      	bne.n	800a80c <PxMessagingTask+0x7c4>
 800a80a:	e22c      	b.n	800ac66 <PxMessagingTask+0xc1e>
							if(numOfParams == 17)
 800a80c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
							temp =cMessage[port - 1][11 + shift];
 800a80e:	0019      	movs	r1, r3
							if(numOfParams == 17)
 800a810:	2a11      	cmp	r2, #17
 800a812:	d101      	bne.n	800a818 <PxMessagingTask+0x7d0>
 800a814:	f000 fd1b 	bl	800b24e <PxMessagingTask+0x1206>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a818:	9f06      	ldr	r7, [sp, #24]
 800a81a:	1ca2      	adds	r2, r4, #2
 800a81c:	9208      	str	r2, [sp, #32]
 800a81e:	1b7a      	subs	r2, r7, r5
 800a820:	00d2      	lsls	r2, r2, #3
 800a822:	445a      	add	r2, fp
 800a824:	1ce0      	adds	r0, r4, #3
 800a826:	5d17      	ldrb	r7, [r2, r4]
 800a828:	9009      	str	r0, [sp, #36]	; 0x24
 800a82a:	5c10      	ldrb	r0, [r2, r0]
 800a82c:	1c66      	adds	r6, r4, #1
 800a82e:	063f      	lsls	r7, r7, #24
 800a830:	183f      	adds	r7, r7, r0
 800a832:	5d90      	ldrb	r0, [r2, r6]
 800a834:	9607      	str	r6, [sp, #28]
 800a836:	0400      	lsls	r0, r0, #16
 800a838:	183f      	adds	r7, r7, r0
 800a83a:	1ca0      	adds	r0, r4, #2
 800a83c:	5c10      	ldrb	r0, [r2, r0]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a83e:	1d66      	adds	r6, r4, #5
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a840:	0200      	lsls	r0, r0, #8
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a842:	9612      	str	r6, [sp, #72]	; 0x48
 800a844:	1da6      	adds	r6, r4, #6
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a846:	183f      	adds	r7, r7, r0
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a848:	9613      	str	r6, [sp, #76]	; 0x4c
 800a84a:	1d20      	adds	r0, r4, #4
 800a84c:	1de6      	adds	r6, r4, #7
 800a84e:	9011      	str	r0, [sp, #68]	; 0x44
 800a850:	9614      	str	r6, [sp, #80]	; 0x50
 800a852:	5c16      	ldrb	r6, [r2, r0]
 800a854:	1d60      	adds	r0, r4, #5
 800a856:	5c10      	ldrb	r0, [r2, r0]
 800a858:	0636      	lsls	r6, r6, #24
 800a85a:	0400      	lsls	r0, r0, #16
 800a85c:	1836      	adds	r6, r6, r0
 800a85e:	1de0      	adds	r0, r4, #7
 800a860:	5c10      	ldrb	r0, [r2, r0]
 800a862:	1836      	adds	r6, r6, r0
 800a864:	1da0      	adds	r0, r4, #6
 800a866:	5c10      	ldrb	r0, [r2, r0]
 800a868:	0200      	lsls	r0, r0, #8
 800a86a:	1836      	adds	r6, r6, r0
 800a86c:	2009      	movs	r0, #9
 800a86e:	4684      	mov	ip, r0
 800a870:	44a4      	add	ip, r4
 800a872:	4660      	mov	r0, ip
 800a874:	9015      	str	r0, [sp, #84]	; 0x54
							if(temp == false){
 800a876:	2900      	cmp	r1, #0
 800a878:	d001      	beq.n	800a87e <PxMessagingTask+0x836>
 800a87a:	f000 fc8f 	bl	800b19c <PxMessagingTask+0x1154>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800a87e:	5c12      	ldrb	r2, [r2, r0]
 800a880:	2a00      	cmp	r2, #0
 800a882:	d00e      	beq.n	800a8a2 <PxMessagingTask+0x85a>
 800a884:	9905      	ldr	r1, [sp, #20]
 800a886:	1908      	adds	r0, r1, r4
 800a888:	7a81      	ldrb	r1, [r0, #10]
 800a88a:	2900      	cmp	r1, #0
 800a88c:	d009      	beq.n	800a8a2 <PxMessagingTask+0x85a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800a88e:	0013      	movs	r3, r2
 800a890:	7a00      	ldrb	r0, [r0, #8]
 800a892:	0032      	movs	r2, r6
 800a894:	9100      	str	r1, [sp, #0]
 800a896:	0039      	movs	r1, r7
 800a898:	f7fe fdaa 	bl	80093f0 <SetupDMAStreams>
 800a89c:	9b05      	ldr	r3, [sp, #20]
 800a89e:	9a04      	ldr	r2, [sp, #16]
 800a8a0:	5c9b      	ldrb	r3, [r3, r2]
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00a      	beq.n	800a8bc <PxMessagingTask+0x874>
 800a8a6:	9a05      	ldr	r2, [sp, #20]
 800a8a8:	1911      	adds	r1, r2, r4
 800a8aa:	7b0a      	ldrb	r2, [r1, #12]
 800a8ac:	2a00      	cmp	r2, #0
 800a8ae:	d005      	beq.n	800a8bc <PxMessagingTask+0x874>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800a8b0:	7a08      	ldrb	r0, [r1, #8]
 800a8b2:	9200      	str	r2, [sp, #0]
 800a8b4:	0039      	movs	r1, r7
 800a8b6:	0032      	movs	r2, r6
 800a8b8:	f7fe fd9a 	bl	80093f0 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800a8bc:	9b06      	ldr	r3, [sp, #24]
 800a8be:	1b5b      	subs	r3, r3, r5
 800a8c0:	00db      	lsls	r3, r3, #3
 800a8c2:	445b      	add	r3, fp
 800a8c4:	191b      	adds	r3, r3, r4
 800a8c6:	7b5b      	ldrb	r3, [r3, #13]
 800a8c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d100      	bne.n	800a8d0 <PxMessagingTask+0x888>
 800a8ce:	e462      	b.n	800a196 <PxMessagingTask+0x14e>
 800a8d0:	9b05      	ldr	r3, [sp, #20]
 800a8d2:	469c      	mov	ip, r3
 800a8d4:	4464      	add	r4, ip
 800a8d6:	7ba3      	ldrb	r3, [r4, #14]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d000      	beq.n	800a8de <PxMessagingTask+0x896>
 800a8dc:	e1c7      	b.n	800ac6e <PxMessagingTask+0xc26>
 800a8de:	4642      	mov	r2, r8
 800a8e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8e2:	5d56      	ldrb	r6, [r2, r5]
 800a8e4:	001f      	movs	r7, r3
 800a8e6:	e459      	b.n	800a19c <PxMessagingTask+0x154>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800a8e8:	9b06      	ldr	r3, [sp, #24]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	1b5e      	subs	r6, r3, r5
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	00f6      	lsls	r6, r6, #3
 800a8f2:	445e      	add	r6, fp
 800a8f4:	5d30      	ldrb	r0, [r6, r4]
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	9300      	str	r3, [sp, #0]
 800a8fa:	3319      	adds	r3, #25
 800a8fc:	f7fe fe6c 	bl	80095d8 <SendMessageFromPort>
							osDelay(100);
 800a900:	2064      	movs	r0, #100	; 0x64
 800a902:	f002 fe9f 	bl	800d644 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800a906:	4ae8      	ldr	r2, [pc, #928]	; (800aca8 <PxMessagingTask+0xc60>)
 800a908:	5d33      	ldrb	r3, [r6, r4]
 800a90a:	7811      	ldrb	r1, [r2, #0]
 800a90c:	9804      	ldr	r0, [sp, #16]
 800a90e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a910:	f7f9 f916 	bl	8003b40 <remoteBootloaderUpdate>
 800a914:	4643      	mov	r3, r8
 800a916:	2700      	movs	r7, #0
 800a918:	5d5e      	ldrb	r6, [r3, r5]
 800a91a:	e43f      	b.n	800a19c <PxMessagingTask+0x154>
							responseStatus =BOS_OK; // Initialize response
 800a91c:	2300      	movs	r3, #0
 800a91e:	4ae3      	ldr	r2, [pc, #908]	; (800acac <PxMessagingTask+0xc64>)
 800a920:	7013      	strb	r3, [r2, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800a922:	9b06      	ldr	r3, [sp, #24]
 800a924:	1b5b      	subs	r3, r3, r5
 800a926:	00db      	lsls	r3, r3, #3
 800a928:	445b      	add	r3, fp
 800a92a:	5d1f      	ldrb	r7, [r3, r4]
 800a92c:	2f00      	cmp	r7, #0
 800a92e:	d100      	bne.n	800a932 <PxMessagingTask+0x8ea>
 800a930:	e2ad      	b.n	800ae8e <PxMessagingTask+0xe46>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800a932:	2f1e      	cmp	r7, #30
 800a934:	d900      	bls.n	800a938 <PxMessagingTask+0x8f0>
 800a936:	e2a6      	b.n	800ae86 <PxMessagingTask+0xe3e>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a938:	2280      	movs	r2, #128	; 0x80
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a93a:	9905      	ldr	r1, [sp, #20]
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a93c:	0592      	lsls	r2, r2, #22
 800a93e:	4694      	mov	ip, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a940:	1c62      	adds	r2, r4, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a942:	1e7e      	subs	r6, r7, #1
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a944:	9207      	str	r2, [sp, #28]
 800a946:	5c8f      	ldrb	r7, [r1, r2]
 800a948:	220f      	movs	r2, #15
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a94a:	4bd9      	ldr	r3, [pc, #868]	; (800acb0 <PxMessagingTask+0xc68>)
 800a94c:	00b6      	lsls	r6, r6, #2
 800a94e:	599b      	ldr	r3, [r3, r6]
 800a950:	0c18      	lsrs	r0, r3, #16
 800a952:	4013      	ands	r3, r2
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a954:	1e7a      	subs	r2, r7, #1
 800a956:	b2d2      	uxtb	r2, r2
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800a958:	4460      	add	r0, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800a95a:	2a07      	cmp	r2, #7
 800a95c:	d900      	bls.n	800a960 <PxMessagingTask+0x918>
 800a95e:	e1dc      	b.n	800ad1a <PxMessagingTask+0xcd2>
 800a960:	49d4      	ldr	r1, [pc, #848]	; (800acb4 <PxMessagingTask+0xc6c>)
 800a962:	0092      	lsls	r2, r2, #2
 800a964:	588a      	ldr	r2, [r1, r2]
 800a966:	4697      	mov	pc, r2
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800a968:	2202      	movs	r2, #2
 800a96a:	4252      	negs	r2, r2
 800a96c:	17d3      	asrs	r3, r2, #31
 800a96e:	4649      	mov	r1, r9
 800a970:	6808      	ldr	r0, [r1, #0]
 800a972:	6849      	ldr	r1, [r1, #4]
 800a974:	1812      	adds	r2, r2, r0
 800a976:	414b      	adcs	r3, r1
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <PxMessagingTask+0x938>
 800a97c:	f000 fc6f 	bl	800b25e <PxMessagingTask+0x1216>
 800a980:	4643      	mov	r3, r8
 800a982:	5d5e      	ldrb	r6, [r3, r5]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800a984:	4bc9      	ldr	r3, [pc, #804]	; (800acac <PxMessagingTask+0xc64>)
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	2b10      	cmp	r3, #16
 800a98a:	d101      	bne.n	800a990 <PxMessagingTask+0x948>
 800a98c:	f000 fc64 	bl	800b258 <PxMessagingTask+0x1210>
								responseStatus =BOS_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	4ac6      	ldr	r2, [pc, #792]	; (800acac <PxMessagingTask+0xc64>)
 800a994:	2700      	movs	r7, #0
 800a996:	7013      	strb	r3, [r2, #0]
 800a998:	f7ff fc00 	bl	800a19c <PxMessagingTask+0x154>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800a99c:	9b06      	ldr	r3, [sp, #24]
 800a99e:	1b5b      	subs	r3, r3, r5
 800a9a0:	00db      	lsls	r3, r3, #3
 800a9a2:	445b      	add	r3, fp
 800a9a4:	5d1b      	ldrb	r3, [r3, r4]
 800a9a6:	e5a4      	b.n	800a4f2 <PxMessagingTask+0x4aa>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a9a8:	9b06      	ldr	r3, [sp, #24]
 800a9aa:	49bf      	ldr	r1, [pc, #764]	; (800aca8 <PxMessagingTask+0xc60>)
 800a9ac:	1b58      	subs	r0, r3, r5
 800a9ae:	00c0      	lsls	r0, r0, #3
 800a9b0:	7809      	ldrb	r1, [r1, #0]
 800a9b2:	4458      	add	r0, fp
 800a9b4:	1902      	adds	r2, r0, r4
 800a9b6:	468c      	mov	ip, r1
 800a9b8:	7a51      	ldrb	r1, [r2, #9]
 800a9ba:	7ad7      	ldrb	r7, [r2, #11]
 800a9bc:	9104      	str	r1, [sp, #16]
 800a9be:	7b11      	ldrb	r1, [r2, #12]
 800a9c0:	7a93      	ldrb	r3, [r2, #10]
 800a9c2:	000e      	movs	r6, r1
 800a9c4:	1e71      	subs	r1, r6, #1
 800a9c6:	418e      	sbcs	r6, r1
 800a9c8:	9603      	str	r6, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a9ca:	7916      	ldrb	r6, [r2, #4]
 800a9cc:	7951      	ldrb	r1, [r2, #5]
 800a9ce:	0636      	lsls	r6, r6, #24
 800a9d0:	0409      	lsls	r1, r1, #16
 800a9d2:	1871      	adds	r1, r6, r1
 800a9d4:	79d6      	ldrb	r6, [r2, #7]
 800a9d6:	1989      	adds	r1, r1, r6
 800a9d8:	7996      	ldrb	r6, [r2, #6]
 800a9da:	0236      	lsls	r6, r6, #8
 800a9dc:	1989      	adds	r1, r1, r6
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a9de:	9102      	str	r1, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a9e0:	5d01      	ldrb	r1, [r0, r4]
 800a9e2:	78d0      	ldrb	r0, [r2, #3]
 800a9e4:	0609      	lsls	r1, r1, #24
 800a9e6:	1809      	adds	r1, r1, r0
 800a9e8:	7850      	ldrb	r0, [r2, #1]
 800a9ea:	0400      	lsls	r0, r0, #16
 800a9ec:	1809      	adds	r1, r1, r0
 800a9ee:	7890      	ldrb	r0, [r2, #2]
 800a9f0:	0200      	lsls	r0, r0, #8
 800a9f2:	1809      	adds	r1, r1, r0
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a9f4:	9101      	str	r1, [sp, #4]
 800a9f6:	7a12      	ldrb	r2, [r2, #8]
 800a9f8:	4661      	mov	r1, ip
 800a9fa:	9200      	str	r2, [sp, #0]
 800a9fc:	9804      	ldr	r0, [sp, #16]
 800a9fe:	003a      	movs	r2, r7
 800aa00:	f7ff f86e 	bl	8009ae0 <StartScastDMAStream>
 800aa04:	f7ff fbc7 	bl	800a196 <PxMessagingTask+0x14e>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800aa08:	4ba7      	ldr	r3, [pc, #668]	; (800aca8 <PxMessagingTask+0xc60>)
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d033      	beq.n	800aa78 <PxMessagingTask+0xa30>
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d02e      	beq.n	800aa72 <PxMessagingTask+0xa2a>
				ForwardReceivedMessage(port);
 800aa14:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aa16:	f7ff f81f 	bl	8009a58 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 800aa1a:	4ba7      	ldr	r3, [pc, #668]	; (800acb8 <PxMessagingTask+0xc70>)
 800aa1c:	785b      	ldrb	r3, [r3, #1]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d002      	beq.n	800aa28 <PxMessagingTask+0x9e0>
					indMode =IND_SHORT_BLINK;
 800aa22:	2303      	movs	r3, #3
 800aa24:	4aa5      	ldr	r2, [pc, #660]	; (800acbc <PxMessagingTask+0xc74>)
 800aa26:	7013      	strb	r3, [r2, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 800aa28:	9b08      	ldr	r3, [sp, #32]
 800aa2a:	2b19      	cmp	r3, #25
 800aa2c:	d071      	beq.n	800ab12 <PxMessagingTask+0xaca>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 800aa2e:	9b08      	ldr	r3, [sp, #32]
 800aa30:	2b1a      	cmp	r3, #26
 800aa32:	d000      	beq.n	800aa36 <PxMessagingTask+0x9ee>
 800aa34:	e435      	b.n	800a2a2 <PxMessagingTask+0x25a>
					Delay_ms(100);
 800aa36:	2064      	movs	r0, #100	; 0x64
 800aa38:	f004 fd88 	bl	800f54c <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 800aa3c:	9b06      	ldr	r3, [sp, #24]
 800aa3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa40:	1b5b      	subs	r3, r3, r5
 800aa42:	00db      	lsls	r3, r3, #3
 800aa44:	445b      	add	r3, fp
 800aa46:	5c9b      	ldrb	r3, [r3, r2]
 800aa48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa4a:	9907      	ldr	r1, [sp, #28]
 800aa4c:	9804      	ldr	r0, [sp, #16]
 800aa4e:	f7f9 f877 	bl	8003b40 <remoteBootloaderUpdate>
 800aa52:	e426      	b.n	800a2a2 <PxMessagingTask+0x25a>
				longMessage =1;
 800aa54:	2301      	movs	r3, #1
 800aa56:	4a9a      	ldr	r2, [pc, #616]	; (800acc0 <PxMessagingTask+0xc78>)
 800aa58:	7013      	strb	r3, [r2, #0]
 800aa5a:	f7ff fb35 	bl	800a0c8 <PxMessagingTask+0x80>
				BOSMessaging.Acknowledgment =false;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	4a95      	ldr	r2, [pc, #596]	; (800acb8 <PxMessagingTask+0xc70>)
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800aa62:	212c      	movs	r1, #44	; 0x2c
				BOSMessaging.Acknowledgment =false;
 800aa64:	7113      	strb	r3, [r2, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800aa66:	9804      	ldr	r0, [sp, #16]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f7ff f815 	bl	8009a98 <SendMessageToModule>
 800aa6e:	f7ff fb56 	bl	800a11e <PxMessagingTask+0xd6>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800aa72:	9b08      	ldr	r3, [sp, #32]
 800aa74:	2b10      	cmp	r3, #16
 800aa76:	d1cd      	bne.n	800aa14 <PxMessagingTask+0x9cc>
 800aa78:	4643      	mov	r3, r8
 800aa7a:	5d5e      	ldrb	r6, [r3, r5]
				if(result == BOS_OK){
 800aa7c:	2f00      	cmp	r7, #0
 800aa7e:	d101      	bne.n	800aa84 <PxMessagingTask+0xa3c>
 800aa80:	f7ff fb75 	bl	800a16e <PxMessagingTask+0x126>
				}
 800aa84:	f7ff fb8a 	bl	800a19c <PxMessagingTask+0x154>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800aa88:	9b07      	ldr	r3, [sp, #28]
 800aa8a:	2bfe      	cmp	r3, #254	; 0xfe
 800aa8c:	d1f6      	bne.n	800aa7c <PxMessagingTask+0xa34>
 800aa8e:	9b06      	ldr	r3, [sp, #24]
 800aa90:	4a8c      	ldr	r2, [pc, #560]	; (800acc4 <PxMessagingTask+0xc7c>)
 800aa92:	1b5c      	subs	r4, r3, r5
 800aa94:	00e4      	lsls	r4, r4, #3
 800aa96:	445c      	add	r4, fp
 800aa98:	19a3      	adds	r3, r4, r6
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	7e12      	ldrb	r2, [r2, #24]
					result =BOS_ERR_MSG_Reflection;
 800aaa0:	2703      	movs	r7, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d101      	bne.n	800aaaa <PxMessagingTask+0xa62>
 800aaa6:	f7ff fb79 	bl	800a19c <PxMessagingTask+0x154>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800aaaa:	4a86      	ldr	r2, [pc, #536]	; (800acc4 <PxMessagingTask+0xc7c>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800aaac:	990d      	ldr	r1, [sp, #52]	; 0x34
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800aaae:	7613      	strb	r3, [r2, #24]
 800aab0:	4a85      	ldr	r2, [pc, #532]	; (800acc8 <PxMessagingTask+0xc80>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800aab2:	20fe      	movs	r0, #254	; 0xfe
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800aab4:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800aab6:	f7fe ff8b 	bl	80099d0 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800aaba:	4643      	mov	r3, r8
 800aabc:	2200      	movs	r2, #0
 800aabe:	5d5e      	ldrb	r6, [r3, r5]
 800aac0:	19a3      	adds	r3, r4, r6
 800aac2:	3b01      	subs	r3, #1
 800aac4:	701a      	strb	r2, [r3, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800aac6:	1eb0      	subs	r0, r6, #2
 800aac8:	5c27      	ldrb	r7, [r4, r0]
 800aaca:	9709      	str	r7, [sp, #36]	; 0x24
					for(i =0; i < temp; i++){
 800aacc:	2f00      	cmp	r7, #0
 800aace:	d01d      	beq.n	800ab0c <PxMessagingTask+0xac4>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800aad0:	4b75      	ldr	r3, [pc, #468]	; (800aca8 <PxMessagingTask+0xc60>)
 800aad2:	1bc0      	subs	r0, r0, r7
 800aad4:	7819      	ldrb	r1, [r3, #0]
 800aad6:	5c23      	ldrb	r3, [r4, r0]
 800aad8:	428b      	cmp	r3, r1
 800aada:	d101      	bne.n	800aae0 <PxMessagingTask+0xa98>
 800aadc:	f7ff fb47 	bl	800a16e <PxMessagingTask+0x126>
 800aae0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800aae2:	465a      	mov	r2, fp
 800aae4:	46a4      	mov	ip, r4
 800aae6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aae8:	3201      	adds	r2, #1
 800aaea:	1e7c      	subs	r4, r7, #1
 800aaec:	4462      	add	r2, ip
 800aaee:	b2e4      	uxtb	r4, r4
 800aaf0:	181b      	adds	r3, r3, r0
 800aaf2:	1912      	adds	r2, r2, r4
 800aaf4:	445b      	add	r3, fp
 800aaf6:	1812      	adds	r2, r2, r0
 800aaf8:	e006      	b.n	800ab08 <PxMessagingTask+0xac0>
 800aafa:	3301      	adds	r3, #1
 800aafc:	1e58      	subs	r0, r3, #1
 800aafe:	7800      	ldrb	r0, [r0, #0]
 800ab00:	4288      	cmp	r0, r1
 800ab02:	d101      	bne.n	800ab08 <PxMessagingTask+0xac0>
 800ab04:	f7ff fb33 	bl	800a16e <PxMessagingTask+0x126>
					for(i =0; i < temp; i++){
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d1f6      	bne.n	800aafa <PxMessagingTask+0xab2>
					result =BOS_ERR_WrongID;
 800ab0c:	2766      	movs	r7, #102	; 0x66
 800ab0e:	f7ff fb45 	bl	800a19c <PxMessagingTask+0x154>
					Delay_ms(100);
 800ab12:	2064      	movs	r0, #100	; 0x64
 800ab14:	f004 fd1a 	bl	800f54c <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 800ab18:	2300      	movs	r3, #0
 800ab1a:	e795      	b.n	800aa48 <PxMessagingTask+0xa00>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800ab1c:	9a04      	ldr	r2, [sp, #16]
 800ab1e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab20:	9400      	str	r4, [sp, #0]
 800ab22:	9b07      	ldr	r3, [sp, #28]
 800ab24:	9808      	ldr	r0, [sp, #32]
 800ab26:	f000 fe0f 	bl	800b748 <Module_MessagingTask>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800ab2a:	2200      	movs	r2, #0
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800ab2c:	0007      	movs	r7, r0
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800ab2e:	2100      	movs	r1, #0
		if(result == BOS_ERR_UnknownMessage){
 800ab30:	2801      	cmp	r0, #1
 800ab32:	d101      	bne.n	800ab38 <PxMessagingTask+0xaf0>
 800ab34:	f7ff fbf7 	bl	800a326 <PxMessagingTask+0x2de>
 800ab38:	f7ff fbb3 	bl	800a2a2 <PxMessagingTask+0x25a>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800ab3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab3e:	4861      	ldr	r0, [pc, #388]	; (800acc4 <PxMessagingTask+0xc7c>)
 800ab40:	3a01      	subs	r2, #1
 800ab42:	306c      	adds	r0, #108	; 0x6c
 800ab44:	f008 f8ab 	bl	8012c9e <memcpy>
 800ab48:	e5ee      	b.n	800a728 <PxMessagingTask+0x6e0>
										messageParams[0] =*(__IO int8_t* )temp32;
 800ab4a:	4652      	mov	r2, sl
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	7013      	strb	r3, [r2, #0]
										SendMessageToModule(src,
 800ab50:	2201      	movs	r2, #1
											SendMessageToModule(src,
 800ab52:	211f      	movs	r1, #31
 800ab54:	f7ff fbe7 	bl	800a326 <PxMessagingTask+0x2de>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800ab58:	4651      	mov	r1, sl
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	1212      	asrs	r2, r2, #8
 800ab62:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	1412      	asrs	r2, r2, #16
 800ab68:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800ab6a:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 800ab6c:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800ab6e:	161b      	asrs	r3, r3, #24
 800ab70:	70cb      	strb	r3, [r1, #3]
 800ab72:	e7ee      	b.n	800ab52 <PxMessagingTask+0xb0a>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800ab74:	4651      	mov	r1, sl
 800ab76:	781a      	ldrb	r2, [r3, #0]
 800ab78:	700a      	strb	r2, [r1, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800ab7a:	785a      	ldrb	r2, [r3, #1]
 800ab7c:	704a      	strb	r2, [r1, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800ab7e:	789a      	ldrb	r2, [r3, #2]
 800ab80:	708a      	strb	r2, [r1, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800ab82:	78db      	ldrb	r3, [r3, #3]
										SendMessageToModule(src,
 800ab84:	2208      	movs	r2, #8
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800ab86:	70cb      	strb	r3, [r1, #3]
 800ab88:	e7e3      	b.n	800ab52 <PxMessagingTask+0xb0a>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d100      	bne.n	800ab90 <PxMessagingTask+0xb48>
 800ab8e:	e3ad      	b.n	800b2ec <PxMessagingTask+0x12a4>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800ab90:	d801      	bhi.n	800ab96 <PxMessagingTask+0xb4e>
 800ab92:	f7ff fb00 	bl	800a196 <PxMessagingTask+0x14e>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800ab96:	3b04      	subs	r3, #4
 800ab98:	4a45      	ldr	r2, [pc, #276]	; (800acb0 <PxMessagingTask+0xc68>)
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	270f      	movs	r7, #15
 800ab9e:	58d2      	ldr	r2, [r2, r3]
 800aba0:	4653      	mov	r3, sl
 800aba2:	4017      	ands	r7, r2
 800aba4:	701f      	strb	r7, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800aba6:	d100      	bne.n	800abaa <PxMessagingTask+0xb62>
 800aba8:	e397      	b.n	800b2da <PxMessagingTask+0x1292>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800abaa:	2380      	movs	r3, #128	; 0x80
									switch(messageParams[0]) // requested format
 800abac:	3f01      	subs	r7, #1
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800abae:	0c12      	lsrs	r2, r2, #16
 800abb0:	059b      	lsls	r3, r3, #22
									switch(messageParams[0]) // requested format
 800abb2:	b2ff      	uxtb	r7, r7
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800abb4:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 800abb6:	2f07      	cmp	r7, #7
 800abb8:	d901      	bls.n	800abbe <PxMessagingTask+0xb76>
 800abba:	f7ff faec 	bl	800a196 <PxMessagingTask+0x14e>
 800abbe:	4943      	ldr	r1, [pc, #268]	; (800accc <PxMessagingTask+0xc84>)
 800abc0:	00bf      	lsls	r7, r7, #2
 800abc2:	59c9      	ldr	r1, [r1, r7]
 800abc4:	468f      	mov	pc, r1
								for(p =1; p <= NumOfPorts; p++){
 800abc6:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 800abc8:	0020      	movs	r0, r4
								for(p =1; p <= NumOfPorts; p++){
 800abca:	3401      	adds	r4, #1
									UpdateBaudrate(p,temp32);
 800abcc:	0039      	movs	r1, r7
								for(p =1; p <= NumOfPorts; p++){
 800abce:	b2e4      	uxtb	r4, r4
									UpdateBaudrate(p,temp32);
 800abd0:	f002 fc62 	bl	800d498 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800abd4:	2c07      	cmp	r4, #7
 800abd6:	d1f7      	bne.n	800abc8 <PxMessagingTask+0xb80>
 800abd8:	e050      	b.n	800ac7c <PxMessagingTask+0xc34>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d001      	beq.n	800abe2 <PxMessagingTask+0xb9a>
 800abde:	f7ff fada 	bl	800a196 <PxMessagingTask+0x14e>
								messageParams[0] =0; /* change own ID */
 800abe2:	2700      	movs	r7, #0
 800abe4:	4653      	mov	r3, sl
 800abe6:	701f      	strb	r7, [r3, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800abe8:	9b05      	ldr	r3, [sp, #20]
 800abea:	4652      	mov	r2, sl
 800abec:	469c      	mov	ip, r3
 800abee:	4464      	add	r4, ip
 800abf0:	7863      	ldrb	r3, [r4, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800abf2:	78a0      	ldrb	r0, [r4, #2]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800abf4:	7053      	strb	r3, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800abf6:	2303      	movs	r3, #3
 800abf8:	003a      	movs	r2, r7
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	0039      	movs	r1, r7
 800abfe:	330d      	adds	r3, #13
 800ac00:	f7fe fcea 	bl	80095d8 <SendMessageFromPort>
 800ac04:	4643      	mov	r3, r8
 800ac06:	5d5e      	ldrb	r6, [r3, r5]
 800ac08:	f7ff fac8 	bl	800a19c <PxMessagingTask+0x154>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800ac0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac10:	1a9a      	subs	r2, r3, r2
 800ac12:	3a02      	subs	r2, #2
 800ac14:	f008 f843 	bl	8012c9e <memcpy>
 800ac18:	e586      	b.n	800a728 <PxMessagingTask+0x6e0>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800ac1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac1c:	f008 f83f 	bl	8012c9e <memcpy>
								longMessageLastPtr =0;
 800ac20:	4b2b      	ldr	r3, [pc, #172]	; (800acd0 <PxMessagingTask+0xc88>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800ac22:	482c      	ldr	r0, [pc, #176]	; (800acd4 <PxMessagingTask+0xc8c>)
								longMessageLastPtr =0;
 800ac24:	801f      	strh	r7, [r3, #0]
								responseStatus =BOS_OK;
 800ac26:	4b21      	ldr	r3, [pc, #132]	; (800acac <PxMessagingTask+0xc64>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800ac28:	6800      	ldr	r0, [r0, #0]
								responseStatus =BOS_OK;
 800ac2a:	701f      	strb	r7, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	001a      	movs	r2, r3
 800ac30:	0019      	movs	r1, r3
 800ac32:	f004 f8b9 	bl	800eda8 <xTaskGenericNotify>
 800ac36:	4643      	mov	r3, r8
 800ac38:	2700      	movs	r7, #0
 800ac3a:	5d5e      	ldrb	r6, [r3, r5]
 800ac3c:	f7ff faae 	bl	800a19c <PxMessagingTask+0x154>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800ac40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac42:	f008 f82c 	bl	8012c9e <memcpy>
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800ac46:	2116      	movs	r1, #22
 800ac48:	0038      	movs	r0, r7
 800ac4a:	f7f5 fa81 	bl	8000150 <__udivsi3>
 800ac4e:	4b22      	ldr	r3, [pc, #136]	; (800acd8 <PxMessagingTask+0xc90>)
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800ac50:	003a      	movs	r2, r7
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800ac52:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800ac54:	4921      	ldr	r1, [pc, #132]	; (800acdc <PxMessagingTask+0xc94>)
 800ac56:	4822      	ldr	r0, [pc, #136]	; (800ace0 <PxMessagingTask+0xc98>)
 800ac58:	f008 f821 	bl	8012c9e <memcpy>
								longMessageLastPtr =0;
 800ac5c:	4b1c      	ldr	r3, [pc, #112]	; (800acd0 <PxMessagingTask+0xc88>)
 800ac5e:	2700      	movs	r7, #0
 800ac60:	801c      	strh	r4, [r3, #0]
 800ac62:	f7ff fa9b 	bl	800a19c <PxMessagingTask+0x154>
								temp =cMessage[port - 1][13 + shift];
 800ac66:	9a05      	ldr	r2, [sp, #20]
 800ac68:	1912      	adds	r2, r2, r4
 800ac6a:	7b51      	ldrb	r1, [r2, #13]
 800ac6c:	e5d4      	b.n	800a818 <PxMessagingTask+0x7d0>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800ac6e:	7a20      	ldrb	r0, [r4, #8]
 800ac70:	0032      	movs	r2, r6
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	0039      	movs	r1, r7
 800ac76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac78:	f7fe fbba 	bl	80093f0 <SetupDMAStreams>
 800ac7c:	4643      	mov	r3, r8
 800ac7e:	5d5e      	ldrb	r6, [r3, r5]
 800ac80:	2300      	movs	r3, #0
 800ac82:	9309      	str	r3, [sp, #36]	; 0x24
 800ac84:	001f      	movs	r7, r3
 800ac86:	f7ff fa89 	bl	800a19c <PxMessagingTask+0x154>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800ac8a:	4651      	mov	r1, sl
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	0a12      	lsrs	r2, r2, #8
 800ac94:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	0c12      	lsrs	r2, r2, #16
 800ac9a:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800ac9c:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 800ac9e:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800aca0:	0e1b      	lsrs	r3, r3, #24
 800aca2:	70cb      	strb	r3, [r1, #3]
 800aca4:	e755      	b.n	800ab52 <PxMessagingTask+0xb0a>
 800aca6:	46c0      	nop			; (mov r8, r8)
 800aca8:	20000a98 	.word	0x20000a98
 800acac:	20000c3c 	.word	0x20000c3c
 800acb0:	20006e30 	.word	0x20006e30
 800acb4:	08017a08 	.word	0x08017a08
 800acb8:	20006e28 	.word	0x20006e28
 800acbc:	2000117e 	.word	0x2000117e
 800acc0:	20000c4c 	.word	0x20000c4c
 800acc4:	200019d8 	.word	0x200019d8
 800acc8:	20000c48 	.word	0x20000c48
 800accc:	08017a28 	.word	0x08017a28
 800acd0:	20000c4a 	.word	0x20000c4a
 800acd4:	2000181c 	.word	0x2000181c
 800acd8:	20000008 	.word	0x20000008
 800acdc:	20001ab0 	.word	0x20001ab0
 800ace0:	20000f0c 	.word	0x20000f0c
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ace4:	4651      	mov	r1, sl
 800ace6:	881a      	ldrh	r2, [r3, #0]
 800ace8:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800acea:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 800acec:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800acee:	b21b      	sxth	r3, r3
 800acf0:	121b      	asrs	r3, r3, #8
 800acf2:	704b      	strb	r3, [r1, #1]
 800acf4:	e72d      	b.n	800ab52 <PxMessagingTask+0xb0a>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800acf6:	4651      	mov	r1, sl
 800acf8:	881a      	ldrh	r2, [r3, #0]
 800acfa:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800acfc:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 800acfe:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ad00:	0a1b      	lsrs	r3, r3, #8
 800ad02:	704b      	strb	r3, [r1, #1]
 800ad04:	e725      	b.n	800ab52 <PxMessagingTask+0xb0a>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d02c      	beq.n	800ad64 <PxMessagingTask+0xd1c>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800ad0a:	9b05      	ldr	r3, [sp, #20]
 800ad0c:	1919      	adds	r1, r3, r4
 800ad0e:	78ca      	ldrb	r2, [r1, #3]
 800ad10:	788b      	ldrb	r3, [r1, #2]
 800ad12:	0212      	lsls	r2, r2, #8
 800ad14:	189b      	adds	r3, r3, r2
 800ad16:	b21b      	sxth	r3, r3
 800ad18:	8003      	strh	r3, [r0, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800ad1a:	9905      	ldr	r1, [sp, #20]
 800ad1c:	9807      	ldr	r0, [sp, #28]
 800ad1e:	5d0b      	ldrb	r3, [r1, r4]
 800ad20:	5c09      	ldrb	r1, [r1, r0]
 800ad22:	200f      	movs	r0, #15
 800ad24:	3b01      	subs	r3, #1
 800ad26:	4ad8      	ldr	r2, [pc, #864]	; (800b088 <PxMessagingTask+0x1040>)
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	58d2      	ldr	r2, [r2, r3]
 800ad2c:	4010      	ands	r0, r2
 800ad2e:	4288      	cmp	r0, r1
 800ad30:	d008      	beq.n	800ad44 <PxMessagingTask+0xcfc>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800ad32:	48d6      	ldr	r0, [pc, #856]	; (800b08c <PxMessagingTask+0x1044>)
 800ad34:	4684      	mov	ip, r0
 800ad36:	4461      	add	r1, ip
 800ad38:	400a      	ands	r2, r1
 800ad3a:	49d3      	ldr	r1, [pc, #844]	; (800b088 <PxMessagingTask+0x1040>)
 800ad3c:	50ca      	str	r2, [r1, r3]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800ad3e:	2314      	movs	r3, #20
 800ad40:	4ad3      	ldr	r2, [pc, #844]	; (800b090 <PxMessagingTask+0x1048>)
 800ad42:	7013      	strb	r3, [r2, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 800ad44:	2240      	movs	r2, #64	; 0x40
 800ad46:	4bd3      	ldr	r3, [pc, #844]	; (800b094 <PxMessagingTask+0x104c>)
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	4393      	bics	r3, r2
 800ad4c:	2b20      	cmp	r3, #32
 800ad4e:	d001      	beq.n	800ad54 <PxMessagingTask+0xd0c>
 800ad50:	f7ff fa21 	bl	800a196 <PxMessagingTask+0x14e>
								messageParams[0] =responseStatus;
 800ad54:	4652      	mov	r2, sl
 800ad56:	4bce      	ldr	r3, [pc, #824]	; (800b090 <PxMessagingTask+0x1048>)
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800ad58:	2121      	movs	r1, #33	; 0x21
								messageParams[0] =responseStatus;
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	7013      	strb	r3, [r2, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f7ff fae1 	bl	800a326 <PxMessagingTask+0x2de>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800ad64:	2002      	movs	r0, #2
 800ad66:	f007 fd4d 	bl	8012804 <malloc>
												if(temp32 != 0){
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d01e      	beq.n	800adac <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad6e:	0403      	lsls	r3, r0, #16
 800ad70:	4ac5      	ldr	r2, [pc, #788]	; (800b088 <PxMessagingTask+0x1040>)
 800ad72:	3304      	adds	r3, #4
 800ad74:	5193      	str	r3, [r2, r6]
 800ad76:	e7c8      	b.n	800ad0a <PxMessagingTask+0xcc2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d025      	beq.n	800adc8 <PxMessagingTask+0xd80>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800ad7c:	9b05      	ldr	r3, [sp, #20]
 800ad7e:	191b      	adds	r3, r3, r4
 800ad80:	789b      	ldrb	r3, [r3, #2]
 800ad82:	b25b      	sxtb	r3, r3
 800ad84:	7003      	strb	r3, [r0, #0]
 800ad86:	e7c8      	b.n	800ad1a <PxMessagingTask+0xcd2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d013      	beq.n	800adb4 <PxMessagingTask+0xd6c>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800ad8c:	9b05      	ldr	r3, [sp, #20]
 800ad8e:	1919      	adds	r1, r3, r4
 800ad90:	78ca      	ldrb	r2, [r1, #3]
 800ad92:	788b      	ldrb	r3, [r1, #2]
 800ad94:	0212      	lsls	r2, r2, #8
 800ad96:	189b      	adds	r3, r3, r2
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	8003      	strh	r3, [r0, #0]
 800ad9c:	e7bd      	b.n	800ad1a <PxMessagingTask+0xcd2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d01c      	beq.n	800addc <PxMessagingTask+0xd94>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800ada2:	9b05      	ldr	r3, [sp, #20]
 800ada4:	191b      	adds	r3, r3, r4
 800ada6:	789b      	ldrb	r3, [r3, #2]
 800ada8:	7003      	strb	r3, [r0, #0]
 800adaa:	e7b6      	b.n	800ad1a <PxMessagingTask+0xcd2>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800adac:	2312      	movs	r3, #18
 800adae:	4ab8      	ldr	r2, [pc, #736]	; (800b090 <PxMessagingTask+0x1048>)
 800adb0:	7013      	strb	r3, [r2, #0]
 800adb2:	e7b2      	b.n	800ad1a <PxMessagingTask+0xcd2>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800adb4:	2002      	movs	r0, #2
 800adb6:	f007 fd25 	bl	8012804 <malloc>
												if(temp32 != 0){
 800adba:	2800      	cmp	r0, #0
 800adbc:	d0f6      	beq.n	800adac <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800adbe:	0403      	lsls	r3, r0, #16
 800adc0:	4ab1      	ldr	r2, [pc, #708]	; (800b088 <PxMessagingTask+0x1040>)
 800adc2:	3303      	adds	r3, #3
 800adc4:	5193      	str	r3, [r2, r6]
 800adc6:	e7e1      	b.n	800ad8c <PxMessagingTask+0xd44>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800adc8:	2001      	movs	r0, #1
 800adca:	f007 fd1b 	bl	8012804 <malloc>
												if(temp32 != 0){
 800adce:	2800      	cmp	r0, #0
 800add0:	d0ec      	beq.n	800adac <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800add2:	0403      	lsls	r3, r0, #16
 800add4:	4aac      	ldr	r2, [pc, #688]	; (800b088 <PxMessagingTask+0x1040>)
 800add6:	3302      	adds	r3, #2
 800add8:	5193      	str	r3, [r2, r6]
 800adda:	e7cf      	b.n	800ad7c <PxMessagingTask+0xd34>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800addc:	2001      	movs	r0, #1
 800adde:	f007 fd11 	bl	8012804 <malloc>
												if(temp32 != 0){
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d0e2      	beq.n	800adac <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ade6:	0403      	lsls	r3, r0, #16
 800ade8:	19df      	adds	r7, r3, r7
 800adea:	4ba7      	ldr	r3, [pc, #668]	; (800b088 <PxMessagingTask+0x1040>)
 800adec:	519f      	str	r7, [r3, r6]
 800adee:	e7d8      	b.n	800ada2 <PxMessagingTask+0xd5a>
										ADCSelectChannel(ADCPort,"top");
 800adf0:	49a9      	ldr	r1, [pc, #676]	; (800b098 <PxMessagingTask+0x1050>)
 800adf2:	f7fd ff5f 	bl	8008cb4 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800adf6:	4ba9      	ldr	r3, [pc, #676]	; (800b09c <PxMessagingTask+0x1054>)
 800adf8:	4aa8      	ldr	r2, [pc, #672]	; (800b09c <PxMessagingTask+0x1054>)
 800adfa:	5d98      	ldrb	r0, [r3, r6]
 800adfc:	3248      	adds	r2, #72	; 0x48
 800adfe:	49a6      	ldr	r1, [pc, #664]	; (800b098 <PxMessagingTask+0x1050>)
 800ae00:	f7fd ffb0 	bl	8008d64 <ReadADCChannel>
 800ae04:	f7ff fa04 	bl	800a210 <PxMessagingTask+0x1c8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d100      	bne.n	800ae0e <PxMessagingTask+0xdc6>
 800ae0c:	e085      	b.n	800af1a <PxMessagingTask+0xed2>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800ae0e:	9b05      	ldr	r3, [sp, #20]
 800ae10:	191a      	adds	r2, r3, r4
 800ae12:	78d3      	ldrb	r3, [r2, #3]
 800ae14:	7911      	ldrb	r1, [r2, #4]
 800ae16:	021b      	lsls	r3, r3, #8
 800ae18:	0409      	lsls	r1, r1, #16
 800ae1a:	185b      	adds	r3, r3, r1
 800ae1c:	7891      	ldrb	r1, [r2, #2]
 800ae1e:	7952      	ldrb	r2, [r2, #5]
 800ae20:	185b      	adds	r3, r3, r1
 800ae22:	0612      	lsls	r2, r2, #24
 800ae24:	189b      	adds	r3, r3, r2
 800ae26:	464a      	mov	r2, r9
 800ae28:	4649      	mov	r1, r9
 800ae2a:	6013      	str	r3, [r2, #0]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	604a      	str	r2, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800ae30:	6003      	str	r3, [r0, #0]
 800ae32:	e772      	b.n	800ad1a <PxMessagingTask+0xcd2>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800ae34:	9b05      	ldr	r3, [sp, #20]
 800ae36:	469c      	mov	ip, r3
 800ae38:	4464      	add	r4, ip
 800ae3a:	78a3      	ldrb	r3, [r4, #2]
 800ae3c:	78e2      	ldrb	r2, [r4, #3]
 800ae3e:	021b      	lsls	r3, r3, #8
 800ae40:	0412      	lsls	r2, r2, #16
 800ae42:	189b      	adds	r3, r3, r2
 800ae44:	7862      	ldrb	r2, [r4, #1]
 800ae46:	189b      	adds	r3, r3, r2
 800ae48:	7922      	ldrb	r2, [r4, #4]
 800ae4a:	0612      	lsls	r2, r2, #24
 800ae4c:	189b      	adds	r3, r3, r2
 800ae4e:	4a93      	ldr	r2, [pc, #588]	; (800b09c <PxMessagingTask+0x1054>)
 800ae50:	62d3      	str	r3, [r2, #44]	; 0x2c
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800ae52:	79a3      	ldrb	r3, [r4, #6]
 800ae54:	79e2      	ldrb	r2, [r4, #7]
 800ae56:	021b      	lsls	r3, r3, #8
 800ae58:	0412      	lsls	r2, r2, #16
 800ae5a:	189b      	adds	r3, r3, r2
 800ae5c:	7962      	ldrb	r2, [r4, #5]
 800ae5e:	189b      	adds	r3, r3, r2
 800ae60:	7a22      	ldrb	r2, [r4, #8]
 800ae62:	0612      	lsls	r2, r2, #24
 800ae64:	189b      	adds	r3, r3, r2
 800ae66:	4a8d      	ldr	r2, [pc, #564]	; (800b09c <PxMessagingTask+0x1054>)
 800ae68:	6313      	str	r3, [r2, #48]	; 0x30
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800ae6a:	7aa3      	ldrb	r3, [r4, #10]
 800ae6c:	7ae2      	ldrb	r2, [r4, #11]
 800ae6e:	021b      	lsls	r3, r3, #8
 800ae70:	0412      	lsls	r2, r2, #16
 800ae72:	189b      	adds	r3, r3, r2
 800ae74:	7a62      	ldrb	r2, [r4, #9]
 800ae76:	189b      	adds	r3, r3, r2
 800ae78:	7b22      	ldrb	r2, [r4, #12]
 800ae7a:	0612      	lsls	r2, r2, #24
 800ae7c:	189b      	adds	r3, r3, r2
 800ae7e:	4a87      	ldr	r2, [pc, #540]	; (800b09c <PxMessagingTask+0x1054>)
 800ae80:	6353      	str	r3, [r2, #52]	; 0x34
									break;
 800ae82:	f7ff f9f0 	bl	800a266 <PxMessagingTask+0x21e>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800ae86:	2313      	movs	r3, #19
 800ae88:	4a81      	ldr	r2, [pc, #516]	; (800b090 <PxMessagingTask+0x1048>)
 800ae8a:	7013      	strb	r3, [r2, #0]
 800ae8c:	e75a      	b.n	800ad44 <PxMessagingTask+0xcfc>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800ae8e:	9b05      	ldr	r3, [sp, #20]
 800ae90:	191b      	adds	r3, r3, r4
 800ae92:	789e      	ldrb	r6, [r3, #2]
 800ae94:	78da      	ldrb	r2, [r3, #3]
 800ae96:	0636      	lsls	r6, r6, #24
 800ae98:	0412      	lsls	r2, r2, #16
 800ae9a:	18b6      	adds	r6, r6, r2
 800ae9c:	795a      	ldrb	r2, [r3, #5]
 800ae9e:	18b6      	adds	r6, r6, r2
 800aea0:	791a      	ldrb	r2, [r3, #4]
 800aea2:	0212      	lsls	r2, r2, #8
 800aea4:	18b6      	adds	r6, r6, r2
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800aea6:	22e0      	movs	r2, #224	; 0xe0
 800aea8:	0612      	lsls	r2, r2, #24
 800aeaa:	18b1      	adds	r1, r6, r2
 800aeac:	4a7c      	ldr	r2, [pc, #496]	; (800b0a0 <PxMessagingTask+0x1058>)
 800aeae:	4291      	cmp	r1, r2
 800aeb0:	d900      	bls.n	800aeb4 <PxMessagingTask+0xe6c>
 800aeb2:	e08b      	b.n	800afcc <PxMessagingTask+0xf84>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800aeb4:	785b      	ldrb	r3, [r3, #1]
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b07      	cmp	r3, #7
 800aebc:	d900      	bls.n	800aec0 <PxMessagingTask+0xe78>
 800aebe:	e741      	b.n	800ad44 <PxMessagingTask+0xcfc>
 800aec0:	4a78      	ldr	r2, [pc, #480]	; (800b0a4 <PxMessagingTask+0x105c>)
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	58d3      	ldr	r3, [r2, r3]
 800aec6:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800aec8:	9b05      	ldr	r3, [sp, #20]
 800aeca:	469c      	mov	ip, r3
 800aecc:	4464      	add	r4, ip
 800aece:	78a3      	ldrb	r3, [r4, #2]
 800aed0:	78e2      	ldrb	r2, [r4, #3]
 800aed2:	021b      	lsls	r3, r3, #8
 800aed4:	0412      	lsls	r2, r2, #16
 800aed6:	189b      	adds	r3, r3, r2
 800aed8:	7862      	ldrb	r2, [r4, #1]
 800aeda:	189b      	adds	r3, r3, r2
 800aedc:	7922      	ldrb	r2, [r4, #4]
 800aede:	0612      	lsls	r2, r2, #24
 800aee0:	189b      	adds	r3, r3, r2
 800aee2:	4a6e      	ldr	r2, [pc, #440]	; (800b09c <PxMessagingTask+0x1054>)
 800aee4:	6213      	str	r3, [r2, #32]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800aee6:	79a3      	ldrb	r3, [r4, #6]
 800aee8:	79e2      	ldrb	r2, [r4, #7]
 800aeea:	021b      	lsls	r3, r3, #8
 800aeec:	0412      	lsls	r2, r2, #16
 800aeee:	189b      	adds	r3, r3, r2
 800aef0:	7962      	ldrb	r2, [r4, #5]
 800aef2:	189b      	adds	r3, r3, r2
 800aef4:	7a22      	ldrb	r2, [r4, #8]
 800aef6:	0612      	lsls	r2, r2, #24
 800aef8:	189b      	adds	r3, r3, r2
 800aefa:	4a68      	ldr	r2, [pc, #416]	; (800b09c <PxMessagingTask+0x1054>)
 800aefc:	6253      	str	r3, [r2, #36]	; 0x24
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800aefe:	7aa3      	ldrb	r3, [r4, #10]
 800af00:	7ae2      	ldrb	r2, [r4, #11]
 800af02:	021b      	lsls	r3, r3, #8
 800af04:	0412      	lsls	r2, r2, #16
 800af06:	189b      	adds	r3, r3, r2
 800af08:	7a62      	ldrb	r2, [r4, #9]
 800af0a:	189b      	adds	r3, r3, r2
 800af0c:	7b22      	ldrb	r2, [r4, #12]
 800af0e:	0612      	lsls	r2, r2, #24
 800af10:	189b      	adds	r3, r3, r2
 800af12:	4a62      	ldr	r2, [pc, #392]	; (800b09c <PxMessagingTask+0x1054>)
 800af14:	6293      	str	r3, [r2, #40]	; 0x28
									break;
 800af16:	f7ff f9a6 	bl	800a266 <PxMessagingTask+0x21e>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800af1a:	2004      	movs	r0, #4
 800af1c:	f007 fc72 	bl	8012804 <malloc>
												if(temp32 != 0){
 800af20:	2800      	cmp	r0, #0
 800af22:	d100      	bne.n	800af26 <PxMessagingTask+0xede>
 800af24:	e742      	b.n	800adac <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800af26:	0403      	lsls	r3, r0, #16
 800af28:	4a57      	ldr	r2, [pc, #348]	; (800b088 <PxMessagingTask+0x1040>)
 800af2a:	3307      	adds	r3, #7
 800af2c:	5193      	str	r3, [r2, r6]
 800af2e:	e76e      	b.n	800ae0e <PxMessagingTask+0xdc6>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800af30:	9b05      	ldr	r3, [sp, #20]
 800af32:	469c      	mov	ip, r3
 800af34:	4464      	add	r4, ip
 800af36:	79e3      	ldrb	r3, [r4, #7]
 800af38:	79a2      	ldrb	r2, [r4, #6]
 800af3a:	021b      	lsls	r3, r3, #8
 800af3c:	189b      	adds	r3, r3, r2
 800af3e:	7a22      	ldrb	r2, [r4, #8]
 800af40:	0412      	lsls	r2, r2, #16
 800af42:	189b      	adds	r3, r3, r2
 800af44:	7a62      	ldrb	r2, [r4, #9]
 800af46:	0612      	lsls	r2, r2, #24
 800af48:	189b      	adds	r3, r3, r2
 800af4a:	6033      	str	r3, [r6, #0]
											break;
 800af4c:	e6fa      	b.n	800ad44 <PxMessagingTask+0xcfc>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800af4e:	9b05      	ldr	r3, [sp, #20]
 800af50:	469c      	mov	ip, r3
 800af52:	4464      	add	r4, ip
 800af54:	79e3      	ldrb	r3, [r4, #7]
 800af56:	7a22      	ldrb	r2, [r4, #8]
 800af58:	021b      	lsls	r3, r3, #8
 800af5a:	0412      	lsls	r2, r2, #16
 800af5c:	189b      	adds	r3, r3, r2
 800af5e:	79a2      	ldrb	r2, [r4, #6]
 800af60:	e7ef      	b.n	800af42 <PxMessagingTask+0xefa>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800af62:	9b05      	ldr	r3, [sp, #20]
 800af64:	469c      	mov	ip, r3
 800af66:	4464      	add	r4, ip
 800af68:	79e2      	ldrb	r2, [r4, #7]
 800af6a:	79a3      	ldrb	r3, [r4, #6]
 800af6c:	0212      	lsls	r2, r2, #8
 800af6e:	189b      	adds	r3, r3, r2
 800af70:	b21b      	sxth	r3, r3
 800af72:	8033      	strh	r3, [r6, #0]
											break;
 800af74:	e6e6      	b.n	800ad44 <PxMessagingTask+0xcfc>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800af76:	9b05      	ldr	r3, [sp, #20]
 800af78:	469c      	mov	ip, r3
 800af7a:	4464      	add	r4, ip
 800af7c:	79e2      	ldrb	r2, [r4, #7]
 800af7e:	79a3      	ldrb	r3, [r4, #6]
 800af80:	0212      	lsls	r2, r2, #8
 800af82:	189b      	adds	r3, r3, r2
 800af84:	b29b      	uxth	r3, r3
 800af86:	8033      	strh	r3, [r6, #0]
											break;
 800af88:	e6dc      	b.n	800ad44 <PxMessagingTask+0xcfc>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800af8a:	9b05      	ldr	r3, [sp, #20]
 800af8c:	469c      	mov	ip, r3
 800af8e:	2306      	movs	r3, #6
 800af90:	4464      	add	r4, ip
 800af92:	56e3      	ldrsb	r3, [r4, r3]
 800af94:	7033      	strb	r3, [r6, #0]
											break;
 800af96:	e6d5      	b.n	800ad44 <PxMessagingTask+0xcfc>
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800af98:	9b05      	ldr	r3, [sp, #20]
 800af9a:	469c      	mov	ip, r3
 800af9c:	4464      	add	r4, ip
 800af9e:	79a3      	ldrb	r3, [r4, #6]
 800afa0:	7033      	strb	r3, [r6, #0]
											break;
 800afa2:	e6cf      	b.n	800ad44 <PxMessagingTask+0xcfc>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800afa4:	9b05      	ldr	r3, [sp, #20]
 800afa6:	4649      	mov	r1, r9
 800afa8:	469c      	mov	ip, r3
 800afaa:	4464      	add	r4, ip
 800afac:	79e3      	ldrb	r3, [r4, #7]
 800afae:	7a22      	ldrb	r2, [r4, #8]
 800afb0:	021b      	lsls	r3, r3, #8
 800afb2:	0412      	lsls	r2, r2, #16
 800afb4:	189b      	adds	r3, r3, r2
 800afb6:	79a2      	ldrb	r2, [r4, #6]
 800afb8:	189b      	adds	r3, r3, r2
 800afba:	7a62      	ldrb	r2, [r4, #9]
 800afbc:	0612      	lsls	r2, r2, #24
 800afbe:	189b      	adds	r3, r3, r2
 800afc0:	464a      	mov	r2, r9
 800afc2:	6013      	str	r3, [r2, #0]
 800afc4:	2200      	movs	r2, #0
 800afc6:	604a      	str	r2, [r1, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800afc8:	6033      	str	r3, [r6, #0]
											break;
 800afca:	e6bb      	b.n	800ad44 <PxMessagingTask+0xcfc>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800afcc:	23f8      	movs	r3, #248	; 0xf8
 800afce:	4a36      	ldr	r2, [pc, #216]	; (800b0a8 <PxMessagingTask+0x1060>)
 800afd0:	061b      	lsls	r3, r3, #24
 800afd2:	18f3      	adds	r3, r6, r3
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d910      	bls.n	800affa <PxMessagingTask+0xfb2>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800afd8:	2215      	movs	r2, #21
 800afda:	4b2d      	ldr	r3, [pc, #180]	; (800b090 <PxMessagingTask+0x1048>)
 800afdc:	701a      	strb	r2, [r3, #0]
 800afde:	e6b1      	b.n	800ad44 <PxMessagingTask+0xcfc>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800afe0:	230a      	movs	r3, #10
 800afe2:	4932      	ldr	r1, [pc, #200]	; (800b0ac <PxMessagingTask+0x1064>)
 800afe4:	9a04      	ldr	r2, [sp, #16]
 800afe6:	468c      	mov	ip, r1
 800afe8:	4353      	muls	r3, r2
 800afea:	4831      	ldr	r0, [pc, #196]	; (800b0b0 <PxMessagingTask+0x1068>)
 800afec:	4463      	add	r3, ip
 800afee:	4931      	ldr	r1, [pc, #196]	; (800b0b4 <PxMessagingTask+0x106c>)
 800aff0:	301c      	adds	r0, #28
 800aff2:	f008 f857 	bl	80130a4 <sprintf>
 800aff6:	f7ff fa6c 	bl	800a4d2 <PxMessagingTask+0x48a>
									HAL_FLASH_Unlock();
 800affa:	f005 fc11 	bl	8010820 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800affe:	9b08      	ldr	r3, [sp, #32]
 800b000:	2b22      	cmp	r3, #34	; 0x22
 800b002:	d100      	bne.n	800b006 <PxMessagingTask+0xfbe>
 800b004:	e094      	b.n	800b130 <PxMessagingTask+0x10e8>
									if(responseStatus == BOS_OK){
 800b006:	4b22      	ldr	r3, [pc, #136]	; (800b090 <PxMessagingTask+0x1048>)
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d15c      	bne.n	800b0c8 <PxMessagingTask+0x1080>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800b00e:	9b05      	ldr	r3, [sp, #20]
 800b010:	191b      	adds	r3, r3, r4
 800b012:	785b      	ldrb	r3, [r3, #1]
 800b014:	3b01      	subs	r3, #1
 800b016:	b2db      	uxtb	r3, r3
 800b018:	2b07      	cmp	r3, #7
 800b01a:	d855      	bhi.n	800b0c8 <PxMessagingTask+0x1080>
 800b01c:	4a26      	ldr	r2, [pc, #152]	; (800b0b8 <PxMessagingTask+0x1070>)
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	58d3      	ldr	r3, [r2, r3]
 800b022:	469f      	mov	pc, r3
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b024:	2b00      	cmp	r3, #0
 800b026:	d018      	beq.n	800b05a <PxMessagingTask+0x1012>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800b028:	9b05      	ldr	r3, [sp, #20]
 800b02a:	191a      	adds	r2, r3, r4
 800b02c:	78d3      	ldrb	r3, [r2, #3]
 800b02e:	7891      	ldrb	r1, [r2, #2]
 800b030:	021b      	lsls	r3, r3, #8
 800b032:	185b      	adds	r3, r3, r1
 800b034:	7911      	ldrb	r1, [r2, #4]
 800b036:	0409      	lsls	r1, r1, #16
 800b038:	7952      	ldrb	r2, [r2, #5]
 800b03a:	185b      	adds	r3, r3, r1
 800b03c:	0612      	lsls	r2, r2, #24
 800b03e:	189b      	adds	r3, r3, r2
 800b040:	6003      	str	r3, [r0, #0]
 800b042:	e66a      	b.n	800ad1a <PxMessagingTask+0xcd2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b044:	2b00      	cmp	r3, #0
 800b046:	d013      	beq.n	800b070 <PxMessagingTask+0x1028>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b048:	9b05      	ldr	r3, [sp, #20]
 800b04a:	191a      	adds	r2, r3, r4
 800b04c:	78d3      	ldrb	r3, [r2, #3]
 800b04e:	7911      	ldrb	r1, [r2, #4]
 800b050:	021b      	lsls	r3, r3, #8
 800b052:	0409      	lsls	r1, r1, #16
 800b054:	185b      	adds	r3, r3, r1
 800b056:	7891      	ldrb	r1, [r2, #2]
 800b058:	e7ee      	b.n	800b038 <PxMessagingTask+0xff0>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800b05a:	2004      	movs	r0, #4
 800b05c:	f007 fbd2 	bl	8012804 <malloc>
												if(temp32 != 0){
 800b060:	2800      	cmp	r0, #0
 800b062:	d100      	bne.n	800b066 <PxMessagingTask+0x101e>
 800b064:	e6a2      	b.n	800adac <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b066:	0403      	lsls	r3, r0, #16
 800b068:	4a07      	ldr	r2, [pc, #28]	; (800b088 <PxMessagingTask+0x1040>)
 800b06a:	3306      	adds	r3, #6
 800b06c:	5193      	str	r3, [r2, r6]
 800b06e:	e7db      	b.n	800b028 <PxMessagingTask+0xfe0>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800b070:	2004      	movs	r0, #4
 800b072:	f007 fbc7 	bl	8012804 <malloc>
												if(temp32 != 0){
 800b076:	2800      	cmp	r0, #0
 800b078:	d100      	bne.n	800b07c <PxMessagingTask+0x1034>
 800b07a:	e697      	b.n	800adac <PxMessagingTask+0xd64>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b07c:	0403      	lsls	r3, r0, #16
 800b07e:	4a02      	ldr	r2, [pc, #8]	; (800b088 <PxMessagingTask+0x1040>)
 800b080:	3305      	adds	r3, #5
 800b082:	5193      	str	r3, [r2, r6]
 800b084:	e7e0      	b.n	800b048 <PxMessagingTask+0x1000>
 800b086:	46c0      	nop			; (mov r8, r8)
 800b088:	20006e30 	.word	0x20006e30
 800b08c:	0000fff0 	.word	0x0000fff0
 800b090:	20000c3c 	.word	0x20000c3c
 800b094:	20006e28 	.word	0x20006e28
 800b098:	08018648 	.word	0x08018648
 800b09c:	20001a58 	.word	0x20001a58
 800b0a0:	00007fff 	.word	0x00007fff
 800b0a4:	08017a48 	.word	0x08017a48
 800b0a8:	0001ffff 	.word	0x0001ffff
 800b0ac:	20000dfc 	.word	0x20000dfc
 800b0b0:	200019d8 	.word	0x200019d8
 800b0b4:	08019138 	.word	0x08019138
 800b0b8:	08017a68 	.word	0x08017a68
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b0bc:	6833      	ldr	r3, [r6, #0]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	d00c      	beq.n	800b0dc <PxMessagingTask+0x1094>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b0c2:	2316      	movs	r3, #22
 800b0c4:	4ad6      	ldr	r2, [pc, #856]	; (800b420 <PxMessagingTask+0x13d8>)
 800b0c6:	7013      	strb	r3, [r2, #0]
									HAL_FLASH_Lock();
 800b0c8:	f005 fbbc 	bl	8010844 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800b0cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d100      	bne.n	800b0d4 <PxMessagingTask+0x108c>
 800b0d2:	e637      	b.n	800ad44 <PxMessagingTask+0xcfc>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b0d4:	2316      	movs	r3, #22
 800b0d6:	4ad2      	ldr	r2, [pc, #840]	; (800b420 <PxMessagingTask+0x13d8>)
 800b0d8:	7013      	strb	r3, [r2, #0]
 800b0da:	e633      	b.n	800ad44 <PxMessagingTask+0xcfc>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b0dc:	9b05      	ldr	r3, [sp, #20]
 800b0de:	4649      	mov	r1, r9
 800b0e0:	469c      	mov	ip, r3
 800b0e2:	4464      	add	r4, ip
 800b0e4:	79e2      	ldrb	r2, [r4, #7]
 800b0e6:	7a23      	ldrb	r3, [r4, #8]
 800b0e8:	0212      	lsls	r2, r2, #8
 800b0ea:	041b      	lsls	r3, r3, #16
 800b0ec:	18d2      	adds	r2, r2, r3
 800b0ee:	79a3      	ldrb	r3, [r4, #6]
													status =HAL_FLASH_Program(
 800b0f0:	2002      	movs	r0, #2
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b0f2:	18d2      	adds	r2, r2, r3
 800b0f4:	7a63      	ldrb	r3, [r4, #9]
 800b0f6:	061b      	lsls	r3, r3, #24
 800b0f8:	18d2      	adds	r2, r2, r3
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800b0fe:	0031      	movs	r1, r6
 800b100:	f005 fbee 	bl	80108e0 <HAL_FLASH_Program>
 800b104:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800b106:	e7df      	b.n	800b0c8 <PxMessagingTask+0x1080>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b108:	8832      	ldrh	r2, [r6, #0]
 800b10a:	4bc6      	ldr	r3, [pc, #792]	; (800b424 <PxMessagingTask+0x13dc>)
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d1d8      	bne.n	800b0c2 <PxMessagingTask+0x107a>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b110:	9b05      	ldr	r3, [sp, #20]
 800b112:	469c      	mov	ip, r3
 800b114:	4464      	add	r4, ip
 800b116:	79e2      	ldrb	r2, [r4, #7]
 800b118:	79a3      	ldrb	r3, [r4, #6]
 800b11a:	0212      	lsls	r2, r2, #8
 800b11c:	18d2      	adds	r2, r2, r3
 800b11e:	17d3      	asrs	r3, r2, #31
 800b120:	4649      	mov	r1, r9
													status =HAL_FLASH_Program(
 800b122:	2001      	movs	r0, #1
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b124:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800b126:	0031      	movs	r1, r6
 800b128:	f005 fbda 	bl	80108e0 <HAL_FLASH_Program>
 800b12c:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800b12e:	e7cb      	b.n	800b0c8 <PxMessagingTask+0x1080>
										erase.NbPages =1;
 800b130:	3b21      	subs	r3, #33	; 0x21
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b132:	a918      	add	r1, sp, #96	; 0x60
 800b134:	a819      	add	r0, sp, #100	; 0x64
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b136:	9719      	str	r7, [sp, #100]	; 0x64
										erase.PageAddress =temp32;
 800b138:	961a      	str	r6, [sp, #104]	; 0x68
										erase.NbPages =1;
 800b13a:	931b      	str	r3, [sp, #108]	; 0x6c
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b13c:	f005 fc34 	bl	80109a8 <HAL_FLASHEx_Erase>
 800b140:	900f      	str	r0, [sp, #60]	; 0x3c
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b142:	2800      	cmp	r0, #0
 800b144:	d103      	bne.n	800b14e <PxMessagingTask+0x1106>
 800b146:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b148:	3301      	adds	r3, #1
 800b14a:	d100      	bne.n	800b14e <PxMessagingTask+0x1106>
 800b14c:	e75b      	b.n	800b006 <PxMessagingTask+0xfbe>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b14e:	2316      	movs	r3, #22
 800b150:	4ab3      	ldr	r2, [pc, #716]	; (800b420 <PxMessagingTask+0x13d8>)
 800b152:	7013      	strb	r3, [r2, #0]
 800b154:	e757      	b.n	800b006 <PxMessagingTask+0xfbe>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b156:	8832      	ldrh	r2, [r6, #0]
 800b158:	4bb2      	ldr	r3, [pc, #712]	; (800b424 <PxMessagingTask+0x13dc>)
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d1b1      	bne.n	800b0c2 <PxMessagingTask+0x107a>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800b15e:	9b05      	ldr	r3, [sp, #20]
 800b160:	469c      	mov	ip, r3
 800b162:	4464      	add	r4, ip
 800b164:	79a2      	ldrb	r2, [r4, #6]
 800b166:	2300      	movs	r3, #0
 800b168:	e7da      	b.n	800b120 <PxMessagingTask+0x10d8>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b16a:	6833      	ldr	r3, [r6, #0]
 800b16c:	3301      	adds	r3, #1
 800b16e:	d1a8      	bne.n	800b0c2 <PxMessagingTask+0x107a>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b170:	9b05      	ldr	r3, [sp, #20]
 800b172:	4649      	mov	r1, r9
 800b174:	469c      	mov	ip, r3
 800b176:	4464      	add	r4, ip
 800b178:	79e2      	ldrb	r2, [r4, #7]
 800b17a:	7a23      	ldrb	r3, [r4, #8]
 800b17c:	0212      	lsls	r2, r2, #8
 800b17e:	041b      	lsls	r3, r3, #16
 800b180:	18d2      	adds	r2, r2, r3
 800b182:	79a3      	ldrb	r3, [r4, #6]
													status =HAL_FLASH_Program(
 800b184:	2003      	movs	r0, #3
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b186:	18d2      	adds	r2, r2, r3
 800b188:	7a63      	ldrb	r3, [r4, #9]
 800b18a:	061b      	lsls	r3, r3, #24
 800b18c:	18d2      	adds	r2, r2, r3
 800b18e:	2300      	movs	r3, #0
 800b190:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800b192:	0031      	movs	r1, r6
 800b194:	f005 fba4 	bl	80108e0 <HAL_FLASH_Program>
 800b198:	900f      	str	r0, [sp, #60]	; 0x3c
													break;
 800b19a:	e795      	b.n	800b0c8 <PxMessagingTask+0x1080>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800b19c:	2338      	movs	r3, #56	; 0x38
 800b19e:	435d      	muls	r5, r3
 800b1a0:	445d      	add	r5, fp
 800b1a2:	192e      	adds	r6, r5, r4
 800b1a4:	7a31      	ldrb	r1, [r6, #8]
 800b1a6:	20e4      	movs	r0, #228	; 0xe4
 800b1a8:	f7fc fb7c 	bl	80078a4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800b1ac:	9a07      	ldr	r2, [sp, #28]
 800b1ae:	5d2b      	ldrb	r3, [r5, r4]
 800b1b0:	5ca9      	ldrb	r1, [r5, r2]
 800b1b2:	021b      	lsls	r3, r3, #8
 800b1b4:	18c9      	adds	r1, r1, r3
 800b1b6:	b289      	uxth	r1, r1
 800b1b8:	20e5      	movs	r0, #229	; 0xe5
 800b1ba:	f7fc fb73 	bl	80078a4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800b1be:	9b08      	ldr	r3, [sp, #32]
 800b1c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1c2:	5ceb      	ldrb	r3, [r5, r3]
 800b1c4:	5ca9      	ldrb	r1, [r5, r2]
 800b1c6:	021b      	lsls	r3, r3, #8
 800b1c8:	18c9      	adds	r1, r1, r3
 800b1ca:	b289      	uxth	r1, r1
 800b1cc:	20e6      	movs	r0, #230	; 0xe6
 800b1ce:	f7fc fb69 	bl	80078a4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800b1d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1d6:	5ceb      	ldrb	r3, [r5, r3]
 800b1d8:	5ca9      	ldrb	r1, [r5, r2]
 800b1da:	021b      	lsls	r3, r3, #8
 800b1dc:	18c9      	adds	r1, r1, r3
 800b1de:	b289      	uxth	r1, r1
 800b1e0:	20e7      	movs	r0, #231	; 0xe7
 800b1e2:	f7fc fb5f 	bl	80078a4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800b1e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b1e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1ea:	5ceb      	ldrb	r3, [r5, r3]
 800b1ec:	5ca9      	ldrb	r1, [r5, r2]
 800b1ee:	021b      	lsls	r3, r3, #8
 800b1f0:	18c9      	adds	r1, r1, r3
 800b1f2:	b289      	uxth	r1, r1
 800b1f4:	20e8      	movs	r0, #232	; 0xe8
 800b1f6:	f7fc fb55 	bl	80078a4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800b1fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1fc:	7ab1      	ldrb	r1, [r6, #10]
 800b1fe:	5ceb      	ldrb	r3, [r5, r3]
 800b200:	20e9      	movs	r0, #233	; 0xe9
 800b202:	021b      	lsls	r3, r3, #8
 800b204:	18c9      	adds	r1, r1, r3
 800b206:	b289      	uxth	r1, r1
 800b208:	f7fc fb4c 	bl	80078a4 <EE_WriteVariable>
								if(numOfParams == 19)
 800b20c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b20e:	2b13      	cmp	r3, #19
 800b210:	d013      	beq.n	800b23a <PxMessagingTask+0x11f2>
								if(numOfParams == 21)
 800b212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b214:	2b15      	cmp	r3, #21
 800b216:	d107      	bne.n	800b228 <PxMessagingTask+0x11e0>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800b218:	7b73      	ldrb	r3, [r6, #13]
 800b21a:	7bb1      	ldrb	r1, [r6, #14]
 800b21c:	021b      	lsls	r3, r3, #8
 800b21e:	18c9      	adds	r1, r1, r3
 800b220:	b289      	uxth	r1, r1
 800b222:	20eb      	movs	r0, #235	; 0xeb
 800b224:	f7fc fb3e 	bl	80078a4 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	4b7e      	ldr	r3, [pc, #504]	; (800b428 <PxMessagingTask+0x13e0>)
 800b22e:	4a7f      	ldr	r2, [pc, #508]	; (800b42c <PxMessagingTask+0x13e4>)
 800b230:	60da      	str	r2, [r3, #12]
 800b232:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800b236:	46c0      	nop			; (mov r8, r8)
 800b238:	e7fd      	b.n	800b236 <PxMessagingTask+0x11ee>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800b23a:	9b04      	ldr	r3, [sp, #16]
 800b23c:	7b31      	ldrb	r1, [r6, #12]
 800b23e:	5ceb      	ldrb	r3, [r5, r3]
 800b240:	20ea      	movs	r0, #234	; 0xea
 800b242:	021b      	lsls	r3, r3, #8
 800b244:	18c9      	adds	r1, r1, r3
 800b246:	b289      	uxth	r1, r1
 800b248:	f7fc fb2c 	bl	80078a4 <EE_WriteVariable>
 800b24c:	e7ec      	b.n	800b228 <PxMessagingTask+0x11e0>
								temp =cMessage[port - 1][15 + shift];
 800b24e:	9a05      	ldr	r2, [sp, #20]
 800b250:	1912      	adds	r2, r2, r4
 800b252:	7bd1      	ldrb	r1, [r2, #15]
 800b254:	f7ff fae0 	bl	800a818 <PxMessagingTask+0x7d0>
 800b258:	2700      	movs	r7, #0
 800b25a:	f7fe ff9f 	bl	800a19c <PxMessagingTask+0x154>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800b25e:	2a01      	cmp	r2, #1
 800b260:	d901      	bls.n	800b266 <PxMessagingTask+0x121e>
 800b262:	f7ff fb8d 	bl	800a980 <PxMessagingTask+0x938>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800b266:	9b05      	ldr	r3, [sp, #20]
 800b268:	4a71      	ldr	r2, [pc, #452]	; (800b430 <PxMessagingTask+0x13e8>)
 800b26a:	5d1b      	ldrb	r3, [r3, r4]
 800b26c:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800b26e:	2b08      	cmp	r3, #8
 800b270:	d901      	bls.n	800b276 <PxMessagingTask+0x122e>
 800b272:	f7ff fb85 	bl	800a980 <PxMessagingTask+0x938>
 800b276:	4a6f      	ldr	r2, [pc, #444]	; (800b434 <PxMessagingTask+0x13ec>)
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	58d3      	ldr	r3, [r2, r3]
 800b27c:	469f      	mov	pc, r3
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800b27e:	4651      	mov	r1, sl
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	0a12      	lsrs	r2, r2, #8
 800b288:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	0c12      	lsrs	r2, r2, #16
 800b28e:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800b290:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 800b292:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800b294:	0e1b      	lsrs	r3, r3, #24
 800b296:	710b      	strb	r3, [r1, #4]
 800b298:	e45b      	b.n	800ab52 <PxMessagingTask+0xb0a>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800b29a:	4651      	mov	r1, sl
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	1212      	asrs	r2, r2, #8
 800b2a4:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	1412      	asrs	r2, r2, #16
 800b2aa:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800b2ac:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 800b2ae:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800b2b0:	161b      	asrs	r3, r3, #24
 800b2b2:	710b      	strb	r3, [r1, #4]
 800b2b4:	e44d      	b.n	800ab52 <PxMessagingTask+0xb0a>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800b2b6:	4651      	mov	r1, sl
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	704b      	strb	r3, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800b2bc:	4b5e      	ldr	r3, [pc, #376]	; (800b438 <PxMessagingTask+0x13f0>)
 800b2be:	18d3      	adds	r3, r2, r3
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	708b      	strb	r3, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800b2c4:	4b5d      	ldr	r3, [pc, #372]	; (800b43c <PxMessagingTask+0x13f4>)
 800b2c6:	18d3      	adds	r3, r2, r3
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	70cb      	strb	r3, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b2cc:	4b5c      	ldr	r3, [pc, #368]	; (800b440 <PxMessagingTask+0x13f8>)
 800b2ce:	469c      	mov	ip, r3
 800b2d0:	4462      	add	r2, ip
 800b2d2:	7813      	ldrb	r3, [r2, #0]
											SendMessageToModule(src,
 800b2d4:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b2d6:	710b      	strb	r3, [r1, #4]
 800b2d8:	e43b      	b.n	800ab52 <PxMessagingTask+0xb0a>
									SendMessageToModule(src,
 800b2da:	2201      	movs	r2, #1
 800b2dc:	211f      	movs	r1, #31
 800b2de:	9804      	ldr	r0, [sp, #16]
 800b2e0:	f7fe fbda 	bl	8009a98 <SendMessageToModule>
 800b2e4:	4643      	mov	r3, r8
 800b2e6:	5d5e      	ldrb	r6, [r3, r5]
 800b2e8:	f7fe ff58 	bl	800a19c <PxMessagingTask+0x154>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b2ec:	9b05      	ldr	r3, [sp, #20]
 800b2ee:	2700      	movs	r7, #0
 800b2f0:	469c      	mov	ip, r3
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b2f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b2f4:	4466      	add	r6, ip
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b2f6:	469c      	mov	ip, r3
 800b2f8:	1c60      	adds	r0, r4, #1
 800b2fa:	4460      	add	r0, ip
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b2fc:	3e01      	subs	r6, #1
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b2fe:	4458      	add	r0, fp
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800b300:	7037      	strb	r7, [r6, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800b302:	f7f8 fa05 	bl	8003710 <IsModuleParameter>
 800b306:	9009      	str	r0, [sp, #36]	; 0x24
								if(temp == 0){ // Parameter does not exist
 800b308:	42b8      	cmp	r0, r7
 800b30a:	d03a      	beq.n	800b382 <PxMessagingTask+0x133a>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b30c:	220c      	movs	r2, #12
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b30e:	494d      	ldr	r1, [pc, #308]	; (800b444 <PxMessagingTask+0x13fc>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b310:	9b09      	ldr	r3, [sp, #36]	; 0x24
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b312:	468c      	mov	ip, r1
 800b314:	4651      	mov	r1, sl
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800b316:	3b01      	subs	r3, #1
 800b318:	435a      	muls	r2, r3
 800b31a:	4b4a      	ldr	r3, [pc, #296]	; (800b444 <PxMessagingTask+0x13fc>)
 800b31c:	589b      	ldr	r3, [r3, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800b31e:	4462      	add	r2, ip
 800b320:	7912      	ldrb	r2, [r2, #4]
 800b322:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800b324:	3a01      	subs	r2, #1
 800b326:	b2d2      	uxtb	r2, r2
 800b328:	2a07      	cmp	r2, #7
 800b32a:	d901      	bls.n	800b330 <PxMessagingTask+0x12e8>
 800b32c:	f7fe ffb9 	bl	800a2a2 <PxMessagingTask+0x25a>
 800b330:	4945      	ldr	r1, [pc, #276]	; (800b448 <PxMessagingTask+0x1400>)
 800b332:	0092      	lsls	r2, r2, #2
 800b334:	588a      	ldr	r2, [r1, r2]
 800b336:	4697      	mov	pc, r2
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800b338:	4651      	mov	r1, sl
 800b33a:	881a      	ldrh	r2, [r3, #0]
 800b33c:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800b33e:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 800b340:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800b342:	0a1b      	lsrs	r3, r3, #8
 800b344:	708b      	strb	r3, [r1, #2]
 800b346:	f7ff fc04 	bl	800ab52 <PxMessagingTask+0xb0a>
											messageParams[1] =*(__IO uint8_t* )temp32;
 800b34a:	4652      	mov	r2, sl
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 800b350:	2202      	movs	r2, #2
 800b352:	f7ff fbfe 	bl	800ab52 <PxMessagingTask+0xb0a>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800b356:	4651      	mov	r1, sl
 800b358:	881a      	ldrh	r2, [r3, #0]
 800b35a:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800b35c:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 800b35e:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800b360:	b21b      	sxth	r3, r3
 800b362:	121b      	asrs	r3, r3, #8
 800b364:	708b      	strb	r3, [r1, #2]
 800b366:	f7ff fbf4 	bl	800ab52 <PxMessagingTask+0xb0a>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800b36a:	4651      	mov	r1, sl
 800b36c:	781a      	ldrb	r2, [r3, #0]
 800b36e:	704a      	strb	r2, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800b370:	785a      	ldrb	r2, [r3, #1]
 800b372:	708a      	strb	r2, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800b374:	789a      	ldrb	r2, [r3, #2]
 800b376:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b378:	78db      	ldrb	r3, [r3, #3]
											SendMessageToModule(src,
 800b37a:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800b37c:	710b      	strb	r3, [r1, #4]
 800b37e:	f7ff fbe8 	bl	800ab52 <PxMessagingTask+0xb0a>
									SendMessageToModule(src,
 800b382:	2201      	movs	r2, #1
 800b384:	211f      	movs	r1, #31
 800b386:	9804      	ldr	r0, [sp, #16]
 800b388:	f7fe fb86 	bl	8009a98 <SendMessageToModule>
 800b38c:	4643      	mov	r3, r8
 800b38e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b390:	5d5e      	ldrb	r6, [r3, r5]
 800b392:	f7fe ff03 	bl	800a19c <PxMessagingTask+0x154>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800b396:	9b05      	ldr	r3, [sp, #20]
 800b398:	469c      	mov	ip, r3
 800b39a:	4464      	add	r4, ip
 800b39c:	78a3      	ldrb	r3, [r4, #2]
 800b39e:	7862      	ldrb	r2, [r4, #1]
 800b3a0:	021b      	lsls	r3, r3, #8
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b3a2:	189b      	adds	r3, r3, r2
 800b3a4:	464a      	mov	r2, r9
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	17db      	asrs	r3, r3, #31
 800b3aa:	6053      	str	r3, [r2, #4]
										break;
 800b3ac:	f7ff fae8 	bl	800a980 <PxMessagingTask+0x938>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b3b0:	9b05      	ldr	r3, [sp, #20]
 800b3b2:	469c      	mov	ip, r3
 800b3b4:	4464      	add	r4, ip
 800b3b6:	78a3      	ldrb	r3, [r4, #2]
 800b3b8:	7862      	ldrb	r2, [r4, #1]
 800b3ba:	021b      	lsls	r3, r3, #8
 800b3bc:	189b      	adds	r3, r3, r2
 800b3be:	78e2      	ldrb	r2, [r4, #3]
 800b3c0:	0412      	lsls	r2, r2, #16
 800b3c2:	189b      	adds	r3, r3, r2
 800b3c4:	7922      	ldrb	r2, [r4, #4]
 800b3c6:	0612      	lsls	r2, r2, #24
 800b3c8:	e7eb      	b.n	800b3a2 <PxMessagingTask+0x135a>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800b3ca:	9b05      	ldr	r3, [sp, #20]
 800b3cc:	464a      	mov	r2, r9
 800b3ce:	469c      	mov	ip, r3
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	4464      	add	r4, ip
 800b3d4:	56e3      	ldrsb	r3, [r4, r3]
 800b3d6:	6013      	str	r3, [r2, #0]
 800b3d8:	17db      	asrs	r3, r3, #31
 800b3da:	6053      	str	r3, [r2, #4]
										break;
 800b3dc:	f7ff fad0 	bl	800a980 <PxMessagingTask+0x938>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800b3e0:	9b05      	ldr	r3, [sp, #20]
 800b3e2:	464a      	mov	r2, r9
 800b3e4:	469c      	mov	ip, r3
 800b3e6:	4464      	add	r4, ip
 800b3e8:	7863      	ldrb	r3, [r4, #1]
 800b3ea:	6013      	str	r3, [r2, #0]
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	6053      	str	r3, [r2, #4]
										break;
 800b3f0:	f7ff fac6 	bl	800a980 <PxMessagingTask+0x938>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b3f4:	2310      	movs	r3, #16
 800b3f6:	f7ff f87c 	bl	800a4f2 <PxMessagingTask+0x4aa>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b3fa:	9b05      	ldr	r3, [sp, #20]
 800b3fc:	469c      	mov	ip, r3
 800b3fe:	4464      	add	r4, ip
 800b400:	78a3      	ldrb	r3, [r4, #2]
 800b402:	78e2      	ldrb	r2, [r4, #3]
 800b404:	021b      	lsls	r3, r3, #8
 800b406:	0412      	lsls	r2, r2, #16
 800b408:	189b      	adds	r3, r3, r2
 800b40a:	7862      	ldrb	r2, [r4, #1]
 800b40c:	189b      	adds	r3, r3, r2
 800b40e:	7922      	ldrb	r2, [r4, #4]
 800b410:	0612      	lsls	r2, r2, #24
 800b412:	189b      	adds	r3, r3, r2
 800b414:	464a      	mov	r2, r9
 800b416:	6013      	str	r3, [r2, #0]
 800b418:	2300      	movs	r3, #0
 800b41a:	6053      	str	r3, [r2, #4]
										break;
 800b41c:	f7ff fab0 	bl	800a980 <PxMessagingTask+0x938>
 800b420:	20000c3c 	.word	0x20000c3c
 800b424:	0000ffff 	.word	0x0000ffff
 800b428:	e000ed00 	.word	0xe000ed00
 800b42c:	05fa0004 	.word	0x05fa0004
 800b430:	20000032 	.word	0x20000032
 800b434:	08017a88 	.word	0x08017a88
 800b438:	20000001 	.word	0x20000001
 800b43c:	20000002 	.word	0x20000002
 800b440:	20000003 	.word	0x20000003
 800b444:	20000094 	.word	0x20000094
 800b448:	08017aac 	.word	0x08017aac

0800b44c <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b44c:	2310      	movs	r3, #16
{
 800b44e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b450:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b452:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b454:	2680      	movs	r6, #128	; 0x80
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b456:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b458:	2500      	movs	r5, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b45a:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b45c:	2702      	movs	r7, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b45e:	0276      	lsls	r6, r6, #9
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b460:	035b      	lsls	r3, r3, #13
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b462:	a80d      	add	r0, sp, #52	; 0x34
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b464:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b466:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b468:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b46a:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b46c:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b46e:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b470:	9617      	str	r6, [sp, #92]	; 0x5c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b472:	f005 fccd 	bl	8010e10 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b476:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b478:	2101      	movs	r1, #1
 800b47a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b47c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b47e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b480:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b482:	9703      	str	r7, [sp, #12]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b484:	f005 ff66 	bl	8011354 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800b488:	4b1a      	ldr	r3, [pc, #104]	; (800b4f4 <SystemClock_Config+0xa8>)
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b48a:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800b48c:	9306      	str	r3, [sp, #24]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b48e:	9508      	str	r5, [sp, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b490:	9509      	str	r5, [sp, #36]	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b492:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b494:	f006 f8ea 	bl	801166c <HAL_RCCEx_PeriphCLKConfig>
	
	__HAL_RCC_PWR_CLK_ENABLE();
 800b498:	2180      	movs	r1, #128	; 0x80
 800b49a:	4d17      	ldr	r5, [pc, #92]	; (800b4f8 <SystemClock_Config+0xac>)
 800b49c:	0549      	lsls	r1, r1, #21
 800b49e:	69ea      	ldr	r2, [r5, #28]
 800b4a0:	430a      	orrs	r2, r1
 800b4a2:	61ea      	str	r2, [r5, #28]
 800b4a4:	69eb      	ldr	r3, [r5, #28]
 800b4a6:	400b      	ands	r3, r1
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800b4ac:	f005 fca6 	bl	8010dfc <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b4b0:	23c0      	movs	r3, #192	; 0xc0
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b4b2:	a806      	add	r0, sp, #24
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	9307      	str	r3, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b4b8:	9606      	str	r6, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b4ba:	f006 f8d7 	bl	801166c <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b4be:	f006 f8a7 	bl	8011610 <HAL_RCC_GetHCLKFreq>
 800b4c2:	21fa      	movs	r1, #250	; 0xfa
 800b4c4:	0089      	lsls	r1, r1, #2
 800b4c6:	f7f4 fe43 	bl	8000150 <__udivsi3>
 800b4ca:	f004 fb41 	bl	800fb50 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b4ce:	2004      	movs	r0, #4
 800b4d0:	f004 fb5a 	bl	800fb88 <HAL_SYSTICK_CLKSourceConfig>
	

	__SYSCFG_CLK_ENABLE();

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4d4:	2001      	movs	r0, #1
	__SYSCFG_CLK_ENABLE();
 800b4d6:	69ab      	ldr	r3, [r5, #24]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4d8:	2200      	movs	r2, #0
	__SYSCFG_CLK_ENABLE();
 800b4da:	4323      	orrs	r3, r4
 800b4dc:	61ab      	str	r3, [r5, #24]
 800b4de:	69ab      	ldr	r3, [r5, #24]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4e0:	2100      	movs	r1, #0
	__SYSCFG_CLK_ENABLE();
 800b4e2:	401c      	ands	r4, r3
 800b4e4:	9401      	str	r4, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4e6:	4240      	negs	r0, r0
	__SYSCFG_CLK_ENABLE();
 800b4e8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4ea:	f004 faf1 	bl	800fad0 <HAL_NVIC_SetPriority>
	
}
 800b4ee:	b01b      	add	sp, #108	; 0x6c
 800b4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4f2:	46c0      	nop			; (mov r8, r8)
 800b4f4:	00040003 	.word	0x00040003
 800b4f8:	40021000 	.word	0x40021000

0800b4fc <SaveToRO>:

/* --- Save array topology and Command Snippets in Flash RO --- 
*/
uint8_t SaveToRO(void)
{
 800b4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4fe:	46de      	mov	lr, fp
 800b500:	4657      	mov	r7, sl
 800b502:	464e      	mov	r6, r9
 800b504:	4645      	mov	r5, r8
 800b506:	b5e0      	push	{r5, r6, r7, lr}
 800b508:	b087      	sub	sp, #28
	BOS_Status result = BOS_OK; 
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800b50a:	2215      	movs	r2, #21
 800b50c:	2100      	movs	r1, #0
 800b50e:	4668      	mov	r0, sp
 800b510:	f007 fbce 	bl	8012cb0 <memset>
	
	HAL_FLASH_Unlock();
 800b514:	f005 f984 	bl	8010820 <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800b518:	486a      	ldr	r0, [pc, #424]	; (800b6c4 <SaveToRO+0x1c8>)
 800b51a:	f005 fab1 	bl	8010a80 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b51e:	486a      	ldr	r0, [pc, #424]	; (800b6c8 <SaveToRO+0x1cc>)
 800b520:	f005 f99a 	bl	8010858 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800b524:	2800      	cmp	r0, #0
 800b526:	d16e      	bne.n	800b606 <SaveToRO+0x10a>
		return pFlash.ErrorCode;
	} else {			
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b528:	2202      	movs	r2, #2
 800b52a:	4c68      	ldr	r4, [pc, #416]	; (800b6cc <SaveToRO+0x1d0>)
 800b52c:	6923      	ldr	r3, [r4, #16]
 800b52e:	4393      	bics	r3, r2
 800b530:	6123      	str	r3, [r4, #16]
	}	
	
	/* Save number of modules and myID */
	if (myID)
 800b532:	4b67      	ldr	r3, [pc, #412]	; (800b6d0 <SaveToRO+0x1d4>)
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d000      	beq.n	800b53c <SaveToRO+0x40>
 800b53a:	e06e      	b.n	800b61a <SaveToRO+0x11e>
		}
	}
	
	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b53c:	4b65      	ldr	r3, [pc, #404]	; (800b6d4 <SaveToRO+0x1d8>)
 800b53e:	469a      	mov	sl, r3
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d100      	bne.n	800b548 <SaveToRO+0x4c>
 800b546:	e0b8      	b.n	800b6ba <SaveToRO+0x1be>
 800b548:	4b63      	ldr	r3, [pc, #396]	; (800b6d8 <SaveToRO+0x1dc>)
 800b54a:	2500      	movs	r5, #0
 800b54c:	4c63      	ldr	r4, [pc, #396]	; (800b6dc <SaveToRO+0x1e0>)
 800b54e:	4699      	mov	r9, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
				if (FlashStatus != HAL_OK) {
					return pFlash.ErrorCode;
				} else {
					/* If the program operation is completed, disable the PG Bit */
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b550:	4f5e      	ldr	r7, [pc, #376]	; (800b6cc <SaveToRO+0x1d0>)
 800b552:	e006      	b.n	800b562 <SaveToRO+0x66>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b554:	4653      	mov	r3, sl
 800b556:	3501      	adds	r5, #1
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	b2ed      	uxtb	r5, r5
 800b55c:	42ab      	cmp	r3, r5
 800b55e:	d800      	bhi.n	800b562 <SaveToRO+0x66>
 800b560:	e0ab      	b.n	800b6ba <SaveToRO+0x1be>
		if (snippets[s].cond.conditionType) 
 800b562:	00ab      	lsls	r3, r5, #2
 800b564:	1959      	adds	r1, r3, r5
 800b566:	4698      	mov	r8, r3
 800b568:	464b      	mov	r3, r9
 800b56a:	0089      	lsls	r1, r1, #2
 800b56c:	5c5b      	ldrb	r3, [r3, r1]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d0f0      	beq.n	800b554 <SaveToRO+0x58>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b572:	466b      	mov	r3, sp
 800b574:	22fe      	movs	r2, #254	; 0xfe
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800b576:	1c58      	adds	r0, r3, #1
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b578:	701a      	strb	r2, [r3, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800b57a:	4449      	add	r1, r9
 800b57c:	2214      	movs	r2, #20
 800b57e:	f007 fb8e 	bl	8012c9e <memcpy>
 800b582:	2314      	movs	r3, #20
 800b584:	469b      	mov	fp, r3
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b586:	466b      	mov	r3, sp
 800b588:	44a3      	add	fp, r4
 800b58a:	1b1e      	subs	r6, r3, r4
 800b58c:	465b      	mov	r3, fp
 800b58e:	46ab      	mov	fp, r5
 800b590:	001d      	movs	r5, r3
 800b592:	5b32      	ldrh	r2, [r6, r4]
 800b594:	2300      	movs	r3, #0
 800b596:	0021      	movs	r1, r4
 800b598:	2001      	movs	r0, #1
 800b59a:	f005 f9a1 	bl	80108e0 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b59e:	484a      	ldr	r0, [pc, #296]	; (800b6c8 <SaveToRO+0x1cc>)
 800b5a0:	f005 f95a 	bl	8010858 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d12e      	bne.n	800b606 <SaveToRO+0x10a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	693b      	ldr	r3, [r7, #16]
					currentAdd += 2;
 800b5ac:	3402      	adds	r4, #2
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5ae:	4393      	bics	r3, r2
 800b5b0:	613b      	str	r3, [r7, #16]
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b5b2:	42ac      	cmp	r4, r5
 800b5b4:	d1ed      	bne.n	800b592 <SaveToRO+0x96>
 800b5b6:	465d      	mov	r5, fp
				}				
			}			
			// Copy the snippet commands buffer. Always an even number. Note the string termination char might be skipped
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5b8:	4643      	mov	r3, r8
 800b5ba:	195b      	adds	r3, r3, r5
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	444b      	add	r3, r9
 800b5c0:	2600      	movs	r6, #0
 800b5c2:	4698      	mov	r8, r3
 800b5c4:	0025      	movs	r5, r4
 800b5c6:	e012      	b.n	800b5ee <SaveToRO+0xf2>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800b5c8:	0073      	lsls	r3, r6, #1
 800b5ca:	5ae2      	ldrh	r2, [r4, r3]
 800b5cc:	0029      	movs	r1, r5
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	2001      	movs	r0, #1
 800b5d2:	f005 f985 	bl	80108e0 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b5d6:	483c      	ldr	r0, [pc, #240]	; (800b6c8 <SaveToRO+0x1cc>)
 800b5d8:	f005 f93e 	bl	8010858 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d112      	bne.n	800b606 <SaveToRO+0x10a>
					return pFlash.ErrorCode;
				} else {
					/* If the program operation is completed, disable the PG Bit */
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	693b      	ldr	r3, [r7, #16]
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5e4:	3601      	adds	r6, #1
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5e6:	4393      	bics	r3, r2
 800b5e8:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800b5ea:	3502      	adds	r5, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5ec:	b2f6      	uxtb	r6, r6
 800b5ee:	4643      	mov	r3, r8
 800b5f0:	68dc      	ldr	r4, [r3, #12]
 800b5f2:	0020      	movs	r0, r4
 800b5f4:	f7f4 fd90 	bl	8000118 <strlen>
 800b5f8:	3001      	adds	r0, #1
 800b5fa:	0840      	lsrs	r0, r0, #1
 800b5fc:	4286      	cmp	r6, r0
 800b5fe:	d3e3      	bcc.n	800b5c8 <SaveToRO+0xcc>
 800b600:	002c      	movs	r4, r5
 800b602:	465d      	mov	r5, fp
 800b604:	e7a6      	b.n	800b554 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800b606:	4b36      	ldr	r3, [pc, #216]	; (800b6e0 <SaveToRO+0x1e4>)
 800b608:	69d8      	ldr	r0, [r3, #28]
 800b60a:	b2c0      	uxtb	r0, r0
	}
	
	HAL_FLASH_Lock();
	
	return result;
}
 800b60c:	b007      	add	sp, #28
 800b60e:	bc3c      	pop	{r2, r3, r4, r5}
 800b610:	4690      	mov	r8, r2
 800b612:	4699      	mov	r9, r3
 800b614:	46a2      	mov	sl, r4
 800b616:	46ab      	mov	fp, r5
 800b618:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800b61a:	4a32      	ldr	r2, [pc, #200]	; (800b6e4 <SaveToRO+0x1e8>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b61c:	4929      	ldr	r1, [pc, #164]	; (800b6c4 <SaveToRO+0x1c8>)
		temp = (uint16_t) (N<<8) + myID;
 800b61e:	4693      	mov	fp, r2
 800b620:	7812      	ldrb	r2, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b622:	2001      	movs	r0, #1
		temp = (uint16_t) (N<<8) + myID;
 800b624:	0212      	lsls	r2, r2, #8
 800b626:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b628:	b292      	uxth	r2, r2
 800b62a:	2300      	movs	r3, #0
 800b62c:	f005 f958 	bl	80108e0 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b630:	4825      	ldr	r0, [pc, #148]	; (800b6c8 <SaveToRO+0x1cc>)
 800b632:	f005 f911 	bl	8010858 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800b636:	2800      	cmp	r0, #0
 800b638:	d1e5      	bne.n	800b606 <SaveToRO+0x10a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b63a:	2201      	movs	r2, #1
 800b63c:	6923      	ldr	r3, [r4, #16]
 800b63e:	4393      	bics	r3, r2
 800b640:	6123      	str	r3, [r4, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800b642:	465b      	mov	r3, fp
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d100      	bne.n	800b64c <SaveToRO+0x150>
 800b64a:	e777      	b.n	800b53c <SaveToRO+0x40>
 800b64c:	2301      	movs	r3, #1
 800b64e:	469a      	mov	sl, r3
 800b650:	4b25      	ldr	r3, [pc, #148]	; (800b6e8 <SaveToRO+0x1ec>)
	uint16_t add = 2, temp = 0;
 800b652:	2602      	movs	r6, #2
 800b654:	4699      	mov	r9, r3
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b656:	46a0      	mov	r8, r4
 800b658:	4653      	mov	r3, sl
 800b65a:	1e5d      	subs	r5, r3, #1
 800b65c:	2316      	movs	r3, #22
 800b65e:	464f      	mov	r7, r9
 800b660:	435d      	muls	r5, r3
 800b662:	464b      	mov	r3, r9
 800b664:	3716      	adds	r7, #22
 800b666:	195c      	adds	r4, r3, r5
 800b668:	197f      	adds	r7, r7, r5
 800b66a:	e002      	b.n	800b672 <SaveToRO+0x176>
 800b66c:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b66e:	42a7      	cmp	r7, r4
 800b670:	d01a      	beq.n	800b6a8 <SaveToRO+0x1ac>
				if (array[i-1][0]) {
 800b672:	464b      	mov	r3, r9
 800b674:	5b5b      	ldrh	r3, [r3, r5]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d0f8      	beq.n	800b66c <SaveToRO+0x170>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800b67a:	4b12      	ldr	r3, [pc, #72]	; (800b6c4 <SaveToRO+0x1c8>)
 800b67c:	8822      	ldrh	r2, [r4, #0]
 800b67e:	18f1      	adds	r1, r6, r3
 800b680:	2001      	movs	r0, #1
 800b682:	2300      	movs	r3, #0
 800b684:	f005 f92c 	bl	80108e0 <HAL_FLASH_Program>
					add += 2;
 800b688:	3602      	adds	r6, #2
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b68a:	480f      	ldr	r0, [pc, #60]	; (800b6c8 <SaveToRO+0x1cc>)
					add += 2;
 800b68c:	b2b6      	uxth	r6, r6
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b68e:	f005 f8e3 	bl	8010858 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b692:	2800      	cmp	r0, #0
 800b694:	d1b7      	bne.n	800b606 <SaveToRO+0x10a>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b696:	4643      	mov	r3, r8
 800b698:	2201      	movs	r2, #1
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	3402      	adds	r4, #2
 800b69e:	4393      	bics	r3, r2
 800b6a0:	4642      	mov	r2, r8
 800b6a2:	6113      	str	r3, [r2, #16]
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b6a4:	42a7      	cmp	r7, r4
 800b6a6:	d1e4      	bne.n	800b672 <SaveToRO+0x176>
		for(uint8_t i=1 ; i<=N ; i++)
 800b6a8:	4653      	mov	r3, sl
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	469a      	mov	sl, r3
 800b6b0:	465b      	mov	r3, fp
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	4553      	cmp	r3, sl
 800b6b6:	d2cf      	bcs.n	800b658 <SaveToRO+0x15c>
 800b6b8:	e740      	b.n	800b53c <SaveToRO+0x40>
	HAL_FLASH_Lock();
 800b6ba:	f005 f8c3 	bl	8010844 <HAL_FLASH_Lock>
	return result;
 800b6be:	2000      	movs	r0, #0
 800b6c0:	e7a4      	b.n	800b60c <SaveToRO+0x110>
 800b6c2:	46c0      	nop			; (mov r8, r8)
 800b6c4:	0801d800 	.word	0x0801d800
 800b6c8:	0000c350 	.word	0x0000c350
 800b6cc:	40022000 	.word	0x40022000
 800b6d0:	20000a98 	.word	0x20000a98
 800b6d4:	20001180 	.word	0x20001180
 800b6d8:	20006ec4 	.word	0x20006ec4
 800b6dc:	0801dc00 	.word	0x0801dc00
 800b6e0:	200073a8 	.word	0x200073a8
 800b6e4:	20000008 	.word	0x20000008
 800b6e8:	20000f0c 	.word	0x20000f0c

0800b6ec <ClearROtopology>:
/* --- Clear array topology in SRAM and Flash RO --- 
*/
uint8_t ClearROtopology(void)
{
	// Clear the array 
	memset(array, 0, sizeof(array));
 800b6ec:	228f      	movs	r2, #143	; 0x8f
{
 800b6ee:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800b6f0:	0092      	lsls	r2, r2, #2
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	4805      	ldr	r0, [pc, #20]	; (800b70c <ClearROtopology+0x20>)
 800b6f6:	f007 fadb 	bl	8012cb0 <memset>
	N = 1; myID = 0;
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	4b04      	ldr	r3, [pc, #16]	; (800b710 <ClearROtopology+0x24>)
 800b6fe:	701a      	strb	r2, [r3, #0]
 800b700:	2200      	movs	r2, #0
 800b702:	4b04      	ldr	r3, [pc, #16]	; (800b714 <ClearROtopology+0x28>)
 800b704:	701a      	strb	r2, [r3, #0]
	
	return SaveToRO();
 800b706:	f7ff fef9 	bl	800b4fc <SaveToRO>
}
 800b70a:	bd10      	pop	{r4, pc}
 800b70c:	20000f0c 	.word	0x20000f0c
 800b710:	20000008 	.word	0x20000008
 800b714:	20000a98 	.word	0x20000a98

0800b718 <Module_Peripheral_Init>:
/*-----------------------------------------------------------*/
/* --- H1AR0 module initialization. 
*/
void Module_Peripheral_Init(void)
{
 800b718:	b510      	push	{r4, lr}
	/* Array ports */
  MX_USART1_UART_Init();
 800b71a:	f001 fca7 	bl	800d06c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b71e:	f001 fcbd 	bl	800d09c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800b722:	f001 fcd3 	bl	800d0cc <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 800b726:	f001 fd01 	bl	800d12c <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800b72a:	f001 fd17 	bl	800d15c <MX_USART6_UART_Init>
	
	/* USB port */
  MX_USART4_UART_Init();
 800b72e:	f001 fce5 	bl	800d0fc <MX_USART4_UART_Init>
	
	/* Bridge USB and P5 ports by default - only if PUSB is not bridged with any other port */
	if (portStatus[PUSB] != STREAM)
 800b732:	4b04      	ldr	r3, [pc, #16]	; (800b744 <Module_Peripheral_Init+0x2c>)
 800b734:	799b      	ldrb	r3, [r3, #6]
 800b736:	2b02      	cmp	r3, #2
 800b738:	d003      	beq.n	800b742 <Module_Peripheral_Init+0x2a>
		Bridge(PUSB, P5);
 800b73a:	2105      	movs	r1, #5
 800b73c:	2006      	movs	r0, #6
 800b73e:	f7f9 f919 	bl	8004974 <Bridge>
	
}
 800b742:	bd10      	pop	{r4, pc}
 800b744:	20000c2c 	.word	0x20000c2c

0800b748 <Module_MessagingTask>:
			result = H1AR0_ERR_UnknownMessage;
			break;
	}			

	return result;	
}
 800b748:	2001      	movs	r0, #1
 800b74a:	4770      	bx	lr

0800b74c <RegisterModuleCLICommands>:
/* --- Register this module CLI Commands 
*/
void RegisterModuleCLICommands(void)
{

}
 800b74c:	4770      	bx	lr
 800b74e:	46c0      	nop			; (mov r8, r8)

0800b750 <GetPort>:

/* --- Get the port for a given UART. 
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART2)
 800b750:	6800      	ldr	r0, [r0, #0]
 800b752:	4b11      	ldr	r3, [pc, #68]	; (800b798 <GetPort+0x48>)
 800b754:	4298      	cmp	r0, r3
 800b756:	d014      	beq.n	800b782 <GetPort+0x32>
			return P1;
	else if (huart->Instance == USART6)
 800b758:	4b10      	ldr	r3, [pc, #64]	; (800b79c <GetPort+0x4c>)
 800b75a:	4298      	cmp	r0, r3
 800b75c:	d015      	beq.n	800b78a <GetPort+0x3a>
			return P2;
	else if (huart->Instance == USART3)
 800b75e:	4b10      	ldr	r3, [pc, #64]	; (800b7a0 <GetPort+0x50>)
 800b760:	4298      	cmp	r0, r3
 800b762:	d014      	beq.n	800b78e <GetPort+0x3e>
			return P3;
	else if (huart->Instance == USART1)
 800b764:	4b0f      	ldr	r3, [pc, #60]	; (800b7a4 <GetPort+0x54>)
 800b766:	4298      	cmp	r0, r3
 800b768:	d00d      	beq.n	800b786 <GetPort+0x36>
			return P4;
	else if (huart->Instance == USART5)
 800b76a:	4b0f      	ldr	r3, [pc, #60]	; (800b7a8 <GetPort+0x58>)
 800b76c:	4298      	cmp	r0, r3
 800b76e:	d010      	beq.n	800b792 <GetPort+0x42>
			return P5;
	else if (huart->Instance == USART4)
			return P6;
		
	return 0;
 800b770:	4b0e      	ldr	r3, [pc, #56]	; (800b7ac <GetPort+0x5c>)
 800b772:	469c      	mov	ip, r3
 800b774:	4460      	add	r0, ip
 800b776:	4243      	negs	r3, r0
 800b778:	4158      	adcs	r0, r3
 800b77a:	2306      	movs	r3, #6
 800b77c:	4240      	negs	r0, r0
 800b77e:	4018      	ands	r0, r3
}
 800b780:	4770      	bx	lr
			return P1;
 800b782:	2001      	movs	r0, #1
 800b784:	e7fc      	b.n	800b780 <GetPort+0x30>
			return P4;
 800b786:	2004      	movs	r0, #4
 800b788:	e7fa      	b.n	800b780 <GetPort+0x30>
			return P2;
 800b78a:	2002      	movs	r0, #2
 800b78c:	e7f8      	b.n	800b780 <GetPort+0x30>
			return P3;
 800b78e:	2003      	movs	r0, #3
 800b790:	e7f6      	b.n	800b780 <GetPort+0x30>
			return P5;
 800b792:	2005      	movs	r0, #5
 800b794:	e7f4      	b.n	800b780 <GetPort+0x30>
 800b796:	46c0      	nop			; (mov r8, r8)
 800b798:	40004400 	.word	0x40004400
 800b79c:	40011400 	.word	0x40011400
 800b7a0:	40004800 	.word	0x40004800
 800b7a4:	40013800 	.word	0x40013800
 800b7a8:	40005000 	.word	0x40005000
 800b7ac:	bfffb400 	.word	0xbfffb400

0800b7b0 <DMA_Init>:

/** 
  * Initialize the DMAs
  */
void DMA_Init(void) 
{
 800b7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7b2:	46de      	mov	lr, fp
 800b7b4:	4657      	mov	r7, sl
 800b7b6:	464e      	mov	r6, r9
 800b7b8:	4645      	mov	r5, r8
	/* DMA controller clock enable */
	__DMA1_CLK_ENABLE();
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	4b5f      	ldr	r3, [pc, #380]	; (800b93c <DMA_Init+0x18c>)
{
 800b7be:	b5e0      	push	{r5, r6, r7, lr}
	__DMA1_CLK_ENABLE();
 800b7c0:	6959      	ldr	r1, [r3, #20]
{
 800b7c2:	b083      	sub	sp, #12
	__DMA1_CLK_ENABLE();
 800b7c4:	4311      	orrs	r1, r2
 800b7c6:	6159      	str	r1, [r3, #20]
 800b7c8:	6959      	ldr	r1, [r3, #20]

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800b7ca:	4c5d      	ldr	r4, [pc, #372]	; (800b940 <DMA_Init+0x190>)
	__DMA1_CLK_ENABLE();
 800b7cc:	400a      	ands	r2, r1
 800b7ce:	9200      	str	r2, [sp, #0]
 800b7d0:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	6959      	ldr	r1, [r3, #20]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_CIRCULAR; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b7d6:	2780      	movs	r7, #128	; 0x80
	__DMA2_CLK_ENABLE();
 800b7d8:	4311      	orrs	r1, r2
 800b7da:	6159      	str	r1, [r3, #20]
 800b7dc:	695b      	ldr	r3, [r3, #20]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b7de:	2500      	movs	r5, #0
	__DMA2_CLK_ENABLE();
 800b7e0:	401a      	ands	r2, r3
 800b7e2:	9201      	str	r2, [sp, #4]
 800b7e4:	9b01      	ldr	r3, [sp, #4]
	hDMA->Instance = ch;
 800b7e6:	4b57      	ldr	r3, [pc, #348]	; (800b944 <DMA_Init+0x194>)
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b7e8:	2680      	movs	r6, #128	; 0x80
	hDMA->Instance = ch;
 800b7ea:	6023      	str	r3, [r4, #0]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b7ec:	2320      	movs	r3, #32
 800b7ee:	469b      	mov	fp, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b7f0:	01bf      	lsls	r7, r7, #6
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b7f2:	6065      	str	r5, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b7f4:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b7f6:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b7f8:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7fa:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b7fc:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b7fe:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800b800:	0020      	movs	r0, r4
 800b802:	f004 faed 	bl	800fde0 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b806:	4b50      	ldr	r3, [pc, #320]	; (800b948 <DMA_Init+0x198>)
	HAL_DMA_Init(hDMA);		
 800b808:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800b80a:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b80c:	465b      	mov	r3, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b80e:	63e5      	str	r5, [r4, #60]	; 0x3c
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b810:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b812:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b814:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b816:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b818:	6523      	str	r3, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b81a:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800b81c:	3038      	adds	r0, #56	; 0x38
 800b81e:	f004 fadf 	bl	800fde0 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b822:	4b4a      	ldr	r3, [pc, #296]	; (800b94c <DMA_Init+0x19c>)
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b824:	465a      	mov	r2, fp
	hDMA->Instance = ch;
 800b826:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b828:	2384      	movs	r3, #132	; 0x84
	HAL_DMA_Init(hDMA);		
 800b82a:	0020      	movs	r0, r4
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b82c:	50e5      	str	r5, [r4, r3]
 800b82e:	469a      	mov	sl, r3
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b830:	3304      	adds	r3, #4
 800b832:	50e2      	str	r2, [r4, r3]
 800b834:	4699      	mov	r9, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b836:	3304      	adds	r3, #4
 800b838:	50e7      	str	r7, [r4, r3]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b83a:	6765      	str	r5, [r4, #116]	; 0x74
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b83c:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b83e:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b840:	51a5      	str	r5, [r4, r6]
	HAL_DMA_Init(hDMA);		
 800b842:	3070      	adds	r0, #112	; 0x70
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b844:	4698      	mov	r8, r3
	HAL_DMA_Init(hDMA);		
 800b846:	f004 facb 	bl	800fde0 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b84a:	23a8      	movs	r3, #168	; 0xa8
 800b84c:	4a40      	ldr	r2, [pc, #256]	; (800b950 <DMA_Init+0x1a0>)
	HAL_DMA_Init(hDMA);		
 800b84e:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800b850:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b852:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b854:	3304      	adds	r3, #4
 800b856:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b858:	3304      	adds	r3, #4
 800b85a:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b85c:	3304      	adds	r3, #4
 800b85e:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b860:	3304      	adds	r3, #4
 800b862:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b864:	3304      	adds	r3, #4
 800b866:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b868:	3304      	adds	r3, #4
 800b86a:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b86c:	3304      	adds	r3, #4
 800b86e:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b870:	30a8      	adds	r0, #168	; 0xa8
 800b872:	f004 fab5 	bl	800fde0 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b876:	23e0      	movs	r3, #224	; 0xe0
 800b878:	4a36      	ldr	r2, [pc, #216]	; (800b954 <DMA_Init+0x1a4>)
	HAL_DMA_Init(hDMA);		
 800b87a:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800b87c:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b87e:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b880:	3304      	adds	r3, #4
 800b882:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b884:	3304      	adds	r3, #4
 800b886:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b888:	3304      	adds	r3, #4
 800b88a:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b88c:	3304      	adds	r3, #4
 800b88e:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b890:	3304      	adds	r3, #4
 800b892:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b894:	3304      	adds	r3, #4
 800b896:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b898:	3304      	adds	r3, #4
 800b89a:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b89c:	30e0      	adds	r0, #224	; 0xe0
 800b89e:	f004 fa9f 	bl	800fde0 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b8a2:	238c      	movs	r3, #140	; 0x8c
 800b8a4:	4a2c      	ldr	r2, [pc, #176]	; (800b958 <DMA_Init+0x1a8>)
 800b8a6:	005b      	lsls	r3, r3, #1
 800b8a8:	50e2      	str	r2, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b8aa:	0020      	movs	r0, r4
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b8ac:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b8ae:	3304      	adds	r3, #4
 800b8b0:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b8b6:	3304      	adds	r3, #4
 800b8b8:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b8ba:	3304      	adds	r3, #4
 800b8bc:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b8be:	3304      	adds	r3, #4
 800b8c0:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b8c2:	3304      	adds	r3, #4
 800b8c4:	50e2      	str	r2, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b8c6:	3019      	adds	r0, #25
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b8cc:	30ff      	adds	r0, #255	; 0xff
 800b8ce:	f004 fa87 	bl	800fde0 <HAL_DMA_Init>

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800b8d2:	4c22      	ldr	r4, [pc, #136]	; (800b95c <DMA_Init+0x1ac>)
 800b8d4:	4b22      	ldr	r3, [pc, #136]	; (800b960 <DMA_Init+0x1b0>)
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b8d6:	60a5      	str	r5, [r4, #8]
	hDMA->Instance = ch;
 800b8d8:	6023      	str	r3, [r4, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b8da:	2310      	movs	r3, #16
 800b8dc:	469b      	mov	fp, r3
 800b8de:	6063      	str	r3, [r4, #4]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b8e0:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b8e2:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b8e4:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800b8e6:	61a5      	str	r5, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b8e8:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800b8ea:	0020      	movs	r0, r4
 800b8ec:	f004 fa78 	bl	800fde0 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b8f0:	4b1c      	ldr	r3, [pc, #112]	; (800b964 <DMA_Init+0x1b4>)
	HAL_DMA_Init(hDMA);		
 800b8f2:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800b8f4:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b8f6:	465b      	mov	r3, fp
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b8f8:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b8fa:	63e3      	str	r3, [r4, #60]	; 0x3c
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b8fc:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b8fe:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b900:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_NORMAL; 
 800b902:	6525      	str	r5, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b904:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800b906:	3038      	adds	r0, #56	; 0x38
 800b908:	f004 fa6a 	bl	800fde0 <HAL_DMA_Init>
	hDMA->Instance = ch;
 800b90c:	4b16      	ldr	r3, [pc, #88]	; (800b968 <DMA_Init+0x1b8>)
	HAL_DMA_Init(hDMA);		
 800b90e:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800b910:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b912:	465b      	mov	r3, fp
 800b914:	6763      	str	r3, [r4, #116]	; 0x74
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b916:	4653      	mov	r3, sl
 800b918:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_NORMAL; 
 800b91a:	464b      	mov	r3, r9
 800b91c:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b91e:	4643      	mov	r3, r8
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b920:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b922:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b924:	51a5      	str	r5, [r4, r6]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b926:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800b928:	3070      	adds	r0, #112	; 0x70
 800b92a:	f004 fa59 	bl	800fde0 <HAL_DMA_Init>
}
 800b92e:	b003      	add	sp, #12
 800b930:	bc3c      	pop	{r2, r3, r4, r5}
 800b932:	4690      	mov	r8, r2
 800b934:	4699      	mov	r9, r3
 800b936:	46a2      	mov	sl, r4
 800b938:	46ab      	mov	fp, r5
 800b93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b93c:	40021000 	.word	0x40021000
 800b940:	20001e70 	.word	0x20001e70
 800b944:	40020008 	.word	0x40020008
 800b948:	40020030 	.word	0x40020030
 800b94c:	40020058 	.word	0x40020058
 800b950:	4002006c 	.word	0x4002006c
 800b954:	4002041c 	.word	0x4002041c
 800b958:	40020430 	.word	0x40020430
 800b95c:	20001dc8 	.word	0x20001dc8
 800b960:	4002001c 	.word	0x4002001c
 800b964:	40020044 	.word	0x40020044
 800b968:	40020080 	.word	0x40020080

0800b96c <DMA_MSG_RX_CH_Init>:
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b96c:	2300      	movs	r3, #0
{
 800b96e:	b510      	push	{r4, lr}
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b970:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b972:	6083      	str	r3, [r0, #8]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b974:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b976:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b978:	3320      	adds	r3, #32
 800b97a:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b97c:	2380      	movs	r3, #128	; 0x80
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b97e:	2280      	movs	r2, #128	; 0x80
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b980:	019b      	lsls	r3, r3, #6
	hDMA->Instance = ch;
 800b982:	6001      	str	r1, [r0, #0]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b984:	60c2      	str	r2, [r0, #12]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b986:	61c3      	str	r3, [r0, #28]
	HAL_DMA_Init(hDMA);		
 800b988:	f004 fa2a 	bl	800fde0 <HAL_DMA_Init>
}
 800b98c:	bd10      	pop	{r4, pc}
 800b98e:	46c0      	nop			; (mov r8, r8)

0800b990 <DMA_STREAM_CH_Init>:
/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b990:	2300      	movs	r3, #0
{
 800b992:	b510      	push	{r4, lr}
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b994:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b996:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800b998:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b99a:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b99c:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b99e:	3320      	adds	r3, #32
 800b9a0:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800b9a2:	2380      	movs	r3, #128	; 0x80
 800b9a4:	015b      	lsls	r3, r3, #5
	hDMA->Instance = ch;
 800b9a6:	6001      	str	r1, [r0, #0]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800b9a8:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b9aa:	f004 fa19 	bl	800fde0 <HAL_DMA_Init>
}
 800b9ae:	bd10      	pop	{r4, pc}

0800b9b0 <SetupDMAInterrupts>:

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
	switch ((uint32_t)hDMA->Instance)
 800b9b0:	6803      	ldr	r3, [r0, #0]
 800b9b2:	4a21      	ldr	r2, [pc, #132]	; (800ba38 <SetupDMAInterrupts+0x88>)
{
 800b9b4:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d01c      	beq.n	800b9f4 <SetupDMAInterrupts+0x44>
 800b9ba:	d80e      	bhi.n	800b9da <SetupDMAInterrupts+0x2a>
 800b9bc:	4a1f      	ldr	r2, [pc, #124]	; (800ba3c <SetupDMAInterrupts+0x8c>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d026      	beq.n	800ba10 <SetupDMAInterrupts+0x60>
 800b9c2:	d82d      	bhi.n	800ba20 <SetupDMAInterrupts+0x70>
 800b9c4:	4a1e      	ldr	r2, [pc, #120]	; (800ba40 <SetupDMAInterrupts+0x90>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d131      	bne.n	800ba2e <SetupDMAInterrupts+0x7e>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800b9ca:	2009      	movs	r0, #9
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f004 f87f 	bl	800fad0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800b9d2:	2009      	movs	r0, #9
 800b9d4:	f004 f8a8 	bl	800fb28 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b9d8:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b9da:	4a1a      	ldr	r2, [pc, #104]	; (800ba44 <SetupDMAInterrupts+0x94>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d017      	beq.n	800ba10 <SetupDMAInterrupts+0x60>
 800b9e0:	d910      	bls.n	800ba04 <SetupDMAInterrupts+0x54>
 800b9e2:	4a19      	ldr	r2, [pc, #100]	; (800ba48 <SetupDMAInterrupts+0x98>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d005      	beq.n	800b9f4 <SetupDMAInterrupts+0x44>
 800b9e8:	4a18      	ldr	r2, [pc, #96]	; (800ba4c <SetupDMAInterrupts+0x9c>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d002      	beq.n	800b9f4 <SetupDMAInterrupts+0x44>
 800b9ee:	4a18      	ldr	r2, [pc, #96]	; (800ba50 <SetupDMAInterrupts+0xa0>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d1f1      	bne.n	800b9d8 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	200b      	movs	r0, #11
 800b9f8:	f004 f86a 	bl	800fad0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b9fc:	200b      	movs	r0, #11
 800b9fe:	f004 f893 	bl	800fb28 <HAL_NVIC_EnableIRQ>
}
 800ba02:	e7e9      	b.n	800b9d8 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800ba04:	4a13      	ldr	r2, [pc, #76]	; (800ba54 <SetupDMAInterrupts+0xa4>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d0f4      	beq.n	800b9f4 <SetupDMAInterrupts+0x44>
 800ba0a:	4a13      	ldr	r2, [pc, #76]	; (800ba58 <SetupDMAInterrupts+0xa8>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d1e3      	bne.n	800b9d8 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800ba10:	2200      	movs	r2, #0
 800ba12:	200a      	movs	r0, #10
 800ba14:	f004 f85c 	bl	800fad0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800ba18:	200a      	movs	r0, #10
 800ba1a:	f004 f885 	bl	800fb28 <HAL_NVIC_EnableIRQ>
			break;
 800ba1e:	e7db      	b.n	800b9d8 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800ba20:	4a0e      	ldr	r2, [pc, #56]	; (800ba5c <SetupDMAInterrupts+0xac>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d0e6      	beq.n	800b9f4 <SetupDMAInterrupts+0x44>
 800ba26:	4a0e      	ldr	r2, [pc, #56]	; (800ba60 <SetupDMAInterrupts+0xb0>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d1d5      	bne.n	800b9d8 <SetupDMAInterrupts+0x28>
 800ba2c:	e7e2      	b.n	800b9f4 <SetupDMAInterrupts+0x44>
 800ba2e:	4a0d      	ldr	r2, [pc, #52]	; (800ba64 <SetupDMAInterrupts+0xb4>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d0ed      	beq.n	800ba10 <SetupDMAInterrupts+0x60>
 800ba34:	e7d0      	b.n	800b9d8 <SetupDMAInterrupts+0x28>
 800ba36:	46c0      	nop			; (mov r8, r8)
 800ba38:	4002006c 	.word	0x4002006c
 800ba3c:	40020030 	.word	0x40020030
 800ba40:	40020008 	.word	0x40020008
 800ba44:	4002041c 	.word	0x4002041c
 800ba48:	40020444 	.word	0x40020444
 800ba4c:	40020458 	.word	0x40020458
 800ba50:	40020430 	.word	0x40020430
 800ba54:	40020080 	.word	0x40020080
 800ba58:	40020408 	.word	0x40020408
 800ba5c:	40020044 	.word	0x40020044
 800ba60:	40020058 	.word	0x40020058
 800ba64:	4002001c 	.word	0x4002001c

0800ba68 <UnSetupDMAInterrupts>:

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
	switch ((uint32_t)hDMA->Instance)
 800ba68:	6803      	ldr	r3, [r0, #0]
 800ba6a:	4a1b      	ldr	r2, [pc, #108]	; (800bad8 <UnSetupDMAInterrupts+0x70>)
{
 800ba6c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d018      	beq.n	800baa4 <UnSetupDMAInterrupts+0x3c>
 800ba72:	d80a      	bhi.n	800ba8a <UnSetupDMAInterrupts+0x22>
 800ba74:	4a19      	ldr	r2, [pc, #100]	; (800badc <UnSetupDMAInterrupts+0x74>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d01e      	beq.n	800bab8 <UnSetupDMAInterrupts+0x50>
 800ba7a:	d821      	bhi.n	800bac0 <UnSetupDMAInterrupts+0x58>
 800ba7c:	4a18      	ldr	r2, [pc, #96]	; (800bae0 <UnSetupDMAInterrupts+0x78>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d125      	bne.n	800bace <UnSetupDMAInterrupts+0x66>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800ba82:	2009      	movs	r0, #9
 800ba84:	f004 f85a 	bl	800fb3c <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800ba88:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800ba8a:	4a16      	ldr	r2, [pc, #88]	; (800bae4 <UnSetupDMAInterrupts+0x7c>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d013      	beq.n	800bab8 <UnSetupDMAInterrupts+0x50>
 800ba90:	d90c      	bls.n	800baac <UnSetupDMAInterrupts+0x44>
 800ba92:	4a15      	ldr	r2, [pc, #84]	; (800bae8 <UnSetupDMAInterrupts+0x80>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d005      	beq.n	800baa4 <UnSetupDMAInterrupts+0x3c>
 800ba98:	4a14      	ldr	r2, [pc, #80]	; (800baec <UnSetupDMAInterrupts+0x84>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d002      	beq.n	800baa4 <UnSetupDMAInterrupts+0x3c>
 800ba9e:	4a14      	ldr	r2, [pc, #80]	; (800baf0 <UnSetupDMAInterrupts+0x88>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d1f1      	bne.n	800ba88 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800baa4:	200b      	movs	r0, #11
 800baa6:	f004 f849 	bl	800fb3c <HAL_NVIC_DisableIRQ>
}
 800baaa:	e7ed      	b.n	800ba88 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800baac:	4a11      	ldr	r2, [pc, #68]	; (800baf4 <UnSetupDMAInterrupts+0x8c>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d0f8      	beq.n	800baa4 <UnSetupDMAInterrupts+0x3c>
 800bab2:	4a11      	ldr	r2, [pc, #68]	; (800baf8 <UnSetupDMAInterrupts+0x90>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d1e7      	bne.n	800ba88 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800bab8:	200a      	movs	r0, #10
 800baba:	f004 f83f 	bl	800fb3c <HAL_NVIC_DisableIRQ>
			break;
 800babe:	e7e3      	b.n	800ba88 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800bac0:	4a0e      	ldr	r2, [pc, #56]	; (800bafc <UnSetupDMAInterrupts+0x94>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d0ee      	beq.n	800baa4 <UnSetupDMAInterrupts+0x3c>
 800bac6:	4a0e      	ldr	r2, [pc, #56]	; (800bb00 <UnSetupDMAInterrupts+0x98>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d1dd      	bne.n	800ba88 <UnSetupDMAInterrupts+0x20>
 800bacc:	e7ea      	b.n	800baa4 <UnSetupDMAInterrupts+0x3c>
 800bace:	4a0d      	ldr	r2, [pc, #52]	; (800bb04 <UnSetupDMAInterrupts+0x9c>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d0f1      	beq.n	800bab8 <UnSetupDMAInterrupts+0x50>
 800bad4:	e7d8      	b.n	800ba88 <UnSetupDMAInterrupts+0x20>
 800bad6:	46c0      	nop			; (mov r8, r8)
 800bad8:	4002006c 	.word	0x4002006c
 800badc:	40020030 	.word	0x40020030
 800bae0:	40020008 	.word	0x40020008
 800bae4:	4002041c 	.word	0x4002041c
 800bae8:	40020444 	.word	0x40020444
 800baec:	40020458 	.word	0x40020458
 800baf0:	40020430 	.word	0x40020430
 800baf4:	40020080 	.word	0x40020080
 800baf8:	40020408 	.word	0x40020408
 800bafc:	40020044 	.word	0x40020044
 800bb00:	40020058 	.word	0x40020058
 800bb04:	4002001c 	.word	0x4002001c

0800bb08 <DMA_MSG_TX_UnSetup>:
{	
 800bb08:	b510      	push	{r4, lr}
 800bb0a:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800bb0c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800bb0e:	f7ff ffab 	bl	800ba68 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800bb12:	2300      	movs	r3, #0
 800bb14:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bb16:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800bb18:	6623      	str	r3, [r4, #96]	; 0x60
}
 800bb1a:	bd10      	pop	{r4, pc}

0800bb1c <RemapAndLinkDMAtoUARTRx>:
/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bb1c:	6803      	ldr	r3, [r0, #0]
 800bb1e:	4ac6      	ldr	r2, [pc, #792]	; (800be38 <RemapAndLinkDMAtoUARTRx+0x31c>)
{
 800bb20:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d03a      	beq.n	800bb9c <RemapAndLinkDMAtoUARTRx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800bb26:	4ac5      	ldr	r2, [pc, #788]	; (800be3c <RemapAndLinkDMAtoUARTRx+0x320>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d058      	beq.n	800bbde <RemapAndLinkDMAtoUARTRx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800bb2c:	4ac4      	ldr	r2, [pc, #784]	; (800be40 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d100      	bne.n	800bb34 <RemapAndLinkDMAtoUARTRx+0x18>
 800bb32:	e093      	b.n	800bc5c <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800bb34:	4ac3      	ldr	r2, [pc, #780]	; (800be44 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d100      	bne.n	800bb3c <RemapAndLinkDMAtoUARTRx+0x20>
 800bb3a:	e0c0      	b.n	800bcbe <RemapAndLinkDMAtoUARTRx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800bb3c:	4ac2      	ldr	r2, [pc, #776]	; (800be48 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d100      	bne.n	800bb44 <RemapAndLinkDMAtoUARTRx+0x28>
 800bb42:	e19d      	b.n	800be80 <RemapAndLinkDMAtoUARTRx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800bb44:	4ac1      	ldr	r2, [pc, #772]	; (800be4c <RemapAndLinkDMAtoUARTRx+0x330>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d100      	bne.n	800bb4c <RemapAndLinkDMAtoUARTRx+0x30>
 800bb4a:	e1b9      	b.n	800bec0 <RemapAndLinkDMAtoUARTRx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800bb4c:	4ac0      	ldr	r2, [pc, #768]	; (800be50 <RemapAndLinkDMAtoUARTRx+0x334>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d000      	beq.n	800bb54 <RemapAndLinkDMAtoUARTRx+0x38>
 800bb52:	e265      	b.n	800c020 <RemapAndLinkDMAtoUARTRx+0x504>
 800bb54:	680b      	ldr	r3, [r1, #0]
 800bb56:	4abf      	ldr	r2, [pc, #764]	; (800be54 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d100      	bne.n	800bb5e <RemapAndLinkDMAtoUARTRx+0x42>
 800bb5c:	e230      	b.n	800bfc0 <RemapAndLinkDMAtoUARTRx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800bb5e:	4abe      	ldr	r2, [pc, #760]	; (800be58 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d100      	bne.n	800bb66 <RemapAndLinkDMAtoUARTRx+0x4a>
 800bb64:	e237      	b.n	800bfd6 <RemapAndLinkDMAtoUARTRx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800bb66:	4abd      	ldr	r2, [pc, #756]	; (800be5c <RemapAndLinkDMAtoUARTRx+0x340>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d100      	bne.n	800bb6e <RemapAndLinkDMAtoUARTRx+0x52>
 800bb6c:	e235      	b.n	800bfda <RemapAndLinkDMAtoUARTRx+0x4be>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800bb6e:	4abc      	ldr	r2, [pc, #752]	; (800be60 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d100      	bne.n	800bb76 <RemapAndLinkDMAtoUARTRx+0x5a>
 800bb74:	e23d      	b.n	800bff2 <RemapAndLinkDMAtoUARTRx+0x4d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800bb76:	4abb      	ldr	r2, [pc, #748]	; (800be64 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d100      	bne.n	800bb7e <RemapAndLinkDMAtoUARTRx+0x62>
 800bb7c:	e245      	b.n	800c00a <RemapAndLinkDMAtoUARTRx+0x4ee>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800bb7e:	4aba      	ldr	r2, [pc, #744]	; (800be68 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d145      	bne.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800bb84:	4ab9      	ldr	r2, [pc, #740]	; (800be6c <RemapAndLinkDMAtoUARTRx+0x350>)
 800bb86:	23a8      	movs	r3, #168	; 0xa8
 800bb88:	4db9      	ldr	r5, [pc, #740]	; (800be70 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bb8a:	58d4      	ldr	r4, [r2, r3]
 800bb8c:	402c      	ands	r4, r5
 800bb8e:	50d4      	str	r4, [r2, r3]
 800bb90:	24e0      	movs	r4, #224	; 0xe0
 800bb92:	58d5      	ldr	r5, [r2, r3]
 800bb94:	0124      	lsls	r4, r4, #4
 800bb96:	432c      	orrs	r4, r5
 800bb98:	50d4      	str	r4, [r2, r3]
 800bb9a:	e039      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800bb9c:	680b      	ldr	r3, [r1, #0]
 800bb9e:	4aad      	ldr	r2, [pc, #692]	; (800be54 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d100      	bne.n	800bba6 <RemapAndLinkDMAtoUARTRx+0x8a>
 800bba4:	e07e      	b.n	800bca4 <RemapAndLinkDMAtoUARTRx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800bba6:	4aac      	ldr	r2, [pc, #688]	; (800be58 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d100      	bne.n	800bbae <RemapAndLinkDMAtoUARTRx+0x92>
 800bbac:	e085      	b.n	800bcba <RemapAndLinkDMAtoUARTRx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800bbae:	4aab      	ldr	r2, [pc, #684]	; (800be5c <RemapAndLinkDMAtoUARTRx+0x340>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d030      	beq.n	800bc16 <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800bbb4:	4aaa      	ldr	r2, [pc, #680]	; (800be60 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d039      	beq.n	800bc2e <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800bbba:	4aaa      	ldr	r2, [pc, #680]	; (800be64 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d042      	beq.n	800bc46 <RemapAndLinkDMAtoUARTRx+0x12a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800bbc0:	4aa9      	ldr	r2, [pc, #676]	; (800be68 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d124      	bne.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800bbc6:	4aa9      	ldr	r2, [pc, #676]	; (800be6c <RemapAndLinkDMAtoUARTRx+0x350>)
 800bbc8:	23a8      	movs	r3, #168	; 0xa8
 800bbca:	4da9      	ldr	r5, [pc, #676]	; (800be70 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bbcc:	58d4      	ldr	r4, [r2, r3]
 800bbce:	402c      	ands	r4, r5
 800bbd0:	50d4      	str	r4, [r2, r3]
 800bbd2:	2480      	movs	r4, #128	; 0x80
 800bbd4:	58d5      	ldr	r5, [r2, r3]
 800bbd6:	0124      	lsls	r4, r4, #4
 800bbd8:	432c      	orrs	r4, r5
 800bbda:	50d4      	str	r4, [r2, r3]
 800bbdc:	e018      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800bbde:	680b      	ldr	r3, [r1, #0]
 800bbe0:	4a9c      	ldr	r2, [pc, #624]	; (800be54 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d100      	bne.n	800bbe8 <RemapAndLinkDMAtoUARTRx+0xcc>
 800bbe6:	e0b0      	b.n	800bd4a <RemapAndLinkDMAtoUARTRx+0x22e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800bbe8:	4a9b      	ldr	r2, [pc, #620]	; (800be58 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d100      	bne.n	800bbf0 <RemapAndLinkDMAtoUARTRx+0xd4>
 800bbee:	e0b7      	b.n	800bd60 <RemapAndLinkDMAtoUARTRx+0x244>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800bbf0:	4a9a      	ldr	r2, [pc, #616]	; (800be5c <RemapAndLinkDMAtoUARTRx+0x340>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d100      	bne.n	800bbf8 <RemapAndLinkDMAtoUARTRx+0xdc>
 800bbf6:	e0bf      	b.n	800bd78 <RemapAndLinkDMAtoUARTRx+0x25c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800bbf8:	4a99      	ldr	r2, [pc, #612]	; (800be60 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d100      	bne.n	800bc00 <RemapAndLinkDMAtoUARTRx+0xe4>
 800bbfe:	e0c7      	b.n	800bd90 <RemapAndLinkDMAtoUARTRx+0x274>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800bc00:	4a98      	ldr	r2, [pc, #608]	; (800be64 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d100      	bne.n	800bc08 <RemapAndLinkDMAtoUARTRx+0xec>
 800bc06:	e0cf      	b.n	800bda8 <RemapAndLinkDMAtoUARTRx+0x28c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800bc08:	4a97      	ldr	r2, [pc, #604]	; (800be68 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d100      	bne.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
 800bc0e:	e0d6      	b.n	800bdbe <RemapAndLinkDMAtoUARTRx+0x2a2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800bc10:	6641      	str	r1, [r0, #100]	; 0x64
 800bc12:	6248      	str	r0, [r1, #36]	; 0x24
}
 800bc14:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800bc16:	23a8      	movs	r3, #168	; 0xa8
 800bc18:	4a96      	ldr	r2, [pc, #600]	; (800be74 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bc1a:	4d97      	ldr	r5, [pc, #604]	; (800be78 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800bc1c:	58d4      	ldr	r4, [r2, r3]
 800bc1e:	402c      	ands	r4, r5
 800bc20:	50d4      	str	r4, [r2, r3]
 800bc22:	2480      	movs	r4, #128	; 0x80
 800bc24:	58d5      	ldr	r5, [r2, r3]
 800bc26:	0324      	lsls	r4, r4, #12
 800bc28:	432c      	orrs	r4, r5
 800bc2a:	50d4      	str	r4, [r2, r3]
 800bc2c:	e7f0      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800bc2e:	23a8      	movs	r3, #168	; 0xa8
 800bc30:	4a90      	ldr	r2, [pc, #576]	; (800be74 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bc32:	4d92      	ldr	r5, [pc, #584]	; (800be7c <RemapAndLinkDMAtoUARTRx+0x360>)
 800bc34:	58d4      	ldr	r4, [r2, r3]
 800bc36:	402c      	ands	r4, r5
 800bc38:	50d4      	str	r4, [r2, r3]
 800bc3a:	2480      	movs	r4, #128	; 0x80
 800bc3c:	58d5      	ldr	r5, [r2, r3]
 800bc3e:	0424      	lsls	r4, r4, #16
 800bc40:	432c      	orrs	r4, r5
 800bc42:	50d4      	str	r4, [r2, r3]
 800bc44:	e7e4      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800bc46:	23a8      	movs	r3, #168	; 0xa8
 800bc48:	25f0      	movs	r5, #240	; 0xf0
 800bc4a:	4a88      	ldr	r2, [pc, #544]	; (800be6c <RemapAndLinkDMAtoUARTRx+0x350>)
 800bc4c:	58d4      	ldr	r4, [r2, r3]
 800bc4e:	43ac      	bics	r4, r5
 800bc50:	50d4      	str	r4, [r2, r3]
 800bc52:	58d4      	ldr	r4, [r2, r3]
 800bc54:	3d70      	subs	r5, #112	; 0x70
 800bc56:	432c      	orrs	r4, r5
 800bc58:	50d4      	str	r4, [r2, r3]
 800bc5a:	e7d9      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800bc5c:	680b      	ldr	r3, [r1, #0]
 800bc5e:	4a7d      	ldr	r2, [pc, #500]	; (800be54 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d100      	bne.n	800bc66 <RemapAndLinkDMAtoUARTRx+0x14a>
 800bc64:	e0ad      	b.n	800bdc2 <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800bc66:	4a7c      	ldr	r2, [pc, #496]	; (800be58 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d100      	bne.n	800bc6e <RemapAndLinkDMAtoUARTRx+0x152>
 800bc6c:	e0b4      	b.n	800bdd8 <RemapAndLinkDMAtoUARTRx+0x2bc>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800bc6e:	4a7b      	ldr	r2, [pc, #492]	; (800be5c <RemapAndLinkDMAtoUARTRx+0x340>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d100      	bne.n	800bc76 <RemapAndLinkDMAtoUARTRx+0x15a>
 800bc74:	e0b2      	b.n	800bddc <RemapAndLinkDMAtoUARTRx+0x2c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800bc76:	4a7a      	ldr	r2, [pc, #488]	; (800be60 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d100      	bne.n	800bc7e <RemapAndLinkDMAtoUARTRx+0x162>
 800bc7c:	e0ba      	b.n	800bdf4 <RemapAndLinkDMAtoUARTRx+0x2d8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800bc7e:	4a79      	ldr	r2, [pc, #484]	; (800be64 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d100      	bne.n	800bc86 <RemapAndLinkDMAtoUARTRx+0x16a>
 800bc84:	e0c2      	b.n	800be0c <RemapAndLinkDMAtoUARTRx+0x2f0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800bc86:	4a78      	ldr	r2, [pc, #480]	; (800be68 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d1c1      	bne.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800bc8c:	4a77      	ldr	r2, [pc, #476]	; (800be6c <RemapAndLinkDMAtoUARTRx+0x350>)
 800bc8e:	23a8      	movs	r3, #168	; 0xa8
 800bc90:	4d77      	ldr	r5, [pc, #476]	; (800be70 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bc92:	58d4      	ldr	r4, [r2, r3]
 800bc94:	402c      	ands	r4, r5
 800bc96:	50d4      	str	r4, [r2, r3]
 800bc98:	24a0      	movs	r4, #160	; 0xa0
 800bc9a:	58d5      	ldr	r5, [r2, r3]
 800bc9c:	0124      	lsls	r4, r4, #4
 800bc9e:	432c      	orrs	r4, r5
 800bca0:	50d4      	str	r4, [r2, r3]
 800bca2:	e7b5      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800bca4:	23a8      	movs	r3, #168	; 0xa8
 800bca6:	250f      	movs	r5, #15
 800bca8:	4a72      	ldr	r2, [pc, #456]	; (800be74 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bcaa:	58d4      	ldr	r4, [r2, r3]
 800bcac:	43ac      	bics	r4, r5
 800bcae:	50d4      	str	r4, [r2, r3]
 800bcb0:	58d4      	ldr	r4, [r2, r3]
 800bcb2:	3d07      	subs	r5, #7
 800bcb4:	432c      	orrs	r4, r5
 800bcb6:	50d4      	str	r4, [r2, r3]
 800bcb8:	e7aa      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800bcba:	4a6e      	ldr	r2, [pc, #440]	; (800be74 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bcbc:	e784      	b.n	800bbc8 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800bcbe:	680b      	ldr	r3, [r1, #0]
 800bcc0:	4a64      	ldr	r2, [pc, #400]	; (800be54 <RemapAndLinkDMAtoUARTRx+0x338>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d01c      	beq.n	800bd00 <RemapAndLinkDMAtoUARTRx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800bcc6:	4a64      	ldr	r2, [pc, #400]	; (800be58 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d024      	beq.n	800bd16 <RemapAndLinkDMAtoUARTRx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800bccc:	4a63      	ldr	r2, [pc, #396]	; (800be5c <RemapAndLinkDMAtoUARTRx+0x340>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d023      	beq.n	800bd1a <RemapAndLinkDMAtoUARTRx+0x1fe>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800bcd2:	4a63      	ldr	r2, [pc, #396]	; (800be60 <RemapAndLinkDMAtoUARTRx+0x344>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d02c      	beq.n	800bd32 <RemapAndLinkDMAtoUARTRx+0x216>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800bcd8:	4a62      	ldr	r2, [pc, #392]	; (800be64 <RemapAndLinkDMAtoUARTRx+0x348>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d100      	bne.n	800bce0 <RemapAndLinkDMAtoUARTRx+0x1c4>
 800bcde:	e0a0      	b.n	800be22 <RemapAndLinkDMAtoUARTRx+0x306>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800bce0:	4a61      	ldr	r2, [pc, #388]	; (800be68 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d000      	beq.n	800bce8 <RemapAndLinkDMAtoUARTRx+0x1cc>
 800bce6:	e793      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800bce8:	4a60      	ldr	r2, [pc, #384]	; (800be6c <RemapAndLinkDMAtoUARTRx+0x350>)
 800bcea:	23a8      	movs	r3, #168	; 0xa8
 800bcec:	4d60      	ldr	r5, [pc, #384]	; (800be70 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bcee:	58d4      	ldr	r4, [r2, r3]
 800bcf0:	402c      	ands	r4, r5
 800bcf2:	50d4      	str	r4, [r2, r3]
 800bcf4:	24b0      	movs	r4, #176	; 0xb0
 800bcf6:	58d5      	ldr	r5, [r2, r3]
 800bcf8:	0124      	lsls	r4, r4, #4
 800bcfa:	432c      	orrs	r4, r5
 800bcfc:	50d4      	str	r4, [r2, r3]
 800bcfe:	e787      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800bd00:	23a8      	movs	r3, #168	; 0xa8
 800bd02:	250f      	movs	r5, #15
 800bd04:	4a5b      	ldr	r2, [pc, #364]	; (800be74 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd06:	58d4      	ldr	r4, [r2, r3]
 800bd08:	43ac      	bics	r4, r5
 800bd0a:	50d4      	str	r4, [r2, r3]
 800bd0c:	58d4      	ldr	r4, [r2, r3]
 800bd0e:	3d04      	subs	r5, #4
 800bd10:	432c      	orrs	r4, r5
 800bd12:	50d4      	str	r4, [r2, r3]
 800bd14:	e77c      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800bd16:	4a57      	ldr	r2, [pc, #348]	; (800be74 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd18:	e7e7      	b.n	800bcea <RemapAndLinkDMAtoUARTRx+0x1ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800bd1a:	23a8      	movs	r3, #168	; 0xa8
 800bd1c:	4a55      	ldr	r2, [pc, #340]	; (800be74 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd1e:	4d56      	ldr	r5, [pc, #344]	; (800be78 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800bd20:	58d4      	ldr	r4, [r2, r3]
 800bd22:	402c      	ands	r4, r5
 800bd24:	50d4      	str	r4, [r2, r3]
 800bd26:	24b0      	movs	r4, #176	; 0xb0
 800bd28:	58d5      	ldr	r5, [r2, r3]
 800bd2a:	0324      	lsls	r4, r4, #12
 800bd2c:	432c      	orrs	r4, r5
 800bd2e:	50d4      	str	r4, [r2, r3]
 800bd30:	e76e      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800bd32:	23a8      	movs	r3, #168	; 0xa8
 800bd34:	4a4f      	ldr	r2, [pc, #316]	; (800be74 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd36:	4d51      	ldr	r5, [pc, #324]	; (800be7c <RemapAndLinkDMAtoUARTRx+0x360>)
 800bd38:	58d4      	ldr	r4, [r2, r3]
 800bd3a:	402c      	ands	r4, r5
 800bd3c:	50d4      	str	r4, [r2, r3]
 800bd3e:	24b0      	movs	r4, #176	; 0xb0
 800bd40:	58d5      	ldr	r5, [r2, r3]
 800bd42:	0424      	lsls	r4, r4, #16
 800bd44:	432c      	orrs	r4, r5
 800bd46:	50d4      	str	r4, [r2, r3]
 800bd48:	e762      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800bd4a:	23a8      	movs	r3, #168	; 0xa8
 800bd4c:	250f      	movs	r5, #15
 800bd4e:	4a49      	ldr	r2, [pc, #292]	; (800be74 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd50:	58d4      	ldr	r4, [r2, r3]
 800bd52:	43ac      	bics	r4, r5
 800bd54:	50d4      	str	r4, [r2, r3]
 800bd56:	58d4      	ldr	r4, [r2, r3]
 800bd58:	3d06      	subs	r5, #6
 800bd5a:	432c      	orrs	r4, r5
 800bd5c:	50d4      	str	r4, [r2, r3]
 800bd5e:	e757      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800bd60:	4a44      	ldr	r2, [pc, #272]	; (800be74 <RemapAndLinkDMAtoUARTRx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800bd62:	23a8      	movs	r3, #168	; 0xa8
 800bd64:	4d42      	ldr	r5, [pc, #264]	; (800be70 <RemapAndLinkDMAtoUARTRx+0x354>)
 800bd66:	58d4      	ldr	r4, [r2, r3]
 800bd68:	402c      	ands	r4, r5
 800bd6a:	50d4      	str	r4, [r2, r3]
 800bd6c:	2490      	movs	r4, #144	; 0x90
 800bd6e:	58d5      	ldr	r5, [r2, r3]
 800bd70:	0124      	lsls	r4, r4, #4
 800bd72:	432c      	orrs	r4, r5
 800bd74:	50d4      	str	r4, [r2, r3]
 800bd76:	e74b      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800bd78:	23a8      	movs	r3, #168	; 0xa8
 800bd7a:	4a3e      	ldr	r2, [pc, #248]	; (800be74 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd7c:	4d3e      	ldr	r5, [pc, #248]	; (800be78 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800bd7e:	58d4      	ldr	r4, [r2, r3]
 800bd80:	402c      	ands	r4, r5
 800bd82:	50d4      	str	r4, [r2, r3]
 800bd84:	2490      	movs	r4, #144	; 0x90
 800bd86:	58d5      	ldr	r5, [r2, r3]
 800bd88:	0324      	lsls	r4, r4, #12
 800bd8a:	432c      	orrs	r4, r5
 800bd8c:	50d4      	str	r4, [r2, r3]
 800bd8e:	e73f      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800bd90:	23a8      	movs	r3, #168	; 0xa8
 800bd92:	4a38      	ldr	r2, [pc, #224]	; (800be74 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bd94:	4d39      	ldr	r5, [pc, #228]	; (800be7c <RemapAndLinkDMAtoUARTRx+0x360>)
 800bd96:	58d4      	ldr	r4, [r2, r3]
 800bd98:	402c      	ands	r4, r5
 800bd9a:	50d4      	str	r4, [r2, r3]
 800bd9c:	2490      	movs	r4, #144	; 0x90
 800bd9e:	58d5      	ldr	r5, [r2, r3]
 800bda0:	0424      	lsls	r4, r4, #16
 800bda2:	432c      	orrs	r4, r5
 800bda4:	50d4      	str	r4, [r2, r3]
 800bda6:	e733      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800bda8:	23a8      	movs	r3, #168	; 0xa8
 800bdaa:	25f0      	movs	r5, #240	; 0xf0
 800bdac:	4a2f      	ldr	r2, [pc, #188]	; (800be6c <RemapAndLinkDMAtoUARTRx+0x350>)
 800bdae:	58d4      	ldr	r4, [r2, r3]
 800bdb0:	43ac      	bics	r4, r5
 800bdb2:	50d4      	str	r4, [r2, r3]
 800bdb4:	58d4      	ldr	r4, [r2, r3]
 800bdb6:	3d60      	subs	r5, #96	; 0x60
 800bdb8:	432c      	orrs	r4, r5
 800bdba:	50d4      	str	r4, [r2, r3]
 800bdbc:	e728      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800bdbe:	4a2b      	ldr	r2, [pc, #172]	; (800be6c <RemapAndLinkDMAtoUARTRx+0x350>)
 800bdc0:	e7cf      	b.n	800bd62 <RemapAndLinkDMAtoUARTRx+0x246>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800bdc2:	23a8      	movs	r3, #168	; 0xa8
 800bdc4:	250f      	movs	r5, #15
 800bdc6:	4a2b      	ldr	r2, [pc, #172]	; (800be74 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bdc8:	58d4      	ldr	r4, [r2, r3]
 800bdca:	43ac      	bics	r4, r5
 800bdcc:	50d4      	str	r4, [r2, r3]
 800bdce:	58d4      	ldr	r4, [r2, r3]
 800bdd0:	3d05      	subs	r5, #5
 800bdd2:	432c      	orrs	r4, r5
 800bdd4:	50d4      	str	r4, [r2, r3]
 800bdd6:	e71b      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800bdd8:	4a26      	ldr	r2, [pc, #152]	; (800be74 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bdda:	e758      	b.n	800bc8e <RemapAndLinkDMAtoUARTRx+0x172>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800bddc:	23a8      	movs	r3, #168	; 0xa8
 800bdde:	4a25      	ldr	r2, [pc, #148]	; (800be74 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bde0:	4d25      	ldr	r5, [pc, #148]	; (800be78 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800bde2:	58d4      	ldr	r4, [r2, r3]
 800bde4:	402c      	ands	r4, r5
 800bde6:	50d4      	str	r4, [r2, r3]
 800bde8:	24a0      	movs	r4, #160	; 0xa0
 800bdea:	58d5      	ldr	r5, [r2, r3]
 800bdec:	0324      	lsls	r4, r4, #12
 800bdee:	432c      	orrs	r4, r5
 800bdf0:	50d4      	str	r4, [r2, r3]
 800bdf2:	e70d      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800bdf4:	23a8      	movs	r3, #168	; 0xa8
 800bdf6:	4a1f      	ldr	r2, [pc, #124]	; (800be74 <RemapAndLinkDMAtoUARTRx+0x358>)
 800bdf8:	4d20      	ldr	r5, [pc, #128]	; (800be7c <RemapAndLinkDMAtoUARTRx+0x360>)
 800bdfa:	58d4      	ldr	r4, [r2, r3]
 800bdfc:	402c      	ands	r4, r5
 800bdfe:	50d4      	str	r4, [r2, r3]
 800be00:	24a0      	movs	r4, #160	; 0xa0
 800be02:	58d5      	ldr	r5, [r2, r3]
 800be04:	0424      	lsls	r4, r4, #16
 800be06:	432c      	orrs	r4, r5
 800be08:	50d4      	str	r4, [r2, r3]
 800be0a:	e701      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800be0c:	23a8      	movs	r3, #168	; 0xa8
 800be0e:	25f0      	movs	r5, #240	; 0xf0
 800be10:	4a16      	ldr	r2, [pc, #88]	; (800be6c <RemapAndLinkDMAtoUARTRx+0x350>)
 800be12:	58d4      	ldr	r4, [r2, r3]
 800be14:	43ac      	bics	r4, r5
 800be16:	50d4      	str	r4, [r2, r3]
 800be18:	58d4      	ldr	r4, [r2, r3]
 800be1a:	3d50      	subs	r5, #80	; 0x50
 800be1c:	432c      	orrs	r4, r5
 800be1e:	50d4      	str	r4, [r2, r3]
 800be20:	e6f6      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800be22:	23a8      	movs	r3, #168	; 0xa8
 800be24:	25f0      	movs	r5, #240	; 0xf0
 800be26:	4a11      	ldr	r2, [pc, #68]	; (800be6c <RemapAndLinkDMAtoUARTRx+0x350>)
 800be28:	58d4      	ldr	r4, [r2, r3]
 800be2a:	43ac      	bics	r4, r5
 800be2c:	50d4      	str	r4, [r2, r3]
 800be2e:	58d4      	ldr	r4, [r2, r3]
 800be30:	3d40      	subs	r5, #64	; 0x40
 800be32:	432c      	orrs	r4, r5
 800be34:	50d4      	str	r4, [r2, r3]
 800be36:	e6eb      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
 800be38:	40013800 	.word	0x40013800
 800be3c:	40004400 	.word	0x40004400
 800be40:	40004800 	.word	0x40004800
 800be44:	40004c00 	.word	0x40004c00
 800be48:	40005000 	.word	0x40005000
 800be4c:	40011400 	.word	0x40011400
 800be50:	40011800 	.word	0x40011800
 800be54:	40020008 	.word	0x40020008
 800be58:	40020030 	.word	0x40020030
 800be5c:	40020058 	.word	0x40020058
 800be60:	4002006c 	.word	0x4002006c
 800be64:	4002041c 	.word	0x4002041c
 800be68:	40020430 	.word	0x40020430
 800be6c:	40020400 	.word	0x40020400
 800be70:	fffff0ff 	.word	0xfffff0ff
 800be74:	40020000 	.word	0x40020000
 800be78:	fff0ffff 	.word	0xfff0ffff
 800be7c:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800be80:	680b      	ldr	r3, [r1, #0]
 800be82:	4a8e      	ldr	r2, [pc, #568]	; (800c0bc <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d03b      	beq.n	800bf00 <RemapAndLinkDMAtoUARTRx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800be88:	4a8d      	ldr	r2, [pc, #564]	; (800c0c0 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d043      	beq.n	800bf16 <RemapAndLinkDMAtoUARTRx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800be8e:	4a8d      	ldr	r2, [pc, #564]	; (800c0c4 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d042      	beq.n	800bf1a <RemapAndLinkDMAtoUARTRx+0x3fe>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800be94:	4a8c      	ldr	r2, [pc, #560]	; (800c0c8 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d04b      	beq.n	800bf32 <RemapAndLinkDMAtoUARTRx+0x416>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800be9a:	4a8c      	ldr	r2, [pc, #560]	; (800c0cc <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d054      	beq.n	800bf4a <RemapAndLinkDMAtoUARTRx+0x42e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800bea0:	4a8b      	ldr	r2, [pc, #556]	; (800c0d0 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d000      	beq.n	800bea8 <RemapAndLinkDMAtoUARTRx+0x38c>
 800bea6:	e6b3      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800bea8:	4a8a      	ldr	r2, [pc, #552]	; (800c0d4 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800beaa:	23a8      	movs	r3, #168	; 0xa8
 800beac:	4d8a      	ldr	r5, [pc, #552]	; (800c0d8 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800beae:	58d4      	ldr	r4, [r2, r3]
 800beb0:	402c      	ands	r4, r5
 800beb2:	50d4      	str	r4, [r2, r3]
 800beb4:	24c0      	movs	r4, #192	; 0xc0
 800beb6:	58d5      	ldr	r5, [r2, r3]
 800beb8:	0124      	lsls	r4, r4, #4
 800beba:	432c      	orrs	r4, r5
 800bebc:	50d4      	str	r4, [r2, r3]
 800bebe:	e6a7      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800bec0:	680b      	ldr	r3, [r1, #0]
 800bec2:	4a7e      	ldr	r2, [pc, #504]	; (800c0bc <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d04b      	beq.n	800bf60 <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800bec8:	4a7d      	ldr	r2, [pc, #500]	; (800c0c0 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d053      	beq.n	800bf76 <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800bece:	4a7d      	ldr	r2, [pc, #500]	; (800c0c4 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d052      	beq.n	800bf7a <RemapAndLinkDMAtoUARTRx+0x45e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800bed4:	4a7c      	ldr	r2, [pc, #496]	; (800c0c8 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d05b      	beq.n	800bf92 <RemapAndLinkDMAtoUARTRx+0x476>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800beda:	4a7c      	ldr	r2, [pc, #496]	; (800c0cc <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d064      	beq.n	800bfaa <RemapAndLinkDMAtoUARTRx+0x48e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800bee0:	4a7b      	ldr	r2, [pc, #492]	; (800c0d0 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d000      	beq.n	800bee8 <RemapAndLinkDMAtoUARTRx+0x3cc>
 800bee6:	e693      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800bee8:	4a7a      	ldr	r2, [pc, #488]	; (800c0d4 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800beea:	23a8      	movs	r3, #168	; 0xa8
 800beec:	4d7a      	ldr	r5, [pc, #488]	; (800c0d8 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800beee:	58d4      	ldr	r4, [r2, r3]
 800bef0:	402c      	ands	r4, r5
 800bef2:	50d4      	str	r4, [r2, r3]
 800bef4:	24d0      	movs	r4, #208	; 0xd0
 800bef6:	58d5      	ldr	r5, [r2, r3]
 800bef8:	0124      	lsls	r4, r4, #4
 800befa:	432c      	orrs	r4, r5
 800befc:	50d4      	str	r4, [r2, r3]
 800befe:	e687      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800bf00:	23a8      	movs	r3, #168	; 0xa8
 800bf02:	250f      	movs	r5, #15
 800bf04:	4a75      	ldr	r2, [pc, #468]	; (800c0dc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf06:	58d4      	ldr	r4, [r2, r3]
 800bf08:	43ac      	bics	r4, r5
 800bf0a:	50d4      	str	r4, [r2, r3]
 800bf0c:	58d4      	ldr	r4, [r2, r3]
 800bf0e:	3d03      	subs	r5, #3
 800bf10:	432c      	orrs	r4, r5
 800bf12:	50d4      	str	r4, [r2, r3]
 800bf14:	e67c      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800bf16:	4a71      	ldr	r2, [pc, #452]	; (800c0dc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf18:	e7c7      	b.n	800beaa <RemapAndLinkDMAtoUARTRx+0x38e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800bf1a:	23a8      	movs	r3, #168	; 0xa8
 800bf1c:	4a6f      	ldr	r2, [pc, #444]	; (800c0dc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf1e:	4d70      	ldr	r5, [pc, #448]	; (800c0e0 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800bf20:	58d4      	ldr	r4, [r2, r3]
 800bf22:	402c      	ands	r4, r5
 800bf24:	50d4      	str	r4, [r2, r3]
 800bf26:	24c0      	movs	r4, #192	; 0xc0
 800bf28:	58d5      	ldr	r5, [r2, r3]
 800bf2a:	0324      	lsls	r4, r4, #12
 800bf2c:	432c      	orrs	r4, r5
 800bf2e:	50d4      	str	r4, [r2, r3]
 800bf30:	e66e      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800bf32:	23a8      	movs	r3, #168	; 0xa8
 800bf34:	4a69      	ldr	r2, [pc, #420]	; (800c0dc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf36:	4d6b      	ldr	r5, [pc, #428]	; (800c0e4 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800bf38:	58d4      	ldr	r4, [r2, r3]
 800bf3a:	402c      	ands	r4, r5
 800bf3c:	50d4      	str	r4, [r2, r3]
 800bf3e:	24c0      	movs	r4, #192	; 0xc0
 800bf40:	58d5      	ldr	r5, [r2, r3]
 800bf42:	0424      	lsls	r4, r4, #16
 800bf44:	432c      	orrs	r4, r5
 800bf46:	50d4      	str	r4, [r2, r3]
 800bf48:	e662      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800bf4a:	23a8      	movs	r3, #168	; 0xa8
 800bf4c:	25f0      	movs	r5, #240	; 0xf0
 800bf4e:	4a61      	ldr	r2, [pc, #388]	; (800c0d4 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800bf50:	58d4      	ldr	r4, [r2, r3]
 800bf52:	43ac      	bics	r4, r5
 800bf54:	50d4      	str	r4, [r2, r3]
 800bf56:	58d4      	ldr	r4, [r2, r3]
 800bf58:	3d30      	subs	r5, #48	; 0x30
 800bf5a:	432c      	orrs	r4, r5
 800bf5c:	50d4      	str	r4, [r2, r3]
 800bf5e:	e657      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800bf60:	23a8      	movs	r3, #168	; 0xa8
 800bf62:	250f      	movs	r5, #15
 800bf64:	4a5d      	ldr	r2, [pc, #372]	; (800c0dc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf66:	58d4      	ldr	r4, [r2, r3]
 800bf68:	43ac      	bics	r4, r5
 800bf6a:	50d4      	str	r4, [r2, r3]
 800bf6c:	58d4      	ldr	r4, [r2, r3]
 800bf6e:	3d02      	subs	r5, #2
 800bf70:	432c      	orrs	r4, r5
 800bf72:	50d4      	str	r4, [r2, r3]
 800bf74:	e64c      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800bf76:	4a59      	ldr	r2, [pc, #356]	; (800c0dc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf78:	e7b7      	b.n	800beea <RemapAndLinkDMAtoUARTRx+0x3ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800bf7a:	23a8      	movs	r3, #168	; 0xa8
 800bf7c:	4a57      	ldr	r2, [pc, #348]	; (800c0dc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf7e:	4d58      	ldr	r5, [pc, #352]	; (800c0e0 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800bf80:	58d4      	ldr	r4, [r2, r3]
 800bf82:	402c      	ands	r4, r5
 800bf84:	50d4      	str	r4, [r2, r3]
 800bf86:	24d0      	movs	r4, #208	; 0xd0
 800bf88:	58d5      	ldr	r5, [r2, r3]
 800bf8a:	0324      	lsls	r4, r4, #12
 800bf8c:	432c      	orrs	r4, r5
 800bf8e:	50d4      	str	r4, [r2, r3]
 800bf90:	e63e      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800bf92:	23a8      	movs	r3, #168	; 0xa8
 800bf94:	4a51      	ldr	r2, [pc, #324]	; (800c0dc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bf96:	4d53      	ldr	r5, [pc, #332]	; (800c0e4 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800bf98:	58d4      	ldr	r4, [r2, r3]
 800bf9a:	402c      	ands	r4, r5
 800bf9c:	50d4      	str	r4, [r2, r3]
 800bf9e:	24d0      	movs	r4, #208	; 0xd0
 800bfa0:	58d5      	ldr	r5, [r2, r3]
 800bfa2:	0424      	lsls	r4, r4, #16
 800bfa4:	432c      	orrs	r4, r5
 800bfa6:	50d4      	str	r4, [r2, r3]
 800bfa8:	e632      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800bfaa:	23a8      	movs	r3, #168	; 0xa8
 800bfac:	25f0      	movs	r5, #240	; 0xf0
 800bfae:	4a49      	ldr	r2, [pc, #292]	; (800c0d4 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800bfb0:	58d4      	ldr	r4, [r2, r3]
 800bfb2:	43ac      	bics	r4, r5
 800bfb4:	50d4      	str	r4, [r2, r3]
 800bfb6:	58d4      	ldr	r4, [r2, r3]
 800bfb8:	3d20      	subs	r5, #32
 800bfba:	432c      	orrs	r4, r5
 800bfbc:	50d4      	str	r4, [r2, r3]
 800bfbe:	e627      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800bfc0:	23a8      	movs	r3, #168	; 0xa8
 800bfc2:	250f      	movs	r5, #15
 800bfc4:	4a45      	ldr	r2, [pc, #276]	; (800c0dc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bfc6:	58d4      	ldr	r4, [r2, r3]
 800bfc8:	43ac      	bics	r4, r5
 800bfca:	50d4      	str	r4, [r2, r3]
 800bfcc:	58d4      	ldr	r4, [r2, r3]
 800bfce:	3d01      	subs	r5, #1
 800bfd0:	432c      	orrs	r4, r5
 800bfd2:	50d4      	str	r4, [r2, r3]
 800bfd4:	e61c      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800bfd6:	4a41      	ldr	r2, [pc, #260]	; (800c0dc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bfd8:	e5d5      	b.n	800bb86 <RemapAndLinkDMAtoUARTRx+0x6a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800bfda:	23a8      	movs	r3, #168	; 0xa8
 800bfdc:	4a3f      	ldr	r2, [pc, #252]	; (800c0dc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bfde:	4d40      	ldr	r5, [pc, #256]	; (800c0e0 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800bfe0:	58d4      	ldr	r4, [r2, r3]
 800bfe2:	402c      	ands	r4, r5
 800bfe4:	50d4      	str	r4, [r2, r3]
 800bfe6:	24e0      	movs	r4, #224	; 0xe0
 800bfe8:	58d5      	ldr	r5, [r2, r3]
 800bfea:	0324      	lsls	r4, r4, #12
 800bfec:	432c      	orrs	r4, r5
 800bfee:	50d4      	str	r4, [r2, r3]
 800bff0:	e60e      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800bff2:	23a8      	movs	r3, #168	; 0xa8
 800bff4:	4a39      	ldr	r2, [pc, #228]	; (800c0dc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800bff6:	4d3b      	ldr	r5, [pc, #236]	; (800c0e4 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800bff8:	58d4      	ldr	r4, [r2, r3]
 800bffa:	402c      	ands	r4, r5
 800bffc:	50d4      	str	r4, [r2, r3]
 800bffe:	24e0      	movs	r4, #224	; 0xe0
 800c000:	58d5      	ldr	r5, [r2, r3]
 800c002:	0424      	lsls	r4, r4, #16
 800c004:	432c      	orrs	r4, r5
 800c006:	50d4      	str	r4, [r2, r3]
 800c008:	e602      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800c00a:	23a8      	movs	r3, #168	; 0xa8
 800c00c:	25f0      	movs	r5, #240	; 0xf0
 800c00e:	4a31      	ldr	r2, [pc, #196]	; (800c0d4 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800c010:	58d4      	ldr	r4, [r2, r3]
 800c012:	43ac      	bics	r4, r5
 800c014:	50d4      	str	r4, [r2, r3]
 800c016:	58d4      	ldr	r4, [r2, r3]
 800c018:	3d10      	subs	r5, #16
 800c01a:	432c      	orrs	r4, r5
 800c01c:	50d4      	str	r4, [r2, r3]
 800c01e:	e5f7      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800c020:	4a31      	ldr	r2, [pc, #196]	; (800c0e8 <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d000      	beq.n	800c028 <RemapAndLinkDMAtoUARTRx+0x50c>
 800c026:	e5f3      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
 800c028:	680b      	ldr	r3, [r1, #0]
 800c02a:	4a24      	ldr	r2, [pc, #144]	; (800c0bc <RemapAndLinkDMAtoUARTRx+0x5a0>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d01b      	beq.n	800c068 <RemapAndLinkDMAtoUARTRx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800c030:	4a23      	ldr	r2, [pc, #140]	; (800c0c0 <RemapAndLinkDMAtoUARTRx+0x5a4>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d022      	beq.n	800c07c <RemapAndLinkDMAtoUARTRx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800c036:	4a23      	ldr	r2, [pc, #140]	; (800c0c4 <RemapAndLinkDMAtoUARTRx+0x5a8>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d021      	beq.n	800c080 <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800c03c:	4a22      	ldr	r2, [pc, #136]	; (800c0c8 <RemapAndLinkDMAtoUARTRx+0x5ac>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d02a      	beq.n	800c098 <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800c042:	4a22      	ldr	r2, [pc, #136]	; (800c0cc <RemapAndLinkDMAtoUARTRx+0x5b0>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d033      	beq.n	800c0b0 <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800c048:	4a21      	ldr	r2, [pc, #132]	; (800c0d0 <RemapAndLinkDMAtoUARTRx+0x5b4>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d000      	beq.n	800c050 <RemapAndLinkDMAtoUARTRx+0x534>
 800c04e:	e5df      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800c050:	4a20      	ldr	r2, [pc, #128]	; (800c0d4 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800c052:	23a8      	movs	r3, #168	; 0xa8
 800c054:	4d20      	ldr	r5, [pc, #128]	; (800c0d8 <RemapAndLinkDMAtoUARTRx+0x5bc>)
 800c056:	58d4      	ldr	r4, [r2, r3]
 800c058:	402c      	ands	r4, r5
 800c05a:	50d4      	str	r4, [r2, r3]
 800c05c:	24f0      	movs	r4, #240	; 0xf0
 800c05e:	58d5      	ldr	r5, [r2, r3]
 800c060:	0124      	lsls	r4, r4, #4
 800c062:	432c      	orrs	r4, r5
 800c064:	50d4      	str	r4, [r2, r3]
 800c066:	e5d3      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800c068:	23a8      	movs	r3, #168	; 0xa8
 800c06a:	260f      	movs	r6, #15
 800c06c:	4a1b      	ldr	r2, [pc, #108]	; (800c0dc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c06e:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800c070:	43b5      	bics	r5, r6
 800c072:	50d5      	str	r5, [r2, r3]
 800c074:	58d4      	ldr	r4, [r2, r3]
 800c076:	4334      	orrs	r4, r6
 800c078:	50d4      	str	r4, [r2, r3]
 800c07a:	e5c9      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800c07c:	4a17      	ldr	r2, [pc, #92]	; (800c0dc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c07e:	e7e8      	b.n	800c052 <RemapAndLinkDMAtoUARTRx+0x536>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800c080:	23a8      	movs	r3, #168	; 0xa8
 800c082:	4a16      	ldr	r2, [pc, #88]	; (800c0dc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c084:	4d16      	ldr	r5, [pc, #88]	; (800c0e0 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800c086:	58d4      	ldr	r4, [r2, r3]
 800c088:	402c      	ands	r4, r5
 800c08a:	50d4      	str	r4, [r2, r3]
 800c08c:	24f0      	movs	r4, #240	; 0xf0
 800c08e:	58d5      	ldr	r5, [r2, r3]
 800c090:	0324      	lsls	r4, r4, #12
 800c092:	432c      	orrs	r4, r5
 800c094:	50d4      	str	r4, [r2, r3]
 800c096:	e5bb      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800c098:	23a8      	movs	r3, #168	; 0xa8
 800c09a:	4a10      	ldr	r2, [pc, #64]	; (800c0dc <RemapAndLinkDMAtoUARTRx+0x5c0>)
 800c09c:	4d11      	ldr	r5, [pc, #68]	; (800c0e4 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800c09e:	58d4      	ldr	r4, [r2, r3]
 800c0a0:	402c      	ands	r4, r5
 800c0a2:	50d4      	str	r4, [r2, r3]
 800c0a4:	24f0      	movs	r4, #240	; 0xf0
 800c0a6:	58d5      	ldr	r5, [r2, r3]
 800c0a8:	0424      	lsls	r4, r4, #16
 800c0aa:	432c      	orrs	r4, r5
 800c0ac:	50d4      	str	r4, [r2, r3]
 800c0ae:	e5af      	b.n	800bc10 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800c0b0:	23a8      	movs	r3, #168	; 0xa8
 800c0b2:	4a08      	ldr	r2, [pc, #32]	; (800c0d4 <RemapAndLinkDMAtoUARTRx+0x5b8>)
 800c0b4:	26f0      	movs	r6, #240	; 0xf0
 800c0b6:	58d5      	ldr	r5, [r2, r3]
 800c0b8:	e7da      	b.n	800c070 <RemapAndLinkDMAtoUARTRx+0x554>
 800c0ba:	46c0      	nop			; (mov r8, r8)
 800c0bc:	40020008 	.word	0x40020008
 800c0c0:	40020030 	.word	0x40020030
 800c0c4:	40020058 	.word	0x40020058
 800c0c8:	4002006c 	.word	0x4002006c
 800c0cc:	4002041c 	.word	0x4002041c
 800c0d0:	40020430 	.word	0x40020430
 800c0d4:	40020400 	.word	0x40020400
 800c0d8:	fffff0ff 	.word	0xfffff0ff
 800c0dc:	40020000 	.word	0x40020000
 800c0e0:	fff0ffff 	.word	0xfff0ffff
 800c0e4:	ff0fffff 	.word	0xff0fffff
 800c0e8:	40011c00 	.word	0x40011c00

0800c0ec <DMA_MSG_RX_Setup>:
{	
 800c0ec:	b570      	push	{r4, r5, r6, lr}
 800c0ee:	000d      	movs	r5, r1
 800c0f0:	0004      	movs	r4, r0
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800c0f2:	f7ff fd13 	bl	800bb1c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c0f6:	0028      	movs	r0, r5
 800c0f8:	2100      	movs	r1, #0
 800c0fa:	f7ff fc59 	bl	800b9b0 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800c0fe:	0020      	movs	r0, r4
 800c100:	f7ff fb26 	bl	800b750 <GetPort>
 800c104:	3801      	subs	r0, #1
 800c106:	0041      	lsls	r1, r0, #1
 800c108:	1809      	adds	r1, r1, r0
 800c10a:	4804      	ldr	r0, [pc, #16]	; (800c11c <DMA_MSG_RX_Setup+0x30>)
 800c10c:	0189      	lsls	r1, r1, #6
 800c10e:	1809      	adds	r1, r1, r0
 800c110:	22c0      	movs	r2, #192	; 0xc0
 800c112:	0020      	movs	r0, r4
 800c114:	f005 fece 	bl	8011eb4 <HAL_UART_Receive_DMA>
}
 800c118:	bd70      	pop	{r4, r5, r6, pc}
 800c11a:	46c0      	nop			; (mov r8, r8)
 800c11c:	2000138c 	.word	0x2000138c

0800c120 <SetupMessagingRxDMAs>:
{	
 800c120:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800c122:	4c18      	ldr	r4, [pc, #96]	; (800c184 <SetupMessagingRxDMAs+0x64>)
 800c124:	7863      	ldrb	r3, [r4, #1]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d027      	beq.n	800c17a <SetupMessagingRxDMAs+0x5a>
	if (portStatus[P2] == FREE)	
 800c12a:	78a3      	ldrb	r3, [r4, #2]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d01f      	beq.n	800c170 <SetupMessagingRxDMAs+0x50>
	if (portStatus[P3] == FREE)
 800c130:	78e3      	ldrb	r3, [r4, #3]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d017      	beq.n	800c166 <SetupMessagingRxDMAs+0x46>
	if (portStatus[P4] == FREE)
 800c136:	7923      	ldrb	r3, [r4, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d00f      	beq.n	800c15c <SetupMessagingRxDMAs+0x3c>
	if (portStatus[P5] == FREE)
 800c13c:	7963      	ldrb	r3, [r4, #5]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d007      	beq.n	800c152 <SetupMessagingRxDMAs+0x32>
	if (portStatus[P6] == FREE)
 800c142:	79a3      	ldrb	r3, [r4, #6]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d103      	bne.n	800c150 <SetupMessagingRxDMAs+0x30>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800c148:	490f      	ldr	r1, [pc, #60]	; (800c188 <SetupMessagingRxDMAs+0x68>)
 800c14a:	4810      	ldr	r0, [pc, #64]	; (800c18c <SetupMessagingRxDMAs+0x6c>)
 800c14c:	f7ff ffce 	bl	800c0ec <DMA_MSG_RX_Setup>
}
 800c150:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800c152:	490f      	ldr	r1, [pc, #60]	; (800c190 <SetupMessagingRxDMAs+0x70>)
 800c154:	480f      	ldr	r0, [pc, #60]	; (800c194 <SetupMessagingRxDMAs+0x74>)
 800c156:	f7ff ffc9 	bl	800c0ec <DMA_MSG_RX_Setup>
 800c15a:	e7f2      	b.n	800c142 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800c15c:	490e      	ldr	r1, [pc, #56]	; (800c198 <SetupMessagingRxDMAs+0x78>)
 800c15e:	480f      	ldr	r0, [pc, #60]	; (800c19c <SetupMessagingRxDMAs+0x7c>)
 800c160:	f7ff ffc4 	bl	800c0ec <DMA_MSG_RX_Setup>
 800c164:	e7ea      	b.n	800c13c <SetupMessagingRxDMAs+0x1c>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800c166:	490e      	ldr	r1, [pc, #56]	; (800c1a0 <SetupMessagingRxDMAs+0x80>)
 800c168:	480e      	ldr	r0, [pc, #56]	; (800c1a4 <SetupMessagingRxDMAs+0x84>)
 800c16a:	f7ff ffbf 	bl	800c0ec <DMA_MSG_RX_Setup>
 800c16e:	e7e2      	b.n	800c136 <SetupMessagingRxDMAs+0x16>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800c170:	490d      	ldr	r1, [pc, #52]	; (800c1a8 <SetupMessagingRxDMAs+0x88>)
 800c172:	480e      	ldr	r0, [pc, #56]	; (800c1ac <SetupMessagingRxDMAs+0x8c>)
 800c174:	f7ff ffba 	bl	800c0ec <DMA_MSG_RX_Setup>
 800c178:	e7da      	b.n	800c130 <SetupMessagingRxDMAs+0x10>
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800c17a:	490d      	ldr	r1, [pc, #52]	; (800c1b0 <SetupMessagingRxDMAs+0x90>)
 800c17c:	480d      	ldr	r0, [pc, #52]	; (800c1b4 <SetupMessagingRxDMAs+0x94>)
 800c17e:	f7ff ffb5 	bl	800c0ec <DMA_MSG_RX_Setup>
 800c182:	e7d2      	b.n	800c12a <SetupMessagingRxDMAs+0xa>
 800c184:	20000c2c 	.word	0x20000c2c
 800c188:	20001f88 	.word	0x20001f88
 800c18c:	20007198 	.word	0x20007198
 800c190:	20001f50 	.word	0x20001f50
 800c194:	20007048 	.word	0x20007048
 800c198:	20001f18 	.word	0x20001f18
 800c19c:	200070b8 	.word	0x200070b8
 800c1a0:	20001ee0 	.word	0x20001ee0
 800c1a4:	20006fd8 	.word	0x20006fd8
 800c1a8:	20001ea8 	.word	0x20001ea8
 800c1ac:	20007128 	.word	0x20007128
 800c1b0:	20001e70 	.word	0x20001e70
 800c1b4:	20007208 	.word	0x20007208

0800c1b8 <DMA_STREAM_Setup>:
{	
 800c1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ba:	0016      	movs	r6, r2
 800c1bc:	0005      	movs	r5, r0
 800c1be:	000f      	movs	r7, r1
	uint8_t port = GetPort(huartSrc);
 800c1c0:	f7ff fac6 	bl	800b750 <GetPort>
	hDMA = &streamDMA[port-1];
 800c1c4:	3801      	subs	r0, #1
 800c1c6:	00c4      	lsls	r4, r0, #3
 800c1c8:	1a24      	subs	r4, r4, r0
 800c1ca:	480a      	ldr	r0, [pc, #40]	; (800c1f4 <DMA_STREAM_Setup+0x3c>)
 800c1cc:	00e4      	lsls	r4, r4, #3
 800c1ce:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800c1d0:	0021      	movs	r1, r4
 800c1d2:	0028      	movs	r0, r5
 800c1d4:	f7ff fca2 	bl	800bb1c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800c1d8:	0020      	movs	r0, r4
 800c1da:	2101      	movs	r1, #1
 800c1dc:	f7ff fbe8 	bl	800b9b0 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800c1e0:	2369      	movs	r3, #105	; 0x69
 800c1e2:	2201      	movs	r2, #1
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c1e4:	6839      	ldr	r1, [r7, #0]
	huartSrc->State = HAL_UART_STATE_READY;
 800c1e6:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c1e8:	0028      	movs	r0, r5
 800c1ea:	0032      	movs	r2, r6
 800c1ec:	3128      	adds	r1, #40	; 0x28
 800c1ee:	f005 fe61 	bl	8011eb4 <HAL_UART_Receive_DMA>
}
 800c1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1f4:	20001c78 	.word	0x20001c78

0800c1f8 <RemapAndLinkDMAtoUARTTx>:
/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c1f8:	6803      	ldr	r3, [r0, #0]
 800c1fa:	4ac6      	ldr	r2, [pc, #792]	; (800c514 <RemapAndLinkDMAtoUARTTx+0x31c>)
{
 800c1fc:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d03a      	beq.n	800c278 <RemapAndLinkDMAtoUARTTx+0x80>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c202:	4ac5      	ldr	r2, [pc, #788]	; (800c518 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d058      	beq.n	800c2ba <RemapAndLinkDMAtoUARTTx+0xc2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c208:	4ac4      	ldr	r2, [pc, #784]	; (800c51c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d100      	bne.n	800c210 <RemapAndLinkDMAtoUARTTx+0x18>
 800c20e:	e093      	b.n	800c338 <RemapAndLinkDMAtoUARTTx+0x140>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c210:	4ac3      	ldr	r2, [pc, #780]	; (800c520 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d100      	bne.n	800c218 <RemapAndLinkDMAtoUARTTx+0x20>
 800c216:	e0c0      	b.n	800c39a <RemapAndLinkDMAtoUARTTx+0x1a2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c218:	4ac2      	ldr	r2, [pc, #776]	; (800c524 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d100      	bne.n	800c220 <RemapAndLinkDMAtoUARTTx+0x28>
 800c21e:	e19d      	b.n	800c55c <RemapAndLinkDMAtoUARTTx+0x364>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800c220:	4ac1      	ldr	r2, [pc, #772]	; (800c528 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d100      	bne.n	800c228 <RemapAndLinkDMAtoUARTTx+0x30>
 800c226:	e1b9      	b.n	800c59c <RemapAndLinkDMAtoUARTTx+0x3a4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800c228:	4ac0      	ldr	r2, [pc, #768]	; (800c52c <RemapAndLinkDMAtoUARTTx+0x334>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d000      	beq.n	800c230 <RemapAndLinkDMAtoUARTTx+0x38>
 800c22e:	e265      	b.n	800c6fc <RemapAndLinkDMAtoUARTTx+0x504>
 800c230:	680b      	ldr	r3, [r1, #0]
 800c232:	4abf      	ldr	r2, [pc, #764]	; (800c530 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d100      	bne.n	800c23a <RemapAndLinkDMAtoUARTTx+0x42>
 800c238:	e230      	b.n	800c69c <RemapAndLinkDMAtoUARTTx+0x4a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800c23a:	4abe      	ldr	r2, [pc, #760]	; (800c534 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d100      	bne.n	800c242 <RemapAndLinkDMAtoUARTTx+0x4a>
 800c240:	e237      	b.n	800c6b2 <RemapAndLinkDMAtoUARTTx+0x4ba>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800c242:	4abd      	ldr	r2, [pc, #756]	; (800c538 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d100      	bne.n	800c24a <RemapAndLinkDMAtoUARTTx+0x52>
 800c248:	e23f      	b.n	800c6ca <RemapAndLinkDMAtoUARTTx+0x4d2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800c24a:	4abc      	ldr	r2, [pc, #752]	; (800c53c <RemapAndLinkDMAtoUARTTx+0x344>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d100      	bne.n	800c252 <RemapAndLinkDMAtoUARTTx+0x5a>
 800c250:	e247      	b.n	800c6e2 <RemapAndLinkDMAtoUARTTx+0x4ea>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800c252:	4abb      	ldr	r2, [pc, #748]	; (800c540 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d100      	bne.n	800c25a <RemapAndLinkDMAtoUARTTx+0x62>
 800c258:	e24e      	b.n	800c6f8 <RemapAndLinkDMAtoUARTTx+0x500>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800c25a:	4aba      	ldr	r2, [pc, #744]	; (800c544 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d145      	bne.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800c260:	23a8      	movs	r3, #168	; 0xa8
 800c262:	4ab9      	ldr	r2, [pc, #740]	; (800c548 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c264:	4db9      	ldr	r5, [pc, #740]	; (800c54c <RemapAndLinkDMAtoUARTTx+0x354>)
 800c266:	58d4      	ldr	r4, [r2, r3]
 800c268:	402c      	ands	r4, r5
 800c26a:	50d4      	str	r4, [r2, r3]
 800c26c:	24e0      	movs	r4, #224	; 0xe0
 800c26e:	58d5      	ldr	r5, [r2, r3]
 800c270:	0324      	lsls	r4, r4, #12
 800c272:	432c      	orrs	r4, r5
 800c274:	50d4      	str	r4, [r2, r3]
 800c276:	e039      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c278:	680b      	ldr	r3, [r1, #0]
 800c27a:	4aad      	ldr	r2, [pc, #692]	; (800c530 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d100      	bne.n	800c282 <RemapAndLinkDMAtoUARTTx+0x8a>
 800c280:	e07e      	b.n	800c380 <RemapAndLinkDMAtoUARTTx+0x188>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800c282:	4aac      	ldr	r2, [pc, #688]	; (800c534 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d100      	bne.n	800c28a <RemapAndLinkDMAtoUARTTx+0x92>
 800c288:	e085      	b.n	800c396 <RemapAndLinkDMAtoUARTTx+0x19e>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800c28a:	4aab      	ldr	r2, [pc, #684]	; (800c538 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d030      	beq.n	800c2f2 <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800c290:	4aaa      	ldr	r2, [pc, #680]	; (800c53c <RemapAndLinkDMAtoUARTTx+0x344>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d039      	beq.n	800c30a <RemapAndLinkDMAtoUARTTx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800c296:	4aaa      	ldr	r2, [pc, #680]	; (800c540 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d041      	beq.n	800c320 <RemapAndLinkDMAtoUARTTx+0x128>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800c29c:	4aa9      	ldr	r2, [pc, #676]	; (800c544 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d124      	bne.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800c2a2:	23a8      	movs	r3, #168	; 0xa8
 800c2a4:	4aa8      	ldr	r2, [pc, #672]	; (800c548 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c2a6:	4da9      	ldr	r5, [pc, #676]	; (800c54c <RemapAndLinkDMAtoUARTTx+0x354>)
 800c2a8:	58d4      	ldr	r4, [r2, r3]
 800c2aa:	402c      	ands	r4, r5
 800c2ac:	50d4      	str	r4, [r2, r3]
 800c2ae:	2480      	movs	r4, #128	; 0x80
 800c2b0:	58d5      	ldr	r5, [r2, r3]
 800c2b2:	0324      	lsls	r4, r4, #12
 800c2b4:	432c      	orrs	r4, r5
 800c2b6:	50d4      	str	r4, [r2, r3]
 800c2b8:	e018      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c2ba:	680b      	ldr	r3, [r1, #0]
 800c2bc:	4a9c      	ldr	r2, [pc, #624]	; (800c530 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d100      	bne.n	800c2c4 <RemapAndLinkDMAtoUARTTx+0xcc>
 800c2c2:	e0b9      	b.n	800c438 <RemapAndLinkDMAtoUARTTx+0x240>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800c2c4:	4a9b      	ldr	r2, [pc, #620]	; (800c534 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d100      	bne.n	800c2cc <RemapAndLinkDMAtoUARTTx+0xd4>
 800c2ca:	e0c0      	b.n	800c44e <RemapAndLinkDMAtoUARTTx+0x256>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800c2cc:	4a9a      	ldr	r2, [pc, #616]	; (800c538 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d100      	bne.n	800c2d4 <RemapAndLinkDMAtoUARTTx+0xdc>
 800c2d2:	e0c8      	b.n	800c466 <RemapAndLinkDMAtoUARTTx+0x26e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800c2d4:	4a99      	ldr	r2, [pc, #612]	; (800c53c <RemapAndLinkDMAtoUARTTx+0x344>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d100      	bne.n	800c2dc <RemapAndLinkDMAtoUARTTx+0xe4>
 800c2da:	e0d0      	b.n	800c47e <RemapAndLinkDMAtoUARTTx+0x286>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800c2dc:	4a98      	ldr	r2, [pc, #608]	; (800c540 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d100      	bne.n	800c2e4 <RemapAndLinkDMAtoUARTTx+0xec>
 800c2e2:	e0d7      	b.n	800c494 <RemapAndLinkDMAtoUARTTx+0x29c>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800c2e4:	4a97      	ldr	r2, [pc, #604]	; (800c544 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d100      	bne.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
 800c2ea:	e0d5      	b.n	800c498 <RemapAndLinkDMAtoUARTTx+0x2a0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800c2ec:	6601      	str	r1, [r0, #96]	; 0x60
 800c2ee:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c2f0:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800c2f2:	23a8      	movs	r3, #168	; 0xa8
 800c2f4:	4a96      	ldr	r2, [pc, #600]	; (800c550 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c2f6:	4d97      	ldr	r5, [pc, #604]	; (800c554 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c2f8:	58d4      	ldr	r4, [r2, r3]
 800c2fa:	402c      	ands	r4, r5
 800c2fc:	50d4      	str	r4, [r2, r3]
 800c2fe:	2480      	movs	r4, #128	; 0x80
 800c300:	58d5      	ldr	r5, [r2, r3]
 800c302:	0524      	lsls	r4, r4, #20
 800c304:	432c      	orrs	r4, r5
 800c306:	50d4      	str	r4, [r2, r3]
 800c308:	e7f0      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800c30a:	23a8      	movs	r3, #168	; 0xa8
 800c30c:	250f      	movs	r5, #15
 800c30e:	4a8e      	ldr	r2, [pc, #568]	; (800c548 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c310:	58d4      	ldr	r4, [r2, r3]
 800c312:	43ac      	bics	r4, r5
 800c314:	50d4      	str	r4, [r2, r3]
 800c316:	58d4      	ldr	r4, [r2, r3]
 800c318:	3d07      	subs	r5, #7
 800c31a:	432c      	orrs	r4, r5
 800c31c:	50d4      	str	r4, [r2, r3]
 800c31e:	e7e5      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800c320:	4a89      	ldr	r2, [pc, #548]	; (800c548 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c322:	23a8      	movs	r3, #168	; 0xa8
 800c324:	4d8c      	ldr	r5, [pc, #560]	; (800c558 <RemapAndLinkDMAtoUARTTx+0x360>)
 800c326:	58d4      	ldr	r4, [r2, r3]
 800c328:	402c      	ands	r4, r5
 800c32a:	50d4      	str	r4, [r2, r3]
 800c32c:	2480      	movs	r4, #128	; 0x80
 800c32e:	58d5      	ldr	r5, [r2, r3]
 800c330:	0224      	lsls	r4, r4, #8
 800c332:	432c      	orrs	r4, r5
 800c334:	50d4      	str	r4, [r2, r3]
 800c336:	e7d9      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c338:	680b      	ldr	r3, [r1, #0]
 800c33a:	4a7d      	ldr	r2, [pc, #500]	; (800c530 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d100      	bne.n	800c342 <RemapAndLinkDMAtoUARTTx+0x14a>
 800c340:	e0b6      	b.n	800c4b0 <RemapAndLinkDMAtoUARTTx+0x2b8>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800c342:	4a7c      	ldr	r2, [pc, #496]	; (800c534 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d100      	bne.n	800c34a <RemapAndLinkDMAtoUARTTx+0x152>
 800c348:	e0bd      	b.n	800c4c6 <RemapAndLinkDMAtoUARTTx+0x2ce>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800c34a:	4a7b      	ldr	r2, [pc, #492]	; (800c538 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d100      	bne.n	800c352 <RemapAndLinkDMAtoUARTTx+0x15a>
 800c350:	e0c5      	b.n	800c4de <RemapAndLinkDMAtoUARTTx+0x2e6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800c352:	4a7a      	ldr	r2, [pc, #488]	; (800c53c <RemapAndLinkDMAtoUARTTx+0x344>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d100      	bne.n	800c35a <RemapAndLinkDMAtoUARTTx+0x162>
 800c358:	e0cd      	b.n	800c4f6 <RemapAndLinkDMAtoUARTTx+0x2fe>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800c35a:	4a79      	ldr	r2, [pc, #484]	; (800c540 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d100      	bne.n	800c362 <RemapAndLinkDMAtoUARTTx+0x16a>
 800c360:	e0d4      	b.n	800c50c <RemapAndLinkDMAtoUARTTx+0x314>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800c362:	4a78      	ldr	r2, [pc, #480]	; (800c544 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d1c1      	bne.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800c368:	23a8      	movs	r3, #168	; 0xa8
 800c36a:	4a77      	ldr	r2, [pc, #476]	; (800c548 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c36c:	4d77      	ldr	r5, [pc, #476]	; (800c54c <RemapAndLinkDMAtoUARTTx+0x354>)
 800c36e:	58d4      	ldr	r4, [r2, r3]
 800c370:	402c      	ands	r4, r5
 800c372:	50d4      	str	r4, [r2, r3]
 800c374:	24a0      	movs	r4, #160	; 0xa0
 800c376:	58d5      	ldr	r5, [r2, r3]
 800c378:	0324      	lsls	r4, r4, #12
 800c37a:	432c      	orrs	r4, r5
 800c37c:	50d4      	str	r4, [r2, r3]
 800c37e:	e7b5      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800c380:	23a8      	movs	r3, #168	; 0xa8
 800c382:	25f0      	movs	r5, #240	; 0xf0
 800c384:	4a72      	ldr	r2, [pc, #456]	; (800c550 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c386:	58d4      	ldr	r4, [r2, r3]
 800c388:	43ac      	bics	r4, r5
 800c38a:	50d4      	str	r4, [r2, r3]
 800c38c:	58d4      	ldr	r4, [r2, r3]
 800c38e:	3d70      	subs	r5, #112	; 0x70
 800c390:	432c      	orrs	r4, r5
 800c392:	50d4      	str	r4, [r2, r3]
 800c394:	e7aa      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800c396:	4a6e      	ldr	r2, [pc, #440]	; (800c550 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c398:	e7c3      	b.n	800c322 <RemapAndLinkDMAtoUARTTx+0x12a>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c39a:	680b      	ldr	r3, [r1, #0]
 800c39c:	4a64      	ldr	r2, [pc, #400]	; (800c530 <RemapAndLinkDMAtoUARTTx+0x338>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d01c      	beq.n	800c3dc <RemapAndLinkDMAtoUARTTx+0x1e4>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800c3a2:	4a64      	ldr	r2, [pc, #400]	; (800c534 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d024      	beq.n	800c3f2 <RemapAndLinkDMAtoUARTTx+0x1fa>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800c3a8:	4a63      	ldr	r2, [pc, #396]	; (800c538 <RemapAndLinkDMAtoUARTTx+0x340>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d02d      	beq.n	800c40a <RemapAndLinkDMAtoUARTTx+0x212>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800c3ae:	4a63      	ldr	r2, [pc, #396]	; (800c53c <RemapAndLinkDMAtoUARTTx+0x344>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d036      	beq.n	800c422 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800c3b4:	4a62      	ldr	r2, [pc, #392]	; (800c540 <RemapAndLinkDMAtoUARTTx+0x348>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d100      	bne.n	800c3bc <RemapAndLinkDMAtoUARTTx+0x1c4>
 800c3ba:	e0a9      	b.n	800c510 <RemapAndLinkDMAtoUARTTx+0x318>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800c3bc:	4a61      	ldr	r2, [pc, #388]	; (800c544 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d000      	beq.n	800c3c4 <RemapAndLinkDMAtoUARTTx+0x1cc>
 800c3c2:	e793      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800c3c4:	23a8      	movs	r3, #168	; 0xa8
 800c3c6:	4a60      	ldr	r2, [pc, #384]	; (800c548 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c3c8:	4d60      	ldr	r5, [pc, #384]	; (800c54c <RemapAndLinkDMAtoUARTTx+0x354>)
 800c3ca:	58d4      	ldr	r4, [r2, r3]
 800c3cc:	402c      	ands	r4, r5
 800c3ce:	50d4      	str	r4, [r2, r3]
 800c3d0:	24b0      	movs	r4, #176	; 0xb0
 800c3d2:	58d5      	ldr	r5, [r2, r3]
 800c3d4:	0324      	lsls	r4, r4, #12
 800c3d6:	432c      	orrs	r4, r5
 800c3d8:	50d4      	str	r4, [r2, r3]
 800c3da:	e787      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800c3dc:	23a8      	movs	r3, #168	; 0xa8
 800c3de:	25f0      	movs	r5, #240	; 0xf0
 800c3e0:	4a5b      	ldr	r2, [pc, #364]	; (800c550 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c3e2:	58d4      	ldr	r4, [r2, r3]
 800c3e4:	43ac      	bics	r4, r5
 800c3e6:	50d4      	str	r4, [r2, r3]
 800c3e8:	58d4      	ldr	r4, [r2, r3]
 800c3ea:	3d40      	subs	r5, #64	; 0x40
 800c3ec:	432c      	orrs	r4, r5
 800c3ee:	50d4      	str	r4, [r2, r3]
 800c3f0:	e77c      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800c3f2:	4a57      	ldr	r2, [pc, #348]	; (800c550 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800c3f4:	23a8      	movs	r3, #168	; 0xa8
 800c3f6:	4d58      	ldr	r5, [pc, #352]	; (800c558 <RemapAndLinkDMAtoUARTTx+0x360>)
 800c3f8:	58d4      	ldr	r4, [r2, r3]
 800c3fa:	402c      	ands	r4, r5
 800c3fc:	50d4      	str	r4, [r2, r3]
 800c3fe:	24b0      	movs	r4, #176	; 0xb0
 800c400:	58d5      	ldr	r5, [r2, r3]
 800c402:	0224      	lsls	r4, r4, #8
 800c404:	432c      	orrs	r4, r5
 800c406:	50d4      	str	r4, [r2, r3]
 800c408:	e770      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800c40a:	23a8      	movs	r3, #168	; 0xa8
 800c40c:	4a50      	ldr	r2, [pc, #320]	; (800c550 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c40e:	4d51      	ldr	r5, [pc, #324]	; (800c554 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c410:	58d4      	ldr	r4, [r2, r3]
 800c412:	402c      	ands	r4, r5
 800c414:	50d4      	str	r4, [r2, r3]
 800c416:	24b0      	movs	r4, #176	; 0xb0
 800c418:	58d5      	ldr	r5, [r2, r3]
 800c41a:	0524      	lsls	r4, r4, #20
 800c41c:	432c      	orrs	r4, r5
 800c41e:	50d4      	str	r4, [r2, r3]
 800c420:	e764      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800c422:	23a8      	movs	r3, #168	; 0xa8
 800c424:	250f      	movs	r5, #15
 800c426:	4a48      	ldr	r2, [pc, #288]	; (800c548 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c428:	58d4      	ldr	r4, [r2, r3]
 800c42a:	43ac      	bics	r4, r5
 800c42c:	50d4      	str	r4, [r2, r3]
 800c42e:	58d4      	ldr	r4, [r2, r3]
 800c430:	3d04      	subs	r5, #4
 800c432:	432c      	orrs	r4, r5
 800c434:	50d4      	str	r4, [r2, r3]
 800c436:	e759      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800c438:	23a8      	movs	r3, #168	; 0xa8
 800c43a:	25f0      	movs	r5, #240	; 0xf0
 800c43c:	4a44      	ldr	r2, [pc, #272]	; (800c550 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c43e:	58d4      	ldr	r4, [r2, r3]
 800c440:	43ac      	bics	r4, r5
 800c442:	50d4      	str	r4, [r2, r3]
 800c444:	58d4      	ldr	r4, [r2, r3]
 800c446:	3d60      	subs	r5, #96	; 0x60
 800c448:	432c      	orrs	r4, r5
 800c44a:	50d4      	str	r4, [r2, r3]
 800c44c:	e74e      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800c44e:	4a40      	ldr	r2, [pc, #256]	; (800c550 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800c450:	23a8      	movs	r3, #168	; 0xa8
 800c452:	4d41      	ldr	r5, [pc, #260]	; (800c558 <RemapAndLinkDMAtoUARTTx+0x360>)
 800c454:	58d4      	ldr	r4, [r2, r3]
 800c456:	402c      	ands	r4, r5
 800c458:	50d4      	str	r4, [r2, r3]
 800c45a:	2490      	movs	r4, #144	; 0x90
 800c45c:	58d5      	ldr	r5, [r2, r3]
 800c45e:	0224      	lsls	r4, r4, #8
 800c460:	432c      	orrs	r4, r5
 800c462:	50d4      	str	r4, [r2, r3]
 800c464:	e742      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800c466:	23a8      	movs	r3, #168	; 0xa8
 800c468:	4a39      	ldr	r2, [pc, #228]	; (800c550 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c46a:	4d3a      	ldr	r5, [pc, #232]	; (800c554 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c46c:	58d4      	ldr	r4, [r2, r3]
 800c46e:	402c      	ands	r4, r5
 800c470:	50d4      	str	r4, [r2, r3]
 800c472:	2490      	movs	r4, #144	; 0x90
 800c474:	58d5      	ldr	r5, [r2, r3]
 800c476:	0524      	lsls	r4, r4, #20
 800c478:	432c      	orrs	r4, r5
 800c47a:	50d4      	str	r4, [r2, r3]
 800c47c:	e736      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800c47e:	23a8      	movs	r3, #168	; 0xa8
 800c480:	250f      	movs	r5, #15
 800c482:	4a31      	ldr	r2, [pc, #196]	; (800c548 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c484:	58d4      	ldr	r4, [r2, r3]
 800c486:	43ac      	bics	r4, r5
 800c488:	50d4      	str	r4, [r2, r3]
 800c48a:	58d4      	ldr	r4, [r2, r3]
 800c48c:	3d06      	subs	r5, #6
 800c48e:	432c      	orrs	r4, r5
 800c490:	50d4      	str	r4, [r2, r3]
 800c492:	e72b      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800c494:	4a2c      	ldr	r2, [pc, #176]	; (800c548 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c496:	e7db      	b.n	800c450 <RemapAndLinkDMAtoUARTTx+0x258>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800c498:	23a8      	movs	r3, #168	; 0xa8
 800c49a:	4a2b      	ldr	r2, [pc, #172]	; (800c548 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c49c:	4d2b      	ldr	r5, [pc, #172]	; (800c54c <RemapAndLinkDMAtoUARTTx+0x354>)
 800c49e:	58d4      	ldr	r4, [r2, r3]
 800c4a0:	402c      	ands	r4, r5
 800c4a2:	50d4      	str	r4, [r2, r3]
 800c4a4:	2490      	movs	r4, #144	; 0x90
 800c4a6:	58d5      	ldr	r5, [r2, r3]
 800c4a8:	0324      	lsls	r4, r4, #12
 800c4aa:	432c      	orrs	r4, r5
 800c4ac:	50d4      	str	r4, [r2, r3]
 800c4ae:	e71d      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800c4b0:	23a8      	movs	r3, #168	; 0xa8
 800c4b2:	25f0      	movs	r5, #240	; 0xf0
 800c4b4:	4a26      	ldr	r2, [pc, #152]	; (800c550 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c4b6:	58d4      	ldr	r4, [r2, r3]
 800c4b8:	43ac      	bics	r4, r5
 800c4ba:	50d4      	str	r4, [r2, r3]
 800c4bc:	58d4      	ldr	r4, [r2, r3]
 800c4be:	3d50      	subs	r5, #80	; 0x50
 800c4c0:	432c      	orrs	r4, r5
 800c4c2:	50d4      	str	r4, [r2, r3]
 800c4c4:	e712      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800c4c6:	4a22      	ldr	r2, [pc, #136]	; (800c550 <RemapAndLinkDMAtoUARTTx+0x358>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800c4c8:	23a8      	movs	r3, #168	; 0xa8
 800c4ca:	4d23      	ldr	r5, [pc, #140]	; (800c558 <RemapAndLinkDMAtoUARTTx+0x360>)
 800c4cc:	58d4      	ldr	r4, [r2, r3]
 800c4ce:	402c      	ands	r4, r5
 800c4d0:	50d4      	str	r4, [r2, r3]
 800c4d2:	24a0      	movs	r4, #160	; 0xa0
 800c4d4:	58d5      	ldr	r5, [r2, r3]
 800c4d6:	0224      	lsls	r4, r4, #8
 800c4d8:	432c      	orrs	r4, r5
 800c4da:	50d4      	str	r4, [r2, r3]
 800c4dc:	e706      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800c4de:	23a8      	movs	r3, #168	; 0xa8
 800c4e0:	4a1b      	ldr	r2, [pc, #108]	; (800c550 <RemapAndLinkDMAtoUARTTx+0x358>)
 800c4e2:	4d1c      	ldr	r5, [pc, #112]	; (800c554 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800c4e4:	58d4      	ldr	r4, [r2, r3]
 800c4e6:	402c      	ands	r4, r5
 800c4e8:	50d4      	str	r4, [r2, r3]
 800c4ea:	24a0      	movs	r4, #160	; 0xa0
 800c4ec:	58d5      	ldr	r5, [r2, r3]
 800c4ee:	0524      	lsls	r4, r4, #20
 800c4f0:	432c      	orrs	r4, r5
 800c4f2:	50d4      	str	r4, [r2, r3]
 800c4f4:	e6fa      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800c4f6:	23a8      	movs	r3, #168	; 0xa8
 800c4f8:	250f      	movs	r5, #15
 800c4fa:	4a13      	ldr	r2, [pc, #76]	; (800c548 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c4fc:	58d4      	ldr	r4, [r2, r3]
 800c4fe:	43ac      	bics	r4, r5
 800c500:	50d4      	str	r4, [r2, r3]
 800c502:	58d4      	ldr	r4, [r2, r3]
 800c504:	3d05      	subs	r5, #5
 800c506:	432c      	orrs	r4, r5
 800c508:	50d4      	str	r4, [r2, r3]
 800c50a:	e6ef      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800c50c:	4a0e      	ldr	r2, [pc, #56]	; (800c548 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c50e:	e7db      	b.n	800c4c8 <RemapAndLinkDMAtoUARTTx+0x2d0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800c510:	4a0d      	ldr	r2, [pc, #52]	; (800c548 <RemapAndLinkDMAtoUARTTx+0x350>)
 800c512:	e76f      	b.n	800c3f4 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800c514:	40013800 	.word	0x40013800
 800c518:	40004400 	.word	0x40004400
 800c51c:	40004800 	.word	0x40004800
 800c520:	40004c00 	.word	0x40004c00
 800c524:	40005000 	.word	0x40005000
 800c528:	40011400 	.word	0x40011400
 800c52c:	40011800 	.word	0x40011800
 800c530:	4002001c 	.word	0x4002001c
 800c534:	40020044 	.word	0x40020044
 800c538:	40020080 	.word	0x40020080
 800c53c:	40020408 	.word	0x40020408
 800c540:	40020444 	.word	0x40020444
 800c544:	40020458 	.word	0x40020458
 800c548:	40020400 	.word	0x40020400
 800c54c:	fff0ffff 	.word	0xfff0ffff
 800c550:	40020000 	.word	0x40020000
 800c554:	f0ffffff 	.word	0xf0ffffff
 800c558:	ffff0fff 	.word	0xffff0fff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c55c:	680b      	ldr	r3, [r1, #0]
 800c55e:	4a8e      	ldr	r2, [pc, #568]	; (800c798 <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d03b      	beq.n	800c5dc <RemapAndLinkDMAtoUARTTx+0x3e4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800c564:	4a8d      	ldr	r2, [pc, #564]	; (800c79c <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d043      	beq.n	800c5f2 <RemapAndLinkDMAtoUARTTx+0x3fa>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800c56a:	4a8d      	ldr	r2, [pc, #564]	; (800c7a0 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d04c      	beq.n	800c60a <RemapAndLinkDMAtoUARTTx+0x412>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800c570:	4a8c      	ldr	r2, [pc, #560]	; (800c7a4 <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d055      	beq.n	800c622 <RemapAndLinkDMAtoUARTTx+0x42a>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800c576:	4a8c      	ldr	r2, [pc, #560]	; (800c7a8 <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d05d      	beq.n	800c638 <RemapAndLinkDMAtoUARTTx+0x440>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800c57c:	4a8b      	ldr	r2, [pc, #556]	; (800c7ac <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d000      	beq.n	800c584 <RemapAndLinkDMAtoUARTTx+0x38c>
 800c582:	e6b3      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800c584:	23a8      	movs	r3, #168	; 0xa8
 800c586:	4a8a      	ldr	r2, [pc, #552]	; (800c7b0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c588:	4d8a      	ldr	r5, [pc, #552]	; (800c7b4 <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800c58a:	58d4      	ldr	r4, [r2, r3]
 800c58c:	402c      	ands	r4, r5
 800c58e:	50d4      	str	r4, [r2, r3]
 800c590:	24c0      	movs	r4, #192	; 0xc0
 800c592:	58d5      	ldr	r5, [r2, r3]
 800c594:	0324      	lsls	r4, r4, #12
 800c596:	432c      	orrs	r4, r5
 800c598:	50d4      	str	r4, [r2, r3]
 800c59a:	e6a7      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800c59c:	680b      	ldr	r3, [r1, #0]
 800c59e:	4a7e      	ldr	r2, [pc, #504]	; (800c798 <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d04b      	beq.n	800c63c <RemapAndLinkDMAtoUARTTx+0x444>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800c5a4:	4a7d      	ldr	r2, [pc, #500]	; (800c79c <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d053      	beq.n	800c652 <RemapAndLinkDMAtoUARTTx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800c5aa:	4a7d      	ldr	r2, [pc, #500]	; (800c7a0 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d05c      	beq.n	800c66a <RemapAndLinkDMAtoUARTTx+0x472>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800c5b0:	4a7c      	ldr	r2, [pc, #496]	; (800c7a4 <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d065      	beq.n	800c682 <RemapAndLinkDMAtoUARTTx+0x48a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800c5b6:	4a7c      	ldr	r2, [pc, #496]	; (800c7a8 <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d06d      	beq.n	800c698 <RemapAndLinkDMAtoUARTTx+0x4a0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800c5bc:	4a7b      	ldr	r2, [pc, #492]	; (800c7ac <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d000      	beq.n	800c5c4 <RemapAndLinkDMAtoUARTTx+0x3cc>
 800c5c2:	e693      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800c5c4:	23a8      	movs	r3, #168	; 0xa8
 800c5c6:	4a7a      	ldr	r2, [pc, #488]	; (800c7b0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c5c8:	4d7a      	ldr	r5, [pc, #488]	; (800c7b4 <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800c5ca:	58d4      	ldr	r4, [r2, r3]
 800c5cc:	402c      	ands	r4, r5
 800c5ce:	50d4      	str	r4, [r2, r3]
 800c5d0:	24d0      	movs	r4, #208	; 0xd0
 800c5d2:	58d5      	ldr	r5, [r2, r3]
 800c5d4:	0324      	lsls	r4, r4, #12
 800c5d6:	432c      	orrs	r4, r5
 800c5d8:	50d4      	str	r4, [r2, r3]
 800c5da:	e687      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800c5dc:	23a8      	movs	r3, #168	; 0xa8
 800c5de:	25f0      	movs	r5, #240	; 0xf0
 800c5e0:	4a75      	ldr	r2, [pc, #468]	; (800c7b8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c5e2:	58d4      	ldr	r4, [r2, r3]
 800c5e4:	43ac      	bics	r4, r5
 800c5e6:	50d4      	str	r4, [r2, r3]
 800c5e8:	58d4      	ldr	r4, [r2, r3]
 800c5ea:	3d30      	subs	r5, #48	; 0x30
 800c5ec:	432c      	orrs	r4, r5
 800c5ee:	50d4      	str	r4, [r2, r3]
 800c5f0:	e67c      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800c5f2:	4a71      	ldr	r2, [pc, #452]	; (800c7b8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800c5f4:	23a8      	movs	r3, #168	; 0xa8
 800c5f6:	4d71      	ldr	r5, [pc, #452]	; (800c7bc <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800c5f8:	58d4      	ldr	r4, [r2, r3]
 800c5fa:	402c      	ands	r4, r5
 800c5fc:	50d4      	str	r4, [r2, r3]
 800c5fe:	24c0      	movs	r4, #192	; 0xc0
 800c600:	58d5      	ldr	r5, [r2, r3]
 800c602:	0224      	lsls	r4, r4, #8
 800c604:	432c      	orrs	r4, r5
 800c606:	50d4      	str	r4, [r2, r3]
 800c608:	e670      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800c60a:	23a8      	movs	r3, #168	; 0xa8
 800c60c:	4a6a      	ldr	r2, [pc, #424]	; (800c7b8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c60e:	4d6c      	ldr	r5, [pc, #432]	; (800c7c0 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800c610:	58d4      	ldr	r4, [r2, r3]
 800c612:	402c      	ands	r4, r5
 800c614:	50d4      	str	r4, [r2, r3]
 800c616:	24c0      	movs	r4, #192	; 0xc0
 800c618:	58d5      	ldr	r5, [r2, r3]
 800c61a:	0524      	lsls	r4, r4, #20
 800c61c:	432c      	orrs	r4, r5
 800c61e:	50d4      	str	r4, [r2, r3]
 800c620:	e664      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800c622:	23a8      	movs	r3, #168	; 0xa8
 800c624:	250f      	movs	r5, #15
 800c626:	4a62      	ldr	r2, [pc, #392]	; (800c7b0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c628:	58d4      	ldr	r4, [r2, r3]
 800c62a:	43ac      	bics	r4, r5
 800c62c:	50d4      	str	r4, [r2, r3]
 800c62e:	58d4      	ldr	r4, [r2, r3]
 800c630:	3d03      	subs	r5, #3
 800c632:	432c      	orrs	r4, r5
 800c634:	50d4      	str	r4, [r2, r3]
 800c636:	e659      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800c638:	4a5d      	ldr	r2, [pc, #372]	; (800c7b0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c63a:	e7db      	b.n	800c5f4 <RemapAndLinkDMAtoUARTTx+0x3fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800c63c:	23a8      	movs	r3, #168	; 0xa8
 800c63e:	25f0      	movs	r5, #240	; 0xf0
 800c640:	4a5d      	ldr	r2, [pc, #372]	; (800c7b8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c642:	58d4      	ldr	r4, [r2, r3]
 800c644:	43ac      	bics	r4, r5
 800c646:	50d4      	str	r4, [r2, r3]
 800c648:	58d4      	ldr	r4, [r2, r3]
 800c64a:	3d20      	subs	r5, #32
 800c64c:	432c      	orrs	r4, r5
 800c64e:	50d4      	str	r4, [r2, r3]
 800c650:	e64c      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800c652:	4a59      	ldr	r2, [pc, #356]	; (800c7b8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800c654:	23a8      	movs	r3, #168	; 0xa8
 800c656:	4d59      	ldr	r5, [pc, #356]	; (800c7bc <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800c658:	58d4      	ldr	r4, [r2, r3]
 800c65a:	402c      	ands	r4, r5
 800c65c:	50d4      	str	r4, [r2, r3]
 800c65e:	24d0      	movs	r4, #208	; 0xd0
 800c660:	58d5      	ldr	r5, [r2, r3]
 800c662:	0224      	lsls	r4, r4, #8
 800c664:	432c      	orrs	r4, r5
 800c666:	50d4      	str	r4, [r2, r3]
 800c668:	e640      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800c66a:	23a8      	movs	r3, #168	; 0xa8
 800c66c:	4a52      	ldr	r2, [pc, #328]	; (800c7b8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c66e:	4d54      	ldr	r5, [pc, #336]	; (800c7c0 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800c670:	58d4      	ldr	r4, [r2, r3]
 800c672:	402c      	ands	r4, r5
 800c674:	50d4      	str	r4, [r2, r3]
 800c676:	24d0      	movs	r4, #208	; 0xd0
 800c678:	58d5      	ldr	r5, [r2, r3]
 800c67a:	0524      	lsls	r4, r4, #20
 800c67c:	432c      	orrs	r4, r5
 800c67e:	50d4      	str	r4, [r2, r3]
 800c680:	e634      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800c682:	23a8      	movs	r3, #168	; 0xa8
 800c684:	250f      	movs	r5, #15
 800c686:	4a4a      	ldr	r2, [pc, #296]	; (800c7b0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c688:	58d4      	ldr	r4, [r2, r3]
 800c68a:	43ac      	bics	r4, r5
 800c68c:	50d4      	str	r4, [r2, r3]
 800c68e:	58d4      	ldr	r4, [r2, r3]
 800c690:	3d02      	subs	r5, #2
 800c692:	432c      	orrs	r4, r5
 800c694:	50d4      	str	r4, [r2, r3]
 800c696:	e629      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800c698:	4a45      	ldr	r2, [pc, #276]	; (800c7b0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c69a:	e7db      	b.n	800c654 <RemapAndLinkDMAtoUARTTx+0x45c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800c69c:	23a8      	movs	r3, #168	; 0xa8
 800c69e:	25f0      	movs	r5, #240	; 0xf0
 800c6a0:	4a45      	ldr	r2, [pc, #276]	; (800c7b8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c6a2:	58d4      	ldr	r4, [r2, r3]
 800c6a4:	43ac      	bics	r4, r5
 800c6a6:	50d4      	str	r4, [r2, r3]
 800c6a8:	58d4      	ldr	r4, [r2, r3]
 800c6aa:	3d10      	subs	r5, #16
 800c6ac:	432c      	orrs	r4, r5
 800c6ae:	50d4      	str	r4, [r2, r3]
 800c6b0:	e61c      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800c6b2:	4a41      	ldr	r2, [pc, #260]	; (800c7b8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800c6b4:	23a8      	movs	r3, #168	; 0xa8
 800c6b6:	4d41      	ldr	r5, [pc, #260]	; (800c7bc <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800c6b8:	58d4      	ldr	r4, [r2, r3]
 800c6ba:	402c      	ands	r4, r5
 800c6bc:	50d4      	str	r4, [r2, r3]
 800c6be:	24e0      	movs	r4, #224	; 0xe0
 800c6c0:	58d5      	ldr	r5, [r2, r3]
 800c6c2:	0224      	lsls	r4, r4, #8
 800c6c4:	432c      	orrs	r4, r5
 800c6c6:	50d4      	str	r4, [r2, r3]
 800c6c8:	e610      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800c6ca:	23a8      	movs	r3, #168	; 0xa8
 800c6cc:	4a3a      	ldr	r2, [pc, #232]	; (800c7b8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c6ce:	4d3c      	ldr	r5, [pc, #240]	; (800c7c0 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800c6d0:	58d4      	ldr	r4, [r2, r3]
 800c6d2:	402c      	ands	r4, r5
 800c6d4:	50d4      	str	r4, [r2, r3]
 800c6d6:	24e0      	movs	r4, #224	; 0xe0
 800c6d8:	58d5      	ldr	r5, [r2, r3]
 800c6da:	0524      	lsls	r4, r4, #20
 800c6dc:	432c      	orrs	r4, r5
 800c6de:	50d4      	str	r4, [r2, r3]
 800c6e0:	e604      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800c6e2:	23a8      	movs	r3, #168	; 0xa8
 800c6e4:	250f      	movs	r5, #15
 800c6e6:	4a32      	ldr	r2, [pc, #200]	; (800c7b0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c6e8:	58d4      	ldr	r4, [r2, r3]
 800c6ea:	43ac      	bics	r4, r5
 800c6ec:	50d4      	str	r4, [r2, r3]
 800c6ee:	58d4      	ldr	r4, [r2, r3]
 800c6f0:	3d01      	subs	r5, #1
 800c6f2:	432c      	orrs	r4, r5
 800c6f4:	50d4      	str	r4, [r2, r3]
 800c6f6:	e5f9      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800c6f8:	4a2d      	ldr	r2, [pc, #180]	; (800c7b0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c6fa:	e7db      	b.n	800c6b4 <RemapAndLinkDMAtoUARTTx+0x4bc>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800c6fc:	4a31      	ldr	r2, [pc, #196]	; (800c7c4 <RemapAndLinkDMAtoUARTTx+0x5cc>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d000      	beq.n	800c704 <RemapAndLinkDMAtoUARTTx+0x50c>
 800c702:	e5f3      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
 800c704:	680b      	ldr	r3, [r1, #0]
 800c706:	4a24      	ldr	r2, [pc, #144]	; (800c798 <RemapAndLinkDMAtoUARTTx+0x5a0>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d01b      	beq.n	800c744 <RemapAndLinkDMAtoUARTTx+0x54c>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800c70c:	4a23      	ldr	r2, [pc, #140]	; (800c79c <RemapAndLinkDMAtoUARTTx+0x5a4>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d022      	beq.n	800c758 <RemapAndLinkDMAtoUARTTx+0x560>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800c712:	4a23      	ldr	r2, [pc, #140]	; (800c7a0 <RemapAndLinkDMAtoUARTTx+0x5a8>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d02b      	beq.n	800c770 <RemapAndLinkDMAtoUARTTx+0x578>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800c718:	4a22      	ldr	r2, [pc, #136]	; (800c7a4 <RemapAndLinkDMAtoUARTTx+0x5ac>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d034      	beq.n	800c788 <RemapAndLinkDMAtoUARTTx+0x590>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800c71e:	4a22      	ldr	r2, [pc, #136]	; (800c7a8 <RemapAndLinkDMAtoUARTTx+0x5b0>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d036      	beq.n	800c792 <RemapAndLinkDMAtoUARTTx+0x59a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800c724:	4a21      	ldr	r2, [pc, #132]	; (800c7ac <RemapAndLinkDMAtoUARTTx+0x5b4>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d000      	beq.n	800c72c <RemapAndLinkDMAtoUARTTx+0x534>
 800c72a:	e5df      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800c72c:	23a8      	movs	r3, #168	; 0xa8
 800c72e:	4a20      	ldr	r2, [pc, #128]	; (800c7b0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c730:	4d20      	ldr	r5, [pc, #128]	; (800c7b4 <RemapAndLinkDMAtoUARTTx+0x5bc>)
 800c732:	58d4      	ldr	r4, [r2, r3]
 800c734:	402c      	ands	r4, r5
 800c736:	50d4      	str	r4, [r2, r3]
 800c738:	24f0      	movs	r4, #240	; 0xf0
 800c73a:	58d5      	ldr	r5, [r2, r3]
 800c73c:	0324      	lsls	r4, r4, #12
 800c73e:	432c      	orrs	r4, r5
 800c740:	50d4      	str	r4, [r2, r3]
 800c742:	e5d3      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800c744:	23a8      	movs	r3, #168	; 0xa8
 800c746:	26f0      	movs	r6, #240	; 0xf0
 800c748:	4a1b      	ldr	r2, [pc, #108]	; (800c7b8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c74a:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800c74c:	43b5      	bics	r5, r6
 800c74e:	50d5      	str	r5, [r2, r3]
 800c750:	58d4      	ldr	r4, [r2, r3]
 800c752:	4334      	orrs	r4, r6
 800c754:	50d4      	str	r4, [r2, r3]
 800c756:	e5c9      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800c758:	4a17      	ldr	r2, [pc, #92]	; (800c7b8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800c75a:	23a8      	movs	r3, #168	; 0xa8
 800c75c:	4d17      	ldr	r5, [pc, #92]	; (800c7bc <RemapAndLinkDMAtoUARTTx+0x5c4>)
 800c75e:	58d4      	ldr	r4, [r2, r3]
 800c760:	402c      	ands	r4, r5
 800c762:	50d4      	str	r4, [r2, r3]
 800c764:	24f0      	movs	r4, #240	; 0xf0
 800c766:	58d5      	ldr	r5, [r2, r3]
 800c768:	0224      	lsls	r4, r4, #8
 800c76a:	432c      	orrs	r4, r5
 800c76c:	50d4      	str	r4, [r2, r3]
 800c76e:	e5bd      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800c770:	23a8      	movs	r3, #168	; 0xa8
 800c772:	4a11      	ldr	r2, [pc, #68]	; (800c7b8 <RemapAndLinkDMAtoUARTTx+0x5c0>)
 800c774:	4d12      	ldr	r5, [pc, #72]	; (800c7c0 <RemapAndLinkDMAtoUARTTx+0x5c8>)
 800c776:	58d4      	ldr	r4, [r2, r3]
 800c778:	402c      	ands	r4, r5
 800c77a:	50d4      	str	r4, [r2, r3]
 800c77c:	24f0      	movs	r4, #240	; 0xf0
 800c77e:	58d5      	ldr	r5, [r2, r3]
 800c780:	0524      	lsls	r4, r4, #20
 800c782:	432c      	orrs	r4, r5
 800c784:	50d4      	str	r4, [r2, r3]
 800c786:	e5b1      	b.n	800c2ec <RemapAndLinkDMAtoUARTTx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800c788:	23a8      	movs	r3, #168	; 0xa8
 800c78a:	4a09      	ldr	r2, [pc, #36]	; (800c7b0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c78c:	260f      	movs	r6, #15
 800c78e:	58d5      	ldr	r5, [r2, r3]
 800c790:	e7dc      	b.n	800c74c <RemapAndLinkDMAtoUARTTx+0x554>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800c792:	4a07      	ldr	r2, [pc, #28]	; (800c7b0 <RemapAndLinkDMAtoUARTTx+0x5b8>)
 800c794:	e7e1      	b.n	800c75a <RemapAndLinkDMAtoUARTTx+0x562>
 800c796:	46c0      	nop			; (mov r8, r8)
 800c798:	4002001c 	.word	0x4002001c
 800c79c:	40020044 	.word	0x40020044
 800c7a0:	40020080 	.word	0x40020080
 800c7a4:	40020408 	.word	0x40020408
 800c7a8:	40020444 	.word	0x40020444
 800c7ac:	40020458 	.word	0x40020458
 800c7b0:	40020400 	.word	0x40020400
 800c7b4:	fff0ffff 	.word	0xfff0ffff
 800c7b8:	40020000 	.word	0x40020000
 800c7bc:	ffff0fff 	.word	0xffff0fff
 800c7c0:	f0ffffff 	.word	0xf0ffffff
 800c7c4:	40011c00 	.word	0x40011c00

0800c7c8 <DMA_MSG_TX_Setup>:
	if (msgTxDMA[0].Parent == NULL)
 800c7c8:	4b0c      	ldr	r3, [pc, #48]	; (800c7fc <DMA_MSG_TX_Setup+0x34>)
{	
 800c7ca:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800c7cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7ce:	2a00      	cmp	r2, #0
 800c7d0:	d00f      	beq.n	800c7f2 <DMA_MSG_TX_Setup+0x2a>
	else if (msgTxDMA[1].Parent == NULL)
 800c7d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c7d4:	2a00      	cmp	r2, #0
 800c7d6:	d00b      	beq.n	800c7f0 <DMA_MSG_TX_Setup+0x28>
	else if (msgTxDMA[2].Parent == NULL)
 800c7d8:	2294      	movs	r2, #148	; 0x94
 800c7da:	589a      	ldr	r2, [r3, r2]
 800c7dc:	2a00      	cmp	r2, #0
 800c7de:	d00a      	beq.n	800c7f6 <DMA_MSG_TX_Setup+0x2e>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800c7e0:	0021      	movs	r1, r4
 800c7e2:	f7ff fd09 	bl	800c1f8 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	0020      	movs	r0, r4
 800c7ea:	f7ff f8e1 	bl	800b9b0 <SetupDMAInterrupts>
}
 800c7ee:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[1];
 800c7f0:	3338      	adds	r3, #56	; 0x38
 800c7f2:	001c      	movs	r4, r3
 800c7f4:	e7f4      	b.n	800c7e0 <DMA_MSG_TX_Setup+0x18>
		hDMA = &msgTxDMA[2];  
 800c7f6:	3370      	adds	r3, #112	; 0x70
 800c7f8:	001c      	movs	r4, r3
 800c7fa:	e7f1      	b.n	800c7e0 <DMA_MSG_TX_Setup+0x18>
 800c7fc:	20001dc8 	.word	0x20001dc8

0800c800 <CRC_Init>:
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
  hcrc.Instance = CRC;
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800c800:	2310      	movs	r3, #16
 800c802:	4807      	ldr	r0, [pc, #28]	; (800c820 <CRC_Init+0x20>)
{
 800c804:	b510      	push	{r4, lr}
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800c806:	60c3      	str	r3, [r0, #12]
  hcrc.Instance = CRC;
 800c808:	4b06      	ldr	r3, [pc, #24]	; (800c824 <CRC_Init+0x24>)
 800c80a:	6003      	str	r3, [r0, #0]
 800c80c:	2300      	movs	r3, #0
 800c80e:	8083      	strh	r3, [r0, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800c810:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800c812:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800c814:	3303      	adds	r3, #3
 800c816:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800c818:	f003 fa10 	bl	800fc3c <HAL_CRC_Init>
}
 800c81c:	bd10      	pop	{r4, pc}
 800c81e:	46c0      	nop			; (mov r8, r8)
 800c820:	20007278 	.word	0x20007278
 800c824:	40023000 	.word	0x40023000

0800c828 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800c828:	2340      	movs	r3, #64	; 0x40
 800c82a:	4a05      	ldr	r2, [pc, #20]	; (800c840 <HAL_CRC_MspInit+0x18>)
{
 800c82c:	b082      	sub	sp, #8
	__HAL_RCC_CRC_CLK_ENABLE();
 800c82e:	6951      	ldr	r1, [r2, #20]
 800c830:	4319      	orrs	r1, r3
 800c832:	6151      	str	r1, [r2, #20]
 800c834:	6952      	ldr	r2, [r2, #20]
 800c836:	4013      	ands	r3, r2
 800c838:	9301      	str	r3, [sp, #4]
 800c83a:	9b01      	ldr	r3, [sp, #4]
}
 800c83c:	b002      	add	sp, #8
 800c83e:	4770      	bx	lr
 800c840:	40021000 	.word	0x40021000

0800c844 <CalculateCRC8>:
	/* Disable peripheral clock */
	__HAL_RCC_CRC_CLK_DISABLE();
}

uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
 800c844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c846:	0004      	movs	r4, r0
 800c848:	000d      	movs	r5, r1
      pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)&pBuffer[(size/4)*4], 1);
    }
    return pTemp;
  }
  else
  return 0;
 800c84a:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800c84c:	2c00      	cmp	r4, #0
 800c84e:	d001      	beq.n	800c854 <CalculateCRC8+0x10>
 800c850:	2900      	cmp	r1, #0
 800c852:	d100      	bne.n	800c856 <CalculateCRC8+0x12>
}
 800c854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800c856:	4f09      	ldr	r7, [pc, #36]	; (800c87c <CalculateCRC8+0x38>)
 800c858:	088e      	lsrs	r6, r1, #2
 800c85a:	0032      	movs	r2, r6
 800c85c:	0021      	movs	r1, r4
 800c85e:	0038      	movs	r0, r7
 800c860:	f003 fa4a 	bl	800fcf8 <HAL_CRC_Calculate>
    if ((size%4)!=0)
 800c864:	07ab      	lsls	r3, r5, #30
 800c866:	d101      	bne.n	800c86c <CalculateCRC8+0x28>
      pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)&pBuffer[(size/4)*4], 1);
 800c868:	b2c0      	uxtb	r0, r0
 800c86a:	e7f3      	b.n	800c854 <CalculateCRC8+0x10>
 800c86c:	00b1      	lsls	r1, r6, #2
 800c86e:	1861      	adds	r1, r4, r1
 800c870:	2201      	movs	r2, #1
 800c872:	0038      	movs	r0, r7
 800c874:	f003 fa16 	bl	800fca4 <HAL_CRC_Accumulate>
 800c878:	b2c0      	uxtb	r0, r0
 800c87a:	e7eb      	b.n	800c854 <CalculateCRC8+0x10>
 800c87c:	20007278 	.word	0x20007278

0800c880 <GPIO_Init>:
/** Pinout Configuration
*/
void GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800c880:	2080      	movs	r0, #128	; 0x80
 800c882:	4b1f      	ldr	r3, [pc, #124]	; (800c900 <GPIO_Init+0x80>)
 800c884:	0300      	lsls	r0, r0, #12
 800c886:	6959      	ldr	r1, [r3, #20]
{
 800c888:	b500      	push	{lr}
  __GPIOC_CLK_ENABLE();
 800c88a:	4301      	orrs	r1, r0
 800c88c:	6159      	str	r1, [r3, #20]
 800c88e:	695a      	ldr	r2, [r3, #20]
{
 800c890:	b08b      	sub	sp, #44	; 0x2c
  __GPIOC_CLK_ENABLE();
 800c892:	4002      	ands	r2, r0
  __GPIOA_CLK_ENABLE();
 800c894:	2080      	movs	r0, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800c896:	9200      	str	r2, [sp, #0]
 800c898:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 800c89a:	6959      	ldr	r1, [r3, #20]
 800c89c:	0280      	lsls	r0, r0, #10
 800c89e:	4301      	orrs	r1, r0
 800c8a0:	6159      	str	r1, [r3, #20]
 800c8a2:	695a      	ldr	r2, [r3, #20]
 800c8a4:	4002      	ands	r2, r0
  __GPIOD_CLK_ENABLE();
 800c8a6:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800c8a8:	9201      	str	r2, [sp, #4]
 800c8aa:	9a01      	ldr	r2, [sp, #4]
  __GPIOD_CLK_ENABLE();
 800c8ac:	6959      	ldr	r1, [r3, #20]
 800c8ae:	0340      	lsls	r0, r0, #13
 800c8b0:	4301      	orrs	r1, r0
 800c8b2:	6159      	str	r1, [r3, #20]
 800c8b4:	695a      	ldr	r2, [r3, #20]
 800c8b6:	4002      	ands	r2, r0
	__GPIOB_CLK_ENABLE();
 800c8b8:	2080      	movs	r0, #128	; 0x80
  __GPIOD_CLK_ENABLE();
 800c8ba:	9202      	str	r2, [sp, #8]
 800c8bc:	9a02      	ldr	r2, [sp, #8]
	__GPIOB_CLK_ENABLE();
 800c8be:	6959      	ldr	r1, [r3, #20]
 800c8c0:	02c0      	lsls	r0, r0, #11
 800c8c2:	4301      	orrs	r1, r0
 800c8c4:	6159      	str	r1, [r3, #20]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c8c6:	2180      	movs	r1, #128	; 0x80
	__GPIOB_CLK_ENABLE();
 800c8c8:	695a      	ldr	r2, [r3, #20]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c8ca:	03c9      	lsls	r1, r1, #15
	__GPIOB_CLK_ENABLE();
 800c8cc:	4002      	ands	r2, r0
 800c8ce:	9203      	str	r2, [sp, #12]
 800c8d0:	9a03      	ldr	r2, [sp, #12]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c8d2:	695a      	ldr	r2, [r3, #20]
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c8d4:	2090      	movs	r0, #144	; 0x90
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c8d6:	430a      	orrs	r2, r1
 800c8d8:	615a      	str	r2, [r3, #20]
 800c8da:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c8dc:	05c0      	lsls	r0, r0, #23
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c8de:	400b      	ands	r3, r1
 800c8e0:	9304      	str	r3, [sp, #16]
 800c8e2:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800c8e4:	2380      	movs	r3, #128	; 0x80
 800c8e6:	011b      	lsls	r3, r3, #4
 800c8e8:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8ee:	2300      	movs	r3, #0
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c8f0:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8f2:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c8f4:	3303      	adds	r3, #3
 800c8f6:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c8f8:	f004 f8d4 	bl	8010aa4 <HAL_GPIO_Init>
}
 800c8fc:	b00b      	add	sp, #44	; 0x2c
 800c8fe:	bd00      	pop	{pc}
 800c900:	40021000 	.word	0x40021000

0800c904 <GetPortGPIOs>:
}

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800c904:	b570      	push	{r4, r5, r6, lr}
 800c906:	0015      	movs	r5, r2
 800c908:	001c      	movs	r4, r3
 800c90a:	000e      	movs	r6, r1
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800c90c:	f000 fdd6 	bl	800d4bc <GetUart>
	
	if (huart == &huart1) 
 800c910:	4a2c      	ldr	r2, [pc, #176]	; (800c9c4 <GetPortGPIOs+0xc0>)
	UART_HandleTypeDef* huart = GetUart(port);
 800c912:	0003      	movs	r3, r0
	if (huart == &huart1) 
 800c914:	4290      	cmp	r0, r2
 800c916:	d010      	beq.n	800c93a <GetPortGPIOs+0x36>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800c918:	4a2b      	ldr	r2, [pc, #172]	; (800c9c8 <GetPortGPIOs+0xc4>)
 800c91a:	4290      	cmp	r0, r2
 800c91c:	d031      	beq.n	800c982 <GetPortGPIOs+0x7e>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800c91e:	4a2b      	ldr	r2, [pc, #172]	; (800c9cc <GetPortGPIOs+0xc8>)
 800c920:	4290      	cmp	r0, r2
 800c922:	d017      	beq.n	800c954 <GetPortGPIOs+0x50>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800c924:	4a2a      	ldr	r2, [pc, #168]	; (800c9d0 <GetPortGPIOs+0xcc>)
 800c926:	4290      	cmp	r0, r2
 800c928:	d036      	beq.n	800c998 <GetPortGPIOs+0x94>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800c92a:	4a2a      	ldr	r2, [pc, #168]	; (800c9d4 <GetPortGPIOs+0xd0>)
 800c92c:	4290      	cmp	r0, r2
 800c92e:	d03e      	beq.n	800c9ae <GetPortGPIOs+0xaa>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800c930:	4a29      	ldr	r2, [pc, #164]	; (800c9d8 <GetPortGPIOs+0xd4>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800c932:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800c934:	4293      	cmp	r3, r2
 800c936:	d019      	beq.n	800c96c <GetPortGPIOs+0x68>
	
	return result;	
}
 800c938:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c93a:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART1_TX_PIN;
 800c93c:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c93e:	05db      	lsls	r3, r3, #23
		*TX_Pin = USART1_TX_PIN;
 800c940:	0092      	lsls	r2, r2, #2
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c942:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800c944:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800c946:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800c948:	2380      	movs	r3, #128	; 0x80
 800c94a:	9a04      	ldr	r2, [sp, #16]
 800c94c:	00db      	lsls	r3, r3, #3
 800c94e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c950:	2000      	movs	r0, #0
 800c952:	e7f1      	b.n	800c938 <GetPortGPIOs+0x34>
		*TX_Pin = USART3_TX_PIN;
 800c954:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800c956:	4b21      	ldr	r3, [pc, #132]	; (800c9dc <GetPortGPIOs+0xd8>)
		*TX_Pin = USART3_TX_PIN;
 800c958:	00d2      	lsls	r2, r2, #3
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800c95a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800c95c:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800c95e:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800c960:	2380      	movs	r3, #128	; 0x80
 800c962:	9a04      	ldr	r2, [sp, #16]
 800c964:	011b      	lsls	r3, r3, #4
 800c966:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c968:	2000      	movs	r0, #0
 800c96a:	e7e5      	b.n	800c938 <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800c96c:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART6_TX_PIN;
 800c96e:	2210      	movs	r2, #16
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800c970:	05db      	lsls	r3, r3, #23
 800c972:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800c974:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800c976:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800c978:	2320      	movs	r3, #32
 800c97a:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800c97c:	2000      	movs	r0, #0
		*RX_Pin = USART6_RX_PIN;
 800c97e:	8013      	strh	r3, [r2, #0]
 800c980:	e7da      	b.n	800c938 <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800c982:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART2_TX_PIN;
 800c984:	2204      	movs	r2, #4
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800c986:	05db      	lsls	r3, r3, #23
 800c988:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800c98a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800c98c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800c98e:	2308      	movs	r3, #8
 800c990:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800c992:	2000      	movs	r0, #0
		*RX_Pin = USART2_RX_PIN;
 800c994:	8013      	strh	r3, [r2, #0]
 800c996:	e7cf      	b.n	800c938 <GetPortGPIOs+0x34>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800c998:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART4_TX_PIN;
 800c99a:	2201      	movs	r2, #1
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800c99c:	05db      	lsls	r3, r3, #23
 800c99e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800c9a0:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800c9a2:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800c9a4:	2302      	movs	r3, #2
 800c9a6:	9a04      	ldr	r2, [sp, #16]
	BOS_Status result = BOS_OK;
 800c9a8:	2000      	movs	r0, #0
		*RX_Pin = USART4_RX_PIN;
 800c9aa:	8013      	strh	r3, [r2, #0]
 800c9ac:	e7c4      	b.n	800c938 <GetPortGPIOs+0x34>
		*TX_Pin = USART5_TX_PIN;
 800c9ae:	2208      	movs	r2, #8
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800c9b0:	4b0a      	ldr	r3, [pc, #40]	; (800c9dc <GetPortGPIOs+0xd8>)
	BOS_Status result = BOS_OK;
 800c9b2:	2000      	movs	r0, #0
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800c9b4:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800c9b6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800c9b8:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800c9ba:	2310      	movs	r3, #16
 800c9bc:	9a04      	ldr	r2, [sp, #16]
 800c9be:	8013      	strh	r3, [r2, #0]
 800c9c0:	e7ba      	b.n	800c938 <GetPortGPIOs+0x34>
 800c9c2:	46c0      	nop			; (mov r8, r8)
 800c9c4:	200070b8 	.word	0x200070b8
 800c9c8:	20007208 	.word	0x20007208
 800c9cc:	20006fd8 	.word	0x20006fd8
 800c9d0:	20007198 	.word	0x20007198
 800c9d4:	20007048 	.word	0x20007048
 800c9d8:	20007128 	.word	0x20007128
 800c9dc:	48000400 	.word	0x48000400

0800c9e0 <IsFactoryReset>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P_last_TX_Pin, P_last_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
  /* Enable all GPIO Ports Clocks */
  __GPIOA_CLK_ENABLE();
 800c9e0:	2080      	movs	r0, #128	; 0x80
 800c9e2:	4b38      	ldr	r3, [pc, #224]	; (800cac4 <IsFactoryReset+0xe4>)
 800c9e4:	0280      	lsls	r0, r0, #10
 800c9e6:	6959      	ldr	r1, [r3, #20]
{
 800c9e8:	b570      	push	{r4, r5, r6, lr}
  __GPIOA_CLK_ENABLE();
 800c9ea:	4301      	orrs	r1, r0
 800c9ec:	6159      	str	r1, [r3, #20]
 800c9ee:	695a      	ldr	r2, [r3, #20]
{
 800c9f0:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800c9f2:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800c9f4:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800c9f6:	9209      	str	r2, [sp, #36]	; 0x24
 800c9f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __GPIOB_CLK_ENABLE();
 800c9fa:	6959      	ldr	r1, [r3, #20]
 800c9fc:	02c0      	lsls	r0, r0, #11
 800c9fe:	4301      	orrs	r1, r0
 800ca00:	6159      	str	r1, [r3, #20]
 800ca02:	695a      	ldr	r2, [r3, #20]
  __GPIOC_CLK_ENABLE();
	__GPIOD_CLK_ENABLE();
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800ca04:	2412      	movs	r4, #18
  __GPIOB_CLK_ENABLE();
 800ca06:	4002      	ands	r2, r0
  __GPIOC_CLK_ENABLE();
 800ca08:	2080      	movs	r0, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800ca0a:	920a      	str	r2, [sp, #40]	; 0x28
 800ca0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __GPIOC_CLK_ENABLE();
 800ca0e:	6959      	ldr	r1, [r3, #20]
 800ca10:	0300      	lsls	r0, r0, #12
 800ca12:	4301      	orrs	r1, r0
 800ca14:	6159      	str	r1, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800ca16:	2180      	movs	r1, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800ca18:	695a      	ldr	r2, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800ca1a:	0349      	lsls	r1, r1, #13
  __GPIOC_CLK_ENABLE();
 800ca1c:	4002      	ands	r2, r0
 800ca1e:	920b      	str	r2, [sp, #44]	; 0x2c
 800ca20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__GPIOD_CLK_ENABLE();
 800ca22:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800ca24:	ad03      	add	r5, sp, #12
	__GPIOD_CLK_ENABLE();
 800ca26:	430a      	orrs	r2, r1
 800ca28:	615a      	str	r2, [r3, #20]
 800ca2a:	695b      	ldr	r3, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800ca2c:	446c      	add	r4, sp
	__GPIOD_CLK_ENABLE();
 800ca2e:	400b      	ands	r3, r1
 800ca30:	930c      	str	r3, [sp, #48]	; 0x30
 800ca32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800ca34:	230e      	movs	r3, #14
 800ca36:	446b      	add	r3, sp
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	002a      	movs	r2, r5
 800ca3c:	ab06      	add	r3, sp, #24
 800ca3e:	a905      	add	r1, sp, #20
 800ca40:	2001      	movs	r0, #1
 800ca42:	f7ff ff5f 	bl	800c904 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800ca46:	aa04      	add	r2, sp, #16
 800ca48:	ab08      	add	r3, sp, #32
 800ca4a:	a907      	add	r1, sp, #28
 800ca4c:	9400      	str	r4, [sp, #0]
 800ca4e:	2006      	movs	r0, #6
 800ca50:	f7ff ff58 	bl	800c904 <GetPortGPIOs>
	
	/* TXD of first port */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ca54:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca56:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ca58:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800ca5a:	882b      	ldrh	r3, [r5, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800ca5c:	a90d      	add	r1, sp, #52	; 0x34
 800ca5e:	9805      	ldr	r0, [sp, #20]
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800ca60:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca62:	960f      	str	r6, [sp, #60]	; 0x3c
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800ca64:	f004 f81e 	bl	8010aa4 <HAL_GPIO_Init>
	
	/* RXD of last port */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800ca68:	2302      	movs	r3, #2
 800ca6a:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800ca6c:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800ca6e:	a90d      	add	r1, sp, #52	; 0x34
 800ca70:	9808      	ldr	r0, [sp, #32]
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800ca72:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ca74:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800ca76:	f004 f815 	bl	8010aa4 <HAL_GPIO_Init>

	
	/* Check for factory reset conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800ca7a:	8829      	ldrh	r1, [r5, #0]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	9805      	ldr	r0, [sp, #20]
 800ca80:	f004 f9b0 	bl	8010de4 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800ca84:	2005      	movs	r0, #5
 800ca86:	f000 fadf 	bl	800d048 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800ca8a:	8821      	ldrh	r1, [r4, #0]
 800ca8c:	9808      	ldr	r0, [sp, #32]
 800ca8e:	f004 f9a3 	bl	8010dd8 <HAL_GPIO_ReadPin>
 800ca92:	2800      	cmp	r0, #0
 800ca94:	d006      	beq.n	800caa4 <IsFactoryReset+0xc4>
		}
	}

	/* Clear flag for formated EEPROM if it was already set */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800ca96:	2201      	movs	r2, #1
	
	return 0;
 800ca98:	2000      	movs	r0, #0
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800ca9a:	4b0b      	ldr	r3, [pc, #44]	; (800cac8 <IsFactoryReset+0xe8>)
 800ca9c:	4252      	negs	r2, r2
 800ca9e:	601a      	str	r2, [r3, #0]
}
 800caa0:	b012      	add	sp, #72	; 0x48
 800caa2:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800caa4:	8829      	ldrh	r1, [r5, #0]
 800caa6:	2201      	movs	r2, #1
 800caa8:	9805      	ldr	r0, [sp, #20]
 800caaa:	f004 f99b 	bl	8010de4 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800caae:	2005      	movs	r0, #5
 800cab0:	f000 faca 	bl	800d048 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800cab4:	8821      	ldrh	r1, [r4, #0]
 800cab6:	9808      	ldr	r0, [sp, #32]
 800cab8:	f004 f98e 	bl	8010dd8 <HAL_GPIO_ReadPin>
 800cabc:	2801      	cmp	r0, #1
 800cabe:	d1ea      	bne.n	800ca96 <IsFactoryReset+0xb6>
 800cac0:	e7ee      	b.n	800caa0 <IsFactoryReset+0xc0>
 800cac2:	46c0      	nop			; (mov r8, r8)
 800cac4:	40021000 	.word	0x40021000
 800cac8:	20007ff0 	.word	0x20007ff0

0800cacc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800cacc:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800cace:	f002 fd2f 	bl	800f530 <HAL_IncTick>
  osSystickHandler();  
 800cad2:	f000 fe27 	bl	800d724 <osSystickHandler>

}
 800cad6:	bd10      	pop	{r4, pc}

0800cad8 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800cad8:	e7fe      	b.n	800cad8 <HardFault_Handler>
 800cada:	46c0      	nop			; (mov r8, r8)

0800cadc <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800cadc:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800cade:	4802      	ldr	r0, [pc, #8]	; (800cae8 <USART1_IRQHandler+0xc>)
 800cae0:	f005 fd88 	bl	80125f4 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cae4:	bd10      	pop	{r4, pc}
 800cae6:	46c0      	nop			; (mov r8, r8)
 800cae8:	200070b8 	.word	0x200070b8

0800caec <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800caec:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800caee:	4802      	ldr	r0, [pc, #8]	; (800caf8 <USART2_IRQHandler+0xc>)
 800caf0:	f005 fd80 	bl	80125f4 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800caf4:	bd10      	pop	{r4, pc}
 800caf6:	46c0      	nop			; (mov r8, r8)
 800caf8:	20007208 	.word	0x20007208

0800cafc <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800cafc:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800cafe:	4806      	ldr	r0, [pc, #24]	; (800cb18 <USART3_8_IRQHandler+0x1c>)
 800cb00:	f005 fd78 	bl	80125f4 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800cb04:	4805      	ldr	r0, [pc, #20]	; (800cb1c <USART3_8_IRQHandler+0x20>)
 800cb06:	f005 fd75 	bl	80125f4 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800cb0a:	4805      	ldr	r0, [pc, #20]	; (800cb20 <USART3_8_IRQHandler+0x24>)
 800cb0c:	f005 fd72 	bl	80125f4 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800cb10:	4804      	ldr	r0, [pc, #16]	; (800cb24 <USART3_8_IRQHandler+0x28>)
 800cb12:	f005 fd6f 	bl	80125f4 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cb16:	bd10      	pop	{r4, pc}
 800cb18:	20006fd8 	.word	0x20006fd8
 800cb1c:	20007198 	.word	0x20007198
 800cb20:	20007048 	.word	0x20007048
 800cb24:	20007128 	.word	0x20007128

0800cb28 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800cb28:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800cb2a:	2001      	movs	r0, #1
 800cb2c:	f7fa fdd0 	bl	80076d0 <DMA_IRQHandler>
	
}
 800cb30:	bd10      	pop	{r4, pc}
 800cb32:	46c0      	nop			; (mov r8, r8)

0800cb34 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800cb34:	4b0c      	ldr	r3, [pc, #48]	; (800cb68 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
{
 800cb36:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	2310      	movs	r3, #16
 800cb3c:	4213      	tst	r3, r2
 800cb3e:	d10e      	bne.n	800cb5e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800cb40:	4a0a      	ldr	r2, [pc, #40]	; (800cb6c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cb42:	6811      	ldr	r1, [r2, #0]
 800cb44:	05c9      	lsls	r1, r1, #23
 800cb46:	d406      	bmi.n	800cb56 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800cb48:	6812      	ldr	r2, [r2, #0]
 800cb4a:	4213      	tst	r3, r2
 800cb4c:	d002      	beq.n	800cb54 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800cb4e:	4808      	ldr	r0, [pc, #32]	; (800cb70 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800cb50:	f003 f9c6 	bl	800fee0 <HAL_DMA_IRQHandler>
	}
}
 800cb54:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800cb56:	2002      	movs	r0, #2
 800cb58:	f7fa fdba 	bl	80076d0 <DMA_IRQHandler>
 800cb5c:	e7fa      	b.n	800cb54 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
		DMA_IRQHandler(P5);
 800cb5e:	2005      	movs	r0, #5
 800cb60:	f7fa fdb6 	bl	80076d0 <DMA_IRQHandler>
 800cb64:	e7f6      	b.n	800cb54 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>
 800cb66:	46c0      	nop			; (mov r8, r8)
 800cb68:	40020400 	.word	0x40020400
 800cb6c:	40020000 	.word	0x40020000
 800cb70:	20001dc8 	.word	0x20001dc8

0800cb74 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cb74:	4b12      	ldr	r3, [pc, #72]	; (800cbc0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
{
 800cb76:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	03d2      	lsls	r2, r2, #15
 800cb7c:	d414      	bmi.n	800cba8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x34>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	02d2      	lsls	r2, r2, #11
 800cb82:	d40d      	bmi.n	800cba0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2c>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800cb84:	4a0f      	ldr	r2, [pc, #60]	; (800cbc4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800cb86:	6812      	ldr	r2, [r2, #0]
 800cb88:	05d2      	lsls	r2, r2, #23
 800cb8a:	d411      	bmi.n	800cbb0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3c>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	04d2      	lsls	r2, r2, #19
 800cb90:	d412      	bmi.n	800cbb8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	01db      	lsls	r3, r3, #7
 800cb96:	d506      	bpl.n	800cba6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800cb98:	480b      	ldr	r0, [pc, #44]	; (800cbc8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cb9a:	f003 f9a1 	bl	800fee0 <HAL_DMA_IRQHandler>
	}
}
 800cb9e:	e002      	b.n	800cba6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);
 800cba0:	2004      	movs	r0, #4
 800cba2:	f7fa fd95 	bl	80076d0 <DMA_IRQHandler>
}
 800cba6:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P3);
 800cba8:	2003      	movs	r0, #3
 800cbaa:	f7fa fd91 	bl	80076d0 <DMA_IRQHandler>
 800cbae:	e7fa      	b.n	800cba6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P6);
 800cbb0:	2006      	movs	r0, #6
 800cbb2:	f7fa fd8d 	bl	80076d0 <DMA_IRQHandler>
 800cbb6:	e7f6      	b.n	800cba6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800cbb8:	4804      	ldr	r0, [pc, #16]	; (800cbcc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800cbba:	f003 f991 	bl	800fee0 <HAL_DMA_IRQHandler>
 800cbbe:	e7f2      	b.n	800cba6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
 800cbc0:	40020000 	.word	0x40020000
 800cbc4:	40020400 	.word	0x40020400
 800cbc8:	20001e38 	.word	0x20001e38
 800cbcc:	20001e00 	.word	0x20001e00

0800cbd0 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cbd0:	2300      	movs	r3, #0
{
 800cbd2:	b510      	push	{r4, lr}
 800cbd4:	b082      	sub	sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cbd6:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800cbd8:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 800cbda:	0004      	movs	r4, r0
	if(huart->hdmatx != NULL)
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800cbe0:	f7fe ff92 	bl	800bb08 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800cbe4:	0020      	movs	r0, r4
 800cbe6:	f7fe fdb3 	bl	800b750 <GetPort>
 800cbea:	4b04      	ldr	r3, [pc, #16]	; (800cbfc <HAL_UART_TxCpltCallback+0x2c>)
 800cbec:	0080      	lsls	r0, r0, #2
 800cbee:	58c0      	ldr	r0, [r0, r3]
 800cbf0:	a901      	add	r1, sp, #4
 800cbf2:	f001 f917 	bl	800de24 <xQueueGiveFromISR>
}
 800cbf6:	b002      	add	sp, #8
 800cbf8:	bd10      	pop	{r4, pc}
 800cbfa:	46c0      	nop			; (mov r8, r8)
 800cbfc:	20006f2c 	.word	0x20006f2c

0800cc00 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cc00:	b570      	push	{r4, r5, r6, lr}
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800cc02:	2369      	movs	r3, #105	; 0x69
 800cc04:	2501      	movs	r5, #1
 800cc06:	54c5      	strb	r5, [r0, r3]
{
 800cc08:	0004      	movs	r4, r0
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800cc0a:	f7fe fda1 	bl	800b750 <GetPort>
	if (portStatus[port] == STREAM) {
 800cc0e:	4b0b      	ldr	r3, [pc, #44]	; (800cc3c <HAL_UART_ErrorCallback+0x3c>)
 800cc10:	5c1b      	ldrb	r3, [r3, r0]
 800cc12:	2b02      	cmp	r3, #2
 800cc14:	d004      	beq.n	800cc20 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800cc16:	4b0a      	ldr	r3, [pc, #40]	; (800cc40 <HAL_UART_ErrorCallback+0x40>)
 800cc18:	1818      	adds	r0, r3, r0
 800cc1a:	3801      	subs	r0, #1
 800cc1c:	7005      	strb	r5, [r0, #0]
	}	
}
 800cc1e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800cc20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc22:	3801      	subs	r0, #1
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	0080      	lsls	r0, r0, #2
 800cc28:	685a      	ldr	r2, [r3, #4]
 800cc2a:	4b06      	ldr	r3, [pc, #24]	; (800cc44 <HAL_UART_ErrorCallback+0x44>)
 800cc2c:	b292      	uxth	r2, r2
 800cc2e:	58c3      	ldr	r3, [r0, r3]
 800cc30:	0020      	movs	r0, r4
 800cc32:	6819      	ldr	r1, [r3, #0]
 800cc34:	3128      	adds	r1, #40	; 0x28
 800cc36:	f005 f93d 	bl	8011eb4 <HAL_UART_Receive_DMA>
 800cc3a:	e7f0      	b.n	800cc1e <HAL_UART_ErrorCallback+0x1e>
 800cc3c:	20000c2c 	.word	0x20000c2c
 800cc40:	20001344 	.word	0x20001344
 800cc44:	2000132c 	.word	0x2000132c

0800cc48 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc48:	b570      	push	{r4, r5, r6, lr}
 800cc4a:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800cc4c:	f7fe fd80 	bl	800b750 <GetPort>
 800cc50:	4d12      	ldr	r5, [pc, #72]	; (800cc9c <HAL_UART_RxCpltCallback+0x54>)
 800cc52:	5c2b      	ldrb	r3, [r5, r0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d006      	beq.n	800cc66 <HAL_UART_RxCpltCallback+0x1e>
 800cc58:	0020      	movs	r0, r4
 800cc5a:	f7fe fd79 	bl	800b750 <GetPort>
 800cc5e:	5c2b      	ldrb	r3, [r5, r0]
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d000      	beq.n	800cc66 <HAL_UART_RxCpltCallback+0x1e>
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
	}
}
 800cc64:	bd70      	pop	{r4, r5, r6, pc}
		BOSMessaging.overrun = GetPort(huart);
 800cc66:	0020      	movs	r0, r4
 800cc68:	f7fe fd72 	bl	800b750 <GetPort>
 800cc6c:	4b0c      	ldr	r3, [pc, #48]	; (800cca0 <HAL_UART_RxCpltCallback+0x58>)
 800cc6e:	7098      	strb	r0, [r3, #2]
		portStatus[GetPort(huart)] = OVERRUN;
 800cc70:	0020      	movs	r0, r4
 800cc72:	f7fe fd6d 	bl	800b750 <GetPort>
 800cc76:	2305      	movs	r3, #5
 800cc78:	542b      	strb	r3, [r5, r0]
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800cc7a:	0020      	movs	r0, r4
 800cc7c:	f7fe fd68 	bl	800b750 <GetPort>
 800cc80:	4b08      	ldr	r3, [pc, #32]	; (800cca4 <HAL_UART_RxCpltCallback+0x5c>)
 800cc82:	1818      	adds	r0, r3, r0
 800cc84:	2300      	movs	r3, #0
 800cc86:	3801      	subs	r0, #1
 800cc88:	7003      	strb	r3, [r0, #0]
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800cc8a:	0020      	movs	r0, r4
 800cc8c:	f7fe fd60 	bl	800b750 <GetPort>
 800cc90:	4b05      	ldr	r3, [pc, #20]	; (800cca8 <HAL_UART_RxCpltCallback+0x60>)
 800cc92:	1818      	adds	r0, r3, r0
 800cc94:	2301      	movs	r3, #1
 800cc96:	3801      	subs	r0, #1
 800cc98:	7003      	strb	r3, [r0, #0]
 800cc9a:	e7e3      	b.n	800cc64 <HAL_UART_RxCpltCallback+0x1c>
 800cc9c:	20000c2c 	.word	0x20000c2c
 800cca0:	20006e28 	.word	0x20006e28
 800cca4:	2000134c 	.word	0x2000134c
 800cca8:	20001344 	.word	0x20001344

0800ccac <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800ccac:	b672      	cpsid	i
 800ccae:	e7fe      	b.n	800ccae <vApplicationStackOverflowHook+0x2>

0800ccb0 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800ccb0:	b672      	cpsid	i
 800ccb2:	e7fe      	b.n	800ccb2 <vApplicationMallocFailedHook+0x2>

0800ccb4 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800ccb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccb6:	46de      	mov	lr, fp
 800ccb8:	464e      	mov	r6, r9
 800ccba:	4645      	mov	r5, r8
 800ccbc:	4657      	mov	r7, sl
 800ccbe:	b5e0      	push	{r5, r6, r7, lr}
 800ccc0:	b08d      	sub	sp, #52	; 0x34
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800ccc2:	ae04      	add	r6, sp, #16
 800ccc4:	0032      	movs	r2, r6
 800ccc6:	4b34      	ldr	r3, [pc, #208]	; (800cd98 <RTC_CalendarConfig+0xe4>)
 800ccc8:	cb13      	ldmia	r3!, {r0, r1, r4}
 800ccca:	c213      	stmia	r2!, {r0, r1, r4}
 800cccc:	ab01      	add	r3, sp, #4
 800ccce:	4698      	mov	r8, r3
 800ccd0:	4642      	mov	r2, r8
 800ccd2:	4b32      	ldr	r3, [pc, #200]	; (800cd9c <RTC_CalendarConfig+0xe8>)
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
  *(comDate + 6) = 0;
 800ccd4:	2400      	movs	r4, #0
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800ccd6:	cb03      	ldmia	r3!, {r0, r1}
 800ccd8:	c203      	stmia	r2!, {r0, r1}
  year = atoi(comDate + 9);		// only last 2 digits
 800ccda:	2019      	movs	r0, #25
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800ccdc:	781b      	ldrb	r3, [r3, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800ccde:	4468      	add	r0, sp
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cce0:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800cce2:	f005 fd16 	bl	8012712 <atoi>
 800cce6:	b2c3      	uxtb	r3, r0
  day = atoi(comDate + 4);
 800cce8:	a805      	add	r0, sp, #20
  year = atoi(comDate + 9);		// only last 2 digits
 800ccea:	469a      	mov	sl, r3
  *(comDate + 6) = 0;
 800ccec:	71b4      	strb	r4, [r6, #6]
  day = atoi(comDate + 4);
 800ccee:	f005 fd10 	bl	8012712 <atoi>
 800ccf2:	b2c3      	uxtb	r3, r0
 800ccf4:	4699      	mov	r9, r3
 800ccf6:	4d2a      	ldr	r5, [pc, #168]	; (800cda0 <RTC_CalendarConfig+0xec>)
  *(comDate + 3) = 0;
 800ccf8:	70f4      	strb	r4, [r6, #3]
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800ccfa:	6829      	ldr	r1, [r5, #0]
 800ccfc:	0030      	movs	r0, r6
 800ccfe:	f7f3 fa01 	bl	8000104 <strcmp>
 800cd02:	3401      	adds	r4, #1
 800cd04:	b2e4      	uxtb	r4, r4
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d100      	bne.n	800cd0c <RTC_CalendarConfig+0x58>
 800cd0a:	0027      	movs	r7, r4
 800cd0c:	3504      	adds	r5, #4
  for (uint8_t i = 0; i < 12; i++)
 800cd0e:	2c0c      	cmp	r4, #12
 800cd10:	d1f3      	bne.n	800ccfa <RTC_CalendarConfig+0x46>
			month = i + 1;
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800cd12:	200a      	movs	r0, #10
 800cd14:	4468      	add	r0, sp
 800cd16:	f005 fcfc 	bl	8012712 <atoi>
	*(comDate + 5) = 0;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	7173      	strb	r3, [r6, #5]
 800cd1e:	469b      	mov	fp, r3
	minutes = atoi(comTime + 3);
 800cd20:	466b      	mov	r3, sp
	seconds = atoi(comTime + 6);
 800cd22:	0004      	movs	r4, r0
	minutes = atoi(comTime + 3);
 800cd24:	1dd8      	adds	r0, r3, #7
 800cd26:	f005 fcf4 	bl	8012712 <atoi>
	*(comDate + 2) = 0;
 800cd2a:	465b      	mov	r3, fp
	minutes = atoi(comTime + 3);
 800cd2c:	0005      	movs	r5, r0
	hours = atoi(comTime);
 800cd2e:	4640      	mov	r0, r8
	*(comDate + 2) = 0;
 800cd30:	70b3      	strb	r3, [r6, #2]
	hours = atoi(comTime);
 800cd32:	f005 fcee 	bl	8012712 <atoi>
	
  /* Set Date */
  sdatestructure.Year = year;
 800cd36:	466b      	mov	r3, sp
 800cd38:	4652      	mov	r2, sl
 800cd3a:	70da      	strb	r2, [r3, #3]
  sdatestructure.Month = month;
  sdatestructure.Date = day;
 800cd3c:	464a      	mov	r2, r9
  sdatestructure.Month = month;
 800cd3e:	705f      	strb	r7, [r3, #1]
  sdatestructure.Date = day;
 800cd40:	709a      	strb	r2, [r3, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800cd42:	466a      	mov	r2, sp
 800cd44:	2301      	movs	r3, #1
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cd46:	4f17      	ldr	r7, [pc, #92]	; (800cda4 <RTC_CalendarConfig+0xf0>)
	hours = atoi(comTime);
 800cd48:	0006      	movs	r6, r0
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800cd4a:	7013      	strb	r3, [r2, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cd4c:	4669      	mov	r1, sp
 800cd4e:	2200      	movs	r2, #0
 800cd50:	0038      	movs	r0, r7
 800cd52:	f004 fe95 	bl	8011a80 <HAL_RTC_SetDate>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d116      	bne.n	800cd88 <RTC_CalendarConfig+0xd4>

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
  stimestructure.Seconds = seconds;
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800cd5a:	2218      	movs	r2, #24
 800cd5c:	4b12      	ldr	r3, [pc, #72]	; (800cda8 <RTC_CalendarConfig+0xf4>)
  stimestructure.Hours = hours;
 800cd5e:	a907      	add	r1, sp, #28
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800cd60:	7208      	strb	r0, [r1, #8]
 800cd62:	735a      	strb	r2, [r3, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cd64:	60c8      	str	r0, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800cd66:	6108      	str	r0, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cd68:	2200      	movs	r2, #0
 800cd6a:	0038      	movs	r0, r7
  stimestructure.Hours = hours;
 800cd6c:	700e      	strb	r6, [r1, #0]
  stimestructure.Minutes = minutes;
 800cd6e:	704d      	strb	r5, [r1, #1]
  stimestructure.Seconds = seconds;
 800cd70:	708c      	strb	r4, [r1, #2]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cd72:	f004 fdf1 	bl	8011958 <HAL_RTC_SetTime>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d106      	bne.n	800cd88 <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800cd7a:	0038      	movs	r0, r7
 800cd7c:	4a0b      	ldr	r2, [pc, #44]	; (800cdac <RTC_CalendarConfig+0xf8>)
 800cd7e:	2101      	movs	r1, #1
 800cd80:	f004 fefa 	bl	8011b78 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800cd84:	2000      	movs	r0, #0
 800cd86:	e000      	b.n	800cd8a <RTC_CalendarConfig+0xd6>
		return BOS_ERROR;
 800cd88:	20ff      	movs	r0, #255	; 0xff
}
 800cd8a:	b00d      	add	sp, #52	; 0x34
 800cd8c:	bc3c      	pop	{r2, r3, r4, r5}
 800cd8e:	4690      	mov	r8, r2
 800cd90:	4699      	mov	r9, r3
 800cd92:	46a2      	mov	sl, r4
 800cd94:	46ab      	mov	fp, r5
 800cd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd98:	08017cf4 	.word	0x08017cf4
 800cd9c:	08017d18 	.word	0x08017d18
 800cda0:	20000054 	.word	0x20000054
 800cda4:	2000729c 	.word	0x2000729c
 800cda8:	20006ea8 	.word	0x20006ea8
 800cdac:	000032f2 	.word	0x000032f2

0800cdb0 <RTC_Init>:
  __HAL_RCC_RTC_ENABLE();
 800cdb0:	2380      	movs	r3, #128	; 0x80
{
 800cdb2:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_RTC_ENABLE();
 800cdb4:	4d1e      	ldr	r5, [pc, #120]	; (800ce30 <RTC_Init+0x80>)
 800cdb6:	021b      	lsls	r3, r3, #8
 800cdb8:	6a2a      	ldr	r2, [r5, #32]
	RtcHandle.Instance = RTC; 
 800cdba:	4c1e      	ldr	r4, [pc, #120]	; (800ce34 <RTC_Init+0x84>)
  __HAL_RCC_RTC_ENABLE();
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	622b      	str	r3, [r5, #32]
  RtcHandle.Init.AsynchPrediv = 124;
 800cdc0:	227c      	movs	r2, #124	; 0x7c
	RtcHandle.Instance = RTC; 
 800cdc2:	4b1d      	ldr	r3, [pc, #116]	; (800ce38 <RTC_Init+0x88>)
  RtcHandle.Init.AsynchPrediv = 124;
 800cdc4:	60a2      	str	r2, [r4, #8]
	RtcHandle.Instance = RTC; 
 800cdc6:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800cdc8:	2300      	movs	r3, #0
  RtcHandle.Init.SynchPrediv = 1999;
 800cdca:	4a1c      	ldr	r2, [pc, #112]	; (800ce3c <RTC_Init+0x8c>)
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800cdcc:	0020      	movs	r0, r4
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800cdce:	6063      	str	r3, [r4, #4]
  RtcHandle.Init.SynchPrediv = 1999;
 800cdd0:	60e2      	str	r2, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800cdd2:	6123      	str	r3, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800cdd4:	6163      	str	r3, [r4, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800cdd6:	61a3      	str	r3, [r4, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800cdd8:	f004 fd76 	bl	80118c8 <HAL_RTC_Init>
 800cddc:	0006      	movs	r6, r0
 800cdde:	20ff      	movs	r0, #255	; 0xff
 800cde0:	2e00      	cmp	r6, #0
 800cde2:	d119      	bne.n	800ce18 <RTC_Init+0x68>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800cde4:	2101      	movs	r1, #1
 800cde6:	0020      	movs	r0, r4
 800cde8:	f004 fecc 	bl	8011b84 <HAL_RTCEx_BKUPRead>
 800cdec:	4b14      	ldr	r3, [pc, #80]	; (800ce40 <RTC_Init+0x90>)
 800cdee:	4298      	cmp	r0, r3
 800cdf0:	d113      	bne.n	800ce1a <RTC_Init+0x6a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800cdf2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cdf4:	011b      	lsls	r3, r3, #4
 800cdf6:	d501      	bpl.n	800cdfc <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800cdf8:	4b12      	ldr	r3, [pc, #72]	; (800ce44 <RTC_Init+0x94>)
 800cdfa:	701e      	strb	r6, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800cdfc:	4b0c      	ldr	r3, [pc, #48]	; (800ce30 <RTC_Init+0x80>)
 800cdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce00:	015b      	lsls	r3, r3, #5
 800ce02:	d50c      	bpl.n	800ce1e <RTC_Init+0x6e>
			bootStatus = RESET_BOOT;
 800ce04:	2201      	movs	r2, #1
 800ce06:	4b0f      	ldr	r3, [pc, #60]	; (800ce44 <RTC_Init+0x94>)
	return BOS_OK;
 800ce08:	2000      	movs	r0, #0
			bootStatus = RESET_BOOT;
 800ce0a:	701a      	strb	r2, [r3, #0]
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800ce0c:	2380      	movs	r3, #128	; 0x80
 800ce0e:	4a08      	ldr	r2, [pc, #32]	; (800ce30 <RTC_Init+0x80>)
 800ce10:	045b      	lsls	r3, r3, #17
 800ce12:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800ce14:	430b      	orrs	r3, r1
 800ce16:	6253      	str	r3, [r2, #36]	; 0x24
}
 800ce18:	bd70      	pop	{r4, r5, r6, pc}
    RTC_CalendarConfig();
 800ce1a:	f7ff ff4b 	bl	800ccb4 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800ce1e:	2380      	movs	r3, #128	; 0x80
 800ce20:	4a03      	ldr	r2, [pc, #12]	; (800ce30 <RTC_Init+0x80>)
 800ce22:	045b      	lsls	r3, r3, #17
 800ce24:	6a51      	ldr	r1, [r2, #36]	; 0x24
	return BOS_OK;
 800ce26:	2000      	movs	r0, #0
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800ce28:	430b      	orrs	r3, r1
 800ce2a:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800ce2c:	e7f4      	b.n	800ce18 <RTC_Init+0x68>
 800ce2e:	46c0      	nop			; (mov r8, r8)
 800ce30:	40021000 	.word	0x40021000
 800ce34:	2000729c 	.word	0x2000729c
 800ce38:	40002800 	.word	0x40002800
 800ce3c:	000007cf 	.word	0x000007cf
 800ce40:	000032f2 	.word	0x000032f2
 800ce44:	20001fc0 	.word	0x20001fc0

0800ce48 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800ce48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce4a:	46c6      	mov	lr, r8
 800ce4c:	b500      	push	{lr}
 800ce4e:	b086      	sub	sp, #24
 800ce50:	ac0c      	add	r4, sp, #48	; 0x30
 800ce52:	7827      	ldrb	r7, [r4, #0]
 800ce54:	ac0d      	add	r4, sp, #52	; 0x34
 800ce56:	7824      	ldrb	r4, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800ce58:	3230      	adds	r2, #48	; 0x30
{
 800ce5a:	46a0      	mov	r8, r4
 800ce5c:	ac0e      	add	r4, sp, #56	; 0x38
 800ce5e:	7825      	ldrb	r5, [r4, #0]
 800ce60:	ac0f      	add	r4, sp, #60	; 0x3c
 800ce62:	7826      	ldrb	r6, [r4, #0]
  sdatestructure.Year = year-2000;
 800ce64:	466c      	mov	r4, sp
 800ce66:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800ce68:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800ce6a:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800ce6c:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800ce6e:	4c20      	ldr	r4, [pc, #128]	; (800cef0 <BOS_CalendarConfig+0xa8>)
 800ce70:	2200      	movs	r2, #0
 800ce72:	4669      	mov	r1, sp
 800ce74:	0020      	movs	r0, r4
 800ce76:	f004 fe03 	bl	8011a80 <HAL_RTC_SetDate>
 800ce7a:	2800      	cmp	r0, #0
 800ce7c:	d123      	bne.n	800cec6 <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
 800ce7e:	4643      	mov	r3, r8
  stimestructure.Hours = hours;
 800ce80:	a901      	add	r1, sp, #4
 800ce82:	700d      	strb	r5, [r1, #0]
  stimestructure.Minutes = minutes;
 800ce84:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds; 
 800ce86:	708f      	strb	r7, [r1, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800ce88:	6108      	str	r0, [r1, #16]
//	else if (daylightsaving == DAYLIGHT_ADD1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
 800ce8a:	2d0c      	cmp	r5, #12
 800ce8c:	d820      	bhi.n	800ced0 <BOS_CalendarConfig+0x88>
 800ce8e:	4d19      	ldr	r5, [pc, #100]	; (800cef4 <BOS_CalendarConfig+0xac>)
	
	if (AMPM == RTC_AM) {
 800ce90:	2e01      	cmp	r6, #1
 800ce92:	d022      	beq.n	800ceda <BOS_CalendarConfig+0x92>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800ce94:	2e02      	cmp	r6, #2
 800ce96:	d025      	beq.n	800cee4 <BOS_CalendarConfig+0x9c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800ce98:	2318      	movs	r3, #24
 800ce9a:	736b      	strb	r3, [r5, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	0020      	movs	r0, r4
 800cea0:	f004 fd5a 	bl	8011958 <HAL_RTC_SetTime>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	d10e      	bne.n	800cec6 <BOS_CalendarConfig+0x7e>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800cea8:	7b6b      	ldrb	r3, [r5, #13]
 800ceaa:	7929      	ldrb	r1, [r5, #4]
 800ceac:	021b      	lsls	r3, r3, #8
 800ceae:	301b      	adds	r0, #27
 800ceb0:	4319      	orrs	r1, r3
 800ceb2:	30ff      	adds	r0, #255	; 0xff
 800ceb4:	f7fa fcf6 	bl	80078a4 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800ceb8:	0020      	movs	r0, r4
 800ceba:	4a0f      	ldr	r2, [pc, #60]	; (800cef8 <BOS_CalendarConfig+0xb0>)
 800cebc:	2101      	movs	r1, #1
 800cebe:	f004 fe5b 	bl	8011b78 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800cec2:	2000      	movs	r0, #0
 800cec4:	e000      	b.n	800cec8 <BOS_CalendarConfig+0x80>
		return BOS_ERROR;
 800cec6:	20ff      	movs	r0, #255	; 0xff
}
 800cec8:	b006      	add	sp, #24
 800ceca:	bc04      	pop	{r2}
 800cecc:	4690      	mov	r8, r2
 800cece:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hours > 12)	BOS.hourformat = 24;
 800ced0:	2318      	movs	r3, #24
 800ced2:	4d08      	ldr	r5, [pc, #32]	; (800cef4 <BOS_CalendarConfig+0xac>)
 800ced4:	736b      	strb	r3, [r5, #13]
	if (AMPM == RTC_AM) {
 800ced6:	2e01      	cmp	r6, #1
 800ced8:	d1dc      	bne.n	800ce94 <BOS_CalendarConfig+0x4c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800ceda:	2300      	movs	r3, #0
 800cedc:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800cede:	330c      	adds	r3, #12
 800cee0:	736b      	strb	r3, [r5, #13]
 800cee2:	e7db      	b.n	800ce9c <BOS_CalendarConfig+0x54>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800cee4:	2340      	movs	r3, #64	; 0x40
 800cee6:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800cee8:	3b34      	subs	r3, #52	; 0x34
 800ceea:	736b      	strb	r3, [r5, #13]
 800ceec:	e7d6      	b.n	800ce9c <BOS_CalendarConfig+0x54>
 800ceee:	46c0      	nop			; (mov r8, r8)
 800cef0:	2000729c 	.word	0x2000729c
 800cef4:	20006ea8 	.word	0x20006ea8
 800cef8:	000032f2 	.word	0x000032f2

0800cefc <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800cefc:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800cefe:	4d16      	ldr	r5, [pc, #88]	; (800cf58 <GetTimeDate+0x5c>)
{
 800cf00:	b087      	sub	sp, #28
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800cf02:	ac01      	add	r4, sp, #4
 800cf04:	0021      	movs	r1, r4
 800cf06:	2200      	movs	r2, #0
 800cf08:	0028      	movs	r0, r5
 800cf0a:	f004 fc45 	bl	8011798 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800cf0e:	4669      	mov	r1, sp
 800cf10:	2200      	movs	r2, #0
 800cf12:	0028      	movs	r0, r5
 800cf14:	f004 fc70 	bl	80117f8 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800cf18:	7a22      	ldrb	r2, [r4, #8]
 800cf1a:	4b10      	ldr	r3, [pc, #64]	; (800cf5c <GetTimeDate+0x60>)
 800cf1c:	09d2      	lsrs	r2, r2, #7
 800cf1e:	3201      	adds	r2, #1
 800cf20:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800cf22:	6862      	ldr	r2, [r4, #4]
	BOS.time.minutes = stimestructureget.Minutes;
	BOS.time.hours = stimestructureget.Hours;
	BOS.date.day = sdatestructureget.Date;
	BOS.date.month = sdatestructureget.Month;
	BOS.date.weekday = sdatestructureget.WeekDay;
	BOS.date.year = sdatestructureget.Year + 2000;
 800cf24:	21fa      	movs	r1, #250	; 0xfa
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800cf26:	0852      	lsrs	r2, r2, #1
 800cf28:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800cf2a:	78a2      	ldrb	r2, [r4, #2]
	BOS.date.year = sdatestructureget.Year + 2000;
 800cf2c:	00c9      	lsls	r1, r1, #3
	BOS.time.seconds = stimestructureget.Seconds;
 800cf2e:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800cf30:	7862      	ldrb	r2, [r4, #1]
	BOS.date.year = sdatestructureget.Year + 2000;
 800cf32:	468c      	mov	ip, r1
	BOS.time.minutes = stimestructureget.Minutes;
 800cf34:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800cf36:	7822      	ldrb	r2, [r4, #0]
 800cf38:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800cf3a:	466a      	mov	r2, sp
 800cf3c:	7892      	ldrb	r2, [r2, #2]
 800cf3e:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800cf40:	466a      	mov	r2, sp
 800cf42:	7852      	ldrb	r2, [r2, #1]
 800cf44:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800cf46:	466a      	mov	r2, sp
 800cf48:	7812      	ldrb	r2, [r2, #0]
 800cf4a:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800cf4c:	466a      	mov	r2, sp
 800cf4e:	78d2      	ldrb	r2, [r2, #3]
 800cf50:	4462      	add	r2, ip
 800cf52:	831a      	strh	r2, [r3, #24]
}
 800cf54:	b007      	add	sp, #28
 800cf56:	bd30      	pop	{r4, r5, pc}
 800cf58:	2000729c 	.word	0x2000729c
 800cf5c:	20006ea8 	.word	0x20006ea8

0800cf60 <TIM_USEC_Init>:
void TIM_USEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800cf60:	2080      	movs	r0, #128	; 0x80
 800cf62:	4a13      	ldr	r2, [pc, #76]	; (800cfb0 <TIM_USEC_Init+0x50>)
{
 800cf64:	b530      	push	{r4, r5, lr}
	__TIM14_CLK_ENABLE();
 800cf66:	69d1      	ldr	r1, [r2, #28]
 800cf68:	0040      	lsls	r0, r0, #1
 800cf6a:	4301      	orrs	r1, r0
 800cf6c:	61d1      	str	r1, [r2, #28]
 800cf6e:	69d3      	ldr	r3, [r2, #28]
{
 800cf70:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 800cf72:	4003      	ands	r3, r0
 800cf74:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800cf76:	4c0f      	ldr	r4, [pc, #60]	; (800cfb4 <TIM_USEC_Init+0x54>)
	__TIM14_CLK_ENABLE();
 800cf78:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 800cf7a:	4b0f      	ldr	r3, [pc, #60]	; (800cfb8 <TIM_USEC_Init+0x58>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf7c:	2500      	movs	r5, #0
  htim14.Instance = TIM14;
 800cf7e:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800cf80:	f004 fb5a 	bl	8011638 <HAL_RCC_GetPCLK1Freq>
 800cf84:	490d      	ldr	r1, [pc, #52]	; (800cfbc <TIM_USEC_Init+0x5c>)
 800cf86:	f7f3 f8e3 	bl	8000150 <__udivsi3>
  htim14.Init.Period = 0xFFFF;
 800cf8a:	4b0d      	ldr	r3, [pc, #52]	; (800cfc0 <TIM_USEC_Init+0x60>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800cf8c:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim14);
 800cf8e:	0020      	movs	r0, r4
  htim14.Init.Period = 0xFFFF;
 800cf90:	60e3      	str	r3, [r4, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf92:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim14);
 800cf94:	f004 fe5e 	bl	8011c54 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800cf98:	a902      	add	r1, sp, #8
 800cf9a:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cf9c:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cf9e:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800cfa0:	f004 fe72 	bl	8011c88 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800cfa4:	0020      	movs	r0, r4
 800cfa6:	f004 fdf5 	bl	8011b94 <HAL_TIM_Base_Start>
}
 800cfaa:	b005      	add	sp, #20
 800cfac:	bd30      	pop	{r4, r5, pc}
 800cfae:	46c0      	nop			; (mov r8, r8)
 800cfb0:	40021000 	.word	0x40021000
 800cfb4:	200072f8 	.word	0x200072f8
 800cfb8:	40002000 	.word	0x40002000
 800cfbc:	000f4240 	.word	0x000f4240
 800cfc0:	0000ffff 	.word	0x0000ffff

0800cfc4 <TIM_MSEC_Init>:
void TIM_MSEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800cfc4:	2080      	movs	r0, #128	; 0x80
 800cfc6:	4a13      	ldr	r2, [pc, #76]	; (800d014 <TIM_MSEC_Init+0x50>)
{
 800cfc8:	b530      	push	{r4, r5, lr}
	__TIM15_CLK_ENABLE();
 800cfca:	6991      	ldr	r1, [r2, #24]
 800cfcc:	0240      	lsls	r0, r0, #9
 800cfce:	4301      	orrs	r1, r0
 800cfd0:	6191      	str	r1, [r2, #24]
 800cfd2:	6993      	ldr	r3, [r2, #24]
{
 800cfd4:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 800cfd6:	4003      	ands	r3, r0
 800cfd8:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800cfda:	4c0f      	ldr	r4, [pc, #60]	; (800d018 <TIM_MSEC_Init+0x54>)
	__TIM15_CLK_ENABLE();
 800cfdc:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 800cfde:	4b0f      	ldr	r3, [pc, #60]	; (800d01c <TIM_MSEC_Init+0x58>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cfe0:	2500      	movs	r5, #0
  htim15.Instance = TIM15;
 800cfe2:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800cfe4:	f004 fb28 	bl	8011638 <HAL_RCC_GetPCLK1Freq>
 800cfe8:	21fa      	movs	r1, #250	; 0xfa
 800cfea:	0089      	lsls	r1, r1, #2
 800cfec:	f7f3 f8b0 	bl	8000150 <__udivsi3>
  htim15.Init.Period = 0xFFFF;
 800cff0:	4b0b      	ldr	r3, [pc, #44]	; (800d020 <TIM_MSEC_Init+0x5c>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800cff2:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim15);
 800cff4:	0020      	movs	r0, r4
  htim15.Init.Period = 0xFFFF;
 800cff6:	60e3      	str	r3, [r4, #12]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cff8:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim15);
 800cffa:	f004 fe2b 	bl	8011c54 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800cffe:	a902      	add	r1, sp, #8
 800d000:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d002:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d004:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d006:	f004 fe3f 	bl	8011c88 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800d00a:	0020      	movs	r0, r4
 800d00c:	f004 fdc2 	bl	8011b94 <HAL_TIM_Base_Start>
}
 800d010:	b005      	add	sp, #20
 800d012:	bd30      	pop	{r4, r5, pc}
 800d014:	40021000 	.word	0x40021000
 800d018:	200072bc 	.word	0x200072bc
 800d01c:	40014000 	.word	0x40014000
 800d020:	0000ffff 	.word	0x0000ffff

0800d024 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800d024:	b510      	push	{r4, lr}
 800d026:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800d028:	f002 f944 	bl	800f2b4 <vPortEnterCritical>
	
	if (Delay)
 800d02c:	2c00      	cmp	r4, #0
 800d02e:	d006      	beq.n	800d03e <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800d030:	4b04      	ldr	r3, [pc, #16]	; (800d044 <StartMicroDelay+0x20>)
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800d036:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d038:	1a5b      	subs	r3, r3, r1
 800d03a:	42a3      	cmp	r3, r4
 800d03c:	d9fb      	bls.n	800d036 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d03e:	f002 f945 	bl	800f2cc <vPortExitCritical>
}
 800d042:	bd10      	pop	{r4, pc}
 800d044:	200072f8 	.word	0x200072f8

0800d048 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800d048:	b510      	push	{r4, lr}
 800d04a:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800d04c:	f002 f932 	bl	800f2b4 <vPortEnterCritical>
	
	if (Delay)
 800d050:	2c00      	cmp	r4, #0
 800d052:	d006      	beq.n	800d062 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800d054:	4b04      	ldr	r3, [pc, #16]	; (800d068 <StartMilliDelay+0x20>)
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800d05a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d05c:	1a5b      	subs	r3, r3, r1
 800d05e:	42a3      	cmp	r3, r4
 800d060:	d9fb      	bls.n	800d05a <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d062:	f002 f933 	bl	800f2cc <vPortExitCritical>
}
 800d066:	bd10      	pop	{r4, pc}
 800d068:	200072bc 	.word	0x200072bc

0800d06c <MX_USART1_UART_Init>:

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
 800d06c:	4809      	ldr	r0, [pc, #36]	; (800d094 <MX_USART1_UART_Init+0x28>)
 800d06e:	4b0a      	ldr	r3, [pc, #40]	; (800d098 <MX_USART1_UART_Init+0x2c>)
{
 800d070:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800d072:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d074:	23e1      	movs	r3, #225	; 0xe1
 800d076:	031b      	lsls	r3, r3, #12
 800d078:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d07a:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d07c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d07e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d080:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d082:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d084:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d086:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d088:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d08a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d08c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800d08e:	f005 f9eb 	bl	8012468 <HAL_UART_Init>
	#if _P4pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800d092:	bd10      	pop	{r4, pc}
 800d094:	200070b8 	.word	0x200070b8
 800d098:	40013800 	.word	0x40013800

0800d09c <MX_USART2_UART_Init>:

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
 800d09c:	4809      	ldr	r0, [pc, #36]	; (800d0c4 <MX_USART2_UART_Init+0x28>)
 800d09e:	4b0a      	ldr	r3, [pc, #40]	; (800d0c8 <MX_USART2_UART_Init+0x2c>)
{
 800d0a0:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d0a2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d0a4:	23e1      	movs	r3, #225	; 0xe1
 800d0a6:	031b      	lsls	r3, r3, #12
 800d0a8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d0aa:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d0ac:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d0ae:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d0b0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d0b2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d0b4:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0b6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0b8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d0ba:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d0bc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d0be:	f005 f9d3 	bl	8012468 <HAL_UART_Init>
	#if _P1pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800d0c2:	bd10      	pop	{r4, pc}
 800d0c4:	20007208 	.word	0x20007208
 800d0c8:	40004400 	.word	0x40004400

0800d0cc <MX_USART3_UART_Init>:

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
  huart3.Instance = USART3;
 800d0cc:	4809      	ldr	r0, [pc, #36]	; (800d0f4 <MX_USART3_UART_Init+0x28>)
 800d0ce:	4b0a      	ldr	r3, [pc, #40]	; (800d0f8 <MX_USART3_UART_Init+0x2c>)
{
 800d0d0:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d0d2:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d0d4:	23e1      	movs	r3, #225	; 0xe1
 800d0d6:	031b      	lsls	r3, r3, #12
 800d0d8:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d0da:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d0dc:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d0de:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d0e0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d0e2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d0e4:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0e6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0e8:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d0ea:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d0ec:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d0ee:	f005 f9bb 	bl	8012468 <HAL_UART_Init>
	#if _P3pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800d0f2:	bd10      	pop	{r4, pc}
 800d0f4:	20006fd8 	.word	0x20006fd8
 800d0f8:	40004800 	.word	0x40004800

0800d0fc <MX_USART4_UART_Init>:

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
  huart4.Instance = USART4;
 800d0fc:	4809      	ldr	r0, [pc, #36]	; (800d124 <MX_USART4_UART_Init+0x28>)
 800d0fe:	4b0a      	ldr	r3, [pc, #40]	; (800d128 <MX_USART4_UART_Init+0x2c>)
{
 800d100:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800d102:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d104:	23e1      	movs	r3, #225	; 0xe1
 800d106:	031b      	lsls	r3, r3, #12
 800d108:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d10a:	220c      	movs	r2, #12
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d10c:	2300      	movs	r3, #0
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d10e:	6142      	str	r2, [r0, #20]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d110:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d112:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d114:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d116:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d118:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d11a:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d11c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800d11e:	f005 f9a3 	bl	8012468 <HAL_UART_Init>
	#if _P6pol_reversed	
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800d122:	bd10      	pop	{r4, pc}
 800d124:	20007198 	.word	0x20007198
 800d128:	40004c00 	.word	0x40004c00

0800d12c <MX_USART5_UART_Init>:

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
  huart5.Instance = USART5;
 800d12c:	4809      	ldr	r0, [pc, #36]	; (800d154 <MX_USART5_UART_Init+0x28>)
 800d12e:	4b0a      	ldr	r3, [pc, #40]	; (800d158 <MX_USART5_UART_Init+0x2c>)
{
 800d130:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800d132:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d134:	23e1      	movs	r3, #225	; 0xe1
 800d136:	031b      	lsls	r3, r3, #12
 800d138:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d13a:	220c      	movs	r2, #12
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d13c:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d13e:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d140:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d142:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d144:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d146:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d148:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d14a:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d14c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800d14e:	f005 f98b 	bl	8012468 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800d152:	bd10      	pop	{r4, pc}
 800d154:	20007048 	.word	0x20007048
 800d158:	40005000 	.word	0x40005000

0800d15c <MX_USART6_UART_Init>:

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
  huart6.Instance = USART6;
 800d15c:	4809      	ldr	r0, [pc, #36]	; (800d184 <MX_USART6_UART_Init+0x28>)
 800d15e:	4b0a      	ldr	r3, [pc, #40]	; (800d188 <MX_USART6_UART_Init+0x2c>)
{
 800d160:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d162:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d164:	23e1      	movs	r3, #225	; 0xe1
 800d166:	031b      	lsls	r3, r3, #12
 800d168:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d16a:	220c      	movs	r2, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d16c:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d16e:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d170:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d172:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d174:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d176:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d178:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d17a:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d17c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d17e:	f005 f973 	bl	8012468 <HAL_UART_Init>
	#if _P2pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800d182:	bd10      	pop	{r4, pc}
 800d184:	20007128 	.word	0x20007128
 800d188:	40011400 	.word	0x40011400

0800d18c <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d18e:	46c6      	mov	lr, r8
 800d190:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800d192:	6803      	ldr	r3, [r0, #0]
 800d194:	4a7d      	ldr	r2, [pc, #500]	; (800d38c <HAL_UART_MspInit+0x200>)
{
 800d196:	b08c      	sub	sp, #48	; 0x30
  if(huart->Instance==USART1)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d040      	beq.n	800d21e <HAL_UART_MspInit+0x92>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800d19c:	4a7c      	ldr	r2, [pc, #496]	; (800d390 <HAL_UART_MspInit+0x204>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d06b      	beq.n	800d27a <HAL_UART_MspInit+0xee>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800d1a2:	4a7c      	ldr	r2, [pc, #496]	; (800d394 <HAL_UART_MspInit+0x208>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d100      	bne.n	800d1aa <HAL_UART_MspInit+0x1e>
 800d1a8:	e093      	b.n	800d2d2 <HAL_UART_MspInit+0x146>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800d1aa:	4a7b      	ldr	r2, [pc, #492]	; (800d398 <HAL_UART_MspInit+0x20c>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d100      	bne.n	800d1b2 <HAL_UART_MspInit+0x26>
 800d1b0:	e0ab      	b.n	800d30a <HAL_UART_MspInit+0x17e>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800d1b2:	4a7a      	ldr	r2, [pc, #488]	; (800d39c <HAL_UART_MspInit+0x210>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d007      	beq.n	800d1c8 <HAL_UART_MspInit+0x3c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800d1b8:	4a79      	ldr	r2, [pc, #484]	; (800d3a0 <HAL_UART_MspInit+0x214>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d100      	bne.n	800d1c0 <HAL_UART_MspInit+0x34>
 800d1be:	e0c5      	b.n	800d34c <HAL_UART_MspInit+0x1c0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800d1c0:	b00c      	add	sp, #48	; 0x30
 800d1c2:	bc04      	pop	{r2}
 800d1c4:	4690      	mov	r8, r2
 800d1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART5_CLK_ENABLE();
 800d1c8:	2080      	movs	r0, #128	; 0x80
 800d1ca:	4a76      	ldr	r2, [pc, #472]	; (800d3a4 <HAL_UART_MspInit+0x218>)
 800d1cc:	0340      	lsls	r0, r0, #13
 800d1ce:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1d0:	2702      	movs	r7, #2
    __USART5_CLK_ENABLE();
 800d1d2:	4301      	orrs	r1, r0
 800d1d4:	61d1      	str	r1, [r2, #28]
 800d1d6:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1d8:	2601      	movs	r6, #1
    __USART5_CLK_ENABLE();
 800d1da:	4003      	ands	r3, r0
 800d1dc:	9305      	str	r3, [sp, #20]
 800d1de:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1e0:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d1e2:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d1e4:	2404      	movs	r4, #4
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d1e6:	a907      	add	r1, sp, #28
 800d1e8:	486f      	ldr	r0, [pc, #444]	; (800d3a8 <HAL_UART_MspInit+0x21c>)
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d1ea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1ec:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1ee:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1f0:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d1f2:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d1f4:	f003 fc56 	bl	8010aa4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d1f8:	2310      	movs	r3, #16
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d1fa:	486b      	ldr	r0, [pc, #428]	; (800d3a8 <HAL_UART_MspInit+0x21c>)
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d1fc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1fe:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d200:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d202:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800d204:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d206:	a907      	add	r1, sp, #28
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d208:	f003 fc4c 	bl	8010aa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d20c:	2200      	movs	r2, #0
 800d20e:	2101      	movs	r1, #1
 800d210:	201d      	movs	r0, #29
 800d212:	f002 fc5d 	bl	800fad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d216:	201d      	movs	r0, #29
 800d218:	f002 fc86 	bl	800fb28 <HAL_NVIC_EnableIRQ>
}
 800d21c:	e7d0      	b.n	800d1c0 <HAL_UART_MspInit+0x34>
    __USART1_CLK_ENABLE();
 800d21e:	2080      	movs	r0, #128	; 0x80
 800d220:	4a60      	ldr	r2, [pc, #384]	; (800d3a4 <HAL_UART_MspInit+0x218>)
 800d222:	01c0      	lsls	r0, r0, #7
 800d224:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d226:	2401      	movs	r4, #1
    __USART1_CLK_ENABLE();
 800d228:	4301      	orrs	r1, r0
 800d22a:	6191      	str	r1, [r2, #24]
 800d22c:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d22e:	2602      	movs	r6, #2
    __USART1_CLK_ENABLE();
 800d230:	4003      	ands	r3, r0
 800d232:	9301      	str	r3, [sp, #4]
 800d234:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d236:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d238:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d23a:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d23c:	009b      	lsls	r3, r3, #2
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d23e:	a907      	add	r1, sp, #28
 800d240:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d242:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d244:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d246:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d248:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800d24a:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d24c:	f003 fc2a 	bl	8010aa4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d250:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d252:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d254:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d256:	a907      	add	r1, sp, #28
 800d258:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d25a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d25c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d25e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d260:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800d262:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d264:	f003 fc1e 	bl	8010aa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800d268:	2200      	movs	r2, #0
 800d26a:	2101      	movs	r1, #1
 800d26c:	201b      	movs	r0, #27
 800d26e:	f002 fc2f 	bl	800fad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d272:	201b      	movs	r0, #27
 800d274:	f002 fc58 	bl	800fb28 <HAL_NVIC_EnableIRQ>
 800d278:	e7a2      	b.n	800d1c0 <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800d27a:	2080      	movs	r0, #128	; 0x80
 800d27c:	4a49      	ldr	r2, [pc, #292]	; (800d3a4 <HAL_UART_MspInit+0x218>)
 800d27e:	0280      	lsls	r0, r0, #10
 800d280:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d282:	2401      	movs	r4, #1
    __USART2_CLK_ENABLE();
 800d284:	4301      	orrs	r1, r0
 800d286:	61d1      	str	r1, [r2, #28]
 800d288:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d28a:	2602      	movs	r6, #2
    __USART2_CLK_ENABLE();
 800d28c:	4003      	ands	r3, r0
 800d28e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d290:	2090      	movs	r0, #144	; 0x90
    __USART2_CLK_ENABLE();
 800d292:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d294:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d296:	2304      	movs	r3, #4
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d298:	a907      	add	r1, sp, #28
 800d29a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d29c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d29e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2a0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2a2:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800d2a4:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d2a6:	f003 fbfd 	bl	8010aa4 <HAL_GPIO_Init>
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d2aa:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d2ac:	2308      	movs	r3, #8
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d2ae:	a907      	add	r1, sp, #28
 800d2b0:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d2b2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2b4:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2b6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2b8:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800d2ba:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d2bc:	f003 fbf2 	bl	8010aa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	2101      	movs	r1, #1
 800d2c4:	201c      	movs	r0, #28
 800d2c6:	f002 fc03 	bl	800fad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d2ca:	201c      	movs	r0, #28
 800d2cc:	f002 fc2c 	bl	800fb28 <HAL_NVIC_EnableIRQ>
 800d2d0:	e776      	b.n	800d1c0 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800d2d2:	2080      	movs	r0, #128	; 0x80
 800d2d4:	4a33      	ldr	r2, [pc, #204]	; (800d3a4 <HAL_UART_MspInit+0x218>)
 800d2d6:	02c0      	lsls	r0, r0, #11
 800d2d8:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2da:	2702      	movs	r7, #2
    __USART3_CLK_ENABLE();
 800d2dc:	4301      	orrs	r1, r0
 800d2de:	61d1      	str	r1, [r2, #28]
 800d2e0:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2e2:	2601      	movs	r6, #1
    __USART3_CLK_ENABLE();
 800d2e4:	4003      	ands	r3, r0
 800d2e6:	9303      	str	r3, [sp, #12]
 800d2e8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d2ea:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2ec:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d2ee:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d2f0:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d2f2:	a907      	add	r1, sp, #28
 800d2f4:	482c      	ldr	r0, [pc, #176]	; (800d3a8 <HAL_UART_MspInit+0x21c>)
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d2f6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2f8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2fa:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2fc:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d2fe:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d300:	f003 fbd0 	bl	8010aa4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800d304:	2380      	movs	r3, #128	; 0x80
 800d306:	011b      	lsls	r3, r3, #4
 800d308:	e777      	b.n	800d1fa <HAL_UART_MspInit+0x6e>
    __USART4_CLK_ENABLE();
 800d30a:	2080      	movs	r0, #128	; 0x80
 800d30c:	4a25      	ldr	r2, [pc, #148]	; (800d3a4 <HAL_UART_MspInit+0x218>)
 800d30e:	0300      	lsls	r0, r0, #12
 800d310:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800d312:	2401      	movs	r4, #1
    __USART4_CLK_ENABLE();
 800d314:	4301      	orrs	r1, r0
 800d316:	61d1      	str	r1, [r2, #28]
 800d318:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d31a:	2502      	movs	r5, #2
    __USART4_CLK_ENABLE();
 800d31c:	4003      	ands	r3, r0
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800d31e:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d320:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = USART4_AF;	
 800d322:	2604      	movs	r6, #4
    __USART4_CLK_ENABLE();
 800d324:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800d326:	a907      	add	r1, sp, #28
 800d328:	05c0      	lsls	r0, r0, #23
    __USART4_CLK_ENABLE();
 800d32a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800d32c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d32e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d330:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d332:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800d334:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800d336:	f003 fbb5 	bl	8010aa4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800d33a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d33c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d33e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d340:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800d342:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d344:	2090      	movs	r0, #144	; 0x90
 800d346:	a907      	add	r1, sp, #28
 800d348:	05c0      	lsls	r0, r0, #23
 800d34a:	e75d      	b.n	800d208 <HAL_UART_MspInit+0x7c>
    __USART6_CLK_ENABLE();
 800d34c:	2420      	movs	r4, #32
 800d34e:	4b15      	ldr	r3, [pc, #84]	; (800d3a4 <HAL_UART_MspInit+0x218>)
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d350:	2090      	movs	r0, #144	; 0x90
    __USART6_CLK_ENABLE();
 800d352:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d354:	2701      	movs	r7, #1
    __USART6_CLK_ENABLE();
 800d356:	4322      	orrs	r2, r4
 800d358:	619a      	str	r2, [r3, #24]
 800d35a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d35c:	2603      	movs	r6, #3
    __USART6_CLK_ENABLE();
 800d35e:	4023      	ands	r3, r4
 800d360:	9306      	str	r3, [sp, #24]
 800d362:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800d364:	2310      	movs	r3, #16
 800d366:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d368:	3b0e      	subs	r3, #14
 800d36a:	4698      	mov	r8, r3
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d36c:	2505      	movs	r5, #5
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d36e:	a907      	add	r1, sp, #28
 800d370:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d372:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d374:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d376:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d378:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d37a:	f003 fb93 	bl	8010aa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d37e:	4643      	mov	r3, r8
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800d380:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d382:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d384:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d386:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800d388:	950b      	str	r5, [sp, #44]	; 0x2c
 800d38a:	e7db      	b.n	800d344 <HAL_UART_MspInit+0x1b8>
 800d38c:	40013800 	.word	0x40013800
 800d390:	40004400 	.word	0x40004400
 800d394:	40004800 	.word	0x40004800
 800d398:	40004c00 	.word	0x40004c00
 800d39c:	40005000 	.word	0x40005000
 800d3a0:	40011400 	.word	0x40011400
 800d3a4:	40021000 	.word	0x40021000
 800d3a8:	48000400 	.word	0x48000400

0800d3ac <writePxMutex>:
}

/* --- Blocking (polling-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout, uint32_t portTimeout)
{
 800d3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ae:	4647      	mov	r7, r8
 800d3b0:	46ce      	mov	lr, r9
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	0017      	movs	r7, r2
 800d3b6:	1e42      	subs	r2, r0, #1
 800d3b8:	b2d2      	uxtb	r2, r2
 800d3ba:	000e      	movs	r6, r1
 800d3bc:	2a05      	cmp	r2, #5
 800d3be:	d80e      	bhi.n	800d3de <writePxMutex+0x32>
 800d3c0:	4911      	ldr	r1, [pc, #68]	; (800d408 <writePxMutex+0x5c>)
 800d3c2:	0092      	lsls	r2, r2, #2
 800d3c4:	5852      	ldr	r2, [r2, r1]
 800d3c6:	4690      	mov	r8, r2
	HAL_StatusTypeDef result = HAL_ERROR;
	
	if (GetUart(port) != NULL) {
 800d3c8:	2a00      	cmp	r2, #0
 800d3ca:	d008      	beq.n	800d3de <writePxMutex+0x32>
		/*/ Wait for the semaphore to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d3cc:	4a0f      	ldr	r2, [pc, #60]	; (800d40c <writePxMutex+0x60>)
 800d3ce:	0085      	lsls	r5, r0, #2
 800d3d0:	0019      	movs	r1, r3
 800d3d2:	5950      	ldr	r0, [r2, r5]
 800d3d4:	4691      	mov	r9, r2
 800d3d6:	f000 f977 	bl	800d6c8 <osSemaphoreWait>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d007      	beq.n	800d3ee <writePxMutex+0x42>
	HAL_StatusTypeDef result = HAL_ERROR;
 800d3de:	2401      	movs	r4, #1
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
		}
	}
	
	return result;
}
 800d3e0:	0020      	movs	r0, r4
 800d3e2:	bc0c      	pop	{r2, r3}
 800d3e4:	4690      	mov	r8, r2
 800d3e6:	4699      	mov	r9, r3
 800d3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d3ea:	2803      	cmp	r0, #3
 800d3ec:	d007      	beq.n	800d3fe <writePxMutex+0x52>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800d3ee:	9b08      	ldr	r3, [sp, #32]
 800d3f0:	003a      	movs	r2, r7
 800d3f2:	0031      	movs	r1, r6
 800d3f4:	4640      	mov	r0, r8
 800d3f6:	f004 ff95 	bl	8012324 <HAL_UART_Transmit>
 800d3fa:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d3fc:	d1f5      	bne.n	800d3ea <writePxMutex+0x3e>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800d3fe:	464b      	mov	r3, r9
 800d400:	5958      	ldr	r0, [r3, r5]
 800d402:	f000 f98b 	bl	800d71c <osSemaphoreRelease>
 800d406:	e7eb      	b.n	800d3e0 <writePxMutex+0x34>
 800d408:	08017acc 	.word	0x08017acc
 800d40c:	20006f2c 	.word	0x20006f2c

0800d410 <writePxITMutex>:
}

/* --- Non-blocking (interrupt-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxITMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800d410:	b570      	push	{r4, r5, r6, lr}
 800d412:	0015      	movs	r5, r2
 800d414:	1e42      	subs	r2, r0, #1
 800d416:	b2d2      	uxtb	r2, r2
 800d418:	000c      	movs	r4, r1
 800d41a:	2a05      	cmp	r2, #5
 800d41c:	d80c      	bhi.n	800d438 <writePxITMutex+0x28>
 800d41e:	490a      	ldr	r1, [pc, #40]	; (800d448 <writePxITMutex+0x38>)
 800d420:	0092      	lsls	r2, r2, #2
 800d422:	5856      	ldr	r6, [r2, r1]
	HAL_StatusTypeDef result = HAL_ERROR; 

	if (GetUart(port) != NULL) {	
 800d424:	2e00      	cmp	r6, #0
 800d426:	d007      	beq.n	800d438 <writePxITMutex+0x28>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d428:	4a08      	ldr	r2, [pc, #32]	; (800d44c <writePxITMutex+0x3c>)
 800d42a:	0080      	lsls	r0, r0, #2
 800d42c:	5880      	ldr	r0, [r0, r2]
 800d42e:	0019      	movs	r1, r3
 800d430:	f000 f94a 	bl	800d6c8 <osSemaphoreWait>
 800d434:	2800      	cmp	r0, #0
 800d436:	d001      	beq.n	800d43c <writePxITMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d438:	2001      	movs	r0, #1
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800d43a:	bd70      	pop	{r4, r5, r6, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800d43c:	002a      	movs	r2, r5
 800d43e:	0021      	movs	r1, r4
 800d440:	0030      	movs	r0, r6
 800d442:	f004 fc5f 	bl	8011d04 <HAL_UART_Transmit_IT>
 800d446:	e7f8      	b.n	800d43a <writePxITMutex+0x2a>
 800d448:	08017acc 	.word	0x08017acc
 800d44c:	20006f2c 	.word	0x20006f2c

0800d450 <writePxDMAMutex>:

/* --- Non-blocking (DMA-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxDMAMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800d450:	b570      	push	{r4, r5, r6, lr}
 800d452:	0015      	movs	r5, r2
 800d454:	1e42      	subs	r2, r0, #1
 800d456:	b2d2      	uxtb	r2, r2
 800d458:	000c      	movs	r4, r1
 800d45a:	2a05      	cmp	r2, #5
 800d45c:	d80c      	bhi.n	800d478 <writePxDMAMutex+0x28>
 800d45e:	490c      	ldr	r1, [pc, #48]	; (800d490 <writePxDMAMutex+0x40>)
 800d460:	0092      	lsls	r2, r2, #2
 800d462:	5856      	ldr	r6, [r2, r1]
	HAL_StatusTypeDef result = HAL_ERROR; 
	UART_HandleTypeDef* hUart = GetUart(port);

	if (hUart != NULL) {	
 800d464:	2e00      	cmp	r6, #0
 800d466:	d007      	beq.n	800d478 <writePxDMAMutex+0x28>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d468:	4a0a      	ldr	r2, [pc, #40]	; (800d494 <writePxDMAMutex+0x44>)
 800d46a:	0080      	lsls	r0, r0, #2
 800d46c:	5880      	ldr	r0, [r0, r2]
 800d46e:	0019      	movs	r1, r3
 800d470:	f000 f92a 	bl	800d6c8 <osSemaphoreWait>
 800d474:	2800      	cmp	r0, #0
 800d476:	d001      	beq.n	800d47c <writePxDMAMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d478:	2001      	movs	r0, #1
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800d47a:	bd70      	pop	{r4, r5, r6, pc}
			DMA_MSG_TX_Setup(hUart);
 800d47c:	0030      	movs	r0, r6
 800d47e:	f7ff f9a3 	bl	800c7c8 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800d482:	002a      	movs	r2, r5
 800d484:	0021      	movs	r1, r4
 800d486:	0030      	movs	r0, r6
 800d488:	f004 fcce 	bl	8011e28 <HAL_UART_Transmit_DMA>
 800d48c:	e7f5      	b.n	800d47a <writePxDMAMutex+0x2a>
 800d48e:	46c0      	nop			; (mov r8, r8)
 800d490:	08017acc 	.word	0x08017acc
 800d494:	20006f2c 	.word	0x20006f2c

0800d498 <UpdateBaudrate>:

/* --- Update baudrate for this port --- 
*/
BOS_Status UpdateBaudrate(uint8_t port, uint32_t baudrate)
{
 800d498:	3801      	subs	r0, #1
 800d49a:	b2c0      	uxtb	r0, r0
 800d49c:	b510      	push	{r4, lr}
 800d49e:	2805      	cmp	r0, #5
 800d4a0:	d807      	bhi.n	800d4b2 <UpdateBaudrate+0x1a>
 800d4a2:	4b05      	ldr	r3, [pc, #20]	; (800d4b8 <UpdateBaudrate+0x20>)
 800d4a4:	0080      	lsls	r0, r0, #2
 800d4a6:	58c0      	ldr	r0, [r0, r3]
	BOS_Status result = BOS_OK; 
	UART_HandleTypeDef *huart = GetUart(port);

	huart->Init.BaudRate = baudrate;
 800d4a8:	6041      	str	r1, [r0, #4]
	HAL_UART_Init(huart);
 800d4aa:	f004 ffdd 	bl	8012468 <HAL_UART_Init>
	
	return result;
}
 800d4ae:	2000      	movs	r0, #0
 800d4b0:	bd10      	pop	{r4, pc}
	huart->Init.BaudRate = baudrate;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	605b      	str	r3, [r3, #4]
 800d4b6:	deff      	udf	#255	; 0xff
 800d4b8:	08017acc 	.word	0x08017acc

0800d4bc <GetUart>:


/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
 800d4bc:	3801      	subs	r0, #1
 800d4be:	b2c3      	uxtb	r3, r0
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	2b05      	cmp	r3, #5
 800d4c4:	d802      	bhi.n	800d4cc <GetUart+0x10>
 800d4c6:	4a02      	ldr	r2, [pc, #8]	; (800d4d0 <GetUart+0x14>)
 800d4c8:	009b      	lsls	r3, r3, #2
 800d4ca:	5898      	ldr	r0, [r3, r2]
			return P10uart;
	#endif
		default:
			return 0;
	}		
}
 800d4cc:	4770      	bx	lr
 800d4ce:	46c0      	nop			; (mov r8, r8)
 800d4d0:	08017acc 	.word	0x08017acc

0800d4d4 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800d4d4:	b570      	push	{r4, r5, r6, lr}
 800d4d6:	0004      	movs	r4, r0
 800d4d8:	000d      	movs	r5, r1
	if (huart != NULL) {
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	d003      	beq.n	800d4e6 <SwapUartPins+0x12>
		if (direction == REVERSED) {
 800d4de:	2901      	cmp	r1, #1
 800d4e0:	d017      	beq.n	800d512 <SwapUartPins+0x3e>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800d4e2:	2900      	cmp	r1, #0
 800d4e4:	d000      	beq.n	800d4e8 <SwapUartPins+0x14>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800d4e6:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d4e8:	f7fe f932 	bl	800b750 <GetPort>
 800d4ec:	2180      	movs	r1, #128	; 0x80
 800d4ee:	3801      	subs	r0, #1
 800d4f0:	0209      	lsls	r1, r1, #8
 800d4f2:	4101      	asrs	r1, r0
 800d4f4:	4b12      	ldr	r3, [pc, #72]	; (800d540 <SwapUartPins+0x6c>)
 800d4f6:	4e13      	ldr	r6, [pc, #76]	; (800d544 <SwapUartPins+0x70>)
 800d4f8:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800d4fa:	6365      	str	r5, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	005b      	lsls	r3, r3, #1
 800d500:	5b9a      	ldrh	r2, [r3, r6]
			HAL_UART_Init(huart);		
 800d502:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d504:	438a      	bics	r2, r1
 800d506:	539a      	strh	r2, [r3, r6]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d508:	2308      	movs	r3, #8
 800d50a:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);		
 800d50c:	f004 ffac 	bl	8012468 <HAL_UART_Init>
}
 800d510:	e7e9      	b.n	800d4e6 <SwapUartPins+0x12>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d512:	f7fe f91d 	bl	800b750 <GetPort>
 800d516:	2180      	movs	r1, #128	; 0x80
 800d518:	0209      	lsls	r1, r1, #8
 800d51a:	000a      	movs	r2, r1
 800d51c:	3801      	subs	r0, #1
 800d51e:	4102      	asrs	r2, r0
 800d520:	4b07      	ldr	r3, [pc, #28]	; (800d540 <SwapUartPins+0x6c>)
 800d522:	4d08      	ldr	r5, [pc, #32]	; (800d544 <SwapUartPins+0x70>)
 800d524:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d526:	6361      	str	r1, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d528:	3b01      	subs	r3, #1
 800d52a:	005b      	lsls	r3, r3, #1
 800d52c:	5b58      	ldrh	r0, [r3, r5]
 800d52e:	4302      	orrs	r2, r0
 800d530:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d532:	2308      	movs	r3, #8
			HAL_UART_Init(huart);
 800d534:	0020      	movs	r0, r4
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d536:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);
 800d538:	f004 ff96 	bl	8012468 <HAL_UART_Init>
 800d53c:	e7d3      	b.n	800d4e6 <SwapUartPins+0x12>
 800d53e:	46c0      	nop			; (mov r8, r8)
 800d540:	20000a98 	.word	0x20000a98
 800d544:	20007334 	.word	0x20007334

0800d548 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d548:	4816      	ldr	r0, [pc, #88]	; (800d5a4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d54a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d54c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d54e:	e003      	b.n	800d558 <LoopCopyDataInit>

0800d550 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d550:	4b15      	ldr	r3, [pc, #84]	; (800d5a8 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800d552:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d554:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d556:	3104      	adds	r1, #4

0800d558 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d558:	4814      	ldr	r0, [pc, #80]	; (800d5ac <LoopForever+0xc>)
  ldr r3, =_edata
 800d55a:	4b15      	ldr	r3, [pc, #84]	; (800d5b0 <LoopForever+0x10>)
  adds r2, r0, r1
 800d55c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d55e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d560:	d3f6      	bcc.n	800d550 <CopyDataInit>
  ldr r2, =_sbss
 800d562:	4a14      	ldr	r2, [pc, #80]	; (800d5b4 <LoopForever+0x14>)
  b LoopFillZerobss
 800d564:	e002      	b.n	800d56c <LoopFillZerobss>

0800d566 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d566:	2300      	movs	r3, #0
  str  r3, [r2]
 800d568:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d56a:	3204      	adds	r2, #4

0800d56c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d56c:	4b12      	ldr	r3, [pc, #72]	; (800d5b8 <LoopForever+0x18>)
  cmp r2, r3
 800d56e:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d570:	d3f9      	bcc.n	800d566 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d572:	4812      	ldr	r0, [pc, #72]	; (800d5bc <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800d574:	4912      	ldr	r1, [pc, #72]	; (800d5c0 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800d576:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800d578:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800d57a:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800d57c:	d005      	beq.n	800d58a <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d57e:	f000 f82b 	bl	800d5d8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d582:	f005 f909 	bl	8012798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d586:	f005 f8b9 	bl	80126fc <main>

0800d58a <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d58a:	480e      	ldr	r0, [pc, #56]	; (800d5c4 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d58c:	490e      	ldr	r1, [pc, #56]	; (800d5c8 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d58e:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d590:	480e      	ldr	r0, [pc, #56]	; (800d5cc <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800d592:	490d      	ldr	r1, [pc, #52]	; (800d5c8 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d594:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d596:	480e      	ldr	r0, [pc, #56]	; (800d5d0 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800d598:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800d59a:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800d59c:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800d59e:	4700      	bx	r0

0800d5a0 <LoopForever>:


LoopForever:
    b LoopForever
 800d5a0:	e7fe      	b.n	800d5a0 <LoopForever>
 800d5a2:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d5a4:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800d5a8:	0801a620 	.word	0x0801a620
  ldr r0, =_sdata
 800d5ac:	20000008 	.word	0x20000008
  ldr r3, =_edata
 800d5b0:	20000a78 	.word	0x20000a78
  ldr r2, =_sbss
 800d5b4:	20000a78 	.word	0x20000a78
  ldr r3, = _ebss
 800d5b8:	200073d8 	.word	0x200073d8
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d5bc:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800d5c0:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d5c4:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d5c8:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d5cc:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d5d0:	1fffd800 	.word	0x1fffd800

0800d5d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d5d4:	e7fe      	b.n	800d5d4 <ADC1_COMP_IRQHandler>
	...

0800d5d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d5d8:	2101      	movs	r1, #1
 800d5da:	4b11      	ldr	r3, [pc, #68]	; (800d620 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d5dc:	4811      	ldr	r0, [pc, #68]	; (800d624 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	430a      	orrs	r2, r1
 800d5e2:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d5e4:	685a      	ldr	r2, [r3, #4]
 800d5e6:	4002      	ands	r2, r0
 800d5e8:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	480e      	ldr	r0, [pc, #56]	; (800d628 <SystemInit+0x50>)
 800d5ee:	4002      	ands	r2, r0
 800d5f0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	480d      	ldr	r0, [pc, #52]	; (800d62c <SystemInit+0x54>)
 800d5f6:	4002      	ands	r2, r0
 800d5f8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d5fa:	685a      	ldr	r2, [r3, #4]
 800d5fc:	480c      	ldr	r0, [pc, #48]	; (800d630 <SystemInit+0x58>)
 800d5fe:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d600:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d602:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d606:	4382      	bics	r2, r0
 800d608:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800d60a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d60c:	4809      	ldr	r0, [pc, #36]	; (800d634 <SystemInit+0x5c>)
 800d60e:	4002      	ands	r2, r0
 800d610:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800d612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d614:	438a      	bics	r2, r1
 800d616:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d618:	2200      	movs	r2, #0
 800d61a:	609a      	str	r2, [r3, #8]

}
 800d61c:	4770      	bx	lr
 800d61e:	46c0      	nop			; (mov r8, r8)
 800d620:	40021000 	.word	0x40021000
 800d624:	08ffb80c 	.word	0x08ffb80c
 800d628:	fef6ffff 	.word	0xfef6ffff
 800d62c:	fffbffff 	.word	0xfffbffff
 800d630:	ffc0ffff 	.word	0xffc0ffff
 800d634:	fff0feac 	.word	0xfff0feac

0800d638 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d638:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800d63a:	f000 ff81 	bl	800e540 <vTaskStartScheduler>
  
  return osOK;
}
 800d63e:	2000      	movs	r0, #0
 800d640:	bd10      	pop	{r4, pc}
 800d642:	46c0      	nop			; (mov r8, r8)

0800d644 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d644:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d646:	2800      	cmp	r0, #0
 800d648:	d100      	bne.n	800d64c <osDelay+0x8>
 800d64a:	3001      	adds	r0, #1
 800d64c:	f001 f89e 	bl	800e78c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d650:	2000      	movs	r0, #0
 800d652:	bd10      	pop	{r4, pc}

0800d654 <osMutexRelease>:
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d654:	2300      	movs	r3, #0
{
 800d656:	b500      	push	{lr}
 800d658:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;
 800d65a:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d65c:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00a      	beq.n	800d67a <osMutexRelease+0x26>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d664:	a901      	add	r1, sp, #4
 800d666:	f000 fbdd 	bl	800de24 <xQueueGiveFromISR>
 800d66a:	2801      	cmp	r0, #1
 800d66c:	d10c      	bne.n	800d688 <osMutexRelease+0x34>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d66e:	9b01      	ldr	r3, [sp, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d10b      	bne.n	800d68c <osMutexRelease+0x38>
  osStatus result = osOK;
 800d674:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800d676:	b003      	add	sp, #12
 800d678:	bd00      	pop	{pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d67a:	2300      	movs	r3, #0
 800d67c:	2200      	movs	r2, #0
 800d67e:	2100      	movs	r1, #0
 800d680:	f000 faec 	bl	800dc5c <xQueueGenericSend>
 800d684:	2801      	cmp	r0, #1
 800d686:	d0f5      	beq.n	800d674 <osMutexRelease+0x20>
    result = osErrorOS;
 800d688:	20ff      	movs	r0, #255	; 0xff
 800d68a:	e7f4      	b.n	800d676 <osMutexRelease+0x22>
    portEND_SWITCHING_ISR(taskWoken);
 800d68c:	2280      	movs	r2, #128	; 0x80
 800d68e:	4b02      	ldr	r3, [pc, #8]	; (800d698 <osMutexRelease+0x44>)
 800d690:	0552      	lsls	r2, r2, #21
 800d692:	601a      	str	r2, [r3, #0]
 800d694:	e7ee      	b.n	800d674 <osMutexRelease+0x20>
 800d696:	46c0      	nop			; (mov r8, r8)
 800d698:	e000ed04 	.word	0xe000ed04

0800d69c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800d69c:	b510      	push	{r4, lr}
 800d69e:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800d6a0:	2901      	cmp	r1, #1
 800d6a2:	d005      	beq.n	800d6b0 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	f000 fac5 	bl	800dc34 <xQueueCreateCountingSemaphore>
 800d6aa:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800d6ac:	0020      	movs	r0, r4
 800d6ae:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800d6b0:	2203      	movs	r2, #3
 800d6b2:	2100      	movs	r1, #0
 800d6b4:	f000 fa96 	bl	800dbe4 <xQueueGenericCreate>
 800d6b8:	1e04      	subs	r4, r0, #0
 800d6ba:	d0f7      	beq.n	800d6ac <osSemaphoreCreate+0x10>
 800d6bc:	2300      	movs	r3, #0
 800d6be:	2200      	movs	r2, #0
 800d6c0:	2100      	movs	r1, #0
 800d6c2:	f000 facb 	bl	800dc5c <xQueueGenericSend>
 800d6c6:	e7f1      	b.n	800d6ac <osSemaphoreCreate+0x10>

0800d6c8 <osSemaphoreWait>:
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d6c8:	2300      	movs	r3, #0
{
 800d6ca:	b500      	push	{lr}
 800d6cc:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;  
 800d6ce:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800d6d0:	2800      	cmp	r0, #0
 800d6d2:	d01e      	beq.n	800d712 <osSemaphoreWait+0x4a>
 800d6d4:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00b      	beq.n	800d6f4 <osSemaphoreWait+0x2c>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d6dc:	aa01      	add	r2, sp, #4
 800d6de:	2100      	movs	r1, #0
 800d6e0:	f000 fc8e 	bl	800e000 <xQueueReceiveFromISR>
 800d6e4:	2801      	cmp	r0, #1
 800d6e6:	d10c      	bne.n	800d702 <osSemaphoreWait+0x3a>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d6e8:	9b01      	ldr	r3, [sp, #4]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d10b      	bne.n	800d706 <osSemaphoreWait+0x3e>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800d6ee:	2000      	movs	r0, #0
}
 800d6f0:	b003      	add	sp, #12
 800d6f2:	bd00      	pop	{pc}
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d6f4:	000a      	movs	r2, r1
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	2100      	movs	r1, #0
 800d6fa:	f000 fbcd 	bl	800de98 <xQueueGenericReceive>
 800d6fe:	2801      	cmp	r0, #1
 800d700:	d0f5      	beq.n	800d6ee <osSemaphoreWait+0x26>
      return osErrorOS;
 800d702:	20ff      	movs	r0, #255	; 0xff
 800d704:	e7f4      	b.n	800d6f0 <osSemaphoreWait+0x28>
	portEND_SWITCHING_ISR(taskWoken);
 800d706:	2280      	movs	r2, #128	; 0x80
 800d708:	4b03      	ldr	r3, [pc, #12]	; (800d718 <osSemaphoreWait+0x50>)
 800d70a:	0552      	lsls	r2, r2, #21
 800d70c:	601a      	str	r2, [r3, #0]
  return osOK;
 800d70e:	2000      	movs	r0, #0
 800d710:	e7ee      	b.n	800d6f0 <osSemaphoreWait+0x28>
    return osErrorParameter;
 800d712:	2080      	movs	r0, #128	; 0x80
 800d714:	e7ec      	b.n	800d6f0 <osSemaphoreWait+0x28>
 800d716:	46c0      	nop			; (mov r8, r8)
 800d718:	e000ed04 	.word	0xe000ed04

0800d71c <osSemaphoreRelease>:
 800d71c:	b510      	push	{r4, lr}
 800d71e:	f7ff ff99 	bl	800d654 <osMutexRelease>
 800d722:	bd10      	pop	{r4, pc}

0800d724 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800d724:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d726:	f001 f9bf 	bl	800eaa8 <xTaskGetSchedulerState>
 800d72a:	2801      	cmp	r0, #1
 800d72c:	d001      	beq.n	800d732 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800d72e:	f001 fe07 	bl	800f340 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800d732:	bd10      	pop	{r4, pc}

0800d734 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800d734:	b570      	push	{r4, r5, r6, lr}
 800d736:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800d738:	d013      	beq.n	800d762 <FreeRTOS_CLIRegisterCommand+0x2e>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d73a:	2008      	movs	r0, #8
 800d73c:	f001 fe38 	bl	800f3b0 <pvPortMalloc>
 800d740:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800d742:	d101      	bne.n	800d748 <FreeRTOS_CLIRegisterCommand+0x14>
 800d744:	b672      	cpsid	i
 800d746:	e7fe      	b.n	800d746 <FreeRTOS_CLIRegisterCommand+0x12>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800d748:	f001 fdb4 	bl	800f2b4 <vPortEnterCritical>
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800d74c:	2300      	movs	r3, #0
 800d74e:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800d750:	4b05      	ldr	r3, [pc, #20]	; (800d768 <FreeRTOS_CLIRegisterCommand+0x34>)
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800d752:	6025      	str	r5, [r4, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800d758:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800d75a:	f001 fdb7 	bl	800f2cc <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800d75e:	2001      	movs	r0, #1
 800d760:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxCommandToRegister );
 800d762:	b672      	cpsid	i
 800d764:	e7fe      	b.n	800d764 <FreeRTOS_CLIRegisterCommand+0x30>
 800d766:	46c0      	nop			; (mov r8, r8)
 800d768:	200000b4 	.word	0x200000b4

0800d76c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800d76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d76e:	4657      	mov	r7, sl
 800d770:	46de      	mov	lr, fp
 800d772:	464e      	mov	r6, r9
 800d774:	4645      	mov	r5, r8
 800d776:	b5e0      	push	{r5, r6, r7, lr}
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800d778:	4f34      	ldr	r7, [pc, #208]	; (800d84c <FreeRTOS_CLIProcessCommand+0xe0>)
{
 800d77a:	0006      	movs	r6, r0
	if( pxCommand == NULL )
 800d77c:	683b      	ldr	r3, [r7, #0]
{
 800d77e:	468a      	mov	sl, r1
 800d780:	4693      	mov	fp, r2
	if( pxCommand == NULL )
 800d782:	2b00      	cmp	r3, #0
 800d784:	d00e      	beq.n	800d7a4 <FreeRTOS_CLIProcessCommand+0x38>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	0032      	movs	r2, r6
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	4659      	mov	r1, fp
 800d78e:	4650      	mov	r0, sl
 800d790:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800d792:	2800      	cmp	r0, #0
 800d794:	d100      	bne.n	800d798 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800d796:	6038      	str	r0, [r7, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800d798:	bc3c      	pop	{r2, r3, r4, r5}
 800d79a:	4690      	mov	r8, r2
 800d79c:	4699      	mov	r9, r3
 800d79e:	46a2      	mov	sl, r4
 800d7a0:	46ab      	mov	fp, r5
 800d7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d7a4:	3320      	adds	r3, #32
 800d7a6:	4699      	mov	r9, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d7a8:	4c29      	ldr	r4, [pc, #164]	; (800d850 <FreeRTOS_CLIProcessCommand+0xe4>)
 800d7aa:	3404      	adds	r4, #4
 800d7ac:	603c      	str	r4, [r7, #0]
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800d7ae:	6823      	ldr	r3, [r4, #0]
 800d7b0:	681d      	ldr	r5, [r3, #0]
 800d7b2:	4698      	mov	r8, r3
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800d7b4:	0028      	movs	r0, r5
 800d7b6:	f7f2 fcaf 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d7ba:	464a      	mov	r2, r9
 800d7bc:	5c33      	ldrb	r3, [r6, r0]
 800d7be:	4393      	bics	r3, r2
 800d7c0:	d106      	bne.n	800d7d0 <FreeRTOS_CLIProcessCommand+0x64>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800d7c2:	0002      	movs	r2, r0
 800d7c4:	0029      	movs	r1, r5
 800d7c6:	0030      	movs	r0, r6
 800d7c8:	f005 fcb0 	bl	801312c <strncmp>
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d00a      	beq.n	800d7e6 <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d7d0:	6864      	ldr	r4, [r4, #4]
 800d7d2:	603c      	str	r4, [r7, #0]
 800d7d4:	2c00      	cmp	r4, #0
 800d7d6:	d1ea      	bne.n	800d7ae <FreeRTOS_CLIProcessCommand+0x42>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d7d8:	465a      	mov	r2, fp
 800d7da:	491e      	ldr	r1, [pc, #120]	; (800d854 <FreeRTOS_CLIProcessCommand+0xe8>)
 800d7dc:	4650      	mov	r0, sl
 800d7de:	f005 fcb6 	bl	801314e <strncpy>
		xReturn = pdFALSE;
 800d7e2:	2000      	movs	r0, #0
	return xReturn;
 800d7e4:	e7d8      	b.n	800d798 <FreeRTOS_CLIProcessCommand+0x2c>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800d7e6:	4643      	mov	r3, r8
 800d7e8:	250c      	movs	r5, #12
 800d7ea:	575d      	ldrsb	r5, [r3, r5]
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	2d00      	cmp	r5, #0
 800d7f0:	db26      	blt.n	800d840 <FreeRTOS_CLIProcessCommand+0xd4>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	56b2      	ldrsb	r2, [r6, r2]
 800d7f6:	2a00      	cmp	r2, #0
 800d7f8:	d025      	beq.n	800d846 <FreeRTOS_CLIProcessCommand+0xda>
 800d7fa:	0031      	movs	r1, r6
int8_t cParameters = 0;
 800d7fc:	2400      	movs	r4, #0
 800d7fe:	e005      	b.n	800d80c <FreeRTOS_CLIProcessCommand+0xa0>
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800d800:	2000      	movs	r0, #0
	while( *pcCommandString != 0x00 )
 800d802:	2200      	movs	r2, #0
		}

		pcCommandString++;
 800d804:	3101      	adds	r1, #1
	while( *pcCommandString != 0x00 )
 800d806:	568a      	ldrsb	r2, [r1, r2]
 800d808:	2a00      	cmp	r2, #0
 800d80a:	d007      	beq.n	800d81c <FreeRTOS_CLIProcessCommand+0xb0>
		if( ( *pcCommandString ) == ' ' )
 800d80c:	2a20      	cmp	r2, #32
 800d80e:	d1f7      	bne.n	800d800 <FreeRTOS_CLIProcessCommand+0x94>
			if( xLastCharacterWasSpace != pdTRUE )
 800d810:	2801      	cmp	r0, #1
 800d812:	d0f6      	beq.n	800d802 <FreeRTOS_CLIProcessCommand+0x96>
				cParameters++;
 800d814:	3401      	adds	r4, #1
 800d816:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800d818:	2001      	movs	r0, #1
 800d81a:	e7f2      	b.n	800d802 <FreeRTOS_CLIProcessCommand+0x96>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800d81c:	2801      	cmp	r0, #1
 800d81e:	d00c      	beq.n	800d83a <FreeRTOS_CLIProcessCommand+0xce>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800d820:	42a5      	cmp	r5, r4
 800d822:	d00d      	beq.n	800d840 <FreeRTOS_CLIProcessCommand+0xd4>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d824:	2b00      	cmp	r3, #0
 800d826:	d0d7      	beq.n	800d7d8 <FreeRTOS_CLIProcessCommand+0x6c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d828:	465a      	mov	r2, fp
 800d82a:	490b      	ldr	r1, [pc, #44]	; (800d858 <FreeRTOS_CLIProcessCommand+0xec>)
 800d82c:	4650      	mov	r0, sl
 800d82e:	f005 fc8e 	bl	801314e <strncpy>
		pxCommand = NULL;
 800d832:	2300      	movs	r3, #0
 800d834:	2000      	movs	r0, #0
 800d836:	603b      	str	r3, [r7, #0]
 800d838:	e7ae      	b.n	800d798 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800d83a:	3c01      	subs	r4, #1
 800d83c:	b264      	sxtb	r4, r4
 800d83e:	e7ef      	b.n	800d820 <FreeRTOS_CLIProcessCommand+0xb4>
	else if( pxCommand != NULL )
 800d840:	2b00      	cmp	r3, #0
 800d842:	d1a0      	bne.n	800d786 <FreeRTOS_CLIProcessCommand+0x1a>
 800d844:	e7c8      	b.n	800d7d8 <FreeRTOS_CLIProcessCommand+0x6c>
int8_t cParameters = 0;
 800d846:	2400      	movs	r4, #0
 800d848:	e7ea      	b.n	800d820 <FreeRTOS_CLIProcessCommand+0xb4>
 800d84a:	46c0      	nop			; (mov r8, r8)
 800d84c:	20001fc4 	.word	0x20001fc4
 800d850:	200000b4 	.word	0x200000b4
 800d854:	0801a228 	.word	0x0801a228
 800d858:	0801a1d0 	.word	0x0801a1d0

0800d85c <FreeRTOS_CLIGetOutputBuffer>:
}
 800d85c:	4800      	ldr	r0, [pc, #0]	; (800d860 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800d85e:	4770      	bx	lr
 800d860:	20001fd4 	.word	0x20001fd4

0800d864 <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
 800d864:	2300      	movs	r3, #0
{
 800d866:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800d868:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800d86a:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800d86c:	2900      	cmp	r1, #0
 800d86e:	d021      	beq.n	800d8b4 <FreeRTOS_CLIGetParameter+0x50>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d870:	2300      	movs	r3, #0
 800d872:	56c3      	ldrsb	r3, [r0, r3]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d105      	bne.n	800d884 <FreeRTOS_CLIGetParameter+0x20>
 800d878:	e01c      	b.n	800d8b4 <FreeRTOS_CLIGetParameter+0x50>
 800d87a:	2300      	movs	r3, #0
			pcCommandString++;
 800d87c:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d87e:	56c3      	ldrsb	r3, [r0, r3]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d017      	beq.n	800d8b4 <FreeRTOS_CLIGetParameter+0x50>
 800d884:	2b20      	cmp	r3, #32
 800d886:	d1f8      	bne.n	800d87a <FreeRTOS_CLIGetParameter+0x16>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d888:	2300      	movs	r3, #0
			pcCommandString++;
 800d88a:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d88c:	56c3      	ldrsb	r3, [r0, r3]
 800d88e:	2b20      	cmp	r3, #32
 800d890:	d0fa      	beq.n	800d888 <FreeRTOS_CLIGetParameter+0x24>
		if( *pcCommandString != 0x00 )
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00e      	beq.n	800d8b4 <FreeRTOS_CLIGetParameter+0x50>
			uxParametersFound++;
 800d896:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800d898:	42a1      	cmp	r1, r4
 800d89a:	d1e9      	bne.n	800d870 <FreeRTOS_CLIGetParameter+0xc>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d89c:	2120      	movs	r1, #32
 800d89e:	7803      	ldrb	r3, [r0, #0]
 800d8a0:	438b      	bics	r3, r1
 800d8a2:	d007      	beq.n	800d8b4 <FreeRTOS_CLIGetParameter+0x50>
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	2420      	movs	r4, #32
					( *pxParameterStringLength )++;
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	6013      	str	r3, [r2, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d8ac:	5cc1      	ldrb	r1, [r0, r3]
 800d8ae:	43a1      	bics	r1, r4
 800d8b0:	d1fa      	bne.n	800d8a8 <FreeRTOS_CLIGetParameter+0x44>
 800d8b2:	e000      	b.n	800d8b6 <FreeRTOS_CLIGetParameter+0x52>
					pcReturn = NULL;
 800d8b4:	2000      	movs	r0, #0
}
 800d8b6:	bd10      	pop	{r4, pc}

0800d8b8 <prvHelpCommand>:
{
 800d8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8ba:	46ce      	mov	lr, r9
 800d8bc:	4647      	mov	r7, r8
portBASE_TYPE xParameterStringLength1 = 0;
 800d8be:	2300      	movs	r3, #0
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	0004      	movs	r4, r0
 800d8c6:	000d      	movs	r5, r1
 800d8c8:	0010      	movs	r0, r2
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d8ca:	2101      	movs	r1, #1
 800d8cc:	aa01      	add	r2, sp, #4
portBASE_TYPE xParameterStringLength1 = 0;
 800d8ce:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d8d0:	f7ff ffc8 	bl	800d864 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d024      	beq.n	800d922 <prvHelpCommand+0x6a>
 800d8d8:	2206      	movs	r2, #6
 800d8da:	4931      	ldr	r1, [pc, #196]	; (800d9a0 <prvHelpCommand+0xe8>)
 800d8dc:	f005 fc26 	bl	801312c <strncmp>
 800d8e0:	1e07      	subs	r7, r0, #0
 800d8e2:	d118      	bne.n	800d916 <prvHelpCommand+0x5e>
		if( str == NumOfParamsHelpStrings )
 800d8e4:	4b2f      	ldr	r3, [pc, #188]	; (800d9a4 <prvHelpCommand+0xec>)
 800d8e6:	4698      	mov	r8, r3
 800d8e8:	791b      	ldrb	r3, [r3, #4]
 800d8ea:	2b07      	cmp	r3, #7
 800d8ec:	d047      	beq.n	800d97e <prvHelpCommand+0xc6>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d8ee:	1c5a      	adds	r2, r3, #1
 800d8f0:	b2d2      	uxtb	r2, r2
 800d8f2:	4691      	mov	r9, r2
 800d8f4:	4642      	mov	r2, r8
 800d8f6:	4649      	mov	r1, r9
 800d8f8:	7111      	strb	r1, [r2, #4]
 800d8fa:	4a2b      	ldr	r2, [pc, #172]	; (800d9a8 <prvHelpCommand+0xf0>)
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	5899      	ldr	r1, [r3, r2]
 800d900:	0020      	movs	r0, r4
 800d902:	002a      	movs	r2, r5
 800d904:	f005 fc23 	bl	801314e <strncpy>
		if( str == NumOfParamsHelpStrings )
 800d908:	464b      	mov	r3, r9
			xReturn = pdTRUE;
 800d90a:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800d90c:	2b07      	cmp	r3, #7
 800d90e:	d102      	bne.n	800d916 <prvHelpCommand+0x5e>
			xReturn = pdFALSE; str = 0;
 800d910:	4643      	mov	r3, r8
 800d912:	2600      	movs	r6, #0
 800d914:	711f      	strb	r7, [r3, #4]
}
 800d916:	0030      	movs	r0, r6
 800d918:	b003      	add	sp, #12
 800d91a:	bc0c      	pop	{r2, r3}
 800d91c:	4690      	mov	r8, r2
 800d91e:	4699      	mov	r9, r3
 800d920:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800d922:	4f20      	ldr	r7, [pc, #128]	; (800d9a4 <prvHelpCommand+0xec>)
 800d924:	68be      	ldr	r6, [r7, #8]
 800d926:	2e00      	cmp	r6, #0
 800d928:	d020      	beq.n	800d96c <prvHelpCommand+0xb4>
 800d92a:	7b3b      	ldrb	r3, [r7, #12]
 800d92c:	1c5a      	adds	r2, r3, #1
 800d92e:	b2d2      	uxtb	r2, r2
 800d930:	4690      	mov	r8, r2
 800d932:	6832      	ldr	r2, [r6, #0]
 800d934:	6851      	ldr	r1, [r2, #4]
		if (counter > numOfBosCommands) {
 800d936:	4a1d      	ldr	r2, [pc, #116]	; (800d9ac <prvHelpCommand+0xf4>)
 800d938:	7812      	ldrb	r2, [r2, #0]
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d22a      	bcs.n	800d994 <prvHelpCommand+0xdc>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800d93e:	002a      	movs	r2, r5
 800d940:	0020      	movs	r0, r4
 800d942:	3a08      	subs	r2, #8
 800d944:	3008      	adds	r0, #8
 800d946:	f005 fc02 	bl	801314e <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800d94a:	1c60      	adds	r0, r4, #1
 800d94c:	4918      	ldr	r1, [pc, #96]	; (800d9b0 <prvHelpCommand+0xf8>)
 800d94e:	f005 fbe5 	bl	801311c <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800d952:	2328      	movs	r3, #40	; 0x28
 800d954:	7023      	strb	r3, [r4, #0]
 800d956:	3301      	adds	r3, #1
 800d958:	71a3      	strb	r3, [r4, #6]
 800d95a:	3b09      	subs	r3, #9
 800d95c:	71e3      	strb	r3, [r4, #7]
		counter++;
 800d95e:	4643      	mov	r3, r8
		pxCommand = pxCommand->pxNext;
 800d960:	6876      	ldr	r6, [r6, #4]
		counter++;
 800d962:	733b      	strb	r3, [r7, #12]
		pxCommand = pxCommand->pxNext;
 800d964:	60be      	str	r6, [r7, #8]
			xReturn = pdTRUE;
 800d966:	1e73      	subs	r3, r6, #1
 800d968:	419e      	sbcs	r6, r3
 800d96a:	e7d4      	b.n	800d916 <prvHelpCommand+0x5e>
			counter = 1;
 800d96c:	2301      	movs	r3, #1
			pxCommand = &xRegisteredCommands;
 800d96e:	4e11      	ldr	r6, [pc, #68]	; (800d9b4 <prvHelpCommand+0xfc>)
			counter = 1;
 800d970:	733b      	strb	r3, [r7, #12]
			pxCommand = &xRegisteredCommands;
 800d972:	3604      	adds	r6, #4
			counter = 1;
 800d974:	3301      	adds	r3, #1
 800d976:	4698      	mov	r8, r3
			pxCommand = &xRegisteredCommands;
 800d978:	60be      	str	r6, [r7, #8]
			counter = 1;
 800d97a:	3b01      	subs	r3, #1
 800d97c:	e7d9      	b.n	800d932 <prvHelpCommand+0x7a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d97e:	4642      	mov	r2, r8
 800d980:	3b06      	subs	r3, #6
 800d982:	7113      	strb	r3, [r2, #4]
 800d984:	4b08      	ldr	r3, [pc, #32]	; (800d9a8 <prvHelpCommand+0xf0>)
 800d986:	002a      	movs	r2, r5
 800d988:	6819      	ldr	r1, [r3, #0]
 800d98a:	0020      	movs	r0, r4
 800d98c:	f005 fbdf 	bl	801314e <strncpy>
			xReturn = pdTRUE;
 800d990:	2601      	movs	r6, #1
 800d992:	e7c0      	b.n	800d916 <prvHelpCommand+0x5e>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800d994:	002a      	movs	r2, r5
 800d996:	0020      	movs	r0, r4
 800d998:	f005 fbd9 	bl	801314e <strncpy>
 800d99c:	e7df      	b.n	800d95e <prvHelpCommand+0xa6>
 800d99e:	46c0      	nop			; (mov r8, r8)
 800d9a0:	08018b60 	.word	0x08018b60
 800d9a4:	20001fc4 	.word	0x20001fc4
 800d9a8:	20000034 	.word	0x20000034
 800d9ac:	20006e24 	.word	0x20006e24
 800d9b0:	0801755a 	.word	0x0801755a
 800d9b4:	200000b4 	.word	0x200000b4

0800d9b8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9b8:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d9ba:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9bc:	3308      	adds	r3, #8
 800d9be:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9c0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9c2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d9c4:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d9c6:	4252      	negs	r2, r2
 800d9c8:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d9ca:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d9cc:	4770      	bx	lr
 800d9ce:	46c0      	nop			; (mov r8, r8)

0800d9d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d9d4:	4770      	bx	lr
 800d9d6:	46c0      	nop			; (mov r8, r8)

0800d9d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d9d8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d9da:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d9dc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d9de:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d9e0:	689a      	ldr	r2, [r3, #8]
 800d9e2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d9e4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800d9e6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d9e8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	6003      	str	r3, [r0, #0]
}
 800d9ee:	4770      	bx	lr

0800d9f0 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9f0:	0002      	movs	r2, r0
{
 800d9f2:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d9f4:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9f6:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800d9f8:	1c63      	adds	r3, r4, #1
 800d9fa:	d101      	bne.n	800da00 <vListInsert+0x10>
 800d9fc:	e00d      	b.n	800da1a <vListInsert+0x2a>
 800d9fe:	001a      	movs	r2, r3
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da00:	6853      	ldr	r3, [r2, #4]
 800da02:	681d      	ldr	r5, [r3, #0]
 800da04:	42a5      	cmp	r5, r4
 800da06:	d9fa      	bls.n	800d9fe <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800da08:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800da0a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800da0c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800da0e:	608a      	str	r2, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800da10:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800da12:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800da14:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800da16:	6003      	str	r3, [r0, #0]
}
 800da18:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800da1a:	6902      	ldr	r2, [r0, #16]
 800da1c:	6853      	ldr	r3, [r2, #4]
 800da1e:	e7f3      	b.n	800da08 <vListInsert+0x18>

0800da20 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800da20:	6842      	ldr	r2, [r0, #4]
 800da22:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800da24:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800da26:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800da28:	6881      	ldr	r1, [r0, #8]
 800da2a:	604a      	str	r2, [r1, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800da2c:	685a      	ldr	r2, [r3, #4]
 800da2e:	4282      	cmp	r2, r0
 800da30:	d100      	bne.n	800da34 <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800da32:	6059      	str	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800da34:	2200      	movs	r2, #0
 800da36:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	1e50      	subs	r0, r2, #1
 800da3c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800da3e:	4770      	bx	lr

0800da40 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800da40:	b570      	push	{r4, r5, r6, lr}
 800da42:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800da44:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800da46:	0004      	movs	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800da48:	2a00      	cmp	r2, #0
 800da4a:	d107      	bne.n	800da5c <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da4c:	6805      	ldr	r5, [r0, #0]
 800da4e:	2d00      	cmp	r5, #0
 800da50:	d02d      	beq.n	800daae <prvCopyDataToQueue+0x6e>
BaseType_t xReturn = pdFALSE;
 800da52:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800da54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da56:	3301      	adds	r3, #1
 800da58:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800da5a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800da5c:	2d00      	cmp	r5, #0
 800da5e:	d10e      	bne.n	800da7e <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800da60:	6880      	ldr	r0, [r0, #8]
 800da62:	f005 f91c 	bl	8012c9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800da66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800da68:	68a3      	ldr	r3, [r4, #8]
 800da6a:	4694      	mov	ip, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da6c:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800da6e:	4463      	add	r3, ip
 800da70:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da72:	4293      	cmp	r3, r2
 800da74:	d3ed      	bcc.n	800da52 <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800da76:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800da78:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800da7a:	60a3      	str	r3, [r4, #8]
 800da7c:	e7ea      	b.n	800da54 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da7e:	68c0      	ldr	r0, [r0, #12]
 800da80:	f005 f90d 	bl	8012c9e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800da84:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da86:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800da88:	425a      	negs	r2, r3
 800da8a:	68e3      	ldr	r3, [r4, #12]
 800da8c:	189b      	adds	r3, r3, r2
 800da8e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da90:	428b      	cmp	r3, r1
 800da92:	d203      	bcs.n	800da9c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800da94:	6863      	ldr	r3, [r4, #4]
 800da96:	469c      	mov	ip, r3
 800da98:	4462      	add	r2, ip
 800da9a:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800da9c:	2d02      	cmp	r5, #2
 800da9e:	d1d8      	bne.n	800da52 <prvCopyDataToQueue+0x12>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800daa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d0d5      	beq.n	800da52 <prvCopyDataToQueue+0x12>
				--( pxQueue->uxMessagesWaiting );
 800daa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800daa8:	3b01      	subs	r3, #1
 800daaa:	63a3      	str	r3, [r4, #56]	; 0x38
 800daac:	e7d1      	b.n	800da52 <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800daae:	6840      	ldr	r0, [r0, #4]
 800dab0:	f001 f842 	bl	800eb38 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800dab4:	6065      	str	r5, [r4, #4]
 800dab6:	e7cd      	b.n	800da54 <prvCopyDataToQueue+0x14>

0800dab8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dab8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800daba:	b510      	push	{r4, lr}
 800dabc:	000b      	movs	r3, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dabe:	2a00      	cmp	r2, #0
 800dac0:	d008      	beq.n	800dad4 <prvCopyDataFromQueue+0x1c>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dac2:	68c1      	ldr	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dac4:	6844      	ldr	r4, [r0, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dac6:	1889      	adds	r1, r1, r2
 800dac8:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800daca:	42a1      	cmp	r1, r4
 800dacc:	d203      	bcs.n	800dad6 <prvCopyDataFromQueue+0x1e>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800dace:	0018      	movs	r0, r3
 800dad0:	f005 f8e5 	bl	8012c9e <memcpy>
	}
}
 800dad4:	bd10      	pop	{r4, pc}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800dad6:	6801      	ldr	r1, [r0, #0]
 800dad8:	60c1      	str	r1, [r0, #12]
 800dada:	e7f8      	b.n	800dace <prvCopyDataFromQueue+0x16>

0800dadc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dadc:	b570      	push	{r4, r5, r6, lr}
 800dade:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dae0:	f001 fbe8 	bl	800f2b4 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dae4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	dd1b      	ble.n	800db22 <prvUnlockQueue+0x46>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800daea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800daec:	2b00      	cmp	r3, #0
 800daee:	d018      	beq.n	800db22 <prvUnlockQueue+0x46>
 800daf0:	0025      	movs	r5, r4
 800daf2:	3524      	adds	r5, #36	; 0x24
 800daf4:	e008      	b.n	800db08 <prvUnlockQueue+0x2c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800daf6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800daf8:	3b01      	subs	r3, #1
 800dafa:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dafc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dafe:	2b00      	cmp	r3, #0
 800db00:	dd0f      	ble.n	800db22 <prvUnlockQueue+0x46>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00c      	beq.n	800db22 <prvUnlockQueue+0x46>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db08:	0028      	movs	r0, r5
 800db0a:	f000 ff49 	bl	800e9a0 <xTaskRemoveFromEventList>
 800db0e:	2800      	cmp	r0, #0
 800db10:	d0f1      	beq.n	800daf6 <prvUnlockQueue+0x1a>
						vTaskMissedYield();
 800db12:	f000 ffc3 	bl	800ea9c <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800db16:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800db18:	3b01      	subs	r3, #1
 800db1a:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800db1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800db1e:	2b00      	cmp	r3, #0
 800db20:	dcef      	bgt.n	800db02 <prvUnlockQueue+0x26>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800db22:	2301      	movs	r3, #1
 800db24:	425b      	negs	r3, r3
 800db26:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800db28:	f001 fbd0 	bl	800f2cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800db2c:	f001 fbc2 	bl	800f2b4 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800db30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db32:	2b00      	cmp	r3, #0
 800db34:	dd1b      	ble.n	800db6e <prvUnlockQueue+0x92>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db36:	6923      	ldr	r3, [r4, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d018      	beq.n	800db6e <prvUnlockQueue+0x92>
 800db3c:	0025      	movs	r5, r4
 800db3e:	3510      	adds	r5, #16
 800db40:	e008      	b.n	800db54 <prvUnlockQueue+0x78>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800db42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db44:	3b01      	subs	r3, #1
 800db46:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800db48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	dd0f      	ble.n	800db6e <prvUnlockQueue+0x92>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db4e:	6923      	ldr	r3, [r4, #16]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d00c      	beq.n	800db6e <prvUnlockQueue+0x92>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db54:	0028      	movs	r0, r5
 800db56:	f000 ff23 	bl	800e9a0 <xTaskRemoveFromEventList>
 800db5a:	2800      	cmp	r0, #0
 800db5c:	d0f1      	beq.n	800db42 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800db5e:	f000 ff9d 	bl	800ea9c <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800db62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db64:	3b01      	subs	r3, #1
 800db66:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800db68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	dcef      	bgt.n	800db4e <prvUnlockQueue+0x72>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800db6e:	2301      	movs	r3, #1
 800db70:	425b      	negs	r3, r3
 800db72:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800db74:	f001 fbaa 	bl	800f2cc <vPortExitCritical>
}
 800db78:	bd70      	pop	{r4, r5, r6, pc}
 800db7a:	46c0      	nop			; (mov r8, r8)

0800db7c <xQueueGenericReset>:
{
 800db7c:	b570      	push	{r4, r5, r6, lr}
 800db7e:	0004      	movs	r4, r0
 800db80:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800db82:	2800      	cmp	r0, #0
 800db84:	d01a      	beq.n	800dbbc <xQueueGenericReset+0x40>
	taskENTER_CRITICAL();
 800db86:	f001 fb95 	bl	800f2b4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800db8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800db8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800db8e:	6822      	ldr	r2, [r4, #0]
 800db90:	434b      	muls	r3, r1
 800db92:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800db94:	1a5b      	subs	r3, r3, r1
 800db96:	18d3      	adds	r3, r2, r3
 800db98:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800db9a:	2301      	movs	r3, #1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800db9c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800db9e:	2000      	movs	r0, #0
		pxQueue->xRxLock = queueUNLOCKED;
 800dba0:	425b      	negs	r3, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dba2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dba4:	60a2      	str	r2, [r4, #8]
		pxQueue->xRxLock = queueUNLOCKED;
 800dba6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800dba8:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800dbaa:	2d00      	cmp	r5, #0
 800dbac:	d108      	bne.n	800dbc0 <xQueueGenericReset+0x44>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbae:	6923      	ldr	r3, [r4, #16]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d10e      	bne.n	800dbd2 <xQueueGenericReset+0x56>
	taskEXIT_CRITICAL();
 800dbb4:	f001 fb8a 	bl	800f2cc <vPortExitCritical>
}
 800dbb8:	2001      	movs	r0, #1
 800dbba:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800dbbc:	b672      	cpsid	i
 800dbbe:	e7fe      	b.n	800dbbe <xQueueGenericReset+0x42>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dbc0:	0020      	movs	r0, r4
 800dbc2:	3010      	adds	r0, #16
 800dbc4:	f7ff fef8 	bl	800d9b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dbc8:	0020      	movs	r0, r4
 800dbca:	3024      	adds	r0, #36	; 0x24
 800dbcc:	f7ff fef4 	bl	800d9b8 <vListInitialise>
 800dbd0:	e7f0      	b.n	800dbb4 <xQueueGenericReset+0x38>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800dbd2:	0020      	movs	r0, r4
 800dbd4:	3010      	adds	r0, #16
 800dbd6:	f000 fee3 	bl	800e9a0 <xTaskRemoveFromEventList>
 800dbda:	2801      	cmp	r0, #1
 800dbdc:	d1ea      	bne.n	800dbb4 <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 800dbde:	f001 fb5d 	bl	800f29c <vPortYield>
 800dbe2:	e7e7      	b.n	800dbb4 <xQueueGenericReset+0x38>

0800dbe4 <xQueueGenericCreate>:
{
 800dbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe6:	0005      	movs	r5, r0
 800dbe8:	000e      	movs	r6, r1
 800dbea:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dbec:	2800      	cmp	r0, #0
 800dbee:	d101      	bne.n	800dbf4 <xQueueGenericCreate+0x10>
 800dbf0:	b672      	cpsid	i
 800dbf2:	e7fe      	b.n	800dbf2 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800dbf4:	2900      	cmp	r1, #0
 800dbf6:	d013      	beq.n	800dc20 <xQueueGenericCreate+0x3c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbf8:	0008      	movs	r0, r1
 800dbfa:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dbfc:	3055      	adds	r0, #85	; 0x55
 800dbfe:	f001 fbd7 	bl	800f3b0 <pvPortMalloc>
 800dc02:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800dc04:	d011      	beq.n	800dc2a <xQueueGenericCreate+0x46>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800dc06:	0003      	movs	r3, r0
 800dc08:	3354      	adds	r3, #84	; 0x54
 800dc0a:	6003      	str	r3, [r0, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800dc0c:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800dc0e:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dc10:	2101      	movs	r1, #1
 800dc12:	0020      	movs	r0, r4
 800dc14:	f7ff ffb2 	bl	800db7c <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800dc18:	2350      	movs	r3, #80	; 0x50
}
 800dc1a:	0020      	movs	r0, r4
			pxNewQueue->ucQueueType = ucQueueType;
 800dc1c:	54e7      	strb	r7, [r4, r3]
}
 800dc1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dc20:	2054      	movs	r0, #84	; 0x54
 800dc22:	f001 fbc5 	bl	800f3b0 <pvPortMalloc>
 800dc26:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800dc28:	d101      	bne.n	800dc2e <xQueueGenericCreate+0x4a>
	configASSERT( xReturn );
 800dc2a:	b672      	cpsid	i
 800dc2c:	e7fe      	b.n	800dc2c <xQueueGenericCreate+0x48>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dc2e:	6024      	str	r4, [r4, #0]
 800dc30:	e7ec      	b.n	800dc0c <xQueueGenericCreate+0x28>
 800dc32:	46c0      	nop			; (mov r8, r8)

0800dc34 <xQueueCreateCountingSemaphore>:
	{
 800dc34:	b510      	push	{r4, lr}
 800dc36:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	d101      	bne.n	800dc40 <xQueueCreateCountingSemaphore+0xc>
 800dc3c:	b672      	cpsid	i
 800dc3e:	e7fe      	b.n	800dc3e <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dc40:	4288      	cmp	r0, r1
 800dc42:	d201      	bcs.n	800dc48 <xQueueCreateCountingSemaphore+0x14>
 800dc44:	b672      	cpsid	i
 800dc46:	e7fe      	b.n	800dc46 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dc48:	2202      	movs	r2, #2
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	f7ff ffca 	bl	800dbe4 <xQueueGenericCreate>
		if( xHandle != NULL )
 800dc50:	2800      	cmp	r0, #0
 800dc52:	d001      	beq.n	800dc58 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dc54:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800dc56:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800dc58:	b672      	cpsid	i
 800dc5a:	e7fe      	b.n	800dc5a <xQueueCreateCountingSemaphore+0x26>

0800dc5c <xQueueGenericSend>:
{
 800dc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc5e:	46c6      	mov	lr, r8
 800dc60:	b500      	push	{lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	0004      	movs	r4, r0
 800dc66:	000f      	movs	r7, r1
 800dc68:	9201      	str	r2, [sp, #4]
 800dc6a:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	d100      	bne.n	800dc72 <xQueueGenericSend+0x16>
 800dc70:	e07a      	b.n	800dd68 <xQueueGenericSend+0x10c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc72:	2900      	cmp	r1, #0
 800dc74:	d100      	bne.n	800dc78 <xQueueGenericSend+0x1c>
 800dc76:	e071      	b.n	800dd5c <xQueueGenericSend+0x100>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc78:	2d02      	cmp	r5, #2
 800dc7a:	d104      	bne.n	800dc86 <xQueueGenericSend+0x2a>
 800dc7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d001      	beq.n	800dc86 <xQueueGenericSend+0x2a>
 800dc82:	b672      	cpsid	i
 800dc84:	e7fe      	b.n	800dc84 <xQueueGenericSend+0x28>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc86:	f000 ff0f 	bl	800eaa8 <xTaskGetSchedulerState>
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	d104      	bne.n	800dc98 <xQueueGenericSend+0x3c>
 800dc8e:	9b01      	ldr	r3, [sp, #4]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d001      	beq.n	800dc98 <xQueueGenericSend+0x3c>
 800dc94:	b672      	cpsid	i
 800dc96:	e7fe      	b.n	800dc96 <xQueueGenericSend+0x3a>
		prvLockQueue( pxQueue );
 800dc98:	2300      	movs	r3, #0
 800dc9a:	4698      	mov	r8, r3
		taskENTER_CRITICAL();
 800dc9c:	f001 fb0a 	bl	800f2b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dca0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dca2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dca4:	2600      	movs	r6, #0
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d335      	bcc.n	800dd16 <xQueueGenericSend+0xba>
 800dcaa:	2d02      	cmp	r5, #2
 800dcac:	d033      	beq.n	800dd16 <xQueueGenericSend+0xba>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dcae:	9b01      	ldr	r3, [sp, #4]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d05b      	beq.n	800dd6c <xQueueGenericSend+0x110>
				else if( xEntryTimeSet == pdFALSE )
 800dcb4:	2e00      	cmp	r6, #0
 800dcb6:	d102      	bne.n	800dcbe <xQueueGenericSend+0x62>
					vTaskSetTimeOutState( &xTimeOut );
 800dcb8:	a802      	add	r0, sp, #8
 800dcba:	f000 feab 	bl	800ea14 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800dcbe:	f001 fb05 	bl	800f2cc <vPortExitCritical>
		vTaskSuspendAll();
 800dcc2:	f000 fc63 	bl	800e58c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dcc6:	f001 faf5 	bl	800f2b4 <vPortEnterCritical>
 800dcca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dccc:	3301      	adds	r3, #1
 800dcce:	d101      	bne.n	800dcd4 <xQueueGenericSend+0x78>
 800dcd0:	4643      	mov	r3, r8
 800dcd2:	6463      	str	r3, [r4, #68]	; 0x44
 800dcd4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	d101      	bne.n	800dcde <xQueueGenericSend+0x82>
 800dcda:	4643      	mov	r3, r8
 800dcdc:	64a3      	str	r3, [r4, #72]	; 0x48
 800dcde:	f001 faf5 	bl	800f2cc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dce2:	a901      	add	r1, sp, #4
 800dce4:	a802      	add	r0, sp, #8
 800dce6:	f000 fea5 	bl	800ea34 <xTaskCheckForTimeOut>
 800dcea:	2800      	cmp	r0, #0
 800dcec:	d14b      	bne.n	800dd86 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcee:	f001 fae1 	bl	800f2b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dcf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dcf4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d01e      	beq.n	800dd38 <xQueueGenericSend+0xdc>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800dcfa:	f001 fae7 	bl	800f2cc <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800dcfe:	0020      	movs	r0, r4
 800dd00:	f7ff feec 	bl	800dadc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd04:	f000 fce2 	bl	800e6cc <xTaskResumeAll>
 800dd08:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800dd0a:	f001 fad3 	bl	800f2b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd10:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d2c9      	bcs.n	800dcaa <xQueueGenericSend+0x4e>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd16:	002a      	movs	r2, r5
 800dd18:	0039      	movs	r1, r7
 800dd1a:	0020      	movs	r0, r4
 800dd1c:	f7ff fe90 	bl	800da40 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d126      	bne.n	800dd74 <xQueueGenericSend+0x118>
					else if( xYieldRequired != pdFALSE )
 800dd26:	2800      	cmp	r0, #0
 800dd28:	d12a      	bne.n	800dd80 <xQueueGenericSend+0x124>
				taskEXIT_CRITICAL();
 800dd2a:	f001 facf 	bl	800f2cc <vPortExitCritical>
				return pdPASS;
 800dd2e:	2001      	movs	r0, #1
}
 800dd30:	b004      	add	sp, #16
 800dd32:	bc04      	pop	{r2}
 800dd34:	4690      	mov	r8, r2
 800dd36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	taskEXIT_CRITICAL();
 800dd38:	f001 fac8 	bl	800f2cc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dd3c:	0020      	movs	r0, r4
 800dd3e:	9901      	ldr	r1, [sp, #4]
 800dd40:	3010      	adds	r0, #16
 800dd42:	f000 fdf7 	bl	800e934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd46:	0020      	movs	r0, r4
 800dd48:	f7ff fec8 	bl	800dadc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd4c:	f000 fcbe 	bl	800e6cc <xTaskResumeAll>
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d1d9      	bne.n	800dd08 <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800dd54:	f001 faa2 	bl	800f29c <vPortYield>
 800dd58:	2601      	movs	r6, #1
 800dd5a:	e7d6      	b.n	800dd0a <xQueueGenericSend+0xae>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d100      	bne.n	800dd64 <xQueueGenericSend+0x108>
 800dd62:	e789      	b.n	800dc78 <xQueueGenericSend+0x1c>
 800dd64:	b672      	cpsid	i
 800dd66:	e7fe      	b.n	800dd66 <xQueueGenericSend+0x10a>
	configASSERT( pxQueue );
 800dd68:	b672      	cpsid	i
 800dd6a:	e7fe      	b.n	800dd6a <xQueueGenericSend+0x10e>
					taskEXIT_CRITICAL();
 800dd6c:	f001 faae 	bl	800f2cc <vPortExitCritical>
					return errQUEUE_FULL;
 800dd70:	2000      	movs	r0, #0
 800dd72:	e7dd      	b.n	800dd30 <xQueueGenericSend+0xd4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800dd74:	0020      	movs	r0, r4
 800dd76:	3024      	adds	r0, #36	; 0x24
 800dd78:	f000 fe12 	bl	800e9a0 <xTaskRemoveFromEventList>
 800dd7c:	2801      	cmp	r0, #1
 800dd7e:	d1d4      	bne.n	800dd2a <xQueueGenericSend+0xce>
							queueYIELD_IF_USING_PREEMPTION();
 800dd80:	f001 fa8c 	bl	800f29c <vPortYield>
 800dd84:	e7d1      	b.n	800dd2a <xQueueGenericSend+0xce>
			prvUnlockQueue( pxQueue );
 800dd86:	0020      	movs	r0, r4
 800dd88:	f7ff fea8 	bl	800dadc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd8c:	f000 fc9e 	bl	800e6cc <xTaskResumeAll>
			return errQUEUE_FULL;
 800dd90:	2000      	movs	r0, #0
 800dd92:	e7cd      	b.n	800dd30 <xQueueGenericSend+0xd4>

0800dd94 <xQueueGenericSendFromISR>:
{
 800dd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd96:	46c6      	mov	lr, r8
 800dd98:	0004      	movs	r4, r0
 800dd9a:	b500      	push	{lr}
 800dd9c:	000d      	movs	r5, r1
 800dd9e:	0017      	movs	r7, r2
 800dda0:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800dda2:	2800      	cmp	r0, #0
 800dda4:	d01d      	beq.n	800dde2 <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dda6:	2900      	cmp	r1, #0
 800dda8:	d016      	beq.n	800ddd8 <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ddaa:	4643      	mov	r3, r8
 800ddac:	2b02      	cmp	r3, #2
 800ddae:	d104      	bne.n	800ddba <xQueueGenericSendFromISR+0x26>
 800ddb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d017      	beq.n	800dde6 <xQueueGenericSendFromISR+0x52>
 800ddb6:	b672      	cpsid	i
 800ddb8:	e7fe      	b.n	800ddb8 <xQueueGenericSendFromISR+0x24>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ddba:	f001 fa95 	bl	800f2e8 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ddbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ddc0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ddc2:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d312      	bcc.n	800ddee <xQueueGenericSendFromISR+0x5a>
			xReturn = errQUEUE_FULL;
 800ddc8:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ddca:	0030      	movs	r0, r6
 800ddcc:	f001 fa92 	bl	800f2f4 <vClearInterruptMaskFromISR>
}
 800ddd0:	0028      	movs	r0, r5
 800ddd2:	bc04      	pop	{r2}
 800ddd4:	4690      	mov	r8, r2
 800ddd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ddd8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d0e5      	beq.n	800ddaa <xQueueGenericSendFromISR+0x16>
 800ddde:	b672      	cpsid	i
 800dde0:	e7fe      	b.n	800dde0 <xQueueGenericSendFromISR+0x4c>
	configASSERT( pxQueue );
 800dde2:	b672      	cpsid	i
 800dde4:	e7fe      	b.n	800dde4 <xQueueGenericSendFromISR+0x50>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dde6:	f001 fa7f 	bl	800f2e8 <ulSetInterruptMaskFromISR>
 800ddea:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ddec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ddee:	4642      	mov	r2, r8
 800ddf0:	0029      	movs	r1, r5
 800ddf2:	0020      	movs	r0, r4
 800ddf4:	f7ff fe24 	bl	800da40 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800ddf8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	d004      	beq.n	800de08 <xQueueGenericSendFromISR+0x74>
				++( pxQueue->xTxLock );
 800ddfe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800de00:	2501      	movs	r5, #1
				++( pxQueue->xTxLock );
 800de02:	3301      	adds	r3, #1
 800de04:	64a3      	str	r3, [r4, #72]	; 0x48
 800de06:	e7e0      	b.n	800ddca <xQueueGenericSendFromISR+0x36>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de08:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
 800de0a:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d0dc      	beq.n	800ddca <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de10:	0020      	movs	r0, r4
 800de12:	3024      	adds	r0, #36	; 0x24
 800de14:	f000 fdc4 	bl	800e9a0 <xTaskRemoveFromEventList>
 800de18:	2800      	cmp	r0, #0
 800de1a:	d0d6      	beq.n	800ddca <xQueueGenericSendFromISR+0x36>
							if( pxHigherPriorityTaskWoken != NULL )
 800de1c:	2f00      	cmp	r7, #0
 800de1e:	d0d4      	beq.n	800ddca <xQueueGenericSendFromISR+0x36>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800de20:	603d      	str	r5, [r7, #0]
 800de22:	e7d2      	b.n	800ddca <xQueueGenericSendFromISR+0x36>

0800de24 <xQueueGiveFromISR>:
{
 800de24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de26:	0004      	movs	r4, r0
 800de28:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800de2a:	2800      	cmp	r0, #0
 800de2c:	d01e      	beq.n	800de6c <xQueueGiveFromISR+0x48>
	configASSERT( pxQueue->uxItemSize == 0 );
 800de2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800de30:	2b00      	cmp	r3, #0
 800de32:	d001      	beq.n	800de38 <xQueueGiveFromISR+0x14>
 800de34:	b672      	cpsid	i
 800de36:	e7fe      	b.n	800de36 <xQueueGiveFromISR+0x12>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800de38:	6803      	ldr	r3, [r0, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d018      	beq.n	800de70 <xQueueGiveFromISR+0x4c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de3e:	f001 fa53 	bl	800f2e8 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800de42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de44:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de46:	0006      	movs	r6, r0
			xReturn = errQUEUE_FULL;
 800de48:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d209      	bcs.n	800de62 <xQueueGiveFromISR+0x3e>
			++( pxQueue->uxMessagesWaiting );
 800de4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de50:	3301      	adds	r3, #1
 800de52:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800de54:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de56:	3301      	adds	r3, #1
 800de58:	d00f      	beq.n	800de7a <xQueueGiveFromISR+0x56>
				++( pxQueue->xTxLock );
 800de5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de5c:	3301      	adds	r3, #1
 800de5e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800de60:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800de62:	0030      	movs	r0, r6
 800de64:	f001 fa46 	bl	800f2f4 <vClearInterruptMaskFromISR>
}
 800de68:	0028      	movs	r0, r5
 800de6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800de6c:	b672      	cpsid	i
 800de6e:	e7fe      	b.n	800de6e <xQueueGiveFromISR+0x4a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800de70:	6843      	ldr	r3, [r0, #4]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d0e3      	beq.n	800de3e <xQueueGiveFromISR+0x1a>
 800de76:	b672      	cpsid	i
 800de78:	e7fe      	b.n	800de78 <xQueueGiveFromISR+0x54>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de7c:	42ab      	cmp	r3, r5
 800de7e:	d0ef      	beq.n	800de60 <xQueueGiveFromISR+0x3c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de80:	0020      	movs	r0, r4
 800de82:	3024      	adds	r0, #36	; 0x24
 800de84:	f000 fd8c 	bl	800e9a0 <xTaskRemoveFromEventList>
 800de88:	2800      	cmp	r0, #0
 800de8a:	d0e9      	beq.n	800de60 <xQueueGiveFromISR+0x3c>
							if( pxHigherPriorityTaskWoken != NULL )
 800de8c:	2f00      	cmp	r7, #0
 800de8e:	d0e7      	beq.n	800de60 <xQueueGiveFromISR+0x3c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800de90:	2501      	movs	r5, #1
 800de92:	603d      	str	r5, [r7, #0]
 800de94:	e7e5      	b.n	800de62 <xQueueGiveFromISR+0x3e>
 800de96:	46c0      	nop			; (mov r8, r8)

0800de98 <xQueueGenericReceive>:
{
 800de98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de9a:	46c6      	mov	lr, r8
 800de9c:	b500      	push	{lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	0004      	movs	r4, r0
 800dea2:	000d      	movs	r5, r1
 800dea4:	9201      	str	r2, [sp, #4]
 800dea6:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800dea8:	2800      	cmp	r0, #0
 800deaa:	d100      	bne.n	800deae <xQueueGenericReceive+0x16>
 800deac:	e07c      	b.n	800dfa8 <xQueueGenericReceive+0x110>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800deae:	2900      	cmp	r1, #0
 800deb0:	d100      	bne.n	800deb4 <xQueueGenericReceive+0x1c>
 800deb2:	e073      	b.n	800df9c <xQueueGenericReceive+0x104>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800deb4:	f000 fdf8 	bl	800eaa8 <xTaskGetSchedulerState>
 800deb8:	2800      	cmp	r0, #0
 800deba:	d104      	bne.n	800dec6 <xQueueGenericReceive+0x2e>
 800debc:	9b01      	ldr	r3, [sp, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d001      	beq.n	800dec6 <xQueueGenericReceive+0x2e>
 800dec2:	b672      	cpsid	i
 800dec4:	e7fe      	b.n	800dec4 <xQueueGenericReceive+0x2c>
		taskENTER_CRITICAL();
 800dec6:	f001 f9f5 	bl	800f2b4 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800deca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800decc:	2b00      	cmp	r3, #0
 800dece:	d14b      	bne.n	800df68 <xQueueGenericReceive+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ded0:	9b01      	ldr	r3, [sp, #4]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d100      	bne.n	800ded8 <xQueueGenericReceive+0x40>
 800ded6:	e08f      	b.n	800dff8 <xQueueGenericReceive+0x160>
					vTaskSetTimeOutState( &xTimeOut );
 800ded8:	a802      	add	r0, sp, #8
 800deda:	f000 fd9b 	bl	800ea14 <vTaskSetTimeOutState>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dede:	2324      	movs	r3, #36	; 0x24
 800dee0:	4698      	mov	r8, r3
		prvLockQueue( pxQueue );
 800dee2:	2600      	movs	r6, #0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dee4:	44a0      	add	r8, r4
 800dee6:	e00f      	b.n	800df08 <xQueueGenericReceive+0x70>
	taskEXIT_CRITICAL();
 800dee8:	f001 f9f0 	bl	800f2cc <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800deec:	0020      	movs	r0, r4
 800deee:	f7ff fdf5 	bl	800dadc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800def2:	f000 fbeb 	bl	800e6cc <xTaskResumeAll>
		taskENTER_CRITICAL();
 800def6:	f001 f9dd 	bl	800f2b4 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800defa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800defc:	2b00      	cmp	r3, #0
 800defe:	d133      	bne.n	800df68 <xQueueGenericReceive+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800df00:	9b01      	ldr	r3, [sp, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d100      	bne.n	800df08 <xQueueGenericReceive+0x70>
 800df06:	e077      	b.n	800dff8 <xQueueGenericReceive+0x160>
		taskEXIT_CRITICAL();
 800df08:	f001 f9e0 	bl	800f2cc <vPortExitCritical>
		vTaskSuspendAll();
 800df0c:	f000 fb3e 	bl	800e58c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df10:	f001 f9d0 	bl	800f2b4 <vPortEnterCritical>
 800df14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800df16:	3301      	adds	r3, #1
 800df18:	d100      	bne.n	800df1c <xQueueGenericReceive+0x84>
 800df1a:	6466      	str	r6, [r4, #68]	; 0x44
 800df1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df1e:	3301      	adds	r3, #1
 800df20:	d100      	bne.n	800df24 <xQueueGenericReceive+0x8c>
 800df22:	64a6      	str	r6, [r4, #72]	; 0x48
 800df24:	f001 f9d2 	bl	800f2cc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df28:	a901      	add	r1, sp, #4
 800df2a:	a802      	add	r0, sp, #8
 800df2c:	f000 fd82 	bl	800ea34 <xTaskCheckForTimeOut>
 800df30:	2800      	cmp	r0, #0
 800df32:	d15a      	bne.n	800dfea <xQueueGenericReceive+0x152>
	taskENTER_CRITICAL();
 800df34:	f001 f9be 	bl	800f2b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800df38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d1d4      	bne.n	800dee8 <xQueueGenericReceive+0x50>
	taskEXIT_CRITICAL();
 800df3e:	f001 f9c5 	bl	800f2cc <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df42:	6823      	ldr	r3, [r4, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d034      	beq.n	800dfb2 <xQueueGenericReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df48:	9901      	ldr	r1, [sp, #4]
 800df4a:	4640      	mov	r0, r8
 800df4c:	f000 fcf2 	bl	800e934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df50:	0020      	movs	r0, r4
 800df52:	f7ff fdc3 	bl	800dadc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df56:	f000 fbb9 	bl	800e6cc <xTaskResumeAll>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	d026      	beq.n	800dfac <xQueueGenericReceive+0x114>
		taskENTER_CRITICAL();
 800df5e:	f001 f9a9 	bl	800f2b4 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df64:	2b00      	cmp	r3, #0
 800df66:	d0cb      	beq.n	800df00 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df68:	0029      	movs	r1, r5
 800df6a:	0020      	movs	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800df6c:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df6e:	f7ff fda3 	bl	800dab8 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800df72:	2f00      	cmp	r7, #0
 800df74:	d125      	bne.n	800dfc2 <xQueueGenericReceive+0x12a>
					--( pxQueue->uxMessagesWaiting );
 800df76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df78:	3b01      	subs	r3, #1
 800df7a:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df7c:	6823      	ldr	r3, [r4, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d102      	bne.n	800df88 <xQueueGenericReceive+0xf0>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800df82:	f000 fec5 	bl	800ed10 <pvTaskIncrementMutexHeldCount>
 800df86:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df88:	6923      	ldr	r3, [r4, #16]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d126      	bne.n	800dfdc <xQueueGenericReceive+0x144>
				taskEXIT_CRITICAL();
 800df8e:	f001 f99d 	bl	800f2cc <vPortExitCritical>
				return pdPASS;
 800df92:	2001      	movs	r0, #1
}
 800df94:	b004      	add	sp, #16
 800df96:	bc04      	pop	{r2}
 800df98:	4690      	mov	r8, r2
 800df9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df9c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d100      	bne.n	800dfa4 <xQueueGenericReceive+0x10c>
 800dfa2:	e787      	b.n	800deb4 <xQueueGenericReceive+0x1c>
 800dfa4:	b672      	cpsid	i
 800dfa6:	e7fe      	b.n	800dfa6 <xQueueGenericReceive+0x10e>
	configASSERT( pxQueue );
 800dfa8:	b672      	cpsid	i
 800dfaa:	e7fe      	b.n	800dfaa <xQueueGenericReceive+0x112>
					portYIELD_WITHIN_API();
 800dfac:	f001 f976 	bl	800f29c <vPortYield>
 800dfb0:	e7d5      	b.n	800df5e <xQueueGenericReceive+0xc6>
						taskENTER_CRITICAL();
 800dfb2:	f001 f97f 	bl	800f2b4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800dfb6:	6860      	ldr	r0, [r4, #4]
 800dfb8:	f000 fd86 	bl	800eac8 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800dfbc:	f001 f986 	bl	800f2cc <vPortExitCritical>
 800dfc0:	e7c2      	b.n	800df48 <xQueueGenericReceive+0xb0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800dfc4:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d0e1      	beq.n	800df8e <xQueueGenericReceive+0xf6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfca:	0020      	movs	r0, r4
 800dfcc:	3024      	adds	r0, #36	; 0x24
 800dfce:	f000 fce7 	bl	800e9a0 <xTaskRemoveFromEventList>
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	d0db      	beq.n	800df8e <xQueueGenericReceive+0xf6>
							queueYIELD_IF_USING_PREEMPTION();
 800dfd6:	f001 f961 	bl	800f29c <vPortYield>
 800dfda:	e7d8      	b.n	800df8e <xQueueGenericReceive+0xf6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800dfdc:	0020      	movs	r0, r4
 800dfde:	3010      	adds	r0, #16
 800dfe0:	f000 fcde 	bl	800e9a0 <xTaskRemoveFromEventList>
 800dfe4:	2801      	cmp	r0, #1
 800dfe6:	d1d2      	bne.n	800df8e <xQueueGenericReceive+0xf6>
 800dfe8:	e7f5      	b.n	800dfd6 <xQueueGenericReceive+0x13e>
			prvUnlockQueue( pxQueue );
 800dfea:	0020      	movs	r0, r4
 800dfec:	f7ff fd76 	bl	800dadc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dff0:	f000 fb6c 	bl	800e6cc <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800dff4:	2000      	movs	r0, #0
 800dff6:	e7cd      	b.n	800df94 <xQueueGenericReceive+0xfc>
					taskEXIT_CRITICAL();
 800dff8:	f001 f968 	bl	800f2cc <vPortExitCritical>
					return errQUEUE_EMPTY;
 800dffc:	2000      	movs	r0, #0
 800dffe:	e7c9      	b.n	800df94 <xQueueGenericReceive+0xfc>

0800e000 <xQueueReceiveFromISR>:
{
 800e000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e002:	46c6      	mov	lr, r8
 800e004:	0004      	movs	r4, r0
 800e006:	b500      	push	{lr}
 800e008:	4688      	mov	r8, r1
 800e00a:	0017      	movs	r7, r2
	configASSERT( pxQueue );
 800e00c:	2800      	cmp	r0, #0
 800e00e:	d00f      	beq.n	800e030 <xQueueReceiveFromISR+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e010:	2900      	cmp	r1, #0
 800e012:	d01d      	beq.n	800e050 <xQueueReceiveFromISR+0x50>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e014:	f001 f968 	bl	800f2e8 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e018:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e01a:	0006      	movs	r6, r0
			xReturn = pdFAIL;
 800e01c:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d108      	bne.n	800e034 <xQueueReceiveFromISR+0x34>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e022:	0030      	movs	r0, r6
 800e024:	f001 f966 	bl	800f2f4 <vClearInterruptMaskFromISR>
}
 800e028:	0028      	movs	r0, r5
 800e02a:	bc04      	pop	{r2}
 800e02c:	4690      	mov	r8, r2
 800e02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800e030:	b672      	cpsid	i
 800e032:	e7fe      	b.n	800e032 <xQueueReceiveFromISR+0x32>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e034:	4641      	mov	r1, r8
 800e036:	0020      	movs	r0, r4
 800e038:	f7ff fd3e 	bl	800dab8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800e03c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e03e:	3b01      	subs	r3, #1
 800e040:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e042:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e044:	3301      	adds	r3, #1
 800e046:	d008      	beq.n	800e05a <xQueueReceiveFromISR+0x5a>
				++( pxQueue->xRxLock );
 800e048:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e04a:	3301      	adds	r3, #1
 800e04c:	6463      	str	r3, [r4, #68]	; 0x44
 800e04e:	e007      	b.n	800e060 <xQueueReceiveFromISR+0x60>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e050:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e052:	2b00      	cmp	r3, #0
 800e054:	d0de      	beq.n	800e014 <xQueueReceiveFromISR+0x14>
 800e056:	b672      	cpsid	i
 800e058:	e7fe      	b.n	800e058 <xQueueReceiveFromISR+0x58>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e05a:	6923      	ldr	r3, [r4, #16]
 800e05c:	42ab      	cmp	r3, r5
 800e05e:	d101      	bne.n	800e064 <xQueueReceiveFromISR+0x64>
			xReturn = pdPASS;
 800e060:	2501      	movs	r5, #1
 800e062:	e7de      	b.n	800e022 <xQueueReceiveFromISR+0x22>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e064:	0020      	movs	r0, r4
 800e066:	3010      	adds	r0, #16
 800e068:	f000 fc9a 	bl	800e9a0 <xTaskRemoveFromEventList>
 800e06c:	2800      	cmp	r0, #0
 800e06e:	d0f7      	beq.n	800e060 <xQueueReceiveFromISR+0x60>
						if( pxHigherPriorityTaskWoken != NULL )
 800e070:	2f00      	cmp	r7, #0
 800e072:	d0f5      	beq.n	800e060 <xQueueReceiveFromISR+0x60>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e074:	2501      	movs	r5, #1
 800e076:	603d      	str	r5, [r7, #0]
 800e078:	e7d3      	b.n	800e022 <xQueueReceiveFromISR+0x22>
 800e07a:	46c0      	nop			; (mov r8, r8)

0800e07c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e07c:	2300      	movs	r3, #0
	{
 800e07e:	b570      	push	{r4, r5, r6, lr}
 800e080:	4d06      	ldr	r5, [pc, #24]	; (800e09c <vQueueAddToRegistry+0x20>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e082:	00dc      	lsls	r4, r3, #3
 800e084:	192a      	adds	r2, r5, r4
 800e086:	6816      	ldr	r6, [r2, #0]
 800e088:	2e00      	cmp	r6, #0
 800e08a:	d003      	beq.n	800e094 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e08c:	3301      	adds	r3, #1
 800e08e:	2b08      	cmp	r3, #8
 800e090:	d1f7      	bne.n	800e082 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e092:	bd70      	pop	{r4, r5, r6, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e094:	5129      	str	r1, [r5, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e096:	6050      	str	r0, [r2, #4]
				break;
 800e098:	e7fb      	b.n	800e092 <vQueueAddToRegistry+0x16>
 800e09a:	46c0      	nop			; (mov r8, r8)
 800e09c:	20007368 	.word	0x20007368

0800e0a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e0a0:	b570      	push	{r4, r5, r6, lr}
 800e0a2:	0004      	movs	r4, r0
 800e0a4:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e0a6:	f001 f905 	bl	800f2b4 <vPortEnterCritical>
 800e0aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	d101      	bne.n	800e0b4 <vQueueWaitForMessageRestricted+0x14>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	6463      	str	r3, [r4, #68]	; 0x44
 800e0b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e0b6:	3301      	adds	r3, #1
 800e0b8:	d101      	bne.n	800e0be <vQueueWaitForMessageRestricted+0x1e>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	64a3      	str	r3, [r4, #72]	; 0x48
 800e0be:	f001 f905 	bl	800f2cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e0c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d104      	bne.n	800e0d2 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e0c8:	0020      	movs	r0, r4
 800e0ca:	0029      	movs	r1, r5
 800e0cc:	3024      	adds	r0, #36	; 0x24
 800e0ce:	f000 fc51 	bl	800e974 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e0d2:	0020      	movs	r0, r4
 800e0d4:	f7ff fd02 	bl	800dadc <prvUnlockQueue>
	}
 800e0d8:	bd70      	pop	{r4, r5, r6, pc}
 800e0da:	46c0      	nop			; (mov r8, r8)

0800e0dc <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e0dc:	b510      	push	{r4, lr}
 800e0de:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e0e0:	f005 f81c 	bl	801311c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e0e4:	0020      	movs	r0, r4
 800e0e6:	f7f2 f817 	bl	8000118 <strlen>
 800e0ea:	0003      	movs	r3, r0
 800e0ec:	280b      	cmp	r0, #11
 800e0ee:	d808      	bhi.n	800e102 <prvWriteNameToBuffer+0x26>
 800e0f0:	0022      	movs	r2, r4
		{
			pcBuffer[ x ] = ' ';
 800e0f2:	2320      	movs	r3, #32
 800e0f4:	1820      	adds	r0, r4, r0
 800e0f6:	320c      	adds	r2, #12
 800e0f8:	7003      	strb	r3, [r0, #0]
 800e0fa:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e0fc:	4290      	cmp	r0, r2
 800e0fe:	d1fb      	bne.n	800e0f8 <prvWriteNameToBuffer+0x1c>
 800e100:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800e102:	18e0      	adds	r0, r4, r3
 800e104:	2300      	movs	r3, #0
 800e106:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800e108:	bd10      	pop	{r4, pc}
 800e10a:	46c0      	nop			; (mov r8, r8)

0800e10c <prvListTaskWithinSingleList.part.1>:
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e10e:	46d6      	mov	lr, sl
 800e110:	464f      	mov	r7, r9
 800e112:	4646      	mov	r6, r8
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e114:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e116:	b5c0      	push	{r6, r7, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e118:	685f      	ldr	r7, [r3, #4]
 800e11a:	2308      	movs	r3, #8
 800e11c:	469c      	mov	ip, r3
 800e11e:	448c      	add	ip, r1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e120:	4692      	mov	sl, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e122:	604f      	str	r7, [r1, #4]
 800e124:	4567      	cmp	r7, ip
 800e126:	d042      	beq.n	800e1ae <prvListTaskWithinSingleList.part.1+0xa2>
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	0005      	movs	r5, r0
 800e12c:	4698      	mov	r8, r3
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e12e:	2302      	movs	r3, #2
	UBaseType_t uxTask = 0;
 800e130:	2000      	movs	r0, #0
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e132:	4699      	mov	r9, r3
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e134:	687f      	ldr	r7, [r7, #4]
 800e136:	604f      	str	r7, [r1, #4]
 800e138:	45bc      	cmp	ip, r7
 800e13a:	d035      	beq.n	800e1a8 <prvListTaskWithinSingleList.part.1+0x9c>
 800e13c:	68fe      	ldr	r6, [r7, #12]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e13e:	0033      	movs	r3, r6
 800e140:	3334      	adds	r3, #52	; 0x34
 800e142:	606b      	str	r3, [r5, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e144:	6c73      	ldr	r3, [r6, #68]	; 0x44
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e146:	602e      	str	r6, [r5, #0]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e148:	60ab      	str	r3, [r5, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e14a:	4653      	mov	r3, sl
 800e14c:	732b      	strb	r3, [r5, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e14e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e150:	612b      	str	r3, [r5, #16]
					if( eState == eSuspended )
 800e152:	4653      	mov	r3, sl
 800e154:	2b03      	cmp	r3, #3
 800e156:	d018      	beq.n	800e18a <prvListTaskWithinSingleList.part.1+0x7e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e158:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800e15a:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e15c:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e15e:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e160:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e162:	7813      	ldrb	r3, [r2, #0]
 800e164:	2ba5      	cmp	r3, #165	; 0xa5
 800e166:	d11d      	bne.n	800e1a4 <prvListTaskWithinSingleList.part.1+0x98>
	uint32_t ulCount = 0U;
 800e168:	2300      	movs	r3, #0
			ulCount++;
 800e16a:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e16c:	5cd4      	ldrb	r4, [r2, r3]
 800e16e:	2ca5      	cmp	r4, #165	; 0xa5
 800e170:	d0fb      	beq.n	800e16a <prvListTaskWithinSingleList.part.1+0x5e>
 800e172:	089b      	lsrs	r3, r3, #2
 800e174:	b29b      	uxth	r3, r3
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e176:	83ab      	strh	r3, [r5, #28]
				uxTask++;
 800e178:	3001      	adds	r0, #1
 800e17a:	3520      	adds	r5, #32
			} while( pxNextTCB != pxFirstTCB );
 800e17c:	45b0      	cmp	r8, r6
 800e17e:	d1d9      	bne.n	800e134 <prvListTaskWithinSingleList.part.1+0x28>
	}
 800e180:	bc1c      	pop	{r2, r3, r4}
 800e182:	4690      	mov	r8, r2
 800e184:	4699      	mov	r9, r3
 800e186:	46a2      	mov	sl, r4
 800e188:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e18a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d0e3      	beq.n	800e158 <prvListTaskWithinSingleList.part.1+0x4c>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e190:	464b      	mov	r3, r9
 800e192:	732b      	strb	r3, [r5, #12]
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e194:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800e196:	616b      	str	r3, [r5, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e198:	6d73      	ldr	r3, [r6, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e19a:	6b32      	ldr	r2, [r6, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e19c:	61ab      	str	r3, [r5, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e19e:	7813      	ldrb	r3, [r2, #0]
 800e1a0:	2ba5      	cmp	r3, #165	; 0xa5
 800e1a2:	d0e1      	beq.n	800e168 <prvListTaskWithinSingleList.part.1+0x5c>
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	e7e6      	b.n	800e176 <prvListTaskWithinSingleList.part.1+0x6a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e1a8:	68cf      	ldr	r7, [r1, #12]
 800e1aa:	604f      	str	r7, [r1, #4]
 800e1ac:	e7c6      	b.n	800e13c <prvListTaskWithinSingleList.part.1+0x30>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e1ae:	68cf      	ldr	r7, [r1, #12]
 800e1b0:	e7ba      	b.n	800e128 <prvListTaskWithinSingleList.part.1+0x1c>
 800e1b2:	46c0      	nop			; (mov r8, r8)

0800e1b4 <prvResetNextTaskUnblockTime.part.2>:
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e1b4:	4b03      	ldr	r3, [pc, #12]	; (800e1c4 <prvResetNextTaskUnblockTime.part.2+0x10>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	685a      	ldr	r2, [r3, #4]
 800e1be:	4b02      	ldr	r3, [pc, #8]	; (800e1c8 <prvResetNextTaskUnblockTime.part.2+0x14>)
 800e1c0:	601a      	str	r2, [r3, #0]
}
 800e1c2:	4770      	bx	lr
 800e1c4:	20002238 	.word	0x20002238
 800e1c8:	200000c0 	.word	0x200000c0

0800e1cc <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e1cc:	4b0c      	ldr	r3, [pc, #48]	; (800e200 <prvAddCurrentTaskToDelayedList+0x34>)
{
 800e1ce:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e1d0:	685a      	ldr	r2, [r3, #4]
{
 800e1d2:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e1d4:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800e1d6:	689a      	ldr	r2, [r3, #8]
 800e1d8:	4282      	cmp	r2, r0
 800e1da:	d80a      	bhi.n	800e1f2 <prvAddCurrentTaskToDelayedList+0x26>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e1dc:	6818      	ldr	r0, [r3, #0]
 800e1de:	6859      	ldr	r1, [r3, #4]
 800e1e0:	3104      	adds	r1, #4
 800e1e2:	f7ff fc05 	bl	800d9f0 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e1e6:	4b07      	ldr	r3, [pc, #28]	; (800e204 <prvAddCurrentTaskToDelayedList+0x38>)
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	42a2      	cmp	r2, r4
 800e1ec:	d900      	bls.n	800e1f0 <prvAddCurrentTaskToDelayedList+0x24>
			xNextTaskUnblockTime = xTimeToWake;
 800e1ee:	601c      	str	r4, [r3, #0]
}
 800e1f0:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e1f2:	68d8      	ldr	r0, [r3, #12]
 800e1f4:	6859      	ldr	r1, [r3, #4]
 800e1f6:	3104      	adds	r1, #4
 800e1f8:	f7ff fbfa 	bl	800d9f0 <vListInsert>
 800e1fc:	e7f8      	b.n	800e1f0 <prvAddCurrentTaskToDelayedList+0x24>
 800e1fe:	46c0      	nop			; (mov r8, r8)
 800e200:	20002238 	.word	0x20002238
 800e204:	200000c0 	.word	0x200000c0

0800e208 <xTaskGenericCreate.part.5>:
BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 800e208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e20a:	464f      	mov	r7, r9
 800e20c:	4646      	mov	r6, r8
 800e20e:	46d6      	mov	lr, sl
 800e210:	b5c0      	push	{r6, r7, lr}
 800e212:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e214:	4680      	mov	r8, r0
 800e216:	000c      	movs	r4, r1
 800e218:	0015      	movs	r5, r2
 800e21a:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e21c:	2f00      	cmp	r7, #0
 800e21e:	d100      	bne.n	800e222 <xTaskGenericCreate.part.5+0x1a>
 800e220:	e0ab      	b.n	800e37a <xTaskGenericCreate.part.5+0x172>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e222:	2060      	movs	r0, #96	; 0x60
 800e224:	f001 f8c4 	bl	800f3b0 <pvPortMalloc>
 800e228:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800e22a:	d100      	bne.n	800e22e <xTaskGenericCreate.part.5+0x26>
 800e22c:	e0ae      	b.n	800e38c <xTaskGenericCreate.part.5+0x184>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e22e:	00ad      	lsls	r5, r5, #2
				pxNewTCB->pxStack = pxStack;
 800e230:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e232:	002a      	movs	r2, r5
 800e234:	0038      	movs	r0, r7
 800e236:	21a5      	movs	r1, #165	; 0xa5
 800e238:	f004 fd3a 	bl	8012cb0 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e23c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800e23e:	1f2f      	subs	r7, r5, #4
 800e240:	469c      	mov	ip, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e242:	2307      	movs	r3, #7
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e244:	4467      	add	r7, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e246:	439f      	bics	r7, r3
 800e248:	0030      	movs	r0, r6
 800e24a:	0033      	movs	r3, r6
 800e24c:	3041      	adds	r0, #65	; 0x41
 800e24e:	3334      	adds	r3, #52	; 0x34
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e250:	7822      	ldrb	r2, [r4, #0]
 800e252:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 800e254:	7822      	ldrb	r2, [r4, #0]
 800e256:	2a00      	cmp	r2, #0
 800e258:	d003      	beq.n	800e262 <xTaskGenericCreate.part.5+0x5a>
 800e25a:	3301      	adds	r3, #1
 800e25c:	3401      	adds	r4, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e25e:	4298      	cmp	r0, r3
 800e260:	d1f6      	bne.n	800e250 <xTaskGenericCreate.part.5+0x48>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e262:	2340      	movs	r3, #64	; 0x40
 800e264:	2200      	movs	r2, #0
 800e266:	9d08      	ldr	r5, [sp, #32]
 800e268:	54f2      	strb	r2, [r6, r3]
 800e26a:	2d06      	cmp	r5, #6
 800e26c:	d84f      	bhi.n	800e30e <xTaskGenericCreate.part.5+0x106>
		pxTCB->uxMutexesHeld = 0;
 800e26e:	2400      	movs	r4, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e270:	1d33      	adds	r3, r6, #4
 800e272:	0018      	movs	r0, r3
	pxTCB->uxPriority = uxPriority;
 800e274:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800e276:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800e278:	6534      	str	r4, [r6, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e27a:	469a      	mov	sl, r3
 800e27c:	f7ff fba8 	bl	800d9d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800e280:	0030      	movs	r0, r6
 800e282:	3018      	adds	r0, #24
 800e284:	f7ff fba4 	bl	800d9d0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e288:	2307      	movs	r3, #7
 800e28a:	1b5b      	subs	r3, r3, r5
 800e28c:	61b3      	str	r3, [r6, #24]
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e28e:	235c      	movs	r3, #92	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800e290:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800e292:	6276      	str	r6, [r6, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800e294:	6574      	str	r4, [r6, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800e296:	65b4      	str	r4, [r6, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e298:	464a      	mov	r2, r9
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e29a:	54f4      	strb	r4, [r6, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e29c:	4641      	mov	r1, r8
 800e29e:	0038      	movs	r0, r7
 800e2a0:	f000 ffc0 	bl	800f224 <pxPortInitialiseStack>
		if( ( void * ) pxCreatedTask != NULL )
 800e2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e2a6:	6030      	str	r0, [r6, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d000      	beq.n	800e2ae <xTaskGenericCreate.part.5+0xa6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e2ac:	601e      	str	r6, [r3, #0]
		taskENTER_CRITICAL();
 800e2ae:	f001 f801 	bl	800f2b4 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800e2b2:	4c39      	ldr	r4, [pc, #228]	; (800e398 <xTaskGenericCreate.part.5+0x190>)
 800e2b4:	6923      	ldr	r3, [r4, #16]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	6123      	str	r3, [r4, #16]
			if( pxCurrentTCB == NULL )
 800e2ba:	6863      	ldr	r3, [r4, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d02f      	beq.n	800e320 <xTaskGenericCreate.part.5+0x118>
				if( xSchedulerRunning == pdFALSE )
 800e2c0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d025      	beq.n	800e312 <xTaskGenericCreate.part.5+0x10a>
 800e2c6:	4d35      	ldr	r5, [pc, #212]	; (800e39c <xTaskGenericCreate.part.5+0x194>)
			uxTaskNumber++;
 800e2c8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
			prvAddTaskToReadyList( pxNewTCB );
 800e2ca:	4a35      	ldr	r2, [pc, #212]	; (800e3a0 <xTaskGenericCreate.part.5+0x198>)
			uxTaskNumber++;
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	67e3      	str	r3, [r4, #124]	; 0x7c
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e2d0:	6473      	str	r3, [r6, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800e2d2:	6811      	ldr	r1, [r2, #0]
 800e2d4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e2d6:	428b      	cmp	r3, r1
 800e2d8:	d817      	bhi.n	800e30a <xTaskGenericCreate.part.5+0x102>
 800e2da:	0098      	lsls	r0, r3, #2
 800e2dc:	18c0      	adds	r0, r0, r3
 800e2de:	0080      	lsls	r0, r0, #2
 800e2e0:	1828      	adds	r0, r5, r0
 800e2e2:	4651      	mov	r1, sl
 800e2e4:	f7ff fb78 	bl	800d9d8 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800e2e8:	f000 fff0 	bl	800f2cc <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e2ec:	6fa3      	ldr	r3, [r4, #120]	; 0x78
			xReturn = pdPASS;
 800e2ee:	2501      	movs	r5, #1
		if( xSchedulerRunning != pdFALSE )
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d004      	beq.n	800e2fe <xTaskGenericCreate.part.5+0xf6>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800e2f4:	6863      	ldr	r3, [r4, #4]
 800e2f6:	9a08      	ldr	r2, [sp, #32]
 800e2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d83a      	bhi.n	800e374 <xTaskGenericCreate.part.5+0x16c>
}
 800e2fe:	0028      	movs	r0, r5
 800e300:	bc1c      	pop	{r2, r3, r4}
 800e302:	4690      	mov	r8, r2
 800e304:	4699      	mov	r9, r3
 800e306:	46a2      	mov	sl, r4
 800e308:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvAddTaskToReadyList( pxNewTCB );
 800e30a:	6013      	str	r3, [r2, #0]
 800e30c:	e7e5      	b.n	800e2da <xTaskGenericCreate.part.5+0xd2>
 800e30e:	2506      	movs	r5, #6
 800e310:	e7ad      	b.n	800e26e <xTaskGenericCreate.part.5+0x66>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800e312:	6863      	ldr	r3, [r4, #4]
 800e314:	9a08      	ldr	r2, [sp, #32]
 800e316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e318:	429a      	cmp	r2, r3
 800e31a:	d3d4      	bcc.n	800e2c6 <xTaskGenericCreate.part.5+0xbe>
						pxCurrentTCB = pxNewTCB;
 800e31c:	6066      	str	r6, [r4, #4]
 800e31e:	e7d2      	b.n	800e2c6 <xTaskGenericCreate.part.5+0xbe>
				pxCurrentTCB =  pxNewTCB;
 800e320:	6066      	str	r6, [r4, #4]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e322:	6923      	ldr	r3, [r4, #16]
 800e324:	4d1d      	ldr	r5, [pc, #116]	; (800e39c <xTaskGenericCreate.part.5+0x194>)
 800e326:	2b01      	cmp	r3, #1
 800e328:	d1ce      	bne.n	800e2c8 <xTaskGenericCreate.part.5+0xc0>
 800e32a:	238c      	movs	r3, #140	; 0x8c
 800e32c:	4698      	mov	r8, r3
 800e32e:	002f      	movs	r7, r5
 800e330:	44a8      	add	r8, r5
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e332:	0038      	movs	r0, r7
 800e334:	3714      	adds	r7, #20
 800e336:	f7ff fb3f 	bl	800d9b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e33a:	45b8      	cmp	r8, r7
 800e33c:	d1f9      	bne.n	800e332 <xTaskGenericCreate.part.5+0x12a>
	vListInitialise( &xDelayedTaskList1 );
 800e33e:	2314      	movs	r3, #20
 800e340:	4698      	mov	r8, r3
	vListInitialise( &xDelayedTaskList2 );
 800e342:	0027      	movs	r7, r4
	vListInitialise( &xDelayedTaskList1 );
 800e344:	44a0      	add	r8, r4
 800e346:	4640      	mov	r0, r8
	vListInitialise( &xDelayedTaskList2 );
 800e348:	3728      	adds	r7, #40	; 0x28
	vListInitialise( &xDelayedTaskList1 );
 800e34a:	f7ff fb35 	bl	800d9b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e34e:	0038      	movs	r0, r7
 800e350:	f7ff fb32 	bl	800d9b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e354:	0020      	movs	r0, r4
 800e356:	303c      	adds	r0, #60	; 0x3c
 800e358:	f7ff fb2e 	bl	800d9b8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e35c:	0020      	movs	r0, r4
 800e35e:	3050      	adds	r0, #80	; 0x50
 800e360:	f7ff fb2a 	bl	800d9b8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e364:	0020      	movs	r0, r4
 800e366:	3064      	adds	r0, #100	; 0x64
 800e368:	f7ff fb26 	bl	800d9b8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e36c:	4643      	mov	r3, r8
 800e36e:	6023      	str	r3, [r4, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e370:	60e7      	str	r7, [r4, #12]
 800e372:	e7a9      	b.n	800e2c8 <xTaskGenericCreate.part.5+0xc0>
				taskYIELD_IF_USING_PREEMPTION();
 800e374:	f000 ff92 	bl	800f29c <vPortYield>
 800e378:	e7c1      	b.n	800e2fe <xTaskGenericCreate.part.5+0xf6>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e37a:	0090      	lsls	r0, r2, #2
 800e37c:	f001 f818 	bl	800f3b0 <pvPortMalloc>
 800e380:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 800e382:	d000      	beq.n	800e386 <xTaskGenericCreate.part.5+0x17e>
 800e384:	e74d      	b.n	800e222 <xTaskGenericCreate.part.5+0x1a>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e386:	2501      	movs	r5, #1
 800e388:	426d      	negs	r5, r5
 800e38a:	e7b8      	b.n	800e2fe <xTaskGenericCreate.part.5+0xf6>
 800e38c:	2501      	movs	r5, #1
				vPortFree( pxStack );
 800e38e:	0038      	movs	r0, r7
 800e390:	f001 f88a 	bl	800f4a8 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e394:	426d      	negs	r5, r5
 800e396:	e7b2      	b.n	800e2fe <xTaskGenericCreate.part.5+0xf6>
 800e398:	20002238 	.word	0x20002238
 800e39c:	200022d4 	.word	0x200022d4
 800e3a0:	200022b8 	.word	0x200022b8

0800e3a4 <vTaskSwitchContext.part.6>:
		xYieldPending = pdFALSE;
 800e3a4:	2300      	movs	r3, #0
void vTaskSwitchContext( void )
 800e3a6:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
 800e3a8:	4d26      	ldr	r5, [pc, #152]	; (800e444 <vTaskSwitchContext.part.6+0xa0>)
 800e3aa:	606b      	str	r3, [r5, #4]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e3ac:	f7fa f804 	bl	80083b8 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e3b0:	68ab      	ldr	r3, [r5, #8]
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e3b2:	4c25      	ldr	r4, [pc, #148]	; (800e448 <vTaskSwitchContext.part.6+0xa4>)
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e3b4:	4298      	cmp	r0, r3
 800e3b6:	d904      	bls.n	800e3c2 <vTaskSwitchContext.part.6+0x1e>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e3b8:	6862      	ldr	r2, [r4, #4]
 800e3ba:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800e3bc:	1acb      	subs	r3, r1, r3
 800e3be:	181b      	adds	r3, r3, r0
 800e3c0:	6553      	str	r3, [r2, #84]	; 0x54
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e3c2:	6862      	ldr	r2, [r4, #4]
 800e3c4:	6863      	ldr	r3, [r4, #4]
 800e3c6:	6812      	ldr	r2, [r2, #0]
 800e3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				ulTaskSwitchedInTime = ulTotalRunTime;
 800e3ca:	60a8      	str	r0, [r5, #8]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d804      	bhi.n	800e3da <vTaskSwitchContext.part.6+0x36>
 800e3d0:	6860      	ldr	r0, [r4, #4]
 800e3d2:	6861      	ldr	r1, [r4, #4]
 800e3d4:	3134      	adds	r1, #52	; 0x34
 800e3d6:	f7fe fc69 	bl	800ccac <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e3da:	6863      	ldr	r3, [r4, #4]
 800e3dc:	2214      	movs	r2, #20
 800e3de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e3e0:	491a      	ldr	r1, [pc, #104]	; (800e44c <vTaskSwitchContext.part.6+0xa8>)
 800e3e2:	f004 fc4d 	bl	8012c80 <memcmp>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	d004      	beq.n	800e3f4 <vTaskSwitchContext.part.6+0x50>
 800e3ea:	6860      	ldr	r0, [r4, #4]
 800e3ec:	6861      	ldr	r1, [r4, #4]
 800e3ee:	3134      	adds	r1, #52	; 0x34
 800e3f0:	f7fe fc5c 	bl	800ccac <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e3f4:	6829      	ldr	r1, [r5, #0]
 800e3f6:	4a16      	ldr	r2, [pc, #88]	; (800e450 <vTaskSwitchContext.part.6+0xac>)
 800e3f8:	e006      	b.n	800e408 <vTaskSwitchContext.part.6+0x64>
 800e3fa:	682b      	ldr	r3, [r5, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d018      	beq.n	800e432 <vTaskSwitchContext.part.6+0x8e>
 800e400:	682b      	ldr	r3, [r5, #0]
 800e402:	3b01      	subs	r3, #1
 800e404:	602b      	str	r3, [r5, #0]
 800e406:	6829      	ldr	r1, [r5, #0]
 800e408:	008b      	lsls	r3, r1, #2
 800e40a:	185b      	adds	r3, r3, r1
 800e40c:	009b      	lsls	r3, r3, #2
 800e40e:	58d3      	ldr	r3, [r2, r3]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d0f2      	beq.n	800e3fa <vTaskSwitchContext.part.6+0x56>
 800e414:	6828      	ldr	r0, [r5, #0]
 800e416:	0083      	lsls	r3, r0, #2
 800e418:	181b      	adds	r3, r3, r0
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	18d5      	adds	r5, r2, r3
 800e41e:	6869      	ldr	r1, [r5, #4]
 800e420:	3308      	adds	r3, #8
 800e422:	6849      	ldr	r1, [r1, #4]
 800e424:	18d3      	adds	r3, r2, r3
 800e426:	6069      	str	r1, [r5, #4]
 800e428:	4299      	cmp	r1, r3
 800e42a:	d004      	beq.n	800e436 <vTaskSwitchContext.part.6+0x92>
 800e42c:	68cb      	ldr	r3, [r1, #12]
 800e42e:	6063      	str	r3, [r4, #4]
}
 800e430:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e432:	b672      	cpsid	i
 800e434:	e7fe      	b.n	800e434 <vTaskSwitchContext.part.6+0x90>
 800e436:	2314      	movs	r3, #20
 800e438:	4343      	muls	r3, r0
 800e43a:	6849      	ldr	r1, [r1, #4]
 800e43c:	18d2      	adds	r2, r2, r3
 800e43e:	6051      	str	r1, [r2, #4]
 800e440:	e7f4      	b.n	800e42c <vTaskSwitchContext.part.6+0x88>
 800e442:	46c0      	nop			; (mov r8, r8)
 800e444:	200022b8 	.word	0x200022b8
 800e448:	20002238 	.word	0x20002238
 800e44c:	08017af4 	.word	0x08017af4
 800e450:	200022d4 	.word	0x200022d4

0800e454 <xTaskGenericCreate>:
{
 800e454:	b530      	push	{r4, r5, lr}
 800e456:	b085      	sub	sp, #20
 800e458:	9c08      	ldr	r4, [sp, #32]
	configASSERT( pxTaskCode );
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d003      	beq.n	800e466 <xTaskGenericCreate+0x12>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800e45e:	2c06      	cmp	r4, #6
 800e460:	d903      	bls.n	800e46a <xTaskGenericCreate+0x16>
 800e462:	b672      	cpsid	i
 800e464:	e7fe      	b.n	800e464 <xTaskGenericCreate+0x10>
	configASSERT( pxTaskCode );
 800e466:	b672      	cpsid	i
 800e468:	e7fe      	b.n	800e468 <xTaskGenericCreate+0x14>
 800e46a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e46c:	9400      	str	r4, [sp, #0]
 800e46e:	9502      	str	r5, [sp, #8]
 800e470:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e472:	9501      	str	r5, [sp, #4]
 800e474:	f7ff fec8 	bl	800e208 <xTaskGenericCreate.part.5>
}
 800e478:	b005      	add	sp, #20
 800e47a:	bd30      	pop	{r4, r5, pc}

0800e47c <uxTaskPriorityGet>:
	{
 800e47c:	b510      	push	{r4, lr}
 800e47e:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800e480:	f000 ff18 	bl	800f2b4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e484:	2c00      	cmp	r4, #0
 800e486:	d101      	bne.n	800e48c <uxTaskPriorityGet+0x10>
 800e488:	4b03      	ldr	r3, [pc, #12]	; (800e498 <uxTaskPriorityGet+0x1c>)
 800e48a:	685c      	ldr	r4, [r3, #4]
			uxReturn = pxTCB->uxPriority;
 800e48c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800e48e:	f000 ff1d 	bl	800f2cc <vPortExitCritical>
	}
 800e492:	0020      	movs	r0, r4
 800e494:	bd10      	pop	{r4, pc}
 800e496:	46c0      	nop			; (mov r8, r8)
 800e498:	20002238 	.word	0x20002238

0800e49c <vTaskPrioritySet>:
	{
 800e49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e49e:	0004      	movs	r4, r0
 800e4a0:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800e4a2:	2906      	cmp	r1, #6
 800e4a4:	d901      	bls.n	800e4aa <vTaskPrioritySet+0xe>
 800e4a6:	b672      	cpsid	i
 800e4a8:	e7fe      	b.n	800e4a8 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800e4aa:	f000 ff03 	bl	800f2b4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e4ae:	2c00      	cmp	r4, #0
 800e4b0:	d101      	bne.n	800e4b6 <vTaskPrioritySet+0x1a>
 800e4b2:	4b20      	ldr	r3, [pc, #128]	; (800e534 <vTaskPrioritySet+0x98>)
 800e4b4:	685c      	ldr	r4, [r3, #4]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e4b6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800e4b8:	4295      	cmp	r5, r2
 800e4ba:	d01f      	beq.n	800e4fc <vTaskPrioritySet+0x60>
					if( pxTCB != pxCurrentTCB )
 800e4bc:	4b1d      	ldr	r3, [pc, #116]	; (800e534 <vTaskPrioritySet+0x98>)
				if( uxNewPriority > uxCurrentBasePriority )
 800e4be:	d931      	bls.n	800e524 <vTaskPrioritySet+0x88>
					if( pxTCB != pxCurrentTCB )
 800e4c0:	6859      	ldr	r1, [r3, #4]
 800e4c2:	42a1      	cmp	r1, r4
 800e4c4:	d033      	beq.n	800e52e <vTaskPrioritySet+0x92>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800e4c6:	2600      	movs	r6, #0
 800e4c8:	685b      	ldr	r3, [r3, #4]
 800e4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4cc:	429d      	cmp	r5, r3
 800e4ce:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e4d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800e4d2:	428a      	cmp	r2, r1
 800e4d4:	d100      	bne.n	800e4d8 <vTaskPrioritySet+0x3c>
						pxTCB->uxPriority = uxNewPriority;
 800e4d6:	62e5      	str	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e4d8:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxBasePriority = uxNewPriority;
 800e4da:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	db02      	blt.n	800e4e6 <vTaskPrioritySet+0x4a>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4e0:	2207      	movs	r2, #7
 800e4e2:	1b55      	subs	r5, r2, r5
 800e4e4:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e4e6:	2314      	movs	r3, #20
 800e4e8:	434b      	muls	r3, r1
 800e4ea:	4d13      	ldr	r5, [pc, #76]	; (800e538 <vTaskPrioritySet+0x9c>)
 800e4ec:	6962      	ldr	r2, [r4, #20]
 800e4ee:	18eb      	adds	r3, r5, r3
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d006      	beq.n	800e502 <vTaskPrioritySet+0x66>
				if( xYieldRequired == pdTRUE )
 800e4f4:	2e01      	cmp	r6, #1
 800e4f6:	d101      	bne.n	800e4fc <vTaskPrioritySet+0x60>
					taskYIELD_IF_USING_PREEMPTION();
 800e4f8:	f000 fed0 	bl	800f29c <vPortYield>
		taskEXIT_CRITICAL();
 800e4fc:	f000 fee6 	bl	800f2cc <vPortExitCritical>
	}
 800e500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e502:	1d27      	adds	r7, r4, #4
 800e504:	0038      	movs	r0, r7
 800e506:	f7ff fa8b 	bl	800da20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e50a:	4a0c      	ldr	r2, [pc, #48]	; (800e53c <vTaskPrioritySet+0xa0>)
 800e50c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e50e:	6811      	ldr	r1, [r2, #0]
 800e510:	428b      	cmp	r3, r1
 800e512:	d900      	bls.n	800e516 <vTaskPrioritySet+0x7a>
 800e514:	6013      	str	r3, [r2, #0]
 800e516:	2014      	movs	r0, #20
 800e518:	4358      	muls	r0, r3
 800e51a:	0039      	movs	r1, r7
 800e51c:	1828      	adds	r0, r5, r0
 800e51e:	f7ff fa5b 	bl	800d9d8 <vListInsertEnd>
 800e522:	e7e7      	b.n	800e4f4 <vTaskPrioritySet+0x58>
				else if( pxTCB == pxCurrentTCB )
 800e524:	685e      	ldr	r6, [r3, #4]
 800e526:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800e528:	4273      	negs	r3, r6
 800e52a:	415e      	adcs	r6, r3
 800e52c:	e7d0      	b.n	800e4d0 <vTaskPrioritySet+0x34>
	BaseType_t xYieldRequired = pdFALSE;
 800e52e:	2600      	movs	r6, #0
 800e530:	e7ce      	b.n	800e4d0 <vTaskPrioritySet+0x34>
 800e532:	46c0      	nop			; (mov r8, r8)
 800e534:	20002238 	.word	0x20002238
 800e538:	200022d4 	.word	0x200022d4
 800e53c:	200022b8 	.word	0x200022b8

0800e540 <vTaskStartScheduler>:
{
 800e540:	b510      	push	{r4, lr}
 800e542:	2400      	movs	r4, #0
 800e544:	b084      	sub	sp, #16
 800e546:	9402      	str	r4, [sp, #8]
 800e548:	9401      	str	r4, [sp, #4]
 800e54a:	9400      	str	r4, [sp, #0]
 800e54c:	2300      	movs	r3, #0
 800e54e:	22a0      	movs	r2, #160	; 0xa0
 800e550:	490b      	ldr	r1, [pc, #44]	; (800e580 <vTaskStartScheduler+0x40>)
 800e552:	480c      	ldr	r0, [pc, #48]	; (800e584 <vTaskStartScheduler+0x44>)
 800e554:	f7ff fe58 	bl	800e208 <xTaskGenericCreate.part.5>
		if( xReturn == pdPASS )
 800e558:	2801      	cmp	r0, #1
 800e55a:	d003      	beq.n	800e564 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800e55c:	2800      	cmp	r0, #0
 800e55e:	d10d      	bne.n	800e57c <vTaskStartScheduler+0x3c>
 800e560:	b672      	cpsid	i
 800e562:	e7fe      	b.n	800e562 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800e564:	f000 fcc0 	bl	800eee8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e568:	2801      	cmp	r0, #1
 800e56a:	d1f7      	bne.n	800e55c <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800e56c:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800e56e:	4b06      	ldr	r3, [pc, #24]	; (800e588 <vTaskStartScheduler+0x48>)
 800e570:	6798      	str	r0, [r3, #120]	; 0x78
		xTickCount = ( TickType_t ) 0U;
 800e572:	609c      	str	r4, [r3, #8]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e574:	f7f9 ff10 	bl	8008398 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800e578:	f000 fe66 	bl	800f248 <xPortStartScheduler>
}
 800e57c:	b004      	add	sp, #16
 800e57e:	bd10      	pop	{r4, pc}
 800e580:	0801a2fc 	.word	0x0801a2fc
 800e584:	0800e7d1 	.word	0x0800e7d1
 800e588:	20002238 	.word	0x20002238

0800e58c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e58c:	4a02      	ldr	r2, [pc, #8]	; (800e598 <vTaskSuspendAll+0xc>)
 800e58e:	6913      	ldr	r3, [r2, #16]
 800e590:	3301      	adds	r3, #1
 800e592:	6113      	str	r3, [r2, #16]
}
 800e594:	4770      	bx	lr
 800e596:	46c0      	nop			; (mov r8, r8)
 800e598:	200022b8 	.word	0x200022b8

0800e59c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e59c:	4b01      	ldr	r3, [pc, #4]	; (800e5a4 <xTaskGetTickCount+0x8>)
 800e59e:	6898      	ldr	r0, [r3, #8]
}
 800e5a0:	4770      	bx	lr
 800e5a2:	46c0      	nop			; (mov r8, r8)
 800e5a4:	20002238 	.word	0x20002238

0800e5a8 <xTaskGetTickCountFromISR>:
 800e5a8:	4b01      	ldr	r3, [pc, #4]	; (800e5b0 <xTaskGetTickCountFromISR+0x8>)
 800e5aa:	6898      	ldr	r0, [r3, #8]
 800e5ac:	4770      	bx	lr
 800e5ae:	46c0      	nop			; (mov r8, r8)
 800e5b0:	20002238 	.word	0x20002238

0800e5b4 <xTaskIncrementTick>:
{
 800e5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b6:	4645      	mov	r5, r8
 800e5b8:	46de      	mov	lr, fp
 800e5ba:	4657      	mov	r7, sl
 800e5bc:	464e      	mov	r6, r9
 800e5be:	b5e0      	push	{r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5c0:	4d3e      	ldr	r5, [pc, #248]	; (800e6bc <xTaskIncrementTick+0x108>)
 800e5c2:	692b      	ldr	r3, [r5, #16]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d119      	bne.n	800e5fc <xTaskIncrementTick+0x48>
		++xTickCount;
 800e5c8:	4c3d      	ldr	r4, [pc, #244]	; (800e6c0 <xTaskIncrementTick+0x10c>)
 800e5ca:	68a3      	ldr	r3, [r4, #8]
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	60a3      	str	r3, [r4, #8]
			const TickType_t xConstTickCount = xTickCount;
 800e5d0:	68a3      	ldr	r3, [r4, #8]
 800e5d2:	469a      	mov	sl, r3
			if( xConstTickCount == ( TickType_t ) 0U )
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d020      	beq.n	800e61a <xTaskIncrementTick+0x66>
 800e5d8:	4f3a      	ldr	r7, [pc, #232]	; (800e6c4 <xTaskIncrementTick+0x110>)
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e5da:	683b      	ldr	r3, [r7, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e5dc:	2600      	movs	r6, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e5de:	4553      	cmp	r3, sl
 800e5e0:	d921      	bls.n	800e626 <xTaskIncrementTick+0x72>
 800e5e2:	4b39      	ldr	r3, [pc, #228]	; (800e6c8 <xTaskIncrementTick+0x114>)
 800e5e4:	4699      	mov	r9, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e5e6:	6863      	ldr	r3, [r4, #4]
 800e5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ea:	0093      	lsls	r3, r2, #2
 800e5ec:	189b      	adds	r3, r3, r2
 800e5ee:	464a      	mov	r2, r9
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	58d3      	ldr	r3, [r2, r3]
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d905      	bls.n	800e604 <xTaskIncrementTick+0x50>
				xSwitchRequired = pdTRUE;
 800e5f8:	2601      	movs	r6, #1
 800e5fa:	e003      	b.n	800e604 <xTaskIncrementTick+0x50>
BaseType_t xSwitchRequired = pdFALSE;
 800e5fc:	2600      	movs	r6, #0
		++uxPendedTicks;
 800e5fe:	69ab      	ldr	r3, [r5, #24]
 800e600:	3301      	adds	r3, #1
 800e602:	61ab      	str	r3, [r5, #24]
		if( xYieldPending != pdFALSE )
 800e604:	686b      	ldr	r3, [r5, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d000      	beq.n	800e60c <xTaskIncrementTick+0x58>
			xSwitchRequired = pdTRUE;
 800e60a:	2601      	movs	r6, #1
}
 800e60c:	0030      	movs	r0, r6
 800e60e:	bc3c      	pop	{r2, r3, r4, r5}
 800e610:	4690      	mov	r8, r2
 800e612:	4699      	mov	r9, r3
 800e614:	46a2      	mov	sl, r4
 800e616:	46ab      	mov	fp, r5
 800e618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				taskSWITCH_DELAYED_LISTS();
 800e61a:	6823      	ldr	r3, [r4, #0]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d039      	beq.n	800e696 <xTaskIncrementTick+0xe2>
 800e622:	b672      	cpsid	i
 800e624:	e7fe      	b.n	800e624 <xTaskIncrementTick+0x70>
 800e626:	4b28      	ldr	r3, [pc, #160]	; (800e6c8 <xTaskIncrementTick+0x114>)
 800e628:	4699      	mov	r9, r3
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e62a:	6823      	ldr	r3, [r4, #0]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d02c      	beq.n	800e68c <xTaskIncrementTick+0xd8>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e632:	6823      	ldr	r3, [r4, #0]
 800e634:	68db      	ldr	r3, [r3, #12]
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	4698      	mov	r8, r3
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800e63a:	685b      	ldr	r3, [r3, #4]
						if( xConstTickCount < xItemValue )
 800e63c:	459a      	cmp	sl, r3
 800e63e:	d328      	bcc.n	800e692 <xTaskIncrementTick+0xde>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e640:	2304      	movs	r3, #4
 800e642:	4443      	add	r3, r8
 800e644:	0018      	movs	r0, r3
 800e646:	469b      	mov	fp, r3
 800e648:	f7ff f9ea 	bl	800da20 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e64c:	4643      	mov	r3, r8
 800e64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e650:	2b00      	cmp	r3, #0
 800e652:	d003      	beq.n	800e65c <xTaskIncrementTick+0xa8>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e654:	4640      	mov	r0, r8
 800e656:	3018      	adds	r0, #24
 800e658:	f7ff f9e2 	bl	800da20 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e65c:	4643      	mov	r3, r8
 800e65e:	682a      	ldr	r2, [r5, #0]
 800e660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e662:	4293      	cmp	r3, r2
 800e664:	d900      	bls.n	800e668 <xTaskIncrementTick+0xb4>
 800e666:	602b      	str	r3, [r5, #0]
 800e668:	0098      	lsls	r0, r3, #2
 800e66a:	18c0      	adds	r0, r0, r3
 800e66c:	0080      	lsls	r0, r0, #2
 800e66e:	4448      	add	r0, r9
 800e670:	4659      	mov	r1, fp
 800e672:	f7ff f9b1 	bl	800d9d8 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e676:	4642      	mov	r2, r8
 800e678:	6863      	ldr	r3, [r4, #4]
 800e67a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e67e:	429a      	cmp	r2, r3
 800e680:	d3d3      	bcc.n	800e62a <xTaskIncrementTick+0x76>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e682:	6823      	ldr	r3, [r4, #0]
								xSwitchRequired = pdTRUE;
 800e684:	2601      	movs	r6, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d1d2      	bne.n	800e632 <xTaskIncrementTick+0x7e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800e68c:	3b01      	subs	r3, #1
 800e68e:	603b      	str	r3, [r7, #0]
						break;
 800e690:	e7a9      	b.n	800e5e6 <xTaskIncrementTick+0x32>
							xNextTaskUnblockTime = xItemValue;
 800e692:	603b      	str	r3, [r7, #0]
							break;
 800e694:	e7a7      	b.n	800e5e6 <xTaskIncrementTick+0x32>
				taskSWITCH_DELAYED_LISTS();
 800e696:	6823      	ldr	r3, [r4, #0]
 800e698:	68e2      	ldr	r2, [r4, #12]
 800e69a:	6022      	str	r2, [r4, #0]
 800e69c:	60e3      	str	r3, [r4, #12]
 800e69e:	696b      	ldr	r3, [r5, #20]
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	616b      	str	r3, [r5, #20]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6a4:	6823      	ldr	r3, [r4, #0]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d103      	bne.n	800e6b4 <xTaskIncrementTick+0x100>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e6ac:	4f05      	ldr	r7, [pc, #20]	; (800e6c4 <xTaskIncrementTick+0x110>)
 800e6ae:	3b01      	subs	r3, #1
 800e6b0:	603b      	str	r3, [r7, #0]
 800e6b2:	e792      	b.n	800e5da <xTaskIncrementTick+0x26>
 800e6b4:	f7ff fd7e 	bl	800e1b4 <prvResetNextTaskUnblockTime.part.2>
 800e6b8:	e78e      	b.n	800e5d8 <xTaskIncrementTick+0x24>
 800e6ba:	46c0      	nop			; (mov r8, r8)
 800e6bc:	200022b8 	.word	0x200022b8
 800e6c0:	20002238 	.word	0x20002238
 800e6c4:	200000c0 	.word	0x200000c0
 800e6c8:	200022d4 	.word	0x200022d4

0800e6cc <xTaskResumeAll>:
{
 800e6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ce:	46ce      	mov	lr, r9
 800e6d0:	4647      	mov	r7, r8
	configASSERT( uxSchedulerSuspended );
 800e6d2:	4c2b      	ldr	r4, [pc, #172]	; (800e780 <xTaskResumeAll+0xb4>)
{
 800e6d4:	b580      	push	{r7, lr}
	configASSERT( uxSchedulerSuspended );
 800e6d6:	6923      	ldr	r3, [r4, #16]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d101      	bne.n	800e6e0 <xTaskResumeAll+0x14>
 800e6dc:	b672      	cpsid	i
 800e6de:	e7fe      	b.n	800e6de <xTaskResumeAll+0x12>
	taskENTER_CRITICAL();
 800e6e0:	f000 fde8 	bl	800f2b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e6e4:	6923      	ldr	r3, [r4, #16]
 800e6e6:	3b01      	subs	r3, #1
 800e6e8:	6123      	str	r3, [r4, #16]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6ea:	6923      	ldr	r3, [r4, #16]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d12d      	bne.n	800e74c <xTaskResumeAll+0x80>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e6f0:	4d24      	ldr	r5, [pc, #144]	; (800e784 <xTaskResumeAll+0xb8>)
 800e6f2:	692b      	ldr	r3, [r5, #16]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d029      	beq.n	800e74c <xTaskResumeAll+0x80>
					prvAddTaskToReadyList( pxTCB );
 800e6f8:	4b23      	ldr	r3, [pc, #140]	; (800e788 <xTaskResumeAll+0xbc>)
 800e6fa:	4699      	mov	r9, r3
						xYieldPending = pdTRUE;
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	4698      	mov	r8, r3
 800e700:	e01a      	b.n	800e738 <xTaskResumeAll+0x6c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e702:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800e704:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e706:	0030      	movs	r0, r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e708:	1d37      	adds	r7, r6, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e70a:	3018      	adds	r0, #24
 800e70c:	f7ff f988 	bl	800da20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e710:	0038      	movs	r0, r7
 800e712:	f7ff f985 	bl	800da20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e716:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e718:	6822      	ldr	r2, [r4, #0]
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d900      	bls.n	800e720 <xTaskResumeAll+0x54>
 800e71e:	6023      	str	r3, [r4, #0]
 800e720:	0098      	lsls	r0, r3, #2
 800e722:	18c0      	adds	r0, r0, r3
 800e724:	0080      	lsls	r0, r0, #2
 800e726:	4448      	add	r0, r9
 800e728:	0039      	movs	r1, r7
 800e72a:	f7ff f955 	bl	800d9d8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e72e:	686b      	ldr	r3, [r5, #4]
 800e730:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800e732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e734:	429a      	cmp	r2, r3
 800e736:	d211      	bcs.n	800e75c <xTaskResumeAll+0x90>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e738:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1e1      	bne.n	800e702 <xTaskResumeAll+0x36>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e73e:	69a3      	ldr	r3, [r4, #24]
							xYieldPending = pdTRUE;
 800e740:	2501      	movs	r5, #1
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e742:	2b00      	cmp	r3, #0
 800e744:	d110      	bne.n	800e768 <xTaskResumeAll+0x9c>
				if( xYieldPending == pdTRUE )
 800e746:	6864      	ldr	r4, [r4, #4]
 800e748:	2c01      	cmp	r4, #1
 800e74a:	d00a      	beq.n	800e762 <xTaskResumeAll+0x96>
BaseType_t xAlreadyYielded = pdFALSE;
 800e74c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e74e:	f000 fdbd 	bl	800f2cc <vPortExitCritical>
}
 800e752:	0020      	movs	r0, r4
 800e754:	bc0c      	pop	{r2, r3}
 800e756:	4690      	mov	r8, r2
 800e758:	4699      	mov	r9, r3
 800e75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xYieldPending = pdTRUE;
 800e75c:	4643      	mov	r3, r8
 800e75e:	6063      	str	r3, [r4, #4]
 800e760:	e7ea      	b.n	800e738 <xTaskResumeAll+0x6c>
					taskYIELD_IF_USING_PREEMPTION();
 800e762:	f000 fd9b 	bl	800f29c <vPortYield>
 800e766:	e7f2      	b.n	800e74e <xTaskResumeAll+0x82>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e768:	69a3      	ldr	r3, [r4, #24]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d0eb      	beq.n	800e746 <xTaskResumeAll+0x7a>
						if( xTaskIncrementTick() != pdFALSE )
 800e76e:	f7ff ff21 	bl	800e5b4 <xTaskIncrementTick>
 800e772:	2800      	cmp	r0, #0
 800e774:	d000      	beq.n	800e778 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
 800e776:	6065      	str	r5, [r4, #4]
						--uxPendedTicks;
 800e778:	69a3      	ldr	r3, [r4, #24]
 800e77a:	3b01      	subs	r3, #1
 800e77c:	61a3      	str	r3, [r4, #24]
 800e77e:	e7f3      	b.n	800e768 <xTaskResumeAll+0x9c>
 800e780:	200022b8 	.word	0x200022b8
 800e784:	20002238 	.word	0x20002238
 800e788:	200022d4 	.word	0x200022d4

0800e78c <vTaskDelay>:
	{
 800e78c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e78e:	2800      	cmp	r0, #0
 800e790:	d016      	beq.n	800e7c0 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800e792:	4b0d      	ldr	r3, [pc, #52]	; (800e7c8 <vTaskDelay+0x3c>)
 800e794:	691a      	ldr	r2, [r3, #16]
 800e796:	2a00      	cmp	r2, #0
 800e798:	d001      	beq.n	800e79e <vTaskDelay+0x12>
 800e79a:	b672      	cpsid	i
 800e79c:	e7fe      	b.n	800e79c <vTaskDelay+0x10>
	++uxSchedulerSuspended;
 800e79e:	691a      	ldr	r2, [r3, #16]
 800e7a0:	3201      	adds	r2, #1
 800e7a2:	611a      	str	r2, [r3, #16]
				xTimeToWake = xTickCount + xTicksToDelay;
 800e7a4:	4b09      	ldr	r3, [pc, #36]	; (800e7cc <vTaskDelay+0x40>)
 800e7a6:	689c      	ldr	r4, [r3, #8]
 800e7a8:	1824      	adds	r4, r4, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e7aa:	6858      	ldr	r0, [r3, #4]
 800e7ac:	3004      	adds	r0, #4
 800e7ae:	f7ff f937 	bl	800da20 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e7b2:	0020      	movs	r0, r4
 800e7b4:	f7ff fd0a 	bl	800e1cc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e7b8:	f7ff ff88 	bl	800e6cc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	d101      	bne.n	800e7c4 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800e7c0:	f000 fd6c 	bl	800f29c <vPortYield>
	}
 800e7c4:	bd10      	pop	{r4, pc}
 800e7c6:	46c0      	nop			; (mov r8, r8)
 800e7c8:	200022b8 	.word	0x200022b8
 800e7cc:	20002238 	.word	0x20002238

0800e7d0 <prvIdleTask>:
{
 800e7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d2:	4e15      	ldr	r6, [pc, #84]	; (800e828 <prvIdleTask+0x58>)
 800e7d4:	4c15      	ldr	r4, [pc, #84]	; (800e82c <prvIdleTask+0x5c>)
 800e7d6:	4f16      	ldr	r7, [pc, #88]	; (800e830 <prvIdleTask+0x60>)
 800e7d8:	e007      	b.n	800e7ea <prvIdleTask+0x1a>
	++uxSchedulerSuspended;
 800e7da:	6923      	ldr	r3, [r4, #16]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e7dc:	6d35      	ldr	r5, [r6, #80]	; 0x50
	++uxSchedulerSuspended;
 800e7de:	3301      	adds	r3, #1
 800e7e0:	6123      	str	r3, [r4, #16]
			( void ) xTaskResumeAll();
 800e7e2:	f7ff ff73 	bl	800e6cc <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800e7e6:	2d00      	cmp	r5, #0
 800e7e8:	d108      	bne.n	800e7fc <prvIdleTask+0x2c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e7ea:	68e3      	ldr	r3, [r4, #12]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d1f4      	bne.n	800e7da <prvIdleTask+0xa>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d9f9      	bls.n	800e7ea <prvIdleTask+0x1a>
				taskYIELD();
 800e7f6:	f000 fd51 	bl	800f29c <vPortYield>
 800e7fa:	e7f6      	b.n	800e7ea <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
 800e7fc:	f000 fd5a 	bl	800f2b4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e800:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800e802:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e804:	1d28      	adds	r0, r5, #4
 800e806:	f7ff f90b 	bl	800da20 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e80a:	6933      	ldr	r3, [r6, #16]
 800e80c:	3b01      	subs	r3, #1
 800e80e:	6133      	str	r3, [r6, #16]
					--uxTasksDeleted;
 800e810:	68e3      	ldr	r3, [r4, #12]
 800e812:	3b01      	subs	r3, #1
 800e814:	60e3      	str	r3, [r4, #12]
				taskEXIT_CRITICAL();
 800e816:	f000 fd59 	bl	800f2cc <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800e81a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e81c:	f000 fe44 	bl	800f4a8 <vPortFree>
		vPortFree( pxTCB );
 800e820:	0028      	movs	r0, r5
 800e822:	f000 fe41 	bl	800f4a8 <vPortFree>
 800e826:	e7e0      	b.n	800e7ea <prvIdleTask+0x1a>
 800e828:	20002238 	.word	0x20002238
 800e82c:	200022b8 	.word	0x200022b8
 800e830:	200022d4 	.word	0x200022d4

0800e834 <uxTaskGetSystemState>:
	{
 800e834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e836:	4647      	mov	r7, r8
 800e838:	46ce      	mov	lr, r9
 800e83a:	4690      	mov	r8, r2
	++uxSchedulerSuspended;
 800e83c:	4a33      	ldr	r2, [pc, #204]	; (800e90c <uxTaskGetSystemState+0xd8>)
	{
 800e83e:	b580      	push	{r7, lr}
	++uxSchedulerSuspended;
 800e840:	6913      	ldr	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e842:	4f33      	ldr	r7, [pc, #204]	; (800e910 <uxTaskGetSystemState+0xdc>)
	++uxSchedulerSuspended;
 800e844:	3301      	adds	r3, #1
 800e846:	6113      	str	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e848:	693b      	ldr	r3, [r7, #16]
	{
 800e84a:	0006      	movs	r6, r0
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e84c:	2500      	movs	r5, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e84e:	428b      	cmp	r3, r1
 800e850:	d82c      	bhi.n	800e8ac <uxTaskGetSystemState+0x78>
 800e852:	238c      	movs	r3, #140	; 0x8c
 800e854:	425b      	negs	r3, r3
 800e856:	4699      	mov	r9, r3
 800e858:	4c2e      	ldr	r4, [pc, #184]	; (800e914 <uxTaskGetSystemState+0xe0>)
 800e85a:	2300      	movs	r3, #0
 800e85c:	44a1      	add	r9, r4
 800e85e:	e002      	b.n	800e866 <uxTaskGetSystemState+0x32>
 800e860:	3c14      	subs	r4, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e862:	454c      	cmp	r4, r9
 800e864:	d00d      	beq.n	800e882 <uxTaskGetSystemState+0x4e>
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e866:	6822      	ldr	r2, [r4, #0]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e868:	18f0      	adds	r0, r6, r3
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e86a:	2a00      	cmp	r2, #0
 800e86c:	d0f8      	beq.n	800e860 <uxTaskGetSystemState+0x2c>
 800e86e:	0021      	movs	r1, r4
 800e870:	2201      	movs	r2, #1
 800e872:	f7ff fc4b 	bl	800e10c <prvListTaskWithinSingleList.part.1>
 800e876:	182d      	adds	r5, r5, r0
 800e878:	016b      	lsls	r3, r5, #5
 800e87a:	3c14      	subs	r4, #20
 800e87c:	18f0      	adds	r0, r6, r3
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e87e:	454c      	cmp	r4, r9
 800e880:	d1f1      	bne.n	800e866 <uxTaskGetSystemState+0x32>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e882:	6839      	ldr	r1, [r7, #0]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e884:	680b      	ldr	r3, [r1, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d121      	bne.n	800e8ce <uxTaskGetSystemState+0x9a>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e88a:	68f9      	ldr	r1, [r7, #12]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e88c:	680b      	ldr	r3, [r1, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d127      	bne.n	800e8e2 <uxTaskGetSystemState+0xae>
 800e892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e894:	2b00      	cmp	r3, #0
 800e896:	d12d      	bne.n	800e8f4 <uxTaskGetSystemState+0xc0>
 800e898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d10d      	bne.n	800e8ba <uxTaskGetSystemState+0x86>
					if( pulTotalRunTime != NULL )
 800e89e:	4643      	mov	r3, r8
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d003      	beq.n	800e8ac <uxTaskGetSystemState+0x78>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e8a4:	f7f9 fd88 	bl	80083b8 <ulMainGetRunTimeCounterValue>
 800e8a8:	4643      	mov	r3, r8
 800e8aa:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800e8ac:	f7ff ff0e 	bl	800e6cc <xTaskResumeAll>
	}
 800e8b0:	0028      	movs	r0, r5
 800e8b2:	bc0c      	pop	{r2, r3}
 800e8b4:	4690      	mov	r8, r2
 800e8b6:	4699      	mov	r9, r3
 800e8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8ba:	0039      	movs	r1, r7
 800e8bc:	2203      	movs	r2, #3
 800e8be:	3164      	adds	r1, #100	; 0x64
 800e8c0:	f7ff fc24 	bl	800e10c <prvListTaskWithinSingleList.part.1>
					if( pulTotalRunTime != NULL )
 800e8c4:	4643      	mov	r3, r8
 800e8c6:	182d      	adds	r5, r5, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d1eb      	bne.n	800e8a4 <uxTaskGetSystemState+0x70>
 800e8cc:	e7ee      	b.n	800e8ac <uxTaskGetSystemState+0x78>
 800e8ce:	2202      	movs	r2, #2
 800e8d0:	f7ff fc1c 	bl	800e10c <prvListTaskWithinSingleList.part.1>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e8d4:	68f9      	ldr	r1, [r7, #12]
 800e8d6:	182d      	adds	r5, r5, r0
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e8d8:	680b      	ldr	r3, [r1, #0]
 800e8da:	0168      	lsls	r0, r5, #5
 800e8dc:	1830      	adds	r0, r6, r0
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d0d7      	beq.n	800e892 <uxTaskGetSystemState+0x5e>
 800e8e2:	2202      	movs	r2, #2
 800e8e4:	f7ff fc12 	bl	800e10c <prvListTaskWithinSingleList.part.1>
 800e8e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8ea:	182d      	adds	r5, r5, r0
 800e8ec:	0168      	lsls	r0, r5, #5
 800e8ee:	1830      	adds	r0, r6, r0
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d0d1      	beq.n	800e898 <uxTaskGetSystemState+0x64>
 800e8f4:	0039      	movs	r1, r7
 800e8f6:	2204      	movs	r2, #4
 800e8f8:	3150      	adds	r1, #80	; 0x50
 800e8fa:	f7ff fc07 	bl	800e10c <prvListTaskWithinSingleList.part.1>
 800e8fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e900:	182d      	adds	r5, r5, r0
 800e902:	0168      	lsls	r0, r5, #5
 800e904:	1830      	adds	r0, r6, r0
 800e906:	2b00      	cmp	r3, #0
 800e908:	d0c9      	beq.n	800e89e <uxTaskGetSystemState+0x6a>
 800e90a:	e7d6      	b.n	800e8ba <uxTaskGetSystemState+0x86>
 800e90c:	200022b8 	.word	0x200022b8
 800e910:	20002238 	.word	0x20002238
 800e914:	2000234c 	.word	0x2000234c

0800e918 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e918:	4b05      	ldr	r3, [pc, #20]	; (800e930 <vTaskSwitchContext+0x18>)
{
 800e91a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e91c:	691a      	ldr	r2, [r3, #16]
 800e91e:	2a00      	cmp	r2, #0
 800e920:	d002      	beq.n	800e928 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800e922:	2201      	movs	r2, #1
 800e924:	605a      	str	r2, [r3, #4]
}
 800e926:	bd10      	pop	{r4, pc}
 800e928:	f7ff fd3c 	bl	800e3a4 <vTaskSwitchContext.part.6>
 800e92c:	e7fb      	b.n	800e926 <vTaskSwitchContext+0xe>
 800e92e:	46c0      	nop			; (mov r8, r8)
 800e930:	200022b8 	.word	0x200022b8

0800e934 <vTaskPlaceOnEventList>:
{
 800e934:	b570      	push	{r4, r5, r6, lr}
 800e936:	000d      	movs	r5, r1
	configASSERT( pxEventList );
 800e938:	2800      	cmp	r0, #0
 800e93a:	d00f      	beq.n	800e95c <vTaskPlaceOnEventList+0x28>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e93c:	4c0c      	ldr	r4, [pc, #48]	; (800e970 <vTaskPlaceOnEventList+0x3c>)
 800e93e:	6861      	ldr	r1, [r4, #4]
 800e940:	3118      	adds	r1, #24
 800e942:	f7ff f855 	bl	800d9f0 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e946:	6860      	ldr	r0, [r4, #4]
 800e948:	3004      	adds	r0, #4
 800e94a:	f7ff f869 	bl	800da20 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800e94e:	1c6b      	adds	r3, r5, #1
 800e950:	d006      	beq.n	800e960 <vTaskPlaceOnEventList+0x2c>
			xTimeToWake = xTickCount + xTicksToWait;
 800e952:	68a0      	ldr	r0, [r4, #8]
 800e954:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e956:	f7ff fc39 	bl	800e1cc <prvAddCurrentTaskToDelayedList>
}
 800e95a:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
 800e95c:	b672      	cpsid	i
 800e95e:	e7fe      	b.n	800e95e <vTaskPlaceOnEventList+0x2a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e960:	0020      	movs	r0, r4
 800e962:	6861      	ldr	r1, [r4, #4]
 800e964:	3064      	adds	r0, #100	; 0x64
 800e966:	3104      	adds	r1, #4
 800e968:	f7ff f836 	bl	800d9d8 <vListInsertEnd>
 800e96c:	e7f5      	b.n	800e95a <vTaskPlaceOnEventList+0x26>
 800e96e:	46c0      	nop			; (mov r8, r8)
 800e970:	20002238 	.word	0x20002238

0800e974 <vTaskPlaceOnEventListRestricted>:
	{
 800e974:	b570      	push	{r4, r5, r6, lr}
 800e976:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800e978:	2800      	cmp	r0, #0
 800e97a:	d101      	bne.n	800e980 <vTaskPlaceOnEventListRestricted+0xc>
 800e97c:	b672      	cpsid	i
 800e97e:	e7fe      	b.n	800e97e <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e980:	4c06      	ldr	r4, [pc, #24]	; (800e99c <vTaskPlaceOnEventListRestricted+0x28>)
 800e982:	6861      	ldr	r1, [r4, #4]
 800e984:	3118      	adds	r1, #24
 800e986:	f7ff f827 	bl	800d9d8 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e98a:	6860      	ldr	r0, [r4, #4]
 800e98c:	3004      	adds	r0, #4
 800e98e:	f7ff f847 	bl	800da20 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800e992:	68a0      	ldr	r0, [r4, #8]
 800e994:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e996:	f7ff fc19 	bl	800e1cc <prvAddCurrentTaskToDelayedList>
	}
 800e99a:	bd70      	pop	{r4, r5, r6, pc}
 800e99c:	20002238 	.word	0x20002238

0800e9a0 <xTaskRemoveFromEventList>:
{
 800e9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e9a2:	68c3      	ldr	r3, [r0, #12]
 800e9a4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e9a6:	2c00      	cmp	r4, #0
 800e9a8:	d024      	beq.n	800e9f4 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e9aa:	0027      	movs	r7, r4
 800e9ac:	3718      	adds	r7, #24
 800e9ae:	0038      	movs	r0, r7
 800e9b0:	f7ff f836 	bl	800da20 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9b4:	4d14      	ldr	r5, [pc, #80]	; (800ea08 <xTaskRemoveFromEventList+0x68>)
 800e9b6:	692b      	ldr	r3, [r5, #16]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d11d      	bne.n	800e9f8 <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800e9bc:	1d26      	adds	r6, r4, #4
 800e9be:	0030      	movs	r0, r6
 800e9c0:	f7ff f82e 	bl	800da20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e9c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e9c6:	682a      	ldr	r2, [r5, #0]
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d900      	bls.n	800e9ce <xTaskRemoveFromEventList+0x2e>
 800e9cc:	602b      	str	r3, [r5, #0]
 800e9ce:	0098      	lsls	r0, r3, #2
 800e9d0:	18c0      	adds	r0, r0, r3
 800e9d2:	4b0e      	ldr	r3, [pc, #56]	; (800ea0c <xTaskRemoveFromEventList+0x6c>)
 800e9d4:	0080      	lsls	r0, r0, #2
 800e9d6:	0031      	movs	r1, r6
 800e9d8:	18c0      	adds	r0, r0, r3
 800e9da:	f7fe fffd 	bl	800d9d8 <vListInsertEnd>
 800e9de:	4e0c      	ldr	r6, [pc, #48]	; (800ea10 <xTaskRemoveFromEventList+0x70>)
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e9e0:	6873      	ldr	r3, [r6, #4]
 800e9e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800e9e6:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d902      	bls.n	800e9f2 <xTaskRemoveFromEventList+0x52>
		xYieldPending = pdTRUE;
 800e9ec:	2301      	movs	r3, #1
		xReturn = pdTRUE;
 800e9ee:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800e9f0:	606b      	str	r3, [r5, #4]
}
 800e9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxUnblockedTCB );
 800e9f4:	b672      	cpsid	i
 800e9f6:	e7fe      	b.n	800e9f6 <xTaskRemoveFromEventList+0x56>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e9f8:	4e05      	ldr	r6, [pc, #20]	; (800ea10 <xTaskRemoveFromEventList+0x70>)
 800e9fa:	0039      	movs	r1, r7
 800e9fc:	0030      	movs	r0, r6
 800e9fe:	303c      	adds	r0, #60	; 0x3c
 800ea00:	f7fe ffea 	bl	800d9d8 <vListInsertEnd>
 800ea04:	e7ec      	b.n	800e9e0 <xTaskRemoveFromEventList+0x40>
 800ea06:	46c0      	nop			; (mov r8, r8)
 800ea08:	200022b8 	.word	0x200022b8
 800ea0c:	200022d4 	.word	0x200022d4
 800ea10:	20002238 	.word	0x20002238

0800ea14 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800ea14:	2800      	cmp	r0, #0
 800ea16:	d006      	beq.n	800ea26 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea18:	4b04      	ldr	r3, [pc, #16]	; (800ea2c <vTaskSetTimeOutState+0x18>)
 800ea1a:	695b      	ldr	r3, [r3, #20]
 800ea1c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea1e:	4b04      	ldr	r3, [pc, #16]	; (800ea30 <vTaskSetTimeOutState+0x1c>)
 800ea20:	689b      	ldr	r3, [r3, #8]
 800ea22:	6043      	str	r3, [r0, #4]
}
 800ea24:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800ea26:	b672      	cpsid	i
 800ea28:	e7fe      	b.n	800ea28 <vTaskSetTimeOutState+0x14>
 800ea2a:	46c0      	nop			; (mov r8, r8)
 800ea2c:	200022b8 	.word	0x200022b8
 800ea30:	20002238 	.word	0x20002238

0800ea34 <xTaskCheckForTimeOut>:
{
 800ea34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea36:	0004      	movs	r4, r0
 800ea38:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	d025      	beq.n	800ea8a <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTicksToWait );
 800ea3e:	2900      	cmp	r1, #0
 800ea40:	d021      	beq.n	800ea86 <xTaskCheckForTimeOut+0x52>
	taskENTER_CRITICAL();
 800ea42:	f000 fc37 	bl	800f2b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ea46:	4f13      	ldr	r7, [pc, #76]	; (800ea94 <xTaskCheckForTimeOut+0x60>)
			if( *pxTicksToWait == portMAX_DELAY )
 800ea48:	6833      	ldr	r3, [r6, #0]
		const TickType_t xConstTickCount = xTickCount;
 800ea4a:	68b9      	ldr	r1, [r7, #8]
			if( *pxTicksToWait == portMAX_DELAY )
 800ea4c:	1c5a      	adds	r2, r3, #1
 800ea4e:	d01e      	beq.n	800ea8e <xTaskCheckForTimeOut+0x5a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea50:	4a11      	ldr	r2, [pc, #68]	; (800ea98 <xTaskCheckForTimeOut+0x64>)
 800ea52:	6825      	ldr	r5, [r4, #0]
 800ea54:	6950      	ldr	r0, [r2, #20]
 800ea56:	4694      	mov	ip, r2
 800ea58:	6862      	ldr	r2, [r4, #4]
 800ea5a:	4285      	cmp	r5, r0
 800ea5c:	d002      	beq.n	800ea64 <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
 800ea5e:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea60:	4291      	cmp	r1, r2
 800ea62:	d20c      	bcs.n	800ea7e <xTaskCheckForTimeOut+0x4a>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ea64:	1a88      	subs	r0, r1, r2
			xReturn = pdTRUE;
 800ea66:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ea68:	4283      	cmp	r3, r0
 800ea6a:	d908      	bls.n	800ea7e <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800ea6c:	1a5b      	subs	r3, r3, r1
 800ea6e:	189b      	adds	r3, r3, r2
 800ea70:	6033      	str	r3, [r6, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea72:	4663      	mov	r3, ip
			xReturn = pdFALSE;
 800ea74:	2500      	movs	r5, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea76:	695b      	ldr	r3, [r3, #20]
 800ea78:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800ea7e:	f000 fc25 	bl	800f2cc <vPortExitCritical>
}
 800ea82:	0028      	movs	r0, r5
 800ea84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
 800ea86:	b672      	cpsid	i
 800ea88:	e7fe      	b.n	800ea88 <xTaskCheckForTimeOut+0x54>
	configASSERT( pxTimeOut );
 800ea8a:	b672      	cpsid	i
 800ea8c:	e7fe      	b.n	800ea8c <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
 800ea8e:	2500      	movs	r5, #0
 800ea90:	e7f5      	b.n	800ea7e <xTaskCheckForTimeOut+0x4a>
 800ea92:	46c0      	nop			; (mov r8, r8)
 800ea94:	20002238 	.word	0x20002238
 800ea98:	200022b8 	.word	0x200022b8

0800ea9c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	4b01      	ldr	r3, [pc, #4]	; (800eaa4 <vTaskMissedYield+0x8>)
 800eaa0:	605a      	str	r2, [r3, #4]
}
 800eaa2:	4770      	bx	lr
 800eaa4:	200022b8 	.word	0x200022b8

0800eaa8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800eaa8:	4b05      	ldr	r3, [pc, #20]	; (800eac0 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eaaa:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800eaac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d004      	beq.n	800eabc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eab2:	4b04      	ldr	r3, [pc, #16]	; (800eac4 <xTaskGetSchedulerState+0x1c>)
 800eab4:	6918      	ldr	r0, [r3, #16]
				xReturn = taskSCHEDULER_SUSPENDED;
 800eab6:	4243      	negs	r3, r0
 800eab8:	4158      	adcs	r0, r3
 800eaba:	0040      	lsls	r0, r0, #1
	}
 800eabc:	4770      	bx	lr
 800eabe:	46c0      	nop			; (mov r8, r8)
 800eac0:	20002238 	.word	0x20002238
 800eac4:	200022b8 	.word	0x200022b8

0800eac8 <vTaskPriorityInherit>:
	{
 800eac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaca:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800eacc:	d018      	beq.n	800eb00 <vTaskPriorityInherit+0x38>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eace:	4d17      	ldr	r5, [pc, #92]	; (800eb2c <vTaskPriorityInherit+0x64>)
 800ead0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ead2:	686b      	ldr	r3, [r5, #4]
 800ead4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d212      	bcs.n	800eb00 <vTaskPriorityInherit+0x38>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eada:	6983      	ldr	r3, [r0, #24]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	db04      	blt.n	800eaea <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eae0:	686b      	ldr	r3, [r5, #4]
 800eae2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800eae4:	2307      	movs	r3, #7
 800eae6:	1a5b      	subs	r3, r3, r1
 800eae8:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800eaea:	0093      	lsls	r3, r2, #2
 800eaec:	189b      	adds	r3, r3, r2
 800eaee:	4e10      	ldr	r6, [pc, #64]	; (800eb30 <vTaskPriorityInherit+0x68>)
 800eaf0:	009b      	lsls	r3, r3, #2
 800eaf2:	6962      	ldr	r2, [r4, #20]
 800eaf4:	18f3      	adds	r3, r6, r3
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d003      	beq.n	800eb02 <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eafa:	686b      	ldr	r3, [r5, #4]
 800eafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eafe:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800eb00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eb02:	1d27      	adds	r7, r4, #4
 800eb04:	0038      	movs	r0, r7
 800eb06:	f7fe ff8b 	bl	800da20 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb0a:	686b      	ldr	r3, [r5, #4]
					prvAddTaskToReadyList( pxTCB );
 800eb0c:	4a09      	ldr	r2, [pc, #36]	; (800eb34 <vTaskPriorityInherit+0x6c>)
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800eb10:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb12:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800eb14:	428b      	cmp	r3, r1
 800eb16:	d900      	bls.n	800eb1a <vTaskPriorityInherit+0x52>
 800eb18:	6013      	str	r3, [r2, #0]
 800eb1a:	0098      	lsls	r0, r3, #2
 800eb1c:	18c0      	adds	r0, r0, r3
 800eb1e:	0080      	lsls	r0, r0, #2
 800eb20:	1830      	adds	r0, r6, r0
 800eb22:	0039      	movs	r1, r7
 800eb24:	f7fe ff58 	bl	800d9d8 <vListInsertEnd>
	}
 800eb28:	e7ea      	b.n	800eb00 <vTaskPriorityInherit+0x38>
 800eb2a:	46c0      	nop			; (mov r8, r8)
 800eb2c:	20002238 	.word	0x20002238
 800eb30:	200022d4 	.word	0x200022d4
 800eb34:	200022b8 	.word	0x200022b8

0800eb38 <xTaskPriorityDisinherit>:
	{
 800eb38:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	d005      	beq.n	800eb4a <xTaskPriorityDisinherit+0x12>
			configASSERT( pxTCB == pxCurrentTCB );
 800eb3e:	4b16      	ldr	r3, [pc, #88]	; (800eb98 <xTaskPriorityDisinherit+0x60>)
 800eb40:	685c      	ldr	r4, [r3, #4]
 800eb42:	4284      	cmp	r4, r0
 800eb44:	d003      	beq.n	800eb4e <xTaskPriorityDisinherit+0x16>
 800eb46:	b672      	cpsid	i
 800eb48:	e7fe      	b.n	800eb48 <xTaskPriorityDisinherit+0x10>
	BaseType_t xReturn = pdFALSE;
 800eb4a:	2000      	movs	r0, #0
	}
 800eb4c:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 800eb4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d101      	bne.n	800eb58 <xTaskPriorityDisinherit+0x20>
 800eb54:	b672      	cpsid	i
 800eb56:	e7fe      	b.n	800eb56 <xTaskPriorityDisinherit+0x1e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800eb5a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800eb5c:	3b01      	subs	r3, #1
 800eb5e:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb60:	428a      	cmp	r2, r1
 800eb62:	d0f2      	beq.n	800eb4a <xTaskPriorityDisinherit+0x12>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d1f0      	bne.n	800eb4a <xTaskPriorityDisinherit+0x12>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eb68:	1d25      	adds	r5, r4, #4
 800eb6a:	0028      	movs	r0, r5
 800eb6c:	f7fe ff58 	bl	800da20 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb70:	2207      	movs	r2, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb74:	1ad2      	subs	r2, r2, r3
 800eb76:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800eb78:	4a08      	ldr	r2, [pc, #32]	; (800eb9c <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb7a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800eb7c:	6811      	ldr	r1, [r2, #0]
 800eb7e:	428b      	cmp	r3, r1
 800eb80:	d900      	bls.n	800eb84 <xTaskPriorityDisinherit+0x4c>
 800eb82:	6013      	str	r3, [r2, #0]
 800eb84:	2014      	movs	r0, #20
 800eb86:	4358      	muls	r0, r3
 800eb88:	4b05      	ldr	r3, [pc, #20]	; (800eba0 <xTaskPriorityDisinherit+0x68>)
 800eb8a:	0029      	movs	r1, r5
 800eb8c:	18c0      	adds	r0, r0, r3
 800eb8e:	f7fe ff23 	bl	800d9d8 <vListInsertEnd>
					xReturn = pdTRUE;
 800eb92:	2001      	movs	r0, #1
		return xReturn;
 800eb94:	e7da      	b.n	800eb4c <xTaskPriorityDisinherit+0x14>
 800eb96:	46c0      	nop			; (mov r8, r8)
 800eb98:	20002238 	.word	0x20002238
 800eb9c:	200022b8 	.word	0x200022b8
 800eba0:	200022d4 	.word	0x200022d4

0800eba4 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800eba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eba6:	46c6      	mov	lr, r8
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800eba8:	2600      	movs	r6, #0
	{
 800ebaa:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ebac:	4b27      	ldr	r3, [pc, #156]	; (800ec4c <vTaskList+0xa8>)
	{
 800ebae:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800ebb0:	691a      	ldr	r2, [r3, #16]
		*pcWriteBuffer = 0x00;
 800ebb2:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800ebb4:	9202      	str	r2, [sp, #8]
	{
 800ebb6:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ebb8:	6918      	ldr	r0, [r3, #16]
 800ebba:	0140      	lsls	r0, r0, #5
 800ebbc:	f000 fbf8 	bl	800f3b0 <pvPortMalloc>
 800ebc0:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800ebc2:	d03f      	beq.n	800ec44 <vTaskList+0xa0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	9902      	ldr	r1, [sp, #8]
 800ebc8:	f7ff fe34 	bl	800e834 <uxTaskGetSystemState>
 800ebcc:	9002      	str	r0, [sp, #8]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ebce:	9603      	str	r6, [sp, #12]
 800ebd0:	9b03      	ldr	r3, [sp, #12]
 800ebd2:	9a02      	ldr	r2, [sp, #8]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d932      	bls.n	800ec3e <vTaskList+0x9a>
 800ebd8:	4b1d      	ldr	r3, [pc, #116]	; (800ec50 <vTaskList+0xac>)
 800ebda:	4e1e      	ldr	r6, [pc, #120]	; (800ec54 <vTaskList+0xb0>)
 800ebdc:	4698      	mov	r8, r3
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ebde:	9b03      	ldr	r3, [sp, #12]
 800ebe0:	2700      	movs	r7, #0
 800ebe2:	015b      	lsls	r3, r3, #5
 800ebe4:	18eb      	adds	r3, r5, r3
 800ebe6:	7b1b      	ldrb	r3, [r3, #12]
 800ebe8:	3b01      	subs	r3, #1
 800ebea:	b2db      	uxtb	r3, r3
 800ebec:	2b03      	cmp	r3, #3
 800ebee:	d801      	bhi.n	800ebf4 <vTaskList+0x50>
 800ebf0:	4443      	add	r3, r8
 800ebf2:	7d1f      	ldrb	r7, [r3, #20]
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ebf4:	9b03      	ldr	r3, [sp, #12]
 800ebf6:	0020      	movs	r0, r4
 800ebf8:	015b      	lsls	r3, r3, #5
 800ebfa:	18eb      	adds	r3, r5, r3
 800ebfc:	6859      	ldr	r1, [r3, #4]
 800ebfe:	f7ff fa6d 	bl	800e0dc <prvWriteNameToBuffer>
 800ec02:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ec04:	9b03      	ldr	r3, [sp, #12]
 800ec06:	9a03      	ldr	r2, [sp, #12]
 800ec08:	9903      	ldr	r1, [sp, #12]
 800ec0a:	015b      	lsls	r3, r3, #5
 800ec0c:	0149      	lsls	r1, r1, #5
 800ec0e:	1869      	adds	r1, r5, r1
 800ec10:	6889      	ldr	r1, [r1, #8]
 800ec12:	18eb      	adds	r3, r5, r3
 800ec14:	0152      	lsls	r2, r2, #5
 800ec16:	691b      	ldr	r3, [r3, #16]
 800ec18:	18aa      	adds	r2, r5, r2
 800ec1a:	9101      	str	r1, [sp, #4]
 800ec1c:	8b92      	ldrh	r2, [r2, #28]
 800ec1e:	0031      	movs	r1, r6
 800ec20:	9200      	str	r2, [sp, #0]
 800ec22:	003a      	movs	r2, r7
 800ec24:	f004 fa3e 	bl	80130a4 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ec28:	0020      	movs	r0, r4
 800ec2a:	f7f1 fa75 	bl	8000118 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 800ec2e:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ec30:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800ec32:	3301      	adds	r3, #1
 800ec34:	9303      	str	r3, [sp, #12]
 800ec36:	9a03      	ldr	r2, [sp, #12]
 800ec38:	9b02      	ldr	r3, [sp, #8]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d3cf      	bcc.n	800ebde <vTaskList+0x3a>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ec3e:	0028      	movs	r0, r5
 800ec40:	f000 fc32 	bl	800f4a8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec44:	b004      	add	sp, #16
 800ec46:	bc04      	pop	{r2}
 800ec48:	4690      	mov	r8, r2
 800ec4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec4c:	20002238 	.word	0x20002238
 800ec50:	08017af4 	.word	0x08017af4
 800ec54:	0801a304 	.word	0x0801a304

0800ec58 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800ec58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec5a:	46c6      	mov	lr, r8
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ec5c:	2600      	movs	r6, #0
	{
 800ec5e:	b500      	push	{lr}

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ec60:	4b28      	ldr	r3, [pc, #160]	; (800ed04 <vTaskGetRunTimeStats+0xac>)
	{
 800ec62:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800ec64:	691a      	ldr	r2, [r3, #16]
		*pcWriteBuffer = 0x00;
 800ec66:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800ec68:	9201      	str	r2, [sp, #4]
	{
 800ec6a:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ec6c:	6918      	ldr	r0, [r3, #16]
 800ec6e:	0140      	lsls	r0, r0, #5
 800ec70:	f000 fb9e 	bl	800f3b0 <pvPortMalloc>
 800ec74:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800ec76:	d040      	beq.n	800ecfa <vTaskGetRunTimeStats+0xa2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ec78:	9901      	ldr	r1, [sp, #4]
 800ec7a:	aa03      	add	r2, sp, #12
 800ec7c:	f7ff fdda 	bl	800e834 <uxTaskGetSystemState>

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800ec80:	2164      	movs	r1, #100	; 0x64
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ec82:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 800ec84:	9803      	ldr	r0, [sp, #12]
 800ec86:	f7f1 fa63 	bl	8000150 <__udivsi3>
 800ec8a:	1e01      	subs	r1, r0, #0
 800ec8c:	9003      	str	r0, [sp, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800ec8e:	d031      	beq.n	800ecf4 <vTaskGetRunTimeStats+0x9c>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800ec90:	9602      	str	r6, [sp, #8]
 800ec92:	9b02      	ldr	r3, [sp, #8]
 800ec94:	9a01      	ldr	r2, [sp, #4]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d92c      	bls.n	800ecf4 <vTaskGetRunTimeStats+0x9c>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ec9a:	4b1b      	ldr	r3, [pc, #108]	; (800ed08 <vTaskGetRunTimeStats+0xb0>)
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ec9c:	4f1b      	ldr	r7, [pc, #108]	; (800ed0c <vTaskGetRunTimeStats+0xb4>)
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ec9e:	4698      	mov	r8, r3
 800eca0:	e00f      	b.n	800ecc2 <vTaskGetRunTimeStats+0x6a>
 800eca2:	0033      	movs	r3, r6
 800eca4:	4641      	mov	r1, r8
 800eca6:	f004 f9fd 	bl	80130a4 <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800ecaa:	0020      	movs	r0, r4
 800ecac:	f7f1 fa34 	bl	8000118 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 800ecb0:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer += strlen( pcWriteBuffer );
 800ecb2:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	9302      	str	r3, [sp, #8]
 800ecb8:	9a02      	ldr	r2, [sp, #8]
 800ecba:	9b01      	ldr	r3, [sp, #4]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d219      	bcs.n	800ecf4 <vTaskGetRunTimeStats+0x9c>
 800ecc0:	9903      	ldr	r1, [sp, #12]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ecc2:	9b02      	ldr	r3, [sp, #8]
 800ecc4:	015b      	lsls	r3, r3, #5
 800ecc6:	18eb      	adds	r3, r5, r3
 800ecc8:	6998      	ldr	r0, [r3, #24]
 800ecca:	f7f1 fa41 	bl	8000150 <__udivsi3>
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ecce:	9b02      	ldr	r3, [sp, #8]
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ecd0:	0006      	movs	r6, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ecd2:	015b      	lsls	r3, r3, #5
 800ecd4:	18eb      	adds	r3, r5, r3
 800ecd6:	6859      	ldr	r1, [r3, #4]
 800ecd8:	0020      	movs	r0, r4
 800ecda:	f7ff f9ff 	bl	800e0dc <prvWriteNameToBuffer>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ecde:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ece0:	0004      	movs	r4, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ece2:	015b      	lsls	r3, r3, #5
 800ece4:	18eb      	adds	r3, r5, r3
 800ece6:	699a      	ldr	r2, [r3, #24]
					if( ulStatsAsPercentage > 0UL )
 800ece8:	2e00      	cmp	r6, #0
 800ecea:	d1da      	bne.n	800eca2 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ecec:	0039      	movs	r1, r7
 800ecee:	f004 f9d9 	bl	80130a4 <sprintf>
 800ecf2:	e7da      	b.n	800ecaa <vTaskGetRunTimeStats+0x52>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ecf4:	0028      	movs	r0, r5
 800ecf6:	f000 fbd7 	bl	800f4a8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecfa:	b004      	add	sp, #16
 800ecfc:	bc04      	pop	{r2}
 800ecfe:	4690      	mov	r8, r2
 800ed00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed02:	46c0      	nop			; (mov r8, r8)
 800ed04:	20002238 	.word	0x20002238
 800ed08:	0801a314 	.word	0x0801a314
 800ed0c:	0801a320 	.word	0x0801a320

0800ed10 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ed10:	4b04      	ldr	r3, [pc, #16]	; (800ed24 <pvTaskIncrementMutexHeldCount+0x14>)
 800ed12:	685a      	ldr	r2, [r3, #4]
 800ed14:	2a00      	cmp	r2, #0
 800ed16:	d003      	beq.n	800ed20 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ed18:	6859      	ldr	r1, [r3, #4]
 800ed1a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800ed1c:	3201      	adds	r2, #1
 800ed1e:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ed20:	6858      	ldr	r0, [r3, #4]
	}
 800ed22:	4770      	bx	lr
 800ed24:	20002238 	.word	0x20002238

0800ed28 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ed28:	b570      	push	{r4, r5, r6, lr}
 800ed2a:	0006      	movs	r6, r0
 800ed2c:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ed2e:	f000 fac1 	bl	800f2b4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ed32:	4c1c      	ldr	r4, [pc, #112]	; (800eda4 <ulTaskNotifyTake+0x7c>)
 800ed34:	6863      	ldr	r3, [r4, #4]
 800ed36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d105      	bne.n	800ed48 <ulTaskNotifyTake+0x20>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800ed3c:	2101      	movs	r1, #1
 800ed3e:	6862      	ldr	r2, [r4, #4]
 800ed40:	335c      	adds	r3, #92	; 0x5c
 800ed42:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800ed44:	2d00      	cmp	r5, #0
 800ed46:	d119      	bne.n	800ed7c <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ed48:	f000 fac0 	bl	800f2cc <vPortExitCritical>

		taskENTER_CRITICAL();
 800ed4c:	f000 fab2 	bl	800f2b4 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ed50:	6863      	ldr	r3, [r4, #4]
 800ed52:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800ed54:	2d00      	cmp	r5, #0
 800ed56:	d005      	beq.n	800ed64 <ulTaskNotifyTake+0x3c>
			{
				if( xClearCountOnExit != pdFALSE )
 800ed58:	2e00      	cmp	r6, #0
 800ed5a:	d10b      	bne.n	800ed74 <ulTaskNotifyTake+0x4c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800ed5c:	6862      	ldr	r2, [r4, #4]
 800ed5e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ed60:	3b01      	subs	r3, #1
 800ed62:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800ed64:	235c      	movs	r3, #92	; 0x5c
 800ed66:	2100      	movs	r1, #0
 800ed68:	6862      	ldr	r2, [r4, #4]
 800ed6a:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800ed6c:	f000 faae 	bl	800f2cc <vPortExitCritical>

		return ulReturn;
	}
 800ed70:	0028      	movs	r0, r5
 800ed72:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ed74:	2200      	movs	r2, #0
 800ed76:	6863      	ldr	r3, [r4, #4]
 800ed78:	659a      	str	r2, [r3, #88]	; 0x58
 800ed7a:	e7f3      	b.n	800ed64 <ulTaskNotifyTake+0x3c>
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ed7c:	6860      	ldr	r0, [r4, #4]
 800ed7e:	3004      	adds	r0, #4
 800ed80:	f7fe fe4e 	bl	800da20 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800ed84:	1c6b      	adds	r3, r5, #1
 800ed86:	d006      	beq.n	800ed96 <ulTaskNotifyTake+0x6e>
							xTimeToWake = xTickCount + xTicksToWait;
 800ed88:	68a0      	ldr	r0, [r4, #8]
 800ed8a:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ed8c:	f7ff fa1e 	bl	800e1cc <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800ed90:	f000 fa84 	bl	800f29c <vPortYield>
 800ed94:	e7d8      	b.n	800ed48 <ulTaskNotifyTake+0x20>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ed96:	0020      	movs	r0, r4
 800ed98:	6861      	ldr	r1, [r4, #4]
 800ed9a:	3064      	adds	r0, #100	; 0x64
 800ed9c:	3104      	adds	r1, #4
 800ed9e:	f7fe fe1b 	bl	800d9d8 <vListInsertEnd>
 800eda2:	e7f5      	b.n	800ed90 <ulTaskNotifyTake+0x68>
 800eda4:	20002238 	.word	0x20002238

0800eda8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800eda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edaa:	0004      	movs	r4, r0
 800edac:	000e      	movs	r6, r1
 800edae:	0015      	movs	r5, r2
 800edb0:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800edb2:	2800      	cmp	r0, #0
 800edb4:	d01b      	beq.n	800edee <xTaskGenericNotify+0x46>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800edb6:	f000 fa7d 	bl	800f2b4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800edba:	2f00      	cmp	r7, #0
 800edbc:	d001      	beq.n	800edc2 <xTaskGenericNotify+0x1a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800edbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800edc0:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800edc2:	225c      	movs	r2, #92	; 0x5c

			pxTCB->eNotifyState = eNotified;
 800edc4:	2102      	movs	r1, #2
			eOriginalNotifyState = pxTCB->eNotifyState;
 800edc6:	5ca3      	ldrb	r3, [r4, r2]
			pxTCB->eNotifyState = eNotified;
 800edc8:	54a1      	strb	r1, [r4, r2]
			eOriginalNotifyState = pxTCB->eNotifyState;
 800edca:	b2db      	uxtb	r3, r3

			switch( eAction )
 800edcc:	2d02      	cmp	r5, #2
 800edce:	d010      	beq.n	800edf2 <xTaskGenericNotify+0x4a>
 800edd0:	d934      	bls.n	800ee3c <xTaskGenericNotify+0x94>
 800edd2:	2d03      	cmp	r5, #3
 800edd4:	d003      	beq.n	800edde <xTaskGenericNotify+0x36>
 800edd6:	2d04      	cmp	r5, #4
 800edd8:	d102      	bne.n	800ede0 <xTaskGenericNotify+0x38>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800edda:	2b02      	cmp	r3, #2
 800eddc:	d02c      	beq.n	800ee38 <xTaskGenericNotify+0x90>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800edde:	65a6      	str	r6, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d00a      	beq.n	800edfa <xTaskGenericNotify+0x52>
 800ede4:	2401      	movs	r4, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ede6:	f000 fa71 	bl	800f2cc <vPortExitCritical>

		return xReturn;
	}
 800edea:	0020      	movs	r0, r4
 800edec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		configASSERT( xTaskToNotify );
 800edee:	b672      	cpsid	i
 800edf0:	e7fe      	b.n	800edf0 <xTaskGenericNotify+0x48>
					( pxTCB->ulNotifiedValue )++;
 800edf2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800edf4:	3201      	adds	r2, #1
 800edf6:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800edf8:	e7f2      	b.n	800ede0 <xTaskGenericNotify+0x38>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800edfa:	1d25      	adds	r5, r4, #4
 800edfc:	0028      	movs	r0, r5
 800edfe:	f7fe fe0f 	bl	800da20 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ee02:	4a11      	ldr	r2, [pc, #68]	; (800ee48 <xTaskGenericNotify+0xa0>)
 800ee04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ee06:	6811      	ldr	r1, [r2, #0]
 800ee08:	428b      	cmp	r3, r1
 800ee0a:	d900      	bls.n	800ee0e <xTaskGenericNotify+0x66>
 800ee0c:	6013      	str	r3, [r2, #0]
 800ee0e:	2014      	movs	r0, #20
 800ee10:	4358      	muls	r0, r3
 800ee12:	4b0e      	ldr	r3, [pc, #56]	; (800ee4c <xTaskGenericNotify+0xa4>)
 800ee14:	0029      	movs	r1, r5
 800ee16:	18c0      	adds	r0, r0, r3
 800ee18:	f7fe fdde 	bl	800d9d8 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ee1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d001      	beq.n	800ee26 <xTaskGenericNotify+0x7e>
 800ee22:	b672      	cpsid	i
 800ee24:	e7fe      	b.n	800ee24 <xTaskGenericNotify+0x7c>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ee26:	4b0a      	ldr	r3, [pc, #40]	; (800ee50 <xTaskGenericNotify+0xa8>)
 800ee28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d9d8      	bls.n	800ede4 <xTaskGenericNotify+0x3c>
					taskYIELD_IF_USING_PREEMPTION();
 800ee32:	f000 fa33 	bl	800f29c <vPortYield>
 800ee36:	e7d5      	b.n	800ede4 <xTaskGenericNotify+0x3c>
						xReturn = pdFAIL;
 800ee38:	2400      	movs	r4, #0
 800ee3a:	e7d4      	b.n	800ede6 <xTaskGenericNotify+0x3e>
			switch( eAction )
 800ee3c:	2d01      	cmp	r5, #1
 800ee3e:	d1cf      	bne.n	800ede0 <xTaskGenericNotify+0x38>
					pxTCB->ulNotifiedValue |= ulValue;
 800ee40:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ee42:	4316      	orrs	r6, r2
 800ee44:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800ee46:	e7cb      	b.n	800ede0 <xTaskGenericNotify+0x38>
 800ee48:	200022b8 	.word	0x200022b8
 800ee4c:	200022d4 	.word	0x200022d4
 800ee50:	20002238 	.word	0x20002238

0800ee54 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ee54:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ee56:	f000 fa2d 	bl	800f2b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ee5a:	4c10      	ldr	r4, [pc, #64]	; (800ee9c <prvCheckForValidListAndQueue+0x48>)
 800ee5c:	6823      	ldr	r3, [r4, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d002      	beq.n	800ee68 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee62:	f000 fa33 	bl	800f2cc <vPortExitCritical>
}
 800ee66:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList2 );
 800ee68:	0025      	movs	r5, r4
			vListInitialise( &xActiveTimerList1 );
 800ee6a:	1d26      	adds	r6, r4, #4
 800ee6c:	0030      	movs	r0, r6
			vListInitialise( &xActiveTimerList2 );
 800ee6e:	3518      	adds	r5, #24
			vListInitialise( &xActiveTimerList1 );
 800ee70:	f7fe fda2 	bl	800d9b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ee74:	0028      	movs	r0, r5
 800ee76:	f7fe fd9f 	bl	800d9b8 <vListInitialise>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	2110      	movs	r1, #16
 800ee7e:	2004      	movs	r0, #4
			pxCurrentTimerList = &xActiveTimerList1;
 800ee80:	62e6      	str	r6, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
 800ee82:	6325      	str	r5, [r4, #48]	; 0x30
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ee84:	f7fe feae 	bl	800dbe4 <xQueueGenericCreate>
 800ee88:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
 800ee8a:	2800      	cmp	r0, #0
 800ee8c:	d003      	beq.n	800ee96 <prvCheckForValidListAndQueue+0x42>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ee8e:	4904      	ldr	r1, [pc, #16]	; (800eea0 <prvCheckForValidListAndQueue+0x4c>)
 800ee90:	f7ff f8f4 	bl	800e07c <vQueueAddToRegistry>
 800ee94:	e7e5      	b.n	800ee62 <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
 800ee96:	b672      	cpsid	i
 800ee98:	e7fe      	b.n	800ee98 <prvCheckForValidListAndQueue+0x44>
 800ee9a:	46c0      	nop			; (mov r8, r8)
 800ee9c:	20002360 	.word	0x20002360
 800eea0:	0801a32c 	.word	0x0801a32c

0800eea4 <prvInsertTimerInActiveList>:
{
 800eea4:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eea6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eea8:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800eeaa:	4291      	cmp	r1, r2
 800eeac:	d806      	bhi.n	800eebc <prvInsertTimerInActiveList+0x18>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800eeae:	1ad2      	subs	r2, r2, r3
 800eeb0:	6983      	ldr	r3, [r0, #24]
			xProcessTimerNow = pdTRUE;
 800eeb2:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d30d      	bcc.n	800eed4 <prvInsertTimerInActiveList+0x30>
}
 800eeb8:	0020      	movs	r0, r4
 800eeba:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d202      	bcs.n	800eec6 <prvInsertTimerInActiveList+0x22>
			xProcessTimerNow = pdTRUE;
 800eec0:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eec2:	4299      	cmp	r1, r3
 800eec4:	d2f8      	bcs.n	800eeb8 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eec6:	4b07      	ldr	r3, [pc, #28]	; (800eee4 <prvInsertTimerInActiveList+0x40>)
 800eec8:	1d01      	adds	r1, r0, #4
 800eeca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800eecc:	f7fe fd90 	bl	800d9f0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800eed0:	2400      	movs	r4, #0
 800eed2:	e7f1      	b.n	800eeb8 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eed4:	4b03      	ldr	r3, [pc, #12]	; (800eee4 <prvInsertTimerInActiveList+0x40>)
 800eed6:	1d01      	adds	r1, r0, #4
 800eed8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eeda:	f7fe fd89 	bl	800d9f0 <vListInsert>
 800eede:	2400      	movs	r4, #0
 800eee0:	e7ea      	b.n	800eeb8 <prvInsertTimerInActiveList+0x14>
 800eee2:	46c0      	nop			; (mov r8, r8)
 800eee4:	20002360 	.word	0x20002360

0800eee8 <xTimerCreateTimerTask>:
{
 800eee8:	b500      	push	{lr}
 800eeea:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800eeec:	f7ff ffb2 	bl	800ee54 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800eef0:	4b0a      	ldr	r3, [pc, #40]	; (800ef1c <xTimerCreateTimerTask+0x34>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d00d      	beq.n	800ef14 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800eef8:	2300      	movs	r3, #0
 800eefa:	9303      	str	r3, [sp, #12]
 800eefc:	9302      	str	r3, [sp, #8]
 800eefe:	9301      	str	r3, [sp, #4]
 800ef00:	3303      	adds	r3, #3
 800ef02:	9300      	str	r3, [sp, #0]
 800ef04:	22a0      	movs	r2, #160	; 0xa0
 800ef06:	2300      	movs	r3, #0
 800ef08:	4905      	ldr	r1, [pc, #20]	; (800ef20 <xTimerCreateTimerTask+0x38>)
 800ef0a:	4806      	ldr	r0, [pc, #24]	; (800ef24 <xTimerCreateTimerTask+0x3c>)
 800ef0c:	f7ff faa2 	bl	800e454 <xTaskGenericCreate>
	configASSERT( xReturn );
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d101      	bne.n	800ef18 <xTimerCreateTimerTask+0x30>
 800ef14:	b672      	cpsid	i
 800ef16:	e7fe      	b.n	800ef16 <xTimerCreateTimerTask+0x2e>
}
 800ef18:	b005      	add	sp, #20
 800ef1a:	bd00      	pop	{pc}
 800ef1c:	20002360 	.word	0x20002360
 800ef20:	0801a334 	.word	0x0801a334
 800ef24:	0800f031 	.word	0x0800f031

0800ef28 <xTimerCreate>:
{
 800ef28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef2a:	46c6      	mov	lr, r8
 800ef2c:	000d      	movs	r5, r1
 800ef2e:	b500      	push	{lr}
 800ef30:	4680      	mov	r8, r0
 800ef32:	0017      	movs	r7, r2
 800ef34:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800ef36:	2900      	cmp	r1, #0
 800ef38:	d014      	beq.n	800ef64 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800ef3a:	202c      	movs	r0, #44	; 0x2c
 800ef3c:	f000 fa38 	bl	800f3b0 <pvPortMalloc>
 800ef40:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800ef42:	d00b      	beq.n	800ef5c <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800ef44:	f7ff ff86 	bl	800ee54 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800ef48:	4643      	mov	r3, r8
 800ef4a:	6023      	str	r3, [r4, #0]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ef4c:	9b06      	ldr	r3, [sp, #24]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ef4e:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800ef50:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800ef52:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ef54:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ef56:	1d20      	adds	r0, r4, #4
 800ef58:	f7fe fd3a 	bl	800d9d0 <vListInitialiseItem>
}
 800ef5c:	0020      	movs	r0, r4
 800ef5e:	bc04      	pop	{r2}
 800ef60:	4690      	mov	r8, r2
 800ef62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ef64:	b672      	cpsid	i
 800ef66:	e7fe      	b.n	800ef66 <xTimerCreate+0x3e>

0800ef68 <xTimerGenericCommand>:
{
 800ef68:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800ef6a:	4d13      	ldr	r5, [pc, #76]	; (800efb8 <xTimerGenericCommand+0x50>)
{
 800ef6c:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800ef6e:	682c      	ldr	r4, [r5, #0]
{
 800ef70:	001e      	movs	r6, r3
	if( xTimerQueue != NULL )
 800ef72:	2c00      	cmp	r4, #0
 800ef74:	d017      	beq.n	800efa6 <xTimerGenericCommand+0x3e>
		xMessage.xMessageID = xCommandID;
 800ef76:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ef78:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800ef7a:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef7c:	2905      	cmp	r1, #5
 800ef7e:	dc0a      	bgt.n	800ef96 <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ef80:	f7ff fd92 	bl	800eaa8 <xTaskGetSchedulerState>
 800ef84:	2802      	cmp	r0, #2
 800ef86:	d010      	beq.n	800efaa <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ef88:	6828      	ldr	r0, [r5, #0]
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	4669      	mov	r1, sp
 800ef90:	f7fe fe64 	bl	800dc5c <xQueueGenericSend>
 800ef94:	e005      	b.n	800efa2 <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ef96:	2300      	movs	r3, #0
 800ef98:	0032      	movs	r2, r6
 800ef9a:	4669      	mov	r1, sp
 800ef9c:	0020      	movs	r0, r4
 800ef9e:	f7fe fef9 	bl	800dd94 <xQueueGenericSendFromISR>
}
 800efa2:	b004      	add	sp, #16
 800efa4:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 800efa6:	2000      	movs	r0, #0
	return xReturn;
 800efa8:	e7fb      	b.n	800efa2 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800efaa:	6828      	ldr	r0, [r5, #0]
 800efac:	2300      	movs	r3, #0
 800efae:	9a08      	ldr	r2, [sp, #32]
 800efb0:	4669      	mov	r1, sp
 800efb2:	f7fe fe53 	bl	800dc5c <xQueueGenericSend>
 800efb6:	e7f4      	b.n	800efa2 <xTimerGenericCommand+0x3a>
 800efb8:	20002360 	.word	0x20002360

0800efbc <prvSwitchTimerLists>:
{
 800efbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efbe:	46c6      	mov	lr, r8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800efc0:	2300      	movs	r3, #0
{
 800efc2:	b500      	push	{lr}
 800efc4:	4e19      	ldr	r6, [pc, #100]	; (800f02c <prvSwitchTimerLists+0x70>)
 800efc6:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800efc8:	4698      	mov	r8, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efca:	e00c      	b.n	800efe6 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efcc:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efce:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efd0:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efd2:	1d25      	adds	r5, r4, #4
 800efd4:	0028      	movs	r0, r5
 800efd6:	f7fe fd23 	bl	800da20 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efdc:	0020      	movs	r0, r4
 800efde:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800efe0:	69e3      	ldr	r3, [r4, #28]
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d00a      	beq.n	800effc <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efe6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	2a00      	cmp	r2, #0
 800efec:	d1ee      	bne.n	800efcc <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
 800efee:	6b32      	ldr	r2, [r6, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
 800eff0:	6333      	str	r3, [r6, #48]	; 0x30
	pxCurrentTimerList = pxOverflowTimerList;
 800eff2:	62f2      	str	r2, [r6, #44]	; 0x2c
}
 800eff4:	b002      	add	sp, #8
 800eff6:	bc04      	pop	{r2}
 800eff8:	4690      	mov	r8, r2
 800effa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800effc:	69a3      	ldr	r3, [r4, #24]
 800effe:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 800f000:	429f      	cmp	r7, r3
 800f002:	d206      	bcs.n	800f012 <prvSwitchTimerLists+0x56>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f004:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f006:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f008:	0029      	movs	r1, r5
 800f00a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800f00c:	f7fe fcf0 	bl	800d9f0 <vListInsert>
 800f010:	e7e9      	b.n	800efe6 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f012:	4643      	mov	r3, r8
 800f014:	003a      	movs	r2, r7
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	2100      	movs	r1, #0
 800f01a:	2300      	movs	r3, #0
 800f01c:	0020      	movs	r0, r4
 800f01e:	f7ff ffa3 	bl	800ef68 <xTimerGenericCommand>
				configASSERT( xResult );
 800f022:	2800      	cmp	r0, #0
 800f024:	d1df      	bne.n	800efe6 <prvSwitchTimerLists+0x2a>
 800f026:	b672      	cpsid	i
 800f028:	e7fe      	b.n	800f028 <prvSwitchTimerLists+0x6c>
 800f02a:	46c0      	nop			; (mov r8, r8)
 800f02c:	20002360 	.word	0x20002360

0800f030 <prvTimerTask>:
{
 800f030:	2301      	movs	r3, #1
 800f032:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f034:	4646      	mov	r6, r8
 800f036:	46d6      	mov	lr, sl
 800f038:	464f      	mov	r7, r9
 800f03a:	4698      	mov	r8, r3
 800f03c:	b5c0      	push	{r6, r7, lr}
 800f03e:	4d65      	ldr	r5, [pc, #404]	; (800f1d4 <prvTimerTask+0x1a4>)
 800f040:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f042:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	if( *pxListWasEmpty == pdFALSE )
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	2a00      	cmp	r2, #0
 800f048:	d04f      	beq.n	800f0ea <prvTimerTask+0xba>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 800f04e:	f7ff fa9d 	bl	800e58c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800f052:	f7ff faa3 	bl	800e59c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f056:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f058:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800f05a:	4283      	cmp	r3, r0
 800f05c:	d84d      	bhi.n	800f0fa <prvTimerTask+0xca>
	xLastTime = xTimeNow;
 800f05e:	6368      	str	r0, [r5, #52]	; 0x34
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f060:	4287      	cmp	r7, r0
 800f062:	d960      	bls.n	800f126 <prvTimerTask+0xf6>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f064:	1b39      	subs	r1, r7, r4
 800f066:	6828      	ldr	r0, [r5, #0]
 800f068:	f7ff f81a 	bl	800e0a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f06c:	f7ff fb2e 	bl	800e6cc <xTaskResumeAll>
 800f070:	2800      	cmp	r0, #0
 800f072:	d055      	beq.n	800f120 <prvTimerTask+0xf0>
 800f074:	2684      	movs	r6, #132	; 0x84
 800f076:	00b6      	lsls	r6, r6, #2
 800f078:	27c7      	movs	r7, #199	; 0xc7
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f07a:	2300      	movs	r3, #0
 800f07c:	2200      	movs	r2, #0
 800f07e:	a904      	add	r1, sp, #16
 800f080:	6828      	ldr	r0, [r5, #0]
 800f082:	f7fe ff09 	bl	800de98 <xQueueGenericReceive>
 800f086:	2800      	cmp	r0, #0
 800f088:	d0db      	beq.n	800f042 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f08a:	9b04      	ldr	r3, [sp, #16]
 800f08c:	9c06      	ldr	r4, [sp, #24]
 800f08e:	9302      	str	r3, [sp, #8]
 800f090:	2b00      	cmp	r3, #0
 800f092:	da0b      	bge.n	800f0ac <prvTimerTask+0x7c>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f094:	9b07      	ldr	r3, [sp, #28]
 800f096:	0020      	movs	r0, r4
 800f098:	9302      	str	r3, [sp, #8]
 800f09a:	9b05      	ldr	r3, [sp, #20]
 800f09c:	9902      	ldr	r1, [sp, #8]
 800f09e:	9303      	str	r3, [sp, #12]
 800f0a0:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f0a2:	9b04      	ldr	r3, [sp, #16]
 800f0a4:	9302      	str	r3, [sp, #8]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	dbe7      	blt.n	800f07a <prvTimerTask+0x4a>
 800f0aa:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f0ac:	6963      	ldr	r3, [r4, #20]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d002      	beq.n	800f0b8 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0b2:	1d20      	adds	r0, r4, #4
 800f0b4:	f7fe fcb4 	bl	800da20 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800f0b8:	f7ff fa70 	bl	800e59c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f0bc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f0be:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 800f0c0:	4298      	cmp	r0, r3
 800f0c2:	d320      	bcc.n	800f106 <prvTimerTask+0xd6>
	xLastTime = xTimeNow;
 800f0c4:	464b      	mov	r3, r9
 800f0c6:	636b      	str	r3, [r5, #52]	; 0x34
 800f0c8:	9b04      	ldr	r3, [sp, #16]
 800f0ca:	2b09      	cmp	r3, #9
 800f0cc:	d8d5      	bhi.n	800f07a <prvTimerTask+0x4a>
 800f0ce:	4642      	mov	r2, r8
 800f0d0:	409a      	lsls	r2, r3
 800f0d2:	0013      	movs	r3, r2
 800f0d4:	4032      	ands	r2, r6
 800f0d6:	4692      	mov	sl, r2
 800f0d8:	d15a      	bne.n	800f190 <prvTimerTask+0x160>
 800f0da:	421f      	tst	r7, r3
 800f0dc:	d132      	bne.n	800f144 <prvTimerTask+0x114>
 800f0de:	069b      	lsls	r3, r3, #26
 800f0e0:	d5cb      	bpl.n	800f07a <prvTimerTask+0x4a>
					vPortFree( pxTimer );
 800f0e2:	0020      	movs	r0, r4
 800f0e4:	f000 f9e0 	bl	800f4a8 <vPortFree>
 800f0e8:	e7c6      	b.n	800f078 <prvTimerTask+0x48>
	vTaskSuspendAll();
 800f0ea:	f7ff fa4f 	bl	800e58c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800f0ee:	f7ff fa55 	bl	800e59c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f0f2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f0f4:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800f0f6:	4298      	cmp	r0, r3
 800f0f8:	d208      	bcs.n	800f10c <prvTimerTask+0xdc>
		prvSwitchTimerLists();
 800f0fa:	f7ff ff5f 	bl	800efbc <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800f0fe:	636c      	str	r4, [r5, #52]	; 0x34
			( void ) xTaskResumeAll();
 800f100:	f7ff fae4 	bl	800e6cc <xTaskResumeAll>
 800f104:	e7b6      	b.n	800f074 <prvTimerTask+0x44>
		prvSwitchTimerLists();
 800f106:	f7ff ff59 	bl	800efbc <prvSwitchTimerLists>
 800f10a:	e7db      	b.n	800f0c4 <prvTimerTask+0x94>
		xNextExpireTime = ( TickType_t ) 0U;
 800f10c:	2700      	movs	r7, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f10e:	6828      	ldr	r0, [r5, #0]
 800f110:	1b39      	subs	r1, r7, r4
	xLastTime = xTimeNow;
 800f112:	636c      	str	r4, [r5, #52]	; 0x34
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f114:	f7fe ffc4 	bl	800e0a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f118:	f7ff fad8 	bl	800e6cc <xTaskResumeAll>
 800f11c:	2800      	cmp	r0, #0
 800f11e:	d1a9      	bne.n	800f074 <prvTimerTask+0x44>
					portYIELD_WITHIN_API();
 800f120:	f000 f8bc 	bl	800f29c <vPortYield>
 800f124:	e7a6      	b.n	800f074 <prvTimerTask+0x44>
				( void ) xTaskResumeAll();
 800f126:	f7ff fad1 	bl	800e6cc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f12a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f130:	1d30      	adds	r0, r6, #4
 800f132:	f7fe fc75 	bl	800da20 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f136:	69f3      	ldr	r3, [r6, #28]
 800f138:	2b01      	cmp	r3, #1
 800f13a:	d034      	beq.n	800f1a6 <prvTimerTask+0x176>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f13c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f13e:	0030      	movs	r0, r6
 800f140:	4798      	blx	r3
 800f142:	e797      	b.n	800f074 <prvTimerTask+0x44>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f144:	9b05      	ldr	r3, [sp, #20]
 800f146:	0020      	movs	r0, r4
 800f148:	9302      	str	r3, [sp, #8]
 800f14a:	9a02      	ldr	r2, [sp, #8]
 800f14c:	69a3      	ldr	r3, [r4, #24]
 800f14e:	4694      	mov	ip, r2
 800f150:	4463      	add	r3, ip
 800f152:	0019      	movs	r1, r3
 800f154:	0013      	movs	r3, r2
 800f156:	464a      	mov	r2, r9
 800f158:	f7ff fea4 	bl	800eea4 <prvInsertTimerInActiveList>
 800f15c:	2801      	cmp	r0, #1
 800f15e:	d18b      	bne.n	800f078 <prvTimerTask+0x48>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f162:	0020      	movs	r0, r4
 800f164:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f166:	69e3      	ldr	r3, [r4, #28]
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d185      	bne.n	800f078 <prvTimerTask+0x48>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f16c:	69a1      	ldr	r1, [r4, #24]
 800f16e:	9b05      	ldr	r3, [sp, #20]
 800f170:	468c      	mov	ip, r1
 800f172:	9302      	str	r3, [sp, #8]
 800f174:	4463      	add	r3, ip
 800f176:	001a      	movs	r2, r3
 800f178:	4653      	mov	r3, sl
 800f17a:	2100      	movs	r1, #0
 800f17c:	9300      	str	r3, [sp, #0]
 800f17e:	0020      	movs	r0, r4
 800f180:	2300      	movs	r3, #0
 800f182:	f7ff fef1 	bl	800ef68 <xTimerGenericCommand>
							configASSERT( xResult );
 800f186:	2800      	cmp	r0, #0
 800f188:	d000      	beq.n	800f18c <prvTimerTask+0x15c>
 800f18a:	e775      	b.n	800f078 <prvTimerTask+0x48>
 800f18c:	b672      	cpsid	i
 800f18e:	e7fe      	b.n	800f18e <prvTimerTask+0x15e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f190:	9905      	ldr	r1, [sp, #20]
 800f192:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f194:	2900      	cmp	r1, #0
 800f196:	d01a      	beq.n	800f1ce <prvTimerTask+0x19e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f198:	4449      	add	r1, r9
 800f19a:	464b      	mov	r3, r9
 800f19c:	464a      	mov	r2, r9
 800f19e:	0020      	movs	r0, r4
 800f1a0:	f7ff fe80 	bl	800eea4 <prvInsertTimerInActiveList>
 800f1a4:	e768      	b.n	800f078 <prvTimerTask+0x48>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f1a6:	69b3      	ldr	r3, [r6, #24]
 800f1a8:	0022      	movs	r2, r4
 800f1aa:	18f9      	adds	r1, r7, r3
 800f1ac:	0030      	movs	r0, r6
 800f1ae:	003b      	movs	r3, r7
 800f1b0:	f7ff fe78 	bl	800eea4 <prvInsertTimerInActiveList>
 800f1b4:	2801      	cmp	r0, #1
 800f1b6:	d1c1      	bne.n	800f13c <prvTimerTask+0x10c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	003a      	movs	r2, r7
 800f1bc:	9300      	str	r3, [sp, #0]
 800f1be:	2100      	movs	r1, #0
 800f1c0:	0030      	movs	r0, r6
 800f1c2:	f7ff fed1 	bl	800ef68 <xTimerGenericCommand>
			configASSERT( xResult );
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	d1b8      	bne.n	800f13c <prvTimerTask+0x10c>
 800f1ca:	b672      	cpsid	i
 800f1cc:	e7fe      	b.n	800f1cc <prvTimerTask+0x19c>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f1ce:	b672      	cpsid	i
 800f1d0:	e7fe      	b.n	800f1d0 <prvTimerTask+0x1a0>
 800f1d2:	46c0      	nop			; (mov r8, r8)
 800f1d4:	20002360 	.word	0x20002360

0800f1d8 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f1d8:	b510      	push	{r4, lr}
 800f1da:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800f1dc:	d101      	bne.n	800f1e2 <pvTimerGetTimerID+0xa>
 800f1de:	b672      	cpsid	i
 800f1e0:	e7fe      	b.n	800f1e0 <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 800f1e2:	f000 f867 	bl	800f2b4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f1e6:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f1e8:	f000 f870 	bl	800f2cc <vPortExitCritical>

	return pvReturn;
}
 800f1ec:	0020      	movs	r0, r4
 800f1ee:	bd10      	pop	{r4, pc}

0800f1f0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f1f0:	4b03      	ldr	r3, [pc, #12]	; (800f200 <prvTaskExitError+0x10>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	d001      	beq.n	800f1fc <prvTaskExitError+0xc>
 800f1f8:	b672      	cpsid	i
 800f1fa:	e7fe      	b.n	800f1fa <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800f1fc:	b672      	cpsid	i
 800f1fe:	e7fe      	b.n	800f1fe <prvTaskExitError+0xe>
 800f200:	200000c4 	.word	0x200000c4

0800f204 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f204:	4a06      	ldr	r2, [pc, #24]	; (800f220 <pxCurrentTCBConst2>)
 800f206:	6813      	ldr	r3, [r2, #0]
 800f208:	6818      	ldr	r0, [r3, #0]
 800f20a:	3020      	adds	r0, #32
 800f20c:	f380 8809 	msr	PSP, r0
 800f210:	2002      	movs	r0, #2
 800f212:	f380 8814 	msr	CONTROL, r0
 800f216:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f218:	46ae      	mov	lr, r5
 800f21a:	b662      	cpsie	i
 800f21c:	bd00      	pop	{pc}
 800f21e:	46c0      	nop			; (mov r8, r8)

0800f220 <pxCurrentTCBConst2>:
 800f220:	2000223c 	.word	0x2000223c

0800f224 <pxPortInitialiseStack>:
{
 800f224:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f226:	2480      	movs	r4, #128	; 0x80
 800f228:	1f03      	subs	r3, r0, #4
 800f22a:	0464      	lsls	r4, r4, #17
 800f22c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f22e:	3b04      	subs	r3, #4
 800f230:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f232:	4903      	ldr	r1, [pc, #12]	; (800f240 <pxPortInitialiseStack+0x1c>)
 800f234:	3b04      	subs	r3, #4
 800f236:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f238:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800f23a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f23c:	601a      	str	r2, [r3, #0]
}
 800f23e:	bd10      	pop	{r4, pc}
 800f240:	0800f1f1 	.word	0x0800f1f1

0800f244 <SVC_Handler>:
}
 800f244:	4770      	bx	lr
 800f246:	46c0      	nop			; (mov r8, r8)

0800f248 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f248:	22ff      	movs	r2, #255	; 0xff
 800f24a:	4b0f      	ldr	r3, [pc, #60]	; (800f288 <xPortStartScheduler+0x40>)
 800f24c:	0412      	lsls	r2, r2, #16
 800f24e:	6819      	ldr	r1, [r3, #0]
{
 800f250:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f252:	430a      	orrs	r2, r1
 800f254:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f256:	22ff      	movs	r2, #255	; 0xff
 800f258:	6819      	ldr	r1, [r3, #0]
 800f25a:	0612      	lsls	r2, r2, #24
 800f25c:	430a      	orrs	r2, r1
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f25e:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f260:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f262:	4b0a      	ldr	r3, [pc, #40]	; (800f28c <xPortStartScheduler+0x44>)
 800f264:	0089      	lsls	r1, r1, #2
 800f266:	6818      	ldr	r0, [r3, #0]
 800f268:	f7f0 ff72 	bl	8000150 <__udivsi3>
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f26c:	2207      	movs	r2, #7
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f26e:	4b08      	ldr	r3, [pc, #32]	; (800f290 <xPortStartScheduler+0x48>)
 800f270:	3801      	subs	r0, #1
 800f272:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f274:	4b07      	ldr	r3, [pc, #28]	; (800f294 <xPortStartScheduler+0x4c>)
 800f276:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f278:	2200      	movs	r2, #0
 800f27a:	4b07      	ldr	r3, [pc, #28]	; (800f298 <xPortStartScheduler+0x50>)
 800f27c:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f27e:	f7ff ffc1 	bl	800f204 <vPortStartFirstTask>
	prvTaskExitError();
 800f282:	f7ff ffb5 	bl	800f1f0 <prvTaskExitError>
 800f286:	46c0      	nop			; (mov r8, r8)
 800f288:	e000ed20 	.word	0xe000ed20
 800f28c:	200000b0 	.word	0x200000b0
 800f290:	e000e014 	.word	0xe000e014
 800f294:	e000e010 	.word	0xe000e010
 800f298:	200000c4 	.word	0x200000c4

0800f29c <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f29c:	2280      	movs	r2, #128	; 0x80
 800f29e:	4b04      	ldr	r3, [pc, #16]	; (800f2b0 <vPortYield+0x14>)
 800f2a0:	0552      	lsls	r2, r2, #21
 800f2a2:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f2a4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f2a8:	f3bf 8f6f 	isb	sy
}
 800f2ac:	4770      	bx	lr
 800f2ae:	46c0      	nop			; (mov r8, r8)
 800f2b0:	e000ed04 	.word	0xe000ed04

0800f2b4 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f2b4:	b672      	cpsid	i
    uxCriticalNesting++;
 800f2b6:	4a04      	ldr	r2, [pc, #16]	; (800f2c8 <vPortEnterCritical+0x14>)
 800f2b8:	6813      	ldr	r3, [r2, #0]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f2be:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f2c2:	f3bf 8f6f 	isb	sy
}
 800f2c6:	4770      	bx	lr
 800f2c8:	200000c4 	.word	0x200000c4

0800f2cc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800f2cc:	4a05      	ldr	r2, [pc, #20]	; (800f2e4 <vPortExitCritical+0x18>)
 800f2ce:	6813      	ldr	r3, [r2, #0]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d101      	bne.n	800f2d8 <vPortExitCritical+0xc>
 800f2d4:	b672      	cpsid	i
 800f2d6:	e7fe      	b.n	800f2d6 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800f2d8:	3b01      	subs	r3, #1
 800f2da:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d100      	bne.n	800f2e2 <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
 800f2e0:	b662      	cpsie	i
}
 800f2e2:	4770      	bx	lr
 800f2e4:	200000c4 	.word	0x200000c4

0800f2e8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f2e8:	f3ef 8010 	mrs	r0, PRIMASK
 800f2ec:	b672      	cpsid	i
 800f2ee:	4770      	bx	lr
}
 800f2f0:	2000      	movs	r0, #0
 800f2f2:	46c0      	nop			; (mov r8, r8)

0800f2f4 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f2f4:	f380 8810 	msr	PRIMASK, r0
 800f2f8:	4770      	bx	lr
 800f2fa:	46c0      	nop			; (mov r8, r8)

0800f2fc <PendSV_Handler>:
	__asm volatile
 800f2fc:	f3ef 8009 	mrs	r0, PSP
 800f300:	4b0e      	ldr	r3, [pc, #56]	; (800f33c <pxCurrentTCBConst>)
 800f302:	681a      	ldr	r2, [r3, #0]
 800f304:	3820      	subs	r0, #32
 800f306:	6010      	str	r0, [r2, #0]
 800f308:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f30a:	4644      	mov	r4, r8
 800f30c:	464d      	mov	r5, r9
 800f30e:	4656      	mov	r6, sl
 800f310:	465f      	mov	r7, fp
 800f312:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f314:	b508      	push	{r3, lr}
 800f316:	b672      	cpsid	i
 800f318:	f7ff fafe 	bl	800e918 <vTaskSwitchContext>
 800f31c:	b662      	cpsie	i
 800f31e:	bc0c      	pop	{r2, r3}
 800f320:	6811      	ldr	r1, [r2, #0]
 800f322:	6808      	ldr	r0, [r1, #0]
 800f324:	3010      	adds	r0, #16
 800f326:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f328:	46a0      	mov	r8, r4
 800f32a:	46a9      	mov	r9, r5
 800f32c:	46b2      	mov	sl, r6
 800f32e:	46bb      	mov	fp, r7
 800f330:	f380 8809 	msr	PSP, r0
 800f334:	3820      	subs	r0, #32
 800f336:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f338:	4718      	bx	r3
 800f33a:	46c0      	nop			; (mov r8, r8)

0800f33c <pxCurrentTCBConst>:
 800f33c:	2000223c 	.word	0x2000223c

0800f340 <xPortSysTickHandler>:
{
 800f340:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f342:	f7ff ffd1 	bl	800f2e8 <ulSetInterruptMaskFromISR>
 800f346:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800f348:	f7ff f934 	bl	800e5b4 <xTaskIncrementTick>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	d003      	beq.n	800f358 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800f350:	2280      	movs	r2, #128	; 0x80
 800f352:	4b03      	ldr	r3, [pc, #12]	; (800f360 <xPortSysTickHandler+0x20>)
 800f354:	0552      	lsls	r2, r2, #21
 800f356:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f358:	0020      	movs	r0, r4
 800f35a:	f7ff ffcb 	bl	800f2f4 <vClearInterruptMaskFromISR>
}
 800f35e:	bd10      	pop	{r4, pc}
 800f360:	e000ed04 	.word	0xe000ed04

0800f364 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f364:	4b11      	ldr	r3, [pc, #68]	; (800f3ac <prvInsertBlockIntoFreeList+0x48>)
{
 800f366:	b530      	push	{r4, r5, lr}
 800f368:	001d      	movs	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	4282      	cmp	r2, r0
 800f36e:	d201      	bcs.n	800f374 <prvInsertBlockIntoFreeList+0x10>
 800f370:	0013      	movs	r3, r2
 800f372:	e7fa      	b.n	800f36a <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f374:	685c      	ldr	r4, [r3, #4]
 800f376:	1919      	adds	r1, r3, r4
 800f378:	4288      	cmp	r0, r1
 800f37a:	d103      	bne.n	800f384 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f37c:	6841      	ldr	r1, [r0, #4]
 800f37e:	0018      	movs	r0, r3
 800f380:	1909      	adds	r1, r1, r4
 800f382:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f384:	6841      	ldr	r1, [r0, #4]
 800f386:	1844      	adds	r4, r0, r1
 800f388:	42a2      	cmp	r2, r4
 800f38a:	d109      	bne.n	800f3a0 <prvInsertBlockIntoFreeList+0x3c>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f38c:	68ac      	ldr	r4, [r5, #8]
 800f38e:	42a2      	cmp	r2, r4
 800f390:	d006      	beq.n	800f3a0 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f392:	6854      	ldr	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f394:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f396:	46a4      	mov	ip, r4
 800f398:	4461      	add	r1, ip
 800f39a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f39c:	6002      	str	r2, [r0, #0]
 800f39e:	e000      	b.n	800f3a2 <prvInsertBlockIntoFreeList+0x3e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f3a0:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f3a2:	4298      	cmp	r0, r3
 800f3a4:	d000      	beq.n	800f3a8 <prvInsertBlockIntoFreeList+0x44>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f3a6:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f3a8:	bd30      	pop	{r4, r5, pc}
 800f3aa:	46c0      	nop			; (mov r8, r8)
 800f3ac:	20002398 	.word	0x20002398

0800f3b0 <pvPortMalloc>:
{
 800f3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3b2:	46c6      	mov	lr, r8
 800f3b4:	b500      	push	{lr}
 800f3b6:	0005      	movs	r5, r0
	vTaskSuspendAll();
 800f3b8:	f7ff f8e8 	bl	800e58c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f3bc:	4c37      	ldr	r4, [pc, #220]	; (800f49c <pvPortMalloc+0xec>)
 800f3be:	68a3      	ldr	r3, [r4, #8]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d02a      	beq.n	800f41a <pvPortMalloc+0x6a>
 800f3c4:	68e6      	ldr	r6, [r4, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f3c6:	422e      	tst	r6, r5
 800f3c8:	d143      	bne.n	800f452 <pvPortMalloc+0xa2>
			if( xWantedSize > 0 )
 800f3ca:	2d00      	cmp	r5, #0
 800f3cc:	d041      	beq.n	800f452 <pvPortMalloc+0xa2>
				xWantedSize += xHeapStructSize;
 800f3ce:	002b      	movs	r3, r5
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f3d0:	2207      	movs	r2, #7
				xWantedSize += xHeapStructSize;
 800f3d2:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f3d4:	421a      	tst	r2, r3
 800f3d6:	d001      	beq.n	800f3dc <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f3d8:	4393      	bics	r3, r2
 800f3da:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d038      	beq.n	800f452 <pvPortMalloc+0xa2>
 800f3e0:	6962      	ldr	r2, [r4, #20]
 800f3e2:	4690      	mov	r8, r2
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d334      	bcc.n	800f452 <pvPortMalloc+0xa2>
				pxBlock = xStart.pxNextFreeBlock;
 800f3e8:	6825      	ldr	r5, [r4, #0]
				pxPreviousBlock = &xStart;
 800f3ea:	0021      	movs	r1, r4
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3ec:	e004      	b.n	800f3f8 <pvPortMalloc+0x48>
 800f3ee:	6828      	ldr	r0, [r5, #0]
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	d004      	beq.n	800f3fe <pvPortMalloc+0x4e>
 800f3f4:	0029      	movs	r1, r5
 800f3f6:	0005      	movs	r5, r0
 800f3f8:	686a      	ldr	r2, [r5, #4]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d3f7      	bcc.n	800f3ee <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800f3fe:	68a0      	ldr	r0, [r4, #8]
 800f400:	42a8      	cmp	r0, r5
 800f402:	d026      	beq.n	800f452 <pvPortMalloc+0xa2>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f404:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f406:	680f      	ldr	r7, [r1, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f408:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f40a:	1ad1      	subs	r1, r2, r3
 800f40c:	2910      	cmp	r1, #16
 800f40e:	d931      	bls.n	800f474 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f410:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f412:	0742      	lsls	r2, r0, #29
 800f414:	d029      	beq.n	800f46a <pvPortMalloc+0xba>
 800f416:	b672      	cpsid	i
 800f418:	e7fe      	b.n	800f418 <pvPortMalloc+0x68>
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f41a:	2107      	movs	r1, #7
	ulAddress = ( uint32_t ) ucHeap;
 800f41c:	4b20      	ldr	r3, [pc, #128]	; (800f4a0 <pvPortMalloc+0xf0>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f41e:	4219      	tst	r1, r3
 800f420:	d020      	beq.n	800f464 <pvPortMalloc+0xb4>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800f422:	185a      	adds	r2, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f424:	438a      	bics	r2, r1
 800f426:	0011      	movs	r1, r2
	ulAddress -= xHeapStructSize;
 800f428:	4e1e      	ldr	r6, [pc, #120]	; (800f4a4 <pvPortMalloc+0xf4>)
	xStart.xBlockSize = ( size_t ) 0;
 800f42a:	2000      	movs	r0, #0
	ulAddress -= xHeapStructSize;
 800f42c:	46b4      	mov	ip, r6
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f42e:	2607      	movs	r6, #7
	ulAddress -= xHeapStructSize;
 800f430:	4463      	add	r3, ip
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f432:	43b3      	bics	r3, r6
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f434:	2680      	movs	r6, #128	; 0x80
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f436:	1a9a      	subs	r2, r3, r2
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f438:	0636      	lsls	r6, r6, #24
	xStart.xBlockSize = ( size_t ) 0;
 800f43a:	6060      	str	r0, [r4, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f43c:	6021      	str	r1, [r4, #0]
	pxEnd->xBlockSize = 0;
 800f43e:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f440:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) ulAddress;
 800f442:	60a3      	str	r3, [r4, #8]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f444:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f446:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f448:	6122      	str	r2, [r4, #16]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f44a:	6162      	str	r2, [r4, #20]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f44c:	60e6      	str	r6, [r4, #12]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f44e:	422e      	tst	r6, r5
 800f450:	d0bb      	beq.n	800f3ca <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
 800f452:	f7ff f93b 	bl	800e6cc <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800f456:	f7fd fc2b 	bl	800ccb0 <vApplicationMallocFailedHook>
 800f45a:	2700      	movs	r7, #0
}
 800f45c:	0038      	movs	r0, r7
 800f45e:	bc04      	pop	{r2}
 800f460:	4690      	mov	r8, r2
 800f462:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f464:	001a      	movs	r2, r3
 800f466:	0019      	movs	r1, r3
 800f468:	e7de      	b.n	800f428 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f46a:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f46c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800f46e:	f7ff ff79 	bl	800f364 <prvInsertBlockIntoFreeList>
 800f472:	686a      	ldr	r2, [r5, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f474:	4643      	mov	r3, r8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f476:	6921      	ldr	r1, [r4, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f478:	1a9b      	subs	r3, r3, r2
 800f47a:	6163      	str	r3, [r4, #20]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f47c:	428b      	cmp	r3, r1
 800f47e:	d200      	bcs.n	800f482 <pvPortMalloc+0xd2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f480:	6123      	str	r3, [r4, #16]
					pxBlock->pxNextFreeBlock = NULL;
 800f482:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f484:	4332      	orrs	r2, r6
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f486:	3708      	adds	r7, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f488:	606a      	str	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f48a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800f48c:	f7ff f91e 	bl	800e6cc <xTaskResumeAll>
		if( pvReturn == NULL )
 800f490:	2f00      	cmp	r7, #0
 800f492:	d0e0      	beq.n	800f456 <pvPortMalloc+0xa6>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f494:	077b      	lsls	r3, r7, #29
 800f496:	d0e1      	beq.n	800f45c <pvPortMalloc+0xac>
 800f498:	b672      	cpsid	i
 800f49a:	e7fe      	b.n	800f49a <pvPortMalloc+0xea>
 800f49c:	20002398 	.word	0x20002398
 800f4a0:	200023b0 	.word	0x200023b0
 800f4a4:	00004a30 	.word	0x00004a30

0800f4a8 <vPortFree>:
{
 800f4a8:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800f4aa:	2800      	cmp	r0, #0
 800f4ac:	d01b      	beq.n	800f4e6 <vPortFree+0x3e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f4ae:	4d0e      	ldr	r5, [pc, #56]	; (800f4e8 <vPortFree+0x40>)
 800f4b0:	3808      	subs	r0, #8
 800f4b2:	6843      	ldr	r3, [r0, #4]
 800f4b4:	68ea      	ldr	r2, [r5, #12]
 800f4b6:	0004      	movs	r4, r0
 800f4b8:	421a      	tst	r2, r3
 800f4ba:	d101      	bne.n	800f4c0 <vPortFree+0x18>
 800f4bc:	b672      	cpsid	i
 800f4be:	e7fe      	b.n	800f4be <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f4c0:	6801      	ldr	r1, [r0, #0]
 800f4c2:	2900      	cmp	r1, #0
 800f4c4:	d001      	beq.n	800f4ca <vPortFree+0x22>
 800f4c6:	b672      	cpsid	i
 800f4c8:	e7fe      	b.n	800f4c8 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f4ca:	4393      	bics	r3, r2
 800f4cc:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800f4ce:	f7ff f85d 	bl	800e58c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f4d2:	696a      	ldr	r2, [r5, #20]
 800f4d4:	6863      	ldr	r3, [r4, #4]
 800f4d6:	4694      	mov	ip, r2
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f4d8:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f4da:	4463      	add	r3, ip
 800f4dc:	616b      	str	r3, [r5, #20]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f4de:	f7ff ff41 	bl	800f364 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800f4e2:	f7ff f8f3 	bl	800e6cc <xTaskResumeAll>
}
 800f4e6:	bd70      	pop	{r4, r5, r6, pc}
 800f4e8:	20002398 	.word	0x20002398

0800f4ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f4ec:	b510      	push	{r4, lr}
 800f4ee:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f4f0:	f002 f88e 	bl	8011610 <HAL_RCC_GetHCLKFreq>
 800f4f4:	21fa      	movs	r1, #250	; 0xfa
 800f4f6:	0089      	lsls	r1, r1, #2
 800f4f8:	f7f0 fe2a 	bl	8000150 <__udivsi3>
 800f4fc:	f000 fb28 	bl	800fb50 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800f500:	2001      	movs	r0, #1
 800f502:	2200      	movs	r2, #0
 800f504:	0021      	movs	r1, r4
 800f506:	4240      	negs	r0, r0
 800f508:	f000 fae2 	bl	800fad0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800f50c:	2000      	movs	r0, #0
 800f50e:	bd10      	pop	{r4, pc}

0800f510 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f510:	2110      	movs	r1, #16
 800f512:	4a06      	ldr	r2, [pc, #24]	; (800f52c <HAL_Init+0x1c>)
{
 800f514:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f516:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f518:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f51a:	430b      	orrs	r3, r1
 800f51c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f51e:	f7ff ffe5 	bl	800f4ec <HAL_InitTick>
  HAL_MspInit();
 800f522:	f001 fc69 	bl	8010df8 <HAL_MspInit>
}
 800f526:	2000      	movs	r0, #0
 800f528:	bd10      	pop	{r4, pc}
 800f52a:	46c0      	nop			; (mov r8, r8)
 800f52c:	40022000 	.word	0x40022000

0800f530 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800f530:	4a02      	ldr	r2, [pc, #8]	; (800f53c <HAL_IncTick+0xc>)
 800f532:	6813      	ldr	r3, [r2, #0]
 800f534:	3301      	adds	r3, #1
 800f536:	6013      	str	r3, [r2, #0]
}
 800f538:	4770      	bx	lr
 800f53a:	46c0      	nop			; (mov r8, r8)
 800f53c:	20006de8 	.word	0x20006de8

0800f540 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800f540:	4b01      	ldr	r3, [pc, #4]	; (800f548 <HAL_GetTick+0x8>)
 800f542:	6818      	ldr	r0, [r3, #0]
}
 800f544:	4770      	bx	lr
 800f546:	46c0      	nop			; (mov r8, r8)
 800f548:	20006de8 	.word	0x20006de8

0800f54c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800f54c:	b510      	push	{r4, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800f552:	f7ff fff5 	bl	800f540 <HAL_GetTick>
 800f556:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800f558:	f7ff fff2 	bl	800f540 <HAL_GetTick>
 800f55c:	9b01      	ldr	r3, [sp, #4]
 800f55e:	1b00      	subs	r0, r0, r4
 800f560:	4298      	cmp	r0, r3
 800f562:	d3f9      	bcc.n	800f558 <HAL_Delay+0xc>
  {
  }
}
 800f564:	b002      	add	sp, #8
 800f566:	bd10      	pop	{r4, pc}

0800f568 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800f568:	4b01      	ldr	r3, [pc, #4]	; (800f570 <HAL_GetREVID+0x8>)
 800f56a:	6818      	ldr	r0, [r3, #0]
 800f56c:	0c00      	lsrs	r0, r0, #16
}
 800f56e:	4770      	bx	lr
 800f570:	40015800 	.word	0x40015800

0800f574 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800f574:	4b02      	ldr	r3, [pc, #8]	; (800f580 <HAL_GetDEVID+0xc>)
 800f576:	6818      	ldr	r0, [r3, #0]
 800f578:	0500      	lsls	r0, r0, #20
 800f57a:	0d00      	lsrs	r0, r0, #20
}
 800f57c:	4770      	bx	lr
 800f57e:	46c0      	nop			; (mov r8, r8)
 800f580:	40015800 	.word	0x40015800

0800f584 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f584:	2303      	movs	r3, #3
 800f586:	6802      	ldr	r2, [r0, #0]
{
 800f588:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f58a:	6891      	ldr	r1, [r2, #8]
{
 800f58c:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f58e:	400b      	ands	r3, r1
 800f590:	2b01      	cmp	r3, #1
 800f592:	d001      	beq.n	800f598 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800f594:	2000      	movs	r0, #0
}
 800f596:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f598:	6811      	ldr	r1, [r2, #0]
 800f59a:	420b      	tst	r3, r1
 800f59c:	d00e      	beq.n	800f5bc <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800f59e:	2305      	movs	r3, #5
 800f5a0:	6891      	ldr	r1, [r2, #8]
 800f5a2:	400b      	ands	r3, r1
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d00d      	beq.n	800f5c4 <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f5a8:	2210      	movs	r2, #16
 800f5aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800f5ac:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f5ae:	4313      	orrs	r3, r2
 800f5b0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f5b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f5b4:	3a0f      	subs	r2, #15
 800f5b6:	4313      	orrs	r3, r2
 800f5b8:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800f5ba:	e7ec      	b.n	800f596 <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f5bc:	68d3      	ldr	r3, [r2, #12]
 800f5be:	041b      	lsls	r3, r3, #16
 800f5c0:	d4ed      	bmi.n	800f59e <ADC_Disable+0x1a>
 800f5c2:	e7e7      	b.n	800f594 <ADC_Disable+0x10>
      __HAL_ADC_DISABLE(hadc);
 800f5c4:	2102      	movs	r1, #2
 800f5c6:	6893      	ldr	r3, [r2, #8]
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f5c8:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 800f5ca:	430b      	orrs	r3, r1
 800f5cc:	6093      	str	r3, [r2, #8]
 800f5ce:	2303      	movs	r3, #3
 800f5d0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800f5d2:	f7ff ffb5 	bl	800f540 <HAL_GetTick>
 800f5d6:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f5d8:	e004      	b.n	800f5e4 <ADC_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800f5da:	f7ff ffb1 	bl	800f540 <HAL_GetTick>
 800f5de:	1b80      	subs	r0, r0, r6
 800f5e0:	2802      	cmp	r0, #2
 800f5e2:	d804      	bhi.n	800f5ee <ADC_Disable+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f5e4:	6823      	ldr	r3, [r4, #0]
 800f5e6:	689b      	ldr	r3, [r3, #8]
 800f5e8:	421d      	tst	r5, r3
 800f5ea:	d1f6      	bne.n	800f5da <ADC_Disable+0x56>
 800f5ec:	e7d2      	b.n	800f594 <ADC_Disable+0x10>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f5ee:	2210      	movs	r2, #16
 800f5f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800f5f2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f5f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f5fa:	431d      	orrs	r5, r3
 800f5fc:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f5fe:	e7ca      	b.n	800f596 <ADC_Disable+0x12>

0800f600 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 800f600:	2300      	movs	r3, #0
{
 800f602:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f604:	6802      	ldr	r2, [r0, #0]
{
 800f606:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 800f608:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f60a:	6891      	ldr	r1, [r2, #8]
 800f60c:	3303      	adds	r3, #3
{
 800f60e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f610:	400b      	ands	r3, r1
 800f612:	2b01      	cmp	r3, #1
 800f614:	d031      	beq.n	800f67a <ADC_Enable+0x7a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f616:	6891      	ldr	r1, [r2, #8]
 800f618:	4b20      	ldr	r3, [pc, #128]	; (800f69c <ADC_Enable+0x9c>)
 800f61a:	4219      	tst	r1, r3
 800f61c:	d122      	bne.n	800f664 <ADC_Enable+0x64>
    __HAL_ADC_ENABLE(hadc);
 800f61e:	2101      	movs	r1, #1
 800f620:	6893      	ldr	r3, [r2, #8]
 800f622:	430b      	orrs	r3, r1
 800f624:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800f626:	4b1e      	ldr	r3, [pc, #120]	; (800f6a0 <ADC_Enable+0xa0>)
 800f628:	491e      	ldr	r1, [pc, #120]	; (800f6a4 <ADC_Enable+0xa4>)
 800f62a:	6818      	ldr	r0, [r3, #0]
 800f62c:	f7f0 fd90 	bl	8000150 <__udivsi3>
 800f630:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800f632:	9b01      	ldr	r3, [sp, #4]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d005      	beq.n	800f644 <ADC_Enable+0x44>
      wait_loop_index--;
 800f638:	9b01      	ldr	r3, [sp, #4]
 800f63a:	3b01      	subs	r3, #1
 800f63c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800f63e:	9b01      	ldr	r3, [sp, #4]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d1f9      	bne.n	800f638 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800f644:	f7ff ff7c 	bl	800f540 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f648:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800f64a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f64c:	e004      	b.n	800f658 <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f64e:	f7ff ff77 	bl	800f540 <HAL_GetTick>
 800f652:	1b80      	subs	r0, r0, r6
 800f654:	2802      	cmp	r0, #2
 800f656:	d818      	bhi.n	800f68a <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f658:	6823      	ldr	r3, [r4, #0]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	421d      	tst	r5, r3
 800f65e:	d0f6      	beq.n	800f64e <ADC_Enable+0x4e>
  return HAL_OK;
 800f660:	2000      	movs	r0, #0
 800f662:	e008      	b.n	800f676 <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f664:	2210      	movs	r2, #16
      return HAL_ERROR;
 800f666:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f668:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f66a:	4313      	orrs	r3, r2
 800f66c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f66e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f670:	3a0f      	subs	r2, #15
 800f672:	4313      	orrs	r3, r2
 800f674:	64a3      	str	r3, [r4, #72]	; 0x48
}
 800f676:	b002      	add	sp, #8
 800f678:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f67a:	6811      	ldr	r1, [r2, #0]
 800f67c:	420b      	tst	r3, r1
 800f67e:	d1ef      	bne.n	800f660 <ADC_Enable+0x60>
 800f680:	68d3      	ldr	r3, [r2, #12]
 800f682:	041b      	lsls	r3, r3, #16
 800f684:	d5c7      	bpl.n	800f616 <ADC_Enable+0x16>
  return HAL_OK;
 800f686:	2000      	movs	r0, #0
 800f688:	e7f5      	b.n	800f676 <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f68a:	2210      	movs	r2, #16
 800f68c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800f68e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f690:	4313      	orrs	r3, r2
 800f692:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f694:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f696:	431d      	orrs	r5, r3
 800f698:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f69a:	e7ec      	b.n	800f676 <ADC_Enable+0x76>
 800f69c:	80000017 	.word	0x80000017
 800f6a0:	200000b0 	.word	0x200000b0
 800f6a4:	000f4240 	.word	0x000f4240

0800f6a8 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f6a8:	2204      	movs	r2, #4
 800f6aa:	6803      	ldr	r3, [r0, #0]
{
 800f6ac:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f6ae:	6899      	ldr	r1, [r3, #8]
{
 800f6b0:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f6b2:	420a      	tst	r2, r1
 800f6b4:	d010      	beq.n	800f6d8 <ADC_ConversionStop+0x30>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f6b6:	6899      	ldr	r1, [r3, #8]
 800f6b8:	420a      	tst	r2, r1
 800f6ba:	d10f      	bne.n	800f6dc <ADC_ConversionStop+0x34>
      hadc->Instance->CR |= ADC_CR_ADSTP;
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800f6bc:	f7ff ff40 	bl	800f540 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f6c0:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 800f6c2:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f6c4:	e004      	b.n	800f6d0 <ADC_ConversionStop+0x28>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800f6c6:	f7ff ff3b 	bl	800f540 <HAL_GetTick>
 800f6ca:	1b80      	subs	r0, r0, r6
 800f6cc:	2802      	cmp	r0, #2
 800f6ce:	d80d      	bhi.n	800f6ec <ADC_ConversionStop+0x44>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f6d0:	6823      	ldr	r3, [r4, #0]
 800f6d2:	689b      	ldr	r3, [r3, #8]
 800f6d4:	421d      	tst	r5, r3
 800f6d6:	d1f6      	bne.n	800f6c6 <ADC_ConversionStop+0x1e>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800f6d8:	2000      	movs	r0, #0
}
 800f6da:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800f6dc:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f6de:	0792      	lsls	r2, r2, #30
 800f6e0:	d4ec      	bmi.n	800f6bc <ADC_ConversionStop+0x14>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800f6e2:	2110      	movs	r1, #16
 800f6e4:	689a      	ldr	r2, [r3, #8]
 800f6e6:	430a      	orrs	r2, r1
 800f6e8:	609a      	str	r2, [r3, #8]
 800f6ea:	e7e7      	b.n	800f6bc <ADC_ConversionStop+0x14>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f6ec:	2210      	movs	r2, #16
 800f6ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f6f0:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f6f2:	4313      	orrs	r3, r2
 800f6f4:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f6f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f6f8:	3a0f      	subs	r2, #15
 800f6fa:	4313      	orrs	r3, r2
 800f6fc:	64a3      	str	r3, [r4, #72]	; 0x48
 800f6fe:	e7ec      	b.n	800f6da <ADC_ConversionStop+0x32>

0800f700 <HAL_ADC_Init>:
{
 800f700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f702:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800f704:	d100      	bne.n	800f708 <HAL_ADC_Init+0x8>
 800f706:	e075      	b.n	800f7f4 <HAL_ADC_Init+0xf4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f708:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d068      	beq.n	800f7e0 <HAL_ADC_Init+0xe0>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f70e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f710:	06db      	lsls	r3, r3, #27
 800f712:	d505      	bpl.n	800f720 <HAL_ADC_Init+0x20>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f714:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 800f716:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f718:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f71a:	4313      	orrs	r3, r2
 800f71c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800f71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800f720:	2004      	movs	r0, #4
 800f722:	6823      	ldr	r3, [r4, #0]
 800f724:	689a      	ldr	r2, [r3, #8]
 800f726:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800f728:	d1f4      	bne.n	800f714 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800f72a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f72c:	4942      	ldr	r1, [pc, #264]	; (800f838 <HAL_ADC_Init+0x138>)
 800f72e:	400a      	ands	r2, r1
 800f730:	3106      	adds	r1, #6
 800f732:	31ff      	adds	r1, #255	; 0xff
 800f734:	430a      	orrs	r2, r1
 800f736:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f738:	2203      	movs	r2, #3
 800f73a:	6899      	ldr	r1, [r3, #8]
 800f73c:	400a      	ands	r2, r1
 800f73e:	2a01      	cmp	r2, #1
 800f740:	d073      	beq.n	800f82a <HAL_ADC_Init+0x12a>
      MODIFY_REG(hadc->Instance->CFGR1,
 800f742:	2118      	movs	r1, #24
 800f744:	68da      	ldr	r2, [r3, #12]
 800f746:	438a      	bics	r2, r1
 800f748:	68a1      	ldr	r1, [r4, #8]
 800f74a:	430a      	orrs	r2, r1
 800f74c:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800f74e:	691a      	ldr	r2, [r3, #16]
 800f750:	6861      	ldr	r1, [r4, #4]
 800f752:	0092      	lsls	r2, r2, #2
 800f754:	0892      	lsrs	r2, r2, #2
 800f756:	430a      	orrs	r2, r1
 800f758:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f75a:	68da      	ldr	r2, [r3, #12]
 800f75c:	4937      	ldr	r1, [pc, #220]	; (800f83c <HAL_ADC_Init+0x13c>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f75e:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f760:	400a      	ands	r2, r1
 800f762:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f764:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f766:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f768:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800f76a:	69e2      	ldr	r2, [r4, #28]
 800f76c:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f76e:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800f770:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f772:	3a01      	subs	r2, #1
 800f774:	1e55      	subs	r5, r2, #1
 800f776:	41aa      	sbcs	r2, r5
 800f778:	0315      	lsls	r5, r2, #12
 800f77a:	68e2      	ldr	r2, [r4, #12]
 800f77c:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f77e:	6922      	ldr	r2, [r4, #16]
 800f780:	4339      	orrs	r1, r7
 800f782:	2a02      	cmp	r2, #2
 800f784:	d100      	bne.n	800f788 <HAL_ADC_Init+0x88>
 800f786:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800f788:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f78a:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f78c:	430a      	orrs	r2, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f78e:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f790:	432a      	orrs	r2, r5
 800f792:	4302      	orrs	r2, r0
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f794:	2901      	cmp	r1, #1
 800f796:	d042      	beq.n	800f81e <HAL_ADC_Init+0x11e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f798:	20c2      	movs	r0, #194	; 0xc2
 800f79a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f79c:	30ff      	adds	r0, #255	; 0xff
 800f79e:	4281      	cmp	r1, r0
 800f7a0:	d002      	beq.n	800f7a8 <HAL_ADC_Init+0xa8>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800f7a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f7a4:	4301      	orrs	r1, r0
 800f7a6:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f7a8:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f7aa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f7ac:	4311      	orrs	r1, r2
 800f7ae:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f7b0:	2180      	movs	r1, #128	; 0x80
 800f7b2:	0549      	lsls	r1, r1, #21
 800f7b4:	428d      	cmp	r5, r1
 800f7b6:	d01f      	beq.n	800f7f8 <HAL_ADC_Init+0xf8>
 800f7b8:	1e69      	subs	r1, r5, #1
 800f7ba:	2906      	cmp	r1, #6
 800f7bc:	d91c      	bls.n	800f7f8 <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800f7be:	68db      	ldr	r3, [r3, #12]
 800f7c0:	491f      	ldr	r1, [pc, #124]	; (800f840 <HAL_ADC_Init+0x140>)
 800f7c2:	400b      	ands	r3, r1
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d020      	beq.n	800f80a <HAL_ADC_Init+0x10a>
      ADC_STATE_CLR_SET(hadc->State,
 800f7c8:	2212      	movs	r2, #18
 800f7ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 800f7cc:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800f7ce:	4393      	bics	r3, r2
 800f7d0:	3a02      	subs	r2, #2
 800f7d2:	4313      	orrs	r3, r2
 800f7d4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f7d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f7d8:	3a0f      	subs	r2, #15
 800f7da:	4313      	orrs	r3, r2
 800f7dc:	64a3      	str	r3, [r4, #72]	; 0x48
 800f7de:	e79e      	b.n	800f71e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800f7e0:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800f7e2:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800f7e4:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800f7e6:	f7f9 f863 	bl	80088b0 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f7ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f7ec:	06db      	lsls	r3, r3, #27
 800f7ee:	d500      	bpl.n	800f7f2 <HAL_ADC_Init+0xf2>
 800f7f0:	e790      	b.n	800f714 <HAL_ADC_Init+0x14>
 800f7f2:	e795      	b.n	800f720 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 800f7f4:	2001      	movs	r0, #1
 800f7f6:	e792      	b.n	800f71e <HAL_ADC_Init+0x1e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800f7f8:	2107      	movs	r1, #7
 800f7fa:	6958      	ldr	r0, [r3, #20]
 800f7fc:	4388      	bics	r0, r1
 800f7fe:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800f800:	6958      	ldr	r0, [r3, #20]
 800f802:	4029      	ands	r1, r5
 800f804:	4301      	orrs	r1, r0
 800f806:	6159      	str	r1, [r3, #20]
 800f808:	e7d9      	b.n	800f7be <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 800f80a:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f80c:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800f80e:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800f810:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f812:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f814:	4393      	bics	r3, r2
 800f816:	3a02      	subs	r2, #2
 800f818:	4313      	orrs	r3, r2
 800f81a:	6463      	str	r3, [r4, #68]	; 0x44
 800f81c:	e77f      	b.n	800f71e <HAL_ADC_Init+0x1e>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f81e:	2e00      	cmp	r6, #0
 800f820:	d1ba      	bne.n	800f798 <HAL_ADC_Init+0x98>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800f822:	2180      	movs	r1, #128	; 0x80
 800f824:	0249      	lsls	r1, r1, #9
 800f826:	430a      	orrs	r2, r1
 800f828:	e7b6      	b.n	800f798 <HAL_ADC_Init+0x98>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f82a:	6819      	ldr	r1, [r3, #0]
 800f82c:	420a      	tst	r2, r1
 800f82e:	d194      	bne.n	800f75a <HAL_ADC_Init+0x5a>
 800f830:	68da      	ldr	r2, [r3, #12]
 800f832:	0412      	lsls	r2, r2, #16
 800f834:	d491      	bmi.n	800f75a <HAL_ADC_Init+0x5a>
 800f836:	e784      	b.n	800f742 <HAL_ADC_Init+0x42>
 800f838:	fffffefd 	.word	0xfffffefd
 800f83c:	fffe0219 	.word	0xfffe0219
 800f840:	833fffe7 	.word	0x833fffe7

0800f844 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f844:	6803      	ldr	r3, [r0, #0]
{
 800f846:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f848:	689a      	ldr	r2, [r3, #8]
{
 800f84a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f84c:	0752      	lsls	r2, r2, #29
 800f84e:	d421      	bmi.n	800f894 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 800f850:	2240      	movs	r2, #64	; 0x40
 800f852:	5c81      	ldrb	r1, [r0, r2]
 800f854:	2901      	cmp	r1, #1
 800f856:	d01d      	beq.n	800f894 <HAL_ADC_Start+0x50>
 800f858:	2101      	movs	r1, #1
 800f85a:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f85c:	69c2      	ldr	r2, [r0, #28]
 800f85e:	2a01      	cmp	r2, #1
 800f860:	d112      	bne.n	800f888 <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 800f862:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f864:	490c      	ldr	r1, [pc, #48]	; (800f898 <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f866:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800f868:	4011      	ands	r1, r2
 800f86a:	2280      	movs	r2, #128	; 0x80
 800f86c:	0052      	lsls	r2, r2, #1
 800f86e:	430a      	orrs	r2, r1
 800f870:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800f872:	2140      	movs	r1, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 800f874:	2200      	movs	r2, #0
 800f876:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800f878:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f87a:	321c      	adds	r2, #28
 800f87c:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f87e:	689a      	ldr	r2, [r3, #8]
 800f880:	393c      	subs	r1, #60	; 0x3c
 800f882:	430a      	orrs	r2, r1
 800f884:	609a      	str	r2, [r3, #8]
}
 800f886:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800f888:	f7ff feba 	bl	800f600 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800f88c:	2800      	cmp	r0, #0
 800f88e:	d1fa      	bne.n	800f886 <HAL_ADC_Start+0x42>
 800f890:	6823      	ldr	r3, [r4, #0]
 800f892:	e7e6      	b.n	800f862 <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 800f894:	2002      	movs	r0, #2
 800f896:	e7f6      	b.n	800f886 <HAL_ADC_Start+0x42>
 800f898:	fffff0fe 	.word	0xfffff0fe

0800f89c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800f89c:	2340      	movs	r3, #64	; 0x40
{ 
 800f89e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800f8a0:	5cc2      	ldrb	r2, [r0, r3]
{ 
 800f8a2:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800f8a4:	2a01      	cmp	r2, #1
 800f8a6:	d014      	beq.n	800f8d2 <HAL_ADC_Stop+0x36>
 800f8a8:	2501      	movs	r5, #1
 800f8aa:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800f8ac:	f7ff fefc 	bl	800f6a8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800f8b0:	2800      	cmp	r0, #0
 800f8b2:	d003      	beq.n	800f8bc <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800f8b4:	2340      	movs	r3, #64	; 0x40
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	54e2      	strb	r2, [r4, r3]
}
 800f8ba:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800f8bc:	0020      	movs	r0, r4
 800f8be:	f7ff fe61 	bl	800f584 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800f8c2:	2800      	cmp	r0, #0
 800f8c4:	d1f6      	bne.n	800f8b4 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800f8c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f8c8:	4a03      	ldr	r2, [pc, #12]	; (800f8d8 <HAL_ADC_Stop+0x3c>)
 800f8ca:	4013      	ands	r3, r2
 800f8cc:	431d      	orrs	r5, r3
 800f8ce:	6465      	str	r5, [r4, #68]	; 0x44
 800f8d0:	e7f0      	b.n	800f8b4 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800f8d2:	2002      	movs	r0, #2
 800f8d4:	e7f1      	b.n	800f8ba <HAL_ADC_Stop+0x1e>
 800f8d6:	46c0      	nop			; (mov r8, r8)
 800f8d8:	fffffefe 	.word	0xfffffefe

0800f8dc <HAL_ADC_PollForConversion>:
{
 800f8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f8de:	6943      	ldr	r3, [r0, #20]
{
 800f8e0:	0006      	movs	r6, r0
 800f8e2:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f8e4:	2b08      	cmp	r3, #8
 800f8e6:	d04c      	beq.n	800f982 <HAL_ADC_PollForConversion+0xa6>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f8e8:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f8ea:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f8ec:	68db      	ldr	r3, [r3, #12]
 800f8ee:	07db      	lsls	r3, r3, #31
 800f8f0:	d43e      	bmi.n	800f970 <HAL_ADC_PollForConversion+0x94>
  tickstart = HAL_GetTick();
 800f8f2:	f7ff fe25 	bl	800f540 <HAL_GetTick>
 800f8f6:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f8f8:	6832      	ldr	r2, [r6, #0]
 800f8fa:	e001      	b.n	800f900 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 800f8fc:	1c63      	adds	r3, r4, #1
 800f8fe:	d127      	bne.n	800f950 <HAL_ADC_PollForConversion+0x74>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f900:	6813      	ldr	r3, [r2, #0]
 800f902:	421d      	tst	r5, r3
 800f904:	d0fa      	beq.n	800f8fc <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f906:	2380      	movs	r3, #128	; 0x80
 800f908:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800f90a:	009b      	lsls	r3, r3, #2
 800f90c:	430b      	orrs	r3, r1
 800f90e:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800f910:	23c0      	movs	r3, #192	; 0xc0
 800f912:	68d1      	ldr	r1, [r2, #12]
 800f914:	011b      	lsls	r3, r3, #4
 800f916:	4219      	tst	r1, r3
 800f918:	d113      	bne.n	800f942 <HAL_ADC_PollForConversion+0x66>
 800f91a:	6a33      	ldr	r3, [r6, #32]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d110      	bne.n	800f942 <HAL_ADC_PollForConversion+0x66>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800f920:	6813      	ldr	r3, [r2, #0]
 800f922:	071b      	lsls	r3, r3, #28
 800f924:	d50d      	bpl.n	800f942 <HAL_ADC_PollForConversion+0x66>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f926:	6893      	ldr	r3, [r2, #8]
 800f928:	075b      	lsls	r3, r3, #29
 800f92a:	d42f      	bmi.n	800f98c <HAL_ADC_PollForConversion+0xb0>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f92c:	210c      	movs	r1, #12
 800f92e:	6853      	ldr	r3, [r2, #4]
 800f930:	438b      	bics	r3, r1
 800f932:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800f934:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f936:	491a      	ldr	r1, [pc, #104]	; (800f9a0 <HAL_ADC_PollForConversion+0xc4>)
 800f938:	400b      	ands	r3, r1
 800f93a:	3104      	adds	r1, #4
 800f93c:	31ff      	adds	r1, #255	; 0xff
 800f93e:	430b      	orrs	r3, r1
 800f940:	6473      	str	r3, [r6, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f942:	69b3      	ldr	r3, [r6, #24]
  return HAL_OK;
 800f944:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f946:	2b00      	cmp	r3, #0
 800f948:	d101      	bne.n	800f94e <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f94a:	330c      	adds	r3, #12
 800f94c:	6013      	str	r3, [r2, #0]
}
 800f94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800f950:	2c00      	cmp	r4, #0
 800f952:	d004      	beq.n	800f95e <HAL_ADC_PollForConversion+0x82>
 800f954:	f7ff fdf4 	bl	800f540 <HAL_GetTick>
 800f958:	1bc0      	subs	r0, r0, r7
 800f95a:	42a0      	cmp	r0, r4
 800f95c:	d9cc      	bls.n	800f8f8 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f95e:	2204      	movs	r2, #4
 800f960:	6c73      	ldr	r3, [r6, #68]	; 0x44
        return HAL_TIMEOUT;
 800f962:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f964:	4313      	orrs	r3, r2
 800f966:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800f968:	2200      	movs	r2, #0
 800f96a:	2340      	movs	r3, #64	; 0x40
 800f96c:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800f96e:	e7ee      	b.n	800f94e <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f970:	2220      	movs	r2, #32
 800f972:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f974:	4313      	orrs	r3, r2
 800f976:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800f978:	2200      	movs	r2, #0
 800f97a:	2340      	movs	r3, #64	; 0x40
 800f97c:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800f97e:	2001      	movs	r0, #1
 800f980:	e7e5      	b.n	800f94e <HAL_ADC_PollForConversion+0x72>
  tickstart = HAL_GetTick();
 800f982:	f7ff fddd 	bl	800f540 <HAL_GetTick>
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f986:	2508      	movs	r5, #8
  tickstart = HAL_GetTick();
 800f988:	0007      	movs	r7, r0
 800f98a:	e7b5      	b.n	800f8f8 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f98c:	2120      	movs	r1, #32
 800f98e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f990:	430b      	orrs	r3, r1
 800f992:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f994:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800f996:	391f      	subs	r1, #31
 800f998:	430b      	orrs	r3, r1
 800f99a:	64b3      	str	r3, [r6, #72]	; 0x48
 800f99c:	e7d1      	b.n	800f942 <HAL_ADC_PollForConversion+0x66>
 800f99e:	46c0      	nop			; (mov r8, r8)
 800f9a0:	fffffefe 	.word	0xfffffefe

0800f9a4 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800f9a4:	2208      	movs	r2, #8
 800f9a6:	6803      	ldr	r3, [r0, #0]
 800f9a8:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800f9aa:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800f9ac:	4770      	bx	lr
 800f9ae:	46c0      	nop			; (mov r8, r8)

0800f9b0 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 800f9b0:	2300      	movs	r3, #0
{
 800f9b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9b4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800f9b6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800f9b8:	3340      	adds	r3, #64	; 0x40
 800f9ba:	5cc2      	ldrb	r2, [r0, r3]
{
 800f9bc:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800f9be:	2a01      	cmp	r2, #1
 800f9c0:	d044      	beq.n	800fa4c <HAL_ADC_ConfigChannel+0x9c>
 800f9c2:	2201      	movs	r2, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f9c4:	6826      	ldr	r6, [r4, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f9c6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  __HAL_LOCK(hadc);
 800f9c8:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f9ca:	68b3      	ldr	r3, [r6, #8]
 800f9cc:	075b      	lsls	r3, r3, #29
 800f9ce:	d509      	bpl.n	800f9e4 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f9d0:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 800f9d2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f9d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800f9da:	2340      	movs	r3, #64	; 0x40
 800f9dc:	2200      	movs	r2, #0
 800f9de:	54e2      	strb	r2, [r4, r3]
}
 800f9e0:	b003      	add	sp, #12
 800f9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9e4:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 800f9e6:	4d33      	ldr	r5, [pc, #204]	; (800fab4 <HAL_ADC_ConfigChannel+0x104>)
 800f9e8:	001f      	movs	r7, r3
 800f9ea:	46ac      	mov	ip, r5
 800f9ec:	684d      	ldr	r5, [r1, #4]
 800f9ee:	409a      	lsls	r2, r3
 800f9f0:	3f10      	subs	r7, #16
 800f9f2:	4565      	cmp	r5, ip
 800f9f4:	d02c      	beq.n	800fa50 <HAL_ADC_ConfigChannel+0xa0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800f9f6:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 800f9f8:	432a      	orrs	r2, r5
 800f9fa:	62b2      	str	r2, [r6, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f9fc:	2280      	movs	r2, #128	; 0x80
 800f9fe:	0552      	lsls	r2, r2, #21
 800fa00:	4290      	cmp	r0, r2
 800fa02:	d00f      	beq.n	800fa24 <HAL_ADC_ConfigChannel+0x74>
 800fa04:	3801      	subs	r0, #1
 800fa06:	2806      	cmp	r0, #6
 800fa08:	d90c      	bls.n	800fa24 <HAL_ADC_ConfigChannel+0x74>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800fa0a:	2207      	movs	r2, #7
 800fa0c:	6888      	ldr	r0, [r1, #8]
 800fa0e:	6971      	ldr	r1, [r6, #20]
 800fa10:	4011      	ands	r1, r2
 800fa12:	4288      	cmp	r0, r1
 800fa14:	d006      	beq.n	800fa24 <HAL_ADC_ConfigChannel+0x74>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fa16:	6971      	ldr	r1, [r6, #20]
 800fa18:	4391      	bics	r1, r2
 800fa1a:	6171      	str	r1, [r6, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800fa1c:	6971      	ldr	r1, [r6, #20]
 800fa1e:	4002      	ands	r2, r0
 800fa20:	430a      	orrs	r2, r1
 800fa22:	6172      	str	r2, [r6, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fa24:	2f02      	cmp	r7, #2
 800fa26:	d80f      	bhi.n	800fa48 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fa28:	4923      	ldr	r1, [pc, #140]	; (800fab8 <HAL_ADC_ConfigChannel+0x108>)
 800fa2a:	680a      	ldr	r2, [r1, #0]
 800fa2c:	2b10      	cmp	r3, #16
 800fa2e:	d029      	beq.n	800fa84 <HAL_ADC_ConfigChannel+0xd4>
 800fa30:	3b11      	subs	r3, #17
 800fa32:	4258      	negs	r0, r3
 800fa34:	4143      	adcs	r3, r0
 800fa36:	4821      	ldr	r0, [pc, #132]	; (800fabc <HAL_ADC_ConfigChannel+0x10c>)
 800fa38:	425b      	negs	r3, r3
 800fa3a:	4003      	ands	r3, r0
 800fa3c:	2080      	movs	r0, #128	; 0x80
 800fa3e:	0440      	lsls	r0, r0, #17
 800fa40:	4684      	mov	ip, r0
 800fa42:	4463      	add	r3, ip
 800fa44:	4313      	orrs	r3, r2
 800fa46:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fa48:	2000      	movs	r0, #0
 800fa4a:	e7c6      	b.n	800f9da <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 800fa4c:	2002      	movs	r0, #2
 800fa4e:	e7c7      	b.n	800f9e0 <HAL_ADC_ConfigChannel+0x30>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fa50:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800fa52:	4391      	bics	r1, r2
 800fa54:	62b1      	str	r1, [r6, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fa56:	2f02      	cmp	r7, #2
 800fa58:	d8f6      	bhi.n	800fa48 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fa5a:	4a17      	ldr	r2, [pc, #92]	; (800fab8 <HAL_ADC_ConfigChannel+0x108>)
 800fa5c:	6811      	ldr	r1, [r2, #0]
 800fa5e:	2b10      	cmp	r3, #16
 800fa60:	d00e      	beq.n	800fa80 <HAL_ADC_ConfigChannel+0xd0>
 800fa62:	3b11      	subs	r3, #17
 800fa64:	001a      	movs	r2, r3
 800fa66:	1e53      	subs	r3, r2, #1
 800fa68:	419a      	sbcs	r2, r3
 800fa6a:	4b14      	ldr	r3, [pc, #80]	; (800fabc <HAL_ADC_ConfigChannel+0x10c>)
 800fa6c:	4252      	negs	r2, r2
 800fa6e:	4013      	ands	r3, r2
 800fa70:	4a13      	ldr	r2, [pc, #76]	; (800fac0 <HAL_ADC_ConfigChannel+0x110>)
 800fa72:	4694      	mov	ip, r2
 800fa74:	4463      	add	r3, ip
 800fa76:	4a10      	ldr	r2, [pc, #64]	; (800fab8 <HAL_ADC_ConfigChannel+0x108>)
 800fa78:	400b      	ands	r3, r1
 800fa7a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fa7c:	2000      	movs	r0, #0
 800fa7e:	e7ac      	b.n	800f9da <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fa80:	4b10      	ldr	r3, [pc, #64]	; (800fac4 <HAL_ADC_ConfigChannel+0x114>)
 800fa82:	e7f8      	b.n	800fa76 <HAL_ADC_ConfigChannel+0xc6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fa84:	2380      	movs	r3, #128	; 0x80
 800fa86:	041b      	lsls	r3, r3, #16
 800fa88:	431a      	orrs	r2, r3
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800fa8a:	4b0f      	ldr	r3, [pc, #60]	; (800fac8 <HAL_ADC_ConfigChannel+0x118>)
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fa8c:	600a      	str	r2, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800fa8e:	6818      	ldr	r0, [r3, #0]
 800fa90:	490e      	ldr	r1, [pc, #56]	; (800facc <HAL_ADC_ConfigChannel+0x11c>)
 800fa92:	f7f0 fb5d 	bl	8000150 <__udivsi3>
 800fa96:	0083      	lsls	r3, r0, #2
 800fa98:	1818      	adds	r0, r3, r0
 800fa9a:	0040      	lsls	r0, r0, #1
 800fa9c:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 800fa9e:	9b01      	ldr	r3, [sp, #4]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d0d1      	beq.n	800fa48 <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 800faa4:	9b01      	ldr	r3, [sp, #4]
 800faa6:	3b01      	subs	r3, #1
 800faa8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800faaa:	9b01      	ldr	r3, [sp, #4]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d1f9      	bne.n	800faa4 <HAL_ADC_ConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fab0:	2000      	movs	r0, #0
 800fab2:	e792      	b.n	800f9da <HAL_ADC_ConfigChannel+0x2a>
 800fab4:	00001001 	.word	0x00001001
 800fab8:	40012708 	.word	0x40012708
 800fabc:	ff400000 	.word	0xff400000
 800fac0:	ffbfffff 	.word	0xffbfffff
 800fac4:	ff7fffff 	.word	0xff7fffff
 800fac8:	200000b0 	.word	0x200000b0
 800facc:	000f4240 	.word	0x000f4240

0800fad0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fad0:	22ff      	movs	r2, #255	; 0xff
 800fad2:	2303      	movs	r3, #3
 800fad4:	b530      	push	{r4, r5, lr}
 800fad6:	0014      	movs	r4, r2
 800fad8:	b2c5      	uxtb	r5, r0
 800fada:	402b      	ands	r3, r5
 800fadc:	00db      	lsls	r3, r3, #3
 800fade:	409c      	lsls	r4, r3
 800fae0:	0189      	lsls	r1, r1, #6
 800fae2:	400a      	ands	r2, r1
 800fae4:	43e4      	mvns	r4, r4
 800fae6:	409a      	lsls	r2, r3
  if((int32_t)(IRQn) < 0) {
 800fae8:	2800      	cmp	r0, #0
 800faea:	db0b      	blt.n	800fb04 <HAL_NVIC_SetPriority+0x34>
 800faec:	4b0c      	ldr	r3, [pc, #48]	; (800fb20 <HAL_NVIC_SetPriority+0x50>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800faee:	0880      	lsrs	r0, r0, #2
 800faf0:	469c      	mov	ip, r3
 800faf2:	23c0      	movs	r3, #192	; 0xc0
 800faf4:	0080      	lsls	r0, r0, #2
 800faf6:	4460      	add	r0, ip
 800faf8:	009b      	lsls	r3, r3, #2
 800fafa:	58c1      	ldr	r1, [r0, r3]
 800fafc:	400c      	ands	r4, r1
 800fafe:	4322      	orrs	r2, r4
 800fb00:	50c2      	str	r2, [r0, r3]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800fb02:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fb04:	230f      	movs	r3, #15
 800fb06:	4907      	ldr	r1, [pc, #28]	; (800fb24 <HAL_NVIC_SetPriority+0x54>)
 800fb08:	402b      	ands	r3, r5
 800fb0a:	468c      	mov	ip, r1
 800fb0c:	3b08      	subs	r3, #8
 800fb0e:	089b      	lsrs	r3, r3, #2
 800fb10:	009b      	lsls	r3, r3, #2
 800fb12:	4463      	add	r3, ip
 800fb14:	69d9      	ldr	r1, [r3, #28]
 800fb16:	400c      	ands	r4, r1
 800fb18:	4322      	orrs	r2, r4
 800fb1a:	61da      	str	r2, [r3, #28]
 800fb1c:	e7f1      	b.n	800fb02 <HAL_NVIC_SetPriority+0x32>
 800fb1e:	46c0      	nop			; (mov r8, r8)
 800fb20:	e000e100 	.word	0xe000e100
 800fb24:	e000ed00 	.word	0xe000ed00

0800fb28 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fb28:	231f      	movs	r3, #31
 800fb2a:	4018      	ands	r0, r3
 800fb2c:	3b1e      	subs	r3, #30
 800fb2e:	4083      	lsls	r3, r0
 800fb30:	4a01      	ldr	r2, [pc, #4]	; (800fb38 <HAL_NVIC_EnableIRQ+0x10>)
 800fb32:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800fb34:	4770      	bx	lr
 800fb36:	46c0      	nop			; (mov r8, r8)
 800fb38:	e000e100 	.word	0xe000e100

0800fb3c <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fb3c:	231f      	movs	r3, #31
 800fb3e:	4018      	ands	r0, r3
 800fb40:	3b1e      	subs	r3, #30
 800fb42:	4083      	lsls	r3, r0
 800fb44:	2280      	movs	r2, #128	; 0x80
 800fb46:	4901      	ldr	r1, [pc, #4]	; (800fb4c <HAL_NVIC_DisableIRQ+0x10>)
 800fb48:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800fb4a:	4770      	bx	lr
 800fb4c:	e000e100 	.word	0xe000e100

0800fb50 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800fb50:	4a0a      	ldr	r2, [pc, #40]	; (800fb7c <HAL_SYSTICK_Config+0x2c>)
 800fb52:	1e43      	subs	r3, r0, #1
 800fb54:	2001      	movs	r0, #1
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d80e      	bhi.n	800fb78 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fb5a:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fb5c:	4a08      	ldr	r2, [pc, #32]	; (800fb80 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fb5e:	4809      	ldr	r0, [pc, #36]	; (800fb84 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fb60:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fb62:	6a03      	ldr	r3, [r0, #32]
 800fb64:	0609      	lsls	r1, r1, #24
 800fb66:	021b      	lsls	r3, r3, #8
 800fb68:	0a1b      	lsrs	r3, r3, #8
 800fb6a:	430b      	orrs	r3, r1
 800fb6c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fb6e:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fb70:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fb72:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fb74:	3307      	adds	r3, #7
 800fb76:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800fb78:	4770      	bx	lr
 800fb7a:	46c0      	nop			; (mov r8, r8)
 800fb7c:	00ffffff 	.word	0x00ffffff
 800fb80:	e000e010 	.word	0xe000e010
 800fb84:	e000ed00 	.word	0xe000ed00

0800fb88 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fb88:	4a05      	ldr	r2, [pc, #20]	; (800fba0 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 800fb8a:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800fb8c:	2804      	cmp	r0, #4
 800fb8e:	d003      	beq.n	800fb98 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800fb90:	2104      	movs	r1, #4
 800fb92:	438b      	bics	r3, r1
 800fb94:	6013      	str	r3, [r2, #0]
  }
}
 800fb96:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fb98:	4318      	orrs	r0, r3
 800fb9a:	6010      	str	r0, [r2, #0]
 800fb9c:	e7fb      	b.n	800fb96 <HAL_SYSTICK_CLKSourceConfig+0xe>
 800fb9e:	46c0      	nop			; (mov r8, r8)
 800fba0:	e000e010 	.word	0xe000e010

0800fba4 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800fba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fba6:	468c      	mov	ip, r1
 800fba8:	6806      	ldr	r6, [r0, #0]
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800fbaa:	0891      	lsrs	r1, r2, #2
 800fbac:	d010      	beq.n	800fbd0 <CRC_Handle_8+0x2c>
 800fbae:	4664      	mov	r4, ip
 800fbb0:	008f      	lsls	r7, r1, #2
 800fbb2:	4467      	add	r7, ip
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800fbb4:	7823      	ldrb	r3, [r4, #0]
 800fbb6:	7865      	ldrb	r5, [r4, #1]
 800fbb8:	061b      	lsls	r3, r3, #24
 800fbba:	042d      	lsls	r5, r5, #16
 800fbbc:	432b      	orrs	r3, r5
 800fbbe:	78e5      	ldrb	r5, [r4, #3]
 800fbc0:	432b      	orrs	r3, r5
 800fbc2:	78a5      	ldrb	r5, [r4, #2]
 800fbc4:	3404      	adds	r4, #4
 800fbc6:	022d      	lsls	r5, r5, #8
 800fbc8:	432b      	orrs	r3, r5
 800fbca:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 800fbcc:	42a7      	cmp	r7, r4
 800fbce:	d1f1      	bne.n	800fbb4 <CRC_Handle_8+0x10>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800fbd0:	2303      	movs	r3, #3
 800fbd2:	401a      	ands	r2, r3
 800fbd4:	d00b      	beq.n	800fbee <CRC_Handle_8+0x4a>
   {
     if  (BufferLength%4 == 1)
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800fbd6:	0089      	lsls	r1, r1, #2
 800fbd8:	4663      	mov	r3, ip
     if  (BufferLength%4 == 1)
 800fbda:	2a01      	cmp	r2, #1
 800fbdc:	d013      	beq.n	800fc06 <CRC_Handle_8+0x62>
     }
     if  (BufferLength%4 == 2)
 800fbde:	2a02      	cmp	r2, #2
 800fbe0:	d107      	bne.n	800fbf2 <CRC_Handle_8+0x4e>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800fbe2:	5c5a      	ldrb	r2, [r3, r1]
 800fbe4:	4461      	add	r1, ip
 800fbe6:	784b      	ldrb	r3, [r1, #1]
 800fbe8:	0212      	lsls	r2, r2, #8
 800fbea:	4313      	orrs	r3, r2
 800fbec:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800fbee:	6830      	ldr	r0, [r6, #0]
}
 800fbf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800fbf2:	5c5a      	ldrb	r2, [r3, r1]
 800fbf4:	4461      	add	r1, ip
 800fbf6:	784b      	ldrb	r3, [r1, #1]
 800fbf8:	0212      	lsls	r2, r2, #8
 800fbfa:	4313      	orrs	r3, r2
 800fbfc:	8033      	strh	r3, [r6, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800fbfe:	788b      	ldrb	r3, [r1, #2]
 800fc00:	7033      	strb	r3, [r6, #0]
 800fc02:	6806      	ldr	r6, [r0, #0]
 800fc04:	e7f3      	b.n	800fbee <CRC_Handle_8+0x4a>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800fc06:	5ccb      	ldrb	r3, [r1, r3]
 800fc08:	7033      	strb	r3, [r6, #0]
 800fc0a:	6806      	ldr	r6, [r0, #0]
 800fc0c:	e7ef      	b.n	800fbee <CRC_Handle_8+0x4a>
 800fc0e:	46c0      	nop			; (mov r8, r8)

0800fc10 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800fc10:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800fc12:	0857      	lsrs	r7, r2, #1
 800fc14:	6805      	ldr	r5, [r0, #0]
 800fc16:	d00a      	beq.n	800fc2e <CRC_Handle_16+0x1e>
 800fc18:	0008      	movs	r0, r1
 800fc1a:	00be      	lsls	r6, r7, #2
 800fc1c:	1876      	adds	r6, r6, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800fc1e:	8803      	ldrh	r3, [r0, #0]
 800fc20:	8844      	ldrh	r4, [r0, #2]
 800fc22:	041b      	lsls	r3, r3, #16
 800fc24:	4323      	orrs	r3, r4
 800fc26:	3004      	adds	r0, #4
 800fc28:	602b      	str	r3, [r5, #0]
  for(i = 0; i < (BufferLength/2); i++)
 800fc2a:	4286      	cmp	r6, r0
 800fc2c:	d1f7      	bne.n	800fc1e <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800fc2e:	07d3      	lsls	r3, r2, #31
 800fc30:	d502      	bpl.n	800fc38 <CRC_Handle_16+0x28>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800fc32:	00bf      	lsls	r7, r7, #2
 800fc34:	5a7b      	ldrh	r3, [r7, r1]
 800fc36:	802b      	strh	r3, [r5, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800fc38:	6828      	ldr	r0, [r5, #0]
}
 800fc3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc3c <HAL_CRC_Init>:
{
 800fc3c:	b510      	push	{r4, lr}
 800fc3e:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800fc40:	d01f      	beq.n	800fc82 <HAL_CRC_Init+0x46>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800fc42:	7f43      	ldrb	r3, [r0, #29]
 800fc44:	b2db      	uxtb	r3, r3
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d01d      	beq.n	800fc86 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fc4a:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fc4c:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fc4e:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fc50:	f000 f8ae 	bl	800fdb0 <HAL_CRCEx_Init>
 800fc54:	2800      	cmp	r0, #0
 800fc56:	d114      	bne.n	800fc82 <HAL_CRC_Init+0x46>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800fc58:	7963      	ldrb	r3, [r4, #5]
 800fc5a:	6822      	ldr	r2, [r4, #0]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d01d      	beq.n	800fc9c <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800fc60:	6923      	ldr	r3, [r4, #16]
 800fc62:	6113      	str	r3, [r2, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800fc64:	2160      	movs	r1, #96	; 0x60
 800fc66:	6893      	ldr	r3, [r2, #8]
 800fc68:	438b      	bics	r3, r1
 800fc6a:	6961      	ldr	r1, [r4, #20]
 800fc6c:	430b      	orrs	r3, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800fc6e:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800fc70:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800fc72:	6893      	ldr	r3, [r2, #8]
 800fc74:	438b      	bics	r3, r1
 800fc76:	69a1      	ldr	r1, [r4, #24]
 800fc78:	430b      	orrs	r3, r1
 800fc7a:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800fc80:	e000      	b.n	800fc84 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800fc82:	2001      	movs	r0, #1
}
 800fc84:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800fc86:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800fc88:	f7fc fdce 	bl	800c828 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fc8c:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fc8e:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fc90:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fc92:	f000 f88d 	bl	800fdb0 <HAL_CRCEx_Init>
 800fc96:	2800      	cmp	r0, #0
 800fc98:	d0de      	beq.n	800fc58 <HAL_CRC_Init+0x1c>
 800fc9a:	e7f2      	b.n	800fc82 <HAL_CRC_Init+0x46>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800fc9c:	3b01      	subs	r3, #1
 800fc9e:	6113      	str	r3, [r2, #16]
 800fca0:	e7e0      	b.n	800fc64 <HAL_CRC_Init+0x28>
 800fca2:	46c0      	nop			; (mov r8, r8)

0800fca4 <HAL_CRC_Accumulate>:
{
 800fca4:	b510      	push	{r4, lr}
  __HAL_LOCK(hcrc); 
 800fca6:	7f03      	ldrb	r3, [r0, #28]
{
 800fca8:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800fcaa:	2b01      	cmp	r3, #1
 800fcac:	d021      	beq.n	800fcf2 <HAL_CRC_Accumulate+0x4e>
 800fcae:	2301      	movs	r3, #1
 800fcb0:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800fcb6:	6a03      	ldr	r3, [r0, #32]
 800fcb8:	2b02      	cmp	r3, #2
 800fcba:	d017      	beq.n	800fcec <HAL_CRC_Accumulate+0x48>
 800fcbc:	2b03      	cmp	r3, #3
 800fcbe:	d00a      	beq.n	800fcd6 <HAL_CRC_Accumulate+0x32>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800fcc0:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800fcc2:	2b01      	cmp	r3, #1
 800fcc4:	d102      	bne.n	800fccc <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800fcc6:	0020      	movs	r0, r4
 800fcc8:	f7ff ff6c 	bl	800fba4 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY; 
 800fccc:	2301      	movs	r3, #1
 800fcce:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	7723      	strb	r3, [r4, #28]
}
 800fcd4:	bd10      	pop	{r4, pc}
 800fcd6:	6800      	ldr	r0, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800fcd8:	2a00      	cmp	r2, #0
 800fcda:	d005      	beq.n	800fce8 <HAL_CRC_Accumulate+0x44>
 800fcdc:	0092      	lsls	r2, r2, #2
 800fcde:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800fce0:	c908      	ldmia	r1!, {r3}
 800fce2:	6003      	str	r3, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800fce4:	428a      	cmp	r2, r1
 800fce6:	d1fb      	bne.n	800fce0 <HAL_CRC_Accumulate+0x3c>
      temp = hcrc->Instance->DR;
 800fce8:	6800      	ldr	r0, [r0, #0]
      break;
 800fcea:	e7ef      	b.n	800fccc <HAL_CRC_Accumulate+0x28>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800fcec:	f7ff ff90 	bl	800fc10 <CRC_Handle_16>
      break;
 800fcf0:	e7ec      	b.n	800fccc <HAL_CRC_Accumulate+0x28>
  __HAL_LOCK(hcrc); 
 800fcf2:	2002      	movs	r0, #2
 800fcf4:	e7ee      	b.n	800fcd4 <HAL_CRC_Accumulate+0x30>
 800fcf6:	46c0      	nop			; (mov r8, r8)

0800fcf8 <HAL_CRC_Calculate>:
{
 800fcf8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hcrc); 
 800fcfa:	7f03      	ldrb	r3, [r0, #28]
{
 800fcfc:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800fcfe:	2b01      	cmp	r3, #1
 800fd00:	d026      	beq.n	800fd50 <HAL_CRC_Calculate+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800fd02:	2302      	movs	r3, #2
  __HAL_LOCK(hcrc); 
 800fd04:	2501      	movs	r5, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 800fd06:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800fd08:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hcrc); 
 800fd0a:	7705      	strb	r5, [r0, #28]
  __HAL_CRC_DR_RESET(hcrc);
 800fd0c:	6898      	ldr	r0, [r3, #8]
 800fd0e:	4328      	orrs	r0, r5
 800fd10:	6098      	str	r0, [r3, #8]
  switch (hcrc->InputDataFormat)
 800fd12:	6a20      	ldr	r0, [r4, #32]
 800fd14:	2802      	cmp	r0, #2
 800fd16:	d017      	beq.n	800fd48 <HAL_CRC_Calculate+0x50>
 800fd18:	2803      	cmp	r0, #3
 800fd1a:	d007      	beq.n	800fd2c <HAL_CRC_Calculate+0x34>
 800fd1c:	2801      	cmp	r0, #1
 800fd1e:	d00f      	beq.n	800fd40 <HAL_CRC_Calculate+0x48>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800fd20:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 800fd22:	2301      	movs	r3, #1
 800fd24:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800fd26:	2300      	movs	r3, #0
 800fd28:	7723      	strb	r3, [r4, #28]
}
 800fd2a:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800fd2c:	2a00      	cmp	r2, #0
 800fd2e:	d005      	beq.n	800fd3c <HAL_CRC_Calculate+0x44>
 800fd30:	0092      	lsls	r2, r2, #2
 800fd32:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800fd34:	c901      	ldmia	r1!, {r0}
 800fd36:	6018      	str	r0, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 800fd38:	4291      	cmp	r1, r2
 800fd3a:	d1fb      	bne.n	800fd34 <HAL_CRC_Calculate+0x3c>
      temp = hcrc->Instance->DR;
 800fd3c:	6818      	ldr	r0, [r3, #0]
      break;
 800fd3e:	e7f0      	b.n	800fd22 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800fd40:	0020      	movs	r0, r4
 800fd42:	f7ff ff2f 	bl	800fba4 <CRC_Handle_8>
      break;
 800fd46:	e7ec      	b.n	800fd22 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800fd48:	0020      	movs	r0, r4
 800fd4a:	f7ff ff61 	bl	800fc10 <CRC_Handle_16>
      break;
 800fd4e:	e7e8      	b.n	800fd22 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800fd50:	2002      	movs	r0, #2
 800fd52:	e7ea      	b.n	800fd2a <HAL_CRC_Calculate+0x32>

0800fd54 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800fd54:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800fd56:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800fd58:	2501      	movs	r5, #1
 800fd5a:	e001      	b.n	800fd60 <HAL_CRCEx_Polynomial_Set+0xc>
 800fd5c:	3b01      	subs	r3, #1
 800fd5e:	d312      	bcc.n	800fd86 <HAL_CRCEx_Polynomial_Set+0x32>
 800fd60:	002c      	movs	r4, r5
 800fd62:	409c      	lsls	r4, r3
 800fd64:	4221      	tst	r1, r4
 800fd66:	d0f9      	beq.n	800fd5c <HAL_CRCEx_Polynomial_Set+0x8>
  {}

  switch (PolyLength)
 800fd68:	2a10      	cmp	r2, #16
 800fd6a:	d01c      	beq.n	800fda6 <HAL_CRCEx_Polynomial_Set+0x52>
 800fd6c:	2a18      	cmp	r2, #24
 800fd6e:	d012      	beq.n	800fd96 <HAL_CRCEx_Polynomial_Set+0x42>
 800fd70:	2a08      	cmp	r2, #8
 800fd72:	d014      	beq.n	800fd9e <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800fd74:	6800      	ldr	r0, [r0, #0]
 800fd76:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800fd78:	2118      	movs	r1, #24
 800fd7a:	6883      	ldr	r3, [r0, #8]
 800fd7c:	438b      	bics	r3, r1
 800fd7e:	431a      	orrs	r2, r3
 800fd80:	6082      	str	r2, [r0, #8]
 800fd82:	2000      	movs	r0, #0
  
  /* Return function status */
  return HAL_OK;
}
 800fd84:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 800fd86:	2a10      	cmp	r2, #16
 800fd88:	d003      	beq.n	800fd92 <HAL_CRCEx_Polynomial_Set+0x3e>
 800fd8a:	2a18      	cmp	r2, #24
 800fd8c:	d001      	beq.n	800fd92 <HAL_CRCEx_Polynomial_Set+0x3e>
 800fd8e:	2a08      	cmp	r2, #8
 800fd90:	d1f0      	bne.n	800fd74 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800fd92:	2001      	movs	r0, #1
 800fd94:	e7f6      	b.n	800fd84 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_7B)
 800fd96:	2b06      	cmp	r3, #6
 800fd98:	d9ec      	bls.n	800fd74 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800fd9a:	2001      	movs	r0, #1
 800fd9c:	e7f2      	b.n	800fd84 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_16B)
 800fd9e:	2b0f      	cmp	r3, #15
 800fda0:	d9e8      	bls.n	800fd74 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800fda2:	2001      	movs	r0, #1
 800fda4:	e7ee      	b.n	800fd84 <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_8B)
 800fda6:	2b07      	cmp	r3, #7
 800fda8:	d9e4      	bls.n	800fd74 <HAL_CRCEx_Polynomial_Set+0x20>
        return  HAL_ERROR;
 800fdaa:	2001      	movs	r0, #1
 800fdac:	e7ea      	b.n	800fd84 <HAL_CRCEx_Polynomial_Set+0x30>
 800fdae:	46c0      	nop			; (mov r8, r8)

0800fdb0 <HAL_CRCEx_Init>:
{
 800fdb0:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800fdb2:	7903      	ldrb	r3, [r0, #4]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d108      	bne.n	800fdca <HAL_CRCEx_Init+0x1a>
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800fdb8:	2118      	movs	r1, #24
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800fdba:	6803      	ldr	r3, [r0, #0]
   return HAL_OK;
 800fdbc:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800fdbe:	4a07      	ldr	r2, [pc, #28]	; (800fddc <HAL_CRCEx_Init+0x2c>)
 800fdc0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800fdc2:	689a      	ldr	r2, [r3, #8]
 800fdc4:	438a      	bics	r2, r1
 800fdc6:	609a      	str	r2, [r3, #8]
}
 800fdc8:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800fdca:	68c2      	ldr	r2, [r0, #12]
 800fdcc:	6881      	ldr	r1, [r0, #8]
 800fdce:	f7ff ffc1 	bl	800fd54 <HAL_CRCEx_Polynomial_Set>
 800fdd2:	1e43      	subs	r3, r0, #1
 800fdd4:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 800fdd6:	b2c0      	uxtb	r0, r0
 800fdd8:	e7f6      	b.n	800fdc8 <HAL_CRCEx_Init+0x18>
 800fdda:	46c0      	nop			; (mov r8, r8)
 800fddc:	04c11db7 	.word	0x04c11db7

0800fde0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800fde0:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800fde2:	2800      	cmp	r0, #0
 800fde4:	d023      	beq.n	800fe2e <HAL_DMA_Init+0x4e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 800fde6:	2321      	movs	r3, #33	; 0x21
 800fde8:	5cc3      	ldrb	r3, [r0, r3]
 800fdea:	b2db      	uxtb	r3, r3
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d01b      	beq.n	800fe28 <HAL_DMA_Init+0x48>
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800fdf0:	2121      	movs	r1, #33	; 0x21
 800fdf2:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800fdf4:	6804      	ldr	r4, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800fdf6:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 800fdf8:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800fdfa:	4a0e      	ldr	r2, [pc, #56]	; (800fe34 <HAL_DMA_Init+0x54>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800fdfc:	6885      	ldr	r5, [r0, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800fdfe:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800fe00:	6843      	ldr	r3, [r0, #4]
 800fe02:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fe04:	68c5      	ldr	r5, [r0, #12]
 800fe06:	432b      	orrs	r3, r5
 800fe08:	6905      	ldr	r5, [r0, #16]
 800fe0a:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fe0c:	6945      	ldr	r5, [r0, #20]
 800fe0e:	432b      	orrs	r3, r5
 800fe10:	6985      	ldr	r5, [r0, #24]
 800fe12:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800fe14:	69c5      	ldr	r5, [r0, #28]
 800fe16:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800fe18:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800fe1a:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800fe20:	3301      	adds	r3, #1
 800fe22:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 800fe24:	2000      	movs	r0, #0
}  
 800fe26:	bd30      	pop	{r4, r5, pc}
    hdma->Lock = HAL_UNLOCKED;
 800fe28:	2220      	movs	r2, #32
 800fe2a:	5483      	strb	r3, [r0, r2]
 800fe2c:	e7e0      	b.n	800fdf0 <HAL_DMA_Init+0x10>
    return HAL_ERROR;
 800fe2e:	2001      	movs	r0, #1
 800fe30:	e7f9      	b.n	800fe26 <HAL_DMA_Init+0x46>
 800fe32:	46c0      	nop			; (mov r8, r8)
 800fe34:	ffffc00f 	.word	0xffffc00f

0800fe38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fe38:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800fe3a:	2420      	movs	r4, #32
 800fe3c:	5d05      	ldrb	r5, [r0, r4]
 800fe3e:	2d01      	cmp	r5, #1
 800fe40:	d023      	beq.n	800fe8a <HAL_DMA_Start_IT+0x52>
 800fe42:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800fe44:	2502      	movs	r5, #2
  __HAL_LOCK(hdma);
 800fe46:	5506      	strb	r6, [r0, r4]
  hdma->State = HAL_DMA_STATE_BUSY;  
 800fe48:	3401      	adds	r4, #1
 800fe4a:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800fe4c:	6804      	ldr	r4, [r0, #0]
 800fe4e:	6825      	ldr	r5, [r4, #0]
 800fe50:	43b5      	bics	r5, r6
 800fe52:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800fe54:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fe56:	6843      	ldr	r3, [r0, #4]
 800fe58:	2b10      	cmp	r3, #16
 800fe5a:	d013      	beq.n	800fe84 <HAL_DMA_Start_IT+0x4c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800fe5c:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800fe5e:	60e2      	str	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800fe60:	2202      	movs	r2, #2
  return HAL_OK;    
 800fe62:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800fe64:	6823      	ldr	r3, [r4, #0]
 800fe66:	4313      	orrs	r3, r2
 800fe68:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800fe6a:	6823      	ldr	r3, [r4, #0]
 800fe6c:	3202      	adds	r2, #2
 800fe6e:	4313      	orrs	r3, r2
 800fe70:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800fe72:	6823      	ldr	r3, [r4, #0]
 800fe74:	3204      	adds	r2, #4
 800fe76:	4313      	orrs	r3, r2
 800fe78:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 800fe7a:	6823      	ldr	r3, [r4, #0]
 800fe7c:	3a07      	subs	r2, #7
 800fe7e:	4313      	orrs	r3, r2
 800fe80:	6023      	str	r3, [r4, #0]
} 
 800fe82:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800fe84:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800fe86:	60e1      	str	r1, [r4, #12]
 800fe88:	e7ea      	b.n	800fe60 <HAL_DMA_Start_IT+0x28>
  __HAL_LOCK(hdma);
 800fe8a:	2002      	movs	r0, #2
 800fe8c:	e7f9      	b.n	800fe82 <HAL_DMA_Start_IT+0x4a>
 800fe8e:	46c0      	nop			; (mov r8, r8)

0800fe90 <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 800fe90:	2101      	movs	r1, #1
 800fe92:	6802      	ldr	r2, [r0, #0]
{
 800fe94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 800fe96:	6813      	ldr	r3, [r2, #0]
{
 800fe98:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800fe9a:	438b      	bics	r3, r1
 800fe9c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800fe9e:	f7ff fb4f 	bl	800f540 <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800fea2:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 800fea4:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800fea6:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800fea8:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800feaa:	e004      	b.n	800feb6 <HAL_DMA_Abort+0x26>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800feac:	f7ff fb48 	bl	800f540 <HAL_GetTick>
 800feb0:	1bc0      	subs	r0, r0, r7
 800feb2:	42b0      	cmp	r0, r6
 800feb4:	d809      	bhi.n	800feca <HAL_DMA_Abort+0x3a>
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800feb6:	6823      	ldr	r3, [r4, #0]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	402b      	ands	r3, r5
 800febc:	d1f6      	bne.n	800feac <HAL_DMA_Abort+0x1c>
  hdma->State = HAL_DMA_STATE_READY; 
 800febe:	2221      	movs	r2, #33	; 0x21
  return HAL_OK; 
 800fec0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 800fec2:	54a5      	strb	r5, [r4, r2]
  __HAL_UNLOCK(hdma);
 800fec4:	3a01      	subs	r2, #1
 800fec6:	54a3      	strb	r3, [r4, r2]
}
 800fec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800feca:	2220      	movs	r2, #32
 800fecc:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800fece:	2103      	movs	r1, #3
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800fed0:	4313      	orrs	r3, r2
 800fed2:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800fed4:	2321      	movs	r3, #33	; 0x21
 800fed6:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 800fed8:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800feda:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdma);
 800fedc:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 800fede:	e7f3      	b.n	800fec8 <HAL_DMA_Abort+0x38>

0800fee0 <HAL_DMA_IRQHandler>:
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fee0:	6803      	ldr	r3, [r0, #0]
 800fee2:	4aa2      	ldr	r2, [pc, #648]	; (801016c <HAL_DMA_IRQHandler+0x28c>)
{        
 800fee4:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800fee6:	0019      	movs	r1, r3
{        
 800fee8:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800feea:	4293      	cmp	r3, r2
 800feec:	d937      	bls.n	800ff5e <HAL_DMA_IRQHandler+0x7e>
 800feee:	48a0      	ldr	r0, [pc, #640]	; (8010170 <HAL_DMA_IRQHandler+0x290>)
 800fef0:	4da0      	ldr	r5, [pc, #640]	; (8010174 <HAL_DMA_IRQHandler+0x294>)
 800fef2:	6806      	ldr	r6, [r0, #0]
 800fef4:	42ab      	cmp	r3, r5
 800fef6:	d100      	bne.n	800fefa <HAL_DMA_IRQHandler+0x1a>
 800fef8:	e0ed      	b.n	80100d6 <HAL_DMA_IRQHandler+0x1f6>
 800fefa:	4d9f      	ldr	r5, [pc, #636]	; (8010178 <HAL_DMA_IRQHandler+0x298>)
 800fefc:	42ab      	cmp	r3, r5
 800fefe:	d100      	bne.n	800ff02 <HAL_DMA_IRQHandler+0x22>
 800ff00:	e334      	b.n	801056c <HAL_DMA_IRQHandler+0x68c>
 800ff02:	4d9e      	ldr	r5, [pc, #632]	; (801017c <HAL_DMA_IRQHandler+0x29c>)
 800ff04:	42ab      	cmp	r3, r5
 800ff06:	d100      	bne.n	800ff0a <HAL_DMA_IRQHandler+0x2a>
 800ff08:	e129      	b.n	801015e <HAL_DMA_IRQHandler+0x27e>
 800ff0a:	4d9d      	ldr	r5, [pc, #628]	; (8010180 <HAL_DMA_IRQHandler+0x2a0>)
 800ff0c:	42ab      	cmp	r3, r5
 800ff0e:	d100      	bne.n	800ff12 <HAL_DMA_IRQHandler+0x32>
 800ff10:	e34b      	b.n	80105aa <HAL_DMA_IRQHandler+0x6ca>
 800ff12:	4d9c      	ldr	r5, [pc, #624]	; (8010184 <HAL_DMA_IRQHandler+0x2a4>)
 800ff14:	42ab      	cmp	r3, r5
 800ff16:	d100      	bne.n	800ff1a <HAL_DMA_IRQHandler+0x3a>
 800ff18:	e38b      	b.n	8010632 <HAL_DMA_IRQHandler+0x752>
 800ff1a:	4d9b      	ldr	r5, [pc, #620]	; (8010188 <HAL_DMA_IRQHandler+0x2a8>)
 800ff1c:	42ab      	cmp	r3, r5
 800ff1e:	d100      	bne.n	800ff22 <HAL_DMA_IRQHandler+0x42>
 800ff20:	e3cf      	b.n	80106c2 <HAL_DMA_IRQHandler+0x7e2>
 800ff22:	4293      	cmp	r3, r2
 800ff24:	d100      	bne.n	800ff28 <HAL_DMA_IRQHandler+0x48>
 800ff26:	e35e      	b.n	80105e6 <HAL_DMA_IRQHandler+0x706>
 800ff28:	4a98      	ldr	r2, [pc, #608]	; (801018c <HAL_DMA_IRQHandler+0x2ac>)
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d101      	bne.n	800ff32 <HAL_DMA_IRQHandler+0x52>
 800ff2e:	f000 fbe8 	bl	8010702 <HAL_DMA_IRQHandler+0x822>
 800ff32:	4a97      	ldr	r2, [pc, #604]	; (8010190 <HAL_DMA_IRQHandler+0x2b0>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	d101      	bne.n	800ff3c <HAL_DMA_IRQHandler+0x5c>
 800ff38:	f000 fc04 	bl	8010744 <HAL_DMA_IRQHandler+0x864>
 800ff3c:	4a95      	ldr	r2, [pc, #596]	; (8010194 <HAL_DMA_IRQHandler+0x2b4>)
 800ff3e:	4293      	cmp	r3, r2
 800ff40:	d101      	bne.n	800ff46 <HAL_DMA_IRQHandler+0x66>
 800ff42:	f000 fc21 	bl	8010788 <HAL_DMA_IRQHandler+0x8a8>
 800ff46:	4a94      	ldr	r2, [pc, #592]	; (8010198 <HAL_DMA_IRQHandler+0x2b8>)
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d101      	bne.n	800ff50 <HAL_DMA_IRQHandler+0x70>
 800ff4c:	f000 fc37 	bl	80107be <HAL_DMA_IRQHandler+0x8de>
 800ff50:	0332      	lsls	r2, r6, #12
 800ff52:	d43c      	bmi.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ff54:	4a86      	ldr	r2, [pc, #536]	; (8010170 <HAL_DMA_IRQHandler+0x290>)
 800ff56:	6810      	ldr	r0, [r2, #0]
 800ff58:	2280      	movs	r2, #128	; 0x80
 800ff5a:	02d2      	lsls	r2, r2, #11
 800ff5c:	e0c0      	b.n	80100e0 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ff5e:	488f      	ldr	r0, [pc, #572]	; (801019c <HAL_DMA_IRQHandler+0x2bc>)
 800ff60:	4d84      	ldr	r5, [pc, #528]	; (8010174 <HAL_DMA_IRQHandler+0x294>)
 800ff62:	6806      	ldr	r6, [r0, #0]
 800ff64:	42ab      	cmp	r3, r5
 800ff66:	d02e      	beq.n	800ffc6 <HAL_DMA_IRQHandler+0xe6>
 800ff68:	4d83      	ldr	r5, [pc, #524]	; (8010178 <HAL_DMA_IRQHandler+0x298>)
 800ff6a:	42ab      	cmp	r3, r5
 800ff6c:	d100      	bne.n	800ff70 <HAL_DMA_IRQHandler+0x90>
 800ff6e:	e2f6      	b.n	801055e <HAL_DMA_IRQHandler+0x67e>
 800ff70:	4d82      	ldr	r5, [pc, #520]	; (801017c <HAL_DMA_IRQHandler+0x29c>)
 800ff72:	42ab      	cmp	r3, r5
 800ff74:	d100      	bne.n	800ff78 <HAL_DMA_IRQHandler+0x98>
 800ff76:	e0ea      	b.n	801014e <HAL_DMA_IRQHandler+0x26e>
 800ff78:	4d81      	ldr	r5, [pc, #516]	; (8010180 <HAL_DMA_IRQHandler+0x2a0>)
 800ff7a:	42ab      	cmp	r3, r5
 800ff7c:	d100      	bne.n	800ff80 <HAL_DMA_IRQHandler+0xa0>
 800ff7e:	e30c      	b.n	801059a <HAL_DMA_IRQHandler+0x6ba>
 800ff80:	4d80      	ldr	r5, [pc, #512]	; (8010184 <HAL_DMA_IRQHandler+0x2a4>)
 800ff82:	42ab      	cmp	r3, r5
 800ff84:	d100      	bne.n	800ff88 <HAL_DMA_IRQHandler+0xa8>
 800ff86:	e35b      	b.n	8010640 <HAL_DMA_IRQHandler+0x760>
 800ff88:	4d7f      	ldr	r5, [pc, #508]	; (8010188 <HAL_DMA_IRQHandler+0x2a8>)
 800ff8a:	42ab      	cmp	r3, r5
 800ff8c:	d100      	bne.n	800ff90 <HAL_DMA_IRQHandler+0xb0>
 800ff8e:	e390      	b.n	80106b2 <HAL_DMA_IRQHandler+0x7d2>
 800ff90:	4293      	cmp	r3, r2
 800ff92:	d100      	bne.n	800ff96 <HAL_DMA_IRQHandler+0xb6>
 800ff94:	e31f      	b.n	80105d6 <HAL_DMA_IRQHandler+0x6f6>
 800ff96:	4a7d      	ldr	r2, [pc, #500]	; (801018c <HAL_DMA_IRQHandler+0x2ac>)
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d100      	bne.n	800ff9e <HAL_DMA_IRQHandler+0xbe>
 800ff9c:	e3aa      	b.n	80106f4 <HAL_DMA_IRQHandler+0x814>
 800ff9e:	4a7c      	ldr	r2, [pc, #496]	; (8010190 <HAL_DMA_IRQHandler+0x2b0>)
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	d100      	bne.n	800ffa6 <HAL_DMA_IRQHandler+0xc6>
 800ffa4:	e3c7      	b.n	8010736 <HAL_DMA_IRQHandler+0x856>
 800ffa6:	4a7b      	ldr	r2, [pc, #492]	; (8010194 <HAL_DMA_IRQHandler+0x2b4>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d101      	bne.n	800ffb0 <HAL_DMA_IRQHandler+0xd0>
 800ffac:	f000 fbe4 	bl	8010778 <HAL_DMA_IRQHandler+0x898>
 800ffb0:	4a79      	ldr	r2, [pc, #484]	; (8010198 <HAL_DMA_IRQHandler+0x2b8>)
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d100      	bne.n	800ffb8 <HAL_DMA_IRQHandler+0xd8>
 800ffb6:	e2e8      	b.n	801058a <HAL_DMA_IRQHandler+0x6aa>
 800ffb8:	0332      	lsls	r2, r6, #12
 800ffba:	d408      	bmi.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ffbc:	4a77      	ldr	r2, [pc, #476]	; (801019c <HAL_DMA_IRQHandler+0x2bc>)
 800ffbe:	6810      	ldr	r0, [r2, #0]
 800ffc0:	2280      	movs	r2, #128	; 0x80
 800ffc2:	02d2      	lsls	r2, r2, #11
 800ffc4:	e15f      	b.n	8010286 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ffc6:	0732      	lsls	r2, r6, #28
 800ffc8:	d401      	bmi.n	800ffce <HAL_DMA_IRQHandler+0xee>
 800ffca:	f000 fc0a 	bl	80107e2 <HAL_DMA_IRQHandler+0x902>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ffce:	2208      	movs	r2, #8
 800ffd0:	6818      	ldr	r0, [r3, #0]
 800ffd2:	4202      	tst	r2, r0
 800ffd4:	d100      	bne.n	800ffd8 <HAL_DMA_IRQHandler+0xf8>
 800ffd6:	e1f4      	b.n	80103c2 <HAL_DMA_IRQHandler+0x4e2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800ffd8:	6818      	ldr	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ffda:	4d66      	ldr	r5, [pc, #408]	; (8010174 <HAL_DMA_IRQHandler+0x294>)
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800ffdc:	4390      	bics	r0, r2
 800ffde:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ffe0:	4862      	ldr	r0, [pc, #392]	; (801016c <HAL_DMA_IRQHandler+0x28c>)
 800ffe2:	4283      	cmp	r3, r0
 800ffe4:	d800      	bhi.n	800ffe8 <HAL_DMA_IRQHandler+0x108>
 800ffe6:	e1a9      	b.n	801033c <HAL_DMA_IRQHandler+0x45c>
 800ffe8:	42ab      	cmp	r3, r5
 800ffea:	d100      	bne.n	800ffee <HAL_DMA_IRQHandler+0x10e>
 800ffec:	e310      	b.n	8010610 <HAL_DMA_IRQHandler+0x730>
 800ffee:	4a62      	ldr	r2, [pc, #392]	; (8010178 <HAL_DMA_IRQHandler+0x298>)
 800fff0:	4293      	cmp	r3, r2
 800fff2:	d100      	bne.n	800fff6 <HAL_DMA_IRQHandler+0x116>
 800fff4:	e337      	b.n	8010666 <HAL_DMA_IRQHandler+0x786>
 800fff6:	4a61      	ldr	r2, [pc, #388]	; (801017c <HAL_DMA_IRQHandler+0x29c>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d100      	bne.n	800fffe <HAL_DMA_IRQHandler+0x11e>
 800fffc:	e2df      	b.n	80105be <HAL_DMA_IRQHandler+0x6de>
 800fffe:	4a60      	ldr	r2, [pc, #384]	; (8010180 <HAL_DMA_IRQHandler+0x2a0>)
 8010000:	4293      	cmp	r3, r2
 8010002:	d100      	bne.n	8010006 <HAL_DMA_IRQHandler+0x126>
 8010004:	e370      	b.n	80106e8 <HAL_DMA_IRQHandler+0x808>
 8010006:	4a5f      	ldr	r2, [pc, #380]	; (8010184 <HAL_DMA_IRQHandler+0x2a4>)
 8010008:	4293      	cmp	r3, r2
 801000a:	d100      	bne.n	801000e <HAL_DMA_IRQHandler+0x12e>
 801000c:	e38a      	b.n	8010724 <HAL_DMA_IRQHandler+0x844>
 801000e:	4a5e      	ldr	r2, [pc, #376]	; (8010188 <HAL_DMA_IRQHandler+0x2a8>)
 8010010:	4293      	cmp	r3, r2
 8010012:	d100      	bne.n	8010016 <HAL_DMA_IRQHandler+0x136>
 8010014:	e3a4      	b.n	8010760 <HAL_DMA_IRQHandler+0x880>
 8010016:	4283      	cmp	r3, r0
 8010018:	d100      	bne.n	801001c <HAL_DMA_IRQHandler+0x13c>
 801001a:	e3cd      	b.n	80107b8 <HAL_DMA_IRQHandler+0x8d8>
 801001c:	4a5b      	ldr	r2, [pc, #364]	; (801018c <HAL_DMA_IRQHandler+0x2ac>)
 801001e:	4293      	cmp	r3, r2
 8010020:	d100      	bne.n	8010024 <HAL_DMA_IRQHandler+0x144>
 8010022:	e3d8      	b.n	80107d6 <HAL_DMA_IRQHandler+0x8f6>
 8010024:	4a5a      	ldr	r2, [pc, #360]	; (8010190 <HAL_DMA_IRQHandler+0x2b0>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d100      	bne.n	801002c <HAL_DMA_IRQHandler+0x14c>
 801002a:	e3d8      	b.n	80107de <HAL_DMA_IRQHandler+0x8fe>
 801002c:	4a59      	ldr	r2, [pc, #356]	; (8010194 <HAL_DMA_IRQHandler+0x2b4>)
 801002e:	4293      	cmp	r3, r2
 8010030:	d100      	bne.n	8010034 <HAL_DMA_IRQHandler+0x154>
 8010032:	e2c4      	b.n	80105be <HAL_DMA_IRQHandler+0x6de>
 8010034:	4a5a      	ldr	r2, [pc, #360]	; (80101a0 <HAL_DMA_IRQHandler+0x2c0>)
 8010036:	189a      	adds	r2, r3, r2
 8010038:	4250      	negs	r0, r2
 801003a:	4142      	adcs	r2, r0
 801003c:	4859      	ldr	r0, [pc, #356]	; (80101a4 <HAL_DMA_IRQHandler+0x2c4>)
 801003e:	4252      	negs	r2, r2
 8010040:	4002      	ands	r2, r0
 8010042:	2080      	movs	r0, #128	; 0x80
 8010044:	0300      	lsls	r0, r0, #12
 8010046:	4684      	mov	ip, r0
 8010048:	4462      	add	r2, ip
 801004a:	4849      	ldr	r0, [pc, #292]	; (8010170 <HAL_DMA_IRQHandler+0x290>)
 801004c:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801004e:	2001      	movs	r0, #1
 8010050:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010052:	4302      	orrs	r2, r0
 8010054:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010056:	2221      	movs	r2, #33	; 0x21
 8010058:	3003      	adds	r0, #3
 801005a:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801005c:	2000      	movs	r0, #0
 801005e:	3a01      	subs	r2, #1
 8010060:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010062:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010064:	2a00      	cmp	r2, #0
 8010066:	d000      	beq.n	801006a <HAL_DMA_IRQHandler+0x18a>
 8010068:	e1a7      	b.n	80103ba <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801006a:	4a41      	ldr	r2, [pc, #260]	; (8010170 <HAL_DMA_IRQHandler+0x290>)
 801006c:	4d41      	ldr	r5, [pc, #260]	; (8010174 <HAL_DMA_IRQHandler+0x294>)
 801006e:	6810      	ldr	r0, [r2, #0]
 8010070:	2204      	movs	r2, #4
 8010072:	42ab      	cmp	r3, r5
 8010074:	d034      	beq.n	80100e0 <HAL_DMA_IRQHandler+0x200>
 8010076:	4d40      	ldr	r5, [pc, #256]	; (8010178 <HAL_DMA_IRQHandler+0x298>)
 8010078:	2240      	movs	r2, #64	; 0x40
 801007a:	42ab      	cmp	r3, r5
 801007c:	d030      	beq.n	80100e0 <HAL_DMA_IRQHandler+0x200>
 801007e:	4a3f      	ldr	r2, [pc, #252]	; (801017c <HAL_DMA_IRQHandler+0x29c>)
 8010080:	4293      	cmp	r3, r2
 8010082:	d100      	bne.n	8010086 <HAL_DMA_IRQHandler+0x1a6>
 8010084:	e3b1      	b.n	80107ea <HAL_DMA_IRQHandler+0x90a>
 8010086:	4a3e      	ldr	r2, [pc, #248]	; (8010180 <HAL_DMA_IRQHandler+0x2a0>)
 8010088:	4293      	cmp	r3, r2
 801008a:	d100      	bne.n	801008e <HAL_DMA_IRQHandler+0x1ae>
 801008c:	e39e      	b.n	80107cc <HAL_DMA_IRQHandler+0x8ec>
 801008e:	4a3d      	ldr	r2, [pc, #244]	; (8010184 <HAL_DMA_IRQHandler+0x2a4>)
 8010090:	4293      	cmp	r3, r2
 8010092:	d100      	bne.n	8010096 <HAL_DMA_IRQHandler+0x1b6>
 8010094:	e760      	b.n	800ff58 <HAL_DMA_IRQHandler+0x78>
 8010096:	4a3c      	ldr	r2, [pc, #240]	; (8010188 <HAL_DMA_IRQHandler+0x2a8>)
 8010098:	4293      	cmp	r3, r2
 801009a:	d100      	bne.n	801009e <HAL_DMA_IRQHandler+0x1be>
 801009c:	e315      	b.n	80106ca <HAL_DMA_IRQHandler+0x7ea>
 801009e:	4a33      	ldr	r2, [pc, #204]	; (801016c <HAL_DMA_IRQHandler+0x28c>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d100      	bne.n	80100a6 <HAL_DMA_IRQHandler+0x1c6>
 80100a4:	e2a3      	b.n	80105ee <HAL_DMA_IRQHandler+0x70e>
 80100a6:	4d39      	ldr	r5, [pc, #228]	; (801018c <HAL_DMA_IRQHandler+0x2ac>)
 80100a8:	2204      	movs	r2, #4
 80100aa:	42ab      	cmp	r3, r5
 80100ac:	d018      	beq.n	80100e0 <HAL_DMA_IRQHandler+0x200>
 80100ae:	4d38      	ldr	r5, [pc, #224]	; (8010190 <HAL_DMA_IRQHandler+0x2b0>)
 80100b0:	323c      	adds	r2, #60	; 0x3c
 80100b2:	42ab      	cmp	r3, r5
 80100b4:	d014      	beq.n	80100e0 <HAL_DMA_IRQHandler+0x200>
 80100b6:	4a37      	ldr	r2, [pc, #220]	; (8010194 <HAL_DMA_IRQHandler+0x2b4>)
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d100      	bne.n	80100be <HAL_DMA_IRQHandler+0x1de>
 80100bc:	e395      	b.n	80107ea <HAL_DMA_IRQHandler+0x90a>
 80100be:	4a38      	ldr	r2, [pc, #224]	; (80101a0 <HAL_DMA_IRQHandler+0x2c0>)
 80100c0:	189a      	adds	r2, r3, r2
 80100c2:	4255      	negs	r5, r2
 80100c4:	416a      	adcs	r2, r5
 80100c6:	4d38      	ldr	r5, [pc, #224]	; (80101a8 <HAL_DMA_IRQHandler+0x2c8>)
 80100c8:	4252      	negs	r2, r2
 80100ca:	402a      	ands	r2, r5
 80100cc:	2580      	movs	r5, #128	; 0x80
 80100ce:	02ed      	lsls	r5, r5, #11
 80100d0:	46ac      	mov	ip, r5
 80100d2:	4462      	add	r2, ip
 80100d4:	e004      	b.n	80100e0 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80100d6:	0732      	lsls	r2, r6, #28
 80100d8:	d500      	bpl.n	80100dc <HAL_DMA_IRQHandler+0x1fc>
 80100da:	e778      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80100dc:	2204      	movs	r2, #4
 80100de:	6800      	ldr	r0, [r0, #0]
 80100e0:	4210      	tst	r0, r2
 80100e2:	d000      	beq.n	80100e6 <HAL_DMA_IRQHandler+0x206>
 80100e4:	e0d1      	b.n	801028a <HAL_DMA_IRQHandler+0x3aa>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80100e6:	4a22      	ldr	r2, [pc, #136]	; (8010170 <HAL_DMA_IRQHandler+0x290>)
 80100e8:	6810      	ldr	r0, [r2, #0]
 80100ea:	4a22      	ldr	r2, [pc, #136]	; (8010174 <HAL_DMA_IRQHandler+0x294>)
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d100      	bne.n	80100f2 <HAL_DMA_IRQHandler+0x212>
 80100f0:	e122      	b.n	8010338 <HAL_DMA_IRQHandler+0x458>
 80100f2:	4a21      	ldr	r2, [pc, #132]	; (8010178 <HAL_DMA_IRQHandler+0x298>)
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d05b      	beq.n	80101b0 <HAL_DMA_IRQHandler+0x2d0>
 80100f8:	4a20      	ldr	r2, [pc, #128]	; (801017c <HAL_DMA_IRQHandler+0x29c>)
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d100      	bne.n	8010100 <HAL_DMA_IRQHandler+0x220>
 80100fe:	e19a      	b.n	8010436 <HAL_DMA_IRQHandler+0x556>
 8010100:	4a1f      	ldr	r2, [pc, #124]	; (8010180 <HAL_DMA_IRQHandler+0x2a0>)
 8010102:	4293      	cmp	r3, r2
 8010104:	d100      	bne.n	8010108 <HAL_DMA_IRQHandler+0x228>
 8010106:	e237      	b.n	8010578 <HAL_DMA_IRQHandler+0x698>
 8010108:	4a1e      	ldr	r2, [pc, #120]	; (8010184 <HAL_DMA_IRQHandler+0x2a4>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d100      	bne.n	8010110 <HAL_DMA_IRQHandler+0x230>
 801010e:	e239      	b.n	8010584 <HAL_DMA_IRQHandler+0x6a4>
 8010110:	4a1d      	ldr	r2, [pc, #116]	; (8010188 <HAL_DMA_IRQHandler+0x2a8>)
 8010112:	4293      	cmp	r3, r2
 8010114:	d100      	bne.n	8010118 <HAL_DMA_IRQHandler+0x238>
 8010116:	e24f      	b.n	80105b8 <HAL_DMA_IRQHandler+0x6d8>
 8010118:	4a14      	ldr	r2, [pc, #80]	; (801016c <HAL_DMA_IRQHandler+0x28c>)
 801011a:	4293      	cmp	r3, r2
 801011c:	d100      	bne.n	8010120 <HAL_DMA_IRQHandler+0x240>
 801011e:	e297      	b.n	8010650 <HAL_DMA_IRQHandler+0x770>
 8010120:	4a1a      	ldr	r2, [pc, #104]	; (801018c <HAL_DMA_IRQHandler+0x2ac>)
 8010122:	4293      	cmp	r3, r2
 8010124:	d100      	bne.n	8010128 <HAL_DMA_IRQHandler+0x248>
 8010126:	e107      	b.n	8010338 <HAL_DMA_IRQHandler+0x458>
 8010128:	4a19      	ldr	r2, [pc, #100]	; (8010190 <HAL_DMA_IRQHandler+0x2b0>)
 801012a:	4293      	cmp	r3, r2
 801012c:	d040      	beq.n	80101b0 <HAL_DMA_IRQHandler+0x2d0>
 801012e:	4a19      	ldr	r2, [pc, #100]	; (8010194 <HAL_DMA_IRQHandler+0x2b4>)
 8010130:	4293      	cmp	r3, r2
 8010132:	d100      	bne.n	8010136 <HAL_DMA_IRQHandler+0x256>
 8010134:	e17f      	b.n	8010436 <HAL_DMA_IRQHandler+0x556>
 8010136:	4a1a      	ldr	r2, [pc, #104]	; (80101a0 <HAL_DMA_IRQHandler+0x2c0>)
 8010138:	1899      	adds	r1, r3, r2
 801013a:	424a      	negs	r2, r1
 801013c:	4151      	adcs	r1, r2
 801013e:	4a1b      	ldr	r2, [pc, #108]	; (80101ac <HAL_DMA_IRQHandler+0x2cc>)
 8010140:	4249      	negs	r1, r1
 8010142:	400a      	ands	r2, r1
 8010144:	2180      	movs	r1, #128	; 0x80
 8010146:	0289      	lsls	r1, r1, #10
 8010148:	468c      	mov	ip, r1
 801014a:	4462      	add	r2, ip
 801014c:	e031      	b.n	80101b2 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801014e:	0532      	lsls	r2, r6, #20
 8010150:	d500      	bpl.n	8010154 <HAL_DMA_IRQHandler+0x274>
 8010152:	e73c      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010154:	2280      	movs	r2, #128	; 0x80
 8010156:	6800      	ldr	r0, [r0, #0]
 8010158:	0019      	movs	r1, r3
 801015a:	00d2      	lsls	r2, r2, #3
 801015c:	e093      	b.n	8010286 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801015e:	0532      	lsls	r2, r6, #20
 8010160:	d500      	bpl.n	8010164 <HAL_DMA_IRQHandler+0x284>
 8010162:	e734      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010164:	2280      	movs	r2, #128	; 0x80
 8010166:	6800      	ldr	r0, [r0, #0]
 8010168:	00d2      	lsls	r2, r2, #3
 801016a:	e7b9      	b.n	80100e0 <HAL_DMA_IRQHandler+0x200>
 801016c:	40020080 	.word	0x40020080
 8010170:	40020400 	.word	0x40020400
 8010174:	40020008 	.word	0x40020008
 8010178:	4002001c 	.word	0x4002001c
 801017c:	40020030 	.word	0x40020030
 8010180:	40020044 	.word	0x40020044
 8010184:	40020058 	.word	0x40020058
 8010188:	4002006c 	.word	0x4002006c
 801018c:	40020408 	.word	0x40020408
 8010190:	4002041c 	.word	0x4002041c
 8010194:	40020430 	.word	0x40020430
 8010198:	40020444 	.word	0x40020444
 801019c:	40020000 	.word	0x40020000
 80101a0:	bffdfbbc 	.word	0xbffdfbbc
 80101a4:	fff88000 	.word	0xfff88000
 80101a8:	fffc4000 	.word	0xfffc4000
 80101ac:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80101b0:	2220      	movs	r2, #32
 80101b2:	4002      	ands	r2, r0
 80101b4:	1e51      	subs	r1, r2, #1
 80101b6:	418a      	sbcs	r2, r1
 80101b8:	b2d2      	uxtb	r2, r2
 80101ba:	2a00      	cmp	r2, #0
 80101bc:	d050      	beq.n	8010260 <HAL_DMA_IRQHandler+0x380>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80101be:	2202      	movs	r2, #2
 80101c0:	6819      	ldr	r1, [r3, #0]
 80101c2:	420a      	tst	r2, r1
 80101c4:	d04c      	beq.n	8010260 <HAL_DMA_IRQHandler+0x380>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80101c6:	6819      	ldr	r1, [r3, #0]
 80101c8:	0689      	lsls	r1, r1, #26
 80101ca:	d402      	bmi.n	80101d2 <HAL_DMA_IRQHandler+0x2f2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80101cc:	6819      	ldr	r1, [r3, #0]
 80101ce:	4391      	bics	r1, r2
 80101d0:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80101d2:	4ab5      	ldr	r2, [pc, #724]	; (80104a8 <HAL_DMA_IRQHandler+0x5c8>)
 80101d4:	49b5      	ldr	r1, [pc, #724]	; (80104ac <HAL_DMA_IRQHandler+0x5cc>)
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d800      	bhi.n	80101dc <HAL_DMA_IRQHandler+0x2fc>
 80101da:	e12f      	b.n	801043c <HAL_DMA_IRQHandler+0x55c>
 80101dc:	428b      	cmp	r3, r1
 80101de:	d100      	bne.n	80101e2 <HAL_DMA_IRQHandler+0x302>
 80101e0:	e20e      	b.n	8010600 <HAL_DMA_IRQHandler+0x720>
 80101e2:	49b3      	ldr	r1, [pc, #716]	; (80104b0 <HAL_DMA_IRQHandler+0x5d0>)
 80101e4:	428b      	cmp	r3, r1
 80101e6:	d100      	bne.n	80101ea <HAL_DMA_IRQHandler+0x30a>
 80101e8:	e237      	b.n	801065a <HAL_DMA_IRQHandler+0x77a>
 80101ea:	49b2      	ldr	r1, [pc, #712]	; (80104b4 <HAL_DMA_IRQHandler+0x5d4>)
 80101ec:	428b      	cmp	r3, r1
 80101ee:	d100      	bne.n	80101f2 <HAL_DMA_IRQHandler+0x312>
 80101f0:	e271      	b.n	80106d6 <HAL_DMA_IRQHandler+0x7f6>
 80101f2:	49b1      	ldr	r1, [pc, #708]	; (80104b8 <HAL_DMA_IRQHandler+0x5d8>)
 80101f4:	428b      	cmp	r3, r1
 80101f6:	d100      	bne.n	80101fa <HAL_DMA_IRQHandler+0x31a>
 80101f8:	e1fc      	b.n	80105f4 <HAL_DMA_IRQHandler+0x714>
 80101fa:	49b0      	ldr	r1, [pc, #704]	; (80104bc <HAL_DMA_IRQHandler+0x5dc>)
 80101fc:	428b      	cmp	r3, r1
 80101fe:	d100      	bne.n	8010202 <HAL_DMA_IRQHandler+0x322>
 8010200:	e28a      	b.n	8010718 <HAL_DMA_IRQHandler+0x838>
 8010202:	49af      	ldr	r1, [pc, #700]	; (80104c0 <HAL_DMA_IRQHandler+0x5e0>)
 8010204:	428b      	cmp	r3, r1
 8010206:	d100      	bne.n	801020a <HAL_DMA_IRQHandler+0x32a>
 8010208:	e2a7      	b.n	801075a <HAL_DMA_IRQHandler+0x87a>
 801020a:	4293      	cmp	r3, r2
 801020c:	d100      	bne.n	8010210 <HAL_DMA_IRQHandler+0x330>
 801020e:	e2c4      	b.n	801079a <HAL_DMA_IRQHandler+0x8ba>
 8010210:	4aac      	ldr	r2, [pc, #688]	; (80104c4 <HAL_DMA_IRQHandler+0x5e4>)
 8010212:	4293      	cmp	r3, r2
 8010214:	d100      	bne.n	8010218 <HAL_DMA_IRQHandler+0x338>
 8010216:	e1f3      	b.n	8010600 <HAL_DMA_IRQHandler+0x720>
 8010218:	4aab      	ldr	r2, [pc, #684]	; (80104c8 <HAL_DMA_IRQHandler+0x5e8>)
 801021a:	4293      	cmp	r3, r2
 801021c:	d100      	bne.n	8010220 <HAL_DMA_IRQHandler+0x340>
 801021e:	e21c      	b.n	801065a <HAL_DMA_IRQHandler+0x77a>
 8010220:	4aaa      	ldr	r2, [pc, #680]	; (80104cc <HAL_DMA_IRQHandler+0x5ec>)
 8010222:	4293      	cmp	r3, r2
 8010224:	d100      	bne.n	8010228 <HAL_DMA_IRQHandler+0x348>
 8010226:	e256      	b.n	80106d6 <HAL_DMA_IRQHandler+0x7f6>
 8010228:	4aa9      	ldr	r2, [pc, #676]	; (80104d0 <HAL_DMA_IRQHandler+0x5f0>)
 801022a:	4694      	mov	ip, r2
 801022c:	4463      	add	r3, ip
 801022e:	1e5a      	subs	r2, r3, #1
 8010230:	4193      	sbcs	r3, r2
 8010232:	22f0      	movs	r2, #240	; 0xf0
 8010234:	425b      	negs	r3, r3
 8010236:	0252      	lsls	r2, r2, #9
 8010238:	4013      	ands	r3, r2
 801023a:	2280      	movs	r2, #128	; 0x80
 801023c:	0192      	lsls	r2, r2, #6
 801023e:	4694      	mov	ip, r2
 8010240:	4463      	add	r3, ip
 8010242:	4aa4      	ldr	r2, [pc, #656]	; (80104d4 <HAL_DMA_IRQHandler+0x5f4>)
 8010244:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8010246:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8010248:	2201      	movs	r2, #1
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 801024a:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 801024c:	2321      	movs	r3, #33	; 0x21
 801024e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010250:	2200      	movs	r2, #0
 8010252:	3b01      	subs	r3, #1
 8010254:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010256:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010258:	2b00      	cmp	r3, #0
 801025a:	d001      	beq.n	8010260 <HAL_DMA_IRQHandler+0x380>
        hdma->XferCpltCallback(hdma);
 801025c:	0020      	movs	r0, r4
 801025e:	4798      	blx	r3
}  
 8010260:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010262:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010264:	489c      	ldr	r0, [pc, #624]	; (80104d8 <HAL_DMA_IRQHandler+0x5f8>)
 8010266:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010268:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801026a:	432a      	orrs	r2, r5
 801026c:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801026e:	2221      	movs	r2, #33	; 0x21
 8010270:	3503      	adds	r5, #3
 8010272:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010274:	2500      	movs	r5, #0
 8010276:	3a01      	subs	r2, #1
 8010278:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801027a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801027c:	2a00      	cmp	r2, #0
 801027e:	d000      	beq.n	8010282 <HAL_DMA_IRQHandler+0x3a2>
 8010280:	e09b      	b.n	80103ba <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010282:	6800      	ldr	r0, [r0, #0]
 8010284:	2204      	movs	r2, #4
 8010286:	4210      	tst	r0, r2
 8010288:	d050      	beq.n	801032c <HAL_DMA_IRQHandler+0x44c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801028a:	2204      	movs	r2, #4
 801028c:	6818      	ldr	r0, [r3, #0]
 801028e:	4202      	tst	r2, r0
 8010290:	d048      	beq.n	8010324 <HAL_DMA_IRQHandler+0x444>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010292:	6818      	ldr	r0, [r3, #0]
 8010294:	0680      	lsls	r0, r0, #26
 8010296:	d402      	bmi.n	801029e <HAL_DMA_IRQHandler+0x3be>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010298:	6818      	ldr	r0, [r3, #0]
 801029a:	4390      	bics	r0, r2
 801029c:	6018      	str	r0, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801029e:	4a82      	ldr	r2, [pc, #520]	; (80104a8 <HAL_DMA_IRQHandler+0x5c8>)
 80102a0:	4291      	cmp	r1, r2
 80102a2:	d800      	bhi.n	80102a6 <HAL_DMA_IRQHandler+0x3c6>
 80102a4:	e11e      	b.n	80104e4 <HAL_DMA_IRQHandler+0x604>
 80102a6:	4981      	ldr	r1, [pc, #516]	; (80104ac <HAL_DMA_IRQHandler+0x5cc>)
 80102a8:	428b      	cmp	r3, r1
 80102aa:	d100      	bne.n	80102ae <HAL_DMA_IRQHandler+0x3ce>
 80102ac:	e1ac      	b.n	8010608 <HAL_DMA_IRQHandler+0x728>
 80102ae:	4980      	ldr	r1, [pc, #512]	; (80104b0 <HAL_DMA_IRQHandler+0x5d0>)
 80102b0:	428b      	cmp	r3, r1
 80102b2:	d100      	bne.n	80102b6 <HAL_DMA_IRQHandler+0x3d6>
 80102b4:	e1d5      	b.n	8010662 <HAL_DMA_IRQHandler+0x782>
 80102b6:	497f      	ldr	r1, [pc, #508]	; (80104b4 <HAL_DMA_IRQHandler+0x5d4>)
 80102b8:	428b      	cmp	r3, r1
 80102ba:	d100      	bne.n	80102be <HAL_DMA_IRQHandler+0x3de>
 80102bc:	e188      	b.n	80105d0 <HAL_DMA_IRQHandler+0x6f0>
 80102be:	497e      	ldr	r1, [pc, #504]	; (80104b8 <HAL_DMA_IRQHandler+0x5d8>)
 80102c0:	428b      	cmp	r3, r1
 80102c2:	d100      	bne.n	80102c6 <HAL_DMA_IRQHandler+0x3e6>
 80102c4:	e20a      	b.n	80106dc <HAL_DMA_IRQHandler+0x7fc>
 80102c6:	497d      	ldr	r1, [pc, #500]	; (80104bc <HAL_DMA_IRQHandler+0x5dc>)
 80102c8:	428b      	cmp	r3, r1
 80102ca:	d100      	bne.n	80102ce <HAL_DMA_IRQHandler+0x3ee>
 80102cc:	e22d      	b.n	801072a <HAL_DMA_IRQHandler+0x84a>
 80102ce:	497c      	ldr	r1, [pc, #496]	; (80104c0 <HAL_DMA_IRQHandler+0x5e0>)
 80102d0:	428b      	cmp	r3, r1
 80102d2:	d100      	bne.n	80102d6 <HAL_DMA_IRQHandler+0x3f6>
 80102d4:	e247      	b.n	8010766 <HAL_DMA_IRQHandler+0x886>
 80102d6:	4293      	cmp	r3, r2
 80102d8:	d100      	bne.n	80102dc <HAL_DMA_IRQHandler+0x3fc>
 80102da:	e264      	b.n	80107a6 <HAL_DMA_IRQHandler+0x8c6>
 80102dc:	4a79      	ldr	r2, [pc, #484]	; (80104c4 <HAL_DMA_IRQHandler+0x5e4>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	d100      	bne.n	80102e4 <HAL_DMA_IRQHandler+0x404>
 80102e2:	e191      	b.n	8010608 <HAL_DMA_IRQHandler+0x728>
 80102e4:	4a78      	ldr	r2, [pc, #480]	; (80104c8 <HAL_DMA_IRQHandler+0x5e8>)
 80102e6:	4293      	cmp	r3, r2
 80102e8:	d100      	bne.n	80102ec <HAL_DMA_IRQHandler+0x40c>
 80102ea:	e1ba      	b.n	8010662 <HAL_DMA_IRQHandler+0x782>
 80102ec:	4a77      	ldr	r2, [pc, #476]	; (80104cc <HAL_DMA_IRQHandler+0x5ec>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d100      	bne.n	80102f4 <HAL_DMA_IRQHandler+0x414>
 80102f2:	e16d      	b.n	80105d0 <HAL_DMA_IRQHandler+0x6f0>
 80102f4:	4a76      	ldr	r2, [pc, #472]	; (80104d0 <HAL_DMA_IRQHandler+0x5f0>)
 80102f6:	189a      	adds	r2, r3, r2
 80102f8:	1e51      	subs	r1, r2, #1
 80102fa:	418a      	sbcs	r2, r1
 80102fc:	21f0      	movs	r1, #240	; 0xf0
 80102fe:	4252      	negs	r2, r2
 8010300:	0289      	lsls	r1, r1, #10
 8010302:	400a      	ands	r2, r1
 8010304:	2180      	movs	r1, #128	; 0x80
 8010306:	01c9      	lsls	r1, r1, #7
 8010308:	468c      	mov	ip, r1
 801030a:	4462      	add	r2, ip
 801030c:	4971      	ldr	r1, [pc, #452]	; (80104d4 <HAL_DMA_IRQHandler+0x5f4>)
 801030e:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010310:	2221      	movs	r2, #33	; 0x21
 8010312:	2111      	movs	r1, #17
 8010314:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010316:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010318:	2a00      	cmp	r2, #0
 801031a:	d100      	bne.n	801031e <HAL_DMA_IRQHandler+0x43e>
 801031c:	e6e3      	b.n	80100e6 <HAL_DMA_IRQHandler+0x206>
        hdma->XferHalfCpltCallback(hdma);
 801031e:	0020      	movs	r0, r4
 8010320:	4790      	blx	r2
 8010322:	6823      	ldr	r3, [r4, #0]
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010324:	4a60      	ldr	r2, [pc, #384]	; (80104a8 <HAL_DMA_IRQHandler+0x5c8>)
 8010326:	4293      	cmp	r3, r2
 8010328:	d900      	bls.n	801032c <HAL_DMA_IRQHandler+0x44c>
 801032a:	e6dc      	b.n	80100e6 <HAL_DMA_IRQHandler+0x206>
 801032c:	4a6a      	ldr	r2, [pc, #424]	; (80104d8 <HAL_DMA_IRQHandler+0x5f8>)
 801032e:	6810      	ldr	r0, [r2, #0]
 8010330:	4a5e      	ldr	r2, [pc, #376]	; (80104ac <HAL_DMA_IRQHandler+0x5cc>)
 8010332:	4293      	cmp	r3, r2
 8010334:	d000      	beq.n	8010338 <HAL_DMA_IRQHandler+0x458>
 8010336:	e6dc      	b.n	80100f2 <HAL_DMA_IRQHandler+0x212>
 8010338:	2202      	movs	r2, #2
 801033a:	e73a      	b.n	80101b2 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801033c:	42ab      	cmp	r3, r5
 801033e:	d090      	beq.n	8010262 <HAL_DMA_IRQHandler+0x382>
 8010340:	4a5b      	ldr	r2, [pc, #364]	; (80104b0 <HAL_DMA_IRQHandler+0x5d0>)
 8010342:	4293      	cmp	r3, r2
 8010344:	d100      	bne.n	8010348 <HAL_DMA_IRQHandler+0x468>
 8010346:	e1a1      	b.n	801068c <HAL_DMA_IRQHandler+0x7ac>
 8010348:	4a5a      	ldr	r2, [pc, #360]	; (80104b4 <HAL_DMA_IRQHandler+0x5d4>)
 801034a:	4293      	cmp	r3, r2
 801034c:	d100      	bne.n	8010350 <HAL_DMA_IRQHandler+0x470>
 801034e:	e13c      	b.n	80105ca <HAL_DMA_IRQHandler+0x6ea>
 8010350:	4a59      	ldr	r2, [pc, #356]	; (80104b8 <HAL_DMA_IRQHandler+0x5d8>)
 8010352:	4293      	cmp	r3, r2
 8010354:	d100      	bne.n	8010358 <HAL_DMA_IRQHandler+0x478>
 8010356:	e1ca      	b.n	80106ee <HAL_DMA_IRQHandler+0x80e>
 8010358:	4a58      	ldr	r2, [pc, #352]	; (80104bc <HAL_DMA_IRQHandler+0x5dc>)
 801035a:	4293      	cmp	r3, r2
 801035c:	d100      	bne.n	8010360 <HAL_DMA_IRQHandler+0x480>
 801035e:	e1de      	b.n	801071e <HAL_DMA_IRQHandler+0x83e>
 8010360:	4a57      	ldr	r2, [pc, #348]	; (80104c0 <HAL_DMA_IRQHandler+0x5e0>)
 8010362:	4293      	cmp	r3, r2
 8010364:	d100      	bne.n	8010368 <HAL_DMA_IRQHandler+0x488>
 8010366:	e201      	b.n	801076c <HAL_DMA_IRQHandler+0x88c>
 8010368:	4283      	cmp	r3, r0
 801036a:	d100      	bne.n	801036e <HAL_DMA_IRQHandler+0x48e>
 801036c:	e21e      	b.n	80107ac <HAL_DMA_IRQHandler+0x8cc>
 801036e:	4a55      	ldr	r2, [pc, #340]	; (80104c4 <HAL_DMA_IRQHandler+0x5e4>)
 8010370:	4293      	cmp	r3, r2
 8010372:	d100      	bne.n	8010376 <HAL_DMA_IRQHandler+0x496>
 8010374:	e22d      	b.n	80107d2 <HAL_DMA_IRQHandler+0x8f2>
 8010376:	4a54      	ldr	r2, [pc, #336]	; (80104c8 <HAL_DMA_IRQHandler+0x5e8>)
 8010378:	4293      	cmp	r3, r2
 801037a:	d100      	bne.n	801037e <HAL_DMA_IRQHandler+0x49e>
 801037c:	e22d      	b.n	80107da <HAL_DMA_IRQHandler+0x8fa>
 801037e:	4a53      	ldr	r2, [pc, #332]	; (80104cc <HAL_DMA_IRQHandler+0x5ec>)
 8010380:	4293      	cmp	r3, r2
 8010382:	d100      	bne.n	8010386 <HAL_DMA_IRQHandler+0x4a6>
 8010384:	e121      	b.n	80105ca <HAL_DMA_IRQHandler+0x6ea>
 8010386:	4a52      	ldr	r2, [pc, #328]	; (80104d0 <HAL_DMA_IRQHandler+0x5f0>)
 8010388:	189a      	adds	r2, r3, r2
 801038a:	4250      	negs	r0, r2
 801038c:	4142      	adcs	r2, r0
 801038e:	4853      	ldr	r0, [pc, #332]	; (80104dc <HAL_DMA_IRQHandler+0x5fc>)
 8010390:	4252      	negs	r2, r2
 8010392:	4002      	ands	r2, r0
 8010394:	2080      	movs	r0, #128	; 0x80
 8010396:	0300      	lsls	r0, r0, #12
 8010398:	4684      	mov	ip, r0
 801039a:	4462      	add	r2, ip
 801039c:	484e      	ldr	r0, [pc, #312]	; (80104d8 <HAL_DMA_IRQHandler+0x5f8>)
 801039e:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80103a0:	2001      	movs	r0, #1
 80103a2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80103a4:	4302      	orrs	r2, r0
 80103a6:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80103a8:	2221      	movs	r2, #33	; 0x21
 80103aa:	3003      	adds	r0, #3
 80103ac:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80103ae:	2000      	movs	r0, #0
 80103b0:	3a01      	subs	r2, #1
 80103b2:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80103b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80103b6:	2a00      	cmp	r2, #0
 80103b8:	d007      	beq.n	80103ca <HAL_DMA_IRQHandler+0x4ea>
        hdma->XferErrorCallback(hdma);
 80103ba:	0020      	movs	r0, r4
 80103bc:	4790      	blx	r2
 80103be:	6823      	ldr	r3, [r4, #0]
 80103c0:	0019      	movs	r1, r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80103c2:	4a39      	ldr	r2, [pc, #228]	; (80104a8 <HAL_DMA_IRQHandler+0x5c8>)
 80103c4:	4293      	cmp	r3, r2
 80103c6:	d900      	bls.n	80103ca <HAL_DMA_IRQHandler+0x4ea>
 80103c8:	e64f      	b.n	801006a <HAL_DMA_IRQHandler+0x18a>
 80103ca:	4a43      	ldr	r2, [pc, #268]	; (80104d8 <HAL_DMA_IRQHandler+0x5f8>)
 80103cc:	6810      	ldr	r0, [r2, #0]
 80103ce:	4a37      	ldr	r2, [pc, #220]	; (80104ac <HAL_DMA_IRQHandler+0x5cc>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d100      	bne.n	80103d6 <HAL_DMA_IRQHandler+0x4f6>
 80103d4:	e756      	b.n	8010284 <HAL_DMA_IRQHandler+0x3a4>
 80103d6:	4a36      	ldr	r2, [pc, #216]	; (80104b0 <HAL_DMA_IRQHandler+0x5d0>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d100      	bne.n	80103de <HAL_DMA_IRQHandler+0x4fe>
 80103dc:	e0c4      	b.n	8010568 <HAL_DMA_IRQHandler+0x688>
 80103de:	4a35      	ldr	r2, [pc, #212]	; (80104b4 <HAL_DMA_IRQHandler+0x5d4>)
 80103e0:	4293      	cmp	r3, r2
 80103e2:	d100      	bne.n	80103e6 <HAL_DMA_IRQHandler+0x506>
 80103e4:	e0cb      	b.n	801057e <HAL_DMA_IRQHandler+0x69e>
 80103e6:	4a34      	ldr	r2, [pc, #208]	; (80104b8 <HAL_DMA_IRQHandler+0x5d8>)
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d100      	bne.n	80103ee <HAL_DMA_IRQHandler+0x50e>
 80103ec:	e0d2      	b.n	8010594 <HAL_DMA_IRQHandler+0x6b4>
 80103ee:	4a33      	ldr	r2, [pc, #204]	; (80104bc <HAL_DMA_IRQHandler+0x5dc>)
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d100      	bne.n	80103f6 <HAL_DMA_IRQHandler+0x516>
 80103f4:	e5e4      	b.n	800ffc0 <HAL_DMA_IRQHandler+0xe0>
 80103f6:	4a32      	ldr	r2, [pc, #200]	; (80104c0 <HAL_DMA_IRQHandler+0x5e0>)
 80103f8:	4293      	cmp	r3, r2
 80103fa:	d100      	bne.n	80103fe <HAL_DMA_IRQHandler+0x51e>
 80103fc:	e15e      	b.n	80106bc <HAL_DMA_IRQHandler+0x7dc>
 80103fe:	4a2a      	ldr	r2, [pc, #168]	; (80104a8 <HAL_DMA_IRQHandler+0x5c8>)
 8010400:	4293      	cmp	r3, r2
 8010402:	d100      	bne.n	8010406 <HAL_DMA_IRQHandler+0x526>
 8010404:	e0ec      	b.n	80105e0 <HAL_DMA_IRQHandler+0x700>
 8010406:	4a2f      	ldr	r2, [pc, #188]	; (80104c4 <HAL_DMA_IRQHandler+0x5e4>)
 8010408:	4293      	cmp	r3, r2
 801040a:	d100      	bne.n	801040e <HAL_DMA_IRQHandler+0x52e>
 801040c:	e73a      	b.n	8010284 <HAL_DMA_IRQHandler+0x3a4>
 801040e:	4a2e      	ldr	r2, [pc, #184]	; (80104c8 <HAL_DMA_IRQHandler+0x5e8>)
 8010410:	4293      	cmp	r3, r2
 8010412:	d100      	bne.n	8010416 <HAL_DMA_IRQHandler+0x536>
 8010414:	e0a8      	b.n	8010568 <HAL_DMA_IRQHandler+0x688>
 8010416:	4a2d      	ldr	r2, [pc, #180]	; (80104cc <HAL_DMA_IRQHandler+0x5ec>)
 8010418:	4293      	cmp	r3, r2
 801041a:	d100      	bne.n	801041e <HAL_DMA_IRQHandler+0x53e>
 801041c:	e0af      	b.n	801057e <HAL_DMA_IRQHandler+0x69e>
 801041e:	4a2c      	ldr	r2, [pc, #176]	; (80104d0 <HAL_DMA_IRQHandler+0x5f0>)
 8010420:	189a      	adds	r2, r3, r2
 8010422:	4255      	negs	r5, r2
 8010424:	416a      	adcs	r2, r5
 8010426:	4d2e      	ldr	r5, [pc, #184]	; (80104e0 <HAL_DMA_IRQHandler+0x600>)
 8010428:	4252      	negs	r2, r2
 801042a:	402a      	ands	r2, r5
 801042c:	2580      	movs	r5, #128	; 0x80
 801042e:	02ed      	lsls	r5, r5, #11
 8010430:	46ac      	mov	ip, r5
 8010432:	4462      	add	r2, ip
 8010434:	e727      	b.n	8010286 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010436:	2280      	movs	r2, #128	; 0x80
 8010438:	0092      	lsls	r2, r2, #2
 801043a:	e6ba      	b.n	80101b2 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801043c:	428b      	cmp	r3, r1
 801043e:	d100      	bne.n	8010442 <HAL_DMA_IRQHandler+0x562>
 8010440:	e0e0      	b.n	8010604 <HAL_DMA_IRQHandler+0x724>
 8010442:	491b      	ldr	r1, [pc, #108]	; (80104b0 <HAL_DMA_IRQHandler+0x5d0>)
 8010444:	428b      	cmp	r3, r1
 8010446:	d100      	bne.n	801044a <HAL_DMA_IRQHandler+0x56a>
 8010448:	e105      	b.n	8010656 <HAL_DMA_IRQHandler+0x776>
 801044a:	491a      	ldr	r1, [pc, #104]	; (80104b4 <HAL_DMA_IRQHandler+0x5d4>)
 801044c:	428b      	cmp	r3, r1
 801044e:	d100      	bne.n	8010452 <HAL_DMA_IRQHandler+0x572>
 8010450:	e13e      	b.n	80106d0 <HAL_DMA_IRQHandler+0x7f0>
 8010452:	4919      	ldr	r1, [pc, #100]	; (80104b8 <HAL_DMA_IRQHandler+0x5d8>)
 8010454:	428b      	cmp	r3, r1
 8010456:	d100      	bne.n	801045a <HAL_DMA_IRQHandler+0x57a>
 8010458:	e0cf      	b.n	80105fa <HAL_DMA_IRQHandler+0x71a>
 801045a:	4918      	ldr	r1, [pc, #96]	; (80104bc <HAL_DMA_IRQHandler+0x5dc>)
 801045c:	428b      	cmp	r3, r1
 801045e:	d100      	bne.n	8010462 <HAL_DMA_IRQHandler+0x582>
 8010460:	e157      	b.n	8010712 <HAL_DMA_IRQHandler+0x832>
 8010462:	4917      	ldr	r1, [pc, #92]	; (80104c0 <HAL_DMA_IRQHandler+0x5e0>)
 8010464:	428b      	cmp	r3, r1
 8010466:	d100      	bne.n	801046a <HAL_DMA_IRQHandler+0x58a>
 8010468:	e174      	b.n	8010754 <HAL_DMA_IRQHandler+0x874>
 801046a:	4293      	cmp	r3, r2
 801046c:	d100      	bne.n	8010470 <HAL_DMA_IRQHandler+0x590>
 801046e:	e197      	b.n	80107a0 <HAL_DMA_IRQHandler+0x8c0>
 8010470:	4a14      	ldr	r2, [pc, #80]	; (80104c4 <HAL_DMA_IRQHandler+0x5e4>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d100      	bne.n	8010478 <HAL_DMA_IRQHandler+0x598>
 8010476:	e0c5      	b.n	8010604 <HAL_DMA_IRQHandler+0x724>
 8010478:	4a13      	ldr	r2, [pc, #76]	; (80104c8 <HAL_DMA_IRQHandler+0x5e8>)
 801047a:	4293      	cmp	r3, r2
 801047c:	d100      	bne.n	8010480 <HAL_DMA_IRQHandler+0x5a0>
 801047e:	e0ea      	b.n	8010656 <HAL_DMA_IRQHandler+0x776>
 8010480:	4a12      	ldr	r2, [pc, #72]	; (80104cc <HAL_DMA_IRQHandler+0x5ec>)
 8010482:	4293      	cmp	r3, r2
 8010484:	d100      	bne.n	8010488 <HAL_DMA_IRQHandler+0x5a8>
 8010486:	e123      	b.n	80106d0 <HAL_DMA_IRQHandler+0x7f0>
 8010488:	4a11      	ldr	r2, [pc, #68]	; (80104d0 <HAL_DMA_IRQHandler+0x5f0>)
 801048a:	4694      	mov	ip, r2
 801048c:	4463      	add	r3, ip
 801048e:	1e5a      	subs	r2, r3, #1
 8010490:	4193      	sbcs	r3, r2
 8010492:	22f0      	movs	r2, #240	; 0xf0
 8010494:	425b      	negs	r3, r3
 8010496:	0252      	lsls	r2, r2, #9
 8010498:	4013      	ands	r3, r2
 801049a:	2280      	movs	r2, #128	; 0x80
 801049c:	0192      	lsls	r2, r2, #6
 801049e:	4694      	mov	ip, r2
 80104a0:	4463      	add	r3, ip
 80104a2:	4a0d      	ldr	r2, [pc, #52]	; (80104d8 <HAL_DMA_IRQHandler+0x5f8>)
 80104a4:	6053      	str	r3, [r2, #4]
 80104a6:	e6ce      	b.n	8010246 <HAL_DMA_IRQHandler+0x366>
 80104a8:	40020080 	.word	0x40020080
 80104ac:	40020008 	.word	0x40020008
 80104b0:	4002001c 	.word	0x4002001c
 80104b4:	40020030 	.word	0x40020030
 80104b8:	40020044 	.word	0x40020044
 80104bc:	40020058 	.word	0x40020058
 80104c0:	4002006c 	.word	0x4002006c
 80104c4:	40020408 	.word	0x40020408
 80104c8:	4002041c 	.word	0x4002041c
 80104cc:	40020430 	.word	0x40020430
 80104d0:	bffdfbbc 	.word	0xbffdfbbc
 80104d4:	40020400 	.word	0x40020400
 80104d8:	40020000 	.word	0x40020000
 80104dc:	fff88000 	.word	0xfff88000
 80104e0:	fffc4000 	.word	0xfffc4000
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80104e4:	49c2      	ldr	r1, [pc, #776]	; (80107f0 <HAL_DMA_IRQHandler+0x910>)
 80104e6:	428b      	cmp	r3, r1
 80104e8:	d100      	bne.n	80104ec <HAL_DMA_IRQHandler+0x60c>
 80104ea:	e08f      	b.n	801060c <HAL_DMA_IRQHandler+0x72c>
 80104ec:	49c1      	ldr	r1, [pc, #772]	; (80107f4 <HAL_DMA_IRQHandler+0x914>)
 80104ee:	428b      	cmp	r3, r1
 80104f0:	d100      	bne.n	80104f4 <HAL_DMA_IRQHandler+0x614>
 80104f2:	e0b4      	b.n	801065e <HAL_DMA_IRQHandler+0x77e>
 80104f4:	49c0      	ldr	r1, [pc, #768]	; (80107f8 <HAL_DMA_IRQHandler+0x918>)
 80104f6:	428b      	cmp	r3, r1
 80104f8:	d064      	beq.n	80105c4 <HAL_DMA_IRQHandler+0x6e4>
 80104fa:	49c0      	ldr	r1, [pc, #768]	; (80107fc <HAL_DMA_IRQHandler+0x91c>)
 80104fc:	428b      	cmp	r3, r1
 80104fe:	d100      	bne.n	8010502 <HAL_DMA_IRQHandler+0x622>
 8010500:	e0ef      	b.n	80106e2 <HAL_DMA_IRQHandler+0x802>
 8010502:	49bf      	ldr	r1, [pc, #764]	; (8010800 <HAL_DMA_IRQHandler+0x920>)
 8010504:	428b      	cmp	r3, r1
 8010506:	d100      	bne.n	801050a <HAL_DMA_IRQHandler+0x62a>
 8010508:	e112      	b.n	8010730 <HAL_DMA_IRQHandler+0x850>
 801050a:	49be      	ldr	r1, [pc, #760]	; (8010804 <HAL_DMA_IRQHandler+0x924>)
 801050c:	428b      	cmp	r3, r1
 801050e:	d100      	bne.n	8010512 <HAL_DMA_IRQHandler+0x632>
 8010510:	e12f      	b.n	8010772 <HAL_DMA_IRQHandler+0x892>
 8010512:	4293      	cmp	r3, r2
 8010514:	d100      	bne.n	8010518 <HAL_DMA_IRQHandler+0x638>
 8010516:	e14c      	b.n	80107b2 <HAL_DMA_IRQHandler+0x8d2>
 8010518:	4abb      	ldr	r2, [pc, #748]	; (8010808 <HAL_DMA_IRQHandler+0x928>)
 801051a:	4293      	cmp	r3, r2
 801051c:	d076      	beq.n	801060c <HAL_DMA_IRQHandler+0x72c>
 801051e:	4abb      	ldr	r2, [pc, #748]	; (801080c <HAL_DMA_IRQHandler+0x92c>)
 8010520:	4293      	cmp	r3, r2
 8010522:	d100      	bne.n	8010526 <HAL_DMA_IRQHandler+0x646>
 8010524:	e09b      	b.n	801065e <HAL_DMA_IRQHandler+0x77e>
 8010526:	4aba      	ldr	r2, [pc, #744]	; (8010810 <HAL_DMA_IRQHandler+0x930>)
 8010528:	4293      	cmp	r3, r2
 801052a:	d04b      	beq.n	80105c4 <HAL_DMA_IRQHandler+0x6e4>
 801052c:	4ab9      	ldr	r2, [pc, #740]	; (8010814 <HAL_DMA_IRQHandler+0x934>)
 801052e:	189a      	adds	r2, r3, r2
 8010530:	1e51      	subs	r1, r2, #1
 8010532:	418a      	sbcs	r2, r1
 8010534:	21f0      	movs	r1, #240	; 0xf0
 8010536:	4252      	negs	r2, r2
 8010538:	0289      	lsls	r1, r1, #10
 801053a:	400a      	ands	r2, r1
 801053c:	2180      	movs	r1, #128	; 0x80
 801053e:	01c9      	lsls	r1, r1, #7
 8010540:	468c      	mov	ip, r1
 8010542:	4462      	add	r2, ip
 8010544:	49b4      	ldr	r1, [pc, #720]	; (8010818 <HAL_DMA_IRQHandler+0x938>)
 8010546:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010548:	2221      	movs	r2, #33	; 0x21
 801054a:	2111      	movs	r1, #17
 801054c:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801054e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010550:	2a00      	cmp	r2, #0
 8010552:	d100      	bne.n	8010556 <HAL_DMA_IRQHandler+0x676>
 8010554:	e6ea      	b.n	801032c <HAL_DMA_IRQHandler+0x44c>
        hdma->XferHalfCpltCallback(hdma);
 8010556:	0020      	movs	r0, r4
 8010558:	4790      	blx	r2
 801055a:	6823      	ldr	r3, [r4, #0]
 801055c:	e6e2      	b.n	8010324 <HAL_DMA_IRQHandler+0x444>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801055e:	0632      	lsls	r2, r6, #24
 8010560:	d500      	bpl.n	8010564 <HAL_DMA_IRQHandler+0x684>
 8010562:	e534      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010564:	0019      	movs	r1, r3
 8010566:	6800      	ldr	r0, [r0, #0]
 8010568:	2240      	movs	r2, #64	; 0x40
 801056a:	e68c      	b.n	8010286 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801056c:	0632      	lsls	r2, r6, #24
 801056e:	d500      	bpl.n	8010572 <HAL_DMA_IRQHandler+0x692>
 8010570:	e52d      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010572:	6800      	ldr	r0, [r0, #0]
 8010574:	2240      	movs	r2, #64	; 0x40
 8010576:	e5b3      	b.n	80100e0 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010578:	2280      	movs	r2, #128	; 0x80
 801057a:	0192      	lsls	r2, r2, #6
 801057c:	e619      	b.n	80101b2 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801057e:	2280      	movs	r2, #128	; 0x80
 8010580:	00d2      	lsls	r2, r2, #3
 8010582:	e680      	b.n	8010286 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010584:	2280      	movs	r2, #128	; 0x80
 8010586:	0292      	lsls	r2, r2, #10
 8010588:	e613      	b.n	80101b2 <HAL_DMA_IRQHandler+0x2d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801058a:	0432      	lsls	r2, r6, #16
 801058c:	d500      	bpl.n	8010590 <HAL_DMA_IRQHandler+0x6b0>
 801058e:	e51e      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010590:	4aa1      	ldr	r2, [pc, #644]	; (8010818 <HAL_DMA_IRQHandler+0x938>)
 8010592:	6810      	ldr	r0, [r2, #0]
 8010594:	2280      	movs	r2, #128	; 0x80
 8010596:	01d2      	lsls	r2, r2, #7
 8010598:	e675      	b.n	8010286 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801059a:	0432      	lsls	r2, r6, #16
 801059c:	d500      	bpl.n	80105a0 <HAL_DMA_IRQHandler+0x6c0>
 801059e:	e516      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80105a0:	2280      	movs	r2, #128	; 0x80
 80105a2:	6800      	ldr	r0, [r0, #0]
 80105a4:	0019      	movs	r1, r3
 80105a6:	01d2      	lsls	r2, r2, #7
 80105a8:	e66d      	b.n	8010286 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80105aa:	0432      	lsls	r2, r6, #16
 80105ac:	d500      	bpl.n	80105b0 <HAL_DMA_IRQHandler+0x6d0>
 80105ae:	e50e      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80105b0:	2280      	movs	r2, #128	; 0x80
 80105b2:	6800      	ldr	r0, [r0, #0]
 80105b4:	01d2      	lsls	r2, r2, #7
 80105b6:	e593      	b.n	80100e0 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80105b8:	2280      	movs	r2, #128	; 0x80
 80105ba:	0392      	lsls	r2, r2, #14
 80105bc:	e5f9      	b.n	80101b2 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80105be:	2280      	movs	r2, #128	; 0x80
 80105c0:	0112      	lsls	r2, r2, #4
 80105c2:	e542      	b.n	801004a <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80105c4:	2280      	movs	r2, #128	; 0x80
 80105c6:	00d2      	lsls	r2, r2, #3
 80105c8:	e7bc      	b.n	8010544 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80105ca:	2280      	movs	r2, #128	; 0x80
 80105cc:	0112      	lsls	r2, r2, #4
 80105ce:	e6e5      	b.n	801039c <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80105d0:	2280      	movs	r2, #128	; 0x80
 80105d2:	00d2      	lsls	r2, r2, #3
 80105d4:	e69a      	b.n	801030c <HAL_DMA_IRQHandler+0x42c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80105d6:	0132      	lsls	r2, r6, #4
 80105d8:	d500      	bpl.n	80105dc <HAL_DMA_IRQHandler+0x6fc>
 80105da:	e4f8      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80105dc:	0019      	movs	r1, r3
 80105de:	6800      	ldr	r0, [r0, #0]
 80105e0:	2280      	movs	r2, #128	; 0x80
 80105e2:	04d2      	lsls	r2, r2, #19
 80105e4:	e64f      	b.n	8010286 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80105e6:	0132      	lsls	r2, r6, #4
 80105e8:	d500      	bpl.n	80105ec <HAL_DMA_IRQHandler+0x70c>
 80105ea:	e4f0      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80105ec:	6800      	ldr	r0, [r0, #0]
 80105ee:	2280      	movs	r2, #128	; 0x80
 80105f0:	04d2      	lsls	r2, r2, #19
 80105f2:	e575      	b.n	80100e0 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80105f4:	2380      	movs	r3, #128	; 0x80
 80105f6:	019b      	lsls	r3, r3, #6
 80105f8:	e623      	b.n	8010242 <HAL_DMA_IRQHandler+0x362>
 80105fa:	2380      	movs	r3, #128	; 0x80
 80105fc:	019b      	lsls	r3, r3, #6
 80105fe:	e750      	b.n	80104a2 <HAL_DMA_IRQHandler+0x5c2>
 8010600:	2302      	movs	r3, #2
 8010602:	e61e      	b.n	8010242 <HAL_DMA_IRQHandler+0x362>
 8010604:	2302      	movs	r3, #2
 8010606:	e74c      	b.n	80104a2 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010608:	2204      	movs	r2, #4
 801060a:	e67f      	b.n	801030c <HAL_DMA_IRQHandler+0x42c>
 801060c:	2204      	movs	r2, #4
 801060e:	e799      	b.n	8010544 <HAL_DMA_IRQHandler+0x664>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010610:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010612:	4882      	ldr	r0, [pc, #520]	; (801081c <HAL_DMA_IRQHandler+0x93c>)
 8010614:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010616:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010618:	432a      	orrs	r2, r5
 801061a:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801061c:	2221      	movs	r2, #33	; 0x21
 801061e:	3503      	adds	r5, #3
 8010620:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010622:	2500      	movs	r5, #0
 8010624:	3a01      	subs	r2, #1
 8010626:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010628:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801062a:	2a00      	cmp	r2, #0
 801062c:	d000      	beq.n	8010630 <HAL_DMA_IRQHandler+0x750>
 801062e:	e6c4      	b.n	80103ba <HAL_DMA_IRQHandler+0x4da>
 8010630:	e554      	b.n	80100dc <HAL_DMA_IRQHandler+0x1fc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010632:	0332      	lsls	r2, r6, #12
 8010634:	d500      	bpl.n	8010638 <HAL_DMA_IRQHandler+0x758>
 8010636:	e4ca      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010638:	2280      	movs	r2, #128	; 0x80
 801063a:	6800      	ldr	r0, [r0, #0]
 801063c:	02d2      	lsls	r2, r2, #11
 801063e:	e54f      	b.n	80100e0 <HAL_DMA_IRQHandler+0x200>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010640:	0332      	lsls	r2, r6, #12
 8010642:	d500      	bpl.n	8010646 <HAL_DMA_IRQHandler+0x766>
 8010644:	e4c3      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010646:	2280      	movs	r2, #128	; 0x80
 8010648:	6800      	ldr	r0, [r0, #0]
 801064a:	0019      	movs	r1, r3
 801064c:	02d2      	lsls	r2, r2, #11
 801064e:	e61a      	b.n	8010286 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010650:	2280      	movs	r2, #128	; 0x80
 8010652:	0492      	lsls	r2, r2, #18
 8010654:	e5ad      	b.n	80101b2 <HAL_DMA_IRQHandler+0x2d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010656:	2320      	movs	r3, #32
 8010658:	e723      	b.n	80104a2 <HAL_DMA_IRQHandler+0x5c2>
 801065a:	2320      	movs	r3, #32
 801065c:	e5f1      	b.n	8010242 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801065e:	2240      	movs	r2, #64	; 0x40
 8010660:	e770      	b.n	8010544 <HAL_DMA_IRQHandler+0x664>
 8010662:	2240      	movs	r2, #64	; 0x40
 8010664:	e652      	b.n	801030c <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010666:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010668:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801066a:	486c      	ldr	r0, [pc, #432]	; (801081c <HAL_DMA_IRQHandler+0x93c>)
 801066c:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801066e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010670:	432a      	orrs	r2, r5
 8010672:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010674:	2221      	movs	r2, #33	; 0x21
 8010676:	3503      	adds	r5, #3
 8010678:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801067a:	2500      	movs	r5, #0
 801067c:	3a01      	subs	r2, #1
 801067e:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010680:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010682:	2a00      	cmp	r2, #0
 8010684:	d000      	beq.n	8010688 <HAL_DMA_IRQHandler+0x7a8>
 8010686:	e698      	b.n	80103ba <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010688:	6800      	ldr	r0, [r0, #0]
 801068a:	e4f4      	b.n	8010076 <HAL_DMA_IRQHandler+0x196>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801068c:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801068e:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010690:	4861      	ldr	r0, [pc, #388]	; (8010818 <HAL_DMA_IRQHandler+0x938>)
 8010692:	6042      	str	r2, [r0, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010694:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010696:	432a      	orrs	r2, r5
 8010698:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801069a:	2221      	movs	r2, #33	; 0x21
 801069c:	3503      	adds	r5, #3
 801069e:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80106a0:	2500      	movs	r5, #0
 80106a2:	3a01      	subs	r2, #1
 80106a4:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80106a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80106a8:	2a00      	cmp	r2, #0
 80106aa:	d000      	beq.n	80106ae <HAL_DMA_IRQHandler+0x7ce>
 80106ac:	e685      	b.n	80103ba <HAL_DMA_IRQHandler+0x4da>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80106ae:	6800      	ldr	r0, [r0, #0]
 80106b0:	e691      	b.n	80103d6 <HAL_DMA_IRQHandler+0x4f6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80106b2:	0232      	lsls	r2, r6, #8
 80106b4:	d500      	bpl.n	80106b8 <HAL_DMA_IRQHandler+0x7d8>
 80106b6:	e48a      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80106b8:	0019      	movs	r1, r3
 80106ba:	6800      	ldr	r0, [r0, #0]
 80106bc:	2280      	movs	r2, #128	; 0x80
 80106be:	03d2      	lsls	r2, r2, #15
 80106c0:	e5e1      	b.n	8010286 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80106c2:	0232      	lsls	r2, r6, #8
 80106c4:	d500      	bpl.n	80106c8 <HAL_DMA_IRQHandler+0x7e8>
 80106c6:	e482      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80106c8:	6800      	ldr	r0, [r0, #0]
 80106ca:	2280      	movs	r2, #128	; 0x80
 80106cc:	03d2      	lsls	r2, r2, #15
 80106ce:	e507      	b.n	80100e0 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80106d0:	2380      	movs	r3, #128	; 0x80
 80106d2:	009b      	lsls	r3, r3, #2
 80106d4:	e6e5      	b.n	80104a2 <HAL_DMA_IRQHandler+0x5c2>
 80106d6:	2380      	movs	r3, #128	; 0x80
 80106d8:	009b      	lsls	r3, r3, #2
 80106da:	e5b2      	b.n	8010242 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80106dc:	2280      	movs	r2, #128	; 0x80
 80106de:	01d2      	lsls	r2, r2, #7
 80106e0:	e614      	b.n	801030c <HAL_DMA_IRQHandler+0x42c>
 80106e2:	2280      	movs	r2, #128	; 0x80
 80106e4:	01d2      	lsls	r2, r2, #7
 80106e6:	e72d      	b.n	8010544 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80106e8:	2280      	movs	r2, #128	; 0x80
 80106ea:	0212      	lsls	r2, r2, #8
 80106ec:	e4ad      	b.n	801004a <HAL_DMA_IRQHandler+0x16a>
 80106ee:	2280      	movs	r2, #128	; 0x80
 80106f0:	0212      	lsls	r2, r2, #8
 80106f2:	e653      	b.n	801039c <HAL_DMA_IRQHandler+0x4bc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80106f4:	0732      	lsls	r2, r6, #28
 80106f6:	d500      	bpl.n	80106fa <HAL_DMA_IRQHandler+0x81a>
 80106f8:	e469      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80106fa:	4a47      	ldr	r2, [pc, #284]	; (8010818 <HAL_DMA_IRQHandler+0x938>)
 80106fc:	6810      	ldr	r0, [r2, #0]
 80106fe:	2204      	movs	r2, #4
 8010700:	e5c1      	b.n	8010286 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010702:	0732      	lsls	r2, r6, #28
 8010704:	d500      	bpl.n	8010708 <HAL_DMA_IRQHandler+0x828>
 8010706:	e462      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010708:	4a44      	ldr	r2, [pc, #272]	; (801081c <HAL_DMA_IRQHandler+0x93c>)
 801070a:	493f      	ldr	r1, [pc, #252]	; (8010808 <HAL_DMA_IRQHandler+0x928>)
 801070c:	6810      	ldr	r0, [r2, #0]
 801070e:	2204      	movs	r2, #4
 8010710:	e4e6      	b.n	80100e0 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010712:	2380      	movs	r3, #128	; 0x80
 8010714:	029b      	lsls	r3, r3, #10
 8010716:	e6c4      	b.n	80104a2 <HAL_DMA_IRQHandler+0x5c2>
 8010718:	2380      	movs	r3, #128	; 0x80
 801071a:	029b      	lsls	r3, r3, #10
 801071c:	e591      	b.n	8010242 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801071e:	2280      	movs	r2, #128	; 0x80
 8010720:	0312      	lsls	r2, r2, #12
 8010722:	e63b      	b.n	801039c <HAL_DMA_IRQHandler+0x4bc>
 8010724:	2280      	movs	r2, #128	; 0x80
 8010726:	0312      	lsls	r2, r2, #12
 8010728:	e48f      	b.n	801004a <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801072a:	2280      	movs	r2, #128	; 0x80
 801072c:	02d2      	lsls	r2, r2, #11
 801072e:	e5ed      	b.n	801030c <HAL_DMA_IRQHandler+0x42c>
 8010730:	2280      	movs	r2, #128	; 0x80
 8010732:	02d2      	lsls	r2, r2, #11
 8010734:	e706      	b.n	8010544 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010736:	0632      	lsls	r2, r6, #24
 8010738:	d500      	bpl.n	801073c <HAL_DMA_IRQHandler+0x85c>
 801073a:	e448      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801073c:	4a36      	ldr	r2, [pc, #216]	; (8010818 <HAL_DMA_IRQHandler+0x938>)
 801073e:	6810      	ldr	r0, [r2, #0]
 8010740:	2240      	movs	r2, #64	; 0x40
 8010742:	e5a0      	b.n	8010286 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010744:	0632      	lsls	r2, r6, #24
 8010746:	d500      	bpl.n	801074a <HAL_DMA_IRQHandler+0x86a>
 8010748:	e441      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801074a:	4a34      	ldr	r2, [pc, #208]	; (801081c <HAL_DMA_IRQHandler+0x93c>)
 801074c:	492f      	ldr	r1, [pc, #188]	; (801080c <HAL_DMA_IRQHandler+0x92c>)
 801074e:	6810      	ldr	r0, [r2, #0]
 8010750:	2240      	movs	r2, #64	; 0x40
 8010752:	e4c5      	b.n	80100e0 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010754:	2380      	movs	r3, #128	; 0x80
 8010756:	039b      	lsls	r3, r3, #14
 8010758:	e6a3      	b.n	80104a2 <HAL_DMA_IRQHandler+0x5c2>
 801075a:	2380      	movs	r3, #128	; 0x80
 801075c:	039b      	lsls	r3, r3, #14
 801075e:	e570      	b.n	8010242 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010760:	2280      	movs	r2, #128	; 0x80
 8010762:	0412      	lsls	r2, r2, #16
 8010764:	e471      	b.n	801004a <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010766:	2280      	movs	r2, #128	; 0x80
 8010768:	03d2      	lsls	r2, r2, #15
 801076a:	e5cf      	b.n	801030c <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801076c:	2280      	movs	r2, #128	; 0x80
 801076e:	0412      	lsls	r2, r2, #16
 8010770:	e614      	b.n	801039c <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010772:	2280      	movs	r2, #128	; 0x80
 8010774:	03d2      	lsls	r2, r2, #15
 8010776:	e6e5      	b.n	8010544 <HAL_DMA_IRQHandler+0x664>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010778:	0532      	lsls	r2, r6, #20
 801077a:	d500      	bpl.n	801077e <HAL_DMA_IRQHandler+0x89e>
 801077c:	e427      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801077e:	4a26      	ldr	r2, [pc, #152]	; (8010818 <HAL_DMA_IRQHandler+0x938>)
 8010780:	6810      	ldr	r0, [r2, #0]
 8010782:	2280      	movs	r2, #128	; 0x80
 8010784:	00d2      	lsls	r2, r2, #3
 8010786:	e57e      	b.n	8010286 <HAL_DMA_IRQHandler+0x3a6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010788:	0532      	lsls	r2, r6, #20
 801078a:	d500      	bpl.n	801078e <HAL_DMA_IRQHandler+0x8ae>
 801078c:	e41f      	b.n	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801078e:	4a23      	ldr	r2, [pc, #140]	; (801081c <HAL_DMA_IRQHandler+0x93c>)
 8010790:	0019      	movs	r1, r3
 8010792:	6810      	ldr	r0, [r2, #0]
 8010794:	2280      	movs	r2, #128	; 0x80
 8010796:	00d2      	lsls	r2, r2, #3
 8010798:	e4a2      	b.n	80100e0 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801079a:	2380      	movs	r3, #128	; 0x80
 801079c:	049b      	lsls	r3, r3, #18
 801079e:	e550      	b.n	8010242 <HAL_DMA_IRQHandler+0x362>
 80107a0:	2380      	movs	r3, #128	; 0x80
 80107a2:	049b      	lsls	r3, r3, #18
 80107a4:	e67d      	b.n	80104a2 <HAL_DMA_IRQHandler+0x5c2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80107a6:	2280      	movs	r2, #128	; 0x80
 80107a8:	04d2      	lsls	r2, r2, #19
 80107aa:	e5af      	b.n	801030c <HAL_DMA_IRQHandler+0x42c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80107ac:	2280      	movs	r2, #128	; 0x80
 80107ae:	0512      	lsls	r2, r2, #20
 80107b0:	e5f4      	b.n	801039c <HAL_DMA_IRQHandler+0x4bc>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80107b2:	2280      	movs	r2, #128	; 0x80
 80107b4:	04d2      	lsls	r2, r2, #19
 80107b6:	e6c5      	b.n	8010544 <HAL_DMA_IRQHandler+0x664>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80107b8:	2280      	movs	r2, #128	; 0x80
 80107ba:	0512      	lsls	r2, r2, #20
 80107bc:	e445      	b.n	801004a <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80107be:	0432      	lsls	r2, r6, #16
 80107c0:	d501      	bpl.n	80107c6 <HAL_DMA_IRQHandler+0x8e6>
 80107c2:	f7ff fc04 	bl	800ffce <HAL_DMA_IRQHandler+0xee>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80107c6:	0019      	movs	r1, r3
 80107c8:	4a14      	ldr	r2, [pc, #80]	; (801081c <HAL_DMA_IRQHandler+0x93c>)
 80107ca:	6810      	ldr	r0, [r2, #0]
 80107cc:	2280      	movs	r2, #128	; 0x80
 80107ce:	01d2      	lsls	r2, r2, #7
 80107d0:	e486      	b.n	80100e0 <HAL_DMA_IRQHandler+0x200>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80107d2:	2208      	movs	r2, #8
 80107d4:	e5e2      	b.n	801039c <HAL_DMA_IRQHandler+0x4bc>
 80107d6:	2208      	movs	r2, #8
 80107d8:	e437      	b.n	801004a <HAL_DMA_IRQHandler+0x16a>
 80107da:	2280      	movs	r2, #128	; 0x80
 80107dc:	e5de      	b.n	801039c <HAL_DMA_IRQHandler+0x4bc>
 80107de:	2280      	movs	r2, #128	; 0x80
 80107e0:	e433      	b.n	801004a <HAL_DMA_IRQHandler+0x16a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80107e2:	6800      	ldr	r0, [r0, #0]
 80107e4:	0019      	movs	r1, r3
 80107e6:	2204      	movs	r2, #4
 80107e8:	e54d      	b.n	8010286 <HAL_DMA_IRQHandler+0x3a6>
 80107ea:	2280      	movs	r2, #128	; 0x80
 80107ec:	00d2      	lsls	r2, r2, #3
 80107ee:	e477      	b.n	80100e0 <HAL_DMA_IRQHandler+0x200>
 80107f0:	40020008 	.word	0x40020008
 80107f4:	4002001c 	.word	0x4002001c
 80107f8:	40020030 	.word	0x40020030
 80107fc:	40020044 	.word	0x40020044
 8010800:	40020058 	.word	0x40020058
 8010804:	4002006c 	.word	0x4002006c
 8010808:	40020408 	.word	0x40020408
 801080c:	4002041c 	.word	0x4002041c
 8010810:	40020430 	.word	0x40020430
 8010814:	bffdfbbc 	.word	0xbffdfbbc
 8010818:	40020000 	.word	0x40020000
 801081c:	40020400 	.word	0x40020400

08010820 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010820:	4b05      	ldr	r3, [pc, #20]	; (8010838 <HAL_FLASH_Unlock+0x18>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
  }
  else
  {
    return HAL_ERROR;
 8010822:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010824:	691a      	ldr	r2, [r3, #16]
 8010826:	0612      	lsls	r2, r2, #24
 8010828:	d504      	bpl.n	8010834 <HAL_FLASH_Unlock+0x14>
  }

  return HAL_OK; 
 801082a:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801082c:	4a03      	ldr	r2, [pc, #12]	; (801083c <HAL_FLASH_Unlock+0x1c>)
 801082e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010830:	4a03      	ldr	r2, [pc, #12]	; (8010840 <HAL_FLASH_Unlock+0x20>)
 8010832:	605a      	str	r2, [r3, #4]
}
 8010834:	4770      	bx	lr
 8010836:	46c0      	nop			; (mov r8, r8)
 8010838:	40022000 	.word	0x40022000
 801083c:	45670123 	.word	0x45670123
 8010840:	cdef89ab 	.word	0xcdef89ab

08010844 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010844:	2180      	movs	r1, #128	; 0x80
 8010846:	4a03      	ldr	r2, [pc, #12]	; (8010854 <HAL_FLASH_Lock+0x10>)
  

  return HAL_OK;  
}
 8010848:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801084a:	6913      	ldr	r3, [r2, #16]
 801084c:	430b      	orrs	r3, r1
 801084e:	6113      	str	r3, [r2, #16]
}
 8010850:	4770      	bx	lr
 8010852:	46c0      	nop			; (mov r8, r8)
 8010854:	40022000 	.word	0x40022000

08010858 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8010858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801085a:	0005      	movs	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 801085c:	f7fe fe70 	bl	800f540 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010860:	4c1d      	ldr	r4, [pc, #116]	; (80108d8 <FLASH_WaitForLastOperation+0x80>)
  uint32_t tickstart = HAL_GetTick();
 8010862:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010864:	2601      	movs	r6, #1
 8010866:	e001      	b.n	801086c <FLASH_WaitForLastOperation+0x14>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8010868:	1c6b      	adds	r3, r5, #1
 801086a:	d11d      	bne.n	80108a8 <FLASH_WaitForLastOperation+0x50>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801086c:	68e3      	ldr	r3, [r4, #12]
 801086e:	421e      	tst	r6, r3
 8010870:	d1fa      	bne.n	8010868 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8010872:	2320      	movs	r3, #32
 8010874:	68e2      	ldr	r2, [r4, #12]
 8010876:	4213      	tst	r3, r2
 8010878:	d000      	beq.n	801087c <FLASH_WaitForLastOperation+0x24>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801087a:	60e3      	str	r3, [r4, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801087c:	4b16      	ldr	r3, [pc, #88]	; (80108d8 <FLASH_WaitForLastOperation+0x80>)
 801087e:	68da      	ldr	r2, [r3, #12]
 8010880:	06d2      	lsls	r2, r2, #27
 8010882:	d51a      	bpl.n	80108ba <FLASH_WaitForLastOperation+0x62>
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010884:	4b14      	ldr	r3, [pc, #80]	; (80108d8 <FLASH_WaitForLastOperation+0x80>)
 8010886:	68db      	ldr	r3, [r3, #12]
 8010888:	06db      	lsls	r3, r3, #27
 801088a:	d504      	bpl.n	8010896 <FLASH_WaitForLastOperation+0x3e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801088c:	2102      	movs	r1, #2
 801088e:	4a13      	ldr	r2, [pc, #76]	; (80108dc <FLASH_WaitForLastOperation+0x84>)
 8010890:	69d3      	ldr	r3, [r2, #28]
 8010892:	430b      	orrs	r3, r1
 8010894:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010896:	4b10      	ldr	r3, [pc, #64]	; (80108d8 <FLASH_WaitForLastOperation+0x80>)
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	075b      	lsls	r3, r3, #29
 801089c:	d416      	bmi.n	80108cc <FLASH_WaitForLastOperation+0x74>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 801089e:	2214      	movs	r2, #20
    return HAL_ERROR;
 80108a0:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 80108a2:	4b0d      	ldr	r3, [pc, #52]	; (80108d8 <FLASH_WaitForLastOperation+0x80>)
 80108a4:	60da      	str	r2, [r3, #12]
}
 80108a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80108a8:	2d00      	cmp	r5, #0
 80108aa:	d004      	beq.n	80108b6 <FLASH_WaitForLastOperation+0x5e>
 80108ac:	f7fe fe48 	bl	800f540 <HAL_GetTick>
 80108b0:	1bc0      	subs	r0, r0, r7
 80108b2:	42a8      	cmp	r0, r5
 80108b4:	d9da      	bls.n	801086c <FLASH_WaitForLastOperation+0x14>
        return HAL_TIMEOUT;
 80108b6:	2003      	movs	r0, #3
 80108b8:	e7f5      	b.n	80108a6 <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80108ba:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 80108bc:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80108be:	075b      	lsls	r3, r3, #29
 80108c0:	d5f1      	bpl.n	80108a6 <FLASH_WaitForLastOperation+0x4e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80108c2:	4b05      	ldr	r3, [pc, #20]	; (80108d8 <FLASH_WaitForLastOperation+0x80>)
 80108c4:	68db      	ldr	r3, [r3, #12]
 80108c6:	06db      	lsls	r3, r3, #27
 80108c8:	d5e5      	bpl.n	8010896 <FLASH_WaitForLastOperation+0x3e>
 80108ca:	e7df      	b.n	801088c <FLASH_WaitForLastOperation+0x34>
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80108cc:	2101      	movs	r1, #1
 80108ce:	4a03      	ldr	r2, [pc, #12]	; (80108dc <FLASH_WaitForLastOperation+0x84>)
 80108d0:	69d3      	ldr	r3, [r2, #28]
 80108d2:	430b      	orrs	r3, r1
 80108d4:	61d3      	str	r3, [r2, #28]
 80108d6:	e7e2      	b.n	801089e <FLASH_WaitForLastOperation+0x46>
 80108d8:	40022000 	.word	0x40022000
 80108dc:	200073a8 	.word	0x200073a8

080108e0 <HAL_FLASH_Program>:
{
 80108e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108e2:	464e      	mov	r6, r9
 80108e4:	4657      	mov	r7, sl
 80108e6:	46de      	mov	lr, fp
 80108e8:	4645      	mov	r5, r8
 80108ea:	b5e0      	push	{r5, r6, r7, lr}
 80108ec:	469a      	mov	sl, r3
 80108ee:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 80108f0:	4b2a      	ldr	r3, [pc, #168]	; (801099c <HAL_FLASH_Program+0xbc>)
{
 80108f2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 80108f4:	4699      	mov	r9, r3
 80108f6:	7e1b      	ldrb	r3, [r3, #24]
{
 80108f8:	0004      	movs	r4, r0
 80108fa:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 80108fc:	2b01      	cmp	r3, #1
 80108fe:	d048      	beq.n	8010992 <HAL_FLASH_Program+0xb2>
 8010900:	2501      	movs	r5, #1
 8010902:	464b      	mov	r3, r9
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010904:	4826      	ldr	r0, [pc, #152]	; (80109a0 <HAL_FLASH_Program+0xc0>)
  __HAL_LOCK(&pFlash);
 8010906:	761d      	strb	r5, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010908:	f7ff ffa6 	bl	8010858 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 801090c:	2800      	cmp	r0, #0
 801090e:	d136      	bne.n	801097e <HAL_FLASH_Program+0x9e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010910:	2c01      	cmp	r4, #1
 8010912:	d040      	beq.n	8010996 <HAL_FLASH_Program+0xb6>
      nbiterations = 4;
 8010914:	3c02      	subs	r4, #2
 8010916:	4263      	negs	r3, r4
 8010918:	415c      	adcs	r4, r3
 801091a:	2304      	movs	r3, #4
 801091c:	4264      	negs	r4, r4
 801091e:	43ac      	bics	r4, r5
 8010920:	46a0      	mov	r8, r4
 8010922:	469c      	mov	ip, r3
 8010924:	44e0      	add	r8, ip
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010926:	2300      	movs	r3, #0
      nbiterations = 4;
 8010928:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801092a:	469b      	mov	fp, r3
 801092c:	e018      	b.n	8010960 <HAL_FLASH_Program+0x80>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 801092e:	4653      	mov	r3, sl
 8010930:	40d3      	lsrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010932:	464a      	mov	r2, r9
 8010934:	4659      	mov	r1, fp
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010936:	2701      	movs	r7, #1
 8010938:	4c1a      	ldr	r4, [pc, #104]	; (80109a4 <HAL_FLASH_Program+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801093a:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 801093c:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 801093e:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010940:	433a      	orrs	r2, r7
 8010942:	6122      	str	r2, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010944:	4816      	ldr	r0, [pc, #88]	; (80109a0 <HAL_FLASH_Program+0xc0>)
  *(__IO uint16_t*)Address = Data;
 8010946:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010948:	f7ff ff86 	bl	8010858 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 801094c:	6923      	ldr	r3, [r4, #16]
 801094e:	43bb      	bics	r3, r7
 8010950:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8010952:	2800      	cmp	r0, #0
 8010954:	d113      	bne.n	801097e <HAL_FLASH_Program+0x9e>
 8010956:	3501      	adds	r5, #1
    for (index = 0; index < nbiterations; index++)
 8010958:	b2eb      	uxtb	r3, r5
 801095a:	3602      	adds	r6, #2
 801095c:	4598      	cmp	r8, r3
 801095e:	d90e      	bls.n	801097e <HAL_FLASH_Program+0x9e>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010960:	2220      	movs	r2, #32
 8010962:	012b      	lsls	r3, r5, #4
 8010964:	4252      	negs	r2, r2
 8010966:	189a      	adds	r2, r3, r2
 8010968:	d5e1      	bpl.n	801092e <HAL_FLASH_Program+0x4e>
 801096a:	2220      	movs	r2, #32
 801096c:	4651      	mov	r1, sl
 801096e:	1ad2      	subs	r2, r2, r3
 8010970:	4091      	lsls	r1, r2
 8010972:	000a      	movs	r2, r1
 8010974:	9901      	ldr	r1, [sp, #4]
 8010976:	40d9      	lsrs	r1, r3
 8010978:	000b      	movs	r3, r1
 801097a:	4313      	orrs	r3, r2
 801097c:	e7d9      	b.n	8010932 <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 801097e:	2300      	movs	r3, #0
 8010980:	464a      	mov	r2, r9
 8010982:	7613      	strb	r3, [r2, #24]
}
 8010984:	b003      	add	sp, #12
 8010986:	bc3c      	pop	{r2, r3, r4, r5}
 8010988:	4690      	mov	r8, r2
 801098a:	4699      	mov	r9, r3
 801098c:	46a2      	mov	sl, r4
 801098e:	46ab      	mov	fp, r5
 8010990:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8010992:	2002      	movs	r0, #2
 8010994:	e7f6      	b.n	8010984 <HAL_FLASH_Program+0xa4>
      nbiterations = 1;
 8010996:	2301      	movs	r3, #1
 8010998:	4698      	mov	r8, r3
 801099a:	e7c4      	b.n	8010926 <HAL_FLASH_Program+0x46>
 801099c:	200073a8 	.word	0x200073a8
 80109a0:	0000c350 	.word	0x0000c350
 80109a4:	40022000 	.word	0x40022000

080109a8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80109a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109aa:	464f      	mov	r7, r9
 80109ac:	4646      	mov	r6, r8
 80109ae:	46d6      	mov	lr, sl
 80109b0:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80109b2:	4f30      	ldr	r7, [pc, #192]	; (8010a74 <HAL_FLASHEx_Erase+0xcc>)
{
 80109b4:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 80109b6:	7e3b      	ldrb	r3, [r7, #24]
{
 80109b8:	4689      	mov	r9, r1
  __HAL_LOCK(&pFlash);
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	d057      	beq.n	8010a6e <HAL_FLASHEx_Erase+0xc6>
 80109be:	2301      	movs	r3, #1
 80109c0:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80109c2:	6803      	ldr	r3, [r0, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80109c4:	482c      	ldr	r0, [pc, #176]	; (8010a78 <HAL_FLASHEx_Erase+0xd0>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80109c6:	2b01      	cmp	r3, #1
 80109c8:	d034      	beq.n	8010a34 <HAL_FLASHEx_Erase+0x8c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80109ca:	f7ff ff45 	bl	8010858 <FLASH_WaitForLastOperation>
 80109ce:	2800      	cmp	r0, #0
 80109d0:	d134      	bne.n	8010a3c <HAL_FLASHEx_Erase+0x94>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 80109d2:	2301      	movs	r3, #1
 80109d4:	464a      	mov	r2, r9
 80109d6:	425b      	negs	r3, r3
 80109d8:	6013      	str	r3, [r2, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80109da:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 80109dc:	6875      	ldr	r5, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80109de:	02db      	lsls	r3, r3, #11
 80109e0:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 80109e2:	429d      	cmp	r5, r3
 80109e4:	d22a      	bcs.n	8010a3c <HAL_FLASHEx_Erase+0x94>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80109e6:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80109e8:	4c24      	ldr	r4, [pc, #144]	; (8010a7c <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80109ea:	4698      	mov	r8, r3
 80109ec:	e00a      	b.n	8010a04 <HAL_FLASHEx_Erase+0x5c>
            address += FLASH_PAGE_SIZE)
 80109ee:	2380      	movs	r3, #128	; 0x80
 80109f0:	011b      	lsls	r3, r3, #4
 80109f2:	469c      	mov	ip, r3
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80109f4:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 80109f6:	4465      	add	r5, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80109f8:	4694      	mov	ip, r2
 80109fa:	68b3      	ldr	r3, [r6, #8]
 80109fc:	02db      	lsls	r3, r3, #11
 80109fe:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8010a00:	42ab      	cmp	r3, r5
 8010a02:	d91c      	bls.n	8010a3e <HAL_FLASHEx_Erase+0x96>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010a04:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010a06:	4643      	mov	r3, r8
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010a08:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010a0a:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010a0c:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010a0e:	481a      	ldr	r0, [pc, #104]	; (8010a78 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010a10:	4313      	orrs	r3, r2
 8010a12:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010a14:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010a16:	6923      	ldr	r3, [r4, #16]
 8010a18:	323e      	adds	r2, #62	; 0x3e
 8010a1a:	4313      	orrs	r3, r2
 8010a1c:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010a1e:	f7ff ff1b 	bl	8010858 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010a22:	4652      	mov	r2, sl
 8010a24:	6923      	ldr	r3, [r4, #16]
 8010a26:	4393      	bics	r3, r2
 8010a28:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8010a2a:	2800      	cmp	r0, #0
 8010a2c:	d0df      	beq.n	80109ee <HAL_FLASHEx_Erase+0x46>
            *PageError = address;
 8010a2e:	464b      	mov	r3, r9
 8010a30:	601d      	str	r5, [r3, #0]
            break;
 8010a32:	e004      	b.n	8010a3e <HAL_FLASHEx_Erase+0x96>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010a34:	f7ff ff10 	bl	8010858 <FLASH_WaitForLastOperation>
 8010a38:	2800      	cmp	r0, #0
 8010a3a:	d007      	beq.n	8010a4c <HAL_FLASHEx_Erase+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010a3c:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8010a3e:	2300      	movs	r3, #0
 8010a40:	763b      	strb	r3, [r7, #24]
}
 8010a42:	bc1c      	pop	{r2, r3, r4}
 8010a44:	4690      	mov	r8, r2
 8010a46:	4699      	mov	r9, r3
 8010a48:	46a2      	mov	sl, r4
 8010a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010a4c:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010a4e:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010a50:	4c0a      	ldr	r4, [pc, #40]	; (8010a7c <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010a52:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010a54:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010a56:	4808      	ldr	r0, [pc, #32]	; (8010a78 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010a58:	432b      	orrs	r3, r5
 8010a5a:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010a5c:	6923      	ldr	r3, [r4, #16]
 8010a5e:	4313      	orrs	r3, r2
 8010a60:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010a62:	f7ff fef9 	bl	8010858 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8010a66:	6923      	ldr	r3, [r4, #16]
 8010a68:	43ab      	bics	r3, r5
 8010a6a:	6123      	str	r3, [r4, #16]
 8010a6c:	e7e7      	b.n	8010a3e <HAL_FLASHEx_Erase+0x96>
  __HAL_LOCK(&pFlash);
 8010a6e:	2002      	movs	r0, #2
 8010a70:	e7e7      	b.n	8010a42 <HAL_FLASHEx_Erase+0x9a>
 8010a72:	46c0      	nop			; (mov r8, r8)
 8010a74:	200073a8 	.word	0x200073a8
 8010a78:	0000c350 	.word	0x0000c350
 8010a7c:	40022000 	.word	0x40022000

08010a80 <FLASH_PageErase>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010a80:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010a82:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010a84:	4b05      	ldr	r3, [pc, #20]	; (8010a9c <FLASH_PageErase+0x1c>)
 8010a86:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010a88:	4b05      	ldr	r3, [pc, #20]	; (8010aa0 <FLASH_PageErase+0x20>)
 8010a8a:	691a      	ldr	r2, [r3, #16]
 8010a8c:	430a      	orrs	r2, r1
 8010a8e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010a90:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010a92:	691a      	ldr	r2, [r3, #16]
 8010a94:	313e      	adds	r1, #62	; 0x3e
 8010a96:	430a      	orrs	r2, r1
 8010a98:	611a      	str	r2, [r3, #16]
}
 8010a9a:	4770      	bx	lr
 8010a9c:	200073a8 	.word	0x200073a8
 8010aa0:	40022000 	.word	0x40022000

08010aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8010aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010aa6:	464e      	mov	r6, r9
 8010aa8:	46de      	mov	lr, fp
 8010aaa:	4657      	mov	r7, sl
 8010aac:	4645      	mov	r5, r8
 8010aae:	b5e0      	push	{r5, r6, r7, lr}
 8010ab0:	4689      	mov	r9, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8010ab2:	6809      	ldr	r1, [r1, #0]
{ 
 8010ab4:	b085      	sub	sp, #20
  while ((GPIO_Init->Pin) >> position)
 8010ab6:	2900      	cmp	r1, #0
 8010ab8:	d100      	bne.n	8010abc <HAL_GPIO_Init+0x18>
 8010aba:	e080      	b.n	8010bbe <HAL_GPIO_Init+0x11a>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010abc:	4b70      	ldr	r3, [pc, #448]	; (8010c80 <HAL_GPIO_Init+0x1dc>)
  uint32_t position = 0x00;
 8010abe:	2400      	movs	r4, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010ac0:	469b      	mov	fp, r3
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010ac2:	4b70      	ldr	r3, [pc, #448]	; (8010c84 <HAL_GPIO_Init+0x1e0>)
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010ac4:	2601      	movs	r6, #1
        temp = EXTI->IMR;
 8010ac6:	4698      	mov	r8, r3
 8010ac8:	468a      	mov	sl, r1
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010aca:	0033      	movs	r3, r6
 8010acc:	4652      	mov	r2, sl
 8010ace:	40a3      	lsls	r3, r4
 8010ad0:	4013      	ands	r3, r2
 8010ad2:	9300      	str	r3, [sp, #0]
    if(iocurrent)
 8010ad4:	d06f      	beq.n	8010bb6 <HAL_GPIO_Init+0x112>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010ad6:	464b      	mov	r3, r9
 8010ad8:	6859      	ldr	r1, [r3, #4]
 8010ada:	2310      	movs	r3, #16
 8010adc:	000f      	movs	r7, r1
 8010ade:	439f      	bics	r7, r3
 8010ae0:	003b      	movs	r3, r7
 8010ae2:	9701      	str	r7, [sp, #4]
 8010ae4:	2f02      	cmp	r7, #2
 8010ae6:	d100      	bne.n	8010aea <HAL_GPIO_Init+0x46>
 8010ae8:	e070      	b.n	8010bcc <HAL_GPIO_Init+0x128>
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010aea:	2203      	movs	r2, #3
 8010aec:	0065      	lsls	r5, r4, #1
 8010aee:	40aa      	lsls	r2, r5
 8010af0:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010af2:	6803      	ldr	r3, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010af4:	4013      	ands	r3, r2
 8010af6:	001f      	movs	r7, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010af8:	2303      	movs	r3, #3
 8010afa:	400b      	ands	r3, r1
 8010afc:	40ab      	lsls	r3, r5
 8010afe:	469c      	mov	ip, r3
 8010b00:	003b      	movs	r3, r7
 8010b02:	4667      	mov	r7, ip
 8010b04:	433b      	orrs	r3, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010b06:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8010b08:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010b0a:	3f01      	subs	r7, #1
 8010b0c:	2f01      	cmp	r7, #1
 8010b0e:	d800      	bhi.n	8010b12 <HAL_GPIO_Init+0x6e>
 8010b10:	e079      	b.n	8010c06 <HAL_GPIO_Init+0x162>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010b12:	464b      	mov	r3, r9
      temp = GPIOx->PUPDR;
 8010b14:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010b16:	403a      	ands	r2, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010b18:	689f      	ldr	r7, [r3, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010b1a:	2380      	movs	r3, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010b1c:	40af      	lsls	r7, r5
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010b1e:	055b      	lsls	r3, r3, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010b20:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8010b22:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010b24:	4219      	tst	r1, r3
 8010b26:	d046      	beq.n	8010bb6 <HAL_GPIO_Init+0x112>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010b28:	465b      	mov	r3, fp
 8010b2a:	699a      	ldr	r2, [r3, #24]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010b2c:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010b2e:	4332      	orrs	r2, r6
 8010b30:	619a      	str	r2, [r3, #24]
 8010b32:	699a      	ldr	r2, [r3, #24]
 8010b34:	4b54      	ldr	r3, [pc, #336]	; (8010c88 <HAL_GPIO_Init+0x1e4>)
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010b36:	4027      	ands	r7, r4
 8010b38:	469c      	mov	ip, r3
 8010b3a:	230f      	movs	r3, #15
 8010b3c:	00bf      	lsls	r7, r7, #2
 8010b3e:	40bb      	lsls	r3, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010b40:	4032      	ands	r2, r6
 8010b42:	9203      	str	r2, [sp, #12]
 8010b44:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8010b46:	08a2      	lsrs	r2, r4, #2
 8010b48:	0092      	lsls	r2, r2, #2
 8010b4a:	4462      	add	r2, ip
 8010b4c:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010b4e:	439d      	bics	r5, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010b50:	2390      	movs	r3, #144	; 0x90
 8010b52:	05db      	lsls	r3, r3, #23
 8010b54:	4298      	cmp	r0, r3
 8010b56:	d012      	beq.n	8010b7e <HAL_GPIO_Init+0xda>
 8010b58:	4b4c      	ldr	r3, [pc, #304]	; (8010c8c <HAL_GPIO_Init+0x1e8>)
 8010b5a:	4298      	cmp	r0, r3
 8010b5c:	d100      	bne.n	8010b60 <HAL_GPIO_Init+0xbc>
 8010b5e:	e083      	b.n	8010c68 <HAL_GPIO_Init+0x1c4>
 8010b60:	4b4b      	ldr	r3, [pc, #300]	; (8010c90 <HAL_GPIO_Init+0x1ec>)
 8010b62:	4298      	cmp	r0, r3
 8010b64:	d100      	bne.n	8010b68 <HAL_GPIO_Init+0xc4>
 8010b66:	e07b      	b.n	8010c60 <HAL_GPIO_Init+0x1bc>
 8010b68:	4b4a      	ldr	r3, [pc, #296]	; (8010c94 <HAL_GPIO_Init+0x1f0>)
 8010b6a:	4298      	cmp	r0, r3
 8010b6c:	d100      	bne.n	8010b70 <HAL_GPIO_Init+0xcc>
 8010b6e:	e07f      	b.n	8010c70 <HAL_GPIO_Init+0x1cc>
 8010b70:	4b49      	ldr	r3, [pc, #292]	; (8010c98 <HAL_GPIO_Init+0x1f4>)
 8010b72:	4298      	cmp	r0, r3
 8010b74:	d100      	bne.n	8010b78 <HAL_GPIO_Init+0xd4>
 8010b76:	e07f      	b.n	8010c78 <HAL_GPIO_Init+0x1d4>
 8010b78:	2305      	movs	r3, #5
 8010b7a:	40bb      	lsls	r3, r7
 8010b7c:	431d      	orrs	r5, r3
        temp = EXTI->IMR;
 8010b7e:	4643      	mov	r3, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 8010b80:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8010b82:	681a      	ldr	r2, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010b84:	9b00      	ldr	r3, [sp, #0]
 8010b86:	43dd      	mvns	r5, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010b88:	03cb      	lsls	r3, r1, #15
 8010b8a:	d451      	bmi.n	8010c30 <HAL_GPIO_Init+0x18c>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8010b8c:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010b8e:	402a      	ands	r2, r5
        EXTI->IMR = temp;
 8010b90:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8010b92:	685a      	ldr	r2, [r3, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010b94:	038b      	lsls	r3, r1, #14
 8010b96:	d452      	bmi.n	8010c3e <HAL_GPIO_Init+0x19a>
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8010b98:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8010b9a:	402a      	ands	r2, r5
        EXTI->EMR = temp;
 8010b9c:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010b9e:	689a      	ldr	r2, [r3, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010ba0:	02cb      	lsls	r3, r1, #11
 8010ba2:	d453      	bmi.n	8010c4c <HAL_GPIO_Init+0x1a8>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8010ba4:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010ba6:	402a      	ands	r2, r5
        EXTI->RTSR = temp;
 8010ba8:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8010baa:	68da      	ldr	r2, [r3, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010bac:	028b      	lsls	r3, r1, #10
 8010bae:	d454      	bmi.n	8010c5a <HAL_GPIO_Init+0x1b6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010bb0:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8010bb2:	4643      	mov	r3, r8
 8010bb4:	60da      	str	r2, [r3, #12]
  while ((GPIO_Init->Pin) >> position)
 8010bb6:	4653      	mov	r3, sl
      }
    }
    
    position++;
 8010bb8:	3401      	adds	r4, #1
  while ((GPIO_Init->Pin) >> position)
 8010bba:	40e3      	lsrs	r3, r4
 8010bbc:	d185      	bne.n	8010aca <HAL_GPIO_Init+0x26>
  } 
}
 8010bbe:	b005      	add	sp, #20
 8010bc0:	bc3c      	pop	{r2, r3, r4, r5}
 8010bc2:	4690      	mov	r8, r2
 8010bc4:	4699      	mov	r9, r3
 8010bc6:	46a2      	mov	sl, r4
 8010bc8:	46ab      	mov	fp, r5
 8010bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010bcc:	2507      	movs	r5, #7
 8010bce:	4025      	ands	r5, r4
 8010bd0:	00ad      	lsls	r5, r5, #2
 8010bd2:	330d      	adds	r3, #13
 8010bd4:	40ab      	lsls	r3, r5
        temp = GPIOx->AFR[position >> 3];
 8010bd6:	08e2      	lsrs	r2, r4, #3
 8010bd8:	0092      	lsls	r2, r2, #2
 8010bda:	1882      	adds	r2, r0, r2
 8010bdc:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010bde:	439f      	bics	r7, r3
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8010be0:	464b      	mov	r3, r9
 8010be2:	691b      	ldr	r3, [r3, #16]
 8010be4:	40ab      	lsls	r3, r5
 8010be6:	001d      	movs	r5, r3
 8010be8:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8010bea:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010bec:	2203      	movs	r2, #3
 8010bee:	0065      	lsls	r5, r4, #1
 8010bf0:	40aa      	lsls	r2, r5
 8010bf2:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 8010bf4:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010bf6:	4017      	ands	r7, r2
 8010bf8:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010bfa:	2703      	movs	r7, #3
 8010bfc:	400f      	ands	r7, r1
 8010bfe:	40af      	lsls	r7, r5
 8010c00:	4663      	mov	r3, ip
 8010c02:	431f      	orrs	r7, r3
      GPIOx->MODER = temp;
 8010c04:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8010c06:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010c08:	464b      	mov	r3, r9
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010c0a:	4017      	ands	r7, r2
 8010c0c:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010c0e:	68df      	ldr	r7, [r3, #12]
 8010c10:	4663      	mov	r3, ip
 8010c12:	40af      	lsls	r7, r5
 8010c14:	431f      	orrs	r7, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010c16:	0033      	movs	r3, r6
 8010c18:	40a3      	lsls	r3, r4
        GPIOx->OSPEEDR = temp;
 8010c1a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8010c1c:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010c1e:	439f      	bics	r7, r3
 8010c20:	46bc      	mov	ip, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8010c22:	090f      	lsrs	r7, r1, #4
 8010c24:	4037      	ands	r7, r6
 8010c26:	40a7      	lsls	r7, r4
 8010c28:	4663      	mov	r3, ip
 8010c2a:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8010c2c:	6047      	str	r7, [r0, #4]
 8010c2e:	e770      	b.n	8010b12 <HAL_GPIO_Init+0x6e>
          SET_BIT(temp, iocurrent); 
 8010c30:	9b00      	ldr	r3, [sp, #0]
 8010c32:	431a      	orrs	r2, r3
        EXTI->IMR = temp;
 8010c34:	4643      	mov	r3, r8
 8010c36:	601a      	str	r2, [r3, #0]
        temp = EXTI->EMR;
 8010c38:	685a      	ldr	r2, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010c3a:	038b      	lsls	r3, r1, #14
 8010c3c:	d5ac      	bpl.n	8010b98 <HAL_GPIO_Init+0xf4>
          SET_BIT(temp, iocurrent); 
 8010c3e:	9b00      	ldr	r3, [sp, #0]
 8010c40:	431a      	orrs	r2, r3
        EXTI->EMR = temp;
 8010c42:	4643      	mov	r3, r8
 8010c44:	605a      	str	r2, [r3, #4]
        temp = EXTI->RTSR;
 8010c46:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010c48:	02cb      	lsls	r3, r1, #11
 8010c4a:	d5ab      	bpl.n	8010ba4 <HAL_GPIO_Init+0x100>
          SET_BIT(temp, iocurrent); 
 8010c4c:	9b00      	ldr	r3, [sp, #0]
 8010c4e:	431a      	orrs	r2, r3
        EXTI->RTSR = temp;
 8010c50:	4643      	mov	r3, r8
 8010c52:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 8010c54:	68da      	ldr	r2, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010c56:	028b      	lsls	r3, r1, #10
 8010c58:	d5aa      	bpl.n	8010bb0 <HAL_GPIO_Init+0x10c>
          SET_BIT(temp, iocurrent); 
 8010c5a:	9b00      	ldr	r3, [sp, #0]
 8010c5c:	431a      	orrs	r2, r3
 8010c5e:	e7a8      	b.n	8010bb2 <HAL_GPIO_Init+0x10e>
 8010c60:	2302      	movs	r3, #2
 8010c62:	40bb      	lsls	r3, r7
 8010c64:	431d      	orrs	r5, r3
 8010c66:	e78a      	b.n	8010b7e <HAL_GPIO_Init+0xda>
 8010c68:	0033      	movs	r3, r6
 8010c6a:	40bb      	lsls	r3, r7
 8010c6c:	431d      	orrs	r5, r3
 8010c6e:	e786      	b.n	8010b7e <HAL_GPIO_Init+0xda>
 8010c70:	2303      	movs	r3, #3
 8010c72:	40bb      	lsls	r3, r7
 8010c74:	431d      	orrs	r5, r3
 8010c76:	e782      	b.n	8010b7e <HAL_GPIO_Init+0xda>
 8010c78:	2304      	movs	r3, #4
 8010c7a:	40bb      	lsls	r3, r7
 8010c7c:	431d      	orrs	r5, r3
 8010c7e:	e77e      	b.n	8010b7e <HAL_GPIO_Init+0xda>
 8010c80:	40021000 	.word	0x40021000
 8010c84:	40010400 	.word	0x40010400
 8010c88:	40010000 	.word	0x40010000
 8010c8c:	48000400 	.word	0x48000400
 8010c90:	48000800 	.word	0x48000800
 8010c94:	48000c00 	.word	0x48000c00
 8010c98:	48001000 	.word	0x48001000

08010c9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c9e:	46de      	mov	lr, fp
 8010ca0:	4657      	mov	r7, sl
 8010ca2:	464e      	mov	r6, r9
 8010ca4:	4645      	mov	r5, r8
 8010ca6:	b5e0      	push	{r5, r6, r7, lr}
 8010ca8:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8010caa:	2900      	cmp	r1, #0
 8010cac:	d055      	beq.n	8010d5a <HAL_GPIO_DeInit+0xbe>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8010cae:	2201      	movs	r2, #1
 8010cb0:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010cb2:	3202      	adds	r2, #2
 8010cb4:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010cb6:	320c      	adds	r2, #12
  uint32_t position = 0x00;
 8010cb8:	2300      	movs	r3, #0
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010cba:	4691      	mov	r9, r2
    iocurrent = (GPIO_Pin) & (1 << position);
 8010cbc:	4666      	mov	r6, ip
 8010cbe:	000d      	movs	r5, r1
 8010cc0:	409e      	lsls	r6, r3
 8010cc2:	4035      	ands	r5, r6
    if (iocurrent)
 8010cc4:	d045      	beq.n	8010d52 <HAL_GPIO_DeInit+0xb6>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010cc6:	4647      	mov	r7, r8
 8010cc8:	005c      	lsls	r4, r3, #1
 8010cca:	40a7      	lsls	r7, r4
 8010ccc:	43fc      	mvns	r4, r7
 8010cce:	6802      	ldr	r2, [r0, #0]
 8010cd0:	4022      	ands	r2, r4
 8010cd2:	6002      	str	r2, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010cd4:	08da      	lsrs	r2, r3, #3
 8010cd6:	0092      	lsls	r2, r2, #2
 8010cd8:	1887      	adds	r7, r0, r2
 8010cda:	9701      	str	r7, [sp, #4]
 8010cdc:	6a3f      	ldr	r7, [r7, #32]
 8010cde:	46ba      	mov	sl, r7
 8010ce0:	2707      	movs	r7, #7
 8010ce2:	401f      	ands	r7, r3
 8010ce4:	00bf      	lsls	r7, r7, #2
 8010ce6:	46bb      	mov	fp, r7
 8010ce8:	464f      	mov	r7, r9
 8010cea:	465a      	mov	r2, fp
 8010cec:	4097      	lsls	r7, r2
 8010cee:	46bb      	mov	fp, r7
 8010cf0:	4657      	mov	r7, sl
 8010cf2:	465a      	mov	r2, fp
 8010cf4:	4397      	bics	r7, r2
 8010cf6:	003a      	movs	r2, r7
 8010cf8:	9f01      	ldr	r7, [sp, #4]
 8010cfa:	623a      	str	r2, [r7, #32]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010cfc:	6882      	ldr	r2, [r0, #8]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010cfe:	464f      	mov	r7, r9
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010d00:	4022      	ands	r2, r4
 8010d02:	6082      	str	r2, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8010d04:	6842      	ldr	r2, [r0, #4]
 8010d06:	43b2      	bics	r2, r6
 8010d08:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010d0a:	68c2      	ldr	r2, [r0, #12]
 8010d0c:	4014      	ands	r4, r2
 8010d0e:	60c4      	str	r4, [r0, #12]
 8010d10:	4c2b      	ldr	r4, [pc, #172]	; (8010dc0 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2];
 8010d12:	089a      	lsrs	r2, r3, #2
 8010d14:	46a2      	mov	sl, r4
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010d16:	4644      	mov	r4, r8
 8010d18:	401c      	ands	r4, r3
 8010d1a:	00a4      	lsls	r4, r4, #2
 8010d1c:	40a7      	lsls	r7, r4
 8010d1e:	0092      	lsls	r2, r2, #2
 8010d20:	4452      	add	r2, sl
      tmp = SYSCFG->EXTICR[position >> 2];
 8010d22:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010d24:	46ba      	mov	sl, r7
 8010d26:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010d28:	2790      	movs	r7, #144	; 0x90
 8010d2a:	05ff      	lsls	r7, r7, #23
 8010d2c:	42b8      	cmp	r0, r7
 8010d2e:	d01b      	beq.n	8010d68 <HAL_GPIO_DeInit+0xcc>
 8010d30:	4f24      	ldr	r7, [pc, #144]	; (8010dc4 <HAL_GPIO_DeInit+0x128>)
 8010d32:	42b8      	cmp	r0, r7
 8010d34:	d033      	beq.n	8010d9e <HAL_GPIO_DeInit+0x102>
 8010d36:	4f24      	ldr	r7, [pc, #144]	; (8010dc8 <HAL_GPIO_DeInit+0x12c>)
 8010d38:	42b8      	cmp	r0, r7
 8010d3a:	d038      	beq.n	8010dae <HAL_GPIO_DeInit+0x112>
 8010d3c:	4f23      	ldr	r7, [pc, #140]	; (8010dcc <HAL_GPIO_DeInit+0x130>)
 8010d3e:	42b8      	cmp	r0, r7
 8010d40:	d039      	beq.n	8010db6 <HAL_GPIO_DeInit+0x11a>
 8010d42:	4f23      	ldr	r7, [pc, #140]	; (8010dd0 <HAL_GPIO_DeInit+0x134>)
 8010d44:	42b8      	cmp	r0, r7
 8010d46:	d02e      	beq.n	8010da6 <HAL_GPIO_DeInit+0x10a>
 8010d48:	2705      	movs	r7, #5
 8010d4a:	40a7      	lsls	r7, r4
 8010d4c:	003c      	movs	r4, r7
 8010d4e:	42a6      	cmp	r6, r4
 8010d50:	d00d      	beq.n	8010d6e <HAL_GPIO_DeInit+0xd2>
  while (GPIO_Pin >> position)
 8010d52:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8010d54:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8010d56:	40da      	lsrs	r2, r3
 8010d58:	d1b0      	bne.n	8010cbc <HAL_GPIO_DeInit+0x20>
  }
}
 8010d5a:	b003      	add	sp, #12
 8010d5c:	bc3c      	pop	{r2, r3, r4, r5}
 8010d5e:	4690      	mov	r8, r2
 8010d60:	4699      	mov	r9, r3
 8010d62:	46a2      	mov	sl, r4
 8010d64:	46ab      	mov	fp, r5
 8010d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d68:	2400      	movs	r4, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010d6a:	42a6      	cmp	r6, r4
 8010d6c:	d1f1      	bne.n	8010d52 <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010d6e:	4656      	mov	r6, sl
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8010d70:	43ed      	mvns	r5, r5
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010d72:	6894      	ldr	r4, [r2, #8]
    position++;
 8010d74:	3301      	adds	r3, #1
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010d76:	43b4      	bics	r4, r6
 8010d78:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8010d7a:	4c16      	ldr	r4, [pc, #88]	; (8010dd4 <HAL_GPIO_DeInit+0x138>)
 8010d7c:	6822      	ldr	r2, [r4, #0]
 8010d7e:	402a      	ands	r2, r5
 8010d80:	6022      	str	r2, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8010d82:	6862      	ldr	r2, [r4, #4]
 8010d84:	402a      	ands	r2, r5
 8010d86:	6062      	str	r2, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8010d88:	68a2      	ldr	r2, [r4, #8]
 8010d8a:	402a      	ands	r2, r5
 8010d8c:	60a2      	str	r2, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8010d8e:	68e2      	ldr	r2, [r4, #12]
 8010d90:	4015      	ands	r5, r2
  while (GPIO_Pin >> position)
 8010d92:	000a      	movs	r2, r1
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8010d94:	60e5      	str	r5, [r4, #12]
  while (GPIO_Pin >> position)
 8010d96:	40da      	lsrs	r2, r3
 8010d98:	d000      	beq.n	8010d9c <HAL_GPIO_DeInit+0x100>
 8010d9a:	e78f      	b.n	8010cbc <HAL_GPIO_DeInit+0x20>
 8010d9c:	e7dd      	b.n	8010d5a <HAL_GPIO_DeInit+0xbe>
 8010d9e:	4667      	mov	r7, ip
 8010da0:	40a7      	lsls	r7, r4
 8010da2:	003c      	movs	r4, r7
 8010da4:	e7e1      	b.n	8010d6a <HAL_GPIO_DeInit+0xce>
 8010da6:	2704      	movs	r7, #4
 8010da8:	40a7      	lsls	r7, r4
 8010daa:	003c      	movs	r4, r7
 8010dac:	e7dd      	b.n	8010d6a <HAL_GPIO_DeInit+0xce>
 8010dae:	2702      	movs	r7, #2
 8010db0:	40a7      	lsls	r7, r4
 8010db2:	003c      	movs	r4, r7
 8010db4:	e7d9      	b.n	8010d6a <HAL_GPIO_DeInit+0xce>
 8010db6:	4647      	mov	r7, r8
 8010db8:	40a7      	lsls	r7, r4
 8010dba:	003c      	movs	r4, r7
 8010dbc:	e7d5      	b.n	8010d6a <HAL_GPIO_DeInit+0xce>
 8010dbe:	46c0      	nop			; (mov r8, r8)
 8010dc0:	40010000 	.word	0x40010000
 8010dc4:	48000400 	.word	0x48000400
 8010dc8:	48000800 	.word	0x48000800
 8010dcc:	48000c00 	.word	0x48000c00
 8010dd0:	48001000 	.word	0x48001000
 8010dd4:	40010400 	.word	0x40010400

08010dd8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010dd8:	6900      	ldr	r0, [r0, #16]
 8010dda:	4008      	ands	r0, r1
 8010ddc:	1e41      	subs	r1, r0, #1
 8010dde:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8010de0:	b2c0      	uxtb	r0, r0
  }
 8010de2:	4770      	bx	lr

08010de4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010de4:	2a00      	cmp	r2, #0
 8010de6:	d101      	bne.n	8010dec <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010de8:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8010dea:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010dec:	6181      	str	r1, [r0, #24]
 8010dee:	e7fc      	b.n	8010dea <HAL_GPIO_WritePin+0x6>

08010df0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8010df0:	6943      	ldr	r3, [r0, #20]
 8010df2:	4059      	eors	r1, r3
 8010df4:	6141      	str	r1, [r0, #20]
}
 8010df6:	4770      	bx	lr

08010df8 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8010df8:	4770      	bx	lr
 8010dfa:	46c0      	nop			; (mov r8, r8)

08010dfc <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8010dfc:	2380      	movs	r3, #128	; 0x80
 8010dfe:	4a03      	ldr	r2, [pc, #12]	; (8010e0c <HAL_PWR_EnableBkUpAccess+0x10>)
 8010e00:	005b      	lsls	r3, r3, #1
 8010e02:	6811      	ldr	r1, [r2, #0]
 8010e04:	430b      	orrs	r3, r1
 8010e06:	6013      	str	r3, [r2, #0]
}
 8010e08:	4770      	bx	lr
 8010e0a:	46c0      	nop			; (mov r8, r8)
 8010e0c:	40007000 	.word	0x40007000

08010e10 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e12:	46c6      	mov	lr, r8
 8010e14:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010e16:	6803      	ldr	r3, [r0, #0]
{
 8010e18:	b082      	sub	sp, #8
 8010e1a:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010e1c:	07da      	lsls	r2, r3, #31
 8010e1e:	d54b      	bpl.n	8010eb8 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8010e20:	210c      	movs	r1, #12
 8010e22:	48c4      	ldr	r0, [pc, #784]	; (8011134 <HAL_RCC_OscConfig+0x324>)
 8010e24:	6842      	ldr	r2, [r0, #4]
 8010e26:	400a      	ands	r2, r1
 8010e28:	2a04      	cmp	r2, #4
 8010e2a:	d100      	bne.n	8010e2e <HAL_RCC_OscConfig+0x1e>
 8010e2c:	e153      	b.n	80110d6 <HAL_RCC_OscConfig+0x2c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8010e2e:	6842      	ldr	r2, [r0, #4]
 8010e30:	4011      	ands	r1, r2
 8010e32:	2908      	cmp	r1, #8
 8010e34:	d108      	bne.n	8010e48 <HAL_RCC_OscConfig+0x38>
 8010e36:	21c0      	movs	r1, #192	; 0xc0
 8010e38:	6842      	ldr	r2, [r0, #4]
 8010e3a:	0249      	lsls	r1, r1, #9
 8010e3c:	400a      	ands	r2, r1
 8010e3e:	2180      	movs	r1, #128	; 0x80
 8010e40:	0249      	lsls	r1, r1, #9
 8010e42:	428a      	cmp	r2, r1
 8010e44:	d100      	bne.n	8010e48 <HAL_RCC_OscConfig+0x38>
 8010e46:	e146      	b.n	80110d6 <HAL_RCC_OscConfig+0x2c6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010e48:	4dba      	ldr	r5, [pc, #744]	; (8011134 <HAL_RCC_OscConfig+0x324>)
 8010e4a:	4abb      	ldr	r2, [pc, #748]	; (8011138 <HAL_RCC_OscConfig+0x328>)
 8010e4c:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010e4e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010e50:	4013      	ands	r3, r2
 8010e52:	602b      	str	r3, [r5, #0]
 8010e54:	682b      	ldr	r3, [r5, #0]
 8010e56:	4ab9      	ldr	r2, [pc, #740]	; (801113c <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010e58:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010e5a:	4013      	ands	r3, r2
 8010e5c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8010e5e:	f7fe fb6f 	bl	800f540 <HAL_GetTick>
 8010e62:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010e64:	e005      	b.n	8010e72 <HAL_RCC_OscConfig+0x62>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010e66:	f7fe fb6b 	bl	800f540 <HAL_GetTick>
 8010e6a:	1bc0      	subs	r0, r0, r7
 8010e6c:	2864      	cmp	r0, #100	; 0x64
 8010e6e:	d900      	bls.n	8010e72 <HAL_RCC_OscConfig+0x62>
 8010e70:	e13b      	b.n	80110ea <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010e72:	682b      	ldr	r3, [r5, #0]
 8010e74:	4233      	tst	r3, r6
 8010e76:	d1f6      	bne.n	8010e66 <HAL_RCC_OscConfig+0x56>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010e78:	6863      	ldr	r3, [r4, #4]
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	d100      	bne.n	8010e80 <HAL_RCC_OscConfig+0x70>
 8010e7e:	e196      	b.n	80111ae <HAL_RCC_OscConfig+0x39e>
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d000      	beq.n	8010e86 <HAL_RCC_OscConfig+0x76>
 8010e84:	e1bc      	b.n	8011200 <HAL_RCC_OscConfig+0x3f0>
 8010e86:	682b      	ldr	r3, [r5, #0]
 8010e88:	4aab      	ldr	r2, [pc, #684]	; (8011138 <HAL_RCC_OscConfig+0x328>)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010e8a:	4eaa      	ldr	r6, [pc, #680]	; (8011134 <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010e8c:	4013      	ands	r3, r2
 8010e8e:	602b      	str	r3, [r5, #0]
 8010e90:	682b      	ldr	r3, [r5, #0]
 8010e92:	4aaa      	ldr	r2, [pc, #680]	; (801113c <HAL_RCC_OscConfig+0x32c>)
 8010e94:	4013      	ands	r3, r2
 8010e96:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010e98:	f7fe fb52 	bl	800f540 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010e9c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8010e9e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010ea0:	02ad      	lsls	r5, r5, #10
 8010ea2:	e005      	b.n	8010eb0 <HAL_RCC_OscConfig+0xa0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010ea4:	f7fe fb4c 	bl	800f540 <HAL_GetTick>
 8010ea8:	1bc0      	subs	r0, r0, r7
 8010eaa:	2864      	cmp	r0, #100	; 0x64
 8010eac:	d900      	bls.n	8010eb0 <HAL_RCC_OscConfig+0xa0>
 8010eae:	e11c      	b.n	80110ea <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010eb0:	6833      	ldr	r3, [r6, #0]
 8010eb2:	422b      	tst	r3, r5
 8010eb4:	d1f6      	bne.n	8010ea4 <HAL_RCC_OscConfig+0x94>
 8010eb6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010eb8:	079a      	lsls	r2, r3, #30
 8010eba:	d529      	bpl.n	8010f10 <HAL_RCC_OscConfig+0x100>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8010ebc:	220c      	movs	r2, #12
 8010ebe:	499d      	ldr	r1, [pc, #628]	; (8011134 <HAL_RCC_OscConfig+0x324>)
 8010ec0:	6848      	ldr	r0, [r1, #4]
 8010ec2:	4202      	tst	r2, r0
 8010ec4:	d100      	bne.n	8010ec8 <HAL_RCC_OscConfig+0xb8>
 8010ec6:	e0fd      	b.n	80110c4 <HAL_RCC_OscConfig+0x2b4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8010ec8:	6848      	ldr	r0, [r1, #4]
 8010eca:	4002      	ands	r2, r0
 8010ecc:	2a08      	cmp	r2, #8
 8010ece:	d100      	bne.n	8010ed2 <HAL_RCC_OscConfig+0xc2>
 8010ed0:	e0ef      	b.n	80110b2 <HAL_RCC_OscConfig+0x2a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010ed2:	68e3      	ldr	r3, [r4, #12]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d100      	bne.n	8010eda <HAL_RCC_OscConfig+0xca>
 8010ed8:	e138      	b.n	801114c <HAL_RCC_OscConfig+0x33c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010eda:	2201      	movs	r2, #1
 8010edc:	4f95      	ldr	r7, [pc, #596]	; (8011134 <HAL_RCC_OscConfig+0x324>)
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010ede:	2502      	movs	r5, #2
        __HAL_RCC_HSI_ENABLE();
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	4313      	orrs	r3, r2
 8010ee4:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8010ee6:	f7fe fb2b 	bl	800f540 <HAL_GetTick>
 8010eea:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010eec:	e005      	b.n	8010efa <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010eee:	f7fe fb27 	bl	800f540 <HAL_GetTick>
 8010ef2:	1b80      	subs	r0, r0, r6
 8010ef4:	2864      	cmp	r0, #100	; 0x64
 8010ef6:	d900      	bls.n	8010efa <HAL_RCC_OscConfig+0xea>
 8010ef8:	e0f7      	b.n	80110ea <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	421d      	tst	r5, r3
 8010efe:	d0f6      	beq.n	8010eee <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010f00:	21f8      	movs	r1, #248	; 0xf8
 8010f02:	683a      	ldr	r2, [r7, #0]
 8010f04:	6923      	ldr	r3, [r4, #16]
 8010f06:	438a      	bics	r2, r1
 8010f08:	00db      	lsls	r3, r3, #3
 8010f0a:	4313      	orrs	r3, r2
 8010f0c:	603b      	str	r3, [r7, #0]
 8010f0e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010f10:	071a      	lsls	r2, r3, #28
 8010f12:	d45d      	bmi.n	8010fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010f14:	075a      	lsls	r2, r3, #29
 8010f16:	d474      	bmi.n	8011002 <HAL_RCC_OscConfig+0x1f2>
      }
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8010f18:	06da      	lsls	r2, r3, #27
 8010f1a:	d512      	bpl.n	8010f42 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8010f1c:	6962      	ldr	r2, [r4, #20]
 8010f1e:	2a01      	cmp	r2, #1
 8010f20:	d100      	bne.n	8010f24 <HAL_RCC_OscConfig+0x114>
 8010f22:	e18c      	b.n	801123e <HAL_RCC_OscConfig+0x42e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8010f24:	3205      	adds	r2, #5
 8010f26:	d000      	beq.n	8010f2a <HAL_RCC_OscConfig+0x11a>
 8010f28:	e124      	b.n	8011174 <HAL_RCC_OscConfig+0x364>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8010f2a:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010f2c:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8010f2e:	4981      	ldr	r1, [pc, #516]	; (8011134 <HAL_RCC_OscConfig+0x324>)
 8010f30:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8010f32:	4382      	bics	r2, r0
 8010f34:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010f36:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8010f38:	69a2      	ldr	r2, [r4, #24]
 8010f3a:	43a8      	bics	r0, r5
 8010f3c:	00d2      	lsls	r2, r2, #3
 8010f3e:	4302      	orrs	r2, r0
 8010f40:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_CR2_HSI48ON)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010f42:	069b      	lsls	r3, r3, #26
 8010f44:	d522      	bpl.n	8010f8c <HAL_RCC_OscConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010f46:	220c      	movs	r2, #12
 8010f48:	497a      	ldr	r1, [pc, #488]	; (8011134 <HAL_RCC_OscConfig+0x324>)
 8010f4a:	684b      	ldr	r3, [r1, #4]
 8010f4c:	4013      	ands	r3, r2
 8010f4e:	2b0c      	cmp	r3, #12
 8010f50:	d100      	bne.n	8010f54 <HAL_RCC_OscConfig+0x144>
 8010f52:	e14a      	b.n	80111ea <HAL_RCC_OscConfig+0x3da>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010f54:	684b      	ldr	r3, [r1, #4]
 8010f56:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010f58:	2a08      	cmp	r2, #8
 8010f5a:	d100      	bne.n	8010f5e <HAL_RCC_OscConfig+0x14e>
 8010f5c:	e13e      	b.n	80111dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010f5e:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8010f60:	4d74      	ldr	r5, [pc, #464]	; (8011134 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d100      	bne.n	8010f68 <HAL_RCC_OscConfig+0x158>
 8010f66:	e156      	b.n	8011216 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8010f68:	2680      	movs	r6, #128	; 0x80
 8010f6a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010f6c:	0276      	lsls	r6, r6, #9
 8010f6e:	4333      	orrs	r3, r6
 8010f70:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010f72:	f7fe fae5 	bl	800f540 <HAL_GetTick>
 8010f76:	0007      	movs	r7, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010f78:	e005      	b.n	8010f86 <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010f7a:	f7fe fae1 	bl	800f540 <HAL_GetTick>
 8010f7e:	1bc0      	subs	r0, r0, r7
 8010f80:	2864      	cmp	r0, #100	; 0x64
 8010f82:	d900      	bls.n	8010f86 <HAL_RCC_OscConfig+0x176>
 8010f84:	e0b1      	b.n	80110ea <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010f86:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010f88:	4233      	tst	r3, r6
 8010f8a:	d0f6      	beq.n	8010f7a <HAL_RCC_OscConfig+0x16a>
#endif /* RCC_CR2_HSI48ON */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d01c      	beq.n	8010fcc <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010f92:	220c      	movs	r2, #12
 8010f94:	4d67      	ldr	r5, [pc, #412]	; (8011134 <HAL_RCC_OscConfig+0x324>)
 8010f96:	6869      	ldr	r1, [r5, #4]
 8010f98:	400a      	ands	r2, r1
 8010f9a:	2a08      	cmp	r2, #8
 8010f9c:	d100      	bne.n	8010fa0 <HAL_RCC_OscConfig+0x190>
 8010f9e:	e098      	b.n	80110d2 <HAL_RCC_OscConfig+0x2c2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010fa0:	2b02      	cmp	r3, #2
 8010fa2:	d100      	bne.n	8010fa6 <HAL_RCC_OscConfig+0x196>
 8010fa4:	e16a      	b.n	801127c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010fa6:	682b      	ldr	r3, [r5, #0]
 8010fa8:	4a65      	ldr	r2, [pc, #404]	; (8011140 <HAL_RCC_OscConfig+0x330>)
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010faa:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8010fac:	4013      	ands	r3, r2
 8010fae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010fb0:	f7fe fac6 	bl	800f540 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010fb4:	04a4      	lsls	r4, r4, #18
        tickstart = HAL_GetTick();
 8010fb6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010fb8:	e005      	b.n	8010fc6 <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010fba:	f7fe fac1 	bl	800f540 <HAL_GetTick>
 8010fbe:	1b80      	subs	r0, r0, r6
 8010fc0:	2864      	cmp	r0, #100	; 0x64
 8010fc2:	d900      	bls.n	8010fc6 <HAL_RCC_OscConfig+0x1b6>
 8010fc4:	e091      	b.n	80110ea <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010fc6:	682b      	ldr	r3, [r5, #0]
 8010fc8:	4223      	tst	r3, r4
 8010fca:	d1f6      	bne.n	8010fba <HAL_RCC_OscConfig+0x1aa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8010fcc:	2000      	movs	r0, #0
 8010fce:	e08d      	b.n	80110ec <HAL_RCC_OscConfig+0x2dc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010fd0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_LSI_ENABLE();
 8010fd2:	4d58      	ldr	r5, [pc, #352]	; (8011134 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d100      	bne.n	8010fda <HAL_RCC_OscConfig+0x1ca>
 8010fd8:	e08c      	b.n	80110f4 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_LSI_ENABLE();
 8010fda:	2201      	movs	r2, #1
 8010fdc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010fde:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8010fe0:	4313      	orrs	r3, r2
 8010fe2:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8010fe4:	f7fe faac 	bl	800f540 <HAL_GetTick>
 8010fe8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010fea:	e004      	b.n	8010ff6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010fec:	f7fe faa8 	bl	800f540 <HAL_GetTick>
 8010ff0:	1bc0      	subs	r0, r0, r7
 8010ff2:	2864      	cmp	r0, #100	; 0x64
 8010ff4:	d879      	bhi.n	80110ea <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010ff6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010ff8:	421e      	tst	r6, r3
 8010ffa:	d0f7      	beq.n	8010fec <HAL_RCC_OscConfig+0x1dc>
 8010ffc:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010ffe:	075a      	lsls	r2, r3, #29
 8011000:	d58a      	bpl.n	8010f18 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_PWR_CLK_ENABLE();
 8011002:	2080      	movs	r0, #128	; 0x80
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011004:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8011006:	4a4b      	ldr	r2, [pc, #300]	; (8011134 <HAL_RCC_OscConfig+0x324>)
 8011008:	0540      	lsls	r0, r0, #21
 801100a:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801100c:	4d4d      	ldr	r5, [pc, #308]	; (8011144 <HAL_RCC_OscConfig+0x334>)
    __HAL_RCC_PWR_CLK_ENABLE();
 801100e:	4301      	orrs	r1, r0
 8011010:	61d1      	str	r1, [r2, #28]
 8011012:	69d3      	ldr	r3, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011014:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8011016:	4003      	ands	r3, r0
 8011018:	9301      	str	r3, [sp, #4]
 801101a:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801101c:	682b      	ldr	r3, [r5, #0]
 801101e:	4333      	orrs	r3, r6
 8011020:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8011022:	f7fe fa8d 	bl	800f540 <HAL_GetTick>
 8011026:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011028:	e004      	b.n	8011034 <HAL_RCC_OscConfig+0x224>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801102a:	f7fe fa89 	bl	800f540 <HAL_GetTick>
 801102e:	1bc0      	subs	r0, r0, r7
 8011030:	2864      	cmp	r0, #100	; 0x64
 8011032:	d85a      	bhi.n	80110ea <HAL_RCC_OscConfig+0x2da>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011034:	682b      	ldr	r3, [r5, #0]
 8011036:	4233      	tst	r3, r6
 8011038:	d0f7      	beq.n	801102a <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 801103a:	2201      	movs	r2, #1
 801103c:	4d3d      	ldr	r5, [pc, #244]	; (8011134 <HAL_RCC_OscConfig+0x324>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801103e:	2602      	movs	r6, #2
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8011040:	6a2b      	ldr	r3, [r5, #32]
 8011042:	4393      	bics	r3, r2
 8011044:	622b      	str	r3, [r5, #32]
 8011046:	6a2b      	ldr	r3, [r5, #32]
 8011048:	3203      	adds	r2, #3
 801104a:	4393      	bics	r3, r2
 801104c:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
 801104e:	f7fe fa77 	bl	800f540 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011052:	4b3d      	ldr	r3, [pc, #244]	; (8011148 <HAL_RCC_OscConfig+0x338>)
    tickstart = HAL_GetTick();
 8011054:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011056:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011058:	e004      	b.n	8011064 <HAL_RCC_OscConfig+0x254>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801105a:	f7fe fa71 	bl	800f540 <HAL_GetTick>
 801105e:	1bc0      	subs	r0, r0, r7
 8011060:	4540      	cmp	r0, r8
 8011062:	d842      	bhi.n	80110ea <HAL_RCC_OscConfig+0x2da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011064:	6a2b      	ldr	r3, [r5, #32]
 8011066:	421e      	tst	r6, r3
 8011068:	d1f7      	bne.n	801105a <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801106a:	68a3      	ldr	r3, [r4, #8]
 801106c:	2b01      	cmp	r3, #1
 801106e:	d100      	bne.n	8011072 <HAL_RCC_OscConfig+0x262>
 8011070:	e157      	b.n	8011322 <HAL_RCC_OscConfig+0x512>
 8011072:	2b00      	cmp	r3, #0
 8011074:	d100      	bne.n	8011078 <HAL_RCC_OscConfig+0x268>
 8011076:	e139      	b.n	80112ec <HAL_RCC_OscConfig+0x4dc>
 8011078:	2b05      	cmp	r3, #5
 801107a:	d100      	bne.n	801107e <HAL_RCC_OscConfig+0x26e>
 801107c:	e155      	b.n	801132a <HAL_RCC_OscConfig+0x51a>
 801107e:	2201      	movs	r2, #1
 8011080:	6a2b      	ldr	r3, [r5, #32]
 8011082:	4393      	bics	r3, r2
 8011084:	622b      	str	r3, [r5, #32]
 8011086:	6a2b      	ldr	r3, [r5, #32]
 8011088:	3203      	adds	r2, #3
 801108a:	4393      	bics	r3, r2
 801108c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 801108e:	f7fe fa57 	bl	800f540 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011092:	4e28      	ldr	r6, [pc, #160]	; (8011134 <HAL_RCC_OscConfig+0x324>)
      tickstart = HAL_GetTick();
 8011094:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011096:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011098:	4f2b      	ldr	r7, [pc, #172]	; (8011148 <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801109a:	e005      	b.n	80110a8 <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801109c:	f7fe fa50 	bl	800f540 <HAL_GetTick>
 80110a0:	4643      	mov	r3, r8
 80110a2:	1ac0      	subs	r0, r0, r3
 80110a4:	42b8      	cmp	r0, r7
 80110a6:	d820      	bhi.n	80110ea <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80110a8:	6a33      	ldr	r3, [r6, #32]
 80110aa:	421d      	tst	r5, r3
 80110ac:	d0f6      	beq.n	801109c <HAL_RCC_OscConfig+0x28c>
 80110ae:	6823      	ldr	r3, [r4, #0]
 80110b0:	e732      	b.n	8010f18 <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80110b2:	684a      	ldr	r2, [r1, #4]
 80110b4:	21c0      	movs	r1, #192	; 0xc0
 80110b6:	0249      	lsls	r1, r1, #9
 80110b8:	400a      	ands	r2, r1
 80110ba:	2180      	movs	r1, #128	; 0x80
 80110bc:	0209      	lsls	r1, r1, #8
 80110be:	428a      	cmp	r2, r1
 80110c0:	d000      	beq.n	80110c4 <HAL_RCC_OscConfig+0x2b4>
 80110c2:	e706      	b.n	8010ed2 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80110c4:	4a1b      	ldr	r2, [pc, #108]	; (8011134 <HAL_RCC_OscConfig+0x324>)
 80110c6:	6812      	ldr	r2, [r2, #0]
 80110c8:	0792      	lsls	r2, r2, #30
 80110ca:	d526      	bpl.n	801111a <HAL_RCC_OscConfig+0x30a>
 80110cc:	68e2      	ldr	r2, [r4, #12]
 80110ce:	2a01      	cmp	r2, #1
 80110d0:	d023      	beq.n	801111a <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 80110d2:	2001      	movs	r0, #1
 80110d4:	e00a      	b.n	80110ec <HAL_RCC_OscConfig+0x2dc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80110d6:	4a17      	ldr	r2, [pc, #92]	; (8011134 <HAL_RCC_OscConfig+0x324>)
 80110d8:	6812      	ldr	r2, [r2, #0]
 80110da:	0392      	lsls	r2, r2, #14
 80110dc:	d400      	bmi.n	80110e0 <HAL_RCC_OscConfig+0x2d0>
 80110de:	e6eb      	b.n	8010eb8 <HAL_RCC_OscConfig+0xa8>
 80110e0:	6862      	ldr	r2, [r4, #4]
 80110e2:	2a00      	cmp	r2, #0
 80110e4:	d000      	beq.n	80110e8 <HAL_RCC_OscConfig+0x2d8>
 80110e6:	e6e7      	b.n	8010eb8 <HAL_RCC_OscConfig+0xa8>
 80110e8:	e7f3      	b.n	80110d2 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 80110ea:	2003      	movs	r0, #3
}
 80110ec:	b002      	add	sp, #8
 80110ee:	bc04      	pop	{r2}
 80110f0:	4690      	mov	r8, r2
 80110f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 80110f4:	2201      	movs	r2, #1
 80110f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80110f8:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80110fa:	4393      	bics	r3, r2
 80110fc:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80110fe:	f7fe fa1f 	bl	800f540 <HAL_GetTick>
 8011102:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011104:	e004      	b.n	8011110 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011106:	f7fe fa1b 	bl	800f540 <HAL_GetTick>
 801110a:	1bc0      	subs	r0, r0, r7
 801110c:	2864      	cmp	r0, #100	; 0x64
 801110e:	d8ec      	bhi.n	80110ea <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011110:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011112:	421e      	tst	r6, r3
 8011114:	d1f7      	bne.n	8011106 <HAL_RCC_OscConfig+0x2f6>
 8011116:	6823      	ldr	r3, [r4, #0]
 8011118:	e771      	b.n	8010ffe <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801111a:	25f8      	movs	r5, #248	; 0xf8
 801111c:	4805      	ldr	r0, [pc, #20]	; (8011134 <HAL_RCC_OscConfig+0x324>)
 801111e:	6922      	ldr	r2, [r4, #16]
 8011120:	6801      	ldr	r1, [r0, #0]
 8011122:	00d2      	lsls	r2, r2, #3
 8011124:	43a9      	bics	r1, r5
 8011126:	430a      	orrs	r2, r1
 8011128:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801112a:	071a      	lsls	r2, r3, #28
 801112c:	d400      	bmi.n	8011130 <HAL_RCC_OscConfig+0x320>
 801112e:	e6f1      	b.n	8010f14 <HAL_RCC_OscConfig+0x104>
 8011130:	e74e      	b.n	8010fd0 <HAL_RCC_OscConfig+0x1c0>
 8011132:	46c0      	nop			; (mov r8, r8)
 8011134:	40021000 	.word	0x40021000
 8011138:	fffeffff 	.word	0xfffeffff
 801113c:	fffbffff 	.word	0xfffbffff
 8011140:	feffffff 	.word	0xfeffffff
 8011144:	40007000 	.word	0x40007000
 8011148:	00001388 	.word	0x00001388
        __HAL_RCC_HSI_DISABLE();
 801114c:	2201      	movs	r2, #1
 801114e:	4d7b      	ldr	r5, [pc, #492]	; (801133c <HAL_RCC_OscConfig+0x52c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011150:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8011152:	682b      	ldr	r3, [r5, #0]
 8011154:	4393      	bics	r3, r2
 8011156:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011158:	f7fe f9f2 	bl	800f540 <HAL_GetTick>
 801115c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801115e:	e004      	b.n	801116a <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011160:	f7fe f9ee 	bl	800f540 <HAL_GetTick>
 8011164:	1bc0      	subs	r0, r0, r7
 8011166:	2864      	cmp	r0, #100	; 0x64
 8011168:	d8bf      	bhi.n	80110ea <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801116a:	682b      	ldr	r3, [r5, #0]
 801116c:	421e      	tst	r6, r3
 801116e:	d1f7      	bne.n	8011160 <HAL_RCC_OscConfig+0x350>
 8011170:	6823      	ldr	r3, [r4, #0]
 8011172:	e6cd      	b.n	8010f10 <HAL_RCC_OscConfig+0x100>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011174:	2204      	movs	r2, #4
 8011176:	4d71      	ldr	r5, [pc, #452]	; (801133c <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011178:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 801117a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801117c:	4313      	orrs	r3, r2
 801117e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8011180:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011182:	3a03      	subs	r2, #3
 8011184:	4393      	bics	r3, r2
 8011186:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011188:	f7fe f9da 	bl	800f540 <HAL_GetTick>
 801118c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801118e:	e004      	b.n	801119a <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011190:	f7fe f9d6 	bl	800f540 <HAL_GetTick>
 8011194:	1bc0      	subs	r0, r0, r7
 8011196:	2864      	cmp	r0, #100	; 0x64
 8011198:	d8a7      	bhi.n	80110ea <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801119a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801119c:	421e      	tst	r6, r3
 801119e:	d1f7      	bne.n	8011190 <HAL_RCC_OscConfig+0x380>
 80111a0:	6823      	ldr	r3, [r4, #0]
 80111a2:	e6ce      	b.n	8010f42 <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80111a4:	2380      	movs	r3, #128	; 0x80
 80111a6:	682a      	ldr	r2, [r5, #0]
 80111a8:	02db      	lsls	r3, r3, #11
 80111aa:	4313      	orrs	r3, r2
 80111ac:	602b      	str	r3, [r5, #0]
 80111ae:	2380      	movs	r3, #128	; 0x80
 80111b0:	682a      	ldr	r2, [r5, #0]
 80111b2:	025b      	lsls	r3, r3, #9
 80111b4:	4313      	orrs	r3, r2
 80111b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80111b8:	f7fe f9c2 	bl	800f540 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80111bc:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80111be:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80111c0:	4e5e      	ldr	r6, [pc, #376]	; (801133c <HAL_RCC_OscConfig+0x52c>)
 80111c2:	02ad      	lsls	r5, r5, #10
 80111c4:	e005      	b.n	80111d2 <HAL_RCC_OscConfig+0x3c2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80111c6:	f7fe f9bb 	bl	800f540 <HAL_GetTick>
 80111ca:	1bc0      	subs	r0, r0, r7
 80111cc:	2864      	cmp	r0, #100	; 0x64
 80111ce:	d900      	bls.n	80111d2 <HAL_RCC_OscConfig+0x3c2>
 80111d0:	e78b      	b.n	80110ea <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80111d2:	6833      	ldr	r3, [r6, #0]
 80111d4:	422b      	tst	r3, r5
 80111d6:	d0f6      	beq.n	80111c6 <HAL_RCC_OscConfig+0x3b6>
 80111d8:	6823      	ldr	r3, [r4, #0]
 80111da:	e66d      	b.n	8010eb8 <HAL_RCC_OscConfig+0xa8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80111dc:	22c0      	movs	r2, #192	; 0xc0
 80111de:	684b      	ldr	r3, [r1, #4]
 80111e0:	0252      	lsls	r2, r2, #9
 80111e2:	4013      	ands	r3, r2
 80111e4:	4293      	cmp	r3, r2
 80111e6:	d000      	beq.n	80111ea <HAL_RCC_OscConfig+0x3da>
 80111e8:	e6b9      	b.n	8010f5e <HAL_RCC_OscConfig+0x14e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80111ea:	4b54      	ldr	r3, [pc, #336]	; (801133c <HAL_RCC_OscConfig+0x52c>)
 80111ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111ee:	03db      	lsls	r3, r3, #15
 80111f0:	d400      	bmi.n	80111f4 <HAL_RCC_OscConfig+0x3e4>
 80111f2:	e6cb      	b.n	8010f8c <HAL_RCC_OscConfig+0x17c>
 80111f4:	69e3      	ldr	r3, [r4, #28]
 80111f6:	2b01      	cmp	r3, #1
 80111f8:	d100      	bne.n	80111fc <HAL_RCC_OscConfig+0x3ec>
 80111fa:	e6c7      	b.n	8010f8c <HAL_RCC_OscConfig+0x17c>
        return HAL_ERROR;
 80111fc:	2001      	movs	r0, #1
 80111fe:	e775      	b.n	80110ec <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011200:	2b05      	cmp	r3, #5
 8011202:	d0cf      	beq.n	80111a4 <HAL_RCC_OscConfig+0x394>
 8011204:	682b      	ldr	r3, [r5, #0]
 8011206:	4a4e      	ldr	r2, [pc, #312]	; (8011340 <HAL_RCC_OscConfig+0x530>)
 8011208:	4013      	ands	r3, r2
 801120a:	602b      	str	r3, [r5, #0]
 801120c:	682b      	ldr	r3, [r5, #0]
 801120e:	4a4d      	ldr	r2, [pc, #308]	; (8011344 <HAL_RCC_OscConfig+0x534>)
 8011210:	4013      	ands	r3, r2
 8011212:	602b      	str	r3, [r5, #0]
 8011214:	e7d0      	b.n	80111b8 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI48_DISABLE();
 8011216:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011218:	4a49      	ldr	r2, [pc, #292]	; (8011340 <HAL_RCC_OscConfig+0x530>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 801121a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 801121c:	4013      	ands	r3, r2
 801121e:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011220:	f7fe f98e 	bl	800f540 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011224:	0276      	lsls	r6, r6, #9
        tickstart = HAL_GetTick();
 8011226:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011228:	e005      	b.n	8011236 <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801122a:	f7fe f989 	bl	800f540 <HAL_GetTick>
 801122e:	1bc0      	subs	r0, r0, r7
 8011230:	2864      	cmp	r0, #100	; 0x64
 8011232:	d900      	bls.n	8011236 <HAL_RCC_OscConfig+0x426>
 8011234:	e759      	b.n	80110ea <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011236:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011238:	4233      	tst	r3, r6
 801123a:	d1f6      	bne.n	801122a <HAL_RCC_OscConfig+0x41a>
 801123c:	e6a6      	b.n	8010f8c <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSI14ADC_DISABLE();
 801123e:	2104      	movs	r1, #4
 8011240:	4d3e      	ldr	r5, [pc, #248]	; (801133c <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011242:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8011244:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011246:	430b      	orrs	r3, r1
 8011248:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 801124a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801124c:	431a      	orrs	r2, r3
 801124e:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011250:	f7fe f976 	bl	800f540 <HAL_GetTick>
 8011254:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011256:	e005      	b.n	8011264 <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011258:	f7fe f972 	bl	800f540 <HAL_GetTick>
 801125c:	1bc0      	subs	r0, r0, r7
 801125e:	2864      	cmp	r0, #100	; 0x64
 8011260:	d900      	bls.n	8011264 <HAL_RCC_OscConfig+0x454>
 8011262:	e742      	b.n	80110ea <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011264:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011266:	421e      	tst	r6, r3
 8011268:	d0f6      	beq.n	8011258 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801126a:	21f8      	movs	r1, #248	; 0xf8
 801126c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 801126e:	69a3      	ldr	r3, [r4, #24]
 8011270:	438a      	bics	r2, r1
 8011272:	00db      	lsls	r3, r3, #3
 8011274:	4313      	orrs	r3, r2
 8011276:	636b      	str	r3, [r5, #52]	; 0x34
 8011278:	6823      	ldr	r3, [r4, #0]
 801127a:	e662      	b.n	8010f42 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_PLL_DISABLE();
 801127c:	682b      	ldr	r3, [r5, #0]
 801127e:	4a32      	ldr	r2, [pc, #200]	; (8011348 <HAL_RCC_OscConfig+0x538>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011280:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8011282:	4013      	ands	r3, r2
 8011284:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011286:	f7fe f95b 	bl	800f540 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801128a:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 801128c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801128e:	e005      	b.n	801129c <HAL_RCC_OscConfig+0x48c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011290:	f7fe f956 	bl	800f540 <HAL_GetTick>
 8011294:	1bc0      	subs	r0, r0, r7
 8011296:	2864      	cmp	r0, #100	; 0x64
 8011298:	d900      	bls.n	801129c <HAL_RCC_OscConfig+0x48c>
 801129a:	e726      	b.n	80110ea <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801129c:	682b      	ldr	r3, [r5, #0]
 801129e:	4233      	tst	r3, r6
 80112a0:	d1f6      	bne.n	8011290 <HAL_RCC_OscConfig+0x480>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80112a2:	220f      	movs	r2, #15
 80112a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80112a6:	4393      	bics	r3, r2
 80112a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80112aa:	4313      	orrs	r3, r2
 80112ac:	62eb      	str	r3, [r5, #44]	; 0x2c
 80112ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80112b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80112b2:	686a      	ldr	r2, [r5, #4]
 80112b4:	430b      	orrs	r3, r1
 80112b6:	4925      	ldr	r1, [pc, #148]	; (801134c <HAL_RCC_OscConfig+0x53c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80112b8:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80112ba:	400a      	ands	r2, r1
 80112bc:	4313      	orrs	r3, r2
 80112be:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80112c0:	2380      	movs	r3, #128	; 0x80
 80112c2:	682a      	ldr	r2, [r5, #0]
 80112c4:	045b      	lsls	r3, r3, #17
 80112c6:	4313      	orrs	r3, r2
 80112c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80112ca:	f7fe f939 	bl	800f540 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80112ce:	4d1b      	ldr	r5, [pc, #108]	; (801133c <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 80112d0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80112d2:	04a4      	lsls	r4, r4, #18
 80112d4:	e005      	b.n	80112e2 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80112d6:	f7fe f933 	bl	800f540 <HAL_GetTick>
 80112da:	1b80      	subs	r0, r0, r6
 80112dc:	2864      	cmp	r0, #100	; 0x64
 80112de:	d900      	bls.n	80112e2 <HAL_RCC_OscConfig+0x4d2>
 80112e0:	e703      	b.n	80110ea <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80112e2:	682b      	ldr	r3, [r5, #0]
 80112e4:	4223      	tst	r3, r4
 80112e6:	d0f6      	beq.n	80112d6 <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 80112e8:	2000      	movs	r0, #0
 80112ea:	e6ff      	b.n	80110ec <HAL_RCC_OscConfig+0x2dc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80112ec:	2201      	movs	r2, #1
 80112ee:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80112f0:	4e12      	ldr	r6, [pc, #72]	; (801133c <HAL_RCC_OscConfig+0x52c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80112f2:	4393      	bics	r3, r2
 80112f4:	622b      	str	r3, [r5, #32]
 80112f6:	6a2b      	ldr	r3, [r5, #32]
 80112f8:	3203      	adds	r2, #3
 80112fa:	4393      	bics	r3, r2
 80112fc:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80112fe:	f7fe f91f 	bl	800f540 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011302:	2502      	movs	r5, #2
      tickstart = HAL_GetTick();
 8011304:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011306:	4f12      	ldr	r7, [pc, #72]	; (8011350 <HAL_RCC_OscConfig+0x540>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011308:	e006      	b.n	8011318 <HAL_RCC_OscConfig+0x508>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801130a:	f7fe f919 	bl	800f540 <HAL_GetTick>
 801130e:	4643      	mov	r3, r8
 8011310:	1ac0      	subs	r0, r0, r3
 8011312:	42b8      	cmp	r0, r7
 8011314:	d900      	bls.n	8011318 <HAL_RCC_OscConfig+0x508>
 8011316:	e6e8      	b.n	80110ea <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011318:	6a33      	ldr	r3, [r6, #32]
 801131a:	421d      	tst	r5, r3
 801131c:	d1f5      	bne.n	801130a <HAL_RCC_OscConfig+0x4fa>
 801131e:	6823      	ldr	r3, [r4, #0]
 8011320:	e5fa      	b.n	8010f18 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011322:	6a2a      	ldr	r2, [r5, #32]
 8011324:	4313      	orrs	r3, r2
 8011326:	622b      	str	r3, [r5, #32]
 8011328:	e6b1      	b.n	801108e <HAL_RCC_OscConfig+0x27e>
 801132a:	2204      	movs	r2, #4
 801132c:	6a2b      	ldr	r3, [r5, #32]
 801132e:	4313      	orrs	r3, r2
 8011330:	622b      	str	r3, [r5, #32]
 8011332:	6a2b      	ldr	r3, [r5, #32]
 8011334:	3a03      	subs	r2, #3
 8011336:	4313      	orrs	r3, r2
 8011338:	622b      	str	r3, [r5, #32]
 801133a:	e6a8      	b.n	801108e <HAL_RCC_OscConfig+0x27e>
 801133c:	40021000 	.word	0x40021000
 8011340:	fffeffff 	.word	0xfffeffff
 8011344:	fffbffff 	.word	0xfffbffff
 8011348:	feffffff 	.word	0xfeffffff
 801134c:	ffc27fff 	.word	0xffc27fff
 8011350:	00001388 	.word	0x00001388

08011354 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011356:	46ce      	mov	lr, r9
 8011358:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 801135a:	2301      	movs	r3, #1
{
 801135c:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 801135e:	4985      	ldr	r1, [pc, #532]	; (8011574 <HAL_RCC_ClockConfig+0x220>)
{
 8011360:	b580      	push	{r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011362:	680a      	ldr	r2, [r1, #0]
{
 8011364:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011366:	401a      	ands	r2, r3
 8011368:	42a2      	cmp	r2, r4
 801136a:	d20c      	bcs.n	8011386 <HAL_RCC_ClockConfig+0x32>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801136c:	680a      	ldr	r2, [r1, #0]
 801136e:	439a      	bics	r2, r3
 8011370:	4322      	orrs	r2, r4
 8011372:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011374:	680a      	ldr	r2, [r1, #0]
 8011376:	4013      	ands	r3, r2
 8011378:	42a3      	cmp	r3, r4
 801137a:	d054      	beq.n	8011426 <HAL_RCC_ClockConfig+0xd2>
    {
      return HAL_ERROR;
 801137c:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 801137e:	bc0c      	pop	{r2, r3}
 8011380:	4690      	mov	r8, r2
 8011382:	4699      	mov	r9, r3
 8011384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011386:	6803      	ldr	r3, [r0, #0]
 8011388:	079a      	lsls	r2, r3, #30
 801138a:	d506      	bpl.n	801139a <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801138c:	20f0      	movs	r0, #240	; 0xf0
 801138e:	497a      	ldr	r1, [pc, #488]	; (8011578 <HAL_RCC_ClockConfig+0x224>)
 8011390:	684a      	ldr	r2, [r1, #4]
 8011392:	4382      	bics	r2, r0
 8011394:	68a8      	ldr	r0, [r5, #8]
 8011396:	4302      	orrs	r2, r0
 8011398:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801139a:	07db      	lsls	r3, r3, #31
 801139c:	d52a      	bpl.n	80113f4 <HAL_RCC_ClockConfig+0xa0>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801139e:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80113a0:	4a75      	ldr	r2, [pc, #468]	; (8011578 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80113a2:	2b01      	cmp	r3, #1
 80113a4:	d073      	beq.n	801148e <HAL_RCC_ClockConfig+0x13a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80113a6:	2b02      	cmp	r3, #2
 80113a8:	d075      	beq.n	8011496 <HAL_RCC_ClockConfig+0x142>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80113aa:	2b03      	cmp	r3, #3
 80113ac:	d100      	bne.n	80113b0 <HAL_RCC_ClockConfig+0x5c>
 80113ae:	e09c      	b.n	80114ea <HAL_RCC_ClockConfig+0x196>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80113b0:	6812      	ldr	r2, [r2, #0]
 80113b2:	0792      	lsls	r2, r2, #30
 80113b4:	d5e2      	bpl.n	801137c <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80113b6:	2103      	movs	r1, #3
 80113b8:	4e6f      	ldr	r6, [pc, #444]	; (8011578 <HAL_RCC_ClockConfig+0x224>)
 80113ba:	6872      	ldr	r2, [r6, #4]
 80113bc:	438a      	bics	r2, r1
 80113be:	4313      	orrs	r3, r2
 80113c0:	6073      	str	r3, [r6, #4]
      tickstart = HAL_GetTick();
 80113c2:	f7fe f8bd 	bl	800f540 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80113c6:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 80113c8:	0007      	movs	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80113ca:	2b01      	cmp	r3, #1
 80113cc:	d07d      	beq.n	80114ca <HAL_RCC_ClockConfig+0x176>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80113ce:	2b02      	cmp	r3, #2
 80113d0:	d100      	bne.n	80113d4 <HAL_RCC_ClockConfig+0x80>
 80113d2:	e093      	b.n	80114fc <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80113d4:	2b03      	cmp	r3, #3
 80113d6:	d066      	beq.n	80114a6 <HAL_RCC_ClockConfig+0x152>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80113d8:	230c      	movs	r3, #12
 80113da:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80113dc:	4b67      	ldr	r3, [pc, #412]	; (801157c <HAL_RCC_ClockConfig+0x228>)
 80113de:	4699      	mov	r9, r3
 80113e0:	e004      	b.n	80113ec <HAL_RCC_ClockConfig+0x98>
 80113e2:	f7fe f8ad 	bl	800f540 <HAL_GetTick>
 80113e6:	1bc0      	subs	r0, r0, r7
 80113e8:	4548      	cmp	r0, r9
 80113ea:	d86c      	bhi.n	80114c6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80113ec:	4642      	mov	r2, r8
 80113ee:	6873      	ldr	r3, [r6, #4]
 80113f0:	421a      	tst	r2, r3
 80113f2:	d1f6      	bne.n	80113e2 <HAL_RCC_ClockConfig+0x8e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80113f4:	2201      	movs	r2, #1
 80113f6:	495f      	ldr	r1, [pc, #380]	; (8011574 <HAL_RCC_ClockConfig+0x220>)
 80113f8:	680b      	ldr	r3, [r1, #0]
 80113fa:	4393      	bics	r3, r2
 80113fc:	4323      	orrs	r3, r4
 80113fe:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011400:	680b      	ldr	r3, [r1, #0]
 8011402:	401a      	ands	r2, r3
 8011404:	42a2      	cmp	r2, r4
 8011406:	d1b9      	bne.n	801137c <HAL_RCC_ClockConfig+0x28>
 8011408:	682b      	ldr	r3, [r5, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801140a:	075b      	lsls	r3, r3, #29
 801140c:	d506      	bpl.n	801141c <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 801140e:	4a5a      	ldr	r2, [pc, #360]	; (8011578 <HAL_RCC_ClockConfig+0x224>)
 8011410:	495b      	ldr	r1, [pc, #364]	; (8011580 <HAL_RCC_ClockConfig+0x22c>)
 8011412:	6853      	ldr	r3, [r2, #4]
 8011414:	400b      	ands	r3, r1
 8011416:	68e9      	ldr	r1, [r5, #12]
 8011418:	430b      	orrs	r3, r1
 801141a:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 801141c:	2000      	movs	r0, #0
 801141e:	f7fe f865 	bl	800f4ec <HAL_InitTick>
  return HAL_OK;
 8011422:	2000      	movs	r0, #0
 8011424:	e7ab      	b.n	801137e <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011426:	6803      	ldr	r3, [r0, #0]
 8011428:	079a      	lsls	r2, r3, #30
 801142a:	d506      	bpl.n	801143a <HAL_RCC_ClockConfig+0xe6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801142c:	20f0      	movs	r0, #240	; 0xf0
 801142e:	4952      	ldr	r1, [pc, #328]	; (8011578 <HAL_RCC_ClockConfig+0x224>)
 8011430:	684a      	ldr	r2, [r1, #4]
 8011432:	4382      	bics	r2, r0
 8011434:	68a8      	ldr	r0, [r5, #8]
 8011436:	4302      	orrs	r2, r0
 8011438:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801143a:	07da      	lsls	r2, r3, #31
 801143c:	d5e5      	bpl.n	801140a <HAL_RCC_ClockConfig+0xb6>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801143e:	686b      	ldr	r3, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011440:	4a4d      	ldr	r2, [pc, #308]	; (8011578 <HAL_RCC_ClockConfig+0x224>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011442:	2b01      	cmp	r3, #1
 8011444:	d056      	beq.n	80114f4 <HAL_RCC_ClockConfig+0x1a0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011446:	2b02      	cmp	r3, #2
 8011448:	d029      	beq.n	801149e <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801144a:	2b03      	cmp	r3, #3
 801144c:	d073      	beq.n	8011536 <HAL_RCC_ClockConfig+0x1e2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801144e:	6812      	ldr	r2, [r2, #0]
 8011450:	0792      	lsls	r2, r2, #30
 8011452:	d593      	bpl.n	801137c <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011454:	2103      	movs	r1, #3
 8011456:	4c48      	ldr	r4, [pc, #288]	; (8011578 <HAL_RCC_ClockConfig+0x224>)
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011458:	270c      	movs	r7, #12
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801145a:	6862      	ldr	r2, [r4, #4]
 801145c:	438a      	bics	r2, r1
 801145e:	4313      	orrs	r3, r2
 8011460:	6063      	str	r3, [r4, #4]
      tickstart = HAL_GetTick();
 8011462:	f7fe f86d 	bl	800f540 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011466:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8011468:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801146a:	2b01      	cmp	r3, #1
 801146c:	d056      	beq.n	801151c <HAL_RCC_ClockConfig+0x1c8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801146e:	2b02      	cmp	r3, #2
 8011470:	d065      	beq.n	801153e <HAL_RCC_ClockConfig+0x1ea>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011472:	2b03      	cmp	r3, #3
 8011474:	d070      	beq.n	8011558 <HAL_RCC_ClockConfig+0x204>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011476:	4b41      	ldr	r3, [pc, #260]	; (801157c <HAL_RCC_ClockConfig+0x228>)
 8011478:	4698      	mov	r8, r3
 801147a:	e004      	b.n	8011486 <HAL_RCC_ClockConfig+0x132>
 801147c:	f7fe f860 	bl	800f540 <HAL_GetTick>
 8011480:	1b80      	subs	r0, r0, r6
 8011482:	4540      	cmp	r0, r8
 8011484:	d81f      	bhi.n	80114c6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011486:	6863      	ldr	r3, [r4, #4]
 8011488:	421f      	tst	r7, r3
 801148a:	d1f7      	bne.n	801147c <HAL_RCC_ClockConfig+0x128>
 801148c:	e7bc      	b.n	8011408 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801148e:	6812      	ldr	r2, [r2, #0]
 8011490:	0392      	lsls	r2, r2, #14
 8011492:	d490      	bmi.n	80113b6 <HAL_RCC_ClockConfig+0x62>
 8011494:	e772      	b.n	801137c <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011496:	6812      	ldr	r2, [r2, #0]
 8011498:	0192      	lsls	r2, r2, #6
 801149a:	d48c      	bmi.n	80113b6 <HAL_RCC_ClockConfig+0x62>
 801149c:	e76e      	b.n	801137c <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801149e:	6812      	ldr	r2, [r2, #0]
 80114a0:	0192      	lsls	r2, r2, #6
 80114a2:	d4d7      	bmi.n	8011454 <HAL_RCC_ClockConfig+0x100>
 80114a4:	e76a      	b.n	801137c <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80114a6:	3309      	adds	r3, #9
 80114a8:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80114aa:	4b34      	ldr	r3, [pc, #208]	; (801157c <HAL_RCC_ClockConfig+0x228>)
 80114ac:	4699      	mov	r9, r3
 80114ae:	e004      	b.n	80114ba <HAL_RCC_ClockConfig+0x166>
 80114b0:	f7fe f846 	bl	800f540 <HAL_GetTick>
 80114b4:	1bc0      	subs	r0, r0, r7
 80114b6:	4548      	cmp	r0, r9
 80114b8:	d805      	bhi.n	80114c6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80114ba:	4642      	mov	r2, r8
 80114bc:	6873      	ldr	r3, [r6, #4]
 80114be:	4013      	ands	r3, r2
 80114c0:	2b0c      	cmp	r3, #12
 80114c2:	d1f5      	bne.n	80114b0 <HAL_RCC_ClockConfig+0x15c>
 80114c4:	e796      	b.n	80113f4 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 80114c6:	2003      	movs	r0, #3
 80114c8:	e759      	b.n	801137e <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80114ca:	330b      	adds	r3, #11
 80114cc:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80114ce:	4b2b      	ldr	r3, [pc, #172]	; (801157c <HAL_RCC_ClockConfig+0x228>)
 80114d0:	4699      	mov	r9, r3
 80114d2:	e004      	b.n	80114de <HAL_RCC_ClockConfig+0x18a>
 80114d4:	f7fe f834 	bl	800f540 <HAL_GetTick>
 80114d8:	1bc0      	subs	r0, r0, r7
 80114da:	4548      	cmp	r0, r9
 80114dc:	d8f3      	bhi.n	80114c6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80114de:	4642      	mov	r2, r8
 80114e0:	6873      	ldr	r3, [r6, #4]
 80114e2:	4013      	ands	r3, r2
 80114e4:	2b04      	cmp	r3, #4
 80114e6:	d1f5      	bne.n	80114d4 <HAL_RCC_ClockConfig+0x180>
 80114e8:	e784      	b.n	80113f4 <HAL_RCC_ClockConfig+0xa0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80114ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80114ec:	03d2      	lsls	r2, r2, #15
 80114ee:	d500      	bpl.n	80114f2 <HAL_RCC_ClockConfig+0x19e>
 80114f0:	e761      	b.n	80113b6 <HAL_RCC_ClockConfig+0x62>
 80114f2:	e743      	b.n	801137c <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80114f4:	6812      	ldr	r2, [r2, #0]
 80114f6:	0392      	lsls	r2, r2, #14
 80114f8:	d4ac      	bmi.n	8011454 <HAL_RCC_ClockConfig+0x100>
 80114fa:	e73f      	b.n	801137c <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80114fc:	330a      	adds	r3, #10
 80114fe:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011500:	4b1e      	ldr	r3, [pc, #120]	; (801157c <HAL_RCC_ClockConfig+0x228>)
 8011502:	4699      	mov	r9, r3
 8011504:	e004      	b.n	8011510 <HAL_RCC_ClockConfig+0x1bc>
 8011506:	f7fe f81b 	bl	800f540 <HAL_GetTick>
 801150a:	1bc0      	subs	r0, r0, r7
 801150c:	4548      	cmp	r0, r9
 801150e:	d8da      	bhi.n	80114c6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011510:	4642      	mov	r2, r8
 8011512:	6873      	ldr	r3, [r6, #4]
 8011514:	4013      	ands	r3, r2
 8011516:	2b08      	cmp	r3, #8
 8011518:	d1f5      	bne.n	8011506 <HAL_RCC_ClockConfig+0x1b2>
 801151a:	e76b      	b.n	80113f4 <HAL_RCC_ClockConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801151c:	4b17      	ldr	r3, [pc, #92]	; (801157c <HAL_RCC_ClockConfig+0x228>)
 801151e:	4698      	mov	r8, r3
 8011520:	e004      	b.n	801152c <HAL_RCC_ClockConfig+0x1d8>
 8011522:	f7fe f80d 	bl	800f540 <HAL_GetTick>
 8011526:	1b80      	subs	r0, r0, r6
 8011528:	4540      	cmp	r0, r8
 801152a:	d8cc      	bhi.n	80114c6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801152c:	6863      	ldr	r3, [r4, #4]
 801152e:	403b      	ands	r3, r7
 8011530:	2b04      	cmp	r3, #4
 8011532:	d1f6      	bne.n	8011522 <HAL_RCC_ClockConfig+0x1ce>
 8011534:	e768      	b.n	8011408 <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011536:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011538:	03d2      	lsls	r2, r2, #15
 801153a:	d48b      	bmi.n	8011454 <HAL_RCC_ClockConfig+0x100>
 801153c:	e71e      	b.n	801137c <HAL_RCC_ClockConfig+0x28>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801153e:	4b0f      	ldr	r3, [pc, #60]	; (801157c <HAL_RCC_ClockConfig+0x228>)
 8011540:	4698      	mov	r8, r3
 8011542:	e004      	b.n	801154e <HAL_RCC_ClockConfig+0x1fa>
 8011544:	f7fd fffc 	bl	800f540 <HAL_GetTick>
 8011548:	1b80      	subs	r0, r0, r6
 801154a:	4540      	cmp	r0, r8
 801154c:	d8bb      	bhi.n	80114c6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801154e:	6863      	ldr	r3, [r4, #4]
 8011550:	403b      	ands	r3, r7
 8011552:	2b08      	cmp	r3, #8
 8011554:	d1f6      	bne.n	8011544 <HAL_RCC_ClockConfig+0x1f0>
 8011556:	e757      	b.n	8011408 <HAL_RCC_ClockConfig+0xb4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011558:	4b08      	ldr	r3, [pc, #32]	; (801157c <HAL_RCC_ClockConfig+0x228>)
 801155a:	4698      	mov	r8, r3
 801155c:	e004      	b.n	8011568 <HAL_RCC_ClockConfig+0x214>
 801155e:	f7fd ffef 	bl	800f540 <HAL_GetTick>
 8011562:	1b80      	subs	r0, r0, r6
 8011564:	4540      	cmp	r0, r8
 8011566:	d8ae      	bhi.n	80114c6 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011568:	6863      	ldr	r3, [r4, #4]
 801156a:	403b      	ands	r3, r7
 801156c:	2b0c      	cmp	r3, #12
 801156e:	d1f6      	bne.n	801155e <HAL_RCC_ClockConfig+0x20a>
 8011570:	e74a      	b.n	8011408 <HAL_RCC_ClockConfig+0xb4>
 8011572:	46c0      	nop			; (mov r8, r8)
 8011574:	40022000 	.word	0x40022000
 8011578:	40021000 	.word	0x40021000
 801157c:	00001388 	.word	0x00001388
 8011580:	fffff8ff 	.word	0xfffff8ff

08011584 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011584:	b570      	push	{r4, r5, r6, lr}
 8011586:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011588:	4669      	mov	r1, sp
 801158a:	4b1c      	ldr	r3, [pc, #112]	; (80115fc <HAL_RCC_GetSysClockFreq+0x78>)
 801158c:	000a      	movs	r2, r1
 801158e:	0018      	movs	r0, r3
 8011590:	c870      	ldmia	r0!, {r4, r5, r6}
 8011592:	c270      	stmia	r2!, {r4, r5, r6}
 8011594:	6800      	ldr	r0, [r0, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011596:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011598:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 801159a:	aa04      	add	r2, sp, #16
 801159c:	0010      	movs	r0, r2
 801159e:	cb70      	ldmia	r3!, {r4, r5, r6}
 80115a0:	c070      	stmia	r0!, {r4, r5, r6}
 80115a2:	681b      	ldr	r3, [r3, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 80115a4:	4d16      	ldr	r5, [pc, #88]	; (8011600 <HAL_RCC_GetSysClockFreq+0x7c>)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 80115a6:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80115a8:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 80115aa:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80115ac:	4018      	ands	r0, r3
 80115ae:	2808      	cmp	r0, #8
 80115b0:	d00a      	beq.n	80115c8 <HAL_RCC_GetSysClockFreq+0x44>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80115b2:	380c      	subs	r0, #12
 80115b4:	4243      	negs	r3, r0
 80115b6:	4158      	adcs	r0, r3
 80115b8:	4b12      	ldr	r3, [pc, #72]	; (8011604 <HAL_RCC_GetSysClockFreq+0x80>)
 80115ba:	4240      	negs	r0, r0
 80115bc:	4018      	ands	r0, r3
 80115be:	4b12      	ldr	r3, [pc, #72]	; (8011608 <HAL_RCC_GetSysClockFreq+0x84>)
 80115c0:	469c      	mov	ip, r3
 80115c2:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80115c4:	b008      	add	sp, #32
 80115c6:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80115c8:	200f      	movs	r0, #15
 80115ca:	0c9c      	lsrs	r4, r3, #18
 80115cc:	4004      	ands	r4, r0
 80115ce:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80115d0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80115d2:	4008      	ands	r0, r1
 80115d4:	5c11      	ldrb	r1, [r2, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80115d6:	22c0      	movs	r2, #192	; 0xc0
 80115d8:	2080      	movs	r0, #128	; 0x80
 80115da:	0252      	lsls	r2, r2, #9
 80115dc:	4013      	ands	r3, r2
 80115de:	0240      	lsls	r0, r0, #9
 80115e0:	4283      	cmp	r3, r0
 80115e2:	d001      	beq.n	80115e8 <HAL_RCC_GetSysClockFreq+0x64>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d004      	beq.n	80115f2 <HAL_RCC_GetSysClockFreq+0x6e>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 80115e8:	4807      	ldr	r0, [pc, #28]	; (8011608 <HAL_RCC_GetSysClockFreq+0x84>)
 80115ea:	f7ee fdb1 	bl	8000150 <__udivsi3>
 80115ee:	4360      	muls	r0, r4
 80115f0:	e7e8      	b.n	80115c4 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 80115f2:	4806      	ldr	r0, [pc, #24]	; (801160c <HAL_RCC_GetSysClockFreq+0x88>)
 80115f4:	f7ee fdac 	bl	8000150 <__udivsi3>
 80115f8:	4360      	muls	r0, r4
 80115fa:	e7e3      	b.n	80115c4 <HAL_RCC_GetSysClockFreq+0x40>
 80115fc:	08017b0c 	.word	0x08017b0c
 8011600:	40021000 	.word	0x40021000
 8011604:	02625a00 	.word	0x02625a00
 8011608:	007a1200 	.word	0x007a1200
 801160c:	02dc6c00 	.word	0x02dc6c00

08011610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011610:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011612:	f7ff ffb7 	bl	8011584 <HAL_RCC_GetSysClockFreq>
 8011616:	4b05      	ldr	r3, [pc, #20]	; (801162c <HAL_RCC_GetHCLKFreq+0x1c>)
 8011618:	4a05      	ldr	r2, [pc, #20]	; (8011630 <HAL_RCC_GetHCLKFreq+0x20>)
 801161a:	685b      	ldr	r3, [r3, #4]
 801161c:	3220      	adds	r2, #32
 801161e:	061b      	lsls	r3, r3, #24
 8011620:	0f1b      	lsrs	r3, r3, #28
 8011622:	5cd3      	ldrb	r3, [r2, r3]
 8011624:	40d8      	lsrs	r0, r3
 8011626:	4b03      	ldr	r3, [pc, #12]	; (8011634 <HAL_RCC_GetHCLKFreq+0x24>)
 8011628:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 801162a:	bd10      	pop	{r4, pc}
 801162c:	40021000 	.word	0x40021000
 8011630:	08017b0c 	.word	0x08017b0c
 8011634:	200000b0 	.word	0x200000b0

08011638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011638:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 801163a:	f7ff ffa3 	bl	8011584 <HAL_RCC_GetSysClockFreq>
 801163e:	4908      	ldr	r1, [pc, #32]	; (8011660 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011640:	4a08      	ldr	r2, [pc, #32]	; (8011664 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8011642:	684b      	ldr	r3, [r1, #4]
 8011644:	3220      	adds	r2, #32
 8011646:	061b      	lsls	r3, r3, #24
 8011648:	0f1b      	lsrs	r3, r3, #28
 801164a:	5cd3      	ldrb	r3, [r2, r3]
 801164c:	40d8      	lsrs	r0, r3
 801164e:	4b06      	ldr	r3, [pc, #24]	; (8011668 <HAL_RCC_GetPCLK1Freq+0x30>)
 8011650:	6018      	str	r0, [r3, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8011652:	684b      	ldr	r3, [r1, #4]
 8011654:	055b      	lsls	r3, r3, #21
 8011656:	0f5b      	lsrs	r3, r3, #29
 8011658:	5cd3      	ldrb	r3, [r2, r3]
 801165a:	40d8      	lsrs	r0, r3
}    
 801165c:	bd10      	pop	{r4, pc}
 801165e:	46c0      	nop			; (mov r8, r8)
 8011660:	40021000 	.word	0x40021000
 8011664:	08017b0c 	.word	0x08017b0c
 8011668:	200000b0 	.word	0x200000b0

0801166c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801166e:	46c6      	mov	lr, r8
 8011670:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011672:	6803      	ldr	r3, [r0, #0]
{
 8011674:	b082      	sub	sp, #8
 8011676:	0004      	movs	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011678:	03da      	lsls	r2, r3, #15
 801167a:	d507      	bpl.n	801168c <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801167c:	493e      	ldr	r1, [pc, #248]	; (8011778 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 801167e:	6840      	ldr	r0, [r0, #4]
 8011680:	6a0a      	ldr	r2, [r1, #32]
 8011682:	4042      	eors	r2, r0
 8011684:	20c0      	movs	r0, #192	; 0xc0
 8011686:	0080      	lsls	r0, r0, #2
 8011688:	4202      	tst	r2, r0
 801168a:	d131      	bne.n	80116f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801168c:	07da      	lsls	r2, r3, #31
 801168e:	d506      	bpl.n	801169e <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011690:	2003      	movs	r0, #3
 8011692:	4939      	ldr	r1, [pc, #228]	; (8011778 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011694:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011696:	4382      	bics	r2, r0
 8011698:	68a0      	ldr	r0, [r4, #8]
 801169a:	4302      	orrs	r2, r0
 801169c:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801169e:	079a      	lsls	r2, r3, #30
 80116a0:	d506      	bpl.n	80116b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80116a2:	4935      	ldr	r1, [pc, #212]	; (8011778 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80116a4:	4835      	ldr	r0, [pc, #212]	; (801177c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80116a6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80116a8:	4002      	ands	r2, r0
 80116aa:	68e0      	ldr	r0, [r4, #12]
 80116ac:	4302      	orrs	r2, r0
 80116ae:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80116b0:	035a      	lsls	r2, r3, #13
 80116b2:	d506      	bpl.n	80116c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80116b4:	4930      	ldr	r1, [pc, #192]	; (8011778 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80116b6:	4832      	ldr	r0, [pc, #200]	; (8011780 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80116b8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80116ba:	4002      	ands	r2, r0
 80116bc:	6920      	ldr	r0, [r4, #16]
 80116be:	4302      	orrs	r2, r0
 80116c0:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80116c2:	069a      	lsls	r2, r3, #26
 80116c4:	d506      	bpl.n	80116d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80116c6:	2010      	movs	r0, #16
 80116c8:	492b      	ldr	r1, [pc, #172]	; (8011778 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80116ca:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80116cc:	4382      	bics	r2, r0
 80116ce:	6960      	ldr	r0, [r4, #20]
 80116d0:	4302      	orrs	r2, r0
 80116d2:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80116d4:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80116d6:	055b      	lsls	r3, r3, #21
 80116d8:	d506      	bpl.n	80116e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80116da:	2140      	movs	r1, #64	; 0x40
 80116dc:	4a26      	ldr	r2, [pc, #152]	; (8011778 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80116de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80116e0:	438b      	bics	r3, r1
 80116e2:	69a1      	ldr	r1, [r4, #24]
 80116e4:	430b      	orrs	r3, r1
 80116e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80116e8:	b002      	add	sp, #8
 80116ea:	bc04      	pop	{r2}
 80116ec:	4690      	mov	r8, r2
 80116ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80116f0:	2080      	movs	r0, #128	; 0x80
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80116f2:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 80116f4:	69ca      	ldr	r2, [r1, #28]
 80116f6:	0540      	lsls	r0, r0, #21
 80116f8:	4302      	orrs	r2, r0
 80116fa:	61ca      	str	r2, [r1, #28]
 80116fc:	69cb      	ldr	r3, [r1, #28]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80116fe:	4d21      	ldr	r5, [pc, #132]	; (8011784 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8011700:	4003      	ands	r3, r0
 8011702:	9301      	str	r3, [sp, #4]
 8011704:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011706:	682b      	ldr	r3, [r5, #0]
 8011708:	0076      	lsls	r6, r6, #1
 801170a:	4333      	orrs	r3, r6
 801170c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 801170e:	f7fd ff17 	bl	800f540 <HAL_GetTick>
 8011712:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011714:	e004      	b.n	8011720 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011716:	f7fd ff13 	bl	800f540 <HAL_GetTick>
 801171a:	1bc0      	subs	r0, r0, r7
 801171c:	2864      	cmp	r0, #100	; 0x64
 801171e:	d829      	bhi.n	8011774 <HAL_RCCEx_PeriphCLKConfig+0x108>
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011720:	682b      	ldr	r3, [r5, #0]
 8011722:	4233      	tst	r3, r6
 8011724:	d0f7      	beq.n	8011716 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_BACKUPRESET_FORCE();
 8011726:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011728:	4d13      	ldr	r5, [pc, #76]	; (8011778 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 801172a:	0252      	lsls	r2, r2, #9
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801172c:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 801172e:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011730:	4b15      	ldr	r3, [pc, #84]	; (8011788 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8011732:	4302      	orrs	r2, r0
 8011734:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011736:	6a2a      	ldr	r2, [r5, #32]
 8011738:	4814      	ldr	r0, [pc, #80]	; (801178c <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801173a:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 801173c:	4002      	ands	r2, r0
 801173e:	622a      	str	r2, [r5, #32]
      RCC->BDCR = temp_reg;
 8011740:	622b      	str	r3, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8011742:	078b      	lsls	r3, r1, #30
 8011744:	d408      	bmi.n	8011758 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8011746:	4a0c      	ldr	r2, [pc, #48]	; (8011778 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011748:	490f      	ldr	r1, [pc, #60]	; (8011788 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 801174a:	6a13      	ldr	r3, [r2, #32]
 801174c:	400b      	ands	r3, r1
 801174e:	6861      	ldr	r1, [r4, #4]
 8011750:	430b      	orrs	r3, r1
 8011752:	6213      	str	r3, [r2, #32]
 8011754:	6823      	ldr	r3, [r4, #0]
 8011756:	e799      	b.n	801168c <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8011758:	f7fd fef2 	bl	800f540 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801175c:	4b0c      	ldr	r3, [pc, #48]	; (8011790 <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 801175e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011760:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011762:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011764:	6a2b      	ldr	r3, [r5, #32]
 8011766:	421e      	tst	r6, r3
 8011768:	d1ed      	bne.n	8011746 <HAL_RCCEx_PeriphCLKConfig+0xda>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801176a:	f7fd fee9 	bl	800f540 <HAL_GetTick>
 801176e:	1bc0      	subs	r0, r0, r7
 8011770:	4540      	cmp	r0, r8
 8011772:	d9f7      	bls.n	8011764 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 8011774:	2003      	movs	r0, #3
 8011776:	e7b7      	b.n	80116e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8011778:	40021000 	.word	0x40021000
 801177c:	fffcffff 	.word	0xfffcffff
 8011780:	fff3ffff 	.word	0xfff3ffff
 8011784:	40007000 	.word	0x40007000
 8011788:	fffffcff 	.word	0xfffffcff
 801178c:	fffeffff 	.word	0xfffeffff
 8011790:	00001388 	.word	0x00001388

08011794 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8011794:	4770      	bx	lr
 8011796:	46c0      	nop			; (mov r8, r8)

08011798 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011798:	6803      	ldr	r3, [r0, #0]
{
 801179a:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801179c:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 801179e:	2640      	movs	r6, #64	; 0x40
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80117a0:	6048      	str	r0, [r1, #4]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80117a2:	203f      	movs	r0, #63	; 0x3f
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80117a4:	681c      	ldr	r4, [r3, #0]
 80117a6:	4b13      	ldr	r3, [pc, #76]	; (80117f4 <HAL_RTC_GetTime+0x5c>)
 80117a8:	401c      	ands	r4, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80117aa:	0c25      	lsrs	r5, r4, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80117ac:	0a23      	lsrs	r3, r4, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80117ae:	4028      	ands	r0, r5
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80117b0:	b2db      	uxtb	r3, r3
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80117b2:	b2e4      	uxtb	r4, r4
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 80117b4:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80117b6:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80117b8:	704b      	strb	r3, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80117ba:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 80117bc:	720e      	strb	r6, [r1, #8]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80117be:	2a00      	cmp	r2, #0
 80117c0:	d115      	bne.n	80117ee <HAL_RTC_GetTime+0x56>
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 80117c2:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80117c4:	0900      	lsrs	r0, r0, #4
 80117c6:	0082      	lsls	r2, r0, #2
 80117c8:	1810      	adds	r0, r2, r0
 80117ca:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80117cc:	4035      	ands	r5, r6
 80117ce:	1945      	adds	r5, r0, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80117d0:	0918      	lsrs	r0, r3, #4
 80117d2:	0082      	lsls	r2, r0, #2
 80117d4:	1812      	adds	r2, r2, r0
 80117d6:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80117d8:	4033      	ands	r3, r6
 80117da:	18d3      	adds	r3, r2, r3
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80117dc:	0922      	lsrs	r2, r4, #4
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80117de:	704b      	strb	r3, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80117e0:	0093      	lsls	r3, r2, #2
 80117e2:	189b      	adds	r3, r3, r2
 80117e4:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80117e6:	4034      	ands	r4, r6
 80117e8:	191c      	adds	r4, r3, r4
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80117ea:	700d      	strb	r5, [r1, #0]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80117ec:	708c      	strb	r4, [r1, #2]
}
 80117ee:	2000      	movs	r0, #0
 80117f0:	bd70      	pop	{r4, r5, r6, pc}
 80117f2:	46c0      	nop			; (mov r8, r8)
 80117f4:	007f7f7f 	.word	0x007f7f7f

080117f8 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80117f8:	6803      	ldr	r3, [r0, #0]
 80117fa:	4815      	ldr	r0, [pc, #84]	; (8011850 <HAL_RTC_GetDate+0x58>)
 80117fc:	685b      	ldr	r3, [r3, #4]
{
 80117fe:	b5f0      	push	{r4, r5, r6, r7, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8011800:	4003      	ands	r3, r0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011802:	201f      	movs	r0, #31
 8011804:	0a1c      	lsrs	r4, r3, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8011806:	0c1f      	lsrs	r7, r3, #16
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8011808:	b2dd      	uxtb	r5, r3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801180a:	b2e4      	uxtb	r4, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 801180c:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801180e:	4020      	ands	r0, r4
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8011810:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8011812:	70cf      	strb	r7, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011814:	7048      	strb	r0, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8011816:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8011818:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 801181a:	2a00      	cmp	r2, #0
 801181c:	d115      	bne.n	801184a <HAL_RTC_GetDate+0x52>
  return (tmp + (Value & (uint8_t)0x0F));
 801181e:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011820:	093b      	lsrs	r3, r7, #4
 8011822:	009a      	lsls	r2, r3, #2
 8011824:	18d2      	adds	r2, r2, r3
 8011826:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011828:	4037      	ands	r7, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801182a:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 801182c:	19d2      	adds	r2, r2, r7
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801182e:	0098      	lsls	r0, r3, #2
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011830:	70ca      	strb	r2, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011832:	092a      	lsrs	r2, r5, #4
 8011834:	18c0      	adds	r0, r0, r3
 8011836:	0093      	lsls	r3, r2, #2
 8011838:	189b      	adds	r3, r3, r2
 801183a:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801183c:	4034      	ands	r4, r6
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801183e:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011840:	4035      	ands	r5, r6
 8011842:	1904      	adds	r4, r0, r4
 8011844:	195b      	adds	r3, r3, r5
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011846:	704c      	strb	r4, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8011848:	708b      	strb	r3, [r1, #2]
}
 801184a:	2000      	movs	r0, #0
 801184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801184e:	46c0      	nop			; (mov r8, r8)
 8011850:	00ffff3f 	.word	0x00ffff3f

08011854 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011854:	21a0      	movs	r1, #160	; 0xa0
 8011856:	6802      	ldr	r2, [r0, #0]
{
 8011858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801185a:	68d3      	ldr	r3, [r2, #12]
{
 801185c:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801185e:	438b      	bics	r3, r1
 8011860:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 8011862:	f7fd fe6d 	bl	800f540 <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011866:	26fa      	movs	r6, #250	; 0xfa
  tickstart = HAL_GetTick();
 8011868:	0007      	movs	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801186a:	2520      	movs	r5, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801186c:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801186e:	e004      	b.n	801187a <HAL_RTC_WaitForSynchro+0x26>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011870:	f7fd fe66 	bl	800f540 <HAL_GetTick>
 8011874:	1bc0      	subs	r0, r0, r7
 8011876:	42b0      	cmp	r0, r6
 8011878:	d805      	bhi.n	8011886 <HAL_RTC_WaitForSynchro+0x32>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801187a:	6823      	ldr	r3, [r4, #0]
 801187c:	68db      	ldr	r3, [r3, #12]
 801187e:	421d      	tst	r5, r3
 8011880:	d0f6      	beq.n	8011870 <HAL_RTC_WaitForSynchro+0x1c>
  return HAL_OK;
 8011882:	2000      	movs	r0, #0
}
 8011884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8011886:	2003      	movs	r0, #3
 8011888:	e7fc      	b.n	8011884 <HAL_RTC_WaitForSynchro+0x30>
 801188a:	46c0      	nop			; (mov r8, r8)

0801188c <RTC_EnterInitMode>:
{
 801188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801188e:	6803      	ldr	r3, [r0, #0]
{
 8011890:	0004      	movs	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011892:	68da      	ldr	r2, [r3, #12]
 8011894:	0652      	lsls	r2, r2, #25
 8011896:	d501      	bpl.n	801189c <RTC_EnterInitMode+0x10>
  return HAL_OK;  
 8011898:	2000      	movs	r0, #0
}
 801189a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801189c:	2201      	movs	r2, #1
 801189e:	4252      	negs	r2, r2
 80118a0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80118a2:	f7fd fe4d 	bl	800f540 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80118a6:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 80118a8:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80118aa:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80118ac:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80118ae:	e004      	b.n	80118ba <RTC_EnterInitMode+0x2e>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80118b0:	f7fd fe46 	bl	800f540 <HAL_GetTick>
 80118b4:	1bc0      	subs	r0, r0, r7
 80118b6:	42b0      	cmp	r0, r6
 80118b8:	d804      	bhi.n	80118c4 <RTC_EnterInitMode+0x38>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80118ba:	6823      	ldr	r3, [r4, #0]
 80118bc:	68db      	ldr	r3, [r3, #12]
 80118be:	421d      	tst	r5, r3
 80118c0:	d0f6      	beq.n	80118b0 <RTC_EnterInitMode+0x24>
 80118c2:	e7e9      	b.n	8011898 <RTC_EnterInitMode+0xc>
        return HAL_TIMEOUT;
 80118c4:	2003      	movs	r0, #3
 80118c6:	e7e8      	b.n	801189a <RTC_EnterInitMode+0xe>

080118c8 <HAL_RTC_Init>:
{
 80118c8:	b570      	push	{r4, r5, r6, lr}
 80118ca:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 80118cc:	d03e      	beq.n	801194c <HAL_RTC_Init+0x84>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80118ce:	7f43      	ldrb	r3, [r0, #29]
 80118d0:	b2db      	uxtb	r3, r3
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d036      	beq.n	8011944 <HAL_RTC_Init+0x7c>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80118d6:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80118d8:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80118da:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80118dc:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80118de:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80118e0:	625a      	str	r2, [r3, #36]	; 0x24
 80118e2:	3a77      	subs	r2, #119	; 0x77
 80118e4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80118e6:	f7ff ffd1 	bl	801188c <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80118ea:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80118ec:	2800      	cmp	r0, #0
 80118ee:	d123      	bne.n	8011938 <HAL_RTC_Init+0x70>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80118f0:	689a      	ldr	r2, [r3, #8]
 80118f2:	4917      	ldr	r1, [pc, #92]	; (8011950 <HAL_RTC_Init+0x88>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80118f4:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80118f6:	400a      	ands	r2, r1
 80118f8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80118fa:	6862      	ldr	r2, [r4, #4]
 80118fc:	6899      	ldr	r1, [r3, #8]
 80118fe:	432a      	orrs	r2, r5
 8011900:	6965      	ldr	r5, [r4, #20]
 8011902:	432a      	orrs	r2, r5
 8011904:	430a      	orrs	r2, r1
 8011906:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011908:	68e2      	ldr	r2, [r4, #12]
 801190a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 801190c:	68a2      	ldr	r2, [r4, #8]
 801190e:	6919      	ldr	r1, [r3, #16]
 8011910:	0412      	lsls	r2, r2, #16
 8011912:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011914:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011916:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011918:	68da      	ldr	r2, [r3, #12]
 801191a:	438a      	bics	r2, r1
 801191c:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 801191e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011920:	490c      	ldr	r1, [pc, #48]	; (8011954 <HAL_RTC_Init+0x8c>)
 8011922:	400a      	ands	r2, r1
 8011924:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8011926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011928:	69a1      	ldr	r1, [r4, #24]
 801192a:	430a      	orrs	r2, r1
 801192c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801192e:	22ff      	movs	r2, #255	; 0xff
 8011930:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011932:	2301      	movs	r3, #1
 8011934:	7763      	strb	r3, [r4, #29]
}
 8011936:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011938:	22ff      	movs	r2, #255	; 0xff
 801193a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801193c:	2304      	movs	r3, #4
    return HAL_ERROR;
 801193e:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011940:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8011942:	e7f8      	b.n	8011936 <HAL_RTC_Init+0x6e>
    hrtc->Lock = HAL_UNLOCKED;
 8011944:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8011946:	f7ff ff25 	bl	8011794 <HAL_RTC_MspInit>
 801194a:	e7c4      	b.n	80118d6 <HAL_RTC_Init+0xe>
     return HAL_ERROR;
 801194c:	2001      	movs	r0, #1
 801194e:	e7f2      	b.n	8011936 <HAL_RTC_Init+0x6e>
 8011950:	ff8fffbf 	.word	0xff8fffbf
 8011954:	fffbffff 	.word	0xfffbffff

08011958 <HAL_RTC_SetTime>:
{
 8011958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 801195a:	7f03      	ldrb	r3, [r0, #28]
{
 801195c:	0004      	movs	r4, r0
 801195e:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8011960:	2b01      	cmp	r3, #1
 8011962:	d100      	bne.n	8011966 <HAL_RTC_SetTime+0xe>
 8011964:	e074      	b.n	8011a50 <HAL_RTC_SetTime+0xf8>
 8011966:	2301      	movs	r3, #1
 8011968:	6806      	ldr	r6, [r0, #0]
 801196a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 801196c:	3301      	adds	r3, #1
 801196e:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011970:	68b3      	ldr	r3, [r6, #8]
 8011972:	2740      	movs	r7, #64	; 0x40
  if(Format == RTC_FORMAT_BIN)
 8011974:	2a00      	cmp	r2, #0
 8011976:	d031      	beq.n	80119dc <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011978:	403b      	ands	r3, r7
 801197a:	d065      	beq.n	8011a48 <HAL_RTC_SetTime+0xf0>
 801197c:	7a0b      	ldrb	r3, [r1, #8]
 801197e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011980:	782f      	ldrb	r7, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011982:	7869      	ldrb	r1, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011984:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011986:	0209      	lsls	r1, r1, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011988:	430f      	orrs	r7, r1
              ((uint32_t)sTime->Seconds) | \
 801198a:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 801198c:	430f      	orrs	r7, r1
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801198e:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011990:	23ca      	movs	r3, #202	; 0xca
 8011992:	6273      	str	r3, [r6, #36]	; 0x24
 8011994:	3b77      	subs	r3, #119	; 0x77
 8011996:	6273      	str	r3, [r6, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011998:	0020      	movs	r0, r4
 801199a:	f7ff ff77 	bl	801188c <RTC_EnterInitMode>
 801199e:	1e06      	subs	r6, r0, #0
 80119a0:	d149      	bne.n	8011a36 <HAL_RTC_SetTime+0xde>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80119a2:	4935      	ldr	r1, [pc, #212]	; (8011a78 <HAL_RTC_SetTime+0x120>)
 80119a4:	6822      	ldr	r2, [r4, #0]
 80119a6:	4039      	ands	r1, r7
 80119a8:	6011      	str	r1, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80119aa:	6893      	ldr	r3, [r2, #8]
 80119ac:	4933      	ldr	r1, [pc, #204]	; (8011a7c <HAL_RTC_SetTime+0x124>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80119ae:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80119b0:	400b      	ands	r3, r1
 80119b2:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80119b4:	68eb      	ldr	r3, [r5, #12]
 80119b6:	6891      	ldr	r1, [r2, #8]
 80119b8:	4303      	orrs	r3, r0
 80119ba:	430b      	orrs	r3, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80119bc:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80119be:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80119c0:	68d3      	ldr	r3, [r2, #12]
 80119c2:	438b      	bics	r3, r1
 80119c4:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80119c6:	6893      	ldr	r3, [r2, #8]
 80119c8:	069b      	lsls	r3, r3, #26
 80119ca:	d543      	bpl.n	8011a54 <HAL_RTC_SetTime+0xfc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80119cc:	23ff      	movs	r3, #255	; 0xff
 80119ce:	6253      	str	r3, [r2, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80119d0:	3bfe      	subs	r3, #254	; 0xfe
 80119d2:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 80119d4:	2300      	movs	r3, #0
 80119d6:	7723      	strb	r3, [r4, #28]
}
 80119d8:	0030      	movs	r0, r6
 80119da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80119dc:	401f      	ands	r7, r3
 80119de:	d035      	beq.n	8011a4c <HAL_RTC_SetTime+0xf4>
 80119e0:	7a0f      	ldrb	r7, [r1, #8]
 80119e2:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80119e4:	7828      	ldrb	r0, [r5, #0]
  uint32_t bcdhigh = 0;
 80119e6:	2300      	movs	r3, #0
  while(Value >= 10)
 80119e8:	2809      	cmp	r0, #9
 80119ea:	d906      	bls.n	80119fa <HAL_RTC_SetTime+0xa2>
    Value -= 10;
 80119ec:	380a      	subs	r0, #10
 80119ee:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 80119f0:	3301      	adds	r3, #1
  while(Value >= 10)
 80119f2:	2809      	cmp	r0, #9
 80119f4:	d8fa      	bhi.n	80119ec <HAL_RTC_SetTime+0x94>
 80119f6:	011b      	lsls	r3, r3, #4
 80119f8:	b2db      	uxtb	r3, r3
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80119fa:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80119fc:	786b      	ldrb	r3, [r5, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80119fe:	0400      	lsls	r0, r0, #16
  uint32_t bcdhigh = 0;
 8011a00:	2100      	movs	r1, #0
  while(Value >= 10)
 8011a02:	2b09      	cmp	r3, #9
 8011a04:	d906      	bls.n	8011a14 <HAL_RTC_SetTime+0xbc>
    Value -= 10;
 8011a06:	3b0a      	subs	r3, #10
 8011a08:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8011a0a:	3101      	adds	r1, #1
  while(Value >= 10)
 8011a0c:	2b09      	cmp	r3, #9
 8011a0e:	d8fa      	bhi.n	8011a06 <HAL_RTC_SetTime+0xae>
 8011a10:	0109      	lsls	r1, r1, #4
 8011a12:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011a14:	430b      	orrs	r3, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011a16:	78a9      	ldrb	r1, [r5, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011a18:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 8011a1a:	2909      	cmp	r1, #9
 8011a1c:	d929      	bls.n	8011a72 <HAL_RTC_SetTime+0x11a>
    Value -= 10;
 8011a1e:	390a      	subs	r1, #10
 8011a20:	b2c9      	uxtb	r1, r1
    bcdhigh++;
 8011a22:	3201      	adds	r2, #1
  while(Value >= 10)
 8011a24:	2909      	cmp	r1, #9
 8011a26:	d8fa      	bhi.n	8011a1e <HAL_RTC_SetTime+0xc6>
 8011a28:	0112      	lsls	r2, r2, #4
 8011a2a:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011a2c:	4307      	orrs	r7, r0
 8011a2e:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011a30:	4311      	orrs	r1, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011a32:	430f      	orrs	r7, r1
 8011a34:	e7ac      	b.n	8011990 <HAL_RTC_SetTime+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011a36:	22ff      	movs	r2, #255	; 0xff
 8011a38:	6823      	ldr	r3, [r4, #0]
    return HAL_ERROR;
 8011a3a:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011a3c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011a3e:	2304      	movs	r3, #4
 8011a40:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011a42:	2300      	movs	r3, #0
 8011a44:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011a46:	e7c7      	b.n	80119d8 <HAL_RTC_SetTime+0x80>
      sTime->TimeFormat = 0x00;
 8011a48:	720b      	strb	r3, [r1, #8]
 8011a4a:	e799      	b.n	8011980 <HAL_RTC_SetTime+0x28>
      sTime->TimeFormat = 0x00;
 8011a4c:	720f      	strb	r7, [r1, #8]
 8011a4e:	e7c9      	b.n	80119e4 <HAL_RTC_SetTime+0x8c>
  __HAL_LOCK(hrtc);
 8011a50:	2602      	movs	r6, #2
 8011a52:	e7c1      	b.n	80119d8 <HAL_RTC_SetTime+0x80>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011a54:	0020      	movs	r0, r4
 8011a56:	f7ff fefd 	bl	8011854 <HAL_RTC_WaitForSynchro>
 8011a5a:	2800      	cmp	r0, #0
 8011a5c:	d101      	bne.n	8011a62 <HAL_RTC_SetTime+0x10a>
 8011a5e:	6822      	ldr	r2, [r4, #0]
 8011a60:	e7b4      	b.n	80119cc <HAL_RTC_SetTime+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011a62:	22ff      	movs	r2, #255	; 0xff
 8011a64:	6823      	ldr	r3, [r4, #0]
 8011a66:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011a68:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8011a6a:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011a6c:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8011a6e:	2601      	movs	r6, #1
 8011a70:	e7b2      	b.n	80119d8 <HAL_RTC_SetTime+0x80>
  while(Value >= 10)
 8011a72:	2200      	movs	r2, #0
 8011a74:	e7da      	b.n	8011a2c <HAL_RTC_SetTime+0xd4>
 8011a76:	46c0      	nop			; (mov r8, r8)
 8011a78:	007f7f7f 	.word	0x007f7f7f
 8011a7c:	fffbffff 	.word	0xfffbffff

08011a80 <HAL_RTC_SetDate>:
{
 8011a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8011a82:	7f03      	ldrb	r3, [r0, #28]
{
 8011a84:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 8011a86:	2b01      	cmp	r3, #1
 8011a88:	d062      	beq.n	8011b50 <HAL_RTC_SetDate+0xd0>
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	780f      	ldrb	r7, [r1, #0]
 8011a8e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8011a90:	3301      	adds	r3, #1
 8011a92:	7743      	strb	r3, [r0, #29]
 8011a94:	7848      	ldrb	r0, [r1, #1]
 8011a96:	788e      	ldrb	r6, [r1, #2]
 8011a98:	78cb      	ldrb	r3, [r1, #3]
 8011a9a:	037f      	lsls	r7, r7, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011a9c:	2a00      	cmp	r2, #0
 8011a9e:	d022      	beq.n	8011ae6 <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011aa0:	041b      	lsls	r3, r3, #16
 8011aa2:	433b      	orrs	r3, r7
 8011aa4:	001c      	movs	r4, r3
                  (((uint32_t)sDate->Month) << 8) | \
 8011aa6:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011aa8:	4334      	orrs	r4, r6
 8011aaa:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011aac:	22ca      	movs	r2, #202	; 0xca
 8011aae:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011ab0:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011ab2:	625a      	str	r2, [r3, #36]	; 0x24
 8011ab4:	3a77      	subs	r2, #119	; 0x77
 8011ab6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011ab8:	f7ff fee8 	bl	801188c <RTC_EnterInitMode>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011abc:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011abe:	1e06      	subs	r6, r0, #0
 8011ac0:	d13e      	bne.n	8011b40 <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011ac2:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011ac4:	4a2b      	ldr	r2, [pc, #172]	; (8011b74 <HAL_RTC_SetDate+0xf4>)
 8011ac6:	4014      	ands	r4, r2
 8011ac8:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011aca:	68da      	ldr	r2, [r3, #12]
 8011acc:	438a      	bics	r2, r1
 8011ace:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011ad0:	689a      	ldr	r2, [r3, #8]
 8011ad2:	0692      	lsls	r2, r2, #26
 8011ad4:	d53e      	bpl.n	8011b54 <HAL_RTC_SetDate+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011ad6:	22ff      	movs	r2, #255	; 0xff
 8011ad8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8011ada:	2301      	movs	r3, #1
 8011adc:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8011ade:	2300      	movs	r3, #0
 8011ae0:	772b      	strb	r3, [r5, #28]
}
 8011ae2:	0030      	movs	r0, r6
 8011ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011ae6:	2410      	movs	r4, #16
 8011ae8:	4204      	tst	r4, r0
 8011aea:	d003      	beq.n	8011af4 <HAL_RTC_SetDate+0x74>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8011aec:	43a0      	bics	r0, r4
 8011aee:	300a      	adds	r0, #10
 8011af0:	b2c0      	uxtb	r0, r0
 8011af2:	7048      	strb	r0, [r1, #1]
  uint32_t bcdhigh = 0;
 8011af4:	2100      	movs	r1, #0
  while(Value >= 10)
 8011af6:	2b09      	cmp	r3, #9
 8011af8:	d906      	bls.n	8011b08 <HAL_RTC_SetDate+0x88>
    Value -= 10;
 8011afa:	3b0a      	subs	r3, #10
 8011afc:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8011afe:	3101      	adds	r1, #1
  while(Value >= 10)
 8011b00:	2b09      	cmp	r3, #9
 8011b02:	d8fa      	bhi.n	8011afa <HAL_RTC_SetDate+0x7a>
 8011b04:	0109      	lsls	r1, r1, #4
 8011b06:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011b08:	430b      	orrs	r3, r1
 8011b0a:	041b      	lsls	r3, r3, #16
  uint32_t bcdhigh = 0;
 8011b0c:	2100      	movs	r1, #0
  while(Value >= 10)
 8011b0e:	2809      	cmp	r0, #9
 8011b10:	d906      	bls.n	8011b20 <HAL_RTC_SetDate+0xa0>
    Value -= 10;
 8011b12:	380a      	subs	r0, #10
 8011b14:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8011b16:	3101      	adds	r1, #1
  while(Value >= 10)
 8011b18:	2809      	cmp	r0, #9
 8011b1a:	d8fa      	bhi.n	8011b12 <HAL_RTC_SetDate+0x92>
 8011b1c:	0109      	lsls	r1, r1, #4
 8011b1e:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011b20:	4308      	orrs	r0, r1
 8011b22:	0200      	lsls	r0, r0, #8
  while(Value >= 10)
 8011b24:	2e09      	cmp	r6, #9
 8011b26:	d922      	bls.n	8011b6e <HAL_RTC_SetDate+0xee>
    Value -= 10;
 8011b28:	3e0a      	subs	r6, #10
 8011b2a:	b2f6      	uxtb	r6, r6
    bcdhigh++;
 8011b2c:	3201      	adds	r2, #1
  while(Value >= 10)
 8011b2e:	2e09      	cmp	r6, #9
 8011b30:	d8fa      	bhi.n	8011b28 <HAL_RTC_SetDate+0xa8>
 8011b32:	0112      	lsls	r2, r2, #4
 8011b34:	b2d4      	uxtb	r4, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011b36:	433b      	orrs	r3, r7
 8011b38:	4303      	orrs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8011b3a:	4334      	orrs	r4, r6
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011b3c:	431c      	orrs	r4, r3
 8011b3e:	e7b5      	b.n	8011aac <HAL_RTC_SetDate+0x2c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011b40:	22ff      	movs	r2, #255	; 0xff
 8011b42:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011b44:	2304      	movs	r3, #4
 8011b46:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8011b48:	2300      	movs	r3, #0
    return HAL_ERROR;
 8011b4a:	2601      	movs	r6, #1
    __HAL_UNLOCK(hrtc);
 8011b4c:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 8011b4e:	e7c8      	b.n	8011ae2 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8011b50:	2602      	movs	r6, #2
 8011b52:	e7c6      	b.n	8011ae2 <HAL_RTC_SetDate+0x62>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011b54:	0028      	movs	r0, r5
 8011b56:	f7ff fe7d 	bl	8011854 <HAL_RTC_WaitForSynchro>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011b5a:	682b      	ldr	r3, [r5, #0]
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011b5c:	2800      	cmp	r0, #0
 8011b5e:	d0ba      	beq.n	8011ad6 <HAL_RTC_SetDate+0x56>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011b60:	22ff      	movs	r2, #255	; 0xff
 8011b62:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011b64:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8011b66:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011b68:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8011b6a:	2601      	movs	r6, #1
 8011b6c:	e7b9      	b.n	8011ae2 <HAL_RTC_SetDate+0x62>
  while(Value >= 10)
 8011b6e:	2400      	movs	r4, #0
 8011b70:	e7e1      	b.n	8011b36 <HAL_RTC_SetDate+0xb6>
 8011b72:	46c0      	nop			; (mov r8, r8)
 8011b74:	00ffff3f 	.word	0x00ffff3f

08011b78 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011b78:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8011b7a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011b7c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011b7e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8011b80:	600a      	str	r2, [r1, #0]
}
 8011b82:	4770      	bx	lr

08011b84 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011b84:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 8011b86:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011b88:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011b8a:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8011b8c:	6808      	ldr	r0, [r1, #0]
}
 8011b8e:	4770      	bx	lr

08011b90 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8011b90:	4770      	bx	lr
 8011b92:	46c0      	nop			; (mov r8, r8)

08011b94 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8011b94:	2239      	movs	r2, #57	; 0x39
 8011b96:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8011b98:	2101      	movs	r1, #1
{
 8011b9a:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 8011b9c:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8011b9e:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8011ba0:	6823      	ldr	r3, [r4, #0]
 8011ba2:	430b      	orrs	r3, r1
 8011ba4:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8011ba6:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8011ba8:	2000      	movs	r0, #0
 8011baa:	bd10      	pop	{r4, pc}

08011bac <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011bac:	4a22      	ldr	r2, [pc, #136]	; (8011c38 <TIM_Base_SetConfig+0x8c>)
{
 8011bae:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 8011bb0:	6803      	ldr	r3, [r0, #0]
 8011bb2:	688d      	ldr	r5, [r1, #8]
 8011bb4:	680c      	ldr	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011bb6:	4290      	cmp	r0, r2
 8011bb8:	d02c      	beq.n	8011c14 <TIM_Base_SetConfig+0x68>
 8011bba:	2280      	movs	r2, #128	; 0x80
 8011bbc:	05d2      	lsls	r2, r2, #23
 8011bbe:	4290      	cmp	r0, r2
 8011bc0:	d012      	beq.n	8011be8 <TIM_Base_SetConfig+0x3c>
 8011bc2:	4a1e      	ldr	r2, [pc, #120]	; (8011c3c <TIM_Base_SetConfig+0x90>)
 8011bc4:	4290      	cmp	r0, r2
 8011bc6:	d00f      	beq.n	8011be8 <TIM_Base_SetConfig+0x3c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011bc8:	4a1d      	ldr	r2, [pc, #116]	; (8011c40 <TIM_Base_SetConfig+0x94>)
 8011bca:	4290      	cmp	r0, r2
 8011bcc:	d02e      	beq.n	8011c2c <TIM_Base_SetConfig+0x80>
 8011bce:	4a1d      	ldr	r2, [pc, #116]	; (8011c44 <TIM_Base_SetConfig+0x98>)
 8011bd0:	4290      	cmp	r0, r2
 8011bd2:	d023      	beq.n	8011c1c <TIM_Base_SetConfig+0x70>
 8011bd4:	4a1c      	ldr	r2, [pc, #112]	; (8011c48 <TIM_Base_SetConfig+0x9c>)
 8011bd6:	4290      	cmp	r0, r2
 8011bd8:	d020      	beq.n	8011c1c <TIM_Base_SetConfig+0x70>
 8011bda:	4a1c      	ldr	r2, [pc, #112]	; (8011c4c <TIM_Base_SetConfig+0xa0>)
 8011bdc:	4290      	cmp	r0, r2
 8011bde:	d01d      	beq.n	8011c1c <TIM_Base_SetConfig+0x70>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8011be0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011be2:	62c5      	str	r5, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011be4:	6284      	str	r4, [r0, #40]	; 0x28
 8011be6:	e012      	b.n	8011c0e <TIM_Base_SetConfig+0x62>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011be8:	2270      	movs	r2, #112	; 0x70
 8011bea:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011bec:	684a      	ldr	r2, [r1, #4]
 8011bee:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011bf0:	4a17      	ldr	r2, [pc, #92]	; (8011c50 <TIM_Base_SetConfig+0xa4>)
 8011bf2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011bf4:	68ca      	ldr	r2, [r1, #12]
 8011bf6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011bf8:	6003      	str	r3, [r0, #0]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011bfa:	4b13      	ldr	r3, [pc, #76]	; (8011c48 <TIM_Base_SetConfig+0x9c>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011bfc:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011bfe:	6284      	str	r4, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011c00:	4298      	cmp	r0, r3
 8011c02:	d002      	beq.n	8011c0a <TIM_Base_SetConfig+0x5e>
 8011c04:	4b11      	ldr	r3, [pc, #68]	; (8011c4c <TIM_Base_SetConfig+0xa0>)
 8011c06:	4298      	cmp	r0, r3
 8011c08:	d101      	bne.n	8011c0e <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011c0a:	690b      	ldr	r3, [r1, #16]
 8011c0c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8011c0e:	2301      	movs	r3, #1
 8011c10:	6143      	str	r3, [r0, #20]
}
 8011c12:	bd30      	pop	{r4, r5, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011c14:	2270      	movs	r2, #112	; 0x70
 8011c16:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011c18:	684a      	ldr	r2, [r1, #4]
 8011c1a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011c1c:	4a0c      	ldr	r2, [pc, #48]	; (8011c50 <TIM_Base_SetConfig+0xa4>)
 8011c1e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011c20:	68ca      	ldr	r2, [r1, #12]
 8011c22:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011c24:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011c26:	62c5      	str	r5, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011c28:	6284      	str	r4, [r0, #40]	; 0x28
 8011c2a:	e7ee      	b.n	8011c0a <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011c2c:	4a08      	ldr	r2, [pc, #32]	; (8011c50 <TIM_Base_SetConfig+0xa4>)
 8011c2e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011c30:	68ca      	ldr	r2, [r1, #12]
 8011c32:	4313      	orrs	r3, r2
 8011c34:	e7d4      	b.n	8011be0 <TIM_Base_SetConfig+0x34>
 8011c36:	46c0      	nop			; (mov r8, r8)
 8011c38:	40012c00 	.word	0x40012c00
 8011c3c:	40000400 	.word	0x40000400
 8011c40:	40002000 	.word	0x40002000
 8011c44:	40014000 	.word	0x40014000
 8011c48:	40014400 	.word	0x40014400
 8011c4c:	40014800 	.word	0x40014800
 8011c50:	fffffcff 	.word	0xfffffcff

08011c54 <HAL_TIM_Base_Init>:
{
 8011c54:	b570      	push	{r4, r5, r6, lr}
 8011c56:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8011c58:	d014      	beq.n	8011c84 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8011c5a:	2339      	movs	r3, #57	; 0x39
 8011c5c:	5cc3      	ldrb	r3, [r0, r3]
 8011c5e:	b2db      	uxtb	r3, r3
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d00a      	beq.n	8011c7a <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8011c64:	2302      	movs	r3, #2
 8011c66:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011c68:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8011c6a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011c6c:	1d21      	adds	r1, r4, #4
 8011c6e:	f7ff ff9d 	bl	8011bac <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8011c72:	2301      	movs	r3, #1
  return HAL_OK;
 8011c74:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8011c76:	5563      	strb	r3, [r4, r5]
}
 8011c78:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8011c7a:	2238      	movs	r2, #56	; 0x38
 8011c7c:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 8011c7e:	f7ff ff87 	bl	8011b90 <HAL_TIM_Base_MspInit>
 8011c82:	e7ef      	b.n	8011c64 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8011c84:	2001      	movs	r0, #1
 8011c86:	e7f7      	b.n	8011c78 <HAL_TIM_Base_Init+0x24>

08011c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8011c88:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8011c8a:	2438      	movs	r4, #56	; 0x38
 8011c8c:	5d03      	ldrb	r3, [r0, r4]
 8011c8e:	2b01      	cmp	r3, #1
 8011c90:	d019      	beq.n	8011cc6 <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 8011c92:	2539      	movs	r5, #57	; 0x39
 8011c94:	2302      	movs	r3, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011c96:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8011c98:	5543      	strb	r3, [r0, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011c9a:	6803      	ldr	r3, [r0, #0]
 8011c9c:	685a      	ldr	r2, [r3, #4]
 8011c9e:	43b2      	bics	r2, r6
 8011ca0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011ca2:	685a      	ldr	r2, [r3, #4]
 8011ca4:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011ca6:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011ca8:	4332      	orrs	r2, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011caa:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011cac:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011cae:	689a      	ldr	r2, [r3, #8]
 8011cb0:	43b2      	bics	r2, r6
 8011cb2:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011cb4:	689a      	ldr	r2, [r3, #8]
 8011cb6:	430a      	orrs	r2, r1
 8011cb8:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8011cba:	2301      	movs	r3, #1
 8011cbc:	5543      	strb	r3, [r0, r5]

  __HAL_UNLOCK(htim);
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	5503      	strb	r3, [r0, r4]

  return HAL_OK;
 8011cc2:	2000      	movs	r0, #0
}
 8011cc4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8011cc6:	2002      	movs	r0, #2
 8011cc8:	e7fc      	b.n	8011cc4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8011cca:	46c0      	nop			; (mov r8, r8)

08011ccc <HAL_UART_MspDeInit>:
 8011ccc:	4770      	bx	lr
 8011cce:	46c0      	nop			; (mov r8, r8)

08011cd0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8011cd0:	b570      	push	{r4, r5, r6, lr}
 8011cd2:	0004      	movs	r4, r0
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8011cd4:	2001      	movs	r0, #1
  if(huart == NULL)
 8011cd6:	2c00      	cmp	r4, #0
 8011cd8:	d012      	beq.n	8011d00 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 8011cda:	2669      	movs	r6, #105	; 0x69
 8011cdc:	2302      	movs	r3, #2

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0;
 8011cde:	2500      	movs	r5, #0
  huart->State = HAL_UART_STATE_BUSY;
 8011ce0:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8011ce2:	6823      	ldr	r3, [r4, #0]
 8011ce4:	681a      	ldr	r2, [r3, #0]
 8011ce6:	4382      	bics	r2, r0
 8011ce8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0;
  huart->Instance->CR3 = 0x0;

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8011cea:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0;
 8011cec:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8011cee:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8011cf0:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8011cf2:	f7ff ffeb 	bl	8011ccc <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8011cf6:	2368      	movs	r3, #104	; 0x68

  return HAL_OK;
 8011cf8:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cfa:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8011cfc:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8011cfe:	54e5      	strb	r5, [r4, r3]
}
 8011d00:	bd70      	pop	{r4, r5, r6, pc}
 8011d02:	46c0      	nop			; (mov r8, r8)

08011d04 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011d04:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011d06:	2069      	movs	r0, #105	; 0x69
{
 8011d08:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011d0a:	5c1c      	ldrb	r4, [r3, r0]
 8011d0c:	2c01      	cmp	r4, #1
 8011d0e:	d003      	beq.n	8011d18 <HAL_UART_Transmit_IT+0x14>
 8011d10:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011d12:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011d14:	2c22      	cmp	r4, #34	; 0x22
 8011d16:	d122      	bne.n	8011d5e <HAL_UART_Transmit_IT+0x5a>
      return HAL_ERROR;
 8011d18:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011d1a:	2900      	cmp	r1, #0
 8011d1c:	d01f      	beq.n	8011d5e <HAL_UART_Transmit_IT+0x5a>
 8011d1e:	2a00      	cmp	r2, #0
 8011d20:	d01d      	beq.n	8011d5e <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 8011d22:	2468      	movs	r4, #104	; 0x68
 8011d24:	5d1d      	ldrb	r5, [r3, r4]
 8011d26:	2d01      	cmp	r5, #1
 8011d28:	d01d      	beq.n	8011d66 <HAL_UART_Transmit_IT+0x62>
 8011d2a:	5518      	strb	r0, [r3, r4]
    huart->pTxBuffPtr = pData;
 8011d2c:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8011d2e:	2150      	movs	r1, #80	; 0x50
 8011d30:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011d32:	3102      	adds	r1, #2
 8011d34:	525a      	strh	r2, [r3, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d36:	2200      	movs	r2, #0
 8011d38:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011d3a:	3269      	adds	r2, #105	; 0x69
 8011d3c:	5c99      	ldrb	r1, [r3, r2]
 8011d3e:	2922      	cmp	r1, #34	; 0x22
 8011d40:	d00e      	beq.n	8011d60 <HAL_UART_Transmit_IT+0x5c>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011d42:	2112      	movs	r1, #18
 8011d44:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011d46:	2001      	movs	r0, #1
 8011d48:	681a      	ldr	r2, [r3, #0]
 8011d4a:	6891      	ldr	r1, [r2, #8]
 8011d4c:	4301      	orrs	r1, r0
 8011d4e:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8011d50:	2000      	movs	r0, #0
 8011d52:	2168      	movs	r1, #104	; 0x68
 8011d54:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8011d56:	6813      	ldr	r3, [r2, #0]
 8011d58:	3118      	adds	r1, #24
 8011d5a:	430b      	orrs	r3, r1
 8011d5c:	6013      	str	r3, [r2, #0]
  }
}
 8011d5e:	bd30      	pop	{r4, r5, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011d60:	3110      	adds	r1, #16
 8011d62:	5499      	strb	r1, [r3, r2]
 8011d64:	e7ef      	b.n	8011d46 <HAL_UART_Transmit_IT+0x42>
    return HAL_BUSY;
 8011d66:	2002      	movs	r0, #2
 8011d68:	e7f9      	b.n	8011d5e <HAL_UART_Transmit_IT+0x5a>
 8011d6a:	46c0      	nop			; (mov r8, r8)

08011d6c <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011d6c:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011d6e:	2069      	movs	r0, #105	; 0x69
{
 8011d70:	b530      	push	{r4, r5, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011d72:	5c1c      	ldrb	r4, [r3, r0]
 8011d74:	2c01      	cmp	r4, #1
 8011d76:	d003      	beq.n	8011d80 <HAL_UART_Receive_IT+0x14>
 8011d78:	5c1c      	ldrb	r4, [r3, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011d7a:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011d7c:	2c12      	cmp	r4, #18
 8011d7e:	d134      	bne.n	8011dea <HAL_UART_Receive_IT+0x7e>
      return HAL_ERROR;
 8011d80:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011d82:	2900      	cmp	r1, #0
 8011d84:	d031      	beq.n	8011dea <HAL_UART_Receive_IT+0x7e>
 8011d86:	2a00      	cmp	r2, #0
 8011d88:	d02f      	beq.n	8011dea <HAL_UART_Receive_IT+0x7e>
    __HAL_LOCK(huart);
 8011d8a:	2468      	movs	r4, #104	; 0x68
 8011d8c:	5d1d      	ldrb	r5, [r3, r4]
 8011d8e:	2d01      	cmp	r5, #1
 8011d90:	d041      	beq.n	8011e16 <HAL_UART_Receive_IT+0xaa>
 8011d92:	5518      	strb	r0, [r3, r4]
    huart->pRxBuffPtr = pData;
 8011d94:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8011d96:	2158      	movs	r1, #88	; 0x58
 8011d98:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8011d9a:	3102      	adds	r1, #2
 8011d9c:	525a      	strh	r2, [r3, r1]
    UART_MASK_COMPUTATION(huart);
 8011d9e:	2180      	movs	r1, #128	; 0x80
 8011da0:	689a      	ldr	r2, [r3, #8]
 8011da2:	0149      	lsls	r1, r1, #5
 8011da4:	428a      	cmp	r2, r1
 8011da6:	d021      	beq.n	8011dec <HAL_UART_Receive_IT+0x80>
 8011da8:	2a00      	cmp	r2, #0
 8011daa:	d129      	bne.n	8011e00 <HAL_UART_Receive_IT+0x94>
 8011dac:	691a      	ldr	r2, [r3, #16]
 8011dae:	2a00      	cmp	r2, #0
 8011db0:	d133      	bne.n	8011e1a <HAL_UART_Receive_IT+0xae>
 8011db2:	225c      	movs	r2, #92	; 0x5c
 8011db4:	21ff      	movs	r1, #255	; 0xff
 8011db6:	5299      	strh	r1, [r3, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011db8:	2200      	movs	r2, #0
 8011dba:	66da      	str	r2, [r3, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8011dbc:	3269      	adds	r2, #105	; 0x69
 8011dbe:	5c99      	ldrb	r1, [r3, r2]
 8011dc0:	2912      	cmp	r1, #18
 8011dc2:	d01a      	beq.n	8011dfa <HAL_UART_Receive_IT+0x8e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011dc4:	2122      	movs	r1, #34	; 0x22
 8011dc6:	5499      	strb	r1, [r3, r2]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011dc8:	2180      	movs	r1, #128	; 0x80
 8011dca:	681a      	ldr	r2, [r3, #0]
 8011dcc:	0049      	lsls	r1, r1, #1
 8011dce:	6810      	ldr	r0, [r2, #0]
 8011dd0:	4301      	orrs	r1, r0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011dd2:	2001      	movs	r0, #1
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011dd4:	6011      	str	r1, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011dd6:	6891      	ldr	r1, [r2, #8]
 8011dd8:	4301      	orrs	r1, r0
 8011dda:	6091      	str	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8011ddc:	2000      	movs	r0, #0
 8011dde:	2168      	movs	r1, #104	; 0x68
 8011de0:	5458      	strb	r0, [r3, r1]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011de2:	6813      	ldr	r3, [r2, #0]
 8011de4:	3948      	subs	r1, #72	; 0x48
 8011de6:	430b      	orrs	r3, r1
 8011de8:	6013      	str	r3, [r2, #0]
  }
}
 8011dea:	bd30      	pop	{r4, r5, pc}
    UART_MASK_COMPUTATION(huart);
 8011dec:	691a      	ldr	r2, [r3, #16]
 8011dee:	2a00      	cmp	r2, #0
 8011df0:	d1df      	bne.n	8011db2 <HAL_UART_Receive_IT+0x46>
 8011df2:	490c      	ldr	r1, [pc, #48]	; (8011e24 <HAL_UART_Receive_IT+0xb8>)
 8011df4:	325c      	adds	r2, #92	; 0x5c
 8011df6:	5299      	strh	r1, [r3, r2]
 8011df8:	e7de      	b.n	8011db8 <HAL_UART_Receive_IT+0x4c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011dfa:	3120      	adds	r1, #32
 8011dfc:	5499      	strb	r1, [r3, r2]
 8011dfe:	e7e3      	b.n	8011dc8 <HAL_UART_Receive_IT+0x5c>
    UART_MASK_COMPUTATION(huart);
 8011e00:	2180      	movs	r1, #128	; 0x80
 8011e02:	0549      	lsls	r1, r1, #21
 8011e04:	428a      	cmp	r2, r1
 8011e06:	d1d7      	bne.n	8011db8 <HAL_UART_Receive_IT+0x4c>
 8011e08:	691a      	ldr	r2, [r3, #16]
 8011e0a:	2a00      	cmp	r2, #0
 8011e0c:	d005      	beq.n	8011e1a <HAL_UART_Receive_IT+0xae>
 8011e0e:	225c      	movs	r2, #92	; 0x5c
 8011e10:	213f      	movs	r1, #63	; 0x3f
 8011e12:	5299      	strh	r1, [r3, r2]
 8011e14:	e7d0      	b.n	8011db8 <HAL_UART_Receive_IT+0x4c>
    return HAL_BUSY;
 8011e16:	2002      	movs	r0, #2
 8011e18:	e7e7      	b.n	8011dea <HAL_UART_Receive_IT+0x7e>
    UART_MASK_COMPUTATION(huart);
 8011e1a:	225c      	movs	r2, #92	; 0x5c
 8011e1c:	217f      	movs	r1, #127	; 0x7f
 8011e1e:	5299      	strh	r1, [r3, r2]
 8011e20:	e7ca      	b.n	8011db8 <HAL_UART_Receive_IT+0x4c>
 8011e22:	46c0      	nop			; (mov r8, r8)
 8011e24:	000001ff 	.word	0x000001ff

08011e28 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011e28:	b570      	push	{r4, r5, r6, lr}
 8011e2a:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011e2c:	2069      	movs	r0, #105	; 0x69
 8011e2e:	5c23      	ldrb	r3, [r4, r0]
 8011e30:	2b01      	cmp	r3, #1
 8011e32:	d003      	beq.n	8011e3c <HAL_UART_Transmit_DMA+0x14>
 8011e34:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011e36:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011e38:	2b22      	cmp	r3, #34	; 0x22
 8011e3a:	d12e      	bne.n	8011e9a <HAL_UART_Transmit_DMA+0x72>
      return HAL_ERROR;
 8011e3c:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011e3e:	2900      	cmp	r1, #0
 8011e40:	d02b      	beq.n	8011e9a <HAL_UART_Transmit_DMA+0x72>
 8011e42:	2a00      	cmp	r2, #0
 8011e44:	d029      	beq.n	8011e9a <HAL_UART_Transmit_DMA+0x72>
    __HAL_LOCK(huart);
 8011e46:	2368      	movs	r3, #104	; 0x68
 8011e48:	5ce5      	ldrb	r5, [r4, r3]
 8011e4a:	2d01      	cmp	r5, #1
 8011e4c:	d029      	beq.n	8011ea2 <HAL_UART_Transmit_DMA+0x7a>
 8011e4e:	54e0      	strb	r0, [r4, r3]
    huart->TxXferSize = Size;
 8011e50:	3b18      	subs	r3, #24
    huart->pTxBuffPtr = pData;
 8011e52:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8011e54:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8011e56:	3302      	adds	r3, #2
 8011e58:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011e5e:	3369      	adds	r3, #105	; 0x69
 8011e60:	5ce0      	ldrb	r0, [r4, r3]
 8011e62:	2822      	cmp	r0, #34	; 0x22
 8011e64:	d01a      	beq.n	8011e9c <HAL_UART_Transmit_DMA+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011e66:	2012      	movs	r0, #18
 8011e68:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011e6a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8011e6c:	4b0e      	ldr	r3, [pc, #56]	; (8011ea8 <HAL_UART_Transmit_DMA+0x80>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8011e6e:	6825      	ldr	r5, [r4, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011e70:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011e72:	4b0e      	ldr	r3, [pc, #56]	; (8011eac <HAL_UART_Transmit_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8011e74:	3528      	adds	r5, #40	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011e76:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011e78:	4b0d      	ldr	r3, [pc, #52]	; (8011eb0 <HAL_UART_Transmit_DMA+0x88>)
 8011e7a:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8011e7c:	0013      	movs	r3, r2
 8011e7e:	002a      	movs	r2, r5
 8011e80:	f7fd ffda 	bl	800fe38 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011e84:	2240      	movs	r2, #64	; 0x40
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8011e86:	2180      	movs	r1, #128	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011e88:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8011e8a:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011e8c:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8011e8e:	689a      	ldr	r2, [r3, #8]
 8011e90:	430a      	orrs	r2, r1
 8011e92:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8011e94:	2368      	movs	r3, #104	; 0x68
 8011e96:	2200      	movs	r2, #0
 8011e98:	54e2      	strb	r2, [r4, r3]
  }
}
 8011e9a:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011e9c:	3010      	adds	r0, #16
 8011e9e:	54e0      	strb	r0, [r4, r3]
 8011ea0:	e7e3      	b.n	8011e6a <HAL_UART_Transmit_DMA+0x42>
    return HAL_BUSY;
 8011ea2:	2002      	movs	r0, #2
 8011ea4:	e7f9      	b.n	8011e9a <HAL_UART_Transmit_DMA+0x72>
 8011ea6:	46c0      	nop			; (mov r8, r8)
 8011ea8:	08011f39 	.word	0x08011f39
 8011eac:	08011f6d 	.word	0x08011f6d
 8011eb0:	08011fc1 	.word	0x08011fc1

08011eb4 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011eb4:	b570      	push	{r4, r5, r6, lr}
 8011eb6:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011eb8:	2069      	movs	r0, #105	; 0x69
 8011eba:	5c25      	ldrb	r5, [r4, r0]
 8011ebc:	2d01      	cmp	r5, #1
 8011ebe:	d003      	beq.n	8011ec8 <HAL_UART_Receive_DMA+0x14>
 8011ec0:	5c23      	ldrb	r3, [r4, r0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011ec2:	3867      	subs	r0, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011ec4:	2b12      	cmp	r3, #18
 8011ec6:	d12b      	bne.n	8011f20 <HAL_UART_Receive_DMA+0x6c>
      return HAL_ERROR;
 8011ec8:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8011eca:	2900      	cmp	r1, #0
 8011ecc:	d028      	beq.n	8011f20 <HAL_UART_Receive_DMA+0x6c>
 8011ece:	2a00      	cmp	r2, #0
 8011ed0:	d026      	beq.n	8011f20 <HAL_UART_Receive_DMA+0x6c>
    __HAL_LOCK(huart);
 8011ed2:	2368      	movs	r3, #104	; 0x68
 8011ed4:	5ce5      	ldrb	r5, [r4, r3]
 8011ed6:	2d01      	cmp	r5, #1
 8011ed8:	d026      	beq.n	8011f28 <HAL_UART_Receive_DMA+0x74>
 8011eda:	54e0      	strb	r0, [r4, r3]
    huart->RxXferSize = Size;
 8011edc:	3b10      	subs	r3, #16
    huart->pRxBuffPtr = pData;
 8011ede:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8011ee0:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8011ee6:	3369      	adds	r3, #105	; 0x69
 8011ee8:	5ce0      	ldrb	r0, [r4, r3]
 8011eea:	2812      	cmp	r0, #18
 8011eec:	d019      	beq.n	8011f22 <HAL_UART_Receive_DMA+0x6e>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011eee:	2022      	movs	r0, #34	; 0x22
 8011ef0:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011ef2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8011ef4:	4b0d      	ldr	r3, [pc, #52]	; (8011f2c <HAL_UART_Receive_DMA+0x78>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8011ef6:	6825      	ldr	r5, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011ef8:	6283      	str	r3, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011efa:	4b0d      	ldr	r3, [pc, #52]	; (8011f30 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8011efc:	3524      	adds	r5, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011efe:	62c3      	str	r3, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011f00:	4b0c      	ldr	r3, [pc, #48]	; (8011f34 <HAL_UART_Receive_DMA+0x80>)
 8011f02:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8011f04:	0013      	movs	r3, r2
 8011f06:	000a      	movs	r2, r1
 8011f08:	0029      	movs	r1, r5
 8011f0a:	f7fd ff95 	bl	800fe38 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8011f0e:	2140      	movs	r1, #64	; 0x40
 8011f10:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8011f12:	2000      	movs	r0, #0
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8011f14:	6893      	ldr	r3, [r2, #8]
 8011f16:	430b      	orrs	r3, r1
 8011f18:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8011f1a:	2368      	movs	r3, #104	; 0x68
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	54e2      	strb	r2, [r4, r3]
  }
}
 8011f20:	bd70      	pop	{r4, r5, r6, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011f22:	3020      	adds	r0, #32
 8011f24:	54e0      	strb	r0, [r4, r3]
 8011f26:	e7e4      	b.n	8011ef2 <HAL_UART_Receive_DMA+0x3e>
    return HAL_BUSY;
 8011f28:	2002      	movs	r0, #2
 8011f2a:	e7f9      	b.n	8011f20 <HAL_UART_Receive_DMA+0x6c>
 8011f2c:	08011f79 	.word	0x08011f79
 8011f30:	08011fb5 	.word	0x08011fb5
 8011f34:	08011fc1 	.word	0x08011fc1

08011f38 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011f38:	6803      	ldr	r3, [r0, #0]
{
 8011f3a:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011f3c:	6819      	ldr	r1, [r3, #0]
 8011f3e:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011f40:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011f42:	400b      	ands	r3, r1
 8011f44:	d10b      	bne.n	8011f5e <UART_DMATransmitCplt+0x26>
  {  
    huart->TxXferCount = 0;
 8011f46:	2152      	movs	r1, #82	; 0x52
 8011f48:	5253      	strh	r3, [r2, r1]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8011f4a:	6813      	ldr	r3, [r2, #0]
 8011f4c:	312e      	adds	r1, #46	; 0x2e
 8011f4e:	689a      	ldr	r2, [r3, #8]
 8011f50:	438a      	bics	r2, r1
 8011f52:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011f54:	681a      	ldr	r2, [r3, #0]
 8011f56:	3940      	subs	r1, #64	; 0x40
 8011f58:	430a      	orrs	r2, r1
 8011f5a:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8011f5c:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8011f5e:	0010      	movs	r0, r2
 8011f60:	f7fa fe36 	bl	800cbd0 <HAL_UART_TxCpltCallback>
}
 8011f64:	e7fa      	b.n	8011f5c <UART_DMATransmitCplt+0x24>
 8011f66:	46c0      	nop			; (mov r8, r8)

08011f68 <HAL_UART_TxHalfCpltCallback>:
 8011f68:	4770      	bx	lr
 8011f6a:	46c0      	nop			; (mov r8, r8)

08011f6c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011f6c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8011f6e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011f70:	f7ff fffa 	bl	8011f68 <HAL_UART_TxHalfCpltCallback>
}
 8011f74:	bd10      	pop	{r4, pc}
 8011f76:	46c0      	nop			; (mov r8, r8)

08011f78 <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011f78:	6803      	ldr	r3, [r0, #0]
{
 8011f7a:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011f7c:	6819      	ldr	r1, [r3, #0]
 8011f7e:	2320      	movs	r3, #32
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011f80:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8011f82:	400b      	ands	r3, r1
 8011f84:	d10c      	bne.n	8011fa0 <UART_DMAReceiveCplt+0x28>
  {
    huart->RxXferCount = 0;
 8011f86:	215a      	movs	r1, #90	; 0x5a

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8011f88:	2040      	movs	r0, #64	; 0x40
    huart->RxXferCount = 0;
 8011f8a:	5253      	strh	r3, [r2, r1]
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8011f8c:	6811      	ldr	r1, [r2, #0]
 8011f8e:	688b      	ldr	r3, [r1, #8]
 8011f90:	4383      	bics	r3, r0
 8011f92:	608b      	str	r3, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011f94:	2369      	movs	r3, #105	; 0x69
 8011f96:	5cd1      	ldrb	r1, [r2, r3]
 8011f98:	2932      	cmp	r1, #50	; 0x32
 8011f9a:	d005      	beq.n	8011fa8 <UART_DMAReceiveCplt+0x30>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8011f9c:	2101      	movs	r1, #1
 8011f9e:	54d1      	strb	r1, [r2, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8011fa0:	0010      	movs	r0, r2
 8011fa2:	f7fa fe51 	bl	800cc48 <HAL_UART_RxCpltCallback>
}
 8011fa6:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011fa8:	3920      	subs	r1, #32
 8011faa:	54d1      	strb	r1, [r2, r3]
 8011fac:	e7f8      	b.n	8011fa0 <UART_DMAReceiveCplt+0x28>
 8011fae:	46c0      	nop			; (mov r8, r8)

08011fb0 <HAL_UART_RxHalfCpltCallback>:
 8011fb0:	4770      	bx	lr
 8011fb2:	46c0      	nop			; (mov r8, r8)

08011fb4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011fb4:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8011fb6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011fb8:	f7ff fffa 	bl	8011fb0 <HAL_UART_RxHalfCpltCallback>
}
 8011fbc:	bd10      	pop	{r4, pc}
 8011fbe:	46c0      	nop			; (mov r8, r8)

08011fc0 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	225a      	movs	r2, #90	; 0x5a
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011fc4:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8011fc6:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 8011fc8:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8011fca:	3a08      	subs	r2, #8
 8011fcc:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8011fce:	3369      	adds	r3, #105	; 0x69
 8011fd0:	3a51      	subs	r2, #81	; 0x51
 8011fd2:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011fd4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8011fd6:	320f      	adds	r2, #15
 8011fd8:	4313      	orrs	r3, r2
 8011fda:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8011fdc:	f7fa fe10 	bl	800cc00 <HAL_UART_ErrorCallback>
}
 8011fe0:	bd10      	pop	{r4, pc}
 8011fe2:	46c0      	nop			; (mov r8, r8)

08011fe4 <UART_SetConfig>:
{
 8011fe4:	b570      	push	{r4, r5, r6, lr}
 8011fe6:	0005      	movs	r5, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8011fe8:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011fea:	69c1      	ldr	r1, [r0, #28]
 8011fec:	6883      	ldr	r3, [r0, #8]
 8011fee:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8011ff0:	6822      	ldr	r2, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011ff2:	4303      	orrs	r3, r0
 8011ff4:	6968      	ldr	r0, [r5, #20]
 8011ff6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8011ff8:	4861      	ldr	r0, [pc, #388]	; (8012180 <UART_SetConfig+0x19c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011ffa:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8011ffc:	4002      	ands	r2, r0
 8011ffe:	4313      	orrs	r3, r2
 8012000:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012002:	6863      	ldr	r3, [r4, #4]
 8012004:	4a5f      	ldr	r2, [pc, #380]	; (8012184 <UART_SetConfig+0x1a0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012006:	6a28      	ldr	r0, [r5, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012008:	4013      	ands	r3, r2
 801200a:	68ea      	ldr	r2, [r5, #12]
 801200c:	4313      	orrs	r3, r2
 801200e:	6063      	str	r3, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012010:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8012012:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012014:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8012016:	485c      	ldr	r0, [pc, #368]	; (8012188 <UART_SetConfig+0x1a4>)
 8012018:	4002      	ands	r2, r0
 801201a:	4313      	orrs	r3, r2
 801201c:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 801201e:	4b5b      	ldr	r3, [pc, #364]	; (801218c <UART_SetConfig+0x1a8>)
 8012020:	429c      	cmp	r4, r3
 8012022:	d044      	beq.n	80120ae <UART_SetConfig+0xca>
 8012024:	4b5a      	ldr	r3, [pc, #360]	; (8012190 <UART_SetConfig+0x1ac>)
 8012026:	429c      	cmp	r4, r3
 8012028:	d018      	beq.n	801205c <UART_SetConfig+0x78>
 801202a:	4b5a      	ldr	r3, [pc, #360]	; (8012194 <UART_SetConfig+0x1b0>)
 801202c:	429c      	cmp	r4, r3
 801202e:	d100      	bne.n	8012032 <UART_SetConfig+0x4e>
 8012030:	e085      	b.n	801213e <UART_SetConfig+0x15a>
 8012032:	4b59      	ldr	r3, [pc, #356]	; (8012198 <UART_SetConfig+0x1b4>)
 8012034:	429c      	cmp	r4, r3
 8012036:	d031      	beq.n	801209c <UART_SetConfig+0xb8>
 8012038:	4b58      	ldr	r3, [pc, #352]	; (801219c <UART_SetConfig+0x1b8>)
 801203a:	429c      	cmp	r4, r3
 801203c:	d02e      	beq.n	801209c <UART_SetConfig+0xb8>
 801203e:	4b58      	ldr	r3, [pc, #352]	; (80121a0 <UART_SetConfig+0x1bc>)
 8012040:	429c      	cmp	r4, r3
 8012042:	d02b      	beq.n	801209c <UART_SetConfig+0xb8>
 8012044:	4b57      	ldr	r3, [pc, #348]	; (80121a4 <UART_SetConfig+0x1c0>)
 8012046:	429c      	cmp	r4, r3
 8012048:	d028      	beq.n	801209c <UART_SetConfig+0xb8>
 801204a:	4b57      	ldr	r3, [pc, #348]	; (80121a8 <UART_SetConfig+0x1c4>)
 801204c:	429c      	cmp	r4, r3
 801204e:	d025      	beq.n	801209c <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012050:	2380      	movs	r3, #128	; 0x80
 8012052:	021b      	lsls	r3, r3, #8
 8012054:	4299      	cmp	r1, r3
 8012056:	d050      	beq.n	80120fa <UART_SetConfig+0x116>
        ret = HAL_ERROR;
 8012058:	2001      	movs	r0, #1
 801205a:	e01c      	b.n	8012096 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801205c:	20c0      	movs	r0, #192	; 0xc0
 801205e:	2280      	movs	r2, #128	; 0x80
 8012060:	4b52      	ldr	r3, [pc, #328]	; (80121ac <UART_SetConfig+0x1c8>)
 8012062:	0280      	lsls	r0, r0, #10
 8012064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012066:	0252      	lsls	r2, r2, #9
 8012068:	4003      	ands	r3, r0
 801206a:	4293      	cmp	r3, r2
 801206c:	d049      	beq.n	8012102 <UART_SetConfig+0x11e>
 801206e:	d913      	bls.n	8012098 <UART_SetConfig+0xb4>
 8012070:	2280      	movs	r2, #128	; 0x80
 8012072:	0292      	lsls	r2, r2, #10
 8012074:	4293      	cmp	r3, r2
 8012076:	d100      	bne.n	801207a <UART_SetConfig+0x96>
 8012078:	e070      	b.n	801215c <UART_SetConfig+0x178>
 801207a:	4283      	cmp	r3, r0
 801207c:	d1e8      	bne.n	8012050 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801207e:	2380      	movs	r3, #128	; 0x80
 8012080:	021b      	lsls	r3, r3, #8
 8012082:	4299      	cmp	r1, r3
 8012084:	d056      	beq.n	8012134 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8012086:	6869      	ldr	r1, [r5, #4]
 8012088:	4849      	ldr	r0, [pc, #292]	; (80121b0 <UART_SetConfig+0x1cc>)
 801208a:	f7ee f861 	bl	8000150 <__udivsi3>
 801208e:	0400      	lsls	r0, r0, #16
 8012090:	0c00      	lsrs	r0, r0, #16
 8012092:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012094:	2000      	movs	r0, #0
}
 8012096:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012098:	2b00      	cmp	r3, #0
 801209a:	d1d9      	bne.n	8012050 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801209c:	2380      	movs	r3, #128	; 0x80
 801209e:	021b      	lsls	r3, r3, #8
 80120a0:	4299      	cmp	r1, r3
 80120a2:	d060      	beq.n	8012166 <UART_SetConfig+0x182>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80120a4:	f7ff fac8 	bl	8011638 <HAL_RCC_GetPCLK1Freq>
 80120a8:	682c      	ldr	r4, [r5, #0]
 80120aa:	6869      	ldr	r1, [r5, #4]
 80120ac:	e7ed      	b.n	801208a <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80120ae:	4b3f      	ldr	r3, [pc, #252]	; (80121ac <UART_SetConfig+0x1c8>)
 80120b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80120b2:	2303      	movs	r3, #3
 80120b4:	4013      	ands	r3, r2
 80120b6:	4a3f      	ldr	r2, [pc, #252]	; (80121b4 <UART_SetConfig+0x1d0>)
 80120b8:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80120ba:	2280      	movs	r2, #128	; 0x80
 80120bc:	0212      	lsls	r2, r2, #8
 80120be:	4291      	cmp	r1, r2
 80120c0:	d00e      	beq.n	80120e0 <UART_SetConfig+0xfc>
    switch (clocksource)
 80120c2:	2b02      	cmp	r3, #2
 80120c4:	d0df      	beq.n	8012086 <UART_SetConfig+0xa2>
 80120c6:	d956      	bls.n	8012176 <UART_SetConfig+0x192>
 80120c8:	2b04      	cmp	r3, #4
 80120ca:	d01e      	beq.n	801210a <UART_SetConfig+0x126>
 80120cc:	2b08      	cmp	r3, #8
 80120ce:	d1c3      	bne.n	8012058 <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80120d0:	2080      	movs	r0, #128	; 0x80
 80120d2:	6869      	ldr	r1, [r5, #4]
 80120d4:	0200      	lsls	r0, r0, #8
 80120d6:	f7ee f83b 	bl	8000150 <__udivsi3>
 80120da:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80120dc:	2000      	movs	r0, #0
        break;
 80120de:	e7da      	b.n	8012096 <UART_SetConfig+0xb2>
    switch (clocksource)
 80120e0:	2b02      	cmp	r3, #2
 80120e2:	d027      	beq.n	8012134 <UART_SetConfig+0x150>
 80120e4:	d907      	bls.n	80120f6 <UART_SetConfig+0x112>
 80120e6:	2b04      	cmp	r3, #4
 80120e8:	d014      	beq.n	8012114 <UART_SetConfig+0x130>
 80120ea:	2b08      	cmp	r3, #8
 80120ec:	d105      	bne.n	80120fa <UART_SetConfig+0x116>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80120ee:	2080      	movs	r0, #128	; 0x80
 80120f0:	6869      	ldr	r1, [r5, #4]
 80120f2:	0240      	lsls	r0, r0, #9
 80120f4:	e020      	b.n	8012138 <UART_SetConfig+0x154>
    switch (clocksource)
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d035      	beq.n	8012166 <UART_SetConfig+0x182>
 80120fa:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 80120fc:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 80120fe:	60e3      	str	r3, [r4, #12]
 8012100:	e7c9      	b.n	8012096 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012102:	2380      	movs	r3, #128	; 0x80
 8012104:	021b      	lsls	r3, r3, #8
 8012106:	4299      	cmp	r1, r3
 8012108:	d004      	beq.n	8012114 <UART_SetConfig+0x130>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801210a:	f7ff fa3b 	bl	8011584 <HAL_RCC_GetSysClockFreq>
 801210e:	682c      	ldr	r4, [r5, #0]
 8012110:	6869      	ldr	r1, [r5, #4]
 8012112:	e7ba      	b.n	801208a <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012114:	f7ff fa36 	bl	8011584 <HAL_RCC_GetSysClockFreq>
 8012118:	6869      	ldr	r1, [r5, #4]
 801211a:	0040      	lsls	r0, r0, #1
 801211c:	f7ee f818 	bl	8000150 <__udivsi3>
 8012120:	682c      	ldr	r4, [r5, #0]
 8012122:	220f      	movs	r2, #15
 8012124:	0703      	lsls	r3, r0, #28
 8012126:	0f5b      	lsrs	r3, r3, #29
 8012128:	4390      	bics	r0, r2
 801212a:	4303      	orrs	r3, r0
 801212c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 801212e:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 8012130:	60e3      	str	r3, [r4, #12]
 8012132:	e7b0      	b.n	8012096 <UART_SetConfig+0xb2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012134:	6869      	ldr	r1, [r5, #4]
 8012136:	4820      	ldr	r0, [pc, #128]	; (80121b8 <UART_SetConfig+0x1d4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012138:	f7ee f80a 	bl	8000150 <__udivsi3>
 801213c:	e7f1      	b.n	8012122 <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801213e:	20c0      	movs	r0, #192	; 0xc0
 8012140:	2280      	movs	r2, #128	; 0x80
 8012142:	4b1a      	ldr	r3, [pc, #104]	; (80121ac <UART_SetConfig+0x1c8>)
 8012144:	0300      	lsls	r0, r0, #12
 8012146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012148:	02d2      	lsls	r2, r2, #11
 801214a:	4003      	ands	r3, r0
 801214c:	4293      	cmp	r3, r2
 801214e:	d0d8      	beq.n	8012102 <UART_SetConfig+0x11e>
 8012150:	d9a2      	bls.n	8012098 <UART_SetConfig+0xb4>
 8012152:	2280      	movs	r2, #128	; 0x80
 8012154:	0312      	lsls	r2, r2, #12
 8012156:	4293      	cmp	r3, r2
 8012158:	d000      	beq.n	801215c <UART_SetConfig+0x178>
 801215a:	e78e      	b.n	801207a <UART_SetConfig+0x96>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801215c:	2380      	movs	r3, #128	; 0x80
 801215e:	021b      	lsls	r3, r3, #8
 8012160:	4299      	cmp	r1, r3
 8012162:	d1b5      	bne.n	80120d0 <UART_SetConfig+0xec>
 8012164:	e7c3      	b.n	80120ee <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012166:	f7ff fa67 	bl	8011638 <HAL_RCC_GetPCLK1Freq>
 801216a:	6869      	ldr	r1, [r5, #4]
 801216c:	0040      	lsls	r0, r0, #1
 801216e:	f7ed ffef 	bl	8000150 <__udivsi3>
 8012172:	682c      	ldr	r4, [r5, #0]
 8012174:	e7d5      	b.n	8012122 <UART_SetConfig+0x13e>
    switch (clocksource)
 8012176:	2b00      	cmp	r3, #0
 8012178:	d094      	beq.n	80120a4 <UART_SetConfig+0xc0>
        ret = HAL_ERROR;
 801217a:	2001      	movs	r0, #1
 801217c:	e78b      	b.n	8012096 <UART_SetConfig+0xb2>
 801217e:	46c0      	nop			; (mov r8, r8)
 8012180:	efff69f3 	.word	0xefff69f3
 8012184:	ffffcfff 	.word	0xffffcfff
 8012188:	fffff4ff 	.word	0xfffff4ff
 801218c:	40013800 	.word	0x40013800
 8012190:	40004400 	.word	0x40004400
 8012194:	40004800 	.word	0x40004800
 8012198:	40004c00 	.word	0x40004c00
 801219c:	40005000 	.word	0x40005000
 80121a0:	40011400 	.word	0x40011400
 80121a4:	40011800 	.word	0x40011800
 80121a8:	40011c00 	.word	0x40011c00
 80121ac:	40021000 	.word	0x40021000
 80121b0:	007a1200 	.word	0x007a1200
 80121b4:	08017b3c 	.word	0x08017b3c
 80121b8:	00f42400 	.word	0x00f42400

080121bc <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80121bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80121be:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80121c0:	07da      	lsls	r2, r3, #31
 80121c2:	d506      	bpl.n	80121d2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80121c4:	6801      	ldr	r1, [r0, #0]
 80121c6:	4c28      	ldr	r4, [pc, #160]	; (8012268 <UART_AdvFeatureConfig+0xac>)
 80121c8:	684a      	ldr	r2, [r1, #4]
 80121ca:	4022      	ands	r2, r4
 80121cc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80121ce:	4322      	orrs	r2, r4
 80121d0:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80121d2:	079a      	lsls	r2, r3, #30
 80121d4:	d506      	bpl.n	80121e4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80121d6:	6801      	ldr	r1, [r0, #0]
 80121d8:	4c24      	ldr	r4, [pc, #144]	; (801226c <UART_AdvFeatureConfig+0xb0>)
 80121da:	684a      	ldr	r2, [r1, #4]
 80121dc:	4022      	ands	r2, r4
 80121de:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80121e0:	4322      	orrs	r2, r4
 80121e2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80121e4:	075a      	lsls	r2, r3, #29
 80121e6:	d506      	bpl.n	80121f6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80121e8:	6801      	ldr	r1, [r0, #0]
 80121ea:	4c21      	ldr	r4, [pc, #132]	; (8012270 <UART_AdvFeatureConfig+0xb4>)
 80121ec:	684a      	ldr	r2, [r1, #4]
 80121ee:	4022      	ands	r2, r4
 80121f0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80121f2:	4322      	orrs	r2, r4
 80121f4:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80121f6:	071a      	lsls	r2, r3, #28
 80121f8:	d506      	bpl.n	8012208 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80121fa:	6801      	ldr	r1, [r0, #0]
 80121fc:	4c1d      	ldr	r4, [pc, #116]	; (8012274 <UART_AdvFeatureConfig+0xb8>)
 80121fe:	684a      	ldr	r2, [r1, #4]
 8012200:	4022      	ands	r2, r4
 8012202:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8012204:	4322      	orrs	r2, r4
 8012206:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012208:	06da      	lsls	r2, r3, #27
 801220a:	d506      	bpl.n	801221a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801220c:	6801      	ldr	r1, [r0, #0]
 801220e:	4c1a      	ldr	r4, [pc, #104]	; (8012278 <UART_AdvFeatureConfig+0xbc>)
 8012210:	688a      	ldr	r2, [r1, #8]
 8012212:	4022      	ands	r2, r4
 8012214:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8012216:	4322      	orrs	r2, r4
 8012218:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801221a:	069a      	lsls	r2, r3, #26
 801221c:	d506      	bpl.n	801222c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801221e:	6801      	ldr	r1, [r0, #0]
 8012220:	4c16      	ldr	r4, [pc, #88]	; (801227c <UART_AdvFeatureConfig+0xc0>)
 8012222:	688a      	ldr	r2, [r1, #8]
 8012224:	4022      	ands	r2, r4
 8012226:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8012228:	4322      	orrs	r2, r4
 801222a:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801222c:	065a      	lsls	r2, r3, #25
 801222e:	d50a      	bpl.n	8012246 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012230:	6801      	ldr	r1, [r0, #0]
 8012232:	4d13      	ldr	r5, [pc, #76]	; (8012280 <UART_AdvFeatureConfig+0xc4>)
 8012234:	684a      	ldr	r2, [r1, #4]
 8012236:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8012238:	402a      	ands	r2, r5
 801223a:	4322      	orrs	r2, r4
 801223c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801223e:	2280      	movs	r2, #128	; 0x80
 8012240:	0352      	lsls	r2, r2, #13
 8012242:	4294      	cmp	r4, r2
 8012244:	d009      	beq.n	801225a <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012246:	061b      	lsls	r3, r3, #24
 8012248:	d506      	bpl.n	8012258 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801224a:	6802      	ldr	r2, [r0, #0]
 801224c:	490d      	ldr	r1, [pc, #52]	; (8012284 <UART_AdvFeatureConfig+0xc8>)
 801224e:	6853      	ldr	r3, [r2, #4]
 8012250:	400b      	ands	r3, r1
 8012252:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8012254:	430b      	orrs	r3, r1
 8012256:	6053      	str	r3, [r2, #4]
}
 8012258:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801225a:	684a      	ldr	r2, [r1, #4]
 801225c:	4c0a      	ldr	r4, [pc, #40]	; (8012288 <UART_AdvFeatureConfig+0xcc>)
 801225e:	4022      	ands	r2, r4
 8012260:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8012262:	4322      	orrs	r2, r4
 8012264:	604a      	str	r2, [r1, #4]
 8012266:	e7ee      	b.n	8012246 <UART_AdvFeatureConfig+0x8a>
 8012268:	fffdffff 	.word	0xfffdffff
 801226c:	fffeffff 	.word	0xfffeffff
 8012270:	fffbffff 	.word	0xfffbffff
 8012274:	ffff7fff 	.word	0xffff7fff
 8012278:	ffffefff 	.word	0xffffefff
 801227c:	ffffdfff 	.word	0xffffdfff
 8012280:	ffefffff 	.word	0xffefffff
 8012284:	fff7ffff 	.word	0xfff7ffff
 8012288:	ff9fffff 	.word	0xff9fffff

0801228c <UART_WaitOnFlagUntilTimeout>:
{
 801228c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801228e:	46c6      	mov	lr, r8
 8012290:	4690      	mov	r8, r2
 8012292:	b500      	push	{lr}
 8012294:	001d      	movs	r5, r3
 8012296:	0006      	movs	r6, r0
 8012298:	000c      	movs	r4, r1
  uint32_t tickstart = HAL_GetTick();
 801229a:	f7fd f951 	bl	800f540 <HAL_GetTick>
  if(Status == RESET)
 801229e:	4643      	mov	r3, r8
  uint32_t tickstart = HAL_GetTick();
 80122a0:	0007      	movs	r7, r0
  if(Status == RESET)
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d112      	bne.n	80122cc <UART_WaitOnFlagUntilTimeout+0x40>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80122a6:	6832      	ldr	r2, [r6, #0]
 80122a8:	e001      	b.n	80122ae <UART_WaitOnFlagUntilTimeout+0x22>
      if(Timeout != HAL_MAX_DELAY)
 80122aa:	1c6b      	adds	r3, r5, #1
 80122ac:	d117      	bne.n	80122de <UART_WaitOnFlagUntilTimeout+0x52>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80122ae:	69d3      	ldr	r3, [r2, #28]
 80122b0:	4023      	ands	r3, r4
 80122b2:	42a3      	cmp	r3, r4
 80122b4:	d1f9      	bne.n	80122aa <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80122b6:	2000      	movs	r0, #0
}
 80122b8:	bc04      	pop	{r2}
 80122ba:	4690      	mov	r8, r2
 80122bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80122be:	2d00      	cmp	r5, #0
 80122c0:	d015      	beq.n	80122ee <UART_WaitOnFlagUntilTimeout+0x62>
 80122c2:	f7fd f93d 	bl	800f540 <HAL_GetTick>
 80122c6:	1bc0      	subs	r0, r0, r7
 80122c8:	42a8      	cmp	r0, r5
 80122ca:	d80f      	bhi.n	80122ec <UART_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80122cc:	6832      	ldr	r2, [r6, #0]
 80122ce:	e001      	b.n	80122d4 <UART_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 80122d0:	1c6b      	adds	r3, r5, #1
 80122d2:	d1f4      	bne.n	80122be <UART_WaitOnFlagUntilTimeout+0x32>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80122d4:	69d3      	ldr	r3, [r2, #28]
 80122d6:	4023      	ands	r3, r4
 80122d8:	42a3      	cmp	r3, r4
 80122da:	d0f9      	beq.n	80122d0 <UART_WaitOnFlagUntilTimeout+0x44>
 80122dc:	e7eb      	b.n	80122b6 <UART_WaitOnFlagUntilTimeout+0x2a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80122de:	2d00      	cmp	r5, #0
 80122e0:	d005      	beq.n	80122ee <UART_WaitOnFlagUntilTimeout+0x62>
 80122e2:	f7fd f92d 	bl	800f540 <HAL_GetTick>
 80122e6:	1bc0      	subs	r0, r0, r7
 80122e8:	42a8      	cmp	r0, r5
 80122ea:	d9dc      	bls.n	80122a6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80122ec:	6832      	ldr	r2, [r6, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80122ee:	2180      	movs	r1, #128	; 0x80
 80122f0:	6813      	ldr	r3, [r2, #0]
          return HAL_TIMEOUT;
 80122f2:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80122f4:	438b      	bics	r3, r1
 80122f6:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80122f8:	6813      	ldr	r3, [r2, #0]
 80122fa:	3960      	subs	r1, #96	; 0x60
 80122fc:	438b      	bics	r3, r1
 80122fe:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012300:	6813      	ldr	r3, [r2, #0]
 8012302:	4907      	ldr	r1, [pc, #28]	; (8012320 <UART_WaitOnFlagUntilTimeout+0x94>)
 8012304:	400b      	ands	r3, r1
 8012306:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012308:	6893      	ldr	r3, [r2, #8]
 801230a:	3103      	adds	r1, #3
 801230c:	31ff      	adds	r1, #255	; 0xff
 801230e:	438b      	bics	r3, r1
 8012310:	6093      	str	r3, [r2, #8]
          huart->State = HAL_UART_STATE_READY;
 8012312:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 8012314:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 8012316:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 8012318:	3b01      	subs	r3, #1
 801231a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801231c:	e7cc      	b.n	80122b8 <UART_WaitOnFlagUntilTimeout+0x2c>
 801231e:	46c0      	nop			; (mov r8, r8)
 8012320:	fffffeff 	.word	0xfffffeff

08012324 <HAL_UART_Transmit>:
{
 8012324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012326:	46c6      	mov	lr, r8
 8012328:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801232a:	2369      	movs	r3, #105	; 0x69
{
 801232c:	b500      	push	{lr}
 801232e:	000d      	movs	r5, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012330:	5cc1      	ldrb	r1, [r0, r3]
{
 8012332:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012334:	2901      	cmp	r1, #1
 8012336:	d003      	beq.n	8012340 <HAL_UART_Transmit+0x1c>
 8012338:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 801233a:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801233c:	2b22      	cmp	r3, #34	; 0x22
 801233e:	d147      	bne.n	80123d0 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8012340:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012342:	2d00      	cmp	r5, #0
 8012344:	d044      	beq.n	80123d0 <HAL_UART_Transmit+0xac>
 8012346:	2a00      	cmp	r2, #0
 8012348:	d042      	beq.n	80123d0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 801234a:	2368      	movs	r3, #104	; 0x68
 801234c:	5ce1      	ldrb	r1, [r4, r3]
 801234e:	2901      	cmp	r1, #1
 8012350:	d046      	beq.n	80123e0 <HAL_UART_Transmit+0xbc>
 8012352:	54e0      	strb	r0, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012354:	2300      	movs	r3, #0
 8012356:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012358:	3369      	adds	r3, #105	; 0x69
 801235a:	5ce1      	ldrb	r1, [r4, r3]
 801235c:	2922      	cmp	r1, #34	; 0x22
 801235e:	d03a      	beq.n	80123d6 <HAL_UART_Transmit+0xb2>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012360:	2112      	movs	r1, #18
 8012362:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8012364:	2350      	movs	r3, #80	; 0x50
 8012366:	52e2      	strh	r2, [r4, r3]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012368:	2380      	movs	r3, #128	; 0x80
 801236a:	015b      	lsls	r3, r3, #5
      huart->TxXferCount--;
 801236c:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801236e:	4698      	mov	r8, r3
 8012370:	e005      	b.n	801237e <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8012372:	782a      	ldrb	r2, [r5, #0]
 8012374:	3501      	adds	r5, #1
 8012376:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8012378:	5ba2      	ldrh	r2, [r4, r6]
 801237a:	2a00      	cmp	r2, #0
 801237c:	d018      	beq.n	80123b0 <HAL_UART_Transmit+0x8c>
      huart->TxXferCount--;
 801237e:	3a01      	subs	r2, #1
 8012380:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8012382:	003b      	movs	r3, r7
 8012384:	2200      	movs	r2, #0
 8012386:	2180      	movs	r1, #128	; 0x80
 8012388:	0020      	movs	r0, r4
 801238a:	f7ff ff7f 	bl	801228c <UART_WaitOnFlagUntilTimeout>
 801238e:	2800      	cmp	r0, #0
 8012390:	d124      	bne.n	80123dc <HAL_UART_Transmit+0xb8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012392:	68a2      	ldr	r2, [r4, #8]
 8012394:	6823      	ldr	r3, [r4, #0]
 8012396:	4542      	cmp	r2, r8
 8012398:	d1eb      	bne.n	8012372 <HAL_UART_Transmit+0x4e>
 801239a:	6922      	ldr	r2, [r4, #16]
 801239c:	2a00      	cmp	r2, #0
 801239e:	d1e8      	bne.n	8012372 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80123a0:	882a      	ldrh	r2, [r5, #0]
        pData += 2;
 80123a2:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80123a4:	05d2      	lsls	r2, r2, #23
 80123a6:	0dd2      	lsrs	r2, r2, #23
 80123a8:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 80123aa:	5ba2      	ldrh	r2, [r4, r6]
 80123ac:	2a00      	cmp	r2, #0
 80123ae:	d1e6      	bne.n	801237e <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80123b0:	003b      	movs	r3, r7
 80123b2:	2140      	movs	r1, #64	; 0x40
 80123b4:	0020      	movs	r0, r4
 80123b6:	f7ff ff69 	bl	801228c <UART_WaitOnFlagUntilTimeout>
 80123ba:	2800      	cmp	r0, #0
 80123bc:	d10e      	bne.n	80123dc <HAL_UART_Transmit+0xb8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80123be:	2369      	movs	r3, #105	; 0x69
 80123c0:	5ce2      	ldrb	r2, [r4, r3]
 80123c2:	2a32      	cmp	r2, #50	; 0x32
 80123c4:	d00e      	beq.n	80123e4 <HAL_UART_Transmit+0xc0>
      huart->State = HAL_UART_STATE_READY;
 80123c6:	2201      	movs	r2, #1
 80123c8:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 80123ca:	2368      	movs	r3, #104	; 0x68
 80123cc:	2200      	movs	r2, #0
 80123ce:	54e2      	strb	r2, [r4, r3]
}
 80123d0:	bc04      	pop	{r2}
 80123d2:	4690      	mov	r8, r2
 80123d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80123d6:	3110      	adds	r1, #16
 80123d8:	54e1      	strb	r1, [r4, r3]
 80123da:	e7c3      	b.n	8012364 <HAL_UART_Transmit+0x40>
        return HAL_TIMEOUT;
 80123dc:	2003      	movs	r0, #3
 80123de:	e7f7      	b.n	80123d0 <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 80123e0:	2002      	movs	r0, #2
 80123e2:	e7f5      	b.n	80123d0 <HAL_UART_Transmit+0xac>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80123e4:	3a10      	subs	r2, #16
 80123e6:	54e2      	strb	r2, [r4, r3]
 80123e8:	e7ef      	b.n	80123ca <HAL_UART_Transmit+0xa6>
 80123ea:	46c0      	nop			; (mov r8, r8)

080123ec <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123ec:	2300      	movs	r3, #0
{
 80123ee:	b510      	push	{r4, lr}
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80123f0:	4a1a      	ldr	r2, [pc, #104]	; (801245c <UART_CheckIdleState+0x70>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123f2:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80123f4:	6803      	ldr	r3, [r0, #0]
{
 80123f6:	0004      	movs	r4, r0
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80123f8:	4293      	cmp	r3, r2
 80123fa:	d00d      	beq.n	8012418 <UART_CheckIdleState+0x2c>
 80123fc:	4a18      	ldr	r2, [pc, #96]	; (8012460 <UART_CheckIdleState+0x74>)
 80123fe:	4293      	cmp	r3, r2
 8012400:	d00a      	beq.n	8012418 <UART_CheckIdleState+0x2c>
 8012402:	4a18      	ldr	r2, [pc, #96]	; (8012464 <UART_CheckIdleState+0x78>)
 8012404:	4293      	cmp	r3, r2
 8012406:	d007      	beq.n	8012418 <UART_CheckIdleState+0x2c>
  huart->State= HAL_UART_STATE_READY;
 8012408:	2369      	movs	r3, #105	; 0x69
 801240a:	2201      	movs	r2, #1
 801240c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 801240e:	2200      	movs	r2, #0
  return HAL_OK;
 8012410:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8012412:	3b01      	subs	r3, #1
 8012414:	54e2      	strb	r2, [r4, r3]
}
 8012416:	bd10      	pop	{r4, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012418:	681a      	ldr	r2, [r3, #0]
 801241a:	0712      	lsls	r2, r2, #28
 801241c:	d40e      	bmi.n	801243c <UART_CheckIdleState+0x50>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	075b      	lsls	r3, r3, #29
 8012422:	d5f1      	bpl.n	8012408 <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012424:	23fa      	movs	r3, #250	; 0xfa
 8012426:	2180      	movs	r1, #128	; 0x80
 8012428:	009b      	lsls	r3, r3, #2
 801242a:	2200      	movs	r2, #0
 801242c:	03c9      	lsls	r1, r1, #15
 801242e:	0020      	movs	r0, r4
 8012430:	f7ff ff2c 	bl	801228c <UART_WaitOnFlagUntilTimeout>
 8012434:	2800      	cmp	r0, #0
 8012436:	d0e7      	beq.n	8012408 <UART_CheckIdleState+0x1c>
        return HAL_TIMEOUT;
 8012438:	2003      	movs	r0, #3
 801243a:	e7ec      	b.n	8012416 <UART_CheckIdleState+0x2a>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801243c:	23fa      	movs	r3, #250	; 0xfa
 801243e:	2180      	movs	r1, #128	; 0x80
 8012440:	009b      	lsls	r3, r3, #2
 8012442:	2200      	movs	r2, #0
 8012444:	0389      	lsls	r1, r1, #14
 8012446:	0020      	movs	r0, r4
 8012448:	f7ff ff20 	bl	801228c <UART_WaitOnFlagUntilTimeout>
 801244c:	2800      	cmp	r0, #0
 801244e:	d1f3      	bne.n	8012438 <UART_CheckIdleState+0x4c>
 8012450:	6823      	ldr	r3, [r4, #0]
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	075b      	lsls	r3, r3, #29
 8012456:	d5d7      	bpl.n	8012408 <UART_CheckIdleState+0x1c>
 8012458:	e7e4      	b.n	8012424 <UART_CheckIdleState+0x38>
 801245a:	46c0      	nop			; (mov r8, r8)
 801245c:	40013800 	.word	0x40013800
 8012460:	40004400 	.word	0x40004400
 8012464:	40004800 	.word	0x40004800

08012468 <HAL_UART_Init>:
{
 8012468:	b510      	push	{r4, lr}
 801246a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 801246c:	d02a      	beq.n	80124c4 <HAL_UART_Init+0x5c>
  if(huart->State == HAL_UART_STATE_RESET)
 801246e:	2369      	movs	r3, #105	; 0x69
 8012470:	5cc3      	ldrb	r3, [r0, r3]
 8012472:	b2db      	uxtb	r3, r3
 8012474:	2b00      	cmp	r3, #0
 8012476:	d020      	beq.n	80124ba <HAL_UART_Init+0x52>
  huart->State = HAL_UART_STATE_BUSY;
 8012478:	2369      	movs	r3, #105	; 0x69
 801247a:	2202      	movs	r2, #2
  __HAL_UART_DISABLE(huart);
 801247c:	2101      	movs	r1, #1
  huart->State = HAL_UART_STATE_BUSY;
 801247e:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8012480:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012482:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8012484:	6813      	ldr	r3, [r2, #0]
 8012486:	438b      	bics	r3, r1
 8012488:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801248a:	f7ff fdab 	bl	8011fe4 <UART_SetConfig>
 801248e:	2801      	cmp	r0, #1
 8012490:	d018      	beq.n	80124c4 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012494:	2b00      	cmp	r3, #0
 8012496:	d117      	bne.n	80124c8 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012498:	6823      	ldr	r3, [r4, #0]
 801249a:	490d      	ldr	r1, [pc, #52]	; (80124d0 <HAL_UART_Init+0x68>)
 801249c:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 801249e:	0020      	movs	r0, r4
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80124a0:	400a      	ands	r2, r1
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80124a2:	212a      	movs	r1, #42	; 0x2a
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80124a4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80124a6:	689a      	ldr	r2, [r3, #8]
 80124a8:	438a      	bics	r2, r1
 80124aa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80124ac:	681a      	ldr	r2, [r3, #0]
 80124ae:	3929      	subs	r1, #41	; 0x29
 80124b0:	430a      	orrs	r2, r1
 80124b2:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80124b4:	f7ff ff9a 	bl	80123ec <UART_CheckIdleState>
}
 80124b8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80124ba:	2268      	movs	r2, #104	; 0x68
 80124bc:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 80124be:	f7fa fe65 	bl	800d18c <HAL_UART_MspInit>
 80124c2:	e7d9      	b.n	8012478 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 80124c4:	2001      	movs	r0, #1
 80124c6:	e7f7      	b.n	80124b8 <HAL_UART_Init+0x50>
    UART_AdvFeatureConfig(huart);
 80124c8:	0020      	movs	r0, r4
 80124ca:	f7ff fe77 	bl	80121bc <UART_AdvFeatureConfig>
 80124ce:	e7e3      	b.n	8012498 <HAL_UART_Init+0x30>
 80124d0:	ffffb7ff 	.word	0xffffb7ff

080124d4 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80124d4:	2269      	movs	r2, #105	; 0x69
{
 80124d6:	b530      	push	{r4, r5, lr}
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80124d8:	5c81      	ldrb	r1, [r0, r2]
{
 80124da:	0003      	movs	r3, r0
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80124dc:	2912      	cmp	r1, #18
 80124de:	d003      	beq.n	80124e8 <UART_Transmit_IT+0x14>
 80124e0:	5c82      	ldrb	r2, [r0, r2]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80124e2:	2002      	movs	r0, #2
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80124e4:	2a32      	cmp	r2, #50	; 0x32
 80124e6:	d112      	bne.n	801250e <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 80124e8:	2252      	movs	r2, #82	; 0x52
 80124ea:	5a9a      	ldrh	r2, [r3, r2]
 80124ec:	6819      	ldr	r1, [r3, #0]
 80124ee:	2a00      	cmp	r2, #0
 80124f0:	d00e      	beq.n	8012510 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80124f2:	2480      	movs	r4, #128	; 0x80
 80124f4:	689d      	ldr	r5, [r3, #8]
 80124f6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80124f8:	0164      	lsls	r4, r4, #5
 80124fa:	42a5      	cmp	r5, r4
 80124fc:	d012      	beq.n	8012524 <UART_Transmit_IT+0x50>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80124fe:	1c44      	adds	r4, r0, #1
 8012500:	64dc      	str	r4, [r3, #76]	; 0x4c
 8012502:	7800      	ldrb	r0, [r0, #0]
 8012504:	8508      	strh	r0, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8012506:	2152      	movs	r1, #82	; 0x52
      return HAL_OK;
 8012508:	2000      	movs	r0, #0
      huart->TxXferCount--;
 801250a:	3a01      	subs	r2, #1
 801250c:	525a      	strh	r2, [r3, r1]
  }
}
 801250e:	bd30      	pop	{r4, r5, pc}
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012510:	680b      	ldr	r3, [r1, #0]
 8012512:	3280      	adds	r2, #128	; 0x80
 8012514:	4393      	bics	r3, r2
 8012516:	600b      	str	r3, [r1, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012518:	680b      	ldr	r3, [r1, #0]
 801251a:	3a40      	subs	r2, #64	; 0x40
 801251c:	4313      	orrs	r3, r2
 801251e:	600b      	str	r3, [r1, #0]
      return HAL_OK;
 8012520:	2000      	movs	r0, #0
 8012522:	e7f4      	b.n	801250e <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012524:	691c      	ldr	r4, [r3, #16]
 8012526:	2c00      	cmp	r4, #0
 8012528:	d1e9      	bne.n	80124fe <UART_Transmit_IT+0x2a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 801252a:	8804      	ldrh	r4, [r0, #0]
        huart->pTxBuffPtr += 2;
 801252c:	3002      	adds	r0, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 801252e:	05e4      	lsls	r4, r4, #23
 8012530:	0de4      	lsrs	r4, r4, #23
 8012532:	850c      	strh	r4, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8012534:	64d8      	str	r0, [r3, #76]	; 0x4c
 8012536:	e7e6      	b.n	8012506 <UART_Transmit_IT+0x32>

08012538 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012538:	2140      	movs	r1, #64	; 0x40
 801253a:	6803      	ldr	r3, [r0, #0]
{
 801253c:	b510      	push	{r4, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	438a      	bics	r2, r1
 8012542:	601a      	str	r2, [r3, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012544:	2269      	movs	r2, #105	; 0x69
 8012546:	5c81      	ldrb	r1, [r0, r2]
 8012548:	2932      	cmp	r1, #50	; 0x32
 801254a:	d008      	beq.n	801255e <UART_EndTransmit_IT+0x26>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801254c:	2401      	movs	r4, #1
 801254e:	6899      	ldr	r1, [r3, #8]
 8012550:	43a1      	bics	r1, r4
 8012552:	6099      	str	r1, [r3, #8]

    huart->State = HAL_UART_STATE_READY;
 8012554:	5484      	strb	r4, [r0, r2]
  }

  HAL_UART_TxCpltCallback(huart);
 8012556:	f7fa fb3b 	bl	800cbd0 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 801255a:	2000      	movs	r0, #0
 801255c:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 801255e:	2322      	movs	r3, #34	; 0x22
 8012560:	5483      	strb	r3, [r0, r2]
 8012562:	e7f8      	b.n	8012556 <UART_EndTransmit_IT+0x1e>

08012564 <UART_Receive_IT>:
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012564:	2369      	movs	r3, #105	; 0x69
{
 8012566:	b570      	push	{r4, r5, r6, lr}
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012568:	5cc2      	ldrb	r2, [r0, r3]
 801256a:	2a22      	cmp	r2, #34	; 0x22
 801256c:	d003      	beq.n	8012576 <UART_Receive_IT+0x12>
 801256e:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012570:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012572:	2b32      	cmp	r3, #50	; 0x32
 8012574:	d12b      	bne.n	80125ce <UART_Receive_IT+0x6a>
  uint16_t uhMask = huart->Mask;
 8012576:	235c      	movs	r3, #92	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012578:	2180      	movs	r1, #128	; 0x80
 801257a:	6885      	ldr	r5, [r0, #8]
  uint16_t uhMask = huart->Mask;
 801257c:	5ac3      	ldrh	r3, [r0, r3]
 801257e:	6804      	ldr	r4, [r0, #0]
 8012580:	6d42      	ldr	r2, [r0, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012582:	0149      	lsls	r1, r1, #5
 8012584:	428d      	cmp	r5, r1
 8012586:	d024      	beq.n	80125d2 <UART_Receive_IT+0x6e>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012588:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801258a:	1c54      	adds	r4, r2, #1
 801258c:	400b      	ands	r3, r1
 801258e:	6544      	str	r4, [r0, #84]	; 0x54
 8012590:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8012592:	225a      	movs	r2, #90	; 0x5a
 8012594:	5a83      	ldrh	r3, [r0, r2]
 8012596:	3b01      	subs	r3, #1
 8012598:	b29b      	uxth	r3, r3
 801259a:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 801259c:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d115      	bne.n	80125ce <UART_Receive_IT+0x6a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80125a2:	2120      	movs	r1, #32
 80125a4:	6803      	ldr	r3, [r0, #0]
 80125a6:	681a      	ldr	r2, [r3, #0]
 80125a8:	438a      	bics	r2, r1
 80125aa:	601a      	str	r2, [r3, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80125ac:	2269      	movs	r2, #105	; 0x69
 80125ae:	5c81      	ldrb	r1, [r0, r2]
 80125b0:	2932      	cmp	r1, #50	; 0x32
 80125b2:	d017      	beq.n	80125e4 <UART_Receive_IT+0x80>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80125b4:	6819      	ldr	r1, [r3, #0]
 80125b6:	4c0d      	ldr	r4, [pc, #52]	; (80125ec <UART_Receive_IT+0x88>)
 80125b8:	4021      	ands	r1, r4
 80125ba:	6019      	str	r1, [r3, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80125bc:	6899      	ldr	r1, [r3, #8]
 80125be:	3403      	adds	r4, #3
 80125c0:	34ff      	adds	r4, #255	; 0xff
 80125c2:	43a1      	bics	r1, r4
 80125c4:	6099      	str	r1, [r3, #8]
        huart->State = HAL_UART_STATE_READY;
 80125c6:	5484      	strb	r4, [r0, r2]
      HAL_UART_RxCpltCallback(huart);
 80125c8:	f7fa fb3e 	bl	800cc48 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80125cc:	2200      	movs	r2, #0
  }
}
 80125ce:	0010      	movs	r0, r2
 80125d0:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80125d2:	6901      	ldr	r1, [r0, #16]
 80125d4:	2900      	cmp	r1, #0
 80125d6:	d1d7      	bne.n	8012588 <UART_Receive_IT+0x24>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80125d8:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80125da:	400b      	ands	r3, r1
 80125dc:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 80125de:	3202      	adds	r2, #2
 80125e0:	6542      	str	r2, [r0, #84]	; 0x54
 80125e2:	e7d6      	b.n	8012592 <UART_Receive_IT+0x2e>
        huart->State = HAL_UART_STATE_BUSY_TX;
 80125e4:	2312      	movs	r3, #18
 80125e6:	5483      	strb	r3, [r0, r2]
 80125e8:	e7ee      	b.n	80125c8 <UART_Receive_IT+0x64>
 80125ea:	46c0      	nop			; (mov r8, r8)
 80125ec:	fffffeff 	.word	0xfffffeff

080125f0 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 80125f0:	4770      	bx	lr
 80125f2:	46c0      	nop			; (mov r8, r8)

080125f4 <HAL_UART_IRQHandler>:
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80125f4:	2201      	movs	r2, #1
 80125f6:	6803      	ldr	r3, [r0, #0]
{
 80125f8:	b510      	push	{r4, lr}
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80125fa:	69d9      	ldr	r1, [r3, #28]
{
 80125fc:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80125fe:	420a      	tst	r2, r1
 8012600:	d002      	beq.n	8012608 <HAL_UART_IRQHandler+0x14>
 8012602:	6819      	ldr	r1, [r3, #0]
 8012604:	05c9      	lsls	r1, r1, #23
 8012606:	d456      	bmi.n	80126b6 <HAL_UART_IRQHandler+0xc2>
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012608:	2202      	movs	r2, #2
 801260a:	69d9      	ldr	r1, [r3, #28]
 801260c:	420a      	tst	r2, r1
 801260e:	d003      	beq.n	8012618 <HAL_UART_IRQHandler+0x24>
 8012610:	2101      	movs	r1, #1
 8012612:	6898      	ldr	r0, [r3, #8]
 8012614:	4201      	tst	r1, r0
 8012616:	d146      	bne.n	80126a6 <HAL_UART_IRQHandler+0xb2>
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012618:	2204      	movs	r2, #4
 801261a:	69d9      	ldr	r1, [r3, #28]
 801261c:	420a      	tst	r2, r1
 801261e:	d003      	beq.n	8012628 <HAL_UART_IRQHandler+0x34>
 8012620:	2101      	movs	r1, #1
 8012622:	6898      	ldr	r0, [r3, #8]
 8012624:	4201      	tst	r1, r0
 8012626:	d136      	bne.n	8012696 <HAL_UART_IRQHandler+0xa2>
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012628:	2208      	movs	r2, #8
 801262a:	69d9      	ldr	r1, [r3, #28]
 801262c:	420a      	tst	r2, r1
 801262e:	d003      	beq.n	8012638 <HAL_UART_IRQHandler+0x44>
 8012630:	2101      	movs	r1, #1
 8012632:	6898      	ldr	r0, [r3, #8]
 8012634:	4201      	tst	r1, r0
 8012636:	d120      	bne.n	801267a <HAL_UART_IRQHandler+0x86>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012638:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801263a:	2a00      	cmp	r2, #0
 801263c:	d126      	bne.n	801268c <HAL_UART_IRQHandler+0x98>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 801263e:	2280      	movs	r2, #128	; 0x80
 8012640:	69d9      	ldr	r1, [r3, #28]
 8012642:	0352      	lsls	r2, r2, #13
 8012644:	4211      	tst	r1, r2
 8012646:	d002      	beq.n	801264e <HAL_UART_IRQHandler+0x5a>
 8012648:	6899      	ldr	r1, [r3, #8]
 801264a:	0249      	lsls	r1, r1, #9
 801264c:	d43e      	bmi.n	80126cc <HAL_UART_IRQHandler+0xd8>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 801264e:	2220      	movs	r2, #32
 8012650:	69d9      	ldr	r1, [r3, #28]
 8012652:	420a      	tst	r2, r1
 8012654:	d002      	beq.n	801265c <HAL_UART_IRQHandler+0x68>
 8012656:	6819      	ldr	r1, [r3, #0]
 8012658:	420a      	tst	r2, r1
 801265a:	d140      	bne.n	80126de <HAL_UART_IRQHandler+0xea>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 801265c:	2280      	movs	r2, #128	; 0x80
 801265e:	69d9      	ldr	r1, [r3, #28]
 8012660:	420a      	tst	r2, r1
 8012662:	d002      	beq.n	801266a <HAL_UART_IRQHandler+0x76>
 8012664:	6819      	ldr	r1, [r3, #0]
 8012666:	420a      	tst	r2, r1
 8012668:	d142      	bne.n	80126f0 <HAL_UART_IRQHandler+0xfc>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 801266a:	2240      	movs	r2, #64	; 0x40
 801266c:	69d9      	ldr	r1, [r3, #28]
 801266e:	420a      	tst	r2, r1
 8012670:	d002      	beq.n	8012678 <HAL_UART_IRQHandler+0x84>
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	421a      	tst	r2, r3
 8012676:	d125      	bne.n	80126c4 <HAL_UART_IRQHandler+0xd0>
}
 8012678:	bd10      	pop	{r4, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 801267a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801267c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801267e:	4302      	orrs	r2, r0
 8012680:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012682:	2269      	movs	r2, #105	; 0x69
 8012684:	54a1      	strb	r1, [r4, r2]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012686:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8012688:	2a00      	cmp	r2, #0
 801268a:	d0d8      	beq.n	801263e <HAL_UART_IRQHandler+0x4a>
    HAL_UART_ErrorCallback(huart);
 801268c:	0020      	movs	r0, r4
 801268e:	f7fa fab7 	bl	800cc00 <HAL_UART_ErrorCallback>
 8012692:	6823      	ldr	r3, [r4, #0]
 8012694:	e7d3      	b.n	801263e <HAL_UART_IRQHandler+0x4a>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012696:	2002      	movs	r0, #2
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8012698:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 801269a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801269c:	4302      	orrs	r2, r0
 801269e:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80126a0:	2269      	movs	r2, #105	; 0x69
 80126a2:	54a1      	strb	r1, [r4, r2]
 80126a4:	e7c0      	b.n	8012628 <HAL_UART_IRQHandler+0x34>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80126a6:	2004      	movs	r0, #4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80126a8:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80126aa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80126ac:	4302      	orrs	r2, r0
 80126ae:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80126b0:	2269      	movs	r2, #105	; 0x69
 80126b2:	54a1      	strb	r1, [r4, r2]
 80126b4:	e7b0      	b.n	8012618 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80126b6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80126b8:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80126ba:	4311      	orrs	r1, r2
 80126bc:	66c1      	str	r1, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80126be:	2169      	movs	r1, #105	; 0x69
 80126c0:	5442      	strb	r2, [r0, r1]
 80126c2:	e7a1      	b.n	8012608 <HAL_UART_IRQHandler+0x14>
    UART_EndTransmit_IT(huart);
 80126c4:	0020      	movs	r0, r4
 80126c6:	f7ff ff37 	bl	8012538 <UART_EndTransmit_IT>
}
 80126ca:	e7d5      	b.n	8012678 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80126cc:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 80126ce:	2369      	movs	r3, #105	; 0x69
 80126d0:	2201      	movs	r2, #1
    HAL_UARTEx_WakeupCallback(huart);
 80126d2:	0020      	movs	r0, r4
    huart->State = HAL_UART_STATE_READY;
 80126d4:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 80126d6:	f7ff ff8b 	bl	80125f0 <HAL_UARTEx_WakeupCallback>
 80126da:	6823      	ldr	r3, [r4, #0]
 80126dc:	e7b7      	b.n	801264e <HAL_UART_IRQHandler+0x5a>
    UART_Receive_IT(huart);
 80126de:	0020      	movs	r0, r4
 80126e0:	f7ff ff40 	bl	8012564 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80126e4:	2108      	movs	r1, #8
 80126e6:	6823      	ldr	r3, [r4, #0]
 80126e8:	699a      	ldr	r2, [r3, #24]
 80126ea:	430a      	orrs	r2, r1
 80126ec:	619a      	str	r2, [r3, #24]
 80126ee:	e7b5      	b.n	801265c <HAL_UART_IRQHandler+0x68>
    UART_Transmit_IT(huart);
 80126f0:	0020      	movs	r0, r4
 80126f2:	f7ff feef 	bl	80124d4 <UART_Transmit_IT>
 80126f6:	6823      	ldr	r3, [r4, #0]
 80126f8:	e7b7      	b.n	801266a <HAL_UART_IRQHandler+0x76>
 80126fa:	46c0      	nop			; (mov r8, r8)

080126fc <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 80126fc:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 80126fe:	f7f1 fff7 	bl	80046f0 <Module_Init>
 8012702:	e7fe      	b.n	8012702 <main+0x6>

08012704 <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8012704:	e7fe      	b.n	8012704 <UserTask>
 8012706:	46c0      	nop			; (mov r8, r8)

08012708 <atof>:
 8012708:	b510      	push	{r4, lr}
 801270a:	2100      	movs	r1, #0
 801270c:	f001 fb74 	bl	8013df8 <strtod>
 8012710:	bd10      	pop	{r4, pc}

08012712 <atoi>:
 8012712:	b510      	push	{r4, lr}
 8012714:	220a      	movs	r2, #10
 8012716:	2100      	movs	r1, #0
 8012718:	f001 fc3a 	bl	8013f90 <strtol>
 801271c:	bd10      	pop	{r4, pc}

0801271e <atol>:
 801271e:	b510      	push	{r4, lr}
 8012720:	220a      	movs	r2, #10
 8012722:	2100      	movs	r1, #0
 8012724:	f001 fc34 	bl	8013f90 <strtol>
 8012728:	bd10      	pop	{r4, pc}
	...

0801272c <calloc>:
 801272c:	b510      	push	{r4, lr}
 801272e:	4b03      	ldr	r3, [pc, #12]	; (801273c <calloc+0x10>)
 8012730:	000a      	movs	r2, r1
 8012732:	0001      	movs	r1, r0
 8012734:	6818      	ldr	r0, [r3, #0]
 8012736:	f000 f803 	bl	8012740 <_calloc_r>
 801273a:	bd10      	pop	{r4, pc}
 801273c:	200000c8 	.word	0x200000c8

08012740 <_calloc_r>:
 8012740:	b510      	push	{r4, lr}
 8012742:	4351      	muls	r1, r2
 8012744:	f000 f872 	bl	801282c <_malloc_r>
 8012748:	1e04      	subs	r4, r0, #0
 801274a:	d01a      	beq.n	8012782 <_calloc_r+0x42>
 801274c:	0003      	movs	r3, r0
 801274e:	3b08      	subs	r3, #8
 8012750:	685a      	ldr	r2, [r3, #4]
 8012752:	2303      	movs	r3, #3
 8012754:	439a      	bics	r2, r3
 8012756:	3a04      	subs	r2, #4
 8012758:	2a24      	cmp	r2, #36	; 0x24
 801275a:	d819      	bhi.n	8012790 <_calloc_r+0x50>
 801275c:	0003      	movs	r3, r0
 801275e:	2a13      	cmp	r2, #19
 8012760:	d90b      	bls.n	801277a <_calloc_r+0x3a>
 8012762:	2100      	movs	r1, #0
 8012764:	3308      	adds	r3, #8
 8012766:	6001      	str	r1, [r0, #0]
 8012768:	6041      	str	r1, [r0, #4]
 801276a:	2a1b      	cmp	r2, #27
 801276c:	d905      	bls.n	801277a <_calloc_r+0x3a>
 801276e:	6081      	str	r1, [r0, #8]
 8012770:	60c1      	str	r1, [r0, #12]
 8012772:	2a24      	cmp	r2, #36	; 0x24
 8012774:	d007      	beq.n	8012786 <_calloc_r+0x46>
 8012776:	0003      	movs	r3, r0
 8012778:	3310      	adds	r3, #16
 801277a:	2200      	movs	r2, #0
 801277c:	601a      	str	r2, [r3, #0]
 801277e:	605a      	str	r2, [r3, #4]
 8012780:	609a      	str	r2, [r3, #8]
 8012782:	0020      	movs	r0, r4
 8012784:	bd10      	pop	{r4, pc}
 8012786:	0003      	movs	r3, r0
 8012788:	6101      	str	r1, [r0, #16]
 801278a:	3318      	adds	r3, #24
 801278c:	6141      	str	r1, [r0, #20]
 801278e:	e7f4      	b.n	801277a <_calloc_r+0x3a>
 8012790:	2100      	movs	r1, #0
 8012792:	f000 fa8d 	bl	8012cb0 <memset>
 8012796:	e7f4      	b.n	8012782 <_calloc_r+0x42>

08012798 <__libc_init_array>:
 8012798:	b570      	push	{r4, r5, r6, lr}
 801279a:	2600      	movs	r6, #0
 801279c:	4d0c      	ldr	r5, [pc, #48]	; (80127d0 <__libc_init_array+0x38>)
 801279e:	4c0d      	ldr	r4, [pc, #52]	; (80127d4 <__libc_init_array+0x3c>)
 80127a0:	1b64      	subs	r4, r4, r5
 80127a2:	10a4      	asrs	r4, r4, #2
 80127a4:	42a6      	cmp	r6, r4
 80127a6:	d109      	bne.n	80127bc <__libc_init_array+0x24>
 80127a8:	2600      	movs	r6, #0
 80127aa:	f004 fe41 	bl	8017430 <_init>
 80127ae:	4d0a      	ldr	r5, [pc, #40]	; (80127d8 <__libc_init_array+0x40>)
 80127b0:	4c0a      	ldr	r4, [pc, #40]	; (80127dc <__libc_init_array+0x44>)
 80127b2:	1b64      	subs	r4, r4, r5
 80127b4:	10a4      	asrs	r4, r4, #2
 80127b6:	42a6      	cmp	r6, r4
 80127b8:	d105      	bne.n	80127c6 <__libc_init_array+0x2e>
 80127ba:	bd70      	pop	{r4, r5, r6, pc}
 80127bc:	00b3      	lsls	r3, r6, #2
 80127be:	58eb      	ldr	r3, [r5, r3]
 80127c0:	4798      	blx	r3
 80127c2:	3601      	adds	r6, #1
 80127c4:	e7ee      	b.n	80127a4 <__libc_init_array+0xc>
 80127c6:	00b3      	lsls	r3, r6, #2
 80127c8:	58eb      	ldr	r3, [r5, r3]
 80127ca:	4798      	blx	r3
 80127cc:	3601      	adds	r6, #1
 80127ce:	e7f2      	b.n	80127b6 <__libc_init_array+0x1e>
 80127d0:	0801a60c 	.word	0x0801a60c
 80127d4:	0801a60c 	.word	0x0801a60c
 80127d8:	0801a60c 	.word	0x0801a60c
 80127dc:	0801a614 	.word	0x0801a614

080127e0 <__locale_ctype_ptr_l>:
 80127e0:	30ec      	adds	r0, #236	; 0xec
 80127e2:	6800      	ldr	r0, [r0, #0]
 80127e4:	4770      	bx	lr
	...

080127e8 <__locale_ctype_ptr>:
 80127e8:	4b04      	ldr	r3, [pc, #16]	; (80127fc <__locale_ctype_ptr+0x14>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d100      	bne.n	80127f4 <__locale_ctype_ptr+0xc>
 80127f2:	4b03      	ldr	r3, [pc, #12]	; (8012800 <__locale_ctype_ptr+0x18>)
 80127f4:	33ec      	adds	r3, #236	; 0xec
 80127f6:	6818      	ldr	r0, [r3, #0]
 80127f8:	4770      	bx	lr
 80127fa:	46c0      	nop			; (mov r8, r8)
 80127fc:	200000c8 	.word	0x200000c8
 8012800:	200004f8 	.word	0x200004f8

08012804 <malloc>:
 8012804:	b510      	push	{r4, lr}
 8012806:	4b03      	ldr	r3, [pc, #12]	; (8012814 <malloc+0x10>)
 8012808:	0001      	movs	r1, r0
 801280a:	6818      	ldr	r0, [r3, #0]
 801280c:	f000 f80e 	bl	801282c <_malloc_r>
 8012810:	bd10      	pop	{r4, pc}
 8012812:	46c0      	nop			; (mov r8, r8)
 8012814:	200000c8 	.word	0x200000c8

08012818 <free>:
 8012818:	b510      	push	{r4, lr}
 801281a:	4b03      	ldr	r3, [pc, #12]	; (8012828 <free+0x10>)
 801281c:	0001      	movs	r1, r0
 801281e:	6818      	ldr	r0, [r3, #0]
 8012820:	f003 fd10 	bl	8016244 <_free_r>
 8012824:	bd10      	pop	{r4, pc}
 8012826:	46c0      	nop			; (mov r8, r8)
 8012828:	200000c8 	.word	0x200000c8

0801282c <_malloc_r>:
 801282c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801282e:	000d      	movs	r5, r1
 8012830:	b085      	sub	sp, #20
 8012832:	350b      	adds	r5, #11
 8012834:	9001      	str	r0, [sp, #4]
 8012836:	2d16      	cmp	r5, #22
 8012838:	d908      	bls.n	801284c <_malloc_r+0x20>
 801283a:	2307      	movs	r3, #7
 801283c:	439d      	bics	r5, r3
 801283e:	d506      	bpl.n	801284e <_malloc_r+0x22>
 8012840:	230c      	movs	r3, #12
 8012842:	9a01      	ldr	r2, [sp, #4]
 8012844:	6013      	str	r3, [r2, #0]
 8012846:	2000      	movs	r0, #0
 8012848:	b005      	add	sp, #20
 801284a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801284c:	2510      	movs	r5, #16
 801284e:	428d      	cmp	r5, r1
 8012850:	d3f6      	bcc.n	8012840 <_malloc_r+0x14>
 8012852:	9801      	ldr	r0, [sp, #4]
 8012854:	f000 fa34 	bl	8012cc0 <__malloc_lock>
 8012858:	23f8      	movs	r3, #248	; 0xf8
 801285a:	33ff      	adds	r3, #255	; 0xff
 801285c:	4ac4      	ldr	r2, [pc, #784]	; (8012b70 <_malloc_r+0x344>)
 801285e:	429d      	cmp	r5, r3
 8012860:	d820      	bhi.n	80128a4 <_malloc_r+0x78>
 8012862:	0029      	movs	r1, r5
 8012864:	3108      	adds	r1, #8
 8012866:	1851      	adds	r1, r2, r1
 8012868:	0008      	movs	r0, r1
 801286a:	684c      	ldr	r4, [r1, #4]
 801286c:	3808      	subs	r0, #8
 801286e:	08eb      	lsrs	r3, r5, #3
 8012870:	4284      	cmp	r4, r0
 8012872:	d104      	bne.n	801287e <_malloc_r+0x52>
 8012874:	68cc      	ldr	r4, [r1, #12]
 8012876:	3302      	adds	r3, #2
 8012878:	469c      	mov	ip, r3
 801287a:	42a1      	cmp	r1, r4
 801287c:	d02a      	beq.n	80128d4 <_malloc_r+0xa8>
 801287e:	2303      	movs	r3, #3
 8012880:	6862      	ldr	r2, [r4, #4]
 8012882:	68a1      	ldr	r1, [r4, #8]
 8012884:	439a      	bics	r2, r3
 8012886:	0013      	movs	r3, r2
 8012888:	68e2      	ldr	r2, [r4, #12]
 801288a:	18e3      	adds	r3, r4, r3
 801288c:	60ca      	str	r2, [r1, #12]
 801288e:	6091      	str	r1, [r2, #8]
 8012890:	2201      	movs	r2, #1
 8012892:	6859      	ldr	r1, [r3, #4]
 8012894:	430a      	orrs	r2, r1
 8012896:	605a      	str	r2, [r3, #4]
 8012898:	9801      	ldr	r0, [sp, #4]
 801289a:	f000 fa19 	bl	8012cd0 <__malloc_unlock>
 801289e:	0020      	movs	r0, r4
 80128a0:	3008      	adds	r0, #8
 80128a2:	e7d1      	b.n	8012848 <_malloc_r+0x1c>
 80128a4:	0a69      	lsrs	r1, r5, #9
 80128a6:	233f      	movs	r3, #63	; 0x3f
 80128a8:	2900      	cmp	r1, #0
 80128aa:	d003      	beq.n	80128b4 <_malloc_r+0x88>
 80128ac:	2904      	cmp	r1, #4
 80128ae:	d828      	bhi.n	8012902 <_malloc_r+0xd6>
 80128b0:	09ab      	lsrs	r3, r5, #6
 80128b2:	3338      	adds	r3, #56	; 0x38
 80128b4:	2103      	movs	r1, #3
 80128b6:	468c      	mov	ip, r1
 80128b8:	00d8      	lsls	r0, r3, #3
 80128ba:	1880      	adds	r0, r0, r2
 80128bc:	68c4      	ldr	r4, [r0, #12]
 80128be:	4284      	cmp	r4, r0
 80128c0:	d006      	beq.n	80128d0 <_malloc_r+0xa4>
 80128c2:	4666      	mov	r6, ip
 80128c4:	6861      	ldr	r1, [r4, #4]
 80128c6:	43b1      	bics	r1, r6
 80128c8:	1b4f      	subs	r7, r1, r5
 80128ca:	2f0f      	cmp	r7, #15
 80128cc:	dd31      	ble.n	8012932 <_malloc_r+0x106>
 80128ce:	3b01      	subs	r3, #1
 80128d0:	3301      	adds	r3, #1
 80128d2:	469c      	mov	ip, r3
 80128d4:	6914      	ldr	r4, [r2, #16]
 80128d6:	49a7      	ldr	r1, [pc, #668]	; (8012b74 <_malloc_r+0x348>)
 80128d8:	428c      	cmp	r4, r1
 80128da:	d055      	beq.n	8012988 <_malloc_r+0x15c>
 80128dc:	2303      	movs	r3, #3
 80128de:	6860      	ldr	r0, [r4, #4]
 80128e0:	4398      	bics	r0, r3
 80128e2:	0003      	movs	r3, r0
 80128e4:	1b46      	subs	r6, r0, r5
 80128e6:	2e0f      	cmp	r6, #15
 80128e8:	dd31      	ble.n	801294e <_malloc_r+0x122>
 80128ea:	2701      	movs	r7, #1
 80128ec:	1960      	adds	r0, r4, r5
 80128ee:	433d      	orrs	r5, r7
 80128f0:	4337      	orrs	r7, r6
 80128f2:	6065      	str	r5, [r4, #4]
 80128f4:	6150      	str	r0, [r2, #20]
 80128f6:	6110      	str	r0, [r2, #16]
 80128f8:	60c1      	str	r1, [r0, #12]
 80128fa:	6081      	str	r1, [r0, #8]
 80128fc:	6047      	str	r7, [r0, #4]
 80128fe:	50e6      	str	r6, [r4, r3]
 8012900:	e7ca      	b.n	8012898 <_malloc_r+0x6c>
 8012902:	2914      	cmp	r1, #20
 8012904:	d802      	bhi.n	801290c <_malloc_r+0xe0>
 8012906:	000b      	movs	r3, r1
 8012908:	335b      	adds	r3, #91	; 0x5b
 801290a:	e7d3      	b.n	80128b4 <_malloc_r+0x88>
 801290c:	2954      	cmp	r1, #84	; 0x54
 801290e:	d802      	bhi.n	8012916 <_malloc_r+0xea>
 8012910:	0b2b      	lsrs	r3, r5, #12
 8012912:	336e      	adds	r3, #110	; 0x6e
 8012914:	e7ce      	b.n	80128b4 <_malloc_r+0x88>
 8012916:	23aa      	movs	r3, #170	; 0xaa
 8012918:	005b      	lsls	r3, r3, #1
 801291a:	4299      	cmp	r1, r3
 801291c:	d802      	bhi.n	8012924 <_malloc_r+0xf8>
 801291e:	0beb      	lsrs	r3, r5, #15
 8012920:	3377      	adds	r3, #119	; 0x77
 8012922:	e7c7      	b.n	80128b4 <_malloc_r+0x88>
 8012924:	4894      	ldr	r0, [pc, #592]	; (8012b78 <_malloc_r+0x34c>)
 8012926:	237e      	movs	r3, #126	; 0x7e
 8012928:	4281      	cmp	r1, r0
 801292a:	d8c3      	bhi.n	80128b4 <_malloc_r+0x88>
 801292c:	0cab      	lsrs	r3, r5, #18
 801292e:	337c      	adds	r3, #124	; 0x7c
 8012930:	e7c0      	b.n	80128b4 <_malloc_r+0x88>
 8012932:	68e6      	ldr	r6, [r4, #12]
 8012934:	2f00      	cmp	r7, #0
 8012936:	db08      	blt.n	801294a <_malloc_r+0x11e>
 8012938:	68a3      	ldr	r3, [r4, #8]
 801293a:	1861      	adds	r1, r4, r1
 801293c:	60de      	str	r6, [r3, #12]
 801293e:	60b3      	str	r3, [r6, #8]
 8012940:	2301      	movs	r3, #1
 8012942:	684a      	ldr	r2, [r1, #4]
 8012944:	4313      	orrs	r3, r2
 8012946:	604b      	str	r3, [r1, #4]
 8012948:	e7a6      	b.n	8012898 <_malloc_r+0x6c>
 801294a:	0034      	movs	r4, r6
 801294c:	e7b7      	b.n	80128be <_malloc_r+0x92>
 801294e:	6151      	str	r1, [r2, #20]
 8012950:	6111      	str	r1, [r2, #16]
 8012952:	2e00      	cmp	r6, #0
 8012954:	db05      	blt.n	8012962 <_malloc_r+0x136>
 8012956:	2101      	movs	r1, #1
 8012958:	1823      	adds	r3, r4, r0
 801295a:	685a      	ldr	r2, [r3, #4]
 801295c:	4311      	orrs	r1, r2
 801295e:	6059      	str	r1, [r3, #4]
 8012960:	e79a      	b.n	8012898 <_malloc_r+0x6c>
 8012962:	4986      	ldr	r1, [pc, #536]	; (8012b7c <_malloc_r+0x350>)
 8012964:	6857      	ldr	r7, [r2, #4]
 8012966:	4288      	cmp	r0, r1
 8012968:	d900      	bls.n	801296c <_malloc_r+0x140>
 801296a:	e090      	b.n	8012a8e <_malloc_r+0x262>
 801296c:	08c3      	lsrs	r3, r0, #3
 801296e:	39ff      	subs	r1, #255	; 0xff
 8012970:	1098      	asrs	r0, r3, #2
 8012972:	39ff      	subs	r1, #255	; 0xff
 8012974:	4081      	lsls	r1, r0
 8012976:	00db      	lsls	r3, r3, #3
 8012978:	4339      	orrs	r1, r7
 801297a:	6051      	str	r1, [r2, #4]
 801297c:	189a      	adds	r2, r3, r2
 801297e:	6893      	ldr	r3, [r2, #8]
 8012980:	60e2      	str	r2, [r4, #12]
 8012982:	60a3      	str	r3, [r4, #8]
 8012984:	6094      	str	r4, [r2, #8]
 8012986:	60dc      	str	r4, [r3, #12]
 8012988:	4663      	mov	r3, ip
 801298a:	2201      	movs	r2, #1
 801298c:	4978      	ldr	r1, [pc, #480]	; (8012b70 <_malloc_r+0x344>)
 801298e:	109b      	asrs	r3, r3, #2
 8012990:	6848      	ldr	r0, [r1, #4]
 8012992:	409a      	lsls	r2, r3
 8012994:	4290      	cmp	r0, r2
 8012996:	d32d      	bcc.n	80129f4 <_malloc_r+0x1c8>
 8012998:	4202      	tst	r2, r0
 801299a:	d109      	bne.n	80129b0 <_malloc_r+0x184>
 801299c:	2303      	movs	r3, #3
 801299e:	4664      	mov	r4, ip
 80129a0:	439c      	bics	r4, r3
 80129a2:	0023      	movs	r3, r4
 80129a4:	3304      	adds	r3, #4
 80129a6:	469c      	mov	ip, r3
 80129a8:	0052      	lsls	r2, r2, #1
 80129aa:	4202      	tst	r2, r0
 80129ac:	d100      	bne.n	80129b0 <_malloc_r+0x184>
 80129ae:	e0a4      	b.n	8012afa <_malloc_r+0x2ce>
 80129b0:	4663      	mov	r3, ip
 80129b2:	00db      	lsls	r3, r3, #3
 80129b4:	18cb      	adds	r3, r1, r3
 80129b6:	9303      	str	r3, [sp, #12]
 80129b8:	001f      	movs	r7, r3
 80129ba:	4663      	mov	r3, ip
 80129bc:	9302      	str	r3, [sp, #8]
 80129be:	68fc      	ldr	r4, [r7, #12]
 80129c0:	42bc      	cmp	r4, r7
 80129c2:	d000      	beq.n	80129c6 <_malloc_r+0x19a>
 80129c4:	e09c      	b.n	8012b00 <_malloc_r+0x2d4>
 80129c6:	2003      	movs	r0, #3
 80129c8:	9b02      	ldr	r3, [sp, #8]
 80129ca:	3708      	adds	r7, #8
 80129cc:	3301      	adds	r3, #1
 80129ce:	9302      	str	r3, [sp, #8]
 80129d0:	4203      	tst	r3, r0
 80129d2:	d1f4      	bne.n	80129be <_malloc_r+0x192>
 80129d4:	4663      	mov	r3, ip
 80129d6:	2003      	movs	r0, #3
 80129d8:	4203      	tst	r3, r0
 80129da:	d000      	beq.n	80129de <_malloc_r+0x1b2>
 80129dc:	e0b3      	b.n	8012b46 <_malloc_r+0x31a>
 80129de:	684b      	ldr	r3, [r1, #4]
 80129e0:	4393      	bics	r3, r2
 80129e2:	604b      	str	r3, [r1, #4]
 80129e4:	4b62      	ldr	r3, [pc, #392]	; (8012b70 <_malloc_r+0x344>)
 80129e6:	0052      	lsls	r2, r2, #1
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	4293      	cmp	r3, r2
 80129ec:	d302      	bcc.n	80129f4 <_malloc_r+0x1c8>
 80129ee:	2a00      	cmp	r2, #0
 80129f0:	d000      	beq.n	80129f4 <_malloc_r+0x1c8>
 80129f2:	e0b9      	b.n	8012b68 <_malloc_r+0x33c>
 80129f4:	2303      	movs	r3, #3
 80129f6:	688f      	ldr	r7, [r1, #8]
 80129f8:	687a      	ldr	r2, [r7, #4]
 80129fa:	439a      	bics	r2, r3
 80129fc:	9202      	str	r2, [sp, #8]
 80129fe:	42aa      	cmp	r2, r5
 8012a00:	d303      	bcc.n	8012a0a <_malloc_r+0x1de>
 8012a02:	1b52      	subs	r2, r2, r5
 8012a04:	2a0f      	cmp	r2, #15
 8012a06:	dd00      	ble.n	8012a0a <_malloc_r+0x1de>
 8012a08:	e116      	b.n	8012c38 <_malloc_r+0x40c>
 8012a0a:	4b5d      	ldr	r3, [pc, #372]	; (8012b80 <_malloc_r+0x354>)
 8012a0c:	2008      	movs	r0, #8
 8012a0e:	681e      	ldr	r6, [r3, #0]
 8012a10:	f002 fd26 	bl	8015460 <sysconf>
 8012a14:	4b5b      	ldr	r3, [pc, #364]	; (8012b84 <_malloc_r+0x358>)
 8012a16:	3610      	adds	r6, #16
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	1976      	adds	r6, r6, r5
 8012a1c:	9003      	str	r0, [sp, #12]
 8012a1e:	3301      	adds	r3, #1
 8012a20:	d003      	beq.n	8012a2a <_malloc_r+0x1fe>
 8012a22:	3e01      	subs	r6, #1
 8012a24:	1836      	adds	r6, r6, r0
 8012a26:	4243      	negs	r3, r0
 8012a28:	401e      	ands	r6, r3
 8012a2a:	0031      	movs	r1, r6
 8012a2c:	9801      	ldr	r0, [sp, #4]
 8012a2e:	f000 fb27 	bl	8013080 <_sbrk_r>
 8012a32:	0004      	movs	r4, r0
 8012a34:	1c43      	adds	r3, r0, #1
 8012a36:	d100      	bne.n	8012a3a <_malloc_r+0x20e>
 8012a38:	e0d6      	b.n	8012be8 <_malloc_r+0x3bc>
 8012a3a:	9b02      	ldr	r3, [sp, #8]
 8012a3c:	18fb      	adds	r3, r7, r3
 8012a3e:	4283      	cmp	r3, r0
 8012a40:	d903      	bls.n	8012a4a <_malloc_r+0x21e>
 8012a42:	4a4b      	ldr	r2, [pc, #300]	; (8012b70 <_malloc_r+0x344>)
 8012a44:	4297      	cmp	r7, r2
 8012a46:	d000      	beq.n	8012a4a <_malloc_r+0x21e>
 8012a48:	e0ce      	b.n	8012be8 <_malloc_r+0x3bc>
 8012a4a:	494f      	ldr	r1, [pc, #316]	; (8012b88 <_malloc_r+0x35c>)
 8012a4c:	680a      	ldr	r2, [r1, #0]
 8012a4e:	18b2      	adds	r2, r6, r2
 8012a50:	600a      	str	r2, [r1, #0]
 8012a52:	9903      	ldr	r1, [sp, #12]
 8012a54:	4694      	mov	ip, r2
 8012a56:	1e48      	subs	r0, r1, #1
 8012a58:	42a3      	cmp	r3, r4
 8012a5a:	d000      	beq.n	8012a5e <_malloc_r+0x232>
 8012a5c:	e09a      	b.n	8012b94 <_malloc_r+0x368>
 8012a5e:	4203      	tst	r3, r0
 8012a60:	d000      	beq.n	8012a64 <_malloc_r+0x238>
 8012a62:	e097      	b.n	8012b94 <_malloc_r+0x368>
 8012a64:	9a02      	ldr	r2, [sp, #8]
 8012a66:	4b42      	ldr	r3, [pc, #264]	; (8012b70 <_malloc_r+0x344>)
 8012a68:	1992      	adds	r2, r2, r6
 8012a6a:	2601      	movs	r6, #1
 8012a6c:	689b      	ldr	r3, [r3, #8]
 8012a6e:	4316      	orrs	r6, r2
 8012a70:	605e      	str	r6, [r3, #4]
 8012a72:	4b45      	ldr	r3, [pc, #276]	; (8012b88 <_malloc_r+0x35c>)
 8012a74:	4a45      	ldr	r2, [pc, #276]	; (8012b8c <_malloc_r+0x360>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	6811      	ldr	r1, [r2, #0]
 8012a7a:	428b      	cmp	r3, r1
 8012a7c:	d900      	bls.n	8012a80 <_malloc_r+0x254>
 8012a7e:	6013      	str	r3, [r2, #0]
 8012a80:	4a43      	ldr	r2, [pc, #268]	; (8012b90 <_malloc_r+0x364>)
 8012a82:	6811      	ldr	r1, [r2, #0]
 8012a84:	428b      	cmp	r3, r1
 8012a86:	d800      	bhi.n	8012a8a <_malloc_r+0x25e>
 8012a88:	e0ae      	b.n	8012be8 <_malloc_r+0x3bc>
 8012a8a:	6013      	str	r3, [r2, #0]
 8012a8c:	e0ac      	b.n	8012be8 <_malloc_r+0x3bc>
 8012a8e:	0a40      	lsrs	r0, r0, #9
 8012a90:	2804      	cmp	r0, #4
 8012a92:	d810      	bhi.n	8012ab6 <_malloc_r+0x28a>
 8012a94:	0999      	lsrs	r1, r3, #6
 8012a96:	3138      	adds	r1, #56	; 0x38
 8012a98:	00ce      	lsls	r6, r1, #3
 8012a9a:	18b6      	adds	r6, r6, r2
 8012a9c:	68b0      	ldr	r0, [r6, #8]
 8012a9e:	4286      	cmp	r6, r0
 8012aa0:	d124      	bne.n	8012aec <_malloc_r+0x2c0>
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	1089      	asrs	r1, r1, #2
 8012aa6:	408b      	lsls	r3, r1
 8012aa8:	433b      	orrs	r3, r7
 8012aaa:	6053      	str	r3, [r2, #4]
 8012aac:	60e6      	str	r6, [r4, #12]
 8012aae:	60a0      	str	r0, [r4, #8]
 8012ab0:	60b4      	str	r4, [r6, #8]
 8012ab2:	60c4      	str	r4, [r0, #12]
 8012ab4:	e768      	b.n	8012988 <_malloc_r+0x15c>
 8012ab6:	2814      	cmp	r0, #20
 8012ab8:	d802      	bhi.n	8012ac0 <_malloc_r+0x294>
 8012aba:	0001      	movs	r1, r0
 8012abc:	315b      	adds	r1, #91	; 0x5b
 8012abe:	e7eb      	b.n	8012a98 <_malloc_r+0x26c>
 8012ac0:	2854      	cmp	r0, #84	; 0x54
 8012ac2:	d802      	bhi.n	8012aca <_malloc_r+0x29e>
 8012ac4:	0b19      	lsrs	r1, r3, #12
 8012ac6:	316e      	adds	r1, #110	; 0x6e
 8012ac8:	e7e6      	b.n	8012a98 <_malloc_r+0x26c>
 8012aca:	21aa      	movs	r1, #170	; 0xaa
 8012acc:	0049      	lsls	r1, r1, #1
 8012ace:	4288      	cmp	r0, r1
 8012ad0:	d802      	bhi.n	8012ad8 <_malloc_r+0x2ac>
 8012ad2:	0bd9      	lsrs	r1, r3, #15
 8012ad4:	3177      	adds	r1, #119	; 0x77
 8012ad6:	e7df      	b.n	8012a98 <_malloc_r+0x26c>
 8012ad8:	4e27      	ldr	r6, [pc, #156]	; (8012b78 <_malloc_r+0x34c>)
 8012ada:	217e      	movs	r1, #126	; 0x7e
 8012adc:	42b0      	cmp	r0, r6
 8012ade:	d8db      	bhi.n	8012a98 <_malloc_r+0x26c>
 8012ae0:	0c99      	lsrs	r1, r3, #18
 8012ae2:	317c      	adds	r1, #124	; 0x7c
 8012ae4:	e7d8      	b.n	8012a98 <_malloc_r+0x26c>
 8012ae6:	6880      	ldr	r0, [r0, #8]
 8012ae8:	4286      	cmp	r6, r0
 8012aea:	d004      	beq.n	8012af6 <_malloc_r+0x2ca>
 8012aec:	2103      	movs	r1, #3
 8012aee:	6842      	ldr	r2, [r0, #4]
 8012af0:	438a      	bics	r2, r1
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d8f7      	bhi.n	8012ae6 <_malloc_r+0x2ba>
 8012af6:	68c6      	ldr	r6, [r0, #12]
 8012af8:	e7d8      	b.n	8012aac <_malloc_r+0x280>
 8012afa:	2304      	movs	r3, #4
 8012afc:	449c      	add	ip, r3
 8012afe:	e753      	b.n	80129a8 <_malloc_r+0x17c>
 8012b00:	2003      	movs	r0, #3
 8012b02:	6863      	ldr	r3, [r4, #4]
 8012b04:	4383      	bics	r3, r0
 8012b06:	1b5e      	subs	r6, r3, r5
 8012b08:	68e0      	ldr	r0, [r4, #12]
 8012b0a:	2e0f      	cmp	r6, #15
 8012b0c:	dd0e      	ble.n	8012b2c <_malloc_r+0x300>
 8012b0e:	2701      	movs	r7, #1
 8012b10:	1962      	adds	r2, r4, r5
 8012b12:	433d      	orrs	r5, r7
 8012b14:	6065      	str	r5, [r4, #4]
 8012b16:	68a5      	ldr	r5, [r4, #8]
 8012b18:	4337      	orrs	r7, r6
 8012b1a:	60e8      	str	r0, [r5, #12]
 8012b1c:	6085      	str	r5, [r0, #8]
 8012b1e:	614a      	str	r2, [r1, #20]
 8012b20:	610a      	str	r2, [r1, #16]
 8012b22:	4914      	ldr	r1, [pc, #80]	; (8012b74 <_malloc_r+0x348>)
 8012b24:	6057      	str	r7, [r2, #4]
 8012b26:	60d1      	str	r1, [r2, #12]
 8012b28:	6091      	str	r1, [r2, #8]
 8012b2a:	e6e8      	b.n	80128fe <_malloc_r+0xd2>
 8012b2c:	2e00      	cmp	r6, #0
 8012b2e:	db08      	blt.n	8012b42 <_malloc_r+0x316>
 8012b30:	2201      	movs	r2, #1
 8012b32:	18e3      	adds	r3, r4, r3
 8012b34:	6859      	ldr	r1, [r3, #4]
 8012b36:	430a      	orrs	r2, r1
 8012b38:	605a      	str	r2, [r3, #4]
 8012b3a:	68a3      	ldr	r3, [r4, #8]
 8012b3c:	60d8      	str	r0, [r3, #12]
 8012b3e:	6083      	str	r3, [r0, #8]
 8012b40:	e6aa      	b.n	8012898 <_malloc_r+0x6c>
 8012b42:	0004      	movs	r4, r0
 8012b44:	e73c      	b.n	80129c0 <_malloc_r+0x194>
 8012b46:	2301      	movs	r3, #1
 8012b48:	425b      	negs	r3, r3
 8012b4a:	449c      	add	ip, r3
 8012b4c:	9b03      	ldr	r3, [sp, #12]
 8012b4e:	6818      	ldr	r0, [r3, #0]
 8012b50:	3b08      	subs	r3, #8
 8012b52:	9003      	str	r0, [sp, #12]
 8012b54:	4298      	cmp	r0, r3
 8012b56:	d100      	bne.n	8012b5a <_malloc_r+0x32e>
 8012b58:	e73c      	b.n	80129d4 <_malloc_r+0x1a8>
 8012b5a:	e743      	b.n	80129e4 <_malloc_r+0x1b8>
 8012b5c:	2004      	movs	r0, #4
 8012b5e:	0052      	lsls	r2, r2, #1
 8012b60:	4484      	add	ip, r0
 8012b62:	421a      	tst	r2, r3
 8012b64:	d0fa      	beq.n	8012b5c <_malloc_r+0x330>
 8012b66:	e723      	b.n	80129b0 <_malloc_r+0x184>
 8012b68:	9802      	ldr	r0, [sp, #8]
 8012b6a:	4684      	mov	ip, r0
 8012b6c:	e7f9      	b.n	8012b62 <_malloc_r+0x336>
 8012b6e:	46c0      	nop			; (mov r8, r8)
 8012b70:	20000664 	.word	0x20000664
 8012b74:	2000066c 	.word	0x2000066c
 8012b78:	00000554 	.word	0x00000554
 8012b7c:	000001ff 	.word	0x000001ff
 8012b80:	20006e1c 	.word	0x20006e1c
 8012b84:	20000a6c 	.word	0x20000a6c
 8012b88:	20006dec 	.word	0x20006dec
 8012b8c:	20006e14 	.word	0x20006e14
 8012b90:	20006e18 	.word	0x20006e18
 8012b94:	492e      	ldr	r1, [pc, #184]	; (8012c50 <_malloc_r+0x424>)
 8012b96:	680a      	ldr	r2, [r1, #0]
 8012b98:	3201      	adds	r2, #1
 8012b9a:	d133      	bne.n	8012c04 <_malloc_r+0x3d8>
 8012b9c:	600c      	str	r4, [r1, #0]
 8012b9e:	2307      	movs	r3, #7
 8012ba0:	4023      	ands	r3, r4
 8012ba2:	d002      	beq.n	8012baa <_malloc_r+0x37e>
 8012ba4:	2208      	movs	r2, #8
 8012ba6:	1ad3      	subs	r3, r2, r3
 8012ba8:	18e4      	adds	r4, r4, r3
 8012baa:	9a03      	ldr	r2, [sp, #12]
 8012bac:	19a6      	adds	r6, r4, r6
 8012bae:	18d3      	adds	r3, r2, r3
 8012bb0:	4006      	ands	r6, r0
 8012bb2:	1b9e      	subs	r6, r3, r6
 8012bb4:	0031      	movs	r1, r6
 8012bb6:	9801      	ldr	r0, [sp, #4]
 8012bb8:	f000 fa62 	bl	8013080 <_sbrk_r>
 8012bbc:	1c43      	adds	r3, r0, #1
 8012bbe:	d101      	bne.n	8012bc4 <_malloc_r+0x398>
 8012bc0:	0020      	movs	r0, r4
 8012bc2:	2600      	movs	r6, #0
 8012bc4:	4a23      	ldr	r2, [pc, #140]	; (8012c54 <_malloc_r+0x428>)
 8012bc6:	1b00      	subs	r0, r0, r4
 8012bc8:	6813      	ldr	r3, [r2, #0]
 8012bca:	199b      	adds	r3, r3, r6
 8012bcc:	6013      	str	r3, [r2, #0]
 8012bce:	2301      	movs	r3, #1
 8012bd0:	4a21      	ldr	r2, [pc, #132]	; (8012c58 <_malloc_r+0x42c>)
 8012bd2:	1986      	adds	r6, r0, r6
 8012bd4:	431e      	orrs	r6, r3
 8012bd6:	6094      	str	r4, [r2, #8]
 8012bd8:	6066      	str	r6, [r4, #4]
 8012bda:	4297      	cmp	r7, r2
 8012bdc:	d100      	bne.n	8012be0 <_malloc_r+0x3b4>
 8012bde:	e748      	b.n	8012a72 <_malloc_r+0x246>
 8012be0:	9a02      	ldr	r2, [sp, #8]
 8012be2:	2a0f      	cmp	r2, #15
 8012be4:	d813      	bhi.n	8012c0e <_malloc_r+0x3e2>
 8012be6:	6063      	str	r3, [r4, #4]
 8012be8:	2203      	movs	r2, #3
 8012bea:	4b1b      	ldr	r3, [pc, #108]	; (8012c58 <_malloc_r+0x42c>)
 8012bec:	689b      	ldr	r3, [r3, #8]
 8012bee:	685b      	ldr	r3, [r3, #4]
 8012bf0:	4393      	bics	r3, r2
 8012bf2:	1b5a      	subs	r2, r3, r5
 8012bf4:	42ab      	cmp	r3, r5
 8012bf6:	d301      	bcc.n	8012bfc <_malloc_r+0x3d0>
 8012bf8:	2a0f      	cmp	r2, #15
 8012bfa:	dc1d      	bgt.n	8012c38 <_malloc_r+0x40c>
 8012bfc:	9801      	ldr	r0, [sp, #4]
 8012bfe:	f000 f867 	bl	8012cd0 <__malloc_unlock>
 8012c02:	e620      	b.n	8012846 <_malloc_r+0x1a>
 8012c04:	1ae3      	subs	r3, r4, r3
 8012c06:	4a13      	ldr	r2, [pc, #76]	; (8012c54 <_malloc_r+0x428>)
 8012c08:	4463      	add	r3, ip
 8012c0a:	6013      	str	r3, [r2, #0]
 8012c0c:	e7c7      	b.n	8012b9e <_malloc_r+0x372>
 8012c0e:	2207      	movs	r2, #7
 8012c10:	9e02      	ldr	r6, [sp, #8]
 8012c12:	3e0c      	subs	r6, #12
 8012c14:	4396      	bics	r6, r2
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	4013      	ands	r3, r2
 8012c1a:	2205      	movs	r2, #5
 8012c1c:	4333      	orrs	r3, r6
 8012c1e:	607b      	str	r3, [r7, #4]
 8012c20:	19bb      	adds	r3, r7, r6
 8012c22:	605a      	str	r2, [r3, #4]
 8012c24:	609a      	str	r2, [r3, #8]
 8012c26:	2e0f      	cmp	r6, #15
 8012c28:	d800      	bhi.n	8012c2c <_malloc_r+0x400>
 8012c2a:	e722      	b.n	8012a72 <_malloc_r+0x246>
 8012c2c:	0039      	movs	r1, r7
 8012c2e:	9801      	ldr	r0, [sp, #4]
 8012c30:	3108      	adds	r1, #8
 8012c32:	f003 fb07 	bl	8016244 <_free_r>
 8012c36:	e71c      	b.n	8012a72 <_malloc_r+0x246>
 8012c38:	2301      	movs	r3, #1
 8012c3a:	0018      	movs	r0, r3
 8012c3c:	4906      	ldr	r1, [pc, #24]	; (8012c58 <_malloc_r+0x42c>)
 8012c3e:	4328      	orrs	r0, r5
 8012c40:	688c      	ldr	r4, [r1, #8]
 8012c42:	4313      	orrs	r3, r2
 8012c44:	1965      	adds	r5, r4, r5
 8012c46:	6060      	str	r0, [r4, #4]
 8012c48:	608d      	str	r5, [r1, #8]
 8012c4a:	606b      	str	r3, [r5, #4]
 8012c4c:	e624      	b.n	8012898 <_malloc_r+0x6c>
 8012c4e:	46c0      	nop			; (mov r8, r8)
 8012c50:	20000a6c 	.word	0x20000a6c
 8012c54:	20006dec 	.word	0x20006dec
 8012c58:	20000664 	.word	0x20000664

08012c5c <__ascii_mbtowc>:
 8012c5c:	b082      	sub	sp, #8
 8012c5e:	2900      	cmp	r1, #0
 8012c60:	d100      	bne.n	8012c64 <__ascii_mbtowc+0x8>
 8012c62:	a901      	add	r1, sp, #4
 8012c64:	1e10      	subs	r0, r2, #0
 8012c66:	d006      	beq.n	8012c76 <__ascii_mbtowc+0x1a>
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d006      	beq.n	8012c7a <__ascii_mbtowc+0x1e>
 8012c6c:	7813      	ldrb	r3, [r2, #0]
 8012c6e:	600b      	str	r3, [r1, #0]
 8012c70:	7810      	ldrb	r0, [r2, #0]
 8012c72:	1e43      	subs	r3, r0, #1
 8012c74:	4198      	sbcs	r0, r3
 8012c76:	b002      	add	sp, #8
 8012c78:	4770      	bx	lr
 8012c7a:	2002      	movs	r0, #2
 8012c7c:	4240      	negs	r0, r0
 8012c7e:	e7fa      	b.n	8012c76 <__ascii_mbtowc+0x1a>

08012c80 <memcmp>:
 8012c80:	b530      	push	{r4, r5, lr}
 8012c82:	2400      	movs	r4, #0
 8012c84:	42a2      	cmp	r2, r4
 8012c86:	d101      	bne.n	8012c8c <memcmp+0xc>
 8012c88:	2000      	movs	r0, #0
 8012c8a:	e005      	b.n	8012c98 <memcmp+0x18>
 8012c8c:	5d03      	ldrb	r3, [r0, r4]
 8012c8e:	1c65      	adds	r5, r4, #1
 8012c90:	5d0c      	ldrb	r4, [r1, r4]
 8012c92:	42a3      	cmp	r3, r4
 8012c94:	d001      	beq.n	8012c9a <memcmp+0x1a>
 8012c96:	1b18      	subs	r0, r3, r4
 8012c98:	bd30      	pop	{r4, r5, pc}
 8012c9a:	002c      	movs	r4, r5
 8012c9c:	e7f2      	b.n	8012c84 <memcmp+0x4>

08012c9e <memcpy>:
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	b510      	push	{r4, lr}
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d100      	bne.n	8012ca8 <memcpy+0xa>
 8012ca6:	bd10      	pop	{r4, pc}
 8012ca8:	5ccc      	ldrb	r4, [r1, r3]
 8012caa:	54c4      	strb	r4, [r0, r3]
 8012cac:	3301      	adds	r3, #1
 8012cae:	e7f8      	b.n	8012ca2 <memcpy+0x4>

08012cb0 <memset>:
 8012cb0:	0003      	movs	r3, r0
 8012cb2:	1812      	adds	r2, r2, r0
 8012cb4:	4293      	cmp	r3, r2
 8012cb6:	d100      	bne.n	8012cba <memset+0xa>
 8012cb8:	4770      	bx	lr
 8012cba:	7019      	strb	r1, [r3, #0]
 8012cbc:	3301      	adds	r3, #1
 8012cbe:	e7f9      	b.n	8012cb4 <memset+0x4>

08012cc0 <__malloc_lock>:
 8012cc0:	b510      	push	{r4, lr}
 8012cc2:	4802      	ldr	r0, [pc, #8]	; (8012ccc <__malloc_lock+0xc>)
 8012cc4:	f003 feb2 	bl	8016a2c <__retarget_lock_acquire_recursive>
 8012cc8:	bd10      	pop	{r4, pc}
 8012cca:	46c0      	nop			; (mov r8, r8)
 8012ccc:	200073cc 	.word	0x200073cc

08012cd0 <__malloc_unlock>:
 8012cd0:	b510      	push	{r4, lr}
 8012cd2:	4802      	ldr	r0, [pc, #8]	; (8012cdc <__malloc_unlock+0xc>)
 8012cd4:	f003 feab 	bl	8016a2e <__retarget_lock_release_recursive>
 8012cd8:	bd10      	pop	{r4, pc}
 8012cda:	46c0      	nop			; (mov r8, r8)
 8012cdc:	200073cc 	.word	0x200073cc

08012ce0 <rand>:
 8012ce0:	4b09      	ldr	r3, [pc, #36]	; (8012d08 <rand+0x28>)
 8012ce2:	b510      	push	{r4, lr}
 8012ce4:	681c      	ldr	r4, [r3, #0]
 8012ce6:	4a09      	ldr	r2, [pc, #36]	; (8012d0c <rand+0x2c>)
 8012ce8:	34a8      	adds	r4, #168	; 0xa8
 8012cea:	6820      	ldr	r0, [r4, #0]
 8012cec:	6861      	ldr	r1, [r4, #4]
 8012cee:	4b08      	ldr	r3, [pc, #32]	; (8012d10 <rand+0x30>)
 8012cf0:	f7ed fc3c 	bl	800056c <__aeabi_lmul>
 8012cf4:	2201      	movs	r2, #1
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	1880      	adds	r0, r0, r2
 8012cfa:	4159      	adcs	r1, r3
 8012cfc:	6020      	str	r0, [r4, #0]
 8012cfe:	6061      	str	r1, [r4, #4]
 8012d00:	0048      	lsls	r0, r1, #1
 8012d02:	0840      	lsrs	r0, r0, #1
 8012d04:	bd10      	pop	{r4, pc}
 8012d06:	46c0      	nop			; (mov r8, r8)
 8012d08:	200000c8 	.word	0x200000c8
 8012d0c:	4c957f2d 	.word	0x4c957f2d
 8012d10:	5851f42d 	.word	0x5851f42d

08012d14 <realloc>:
 8012d14:	b510      	push	{r4, lr}
 8012d16:	4b03      	ldr	r3, [pc, #12]	; (8012d24 <realloc+0x10>)
 8012d18:	000a      	movs	r2, r1
 8012d1a:	0001      	movs	r1, r0
 8012d1c:	6818      	ldr	r0, [r3, #0]
 8012d1e:	f000 f803 	bl	8012d28 <_realloc_r>
 8012d22:	bd10      	pop	{r4, pc}
 8012d24:	200000c8 	.word	0x200000c8

08012d28 <_realloc_r>:
 8012d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d2a:	b087      	sub	sp, #28
 8012d2c:	9003      	str	r0, [sp, #12]
 8012d2e:	1e0c      	subs	r4, r1, #0
 8012d30:	9205      	str	r2, [sp, #20]
 8012d32:	d106      	bne.n	8012d42 <_realloc_r+0x1a>
 8012d34:	0011      	movs	r1, r2
 8012d36:	f7ff fd79 	bl	801282c <_malloc_r>
 8012d3a:	0007      	movs	r7, r0
 8012d3c:	0038      	movs	r0, r7
 8012d3e:	b007      	add	sp, #28
 8012d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d42:	9803      	ldr	r0, [sp, #12]
 8012d44:	f7ff ffbc 	bl	8012cc0 <__malloc_lock>
 8012d48:	0023      	movs	r3, r4
 8012d4a:	3b08      	subs	r3, #8
 8012d4c:	685f      	ldr	r7, [r3, #4]
 8012d4e:	9302      	str	r3, [sp, #8]
 8012d50:	003a      	movs	r2, r7
 8012d52:	2303      	movs	r3, #3
 8012d54:	9e05      	ldr	r6, [sp, #20]
 8012d56:	439a      	bics	r2, r3
 8012d58:	360b      	adds	r6, #11
 8012d5a:	9204      	str	r2, [sp, #16]
 8012d5c:	2e16      	cmp	r6, #22
 8012d5e:	d908      	bls.n	8012d72 <_realloc_r+0x4a>
 8012d60:	3304      	adds	r3, #4
 8012d62:	439e      	bics	r6, r3
 8012d64:	9601      	str	r6, [sp, #4]
 8012d66:	d506      	bpl.n	8012d76 <_realloc_r+0x4e>
 8012d68:	230c      	movs	r3, #12
 8012d6a:	9a03      	ldr	r2, [sp, #12]
 8012d6c:	2700      	movs	r7, #0
 8012d6e:	6013      	str	r3, [r2, #0]
 8012d70:	e7e4      	b.n	8012d3c <_realloc_r+0x14>
 8012d72:	2310      	movs	r3, #16
 8012d74:	9301      	str	r3, [sp, #4]
 8012d76:	9b01      	ldr	r3, [sp, #4]
 8012d78:	9a05      	ldr	r2, [sp, #20]
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	d3f4      	bcc.n	8012d68 <_realloc_r+0x40>
 8012d7e:	9b01      	ldr	r3, [sp, #4]
 8012d80:	9a04      	ldr	r2, [sp, #16]
 8012d82:	4293      	cmp	r3, r2
 8012d84:	dc00      	bgt.n	8012d88 <_realloc_r+0x60>
 8012d86:	e16f      	b.n	8013068 <_realloc_r+0x340>
 8012d88:	9b02      	ldr	r3, [sp, #8]
 8012d8a:	48bc      	ldr	r0, [pc, #752]	; (801307c <_realloc_r+0x354>)
 8012d8c:	189b      	adds	r3, r3, r2
 8012d8e:	6882      	ldr	r2, [r0, #8]
 8012d90:	4694      	mov	ip, r2
 8012d92:	685a      	ldr	r2, [r3, #4]
 8012d94:	459c      	cmp	ip, r3
 8012d96:	d006      	beq.n	8012da6 <_realloc_r+0x7e>
 8012d98:	2501      	movs	r5, #1
 8012d9a:	0011      	movs	r1, r2
 8012d9c:	43a9      	bics	r1, r5
 8012d9e:	1859      	adds	r1, r3, r1
 8012da0:	6849      	ldr	r1, [r1, #4]
 8012da2:	4229      	tst	r1, r5
 8012da4:	d146      	bne.n	8012e34 <_realloc_r+0x10c>
 8012da6:	2103      	movs	r1, #3
 8012da8:	438a      	bics	r2, r1
 8012daa:	9904      	ldr	r1, [sp, #16]
 8012dac:	188e      	adds	r6, r1, r2
 8012dae:	9901      	ldr	r1, [sp, #4]
 8012db0:	459c      	cmp	ip, r3
 8012db2:	d117      	bne.n	8012de4 <_realloc_r+0xbc>
 8012db4:	3110      	adds	r1, #16
 8012db6:	42b1      	cmp	r1, r6
 8012db8:	dc3e      	bgt.n	8012e38 <_realloc_r+0x110>
 8012dba:	9901      	ldr	r1, [sp, #4]
 8012dbc:	9b02      	ldr	r3, [sp, #8]
 8012dbe:	468c      	mov	ip, r1
 8012dc0:	4463      	add	r3, ip
 8012dc2:	6083      	str	r3, [r0, #8]
 8012dc4:	001a      	movs	r2, r3
 8012dc6:	1a73      	subs	r3, r6, r1
 8012dc8:	2601      	movs	r6, #1
 8012dca:	4333      	orrs	r3, r6
 8012dcc:	6053      	str	r3, [r2, #4]
 8012dce:	0023      	movs	r3, r4
 8012dd0:	3b08      	subs	r3, #8
 8012dd2:	685a      	ldr	r2, [r3, #4]
 8012dd4:	9803      	ldr	r0, [sp, #12]
 8012dd6:	4016      	ands	r6, r2
 8012dd8:	430e      	orrs	r6, r1
 8012dda:	605e      	str	r6, [r3, #4]
 8012ddc:	f7ff ff78 	bl	8012cd0 <__malloc_unlock>
 8012de0:	0027      	movs	r7, r4
 8012de2:	e7ab      	b.n	8012d3c <_realloc_r+0x14>
 8012de4:	42b1      	cmp	r1, r6
 8012de6:	dc27      	bgt.n	8012e38 <_realloc_r+0x110>
 8012de8:	68da      	ldr	r2, [r3, #12]
 8012dea:	689b      	ldr	r3, [r3, #8]
 8012dec:	60da      	str	r2, [r3, #12]
 8012dee:	6093      	str	r3, [r2, #8]
 8012df0:	9b01      	ldr	r3, [sp, #4]
 8012df2:	9a02      	ldr	r2, [sp, #8]
 8012df4:	1af4      	subs	r4, r6, r3
 8012df6:	9b02      	ldr	r3, [sp, #8]
 8012df8:	1992      	adds	r2, r2, r6
 8012dfa:	685b      	ldr	r3, [r3, #4]
 8012dfc:	9304      	str	r3, [sp, #16]
 8012dfe:	2301      	movs	r3, #1
 8012e00:	9804      	ldr	r0, [sp, #16]
 8012e02:	4018      	ands	r0, r3
 8012e04:	2c0f      	cmp	r4, #15
 8012e06:	d800      	bhi.n	8012e0a <_realloc_r+0xe2>
 8012e08:	e130      	b.n	801306c <_realloc_r+0x344>
 8012e0a:	9d01      	ldr	r5, [sp, #4]
 8012e0c:	9902      	ldr	r1, [sp, #8]
 8012e0e:	4328      	orrs	r0, r5
 8012e10:	1949      	adds	r1, r1, r5
 8012e12:	9d02      	ldr	r5, [sp, #8]
 8012e14:	431c      	orrs	r4, r3
 8012e16:	6068      	str	r0, [r5, #4]
 8012e18:	604c      	str	r4, [r1, #4]
 8012e1a:	6850      	ldr	r0, [r2, #4]
 8012e1c:	3108      	adds	r1, #8
 8012e1e:	4303      	orrs	r3, r0
 8012e20:	6053      	str	r3, [r2, #4]
 8012e22:	9803      	ldr	r0, [sp, #12]
 8012e24:	f003 fa0e 	bl	8016244 <_free_r>
 8012e28:	9803      	ldr	r0, [sp, #12]
 8012e2a:	f7ff ff51 	bl	8012cd0 <__malloc_unlock>
 8012e2e:	9f02      	ldr	r7, [sp, #8]
 8012e30:	3708      	adds	r7, #8
 8012e32:	e783      	b.n	8012d3c <_realloc_r+0x14>
 8012e34:	2200      	movs	r2, #0
 8012e36:	0013      	movs	r3, r2
 8012e38:	07f9      	lsls	r1, r7, #31
 8012e3a:	d500      	bpl.n	8012e3e <_realloc_r+0x116>
 8012e3c:	e0c6      	b.n	8012fcc <_realloc_r+0x2a4>
 8012e3e:	0021      	movs	r1, r4
 8012e40:	3908      	subs	r1, #8
 8012e42:	680d      	ldr	r5, [r1, #0]
 8012e44:	9902      	ldr	r1, [sp, #8]
 8012e46:	1b4d      	subs	r5, r1, r5
 8012e48:	2103      	movs	r1, #3
 8012e4a:	686f      	ldr	r7, [r5, #4]
 8012e4c:	438f      	bics	r7, r1
 8012e4e:	9904      	ldr	r1, [sp, #16]
 8012e50:	187f      	adds	r7, r7, r1
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d100      	bne.n	8012e58 <_realloc_r+0x130>
 8012e56:	e084      	b.n	8012f62 <_realloc_r+0x23a>
 8012e58:	19d6      	adds	r6, r2, r7
 8012e5a:	459c      	cmp	ip, r3
 8012e5c:	d148      	bne.n	8012ef0 <_realloc_r+0x1c8>
 8012e5e:	9b01      	ldr	r3, [sp, #4]
 8012e60:	3310      	adds	r3, #16
 8012e62:	42b3      	cmp	r3, r6
 8012e64:	dc7d      	bgt.n	8012f62 <_realloc_r+0x23a>
 8012e66:	68aa      	ldr	r2, [r5, #8]
 8012e68:	68eb      	ldr	r3, [r5, #12]
 8012e6a:	002f      	movs	r7, r5
 8012e6c:	60d3      	str	r3, [r2, #12]
 8012e6e:	609a      	str	r2, [r3, #8]
 8012e70:	000a      	movs	r2, r1
 8012e72:	3a04      	subs	r2, #4
 8012e74:	3708      	adds	r7, #8
 8012e76:	2a24      	cmp	r2, #36	; 0x24
 8012e78:	d835      	bhi.n	8012ee6 <_realloc_r+0x1be>
 8012e7a:	003b      	movs	r3, r7
 8012e7c:	2a13      	cmp	r2, #19
 8012e7e:	d908      	bls.n	8012e92 <_realloc_r+0x16a>
 8012e80:	6823      	ldr	r3, [r4, #0]
 8012e82:	60ab      	str	r3, [r5, #8]
 8012e84:	6863      	ldr	r3, [r4, #4]
 8012e86:	60eb      	str	r3, [r5, #12]
 8012e88:	2a1b      	cmp	r2, #27
 8012e8a:	d81a      	bhi.n	8012ec2 <_realloc_r+0x19a>
 8012e8c:	002b      	movs	r3, r5
 8012e8e:	3408      	adds	r4, #8
 8012e90:	3310      	adds	r3, #16
 8012e92:	6822      	ldr	r2, [r4, #0]
 8012e94:	601a      	str	r2, [r3, #0]
 8012e96:	6862      	ldr	r2, [r4, #4]
 8012e98:	605a      	str	r2, [r3, #4]
 8012e9a:	68a2      	ldr	r2, [r4, #8]
 8012e9c:	609a      	str	r2, [r3, #8]
 8012e9e:	9b01      	ldr	r3, [sp, #4]
 8012ea0:	18ea      	adds	r2, r5, r3
 8012ea2:	4b76      	ldr	r3, [pc, #472]	; (801307c <_realloc_r+0x354>)
 8012ea4:	609a      	str	r2, [r3, #8]
 8012ea6:	9b01      	ldr	r3, [sp, #4]
 8012ea8:	1af3      	subs	r3, r6, r3
 8012eaa:	2601      	movs	r6, #1
 8012eac:	4333      	orrs	r3, r6
 8012eae:	6053      	str	r3, [r2, #4]
 8012eb0:	686b      	ldr	r3, [r5, #4]
 8012eb2:	401e      	ands	r6, r3
 8012eb4:	9b01      	ldr	r3, [sp, #4]
 8012eb6:	431e      	orrs	r6, r3
 8012eb8:	606e      	str	r6, [r5, #4]
 8012eba:	9803      	ldr	r0, [sp, #12]
 8012ebc:	f7ff ff08 	bl	8012cd0 <__malloc_unlock>
 8012ec0:	e73c      	b.n	8012d3c <_realloc_r+0x14>
 8012ec2:	68a3      	ldr	r3, [r4, #8]
 8012ec4:	612b      	str	r3, [r5, #16]
 8012ec6:	68e3      	ldr	r3, [r4, #12]
 8012ec8:	616b      	str	r3, [r5, #20]
 8012eca:	2a24      	cmp	r2, #36	; 0x24
 8012ecc:	d003      	beq.n	8012ed6 <_realloc_r+0x1ae>
 8012ece:	002b      	movs	r3, r5
 8012ed0:	3410      	adds	r4, #16
 8012ed2:	3318      	adds	r3, #24
 8012ed4:	e7dd      	b.n	8012e92 <_realloc_r+0x16a>
 8012ed6:	6923      	ldr	r3, [r4, #16]
 8012ed8:	61ab      	str	r3, [r5, #24]
 8012eda:	002b      	movs	r3, r5
 8012edc:	6962      	ldr	r2, [r4, #20]
 8012ede:	3320      	adds	r3, #32
 8012ee0:	61ea      	str	r2, [r5, #28]
 8012ee2:	3418      	adds	r4, #24
 8012ee4:	e7d5      	b.n	8012e92 <_realloc_r+0x16a>
 8012ee6:	0021      	movs	r1, r4
 8012ee8:	0038      	movs	r0, r7
 8012eea:	f003 fdac 	bl	8016a46 <memmove>
 8012eee:	e7d6      	b.n	8012e9e <_realloc_r+0x176>
 8012ef0:	9a01      	ldr	r2, [sp, #4]
 8012ef2:	42b2      	cmp	r2, r6
 8012ef4:	dc35      	bgt.n	8012f62 <_realloc_r+0x23a>
 8012ef6:	0028      	movs	r0, r5
 8012ef8:	68da      	ldr	r2, [r3, #12]
 8012efa:	689b      	ldr	r3, [r3, #8]
 8012efc:	3008      	adds	r0, #8
 8012efe:	60da      	str	r2, [r3, #12]
 8012f00:	6093      	str	r3, [r2, #8]
 8012f02:	68aa      	ldr	r2, [r5, #8]
 8012f04:	68eb      	ldr	r3, [r5, #12]
 8012f06:	60d3      	str	r3, [r2, #12]
 8012f08:	609a      	str	r2, [r3, #8]
 8012f0a:	9a04      	ldr	r2, [sp, #16]
 8012f0c:	3a04      	subs	r2, #4
 8012f0e:	2a24      	cmp	r2, #36	; 0x24
 8012f10:	d823      	bhi.n	8012f5a <_realloc_r+0x232>
 8012f12:	2a13      	cmp	r2, #19
 8012f14:	d907      	bls.n	8012f26 <_realloc_r+0x1fe>
 8012f16:	6823      	ldr	r3, [r4, #0]
 8012f18:	60ab      	str	r3, [r5, #8]
 8012f1a:	6863      	ldr	r3, [r4, #4]
 8012f1c:	60eb      	str	r3, [r5, #12]
 8012f1e:	2a1b      	cmp	r2, #27
 8012f20:	d809      	bhi.n	8012f36 <_realloc_r+0x20e>
 8012f22:	3408      	adds	r4, #8
 8012f24:	3008      	adds	r0, #8
 8012f26:	6823      	ldr	r3, [r4, #0]
 8012f28:	6003      	str	r3, [r0, #0]
 8012f2a:	6863      	ldr	r3, [r4, #4]
 8012f2c:	6043      	str	r3, [r0, #4]
 8012f2e:	68a3      	ldr	r3, [r4, #8]
 8012f30:	6083      	str	r3, [r0, #8]
 8012f32:	9502      	str	r5, [sp, #8]
 8012f34:	e75c      	b.n	8012df0 <_realloc_r+0xc8>
 8012f36:	68a3      	ldr	r3, [r4, #8]
 8012f38:	612b      	str	r3, [r5, #16]
 8012f3a:	68e3      	ldr	r3, [r4, #12]
 8012f3c:	616b      	str	r3, [r5, #20]
 8012f3e:	2a24      	cmp	r2, #36	; 0x24
 8012f40:	d003      	beq.n	8012f4a <_realloc_r+0x222>
 8012f42:	0028      	movs	r0, r5
 8012f44:	3410      	adds	r4, #16
 8012f46:	3018      	adds	r0, #24
 8012f48:	e7ed      	b.n	8012f26 <_realloc_r+0x1fe>
 8012f4a:	0028      	movs	r0, r5
 8012f4c:	6923      	ldr	r3, [r4, #16]
 8012f4e:	3020      	adds	r0, #32
 8012f50:	61ab      	str	r3, [r5, #24]
 8012f52:	6963      	ldr	r3, [r4, #20]
 8012f54:	3418      	adds	r4, #24
 8012f56:	61eb      	str	r3, [r5, #28]
 8012f58:	e7e5      	b.n	8012f26 <_realloc_r+0x1fe>
 8012f5a:	0021      	movs	r1, r4
 8012f5c:	f003 fd73 	bl	8016a46 <memmove>
 8012f60:	e7e7      	b.n	8012f32 <_realloc_r+0x20a>
 8012f62:	9b01      	ldr	r3, [sp, #4]
 8012f64:	42bb      	cmp	r3, r7
 8012f66:	dc31      	bgt.n	8012fcc <_realloc_r+0x2a4>
 8012f68:	0028      	movs	r0, r5
 8012f6a:	68aa      	ldr	r2, [r5, #8]
 8012f6c:	68eb      	ldr	r3, [r5, #12]
 8012f6e:	3008      	adds	r0, #8
 8012f70:	60d3      	str	r3, [r2, #12]
 8012f72:	609a      	str	r2, [r3, #8]
 8012f74:	9a04      	ldr	r2, [sp, #16]
 8012f76:	3a04      	subs	r2, #4
 8012f78:	2a24      	cmp	r2, #36	; 0x24
 8012f7a:	d823      	bhi.n	8012fc4 <_realloc_r+0x29c>
 8012f7c:	2a13      	cmp	r2, #19
 8012f7e:	d907      	bls.n	8012f90 <_realloc_r+0x268>
 8012f80:	6823      	ldr	r3, [r4, #0]
 8012f82:	60ab      	str	r3, [r5, #8]
 8012f84:	6863      	ldr	r3, [r4, #4]
 8012f86:	60eb      	str	r3, [r5, #12]
 8012f88:	2a1b      	cmp	r2, #27
 8012f8a:	d809      	bhi.n	8012fa0 <_realloc_r+0x278>
 8012f8c:	3408      	adds	r4, #8
 8012f8e:	3008      	adds	r0, #8
 8012f90:	6823      	ldr	r3, [r4, #0]
 8012f92:	6003      	str	r3, [r0, #0]
 8012f94:	6863      	ldr	r3, [r4, #4]
 8012f96:	6043      	str	r3, [r0, #4]
 8012f98:	68a3      	ldr	r3, [r4, #8]
 8012f9a:	6083      	str	r3, [r0, #8]
 8012f9c:	003e      	movs	r6, r7
 8012f9e:	e7c8      	b.n	8012f32 <_realloc_r+0x20a>
 8012fa0:	68a3      	ldr	r3, [r4, #8]
 8012fa2:	612b      	str	r3, [r5, #16]
 8012fa4:	68e3      	ldr	r3, [r4, #12]
 8012fa6:	616b      	str	r3, [r5, #20]
 8012fa8:	2a24      	cmp	r2, #36	; 0x24
 8012faa:	d003      	beq.n	8012fb4 <_realloc_r+0x28c>
 8012fac:	0028      	movs	r0, r5
 8012fae:	3410      	adds	r4, #16
 8012fb0:	3018      	adds	r0, #24
 8012fb2:	e7ed      	b.n	8012f90 <_realloc_r+0x268>
 8012fb4:	0028      	movs	r0, r5
 8012fb6:	6923      	ldr	r3, [r4, #16]
 8012fb8:	3020      	adds	r0, #32
 8012fba:	61ab      	str	r3, [r5, #24]
 8012fbc:	6963      	ldr	r3, [r4, #20]
 8012fbe:	3418      	adds	r4, #24
 8012fc0:	61eb      	str	r3, [r5, #28]
 8012fc2:	e7e5      	b.n	8012f90 <_realloc_r+0x268>
 8012fc4:	0021      	movs	r1, r4
 8012fc6:	f003 fd3e 	bl	8016a46 <memmove>
 8012fca:	e7e7      	b.n	8012f9c <_realloc_r+0x274>
 8012fcc:	9905      	ldr	r1, [sp, #20]
 8012fce:	9803      	ldr	r0, [sp, #12]
 8012fd0:	f7ff fc2c 	bl	801282c <_malloc_r>
 8012fd4:	1e07      	subs	r7, r0, #0
 8012fd6:	d100      	bne.n	8012fda <_realloc_r+0x2b2>
 8012fd8:	e76f      	b.n	8012eba <_realloc_r+0x192>
 8012fda:	0023      	movs	r3, r4
 8012fdc:	2201      	movs	r2, #1
 8012fde:	3b08      	subs	r3, #8
 8012fe0:	685b      	ldr	r3, [r3, #4]
 8012fe2:	4393      	bics	r3, r2
 8012fe4:	9a02      	ldr	r2, [sp, #8]
 8012fe6:	18d3      	adds	r3, r2, r3
 8012fe8:	0002      	movs	r2, r0
 8012fea:	3a08      	subs	r2, #8
 8012fec:	4293      	cmp	r3, r2
 8012fee:	d105      	bne.n	8012ffc <_realloc_r+0x2d4>
 8012ff0:	685e      	ldr	r6, [r3, #4]
 8012ff2:	2303      	movs	r3, #3
 8012ff4:	439e      	bics	r6, r3
 8012ff6:	9b04      	ldr	r3, [sp, #16]
 8012ff8:	18f6      	adds	r6, r6, r3
 8012ffa:	e6f9      	b.n	8012df0 <_realloc_r+0xc8>
 8012ffc:	9a04      	ldr	r2, [sp, #16]
 8012ffe:	3a04      	subs	r2, #4
 8013000:	2a24      	cmp	r2, #36	; 0x24
 8013002:	d82d      	bhi.n	8013060 <_realloc_r+0x338>
 8013004:	2a13      	cmp	r2, #19
 8013006:	d928      	bls.n	801305a <_realloc_r+0x332>
 8013008:	6823      	ldr	r3, [r4, #0]
 801300a:	6003      	str	r3, [r0, #0]
 801300c:	6863      	ldr	r3, [r4, #4]
 801300e:	6043      	str	r3, [r0, #4]
 8013010:	2a1b      	cmp	r2, #27
 8013012:	d80e      	bhi.n	8013032 <_realloc_r+0x30a>
 8013014:	0022      	movs	r2, r4
 8013016:	0003      	movs	r3, r0
 8013018:	3208      	adds	r2, #8
 801301a:	3308      	adds	r3, #8
 801301c:	6811      	ldr	r1, [r2, #0]
 801301e:	6019      	str	r1, [r3, #0]
 8013020:	6851      	ldr	r1, [r2, #4]
 8013022:	6059      	str	r1, [r3, #4]
 8013024:	6892      	ldr	r2, [r2, #8]
 8013026:	609a      	str	r2, [r3, #8]
 8013028:	0021      	movs	r1, r4
 801302a:	9803      	ldr	r0, [sp, #12]
 801302c:	f003 f90a 	bl	8016244 <_free_r>
 8013030:	e743      	b.n	8012eba <_realloc_r+0x192>
 8013032:	68a3      	ldr	r3, [r4, #8]
 8013034:	6083      	str	r3, [r0, #8]
 8013036:	68e3      	ldr	r3, [r4, #12]
 8013038:	60c3      	str	r3, [r0, #12]
 801303a:	2a24      	cmp	r2, #36	; 0x24
 801303c:	d004      	beq.n	8013048 <_realloc_r+0x320>
 801303e:	0022      	movs	r2, r4
 8013040:	0003      	movs	r3, r0
 8013042:	3210      	adds	r2, #16
 8013044:	3310      	adds	r3, #16
 8013046:	e7e9      	b.n	801301c <_realloc_r+0x2f4>
 8013048:	6923      	ldr	r3, [r4, #16]
 801304a:	0022      	movs	r2, r4
 801304c:	6103      	str	r3, [r0, #16]
 801304e:	0003      	movs	r3, r0
 8013050:	6961      	ldr	r1, [r4, #20]
 8013052:	3218      	adds	r2, #24
 8013054:	3318      	adds	r3, #24
 8013056:	6141      	str	r1, [r0, #20]
 8013058:	e7e0      	b.n	801301c <_realloc_r+0x2f4>
 801305a:	0003      	movs	r3, r0
 801305c:	0022      	movs	r2, r4
 801305e:	e7dd      	b.n	801301c <_realloc_r+0x2f4>
 8013060:	0021      	movs	r1, r4
 8013062:	f003 fcf0 	bl	8016a46 <memmove>
 8013066:	e7df      	b.n	8013028 <_realloc_r+0x300>
 8013068:	9e04      	ldr	r6, [sp, #16]
 801306a:	e6c1      	b.n	8012df0 <_realloc_r+0xc8>
 801306c:	9902      	ldr	r1, [sp, #8]
 801306e:	4306      	orrs	r6, r0
 8013070:	604e      	str	r6, [r1, #4]
 8013072:	6851      	ldr	r1, [r2, #4]
 8013074:	430b      	orrs	r3, r1
 8013076:	6053      	str	r3, [r2, #4]
 8013078:	e6d6      	b.n	8012e28 <_realloc_r+0x100>
 801307a:	46c0      	nop			; (mov r8, r8)
 801307c:	20000664 	.word	0x20000664

08013080 <_sbrk_r>:
 8013080:	2300      	movs	r3, #0
 8013082:	b570      	push	{r4, r5, r6, lr}
 8013084:	4c06      	ldr	r4, [pc, #24]	; (80130a0 <_sbrk_r+0x20>)
 8013086:	0005      	movs	r5, r0
 8013088:	0008      	movs	r0, r1
 801308a:	6023      	str	r3, [r4, #0]
 801308c:	f004 f9c0 	bl	8017410 <_sbrk>
 8013090:	1c43      	adds	r3, r0, #1
 8013092:	d103      	bne.n	801309c <_sbrk_r+0x1c>
 8013094:	6823      	ldr	r3, [r4, #0]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d000      	beq.n	801309c <_sbrk_r+0x1c>
 801309a:	602b      	str	r3, [r5, #0]
 801309c:	bd70      	pop	{r4, r5, r6, pc}
 801309e:	46c0      	nop			; (mov r8, r8)
 80130a0:	200073d4 	.word	0x200073d4

080130a4 <sprintf>:
 80130a4:	b40e      	push	{r1, r2, r3}
 80130a6:	b500      	push	{lr}
 80130a8:	490b      	ldr	r1, [pc, #44]	; (80130d8 <sprintf+0x34>)
 80130aa:	b09c      	sub	sp, #112	; 0x70
 80130ac:	ab1d      	add	r3, sp, #116	; 0x74
 80130ae:	9002      	str	r0, [sp, #8]
 80130b0:	9006      	str	r0, [sp, #24]
 80130b2:	9107      	str	r1, [sp, #28]
 80130b4:	9104      	str	r1, [sp, #16]
 80130b6:	4809      	ldr	r0, [pc, #36]	; (80130dc <sprintf+0x38>)
 80130b8:	4909      	ldr	r1, [pc, #36]	; (80130e0 <sprintf+0x3c>)
 80130ba:	cb04      	ldmia	r3!, {r2}
 80130bc:	9105      	str	r1, [sp, #20]
 80130be:	6800      	ldr	r0, [r0, #0]
 80130c0:	a902      	add	r1, sp, #8
 80130c2:	9301      	str	r3, [sp, #4]
 80130c4:	f000 ff78 	bl	8013fb8 <_svfprintf_r>
 80130c8:	2300      	movs	r3, #0
 80130ca:	9a02      	ldr	r2, [sp, #8]
 80130cc:	7013      	strb	r3, [r2, #0]
 80130ce:	b01c      	add	sp, #112	; 0x70
 80130d0:	bc08      	pop	{r3}
 80130d2:	b003      	add	sp, #12
 80130d4:	4718      	bx	r3
 80130d6:	46c0      	nop			; (mov r8, r8)
 80130d8:	7fffffff 	.word	0x7fffffff
 80130dc:	200000c8 	.word	0x200000c8
 80130e0:	ffff0208 	.word	0xffff0208

080130e4 <strcat>:
 80130e4:	0002      	movs	r2, r0
 80130e6:	b510      	push	{r4, lr}
 80130e8:	7813      	ldrb	r3, [r2, #0]
 80130ea:	1c54      	adds	r4, r2, #1
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d105      	bne.n	80130fc <strcat+0x18>
 80130f0:	5ccc      	ldrb	r4, [r1, r3]
 80130f2:	54d4      	strb	r4, [r2, r3]
 80130f4:	3301      	adds	r3, #1
 80130f6:	2c00      	cmp	r4, #0
 80130f8:	d1fa      	bne.n	80130f0 <strcat+0xc>
 80130fa:	bd10      	pop	{r4, pc}
 80130fc:	0022      	movs	r2, r4
 80130fe:	e7f3      	b.n	80130e8 <strcat+0x4>

08013100 <strchr>:
 8013100:	b2c9      	uxtb	r1, r1
 8013102:	7803      	ldrb	r3, [r0, #0]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d004      	beq.n	8013112 <strchr+0x12>
 8013108:	428b      	cmp	r3, r1
 801310a:	d100      	bne.n	801310e <strchr+0xe>
 801310c:	4770      	bx	lr
 801310e:	3001      	adds	r0, #1
 8013110:	e7f7      	b.n	8013102 <strchr+0x2>
 8013112:	424b      	negs	r3, r1
 8013114:	4159      	adcs	r1, r3
 8013116:	4249      	negs	r1, r1
 8013118:	4008      	ands	r0, r1
 801311a:	e7f7      	b.n	801310c <strchr+0xc>

0801311c <strcpy>:
 801311c:	0003      	movs	r3, r0
 801311e:	780a      	ldrb	r2, [r1, #0]
 8013120:	3101      	adds	r1, #1
 8013122:	701a      	strb	r2, [r3, #0]
 8013124:	3301      	adds	r3, #1
 8013126:	2a00      	cmp	r2, #0
 8013128:	d1f9      	bne.n	801311e <strcpy+0x2>
 801312a:	4770      	bx	lr

0801312c <strncmp>:
 801312c:	2300      	movs	r3, #0
 801312e:	b530      	push	{r4, r5, lr}
 8013130:	429a      	cmp	r2, r3
 8013132:	d00a      	beq.n	801314a <strncmp+0x1e>
 8013134:	3a01      	subs	r2, #1
 8013136:	5cc4      	ldrb	r4, [r0, r3]
 8013138:	5ccd      	ldrb	r5, [r1, r3]
 801313a:	42ac      	cmp	r4, r5
 801313c:	d104      	bne.n	8013148 <strncmp+0x1c>
 801313e:	4293      	cmp	r3, r2
 8013140:	d002      	beq.n	8013148 <strncmp+0x1c>
 8013142:	3301      	adds	r3, #1
 8013144:	2c00      	cmp	r4, #0
 8013146:	d1f6      	bne.n	8013136 <strncmp+0xa>
 8013148:	1b63      	subs	r3, r4, r5
 801314a:	0018      	movs	r0, r3
 801314c:	bd30      	pop	{r4, r5, pc}

0801314e <strncpy>:
 801314e:	b530      	push	{r4, r5, lr}
 8013150:	0005      	movs	r5, r0
 8013152:	2a00      	cmp	r2, #0
 8013154:	d100      	bne.n	8013158 <strncpy+0xa>
 8013156:	bd30      	pop	{r4, r5, pc}
 8013158:	780c      	ldrb	r4, [r1, #0]
 801315a:	3a01      	subs	r2, #1
 801315c:	1c6b      	adds	r3, r5, #1
 801315e:	702c      	strb	r4, [r5, #0]
 8013160:	3101      	adds	r1, #1
 8013162:	2c00      	cmp	r4, #0
 8013164:	d105      	bne.n	8013172 <strncpy+0x24>
 8013166:	189a      	adds	r2, r3, r2
 8013168:	429a      	cmp	r2, r3
 801316a:	d0f4      	beq.n	8013156 <strncpy+0x8>
 801316c:	701c      	strb	r4, [r3, #0]
 801316e:	3301      	adds	r3, #1
 8013170:	e7fa      	b.n	8013168 <strncpy+0x1a>
 8013172:	001d      	movs	r5, r3
 8013174:	e7ed      	b.n	8013152 <strncpy+0x4>
	...

08013178 <sulp>:
 8013178:	b570      	push	{r4, r5, r6, lr}
 801317a:	0016      	movs	r6, r2
 801317c:	000d      	movs	r5, r1
 801317e:	f003 ff17 	bl	8016fb0 <__ulp>
 8013182:	2e00      	cmp	r6, #0
 8013184:	d00d      	beq.n	80131a2 <sulp+0x2a>
 8013186:	236b      	movs	r3, #107	; 0x6b
 8013188:	006a      	lsls	r2, r5, #1
 801318a:	0d52      	lsrs	r2, r2, #21
 801318c:	1a9b      	subs	r3, r3, r2
 801318e:	2b00      	cmp	r3, #0
 8013190:	dd07      	ble.n	80131a2 <sulp+0x2a>
 8013192:	2400      	movs	r4, #0
 8013194:	4a03      	ldr	r2, [pc, #12]	; (80131a4 <sulp+0x2c>)
 8013196:	051b      	lsls	r3, r3, #20
 8013198:	189d      	adds	r5, r3, r2
 801319a:	002b      	movs	r3, r5
 801319c:	0022      	movs	r2, r4
 801319e:	f7ee fe49 	bl	8001e34 <__aeabi_dmul>
 80131a2:	bd70      	pop	{r4, r5, r6, pc}
 80131a4:	3ff00000 	.word	0x3ff00000

080131a8 <_strtod_l>:
 80131a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131aa:	b0a7      	sub	sp, #156	; 0x9c
 80131ac:	9307      	str	r3, [sp, #28]
 80131ae:	2300      	movs	r3, #0
 80131b0:	9004      	str	r0, [sp, #16]
 80131b2:	9807      	ldr	r0, [sp, #28]
 80131b4:	9322      	str	r3, [sp, #136]	; 0x88
 80131b6:	9106      	str	r1, [sp, #24]
 80131b8:	921d      	str	r2, [sp, #116]	; 0x74
 80131ba:	f003 fc28 	bl	8016a0e <__localeconv_l>
 80131be:	0005      	movs	r5, r0
 80131c0:	6800      	ldr	r0, [r0, #0]
 80131c2:	f7ec ffa9 	bl	8000118 <strlen>
 80131c6:	2600      	movs	r6, #0
 80131c8:	2700      	movs	r7, #0
 80131ca:	9b06      	ldr	r3, [sp, #24]
 80131cc:	9005      	str	r0, [sp, #20]
 80131ce:	9321      	str	r3, [sp, #132]	; 0x84
 80131d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80131d2:	781a      	ldrb	r2, [r3, #0]
 80131d4:	2a0d      	cmp	r2, #13
 80131d6:	d839      	bhi.n	801324c <_strtod_l+0xa4>
 80131d8:	2a09      	cmp	r2, #9
 80131da:	d23d      	bcs.n	8013258 <_strtod_l+0xb0>
 80131dc:	2a00      	cmp	r2, #0
 80131de:	d044      	beq.n	801326a <_strtod_l+0xc2>
 80131e0:	2300      	movs	r3, #0
 80131e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80131e4:	2200      	movs	r2, #0
 80131e6:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80131e8:	920c      	str	r2, [sp, #48]	; 0x30
 80131ea:	7823      	ldrb	r3, [r4, #0]
 80131ec:	2b30      	cmp	r3, #48	; 0x30
 80131ee:	d000      	beq.n	80131f2 <_strtod_l+0x4a>
 80131f0:	e07e      	b.n	80132f0 <_strtod_l+0x148>
 80131f2:	7863      	ldrb	r3, [r4, #1]
 80131f4:	2b58      	cmp	r3, #88	; 0x58
 80131f6:	d002      	beq.n	80131fe <_strtod_l+0x56>
 80131f8:	2b78      	cmp	r3, #120	; 0x78
 80131fa:	d000      	beq.n	80131fe <_strtod_l+0x56>
 80131fc:	e06e      	b.n	80132dc <_strtod_l+0x134>
 80131fe:	9b07      	ldr	r3, [sp, #28]
 8013200:	4a96      	ldr	r2, [pc, #600]	; (801345c <_strtod_l+0x2b4>)
 8013202:	9302      	str	r3, [sp, #8]
 8013204:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013206:	a921      	add	r1, sp, #132	; 0x84
 8013208:	9301      	str	r3, [sp, #4]
 801320a:	ab22      	add	r3, sp, #136	; 0x88
 801320c:	9300      	str	r3, [sp, #0]
 801320e:	9804      	ldr	r0, [sp, #16]
 8013210:	ab23      	add	r3, sp, #140	; 0x8c
 8013212:	f003 f914 	bl	801643e <__gethex>
 8013216:	2507      	movs	r5, #7
 8013218:	9005      	str	r0, [sp, #20]
 801321a:	4005      	ands	r5, r0
 801321c:	d005      	beq.n	801322a <_strtod_l+0x82>
 801321e:	2d06      	cmp	r5, #6
 8013220:	d12f      	bne.n	8013282 <_strtod_l+0xda>
 8013222:	2300      	movs	r3, #0
 8013224:	3401      	adds	r4, #1
 8013226:	9421      	str	r4, [sp, #132]	; 0x84
 8013228:	9313      	str	r3, [sp, #76]	; 0x4c
 801322a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801322c:	2b00      	cmp	r3, #0
 801322e:	d002      	beq.n	8013236 <_strtod_l+0x8e>
 8013230:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013232:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013234:	601a      	str	r2, [r3, #0]
 8013236:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013238:	2b00      	cmp	r3, #0
 801323a:	d01d      	beq.n	8013278 <_strtod_l+0xd0>
 801323c:	2380      	movs	r3, #128	; 0x80
 801323e:	0032      	movs	r2, r6
 8013240:	061b      	lsls	r3, r3, #24
 8013242:	18fb      	adds	r3, r7, r3
 8013244:	0010      	movs	r0, r2
 8013246:	0019      	movs	r1, r3
 8013248:	b027      	add	sp, #156	; 0x9c
 801324a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801324c:	2a2b      	cmp	r2, #43	; 0x2b
 801324e:	d016      	beq.n	801327e <_strtod_l+0xd6>
 8013250:	2a2d      	cmp	r2, #45	; 0x2d
 8013252:	d003      	beq.n	801325c <_strtod_l+0xb4>
 8013254:	2a20      	cmp	r2, #32
 8013256:	d1c3      	bne.n	80131e0 <_strtod_l+0x38>
 8013258:	3301      	adds	r3, #1
 801325a:	e7b8      	b.n	80131ce <_strtod_l+0x26>
 801325c:	2201      	movs	r2, #1
 801325e:	9213      	str	r2, [sp, #76]	; 0x4c
 8013260:	1c5a      	adds	r2, r3, #1
 8013262:	9221      	str	r2, [sp, #132]	; 0x84
 8013264:	785b      	ldrb	r3, [r3, #1]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d1bc      	bne.n	80131e4 <_strtod_l+0x3c>
 801326a:	9b06      	ldr	r3, [sp, #24]
 801326c:	9321      	str	r3, [sp, #132]	; 0x84
 801326e:	2300      	movs	r3, #0
 8013270:	9313      	str	r3, [sp, #76]	; 0x4c
 8013272:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013274:	2b00      	cmp	r3, #0
 8013276:	d1db      	bne.n	8013230 <_strtod_l+0x88>
 8013278:	0032      	movs	r2, r6
 801327a:	003b      	movs	r3, r7
 801327c:	e7e2      	b.n	8013244 <_strtod_l+0x9c>
 801327e:	2200      	movs	r2, #0
 8013280:	e7ed      	b.n	801325e <_strtod_l+0xb6>
 8013282:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013284:	2a00      	cmp	r2, #0
 8013286:	d007      	beq.n	8013298 <_strtod_l+0xf0>
 8013288:	2135      	movs	r1, #53	; 0x35
 801328a:	a824      	add	r0, sp, #144	; 0x90
 801328c:	f003 ff7d 	bl	801718a <__copybits>
 8013290:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013292:	9804      	ldr	r0, [sp, #16]
 8013294:	f003 fc12 	bl	8016abc <_Bfree>
 8013298:	1e68      	subs	r0, r5, #1
 801329a:	2804      	cmp	r0, #4
 801329c:	d806      	bhi.n	80132ac <_strtod_l+0x104>
 801329e:	f7ec ff43 	bl	8000128 <__gnu_thumb1_case_uqi>
 80132a2:	030c      	.short	0x030c
 80132a4:	1917      	.short	0x1917
 80132a6:	0c          	.byte	0x0c
 80132a7:	00          	.byte	0x00
 80132a8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80132aa:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80132ac:	9b05      	ldr	r3, [sp, #20]
 80132ae:	071b      	lsls	r3, r3, #28
 80132b0:	d5bb      	bpl.n	801322a <_strtod_l+0x82>
 80132b2:	2380      	movs	r3, #128	; 0x80
 80132b4:	061b      	lsls	r3, r3, #24
 80132b6:	431f      	orrs	r7, r3
 80132b8:	e7b7      	b.n	801322a <_strtod_l+0x82>
 80132ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80132bc:	4a68      	ldr	r2, [pc, #416]	; (8013460 <_strtod_l+0x2b8>)
 80132be:	4969      	ldr	r1, [pc, #420]	; (8013464 <_strtod_l+0x2bc>)
 80132c0:	401a      	ands	r2, r3
 80132c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80132c4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80132c6:	185b      	adds	r3, r3, r1
 80132c8:	051b      	lsls	r3, r3, #20
 80132ca:	431a      	orrs	r2, r3
 80132cc:	0017      	movs	r7, r2
 80132ce:	e7ed      	b.n	80132ac <_strtod_l+0x104>
 80132d0:	4f65      	ldr	r7, [pc, #404]	; (8013468 <_strtod_l+0x2c0>)
 80132d2:	e7eb      	b.n	80132ac <_strtod_l+0x104>
 80132d4:	2601      	movs	r6, #1
 80132d6:	4f65      	ldr	r7, [pc, #404]	; (801346c <_strtod_l+0x2c4>)
 80132d8:	4276      	negs	r6, r6
 80132da:	e7e7      	b.n	80132ac <_strtod_l+0x104>
 80132dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132de:	1c5a      	adds	r2, r3, #1
 80132e0:	9221      	str	r2, [sp, #132]	; 0x84
 80132e2:	785b      	ldrb	r3, [r3, #1]
 80132e4:	2b30      	cmp	r3, #48	; 0x30
 80132e6:	d0f9      	beq.n	80132dc <_strtod_l+0x134>
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d09e      	beq.n	801322a <_strtod_l+0x82>
 80132ec:	2301      	movs	r3, #1
 80132ee:	930c      	str	r3, [sp, #48]	; 0x30
 80132f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132f2:	220a      	movs	r2, #10
 80132f4:	9312      	str	r3, [sp, #72]	; 0x48
 80132f6:	2300      	movs	r3, #0
 80132f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80132fa:	9308      	str	r3, [sp, #32]
 80132fc:	930a      	str	r3, [sp, #40]	; 0x28
 80132fe:	9821      	ldr	r0, [sp, #132]	; 0x84
 8013300:	7804      	ldrb	r4, [r0, #0]
 8013302:	0023      	movs	r3, r4
 8013304:	3b30      	subs	r3, #48	; 0x30
 8013306:	b2d9      	uxtb	r1, r3
 8013308:	2909      	cmp	r1, #9
 801330a:	d934      	bls.n	8013376 <_strtod_l+0x1ce>
 801330c:	9a05      	ldr	r2, [sp, #20]
 801330e:	6829      	ldr	r1, [r5, #0]
 8013310:	f7ff ff0c 	bl	801312c <strncmp>
 8013314:	2800      	cmp	r0, #0
 8013316:	d040      	beq.n	801339a <_strtod_l+0x1f2>
 8013318:	2000      	movs	r0, #0
 801331a:	0023      	movs	r3, r4
 801331c:	4684      	mov	ip, r0
 801331e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013320:	9007      	str	r0, [sp, #28]
 8013322:	9205      	str	r2, [sp, #20]
 8013324:	2220      	movs	r2, #32
 8013326:	0019      	movs	r1, r3
 8013328:	4391      	bics	r1, r2
 801332a:	000a      	movs	r2, r1
 801332c:	2100      	movs	r1, #0
 801332e:	2a45      	cmp	r2, #69	; 0x45
 8013330:	d000      	beq.n	8013334 <_strtod_l+0x18c>
 8013332:	e0bf      	b.n	80134b4 <_strtod_l+0x30c>
 8013334:	9b05      	ldr	r3, [sp, #20]
 8013336:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013338:	4303      	orrs	r3, r0
 801333a:	4313      	orrs	r3, r2
 801333c:	428b      	cmp	r3, r1
 801333e:	d094      	beq.n	801326a <_strtod_l+0xc2>
 8013340:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013342:	9306      	str	r3, [sp, #24]
 8013344:	3301      	adds	r3, #1
 8013346:	9321      	str	r3, [sp, #132]	; 0x84
 8013348:	9b06      	ldr	r3, [sp, #24]
 801334a:	785b      	ldrb	r3, [r3, #1]
 801334c:	2b2b      	cmp	r3, #43	; 0x2b
 801334e:	d100      	bne.n	8013352 <_strtod_l+0x1aa>
 8013350:	e082      	b.n	8013458 <_strtod_l+0x2b0>
 8013352:	000c      	movs	r4, r1
 8013354:	2b2d      	cmp	r3, #45	; 0x2d
 8013356:	d105      	bne.n	8013364 <_strtod_l+0x1bc>
 8013358:	2401      	movs	r4, #1
 801335a:	9b06      	ldr	r3, [sp, #24]
 801335c:	3302      	adds	r3, #2
 801335e:	9321      	str	r3, [sp, #132]	; 0x84
 8013360:	9b06      	ldr	r3, [sp, #24]
 8013362:	789b      	ldrb	r3, [r3, #2]
 8013364:	001a      	movs	r2, r3
 8013366:	3a30      	subs	r2, #48	; 0x30
 8013368:	2a09      	cmp	r2, #9
 801336a:	d800      	bhi.n	801336e <_strtod_l+0x1c6>
 801336c:	e084      	b.n	8013478 <_strtod_l+0x2d0>
 801336e:	9a06      	ldr	r2, [sp, #24]
 8013370:	2100      	movs	r1, #0
 8013372:	9221      	str	r2, [sp, #132]	; 0x84
 8013374:	e09e      	b.n	80134b4 <_strtod_l+0x30c>
 8013376:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013378:	2908      	cmp	r1, #8
 801337a:	dc09      	bgt.n	8013390 <_strtod_l+0x1e8>
 801337c:	9908      	ldr	r1, [sp, #32]
 801337e:	4351      	muls	r1, r2
 8013380:	18cb      	adds	r3, r1, r3
 8013382:	9308      	str	r3, [sp, #32]
 8013384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013386:	3001      	adds	r0, #1
 8013388:	3301      	adds	r3, #1
 801338a:	930a      	str	r3, [sp, #40]	; 0x28
 801338c:	9021      	str	r0, [sp, #132]	; 0x84
 801338e:	e7b6      	b.n	80132fe <_strtod_l+0x156>
 8013390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013392:	4351      	muls	r1, r2
 8013394:	18cb      	adds	r3, r1, r3
 8013396:	930b      	str	r3, [sp, #44]	; 0x2c
 8013398:	e7f4      	b.n	8013384 <_strtod_l+0x1dc>
 801339a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801339c:	9b05      	ldr	r3, [sp, #20]
 801339e:	4694      	mov	ip, r2
 80133a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133a2:	4463      	add	r3, ip
 80133a4:	9321      	str	r3, [sp, #132]	; 0x84
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	2a00      	cmp	r2, #0
 80133aa:	d036      	beq.n	801341a <_strtod_l+0x272>
 80133ac:	4684      	mov	ip, r0
 80133ae:	9205      	str	r2, [sp, #20]
 80133b0:	001a      	movs	r2, r3
 80133b2:	3a30      	subs	r2, #48	; 0x30
 80133b4:	2a09      	cmp	r2, #9
 80133b6:	d912      	bls.n	80133de <_strtod_l+0x236>
 80133b8:	2201      	movs	r2, #1
 80133ba:	9207      	str	r2, [sp, #28]
 80133bc:	e7b2      	b.n	8013324 <_strtod_l+0x17c>
 80133be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80133c0:	3001      	adds	r0, #1
 80133c2:	1c5a      	adds	r2, r3, #1
 80133c4:	9221      	str	r2, [sp, #132]	; 0x84
 80133c6:	785b      	ldrb	r3, [r3, #1]
 80133c8:	2b30      	cmp	r3, #48	; 0x30
 80133ca:	d0f8      	beq.n	80133be <_strtod_l+0x216>
 80133cc:	001a      	movs	r2, r3
 80133ce:	3a31      	subs	r2, #49	; 0x31
 80133d0:	2a08      	cmp	r2, #8
 80133d2:	d83c      	bhi.n	801344e <_strtod_l+0x2a6>
 80133d4:	4684      	mov	ip, r0
 80133d6:	2000      	movs	r0, #0
 80133d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80133da:	9005      	str	r0, [sp, #20]
 80133dc:	9212      	str	r2, [sp, #72]	; 0x48
 80133de:	3b30      	subs	r3, #48	; 0x30
 80133e0:	1c42      	adds	r2, r0, #1
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d013      	beq.n	801340e <_strtod_l+0x266>
 80133e6:	210a      	movs	r1, #10
 80133e8:	4494      	add	ip, r2
 80133ea:	9a05      	ldr	r2, [sp, #20]
 80133ec:	1885      	adds	r5, r0, r2
 80133ee:	42aa      	cmp	r2, r5
 80133f0:	d115      	bne.n	801341e <_strtod_l+0x276>
 80133f2:	9905      	ldr	r1, [sp, #20]
 80133f4:	9a05      	ldr	r2, [sp, #20]
 80133f6:	3101      	adds	r1, #1
 80133f8:	1809      	adds	r1, r1, r0
 80133fa:	1812      	adds	r2, r2, r0
 80133fc:	9105      	str	r1, [sp, #20]
 80133fe:	2a08      	cmp	r2, #8
 8013400:	dc1b      	bgt.n	801343a <_strtod_l+0x292>
 8013402:	220a      	movs	r2, #10
 8013404:	9908      	ldr	r1, [sp, #32]
 8013406:	434a      	muls	r2, r1
 8013408:	189b      	adds	r3, r3, r2
 801340a:	2200      	movs	r2, #0
 801340c:	9308      	str	r3, [sp, #32]
 801340e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013410:	0010      	movs	r0, r2
 8013412:	1c59      	adds	r1, r3, #1
 8013414:	9121      	str	r1, [sp, #132]	; 0x84
 8013416:	785b      	ldrb	r3, [r3, #1]
 8013418:	e7ca      	b.n	80133b0 <_strtod_l+0x208>
 801341a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801341c:	e7d4      	b.n	80133c8 <_strtod_l+0x220>
 801341e:	1c54      	adds	r4, r2, #1
 8013420:	2a08      	cmp	r2, #8
 8013422:	dc04      	bgt.n	801342e <_strtod_l+0x286>
 8013424:	9a08      	ldr	r2, [sp, #32]
 8013426:	434a      	muls	r2, r1
 8013428:	9208      	str	r2, [sp, #32]
 801342a:	0022      	movs	r2, r4
 801342c:	e7df      	b.n	80133ee <_strtod_l+0x246>
 801342e:	2c10      	cmp	r4, #16
 8013430:	dcfb      	bgt.n	801342a <_strtod_l+0x282>
 8013432:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013434:	434a      	muls	r2, r1
 8013436:	920b      	str	r2, [sp, #44]	; 0x2c
 8013438:	e7f7      	b.n	801342a <_strtod_l+0x282>
 801343a:	9905      	ldr	r1, [sp, #20]
 801343c:	2200      	movs	r2, #0
 801343e:	2910      	cmp	r1, #16
 8013440:	dce5      	bgt.n	801340e <_strtod_l+0x266>
 8013442:	210a      	movs	r1, #10
 8013444:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013446:	4341      	muls	r1, r0
 8013448:	185b      	adds	r3, r3, r1
 801344a:	930b      	str	r3, [sp, #44]	; 0x2c
 801344c:	e7df      	b.n	801340e <_strtod_l+0x266>
 801344e:	2200      	movs	r2, #0
 8013450:	4694      	mov	ip, r2
 8013452:	9205      	str	r2, [sp, #20]
 8013454:	3201      	adds	r2, #1
 8013456:	e7b0      	b.n	80133ba <_strtod_l+0x212>
 8013458:	000c      	movs	r4, r1
 801345a:	e77e      	b.n	801335a <_strtod_l+0x1b2>
 801345c:	0801a34c 	.word	0x0801a34c
 8013460:	ffefffff 	.word	0xffefffff
 8013464:	00000433 	.word	0x00000433
 8013468:	7ff00000 	.word	0x7ff00000
 801346c:	7fffffff 	.word	0x7fffffff
 8013470:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013472:	1c5a      	adds	r2, r3, #1
 8013474:	9221      	str	r2, [sp, #132]	; 0x84
 8013476:	785b      	ldrb	r3, [r3, #1]
 8013478:	2b30      	cmp	r3, #48	; 0x30
 801347a:	d0f9      	beq.n	8013470 <_strtod_l+0x2c8>
 801347c:	001a      	movs	r2, r3
 801347e:	3a31      	subs	r2, #49	; 0x31
 8013480:	2100      	movs	r1, #0
 8013482:	2a08      	cmp	r2, #8
 8013484:	d816      	bhi.n	80134b4 <_strtod_l+0x30c>
 8013486:	3b30      	subs	r3, #48	; 0x30
 8013488:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801348a:	930e      	str	r3, [sp, #56]	; 0x38
 801348c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801348e:	1c59      	adds	r1, r3, #1
 8013490:	9121      	str	r1, [sp, #132]	; 0x84
 8013492:	785b      	ldrb	r3, [r3, #1]
 8013494:	001a      	movs	r2, r3
 8013496:	3a30      	subs	r2, #48	; 0x30
 8013498:	2a09      	cmp	r2, #9
 801349a:	d932      	bls.n	8013502 <_strtod_l+0x35a>
 801349c:	1b4a      	subs	r2, r1, r5
 801349e:	4dad      	ldr	r5, [pc, #692]	; (8013754 <_strtod_l+0x5ac>)
 80134a0:	0029      	movs	r1, r5
 80134a2:	2a08      	cmp	r2, #8
 80134a4:	dc03      	bgt.n	80134ae <_strtod_l+0x306>
 80134a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80134a8:	42a9      	cmp	r1, r5
 80134aa:	dd00      	ble.n	80134ae <_strtod_l+0x306>
 80134ac:	0029      	movs	r1, r5
 80134ae:	2c00      	cmp	r4, #0
 80134b0:	d000      	beq.n	80134b4 <_strtod_l+0x30c>
 80134b2:	4249      	negs	r1, r1
 80134b4:	9a05      	ldr	r2, [sp, #20]
 80134b6:	2a00      	cmp	r2, #0
 80134b8:	d149      	bne.n	801354e <_strtod_l+0x3a6>
 80134ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80134bc:	4310      	orrs	r0, r2
 80134be:	d000      	beq.n	80134c2 <_strtod_l+0x31a>
 80134c0:	e6b3      	b.n	801322a <_strtod_l+0x82>
 80134c2:	9a07      	ldr	r2, [sp, #28]
 80134c4:	2a00      	cmp	r2, #0
 80134c6:	d000      	beq.n	80134ca <_strtod_l+0x322>
 80134c8:	e6cf      	b.n	801326a <_strtod_l+0xc2>
 80134ca:	2b4e      	cmp	r3, #78	; 0x4e
 80134cc:	d025      	beq.n	801351a <_strtod_l+0x372>
 80134ce:	dc1f      	bgt.n	8013510 <_strtod_l+0x368>
 80134d0:	2b49      	cmp	r3, #73	; 0x49
 80134d2:	d000      	beq.n	80134d6 <_strtod_l+0x32e>
 80134d4:	e6c9      	b.n	801326a <_strtod_l+0xc2>
 80134d6:	49a0      	ldr	r1, [pc, #640]	; (8013758 <_strtod_l+0x5b0>)
 80134d8:	a821      	add	r0, sp, #132	; 0x84
 80134da:	f003 f9ed 	bl	80168b8 <__match>
 80134de:	2800      	cmp	r0, #0
 80134e0:	d100      	bne.n	80134e4 <_strtod_l+0x33c>
 80134e2:	e6c2      	b.n	801326a <_strtod_l+0xc2>
 80134e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134e6:	499d      	ldr	r1, [pc, #628]	; (801375c <_strtod_l+0x5b4>)
 80134e8:	3b01      	subs	r3, #1
 80134ea:	a821      	add	r0, sp, #132	; 0x84
 80134ec:	9321      	str	r3, [sp, #132]	; 0x84
 80134ee:	f003 f9e3 	bl	80168b8 <__match>
 80134f2:	2800      	cmp	r0, #0
 80134f4:	d102      	bne.n	80134fc <_strtod_l+0x354>
 80134f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134f8:	3301      	adds	r3, #1
 80134fa:	9321      	str	r3, [sp, #132]	; 0x84
 80134fc:	4f98      	ldr	r7, [pc, #608]	; (8013760 <_strtod_l+0x5b8>)
 80134fe:	2600      	movs	r6, #0
 8013500:	e693      	b.n	801322a <_strtod_l+0x82>
 8013502:	220a      	movs	r2, #10
 8013504:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013506:	434a      	muls	r2, r1
 8013508:	18d2      	adds	r2, r2, r3
 801350a:	3a30      	subs	r2, #48	; 0x30
 801350c:	920e      	str	r2, [sp, #56]	; 0x38
 801350e:	e7bd      	b.n	801348c <_strtod_l+0x2e4>
 8013510:	2b69      	cmp	r3, #105	; 0x69
 8013512:	d0e0      	beq.n	80134d6 <_strtod_l+0x32e>
 8013514:	2b6e      	cmp	r3, #110	; 0x6e
 8013516:	d000      	beq.n	801351a <_strtod_l+0x372>
 8013518:	e6a7      	b.n	801326a <_strtod_l+0xc2>
 801351a:	4992      	ldr	r1, [pc, #584]	; (8013764 <_strtod_l+0x5bc>)
 801351c:	a821      	add	r0, sp, #132	; 0x84
 801351e:	f003 f9cb 	bl	80168b8 <__match>
 8013522:	2800      	cmp	r0, #0
 8013524:	d100      	bne.n	8013528 <_strtod_l+0x380>
 8013526:	e6a0      	b.n	801326a <_strtod_l+0xc2>
 8013528:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801352a:	781b      	ldrb	r3, [r3, #0]
 801352c:	2b28      	cmp	r3, #40	; 0x28
 801352e:	d10c      	bne.n	801354a <_strtod_l+0x3a2>
 8013530:	aa24      	add	r2, sp, #144	; 0x90
 8013532:	498d      	ldr	r1, [pc, #564]	; (8013768 <_strtod_l+0x5c0>)
 8013534:	a821      	add	r0, sp, #132	; 0x84
 8013536:	f003 f9d3 	bl	80168e0 <__hexnan>
 801353a:	2805      	cmp	r0, #5
 801353c:	d105      	bne.n	801354a <_strtod_l+0x3a2>
 801353e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013540:	4a87      	ldr	r2, [pc, #540]	; (8013760 <_strtod_l+0x5b8>)
 8013542:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013544:	431a      	orrs	r2, r3
 8013546:	0017      	movs	r7, r2
 8013548:	e66f      	b.n	801322a <_strtod_l+0x82>
 801354a:	4f88      	ldr	r7, [pc, #544]	; (801376c <_strtod_l+0x5c4>)
 801354c:	e7d7      	b.n	80134fe <_strtod_l+0x356>
 801354e:	4663      	mov	r3, ip
 8013550:	1acb      	subs	r3, r1, r3
 8013552:	9307      	str	r3, [sp, #28]
 8013554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013556:	2b00      	cmp	r3, #0
 8013558:	d101      	bne.n	801355e <_strtod_l+0x3b6>
 801355a:	9b05      	ldr	r3, [sp, #20]
 801355c:	930a      	str	r3, [sp, #40]	; 0x28
 801355e:	9c05      	ldr	r4, [sp, #20]
 8013560:	2c10      	cmp	r4, #16
 8013562:	dd00      	ble.n	8013566 <_strtod_l+0x3be>
 8013564:	2410      	movs	r4, #16
 8013566:	9808      	ldr	r0, [sp, #32]
 8013568:	f7ef faaa 	bl	8002ac0 <__aeabi_ui2d>
 801356c:	9b05      	ldr	r3, [sp, #20]
 801356e:	0006      	movs	r6, r0
 8013570:	000f      	movs	r7, r1
 8013572:	2b09      	cmp	r3, #9
 8013574:	dc15      	bgt.n	80135a2 <_strtod_l+0x3fa>
 8013576:	9b07      	ldr	r3, [sp, #28]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d100      	bne.n	801357e <_strtod_l+0x3d6>
 801357c:	e655      	b.n	801322a <_strtod_l+0x82>
 801357e:	9b07      	ldr	r3, [sp, #28]
 8013580:	2b00      	cmp	r3, #0
 8013582:	dc00      	bgt.n	8013586 <_strtod_l+0x3de>
 8013584:	e07d      	b.n	8013682 <_strtod_l+0x4da>
 8013586:	2b16      	cmp	r3, #22
 8013588:	dc62      	bgt.n	8013650 <_strtod_l+0x4a8>
 801358a:	00dc      	lsls	r4, r3, #3
 801358c:	4b78      	ldr	r3, [pc, #480]	; (8013770 <_strtod_l+0x5c8>)
 801358e:	0032      	movs	r2, r6
 8013590:	1919      	adds	r1, r3, r4
 8013592:	003b      	movs	r3, r7
 8013594:	6808      	ldr	r0, [r1, #0]
 8013596:	6849      	ldr	r1, [r1, #4]
 8013598:	f7ee fc4c 	bl	8001e34 <__aeabi_dmul>
 801359c:	0006      	movs	r6, r0
 801359e:	000f      	movs	r7, r1
 80135a0:	e643      	b.n	801322a <_strtod_l+0x82>
 80135a2:	0022      	movs	r2, r4
 80135a4:	4b72      	ldr	r3, [pc, #456]	; (8013770 <_strtod_l+0x5c8>)
 80135a6:	3a09      	subs	r2, #9
 80135a8:	00d2      	lsls	r2, r2, #3
 80135aa:	189b      	adds	r3, r3, r2
 80135ac:	681a      	ldr	r2, [r3, #0]
 80135ae:	685b      	ldr	r3, [r3, #4]
 80135b0:	f7ee fc40 	bl	8001e34 <__aeabi_dmul>
 80135b4:	0006      	movs	r6, r0
 80135b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80135b8:	000f      	movs	r7, r1
 80135ba:	f7ef fa81 	bl	8002ac0 <__aeabi_ui2d>
 80135be:	000b      	movs	r3, r1
 80135c0:	0002      	movs	r2, r0
 80135c2:	0039      	movs	r1, r7
 80135c4:	0030      	movs	r0, r6
 80135c6:	f7ed fd0f 	bl	8000fe8 <__aeabi_dadd>
 80135ca:	9b05      	ldr	r3, [sp, #20]
 80135cc:	0006      	movs	r6, r0
 80135ce:	000f      	movs	r7, r1
 80135d0:	2b0f      	cmp	r3, #15
 80135d2:	ddd0      	ble.n	8013576 <_strtod_l+0x3ce>
 80135d4:	9b05      	ldr	r3, [sp, #20]
 80135d6:	1b1c      	subs	r4, r3, r4
 80135d8:	9b07      	ldr	r3, [sp, #28]
 80135da:	18e4      	adds	r4, r4, r3
 80135dc:	2c00      	cmp	r4, #0
 80135de:	dc00      	bgt.n	80135e2 <_strtod_l+0x43a>
 80135e0:	e094      	b.n	801370c <_strtod_l+0x564>
 80135e2:	230f      	movs	r3, #15
 80135e4:	4023      	ands	r3, r4
 80135e6:	d00a      	beq.n	80135fe <_strtod_l+0x456>
 80135e8:	4961      	ldr	r1, [pc, #388]	; (8013770 <_strtod_l+0x5c8>)
 80135ea:	00db      	lsls	r3, r3, #3
 80135ec:	18c9      	adds	r1, r1, r3
 80135ee:	0032      	movs	r2, r6
 80135f0:	6808      	ldr	r0, [r1, #0]
 80135f2:	6849      	ldr	r1, [r1, #4]
 80135f4:	003b      	movs	r3, r7
 80135f6:	f7ee fc1d 	bl	8001e34 <__aeabi_dmul>
 80135fa:	0006      	movs	r6, r0
 80135fc:	000f      	movs	r7, r1
 80135fe:	230f      	movs	r3, #15
 8013600:	439c      	bics	r4, r3
 8013602:	d06e      	beq.n	80136e2 <_strtod_l+0x53a>
 8013604:	3326      	adds	r3, #38	; 0x26
 8013606:	33ff      	adds	r3, #255	; 0xff
 8013608:	429c      	cmp	r4, r3
 801360a:	dd48      	ble.n	801369e <_strtod_l+0x4f6>
 801360c:	2400      	movs	r4, #0
 801360e:	9405      	str	r4, [sp, #20]
 8013610:	940b      	str	r4, [sp, #44]	; 0x2c
 8013612:	940a      	str	r4, [sp, #40]	; 0x28
 8013614:	2322      	movs	r3, #34	; 0x22
 8013616:	2600      	movs	r6, #0
 8013618:	9a04      	ldr	r2, [sp, #16]
 801361a:	4f51      	ldr	r7, [pc, #324]	; (8013760 <_strtod_l+0x5b8>)
 801361c:	6013      	str	r3, [r2, #0]
 801361e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013620:	42b3      	cmp	r3, r6
 8013622:	d100      	bne.n	8013626 <_strtod_l+0x47e>
 8013624:	e601      	b.n	801322a <_strtod_l+0x82>
 8013626:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013628:	9804      	ldr	r0, [sp, #16]
 801362a:	f003 fa47 	bl	8016abc <_Bfree>
 801362e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013630:	9804      	ldr	r0, [sp, #16]
 8013632:	f003 fa43 	bl	8016abc <_Bfree>
 8013636:	9905      	ldr	r1, [sp, #20]
 8013638:	9804      	ldr	r0, [sp, #16]
 801363a:	f003 fa3f 	bl	8016abc <_Bfree>
 801363e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013640:	9804      	ldr	r0, [sp, #16]
 8013642:	f003 fa3b 	bl	8016abc <_Bfree>
 8013646:	0021      	movs	r1, r4
 8013648:	9804      	ldr	r0, [sp, #16]
 801364a:	f003 fa37 	bl	8016abc <_Bfree>
 801364e:	e5ec      	b.n	801322a <_strtod_l+0x82>
 8013650:	2325      	movs	r3, #37	; 0x25
 8013652:	9a05      	ldr	r2, [sp, #20]
 8013654:	1a9b      	subs	r3, r3, r2
 8013656:	9a07      	ldr	r2, [sp, #28]
 8013658:	4293      	cmp	r3, r2
 801365a:	dbbb      	blt.n	80135d4 <_strtod_l+0x42c>
 801365c:	230f      	movs	r3, #15
 801365e:	9a05      	ldr	r2, [sp, #20]
 8013660:	4c43      	ldr	r4, [pc, #268]	; (8013770 <_strtod_l+0x5c8>)
 8013662:	1a9d      	subs	r5, r3, r2
 8013664:	00e9      	lsls	r1, r5, #3
 8013666:	1861      	adds	r1, r4, r1
 8013668:	0032      	movs	r2, r6
 801366a:	6808      	ldr	r0, [r1, #0]
 801366c:	6849      	ldr	r1, [r1, #4]
 801366e:	003b      	movs	r3, r7
 8013670:	f7ee fbe0 	bl	8001e34 <__aeabi_dmul>
 8013674:	9b07      	ldr	r3, [sp, #28]
 8013676:	1b5e      	subs	r6, r3, r5
 8013678:	00f6      	lsls	r6, r6, #3
 801367a:	19a6      	adds	r6, r4, r6
 801367c:	6832      	ldr	r2, [r6, #0]
 801367e:	6873      	ldr	r3, [r6, #4]
 8013680:	e78a      	b.n	8013598 <_strtod_l+0x3f0>
 8013682:	9b07      	ldr	r3, [sp, #28]
 8013684:	3316      	adds	r3, #22
 8013686:	dba5      	blt.n	80135d4 <_strtod_l+0x42c>
 8013688:	9b07      	ldr	r3, [sp, #28]
 801368a:	0030      	movs	r0, r6
 801368c:	00da      	lsls	r2, r3, #3
 801368e:	4b38      	ldr	r3, [pc, #224]	; (8013770 <_strtod_l+0x5c8>)
 8013690:	0039      	movs	r1, r7
 8013692:	1a9b      	subs	r3, r3, r2
 8013694:	681a      	ldr	r2, [r3, #0]
 8013696:	685b      	ldr	r3, [r3, #4]
 8013698:	f7ed ffc2 	bl	8001620 <__aeabi_ddiv>
 801369c:	e77e      	b.n	801359c <_strtod_l+0x3f4>
 801369e:	2300      	movs	r3, #0
 80136a0:	0030      	movs	r0, r6
 80136a2:	0039      	movs	r1, r7
 80136a4:	001d      	movs	r5, r3
 80136a6:	1124      	asrs	r4, r4, #4
 80136a8:	2c01      	cmp	r4, #1
 80136aa:	dc1d      	bgt.n	80136e8 <_strtod_l+0x540>
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d001      	beq.n	80136b4 <_strtod_l+0x50c>
 80136b0:	0006      	movs	r6, r0
 80136b2:	000f      	movs	r7, r1
 80136b4:	4b2f      	ldr	r3, [pc, #188]	; (8013774 <_strtod_l+0x5cc>)
 80136b6:	00ed      	lsls	r5, r5, #3
 80136b8:	18ff      	adds	r7, r7, r3
 80136ba:	4b2f      	ldr	r3, [pc, #188]	; (8013778 <_strtod_l+0x5d0>)
 80136bc:	0032      	movs	r2, r6
 80136be:	195d      	adds	r5, r3, r5
 80136c0:	6828      	ldr	r0, [r5, #0]
 80136c2:	6869      	ldr	r1, [r5, #4]
 80136c4:	003b      	movs	r3, r7
 80136c6:	f7ee fbb5 	bl	8001e34 <__aeabi_dmul>
 80136ca:	4b25      	ldr	r3, [pc, #148]	; (8013760 <_strtod_l+0x5b8>)
 80136cc:	4a2b      	ldr	r2, [pc, #172]	; (801377c <_strtod_l+0x5d4>)
 80136ce:	0006      	movs	r6, r0
 80136d0:	400b      	ands	r3, r1
 80136d2:	4293      	cmp	r3, r2
 80136d4:	d89a      	bhi.n	801360c <_strtod_l+0x464>
 80136d6:	4a2a      	ldr	r2, [pc, #168]	; (8013780 <_strtod_l+0x5d8>)
 80136d8:	4293      	cmp	r3, r2
 80136da:	d913      	bls.n	8013704 <_strtod_l+0x55c>
 80136dc:	2601      	movs	r6, #1
 80136de:	4f29      	ldr	r7, [pc, #164]	; (8013784 <_strtod_l+0x5dc>)
 80136e0:	4276      	negs	r6, r6
 80136e2:	2300      	movs	r3, #0
 80136e4:	9306      	str	r3, [sp, #24]
 80136e6:	e07b      	b.n	80137e0 <_strtod_l+0x638>
 80136e8:	2201      	movs	r2, #1
 80136ea:	4214      	tst	r4, r2
 80136ec:	d007      	beq.n	80136fe <_strtod_l+0x556>
 80136ee:	4a22      	ldr	r2, [pc, #136]	; (8013778 <_strtod_l+0x5d0>)
 80136f0:	00eb      	lsls	r3, r5, #3
 80136f2:	189b      	adds	r3, r3, r2
 80136f4:	681a      	ldr	r2, [r3, #0]
 80136f6:	685b      	ldr	r3, [r3, #4]
 80136f8:	f7ee fb9c 	bl	8001e34 <__aeabi_dmul>
 80136fc:	2301      	movs	r3, #1
 80136fe:	3501      	adds	r5, #1
 8013700:	1064      	asrs	r4, r4, #1
 8013702:	e7d1      	b.n	80136a8 <_strtod_l+0x500>
 8013704:	23d4      	movs	r3, #212	; 0xd4
 8013706:	049b      	lsls	r3, r3, #18
 8013708:	18cf      	adds	r7, r1, r3
 801370a:	e7ea      	b.n	80136e2 <_strtod_l+0x53a>
 801370c:	2c00      	cmp	r4, #0
 801370e:	d0e8      	beq.n	80136e2 <_strtod_l+0x53a>
 8013710:	230f      	movs	r3, #15
 8013712:	4264      	negs	r4, r4
 8013714:	4023      	ands	r3, r4
 8013716:	d00a      	beq.n	801372e <_strtod_l+0x586>
 8013718:	4a15      	ldr	r2, [pc, #84]	; (8013770 <_strtod_l+0x5c8>)
 801371a:	00db      	lsls	r3, r3, #3
 801371c:	18d3      	adds	r3, r2, r3
 801371e:	0030      	movs	r0, r6
 8013720:	681a      	ldr	r2, [r3, #0]
 8013722:	685b      	ldr	r3, [r3, #4]
 8013724:	0039      	movs	r1, r7
 8013726:	f7ed ff7b 	bl	8001620 <__aeabi_ddiv>
 801372a:	0006      	movs	r6, r0
 801372c:	000f      	movs	r7, r1
 801372e:	1124      	asrs	r4, r4, #4
 8013730:	d0d7      	beq.n	80136e2 <_strtod_l+0x53a>
 8013732:	2c1f      	cmp	r4, #31
 8013734:	dd28      	ble.n	8013788 <_strtod_l+0x5e0>
 8013736:	2400      	movs	r4, #0
 8013738:	9405      	str	r4, [sp, #20]
 801373a:	940b      	str	r4, [sp, #44]	; 0x2c
 801373c:	940a      	str	r4, [sp, #40]	; 0x28
 801373e:	2322      	movs	r3, #34	; 0x22
 8013740:	9a04      	ldr	r2, [sp, #16]
 8013742:	2600      	movs	r6, #0
 8013744:	6013      	str	r3, [r2, #0]
 8013746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013748:	2700      	movs	r7, #0
 801374a:	2b00      	cmp	r3, #0
 801374c:	d000      	beq.n	8013750 <_strtod_l+0x5a8>
 801374e:	e76a      	b.n	8013626 <_strtod_l+0x47e>
 8013750:	e56b      	b.n	801322a <_strtod_l+0x82>
 8013752:	46c0      	nop			; (mov r8, r8)
 8013754:	00004e1f 	.word	0x00004e1f
 8013758:	0801a3a5 	.word	0x0801a3a5
 801375c:	0801a4f8 	.word	0x0801a4f8
 8013760:	7ff00000 	.word	0x7ff00000
 8013764:	0801a3ad 	.word	0x0801a3ad
 8013768:	0801a360 	.word	0x0801a360
 801376c:	fff80000 	.word	0xfff80000
 8013770:	0801a530 	.word	0x0801a530
 8013774:	fcb00000 	.word	0xfcb00000
 8013778:	0801a508 	.word	0x0801a508
 801377c:	7ca00000 	.word	0x7ca00000
 8013780:	7c900000 	.word	0x7c900000
 8013784:	7fefffff 	.word	0x7fefffff
 8013788:	2310      	movs	r3, #16
 801378a:	4023      	ands	r3, r4
 801378c:	9306      	str	r3, [sp, #24]
 801378e:	d001      	beq.n	8013794 <_strtod_l+0x5ec>
 8013790:	236a      	movs	r3, #106	; 0x6a
 8013792:	9306      	str	r3, [sp, #24]
 8013794:	2300      	movs	r3, #0
 8013796:	0030      	movs	r0, r6
 8013798:	0039      	movs	r1, r7
 801379a:	001d      	movs	r5, r3
 801379c:	2c00      	cmp	r4, #0
 801379e:	dd00      	ble.n	80137a2 <_strtod_l+0x5fa>
 80137a0:	e10e      	b.n	80139c0 <_strtod_l+0x818>
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d001      	beq.n	80137aa <_strtod_l+0x602>
 80137a6:	0006      	movs	r6, r0
 80137a8:	000f      	movs	r7, r1
 80137aa:	9b06      	ldr	r3, [sp, #24]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d00f      	beq.n	80137d0 <_strtod_l+0x628>
 80137b0:	236b      	movs	r3, #107	; 0x6b
 80137b2:	0079      	lsls	r1, r7, #1
 80137b4:	0d49      	lsrs	r1, r1, #21
 80137b6:	003a      	movs	r2, r7
 80137b8:	1a5b      	subs	r3, r3, r1
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	dd08      	ble.n	80137d0 <_strtod_l+0x628>
 80137be:	2b1f      	cmp	r3, #31
 80137c0:	dc00      	bgt.n	80137c4 <_strtod_l+0x61c>
 80137c2:	e112      	b.n	80139ea <_strtod_l+0x842>
 80137c4:	2600      	movs	r6, #0
 80137c6:	2b34      	cmp	r3, #52	; 0x34
 80137c8:	dc00      	bgt.n	80137cc <_strtod_l+0x624>
 80137ca:	e107      	b.n	80139dc <_strtod_l+0x834>
 80137cc:	27dc      	movs	r7, #220	; 0xdc
 80137ce:	04bf      	lsls	r7, r7, #18
 80137d0:	2200      	movs	r2, #0
 80137d2:	2300      	movs	r3, #0
 80137d4:	0030      	movs	r0, r6
 80137d6:	0039      	movs	r1, r7
 80137d8:	f7ec fe40 	bl	800045c <__aeabi_dcmpeq>
 80137dc:	2800      	cmp	r0, #0
 80137de:	d1aa      	bne.n	8013736 <_strtod_l+0x58e>
 80137e0:	9b08      	ldr	r3, [sp, #32]
 80137e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80137e4:	9300      	str	r3, [sp, #0]
 80137e6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80137e8:	9b05      	ldr	r3, [sp, #20]
 80137ea:	9804      	ldr	r0, [sp, #16]
 80137ec:	f003 f9ae 	bl	8016b4c <__s2b>
 80137f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80137f2:	2800      	cmp	r0, #0
 80137f4:	d100      	bne.n	80137f8 <_strtod_l+0x650>
 80137f6:	e709      	b.n	801360c <_strtod_l+0x464>
 80137f8:	9b07      	ldr	r3, [sp, #28]
 80137fa:	9a07      	ldr	r2, [sp, #28]
 80137fc:	17db      	asrs	r3, r3, #31
 80137fe:	4252      	negs	r2, r2
 8013800:	4013      	ands	r3, r2
 8013802:	9315      	str	r3, [sp, #84]	; 0x54
 8013804:	9b07      	ldr	r3, [sp, #28]
 8013806:	2400      	movs	r4, #0
 8013808:	43db      	mvns	r3, r3
 801380a:	9a07      	ldr	r2, [sp, #28]
 801380c:	17db      	asrs	r3, r3, #31
 801380e:	401a      	ands	r2, r3
 8013810:	921c      	str	r2, [sp, #112]	; 0x70
 8013812:	9405      	str	r4, [sp, #20]
 8013814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013816:	9804      	ldr	r0, [sp, #16]
 8013818:	6859      	ldr	r1, [r3, #4]
 801381a:	f003 f927 	bl	8016a6c <_Balloc>
 801381e:	900a      	str	r0, [sp, #40]	; 0x28
 8013820:	2800      	cmp	r0, #0
 8013822:	d100      	bne.n	8013826 <_strtod_l+0x67e>
 8013824:	e6f6      	b.n	8013614 <_strtod_l+0x46c>
 8013826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013828:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801382a:	691b      	ldr	r3, [r3, #16]
 801382c:	310c      	adds	r1, #12
 801382e:	1c9a      	adds	r2, r3, #2
 8013830:	0092      	lsls	r2, r2, #2
 8013832:	300c      	adds	r0, #12
 8013834:	9308      	str	r3, [sp, #32]
 8013836:	f7ff fa32 	bl	8012c9e <memcpy>
 801383a:	ab24      	add	r3, sp, #144	; 0x90
 801383c:	9301      	str	r3, [sp, #4]
 801383e:	ab23      	add	r3, sp, #140	; 0x8c
 8013840:	9300      	str	r3, [sp, #0]
 8013842:	0032      	movs	r2, r6
 8013844:	003b      	movs	r3, r7
 8013846:	9804      	ldr	r0, [sp, #16]
 8013848:	960e      	str	r6, [sp, #56]	; 0x38
 801384a:	970f      	str	r7, [sp, #60]	; 0x3c
 801384c:	f003 fc22 	bl	8017094 <__d2b>
 8013850:	9022      	str	r0, [sp, #136]	; 0x88
 8013852:	2800      	cmp	r0, #0
 8013854:	d100      	bne.n	8013858 <_strtod_l+0x6b0>
 8013856:	e6dd      	b.n	8013614 <_strtod_l+0x46c>
 8013858:	2101      	movs	r1, #1
 801385a:	9804      	ldr	r0, [sp, #16]
 801385c:	f003 f9fd 	bl	8016c5a <__i2b>
 8013860:	9005      	str	r0, [sp, #20]
 8013862:	2800      	cmp	r0, #0
 8013864:	d100      	bne.n	8013868 <_strtod_l+0x6c0>
 8013866:	e6d5      	b.n	8013614 <_strtod_l+0x46c>
 8013868:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801386a:	2b00      	cmp	r3, #0
 801386c:	da00      	bge.n	8013870 <_strtod_l+0x6c8>
 801386e:	e0c1      	b.n	80139f4 <_strtod_l+0x84c>
 8013870:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013872:	189d      	adds	r5, r3, r2
 8013874:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013876:	4694      	mov	ip, r2
 8013878:	9906      	ldr	r1, [sp, #24]
 801387a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801387c:	1a5b      	subs	r3, r3, r1
 801387e:	2136      	movs	r1, #54	; 0x36
 8013880:	189b      	adds	r3, r3, r2
 8013882:	1a8a      	subs	r2, r1, r2
 8013884:	49b2      	ldr	r1, [pc, #712]	; (8013b50 <_strtod_l+0x9a8>)
 8013886:	3b01      	subs	r3, #1
 8013888:	2001      	movs	r0, #1
 801388a:	428b      	cmp	r3, r1
 801388c:	db00      	blt.n	8013890 <_strtod_l+0x6e8>
 801388e:	e0bd      	b.n	8013a0c <_strtod_l+0x864>
 8013890:	1ac9      	subs	r1, r1, r3
 8013892:	1a52      	subs	r2, r2, r1
 8013894:	291f      	cmp	r1, #31
 8013896:	dd00      	ble.n	801389a <_strtod_l+0x6f2>
 8013898:	e0b1      	b.n	80139fe <_strtod_l+0x856>
 801389a:	4088      	lsls	r0, r1
 801389c:	2300      	movs	r3, #0
 801389e:	9014      	str	r0, [sp, #80]	; 0x50
 80138a0:	9310      	str	r3, [sp, #64]	; 0x40
 80138a2:	18ab      	adds	r3, r5, r2
 80138a4:	9308      	str	r3, [sp, #32]
 80138a6:	0013      	movs	r3, r2
 80138a8:	9a06      	ldr	r2, [sp, #24]
 80138aa:	4463      	add	r3, ip
 80138ac:	18d3      	adds	r3, r2, r3
 80138ae:	9a08      	ldr	r2, [sp, #32]
 80138b0:	930c      	str	r3, [sp, #48]	; 0x30
 80138b2:	002b      	movs	r3, r5
 80138b4:	4295      	cmp	r5, r2
 80138b6:	dd00      	ble.n	80138ba <_strtod_l+0x712>
 80138b8:	0013      	movs	r3, r2
 80138ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80138bc:	4293      	cmp	r3, r2
 80138be:	dd00      	ble.n	80138c2 <_strtod_l+0x71a>
 80138c0:	0013      	movs	r3, r2
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	dd06      	ble.n	80138d4 <_strtod_l+0x72c>
 80138c6:	9a08      	ldr	r2, [sp, #32]
 80138c8:	1aed      	subs	r5, r5, r3
 80138ca:	1ad2      	subs	r2, r2, r3
 80138cc:	9208      	str	r2, [sp, #32]
 80138ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80138d0:	1ad2      	subs	r2, r2, r3
 80138d2:	920c      	str	r2, [sp, #48]	; 0x30
 80138d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d017      	beq.n	801390a <_strtod_l+0x762>
 80138da:	001a      	movs	r2, r3
 80138dc:	9905      	ldr	r1, [sp, #20]
 80138de:	9804      	ldr	r0, [sp, #16]
 80138e0:	f003 fa54 	bl	8016d8c <__pow5mult>
 80138e4:	9005      	str	r0, [sp, #20]
 80138e6:	2800      	cmp	r0, #0
 80138e8:	d100      	bne.n	80138ec <_strtod_l+0x744>
 80138ea:	e693      	b.n	8013614 <_strtod_l+0x46c>
 80138ec:	0001      	movs	r1, r0
 80138ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80138f0:	9804      	ldr	r0, [sp, #16]
 80138f2:	f003 f9bb 	bl	8016c6c <__multiply>
 80138f6:	9012      	str	r0, [sp, #72]	; 0x48
 80138f8:	2800      	cmp	r0, #0
 80138fa:	d100      	bne.n	80138fe <_strtod_l+0x756>
 80138fc:	e68a      	b.n	8013614 <_strtod_l+0x46c>
 80138fe:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013900:	9804      	ldr	r0, [sp, #16]
 8013902:	f003 f8db 	bl	8016abc <_Bfree>
 8013906:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013908:	9322      	str	r3, [sp, #136]	; 0x88
 801390a:	9b08      	ldr	r3, [sp, #32]
 801390c:	2b00      	cmp	r3, #0
 801390e:	dd00      	ble.n	8013912 <_strtod_l+0x76a>
 8013910:	e07f      	b.n	8013a12 <_strtod_l+0x86a>
 8013912:	9b07      	ldr	r3, [sp, #28]
 8013914:	2b00      	cmp	r3, #0
 8013916:	dd08      	ble.n	801392a <_strtod_l+0x782>
 8013918:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801391a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801391c:	9804      	ldr	r0, [sp, #16]
 801391e:	f003 fa35 	bl	8016d8c <__pow5mult>
 8013922:	900a      	str	r0, [sp, #40]	; 0x28
 8013924:	2800      	cmp	r0, #0
 8013926:	d100      	bne.n	801392a <_strtod_l+0x782>
 8013928:	e674      	b.n	8013614 <_strtod_l+0x46c>
 801392a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801392c:	2b00      	cmp	r3, #0
 801392e:	dd08      	ble.n	8013942 <_strtod_l+0x79a>
 8013930:	001a      	movs	r2, r3
 8013932:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013934:	9804      	ldr	r0, [sp, #16]
 8013936:	f003 fa6b 	bl	8016e10 <__lshift>
 801393a:	900a      	str	r0, [sp, #40]	; 0x28
 801393c:	2800      	cmp	r0, #0
 801393e:	d100      	bne.n	8013942 <_strtod_l+0x79a>
 8013940:	e668      	b.n	8013614 <_strtod_l+0x46c>
 8013942:	2d00      	cmp	r5, #0
 8013944:	dd08      	ble.n	8013958 <_strtod_l+0x7b0>
 8013946:	002a      	movs	r2, r5
 8013948:	9905      	ldr	r1, [sp, #20]
 801394a:	9804      	ldr	r0, [sp, #16]
 801394c:	f003 fa60 	bl	8016e10 <__lshift>
 8013950:	9005      	str	r0, [sp, #20]
 8013952:	2800      	cmp	r0, #0
 8013954:	d100      	bne.n	8013958 <_strtod_l+0x7b0>
 8013956:	e65d      	b.n	8013614 <_strtod_l+0x46c>
 8013958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801395a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801395c:	9804      	ldr	r0, [sp, #16]
 801395e:	f003 fac3 	bl	8016ee8 <__mdiff>
 8013962:	1e04      	subs	r4, r0, #0
 8013964:	d100      	bne.n	8013968 <_strtod_l+0x7c0>
 8013966:	e655      	b.n	8013614 <_strtod_l+0x46c>
 8013968:	2500      	movs	r5, #0
 801396a:	68c3      	ldr	r3, [r0, #12]
 801396c:	9905      	ldr	r1, [sp, #20]
 801396e:	60c5      	str	r5, [r0, #12]
 8013970:	9312      	str	r3, [sp, #72]	; 0x48
 8013972:	f003 fa9f 	bl	8016eb4 <__mcmp>
 8013976:	42a8      	cmp	r0, r5
 8013978:	da55      	bge.n	8013a26 <_strtod_l+0x87e>
 801397a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801397c:	42ab      	cmp	r3, r5
 801397e:	d11b      	bne.n	80139b8 <_strtod_l+0x810>
 8013980:	42ae      	cmp	r6, r5
 8013982:	d119      	bne.n	80139b8 <_strtod_l+0x810>
 8013984:	033b      	lsls	r3, r7, #12
 8013986:	42ab      	cmp	r3, r5
 8013988:	d116      	bne.n	80139b8 <_strtod_l+0x810>
 801398a:	22d6      	movs	r2, #214	; 0xd6
 801398c:	4b71      	ldr	r3, [pc, #452]	; (8013b54 <_strtod_l+0x9ac>)
 801398e:	04d2      	lsls	r2, r2, #19
 8013990:	403b      	ands	r3, r7
 8013992:	4293      	cmp	r3, r2
 8013994:	d910      	bls.n	80139b8 <_strtod_l+0x810>
 8013996:	6963      	ldr	r3, [r4, #20]
 8013998:	42ab      	cmp	r3, r5
 801399a:	d102      	bne.n	80139a2 <_strtod_l+0x7fa>
 801399c:	6923      	ldr	r3, [r4, #16]
 801399e:	2b01      	cmp	r3, #1
 80139a0:	dd0a      	ble.n	80139b8 <_strtod_l+0x810>
 80139a2:	0021      	movs	r1, r4
 80139a4:	2201      	movs	r2, #1
 80139a6:	9804      	ldr	r0, [sp, #16]
 80139a8:	f003 fa32 	bl	8016e10 <__lshift>
 80139ac:	9905      	ldr	r1, [sp, #20]
 80139ae:	0004      	movs	r4, r0
 80139b0:	f003 fa80 	bl	8016eb4 <__mcmp>
 80139b4:	2800      	cmp	r0, #0
 80139b6:	dc6b      	bgt.n	8013a90 <_strtod_l+0x8e8>
 80139b8:	9b06      	ldr	r3, [sp, #24]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d178      	bne.n	8013ab0 <_strtod_l+0x908>
 80139be:	e632      	b.n	8013626 <_strtod_l+0x47e>
 80139c0:	2201      	movs	r2, #1
 80139c2:	4214      	tst	r4, r2
 80139c4:	d007      	beq.n	80139d6 <_strtod_l+0x82e>
 80139c6:	4a64      	ldr	r2, [pc, #400]	; (8013b58 <_strtod_l+0x9b0>)
 80139c8:	00eb      	lsls	r3, r5, #3
 80139ca:	18d3      	adds	r3, r2, r3
 80139cc:	681a      	ldr	r2, [r3, #0]
 80139ce:	685b      	ldr	r3, [r3, #4]
 80139d0:	f7ee fa30 	bl	8001e34 <__aeabi_dmul>
 80139d4:	2301      	movs	r3, #1
 80139d6:	3501      	adds	r5, #1
 80139d8:	1064      	asrs	r4, r4, #1
 80139da:	e6df      	b.n	801379c <_strtod_l+0x5f4>
 80139dc:	2101      	movs	r1, #1
 80139de:	3b20      	subs	r3, #32
 80139e0:	4249      	negs	r1, r1
 80139e2:	4099      	lsls	r1, r3
 80139e4:	400a      	ands	r2, r1
 80139e6:	0017      	movs	r7, r2
 80139e8:	e6f2      	b.n	80137d0 <_strtod_l+0x628>
 80139ea:	2201      	movs	r2, #1
 80139ec:	4252      	negs	r2, r2
 80139ee:	409a      	lsls	r2, r3
 80139f0:	4016      	ands	r6, r2
 80139f2:	e6ed      	b.n	80137d0 <_strtod_l+0x628>
 80139f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80139f6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80139f8:	1ad2      	subs	r2, r2, r3
 80139fa:	4694      	mov	ip, r2
 80139fc:	e73c      	b.n	8013878 <_strtod_l+0x6d0>
 80139fe:	4957      	ldr	r1, [pc, #348]	; (8013b5c <_strtod_l+0x9b4>)
 8013a00:	1acb      	subs	r3, r1, r3
 8013a02:	0001      	movs	r1, r0
 8013a04:	4099      	lsls	r1, r3
 8013a06:	9110      	str	r1, [sp, #64]	; 0x40
 8013a08:	9014      	str	r0, [sp, #80]	; 0x50
 8013a0a:	e74a      	b.n	80138a2 <_strtod_l+0x6fa>
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	9310      	str	r3, [sp, #64]	; 0x40
 8013a10:	e7fa      	b.n	8013a08 <_strtod_l+0x860>
 8013a12:	9a08      	ldr	r2, [sp, #32]
 8013a14:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013a16:	9804      	ldr	r0, [sp, #16]
 8013a18:	f003 f9fa 	bl	8016e10 <__lshift>
 8013a1c:	9022      	str	r0, [sp, #136]	; 0x88
 8013a1e:	2800      	cmp	r0, #0
 8013a20:	d000      	beq.n	8013a24 <_strtod_l+0x87c>
 8013a22:	e776      	b.n	8013912 <_strtod_l+0x76a>
 8013a24:	e5f6      	b.n	8013614 <_strtod_l+0x46c>
 8013a26:	970c      	str	r7, [sp, #48]	; 0x30
 8013a28:	2800      	cmp	r0, #0
 8013a2a:	d000      	beq.n	8013a2e <_strtod_l+0x886>
 8013a2c:	e0a0      	b.n	8013b70 <_strtod_l+0x9c8>
 8013a2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a30:	033b      	lsls	r3, r7, #12
 8013a32:	0b1b      	lsrs	r3, r3, #12
 8013a34:	2a00      	cmp	r2, #0
 8013a36:	d027      	beq.n	8013a88 <_strtod_l+0x8e0>
 8013a38:	4a49      	ldr	r2, [pc, #292]	; (8013b60 <_strtod_l+0x9b8>)
 8013a3a:	4293      	cmp	r3, r2
 8013a3c:	d157      	bne.n	8013aee <_strtod_l+0x946>
 8013a3e:	2201      	movs	r2, #1
 8013a40:	9b06      	ldr	r3, [sp, #24]
 8013a42:	4252      	negs	r2, r2
 8013a44:	0031      	movs	r1, r6
 8013a46:	0010      	movs	r0, r2
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d00b      	beq.n	8013a64 <_strtod_l+0x8bc>
 8013a4c:	25d4      	movs	r5, #212	; 0xd4
 8013a4e:	4b41      	ldr	r3, [pc, #260]	; (8013b54 <_strtod_l+0x9ac>)
 8013a50:	04ed      	lsls	r5, r5, #19
 8013a52:	403b      	ands	r3, r7
 8013a54:	0010      	movs	r0, r2
 8013a56:	42ab      	cmp	r3, r5
 8013a58:	d804      	bhi.n	8013a64 <_strtod_l+0x8bc>
 8013a5a:	306c      	adds	r0, #108	; 0x6c
 8013a5c:	0d1b      	lsrs	r3, r3, #20
 8013a5e:	1ac3      	subs	r3, r0, r3
 8013a60:	409a      	lsls	r2, r3
 8013a62:	0010      	movs	r0, r2
 8013a64:	4281      	cmp	r1, r0
 8013a66:	d142      	bne.n	8013aee <_strtod_l+0x946>
 8013a68:	4b3e      	ldr	r3, [pc, #248]	; (8013b64 <_strtod_l+0x9bc>)
 8013a6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a6c:	429a      	cmp	r2, r3
 8013a6e:	d102      	bne.n	8013a76 <_strtod_l+0x8ce>
 8013a70:	1c4b      	adds	r3, r1, #1
 8013a72:	d100      	bne.n	8013a76 <_strtod_l+0x8ce>
 8013a74:	e5ce      	b.n	8013614 <_strtod_l+0x46c>
 8013a76:	4b37      	ldr	r3, [pc, #220]	; (8013b54 <_strtod_l+0x9ac>)
 8013a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a7a:	2600      	movs	r6, #0
 8013a7c:	401a      	ands	r2, r3
 8013a7e:	0013      	movs	r3, r2
 8013a80:	2280      	movs	r2, #128	; 0x80
 8013a82:	0352      	lsls	r2, r2, #13
 8013a84:	189f      	adds	r7, r3, r2
 8013a86:	e797      	b.n	80139b8 <_strtod_l+0x810>
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d130      	bne.n	8013aee <_strtod_l+0x946>
 8013a8c:	2e00      	cmp	r6, #0
 8013a8e:	d12e      	bne.n	8013aee <_strtod_l+0x946>
 8013a90:	9906      	ldr	r1, [sp, #24]
 8013a92:	003b      	movs	r3, r7
 8013a94:	4a2f      	ldr	r2, [pc, #188]	; (8013b54 <_strtod_l+0x9ac>)
 8013a96:	2900      	cmp	r1, #0
 8013a98:	d020      	beq.n	8013adc <_strtod_l+0x934>
 8013a9a:	0011      	movs	r1, r2
 8013a9c:	20d6      	movs	r0, #214	; 0xd6
 8013a9e:	4039      	ands	r1, r7
 8013aa0:	04c0      	lsls	r0, r0, #19
 8013aa2:	4281      	cmp	r1, r0
 8013aa4:	dc1a      	bgt.n	8013adc <_strtod_l+0x934>
 8013aa6:	23dc      	movs	r3, #220	; 0xdc
 8013aa8:	049b      	lsls	r3, r3, #18
 8013aaa:	4299      	cmp	r1, r3
 8013aac:	dc00      	bgt.n	8013ab0 <_strtod_l+0x908>
 8013aae:	e646      	b.n	801373e <_strtod_l+0x596>
 8013ab0:	4b2d      	ldr	r3, [pc, #180]	; (8013b68 <_strtod_l+0x9c0>)
 8013ab2:	0030      	movs	r0, r6
 8013ab4:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	931a      	str	r3, [sp, #104]	; 0x68
 8013aba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013abc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013abe:	0039      	movs	r1, r7
 8013ac0:	f7ee f9b8 	bl	8001e34 <__aeabi_dmul>
 8013ac4:	0006      	movs	r6, r0
 8013ac6:	000f      	movs	r7, r1
 8013ac8:	1e0b      	subs	r3, r1, #0
 8013aca:	d000      	beq.n	8013ace <_strtod_l+0x926>
 8013acc:	e5ab      	b.n	8013626 <_strtod_l+0x47e>
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	d000      	beq.n	8013ad4 <_strtod_l+0x92c>
 8013ad2:	e5a8      	b.n	8013626 <_strtod_l+0x47e>
 8013ad4:	9a04      	ldr	r2, [sp, #16]
 8013ad6:	3322      	adds	r3, #34	; 0x22
 8013ad8:	6013      	str	r3, [r2, #0]
 8013ada:	e5a4      	b.n	8013626 <_strtod_l+0x47e>
 8013adc:	2601      	movs	r6, #1
 8013ade:	4013      	ands	r3, r2
 8013ae0:	4a22      	ldr	r2, [pc, #136]	; (8013b6c <_strtod_l+0x9c4>)
 8013ae2:	4276      	negs	r6, r6
 8013ae4:	189b      	adds	r3, r3, r2
 8013ae6:	4a1e      	ldr	r2, [pc, #120]	; (8013b60 <_strtod_l+0x9b8>)
 8013ae8:	431a      	orrs	r2, r3
 8013aea:	0017      	movs	r7, r2
 8013aec:	e764      	b.n	80139b8 <_strtod_l+0x810>
 8013aee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d015      	beq.n	8013b20 <_strtod_l+0x978>
 8013af4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013af6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013af8:	4213      	tst	r3, r2
 8013afa:	d100      	bne.n	8013afe <_strtod_l+0x956>
 8013afc:	e75c      	b.n	80139b8 <_strtod_l+0x810>
 8013afe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013b00:	9a06      	ldr	r2, [sp, #24]
 8013b02:	0030      	movs	r0, r6
 8013b04:	0039      	movs	r1, r7
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d00f      	beq.n	8013b2a <_strtod_l+0x982>
 8013b0a:	f7ff fb35 	bl	8013178 <sulp>
 8013b0e:	0002      	movs	r2, r0
 8013b10:	000b      	movs	r3, r1
 8013b12:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013b14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013b16:	f7ed fa67 	bl	8000fe8 <__aeabi_dadd>
 8013b1a:	0006      	movs	r6, r0
 8013b1c:	000f      	movs	r7, r1
 8013b1e:	e74b      	b.n	80139b8 <_strtod_l+0x810>
 8013b20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013b22:	4233      	tst	r3, r6
 8013b24:	d100      	bne.n	8013b28 <_strtod_l+0x980>
 8013b26:	e747      	b.n	80139b8 <_strtod_l+0x810>
 8013b28:	e7e9      	b.n	8013afe <_strtod_l+0x956>
 8013b2a:	f7ff fb25 	bl	8013178 <sulp>
 8013b2e:	0002      	movs	r2, r0
 8013b30:	000b      	movs	r3, r1
 8013b32:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013b34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013b36:	f7ee fbef 	bl	8002318 <__aeabi_dsub>
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	0006      	movs	r6, r0
 8013b40:	000f      	movs	r7, r1
 8013b42:	f7ec fc8b 	bl	800045c <__aeabi_dcmpeq>
 8013b46:	2800      	cmp	r0, #0
 8013b48:	d000      	beq.n	8013b4c <_strtod_l+0x9a4>
 8013b4a:	e5f8      	b.n	801373e <_strtod_l+0x596>
 8013b4c:	e734      	b.n	80139b8 <_strtod_l+0x810>
 8013b4e:	46c0      	nop			; (mov r8, r8)
 8013b50:	fffffc02 	.word	0xfffffc02
 8013b54:	7ff00000 	.word	0x7ff00000
 8013b58:	0801a378 	.word	0x0801a378
 8013b5c:	fffffbe2 	.word	0xfffffbe2
 8013b60:	000fffff 	.word	0x000fffff
 8013b64:	7fefffff 	.word	0x7fefffff
 8013b68:	39500000 	.word	0x39500000
 8013b6c:	fff00000 	.word	0xfff00000
 8013b70:	9905      	ldr	r1, [sp, #20]
 8013b72:	0020      	movs	r0, r4
 8013b74:	f003 fae2 	bl	801713c <__ratio>
 8013b78:	2380      	movs	r3, #128	; 0x80
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	05db      	lsls	r3, r3, #23
 8013b7e:	9008      	str	r0, [sp, #32]
 8013b80:	9109      	str	r1, [sp, #36]	; 0x24
 8013b82:	f7ec fc7b 	bl	800047c <__aeabi_dcmple>
 8013b86:	2800      	cmp	r0, #0
 8013b88:	d100      	bne.n	8013b8c <_strtod_l+0x9e4>
 8013b8a:	e07f      	b.n	8013c8c <_strtod_l+0xae4>
 8013b8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d04b      	beq.n	8013c2a <_strtod_l+0xa82>
 8013b92:	2200      	movs	r2, #0
 8013b94:	4b8a      	ldr	r3, [pc, #552]	; (8013dc0 <_strtod_l+0xc18>)
 8013b96:	9210      	str	r2, [sp, #64]	; 0x40
 8013b98:	9311      	str	r3, [sp, #68]	; 0x44
 8013b9a:	4b89      	ldr	r3, [pc, #548]	; (8013dc0 <_strtod_l+0xc18>)
 8013b9c:	9308      	str	r3, [sp, #32]
 8013b9e:	4a89      	ldr	r2, [pc, #548]	; (8013dc4 <_strtod_l+0xc1c>)
 8013ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ba2:	4013      	ands	r3, r2
 8013ba4:	9314      	str	r3, [sp, #80]	; 0x50
 8013ba6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ba8:	4b87      	ldr	r3, [pc, #540]	; (8013dc8 <_strtod_l+0xc20>)
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d000      	beq.n	8013bb0 <_strtod_l+0xa08>
 8013bae:	e0ba      	b.n	8013d26 <_strtod_l+0xb7e>
 8013bb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013bb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013bb4:	921a      	str	r2, [sp, #104]	; 0x68
 8013bb6:	931b      	str	r3, [sp, #108]	; 0x6c
 8013bb8:	4a84      	ldr	r2, [pc, #528]	; (8013dcc <_strtod_l+0xc24>)
 8013bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013bbc:	4694      	mov	ip, r2
 8013bbe:	4463      	add	r3, ip
 8013bc0:	001f      	movs	r7, r3
 8013bc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013bc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013bc6:	0030      	movs	r0, r6
 8013bc8:	0039      	movs	r1, r7
 8013bca:	920c      	str	r2, [sp, #48]	; 0x30
 8013bcc:	930d      	str	r3, [sp, #52]	; 0x34
 8013bce:	f003 f9ef 	bl	8016fb0 <__ulp>
 8013bd2:	0002      	movs	r2, r0
 8013bd4:	000b      	movs	r3, r1
 8013bd6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013bd8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013bda:	f7ee f92b 	bl	8001e34 <__aeabi_dmul>
 8013bde:	0032      	movs	r2, r6
 8013be0:	003b      	movs	r3, r7
 8013be2:	f7ed fa01 	bl	8000fe8 <__aeabi_dadd>
 8013be6:	4a77      	ldr	r2, [pc, #476]	; (8013dc4 <_strtod_l+0xc1c>)
 8013be8:	4b79      	ldr	r3, [pc, #484]	; (8013dd0 <_strtod_l+0xc28>)
 8013bea:	0006      	movs	r6, r0
 8013bec:	400a      	ands	r2, r1
 8013bee:	429a      	cmp	r2, r3
 8013bf0:	d964      	bls.n	8013cbc <_strtod_l+0xb14>
 8013bf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013bf4:	4a77      	ldr	r2, [pc, #476]	; (8013dd4 <_strtod_l+0xc2c>)
 8013bf6:	4293      	cmp	r3, r2
 8013bf8:	d103      	bne.n	8013c02 <_strtod_l+0xa5a>
 8013bfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013bfc:	3301      	adds	r3, #1
 8013bfe:	d100      	bne.n	8013c02 <_strtod_l+0xa5a>
 8013c00:	e508      	b.n	8013614 <_strtod_l+0x46c>
 8013c02:	2601      	movs	r6, #1
 8013c04:	4f73      	ldr	r7, [pc, #460]	; (8013dd4 <_strtod_l+0xc2c>)
 8013c06:	4276      	negs	r6, r6
 8013c08:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013c0a:	9804      	ldr	r0, [sp, #16]
 8013c0c:	f002 ff56 	bl	8016abc <_Bfree>
 8013c10:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c12:	9804      	ldr	r0, [sp, #16]
 8013c14:	f002 ff52 	bl	8016abc <_Bfree>
 8013c18:	9905      	ldr	r1, [sp, #20]
 8013c1a:	9804      	ldr	r0, [sp, #16]
 8013c1c:	f002 ff4e 	bl	8016abc <_Bfree>
 8013c20:	0021      	movs	r1, r4
 8013c22:	9804      	ldr	r0, [sp, #16]
 8013c24:	f002 ff4a 	bl	8016abc <_Bfree>
 8013c28:	e5f4      	b.n	8013814 <_strtod_l+0x66c>
 8013c2a:	2e00      	cmp	r6, #0
 8013c2c:	d11e      	bne.n	8013c6c <_strtod_l+0xac4>
 8013c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c30:	031b      	lsls	r3, r3, #12
 8013c32:	d121      	bne.n	8013c78 <_strtod_l+0xad0>
 8013c34:	9808      	ldr	r0, [sp, #32]
 8013c36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c38:	2200      	movs	r2, #0
 8013c3a:	4b61      	ldr	r3, [pc, #388]	; (8013dc0 <_strtod_l+0xc18>)
 8013c3c:	f7ec fc14 	bl	8000468 <__aeabi_dcmplt>
 8013c40:	2800      	cmp	r0, #0
 8013c42:	d11f      	bne.n	8013c84 <_strtod_l+0xadc>
 8013c44:	9808      	ldr	r0, [sp, #32]
 8013c46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c48:	2200      	movs	r2, #0
 8013c4a:	4b63      	ldr	r3, [pc, #396]	; (8013dd8 <_strtod_l+0xc30>)
 8013c4c:	f7ee f8f2 	bl	8001e34 <__aeabi_dmul>
 8013c50:	0005      	movs	r5, r0
 8013c52:	9108      	str	r1, [sp, #32]
 8013c54:	2280      	movs	r2, #128	; 0x80
 8013c56:	0612      	lsls	r2, r2, #24
 8013c58:	4694      	mov	ip, r2
 8013c5a:	9b08      	ldr	r3, [sp, #32]
 8013c5c:	951e      	str	r5, [sp, #120]	; 0x78
 8013c5e:	4463      	add	r3, ip
 8013c60:	931f      	str	r3, [sp, #124]	; 0x7c
 8013c62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013c64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013c66:	9210      	str	r2, [sp, #64]	; 0x40
 8013c68:	9311      	str	r3, [sp, #68]	; 0x44
 8013c6a:	e798      	b.n	8013b9e <_strtod_l+0x9f6>
 8013c6c:	2e01      	cmp	r6, #1
 8013c6e:	d103      	bne.n	8013c78 <_strtod_l+0xad0>
 8013c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d100      	bne.n	8013c78 <_strtod_l+0xad0>
 8013c76:	e562      	b.n	801373e <_strtod_l+0x596>
 8013c78:	2200      	movs	r2, #0
 8013c7a:	4b58      	ldr	r3, [pc, #352]	; (8013ddc <_strtod_l+0xc34>)
 8013c7c:	2500      	movs	r5, #0
 8013c7e:	9210      	str	r2, [sp, #64]	; 0x40
 8013c80:	9311      	str	r3, [sp, #68]	; 0x44
 8013c82:	e78a      	b.n	8013b9a <_strtod_l+0x9f2>
 8013c84:	4b54      	ldr	r3, [pc, #336]	; (8013dd8 <_strtod_l+0xc30>)
 8013c86:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013c88:	9308      	str	r3, [sp, #32]
 8013c8a:	e7e3      	b.n	8013c54 <_strtod_l+0xaac>
 8013c8c:	4b52      	ldr	r3, [pc, #328]	; (8013dd8 <_strtod_l+0xc30>)
 8013c8e:	9808      	ldr	r0, [sp, #32]
 8013c90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c92:	2200      	movs	r2, #0
 8013c94:	f7ee f8ce 	bl	8001e34 <__aeabi_dmul>
 8013c98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c9a:	0005      	movs	r5, r0
 8013c9c:	9108      	str	r1, [sp, #32]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d107      	bne.n	8013cb2 <_strtod_l+0xb0a>
 8013ca2:	2380      	movs	r3, #128	; 0x80
 8013ca4:	061b      	lsls	r3, r3, #24
 8013ca6:	18cb      	adds	r3, r1, r3
 8013ca8:	9016      	str	r0, [sp, #88]	; 0x58
 8013caa:	9317      	str	r3, [sp, #92]	; 0x5c
 8013cac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013cae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013cb0:	e7d9      	b.n	8013c66 <_strtod_l+0xabe>
 8013cb2:	0002      	movs	r2, r0
 8013cb4:	9b08      	ldr	r3, [sp, #32]
 8013cb6:	9216      	str	r2, [sp, #88]	; 0x58
 8013cb8:	9317      	str	r3, [sp, #92]	; 0x5c
 8013cba:	e7f7      	b.n	8013cac <_strtod_l+0xb04>
 8013cbc:	23d4      	movs	r3, #212	; 0xd4
 8013cbe:	049b      	lsls	r3, r3, #18
 8013cc0:	18cf      	adds	r7, r1, r3
 8013cc2:	9b06      	ldr	r3, [sp, #24]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d19f      	bne.n	8013c08 <_strtod_l+0xa60>
 8013cc8:	4b3e      	ldr	r3, [pc, #248]	; (8013dc4 <_strtod_l+0xc1c>)
 8013cca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ccc:	970c      	str	r7, [sp, #48]	; 0x30
 8013cce:	403b      	ands	r3, r7
 8013cd0:	429a      	cmp	r2, r3
 8013cd2:	d199      	bne.n	8013c08 <_strtod_l+0xa60>
 8013cd4:	9908      	ldr	r1, [sp, #32]
 8013cd6:	0028      	movs	r0, r5
 8013cd8:	f7ee fe82 	bl	80029e0 <__aeabi_d2iz>
 8013cdc:	f7ee feb6 	bl	8002a4c <__aeabi_i2d>
 8013ce0:	000b      	movs	r3, r1
 8013ce2:	0002      	movs	r2, r0
 8013ce4:	9908      	ldr	r1, [sp, #32]
 8013ce6:	0028      	movs	r0, r5
 8013ce8:	f7ee fb16 	bl	8002318 <__aeabi_dsub>
 8013cec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013cee:	9008      	str	r0, [sp, #32]
 8013cf0:	9109      	str	r1, [sp, #36]	; 0x24
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d104      	bne.n	8013d00 <_strtod_l+0xb58>
 8013cf6:	2e00      	cmp	r6, #0
 8013cf8:	d102      	bne.n	8013d00 <_strtod_l+0xb58>
 8013cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cfc:	031b      	lsls	r3, r3, #12
 8013cfe:	d058      	beq.n	8013db2 <_strtod_l+0xc0a>
 8013d00:	9808      	ldr	r0, [sp, #32]
 8013d02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d04:	4a36      	ldr	r2, [pc, #216]	; (8013de0 <_strtod_l+0xc38>)
 8013d06:	4b37      	ldr	r3, [pc, #220]	; (8013de4 <_strtod_l+0xc3c>)
 8013d08:	f7ec fbae 	bl	8000468 <__aeabi_dcmplt>
 8013d0c:	2800      	cmp	r0, #0
 8013d0e:	d000      	beq.n	8013d12 <_strtod_l+0xb6a>
 8013d10:	e489      	b.n	8013626 <_strtod_l+0x47e>
 8013d12:	9808      	ldr	r0, [sp, #32]
 8013d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d16:	4a34      	ldr	r2, [pc, #208]	; (8013de8 <_strtod_l+0xc40>)
 8013d18:	4b2f      	ldr	r3, [pc, #188]	; (8013dd8 <_strtod_l+0xc30>)
 8013d1a:	f7ec fbb9 	bl	8000490 <__aeabi_dcmpgt>
 8013d1e:	2800      	cmp	r0, #0
 8013d20:	d100      	bne.n	8013d24 <_strtod_l+0xb7c>
 8013d22:	e771      	b.n	8013c08 <_strtod_l+0xa60>
 8013d24:	e47f      	b.n	8013626 <_strtod_l+0x47e>
 8013d26:	9b06      	ldr	r3, [sp, #24]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d02a      	beq.n	8013d82 <_strtod_l+0xbda>
 8013d2c:	23d4      	movs	r3, #212	; 0xd4
 8013d2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013d30:	04db      	lsls	r3, r3, #19
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d825      	bhi.n	8013d82 <_strtod_l+0xbda>
 8013d36:	4a2d      	ldr	r2, [pc, #180]	; (8013dec <_strtod_l+0xc44>)
 8013d38:	4b2d      	ldr	r3, [pc, #180]	; (8013df0 <_strtod_l+0xc48>)
 8013d3a:	0028      	movs	r0, r5
 8013d3c:	9908      	ldr	r1, [sp, #32]
 8013d3e:	f7ec fb9d 	bl	800047c <__aeabi_dcmple>
 8013d42:	2800      	cmp	r0, #0
 8013d44:	d016      	beq.n	8013d74 <_strtod_l+0xbcc>
 8013d46:	0028      	movs	r0, r5
 8013d48:	9908      	ldr	r1, [sp, #32]
 8013d4a:	f7ec fc51 	bl	80005f0 <__aeabi_d2uiz>
 8013d4e:	2800      	cmp	r0, #0
 8013d50:	d100      	bne.n	8013d54 <_strtod_l+0xbac>
 8013d52:	3001      	adds	r0, #1
 8013d54:	f7ee feb4 	bl	8002ac0 <__aeabi_ui2d>
 8013d58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013d5a:	0005      	movs	r5, r0
 8013d5c:	9108      	str	r1, [sp, #32]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d122      	bne.n	8013da8 <_strtod_l+0xc00>
 8013d62:	2380      	movs	r3, #128	; 0x80
 8013d64:	061b      	lsls	r3, r3, #24
 8013d66:	18cb      	adds	r3, r1, r3
 8013d68:	9018      	str	r0, [sp, #96]	; 0x60
 8013d6a:	9319      	str	r3, [sp, #100]	; 0x64
 8013d6c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013d6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013d70:	9210      	str	r2, [sp, #64]	; 0x40
 8013d72:	9311      	str	r3, [sp, #68]	; 0x44
 8013d74:	22d6      	movs	r2, #214	; 0xd6
 8013d76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013d78:	04d2      	lsls	r2, r2, #19
 8013d7a:	189b      	adds	r3, r3, r2
 8013d7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013d7e:	1a9b      	subs	r3, r3, r2
 8013d80:	9311      	str	r3, [sp, #68]	; 0x44
 8013d82:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013d84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013d86:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013d88:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013d8a:	f003 f911 	bl	8016fb0 <__ulp>
 8013d8e:	0002      	movs	r2, r0
 8013d90:	000b      	movs	r3, r1
 8013d92:	0030      	movs	r0, r6
 8013d94:	0039      	movs	r1, r7
 8013d96:	f7ee f84d 	bl	8001e34 <__aeabi_dmul>
 8013d9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d9e:	f7ed f923 	bl	8000fe8 <__aeabi_dadd>
 8013da2:	0006      	movs	r6, r0
 8013da4:	000f      	movs	r7, r1
 8013da6:	e78c      	b.n	8013cc2 <_strtod_l+0xb1a>
 8013da8:	0002      	movs	r2, r0
 8013daa:	9b08      	ldr	r3, [sp, #32]
 8013dac:	9218      	str	r2, [sp, #96]	; 0x60
 8013dae:	9319      	str	r3, [sp, #100]	; 0x64
 8013db0:	e7dc      	b.n	8013d6c <_strtod_l+0xbc4>
 8013db2:	4a0b      	ldr	r2, [pc, #44]	; (8013de0 <_strtod_l+0xc38>)
 8013db4:	4b0f      	ldr	r3, [pc, #60]	; (8013df4 <_strtod_l+0xc4c>)
 8013db6:	9808      	ldr	r0, [sp, #32]
 8013db8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013dba:	f7ec fb55 	bl	8000468 <__aeabi_dcmplt>
 8013dbe:	e7ae      	b.n	8013d1e <_strtod_l+0xb76>
 8013dc0:	3ff00000 	.word	0x3ff00000
 8013dc4:	7ff00000 	.word	0x7ff00000
 8013dc8:	7fe00000 	.word	0x7fe00000
 8013dcc:	fcb00000 	.word	0xfcb00000
 8013dd0:	7c9fffff 	.word	0x7c9fffff
 8013dd4:	7fefffff 	.word	0x7fefffff
 8013dd8:	3fe00000 	.word	0x3fe00000
 8013ddc:	bff00000 	.word	0xbff00000
 8013de0:	94a03595 	.word	0x94a03595
 8013de4:	3fdfffff 	.word	0x3fdfffff
 8013de8:	35afe535 	.word	0x35afe535
 8013dec:	ffc00000 	.word	0xffc00000
 8013df0:	41dfffff 	.word	0x41dfffff
 8013df4:	3fcfffff 	.word	0x3fcfffff

08013df8 <strtod>:
 8013df8:	4b06      	ldr	r3, [pc, #24]	; (8013e14 <strtod+0x1c>)
 8013dfa:	b510      	push	{r4, lr}
 8013dfc:	0004      	movs	r4, r0
 8013dfe:	6818      	ldr	r0, [r3, #0]
 8013e00:	000a      	movs	r2, r1
 8013e02:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d100      	bne.n	8013e0a <strtod+0x12>
 8013e08:	4b03      	ldr	r3, [pc, #12]	; (8013e18 <strtod+0x20>)
 8013e0a:	0021      	movs	r1, r4
 8013e0c:	f7ff f9cc 	bl	80131a8 <_strtod_l>
 8013e10:	bd10      	pop	{r4, pc}
 8013e12:	46c0      	nop			; (mov r8, r8)
 8013e14:	200000c8 	.word	0x200000c8
 8013e18:	200004f8 	.word	0x200004f8

08013e1c <strtok>:
 8013e1c:	4b03      	ldr	r3, [pc, #12]	; (8013e2c <strtok+0x10>)
 8013e1e:	b510      	push	{r4, lr}
 8013e20:	681a      	ldr	r2, [r3, #0]
 8013e22:	2301      	movs	r3, #1
 8013e24:	325c      	adds	r2, #92	; 0x5c
 8013e26:	f000 f803 	bl	8013e30 <__strtok_r>
 8013e2a:	bd10      	pop	{r4, pc}
 8013e2c:	200000c8 	.word	0x200000c8

08013e30 <__strtok_r>:
 8013e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e32:	2800      	cmp	r0, #0
 8013e34:	d104      	bne.n	8013e40 <__strtok_r+0x10>
 8013e36:	6810      	ldr	r0, [r2, #0]
 8013e38:	2800      	cmp	r0, #0
 8013e3a:	d101      	bne.n	8013e40 <__strtok_r+0x10>
 8013e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e3e:	0020      	movs	r0, r4
 8013e40:	000e      	movs	r6, r1
 8013e42:	7805      	ldrb	r5, [r0, #0]
 8013e44:	1c44      	adds	r4, r0, #1
 8013e46:	7837      	ldrb	r7, [r6, #0]
 8013e48:	2f00      	cmp	r7, #0
 8013e4a:	d104      	bne.n	8013e56 <__strtok_r+0x26>
 8013e4c:	2d00      	cmp	r5, #0
 8013e4e:	d110      	bne.n	8013e72 <__strtok_r+0x42>
 8013e50:	6015      	str	r5, [r2, #0]
 8013e52:	0028      	movs	r0, r5
 8013e54:	e7f2      	b.n	8013e3c <__strtok_r+0xc>
 8013e56:	3601      	adds	r6, #1
 8013e58:	42bd      	cmp	r5, r7
 8013e5a:	d1f4      	bne.n	8013e46 <__strtok_r+0x16>
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d1ee      	bne.n	8013e3e <__strtok_r+0xe>
 8013e60:	6014      	str	r4, [r2, #0]
 8013e62:	7003      	strb	r3, [r0, #0]
 8013e64:	e7ea      	b.n	8013e3c <__strtok_r+0xc>
 8013e66:	0033      	movs	r3, r6
 8013e68:	e00d      	b.n	8013e86 <__strtok_r+0x56>
 8013e6a:	3501      	adds	r5, #1
 8013e6c:	2f00      	cmp	r7, #0
 8013e6e:	d103      	bne.n	8013e78 <__strtok_r+0x48>
 8013e70:	001c      	movs	r4, r3
 8013e72:	000d      	movs	r5, r1
 8013e74:	7826      	ldrb	r6, [r4, #0]
 8013e76:	1c63      	adds	r3, r4, #1
 8013e78:	782f      	ldrb	r7, [r5, #0]
 8013e7a:	42be      	cmp	r6, r7
 8013e7c:	d1f5      	bne.n	8013e6a <__strtok_r+0x3a>
 8013e7e:	2e00      	cmp	r6, #0
 8013e80:	d0f1      	beq.n	8013e66 <__strtok_r+0x36>
 8013e82:	2100      	movs	r1, #0
 8013e84:	7021      	strb	r1, [r4, #0]
 8013e86:	6013      	str	r3, [r2, #0]
 8013e88:	e7d8      	b.n	8013e3c <__strtok_r+0xc>
	...

08013e8c <_strtol_l.isra.0>:
 8013e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e8e:	001f      	movs	r7, r3
 8013e90:	000e      	movs	r6, r1
 8013e92:	b087      	sub	sp, #28
 8013e94:	9005      	str	r0, [sp, #20]
 8013e96:	9101      	str	r1, [sp, #4]
 8013e98:	9202      	str	r2, [sp, #8]
 8013e9a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013e9c:	7834      	ldrb	r4, [r6, #0]
 8013e9e:	f7fe fc9f 	bl	80127e0 <__locale_ctype_ptr_l>
 8013ea2:	2208      	movs	r2, #8
 8013ea4:	1900      	adds	r0, r0, r4
 8013ea6:	7843      	ldrb	r3, [r0, #1]
 8013ea8:	1c75      	adds	r5, r6, #1
 8013eaa:	4013      	ands	r3, r2
 8013eac:	d136      	bne.n	8013f1c <_strtol_l.isra.0+0x90>
 8013eae:	2c2d      	cmp	r4, #45	; 0x2d
 8013eb0:	d136      	bne.n	8013f20 <_strtol_l.isra.0+0x94>
 8013eb2:	1cb5      	adds	r5, r6, #2
 8013eb4:	7874      	ldrb	r4, [r6, #1]
 8013eb6:	2601      	movs	r6, #1
 8013eb8:	2f00      	cmp	r7, #0
 8013eba:	d062      	beq.n	8013f82 <_strtol_l.isra.0+0xf6>
 8013ebc:	2f10      	cmp	r7, #16
 8013ebe:	d109      	bne.n	8013ed4 <_strtol_l.isra.0+0x48>
 8013ec0:	2c30      	cmp	r4, #48	; 0x30
 8013ec2:	d107      	bne.n	8013ed4 <_strtol_l.isra.0+0x48>
 8013ec4:	2220      	movs	r2, #32
 8013ec6:	782b      	ldrb	r3, [r5, #0]
 8013ec8:	4393      	bics	r3, r2
 8013eca:	2b58      	cmp	r3, #88	; 0x58
 8013ecc:	d154      	bne.n	8013f78 <_strtol_l.isra.0+0xec>
 8013ece:	2710      	movs	r7, #16
 8013ed0:	786c      	ldrb	r4, [r5, #1]
 8013ed2:	3502      	adds	r5, #2
 8013ed4:	4b2d      	ldr	r3, [pc, #180]	; (8013f8c <_strtol_l.isra.0+0x100>)
 8013ed6:	0039      	movs	r1, r7
 8013ed8:	18f3      	adds	r3, r6, r3
 8013eda:	0018      	movs	r0, r3
 8013edc:	9303      	str	r3, [sp, #12]
 8013ede:	f7ec f9bd 	bl	800025c <__aeabi_uidivmod>
 8013ee2:	9104      	str	r1, [sp, #16]
 8013ee4:	2101      	movs	r1, #1
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	4249      	negs	r1, r1
 8013eea:	0002      	movs	r2, r0
 8013eec:	468c      	mov	ip, r1
 8013eee:	0018      	movs	r0, r3
 8013ef0:	0021      	movs	r1, r4
 8013ef2:	3930      	subs	r1, #48	; 0x30
 8013ef4:	2909      	cmp	r1, #9
 8013ef6:	d81a      	bhi.n	8013f2e <_strtol_l.isra.0+0xa2>
 8013ef8:	000c      	movs	r4, r1
 8013efa:	42a7      	cmp	r7, r4
 8013efc:	dd23      	ble.n	8013f46 <_strtol_l.isra.0+0xba>
 8013efe:	1c59      	adds	r1, r3, #1
 8013f00:	d009      	beq.n	8013f16 <_strtol_l.isra.0+0x8a>
 8013f02:	4663      	mov	r3, ip
 8013f04:	4282      	cmp	r2, r0
 8013f06:	d306      	bcc.n	8013f16 <_strtol_l.isra.0+0x8a>
 8013f08:	d102      	bne.n	8013f10 <_strtol_l.isra.0+0x84>
 8013f0a:	9904      	ldr	r1, [sp, #16]
 8013f0c:	42a1      	cmp	r1, r4
 8013f0e:	db02      	blt.n	8013f16 <_strtol_l.isra.0+0x8a>
 8013f10:	2301      	movs	r3, #1
 8013f12:	4378      	muls	r0, r7
 8013f14:	1820      	adds	r0, r4, r0
 8013f16:	782c      	ldrb	r4, [r5, #0]
 8013f18:	3501      	adds	r5, #1
 8013f1a:	e7e9      	b.n	8013ef0 <_strtol_l.isra.0+0x64>
 8013f1c:	002e      	movs	r6, r5
 8013f1e:	e7bc      	b.n	8013e9a <_strtol_l.isra.0+0xe>
 8013f20:	2c2b      	cmp	r4, #43	; 0x2b
 8013f22:	d001      	beq.n	8013f28 <_strtol_l.isra.0+0x9c>
 8013f24:	001e      	movs	r6, r3
 8013f26:	e7c7      	b.n	8013eb8 <_strtol_l.isra.0+0x2c>
 8013f28:	1cb5      	adds	r5, r6, #2
 8013f2a:	7874      	ldrb	r4, [r6, #1]
 8013f2c:	e7fa      	b.n	8013f24 <_strtol_l.isra.0+0x98>
 8013f2e:	0021      	movs	r1, r4
 8013f30:	3941      	subs	r1, #65	; 0x41
 8013f32:	2919      	cmp	r1, #25
 8013f34:	d801      	bhi.n	8013f3a <_strtol_l.isra.0+0xae>
 8013f36:	3c37      	subs	r4, #55	; 0x37
 8013f38:	e7df      	b.n	8013efa <_strtol_l.isra.0+0x6e>
 8013f3a:	0021      	movs	r1, r4
 8013f3c:	3961      	subs	r1, #97	; 0x61
 8013f3e:	2919      	cmp	r1, #25
 8013f40:	d801      	bhi.n	8013f46 <_strtol_l.isra.0+0xba>
 8013f42:	3c57      	subs	r4, #87	; 0x57
 8013f44:	e7d9      	b.n	8013efa <_strtol_l.isra.0+0x6e>
 8013f46:	1c5a      	adds	r2, r3, #1
 8013f48:	d108      	bne.n	8013f5c <_strtol_l.isra.0+0xd0>
 8013f4a:	9a05      	ldr	r2, [sp, #20]
 8013f4c:	3323      	adds	r3, #35	; 0x23
 8013f4e:	6013      	str	r3, [r2, #0]
 8013f50:	9b02      	ldr	r3, [sp, #8]
 8013f52:	9803      	ldr	r0, [sp, #12]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d109      	bne.n	8013f6c <_strtol_l.isra.0+0xe0>
 8013f58:	b007      	add	sp, #28
 8013f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f5c:	2e00      	cmp	r6, #0
 8013f5e:	d000      	beq.n	8013f62 <_strtol_l.isra.0+0xd6>
 8013f60:	4240      	negs	r0, r0
 8013f62:	9a02      	ldr	r2, [sp, #8]
 8013f64:	2a00      	cmp	r2, #0
 8013f66:	d0f7      	beq.n	8013f58 <_strtol_l.isra.0+0xcc>
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d001      	beq.n	8013f70 <_strtol_l.isra.0+0xe4>
 8013f6c:	1e6b      	subs	r3, r5, #1
 8013f6e:	9301      	str	r3, [sp, #4]
 8013f70:	9b02      	ldr	r3, [sp, #8]
 8013f72:	9a01      	ldr	r2, [sp, #4]
 8013f74:	601a      	str	r2, [r3, #0]
 8013f76:	e7ef      	b.n	8013f58 <_strtol_l.isra.0+0xcc>
 8013f78:	2430      	movs	r4, #48	; 0x30
 8013f7a:	2f00      	cmp	r7, #0
 8013f7c:	d1aa      	bne.n	8013ed4 <_strtol_l.isra.0+0x48>
 8013f7e:	2708      	movs	r7, #8
 8013f80:	e7a8      	b.n	8013ed4 <_strtol_l.isra.0+0x48>
 8013f82:	2c30      	cmp	r4, #48	; 0x30
 8013f84:	d09e      	beq.n	8013ec4 <_strtol_l.isra.0+0x38>
 8013f86:	270a      	movs	r7, #10
 8013f88:	e7a4      	b.n	8013ed4 <_strtol_l.isra.0+0x48>
 8013f8a:	46c0      	nop			; (mov r8, r8)
 8013f8c:	7fffffff 	.word	0x7fffffff

08013f90 <strtol>:
 8013f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f92:	0013      	movs	r3, r2
 8013f94:	4a06      	ldr	r2, [pc, #24]	; (8013fb0 <strtol+0x20>)
 8013f96:	0005      	movs	r5, r0
 8013f98:	6810      	ldr	r0, [r2, #0]
 8013f9a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8013f9c:	2c00      	cmp	r4, #0
 8013f9e:	d100      	bne.n	8013fa2 <strtol+0x12>
 8013fa0:	4c04      	ldr	r4, [pc, #16]	; (8013fb4 <strtol+0x24>)
 8013fa2:	000a      	movs	r2, r1
 8013fa4:	9400      	str	r4, [sp, #0]
 8013fa6:	0029      	movs	r1, r5
 8013fa8:	f7ff ff70 	bl	8013e8c <_strtol_l.isra.0>
 8013fac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8013fae:	46c0      	nop			; (mov r8, r8)
 8013fb0:	200000c8 	.word	0x200000c8
 8013fb4:	200004f8 	.word	0x200004f8

08013fb8 <_svfprintf_r>:
 8013fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fba:	b0d9      	sub	sp, #356	; 0x164
 8013fbc:	910b      	str	r1, [sp, #44]	; 0x2c
 8013fbe:	9209      	str	r2, [sp, #36]	; 0x24
 8013fc0:	001c      	movs	r4, r3
 8013fc2:	900a      	str	r0, [sp, #40]	; 0x28
 8013fc4:	f002 fd26 	bl	8016a14 <_localeconv_r>
 8013fc8:	6803      	ldr	r3, [r0, #0]
 8013fca:	0018      	movs	r0, r3
 8013fcc:	931c      	str	r3, [sp, #112]	; 0x70
 8013fce:	f7ec f8a3 	bl	8000118 <strlen>
 8013fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013fd4:	9014      	str	r0, [sp, #80]	; 0x50
 8013fd6:	899b      	ldrh	r3, [r3, #12]
 8013fd8:	061b      	lsls	r3, r3, #24
 8013fda:	d518      	bpl.n	801400e <_svfprintf_r+0x56>
 8013fdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013fde:	691b      	ldr	r3, [r3, #16]
 8013fe0:	9308      	str	r3, [sp, #32]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d113      	bne.n	801400e <_svfprintf_r+0x56>
 8013fe6:	2140      	movs	r1, #64	; 0x40
 8013fe8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013fea:	f7fe fc1f 	bl	801282c <_malloc_r>
 8013fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ff0:	6018      	str	r0, [r3, #0]
 8013ff2:	6118      	str	r0, [r3, #16]
 8013ff4:	2800      	cmp	r0, #0
 8013ff6:	d107      	bne.n	8014008 <_svfprintf_r+0x50>
 8013ff8:	230c      	movs	r3, #12
 8013ffa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ffc:	6013      	str	r3, [r2, #0]
 8013ffe:	3b0d      	subs	r3, #13
 8014000:	9315      	str	r3, [sp, #84]	; 0x54
 8014002:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014004:	b059      	add	sp, #356	; 0x164
 8014006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014008:	2340      	movs	r3, #64	; 0x40
 801400a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801400c:	6153      	str	r3, [r2, #20]
 801400e:	2600      	movs	r6, #0
 8014010:	af2f      	add	r7, sp, #188	; 0xbc
 8014012:	972c      	str	r7, [sp, #176]	; 0xb0
 8014014:	962e      	str	r6, [sp, #184]	; 0xb8
 8014016:	962d      	str	r6, [sp, #180]	; 0xb4
 8014018:	960d      	str	r6, [sp, #52]	; 0x34
 801401a:	961a      	str	r6, [sp, #104]	; 0x68
 801401c:	9619      	str	r6, [sp, #100]	; 0x64
 801401e:	961e      	str	r6, [sp, #120]	; 0x78
 8014020:	961d      	str	r6, [sp, #116]	; 0x74
 8014022:	9613      	str	r6, [sp, #76]	; 0x4c
 8014024:	961b      	str	r6, [sp, #108]	; 0x6c
 8014026:	961f      	str	r6, [sp, #124]	; 0x7c
 8014028:	9615      	str	r6, [sp, #84]	; 0x54
 801402a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801402c:	782b      	ldrb	r3, [r5, #0]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d002      	beq.n	8014038 <_svfprintf_r+0x80>
 8014032:	2b25      	cmp	r3, #37	; 0x25
 8014034:	d000      	beq.n	8014038 <_svfprintf_r+0x80>
 8014036:	e095      	b.n	8014164 <_svfprintf_r+0x1ac>
 8014038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801403a:	1aee      	subs	r6, r5, r3
 801403c:	d017      	beq.n	801406e <_svfprintf_r+0xb6>
 801403e:	603b      	str	r3, [r7, #0]
 8014040:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014042:	607e      	str	r6, [r7, #4]
 8014044:	199b      	adds	r3, r3, r6
 8014046:	932e      	str	r3, [sp, #184]	; 0xb8
 8014048:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801404a:	3708      	adds	r7, #8
 801404c:	9308      	str	r3, [sp, #32]
 801404e:	3301      	adds	r3, #1
 8014050:	932d      	str	r3, [sp, #180]	; 0xb4
 8014052:	2b07      	cmp	r3, #7
 8014054:	dd08      	ble.n	8014068 <_svfprintf_r+0xb0>
 8014056:	aa2c      	add	r2, sp, #176	; 0xb0
 8014058:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801405a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801405c:	f003 f900 	bl	8017260 <__ssprint_r>
 8014060:	2800      	cmp	r0, #0
 8014062:	d000      	beq.n	8014066 <_svfprintf_r+0xae>
 8014064:	e2d9      	b.n	801461a <_svfprintf_r+0x662>
 8014066:	af2f      	add	r7, sp, #188	; 0xbc
 8014068:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801406a:	199b      	adds	r3, r3, r6
 801406c:	9315      	str	r3, [sp, #84]	; 0x54
 801406e:	782b      	ldrb	r3, [r5, #0]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d101      	bne.n	8014078 <_svfprintf_r+0xc0>
 8014074:	f001 f9e5 	bl	8015442 <_svfprintf_r+0x148a>
 8014078:	1c6b      	adds	r3, r5, #1
 801407a:	221b      	movs	r2, #27
 801407c:	9311      	str	r3, [sp, #68]	; 0x44
 801407e:	2300      	movs	r3, #0
 8014080:	a91e      	add	r1, sp, #120	; 0x78
 8014082:	1852      	adds	r2, r2, r1
 8014084:	7013      	strb	r3, [r2, #0]
 8014086:	2201      	movs	r2, #1
 8014088:	001e      	movs	r6, r3
 801408a:	2520      	movs	r5, #32
 801408c:	4252      	negs	r2, r2
 801408e:	9208      	str	r2, [sp, #32]
 8014090:	9316      	str	r3, [sp, #88]	; 0x58
 8014092:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014094:	781b      	ldrb	r3, [r3, #0]
 8014096:	930e      	str	r3, [sp, #56]	; 0x38
 8014098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801409a:	3301      	adds	r3, #1
 801409c:	9311      	str	r3, [sp, #68]	; 0x44
 801409e:	980e      	ldr	r0, [sp, #56]	; 0x38
 80140a0:	3820      	subs	r0, #32
 80140a2:	285a      	cmp	r0, #90	; 0x5a
 80140a4:	d901      	bls.n	80140aa <_svfprintf_r+0xf2>
 80140a6:	f000 fe3d 	bl	8014d24 <_svfprintf_r+0xd6c>
 80140aa:	f7ec f847 	bl	800013c <__gnu_thumb1_case_shi>
 80140ae:	009e      	.short	0x009e
 80140b0:	063b063b 	.word	0x063b063b
 80140b4:	063b00a7 	.word	0x063b00a7
 80140b8:	063b063b 	.word	0x063b063b
 80140bc:	063b0080 	.word	0x063b0080
 80140c0:	00a9063b 	.word	0x00a9063b
 80140c4:	063b00b3 	.word	0x063b00b3
 80140c8:	00b900b1 	.word	0x00b900b1
 80140cc:	00dd063b 	.word	0x00dd063b
 80140d0:	00df00df 	.word	0x00df00df
 80140d4:	00df00df 	.word	0x00df00df
 80140d8:	00df00df 	.word	0x00df00df
 80140dc:	00df00df 	.word	0x00df00df
 80140e0:	063b00df 	.word	0x063b00df
 80140e4:	063b063b 	.word	0x063b063b
 80140e8:	063b063b 	.word	0x063b063b
 80140ec:	063b063b 	.word	0x063b063b
 80140f0:	063b0240 	.word	0x063b0240
 80140f4:	01fd010a 	.word	0x01fd010a
 80140f8:	02400240 	.word	0x02400240
 80140fc:	063b0240 	.word	0x063b0240
 8014100:	063b063b 	.word	0x063b063b
 8014104:	00f1063b 	.word	0x00f1063b
 8014108:	063b063b 	.word	0x063b063b
 801410c:	063b04e2 	.word	0x063b04e2
 8014110:	063b063b 	.word	0x063b063b
 8014114:	063b0537 	.word	0x063b0537
 8014118:	063b0557 	.word	0x063b0557
 801411c:	005d063b 	.word	0x005d063b
 8014120:	063b063b 	.word	0x063b063b
 8014124:	063b063b 	.word	0x063b063b
 8014128:	063b063b 	.word	0x063b063b
 801412c:	063b063b 	.word	0x063b063b
 8014130:	063b0240 	.word	0x063b0240
 8014134:	01ff010a 	.word	0x01ff010a
 8014138:	02400240 	.word	0x02400240
 801413c:	00f30240 	.word	0x00f30240
 8014140:	010601ff 	.word	0x010601ff
 8014144:	00ff063b 	.word	0x00ff063b
 8014148:	04c5063b 	.word	0x04c5063b
 801414c:	052704e4 	.word	0x052704e4
 8014150:	063b0106 	.word	0x063b0106
 8014154:	fff20537 	.word	0xfff20537
 8014158:	063b0559 	.word	0x063b0559
 801415c:	0582063b 	.word	0x0582063b
 8014160:	fff2063b 	.word	0xfff2063b
 8014164:	3501      	adds	r5, #1
 8014166:	e761      	b.n	801402c <_svfprintf_r+0x74>
 8014168:	4bcb      	ldr	r3, [pc, #812]	; (8014498 <_svfprintf_r+0x4e0>)
 801416a:	2220      	movs	r2, #32
 801416c:	931e      	str	r3, [sp, #120]	; 0x78
 801416e:	4032      	ands	r2, r6
 8014170:	d101      	bne.n	8014176 <_svfprintf_r+0x1be>
 8014172:	f000 fd21 	bl	8014bb8 <_svfprintf_r+0xc00>
 8014176:	2307      	movs	r3, #7
 8014178:	3407      	adds	r4, #7
 801417a:	439c      	bics	r4, r3
 801417c:	0023      	movs	r3, r4
 801417e:	3308      	adds	r3, #8
 8014180:	9312      	str	r3, [sp, #72]	; 0x48
 8014182:	6823      	ldr	r3, [r4, #0]
 8014184:	6864      	ldr	r4, [r4, #4]
 8014186:	9306      	str	r3, [sp, #24]
 8014188:	9407      	str	r4, [sp, #28]
 801418a:	07f3      	lsls	r3, r6, #31
 801418c:	d50a      	bpl.n	80141a4 <_svfprintf_r+0x1ec>
 801418e:	9b06      	ldr	r3, [sp, #24]
 8014190:	9a07      	ldr	r2, [sp, #28]
 8014192:	4313      	orrs	r3, r2
 8014194:	d006      	beq.n	80141a4 <_svfprintf_r+0x1ec>
 8014196:	2230      	movs	r2, #48	; 0x30
 8014198:	ab25      	add	r3, sp, #148	; 0x94
 801419a:	701a      	strb	r2, [r3, #0]
 801419c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801419e:	705a      	strb	r2, [r3, #1]
 80141a0:	2302      	movs	r3, #2
 80141a2:	431e      	orrs	r6, r3
 80141a4:	4bbd      	ldr	r3, [pc, #756]	; (801449c <_svfprintf_r+0x4e4>)
 80141a6:	401e      	ands	r6, r3
 80141a8:	2302      	movs	r3, #2
 80141aa:	f000 fc74 	bl	8014a96 <_svfprintf_r+0xade>
 80141ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80141b0:	f002 fc30 	bl	8016a14 <_localeconv_r>
 80141b4:	6843      	ldr	r3, [r0, #4]
 80141b6:	0018      	movs	r0, r3
 80141b8:	931f      	str	r3, [sp, #124]	; 0x7c
 80141ba:	f7eb ffad 	bl	8000118 <strlen>
 80141be:	901b      	str	r0, [sp, #108]	; 0x6c
 80141c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80141c2:	f002 fc27 	bl	8016a14 <_localeconv_r>
 80141c6:	6883      	ldr	r3, [r0, #8]
 80141c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80141ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d100      	bne.n	80141d2 <_svfprintf_r+0x21a>
 80141d0:	e75f      	b.n	8014092 <_svfprintf_r+0xda>
 80141d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d100      	bne.n	80141da <_svfprintf_r+0x222>
 80141d8:	e75b      	b.n	8014092 <_svfprintf_r+0xda>
 80141da:	781b      	ldrb	r3, [r3, #0]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d100      	bne.n	80141e2 <_svfprintf_r+0x22a>
 80141e0:	e757      	b.n	8014092 <_svfprintf_r+0xda>
 80141e2:	2380      	movs	r3, #128	; 0x80
 80141e4:	00db      	lsls	r3, r3, #3
 80141e6:	431e      	orrs	r6, r3
 80141e8:	e753      	b.n	8014092 <_svfprintf_r+0xda>
 80141ea:	231b      	movs	r3, #27
 80141ec:	aa1e      	add	r2, sp, #120	; 0x78
 80141ee:	189b      	adds	r3, r3, r2
 80141f0:	781a      	ldrb	r2, [r3, #0]
 80141f2:	2a00      	cmp	r2, #0
 80141f4:	d000      	beq.n	80141f8 <_svfprintf_r+0x240>
 80141f6:	e74c      	b.n	8014092 <_svfprintf_r+0xda>
 80141f8:	701d      	strb	r5, [r3, #0]
 80141fa:	e74a      	b.n	8014092 <_svfprintf_r+0xda>
 80141fc:	2301      	movs	r3, #1
 80141fe:	e7f2      	b.n	80141e6 <_svfprintf_r+0x22e>
 8014200:	6823      	ldr	r3, [r4, #0]
 8014202:	3404      	adds	r4, #4
 8014204:	9316      	str	r3, [sp, #88]	; 0x58
 8014206:	2b00      	cmp	r3, #0
 8014208:	db00      	blt.n	801420c <_svfprintf_r+0x254>
 801420a:	e742      	b.n	8014092 <_svfprintf_r+0xda>
 801420c:	425b      	negs	r3, r3
 801420e:	9316      	str	r3, [sp, #88]	; 0x58
 8014210:	2304      	movs	r3, #4
 8014212:	e7e8      	b.n	80141e6 <_svfprintf_r+0x22e>
 8014214:	231b      	movs	r3, #27
 8014216:	aa1e      	add	r2, sp, #120	; 0x78
 8014218:	189b      	adds	r3, r3, r2
 801421a:	222b      	movs	r2, #43	; 0x2b
 801421c:	701a      	strb	r2, [r3, #0]
 801421e:	e738      	b.n	8014092 <_svfprintf_r+0xda>
 8014220:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014222:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014224:	7812      	ldrb	r2, [r2, #0]
 8014226:	3301      	adds	r3, #1
 8014228:	920e      	str	r2, [sp, #56]	; 0x38
 801422a:	2a2a      	cmp	r2, #42	; 0x2a
 801422c:	d008      	beq.n	8014240 <_svfprintf_r+0x288>
 801422e:	2200      	movs	r2, #0
 8014230:	9208      	str	r2, [sp, #32]
 8014232:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014234:	001a      	movs	r2, r3
 8014236:	3930      	subs	r1, #48	; 0x30
 8014238:	2909      	cmp	r1, #9
 801423a:	d90c      	bls.n	8014256 <_svfprintf_r+0x29e>
 801423c:	9211      	str	r2, [sp, #68]	; 0x44
 801423e:	e72e      	b.n	801409e <_svfprintf_r+0xe6>
 8014240:	6821      	ldr	r1, [r4, #0]
 8014242:	1d22      	adds	r2, r4, #4
 8014244:	9108      	str	r1, [sp, #32]
 8014246:	2900      	cmp	r1, #0
 8014248:	da02      	bge.n	8014250 <_svfprintf_r+0x298>
 801424a:	2101      	movs	r1, #1
 801424c:	4249      	negs	r1, r1
 801424e:	9108      	str	r1, [sp, #32]
 8014250:	0014      	movs	r4, r2
 8014252:	9311      	str	r3, [sp, #68]	; 0x44
 8014254:	e71d      	b.n	8014092 <_svfprintf_r+0xda>
 8014256:	200a      	movs	r0, #10
 8014258:	9a08      	ldr	r2, [sp, #32]
 801425a:	4342      	muls	r2, r0
 801425c:	1852      	adds	r2, r2, r1
 801425e:	9208      	str	r2, [sp, #32]
 8014260:	781a      	ldrb	r2, [r3, #0]
 8014262:	3301      	adds	r3, #1
 8014264:	920e      	str	r2, [sp, #56]	; 0x38
 8014266:	e7e4      	b.n	8014232 <_svfprintf_r+0x27a>
 8014268:	2380      	movs	r3, #128	; 0x80
 801426a:	e7bc      	b.n	80141e6 <_svfprintf_r+0x22e>
 801426c:	2300      	movs	r3, #0
 801426e:	9316      	str	r3, [sp, #88]	; 0x58
 8014270:	220a      	movs	r2, #10
 8014272:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014274:	4353      	muls	r3, r2
 8014276:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014278:	3a30      	subs	r2, #48	; 0x30
 801427a:	18d3      	adds	r3, r2, r3
 801427c:	9316      	str	r3, [sp, #88]	; 0x58
 801427e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014280:	1c5a      	adds	r2, r3, #1
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	9211      	str	r2, [sp, #68]	; 0x44
 8014286:	930e      	str	r3, [sp, #56]	; 0x38
 8014288:	3b30      	subs	r3, #48	; 0x30
 801428a:	2b09      	cmp	r3, #9
 801428c:	d9f0      	bls.n	8014270 <_svfprintf_r+0x2b8>
 801428e:	e7d5      	b.n	801423c <_svfprintf_r+0x284>
 8014290:	2308      	movs	r3, #8
 8014292:	e7a8      	b.n	80141e6 <_svfprintf_r+0x22e>
 8014294:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014296:	781b      	ldrb	r3, [r3, #0]
 8014298:	2b68      	cmp	r3, #104	; 0x68
 801429a:	d105      	bne.n	80142a8 <_svfprintf_r+0x2f0>
 801429c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801429e:	3301      	adds	r3, #1
 80142a0:	9311      	str	r3, [sp, #68]	; 0x44
 80142a2:	2380      	movs	r3, #128	; 0x80
 80142a4:	009b      	lsls	r3, r3, #2
 80142a6:	e79e      	b.n	80141e6 <_svfprintf_r+0x22e>
 80142a8:	2340      	movs	r3, #64	; 0x40
 80142aa:	e79c      	b.n	80141e6 <_svfprintf_r+0x22e>
 80142ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	2b6c      	cmp	r3, #108	; 0x6c
 80142b2:	d104      	bne.n	80142be <_svfprintf_r+0x306>
 80142b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80142b6:	3301      	adds	r3, #1
 80142b8:	9311      	str	r3, [sp, #68]	; 0x44
 80142ba:	432e      	orrs	r6, r5
 80142bc:	e6e9      	b.n	8014092 <_svfprintf_r+0xda>
 80142be:	2310      	movs	r3, #16
 80142c0:	e791      	b.n	80141e6 <_svfprintf_r+0x22e>
 80142c2:	1d23      	adds	r3, r4, #4
 80142c4:	6822      	ldr	r2, [r4, #0]
 80142c6:	9312      	str	r3, [sp, #72]	; 0x48
 80142c8:	ab3f      	add	r3, sp, #252	; 0xfc
 80142ca:	701a      	strb	r2, [r3, #0]
 80142cc:	221b      	movs	r2, #27
 80142ce:	2000      	movs	r0, #0
 80142d0:	a91e      	add	r1, sp, #120	; 0x78
 80142d2:	1852      	adds	r2, r2, r1
 80142d4:	7010      	strb	r0, [r2, #0]
 80142d6:	2201      	movs	r2, #1
 80142d8:	0005      	movs	r5, r0
 80142da:	900c      	str	r0, [sp, #48]	; 0x30
 80142dc:	9208      	str	r2, [sp, #32]
 80142de:	9017      	str	r0, [sp, #92]	; 0x5c
 80142e0:	9010      	str	r0, [sp, #64]	; 0x40
 80142e2:	900f      	str	r0, [sp, #60]	; 0x3c
 80142e4:	9309      	str	r3, [sp, #36]	; 0x24
 80142e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80142e8:	9a08      	ldr	r2, [sp, #32]
 80142ea:	9318      	str	r3, [sp, #96]	; 0x60
 80142ec:	4293      	cmp	r3, r2
 80142ee:	da00      	bge.n	80142f2 <_svfprintf_r+0x33a>
 80142f0:	9218      	str	r2, [sp, #96]	; 0x60
 80142f2:	231b      	movs	r3, #27
 80142f4:	aa1e      	add	r2, sp, #120	; 0x78
 80142f6:	189b      	adds	r3, r3, r2
 80142f8:	781b      	ldrb	r3, [r3, #0]
 80142fa:	1e5a      	subs	r2, r3, #1
 80142fc:	4193      	sbcs	r3, r2
 80142fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014300:	18d3      	adds	r3, r2, r3
 8014302:	9318      	str	r3, [sp, #96]	; 0x60
 8014304:	2302      	movs	r3, #2
 8014306:	4033      	ands	r3, r6
 8014308:	9320      	str	r3, [sp, #128]	; 0x80
 801430a:	d002      	beq.n	8014312 <_svfprintf_r+0x35a>
 801430c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801430e:	3302      	adds	r3, #2
 8014310:	9318      	str	r3, [sp, #96]	; 0x60
 8014312:	2384      	movs	r3, #132	; 0x84
 8014314:	4033      	ands	r3, r6
 8014316:	9321      	str	r3, [sp, #132]	; 0x84
 8014318:	d121      	bne.n	801435e <_svfprintf_r+0x3a6>
 801431a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801431c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801431e:	1a9c      	subs	r4, r3, r2
 8014320:	2c00      	cmp	r4, #0
 8014322:	dd1c      	ble.n	801435e <_svfprintf_r+0x3a6>
 8014324:	0039      	movs	r1, r7
 8014326:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014328:	485d      	ldr	r0, [pc, #372]	; (80144a0 <_svfprintf_r+0x4e8>)
 801432a:	9322      	str	r3, [sp, #136]	; 0x88
 801432c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801432e:	3301      	adds	r3, #1
 8014330:	3108      	adds	r1, #8
 8014332:	6038      	str	r0, [r7, #0]
 8014334:	2c10      	cmp	r4, #16
 8014336:	dd01      	ble.n	801433c <_svfprintf_r+0x384>
 8014338:	f000 fd08 	bl	8014d4c <_svfprintf_r+0xd94>
 801433c:	607c      	str	r4, [r7, #4]
 801433e:	18a4      	adds	r4, r4, r2
 8014340:	942e      	str	r4, [sp, #184]	; 0xb8
 8014342:	932d      	str	r3, [sp, #180]	; 0xb4
 8014344:	000f      	movs	r7, r1
 8014346:	2b07      	cmp	r3, #7
 8014348:	dd09      	ble.n	801435e <_svfprintf_r+0x3a6>
 801434a:	aa2c      	add	r2, sp, #176	; 0xb0
 801434c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801434e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014350:	f002 ff86 	bl	8017260 <__ssprint_r>
 8014354:	2800      	cmp	r0, #0
 8014356:	d001      	beq.n	801435c <_svfprintf_r+0x3a4>
 8014358:	f001 f852 	bl	8015400 <_svfprintf_r+0x1448>
 801435c:	af2f      	add	r7, sp, #188	; 0xbc
 801435e:	231b      	movs	r3, #27
 8014360:	aa1e      	add	r2, sp, #120	; 0x78
 8014362:	189b      	adds	r3, r3, r2
 8014364:	781a      	ldrb	r2, [r3, #0]
 8014366:	2a00      	cmp	r2, #0
 8014368:	d017      	beq.n	801439a <_svfprintf_r+0x3e2>
 801436a:	603b      	str	r3, [r7, #0]
 801436c:	2301      	movs	r3, #1
 801436e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014370:	607b      	str	r3, [r7, #4]
 8014372:	0013      	movs	r3, r2
 8014374:	3301      	adds	r3, #1
 8014376:	932e      	str	r3, [sp, #184]	; 0xb8
 8014378:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801437a:	3708      	adds	r7, #8
 801437c:	9322      	str	r3, [sp, #136]	; 0x88
 801437e:	3301      	adds	r3, #1
 8014380:	932d      	str	r3, [sp, #180]	; 0xb4
 8014382:	2b07      	cmp	r3, #7
 8014384:	dd09      	ble.n	801439a <_svfprintf_r+0x3e2>
 8014386:	aa2c      	add	r2, sp, #176	; 0xb0
 8014388:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801438a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801438c:	f002 ff68 	bl	8017260 <__ssprint_r>
 8014390:	2800      	cmp	r0, #0
 8014392:	d001      	beq.n	8014398 <_svfprintf_r+0x3e0>
 8014394:	f001 f834 	bl	8015400 <_svfprintf_r+0x1448>
 8014398:	af2f      	add	r7, sp, #188	; 0xbc
 801439a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801439c:	2b00      	cmp	r3, #0
 801439e:	d019      	beq.n	80143d4 <_svfprintf_r+0x41c>
 80143a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80143a2:	9320      	str	r3, [sp, #128]	; 0x80
 80143a4:	ab25      	add	r3, sp, #148	; 0x94
 80143a6:	603b      	str	r3, [r7, #0]
 80143a8:	2302      	movs	r3, #2
 80143aa:	607b      	str	r3, [r7, #4]
 80143ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80143ae:	3708      	adds	r7, #8
 80143b0:	3302      	adds	r3, #2
 80143b2:	932e      	str	r3, [sp, #184]	; 0xb8
 80143b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80143b6:	9320      	str	r3, [sp, #128]	; 0x80
 80143b8:	3301      	adds	r3, #1
 80143ba:	932d      	str	r3, [sp, #180]	; 0xb4
 80143bc:	2b07      	cmp	r3, #7
 80143be:	dd09      	ble.n	80143d4 <_svfprintf_r+0x41c>
 80143c0:	aa2c      	add	r2, sp, #176	; 0xb0
 80143c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80143c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80143c6:	f002 ff4b 	bl	8017260 <__ssprint_r>
 80143ca:	2800      	cmp	r0, #0
 80143cc:	d001      	beq.n	80143d2 <_svfprintf_r+0x41a>
 80143ce:	f001 f817 	bl	8015400 <_svfprintf_r+0x1448>
 80143d2:	af2f      	add	r7, sp, #188	; 0xbc
 80143d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80143d6:	2b80      	cmp	r3, #128	; 0x80
 80143d8:	d121      	bne.n	801441e <_svfprintf_r+0x466>
 80143da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80143dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80143de:	1a9c      	subs	r4, r3, r2
 80143e0:	2c00      	cmp	r4, #0
 80143e2:	dd1c      	ble.n	801441e <_svfprintf_r+0x466>
 80143e4:	0039      	movs	r1, r7
 80143e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80143e8:	482e      	ldr	r0, [pc, #184]	; (80144a4 <_svfprintf_r+0x4ec>)
 80143ea:	9320      	str	r3, [sp, #128]	; 0x80
 80143ec:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80143ee:	3301      	adds	r3, #1
 80143f0:	3108      	adds	r1, #8
 80143f2:	6038      	str	r0, [r7, #0]
 80143f4:	2c10      	cmp	r4, #16
 80143f6:	dd01      	ble.n	80143fc <_svfprintf_r+0x444>
 80143f8:	f000 fcbc 	bl	8014d74 <_svfprintf_r+0xdbc>
 80143fc:	607c      	str	r4, [r7, #4]
 80143fe:	18a4      	adds	r4, r4, r2
 8014400:	942e      	str	r4, [sp, #184]	; 0xb8
 8014402:	932d      	str	r3, [sp, #180]	; 0xb4
 8014404:	000f      	movs	r7, r1
 8014406:	2b07      	cmp	r3, #7
 8014408:	dd09      	ble.n	801441e <_svfprintf_r+0x466>
 801440a:	aa2c      	add	r2, sp, #176	; 0xb0
 801440c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801440e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014410:	f002 ff26 	bl	8017260 <__ssprint_r>
 8014414:	2800      	cmp	r0, #0
 8014416:	d001      	beq.n	801441c <_svfprintf_r+0x464>
 8014418:	f000 fff2 	bl	8015400 <_svfprintf_r+0x1448>
 801441c:	af2f      	add	r7, sp, #188	; 0xbc
 801441e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014420:	9a08      	ldr	r2, [sp, #32]
 8014422:	1a9c      	subs	r4, r3, r2
 8014424:	2c00      	cmp	r4, #0
 8014426:	dd1c      	ble.n	8014462 <_svfprintf_r+0x4aa>
 8014428:	0039      	movs	r1, r7
 801442a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801442c:	481d      	ldr	r0, [pc, #116]	; (80144a4 <_svfprintf_r+0x4ec>)
 801442e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014430:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014432:	3301      	adds	r3, #1
 8014434:	3108      	adds	r1, #8
 8014436:	6038      	str	r0, [r7, #0]
 8014438:	2c10      	cmp	r4, #16
 801443a:	dd01      	ble.n	8014440 <_svfprintf_r+0x488>
 801443c:	f000 fcb4 	bl	8014da8 <_svfprintf_r+0xdf0>
 8014440:	18a2      	adds	r2, r4, r2
 8014442:	607c      	str	r4, [r7, #4]
 8014444:	922e      	str	r2, [sp, #184]	; 0xb8
 8014446:	932d      	str	r3, [sp, #180]	; 0xb4
 8014448:	000f      	movs	r7, r1
 801444a:	2b07      	cmp	r3, #7
 801444c:	dd09      	ble.n	8014462 <_svfprintf_r+0x4aa>
 801444e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014450:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014452:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014454:	f002 ff04 	bl	8017260 <__ssprint_r>
 8014458:	2800      	cmp	r0, #0
 801445a:	d001      	beq.n	8014460 <_svfprintf_r+0x4a8>
 801445c:	f000 ffd0 	bl	8015400 <_svfprintf_r+0x1448>
 8014460:	af2f      	add	r7, sp, #188	; 0xbc
 8014462:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014464:	9317      	str	r3, [sp, #92]	; 0x5c
 8014466:	05f3      	lsls	r3, r6, #23
 8014468:	d501      	bpl.n	801446e <_svfprintf_r+0x4b6>
 801446a:	f000 fcb1 	bl	8014dd0 <_svfprintf_r+0xe18>
 801446e:	9a08      	ldr	r2, [sp, #32]
 8014470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014472:	4694      	mov	ip, r2
 8014474:	603b      	str	r3, [r7, #0]
 8014476:	9b08      	ldr	r3, [sp, #32]
 8014478:	607b      	str	r3, [r7, #4]
 801447a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801447c:	4463      	add	r3, ip
 801447e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014480:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014482:	9308      	str	r3, [sp, #32]
 8014484:	3301      	adds	r3, #1
 8014486:	932d      	str	r3, [sp, #180]	; 0xb4
 8014488:	2b07      	cmp	r3, #7
 801448a:	dd01      	ble.n	8014490 <_svfprintf_r+0x4d8>
 801448c:	f000 fd94 	bl	8014fb8 <_svfprintf_r+0x1000>
 8014490:	3708      	adds	r7, #8
 8014492:	f000 fce4 	bl	8014e5e <_svfprintf_r+0xea6>
 8014496:	46c0      	nop			; (mov r8, r8)
 8014498:	0801a3c1 	.word	0x0801a3c1
 801449c:	fffffbff 	.word	0xfffffbff
 80144a0:	0801a3d4 	.word	0x0801a3d4
 80144a4:	0801a3e4 	.word	0x0801a3e4
 80144a8:	2310      	movs	r3, #16
 80144aa:	431e      	orrs	r6, r3
 80144ac:	06b3      	lsls	r3, r6, #26
 80144ae:	d52c      	bpl.n	801450a <_svfprintf_r+0x552>
 80144b0:	2307      	movs	r3, #7
 80144b2:	3407      	adds	r4, #7
 80144b4:	439c      	bics	r4, r3
 80144b6:	0023      	movs	r3, r4
 80144b8:	3308      	adds	r3, #8
 80144ba:	9312      	str	r3, [sp, #72]	; 0x48
 80144bc:	6823      	ldr	r3, [r4, #0]
 80144be:	6864      	ldr	r4, [r4, #4]
 80144c0:	9306      	str	r3, [sp, #24]
 80144c2:	9407      	str	r4, [sp, #28]
 80144c4:	9b07      	ldr	r3, [sp, #28]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	da0b      	bge.n	80144e2 <_svfprintf_r+0x52a>
 80144ca:	9906      	ldr	r1, [sp, #24]
 80144cc:	9a07      	ldr	r2, [sp, #28]
 80144ce:	2400      	movs	r4, #0
 80144d0:	424b      	negs	r3, r1
 80144d2:	4194      	sbcs	r4, r2
 80144d4:	9306      	str	r3, [sp, #24]
 80144d6:	9407      	str	r4, [sp, #28]
 80144d8:	231b      	movs	r3, #27
 80144da:	aa1e      	add	r2, sp, #120	; 0x78
 80144dc:	189b      	adds	r3, r3, r2
 80144de:	222d      	movs	r2, #45	; 0x2d
 80144e0:	701a      	strb	r2, [r3, #0]
 80144e2:	9b08      	ldr	r3, [sp, #32]
 80144e4:	3301      	adds	r3, #1
 80144e6:	d000      	beq.n	80144ea <_svfprintf_r+0x532>
 80144e8:	e382      	b.n	8014bf0 <_svfprintf_r+0xc38>
 80144ea:	9b07      	ldr	r3, [sp, #28]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d000      	beq.n	80144f2 <_svfprintf_r+0x53a>
 80144f0:	e3b0      	b.n	8014c54 <_svfprintf_r+0xc9c>
 80144f2:	9b06      	ldr	r3, [sp, #24]
 80144f4:	2b09      	cmp	r3, #9
 80144f6:	d900      	bls.n	80144fa <_svfprintf_r+0x542>
 80144f8:	e3ac      	b.n	8014c54 <_svfprintf_r+0xc9c>
 80144fa:	23e7      	movs	r3, #231	; 0xe7
 80144fc:	aa1e      	add	r2, sp, #120	; 0x78
 80144fe:	189b      	adds	r3, r3, r2
 8014500:	9a06      	ldr	r2, [sp, #24]
 8014502:	3230      	adds	r2, #48	; 0x30
 8014504:	701a      	strb	r2, [r3, #0]
 8014506:	9309      	str	r3, [sp, #36]	; 0x24
 8014508:	e395      	b.n	8014c36 <_svfprintf_r+0xc7e>
 801450a:	1d23      	adds	r3, r4, #4
 801450c:	9312      	str	r3, [sp, #72]	; 0x48
 801450e:	06f3      	lsls	r3, r6, #27
 8014510:	d504      	bpl.n	801451c <_svfprintf_r+0x564>
 8014512:	6823      	ldr	r3, [r4, #0]
 8014514:	9306      	str	r3, [sp, #24]
 8014516:	17db      	asrs	r3, r3, #31
 8014518:	9307      	str	r3, [sp, #28]
 801451a:	e7d3      	b.n	80144c4 <_svfprintf_r+0x50c>
 801451c:	6823      	ldr	r3, [r4, #0]
 801451e:	0672      	lsls	r2, r6, #25
 8014520:	d501      	bpl.n	8014526 <_svfprintf_r+0x56e>
 8014522:	b21b      	sxth	r3, r3
 8014524:	e7f6      	b.n	8014514 <_svfprintf_r+0x55c>
 8014526:	05b2      	lsls	r2, r6, #22
 8014528:	d5f4      	bpl.n	8014514 <_svfprintf_r+0x55c>
 801452a:	b25b      	sxtb	r3, r3
 801452c:	e7f2      	b.n	8014514 <_svfprintf_r+0x55c>
 801452e:	2307      	movs	r3, #7
 8014530:	3407      	adds	r4, #7
 8014532:	439c      	bics	r4, r3
 8014534:	0023      	movs	r3, r4
 8014536:	2201      	movs	r2, #1
 8014538:	3308      	adds	r3, #8
 801453a:	9312      	str	r3, [sp, #72]	; 0x48
 801453c:	6823      	ldr	r3, [r4, #0]
 801453e:	4252      	negs	r2, r2
 8014540:	931a      	str	r3, [sp, #104]	; 0x68
 8014542:	6863      	ldr	r3, [r4, #4]
 8014544:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8014546:	005c      	lsls	r4, r3, #1
 8014548:	0864      	lsrs	r4, r4, #1
 801454a:	9319      	str	r3, [sp, #100]	; 0x64
 801454c:	0028      	movs	r0, r5
 801454e:	4bcf      	ldr	r3, [pc, #828]	; (801488c <_svfprintf_r+0x8d4>)
 8014550:	0021      	movs	r1, r4
 8014552:	f7ee fa29 	bl	80029a8 <__aeabi_dcmpun>
 8014556:	2800      	cmp	r0, #0
 8014558:	d125      	bne.n	80145a6 <_svfprintf_r+0x5ee>
 801455a:	2201      	movs	r2, #1
 801455c:	4bcb      	ldr	r3, [pc, #812]	; (801488c <_svfprintf_r+0x8d4>)
 801455e:	4252      	negs	r2, r2
 8014560:	0028      	movs	r0, r5
 8014562:	0021      	movs	r1, r4
 8014564:	f7eb ff8a 	bl	800047c <__aeabi_dcmple>
 8014568:	2800      	cmp	r0, #0
 801456a:	d11c      	bne.n	80145a6 <_svfprintf_r+0x5ee>
 801456c:	2200      	movs	r2, #0
 801456e:	2300      	movs	r3, #0
 8014570:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014572:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014574:	f7eb ff78 	bl	8000468 <__aeabi_dcmplt>
 8014578:	2800      	cmp	r0, #0
 801457a:	d004      	beq.n	8014586 <_svfprintf_r+0x5ce>
 801457c:	231b      	movs	r3, #27
 801457e:	aa1e      	add	r2, sp, #120	; 0x78
 8014580:	189b      	adds	r3, r3, r2
 8014582:	222d      	movs	r2, #45	; 0x2d
 8014584:	701a      	strb	r2, [r3, #0]
 8014586:	4bc2      	ldr	r3, [pc, #776]	; (8014890 <_svfprintf_r+0x8d8>)
 8014588:	9309      	str	r3, [sp, #36]	; 0x24
 801458a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801458c:	2b47      	cmp	r3, #71	; 0x47
 801458e:	dc01      	bgt.n	8014594 <_svfprintf_r+0x5dc>
 8014590:	4bc0      	ldr	r3, [pc, #768]	; (8014894 <_svfprintf_r+0x8dc>)
 8014592:	9309      	str	r3, [sp, #36]	; 0x24
 8014594:	2380      	movs	r3, #128	; 0x80
 8014596:	439e      	bics	r6, r3
 8014598:	2300      	movs	r3, #0
 801459a:	930c      	str	r3, [sp, #48]	; 0x30
 801459c:	3303      	adds	r3, #3
 801459e:	9308      	str	r3, [sp, #32]
 80145a0:	2300      	movs	r3, #0
 80145a2:	9317      	str	r3, [sp, #92]	; 0x5c
 80145a4:	e34f      	b.n	8014c46 <_svfprintf_r+0xc8e>
 80145a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80145a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80145aa:	981a      	ldr	r0, [sp, #104]	; 0x68
 80145ac:	9919      	ldr	r1, [sp, #100]	; 0x64
 80145ae:	f7ee f9fb 	bl	80029a8 <__aeabi_dcmpun>
 80145b2:	2800      	cmp	r0, #0
 80145b4:	d00e      	beq.n	80145d4 <_svfprintf_r+0x61c>
 80145b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	da04      	bge.n	80145c6 <_svfprintf_r+0x60e>
 80145bc:	231b      	movs	r3, #27
 80145be:	aa1e      	add	r2, sp, #120	; 0x78
 80145c0:	189b      	adds	r3, r3, r2
 80145c2:	222d      	movs	r2, #45	; 0x2d
 80145c4:	701a      	strb	r2, [r3, #0]
 80145c6:	4bb4      	ldr	r3, [pc, #720]	; (8014898 <_svfprintf_r+0x8e0>)
 80145c8:	9309      	str	r3, [sp, #36]	; 0x24
 80145ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145cc:	2b47      	cmp	r3, #71	; 0x47
 80145ce:	dce1      	bgt.n	8014594 <_svfprintf_r+0x5dc>
 80145d0:	4bb2      	ldr	r3, [pc, #712]	; (801489c <_svfprintf_r+0x8e4>)
 80145d2:	e7de      	b.n	8014592 <_svfprintf_r+0x5da>
 80145d4:	2320      	movs	r3, #32
 80145d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80145d8:	439a      	bics	r2, r3
 80145da:	920f      	str	r2, [sp, #60]	; 0x3c
 80145dc:	2a41      	cmp	r2, #65	; 0x41
 80145de:	d124      	bne.n	801462a <_svfprintf_r+0x672>
 80145e0:	2230      	movs	r2, #48	; 0x30
 80145e2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80145e4:	ab25      	add	r3, sp, #148	; 0x94
 80145e6:	701a      	strb	r2, [r3, #0]
 80145e8:	3228      	adds	r2, #40	; 0x28
 80145ea:	2961      	cmp	r1, #97	; 0x61
 80145ec:	d100      	bne.n	80145f0 <_svfprintf_r+0x638>
 80145ee:	3220      	adds	r2, #32
 80145f0:	705a      	strb	r2, [r3, #1]
 80145f2:	2302      	movs	r3, #2
 80145f4:	431e      	orrs	r6, r3
 80145f6:	9b08      	ldr	r3, [sp, #32]
 80145f8:	2b63      	cmp	r3, #99	; 0x63
 80145fa:	dc00      	bgt.n	80145fe <_svfprintf_r+0x646>
 80145fc:	e09e      	b.n	801473c <_svfprintf_r+0x784>
 80145fe:	1c59      	adds	r1, r3, #1
 8014600:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014602:	f7fe f913 	bl	801282c <_malloc_r>
 8014606:	9009      	str	r0, [sp, #36]	; 0x24
 8014608:	2800      	cmp	r0, #0
 801460a:	d000      	beq.n	801460e <_svfprintf_r+0x656>
 801460c:	e09b      	b.n	8014746 <_svfprintf_r+0x78e>
 801460e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014610:	899a      	ldrh	r2, [r3, #12]
 8014612:	2340      	movs	r3, #64	; 0x40
 8014614:	4313      	orrs	r3, r2
 8014616:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014618:	8193      	strh	r3, [r2, #12]
 801461a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801461c:	899b      	ldrh	r3, [r3, #12]
 801461e:	065b      	lsls	r3, r3, #25
 8014620:	d400      	bmi.n	8014624 <_svfprintf_r+0x66c>
 8014622:	e4ee      	b.n	8014002 <_svfprintf_r+0x4a>
 8014624:	2301      	movs	r3, #1
 8014626:	425b      	negs	r3, r3
 8014628:	e4ea      	b.n	8014000 <_svfprintf_r+0x48>
 801462a:	9b08      	ldr	r3, [sp, #32]
 801462c:	900c      	str	r0, [sp, #48]	; 0x30
 801462e:	3301      	adds	r3, #1
 8014630:	d100      	bne.n	8014634 <_svfprintf_r+0x67c>
 8014632:	e08b      	b.n	801474c <_svfprintf_r+0x794>
 8014634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014636:	2b47      	cmp	r3, #71	; 0x47
 8014638:	d103      	bne.n	8014642 <_svfprintf_r+0x68a>
 801463a:	9b08      	ldr	r3, [sp, #32]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d100      	bne.n	8014642 <_svfprintf_r+0x68a>
 8014640:	e087      	b.n	8014752 <_svfprintf_r+0x79a>
 8014642:	2380      	movs	r3, #128	; 0x80
 8014644:	005b      	lsls	r3, r3, #1
 8014646:	4333      	orrs	r3, r6
 8014648:	9320      	str	r3, [sp, #128]	; 0x80
 801464a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801464c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801464e:	2b00      	cmp	r3, #0
 8014650:	db00      	blt.n	8014654 <_svfprintf_r+0x69c>
 8014652:	e082      	b.n	801475a <_svfprintf_r+0x7a2>
 8014654:	2280      	movs	r2, #128	; 0x80
 8014656:	0612      	lsls	r2, r2, #24
 8014658:	4694      	mov	ip, r2
 801465a:	4463      	add	r3, ip
 801465c:	930d      	str	r3, [sp, #52]	; 0x34
 801465e:	232d      	movs	r3, #45	; 0x2d
 8014660:	9322      	str	r3, [sp, #136]	; 0x88
 8014662:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014664:	2b41      	cmp	r3, #65	; 0x41
 8014666:	d000      	beq.n	801466a <_svfprintf_r+0x6b2>
 8014668:	e105      	b.n	8014876 <_svfprintf_r+0x8be>
 801466a:	aa26      	add	r2, sp, #152	; 0x98
 801466c:	0020      	movs	r0, r4
 801466e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014670:	f002 fdc4 	bl	80171fc <frexp>
 8014674:	23ff      	movs	r3, #255	; 0xff
 8014676:	2200      	movs	r2, #0
 8014678:	059b      	lsls	r3, r3, #22
 801467a:	f7ed fbdb 	bl	8001e34 <__aeabi_dmul>
 801467e:	2200      	movs	r2, #0
 8014680:	2300      	movs	r3, #0
 8014682:	0004      	movs	r4, r0
 8014684:	000d      	movs	r5, r1
 8014686:	f7eb fee9 	bl	800045c <__aeabi_dcmpeq>
 801468a:	2800      	cmp	r0, #0
 801468c:	d001      	beq.n	8014692 <_svfprintf_r+0x6da>
 801468e:	2301      	movs	r3, #1
 8014690:	9326      	str	r3, [sp, #152]	; 0x98
 8014692:	4b83      	ldr	r3, [pc, #524]	; (80148a0 <_svfprintf_r+0x8e8>)
 8014694:	9317      	str	r3, [sp, #92]	; 0x5c
 8014696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014698:	2b61      	cmp	r3, #97	; 0x61
 801469a:	d101      	bne.n	80146a0 <_svfprintf_r+0x6e8>
 801469c:	4b81      	ldr	r3, [pc, #516]	; (80148a4 <_svfprintf_r+0x8ec>)
 801469e:	9317      	str	r3, [sp, #92]	; 0x5c
 80146a0:	9b08      	ldr	r3, [sp, #32]
 80146a2:	3b01      	subs	r3, #1
 80146a4:	9310      	str	r3, [sp, #64]	; 0x40
 80146a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146a8:	9318      	str	r3, [sp, #96]	; 0x60
 80146aa:	2200      	movs	r2, #0
 80146ac:	4b7e      	ldr	r3, [pc, #504]	; (80148a8 <_svfprintf_r+0x8f0>)
 80146ae:	0020      	movs	r0, r4
 80146b0:	0029      	movs	r1, r5
 80146b2:	f7ed fbbf 	bl	8001e34 <__aeabi_dmul>
 80146b6:	000d      	movs	r5, r1
 80146b8:	0004      	movs	r4, r0
 80146ba:	f7ee f991 	bl	80029e0 <__aeabi_d2iz>
 80146be:	9021      	str	r0, [sp, #132]	; 0x84
 80146c0:	f7ee f9c4 	bl	8002a4c <__aeabi_i2d>
 80146c4:	0002      	movs	r2, r0
 80146c6:	000b      	movs	r3, r1
 80146c8:	0020      	movs	r0, r4
 80146ca:	0029      	movs	r1, r5
 80146cc:	f7ed fe24 	bl	8002318 <__aeabi_dsub>
 80146d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80146d2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80146d4:	3301      	adds	r3, #1
 80146d6:	930d      	str	r3, [sp, #52]	; 0x34
 80146d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80146da:	0004      	movs	r4, r0
 80146dc:	5c9b      	ldrb	r3, [r3, r2]
 80146de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80146e0:	000d      	movs	r5, r1
 80146e2:	7013      	strb	r3, [r2, #0]
 80146e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80146e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80146e8:	3301      	adds	r3, #1
 80146ea:	d00a      	beq.n	8014702 <_svfprintf_r+0x74a>
 80146ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80146ee:	2200      	movs	r2, #0
 80146f0:	3b01      	subs	r3, #1
 80146f2:	9310      	str	r3, [sp, #64]	; 0x40
 80146f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80146f6:	9318      	str	r3, [sp, #96]	; 0x60
 80146f8:	2300      	movs	r3, #0
 80146fa:	f7eb feaf 	bl	800045c <__aeabi_dcmpeq>
 80146fe:	2800      	cmp	r0, #0
 8014700:	d0d3      	beq.n	80146aa <_svfprintf_r+0x6f2>
 8014702:	2200      	movs	r2, #0
 8014704:	4b69      	ldr	r3, [pc, #420]	; (80148ac <_svfprintf_r+0x8f4>)
 8014706:	0020      	movs	r0, r4
 8014708:	0029      	movs	r1, r5
 801470a:	f7eb fec1 	bl	8000490 <__aeabi_dcmpgt>
 801470e:	2800      	cmp	r0, #0
 8014710:	d126      	bne.n	8014760 <_svfprintf_r+0x7a8>
 8014712:	2200      	movs	r2, #0
 8014714:	4b65      	ldr	r3, [pc, #404]	; (80148ac <_svfprintf_r+0x8f4>)
 8014716:	0020      	movs	r0, r4
 8014718:	0029      	movs	r1, r5
 801471a:	f7eb fe9f 	bl	800045c <__aeabi_dcmpeq>
 801471e:	2800      	cmp	r0, #0
 8014720:	d002      	beq.n	8014728 <_svfprintf_r+0x770>
 8014722:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014724:	07db      	lsls	r3, r3, #31
 8014726:	d41b      	bmi.n	8014760 <_svfprintf_r+0x7a8>
 8014728:	2130      	movs	r1, #48	; 0x30
 801472a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801472c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801472e:	1898      	adds	r0, r3, r2
 8014730:	930d      	str	r3, [sp, #52]	; 0x34
 8014732:	1ac2      	subs	r2, r0, r3
 8014734:	d426      	bmi.n	8014784 <_svfprintf_r+0x7cc>
 8014736:	7019      	strb	r1, [r3, #0]
 8014738:	3301      	adds	r3, #1
 801473a:	e7f9      	b.n	8014730 <_svfprintf_r+0x778>
 801473c:	2300      	movs	r3, #0
 801473e:	930c      	str	r3, [sp, #48]	; 0x30
 8014740:	ab3f      	add	r3, sp, #252	; 0xfc
 8014742:	9309      	str	r3, [sp, #36]	; 0x24
 8014744:	e77d      	b.n	8014642 <_svfprintf_r+0x68a>
 8014746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014748:	930c      	str	r3, [sp, #48]	; 0x30
 801474a:	e77a      	b.n	8014642 <_svfprintf_r+0x68a>
 801474c:	2306      	movs	r3, #6
 801474e:	9308      	str	r3, [sp, #32]
 8014750:	e777      	b.n	8014642 <_svfprintf_r+0x68a>
 8014752:	9b08      	ldr	r3, [sp, #32]
 8014754:	930c      	str	r3, [sp, #48]	; 0x30
 8014756:	2301      	movs	r3, #1
 8014758:	e7f9      	b.n	801474e <_svfprintf_r+0x796>
 801475a:	930d      	str	r3, [sp, #52]	; 0x34
 801475c:	2300      	movs	r3, #0
 801475e:	e77f      	b.n	8014660 <_svfprintf_r+0x6a8>
 8014760:	2030      	movs	r0, #48	; 0x30
 8014762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014764:	932a      	str	r3, [sp, #168]	; 0xa8
 8014766:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014768:	7bda      	ldrb	r2, [r3, #15]
 801476a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801476c:	3b01      	subs	r3, #1
 801476e:	932a      	str	r3, [sp, #168]	; 0xa8
 8014770:	7819      	ldrb	r1, [r3, #0]
 8014772:	4291      	cmp	r1, r2
 8014774:	d07d      	beq.n	8014872 <_svfprintf_r+0x8ba>
 8014776:	1c4a      	adds	r2, r1, #1
 8014778:	b2d2      	uxtb	r2, r2
 801477a:	2939      	cmp	r1, #57	; 0x39
 801477c:	d101      	bne.n	8014782 <_svfprintf_r+0x7ca>
 801477e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014780:	7a92      	ldrb	r2, [r2, #10]
 8014782:	701a      	strb	r2, [r3, #0]
 8014784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014788:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801478a:	1a9b      	subs	r3, r3, r2
 801478c:	930d      	str	r3, [sp, #52]	; 0x34
 801478e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014790:	2b47      	cmp	r3, #71	; 0x47
 8014792:	d000      	beq.n	8014796 <_svfprintf_r+0x7de>
 8014794:	e0d2      	b.n	801493c <_svfprintf_r+0x984>
 8014796:	1ceb      	adds	r3, r5, #3
 8014798:	db03      	blt.n	80147a2 <_svfprintf_r+0x7ea>
 801479a:	9b08      	ldr	r3, [sp, #32]
 801479c:	42ab      	cmp	r3, r5
 801479e:	db00      	blt.n	80147a2 <_svfprintf_r+0x7ea>
 80147a0:	e0fd      	b.n	801499e <_svfprintf_r+0x9e6>
 80147a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80147a4:	3b02      	subs	r3, #2
 80147a6:	930e      	str	r3, [sp, #56]	; 0x38
 80147a8:	2238      	movs	r2, #56	; 0x38
 80147aa:	466b      	mov	r3, sp
 80147ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 80147ae:	189b      	adds	r3, r3, r2
 80147b0:	3a18      	subs	r2, #24
 80147b2:	4391      	bics	r1, r2
 80147b4:	1e6c      	subs	r4, r5, #1
 80147b6:	000a      	movs	r2, r1
 80147b8:	9426      	str	r4, [sp, #152]	; 0x98
 80147ba:	781b      	ldrb	r3, [r3, #0]
 80147bc:	2100      	movs	r1, #0
 80147be:	2a41      	cmp	r2, #65	; 0x41
 80147c0:	d102      	bne.n	80147c8 <_svfprintf_r+0x810>
 80147c2:	330f      	adds	r3, #15
 80147c4:	b2db      	uxtb	r3, r3
 80147c6:	3101      	adds	r1, #1
 80147c8:	aa28      	add	r2, sp, #160	; 0xa0
 80147ca:	7013      	strb	r3, [r2, #0]
 80147cc:	232b      	movs	r3, #43	; 0x2b
 80147ce:	2c00      	cmp	r4, #0
 80147d0:	da02      	bge.n	80147d8 <_svfprintf_r+0x820>
 80147d2:	2401      	movs	r4, #1
 80147d4:	232d      	movs	r3, #45	; 0x2d
 80147d6:	1b64      	subs	r4, r4, r5
 80147d8:	7053      	strb	r3, [r2, #1]
 80147da:	2c09      	cmp	r4, #9
 80147dc:	dc00      	bgt.n	80147e0 <_svfprintf_r+0x828>
 80147de:	e0c7      	b.n	8014970 <_svfprintf_r+0x9b8>
 80147e0:	2537      	movs	r5, #55	; 0x37
 80147e2:	ab1e      	add	r3, sp, #120	; 0x78
 80147e4:	18ed      	adds	r5, r5, r3
 80147e6:	1e6b      	subs	r3, r5, #1
 80147e8:	0020      	movs	r0, r4
 80147ea:	210a      	movs	r1, #10
 80147ec:	9308      	str	r3, [sp, #32]
 80147ee:	f7eb fe1f 	bl	8000430 <__aeabi_idivmod>
 80147f2:	1e6b      	subs	r3, r5, #1
 80147f4:	3130      	adds	r1, #48	; 0x30
 80147f6:	7019      	strb	r1, [r3, #0]
 80147f8:	0020      	movs	r0, r4
 80147fa:	210a      	movs	r1, #10
 80147fc:	f7eb fd32 	bl	8000264 <__divsi3>
 8014800:	0004      	movs	r4, r0
 8014802:	2809      	cmp	r0, #9
 8014804:	dd00      	ble.n	8014808 <_svfprintf_r+0x850>
 8014806:	e0ac      	b.n	8014962 <_svfprintf_r+0x9aa>
 8014808:	232a      	movs	r3, #42	; 0x2a
 801480a:	2137      	movs	r1, #55	; 0x37
 801480c:	aa1e      	add	r2, sp, #120	; 0x78
 801480e:	3d02      	subs	r5, #2
 8014810:	3430      	adds	r4, #48	; 0x30
 8014812:	702c      	strb	r4, [r5, #0]
 8014814:	189b      	adds	r3, r3, r2
 8014816:	1889      	adds	r1, r1, r2
 8014818:	001a      	movs	r2, r3
 801481a:	428d      	cmp	r5, r1
 801481c:	d200      	bcs.n	8014820 <_svfprintf_r+0x868>
 801481e:	e0a2      	b.n	8014966 <_svfprintf_r+0x9ae>
 8014820:	ab28      	add	r3, sp, #160	; 0xa0
 8014822:	1ad3      	subs	r3, r2, r3
 8014824:	931d      	str	r3, [sp, #116]	; 0x74
 8014826:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014828:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801482a:	4694      	mov	ip, r2
 801482c:	4463      	add	r3, ip
 801482e:	9308      	str	r3, [sp, #32]
 8014830:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014832:	2b01      	cmp	r3, #1
 8014834:	dc01      	bgt.n	801483a <_svfprintf_r+0x882>
 8014836:	07f3      	lsls	r3, r6, #31
 8014838:	d504      	bpl.n	8014844 <_svfprintf_r+0x88c>
 801483a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801483c:	9b08      	ldr	r3, [sp, #32]
 801483e:	4694      	mov	ip, r2
 8014840:	4463      	add	r3, ip
 8014842:	9308      	str	r3, [sp, #32]
 8014844:	2280      	movs	r2, #128	; 0x80
 8014846:	4b1a      	ldr	r3, [pc, #104]	; (80148b0 <_svfprintf_r+0x8f8>)
 8014848:	0052      	lsls	r2, r2, #1
 801484a:	4033      	ands	r3, r6
 801484c:	431a      	orrs	r2, r3
 801484e:	2300      	movs	r3, #0
 8014850:	001d      	movs	r5, r3
 8014852:	9220      	str	r2, [sp, #128]	; 0x80
 8014854:	9310      	str	r3, [sp, #64]	; 0x40
 8014856:	930f      	str	r3, [sp, #60]	; 0x3c
 8014858:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801485a:	2b00      	cmp	r3, #0
 801485c:	d100      	bne.n	8014860 <_svfprintf_r+0x8a8>
 801485e:	e270      	b.n	8014d42 <_svfprintf_r+0xd8a>
 8014860:	231b      	movs	r3, #27
 8014862:	aa1e      	add	r2, sp, #120	; 0x78
 8014864:	189b      	adds	r3, r3, r2
 8014866:	222d      	movs	r2, #45	; 0x2d
 8014868:	701a      	strb	r2, [r3, #0]
 801486a:	2300      	movs	r3, #0
 801486c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801486e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014870:	e539      	b.n	80142e6 <_svfprintf_r+0x32e>
 8014872:	7018      	strb	r0, [r3, #0]
 8014874:	e779      	b.n	801476a <_svfprintf_r+0x7b2>
 8014876:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014878:	2b46      	cmp	r3, #70	; 0x46
 801487a:	d01b      	beq.n	80148b4 <_svfprintf_r+0x8fc>
 801487c:	9d08      	ldr	r5, [sp, #32]
 801487e:	2b45      	cmp	r3, #69	; 0x45
 8014880:	d101      	bne.n	8014886 <_svfprintf_r+0x8ce>
 8014882:	9b08      	ldr	r3, [sp, #32]
 8014884:	1c5d      	adds	r5, r3, #1
 8014886:	2302      	movs	r3, #2
 8014888:	e016      	b.n	80148b8 <_svfprintf_r+0x900>
 801488a:	46c0      	nop			; (mov r8, r8)
 801488c:	7fefffff 	.word	0x7fefffff
 8014890:	0801a3a4 	.word	0x0801a3a4
 8014894:	0801a3a0 	.word	0x0801a3a0
 8014898:	0801a3ac 	.word	0x0801a3ac
 801489c:	0801a3a8 	.word	0x0801a3a8
 80148a0:	0801a3c1 	.word	0x0801a3c1
 80148a4:	0801a3b0 	.word	0x0801a3b0
 80148a8:	40300000 	.word	0x40300000
 80148ac:	3fe00000 	.word	0x3fe00000
 80148b0:	fffffbff 	.word	0xfffffbff
 80148b4:	2303      	movs	r3, #3
 80148b6:	9d08      	ldr	r5, [sp, #32]
 80148b8:	aa2a      	add	r2, sp, #168	; 0xa8
 80148ba:	9204      	str	r2, [sp, #16]
 80148bc:	aa27      	add	r2, sp, #156	; 0x9c
 80148be:	9203      	str	r2, [sp, #12]
 80148c0:	aa26      	add	r2, sp, #152	; 0x98
 80148c2:	9202      	str	r2, [sp, #8]
 80148c4:	9300      	str	r3, [sp, #0]
 80148c6:	9501      	str	r5, [sp, #4]
 80148c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148ca:	0022      	movs	r2, r4
 80148cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80148ce:	f000 fe79 	bl	80155c4 <_dtoa_r>
 80148d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148d4:	9009      	str	r0, [sp, #36]	; 0x24
 80148d6:	2b47      	cmp	r3, #71	; 0x47
 80148d8:	d101      	bne.n	80148de <_svfprintf_r+0x926>
 80148da:	07f3      	lsls	r3, r6, #31
 80148dc:	d524      	bpl.n	8014928 <_svfprintf_r+0x970>
 80148de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148e0:	195b      	adds	r3, r3, r5
 80148e2:	9310      	str	r3, [sp, #64]	; 0x40
 80148e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148e6:	2b46      	cmp	r3, #70	; 0x46
 80148e8:	d113      	bne.n	8014912 <_svfprintf_r+0x95a>
 80148ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148ec:	781b      	ldrb	r3, [r3, #0]
 80148ee:	2b30      	cmp	r3, #48	; 0x30
 80148f0:	d10a      	bne.n	8014908 <_svfprintf_r+0x950>
 80148f2:	2200      	movs	r2, #0
 80148f4:	2300      	movs	r3, #0
 80148f6:	0020      	movs	r0, r4
 80148f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80148fa:	f7eb fdaf 	bl	800045c <__aeabi_dcmpeq>
 80148fe:	2800      	cmp	r0, #0
 8014900:	d102      	bne.n	8014908 <_svfprintf_r+0x950>
 8014902:	2301      	movs	r3, #1
 8014904:	1b5d      	subs	r5, r3, r5
 8014906:	9526      	str	r5, [sp, #152]	; 0x98
 8014908:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801490a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801490c:	4694      	mov	ip, r2
 801490e:	4463      	add	r3, ip
 8014910:	9310      	str	r3, [sp, #64]	; 0x40
 8014912:	2200      	movs	r2, #0
 8014914:	2300      	movs	r3, #0
 8014916:	0020      	movs	r0, r4
 8014918:	990d      	ldr	r1, [sp, #52]	; 0x34
 801491a:	f7eb fd9f 	bl	800045c <__aeabi_dcmpeq>
 801491e:	2230      	movs	r2, #48	; 0x30
 8014920:	2800      	cmp	r0, #0
 8014922:	d006      	beq.n	8014932 <_svfprintf_r+0x97a>
 8014924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014926:	932a      	str	r3, [sp, #168]	; 0xa8
 8014928:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801492a:	e72c      	b.n	8014786 <_svfprintf_r+0x7ce>
 801492c:	1c59      	adds	r1, r3, #1
 801492e:	912a      	str	r1, [sp, #168]	; 0xa8
 8014930:	701a      	strb	r2, [r3, #0]
 8014932:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014934:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014936:	4299      	cmp	r1, r3
 8014938:	d8f8      	bhi.n	801492c <_svfprintf_r+0x974>
 801493a:	e7f5      	b.n	8014928 <_svfprintf_r+0x970>
 801493c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801493e:	2b46      	cmp	r3, #70	; 0x46
 8014940:	d000      	beq.n	8014944 <_svfprintf_r+0x98c>
 8014942:	e731      	b.n	80147a8 <_svfprintf_r+0x7f0>
 8014944:	9b08      	ldr	r3, [sp, #32]
 8014946:	2d00      	cmp	r5, #0
 8014948:	dd21      	ble.n	801498e <_svfprintf_r+0x9d6>
 801494a:	2b00      	cmp	r3, #0
 801494c:	d101      	bne.n	8014952 <_svfprintf_r+0x99a>
 801494e:	07f3      	lsls	r3, r6, #31
 8014950:	d54a      	bpl.n	80149e8 <_svfprintf_r+0xa30>
 8014952:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014954:	18eb      	adds	r3, r5, r3
 8014956:	9a08      	ldr	r2, [sp, #32]
 8014958:	18d3      	adds	r3, r2, r3
 801495a:	9308      	str	r3, [sp, #32]
 801495c:	2366      	movs	r3, #102	; 0x66
 801495e:	930e      	str	r3, [sp, #56]	; 0x38
 8014960:	e034      	b.n	80149cc <_svfprintf_r+0xa14>
 8014962:	9d08      	ldr	r5, [sp, #32]
 8014964:	e73f      	b.n	80147e6 <_svfprintf_r+0x82e>
 8014966:	782a      	ldrb	r2, [r5, #0]
 8014968:	3501      	adds	r5, #1
 801496a:	701a      	strb	r2, [r3, #0]
 801496c:	3301      	adds	r3, #1
 801496e:	e753      	b.n	8014818 <_svfprintf_r+0x860>
 8014970:	232a      	movs	r3, #42	; 0x2a
 8014972:	aa1e      	add	r2, sp, #120	; 0x78
 8014974:	189b      	adds	r3, r3, r2
 8014976:	2900      	cmp	r1, #0
 8014978:	d105      	bne.n	8014986 <_svfprintf_r+0x9ce>
 801497a:	2230      	movs	r2, #48	; 0x30
 801497c:	ab28      	add	r3, sp, #160	; 0xa0
 801497e:	709a      	strb	r2, [r3, #2]
 8014980:	232b      	movs	r3, #43	; 0x2b
 8014982:	aa1e      	add	r2, sp, #120	; 0x78
 8014984:	189b      	adds	r3, r3, r2
 8014986:	3430      	adds	r4, #48	; 0x30
 8014988:	1c5a      	adds	r2, r3, #1
 801498a:	701c      	strb	r4, [r3, #0]
 801498c:	e748      	b.n	8014820 <_svfprintf_r+0x868>
 801498e:	2b00      	cmp	r3, #0
 8014990:	d102      	bne.n	8014998 <_svfprintf_r+0x9e0>
 8014992:	3301      	adds	r3, #1
 8014994:	421e      	tst	r6, r3
 8014996:	d029      	beq.n	80149ec <_svfprintf_r+0xa34>
 8014998:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801499a:	3301      	adds	r3, #1
 801499c:	e7db      	b.n	8014956 <_svfprintf_r+0x99e>
 801499e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149a0:	42ab      	cmp	r3, r5
 80149a2:	dc06      	bgt.n	80149b2 <_svfprintf_r+0x9fa>
 80149a4:	07f3      	lsls	r3, r6, #31
 80149a6:	d524      	bpl.n	80149f2 <_svfprintf_r+0xa3a>
 80149a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80149aa:	18eb      	adds	r3, r5, r3
 80149ac:	9308      	str	r3, [sp, #32]
 80149ae:	2367      	movs	r3, #103	; 0x67
 80149b0:	e7d5      	b.n	801495e <_svfprintf_r+0x9a6>
 80149b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80149b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149b6:	4694      	mov	ip, r2
 80149b8:	4463      	add	r3, ip
 80149ba:	9308      	str	r3, [sp, #32]
 80149bc:	2367      	movs	r3, #103	; 0x67
 80149be:	930e      	str	r3, [sp, #56]	; 0x38
 80149c0:	2d00      	cmp	r5, #0
 80149c2:	dc03      	bgt.n	80149cc <_svfprintf_r+0xa14>
 80149c4:	9b08      	ldr	r3, [sp, #32]
 80149c6:	1b5b      	subs	r3, r3, r5
 80149c8:	3301      	adds	r3, #1
 80149ca:	9308      	str	r3, [sp, #32]
 80149cc:	2380      	movs	r3, #128	; 0x80
 80149ce:	00db      	lsls	r3, r3, #3
 80149d0:	401e      	ands	r6, r3
 80149d2:	2300      	movs	r3, #0
 80149d4:	960f      	str	r6, [sp, #60]	; 0x3c
 80149d6:	9310      	str	r3, [sp, #64]	; 0x40
 80149d8:	2e00      	cmp	r6, #0
 80149da:	d100      	bne.n	80149de <_svfprintf_r+0xa26>
 80149dc:	e73c      	b.n	8014858 <_svfprintf_r+0x8a0>
 80149de:	2d00      	cmp	r5, #0
 80149e0:	dc27      	bgt.n	8014a32 <_svfprintf_r+0xa7a>
 80149e2:	2300      	movs	r3, #0
 80149e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80149e6:	e737      	b.n	8014858 <_svfprintf_r+0x8a0>
 80149e8:	9508      	str	r5, [sp, #32]
 80149ea:	e7b7      	b.n	801495c <_svfprintf_r+0x9a4>
 80149ec:	2266      	movs	r2, #102	; 0x66
 80149ee:	920e      	str	r2, [sp, #56]	; 0x38
 80149f0:	e7eb      	b.n	80149ca <_svfprintf_r+0xa12>
 80149f2:	9508      	str	r5, [sp, #32]
 80149f4:	e7db      	b.n	80149ae <_svfprintf_r+0x9f6>
 80149f6:	42ab      	cmp	r3, r5
 80149f8:	da0e      	bge.n	8014a18 <_svfprintf_r+0xa60>
 80149fa:	1aed      	subs	r5, r5, r3
 80149fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80149fe:	785b      	ldrb	r3, [r3, #1]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d012      	beq.n	8014a2a <_svfprintf_r+0xa72>
 8014a04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a06:	3301      	adds	r3, #1
 8014a08:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a0c:	3301      	adds	r3, #1
 8014a0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8014a10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a12:	781b      	ldrb	r3, [r3, #0]
 8014a14:	2bff      	cmp	r3, #255	; 0xff
 8014a16:	d1ee      	bne.n	80149f6 <_svfprintf_r+0xa3e>
 8014a18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014a1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a1c:	189b      	adds	r3, r3, r2
 8014a1e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014a20:	4353      	muls	r3, r2
 8014a22:	9a08      	ldr	r2, [sp, #32]
 8014a24:	189b      	adds	r3, r3, r2
 8014a26:	9308      	str	r3, [sp, #32]
 8014a28:	e716      	b.n	8014858 <_svfprintf_r+0x8a0>
 8014a2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a2c:	3301      	adds	r3, #1
 8014a2e:	9310      	str	r3, [sp, #64]	; 0x40
 8014a30:	e7ee      	b.n	8014a10 <_svfprintf_r+0xa58>
 8014a32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a34:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a36:	e7eb      	b.n	8014a10 <_svfprintf_r+0xa58>
 8014a38:	0022      	movs	r2, r4
 8014a3a:	ca08      	ldmia	r2!, {r3}
 8014a3c:	9212      	str	r2, [sp, #72]	; 0x48
 8014a3e:	06b2      	lsls	r2, r6, #26
 8014a40:	d508      	bpl.n	8014a54 <_svfprintf_r+0xa9c>
 8014a42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014a44:	601a      	str	r2, [r3, #0]
 8014a46:	17d2      	asrs	r2, r2, #31
 8014a48:	605a      	str	r2, [r3, #4]
 8014a4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014a4c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8014a50:	f7ff faeb 	bl	801402a <_svfprintf_r+0x72>
 8014a54:	06f2      	lsls	r2, r6, #27
 8014a56:	d502      	bpl.n	8014a5e <_svfprintf_r+0xaa6>
 8014a58:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014a5a:	601a      	str	r2, [r3, #0]
 8014a5c:	e7f5      	b.n	8014a4a <_svfprintf_r+0xa92>
 8014a5e:	0672      	lsls	r2, r6, #25
 8014a60:	d502      	bpl.n	8014a68 <_svfprintf_r+0xab0>
 8014a62:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014a64:	801a      	strh	r2, [r3, #0]
 8014a66:	e7f0      	b.n	8014a4a <_svfprintf_r+0xa92>
 8014a68:	05b2      	lsls	r2, r6, #22
 8014a6a:	d5f5      	bpl.n	8014a58 <_svfprintf_r+0xaa0>
 8014a6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014a6e:	701a      	strb	r2, [r3, #0]
 8014a70:	e7eb      	b.n	8014a4a <_svfprintf_r+0xa92>
 8014a72:	2310      	movs	r3, #16
 8014a74:	431e      	orrs	r6, r3
 8014a76:	2220      	movs	r2, #32
 8014a78:	4032      	ands	r2, r6
 8014a7a:	d025      	beq.n	8014ac8 <_svfprintf_r+0xb10>
 8014a7c:	2307      	movs	r3, #7
 8014a7e:	3407      	adds	r4, #7
 8014a80:	439c      	bics	r4, r3
 8014a82:	0023      	movs	r3, r4
 8014a84:	3308      	adds	r3, #8
 8014a86:	9312      	str	r3, [sp, #72]	; 0x48
 8014a88:	6823      	ldr	r3, [r4, #0]
 8014a8a:	6864      	ldr	r4, [r4, #4]
 8014a8c:	9306      	str	r3, [sp, #24]
 8014a8e:	9407      	str	r4, [sp, #28]
 8014a90:	4bc2      	ldr	r3, [pc, #776]	; (8014d9c <_svfprintf_r+0xde4>)
 8014a92:	401e      	ands	r6, r3
 8014a94:	2300      	movs	r3, #0
 8014a96:	221b      	movs	r2, #27
 8014a98:	a91e      	add	r1, sp, #120	; 0x78
 8014a9a:	1852      	adds	r2, r2, r1
 8014a9c:	2100      	movs	r1, #0
 8014a9e:	7011      	strb	r1, [r2, #0]
 8014aa0:	9a08      	ldr	r2, [sp, #32]
 8014aa2:	3201      	adds	r2, #1
 8014aa4:	d100      	bne.n	8014aa8 <_svfprintf_r+0xaf0>
 8014aa6:	e0a6      	b.n	8014bf6 <_svfprintf_r+0xc3e>
 8014aa8:	0032      	movs	r2, r6
 8014aaa:	2180      	movs	r1, #128	; 0x80
 8014aac:	9807      	ldr	r0, [sp, #28]
 8014aae:	438e      	bics	r6, r1
 8014ab0:	9906      	ldr	r1, [sp, #24]
 8014ab2:	4301      	orrs	r1, r0
 8014ab4:	d000      	beq.n	8014ab8 <_svfprintf_r+0xb00>
 8014ab6:	e09e      	b.n	8014bf6 <_svfprintf_r+0xc3e>
 8014ab8:	9908      	ldr	r1, [sp, #32]
 8014aba:	2900      	cmp	r1, #0
 8014abc:	d100      	bne.n	8014ac0 <_svfprintf_r+0xb08>
 8014abe:	e125      	b.n	8014d0c <_svfprintf_r+0xd54>
 8014ac0:	2b01      	cmp	r3, #1
 8014ac2:	d000      	beq.n	8014ac6 <_svfprintf_r+0xb0e>
 8014ac4:	e09a      	b.n	8014bfc <_svfprintf_r+0xc44>
 8014ac6:	e518      	b.n	80144fa <_svfprintf_r+0x542>
 8014ac8:	1d23      	adds	r3, r4, #4
 8014aca:	9312      	str	r3, [sp, #72]	; 0x48
 8014acc:	2310      	movs	r3, #16
 8014ace:	4033      	ands	r3, r6
 8014ad0:	d003      	beq.n	8014ada <_svfprintf_r+0xb22>
 8014ad2:	6823      	ldr	r3, [r4, #0]
 8014ad4:	9306      	str	r3, [sp, #24]
 8014ad6:	9207      	str	r2, [sp, #28]
 8014ad8:	e7da      	b.n	8014a90 <_svfprintf_r+0xad8>
 8014ada:	2240      	movs	r2, #64	; 0x40
 8014adc:	4032      	ands	r2, r6
 8014ade:	d004      	beq.n	8014aea <_svfprintf_r+0xb32>
 8014ae0:	6822      	ldr	r2, [r4, #0]
 8014ae2:	b292      	uxth	r2, r2
 8014ae4:	9206      	str	r2, [sp, #24]
 8014ae6:	9307      	str	r3, [sp, #28]
 8014ae8:	e7d2      	b.n	8014a90 <_svfprintf_r+0xad8>
 8014aea:	2380      	movs	r3, #128	; 0x80
 8014aec:	009b      	lsls	r3, r3, #2
 8014aee:	4033      	ands	r3, r6
 8014af0:	d002      	beq.n	8014af8 <_svfprintf_r+0xb40>
 8014af2:	6823      	ldr	r3, [r4, #0]
 8014af4:	b2db      	uxtb	r3, r3
 8014af6:	e7ed      	b.n	8014ad4 <_svfprintf_r+0xb1c>
 8014af8:	6822      	ldr	r2, [r4, #0]
 8014afa:	e7f3      	b.n	8014ae4 <_svfprintf_r+0xb2c>
 8014afc:	1d23      	adds	r3, r4, #4
 8014afe:	49a8      	ldr	r1, [pc, #672]	; (8014da0 <_svfprintf_r+0xde8>)
 8014b00:	aa25      	add	r2, sp, #148	; 0x94
 8014b02:	9312      	str	r3, [sp, #72]	; 0x48
 8014b04:	6823      	ldr	r3, [r4, #0]
 8014b06:	8011      	strh	r1, [r2, #0]
 8014b08:	4aa6      	ldr	r2, [pc, #664]	; (8014da4 <_svfprintf_r+0xdec>)
 8014b0a:	9306      	str	r3, [sp, #24]
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	921e      	str	r2, [sp, #120]	; 0x78
 8014b10:	2278      	movs	r2, #120	; 0x78
 8014b12:	9307      	str	r3, [sp, #28]
 8014b14:	3302      	adds	r3, #2
 8014b16:	431e      	orrs	r6, r3
 8014b18:	920e      	str	r2, [sp, #56]	; 0x38
 8014b1a:	e7bc      	b.n	8014a96 <_svfprintf_r+0xade>
 8014b1c:	1d23      	adds	r3, r4, #4
 8014b1e:	9312      	str	r3, [sp, #72]	; 0x48
 8014b20:	6823      	ldr	r3, [r4, #0]
 8014b22:	2400      	movs	r4, #0
 8014b24:	9309      	str	r3, [sp, #36]	; 0x24
 8014b26:	231b      	movs	r3, #27
 8014b28:	aa1e      	add	r2, sp, #120	; 0x78
 8014b2a:	189b      	adds	r3, r3, r2
 8014b2c:	701c      	strb	r4, [r3, #0]
 8014b2e:	9b08      	ldr	r3, [sp, #32]
 8014b30:	3301      	adds	r3, #1
 8014b32:	d00e      	beq.n	8014b52 <_svfprintf_r+0xb9a>
 8014b34:	9a08      	ldr	r2, [sp, #32]
 8014b36:	0021      	movs	r1, r4
 8014b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b3a:	f001 ff79 	bl	8016a30 <memchr>
 8014b3e:	900c      	str	r0, [sp, #48]	; 0x30
 8014b40:	42a0      	cmp	r0, r4
 8014b42:	d100      	bne.n	8014b46 <_svfprintf_r+0xb8e>
 8014b44:	e100      	b.n	8014d48 <_svfprintf_r+0xd90>
 8014b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b48:	1a83      	subs	r3, r0, r2
 8014b4a:	9308      	str	r3, [sp, #32]
 8014b4c:	940c      	str	r4, [sp, #48]	; 0x30
 8014b4e:	0023      	movs	r3, r4
 8014b50:	e527      	b.n	80145a2 <_svfprintf_r+0x5ea>
 8014b52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b54:	f7eb fae0 	bl	8000118 <strlen>
 8014b58:	9008      	str	r0, [sp, #32]
 8014b5a:	e7f7      	b.n	8014b4c <_svfprintf_r+0xb94>
 8014b5c:	2310      	movs	r3, #16
 8014b5e:	431e      	orrs	r6, r3
 8014b60:	2220      	movs	r2, #32
 8014b62:	4032      	ands	r2, r6
 8014b64:	d00b      	beq.n	8014b7e <_svfprintf_r+0xbc6>
 8014b66:	2307      	movs	r3, #7
 8014b68:	3407      	adds	r4, #7
 8014b6a:	439c      	bics	r4, r3
 8014b6c:	0023      	movs	r3, r4
 8014b6e:	3308      	adds	r3, #8
 8014b70:	9312      	str	r3, [sp, #72]	; 0x48
 8014b72:	6823      	ldr	r3, [r4, #0]
 8014b74:	6864      	ldr	r4, [r4, #4]
 8014b76:	9306      	str	r3, [sp, #24]
 8014b78:	9407      	str	r4, [sp, #28]
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	e78b      	b.n	8014a96 <_svfprintf_r+0xade>
 8014b7e:	1d23      	adds	r3, r4, #4
 8014b80:	9312      	str	r3, [sp, #72]	; 0x48
 8014b82:	2310      	movs	r3, #16
 8014b84:	4033      	ands	r3, r6
 8014b86:	d003      	beq.n	8014b90 <_svfprintf_r+0xbd8>
 8014b88:	6823      	ldr	r3, [r4, #0]
 8014b8a:	9306      	str	r3, [sp, #24]
 8014b8c:	9207      	str	r2, [sp, #28]
 8014b8e:	e7f4      	b.n	8014b7a <_svfprintf_r+0xbc2>
 8014b90:	2240      	movs	r2, #64	; 0x40
 8014b92:	4032      	ands	r2, r6
 8014b94:	d004      	beq.n	8014ba0 <_svfprintf_r+0xbe8>
 8014b96:	6822      	ldr	r2, [r4, #0]
 8014b98:	b292      	uxth	r2, r2
 8014b9a:	9206      	str	r2, [sp, #24]
 8014b9c:	9307      	str	r3, [sp, #28]
 8014b9e:	e7ec      	b.n	8014b7a <_svfprintf_r+0xbc2>
 8014ba0:	2380      	movs	r3, #128	; 0x80
 8014ba2:	009b      	lsls	r3, r3, #2
 8014ba4:	4033      	ands	r3, r6
 8014ba6:	d002      	beq.n	8014bae <_svfprintf_r+0xbf6>
 8014ba8:	6823      	ldr	r3, [r4, #0]
 8014baa:	b2db      	uxtb	r3, r3
 8014bac:	e7ed      	b.n	8014b8a <_svfprintf_r+0xbd2>
 8014bae:	6822      	ldr	r2, [r4, #0]
 8014bb0:	e7f3      	b.n	8014b9a <_svfprintf_r+0xbe2>
 8014bb2:	4b7c      	ldr	r3, [pc, #496]	; (8014da4 <_svfprintf_r+0xdec>)
 8014bb4:	f7ff fad9 	bl	801416a <_svfprintf_r+0x1b2>
 8014bb8:	1d23      	adds	r3, r4, #4
 8014bba:	9312      	str	r3, [sp, #72]	; 0x48
 8014bbc:	2310      	movs	r3, #16
 8014bbe:	4033      	ands	r3, r6
 8014bc0:	d004      	beq.n	8014bcc <_svfprintf_r+0xc14>
 8014bc2:	6823      	ldr	r3, [r4, #0]
 8014bc4:	9306      	str	r3, [sp, #24]
 8014bc6:	9207      	str	r2, [sp, #28]
 8014bc8:	f7ff fadf 	bl	801418a <_svfprintf_r+0x1d2>
 8014bcc:	2240      	movs	r2, #64	; 0x40
 8014bce:	4032      	ands	r2, r6
 8014bd0:	d005      	beq.n	8014bde <_svfprintf_r+0xc26>
 8014bd2:	6822      	ldr	r2, [r4, #0]
 8014bd4:	b292      	uxth	r2, r2
 8014bd6:	9206      	str	r2, [sp, #24]
 8014bd8:	9307      	str	r3, [sp, #28]
 8014bda:	f7ff fad6 	bl	801418a <_svfprintf_r+0x1d2>
 8014bde:	2380      	movs	r3, #128	; 0x80
 8014be0:	009b      	lsls	r3, r3, #2
 8014be2:	4033      	ands	r3, r6
 8014be4:	d002      	beq.n	8014bec <_svfprintf_r+0xc34>
 8014be6:	6823      	ldr	r3, [r4, #0]
 8014be8:	b2db      	uxtb	r3, r3
 8014bea:	e7eb      	b.n	8014bc4 <_svfprintf_r+0xc0c>
 8014bec:	6822      	ldr	r2, [r4, #0]
 8014bee:	e7f2      	b.n	8014bd6 <_svfprintf_r+0xc1e>
 8014bf0:	0032      	movs	r2, r6
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	e759      	b.n	8014aaa <_svfprintf_r+0xaf2>
 8014bf6:	2b01      	cmp	r3, #1
 8014bf8:	d100      	bne.n	8014bfc <_svfprintf_r+0xc44>
 8014bfa:	e476      	b.n	80144ea <_svfprintf_r+0x532>
 8014bfc:	2b02      	cmp	r3, #2
 8014bfe:	d06b      	beq.n	8014cd8 <_svfprintf_r+0xd20>
 8014c00:	2507      	movs	r5, #7
 8014c02:	ab58      	add	r3, sp, #352	; 0x160
 8014c04:	1e5a      	subs	r2, r3, #1
 8014c06:	9209      	str	r2, [sp, #36]	; 0x24
 8014c08:	9a06      	ldr	r2, [sp, #24]
 8014c0a:	1e59      	subs	r1, r3, #1
 8014c0c:	402a      	ands	r2, r5
 8014c0e:	3230      	adds	r2, #48	; 0x30
 8014c10:	700a      	strb	r2, [r1, #0]
 8014c12:	9907      	ldr	r1, [sp, #28]
 8014c14:	074c      	lsls	r4, r1, #29
 8014c16:	9906      	ldr	r1, [sp, #24]
 8014c18:	08c8      	lsrs	r0, r1, #3
 8014c1a:	9907      	ldr	r1, [sp, #28]
 8014c1c:	4304      	orrs	r4, r0
 8014c1e:	08c9      	lsrs	r1, r1, #3
 8014c20:	9107      	str	r1, [sp, #28]
 8014c22:	0021      	movs	r1, r4
 8014c24:	9807      	ldr	r0, [sp, #28]
 8014c26:	9406      	str	r4, [sp, #24]
 8014c28:	4301      	orrs	r1, r0
 8014c2a:	d111      	bne.n	8014c50 <_svfprintf_r+0xc98>
 8014c2c:	07f1      	lsls	r1, r6, #31
 8014c2e:	d502      	bpl.n	8014c36 <_svfprintf_r+0xc7e>
 8014c30:	3b02      	subs	r3, #2
 8014c32:	2a30      	cmp	r2, #48	; 0x30
 8014c34:	d173      	bne.n	8014d1e <_svfprintf_r+0xd66>
 8014c36:	9b08      	ldr	r3, [sp, #32]
 8014c38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c3a:	9317      	str	r3, [sp, #92]	; 0x5c
 8014c3c:	ab58      	add	r3, sp, #352	; 0x160
 8014c3e:	1a9b      	subs	r3, r3, r2
 8014c40:	9308      	str	r3, [sp, #32]
 8014c42:	2300      	movs	r3, #0
 8014c44:	930c      	str	r3, [sp, #48]	; 0x30
 8014c46:	9310      	str	r3, [sp, #64]	; 0x40
 8014c48:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c4a:	001d      	movs	r5, r3
 8014c4c:	f7ff fb4b 	bl	80142e6 <_svfprintf_r+0x32e>
 8014c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c52:	e7d7      	b.n	8014c04 <_svfprintf_r+0xc4c>
 8014c54:	2480      	movs	r4, #128	; 0x80
 8014c56:	2300      	movs	r3, #0
 8014c58:	00e4      	lsls	r4, r4, #3
 8014c5a:	930d      	str	r3, [sp, #52]	; 0x34
 8014c5c:	4034      	ands	r4, r6
 8014c5e:	ab58      	add	r3, sp, #352	; 0x160
 8014c60:	3b01      	subs	r3, #1
 8014c62:	9309      	str	r3, [sp, #36]	; 0x24
 8014c64:	220a      	movs	r2, #10
 8014c66:	9806      	ldr	r0, [sp, #24]
 8014c68:	9907      	ldr	r1, [sp, #28]
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	f7eb fc5e 	bl	800052c <__aeabi_uldivmod>
 8014c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c72:	3230      	adds	r2, #48	; 0x30
 8014c74:	701a      	strb	r2, [r3, #0]
 8014c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c78:	3301      	adds	r3, #1
 8014c7a:	930d      	str	r3, [sp, #52]	; 0x34
 8014c7c:	2c00      	cmp	r4, #0
 8014c7e:	d01d      	beq.n	8014cbc <_svfprintf_r+0xd04>
 8014c80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014c82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c84:	781b      	ldrb	r3, [r3, #0]
 8014c86:	429a      	cmp	r2, r3
 8014c88:	d118      	bne.n	8014cbc <_svfprintf_r+0xd04>
 8014c8a:	2aff      	cmp	r2, #255	; 0xff
 8014c8c:	d016      	beq.n	8014cbc <_svfprintf_r+0xd04>
 8014c8e:	9b07      	ldr	r3, [sp, #28]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d102      	bne.n	8014c9a <_svfprintf_r+0xce2>
 8014c94:	9b06      	ldr	r3, [sp, #24]
 8014c96:	2b09      	cmp	r3, #9
 8014c98:	d910      	bls.n	8014cbc <_svfprintf_r+0xd04>
 8014c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014c9e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014ca0:	1a9b      	subs	r3, r3, r2
 8014ca2:	0018      	movs	r0, r3
 8014ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8014ca6:	f7fe fa52 	bl	801314e <strncpy>
 8014caa:	2200      	movs	r2, #0
 8014cac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014cae:	920d      	str	r2, [sp, #52]	; 0x34
 8014cb0:	785b      	ldrb	r3, [r3, #1]
 8014cb2:	1e5a      	subs	r2, r3, #1
 8014cb4:	4193      	sbcs	r3, r2
 8014cb6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014cb8:	18d3      	adds	r3, r2, r3
 8014cba:	9313      	str	r3, [sp, #76]	; 0x4c
 8014cbc:	220a      	movs	r2, #10
 8014cbe:	9806      	ldr	r0, [sp, #24]
 8014cc0:	9907      	ldr	r1, [sp, #28]
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	f7eb fc32 	bl	800052c <__aeabi_uldivmod>
 8014cc8:	9006      	str	r0, [sp, #24]
 8014cca:	9107      	str	r1, [sp, #28]
 8014ccc:	9b06      	ldr	r3, [sp, #24]
 8014cce:	9a07      	ldr	r2, [sp, #28]
 8014cd0:	4313      	orrs	r3, r2
 8014cd2:	d0b0      	beq.n	8014c36 <_svfprintf_r+0xc7e>
 8014cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cd6:	e7c3      	b.n	8014c60 <_svfprintf_r+0xca8>
 8014cd8:	200f      	movs	r0, #15
 8014cda:	ab58      	add	r3, sp, #352	; 0x160
 8014cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8014cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ce0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014ce2:	3b01      	subs	r3, #1
 8014ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8014ce6:	9b06      	ldr	r3, [sp, #24]
 8014ce8:	4003      	ands	r3, r0
 8014cea:	5cd3      	ldrb	r3, [r2, r3]
 8014cec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014cee:	7013      	strb	r3, [r2, #0]
 8014cf0:	9b07      	ldr	r3, [sp, #28]
 8014cf2:	0719      	lsls	r1, r3, #28
 8014cf4:	9b06      	ldr	r3, [sp, #24]
 8014cf6:	091a      	lsrs	r2, r3, #4
 8014cf8:	9b07      	ldr	r3, [sp, #28]
 8014cfa:	4311      	orrs	r1, r2
 8014cfc:	091b      	lsrs	r3, r3, #4
 8014cfe:	9307      	str	r3, [sp, #28]
 8014d00:	000b      	movs	r3, r1
 8014d02:	9a07      	ldr	r2, [sp, #28]
 8014d04:	9106      	str	r1, [sp, #24]
 8014d06:	4313      	orrs	r3, r2
 8014d08:	d1e9      	bne.n	8014cde <_svfprintf_r+0xd26>
 8014d0a:	e794      	b.n	8014c36 <_svfprintf_r+0xc7e>
 8014d0c:	a958      	add	r1, sp, #352	; 0x160
 8014d0e:	9109      	str	r1, [sp, #36]	; 0x24
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d190      	bne.n	8014c36 <_svfprintf_r+0xc7e>
 8014d14:	07d3      	lsls	r3, r2, #31
 8014d16:	d58e      	bpl.n	8014c36 <_svfprintf_r+0xc7e>
 8014d18:	23e7      	movs	r3, #231	; 0xe7
 8014d1a:	aa1e      	add	r2, sp, #120	; 0x78
 8014d1c:	189b      	adds	r3, r3, r2
 8014d1e:	2230      	movs	r2, #48	; 0x30
 8014d20:	f7ff fbf0 	bl	8014504 <_svfprintf_r+0x54c>
 8014d24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d100      	bne.n	8014d2c <_svfprintf_r+0xd74>
 8014d2a:	e38a      	b.n	8015442 <_svfprintf_r+0x148a>
 8014d2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d2e:	ab3f      	add	r3, sp, #252	; 0xfc
 8014d30:	701a      	strb	r2, [r3, #0]
 8014d32:	221b      	movs	r2, #27
 8014d34:	2000      	movs	r0, #0
 8014d36:	a91e      	add	r1, sp, #120	; 0x78
 8014d38:	1852      	adds	r2, r2, r1
 8014d3a:	7010      	strb	r0, [r2, #0]
 8014d3c:	9412      	str	r4, [sp, #72]	; 0x48
 8014d3e:	f7ff faca 	bl	80142d6 <_svfprintf_r+0x31e>
 8014d42:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014d44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014d46:	e592      	b.n	801486e <_svfprintf_r+0x8b6>
 8014d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d4a:	e42a      	b.n	80145a2 <_svfprintf_r+0x5ea>
 8014d4c:	2010      	movs	r0, #16
 8014d4e:	1812      	adds	r2, r2, r0
 8014d50:	6078      	str	r0, [r7, #4]
 8014d52:	922e      	str	r2, [sp, #184]	; 0xb8
 8014d54:	932d      	str	r3, [sp, #180]	; 0xb4
 8014d56:	2b07      	cmp	r3, #7
 8014d58:	dd08      	ble.n	8014d6c <_svfprintf_r+0xdb4>
 8014d5a:	aa2c      	add	r2, sp, #176	; 0xb0
 8014d5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d60:	f002 fa7e 	bl	8017260 <__ssprint_r>
 8014d64:	2800      	cmp	r0, #0
 8014d66:	d000      	beq.n	8014d6a <_svfprintf_r+0xdb2>
 8014d68:	e34a      	b.n	8015400 <_svfprintf_r+0x1448>
 8014d6a:	a92f      	add	r1, sp, #188	; 0xbc
 8014d6c:	3c10      	subs	r4, #16
 8014d6e:	000f      	movs	r7, r1
 8014d70:	f7ff fad8 	bl	8014324 <_svfprintf_r+0x36c>
 8014d74:	2010      	movs	r0, #16
 8014d76:	1812      	adds	r2, r2, r0
 8014d78:	6078      	str	r0, [r7, #4]
 8014d7a:	922e      	str	r2, [sp, #184]	; 0xb8
 8014d7c:	932d      	str	r3, [sp, #180]	; 0xb4
 8014d7e:	2b07      	cmp	r3, #7
 8014d80:	dd08      	ble.n	8014d94 <_svfprintf_r+0xddc>
 8014d82:	aa2c      	add	r2, sp, #176	; 0xb0
 8014d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d86:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d88:	f002 fa6a 	bl	8017260 <__ssprint_r>
 8014d8c:	2800      	cmp	r0, #0
 8014d8e:	d000      	beq.n	8014d92 <_svfprintf_r+0xdda>
 8014d90:	e336      	b.n	8015400 <_svfprintf_r+0x1448>
 8014d92:	a92f      	add	r1, sp, #188	; 0xbc
 8014d94:	3c10      	subs	r4, #16
 8014d96:	000f      	movs	r7, r1
 8014d98:	f7ff fb24 	bl	80143e4 <_svfprintf_r+0x42c>
 8014d9c:	fffffbff 	.word	0xfffffbff
 8014da0:	00007830 	.word	0x00007830
 8014da4:	0801a3b0 	.word	0x0801a3b0
 8014da8:	2010      	movs	r0, #16
 8014daa:	1812      	adds	r2, r2, r0
 8014dac:	6078      	str	r0, [r7, #4]
 8014dae:	922e      	str	r2, [sp, #184]	; 0xb8
 8014db0:	932d      	str	r3, [sp, #180]	; 0xb4
 8014db2:	2b07      	cmp	r3, #7
 8014db4:	dd08      	ble.n	8014dc8 <_svfprintf_r+0xe10>
 8014db6:	aa2c      	add	r2, sp, #176	; 0xb0
 8014db8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014dba:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014dbc:	f002 fa50 	bl	8017260 <__ssprint_r>
 8014dc0:	2800      	cmp	r0, #0
 8014dc2:	d000      	beq.n	8014dc6 <_svfprintf_r+0xe0e>
 8014dc4:	e31c      	b.n	8015400 <_svfprintf_r+0x1448>
 8014dc6:	a92f      	add	r1, sp, #188	; 0xbc
 8014dc8:	3c10      	subs	r4, #16
 8014dca:	000f      	movs	r7, r1
 8014dcc:	f7ff fb2c 	bl	8014428 <_svfprintf_r+0x470>
 8014dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014dd2:	2b65      	cmp	r3, #101	; 0x65
 8014dd4:	dc00      	bgt.n	8014dd8 <_svfprintf_r+0xe20>
 8014dd6:	e259      	b.n	801528c <_svfprintf_r+0x12d4>
 8014dd8:	2200      	movs	r2, #0
 8014dda:	2300      	movs	r3, #0
 8014ddc:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014dde:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014de0:	f7eb fb3c 	bl	800045c <__aeabi_dcmpeq>
 8014de4:	2800      	cmp	r0, #0
 8014de6:	d07c      	beq.n	8014ee2 <_svfprintf_r+0xf2a>
 8014de8:	4b81      	ldr	r3, [pc, #516]	; (8014ff0 <_svfprintf_r+0x1038>)
 8014dea:	603b      	str	r3, [r7, #0]
 8014dec:	2301      	movs	r3, #1
 8014dee:	607b      	str	r3, [r7, #4]
 8014df0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014df2:	3708      	adds	r7, #8
 8014df4:	3301      	adds	r3, #1
 8014df6:	932e      	str	r3, [sp, #184]	; 0xb8
 8014df8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014dfa:	9308      	str	r3, [sp, #32]
 8014dfc:	3301      	adds	r3, #1
 8014dfe:	932d      	str	r3, [sp, #180]	; 0xb4
 8014e00:	2b07      	cmp	r3, #7
 8014e02:	dd08      	ble.n	8014e16 <_svfprintf_r+0xe5e>
 8014e04:	aa2c      	add	r2, sp, #176	; 0xb0
 8014e06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e08:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014e0a:	f002 fa29 	bl	8017260 <__ssprint_r>
 8014e0e:	2800      	cmp	r0, #0
 8014e10:	d000      	beq.n	8014e14 <_svfprintf_r+0xe5c>
 8014e12:	e2f5      	b.n	8015400 <_svfprintf_r+0x1448>
 8014e14:	af2f      	add	r7, sp, #188	; 0xbc
 8014e16:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014e18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014e1a:	4293      	cmp	r3, r2
 8014e1c:	db01      	blt.n	8014e22 <_svfprintf_r+0xe6a>
 8014e1e:	07f3      	lsls	r3, r6, #31
 8014e20:	d51d      	bpl.n	8014e5e <_svfprintf_r+0xea6>
 8014e22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014e24:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014e26:	4694      	mov	ip, r2
 8014e28:	603b      	str	r3, [r7, #0]
 8014e2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014e2c:	607b      	str	r3, [r7, #4]
 8014e2e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014e30:	3708      	adds	r7, #8
 8014e32:	4463      	add	r3, ip
 8014e34:	932e      	str	r3, [sp, #184]	; 0xb8
 8014e36:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014e38:	9308      	str	r3, [sp, #32]
 8014e3a:	3301      	adds	r3, #1
 8014e3c:	932d      	str	r3, [sp, #180]	; 0xb4
 8014e3e:	2b07      	cmp	r3, #7
 8014e40:	dd08      	ble.n	8014e54 <_svfprintf_r+0xe9c>
 8014e42:	aa2c      	add	r2, sp, #176	; 0xb0
 8014e44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e46:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014e48:	f002 fa0a 	bl	8017260 <__ssprint_r>
 8014e4c:	2800      	cmp	r0, #0
 8014e4e:	d000      	beq.n	8014e52 <_svfprintf_r+0xe9a>
 8014e50:	e2d6      	b.n	8015400 <_svfprintf_r+0x1448>
 8014e52:	af2f      	add	r7, sp, #188	; 0xbc
 8014e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e56:	2510      	movs	r5, #16
 8014e58:	1e5c      	subs	r4, r3, #1
 8014e5a:	2c00      	cmp	r4, #0
 8014e5c:	dc2f      	bgt.n	8014ebe <_svfprintf_r+0xf06>
 8014e5e:	0773      	lsls	r3, r6, #29
 8014e60:	d500      	bpl.n	8014e64 <_svfprintf_r+0xeac>
 8014e62:	e2af      	b.n	80153c4 <_svfprintf_r+0x140c>
 8014e64:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014e66:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014e68:	4293      	cmp	r3, r2
 8014e6a:	da00      	bge.n	8014e6e <_svfprintf_r+0xeb6>
 8014e6c:	0013      	movs	r3, r2
 8014e6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014e70:	18d3      	adds	r3, r2, r3
 8014e72:	9315      	str	r3, [sp, #84]	; 0x54
 8014e74:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014e76:	9308      	str	r3, [sp, #32]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d007      	beq.n	8014e8c <_svfprintf_r+0xed4>
 8014e7c:	aa2c      	add	r2, sp, #176	; 0xb0
 8014e7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014e82:	f002 f9ed 	bl	8017260 <__ssprint_r>
 8014e86:	2800      	cmp	r0, #0
 8014e88:	d000      	beq.n	8014e8c <_svfprintf_r+0xed4>
 8014e8a:	e2b9      	b.n	8015400 <_svfprintf_r+0x1448>
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d000      	beq.n	8014e98 <_svfprintf_r+0xee0>
 8014e96:	e2cf      	b.n	8015438 <_svfprintf_r+0x1480>
 8014e98:	af2f      	add	r7, sp, #188	; 0xbc
 8014e9a:	e5d6      	b.n	8014a4a <_svfprintf_r+0xa92>
 8014e9c:	3210      	adds	r2, #16
 8014e9e:	607d      	str	r5, [r7, #4]
 8014ea0:	922e      	str	r2, [sp, #184]	; 0xb8
 8014ea2:	932d      	str	r3, [sp, #180]	; 0xb4
 8014ea4:	2b07      	cmp	r3, #7
 8014ea6:	dd08      	ble.n	8014eba <_svfprintf_r+0xf02>
 8014ea8:	aa2c      	add	r2, sp, #176	; 0xb0
 8014eaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014eac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014eae:	f002 f9d7 	bl	8017260 <__ssprint_r>
 8014eb2:	2800      	cmp	r0, #0
 8014eb4:	d000      	beq.n	8014eb8 <_svfprintf_r+0xf00>
 8014eb6:	e2a3      	b.n	8015400 <_svfprintf_r+0x1448>
 8014eb8:	a92f      	add	r1, sp, #188	; 0xbc
 8014eba:	000f      	movs	r7, r1
 8014ebc:	3c10      	subs	r4, #16
 8014ebe:	0039      	movs	r1, r7
 8014ec0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014ec2:	484c      	ldr	r0, [pc, #304]	; (8014ff4 <_svfprintf_r+0x103c>)
 8014ec4:	9308      	str	r3, [sp, #32]
 8014ec6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014ec8:	3301      	adds	r3, #1
 8014eca:	3108      	adds	r1, #8
 8014ecc:	6038      	str	r0, [r7, #0]
 8014ece:	2c10      	cmp	r4, #16
 8014ed0:	dce4      	bgt.n	8014e9c <_svfprintf_r+0xee4>
 8014ed2:	607c      	str	r4, [r7, #4]
 8014ed4:	18a4      	adds	r4, r4, r2
 8014ed6:	942e      	str	r4, [sp, #184]	; 0xb8
 8014ed8:	932d      	str	r3, [sp, #180]	; 0xb4
 8014eda:	000f      	movs	r7, r1
 8014edc:	2b07      	cmp	r3, #7
 8014ede:	ddbe      	ble.n	8014e5e <_svfprintf_r+0xea6>
 8014ee0:	e06a      	b.n	8014fb8 <_svfprintf_r+0x1000>
 8014ee2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	dd00      	ble.n	8014eea <_svfprintf_r+0xf32>
 8014ee8:	e086      	b.n	8014ff8 <_svfprintf_r+0x1040>
 8014eea:	4b41      	ldr	r3, [pc, #260]	; (8014ff0 <_svfprintf_r+0x1038>)
 8014eec:	603b      	str	r3, [r7, #0]
 8014eee:	2301      	movs	r3, #1
 8014ef0:	607b      	str	r3, [r7, #4]
 8014ef2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014ef4:	3708      	adds	r7, #8
 8014ef6:	3301      	adds	r3, #1
 8014ef8:	932e      	str	r3, [sp, #184]	; 0xb8
 8014efa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014efc:	9308      	str	r3, [sp, #32]
 8014efe:	3301      	adds	r3, #1
 8014f00:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f02:	2b07      	cmp	r3, #7
 8014f04:	dd08      	ble.n	8014f18 <_svfprintf_r+0xf60>
 8014f06:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f0c:	f002 f9a8 	bl	8017260 <__ssprint_r>
 8014f10:	2800      	cmp	r0, #0
 8014f12:	d000      	beq.n	8014f16 <_svfprintf_r+0xf5e>
 8014f14:	e274      	b.n	8015400 <_svfprintf_r+0x1448>
 8014f16:	af2f      	add	r7, sp, #188	; 0xbc
 8014f18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d104      	bne.n	8014f28 <_svfprintf_r+0xf70>
 8014f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d101      	bne.n	8014f28 <_svfprintf_r+0xf70>
 8014f24:	07f3      	lsls	r3, r6, #31
 8014f26:	d59a      	bpl.n	8014e5e <_svfprintf_r+0xea6>
 8014f28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014f2a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014f2c:	4694      	mov	ip, r2
 8014f2e:	603b      	str	r3, [r7, #0]
 8014f30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014f32:	607b      	str	r3, [r7, #4]
 8014f34:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014f36:	3708      	adds	r7, #8
 8014f38:	4463      	add	r3, ip
 8014f3a:	932e      	str	r3, [sp, #184]	; 0xb8
 8014f3c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014f3e:	9308      	str	r3, [sp, #32]
 8014f40:	3301      	adds	r3, #1
 8014f42:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f44:	2b07      	cmp	r3, #7
 8014f46:	dd08      	ble.n	8014f5a <_svfprintf_r+0xfa2>
 8014f48:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f4e:	f002 f987 	bl	8017260 <__ssprint_r>
 8014f52:	2800      	cmp	r0, #0
 8014f54:	d000      	beq.n	8014f58 <_svfprintf_r+0xfa0>
 8014f56:	e253      	b.n	8015400 <_svfprintf_r+0x1448>
 8014f58:	af2f      	add	r7, sp, #188	; 0xbc
 8014f5a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8014f5c:	2c00      	cmp	r4, #0
 8014f5e:	da1a      	bge.n	8014f96 <_svfprintf_r+0xfde>
 8014f60:	0039      	movs	r1, r7
 8014f62:	2510      	movs	r5, #16
 8014f64:	4264      	negs	r4, r4
 8014f66:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014f68:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8014f6a:	9308      	str	r3, [sp, #32]
 8014f6c:	1c5a      	adds	r2, r3, #1
 8014f6e:	4b21      	ldr	r3, [pc, #132]	; (8014ff4 <_svfprintf_r+0x103c>)
 8014f70:	3708      	adds	r7, #8
 8014f72:	600b      	str	r3, [r1, #0]
 8014f74:	2c10      	cmp	r4, #16
 8014f76:	dc29      	bgt.n	8014fcc <_svfprintf_r+0x1014>
 8014f78:	604c      	str	r4, [r1, #4]
 8014f7a:	1824      	adds	r4, r4, r0
 8014f7c:	942e      	str	r4, [sp, #184]	; 0xb8
 8014f7e:	922d      	str	r2, [sp, #180]	; 0xb4
 8014f80:	2a07      	cmp	r2, #7
 8014f82:	dd08      	ble.n	8014f96 <_svfprintf_r+0xfde>
 8014f84:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f8a:	f002 f969 	bl	8017260 <__ssprint_r>
 8014f8e:	2800      	cmp	r0, #0
 8014f90:	d000      	beq.n	8014f94 <_svfprintf_r+0xfdc>
 8014f92:	e235      	b.n	8015400 <_svfprintf_r+0x1448>
 8014f94:	af2f      	add	r7, sp, #188	; 0xbc
 8014f96:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f9a:	468c      	mov	ip, r1
 8014f9c:	603b      	str	r3, [r7, #0]
 8014f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fa0:	607b      	str	r3, [r7, #4]
 8014fa2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014fa4:	4463      	add	r3, ip
 8014fa6:	932e      	str	r3, [sp, #184]	; 0xb8
 8014fa8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014faa:	1c5a      	adds	r2, r3, #1
 8014fac:	9308      	str	r3, [sp, #32]
 8014fae:	922d      	str	r2, [sp, #180]	; 0xb4
 8014fb0:	2a07      	cmp	r2, #7
 8014fb2:	dc01      	bgt.n	8014fb8 <_svfprintf_r+0x1000>
 8014fb4:	f7ff fa6c 	bl	8014490 <_svfprintf_r+0x4d8>
 8014fb8:	aa2c      	add	r2, sp, #176	; 0xb0
 8014fba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014fbc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014fbe:	f002 f94f 	bl	8017260 <__ssprint_r>
 8014fc2:	2800      	cmp	r0, #0
 8014fc4:	d000      	beq.n	8014fc8 <_svfprintf_r+0x1010>
 8014fc6:	e21b      	b.n	8015400 <_svfprintf_r+0x1448>
 8014fc8:	af2f      	add	r7, sp, #188	; 0xbc
 8014fca:	e748      	b.n	8014e5e <_svfprintf_r+0xea6>
 8014fcc:	3010      	adds	r0, #16
 8014fce:	604d      	str	r5, [r1, #4]
 8014fd0:	902e      	str	r0, [sp, #184]	; 0xb8
 8014fd2:	922d      	str	r2, [sp, #180]	; 0xb4
 8014fd4:	2a07      	cmp	r2, #7
 8014fd6:	dd08      	ble.n	8014fea <_svfprintf_r+0x1032>
 8014fd8:	aa2c      	add	r2, sp, #176	; 0xb0
 8014fda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014fdc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014fde:	f002 f93f 	bl	8017260 <__ssprint_r>
 8014fe2:	2800      	cmp	r0, #0
 8014fe4:	d000      	beq.n	8014fe8 <_svfprintf_r+0x1030>
 8014fe6:	e20b      	b.n	8015400 <_svfprintf_r+0x1448>
 8014fe8:	af2f      	add	r7, sp, #188	; 0xbc
 8014fea:	3c10      	subs	r4, #16
 8014fec:	0039      	movs	r1, r7
 8014fee:	e7ba      	b.n	8014f66 <_svfprintf_r+0xfae>
 8014ff0:	0801a3d2 	.word	0x0801a3d2
 8014ff4:	0801a3e4 	.word	0x0801a3e4
 8014ff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ffa:	002c      	movs	r4, r5
 8014ffc:	429d      	cmp	r5, r3
 8014ffe:	dd00      	ble.n	8015002 <_svfprintf_r+0x104a>
 8015000:	001c      	movs	r4, r3
 8015002:	2c00      	cmp	r4, #0
 8015004:	dd15      	ble.n	8015032 <_svfprintf_r+0x107a>
 8015006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015008:	607c      	str	r4, [r7, #4]
 801500a:	603b      	str	r3, [r7, #0]
 801500c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801500e:	3708      	adds	r7, #8
 8015010:	18e3      	adds	r3, r4, r3
 8015012:	932e      	str	r3, [sp, #184]	; 0xb8
 8015014:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015016:	9308      	str	r3, [sp, #32]
 8015018:	3301      	adds	r3, #1
 801501a:	932d      	str	r3, [sp, #180]	; 0xb4
 801501c:	2b07      	cmp	r3, #7
 801501e:	dd08      	ble.n	8015032 <_svfprintf_r+0x107a>
 8015020:	aa2c      	add	r2, sp, #176	; 0xb0
 8015022:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015024:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015026:	f002 f91b 	bl	8017260 <__ssprint_r>
 801502a:	2800      	cmp	r0, #0
 801502c:	d000      	beq.n	8015030 <_svfprintf_r+0x1078>
 801502e:	e1e7      	b.n	8015400 <_svfprintf_r+0x1448>
 8015030:	af2f      	add	r7, sp, #188	; 0xbc
 8015032:	43e3      	mvns	r3, r4
 8015034:	17db      	asrs	r3, r3, #31
 8015036:	401c      	ands	r4, r3
 8015038:	1b2c      	subs	r4, r5, r4
 801503a:	2c00      	cmp	r4, #0
 801503c:	dd1a      	ble.n	8015074 <_svfprintf_r+0x10bc>
 801503e:	0039      	movs	r1, r7
 8015040:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015042:	48d4      	ldr	r0, [pc, #848]	; (8015394 <_svfprintf_r+0x13dc>)
 8015044:	9308      	str	r3, [sp, #32]
 8015046:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015048:	3301      	adds	r3, #1
 801504a:	3108      	adds	r1, #8
 801504c:	6038      	str	r0, [r7, #0]
 801504e:	2c10      	cmp	r4, #16
 8015050:	dd00      	ble.n	8015054 <_svfprintf_r+0x109c>
 8015052:	e089      	b.n	8015168 <_svfprintf_r+0x11b0>
 8015054:	607c      	str	r4, [r7, #4]
 8015056:	18a4      	adds	r4, r4, r2
 8015058:	942e      	str	r4, [sp, #184]	; 0xb8
 801505a:	932d      	str	r3, [sp, #180]	; 0xb4
 801505c:	000f      	movs	r7, r1
 801505e:	2b07      	cmp	r3, #7
 8015060:	dd08      	ble.n	8015074 <_svfprintf_r+0x10bc>
 8015062:	aa2c      	add	r2, sp, #176	; 0xb0
 8015064:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015066:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015068:	f002 f8fa 	bl	8017260 <__ssprint_r>
 801506c:	2800      	cmp	r0, #0
 801506e:	d000      	beq.n	8015072 <_svfprintf_r+0x10ba>
 8015070:	e1c6      	b.n	8015400 <_svfprintf_r+0x1448>
 8015072:	af2f      	add	r7, sp, #188	; 0xbc
 8015074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015076:	195d      	adds	r5, r3, r5
 8015078:	0573      	lsls	r3, r6, #21
 801507a:	d50d      	bpl.n	8015098 <_svfprintf_r+0x10e0>
 801507c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801507e:	2b00      	cmp	r3, #0
 8015080:	d000      	beq.n	8015084 <_svfprintf_r+0x10cc>
 8015082:	e084      	b.n	801518e <_svfprintf_r+0x11d6>
 8015084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015086:	2b00      	cmp	r3, #0
 8015088:	d000      	beq.n	801508c <_svfprintf_r+0x10d4>
 801508a:	e083      	b.n	8015194 <_svfprintf_r+0x11dc>
 801508c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801508e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015090:	189b      	adds	r3, r3, r2
 8015092:	429d      	cmp	r5, r3
 8015094:	d900      	bls.n	8015098 <_svfprintf_r+0x10e0>
 8015096:	001d      	movs	r5, r3
 8015098:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801509a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801509c:	4293      	cmp	r3, r2
 801509e:	db01      	blt.n	80150a4 <_svfprintf_r+0x10ec>
 80150a0:	07f3      	lsls	r3, r6, #31
 80150a2:	d518      	bpl.n	80150d6 <_svfprintf_r+0x111e>
 80150a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80150a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80150a8:	4694      	mov	ip, r2
 80150aa:	603b      	str	r3, [r7, #0]
 80150ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80150ae:	607b      	str	r3, [r7, #4]
 80150b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80150b2:	3708      	adds	r7, #8
 80150b4:	4463      	add	r3, ip
 80150b6:	932e      	str	r3, [sp, #184]	; 0xb8
 80150b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150ba:	9308      	str	r3, [sp, #32]
 80150bc:	3301      	adds	r3, #1
 80150be:	932d      	str	r3, [sp, #180]	; 0xb4
 80150c0:	2b07      	cmp	r3, #7
 80150c2:	dd08      	ble.n	80150d6 <_svfprintf_r+0x111e>
 80150c4:	aa2c      	add	r2, sp, #176	; 0xb0
 80150c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150ca:	f002 f8c9 	bl	8017260 <__ssprint_r>
 80150ce:	2800      	cmp	r0, #0
 80150d0:	d000      	beq.n	80150d4 <_svfprintf_r+0x111c>
 80150d2:	e195      	b.n	8015400 <_svfprintf_r+0x1448>
 80150d4:	af2f      	add	r7, sp, #188	; 0xbc
 80150d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80150d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150da:	4694      	mov	ip, r2
 80150dc:	9926      	ldr	r1, [sp, #152]	; 0x98
 80150de:	4463      	add	r3, ip
 80150e0:	1b5b      	subs	r3, r3, r5
 80150e2:	1a54      	subs	r4, r2, r1
 80150e4:	429c      	cmp	r4, r3
 80150e6:	dd00      	ble.n	80150ea <_svfprintf_r+0x1132>
 80150e8:	001c      	movs	r4, r3
 80150ea:	2c00      	cmp	r4, #0
 80150ec:	dd14      	ble.n	8015118 <_svfprintf_r+0x1160>
 80150ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80150f0:	603d      	str	r5, [r7, #0]
 80150f2:	18e3      	adds	r3, r4, r3
 80150f4:	932e      	str	r3, [sp, #184]	; 0xb8
 80150f6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150f8:	607c      	str	r4, [r7, #4]
 80150fa:	9308      	str	r3, [sp, #32]
 80150fc:	3301      	adds	r3, #1
 80150fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8015100:	3708      	adds	r7, #8
 8015102:	2b07      	cmp	r3, #7
 8015104:	dd08      	ble.n	8015118 <_svfprintf_r+0x1160>
 8015106:	aa2c      	add	r2, sp, #176	; 0xb0
 8015108:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801510a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801510c:	f002 f8a8 	bl	8017260 <__ssprint_r>
 8015110:	2800      	cmp	r0, #0
 8015112:	d000      	beq.n	8015116 <_svfprintf_r+0x115e>
 8015114:	e174      	b.n	8015400 <_svfprintf_r+0x1448>
 8015116:	af2f      	add	r7, sp, #188	; 0xbc
 8015118:	43e3      	mvns	r3, r4
 801511a:	17db      	asrs	r3, r3, #31
 801511c:	401c      	ands	r4, r3
 801511e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015122:	2510      	movs	r5, #16
 8015124:	1a9b      	subs	r3, r3, r2
 8015126:	1b1c      	subs	r4, r3, r4
 8015128:	2c00      	cmp	r4, #0
 801512a:	dc00      	bgt.n	801512e <_svfprintf_r+0x1176>
 801512c:	e697      	b.n	8014e5e <_svfprintf_r+0xea6>
 801512e:	0039      	movs	r1, r7
 8015130:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015132:	4898      	ldr	r0, [pc, #608]	; (8015394 <_svfprintf_r+0x13dc>)
 8015134:	9308      	str	r3, [sp, #32]
 8015136:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015138:	3301      	adds	r3, #1
 801513a:	3108      	adds	r1, #8
 801513c:	6038      	str	r0, [r7, #0]
 801513e:	2c10      	cmp	r4, #16
 8015140:	dc00      	bgt.n	8015144 <_svfprintf_r+0x118c>
 8015142:	e6c6      	b.n	8014ed2 <_svfprintf_r+0xf1a>
 8015144:	3210      	adds	r2, #16
 8015146:	607d      	str	r5, [r7, #4]
 8015148:	922e      	str	r2, [sp, #184]	; 0xb8
 801514a:	932d      	str	r3, [sp, #180]	; 0xb4
 801514c:	2b07      	cmp	r3, #7
 801514e:	dd08      	ble.n	8015162 <_svfprintf_r+0x11aa>
 8015150:	aa2c      	add	r2, sp, #176	; 0xb0
 8015152:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015154:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015156:	f002 f883 	bl	8017260 <__ssprint_r>
 801515a:	2800      	cmp	r0, #0
 801515c:	d000      	beq.n	8015160 <_svfprintf_r+0x11a8>
 801515e:	e14f      	b.n	8015400 <_svfprintf_r+0x1448>
 8015160:	a92f      	add	r1, sp, #188	; 0xbc
 8015162:	3c10      	subs	r4, #16
 8015164:	000f      	movs	r7, r1
 8015166:	e7e2      	b.n	801512e <_svfprintf_r+0x1176>
 8015168:	2010      	movs	r0, #16
 801516a:	1812      	adds	r2, r2, r0
 801516c:	6078      	str	r0, [r7, #4]
 801516e:	922e      	str	r2, [sp, #184]	; 0xb8
 8015170:	932d      	str	r3, [sp, #180]	; 0xb4
 8015172:	2b07      	cmp	r3, #7
 8015174:	dd08      	ble.n	8015188 <_svfprintf_r+0x11d0>
 8015176:	aa2c      	add	r2, sp, #176	; 0xb0
 8015178:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801517a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801517c:	f002 f870 	bl	8017260 <__ssprint_r>
 8015180:	2800      	cmp	r0, #0
 8015182:	d000      	beq.n	8015186 <_svfprintf_r+0x11ce>
 8015184:	e13c      	b.n	8015400 <_svfprintf_r+0x1448>
 8015186:	a92f      	add	r1, sp, #188	; 0xbc
 8015188:	3c10      	subs	r4, #16
 801518a:	000f      	movs	r7, r1
 801518c:	e757      	b.n	801503e <_svfprintf_r+0x1086>
 801518e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015190:	2b00      	cmp	r3, #0
 8015192:	d061      	beq.n	8015258 <_svfprintf_r+0x12a0>
 8015194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015196:	3b01      	subs	r3, #1
 8015198:	9310      	str	r3, [sp, #64]	; 0x40
 801519a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801519c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801519e:	4694      	mov	ip, r2
 80151a0:	603b      	str	r3, [r7, #0]
 80151a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80151a4:	607b      	str	r3, [r7, #4]
 80151a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80151a8:	3708      	adds	r7, #8
 80151aa:	4463      	add	r3, ip
 80151ac:	932e      	str	r3, [sp, #184]	; 0xb8
 80151ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80151b0:	9308      	str	r3, [sp, #32]
 80151b2:	3301      	adds	r3, #1
 80151b4:	932d      	str	r3, [sp, #180]	; 0xb4
 80151b6:	2b07      	cmp	r3, #7
 80151b8:	dd08      	ble.n	80151cc <_svfprintf_r+0x1214>
 80151ba:	aa2c      	add	r2, sp, #176	; 0xb0
 80151bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151c0:	f002 f84e 	bl	8017260 <__ssprint_r>
 80151c4:	2800      	cmp	r0, #0
 80151c6:	d000      	beq.n	80151ca <_svfprintf_r+0x1212>
 80151c8:	e11a      	b.n	8015400 <_svfprintf_r+0x1448>
 80151ca:	af2f      	add	r7, sp, #188	; 0xbc
 80151cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80151ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151d0:	189b      	adds	r3, r3, r2
 80151d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80151d4:	1b5b      	subs	r3, r3, r5
 80151d6:	7814      	ldrb	r4, [r2, #0]
 80151d8:	429c      	cmp	r4, r3
 80151da:	dd00      	ble.n	80151de <_svfprintf_r+0x1226>
 80151dc:	001c      	movs	r4, r3
 80151de:	2c00      	cmp	r4, #0
 80151e0:	dd14      	ble.n	801520c <_svfprintf_r+0x1254>
 80151e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80151e4:	603d      	str	r5, [r7, #0]
 80151e6:	18e3      	adds	r3, r4, r3
 80151e8:	932e      	str	r3, [sp, #184]	; 0xb8
 80151ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80151ec:	607c      	str	r4, [r7, #4]
 80151ee:	9308      	str	r3, [sp, #32]
 80151f0:	3301      	adds	r3, #1
 80151f2:	932d      	str	r3, [sp, #180]	; 0xb4
 80151f4:	3708      	adds	r7, #8
 80151f6:	2b07      	cmp	r3, #7
 80151f8:	dd08      	ble.n	801520c <_svfprintf_r+0x1254>
 80151fa:	aa2c      	add	r2, sp, #176	; 0xb0
 80151fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015200:	f002 f82e 	bl	8017260 <__ssprint_r>
 8015204:	2800      	cmp	r0, #0
 8015206:	d000      	beq.n	801520a <_svfprintf_r+0x1252>
 8015208:	e0fa      	b.n	8015400 <_svfprintf_r+0x1448>
 801520a:	af2f      	add	r7, sp, #188	; 0xbc
 801520c:	43e3      	mvns	r3, r4
 801520e:	17db      	asrs	r3, r3, #31
 8015210:	401c      	ands	r4, r3
 8015212:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015214:	781b      	ldrb	r3, [r3, #0]
 8015216:	1b1c      	subs	r4, r3, r4
 8015218:	2c00      	cmp	r4, #0
 801521a:	dd19      	ble.n	8015250 <_svfprintf_r+0x1298>
 801521c:	0039      	movs	r1, r7
 801521e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015220:	485c      	ldr	r0, [pc, #368]	; (8015394 <_svfprintf_r+0x13dc>)
 8015222:	9308      	str	r3, [sp, #32]
 8015224:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015226:	3301      	adds	r3, #1
 8015228:	3108      	adds	r1, #8
 801522a:	6038      	str	r0, [r7, #0]
 801522c:	2c10      	cmp	r4, #16
 801522e:	dc1a      	bgt.n	8015266 <_svfprintf_r+0x12ae>
 8015230:	607c      	str	r4, [r7, #4]
 8015232:	18a4      	adds	r4, r4, r2
 8015234:	942e      	str	r4, [sp, #184]	; 0xb8
 8015236:	932d      	str	r3, [sp, #180]	; 0xb4
 8015238:	000f      	movs	r7, r1
 801523a:	2b07      	cmp	r3, #7
 801523c:	dd08      	ble.n	8015250 <_svfprintf_r+0x1298>
 801523e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015240:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015242:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015244:	f002 f80c 	bl	8017260 <__ssprint_r>
 8015248:	2800      	cmp	r0, #0
 801524a:	d000      	beq.n	801524e <_svfprintf_r+0x1296>
 801524c:	e0d8      	b.n	8015400 <_svfprintf_r+0x1448>
 801524e:	af2f      	add	r7, sp, #188	; 0xbc
 8015250:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015252:	781b      	ldrb	r3, [r3, #0]
 8015254:	18ed      	adds	r5, r5, r3
 8015256:	e711      	b.n	801507c <_svfprintf_r+0x10c4>
 8015258:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801525a:	3b01      	subs	r3, #1
 801525c:	9313      	str	r3, [sp, #76]	; 0x4c
 801525e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015260:	3b01      	subs	r3, #1
 8015262:	930f      	str	r3, [sp, #60]	; 0x3c
 8015264:	e799      	b.n	801519a <_svfprintf_r+0x11e2>
 8015266:	2010      	movs	r0, #16
 8015268:	1812      	adds	r2, r2, r0
 801526a:	6078      	str	r0, [r7, #4]
 801526c:	922e      	str	r2, [sp, #184]	; 0xb8
 801526e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015270:	2b07      	cmp	r3, #7
 8015272:	dd08      	ble.n	8015286 <_svfprintf_r+0x12ce>
 8015274:	aa2c      	add	r2, sp, #176	; 0xb0
 8015276:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015278:	980a      	ldr	r0, [sp, #40]	; 0x28
 801527a:	f001 fff1 	bl	8017260 <__ssprint_r>
 801527e:	2800      	cmp	r0, #0
 8015280:	d000      	beq.n	8015284 <_svfprintf_r+0x12cc>
 8015282:	e0bd      	b.n	8015400 <_svfprintf_r+0x1448>
 8015284:	a92f      	add	r1, sp, #188	; 0xbc
 8015286:	3c10      	subs	r4, #16
 8015288:	000f      	movs	r7, r1
 801528a:	e7c7      	b.n	801521c <_svfprintf_r+0x1264>
 801528c:	003c      	movs	r4, r7
 801528e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015290:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8015292:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015294:	9308      	str	r3, [sp, #32]
 8015296:	3101      	adds	r1, #1
 8015298:	3301      	adds	r3, #1
 801529a:	3408      	adds	r4, #8
 801529c:	2a01      	cmp	r2, #1
 801529e:	dc03      	bgt.n	80152a8 <_svfprintf_r+0x12f0>
 80152a0:	2201      	movs	r2, #1
 80152a2:	4216      	tst	r6, r2
 80152a4:	d100      	bne.n	80152a8 <_svfprintf_r+0x12f0>
 80152a6:	e088      	b.n	80153ba <_svfprintf_r+0x1402>
 80152a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80152aa:	912e      	str	r1, [sp, #184]	; 0xb8
 80152ac:	603a      	str	r2, [r7, #0]
 80152ae:	2201      	movs	r2, #1
 80152b0:	932d      	str	r3, [sp, #180]	; 0xb4
 80152b2:	607a      	str	r2, [r7, #4]
 80152b4:	2b07      	cmp	r3, #7
 80152b6:	dd08      	ble.n	80152ca <_svfprintf_r+0x1312>
 80152b8:	aa2c      	add	r2, sp, #176	; 0xb0
 80152ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152be:	f001 ffcf 	bl	8017260 <__ssprint_r>
 80152c2:	2800      	cmp	r0, #0
 80152c4:	d000      	beq.n	80152c8 <_svfprintf_r+0x1310>
 80152c6:	e09b      	b.n	8015400 <_svfprintf_r+0x1448>
 80152c8:	ac2f      	add	r4, sp, #188	; 0xbc
 80152ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80152cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80152ce:	4694      	mov	ip, r2
 80152d0:	6023      	str	r3, [r4, #0]
 80152d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80152d4:	6063      	str	r3, [r4, #4]
 80152d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80152d8:	3408      	adds	r4, #8
 80152da:	4463      	add	r3, ip
 80152dc:	932e      	str	r3, [sp, #184]	; 0xb8
 80152de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80152e0:	9308      	str	r3, [sp, #32]
 80152e2:	3301      	adds	r3, #1
 80152e4:	932d      	str	r3, [sp, #180]	; 0xb4
 80152e6:	2b07      	cmp	r3, #7
 80152e8:	dd08      	ble.n	80152fc <_svfprintf_r+0x1344>
 80152ea:	aa2c      	add	r2, sp, #176	; 0xb0
 80152ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152f0:	f001 ffb6 	bl	8017260 <__ssprint_r>
 80152f4:	2800      	cmp	r0, #0
 80152f6:	d000      	beq.n	80152fa <_svfprintf_r+0x1342>
 80152f8:	e082      	b.n	8015400 <_svfprintf_r+0x1448>
 80152fa:	ac2f      	add	r4, sp, #188	; 0xbc
 80152fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152fe:	2200      	movs	r2, #0
 8015300:	1e5d      	subs	r5, r3, #1
 8015302:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015304:	2300      	movs	r3, #0
 8015306:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015308:	f7eb f8a8 	bl	800045c <__aeabi_dcmpeq>
 801530c:	2800      	cmp	r0, #0
 801530e:	d12c      	bne.n	801536a <_svfprintf_r+0x13b2>
 8015310:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015312:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015314:	9308      	str	r3, [sp, #32]
 8015316:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015318:	6065      	str	r5, [r4, #4]
 801531a:	1c5a      	adds	r2, r3, #1
 801531c:	930e      	str	r3, [sp, #56]	; 0x38
 801531e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015320:	922d      	str	r2, [sp, #180]	; 0xb4
 8015322:	3301      	adds	r3, #1
 8015324:	6023      	str	r3, [r4, #0]
 8015326:	9b08      	ldr	r3, [sp, #32]
 8015328:	3408      	adds	r4, #8
 801532a:	3b01      	subs	r3, #1
 801532c:	185b      	adds	r3, r3, r1
 801532e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015330:	2a07      	cmp	r2, #7
 8015332:	dd07      	ble.n	8015344 <_svfprintf_r+0x138c>
 8015334:	aa2c      	add	r2, sp, #176	; 0xb0
 8015336:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015338:	980a      	ldr	r0, [sp, #40]	; 0x28
 801533a:	f001 ff91 	bl	8017260 <__ssprint_r>
 801533e:	2800      	cmp	r0, #0
 8015340:	d15e      	bne.n	8015400 <_svfprintf_r+0x1448>
 8015342:	ac2f      	add	r4, sp, #188	; 0xbc
 8015344:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015346:	ab28      	add	r3, sp, #160	; 0xa0
 8015348:	4694      	mov	ip, r2
 801534a:	6023      	str	r3, [r4, #0]
 801534c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801534e:	6063      	str	r3, [r4, #4]
 8015350:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015352:	4463      	add	r3, ip
 8015354:	932e      	str	r3, [sp, #184]	; 0xb8
 8015356:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015358:	9308      	str	r3, [sp, #32]
 801535a:	3301      	adds	r3, #1
 801535c:	932d      	str	r3, [sp, #180]	; 0xb4
 801535e:	2b07      	cmp	r3, #7
 8015360:	dd00      	ble.n	8015364 <_svfprintf_r+0x13ac>
 8015362:	e629      	b.n	8014fb8 <_svfprintf_r+0x1000>
 8015364:	3408      	adds	r4, #8
 8015366:	0027      	movs	r7, r4
 8015368:	e579      	b.n	8014e5e <_svfprintf_r+0xea6>
 801536a:	2710      	movs	r7, #16
 801536c:	2d00      	cmp	r5, #0
 801536e:	dde9      	ble.n	8015344 <_svfprintf_r+0x138c>
 8015370:	0021      	movs	r1, r4
 8015372:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015374:	4807      	ldr	r0, [pc, #28]	; (8015394 <_svfprintf_r+0x13dc>)
 8015376:	9308      	str	r3, [sp, #32]
 8015378:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801537a:	3301      	adds	r3, #1
 801537c:	3108      	adds	r1, #8
 801537e:	6020      	str	r0, [r4, #0]
 8015380:	2d10      	cmp	r5, #16
 8015382:	dc09      	bgt.n	8015398 <_svfprintf_r+0x13e0>
 8015384:	6065      	str	r5, [r4, #4]
 8015386:	000c      	movs	r4, r1
 8015388:	18ad      	adds	r5, r5, r2
 801538a:	952e      	str	r5, [sp, #184]	; 0xb8
 801538c:	932d      	str	r3, [sp, #180]	; 0xb4
 801538e:	2b07      	cmp	r3, #7
 8015390:	ddd8      	ble.n	8015344 <_svfprintf_r+0x138c>
 8015392:	e7cf      	b.n	8015334 <_svfprintf_r+0x137c>
 8015394:	0801a3e4 	.word	0x0801a3e4
 8015398:	3210      	adds	r2, #16
 801539a:	6067      	str	r7, [r4, #4]
 801539c:	922e      	str	r2, [sp, #184]	; 0xb8
 801539e:	932d      	str	r3, [sp, #180]	; 0xb4
 80153a0:	2b07      	cmp	r3, #7
 80153a2:	dd07      	ble.n	80153b4 <_svfprintf_r+0x13fc>
 80153a4:	aa2c      	add	r2, sp, #176	; 0xb0
 80153a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153aa:	f001 ff59 	bl	8017260 <__ssprint_r>
 80153ae:	2800      	cmp	r0, #0
 80153b0:	d126      	bne.n	8015400 <_svfprintf_r+0x1448>
 80153b2:	a92f      	add	r1, sp, #188	; 0xbc
 80153b4:	3d10      	subs	r5, #16
 80153b6:	000c      	movs	r4, r1
 80153b8:	e7da      	b.n	8015370 <_svfprintf_r+0x13b8>
 80153ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80153bc:	912e      	str	r1, [sp, #184]	; 0xb8
 80153be:	c705      	stmia	r7!, {r0, r2}
 80153c0:	932d      	str	r3, [sp, #180]	; 0xb4
 80153c2:	e7e4      	b.n	801538e <_svfprintf_r+0x13d6>
 80153c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80153c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80153c8:	2510      	movs	r5, #16
 80153ca:	1a9c      	subs	r4, r3, r2
 80153cc:	2c00      	cmp	r4, #0
 80153ce:	dc00      	bgt.n	80153d2 <_svfprintf_r+0x141a>
 80153d0:	e548      	b.n	8014e64 <_svfprintf_r+0xeac>
 80153d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153d4:	4921      	ldr	r1, [pc, #132]	; (801545c <_svfprintf_r+0x14a4>)
 80153d6:	9308      	str	r3, [sp, #32]
 80153d8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80153da:	3301      	adds	r3, #1
 80153dc:	6039      	str	r1, [r7, #0]
 80153de:	2c10      	cmp	r4, #16
 80153e0:	dc19      	bgt.n	8015416 <_svfprintf_r+0x145e>
 80153e2:	607c      	str	r4, [r7, #4]
 80153e4:	18a4      	adds	r4, r4, r2
 80153e6:	942e      	str	r4, [sp, #184]	; 0xb8
 80153e8:	932d      	str	r3, [sp, #180]	; 0xb4
 80153ea:	2b07      	cmp	r3, #7
 80153ec:	dc00      	bgt.n	80153f0 <_svfprintf_r+0x1438>
 80153ee:	e539      	b.n	8014e64 <_svfprintf_r+0xeac>
 80153f0:	aa2c      	add	r2, sp, #176	; 0xb0
 80153f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153f6:	f001 ff33 	bl	8017260 <__ssprint_r>
 80153fa:	2800      	cmp	r0, #0
 80153fc:	d100      	bne.n	8015400 <_svfprintf_r+0x1448>
 80153fe:	e531      	b.n	8014e64 <_svfprintf_r+0xeac>
 8015400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015402:	2b00      	cmp	r3, #0
 8015404:	d101      	bne.n	801540a <_svfprintf_r+0x1452>
 8015406:	f7ff f908 	bl	801461a <_svfprintf_r+0x662>
 801540a:	0019      	movs	r1, r3
 801540c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801540e:	f000 ff19 	bl	8016244 <_free_r>
 8015412:	f7ff f902 	bl	801461a <_svfprintf_r+0x662>
 8015416:	3210      	adds	r2, #16
 8015418:	607d      	str	r5, [r7, #4]
 801541a:	922e      	str	r2, [sp, #184]	; 0xb8
 801541c:	932d      	str	r3, [sp, #180]	; 0xb4
 801541e:	3708      	adds	r7, #8
 8015420:	2b07      	cmp	r3, #7
 8015422:	dd07      	ble.n	8015434 <_svfprintf_r+0x147c>
 8015424:	aa2c      	add	r2, sp, #176	; 0xb0
 8015426:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015428:	980a      	ldr	r0, [sp, #40]	; 0x28
 801542a:	f001 ff19 	bl	8017260 <__ssprint_r>
 801542e:	2800      	cmp	r0, #0
 8015430:	d1e6      	bne.n	8015400 <_svfprintf_r+0x1448>
 8015432:	af2f      	add	r7, sp, #188	; 0xbc
 8015434:	3c10      	subs	r4, #16
 8015436:	e7cc      	b.n	80153d2 <_svfprintf_r+0x141a>
 8015438:	990c      	ldr	r1, [sp, #48]	; 0x30
 801543a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801543c:	f000 ff02 	bl	8016244 <_free_r>
 8015440:	e52a      	b.n	8014e98 <_svfprintf_r+0xee0>
 8015442:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015444:	9306      	str	r3, [sp, #24]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d101      	bne.n	801544e <_svfprintf_r+0x1496>
 801544a:	f7ff f8e6 	bl	801461a <_svfprintf_r+0x662>
 801544e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015450:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015452:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015454:	f001 ff04 	bl	8017260 <__ssprint_r>
 8015458:	f7ff f8df 	bl	801461a <_svfprintf_r+0x662>
 801545c:	0801a3d4 	.word	0x0801a3d4

08015460 <sysconf>:
 8015460:	2380      	movs	r3, #128	; 0x80
 8015462:	b510      	push	{r4, lr}
 8015464:	015b      	lsls	r3, r3, #5
 8015466:	2808      	cmp	r0, #8
 8015468:	d004      	beq.n	8015474 <sysconf+0x14>
 801546a:	f000 fe7d 	bl	8016168 <__errno>
 801546e:	2316      	movs	r3, #22
 8015470:	6003      	str	r3, [r0, #0]
 8015472:	3b17      	subs	r3, #23
 8015474:	0018      	movs	r0, r3
 8015476:	bd10      	pop	{r4, pc}

08015478 <__ascii_wctomb>:
 8015478:	1e0b      	subs	r3, r1, #0
 801547a:	d004      	beq.n	8015486 <__ascii_wctomb+0xe>
 801547c:	2aff      	cmp	r2, #255	; 0xff
 801547e:	d904      	bls.n	801548a <__ascii_wctomb+0x12>
 8015480:	238a      	movs	r3, #138	; 0x8a
 8015482:	6003      	str	r3, [r0, #0]
 8015484:	3b8b      	subs	r3, #139	; 0x8b
 8015486:	0018      	movs	r0, r3
 8015488:	4770      	bx	lr
 801548a:	700a      	strb	r2, [r1, #0]
 801548c:	2301      	movs	r3, #1
 801548e:	e7fa      	b.n	8015486 <__ascii_wctomb+0xe>

08015490 <register_fini>:
 8015490:	4b03      	ldr	r3, [pc, #12]	; (80154a0 <register_fini+0x10>)
 8015492:	b510      	push	{r4, lr}
 8015494:	2b00      	cmp	r3, #0
 8015496:	d002      	beq.n	801549e <register_fini+0xe>
 8015498:	4802      	ldr	r0, [pc, #8]	; (80154a4 <register_fini+0x14>)
 801549a:	f000 f805 	bl	80154a8 <atexit>
 801549e:	bd10      	pop	{r4, pc}
 80154a0:	00000000 	.word	0x00000000
 80154a4:	08016175 	.word	0x08016175

080154a8 <atexit>:
 80154a8:	2300      	movs	r3, #0
 80154aa:	b510      	push	{r4, lr}
 80154ac:	0001      	movs	r1, r0
 80154ae:	001a      	movs	r2, r3
 80154b0:	0018      	movs	r0, r3
 80154b2:	f001 ff53 	bl	801735c <__register_exitproc>
 80154b6:	bd10      	pop	{r4, pc}

080154b8 <quorem>:
 80154b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154ba:	6903      	ldr	r3, [r0, #16]
 80154bc:	690c      	ldr	r4, [r1, #16]
 80154be:	b089      	sub	sp, #36	; 0x24
 80154c0:	0007      	movs	r7, r0
 80154c2:	9105      	str	r1, [sp, #20]
 80154c4:	2600      	movs	r6, #0
 80154c6:	42a3      	cmp	r3, r4
 80154c8:	db65      	blt.n	8015596 <quorem+0xde>
 80154ca:	000b      	movs	r3, r1
 80154cc:	3c01      	subs	r4, #1
 80154ce:	3314      	adds	r3, #20
 80154d0:	00a5      	lsls	r5, r4, #2
 80154d2:	9303      	str	r3, [sp, #12]
 80154d4:	195b      	adds	r3, r3, r5
 80154d6:	9304      	str	r3, [sp, #16]
 80154d8:	0003      	movs	r3, r0
 80154da:	3314      	adds	r3, #20
 80154dc:	9302      	str	r3, [sp, #8]
 80154de:	195d      	adds	r5, r3, r5
 80154e0:	9b04      	ldr	r3, [sp, #16]
 80154e2:	6828      	ldr	r0, [r5, #0]
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	1c59      	adds	r1, r3, #1
 80154e8:	9301      	str	r3, [sp, #4]
 80154ea:	f7ea fe31 	bl	8000150 <__udivsi3>
 80154ee:	9001      	str	r0, [sp, #4]
 80154f0:	42b0      	cmp	r0, r6
 80154f2:	d029      	beq.n	8015548 <quorem+0x90>
 80154f4:	9b03      	ldr	r3, [sp, #12]
 80154f6:	9802      	ldr	r0, [sp, #8]
 80154f8:	469c      	mov	ip, r3
 80154fa:	9606      	str	r6, [sp, #24]
 80154fc:	4662      	mov	r2, ip
 80154fe:	ca08      	ldmia	r2!, {r3}
 8015500:	4694      	mov	ip, r2
 8015502:	9a01      	ldr	r2, [sp, #4]
 8015504:	b299      	uxth	r1, r3
 8015506:	4351      	muls	r1, r2
 8015508:	0c1b      	lsrs	r3, r3, #16
 801550a:	4353      	muls	r3, r2
 801550c:	1989      	adds	r1, r1, r6
 801550e:	0c0a      	lsrs	r2, r1, #16
 8015510:	189b      	adds	r3, r3, r2
 8015512:	9307      	str	r3, [sp, #28]
 8015514:	0c1e      	lsrs	r6, r3, #16
 8015516:	6803      	ldr	r3, [r0, #0]
 8015518:	b289      	uxth	r1, r1
 801551a:	b29a      	uxth	r2, r3
 801551c:	9b06      	ldr	r3, [sp, #24]
 801551e:	18d2      	adds	r2, r2, r3
 8015520:	6803      	ldr	r3, [r0, #0]
 8015522:	1a52      	subs	r2, r2, r1
 8015524:	0c19      	lsrs	r1, r3, #16
 8015526:	466b      	mov	r3, sp
 8015528:	8b9b      	ldrh	r3, [r3, #28]
 801552a:	1acb      	subs	r3, r1, r3
 801552c:	1411      	asrs	r1, r2, #16
 801552e:	185b      	adds	r3, r3, r1
 8015530:	1419      	asrs	r1, r3, #16
 8015532:	b292      	uxth	r2, r2
 8015534:	041b      	lsls	r3, r3, #16
 8015536:	431a      	orrs	r2, r3
 8015538:	9b04      	ldr	r3, [sp, #16]
 801553a:	9106      	str	r1, [sp, #24]
 801553c:	c004      	stmia	r0!, {r2}
 801553e:	4563      	cmp	r3, ip
 8015540:	d2dc      	bcs.n	80154fc <quorem+0x44>
 8015542:	682b      	ldr	r3, [r5, #0]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d02d      	beq.n	80155a4 <quorem+0xec>
 8015548:	9905      	ldr	r1, [sp, #20]
 801554a:	0038      	movs	r0, r7
 801554c:	f001 fcb2 	bl	8016eb4 <__mcmp>
 8015550:	2800      	cmp	r0, #0
 8015552:	db1f      	blt.n	8015594 <quorem+0xdc>
 8015554:	2500      	movs	r5, #0
 8015556:	9b01      	ldr	r3, [sp, #4]
 8015558:	9802      	ldr	r0, [sp, #8]
 801555a:	3301      	adds	r3, #1
 801555c:	9903      	ldr	r1, [sp, #12]
 801555e:	9301      	str	r3, [sp, #4]
 8015560:	6802      	ldr	r2, [r0, #0]
 8015562:	c908      	ldmia	r1!, {r3}
 8015564:	b292      	uxth	r2, r2
 8015566:	1955      	adds	r5, r2, r5
 8015568:	b29a      	uxth	r2, r3
 801556a:	1aaa      	subs	r2, r5, r2
 801556c:	6805      	ldr	r5, [r0, #0]
 801556e:	0c1b      	lsrs	r3, r3, #16
 8015570:	0c2d      	lsrs	r5, r5, #16
 8015572:	1aeb      	subs	r3, r5, r3
 8015574:	1415      	asrs	r5, r2, #16
 8015576:	195b      	adds	r3, r3, r5
 8015578:	141d      	asrs	r5, r3, #16
 801557a:	b292      	uxth	r2, r2
 801557c:	041b      	lsls	r3, r3, #16
 801557e:	4313      	orrs	r3, r2
 8015580:	c008      	stmia	r0!, {r3}
 8015582:	9b04      	ldr	r3, [sp, #16]
 8015584:	428b      	cmp	r3, r1
 8015586:	d2eb      	bcs.n	8015560 <quorem+0xa8>
 8015588:	9a02      	ldr	r2, [sp, #8]
 801558a:	00a3      	lsls	r3, r4, #2
 801558c:	18d3      	adds	r3, r2, r3
 801558e:	681a      	ldr	r2, [r3, #0]
 8015590:	2a00      	cmp	r2, #0
 8015592:	d011      	beq.n	80155b8 <quorem+0x100>
 8015594:	9e01      	ldr	r6, [sp, #4]
 8015596:	0030      	movs	r0, r6
 8015598:	b009      	add	sp, #36	; 0x24
 801559a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801559c:	682b      	ldr	r3, [r5, #0]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d104      	bne.n	80155ac <quorem+0xf4>
 80155a2:	3c01      	subs	r4, #1
 80155a4:	9b02      	ldr	r3, [sp, #8]
 80155a6:	3d04      	subs	r5, #4
 80155a8:	42ab      	cmp	r3, r5
 80155aa:	d3f7      	bcc.n	801559c <quorem+0xe4>
 80155ac:	613c      	str	r4, [r7, #16]
 80155ae:	e7cb      	b.n	8015548 <quorem+0x90>
 80155b0:	681a      	ldr	r2, [r3, #0]
 80155b2:	2a00      	cmp	r2, #0
 80155b4:	d104      	bne.n	80155c0 <quorem+0x108>
 80155b6:	3c01      	subs	r4, #1
 80155b8:	9a02      	ldr	r2, [sp, #8]
 80155ba:	3b04      	subs	r3, #4
 80155bc:	429a      	cmp	r2, r3
 80155be:	d3f7      	bcc.n	80155b0 <quorem+0xf8>
 80155c0:	613c      	str	r4, [r7, #16]
 80155c2:	e7e7      	b.n	8015594 <quorem+0xdc>

080155c4 <_dtoa_r>:
 80155c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155c6:	0014      	movs	r4, r2
 80155c8:	001d      	movs	r5, r3
 80155ca:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80155cc:	b09b      	sub	sp, #108	; 0x6c
 80155ce:	9002      	str	r0, [sp, #8]
 80155d0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80155d2:	9406      	str	r4, [sp, #24]
 80155d4:	9507      	str	r5, [sp, #28]
 80155d6:	2900      	cmp	r1, #0
 80155d8:	d009      	beq.n	80155ee <_dtoa_r+0x2a>
 80155da:	2301      	movs	r3, #1
 80155dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80155de:	4093      	lsls	r3, r2
 80155e0:	604a      	str	r2, [r1, #4]
 80155e2:	608b      	str	r3, [r1, #8]
 80155e4:	f001 fa6a 	bl	8016abc <_Bfree>
 80155e8:	2300      	movs	r3, #0
 80155ea:	9a02      	ldr	r2, [sp, #8]
 80155ec:	6413      	str	r3, [r2, #64]	; 0x40
 80155ee:	2d00      	cmp	r5, #0
 80155f0:	da20      	bge.n	8015634 <_dtoa_r+0x70>
 80155f2:	2301      	movs	r3, #1
 80155f4:	6033      	str	r3, [r6, #0]
 80155f6:	006b      	lsls	r3, r5, #1
 80155f8:	085b      	lsrs	r3, r3, #1
 80155fa:	9307      	str	r3, [sp, #28]
 80155fc:	9c07      	ldr	r4, [sp, #28]
 80155fe:	4bb2      	ldr	r3, [pc, #712]	; (80158c8 <_dtoa_r+0x304>)
 8015600:	0022      	movs	r2, r4
 8015602:	9317      	str	r3, [sp, #92]	; 0x5c
 8015604:	401a      	ands	r2, r3
 8015606:	429a      	cmp	r2, r3
 8015608:	d117      	bne.n	801563a <_dtoa_r+0x76>
 801560a:	4bb0      	ldr	r3, [pc, #704]	; (80158cc <_dtoa_r+0x308>)
 801560c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801560e:	6013      	str	r3, [r2, #0]
 8015610:	9b06      	ldr	r3, [sp, #24]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d103      	bne.n	801561e <_dtoa_r+0x5a>
 8015616:	0324      	lsls	r4, r4, #12
 8015618:	d101      	bne.n	801561e <_dtoa_r+0x5a>
 801561a:	f000 fd89 	bl	8016130 <_dtoa_r+0xb6c>
 801561e:	4bac      	ldr	r3, [pc, #688]	; (80158d0 <_dtoa_r+0x30c>)
 8015620:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015622:	9308      	str	r3, [sp, #32]
 8015624:	2a00      	cmp	r2, #0
 8015626:	d002      	beq.n	801562e <_dtoa_r+0x6a>
 8015628:	4baa      	ldr	r3, [pc, #680]	; (80158d4 <_dtoa_r+0x310>)
 801562a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801562c:	6013      	str	r3, [r2, #0]
 801562e:	9808      	ldr	r0, [sp, #32]
 8015630:	b01b      	add	sp, #108	; 0x6c
 8015632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015634:	2300      	movs	r3, #0
 8015636:	6033      	str	r3, [r6, #0]
 8015638:	e7e0      	b.n	80155fc <_dtoa_r+0x38>
 801563a:	9e06      	ldr	r6, [sp, #24]
 801563c:	9f07      	ldr	r7, [sp, #28]
 801563e:	2200      	movs	r2, #0
 8015640:	2300      	movs	r3, #0
 8015642:	0030      	movs	r0, r6
 8015644:	0039      	movs	r1, r7
 8015646:	f7ea ff09 	bl	800045c <__aeabi_dcmpeq>
 801564a:	1e05      	subs	r5, r0, #0
 801564c:	d00b      	beq.n	8015666 <_dtoa_r+0xa2>
 801564e:	2301      	movs	r3, #1
 8015650:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015652:	6013      	str	r3, [r2, #0]
 8015654:	4ba0      	ldr	r3, [pc, #640]	; (80158d8 <_dtoa_r+0x314>)
 8015656:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015658:	9308      	str	r3, [sp, #32]
 801565a:	2a00      	cmp	r2, #0
 801565c:	d0e7      	beq.n	801562e <_dtoa_r+0x6a>
 801565e:	4a9f      	ldr	r2, [pc, #636]	; (80158dc <_dtoa_r+0x318>)
 8015660:	9924      	ldr	r1, [sp, #144]	; 0x90
 8015662:	600a      	str	r2, [r1, #0]
 8015664:	e7e3      	b.n	801562e <_dtoa_r+0x6a>
 8015666:	ab18      	add	r3, sp, #96	; 0x60
 8015668:	9301      	str	r3, [sp, #4]
 801566a:	ab19      	add	r3, sp, #100	; 0x64
 801566c:	9300      	str	r3, [sp, #0]
 801566e:	0032      	movs	r2, r6
 8015670:	003b      	movs	r3, r7
 8015672:	9802      	ldr	r0, [sp, #8]
 8015674:	f001 fd0e 	bl	8017094 <__d2b>
 8015678:	0063      	lsls	r3, r4, #1
 801567a:	9003      	str	r0, [sp, #12]
 801567c:	0d5b      	lsrs	r3, r3, #21
 801567e:	d074      	beq.n	801576a <_dtoa_r+0x1a6>
 8015680:	033a      	lsls	r2, r7, #12
 8015682:	4c97      	ldr	r4, [pc, #604]	; (80158e0 <_dtoa_r+0x31c>)
 8015684:	0b12      	lsrs	r2, r2, #12
 8015686:	4314      	orrs	r4, r2
 8015688:	0021      	movs	r1, r4
 801568a:	4a96      	ldr	r2, [pc, #600]	; (80158e4 <_dtoa_r+0x320>)
 801568c:	0030      	movs	r0, r6
 801568e:	9516      	str	r5, [sp, #88]	; 0x58
 8015690:	189e      	adds	r6, r3, r2
 8015692:	2200      	movs	r2, #0
 8015694:	4b94      	ldr	r3, [pc, #592]	; (80158e8 <_dtoa_r+0x324>)
 8015696:	f7ec fe3f 	bl	8002318 <__aeabi_dsub>
 801569a:	4a94      	ldr	r2, [pc, #592]	; (80158ec <_dtoa_r+0x328>)
 801569c:	4b94      	ldr	r3, [pc, #592]	; (80158f0 <_dtoa_r+0x32c>)
 801569e:	f7ec fbc9 	bl	8001e34 <__aeabi_dmul>
 80156a2:	4a94      	ldr	r2, [pc, #592]	; (80158f4 <_dtoa_r+0x330>)
 80156a4:	4b94      	ldr	r3, [pc, #592]	; (80158f8 <_dtoa_r+0x334>)
 80156a6:	f7eb fc9f 	bl	8000fe8 <__aeabi_dadd>
 80156aa:	0004      	movs	r4, r0
 80156ac:	0030      	movs	r0, r6
 80156ae:	000d      	movs	r5, r1
 80156b0:	f7ed f9cc 	bl	8002a4c <__aeabi_i2d>
 80156b4:	4a91      	ldr	r2, [pc, #580]	; (80158fc <_dtoa_r+0x338>)
 80156b6:	4b92      	ldr	r3, [pc, #584]	; (8015900 <_dtoa_r+0x33c>)
 80156b8:	f7ec fbbc 	bl	8001e34 <__aeabi_dmul>
 80156bc:	0002      	movs	r2, r0
 80156be:	000b      	movs	r3, r1
 80156c0:	0020      	movs	r0, r4
 80156c2:	0029      	movs	r1, r5
 80156c4:	f7eb fc90 	bl	8000fe8 <__aeabi_dadd>
 80156c8:	0004      	movs	r4, r0
 80156ca:	000d      	movs	r5, r1
 80156cc:	f7ed f988 	bl	80029e0 <__aeabi_d2iz>
 80156d0:	2200      	movs	r2, #0
 80156d2:	0007      	movs	r7, r0
 80156d4:	2300      	movs	r3, #0
 80156d6:	0020      	movs	r0, r4
 80156d8:	0029      	movs	r1, r5
 80156da:	f7ea fec5 	bl	8000468 <__aeabi_dcmplt>
 80156de:	2800      	cmp	r0, #0
 80156e0:	d009      	beq.n	80156f6 <_dtoa_r+0x132>
 80156e2:	0038      	movs	r0, r7
 80156e4:	f7ed f9b2 	bl	8002a4c <__aeabi_i2d>
 80156e8:	002b      	movs	r3, r5
 80156ea:	0022      	movs	r2, r4
 80156ec:	f7ea feb6 	bl	800045c <__aeabi_dcmpeq>
 80156f0:	4243      	negs	r3, r0
 80156f2:	4158      	adcs	r0, r3
 80156f4:	1a3f      	subs	r7, r7, r0
 80156f6:	2301      	movs	r3, #1
 80156f8:	9314      	str	r3, [sp, #80]	; 0x50
 80156fa:	2f16      	cmp	r7, #22
 80156fc:	d80d      	bhi.n	801571a <_dtoa_r+0x156>
 80156fe:	4981      	ldr	r1, [pc, #516]	; (8015904 <_dtoa_r+0x340>)
 8015700:	00fb      	lsls	r3, r7, #3
 8015702:	18c9      	adds	r1, r1, r3
 8015704:	6808      	ldr	r0, [r1, #0]
 8015706:	6849      	ldr	r1, [r1, #4]
 8015708:	9a06      	ldr	r2, [sp, #24]
 801570a:	9b07      	ldr	r3, [sp, #28]
 801570c:	f7ea fec0 	bl	8000490 <__aeabi_dcmpgt>
 8015710:	2800      	cmp	r0, #0
 8015712:	d046      	beq.n	80157a2 <_dtoa_r+0x1de>
 8015714:	2300      	movs	r3, #0
 8015716:	3f01      	subs	r7, #1
 8015718:	9314      	str	r3, [sp, #80]	; 0x50
 801571a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801571c:	1b9e      	subs	r6, r3, r6
 801571e:	2300      	movs	r3, #0
 8015720:	930a      	str	r3, [sp, #40]	; 0x28
 8015722:	0033      	movs	r3, r6
 8015724:	3b01      	subs	r3, #1
 8015726:	930b      	str	r3, [sp, #44]	; 0x2c
 8015728:	d504      	bpl.n	8015734 <_dtoa_r+0x170>
 801572a:	2301      	movs	r3, #1
 801572c:	1b9b      	subs	r3, r3, r6
 801572e:	930a      	str	r3, [sp, #40]	; 0x28
 8015730:	2300      	movs	r3, #0
 8015732:	930b      	str	r3, [sp, #44]	; 0x2c
 8015734:	2f00      	cmp	r7, #0
 8015736:	db36      	blt.n	80157a6 <_dtoa_r+0x1e2>
 8015738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801573a:	9711      	str	r7, [sp, #68]	; 0x44
 801573c:	19db      	adds	r3, r3, r7
 801573e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015740:	2300      	movs	r3, #0
 8015742:	9304      	str	r3, [sp, #16]
 8015744:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015746:	2401      	movs	r4, #1
 8015748:	2b09      	cmp	r3, #9
 801574a:	d900      	bls.n	801574e <_dtoa_r+0x18a>
 801574c:	e082      	b.n	8015854 <_dtoa_r+0x290>
 801574e:	2b05      	cmp	r3, #5
 8015750:	dd02      	ble.n	8015758 <_dtoa_r+0x194>
 8015752:	2400      	movs	r4, #0
 8015754:	3b04      	subs	r3, #4
 8015756:	9320      	str	r3, [sp, #128]	; 0x80
 8015758:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801575a:	1e98      	subs	r0, r3, #2
 801575c:	2803      	cmp	r0, #3
 801575e:	d900      	bls.n	8015762 <_dtoa_r+0x19e>
 8015760:	e082      	b.n	8015868 <_dtoa_r+0x2a4>
 8015762:	f7ea fce1 	bl	8000128 <__gnu_thumb1_case_uqi>
 8015766:	7573      	.short	0x7573
 8015768:	6828      	.short	0x6828
 801576a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801576c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801576e:	189e      	adds	r6, r3, r2
 8015770:	4b65      	ldr	r3, [pc, #404]	; (8015908 <_dtoa_r+0x344>)
 8015772:	18f2      	adds	r2, r6, r3
 8015774:	2a20      	cmp	r2, #32
 8015776:	dd0f      	ble.n	8015798 <_dtoa_r+0x1d4>
 8015778:	2340      	movs	r3, #64	; 0x40
 801577a:	1a9b      	subs	r3, r3, r2
 801577c:	409c      	lsls	r4, r3
 801577e:	4b63      	ldr	r3, [pc, #396]	; (801590c <_dtoa_r+0x348>)
 8015780:	9806      	ldr	r0, [sp, #24]
 8015782:	18f3      	adds	r3, r6, r3
 8015784:	40d8      	lsrs	r0, r3
 8015786:	4320      	orrs	r0, r4
 8015788:	f7ed f99a 	bl	8002ac0 <__aeabi_ui2d>
 801578c:	2301      	movs	r3, #1
 801578e:	4c60      	ldr	r4, [pc, #384]	; (8015910 <_dtoa_r+0x34c>)
 8015790:	3e01      	subs	r6, #1
 8015792:	1909      	adds	r1, r1, r4
 8015794:	9316      	str	r3, [sp, #88]	; 0x58
 8015796:	e77c      	b.n	8015692 <_dtoa_r+0xce>
 8015798:	2320      	movs	r3, #32
 801579a:	9806      	ldr	r0, [sp, #24]
 801579c:	1a9b      	subs	r3, r3, r2
 801579e:	4098      	lsls	r0, r3
 80157a0:	e7f2      	b.n	8015788 <_dtoa_r+0x1c4>
 80157a2:	9014      	str	r0, [sp, #80]	; 0x50
 80157a4:	e7b9      	b.n	801571a <_dtoa_r+0x156>
 80157a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157a8:	1bdb      	subs	r3, r3, r7
 80157aa:	930a      	str	r3, [sp, #40]	; 0x28
 80157ac:	427b      	negs	r3, r7
 80157ae:	9304      	str	r3, [sp, #16]
 80157b0:	2300      	movs	r3, #0
 80157b2:	9311      	str	r3, [sp, #68]	; 0x44
 80157b4:	e7c6      	b.n	8015744 <_dtoa_r+0x180>
 80157b6:	2301      	movs	r3, #1
 80157b8:	930d      	str	r3, [sp, #52]	; 0x34
 80157ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157bc:	2b00      	cmp	r3, #0
 80157be:	dd57      	ble.n	8015870 <_dtoa_r+0x2ac>
 80157c0:	930c      	str	r3, [sp, #48]	; 0x30
 80157c2:	9309      	str	r3, [sp, #36]	; 0x24
 80157c4:	2200      	movs	r2, #0
 80157c6:	9902      	ldr	r1, [sp, #8]
 80157c8:	644a      	str	r2, [r1, #68]	; 0x44
 80157ca:	3204      	adds	r2, #4
 80157cc:	0010      	movs	r0, r2
 80157ce:	9902      	ldr	r1, [sp, #8]
 80157d0:	3014      	adds	r0, #20
 80157d2:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80157d4:	4298      	cmp	r0, r3
 80157d6:	d950      	bls.n	801587a <_dtoa_r+0x2b6>
 80157d8:	9802      	ldr	r0, [sp, #8]
 80157da:	f001 f947 	bl	8016a6c <_Balloc>
 80157de:	9b02      	ldr	r3, [sp, #8]
 80157e0:	9008      	str	r0, [sp, #32]
 80157e2:	6418      	str	r0, [r3, #64]	; 0x40
 80157e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157e6:	2b0e      	cmp	r3, #14
 80157e8:	d900      	bls.n	80157ec <_dtoa_r+0x228>
 80157ea:	e10c      	b.n	8015a06 <_dtoa_r+0x442>
 80157ec:	2c00      	cmp	r4, #0
 80157ee:	d100      	bne.n	80157f2 <_dtoa_r+0x22e>
 80157f0:	e109      	b.n	8015a06 <_dtoa_r+0x442>
 80157f2:	9b06      	ldr	r3, [sp, #24]
 80157f4:	9c07      	ldr	r4, [sp, #28]
 80157f6:	9312      	str	r3, [sp, #72]	; 0x48
 80157f8:	9413      	str	r4, [sp, #76]	; 0x4c
 80157fa:	2f00      	cmp	r7, #0
 80157fc:	dc00      	bgt.n	8015800 <_dtoa_r+0x23c>
 80157fe:	e08b      	b.n	8015918 <_dtoa_r+0x354>
 8015800:	210f      	movs	r1, #15
 8015802:	003a      	movs	r2, r7
 8015804:	4b3f      	ldr	r3, [pc, #252]	; (8015904 <_dtoa_r+0x340>)
 8015806:	400a      	ands	r2, r1
 8015808:	00d2      	lsls	r2, r2, #3
 801580a:	189b      	adds	r3, r3, r2
 801580c:	681d      	ldr	r5, [r3, #0]
 801580e:	685e      	ldr	r6, [r3, #4]
 8015810:	2302      	movs	r3, #2
 8015812:	113c      	asrs	r4, r7, #4
 8015814:	930e      	str	r3, [sp, #56]	; 0x38
 8015816:	06e3      	lsls	r3, r4, #27
 8015818:	d50b      	bpl.n	8015832 <_dtoa_r+0x26e>
 801581a:	4b3e      	ldr	r3, [pc, #248]	; (8015914 <_dtoa_r+0x350>)
 801581c:	400c      	ands	r4, r1
 801581e:	6a1a      	ldr	r2, [r3, #32]
 8015820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015822:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015824:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015826:	f7eb fefb 	bl	8001620 <__aeabi_ddiv>
 801582a:	2303      	movs	r3, #3
 801582c:	9006      	str	r0, [sp, #24]
 801582e:	9107      	str	r1, [sp, #28]
 8015830:	930e      	str	r3, [sp, #56]	; 0x38
 8015832:	2300      	movs	r3, #0
 8015834:	e03b      	b.n	80158ae <_dtoa_r+0x2ea>
 8015836:	2301      	movs	r3, #1
 8015838:	930d      	str	r3, [sp, #52]	; 0x34
 801583a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801583c:	18fb      	adds	r3, r7, r3
 801583e:	930c      	str	r3, [sp, #48]	; 0x30
 8015840:	3301      	adds	r3, #1
 8015842:	9309      	str	r3, [sp, #36]	; 0x24
 8015844:	2b00      	cmp	r3, #0
 8015846:	dcbd      	bgt.n	80157c4 <_dtoa_r+0x200>
 8015848:	2301      	movs	r3, #1
 801584a:	e7bb      	b.n	80157c4 <_dtoa_r+0x200>
 801584c:	2300      	movs	r3, #0
 801584e:	e7b3      	b.n	80157b8 <_dtoa_r+0x1f4>
 8015850:	2300      	movs	r3, #0
 8015852:	e7f1      	b.n	8015838 <_dtoa_r+0x274>
 8015854:	2300      	movs	r3, #0
 8015856:	940d      	str	r4, [sp, #52]	; 0x34
 8015858:	9320      	str	r3, [sp, #128]	; 0x80
 801585a:	3b01      	subs	r3, #1
 801585c:	2200      	movs	r2, #0
 801585e:	930c      	str	r3, [sp, #48]	; 0x30
 8015860:	9309      	str	r3, [sp, #36]	; 0x24
 8015862:	3313      	adds	r3, #19
 8015864:	9221      	str	r2, [sp, #132]	; 0x84
 8015866:	e7ad      	b.n	80157c4 <_dtoa_r+0x200>
 8015868:	2301      	movs	r3, #1
 801586a:	930d      	str	r3, [sp, #52]	; 0x34
 801586c:	3b02      	subs	r3, #2
 801586e:	e7f5      	b.n	801585c <_dtoa_r+0x298>
 8015870:	2301      	movs	r3, #1
 8015872:	930c      	str	r3, [sp, #48]	; 0x30
 8015874:	9309      	str	r3, [sp, #36]	; 0x24
 8015876:	001a      	movs	r2, r3
 8015878:	e7f4      	b.n	8015864 <_dtoa_r+0x2a0>
 801587a:	9802      	ldr	r0, [sp, #8]
 801587c:	3101      	adds	r1, #1
 801587e:	6441      	str	r1, [r0, #68]	; 0x44
 8015880:	0052      	lsls	r2, r2, #1
 8015882:	e7a3      	b.n	80157cc <_dtoa_r+0x208>
 8015884:	2301      	movs	r3, #1
 8015886:	421c      	tst	r4, r3
 8015888:	d00e      	beq.n	80158a8 <_dtoa_r+0x2e4>
 801588a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801588c:	4a21      	ldr	r2, [pc, #132]	; (8015914 <_dtoa_r+0x350>)
 801588e:	3301      	adds	r3, #1
 8015890:	930e      	str	r3, [sp, #56]	; 0x38
 8015892:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015894:	0028      	movs	r0, r5
 8015896:	00db      	lsls	r3, r3, #3
 8015898:	189b      	adds	r3, r3, r2
 801589a:	0031      	movs	r1, r6
 801589c:	681a      	ldr	r2, [r3, #0]
 801589e:	685b      	ldr	r3, [r3, #4]
 80158a0:	f7ec fac8 	bl	8001e34 <__aeabi_dmul>
 80158a4:	0005      	movs	r5, r0
 80158a6:	000e      	movs	r6, r1
 80158a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80158aa:	1064      	asrs	r4, r4, #1
 80158ac:	3301      	adds	r3, #1
 80158ae:	9310      	str	r3, [sp, #64]	; 0x40
 80158b0:	2c00      	cmp	r4, #0
 80158b2:	d1e7      	bne.n	8015884 <_dtoa_r+0x2c0>
 80158b4:	9806      	ldr	r0, [sp, #24]
 80158b6:	9907      	ldr	r1, [sp, #28]
 80158b8:	002a      	movs	r2, r5
 80158ba:	0033      	movs	r3, r6
 80158bc:	f7eb feb0 	bl	8001620 <__aeabi_ddiv>
 80158c0:	9006      	str	r0, [sp, #24]
 80158c2:	9107      	str	r1, [sp, #28]
 80158c4:	e043      	b.n	801594e <_dtoa_r+0x38a>
 80158c6:	46c0      	nop			; (mov r8, r8)
 80158c8:	7ff00000 	.word	0x7ff00000
 80158cc:	0000270f 	.word	0x0000270f
 80158d0:	0801a4fe 	.word	0x0801a4fe
 80158d4:	0801a501 	.word	0x0801a501
 80158d8:	0801a3d2 	.word	0x0801a3d2
 80158dc:	0801a3d3 	.word	0x0801a3d3
 80158e0:	3ff00000 	.word	0x3ff00000
 80158e4:	fffffc01 	.word	0xfffffc01
 80158e8:	3ff80000 	.word	0x3ff80000
 80158ec:	636f4361 	.word	0x636f4361
 80158f0:	3fd287a7 	.word	0x3fd287a7
 80158f4:	8b60c8b3 	.word	0x8b60c8b3
 80158f8:	3fc68a28 	.word	0x3fc68a28
 80158fc:	509f79fb 	.word	0x509f79fb
 8015900:	3fd34413 	.word	0x3fd34413
 8015904:	0801a530 	.word	0x0801a530
 8015908:	00000432 	.word	0x00000432
 801590c:	00000412 	.word	0x00000412
 8015910:	fe100000 	.word	0xfe100000
 8015914:	0801a508 	.word	0x0801a508
 8015918:	2302      	movs	r3, #2
 801591a:	930e      	str	r3, [sp, #56]	; 0x38
 801591c:	2f00      	cmp	r7, #0
 801591e:	d016      	beq.n	801594e <_dtoa_r+0x38a>
 8015920:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015922:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015924:	427c      	negs	r4, r7
 8015926:	330d      	adds	r3, #13
 8015928:	4023      	ands	r3, r4
 801592a:	4acf      	ldr	r2, [pc, #828]	; (8015c68 <_dtoa_r+0x6a4>)
 801592c:	00db      	lsls	r3, r3, #3
 801592e:	18d3      	adds	r3, r2, r3
 8015930:	681a      	ldr	r2, [r3, #0]
 8015932:	685b      	ldr	r3, [r3, #4]
 8015934:	f7ec fa7e 	bl	8001e34 <__aeabi_dmul>
 8015938:	2300      	movs	r3, #0
 801593a:	2601      	movs	r6, #1
 801593c:	001d      	movs	r5, r3
 801593e:	9006      	str	r0, [sp, #24]
 8015940:	9107      	str	r1, [sp, #28]
 8015942:	1124      	asrs	r4, r4, #4
 8015944:	2c00      	cmp	r4, #0
 8015946:	d000      	beq.n	801594a <_dtoa_r+0x386>
 8015948:	e08c      	b.n	8015a64 <_dtoa_r+0x4a0>
 801594a:	2b00      	cmp	r3, #0
 801594c:	d1b8      	bne.n	80158c0 <_dtoa_r+0x2fc>
 801594e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015950:	2b00      	cmp	r3, #0
 8015952:	d100      	bne.n	8015956 <_dtoa_r+0x392>
 8015954:	e096      	b.n	8015a84 <_dtoa_r+0x4c0>
 8015956:	9c06      	ldr	r4, [sp, #24]
 8015958:	9d07      	ldr	r5, [sp, #28]
 801595a:	2200      	movs	r2, #0
 801595c:	4bc3      	ldr	r3, [pc, #780]	; (8015c6c <_dtoa_r+0x6a8>)
 801595e:	0020      	movs	r0, r4
 8015960:	0029      	movs	r1, r5
 8015962:	f7ea fd81 	bl	8000468 <__aeabi_dcmplt>
 8015966:	2800      	cmp	r0, #0
 8015968:	d100      	bne.n	801596c <_dtoa_r+0x3a8>
 801596a:	e08b      	b.n	8015a84 <_dtoa_r+0x4c0>
 801596c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801596e:	2b00      	cmp	r3, #0
 8015970:	d100      	bne.n	8015974 <_dtoa_r+0x3b0>
 8015972:	e087      	b.n	8015a84 <_dtoa_r+0x4c0>
 8015974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015976:	2b00      	cmp	r3, #0
 8015978:	dd41      	ble.n	80159fe <_dtoa_r+0x43a>
 801597a:	4bbd      	ldr	r3, [pc, #756]	; (8015c70 <_dtoa_r+0x6ac>)
 801597c:	2200      	movs	r2, #0
 801597e:	0020      	movs	r0, r4
 8015980:	0029      	movs	r1, r5
 8015982:	f7ec fa57 	bl	8001e34 <__aeabi_dmul>
 8015986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015988:	9006      	str	r0, [sp, #24]
 801598a:	9107      	str	r1, [sp, #28]
 801598c:	3301      	adds	r3, #1
 801598e:	930e      	str	r3, [sp, #56]	; 0x38
 8015990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015992:	1e7e      	subs	r6, r7, #1
 8015994:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015996:	9310      	str	r3, [sp, #64]	; 0x40
 8015998:	f7ed f858 	bl	8002a4c <__aeabi_i2d>
 801599c:	9a06      	ldr	r2, [sp, #24]
 801599e:	9b07      	ldr	r3, [sp, #28]
 80159a0:	f7ec fa48 	bl	8001e34 <__aeabi_dmul>
 80159a4:	2200      	movs	r2, #0
 80159a6:	4bb3      	ldr	r3, [pc, #716]	; (8015c74 <_dtoa_r+0x6b0>)
 80159a8:	f7eb fb1e 	bl	8000fe8 <__aeabi_dadd>
 80159ac:	4ab2      	ldr	r2, [pc, #712]	; (8015c78 <_dtoa_r+0x6b4>)
 80159ae:	900e      	str	r0, [sp, #56]	; 0x38
 80159b0:	910f      	str	r1, [sp, #60]	; 0x3c
 80159b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80159b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80159b6:	4694      	mov	ip, r2
 80159b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159ba:	4463      	add	r3, ip
 80159bc:	9315      	str	r3, [sp, #84]	; 0x54
 80159be:	001d      	movs	r5, r3
 80159c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d161      	bne.n	8015a8a <_dtoa_r+0x4c6>
 80159c6:	9806      	ldr	r0, [sp, #24]
 80159c8:	9907      	ldr	r1, [sp, #28]
 80159ca:	2200      	movs	r2, #0
 80159cc:	4bab      	ldr	r3, [pc, #684]	; (8015c7c <_dtoa_r+0x6b8>)
 80159ce:	f7ec fca3 	bl	8002318 <__aeabi_dsub>
 80159d2:	0022      	movs	r2, r4
 80159d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80159d6:	9006      	str	r0, [sp, #24]
 80159d8:	9107      	str	r1, [sp, #28]
 80159da:	f7ea fd59 	bl	8000490 <__aeabi_dcmpgt>
 80159de:	2800      	cmp	r0, #0
 80159e0:	d000      	beq.n	80159e4 <_dtoa_r+0x420>
 80159e2:	e2aa      	b.n	8015f3a <_dtoa_r+0x976>
 80159e4:	48a6      	ldr	r0, [pc, #664]	; (8015c80 <_dtoa_r+0x6bc>)
 80159e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80159e8:	4684      	mov	ip, r0
 80159ea:	4461      	add	r1, ip
 80159ec:	000b      	movs	r3, r1
 80159ee:	9806      	ldr	r0, [sp, #24]
 80159f0:	9907      	ldr	r1, [sp, #28]
 80159f2:	0022      	movs	r2, r4
 80159f4:	f7ea fd38 	bl	8000468 <__aeabi_dcmplt>
 80159f8:	2800      	cmp	r0, #0
 80159fa:	d000      	beq.n	80159fe <_dtoa_r+0x43a>
 80159fc:	e297      	b.n	8015f2e <_dtoa_r+0x96a>
 80159fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015a00:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015a02:	9306      	str	r3, [sp, #24]
 8015a04:	9407      	str	r4, [sp, #28]
 8015a06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	da00      	bge.n	8015a0e <_dtoa_r+0x44a>
 8015a0c:	e15e      	b.n	8015ccc <_dtoa_r+0x708>
 8015a0e:	2f0e      	cmp	r7, #14
 8015a10:	dd00      	ble.n	8015a14 <_dtoa_r+0x450>
 8015a12:	e15b      	b.n	8015ccc <_dtoa_r+0x708>
 8015a14:	4b94      	ldr	r3, [pc, #592]	; (8015c68 <_dtoa_r+0x6a4>)
 8015a16:	00fa      	lsls	r2, r7, #3
 8015a18:	189b      	adds	r3, r3, r2
 8015a1a:	685c      	ldr	r4, [r3, #4]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	9304      	str	r3, [sp, #16]
 8015a20:	9405      	str	r4, [sp, #20]
 8015a22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	db00      	blt.n	8015a2a <_dtoa_r+0x466>
 8015a28:	e0da      	b.n	8015be0 <_dtoa_r+0x61c>
 8015a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	dd00      	ble.n	8015a32 <_dtoa_r+0x46e>
 8015a30:	e0d6      	b.n	8015be0 <_dtoa_r+0x61c>
 8015a32:	d000      	beq.n	8015a36 <_dtoa_r+0x472>
 8015a34:	e27f      	b.n	8015f36 <_dtoa_r+0x972>
 8015a36:	9804      	ldr	r0, [sp, #16]
 8015a38:	9905      	ldr	r1, [sp, #20]
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	4b8f      	ldr	r3, [pc, #572]	; (8015c7c <_dtoa_r+0x6b8>)
 8015a3e:	f7ec f9f9 	bl	8001e34 <__aeabi_dmul>
 8015a42:	9a06      	ldr	r2, [sp, #24]
 8015a44:	9b07      	ldr	r3, [sp, #28]
 8015a46:	f7ea fd2d 	bl	80004a4 <__aeabi_dcmpge>
 8015a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a4c:	9304      	str	r3, [sp, #16]
 8015a4e:	001e      	movs	r6, r3
 8015a50:	2800      	cmp	r0, #0
 8015a52:	d000      	beq.n	8015a56 <_dtoa_r+0x492>
 8015a54:	e251      	b.n	8015efa <_dtoa_r+0x936>
 8015a56:	9b08      	ldr	r3, [sp, #32]
 8015a58:	9a08      	ldr	r2, [sp, #32]
 8015a5a:	1c5d      	adds	r5, r3, #1
 8015a5c:	2331      	movs	r3, #49	; 0x31
 8015a5e:	3701      	adds	r7, #1
 8015a60:	7013      	strb	r3, [r2, #0]
 8015a62:	e24d      	b.n	8015f00 <_dtoa_r+0x93c>
 8015a64:	4234      	tst	r4, r6
 8015a66:	d00a      	beq.n	8015a7e <_dtoa_r+0x4ba>
 8015a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a6a:	4a86      	ldr	r2, [pc, #536]	; (8015c84 <_dtoa_r+0x6c0>)
 8015a6c:	3301      	adds	r3, #1
 8015a6e:	930e      	str	r3, [sp, #56]	; 0x38
 8015a70:	00eb      	lsls	r3, r5, #3
 8015a72:	189b      	adds	r3, r3, r2
 8015a74:	681a      	ldr	r2, [r3, #0]
 8015a76:	685b      	ldr	r3, [r3, #4]
 8015a78:	f7ec f9dc 	bl	8001e34 <__aeabi_dmul>
 8015a7c:	0033      	movs	r3, r6
 8015a7e:	1064      	asrs	r4, r4, #1
 8015a80:	3501      	adds	r5, #1
 8015a82:	e75f      	b.n	8015944 <_dtoa_r+0x380>
 8015a84:	003e      	movs	r6, r7
 8015a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a88:	e784      	b.n	8015994 <_dtoa_r+0x3d0>
 8015a8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a8c:	1e5a      	subs	r2, r3, #1
 8015a8e:	4b76      	ldr	r3, [pc, #472]	; (8015c68 <_dtoa_r+0x6a4>)
 8015a90:	00d2      	lsls	r2, r2, #3
 8015a92:	189b      	adds	r3, r3, r2
 8015a94:	6818      	ldr	r0, [r3, #0]
 8015a96:	6859      	ldr	r1, [r3, #4]
 8015a98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d04b      	beq.n	8015b36 <_dtoa_r+0x572>
 8015a9e:	0002      	movs	r2, r0
 8015aa0:	000b      	movs	r3, r1
 8015aa2:	2000      	movs	r0, #0
 8015aa4:	4978      	ldr	r1, [pc, #480]	; (8015c88 <_dtoa_r+0x6c4>)
 8015aa6:	f7eb fdbb 	bl	8001620 <__aeabi_ddiv>
 8015aaa:	002b      	movs	r3, r5
 8015aac:	0022      	movs	r2, r4
 8015aae:	f7ec fc33 	bl	8002318 <__aeabi_dsub>
 8015ab2:	9b08      	ldr	r3, [sp, #32]
 8015ab4:	900e      	str	r0, [sp, #56]	; 0x38
 8015ab6:	910f      	str	r1, [sp, #60]	; 0x3c
 8015ab8:	9315      	str	r3, [sp, #84]	; 0x54
 8015aba:	9806      	ldr	r0, [sp, #24]
 8015abc:	9907      	ldr	r1, [sp, #28]
 8015abe:	f7ec ff8f 	bl	80029e0 <__aeabi_d2iz>
 8015ac2:	0004      	movs	r4, r0
 8015ac4:	f7ec ffc2 	bl	8002a4c <__aeabi_i2d>
 8015ac8:	0002      	movs	r2, r0
 8015aca:	000b      	movs	r3, r1
 8015acc:	9806      	ldr	r0, [sp, #24]
 8015ace:	9907      	ldr	r1, [sp, #28]
 8015ad0:	f7ec fc22 	bl	8002318 <__aeabi_dsub>
 8015ad4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ad6:	3430      	adds	r4, #48	; 0x30
 8015ad8:	1c5d      	adds	r5, r3, #1
 8015ada:	701c      	strb	r4, [r3, #0]
 8015adc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ae0:	9006      	str	r0, [sp, #24]
 8015ae2:	9107      	str	r1, [sp, #28]
 8015ae4:	f7ea fcc0 	bl	8000468 <__aeabi_dcmplt>
 8015ae8:	2800      	cmp	r0, #0
 8015aea:	d16c      	bne.n	8015bc6 <_dtoa_r+0x602>
 8015aec:	9a06      	ldr	r2, [sp, #24]
 8015aee:	9b07      	ldr	r3, [sp, #28]
 8015af0:	2000      	movs	r0, #0
 8015af2:	495e      	ldr	r1, [pc, #376]	; (8015c6c <_dtoa_r+0x6a8>)
 8015af4:	f7ec fc10 	bl	8002318 <__aeabi_dsub>
 8015af8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015afa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015afc:	f7ea fcb4 	bl	8000468 <__aeabi_dcmplt>
 8015b00:	2800      	cmp	r0, #0
 8015b02:	d000      	beq.n	8015b06 <_dtoa_r+0x542>
 8015b04:	e0c3      	b.n	8015c8e <_dtoa_r+0x6ca>
 8015b06:	9b08      	ldr	r3, [sp, #32]
 8015b08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015b0a:	1aeb      	subs	r3, r5, r3
 8015b0c:	429a      	cmp	r2, r3
 8015b0e:	dc00      	bgt.n	8015b12 <_dtoa_r+0x54e>
 8015b10:	e775      	b.n	80159fe <_dtoa_r+0x43a>
 8015b12:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015b14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015b16:	2200      	movs	r2, #0
 8015b18:	4b55      	ldr	r3, [pc, #340]	; (8015c70 <_dtoa_r+0x6ac>)
 8015b1a:	f7ec f98b 	bl	8001e34 <__aeabi_dmul>
 8015b1e:	2200      	movs	r2, #0
 8015b20:	900e      	str	r0, [sp, #56]	; 0x38
 8015b22:	910f      	str	r1, [sp, #60]	; 0x3c
 8015b24:	9806      	ldr	r0, [sp, #24]
 8015b26:	9907      	ldr	r1, [sp, #28]
 8015b28:	4b51      	ldr	r3, [pc, #324]	; (8015c70 <_dtoa_r+0x6ac>)
 8015b2a:	f7ec f983 	bl	8001e34 <__aeabi_dmul>
 8015b2e:	9515      	str	r5, [sp, #84]	; 0x54
 8015b30:	9006      	str	r0, [sp, #24]
 8015b32:	9107      	str	r1, [sp, #28]
 8015b34:	e7c1      	b.n	8015aba <_dtoa_r+0x4f6>
 8015b36:	0022      	movs	r2, r4
 8015b38:	002b      	movs	r3, r5
 8015b3a:	f7ec f97b 	bl	8001e34 <__aeabi_dmul>
 8015b3e:	9c08      	ldr	r4, [sp, #32]
 8015b40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015b42:	0023      	movs	r3, r4
 8015b44:	4694      	mov	ip, r2
 8015b46:	900e      	str	r0, [sp, #56]	; 0x38
 8015b48:	910f      	str	r1, [sp, #60]	; 0x3c
 8015b4a:	4463      	add	r3, ip
 8015b4c:	9315      	str	r3, [sp, #84]	; 0x54
 8015b4e:	9806      	ldr	r0, [sp, #24]
 8015b50:	9907      	ldr	r1, [sp, #28]
 8015b52:	f7ec ff45 	bl	80029e0 <__aeabi_d2iz>
 8015b56:	0005      	movs	r5, r0
 8015b58:	f7ec ff78 	bl	8002a4c <__aeabi_i2d>
 8015b5c:	000b      	movs	r3, r1
 8015b5e:	0002      	movs	r2, r0
 8015b60:	9806      	ldr	r0, [sp, #24]
 8015b62:	9907      	ldr	r1, [sp, #28]
 8015b64:	f7ec fbd8 	bl	8002318 <__aeabi_dsub>
 8015b68:	3530      	adds	r5, #48	; 0x30
 8015b6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b6c:	7025      	strb	r5, [r4, #0]
 8015b6e:	3401      	adds	r4, #1
 8015b70:	9006      	str	r0, [sp, #24]
 8015b72:	9107      	str	r1, [sp, #28]
 8015b74:	42a3      	cmp	r3, r4
 8015b76:	d12a      	bne.n	8015bce <_dtoa_r+0x60a>
 8015b78:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015b7a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015b7c:	9a08      	ldr	r2, [sp, #32]
 8015b7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b80:	4694      	mov	ip, r2
 8015b82:	4463      	add	r3, ip
 8015b84:	2200      	movs	r2, #0
 8015b86:	001d      	movs	r5, r3
 8015b88:	4b3f      	ldr	r3, [pc, #252]	; (8015c88 <_dtoa_r+0x6c4>)
 8015b8a:	f7eb fa2d 	bl	8000fe8 <__aeabi_dadd>
 8015b8e:	0002      	movs	r2, r0
 8015b90:	000b      	movs	r3, r1
 8015b92:	9806      	ldr	r0, [sp, #24]
 8015b94:	9907      	ldr	r1, [sp, #28]
 8015b96:	f7ea fc7b 	bl	8000490 <__aeabi_dcmpgt>
 8015b9a:	2800      	cmp	r0, #0
 8015b9c:	d000      	beq.n	8015ba0 <_dtoa_r+0x5dc>
 8015b9e:	e076      	b.n	8015c8e <_dtoa_r+0x6ca>
 8015ba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ba2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ba4:	2000      	movs	r0, #0
 8015ba6:	4938      	ldr	r1, [pc, #224]	; (8015c88 <_dtoa_r+0x6c4>)
 8015ba8:	f7ec fbb6 	bl	8002318 <__aeabi_dsub>
 8015bac:	0002      	movs	r2, r0
 8015bae:	000b      	movs	r3, r1
 8015bb0:	9806      	ldr	r0, [sp, #24]
 8015bb2:	9907      	ldr	r1, [sp, #28]
 8015bb4:	f7ea fc58 	bl	8000468 <__aeabi_dcmplt>
 8015bb8:	2800      	cmp	r0, #0
 8015bba:	d100      	bne.n	8015bbe <_dtoa_r+0x5fa>
 8015bbc:	e71f      	b.n	80159fe <_dtoa_r+0x43a>
 8015bbe:	1e6b      	subs	r3, r5, #1
 8015bc0:	781a      	ldrb	r2, [r3, #0]
 8015bc2:	2a30      	cmp	r2, #48	; 0x30
 8015bc4:	d001      	beq.n	8015bca <_dtoa_r+0x606>
 8015bc6:	0037      	movs	r7, r6
 8015bc8:	e03f      	b.n	8015c4a <_dtoa_r+0x686>
 8015bca:	001d      	movs	r5, r3
 8015bcc:	e7f7      	b.n	8015bbe <_dtoa_r+0x5fa>
 8015bce:	9806      	ldr	r0, [sp, #24]
 8015bd0:	9907      	ldr	r1, [sp, #28]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	4b26      	ldr	r3, [pc, #152]	; (8015c70 <_dtoa_r+0x6ac>)
 8015bd6:	f7ec f92d 	bl	8001e34 <__aeabi_dmul>
 8015bda:	9006      	str	r0, [sp, #24]
 8015bdc:	9107      	str	r1, [sp, #28]
 8015bde:	e7b6      	b.n	8015b4e <_dtoa_r+0x58a>
 8015be0:	9e08      	ldr	r6, [sp, #32]
 8015be2:	9a04      	ldr	r2, [sp, #16]
 8015be4:	9b05      	ldr	r3, [sp, #20]
 8015be6:	9806      	ldr	r0, [sp, #24]
 8015be8:	9907      	ldr	r1, [sp, #28]
 8015bea:	f7eb fd19 	bl	8001620 <__aeabi_ddiv>
 8015bee:	f7ec fef7 	bl	80029e0 <__aeabi_d2iz>
 8015bf2:	0004      	movs	r4, r0
 8015bf4:	f7ec ff2a 	bl	8002a4c <__aeabi_i2d>
 8015bf8:	9a04      	ldr	r2, [sp, #16]
 8015bfa:	9b05      	ldr	r3, [sp, #20]
 8015bfc:	f7ec f91a 	bl	8001e34 <__aeabi_dmul>
 8015c00:	0002      	movs	r2, r0
 8015c02:	000b      	movs	r3, r1
 8015c04:	9806      	ldr	r0, [sp, #24]
 8015c06:	9907      	ldr	r1, [sp, #28]
 8015c08:	f7ec fb86 	bl	8002318 <__aeabi_dsub>
 8015c0c:	0023      	movs	r3, r4
 8015c0e:	3330      	adds	r3, #48	; 0x30
 8015c10:	7033      	strb	r3, [r6, #0]
 8015c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c14:	9b08      	ldr	r3, [sp, #32]
 8015c16:	1c75      	adds	r5, r6, #1
 8015c18:	1aeb      	subs	r3, r5, r3
 8015c1a:	429a      	cmp	r2, r3
 8015c1c:	d148      	bne.n	8015cb0 <_dtoa_r+0x6ec>
 8015c1e:	0002      	movs	r2, r0
 8015c20:	000b      	movs	r3, r1
 8015c22:	f7eb f9e1 	bl	8000fe8 <__aeabi_dadd>
 8015c26:	9a04      	ldr	r2, [sp, #16]
 8015c28:	9b05      	ldr	r3, [sp, #20]
 8015c2a:	9006      	str	r0, [sp, #24]
 8015c2c:	9107      	str	r1, [sp, #28]
 8015c2e:	f7ea fc2f 	bl	8000490 <__aeabi_dcmpgt>
 8015c32:	2800      	cmp	r0, #0
 8015c34:	d12a      	bne.n	8015c8c <_dtoa_r+0x6c8>
 8015c36:	9a04      	ldr	r2, [sp, #16]
 8015c38:	9b05      	ldr	r3, [sp, #20]
 8015c3a:	9806      	ldr	r0, [sp, #24]
 8015c3c:	9907      	ldr	r1, [sp, #28]
 8015c3e:	f7ea fc0d 	bl	800045c <__aeabi_dcmpeq>
 8015c42:	2800      	cmp	r0, #0
 8015c44:	d001      	beq.n	8015c4a <_dtoa_r+0x686>
 8015c46:	07e3      	lsls	r3, r4, #31
 8015c48:	d420      	bmi.n	8015c8c <_dtoa_r+0x6c8>
 8015c4a:	9903      	ldr	r1, [sp, #12]
 8015c4c:	9802      	ldr	r0, [sp, #8]
 8015c4e:	f000 ff35 	bl	8016abc <_Bfree>
 8015c52:	2300      	movs	r3, #0
 8015c54:	702b      	strb	r3, [r5, #0]
 8015c56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015c58:	3701      	adds	r7, #1
 8015c5a:	601f      	str	r7, [r3, #0]
 8015c5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d100      	bne.n	8015c64 <_dtoa_r+0x6a0>
 8015c62:	e4e4      	b.n	801562e <_dtoa_r+0x6a>
 8015c64:	601d      	str	r5, [r3, #0]
 8015c66:	e4e2      	b.n	801562e <_dtoa_r+0x6a>
 8015c68:	0801a530 	.word	0x0801a530
 8015c6c:	3ff00000 	.word	0x3ff00000
 8015c70:	40240000 	.word	0x40240000
 8015c74:	401c0000 	.word	0x401c0000
 8015c78:	fcc00000 	.word	0xfcc00000
 8015c7c:	40140000 	.word	0x40140000
 8015c80:	7cc00000 	.word	0x7cc00000
 8015c84:	0801a508 	.word	0x0801a508
 8015c88:	3fe00000 	.word	0x3fe00000
 8015c8c:	003e      	movs	r6, r7
 8015c8e:	1e6b      	subs	r3, r5, #1
 8015c90:	781a      	ldrb	r2, [r3, #0]
 8015c92:	2a39      	cmp	r2, #57	; 0x39
 8015c94:	d106      	bne.n	8015ca4 <_dtoa_r+0x6e0>
 8015c96:	9a08      	ldr	r2, [sp, #32]
 8015c98:	429a      	cmp	r2, r3
 8015c9a:	d107      	bne.n	8015cac <_dtoa_r+0x6e8>
 8015c9c:	2330      	movs	r3, #48	; 0x30
 8015c9e:	7013      	strb	r3, [r2, #0]
 8015ca0:	0013      	movs	r3, r2
 8015ca2:	3601      	adds	r6, #1
 8015ca4:	781a      	ldrb	r2, [r3, #0]
 8015ca6:	3201      	adds	r2, #1
 8015ca8:	701a      	strb	r2, [r3, #0]
 8015caa:	e78c      	b.n	8015bc6 <_dtoa_r+0x602>
 8015cac:	001d      	movs	r5, r3
 8015cae:	e7ee      	b.n	8015c8e <_dtoa_r+0x6ca>
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	4ba4      	ldr	r3, [pc, #656]	; (8015f44 <_dtoa_r+0x980>)
 8015cb4:	f7ec f8be 	bl	8001e34 <__aeabi_dmul>
 8015cb8:	2200      	movs	r2, #0
 8015cba:	2300      	movs	r3, #0
 8015cbc:	9006      	str	r0, [sp, #24]
 8015cbe:	9107      	str	r1, [sp, #28]
 8015cc0:	002e      	movs	r6, r5
 8015cc2:	f7ea fbcb 	bl	800045c <__aeabi_dcmpeq>
 8015cc6:	2800      	cmp	r0, #0
 8015cc8:	d08b      	beq.n	8015be2 <_dtoa_r+0x61e>
 8015cca:	e7be      	b.n	8015c4a <_dtoa_r+0x686>
 8015ccc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015cce:	2a00      	cmp	r2, #0
 8015cd0:	d100      	bne.n	8015cd4 <_dtoa_r+0x710>
 8015cd2:	e0da      	b.n	8015e8a <_dtoa_r+0x8c6>
 8015cd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015cd6:	2a01      	cmp	r2, #1
 8015cd8:	dd00      	ble.n	8015cdc <_dtoa_r+0x718>
 8015cda:	e0bd      	b.n	8015e58 <_dtoa_r+0x894>
 8015cdc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015cde:	2a00      	cmp	r2, #0
 8015ce0:	d100      	bne.n	8015ce4 <_dtoa_r+0x720>
 8015ce2:	e0b5      	b.n	8015e50 <_dtoa_r+0x88c>
 8015ce4:	4a98      	ldr	r2, [pc, #608]	; (8015f48 <_dtoa_r+0x984>)
 8015ce6:	189b      	adds	r3, r3, r2
 8015ce8:	9d04      	ldr	r5, [sp, #16]
 8015cea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015cee:	2101      	movs	r1, #1
 8015cf0:	18d2      	adds	r2, r2, r3
 8015cf2:	920a      	str	r2, [sp, #40]	; 0x28
 8015cf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015cf6:	9802      	ldr	r0, [sp, #8]
 8015cf8:	18d3      	adds	r3, r2, r3
 8015cfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8015cfc:	f000 ffad 	bl	8016c5a <__i2b>
 8015d00:	0006      	movs	r6, r0
 8015d02:	2c00      	cmp	r4, #0
 8015d04:	dd0e      	ble.n	8015d24 <_dtoa_r+0x760>
 8015d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	dd0b      	ble.n	8015d24 <_dtoa_r+0x760>
 8015d0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d0e:	0023      	movs	r3, r4
 8015d10:	4294      	cmp	r4, r2
 8015d12:	dd00      	ble.n	8015d16 <_dtoa_r+0x752>
 8015d14:	0013      	movs	r3, r2
 8015d16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d18:	1ae4      	subs	r4, r4, r3
 8015d1a:	1ad2      	subs	r2, r2, r3
 8015d1c:	920a      	str	r2, [sp, #40]	; 0x28
 8015d1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d20:	1ad3      	subs	r3, r2, r3
 8015d22:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d24:	9b04      	ldr	r3, [sp, #16]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d01f      	beq.n	8015d6a <_dtoa_r+0x7a6>
 8015d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d100      	bne.n	8015d32 <_dtoa_r+0x76e>
 8015d30:	e0af      	b.n	8015e92 <_dtoa_r+0x8ce>
 8015d32:	2d00      	cmp	r5, #0
 8015d34:	d011      	beq.n	8015d5a <_dtoa_r+0x796>
 8015d36:	0031      	movs	r1, r6
 8015d38:	002a      	movs	r2, r5
 8015d3a:	9802      	ldr	r0, [sp, #8]
 8015d3c:	f001 f826 	bl	8016d8c <__pow5mult>
 8015d40:	9a03      	ldr	r2, [sp, #12]
 8015d42:	0001      	movs	r1, r0
 8015d44:	0006      	movs	r6, r0
 8015d46:	9802      	ldr	r0, [sp, #8]
 8015d48:	f000 ff90 	bl	8016c6c <__multiply>
 8015d4c:	9903      	ldr	r1, [sp, #12]
 8015d4e:	9010      	str	r0, [sp, #64]	; 0x40
 8015d50:	9802      	ldr	r0, [sp, #8]
 8015d52:	f000 feb3 	bl	8016abc <_Bfree>
 8015d56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d58:	9303      	str	r3, [sp, #12]
 8015d5a:	9b04      	ldr	r3, [sp, #16]
 8015d5c:	1b5a      	subs	r2, r3, r5
 8015d5e:	d004      	beq.n	8015d6a <_dtoa_r+0x7a6>
 8015d60:	9903      	ldr	r1, [sp, #12]
 8015d62:	9802      	ldr	r0, [sp, #8]
 8015d64:	f001 f812 	bl	8016d8c <__pow5mult>
 8015d68:	9003      	str	r0, [sp, #12]
 8015d6a:	2101      	movs	r1, #1
 8015d6c:	9802      	ldr	r0, [sp, #8]
 8015d6e:	f000 ff74 	bl	8016c5a <__i2b>
 8015d72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d74:	9004      	str	r0, [sp, #16]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d100      	bne.n	8015d7c <_dtoa_r+0x7b8>
 8015d7a:	e1e3      	b.n	8016144 <_dtoa_r+0xb80>
 8015d7c:	001a      	movs	r2, r3
 8015d7e:	0001      	movs	r1, r0
 8015d80:	9802      	ldr	r0, [sp, #8]
 8015d82:	f001 f803 	bl	8016d8c <__pow5mult>
 8015d86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015d88:	9004      	str	r0, [sp, #16]
 8015d8a:	2b01      	cmp	r3, #1
 8015d8c:	dd00      	ble.n	8015d90 <_dtoa_r+0x7cc>
 8015d8e:	e082      	b.n	8015e96 <_dtoa_r+0x8d2>
 8015d90:	2500      	movs	r5, #0
 8015d92:	9b06      	ldr	r3, [sp, #24]
 8015d94:	42ab      	cmp	r3, r5
 8015d96:	d10e      	bne.n	8015db6 <_dtoa_r+0x7f2>
 8015d98:	9b07      	ldr	r3, [sp, #28]
 8015d9a:	031b      	lsls	r3, r3, #12
 8015d9c:	42ab      	cmp	r3, r5
 8015d9e:	d10a      	bne.n	8015db6 <_dtoa_r+0x7f2>
 8015da0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015da2:	9a07      	ldr	r2, [sp, #28]
 8015da4:	4213      	tst	r3, r2
 8015da6:	d006      	beq.n	8015db6 <_dtoa_r+0x7f2>
 8015da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015daa:	3501      	adds	r5, #1
 8015dac:	3301      	adds	r3, #1
 8015dae:	930a      	str	r3, [sp, #40]	; 0x28
 8015db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015db2:	3301      	adds	r3, #1
 8015db4:	930b      	str	r3, [sp, #44]	; 0x2c
 8015db6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015db8:	2001      	movs	r0, #1
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d16c      	bne.n	8015e98 <_dtoa_r+0x8d4>
 8015dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015dc0:	1818      	adds	r0, r3, r0
 8015dc2:	231f      	movs	r3, #31
 8015dc4:	4018      	ands	r0, r3
 8015dc6:	d07e      	beq.n	8015ec6 <_dtoa_r+0x902>
 8015dc8:	3301      	adds	r3, #1
 8015dca:	1a1b      	subs	r3, r3, r0
 8015dcc:	2b04      	cmp	r3, #4
 8015dce:	dd70      	ble.n	8015eb2 <_dtoa_r+0x8ee>
 8015dd0:	231c      	movs	r3, #28
 8015dd2:	1a18      	subs	r0, r3, r0
 8015dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dd6:	1824      	adds	r4, r4, r0
 8015dd8:	181b      	adds	r3, r3, r0
 8015dda:	930a      	str	r3, [sp, #40]	; 0x28
 8015ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015dde:	181b      	adds	r3, r3, r0
 8015de0:	930b      	str	r3, [sp, #44]	; 0x2c
 8015de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	dd05      	ble.n	8015df4 <_dtoa_r+0x830>
 8015de8:	001a      	movs	r2, r3
 8015dea:	9903      	ldr	r1, [sp, #12]
 8015dec:	9802      	ldr	r0, [sp, #8]
 8015dee:	f001 f80f 	bl	8016e10 <__lshift>
 8015df2:	9003      	str	r0, [sp, #12]
 8015df4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	dd05      	ble.n	8015e06 <_dtoa_r+0x842>
 8015dfa:	001a      	movs	r2, r3
 8015dfc:	9904      	ldr	r1, [sp, #16]
 8015dfe:	9802      	ldr	r0, [sp, #8]
 8015e00:	f001 f806 	bl	8016e10 <__lshift>
 8015e04:	9004      	str	r0, [sp, #16]
 8015e06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d05e      	beq.n	8015eca <_dtoa_r+0x906>
 8015e0c:	9904      	ldr	r1, [sp, #16]
 8015e0e:	9803      	ldr	r0, [sp, #12]
 8015e10:	f001 f850 	bl	8016eb4 <__mcmp>
 8015e14:	2800      	cmp	r0, #0
 8015e16:	da58      	bge.n	8015eca <_dtoa_r+0x906>
 8015e18:	2300      	movs	r3, #0
 8015e1a:	220a      	movs	r2, #10
 8015e1c:	9903      	ldr	r1, [sp, #12]
 8015e1e:	9802      	ldr	r0, [sp, #8]
 8015e20:	f000 fe56 	bl	8016ad0 <__multadd>
 8015e24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e26:	3f01      	subs	r7, #1
 8015e28:	9003      	str	r0, [sp, #12]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d100      	bne.n	8015e30 <_dtoa_r+0x86c>
 8015e2e:	e190      	b.n	8016152 <_dtoa_r+0xb8e>
 8015e30:	2300      	movs	r3, #0
 8015e32:	0031      	movs	r1, r6
 8015e34:	220a      	movs	r2, #10
 8015e36:	9802      	ldr	r0, [sp, #8]
 8015e38:	f000 fe4a 	bl	8016ad0 <__multadd>
 8015e3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e3e:	0006      	movs	r6, r0
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	dd00      	ble.n	8015e46 <_dtoa_r+0x882>
 8015e44:	e088      	b.n	8015f58 <_dtoa_r+0x994>
 8015e46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015e48:	2b02      	cmp	r3, #2
 8015e4a:	dc00      	bgt.n	8015e4e <_dtoa_r+0x88a>
 8015e4c:	e084      	b.n	8015f58 <_dtoa_r+0x994>
 8015e4e:	e044      	b.n	8015eda <_dtoa_r+0x916>
 8015e50:	2336      	movs	r3, #54	; 0x36
 8015e52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015e54:	1a9b      	subs	r3, r3, r2
 8015e56:	e747      	b.n	8015ce8 <_dtoa_r+0x724>
 8015e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e5a:	1e5d      	subs	r5, r3, #1
 8015e5c:	9b04      	ldr	r3, [sp, #16]
 8015e5e:	42ab      	cmp	r3, r5
 8015e60:	db08      	blt.n	8015e74 <_dtoa_r+0x8b0>
 8015e62:	1b5d      	subs	r5, r3, r5
 8015e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	da0c      	bge.n	8015e84 <_dtoa_r+0x8c0>
 8015e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e6e:	1a9c      	subs	r4, r3, r2
 8015e70:	2300      	movs	r3, #0
 8015e72:	e73b      	b.n	8015cec <_dtoa_r+0x728>
 8015e74:	9b04      	ldr	r3, [sp, #16]
 8015e76:	9504      	str	r5, [sp, #16]
 8015e78:	1aea      	subs	r2, r5, r3
 8015e7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e7c:	2500      	movs	r5, #0
 8015e7e:	189b      	adds	r3, r3, r2
 8015e80:	9311      	str	r3, [sp, #68]	; 0x44
 8015e82:	e7ef      	b.n	8015e64 <_dtoa_r+0x8a0>
 8015e84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e88:	e730      	b.n	8015cec <_dtoa_r+0x728>
 8015e8a:	9d04      	ldr	r5, [sp, #16]
 8015e8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015e8e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8015e90:	e737      	b.n	8015d02 <_dtoa_r+0x73e>
 8015e92:	9a04      	ldr	r2, [sp, #16]
 8015e94:	e764      	b.n	8015d60 <_dtoa_r+0x79c>
 8015e96:	2500      	movs	r5, #0
 8015e98:	9b04      	ldr	r3, [sp, #16]
 8015e9a:	9a04      	ldr	r2, [sp, #16]
 8015e9c:	691b      	ldr	r3, [r3, #16]
 8015e9e:	9310      	str	r3, [sp, #64]	; 0x40
 8015ea0:	3303      	adds	r3, #3
 8015ea2:	009b      	lsls	r3, r3, #2
 8015ea4:	18d3      	adds	r3, r2, r3
 8015ea6:	6858      	ldr	r0, [r3, #4]
 8015ea8:	f000 fe8e 	bl	8016bc8 <__hi0bits>
 8015eac:	2320      	movs	r3, #32
 8015eae:	1a18      	subs	r0, r3, r0
 8015eb0:	e785      	b.n	8015dbe <_dtoa_r+0x7fa>
 8015eb2:	2b04      	cmp	r3, #4
 8015eb4:	d095      	beq.n	8015de2 <_dtoa_r+0x81e>
 8015eb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015eb8:	331c      	adds	r3, #28
 8015eba:	18d2      	adds	r2, r2, r3
 8015ebc:	920a      	str	r2, [sp, #40]	; 0x28
 8015ebe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015ec0:	18e4      	adds	r4, r4, r3
 8015ec2:	18d3      	adds	r3, r2, r3
 8015ec4:	e78c      	b.n	8015de0 <_dtoa_r+0x81c>
 8015ec6:	0003      	movs	r3, r0
 8015ec8:	e7f5      	b.n	8015eb6 <_dtoa_r+0x8f2>
 8015eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	dc3d      	bgt.n	8015f4c <_dtoa_r+0x988>
 8015ed0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015ed2:	2b02      	cmp	r3, #2
 8015ed4:	dd3a      	ble.n	8015f4c <_dtoa_r+0x988>
 8015ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ed8:	930c      	str	r3, [sp, #48]	; 0x30
 8015eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d10c      	bne.n	8015efa <_dtoa_r+0x936>
 8015ee0:	9904      	ldr	r1, [sp, #16]
 8015ee2:	2205      	movs	r2, #5
 8015ee4:	9802      	ldr	r0, [sp, #8]
 8015ee6:	f000 fdf3 	bl	8016ad0 <__multadd>
 8015eea:	9004      	str	r0, [sp, #16]
 8015eec:	0001      	movs	r1, r0
 8015eee:	9803      	ldr	r0, [sp, #12]
 8015ef0:	f000 ffe0 	bl	8016eb4 <__mcmp>
 8015ef4:	2800      	cmp	r0, #0
 8015ef6:	dd00      	ble.n	8015efa <_dtoa_r+0x936>
 8015ef8:	e5ad      	b.n	8015a56 <_dtoa_r+0x492>
 8015efa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015efc:	9d08      	ldr	r5, [sp, #32]
 8015efe:	43df      	mvns	r7, r3
 8015f00:	2300      	movs	r3, #0
 8015f02:	9309      	str	r3, [sp, #36]	; 0x24
 8015f04:	9904      	ldr	r1, [sp, #16]
 8015f06:	9802      	ldr	r0, [sp, #8]
 8015f08:	f000 fdd8 	bl	8016abc <_Bfree>
 8015f0c:	2e00      	cmp	r6, #0
 8015f0e:	d100      	bne.n	8015f12 <_dtoa_r+0x94e>
 8015f10:	e69b      	b.n	8015c4a <_dtoa_r+0x686>
 8015f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d005      	beq.n	8015f24 <_dtoa_r+0x960>
 8015f18:	42b3      	cmp	r3, r6
 8015f1a:	d003      	beq.n	8015f24 <_dtoa_r+0x960>
 8015f1c:	0019      	movs	r1, r3
 8015f1e:	9802      	ldr	r0, [sp, #8]
 8015f20:	f000 fdcc 	bl	8016abc <_Bfree>
 8015f24:	0031      	movs	r1, r6
 8015f26:	9802      	ldr	r0, [sp, #8]
 8015f28:	f000 fdc8 	bl	8016abc <_Bfree>
 8015f2c:	e68d      	b.n	8015c4a <_dtoa_r+0x686>
 8015f2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f30:	9304      	str	r3, [sp, #16]
 8015f32:	001e      	movs	r6, r3
 8015f34:	e7e1      	b.n	8015efa <_dtoa_r+0x936>
 8015f36:	2300      	movs	r3, #0
 8015f38:	e7fa      	b.n	8015f30 <_dtoa_r+0x96c>
 8015f3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f3c:	0037      	movs	r7, r6
 8015f3e:	9304      	str	r3, [sp, #16]
 8015f40:	001e      	movs	r6, r3
 8015f42:	e588      	b.n	8015a56 <_dtoa_r+0x492>
 8015f44:	40240000 	.word	0x40240000
 8015f48:	00000433 	.word	0x00000433
 8015f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d100      	bne.n	8015f54 <_dtoa_r+0x990>
 8015f52:	e0b2      	b.n	80160ba <_dtoa_r+0xaf6>
 8015f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f56:	930c      	str	r3, [sp, #48]	; 0x30
 8015f58:	2c00      	cmp	r4, #0
 8015f5a:	dd05      	ble.n	8015f68 <_dtoa_r+0x9a4>
 8015f5c:	0031      	movs	r1, r6
 8015f5e:	0022      	movs	r2, r4
 8015f60:	9802      	ldr	r0, [sp, #8]
 8015f62:	f000 ff55 	bl	8016e10 <__lshift>
 8015f66:	0006      	movs	r6, r0
 8015f68:	0030      	movs	r0, r6
 8015f6a:	2d00      	cmp	r5, #0
 8015f6c:	d011      	beq.n	8015f92 <_dtoa_r+0x9ce>
 8015f6e:	6871      	ldr	r1, [r6, #4]
 8015f70:	9802      	ldr	r0, [sp, #8]
 8015f72:	f000 fd7b 	bl	8016a6c <_Balloc>
 8015f76:	0031      	movs	r1, r6
 8015f78:	0004      	movs	r4, r0
 8015f7a:	6933      	ldr	r3, [r6, #16]
 8015f7c:	310c      	adds	r1, #12
 8015f7e:	1c9a      	adds	r2, r3, #2
 8015f80:	0092      	lsls	r2, r2, #2
 8015f82:	300c      	adds	r0, #12
 8015f84:	f7fc fe8b 	bl	8012c9e <memcpy>
 8015f88:	2201      	movs	r2, #1
 8015f8a:	0021      	movs	r1, r4
 8015f8c:	9802      	ldr	r0, [sp, #8]
 8015f8e:	f000 ff3f 	bl	8016e10 <__lshift>
 8015f92:	9609      	str	r6, [sp, #36]	; 0x24
 8015f94:	0006      	movs	r6, r0
 8015f96:	9b08      	ldr	r3, [sp, #32]
 8015f98:	930a      	str	r3, [sp, #40]	; 0x28
 8015f9a:	9904      	ldr	r1, [sp, #16]
 8015f9c:	9803      	ldr	r0, [sp, #12]
 8015f9e:	f7ff fa8b 	bl	80154b8 <quorem>
 8015fa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015fa4:	900d      	str	r0, [sp, #52]	; 0x34
 8015fa6:	0004      	movs	r4, r0
 8015fa8:	9803      	ldr	r0, [sp, #12]
 8015faa:	f000 ff83 	bl	8016eb4 <__mcmp>
 8015fae:	0032      	movs	r2, r6
 8015fb0:	9010      	str	r0, [sp, #64]	; 0x40
 8015fb2:	9904      	ldr	r1, [sp, #16]
 8015fb4:	9802      	ldr	r0, [sp, #8]
 8015fb6:	f000 ff97 	bl	8016ee8 <__mdiff>
 8015fba:	2301      	movs	r3, #1
 8015fbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8015fbe:	68c3      	ldr	r3, [r0, #12]
 8015fc0:	3430      	adds	r4, #48	; 0x30
 8015fc2:	0005      	movs	r5, r0
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d104      	bne.n	8015fd2 <_dtoa_r+0xa0e>
 8015fc8:	0001      	movs	r1, r0
 8015fca:	9803      	ldr	r0, [sp, #12]
 8015fcc:	f000 ff72 	bl	8016eb4 <__mcmp>
 8015fd0:	900b      	str	r0, [sp, #44]	; 0x2c
 8015fd2:	0029      	movs	r1, r5
 8015fd4:	9802      	ldr	r0, [sp, #8]
 8015fd6:	f000 fd71 	bl	8016abc <_Bfree>
 8015fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015fdc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015fde:	4313      	orrs	r3, r2
 8015fe0:	d10e      	bne.n	8016000 <_dtoa_r+0xa3c>
 8015fe2:	9a06      	ldr	r2, [sp, #24]
 8015fe4:	3301      	adds	r3, #1
 8015fe6:	4213      	tst	r3, r2
 8015fe8:	d10a      	bne.n	8016000 <_dtoa_r+0xa3c>
 8015fea:	2c39      	cmp	r4, #57	; 0x39
 8015fec:	d026      	beq.n	801603c <_dtoa_r+0xa78>
 8015fee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	dd01      	ble.n	8015ff8 <_dtoa_r+0xa34>
 8015ff4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015ff6:	3431      	adds	r4, #49	; 0x31
 8015ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ffa:	1c5d      	adds	r5, r3, #1
 8015ffc:	701c      	strb	r4, [r3, #0]
 8015ffe:	e781      	b.n	8015f04 <_dtoa_r+0x940>
 8016000:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016002:	2b00      	cmp	r3, #0
 8016004:	db07      	blt.n	8016016 <_dtoa_r+0xa52>
 8016006:	001d      	movs	r5, r3
 8016008:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801600a:	431d      	orrs	r5, r3
 801600c:	d122      	bne.n	8016054 <_dtoa_r+0xa90>
 801600e:	2301      	movs	r3, #1
 8016010:	9a06      	ldr	r2, [sp, #24]
 8016012:	4213      	tst	r3, r2
 8016014:	d11e      	bne.n	8016054 <_dtoa_r+0xa90>
 8016016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016018:	2b00      	cmp	r3, #0
 801601a:	dded      	ble.n	8015ff8 <_dtoa_r+0xa34>
 801601c:	9903      	ldr	r1, [sp, #12]
 801601e:	2201      	movs	r2, #1
 8016020:	9802      	ldr	r0, [sp, #8]
 8016022:	f000 fef5 	bl	8016e10 <__lshift>
 8016026:	9904      	ldr	r1, [sp, #16]
 8016028:	9003      	str	r0, [sp, #12]
 801602a:	f000 ff43 	bl	8016eb4 <__mcmp>
 801602e:	2800      	cmp	r0, #0
 8016030:	dc02      	bgt.n	8016038 <_dtoa_r+0xa74>
 8016032:	d1e1      	bne.n	8015ff8 <_dtoa_r+0xa34>
 8016034:	07e3      	lsls	r3, r4, #31
 8016036:	d5df      	bpl.n	8015ff8 <_dtoa_r+0xa34>
 8016038:	2c39      	cmp	r4, #57	; 0x39
 801603a:	d1db      	bne.n	8015ff4 <_dtoa_r+0xa30>
 801603c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801603e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016040:	1c5d      	adds	r5, r3, #1
 8016042:	2339      	movs	r3, #57	; 0x39
 8016044:	7013      	strb	r3, [r2, #0]
 8016046:	1e6b      	subs	r3, r5, #1
 8016048:	781a      	ldrb	r2, [r3, #0]
 801604a:	2a39      	cmp	r2, #57	; 0x39
 801604c:	d067      	beq.n	801611e <_dtoa_r+0xb5a>
 801604e:	3201      	adds	r2, #1
 8016050:	701a      	strb	r2, [r3, #0]
 8016052:	e757      	b.n	8015f04 <_dtoa_r+0x940>
 8016054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016056:	1c5d      	adds	r5, r3, #1
 8016058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801605a:	2b00      	cmp	r3, #0
 801605c:	dd04      	ble.n	8016068 <_dtoa_r+0xaa4>
 801605e:	2c39      	cmp	r4, #57	; 0x39
 8016060:	d0ec      	beq.n	801603c <_dtoa_r+0xa78>
 8016062:	3401      	adds	r4, #1
 8016064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016066:	e7c9      	b.n	8015ffc <_dtoa_r+0xa38>
 8016068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801606a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801606c:	701c      	strb	r4, [r3, #0]
 801606e:	9b08      	ldr	r3, [sp, #32]
 8016070:	1aeb      	subs	r3, r5, r3
 8016072:	4293      	cmp	r3, r2
 8016074:	d03e      	beq.n	80160f4 <_dtoa_r+0xb30>
 8016076:	2300      	movs	r3, #0
 8016078:	220a      	movs	r2, #10
 801607a:	9903      	ldr	r1, [sp, #12]
 801607c:	9802      	ldr	r0, [sp, #8]
 801607e:	f000 fd27 	bl	8016ad0 <__multadd>
 8016082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016084:	9003      	str	r0, [sp, #12]
 8016086:	42b3      	cmp	r3, r6
 8016088:	d109      	bne.n	801609e <_dtoa_r+0xada>
 801608a:	2300      	movs	r3, #0
 801608c:	220a      	movs	r2, #10
 801608e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016090:	9802      	ldr	r0, [sp, #8]
 8016092:	f000 fd1d 	bl	8016ad0 <__multadd>
 8016096:	9009      	str	r0, [sp, #36]	; 0x24
 8016098:	0006      	movs	r6, r0
 801609a:	950a      	str	r5, [sp, #40]	; 0x28
 801609c:	e77d      	b.n	8015f9a <_dtoa_r+0x9d6>
 801609e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80160a0:	2300      	movs	r3, #0
 80160a2:	220a      	movs	r2, #10
 80160a4:	9802      	ldr	r0, [sp, #8]
 80160a6:	f000 fd13 	bl	8016ad0 <__multadd>
 80160aa:	2300      	movs	r3, #0
 80160ac:	9009      	str	r0, [sp, #36]	; 0x24
 80160ae:	220a      	movs	r2, #10
 80160b0:	0031      	movs	r1, r6
 80160b2:	9802      	ldr	r0, [sp, #8]
 80160b4:	f000 fd0c 	bl	8016ad0 <__multadd>
 80160b8:	e7ee      	b.n	8016098 <_dtoa_r+0xad4>
 80160ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160bc:	930c      	str	r3, [sp, #48]	; 0x30
 80160be:	9b08      	ldr	r3, [sp, #32]
 80160c0:	9306      	str	r3, [sp, #24]
 80160c2:	9904      	ldr	r1, [sp, #16]
 80160c4:	9803      	ldr	r0, [sp, #12]
 80160c6:	f7ff f9f7 	bl	80154b8 <quorem>
 80160ca:	9b06      	ldr	r3, [sp, #24]
 80160cc:	3030      	adds	r0, #48	; 0x30
 80160ce:	1c5d      	adds	r5, r3, #1
 80160d0:	7018      	strb	r0, [r3, #0]
 80160d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80160d4:	9b08      	ldr	r3, [sp, #32]
 80160d6:	0004      	movs	r4, r0
 80160d8:	1aeb      	subs	r3, r5, r3
 80160da:	429a      	cmp	r2, r3
 80160dc:	dd08      	ble.n	80160f0 <_dtoa_r+0xb2c>
 80160de:	2300      	movs	r3, #0
 80160e0:	220a      	movs	r2, #10
 80160e2:	9903      	ldr	r1, [sp, #12]
 80160e4:	9802      	ldr	r0, [sp, #8]
 80160e6:	f000 fcf3 	bl	8016ad0 <__multadd>
 80160ea:	9506      	str	r5, [sp, #24]
 80160ec:	9003      	str	r0, [sp, #12]
 80160ee:	e7e8      	b.n	80160c2 <_dtoa_r+0xafe>
 80160f0:	2300      	movs	r3, #0
 80160f2:	9309      	str	r3, [sp, #36]	; 0x24
 80160f4:	9903      	ldr	r1, [sp, #12]
 80160f6:	2201      	movs	r2, #1
 80160f8:	9802      	ldr	r0, [sp, #8]
 80160fa:	f000 fe89 	bl	8016e10 <__lshift>
 80160fe:	9904      	ldr	r1, [sp, #16]
 8016100:	9003      	str	r0, [sp, #12]
 8016102:	f000 fed7 	bl	8016eb4 <__mcmp>
 8016106:	2800      	cmp	r0, #0
 8016108:	dc9d      	bgt.n	8016046 <_dtoa_r+0xa82>
 801610a:	d101      	bne.n	8016110 <_dtoa_r+0xb4c>
 801610c:	07e3      	lsls	r3, r4, #31
 801610e:	d49a      	bmi.n	8016046 <_dtoa_r+0xa82>
 8016110:	1e6b      	subs	r3, r5, #1
 8016112:	781a      	ldrb	r2, [r3, #0]
 8016114:	2a30      	cmp	r2, #48	; 0x30
 8016116:	d000      	beq.n	801611a <_dtoa_r+0xb56>
 8016118:	e6f4      	b.n	8015f04 <_dtoa_r+0x940>
 801611a:	001d      	movs	r5, r3
 801611c:	e7f8      	b.n	8016110 <_dtoa_r+0xb4c>
 801611e:	9a08      	ldr	r2, [sp, #32]
 8016120:	429a      	cmp	r2, r3
 8016122:	d103      	bne.n	801612c <_dtoa_r+0xb68>
 8016124:	2331      	movs	r3, #49	; 0x31
 8016126:	3701      	adds	r7, #1
 8016128:	7013      	strb	r3, [r2, #0]
 801612a:	e6eb      	b.n	8015f04 <_dtoa_r+0x940>
 801612c:	001d      	movs	r5, r3
 801612e:	e78a      	b.n	8016046 <_dtoa_r+0xa82>
 8016130:	4b0b      	ldr	r3, [pc, #44]	; (8016160 <_dtoa_r+0xb9c>)
 8016132:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016134:	9308      	str	r3, [sp, #32]
 8016136:	4b0b      	ldr	r3, [pc, #44]	; (8016164 <_dtoa_r+0xba0>)
 8016138:	2a00      	cmp	r2, #0
 801613a:	d001      	beq.n	8016140 <_dtoa_r+0xb7c>
 801613c:	f7ff fa75 	bl	801562a <_dtoa_r+0x66>
 8016140:	f7ff fa75 	bl	801562e <_dtoa_r+0x6a>
 8016144:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016146:	2b01      	cmp	r3, #1
 8016148:	dc00      	bgt.n	801614c <_dtoa_r+0xb88>
 801614a:	e621      	b.n	8015d90 <_dtoa_r+0x7cc>
 801614c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801614e:	2001      	movs	r0, #1
 8016150:	e635      	b.n	8015dbe <_dtoa_r+0x7fa>
 8016152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016154:	2b00      	cmp	r3, #0
 8016156:	dcb2      	bgt.n	80160be <_dtoa_r+0xafa>
 8016158:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801615a:	2b02      	cmp	r3, #2
 801615c:	ddaf      	ble.n	80160be <_dtoa_r+0xafa>
 801615e:	e6bc      	b.n	8015eda <_dtoa_r+0x916>
 8016160:	0801a4f5 	.word	0x0801a4f5
 8016164:	0801a4fd 	.word	0x0801a4fd

08016168 <__errno>:
 8016168:	4b01      	ldr	r3, [pc, #4]	; (8016170 <__errno+0x8>)
 801616a:	6818      	ldr	r0, [r3, #0]
 801616c:	4770      	bx	lr
 801616e:	46c0      	nop			; (mov r8, r8)
 8016170:	200000c8 	.word	0x200000c8

08016174 <__libc_fini_array>:
 8016174:	b570      	push	{r4, r5, r6, lr}
 8016176:	4d07      	ldr	r5, [pc, #28]	; (8016194 <__libc_fini_array+0x20>)
 8016178:	4c07      	ldr	r4, [pc, #28]	; (8016198 <__libc_fini_array+0x24>)
 801617a:	1b64      	subs	r4, r4, r5
 801617c:	10a4      	asrs	r4, r4, #2
 801617e:	2c00      	cmp	r4, #0
 8016180:	d102      	bne.n	8016188 <__libc_fini_array+0x14>
 8016182:	f001 f95b 	bl	801743c <_fini>
 8016186:	bd70      	pop	{r4, r5, r6, pc}
 8016188:	3c01      	subs	r4, #1
 801618a:	00a3      	lsls	r3, r4, #2
 801618c:	58eb      	ldr	r3, [r5, r3]
 801618e:	4798      	blx	r3
 8016190:	e7f5      	b.n	801617e <__libc_fini_array+0xa>
 8016192:	46c0      	nop			; (mov r8, r8)
 8016194:	0801a614 	.word	0x0801a614
 8016198:	0801a618 	.word	0x0801a618

0801619c <_malloc_trim_r>:
 801619c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801619e:	0005      	movs	r5, r0
 80161a0:	2008      	movs	r0, #8
 80161a2:	000c      	movs	r4, r1
 80161a4:	f7ff f95c 	bl	8015460 <sysconf>
 80161a8:	0007      	movs	r7, r0
 80161aa:	0028      	movs	r0, r5
 80161ac:	f7fc fd88 	bl	8012cc0 <__malloc_lock>
 80161b0:	2203      	movs	r2, #3
 80161b2:	4e21      	ldr	r6, [pc, #132]	; (8016238 <_malloc_trim_r+0x9c>)
 80161b4:	0039      	movs	r1, r7
 80161b6:	68b3      	ldr	r3, [r6, #8]
 80161b8:	685b      	ldr	r3, [r3, #4]
 80161ba:	4393      	bics	r3, r2
 80161bc:	1b18      	subs	r0, r3, r4
 80161be:	3811      	subs	r0, #17
 80161c0:	19c0      	adds	r0, r0, r7
 80161c2:	9301      	str	r3, [sp, #4]
 80161c4:	f7e9 ffc4 	bl	8000150 <__udivsi3>
 80161c8:	1e44      	subs	r4, r0, #1
 80161ca:	437c      	muls	r4, r7
 80161cc:	42a7      	cmp	r7, r4
 80161ce:	dd04      	ble.n	80161da <_malloc_trim_r+0x3e>
 80161d0:	0028      	movs	r0, r5
 80161d2:	f7fc fd7d 	bl	8012cd0 <__malloc_unlock>
 80161d6:	2000      	movs	r0, #0
 80161d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80161da:	2100      	movs	r1, #0
 80161dc:	0028      	movs	r0, r5
 80161de:	f7fc ff4f 	bl	8013080 <_sbrk_r>
 80161e2:	68b3      	ldr	r3, [r6, #8]
 80161e4:	9a01      	ldr	r2, [sp, #4]
 80161e6:	189b      	adds	r3, r3, r2
 80161e8:	4298      	cmp	r0, r3
 80161ea:	d1f1      	bne.n	80161d0 <_malloc_trim_r+0x34>
 80161ec:	4261      	negs	r1, r4
 80161ee:	0028      	movs	r0, r5
 80161f0:	f7fc ff46 	bl	8013080 <_sbrk_r>
 80161f4:	1c43      	adds	r3, r0, #1
 80161f6:	d110      	bne.n	801621a <_malloc_trim_r+0x7e>
 80161f8:	2100      	movs	r1, #0
 80161fa:	0028      	movs	r0, r5
 80161fc:	f7fc ff40 	bl	8013080 <_sbrk_r>
 8016200:	68b2      	ldr	r2, [r6, #8]
 8016202:	1a81      	subs	r1, r0, r2
 8016204:	290f      	cmp	r1, #15
 8016206:	dde3      	ble.n	80161d0 <_malloc_trim_r+0x34>
 8016208:	4b0c      	ldr	r3, [pc, #48]	; (801623c <_malloc_trim_r+0xa0>)
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	1ac0      	subs	r0, r0, r3
 801620e:	4b0c      	ldr	r3, [pc, #48]	; (8016240 <_malloc_trim_r+0xa4>)
 8016210:	6018      	str	r0, [r3, #0]
 8016212:	2301      	movs	r3, #1
 8016214:	430b      	orrs	r3, r1
 8016216:	6053      	str	r3, [r2, #4]
 8016218:	e7da      	b.n	80161d0 <_malloc_trim_r+0x34>
 801621a:	68b2      	ldr	r2, [r6, #8]
 801621c:	2601      	movs	r6, #1
 801621e:	9b01      	ldr	r3, [sp, #4]
 8016220:	0028      	movs	r0, r5
 8016222:	1b1b      	subs	r3, r3, r4
 8016224:	4333      	orrs	r3, r6
 8016226:	6053      	str	r3, [r2, #4]
 8016228:	4b05      	ldr	r3, [pc, #20]	; (8016240 <_malloc_trim_r+0xa4>)
 801622a:	681a      	ldr	r2, [r3, #0]
 801622c:	1b14      	subs	r4, r2, r4
 801622e:	601c      	str	r4, [r3, #0]
 8016230:	f7fc fd4e 	bl	8012cd0 <__malloc_unlock>
 8016234:	0030      	movs	r0, r6
 8016236:	e7cf      	b.n	80161d8 <_malloc_trim_r+0x3c>
 8016238:	20000664 	.word	0x20000664
 801623c:	20000a6c 	.word	0x20000a6c
 8016240:	20006dec 	.word	0x20006dec

08016244 <_free_r>:
 8016244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016246:	1e0d      	subs	r5, r1, #0
 8016248:	9001      	str	r0, [sp, #4]
 801624a:	d02d      	beq.n	80162a8 <_free_r+0x64>
 801624c:	f7fc fd38 	bl	8012cc0 <__malloc_lock>
 8016250:	2301      	movs	r3, #1
 8016252:	0029      	movs	r1, r5
 8016254:	469c      	mov	ip, r3
 8016256:	3908      	subs	r1, #8
 8016258:	684f      	ldr	r7, [r1, #4]
 801625a:	4662      	mov	r2, ip
 801625c:	003b      	movs	r3, r7
 801625e:	4666      	mov	r6, ip
 8016260:	4393      	bics	r3, r2
 8016262:	18c8      	adds	r0, r1, r3
 8016264:	6845      	ldr	r5, [r0, #4]
 8016266:	3202      	adds	r2, #2
 8016268:	4395      	bics	r5, r2
 801626a:	4a4a      	ldr	r2, [pc, #296]	; (8016394 <_free_r+0x150>)
 801626c:	4037      	ands	r7, r6
 801626e:	6896      	ldr	r6, [r2, #8]
 8016270:	4286      	cmp	r6, r0
 8016272:	d11a      	bne.n	80162aa <_free_r+0x66>
 8016274:	195b      	adds	r3, r3, r5
 8016276:	2f00      	cmp	r7, #0
 8016278:	d106      	bne.n	8016288 <_free_r+0x44>
 801627a:	6808      	ldr	r0, [r1, #0]
 801627c:	1a09      	subs	r1, r1, r0
 801627e:	688d      	ldr	r5, [r1, #8]
 8016280:	181b      	adds	r3, r3, r0
 8016282:	68c8      	ldr	r0, [r1, #12]
 8016284:	60e8      	str	r0, [r5, #12]
 8016286:	6085      	str	r5, [r0, #8]
 8016288:	2001      	movs	r0, #1
 801628a:	4318      	orrs	r0, r3
 801628c:	6048      	str	r0, [r1, #4]
 801628e:	6091      	str	r1, [r2, #8]
 8016290:	4a41      	ldr	r2, [pc, #260]	; (8016398 <_free_r+0x154>)
 8016292:	6812      	ldr	r2, [r2, #0]
 8016294:	429a      	cmp	r2, r3
 8016296:	d804      	bhi.n	80162a2 <_free_r+0x5e>
 8016298:	4b40      	ldr	r3, [pc, #256]	; (801639c <_free_r+0x158>)
 801629a:	9801      	ldr	r0, [sp, #4]
 801629c:	6819      	ldr	r1, [r3, #0]
 801629e:	f7ff ff7d 	bl	801619c <_malloc_trim_r>
 80162a2:	9801      	ldr	r0, [sp, #4]
 80162a4:	f7fc fd14 	bl	8012cd0 <__malloc_unlock>
 80162a8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80162aa:	2600      	movs	r6, #0
 80162ac:	6045      	str	r5, [r0, #4]
 80162ae:	42b7      	cmp	r7, r6
 80162b0:	d109      	bne.n	80162c6 <_free_r+0x82>
 80162b2:	680f      	ldr	r7, [r1, #0]
 80162b4:	4c3a      	ldr	r4, [pc, #232]	; (80163a0 <_free_r+0x15c>)
 80162b6:	1bc9      	subs	r1, r1, r7
 80162b8:	19db      	adds	r3, r3, r7
 80162ba:	688f      	ldr	r7, [r1, #8]
 80162bc:	42a7      	cmp	r7, r4
 80162be:	d02b      	beq.n	8016318 <_free_r+0xd4>
 80162c0:	68cc      	ldr	r4, [r1, #12]
 80162c2:	60fc      	str	r4, [r7, #12]
 80162c4:	60a7      	str	r7, [r4, #8]
 80162c6:	1947      	adds	r7, r0, r5
 80162c8:	687c      	ldr	r4, [r7, #4]
 80162ca:	2701      	movs	r7, #1
 80162cc:	423c      	tst	r4, r7
 80162ce:	d10b      	bne.n	80162e8 <_free_r+0xa4>
 80162d0:	195b      	adds	r3, r3, r5
 80162d2:	6885      	ldr	r5, [r0, #8]
 80162d4:	2e00      	cmp	r6, #0
 80162d6:	d121      	bne.n	801631c <_free_r+0xd8>
 80162d8:	4c31      	ldr	r4, [pc, #196]	; (80163a0 <_free_r+0x15c>)
 80162da:	42a5      	cmp	r5, r4
 80162dc:	d11e      	bne.n	801631c <_free_r+0xd8>
 80162de:	003e      	movs	r6, r7
 80162e0:	6151      	str	r1, [r2, #20]
 80162e2:	6111      	str	r1, [r2, #16]
 80162e4:	60cd      	str	r5, [r1, #12]
 80162e6:	608d      	str	r5, [r1, #8]
 80162e8:	2001      	movs	r0, #1
 80162ea:	0005      	movs	r5, r0
 80162ec:	431d      	orrs	r5, r3
 80162ee:	604d      	str	r5, [r1, #4]
 80162f0:	50cb      	str	r3, [r1, r3]
 80162f2:	2e00      	cmp	r6, #0
 80162f4:	d1d5      	bne.n	80162a2 <_free_r+0x5e>
 80162f6:	4d2b      	ldr	r5, [pc, #172]	; (80163a4 <_free_r+0x160>)
 80162f8:	42ab      	cmp	r3, r5
 80162fa:	d813      	bhi.n	8016324 <_free_r+0xe0>
 80162fc:	08db      	lsrs	r3, r3, #3
 80162fe:	109d      	asrs	r5, r3, #2
 8016300:	40a8      	lsls	r0, r5
 8016302:	6854      	ldr	r4, [r2, #4]
 8016304:	00db      	lsls	r3, r3, #3
 8016306:	4320      	orrs	r0, r4
 8016308:	6050      	str	r0, [r2, #4]
 801630a:	189a      	adds	r2, r3, r2
 801630c:	6893      	ldr	r3, [r2, #8]
 801630e:	60ca      	str	r2, [r1, #12]
 8016310:	608b      	str	r3, [r1, #8]
 8016312:	6091      	str	r1, [r2, #8]
 8016314:	60d9      	str	r1, [r3, #12]
 8016316:	e7c4      	b.n	80162a2 <_free_r+0x5e>
 8016318:	4666      	mov	r6, ip
 801631a:	e7d4      	b.n	80162c6 <_free_r+0x82>
 801631c:	68c0      	ldr	r0, [r0, #12]
 801631e:	60e8      	str	r0, [r5, #12]
 8016320:	6085      	str	r5, [r0, #8]
 8016322:	e7e1      	b.n	80162e8 <_free_r+0xa4>
 8016324:	0a5d      	lsrs	r5, r3, #9
 8016326:	2d04      	cmp	r5, #4
 8016328:	d812      	bhi.n	8016350 <_free_r+0x10c>
 801632a:	0998      	lsrs	r0, r3, #6
 801632c:	3038      	adds	r0, #56	; 0x38
 801632e:	00c6      	lsls	r6, r0, #3
 8016330:	18b6      	adds	r6, r6, r2
 8016332:	68b5      	ldr	r5, [r6, #8]
 8016334:	2703      	movs	r7, #3
 8016336:	42ae      	cmp	r6, r5
 8016338:	d125      	bne.n	8016386 <_free_r+0x142>
 801633a:	2301      	movs	r3, #1
 801633c:	1080      	asrs	r0, r0, #2
 801633e:	4083      	lsls	r3, r0
 8016340:	6850      	ldr	r0, [r2, #4]
 8016342:	4303      	orrs	r3, r0
 8016344:	6053      	str	r3, [r2, #4]
 8016346:	60ce      	str	r6, [r1, #12]
 8016348:	608d      	str	r5, [r1, #8]
 801634a:	60b1      	str	r1, [r6, #8]
 801634c:	60e9      	str	r1, [r5, #12]
 801634e:	e7a8      	b.n	80162a2 <_free_r+0x5e>
 8016350:	2d14      	cmp	r5, #20
 8016352:	d802      	bhi.n	801635a <_free_r+0x116>
 8016354:	0028      	movs	r0, r5
 8016356:	305b      	adds	r0, #91	; 0x5b
 8016358:	e7e9      	b.n	801632e <_free_r+0xea>
 801635a:	2d54      	cmp	r5, #84	; 0x54
 801635c:	d802      	bhi.n	8016364 <_free_r+0x120>
 801635e:	0b18      	lsrs	r0, r3, #12
 8016360:	306e      	adds	r0, #110	; 0x6e
 8016362:	e7e4      	b.n	801632e <_free_r+0xea>
 8016364:	20aa      	movs	r0, #170	; 0xaa
 8016366:	0040      	lsls	r0, r0, #1
 8016368:	4285      	cmp	r5, r0
 801636a:	d802      	bhi.n	8016372 <_free_r+0x12e>
 801636c:	0bd8      	lsrs	r0, r3, #15
 801636e:	3077      	adds	r0, #119	; 0x77
 8016370:	e7dd      	b.n	801632e <_free_r+0xea>
 8016372:	4e0d      	ldr	r6, [pc, #52]	; (80163a8 <_free_r+0x164>)
 8016374:	207e      	movs	r0, #126	; 0x7e
 8016376:	42b5      	cmp	r5, r6
 8016378:	d8d9      	bhi.n	801632e <_free_r+0xea>
 801637a:	0c98      	lsrs	r0, r3, #18
 801637c:	307c      	adds	r0, #124	; 0x7c
 801637e:	e7d6      	b.n	801632e <_free_r+0xea>
 8016380:	68ad      	ldr	r5, [r5, #8]
 8016382:	42ae      	cmp	r6, r5
 8016384:	d003      	beq.n	801638e <_free_r+0x14a>
 8016386:	686a      	ldr	r2, [r5, #4]
 8016388:	43ba      	bics	r2, r7
 801638a:	429a      	cmp	r2, r3
 801638c:	d8f8      	bhi.n	8016380 <_free_r+0x13c>
 801638e:	68ee      	ldr	r6, [r5, #12]
 8016390:	e7d9      	b.n	8016346 <_free_r+0x102>
 8016392:	46c0      	nop			; (mov r8, r8)
 8016394:	20000664 	.word	0x20000664
 8016398:	20000a70 	.word	0x20000a70
 801639c:	20006e1c 	.word	0x20006e1c
 80163a0:	2000066c 	.word	0x2000066c
 80163a4:	000001ff 	.word	0x000001ff
 80163a8:	00000554 	.word	0x00000554

080163ac <rshift>:
 80163ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163ae:	0004      	movs	r4, r0
 80163b0:	6905      	ldr	r5, [r0, #16]
 80163b2:	3414      	adds	r4, #20
 80163b4:	114b      	asrs	r3, r1, #5
 80163b6:	0026      	movs	r6, r4
 80163b8:	429d      	cmp	r5, r3
 80163ba:	dd14      	ble.n	80163e6 <rshift+0x3a>
 80163bc:	221f      	movs	r2, #31
 80163be:	00ad      	lsls	r5, r5, #2
 80163c0:	009b      	lsls	r3, r3, #2
 80163c2:	4011      	ands	r1, r2
 80163c4:	1965      	adds	r5, r4, r5
 80163c6:	18e3      	adds	r3, r4, r3
 80163c8:	0022      	movs	r2, r4
 80163ca:	2900      	cmp	r1, #0
 80163cc:	d01e      	beq.n	801640c <rshift+0x60>
 80163ce:	cb04      	ldmia	r3!, {r2}
 80163d0:	2720      	movs	r7, #32
 80163d2:	40ca      	lsrs	r2, r1
 80163d4:	46a4      	mov	ip, r4
 80163d6:	1a7f      	subs	r7, r7, r1
 80163d8:	4666      	mov	r6, ip
 80163da:	429d      	cmp	r5, r3
 80163dc:	d80b      	bhi.n	80163f6 <rshift+0x4a>
 80163de:	6032      	str	r2, [r6, #0]
 80163e0:	2a00      	cmp	r2, #0
 80163e2:	d000      	beq.n	80163e6 <rshift+0x3a>
 80163e4:	3604      	adds	r6, #4
 80163e6:	1b33      	subs	r3, r6, r4
 80163e8:	109b      	asrs	r3, r3, #2
 80163ea:	6103      	str	r3, [r0, #16]
 80163ec:	42a6      	cmp	r6, r4
 80163ee:	d101      	bne.n	80163f4 <rshift+0x48>
 80163f0:	2300      	movs	r3, #0
 80163f2:	6143      	str	r3, [r0, #20]
 80163f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163f6:	681e      	ldr	r6, [r3, #0]
 80163f8:	40be      	lsls	r6, r7
 80163fa:	4332      	orrs	r2, r6
 80163fc:	4666      	mov	r6, ip
 80163fe:	c604      	stmia	r6!, {r2}
 8016400:	cb04      	ldmia	r3!, {r2}
 8016402:	46b4      	mov	ip, r6
 8016404:	40ca      	lsrs	r2, r1
 8016406:	e7e7      	b.n	80163d8 <rshift+0x2c>
 8016408:	cb02      	ldmia	r3!, {r1}
 801640a:	c202      	stmia	r2!, {r1}
 801640c:	0016      	movs	r6, r2
 801640e:	429d      	cmp	r5, r3
 8016410:	d8fa      	bhi.n	8016408 <rshift+0x5c>
 8016412:	e7e8      	b.n	80163e6 <rshift+0x3a>

08016414 <__hexdig_fun>:
 8016414:	0003      	movs	r3, r0
 8016416:	3b30      	subs	r3, #48	; 0x30
 8016418:	2b09      	cmp	r3, #9
 801641a:	d803      	bhi.n	8016424 <__hexdig_fun+0x10>
 801641c:	3820      	subs	r0, #32
 801641e:	b2c3      	uxtb	r3, r0
 8016420:	0018      	movs	r0, r3
 8016422:	4770      	bx	lr
 8016424:	0003      	movs	r3, r0
 8016426:	3b61      	subs	r3, #97	; 0x61
 8016428:	2b05      	cmp	r3, #5
 801642a:	d801      	bhi.n	8016430 <__hexdig_fun+0x1c>
 801642c:	3847      	subs	r0, #71	; 0x47
 801642e:	e7f6      	b.n	801641e <__hexdig_fun+0xa>
 8016430:	0002      	movs	r2, r0
 8016432:	3a41      	subs	r2, #65	; 0x41
 8016434:	2300      	movs	r3, #0
 8016436:	2a05      	cmp	r2, #5
 8016438:	d8f2      	bhi.n	8016420 <__hexdig_fun+0xc>
 801643a:	3827      	subs	r0, #39	; 0x27
 801643c:	e7ef      	b.n	801641e <__hexdig_fun+0xa>

0801643e <__gethex>:
 801643e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016440:	b08d      	sub	sp, #52	; 0x34
 8016442:	9005      	str	r0, [sp, #20]
 8016444:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016446:	9109      	str	r1, [sp, #36]	; 0x24
 8016448:	9202      	str	r2, [sp, #8]
 801644a:	930a      	str	r3, [sp, #40]	; 0x28
 801644c:	f000 fadf 	bl	8016a0e <__localeconv_l>
 8016450:	6803      	ldr	r3, [r0, #0]
 8016452:	0018      	movs	r0, r3
 8016454:	9307      	str	r3, [sp, #28]
 8016456:	f7e9 fe5f 	bl	8000118 <strlen>
 801645a:	2202      	movs	r2, #2
 801645c:	9b07      	ldr	r3, [sp, #28]
 801645e:	4252      	negs	r2, r2
 8016460:	181b      	adds	r3, r3, r0
 8016462:	3b01      	subs	r3, #1
 8016464:	781b      	ldrb	r3, [r3, #0]
 8016466:	9004      	str	r0, [sp, #16]
 8016468:	930b      	str	r3, [sp, #44]	; 0x2c
 801646a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801646c:	6819      	ldr	r1, [r3, #0]
 801646e:	1c8b      	adds	r3, r1, #2
 8016470:	1a52      	subs	r2, r2, r1
 8016472:	18d1      	adds	r1, r2, r3
 8016474:	9301      	str	r3, [sp, #4]
 8016476:	9108      	str	r1, [sp, #32]
 8016478:	9901      	ldr	r1, [sp, #4]
 801647a:	3301      	adds	r3, #1
 801647c:	7808      	ldrb	r0, [r1, #0]
 801647e:	2830      	cmp	r0, #48	; 0x30
 8016480:	d0f7      	beq.n	8016472 <__gethex+0x34>
 8016482:	f7ff ffc7 	bl	8016414 <__hexdig_fun>
 8016486:	1e07      	subs	r7, r0, #0
 8016488:	d000      	beq.n	801648c <__gethex+0x4e>
 801648a:	e06f      	b.n	801656c <__gethex+0x12e>
 801648c:	9a04      	ldr	r2, [sp, #16]
 801648e:	9907      	ldr	r1, [sp, #28]
 8016490:	9801      	ldr	r0, [sp, #4]
 8016492:	f7fc fe4b 	bl	801312c <strncmp>
 8016496:	2800      	cmp	r0, #0
 8016498:	d000      	beq.n	801649c <__gethex+0x5e>
 801649a:	e06d      	b.n	8016578 <__gethex+0x13a>
 801649c:	9b01      	ldr	r3, [sp, #4]
 801649e:	9a04      	ldr	r2, [sp, #16]
 80164a0:	189c      	adds	r4, r3, r2
 80164a2:	7820      	ldrb	r0, [r4, #0]
 80164a4:	f7ff ffb6 	bl	8016414 <__hexdig_fun>
 80164a8:	2800      	cmp	r0, #0
 80164aa:	d069      	beq.n	8016580 <__gethex+0x142>
 80164ac:	9401      	str	r4, [sp, #4]
 80164ae:	9b01      	ldr	r3, [sp, #4]
 80164b0:	7818      	ldrb	r0, [r3, #0]
 80164b2:	2830      	cmp	r0, #48	; 0x30
 80164b4:	d009      	beq.n	80164ca <__gethex+0x8c>
 80164b6:	f7ff ffad 	bl	8016414 <__hexdig_fun>
 80164ba:	4243      	negs	r3, r0
 80164bc:	4143      	adcs	r3, r0
 80164be:	9303      	str	r3, [sp, #12]
 80164c0:	2301      	movs	r3, #1
 80164c2:	0026      	movs	r6, r4
 80164c4:	9308      	str	r3, [sp, #32]
 80164c6:	9c01      	ldr	r4, [sp, #4]
 80164c8:	e004      	b.n	80164d4 <__gethex+0x96>
 80164ca:	9b01      	ldr	r3, [sp, #4]
 80164cc:	3301      	adds	r3, #1
 80164ce:	9301      	str	r3, [sp, #4]
 80164d0:	e7ed      	b.n	80164ae <__gethex+0x70>
 80164d2:	3401      	adds	r4, #1
 80164d4:	7820      	ldrb	r0, [r4, #0]
 80164d6:	f7ff ff9d 	bl	8016414 <__hexdig_fun>
 80164da:	2800      	cmp	r0, #0
 80164dc:	d1f9      	bne.n	80164d2 <__gethex+0x94>
 80164de:	9a04      	ldr	r2, [sp, #16]
 80164e0:	9907      	ldr	r1, [sp, #28]
 80164e2:	0020      	movs	r0, r4
 80164e4:	f7fc fe22 	bl	801312c <strncmp>
 80164e8:	2800      	cmp	r0, #0
 80164ea:	d109      	bne.n	8016500 <__gethex+0xc2>
 80164ec:	2e00      	cmp	r6, #0
 80164ee:	d10a      	bne.n	8016506 <__gethex+0xc8>
 80164f0:	9b04      	ldr	r3, [sp, #16]
 80164f2:	18e4      	adds	r4, r4, r3
 80164f4:	0026      	movs	r6, r4
 80164f6:	7820      	ldrb	r0, [r4, #0]
 80164f8:	f7ff ff8c 	bl	8016414 <__hexdig_fun>
 80164fc:	2800      	cmp	r0, #0
 80164fe:	d139      	bne.n	8016574 <__gethex+0x136>
 8016500:	2700      	movs	r7, #0
 8016502:	42be      	cmp	r6, r7
 8016504:	d001      	beq.n	801650a <__gethex+0xcc>
 8016506:	1b37      	subs	r7, r6, r4
 8016508:	00bf      	lsls	r7, r7, #2
 801650a:	7823      	ldrb	r3, [r4, #0]
 801650c:	2b50      	cmp	r3, #80	; 0x50
 801650e:	d001      	beq.n	8016514 <__gethex+0xd6>
 8016510:	2b70      	cmp	r3, #112	; 0x70
 8016512:	d142      	bne.n	801659a <__gethex+0x15c>
 8016514:	7863      	ldrb	r3, [r4, #1]
 8016516:	2b2b      	cmp	r3, #43	; 0x2b
 8016518:	d034      	beq.n	8016584 <__gethex+0x146>
 801651a:	2b2d      	cmp	r3, #45	; 0x2d
 801651c:	d036      	beq.n	801658c <__gethex+0x14e>
 801651e:	2300      	movs	r3, #0
 8016520:	1c66      	adds	r6, r4, #1
 8016522:	9306      	str	r3, [sp, #24]
 8016524:	7830      	ldrb	r0, [r6, #0]
 8016526:	f7ff ff75 	bl	8016414 <__hexdig_fun>
 801652a:	1e43      	subs	r3, r0, #1
 801652c:	b2db      	uxtb	r3, r3
 801652e:	2b18      	cmp	r3, #24
 8016530:	d833      	bhi.n	801659a <__gethex+0x15c>
 8016532:	3810      	subs	r0, #16
 8016534:	0005      	movs	r5, r0
 8016536:	3601      	adds	r6, #1
 8016538:	7830      	ldrb	r0, [r6, #0]
 801653a:	f7ff ff6b 	bl	8016414 <__hexdig_fun>
 801653e:	1e43      	subs	r3, r0, #1
 8016540:	b2db      	uxtb	r3, r3
 8016542:	2b18      	cmp	r3, #24
 8016544:	d924      	bls.n	8016590 <__gethex+0x152>
 8016546:	9b06      	ldr	r3, [sp, #24]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d000      	beq.n	801654e <__gethex+0x110>
 801654c:	426d      	negs	r5, r5
 801654e:	197f      	adds	r7, r7, r5
 8016550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016552:	601e      	str	r6, [r3, #0]
 8016554:	9b03      	ldr	r3, [sp, #12]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d021      	beq.n	801659e <__gethex+0x160>
 801655a:	9b08      	ldr	r3, [sp, #32]
 801655c:	2606      	movs	r6, #6
 801655e:	425a      	negs	r2, r3
 8016560:	4153      	adcs	r3, r2
 8016562:	425b      	negs	r3, r3
 8016564:	401e      	ands	r6, r3
 8016566:	0030      	movs	r0, r6
 8016568:	b00d      	add	sp, #52	; 0x34
 801656a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801656c:	2300      	movs	r3, #0
 801656e:	9303      	str	r3, [sp, #12]
 8016570:	001e      	movs	r6, r3
 8016572:	e7a8      	b.n	80164c6 <__gethex+0x88>
 8016574:	3401      	adds	r4, #1
 8016576:	e7be      	b.n	80164f6 <__gethex+0xb8>
 8016578:	9c01      	ldr	r4, [sp, #4]
 801657a:	2301      	movs	r3, #1
 801657c:	9303      	str	r3, [sp, #12]
 801657e:	e7c4      	b.n	801650a <__gethex+0xcc>
 8016580:	0007      	movs	r7, r0
 8016582:	e7fa      	b.n	801657a <__gethex+0x13c>
 8016584:	2300      	movs	r3, #0
 8016586:	9306      	str	r3, [sp, #24]
 8016588:	1ca6      	adds	r6, r4, #2
 801658a:	e7cb      	b.n	8016524 <__gethex+0xe6>
 801658c:	2301      	movs	r3, #1
 801658e:	e7fa      	b.n	8016586 <__gethex+0x148>
 8016590:	230a      	movs	r3, #10
 8016592:	435d      	muls	r5, r3
 8016594:	182d      	adds	r5, r5, r0
 8016596:	3d10      	subs	r5, #16
 8016598:	e7cd      	b.n	8016536 <__gethex+0xf8>
 801659a:	0026      	movs	r6, r4
 801659c:	e7d8      	b.n	8016550 <__gethex+0x112>
 801659e:	9b01      	ldr	r3, [sp, #4]
 80165a0:	9903      	ldr	r1, [sp, #12]
 80165a2:	1ae3      	subs	r3, r4, r3
 80165a4:	3b01      	subs	r3, #1
 80165a6:	2b07      	cmp	r3, #7
 80165a8:	dc47      	bgt.n	801663a <__gethex+0x1fc>
 80165aa:	9805      	ldr	r0, [sp, #20]
 80165ac:	f000 fa5e 	bl	8016a6c <_Balloc>
 80165b0:	0003      	movs	r3, r0
 80165b2:	3314      	adds	r3, #20
 80165b4:	9303      	str	r3, [sp, #12]
 80165b6:	9308      	str	r3, [sp, #32]
 80165b8:	2300      	movs	r3, #0
 80165ba:	0005      	movs	r5, r0
 80165bc:	001e      	movs	r6, r3
 80165be:	9306      	str	r3, [sp, #24]
 80165c0:	9b01      	ldr	r3, [sp, #4]
 80165c2:	42a3      	cmp	r3, r4
 80165c4:	d33c      	bcc.n	8016640 <__gethex+0x202>
 80165c6:	9c08      	ldr	r4, [sp, #32]
 80165c8:	9b03      	ldr	r3, [sp, #12]
 80165ca:	c440      	stmia	r4!, {r6}
 80165cc:	1ae4      	subs	r4, r4, r3
 80165ce:	10a4      	asrs	r4, r4, #2
 80165d0:	612c      	str	r4, [r5, #16]
 80165d2:	0030      	movs	r0, r6
 80165d4:	f000 faf8 	bl	8016bc8 <__hi0bits>
 80165d8:	9b02      	ldr	r3, [sp, #8]
 80165da:	0164      	lsls	r4, r4, #5
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	1a26      	subs	r6, r4, r0
 80165e0:	9301      	str	r3, [sp, #4]
 80165e2:	429e      	cmp	r6, r3
 80165e4:	dd5f      	ble.n	80166a6 <__gethex+0x268>
 80165e6:	1af6      	subs	r6, r6, r3
 80165e8:	0031      	movs	r1, r6
 80165ea:	0028      	movs	r0, r5
 80165ec:	f000 fde3 	bl	80171b6 <__any_on>
 80165f0:	1e04      	subs	r4, r0, #0
 80165f2:	d00f      	beq.n	8016614 <__gethex+0x1d6>
 80165f4:	2401      	movs	r4, #1
 80165f6:	211f      	movs	r1, #31
 80165f8:	0020      	movs	r0, r4
 80165fa:	1e73      	subs	r3, r6, #1
 80165fc:	4019      	ands	r1, r3
 80165fe:	4088      	lsls	r0, r1
 8016600:	0001      	movs	r1, r0
 8016602:	115a      	asrs	r2, r3, #5
 8016604:	9803      	ldr	r0, [sp, #12]
 8016606:	0092      	lsls	r2, r2, #2
 8016608:	5812      	ldr	r2, [r2, r0]
 801660a:	420a      	tst	r2, r1
 801660c:	d002      	beq.n	8016614 <__gethex+0x1d6>
 801660e:	42a3      	cmp	r3, r4
 8016610:	dc41      	bgt.n	8016696 <__gethex+0x258>
 8016612:	2402      	movs	r4, #2
 8016614:	0031      	movs	r1, r6
 8016616:	0028      	movs	r0, r5
 8016618:	f7ff fec8 	bl	80163ac <rshift>
 801661c:	19bf      	adds	r7, r7, r6
 801661e:	9b02      	ldr	r3, [sp, #8]
 8016620:	689b      	ldr	r3, [r3, #8]
 8016622:	9304      	str	r3, [sp, #16]
 8016624:	42bb      	cmp	r3, r7
 8016626:	da4e      	bge.n	80166c6 <__gethex+0x288>
 8016628:	0029      	movs	r1, r5
 801662a:	9805      	ldr	r0, [sp, #20]
 801662c:	f000 fa46 	bl	8016abc <_Bfree>
 8016630:	2300      	movs	r3, #0
 8016632:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016634:	26a3      	movs	r6, #163	; 0xa3
 8016636:	6013      	str	r3, [r2, #0]
 8016638:	e795      	b.n	8016566 <__gethex+0x128>
 801663a:	3101      	adds	r1, #1
 801663c:	105b      	asrs	r3, r3, #1
 801663e:	e7b2      	b.n	80165a6 <__gethex+0x168>
 8016640:	1e63      	subs	r3, r4, #1
 8016642:	9309      	str	r3, [sp, #36]	; 0x24
 8016644:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016646:	781b      	ldrb	r3, [r3, #0]
 8016648:	4293      	cmp	r3, r2
 801664a:	d015      	beq.n	8016678 <__gethex+0x23a>
 801664c:	9b06      	ldr	r3, [sp, #24]
 801664e:	2b20      	cmp	r3, #32
 8016650:	d105      	bne.n	801665e <__gethex+0x220>
 8016652:	9b08      	ldr	r3, [sp, #32]
 8016654:	601e      	str	r6, [r3, #0]
 8016656:	2600      	movs	r6, #0
 8016658:	3304      	adds	r3, #4
 801665a:	9308      	str	r3, [sp, #32]
 801665c:	9606      	str	r6, [sp, #24]
 801665e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016660:	7818      	ldrb	r0, [r3, #0]
 8016662:	f7ff fed7 	bl	8016414 <__hexdig_fun>
 8016666:	230f      	movs	r3, #15
 8016668:	4018      	ands	r0, r3
 801666a:	9b06      	ldr	r3, [sp, #24]
 801666c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801666e:	4098      	lsls	r0, r3
 8016670:	3304      	adds	r3, #4
 8016672:	4306      	orrs	r6, r0
 8016674:	9306      	str	r3, [sp, #24]
 8016676:	e7a3      	b.n	80165c0 <__gethex+0x182>
 8016678:	2301      	movs	r3, #1
 801667a:	9a04      	ldr	r2, [sp, #16]
 801667c:	1a9c      	subs	r4, r3, r2
 801667e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016680:	191c      	adds	r4, r3, r4
 8016682:	9b01      	ldr	r3, [sp, #4]
 8016684:	429c      	cmp	r4, r3
 8016686:	d3e1      	bcc.n	801664c <__gethex+0x20e>
 8016688:	9907      	ldr	r1, [sp, #28]
 801668a:	0020      	movs	r0, r4
 801668c:	f7fc fd4e 	bl	801312c <strncmp>
 8016690:	2800      	cmp	r0, #0
 8016692:	d1db      	bne.n	801664c <__gethex+0x20e>
 8016694:	e794      	b.n	80165c0 <__gethex+0x182>
 8016696:	1eb1      	subs	r1, r6, #2
 8016698:	0028      	movs	r0, r5
 801669a:	f000 fd8c 	bl	80171b6 <__any_on>
 801669e:	2800      	cmp	r0, #0
 80166a0:	d0b7      	beq.n	8016612 <__gethex+0x1d4>
 80166a2:	2403      	movs	r4, #3
 80166a4:	e7b6      	b.n	8016614 <__gethex+0x1d6>
 80166a6:	9b01      	ldr	r3, [sp, #4]
 80166a8:	2400      	movs	r4, #0
 80166aa:	429e      	cmp	r6, r3
 80166ac:	dab7      	bge.n	801661e <__gethex+0x1e0>
 80166ae:	1b9e      	subs	r6, r3, r6
 80166b0:	0029      	movs	r1, r5
 80166b2:	0032      	movs	r2, r6
 80166b4:	9805      	ldr	r0, [sp, #20]
 80166b6:	f000 fbab 	bl	8016e10 <__lshift>
 80166ba:	0003      	movs	r3, r0
 80166bc:	3314      	adds	r3, #20
 80166be:	0005      	movs	r5, r0
 80166c0:	1bbf      	subs	r7, r7, r6
 80166c2:	9303      	str	r3, [sp, #12]
 80166c4:	e7ab      	b.n	801661e <__gethex+0x1e0>
 80166c6:	9b02      	ldr	r3, [sp, #8]
 80166c8:	685e      	ldr	r6, [r3, #4]
 80166ca:	42be      	cmp	r6, r7
 80166cc:	dd6b      	ble.n	80167a6 <__gethex+0x368>
 80166ce:	9b01      	ldr	r3, [sp, #4]
 80166d0:	1bf6      	subs	r6, r6, r7
 80166d2:	42b3      	cmp	r3, r6
 80166d4:	dc32      	bgt.n	801673c <__gethex+0x2fe>
 80166d6:	9b02      	ldr	r3, [sp, #8]
 80166d8:	68db      	ldr	r3, [r3, #12]
 80166da:	2b02      	cmp	r3, #2
 80166dc:	d026      	beq.n	801672c <__gethex+0x2ee>
 80166de:	2b03      	cmp	r3, #3
 80166e0:	d028      	beq.n	8016734 <__gethex+0x2f6>
 80166e2:	2b01      	cmp	r3, #1
 80166e4:	d119      	bne.n	801671a <__gethex+0x2dc>
 80166e6:	9b01      	ldr	r3, [sp, #4]
 80166e8:	42b3      	cmp	r3, r6
 80166ea:	d116      	bne.n	801671a <__gethex+0x2dc>
 80166ec:	2b01      	cmp	r3, #1
 80166ee:	dc0d      	bgt.n	801670c <__gethex+0x2ce>
 80166f0:	9b02      	ldr	r3, [sp, #8]
 80166f2:	2662      	movs	r6, #98	; 0x62
 80166f4:	685b      	ldr	r3, [r3, #4]
 80166f6:	9301      	str	r3, [sp, #4]
 80166f8:	9a01      	ldr	r2, [sp, #4]
 80166fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166fc:	601a      	str	r2, [r3, #0]
 80166fe:	2301      	movs	r3, #1
 8016700:	9a03      	ldr	r2, [sp, #12]
 8016702:	612b      	str	r3, [r5, #16]
 8016704:	6013      	str	r3, [r2, #0]
 8016706:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016708:	601d      	str	r5, [r3, #0]
 801670a:	e72c      	b.n	8016566 <__gethex+0x128>
 801670c:	9901      	ldr	r1, [sp, #4]
 801670e:	0028      	movs	r0, r5
 8016710:	3901      	subs	r1, #1
 8016712:	f000 fd50 	bl	80171b6 <__any_on>
 8016716:	2800      	cmp	r0, #0
 8016718:	d1ea      	bne.n	80166f0 <__gethex+0x2b2>
 801671a:	0029      	movs	r1, r5
 801671c:	9805      	ldr	r0, [sp, #20]
 801671e:	f000 f9cd 	bl	8016abc <_Bfree>
 8016722:	2300      	movs	r3, #0
 8016724:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016726:	2650      	movs	r6, #80	; 0x50
 8016728:	6013      	str	r3, [r2, #0]
 801672a:	e71c      	b.n	8016566 <__gethex+0x128>
 801672c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801672e:	2b00      	cmp	r3, #0
 8016730:	d0de      	beq.n	80166f0 <__gethex+0x2b2>
 8016732:	e7f2      	b.n	801671a <__gethex+0x2dc>
 8016734:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016736:	2b00      	cmp	r3, #0
 8016738:	d1da      	bne.n	80166f0 <__gethex+0x2b2>
 801673a:	e7ee      	b.n	801671a <__gethex+0x2dc>
 801673c:	1e77      	subs	r7, r6, #1
 801673e:	2c00      	cmp	r4, #0
 8016740:	d12f      	bne.n	80167a2 <__gethex+0x364>
 8016742:	2f00      	cmp	r7, #0
 8016744:	d004      	beq.n	8016750 <__gethex+0x312>
 8016746:	0039      	movs	r1, r7
 8016748:	0028      	movs	r0, r5
 801674a:	f000 fd34 	bl	80171b6 <__any_on>
 801674e:	0004      	movs	r4, r0
 8016750:	231f      	movs	r3, #31
 8016752:	117a      	asrs	r2, r7, #5
 8016754:	401f      	ands	r7, r3
 8016756:	3b1e      	subs	r3, #30
 8016758:	40bb      	lsls	r3, r7
 801675a:	9903      	ldr	r1, [sp, #12]
 801675c:	0092      	lsls	r2, r2, #2
 801675e:	5852      	ldr	r2, [r2, r1]
 8016760:	421a      	tst	r2, r3
 8016762:	d001      	beq.n	8016768 <__gethex+0x32a>
 8016764:	2302      	movs	r3, #2
 8016766:	431c      	orrs	r4, r3
 8016768:	9b01      	ldr	r3, [sp, #4]
 801676a:	0031      	movs	r1, r6
 801676c:	1b9b      	subs	r3, r3, r6
 801676e:	2602      	movs	r6, #2
 8016770:	0028      	movs	r0, r5
 8016772:	9301      	str	r3, [sp, #4]
 8016774:	f7ff fe1a 	bl	80163ac <rshift>
 8016778:	9b02      	ldr	r3, [sp, #8]
 801677a:	685f      	ldr	r7, [r3, #4]
 801677c:	2c00      	cmp	r4, #0
 801677e:	d040      	beq.n	8016802 <__gethex+0x3c4>
 8016780:	9b02      	ldr	r3, [sp, #8]
 8016782:	68db      	ldr	r3, [r3, #12]
 8016784:	2b02      	cmp	r3, #2
 8016786:	d010      	beq.n	80167aa <__gethex+0x36c>
 8016788:	2b03      	cmp	r3, #3
 801678a:	d012      	beq.n	80167b2 <__gethex+0x374>
 801678c:	2b01      	cmp	r3, #1
 801678e:	d106      	bne.n	801679e <__gethex+0x360>
 8016790:	07a2      	lsls	r2, r4, #30
 8016792:	d504      	bpl.n	801679e <__gethex+0x360>
 8016794:	9a03      	ldr	r2, [sp, #12]
 8016796:	6812      	ldr	r2, [r2, #0]
 8016798:	4314      	orrs	r4, r2
 801679a:	421c      	tst	r4, r3
 801679c:	d10c      	bne.n	80167b8 <__gethex+0x37a>
 801679e:	2310      	movs	r3, #16
 80167a0:	e02e      	b.n	8016800 <__gethex+0x3c2>
 80167a2:	2401      	movs	r4, #1
 80167a4:	e7d4      	b.n	8016750 <__gethex+0x312>
 80167a6:	2601      	movs	r6, #1
 80167a8:	e7e8      	b.n	801677c <__gethex+0x33e>
 80167aa:	2301      	movs	r3, #1
 80167ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80167ae:	1a9b      	subs	r3, r3, r2
 80167b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80167b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d0f2      	beq.n	801679e <__gethex+0x360>
 80167b8:	692c      	ldr	r4, [r5, #16]
 80167ba:	00a3      	lsls	r3, r4, #2
 80167bc:	9304      	str	r3, [sp, #16]
 80167be:	002b      	movs	r3, r5
 80167c0:	00a2      	lsls	r2, r4, #2
 80167c2:	3314      	adds	r3, #20
 80167c4:	1899      	adds	r1, r3, r2
 80167c6:	2200      	movs	r2, #0
 80167c8:	4694      	mov	ip, r2
 80167ca:	681a      	ldr	r2, [r3, #0]
 80167cc:	1c50      	adds	r0, r2, #1
 80167ce:	d01d      	beq.n	801680c <__gethex+0x3ce>
 80167d0:	3201      	adds	r2, #1
 80167d2:	601a      	str	r2, [r3, #0]
 80167d4:	002b      	movs	r3, r5
 80167d6:	3314      	adds	r3, #20
 80167d8:	2e02      	cmp	r6, #2
 80167da:	d13a      	bne.n	8016852 <__gethex+0x414>
 80167dc:	9a02      	ldr	r2, [sp, #8]
 80167de:	9901      	ldr	r1, [sp, #4]
 80167e0:	6812      	ldr	r2, [r2, #0]
 80167e2:	3a01      	subs	r2, #1
 80167e4:	428a      	cmp	r2, r1
 80167e6:	d10a      	bne.n	80167fe <__gethex+0x3c0>
 80167e8:	114a      	asrs	r2, r1, #5
 80167ea:	211f      	movs	r1, #31
 80167ec:	9801      	ldr	r0, [sp, #4]
 80167ee:	0092      	lsls	r2, r2, #2
 80167f0:	4001      	ands	r1, r0
 80167f2:	2001      	movs	r0, #1
 80167f4:	0004      	movs	r4, r0
 80167f6:	408c      	lsls	r4, r1
 80167f8:	58d3      	ldr	r3, [r2, r3]
 80167fa:	4223      	tst	r3, r4
 80167fc:	d148      	bne.n	8016890 <__gethex+0x452>
 80167fe:	2320      	movs	r3, #32
 8016800:	431e      	orrs	r6, r3
 8016802:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016804:	601d      	str	r5, [r3, #0]
 8016806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016808:	601f      	str	r7, [r3, #0]
 801680a:	e6ac      	b.n	8016566 <__gethex+0x128>
 801680c:	4662      	mov	r2, ip
 801680e:	c304      	stmia	r3!, {r2}
 8016810:	4299      	cmp	r1, r3
 8016812:	d8da      	bhi.n	80167ca <__gethex+0x38c>
 8016814:	68ab      	ldr	r3, [r5, #8]
 8016816:	429c      	cmp	r4, r3
 8016818:	db12      	blt.n	8016840 <__gethex+0x402>
 801681a:	686b      	ldr	r3, [r5, #4]
 801681c:	9805      	ldr	r0, [sp, #20]
 801681e:	1c59      	adds	r1, r3, #1
 8016820:	f000 f924 	bl	8016a6c <_Balloc>
 8016824:	0029      	movs	r1, r5
 8016826:	692b      	ldr	r3, [r5, #16]
 8016828:	9003      	str	r0, [sp, #12]
 801682a:	1c9a      	adds	r2, r3, #2
 801682c:	0092      	lsls	r2, r2, #2
 801682e:	310c      	adds	r1, #12
 8016830:	300c      	adds	r0, #12
 8016832:	f7fc fa34 	bl	8012c9e <memcpy>
 8016836:	0029      	movs	r1, r5
 8016838:	9805      	ldr	r0, [sp, #20]
 801683a:	f000 f93f 	bl	8016abc <_Bfree>
 801683e:	9d03      	ldr	r5, [sp, #12]
 8016840:	692b      	ldr	r3, [r5, #16]
 8016842:	1c5a      	adds	r2, r3, #1
 8016844:	612a      	str	r2, [r5, #16]
 8016846:	2201      	movs	r2, #1
 8016848:	3304      	adds	r3, #4
 801684a:	009b      	lsls	r3, r3, #2
 801684c:	18eb      	adds	r3, r5, r3
 801684e:	605a      	str	r2, [r3, #4]
 8016850:	e7c0      	b.n	80167d4 <__gethex+0x396>
 8016852:	692a      	ldr	r2, [r5, #16]
 8016854:	42a2      	cmp	r2, r4
 8016856:	dd0a      	ble.n	801686e <__gethex+0x430>
 8016858:	2101      	movs	r1, #1
 801685a:	0028      	movs	r0, r5
 801685c:	f7ff fda6 	bl	80163ac <rshift>
 8016860:	9b02      	ldr	r3, [sp, #8]
 8016862:	3701      	adds	r7, #1
 8016864:	689b      	ldr	r3, [r3, #8]
 8016866:	2601      	movs	r6, #1
 8016868:	42bb      	cmp	r3, r7
 801686a:	dac8      	bge.n	80167fe <__gethex+0x3c0>
 801686c:	e6dc      	b.n	8016628 <__gethex+0x1ea>
 801686e:	241f      	movs	r4, #31
 8016870:	9a01      	ldr	r2, [sp, #4]
 8016872:	2601      	movs	r6, #1
 8016874:	4022      	ands	r2, r4
 8016876:	1e14      	subs	r4, r2, #0
 8016878:	d0c1      	beq.n	80167fe <__gethex+0x3c0>
 801687a:	9a04      	ldr	r2, [sp, #16]
 801687c:	189b      	adds	r3, r3, r2
 801687e:	3b04      	subs	r3, #4
 8016880:	6818      	ldr	r0, [r3, #0]
 8016882:	f000 f9a1 	bl	8016bc8 <__hi0bits>
 8016886:	2120      	movs	r1, #32
 8016888:	1b0c      	subs	r4, r1, r4
 801688a:	42a0      	cmp	r0, r4
 801688c:	dbe4      	blt.n	8016858 <__gethex+0x41a>
 801688e:	e7b6      	b.n	80167fe <__gethex+0x3c0>
 8016890:	0006      	movs	r6, r0
 8016892:	e7b4      	b.n	80167fe <__gethex+0x3c0>

08016894 <L_shift>:
 8016894:	2308      	movs	r3, #8
 8016896:	b570      	push	{r4, r5, r6, lr}
 8016898:	2520      	movs	r5, #32
 801689a:	1a9a      	subs	r2, r3, r2
 801689c:	0092      	lsls	r2, r2, #2
 801689e:	1aad      	subs	r5, r5, r2
 80168a0:	6843      	ldr	r3, [r0, #4]
 80168a2:	6806      	ldr	r6, [r0, #0]
 80168a4:	001c      	movs	r4, r3
 80168a6:	40ac      	lsls	r4, r5
 80168a8:	40d3      	lsrs	r3, r2
 80168aa:	4334      	orrs	r4, r6
 80168ac:	6004      	str	r4, [r0, #0]
 80168ae:	6043      	str	r3, [r0, #4]
 80168b0:	3004      	adds	r0, #4
 80168b2:	4288      	cmp	r0, r1
 80168b4:	d3f4      	bcc.n	80168a0 <L_shift+0xc>
 80168b6:	bd70      	pop	{r4, r5, r6, pc}

080168b8 <__match>:
 80168b8:	b530      	push	{r4, r5, lr}
 80168ba:	6803      	ldr	r3, [r0, #0]
 80168bc:	780c      	ldrb	r4, [r1, #0]
 80168be:	3301      	adds	r3, #1
 80168c0:	2c00      	cmp	r4, #0
 80168c2:	d102      	bne.n	80168ca <__match+0x12>
 80168c4:	6003      	str	r3, [r0, #0]
 80168c6:	2001      	movs	r0, #1
 80168c8:	bd30      	pop	{r4, r5, pc}
 80168ca:	781a      	ldrb	r2, [r3, #0]
 80168cc:	0015      	movs	r5, r2
 80168ce:	3d41      	subs	r5, #65	; 0x41
 80168d0:	2d19      	cmp	r5, #25
 80168d2:	d800      	bhi.n	80168d6 <__match+0x1e>
 80168d4:	3220      	adds	r2, #32
 80168d6:	3101      	adds	r1, #1
 80168d8:	42a2      	cmp	r2, r4
 80168da:	d0ef      	beq.n	80168bc <__match+0x4>
 80168dc:	2000      	movs	r0, #0
 80168de:	e7f3      	b.n	80168c8 <__match+0x10>

080168e0 <__hexnan>:
 80168e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168e2:	b08b      	sub	sp, #44	; 0x2c
 80168e4:	9201      	str	r2, [sp, #4]
 80168e6:	680a      	ldr	r2, [r1, #0]
 80168e8:	9901      	ldr	r1, [sp, #4]
 80168ea:	1153      	asrs	r3, r2, #5
 80168ec:	009b      	lsls	r3, r3, #2
 80168ee:	18cb      	adds	r3, r1, r3
 80168f0:	9304      	str	r3, [sp, #16]
 80168f2:	231f      	movs	r3, #31
 80168f4:	401a      	ands	r2, r3
 80168f6:	9008      	str	r0, [sp, #32]
 80168f8:	9206      	str	r2, [sp, #24]
 80168fa:	d002      	beq.n	8016902 <__hexnan+0x22>
 80168fc:	9b04      	ldr	r3, [sp, #16]
 80168fe:	3304      	adds	r3, #4
 8016900:	9304      	str	r3, [sp, #16]
 8016902:	9b04      	ldr	r3, [sp, #16]
 8016904:	2500      	movs	r5, #0
 8016906:	1f1e      	subs	r6, r3, #4
 8016908:	0037      	movs	r7, r6
 801690a:	0034      	movs	r4, r6
 801690c:	9b08      	ldr	r3, [sp, #32]
 801690e:	6035      	str	r5, [r6, #0]
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	9507      	str	r5, [sp, #28]
 8016914:	9305      	str	r3, [sp, #20]
 8016916:	9502      	str	r5, [sp, #8]
 8016918:	9b05      	ldr	r3, [sp, #20]
 801691a:	3301      	adds	r3, #1
 801691c:	9309      	str	r3, [sp, #36]	; 0x24
 801691e:	9b05      	ldr	r3, [sp, #20]
 8016920:	785b      	ldrb	r3, [r3, #1]
 8016922:	9303      	str	r3, [sp, #12]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d028      	beq.n	801697a <__hexnan+0x9a>
 8016928:	9803      	ldr	r0, [sp, #12]
 801692a:	f7ff fd73 	bl	8016414 <__hexdig_fun>
 801692e:	2800      	cmp	r0, #0
 8016930:	d145      	bne.n	80169be <__hexnan+0xde>
 8016932:	9b03      	ldr	r3, [sp, #12]
 8016934:	2b20      	cmp	r3, #32
 8016936:	d819      	bhi.n	801696c <__hexnan+0x8c>
 8016938:	9b02      	ldr	r3, [sp, #8]
 801693a:	9a07      	ldr	r2, [sp, #28]
 801693c:	4293      	cmp	r3, r2
 801693e:	dd12      	ble.n	8016966 <__hexnan+0x86>
 8016940:	42bc      	cmp	r4, r7
 8016942:	d206      	bcs.n	8016952 <__hexnan+0x72>
 8016944:	2d07      	cmp	r5, #7
 8016946:	dc04      	bgt.n	8016952 <__hexnan+0x72>
 8016948:	002a      	movs	r2, r5
 801694a:	0039      	movs	r1, r7
 801694c:	0020      	movs	r0, r4
 801694e:	f7ff ffa1 	bl	8016894 <L_shift>
 8016952:	9b01      	ldr	r3, [sp, #4]
 8016954:	2508      	movs	r5, #8
 8016956:	429c      	cmp	r4, r3
 8016958:	d905      	bls.n	8016966 <__hexnan+0x86>
 801695a:	1f27      	subs	r7, r4, #4
 801695c:	2500      	movs	r5, #0
 801695e:	003c      	movs	r4, r7
 8016960:	9b02      	ldr	r3, [sp, #8]
 8016962:	603d      	str	r5, [r7, #0]
 8016964:	9307      	str	r3, [sp, #28]
 8016966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016968:	9305      	str	r3, [sp, #20]
 801696a:	e7d5      	b.n	8016918 <__hexnan+0x38>
 801696c:	9b03      	ldr	r3, [sp, #12]
 801696e:	2b29      	cmp	r3, #41	; 0x29
 8016970:	d14a      	bne.n	8016a08 <__hexnan+0x128>
 8016972:	9b05      	ldr	r3, [sp, #20]
 8016974:	9a08      	ldr	r2, [sp, #32]
 8016976:	3302      	adds	r3, #2
 8016978:	6013      	str	r3, [r2, #0]
 801697a:	9b02      	ldr	r3, [sp, #8]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d043      	beq.n	8016a08 <__hexnan+0x128>
 8016980:	42bc      	cmp	r4, r7
 8016982:	d206      	bcs.n	8016992 <__hexnan+0xb2>
 8016984:	2d07      	cmp	r5, #7
 8016986:	dc04      	bgt.n	8016992 <__hexnan+0xb2>
 8016988:	002a      	movs	r2, r5
 801698a:	0039      	movs	r1, r7
 801698c:	0020      	movs	r0, r4
 801698e:	f7ff ff81 	bl	8016894 <L_shift>
 8016992:	9b01      	ldr	r3, [sp, #4]
 8016994:	429c      	cmp	r4, r3
 8016996:	d926      	bls.n	80169e6 <__hexnan+0x106>
 8016998:	cc04      	ldmia	r4!, {r2}
 801699a:	601a      	str	r2, [r3, #0]
 801699c:	3304      	adds	r3, #4
 801699e:	42a6      	cmp	r6, r4
 80169a0:	d2fa      	bcs.n	8016998 <__hexnan+0xb8>
 80169a2:	2200      	movs	r2, #0
 80169a4:	c304      	stmia	r3!, {r2}
 80169a6:	429e      	cmp	r6, r3
 80169a8:	d2fc      	bcs.n	80169a4 <__hexnan+0xc4>
 80169aa:	6833      	ldr	r3, [r6, #0]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d104      	bne.n	80169ba <__hexnan+0xda>
 80169b0:	9b01      	ldr	r3, [sp, #4]
 80169b2:	429e      	cmp	r6, r3
 80169b4:	d126      	bne.n	8016a04 <__hexnan+0x124>
 80169b6:	2301      	movs	r3, #1
 80169b8:	6033      	str	r3, [r6, #0]
 80169ba:	2005      	movs	r0, #5
 80169bc:	e025      	b.n	8016a0a <__hexnan+0x12a>
 80169be:	9b02      	ldr	r3, [sp, #8]
 80169c0:	3501      	adds	r5, #1
 80169c2:	3301      	adds	r3, #1
 80169c4:	9302      	str	r3, [sp, #8]
 80169c6:	2d08      	cmp	r5, #8
 80169c8:	dd06      	ble.n	80169d8 <__hexnan+0xf8>
 80169ca:	9b01      	ldr	r3, [sp, #4]
 80169cc:	429c      	cmp	r4, r3
 80169ce:	d9ca      	bls.n	8016966 <__hexnan+0x86>
 80169d0:	2300      	movs	r3, #0
 80169d2:	2501      	movs	r5, #1
 80169d4:	3c04      	subs	r4, #4
 80169d6:	6023      	str	r3, [r4, #0]
 80169d8:	220f      	movs	r2, #15
 80169da:	6823      	ldr	r3, [r4, #0]
 80169dc:	4010      	ands	r0, r2
 80169de:	011b      	lsls	r3, r3, #4
 80169e0:	4318      	orrs	r0, r3
 80169e2:	6020      	str	r0, [r4, #0]
 80169e4:	e7bf      	b.n	8016966 <__hexnan+0x86>
 80169e6:	9b06      	ldr	r3, [sp, #24]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d0de      	beq.n	80169aa <__hexnan+0xca>
 80169ec:	2120      	movs	r1, #32
 80169ee:	9a06      	ldr	r2, [sp, #24]
 80169f0:	9b04      	ldr	r3, [sp, #16]
 80169f2:	1a89      	subs	r1, r1, r2
 80169f4:	2201      	movs	r2, #1
 80169f6:	4252      	negs	r2, r2
 80169f8:	40ca      	lsrs	r2, r1
 80169fa:	3b04      	subs	r3, #4
 80169fc:	6819      	ldr	r1, [r3, #0]
 80169fe:	400a      	ands	r2, r1
 8016a00:	601a      	str	r2, [r3, #0]
 8016a02:	e7d2      	b.n	80169aa <__hexnan+0xca>
 8016a04:	3e04      	subs	r6, #4
 8016a06:	e7d0      	b.n	80169aa <__hexnan+0xca>
 8016a08:	2004      	movs	r0, #4
 8016a0a:	b00b      	add	sp, #44	; 0x2c
 8016a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016a0e <__localeconv_l>:
 8016a0e:	30f0      	adds	r0, #240	; 0xf0
 8016a10:	4770      	bx	lr
	...

08016a14 <_localeconv_r>:
 8016a14:	4b03      	ldr	r3, [pc, #12]	; (8016a24 <_localeconv_r+0x10>)
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016a1a:	2800      	cmp	r0, #0
 8016a1c:	d100      	bne.n	8016a20 <_localeconv_r+0xc>
 8016a1e:	4802      	ldr	r0, [pc, #8]	; (8016a28 <_localeconv_r+0x14>)
 8016a20:	30f0      	adds	r0, #240	; 0xf0
 8016a22:	4770      	bx	lr
 8016a24:	200000c8 	.word	0x200000c8
 8016a28:	200004f8 	.word	0x200004f8

08016a2c <__retarget_lock_acquire_recursive>:
 8016a2c:	4770      	bx	lr

08016a2e <__retarget_lock_release_recursive>:
 8016a2e:	4770      	bx	lr

08016a30 <memchr>:
 8016a30:	b2c9      	uxtb	r1, r1
 8016a32:	1882      	adds	r2, r0, r2
 8016a34:	4290      	cmp	r0, r2
 8016a36:	d101      	bne.n	8016a3c <memchr+0xc>
 8016a38:	2000      	movs	r0, #0
 8016a3a:	4770      	bx	lr
 8016a3c:	7803      	ldrb	r3, [r0, #0]
 8016a3e:	428b      	cmp	r3, r1
 8016a40:	d0fb      	beq.n	8016a3a <memchr+0xa>
 8016a42:	3001      	adds	r0, #1
 8016a44:	e7f6      	b.n	8016a34 <memchr+0x4>

08016a46 <memmove>:
 8016a46:	b510      	push	{r4, lr}
 8016a48:	4288      	cmp	r0, r1
 8016a4a:	d902      	bls.n	8016a52 <memmove+0xc>
 8016a4c:	188b      	adds	r3, r1, r2
 8016a4e:	4298      	cmp	r0, r3
 8016a50:	d303      	bcc.n	8016a5a <memmove+0x14>
 8016a52:	2300      	movs	r3, #0
 8016a54:	e007      	b.n	8016a66 <memmove+0x20>
 8016a56:	5c8b      	ldrb	r3, [r1, r2]
 8016a58:	5483      	strb	r3, [r0, r2]
 8016a5a:	3a01      	subs	r2, #1
 8016a5c:	d2fb      	bcs.n	8016a56 <memmove+0x10>
 8016a5e:	bd10      	pop	{r4, pc}
 8016a60:	5ccc      	ldrb	r4, [r1, r3]
 8016a62:	54c4      	strb	r4, [r0, r3]
 8016a64:	3301      	adds	r3, #1
 8016a66:	429a      	cmp	r2, r3
 8016a68:	d1fa      	bne.n	8016a60 <memmove+0x1a>
 8016a6a:	e7f8      	b.n	8016a5e <memmove+0x18>

08016a6c <_Balloc>:
 8016a6c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016a6e:	b570      	push	{r4, r5, r6, lr}
 8016a70:	0004      	movs	r4, r0
 8016a72:	000d      	movs	r5, r1
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d012      	beq.n	8016a9e <_Balloc+0x32>
 8016a78:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016a7a:	00ab      	lsls	r3, r5, #2
 8016a7c:	18d3      	adds	r3, r2, r3
 8016a7e:	6818      	ldr	r0, [r3, #0]
 8016a80:	2800      	cmp	r0, #0
 8016a82:	d115      	bne.n	8016ab0 <_Balloc+0x44>
 8016a84:	2101      	movs	r1, #1
 8016a86:	000e      	movs	r6, r1
 8016a88:	40ae      	lsls	r6, r5
 8016a8a:	1d72      	adds	r2, r6, #5
 8016a8c:	0092      	lsls	r2, r2, #2
 8016a8e:	0020      	movs	r0, r4
 8016a90:	f7fb fe56 	bl	8012740 <_calloc_r>
 8016a94:	2800      	cmp	r0, #0
 8016a96:	d009      	beq.n	8016aac <_Balloc+0x40>
 8016a98:	6045      	str	r5, [r0, #4]
 8016a9a:	6086      	str	r6, [r0, #8]
 8016a9c:	e00a      	b.n	8016ab4 <_Balloc+0x48>
 8016a9e:	2221      	movs	r2, #33	; 0x21
 8016aa0:	2104      	movs	r1, #4
 8016aa2:	f7fb fe4d 	bl	8012740 <_calloc_r>
 8016aa6:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016aa8:	2800      	cmp	r0, #0
 8016aaa:	d1e5      	bne.n	8016a78 <_Balloc+0xc>
 8016aac:	2000      	movs	r0, #0
 8016aae:	bd70      	pop	{r4, r5, r6, pc}
 8016ab0:	6802      	ldr	r2, [r0, #0]
 8016ab2:	601a      	str	r2, [r3, #0]
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	6103      	str	r3, [r0, #16]
 8016ab8:	60c3      	str	r3, [r0, #12]
 8016aba:	e7f8      	b.n	8016aae <_Balloc+0x42>

08016abc <_Bfree>:
 8016abc:	2900      	cmp	r1, #0
 8016abe:	d006      	beq.n	8016ace <_Bfree+0x12>
 8016ac0:	684b      	ldr	r3, [r1, #4]
 8016ac2:	009a      	lsls	r2, r3, #2
 8016ac4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016ac6:	189b      	adds	r3, r3, r2
 8016ac8:	681a      	ldr	r2, [r3, #0]
 8016aca:	600a      	str	r2, [r1, #0]
 8016acc:	6019      	str	r1, [r3, #0]
 8016ace:	4770      	bx	lr

08016ad0 <__multadd>:
 8016ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ad2:	001e      	movs	r6, r3
 8016ad4:	2314      	movs	r3, #20
 8016ad6:	469c      	mov	ip, r3
 8016ad8:	0007      	movs	r7, r0
 8016ada:	000c      	movs	r4, r1
 8016adc:	2000      	movs	r0, #0
 8016ade:	690d      	ldr	r5, [r1, #16]
 8016ae0:	448c      	add	ip, r1
 8016ae2:	4663      	mov	r3, ip
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	3001      	adds	r0, #1
 8016ae8:	b299      	uxth	r1, r3
 8016aea:	4663      	mov	r3, ip
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	4351      	muls	r1, r2
 8016af0:	0c1b      	lsrs	r3, r3, #16
 8016af2:	4353      	muls	r3, r2
 8016af4:	1989      	adds	r1, r1, r6
 8016af6:	0c0e      	lsrs	r6, r1, #16
 8016af8:	199b      	adds	r3, r3, r6
 8016afa:	b289      	uxth	r1, r1
 8016afc:	0c1e      	lsrs	r6, r3, #16
 8016afe:	041b      	lsls	r3, r3, #16
 8016b00:	185b      	adds	r3, r3, r1
 8016b02:	4661      	mov	r1, ip
 8016b04:	c108      	stmia	r1!, {r3}
 8016b06:	468c      	mov	ip, r1
 8016b08:	4285      	cmp	r5, r0
 8016b0a:	dcea      	bgt.n	8016ae2 <__multadd+0x12>
 8016b0c:	2e00      	cmp	r6, #0
 8016b0e:	d01b      	beq.n	8016b48 <__multadd+0x78>
 8016b10:	68a3      	ldr	r3, [r4, #8]
 8016b12:	42ab      	cmp	r3, r5
 8016b14:	dc12      	bgt.n	8016b3c <__multadd+0x6c>
 8016b16:	6863      	ldr	r3, [r4, #4]
 8016b18:	0038      	movs	r0, r7
 8016b1a:	1c59      	adds	r1, r3, #1
 8016b1c:	f7ff ffa6 	bl	8016a6c <_Balloc>
 8016b20:	0021      	movs	r1, r4
 8016b22:	6923      	ldr	r3, [r4, #16]
 8016b24:	9001      	str	r0, [sp, #4]
 8016b26:	1c9a      	adds	r2, r3, #2
 8016b28:	0092      	lsls	r2, r2, #2
 8016b2a:	310c      	adds	r1, #12
 8016b2c:	300c      	adds	r0, #12
 8016b2e:	f7fc f8b6 	bl	8012c9e <memcpy>
 8016b32:	0021      	movs	r1, r4
 8016b34:	0038      	movs	r0, r7
 8016b36:	f7ff ffc1 	bl	8016abc <_Bfree>
 8016b3a:	9c01      	ldr	r4, [sp, #4]
 8016b3c:	1d2b      	adds	r3, r5, #4
 8016b3e:	009b      	lsls	r3, r3, #2
 8016b40:	18e3      	adds	r3, r4, r3
 8016b42:	3501      	adds	r5, #1
 8016b44:	605e      	str	r6, [r3, #4]
 8016b46:	6125      	str	r5, [r4, #16]
 8016b48:	0020      	movs	r0, r4
 8016b4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08016b4c <__s2b>:
 8016b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016b4e:	0006      	movs	r6, r0
 8016b50:	0018      	movs	r0, r3
 8016b52:	000c      	movs	r4, r1
 8016b54:	3008      	adds	r0, #8
 8016b56:	2109      	movs	r1, #9
 8016b58:	9301      	str	r3, [sp, #4]
 8016b5a:	0015      	movs	r5, r2
 8016b5c:	f7e9 fb82 	bl	8000264 <__divsi3>
 8016b60:	2301      	movs	r3, #1
 8016b62:	2100      	movs	r1, #0
 8016b64:	4283      	cmp	r3, r0
 8016b66:	db1f      	blt.n	8016ba8 <__s2b+0x5c>
 8016b68:	0030      	movs	r0, r6
 8016b6a:	f7ff ff7f 	bl	8016a6c <_Balloc>
 8016b6e:	9b08      	ldr	r3, [sp, #32]
 8016b70:	6143      	str	r3, [r0, #20]
 8016b72:	2301      	movs	r3, #1
 8016b74:	6103      	str	r3, [r0, #16]
 8016b76:	2d09      	cmp	r5, #9
 8016b78:	dd19      	ble.n	8016bae <__s2b+0x62>
 8016b7a:	0023      	movs	r3, r4
 8016b7c:	3309      	adds	r3, #9
 8016b7e:	001f      	movs	r7, r3
 8016b80:	9300      	str	r3, [sp, #0]
 8016b82:	1964      	adds	r4, r4, r5
 8016b84:	783b      	ldrb	r3, [r7, #0]
 8016b86:	0001      	movs	r1, r0
 8016b88:	3b30      	subs	r3, #48	; 0x30
 8016b8a:	220a      	movs	r2, #10
 8016b8c:	0030      	movs	r0, r6
 8016b8e:	3701      	adds	r7, #1
 8016b90:	f7ff ff9e 	bl	8016ad0 <__multadd>
 8016b94:	42a7      	cmp	r7, r4
 8016b96:	d1f5      	bne.n	8016b84 <__s2b+0x38>
 8016b98:	9b00      	ldr	r3, [sp, #0]
 8016b9a:	195c      	adds	r4, r3, r5
 8016b9c:	3c08      	subs	r4, #8
 8016b9e:	002f      	movs	r7, r5
 8016ba0:	9b01      	ldr	r3, [sp, #4]
 8016ba2:	429f      	cmp	r7, r3
 8016ba4:	db06      	blt.n	8016bb4 <__s2b+0x68>
 8016ba6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016ba8:	005b      	lsls	r3, r3, #1
 8016baa:	3101      	adds	r1, #1
 8016bac:	e7da      	b.n	8016b64 <__s2b+0x18>
 8016bae:	340a      	adds	r4, #10
 8016bb0:	2509      	movs	r5, #9
 8016bb2:	e7f4      	b.n	8016b9e <__s2b+0x52>
 8016bb4:	1b63      	subs	r3, r4, r5
 8016bb6:	5ddb      	ldrb	r3, [r3, r7]
 8016bb8:	0001      	movs	r1, r0
 8016bba:	3b30      	subs	r3, #48	; 0x30
 8016bbc:	220a      	movs	r2, #10
 8016bbe:	0030      	movs	r0, r6
 8016bc0:	f7ff ff86 	bl	8016ad0 <__multadd>
 8016bc4:	3701      	adds	r7, #1
 8016bc6:	e7eb      	b.n	8016ba0 <__s2b+0x54>

08016bc8 <__hi0bits>:
 8016bc8:	0003      	movs	r3, r0
 8016bca:	0c02      	lsrs	r2, r0, #16
 8016bcc:	2000      	movs	r0, #0
 8016bce:	4282      	cmp	r2, r0
 8016bd0:	d101      	bne.n	8016bd6 <__hi0bits+0xe>
 8016bd2:	041b      	lsls	r3, r3, #16
 8016bd4:	3010      	adds	r0, #16
 8016bd6:	0e1a      	lsrs	r2, r3, #24
 8016bd8:	d101      	bne.n	8016bde <__hi0bits+0x16>
 8016bda:	3008      	adds	r0, #8
 8016bdc:	021b      	lsls	r3, r3, #8
 8016bde:	0f1a      	lsrs	r2, r3, #28
 8016be0:	d101      	bne.n	8016be6 <__hi0bits+0x1e>
 8016be2:	3004      	adds	r0, #4
 8016be4:	011b      	lsls	r3, r3, #4
 8016be6:	0f9a      	lsrs	r2, r3, #30
 8016be8:	d101      	bne.n	8016bee <__hi0bits+0x26>
 8016bea:	3002      	adds	r0, #2
 8016bec:	009b      	lsls	r3, r3, #2
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	db03      	blt.n	8016bfa <__hi0bits+0x32>
 8016bf2:	3001      	adds	r0, #1
 8016bf4:	005b      	lsls	r3, r3, #1
 8016bf6:	d400      	bmi.n	8016bfa <__hi0bits+0x32>
 8016bf8:	2020      	movs	r0, #32
 8016bfa:	4770      	bx	lr

08016bfc <__lo0bits>:
 8016bfc:	2207      	movs	r2, #7
 8016bfe:	6803      	ldr	r3, [r0, #0]
 8016c00:	b510      	push	{r4, lr}
 8016c02:	0001      	movs	r1, r0
 8016c04:	401a      	ands	r2, r3
 8016c06:	d00d      	beq.n	8016c24 <__lo0bits+0x28>
 8016c08:	2401      	movs	r4, #1
 8016c0a:	2000      	movs	r0, #0
 8016c0c:	4223      	tst	r3, r4
 8016c0e:	d105      	bne.n	8016c1c <__lo0bits+0x20>
 8016c10:	3002      	adds	r0, #2
 8016c12:	4203      	tst	r3, r0
 8016c14:	d003      	beq.n	8016c1e <__lo0bits+0x22>
 8016c16:	40e3      	lsrs	r3, r4
 8016c18:	0020      	movs	r0, r4
 8016c1a:	600b      	str	r3, [r1, #0]
 8016c1c:	bd10      	pop	{r4, pc}
 8016c1e:	089b      	lsrs	r3, r3, #2
 8016c20:	600b      	str	r3, [r1, #0]
 8016c22:	e7fb      	b.n	8016c1c <__lo0bits+0x20>
 8016c24:	b29c      	uxth	r4, r3
 8016c26:	0010      	movs	r0, r2
 8016c28:	2c00      	cmp	r4, #0
 8016c2a:	d101      	bne.n	8016c30 <__lo0bits+0x34>
 8016c2c:	2010      	movs	r0, #16
 8016c2e:	0c1b      	lsrs	r3, r3, #16
 8016c30:	b2da      	uxtb	r2, r3
 8016c32:	2a00      	cmp	r2, #0
 8016c34:	d101      	bne.n	8016c3a <__lo0bits+0x3e>
 8016c36:	3008      	adds	r0, #8
 8016c38:	0a1b      	lsrs	r3, r3, #8
 8016c3a:	071a      	lsls	r2, r3, #28
 8016c3c:	d101      	bne.n	8016c42 <__lo0bits+0x46>
 8016c3e:	3004      	adds	r0, #4
 8016c40:	091b      	lsrs	r3, r3, #4
 8016c42:	079a      	lsls	r2, r3, #30
 8016c44:	d101      	bne.n	8016c4a <__lo0bits+0x4e>
 8016c46:	3002      	adds	r0, #2
 8016c48:	089b      	lsrs	r3, r3, #2
 8016c4a:	07da      	lsls	r2, r3, #31
 8016c4c:	d4e8      	bmi.n	8016c20 <__lo0bits+0x24>
 8016c4e:	085b      	lsrs	r3, r3, #1
 8016c50:	d001      	beq.n	8016c56 <__lo0bits+0x5a>
 8016c52:	3001      	adds	r0, #1
 8016c54:	e7e4      	b.n	8016c20 <__lo0bits+0x24>
 8016c56:	2020      	movs	r0, #32
 8016c58:	e7e0      	b.n	8016c1c <__lo0bits+0x20>

08016c5a <__i2b>:
 8016c5a:	b510      	push	{r4, lr}
 8016c5c:	000c      	movs	r4, r1
 8016c5e:	2101      	movs	r1, #1
 8016c60:	f7ff ff04 	bl	8016a6c <_Balloc>
 8016c64:	2301      	movs	r3, #1
 8016c66:	6144      	str	r4, [r0, #20]
 8016c68:	6103      	str	r3, [r0, #16]
 8016c6a:	bd10      	pop	{r4, pc}

08016c6c <__multiply>:
 8016c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c6e:	690b      	ldr	r3, [r1, #16]
 8016c70:	0014      	movs	r4, r2
 8016c72:	6912      	ldr	r2, [r2, #16]
 8016c74:	b089      	sub	sp, #36	; 0x24
 8016c76:	000d      	movs	r5, r1
 8016c78:	4293      	cmp	r3, r2
 8016c7a:	da01      	bge.n	8016c80 <__multiply+0x14>
 8016c7c:	0025      	movs	r5, r4
 8016c7e:	000c      	movs	r4, r1
 8016c80:	692f      	ldr	r7, [r5, #16]
 8016c82:	6926      	ldr	r6, [r4, #16]
 8016c84:	6869      	ldr	r1, [r5, #4]
 8016c86:	19bb      	adds	r3, r7, r6
 8016c88:	9302      	str	r3, [sp, #8]
 8016c8a:	68ab      	ldr	r3, [r5, #8]
 8016c8c:	19ba      	adds	r2, r7, r6
 8016c8e:	4293      	cmp	r3, r2
 8016c90:	da00      	bge.n	8016c94 <__multiply+0x28>
 8016c92:	3101      	adds	r1, #1
 8016c94:	f7ff feea 	bl	8016a6c <_Balloc>
 8016c98:	0002      	movs	r2, r0
 8016c9a:	19bb      	adds	r3, r7, r6
 8016c9c:	3214      	adds	r2, #20
 8016c9e:	009b      	lsls	r3, r3, #2
 8016ca0:	18d3      	adds	r3, r2, r3
 8016ca2:	469c      	mov	ip, r3
 8016ca4:	2100      	movs	r1, #0
 8016ca6:	0013      	movs	r3, r2
 8016ca8:	9004      	str	r0, [sp, #16]
 8016caa:	4563      	cmp	r3, ip
 8016cac:	d31d      	bcc.n	8016cea <__multiply+0x7e>
 8016cae:	3514      	adds	r5, #20
 8016cb0:	00bf      	lsls	r7, r7, #2
 8016cb2:	19eb      	adds	r3, r5, r7
 8016cb4:	3414      	adds	r4, #20
 8016cb6:	00b6      	lsls	r6, r6, #2
 8016cb8:	9305      	str	r3, [sp, #20]
 8016cba:	19a3      	adds	r3, r4, r6
 8016cbc:	9503      	str	r5, [sp, #12]
 8016cbe:	9401      	str	r4, [sp, #4]
 8016cc0:	9307      	str	r3, [sp, #28]
 8016cc2:	9b07      	ldr	r3, [sp, #28]
 8016cc4:	9901      	ldr	r1, [sp, #4]
 8016cc6:	4299      	cmp	r1, r3
 8016cc8:	d311      	bcc.n	8016cee <__multiply+0x82>
 8016cca:	9b02      	ldr	r3, [sp, #8]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	dd06      	ble.n	8016cde <__multiply+0x72>
 8016cd0:	2304      	movs	r3, #4
 8016cd2:	425b      	negs	r3, r3
 8016cd4:	449c      	add	ip, r3
 8016cd6:	4663      	mov	r3, ip
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d051      	beq.n	8016d82 <__multiply+0x116>
 8016cde:	9b04      	ldr	r3, [sp, #16]
 8016ce0:	9a02      	ldr	r2, [sp, #8]
 8016ce2:	0018      	movs	r0, r3
 8016ce4:	611a      	str	r2, [r3, #16]
 8016ce6:	b009      	add	sp, #36	; 0x24
 8016ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cea:	c302      	stmia	r3!, {r1}
 8016cec:	e7dd      	b.n	8016caa <__multiply+0x3e>
 8016cee:	9b01      	ldr	r3, [sp, #4]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	b298      	uxth	r0, r3
 8016cf4:	2800      	cmp	r0, #0
 8016cf6:	d01c      	beq.n	8016d32 <__multiply+0xc6>
 8016cf8:	0015      	movs	r5, r2
 8016cfa:	2600      	movs	r6, #0
 8016cfc:	9f03      	ldr	r7, [sp, #12]
 8016cfe:	cf02      	ldmia	r7!, {r1}
 8016d00:	682c      	ldr	r4, [r5, #0]
 8016d02:	b28b      	uxth	r3, r1
 8016d04:	4343      	muls	r3, r0
 8016d06:	0c09      	lsrs	r1, r1, #16
 8016d08:	4341      	muls	r1, r0
 8016d0a:	b2a4      	uxth	r4, r4
 8016d0c:	191b      	adds	r3, r3, r4
 8016d0e:	199b      	adds	r3, r3, r6
 8016d10:	000e      	movs	r6, r1
 8016d12:	6829      	ldr	r1, [r5, #0]
 8016d14:	9506      	str	r5, [sp, #24]
 8016d16:	0c09      	lsrs	r1, r1, #16
 8016d18:	1871      	adds	r1, r6, r1
 8016d1a:	0c1e      	lsrs	r6, r3, #16
 8016d1c:	1989      	adds	r1, r1, r6
 8016d1e:	0c0e      	lsrs	r6, r1, #16
 8016d20:	b29b      	uxth	r3, r3
 8016d22:	0409      	lsls	r1, r1, #16
 8016d24:	430b      	orrs	r3, r1
 8016d26:	c508      	stmia	r5!, {r3}
 8016d28:	9b05      	ldr	r3, [sp, #20]
 8016d2a:	42bb      	cmp	r3, r7
 8016d2c:	d8e7      	bhi.n	8016cfe <__multiply+0x92>
 8016d2e:	9b06      	ldr	r3, [sp, #24]
 8016d30:	605e      	str	r6, [r3, #4]
 8016d32:	9b01      	ldr	r3, [sp, #4]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	0c1d      	lsrs	r5, r3, #16
 8016d38:	d01e      	beq.n	8016d78 <__multiply+0x10c>
 8016d3a:	0010      	movs	r0, r2
 8016d3c:	2700      	movs	r7, #0
 8016d3e:	6813      	ldr	r3, [r2, #0]
 8016d40:	9e03      	ldr	r6, [sp, #12]
 8016d42:	6831      	ldr	r1, [r6, #0]
 8016d44:	6804      	ldr	r4, [r0, #0]
 8016d46:	b289      	uxth	r1, r1
 8016d48:	4369      	muls	r1, r5
 8016d4a:	0c24      	lsrs	r4, r4, #16
 8016d4c:	1909      	adds	r1, r1, r4
 8016d4e:	19c9      	adds	r1, r1, r7
 8016d50:	040f      	lsls	r7, r1, #16
 8016d52:	b29b      	uxth	r3, r3
 8016d54:	433b      	orrs	r3, r7
 8016d56:	6003      	str	r3, [r0, #0]
 8016d58:	ce80      	ldmia	r6!, {r7}
 8016d5a:	6843      	ldr	r3, [r0, #4]
 8016d5c:	0c3f      	lsrs	r7, r7, #16
 8016d5e:	436f      	muls	r7, r5
 8016d60:	b29b      	uxth	r3, r3
 8016d62:	18fb      	adds	r3, r7, r3
 8016d64:	0c09      	lsrs	r1, r1, #16
 8016d66:	185b      	adds	r3, r3, r1
 8016d68:	9905      	ldr	r1, [sp, #20]
 8016d6a:	9006      	str	r0, [sp, #24]
 8016d6c:	0c1f      	lsrs	r7, r3, #16
 8016d6e:	3004      	adds	r0, #4
 8016d70:	42b1      	cmp	r1, r6
 8016d72:	d8e6      	bhi.n	8016d42 <__multiply+0xd6>
 8016d74:	9906      	ldr	r1, [sp, #24]
 8016d76:	604b      	str	r3, [r1, #4]
 8016d78:	9b01      	ldr	r3, [sp, #4]
 8016d7a:	3204      	adds	r2, #4
 8016d7c:	3304      	adds	r3, #4
 8016d7e:	9301      	str	r3, [sp, #4]
 8016d80:	e79f      	b.n	8016cc2 <__multiply+0x56>
 8016d82:	9b02      	ldr	r3, [sp, #8]
 8016d84:	3b01      	subs	r3, #1
 8016d86:	9302      	str	r3, [sp, #8]
 8016d88:	e79f      	b.n	8016cca <__multiply+0x5e>
	...

08016d8c <__pow5mult>:
 8016d8c:	2303      	movs	r3, #3
 8016d8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d90:	4013      	ands	r3, r2
 8016d92:	0006      	movs	r6, r0
 8016d94:	000f      	movs	r7, r1
 8016d96:	0015      	movs	r5, r2
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d008      	beq.n	8016dae <__pow5mult+0x22>
 8016d9c:	491a      	ldr	r1, [pc, #104]	; (8016e08 <__pow5mult+0x7c>)
 8016d9e:	3b01      	subs	r3, #1
 8016da0:	009a      	lsls	r2, r3, #2
 8016da2:	5852      	ldr	r2, [r2, r1]
 8016da4:	2300      	movs	r3, #0
 8016da6:	0039      	movs	r1, r7
 8016da8:	f7ff fe92 	bl	8016ad0 <__multadd>
 8016dac:	0007      	movs	r7, r0
 8016dae:	10ad      	asrs	r5, r5, #2
 8016db0:	d027      	beq.n	8016e02 <__pow5mult+0x76>
 8016db2:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8016db4:	2c00      	cmp	r4, #0
 8016db6:	d107      	bne.n	8016dc8 <__pow5mult+0x3c>
 8016db8:	4914      	ldr	r1, [pc, #80]	; (8016e0c <__pow5mult+0x80>)
 8016dba:	0030      	movs	r0, r6
 8016dbc:	f7ff ff4d 	bl	8016c5a <__i2b>
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	0004      	movs	r4, r0
 8016dc4:	64b0      	str	r0, [r6, #72]	; 0x48
 8016dc6:	6003      	str	r3, [r0, #0]
 8016dc8:	2301      	movs	r3, #1
 8016dca:	421d      	tst	r5, r3
 8016dcc:	d00a      	beq.n	8016de4 <__pow5mult+0x58>
 8016dce:	0039      	movs	r1, r7
 8016dd0:	0022      	movs	r2, r4
 8016dd2:	0030      	movs	r0, r6
 8016dd4:	f7ff ff4a 	bl	8016c6c <__multiply>
 8016dd8:	0039      	movs	r1, r7
 8016dda:	9001      	str	r0, [sp, #4]
 8016ddc:	0030      	movs	r0, r6
 8016dde:	f7ff fe6d 	bl	8016abc <_Bfree>
 8016de2:	9f01      	ldr	r7, [sp, #4]
 8016de4:	106d      	asrs	r5, r5, #1
 8016de6:	d00c      	beq.n	8016e02 <__pow5mult+0x76>
 8016de8:	6820      	ldr	r0, [r4, #0]
 8016dea:	2800      	cmp	r0, #0
 8016dec:	d107      	bne.n	8016dfe <__pow5mult+0x72>
 8016dee:	0022      	movs	r2, r4
 8016df0:	0021      	movs	r1, r4
 8016df2:	0030      	movs	r0, r6
 8016df4:	f7ff ff3a 	bl	8016c6c <__multiply>
 8016df8:	2300      	movs	r3, #0
 8016dfa:	6020      	str	r0, [r4, #0]
 8016dfc:	6003      	str	r3, [r0, #0]
 8016dfe:	0004      	movs	r4, r0
 8016e00:	e7e2      	b.n	8016dc8 <__pow5mult+0x3c>
 8016e02:	0038      	movs	r0, r7
 8016e04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016e06:	46c0      	nop			; (mov r8, r8)
 8016e08:	0801a5f8 	.word	0x0801a5f8
 8016e0c:	00000271 	.word	0x00000271

08016e10 <__lshift>:
 8016e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e12:	000d      	movs	r5, r1
 8016e14:	0017      	movs	r7, r2
 8016e16:	692b      	ldr	r3, [r5, #16]
 8016e18:	1154      	asrs	r4, r2, #5
 8016e1a:	b085      	sub	sp, #20
 8016e1c:	18e3      	adds	r3, r4, r3
 8016e1e:	9301      	str	r3, [sp, #4]
 8016e20:	3301      	adds	r3, #1
 8016e22:	9300      	str	r3, [sp, #0]
 8016e24:	6849      	ldr	r1, [r1, #4]
 8016e26:	68ab      	ldr	r3, [r5, #8]
 8016e28:	9002      	str	r0, [sp, #8]
 8016e2a:	9a00      	ldr	r2, [sp, #0]
 8016e2c:	4293      	cmp	r3, r2
 8016e2e:	db35      	blt.n	8016e9c <__lshift+0x8c>
 8016e30:	9802      	ldr	r0, [sp, #8]
 8016e32:	f7ff fe1b 	bl	8016a6c <_Balloc>
 8016e36:	2300      	movs	r3, #0
 8016e38:	0002      	movs	r2, r0
 8016e3a:	0006      	movs	r6, r0
 8016e3c:	0019      	movs	r1, r3
 8016e3e:	3214      	adds	r2, #20
 8016e40:	42a3      	cmp	r3, r4
 8016e42:	db2e      	blt.n	8016ea2 <__lshift+0x92>
 8016e44:	43e3      	mvns	r3, r4
 8016e46:	17db      	asrs	r3, r3, #31
 8016e48:	401c      	ands	r4, r3
 8016e4a:	002b      	movs	r3, r5
 8016e4c:	00a4      	lsls	r4, r4, #2
 8016e4e:	1914      	adds	r4, r2, r4
 8016e50:	692a      	ldr	r2, [r5, #16]
 8016e52:	3314      	adds	r3, #20
 8016e54:	0092      	lsls	r2, r2, #2
 8016e56:	189a      	adds	r2, r3, r2
 8016e58:	4694      	mov	ip, r2
 8016e5a:	221f      	movs	r2, #31
 8016e5c:	4017      	ands	r7, r2
 8016e5e:	d024      	beq.n	8016eaa <__lshift+0x9a>
 8016e60:	3201      	adds	r2, #1
 8016e62:	1bd2      	subs	r2, r2, r7
 8016e64:	9203      	str	r2, [sp, #12]
 8016e66:	2200      	movs	r2, #0
 8016e68:	6819      	ldr	r1, [r3, #0]
 8016e6a:	0020      	movs	r0, r4
 8016e6c:	40b9      	lsls	r1, r7
 8016e6e:	430a      	orrs	r2, r1
 8016e70:	c404      	stmia	r4!, {r2}
 8016e72:	cb04      	ldmia	r3!, {r2}
 8016e74:	9903      	ldr	r1, [sp, #12]
 8016e76:	40ca      	lsrs	r2, r1
 8016e78:	459c      	cmp	ip, r3
 8016e7a:	d8f5      	bhi.n	8016e68 <__lshift+0x58>
 8016e7c:	6042      	str	r2, [r0, #4]
 8016e7e:	2a00      	cmp	r2, #0
 8016e80:	d002      	beq.n	8016e88 <__lshift+0x78>
 8016e82:	9b01      	ldr	r3, [sp, #4]
 8016e84:	3302      	adds	r3, #2
 8016e86:	9300      	str	r3, [sp, #0]
 8016e88:	9b00      	ldr	r3, [sp, #0]
 8016e8a:	9802      	ldr	r0, [sp, #8]
 8016e8c:	3b01      	subs	r3, #1
 8016e8e:	6133      	str	r3, [r6, #16]
 8016e90:	0029      	movs	r1, r5
 8016e92:	f7ff fe13 	bl	8016abc <_Bfree>
 8016e96:	0030      	movs	r0, r6
 8016e98:	b005      	add	sp, #20
 8016e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e9c:	3101      	adds	r1, #1
 8016e9e:	005b      	lsls	r3, r3, #1
 8016ea0:	e7c3      	b.n	8016e2a <__lshift+0x1a>
 8016ea2:	0098      	lsls	r0, r3, #2
 8016ea4:	5011      	str	r1, [r2, r0]
 8016ea6:	3301      	adds	r3, #1
 8016ea8:	e7ca      	b.n	8016e40 <__lshift+0x30>
 8016eaa:	cb04      	ldmia	r3!, {r2}
 8016eac:	c404      	stmia	r4!, {r2}
 8016eae:	459c      	cmp	ip, r3
 8016eb0:	d8fb      	bhi.n	8016eaa <__lshift+0x9a>
 8016eb2:	e7e9      	b.n	8016e88 <__lshift+0x78>

08016eb4 <__mcmp>:
 8016eb4:	690a      	ldr	r2, [r1, #16]
 8016eb6:	6903      	ldr	r3, [r0, #16]
 8016eb8:	b530      	push	{r4, r5, lr}
 8016eba:	1a9b      	subs	r3, r3, r2
 8016ebc:	d10d      	bne.n	8016eda <__mcmp+0x26>
 8016ebe:	0092      	lsls	r2, r2, #2
 8016ec0:	3014      	adds	r0, #20
 8016ec2:	3114      	adds	r1, #20
 8016ec4:	1884      	adds	r4, r0, r2
 8016ec6:	1889      	adds	r1, r1, r2
 8016ec8:	3c04      	subs	r4, #4
 8016eca:	3904      	subs	r1, #4
 8016ecc:	6825      	ldr	r5, [r4, #0]
 8016ece:	680a      	ldr	r2, [r1, #0]
 8016ed0:	4295      	cmp	r5, r2
 8016ed2:	d004      	beq.n	8016ede <__mcmp+0x2a>
 8016ed4:	2301      	movs	r3, #1
 8016ed6:	4295      	cmp	r5, r2
 8016ed8:	d304      	bcc.n	8016ee4 <__mcmp+0x30>
 8016eda:	0018      	movs	r0, r3
 8016edc:	bd30      	pop	{r4, r5, pc}
 8016ede:	42a0      	cmp	r0, r4
 8016ee0:	d3f2      	bcc.n	8016ec8 <__mcmp+0x14>
 8016ee2:	e7fa      	b.n	8016eda <__mcmp+0x26>
 8016ee4:	425b      	negs	r3, r3
 8016ee6:	e7f8      	b.n	8016eda <__mcmp+0x26>

08016ee8 <__mdiff>:
 8016ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016eea:	000d      	movs	r5, r1
 8016eec:	b085      	sub	sp, #20
 8016eee:	0007      	movs	r7, r0
 8016ef0:	0011      	movs	r1, r2
 8016ef2:	0028      	movs	r0, r5
 8016ef4:	0014      	movs	r4, r2
 8016ef6:	f7ff ffdd 	bl	8016eb4 <__mcmp>
 8016efa:	1e06      	subs	r6, r0, #0
 8016efc:	d108      	bne.n	8016f10 <__mdiff+0x28>
 8016efe:	0001      	movs	r1, r0
 8016f00:	0038      	movs	r0, r7
 8016f02:	f7ff fdb3 	bl	8016a6c <_Balloc>
 8016f06:	2301      	movs	r3, #1
 8016f08:	6146      	str	r6, [r0, #20]
 8016f0a:	6103      	str	r3, [r0, #16]
 8016f0c:	b005      	add	sp, #20
 8016f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f10:	2301      	movs	r3, #1
 8016f12:	9301      	str	r3, [sp, #4]
 8016f14:	2800      	cmp	r0, #0
 8016f16:	db04      	blt.n	8016f22 <__mdiff+0x3a>
 8016f18:	0023      	movs	r3, r4
 8016f1a:	002c      	movs	r4, r5
 8016f1c:	001d      	movs	r5, r3
 8016f1e:	2300      	movs	r3, #0
 8016f20:	9301      	str	r3, [sp, #4]
 8016f22:	6861      	ldr	r1, [r4, #4]
 8016f24:	0038      	movs	r0, r7
 8016f26:	f7ff fda1 	bl	8016a6c <_Balloc>
 8016f2a:	002f      	movs	r7, r5
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	9b01      	ldr	r3, [sp, #4]
 8016f30:	6926      	ldr	r6, [r4, #16]
 8016f32:	60c3      	str	r3, [r0, #12]
 8016f34:	3414      	adds	r4, #20
 8016f36:	00b3      	lsls	r3, r6, #2
 8016f38:	18e3      	adds	r3, r4, r3
 8016f3a:	9302      	str	r3, [sp, #8]
 8016f3c:	692b      	ldr	r3, [r5, #16]
 8016f3e:	3714      	adds	r7, #20
 8016f40:	009b      	lsls	r3, r3, #2
 8016f42:	18fb      	adds	r3, r7, r3
 8016f44:	9303      	str	r3, [sp, #12]
 8016f46:	0003      	movs	r3, r0
 8016f48:	4694      	mov	ip, r2
 8016f4a:	3314      	adds	r3, #20
 8016f4c:	cc20      	ldmia	r4!, {r5}
 8016f4e:	cf04      	ldmia	r7!, {r2}
 8016f50:	9201      	str	r2, [sp, #4]
 8016f52:	b2aa      	uxth	r2, r5
 8016f54:	4494      	add	ip, r2
 8016f56:	466a      	mov	r2, sp
 8016f58:	4661      	mov	r1, ip
 8016f5a:	8892      	ldrh	r2, [r2, #4]
 8016f5c:	0c2d      	lsrs	r5, r5, #16
 8016f5e:	1a8a      	subs	r2, r1, r2
 8016f60:	9901      	ldr	r1, [sp, #4]
 8016f62:	0c09      	lsrs	r1, r1, #16
 8016f64:	1a69      	subs	r1, r5, r1
 8016f66:	1415      	asrs	r5, r2, #16
 8016f68:	1949      	adds	r1, r1, r5
 8016f6a:	140d      	asrs	r5, r1, #16
 8016f6c:	b292      	uxth	r2, r2
 8016f6e:	0409      	lsls	r1, r1, #16
 8016f70:	430a      	orrs	r2, r1
 8016f72:	601a      	str	r2, [r3, #0]
 8016f74:	9a03      	ldr	r2, [sp, #12]
 8016f76:	46ac      	mov	ip, r5
 8016f78:	3304      	adds	r3, #4
 8016f7a:	42ba      	cmp	r2, r7
 8016f7c:	d8e6      	bhi.n	8016f4c <__mdiff+0x64>
 8016f7e:	9902      	ldr	r1, [sp, #8]
 8016f80:	001a      	movs	r2, r3
 8016f82:	428c      	cmp	r4, r1
 8016f84:	d305      	bcc.n	8016f92 <__mdiff+0xaa>
 8016f86:	3a04      	subs	r2, #4
 8016f88:	6813      	ldr	r3, [r2, #0]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d00e      	beq.n	8016fac <__mdiff+0xc4>
 8016f8e:	6106      	str	r6, [r0, #16]
 8016f90:	e7bc      	b.n	8016f0c <__mdiff+0x24>
 8016f92:	cc04      	ldmia	r4!, {r2}
 8016f94:	b291      	uxth	r1, r2
 8016f96:	4461      	add	r1, ip
 8016f98:	140d      	asrs	r5, r1, #16
 8016f9a:	0c12      	lsrs	r2, r2, #16
 8016f9c:	1952      	adds	r2, r2, r5
 8016f9e:	1415      	asrs	r5, r2, #16
 8016fa0:	b289      	uxth	r1, r1
 8016fa2:	0412      	lsls	r2, r2, #16
 8016fa4:	430a      	orrs	r2, r1
 8016fa6:	46ac      	mov	ip, r5
 8016fa8:	c304      	stmia	r3!, {r2}
 8016faa:	e7e8      	b.n	8016f7e <__mdiff+0x96>
 8016fac:	3e01      	subs	r6, #1
 8016fae:	e7ea      	b.n	8016f86 <__mdiff+0x9e>

08016fb0 <__ulp>:
 8016fb0:	000b      	movs	r3, r1
 8016fb2:	4910      	ldr	r1, [pc, #64]	; (8016ff4 <__ulp+0x44>)
 8016fb4:	b510      	push	{r4, lr}
 8016fb6:	4019      	ands	r1, r3
 8016fb8:	4b0f      	ldr	r3, [pc, #60]	; (8016ff8 <__ulp+0x48>)
 8016fba:	18c9      	adds	r1, r1, r3
 8016fbc:	2900      	cmp	r1, #0
 8016fbe:	dd04      	ble.n	8016fca <__ulp+0x1a>
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	000b      	movs	r3, r1
 8016fc4:	0010      	movs	r0, r2
 8016fc6:	0019      	movs	r1, r3
 8016fc8:	bd10      	pop	{r4, pc}
 8016fca:	4249      	negs	r1, r1
 8016fcc:	1509      	asrs	r1, r1, #20
 8016fce:	2200      	movs	r2, #0
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	2913      	cmp	r1, #19
 8016fd4:	dc04      	bgt.n	8016fe0 <__ulp+0x30>
 8016fd6:	2080      	movs	r0, #128	; 0x80
 8016fd8:	0300      	lsls	r0, r0, #12
 8016fda:	4108      	asrs	r0, r1
 8016fdc:	0003      	movs	r3, r0
 8016fde:	e7f1      	b.n	8016fc4 <__ulp+0x14>
 8016fe0:	3914      	subs	r1, #20
 8016fe2:	2001      	movs	r0, #1
 8016fe4:	291e      	cmp	r1, #30
 8016fe6:	dc02      	bgt.n	8016fee <__ulp+0x3e>
 8016fe8:	241f      	movs	r4, #31
 8016fea:	1a61      	subs	r1, r4, r1
 8016fec:	4088      	lsls	r0, r1
 8016fee:	0002      	movs	r2, r0
 8016ff0:	e7e8      	b.n	8016fc4 <__ulp+0x14>
 8016ff2:	46c0      	nop			; (mov r8, r8)
 8016ff4:	7ff00000 	.word	0x7ff00000
 8016ff8:	fcc00000 	.word	0xfcc00000

08016ffc <__b2d>:
 8016ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ffe:	0006      	movs	r6, r0
 8017000:	6903      	ldr	r3, [r0, #16]
 8017002:	3614      	adds	r6, #20
 8017004:	009b      	lsls	r3, r3, #2
 8017006:	18f3      	adds	r3, r6, r3
 8017008:	1f1d      	subs	r5, r3, #4
 801700a:	682c      	ldr	r4, [r5, #0]
 801700c:	000f      	movs	r7, r1
 801700e:	0020      	movs	r0, r4
 8017010:	9301      	str	r3, [sp, #4]
 8017012:	f7ff fdd9 	bl	8016bc8 <__hi0bits>
 8017016:	2320      	movs	r3, #32
 8017018:	1a1b      	subs	r3, r3, r0
 801701a:	603b      	str	r3, [r7, #0]
 801701c:	491c      	ldr	r1, [pc, #112]	; (8017090 <__b2d+0x94>)
 801701e:	280a      	cmp	r0, #10
 8017020:	dc16      	bgt.n	8017050 <__b2d+0x54>
 8017022:	230b      	movs	r3, #11
 8017024:	0027      	movs	r7, r4
 8017026:	1a1b      	subs	r3, r3, r0
 8017028:	40df      	lsrs	r7, r3
 801702a:	4339      	orrs	r1, r7
 801702c:	469c      	mov	ip, r3
 801702e:	000b      	movs	r3, r1
 8017030:	2100      	movs	r1, #0
 8017032:	42ae      	cmp	r6, r5
 8017034:	d202      	bcs.n	801703c <__b2d+0x40>
 8017036:	9901      	ldr	r1, [sp, #4]
 8017038:	3908      	subs	r1, #8
 801703a:	6809      	ldr	r1, [r1, #0]
 801703c:	3015      	adds	r0, #21
 801703e:	4084      	lsls	r4, r0
 8017040:	4660      	mov	r0, ip
 8017042:	40c1      	lsrs	r1, r0
 8017044:	430c      	orrs	r4, r1
 8017046:	0022      	movs	r2, r4
 8017048:	0010      	movs	r0, r2
 801704a:	0019      	movs	r1, r3
 801704c:	b003      	add	sp, #12
 801704e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017050:	2700      	movs	r7, #0
 8017052:	42ae      	cmp	r6, r5
 8017054:	d202      	bcs.n	801705c <__b2d+0x60>
 8017056:	9d01      	ldr	r5, [sp, #4]
 8017058:	3d08      	subs	r5, #8
 801705a:	682f      	ldr	r7, [r5, #0]
 801705c:	380b      	subs	r0, #11
 801705e:	4684      	mov	ip, r0
 8017060:	1e03      	subs	r3, r0, #0
 8017062:	d012      	beq.n	801708a <__b2d+0x8e>
 8017064:	409c      	lsls	r4, r3
 8017066:	2020      	movs	r0, #32
 8017068:	4321      	orrs	r1, r4
 801706a:	003c      	movs	r4, r7
 801706c:	1ac0      	subs	r0, r0, r3
 801706e:	40c4      	lsrs	r4, r0
 8017070:	4321      	orrs	r1, r4
 8017072:	000b      	movs	r3, r1
 8017074:	2100      	movs	r1, #0
 8017076:	42b5      	cmp	r5, r6
 8017078:	d901      	bls.n	801707e <__b2d+0x82>
 801707a:	3d04      	subs	r5, #4
 801707c:	6829      	ldr	r1, [r5, #0]
 801707e:	4664      	mov	r4, ip
 8017080:	40c1      	lsrs	r1, r0
 8017082:	40a7      	lsls	r7, r4
 8017084:	430f      	orrs	r7, r1
 8017086:	003a      	movs	r2, r7
 8017088:	e7de      	b.n	8017048 <__b2d+0x4c>
 801708a:	4321      	orrs	r1, r4
 801708c:	000b      	movs	r3, r1
 801708e:	e7fa      	b.n	8017086 <__b2d+0x8a>
 8017090:	3ff00000 	.word	0x3ff00000

08017094 <__d2b>:
 8017094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017096:	001d      	movs	r5, r3
 8017098:	2101      	movs	r1, #1
 801709a:	0014      	movs	r4, r2
 801709c:	9f08      	ldr	r7, [sp, #32]
 801709e:	f7ff fce5 	bl	8016a6c <_Balloc>
 80170a2:	032b      	lsls	r3, r5, #12
 80170a4:	006d      	lsls	r5, r5, #1
 80170a6:	0006      	movs	r6, r0
 80170a8:	0b1b      	lsrs	r3, r3, #12
 80170aa:	0d6d      	lsrs	r5, r5, #21
 80170ac:	d124      	bne.n	80170f8 <__d2b+0x64>
 80170ae:	9301      	str	r3, [sp, #4]
 80170b0:	2c00      	cmp	r4, #0
 80170b2:	d027      	beq.n	8017104 <__d2b+0x70>
 80170b4:	4668      	mov	r0, sp
 80170b6:	9400      	str	r4, [sp, #0]
 80170b8:	f7ff fda0 	bl	8016bfc <__lo0bits>
 80170bc:	9c00      	ldr	r4, [sp, #0]
 80170be:	2800      	cmp	r0, #0
 80170c0:	d01e      	beq.n	8017100 <__d2b+0x6c>
 80170c2:	9b01      	ldr	r3, [sp, #4]
 80170c4:	2120      	movs	r1, #32
 80170c6:	001a      	movs	r2, r3
 80170c8:	1a09      	subs	r1, r1, r0
 80170ca:	408a      	lsls	r2, r1
 80170cc:	40c3      	lsrs	r3, r0
 80170ce:	4322      	orrs	r2, r4
 80170d0:	6172      	str	r2, [r6, #20]
 80170d2:	9301      	str	r3, [sp, #4]
 80170d4:	9c01      	ldr	r4, [sp, #4]
 80170d6:	61b4      	str	r4, [r6, #24]
 80170d8:	1e63      	subs	r3, r4, #1
 80170da:	419c      	sbcs	r4, r3
 80170dc:	3401      	adds	r4, #1
 80170de:	6134      	str	r4, [r6, #16]
 80170e0:	2d00      	cmp	r5, #0
 80170e2:	d018      	beq.n	8017116 <__d2b+0x82>
 80170e4:	4b12      	ldr	r3, [pc, #72]	; (8017130 <__d2b+0x9c>)
 80170e6:	18ed      	adds	r5, r5, r3
 80170e8:	2335      	movs	r3, #53	; 0x35
 80170ea:	182d      	adds	r5, r5, r0
 80170ec:	603d      	str	r5, [r7, #0]
 80170ee:	1a18      	subs	r0, r3, r0
 80170f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170f2:	6018      	str	r0, [r3, #0]
 80170f4:	0030      	movs	r0, r6
 80170f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80170f8:	2280      	movs	r2, #128	; 0x80
 80170fa:	0352      	lsls	r2, r2, #13
 80170fc:	4313      	orrs	r3, r2
 80170fe:	e7d6      	b.n	80170ae <__d2b+0x1a>
 8017100:	6174      	str	r4, [r6, #20]
 8017102:	e7e7      	b.n	80170d4 <__d2b+0x40>
 8017104:	a801      	add	r0, sp, #4
 8017106:	f7ff fd79 	bl	8016bfc <__lo0bits>
 801710a:	2401      	movs	r4, #1
 801710c:	9b01      	ldr	r3, [sp, #4]
 801710e:	6134      	str	r4, [r6, #16]
 8017110:	6173      	str	r3, [r6, #20]
 8017112:	3020      	adds	r0, #32
 8017114:	e7e4      	b.n	80170e0 <__d2b+0x4c>
 8017116:	4b07      	ldr	r3, [pc, #28]	; (8017134 <__d2b+0xa0>)
 8017118:	18c0      	adds	r0, r0, r3
 801711a:	4b07      	ldr	r3, [pc, #28]	; (8017138 <__d2b+0xa4>)
 801711c:	6038      	str	r0, [r7, #0]
 801711e:	18e3      	adds	r3, r4, r3
 8017120:	009b      	lsls	r3, r3, #2
 8017122:	18f3      	adds	r3, r6, r3
 8017124:	6958      	ldr	r0, [r3, #20]
 8017126:	f7ff fd4f 	bl	8016bc8 <__hi0bits>
 801712a:	0164      	lsls	r4, r4, #5
 801712c:	1a20      	subs	r0, r4, r0
 801712e:	e7df      	b.n	80170f0 <__d2b+0x5c>
 8017130:	fffffbcd 	.word	0xfffffbcd
 8017134:	fffffbce 	.word	0xfffffbce
 8017138:	3fffffff 	.word	0x3fffffff

0801713c <__ratio>:
 801713c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801713e:	b085      	sub	sp, #20
 8017140:	000f      	movs	r7, r1
 8017142:	a902      	add	r1, sp, #8
 8017144:	0006      	movs	r6, r0
 8017146:	f7ff ff59 	bl	8016ffc <__b2d>
 801714a:	0004      	movs	r4, r0
 801714c:	000d      	movs	r5, r1
 801714e:	0038      	movs	r0, r7
 8017150:	a903      	add	r1, sp, #12
 8017152:	9400      	str	r4, [sp, #0]
 8017154:	9501      	str	r5, [sp, #4]
 8017156:	f7ff ff51 	bl	8016ffc <__b2d>
 801715a:	6936      	ldr	r6, [r6, #16]
 801715c:	693f      	ldr	r7, [r7, #16]
 801715e:	0002      	movs	r2, r0
 8017160:	1bf7      	subs	r7, r6, r7
 8017162:	017e      	lsls	r6, r7, #5
 8017164:	46b4      	mov	ip, r6
 8017166:	9f03      	ldr	r7, [sp, #12]
 8017168:	9e02      	ldr	r6, [sp, #8]
 801716a:	000b      	movs	r3, r1
 801716c:	1bf6      	subs	r6, r6, r7
 801716e:	4466      	add	r6, ip
 8017170:	0537      	lsls	r7, r6, #20
 8017172:	2e00      	cmp	r6, #0
 8017174:	dd07      	ble.n	8017186 <__ratio+0x4a>
 8017176:	1979      	adds	r1, r7, r5
 8017178:	9101      	str	r1, [sp, #4]
 801717a:	9800      	ldr	r0, [sp, #0]
 801717c:	9901      	ldr	r1, [sp, #4]
 801717e:	f7ea fa4f 	bl	8001620 <__aeabi_ddiv>
 8017182:	b005      	add	sp, #20
 8017184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017186:	1bcb      	subs	r3, r1, r7
 8017188:	e7f7      	b.n	801717a <__ratio+0x3e>

0801718a <__copybits>:
 801718a:	0013      	movs	r3, r2
 801718c:	3901      	subs	r1, #1
 801718e:	b510      	push	{r4, lr}
 8017190:	1149      	asrs	r1, r1, #5
 8017192:	6912      	ldr	r2, [r2, #16]
 8017194:	3101      	adds	r1, #1
 8017196:	0089      	lsls	r1, r1, #2
 8017198:	3314      	adds	r3, #20
 801719a:	0092      	lsls	r2, r2, #2
 801719c:	1841      	adds	r1, r0, r1
 801719e:	189a      	adds	r2, r3, r2
 80171a0:	429a      	cmp	r2, r3
 80171a2:	d803      	bhi.n	80171ac <__copybits+0x22>
 80171a4:	2300      	movs	r3, #0
 80171a6:	4281      	cmp	r1, r0
 80171a8:	d803      	bhi.n	80171b2 <__copybits+0x28>
 80171aa:	bd10      	pop	{r4, pc}
 80171ac:	cb10      	ldmia	r3!, {r4}
 80171ae:	c010      	stmia	r0!, {r4}
 80171b0:	e7f6      	b.n	80171a0 <__copybits+0x16>
 80171b2:	c008      	stmia	r0!, {r3}
 80171b4:	e7f7      	b.n	80171a6 <__copybits+0x1c>

080171b6 <__any_on>:
 80171b6:	0002      	movs	r2, r0
 80171b8:	6900      	ldr	r0, [r0, #16]
 80171ba:	b510      	push	{r4, lr}
 80171bc:	3214      	adds	r2, #20
 80171be:	114b      	asrs	r3, r1, #5
 80171c0:	4298      	cmp	r0, r3
 80171c2:	db12      	blt.n	80171ea <__any_on+0x34>
 80171c4:	dd0b      	ble.n	80171de <__any_on+0x28>
 80171c6:	201f      	movs	r0, #31
 80171c8:	4001      	ands	r1, r0
 80171ca:	d008      	beq.n	80171de <__any_on+0x28>
 80171cc:	0098      	lsls	r0, r3, #2
 80171ce:	5884      	ldr	r4, [r0, r2]
 80171d0:	0020      	movs	r0, r4
 80171d2:	40c8      	lsrs	r0, r1
 80171d4:	4088      	lsls	r0, r1
 80171d6:	0001      	movs	r1, r0
 80171d8:	2001      	movs	r0, #1
 80171da:	428c      	cmp	r4, r1
 80171dc:	d104      	bne.n	80171e8 <__any_on+0x32>
 80171de:	009b      	lsls	r3, r3, #2
 80171e0:	18d3      	adds	r3, r2, r3
 80171e2:	4293      	cmp	r3, r2
 80171e4:	d803      	bhi.n	80171ee <__any_on+0x38>
 80171e6:	2000      	movs	r0, #0
 80171e8:	bd10      	pop	{r4, pc}
 80171ea:	0003      	movs	r3, r0
 80171ec:	e7f7      	b.n	80171de <__any_on+0x28>
 80171ee:	3b04      	subs	r3, #4
 80171f0:	6819      	ldr	r1, [r3, #0]
 80171f2:	2900      	cmp	r1, #0
 80171f4:	d0f5      	beq.n	80171e2 <__any_on+0x2c>
 80171f6:	2001      	movs	r0, #1
 80171f8:	e7f6      	b.n	80171e8 <__any_on+0x32>
	...

080171fc <frexp>:
 80171fc:	b570      	push	{r4, r5, r6, lr}
 80171fe:	0014      	movs	r4, r2
 8017200:	2500      	movs	r5, #0
 8017202:	6025      	str	r5, [r4, #0]
 8017204:	4d10      	ldr	r5, [pc, #64]	; (8017248 <frexp+0x4c>)
 8017206:	004b      	lsls	r3, r1, #1
 8017208:	000a      	movs	r2, r1
 801720a:	085b      	lsrs	r3, r3, #1
 801720c:	42ab      	cmp	r3, r5
 801720e:	dc1a      	bgt.n	8017246 <frexp+0x4a>
 8017210:	001d      	movs	r5, r3
 8017212:	4305      	orrs	r5, r0
 8017214:	d017      	beq.n	8017246 <frexp+0x4a>
 8017216:	4d0d      	ldr	r5, [pc, #52]	; (801724c <frexp+0x50>)
 8017218:	42ab      	cmp	r3, r5
 801721a:	dc09      	bgt.n	8017230 <frexp+0x34>
 801721c:	2200      	movs	r2, #0
 801721e:	4b0c      	ldr	r3, [pc, #48]	; (8017250 <frexp+0x54>)
 8017220:	f7ea fe08 	bl	8001e34 <__aeabi_dmul>
 8017224:	2536      	movs	r5, #54	; 0x36
 8017226:	000a      	movs	r2, r1
 8017228:	004b      	lsls	r3, r1, #1
 801722a:	426d      	negs	r5, r5
 801722c:	085b      	lsrs	r3, r3, #1
 801722e:	6025      	str	r5, [r4, #0]
 8017230:	4d08      	ldr	r5, [pc, #32]	; (8017254 <frexp+0x58>)
 8017232:	151b      	asrs	r3, r3, #20
 8017234:	195b      	adds	r3, r3, r5
 8017236:	6825      	ldr	r5, [r4, #0]
 8017238:	18eb      	adds	r3, r5, r3
 801723a:	6023      	str	r3, [r4, #0]
 801723c:	4b06      	ldr	r3, [pc, #24]	; (8017258 <frexp+0x5c>)
 801723e:	401a      	ands	r2, r3
 8017240:	4b06      	ldr	r3, [pc, #24]	; (801725c <frexp+0x60>)
 8017242:	4313      	orrs	r3, r2
 8017244:	0019      	movs	r1, r3
 8017246:	bd70      	pop	{r4, r5, r6, pc}
 8017248:	7fefffff 	.word	0x7fefffff
 801724c:	000fffff 	.word	0x000fffff
 8017250:	43500000 	.word	0x43500000
 8017254:	fffffc02 	.word	0xfffffc02
 8017258:	800fffff 	.word	0x800fffff
 801725c:	3fe00000 	.word	0x3fe00000

08017260 <__ssprint_r>:
 8017260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017262:	6893      	ldr	r3, [r2, #8]
 8017264:	b087      	sub	sp, #28
 8017266:	9002      	str	r0, [sp, #8]
 8017268:	000c      	movs	r4, r1
 801726a:	0016      	movs	r6, r2
 801726c:	2b00      	cmp	r3, #0
 801726e:	d063      	beq.n	8017338 <__ssprint_r+0xd8>
 8017270:	6813      	ldr	r3, [r2, #0]
 8017272:	9303      	str	r3, [sp, #12]
 8017274:	2300      	movs	r3, #0
 8017276:	001f      	movs	r7, r3
 8017278:	9305      	str	r3, [sp, #20]
 801727a:	2f00      	cmp	r7, #0
 801727c:	d02e      	beq.n	80172dc <__ssprint_r+0x7c>
 801727e:	68a5      	ldr	r5, [r4, #8]
 8017280:	42af      	cmp	r7, r5
 8017282:	d347      	bcc.n	8017314 <__ssprint_r+0xb4>
 8017284:	2390      	movs	r3, #144	; 0x90
 8017286:	89a2      	ldrh	r2, [r4, #12]
 8017288:	00db      	lsls	r3, r3, #3
 801728a:	421a      	tst	r2, r3
 801728c:	d042      	beq.n	8017314 <__ssprint_r+0xb4>
 801728e:	2003      	movs	r0, #3
 8017290:	6921      	ldr	r1, [r4, #16]
 8017292:	6823      	ldr	r3, [r4, #0]
 8017294:	1a5b      	subs	r3, r3, r1
 8017296:	9304      	str	r3, [sp, #16]
 8017298:	6963      	ldr	r3, [r4, #20]
 801729a:	4343      	muls	r3, r0
 801729c:	0fd8      	lsrs	r0, r3, #31
 801729e:	18c3      	adds	r3, r0, r3
 80172a0:	105b      	asrs	r3, r3, #1
 80172a2:	9301      	str	r3, [sp, #4]
 80172a4:	9b04      	ldr	r3, [sp, #16]
 80172a6:	9801      	ldr	r0, [sp, #4]
 80172a8:	3301      	adds	r3, #1
 80172aa:	19db      	adds	r3, r3, r7
 80172ac:	4283      	cmp	r3, r0
 80172ae:	d900      	bls.n	80172b2 <__ssprint_r+0x52>
 80172b0:	9301      	str	r3, [sp, #4]
 80172b2:	0553      	lsls	r3, r2, #21
 80172b4:	d544      	bpl.n	8017340 <__ssprint_r+0xe0>
 80172b6:	9901      	ldr	r1, [sp, #4]
 80172b8:	9802      	ldr	r0, [sp, #8]
 80172ba:	f7fb fab7 	bl	801282c <_malloc_r>
 80172be:	1e05      	subs	r5, r0, #0
 80172c0:	d114      	bne.n	80172ec <__ssprint_r+0x8c>
 80172c2:	230c      	movs	r3, #12
 80172c4:	9a02      	ldr	r2, [sp, #8]
 80172c6:	2001      	movs	r0, #1
 80172c8:	6013      	str	r3, [r2, #0]
 80172ca:	2340      	movs	r3, #64	; 0x40
 80172cc:	89a2      	ldrh	r2, [r4, #12]
 80172ce:	4240      	negs	r0, r0
 80172d0:	4313      	orrs	r3, r2
 80172d2:	81a3      	strh	r3, [r4, #12]
 80172d4:	2300      	movs	r3, #0
 80172d6:	60b3      	str	r3, [r6, #8]
 80172d8:	6073      	str	r3, [r6, #4]
 80172da:	e02f      	b.n	801733c <__ssprint_r+0xdc>
 80172dc:	9b03      	ldr	r3, [sp, #12]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	9305      	str	r3, [sp, #20]
 80172e2:	9b03      	ldr	r3, [sp, #12]
 80172e4:	685f      	ldr	r7, [r3, #4]
 80172e6:	3308      	adds	r3, #8
 80172e8:	9303      	str	r3, [sp, #12]
 80172ea:	e7c6      	b.n	801727a <__ssprint_r+0x1a>
 80172ec:	9a04      	ldr	r2, [sp, #16]
 80172ee:	6921      	ldr	r1, [r4, #16]
 80172f0:	f7fb fcd5 	bl	8012c9e <memcpy>
 80172f4:	89a3      	ldrh	r3, [r4, #12]
 80172f6:	4a18      	ldr	r2, [pc, #96]	; (8017358 <__ssprint_r+0xf8>)
 80172f8:	401a      	ands	r2, r3
 80172fa:	2380      	movs	r3, #128	; 0x80
 80172fc:	4313      	orrs	r3, r2
 80172fe:	81a3      	strh	r3, [r4, #12]
 8017300:	9b04      	ldr	r3, [sp, #16]
 8017302:	6125      	str	r5, [r4, #16]
 8017304:	18ed      	adds	r5, r5, r3
 8017306:	6025      	str	r5, [r4, #0]
 8017308:	003d      	movs	r5, r7
 801730a:	9b01      	ldr	r3, [sp, #4]
 801730c:	9a04      	ldr	r2, [sp, #16]
 801730e:	6163      	str	r3, [r4, #20]
 8017310:	1a9b      	subs	r3, r3, r2
 8017312:	60a3      	str	r3, [r4, #8]
 8017314:	42bd      	cmp	r5, r7
 8017316:	d900      	bls.n	801731a <__ssprint_r+0xba>
 8017318:	003d      	movs	r5, r7
 801731a:	002a      	movs	r2, r5
 801731c:	9905      	ldr	r1, [sp, #20]
 801731e:	6820      	ldr	r0, [r4, #0]
 8017320:	f7ff fb91 	bl	8016a46 <memmove>
 8017324:	68a3      	ldr	r3, [r4, #8]
 8017326:	1b5b      	subs	r3, r3, r5
 8017328:	60a3      	str	r3, [r4, #8]
 801732a:	6823      	ldr	r3, [r4, #0]
 801732c:	195d      	adds	r5, r3, r5
 801732e:	68b3      	ldr	r3, [r6, #8]
 8017330:	6025      	str	r5, [r4, #0]
 8017332:	1bdb      	subs	r3, r3, r7
 8017334:	60b3      	str	r3, [r6, #8]
 8017336:	d1d1      	bne.n	80172dc <__ssprint_r+0x7c>
 8017338:	2000      	movs	r0, #0
 801733a:	6070      	str	r0, [r6, #4]
 801733c:	b007      	add	sp, #28
 801733e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017340:	9a01      	ldr	r2, [sp, #4]
 8017342:	9802      	ldr	r0, [sp, #8]
 8017344:	f7fb fcf0 	bl	8012d28 <_realloc_r>
 8017348:	1e05      	subs	r5, r0, #0
 801734a:	d1d9      	bne.n	8017300 <__ssprint_r+0xa0>
 801734c:	6921      	ldr	r1, [r4, #16]
 801734e:	9802      	ldr	r0, [sp, #8]
 8017350:	f7fe ff78 	bl	8016244 <_free_r>
 8017354:	e7b5      	b.n	80172c2 <__ssprint_r+0x62>
 8017356:	46c0      	nop			; (mov r8, r8)
 8017358:	fffffb7f 	.word	0xfffffb7f

0801735c <__register_exitproc>:
 801735c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801735e:	4d29      	ldr	r5, [pc, #164]	; (8017404 <__register_exitproc+0xa8>)
 8017360:	0006      	movs	r6, r0
 8017362:	6828      	ldr	r0, [r5, #0]
 8017364:	9301      	str	r3, [sp, #4]
 8017366:	9100      	str	r1, [sp, #0]
 8017368:	0017      	movs	r7, r2
 801736a:	f7ff fb5f 	bl	8016a2c <__retarget_lock_acquire_recursive>
 801736e:	4b26      	ldr	r3, [pc, #152]	; (8017408 <__register_exitproc+0xac>)
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	001c      	movs	r4, r3
 8017374:	34fc      	adds	r4, #252	; 0xfc
 8017376:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017378:	2800      	cmp	r0, #0
 801737a:	d103      	bne.n	8017384 <__register_exitproc+0x28>
 801737c:	334d      	adds	r3, #77	; 0x4d
 801737e:	33ff      	adds	r3, #255	; 0xff
 8017380:	0018      	movs	r0, r3
 8017382:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017384:	6843      	ldr	r3, [r0, #4]
 8017386:	2b1f      	cmp	r3, #31
 8017388:	dd18      	ble.n	80173bc <__register_exitproc+0x60>
 801738a:	4b20      	ldr	r3, [pc, #128]	; (801740c <__register_exitproc+0xb0>)
 801738c:	2b00      	cmp	r3, #0
 801738e:	d105      	bne.n	801739c <__register_exitproc+0x40>
 8017390:	6828      	ldr	r0, [r5, #0]
 8017392:	f7ff fb4c 	bl	8016a2e <__retarget_lock_release_recursive>
 8017396:	2001      	movs	r0, #1
 8017398:	4240      	negs	r0, r0
 801739a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801739c:	20c8      	movs	r0, #200	; 0xc8
 801739e:	0040      	lsls	r0, r0, #1
 80173a0:	f7fb fa30 	bl	8012804 <malloc>
 80173a4:	2800      	cmp	r0, #0
 80173a6:	d0f3      	beq.n	8017390 <__register_exitproc+0x34>
 80173a8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80173aa:	2300      	movs	r3, #0
 80173ac:	6002      	str	r2, [r0, #0]
 80173ae:	22c4      	movs	r2, #196	; 0xc4
 80173b0:	0052      	lsls	r2, r2, #1
 80173b2:	6043      	str	r3, [r0, #4]
 80173b4:	64e0      	str	r0, [r4, #76]	; 0x4c
 80173b6:	5083      	str	r3, [r0, r2]
 80173b8:	3204      	adds	r2, #4
 80173ba:	5083      	str	r3, [r0, r2]
 80173bc:	6843      	ldr	r3, [r0, #4]
 80173be:	2e00      	cmp	r6, #0
 80173c0:	d014      	beq.n	80173ec <__register_exitproc+0x90>
 80173c2:	009a      	lsls	r2, r3, #2
 80173c4:	1882      	adds	r2, r0, r2
 80173c6:	0011      	movs	r1, r2
 80173c8:	3188      	adds	r1, #136	; 0x88
 80173ca:	600f      	str	r7, [r1, #0]
 80173cc:	2101      	movs	r1, #1
 80173ce:	0004      	movs	r4, r0
 80173d0:	4099      	lsls	r1, r3
 80173d2:	3485      	adds	r4, #133	; 0x85
 80173d4:	34ff      	adds	r4, #255	; 0xff
 80173d6:	6865      	ldr	r5, [r4, #4]
 80173d8:	32fc      	adds	r2, #252	; 0xfc
 80173da:	430d      	orrs	r5, r1
 80173dc:	6065      	str	r5, [r4, #4]
 80173de:	9d01      	ldr	r5, [sp, #4]
 80173e0:	60d5      	str	r5, [r2, #12]
 80173e2:	2e02      	cmp	r6, #2
 80173e4:	d102      	bne.n	80173ec <__register_exitproc+0x90>
 80173e6:	68a2      	ldr	r2, [r4, #8]
 80173e8:	4311      	orrs	r1, r2
 80173ea:	60a1      	str	r1, [r4, #8]
 80173ec:	1c5a      	adds	r2, r3, #1
 80173ee:	6042      	str	r2, [r0, #4]
 80173f0:	3302      	adds	r3, #2
 80173f2:	9a00      	ldr	r2, [sp, #0]
 80173f4:	009b      	lsls	r3, r3, #2
 80173f6:	501a      	str	r2, [r3, r0]
 80173f8:	4b02      	ldr	r3, [pc, #8]	; (8017404 <__register_exitproc+0xa8>)
 80173fa:	6818      	ldr	r0, [r3, #0]
 80173fc:	f7ff fb17 	bl	8016a2e <__retarget_lock_release_recursive>
 8017400:	2000      	movs	r0, #0
 8017402:	e7ca      	b.n	801739a <__register_exitproc+0x3e>
 8017404:	20000a74 	.word	0x20000a74
 8017408:	0801a33c 	.word	0x0801a33c
 801740c:	08012805 	.word	0x08012805

08017410 <_sbrk>:
 8017410:	4b05      	ldr	r3, [pc, #20]	; (8017428 <_sbrk+0x18>)
 8017412:	0002      	movs	r2, r0
 8017414:	6819      	ldr	r1, [r3, #0]
 8017416:	2900      	cmp	r1, #0
 8017418:	d101      	bne.n	801741e <_sbrk+0xe>
 801741a:	4904      	ldr	r1, [pc, #16]	; (801742c <_sbrk+0x1c>)
 801741c:	6019      	str	r1, [r3, #0]
 801741e:	6818      	ldr	r0, [r3, #0]
 8017420:	1882      	adds	r2, r0, r2
 8017422:	601a      	str	r2, [r3, #0]
 8017424:	4770      	bx	lr
 8017426:	46c0      	nop			; (mov r8, r8)
 8017428:	20006e20 	.word	0x20006e20
 801742c:	200073d8 	.word	0x200073d8

08017430 <_init>:
 8017430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017432:	46c0      	nop			; (mov r8, r8)
 8017434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017436:	bc08      	pop	{r3}
 8017438:	469e      	mov	lr, r3
 801743a:	4770      	bx	lr

0801743c <_fini>:
 801743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801743e:	46c0      	nop			; (mov r8, r8)
 8017440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017442:	bc08      	pop	{r3}
 8017444:	469e      	mov	lr, r3
 8017446:	4770      	bx	lr
