
H1ARx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000174ec  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003254  080175a8  080175a8  000275a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a7fc  0801a7fc  00030a78  2**0
                  CONTENTS
  4 .ARM          00000008  0801a7fc  0801a7fc  0002a7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a804  0801a804  00030a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a804  0801a804  0002a804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a80c  0801a80c  0002a80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    00000008  20000000  0801a810  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000a70  20000008  0801a818  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006388  20000a78  0801b288  00030a78  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20006e00  0801b288  00036e00  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030a78  2**0
                  CONTENTS, READONLY
 13 .debug_info   000514e1  00000000  00000000  00030aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000085f1  00000000  00000000  00081f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000193e5  00000000  00000000  0008a572  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001da8  00000000  00000000  000a3958  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001fb0  00000000  00000000  000a5700  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000163ec  00000000  00000000  000a76b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a54c  00000000  00000000  000bda9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000c7fe8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006354  00000000  00000000  000c8064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a78 	.word	0x20000a78
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08017590 	.word	0x08017590

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a7c 	.word	0x20000a7c
 8000100:	08017590 	.word	0x08017590

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc93 	bl	8001d78 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbeb 	bl	8001c38 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc85 	bl	8001d78 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc7b 	bl	8001d78 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc0d 	bl	8001cb0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fc03 	bl	8001cb0 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9f5 	bl	80008b0 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f977 	bl	80007c4 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9e7 	bl	80008b0 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9dd 	bl	80008b0 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f985 	bl	8000814 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f97b 	bl	8000814 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_ulcmp>:
 800052c:	4299      	cmp	r1, r3
 800052e:	d101      	bne.n	8000534 <__aeabi_ulcmp+0x8>
 8000530:	1a80      	subs	r0, r0, r2
 8000532:	d004      	beq.n	800053e <__aeabi_ulcmp+0x12>
 8000534:	d202      	bcs.n	800053c <__aeabi_ulcmp+0x10>
 8000536:	2001      	movs	r0, #1
 8000538:	4240      	negs	r0, r0
 800053a:	4770      	bx	lr
 800053c:	2001      	movs	r0, #1
 800053e:	4770      	bx	lr

08000540 <__aeabi_uldivmod>:
 8000540:	2b00      	cmp	r3, #0
 8000542:	d111      	bne.n	8000568 <__aeabi_uldivmod+0x28>
 8000544:	2a00      	cmp	r2, #0
 8000546:	d10f      	bne.n	8000568 <__aeabi_uldivmod+0x28>
 8000548:	2900      	cmp	r1, #0
 800054a:	d100      	bne.n	800054e <__aeabi_uldivmod+0xe>
 800054c:	2800      	cmp	r0, #0
 800054e:	d002      	beq.n	8000556 <__aeabi_uldivmod+0x16>
 8000550:	2100      	movs	r1, #0
 8000552:	43c9      	mvns	r1, r1
 8000554:	1c08      	adds	r0, r1, #0
 8000556:	b407      	push	{r0, r1, r2}
 8000558:	4802      	ldr	r0, [pc, #8]	; (8000564 <__aeabi_uldivmod+0x24>)
 800055a:	a102      	add	r1, pc, #8	; (adr r1, 8000564 <__aeabi_uldivmod+0x24>)
 800055c:	1840      	adds	r0, r0, r1
 800055e:	9002      	str	r0, [sp, #8]
 8000560:	bd03      	pop	{r0, r1, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	fffffed5 	.word	0xfffffed5
 8000568:	b403      	push	{r0, r1}
 800056a:	4668      	mov	r0, sp
 800056c:	b501      	push	{r0, lr}
 800056e:	9802      	ldr	r0, [sp, #8]
 8000570:	f000 f866 	bl	8000640 <__udivmoddi4>
 8000574:	9b01      	ldr	r3, [sp, #4]
 8000576:	469e      	mov	lr, r3
 8000578:	b002      	add	sp, #8
 800057a:	bc0c      	pop	{r2, r3}
 800057c:	4770      	bx	lr
 800057e:	46c0      	nop			; (mov r8, r8)

08000580 <__aeabi_lmul>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	46ce      	mov	lr, r9
 8000584:	4647      	mov	r7, r8
 8000586:	0415      	lsls	r5, r2, #16
 8000588:	0c2d      	lsrs	r5, r5, #16
 800058a:	002e      	movs	r6, r5
 800058c:	b580      	push	{r7, lr}
 800058e:	0407      	lsls	r7, r0, #16
 8000590:	0c14      	lsrs	r4, r2, #16
 8000592:	0c3f      	lsrs	r7, r7, #16
 8000594:	4699      	mov	r9, r3
 8000596:	0c03      	lsrs	r3, r0, #16
 8000598:	437e      	muls	r6, r7
 800059a:	435d      	muls	r5, r3
 800059c:	4367      	muls	r7, r4
 800059e:	4363      	muls	r3, r4
 80005a0:	197f      	adds	r7, r7, r5
 80005a2:	0c34      	lsrs	r4, r6, #16
 80005a4:	19e4      	adds	r4, r4, r7
 80005a6:	469c      	mov	ip, r3
 80005a8:	42a5      	cmp	r5, r4
 80005aa:	d903      	bls.n	80005b4 <__aeabi_lmul+0x34>
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	025b      	lsls	r3, r3, #9
 80005b0:	4698      	mov	r8, r3
 80005b2:	44c4      	add	ip, r8
 80005b4:	464b      	mov	r3, r9
 80005b6:	4343      	muls	r3, r0
 80005b8:	4351      	muls	r1, r2
 80005ba:	0c25      	lsrs	r5, r4, #16
 80005bc:	0436      	lsls	r6, r6, #16
 80005be:	4465      	add	r5, ip
 80005c0:	0c36      	lsrs	r6, r6, #16
 80005c2:	0424      	lsls	r4, r4, #16
 80005c4:	19a4      	adds	r4, r4, r6
 80005c6:	195b      	adds	r3, r3, r5
 80005c8:	1859      	adds	r1, r3, r1
 80005ca:	0020      	movs	r0, r4
 80005cc:	bc0c      	pop	{r2, r3}
 80005ce:	4690      	mov	r8, r2
 80005d0:	4699      	mov	r9, r3
 80005d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005d4 <__aeabi_f2uiz>:
 80005d4:	219e      	movs	r1, #158	; 0x9e
 80005d6:	b510      	push	{r4, lr}
 80005d8:	05c9      	lsls	r1, r1, #23
 80005da:	1c04      	adds	r4, r0, #0
 80005dc:	f7ff ff9c 	bl	8000518 <__aeabi_fcmpge>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d103      	bne.n	80005ec <__aeabi_f2uiz+0x18>
 80005e4:	1c20      	adds	r0, r4, #0
 80005e6:	f000 fca9 	bl	8000f3c <__aeabi_f2iz>
 80005ea:	bd10      	pop	{r4, pc}
 80005ec:	219e      	movs	r1, #158	; 0x9e
 80005ee:	1c20      	adds	r0, r4, #0
 80005f0:	05c9      	lsls	r1, r1, #23
 80005f2:	f000 fadf 	bl	8000bb4 <__aeabi_fsub>
 80005f6:	f000 fca1 	bl	8000f3c <__aeabi_f2iz>
 80005fa:	2380      	movs	r3, #128	; 0x80
 80005fc:	061b      	lsls	r3, r3, #24
 80005fe:	469c      	mov	ip, r3
 8000600:	4460      	add	r0, ip
 8000602:	e7f2      	b.n	80005ea <__aeabi_f2uiz+0x16>

08000604 <__aeabi_d2uiz>:
 8000604:	b570      	push	{r4, r5, r6, lr}
 8000606:	2200      	movs	r2, #0
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <__aeabi_d2uiz+0x38>)
 800060a:	0004      	movs	r4, r0
 800060c:	000d      	movs	r5, r1
 800060e:	f7ff ff49 	bl	80004a4 <__aeabi_dcmpge>
 8000612:	2800      	cmp	r0, #0
 8000614:	d104      	bne.n	8000620 <__aeabi_d2uiz+0x1c>
 8000616:	0020      	movs	r0, r4
 8000618:	0029      	movs	r1, r5
 800061a:	f002 f9eb 	bl	80029f4 <__aeabi_d2iz>
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <__aeabi_d2uiz+0x38>)
 8000622:	2200      	movs	r2, #0
 8000624:	0020      	movs	r0, r4
 8000626:	0029      	movs	r1, r5
 8000628:	f001 fe80 	bl	800232c <__aeabi_dsub>
 800062c:	f002 f9e2 	bl	80029f4 <__aeabi_d2iz>
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	061b      	lsls	r3, r3, #24
 8000634:	469c      	mov	ip, r3
 8000636:	4460      	add	r0, ip
 8000638:	e7f1      	b.n	800061e <__aeabi_d2uiz+0x1a>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	41e00000 	.word	0x41e00000

08000640 <__udivmoddi4>:
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	464f      	mov	r7, r9
 8000644:	4646      	mov	r6, r8
 8000646:	46d6      	mov	lr, sl
 8000648:	b5c0      	push	{r6, r7, lr}
 800064a:	0004      	movs	r4, r0
 800064c:	b082      	sub	sp, #8
 800064e:	000d      	movs	r5, r1
 8000650:	4691      	mov	r9, r2
 8000652:	4698      	mov	r8, r3
 8000654:	428b      	cmp	r3, r1
 8000656:	d82f      	bhi.n	80006b8 <__udivmoddi4+0x78>
 8000658:	d02c      	beq.n	80006b4 <__udivmoddi4+0x74>
 800065a:	4641      	mov	r1, r8
 800065c:	4648      	mov	r0, r9
 800065e:	f002 fb5f 	bl	8002d20 <__clzdi2>
 8000662:	0029      	movs	r1, r5
 8000664:	0006      	movs	r6, r0
 8000666:	0020      	movs	r0, r4
 8000668:	f002 fb5a 	bl	8002d20 <__clzdi2>
 800066c:	1a33      	subs	r3, r6, r0
 800066e:	469c      	mov	ip, r3
 8000670:	3b20      	subs	r3, #32
 8000672:	469a      	mov	sl, r3
 8000674:	d500      	bpl.n	8000678 <__udivmoddi4+0x38>
 8000676:	e076      	b.n	8000766 <__udivmoddi4+0x126>
 8000678:	464b      	mov	r3, r9
 800067a:	4652      	mov	r2, sl
 800067c:	4093      	lsls	r3, r2
 800067e:	001f      	movs	r7, r3
 8000680:	464b      	mov	r3, r9
 8000682:	4662      	mov	r2, ip
 8000684:	4093      	lsls	r3, r2
 8000686:	001e      	movs	r6, r3
 8000688:	42af      	cmp	r7, r5
 800068a:	d828      	bhi.n	80006de <__udivmoddi4+0x9e>
 800068c:	d025      	beq.n	80006da <__udivmoddi4+0x9a>
 800068e:	4653      	mov	r3, sl
 8000690:	1ba4      	subs	r4, r4, r6
 8000692:	41bd      	sbcs	r5, r7
 8000694:	2b00      	cmp	r3, #0
 8000696:	da00      	bge.n	800069a <__udivmoddi4+0x5a>
 8000698:	e07b      	b.n	8000792 <__udivmoddi4+0x152>
 800069a:	2200      	movs	r2, #0
 800069c:	2300      	movs	r3, #0
 800069e:	9200      	str	r2, [sp, #0]
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	2301      	movs	r3, #1
 80006a4:	4652      	mov	r2, sl
 80006a6:	4093      	lsls	r3, r2
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2301      	movs	r3, #1
 80006ac:	4662      	mov	r2, ip
 80006ae:	4093      	lsls	r3, r2
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	e018      	b.n	80006e6 <__udivmoddi4+0xa6>
 80006b4:	4282      	cmp	r2, r0
 80006b6:	d9d0      	bls.n	800065a <__udivmoddi4+0x1a>
 80006b8:	2200      	movs	r2, #0
 80006ba:	2300      	movs	r3, #0
 80006bc:	9200      	str	r2, [sp, #0]
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <__udivmoddi4+0x8a>
 80006c6:	601c      	str	r4, [r3, #0]
 80006c8:	605d      	str	r5, [r3, #4]
 80006ca:	9800      	ldr	r0, [sp, #0]
 80006cc:	9901      	ldr	r1, [sp, #4]
 80006ce:	b002      	add	sp, #8
 80006d0:	bc1c      	pop	{r2, r3, r4}
 80006d2:	4690      	mov	r8, r2
 80006d4:	4699      	mov	r9, r3
 80006d6:	46a2      	mov	sl, r4
 80006d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006da:	42a3      	cmp	r3, r4
 80006dc:	d9d7      	bls.n	800068e <__udivmoddi4+0x4e>
 80006de:	2200      	movs	r2, #0
 80006e0:	2300      	movs	r3, #0
 80006e2:	9200      	str	r2, [sp, #0]
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	4663      	mov	r3, ip
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0e9      	beq.n	80006c0 <__udivmoddi4+0x80>
 80006ec:	07fb      	lsls	r3, r7, #31
 80006ee:	4698      	mov	r8, r3
 80006f0:	4641      	mov	r1, r8
 80006f2:	0872      	lsrs	r2, r6, #1
 80006f4:	430a      	orrs	r2, r1
 80006f6:	087b      	lsrs	r3, r7, #1
 80006f8:	4666      	mov	r6, ip
 80006fa:	e00e      	b.n	800071a <__udivmoddi4+0xda>
 80006fc:	42ab      	cmp	r3, r5
 80006fe:	d101      	bne.n	8000704 <__udivmoddi4+0xc4>
 8000700:	42a2      	cmp	r2, r4
 8000702:	d80c      	bhi.n	800071e <__udivmoddi4+0xde>
 8000704:	1aa4      	subs	r4, r4, r2
 8000706:	419d      	sbcs	r5, r3
 8000708:	2001      	movs	r0, #1
 800070a:	1924      	adds	r4, r4, r4
 800070c:	416d      	adcs	r5, r5
 800070e:	2100      	movs	r1, #0
 8000710:	3e01      	subs	r6, #1
 8000712:	1824      	adds	r4, r4, r0
 8000714:	414d      	adcs	r5, r1
 8000716:	2e00      	cmp	r6, #0
 8000718:	d006      	beq.n	8000728 <__udivmoddi4+0xe8>
 800071a:	42ab      	cmp	r3, r5
 800071c:	d9ee      	bls.n	80006fc <__udivmoddi4+0xbc>
 800071e:	3e01      	subs	r6, #1
 8000720:	1924      	adds	r4, r4, r4
 8000722:	416d      	adcs	r5, r5
 8000724:	2e00      	cmp	r6, #0
 8000726:	d1f8      	bne.n	800071a <__udivmoddi4+0xda>
 8000728:	9800      	ldr	r0, [sp, #0]
 800072a:	9901      	ldr	r1, [sp, #4]
 800072c:	4653      	mov	r3, sl
 800072e:	1900      	adds	r0, r0, r4
 8000730:	4169      	adcs	r1, r5
 8000732:	2b00      	cmp	r3, #0
 8000734:	db23      	blt.n	800077e <__udivmoddi4+0x13e>
 8000736:	002b      	movs	r3, r5
 8000738:	4652      	mov	r2, sl
 800073a:	40d3      	lsrs	r3, r2
 800073c:	002a      	movs	r2, r5
 800073e:	4664      	mov	r4, ip
 8000740:	40e2      	lsrs	r2, r4
 8000742:	001c      	movs	r4, r3
 8000744:	4653      	mov	r3, sl
 8000746:	0015      	movs	r5, r2
 8000748:	2b00      	cmp	r3, #0
 800074a:	db2d      	blt.n	80007a8 <__udivmoddi4+0x168>
 800074c:	0026      	movs	r6, r4
 800074e:	4657      	mov	r7, sl
 8000750:	40be      	lsls	r6, r7
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4667      	mov	r7, ip
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e7ac      	b.n	80006c0 <__udivmoddi4+0x80>
 8000766:	4662      	mov	r2, ip
 8000768:	2320      	movs	r3, #32
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	464a      	mov	r2, r9
 800076e:	40da      	lsrs	r2, r3
 8000770:	4661      	mov	r1, ip
 8000772:	0013      	movs	r3, r2
 8000774:	4642      	mov	r2, r8
 8000776:	408a      	lsls	r2, r1
 8000778:	0017      	movs	r7, r2
 800077a:	431f      	orrs	r7, r3
 800077c:	e780      	b.n	8000680 <__udivmoddi4+0x40>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	002a      	movs	r2, r5
 8000786:	4666      	mov	r6, ip
 8000788:	409a      	lsls	r2, r3
 800078a:	0023      	movs	r3, r4
 800078c:	40f3      	lsrs	r3, r6
 800078e:	4313      	orrs	r3, r2
 8000790:	e7d4      	b.n	800073c <__udivmoddi4+0xfc>
 8000792:	4662      	mov	r2, ip
 8000794:	2320      	movs	r3, #32
 8000796:	2100      	movs	r1, #0
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	2200      	movs	r2, #0
 800079c:	9100      	str	r1, [sp, #0]
 800079e:	9201      	str	r2, [sp, #4]
 80007a0:	2201      	movs	r2, #1
 80007a2:	40da      	lsrs	r2, r3
 80007a4:	9201      	str	r2, [sp, #4]
 80007a6:	e780      	b.n	80006aa <__udivmoddi4+0x6a>
 80007a8:	2320      	movs	r3, #32
 80007aa:	4662      	mov	r2, ip
 80007ac:	0026      	movs	r6, r4
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	002f      	movs	r7, r5
 80007b4:	46b0      	mov	r8, r6
 80007b6:	4666      	mov	r6, ip
 80007b8:	40b7      	lsls	r7, r6
 80007ba:	4646      	mov	r6, r8
 80007bc:	003b      	movs	r3, r7
 80007be:	4333      	orrs	r3, r6
 80007c0:	e7c8      	b.n	8000754 <__udivmoddi4+0x114>
 80007c2:	46c0      	nop			; (mov r8, r8)

080007c4 <__eqsf2>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	0042      	lsls	r2, r0, #1
 80007c8:	024e      	lsls	r6, r1, #9
 80007ca:	004c      	lsls	r4, r1, #1
 80007cc:	0245      	lsls	r5, r0, #9
 80007ce:	0a6d      	lsrs	r5, r5, #9
 80007d0:	0e12      	lsrs	r2, r2, #24
 80007d2:	0fc3      	lsrs	r3, r0, #31
 80007d4:	0a76      	lsrs	r6, r6, #9
 80007d6:	0e24      	lsrs	r4, r4, #24
 80007d8:	0fc9      	lsrs	r1, r1, #31
 80007da:	2aff      	cmp	r2, #255	; 0xff
 80007dc:	d00f      	beq.n	80007fe <__eqsf2+0x3a>
 80007de:	2cff      	cmp	r4, #255	; 0xff
 80007e0:	d011      	beq.n	8000806 <__eqsf2+0x42>
 80007e2:	2001      	movs	r0, #1
 80007e4:	42a2      	cmp	r2, r4
 80007e6:	d000      	beq.n	80007ea <__eqsf2+0x26>
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	42b5      	cmp	r5, r6
 80007ec:	d1fc      	bne.n	80007e8 <__eqsf2+0x24>
 80007ee:	428b      	cmp	r3, r1
 80007f0:	d00d      	beq.n	800080e <__eqsf2+0x4a>
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d1f8      	bne.n	80007e8 <__eqsf2+0x24>
 80007f6:	0028      	movs	r0, r5
 80007f8:	1e45      	subs	r5, r0, #1
 80007fa:	41a8      	sbcs	r0, r5
 80007fc:	e7f4      	b.n	80007e8 <__eqsf2+0x24>
 80007fe:	2001      	movs	r0, #1
 8000800:	2d00      	cmp	r5, #0
 8000802:	d1f1      	bne.n	80007e8 <__eqsf2+0x24>
 8000804:	e7eb      	b.n	80007de <__eqsf2+0x1a>
 8000806:	2001      	movs	r0, #1
 8000808:	2e00      	cmp	r6, #0
 800080a:	d1ed      	bne.n	80007e8 <__eqsf2+0x24>
 800080c:	e7e9      	b.n	80007e2 <__eqsf2+0x1e>
 800080e:	2000      	movs	r0, #0
 8000810:	e7ea      	b.n	80007e8 <__eqsf2+0x24>
 8000812:	46c0      	nop			; (mov r8, r8)

08000814 <__gesf2>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	004a      	lsls	r2, r1, #1
 8000818:	024e      	lsls	r6, r1, #9
 800081a:	0245      	lsls	r5, r0, #9
 800081c:	0044      	lsls	r4, r0, #1
 800081e:	0a6d      	lsrs	r5, r5, #9
 8000820:	0e24      	lsrs	r4, r4, #24
 8000822:	0fc3      	lsrs	r3, r0, #31
 8000824:	0a76      	lsrs	r6, r6, #9
 8000826:	0e12      	lsrs	r2, r2, #24
 8000828:	0fc9      	lsrs	r1, r1, #31
 800082a:	2cff      	cmp	r4, #255	; 0xff
 800082c:	d015      	beq.n	800085a <__gesf2+0x46>
 800082e:	2aff      	cmp	r2, #255	; 0xff
 8000830:	d00e      	beq.n	8000850 <__gesf2+0x3c>
 8000832:	2c00      	cmp	r4, #0
 8000834:	d115      	bne.n	8000862 <__gesf2+0x4e>
 8000836:	2a00      	cmp	r2, #0
 8000838:	d101      	bne.n	800083e <__gesf2+0x2a>
 800083a:	2e00      	cmp	r6, #0
 800083c:	d01c      	beq.n	8000878 <__gesf2+0x64>
 800083e:	2d00      	cmp	r5, #0
 8000840:	d014      	beq.n	800086c <__gesf2+0x58>
 8000842:	428b      	cmp	r3, r1
 8000844:	d027      	beq.n	8000896 <__gesf2+0x82>
 8000846:	2002      	movs	r0, #2
 8000848:	3b01      	subs	r3, #1
 800084a:	4018      	ands	r0, r3
 800084c:	3801      	subs	r0, #1
 800084e:	bd70      	pop	{r4, r5, r6, pc}
 8000850:	2e00      	cmp	r6, #0
 8000852:	d0ee      	beq.n	8000832 <__gesf2+0x1e>
 8000854:	2002      	movs	r0, #2
 8000856:	4240      	negs	r0, r0
 8000858:	e7f9      	b.n	800084e <__gesf2+0x3a>
 800085a:	2d00      	cmp	r5, #0
 800085c:	d1fa      	bne.n	8000854 <__gesf2+0x40>
 800085e:	2aff      	cmp	r2, #255	; 0xff
 8000860:	d00e      	beq.n	8000880 <__gesf2+0x6c>
 8000862:	2a00      	cmp	r2, #0
 8000864:	d10e      	bne.n	8000884 <__gesf2+0x70>
 8000866:	2e00      	cmp	r6, #0
 8000868:	d0ed      	beq.n	8000846 <__gesf2+0x32>
 800086a:	e00b      	b.n	8000884 <__gesf2+0x70>
 800086c:	2301      	movs	r3, #1
 800086e:	3901      	subs	r1, #1
 8000870:	4399      	bics	r1, r3
 8000872:	0008      	movs	r0, r1
 8000874:	3001      	adds	r0, #1
 8000876:	e7ea      	b.n	800084e <__gesf2+0x3a>
 8000878:	2000      	movs	r0, #0
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e7      	beq.n	800084e <__gesf2+0x3a>
 800087e:	e7e2      	b.n	8000846 <__gesf2+0x32>
 8000880:	2e00      	cmp	r6, #0
 8000882:	d1e7      	bne.n	8000854 <__gesf2+0x40>
 8000884:	428b      	cmp	r3, r1
 8000886:	d1de      	bne.n	8000846 <__gesf2+0x32>
 8000888:	4294      	cmp	r4, r2
 800088a:	dd05      	ble.n	8000898 <__gesf2+0x84>
 800088c:	2102      	movs	r1, #2
 800088e:	1e58      	subs	r0, r3, #1
 8000890:	4008      	ands	r0, r1
 8000892:	3801      	subs	r0, #1
 8000894:	e7db      	b.n	800084e <__gesf2+0x3a>
 8000896:	2400      	movs	r4, #0
 8000898:	42a2      	cmp	r2, r4
 800089a:	dc04      	bgt.n	80008a6 <__gesf2+0x92>
 800089c:	42b5      	cmp	r5, r6
 800089e:	d8d2      	bhi.n	8000846 <__gesf2+0x32>
 80008a0:	2000      	movs	r0, #0
 80008a2:	42b5      	cmp	r5, r6
 80008a4:	d2d3      	bcs.n	800084e <__gesf2+0x3a>
 80008a6:	1e58      	subs	r0, r3, #1
 80008a8:	2301      	movs	r3, #1
 80008aa:	4398      	bics	r0, r3
 80008ac:	3001      	adds	r0, #1
 80008ae:	e7ce      	b.n	800084e <__gesf2+0x3a>

080008b0 <__lesf2>:
 80008b0:	b530      	push	{r4, r5, lr}
 80008b2:	0042      	lsls	r2, r0, #1
 80008b4:	0244      	lsls	r4, r0, #9
 80008b6:	024d      	lsls	r5, r1, #9
 80008b8:	0fc3      	lsrs	r3, r0, #31
 80008ba:	0048      	lsls	r0, r1, #1
 80008bc:	0a64      	lsrs	r4, r4, #9
 80008be:	0e12      	lsrs	r2, r2, #24
 80008c0:	0a6d      	lsrs	r5, r5, #9
 80008c2:	0e00      	lsrs	r0, r0, #24
 80008c4:	0fc9      	lsrs	r1, r1, #31
 80008c6:	2aff      	cmp	r2, #255	; 0xff
 80008c8:	d012      	beq.n	80008f0 <__lesf2+0x40>
 80008ca:	28ff      	cmp	r0, #255	; 0xff
 80008cc:	d00c      	beq.n	80008e8 <__lesf2+0x38>
 80008ce:	2a00      	cmp	r2, #0
 80008d0:	d112      	bne.n	80008f8 <__lesf2+0x48>
 80008d2:	2800      	cmp	r0, #0
 80008d4:	d119      	bne.n	800090a <__lesf2+0x5a>
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d117      	bne.n	800090a <__lesf2+0x5a>
 80008da:	2c00      	cmp	r4, #0
 80008dc:	d02b      	beq.n	8000936 <__lesf2+0x86>
 80008de:	2002      	movs	r0, #2
 80008e0:	3b01      	subs	r3, #1
 80008e2:	4018      	ands	r0, r3
 80008e4:	3801      	subs	r0, #1
 80008e6:	e026      	b.n	8000936 <__lesf2+0x86>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d0f0      	beq.n	80008ce <__lesf2+0x1e>
 80008ec:	2002      	movs	r0, #2
 80008ee:	e022      	b.n	8000936 <__lesf2+0x86>
 80008f0:	2c00      	cmp	r4, #0
 80008f2:	d1fb      	bne.n	80008ec <__lesf2+0x3c>
 80008f4:	28ff      	cmp	r0, #255	; 0xff
 80008f6:	d01f      	beq.n	8000938 <__lesf2+0x88>
 80008f8:	2800      	cmp	r0, #0
 80008fa:	d11f      	bne.n	800093c <__lesf2+0x8c>
 80008fc:	2d00      	cmp	r5, #0
 80008fe:	d11d      	bne.n	800093c <__lesf2+0x8c>
 8000900:	2002      	movs	r0, #2
 8000902:	3b01      	subs	r3, #1
 8000904:	4018      	ands	r0, r3
 8000906:	3801      	subs	r0, #1
 8000908:	e015      	b.n	8000936 <__lesf2+0x86>
 800090a:	2c00      	cmp	r4, #0
 800090c:	d00e      	beq.n	800092c <__lesf2+0x7c>
 800090e:	428b      	cmp	r3, r1
 8000910:	d1e5      	bne.n	80008de <__lesf2+0x2e>
 8000912:	2200      	movs	r2, #0
 8000914:	4290      	cmp	r0, r2
 8000916:	dc04      	bgt.n	8000922 <__lesf2+0x72>
 8000918:	42ac      	cmp	r4, r5
 800091a:	d8e0      	bhi.n	80008de <__lesf2+0x2e>
 800091c:	2000      	movs	r0, #0
 800091e:	42ac      	cmp	r4, r5
 8000920:	d209      	bcs.n	8000936 <__lesf2+0x86>
 8000922:	1e58      	subs	r0, r3, #1
 8000924:	2301      	movs	r3, #1
 8000926:	4398      	bics	r0, r3
 8000928:	3001      	adds	r0, #1
 800092a:	e004      	b.n	8000936 <__lesf2+0x86>
 800092c:	2301      	movs	r3, #1
 800092e:	3901      	subs	r1, #1
 8000930:	4399      	bics	r1, r3
 8000932:	0008      	movs	r0, r1
 8000934:	3001      	adds	r0, #1
 8000936:	bd30      	pop	{r4, r5, pc}
 8000938:	2d00      	cmp	r5, #0
 800093a:	d1d7      	bne.n	80008ec <__lesf2+0x3c>
 800093c:	428b      	cmp	r3, r1
 800093e:	d1ce      	bne.n	80008de <__lesf2+0x2e>
 8000940:	4282      	cmp	r2, r0
 8000942:	dde7      	ble.n	8000914 <__lesf2+0x64>
 8000944:	2102      	movs	r1, #2
 8000946:	1e58      	subs	r0, r3, #1
 8000948:	4008      	ands	r0, r1
 800094a:	3801      	subs	r0, #1
 800094c:	e7f3      	b.n	8000936 <__lesf2+0x86>
 800094e:	46c0      	nop			; (mov r8, r8)

08000950 <__aeabi_fmul>:
 8000950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000952:	464e      	mov	r6, r9
 8000954:	4657      	mov	r7, sl
 8000956:	4645      	mov	r5, r8
 8000958:	46de      	mov	lr, fp
 800095a:	b5e0      	push	{r5, r6, r7, lr}
 800095c:	0243      	lsls	r3, r0, #9
 800095e:	0a5b      	lsrs	r3, r3, #9
 8000960:	0045      	lsls	r5, r0, #1
 8000962:	b083      	sub	sp, #12
 8000964:	1c0f      	adds	r7, r1, #0
 8000966:	4699      	mov	r9, r3
 8000968:	0e2d      	lsrs	r5, r5, #24
 800096a:	0fc6      	lsrs	r6, r0, #31
 800096c:	2d00      	cmp	r5, #0
 800096e:	d057      	beq.n	8000a20 <__aeabi_fmul+0xd0>
 8000970:	2dff      	cmp	r5, #255	; 0xff
 8000972:	d024      	beq.n	80009be <__aeabi_fmul+0x6e>
 8000974:	2080      	movs	r0, #128	; 0x80
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	04c0      	lsls	r0, r0, #19
 800097a:	4318      	orrs	r0, r3
 800097c:	2300      	movs	r3, #0
 800097e:	4681      	mov	r9, r0
 8000980:	469a      	mov	sl, r3
 8000982:	469b      	mov	fp, r3
 8000984:	3d7f      	subs	r5, #127	; 0x7f
 8000986:	027c      	lsls	r4, r7, #9
 8000988:	007a      	lsls	r2, r7, #1
 800098a:	0ffb      	lsrs	r3, r7, #31
 800098c:	0a64      	lsrs	r4, r4, #9
 800098e:	0e12      	lsrs	r2, r2, #24
 8000990:	4698      	mov	r8, r3
 8000992:	d023      	beq.n	80009dc <__aeabi_fmul+0x8c>
 8000994:	2aff      	cmp	r2, #255	; 0xff
 8000996:	d04b      	beq.n	8000a30 <__aeabi_fmul+0xe0>
 8000998:	00e3      	lsls	r3, r4, #3
 800099a:	2480      	movs	r4, #128	; 0x80
 800099c:	2000      	movs	r0, #0
 800099e:	04e4      	lsls	r4, r4, #19
 80009a0:	3a7f      	subs	r2, #127	; 0x7f
 80009a2:	431c      	orrs	r4, r3
 80009a4:	18ad      	adds	r5, r5, r2
 80009a6:	1c6b      	adds	r3, r5, #1
 80009a8:	4647      	mov	r7, r8
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	4653      	mov	r3, sl
 80009ae:	4077      	eors	r7, r6
 80009b0:	003a      	movs	r2, r7
 80009b2:	2b0f      	cmp	r3, #15
 80009b4:	d848      	bhi.n	8000a48 <__aeabi_fmul+0xf8>
 80009b6:	497d      	ldr	r1, [pc, #500]	; (8000bac <__aeabi_fmul+0x25c>)
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	58cb      	ldr	r3, [r1, r3]
 80009bc:	469f      	mov	pc, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d000      	beq.n	80009c4 <__aeabi_fmul+0x74>
 80009c2:	e085      	b.n	8000ad0 <__aeabi_fmul+0x180>
 80009c4:	3308      	adds	r3, #8
 80009c6:	469a      	mov	sl, r3
 80009c8:	3b06      	subs	r3, #6
 80009ca:	469b      	mov	fp, r3
 80009cc:	027c      	lsls	r4, r7, #9
 80009ce:	007a      	lsls	r2, r7, #1
 80009d0:	0ffb      	lsrs	r3, r7, #31
 80009d2:	25ff      	movs	r5, #255	; 0xff
 80009d4:	0a64      	lsrs	r4, r4, #9
 80009d6:	0e12      	lsrs	r2, r2, #24
 80009d8:	4698      	mov	r8, r3
 80009da:	d1db      	bne.n	8000994 <__aeabi_fmul+0x44>
 80009dc:	2c00      	cmp	r4, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fmul+0x92>
 80009e0:	e090      	b.n	8000b04 <__aeabi_fmul+0x1b4>
 80009e2:	4652      	mov	r2, sl
 80009e4:	2301      	movs	r3, #1
 80009e6:	431a      	orrs	r2, r3
 80009e8:	4692      	mov	sl, r2
 80009ea:	2001      	movs	r0, #1
 80009ec:	e7db      	b.n	80009a6 <__aeabi_fmul+0x56>
 80009ee:	464c      	mov	r4, r9
 80009f0:	4658      	mov	r0, fp
 80009f2:	0017      	movs	r7, r2
 80009f4:	2802      	cmp	r0, #2
 80009f6:	d024      	beq.n	8000a42 <__aeabi_fmul+0xf2>
 80009f8:	2803      	cmp	r0, #3
 80009fa:	d100      	bne.n	80009fe <__aeabi_fmul+0xae>
 80009fc:	e0cf      	b.n	8000b9e <__aeabi_fmul+0x24e>
 80009fe:	2200      	movs	r2, #0
 8000a00:	2300      	movs	r3, #0
 8000a02:	2801      	cmp	r0, #1
 8000a04:	d14d      	bne.n	8000aa2 <__aeabi_fmul+0x152>
 8000a06:	0258      	lsls	r0, r3, #9
 8000a08:	05d2      	lsls	r2, r2, #23
 8000a0a:	0a40      	lsrs	r0, r0, #9
 8000a0c:	07ff      	lsls	r7, r7, #31
 8000a0e:	4310      	orrs	r0, r2
 8000a10:	4338      	orrs	r0, r7
 8000a12:	b003      	add	sp, #12
 8000a14:	bc3c      	pop	{r2, r3, r4, r5}
 8000a16:	4690      	mov	r8, r2
 8000a18:	4699      	mov	r9, r3
 8000a1a:	46a2      	mov	sl, r4
 8000a1c:	46ab      	mov	fp, r5
 8000a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d15b      	bne.n	8000adc <__aeabi_fmul+0x18c>
 8000a24:	2304      	movs	r3, #4
 8000a26:	469a      	mov	sl, r3
 8000a28:	3b03      	subs	r3, #3
 8000a2a:	2500      	movs	r5, #0
 8000a2c:	469b      	mov	fp, r3
 8000a2e:	e7aa      	b.n	8000986 <__aeabi_fmul+0x36>
 8000a30:	35ff      	adds	r5, #255	; 0xff
 8000a32:	2c00      	cmp	r4, #0
 8000a34:	d160      	bne.n	8000af8 <__aeabi_fmul+0x1a8>
 8000a36:	4652      	mov	r2, sl
 8000a38:	2302      	movs	r3, #2
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	4692      	mov	sl, r2
 8000a3e:	2002      	movs	r0, #2
 8000a40:	e7b1      	b.n	80009a6 <__aeabi_fmul+0x56>
 8000a42:	22ff      	movs	r2, #255	; 0xff
 8000a44:	2300      	movs	r3, #0
 8000a46:	e7de      	b.n	8000a06 <__aeabi_fmul+0xb6>
 8000a48:	464b      	mov	r3, r9
 8000a4a:	0c1b      	lsrs	r3, r3, #16
 8000a4c:	469c      	mov	ip, r3
 8000a4e:	464b      	mov	r3, r9
 8000a50:	0426      	lsls	r6, r4, #16
 8000a52:	0c36      	lsrs	r6, r6, #16
 8000a54:	0418      	lsls	r0, r3, #16
 8000a56:	4661      	mov	r1, ip
 8000a58:	0033      	movs	r3, r6
 8000a5a:	0c22      	lsrs	r2, r4, #16
 8000a5c:	4664      	mov	r4, ip
 8000a5e:	0c00      	lsrs	r0, r0, #16
 8000a60:	4343      	muls	r3, r0
 8000a62:	434e      	muls	r6, r1
 8000a64:	4350      	muls	r0, r2
 8000a66:	4354      	muls	r4, r2
 8000a68:	1980      	adds	r0, r0, r6
 8000a6a:	0c1a      	lsrs	r2, r3, #16
 8000a6c:	1812      	adds	r2, r2, r0
 8000a6e:	4296      	cmp	r6, r2
 8000a70:	d903      	bls.n	8000a7a <__aeabi_fmul+0x12a>
 8000a72:	2180      	movs	r1, #128	; 0x80
 8000a74:	0249      	lsls	r1, r1, #9
 8000a76:	468c      	mov	ip, r1
 8000a78:	4464      	add	r4, ip
 8000a7a:	041b      	lsls	r3, r3, #16
 8000a7c:	0c1b      	lsrs	r3, r3, #16
 8000a7e:	0410      	lsls	r0, r2, #16
 8000a80:	18c0      	adds	r0, r0, r3
 8000a82:	0183      	lsls	r3, r0, #6
 8000a84:	1e5e      	subs	r6, r3, #1
 8000a86:	41b3      	sbcs	r3, r6
 8000a88:	0e80      	lsrs	r0, r0, #26
 8000a8a:	4318      	orrs	r0, r3
 8000a8c:	0c13      	lsrs	r3, r2, #16
 8000a8e:	191b      	adds	r3, r3, r4
 8000a90:	019b      	lsls	r3, r3, #6
 8000a92:	4303      	orrs	r3, r0
 8000a94:	001c      	movs	r4, r3
 8000a96:	0123      	lsls	r3, r4, #4
 8000a98:	d579      	bpl.n	8000b8e <__aeabi_fmul+0x23e>
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	0862      	lsrs	r2, r4, #1
 8000a9e:	401c      	ands	r4, r3
 8000aa0:	4314      	orrs	r4, r2
 8000aa2:	9a01      	ldr	r2, [sp, #4]
 8000aa4:	327f      	adds	r2, #127	; 0x7f
 8000aa6:	2a00      	cmp	r2, #0
 8000aa8:	dd4d      	ble.n	8000b46 <__aeabi_fmul+0x1f6>
 8000aaa:	0763      	lsls	r3, r4, #29
 8000aac:	d004      	beq.n	8000ab8 <__aeabi_fmul+0x168>
 8000aae:	230f      	movs	r3, #15
 8000ab0:	4023      	ands	r3, r4
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d000      	beq.n	8000ab8 <__aeabi_fmul+0x168>
 8000ab6:	3404      	adds	r4, #4
 8000ab8:	0123      	lsls	r3, r4, #4
 8000aba:	d503      	bpl.n	8000ac4 <__aeabi_fmul+0x174>
 8000abc:	4b3c      	ldr	r3, [pc, #240]	; (8000bb0 <__aeabi_fmul+0x260>)
 8000abe:	9a01      	ldr	r2, [sp, #4]
 8000ac0:	401c      	ands	r4, r3
 8000ac2:	3280      	adds	r2, #128	; 0x80
 8000ac4:	2afe      	cmp	r2, #254	; 0xfe
 8000ac6:	dcbc      	bgt.n	8000a42 <__aeabi_fmul+0xf2>
 8000ac8:	01a3      	lsls	r3, r4, #6
 8000aca:	0a5b      	lsrs	r3, r3, #9
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	e79a      	b.n	8000a06 <__aeabi_fmul+0xb6>
 8000ad0:	230c      	movs	r3, #12
 8000ad2:	469a      	mov	sl, r3
 8000ad4:	3b09      	subs	r3, #9
 8000ad6:	25ff      	movs	r5, #255	; 0xff
 8000ad8:	469b      	mov	fp, r3
 8000ada:	e754      	b.n	8000986 <__aeabi_fmul+0x36>
 8000adc:	0018      	movs	r0, r3
 8000ade:	f002 f901 	bl	8002ce4 <__clzsi2>
 8000ae2:	464a      	mov	r2, r9
 8000ae4:	1f43      	subs	r3, r0, #5
 8000ae6:	2576      	movs	r5, #118	; 0x76
 8000ae8:	409a      	lsls	r2, r3
 8000aea:	2300      	movs	r3, #0
 8000aec:	426d      	negs	r5, r5
 8000aee:	4691      	mov	r9, r2
 8000af0:	1a2d      	subs	r5, r5, r0
 8000af2:	469a      	mov	sl, r3
 8000af4:	469b      	mov	fp, r3
 8000af6:	e746      	b.n	8000986 <__aeabi_fmul+0x36>
 8000af8:	4652      	mov	r2, sl
 8000afa:	2303      	movs	r3, #3
 8000afc:	431a      	orrs	r2, r3
 8000afe:	4692      	mov	sl, r2
 8000b00:	2003      	movs	r0, #3
 8000b02:	e750      	b.n	80009a6 <__aeabi_fmul+0x56>
 8000b04:	0020      	movs	r0, r4
 8000b06:	f002 f8ed 	bl	8002ce4 <__clzsi2>
 8000b0a:	1f43      	subs	r3, r0, #5
 8000b0c:	1a2d      	subs	r5, r5, r0
 8000b0e:	409c      	lsls	r4, r3
 8000b10:	3d76      	subs	r5, #118	; 0x76
 8000b12:	2000      	movs	r0, #0
 8000b14:	e747      	b.n	80009a6 <__aeabi_fmul+0x56>
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	2700      	movs	r7, #0
 8000b1a:	03db      	lsls	r3, r3, #15
 8000b1c:	22ff      	movs	r2, #255	; 0xff
 8000b1e:	e772      	b.n	8000a06 <__aeabi_fmul+0xb6>
 8000b20:	4642      	mov	r2, r8
 8000b22:	e766      	b.n	80009f2 <__aeabi_fmul+0xa2>
 8000b24:	464c      	mov	r4, r9
 8000b26:	0032      	movs	r2, r6
 8000b28:	4658      	mov	r0, fp
 8000b2a:	e762      	b.n	80009f2 <__aeabi_fmul+0xa2>
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	464a      	mov	r2, r9
 8000b30:	03db      	lsls	r3, r3, #15
 8000b32:	421a      	tst	r2, r3
 8000b34:	d022      	beq.n	8000b7c <__aeabi_fmul+0x22c>
 8000b36:	421c      	tst	r4, r3
 8000b38:	d120      	bne.n	8000b7c <__aeabi_fmul+0x22c>
 8000b3a:	4323      	orrs	r3, r4
 8000b3c:	025b      	lsls	r3, r3, #9
 8000b3e:	0a5b      	lsrs	r3, r3, #9
 8000b40:	4647      	mov	r7, r8
 8000b42:	22ff      	movs	r2, #255	; 0xff
 8000b44:	e75f      	b.n	8000a06 <__aeabi_fmul+0xb6>
 8000b46:	2301      	movs	r3, #1
 8000b48:	1a9a      	subs	r2, r3, r2
 8000b4a:	2a1b      	cmp	r2, #27
 8000b4c:	dc21      	bgt.n	8000b92 <__aeabi_fmul+0x242>
 8000b4e:	0023      	movs	r3, r4
 8000b50:	9901      	ldr	r1, [sp, #4]
 8000b52:	40d3      	lsrs	r3, r2
 8000b54:	319e      	adds	r1, #158	; 0x9e
 8000b56:	408c      	lsls	r4, r1
 8000b58:	001a      	movs	r2, r3
 8000b5a:	0023      	movs	r3, r4
 8000b5c:	1e5c      	subs	r4, r3, #1
 8000b5e:	41a3      	sbcs	r3, r4
 8000b60:	4313      	orrs	r3, r2
 8000b62:	075a      	lsls	r2, r3, #29
 8000b64:	d004      	beq.n	8000b70 <__aeabi_fmul+0x220>
 8000b66:	220f      	movs	r2, #15
 8000b68:	401a      	ands	r2, r3
 8000b6a:	2a04      	cmp	r2, #4
 8000b6c:	d000      	beq.n	8000b70 <__aeabi_fmul+0x220>
 8000b6e:	3304      	adds	r3, #4
 8000b70:	015a      	lsls	r2, r3, #5
 8000b72:	d411      	bmi.n	8000b98 <__aeabi_fmul+0x248>
 8000b74:	019b      	lsls	r3, r3, #6
 8000b76:	0a5b      	lsrs	r3, r3, #9
 8000b78:	2200      	movs	r2, #0
 8000b7a:	e744      	b.n	8000a06 <__aeabi_fmul+0xb6>
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	464a      	mov	r2, r9
 8000b80:	03db      	lsls	r3, r3, #15
 8000b82:	4313      	orrs	r3, r2
 8000b84:	025b      	lsls	r3, r3, #9
 8000b86:	0a5b      	lsrs	r3, r3, #9
 8000b88:	0037      	movs	r7, r6
 8000b8a:	22ff      	movs	r2, #255	; 0xff
 8000b8c:	e73b      	b.n	8000a06 <__aeabi_fmul+0xb6>
 8000b8e:	9501      	str	r5, [sp, #4]
 8000b90:	e787      	b.n	8000aa2 <__aeabi_fmul+0x152>
 8000b92:	2200      	movs	r2, #0
 8000b94:	2300      	movs	r3, #0
 8000b96:	e736      	b.n	8000a06 <__aeabi_fmul+0xb6>
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e733      	b.n	8000a06 <__aeabi_fmul+0xb6>
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	03db      	lsls	r3, r3, #15
 8000ba2:	4323      	orrs	r3, r4
 8000ba4:	025b      	lsls	r3, r3, #9
 8000ba6:	0a5b      	lsrs	r3, r3, #9
 8000ba8:	22ff      	movs	r2, #255	; 0xff
 8000baa:	e72c      	b.n	8000a06 <__aeabi_fmul+0xb6>
 8000bac:	08017c54 	.word	0x08017c54
 8000bb0:	f7ffffff 	.word	0xf7ffffff

08000bb4 <__aeabi_fsub>:
 8000bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb6:	4647      	mov	r7, r8
 8000bb8:	46ce      	mov	lr, r9
 8000bba:	0044      	lsls	r4, r0, #1
 8000bbc:	0fc2      	lsrs	r2, r0, #31
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	0247      	lsls	r7, r0, #9
 8000bc2:	0248      	lsls	r0, r1, #9
 8000bc4:	0a40      	lsrs	r0, r0, #9
 8000bc6:	4684      	mov	ip, r0
 8000bc8:	4666      	mov	r6, ip
 8000bca:	0048      	lsls	r0, r1, #1
 8000bcc:	0a7f      	lsrs	r7, r7, #9
 8000bce:	0e24      	lsrs	r4, r4, #24
 8000bd0:	00f6      	lsls	r6, r6, #3
 8000bd2:	0025      	movs	r5, r4
 8000bd4:	4690      	mov	r8, r2
 8000bd6:	00fb      	lsls	r3, r7, #3
 8000bd8:	0e00      	lsrs	r0, r0, #24
 8000bda:	0fc9      	lsrs	r1, r1, #31
 8000bdc:	46b1      	mov	r9, r6
 8000bde:	28ff      	cmp	r0, #255	; 0xff
 8000be0:	d100      	bne.n	8000be4 <__aeabi_fsub+0x30>
 8000be2:	e085      	b.n	8000cf0 <__aeabi_fsub+0x13c>
 8000be4:	2601      	movs	r6, #1
 8000be6:	4071      	eors	r1, r6
 8000be8:	1a26      	subs	r6, r4, r0
 8000bea:	4291      	cmp	r1, r2
 8000bec:	d057      	beq.n	8000c9e <__aeabi_fsub+0xea>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	dd43      	ble.n	8000c7a <__aeabi_fsub+0xc6>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d000      	beq.n	8000bf8 <__aeabi_fsub+0x44>
 8000bf6:	e07f      	b.n	8000cf8 <__aeabi_fsub+0x144>
 8000bf8:	4649      	mov	r1, r9
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_fsub+0x4c>
 8000bfe:	e0aa      	b.n	8000d56 <__aeabi_fsub+0x1a2>
 8000c00:	3e01      	subs	r6, #1
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d000      	beq.n	8000c08 <__aeabi_fsub+0x54>
 8000c06:	e0f7      	b.n	8000df8 <__aeabi_fsub+0x244>
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	015a      	lsls	r2, r3, #5
 8000c0c:	d400      	bmi.n	8000c10 <__aeabi_fsub+0x5c>
 8000c0e:	e08b      	b.n	8000d28 <__aeabi_fsub+0x174>
 8000c10:	019b      	lsls	r3, r3, #6
 8000c12:	099c      	lsrs	r4, r3, #6
 8000c14:	0020      	movs	r0, r4
 8000c16:	f002 f865 	bl	8002ce4 <__clzsi2>
 8000c1a:	3805      	subs	r0, #5
 8000c1c:	4084      	lsls	r4, r0
 8000c1e:	4285      	cmp	r5, r0
 8000c20:	dd00      	ble.n	8000c24 <__aeabi_fsub+0x70>
 8000c22:	e0d3      	b.n	8000dcc <__aeabi_fsub+0x218>
 8000c24:	1b45      	subs	r5, r0, r5
 8000c26:	0023      	movs	r3, r4
 8000c28:	2020      	movs	r0, #32
 8000c2a:	3501      	adds	r5, #1
 8000c2c:	40eb      	lsrs	r3, r5
 8000c2e:	1b45      	subs	r5, r0, r5
 8000c30:	40ac      	lsls	r4, r5
 8000c32:	1e62      	subs	r2, r4, #1
 8000c34:	4194      	sbcs	r4, r2
 8000c36:	4323      	orrs	r3, r4
 8000c38:	2407      	movs	r4, #7
 8000c3a:	2500      	movs	r5, #0
 8000c3c:	401c      	ands	r4, r3
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4641      	mov	r1, r8
 8000c42:	400a      	ands	r2, r1
 8000c44:	2c00      	cmp	r4, #0
 8000c46:	d004      	beq.n	8000c52 <__aeabi_fsub+0x9e>
 8000c48:	210f      	movs	r1, #15
 8000c4a:	4019      	ands	r1, r3
 8000c4c:	2904      	cmp	r1, #4
 8000c4e:	d000      	beq.n	8000c52 <__aeabi_fsub+0x9e>
 8000c50:	3304      	adds	r3, #4
 8000c52:	0159      	lsls	r1, r3, #5
 8000c54:	d400      	bmi.n	8000c58 <__aeabi_fsub+0xa4>
 8000c56:	e080      	b.n	8000d5a <__aeabi_fsub+0x1a6>
 8000c58:	3501      	adds	r5, #1
 8000c5a:	b2ec      	uxtb	r4, r5
 8000c5c:	2dff      	cmp	r5, #255	; 0xff
 8000c5e:	d000      	beq.n	8000c62 <__aeabi_fsub+0xae>
 8000c60:	e0a3      	b.n	8000daa <__aeabi_fsub+0x1f6>
 8000c62:	24ff      	movs	r4, #255	; 0xff
 8000c64:	2300      	movs	r3, #0
 8000c66:	025b      	lsls	r3, r3, #9
 8000c68:	05e4      	lsls	r4, r4, #23
 8000c6a:	0a58      	lsrs	r0, r3, #9
 8000c6c:	07d2      	lsls	r2, r2, #31
 8000c6e:	4320      	orrs	r0, r4
 8000c70:	4310      	orrs	r0, r2
 8000c72:	bc0c      	pop	{r2, r3}
 8000c74:	4690      	mov	r8, r2
 8000c76:	4699      	mov	r9, r3
 8000c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	d174      	bne.n	8000d68 <__aeabi_fsub+0x1b4>
 8000c7e:	1c60      	adds	r0, r4, #1
 8000c80:	b2c0      	uxtb	r0, r0
 8000c82:	2801      	cmp	r0, #1
 8000c84:	dc00      	bgt.n	8000c88 <__aeabi_fsub+0xd4>
 8000c86:	e0a7      	b.n	8000dd8 <__aeabi_fsub+0x224>
 8000c88:	464a      	mov	r2, r9
 8000c8a:	1a9c      	subs	r4, r3, r2
 8000c8c:	0162      	lsls	r2, r4, #5
 8000c8e:	d500      	bpl.n	8000c92 <__aeabi_fsub+0xde>
 8000c90:	e0b6      	b.n	8000e00 <__aeabi_fsub+0x24c>
 8000c92:	2c00      	cmp	r4, #0
 8000c94:	d1be      	bne.n	8000c14 <__aeabi_fsub+0x60>
 8000c96:	2200      	movs	r2, #0
 8000c98:	2400      	movs	r4, #0
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e7e3      	b.n	8000c66 <__aeabi_fsub+0xb2>
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	dc00      	bgt.n	8000ca4 <__aeabi_fsub+0xf0>
 8000ca2:	e085      	b.n	8000db0 <__aeabi_fsub+0x1fc>
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d046      	beq.n	8000d36 <__aeabi_fsub+0x182>
 8000ca8:	2cff      	cmp	r4, #255	; 0xff
 8000caa:	d049      	beq.n	8000d40 <__aeabi_fsub+0x18c>
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	4648      	mov	r0, r9
 8000cb0:	04d2      	lsls	r2, r2, #19
 8000cb2:	4310      	orrs	r0, r2
 8000cb4:	4681      	mov	r9, r0
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2e1b      	cmp	r6, #27
 8000cba:	dc09      	bgt.n	8000cd0 <__aeabi_fsub+0x11c>
 8000cbc:	2020      	movs	r0, #32
 8000cbe:	464c      	mov	r4, r9
 8000cc0:	1b80      	subs	r0, r0, r6
 8000cc2:	4084      	lsls	r4, r0
 8000cc4:	464a      	mov	r2, r9
 8000cc6:	0020      	movs	r0, r4
 8000cc8:	40f2      	lsrs	r2, r6
 8000cca:	1e44      	subs	r4, r0, #1
 8000ccc:	41a0      	sbcs	r0, r4
 8000cce:	4302      	orrs	r2, r0
 8000cd0:	189b      	adds	r3, r3, r2
 8000cd2:	015a      	lsls	r2, r3, #5
 8000cd4:	d528      	bpl.n	8000d28 <__aeabi_fsub+0x174>
 8000cd6:	3501      	adds	r5, #1
 8000cd8:	2dff      	cmp	r5, #255	; 0xff
 8000cda:	d100      	bne.n	8000cde <__aeabi_fsub+0x12a>
 8000cdc:	e0a8      	b.n	8000e30 <__aeabi_fsub+0x27c>
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2407      	movs	r4, #7
 8000ce2:	4994      	ldr	r1, [pc, #592]	; (8000f34 <__aeabi_fsub+0x380>)
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	085b      	lsrs	r3, r3, #1
 8000ce8:	400b      	ands	r3, r1
 8000cea:	4313      	orrs	r3, r2
 8000cec:	401c      	ands	r4, r3
 8000cee:	e7a6      	b.n	8000c3e <__aeabi_fsub+0x8a>
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_fsub+0x142>
 8000cf4:	e778      	b.n	8000be8 <__aeabi_fsub+0x34>
 8000cf6:	e775      	b.n	8000be4 <__aeabi_fsub+0x30>
 8000cf8:	2cff      	cmp	r4, #255	; 0xff
 8000cfa:	d054      	beq.n	8000da6 <__aeabi_fsub+0x1f2>
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	4649      	mov	r1, r9
 8000d00:	04d2      	lsls	r2, r2, #19
 8000d02:	4311      	orrs	r1, r2
 8000d04:	4689      	mov	r9, r1
 8000d06:	2201      	movs	r2, #1
 8000d08:	2e1b      	cmp	r6, #27
 8000d0a:	dc09      	bgt.n	8000d20 <__aeabi_fsub+0x16c>
 8000d0c:	2120      	movs	r1, #32
 8000d0e:	4648      	mov	r0, r9
 8000d10:	1b89      	subs	r1, r1, r6
 8000d12:	4088      	lsls	r0, r1
 8000d14:	464a      	mov	r2, r9
 8000d16:	0001      	movs	r1, r0
 8000d18:	40f2      	lsrs	r2, r6
 8000d1a:	1e48      	subs	r0, r1, #1
 8000d1c:	4181      	sbcs	r1, r0
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	1a9b      	subs	r3, r3, r2
 8000d22:	015a      	lsls	r2, r3, #5
 8000d24:	d500      	bpl.n	8000d28 <__aeabi_fsub+0x174>
 8000d26:	e773      	b.n	8000c10 <__aeabi_fsub+0x5c>
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	0759      	lsls	r1, r3, #29
 8000d30:	d000      	beq.n	8000d34 <__aeabi_fsub+0x180>
 8000d32:	e789      	b.n	8000c48 <__aeabi_fsub+0x94>
 8000d34:	e011      	b.n	8000d5a <__aeabi_fsub+0x1a6>
 8000d36:	4648      	mov	r0, r9
 8000d38:	2800      	cmp	r0, #0
 8000d3a:	d158      	bne.n	8000dee <__aeabi_fsub+0x23a>
 8000d3c:	2cff      	cmp	r4, #255	; 0xff
 8000d3e:	d10c      	bne.n	8000d5a <__aeabi_fsub+0x1a6>
 8000d40:	08db      	lsrs	r3, r3, #3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d100      	bne.n	8000d48 <__aeabi_fsub+0x194>
 8000d46:	e78c      	b.n	8000c62 <__aeabi_fsub+0xae>
 8000d48:	2080      	movs	r0, #128	; 0x80
 8000d4a:	03c0      	lsls	r0, r0, #15
 8000d4c:	4303      	orrs	r3, r0
 8000d4e:	025b      	lsls	r3, r3, #9
 8000d50:	0a5b      	lsrs	r3, r3, #9
 8000d52:	24ff      	movs	r4, #255	; 0xff
 8000d54:	e787      	b.n	8000c66 <__aeabi_fsub+0xb2>
 8000d56:	2cff      	cmp	r4, #255	; 0xff
 8000d58:	d025      	beq.n	8000da6 <__aeabi_fsub+0x1f2>
 8000d5a:	08db      	lsrs	r3, r3, #3
 8000d5c:	2dff      	cmp	r5, #255	; 0xff
 8000d5e:	d0f0      	beq.n	8000d42 <__aeabi_fsub+0x18e>
 8000d60:	025b      	lsls	r3, r3, #9
 8000d62:	0a5b      	lsrs	r3, r3, #9
 8000d64:	b2ec      	uxtb	r4, r5
 8000d66:	e77e      	b.n	8000c66 <__aeabi_fsub+0xb2>
 8000d68:	2c00      	cmp	r4, #0
 8000d6a:	d04d      	beq.n	8000e08 <__aeabi_fsub+0x254>
 8000d6c:	28ff      	cmp	r0, #255	; 0xff
 8000d6e:	d018      	beq.n	8000da2 <__aeabi_fsub+0x1ee>
 8000d70:	2480      	movs	r4, #128	; 0x80
 8000d72:	04e4      	lsls	r4, r4, #19
 8000d74:	4272      	negs	r2, r6
 8000d76:	4323      	orrs	r3, r4
 8000d78:	2a1b      	cmp	r2, #27
 8000d7a:	dd00      	ble.n	8000d7e <__aeabi_fsub+0x1ca>
 8000d7c:	e0c4      	b.n	8000f08 <__aeabi_fsub+0x354>
 8000d7e:	001c      	movs	r4, r3
 8000d80:	2520      	movs	r5, #32
 8000d82:	40d4      	lsrs	r4, r2
 8000d84:	1aaa      	subs	r2, r5, r2
 8000d86:	4093      	lsls	r3, r2
 8000d88:	1e5a      	subs	r2, r3, #1
 8000d8a:	4193      	sbcs	r3, r2
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	464a      	mov	r2, r9
 8000d90:	0005      	movs	r5, r0
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	4688      	mov	r8, r1
 8000d96:	e738      	b.n	8000c0a <__aeabi_fsub+0x56>
 8000d98:	1c72      	adds	r2, r6, #1
 8000d9a:	d0f8      	beq.n	8000d8e <__aeabi_fsub+0x1da>
 8000d9c:	43f2      	mvns	r2, r6
 8000d9e:	28ff      	cmp	r0, #255	; 0xff
 8000da0:	d1ea      	bne.n	8000d78 <__aeabi_fsub+0x1c4>
 8000da2:	000a      	movs	r2, r1
 8000da4:	464b      	mov	r3, r9
 8000da6:	25ff      	movs	r5, #255	; 0xff
 8000da8:	e7d7      	b.n	8000d5a <__aeabi_fsub+0x1a6>
 8000daa:	019b      	lsls	r3, r3, #6
 8000dac:	0a5b      	lsrs	r3, r3, #9
 8000dae:	e75a      	b.n	8000c66 <__aeabi_fsub+0xb2>
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d141      	bne.n	8000e38 <__aeabi_fsub+0x284>
 8000db4:	1c65      	adds	r5, r4, #1
 8000db6:	b2e9      	uxtb	r1, r5
 8000db8:	2901      	cmp	r1, #1
 8000dba:	dd45      	ble.n	8000e48 <__aeabi_fsub+0x294>
 8000dbc:	2dff      	cmp	r5, #255	; 0xff
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_fsub+0x20e>
 8000dc0:	e74f      	b.n	8000c62 <__aeabi_fsub+0xae>
 8000dc2:	2407      	movs	r4, #7
 8000dc4:	444b      	add	r3, r9
 8000dc6:	085b      	lsrs	r3, r3, #1
 8000dc8:	401c      	ands	r4, r3
 8000dca:	e738      	b.n	8000c3e <__aeabi_fsub+0x8a>
 8000dcc:	2207      	movs	r2, #7
 8000dce:	4b5a      	ldr	r3, [pc, #360]	; (8000f38 <__aeabi_fsub+0x384>)
 8000dd0:	1a2d      	subs	r5, r5, r0
 8000dd2:	4023      	ands	r3, r4
 8000dd4:	4014      	ands	r4, r2
 8000dd6:	e732      	b.n	8000c3e <__aeabi_fsub+0x8a>
 8000dd8:	2c00      	cmp	r4, #0
 8000dda:	d11d      	bne.n	8000e18 <__aeabi_fsub+0x264>
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d17a      	bne.n	8000ed6 <__aeabi_fsub+0x322>
 8000de0:	464b      	mov	r3, r9
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d100      	bne.n	8000de8 <__aeabi_fsub+0x234>
 8000de6:	e091      	b.n	8000f0c <__aeabi_fsub+0x358>
 8000de8:	000a      	movs	r2, r1
 8000dea:	2500      	movs	r5, #0
 8000dec:	e7b5      	b.n	8000d5a <__aeabi_fsub+0x1a6>
 8000dee:	3e01      	subs	r6, #1
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d119      	bne.n	8000e28 <__aeabi_fsub+0x274>
 8000df4:	444b      	add	r3, r9
 8000df6:	e76c      	b.n	8000cd2 <__aeabi_fsub+0x11e>
 8000df8:	2cff      	cmp	r4, #255	; 0xff
 8000dfa:	d184      	bne.n	8000d06 <__aeabi_fsub+0x152>
 8000dfc:	25ff      	movs	r5, #255	; 0xff
 8000dfe:	e7ac      	b.n	8000d5a <__aeabi_fsub+0x1a6>
 8000e00:	464a      	mov	r2, r9
 8000e02:	4688      	mov	r8, r1
 8000e04:	1ad4      	subs	r4, r2, r3
 8000e06:	e705      	b.n	8000c14 <__aeabi_fsub+0x60>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1c5      	bne.n	8000d98 <__aeabi_fsub+0x1e4>
 8000e0c:	000a      	movs	r2, r1
 8000e0e:	28ff      	cmp	r0, #255	; 0xff
 8000e10:	d0c8      	beq.n	8000da4 <__aeabi_fsub+0x1f0>
 8000e12:	0005      	movs	r5, r0
 8000e14:	464b      	mov	r3, r9
 8000e16:	e7a0      	b.n	8000d5a <__aeabi_fsub+0x1a6>
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d149      	bne.n	8000eb0 <__aeabi_fsub+0x2fc>
 8000e1c:	464b      	mov	r3, r9
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d077      	beq.n	8000f12 <__aeabi_fsub+0x35e>
 8000e22:	000a      	movs	r2, r1
 8000e24:	25ff      	movs	r5, #255	; 0xff
 8000e26:	e798      	b.n	8000d5a <__aeabi_fsub+0x1a6>
 8000e28:	2cff      	cmp	r4, #255	; 0xff
 8000e2a:	d000      	beq.n	8000e2e <__aeabi_fsub+0x27a>
 8000e2c:	e743      	b.n	8000cb6 <__aeabi_fsub+0x102>
 8000e2e:	e787      	b.n	8000d40 <__aeabi_fsub+0x18c>
 8000e30:	000a      	movs	r2, r1
 8000e32:	24ff      	movs	r4, #255	; 0xff
 8000e34:	2300      	movs	r3, #0
 8000e36:	e716      	b.n	8000c66 <__aeabi_fsub+0xb2>
 8000e38:	2c00      	cmp	r4, #0
 8000e3a:	d115      	bne.n	8000e68 <__aeabi_fsub+0x2b4>
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d157      	bne.n	8000ef0 <__aeabi_fsub+0x33c>
 8000e40:	28ff      	cmp	r0, #255	; 0xff
 8000e42:	d1e6      	bne.n	8000e12 <__aeabi_fsub+0x25e>
 8000e44:	464b      	mov	r3, r9
 8000e46:	e77b      	b.n	8000d40 <__aeabi_fsub+0x18c>
 8000e48:	2c00      	cmp	r4, #0
 8000e4a:	d120      	bne.n	8000e8e <__aeabi_fsub+0x2da>
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d057      	beq.n	8000f00 <__aeabi_fsub+0x34c>
 8000e50:	4649      	mov	r1, r9
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d053      	beq.n	8000efe <__aeabi_fsub+0x34a>
 8000e56:	444b      	add	r3, r9
 8000e58:	015a      	lsls	r2, r3, #5
 8000e5a:	d568      	bpl.n	8000f2e <__aeabi_fsub+0x37a>
 8000e5c:	2407      	movs	r4, #7
 8000e5e:	4a36      	ldr	r2, [pc, #216]	; (8000f38 <__aeabi_fsub+0x384>)
 8000e60:	401c      	ands	r4, r3
 8000e62:	2501      	movs	r5, #1
 8000e64:	4013      	ands	r3, r2
 8000e66:	e6ea      	b.n	8000c3e <__aeabi_fsub+0x8a>
 8000e68:	28ff      	cmp	r0, #255	; 0xff
 8000e6a:	d0eb      	beq.n	8000e44 <__aeabi_fsub+0x290>
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	04d2      	lsls	r2, r2, #19
 8000e70:	4276      	negs	r6, r6
 8000e72:	4313      	orrs	r3, r2
 8000e74:	2e1b      	cmp	r6, #27
 8000e76:	dc53      	bgt.n	8000f20 <__aeabi_fsub+0x36c>
 8000e78:	2520      	movs	r5, #32
 8000e7a:	1bad      	subs	r5, r5, r6
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	40ab      	lsls	r3, r5
 8000e80:	40f2      	lsrs	r2, r6
 8000e82:	1e5c      	subs	r4, r3, #1
 8000e84:	41a3      	sbcs	r3, r4
 8000e86:	4313      	orrs	r3, r2
 8000e88:	444b      	add	r3, r9
 8000e8a:	0005      	movs	r5, r0
 8000e8c:	e721      	b.n	8000cd2 <__aeabi_fsub+0x11e>
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0d8      	beq.n	8000e44 <__aeabi_fsub+0x290>
 8000e92:	4649      	mov	r1, r9
 8000e94:	2900      	cmp	r1, #0
 8000e96:	d100      	bne.n	8000e9a <__aeabi_fsub+0x2e6>
 8000e98:	e752      	b.n	8000d40 <__aeabi_fsub+0x18c>
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	03c9      	lsls	r1, r1, #15
 8000e9e:	420f      	tst	r7, r1
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_fsub+0x2f0>
 8000ea2:	e74d      	b.n	8000d40 <__aeabi_fsub+0x18c>
 8000ea4:	4660      	mov	r0, ip
 8000ea6:	4208      	tst	r0, r1
 8000ea8:	d000      	beq.n	8000eac <__aeabi_fsub+0x2f8>
 8000eaa:	e749      	b.n	8000d40 <__aeabi_fsub+0x18c>
 8000eac:	464b      	mov	r3, r9
 8000eae:	e747      	b.n	8000d40 <__aeabi_fsub+0x18c>
 8000eb0:	4648      	mov	r0, r9
 8000eb2:	25ff      	movs	r5, #255	; 0xff
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fsub+0x306>
 8000eb8:	e74f      	b.n	8000d5a <__aeabi_fsub+0x1a6>
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	03d2      	lsls	r2, r2, #15
 8000ebe:	4217      	tst	r7, r2
 8000ec0:	d004      	beq.n	8000ecc <__aeabi_fsub+0x318>
 8000ec2:	4660      	mov	r0, ip
 8000ec4:	4210      	tst	r0, r2
 8000ec6:	d101      	bne.n	8000ecc <__aeabi_fsub+0x318>
 8000ec8:	464b      	mov	r3, r9
 8000eca:	4688      	mov	r8, r1
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4641      	mov	r1, r8
 8000ed0:	25ff      	movs	r5, #255	; 0xff
 8000ed2:	400a      	ands	r2, r1
 8000ed4:	e741      	b.n	8000d5a <__aeabi_fsub+0x1a6>
 8000ed6:	4648      	mov	r0, r9
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d01f      	beq.n	8000f1c <__aeabi_fsub+0x368>
 8000edc:	1a1a      	subs	r2, r3, r0
 8000ede:	0150      	lsls	r0, r2, #5
 8000ee0:	d520      	bpl.n	8000f24 <__aeabi_fsub+0x370>
 8000ee2:	464a      	mov	r2, r9
 8000ee4:	2407      	movs	r4, #7
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	401c      	ands	r4, r3
 8000eea:	4688      	mov	r8, r1
 8000eec:	2500      	movs	r5, #0
 8000eee:	e6a6      	b.n	8000c3e <__aeabi_fsub+0x8a>
 8000ef0:	1c74      	adds	r4, r6, #1
 8000ef2:	d0c9      	beq.n	8000e88 <__aeabi_fsub+0x2d4>
 8000ef4:	43f6      	mvns	r6, r6
 8000ef6:	28ff      	cmp	r0, #255	; 0xff
 8000ef8:	d1bc      	bne.n	8000e74 <__aeabi_fsub+0x2c0>
 8000efa:	464b      	mov	r3, r9
 8000efc:	e720      	b.n	8000d40 <__aeabi_fsub+0x18c>
 8000efe:	4699      	mov	r9, r3
 8000f00:	464b      	mov	r3, r9
 8000f02:	2500      	movs	r5, #0
 8000f04:	08db      	lsrs	r3, r3, #3
 8000f06:	e72b      	b.n	8000d60 <__aeabi_fsub+0x1ac>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e740      	b.n	8000d8e <__aeabi_fsub+0x1da>
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e6a9      	b.n	8000c66 <__aeabi_fsub+0xb2>
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	2200      	movs	r2, #0
 8000f16:	03db      	lsls	r3, r3, #15
 8000f18:	24ff      	movs	r4, #255	; 0xff
 8000f1a:	e6a4      	b.n	8000c66 <__aeabi_fsub+0xb2>
 8000f1c:	2500      	movs	r5, #0
 8000f1e:	e71c      	b.n	8000d5a <__aeabi_fsub+0x1a6>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e7b1      	b.n	8000e88 <__aeabi_fsub+0x2d4>
 8000f24:	2a00      	cmp	r2, #0
 8000f26:	d0f1      	beq.n	8000f0c <__aeabi_fsub+0x358>
 8000f28:	0013      	movs	r3, r2
 8000f2a:	2500      	movs	r5, #0
 8000f2c:	e6fc      	b.n	8000d28 <__aeabi_fsub+0x174>
 8000f2e:	2500      	movs	r5, #0
 8000f30:	e6fa      	b.n	8000d28 <__aeabi_fsub+0x174>
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	7dffffff 	.word	0x7dffffff
 8000f38:	fbffffff 	.word	0xfbffffff

08000f3c <__aeabi_f2iz>:
 8000f3c:	0241      	lsls	r1, r0, #9
 8000f3e:	0042      	lsls	r2, r0, #1
 8000f40:	0fc3      	lsrs	r3, r0, #31
 8000f42:	0a49      	lsrs	r1, r1, #9
 8000f44:	0e12      	lsrs	r2, r2, #24
 8000f46:	2000      	movs	r0, #0
 8000f48:	2a7e      	cmp	r2, #126	; 0x7e
 8000f4a:	d90d      	bls.n	8000f68 <__aeabi_f2iz+0x2c>
 8000f4c:	2a9d      	cmp	r2, #157	; 0x9d
 8000f4e:	d80c      	bhi.n	8000f6a <__aeabi_f2iz+0x2e>
 8000f50:	2080      	movs	r0, #128	; 0x80
 8000f52:	0400      	lsls	r0, r0, #16
 8000f54:	4301      	orrs	r1, r0
 8000f56:	2a95      	cmp	r2, #149	; 0x95
 8000f58:	dc0a      	bgt.n	8000f70 <__aeabi_f2iz+0x34>
 8000f5a:	2096      	movs	r0, #150	; 0x96
 8000f5c:	1a82      	subs	r2, r0, r2
 8000f5e:	40d1      	lsrs	r1, r2
 8000f60:	4248      	negs	r0, r1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d100      	bne.n	8000f68 <__aeabi_f2iz+0x2c>
 8000f66:	0008      	movs	r0, r1
 8000f68:	4770      	bx	lr
 8000f6a:	4a03      	ldr	r2, [pc, #12]	; (8000f78 <__aeabi_f2iz+0x3c>)
 8000f6c:	1898      	adds	r0, r3, r2
 8000f6e:	e7fb      	b.n	8000f68 <__aeabi_f2iz+0x2c>
 8000f70:	3a96      	subs	r2, #150	; 0x96
 8000f72:	4091      	lsls	r1, r2
 8000f74:	e7f4      	b.n	8000f60 <__aeabi_f2iz+0x24>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	7fffffff 	.word	0x7fffffff

08000f7c <__aeabi_ui2f>:
 8000f7c:	b570      	push	{r4, r5, r6, lr}
 8000f7e:	1e04      	subs	r4, r0, #0
 8000f80:	d034      	beq.n	8000fec <__aeabi_ui2f+0x70>
 8000f82:	f001 feaf 	bl	8002ce4 <__clzsi2>
 8000f86:	229e      	movs	r2, #158	; 0x9e
 8000f88:	1a12      	subs	r2, r2, r0
 8000f8a:	2a96      	cmp	r2, #150	; 0x96
 8000f8c:	dc07      	bgt.n	8000f9e <__aeabi_ui2f+0x22>
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	2808      	cmp	r0, #8
 8000f92:	dd2e      	ble.n	8000ff2 <__aeabi_ui2f+0x76>
 8000f94:	3808      	subs	r0, #8
 8000f96:	4084      	lsls	r4, r0
 8000f98:	0260      	lsls	r0, r4, #9
 8000f9a:	0a40      	lsrs	r0, r0, #9
 8000f9c:	e021      	b.n	8000fe2 <__aeabi_ui2f+0x66>
 8000f9e:	2a99      	cmp	r2, #153	; 0x99
 8000fa0:	dd09      	ble.n	8000fb6 <__aeabi_ui2f+0x3a>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	0021      	movs	r1, r4
 8000fa6:	331b      	adds	r3, #27
 8000fa8:	4099      	lsls	r1, r3
 8000faa:	1e4b      	subs	r3, r1, #1
 8000fac:	4199      	sbcs	r1, r3
 8000fae:	2305      	movs	r3, #5
 8000fb0:	1a1b      	subs	r3, r3, r0
 8000fb2:	40dc      	lsrs	r4, r3
 8000fb4:	430c      	orrs	r4, r1
 8000fb6:	2805      	cmp	r0, #5
 8000fb8:	dd01      	ble.n	8000fbe <__aeabi_ui2f+0x42>
 8000fba:	1f43      	subs	r3, r0, #5
 8000fbc:	409c      	lsls	r4, r3
 8000fbe:	0023      	movs	r3, r4
 8000fc0:	490d      	ldr	r1, [pc, #52]	; (8000ff8 <__aeabi_ui2f+0x7c>)
 8000fc2:	400b      	ands	r3, r1
 8000fc4:	0765      	lsls	r5, r4, #29
 8000fc6:	d009      	beq.n	8000fdc <__aeabi_ui2f+0x60>
 8000fc8:	250f      	movs	r5, #15
 8000fca:	402c      	ands	r4, r5
 8000fcc:	2c04      	cmp	r4, #4
 8000fce:	d005      	beq.n	8000fdc <__aeabi_ui2f+0x60>
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	015c      	lsls	r4, r3, #5
 8000fd4:	d502      	bpl.n	8000fdc <__aeabi_ui2f+0x60>
 8000fd6:	229f      	movs	r2, #159	; 0x9f
 8000fd8:	400b      	ands	r3, r1
 8000fda:	1a12      	subs	r2, r2, r0
 8000fdc:	019b      	lsls	r3, r3, #6
 8000fde:	0a58      	lsrs	r0, r3, #9
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	0240      	lsls	r0, r0, #9
 8000fe4:	05d2      	lsls	r2, r2, #23
 8000fe6:	0a40      	lsrs	r0, r0, #9
 8000fe8:	4310      	orrs	r0, r2
 8000fea:	bd70      	pop	{r4, r5, r6, pc}
 8000fec:	2200      	movs	r2, #0
 8000fee:	2000      	movs	r0, #0
 8000ff0:	e7f7      	b.n	8000fe2 <__aeabi_ui2f+0x66>
 8000ff2:	0260      	lsls	r0, r4, #9
 8000ff4:	0a40      	lsrs	r0, r0, #9
 8000ff6:	e7f4      	b.n	8000fe2 <__aeabi_ui2f+0x66>
 8000ff8:	fbffffff 	.word	0xfbffffff

08000ffc <__aeabi_dadd>:
 8000ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffe:	464f      	mov	r7, r9
 8001000:	4646      	mov	r6, r8
 8001002:	46d6      	mov	lr, sl
 8001004:	000c      	movs	r4, r1
 8001006:	0309      	lsls	r1, r1, #12
 8001008:	b5c0      	push	{r6, r7, lr}
 800100a:	0a49      	lsrs	r1, r1, #9
 800100c:	0f47      	lsrs	r7, r0, #29
 800100e:	005e      	lsls	r6, r3, #1
 8001010:	4339      	orrs	r1, r7
 8001012:	031f      	lsls	r7, r3, #12
 8001014:	0fdb      	lsrs	r3, r3, #31
 8001016:	469c      	mov	ip, r3
 8001018:	0065      	lsls	r5, r4, #1
 800101a:	0a7b      	lsrs	r3, r7, #9
 800101c:	0f57      	lsrs	r7, r2, #29
 800101e:	431f      	orrs	r7, r3
 8001020:	0d6d      	lsrs	r5, r5, #21
 8001022:	0fe4      	lsrs	r4, r4, #31
 8001024:	0d76      	lsrs	r6, r6, #21
 8001026:	46a1      	mov	r9, r4
 8001028:	00c0      	lsls	r0, r0, #3
 800102a:	46b8      	mov	r8, r7
 800102c:	00d2      	lsls	r2, r2, #3
 800102e:	1bab      	subs	r3, r5, r6
 8001030:	4564      	cmp	r4, ip
 8001032:	d07b      	beq.n	800112c <__aeabi_dadd+0x130>
 8001034:	2b00      	cmp	r3, #0
 8001036:	dd5f      	ble.n	80010f8 <__aeabi_dadd+0xfc>
 8001038:	2e00      	cmp	r6, #0
 800103a:	d000      	beq.n	800103e <__aeabi_dadd+0x42>
 800103c:	e0a4      	b.n	8001188 <__aeabi_dadd+0x18c>
 800103e:	003e      	movs	r6, r7
 8001040:	4316      	orrs	r6, r2
 8001042:	d100      	bne.n	8001046 <__aeabi_dadd+0x4a>
 8001044:	e112      	b.n	800126c <__aeabi_dadd+0x270>
 8001046:	1e5e      	subs	r6, r3, #1
 8001048:	2e00      	cmp	r6, #0
 800104a:	d000      	beq.n	800104e <__aeabi_dadd+0x52>
 800104c:	e19e      	b.n	800138c <__aeabi_dadd+0x390>
 800104e:	1a87      	subs	r7, r0, r2
 8001050:	4643      	mov	r3, r8
 8001052:	42b8      	cmp	r0, r7
 8001054:	4180      	sbcs	r0, r0
 8001056:	2501      	movs	r5, #1
 8001058:	1ac9      	subs	r1, r1, r3
 800105a:	4240      	negs	r0, r0
 800105c:	1a09      	subs	r1, r1, r0
 800105e:	020b      	lsls	r3, r1, #8
 8001060:	d400      	bmi.n	8001064 <__aeabi_dadd+0x68>
 8001062:	e131      	b.n	80012c8 <__aeabi_dadd+0x2cc>
 8001064:	0249      	lsls	r1, r1, #9
 8001066:	0a4e      	lsrs	r6, r1, #9
 8001068:	2e00      	cmp	r6, #0
 800106a:	d100      	bne.n	800106e <__aeabi_dadd+0x72>
 800106c:	e16e      	b.n	800134c <__aeabi_dadd+0x350>
 800106e:	0030      	movs	r0, r6
 8001070:	f001 fe38 	bl	8002ce4 <__clzsi2>
 8001074:	0003      	movs	r3, r0
 8001076:	3b08      	subs	r3, #8
 8001078:	2b1f      	cmp	r3, #31
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x82>
 800107c:	e161      	b.n	8001342 <__aeabi_dadd+0x346>
 800107e:	2220      	movs	r2, #32
 8001080:	0039      	movs	r1, r7
 8001082:	1ad2      	subs	r2, r2, r3
 8001084:	409e      	lsls	r6, r3
 8001086:	40d1      	lsrs	r1, r2
 8001088:	409f      	lsls	r7, r3
 800108a:	430e      	orrs	r6, r1
 800108c:	429d      	cmp	r5, r3
 800108e:	dd00      	ble.n	8001092 <__aeabi_dadd+0x96>
 8001090:	e151      	b.n	8001336 <__aeabi_dadd+0x33a>
 8001092:	1b5d      	subs	r5, r3, r5
 8001094:	1c6b      	adds	r3, r5, #1
 8001096:	2b1f      	cmp	r3, #31
 8001098:	dd00      	ble.n	800109c <__aeabi_dadd+0xa0>
 800109a:	e17c      	b.n	8001396 <__aeabi_dadd+0x39a>
 800109c:	2120      	movs	r1, #32
 800109e:	1ac9      	subs	r1, r1, r3
 80010a0:	003d      	movs	r5, r7
 80010a2:	0030      	movs	r0, r6
 80010a4:	408f      	lsls	r7, r1
 80010a6:	4088      	lsls	r0, r1
 80010a8:	40dd      	lsrs	r5, r3
 80010aa:	1e79      	subs	r1, r7, #1
 80010ac:	418f      	sbcs	r7, r1
 80010ae:	0031      	movs	r1, r6
 80010b0:	2207      	movs	r2, #7
 80010b2:	4328      	orrs	r0, r5
 80010b4:	40d9      	lsrs	r1, r3
 80010b6:	2500      	movs	r5, #0
 80010b8:	4307      	orrs	r7, r0
 80010ba:	403a      	ands	r2, r7
 80010bc:	2a00      	cmp	r2, #0
 80010be:	d009      	beq.n	80010d4 <__aeabi_dadd+0xd8>
 80010c0:	230f      	movs	r3, #15
 80010c2:	403b      	ands	r3, r7
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d005      	beq.n	80010d4 <__aeabi_dadd+0xd8>
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	42bb      	cmp	r3, r7
 80010cc:	41bf      	sbcs	r7, r7
 80010ce:	427f      	negs	r7, r7
 80010d0:	19c9      	adds	r1, r1, r7
 80010d2:	001f      	movs	r7, r3
 80010d4:	020b      	lsls	r3, r1, #8
 80010d6:	d400      	bmi.n	80010da <__aeabi_dadd+0xde>
 80010d8:	e226      	b.n	8001528 <__aeabi_dadd+0x52c>
 80010da:	1c6a      	adds	r2, r5, #1
 80010dc:	4bc6      	ldr	r3, [pc, #792]	; (80013f8 <__aeabi_dadd+0x3fc>)
 80010de:	0555      	lsls	r5, r2, #21
 80010e0:	0d6d      	lsrs	r5, r5, #21
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d100      	bne.n	80010e8 <__aeabi_dadd+0xec>
 80010e6:	e106      	b.n	80012f6 <__aeabi_dadd+0x2fa>
 80010e8:	4ac4      	ldr	r2, [pc, #784]	; (80013fc <__aeabi_dadd+0x400>)
 80010ea:	08ff      	lsrs	r7, r7, #3
 80010ec:	400a      	ands	r2, r1
 80010ee:	0753      	lsls	r3, r2, #29
 80010f0:	0252      	lsls	r2, r2, #9
 80010f2:	433b      	orrs	r3, r7
 80010f4:	0b12      	lsrs	r2, r2, #12
 80010f6:	e08e      	b.n	8001216 <__aeabi_dadd+0x21a>
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d000      	beq.n	80010fe <__aeabi_dadd+0x102>
 80010fc:	e0b8      	b.n	8001270 <__aeabi_dadd+0x274>
 80010fe:	1c6b      	adds	r3, r5, #1
 8001100:	055b      	lsls	r3, r3, #21
 8001102:	0d5b      	lsrs	r3, r3, #21
 8001104:	2b01      	cmp	r3, #1
 8001106:	dc00      	bgt.n	800110a <__aeabi_dadd+0x10e>
 8001108:	e130      	b.n	800136c <__aeabi_dadd+0x370>
 800110a:	1a87      	subs	r7, r0, r2
 800110c:	4643      	mov	r3, r8
 800110e:	42b8      	cmp	r0, r7
 8001110:	41b6      	sbcs	r6, r6
 8001112:	1acb      	subs	r3, r1, r3
 8001114:	4276      	negs	r6, r6
 8001116:	1b9e      	subs	r6, r3, r6
 8001118:	0233      	lsls	r3, r6, #8
 800111a:	d500      	bpl.n	800111e <__aeabi_dadd+0x122>
 800111c:	e14c      	b.n	80013b8 <__aeabi_dadd+0x3bc>
 800111e:	003b      	movs	r3, r7
 8001120:	4333      	orrs	r3, r6
 8001122:	d1a1      	bne.n	8001068 <__aeabi_dadd+0x6c>
 8001124:	2200      	movs	r2, #0
 8001126:	2400      	movs	r4, #0
 8001128:	2500      	movs	r5, #0
 800112a:	e070      	b.n	800120e <__aeabi_dadd+0x212>
 800112c:	2b00      	cmp	r3, #0
 800112e:	dc00      	bgt.n	8001132 <__aeabi_dadd+0x136>
 8001130:	e0e5      	b.n	80012fe <__aeabi_dadd+0x302>
 8001132:	2e00      	cmp	r6, #0
 8001134:	d100      	bne.n	8001138 <__aeabi_dadd+0x13c>
 8001136:	e083      	b.n	8001240 <__aeabi_dadd+0x244>
 8001138:	4eaf      	ldr	r6, [pc, #700]	; (80013f8 <__aeabi_dadd+0x3fc>)
 800113a:	42b5      	cmp	r5, r6
 800113c:	d060      	beq.n	8001200 <__aeabi_dadd+0x204>
 800113e:	2680      	movs	r6, #128	; 0x80
 8001140:	0436      	lsls	r6, r6, #16
 8001142:	4337      	orrs	r7, r6
 8001144:	46b8      	mov	r8, r7
 8001146:	2b38      	cmp	r3, #56	; 0x38
 8001148:	dc00      	bgt.n	800114c <__aeabi_dadd+0x150>
 800114a:	e13e      	b.n	80013ca <__aeabi_dadd+0x3ce>
 800114c:	4643      	mov	r3, r8
 800114e:	4313      	orrs	r3, r2
 8001150:	001f      	movs	r7, r3
 8001152:	1e7a      	subs	r2, r7, #1
 8001154:	4197      	sbcs	r7, r2
 8001156:	183f      	adds	r7, r7, r0
 8001158:	4287      	cmp	r7, r0
 800115a:	4180      	sbcs	r0, r0
 800115c:	4240      	negs	r0, r0
 800115e:	1809      	adds	r1, r1, r0
 8001160:	020b      	lsls	r3, r1, #8
 8001162:	d400      	bmi.n	8001166 <__aeabi_dadd+0x16a>
 8001164:	e0b0      	b.n	80012c8 <__aeabi_dadd+0x2cc>
 8001166:	4ba4      	ldr	r3, [pc, #656]	; (80013f8 <__aeabi_dadd+0x3fc>)
 8001168:	3501      	adds	r5, #1
 800116a:	429d      	cmp	r5, r3
 800116c:	d100      	bne.n	8001170 <__aeabi_dadd+0x174>
 800116e:	e0c3      	b.n	80012f8 <__aeabi_dadd+0x2fc>
 8001170:	4aa2      	ldr	r2, [pc, #648]	; (80013fc <__aeabi_dadd+0x400>)
 8001172:	087b      	lsrs	r3, r7, #1
 8001174:	400a      	ands	r2, r1
 8001176:	2101      	movs	r1, #1
 8001178:	400f      	ands	r7, r1
 800117a:	431f      	orrs	r7, r3
 800117c:	0851      	lsrs	r1, r2, #1
 800117e:	07d3      	lsls	r3, r2, #31
 8001180:	2207      	movs	r2, #7
 8001182:	431f      	orrs	r7, r3
 8001184:	403a      	ands	r2, r7
 8001186:	e799      	b.n	80010bc <__aeabi_dadd+0xc0>
 8001188:	4e9b      	ldr	r6, [pc, #620]	; (80013f8 <__aeabi_dadd+0x3fc>)
 800118a:	42b5      	cmp	r5, r6
 800118c:	d038      	beq.n	8001200 <__aeabi_dadd+0x204>
 800118e:	2680      	movs	r6, #128	; 0x80
 8001190:	0436      	lsls	r6, r6, #16
 8001192:	4337      	orrs	r7, r6
 8001194:	46b8      	mov	r8, r7
 8001196:	2b38      	cmp	r3, #56	; 0x38
 8001198:	dd00      	ble.n	800119c <__aeabi_dadd+0x1a0>
 800119a:	e0dc      	b.n	8001356 <__aeabi_dadd+0x35a>
 800119c:	2b1f      	cmp	r3, #31
 800119e:	dc00      	bgt.n	80011a2 <__aeabi_dadd+0x1a6>
 80011a0:	e130      	b.n	8001404 <__aeabi_dadd+0x408>
 80011a2:	001e      	movs	r6, r3
 80011a4:	4647      	mov	r7, r8
 80011a6:	3e20      	subs	r6, #32
 80011a8:	40f7      	lsrs	r7, r6
 80011aa:	46bc      	mov	ip, r7
 80011ac:	2b20      	cmp	r3, #32
 80011ae:	d004      	beq.n	80011ba <__aeabi_dadd+0x1be>
 80011b0:	2640      	movs	r6, #64	; 0x40
 80011b2:	1af3      	subs	r3, r6, r3
 80011b4:	4646      	mov	r6, r8
 80011b6:	409e      	lsls	r6, r3
 80011b8:	4332      	orrs	r2, r6
 80011ba:	0017      	movs	r7, r2
 80011bc:	4663      	mov	r3, ip
 80011be:	1e7a      	subs	r2, r7, #1
 80011c0:	4197      	sbcs	r7, r2
 80011c2:	431f      	orrs	r7, r3
 80011c4:	e0cc      	b.n	8001360 <__aeabi_dadd+0x364>
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d100      	bne.n	80011cc <__aeabi_dadd+0x1d0>
 80011ca:	e204      	b.n	80015d6 <__aeabi_dadd+0x5da>
 80011cc:	4643      	mov	r3, r8
 80011ce:	4313      	orrs	r3, r2
 80011d0:	d100      	bne.n	80011d4 <__aeabi_dadd+0x1d8>
 80011d2:	e159      	b.n	8001488 <__aeabi_dadd+0x48c>
 80011d4:	074b      	lsls	r3, r1, #29
 80011d6:	08c0      	lsrs	r0, r0, #3
 80011d8:	4318      	orrs	r0, r3
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	08c9      	lsrs	r1, r1, #3
 80011de:	031b      	lsls	r3, r3, #12
 80011e0:	4219      	tst	r1, r3
 80011e2:	d008      	beq.n	80011f6 <__aeabi_dadd+0x1fa>
 80011e4:	4645      	mov	r5, r8
 80011e6:	08ed      	lsrs	r5, r5, #3
 80011e8:	421d      	tst	r5, r3
 80011ea:	d104      	bne.n	80011f6 <__aeabi_dadd+0x1fa>
 80011ec:	4643      	mov	r3, r8
 80011ee:	08d0      	lsrs	r0, r2, #3
 80011f0:	0759      	lsls	r1, r3, #29
 80011f2:	4308      	orrs	r0, r1
 80011f4:	0029      	movs	r1, r5
 80011f6:	0f42      	lsrs	r2, r0, #29
 80011f8:	00c9      	lsls	r1, r1, #3
 80011fa:	4d7f      	ldr	r5, [pc, #508]	; (80013f8 <__aeabi_dadd+0x3fc>)
 80011fc:	4311      	orrs	r1, r2
 80011fe:	00c0      	lsls	r0, r0, #3
 8001200:	074b      	lsls	r3, r1, #29
 8001202:	08ca      	lsrs	r2, r1, #3
 8001204:	497c      	ldr	r1, [pc, #496]	; (80013f8 <__aeabi_dadd+0x3fc>)
 8001206:	08c0      	lsrs	r0, r0, #3
 8001208:	4303      	orrs	r3, r0
 800120a:	428d      	cmp	r5, r1
 800120c:	d068      	beq.n	80012e0 <__aeabi_dadd+0x2e4>
 800120e:	0312      	lsls	r2, r2, #12
 8001210:	056d      	lsls	r5, r5, #21
 8001212:	0b12      	lsrs	r2, r2, #12
 8001214:	0d6d      	lsrs	r5, r5, #21
 8001216:	2100      	movs	r1, #0
 8001218:	0312      	lsls	r2, r2, #12
 800121a:	0018      	movs	r0, r3
 800121c:	0b13      	lsrs	r3, r2, #12
 800121e:	0d0a      	lsrs	r2, r1, #20
 8001220:	0512      	lsls	r2, r2, #20
 8001222:	431a      	orrs	r2, r3
 8001224:	4b76      	ldr	r3, [pc, #472]	; (8001400 <__aeabi_dadd+0x404>)
 8001226:	052d      	lsls	r5, r5, #20
 8001228:	4013      	ands	r3, r2
 800122a:	432b      	orrs	r3, r5
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	07e4      	lsls	r4, r4, #31
 8001230:	085b      	lsrs	r3, r3, #1
 8001232:	4323      	orrs	r3, r4
 8001234:	0019      	movs	r1, r3
 8001236:	bc1c      	pop	{r2, r3, r4}
 8001238:	4690      	mov	r8, r2
 800123a:	4699      	mov	r9, r3
 800123c:	46a2      	mov	sl, r4
 800123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001240:	003e      	movs	r6, r7
 8001242:	4316      	orrs	r6, r2
 8001244:	d012      	beq.n	800126c <__aeabi_dadd+0x270>
 8001246:	1e5e      	subs	r6, r3, #1
 8001248:	2e00      	cmp	r6, #0
 800124a:	d000      	beq.n	800124e <__aeabi_dadd+0x252>
 800124c:	e100      	b.n	8001450 <__aeabi_dadd+0x454>
 800124e:	1887      	adds	r7, r0, r2
 8001250:	4287      	cmp	r7, r0
 8001252:	4180      	sbcs	r0, r0
 8001254:	4441      	add	r1, r8
 8001256:	4240      	negs	r0, r0
 8001258:	1809      	adds	r1, r1, r0
 800125a:	2501      	movs	r5, #1
 800125c:	020b      	lsls	r3, r1, #8
 800125e:	d533      	bpl.n	80012c8 <__aeabi_dadd+0x2cc>
 8001260:	2502      	movs	r5, #2
 8001262:	e785      	b.n	8001170 <__aeabi_dadd+0x174>
 8001264:	4664      	mov	r4, ip
 8001266:	0033      	movs	r3, r6
 8001268:	4641      	mov	r1, r8
 800126a:	0010      	movs	r0, r2
 800126c:	001d      	movs	r5, r3
 800126e:	e7c7      	b.n	8001200 <__aeabi_dadd+0x204>
 8001270:	2d00      	cmp	r5, #0
 8001272:	d000      	beq.n	8001276 <__aeabi_dadd+0x27a>
 8001274:	e0da      	b.n	800142c <__aeabi_dadd+0x430>
 8001276:	000c      	movs	r4, r1
 8001278:	4304      	orrs	r4, r0
 800127a:	d0f3      	beq.n	8001264 <__aeabi_dadd+0x268>
 800127c:	1c5c      	adds	r4, r3, #1
 800127e:	d100      	bne.n	8001282 <__aeabi_dadd+0x286>
 8001280:	e19f      	b.n	80015c2 <__aeabi_dadd+0x5c6>
 8001282:	4c5d      	ldr	r4, [pc, #372]	; (80013f8 <__aeabi_dadd+0x3fc>)
 8001284:	42a6      	cmp	r6, r4
 8001286:	d100      	bne.n	800128a <__aeabi_dadd+0x28e>
 8001288:	e12f      	b.n	80014ea <__aeabi_dadd+0x4ee>
 800128a:	43db      	mvns	r3, r3
 800128c:	2b38      	cmp	r3, #56	; 0x38
 800128e:	dd00      	ble.n	8001292 <__aeabi_dadd+0x296>
 8001290:	e166      	b.n	8001560 <__aeabi_dadd+0x564>
 8001292:	2b1f      	cmp	r3, #31
 8001294:	dd00      	ble.n	8001298 <__aeabi_dadd+0x29c>
 8001296:	e183      	b.n	80015a0 <__aeabi_dadd+0x5a4>
 8001298:	2420      	movs	r4, #32
 800129a:	0005      	movs	r5, r0
 800129c:	1ae4      	subs	r4, r4, r3
 800129e:	000f      	movs	r7, r1
 80012a0:	40dd      	lsrs	r5, r3
 80012a2:	40d9      	lsrs	r1, r3
 80012a4:	40a0      	lsls	r0, r4
 80012a6:	4643      	mov	r3, r8
 80012a8:	40a7      	lsls	r7, r4
 80012aa:	1a5b      	subs	r3, r3, r1
 80012ac:	1e44      	subs	r4, r0, #1
 80012ae:	41a0      	sbcs	r0, r4
 80012b0:	4698      	mov	r8, r3
 80012b2:	432f      	orrs	r7, r5
 80012b4:	4338      	orrs	r0, r7
 80012b6:	1a17      	subs	r7, r2, r0
 80012b8:	42ba      	cmp	r2, r7
 80012ba:	4192      	sbcs	r2, r2
 80012bc:	4643      	mov	r3, r8
 80012be:	4252      	negs	r2, r2
 80012c0:	1a99      	subs	r1, r3, r2
 80012c2:	4664      	mov	r4, ip
 80012c4:	0035      	movs	r5, r6
 80012c6:	e6ca      	b.n	800105e <__aeabi_dadd+0x62>
 80012c8:	2207      	movs	r2, #7
 80012ca:	403a      	ands	r2, r7
 80012cc:	2a00      	cmp	r2, #0
 80012ce:	d000      	beq.n	80012d2 <__aeabi_dadd+0x2d6>
 80012d0:	e6f6      	b.n	80010c0 <__aeabi_dadd+0xc4>
 80012d2:	074b      	lsls	r3, r1, #29
 80012d4:	08ca      	lsrs	r2, r1, #3
 80012d6:	4948      	ldr	r1, [pc, #288]	; (80013f8 <__aeabi_dadd+0x3fc>)
 80012d8:	08ff      	lsrs	r7, r7, #3
 80012da:	433b      	orrs	r3, r7
 80012dc:	428d      	cmp	r5, r1
 80012de:	d196      	bne.n	800120e <__aeabi_dadd+0x212>
 80012e0:	0019      	movs	r1, r3
 80012e2:	4311      	orrs	r1, r2
 80012e4:	d100      	bne.n	80012e8 <__aeabi_dadd+0x2ec>
 80012e6:	e19e      	b.n	8001626 <__aeabi_dadd+0x62a>
 80012e8:	2180      	movs	r1, #128	; 0x80
 80012ea:	0309      	lsls	r1, r1, #12
 80012ec:	430a      	orrs	r2, r1
 80012ee:	0312      	lsls	r2, r2, #12
 80012f0:	0b12      	lsrs	r2, r2, #12
 80012f2:	4d41      	ldr	r5, [pc, #260]	; (80013f8 <__aeabi_dadd+0x3fc>)
 80012f4:	e78f      	b.n	8001216 <__aeabi_dadd+0x21a>
 80012f6:	0015      	movs	r5, r2
 80012f8:	2200      	movs	r2, #0
 80012fa:	2300      	movs	r3, #0
 80012fc:	e78b      	b.n	8001216 <__aeabi_dadd+0x21a>
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d000      	beq.n	8001304 <__aeabi_dadd+0x308>
 8001302:	e0c7      	b.n	8001494 <__aeabi_dadd+0x498>
 8001304:	1c6b      	adds	r3, r5, #1
 8001306:	055f      	lsls	r7, r3, #21
 8001308:	0d7f      	lsrs	r7, r7, #21
 800130a:	2f01      	cmp	r7, #1
 800130c:	dc00      	bgt.n	8001310 <__aeabi_dadd+0x314>
 800130e:	e0f1      	b.n	80014f4 <__aeabi_dadd+0x4f8>
 8001310:	4d39      	ldr	r5, [pc, #228]	; (80013f8 <__aeabi_dadd+0x3fc>)
 8001312:	42ab      	cmp	r3, r5
 8001314:	d100      	bne.n	8001318 <__aeabi_dadd+0x31c>
 8001316:	e0b9      	b.n	800148c <__aeabi_dadd+0x490>
 8001318:	1885      	adds	r5, r0, r2
 800131a:	000a      	movs	r2, r1
 800131c:	4285      	cmp	r5, r0
 800131e:	4189      	sbcs	r1, r1
 8001320:	4442      	add	r2, r8
 8001322:	4249      	negs	r1, r1
 8001324:	1851      	adds	r1, r2, r1
 8001326:	2207      	movs	r2, #7
 8001328:	07cf      	lsls	r7, r1, #31
 800132a:	086d      	lsrs	r5, r5, #1
 800132c:	432f      	orrs	r7, r5
 800132e:	0849      	lsrs	r1, r1, #1
 8001330:	403a      	ands	r2, r7
 8001332:	001d      	movs	r5, r3
 8001334:	e6c2      	b.n	80010bc <__aeabi_dadd+0xc0>
 8001336:	2207      	movs	r2, #7
 8001338:	4930      	ldr	r1, [pc, #192]	; (80013fc <__aeabi_dadd+0x400>)
 800133a:	1aed      	subs	r5, r5, r3
 800133c:	4031      	ands	r1, r6
 800133e:	403a      	ands	r2, r7
 8001340:	e6bc      	b.n	80010bc <__aeabi_dadd+0xc0>
 8001342:	003e      	movs	r6, r7
 8001344:	3828      	subs	r0, #40	; 0x28
 8001346:	4086      	lsls	r6, r0
 8001348:	2700      	movs	r7, #0
 800134a:	e69f      	b.n	800108c <__aeabi_dadd+0x90>
 800134c:	0038      	movs	r0, r7
 800134e:	f001 fcc9 	bl	8002ce4 <__clzsi2>
 8001352:	3020      	adds	r0, #32
 8001354:	e68e      	b.n	8001074 <__aeabi_dadd+0x78>
 8001356:	4643      	mov	r3, r8
 8001358:	4313      	orrs	r3, r2
 800135a:	001f      	movs	r7, r3
 800135c:	1e7a      	subs	r2, r7, #1
 800135e:	4197      	sbcs	r7, r2
 8001360:	1bc7      	subs	r7, r0, r7
 8001362:	42b8      	cmp	r0, r7
 8001364:	4180      	sbcs	r0, r0
 8001366:	4240      	negs	r0, r0
 8001368:	1a09      	subs	r1, r1, r0
 800136a:	e678      	b.n	800105e <__aeabi_dadd+0x62>
 800136c:	000e      	movs	r6, r1
 800136e:	003b      	movs	r3, r7
 8001370:	4306      	orrs	r6, r0
 8001372:	4313      	orrs	r3, r2
 8001374:	2d00      	cmp	r5, #0
 8001376:	d161      	bne.n	800143c <__aeabi_dadd+0x440>
 8001378:	2e00      	cmp	r6, #0
 800137a:	d000      	beq.n	800137e <__aeabi_dadd+0x382>
 800137c:	e0f4      	b.n	8001568 <__aeabi_dadd+0x56c>
 800137e:	2b00      	cmp	r3, #0
 8001380:	d100      	bne.n	8001384 <__aeabi_dadd+0x388>
 8001382:	e11b      	b.n	80015bc <__aeabi_dadd+0x5c0>
 8001384:	4664      	mov	r4, ip
 8001386:	0039      	movs	r1, r7
 8001388:	0010      	movs	r0, r2
 800138a:	e739      	b.n	8001200 <__aeabi_dadd+0x204>
 800138c:	4f1a      	ldr	r7, [pc, #104]	; (80013f8 <__aeabi_dadd+0x3fc>)
 800138e:	42bb      	cmp	r3, r7
 8001390:	d07a      	beq.n	8001488 <__aeabi_dadd+0x48c>
 8001392:	0033      	movs	r3, r6
 8001394:	e6ff      	b.n	8001196 <__aeabi_dadd+0x19a>
 8001396:	0030      	movs	r0, r6
 8001398:	3d1f      	subs	r5, #31
 800139a:	40e8      	lsrs	r0, r5
 800139c:	2b20      	cmp	r3, #32
 800139e:	d003      	beq.n	80013a8 <__aeabi_dadd+0x3ac>
 80013a0:	2140      	movs	r1, #64	; 0x40
 80013a2:	1acb      	subs	r3, r1, r3
 80013a4:	409e      	lsls	r6, r3
 80013a6:	4337      	orrs	r7, r6
 80013a8:	1e7b      	subs	r3, r7, #1
 80013aa:	419f      	sbcs	r7, r3
 80013ac:	2207      	movs	r2, #7
 80013ae:	4307      	orrs	r7, r0
 80013b0:	403a      	ands	r2, r7
 80013b2:	2100      	movs	r1, #0
 80013b4:	2500      	movs	r5, #0
 80013b6:	e789      	b.n	80012cc <__aeabi_dadd+0x2d0>
 80013b8:	1a17      	subs	r7, r2, r0
 80013ba:	4643      	mov	r3, r8
 80013bc:	42ba      	cmp	r2, r7
 80013be:	41b6      	sbcs	r6, r6
 80013c0:	1a59      	subs	r1, r3, r1
 80013c2:	4276      	negs	r6, r6
 80013c4:	1b8e      	subs	r6, r1, r6
 80013c6:	4664      	mov	r4, ip
 80013c8:	e64e      	b.n	8001068 <__aeabi_dadd+0x6c>
 80013ca:	2b1f      	cmp	r3, #31
 80013cc:	dd00      	ble.n	80013d0 <__aeabi_dadd+0x3d4>
 80013ce:	e0ad      	b.n	800152c <__aeabi_dadd+0x530>
 80013d0:	2620      	movs	r6, #32
 80013d2:	4647      	mov	r7, r8
 80013d4:	1af6      	subs	r6, r6, r3
 80013d6:	40b7      	lsls	r7, r6
 80013d8:	46b9      	mov	r9, r7
 80013da:	0017      	movs	r7, r2
 80013dc:	46b2      	mov	sl, r6
 80013de:	40df      	lsrs	r7, r3
 80013e0:	464e      	mov	r6, r9
 80013e2:	433e      	orrs	r6, r7
 80013e4:	0037      	movs	r7, r6
 80013e6:	4656      	mov	r6, sl
 80013e8:	40b2      	lsls	r2, r6
 80013ea:	1e56      	subs	r6, r2, #1
 80013ec:	41b2      	sbcs	r2, r6
 80013ee:	4317      	orrs	r7, r2
 80013f0:	4642      	mov	r2, r8
 80013f2:	40da      	lsrs	r2, r3
 80013f4:	1889      	adds	r1, r1, r2
 80013f6:	e6ae      	b.n	8001156 <__aeabi_dadd+0x15a>
 80013f8:	000007ff 	.word	0x000007ff
 80013fc:	ff7fffff 	.word	0xff7fffff
 8001400:	800fffff 	.word	0x800fffff
 8001404:	2620      	movs	r6, #32
 8001406:	4647      	mov	r7, r8
 8001408:	1af6      	subs	r6, r6, r3
 800140a:	40b7      	lsls	r7, r6
 800140c:	46b9      	mov	r9, r7
 800140e:	0017      	movs	r7, r2
 8001410:	46b2      	mov	sl, r6
 8001412:	40df      	lsrs	r7, r3
 8001414:	464e      	mov	r6, r9
 8001416:	433e      	orrs	r6, r7
 8001418:	0037      	movs	r7, r6
 800141a:	4656      	mov	r6, sl
 800141c:	40b2      	lsls	r2, r6
 800141e:	1e56      	subs	r6, r2, #1
 8001420:	41b2      	sbcs	r2, r6
 8001422:	4317      	orrs	r7, r2
 8001424:	4642      	mov	r2, r8
 8001426:	40da      	lsrs	r2, r3
 8001428:	1a89      	subs	r1, r1, r2
 800142a:	e799      	b.n	8001360 <__aeabi_dadd+0x364>
 800142c:	4c7f      	ldr	r4, [pc, #508]	; (800162c <__aeabi_dadd+0x630>)
 800142e:	42a6      	cmp	r6, r4
 8001430:	d05b      	beq.n	80014ea <__aeabi_dadd+0x4ee>
 8001432:	2480      	movs	r4, #128	; 0x80
 8001434:	0424      	lsls	r4, r4, #16
 8001436:	425b      	negs	r3, r3
 8001438:	4321      	orrs	r1, r4
 800143a:	e727      	b.n	800128c <__aeabi_dadd+0x290>
 800143c:	2e00      	cmp	r6, #0
 800143e:	d10c      	bne.n	800145a <__aeabi_dadd+0x45e>
 8001440:	2b00      	cmp	r3, #0
 8001442:	d100      	bne.n	8001446 <__aeabi_dadd+0x44a>
 8001444:	e0cb      	b.n	80015de <__aeabi_dadd+0x5e2>
 8001446:	4664      	mov	r4, ip
 8001448:	0039      	movs	r1, r7
 800144a:	0010      	movs	r0, r2
 800144c:	4d77      	ldr	r5, [pc, #476]	; (800162c <__aeabi_dadd+0x630>)
 800144e:	e6d7      	b.n	8001200 <__aeabi_dadd+0x204>
 8001450:	4f76      	ldr	r7, [pc, #472]	; (800162c <__aeabi_dadd+0x630>)
 8001452:	42bb      	cmp	r3, r7
 8001454:	d018      	beq.n	8001488 <__aeabi_dadd+0x48c>
 8001456:	0033      	movs	r3, r6
 8001458:	e675      	b.n	8001146 <__aeabi_dadd+0x14a>
 800145a:	2b00      	cmp	r3, #0
 800145c:	d014      	beq.n	8001488 <__aeabi_dadd+0x48c>
 800145e:	074b      	lsls	r3, r1, #29
 8001460:	08c0      	lsrs	r0, r0, #3
 8001462:	4318      	orrs	r0, r3
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	08c9      	lsrs	r1, r1, #3
 8001468:	031b      	lsls	r3, r3, #12
 800146a:	4219      	tst	r1, r3
 800146c:	d007      	beq.n	800147e <__aeabi_dadd+0x482>
 800146e:	08fc      	lsrs	r4, r7, #3
 8001470:	421c      	tst	r4, r3
 8001472:	d104      	bne.n	800147e <__aeabi_dadd+0x482>
 8001474:	0779      	lsls	r1, r7, #29
 8001476:	08d0      	lsrs	r0, r2, #3
 8001478:	4308      	orrs	r0, r1
 800147a:	46e1      	mov	r9, ip
 800147c:	0021      	movs	r1, r4
 800147e:	464c      	mov	r4, r9
 8001480:	0f42      	lsrs	r2, r0, #29
 8001482:	00c9      	lsls	r1, r1, #3
 8001484:	4311      	orrs	r1, r2
 8001486:	00c0      	lsls	r0, r0, #3
 8001488:	4d68      	ldr	r5, [pc, #416]	; (800162c <__aeabi_dadd+0x630>)
 800148a:	e6b9      	b.n	8001200 <__aeabi_dadd+0x204>
 800148c:	001d      	movs	r5, r3
 800148e:	2200      	movs	r2, #0
 8001490:	2300      	movs	r3, #0
 8001492:	e6c0      	b.n	8001216 <__aeabi_dadd+0x21a>
 8001494:	2d00      	cmp	r5, #0
 8001496:	d15b      	bne.n	8001550 <__aeabi_dadd+0x554>
 8001498:	000d      	movs	r5, r1
 800149a:	4305      	orrs	r5, r0
 800149c:	d100      	bne.n	80014a0 <__aeabi_dadd+0x4a4>
 800149e:	e6e2      	b.n	8001266 <__aeabi_dadd+0x26a>
 80014a0:	1c5d      	adds	r5, r3, #1
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dadd+0x4aa>
 80014a4:	e0b0      	b.n	8001608 <__aeabi_dadd+0x60c>
 80014a6:	4d61      	ldr	r5, [pc, #388]	; (800162c <__aeabi_dadd+0x630>)
 80014a8:	42ae      	cmp	r6, r5
 80014aa:	d01f      	beq.n	80014ec <__aeabi_dadd+0x4f0>
 80014ac:	43db      	mvns	r3, r3
 80014ae:	2b38      	cmp	r3, #56	; 0x38
 80014b0:	dc71      	bgt.n	8001596 <__aeabi_dadd+0x59a>
 80014b2:	2b1f      	cmp	r3, #31
 80014b4:	dd00      	ble.n	80014b8 <__aeabi_dadd+0x4bc>
 80014b6:	e096      	b.n	80015e6 <__aeabi_dadd+0x5ea>
 80014b8:	2520      	movs	r5, #32
 80014ba:	000f      	movs	r7, r1
 80014bc:	1aed      	subs	r5, r5, r3
 80014be:	40af      	lsls	r7, r5
 80014c0:	46b9      	mov	r9, r7
 80014c2:	0007      	movs	r7, r0
 80014c4:	46aa      	mov	sl, r5
 80014c6:	40df      	lsrs	r7, r3
 80014c8:	464d      	mov	r5, r9
 80014ca:	433d      	orrs	r5, r7
 80014cc:	002f      	movs	r7, r5
 80014ce:	4655      	mov	r5, sl
 80014d0:	40a8      	lsls	r0, r5
 80014d2:	40d9      	lsrs	r1, r3
 80014d4:	1e45      	subs	r5, r0, #1
 80014d6:	41a8      	sbcs	r0, r5
 80014d8:	4488      	add	r8, r1
 80014da:	4307      	orrs	r7, r0
 80014dc:	18bf      	adds	r7, r7, r2
 80014de:	4297      	cmp	r7, r2
 80014e0:	4192      	sbcs	r2, r2
 80014e2:	4251      	negs	r1, r2
 80014e4:	4441      	add	r1, r8
 80014e6:	0035      	movs	r5, r6
 80014e8:	e63a      	b.n	8001160 <__aeabi_dadd+0x164>
 80014ea:	4664      	mov	r4, ip
 80014ec:	0035      	movs	r5, r6
 80014ee:	4641      	mov	r1, r8
 80014f0:	0010      	movs	r0, r2
 80014f2:	e685      	b.n	8001200 <__aeabi_dadd+0x204>
 80014f4:	000b      	movs	r3, r1
 80014f6:	4303      	orrs	r3, r0
 80014f8:	2d00      	cmp	r5, #0
 80014fa:	d000      	beq.n	80014fe <__aeabi_dadd+0x502>
 80014fc:	e663      	b.n	80011c6 <__aeabi_dadd+0x1ca>
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f5      	beq.n	80014ee <__aeabi_dadd+0x4f2>
 8001502:	4643      	mov	r3, r8
 8001504:	4313      	orrs	r3, r2
 8001506:	d100      	bne.n	800150a <__aeabi_dadd+0x50e>
 8001508:	e67a      	b.n	8001200 <__aeabi_dadd+0x204>
 800150a:	1887      	adds	r7, r0, r2
 800150c:	4287      	cmp	r7, r0
 800150e:	4180      	sbcs	r0, r0
 8001510:	2207      	movs	r2, #7
 8001512:	4441      	add	r1, r8
 8001514:	4240      	negs	r0, r0
 8001516:	1809      	adds	r1, r1, r0
 8001518:	403a      	ands	r2, r7
 800151a:	020b      	lsls	r3, r1, #8
 800151c:	d400      	bmi.n	8001520 <__aeabi_dadd+0x524>
 800151e:	e6d5      	b.n	80012cc <__aeabi_dadd+0x2d0>
 8001520:	4b43      	ldr	r3, [pc, #268]	; (8001630 <__aeabi_dadd+0x634>)
 8001522:	3501      	adds	r5, #1
 8001524:	4019      	ands	r1, r3
 8001526:	e5c9      	b.n	80010bc <__aeabi_dadd+0xc0>
 8001528:	0038      	movs	r0, r7
 800152a:	e669      	b.n	8001200 <__aeabi_dadd+0x204>
 800152c:	001e      	movs	r6, r3
 800152e:	4647      	mov	r7, r8
 8001530:	3e20      	subs	r6, #32
 8001532:	40f7      	lsrs	r7, r6
 8001534:	46bc      	mov	ip, r7
 8001536:	2b20      	cmp	r3, #32
 8001538:	d004      	beq.n	8001544 <__aeabi_dadd+0x548>
 800153a:	2640      	movs	r6, #64	; 0x40
 800153c:	1af3      	subs	r3, r6, r3
 800153e:	4646      	mov	r6, r8
 8001540:	409e      	lsls	r6, r3
 8001542:	4332      	orrs	r2, r6
 8001544:	0017      	movs	r7, r2
 8001546:	4663      	mov	r3, ip
 8001548:	1e7a      	subs	r2, r7, #1
 800154a:	4197      	sbcs	r7, r2
 800154c:	431f      	orrs	r7, r3
 800154e:	e602      	b.n	8001156 <__aeabi_dadd+0x15a>
 8001550:	4d36      	ldr	r5, [pc, #216]	; (800162c <__aeabi_dadd+0x630>)
 8001552:	42ae      	cmp	r6, r5
 8001554:	d0ca      	beq.n	80014ec <__aeabi_dadd+0x4f0>
 8001556:	2580      	movs	r5, #128	; 0x80
 8001558:	042d      	lsls	r5, r5, #16
 800155a:	425b      	negs	r3, r3
 800155c:	4329      	orrs	r1, r5
 800155e:	e7a6      	b.n	80014ae <__aeabi_dadd+0x4b2>
 8001560:	4308      	orrs	r0, r1
 8001562:	1e41      	subs	r1, r0, #1
 8001564:	4188      	sbcs	r0, r1
 8001566:	e6a6      	b.n	80012b6 <__aeabi_dadd+0x2ba>
 8001568:	2b00      	cmp	r3, #0
 800156a:	d100      	bne.n	800156e <__aeabi_dadd+0x572>
 800156c:	e648      	b.n	8001200 <__aeabi_dadd+0x204>
 800156e:	1a87      	subs	r7, r0, r2
 8001570:	4643      	mov	r3, r8
 8001572:	42b8      	cmp	r0, r7
 8001574:	41b6      	sbcs	r6, r6
 8001576:	1acb      	subs	r3, r1, r3
 8001578:	4276      	negs	r6, r6
 800157a:	1b9e      	subs	r6, r3, r6
 800157c:	0233      	lsls	r3, r6, #8
 800157e:	d54b      	bpl.n	8001618 <__aeabi_dadd+0x61c>
 8001580:	1a17      	subs	r7, r2, r0
 8001582:	4643      	mov	r3, r8
 8001584:	42ba      	cmp	r2, r7
 8001586:	4192      	sbcs	r2, r2
 8001588:	1a59      	subs	r1, r3, r1
 800158a:	4252      	negs	r2, r2
 800158c:	1a89      	subs	r1, r1, r2
 800158e:	2207      	movs	r2, #7
 8001590:	4664      	mov	r4, ip
 8001592:	403a      	ands	r2, r7
 8001594:	e592      	b.n	80010bc <__aeabi_dadd+0xc0>
 8001596:	4301      	orrs	r1, r0
 8001598:	000f      	movs	r7, r1
 800159a:	1e79      	subs	r1, r7, #1
 800159c:	418f      	sbcs	r7, r1
 800159e:	e79d      	b.n	80014dc <__aeabi_dadd+0x4e0>
 80015a0:	001c      	movs	r4, r3
 80015a2:	000f      	movs	r7, r1
 80015a4:	3c20      	subs	r4, #32
 80015a6:	40e7      	lsrs	r7, r4
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	d003      	beq.n	80015b4 <__aeabi_dadd+0x5b8>
 80015ac:	2440      	movs	r4, #64	; 0x40
 80015ae:	1ae3      	subs	r3, r4, r3
 80015b0:	4099      	lsls	r1, r3
 80015b2:	4308      	orrs	r0, r1
 80015b4:	1e41      	subs	r1, r0, #1
 80015b6:	4188      	sbcs	r0, r1
 80015b8:	4338      	orrs	r0, r7
 80015ba:	e67c      	b.n	80012b6 <__aeabi_dadd+0x2ba>
 80015bc:	2200      	movs	r2, #0
 80015be:	2400      	movs	r4, #0
 80015c0:	e625      	b.n	800120e <__aeabi_dadd+0x212>
 80015c2:	1a17      	subs	r7, r2, r0
 80015c4:	4643      	mov	r3, r8
 80015c6:	42ba      	cmp	r2, r7
 80015c8:	4192      	sbcs	r2, r2
 80015ca:	1a59      	subs	r1, r3, r1
 80015cc:	4252      	negs	r2, r2
 80015ce:	1a89      	subs	r1, r1, r2
 80015d0:	4664      	mov	r4, ip
 80015d2:	0035      	movs	r5, r6
 80015d4:	e543      	b.n	800105e <__aeabi_dadd+0x62>
 80015d6:	4641      	mov	r1, r8
 80015d8:	0010      	movs	r0, r2
 80015da:	4d14      	ldr	r5, [pc, #80]	; (800162c <__aeabi_dadd+0x630>)
 80015dc:	e610      	b.n	8001200 <__aeabi_dadd+0x204>
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	2400      	movs	r4, #0
 80015e2:	0312      	lsls	r2, r2, #12
 80015e4:	e680      	b.n	80012e8 <__aeabi_dadd+0x2ec>
 80015e6:	001d      	movs	r5, r3
 80015e8:	000f      	movs	r7, r1
 80015ea:	3d20      	subs	r5, #32
 80015ec:	40ef      	lsrs	r7, r5
 80015ee:	46bc      	mov	ip, r7
 80015f0:	2b20      	cmp	r3, #32
 80015f2:	d003      	beq.n	80015fc <__aeabi_dadd+0x600>
 80015f4:	2540      	movs	r5, #64	; 0x40
 80015f6:	1aeb      	subs	r3, r5, r3
 80015f8:	4099      	lsls	r1, r3
 80015fa:	4308      	orrs	r0, r1
 80015fc:	0007      	movs	r7, r0
 80015fe:	4663      	mov	r3, ip
 8001600:	1e78      	subs	r0, r7, #1
 8001602:	4187      	sbcs	r7, r0
 8001604:	431f      	orrs	r7, r3
 8001606:	e769      	b.n	80014dc <__aeabi_dadd+0x4e0>
 8001608:	1887      	adds	r7, r0, r2
 800160a:	4297      	cmp	r7, r2
 800160c:	419b      	sbcs	r3, r3
 800160e:	4441      	add	r1, r8
 8001610:	425b      	negs	r3, r3
 8001612:	18c9      	adds	r1, r1, r3
 8001614:	0035      	movs	r5, r6
 8001616:	e5a3      	b.n	8001160 <__aeabi_dadd+0x164>
 8001618:	003b      	movs	r3, r7
 800161a:	4333      	orrs	r3, r6
 800161c:	d0ce      	beq.n	80015bc <__aeabi_dadd+0x5c0>
 800161e:	2207      	movs	r2, #7
 8001620:	0031      	movs	r1, r6
 8001622:	403a      	ands	r2, r7
 8001624:	e652      	b.n	80012cc <__aeabi_dadd+0x2d0>
 8001626:	2300      	movs	r3, #0
 8001628:	001a      	movs	r2, r3
 800162a:	e5f4      	b.n	8001216 <__aeabi_dadd+0x21a>
 800162c:	000007ff 	.word	0x000007ff
 8001630:	ff7fffff 	.word	0xff7fffff

08001634 <__aeabi_ddiv>:
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001636:	4657      	mov	r7, sl
 8001638:	46de      	mov	lr, fp
 800163a:	464e      	mov	r6, r9
 800163c:	4645      	mov	r5, r8
 800163e:	b5e0      	push	{r5, r6, r7, lr}
 8001640:	4683      	mov	fp, r0
 8001642:	0007      	movs	r7, r0
 8001644:	030e      	lsls	r6, r1, #12
 8001646:	0048      	lsls	r0, r1, #1
 8001648:	b085      	sub	sp, #20
 800164a:	4692      	mov	sl, r2
 800164c:	001c      	movs	r4, r3
 800164e:	0b36      	lsrs	r6, r6, #12
 8001650:	0d40      	lsrs	r0, r0, #21
 8001652:	0fcd      	lsrs	r5, r1, #31
 8001654:	2800      	cmp	r0, #0
 8001656:	d100      	bne.n	800165a <__aeabi_ddiv+0x26>
 8001658:	e09d      	b.n	8001796 <__aeabi_ddiv+0x162>
 800165a:	4b95      	ldr	r3, [pc, #596]	; (80018b0 <__aeabi_ddiv+0x27c>)
 800165c:	4298      	cmp	r0, r3
 800165e:	d039      	beq.n	80016d4 <__aeabi_ddiv+0xa0>
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	00f6      	lsls	r6, r6, #3
 8001664:	041b      	lsls	r3, r3, #16
 8001666:	431e      	orrs	r6, r3
 8001668:	4a92      	ldr	r2, [pc, #584]	; (80018b4 <__aeabi_ddiv+0x280>)
 800166a:	0f7b      	lsrs	r3, r7, #29
 800166c:	4333      	orrs	r3, r6
 800166e:	4699      	mov	r9, r3
 8001670:	4694      	mov	ip, r2
 8001672:	0003      	movs	r3, r0
 8001674:	4463      	add	r3, ip
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2300      	movs	r3, #0
 800167a:	2600      	movs	r6, #0
 800167c:	00ff      	lsls	r7, r7, #3
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	0323      	lsls	r3, r4, #12
 8001682:	0b1b      	lsrs	r3, r3, #12
 8001684:	4698      	mov	r8, r3
 8001686:	0063      	lsls	r3, r4, #1
 8001688:	0fe4      	lsrs	r4, r4, #31
 800168a:	4652      	mov	r2, sl
 800168c:	0d5b      	lsrs	r3, r3, #21
 800168e:	9401      	str	r4, [sp, #4]
 8001690:	d100      	bne.n	8001694 <__aeabi_ddiv+0x60>
 8001692:	e0b3      	b.n	80017fc <__aeabi_ddiv+0x1c8>
 8001694:	4986      	ldr	r1, [pc, #536]	; (80018b0 <__aeabi_ddiv+0x27c>)
 8001696:	428b      	cmp	r3, r1
 8001698:	d100      	bne.n	800169c <__aeabi_ddiv+0x68>
 800169a:	e09e      	b.n	80017da <__aeabi_ddiv+0x1a6>
 800169c:	4642      	mov	r2, r8
 800169e:	00d1      	lsls	r1, r2, #3
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	0412      	lsls	r2, r2, #16
 80016a4:	430a      	orrs	r2, r1
 80016a6:	4651      	mov	r1, sl
 80016a8:	0f49      	lsrs	r1, r1, #29
 80016aa:	4311      	orrs	r1, r2
 80016ac:	468b      	mov	fp, r1
 80016ae:	4981      	ldr	r1, [pc, #516]	; (80018b4 <__aeabi_ddiv+0x280>)
 80016b0:	4652      	mov	r2, sl
 80016b2:	468c      	mov	ip, r1
 80016b4:	9900      	ldr	r1, [sp, #0]
 80016b6:	4463      	add	r3, ip
 80016b8:	1acb      	subs	r3, r1, r3
 80016ba:	2100      	movs	r1, #0
 80016bc:	00d2      	lsls	r2, r2, #3
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	002b      	movs	r3, r5
 80016c2:	4063      	eors	r3, r4
 80016c4:	469a      	mov	sl, r3
 80016c6:	2e0f      	cmp	r6, #15
 80016c8:	d900      	bls.n	80016cc <__aeabi_ddiv+0x98>
 80016ca:	e105      	b.n	80018d8 <__aeabi_ddiv+0x2a4>
 80016cc:	4b7a      	ldr	r3, [pc, #488]	; (80018b8 <__aeabi_ddiv+0x284>)
 80016ce:	00b6      	lsls	r6, r6, #2
 80016d0:	599b      	ldr	r3, [r3, r6]
 80016d2:	469f      	mov	pc, r3
 80016d4:	465b      	mov	r3, fp
 80016d6:	4333      	orrs	r3, r6
 80016d8:	4699      	mov	r9, r3
 80016da:	d000      	beq.n	80016de <__aeabi_ddiv+0xaa>
 80016dc:	e0b8      	b.n	8001850 <__aeabi_ddiv+0x21c>
 80016de:	2302      	movs	r3, #2
 80016e0:	2608      	movs	r6, #8
 80016e2:	2700      	movs	r7, #0
 80016e4:	9000      	str	r0, [sp, #0]
 80016e6:	9302      	str	r3, [sp, #8]
 80016e8:	e7ca      	b.n	8001680 <__aeabi_ddiv+0x4c>
 80016ea:	46cb      	mov	fp, r9
 80016ec:	003a      	movs	r2, r7
 80016ee:	9902      	ldr	r1, [sp, #8]
 80016f0:	9501      	str	r5, [sp, #4]
 80016f2:	9b01      	ldr	r3, [sp, #4]
 80016f4:	469a      	mov	sl, r3
 80016f6:	2902      	cmp	r1, #2
 80016f8:	d027      	beq.n	800174a <__aeabi_ddiv+0x116>
 80016fa:	2903      	cmp	r1, #3
 80016fc:	d100      	bne.n	8001700 <__aeabi_ddiv+0xcc>
 80016fe:	e280      	b.n	8001c02 <__aeabi_ddiv+0x5ce>
 8001700:	2901      	cmp	r1, #1
 8001702:	d044      	beq.n	800178e <__aeabi_ddiv+0x15a>
 8001704:	496d      	ldr	r1, [pc, #436]	; (80018bc <__aeabi_ddiv+0x288>)
 8001706:	9b00      	ldr	r3, [sp, #0]
 8001708:	468c      	mov	ip, r1
 800170a:	4463      	add	r3, ip
 800170c:	001c      	movs	r4, r3
 800170e:	2c00      	cmp	r4, #0
 8001710:	dd38      	ble.n	8001784 <__aeabi_ddiv+0x150>
 8001712:	0753      	lsls	r3, r2, #29
 8001714:	d000      	beq.n	8001718 <__aeabi_ddiv+0xe4>
 8001716:	e213      	b.n	8001b40 <__aeabi_ddiv+0x50c>
 8001718:	08d2      	lsrs	r2, r2, #3
 800171a:	465b      	mov	r3, fp
 800171c:	01db      	lsls	r3, r3, #7
 800171e:	d509      	bpl.n	8001734 <__aeabi_ddiv+0x100>
 8001720:	4659      	mov	r1, fp
 8001722:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <__aeabi_ddiv+0x28c>)
 8001724:	4019      	ands	r1, r3
 8001726:	468b      	mov	fp, r1
 8001728:	2180      	movs	r1, #128	; 0x80
 800172a:	00c9      	lsls	r1, r1, #3
 800172c:	468c      	mov	ip, r1
 800172e:	9b00      	ldr	r3, [sp, #0]
 8001730:	4463      	add	r3, ip
 8001732:	001c      	movs	r4, r3
 8001734:	4b63      	ldr	r3, [pc, #396]	; (80018c4 <__aeabi_ddiv+0x290>)
 8001736:	429c      	cmp	r4, r3
 8001738:	dc07      	bgt.n	800174a <__aeabi_ddiv+0x116>
 800173a:	465b      	mov	r3, fp
 800173c:	0564      	lsls	r4, r4, #21
 800173e:	075f      	lsls	r7, r3, #29
 8001740:	025b      	lsls	r3, r3, #9
 8001742:	4317      	orrs	r7, r2
 8001744:	0b1b      	lsrs	r3, r3, #12
 8001746:	0d62      	lsrs	r2, r4, #21
 8001748:	e002      	b.n	8001750 <__aeabi_ddiv+0x11c>
 800174a:	2300      	movs	r3, #0
 800174c:	2700      	movs	r7, #0
 800174e:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <__aeabi_ddiv+0x27c>)
 8001750:	2100      	movs	r1, #0
 8001752:	031b      	lsls	r3, r3, #12
 8001754:	0b1c      	lsrs	r4, r3, #12
 8001756:	0d0b      	lsrs	r3, r1, #20
 8001758:	051b      	lsls	r3, r3, #20
 800175a:	4323      	orrs	r3, r4
 800175c:	0514      	lsls	r4, r2, #20
 800175e:	4a5a      	ldr	r2, [pc, #360]	; (80018c8 <__aeabi_ddiv+0x294>)
 8001760:	0038      	movs	r0, r7
 8001762:	4013      	ands	r3, r2
 8001764:	431c      	orrs	r4, r3
 8001766:	4653      	mov	r3, sl
 8001768:	0064      	lsls	r4, r4, #1
 800176a:	07db      	lsls	r3, r3, #31
 800176c:	0864      	lsrs	r4, r4, #1
 800176e:	431c      	orrs	r4, r3
 8001770:	0021      	movs	r1, r4
 8001772:	b005      	add	sp, #20
 8001774:	bc3c      	pop	{r2, r3, r4, r5}
 8001776:	4690      	mov	r8, r2
 8001778:	4699      	mov	r9, r3
 800177a:	46a2      	mov	sl, r4
 800177c:	46ab      	mov	fp, r5
 800177e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001780:	2201      	movs	r2, #1
 8001782:	4252      	negs	r2, r2
 8001784:	2301      	movs	r3, #1
 8001786:	1b1b      	subs	r3, r3, r4
 8001788:	2b38      	cmp	r3, #56	; 0x38
 800178a:	dc00      	bgt.n	800178e <__aeabi_ddiv+0x15a>
 800178c:	e1ad      	b.n	8001aea <__aeabi_ddiv+0x4b6>
 800178e:	2200      	movs	r2, #0
 8001790:	2300      	movs	r3, #0
 8001792:	2700      	movs	r7, #0
 8001794:	e7dc      	b.n	8001750 <__aeabi_ddiv+0x11c>
 8001796:	465b      	mov	r3, fp
 8001798:	4333      	orrs	r3, r6
 800179a:	4699      	mov	r9, r3
 800179c:	d05e      	beq.n	800185c <__aeabi_ddiv+0x228>
 800179e:	2e00      	cmp	r6, #0
 80017a0:	d100      	bne.n	80017a4 <__aeabi_ddiv+0x170>
 80017a2:	e18a      	b.n	8001aba <__aeabi_ddiv+0x486>
 80017a4:	0030      	movs	r0, r6
 80017a6:	f001 fa9d 	bl	8002ce4 <__clzsi2>
 80017aa:	0003      	movs	r3, r0
 80017ac:	3b0b      	subs	r3, #11
 80017ae:	2b1c      	cmp	r3, #28
 80017b0:	dd00      	ble.n	80017b4 <__aeabi_ddiv+0x180>
 80017b2:	e17b      	b.n	8001aac <__aeabi_ddiv+0x478>
 80017b4:	221d      	movs	r2, #29
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	465a      	mov	r2, fp
 80017ba:	0001      	movs	r1, r0
 80017bc:	40da      	lsrs	r2, r3
 80017be:	3908      	subs	r1, #8
 80017c0:	408e      	lsls	r6, r1
 80017c2:	0013      	movs	r3, r2
 80017c4:	465f      	mov	r7, fp
 80017c6:	4333      	orrs	r3, r6
 80017c8:	4699      	mov	r9, r3
 80017ca:	408f      	lsls	r7, r1
 80017cc:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <__aeabi_ddiv+0x298>)
 80017ce:	2600      	movs	r6, #0
 80017d0:	1a1b      	subs	r3, r3, r0
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2300      	movs	r3, #0
 80017d6:	9302      	str	r3, [sp, #8]
 80017d8:	e752      	b.n	8001680 <__aeabi_ddiv+0x4c>
 80017da:	4641      	mov	r1, r8
 80017dc:	4653      	mov	r3, sl
 80017de:	430b      	orrs	r3, r1
 80017e0:	493b      	ldr	r1, [pc, #236]	; (80018d0 <__aeabi_ddiv+0x29c>)
 80017e2:	469b      	mov	fp, r3
 80017e4:	468c      	mov	ip, r1
 80017e6:	9b00      	ldr	r3, [sp, #0]
 80017e8:	4463      	add	r3, ip
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	465b      	mov	r3, fp
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d13b      	bne.n	800186a <__aeabi_ddiv+0x236>
 80017f2:	2302      	movs	r3, #2
 80017f4:	2200      	movs	r2, #0
 80017f6:	431e      	orrs	r6, r3
 80017f8:	2102      	movs	r1, #2
 80017fa:	e761      	b.n	80016c0 <__aeabi_ddiv+0x8c>
 80017fc:	4643      	mov	r3, r8
 80017fe:	4313      	orrs	r3, r2
 8001800:	469b      	mov	fp, r3
 8001802:	d037      	beq.n	8001874 <__aeabi_ddiv+0x240>
 8001804:	4643      	mov	r3, r8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d100      	bne.n	800180c <__aeabi_ddiv+0x1d8>
 800180a:	e162      	b.n	8001ad2 <__aeabi_ddiv+0x49e>
 800180c:	4640      	mov	r0, r8
 800180e:	f001 fa69 	bl	8002ce4 <__clzsi2>
 8001812:	0003      	movs	r3, r0
 8001814:	3b0b      	subs	r3, #11
 8001816:	2b1c      	cmp	r3, #28
 8001818:	dd00      	ble.n	800181c <__aeabi_ddiv+0x1e8>
 800181a:	e153      	b.n	8001ac4 <__aeabi_ddiv+0x490>
 800181c:	0002      	movs	r2, r0
 800181e:	4641      	mov	r1, r8
 8001820:	3a08      	subs	r2, #8
 8001822:	4091      	lsls	r1, r2
 8001824:	4688      	mov	r8, r1
 8001826:	211d      	movs	r1, #29
 8001828:	1acb      	subs	r3, r1, r3
 800182a:	4651      	mov	r1, sl
 800182c:	40d9      	lsrs	r1, r3
 800182e:	000b      	movs	r3, r1
 8001830:	4641      	mov	r1, r8
 8001832:	430b      	orrs	r3, r1
 8001834:	469b      	mov	fp, r3
 8001836:	4653      	mov	r3, sl
 8001838:	4093      	lsls	r3, r2
 800183a:	001a      	movs	r2, r3
 800183c:	9b00      	ldr	r3, [sp, #0]
 800183e:	4925      	ldr	r1, [pc, #148]	; (80018d4 <__aeabi_ddiv+0x2a0>)
 8001840:	469c      	mov	ip, r3
 8001842:	4460      	add	r0, ip
 8001844:	0003      	movs	r3, r0
 8001846:	468c      	mov	ip, r1
 8001848:	4463      	add	r3, ip
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2100      	movs	r1, #0
 800184e:	e737      	b.n	80016c0 <__aeabi_ddiv+0x8c>
 8001850:	2303      	movs	r3, #3
 8001852:	46b1      	mov	r9, r6
 8001854:	9000      	str	r0, [sp, #0]
 8001856:	260c      	movs	r6, #12
 8001858:	9302      	str	r3, [sp, #8]
 800185a:	e711      	b.n	8001680 <__aeabi_ddiv+0x4c>
 800185c:	2300      	movs	r3, #0
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	2604      	movs	r6, #4
 8001864:	2700      	movs	r7, #0
 8001866:	9302      	str	r3, [sp, #8]
 8001868:	e70a      	b.n	8001680 <__aeabi_ddiv+0x4c>
 800186a:	2303      	movs	r3, #3
 800186c:	46c3      	mov	fp, r8
 800186e:	431e      	orrs	r6, r3
 8001870:	2103      	movs	r1, #3
 8001872:	e725      	b.n	80016c0 <__aeabi_ddiv+0x8c>
 8001874:	3301      	adds	r3, #1
 8001876:	431e      	orrs	r6, r3
 8001878:	2200      	movs	r2, #0
 800187a:	2101      	movs	r1, #1
 800187c:	e720      	b.n	80016c0 <__aeabi_ddiv+0x8c>
 800187e:	2300      	movs	r3, #0
 8001880:	469a      	mov	sl, r3
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	2700      	movs	r7, #0
 8001886:	031b      	lsls	r3, r3, #12
 8001888:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <__aeabi_ddiv+0x27c>)
 800188a:	e761      	b.n	8001750 <__aeabi_ddiv+0x11c>
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	4649      	mov	r1, r9
 8001890:	031b      	lsls	r3, r3, #12
 8001892:	4219      	tst	r1, r3
 8001894:	d100      	bne.n	8001898 <__aeabi_ddiv+0x264>
 8001896:	e0e2      	b.n	8001a5e <__aeabi_ddiv+0x42a>
 8001898:	4659      	mov	r1, fp
 800189a:	4219      	tst	r1, r3
 800189c:	d000      	beq.n	80018a0 <__aeabi_ddiv+0x26c>
 800189e:	e0de      	b.n	8001a5e <__aeabi_ddiv+0x42a>
 80018a0:	430b      	orrs	r3, r1
 80018a2:	031b      	lsls	r3, r3, #12
 80018a4:	0017      	movs	r7, r2
 80018a6:	0b1b      	lsrs	r3, r3, #12
 80018a8:	46a2      	mov	sl, r4
 80018aa:	4a01      	ldr	r2, [pc, #4]	; (80018b0 <__aeabi_ddiv+0x27c>)
 80018ac:	e750      	b.n	8001750 <__aeabi_ddiv+0x11c>
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	000007ff 	.word	0x000007ff
 80018b4:	fffffc01 	.word	0xfffffc01
 80018b8:	08017c94 	.word	0x08017c94
 80018bc:	000003ff 	.word	0x000003ff
 80018c0:	feffffff 	.word	0xfeffffff
 80018c4:	000007fe 	.word	0x000007fe
 80018c8:	800fffff 	.word	0x800fffff
 80018cc:	fffffc0d 	.word	0xfffffc0d
 80018d0:	fffff801 	.word	0xfffff801
 80018d4:	000003f3 	.word	0x000003f3
 80018d8:	45d9      	cmp	r9, fp
 80018da:	d900      	bls.n	80018de <__aeabi_ddiv+0x2aa>
 80018dc:	e0cb      	b.n	8001a76 <__aeabi_ddiv+0x442>
 80018de:	d100      	bne.n	80018e2 <__aeabi_ddiv+0x2ae>
 80018e0:	e0c6      	b.n	8001a70 <__aeabi_ddiv+0x43c>
 80018e2:	003c      	movs	r4, r7
 80018e4:	4648      	mov	r0, r9
 80018e6:	2700      	movs	r7, #0
 80018e8:	9b00      	ldr	r3, [sp, #0]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	465b      	mov	r3, fp
 80018f0:	0e16      	lsrs	r6, r2, #24
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	431e      	orrs	r6, r3
 80018f6:	0213      	lsls	r3, r2, #8
 80018f8:	4698      	mov	r8, r3
 80018fa:	0433      	lsls	r3, r6, #16
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	4699      	mov	r9, r3
 8001900:	0c31      	lsrs	r1, r6, #16
 8001902:	9101      	str	r1, [sp, #4]
 8001904:	f7fe fcaa 	bl	800025c <__aeabi_uidivmod>
 8001908:	464a      	mov	r2, r9
 800190a:	4342      	muls	r2, r0
 800190c:	040b      	lsls	r3, r1, #16
 800190e:	0c21      	lsrs	r1, r4, #16
 8001910:	0005      	movs	r5, r0
 8001912:	4319      	orrs	r1, r3
 8001914:	428a      	cmp	r2, r1
 8001916:	d907      	bls.n	8001928 <__aeabi_ddiv+0x2f4>
 8001918:	1989      	adds	r1, r1, r6
 800191a:	3d01      	subs	r5, #1
 800191c:	428e      	cmp	r6, r1
 800191e:	d803      	bhi.n	8001928 <__aeabi_ddiv+0x2f4>
 8001920:	428a      	cmp	r2, r1
 8001922:	d901      	bls.n	8001928 <__aeabi_ddiv+0x2f4>
 8001924:	1e85      	subs	r5, r0, #2
 8001926:	1989      	adds	r1, r1, r6
 8001928:	1a88      	subs	r0, r1, r2
 800192a:	9901      	ldr	r1, [sp, #4]
 800192c:	f7fe fc96 	bl	800025c <__aeabi_uidivmod>
 8001930:	0409      	lsls	r1, r1, #16
 8001932:	468c      	mov	ip, r1
 8001934:	464a      	mov	r2, r9
 8001936:	0421      	lsls	r1, r4, #16
 8001938:	4664      	mov	r4, ip
 800193a:	4342      	muls	r2, r0
 800193c:	0c09      	lsrs	r1, r1, #16
 800193e:	0003      	movs	r3, r0
 8001940:	4321      	orrs	r1, r4
 8001942:	428a      	cmp	r2, r1
 8001944:	d904      	bls.n	8001950 <__aeabi_ddiv+0x31c>
 8001946:	1989      	adds	r1, r1, r6
 8001948:	3b01      	subs	r3, #1
 800194a:	428e      	cmp	r6, r1
 800194c:	d800      	bhi.n	8001950 <__aeabi_ddiv+0x31c>
 800194e:	e0f1      	b.n	8001b34 <__aeabi_ddiv+0x500>
 8001950:	042d      	lsls	r5, r5, #16
 8001952:	431d      	orrs	r5, r3
 8001954:	46ab      	mov	fp, r5
 8001956:	4643      	mov	r3, r8
 8001958:	1a89      	subs	r1, r1, r2
 800195a:	4642      	mov	r2, r8
 800195c:	0c28      	lsrs	r0, r5, #16
 800195e:	0412      	lsls	r2, r2, #16
 8001960:	0c1d      	lsrs	r5, r3, #16
 8001962:	465b      	mov	r3, fp
 8001964:	0c14      	lsrs	r4, r2, #16
 8001966:	0022      	movs	r2, r4
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	0c1b      	lsrs	r3, r3, #16
 800196c:	435a      	muls	r2, r3
 800196e:	9403      	str	r4, [sp, #12]
 8001970:	436b      	muls	r3, r5
 8001972:	4344      	muls	r4, r0
 8001974:	9502      	str	r5, [sp, #8]
 8001976:	4368      	muls	r0, r5
 8001978:	191b      	adds	r3, r3, r4
 800197a:	0c15      	lsrs	r5, r2, #16
 800197c:	18eb      	adds	r3, r5, r3
 800197e:	429c      	cmp	r4, r3
 8001980:	d903      	bls.n	800198a <__aeabi_ddiv+0x356>
 8001982:	2480      	movs	r4, #128	; 0x80
 8001984:	0264      	lsls	r4, r4, #9
 8001986:	46a4      	mov	ip, r4
 8001988:	4460      	add	r0, ip
 800198a:	0c1c      	lsrs	r4, r3, #16
 800198c:	0415      	lsls	r5, r2, #16
 800198e:	041b      	lsls	r3, r3, #16
 8001990:	0c2d      	lsrs	r5, r5, #16
 8001992:	1820      	adds	r0, r4, r0
 8001994:	195d      	adds	r5, r3, r5
 8001996:	4281      	cmp	r1, r0
 8001998:	d377      	bcc.n	8001a8a <__aeabi_ddiv+0x456>
 800199a:	d073      	beq.n	8001a84 <__aeabi_ddiv+0x450>
 800199c:	1a0c      	subs	r4, r1, r0
 800199e:	4aa2      	ldr	r2, [pc, #648]	; (8001c28 <__aeabi_ddiv+0x5f4>)
 80019a0:	1b7d      	subs	r5, r7, r5
 80019a2:	42af      	cmp	r7, r5
 80019a4:	41bf      	sbcs	r7, r7
 80019a6:	4694      	mov	ip, r2
 80019a8:	9b00      	ldr	r3, [sp, #0]
 80019aa:	427f      	negs	r7, r7
 80019ac:	4463      	add	r3, ip
 80019ae:	1be0      	subs	r0, r4, r7
 80019b0:	001c      	movs	r4, r3
 80019b2:	4286      	cmp	r6, r0
 80019b4:	d100      	bne.n	80019b8 <__aeabi_ddiv+0x384>
 80019b6:	e0db      	b.n	8001b70 <__aeabi_ddiv+0x53c>
 80019b8:	9901      	ldr	r1, [sp, #4]
 80019ba:	f7fe fc4f 	bl	800025c <__aeabi_uidivmod>
 80019be:	464a      	mov	r2, r9
 80019c0:	4342      	muls	r2, r0
 80019c2:	040b      	lsls	r3, r1, #16
 80019c4:	0c29      	lsrs	r1, r5, #16
 80019c6:	0007      	movs	r7, r0
 80019c8:	4319      	orrs	r1, r3
 80019ca:	428a      	cmp	r2, r1
 80019cc:	d907      	bls.n	80019de <__aeabi_ddiv+0x3aa>
 80019ce:	1989      	adds	r1, r1, r6
 80019d0:	3f01      	subs	r7, #1
 80019d2:	428e      	cmp	r6, r1
 80019d4:	d803      	bhi.n	80019de <__aeabi_ddiv+0x3aa>
 80019d6:	428a      	cmp	r2, r1
 80019d8:	d901      	bls.n	80019de <__aeabi_ddiv+0x3aa>
 80019da:	1e87      	subs	r7, r0, #2
 80019dc:	1989      	adds	r1, r1, r6
 80019de:	1a88      	subs	r0, r1, r2
 80019e0:	9901      	ldr	r1, [sp, #4]
 80019e2:	f7fe fc3b 	bl	800025c <__aeabi_uidivmod>
 80019e6:	0409      	lsls	r1, r1, #16
 80019e8:	464a      	mov	r2, r9
 80019ea:	4689      	mov	r9, r1
 80019ec:	0429      	lsls	r1, r5, #16
 80019ee:	464d      	mov	r5, r9
 80019f0:	4342      	muls	r2, r0
 80019f2:	0c09      	lsrs	r1, r1, #16
 80019f4:	0003      	movs	r3, r0
 80019f6:	4329      	orrs	r1, r5
 80019f8:	428a      	cmp	r2, r1
 80019fa:	d907      	bls.n	8001a0c <__aeabi_ddiv+0x3d8>
 80019fc:	1989      	adds	r1, r1, r6
 80019fe:	3b01      	subs	r3, #1
 8001a00:	428e      	cmp	r6, r1
 8001a02:	d803      	bhi.n	8001a0c <__aeabi_ddiv+0x3d8>
 8001a04:	428a      	cmp	r2, r1
 8001a06:	d901      	bls.n	8001a0c <__aeabi_ddiv+0x3d8>
 8001a08:	1e83      	subs	r3, r0, #2
 8001a0a:	1989      	adds	r1, r1, r6
 8001a0c:	043f      	lsls	r7, r7, #16
 8001a0e:	1a89      	subs	r1, r1, r2
 8001a10:	003a      	movs	r2, r7
 8001a12:	9f03      	ldr	r7, [sp, #12]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	0038      	movs	r0, r7
 8001a18:	0413      	lsls	r3, r2, #16
 8001a1a:	0c1b      	lsrs	r3, r3, #16
 8001a1c:	4358      	muls	r0, r3
 8001a1e:	4681      	mov	r9, r0
 8001a20:	9802      	ldr	r0, [sp, #8]
 8001a22:	0c15      	lsrs	r5, r2, #16
 8001a24:	436f      	muls	r7, r5
 8001a26:	4343      	muls	r3, r0
 8001a28:	4345      	muls	r5, r0
 8001a2a:	4648      	mov	r0, r9
 8001a2c:	0c00      	lsrs	r0, r0, #16
 8001a2e:	4684      	mov	ip, r0
 8001a30:	19db      	adds	r3, r3, r7
 8001a32:	4463      	add	r3, ip
 8001a34:	429f      	cmp	r7, r3
 8001a36:	d903      	bls.n	8001a40 <__aeabi_ddiv+0x40c>
 8001a38:	2080      	movs	r0, #128	; 0x80
 8001a3a:	0240      	lsls	r0, r0, #9
 8001a3c:	4684      	mov	ip, r0
 8001a3e:	4465      	add	r5, ip
 8001a40:	4648      	mov	r0, r9
 8001a42:	0c1f      	lsrs	r7, r3, #16
 8001a44:	0400      	lsls	r0, r0, #16
 8001a46:	041b      	lsls	r3, r3, #16
 8001a48:	0c00      	lsrs	r0, r0, #16
 8001a4a:	197d      	adds	r5, r7, r5
 8001a4c:	1818      	adds	r0, r3, r0
 8001a4e:	42a9      	cmp	r1, r5
 8001a50:	d200      	bcs.n	8001a54 <__aeabi_ddiv+0x420>
 8001a52:	e084      	b.n	8001b5e <__aeabi_ddiv+0x52a>
 8001a54:	d100      	bne.n	8001a58 <__aeabi_ddiv+0x424>
 8001a56:	e07f      	b.n	8001b58 <__aeabi_ddiv+0x524>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	e657      	b.n	800170e <__aeabi_ddiv+0xda>
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	464a      	mov	r2, r9
 8001a62:	031b      	lsls	r3, r3, #12
 8001a64:	4313      	orrs	r3, r2
 8001a66:	031b      	lsls	r3, r3, #12
 8001a68:	0b1b      	lsrs	r3, r3, #12
 8001a6a:	46aa      	mov	sl, r5
 8001a6c:	4a6f      	ldr	r2, [pc, #444]	; (8001c2c <__aeabi_ddiv+0x5f8>)
 8001a6e:	e66f      	b.n	8001750 <__aeabi_ddiv+0x11c>
 8001a70:	42ba      	cmp	r2, r7
 8001a72:	d900      	bls.n	8001a76 <__aeabi_ddiv+0x442>
 8001a74:	e735      	b.n	80018e2 <__aeabi_ddiv+0x2ae>
 8001a76:	464b      	mov	r3, r9
 8001a78:	07dc      	lsls	r4, r3, #31
 8001a7a:	0858      	lsrs	r0, r3, #1
 8001a7c:	087b      	lsrs	r3, r7, #1
 8001a7e:	431c      	orrs	r4, r3
 8001a80:	07ff      	lsls	r7, r7, #31
 8001a82:	e734      	b.n	80018ee <__aeabi_ddiv+0x2ba>
 8001a84:	2400      	movs	r4, #0
 8001a86:	42af      	cmp	r7, r5
 8001a88:	d289      	bcs.n	800199e <__aeabi_ddiv+0x36a>
 8001a8a:	4447      	add	r7, r8
 8001a8c:	4547      	cmp	r7, r8
 8001a8e:	41a4      	sbcs	r4, r4
 8001a90:	465b      	mov	r3, fp
 8001a92:	4264      	negs	r4, r4
 8001a94:	19a4      	adds	r4, r4, r6
 8001a96:	1864      	adds	r4, r4, r1
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	42a6      	cmp	r6, r4
 8001a9c:	d21e      	bcs.n	8001adc <__aeabi_ddiv+0x4a8>
 8001a9e:	42a0      	cmp	r0, r4
 8001aa0:	d86d      	bhi.n	8001b7e <__aeabi_ddiv+0x54a>
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_ddiv+0x472>
 8001aa4:	e0b6      	b.n	8001c14 <__aeabi_ddiv+0x5e0>
 8001aa6:	1a24      	subs	r4, r4, r0
 8001aa8:	469b      	mov	fp, r3
 8001aaa:	e778      	b.n	800199e <__aeabi_ddiv+0x36a>
 8001aac:	0003      	movs	r3, r0
 8001aae:	465a      	mov	r2, fp
 8001ab0:	3b28      	subs	r3, #40	; 0x28
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	2700      	movs	r7, #0
 8001ab6:	4691      	mov	r9, r2
 8001ab8:	e688      	b.n	80017cc <__aeabi_ddiv+0x198>
 8001aba:	4658      	mov	r0, fp
 8001abc:	f001 f912 	bl	8002ce4 <__clzsi2>
 8001ac0:	3020      	adds	r0, #32
 8001ac2:	e672      	b.n	80017aa <__aeabi_ddiv+0x176>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	4652      	mov	r2, sl
 8001ac8:	3b28      	subs	r3, #40	; 0x28
 8001aca:	409a      	lsls	r2, r3
 8001acc:	4693      	mov	fp, r2
 8001ace:	2200      	movs	r2, #0
 8001ad0:	e6b4      	b.n	800183c <__aeabi_ddiv+0x208>
 8001ad2:	4650      	mov	r0, sl
 8001ad4:	f001 f906 	bl	8002ce4 <__clzsi2>
 8001ad8:	3020      	adds	r0, #32
 8001ada:	e69a      	b.n	8001812 <__aeabi_ddiv+0x1de>
 8001adc:	42a6      	cmp	r6, r4
 8001ade:	d1e2      	bne.n	8001aa6 <__aeabi_ddiv+0x472>
 8001ae0:	45b8      	cmp	r8, r7
 8001ae2:	d9dc      	bls.n	8001a9e <__aeabi_ddiv+0x46a>
 8001ae4:	1a34      	subs	r4, r6, r0
 8001ae6:	469b      	mov	fp, r3
 8001ae8:	e759      	b.n	800199e <__aeabi_ddiv+0x36a>
 8001aea:	2b1f      	cmp	r3, #31
 8001aec:	dc65      	bgt.n	8001bba <__aeabi_ddiv+0x586>
 8001aee:	4c50      	ldr	r4, [pc, #320]	; (8001c30 <__aeabi_ddiv+0x5fc>)
 8001af0:	9900      	ldr	r1, [sp, #0]
 8001af2:	46a4      	mov	ip, r4
 8001af4:	465c      	mov	r4, fp
 8001af6:	4461      	add	r1, ip
 8001af8:	0008      	movs	r0, r1
 8001afa:	408c      	lsls	r4, r1
 8001afc:	0011      	movs	r1, r2
 8001afe:	4082      	lsls	r2, r0
 8001b00:	40d9      	lsrs	r1, r3
 8001b02:	1e50      	subs	r0, r2, #1
 8001b04:	4182      	sbcs	r2, r0
 8001b06:	430c      	orrs	r4, r1
 8001b08:	4314      	orrs	r4, r2
 8001b0a:	465a      	mov	r2, fp
 8001b0c:	40da      	lsrs	r2, r3
 8001b0e:	0013      	movs	r3, r2
 8001b10:	0762      	lsls	r2, r4, #29
 8001b12:	d009      	beq.n	8001b28 <__aeabi_ddiv+0x4f4>
 8001b14:	220f      	movs	r2, #15
 8001b16:	4022      	ands	r2, r4
 8001b18:	2a04      	cmp	r2, #4
 8001b1a:	d005      	beq.n	8001b28 <__aeabi_ddiv+0x4f4>
 8001b1c:	0022      	movs	r2, r4
 8001b1e:	1d14      	adds	r4, r2, #4
 8001b20:	4294      	cmp	r4, r2
 8001b22:	4189      	sbcs	r1, r1
 8001b24:	4249      	negs	r1, r1
 8001b26:	185b      	adds	r3, r3, r1
 8001b28:	021a      	lsls	r2, r3, #8
 8001b2a:	d562      	bpl.n	8001bf2 <__aeabi_ddiv+0x5be>
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2700      	movs	r7, #0
 8001b32:	e60d      	b.n	8001750 <__aeabi_ddiv+0x11c>
 8001b34:	428a      	cmp	r2, r1
 8001b36:	d800      	bhi.n	8001b3a <__aeabi_ddiv+0x506>
 8001b38:	e70a      	b.n	8001950 <__aeabi_ddiv+0x31c>
 8001b3a:	1e83      	subs	r3, r0, #2
 8001b3c:	1989      	adds	r1, r1, r6
 8001b3e:	e707      	b.n	8001950 <__aeabi_ddiv+0x31c>
 8001b40:	230f      	movs	r3, #15
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x516>
 8001b48:	e5e6      	b.n	8001718 <__aeabi_ddiv+0xe4>
 8001b4a:	1d17      	adds	r7, r2, #4
 8001b4c:	4297      	cmp	r7, r2
 8001b4e:	4192      	sbcs	r2, r2
 8001b50:	4253      	negs	r3, r2
 8001b52:	449b      	add	fp, r3
 8001b54:	08fa      	lsrs	r2, r7, #3
 8001b56:	e5e0      	b.n	800171a <__aeabi_ddiv+0xe6>
 8001b58:	2800      	cmp	r0, #0
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_ddiv+0x52a>
 8001b5c:	e5d7      	b.n	800170e <__aeabi_ddiv+0xda>
 8001b5e:	1871      	adds	r1, r6, r1
 8001b60:	1e53      	subs	r3, r2, #1
 8001b62:	42b1      	cmp	r1, r6
 8001b64:	d327      	bcc.n	8001bb6 <__aeabi_ddiv+0x582>
 8001b66:	42a9      	cmp	r1, r5
 8001b68:	d315      	bcc.n	8001b96 <__aeabi_ddiv+0x562>
 8001b6a:	d058      	beq.n	8001c1e <__aeabi_ddiv+0x5ea>
 8001b6c:	001a      	movs	r2, r3
 8001b6e:	e773      	b.n	8001a58 <__aeabi_ddiv+0x424>
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	dc00      	bgt.n	8001b76 <__aeabi_ddiv+0x542>
 8001b74:	e604      	b.n	8001780 <__aeabi_ddiv+0x14c>
 8001b76:	2301      	movs	r3, #1
 8001b78:	2200      	movs	r2, #0
 8001b7a:	449b      	add	fp, r3
 8001b7c:	e5cd      	b.n	800171a <__aeabi_ddiv+0xe6>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	4447      	add	r7, r8
 8001b82:	4547      	cmp	r7, r8
 8001b84:	4189      	sbcs	r1, r1
 8001b86:	425b      	negs	r3, r3
 8001b88:	469c      	mov	ip, r3
 8001b8a:	4249      	negs	r1, r1
 8001b8c:	1989      	adds	r1, r1, r6
 8001b8e:	190c      	adds	r4, r1, r4
 8001b90:	44e3      	add	fp, ip
 8001b92:	1a24      	subs	r4, r4, r0
 8001b94:	e703      	b.n	800199e <__aeabi_ddiv+0x36a>
 8001b96:	4643      	mov	r3, r8
 8001b98:	005f      	lsls	r7, r3, #1
 8001b9a:	4547      	cmp	r7, r8
 8001b9c:	419b      	sbcs	r3, r3
 8001b9e:	46b8      	mov	r8, r7
 8001ba0:	425b      	negs	r3, r3
 8001ba2:	199e      	adds	r6, r3, r6
 8001ba4:	3a02      	subs	r2, #2
 8001ba6:	1989      	adds	r1, r1, r6
 8001ba8:	42a9      	cmp	r1, r5
 8001baa:	d000      	beq.n	8001bae <__aeabi_ddiv+0x57a>
 8001bac:	e754      	b.n	8001a58 <__aeabi_ddiv+0x424>
 8001bae:	4540      	cmp	r0, r8
 8001bb0:	d000      	beq.n	8001bb4 <__aeabi_ddiv+0x580>
 8001bb2:	e751      	b.n	8001a58 <__aeabi_ddiv+0x424>
 8001bb4:	e5ab      	b.n	800170e <__aeabi_ddiv+0xda>
 8001bb6:	001a      	movs	r2, r3
 8001bb8:	e7f6      	b.n	8001ba8 <__aeabi_ddiv+0x574>
 8001bba:	211f      	movs	r1, #31
 8001bbc:	465f      	mov	r7, fp
 8001bbe:	4249      	negs	r1, r1
 8001bc0:	1b0c      	subs	r4, r1, r4
 8001bc2:	40e7      	lsrs	r7, r4
 8001bc4:	2b20      	cmp	r3, #32
 8001bc6:	d007      	beq.n	8001bd8 <__aeabi_ddiv+0x5a4>
 8001bc8:	491a      	ldr	r1, [pc, #104]	; (8001c34 <__aeabi_ddiv+0x600>)
 8001bca:	9b00      	ldr	r3, [sp, #0]
 8001bcc:	468c      	mov	ip, r1
 8001bce:	4463      	add	r3, ip
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	465b      	mov	r3, fp
 8001bd4:	4083      	lsls	r3, r0
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	1e50      	subs	r0, r2, #1
 8001bda:	4182      	sbcs	r2, r0
 8001bdc:	433a      	orrs	r2, r7
 8001bde:	2707      	movs	r7, #7
 8001be0:	2300      	movs	r3, #0
 8001be2:	4017      	ands	r7, r2
 8001be4:	d009      	beq.n	8001bfa <__aeabi_ddiv+0x5c6>
 8001be6:	210f      	movs	r1, #15
 8001be8:	2300      	movs	r3, #0
 8001bea:	4011      	ands	r1, r2
 8001bec:	0014      	movs	r4, r2
 8001bee:	2904      	cmp	r1, #4
 8001bf0:	d195      	bne.n	8001b1e <__aeabi_ddiv+0x4ea>
 8001bf2:	0022      	movs	r2, r4
 8001bf4:	075f      	lsls	r7, r3, #29
 8001bf6:	025b      	lsls	r3, r3, #9
 8001bf8:	0b1b      	lsrs	r3, r3, #12
 8001bfa:	08d2      	lsrs	r2, r2, #3
 8001bfc:	4317      	orrs	r7, r2
 8001bfe:	2200      	movs	r2, #0
 8001c00:	e5a6      	b.n	8001750 <__aeabi_ddiv+0x11c>
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	4659      	mov	r1, fp
 8001c06:	031b      	lsls	r3, r3, #12
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	031b      	lsls	r3, r3, #12
 8001c0c:	0017      	movs	r7, r2
 8001c0e:	0b1b      	lsrs	r3, r3, #12
 8001c10:	4a06      	ldr	r2, [pc, #24]	; (8001c2c <__aeabi_ddiv+0x5f8>)
 8001c12:	e59d      	b.n	8001750 <__aeabi_ddiv+0x11c>
 8001c14:	42bd      	cmp	r5, r7
 8001c16:	d8b2      	bhi.n	8001b7e <__aeabi_ddiv+0x54a>
 8001c18:	469b      	mov	fp, r3
 8001c1a:	2400      	movs	r4, #0
 8001c1c:	e6bf      	b.n	800199e <__aeabi_ddiv+0x36a>
 8001c1e:	4580      	cmp	r8, r0
 8001c20:	d3b9      	bcc.n	8001b96 <__aeabi_ddiv+0x562>
 8001c22:	001a      	movs	r2, r3
 8001c24:	e7c3      	b.n	8001bae <__aeabi_ddiv+0x57a>
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	000003ff 	.word	0x000003ff
 8001c2c:	000007ff 	.word	0x000007ff
 8001c30:	0000041e 	.word	0x0000041e
 8001c34:	0000043e 	.word	0x0000043e

08001c38 <__eqdf2>:
 8001c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3a:	464f      	mov	r7, r9
 8001c3c:	4646      	mov	r6, r8
 8001c3e:	46d6      	mov	lr, sl
 8001c40:	4684      	mov	ip, r0
 8001c42:	b5c0      	push	{r6, r7, lr}
 8001c44:	4680      	mov	r8, r0
 8001c46:	4e19      	ldr	r6, [pc, #100]	; (8001cac <__eqdf2+0x74>)
 8001c48:	0318      	lsls	r0, r3, #12
 8001c4a:	030f      	lsls	r7, r1, #12
 8001c4c:	004d      	lsls	r5, r1, #1
 8001c4e:	0b00      	lsrs	r0, r0, #12
 8001c50:	005c      	lsls	r4, r3, #1
 8001c52:	4682      	mov	sl, r0
 8001c54:	0b3f      	lsrs	r7, r7, #12
 8001c56:	0d6d      	lsrs	r5, r5, #21
 8001c58:	0fc9      	lsrs	r1, r1, #31
 8001c5a:	4691      	mov	r9, r2
 8001c5c:	0d64      	lsrs	r4, r4, #21
 8001c5e:	0fdb      	lsrs	r3, r3, #31
 8001c60:	2001      	movs	r0, #1
 8001c62:	42b5      	cmp	r5, r6
 8001c64:	d00a      	beq.n	8001c7c <__eqdf2+0x44>
 8001c66:	42b4      	cmp	r4, r6
 8001c68:	d003      	beq.n	8001c72 <__eqdf2+0x3a>
 8001c6a:	42a5      	cmp	r5, r4
 8001c6c:	d101      	bne.n	8001c72 <__eqdf2+0x3a>
 8001c6e:	4557      	cmp	r7, sl
 8001c70:	d00c      	beq.n	8001c8c <__eqdf2+0x54>
 8001c72:	bc1c      	pop	{r2, r3, r4}
 8001c74:	4690      	mov	r8, r2
 8001c76:	4699      	mov	r9, r3
 8001c78:	46a2      	mov	sl, r4
 8001c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c7c:	4666      	mov	r6, ip
 8001c7e:	433e      	orrs	r6, r7
 8001c80:	d1f7      	bne.n	8001c72 <__eqdf2+0x3a>
 8001c82:	42ac      	cmp	r4, r5
 8001c84:	d1f5      	bne.n	8001c72 <__eqdf2+0x3a>
 8001c86:	4654      	mov	r4, sl
 8001c88:	4314      	orrs	r4, r2
 8001c8a:	d1f2      	bne.n	8001c72 <__eqdf2+0x3a>
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	45c8      	cmp	r8, r9
 8001c90:	d1ef      	bne.n	8001c72 <__eqdf2+0x3a>
 8001c92:	4299      	cmp	r1, r3
 8001c94:	d007      	beq.n	8001ca6 <__eqdf2+0x6e>
 8001c96:	2d00      	cmp	r5, #0
 8001c98:	d1eb      	bne.n	8001c72 <__eqdf2+0x3a>
 8001c9a:	4663      	mov	r3, ip
 8001c9c:	431f      	orrs	r7, r3
 8001c9e:	0038      	movs	r0, r7
 8001ca0:	1e47      	subs	r7, r0, #1
 8001ca2:	41b8      	sbcs	r0, r7
 8001ca4:	e7e5      	b.n	8001c72 <__eqdf2+0x3a>
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	e7e3      	b.n	8001c72 <__eqdf2+0x3a>
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	000007ff 	.word	0x000007ff

08001cb0 <__gedf2>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	464f      	mov	r7, r9
 8001cb4:	4646      	mov	r6, r8
 8001cb6:	46d6      	mov	lr, sl
 8001cb8:	004d      	lsls	r5, r1, #1
 8001cba:	b5c0      	push	{r6, r7, lr}
 8001cbc:	030e      	lsls	r6, r1, #12
 8001cbe:	0fc9      	lsrs	r1, r1, #31
 8001cc0:	468a      	mov	sl, r1
 8001cc2:	492c      	ldr	r1, [pc, #176]	; (8001d74 <__gedf2+0xc4>)
 8001cc4:	031f      	lsls	r7, r3, #12
 8001cc6:	005c      	lsls	r4, r3, #1
 8001cc8:	4680      	mov	r8, r0
 8001cca:	0b36      	lsrs	r6, r6, #12
 8001ccc:	0d6d      	lsrs	r5, r5, #21
 8001cce:	4691      	mov	r9, r2
 8001cd0:	0b3f      	lsrs	r7, r7, #12
 8001cd2:	0d64      	lsrs	r4, r4, #21
 8001cd4:	0fdb      	lsrs	r3, r3, #31
 8001cd6:	428d      	cmp	r5, r1
 8001cd8:	d01e      	beq.n	8001d18 <__gedf2+0x68>
 8001cda:	428c      	cmp	r4, r1
 8001cdc:	d016      	beq.n	8001d0c <__gedf2+0x5c>
 8001cde:	2d00      	cmp	r5, #0
 8001ce0:	d11e      	bne.n	8001d20 <__gedf2+0x70>
 8001ce2:	4330      	orrs	r0, r6
 8001ce4:	4684      	mov	ip, r0
 8001ce6:	2c00      	cmp	r4, #0
 8001ce8:	d101      	bne.n	8001cee <__gedf2+0x3e>
 8001cea:	433a      	orrs	r2, r7
 8001cec:	d023      	beq.n	8001d36 <__gedf2+0x86>
 8001cee:	4662      	mov	r2, ip
 8001cf0:	2a00      	cmp	r2, #0
 8001cf2:	d01a      	beq.n	8001d2a <__gedf2+0x7a>
 8001cf4:	459a      	cmp	sl, r3
 8001cf6:	d029      	beq.n	8001d4c <__gedf2+0x9c>
 8001cf8:	4651      	mov	r1, sl
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	3901      	subs	r1, #1
 8001cfe:	4008      	ands	r0, r1
 8001d00:	3801      	subs	r0, #1
 8001d02:	bc1c      	pop	{r2, r3, r4}
 8001d04:	4690      	mov	r8, r2
 8001d06:	4699      	mov	r9, r3
 8001d08:	46a2      	mov	sl, r4
 8001d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d0c:	0039      	movs	r1, r7
 8001d0e:	4311      	orrs	r1, r2
 8001d10:	d0e5      	beq.n	8001cde <__gedf2+0x2e>
 8001d12:	2002      	movs	r0, #2
 8001d14:	4240      	negs	r0, r0
 8001d16:	e7f4      	b.n	8001d02 <__gedf2+0x52>
 8001d18:	4330      	orrs	r0, r6
 8001d1a:	d1fa      	bne.n	8001d12 <__gedf2+0x62>
 8001d1c:	42ac      	cmp	r4, r5
 8001d1e:	d00f      	beq.n	8001d40 <__gedf2+0x90>
 8001d20:	2c00      	cmp	r4, #0
 8001d22:	d10f      	bne.n	8001d44 <__gedf2+0x94>
 8001d24:	433a      	orrs	r2, r7
 8001d26:	d0e7      	beq.n	8001cf8 <__gedf2+0x48>
 8001d28:	e00c      	b.n	8001d44 <__gedf2+0x94>
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	4393      	bics	r3, r2
 8001d30:	0018      	movs	r0, r3
 8001d32:	3001      	adds	r0, #1
 8001d34:	e7e5      	b.n	8001d02 <__gedf2+0x52>
 8001d36:	4663      	mov	r3, ip
 8001d38:	2000      	movs	r0, #0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0e1      	beq.n	8001d02 <__gedf2+0x52>
 8001d3e:	e7db      	b.n	8001cf8 <__gedf2+0x48>
 8001d40:	433a      	orrs	r2, r7
 8001d42:	d1e6      	bne.n	8001d12 <__gedf2+0x62>
 8001d44:	459a      	cmp	sl, r3
 8001d46:	d1d7      	bne.n	8001cf8 <__gedf2+0x48>
 8001d48:	42a5      	cmp	r5, r4
 8001d4a:	dcd5      	bgt.n	8001cf8 <__gedf2+0x48>
 8001d4c:	42a5      	cmp	r5, r4
 8001d4e:	db05      	blt.n	8001d5c <__gedf2+0xac>
 8001d50:	42be      	cmp	r6, r7
 8001d52:	d8d1      	bhi.n	8001cf8 <__gedf2+0x48>
 8001d54:	d008      	beq.n	8001d68 <__gedf2+0xb8>
 8001d56:	2000      	movs	r0, #0
 8001d58:	42be      	cmp	r6, r7
 8001d5a:	d2d2      	bcs.n	8001d02 <__gedf2+0x52>
 8001d5c:	4650      	mov	r0, sl
 8001d5e:	2301      	movs	r3, #1
 8001d60:	3801      	subs	r0, #1
 8001d62:	4398      	bics	r0, r3
 8001d64:	3001      	adds	r0, #1
 8001d66:	e7cc      	b.n	8001d02 <__gedf2+0x52>
 8001d68:	45c8      	cmp	r8, r9
 8001d6a:	d8c5      	bhi.n	8001cf8 <__gedf2+0x48>
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	45c8      	cmp	r8, r9
 8001d70:	d3f4      	bcc.n	8001d5c <__gedf2+0xac>
 8001d72:	e7c6      	b.n	8001d02 <__gedf2+0x52>
 8001d74:	000007ff 	.word	0x000007ff

08001d78 <__ledf2>:
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	464f      	mov	r7, r9
 8001d7c:	4646      	mov	r6, r8
 8001d7e:	46d6      	mov	lr, sl
 8001d80:	004d      	lsls	r5, r1, #1
 8001d82:	b5c0      	push	{r6, r7, lr}
 8001d84:	030e      	lsls	r6, r1, #12
 8001d86:	0fc9      	lsrs	r1, r1, #31
 8001d88:	468a      	mov	sl, r1
 8001d8a:	492e      	ldr	r1, [pc, #184]	; (8001e44 <__ledf2+0xcc>)
 8001d8c:	031f      	lsls	r7, r3, #12
 8001d8e:	005c      	lsls	r4, r3, #1
 8001d90:	4680      	mov	r8, r0
 8001d92:	0b36      	lsrs	r6, r6, #12
 8001d94:	0d6d      	lsrs	r5, r5, #21
 8001d96:	4691      	mov	r9, r2
 8001d98:	0b3f      	lsrs	r7, r7, #12
 8001d9a:	0d64      	lsrs	r4, r4, #21
 8001d9c:	0fdb      	lsrs	r3, r3, #31
 8001d9e:	428d      	cmp	r5, r1
 8001da0:	d018      	beq.n	8001dd4 <__ledf2+0x5c>
 8001da2:	428c      	cmp	r4, r1
 8001da4:	d011      	beq.n	8001dca <__ledf2+0x52>
 8001da6:	2d00      	cmp	r5, #0
 8001da8:	d118      	bne.n	8001ddc <__ledf2+0x64>
 8001daa:	4330      	orrs	r0, r6
 8001dac:	4684      	mov	ip, r0
 8001dae:	2c00      	cmp	r4, #0
 8001db0:	d11e      	bne.n	8001df0 <__ledf2+0x78>
 8001db2:	433a      	orrs	r2, r7
 8001db4:	d11c      	bne.n	8001df0 <__ledf2+0x78>
 8001db6:	4663      	mov	r3, ip
 8001db8:	2000      	movs	r0, #0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d030      	beq.n	8001e20 <__ledf2+0xa8>
 8001dbe:	4651      	mov	r1, sl
 8001dc0:	2002      	movs	r0, #2
 8001dc2:	3901      	subs	r1, #1
 8001dc4:	4008      	ands	r0, r1
 8001dc6:	3801      	subs	r0, #1
 8001dc8:	e02a      	b.n	8001e20 <__ledf2+0xa8>
 8001dca:	0039      	movs	r1, r7
 8001dcc:	4311      	orrs	r1, r2
 8001dce:	d0ea      	beq.n	8001da6 <__ledf2+0x2e>
 8001dd0:	2002      	movs	r0, #2
 8001dd2:	e025      	b.n	8001e20 <__ledf2+0xa8>
 8001dd4:	4330      	orrs	r0, r6
 8001dd6:	d1fb      	bne.n	8001dd0 <__ledf2+0x58>
 8001dd8:	42ac      	cmp	r4, r5
 8001dda:	d026      	beq.n	8001e2a <__ledf2+0xb2>
 8001ddc:	2c00      	cmp	r4, #0
 8001dde:	d126      	bne.n	8001e2e <__ledf2+0xb6>
 8001de0:	433a      	orrs	r2, r7
 8001de2:	d124      	bne.n	8001e2e <__ledf2+0xb6>
 8001de4:	4651      	mov	r1, sl
 8001de6:	2002      	movs	r0, #2
 8001de8:	3901      	subs	r1, #1
 8001dea:	4008      	ands	r0, r1
 8001dec:	3801      	subs	r0, #1
 8001dee:	e017      	b.n	8001e20 <__ledf2+0xa8>
 8001df0:	4662      	mov	r2, ip
 8001df2:	2a00      	cmp	r2, #0
 8001df4:	d00f      	beq.n	8001e16 <__ledf2+0x9e>
 8001df6:	459a      	cmp	sl, r3
 8001df8:	d1e1      	bne.n	8001dbe <__ledf2+0x46>
 8001dfa:	42a5      	cmp	r5, r4
 8001dfc:	db05      	blt.n	8001e0a <__ledf2+0x92>
 8001dfe:	42be      	cmp	r6, r7
 8001e00:	d8dd      	bhi.n	8001dbe <__ledf2+0x46>
 8001e02:	d019      	beq.n	8001e38 <__ledf2+0xc0>
 8001e04:	2000      	movs	r0, #0
 8001e06:	42be      	cmp	r6, r7
 8001e08:	d20a      	bcs.n	8001e20 <__ledf2+0xa8>
 8001e0a:	4650      	mov	r0, sl
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	3801      	subs	r0, #1
 8001e10:	4398      	bics	r0, r3
 8001e12:	3001      	adds	r0, #1
 8001e14:	e004      	b.n	8001e20 <__ledf2+0xa8>
 8001e16:	2201      	movs	r2, #1
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	4393      	bics	r3, r2
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	3001      	adds	r0, #1
 8001e20:	bc1c      	pop	{r2, r3, r4}
 8001e22:	4690      	mov	r8, r2
 8001e24:	4699      	mov	r9, r3
 8001e26:	46a2      	mov	sl, r4
 8001e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e2a:	433a      	orrs	r2, r7
 8001e2c:	d1d0      	bne.n	8001dd0 <__ledf2+0x58>
 8001e2e:	459a      	cmp	sl, r3
 8001e30:	d1c5      	bne.n	8001dbe <__ledf2+0x46>
 8001e32:	42a5      	cmp	r5, r4
 8001e34:	dcc3      	bgt.n	8001dbe <__ledf2+0x46>
 8001e36:	e7e0      	b.n	8001dfa <__ledf2+0x82>
 8001e38:	45c8      	cmp	r8, r9
 8001e3a:	d8c0      	bhi.n	8001dbe <__ledf2+0x46>
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	45c8      	cmp	r8, r9
 8001e40:	d3e3      	bcc.n	8001e0a <__ledf2+0x92>
 8001e42:	e7ed      	b.n	8001e20 <__ledf2+0xa8>
 8001e44:	000007ff 	.word	0x000007ff

08001e48 <__aeabi_dmul>:
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4a:	4657      	mov	r7, sl
 8001e4c:	46de      	mov	lr, fp
 8001e4e:	464e      	mov	r6, r9
 8001e50:	4645      	mov	r5, r8
 8001e52:	b5e0      	push	{r5, r6, r7, lr}
 8001e54:	4683      	mov	fp, r0
 8001e56:	0006      	movs	r6, r0
 8001e58:	030f      	lsls	r7, r1, #12
 8001e5a:	0048      	lsls	r0, r1, #1
 8001e5c:	b087      	sub	sp, #28
 8001e5e:	4692      	mov	sl, r2
 8001e60:	001d      	movs	r5, r3
 8001e62:	0b3f      	lsrs	r7, r7, #12
 8001e64:	0d40      	lsrs	r0, r0, #21
 8001e66:	0fcc      	lsrs	r4, r1, #31
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	d100      	bne.n	8001e6e <__aeabi_dmul+0x26>
 8001e6c:	e06f      	b.n	8001f4e <__aeabi_dmul+0x106>
 8001e6e:	4bde      	ldr	r3, [pc, #888]	; (80021e8 <__aeabi_dmul+0x3a0>)
 8001e70:	4298      	cmp	r0, r3
 8001e72:	d038      	beq.n	8001ee6 <__aeabi_dmul+0x9e>
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	00ff      	lsls	r7, r7, #3
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	431f      	orrs	r7, r3
 8001e7c:	0f73      	lsrs	r3, r6, #29
 8001e7e:	433b      	orrs	r3, r7
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	4bda      	ldr	r3, [pc, #872]	; (80021ec <__aeabi_dmul+0x3a4>)
 8001e84:	2700      	movs	r7, #0
 8001e86:	4699      	mov	r9, r3
 8001e88:	2300      	movs	r3, #0
 8001e8a:	469b      	mov	fp, r3
 8001e8c:	00f6      	lsls	r6, r6, #3
 8001e8e:	4481      	add	r9, r0
 8001e90:	032b      	lsls	r3, r5, #12
 8001e92:	0069      	lsls	r1, r5, #1
 8001e94:	0b1b      	lsrs	r3, r3, #12
 8001e96:	4652      	mov	r2, sl
 8001e98:	4698      	mov	r8, r3
 8001e9a:	0d49      	lsrs	r1, r1, #21
 8001e9c:	0fed      	lsrs	r5, r5, #31
 8001e9e:	2900      	cmp	r1, #0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dmul+0x5c>
 8001ea2:	e085      	b.n	8001fb0 <__aeabi_dmul+0x168>
 8001ea4:	4bd0      	ldr	r3, [pc, #832]	; (80021e8 <__aeabi_dmul+0x3a0>)
 8001ea6:	4299      	cmp	r1, r3
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dmul+0x64>
 8001eaa:	e073      	b.n	8001f94 <__aeabi_dmul+0x14c>
 8001eac:	4643      	mov	r3, r8
 8001eae:	00da      	lsls	r2, r3, #3
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	041b      	lsls	r3, r3, #16
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	4652      	mov	r2, sl
 8001eb8:	48cc      	ldr	r0, [pc, #816]	; (80021ec <__aeabi_dmul+0x3a4>)
 8001eba:	0f52      	lsrs	r2, r2, #29
 8001ebc:	4684      	mov	ip, r0
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	4652      	mov	r2, sl
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	4461      	add	r1, ip
 8001ec6:	00d2      	lsls	r2, r2, #3
 8001ec8:	4489      	add	r9, r1
 8001eca:	0021      	movs	r1, r4
 8001ecc:	4069      	eors	r1, r5
 8001ece:	9100      	str	r1, [sp, #0]
 8001ed0:	468c      	mov	ip, r1
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	4449      	add	r1, r9
 8001ed6:	468a      	mov	sl, r1
 8001ed8:	2f0f      	cmp	r7, #15
 8001eda:	d900      	bls.n	8001ede <__aeabi_dmul+0x96>
 8001edc:	e090      	b.n	8002000 <__aeabi_dmul+0x1b8>
 8001ede:	49c4      	ldr	r1, [pc, #784]	; (80021f0 <__aeabi_dmul+0x3a8>)
 8001ee0:	00bf      	lsls	r7, r7, #2
 8001ee2:	59cf      	ldr	r7, [r1, r7]
 8001ee4:	46bf      	mov	pc, r7
 8001ee6:	465b      	mov	r3, fp
 8001ee8:	433b      	orrs	r3, r7
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	d000      	beq.n	8001ef0 <__aeabi_dmul+0xa8>
 8001eee:	e16a      	b.n	80021c6 <__aeabi_dmul+0x37e>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	2708      	movs	r7, #8
 8001ef4:	2600      	movs	r6, #0
 8001ef6:	4681      	mov	r9, r0
 8001ef8:	469b      	mov	fp, r3
 8001efa:	e7c9      	b.n	8001e90 <__aeabi_dmul+0x48>
 8001efc:	0032      	movs	r2, r6
 8001efe:	4658      	mov	r0, fp
 8001f00:	9b01      	ldr	r3, [sp, #4]
 8001f02:	4661      	mov	r1, ip
 8001f04:	9100      	str	r1, [sp, #0]
 8001f06:	2802      	cmp	r0, #2
 8001f08:	d100      	bne.n	8001f0c <__aeabi_dmul+0xc4>
 8001f0a:	e075      	b.n	8001ff8 <__aeabi_dmul+0x1b0>
 8001f0c:	2803      	cmp	r0, #3
 8001f0e:	d100      	bne.n	8001f12 <__aeabi_dmul+0xca>
 8001f10:	e1fe      	b.n	8002310 <__aeabi_dmul+0x4c8>
 8001f12:	2801      	cmp	r0, #1
 8001f14:	d000      	beq.n	8001f18 <__aeabi_dmul+0xd0>
 8001f16:	e12c      	b.n	8002172 <__aeabi_dmul+0x32a>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2700      	movs	r7, #0
 8001f1c:	2600      	movs	r6, #0
 8001f1e:	2500      	movs	r5, #0
 8001f20:	033f      	lsls	r7, r7, #12
 8001f22:	0d2a      	lsrs	r2, r5, #20
 8001f24:	0b3f      	lsrs	r7, r7, #12
 8001f26:	48b3      	ldr	r0, [pc, #716]	; (80021f4 <__aeabi_dmul+0x3ac>)
 8001f28:	0512      	lsls	r2, r2, #20
 8001f2a:	433a      	orrs	r2, r7
 8001f2c:	4002      	ands	r2, r0
 8001f2e:	051b      	lsls	r3, r3, #20
 8001f30:	4313      	orrs	r3, r2
 8001f32:	9a00      	ldr	r2, [sp, #0]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	07d1      	lsls	r1, r2, #31
 8001f38:	085b      	lsrs	r3, r3, #1
 8001f3a:	430b      	orrs	r3, r1
 8001f3c:	0030      	movs	r0, r6
 8001f3e:	0019      	movs	r1, r3
 8001f40:	b007      	add	sp, #28
 8001f42:	bc3c      	pop	{r2, r3, r4, r5}
 8001f44:	4690      	mov	r8, r2
 8001f46:	4699      	mov	r9, r3
 8001f48:	46a2      	mov	sl, r4
 8001f4a:	46ab      	mov	fp, r5
 8001f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f4e:	465b      	mov	r3, fp
 8001f50:	433b      	orrs	r3, r7
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dmul+0x110>
 8001f56:	e12f      	b.n	80021b8 <__aeabi_dmul+0x370>
 8001f58:	2f00      	cmp	r7, #0
 8001f5a:	d100      	bne.n	8001f5e <__aeabi_dmul+0x116>
 8001f5c:	e1a5      	b.n	80022aa <__aeabi_dmul+0x462>
 8001f5e:	0038      	movs	r0, r7
 8001f60:	f000 fec0 	bl	8002ce4 <__clzsi2>
 8001f64:	0003      	movs	r3, r0
 8001f66:	3b0b      	subs	r3, #11
 8001f68:	2b1c      	cmp	r3, #28
 8001f6a:	dd00      	ble.n	8001f6e <__aeabi_dmul+0x126>
 8001f6c:	e196      	b.n	800229c <__aeabi_dmul+0x454>
 8001f6e:	221d      	movs	r2, #29
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	465a      	mov	r2, fp
 8001f74:	0001      	movs	r1, r0
 8001f76:	40da      	lsrs	r2, r3
 8001f78:	465e      	mov	r6, fp
 8001f7a:	3908      	subs	r1, #8
 8001f7c:	408f      	lsls	r7, r1
 8001f7e:	0013      	movs	r3, r2
 8001f80:	408e      	lsls	r6, r1
 8001f82:	433b      	orrs	r3, r7
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	4b9c      	ldr	r3, [pc, #624]	; (80021f8 <__aeabi_dmul+0x3b0>)
 8001f88:	2700      	movs	r7, #0
 8001f8a:	1a1b      	subs	r3, r3, r0
 8001f8c:	4699      	mov	r9, r3
 8001f8e:	2300      	movs	r3, #0
 8001f90:	469b      	mov	fp, r3
 8001f92:	e77d      	b.n	8001e90 <__aeabi_dmul+0x48>
 8001f94:	4641      	mov	r1, r8
 8001f96:	4653      	mov	r3, sl
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	4993      	ldr	r1, [pc, #588]	; (80021e8 <__aeabi_dmul+0x3a0>)
 8001f9c:	468c      	mov	ip, r1
 8001f9e:	44e1      	add	r9, ip
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d000      	beq.n	8001fa6 <__aeabi_dmul+0x15e>
 8001fa4:	e11a      	b.n	80021dc <__aeabi_dmul+0x394>
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	2002      	movs	r0, #2
 8001faa:	4317      	orrs	r7, r2
 8001fac:	2200      	movs	r2, #0
 8001fae:	e78c      	b.n	8001eca <__aeabi_dmul+0x82>
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dmul+0x16e>
 8001fb4:	e10d      	b.n	80021d2 <__aeabi_dmul+0x38a>
 8001fb6:	4643      	mov	r3, r8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_dmul+0x176>
 8001fbc:	e181      	b.n	80022c2 <__aeabi_dmul+0x47a>
 8001fbe:	4640      	mov	r0, r8
 8001fc0:	f000 fe90 	bl	8002ce4 <__clzsi2>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	3a0b      	subs	r2, #11
 8001fc8:	2a1c      	cmp	r2, #28
 8001fca:	dd00      	ble.n	8001fce <__aeabi_dmul+0x186>
 8001fcc:	e172      	b.n	80022b4 <__aeabi_dmul+0x46c>
 8001fce:	0001      	movs	r1, r0
 8001fd0:	4643      	mov	r3, r8
 8001fd2:	3908      	subs	r1, #8
 8001fd4:	408b      	lsls	r3, r1
 8001fd6:	4698      	mov	r8, r3
 8001fd8:	231d      	movs	r3, #29
 8001fda:	1a9a      	subs	r2, r3, r2
 8001fdc:	4653      	mov	r3, sl
 8001fde:	40d3      	lsrs	r3, r2
 8001fe0:	001a      	movs	r2, r3
 8001fe2:	4643      	mov	r3, r8
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	4652      	mov	r2, sl
 8001fe8:	408a      	lsls	r2, r1
 8001fea:	4649      	mov	r1, r9
 8001fec:	1a08      	subs	r0, r1, r0
 8001fee:	4982      	ldr	r1, [pc, #520]	; (80021f8 <__aeabi_dmul+0x3b0>)
 8001ff0:	4689      	mov	r9, r1
 8001ff2:	4481      	add	r9, r0
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	e768      	b.n	8001eca <__aeabi_dmul+0x82>
 8001ff8:	4b7b      	ldr	r3, [pc, #492]	; (80021e8 <__aeabi_dmul+0x3a0>)
 8001ffa:	2700      	movs	r7, #0
 8001ffc:	2600      	movs	r6, #0
 8001ffe:	e78e      	b.n	8001f1e <__aeabi_dmul+0xd6>
 8002000:	0c14      	lsrs	r4, r2, #16
 8002002:	0412      	lsls	r2, r2, #16
 8002004:	0c12      	lsrs	r2, r2, #16
 8002006:	0011      	movs	r1, r2
 8002008:	0c37      	lsrs	r7, r6, #16
 800200a:	0436      	lsls	r6, r6, #16
 800200c:	0c35      	lsrs	r5, r6, #16
 800200e:	4379      	muls	r1, r7
 8002010:	0028      	movs	r0, r5
 8002012:	468c      	mov	ip, r1
 8002014:	002e      	movs	r6, r5
 8002016:	4360      	muls	r0, r4
 8002018:	4460      	add	r0, ip
 800201a:	4683      	mov	fp, r0
 800201c:	4356      	muls	r6, r2
 800201e:	0021      	movs	r1, r4
 8002020:	0c30      	lsrs	r0, r6, #16
 8002022:	4680      	mov	r8, r0
 8002024:	4658      	mov	r0, fp
 8002026:	4379      	muls	r1, r7
 8002028:	4440      	add	r0, r8
 800202a:	9102      	str	r1, [sp, #8]
 800202c:	4584      	cmp	ip, r0
 800202e:	d906      	bls.n	800203e <__aeabi_dmul+0x1f6>
 8002030:	4688      	mov	r8, r1
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	0249      	lsls	r1, r1, #9
 8002036:	468c      	mov	ip, r1
 8002038:	44e0      	add	r8, ip
 800203a:	4641      	mov	r1, r8
 800203c:	9102      	str	r1, [sp, #8]
 800203e:	0436      	lsls	r6, r6, #16
 8002040:	0c01      	lsrs	r1, r0, #16
 8002042:	0c36      	lsrs	r6, r6, #16
 8002044:	0400      	lsls	r0, r0, #16
 8002046:	468b      	mov	fp, r1
 8002048:	1981      	adds	r1, r0, r6
 800204a:	0c1e      	lsrs	r6, r3, #16
 800204c:	041b      	lsls	r3, r3, #16
 800204e:	0c1b      	lsrs	r3, r3, #16
 8002050:	9103      	str	r1, [sp, #12]
 8002052:	0019      	movs	r1, r3
 8002054:	4379      	muls	r1, r7
 8002056:	468c      	mov	ip, r1
 8002058:	0028      	movs	r0, r5
 800205a:	4375      	muls	r5, r6
 800205c:	4465      	add	r5, ip
 800205e:	46a8      	mov	r8, r5
 8002060:	4358      	muls	r0, r3
 8002062:	0c05      	lsrs	r5, r0, #16
 8002064:	4445      	add	r5, r8
 8002066:	4377      	muls	r7, r6
 8002068:	42a9      	cmp	r1, r5
 800206a:	d903      	bls.n	8002074 <__aeabi_dmul+0x22c>
 800206c:	2180      	movs	r1, #128	; 0x80
 800206e:	0249      	lsls	r1, r1, #9
 8002070:	468c      	mov	ip, r1
 8002072:	4467      	add	r7, ip
 8002074:	0c29      	lsrs	r1, r5, #16
 8002076:	468c      	mov	ip, r1
 8002078:	0039      	movs	r1, r7
 800207a:	0400      	lsls	r0, r0, #16
 800207c:	0c00      	lsrs	r0, r0, #16
 800207e:	042d      	lsls	r5, r5, #16
 8002080:	182d      	adds	r5, r5, r0
 8002082:	4461      	add	r1, ip
 8002084:	44ab      	add	fp, r5
 8002086:	9105      	str	r1, [sp, #20]
 8002088:	4659      	mov	r1, fp
 800208a:	9104      	str	r1, [sp, #16]
 800208c:	9901      	ldr	r1, [sp, #4]
 800208e:	040f      	lsls	r7, r1, #16
 8002090:	0c3f      	lsrs	r7, r7, #16
 8002092:	0c08      	lsrs	r0, r1, #16
 8002094:	0039      	movs	r1, r7
 8002096:	4351      	muls	r1, r2
 8002098:	4342      	muls	r2, r0
 800209a:	4690      	mov	r8, r2
 800209c:	0002      	movs	r2, r0
 800209e:	468c      	mov	ip, r1
 80020a0:	0c09      	lsrs	r1, r1, #16
 80020a2:	468b      	mov	fp, r1
 80020a4:	4362      	muls	r2, r4
 80020a6:	437c      	muls	r4, r7
 80020a8:	4444      	add	r4, r8
 80020aa:	445c      	add	r4, fp
 80020ac:	45a0      	cmp	r8, r4
 80020ae:	d903      	bls.n	80020b8 <__aeabi_dmul+0x270>
 80020b0:	2180      	movs	r1, #128	; 0x80
 80020b2:	0249      	lsls	r1, r1, #9
 80020b4:	4688      	mov	r8, r1
 80020b6:	4442      	add	r2, r8
 80020b8:	0c21      	lsrs	r1, r4, #16
 80020ba:	4688      	mov	r8, r1
 80020bc:	4661      	mov	r1, ip
 80020be:	0409      	lsls	r1, r1, #16
 80020c0:	0c09      	lsrs	r1, r1, #16
 80020c2:	468c      	mov	ip, r1
 80020c4:	0039      	movs	r1, r7
 80020c6:	4359      	muls	r1, r3
 80020c8:	4343      	muls	r3, r0
 80020ca:	4370      	muls	r0, r6
 80020cc:	437e      	muls	r6, r7
 80020ce:	0c0f      	lsrs	r7, r1, #16
 80020d0:	18f6      	adds	r6, r6, r3
 80020d2:	0424      	lsls	r4, r4, #16
 80020d4:	19be      	adds	r6, r7, r6
 80020d6:	4464      	add	r4, ip
 80020d8:	4442      	add	r2, r8
 80020da:	468c      	mov	ip, r1
 80020dc:	42b3      	cmp	r3, r6
 80020de:	d903      	bls.n	80020e8 <__aeabi_dmul+0x2a0>
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	4698      	mov	r8, r3
 80020e6:	4440      	add	r0, r8
 80020e8:	9b02      	ldr	r3, [sp, #8]
 80020ea:	4661      	mov	r1, ip
 80020ec:	4698      	mov	r8, r3
 80020ee:	9b04      	ldr	r3, [sp, #16]
 80020f0:	0437      	lsls	r7, r6, #16
 80020f2:	4443      	add	r3, r8
 80020f4:	469b      	mov	fp, r3
 80020f6:	45ab      	cmp	fp, r5
 80020f8:	41ad      	sbcs	r5, r5
 80020fa:	426b      	negs	r3, r5
 80020fc:	040d      	lsls	r5, r1, #16
 80020fe:	9905      	ldr	r1, [sp, #20]
 8002100:	0c2d      	lsrs	r5, r5, #16
 8002102:	468c      	mov	ip, r1
 8002104:	197f      	adds	r7, r7, r5
 8002106:	4467      	add	r7, ip
 8002108:	18fd      	adds	r5, r7, r3
 800210a:	46a8      	mov	r8, r5
 800210c:	465d      	mov	r5, fp
 800210e:	192d      	adds	r5, r5, r4
 8002110:	42a5      	cmp	r5, r4
 8002112:	41a4      	sbcs	r4, r4
 8002114:	4693      	mov	fp, r2
 8002116:	4264      	negs	r4, r4
 8002118:	46a4      	mov	ip, r4
 800211a:	44c3      	add	fp, r8
 800211c:	44dc      	add	ip, fp
 800211e:	428f      	cmp	r7, r1
 8002120:	41bf      	sbcs	r7, r7
 8002122:	4598      	cmp	r8, r3
 8002124:	419b      	sbcs	r3, r3
 8002126:	4593      	cmp	fp, r2
 8002128:	4192      	sbcs	r2, r2
 800212a:	45a4      	cmp	ip, r4
 800212c:	41a4      	sbcs	r4, r4
 800212e:	425b      	negs	r3, r3
 8002130:	427f      	negs	r7, r7
 8002132:	431f      	orrs	r7, r3
 8002134:	0c36      	lsrs	r6, r6, #16
 8002136:	4252      	negs	r2, r2
 8002138:	4264      	negs	r4, r4
 800213a:	19bf      	adds	r7, r7, r6
 800213c:	4322      	orrs	r2, r4
 800213e:	18bf      	adds	r7, r7, r2
 8002140:	4662      	mov	r2, ip
 8002142:	1838      	adds	r0, r7, r0
 8002144:	0243      	lsls	r3, r0, #9
 8002146:	0dd2      	lsrs	r2, r2, #23
 8002148:	9903      	ldr	r1, [sp, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	026a      	lsls	r2, r5, #9
 800214e:	430a      	orrs	r2, r1
 8002150:	1e50      	subs	r0, r2, #1
 8002152:	4182      	sbcs	r2, r0
 8002154:	4661      	mov	r1, ip
 8002156:	0ded      	lsrs	r5, r5, #23
 8002158:	432a      	orrs	r2, r5
 800215a:	024e      	lsls	r6, r1, #9
 800215c:	4332      	orrs	r2, r6
 800215e:	01d9      	lsls	r1, r3, #7
 8002160:	d400      	bmi.n	8002164 <__aeabi_dmul+0x31c>
 8002162:	e0b3      	b.n	80022cc <__aeabi_dmul+0x484>
 8002164:	2601      	movs	r6, #1
 8002166:	0850      	lsrs	r0, r2, #1
 8002168:	4032      	ands	r2, r6
 800216a:	4302      	orrs	r2, r0
 800216c:	07de      	lsls	r6, r3, #31
 800216e:	4332      	orrs	r2, r6
 8002170:	085b      	lsrs	r3, r3, #1
 8002172:	4c22      	ldr	r4, [pc, #136]	; (80021fc <__aeabi_dmul+0x3b4>)
 8002174:	4454      	add	r4, sl
 8002176:	2c00      	cmp	r4, #0
 8002178:	dd62      	ble.n	8002240 <__aeabi_dmul+0x3f8>
 800217a:	0751      	lsls	r1, r2, #29
 800217c:	d009      	beq.n	8002192 <__aeabi_dmul+0x34a>
 800217e:	200f      	movs	r0, #15
 8002180:	4010      	ands	r0, r2
 8002182:	2804      	cmp	r0, #4
 8002184:	d005      	beq.n	8002192 <__aeabi_dmul+0x34a>
 8002186:	1d10      	adds	r0, r2, #4
 8002188:	4290      	cmp	r0, r2
 800218a:	4192      	sbcs	r2, r2
 800218c:	4252      	negs	r2, r2
 800218e:	189b      	adds	r3, r3, r2
 8002190:	0002      	movs	r2, r0
 8002192:	01d9      	lsls	r1, r3, #7
 8002194:	d504      	bpl.n	80021a0 <__aeabi_dmul+0x358>
 8002196:	2480      	movs	r4, #128	; 0x80
 8002198:	4819      	ldr	r0, [pc, #100]	; (8002200 <__aeabi_dmul+0x3b8>)
 800219a:	00e4      	lsls	r4, r4, #3
 800219c:	4003      	ands	r3, r0
 800219e:	4454      	add	r4, sl
 80021a0:	4818      	ldr	r0, [pc, #96]	; (8002204 <__aeabi_dmul+0x3bc>)
 80021a2:	4284      	cmp	r4, r0
 80021a4:	dd00      	ble.n	80021a8 <__aeabi_dmul+0x360>
 80021a6:	e727      	b.n	8001ff8 <__aeabi_dmul+0x1b0>
 80021a8:	075e      	lsls	r6, r3, #29
 80021aa:	025b      	lsls	r3, r3, #9
 80021ac:	08d2      	lsrs	r2, r2, #3
 80021ae:	0b1f      	lsrs	r7, r3, #12
 80021b0:	0563      	lsls	r3, r4, #21
 80021b2:	4316      	orrs	r6, r2
 80021b4:	0d5b      	lsrs	r3, r3, #21
 80021b6:	e6b2      	b.n	8001f1e <__aeabi_dmul+0xd6>
 80021b8:	2300      	movs	r3, #0
 80021ba:	4699      	mov	r9, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	2704      	movs	r7, #4
 80021c0:	2600      	movs	r6, #0
 80021c2:	469b      	mov	fp, r3
 80021c4:	e664      	b.n	8001e90 <__aeabi_dmul+0x48>
 80021c6:	2303      	movs	r3, #3
 80021c8:	9701      	str	r7, [sp, #4]
 80021ca:	4681      	mov	r9, r0
 80021cc:	270c      	movs	r7, #12
 80021ce:	469b      	mov	fp, r3
 80021d0:	e65e      	b.n	8001e90 <__aeabi_dmul+0x48>
 80021d2:	2201      	movs	r2, #1
 80021d4:	2001      	movs	r0, #1
 80021d6:	4317      	orrs	r7, r2
 80021d8:	2200      	movs	r2, #0
 80021da:	e676      	b.n	8001eca <__aeabi_dmul+0x82>
 80021dc:	2303      	movs	r3, #3
 80021de:	2003      	movs	r0, #3
 80021e0:	431f      	orrs	r7, r3
 80021e2:	4643      	mov	r3, r8
 80021e4:	e671      	b.n	8001eca <__aeabi_dmul+0x82>
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	000007ff 	.word	0x000007ff
 80021ec:	fffffc01 	.word	0xfffffc01
 80021f0:	08017cd4 	.word	0x08017cd4
 80021f4:	800fffff 	.word	0x800fffff
 80021f8:	fffffc0d 	.word	0xfffffc0d
 80021fc:	000003ff 	.word	0x000003ff
 8002200:	feffffff 	.word	0xfeffffff
 8002204:	000007fe 	.word	0x000007fe
 8002208:	2300      	movs	r3, #0
 800220a:	2780      	movs	r7, #128	; 0x80
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	033f      	lsls	r7, r7, #12
 8002210:	2600      	movs	r6, #0
 8002212:	4b43      	ldr	r3, [pc, #268]	; (8002320 <__aeabi_dmul+0x4d8>)
 8002214:	e683      	b.n	8001f1e <__aeabi_dmul+0xd6>
 8002216:	9b01      	ldr	r3, [sp, #4]
 8002218:	0032      	movs	r2, r6
 800221a:	46a4      	mov	ip, r4
 800221c:	4658      	mov	r0, fp
 800221e:	e670      	b.n	8001f02 <__aeabi_dmul+0xba>
 8002220:	46ac      	mov	ip, r5
 8002222:	e66e      	b.n	8001f02 <__aeabi_dmul+0xba>
 8002224:	2780      	movs	r7, #128	; 0x80
 8002226:	9901      	ldr	r1, [sp, #4]
 8002228:	033f      	lsls	r7, r7, #12
 800222a:	4239      	tst	r1, r7
 800222c:	d02d      	beq.n	800228a <__aeabi_dmul+0x442>
 800222e:	423b      	tst	r3, r7
 8002230:	d12b      	bne.n	800228a <__aeabi_dmul+0x442>
 8002232:	431f      	orrs	r7, r3
 8002234:	033f      	lsls	r7, r7, #12
 8002236:	0b3f      	lsrs	r7, r7, #12
 8002238:	9500      	str	r5, [sp, #0]
 800223a:	0016      	movs	r6, r2
 800223c:	4b38      	ldr	r3, [pc, #224]	; (8002320 <__aeabi_dmul+0x4d8>)
 800223e:	e66e      	b.n	8001f1e <__aeabi_dmul+0xd6>
 8002240:	2501      	movs	r5, #1
 8002242:	1b2d      	subs	r5, r5, r4
 8002244:	2d38      	cmp	r5, #56	; 0x38
 8002246:	dd00      	ble.n	800224a <__aeabi_dmul+0x402>
 8002248:	e666      	b.n	8001f18 <__aeabi_dmul+0xd0>
 800224a:	2d1f      	cmp	r5, #31
 800224c:	dc40      	bgt.n	80022d0 <__aeabi_dmul+0x488>
 800224e:	4835      	ldr	r0, [pc, #212]	; (8002324 <__aeabi_dmul+0x4dc>)
 8002250:	001c      	movs	r4, r3
 8002252:	4450      	add	r0, sl
 8002254:	0016      	movs	r6, r2
 8002256:	4082      	lsls	r2, r0
 8002258:	4084      	lsls	r4, r0
 800225a:	40ee      	lsrs	r6, r5
 800225c:	1e50      	subs	r0, r2, #1
 800225e:	4182      	sbcs	r2, r0
 8002260:	4334      	orrs	r4, r6
 8002262:	4314      	orrs	r4, r2
 8002264:	40eb      	lsrs	r3, r5
 8002266:	0762      	lsls	r2, r4, #29
 8002268:	d009      	beq.n	800227e <__aeabi_dmul+0x436>
 800226a:	220f      	movs	r2, #15
 800226c:	4022      	ands	r2, r4
 800226e:	2a04      	cmp	r2, #4
 8002270:	d005      	beq.n	800227e <__aeabi_dmul+0x436>
 8002272:	0022      	movs	r2, r4
 8002274:	1d14      	adds	r4, r2, #4
 8002276:	4294      	cmp	r4, r2
 8002278:	4180      	sbcs	r0, r0
 800227a:	4240      	negs	r0, r0
 800227c:	181b      	adds	r3, r3, r0
 800227e:	021a      	lsls	r2, r3, #8
 8002280:	d53e      	bpl.n	8002300 <__aeabi_dmul+0x4b8>
 8002282:	2301      	movs	r3, #1
 8002284:	2700      	movs	r7, #0
 8002286:	2600      	movs	r6, #0
 8002288:	e649      	b.n	8001f1e <__aeabi_dmul+0xd6>
 800228a:	2780      	movs	r7, #128	; 0x80
 800228c:	9b01      	ldr	r3, [sp, #4]
 800228e:	033f      	lsls	r7, r7, #12
 8002290:	431f      	orrs	r7, r3
 8002292:	033f      	lsls	r7, r7, #12
 8002294:	0b3f      	lsrs	r7, r7, #12
 8002296:	9400      	str	r4, [sp, #0]
 8002298:	4b21      	ldr	r3, [pc, #132]	; (8002320 <__aeabi_dmul+0x4d8>)
 800229a:	e640      	b.n	8001f1e <__aeabi_dmul+0xd6>
 800229c:	0003      	movs	r3, r0
 800229e:	465a      	mov	r2, fp
 80022a0:	3b28      	subs	r3, #40	; 0x28
 80022a2:	409a      	lsls	r2, r3
 80022a4:	2600      	movs	r6, #0
 80022a6:	9201      	str	r2, [sp, #4]
 80022a8:	e66d      	b.n	8001f86 <__aeabi_dmul+0x13e>
 80022aa:	4658      	mov	r0, fp
 80022ac:	f000 fd1a 	bl	8002ce4 <__clzsi2>
 80022b0:	3020      	adds	r0, #32
 80022b2:	e657      	b.n	8001f64 <__aeabi_dmul+0x11c>
 80022b4:	0003      	movs	r3, r0
 80022b6:	4652      	mov	r2, sl
 80022b8:	3b28      	subs	r3, #40	; 0x28
 80022ba:	409a      	lsls	r2, r3
 80022bc:	0013      	movs	r3, r2
 80022be:	2200      	movs	r2, #0
 80022c0:	e693      	b.n	8001fea <__aeabi_dmul+0x1a2>
 80022c2:	4650      	mov	r0, sl
 80022c4:	f000 fd0e 	bl	8002ce4 <__clzsi2>
 80022c8:	3020      	adds	r0, #32
 80022ca:	e67b      	b.n	8001fc4 <__aeabi_dmul+0x17c>
 80022cc:	46ca      	mov	sl, r9
 80022ce:	e750      	b.n	8002172 <__aeabi_dmul+0x32a>
 80022d0:	201f      	movs	r0, #31
 80022d2:	001e      	movs	r6, r3
 80022d4:	4240      	negs	r0, r0
 80022d6:	1b04      	subs	r4, r0, r4
 80022d8:	40e6      	lsrs	r6, r4
 80022da:	2d20      	cmp	r5, #32
 80022dc:	d003      	beq.n	80022e6 <__aeabi_dmul+0x49e>
 80022de:	4c12      	ldr	r4, [pc, #72]	; (8002328 <__aeabi_dmul+0x4e0>)
 80022e0:	4454      	add	r4, sl
 80022e2:	40a3      	lsls	r3, r4
 80022e4:	431a      	orrs	r2, r3
 80022e6:	1e50      	subs	r0, r2, #1
 80022e8:	4182      	sbcs	r2, r0
 80022ea:	4332      	orrs	r2, r6
 80022ec:	2607      	movs	r6, #7
 80022ee:	2700      	movs	r7, #0
 80022f0:	4016      	ands	r6, r2
 80022f2:	d009      	beq.n	8002308 <__aeabi_dmul+0x4c0>
 80022f4:	200f      	movs	r0, #15
 80022f6:	2300      	movs	r3, #0
 80022f8:	4010      	ands	r0, r2
 80022fa:	0014      	movs	r4, r2
 80022fc:	2804      	cmp	r0, #4
 80022fe:	d1b9      	bne.n	8002274 <__aeabi_dmul+0x42c>
 8002300:	0022      	movs	r2, r4
 8002302:	075e      	lsls	r6, r3, #29
 8002304:	025b      	lsls	r3, r3, #9
 8002306:	0b1f      	lsrs	r7, r3, #12
 8002308:	08d2      	lsrs	r2, r2, #3
 800230a:	4316      	orrs	r6, r2
 800230c:	2300      	movs	r3, #0
 800230e:	e606      	b.n	8001f1e <__aeabi_dmul+0xd6>
 8002310:	2780      	movs	r7, #128	; 0x80
 8002312:	033f      	lsls	r7, r7, #12
 8002314:	431f      	orrs	r7, r3
 8002316:	033f      	lsls	r7, r7, #12
 8002318:	0b3f      	lsrs	r7, r7, #12
 800231a:	0016      	movs	r6, r2
 800231c:	4b00      	ldr	r3, [pc, #0]	; (8002320 <__aeabi_dmul+0x4d8>)
 800231e:	e5fe      	b.n	8001f1e <__aeabi_dmul+0xd6>
 8002320:	000007ff 	.word	0x000007ff
 8002324:	0000041e 	.word	0x0000041e
 8002328:	0000043e 	.word	0x0000043e

0800232c <__aeabi_dsub>:
 800232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232e:	4657      	mov	r7, sl
 8002330:	464e      	mov	r6, r9
 8002332:	4645      	mov	r5, r8
 8002334:	46de      	mov	lr, fp
 8002336:	000c      	movs	r4, r1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	b5e0      	push	{r5, r6, r7, lr}
 800233c:	0a49      	lsrs	r1, r1, #9
 800233e:	0f46      	lsrs	r6, r0, #29
 8002340:	005f      	lsls	r7, r3, #1
 8002342:	4331      	orrs	r1, r6
 8002344:	031e      	lsls	r6, r3, #12
 8002346:	0fdb      	lsrs	r3, r3, #31
 8002348:	0a76      	lsrs	r6, r6, #9
 800234a:	469b      	mov	fp, r3
 800234c:	0f53      	lsrs	r3, r2, #29
 800234e:	4333      	orrs	r3, r6
 8002350:	4ec8      	ldr	r6, [pc, #800]	; (8002674 <__aeabi_dsub+0x348>)
 8002352:	0065      	lsls	r5, r4, #1
 8002354:	00c0      	lsls	r0, r0, #3
 8002356:	0fe4      	lsrs	r4, r4, #31
 8002358:	00d2      	lsls	r2, r2, #3
 800235a:	0d6d      	lsrs	r5, r5, #21
 800235c:	46a2      	mov	sl, r4
 800235e:	4681      	mov	r9, r0
 8002360:	0d7f      	lsrs	r7, r7, #21
 8002362:	469c      	mov	ip, r3
 8002364:	4690      	mov	r8, r2
 8002366:	42b7      	cmp	r7, r6
 8002368:	d100      	bne.n	800236c <__aeabi_dsub+0x40>
 800236a:	e0b9      	b.n	80024e0 <__aeabi_dsub+0x1b4>
 800236c:	465b      	mov	r3, fp
 800236e:	2601      	movs	r6, #1
 8002370:	4073      	eors	r3, r6
 8002372:	469b      	mov	fp, r3
 8002374:	1bee      	subs	r6, r5, r7
 8002376:	45a3      	cmp	fp, r4
 8002378:	d100      	bne.n	800237c <__aeabi_dsub+0x50>
 800237a:	e083      	b.n	8002484 <__aeabi_dsub+0x158>
 800237c:	2e00      	cmp	r6, #0
 800237e:	dd63      	ble.n	8002448 <__aeabi_dsub+0x11c>
 8002380:	2f00      	cmp	r7, #0
 8002382:	d000      	beq.n	8002386 <__aeabi_dsub+0x5a>
 8002384:	e0b1      	b.n	80024ea <__aeabi_dsub+0x1be>
 8002386:	4663      	mov	r3, ip
 8002388:	4313      	orrs	r3, r2
 800238a:	d100      	bne.n	800238e <__aeabi_dsub+0x62>
 800238c:	e123      	b.n	80025d6 <__aeabi_dsub+0x2aa>
 800238e:	1e73      	subs	r3, r6, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d000      	beq.n	8002396 <__aeabi_dsub+0x6a>
 8002394:	e1ba      	b.n	800270c <__aeabi_dsub+0x3e0>
 8002396:	1a86      	subs	r6, r0, r2
 8002398:	4663      	mov	r3, ip
 800239a:	42b0      	cmp	r0, r6
 800239c:	4180      	sbcs	r0, r0
 800239e:	2501      	movs	r5, #1
 80023a0:	1ac9      	subs	r1, r1, r3
 80023a2:	4240      	negs	r0, r0
 80023a4:	1a09      	subs	r1, r1, r0
 80023a6:	020b      	lsls	r3, r1, #8
 80023a8:	d400      	bmi.n	80023ac <__aeabi_dsub+0x80>
 80023aa:	e147      	b.n	800263c <__aeabi_dsub+0x310>
 80023ac:	0249      	lsls	r1, r1, #9
 80023ae:	0a4b      	lsrs	r3, r1, #9
 80023b0:	4698      	mov	r8, r3
 80023b2:	4643      	mov	r3, r8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d100      	bne.n	80023ba <__aeabi_dsub+0x8e>
 80023b8:	e189      	b.n	80026ce <__aeabi_dsub+0x3a2>
 80023ba:	4640      	mov	r0, r8
 80023bc:	f000 fc92 	bl	8002ce4 <__clzsi2>
 80023c0:	0003      	movs	r3, r0
 80023c2:	3b08      	subs	r3, #8
 80023c4:	2b1f      	cmp	r3, #31
 80023c6:	dd00      	ble.n	80023ca <__aeabi_dsub+0x9e>
 80023c8:	e17c      	b.n	80026c4 <__aeabi_dsub+0x398>
 80023ca:	2220      	movs	r2, #32
 80023cc:	0030      	movs	r0, r6
 80023ce:	1ad2      	subs	r2, r2, r3
 80023d0:	4641      	mov	r1, r8
 80023d2:	40d0      	lsrs	r0, r2
 80023d4:	4099      	lsls	r1, r3
 80023d6:	0002      	movs	r2, r0
 80023d8:	409e      	lsls	r6, r3
 80023da:	430a      	orrs	r2, r1
 80023dc:	429d      	cmp	r5, r3
 80023de:	dd00      	ble.n	80023e2 <__aeabi_dsub+0xb6>
 80023e0:	e16a      	b.n	80026b8 <__aeabi_dsub+0x38c>
 80023e2:	1b5d      	subs	r5, r3, r5
 80023e4:	1c6b      	adds	r3, r5, #1
 80023e6:	2b1f      	cmp	r3, #31
 80023e8:	dd00      	ble.n	80023ec <__aeabi_dsub+0xc0>
 80023ea:	e194      	b.n	8002716 <__aeabi_dsub+0x3ea>
 80023ec:	2120      	movs	r1, #32
 80023ee:	0010      	movs	r0, r2
 80023f0:	0035      	movs	r5, r6
 80023f2:	1ac9      	subs	r1, r1, r3
 80023f4:	408e      	lsls	r6, r1
 80023f6:	40da      	lsrs	r2, r3
 80023f8:	4088      	lsls	r0, r1
 80023fa:	40dd      	lsrs	r5, r3
 80023fc:	1e71      	subs	r1, r6, #1
 80023fe:	418e      	sbcs	r6, r1
 8002400:	0011      	movs	r1, r2
 8002402:	2207      	movs	r2, #7
 8002404:	4328      	orrs	r0, r5
 8002406:	2500      	movs	r5, #0
 8002408:	4306      	orrs	r6, r0
 800240a:	4032      	ands	r2, r6
 800240c:	2a00      	cmp	r2, #0
 800240e:	d009      	beq.n	8002424 <__aeabi_dsub+0xf8>
 8002410:	230f      	movs	r3, #15
 8002412:	4033      	ands	r3, r6
 8002414:	2b04      	cmp	r3, #4
 8002416:	d005      	beq.n	8002424 <__aeabi_dsub+0xf8>
 8002418:	1d33      	adds	r3, r6, #4
 800241a:	42b3      	cmp	r3, r6
 800241c:	41b6      	sbcs	r6, r6
 800241e:	4276      	negs	r6, r6
 8002420:	1989      	adds	r1, r1, r6
 8002422:	001e      	movs	r6, r3
 8002424:	020b      	lsls	r3, r1, #8
 8002426:	d400      	bmi.n	800242a <__aeabi_dsub+0xfe>
 8002428:	e23d      	b.n	80028a6 <__aeabi_dsub+0x57a>
 800242a:	1c6a      	adds	r2, r5, #1
 800242c:	4b91      	ldr	r3, [pc, #580]	; (8002674 <__aeabi_dsub+0x348>)
 800242e:	0555      	lsls	r5, r2, #21
 8002430:	0d6d      	lsrs	r5, r5, #21
 8002432:	429a      	cmp	r2, r3
 8002434:	d100      	bne.n	8002438 <__aeabi_dsub+0x10c>
 8002436:	e119      	b.n	800266c <__aeabi_dsub+0x340>
 8002438:	4a8f      	ldr	r2, [pc, #572]	; (8002678 <__aeabi_dsub+0x34c>)
 800243a:	08f6      	lsrs	r6, r6, #3
 800243c:	400a      	ands	r2, r1
 800243e:	0757      	lsls	r7, r2, #29
 8002440:	0252      	lsls	r2, r2, #9
 8002442:	4337      	orrs	r7, r6
 8002444:	0b12      	lsrs	r2, r2, #12
 8002446:	e09b      	b.n	8002580 <__aeabi_dsub+0x254>
 8002448:	2e00      	cmp	r6, #0
 800244a:	d000      	beq.n	800244e <__aeabi_dsub+0x122>
 800244c:	e0c5      	b.n	80025da <__aeabi_dsub+0x2ae>
 800244e:	1c6e      	adds	r6, r5, #1
 8002450:	0576      	lsls	r6, r6, #21
 8002452:	0d76      	lsrs	r6, r6, #21
 8002454:	2e01      	cmp	r6, #1
 8002456:	dc00      	bgt.n	800245a <__aeabi_dsub+0x12e>
 8002458:	e148      	b.n	80026ec <__aeabi_dsub+0x3c0>
 800245a:	4667      	mov	r7, ip
 800245c:	1a86      	subs	r6, r0, r2
 800245e:	1bcb      	subs	r3, r1, r7
 8002460:	42b0      	cmp	r0, r6
 8002462:	41bf      	sbcs	r7, r7
 8002464:	427f      	negs	r7, r7
 8002466:	46b8      	mov	r8, r7
 8002468:	001f      	movs	r7, r3
 800246a:	4643      	mov	r3, r8
 800246c:	1aff      	subs	r7, r7, r3
 800246e:	003b      	movs	r3, r7
 8002470:	46b8      	mov	r8, r7
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	d500      	bpl.n	8002478 <__aeabi_dsub+0x14c>
 8002476:	e15f      	b.n	8002738 <__aeabi_dsub+0x40c>
 8002478:	4337      	orrs	r7, r6
 800247a:	d19a      	bne.n	80023b2 <__aeabi_dsub+0x86>
 800247c:	2200      	movs	r2, #0
 800247e:	2400      	movs	r4, #0
 8002480:	2500      	movs	r5, #0
 8002482:	e079      	b.n	8002578 <__aeabi_dsub+0x24c>
 8002484:	2e00      	cmp	r6, #0
 8002486:	dc00      	bgt.n	800248a <__aeabi_dsub+0x15e>
 8002488:	e0fa      	b.n	8002680 <__aeabi_dsub+0x354>
 800248a:	2f00      	cmp	r7, #0
 800248c:	d100      	bne.n	8002490 <__aeabi_dsub+0x164>
 800248e:	e08d      	b.n	80025ac <__aeabi_dsub+0x280>
 8002490:	4b78      	ldr	r3, [pc, #480]	; (8002674 <__aeabi_dsub+0x348>)
 8002492:	429d      	cmp	r5, r3
 8002494:	d067      	beq.n	8002566 <__aeabi_dsub+0x23a>
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	4667      	mov	r7, ip
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	431f      	orrs	r7, r3
 800249e:	46bc      	mov	ip, r7
 80024a0:	2e38      	cmp	r6, #56	; 0x38
 80024a2:	dc00      	bgt.n	80024a6 <__aeabi_dsub+0x17a>
 80024a4:	e152      	b.n	800274c <__aeabi_dsub+0x420>
 80024a6:	4663      	mov	r3, ip
 80024a8:	4313      	orrs	r3, r2
 80024aa:	1e5a      	subs	r2, r3, #1
 80024ac:	4193      	sbcs	r3, r2
 80024ae:	181e      	adds	r6, r3, r0
 80024b0:	4286      	cmp	r6, r0
 80024b2:	4180      	sbcs	r0, r0
 80024b4:	4240      	negs	r0, r0
 80024b6:	1809      	adds	r1, r1, r0
 80024b8:	020b      	lsls	r3, r1, #8
 80024ba:	d400      	bmi.n	80024be <__aeabi_dsub+0x192>
 80024bc:	e0be      	b.n	800263c <__aeabi_dsub+0x310>
 80024be:	4b6d      	ldr	r3, [pc, #436]	; (8002674 <__aeabi_dsub+0x348>)
 80024c0:	3501      	adds	r5, #1
 80024c2:	429d      	cmp	r5, r3
 80024c4:	d100      	bne.n	80024c8 <__aeabi_dsub+0x19c>
 80024c6:	e0d2      	b.n	800266e <__aeabi_dsub+0x342>
 80024c8:	4a6b      	ldr	r2, [pc, #428]	; (8002678 <__aeabi_dsub+0x34c>)
 80024ca:	0873      	lsrs	r3, r6, #1
 80024cc:	400a      	ands	r2, r1
 80024ce:	2101      	movs	r1, #1
 80024d0:	400e      	ands	r6, r1
 80024d2:	431e      	orrs	r6, r3
 80024d4:	0851      	lsrs	r1, r2, #1
 80024d6:	07d3      	lsls	r3, r2, #31
 80024d8:	2207      	movs	r2, #7
 80024da:	431e      	orrs	r6, r3
 80024dc:	4032      	ands	r2, r6
 80024de:	e795      	b.n	800240c <__aeabi_dsub+0xe0>
 80024e0:	001e      	movs	r6, r3
 80024e2:	4316      	orrs	r6, r2
 80024e4:	d000      	beq.n	80024e8 <__aeabi_dsub+0x1bc>
 80024e6:	e745      	b.n	8002374 <__aeabi_dsub+0x48>
 80024e8:	e740      	b.n	800236c <__aeabi_dsub+0x40>
 80024ea:	4b62      	ldr	r3, [pc, #392]	; (8002674 <__aeabi_dsub+0x348>)
 80024ec:	429d      	cmp	r5, r3
 80024ee:	d03a      	beq.n	8002566 <__aeabi_dsub+0x23a>
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	4667      	mov	r7, ip
 80024f4:	041b      	lsls	r3, r3, #16
 80024f6:	431f      	orrs	r7, r3
 80024f8:	46bc      	mov	ip, r7
 80024fa:	2e38      	cmp	r6, #56	; 0x38
 80024fc:	dd00      	ble.n	8002500 <__aeabi_dsub+0x1d4>
 80024fe:	e0eb      	b.n	80026d8 <__aeabi_dsub+0x3ac>
 8002500:	2e1f      	cmp	r6, #31
 8002502:	dc00      	bgt.n	8002506 <__aeabi_dsub+0x1da>
 8002504:	e13a      	b.n	800277c <__aeabi_dsub+0x450>
 8002506:	0033      	movs	r3, r6
 8002508:	4667      	mov	r7, ip
 800250a:	3b20      	subs	r3, #32
 800250c:	40df      	lsrs	r7, r3
 800250e:	003b      	movs	r3, r7
 8002510:	2e20      	cmp	r6, #32
 8002512:	d005      	beq.n	8002520 <__aeabi_dsub+0x1f4>
 8002514:	2740      	movs	r7, #64	; 0x40
 8002516:	1bbf      	subs	r7, r7, r6
 8002518:	4666      	mov	r6, ip
 800251a:	40be      	lsls	r6, r7
 800251c:	4332      	orrs	r2, r6
 800251e:	4690      	mov	r8, r2
 8002520:	4646      	mov	r6, r8
 8002522:	1e72      	subs	r2, r6, #1
 8002524:	4196      	sbcs	r6, r2
 8002526:	4333      	orrs	r3, r6
 8002528:	e0da      	b.n	80026e0 <__aeabi_dsub+0x3b4>
 800252a:	2b00      	cmp	r3, #0
 800252c:	d100      	bne.n	8002530 <__aeabi_dsub+0x204>
 800252e:	e214      	b.n	800295a <__aeabi_dsub+0x62e>
 8002530:	4663      	mov	r3, ip
 8002532:	4313      	orrs	r3, r2
 8002534:	d100      	bne.n	8002538 <__aeabi_dsub+0x20c>
 8002536:	e168      	b.n	800280a <__aeabi_dsub+0x4de>
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	074e      	lsls	r6, r1, #29
 800253c:	08c0      	lsrs	r0, r0, #3
 800253e:	08c9      	lsrs	r1, r1, #3
 8002540:	031b      	lsls	r3, r3, #12
 8002542:	4306      	orrs	r6, r0
 8002544:	4219      	tst	r1, r3
 8002546:	d008      	beq.n	800255a <__aeabi_dsub+0x22e>
 8002548:	4660      	mov	r0, ip
 800254a:	08c0      	lsrs	r0, r0, #3
 800254c:	4218      	tst	r0, r3
 800254e:	d104      	bne.n	800255a <__aeabi_dsub+0x22e>
 8002550:	4663      	mov	r3, ip
 8002552:	0001      	movs	r1, r0
 8002554:	08d2      	lsrs	r2, r2, #3
 8002556:	075e      	lsls	r6, r3, #29
 8002558:	4316      	orrs	r6, r2
 800255a:	00f3      	lsls	r3, r6, #3
 800255c:	4699      	mov	r9, r3
 800255e:	00c9      	lsls	r1, r1, #3
 8002560:	0f72      	lsrs	r2, r6, #29
 8002562:	4d44      	ldr	r5, [pc, #272]	; (8002674 <__aeabi_dsub+0x348>)
 8002564:	4311      	orrs	r1, r2
 8002566:	464b      	mov	r3, r9
 8002568:	08de      	lsrs	r6, r3, #3
 800256a:	4b42      	ldr	r3, [pc, #264]	; (8002674 <__aeabi_dsub+0x348>)
 800256c:	074f      	lsls	r7, r1, #29
 800256e:	4337      	orrs	r7, r6
 8002570:	08ca      	lsrs	r2, r1, #3
 8002572:	429d      	cmp	r5, r3
 8002574:	d100      	bne.n	8002578 <__aeabi_dsub+0x24c>
 8002576:	e06e      	b.n	8002656 <__aeabi_dsub+0x32a>
 8002578:	0312      	lsls	r2, r2, #12
 800257a:	056d      	lsls	r5, r5, #21
 800257c:	0b12      	lsrs	r2, r2, #12
 800257e:	0d6d      	lsrs	r5, r5, #21
 8002580:	2100      	movs	r1, #0
 8002582:	0312      	lsls	r2, r2, #12
 8002584:	0b13      	lsrs	r3, r2, #12
 8002586:	0d0a      	lsrs	r2, r1, #20
 8002588:	0512      	lsls	r2, r2, #20
 800258a:	431a      	orrs	r2, r3
 800258c:	4b3b      	ldr	r3, [pc, #236]	; (800267c <__aeabi_dsub+0x350>)
 800258e:	052d      	lsls	r5, r5, #20
 8002590:	4013      	ands	r3, r2
 8002592:	432b      	orrs	r3, r5
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	07e4      	lsls	r4, r4, #31
 8002598:	085b      	lsrs	r3, r3, #1
 800259a:	4323      	orrs	r3, r4
 800259c:	0038      	movs	r0, r7
 800259e:	0019      	movs	r1, r3
 80025a0:	bc3c      	pop	{r2, r3, r4, r5}
 80025a2:	4690      	mov	r8, r2
 80025a4:	4699      	mov	r9, r3
 80025a6:	46a2      	mov	sl, r4
 80025a8:	46ab      	mov	fp, r5
 80025aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025ac:	4663      	mov	r3, ip
 80025ae:	4313      	orrs	r3, r2
 80025b0:	d011      	beq.n	80025d6 <__aeabi_dsub+0x2aa>
 80025b2:	1e73      	subs	r3, r6, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d000      	beq.n	80025ba <__aeabi_dsub+0x28e>
 80025b8:	e107      	b.n	80027ca <__aeabi_dsub+0x49e>
 80025ba:	1886      	adds	r6, r0, r2
 80025bc:	4286      	cmp	r6, r0
 80025be:	4180      	sbcs	r0, r0
 80025c0:	4461      	add	r1, ip
 80025c2:	4240      	negs	r0, r0
 80025c4:	1809      	adds	r1, r1, r0
 80025c6:	2501      	movs	r5, #1
 80025c8:	020b      	lsls	r3, r1, #8
 80025ca:	d537      	bpl.n	800263c <__aeabi_dsub+0x310>
 80025cc:	2502      	movs	r5, #2
 80025ce:	e77b      	b.n	80024c8 <__aeabi_dsub+0x19c>
 80025d0:	003e      	movs	r6, r7
 80025d2:	4661      	mov	r1, ip
 80025d4:	4691      	mov	r9, r2
 80025d6:	0035      	movs	r5, r6
 80025d8:	e7c5      	b.n	8002566 <__aeabi_dsub+0x23a>
 80025da:	465c      	mov	r4, fp
 80025dc:	2d00      	cmp	r5, #0
 80025de:	d000      	beq.n	80025e2 <__aeabi_dsub+0x2b6>
 80025e0:	e0e1      	b.n	80027a6 <__aeabi_dsub+0x47a>
 80025e2:	000b      	movs	r3, r1
 80025e4:	4303      	orrs	r3, r0
 80025e6:	d0f3      	beq.n	80025d0 <__aeabi_dsub+0x2a4>
 80025e8:	1c73      	adds	r3, r6, #1
 80025ea:	d100      	bne.n	80025ee <__aeabi_dsub+0x2c2>
 80025ec:	e1ac      	b.n	8002948 <__aeabi_dsub+0x61c>
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <__aeabi_dsub+0x348>)
 80025f0:	429f      	cmp	r7, r3
 80025f2:	d100      	bne.n	80025f6 <__aeabi_dsub+0x2ca>
 80025f4:	e13a      	b.n	800286c <__aeabi_dsub+0x540>
 80025f6:	43f3      	mvns	r3, r6
 80025f8:	2b38      	cmp	r3, #56	; 0x38
 80025fa:	dd00      	ble.n	80025fe <__aeabi_dsub+0x2d2>
 80025fc:	e16f      	b.n	80028de <__aeabi_dsub+0x5b2>
 80025fe:	2b1f      	cmp	r3, #31
 8002600:	dd00      	ble.n	8002604 <__aeabi_dsub+0x2d8>
 8002602:	e18c      	b.n	800291e <__aeabi_dsub+0x5f2>
 8002604:	2520      	movs	r5, #32
 8002606:	000e      	movs	r6, r1
 8002608:	1aed      	subs	r5, r5, r3
 800260a:	40ae      	lsls	r6, r5
 800260c:	46b0      	mov	r8, r6
 800260e:	0006      	movs	r6, r0
 8002610:	46aa      	mov	sl, r5
 8002612:	40de      	lsrs	r6, r3
 8002614:	4645      	mov	r5, r8
 8002616:	4335      	orrs	r5, r6
 8002618:	002e      	movs	r6, r5
 800261a:	4655      	mov	r5, sl
 800261c:	40d9      	lsrs	r1, r3
 800261e:	40a8      	lsls	r0, r5
 8002620:	4663      	mov	r3, ip
 8002622:	1e45      	subs	r5, r0, #1
 8002624:	41a8      	sbcs	r0, r5
 8002626:	1a5b      	subs	r3, r3, r1
 8002628:	469c      	mov	ip, r3
 800262a:	4330      	orrs	r0, r6
 800262c:	1a16      	subs	r6, r2, r0
 800262e:	42b2      	cmp	r2, r6
 8002630:	4192      	sbcs	r2, r2
 8002632:	4663      	mov	r3, ip
 8002634:	4252      	negs	r2, r2
 8002636:	1a99      	subs	r1, r3, r2
 8002638:	003d      	movs	r5, r7
 800263a:	e6b4      	b.n	80023a6 <__aeabi_dsub+0x7a>
 800263c:	2207      	movs	r2, #7
 800263e:	4032      	ands	r2, r6
 8002640:	2a00      	cmp	r2, #0
 8002642:	d000      	beq.n	8002646 <__aeabi_dsub+0x31a>
 8002644:	e6e4      	b.n	8002410 <__aeabi_dsub+0xe4>
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <__aeabi_dsub+0x348>)
 8002648:	08f6      	lsrs	r6, r6, #3
 800264a:	074f      	lsls	r7, r1, #29
 800264c:	4337      	orrs	r7, r6
 800264e:	08ca      	lsrs	r2, r1, #3
 8002650:	429d      	cmp	r5, r3
 8002652:	d000      	beq.n	8002656 <__aeabi_dsub+0x32a>
 8002654:	e790      	b.n	8002578 <__aeabi_dsub+0x24c>
 8002656:	003b      	movs	r3, r7
 8002658:	4313      	orrs	r3, r2
 800265a:	d100      	bne.n	800265e <__aeabi_dsub+0x332>
 800265c:	e1a6      	b.n	80029ac <__aeabi_dsub+0x680>
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	031b      	lsls	r3, r3, #12
 8002662:	431a      	orrs	r2, r3
 8002664:	0312      	lsls	r2, r2, #12
 8002666:	0b12      	lsrs	r2, r2, #12
 8002668:	4d02      	ldr	r5, [pc, #8]	; (8002674 <__aeabi_dsub+0x348>)
 800266a:	e789      	b.n	8002580 <__aeabi_dsub+0x254>
 800266c:	0015      	movs	r5, r2
 800266e:	2200      	movs	r2, #0
 8002670:	2700      	movs	r7, #0
 8002672:	e785      	b.n	8002580 <__aeabi_dsub+0x254>
 8002674:	000007ff 	.word	0x000007ff
 8002678:	ff7fffff 	.word	0xff7fffff
 800267c:	800fffff 	.word	0x800fffff
 8002680:	2e00      	cmp	r6, #0
 8002682:	d000      	beq.n	8002686 <__aeabi_dsub+0x35a>
 8002684:	e0c7      	b.n	8002816 <__aeabi_dsub+0x4ea>
 8002686:	1c6b      	adds	r3, r5, #1
 8002688:	055e      	lsls	r6, r3, #21
 800268a:	0d76      	lsrs	r6, r6, #21
 800268c:	2e01      	cmp	r6, #1
 800268e:	dc00      	bgt.n	8002692 <__aeabi_dsub+0x366>
 8002690:	e0f0      	b.n	8002874 <__aeabi_dsub+0x548>
 8002692:	4dc8      	ldr	r5, [pc, #800]	; (80029b4 <__aeabi_dsub+0x688>)
 8002694:	42ab      	cmp	r3, r5
 8002696:	d100      	bne.n	800269a <__aeabi_dsub+0x36e>
 8002698:	e0b9      	b.n	800280e <__aeabi_dsub+0x4e2>
 800269a:	1885      	adds	r5, r0, r2
 800269c:	000a      	movs	r2, r1
 800269e:	4285      	cmp	r5, r0
 80026a0:	4189      	sbcs	r1, r1
 80026a2:	4462      	add	r2, ip
 80026a4:	4249      	negs	r1, r1
 80026a6:	1851      	adds	r1, r2, r1
 80026a8:	2207      	movs	r2, #7
 80026aa:	07ce      	lsls	r6, r1, #31
 80026ac:	086d      	lsrs	r5, r5, #1
 80026ae:	432e      	orrs	r6, r5
 80026b0:	0849      	lsrs	r1, r1, #1
 80026b2:	4032      	ands	r2, r6
 80026b4:	001d      	movs	r5, r3
 80026b6:	e6a9      	b.n	800240c <__aeabi_dsub+0xe0>
 80026b8:	49bf      	ldr	r1, [pc, #764]	; (80029b8 <__aeabi_dsub+0x68c>)
 80026ba:	1aed      	subs	r5, r5, r3
 80026bc:	4011      	ands	r1, r2
 80026be:	2207      	movs	r2, #7
 80026c0:	4032      	ands	r2, r6
 80026c2:	e6a3      	b.n	800240c <__aeabi_dsub+0xe0>
 80026c4:	0032      	movs	r2, r6
 80026c6:	3828      	subs	r0, #40	; 0x28
 80026c8:	4082      	lsls	r2, r0
 80026ca:	2600      	movs	r6, #0
 80026cc:	e686      	b.n	80023dc <__aeabi_dsub+0xb0>
 80026ce:	0030      	movs	r0, r6
 80026d0:	f000 fb08 	bl	8002ce4 <__clzsi2>
 80026d4:	3020      	adds	r0, #32
 80026d6:	e673      	b.n	80023c0 <__aeabi_dsub+0x94>
 80026d8:	4663      	mov	r3, ip
 80026da:	4313      	orrs	r3, r2
 80026dc:	1e5a      	subs	r2, r3, #1
 80026de:	4193      	sbcs	r3, r2
 80026e0:	1ac6      	subs	r6, r0, r3
 80026e2:	42b0      	cmp	r0, r6
 80026e4:	4180      	sbcs	r0, r0
 80026e6:	4240      	negs	r0, r0
 80026e8:	1a09      	subs	r1, r1, r0
 80026ea:	e65c      	b.n	80023a6 <__aeabi_dsub+0x7a>
 80026ec:	000e      	movs	r6, r1
 80026ee:	4667      	mov	r7, ip
 80026f0:	4306      	orrs	r6, r0
 80026f2:	4317      	orrs	r7, r2
 80026f4:	2d00      	cmp	r5, #0
 80026f6:	d15e      	bne.n	80027b6 <__aeabi_dsub+0x48a>
 80026f8:	2e00      	cmp	r6, #0
 80026fa:	d000      	beq.n	80026fe <__aeabi_dsub+0x3d2>
 80026fc:	e0f3      	b.n	80028e6 <__aeabi_dsub+0x5ba>
 80026fe:	2f00      	cmp	r7, #0
 8002700:	d100      	bne.n	8002704 <__aeabi_dsub+0x3d8>
 8002702:	e11e      	b.n	8002942 <__aeabi_dsub+0x616>
 8002704:	465c      	mov	r4, fp
 8002706:	4661      	mov	r1, ip
 8002708:	4691      	mov	r9, r2
 800270a:	e72c      	b.n	8002566 <__aeabi_dsub+0x23a>
 800270c:	4fa9      	ldr	r7, [pc, #676]	; (80029b4 <__aeabi_dsub+0x688>)
 800270e:	42be      	cmp	r6, r7
 8002710:	d07b      	beq.n	800280a <__aeabi_dsub+0x4de>
 8002712:	001e      	movs	r6, r3
 8002714:	e6f1      	b.n	80024fa <__aeabi_dsub+0x1ce>
 8002716:	0010      	movs	r0, r2
 8002718:	3d1f      	subs	r5, #31
 800271a:	40e8      	lsrs	r0, r5
 800271c:	2b20      	cmp	r3, #32
 800271e:	d003      	beq.n	8002728 <__aeabi_dsub+0x3fc>
 8002720:	2140      	movs	r1, #64	; 0x40
 8002722:	1acb      	subs	r3, r1, r3
 8002724:	409a      	lsls	r2, r3
 8002726:	4316      	orrs	r6, r2
 8002728:	1e73      	subs	r3, r6, #1
 800272a:	419e      	sbcs	r6, r3
 800272c:	2207      	movs	r2, #7
 800272e:	4306      	orrs	r6, r0
 8002730:	4032      	ands	r2, r6
 8002732:	2100      	movs	r1, #0
 8002734:	2500      	movs	r5, #0
 8002736:	e783      	b.n	8002640 <__aeabi_dsub+0x314>
 8002738:	1a16      	subs	r6, r2, r0
 800273a:	4663      	mov	r3, ip
 800273c:	42b2      	cmp	r2, r6
 800273e:	4180      	sbcs	r0, r0
 8002740:	1a59      	subs	r1, r3, r1
 8002742:	4240      	negs	r0, r0
 8002744:	1a0b      	subs	r3, r1, r0
 8002746:	4698      	mov	r8, r3
 8002748:	465c      	mov	r4, fp
 800274a:	e632      	b.n	80023b2 <__aeabi_dsub+0x86>
 800274c:	2e1f      	cmp	r6, #31
 800274e:	dd00      	ble.n	8002752 <__aeabi_dsub+0x426>
 8002750:	e0ab      	b.n	80028aa <__aeabi_dsub+0x57e>
 8002752:	2720      	movs	r7, #32
 8002754:	1bbb      	subs	r3, r7, r6
 8002756:	469a      	mov	sl, r3
 8002758:	4663      	mov	r3, ip
 800275a:	4657      	mov	r7, sl
 800275c:	40bb      	lsls	r3, r7
 800275e:	4699      	mov	r9, r3
 8002760:	0013      	movs	r3, r2
 8002762:	464f      	mov	r7, r9
 8002764:	40f3      	lsrs	r3, r6
 8002766:	431f      	orrs	r7, r3
 8002768:	003b      	movs	r3, r7
 800276a:	4657      	mov	r7, sl
 800276c:	40ba      	lsls	r2, r7
 800276e:	1e57      	subs	r7, r2, #1
 8002770:	41ba      	sbcs	r2, r7
 8002772:	4313      	orrs	r3, r2
 8002774:	4662      	mov	r2, ip
 8002776:	40f2      	lsrs	r2, r6
 8002778:	1889      	adds	r1, r1, r2
 800277a:	e698      	b.n	80024ae <__aeabi_dsub+0x182>
 800277c:	2720      	movs	r7, #32
 800277e:	1bbb      	subs	r3, r7, r6
 8002780:	469a      	mov	sl, r3
 8002782:	4663      	mov	r3, ip
 8002784:	4657      	mov	r7, sl
 8002786:	40bb      	lsls	r3, r7
 8002788:	4699      	mov	r9, r3
 800278a:	0013      	movs	r3, r2
 800278c:	464f      	mov	r7, r9
 800278e:	40f3      	lsrs	r3, r6
 8002790:	431f      	orrs	r7, r3
 8002792:	003b      	movs	r3, r7
 8002794:	4657      	mov	r7, sl
 8002796:	40ba      	lsls	r2, r7
 8002798:	1e57      	subs	r7, r2, #1
 800279a:	41ba      	sbcs	r2, r7
 800279c:	4313      	orrs	r3, r2
 800279e:	4662      	mov	r2, ip
 80027a0:	40f2      	lsrs	r2, r6
 80027a2:	1a89      	subs	r1, r1, r2
 80027a4:	e79c      	b.n	80026e0 <__aeabi_dsub+0x3b4>
 80027a6:	4b83      	ldr	r3, [pc, #524]	; (80029b4 <__aeabi_dsub+0x688>)
 80027a8:	429f      	cmp	r7, r3
 80027aa:	d05f      	beq.n	800286c <__aeabi_dsub+0x540>
 80027ac:	2580      	movs	r5, #128	; 0x80
 80027ae:	042d      	lsls	r5, r5, #16
 80027b0:	4273      	negs	r3, r6
 80027b2:	4329      	orrs	r1, r5
 80027b4:	e720      	b.n	80025f8 <__aeabi_dsub+0x2cc>
 80027b6:	2e00      	cmp	r6, #0
 80027b8:	d10c      	bne.n	80027d4 <__aeabi_dsub+0x4a8>
 80027ba:	2f00      	cmp	r7, #0
 80027bc:	d100      	bne.n	80027c0 <__aeabi_dsub+0x494>
 80027be:	e0d0      	b.n	8002962 <__aeabi_dsub+0x636>
 80027c0:	465c      	mov	r4, fp
 80027c2:	4661      	mov	r1, ip
 80027c4:	4691      	mov	r9, r2
 80027c6:	4d7b      	ldr	r5, [pc, #492]	; (80029b4 <__aeabi_dsub+0x688>)
 80027c8:	e6cd      	b.n	8002566 <__aeabi_dsub+0x23a>
 80027ca:	4f7a      	ldr	r7, [pc, #488]	; (80029b4 <__aeabi_dsub+0x688>)
 80027cc:	42be      	cmp	r6, r7
 80027ce:	d01c      	beq.n	800280a <__aeabi_dsub+0x4de>
 80027d0:	001e      	movs	r6, r3
 80027d2:	e665      	b.n	80024a0 <__aeabi_dsub+0x174>
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d018      	beq.n	800280a <__aeabi_dsub+0x4de>
 80027d8:	08c0      	lsrs	r0, r0, #3
 80027da:	074e      	lsls	r6, r1, #29
 80027dc:	4306      	orrs	r6, r0
 80027de:	2080      	movs	r0, #128	; 0x80
 80027e0:	08c9      	lsrs	r1, r1, #3
 80027e2:	0300      	lsls	r0, r0, #12
 80027e4:	4201      	tst	r1, r0
 80027e6:	d008      	beq.n	80027fa <__aeabi_dsub+0x4ce>
 80027e8:	4663      	mov	r3, ip
 80027ea:	08dc      	lsrs	r4, r3, #3
 80027ec:	4204      	tst	r4, r0
 80027ee:	d104      	bne.n	80027fa <__aeabi_dsub+0x4ce>
 80027f0:	0021      	movs	r1, r4
 80027f2:	46da      	mov	sl, fp
 80027f4:	08d2      	lsrs	r2, r2, #3
 80027f6:	075e      	lsls	r6, r3, #29
 80027f8:	4316      	orrs	r6, r2
 80027fa:	00f3      	lsls	r3, r6, #3
 80027fc:	4699      	mov	r9, r3
 80027fe:	2401      	movs	r4, #1
 8002800:	4653      	mov	r3, sl
 8002802:	00c9      	lsls	r1, r1, #3
 8002804:	0f72      	lsrs	r2, r6, #29
 8002806:	4311      	orrs	r1, r2
 8002808:	401c      	ands	r4, r3
 800280a:	4d6a      	ldr	r5, [pc, #424]	; (80029b4 <__aeabi_dsub+0x688>)
 800280c:	e6ab      	b.n	8002566 <__aeabi_dsub+0x23a>
 800280e:	001d      	movs	r5, r3
 8002810:	2200      	movs	r2, #0
 8002812:	2700      	movs	r7, #0
 8002814:	e6b4      	b.n	8002580 <__aeabi_dsub+0x254>
 8002816:	2d00      	cmp	r5, #0
 8002818:	d159      	bne.n	80028ce <__aeabi_dsub+0x5a2>
 800281a:	000b      	movs	r3, r1
 800281c:	4303      	orrs	r3, r0
 800281e:	d100      	bne.n	8002822 <__aeabi_dsub+0x4f6>
 8002820:	e6d6      	b.n	80025d0 <__aeabi_dsub+0x2a4>
 8002822:	1c73      	adds	r3, r6, #1
 8002824:	d100      	bne.n	8002828 <__aeabi_dsub+0x4fc>
 8002826:	e0b2      	b.n	800298e <__aeabi_dsub+0x662>
 8002828:	4b62      	ldr	r3, [pc, #392]	; (80029b4 <__aeabi_dsub+0x688>)
 800282a:	429f      	cmp	r7, r3
 800282c:	d01e      	beq.n	800286c <__aeabi_dsub+0x540>
 800282e:	43f3      	mvns	r3, r6
 8002830:	2b38      	cmp	r3, #56	; 0x38
 8002832:	dc6f      	bgt.n	8002914 <__aeabi_dsub+0x5e8>
 8002834:	2b1f      	cmp	r3, #31
 8002836:	dd00      	ble.n	800283a <__aeabi_dsub+0x50e>
 8002838:	e097      	b.n	800296a <__aeabi_dsub+0x63e>
 800283a:	2520      	movs	r5, #32
 800283c:	000e      	movs	r6, r1
 800283e:	1aed      	subs	r5, r5, r3
 8002840:	40ae      	lsls	r6, r5
 8002842:	46b0      	mov	r8, r6
 8002844:	0006      	movs	r6, r0
 8002846:	46aa      	mov	sl, r5
 8002848:	40de      	lsrs	r6, r3
 800284a:	4645      	mov	r5, r8
 800284c:	4335      	orrs	r5, r6
 800284e:	002e      	movs	r6, r5
 8002850:	4655      	mov	r5, sl
 8002852:	40a8      	lsls	r0, r5
 8002854:	40d9      	lsrs	r1, r3
 8002856:	1e45      	subs	r5, r0, #1
 8002858:	41a8      	sbcs	r0, r5
 800285a:	448c      	add	ip, r1
 800285c:	4306      	orrs	r6, r0
 800285e:	18b6      	adds	r6, r6, r2
 8002860:	4296      	cmp	r6, r2
 8002862:	4192      	sbcs	r2, r2
 8002864:	4251      	negs	r1, r2
 8002866:	4461      	add	r1, ip
 8002868:	003d      	movs	r5, r7
 800286a:	e625      	b.n	80024b8 <__aeabi_dsub+0x18c>
 800286c:	003d      	movs	r5, r7
 800286e:	4661      	mov	r1, ip
 8002870:	4691      	mov	r9, r2
 8002872:	e678      	b.n	8002566 <__aeabi_dsub+0x23a>
 8002874:	000b      	movs	r3, r1
 8002876:	4303      	orrs	r3, r0
 8002878:	2d00      	cmp	r5, #0
 800287a:	d000      	beq.n	800287e <__aeabi_dsub+0x552>
 800287c:	e655      	b.n	800252a <__aeabi_dsub+0x1fe>
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f5      	beq.n	800286e <__aeabi_dsub+0x542>
 8002882:	4663      	mov	r3, ip
 8002884:	4313      	orrs	r3, r2
 8002886:	d100      	bne.n	800288a <__aeabi_dsub+0x55e>
 8002888:	e66d      	b.n	8002566 <__aeabi_dsub+0x23a>
 800288a:	1886      	adds	r6, r0, r2
 800288c:	4286      	cmp	r6, r0
 800288e:	4180      	sbcs	r0, r0
 8002890:	4461      	add	r1, ip
 8002892:	4240      	negs	r0, r0
 8002894:	1809      	adds	r1, r1, r0
 8002896:	2200      	movs	r2, #0
 8002898:	020b      	lsls	r3, r1, #8
 800289a:	d400      	bmi.n	800289e <__aeabi_dsub+0x572>
 800289c:	e6d0      	b.n	8002640 <__aeabi_dsub+0x314>
 800289e:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <__aeabi_dsub+0x68c>)
 80028a0:	3501      	adds	r5, #1
 80028a2:	4019      	ands	r1, r3
 80028a4:	e5b2      	b.n	800240c <__aeabi_dsub+0xe0>
 80028a6:	46b1      	mov	r9, r6
 80028a8:	e65d      	b.n	8002566 <__aeabi_dsub+0x23a>
 80028aa:	0033      	movs	r3, r6
 80028ac:	4667      	mov	r7, ip
 80028ae:	3b20      	subs	r3, #32
 80028b0:	40df      	lsrs	r7, r3
 80028b2:	003b      	movs	r3, r7
 80028b4:	2e20      	cmp	r6, #32
 80028b6:	d005      	beq.n	80028c4 <__aeabi_dsub+0x598>
 80028b8:	2740      	movs	r7, #64	; 0x40
 80028ba:	1bbf      	subs	r7, r7, r6
 80028bc:	4666      	mov	r6, ip
 80028be:	40be      	lsls	r6, r7
 80028c0:	4332      	orrs	r2, r6
 80028c2:	4690      	mov	r8, r2
 80028c4:	4646      	mov	r6, r8
 80028c6:	1e72      	subs	r2, r6, #1
 80028c8:	4196      	sbcs	r6, r2
 80028ca:	4333      	orrs	r3, r6
 80028cc:	e5ef      	b.n	80024ae <__aeabi_dsub+0x182>
 80028ce:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <__aeabi_dsub+0x688>)
 80028d0:	429f      	cmp	r7, r3
 80028d2:	d0cb      	beq.n	800286c <__aeabi_dsub+0x540>
 80028d4:	2580      	movs	r5, #128	; 0x80
 80028d6:	042d      	lsls	r5, r5, #16
 80028d8:	4273      	negs	r3, r6
 80028da:	4329      	orrs	r1, r5
 80028dc:	e7a8      	b.n	8002830 <__aeabi_dsub+0x504>
 80028de:	4308      	orrs	r0, r1
 80028e0:	1e41      	subs	r1, r0, #1
 80028e2:	4188      	sbcs	r0, r1
 80028e4:	e6a2      	b.n	800262c <__aeabi_dsub+0x300>
 80028e6:	2f00      	cmp	r7, #0
 80028e8:	d100      	bne.n	80028ec <__aeabi_dsub+0x5c0>
 80028ea:	e63c      	b.n	8002566 <__aeabi_dsub+0x23a>
 80028ec:	4663      	mov	r3, ip
 80028ee:	1a86      	subs	r6, r0, r2
 80028f0:	1acf      	subs	r7, r1, r3
 80028f2:	42b0      	cmp	r0, r6
 80028f4:	419b      	sbcs	r3, r3
 80028f6:	425b      	negs	r3, r3
 80028f8:	1afb      	subs	r3, r7, r3
 80028fa:	4698      	mov	r8, r3
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	d54e      	bpl.n	800299e <__aeabi_dsub+0x672>
 8002900:	1a16      	subs	r6, r2, r0
 8002902:	4663      	mov	r3, ip
 8002904:	42b2      	cmp	r2, r6
 8002906:	4192      	sbcs	r2, r2
 8002908:	1a59      	subs	r1, r3, r1
 800290a:	4252      	negs	r2, r2
 800290c:	1a89      	subs	r1, r1, r2
 800290e:	465c      	mov	r4, fp
 8002910:	2200      	movs	r2, #0
 8002912:	e57b      	b.n	800240c <__aeabi_dsub+0xe0>
 8002914:	4301      	orrs	r1, r0
 8002916:	000e      	movs	r6, r1
 8002918:	1e71      	subs	r1, r6, #1
 800291a:	418e      	sbcs	r6, r1
 800291c:	e79f      	b.n	800285e <__aeabi_dsub+0x532>
 800291e:	001d      	movs	r5, r3
 8002920:	000e      	movs	r6, r1
 8002922:	3d20      	subs	r5, #32
 8002924:	40ee      	lsrs	r6, r5
 8002926:	46b0      	mov	r8, r6
 8002928:	2b20      	cmp	r3, #32
 800292a:	d004      	beq.n	8002936 <__aeabi_dsub+0x60a>
 800292c:	2540      	movs	r5, #64	; 0x40
 800292e:	1aeb      	subs	r3, r5, r3
 8002930:	4099      	lsls	r1, r3
 8002932:	4308      	orrs	r0, r1
 8002934:	4681      	mov	r9, r0
 8002936:	4648      	mov	r0, r9
 8002938:	4643      	mov	r3, r8
 800293a:	1e41      	subs	r1, r0, #1
 800293c:	4188      	sbcs	r0, r1
 800293e:	4318      	orrs	r0, r3
 8002940:	e674      	b.n	800262c <__aeabi_dsub+0x300>
 8002942:	2200      	movs	r2, #0
 8002944:	2400      	movs	r4, #0
 8002946:	e617      	b.n	8002578 <__aeabi_dsub+0x24c>
 8002948:	1a16      	subs	r6, r2, r0
 800294a:	4663      	mov	r3, ip
 800294c:	42b2      	cmp	r2, r6
 800294e:	4192      	sbcs	r2, r2
 8002950:	1a59      	subs	r1, r3, r1
 8002952:	4252      	negs	r2, r2
 8002954:	1a89      	subs	r1, r1, r2
 8002956:	003d      	movs	r5, r7
 8002958:	e525      	b.n	80023a6 <__aeabi_dsub+0x7a>
 800295a:	4661      	mov	r1, ip
 800295c:	4691      	mov	r9, r2
 800295e:	4d15      	ldr	r5, [pc, #84]	; (80029b4 <__aeabi_dsub+0x688>)
 8002960:	e601      	b.n	8002566 <__aeabi_dsub+0x23a>
 8002962:	2280      	movs	r2, #128	; 0x80
 8002964:	2400      	movs	r4, #0
 8002966:	0312      	lsls	r2, r2, #12
 8002968:	e679      	b.n	800265e <__aeabi_dsub+0x332>
 800296a:	001d      	movs	r5, r3
 800296c:	000e      	movs	r6, r1
 800296e:	3d20      	subs	r5, #32
 8002970:	40ee      	lsrs	r6, r5
 8002972:	46b0      	mov	r8, r6
 8002974:	2b20      	cmp	r3, #32
 8002976:	d004      	beq.n	8002982 <__aeabi_dsub+0x656>
 8002978:	2540      	movs	r5, #64	; 0x40
 800297a:	1aeb      	subs	r3, r5, r3
 800297c:	4099      	lsls	r1, r3
 800297e:	4308      	orrs	r0, r1
 8002980:	4681      	mov	r9, r0
 8002982:	464e      	mov	r6, r9
 8002984:	4643      	mov	r3, r8
 8002986:	1e71      	subs	r1, r6, #1
 8002988:	418e      	sbcs	r6, r1
 800298a:	431e      	orrs	r6, r3
 800298c:	e767      	b.n	800285e <__aeabi_dsub+0x532>
 800298e:	1886      	adds	r6, r0, r2
 8002990:	4296      	cmp	r6, r2
 8002992:	419b      	sbcs	r3, r3
 8002994:	4461      	add	r1, ip
 8002996:	425b      	negs	r3, r3
 8002998:	18c9      	adds	r1, r1, r3
 800299a:	003d      	movs	r5, r7
 800299c:	e58c      	b.n	80024b8 <__aeabi_dsub+0x18c>
 800299e:	4647      	mov	r7, r8
 80029a0:	4337      	orrs	r7, r6
 80029a2:	d0ce      	beq.n	8002942 <__aeabi_dsub+0x616>
 80029a4:	2207      	movs	r2, #7
 80029a6:	4641      	mov	r1, r8
 80029a8:	4032      	ands	r2, r6
 80029aa:	e649      	b.n	8002640 <__aeabi_dsub+0x314>
 80029ac:	2700      	movs	r7, #0
 80029ae:	003a      	movs	r2, r7
 80029b0:	e5e6      	b.n	8002580 <__aeabi_dsub+0x254>
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	000007ff 	.word	0x000007ff
 80029b8:	ff7fffff 	.word	0xff7fffff

080029bc <__aeabi_dcmpun>:
 80029bc:	b570      	push	{r4, r5, r6, lr}
 80029be:	4e0c      	ldr	r6, [pc, #48]	; (80029f0 <__aeabi_dcmpun+0x34>)
 80029c0:	030d      	lsls	r5, r1, #12
 80029c2:	031c      	lsls	r4, r3, #12
 80029c4:	0049      	lsls	r1, r1, #1
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	0b2d      	lsrs	r5, r5, #12
 80029ca:	0d49      	lsrs	r1, r1, #21
 80029cc:	0b24      	lsrs	r4, r4, #12
 80029ce:	0d5b      	lsrs	r3, r3, #21
 80029d0:	42b1      	cmp	r1, r6
 80029d2:	d008      	beq.n	80029e6 <__aeabi_dcmpun+0x2a>
 80029d4:	4906      	ldr	r1, [pc, #24]	; (80029f0 <__aeabi_dcmpun+0x34>)
 80029d6:	2000      	movs	r0, #0
 80029d8:	428b      	cmp	r3, r1
 80029da:	d103      	bne.n	80029e4 <__aeabi_dcmpun+0x28>
 80029dc:	4314      	orrs	r4, r2
 80029de:	0020      	movs	r0, r4
 80029e0:	1e44      	subs	r4, r0, #1
 80029e2:	41a0      	sbcs	r0, r4
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
 80029e6:	4305      	orrs	r5, r0
 80029e8:	2001      	movs	r0, #1
 80029ea:	2d00      	cmp	r5, #0
 80029ec:	d1fa      	bne.n	80029e4 <__aeabi_dcmpun+0x28>
 80029ee:	e7f1      	b.n	80029d4 <__aeabi_dcmpun+0x18>
 80029f0:	000007ff 	.word	0x000007ff

080029f4 <__aeabi_d2iz>:
 80029f4:	b530      	push	{r4, r5, lr}
 80029f6:	4d14      	ldr	r5, [pc, #80]	; (8002a48 <__aeabi_d2iz+0x54>)
 80029f8:	030a      	lsls	r2, r1, #12
 80029fa:	004b      	lsls	r3, r1, #1
 80029fc:	0b12      	lsrs	r2, r2, #12
 80029fe:	0d5b      	lsrs	r3, r3, #21
 8002a00:	0fc9      	lsrs	r1, r1, #31
 8002a02:	2400      	movs	r4, #0
 8002a04:	42ab      	cmp	r3, r5
 8002a06:	dd11      	ble.n	8002a2c <__aeabi_d2iz+0x38>
 8002a08:	4c10      	ldr	r4, [pc, #64]	; (8002a4c <__aeabi_d2iz+0x58>)
 8002a0a:	42a3      	cmp	r3, r4
 8002a0c:	dc10      	bgt.n	8002a30 <__aeabi_d2iz+0x3c>
 8002a0e:	2480      	movs	r4, #128	; 0x80
 8002a10:	0364      	lsls	r4, r4, #13
 8002a12:	4322      	orrs	r2, r4
 8002a14:	4c0e      	ldr	r4, [pc, #56]	; (8002a50 <__aeabi_d2iz+0x5c>)
 8002a16:	1ae4      	subs	r4, r4, r3
 8002a18:	2c1f      	cmp	r4, #31
 8002a1a:	dd0c      	ble.n	8002a36 <__aeabi_d2iz+0x42>
 8002a1c:	480d      	ldr	r0, [pc, #52]	; (8002a54 <__aeabi_d2iz+0x60>)
 8002a1e:	1ac3      	subs	r3, r0, r3
 8002a20:	40da      	lsrs	r2, r3
 8002a22:	0013      	movs	r3, r2
 8002a24:	425c      	negs	r4, r3
 8002a26:	2900      	cmp	r1, #0
 8002a28:	d100      	bne.n	8002a2c <__aeabi_d2iz+0x38>
 8002a2a:	001c      	movs	r4, r3
 8002a2c:	0020      	movs	r0, r4
 8002a2e:	bd30      	pop	{r4, r5, pc}
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <__aeabi_d2iz+0x64>)
 8002a32:	18cc      	adds	r4, r1, r3
 8002a34:	e7fa      	b.n	8002a2c <__aeabi_d2iz+0x38>
 8002a36:	4d09      	ldr	r5, [pc, #36]	; (8002a5c <__aeabi_d2iz+0x68>)
 8002a38:	40e0      	lsrs	r0, r4
 8002a3a:	46ac      	mov	ip, r5
 8002a3c:	4463      	add	r3, ip
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	0013      	movs	r3, r2
 8002a42:	4303      	orrs	r3, r0
 8002a44:	e7ee      	b.n	8002a24 <__aeabi_d2iz+0x30>
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	000003fe 	.word	0x000003fe
 8002a4c:	0000041d 	.word	0x0000041d
 8002a50:	00000433 	.word	0x00000433
 8002a54:	00000413 	.word	0x00000413
 8002a58:	7fffffff 	.word	0x7fffffff
 8002a5c:	fffffbed 	.word	0xfffffbed

08002a60 <__aeabi_i2d>:
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	2800      	cmp	r0, #0
 8002a64:	d02d      	beq.n	8002ac2 <__aeabi_i2d+0x62>
 8002a66:	17c3      	asrs	r3, r0, #31
 8002a68:	18c5      	adds	r5, r0, r3
 8002a6a:	405d      	eors	r5, r3
 8002a6c:	0fc4      	lsrs	r4, r0, #31
 8002a6e:	0028      	movs	r0, r5
 8002a70:	f000 f938 	bl	8002ce4 <__clzsi2>
 8002a74:	4b15      	ldr	r3, [pc, #84]	; (8002acc <__aeabi_i2d+0x6c>)
 8002a76:	1a1b      	subs	r3, r3, r0
 8002a78:	055b      	lsls	r3, r3, #21
 8002a7a:	0d5b      	lsrs	r3, r3, #21
 8002a7c:	280a      	cmp	r0, #10
 8002a7e:	dd15      	ble.n	8002aac <__aeabi_i2d+0x4c>
 8002a80:	380b      	subs	r0, #11
 8002a82:	4085      	lsls	r5, r0
 8002a84:	2200      	movs	r2, #0
 8002a86:	032d      	lsls	r5, r5, #12
 8002a88:	0b2d      	lsrs	r5, r5, #12
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	0010      	movs	r0, r2
 8002a8e:	032d      	lsls	r5, r5, #12
 8002a90:	0d0a      	lsrs	r2, r1, #20
 8002a92:	0b2d      	lsrs	r5, r5, #12
 8002a94:	0512      	lsls	r2, r2, #20
 8002a96:	432a      	orrs	r2, r5
 8002a98:	4d0d      	ldr	r5, [pc, #52]	; (8002ad0 <__aeabi_i2d+0x70>)
 8002a9a:	051b      	lsls	r3, r3, #20
 8002a9c:	402a      	ands	r2, r5
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	07e4      	lsls	r4, r4, #31
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	4323      	orrs	r3, r4
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	bd70      	pop	{r4, r5, r6, pc}
 8002aac:	0002      	movs	r2, r0
 8002aae:	0029      	movs	r1, r5
 8002ab0:	3215      	adds	r2, #21
 8002ab2:	4091      	lsls	r1, r2
 8002ab4:	000a      	movs	r2, r1
 8002ab6:	210b      	movs	r1, #11
 8002ab8:	1a08      	subs	r0, r1, r0
 8002aba:	40c5      	lsrs	r5, r0
 8002abc:	032d      	lsls	r5, r5, #12
 8002abe:	0b2d      	lsrs	r5, r5, #12
 8002ac0:	e7e3      	b.n	8002a8a <__aeabi_i2d+0x2a>
 8002ac2:	2400      	movs	r4, #0
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	2500      	movs	r5, #0
 8002ac8:	2200      	movs	r2, #0
 8002aca:	e7de      	b.n	8002a8a <__aeabi_i2d+0x2a>
 8002acc:	0000041e 	.word	0x0000041e
 8002ad0:	800fffff 	.word	0x800fffff

08002ad4 <__aeabi_ui2d>:
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	1e04      	subs	r4, r0, #0
 8002ad8:	d025      	beq.n	8002b26 <__aeabi_ui2d+0x52>
 8002ada:	f000 f903 	bl	8002ce4 <__clzsi2>
 8002ade:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <__aeabi_ui2d+0x5c>)
 8002ae0:	1a1b      	subs	r3, r3, r0
 8002ae2:	055b      	lsls	r3, r3, #21
 8002ae4:	0d5b      	lsrs	r3, r3, #21
 8002ae6:	280a      	cmp	r0, #10
 8002ae8:	dd12      	ble.n	8002b10 <__aeabi_ui2d+0x3c>
 8002aea:	380b      	subs	r0, #11
 8002aec:	4084      	lsls	r4, r0
 8002aee:	2200      	movs	r2, #0
 8002af0:	0324      	lsls	r4, r4, #12
 8002af2:	0b24      	lsrs	r4, r4, #12
 8002af4:	2100      	movs	r1, #0
 8002af6:	0010      	movs	r0, r2
 8002af8:	0324      	lsls	r4, r4, #12
 8002afa:	0d0a      	lsrs	r2, r1, #20
 8002afc:	0b24      	lsrs	r4, r4, #12
 8002afe:	0512      	lsls	r2, r2, #20
 8002b00:	4322      	orrs	r2, r4
 8002b02:	4c0c      	ldr	r4, [pc, #48]	; (8002b34 <__aeabi_ui2d+0x60>)
 8002b04:	051b      	lsls	r3, r3, #20
 8002b06:	4022      	ands	r2, r4
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	0859      	lsrs	r1, r3, #1
 8002b0e:	bd10      	pop	{r4, pc}
 8002b10:	0002      	movs	r2, r0
 8002b12:	0021      	movs	r1, r4
 8002b14:	3215      	adds	r2, #21
 8002b16:	4091      	lsls	r1, r2
 8002b18:	000a      	movs	r2, r1
 8002b1a:	210b      	movs	r1, #11
 8002b1c:	1a08      	subs	r0, r1, r0
 8002b1e:	40c4      	lsrs	r4, r0
 8002b20:	0324      	lsls	r4, r4, #12
 8002b22:	0b24      	lsrs	r4, r4, #12
 8002b24:	e7e6      	b.n	8002af4 <__aeabi_ui2d+0x20>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2400      	movs	r4, #0
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	e7e2      	b.n	8002af4 <__aeabi_ui2d+0x20>
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	0000041e 	.word	0x0000041e
 8002b34:	800fffff 	.word	0x800fffff

08002b38 <__aeabi_f2d>:
 8002b38:	0041      	lsls	r1, r0, #1
 8002b3a:	0e09      	lsrs	r1, r1, #24
 8002b3c:	1c4b      	adds	r3, r1, #1
 8002b3e:	b570      	push	{r4, r5, r6, lr}
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	0246      	lsls	r6, r0, #9
 8002b44:	0a75      	lsrs	r5, r6, #9
 8002b46:	0fc4      	lsrs	r4, r0, #31
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	dd14      	ble.n	8002b76 <__aeabi_f2d+0x3e>
 8002b4c:	23e0      	movs	r3, #224	; 0xe0
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	076d      	lsls	r5, r5, #29
 8002b52:	0b36      	lsrs	r6, r6, #12
 8002b54:	18cb      	adds	r3, r1, r3
 8002b56:	2100      	movs	r1, #0
 8002b58:	0d0a      	lsrs	r2, r1, #20
 8002b5a:	0028      	movs	r0, r5
 8002b5c:	0512      	lsls	r2, r2, #20
 8002b5e:	4d1c      	ldr	r5, [pc, #112]	; (8002bd0 <__aeabi_f2d+0x98>)
 8002b60:	4332      	orrs	r2, r6
 8002b62:	055b      	lsls	r3, r3, #21
 8002b64:	402a      	ands	r2, r5
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	07e4      	lsls	r4, r4, #31
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	4323      	orrs	r3, r4
 8002b72:	0019      	movs	r1, r3
 8002b74:	bd70      	pop	{r4, r5, r6, pc}
 8002b76:	2900      	cmp	r1, #0
 8002b78:	d114      	bne.n	8002ba4 <__aeabi_f2d+0x6c>
 8002b7a:	2d00      	cmp	r5, #0
 8002b7c:	d01e      	beq.n	8002bbc <__aeabi_f2d+0x84>
 8002b7e:	0028      	movs	r0, r5
 8002b80:	f000 f8b0 	bl	8002ce4 <__clzsi2>
 8002b84:	280a      	cmp	r0, #10
 8002b86:	dc1c      	bgt.n	8002bc2 <__aeabi_f2d+0x8a>
 8002b88:	230b      	movs	r3, #11
 8002b8a:	002a      	movs	r2, r5
 8002b8c:	1a1b      	subs	r3, r3, r0
 8002b8e:	40da      	lsrs	r2, r3
 8002b90:	0003      	movs	r3, r0
 8002b92:	3315      	adds	r3, #21
 8002b94:	409d      	lsls	r5, r3
 8002b96:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <__aeabi_f2d+0x9c>)
 8002b98:	0312      	lsls	r2, r2, #12
 8002b9a:	1a1b      	subs	r3, r3, r0
 8002b9c:	055b      	lsls	r3, r3, #21
 8002b9e:	0b16      	lsrs	r6, r2, #12
 8002ba0:	0d5b      	lsrs	r3, r3, #21
 8002ba2:	e7d8      	b.n	8002b56 <__aeabi_f2d+0x1e>
 8002ba4:	2d00      	cmp	r5, #0
 8002ba6:	d006      	beq.n	8002bb6 <__aeabi_f2d+0x7e>
 8002ba8:	0b32      	lsrs	r2, r6, #12
 8002baa:	2680      	movs	r6, #128	; 0x80
 8002bac:	0336      	lsls	r6, r6, #12
 8002bae:	076d      	lsls	r5, r5, #29
 8002bb0:	4316      	orrs	r6, r2
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <__aeabi_f2d+0xa0>)
 8002bb4:	e7cf      	b.n	8002b56 <__aeabi_f2d+0x1e>
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <__aeabi_f2d+0xa0>)
 8002bb8:	2600      	movs	r6, #0
 8002bba:	e7cc      	b.n	8002b56 <__aeabi_f2d+0x1e>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2600      	movs	r6, #0
 8002bc0:	e7c9      	b.n	8002b56 <__aeabi_f2d+0x1e>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	002a      	movs	r2, r5
 8002bc6:	3b0b      	subs	r3, #11
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	2500      	movs	r5, #0
 8002bcc:	e7e3      	b.n	8002b96 <__aeabi_f2d+0x5e>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	800fffff 	.word	0x800fffff
 8002bd4:	00000389 	.word	0x00000389
 8002bd8:	000007ff 	.word	0x000007ff

08002bdc <__aeabi_d2f>:
 8002bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bde:	004c      	lsls	r4, r1, #1
 8002be0:	0d64      	lsrs	r4, r4, #21
 8002be2:	030b      	lsls	r3, r1, #12
 8002be4:	1c62      	adds	r2, r4, #1
 8002be6:	0a5b      	lsrs	r3, r3, #9
 8002be8:	0f46      	lsrs	r6, r0, #29
 8002bea:	0552      	lsls	r2, r2, #21
 8002bec:	0fc9      	lsrs	r1, r1, #31
 8002bee:	431e      	orrs	r6, r3
 8002bf0:	00c5      	lsls	r5, r0, #3
 8002bf2:	0d52      	lsrs	r2, r2, #21
 8002bf4:	2a01      	cmp	r2, #1
 8002bf6:	dd29      	ble.n	8002c4c <__aeabi_d2f+0x70>
 8002bf8:	4b37      	ldr	r3, [pc, #220]	; (8002cd8 <__aeabi_d2f+0xfc>)
 8002bfa:	18e7      	adds	r7, r4, r3
 8002bfc:	2ffe      	cmp	r7, #254	; 0xfe
 8002bfe:	dc1c      	bgt.n	8002c3a <__aeabi_d2f+0x5e>
 8002c00:	2f00      	cmp	r7, #0
 8002c02:	dd3b      	ble.n	8002c7c <__aeabi_d2f+0xa0>
 8002c04:	0180      	lsls	r0, r0, #6
 8002c06:	1e43      	subs	r3, r0, #1
 8002c08:	4198      	sbcs	r0, r3
 8002c0a:	2207      	movs	r2, #7
 8002c0c:	00f3      	lsls	r3, r6, #3
 8002c0e:	0f6d      	lsrs	r5, r5, #29
 8002c10:	4303      	orrs	r3, r0
 8002c12:	432b      	orrs	r3, r5
 8002c14:	401a      	ands	r2, r3
 8002c16:	2a00      	cmp	r2, #0
 8002c18:	d004      	beq.n	8002c24 <__aeabi_d2f+0x48>
 8002c1a:	220f      	movs	r2, #15
 8002c1c:	401a      	ands	r2, r3
 8002c1e:	2a04      	cmp	r2, #4
 8002c20:	d000      	beq.n	8002c24 <__aeabi_d2f+0x48>
 8002c22:	3304      	adds	r3, #4
 8002c24:	2280      	movs	r2, #128	; 0x80
 8002c26:	04d2      	lsls	r2, r2, #19
 8002c28:	401a      	ands	r2, r3
 8002c2a:	d024      	beq.n	8002c76 <__aeabi_d2f+0x9a>
 8002c2c:	3701      	adds	r7, #1
 8002c2e:	b2fa      	uxtb	r2, r7
 8002c30:	2fff      	cmp	r7, #255	; 0xff
 8002c32:	d002      	beq.n	8002c3a <__aeabi_d2f+0x5e>
 8002c34:	019b      	lsls	r3, r3, #6
 8002c36:	0a58      	lsrs	r0, r3, #9
 8002c38:	e001      	b.n	8002c3e <__aeabi_d2f+0x62>
 8002c3a:	22ff      	movs	r2, #255	; 0xff
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	0240      	lsls	r0, r0, #9
 8002c40:	05d2      	lsls	r2, r2, #23
 8002c42:	0a40      	lsrs	r0, r0, #9
 8002c44:	07c9      	lsls	r1, r1, #31
 8002c46:	4310      	orrs	r0, r2
 8002c48:	4308      	orrs	r0, r1
 8002c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c4c:	4335      	orrs	r5, r6
 8002c4e:	2c00      	cmp	r4, #0
 8002c50:	d104      	bne.n	8002c5c <__aeabi_d2f+0x80>
 8002c52:	2d00      	cmp	r5, #0
 8002c54:	d10a      	bne.n	8002c6c <__aeabi_d2f+0x90>
 8002c56:	2200      	movs	r2, #0
 8002c58:	2000      	movs	r0, #0
 8002c5a:	e7f0      	b.n	8002c3e <__aeabi_d2f+0x62>
 8002c5c:	2d00      	cmp	r5, #0
 8002c5e:	d0ec      	beq.n	8002c3a <__aeabi_d2f+0x5e>
 8002c60:	2080      	movs	r0, #128	; 0x80
 8002c62:	03c0      	lsls	r0, r0, #15
 8002c64:	4330      	orrs	r0, r6
 8002c66:	22ff      	movs	r2, #255	; 0xff
 8002c68:	e7e9      	b.n	8002c3e <__aeabi_d2f+0x62>
 8002c6a:	2400      	movs	r4, #0
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	025b      	lsls	r3, r3, #9
 8002c70:	0a58      	lsrs	r0, r3, #9
 8002c72:	b2e2      	uxtb	r2, r4
 8002c74:	e7e3      	b.n	8002c3e <__aeabi_d2f+0x62>
 8002c76:	08db      	lsrs	r3, r3, #3
 8002c78:	003c      	movs	r4, r7
 8002c7a:	e7f8      	b.n	8002c6e <__aeabi_d2f+0x92>
 8002c7c:	003b      	movs	r3, r7
 8002c7e:	3317      	adds	r3, #23
 8002c80:	dbf3      	blt.n	8002c6a <__aeabi_d2f+0x8e>
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	4333      	orrs	r3, r6
 8002c88:	261e      	movs	r6, #30
 8002c8a:	1bf6      	subs	r6, r6, r7
 8002c8c:	2e1f      	cmp	r6, #31
 8002c8e:	dd14      	ble.n	8002cba <__aeabi_d2f+0xde>
 8002c90:	2202      	movs	r2, #2
 8002c92:	4252      	negs	r2, r2
 8002c94:	1bd7      	subs	r7, r2, r7
 8002c96:	001a      	movs	r2, r3
 8002c98:	40fa      	lsrs	r2, r7
 8002c9a:	0017      	movs	r7, r2
 8002c9c:	2e20      	cmp	r6, #32
 8002c9e:	d004      	beq.n	8002caa <__aeabi_d2f+0xce>
 8002ca0:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <__aeabi_d2f+0x100>)
 8002ca2:	4694      	mov	ip, r2
 8002ca4:	4464      	add	r4, ip
 8002ca6:	40a3      	lsls	r3, r4
 8002ca8:	431d      	orrs	r5, r3
 8002caa:	002b      	movs	r3, r5
 8002cac:	1e5d      	subs	r5, r3, #1
 8002cae:	41ab      	sbcs	r3, r5
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	433b      	orrs	r3, r7
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	2700      	movs	r7, #0
 8002cb8:	e7ad      	b.n	8002c16 <__aeabi_d2f+0x3a>
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <__aeabi_d2f+0x104>)
 8002cbc:	0028      	movs	r0, r5
 8002cbe:	18a2      	adds	r2, r4, r2
 8002cc0:	4095      	lsls	r5, r2
 8002cc2:	4093      	lsls	r3, r2
 8002cc4:	1e6c      	subs	r4, r5, #1
 8002cc6:	41a5      	sbcs	r5, r4
 8002cc8:	40f0      	lsrs	r0, r6
 8002cca:	2207      	movs	r2, #7
 8002ccc:	432b      	orrs	r3, r5
 8002cce:	4303      	orrs	r3, r0
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	2700      	movs	r7, #0
 8002cd4:	e79f      	b.n	8002c16 <__aeabi_d2f+0x3a>
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	fffffc80 	.word	0xfffffc80
 8002cdc:	fffffca2 	.word	0xfffffca2
 8002ce0:	fffffc82 	.word	0xfffffc82

08002ce4 <__clzsi2>:
 8002ce4:	211c      	movs	r1, #28
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0xe>
 8002cee:	0c00      	lsrs	r0, r0, #16
 8002cf0:	3910      	subs	r1, #16
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	4298      	cmp	r0, r3
 8002cf6:	d301      	bcc.n	8002cfc <__clzsi2+0x18>
 8002cf8:	0a00      	lsrs	r0, r0, #8
 8002cfa:	3908      	subs	r1, #8
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	4298      	cmp	r0, r3
 8002d00:	d301      	bcc.n	8002d06 <__clzsi2+0x22>
 8002d02:	0900      	lsrs	r0, r0, #4
 8002d04:	3904      	subs	r1, #4
 8002d06:	a202      	add	r2, pc, #8	; (adr r2, 8002d10 <__clzsi2+0x2c>)
 8002d08:	5c10      	ldrb	r0, [r2, r0]
 8002d0a:	1840      	adds	r0, r0, r1
 8002d0c:	4770      	bx	lr
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	02020304 	.word	0x02020304
 8002d14:	01010101 	.word	0x01010101
	...

08002d20 <__clzdi2>:
 8002d20:	b510      	push	{r4, lr}
 8002d22:	2900      	cmp	r1, #0
 8002d24:	d103      	bne.n	8002d2e <__clzdi2+0xe>
 8002d26:	f7ff ffdd 	bl	8002ce4 <__clzsi2>
 8002d2a:	3020      	adds	r0, #32
 8002d2c:	e002      	b.n	8002d34 <__clzdi2+0x14>
 8002d2e:	1c08      	adds	r0, r1, #0
 8002d30:	f7ff ffd8 	bl	8002ce4 <__clzsi2>
 8002d34:	bd10      	pop	{r4, pc}
 8002d36:	46c0      	nop			; (mov r8, r8)

08002d38 <Send_BOS_Message>:
 *New private function [inside SendMessageFromPort() ] for sending BOS Messages.
 *instead of writePxDMAMutex (the previous function)
 */

HAL_StatusTypeDef Send_BOS_Message(uint8_t port, uint8_t* buffer, uint16_t n, uint32_t mutexTimeout)
{
 8002d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	0006      	movs	r6, r0
 8002d3e:	000f      	movs	r7, r1
 8002d40:	0015      	movs	r5, r2
 8002d42:	001c      	movs	r4, r3
	HAL_StatusTypeDef result =HAL_ERROR;

	if(GetUart(port) != NULL){
 8002d44:	f00a fc8e 	bl	800d664 <GetUart>
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	d020      	beq.n	8002d8e <Send_BOS_Message+0x56>
		/* Wait for the mutex to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK){
 8002d4c:	00b3      	lsls	r3, r6, #2
 8002d4e:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <Send_BOS_Message+0x68>)
 8002d50:	5898      	ldr	r0, [r3, r2]
 8002d52:	0021      	movs	r1, r4
 8002d54:	f00a fe44 	bl	800d9e0 <osSemaphoreWait>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d103      	bne.n	8002d64 <Send_BOS_Message+0x2c>
			for(uint8_t i=0;i<n;i++)
 8002d5c:	2400      	movs	r4, #0
	HAL_StatusTypeDef result =HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	e010      	b.n	8002d86 <Send_BOS_Message+0x4e>
 8002d64:	2301      	movs	r3, #1
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	e013      	b.n	8002d92 <Send_BOS_Message+0x5a>
			{
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002d6a:	0030      	movs	r0, r6
 8002d6c:	f00a fc7a 	bl	800d664 <GetUart>
 8002d70:	2201      	movs	r2, #1
 8002d72:	0039      	movs	r1, r7
 8002d74:	f00f f849 	bl	8011e0a <HAL_UART_Transmit_IT>
 8002d78:	9001      	str	r0, [sp, #4]
				buffer++;
 8002d7a:	3701      	adds	r7, #1
				//Delay_us(500);
				Delay_ms(2);
 8002d7c:	2002      	movs	r0, #2
 8002d7e:	f00c fd0b 	bl	800f798 <HAL_Delay>
			for(uint8_t i=0;i<n;i++)
 8002d82:	3401      	adds	r4, #1
 8002d84:	b2e4      	uxtb	r4, r4
 8002d86:	b2a3      	uxth	r3, r4
 8002d88:	42ab      	cmp	r3, r5
 8002d8a:	d3ee      	bcc.n	8002d6a <Send_BOS_Message+0x32>
 8002d8c:	e001      	b.n	8002d92 <Send_BOS_Message+0x5a>
	HAL_StatusTypeDef result =HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	9301      	str	r3, [sp, #4]
			}
		}
	}
	Delay_ms(10);// Delay Between Sending Two Messages.
 8002d92:	200a      	movs	r0, #10
 8002d94:	f00c fd00 	bl	800f798 <HAL_Delay>
	return result;
}
 8002d98:	9801      	ldr	r0, [sp, #4]
 8002d9a:	b003      	add	sp, #12
 8002d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	200068cc 	.word	0x200068cc

08002da4 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002da8:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <LoadROtopology+0x88>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002dae:	4a20      	ldr	r2, [pc, #128]	; (8002e30 <LoadROtopology+0x8c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00b      	beq.n	8002dcc <LoadROtopology+0x28>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002db4:	0a1a      	lsrs	r2, r3, #8
 8002db6:	491f      	ldr	r1, [pc, #124]	; (8002e34 <LoadROtopology+0x90>)
 8002db8:	700a      	strb	r2, [r1, #0]
		if(N == 0)
 8002dba:	d102      	bne.n	8002dc2 <LoadROtopology+0x1e>
			N =1;
 8002dbc:	000a      	movs	r2, r1
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8002dc2:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <LoadROtopology+0x94>)
 8002dc4:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002dc6:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8002dc8:	2002      	movs	r0, #2
		for(uint8_t i =1; i <= N; i++){
 8002dca:	e023      	b.n	8002e14 <LoadROtopology+0x70>
		N =1;
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <LoadROtopology+0x90>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002dd2:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <LoadROtopology+0x94>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002dd8:	20fa      	movs	r0, #250	; 0xfa
 8002dda:	e024      	b.n	8002e26 <LoadROtopology+0x82>
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <LoadROtopology+0x88>)
 8002dde:	18c3      	adds	r3, r0, r3
 8002de0:	1e65      	subs	r5, r4, #1
 8002de2:	466a      	mov	r2, sp
 8002de4:	79d1      	ldrb	r1, [r2, #7]
 8002de6:	881e      	ldrh	r6, [r3, #0]
 8002de8:	00ab      	lsls	r3, r5, #2
 8002dea:	195b      	adds	r3, r3, r5
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	195b      	adds	r3, r3, r5
 8002df0:	18cb      	adds	r3, r1, r3
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4911      	ldr	r1, [pc, #68]	; (8002e3c <LoadROtopology+0x98>)
 8002df6:	52ce      	strh	r6, [r1, r3]
				add +=2;
 8002df8:	3002      	adds	r0, #2
 8002dfa:	b280      	uxth	r0, r0
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002dfc:	79d3      	ldrb	r3, [r2, #7]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	71d3      	strb	r3, [r2, #7]
 8002e04:	466b      	mov	r3, sp
 8002e06:	3307      	adds	r3, #7
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b0a      	cmp	r3, #10
 8002e0e:	d9e5      	bls.n	8002ddc <LoadROtopology+0x38>
		for(uint8_t i =1; i <= N; i++){
 8002e10:	3401      	adds	r4, #1
 8002e12:	b2e4      	uxtb	r4, r4
 8002e14:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <LoadROtopology+0x90>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	42a3      	cmp	r3, r4
 8002e1a:	d303      	bcc.n	8002e24 <LoadROtopology+0x80>
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002e1c:	466b      	mov	r3, sp
 8002e1e:	2200      	movs	r2, #0
 8002e20:	71da      	strb	r2, [r3, #7]
 8002e22:	e7ef      	b.n	8002e04 <LoadROtopology+0x60>
			}
		}
	}
	
	return result;
 8002e24:	2000      	movs	r0, #0
}
 8002e26:	b002      	add	sp, #8
 8002e28:	bd70      	pop	{r4, r5, r6, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	0801d800 	.word	0x0801d800
 8002e30:	0000ffff 	.word	0x0000ffff
 8002e34:	20000008 	.word	0x20000008
 8002e38:	20000a98 	.word	0x20000a98
 8002e3c:	20000ed4 	.word	0x20000ed4

08002e40 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002e40:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002e42:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002e44:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002e46:	e001      	b.n	8002e4c <LoadEEportsDir+0xc>
 8002e48:	3401      	adds	r4, #1
 8002e4a:	b2e4      	uxtb	r4, r4
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <LoadEEportsDir+0x30>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	42a3      	cmp	r3, r4
 8002e52:	d30b      	bcc.n	8002e6c <LoadEEportsDir+0x2c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002e54:	1e61      	subs	r1, r4, #1
 8002e56:	0049      	lsls	r1, r1, #1
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <LoadEEportsDir+0x34>)
 8002e5a:	18c9      	adds	r1, r1, r3
 8002e5c:	1c60      	adds	r0, r4, #1
 8002e5e:	f008 f9e3 	bl	800b228 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002e62:	1ca3      	adds	r3, r4, #2
 8002e64:	2b1b      	cmp	r3, #27
 8002e66:	ddef      	ble.n	8002e48 <LoadEEportsDir+0x8>
			result =BOS_ERR_EEPROM;
 8002e68:	250a      	movs	r5, #10
 8002e6a:	e7ed      	b.n	8002e48 <LoadEEportsDir+0x8>
	}
	
	return result;
}
 8002e6c:	0028      	movs	r0, r5
 8002e6e:	bd70      	pop	{r4, r5, r6, pc}
 8002e70:	20000008 	.word	0x20000008
 8002e74:	20006d58 	.word	0x20006d58

08002e78 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e7a:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e7c:	466b      	mov	r3, sp
 8002e7e:	2200      	movs	r2, #0
 8002e80:	80da      	strh	r2, [r3, #6]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e82:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 8002e84:	2500      	movs	r5, #0
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e86:	e023      	b.n	8002ed0 <LoadEEalias+0x58>
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e88:	466b      	mov	r3, sp
 8002e8a:	1d9f      	adds	r7, r3, #6
 8002e8c:	0028      	movs	r0, r5
 8002e8e:	301c      	adds	r0, #28
 8002e90:	b280      	uxth	r0, r0
 8002e92:	0039      	movs	r1, r7
 8002e94:	f008 f9c8 	bl	800b228 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002e98:	8839      	ldrh	r1, [r7, #0]
 8002e9a:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <LoadEEalias+0x6c>)
 8002e9c:	00b3      	lsls	r3, r6, #2
 8002e9e:	199f      	adds	r7, r3, r6
 8002ea0:	0078      	lsls	r0, r7, #1
 8002ea2:	1810      	adds	r0, r2, r0
 8002ea4:	5501      	strb	r1, [r0, r4]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002ea6:	1e67      	subs	r7, r4, #1
 8002ea8:	0a09      	lsrs	r1, r1, #8
 8002eaa:	199b      	adds	r3, r3, r6
 8002eac:	0058      	lsls	r0, r3, #1
 8002eae:	1812      	adds	r2, r2, r0
 8002eb0:	55d1      	strb	r1, [r2, r7]
			add++;
 8002eb2:	3501      	adds	r5, #1
 8002eb4:	b2ad      	uxth	r5, r5
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002eb6:	3402      	adds	r4, #2
 8002eb8:	b2e4      	uxtb	r4, r4
 8002eba:	2c09      	cmp	r4, #9
 8002ebc:	d9e4      	bls.n	8002e88 <LoadEEalias+0x10>
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002ebe:	00b3      	lsls	r3, r6, #2
 8002ec0:	199b      	adds	r3, r3, r6
 8002ec2:	005a      	lsls	r2, r3, #1
 8002ec4:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <LoadEEalias+0x6c>)
 8002ec6:	189b      	adds	r3, r3, r2
 8002ec8:	2200      	movs	r2, #0
 8002eca:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002ecc:	3601      	adds	r6, #1
 8002ece:	b2f6      	uxtb	r6, r6
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <LoadEEalias+0x70>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	42b3      	cmp	r3, r6
 8002ed6:	d301      	bcc.n	8002edc <LoadEEalias+0x64>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002ed8:	2401      	movs	r4, #1
 8002eda:	e7ee      	b.n	8002eba <LoadEEalias+0x42>
	}
	
	return result;
}
 8002edc:	2000      	movs	r0, #0
 8002ede:	b003      	add	sp, #12
 8002ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	20000dc4 	.word	0x20000dc4
 8002ee8:	20000008 	.word	0x20000008

08002eec <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eee:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002ef0:	466b      	mov	r3, sp
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002ef6:	2400      	movs	r4, #0
	uint16_t add =0, temp =0;
 8002ef8:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 8002efa:	e00c      	b.n	8002f16 <LoadEEgroup+0x2a>
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002efc:	4921      	ldr	r1, [pc, #132]	; (8002f84 <LoadEEgroup+0x98>)
 8002efe:	0062      	lsls	r2, r4, #1
 8002f00:	3104      	adds	r1, #4
 8002f02:	1889      	adds	r1, r1, r2
 8002f04:	0028      	movs	r0, r5
 8002f06:	30cb      	adds	r0, #203	; 0xcb
 8002f08:	b280      	uxth	r0, r0
 8002f0a:	f008 f98d 	bl	800b228 <EE_ReadVariable>
		add++;
 8002f0e:	3501      	adds	r5, #1
 8002f10:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002f12:	3401      	adds	r4, #1
 8002f14:	b2e4      	uxtb	r4, r4
 8002f16:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <LoadEEgroup+0x9c>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	42a3      	cmp	r3, r4
 8002f1c:	d8ee      	bhi.n	8002efc <LoadEEgroup+0x10>
	}
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002f1e:	2600      	movs	r6, #0
 8002f20:	e028      	b.n	8002f74 <LoadEEgroup+0x88>
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002f22:	466b      	mov	r3, sp
 8002f24:	1d9f      	adds	r7, r3, #6
 8002f26:	0028      	movs	r0, r5
 8002f28:	3099      	adds	r0, #153	; 0x99
 8002f2a:	b280      	uxth	r0, r0
 8002f2c:	0039      	movs	r1, r7
 8002f2e:	f008 f97b 	bl	800b228 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002f32:	8838      	ldrh	r0, [r7, #0]
 8002f34:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <LoadEEgroup+0x98>)
 8002f36:	2738      	movs	r7, #56	; 0x38
 8002f38:	00b1      	lsls	r1, r6, #2
 8002f3a:	198a      	adds	r2, r1, r6
 8002f3c:	0052      	lsls	r2, r2, #1
 8002f3e:	189a      	adds	r2, r3, r2
 8002f40:	1912      	adds	r2, r2, r4
 8002f42:	55d0      	strb	r0, [r2, r7]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002f44:	1e62      	subs	r2, r4, #1
 8002f46:	4694      	mov	ip, r2
 8002f48:	0a00      	lsrs	r0, r0, #8
 8002f4a:	198a      	adds	r2, r1, r6
 8002f4c:	0051      	lsls	r1, r2, #1
 8002f4e:	185b      	adds	r3, r3, r1
 8002f50:	4463      	add	r3, ip
 8002f52:	55d8      	strb	r0, [r3, r7]
			add++;
 8002f54:	3501      	adds	r5, #1
 8002f56:	b2ad      	uxth	r5, r5
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f58:	3402      	adds	r4, #2
 8002f5a:	b2e4      	uxtb	r4, r4
 8002f5c:	2c09      	cmp	r4, #9
 8002f5e:	d9e0      	bls.n	8002f22 <LoadEEgroup+0x36>
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002f60:	00b2      	lsls	r2, r6, #2
 8002f62:	1992      	adds	r2, r2, r6
 8002f64:	0051      	lsls	r1, r2, #1
 8002f66:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <LoadEEgroup+0x98>)
 8002f68:	185b      	adds	r3, r3, r1
 8002f6a:	3341      	adds	r3, #65	; 0x41
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002f70:	3601      	adds	r6, #1
 8002f72:	b2f6      	uxtb	r6, r6
 8002f74:	2e09      	cmp	r6, #9
 8002f76:	d801      	bhi.n	8002f7c <LoadEEgroup+0x90>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f78:	2401      	movs	r4, #1
 8002f7a:	e7ef      	b.n	8002f5c <LoadEEgroup+0x70>
	}
	
	return result;
}
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	b003      	add	sp, #12
 8002f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	20000a98 	.word	0x20000a98
 8002f88:	20000008 	.word	0x20000008

08002f8c <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f90:	210e      	movs	r1, #14
 8002f92:	4469      	add	r1, sp
 8002f94:	2300      	movs	r3, #0
 8002f96:	800b      	strh	r3, [r1, #0]
 8002f98:	aa03      	add	r2, sp, #12
 8002f9a:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f9c:	20e4      	movs	r0, #228	; 0xe4
 8002f9e:	f008 f943 	bl	800b228 <EE_ReadVariable>
	if(!status1){
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d000      	beq.n	8002fa8 <LoadEEstreams+0x1c>
 8002fa6:	e076      	b.n	8003096 <LoadEEstreams+0x10a>
		direction =(uint8_t )temp1;
 8002fa8:	230e      	movs	r3, #14
 8002faa:	446b      	add	r3, sp
 8002fac:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002fae:	210e      	movs	r1, #14
 8002fb0:	4469      	add	r1, sp
 8002fb2:	20e5      	movs	r0, #229	; 0xe5
 8002fb4:	f008 f938 	bl	800b228 <EE_ReadVariable>
 8002fb8:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002fba:	a903      	add	r1, sp, #12
 8002fbc:	20e6      	movs	r0, #230	; 0xe6
 8002fbe:	f008 f933 	bl	800b228 <EE_ReadVariable>
	if(!status1 && !status2){
 8002fc2:	4304      	orrs	r4, r0
 8002fc4:	b2a4      	uxth	r4, r4
 8002fc6:	2c00      	cmp	r4, #0
 8002fc8:	d000      	beq.n	8002fcc <LoadEEstreams+0x40>
 8002fca:	e066      	b.n	800309a <LoadEEstreams+0x10e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002fcc:	230e      	movs	r3, #14
 8002fce:	446b      	add	r3, sp
 8002fd0:	881d      	ldrh	r5, [r3, #0]
 8002fd2:	042d      	lsls	r5, r5, #16
 8002fd4:	ab03      	add	r3, sp, #12
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002fda:	210e      	movs	r1, #14
 8002fdc:	4469      	add	r1, sp
 8002fde:	20e7      	movs	r0, #231	; 0xe7
 8002fe0:	f008 f922 	bl	800b228 <EE_ReadVariable>
 8002fe4:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002fe6:	a903      	add	r1, sp, #12
 8002fe8:	20e8      	movs	r0, #232	; 0xe8
 8002fea:	f008 f91d 	bl	800b228 <EE_ReadVariable>
	if(!status1 && !status2){
 8002fee:	4304      	orrs	r4, r0
 8002ff0:	b2a4      	uxth	r4, r4
 8002ff2:	2c00      	cmp	r4, #0
 8002ff4:	d153      	bne.n	800309e <LoadEEstreams+0x112>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8002ff6:	230e      	movs	r3, #14
 8002ff8:	446b      	add	r3, sp
 8002ffa:	881c      	ldrh	r4, [r3, #0]
 8002ffc:	0424      	lsls	r4, r4, #16
 8002ffe:	ab03      	add	r3, sp, #12
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8003004:	210e      	movs	r1, #14
 8003006:	4469      	add	r1, sp
 8003008:	20e9      	movs	r0, #233	; 0xe9
 800300a:	f008 f90d 	bl	800b228 <EE_ReadVariable>
	if(!status1){
 800300e:	2800      	cmp	r0, #0
 8003010:	d106      	bne.n	8003020 <LoadEEstreams+0x94>
		src1 =(uint8_t )(temp1 >> 8);
 8003012:	230e      	movs	r3, #14
 8003014:	446b      	add	r3, sp
 8003016:	881a      	ldrh	r2, [r3, #0]
 8003018:	0a11      	lsrs	r1, r2, #8
 800301a:	4b2c      	ldr	r3, [pc, #176]	; (80030cc <LoadEEstreams+0x140>)
 800301c:	7719      	strb	r1, [r3, #28]
		dst1 =(uint8_t )temp1;
 800301e:	775a      	strb	r2, [r3, #29]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8003020:	210e      	movs	r1, #14
 8003022:	4469      	add	r1, sp
 8003024:	20ea      	movs	r0, #234	; 0xea
 8003026:	f008 f8ff 	bl	800b228 <EE_ReadVariable>
	if(!status1){
 800302a:	2800      	cmp	r0, #0
 800302c:	d106      	bne.n	800303c <LoadEEstreams+0xb0>
		src2 =(uint8_t )(temp1 >> 8);
 800302e:	230e      	movs	r3, #14
 8003030:	446b      	add	r3, sp
 8003032:	881a      	ldrh	r2, [r3, #0]
 8003034:	0a11      	lsrs	r1, r2, #8
 8003036:	4b25      	ldr	r3, [pc, #148]	; (80030cc <LoadEEstreams+0x140>)
 8003038:	7799      	strb	r1, [r3, #30]
		dst2 =(uint8_t )temp1;
 800303a:	77da      	strb	r2, [r3, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 800303c:	210e      	movs	r1, #14
 800303e:	4469      	add	r1, sp
 8003040:	20eb      	movs	r0, #235	; 0xeb
 8003042:	f008 f8f1 	bl	800b228 <EE_ReadVariable>
	if(!status1){
 8003046:	2800      	cmp	r0, #0
 8003048:	d108      	bne.n	800305c <LoadEEstreams+0xd0>
		src3 =(uint8_t )(temp1 >> 8);
 800304a:	230e      	movs	r3, #14
 800304c:	446b      	add	r3, sp
 800304e:	881a      	ldrh	r2, [r3, #0]
 8003050:	0a10      	lsrs	r0, r2, #8
 8003052:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <LoadEEstreams+0x140>)
 8003054:	2120      	movs	r1, #32
 8003056:	5458      	strb	r0, [r3, r1]
		dst3 =(uint8_t )temp1;
 8003058:	3101      	adds	r1, #1
 800305a:	545a      	strb	r2, [r3, r1]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 800305c:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <LoadEEstreams+0x140>)
 800305e:	7f1b      	ldrb	r3, [r3, #28]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <LoadEEstreams+0xe0>
 8003064:	4a19      	ldr	r2, [pc, #100]	; (80030cc <LoadEEstreams+0x140>)
 8003066:	7f52      	ldrb	r2, [r2, #29]
 8003068:	2a00      	cmp	r2, #0
 800306a:	d11a      	bne.n	80030a2 <LoadEEstreams+0x116>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 800306c:	4b17      	ldr	r3, [pc, #92]	; (80030cc <LoadEEstreams+0x140>)
 800306e:	7f9b      	ldrb	r3, [r3, #30]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <LoadEEstreams+0xf0>
 8003074:	4a15      	ldr	r2, [pc, #84]	; (80030cc <LoadEEstreams+0x140>)
 8003076:	7fd2      	ldrb	r2, [r2, #31]
 8003078:	2a00      	cmp	r2, #0
 800307a:	d119      	bne.n	80030b0 <LoadEEstreams+0x124>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 800307c:	4a13      	ldr	r2, [pc, #76]	; (80030cc <LoadEEstreams+0x140>)
 800307e:	2320      	movs	r3, #32
 8003080:	5cd3      	ldrb	r3, [r2, r3]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d004      	beq.n	8003090 <LoadEEstreams+0x104>
 8003086:	0011      	movs	r1, r2
 8003088:	2221      	movs	r2, #33	; 0x21
 800308a:	5c8a      	ldrb	r2, [r1, r2]
 800308c:	2a00      	cmp	r2, #0
 800308e:	d116      	bne.n	80030be <LoadEEstreams+0x132>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003090:	2000      	movs	r0, #0
 8003092:	b004      	add	sp, #16
 8003094:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t direction =0;
 8003096:	2600      	movs	r6, #0
 8003098:	e789      	b.n	8002fae <LoadEEstreams+0x22>
	uint32_t count =0, timeout =0;
 800309a:	2500      	movs	r5, #0
 800309c:	e79d      	b.n	8002fda <LoadEEstreams+0x4e>
 800309e:	2400      	movs	r4, #0
 80030a0:	e7b0      	b.n	8003004 <LoadEEstreams+0x78>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 80030a2:	9200      	str	r2, [sp, #0]
 80030a4:	0022      	movs	r2, r4
 80030a6:	0029      	movs	r1, r5
 80030a8:	0030      	movs	r0, r6
 80030aa:	f004 fd53 	bl	8007b54 <SetupDMAStreams>
 80030ae:	e7dd      	b.n	800306c <LoadEEstreams+0xe0>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 80030b0:	9200      	str	r2, [sp, #0]
 80030b2:	0022      	movs	r2, r4
 80030b4:	0029      	movs	r1, r5
 80030b6:	0030      	movs	r0, r6
 80030b8:	f004 fd4c 	bl	8007b54 <SetupDMAStreams>
 80030bc:	e7de      	b.n	800307c <LoadEEstreams+0xf0>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 80030be:	9200      	str	r2, [sp, #0]
 80030c0:	0022      	movs	r2, r4
 80030c2:	0029      	movs	r1, r5
 80030c4:	0030      	movs	r0, r6
 80030c6:	f004 fd45 	bl	8007b54 <SetupDMAStreams>
 80030ca:	e7e1      	b.n	8003090 <LoadEEstreams+0x104>
 80030cc:	20000b18 	.word	0x20000b18

080030d0 <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 80030d0:	b510      	push	{r4, lr}
 80030d2:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80030d4:	208a      	movs	r0, #138	; 0x8a
 80030d6:	466b      	mov	r3, sp
 80030d8:	1d99      	adds	r1, r3, #6
 80030da:	0040      	lsls	r0, r0, #1
 80030dc:	f008 f8a4 	bl	800b228 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d000      	beq.n	80030e6 <LoadEEparams+0x16>
 80030e4:	e077      	b.n	80031d6 <LoadEEparams+0x106>
		BOSMessaging.response =(uint8_t )temp1;
 80030e6:	466b      	mov	r3, sp
 80030e8:	3306      	adds	r3, #6
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	4a56      	ldr	r2, [pc, #344]	; (8003248 <LoadEEparams+0x178>)
 80030ee:	7013      	strb	r3, [r2, #0]
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	7053      	strb	r3, [r2, #1]
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030f4:	208e      	movs	r0, #142	; 0x8e
 80030f6:	466b      	mov	r3, sp
 80030f8:	1d99      	adds	r1, r3, #6
 80030fa:	0040      	lsls	r0, r0, #1
 80030fc:	f008 f894 	bl	800b228 <EE_ReadVariable>

	if(!status1){
 8003100:	2800      	cmp	r0, #0
 8003102:	d000      	beq.n	8003106 <LoadEEparams+0x36>
 8003104:	e06e      	b.n	80031e4 <LoadEEparams+0x114>
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003106:	466b      	mov	r3, sp
 8003108:	3306      	adds	r3, #6
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	0bd9      	lsrs	r1, r3, #15
 800310e:	4a4e      	ldr	r2, [pc, #312]	; (8003248 <LoadEEparams+0x178>)
 8003110:	7111      	strb	r1, [r2, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 8003112:	085b      	lsrs	r3, r3, #1
 8003114:	80d3      	strh	r3, [r2, #6]
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003116:	2016      	movs	r0, #22
 8003118:	466b      	mov	r3, sp
 800311a:	1d99      	adds	r1, r3, #6
 800311c:	30ff      	adds	r0, #255	; 0xff
 800311e:	f008 f883 	bl	800b228 <EE_ReadVariable>
	if(!status1)
 8003122:	2800      	cmp	r0, #0
 8003124:	d000      	beq.n	8003128 <LoadEEparams+0x58>
 8003126:	e064      	b.n	80031f2 <LoadEEparams+0x122>
		BOS.buttons.debounce =temp1;
 8003128:	466b      	mov	r3, sp
 800312a:	88da      	ldrh	r2, [r3, #6]
 800312c:	4b47      	ldr	r3, [pc, #284]	; (800324c <LoadEEparams+0x17c>)
 800312e:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003130:	208b      	movs	r0, #139	; 0x8b
 8003132:	466b      	mov	r3, sp
 8003134:	1d99      	adds	r1, r3, #6
 8003136:	0040      	lsls	r0, r0, #1
 8003138:	f008 f876 	bl	800b228 <EE_ReadVariable>
	if(!status1)
 800313c:	2800      	cmp	r0, #0
 800313e:	d15d      	bne.n	80031fc <LoadEEparams+0x12c>
		BOS.buttons.singleClickTime =temp1;
 8003140:	466b      	mov	r3, sp
 8003142:	88da      	ldrh	r2, [r3, #6]
 8003144:	4b41      	ldr	r3, [pc, #260]	; (800324c <LoadEEparams+0x17c>)
 8003146:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003148:	2018      	movs	r0, #24
 800314a:	466b      	mov	r3, sp
 800314c:	1d99      	adds	r1, r3, #6
 800314e:	30ff      	adds	r0, #255	; 0xff
 8003150:	f008 f86a 	bl	800b228 <EE_ReadVariable>
	if(!status1){
 8003154:	2800      	cmp	r0, #0
 8003156:	d156      	bne.n	8003206 <LoadEEparams+0x136>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 8003158:	466b      	mov	r3, sp
 800315a:	3306      	adds	r3, #6
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	4a3b      	ldr	r2, [pc, #236]	; (800324c <LoadEEparams+0x17c>)
 8003160:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003166:	208c      	movs	r0, #140	; 0x8c
 8003168:	466b      	mov	r3, sp
 800316a:	1d99      	adds	r1, r3, #6
 800316c:	0040      	lsls	r0, r0, #1
 800316e:	f008 f85b 	bl	800b228 <EE_ReadVariable>
 8003172:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003174:	201a      	movs	r0, #26
 8003176:	a901      	add	r1, sp, #4
 8003178:	30ff      	adds	r0, #255	; 0xff
 800317a:	f008 f855 	bl	800b228 <EE_ReadVariable>
	if(!status1 && !status2){
 800317e:	4304      	orrs	r4, r0
 8003180:	b2a4      	uxth	r4, r4
 8003182:	2c00      	cmp	r4, #0
 8003184:	d146      	bne.n	8003214 <LoadEEparams+0x144>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 8003186:	466b      	mov	r3, sp
 8003188:	3306      	adds	r3, #6
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	aa01      	add	r2, sp, #4
 800318e:	8812      	ldrh	r2, [r2, #0]
 8003190:	0412      	lsls	r2, r2, #16
 8003192:	4313      	orrs	r3, r2
 8003194:	4a2d      	ldr	r2, [pc, #180]	; (800324c <LoadEEparams+0x17c>)
 8003196:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003198:	208d      	movs	r0, #141	; 0x8d
 800319a:	466b      	mov	r3, sp
 800319c:	1d99      	adds	r1, r3, #6
 800319e:	0040      	lsls	r0, r0, #1
 80031a0:	f008 f842 	bl	800b228 <EE_ReadVariable>
	if(!status1){
 80031a4:	2800      	cmp	r0, #0
 80031a6:	d144      	bne.n	8003232 <LoadEEparams+0x162>
		BOS.daylightsaving =(int8_t )temp1;
 80031a8:	466b      	mov	r3, sp
 80031aa:	3306      	adds	r3, #6
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	4a27      	ldr	r2, [pc, #156]	; (800324c <LoadEEparams+0x17c>)
 80031b0:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 80031b6:	201c      	movs	r0, #28
 80031b8:	466b      	mov	r3, sp
 80031ba:	1d99      	adds	r1, r3, #6
 80031bc:	30ff      	adds	r0, #255	; 0xff
 80031be:	f008 f833 	bl	800b228 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d03b      	beq.n	800323e <LoadEEparams+0x16e>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 80031c6:	4a22      	ldr	r2, [pc, #136]	; (8003250 <LoadEEparams+0x180>)
 80031c8:	2326      	movs	r3, #38	; 0x26
 80031ca:	5cd2      	ldrb	r2, [r2, r3]
 80031cc:	4b1f      	ldr	r3, [pc, #124]	; (800324c <LoadEEparams+0x17c>)
 80031ce:	769a      	strb	r2, [r3, #26]
	}
	
	return result;
}
 80031d0:	2000      	movs	r0, #0
 80031d2:	b002      	add	sp, #8
 80031d4:	bd10      	pop	{r4, pc}
		BOSMessaging.response =BOSMessging_default.response;
 80031d6:	4a1e      	ldr	r2, [pc, #120]	; (8003250 <LoadEEparams+0x180>)
 80031d8:	7911      	ldrb	r1, [r2, #4]
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <LoadEEparams+0x178>)
 80031dc:	7019      	strb	r1, [r3, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 80031de:	7952      	ldrb	r2, [r2, #5]
 80031e0:	705a      	strb	r2, [r3, #1]
 80031e2:	e787      	b.n	80030f4 <LoadEEparams+0x24>
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80031e4:	4a1a      	ldr	r2, [pc, #104]	; (8003250 <LoadEEparams+0x180>)
 80031e6:	7a11      	ldrb	r1, [r2, #8]
 80031e8:	4b17      	ldr	r3, [pc, #92]	; (8003248 <LoadEEparams+0x178>)
 80031ea:	7119      	strb	r1, [r3, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 80031ec:	8952      	ldrh	r2, [r2, #10]
 80031ee:	80da      	strh	r2, [r3, #6]
 80031f0:	e791      	b.n	8003116 <LoadEEparams+0x46>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80031f2:	4b17      	ldr	r3, [pc, #92]	; (8003250 <LoadEEparams+0x180>)
 80031f4:	899a      	ldrh	r2, [r3, #12]
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <LoadEEparams+0x17c>)
 80031f8:	801a      	strh	r2, [r3, #0]
 80031fa:	e799      	b.n	8003130 <LoadEEparams+0x60>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <LoadEEparams+0x180>)
 80031fe:	89da      	ldrh	r2, [r3, #14]
 8003200:	4b12      	ldr	r3, [pc, #72]	; (800324c <LoadEEparams+0x17c>)
 8003202:	805a      	strh	r2, [r3, #2]
 8003204:	e7a0      	b.n	8003148 <LoadEEparams+0x78>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 8003206:	4a12      	ldr	r2, [pc, #72]	; (8003250 <LoadEEparams+0x180>)
 8003208:	7c11      	ldrb	r1, [r2, #16]
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <LoadEEparams+0x17c>)
 800320c:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 800320e:	7c52      	ldrb	r2, [r2, #17]
 8003210:	715a      	strb	r2, [r3, #5]
 8003212:	e7a8      	b.n	8003166 <LoadEEparams+0x96>
	else if(CLI_LOW_Baudrate_Flag)
 8003214:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <LoadEEparams+0x184>)
 8003216:	2322      	movs	r3, #34	; 0x22
 8003218:	5cd3      	ldrb	r3, [r2, r3]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d004      	beq.n	8003228 <LoadEEparams+0x158>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <LoadEEparams+0x17c>)
 8003220:	22e1      	movs	r2, #225	; 0xe1
 8003222:	0252      	lsls	r2, r2, #9
 8003224:	609a      	str	r2, [r3, #8]
 8003226:	e7b7      	b.n	8003198 <LoadEEparams+0xc8>
		BOS.clibaudrate =BOS_default.clibaudrate;
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <LoadEEparams+0x180>)
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	4b07      	ldr	r3, [pc, #28]	; (800324c <LoadEEparams+0x17c>)
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	e7b2      	b.n	8003198 <LoadEEparams+0xc8>
		BOS.hourformat =24;
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <LoadEEparams+0x17c>)
 8003234:	2218      	movs	r2, #24
 8003236:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003238:	2200      	movs	r2, #0
 800323a:	731a      	strb	r2, [r3, #12]
 800323c:	e7bb      	b.n	80031b6 <LoadEEparams+0xe6>
		BOS.disableCLI =(uint8_t )temp1;
 800323e:	466b      	mov	r3, sp
 8003240:	799a      	ldrb	r2, [r3, #6]
 8003242:	4b02      	ldr	r3, [pc, #8]	; (800324c <LoadEEparams+0x17c>)
 8003244:	769a      	strb	r2, [r3, #26]
 8003246:	e7c3      	b.n	80031d0 <LoadEEparams+0x100>
 8003248:	200067c8 	.word	0x200067c8
 800324c:	20006848 	.word	0x20006848
 8003250:	20000008 	.word	0x20000008
 8003254:	20000b18 	.word	0x20000b18

08003258 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800325a:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 800325c:	231e      	movs	r3, #30
 800325e:	446b      	add	r3, sp
 8003260:	2200      	movs	r2, #0
 8003262:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003264:	2400      	movs	r4, #0
 8003266:	e001      	b.n	800326c <LoadEEbuttons+0x14>
 8003268:	3401      	adds	r4, #1
 800326a:	b2e4      	uxtb	r4, r4
 800326c:	2c05      	cmp	r4, #5
 800326e:	d854      	bhi.n	800331a <LoadEEbuttons+0xc2>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003270:	0025      	movs	r5, r4
 8003272:	353b      	adds	r5, #59	; 0x3b
 8003274:	00ad      	lsls	r5, r5, #2
 8003276:	b2ad      	uxth	r5, r5
 8003278:	211e      	movs	r1, #30
 800327a:	4469      	add	r1, sp
 800327c:	0028      	movs	r0, r5
 800327e:	f007 ffd3 	bl	800b228 <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 8003282:	2800      	cmp	r0, #0
 8003284:	d1f0      	bne.n	8003268 <LoadEEbuttons+0x10>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 8003286:	231e      	movs	r3, #30
 8003288:	446b      	add	r3, sp
 800328a:	8819      	ldrh	r1, [r3, #0]
 800328c:	0a0b      	lsrs	r3, r1, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 800328e:	0918      	lsrs	r0, r3, #4
 8003290:	1c62      	adds	r2, r4, #1
 8003292:	4290      	cmp	r0, r2
 8003294:	d1e8      	bne.n	8003268 <LoadEEbuttons+0x10>
 8003296:	200f      	movs	r0, #15
 8003298:	4003      	ands	r3, r0
 800329a:	d0e5      	beq.n	8003268 <LoadEEbuttons+0x10>
			{
				button[i + 1].type =temp8 & 0x0F;
 800329c:	00d7      	lsls	r7, r2, #3
 800329e:	18ba      	adds	r2, r7, r2
 80032a0:	4f1f      	ldr	r7, [pc, #124]	; (8003320 <LoadEEbuttons+0xc8>)
 80032a2:	18bf      	adds	r7, r7, r2
 80032a4:	707b      	strb	r3, [r7, #1]
				button[i + 1].events =(uint8_t )temp16;
 80032a6:	7239      	strb	r1, [r7, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 80032a8:	261e      	movs	r6, #30
 80032aa:	446e      	add	r6, sp
 80032ac:	1c68      	adds	r0, r5, #1
 80032ae:	b280      	uxth	r0, r0
 80032b0:	0031      	movs	r1, r6
 80032b2:	f007 ffb9 	bl	800b228 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80032b6:	8833      	ldrh	r3, [r6, #0]
 80032b8:	0a1a      	lsrs	r2, r3, #8
 80032ba:	70ba      	strb	r2, [r7, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 80032bc:	717b      	strb	r3, [r7, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80032be:	1ca8      	adds	r0, r5, #2
 80032c0:	b280      	uxth	r0, r0
 80032c2:	0031      	movs	r1, r6
 80032c4:	f007 ffb0 	bl	800b228 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80032c8:	8833      	ldrh	r3, [r6, #0]
 80032ca:	0a1a      	lsrs	r2, r3, #8
 80032cc:	70fa      	strb	r2, [r7, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 80032ce:	71bb      	strb	r3, [r7, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80032d0:	3503      	adds	r5, #3
 80032d2:	b2a8      	uxth	r0, r5
 80032d4:	0031      	movs	r1, r6
 80032d6:	f007 ffa7 	bl	800b228 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80032da:	8833      	ldrh	r3, [r6, #0]
 80032dc:	0a1a      	lsrs	r2, r3, #8
 80032de:	713a      	strb	r2, [r7, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 80032e0:	71fb      	strb	r3, [r7, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 80032e2:	1c65      	adds	r5, r4, #1
 80032e4:	b2ed      	uxtb	r5, r5
 80032e6:	7878      	ldrb	r0, [r7, #1]
 80032e8:	0029      	movs	r1, r5
 80032ea:	f008 fc3f 	bl	800bb6c <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80032ee:	7a39      	ldrb	r1, [r7, #8]
 80032f0:	084a      	lsrs	r2, r1, #1
 80032f2:	78bb      	ldrb	r3, [r7, #2]
 80032f4:	2001      	movs	r0, #1
 80032f6:	4002      	ands	r2, r0
 80032f8:	4001      	ands	r1, r0
 80032fa:	2000      	movs	r0, #0
 80032fc:	9005      	str	r0, [sp, #20]
 80032fe:	79f8      	ldrb	r0, [r7, #7]
 8003300:	9004      	str	r0, [sp, #16]
 8003302:	79b8      	ldrb	r0, [r7, #6]
 8003304:	9003      	str	r0, [sp, #12]
 8003306:	7978      	ldrb	r0, [r7, #5]
 8003308:	9002      	str	r0, [sp, #8]
 800330a:	7938      	ldrb	r0, [r7, #4]
 800330c:	9001      	str	r0, [sp, #4]
 800330e:	78f8      	ldrb	r0, [r7, #3]
 8003310:	9000      	str	r0, [sp, #0]
 8003312:	0028      	movs	r0, r5
 8003314:	f008 fd44 	bl	800bda0 <SetButtonEvents>
 8003318:	e7a6      	b.n	8003268 <LoadEEbuttons+0x10>
			}
		}
	}
	
	return result;
}
 800331a:	2000      	movs	r0, #0
 800331c:	b009      	add	sp, #36	; 0x24
 800331e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003320:	200023a4 	.word	0x200023a4

08003324 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003326:	46d6      	mov	lr, sl
 8003328:	464f      	mov	r7, r9
 800332a:	b580      	push	{r7, lr}
 800332c:	b083      	sub	sp, #12
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 800332e:	2032      	movs	r0, #50	; 0x32
 8003330:	f00f faec 	bl	801290c <malloc>
 8003334:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 8003336:	d065      	beq.n	8003404 <LoadROsnippets+0xe0>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 8003338:	4b36      	ldr	r3, [pc, #216]	; (8003414 <LoadROsnippets+0xf0>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2bfe      	cmp	r3, #254	; 0xfe
 800333e:	d163      	bne.n	8003408 <LoadROsnippets+0xe4>
		return BOS_ERROR;
	
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003340:	2600      	movs	r6, #0
	int currentAdd = RO_MID_ADDRESS;
 8003342:	4c34      	ldr	r4, [pc, #208]	; (8003414 <LoadROsnippets+0xf0>)
 8003344:	e04b      	b.n	80033de <LoadROsnippets+0xba>
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 8003346:	7822      	ldrb	r2, [r4, #0]
 8003348:	54fa      	strb	r2, [r7, r3]
		for(i =0; i < sizeof(snippet_t); i++)
 800334a:	3301      	adds	r3, #1
 800334c:	b2db      	uxtb	r3, r3
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 800334e:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8003350:	2b13      	cmp	r3, #19
 8003352:	d9f8      	bls.n	8003346 <LoadROsnippets+0x22>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003354:	46b2      	mov	sl, r6
 8003356:	00b3      	lsls	r3, r6, #2
 8003358:	199b      	adds	r3, r3, r6
 800335a:	009a      	lsls	r2, r3, #2
 800335c:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <LoadROsnippets+0xf4>)
 800335e:	4691      	mov	r9, r2
 8003360:	4499      	add	r9, r3
 8003362:	1c79      	adds	r1, r7, #1
 8003364:	2214      	movs	r2, #20
 8003366:	4648      	mov	r0, r9
 8003368:	f00f fd1d 	bl	8012da6 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 800336c:	2214      	movs	r2, #20
 800336e:	2100      	movs	r1, #0
 8003370:	0038      	movs	r0, r7
 8003372:	f00f fd21 	bl	8012db8 <memset>
		i =0;
 8003376:	2500      	movs	r5, #0
		// Load commands until you get next 0xFE
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003378:	e003      	b.n	8003382 <LoadROsnippets+0x5e>
			snipBuffer[i] =*(uint8_t* )currentAdd;
 800337a:	557a      	strb	r2, [r7, r5]
			++currentAdd;
 800337c:	3401      	adds	r4, #1
			++i;
 800337e:	3501      	adds	r5, #1
 8003380:	b2ed      	uxtb	r5, r5
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003382:	9401      	str	r4, [sp, #4]
 8003384:	7822      	ldrb	r2, [r4, #0]
 8003386:	1c93      	adds	r3, r2, #2
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d901      	bls.n	8003392 <LoadROsnippets+0x6e>
 800338e:	2d31      	cmp	r5, #49	; 0x31
 8003390:	d9f3      	bls.n	800337a <LoadROsnippets+0x56>
		}
		if(snipBuffer[i - 1] != 0)
 8003392:	197b      	adds	r3, r7, r5
 8003394:	3b01      	subs	r3, #1
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <LoadROsnippets+0x7c>
			++i;	// String termination char was not recorded, then add one
 800339c:	3501      	adds	r5, #1
 800339e:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd =(char* )malloc(i);
 80033a0:	0028      	movs	r0, r5
 80033a2:	f00f fab3 	bl	801290c <malloc>
 80033a6:	4653      	mov	r3, sl
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4453      	add	r3, sl
 80033ac:	009a      	lsls	r2, r3, #2
 80033ae:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <LoadROsnippets+0xf4>)
 80033b0:	189b      	adds	r3, r3, r2
 80033b2:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 80033b4:	2800      	cmp	r0, #0
 80033b6:	d016      	beq.n	80033e6 <LoadROsnippets+0xc2>
			free(snipBuffer);
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
 80033b8:	002a      	movs	r2, r5
 80033ba:	0039      	movs	r1, r7
 80033bc:	f00f fcf3 	bl	8012da6 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 80033c0:	4a16      	ldr	r2, [pc, #88]	; (800341c <LoadROsnippets+0xf8>)
 80033c2:	7813      	ldrb	r3, [r2, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 80033c8:	002a      	movs	r2, r5
 80033ca:	2100      	movs	r1, #0
 80033cc:	0038      	movs	r0, r7
 80033ce:	f00f fcf3 	bl	8012db8 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 80033d2:	9b01      	ldr	r3, [sp, #4]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2bfe      	cmp	r3, #254	; 0xfe
 80033d8:	d10f      	bne.n	80033fa <LoadROsnippets+0xd6>
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 80033da:	3601      	adds	r6, #1
 80033dc:	b2f6      	uxtb	r6, r6
 80033de:	2e04      	cmp	r6, #4
 80033e0:	d80b      	bhi.n	80033fa <LoadROsnippets+0xd6>
		for(i =0; i < sizeof(snippet_t); i++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	e7b4      	b.n	8003350 <LoadROsnippets+0x2c>
			memset(&snippets[s],0,sizeof(snippet_t));
 80033e6:	2214      	movs	r2, #20
 80033e8:	2100      	movs	r1, #0
 80033ea:	4648      	mov	r0, r9
 80033ec:	f00f fce4 	bl	8012db8 <memset>
			free(snipBuffer);
 80033f0:	0038      	movs	r0, r7
 80033f2:	f00f fa95 	bl	8012920 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80033f6:	200e      	movs	r0, #14
 80033f8:	e007      	b.n	800340a <LoadROsnippets+0xe6>
			break;
	}
	
	free(snipBuffer);
 80033fa:	0038      	movs	r0, r7
 80033fc:	f00f fa90 	bl	8012920 <free>
	return BOS_OK;
 8003400:	2000      	movs	r0, #0
 8003402:	e002      	b.n	800340a <LoadROsnippets+0xe6>
		return BOS_MEM_FULL;
 8003404:	20fb      	movs	r0, #251	; 0xfb
 8003406:	e000      	b.n	800340a <LoadROsnippets+0xe6>
		return BOS_ERROR;
 8003408:	20ff      	movs	r0, #255	; 0xff
}
 800340a:	b003      	add	sp, #12
 800340c:	bc0c      	pop	{r2, r3}
 800340e:	4691      	mov	r9, r2
 8003410:	469a      	mov	sl, r3
 8003412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003414:	0801dc00 	.word	0x0801dc00
 8003418:	20006864 	.word	0x20006864
 800341c:	200016d4 	.word	0x200016d4

08003420 <LoadEEvars>:
void LoadEEvars(void){
 8003420:	b510      	push	{r4, lr}
	LoadROtopology();
 8003422:	f7ff fcbf 	bl	8002da4 <LoadROtopology>
	LoadEEportsDir();
 8003426:	f7ff fd0b 	bl	8002e40 <LoadEEportsDir>
	LoadEEalias();
 800342a:	f7ff fd25 	bl	8002e78 <LoadEEalias>
	LoadEEgroup();
 800342e:	f7ff fd5d 	bl	8002eec <LoadEEgroup>
	LoadEEstreams();
 8003432:	f7ff fdab 	bl	8002f8c <LoadEEstreams>
	LoadEEparams();
 8003436:	f7ff fe4b 	bl	80030d0 <LoadEEparams>
	LoadEEbuttons();
 800343a:	f7ff ff0d 	bl	8003258 <LoadEEbuttons>
	LoadROsnippets();
 800343e:	f7ff ff71 	bl	8003324 <LoadROsnippets>
}
 8003442:	bd10      	pop	{r4, pc}

08003444 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003444:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003446:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003448:	2600      	movs	r6, #0
	for(uint8_t i =1; i <= N; i++){
 800344a:	e005      	b.n	8003458 <SaveEEportsDir+0x14>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800344c:	1c60      	adds	r0, r4, #1
 800344e:	f007 ff9d 	bl	800b38c <EE_WriteVariable>
 8003452:	e00c      	b.n	800346e <SaveEEportsDir+0x2a>
	for(uint8_t i =1; i <= N; i++){
 8003454:	3401      	adds	r4, #1
 8003456:	b2e4      	uxtb	r4, r4
 8003458:	4b08      	ldr	r3, [pc, #32]	; (800347c <SaveEEportsDir+0x38>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	42a3      	cmp	r3, r4
 800345e:	d30b      	bcc.n	8003478 <SaveEEportsDir+0x34>
		if(arrayPortsDir[i - 1])
 8003460:	0025      	movs	r5, r4
 8003462:	1e63      	subs	r3, r4, #1
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4a06      	ldr	r2, [pc, #24]	; (8003480 <SaveEEportsDir+0x3c>)
 8003468:	5a99      	ldrh	r1, [r3, r2]
 800346a:	2900      	cmp	r1, #0
 800346c:	d1ee      	bne.n	800344c <SaveEEportsDir+0x8>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800346e:	3502      	adds	r5, #2
 8003470:	2d1b      	cmp	r5, #27
 8003472:	ddef      	ble.n	8003454 <SaveEEportsDir+0x10>
			result =BOS_ERR_EEPROM;
 8003474:	260a      	movs	r6, #10
 8003476:	e7ed      	b.n	8003454 <SaveEEportsDir+0x10>
	}
	
	return result;
}
 8003478:	0030      	movs	r0, r6
 800347a:	bd70      	pop	{r4, r5, r6, pc}
 800347c:	20000008 	.word	0x20000008
 8003480:	20006d58 	.word	0x20006d58

08003484 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003486:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 8003488:	2500      	movs	r5, #0
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800348a:	e017      	b.n	80034bc <SaveEEalias+0x38>
	    {
		if(moduleAlias[i][0]){
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 800348c:	1e60      	subs	r0, r4, #1
 800348e:	00ba      	lsls	r2, r7, #2
 8003490:	19d2      	adds	r2, r2, r7
 8003492:	0051      	lsls	r1, r2, #1
 8003494:	4b11      	ldr	r3, [pc, #68]	; (80034dc <SaveEEalias+0x58>)
 8003496:	185b      	adds	r3, r3, r1
 8003498:	5c19      	ldrb	r1, [r3, r0]
 800349a:	0209      	lsls	r1, r1, #8
 800349c:	5d1b      	ldrb	r3, [r3, r4]
 800349e:	18c9      	adds	r1, r1, r3
 80034a0:	b289      	uxth	r1, r1
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80034a2:	0028      	movs	r0, r5
 80034a4:	301c      	adds	r0, #28
 80034a6:	b280      	uxth	r0, r0
 80034a8:	f007 ff70 	bl	800b38c <EE_WriteVariable>
				add++;
 80034ac:	3501      	adds	r5, #1
 80034ae:	b2ad      	uxth	r5, r5
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034b0:	3402      	adds	r4, #2
 80034b2:	b2e4      	uxtb	r4, r4
 80034b4:	2c09      	cmp	r4, #9
 80034b6:	d9e9      	bls.n	800348c <SaveEEalias+0x8>
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80034b8:	3601      	adds	r6, #1
 80034ba:	b2f6      	uxtb	r6, r6
 80034bc:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <SaveEEalias+0x5c>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	42b3      	cmp	r3, r6
 80034c2:	d309      	bcc.n	80034d8 <SaveEEalias+0x54>
		if(moduleAlias[i][0]){
 80034c4:	0037      	movs	r7, r6
 80034c6:	00b3      	lsls	r3, r6, #2
 80034c8:	199b      	adds	r3, r3, r6
 80034ca:	005a      	lsls	r2, r3, #1
 80034cc:	4b03      	ldr	r3, [pc, #12]	; (80034dc <SaveEEalias+0x58>)
 80034ce:	5cd3      	ldrb	r3, [r2, r3]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f1      	beq.n	80034b8 <SaveEEalias+0x34>
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034d4:	2401      	movs	r4, #1
 80034d6:	e7ed      	b.n	80034b4 <SaveEEalias+0x30>
			}
		}
	}
	
	return result;
}
 80034d8:	2000      	movs	r0, #0
 80034da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034dc:	20000dc4 	.word	0x20000dc4
 80034e0:	20000008 	.word	0x20000008

080034e4 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80034e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e6:	46de      	mov	lr, fp
 80034e8:	4657      	mov	r7, sl
 80034ea:	464e      	mov	r6, r9
 80034ec:	4645      	mov	r5, r8
 80034ee:	b5e0      	push	{r5, r6, r7, lr}
 80034f0:	000f      	movs	r7, r1
 80034f2:	0016      	movs	r6, r2
 80034f4:	4699      	mov	r9, r3
 80034f6:	ab0a      	add	r3, sp, #40	; 0x28
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	469b      	mov	fp, r3
 80034fc:	ab0b      	add	r3, sp, #44	; 0x2c
 80034fe:	781d      	ldrb	r5, [r3, #0]
 8003500:	ab0c      	add	r3, sp, #48	; 0x30
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	469a      	mov	sl, r3
 8003506:	ab0d      	add	r3, sp, #52	; 0x34
 8003508:	781c      	ldrb	r4, [r3, #0]
 800350a:	ab0e      	add	r3, sp, #56	; 0x38
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003510:	b281      	uxth	r1, r0
 8003512:	20e4      	movs	r0, #228	; 0xe4
 8003514:	f007 ff3a 	bl	800b38c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003518:	0a39      	lsrs	r1, r7, #8
 800351a:	b289      	uxth	r1, r1
 800351c:	20e5      	movs	r0, #229	; 0xe5
 800351e:	f007 ff35 	bl	800b38c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 8003522:	b2b9      	uxth	r1, r7
 8003524:	20e6      	movs	r0, #230	; 0xe6
 8003526:	f007 ff31 	bl	800b38c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 800352a:	0a31      	lsrs	r1, r6, #8
 800352c:	b289      	uxth	r1, r1
 800352e:	20e7      	movs	r0, #231	; 0xe7
 8003530:	f007 ff2c 	bl	800b38c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003534:	b2b1      	uxth	r1, r6
 8003536:	20e8      	movs	r0, #232	; 0xe8
 8003538:	f007 ff28 	bl	800b38c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800353c:	464b      	mov	r3, r9
 800353e:	0219      	lsls	r1, r3, #8
 8003540:	4459      	add	r1, fp
 8003542:	b289      	uxth	r1, r1
 8003544:	20e9      	movs	r0, #233	; 0xe9
 8003546:	f007 ff21 	bl	800b38c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 800354a:	022d      	lsls	r5, r5, #8
 800354c:	4455      	add	r5, sl
 800354e:	b2a9      	uxth	r1, r5
 8003550:	20ea      	movs	r0, #234	; 0xea
 8003552:	f007 ff1b 	bl	800b38c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8003556:	0224      	lsls	r4, r4, #8
 8003558:	4444      	add	r4, r8
 800355a:	b2a1      	uxth	r1, r4
 800355c:	20eb      	movs	r0, #235	; 0xeb
 800355e:	f007 ff15 	bl	800b38c <EE_WriteVariable>
	
	return result;
}
 8003562:	2000      	movs	r0, #0
 8003564:	bc3c      	pop	{r2, r3, r4, r5}
 8003566:	4690      	mov	r8, r2
 8003568:	4699      	mov	r9, r3
 800356a:	46a2      	mov	sl, r4
 800356c:	46ab      	mov	fp, r5
 800356e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003570 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 8003570:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003572:	4c1f      	ldr	r4, [pc, #124]	; (80035f0 <SaveEEparams+0x80>)
 8003574:	7863      	ldrb	r3, [r4, #1]
 8003576:	015b      	lsls	r3, r3, #5
 8003578:	7821      	ldrb	r1, [r4, #0]
 800357a:	4319      	orrs	r1, r3
 800357c:	208a      	movs	r0, #138	; 0x8a
 800357e:	0040      	lsls	r0, r0, #1
 8003580:	f007 ff04 	bl	800b38c <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 8003584:	7923      	ldrb	r3, [r4, #4]
 8003586:	03db      	lsls	r3, r3, #15
 8003588:	2206      	movs	r2, #6
 800358a:	5ea1      	ldrsh	r1, [r4, r2]
 800358c:	4319      	orrs	r1, r3
 800358e:	b289      	uxth	r1, r1
 8003590:	208e      	movs	r0, #142	; 0x8e
 8003592:	0040      	lsls	r0, r0, #1
 8003594:	f007 fefa 	bl	800b38c <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003598:	4c16      	ldr	r4, [pc, #88]	; (80035f4 <SaveEEparams+0x84>)
 800359a:	8821      	ldrh	r1, [r4, #0]
 800359c:	2016      	movs	r0, #22
 800359e:	30ff      	adds	r0, #255	; 0xff
 80035a0:	f007 fef4 	bl	800b38c <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 80035a4:	8861      	ldrh	r1, [r4, #2]
 80035a6:	208b      	movs	r0, #139	; 0x8b
 80035a8:	0040      	lsls	r0, r0, #1
 80035aa:	f007 feef 	bl	800b38c <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 80035ae:	7963      	ldrb	r3, [r4, #5]
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	7b21      	ldrb	r1, [r4, #12]
 80035b4:	4319      	orrs	r1, r3
 80035b6:	2018      	movs	r0, #24
 80035b8:	30ff      	adds	r0, #255	; 0xff
 80035ba:	f007 fee7 	bl	800b38c <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80035be:	8921      	ldrh	r1, [r4, #8]
 80035c0:	208c      	movs	r0, #140	; 0x8c
 80035c2:	0040      	lsls	r0, r0, #1
 80035c4:	f007 fee2 	bl	800b38c <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80035c8:	8961      	ldrh	r1, [r4, #10]
 80035ca:	201a      	movs	r0, #26
 80035cc:	30ff      	adds	r0, #255	; 0xff
 80035ce:	f007 fedd 	bl	800b38c <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80035d2:	7b63      	ldrb	r3, [r4, #13]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	7921      	ldrb	r1, [r4, #4]
 80035d8:	4319      	orrs	r1, r3
 80035da:	208d      	movs	r0, #141	; 0x8d
 80035dc:	0040      	lsls	r0, r0, #1
 80035de:	f007 fed5 	bl	800b38c <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 80035e2:	7ea1      	ldrb	r1, [r4, #26]
 80035e4:	201c      	movs	r0, #28
 80035e6:	30ff      	adds	r0, #255	; 0xff
 80035e8:	f007 fed0 	bl	800b38c <EE_WriteVariable>
	
	return result;
}
 80035ec:	2000      	movs	r0, #0
 80035ee:	bd10      	pop	{r4, pc}
 80035f0:	200067c8 	.word	0x200067c8
 80035f4:	20006848 	.word	0x20006848

080035f8 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 80035f8:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 80035fa:	2234      	movs	r2, #52	; 0x34
 80035fc:	2100      	movs	r1, #0
 80035fe:	480f      	ldr	r0, [pc, #60]	; (800363c <ClearEEportsDir+0x44>)
 8003600:	f00f fbda 	bl	8012db8 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 8003604:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003606:	2600      	movs	r6, #0
	for(uint8_t i =1; i <= N; i++){
 8003608:	e005      	b.n	8003616 <ClearEEportsDir+0x1e>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800360a:	1c60      	adds	r0, r4, #1
 800360c:	f007 febe 	bl	800b38c <EE_WriteVariable>
 8003610:	e00c      	b.n	800362c <ClearEEportsDir+0x34>
	for(uint8_t i =1; i <= N; i++){
 8003612:	3401      	adds	r4, #1
 8003614:	b2e4      	uxtb	r4, r4
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <ClearEEportsDir+0x48>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	42a3      	cmp	r3, r4
 800361c:	d30b      	bcc.n	8003636 <ClearEEportsDir+0x3e>
		if(arrayPortsDir[i - 1])
 800361e:	0025      	movs	r5, r4
 8003620:	1e63      	subs	r3, r4, #1
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4a05      	ldr	r2, [pc, #20]	; (800363c <ClearEEportsDir+0x44>)
 8003626:	5a99      	ldrh	r1, [r3, r2]
 8003628:	2900      	cmp	r1, #0
 800362a:	d1ee      	bne.n	800360a <ClearEEportsDir+0x12>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800362c:	3502      	adds	r5, #2
 800362e:	2d1b      	cmp	r5, #27
 8003630:	ddef      	ble.n	8003612 <ClearEEportsDir+0x1a>
			result =BOS_ERR_EEPROM;
 8003632:	260a      	movs	r6, #10
 8003634:	e7ed      	b.n	8003612 <ClearEEportsDir+0x1a>
	}
	
	return result;
}
 8003636:	0030      	movs	r0, r6
 8003638:	bd70      	pop	{r4, r5, r6, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	20006d58 	.word	0x20006d58
 8003640:	20000008 	.word	0x20000008

08003644 <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/
//TODO change loction of the API
// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 8003644:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <EE_FormatForFactoryReset+0x1c>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <EE_FormatForFactoryReset+0x20>)
 800364c:	429a      	cmp	r2, r3
 800364e:	d006      	beq.n	800365e <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	}
	else{
		if(EE_Format() == HAL_OK){
 8003650:	f007 feb2 	bl	800b3b8 <EE_Format>
 8003654:	2800      	cmp	r0, #0
 8003656:	d102      	bne.n	800365e <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003658:	4b01      	ldr	r3, [pc, #4]	; (8003660 <EE_FormatForFactoryReset+0x1c>)
 800365a:	4a02      	ldr	r2, [pc, #8]	; (8003664 <EE_FormatForFactoryReset+0x20>)
 800365c:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 800365e:	bd10      	pop	{r4, pc}
 8003660:	20007ff0 	.word	0x20007ff0
 8003664:	beefdead 	.word	0xbeefdead

08003668 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 8003668:	b570      	push	{r4, r5, r6, lr}
 800366a:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 800366c:	2512      	movs	r5, #18
 800366e:	446d      	add	r5, sp
 8003670:	ab04      	add	r3, sp, #16
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	ab07      	add	r3, sp, #28
 8003676:	002a      	movs	r2, r5
 8003678:	a908      	add	r1, sp, #32
 800367a:	2001      	movs	r0, #1
 800367c:	f008 f922 	bl	800b8c4 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003680:	ac03      	add	r4, sp, #12
 8003682:	9400      	str	r4, [sp, #0]
 8003684:	ab05      	add	r3, sp, #20
 8003686:	220e      	movs	r2, #14
 8003688:	446a      	add	r2, sp
 800368a:	a906      	add	r1, sp, #24
 800368c:	2002      	movs	r0, #2
 800368e:	f008 f919 	bl	800b8c4 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003692:	2301      	movs	r3, #1
 8003694:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003696:	2600      	movs	r6, #0
 8003698:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 800369a:	882b      	ldrh	r3, [r5, #0]
 800369c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 800369e:	a909      	add	r1, sp, #36	; 0x24
 80036a0:	9808      	ldr	r0, [sp, #32]
 80036a2:	f00d fadf 	bl	8010c64 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036a6:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036a8:	2302      	movs	r3, #2
 80036aa:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80036ac:	8823      	ldrh	r3, [r4, #0]
 80036ae:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 80036b0:	a909      	add	r1, sp, #36	; 0x24
 80036b2:	9805      	ldr	r0, [sp, #20]
 80036b4:	f00d fad6 	bl	8010c64 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80036b8:	8829      	ldrh	r1, [r5, #0]
 80036ba:	2200      	movs	r2, #0
 80036bc:	9808      	ldr	r0, [sp, #32]
 80036be:	f00d fc22 	bl	8010f06 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80036c2:	2005      	movs	r0, #5
 80036c4:	f009 fdd6 	bl	800d274 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036c8:	8821      	ldrh	r1, [r4, #0]
 80036ca:	9805      	ldr	r0, [sp, #20]
 80036cc:	f00d fc14 	bl	8010ef8 <HAL_GPIO_ReadPin>
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d002      	beq.n	80036da <IsLowerCLIbaud+0x72>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 80036d4:	2000      	movs	r0, #0
}
 80036d6:	b00e      	add	sp, #56	; 0x38
 80036d8:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 80036da:	2312      	movs	r3, #18
 80036dc:	446b      	add	r3, sp
 80036de:	8819      	ldrh	r1, [r3, #0]
 80036e0:	2201      	movs	r2, #1
 80036e2:	9808      	ldr	r0, [sp, #32]
 80036e4:	f00d fc0f 	bl	8010f06 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 80036e8:	2005      	movs	r0, #5
 80036ea:	f009 fdc3 	bl	800d274 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 80036ee:	ab03      	add	r3, sp, #12
 80036f0:	8819      	ldrh	r1, [r3, #0]
 80036f2:	9805      	ldr	r0, [sp, #20]
 80036f4:	f00d fc00 	bl	8010ef8 <HAL_GPIO_ReadPin>
 80036f8:	2801      	cmp	r0, #1
 80036fa:	d0ec      	beq.n	80036d6 <IsLowerCLIbaud+0x6e>
	return 0;
 80036fc:	2000      	movs	r0, #0
 80036fe:	e7ea      	b.n	80036d6 <IsLowerCLIbaud+0x6e>

08003700 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	0005      	movs	r5, r0
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 8003704:	2400      	movs	r4, #0
 8003706:	2c00      	cmp	r4, #0
 8003708:	d001      	beq.n	800370e <IsModuleParameter+0xe>
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
			return i + 1;
	}
	return 0;
 800370a:	2000      	movs	r0, #0
}
 800370c:	bd70      	pop	{r4, r5, r6, pc}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 800370e:	0063      	lsls	r3, r4, #1
 8003710:	191b      	adds	r3, r3, r4
 8003712:	009a      	lsls	r2, r3, #2
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <IsModuleParameter+0x30>)
 8003716:	189b      	adds	r3, r3, r2
 8003718:	6899      	ldr	r1, [r3, #8]
 800371a:	0028      	movs	r0, r5
 800371c:	f7fc fcf2 	bl	8000104 <strcmp>
 8003720:	2800      	cmp	r0, #0
 8003722:	d002      	beq.n	800372a <IsModuleParameter+0x2a>
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 8003724:	3401      	adds	r4, #1
 8003726:	b2e4      	uxtb	r4, r4
 8003728:	e7ed      	b.n	8003706 <IsModuleParameter+0x6>
			return i + 1;
 800372a:	3401      	adds	r4, #1
 800372c:	b2e0      	uxtb	r0, r4
 800372e:	e7ed      	b.n	800370c <IsModuleParameter+0xc>
 8003730:	20000094 	.word	0x20000094

08003734 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003734:	b570      	push	{r4, r5, r6, lr}
 8003736:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003738:	2500      	movs	r5, #0
 800373a:	e001      	b.n	8003740 <IsMathOperator+0xc>
 800373c:	3501      	adds	r5, #1
 800373e:	b2ed      	uxtb	r5, r5
 8003740:	2d05      	cmp	r5, #5
 8003742:	d825      	bhi.n	8003790 <IsMathOperator+0x5c>
		if(!strcmp(string,"="))
 8003744:	4918      	ldr	r1, [pc, #96]	; (80037a8 <IsMathOperator+0x74>)
 8003746:	0020      	movs	r0, r4
 8003748:	f7fc fcdc 	bl	8000104 <strcmp>
 800374c:	2800      	cmp	r0, #0
 800374e:	d021      	beq.n	8003794 <IsMathOperator+0x60>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 8003750:	4916      	ldr	r1, [pc, #88]	; (80037ac <IsMathOperator+0x78>)
 8003752:	0020      	movs	r0, r4
 8003754:	f7fc fcd6 	bl	8000104 <strcmp>
 8003758:	2800      	cmp	r0, #0
 800375a:	d01d      	beq.n	8003798 <IsMathOperator+0x64>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 800375c:	4914      	ldr	r1, [pc, #80]	; (80037b0 <IsMathOperator+0x7c>)
 800375e:	0020      	movs	r0, r4
 8003760:	f7fc fcd0 	bl	8000104 <strcmp>
 8003764:	2800      	cmp	r0, #0
 8003766:	d019      	beq.n	800379c <IsMathOperator+0x68>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 8003768:	4912      	ldr	r1, [pc, #72]	; (80037b4 <IsMathOperator+0x80>)
 800376a:	0020      	movs	r0, r4
 800376c:	f7fc fcca 	bl	8000104 <strcmp>
 8003770:	2800      	cmp	r0, #0
 8003772:	d015      	beq.n	80037a0 <IsMathOperator+0x6c>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003774:	4910      	ldr	r1, [pc, #64]	; (80037b8 <IsMathOperator+0x84>)
 8003776:	0020      	movs	r0, r4
 8003778:	f7fc fcc4 	bl	8000104 <strcmp>
 800377c:	2800      	cmp	r0, #0
 800377e:	d011      	beq.n	80037a4 <IsMathOperator+0x70>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003780:	490e      	ldr	r1, [pc, #56]	; (80037bc <IsMathOperator+0x88>)
 8003782:	0020      	movs	r0, r4
 8003784:	f7fc fcbe 	bl	8000104 <strcmp>
 8003788:	2800      	cmp	r0, #0
 800378a:	d1d7      	bne.n	800373c <IsMathOperator+0x8>
			return MATH_NOT_EQUAL;
 800378c:	2006      	movs	r0, #6
 800378e:	e000      	b.n	8003792 <IsMathOperator+0x5e>
	}
	return 0;
 8003790:	2000      	movs	r0, #0
}
 8003792:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 8003794:	2001      	movs	r0, #1
 8003796:	e7fc      	b.n	8003792 <IsMathOperator+0x5e>
			return MATH_GREATER;
 8003798:	2002      	movs	r0, #2
 800379a:	e7fa      	b.n	8003792 <IsMathOperator+0x5e>
			return MATH_SMALLER;
 800379c:	2003      	movs	r0, #3
 800379e:	e7f8      	b.n	8003792 <IsMathOperator+0x5e>
			return MATH_GREATER_EQUAL;
 80037a0:	2004      	movs	r0, #4
 80037a2:	e7f6      	b.n	8003792 <IsMathOperator+0x5e>
			return MATH_SMALLER_EQUAL;
 80037a4:	2005      	movs	r0, #5
 80037a6:	e7f4      	b.n	8003792 <IsMathOperator+0x5e>
 80037a8:	08017d14 	.word	0x08017d14
 80037ac:	08017d18 	.word	0x08017d18
 80037b0:	08017d1c 	.word	0x08017d1c
 80037b4:	08017d20 	.word	0x08017d20
 80037b8:	08017d24 	.word	0x08017d24
 80037bc:	08017d28 	.word	0x08017d28

080037c0 <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 80037c0:	b510      	push	{r4, lr}
		else Output_Port_Array[i-1] = FindRoute(myID, i);
	}
#endif

	/* Initialize and configure RTC */
	RTC_Init();
 80037c2:	f009 fc0f 	bl	800cfe4 <RTC_Init>
	GetTimeDate();
 80037c6:	f009 fcad 	bl	800d124 <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 80037ca:	f007 fe59 	bl	800b480 <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 80037ce:	f008 f843 	bl	800b858 <GPIO_Init>
	DMA_Init();
 80037d2:	f006 fdfb 	bl	800a3cc <DMA_Init>
	TIM_USEC_Init();
 80037d6:	f009 fcd9 	bl	800d18c <TIM_USEC_Init>
	CRC_Init();
 80037da:	f007 fc33 	bl	800b044 <CRC_Init>
	TIM_MSEC_Init();
 80037de:	f009 fd07 	bl	800d1f0 <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 80037e2:	f008 f8db 	bl	800b99c <IsFactoryReset>
 80037e6:	2800      	cmp	r0, #0
 80037e8:	d112      	bne.n	8003810 <BOS_Init+0x50>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 80037ea:	f7ff ff3d 	bl	8003668 <IsLowerCLIbaud>
 80037ee:	2800      	cmp	r0, #0
 80037f0:	d053      	beq.n	800389a <BOS_Init+0xda>
		CLI_LOW_Baudrate_Flag =1;
 80037f2:	4a35      	ldr	r2, [pc, #212]	; (80038c8 <BOS_Init+0x108>)
 80037f4:	2322      	movs	r3, #34	; 0x22
 80037f6:	2101      	movs	r1, #1
 80037f8:	54d1      	strb	r1, [r2, r3]
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80037fa:	2032      	movs	r0, #50	; 0x32
 80037fc:	f009 fd3a 	bl	800d274 <StartMilliDelay>
		Module_Peripheral_Init();
 8003800:	f006 fd1e 	bl	800a240 <Module_Peripheral_Init>
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003804:	4b31      	ldr	r3, [pc, #196]	; (80038cc <BOS_Init+0x10c>)
 8003806:	22e1      	movs	r2, #225	; 0xe1
 8003808:	0252      	lsls	r2, r2, #9
 800380a:	609a      	str	r2, [r3, #8]
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800380c:	2401      	movs	r4, #1
 800380e:	e011      	b.n	8003834 <BOS_Init+0x74>
		EE_FormatForFactoryReset();
 8003810:	f7ff ff18 	bl	8003644 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003814:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003818:	4b2d      	ldr	r3, [pc, #180]	; (80038d0 <BOS_Init+0x110>)
 800381a:	4a2e      	ldr	r2, [pc, #184]	; (80038d4 <BOS_Init+0x114>)
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	e7fd      	b.n	8003822 <BOS_Init+0x62>
			UpdateBaudrate(port,BOS.clibaudrate);
 8003826:	4b29      	ldr	r3, [pc, #164]	; (80038cc <BOS_Init+0x10c>)
 8003828:	6899      	ldr	r1, [r3, #8]
 800382a:	0020      	movs	r0, r4
 800382c:	f009 ff86 	bl	800d73c <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003830:	3401      	adds	r4, #1
 8003832:	b2e4      	uxtb	r4, r4
 8003834:	2c05      	cmp	r4, #5
 8003836:	d9f6      	bls.n	8003826 <BOS_Init+0x66>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
		Module_Peripheral_Init();
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 8003838:	f7ff fdf2 	bl	8003420 <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 800383c:	f00a f80a 	bl	800d854 <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 8003840:	f007 fb68 	bl	800af14 <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
 8003844:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <BOS_Init+0x118>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d02c      	beq.n	80038a6 <BOS_Init+0xe6>
		IND_ON();
		Delay_ms_no_rtos(500);IND_OFF();
	}
	else /* Non-native module */
	{
		IND_ON();
 800384c:	2490      	movs	r4, #144	; 0x90
 800384e:	05e4      	lsls	r4, r4, #23
 8003850:	2201      	movs	r2, #1
 8003852:	2140      	movs	r1, #64	; 0x40
 8003854:	0020      	movs	r0, r4
 8003856:	f00d fb56 	bl	8010f06 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 800385a:	20fa      	movs	r0, #250	; 0xfa
 800385c:	0040      	lsls	r0, r0, #1
 800385e:	f009 fd09 	bl	800d274 <StartMilliDelay>
		IND_OFF();
 8003862:	2200      	movs	r2, #0
 8003864:	2140      	movs	r1, #64	; 0x40
 8003866:	0020      	movs	r0, r4
 8003868:	f00d fb4d 	bl	8010f06 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 800386c:	2064      	movs	r0, #100	; 0x64
 800386e:	f009 fd01 	bl	800d274 <StartMilliDelay>
		IND_ON();
 8003872:	2201      	movs	r2, #1
 8003874:	2140      	movs	r1, #64	; 0x40
 8003876:	0020      	movs	r0, r4
 8003878:	f00d fb45 	bl	8010f06 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 800387c:	2064      	movs	r0, #100	; 0x64
 800387e:	f009 fcf9 	bl	800d274 <StartMilliDelay>
		IND_OFF();
 8003882:	2200      	movs	r2, #0
 8003884:	2140      	movs	r1, #64	; 0x40
 8003886:	0020      	movs	r0, r4
 8003888:	f00d fb3d 	bl	8010f06 <HAL_GPIO_WritePin>
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 800388c:	f003 fe08 	bl	80074a0 <ResetUartORE>
	
	BOS_initialized =1;
 8003890:	4a0d      	ldr	r2, [pc, #52]	; (80038c8 <BOS_Init+0x108>)
 8003892:	2323      	movs	r3, #35	; 0x23
 8003894:	2101      	movs	r1, #1
 8003896:	54d1      	strb	r1, [r2, r3]
}
 8003898:	bd10      	pop	{r4, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 800389a:	2032      	movs	r0, #50	; 0x32
 800389c:	f009 fcea 	bl	800d274 <StartMilliDelay>
		Module_Peripheral_Init();
 80038a0:	f006 fcce 	bl	800a240 <Module_Peripheral_Init>
 80038a4:	e7c8      	b.n	8003838 <BOS_Init+0x78>
		IND_ON();
 80038a6:	2490      	movs	r4, #144	; 0x90
 80038a8:	05e4      	lsls	r4, r4, #23
 80038aa:	2201      	movs	r2, #1
 80038ac:	2140      	movs	r1, #64	; 0x40
 80038ae:	0020      	movs	r0, r4
 80038b0:	f00d fb29 	bl	8010f06 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 80038b4:	20fa      	movs	r0, #250	; 0xfa
 80038b6:	0040      	lsls	r0, r0, #1
 80038b8:	f009 fcdc 	bl	800d274 <StartMilliDelay>
 80038bc:	2200      	movs	r2, #0
 80038be:	2140      	movs	r1, #64	; 0x40
 80038c0:	0020      	movs	r0, r4
 80038c2:	f00d fb20 	bl	8010f06 <HAL_GPIO_WritePin>
 80038c6:	e7e1      	b.n	800388c <BOS_Init+0xcc>
 80038c8:	20000b18 	.word	0x20000b18
 80038cc:	20006848 	.word	0x20006848
 80038d0:	e000ed00 	.word	0xe000ed00
 80038d4:	05fa0004 	.word	0x05fa0004
 80038d8:	20000a98 	.word	0x20000a98

080038dc <Module_Init>:
void Module_Init(void){
 80038dc:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80038de:	f00b ff3d 	bl	800f75c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80038e2:	f006 fae3 	bl	8009eac <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 80038e6:	f7ff ff6b 	bl	80037c0 <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 80038ea:	f003 fdf9 	bl	80074e0 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80038ee:	f00a f854 	bl	800d99a <osKernelStart>
}
 80038f2:	bd10      	pop	{r4, pc}

080038f4 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 80038f4:	b530      	push	{r4, r5, lr}
 80038f6:	b083      	sub	sp, #12
 80038f8:	0005      	movs	r5, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 80038fa:	2401      	movs	r4, #1
 80038fc:	e001      	b.n	8003902 <ExploreNeighbors+0xe>
 80038fe:	3401      	adds	r4, #1
 8003900:	b2e4      	uxtb	r4, r4
 8003902:	2c05      	cmp	r4, #5
 8003904:	d816      	bhi.n	8003934 <ExploreNeighbors+0x40>
		if(port != ignore){
 8003906:	42ac      	cmp	r4, r5
 8003908:	d0f9      	beq.n	80038fe <ExploreNeighbors+0xa>
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 800390a:	4b0c      	ldr	r3, [pc, #48]	; (800393c <ExploreNeighbors+0x48>)
 800390c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800390e:	0a10      	lsrs	r0, r2, #8
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <ExploreNeighbors+0x4c>)
 8003912:	2124      	movs	r1, #36	; 0x24
 8003914:	5458      	strb	r0, [r3, r1]
			messageParams[1] =(uint8_t )myPN;
 8003916:	3324      	adds	r3, #36	; 0x24
 8003918:	705a      	strb	r2, [r3, #1]
			messageParams[2] =port;
 800391a:	709c      	strb	r4, [r3, #2]
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 800391c:	2303      	movs	r3, #3
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	3307      	adds	r3, #7
 8003922:	2200      	movs	r2, #0
 8003924:	2100      	movs	r1, #0
 8003926:	0020      	movs	r0, r4
 8003928:	f004 fa28 	bl	8007d7c <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 800392c:	200a      	movs	r0, #10
 800392e:	f00a f839 	bl	800d9a4 <osDelay>
 8003932:	e7e4      	b.n	80038fe <ExploreNeighbors+0xa>
		}
	}
	
	return result;
}
 8003934:	2000      	movs	r0, #0
 8003936:	b003      	add	sp, #12
 8003938:	bd30      	pop	{r4, r5, pc}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	20000008 	.word	0x20000008
 8003940:	20000b18 	.word	0x20000b18

08003944 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003946:	46de      	mov	lr, fp
 8003948:	4657      	mov	r7, sl
 800394a:	464e      	mov	r6, r9
 800394c:	4645      	mov	r5, r8
 800394e:	b5e0      	push	{r5, r6, r7, lr}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003954:	4b48      	ldr	r3, [pc, #288]	; (8003a78 <FindBroadcastRoutes+0x134>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	3307      	adds	r3, #7
 800395a:	08db      	lsrs	r3, r3, #3
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	466a      	mov	r2, sp
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	469d      	mov	sp, r3
 8003964:	466d      	mov	r5, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003966:	2300      	movs	r3, #0
 8003968:	e008      	b.n	800397c <FindBroadcastRoutes+0x38>
		modules[m] =0;
 800396a:	2100      	movs	r1, #0
 800396c:	54e9      	strb	r1, [r5, r3]
		bcastRoutes[m] =0;
 800396e:	005c      	lsls	r4, r3, #1
 8003970:	4a42      	ldr	r2, [pc, #264]	; (8003a7c <FindBroadcastRoutes+0x138>)
 8003972:	1912      	adds	r2, r2, r4
 8003974:	2454      	movs	r4, #84	; 0x54
 8003976:	5311      	strh	r1, [r2, r4]
	for(m =0; m < N; m++){
 8003978:	3301      	adds	r3, #1
 800397a:	b2db      	uxtb	r3, r3
 800397c:	4a3e      	ldr	r2, [pc, #248]	; (8003a78 <FindBroadcastRoutes+0x134>)
 800397e:	7812      	ldrb	r2, [r2, #0]
 8003980:	4293      	cmp	r3, r2
 8003982:	d3f2      	bcc.n	800396a <FindBroadcastRoutes+0x26>
	}
	modules[src - 1] =++level;					// Tag the source
 8003984:	3801      	subs	r0, #1
 8003986:	2301      	movs	r3, #1
 8003988:	542b      	strb	r3, [r5, r0]
	
	/* 2. Source module should send to all neighbors */

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
 800398a:	2201      	movs	r2, #1
 800398c:	e001      	b.n	8003992 <FindBroadcastRoutes+0x4e>
 800398e:	3201      	adds	r2, #1
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	2a06      	cmp	r2, #6
 8003994:	d81b      	bhi.n	80039ce <FindBroadcastRoutes+0x8a>
		if(array[src - 1][p]){
 8003996:	0083      	lsls	r3, r0, #2
 8003998:	181b      	adds	r3, r3, r0
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	181b      	adds	r3, r3, r0
 800399e:	189b      	adds	r3, r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4937      	ldr	r1, [pc, #220]	; (8003a80 <FindBroadcastRoutes+0x13c>)
 80039a4:	5a5b      	ldrh	r3, [r3, r1]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f1      	beq.n	800398e <FindBroadcastRoutes+0x4a>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80039aa:	1e51      	subs	r1, r2, #1
 80039ac:	2601      	movs	r6, #1
 80039ae:	408e      	lsls	r6, r1
 80039b0:	2154      	movs	r1, #84	; 0x54
 80039b2:	468c      	mov	ip, r1
 80039b4:	0044      	lsls	r4, r0, #1
 80039b6:	4931      	ldr	r1, [pc, #196]	; (8003a7c <FindBroadcastRoutes+0x138>)
 80039b8:	1909      	adds	r1, r1, r4
 80039ba:	4664      	mov	r4, ip
 80039bc:	5b0c      	ldrh	r4, [r1, r4]
 80039be:	4334      	orrs	r4, r6
 80039c0:	4666      	mov	r6, ip
 80039c2:	538c      	strh	r4, [r1, r6]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80039c4:	08db      	lsrs	r3, r3, #3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	2102      	movs	r1, #2
 80039ca:	54e9      	strb	r1, [r5, r3]
 80039cc:	e7df      	b.n	800398e <FindBroadcastRoutes+0x4a>
	++level;												// Move one level
 80039ce:	2302      	movs	r3, #2
 80039d0:	469b      	mov	fp, r3
	
	/* 3. Starting from source neighbors, check all other modules we haven't broadcasted-to yet, one by one */

	do{
		untaged =0;								// Reset the untaged counter
		++level;											// Move one level
 80039d2:	465e      	mov	r6, fp
 80039d4:	3601      	adds	r6, #1
 80039d6:	b2f3      	uxtb	r3, r6
 80039d8:	469b      	mov	fp, r3
		untaged =0;								// Reset the untaged counter
 80039da:	2300      	movs	r3, #0
 80039dc:	469c      	mov	ip, r3
		
		for(m =0; m < N; m++)					// Scan all modules in the list
 80039de:	2000      	movs	r0, #0
 80039e0:	e031      	b.n	8003a46 <FindBroadcastRoutes+0x102>
		    {
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 80039e2:	3201      	adds	r2, #1
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	2a06      	cmp	r2, #6
 80039e8:	d82b      	bhi.n	8003a42 <FindBroadcastRoutes+0xfe>
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 80039ea:	00a3      	lsls	r3, r4, #2
 80039ec:	191b      	adds	r3, r3, r4
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	191b      	adds	r3, r3, r4
 80039f2:	189b      	adds	r3, r3, r2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4922      	ldr	r1, [pc, #136]	; (8003a80 <FindBroadcastRoutes+0x13c>)
 80039f8:	5a5b      	ldrh	r3, [r3, r1]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f1      	beq.n	80039e2 <FindBroadcastRoutes+0x9e>
 80039fe:	08db      	lsrs	r3, r3, #3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	607b      	str	r3, [r7, #4]
 8003a04:	5ce9      	ldrb	r1, [r5, r3]
 8003a06:	2900      	cmp	r1, #0
 8003a08:	d1eb      	bne.n	80039e2 <FindBroadcastRoutes+0x9e>
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a0a:	0011      	movs	r1, r2
 8003a0c:	3901      	subs	r1, #1
 8003a0e:	2601      	movs	r6, #1
 8003a10:	408e      	lsls	r6, r1
 8003a12:	46b2      	mov	sl, r6
 8003a14:	2154      	movs	r1, #84	; 0x54
 8003a16:	4689      	mov	r9, r1
 8003a18:	0061      	lsls	r1, r4, #1
 8003a1a:	4e18      	ldr	r6, [pc, #96]	; (8003a7c <FindBroadcastRoutes+0x138>)
 8003a1c:	46b0      	mov	r8, r6
 8003a1e:	000b      	movs	r3, r1
 8003a20:	4443      	add	r3, r8
 8003a22:	464e      	mov	r6, r9
 8003a24:	5b9e      	ldrh	r6, [r3, r6]
 8003a26:	46b0      	mov	r8, r6
 8003a28:	4656      	mov	r6, sl
 8003a2a:	4641      	mov	r1, r8
 8003a2c:	430e      	orrs	r6, r1
 8003a2e:	4649      	mov	r1, r9
 8003a30:	525e      	strh	r6, [r3, r1]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003a32:	465b      	mov	r3, fp
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	546b      	strb	r3, [r5, r1]
						++untaged;
 8003a38:	4663      	mov	r3, ip
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	469c      	mov	ip, r3
 8003a40:	e7cf      	b.n	80039e2 <FindBroadcastRoutes+0x9e>
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a42:	3001      	adds	r0, #1
 8003a44:	b2c0      	uxtb	r0, r0
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <FindBroadcastRoutes+0x134>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	4298      	cmp	r0, r3
 8003a4c:	d207      	bcs.n	8003a5e <FindBroadcastRoutes+0x11a>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003a4e:	0004      	movs	r4, r0
 8003a50:	5c2a      	ldrb	r2, [r5, r0]
 8003a52:	465b      	mov	r3, fp
 8003a54:	3b01      	subs	r3, #1
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d1f3      	bne.n	8003a42 <FindBroadcastRoutes+0xfe>
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	e7c3      	b.n	80039e6 <FindBroadcastRoutes+0xa2>
					}
				}
			}
		}
	} while(untaged);
 8003a5e:	4663      	mov	r3, ip
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1b6      	bne.n	80039d2 <FindBroadcastRoutes+0x8e>
	
	return result;
}
 8003a64:	2000      	movs	r0, #0
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b003      	add	sp, #12
 8003a6a:	bc3c      	pop	{r2, r3, r4, r5}
 8003a6c:	4690      	mov	r8, r2
 8003a6e:	4699      	mov	r9, r3
 8003a70:	46a2      	mov	sl, r4
 8003a72:	46ab      	mov	fp, r5
 8003a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	20000008 	.word	0x20000008
 8003a7c:	20000b18 	.word	0x20000b18
 8003a80:	20000ed4 	.word	0x20000ed4

08003a84 <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 8003a84:	b570      	push	{r4, r5, r6, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 8003a86:	780b      	ldrb	r3, [r1, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d103      	bne.n	8003a94 <minArr+0x10>
		smallest =arr[0];
 8003a8c:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
		if((arr[i] < smallest) && !Q[i]){
			smallest =arr[i];
 8003a8e:	2300      	movs	r3, #0
 8003a90:	2600      	movs	r6, #0
 8003a92:	e002      	b.n	8003a9a <minArr+0x16>
	uint8_t smallest =0xFF;
 8003a94:	24ff      	movs	r4, #255	; 0xff
 8003a96:	e7fa      	b.n	8003a8e <minArr+0xa>
	for(int i =0; i < N; i++){
 8003a98:	3301      	adds	r3, #1
 8003a9a:	4a07      	ldr	r2, [pc, #28]	; (8003ab8 <minArr+0x34>)
 8003a9c:	7812      	ldrb	r2, [r2, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	dd08      	ble.n	8003ab4 <minArr+0x30>
		if((arr[i] < smallest) && !Q[i]){
 8003aa2:	5cc2      	ldrb	r2, [r0, r3]
 8003aa4:	42a2      	cmp	r2, r4
 8003aa6:	d2f7      	bcs.n	8003a98 <minArr+0x14>
 8003aa8:	5ccd      	ldrb	r5, [r1, r3]
 8003aaa:	2d00      	cmp	r5, #0
 8003aac:	d1f4      	bne.n	8003a98 <minArr+0x14>
			index =i;
 8003aae:	b2de      	uxtb	r6, r3
			smallest =arr[i];
 8003ab0:	0014      	movs	r4, r2
 8003ab2:	e7f1      	b.n	8003a98 <minArr+0x14>
		}
	}
	
	return index;
}
 8003ab4:	0030      	movs	r0, r6
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
 8003ab8:	20000008 	.word	0x20000008

08003abc <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003abc:	2300      	movs	r3, #0
	char temp =1;
 8003abe:	2201      	movs	r2, #1
	for(int i =0; i < N; i++){
 8003ac0:	e002      	b.n	8003ac8 <QnotEmpty+0xc>
		temp &=Q[i];
 8003ac2:	5cc1      	ldrb	r1, [r0, r3]
 8003ac4:	400a      	ands	r2, r1
	for(int i =0; i < N; i++){
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	4902      	ldr	r1, [pc, #8]	; (8003ad4 <QnotEmpty+0x18>)
 8003aca:	7809      	ldrb	r1, [r1, #0]
 8003acc:	4299      	cmp	r1, r3
 8003ace:	dcf8      	bgt.n	8003ac2 <QnotEmpty+0x6>
	}
	
	return temp;
}
 8003ad0:	0010      	movs	r0, r2
 8003ad2:	4770      	bx	lr
 8003ad4:	20000008 	.word	0x20000008

08003ad8 <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ada:	b08f      	sub	sp, #60	; 0x3c
 8003adc:	0005      	movs	r5, r0
 8003ade:	000e      	movs	r6, r1
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003ae0:	2232      	movs	r2, #50	; 0x32
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	a801      	add	r0, sp, #4
 8003ae6:	f00f f967 	bl	8012db8 <memset>
	memset(route,0,sizeof(route));
 8003aea:	221a      	movs	r2, #26
 8003aec:	2100      	movs	r1, #0
 8003aee:	484d      	ldr	r0, [pc, #308]	; (8003c24 <FindRoute+0x14c>)
 8003af0:	f00f f962 	bl	8012db8 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003af4:	002a      	movs	r2, r5
 8003af6:	3d01      	subs	r5, #1
 8003af8:	4b4b      	ldr	r3, [pc, #300]	; (8003c28 <FindRoute+0x150>)
 8003afa:	195b      	adds	r3, r3, r5
 8003afc:	2100      	movs	r1, #0
 8003afe:	7219      	strb	r1, [r3, #8]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003b00:	2024      	movs	r0, #36	; 0x24
 8003b02:	5419      	strb	r1, [r3, r0]
	for(int col =1; col <= 6; col++){
 8003b04:	3823      	subs	r0, #35	; 0x23
 8003b06:	e000      	b.n	8003b0a <FindRoute+0x32>
 8003b08:	3001      	adds	r0, #1
 8003b0a:	2806      	cmp	r0, #6
 8003b0c:	dc17      	bgt.n	8003b3e <FindRoute+0x66>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003b0e:	00ab      	lsls	r3, r5, #2
 8003b10:	195b      	adds	r3, r3, r5
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	195b      	adds	r3, r3, r5
 8003b16:	181b      	adds	r3, r3, r0
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	4944      	ldr	r1, [pc, #272]	; (8003c2c <FindRoute+0x154>)
 8003b1c:	5a5b      	ldrh	r3, [r3, r1]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f2      	beq.n	8003b08 <FindRoute+0x30>
 8003b22:	08db      	lsrs	r3, r3, #3
 8003b24:	b2b1      	uxth	r1, r6
 8003b26:	428b      	cmp	r3, r1
 8003b28:	d1ee      	bne.n	8003b08 <FindRoute+0x30>
			routeDist[desID - 1] =1;
 8003b2a:	1e72      	subs	r2, r6, #1
 8003b2c:	4b3e      	ldr	r3, [pc, #248]	; (8003c28 <FindRoute+0x150>)
 8003b2e:	189b      	adds	r3, r3, r2
 8003b30:	2201      	movs	r2, #1
 8003b32:	721a      	strb	r2, [r3, #8]
			route[0] =desID;
 8003b34:	4b3b      	ldr	r3, [pc, #236]	; (8003c24 <FindRoute+0x14c>)
 8003b36:	701e      	strb	r6, [r3, #0]
			return col;
 8003b38:	b2c0      	uxtb	r0, r0
}
 8003b3a:	b00f      	add	sp, #60	; 0x3c
 8003b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(int i =1; i <= N; i++){
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <FindRoute+0x6c>
 8003b42:	3301      	adds	r3, #1
 8003b44:	493a      	ldr	r1, [pc, #232]	; (8003c30 <FindRoute+0x158>)
 8003b46:	7809      	ldrb	r1, [r1, #0]
 8003b48:	4299      	cmp	r1, r3
 8003b4a:	db0a      	blt.n	8003b62 <FindRoute+0x8a>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d0f8      	beq.n	8003b42 <FindRoute+0x6a>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b50:	1e58      	subs	r0, r3, #1
 8003b52:	4935      	ldr	r1, [pc, #212]	; (8003c28 <FindRoute+0x150>)
 8003b54:	1809      	adds	r1, r1, r0
 8003b56:	20ff      	movs	r0, #255	; 0xff
 8003b58:	7208      	strb	r0, [r1, #8]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b5a:	38db      	subs	r0, #219	; 0xdb
 8003b5c:	2400      	movs	r4, #0
 8003b5e:	540c      	strb	r4, [r1, r0]
 8003b60:	e7ef      	b.n	8003b42 <FindRoute+0x6a>
	uint8_t u =0;
 8003b62:	2400      	movs	r4, #0
	while(!QnotEmpty(Q)){
 8003b64:	a801      	add	r0, sp, #4
 8003b66:	f7ff ffa9 	bl	8003abc <QnotEmpty>
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d10d      	bne.n	8003b8a <FindRoute+0xb2>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003b6e:	482e      	ldr	r0, [pc, #184]	; (8003c28 <FindRoute+0x150>)
 8003b70:	a901      	add	r1, sp, #4
 8003b72:	3008      	adds	r0, #8
 8003b74:	f7ff ff86 	bl	8003a84 <minArr>
 8003b78:	3001      	adds	r0, #1
 8003b7a:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003b7c:	42b4      	cmp	r4, r6
 8003b7e:	d004      	beq.n	8003b8a <FindRoute+0xb2>
			Q[u - 1] =1;									// Remove u from Q
 8003b80:	1e61      	subs	r1, r4, #1
 8003b82:	ab01      	add	r3, sp, #4
 8003b84:	2201      	movs	r2, #1
 8003b86:	545a      	strb	r2, [r3, r1]
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003b88:	e003      	b.n	8003b92 <FindRoute+0xba>
	uint8_t u =0;
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	e028      	b.n	8003be0 <FindRoute+0x108>
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003b8e:	3201      	adds	r2, #1
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	2a06      	cmp	r2, #6
 8003b94:	d8e6      	bhi.n	8003b64 <FindRoute+0x8c>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003b96:	008b      	lsls	r3, r1, #2
 8003b98:	185b      	adds	r3, r3, r1
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	185b      	adds	r3, r3, r1
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	4822      	ldr	r0, [pc, #136]	; (8003c2c <FindRoute+0x154>)
 8003ba4:	5a1b      	ldrh	r3, [r3, r0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f1      	beq.n	8003b8e <FindRoute+0xb6>
				v =(array[u - 1][n] >> 3);
 8003baa:	08db      	lsrs	r3, r3, #3
 8003bac:	b2db      	uxtb	r3, r3
				if(!Q[v - 1])								// v is still in Q
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	a801      	add	r0, sp, #4
 8003bb2:	5cc0      	ldrb	r0, [r0, r3]
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	d1ea      	bne.n	8003b8e <FindRoute+0xb6>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003bb8:	4f1b      	ldr	r7, [pc, #108]	; (8003c28 <FindRoute+0x150>)
 8003bba:	1878      	adds	r0, r7, r1
 8003bbc:	7a00      	ldrb	r0, [r0, #8]
 8003bbe:	3001      	adds	r0, #1
 8003bc0:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003bc2:	18ff      	adds	r7, r7, r3
 8003bc4:	7a3f      	ldrb	r7, [r7, #8]
 8003bc6:	4287      	cmp	r7, r0
 8003bc8:	d9e1      	bls.n	8003b8e <FindRoute+0xb6>
						routeDist[v - 1] =alt;
 8003bca:	4f17      	ldr	r7, [pc, #92]	; (8003c28 <FindRoute+0x150>)
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	7218      	strb	r0, [r3, #8]
						routePrev[v - 1] =u;
 8003bd0:	2024      	movs	r0, #36	; 0x24
 8003bd2:	541c      	strb	r4, [r3, r0]
 8003bd4:	e7db      	b.n	8003b8e <FindRoute+0xb6>
		route[j++] =u;          			// Push the vertex onto the stack
 8003bd6:	1c4b      	adds	r3, r1, #1
 8003bd8:	4a12      	ldr	r2, [pc, #72]	; (8003c24 <FindRoute+0x14c>)
 8003bda:	5454      	strb	r4, [r2, r1]
 8003bdc:	b2d9      	uxtb	r1, r3
		u =routePrev[u - 1];           		// Traverse from target to source
 8003bde:	0004      	movs	r4, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003be0:	1e62      	subs	r2, r4, #1
 8003be2:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <FindRoute+0x150>)
 8003be4:	189b      	adds	r3, r3, r2
 8003be6:	2224      	movs	r2, #36	; 0x24
 8003be8:	5c98      	ldrb	r0, [r3, r2]
 8003bea:	2800      	cmp	r0, #0
 8003bec:	d1f3      	bne.n	8003bd6 <FindRoute+0xfe>
	for(int col =1; col <= 6; col++){
 8003bee:	3a23      	subs	r2, #35	; 0x23
 8003bf0:	e000      	b.n	8003bf4 <FindRoute+0x11c>
 8003bf2:	3201      	adds	r2, #1
 8003bf4:	2a06      	cmp	r2, #6
 8003bf6:	dca0      	bgt.n	8003b3a <FindRoute+0x62>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003bf8:	00ab      	lsls	r3, r5, #2
 8003bfa:	195b      	adds	r3, r3, r5
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	195b      	adds	r3, r3, r5
 8003c00:	189b      	adds	r3, r3, r2
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	4909      	ldr	r1, [pc, #36]	; (8003c2c <FindRoute+0x154>)
 8003c06:	5a5b      	ldrh	r3, [r3, r1]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f2      	beq.n	8003bf2 <FindRoute+0x11a>
 8003c0c:	08db      	lsrs	r3, r3, #3
 8003c0e:	1e74      	subs	r4, r6, #1
 8003c10:	4905      	ldr	r1, [pc, #20]	; (8003c28 <FindRoute+0x150>)
 8003c12:	1909      	adds	r1, r1, r4
 8003c14:	7a09      	ldrb	r1, [r1, #8]
 8003c16:	3901      	subs	r1, #1
 8003c18:	4c02      	ldr	r4, [pc, #8]	; (8003c24 <FindRoute+0x14c>)
 8003c1a:	5c61      	ldrb	r1, [r4, r1]
 8003c1c:	428b      	cmp	r3, r1
 8003c1e:	d1e8      	bne.n	8003bf2 <FindRoute+0x11a>
			return col;
 8003c20:	b2d0      	uxtb	r0, r2
 8003c22:	e78a      	b.n	8003b3a <FindRoute+0x62>
 8003c24:	20006910 	.word	0x20006910
 8003c28:	20000b98 	.word	0x20000b98
 8003c2c:	20000ed4 	.word	0x20000ed4
 8003c30:	20000008 	.word	0x20000008

08003c34 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c36:	b085      	sub	sp, #20
 8003c38:	0004      	movs	r4, r0
 8003c3a:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c3c:	4d58      	ldr	r5, [pc, #352]	; (8003da0 <DisplayTopology+0x16c>)
 8003c3e:	3540      	adds	r5, #64	; 0x40
 8003c40:	4b58      	ldr	r3, [pc, #352]	; (8003da4 <DisplayTopology+0x170>)
 8003c42:	002a      	movs	r2, r5
 8003c44:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003c46:	c243      	stmia	r2!, {r0, r1, r6}
 8003c48:	0019      	movs	r1, r3
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	888b      	ldrh	r3, [r1, #4]
 8003c50:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c52:	0028      	movs	r0, r5
 8003c54:	f7fc fa60 	bl	8000118 <strlen>
 8003c58:	b282      	uxth	r2, r0
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	425b      	negs	r3, r3
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	3333      	adds	r3, #51	; 0x33
 8003c62:	0029      	movs	r1, r5
 8003c64:	0020      	movs	r0, r4
 8003c66:	f009 fd1b 	bl	800d6a0 <writePxMutex>
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003c6a:	2501      	movs	r5, #1
 8003c6c:	e014      	b.n	8003c98 <DisplayTopology+0x64>
		sprintf(pcUserMessage,"P%d\t",i);
 8003c6e:	4e4c      	ldr	r6, [pc, #304]	; (8003da0 <DisplayTopology+0x16c>)
 8003c70:	3640      	adds	r6, #64	; 0x40
 8003c72:	002a      	movs	r2, r5
 8003c74:	494c      	ldr	r1, [pc, #304]	; (8003da8 <DisplayTopology+0x174>)
 8003c76:	0030      	movs	r0, r6
 8003c78:	f00f fa98 	bl	80131ac <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c7c:	0030      	movs	r0, r6
 8003c7e:	f7fc fa4b 	bl	8000118 <strlen>
 8003c82:	b282      	uxth	r2, r0
 8003c84:	2301      	movs	r3, #1
 8003c86:	425b      	negs	r3, r3
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	3333      	adds	r3, #51	; 0x33
 8003c8c:	0031      	movs	r1, r6
 8003c8e:	9803      	ldr	r0, [sp, #12]
 8003c90:	f009 fd06 	bl	800d6a0 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003c94:	3501      	adds	r5, #1
 8003c96:	b2ed      	uxtb	r5, r5
 8003c98:	2d05      	cmp	r5, #5
 8003c9a:	d9e8      	bls.n	8003c6e <DisplayTopology+0x3a>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	425b      	negs	r3, r3
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	3333      	adds	r3, #51	; 0x33
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	4941      	ldr	r1, [pc, #260]	; (8003dac <DisplayTopology+0x178>)
 8003ca8:	9803      	ldr	r0, [sp, #12]
 8003caa:	f009 fcf9 	bl	800d6a0 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003cae:	2400      	movs	r4, #0
 8003cb0:	e034      	b.n	8003d1c <DisplayTopology+0xe8>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003cb2:	2307      	movs	r3, #7
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	08d2      	lsrs	r2, r2, #3
 8003cb8:	4839      	ldr	r0, [pc, #228]	; (8003da0 <DisplayTopology+0x16c>)
 8003cba:	493d      	ldr	r1, [pc, #244]	; (8003db0 <DisplayTopology+0x17c>)
 8003cbc:	3040      	adds	r0, #64	; 0x40
 8003cbe:	f00f fa75 	bl	80131ac <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cc2:	4e37      	ldr	r6, [pc, #220]	; (8003da0 <DisplayTopology+0x16c>)
 8003cc4:	3640      	adds	r6, #64	; 0x40
 8003cc6:	0030      	movs	r0, r6
 8003cc8:	f7fc fa26 	bl	8000118 <strlen>
 8003ccc:	b282      	uxth	r2, r0
 8003cce:	2301      	movs	r3, #1
 8003cd0:	425b      	negs	r3, r3
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	3333      	adds	r3, #51	; 0x33
 8003cd6:	0031      	movs	r1, r6
 8003cd8:	9803      	ldr	r0, [sp, #12]
 8003cda:	f009 fce1 	bl	800d6a0 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003cde:	3501      	adds	r5, #1
 8003ce0:	b2ed      	uxtb	r5, r5
 8003ce2:	2d05      	cmp	r5, #5
 8003ce4:	d80f      	bhi.n	8003d06 <DisplayTopology+0xd2>
			if(!array[row][col])
 8003ce6:	00bb      	lsls	r3, r7, #2
 8003ce8:	19db      	adds	r3, r3, r7
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	19db      	adds	r3, r3, r7
 8003cee:	195b      	adds	r3, r3, r5
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4a30      	ldr	r2, [pc, #192]	; (8003db4 <DisplayTopology+0x180>)
 8003cf4:	5a9a      	ldrh	r2, [r3, r2]
 8003cf6:	2a00      	cmp	r2, #0
 8003cf8:	d1db      	bne.n	8003cb2 <DisplayTopology+0x7e>
				sprintf(pcUserMessage,"%d\t",0);
 8003cfa:	4829      	ldr	r0, [pc, #164]	; (8003da0 <DisplayTopology+0x16c>)
 8003cfc:	492e      	ldr	r1, [pc, #184]	; (8003db8 <DisplayTopology+0x184>)
 8003cfe:	3040      	adds	r0, #64	; 0x40
 8003d00:	f00f fa54 	bl	80131ac <sprintf>
 8003d04:	e7dd      	b.n	8003cc2 <DisplayTopology+0x8e>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003d06:	2301      	movs	r3, #1
 8003d08:	425b      	negs	r3, r3
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	3333      	adds	r3, #51	; 0x33
 8003d0e:	2202      	movs	r2, #2
 8003d10:	492a      	ldr	r1, [pc, #168]	; (8003dbc <DisplayTopology+0x188>)
 8003d12:	9803      	ldr	r0, [sp, #12]
 8003d14:	f009 fcc4 	bl	800d6a0 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003d18:	3401      	adds	r4, #1
 8003d1a:	b2e4      	uxtb	r4, r4
 8003d1c:	4b28      	ldr	r3, [pc, #160]	; (8003dc0 <DisplayTopology+0x18c>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	42a3      	cmp	r3, r4
 8003d22:	d931      	bls.n	8003d88 <DisplayTopology+0x154>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d24:	0027      	movs	r7, r4
 8003d26:	1c62      	adds	r2, r4, #1
 8003d28:	4d1d      	ldr	r5, [pc, #116]	; (8003da0 <DisplayTopology+0x16c>)
 8003d2a:	3540      	adds	r5, #64	; 0x40
 8003d2c:	4925      	ldr	r1, [pc, #148]	; (8003dc4 <DisplayTopology+0x190>)
 8003d2e:	0028      	movs	r0, r5
 8003d30:	f00f fa3c 	bl	80131ac <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d34:	0028      	movs	r0, r5
 8003d36:	f7fc f9ef 	bl	8000118 <strlen>
 8003d3a:	b282      	uxth	r2, r0
 8003d3c:	2601      	movs	r6, #1
 8003d3e:	4276      	negs	r6, r6
 8003d40:	9600      	str	r6, [sp, #0]
 8003d42:	2332      	movs	r3, #50	; 0x32
 8003d44:	0029      	movs	r1, r5
 8003d46:	9803      	ldr	r0, [sp, #12]
 8003d48:	f009 fcaa 	bl	800d6a0 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d4c:	2316      	movs	r3, #22
 8003d4e:	4363      	muls	r3, r4
 8003d50:	4a18      	ldr	r2, [pc, #96]	; (8003db4 <DisplayTopology+0x180>)
 8003d52:	5a9a      	ldrh	r2, [r3, r2]
 8003d54:	0053      	lsls	r3, r2, #1
 8003d56:	189b      	adds	r3, r3, r2
 8003d58:	0059      	lsls	r1, r3, #1
 8003d5a:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <DisplayTopology+0x194>)
 8003d5c:	18c9      	adds	r1, r1, r3
 8003d5e:	2205      	movs	r2, #5
 8003d60:	0028      	movs	r0, r5
 8003d62:	f00f fa78 	bl	8013256 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003d66:	9600      	str	r6, [sp, #0]
 8003d68:	2332      	movs	r3, #50	; 0x32
 8003d6a:	2205      	movs	r2, #5
 8003d6c:	0029      	movs	r1, r5
 8003d6e:	9d03      	ldr	r5, [sp, #12]
 8003d70:	0028      	movs	r0, r5
 8003d72:	f009 fc95 	bl	800d6a0 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003d76:	9600      	str	r6, [sp, #0]
 8003d78:	2332      	movs	r3, #50	; 0x32
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	4913      	ldr	r1, [pc, #76]	; (8003dcc <DisplayTopology+0x198>)
 8003d7e:	0028      	movs	r0, r5
 8003d80:	f009 fc8e 	bl	800d6a0 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003d84:	2501      	movs	r5, #1
 8003d86:	e7ac      	b.n	8003ce2 <DisplayTopology+0xae>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003d88:	2301      	movs	r3, #1
 8003d8a:	425b      	negs	r3, r3
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	3333      	adds	r3, #51	; 0x33
 8003d90:	2201      	movs	r2, #1
 8003d92:	490f      	ldr	r1, [pc, #60]	; (8003dd0 <DisplayTopology+0x19c>)
 8003d94:	9803      	ldr	r0, [sp, #12]
 8003d96:	f009 fc83 	bl	800d6a0 <writePxMutex>
}
 8003d9a:	b005      	add	sp, #20
 8003d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	20000b98 	.word	0x20000b98
 8003da4:	08017d2c 	.word	0x08017d2c
 8003da8:	08017d40 	.word	0x08017d40
 8003dac:	08018c2c 	.word	0x08018c2c
 8003db0:	08017d58 	.word	0x08017d58
 8003db4:	20000ed4 	.word	0x20000ed4
 8003db8:	08017d54 	.word	0x08017d54
 8003dbc:	08017e64 	.word	0x08017e64
 8003dc0:	20000008 	.word	0x20000008
 8003dc4:	08017d48 	.word	0x08017d48
 8003dc8:	08017654 	.word	0x08017654
 8003dcc:	08017d3c 	.word	0x08017d3c
 8003dd0:	08019640 	.word	0x08019640

08003dd4 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	0005      	movs	r5, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003dda:	4c2e      	ldr	r4, [pc, #184]	; (8003e94 <DisplayPortsDir+0xc0>)
 8003ddc:	3440      	adds	r4, #64	; 0x40
 8003dde:	492e      	ldr	r1, [pc, #184]	; (8003e98 <DisplayPortsDir+0xc4>)
 8003de0:	0023      	movs	r3, r4
 8003de2:	000a      	movs	r2, r1
 8003de4:	ca43      	ldmia	r2!, {r0, r1, r6}
 8003de6:	c343      	stmia	r3!, {r0, r1, r6}
 8003de8:	ca43      	ldmia	r2!, {r0, r1, r6}
 8003dea:	c343      	stmia	r3!, {r0, r1, r6}
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	601a      	str	r2, [r3, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003df0:	0020      	movs	r0, r4
 8003df2:	f7fc f991 	bl	8000118 <strlen>
 8003df6:	b282      	uxth	r2, r0
 8003df8:	2301      	movs	r3, #1
 8003dfa:	425b      	negs	r3, r3
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	3333      	adds	r3, #51	; 0x33
 8003e00:	0021      	movs	r1, r4
 8003e02:	0028      	movs	r0, r5
 8003e04:	f009 fc4c 	bl	800d6a0 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003e08:	2601      	movs	r6, #1
 8003e0a:	e024      	b.n	8003e56 <DisplayPortsDir+0x82>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e0c:	3401      	adds	r4, #1
 8003e0e:	b2e4      	uxtb	r4, r4
 8003e10:	2c0a      	cmp	r4, #10
 8003e12:	d81e      	bhi.n	8003e52 <DisplayPortsDir+0x7e>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e14:	1e73      	subs	r3, r6, #1
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4a20      	ldr	r2, [pc, #128]	; (8003e9c <DisplayPortsDir+0xc8>)
 8003e1a:	5a9a      	ldrh	r2, [r3, r2]
 8003e1c:	1e61      	subs	r1, r4, #1
 8003e1e:	2380      	movs	r3, #128	; 0x80
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	410b      	asrs	r3, r1
 8003e24:	4213      	tst	r3, r2
 8003e26:	d0f1      	beq.n	8003e0c <DisplayPortsDir+0x38>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e28:	4f1a      	ldr	r7, [pc, #104]	; (8003e94 <DisplayPortsDir+0xc0>)
 8003e2a:	3740      	adds	r7, #64	; 0x40
 8003e2c:	0023      	movs	r3, r4
 8003e2e:	0032      	movs	r2, r6
 8003e30:	491b      	ldr	r1, [pc, #108]	; (8003ea0 <DisplayPortsDir+0xcc>)
 8003e32:	0038      	movs	r0, r7
 8003e34:	f00f f9ba 	bl	80131ac <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003e38:	0038      	movs	r0, r7
 8003e3a:	f7fc f96d 	bl	8000118 <strlen>
 8003e3e:	b282      	uxth	r2, r0
 8003e40:	2301      	movs	r3, #1
 8003e42:	425b      	negs	r3, r3
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	3333      	adds	r3, #51	; 0x33
 8003e48:	0039      	movs	r1, r7
 8003e4a:	0028      	movs	r0, r5
 8003e4c:	f009 fc28 	bl	800d6a0 <writePxMutex>
 8003e50:	e7dc      	b.n	8003e0c <DisplayPortsDir+0x38>
	for(uint8_t i =1; i <= N; i++){
 8003e52:	3601      	adds	r6, #1
 8003e54:	b2f6      	uxtb	r6, r6
 8003e56:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <DisplayPortsDir+0xd0>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	42b3      	cmp	r3, r6
 8003e5c:	d301      	bcc.n	8003e62 <DisplayPortsDir+0x8e>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e5e:	2401      	movs	r4, #1
 8003e60:	e7d6      	b.n	8003e10 <DisplayPortsDir+0x3c>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003e62:	4c0c      	ldr	r4, [pc, #48]	; (8003e94 <DisplayPortsDir+0xc0>)
 8003e64:	3440      	adds	r4, #64	; 0x40
 8003e66:	4910      	ldr	r1, [pc, #64]	; (8003ea8 <DisplayPortsDir+0xd4>)
 8003e68:	0023      	movs	r3, r4
 8003e6a:	000a      	movs	r2, r1
 8003e6c:	ca43      	ldmia	r2!, {r0, r1, r6}
 8003e6e:	c343      	stmia	r3!, {r0, r1, r6}
 8003e70:	ca43      	ldmia	r2!, {r0, r1, r6}
 8003e72:	c343      	stmia	r3!, {r0, r1, r6}
 8003e74:	ca03      	ldmia	r2!, {r0, r1}
 8003e76:	c303      	stmia	r3!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e78:	0020      	movs	r0, r4
 8003e7a:	f7fc f94d 	bl	8000118 <strlen>
 8003e7e:	b282      	uxth	r2, r0
 8003e80:	2301      	movs	r3, #1
 8003e82:	425b      	negs	r3, r3
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	3333      	adds	r3, #51	; 0x33
 8003e88:	0021      	movs	r1, r4
 8003e8a:	0028      	movs	r0, r5
 8003e8c:	f009 fc08 	bl	800d6a0 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003e90:	b003      	add	sp, #12
 8003e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e94:	20000b98 	.word	0x20000b98
 8003e98:	08017d60 	.word	0x08017d60
 8003e9c:	20006d58 	.word	0x20006d58
 8003ea0:	08017d7c 	.word	0x08017d7c
 8003ea4:	20000008 	.word	0x20000008
 8003ea8:	08017d90 	.word	0x08017d90

08003eac <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eae:	46c6      	mov	lr, r8
 8003eb0:	b500      	push	{lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	0007      	movs	r7, r0
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003eb6:	f009 fe95 	bl	800dbe4 <FreeRTOS_CLIGetOutputBuffer>
 8003eba:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003ec0:	4b9a      	ldr	r3, [pc, #616]	; (800412c <DisplayModuleStatus+0x280>)
 8003ec2:	781a      	ldrb	r2, [r3, #0]
 8003ec4:	4d9a      	ldr	r5, [pc, #616]	; (8004130 <DisplayModuleStatus+0x284>)
 8003ec6:	3540      	adds	r5, #64	; 0x40
 8003ec8:	499a      	ldr	r1, [pc, #616]	; (8004134 <DisplayModuleStatus+0x288>)
 8003eca:	0028      	movs	r0, r5
 8003ecc:	f00f f96e 	bl	80131ac <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003ed0:	0029      	movs	r1, r5
 8003ed2:	0020      	movs	r0, r4
 8003ed4:	f00f f98a 	bl	80131ec <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003ed8:	4b97      	ldr	r3, [pc, #604]	; (8004138 <DisplayModuleStatus+0x28c>)
 8003eda:	7c1a      	ldrb	r2, [r3, #16]
 8003edc:	4997      	ldr	r1, [pc, #604]	; (800413c <DisplayModuleStatus+0x290>)
 8003ede:	0028      	movs	r0, r5
 8003ee0:	f00f f964 	bl	80131ac <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003ee4:	0029      	movs	r1, r5
 8003ee6:	0020      	movs	r0, r4
 8003ee8:	f00f f980 	bl	80131ec <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003eec:	2306      	movs	r3, #6
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	3b04      	subs	r3, #4
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	4992      	ldr	r1, [pc, #584]	; (8004140 <DisplayModuleStatus+0x294>)
 8003ef6:	0028      	movs	r0, r5
 8003ef8:	f00f f958 	bl	80131ac <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003efc:	0029      	movs	r1, r5
 8003efe:	0020      	movs	r0, r4
 8003f00:	f00f f974 	bl	80131ec <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003f04:	4a8f      	ldr	r2, [pc, #572]	; (8004144 <DisplayModuleStatus+0x298>)
 8003f06:	4990      	ldr	r1, [pc, #576]	; (8004148 <DisplayModuleStatus+0x29c>)
 8003f08:	0028      	movs	r0, r5
 8003f0a:	f00f f94f 	bl	80131ac <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f0e:	0029      	movs	r1, r5
 8003f10:	0020      	movs	r0, r4
 8003f12:	f00f f96b 	bl	80131ec <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003f16:	4a8d      	ldr	r2, [pc, #564]	; (800414c <DisplayModuleStatus+0x2a0>)
 8003f18:	498d      	ldr	r1, [pc, #564]	; (8004150 <DisplayModuleStatus+0x2a4>)
 8003f1a:	0028      	movs	r0, r5
 8003f1c:	f00f f946 	bl	80131ac <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f20:	0029      	movs	r1, r5
 8003f22:	0020      	movs	r0, r4
 8003f24:	f00f f962 	bl	80131ec <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f28:	4b8a      	ldr	r3, [pc, #552]	; (8004154 <DisplayModuleStatus+0x2a8>)
 8003f2a:	002a      	movs	r2, r5
 8003f2c:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003f2e:	c243      	stmia	r2!, {r0, r1, r6}
 8003f30:	0019      	movs	r1, r3
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	888b      	ldrh	r3, [r1, #4]
 8003f38:	8093      	strh	r3, [r2, #4]
 8003f3a:	798b      	ldrb	r3, [r1, #6]
 8003f3c:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f3e:	0029      	movs	r1, r5
 8003f40:	0020      	movs	r0, r4
 8003f42:	f00f f953 	bl	80131ec <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003f46:	2501      	movs	r5, #1
 8003f48:	e010      	b.n	8003f6c <DisplayModuleStatus+0xc0>
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 8003f4a:	4979      	ldr	r1, [pc, #484]	; (8004130 <DisplayModuleStatus+0x284>)
 8003f4c:	000a      	movs	r2, r1
 8003f4e:	3240      	adds	r2, #64	; 0x40
 8003f50:	4b81      	ldr	r3, [pc, #516]	; (8004158 <DisplayModuleStatus+0x2ac>)
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	6408      	str	r0, [r1, #64]	; 0x40
 8003f56:	8899      	ldrh	r1, [r3, #4]
 8003f58:	8091      	strh	r1, [r2, #4]
 8003f5a:	799b      	ldrb	r3, [r3, #6]
 8003f5c:	7193      	strb	r3, [r2, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8003f5e:	4974      	ldr	r1, [pc, #464]	; (8004130 <DisplayModuleStatus+0x284>)
 8003f60:	3140      	adds	r1, #64	; 0x40
 8003f62:	0020      	movs	r0, r4
 8003f64:	f00f f942 	bl	80131ec <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003f68:	3501      	adds	r5, #1
 8003f6a:	b2ed      	uxtb	r5, r5
 8003f6c:	2d05      	cmp	r5, #5
 8003f6e:	d841      	bhi.n	8003ff4 <DisplayModuleStatus+0x148>
		sprintf(pcUserMessage,"P%d: ",i);
 8003f70:	4e6f      	ldr	r6, [pc, #444]	; (8004130 <DisplayModuleStatus+0x284>)
 8003f72:	3640      	adds	r6, #64	; 0x40
 8003f74:	002a      	movs	r2, r5
 8003f76:	4979      	ldr	r1, [pc, #484]	; (800415c <DisplayModuleStatus+0x2b0>)
 8003f78:	0030      	movs	r0, r6
 8003f7a:	f00f f917 	bl	80131ac <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8003f7e:	0031      	movs	r1, r6
 8003f80:	0020      	movs	r0, r4
 8003f82:	f00f f933 	bl	80131ec <strcat>
		switch(portStatus[i]){
 8003f86:	4b6c      	ldr	r3, [pc, #432]	; (8004138 <DisplayModuleStatus+0x28c>)
 8003f88:	195b      	adds	r3, r3, r5
 8003f8a:	7d1b      	ldrb	r3, [r3, #20]
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d8e6      	bhi.n	8003f5e <DisplayModuleStatus+0xb2>
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4a73      	ldr	r2, [pc, #460]	; (8004160 <DisplayModuleStatus+0x2b4>)
 8003f94:	58d3      	ldr	r3, [r2, r3]
 8003f96:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8003f98:	4b65      	ldr	r3, [pc, #404]	; (8004130 <DisplayModuleStatus+0x284>)
 8003f9a:	3340      	adds	r3, #64	; 0x40
 8003f9c:	4871      	ldr	r0, [pc, #452]	; (8004164 <DisplayModuleStatus+0x2b8>)
 8003f9e:	0001      	movs	r1, r0
 8003fa0:	c945      	ldmia	r1!, {r0, r2, r6}
 8003fa2:	c345      	stmia	r3!, {r0, r2, r6}
 8003fa4:	001a      	movs	r2, r3
 8003fa6:	c909      	ldmia	r1!, {r0, r3}
 8003fa8:	c209      	stmia	r2!, {r0, r3}
 8003faa:	780b      	ldrb	r3, [r1, #0]
 8003fac:	7013      	strb	r3, [r2, #0]
				break;
 8003fae:	e7d6      	b.n	8003f5e <DisplayModuleStatus+0xb2>
				sprintf(pcUserMessage,"Streaming\n\r");
 8003fb0:	4b5f      	ldr	r3, [pc, #380]	; (8004130 <DisplayModuleStatus+0x284>)
 8003fb2:	3340      	adds	r3, #64	; 0x40
 8003fb4:	4a6c      	ldr	r2, [pc, #432]	; (8004168 <DisplayModuleStatus+0x2bc>)
 8003fb6:	ca43      	ldmia	r2!, {r0, r1, r6}
 8003fb8:	c343      	stmia	r3!, {r0, r1, r6}
				break;
 8003fba:	e7d0      	b.n	8003f5e <DisplayModuleStatus+0xb2>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8003fbc:	495c      	ldr	r1, [pc, #368]	; (8004130 <DisplayModuleStatus+0x284>)
 8003fbe:	3140      	adds	r1, #64	; 0x40
 8003fc0:	486a      	ldr	r0, [pc, #424]	; (800416c <DisplayModuleStatus+0x2c0>)
 8003fc2:	000b      	movs	r3, r1
 8003fc4:	0002      	movs	r2, r0
 8003fc6:	ca43      	ldmia	r2!, {r0, r1, r6}
 8003fc8:	c343      	stmia	r3!, {r0, r1, r6}
 8003fca:	ca43      	ldmia	r2!, {r0, r1, r6}
 8003fcc:	c343      	stmia	r3!, {r0, r1, r6}
 8003fce:	8812      	ldrh	r2, [r2, #0]
 8003fd0:	801a      	strh	r2, [r3, #0]
				break;
 8003fd2:	e7c4      	b.n	8003f5e <DisplayModuleStatus+0xb2>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8003fd4:	4956      	ldr	r1, [pc, #344]	; (8004130 <DisplayModuleStatus+0x284>)
 8003fd6:	3140      	adds	r1, #64	; 0x40
 8003fd8:	4865      	ldr	r0, [pc, #404]	; (8004170 <DisplayModuleStatus+0x2c4>)
 8003fda:	000b      	movs	r3, r1
 8003fdc:	0002      	movs	r2, r0
 8003fde:	ca43      	ldmia	r2!, {r0, r1, r6}
 8003fe0:	c343      	stmia	r3!, {r0, r1, r6}
 8003fe2:	ca43      	ldmia	r2!, {r0, r1, r6}
 8003fe4:	c343      	stmia	r3!, {r0, r1, r6}
 8003fe6:	6811      	ldr	r1, [r2, #0]
 8003fe8:	6019      	str	r1, [r3, #0]
 8003fea:	8891      	ldrh	r1, [r2, #4]
 8003fec:	8099      	strh	r1, [r3, #4]
 8003fee:	7992      	ldrb	r2, [r2, #6]
 8003ff0:	719a      	strb	r2, [r3, #6]
				break;
 8003ff2:	e7b4      	b.n	8003f5e <DisplayModuleStatus+0xb2>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8003ff4:	494e      	ldr	r1, [pc, #312]	; (8004130 <DisplayModuleStatus+0x284>)
 8003ff6:	3140      	adds	r1, #64	; 0x40
 8003ff8:	485e      	ldr	r0, [pc, #376]	; (8004174 <DisplayModuleStatus+0x2c8>)
 8003ffa:	000b      	movs	r3, r1
 8003ffc:	0002      	movs	r2, r0
 8003ffe:	ca61      	ldmia	r2!, {r0, r5, r6}
 8004000:	c361      	stmia	r3!, {r0, r5, r6}
 8004002:	ca61      	ldmia	r2!, {r0, r5, r6}
 8004004:	c361      	stmia	r3!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 8004006:	0020      	movs	r0, r4
 8004008:	f00f f8f0 	bl	80131ec <strcat>
	for(char i =1; i <= 6; i++){
 800400c:	2601      	movs	r6, #1
 800400e:	e00c      	b.n	800402a <DisplayModuleStatus+0x17e>
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004010:	4d47      	ldr	r5, [pc, #284]	; (8004130 <DisplayModuleStatus+0x284>)
 8004012:	3540      	adds	r5, #64	; 0x40
 8004014:	0032      	movs	r2, r6
 8004016:	4958      	ldr	r1, [pc, #352]	; (8004178 <DisplayModuleStatus+0x2cc>)
 8004018:	0028      	movs	r0, r5
 800401a:	f00f f8c7 	bl	80131ac <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 800401e:	0029      	movs	r1, r5
 8004020:	0020      	movs	r0, r4
 8004022:	f00f f8e3 	bl	80131ec <strcat>
	for(char i =1; i <= 6; i++){
 8004026:	3601      	adds	r6, #1
 8004028:	b2f6      	uxtb	r6, r6
 800402a:	2e06      	cmp	r6, #6
 800402c:	d823      	bhi.n	8004076 <DisplayModuleStatus+0x1ca>
		if(streamDMA[i - 1].Instance == 0){
 800402e:	1e75      	subs	r5, r6, #1
 8004030:	00eb      	lsls	r3, r5, #3
 8004032:	1b5b      	subs	r3, r3, r5
 8004034:	00da      	lsls	r2, r3, #3
 8004036:	4b51      	ldr	r3, [pc, #324]	; (800417c <DisplayModuleStatus+0x2d0>)
 8004038:	58d3      	ldr	r3, [r2, r3]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0e8      	beq.n	8004010 <DisplayModuleStatus+0x164>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 800403e:	00eb      	lsls	r3, r5, #3
 8004040:	1b5b      	subs	r3, r3, r5
 8004042:	00da      	lsls	r2, r3, #3
 8004044:	4b4d      	ldr	r3, [pc, #308]	; (800417c <DisplayModuleStatus+0x2d0>)
 8004046:	189b      	adds	r3, r3, r2
 8004048:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800404a:	f006 f91d 	bl	800a288 <GetPort>
 800404e:	9003      	str	r0, [sp, #12]
 8004050:	00ad      	lsls	r5, r5, #2
 8004052:	4b4b      	ldr	r3, [pc, #300]	; (8004180 <DisplayModuleStatus+0x2d4>)
 8004054:	58e8      	ldr	r0, [r5, r3]
 8004056:	f006 f917 	bl	800a288 <GetPort>
 800405a:	4d35      	ldr	r5, [pc, #212]	; (8004130 <DisplayModuleStatus+0x284>)
 800405c:	3540      	adds	r5, #64	; 0x40
 800405e:	9000      	str	r0, [sp, #0]
 8004060:	9b03      	ldr	r3, [sp, #12]
 8004062:	0032      	movs	r2, r6
 8004064:	4947      	ldr	r1, [pc, #284]	; (8004184 <DisplayModuleStatus+0x2d8>)
 8004066:	0028      	movs	r0, r5
 8004068:	f00f f8a0 	bl	80131ac <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 800406c:	0029      	movs	r1, r5
 800406e:	0020      	movs	r0, r4
 8004070:	f00f f8bc 	bl	80131ec <strcat>
 8004074:	e7d7      	b.n	8004026 <DisplayModuleStatus+0x17a>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004076:	0020      	movs	r0, r4
 8004078:	f7fc f84e 	bl	8000118 <strlen>
 800407c:	1820      	adds	r0, r4, r0
 800407e:	2203      	movs	r2, #3
 8004080:	4941      	ldr	r1, [pc, #260]	; (8004188 <DisplayModuleStatus+0x2dc>)
 8004082:	f00e fe90 	bl	8012da6 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004086:	0020      	movs	r0, r4
 8004088:	f7fc f846 	bl	8000118 <strlen>
 800408c:	1820      	adds	r0, r4, r0
 800408e:	221d      	movs	r2, #29
 8004090:	493e      	ldr	r1, [pc, #248]	; (800418c <DisplayModuleStatus+0x2e0>)
 8004092:	f00e fe88 	bl	8012da6 <memcpy>
	temp =strlen((char* )pcOutputString);
 8004096:	0020      	movs	r0, r4
 8004098:	f7fc f83e 	bl	8000118 <strlen>
 800409c:	4680      	mov	r8, r0
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800409e:	2501      	movs	r5, #1
 80040a0:	e001      	b.n	80040a6 <DisplayModuleStatus+0x1fa>
 80040a2:	3501      	adds	r5, #1
 80040a4:	b2ed      	uxtb	r5, r5
 80040a6:	2d05      	cmp	r5, #5
 80040a8:	d817      	bhi.n	80040da <DisplayModuleStatus+0x22e>
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040aa:	4b20      	ldr	r3, [pc, #128]	; (800412c <DisplayModuleStatus+0x280>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4a37      	ldr	r2, [pc, #220]	; (8004190 <DisplayModuleStatus+0x2e4>)
 80040b4:	5a9a      	ldrh	r2, [r3, r2]
 80040b6:	1e69      	subs	r1, r5, #1
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	410b      	asrs	r3, r1
 80040be:	4213      	tst	r3, r2
 80040c0:	d0ef      	beq.n	80040a2 <DisplayModuleStatus+0x1f6>
		{
			sprintf(pcUserMessage,"P%d ",p);
 80040c2:	4e1b      	ldr	r6, [pc, #108]	; (8004130 <DisplayModuleStatus+0x284>)
 80040c4:	3640      	adds	r6, #64	; 0x40
 80040c6:	002a      	movs	r2, r5
 80040c8:	4932      	ldr	r1, [pc, #200]	; (8004194 <DisplayModuleStatus+0x2e8>)
 80040ca:	0030      	movs	r0, r6
 80040cc:	f00f f86e 	bl	80131ac <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80040d0:	0031      	movs	r1, r6
 80040d2:	0020      	movs	r0, r4
 80040d4:	f00f f88a 	bl	80131ec <strcat>
 80040d8:	e7e3      	b.n	80040a2 <DisplayModuleStatus+0x1f6>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 80040da:	0020      	movs	r0, r4
 80040dc:	f7fc f81c 	bl	8000118 <strlen>
 80040e0:	4643      	mov	r3, r8
 80040e2:	041b      	lsls	r3, r3, #16
 80040e4:	0c1b      	lsrs	r3, r3, #16
 80040e6:	4298      	cmp	r0, r3
 80040e8:	d00d      	beq.n	8004106 <DisplayModuleStatus+0x25a>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 80040ea:	0020      	movs	r0, r4
 80040ec:	f7fc f814 	bl	8000118 <strlen>
 80040f0:	1820      	adds	r0, r4, r0
 80040f2:	2203      	movs	r2, #3
 80040f4:	4924      	ldr	r1, [pc, #144]	; (8004188 <DisplayModuleStatus+0x2dc>)
 80040f6:	f00e fe56 	bl	8012da6 <memcpy>
	
	/* Display output */
	if(port)
 80040fa:	2f00      	cmp	r7, #0
 80040fc:	d109      	bne.n	8004112 <DisplayModuleStatus+0x266>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 80040fe:	b004      	add	sp, #16
 8004100:	bc04      	pop	{r2}
 8004102:	4690      	mov	r8, r2
 8004104:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 8004106:	1820      	adds	r0, r4, r0
 8004108:	2205      	movs	r2, #5
 800410a:	4923      	ldr	r1, [pc, #140]	; (8004198 <DisplayModuleStatus+0x2ec>)
 800410c:	f00e fe4b 	bl	8012da6 <memcpy>
 8004110:	e7eb      	b.n	80040ea <DisplayModuleStatus+0x23e>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004112:	0020      	movs	r0, r4
 8004114:	f7fc f800 	bl	8000118 <strlen>
 8004118:	b282      	uxth	r2, r0
 800411a:	2301      	movs	r3, #1
 800411c:	425b      	negs	r3, r3
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	3333      	adds	r3, #51	; 0x33
 8004122:	0021      	movs	r1, r4
 8004124:	0038      	movs	r0, r7
 8004126:	f009 fabb 	bl	800d6a0 <writePxMutex>
}
 800412a:	e7e8      	b.n	80040fe <DisplayModuleStatus+0x252>
 800412c:	20000a98 	.word	0x20000a98
 8004130:	20000b98 	.word	0x20000b98
 8004134:	08017db0 	.word	0x08017db0
 8004138:	20000c18 	.word	0x20000c18
 800413c:	08017dcc 	.word	0x08017dcc
 8004140:	08017de8 	.word	0x08017de8
 8004144:	08017e08 	.word	0x08017e08
 8004148:	08017e14 	.word	0x08017e14
 800414c:	08017e2c 	.word	0x08017e2c
 8004150:	08017e38 	.word	0x08017e38
 8004154:	08017e54 	.word	0x08017e54
 8004158:	08017e70 	.word	0x08017e70
 800415c:	08017e68 	.word	0x08017e68
 8004160:	080175a8 	.word	0x080175a8
 8004164:	08017e78 	.word	0x08017e78
 8004168:	08017e90 	.word	0x08017e90
 800416c:	08017e9c 	.word	0x08017e9c
 8004170:	08017eb8 	.word	0x08017eb8
 8004174:	08017ed8 	.word	0x08017ed8
 8004178:	08017ef0 	.word	0x08017ef0
 800417c:	20002058 	.word	0x20002058
 8004180:	20001850 	.word	0x20001850
 8004184:	08017f0c 	.word	0x08017f0c
 8004188:	08017e64 	.word	0x08017e64
 800418c:	08017f3c 	.word	0x08017f3c
 8004190:	20006d58 	.word	0x20006d58
 8004194:	08017f5c 	.word	0x08017f5c
 8004198:	08017f64 	.word	0x08017f64

0800419c <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 80041a0:	492a      	ldr	r1, [pc, #168]	; (800424c <GetID+0xb0>)
 80041a2:	f7fb ffaf 	bl	8000104 <strcmp>
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d00a      	beq.n	80041c0 <GetID+0x24>
		return myID;
	else if(!strcmp(string,"all"))
 80041aa:	4929      	ldr	r1, [pc, #164]	; (8004250 <GetID+0xb4>)
 80041ac:	0028      	movs	r0, r5
 80041ae:	f7fb ffa9 	bl	8000104 <strcmp>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	d045      	beq.n	8004242 <GetID+0xa6>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 80041b6:	782e      	ldrb	r6, [r5, #0]
 80041b8:	2e23      	cmp	r6, #35	; 0x23
 80041ba:	d004      	beq.n	80041c6 <GetID+0x2a>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 80041bc:	2400      	movs	r4, #0
 80041be:	e016      	b.n	80041ee <GetID+0x52>
		return myID;
 80041c0:	4b24      	ldr	r3, [pc, #144]	; (8004254 <GetID+0xb8>)
 80041c2:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 80041c4:	bd70      	pop	{r4, r5, r6, pc}
		id =atol(string + 1);
 80041c6:	1c68      	adds	r0, r5, #1
 80041c8:	f00e fb63 	bl	8012892 <atol>
 80041cc:	b2c0      	uxtb	r0, r0
		if(id > 0 && id <= N)
 80041ce:	2800      	cmp	r0, #0
 80041d0:	d003      	beq.n	80041da <GetID+0x3e>
 80041d2:	4b21      	ldr	r3, [pc, #132]	; (8004258 <GetID+0xbc>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	4283      	cmp	r3, r0
 80041d8:	d205      	bcs.n	80041e6 <GetID+0x4a>
		else if(id == myID)
 80041da:	4b1e      	ldr	r3, [pc, #120]	; (8004254 <GetID+0xb8>)
 80041dc:	781c      	ldrb	r4, [r3, #0]
 80041de:	4284      	cmp	r4, r0
 80041e0:	d131      	bne.n	8004246 <GetID+0xaa>
			return myID;
 80041e2:	b220      	sxth	r0, r4
 80041e4:	e7ee      	b.n	80041c4 <GetID+0x28>
			return id;
 80041e6:	b200      	sxth	r0, r0
 80041e8:	e7ec      	b.n	80041c4 <GetID+0x28>
		for(i =0; i < N; i++){
 80041ea:	3401      	adds	r4, #1
 80041ec:	b2e4      	uxtb	r4, r4
 80041ee:	4b1a      	ldr	r3, [pc, #104]	; (8004258 <GetID+0xbc>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	42a3      	cmp	r3, r4
 80041f4:	d90d      	bls.n	8004212 <GetID+0x76>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 80041f6:	00a3      	lsls	r3, r4, #2
 80041f8:	191b      	adds	r3, r3, r4
 80041fa:	0059      	lsls	r1, r3, #1
 80041fc:	4b17      	ldr	r3, [pc, #92]	; (800425c <GetID+0xc0>)
 80041fe:	18c9      	adds	r1, r1, r3
 8004200:	0028      	movs	r0, r5
 8004202:	f7fb ff7f 	bl	8000104 <strcmp>
 8004206:	2800      	cmp	r0, #0
 8004208:	d1ef      	bne.n	80041ea <GetID+0x4e>
 800420a:	2e00      	cmp	r6, #0
 800420c:	d0ed      	beq.n	80041ea <GetID+0x4e>
				return (i);
 800420e:	b220      	sxth	r0, r4
 8004210:	e7d8      	b.n	80041c4 <GetID+0x28>
		for(i =0; i < MaxNumOfGroups; i++){
 8004212:	2600      	movs	r6, #0
 8004214:	2e09      	cmp	r6, #9
 8004216:	d812      	bhi.n	800423e <GetID+0xa2>
			if(!strcmp(string,groupAlias[i]))
 8004218:	490e      	ldr	r1, [pc, #56]	; (8004254 <GetID+0xb8>)
 800421a:	00b3      	lsls	r3, r6, #2
 800421c:	199b      	adds	r3, r3, r6
 800421e:	005a      	lsls	r2, r3, #1
 8004220:	3138      	adds	r1, #56	; 0x38
 8004222:	1889      	adds	r1, r1, r2
 8004224:	0028      	movs	r0, r5
 8004226:	f7fb ff6d 	bl	8000104 <strcmp>
 800422a:	2800      	cmp	r0, #0
 800422c:	d002      	beq.n	8004234 <GetID+0x98>
		for(i =0; i < MaxNumOfGroups; i++){
 800422e:	3601      	adds	r6, #1
 8004230:	b2f6      	uxtb	r6, r6
 8004232:	e7ef      	b.n	8004214 <GetID+0x78>
				return (BOS_MULTICAST | (i << 8));
 8004234:	0234      	lsls	r4, r6, #8
 8004236:	20fe      	movs	r0, #254	; 0xfe
 8004238:	4320      	orrs	r0, r4
 800423a:	b200      	sxth	r0, r0
 800423c:	e7c2      	b.n	80041c4 <GetID+0x28>
		return BOS_ERR_WrongName;
 800423e:	2064      	movs	r0, #100	; 0x64
 8004240:	e7c0      	b.n	80041c4 <GetID+0x28>
		return BOS_BROADCAST;
 8004242:	20ff      	movs	r0, #255	; 0xff
 8004244:	e7be      	b.n	80041c4 <GetID+0x28>
			return BOS_ERR_WrongID;
 8004246:	2066      	movs	r0, #102	; 0x66
 8004248:	e7bc      	b.n	80041c4 <GetID+0x28>
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	08017f6c 	.word	0x08017f6c
 8004250:	08017f70 	.word	0x08017f70
 8004254:	20000a98 	.word	0x20000a98
 8004258:	20000008 	.word	0x20000008
 800425c:	20000dc4 	.word	0x20000dc4

08004260 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	0006      	movs	r6, r0
 8004264:	000d      	movs	r5, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
 8004266:	2400      	movs	r4, #0
 8004268:	2c03      	cmp	r4, #3
 800426a:	dc09      	bgt.n	8004280 <NameModule+0x20>
		if(!strcmp(alias,BOSkeywords[i]))
 800426c:	00a3      	lsls	r3, r4, #2
 800426e:	492a      	ldr	r1, [pc, #168]	; (8004318 <NameModule+0xb8>)
 8004270:	18c9      	adds	r1, r1, r3
 8004272:	0028      	movs	r0, r5
 8004274:	f7fb ff46 	bl	8000104 <strcmp>
 8004278:	2800      	cmp	r0, #0
 800427a:	d044      	beq.n	8004306 <NameModule+0xa6>
	for(i =0; i < NumOfKeywords; i++){
 800427c:	3401      	adds	r4, #1
 800427e:	e7f3      	b.n	8004268 <NameModule+0x8>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004280:	2401      	movs	r4, #1
 8004282:	4b26      	ldr	r3, [pc, #152]	; (800431c <NameModule+0xbc>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	42a3      	cmp	r3, r4
 8004288:	dd0b      	ble.n	80042a2 <NameModule+0x42>
		if(!strcmp(alias,moduleAlias[i]))
 800428a:	00a3      	lsls	r3, r4, #2
 800428c:	191b      	adds	r3, r3, r4
 800428e:	0059      	lsls	r1, r3, #1
 8004290:	4b23      	ldr	r3, [pc, #140]	; (8004320 <NameModule+0xc0>)
 8004292:	18c9      	adds	r1, r1, r3
 8004294:	0028      	movs	r0, r5
 8004296:	f7fb ff35 	bl	8000104 <strcmp>
 800429a:	2800      	cmp	r0, #0
 800429c:	d035      	beq.n	800430a <NameModule+0xaa>
	for(i =1; i < N; i++){
 800429e:	3401      	adds	r4, #1
 80042a0:	e7ef      	b.n	8004282 <NameModule+0x22>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
 80042a2:	2400      	movs	r4, #0
 80042a4:	2c09      	cmp	r4, #9
 80042a6:	dc0c      	bgt.n	80042c2 <NameModule+0x62>
		if(!strcmp(alias,groupAlias[i]))
 80042a8:	491e      	ldr	r1, [pc, #120]	; (8004324 <NameModule+0xc4>)
 80042aa:	00a3      	lsls	r3, r4, #2
 80042ac:	191b      	adds	r3, r3, r4
 80042ae:	005a      	lsls	r2, r3, #1
 80042b0:	3138      	adds	r1, #56	; 0x38
 80042b2:	1889      	adds	r1, r1, r2
 80042b4:	0028      	movs	r0, r5
 80042b6:	f7fb ff25 	bl	8000104 <strcmp>
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d027      	beq.n	800430e <NameModule+0xae>
	for(i =0; i < MaxNumOfGroups; i++){
 80042be:	3401      	adds	r4, #1
 80042c0:	e7f0      	b.n	80042a4 <NameModule+0x44>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <NameModule+0xc8>)
 80042c4:	4a19      	ldr	r2, [pc, #100]	; (800432c <NameModule+0xcc>)
 80042c6:	61da      	str	r2, [r3, #28]
 80042c8:	4b17      	ldr	r3, [pc, #92]	; (8004328 <NameModule+0xc8>)
 80042ca:	69dc      	ldr	r4, [r3, #28]
 80042cc:	2c00      	cmp	r4, #0
 80042ce:	d00f      	beq.n	80042f0 <NameModule+0x90>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80042d4:	0038      	movs	r0, r7
 80042d6:	f7fb ff1f 	bl	8000118 <strlen>
 80042da:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80042dc:	0039      	movs	r1, r7
 80042de:	0028      	movs	r0, r5
 80042e0:	f00e ffa8 	bl	8013234 <strncmp>
 80042e4:	2800      	cmp	r0, #0
 80042e6:	d014      	beq.n	8004312 <NameModule+0xb2>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80042e8:	6862      	ldr	r2, [r4, #4]
 80042ea:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <NameModule+0xc8>)
 80042ec:	61da      	str	r2, [r3, #28]
 80042ee:	e7eb      	b.n	80042c8 <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 80042f0:	00b3      	lsls	r3, r6, #2
 80042f2:	199e      	adds	r6, r3, r6
 80042f4:	0070      	lsls	r0, r6, #1
 80042f6:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <NameModule+0xc0>)
 80042f8:	18c0      	adds	r0, r0, r3
 80042fa:	0029      	movs	r1, r5
 80042fc:	f00e ff92 	bl	8013224 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 8004300:	f7ff f8c0 	bl	8003484 <SaveEEalias>
	
	return result;
 8004304:	e002      	b.n	800430c <NameModule+0xac>
			return BOS_ERR_Keyword;
 8004306:	2006      	movs	r0, #6
 8004308:	e000      	b.n	800430c <NameModule+0xac>
			return BOS_ERR_ExistingAlias;
 800430a:	2007      	movs	r0, #7
}
 800430c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 800430e:	2007      	movs	r0, #7
 8004310:	e7fc      	b.n	800430c <NameModule+0xac>
			return BOS_ERR_ExistingCmd;
 8004312:	2008      	movs	r0, #8
 8004314:	e7fa      	b.n	800430c <NameModule+0xac>
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	08017604 	.word	0x08017604
 800431c:	20000008 	.word	0x20000008
 8004320:	20000dc4 	.word	0x20000dc4
 8004324:	20000a98 	.word	0x20000a98
 8004328:	20000c18 	.word	0x20000c18
 800432c:	200000bc 	.word	0x200000bc

08004330 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	0005      	movs	r5, r0
 8004334:	000c      	movs	r4, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 8004336:	2600      	movs	r6, #0
 8004338:	2e09      	cmp	r6, #9
 800433a:	dc16      	bgt.n	800436a <AddModuleToGroup+0x3a>
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800433c:	4939      	ldr	r1, [pc, #228]	; (8004424 <AddModuleToGroup+0xf4>)
 800433e:	00b3      	lsls	r3, r6, #2
 8004340:	199b      	adds	r3, r3, r6
 8004342:	005a      	lsls	r2, r3, #1
 8004344:	3138      	adds	r1, #56	; 0x38
 8004346:	1889      	adds	r1, r1, r2
 8004348:	0020      	movs	r0, r4
 800434a:	f7fb fedb 	bl	8000104 <strcmp>
 800434e:	2800      	cmp	r0, #0
 8004350:	d001      	beq.n	8004356 <AddModuleToGroup+0x26>
	for(i =0; i < MaxNumOfGroups; i++){
 8004352:	3601      	adds	r6, #1
 8004354:	e7f0      	b.n	8004338 <AddModuleToGroup+0x8>
			/* 1. Add this module to the group */
			groupModules[module - 1] |=(0x0001 << i);
 8004356:	3d01      	subs	r5, #1
 8004358:	2201      	movs	r2, #1
 800435a:	40b2      	lsls	r2, r6
 800435c:	006b      	lsls	r3, r5, #1
 800435e:	4d31      	ldr	r5, [pc, #196]	; (8004424 <AddModuleToGroup+0xf4>)
 8004360:	18ed      	adds	r5, r5, r3
 8004362:	88ab      	ldrh	r3, [r5, #4]
 8004364:	4313      	orrs	r3, r2
 8004366:	80ab      	strh	r3, [r5, #4]
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 8004368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for(j =0; j < NumOfKeywords; j++){
 800436a:	2600      	movs	r6, #0
 800436c:	2e03      	cmp	r6, #3
 800436e:	dc09      	bgt.n	8004384 <AddModuleToGroup+0x54>
		if(!strcmp(group,BOSkeywords[j]))
 8004370:	00b3      	lsls	r3, r6, #2
 8004372:	492d      	ldr	r1, [pc, #180]	; (8004428 <AddModuleToGroup+0xf8>)
 8004374:	18c9      	adds	r1, r1, r3
 8004376:	0020      	movs	r0, r4
 8004378:	f7fb fec4 	bl	8000104 <strcmp>
 800437c:	2800      	cmp	r0, #0
 800437e:	d04c      	beq.n	800441a <AddModuleToGroup+0xea>
	for(j =0; j < NumOfKeywords; j++){
 8004380:	3601      	adds	r6, #1
 8004382:	e7f3      	b.n	800436c <AddModuleToGroup+0x3c>
	for(j =1; j < N; j++){
 8004384:	2601      	movs	r6, #1
 8004386:	4b29      	ldr	r3, [pc, #164]	; (800442c <AddModuleToGroup+0xfc>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	42b3      	cmp	r3, r6
 800438c:	dd0b      	ble.n	80043a6 <AddModuleToGroup+0x76>
		if(!strcmp(group,moduleAlias[j]))
 800438e:	00b3      	lsls	r3, r6, #2
 8004390:	199b      	adds	r3, r3, r6
 8004392:	0059      	lsls	r1, r3, #1
 8004394:	4b26      	ldr	r3, [pc, #152]	; (8004430 <AddModuleToGroup+0x100>)
 8004396:	18c9      	adds	r1, r1, r3
 8004398:	0020      	movs	r0, r4
 800439a:	f7fb feb3 	bl	8000104 <strcmp>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d03d      	beq.n	800441e <AddModuleToGroup+0xee>
	for(j =1; j < N; j++){
 80043a2:	3601      	adds	r6, #1
 80043a4:	e7ef      	b.n	8004386 <AddModuleToGroup+0x56>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80043a6:	4b23      	ldr	r3, [pc, #140]	; (8004434 <AddModuleToGroup+0x104>)
 80043a8:	4a23      	ldr	r2, [pc, #140]	; (8004438 <AddModuleToGroup+0x108>)
 80043aa:	621a      	str	r2, [r3, #32]
 80043ac:	e002      	b.n	80043b4 <AddModuleToGroup+0x84>
 80043ae:	6872      	ldr	r2, [r6, #4]
 80043b0:	4b20      	ldr	r3, [pc, #128]	; (8004434 <AddModuleToGroup+0x104>)
 80043b2:	621a      	str	r2, [r3, #32]
 80043b4:	4b1f      	ldr	r3, [pc, #124]	; (8004434 <AddModuleToGroup+0x104>)
 80043b6:	6a1e      	ldr	r6, [r3, #32]
 80043b8:	2e00      	cmp	r6, #0
 80043ba:	d021      	beq.n	8004400 <AddModuleToGroup+0xd0>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80043bc:	6833      	ldr	r3, [r6, #0]
 80043be:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80043c0:	0038      	movs	r0, r7
 80043c2:	f7fb fea9 	bl	8000118 <strlen>
 80043c6:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80043c8:	0039      	movs	r1, r7
 80043ca:	0020      	movs	r0, r4
 80043cc:	f00e ff32 	bl	8013234 <strncmp>
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d1ec      	bne.n	80043ae <AddModuleToGroup+0x7e>
			return BOS_ERR_ExistingCmd;
 80043d4:	2008      	movs	r0, #8
 80043d6:	e7c7      	b.n	8004368 <AddModuleToGroup+0x38>
			strcpy(groupAlias[i],group);
 80043d8:	4812      	ldr	r0, [pc, #72]	; (8004424 <AddModuleToGroup+0xf4>)
 80043da:	00b2      	lsls	r2, r6, #2
 80043dc:	1992      	adds	r2, r2, r6
 80043de:	0051      	lsls	r1, r2, #1
 80043e0:	3038      	adds	r0, #56	; 0x38
 80043e2:	1840      	adds	r0, r0, r1
 80043e4:	0021      	movs	r1, r4
 80043e6:	f00e ff1d 	bl	8013224 <strcpy>
	groupModules[module - 1] |=(0x0001 << i);
 80043ea:	3d01      	subs	r5, #1
 80043ec:	2201      	movs	r2, #1
 80043ee:	40b2      	lsls	r2, r6
 80043f0:	006d      	lsls	r5, r5, #1
 80043f2:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <AddModuleToGroup+0xf4>)
 80043f4:	195d      	adds	r5, r3, r5
 80043f6:	88ab      	ldrh	r3, [r5, #4]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	80ab      	strh	r3, [r5, #4]
	return result;
 80043fc:	2000      	movs	r0, #0
 80043fe:	e7b3      	b.n	8004368 <AddModuleToGroup+0x38>
	for(i =0; i < MaxNumOfGroups; i++){
 8004400:	2e09      	cmp	r6, #9
 8004402:	dcf2      	bgt.n	80043ea <AddModuleToGroup+0xba>
		if(!groupAlias[i][0]){
 8004404:	00b3      	lsls	r3, r6, #2
 8004406:	199b      	adds	r3, r3, r6
 8004408:	005a      	lsls	r2, r3, #1
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <AddModuleToGroup+0xf4>)
 800440c:	189b      	adds	r3, r3, r2
 800440e:	2238      	movs	r2, #56	; 0x38
 8004410:	5c9b      	ldrb	r3, [r3, r2]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0e0      	beq.n	80043d8 <AddModuleToGroup+0xa8>
	for(i =0; i < MaxNumOfGroups; i++){
 8004416:	3601      	adds	r6, #1
 8004418:	e7f2      	b.n	8004400 <AddModuleToGroup+0xd0>
			return BOS_ERR_Keyword;
 800441a:	2006      	movs	r0, #6
 800441c:	e7a4      	b.n	8004368 <AddModuleToGroup+0x38>
			return BOS_ERR_ExistingAlias;
 800441e:	2007      	movs	r0, #7
 8004420:	e7a2      	b.n	8004368 <AddModuleToGroup+0x38>
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	20000a98 	.word	0x20000a98
 8004428:	08017604 	.word	0x08017604
 800442c:	20000008 	.word	0x20000008
 8004430:	20000dc4 	.word	0x20000dc4
 8004434:	20000c18 	.word	0x20000c18
 8004438:	200000bc 	.word	0x200000bc

0800443c <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 800443c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800443e:	46c6      	mov	lr, r8
 8004440:	b500      	push	{lr}
 8004442:	b082      	sub	sp, #8
 8004444:	9000      	str	r0, [sp, #0]
 8004446:	ad08      	add	r5, sp, #32
 8004448:	cd10      	ldmia	r5!, {r4}
 800444a:	782d      	ldrb	r5, [r5, #0]
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 800444c:	4e95      	ldr	r6, [pc, #596]	; (80046a4 <WriteToRemote+0x268>)
 800444e:	7837      	ldrb	r7, [r6, #0]
	if(timeout)
 8004450:	2c00      	cmp	r4, #0
 8004452:	d014      	beq.n	800447e <WriteToRemote+0x42>
		BOSMessaging.response = BOS_RESPONSE_MSG;
 8004454:	2020      	movs	r0, #32
 8004456:	7030      	strb	r0, [r6, #0]
	else
		BOSMessaging.response = BOS_RESPONSE_NONE;
	
	/* Check if a force write is needed */
	if(force)
 8004458:	2d00      	cmp	r5, #0
 800445a:	d014      	beq.n	8004486 <WriteToRemote+0x4a>
		code = CODE_WRITE_REMOTE_FORCE;
 800445c:	2022      	movs	r0, #34	; 0x22
 800445e:	9001      	str	r0, [sp, #4]
	else
		code = CODE_WRITE_REMOTE;
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 8004460:	4d91      	ldr	r5, [pc, #580]	; (80046a8 <WriteToRemote+0x26c>)
 8004462:	42aa      	cmp	r2, r5
 8004464:	d900      	bls.n	8004468 <WriteToRemote+0x2c>
 8004466:	e087      	b.n	8004578 <WriteToRemote+0x13c>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 8004468:	4d90      	ldr	r5, [pc, #576]	; (80046ac <WriteToRemote+0x270>)
 800446a:	2624      	movs	r6, #36	; 0x24
 800446c:	55aa      	strb	r2, [r5, r6]
		messageParams[1] =format;						// Send local format
 800446e:	3524      	adds	r5, #36	; 0x24
 8004470:	706b      	strb	r3, [r5, #1]
		/* Send variable value based on local format */
		switch(format){
 8004472:	2b08      	cmp	r3, #8
 8004474:	d813      	bhi.n	800449e <WriteToRemote+0x62>
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4a8d      	ldr	r2, [pc, #564]	; (80046b0 <WriteToRemote+0x274>)
 800447a:	58d3      	ldr	r3, [r2, r3]
 800447c:	469f      	mov	pc, r3
		BOSMessaging.response = BOS_RESPONSE_NONE;
 800447e:	4e89      	ldr	r6, [pc, #548]	; (80046a4 <WriteToRemote+0x268>)
 8004480:	2000      	movs	r0, #0
 8004482:	7030      	strb	r0, [r6, #0]
 8004484:	e7e8      	b.n	8004458 <WriteToRemote+0x1c>
		code = CODE_WRITE_REMOTE;
 8004486:	2020      	movs	r0, #32
 8004488:	9001      	str	r0, [sp, #4]
 800448a:	e7e9      	b.n	8004460 <WriteToRemote+0x24>
			case FMT_BOOL:
			case FMT_UINT8:
				messageParams[2] =*(__IO uint8_t* )localAddress;
 800448c:	780a      	ldrb	r2, [r1, #0]
 800448e:	4b87      	ldr	r3, [pc, #540]	; (80046ac <WriteToRemote+0x270>)
 8004490:	3324      	adds	r3, #36	; 0x24
 8004492:	709a      	strb	r2, [r3, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 8004494:	2203      	movs	r2, #3
 8004496:	2120      	movs	r1, #32
 8004498:	9800      	ldr	r0, [sp, #0]
 800449a:	f003 fec3 	bl	8008224 <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 800449e:	4b81      	ldr	r3, [pc, #516]	; (80046a4 <WriteToRemote+0x268>)
 80044a0:	701f      	strb	r7, [r3, #0]
	
	/* If confirmation is requested, wait for it until timeout */
	if(timeout){
 80044a2:	2c00      	cmp	r4, #0
 80044a4:	d000      	beq.n	80044a8 <WriteToRemote+0x6c>
 80044a6:	e0ec      	b.n	8004682 <WriteToRemote+0x246>
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 80044a8:	2000      	movs	r0, #0
}
 80044aa:	b002      	add	sp, #8
 80044ac:	bc04      	pop	{r2}
 80044ae:	4690      	mov	r8, r2
 80044b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				messageParams[2] =*(__IO int8_t* )localAddress;
 80044b2:	780a      	ldrb	r2, [r1, #0]
 80044b4:	4b7d      	ldr	r3, [pc, #500]	; (80046ac <WriteToRemote+0x270>)
 80044b6:	3324      	adds	r3, #36	; 0x24
 80044b8:	709a      	strb	r2, [r3, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 80044ba:	2203      	movs	r2, #3
 80044bc:	2120      	movs	r1, #32
 80044be:	9800      	ldr	r0, [sp, #0]
 80044c0:	f003 feb0 	bl	8008224 <SendMessageToModule>
				break;
 80044c4:	e7eb      	b.n	800449e <WriteToRemote+0x62>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 80044c6:	880a      	ldrh	r2, [r1, #0]
 80044c8:	4b78      	ldr	r3, [pc, #480]	; (80046ac <WriteToRemote+0x270>)
 80044ca:	3324      	adds	r3, #36	; 0x24
 80044cc:	709a      	strb	r2, [r3, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 80044ce:	880a      	ldrh	r2, [r1, #0]
 80044d0:	0a12      	lsrs	r2, r2, #8
 80044d2:	70da      	strb	r2, [r3, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 80044d4:	2204      	movs	r2, #4
 80044d6:	2120      	movs	r1, #32
 80044d8:	9800      	ldr	r0, [sp, #0]
 80044da:	f003 fea3 	bl	8008224 <SendMessageToModule>
				break;
 80044de:	e7de      	b.n	800449e <WriteToRemote+0x62>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 80044e0:	880b      	ldrh	r3, [r1, #0]
 80044e2:	4a72      	ldr	r2, [pc, #456]	; (80046ac <WriteToRemote+0x270>)
 80044e4:	3224      	adds	r2, #36	; 0x24
 80044e6:	7093      	strb	r3, [r2, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80044e8:	880b      	ldrh	r3, [r1, #0]
 80044ea:	b21b      	sxth	r3, r3
 80044ec:	121b      	asrs	r3, r3, #8
 80044ee:	70d3      	strb	r3, [r2, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 80044f0:	2204      	movs	r2, #4
 80044f2:	2120      	movs	r1, #32
 80044f4:	9800      	ldr	r0, [sp, #0]
 80044f6:	f003 fe95 	bl	8008224 <SendMessageToModule>
				break;
 80044fa:	e7d0      	b.n	800449e <WriteToRemote+0x62>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 80044fc:	680a      	ldr	r2, [r1, #0]
 80044fe:	4b6b      	ldr	r3, [pc, #428]	; (80046ac <WriteToRemote+0x270>)
 8004500:	3324      	adds	r3, #36	; 0x24
 8004502:	709a      	strb	r2, [r3, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 8004504:	680a      	ldr	r2, [r1, #0]
 8004506:	0a12      	lsrs	r2, r2, #8
 8004508:	70da      	strb	r2, [r3, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 800450a:	680a      	ldr	r2, [r1, #0]
 800450c:	0c12      	lsrs	r2, r2, #16
 800450e:	711a      	strb	r2, [r3, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004510:	680a      	ldr	r2, [r1, #0]
 8004512:	0e12      	lsrs	r2, r2, #24
 8004514:	715a      	strb	r2, [r3, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 8004516:	2206      	movs	r2, #6
 8004518:	2120      	movs	r1, #32
 800451a:	9800      	ldr	r0, [sp, #0]
 800451c:	f003 fe82 	bl	8008224 <SendMessageToModule>
				break;
 8004520:	e7bd      	b.n	800449e <WriteToRemote+0x62>
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 8004522:	680a      	ldr	r2, [r1, #0]
 8004524:	4b61      	ldr	r3, [pc, #388]	; (80046ac <WriteToRemote+0x270>)
 8004526:	3324      	adds	r3, #36	; 0x24
 8004528:	709a      	strb	r2, [r3, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 800452a:	680a      	ldr	r2, [r1, #0]
 800452c:	1212      	asrs	r2, r2, #8
 800452e:	70da      	strb	r2, [r3, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 8004530:	680a      	ldr	r2, [r1, #0]
 8004532:	1412      	asrs	r2, r2, #16
 8004534:	711a      	strb	r2, [r3, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004536:	680a      	ldr	r2, [r1, #0]
 8004538:	0e12      	lsrs	r2, r2, #24
 800453a:	715a      	strb	r2, [r3, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 800453c:	2206      	movs	r2, #6
 800453e:	2120      	movs	r1, #32
 8004540:	9800      	ldr	r0, [sp, #0]
 8004542:	f003 fe6f 	bl	8008224 <SendMessageToModule>
				break;
 8004546:	e7aa      	b.n	800449e <WriteToRemote+0x62>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 8004548:	780a      	ldrb	r2, [r1, #0]
 800454a:	4b58      	ldr	r3, [pc, #352]	; (80046ac <WriteToRemote+0x270>)
 800454c:	3324      	adds	r3, #36	; 0x24
 800454e:	709a      	strb	r2, [r3, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004550:	784a      	ldrb	r2, [r1, #1]
 8004552:	70da      	strb	r2, [r3, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 8004554:	788a      	ldrb	r2, [r1, #2]
 8004556:	711a      	strb	r2, [r3, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 8004558:	78ca      	ldrb	r2, [r1, #3]
 800455a:	715a      	strb	r2, [r3, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 800455c:	790a      	ldrb	r2, [r1, #4]
 800455e:	719a      	strb	r2, [r3, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 8004560:	794a      	ldrb	r2, [r1, #5]
 8004562:	71da      	strb	r2, [r3, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 8004564:	798a      	ldrb	r2, [r1, #6]
 8004566:	721a      	strb	r2, [r3, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004568:	79ca      	ldrb	r2, [r1, #7]
 800456a:	725a      	strb	r2, [r3, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800456c:	220a      	movs	r2, #10
 800456e:	2120      	movs	r1, #32
 8004570:	9800      	ldr	r0, [sp, #0]
 8004572:	f003 fe57 	bl	8008224 <SendMessageToModule>
				break;
 8004576:	e792      	b.n	800449e <WriteToRemote+0x62>
		messageParams[0] =0;
 8004578:	4d4c      	ldr	r5, [pc, #304]	; (80046ac <WriteToRemote+0x270>)
 800457a:	2024      	movs	r0, #36	; 0x24
 800457c:	4684      	mov	ip, r0
 800457e:	2000      	movs	r0, #0
 8004580:	4680      	mov	r8, r0
 8004582:	4660      	mov	r0, ip
 8004584:	4646      	mov	r6, r8
 8004586:	542e      	strb	r6, [r5, r0]
		messageParams[1] =format;							// Local format
 8004588:	3524      	adds	r5, #36	; 0x24
 800458a:	706b      	strb	r3, [r5, #1]
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 800458c:	0e10      	lsrs	r0, r2, #24
 800458e:	70a8      	strb	r0, [r5, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 8004590:	0c10      	lsrs	r0, r2, #16
 8004592:	70e8      	strb	r0, [r5, #3]
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 8004594:	0a10      	lsrs	r0, r2, #8
 8004596:	7128      	strb	r0, [r5, #4]
		messageParams[5] =(uint8_t )remoteAddress;
 8004598:	716a      	strb	r2, [r5, #5]
		switch(format){
 800459a:	2b08      	cmp	r3, #8
 800459c:	d900      	bls.n	80045a0 <WriteToRemote+0x164>
 800459e:	e77e      	b.n	800449e <WriteToRemote+0x62>
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4a44      	ldr	r2, [pc, #272]	; (80046b4 <WriteToRemote+0x278>)
 80045a4:	58d3      	ldr	r3, [r2, r3]
 80045a6:	469f      	mov	pc, r3
				messageParams[6] =*(__IO uint8_t* )localAddress;
 80045a8:	780a      	ldrb	r2, [r1, #0]
 80045aa:	4b40      	ldr	r3, [pc, #256]	; (80046ac <WriteToRemote+0x270>)
 80045ac:	3324      	adds	r3, #36	; 0x24
 80045ae:	719a      	strb	r2, [r3, #6]
				SendMessageToModule(module,code,7);
 80045b0:	2207      	movs	r2, #7
 80045b2:	9901      	ldr	r1, [sp, #4]
 80045b4:	9800      	ldr	r0, [sp, #0]
 80045b6:	f003 fe35 	bl	8008224 <SendMessageToModule>
				break;
 80045ba:	e770      	b.n	800449e <WriteToRemote+0x62>
				messageParams[6] =*(__IO int8_t* )localAddress;
 80045bc:	780a      	ldrb	r2, [r1, #0]
 80045be:	4b3b      	ldr	r3, [pc, #236]	; (80046ac <WriteToRemote+0x270>)
 80045c0:	3324      	adds	r3, #36	; 0x24
 80045c2:	719a      	strb	r2, [r3, #6]
				SendMessageToModule(module,code,7);
 80045c4:	2207      	movs	r2, #7
 80045c6:	9901      	ldr	r1, [sp, #4]
 80045c8:	9800      	ldr	r0, [sp, #0]
 80045ca:	f003 fe2b 	bl	8008224 <SendMessageToModule>
				break;
 80045ce:	e766      	b.n	800449e <WriteToRemote+0x62>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 80045d0:	880a      	ldrh	r2, [r1, #0]
 80045d2:	4b36      	ldr	r3, [pc, #216]	; (80046ac <WriteToRemote+0x270>)
 80045d4:	3324      	adds	r3, #36	; 0x24
 80045d6:	719a      	strb	r2, [r3, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 80045d8:	880a      	ldrh	r2, [r1, #0]
 80045da:	0a12      	lsrs	r2, r2, #8
 80045dc:	71da      	strb	r2, [r3, #7]
				SendMessageToModule(module,code,8);
 80045de:	2208      	movs	r2, #8
 80045e0:	9901      	ldr	r1, [sp, #4]
 80045e2:	9800      	ldr	r0, [sp, #0]
 80045e4:	f003 fe1e 	bl	8008224 <SendMessageToModule>
				break;
 80045e8:	e759      	b.n	800449e <WriteToRemote+0x62>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 80045ea:	880b      	ldrh	r3, [r1, #0]
 80045ec:	4a2f      	ldr	r2, [pc, #188]	; (80046ac <WriteToRemote+0x270>)
 80045ee:	3224      	adds	r2, #36	; 0x24
 80045f0:	7193      	strb	r3, [r2, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80045f2:	880b      	ldrh	r3, [r1, #0]
 80045f4:	b21b      	sxth	r3, r3
 80045f6:	121b      	asrs	r3, r3, #8
 80045f8:	71d3      	strb	r3, [r2, #7]
				SendMessageToModule(module,code,8);
 80045fa:	2208      	movs	r2, #8
 80045fc:	9901      	ldr	r1, [sp, #4]
 80045fe:	9800      	ldr	r0, [sp, #0]
 8004600:	f003 fe10 	bl	8008224 <SendMessageToModule>
				break;
 8004604:	e74b      	b.n	800449e <WriteToRemote+0x62>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 8004606:	680a      	ldr	r2, [r1, #0]
 8004608:	4b28      	ldr	r3, [pc, #160]	; (80046ac <WriteToRemote+0x270>)
 800460a:	3324      	adds	r3, #36	; 0x24
 800460c:	719a      	strb	r2, [r3, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 800460e:	680a      	ldr	r2, [r1, #0]
 8004610:	0a12      	lsrs	r2, r2, #8
 8004612:	71da      	strb	r2, [r3, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 8004614:	680a      	ldr	r2, [r1, #0]
 8004616:	0c12      	lsrs	r2, r2, #16
 8004618:	721a      	strb	r2, [r3, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 800461a:	680a      	ldr	r2, [r1, #0]
 800461c:	0e12      	lsrs	r2, r2, #24
 800461e:	725a      	strb	r2, [r3, #9]
				SendMessageToModule(module,code,10);
 8004620:	220a      	movs	r2, #10
 8004622:	9901      	ldr	r1, [sp, #4]
 8004624:	9800      	ldr	r0, [sp, #0]
 8004626:	f003 fdfd 	bl	8008224 <SendMessageToModule>
				break;
 800462a:	e738      	b.n	800449e <WriteToRemote+0x62>
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 800462c:	680a      	ldr	r2, [r1, #0]
 800462e:	4b1f      	ldr	r3, [pc, #124]	; (80046ac <WriteToRemote+0x270>)
 8004630:	3324      	adds	r3, #36	; 0x24
 8004632:	719a      	strb	r2, [r3, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 8004634:	680a      	ldr	r2, [r1, #0]
 8004636:	1212      	asrs	r2, r2, #8
 8004638:	71da      	strb	r2, [r3, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 800463a:	680a      	ldr	r2, [r1, #0]
 800463c:	1412      	asrs	r2, r2, #16
 800463e:	721a      	strb	r2, [r3, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004640:	680a      	ldr	r2, [r1, #0]
 8004642:	0e12      	lsrs	r2, r2, #24
 8004644:	725a      	strb	r2, [r3, #9]
				SendMessageToModule(module,code,10);
 8004646:	220a      	movs	r2, #10
 8004648:	9901      	ldr	r1, [sp, #4]
 800464a:	9800      	ldr	r0, [sp, #0]
 800464c:	f003 fdea 	bl	8008224 <SendMessageToModule>
				break;
 8004650:	e725      	b.n	800449e <WriteToRemote+0x62>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 8004652:	780a      	ldrb	r2, [r1, #0]
 8004654:	4b15      	ldr	r3, [pc, #84]	; (80046ac <WriteToRemote+0x270>)
 8004656:	3324      	adds	r3, #36	; 0x24
 8004658:	719a      	strb	r2, [r3, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 800465a:	784a      	ldrb	r2, [r1, #1]
 800465c:	71da      	strb	r2, [r3, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 800465e:	788a      	ldrb	r2, [r1, #2]
 8004660:	721a      	strb	r2, [r3, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 8004662:	78ca      	ldrb	r2, [r1, #3]
 8004664:	725a      	strb	r2, [r3, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 8004666:	790a      	ldrb	r2, [r1, #4]
 8004668:	729a      	strb	r2, [r3, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 800466a:	794a      	ldrb	r2, [r1, #5]
 800466c:	72da      	strb	r2, [r3, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 800466e:	798a      	ldrb	r2, [r1, #6]
 8004670:	731a      	strb	r2, [r3, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004672:	79ca      	ldrb	r2, [r1, #7]
 8004674:	735a      	strb	r2, [r3, #13]
				SendMessageToModule(module,code,14);
 8004676:	220e      	movs	r2, #14
 8004678:	9901      	ldr	r1, [sp, #4]
 800467a:	9800      	ldr	r0, [sp, #0]
 800467c:	f003 fdd2 	bl	8008224 <SendMessageToModule>
				break;
 8004680:	e70d      	b.n	800449e <WriteToRemote+0x62>
		uint32_t t0 =HAL_GetTick();
 8004682:	f00b f883 	bl	800f78c <HAL_GetTick>
 8004686:	0005      	movs	r5, r0
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 8004688:	4a0b      	ldr	r2, [pc, #44]	; (80046b8 <WriteToRemote+0x27c>)
 800468a:	2324      	movs	r3, #36	; 0x24
 800468c:	5cd3      	ldrb	r3, [r2, r3]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d004      	beq.n	800469c <WriteToRemote+0x260>
 8004692:	f00b f87b 	bl	800f78c <HAL_GetTick>
 8004696:	1b40      	subs	r0, r0, r5
 8004698:	42a0      	cmp	r0, r4
 800469a:	d3f5      	bcc.n	8004688 <WriteToRemote+0x24c>
		return responseStatus;
 800469c:	4a06      	ldr	r2, [pc, #24]	; (80046b8 <WriteToRemote+0x27c>)
 800469e:	2324      	movs	r3, #36	; 0x24
 80046a0:	5cd0      	ldrb	r0, [r2, r3]
 80046a2:	e702      	b.n	80044aa <WriteToRemote+0x6e>
 80046a4:	200067c8 	.word	0x200067c8
 80046a8:	07ffffff 	.word	0x07ffffff
 80046ac:	20000b18 	.word	0x20000b18
 80046b0:	080175bc 	.word	0x080175bc
 80046b4:	080175e0 	.word	0x080175e0
 80046b8:	20000c18 	.word	0x20000c18

080046bc <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 80046bc:	b530      	push	{r4, r5, lr}
 80046be:	b083      	sub	sp, #12
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 80046c0:	201e      	movs	r0, #30
 80046c2:	f00e f923 	bl	801290c <malloc>
 80046c6:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 80046c8:	221e      	movs	r2, #30
 80046ca:	2100      	movs	r1, #0
 80046cc:	f00e fb74 	bl	8012db8 <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 80046d0:	4909      	ldr	r1, [pc, #36]	; (80046f8 <GetDateString+0x3c>)
 80046d2:	7d0a      	ldrb	r2, [r1, #20]
 80046d4:	3a01      	subs	r2, #1
 80046d6:	7d8b      	ldrb	r3, [r1, #22]
 80046d8:	7d48      	ldrb	r0, [r1, #21]
 80046da:	8b0d      	ldrh	r5, [r1, #24]
 80046dc:	4907      	ldr	r1, [pc, #28]	; (80046fc <GetDateString+0x40>)
 80046de:	0092      	lsls	r2, r2, #2
 80046e0:	188a      	adds	r2, r1, r2
 80046e2:	6912      	ldr	r2, [r2, #16]
 80046e4:	312c      	adds	r1, #44	; 0x2c
 80046e6:	9501      	str	r5, [sp, #4]
 80046e8:	9000      	str	r0, [sp, #0]
 80046ea:	0020      	movs	r0, r4
 80046ec:	f00e fd5e 	bl	80131ac <sprintf>
	return buffer;
}
 80046f0:	0020      	movs	r0, r4
 80046f2:	b003      	add	sp, #12
 80046f4:	bd30      	pop	{r4, r5, pc}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	20006848 	.word	0x20006848
 80046fc:	08017604 	.word	0x08017604

08004700 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004700:	b500      	push	{lr}
 8004702:	b085      	sub	sp, #20
 8004704:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004706:	4b07      	ldr	r3, [pc, #28]	; (8004724 <Bridge+0x24>)
 8004708:	7819      	ldrb	r1, [r3, #0]
 800470a:	2301      	movs	r3, #1
 800470c:	9303      	str	r3, [sp, #12]
 800470e:	3b02      	subs	r3, #2
 8004710:	9302      	str	r3, [sp, #8]
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	3303      	adds	r3, #3
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	000b      	movs	r3, r1
 800471a:	f003 fda9 	bl	8008270 <StartScastDMAStream>
}
 800471e:	b005      	add	sp, #20
 8004720:	bd00      	pop	{pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	20000a98 	.word	0x20000a98

08004728 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 8004728:	b530      	push	{r4, r5, lr}
 800472a:	b087      	sub	sp, #28
 800472c:	0004      	movs	r4, r0
 800472e:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004730:	2300      	movs	r3, #0
 8004732:	9304      	str	r3, [sp, #16]
 8004734:	9303      	str	r3, [sp, #12]
 8004736:	9302      	str	r3, [sp, #8]
 8004738:	9301      	str	r3, [sp, #4]
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	2200      	movs	r2, #0
 800473e:	2100      	movs	r1, #0
 8004740:	2000      	movs	r0, #0
 8004742:	f7fe fecf 	bl	80034e4 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 8004746:	1e62      	subs	r2, r4, #1
 8004748:	00d3      	lsls	r3, r2, #3
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	00da      	lsls	r2, r3, #3
 800474e:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <Unbridge+0x7c>)
 8004750:	58d2      	ldr	r2, [r2, r3]
 8004752:	2a00      	cmp	r2, #0
 8004754:	d007      	beq.n	8004766 <Unbridge+0x3e>
 8004756:	1e69      	subs	r1, r5, #1
 8004758:	00cb      	lsls	r3, r1, #3
 800475a:	1a5b      	subs	r3, r3, r1
 800475c:	00d9      	lsls	r1, r3, #3
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <Unbridge+0x7c>)
 8004760:	58cb      	ldr	r3, [r1, r3]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10e      	bne.n	8004784 <Unbridge+0x5c>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
 8004766:	2a00      	cmp	r2, #0
 8004768:	d115      	bne.n	8004796 <Unbridge+0x6e>
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
 800476a:	1e6a      	subs	r2, r5, #1
 800476c:	00d3      	lsls	r3, r2, #3
 800476e:	1a9b      	subs	r3, r3, r2
 8004770:	00da      	lsls	r2, r3, #3
 8004772:	4b0c      	ldr	r3, [pc, #48]	; (80047a4 <Unbridge+0x7c>)
 8004774:	58d3      	ldr	r3, [r2, r3]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d012      	beq.n	80047a0 <Unbridge+0x78>
		SwitchStreamDMAToMsg(port2);
 800477a:	0028      	movs	r0, r5
 800477c:	f006 fc10 	bl	800afa0 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004780:	2000      	movs	r0, #0
 8004782:	e006      	b.n	8004792 <Unbridge+0x6a>
		SwitchStreamDMAToMsg(port1);
 8004784:	0020      	movs	r0, r4
 8004786:	f006 fc0b 	bl	800afa0 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 800478a:	0028      	movs	r0, r5
 800478c:	f006 fc08 	bl	800afa0 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004790:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 8004792:	b007      	add	sp, #28
 8004794:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 8004796:	0020      	movs	r0, r4
 8004798:	f006 fc02 	bl	800afa0 <SwitchStreamDMAToMsg>
		return BOS_OK;
 800479c:	2000      	movs	r0, #0
 800479e:	e7f8      	b.n	8004792 <Unbridge+0x6a>
		return BOS_ERR_WrongValue;
 80047a0:	2068      	movs	r0, #104	; 0x68
 80047a2:	e7f6      	b.n	8004792 <Unbridge+0x6a>
 80047a4:	20002058 	.word	0x20002058

080047a8 <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	0007      	movs	r7, r0
	for(int i =0; string[i]; i++){
 80047ac:	2500      	movs	r5, #0
 80047ae:	e001      	b.n	80047b4 <StringToLowerCase+0xc>
		string[i] =tolower(string[i]);
 80047b0:	7034      	strb	r4, [r6, #0]
	for(int i =0; string[i]; i++){
 80047b2:	3501      	adds	r5, #1
 80047b4:	197e      	adds	r6, r7, r5
 80047b6:	7834      	ldrb	r4, [r6, #0]
 80047b8:	2c00      	cmp	r4, #0
 80047ba:	d009      	beq.n	80047d0 <StringToLowerCase+0x28>
		string[i] =tolower(string[i]);
 80047bc:	f00e f898 	bl	80128f0 <__locale_ctype_ptr>
 80047c0:	1900      	adds	r0, r0, r4
 80047c2:	7842      	ldrb	r2, [r0, #1]
 80047c4:	2303      	movs	r3, #3
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d1f1      	bne.n	80047b0 <StringToLowerCase+0x8>
 80047cc:	3420      	adds	r4, #32
 80047ce:	e7ef      	b.n	80047b0 <StringToLowerCase+0x8>
	}
}
 80047d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047d4 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 80047d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d6:	46c6      	mov	lr, r8
 80047d8:	b500      	push	{lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80047de:	4bd8      	ldr	r3, [pc, #864]	; (8004b40 <ParseSnippetCondition+0x36c>)
 80047e0:	781c      	ldrb	r4, [r3, #0]
 80047e2:	2c05      	cmp	r4, #5
 80047e4:	d100      	bne.n	80047e8 <ParseSnippetCondition+0x14>
 80047e6:	e20d      	b.n	8004c04 <ParseSnippetCondition+0x430>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80047e8:	48d6      	ldr	r0, [pc, #856]	; (8004b44 <ParseSnippetCondition+0x370>)
 80047ea:	00a3      	lsls	r3, r4, #2
 80047ec:	191a      	adds	r2, r3, r4
 80047ee:	0091      	lsls	r1, r2, #2
 80047f0:	2200      	movs	r2, #0
 80047f2:	540a      	strb	r2, [r1, r0]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 80047f4:	1840      	adds	r0, r0, r1
 80047f6:	7042      	strb	r2, [r0, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 80047f8:	3002      	adds	r0, #2
 80047fa:	3204      	adds	r2, #4
 80047fc:	2100      	movs	r1, #0
 80047fe:	f00e fadb 	bl	8012db8 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004802:	782b      	ldrb	r3, [r5, #0]
 8004804:	2b62      	cmp	r3, #98	; 0x62
 8004806:	d102      	bne.n	800480e <ParseSnippetCondition+0x3a>
 8004808:	78ab      	ldrb	r3, [r5, #2]
 800480a:	2b2e      	cmp	r3, #46	; 0x2e
 800480c:	d050      	beq.n	80048b0 <ParseSnippetCondition+0xdc>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 800480e:	4ccc      	ldr	r4, [pc, #816]	; (8004b40 <ParseSnippetCondition+0x36c>)
 8004810:	3404      	adds	r4, #4
 8004812:	0029      	movs	r1, r5
 8004814:	0020      	movs	r0, r4
 8004816:	f00e fd05 	bl	8013224 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 800481a:	4dcb      	ldr	r5, [pc, #812]	; (8004b48 <ParseSnippetCondition+0x374>)
 800481c:	0029      	movs	r1, r5
 800481e:	0020      	movs	r0, r4
 8004820:	f00f fb80 	bl	8013f24 <strtok>
 8004824:	0004      	movs	r4, r0
		secondPart =strtok( NULL," ");
 8004826:	0029      	movs	r1, r5
 8004828:	2000      	movs	r0, #0
 800482a:	f00f fb7b 	bl	8013f24 <strtok>
 800482e:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 8004830:	0029      	movs	r1, r5
 8004832:	2000      	movs	r0, #0
 8004834:	f00f fb76 	bl	8013f24 <strtok>
 8004838:	0005      	movs	r5, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 800483a:	2c00      	cmp	r4, #0
 800483c:	d100      	bne.n	8004840 <ParseSnippetCondition+0x6c>
 800483e:	e1e8      	b.n	8004c12 <ParseSnippetCondition+0x43e>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004840:	0020      	movs	r0, r4
 8004842:	f7fe ff5d 	bl	8003700 <IsModuleParameter>
 8004846:	1e04      	subs	r4, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004848:	d002      	beq.n	8004850 <ParseSnippetCondition+0x7c>
 800484a:	2e00      	cmp	r6, #0
 800484c:	d100      	bne.n	8004850 <ParseSnippetCondition+0x7c>
 800484e:	e1ab      	b.n	8004ba8 <ParseSnippetCondition+0x3d4>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004850:	2e00      	cmp	r6, #0
 8004852:	d100      	bne.n	8004856 <ParseSnippetCondition+0x82>
 8004854:	e1df      	b.n	8004c16 <ParseSnippetCondition+0x442>
 8004856:	2d00      	cmp	r5, #0
 8004858:	d100      	bne.n	800485c <ParseSnippetCondition+0x88>
 800485a:	e1de      	b.n	8004c1a <ParseSnippetCondition+0x446>
				modPar2 =IsModuleParameter(thirdPart);
 800485c:	0028      	movs	r0, r5
 800485e:	f7fe ff4f 	bl	8003700 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004862:	2800      	cmp	r0, #0
 8004864:	d100      	bne.n	8004868 <ParseSnippetCondition+0x94>
 8004866:	e1b0      	b.n	8004bca <ParseSnippetCondition+0x3f6>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004868:	4bb5      	ldr	r3, [pc, #724]	; (8004b40 <ParseSnippetCondition+0x36c>)
 800486a:	7819      	ldrb	r1, [r3, #0]
 800486c:	4ab5      	ldr	r2, [pc, #724]	; (8004b44 <ParseSnippetCondition+0x370>)
 800486e:	008b      	lsls	r3, r1, #2
 8004870:	185f      	adds	r7, r3, r1
 8004872:	00bd      	lsls	r5, r7, #2
 8004874:	2704      	movs	r7, #4
 8004876:	54af      	strb	r7, [r5, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004878:	1955      	adds	r5, r2, r5
 800487a:	70ec      	strb	r4, [r5, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 800487c:	71e8      	strb	r0, [r5, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 800487e:	4db0      	ldr	r5, [pc, #704]	; (8004b40 <ParseSnippetCondition+0x36c>)
 8004880:	782c      	ldrb	r4, [r5, #0]
 8004882:	0030      	movs	r0, r6
 8004884:	f7fe ff56 	bl	8003734 <IsMathOperator>
 8004888:	4aae      	ldr	r2, [pc, #696]	; (8004b44 <ParseSnippetCondition+0x370>)
 800488a:	00a1      	lsls	r1, r4, #2
 800488c:	1909      	adds	r1, r1, r4
 800488e:	008b      	lsls	r3, r1, #2
 8004890:	18d3      	adds	r3, r2, r3
 8004892:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004894:	782b      	ldrb	r3, [r5, #0]
 8004896:	0099      	lsls	r1, r3, #2
 8004898:	18c9      	adds	r1, r1, r3
 800489a:	0088      	lsls	r0, r1, #2
 800489c:	1812      	adds	r2, r2, r0
 800489e:	7852      	ldrb	r2, [r2, #1]
 80048a0:	2a00      	cmp	r2, #0
 80048a2:	d100      	bne.n	80048a6 <ParseSnippetCondition+0xd2>
 80048a4:	e1bb      	b.n	8004c1e <ParseSnippetCondition+0x44a>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
 80048a6:	3301      	adds	r3, #1
 80048a8:	4aa5      	ldr	r2, [pc, #660]	; (8004b40 <ParseSnippetCondition+0x36c>)
 80048aa:	7013      	strb	r3, [r2, #0]
				return BOS_OK;
 80048ac:	2000      	movs	r0, #0
 80048ae:	e1aa      	b.n	8004c06 <ParseSnippetCondition+0x432>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80048b0:	786e      	ldrb	r6, [r5, #1]
 80048b2:	3e30      	subs	r6, #48	; 0x30
 80048b4:	b2f6      	uxtb	r6, r6
 80048b6:	2e05      	cmp	r6, #5
 80048b8:	d900      	bls.n	80048bc <ParseSnippetCondition+0xe8>
 80048ba:	e1a8      	b.n	8004c0e <ParseSnippetCondition+0x43a>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80048bc:	4ba1      	ldr	r3, [pc, #644]	; (8004b44 <ParseSnippetCondition+0x370>)
 80048be:	00a2      	lsls	r2, r4, #2
 80048c0:	1910      	adds	r0, r2, r4
 80048c2:	0081      	lsls	r1, r0, #2
 80048c4:	2001      	movs	r0, #1
 80048c6:	54c8      	strb	r0, [r1, r3]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 80048c8:	185b      	adds	r3, r3, r1
 80048ca:	2200      	movs	r2, #0
 80048cc:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80048ce:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80048d0:	1cef      	adds	r7, r5, #3
 80048d2:	3207      	adds	r2, #7
 80048d4:	499d      	ldr	r1, [pc, #628]	; (8004b4c <ParseSnippetCondition+0x378>)
 80048d6:	0038      	movs	r0, r7
 80048d8:	f00e fcac 	bl	8013234 <strncmp>
 80048dc:	2800      	cmp	r0, #0
 80048de:	d122      	bne.n	8004926 <ParseSnippetCondition+0x152>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 80048e0:	00a3      	lsls	r3, r4, #2
 80048e2:	191c      	adds	r4, r3, r4
 80048e4:	00a2      	lsls	r2, r4, #2
 80048e6:	4b97      	ldr	r3, [pc, #604]	; (8004b44 <ParseSnippetCondition+0x370>)
 80048e8:	189b      	adds	r3, r3, r2
 80048ea:	2205      	movs	r2, #5
 80048ec:	70da      	strb	r2, [r3, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 80048ee:	00f2      	lsls	r2, r6, #3
 80048f0:	1992      	adds	r2, r2, r6
 80048f2:	4b97      	ldr	r3, [pc, #604]	; (8004b50 <ParseSnippetCondition+0x37c>)
 80048f4:	189b      	adds	r3, r3, r2
 80048f6:	7a1b      	ldrb	r3, [r3, #8]
 80048f8:	07db      	lsls	r3, r3, #31
 80048fa:	d505      	bpl.n	8004908 <ParseSnippetCondition+0x134>
				status =BOS_OK;
 80048fc:	2000      	movs	r0, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 80048fe:	4a90      	ldr	r2, [pc, #576]	; (8004b40 <ParseSnippetCondition+0x36c>)
 8004900:	7813      	ldrb	r3, [r2, #0]
 8004902:	3301      	adds	r3, #1
 8004904:	7013      	strb	r3, [r2, #0]
 8004906:	e17e      	b.n	8004c06 <ParseSnippetCondition+0x432>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004908:	2301      	movs	r3, #1
 800490a:	9305      	str	r3, [sp, #20]
 800490c:	2300      	movs	r3, #0
 800490e:	9304      	str	r3, [sp, #16]
 8004910:	9303      	str	r3, [sp, #12]
 8004912:	9302      	str	r3, [sp, #8]
 8004914:	9301      	str	r3, [sp, #4]
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	2200      	movs	r2, #0
 800491a:	2101      	movs	r1, #1
 800491c:	0030      	movs	r0, r6
 800491e:	f007 fa3f 	bl	800bda0 <SetButtonEvents>
				status =BOS_OK;
 8004922:	2000      	movs	r0, #0
 8004924:	e7eb      	b.n	80048fe <ParseSnippetCondition+0x12a>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004926:	220e      	movs	r2, #14
 8004928:	498a      	ldr	r1, [pc, #552]	; (8004b54 <ParseSnippetCondition+0x380>)
 800492a:	0038      	movs	r0, r7
 800492c:	f00e fc82 	bl	8013234 <strncmp>
 8004930:	2800      	cmp	r0, #0
 8004932:	d11e      	bne.n	8004972 <ParseSnippetCondition+0x19e>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004934:	00a3      	lsls	r3, r4, #2
 8004936:	191c      	adds	r4, r3, r4
 8004938:	00a2      	lsls	r2, r4, #2
 800493a:	4b82      	ldr	r3, [pc, #520]	; (8004b44 <ParseSnippetCondition+0x370>)
 800493c:	189b      	adds	r3, r3, r2
 800493e:	2206      	movs	r2, #6
 8004940:	70da      	strb	r2, [r3, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004942:	00f2      	lsls	r2, r6, #3
 8004944:	1992      	adds	r2, r2, r6
 8004946:	4b82      	ldr	r3, [pc, #520]	; (8004b50 <ParseSnippetCondition+0x37c>)
 8004948:	189b      	adds	r3, r3, r2
 800494a:	7a1b      	ldrb	r3, [r3, #8]
 800494c:	079b      	lsls	r3, r3, #30
 800494e:	d501      	bpl.n	8004954 <ParseSnippetCondition+0x180>
				status =BOS_OK;
 8004950:	2000      	movs	r0, #0
 8004952:	e7d4      	b.n	80048fe <ParseSnippetCondition+0x12a>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004954:	2301      	movs	r3, #1
 8004956:	9305      	str	r3, [sp, #20]
 8004958:	2300      	movs	r3, #0
 800495a:	9304      	str	r3, [sp, #16]
 800495c:	9303      	str	r3, [sp, #12]
 800495e:	9302      	str	r3, [sp, #8]
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	2201      	movs	r2, #1
 8004966:	2100      	movs	r1, #0
 8004968:	0030      	movs	r0, r6
 800496a:	f007 fa19 	bl	800bda0 <SetButtonEvents>
				status =BOS_OK;
 800496e:	2000      	movs	r0, #0
 8004970:	e7c5      	b.n	80048fe <ParseSnippetCondition+0x12a>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004972:	220c      	movs	r2, #12
 8004974:	4978      	ldr	r1, [pc, #480]	; (8004b58 <ParseSnippetCondition+0x384>)
 8004976:	0038      	movs	r0, r7
 8004978:	f00e fc5c 	bl	8013234 <strncmp>
 800497c:	2800      	cmp	r0, #0
 800497e:	d17b      	bne.n	8004a78 <ParseSnippetCondition+0x2a4>
				if(!button[port].pressedX1Sec){
 8004980:	00f2      	lsls	r2, r6, #3
 8004982:	1992      	adds	r2, r2, r6
 8004984:	4b72      	ldr	r3, [pc, #456]	; (8004b50 <ParseSnippetCondition+0x37c>)
 8004986:	189b      	adds	r3, r3, r2
 8004988:	789b      	ldrb	r3, [r3, #2]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00f      	beq.n	80049ae <ParseSnippetCondition+0x1da>
				else if(!button[port].pressedX2Sec){
 800498e:	00f2      	lsls	r2, r6, #3
 8004990:	1992      	adds	r2, r2, r6
 8004992:	4b6f      	ldr	r3, [pc, #444]	; (8004b50 <ParseSnippetCondition+0x37c>)
 8004994:	189b      	adds	r3, r3, r2
 8004996:	78db      	ldrb	r3, [r3, #3]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d029      	beq.n	80049f0 <ParseSnippetCondition+0x21c>
				else if(!button[port].pressedX3Sec){
 800499c:	00f2      	lsls	r2, r6, #3
 800499e:	1992      	adds	r2, r2, r6
 80049a0:	4b6b      	ldr	r3, [pc, #428]	; (8004b50 <ParseSnippetCondition+0x37c>)
 80049a2:	189b      	adds	r3, r3, r2
 80049a4:	791b      	ldrb	r3, [r3, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d044      	beq.n	8004a34 <ParseSnippetCondition+0x260>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 80049aa:	200c      	movs	r0, #12
 80049ac:	e7a7      	b.n	80048fe <ParseSnippetCondition+0x12a>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 80049ae:	4f65      	ldr	r7, [pc, #404]	; (8004b44 <ParseSnippetCondition+0x370>)
 80049b0:	00a3      	lsls	r3, r4, #2
 80049b2:	191c      	adds	r4, r3, r4
 80049b4:	00a3      	lsls	r3, r4, #2
 80049b6:	18fb      	adds	r3, r7, r3
 80049b8:	2209      	movs	r2, #9
 80049ba:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80049bc:	0028      	movs	r0, r5
 80049be:	300f      	adds	r0, #15
 80049c0:	f00d ff61 	bl	8012886 <atoi>
 80049c4:	4b5e      	ldr	r3, [pc, #376]	; (8004b40 <ParseSnippetCondition+0x36c>)
 80049c6:	7819      	ldrb	r1, [r3, #0]
 80049c8:	b2c3      	uxtb	r3, r0
 80049ca:	008a      	lsls	r2, r1, #2
 80049cc:	1852      	adds	r2, r2, r1
 80049ce:	0091      	lsls	r1, r2, #2
 80049d0:	187f      	adds	r7, r7, r1
 80049d2:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80049d4:	2201      	movs	r2, #1
 80049d6:	9205      	str	r2, [sp, #20]
 80049d8:	2200      	movs	r2, #0
 80049da:	9204      	str	r2, [sp, #16]
 80049dc:	9203      	str	r2, [sp, #12]
 80049de:	9202      	str	r2, [sp, #8]
 80049e0:	9201      	str	r2, [sp, #4]
 80049e2:	9200      	str	r2, [sp, #0]
 80049e4:	2100      	movs	r1, #0
 80049e6:	0030      	movs	r0, r6
 80049e8:	f007 f9da 	bl	800bda0 <SetButtonEvents>
					status =BOS_OK;
 80049ec:	2000      	movs	r0, #0
 80049ee:	e786      	b.n	80048fe <ParseSnippetCondition+0x12a>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 80049f0:	4f54      	ldr	r7, [pc, #336]	; (8004b44 <ParseSnippetCondition+0x370>)
 80049f2:	00a3      	lsls	r3, r4, #2
 80049f4:	191c      	adds	r4, r3, r4
 80049f6:	00a3      	lsls	r3, r4, #2
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	220a      	movs	r2, #10
 80049fc:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80049fe:	0028      	movs	r0, r5
 8004a00:	300f      	adds	r0, #15
 8004a02:	f00d ff40 	bl	8012886 <atoi>
 8004a06:	4b4e      	ldr	r3, [pc, #312]	; (8004b40 <ParseSnippetCondition+0x36c>)
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	b2c0      	uxtb	r0, r0
 8004a0c:	0093      	lsls	r3, r2, #2
 8004a0e:	189b      	adds	r3, r3, r2
 8004a10:	009a      	lsls	r2, r3, #2
 8004a12:	18bf      	adds	r7, r7, r2
 8004a14:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a16:	2301      	movs	r3, #1
 8004a18:	9305      	str	r3, [sp, #20]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	9304      	str	r3, [sp, #16]
 8004a1e:	9303      	str	r3, [sp, #12]
 8004a20:	9302      	str	r3, [sp, #8]
 8004a22:	9301      	str	r3, [sp, #4]
 8004a24:	9000      	str	r0, [sp, #0]
 8004a26:	2200      	movs	r2, #0
 8004a28:	2100      	movs	r1, #0
 8004a2a:	0030      	movs	r0, r6
 8004a2c:	f007 f9b8 	bl	800bda0 <SetButtonEvents>
					status =BOS_OK;
 8004a30:	2000      	movs	r0, #0
 8004a32:	e764      	b.n	80048fe <ParseSnippetCondition+0x12a>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004a34:	4f43      	ldr	r7, [pc, #268]	; (8004b44 <ParseSnippetCondition+0x370>)
 8004a36:	00a3      	lsls	r3, r4, #2
 8004a38:	191c      	adds	r4, r3, r4
 8004a3a:	00a3      	lsls	r3, r4, #2
 8004a3c:	18fb      	adds	r3, r7, r3
 8004a3e:	220b      	movs	r2, #11
 8004a40:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004a42:	0028      	movs	r0, r5
 8004a44:	300f      	adds	r0, #15
 8004a46:	f00d ff1e 	bl	8012886 <atoi>
 8004a4a:	4b3d      	ldr	r3, [pc, #244]	; (8004b40 <ParseSnippetCondition+0x36c>)
 8004a4c:	781a      	ldrb	r2, [r3, #0]
 8004a4e:	b2c0      	uxtb	r0, r0
 8004a50:	0093      	lsls	r3, r2, #2
 8004a52:	189b      	adds	r3, r3, r2
 8004a54:	009a      	lsls	r2, r3, #2
 8004a56:	18bf      	adds	r7, r7, r2
 8004a58:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	9305      	str	r3, [sp, #20]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9304      	str	r3, [sp, #16]
 8004a62:	9303      	str	r3, [sp, #12]
 8004a64:	9302      	str	r3, [sp, #8]
 8004a66:	9001      	str	r0, [sp, #4]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	0030      	movs	r0, r6
 8004a70:	f007 f996 	bl	800bda0 <SetButtonEvents>
					status =BOS_OK;
 8004a74:	2000      	movs	r0, #0
 8004a76:	e742      	b.n	80048fe <ParseSnippetCondition+0x12a>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004a78:	220d      	movs	r2, #13
 8004a7a:	4938      	ldr	r1, [pc, #224]	; (8004b5c <ParseSnippetCondition+0x388>)
 8004a7c:	0038      	movs	r0, r7
 8004a7e:	f00e fbd9 	bl	8013234 <strncmp>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d000      	beq.n	8004a88 <ParseSnippetCondition+0x2b4>
 8004a86:	e08d      	b.n	8004ba4 <ParseSnippetCondition+0x3d0>
				if(!button[port].releasedY1Sec){
 8004a88:	00f2      	lsls	r2, r6, #3
 8004a8a:	1992      	adds	r2, r2, r6
 8004a8c:	4b30      	ldr	r3, [pc, #192]	; (8004b50 <ParseSnippetCondition+0x37c>)
 8004a8e:	189b      	adds	r3, r3, r2
 8004a90:	795b      	ldrb	r3, [r3, #5]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00f      	beq.n	8004ab6 <ParseSnippetCondition+0x2e2>
				else if(!button[port].releasedY2Sec){
 8004a96:	00f2      	lsls	r2, r6, #3
 8004a98:	1992      	adds	r2, r2, r6
 8004a9a:	4b2d      	ldr	r3, [pc, #180]	; (8004b50 <ParseSnippetCondition+0x37c>)
 8004a9c:	189b      	adds	r3, r3, r2
 8004a9e:	799b      	ldrb	r3, [r3, #6]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d02a      	beq.n	8004afa <ParseSnippetCondition+0x326>
				else if(!button[port].releasedY3Sec){
 8004aa4:	00f2      	lsls	r2, r6, #3
 8004aa6:	1992      	adds	r2, r2, r6
 8004aa8:	4b29      	ldr	r3, [pc, #164]	; (8004b50 <ParseSnippetCondition+0x37c>)
 8004aaa:	189b      	adds	r3, r3, r2
 8004aac:	79db      	ldrb	r3, [r3, #7]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d056      	beq.n	8004b60 <ParseSnippetCondition+0x38c>
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004ab2:	200d      	movs	r0, #13
 8004ab4:	e723      	b.n	80048fe <ParseSnippetCondition+0x12a>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004ab6:	4f23      	ldr	r7, [pc, #140]	; (8004b44 <ParseSnippetCondition+0x370>)
 8004ab8:	00a3      	lsls	r3, r4, #2
 8004aba:	191c      	adds	r4, r3, r4
 8004abc:	00a3      	lsls	r3, r4, #2
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	220c      	movs	r2, #12
 8004ac2:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004ac4:	0028      	movs	r0, r5
 8004ac6:	3010      	adds	r0, #16
 8004ac8:	f00d fedd 	bl	8012886 <atoi>
 8004acc:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <ParseSnippetCondition+0x36c>)
 8004ace:	781a      	ldrb	r2, [r3, #0]
 8004ad0:	b2c0      	uxtb	r0, r0
 8004ad2:	0093      	lsls	r3, r2, #2
 8004ad4:	189b      	adds	r3, r3, r2
 8004ad6:	009a      	lsls	r2, r3, #2
 8004ad8:	18bf      	adds	r7, r7, r2
 8004ada:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004adc:	2301      	movs	r3, #1
 8004ade:	9305      	str	r3, [sp, #20]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	9304      	str	r3, [sp, #16]
 8004ae4:	9303      	str	r3, [sp, #12]
 8004ae6:	9002      	str	r0, [sp, #8]
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	2200      	movs	r2, #0
 8004aee:	2100      	movs	r1, #0
 8004af0:	0030      	movs	r0, r6
 8004af2:	f007 f955 	bl	800bda0 <SetButtonEvents>
					status =BOS_OK;
 8004af6:	2000      	movs	r0, #0
 8004af8:	e701      	b.n	80048fe <ParseSnippetCondition+0x12a>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004afa:	4f12      	ldr	r7, [pc, #72]	; (8004b44 <ParseSnippetCondition+0x370>)
 8004afc:	00a3      	lsls	r3, r4, #2
 8004afe:	191c      	adds	r4, r3, r4
 8004b00:	00a3      	lsls	r3, r4, #2
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	220d      	movs	r2, #13
 8004b06:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b08:	0028      	movs	r0, r5
 8004b0a:	3010      	adds	r0, #16
 8004b0c:	f00d febb 	bl	8012886 <atoi>
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <ParseSnippetCondition+0x36c>)
 8004b12:	781a      	ldrb	r2, [r3, #0]
 8004b14:	b2c0      	uxtb	r0, r0
 8004b16:	0093      	lsls	r3, r2, #2
 8004b18:	189b      	adds	r3, r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	18bf      	adds	r7, r7, r2
 8004b1e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004b20:	2301      	movs	r3, #1
 8004b22:	9305      	str	r3, [sp, #20]
 8004b24:	2300      	movs	r3, #0
 8004b26:	9304      	str	r3, [sp, #16]
 8004b28:	9003      	str	r0, [sp, #12]
 8004b2a:	9302      	str	r3, [sp, #8]
 8004b2c:	9301      	str	r3, [sp, #4]
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	2200      	movs	r2, #0
 8004b32:	2100      	movs	r1, #0
 8004b34:	0030      	movs	r0, r6
 8004b36:	f007 f933 	bl	800bda0 <SetButtonEvents>
					status =BOS_OK;
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	e6df      	b.n	80048fe <ParseSnippetCondition+0x12a>
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	200016d4 	.word	0x200016d4
 8004b44:	20006864 	.word	0x20006864
 8004b48:	08017e6c 	.word	0x08017e6c
 8004b4c:	08018c60 	.word	0x08018c60
 8004b50:	200023a4 	.word	0x200023a4
 8004b54:	08018434 	.word	0x08018434
 8004b58:	08018444 	.word	0x08018444
 8004b5c:	08018454 	.word	0x08018454
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004b60:	4f30      	ldr	r7, [pc, #192]	; (8004c24 <ParseSnippetCondition+0x450>)
 8004b62:	3314      	adds	r3, #20
 8004b64:	4698      	mov	r8, r3
 8004b66:	435c      	muls	r4, r3
 8004b68:	193c      	adds	r4, r7, r4
 8004b6a:	3b06      	subs	r3, #6
 8004b6c:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b6e:	0028      	movs	r0, r5
 8004b70:	3010      	adds	r0, #16
 8004b72:	f00d fe88 	bl	8012886 <atoi>
 8004b76:	4b2c      	ldr	r3, [pc, #176]	; (8004c28 <ParseSnippetCondition+0x454>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	b2c0      	uxtb	r0, r0
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	4353      	muls	r3, r2
 8004b80:	18ff      	adds	r7, r7, r3
 8004b82:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004b84:	2301      	movs	r3, #1
 8004b86:	9305      	str	r3, [sp, #20]
 8004b88:	9004      	str	r0, [sp, #16]
 8004b8a:	2400      	movs	r4, #0
 8004b8c:	9403      	str	r4, [sp, #12]
 8004b8e:	9402      	str	r4, [sp, #8]
 8004b90:	9401      	str	r4, [sp, #4]
 8004b92:	9400      	str	r4, [sp, #0]
 8004b94:	0023      	movs	r3, r4
 8004b96:	0022      	movs	r2, r4
 8004b98:	0021      	movs	r1, r4
 8004b9a:	0030      	movs	r0, r6
 8004b9c:	f007 f900 	bl	800bda0 <SetButtonEvents>
					status =BOS_OK;
 8004ba0:	0020      	movs	r0, r4
 8004ba2:	e6ac      	b.n	80048fe <ParseSnippetCondition+0x12a>
	BOS_Status status =BOS_OK;
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	e6aa      	b.n	80048fe <ParseSnippetCondition+0x12a>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004ba8:	2d00      	cmp	r5, #0
 8004baa:	d000      	beq.n	8004bae <ParseSnippetCondition+0x3da>
 8004bac:	e650      	b.n	8004850 <ParseSnippetCondition+0x7c>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004bae:	481e      	ldr	r0, [pc, #120]	; (8004c28 <ParseSnippetCondition+0x454>)
 8004bb0:	7803      	ldrb	r3, [r0, #0]
 8004bb2:	491c      	ldr	r1, [pc, #112]	; (8004c24 <ParseSnippetCondition+0x450>)
 8004bb4:	009a      	lsls	r2, r3, #2
 8004bb6:	18d6      	adds	r6, r2, r3
 8004bb8:	00b5      	lsls	r5, r6, #2
 8004bba:	2602      	movs	r6, #2
 8004bbc:	546e      	strb	r6, [r5, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004bbe:	1949      	adds	r1, r1, r5
 8004bc0:	70cc      	strb	r4, [r1, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	7003      	strb	r3, [r0, #0]
				return BOS_OK;
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	e01d      	b.n	8004c06 <ParseSnippetCondition+0x432>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004bca:	4b17      	ldr	r3, [pc, #92]	; (8004c28 <ParseSnippetCondition+0x454>)
 8004bcc:	4698      	mov	r8, r3
 8004bce:	781a      	ldrb	r2, [r3, #0]
 8004bd0:	4f14      	ldr	r7, [pc, #80]	; (8004c24 <ParseSnippetCondition+0x450>)
 8004bd2:	0093      	lsls	r3, r2, #2
 8004bd4:	1898      	adds	r0, r3, r2
 8004bd6:	0081      	lsls	r1, r0, #2
 8004bd8:	2003      	movs	r0, #3
 8004bda:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004bdc:	187a      	adds	r2, r7, r1
 8004bde:	70d4      	strb	r4, [r2, #3]
					float constant =atof(thirdPart);
 8004be0:	0028      	movs	r0, r5
 8004be2:	f00d fe4b 	bl	801287c <atof>
 8004be6:	f7fd fff9 	bl	8002bdc <__aeabi_d2f>
 8004bea:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004bec:	4643      	mov	r3, r8
 8004bee:	781a      	ldrb	r2, [r3, #0]
 8004bf0:	0093      	lsls	r3, r2, #2
 8004bf2:	189b      	adds	r3, r3, r2
 8004bf4:	0098      	lsls	r0, r3, #2
 8004bf6:	19c0      	adds	r0, r0, r7
 8004bf8:	3006      	adds	r0, #6
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	a907      	add	r1, sp, #28
 8004bfe:	f00e f8d2 	bl	8012da6 <memcpy>
 8004c02:	e63c      	b.n	800487e <ParseSnippetCondition+0xaa>
		return BOS_ERR_SNIP_MEM_FULL;
 8004c04:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004c06:	b008      	add	sp, #32
 8004c08:	bc04      	pop	{r2}
 8004c0a:	4690      	mov	r8, r2
 8004c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BOS_Status status =BOS_OK;
 8004c0e:	2000      	movs	r0, #0
 8004c10:	e7f9      	b.n	8004c06 <ParseSnippetCondition+0x432>
			return BOS_ERR_WrongParam;
 8004c12:	2067      	movs	r0, #103	; 0x67
 8004c14:	e7f7      	b.n	8004c06 <ParseSnippetCondition+0x432>
				return BOS_ERR_WrongParam;
 8004c16:	2067      	movs	r0, #103	; 0x67
 8004c18:	e7f5      	b.n	8004c06 <ParseSnippetCondition+0x432>
 8004c1a:	2067      	movs	r0, #103	; 0x67
 8004c1c:	e7f3      	b.n	8004c06 <ParseSnippetCondition+0x432>
					return BOS_ERR_WrongParam;
 8004c1e:	2067      	movs	r0, #103	; 0x67
 8004c20:	e7f1      	b.n	8004c06 <ParseSnippetCondition+0x432>
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	20006864 	.word	0x20006864
 8004c28:	200016d4 	.word	0x200016d4

08004c2c <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2e:	000c      	movs	r4, r1
	switch(code){
 8004c30:	2802      	cmp	r0, #2
 8004c32:	d017      	beq.n	8004c64 <AddSnippet+0x38>
 8004c34:	2803      	cmp	r0, #3
 8004c36:	d003      	beq.n	8004c40 <AddSnippet+0x14>
 8004c38:	2801      	cmp	r0, #1
 8004c3a:	d00f      	beq.n	8004c5c <AddSnippet+0x30>
	return BOS_OK;
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	e00c      	b.n	8004c5a <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets - 1].state = true;
 8004c40:	4b34      	ldr	r3, [pc, #208]	; (8004d14 <AddSnippet+0xe8>)
 8004c42:	781a      	ldrb	r2, [r3, #0]
 8004c44:	3a01      	subs	r2, #1
 8004c46:	0093      	lsls	r3, r2, #2
 8004c48:	189b      	adds	r3, r3, r2
 8004c4a:	009a      	lsls	r2, r3, #2
 8004c4c:	4b32      	ldr	r3, [pc, #200]	; (8004d18 <AddSnippet+0xec>)
 8004c4e:	189b      	adds	r3, r3, r2
 8004c50:	2201      	movs	r2, #1
 8004c52:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004c54:	f005 f982 	bl	8009f5c <SaveToRO>
	return BOS_OK;
 8004c58:	2000      	movs	r0, #0
}
 8004c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004c5c:	0008      	movs	r0, r1
 8004c5e:	f7ff fdb9 	bl	80047d4 <ParseSnippetCondition>
 8004c62:	e7fa      	b.n	8004c5a <AddSnippet+0x2e>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004c64:	4b2b      	ldr	r3, [pc, #172]	; (8004d14 <AddSnippet+0xe8>)
 8004c66:	781d      	ldrb	r5, [r3, #0]
 8004c68:	3d01      	subs	r5, #1
 8004c6a:	00ab      	lsls	r3, r5, #2
 8004c6c:	195b      	adds	r3, r3, r5
 8004c6e:	009a      	lsls	r2, r3, #2
 8004c70:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <AddSnippet+0xec>)
 8004c72:	189b      	adds	r3, r3, r2
 8004c74:	68de      	ldr	r6, [r3, #12]
 8004c76:	2e00      	cmp	r6, #0
 8004c78:	d034      	beq.n	8004ce4 <AddSnippet+0xb8>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004c7a:	0030      	movs	r0, r6
 8004c7c:	f7fb fa4c 	bl	8000118 <strlen>
 8004c80:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004c82:	0020      	movs	r0, r4
 8004c84:	f7fb fa48 	bl	8000118 <strlen>
 8004c88:	1839      	adds	r1, r7, r0
 8004c8a:	3102      	adds	r1, #2
 8004c8c:	0030      	movs	r0, r6
 8004c8e:	f00e f8c5 	bl	8012e1c <realloc>
 8004c92:	4e21      	ldr	r6, [pc, #132]	; (8004d18 <AddSnippet+0xec>)
 8004c94:	00ab      	lsls	r3, r5, #2
 8004c96:	195d      	adds	r5, r3, r5
 8004c98:	00ab      	lsls	r3, r5, #2
 8004c9a:	18f3      	adds	r3, r6, r3
 8004c9c:	60d8      	str	r0, [r3, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004c9e:	4d1d      	ldr	r5, [pc, #116]	; (8004d14 <AddSnippet+0xe8>)
 8004ca0:	782b      	ldrb	r3, [r5, #0]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	009a      	lsls	r2, r3, #2
 8004ca6:	18d2      	adds	r2, r2, r3
 8004ca8:	0093      	lsls	r3, r2, #2
 8004caa:	18f3      	adds	r3, r6, r3
 8004cac:	68d8      	ldr	r0, [r3, #12]
 8004cae:	1c7b      	adds	r3, r7, #1
 8004cb0:	18c0      	adds	r0, r0, r3
 8004cb2:	0021      	movs	r1, r4
 8004cb4:	f00e fab6 	bl	8013224 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004cb8:	782a      	ldrb	r2, [r5, #0]
 8004cba:	3a01      	subs	r2, #1
 8004cbc:	0093      	lsls	r3, r2, #2
 8004cbe:	189b      	adds	r3, r3, r2
 8004cc0:	009a      	lsls	r2, r3, #2
 8004cc2:	18b6      	adds	r6, r6, r2
 8004cc4:	68f3      	ldr	r3, [r6, #12]
 8004cc6:	2213      	movs	r2, #19
 8004cc8:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004cca:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <AddSnippet+0xe8>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	009a      	lsls	r2, r3, #2
 8004cd2:	18d2      	adds	r2, r2, r3
 8004cd4:	0091      	lsls	r1, r2, #2
 8004cd6:	4a10      	ldr	r2, [pc, #64]	; (8004d18 <AddSnippet+0xec>)
 8004cd8:	1852      	adds	r2, r2, r1
 8004cda:	68d2      	ldr	r2, [r2, #12]
 8004cdc:	2a00      	cmp	r2, #0
 8004cde:	d011      	beq.n	8004d04 <AddSnippet+0xd8>
	return BOS_OK;
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	e7ba      	b.n	8004c5a <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004ce4:	0008      	movs	r0, r1
 8004ce6:	f7fb fa17 	bl	8000118 <strlen>
 8004cea:	3001      	adds	r0, #1
 8004cec:	f00d fe0e 	bl	801290c <malloc>
 8004cf0:	00ab      	lsls	r3, r5, #2
 8004cf2:	195d      	adds	r5, r3, r5
 8004cf4:	00aa      	lsls	r2, r5, #2
 8004cf6:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <AddSnippet+0xec>)
 8004cf8:	189b      	adds	r3, r3, r2
 8004cfa:	60d8      	str	r0, [r3, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004cfc:	0021      	movs	r1, r4
 8004cfe:	f00e fa91 	bl	8013224 <strcpy>
 8004d02:	e7e2      	b.n	8004cca <AddSnippet+0x9e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004d04:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <AddSnippet+0xec>)
 8004d06:	18c8      	adds	r0, r1, r3
 8004d08:	2214      	movs	r2, #20
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	f00e f854 	bl	8012db8 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004d10:	200e      	movs	r0, #14
 8004d12:	e7a2      	b.n	8004c5a <AddSnippet+0x2e>
 8004d14:	200016d4 	.word	0x200016d4
 8004d18:	20006864 	.word	0x20006864

08004d1c <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d1e:	46de      	mov	lr, fp
 8004d20:	4657      	mov	r7, sl
 8004d22:	464e      	mov	r6, r9
 8004d24:	4645      	mov	r5, r8
 8004d26:	b5e0      	push	{r5, r6, r7, lr}
 8004d28:	b08b      	sub	sp, #44	; 0x2c
 8004d2a:	9004      	str	r0, [sp, #16]
 8004d2c:	9103      	str	r1, [sp, #12]
 8004d2e:	0015      	movs	r5, r2
 8004d30:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004d32:	2209      	movs	r2, #9
 8004d34:	2100      	movs	r1, #0
 8004d36:	a807      	add	r0, sp, #28
 8004d38:	f00e f83e 	bl	8012db8 <memset>
 8004d3c:	e168      	b.n	8005010 <CLI_CommandParser+0x2f4>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004d3e:	1ce9      	adds	r1, r5, #3
 8004d40:	3001      	adds	r0, #1
 8004d42:	f7ff ff73 	bl	8004c2c <AddSnippet>
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d107      	bne.n	8004d5a <CLI_CommandParser+0x3e>
				recordSnippet = SNIPPET_COMMANDS;
 8004d4a:	4ad4      	ldr	r2, [pc, #848]	; (800509c <CLI_CommandParser+0x380>)
 8004d4c:	2336      	movs	r3, #54	; 0x36
 8004d4e:	2102      	movs	r1, #2
 8004d50:	54d1      	strb	r1, [r2, r3]
				pcOutputString[0] ='\r';
 8004d52:	3b29      	subs	r3, #41	; 0x29
 8004d54:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 8004d56:	2700      	movs	r7, #0
 8004d58:	e18c      	b.n	8005074 <CLI_CommandParser+0x358>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004d5a:	2252      	movs	r2, #82	; 0x52
 8004d5c:	49d0      	ldr	r1, [pc, #832]	; (80050a0 <CLI_CommandParser+0x384>)
 8004d5e:	0020      	movs	r0, r4
 8004d60:	f00e f821 	bl	8012da6 <memcpy>
				recordSnippet =0;
 8004d64:	4acd      	ldr	r2, [pc, #820]	; (800509c <CLI_CommandParser+0x380>)
 8004d66:	2336      	movs	r3, #54	; 0x36
 8004d68:	2100      	movs	r1, #0
 8004d6a:	54d1      	strb	r1, [r2, r3]
			xReturned = pdFALSE;
 8004d6c:	2700      	movs	r7, #0
 8004d6e:	e181      	b.n	8005074 <CLI_CommandParser+0x358>
			recordSnippet =0;
 8004d70:	4aca      	ldr	r2, [pc, #808]	; (800509c <CLI_CommandParser+0x380>)
 8004d72:	2336      	movs	r3, #54	; 0x36
 8004d74:	2100      	movs	r1, #0
 8004d76:	54d1      	strb	r1, [r2, r3]
			AddSnippet(SNIPPET_ACTIVATE,"");
 8004d78:	49ca      	ldr	r1, [pc, #808]	; (80050a4 <CLI_CommandParser+0x388>)
 8004d7a:	3003      	adds	r0, #3
 8004d7c:	f7ff ff56 	bl	8004c2c <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004d80:	2241      	movs	r2, #65	; 0x41
 8004d82:	49c9      	ldr	r1, [pc, #804]	; (80050a8 <CLI_CommandParser+0x38c>)
 8004d84:	0020      	movs	r0, r4
 8004d86:	f00e f80e 	bl	8012da6 <memcpy>
			xReturned = pdFALSE;
 8004d8a:	2700      	movs	r7, #0
 8004d8c:	e172      	b.n	8005074 <CLI_CommandParser+0x358>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004d8e:	0029      	movs	r1, r5
 8004d90:	2002      	movs	r0, #2
 8004d92:	f7ff ff4b 	bl	8004c2c <AddSnippet>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d103      	bne.n	8004da2 <CLI_CommandParser+0x86>
				pcOutputString[0] ='\r';
 8004d9a:	230d      	movs	r3, #13
 8004d9c:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 8004d9e:	2700      	movs	r7, #0
 8004da0:	e168      	b.n	8005074 <CLI_CommandParser+0x358>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004da2:	2252      	movs	r2, #82	; 0x52
 8004da4:	49be      	ldr	r1, [pc, #760]	; (80050a0 <CLI_CommandParser+0x384>)
 8004da6:	0020      	movs	r0, r4
 8004da8:	f00d fffd 	bl	8012da6 <memcpy>
			xReturned = pdFALSE;
 8004dac:	2700      	movs	r7, #0
 8004dae:	e161      	b.n	8005074 <CLI_CommandParser+0x358>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004db0:	f00d fd9e 	bl	80128f0 <__locale_ctype_ptr>
 8004db4:	7873      	ldrb	r3, [r6, #1]
 8004db6:	18c0      	adds	r0, r0, r3
 8004db8:	7843      	ldrb	r3, [r0, #1]
 8004dba:	075b      	lsls	r3, r3, #29
 8004dbc:	d500      	bpl.n	8004dc0 <CLI_CommandParser+0xa4>
 8004dbe:	e152      	b.n	8005066 <CLI_CommandParser+0x34a>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004dc0:	1b72      	subs	r2, r6, r5
 8004dc2:	0029      	movs	r1, r5
 8004dc4:	a807      	add	r0, sp, #28
 8004dc6:	f00e fa46 	bl	8013256 <strncpy>
				id =GetID(idString);
 8004dca:	a807      	add	r0, sp, #28
 8004dcc:	f7ff f9e6 	bl	800419c <GetID>
 8004dd0:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8004dd2:	4ab6      	ldr	r2, [pc, #728]	; (80050ac <CLI_CommandParser+0x390>)
 8004dd4:	7812      	ldrb	r2, [r2, #0]
 8004dd6:	4690      	mov	r8, r2
 8004dd8:	4290      	cmp	r0, r2
 8004dda:	d02c      	beq.n	8004e36 <CLI_CommandParser+0x11a>
				else if(id == BOS_ERR_WrongName){
 8004ddc:	2864      	cmp	r0, #100	; 0x64
 8004dde:	d032      	beq.n	8004e46 <CLI_CommandParser+0x12a>
				else if(id == BOS_ERR_WrongID){
 8004de0:	2866      	cmp	r0, #102	; 0x66
 8004de2:	d037      	beq.n	8004e54 <CLI_CommandParser+0x138>
				else if(id == BOS_BROADCAST){
 8004de4:	28ff      	cmp	r0, #255	; 0xff
 8004de6:	d03c      	beq.n	8004e62 <CLI_CommandParser+0x146>
				else if((uint8_t )id == BOS_MULTICAST){
 8004de8:	466b      	mov	r3, sp
 8004dea:	7d1b      	ldrb	r3, [r3, #20]
 8004dec:	4699      	mov	r9, r3
 8004dee:	2bfe      	cmp	r3, #254	; 0xfe
 8004df0:	d068      	beq.n	8004ec4 <CLI_CommandParser+0x1a8>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004df2:	3601      	adds	r6, #1
 8004df4:	2206      	movs	r2, #6
 8004df6:	49ae      	ldr	r1, [pc, #696]	; (80050b0 <CLI_CommandParser+0x394>)
 8004df8:	0030      	movs	r0, r6
 8004dfa:	f00e fa1b 	bl	8013234 <strncmp>
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	d000      	beq.n	8004e04 <CLI_CommandParser+0xe8>
 8004e02:	e0a8      	b.n	8004f56 <CLI_CommandParser+0x23a>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004e04:	4bab      	ldr	r3, [pc, #684]	; (80050b4 <CLI_CommandParser+0x398>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	701a      	strb	r2, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e0a:	2119      	movs	r1, #25
 8004e0c:	4648      	mov	r0, r9
 8004e0e:	f003 fa09 	bl	8008224 <SendMessageToModule>
						osDelay(100);
 8004e12:	2064      	movs	r0, #100	; 0x64
 8004e14:	f008 fdc6 	bl	800d9a4 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004e18:	4ba7      	ldr	r3, [pc, #668]	; (80050b8 <CLI_CommandParser+0x39c>)
 8004e1a:	781a      	ldrb	r2, [r3, #0]
 8004e1c:	4ba3      	ldr	r3, [pc, #652]	; (80050ac <CLI_CommandParser+0x390>)
 8004e1e:	7818      	ldrb	r0, [r3, #0]
 8004e20:	2300      	movs	r3, #0
 8004e22:	4649      	mov	r1, r9
 8004e24:	f005 f9b2 	bl	800a18c <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8004e28:	4ba2      	ldr	r3, [pc, #648]	; (80050b4 <CLI_CommandParser+0x398>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b60      	cmp	r3, #96	; 0x60
 8004e2e:	d100      	bne.n	8004e32 <CLI_CommandParser+0x116>
 8004e30:	e0cd      	b.n	8004fce <CLI_CommandParser+0x2b2>
					xReturned = pdFALSE;
 8004e32:	2700      	movs	r7, #0
 8004e34:	e11e      	b.n	8005074 <CLI_CommandParser+0x358>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004e36:	1c70      	adds	r0, r6, #1
 8004e38:	2299      	movs	r2, #153	; 0x99
 8004e3a:	0092      	lsls	r2, r2, #2
 8004e3c:	0021      	movs	r1, r4
 8004e3e:	f008 fe69 	bl	800db14 <FreeRTOS_CLIProcessCommand>
 8004e42:	0007      	movs	r7, r0
 8004e44:	e116      	b.n	8005074 <CLI_CommandParser+0x358>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004e46:	2227      	movs	r2, #39	; 0x27
 8004e48:	499c      	ldr	r1, [pc, #624]	; (80050bc <CLI_CommandParser+0x3a0>)
 8004e4a:	0020      	movs	r0, r4
 8004e4c:	f00d ffab 	bl	8012da6 <memcpy>
					xReturned = pdFALSE;
 8004e50:	2700      	movs	r7, #0
 8004e52:	e10f      	b.n	8005074 <CLI_CommandParser+0x358>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004e54:	2225      	movs	r2, #37	; 0x25
 8004e56:	499a      	ldr	r1, [pc, #616]	; (80050c0 <CLI_CommandParser+0x3a4>)
 8004e58:	0020      	movs	r0, r4
 8004e5a:	f00d ffa4 	bl	8012da6 <memcpy>
					xReturned = pdFALSE;
 8004e5e:	2700      	movs	r7, #0
 8004e60:	e108      	b.n	8005074 <CLI_CommandParser+0x358>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004e62:	221a      	movs	r2, #26
 8004e64:	2100      	movs	r1, #0
 8004e66:	4897      	ldr	r0, [pc, #604]	; (80050c4 <CLI_CommandParser+0x3a8>)
 8004e68:	f00d ffa6 	bl	8012db8 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004e6c:	3601      	adds	r6, #1
 8004e6e:	0028      	movs	r0, r5
 8004e70:	f7fb f952 	bl	8000118 <strlen>
 8004e74:	0007      	movs	r7, r0
 8004e76:	a807      	add	r0, sp, #28
 8004e78:	f7fb f94e 	bl	8000118 <strlen>
 8004e7c:	1a3a      	subs	r2, r7, r0
 8004e7e:	3a01      	subs	r2, #1
 8004e80:	0031      	movs	r1, r6
 8004e82:	4891      	ldr	r0, [pc, #580]	; (80050c8 <CLI_CommandParser+0x3ac>)
 8004e84:	f00e f9e7 	bl	8013256 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004e88:	0028      	movs	r0, r5
 8004e8a:	f7fb f945 	bl	8000118 <strlen>
 8004e8e:	0007      	movs	r7, r0
 8004e90:	a807      	add	r0, sp, #28
 8004e92:	f7fb f941 	bl	8000118 <strlen>
 8004e96:	1a3b      	subs	r3, r7, r0
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2217      	movs	r2, #23
 8004e9c:	21ff      	movs	r1, #255	; 0xff
 8004e9e:	4640      	mov	r0, r8
 8004ea0:	f003 f998 	bl	80081d4 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004ea4:	2299      	movs	r2, #153	; 0x99
 8004ea6:	0092      	lsls	r2, r2, #2
 8004ea8:	0021      	movs	r1, r4
 8004eaa:	0030      	movs	r0, r6
 8004eac:	f008 fe32 	bl	800db14 <FreeRTOS_CLIProcessCommand>
 8004eb0:	0007      	movs	r7, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004eb2:	0020      	movs	r0, r4
 8004eb4:	f7fb f930 	bl	8000118 <strlen>
 8004eb8:	1820      	adds	r0, r4, r0
 8004eba:	221d      	movs	r2, #29
 8004ebc:	4983      	ldr	r1, [pc, #524]	; (80050cc <CLI_CommandParser+0x3b0>)
 8004ebe:	f00d ff72 	bl	8012da6 <memcpy>
 8004ec2:	e0d7      	b.n	8005074 <CLI_CommandParser+0x358>
					group =id >> 8;
 8004ec4:	9b05      	ldr	r3, [sp, #20]
 8004ec6:	121b      	asrs	r3, r3, #8
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	4699      	mov	r9, r3
 8004ecc:	4b73      	ldr	r3, [pc, #460]	; (800509c <CLI_CommandParser+0x380>)
 8004ece:	469b      	mov	fp, r3
 8004ed0:	2337      	movs	r3, #55	; 0x37
 8004ed2:	469a      	mov	sl, r3
 8004ed4:	465b      	mov	r3, fp
 8004ed6:	4652      	mov	r2, sl
 8004ed8:	4649      	mov	r1, r9
 8004eda:	5499      	strb	r1, [r3, r2]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004edc:	3a1d      	subs	r2, #29
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4878      	ldr	r0, [pc, #480]	; (80050c4 <CLI_CommandParser+0x3a8>)
 8004ee2:	f00d ff69 	bl	8012db8 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004ee6:	1c73      	adds	r3, r6, #1
 8004ee8:	9305      	str	r3, [sp, #20]
 8004eea:	0028      	movs	r0, r5
 8004eec:	f7fb f914 	bl	8000118 <strlen>
 8004ef0:	0006      	movs	r6, r0
 8004ef2:	a807      	add	r0, sp, #28
 8004ef4:	f7fb f910 	bl	8000118 <strlen>
 8004ef8:	1a32      	subs	r2, r6, r0
 8004efa:	3a01      	subs	r2, #1
 8004efc:	9905      	ldr	r1, [sp, #20]
 8004efe:	4872      	ldr	r0, [pc, #456]	; (80050c8 <CLI_CommandParser+0x3ac>)
 8004f00:	f00e f9a9 	bl	8013256 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f04:	0028      	movs	r0, r5
 8004f06:	f7fb f907 	bl	8000118 <strlen>
 8004f0a:	0006      	movs	r6, r0
 8004f0c:	a807      	add	r0, sp, #28
 8004f0e:	f7fb f903 	bl	8000118 <strlen>
 8004f12:	1a33      	subs	r3, r6, r0
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2217      	movs	r2, #23
 8004f18:	4649      	mov	r1, r9
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	f003 f95a 	bl	80081d4 <BroadcastMessage>
					if(InGroup(myID,group))
 8004f20:	4b62      	ldr	r3, [pc, #392]	; (80050ac <CLI_CommandParser+0x390>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	4a69      	ldr	r2, [pc, #420]	; (80050d0 <CLI_CommandParser+0x3b4>)
 8004f2a:	5a9b      	ldrh	r3, [r3, r2]
 8004f2c:	465a      	mov	r2, fp
 8004f2e:	4651      	mov	r1, sl
 8004f30:	5c52      	ldrb	r2, [r2, r1]
 8004f32:	4113      	asrs	r3, r2
 8004f34:	07db      	lsls	r3, r3, #31
 8004f36:	d406      	bmi.n	8004f46 <CLI_CommandParser+0x22a>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8004f38:	ab07      	add	r3, sp, #28
 8004f3a:	0022      	movs	r2, r4
 8004f3c:	4965      	ldr	r1, [pc, #404]	; (80050d4 <CLI_CommandParser+0x3b8>)
 8004f3e:	0020      	movs	r0, r4
 8004f40:	f00e f934 	bl	80131ac <sprintf>
 8004f44:	e096      	b.n	8005074 <CLI_CommandParser+0x358>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f46:	2299      	movs	r2, #153	; 0x99
 8004f48:	0092      	lsls	r2, r2, #2
 8004f4a:	0021      	movs	r1, r4
 8004f4c:	9805      	ldr	r0, [sp, #20]
 8004f4e:	f008 fde1 	bl	800db14 <FreeRTOS_CLIProcessCommand>
 8004f52:	0007      	movs	r7, r0
 8004f54:	e7f0      	b.n	8004f38 <CLI_CommandParser+0x21c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004f56:	0028      	movs	r0, r5
 8004f58:	f7fb f8de 	bl	8000118 <strlen>
 8004f5c:	0007      	movs	r7, r0
 8004f5e:	a807      	add	r0, sp, #28
 8004f60:	f7fb f8da 	bl	8000118 <strlen>
 8004f64:	1a3a      	subs	r2, r7, r0
 8004f66:	3a01      	subs	r2, #1
 8004f68:	0031      	movs	r1, r6
 8004f6a:	4857      	ldr	r0, [pc, #348]	; (80050c8 <CLI_CommandParser+0x3ac>)
 8004f6c:	f00e f973 	bl	8013256 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8004f70:	0028      	movs	r0, r5
 8004f72:	f7fb f8d1 	bl	8000118 <strlen>
 8004f76:	0006      	movs	r6, r0
 8004f78:	a807      	add	r0, sp, #28
 8004f7a:	f7fb f8cd 	bl	8000118 <strlen>
 8004f7e:	1a32      	subs	r2, r6, r0
 8004f80:	b292      	uxth	r2, r2
 8004f82:	3a01      	subs	r2, #1
 8004f84:	b292      	uxth	r2, r2
 8004f86:	2117      	movs	r1, #23
 8004f88:	4648      	mov	r0, r9
 8004f8a:	f003 f94b 	bl	8008224 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8004f8e:	9a05      	ldr	r2, [sp, #20]
 8004f90:	4951      	ldr	r1, [pc, #324]	; (80050d8 <CLI_CommandParser+0x3bc>)
 8004f92:	0020      	movs	r0, r4
 8004f94:	f00e f90a 	bl	80131ac <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8004f98:	7823      	ldrb	r3, [r4, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <CLI_CommandParser+0x288>
 8004f9e:	9b03      	ldr	r3, [sp, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d108      	bne.n	8004fb6 <CLI_CommandParser+0x29a>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004fa4:	0020      	movs	r0, r4
 8004fa6:	f7fb f8b7 	bl	8000118 <strlen>
 8004faa:	0002      	movs	r2, r0
 8004fac:	2100      	movs	r1, #0
 8004fae:	0020      	movs	r0, r4
 8004fb0:	f00d ff02 	bl	8012db8 <memset>
 8004fb4:	e738      	b.n	8004e28 <CLI_CommandParser+0x10c>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8004fb6:	0020      	movs	r0, r4
 8004fb8:	f7fb f8ae 	bl	8000118 <strlen>
 8004fbc:	b282      	uxth	r2, r0
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	3331      	adds	r3, #49	; 0x31
 8004fc4:	0021      	movs	r1, r4
 8004fc6:	9804      	ldr	r0, [sp, #16]
 8004fc8:	f008 fb6a 	bl	800d6a0 <writePxMutex>
 8004fcc:	e7ea      	b.n	8004fa4 <CLI_CommandParser+0x288>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004fce:	21fa      	movs	r1, #250	; 0xfa
 8004fd0:	0089      	lsls	r1, r1, #2
 8004fd2:	2001      	movs	r0, #1
 8004fd4:	f009 ffc8 	bl	800ef68 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004fd8:	4b40      	ldr	r3, [pc, #256]	; (80050dc <CLI_CommandParser+0x3c0>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00b      	beq.n	8004ff8 <CLI_CommandParser+0x2dc>
							++timedoutMsg;
 8004fe0:	4a3f      	ldr	r2, [pc, #252]	; (80050e0 <CLI_CommandParser+0x3c4>)
 8004fe2:	8813      	ldrh	r3, [r2, #0]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004fe8:	9b05      	ldr	r3, [sp, #20]
 8004fea:	0022      	movs	r2, r4
 8004fec:	493d      	ldr	r1, [pc, #244]	; (80050e4 <CLI_CommandParser+0x3c8>)
 8004fee:	0020      	movs	r0, r4
 8004ff0:	f00e f8dc 	bl	80131ac <sprintf>
					xReturned = pdFALSE;
 8004ff4:	2700      	movs	r7, #0
 8004ff6:	e03d      	b.n	8005074 <CLI_CommandParser+0x358>
 8004ff8:	2700      	movs	r7, #0
 8004ffa:	e03b      	b.n	8005074 <CLI_CommandParser+0x358>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004ffc:	0020      	movs	r0, r4
 8004ffe:	f7fb f88b 	bl	8000118 <strlen>
 8005002:	0002      	movs	r2, r0
 8005004:	2100      	movs	r1, #0
 8005006:	0020      	movs	r0, r4
 8005008:	f00d fed6 	bl	8012db8 <memset>
	} while(xReturned != pdFALSE);
 800500c:	2f00      	cmp	r7, #0
 800500e:	d071      	beq.n	80050f4 <CLI_CommandParser+0x3d8>
		StringToLowerCase((char* )cInputString);
 8005010:	0028      	movs	r0, r5
 8005012:	f7ff fbc9 	bl	80047a8 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8005016:	4a21      	ldr	r2, [pc, #132]	; (800509c <CLI_CommandParser+0x380>)
 8005018:	2336      	movs	r3, #54	; 0x36
 800501a:	5cd6      	ldrb	r6, [r2, r3]
 800501c:	2e00      	cmp	r6, #0
 800501e:	d107      	bne.n	8005030 <CLI_CommandParser+0x314>
 8005020:	2203      	movs	r2, #3
 8005022:	4931      	ldr	r1, [pc, #196]	; (80050e8 <CLI_CommandParser+0x3cc>)
 8005024:	0028      	movs	r0, r5
 8005026:	f00e f905 	bl	8013234 <strncmp>
 800502a:	2800      	cmp	r0, #0
 800502c:	d100      	bne.n	8005030 <CLI_CommandParser+0x314>
 800502e:	e686      	b.n	8004d3e <CLI_CommandParser+0x22>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8005030:	2e00      	cmp	r6, #0
 8005032:	d007      	beq.n	8005044 <CLI_CommandParser+0x328>
 8005034:	2206      	movs	r2, #6
 8005036:	492d      	ldr	r1, [pc, #180]	; (80050ec <CLI_CommandParser+0x3d0>)
 8005038:	0028      	movs	r0, r5
 800503a:	f00e f8fb 	bl	8013234 <strncmp>
 800503e:	2800      	cmp	r0, #0
 8005040:	d100      	bne.n	8005044 <CLI_CommandParser+0x328>
 8005042:	e695      	b.n	8004d70 <CLI_CommandParser+0x54>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8005044:	2e02      	cmp	r6, #2
 8005046:	d100      	bne.n	800504a <CLI_CommandParser+0x32e>
 8005048:	e6a1      	b.n	8004d8e <CLI_CommandParser+0x72>
			loc =strchr((char* )cInputString,'.');
 800504a:	212e      	movs	r1, #46	; 0x2e
 800504c:	0028      	movs	r0, r5
 800504e:	f00e f8db 	bl	8013208 <strchr>
 8005052:	1e06      	subs	r6, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8005054:	d007      	beq.n	8005066 <CLI_CommandParser+0x34a>
 8005056:	3803      	subs	r0, #3
 8005058:	2203      	movs	r2, #3
 800505a:	4925      	ldr	r1, [pc, #148]	; (80050f0 <CLI_CommandParser+0x3d4>)
 800505c:	f00e f8ea 	bl	8013234 <strncmp>
 8005060:	2800      	cmp	r0, #0
 8005062:	d000      	beq.n	8005066 <CLI_CommandParser+0x34a>
 8005064:	e6a4      	b.n	8004db0 <CLI_CommandParser+0x94>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005066:	2299      	movs	r2, #153	; 0x99
 8005068:	0092      	lsls	r2, r2, #2
 800506a:	0021      	movs	r1, r4
 800506c:	0028      	movs	r0, r5
 800506e:	f008 fd51 	bl	800db14 <FreeRTOS_CLIProcessCommand>
 8005072:	0007      	movs	r7, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8005074:	7823      	ldrb	r3, [r4, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0c0      	beq.n	8004ffc <CLI_CommandParser+0x2e0>
 800507a:	9b03      	ldr	r3, [sp, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0bd      	beq.n	8004ffc <CLI_CommandParser+0x2e0>
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8005080:	0020      	movs	r0, r4
 8005082:	f7fb f849 	bl	8000118 <strlen>
 8005086:	b282      	uxth	r2, r0
 8005088:	2301      	movs	r3, #1
 800508a:	425b      	negs	r3, r3
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	3333      	adds	r3, #51	; 0x33
 8005090:	0021      	movs	r1, r4
 8005092:	9804      	ldr	r0, [sp, #16]
 8005094:	f008 fb04 	bl	800d6a0 <writePxMutex>
 8005098:	e7b0      	b.n	8004ffc <CLI_CommandParser+0x2e0>
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	200016d4 	.word	0x200016d4
 80050a0:	08018468 	.word	0x08018468
 80050a4:	08017d44 	.word	0x08017d44
 80050a8:	080184c4 	.word	0x080184c4
 80050ac:	20000a98 	.word	0x20000a98
 80050b0:	080185a8 	.word	0x080185a8
 80050b4:	200067c8 	.word	0x200067c8
 80050b8:	20000c28 	.word	0x20000c28
 80050bc:	0801850c 	.word	0x0801850c
 80050c0:	08018534 	.word	0x08018534
 80050c4:	20000da8 	.word	0x20000da8
 80050c8:	20000b3c 	.word	0x20000b3c
 80050cc:	0801855c 	.word	0x0801855c
 80050d0:	20000a9c 	.word	0x20000a9c
 80050d4:	0801857c 	.word	0x0801857c
 80050d8:	080185b0 	.word	0x080185b0
 80050dc:	20000c3c 	.word	0x20000c3c
 80050e0:	20001fa4 	.word	0x20001fa4
 80050e4:	080185d4 	.word	0x080185d4
 80050e8:	08018464 	.word	0x08018464
 80050ec:	080184bc 	.word	0x080184bc
 80050f0:	08018508 	.word	0x08018508
	memset(idString,0x00,MaxLengthOfAlias);
 80050f4:	2209      	movs	r2, #9
 80050f6:	2100      	movs	r1, #0
 80050f8:	a807      	add	r0, sp, #28
 80050fa:	f00d fe5d 	bl	8012db8 <memset>
	if(!recordSnippet && enableOutput)
 80050fe:	4a0c      	ldr	r2, [pc, #48]	; (8005130 <CLI_CommandParser+0x414>)
 8005100:	2336      	movs	r3, #54	; 0x36
 8005102:	5cd3      	ldrb	r3, [r2, r3]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d102      	bne.n	800510e <CLI_CommandParser+0x3f2>
 8005108:	9b03      	ldr	r3, [sp, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <CLI_CommandParser+0x400>
}
 800510e:	b00b      	add	sp, #44	; 0x2c
 8005110:	bc3c      	pop	{r2, r3, r4, r5}
 8005112:	4690      	mov	r8, r2
 8005114:	4699      	mov	r9, r3
 8005116:	46a2      	mov	sl, r4
 8005118:	46ab      	mov	fp, r5
 800511a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 800511c:	2301      	movs	r3, #1
 800511e:	425b      	negs	r3, r3
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	3333      	adds	r3, #51	; 0x33
 8005124:	2238      	movs	r2, #56	; 0x38
 8005126:	4903      	ldr	r1, [pc, #12]	; (8005134 <CLI_CommandParser+0x418>)
 8005128:	9804      	ldr	r0, [sp, #16]
 800512a:	f008 fab9 	bl	800d6a0 <writePxMutex>
}
 800512e:	e7ee      	b.n	800510e <CLI_CommandParser+0x3f2>
 8005130:	200016d4 	.word	0x200016d4
 8005134:	080185f4 	.word	0x080185f4

08005138 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	b084      	sub	sp, #16
	char cRxedChar ='\0';
 800513c:	230f      	movs	r3, #15
 800513e:	446b      	add	r3, sp
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005144:	2101      	movs	r1, #1
 8005146:	4249      	negs	r1, r1
 8005148:	2001      	movs	r0, #1
 800514a:	f009 ff0d 	bl	800ef68 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800514e:	f008 fd49 	bl	800dbe4 <FreeRTOS_CLIGetOutputBuffer>
 8005152:	0005      	movs	r5, r0
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005154:	4b49      	ldr	r3, [pc, #292]	; (800527c <prvCLITask+0x144>)
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	23e1      	movs	r3, #225	; 0xe1
 800515a:	031b      	lsls	r3, r3, #12
 800515c:	429a      	cmp	r2, r3
 800515e:	d00f      	beq.n	8005180 <prvCLITask+0x48>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005160:	2401      	movs	r4, #1
 8005162:	e006      	b.n	8005172 <prvCLITask+0x3a>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005164:	21e1      	movs	r1, #225	; 0xe1
 8005166:	0309      	lsls	r1, r1, #12
 8005168:	0020      	movs	r0, r4
 800516a:	f008 fae7 	bl	800d73c <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800516e:	3401      	adds	r4, #1
 8005170:	b2e4      	uxtb	r4, r4
 8005172:	2c05      	cmp	r4, #5
 8005174:	d804      	bhi.n	8005180 <prvCLITask+0x48>
			if(port != PcPort)
 8005176:	4b42      	ldr	r3, [pc, #264]	; (8005280 <prvCLITask+0x148>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	42a3      	cmp	r3, r4
 800517c:	d0f7      	beq.n	800516e <prvCLITask+0x36>
 800517e:	e7f1      	b.n	8005164 <prvCLITask+0x2c>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 8005180:	4b40      	ldr	r3, [pc, #256]	; (8005284 <prvCLITask+0x14c>)
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	005a      	lsls	r2, r3, #1
 8005186:	18d2      	adds	r2, r2, r3
 8005188:	0053      	lsls	r3, r2, #1
 800518a:	4a3f      	ldr	r2, [pc, #252]	; (8005288 <prvCLITask+0x150>)
 800518c:	189b      	adds	r3, r3, r2
 800518e:	4a3f      	ldr	r2, [pc, #252]	; (800528c <prvCLITask+0x154>)
 8005190:	7812      	ldrb	r2, [r2, #0]
 8005192:	4c3f      	ldr	r4, [pc, #252]	; (8005290 <prvCLITask+0x158>)
 8005194:	3438      	adds	r4, #56	; 0x38
 8005196:	4e3a      	ldr	r6, [pc, #232]	; (8005280 <prvCLITask+0x148>)
 8005198:	7831      	ldrb	r1, [r6, #0]
 800519a:	9100      	str	r1, [sp, #0]
 800519c:	493d      	ldr	r1, [pc, #244]	; (8005294 <prvCLITask+0x15c>)
 800519e:	0020      	movs	r0, r4
 80051a0:	f00e f804 	bl	80131ac <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 80051a4:	22a4      	movs	r2, #164	; 0xa4
 80051a6:	7830      	ldrb	r0, [r6, #0]
 80051a8:	230a      	movs	r3, #10
 80051aa:	0092      	lsls	r2, r2, #2
 80051ac:	493a      	ldr	r1, [pc, #232]	; (8005298 <prvCLITask+0x160>)
 80051ae:	f008 faa5 	bl	800d6fc <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 80051b2:	0020      	movs	r0, r4
 80051b4:	f7fa ffb0 	bl	8000118 <strlen>
 80051b8:	b282      	uxth	r2, r0
 80051ba:	7830      	ldrb	r0, [r6, #0]
 80051bc:	230a      	movs	r3, #10
 80051be:	0021      	movs	r1, r4
 80051c0:	f008 fa9c 	bl	800d6fc <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 80051c4:	2600      	movs	r6, #0
 80051c6:	e01e      	b.n	8005206 <prvCLITask+0xce>
				writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 80051c8:	4b2d      	ldr	r3, [pc, #180]	; (8005280 <prvCLITask+0x148>)
 80051ca:	7818      	ldrb	r0, [r3, #0]
 80051cc:	230a      	movs	r3, #10
 80051ce:	2202      	movs	r2, #2
 80051d0:	4932      	ldr	r1, [pc, #200]	; (800529c <prvCLITask+0x164>)
 80051d2:	f008 fa93 	bl	800d6fc <writePxITMutex>
				if(cInputIndex == 0){
 80051d6:	2e00      	cmp	r6, #0
 80051d8:	d040      	beq.n	800525c <prvCLITask+0x124>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 80051da:	4c31      	ldr	r4, [pc, #196]	; (80052a0 <prvCLITask+0x168>)
 80051dc:	3414      	adds	r4, #20
 80051de:	4b28      	ldr	r3, [pc, #160]	; (8005280 <prvCLITask+0x148>)
 80051e0:	7818      	ldrb	r0, [r3, #0]
 80051e2:	002b      	movs	r3, r5
 80051e4:	0022      	movs	r2, r4
 80051e6:	2101      	movs	r1, #1
 80051e8:	f7ff fd98 	bl	8004d1c <CLI_CommandParser>
				strcpy((char* )cLastInputString,(char* )cInputString);
 80051ec:	4828      	ldr	r0, [pc, #160]	; (8005290 <prvCLITask+0x158>)
 80051ee:	0021      	movs	r1, r4
 80051f0:	3060      	adds	r0, #96	; 0x60
 80051f2:	f00e f817 	bl	8013224 <strcpy>
				memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 80051f6:	2232      	movs	r2, #50	; 0x32
 80051f8:	2100      	movs	r1, #0
 80051fa:	0020      	movs	r0, r4
 80051fc:	f00d fddc 	bl	8012db8 <memset>
				cInputIndex =0;
 8005200:	2600      	movs	r6, #0
		taskYIELD();
 8005202:	f00a f967 	bl	800f4d4 <vPortYield>
		if(Read_In_CLI_Task_Flag == 1)
 8005206:	4b27      	ldr	r3, [pc, #156]	; (80052a4 <prvCLITask+0x16c>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d1f9      	bne.n	8005202 <prvCLITask+0xca>
			cRxedChar = Rx_Data[PcPort - 1];
 800520e:	4b1c      	ldr	r3, [pc, #112]	; (8005280 <prvCLITask+0x148>)
 8005210:	7818      	ldrb	r0, [r3, #0]
 8005212:	1e42      	subs	r2, r0, #1
 8005214:	4924      	ldr	r1, [pc, #144]	; (80052a8 <prvCLITask+0x170>)
 8005216:	5c8b      	ldrb	r3, [r1, r2]
 8005218:	240f      	movs	r4, #15
 800521a:	446c      	add	r4, sp
 800521c:	7023      	strb	r3, [r4, #0]
			Rx_Data[PcPort - 1] = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	548b      	strb	r3, [r1, r2]
			Read_In_CLI_Task_Flag = 0;
 8005222:	4a20      	ldr	r2, [pc, #128]	; (80052a4 <prvCLITask+0x16c>)
 8005224:	7013      	strb	r3, [r2, #0]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 8005226:	330a      	adds	r3, #10
 8005228:	2201      	movs	r2, #1
 800522a:	0021      	movs	r1, r4
 800522c:	f008 fa66 	bl	800d6fc <writePxITMutex>
			if(cRxedChar == '\r'){
 8005230:	7823      	ldrb	r3, [r4, #0]
 8005232:	2b0d      	cmp	r3, #13
 8005234:	d0c8      	beq.n	80051c8 <prvCLITask+0x90>
				if(cRxedChar == '\n'){
 8005236:	2b0a      	cmp	r3, #10
 8005238:	d0e3      	beq.n	8005202 <prvCLITask+0xca>
				else if(cRxedChar == '\b' || cRxedChar == 127 ){
 800523a:	2b08      	cmp	r3, #8
 800523c:	d015      	beq.n	800526a <prvCLITask+0x132>
 800523e:	2b7f      	cmp	r3, #127	; 0x7f
 8005240:	d013      	beq.n	800526a <prvCLITask+0x132>
					if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 8005242:	001a      	movs	r2, r3
 8005244:	3a20      	subs	r2, #32
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	2a5e      	cmp	r2, #94	; 0x5e
 800524a:	d8da      	bhi.n	8005202 <prvCLITask+0xca>
						if(cInputIndex < cmdMAX_INPUT_SIZE){
 800524c:	2e31      	cmp	r6, #49	; 0x31
 800524e:	dcd8      	bgt.n	8005202 <prvCLITask+0xca>
							cInputString[cInputIndex] =cRxedChar;
 8005250:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <prvCLITask+0x168>)
 8005252:	1992      	adds	r2, r2, r6
 8005254:	7513      	strb	r3, [r2, #20]
							cInputIndex++;
 8005256:	3601      	adds	r6, #1
 8005258:	b276      	sxtb	r6, r6
 800525a:	e7d2      	b.n	8005202 <prvCLITask+0xca>
					strcpy((char* )cInputString,(char* )cLastInputString);
 800525c:	490c      	ldr	r1, [pc, #48]	; (8005290 <prvCLITask+0x158>)
 800525e:	4810      	ldr	r0, [pc, #64]	; (80052a0 <prvCLITask+0x168>)
 8005260:	3160      	adds	r1, #96	; 0x60
 8005262:	3014      	adds	r0, #20
 8005264:	f00d ffde 	bl	8013224 <strcpy>
 8005268:	e7b7      	b.n	80051da <prvCLITask+0xa2>
					if(cInputIndex > 0){
 800526a:	2e00      	cmp	r6, #0
 800526c:	ddc9      	ble.n	8005202 <prvCLITask+0xca>
						cInputIndex--;
 800526e:	3e01      	subs	r6, #1
 8005270:	b276      	sxtb	r6, r6
						cInputString[cInputIndex] ='\0';
 8005272:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <prvCLITask+0x168>)
 8005274:	199b      	adds	r3, r3, r6
 8005276:	2200      	movs	r2, #0
 8005278:	751a      	strb	r2, [r3, #20]
 800527a:	e7c2      	b.n	8005202 <prvCLITask+0xca>
 800527c:	20006848 	.word	0x20006848
 8005280:	20000c28 	.word	0x20000c28
 8005284:	20000030 	.word	0x20000030
 8005288:	08017654 	.word	0x08017654
 800528c:	20000a98 	.word	0x20000a98
 8005290:	200016d4 	.word	0x200016d4
 8005294:	08018630 	.word	0x08018630
 8005298:	0801865c 	.word	0x0801865c
 800529c:	0801a36c 	.word	0x0801a36c
 80052a0:	20001754 	.word	0x20001754
 80052a4:	200016d1 	.word	0x200016d1
 80052a8:	20001c94 	.word	0x20001c94

080052ac <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80052ac:	b570      	push	{r4, r5, r6, lr}
 80052ae:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80052b0:	4b1c      	ldr	r3, [pc, #112]	; (8005324 <ParseSnippetCommand+0x78>)
 80052b2:	781a      	ldrb	r2, [r3, #0]
 80052b4:	3a01      	subs	r2, #1
 80052b6:	0093      	lsls	r3, r2, #2
 80052b8:	189b      	adds	r3, r3, r2
 80052ba:	009a      	lsls	r2, r3, #2
 80052bc:	4b1a      	ldr	r3, [pc, #104]	; (8005328 <ParseSnippetCommand+0x7c>)
 80052be:	189b      	adds	r3, r3, r2
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d02c      	beq.n	8005320 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 80052c6:	4b19      	ldr	r3, [pc, #100]	; (800532c <ParseSnippetCommand+0x80>)
 80052c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d014      	beq.n	80052f8 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 80052ce:	4b17      	ldr	r3, [pc, #92]	; (800532c <ParseSnippetCommand+0x80>)
 80052d0:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 80052d2:	782b      	ldrb	r3, [r5, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d012      	beq.n	80052fe <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 80052d8:	2113      	movs	r1, #19
 80052da:	0028      	movs	r0, r5
 80052dc:	f00d ff94 	bl	8013208 <strchr>
 80052e0:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 80052e2:	d011      	beq.n	8005308 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 80052e4:	1b42      	subs	r2, r0, r5
 80052e6:	0029      	movs	r1, r5
 80052e8:	0020      	movs	r0, r4
 80052ea:	f00d ffb4 	bl	8013256 <strncpy>
		ptrStart =ptrEnd + 1;
 80052ee:	3601      	adds	r6, #1
 80052f0:	4b0e      	ldr	r3, [pc, #56]	; (800532c <ParseSnippetCommand+0x80>)
 80052f2:	649e      	str	r6, [r3, #72]	; 0x48
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 80052f4:	2001      	movs	r0, #1
 80052f6:	e006      	b.n	8005306 <ParseSnippetCommand+0x5a>
		ptrStart =snippetBuffer;
 80052f8:	4b0c      	ldr	r3, [pc, #48]	; (800532c <ParseSnippetCommand+0x80>)
 80052fa:	6498      	str	r0, [r3, #72]	; 0x48
 80052fc:	e7e7      	b.n	80052ce <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 80052fe:	4b0b      	ldr	r3, [pc, #44]	; (800532c <ParseSnippetCommand+0x80>)
 8005300:	2200      	movs	r2, #0
 8005302:	649a      	str	r2, [r3, #72]	; 0x48
		return false;
 8005304:	2000      	movs	r0, #0
}
 8005306:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )cliBuffer,ptrStart);
 8005308:	0029      	movs	r1, r5
 800530a:	0020      	movs	r0, r4
 800530c:	f00d ff8a 	bl	8013224 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8005310:	0020      	movs	r0, r4
 8005312:	f7fa ff01 	bl	8000118 <strlen>
 8005316:	182d      	adds	r5, r5, r0
 8005318:	4b04      	ldr	r3, [pc, #16]	; (800532c <ParseSnippetCommand+0x80>)
 800531a:	649d      	str	r5, [r3, #72]	; 0x48
	return true;
 800531c:	2001      	movs	r0, #1
 800531e:	e7f2      	b.n	8005306 <ParseSnippetCommand+0x5a>
		return false;
 8005320:	2000      	movs	r0, #0
 8005322:	e7f0      	b.n	8005306 <ParseSnippetCommand+0x5a>
 8005324:	200016d4 	.word	0x200016d4
 8005328:	20006864 	.word	0x20006864
 800532c:	20001754 	.word	0x20001754

08005330 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 8005330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005332:	b083      	sub	sp, #12
 8005334:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005336:	0083      	lsls	r3, r0, #2
 8005338:	181b      	adds	r3, r3, r0
 800533a:	009a      	lsls	r2, r3, #2
 800533c:	4b46      	ldr	r3, [pc, #280]	; (8005458 <CheckSnippetCondition+0x128>)
 800533e:	5cd3      	ldrb	r3, [r2, r3]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d004      	beq.n	800534e <CheckSnippetCondition+0x1e>
 8005344:	2b03      	cmp	r3, #3
 8005346:	d015      	beq.n	8005374 <CheckSnippetCondition+0x44>
			
		default:
			break;
	}
	
	return false;
 8005348:	2000      	movs	r0, #0
}
 800534a:	b003      	add	sp, #12
 800534c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 800534e:	4a42      	ldr	r2, [pc, #264]	; (8005458 <CheckSnippetCondition+0x128>)
 8005350:	0083      	lsls	r3, r0, #2
 8005352:	1818      	adds	r0, r3, r0
 8005354:	0081      	lsls	r1, r0, #2
 8005356:	0008      	movs	r0, r1
 8005358:	1851      	adds	r1, r2, r1
 800535a:	7889      	ldrb	r1, [r1, #2]
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 800535c:	1812      	adds	r2, r2, r0
 800535e:	78d2      	ldrb	r2, [r2, #3]
 8005360:	00cb      	lsls	r3, r1, #3
 8005362:	185b      	adds	r3, r3, r1
 8005364:	493d      	ldr	r1, [pc, #244]	; (800545c <CheckSnippetCondition+0x12c>)
 8005366:	5c5b      	ldrb	r3, [r3, r1]
 8005368:	429a      	cmp	r2, r3
 800536a:	d001      	beq.n	8005370 <CheckSnippetCondition+0x40>
				return false;
 800536c:	2000      	movs	r0, #0
 800536e:	e7ec      	b.n	800534a <CheckSnippetCondition+0x1a>
				return true;
 8005370:	2001      	movs	r0, #1
 8005372:	e7ea      	b.n	800534a <CheckSnippetCondition+0x1a>
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005374:	4e38      	ldr	r6, [pc, #224]	; (8005458 <CheckSnippetCondition+0x128>)
 8005376:	0085      	lsls	r5, r0, #2
 8005378:	182b      	adds	r3, r5, r0
 800537a:	0099      	lsls	r1, r3, #2
 800537c:	1871      	adds	r1, r6, r1
 800537e:	78ca      	ldrb	r2, [r1, #3]
 8005380:	3a01      	subs	r2, #1
 8005382:	0053      	lsls	r3, r2, #1
 8005384:	189b      	adds	r3, r3, r2
 8005386:	009a      	lsls	r2, r3, #2
 8005388:	4b35      	ldr	r3, [pc, #212]	; (8005460 <CheckSnippetCondition+0x130>)
 800538a:	58d3      	ldr	r3, [r2, r3]
 800538c:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800538e:	3106      	adds	r1, #6
 8005390:	2204      	movs	r2, #4
 8005392:	a801      	add	r0, sp, #4
 8005394:	f00d fd07 	bl	8012da6 <memcpy>
			switch(snippets[index].cond.mathOperator){
 8005398:	192c      	adds	r4, r5, r4
 800539a:	00a3      	lsls	r3, r4, #2
 800539c:	18f6      	adds	r6, r6, r3
 800539e:	7873      	ldrb	r3, [r6, #1]
 80053a0:	2b06      	cmp	r3, #6
 80053a2:	d847      	bhi.n	8005434 <CheckSnippetCondition+0x104>
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4a2f      	ldr	r2, [pc, #188]	; (8005464 <CheckSnippetCondition+0x134>)
 80053a8:	58d3      	ldr	r3, [r2, r3]
 80053aa:	469f      	mov	pc, r3
					if(flt1 == flt2)
 80053ac:	1c39      	adds	r1, r7, #0
 80053ae:	9801      	ldr	r0, [sp, #4]
 80053b0:	f7fb f88e 	bl	80004d0 <__aeabi_fcmpeq>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d03f      	beq.n	8005438 <CheckSnippetCondition+0x108>
						return true;
 80053b8:	2001      	movs	r0, #1
 80053ba:	e7c6      	b.n	800534a <CheckSnippetCondition+0x1a>
					if(flt1 > flt2)
 80053bc:	1c39      	adds	r1, r7, #0
 80053be:	9801      	ldr	r0, [sp, #4]
 80053c0:	f7fb f88c 	bl	80004dc <__aeabi_fcmplt>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d101      	bne.n	80053cc <CheckSnippetCondition+0x9c>
	return false;
 80053c8:	2000      	movs	r0, #0
 80053ca:	e7be      	b.n	800534a <CheckSnippetCondition+0x1a>
						return true;
 80053cc:	2001      	movs	r0, #1
 80053ce:	e7bc      	b.n	800534a <CheckSnippetCondition+0x1a>
					if(flt1 < flt2 && flt1 != 0.0f)
 80053d0:	1c39      	adds	r1, r7, #0
 80053d2:	9801      	ldr	r0, [sp, #4]
 80053d4:	f7fb f896 	bl	8000504 <__aeabi_fcmpgt>
 80053d8:	2800      	cmp	r0, #0
 80053da:	d02f      	beq.n	800543c <CheckSnippetCondition+0x10c>
 80053dc:	2100      	movs	r1, #0
 80053de:	1c38      	adds	r0, r7, #0
 80053e0:	f7fb f876 	bl	80004d0 <__aeabi_fcmpeq>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d12b      	bne.n	8005440 <CheckSnippetCondition+0x110>
						return true;
 80053e8:	3001      	adds	r0, #1
 80053ea:	e7ae      	b.n	800534a <CheckSnippetCondition+0x1a>
					if(flt1 >= flt2)
 80053ec:	1c39      	adds	r1, r7, #0
 80053ee:	9801      	ldr	r0, [sp, #4]
 80053f0:	f7fb f87e 	bl	80004f0 <__aeabi_fcmple>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	d025      	beq.n	8005444 <CheckSnippetCondition+0x114>
						return true;
 80053f8:	2001      	movs	r0, #1
 80053fa:	e7a6      	b.n	800534a <CheckSnippetCondition+0x1a>
					if(flt1 <= flt2 && flt1 != 0.0f)
 80053fc:	1c39      	adds	r1, r7, #0
 80053fe:	9801      	ldr	r0, [sp, #4]
 8005400:	f7fb f88a 	bl	8000518 <__aeabi_fcmpge>
 8005404:	2800      	cmp	r0, #0
 8005406:	d01f      	beq.n	8005448 <CheckSnippetCondition+0x118>
 8005408:	2100      	movs	r1, #0
 800540a:	1c38      	adds	r0, r7, #0
 800540c:	f7fb f860 	bl	80004d0 <__aeabi_fcmpeq>
 8005410:	2800      	cmp	r0, #0
 8005412:	d11b      	bne.n	800544c <CheckSnippetCondition+0x11c>
						return true;
 8005414:	3001      	adds	r0, #1
 8005416:	e798      	b.n	800534a <CheckSnippetCondition+0x1a>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005418:	1c39      	adds	r1, r7, #0
 800541a:	9801      	ldr	r0, [sp, #4]
 800541c:	f7fb f858 	bl	80004d0 <__aeabi_fcmpeq>
 8005420:	2800      	cmp	r0, #0
 8005422:	d115      	bne.n	8005450 <CheckSnippetCondition+0x120>
 8005424:	2100      	movs	r1, #0
 8005426:	1c38      	adds	r0, r7, #0
 8005428:	f7fb f852 	bl	80004d0 <__aeabi_fcmpeq>
 800542c:	2800      	cmp	r0, #0
 800542e:	d111      	bne.n	8005454 <CheckSnippetCondition+0x124>
						return true;
 8005430:	3001      	adds	r0, #1
 8005432:	e78a      	b.n	800534a <CheckSnippetCondition+0x1a>
	return false;
 8005434:	2000      	movs	r0, #0
 8005436:	e788      	b.n	800534a <CheckSnippetCondition+0x1a>
 8005438:	2000      	movs	r0, #0
 800543a:	e786      	b.n	800534a <CheckSnippetCondition+0x1a>
 800543c:	2000      	movs	r0, #0
 800543e:	e784      	b.n	800534a <CheckSnippetCondition+0x1a>
 8005440:	2000      	movs	r0, #0
 8005442:	e782      	b.n	800534a <CheckSnippetCondition+0x1a>
 8005444:	2000      	movs	r0, #0
 8005446:	e780      	b.n	800534a <CheckSnippetCondition+0x1a>
 8005448:	2000      	movs	r0, #0
 800544a:	e77e      	b.n	800534a <CheckSnippetCondition+0x1a>
 800544c:	2000      	movs	r0, #0
 800544e:	e77c      	b.n	800534a <CheckSnippetCondition+0x1a>
 8005450:	2000      	movs	r0, #0
 8005452:	e77a      	b.n	800534a <CheckSnippetCondition+0x1a>
 8005454:	2000      	movs	r0, #0
 8005456:	e778      	b.n	800534a <CheckSnippetCondition+0x1a>
 8005458:	20006864 	.word	0x20006864
 800545c:	200023a4 	.word	0x200023a4
 8005460:	20000094 	.word	0x20000094
 8005464:	08017714 	.word	0x08017714

08005468 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 8005468:	b570      	push	{r4, r5, r6, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800546a:	f008 fbbb 	bl	800dbe4 <FreeRTOS_CLIGetOutputBuffer>
 800546e:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 8005470:	2400      	movs	r4, #0
 8005472:	e01d      	b.n	80054b0 <ExecuteSnippet+0x48>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005474:	4a1a      	ldr	r2, [pc, #104]	; (80054e0 <ExecuteSnippet+0x78>)
 8005476:	4b1b      	ldr	r3, [pc, #108]	; (80054e4 <ExecuteSnippet+0x7c>)
 8005478:	7818      	ldrb	r0, [r3, #0]
 800547a:	002b      	movs	r3, r5
 800547c:	324c      	adds	r2, #76	; 0x4c
 800547e:	2100      	movs	r1, #0
 8005480:	f7ff fc4c 	bl	8004d1c <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005484:	0028      	movs	r0, r5
 8005486:	f7fa fe47 	bl	8000118 <strlen>
 800548a:	0002      	movs	r2, r0
 800548c:	2100      	movs	r1, #0
 800548e:	0028      	movs	r0, r5
 8005490:	f00d fc92 	bl	8012db8 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005494:	4912      	ldr	r1, [pc, #72]	; (80054e0 <ExecuteSnippet+0x78>)
 8005496:	00b3      	lsls	r3, r6, #2
 8005498:	199b      	adds	r3, r3, r6
 800549a:	009a      	lsls	r2, r3, #2
 800549c:	4b12      	ldr	r3, [pc, #72]	; (80054e8 <ExecuteSnippet+0x80>)
 800549e:	189b      	adds	r3, r3, r2
 80054a0:	68d8      	ldr	r0, [r3, #12]
 80054a2:	314c      	adds	r1, #76	; 0x4c
 80054a4:	f7ff ff02 	bl	80052ac <ParseSnippetCommand>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	d1e3      	bne.n	8005474 <ExecuteSnippet+0xc>
	for(s =0; s < numOfRecordedSnippets; s++){
 80054ac:	3401      	adds	r4, #1
 80054ae:	b2a4      	uxth	r4, r4
 80054b0:	4b0e      	ldr	r3, [pc, #56]	; (80054ec <ExecuteSnippet+0x84>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d911      	bls.n	80054dc <ExecuteSnippet+0x74>
		if(snippets[s].state)								// Check for activated Snippets
 80054b8:	0026      	movs	r6, r4
 80054ba:	00a3      	lsls	r3, r4, #2
 80054bc:	191b      	adds	r3, r3, r4
 80054be:	009a      	lsls	r2, r3, #2
 80054c0:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <ExecuteSnippet+0x80>)
 80054c2:	189b      	adds	r3, r3, r2
 80054c4:	7c1b      	ldrb	r3, [r3, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0f0      	beq.n	80054ac <ExecuteSnippet+0x44>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 80054ca:	b2e0      	uxtb	r0, r4
 80054cc:	f7ff ff30 	bl	8005330 <CheckSnippetCondition>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d0eb      	beq.n	80054ac <ExecuteSnippet+0x44>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80054d4:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <ExecuteSnippet+0x88>)
 80054d6:	2220      	movs	r2, #32
 80054d8:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80054da:	e7db      	b.n	8005494 <ExecuteSnippet+0x2c>
			}
		}
	}
	
	return result;
}
 80054dc:	2000      	movs	r0, #0
 80054de:	bd70      	pop	{r4, r5, r6, pc}
 80054e0:	20001754 	.word	0x20001754
 80054e4:	20000c28 	.word	0x20000c28
 80054e8:	20006864 	.word	0x20006864
 80054ec:	200016d4 	.word	0x200016d4
 80054f0:	200067c8 	.word	0x200067c8

080054f4 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 80054f4:	2000      	movs	r0, #0
 80054f6:	4770      	bx	lr

080054f8 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054fa:	b083      	sub	sp, #12
 80054fc:	0005      	movs	r5, r0
 80054fe:	0014      	movs	r4, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8005500:	2300      	movs	r3, #0
 8005502:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005504:	9300      	str	r3, [sp, #0]
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005506:	aa01      	add	r2, sp, #4
 8005508:	2101      	movs	r1, #1
 800550a:	0020      	movs	r0, r4
 800550c:	f008 fb6e 	bl	800dbec <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005510:	2300      	movs	r3, #0
 8005512:	56c3      	ldrsb	r3, [r0, r3]
 8005514:	2b70      	cmp	r3, #112	; 0x70
 8005516:	d017      	beq.n	8005548 <setBaudrateCommand+0x50>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
	}
	else{
		result =BOS_ERR_WrongValue;
 8005518:	2768      	movs	r7, #104	; 0x68
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800551a:	466a      	mov	r2, sp
 800551c:	2102      	movs	r1, #2
 800551e:	0020      	movs	r0, r4
 8005520:	f008 fb64 	bl	800dbec <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005524:	f00d f9b5 	bl	8012892 <atol>
 8005528:	0004      	movs	r4, r0
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
 800552a:	2f68      	cmp	r7, #104	; 0x68
 800552c:	d012      	beq.n	8005554 <setBaudrateCommand+0x5c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
	}
	else{
		UpdateBaudrate(port,baudrate);
 800552e:	0001      	movs	r1, r0
 8005530:	0030      	movs	r0, r6
 8005532:	f008 f903 	bl	800d73c <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 8005536:	0033      	movs	r3, r6
 8005538:	0022      	movs	r2, r4
 800553a:	4909      	ldr	r1, [pc, #36]	; (8005560 <setBaudrateCommand+0x68>)
 800553c:	0028      	movs	r0, r5
 800553e:	f00d fe35 	bl	80131ac <sprintf>
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 8005542:	2000      	movs	r0, #0
 8005544:	b003      	add	sp, #12
 8005546:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005548:	3001      	adds	r0, #1
 800554a:	f00d f9a2 	bl	8012892 <atol>
 800554e:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 8005550:	2700      	movs	r7, #0
 8005552:	e7e2      	b.n	800551a <setBaudrateCommand+0x22>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005554:	2213      	movs	r2, #19
 8005556:	4903      	ldr	r1, [pc, #12]	; (8005564 <setBaudrateCommand+0x6c>)
 8005558:	0028      	movs	r0, r5
 800555a:	f00d fc24 	bl	8012da6 <memcpy>
 800555e:	e7f0      	b.n	8005542 <setBaudrateCommand+0x4a>
 8005560:	08018904 	.word	0x08018904
 8005564:	080188f0 	.word	0x080188f0

08005568 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005568:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 800556a:	4b04      	ldr	r3, [pc, #16]	; (800557c <flashsizeCommand+0x14>)
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	0412      	lsls	r2, r2, #16
 8005570:	0c12      	lsrs	r2, r2, #16
 8005572:	4903      	ldr	r1, [pc, #12]	; (8005580 <flashsizeCommand+0x18>)
 8005574:	f00d fe1a 	bl	80131ac <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005578:	2000      	movs	r0, #0
 800557a:	bd10      	pop	{r4, pc}
 800557c:	1ffff7cc 	.word	0x1ffff7cc
 8005580:	0801892c 	.word	0x0801892c

08005584 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005584:	b510      	push	{r4, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	0004      	movs	r4, r0
 800558a:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 800558c:	2300      	movs	r3, #0
 800558e:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 8005590:	2300      	movs	r3, #0
 8005592:	9300      	str	r3, [sp, #0]
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005594:	aa01      	add	r2, sp, #4
 8005596:	2101      	movs	r1, #1
 8005598:	f008 fb28 	bl	800dbec <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800559c:	2300      	movs	r3, #0
 800559e:	56c3      	ldrsb	r3, [r0, r3]
 80055a0:	3b32      	subs	r3, #50	; 0x32
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d907      	bls.n	80055b8 <GetReadPrecentageCommand+0x34>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80055a8:	2215      	movs	r2, #21
 80055aa:	490b      	ldr	r1, [pc, #44]	; (80055d8 <GetReadPrecentageCommand+0x54>)
 80055ac:	0020      	movs	r0, r4
 80055ae:	f00d fbfa 	bl	8012da6 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 80055b2:	2000      	movs	r0, #0
 80055b4:	b002      	add	sp, #8
 80055b6:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80055b8:	f00d f96b 	bl	8012892 <atol>
 80055bc:	b2c0      	uxtb	r0, r0
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 80055be:	4669      	mov	r1, sp
 80055c0:	f006 feba 	bl	800c338 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 80055c4:	9800      	ldr	r0, [sp, #0]
 80055c6:	f7fd fab7 	bl	8002b38 <__aeabi_f2d>
 80055ca:	0002      	movs	r2, r0
 80055cc:	000b      	movs	r3, r1
 80055ce:	4903      	ldr	r1, [pc, #12]	; (80055dc <GetReadPrecentageCommand+0x58>)
 80055d0:	0020      	movs	r0, r4
 80055d2:	f00d fdeb 	bl	80131ac <sprintf>
 80055d6:	e7ec      	b.n	80055b2 <GetReadPrecentageCommand+0x2e>
 80055d8:	08018970 	.word	0x08018970
 80055dc:	0801894c 	.word	0x0801894c

080055e0 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055e0:	b510      	push	{r4, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80055ec:	4669      	mov	r1, sp
 80055ee:	a801      	add	r0, sp, #4
 80055f0:	f006 fde4 	bl	800c1bc <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80055f4:	a901      	add	r1, sp, #4
 80055f6:	0020      	movs	r0, r4
 80055f8:	f00d fe14 	bl	8013224 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80055fc:	9800      	ldr	r0, [sp, #0]
 80055fe:	f7fd fa9b 	bl	8002b38 <__aeabi_f2d>
 8005602:	0002      	movs	r2, r0
 8005604:	000b      	movs	r3, r1
 8005606:	4903      	ldr	r1, [pc, #12]	; (8005614 <ReadVrefCommand+0x34>)
 8005608:	0020      	movs	r0, r4
 800560a:	f00d fdcf 	bl	80131ac <sprintf>
}
 800560e:	2000      	movs	r0, #0
 8005610:	b002      	add	sp, #8
 8005612:	bd10      	pop	{r4, pc}
 8005614:	08018988 	.word	0x08018988

08005618 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005618:	b510      	push	{r4, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 800561e:	2300      	movs	r3, #0
 8005620:	9301      	str	r3, [sp, #4]
 8005622:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005624:	4669      	mov	r1, sp
 8005626:	a801      	add	r0, sp, #4
 8005628:	f006 fdc8 	bl	800c1bc <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800562c:	a901      	add	r1, sp, #4
 800562e:	0020      	movs	r0, r4
 8005630:	f00d fdf8 	bl	8013224 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005634:	9801      	ldr	r0, [sp, #4]
 8005636:	f7fd fa7f 	bl	8002b38 <__aeabi_f2d>
 800563a:	0002      	movs	r2, r0
 800563c:	000b      	movs	r3, r1
 800563e:	4903      	ldr	r1, [pc, #12]	; (800564c <ReadTempCommand+0x34>)
 8005640:	0020      	movs	r0, r4
 8005642:	f00d fdb3 	bl	80131ac <sprintf>
}
 8005646:	2000      	movs	r0, #0
 8005648:	b002      	add	sp, #8
 800564a:	bd10      	pop	{r4, pc}
 800564c:	080189b0 	.word	0x080189b0

08005650 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	0005      	movs	r5, r0
 8005656:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005658:	2300      	movs	r3, #0
 800565a:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 800565c:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 800565e:	2300      	movs	r3, #0
 8005660:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005662:	aa03      	add	r2, sp, #12
 8005664:	2101      	movs	r1, #1
 8005666:	0030      	movs	r0, r6
 8005668:	f008 fac0 	bl	800dbec <FreeRTOS_CLIGetParameter>
 800566c:	0004      	movs	r4, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800566e:	aa02      	add	r2, sp, #8
 8005670:	2102      	movs	r1, #2
 8005672:	0030      	movs	r0, r6
 8005674:	f008 faba 	bl	800dbec <FreeRTOS_CLIGetParameter>
 8005678:	0006      	movs	r6, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800567a:	2300      	movs	r3, #0
 800567c:	56e3      	ldrsb	r3, [r4, r3]
 800567e:	3b32      	subs	r3, #50	; 0x32
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b01      	cmp	r3, #1
 8005684:	d907      	bls.n	8005696 <ADCReadCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005686:	2215      	movs	r2, #21
 8005688:	4919      	ldr	r1, [pc, #100]	; (80056f0 <ADCReadCommand+0xa0>)
 800568a:	0028      	movs	r0, r5
 800568c:	f00d fb8b 	bl	8012da6 <memcpy>
}
 8005690:	2000      	movs	r0, #0
 8005692:	b004      	add	sp, #16
 8005694:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005696:	0020      	movs	r0, r4
 8005698:	f00d f8fb 	bl	8012892 <atol>
 800569c:	b2c4      	uxtb	r4, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 800569e:	4915      	ldr	r1, [pc, #84]	; (80056f4 <ADCReadCommand+0xa4>)
 80056a0:	0030      	movs	r0, r6
 80056a2:	f7fa fd2f 	bl	8000104 <strcmp>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d005      	beq.n	80056b6 <ADCReadCommand+0x66>
 80056aa:	4913      	ldr	r1, [pc, #76]	; (80056f8 <ADCReadCommand+0xa8>)
 80056ac:	0030      	movs	r0, r6
 80056ae:	f7fa fd29 	bl	8000104 <strcmp>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d116      	bne.n	80056e4 <ADCReadCommand+0x94>
			ADCSelectChannel(ADCports,ADC_Side);
 80056b6:	4e0f      	ldr	r6, [pc, #60]	; (80056f4 <ADCReadCommand+0xa4>)
 80056b8:	0031      	movs	r1, r6
 80056ba:	0020      	movs	r0, r4
 80056bc:	f006 ff1e 	bl	800c4fc <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 80056c0:	aa01      	add	r2, sp, #4
 80056c2:	0031      	movs	r1, r6
 80056c4:	0020      	movs	r0, r4
 80056c6:	f006 ff49 	bl	800c55c <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 80056ca:	a901      	add	r1, sp, #4
 80056cc:	0028      	movs	r0, r5
 80056ce:	f00d fda9 	bl	8013224 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 80056d2:	9801      	ldr	r0, [sp, #4]
 80056d4:	f7fa ff7e 	bl	80005d4 <__aeabi_f2uiz>
 80056d8:	b282      	uxth	r2, r0
 80056da:	4908      	ldr	r1, [pc, #32]	; (80056fc <ADCReadCommand+0xac>)
 80056dc:	0028      	movs	r0, r5
 80056de:	f00d fd65 	bl	80131ac <sprintf>
 80056e2:	e7d5      	b.n	8005690 <ADCReadCommand+0x40>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80056e4:	2212      	movs	r2, #18
 80056e6:	4906      	ldr	r1, [pc, #24]	; (8005700 <ADCReadCommand+0xb0>)
 80056e8:	0028      	movs	r0, r5
 80056ea:	f00d fb5c 	bl	8012da6 <memcpy>
 80056ee:	e7cf      	b.n	8005690 <ADCReadCommand+0x40>
 80056f0:	08018970 	.word	0x08018970
 80056f4:	080189d4 	.word	0x080189d4
 80056f8:	080189d8 	.word	0x080189d8
 80056fc:	080189e0 	.word	0x080189e0
 8005700:	080189f0 	.word	0x080189f0

08005704 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005706:	b085      	sub	sp, #20
 8005708:	0004      	movs	r4, r0
 800570a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 800570c:	2300      	movs	r3, #0
 800570e:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 8005710:	4b5d      	ldr	r3, [pc, #372]	; (8005888 <testportCommand+0x184>)
 8005712:	781a      	ldrb	r2, [r3, #0]
 8005714:	ab02      	add	r3, sp, #8
 8005716:	701a      	strb	r2, [r3, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005718:	aa03      	add	r2, sp, #12
 800571a:	2101      	movs	r1, #1
 800571c:	f008 fa66 	bl	800dbec <FreeRTOS_CLIGetParameter>
 8005720:	0005      	movs	r5, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005722:	495a      	ldr	r1, [pc, #360]	; (800588c <testportCommand+0x188>)
 8005724:	f7fa fcee 	bl	8000104 <strcmp>
 8005728:	2800      	cmp	r0, #0
 800572a:	d168      	bne.n	80057fe <testportCommand+0xfa>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 800572c:	4b58      	ldr	r3, [pc, #352]	; (8005890 <testportCommand+0x18c>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	3b01      	subs	r3, #1
 8005732:	4a58      	ldr	r2, [pc, #352]	; (8005894 <testportCommand+0x190>)
 8005734:	5cd6      	ldrb	r6, [r2, r3]
		for(ports =1; ports <= NumOfPorts; ports++){
 8005736:	2501      	movs	r5, #1
 8005738:	e023      	b.n	8005782 <testportCommand+0x7e>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 800573a:	002a      	movs	r2, r5
 800573c:	4956      	ldr	r1, [pc, #344]	; (8005898 <testportCommand+0x194>)
 800573e:	0020      	movs	r0, r4
 8005740:	f00d fd34 	bl	80131ac <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005744:	0020      	movs	r0, r4
 8005746:	f7fa fce7 	bl	8000118 <strlen>
 800574a:	b282      	uxth	r2, r0
 800574c:	4b50      	ldr	r3, [pc, #320]	; (8005890 <testportCommand+0x18c>)
 800574e:	7818      	ldrb	r0, [r3, #0]
 8005750:	2364      	movs	r3, #100	; 0x64
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	3b5a      	subs	r3, #90	; 0x5a
 8005756:	0021      	movs	r1, r4
 8005758:	f007 ffa2 	bl	800d6a0 <writePxMutex>
 800575c:	e03d      	b.n	80057da <testportCommand+0xd6>
					Delay_ms(1);
 800575e:	2001      	movs	r0, #1
 8005760:	f00a f81a 	bl	800f798 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005764:	4b4a      	ldr	r3, [pc, #296]	; (8005890 <testportCommand+0x18c>)
 8005766:	781a      	ldrb	r2, [r3, #0]
 8005768:	3a01      	subs	r2, #1
 800576a:	1c71      	adds	r1, r6, #1
 800576c:	0053      	lsls	r3, r2, #1
 800576e:	189b      	adds	r3, r3, r2
 8005770:	019b      	lsls	r3, r3, #6
 8005772:	4a4a      	ldr	r2, [pc, #296]	; (800589c <testportCommand+0x198>)
 8005774:	18d3      	adds	r3, r2, r3
 8005776:	5c5b      	ldrb	r3, [r3, r1]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0f0      	beq.n	800575e <testportCommand+0x5a>
				LastEnter++;
 800577c:	000e      	movs	r6, r1
		for(ports =1; ports <= NumOfPorts; ports++){
 800577e:	3501      	adds	r5, #1
 8005780:	b2ed      	uxtb	r5, r5
 8005782:	2d05      	cmp	r5, #5
 8005784:	d844      	bhi.n	8005810 <testportCommand+0x10c>
			if(PcPort != ports){
 8005786:	4b42      	ldr	r3, [pc, #264]	; (8005890 <testportCommand+0x18c>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	42ab      	cmp	r3, r5
 800578c:	d0f7      	beq.n	800577e <testportCommand+0x7a>
				WriteVaule[0] =rand();
 800578e:	f00d fb2b 	bl	8012de8 <rand>
 8005792:	af02      	add	r7, sp, #8
 8005794:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005796:	2364      	movs	r3, #100	; 0x64
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	3b5a      	subs	r3, #90	; 0x5a
 800579c:	2201      	movs	r2, #1
 800579e:	0039      	movs	r1, r7
 80057a0:	0028      	movs	r0, r5
 80057a2:	f007 ff7d 	bl	800d6a0 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 80057a6:	0028      	movs	r0, r5
 80057a8:	f007 ff5c 	bl	800d664 <GetUart>
 80057ac:	6803      	ldr	r3, [r0, #0]
 80057ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80057b0:	b2db      	uxtb	r3, r3
				if(WriteVaule[0] == ReadValue[0])
 80057b2:	783a      	ldrb	r2, [r7, #0]
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d0c0      	beq.n	800573a <testportCommand+0x36>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 80057b8:	002a      	movs	r2, r5
 80057ba:	4939      	ldr	r1, [pc, #228]	; (80058a0 <testportCommand+0x19c>)
 80057bc:	0020      	movs	r0, r4
 80057be:	f00d fcf5 	bl	80131ac <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80057c2:	0020      	movs	r0, r4
 80057c4:	f7fa fca8 	bl	8000118 <strlen>
 80057c8:	b282      	uxth	r2, r0
 80057ca:	4b31      	ldr	r3, [pc, #196]	; (8005890 <testportCommand+0x18c>)
 80057cc:	7818      	ldrb	r0, [r3, #0]
 80057ce:	2364      	movs	r3, #100	; 0x64
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	3b5a      	subs	r3, #90	; 0x5a
 80057d4:	0021      	movs	r1, r4
 80057d6:	f007 ff63 	bl	800d6a0 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 80057da:	2254      	movs	r2, #84	; 0x54
 80057dc:	4931      	ldr	r1, [pc, #196]	; (80058a4 <testportCommand+0x1a0>)
 80057de:	0020      	movs	r0, r4
 80057e0:	f00d fae1 	bl	8012da6 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80057e4:	0020      	movs	r0, r4
 80057e6:	f7fa fc97 	bl	8000118 <strlen>
 80057ea:	b282      	uxth	r2, r0
 80057ec:	4b28      	ldr	r3, [pc, #160]	; (8005890 <testportCommand+0x18c>)
 80057ee:	7818      	ldrb	r0, [r3, #0]
 80057f0:	2364      	movs	r3, #100	; 0x64
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	3b5a      	subs	r3, #90	; 0x5a
 80057f6:	0021      	movs	r1, r4
 80057f8:	f007 ff52 	bl	800d6a0 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80057fc:	e7b2      	b.n	8005764 <testportCommand+0x60>
	else if(pcParameterString1[0] == 'p'){
 80057fe:	2300      	movs	r3, #0
 8005800:	56eb      	ldrsb	r3, [r5, r3]
 8005802:	2b70      	cmp	r3, #112	; 0x70
 8005804:	d007      	beq.n	8005816 <testportCommand+0x112>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005806:	220f      	movs	r2, #15
 8005808:	4927      	ldr	r1, [pc, #156]	; (80058a8 <testportCommand+0x1a4>)
 800580a:	0020      	movs	r0, r4
 800580c:	f00d facb 	bl	8012da6 <memcpy>
}
 8005810:	2000      	movs	r0, #0
 8005812:	b005      	add	sp, #20
 8005814:	bdf0      	pop	{r4, r5, r6, r7, pc}
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005816:	1c68      	adds	r0, r5, #1
 8005818:	f00d f83b 	bl	8012892 <atol>
 800581c:	0005      	movs	r5, r0
 800581e:	b2c6      	uxtb	r6, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005820:	1e73      	subs	r3, r6, #1
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b04      	cmp	r3, #4
 8005826:	d90b      	bls.n	8005840 <testportCommand+0x13c>
			result =BOS_ERR_WrongID;
 8005828:	2366      	movs	r3, #102	; 0x66
		else if(result == BOS_ERR_WrongID)
 800582a:	2b66      	cmp	r3, #102	; 0x66
 800582c:	d026      	beq.n	800587c <testportCommand+0x178>
		else if(result == BOS_ERR_Keyword)
 800582e:	2b06      	cmp	r3, #6
 8005830:	d1ee      	bne.n	8005810 <testportCommand+0x10c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005832:	22ff      	movs	r2, #255	; 0xff
 8005834:	402a      	ands	r2, r5
 8005836:	491a      	ldr	r1, [pc, #104]	; (80058a0 <testportCommand+0x19c>)
 8005838:	0020      	movs	r0, r4
 800583a:	f00d fcb7 	bl	80131ac <sprintf>
 800583e:	e7e7      	b.n	8005810 <testportCommand+0x10c>
				WriteVaule[0] =rand();
 8005840:	f00d fad2 	bl	8012de8 <rand>
 8005844:	af02      	add	r7, sp, #8
 8005846:	7038      	strb	r0, [r7, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005848:	2364      	movs	r3, #100	; 0x64
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	3b32      	subs	r3, #50	; 0x32
 800584e:	2201      	movs	r2, #1
 8005850:	0039      	movs	r1, r7
 8005852:	0030      	movs	r0, r6
 8005854:	f007 ff24 	bl	800d6a0 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005858:	2000      	movs	r0, #0
 800585a:	f007 ff03 	bl	800d664 <GetUart>
 800585e:	6803      	ldr	r3, [r0, #0]
 8005860:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005862:	b2db      	uxtb	r3, r3
			if(WriteVaule[0] == ReadValue[0])
 8005864:	783a      	ldrb	r2, [r7, #0]
 8005866:	4293      	cmp	r3, r2
 8005868:	d001      	beq.n	800586e <testportCommand+0x16a>
				result =BOS_ERR_Keyword;
 800586a:	2306      	movs	r3, #6
 800586c:	e7dd      	b.n	800582a <testportCommand+0x126>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 800586e:	22ff      	movs	r2, #255	; 0xff
 8005870:	402a      	ands	r2, r5
 8005872:	4909      	ldr	r1, [pc, #36]	; (8005898 <testportCommand+0x194>)
 8005874:	0020      	movs	r0, r4
 8005876:	f00d fc99 	bl	80131ac <sprintf>
 800587a:	e7c9      	b.n	8005810 <testportCommand+0x10c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 800587c:	221b      	movs	r2, #27
 800587e:	490b      	ldr	r1, [pc, #44]	; (80058ac <testportCommand+0x1a8>)
 8005880:	0020      	movs	r0, r4
 8005882:	f00d fa90 	bl	8012da6 <memcpy>
 8005886:	e7c3      	b.n	8005810 <testportCommand+0x10c>
 8005888:	0801798c 	.word	0x0801798c
 800588c:	08017f70 	.word	0x08017f70
 8005890:	20000c28 	.word	0x20000c28
 8005894:	20001894 	.word	0x20001894
 8005898:	08018a04 	.word	0x08018a04
 800589c:	200018d4 	.word	0x200018d4
 80058a0:	08018a20 	.word	0x08018a20
 80058a4:	08018a34 	.word	0x08018a34
 80058a8:	08018aa4 	.word	0x08018aa4
 80058ac:	08018a88 	.word	0x08018a88

080058b0 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b2:	b085      	sub	sp, #20
 80058b4:	0005      	movs	r5, r0
 80058b6:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	9303      	str	r3, [sp, #12]
 80058bc:	9302      	str	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058be:	aa03      	add	r2, sp, #12
 80058c0:	2101      	movs	r1, #1
 80058c2:	0020      	movs	r0, r4
 80058c4:	f008 f992 	bl	800dbec <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80058c8:	2300      	movs	r3, #0
 80058ca:	56c3      	ldrsb	r3, [r0, r3]
 80058cc:	2b70      	cmp	r3, #112	; 0x70
 80058ce:	d016      	beq.n	80058fe <unbridgeCommand+0x4e>
		result =BOS_ERR_WrongParam;
 80058d0:	2667      	movs	r6, #103	; 0x67
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80058d2:	aa02      	add	r2, sp, #8
 80058d4:	2102      	movs	r1, #2
 80058d6:	0020      	movs	r0, r4
 80058d8:	f008 f988 	bl	800dbec <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80058dc:	2300      	movs	r3, #0
 80058de:	56c3      	ldrsb	r3, [r0, r3]
 80058e0:	2b70      	cmp	r3, #112	; 0x70
 80058e2:	d013      	beq.n	800590c <unbridgeCommand+0x5c>
		result =BOS_ERR_WrongParam;
 80058e4:	2067      	movs	r0, #103	; 0x67
	if(result == BOS_OK)
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d01d      	beq.n	8005926 <unbridgeCommand+0x76>
	else if(result == BOS_ERR_WrongParam)
 80058ea:	2867      	cmp	r0, #103	; 0x67
 80058ec:	d022      	beq.n	8005934 <unbridgeCommand+0x84>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 80058ee:	2219      	movs	r2, #25
 80058f0:	4913      	ldr	r1, [pc, #76]	; (8005940 <unbridgeCommand+0x90>)
 80058f2:	0028      	movs	r0, r5
 80058f4:	f00d fa57 	bl	8012da6 <memcpy>
}
 80058f8:	2000      	movs	r0, #0
 80058fa:	b005      	add	sp, #20
 80058fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80058fe:	3001      	adds	r0, #1
 8005900:	f00c ffc7 	bl	8012892 <atol>
 8005904:	b2c3      	uxtb	r3, r0
 8005906:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
 8005908:	2600      	movs	r6, #0
 800590a:	e7e2      	b.n	80058d2 <unbridgeCommand+0x22>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 800590c:	3001      	adds	r0, #1
 800590e:	f00c ffc0 	bl	8012892 <atol>
 8005912:	b2c7      	uxtb	r7, r0
	if(result == BOS_OK)
 8005914:	2e00      	cmp	r6, #0
 8005916:	d001      	beq.n	800591c <unbridgeCommand+0x6c>
		result =BOS_ERR_WrongParam;
 8005918:	2067      	movs	r0, #103	; 0x67
 800591a:	e7e6      	b.n	80058ea <unbridgeCommand+0x3a>
		result =Unbridge(port1,port2);
 800591c:	0039      	movs	r1, r7
 800591e:	9801      	ldr	r0, [sp, #4]
 8005920:	f7fe ff02 	bl	8004728 <Unbridge>
 8005924:	e7df      	b.n	80058e6 <unbridgeCommand+0x36>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005926:	003b      	movs	r3, r7
 8005928:	9a01      	ldr	r2, [sp, #4]
 800592a:	4906      	ldr	r1, [pc, #24]	; (8005944 <unbridgeCommand+0x94>)
 800592c:	0028      	movs	r0, r5
 800592e:	f00d fc3d 	bl	80131ac <sprintf>
 8005932:	e7e1      	b.n	80058f8 <unbridgeCommand+0x48>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005934:	220f      	movs	r2, #15
 8005936:	4904      	ldr	r1, [pc, #16]	; (8005948 <unbridgeCommand+0x98>)
 8005938:	0028      	movs	r0, r5
 800593a:	f00d fa34 	bl	8012da6 <memcpy>
 800593e:	e7db      	b.n	80058f8 <unbridgeCommand+0x48>
 8005940:	08018ad4 	.word	0x08018ad4
 8005944:	08018ab4 	.word	0x08018ab4
 8005948:	08018aa4 	.word	0x08018aa4

0800594c <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800594c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800594e:	b085      	sub	sp, #20
 8005950:	0005      	movs	r5, r0
 8005952:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005954:	2300      	movs	r3, #0
 8005956:	9303      	str	r3, [sp, #12]
 8005958:	9302      	str	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800595a:	aa03      	add	r2, sp, #12
 800595c:	2101      	movs	r1, #1
 800595e:	0020      	movs	r0, r4
 8005960:	f008 f944 	bl	800dbec <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005964:	2300      	movs	r3, #0
 8005966:	56c3      	ldrsb	r3, [r0, r3]
 8005968:	2b70      	cmp	r3, #112	; 0x70
 800596a:	d016      	beq.n	800599a <bridgeCommand+0x4e>
		result =BOS_ERR_WrongParam;
 800596c:	2667      	movs	r6, #103	; 0x67
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800596e:	aa02      	add	r2, sp, #8
 8005970:	2102      	movs	r1, #2
 8005972:	0020      	movs	r0, r4
 8005974:	f008 f93a 	bl	800dbec <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005978:	2300      	movs	r3, #0
 800597a:	56c3      	ldrsb	r3, [r0, r3]
 800597c:	2b70      	cmp	r3, #112	; 0x70
 800597e:	d013      	beq.n	80059a8 <bridgeCommand+0x5c>
		result =BOS_ERR_WrongParam;
 8005980:	2067      	movs	r0, #103	; 0x67
	if(result == BOS_OK)
 8005982:	2800      	cmp	r0, #0
 8005984:	d01d      	beq.n	80059c2 <bridgeCommand+0x76>
	else if(result == BOS_ERR_WrongParam)
 8005986:	2867      	cmp	r0, #103	; 0x67
 8005988:	d022      	beq.n	80059d0 <bridgeCommand+0x84>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 800598a:	2217      	movs	r2, #23
 800598c:	4913      	ldr	r1, [pc, #76]	; (80059dc <bridgeCommand+0x90>)
 800598e:	0028      	movs	r0, r5
 8005990:	f00d fa09 	bl	8012da6 <memcpy>
}
 8005994:	2000      	movs	r0, #0
 8005996:	b005      	add	sp, #20
 8005998:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 800599a:	3001      	adds	r0, #1
 800599c:	f00c ff79 	bl	8012892 <atol>
 80059a0:	b2c3      	uxtb	r3, r0
 80059a2:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
 80059a4:	2600      	movs	r6, #0
 80059a6:	e7e2      	b.n	800596e <bridgeCommand+0x22>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80059a8:	3001      	adds	r0, #1
 80059aa:	f00c ff72 	bl	8012892 <atol>
 80059ae:	b2c7      	uxtb	r7, r0
	if(result == BOS_OK)
 80059b0:	2e00      	cmp	r6, #0
 80059b2:	d001      	beq.n	80059b8 <bridgeCommand+0x6c>
		result =BOS_ERR_WrongParam;
 80059b4:	2067      	movs	r0, #103	; 0x67
 80059b6:	e7e6      	b.n	8005986 <bridgeCommand+0x3a>
		result =Bridge(port1,port2);
 80059b8:	0039      	movs	r1, r7
 80059ba:	9801      	ldr	r0, [sp, #4]
 80059bc:	f7fe fea0 	bl	8004700 <Bridge>
 80059c0:	e7df      	b.n	8005982 <bridgeCommand+0x36>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80059c2:	003b      	movs	r3, r7
 80059c4:	9a01      	ldr	r2, [sp, #4]
 80059c6:	4906      	ldr	r1, [pc, #24]	; (80059e0 <bridgeCommand+0x94>)
 80059c8:	0028      	movs	r0, r5
 80059ca:	f00d fbef 	bl	80131ac <sprintf>
 80059ce:	e7e1      	b.n	8005994 <bridgeCommand+0x48>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059d0:	220f      	movs	r2, #15
 80059d2:	4904      	ldr	r1, [pc, #16]	; (80059e4 <bridgeCommand+0x98>)
 80059d4:	0028      	movs	r0, r5
 80059d6:	f00d f9e6 	bl	8012da6 <memcpy>
 80059da:	e7db      	b.n	8005994 <bridgeCommand+0x48>
 80059dc:	08018b14 	.word	0x08018b14
 80059e0:	08018af0 	.word	0x08018af0
 80059e4:	08018aa4 	.word	0x08018aa4

080059e8 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ea:	46d6      	mov	lr, sl
 80059ec:	464f      	mov	r7, r9
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b085      	sub	sp, #20
 80059f2:	9001      	str	r0, [sp, #4]
 80059f4:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059fa:	aa03      	add	r2, sp, #12
 80059fc:	2101      	movs	r1, #1
 80059fe:	f008 f8f5 	bl	800dbec <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005a02:	f00c ff40 	bl	8012886 <atoi>
 8005a06:	b2c4      	uxtb	r4, r0
	if(!index || index > numOfRecordedSnippets)
 8005a08:	2c00      	cmp	r4, #0
 8005a0a:	d049      	beq.n	8005aa0 <delSnipCommand+0xb8>
 8005a0c:	4b2e      	ldr	r3, [pc, #184]	; (8005ac8 <delSnipCommand+0xe0>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	42a3      	cmp	r3, r4
 8005a12:	d201      	bcs.n	8005a18 <delSnipCommand+0x30>
 8005a14:	23ff      	movs	r3, #255	; 0xff
 8005a16:	e044      	b.n	8005aa2 <delSnipCommand+0xba>
		snippets[index - 1].cond.conditionType =0;
 8005a18:	26ff      	movs	r6, #255	; 0xff
 8005a1a:	4006      	ands	r6, r0
 8005a1c:	3e01      	subs	r6, #1
 8005a1e:	4b2b      	ldr	r3, [pc, #172]	; (8005acc <delSnipCommand+0xe4>)
 8005a20:	4699      	mov	r9, r3
 8005a22:	00b3      	lsls	r3, r6, #2
 8005a24:	469a      	mov	sl, r3
 8005a26:	199a      	adds	r2, r3, r6
 8005a28:	0093      	lsls	r3, r2, #2
 8005a2a:	2500      	movs	r5, #0
 8005a2c:	464a      	mov	r2, r9
 8005a2e:	549d      	strb	r5, [r3, r2]
		snippets[index - 1].cond.mathOperator =0;
 8005a30:	4653      	mov	r3, sl
 8005a32:	199b      	adds	r3, r3, r6
 8005a34:	009f      	lsls	r7, r3, #2
 8005a36:	444f      	add	r7, r9
 8005a38:	707d      	strb	r5, [r7, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005a3a:	1cb8      	adds	r0, r7, #2
 8005a3c:	2204      	movs	r2, #4
 8005a3e:	2100      	movs	r1, #0
 8005a40:	f00d f9ba 	bl	8012db8 <memset>
		snippets[index - 1].state = false;
 8005a44:	743d      	strb	r5, [r7, #16]
		free(snippets[index - 1].cmd);
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f00c ff6a 	bl	8012920 <free>
		snippets[index - 1].cmd = NULL;
 8005a4c:	60fd      	str	r5, [r7, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005a4e:	e001      	b.n	8005a54 <delSnipCommand+0x6c>
 8005a50:	3401      	adds	r4, #1
 8005a52:	b2e4      	uxtb	r4, r4
 8005a54:	4b1c      	ldr	r3, [pc, #112]	; (8005ac8 <delSnipCommand+0xe0>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	42a3      	cmp	r3, r4
 8005a5a:	d91a      	bls.n	8005a92 <delSnipCommand+0xaa>
			if(snippets[s].cond.conditionType){
 8005a5c:	00a3      	lsls	r3, r4, #2
 8005a5e:	191b      	adds	r3, r3, r4
 8005a60:	009a      	lsls	r2, r3, #2
 8005a62:	4b1a      	ldr	r3, [pc, #104]	; (8005acc <delSnipCommand+0xe4>)
 8005a64:	5cd3      	ldrb	r3, [r2, r3]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0f2      	beq.n	8005a50 <delSnipCommand+0x68>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005a6a:	1e62      	subs	r2, r4, #1
 8005a6c:	0093      	lsls	r3, r2, #2
 8005a6e:	189b      	adds	r3, r3, r2
 8005a70:	0098      	lsls	r0, r3, #2
 8005a72:	4a16      	ldr	r2, [pc, #88]	; (8005acc <delSnipCommand+0xe4>)
 8005a74:	1880      	adds	r0, r0, r2
 8005a76:	00a3      	lsls	r3, r4, #2
 8005a78:	191b      	adds	r3, r3, r4
 8005a7a:	009e      	lsls	r6, r3, #2
 8005a7c:	18b6      	adds	r6, r6, r2
 8005a7e:	2214      	movs	r2, #20
 8005a80:	0031      	movs	r1, r6
 8005a82:	f00d f990 	bl	8012da6 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005a86:	2214      	movs	r2, #20
 8005a88:	2100      	movs	r1, #0
 8005a8a:	0030      	movs	r0, r6
 8005a8c:	f00d f994 	bl	8012db8 <memset>
 8005a90:	e7de      	b.n	8005a50 <delSnipCommand+0x68>
		--numOfRecordedSnippets;
 8005a92:	3b01      	subs	r3, #1
 8005a94:	4a0c      	ldr	r2, [pc, #48]	; (8005ac8 <delSnipCommand+0xe0>)
 8005a96:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005a98:	f004 fa60 	bl	8009f5c <SaveToRO>
	BOS_Status result =BOS_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	e000      	b.n	8005aa2 <delSnipCommand+0xba>
 8005aa0:	23ff      	movs	r3, #255	; 0xff
	if(result == BOS_OK)
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <delSnipCommand+0xd4>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005aa6:	2223      	movs	r2, #35	; 0x23
 8005aa8:	4909      	ldr	r1, [pc, #36]	; (8005ad0 <delSnipCommand+0xe8>)
 8005aaa:	9801      	ldr	r0, [sp, #4]
 8005aac:	f00d f97b 	bl	8012da6 <memcpy>
}
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	b005      	add	sp, #20
 8005ab4:	bc0c      	pop	{r2, r3}
 8005ab6:	4691      	mov	r9, r2
 8005ab8:	469a      	mov	sl, r3
 8005aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005abc:	2236      	movs	r2, #54	; 0x36
 8005abe:	4905      	ldr	r1, [pc, #20]	; (8005ad4 <delSnipCommand+0xec>)
 8005ac0:	9801      	ldr	r0, [sp, #4]
 8005ac2:	f00d f970 	bl	8012da6 <memcpy>
 8005ac6:	e7f3      	b.n	8005ab0 <delSnipCommand+0xc8>
 8005ac8:	200016d4 	.word	0x200016d4
 8005acc:	20006864 	.word	0x20006864
 8005ad0:	08018b64 	.word	0x08018b64
 8005ad4:	08018b2c 	.word	0x08018b2c

08005ad8 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ad8:	b510      	push	{r4, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	0004      	movs	r4, r0
 8005ade:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ae4:	aa01      	add	r2, sp, #4
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	f008 f880 	bl	800dbec <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005aec:	f00c fecb 	bl	8012886 <atoi>
 8005af0:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <pauseSnipCommand+0x26>
 8005af6:	4a0f      	ldr	r2, [pc, #60]	; (8005b34 <pauseSnipCommand+0x5c>)
 8005af8:	7812      	ldrb	r2, [r2, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d207      	bcs.n	8005b0e <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005afe:	2223      	movs	r2, #35	; 0x23
 8005b00:	490d      	ldr	r1, [pc, #52]	; (8005b38 <pauseSnipCommand+0x60>)
 8005b02:	0020      	movs	r0, r4
 8005b04:	f00d f94f 	bl	8012da6 <memcpy>
}
 8005b08:	2000      	movs	r0, #0
 8005b0a:	b002      	add	sp, #8
 8005b0c:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005b0e:	23ff      	movs	r3, #255	; 0xff
 8005b10:	4018      	ands	r0, r3
 8005b12:	3801      	subs	r0, #1
 8005b14:	0083      	lsls	r3, r0, #2
 8005b16:	1818      	adds	r0, r3, r0
 8005b18:	0082      	lsls	r2, r0, #2
 8005b1a:	4b08      	ldr	r3, [pc, #32]	; (8005b3c <pauseSnipCommand+0x64>)
 8005b1c:	189b      	adds	r3, r3, r2
 8005b1e:	2200      	movs	r2, #0
 8005b20:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 8005b22:	f004 fa1b 	bl	8009f5c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005b26:	2235      	movs	r2, #53	; 0x35
 8005b28:	4905      	ldr	r1, [pc, #20]	; (8005b40 <pauseSnipCommand+0x68>)
 8005b2a:	0020      	movs	r0, r4
 8005b2c:	f00d f93b 	bl	8012da6 <memcpy>
 8005b30:	e7ea      	b.n	8005b08 <pauseSnipCommand+0x30>
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	200016d4 	.word	0x200016d4
 8005b38:	08018b64 	.word	0x08018b64
 8005b3c:	20006864 	.word	0x20006864
 8005b40:	08018b88 	.word	0x08018b88

08005b44 <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b44:	b510      	push	{r4, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	0004      	movs	r4, r0
 8005b4a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b50:	aa01      	add	r2, sp, #4
 8005b52:	2101      	movs	r1, #1
 8005b54:	f008 f84a 	bl	800dbec <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005b58:	f00c fe95 	bl	8012886 <atoi>
 8005b5c:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <actSnipCommand+0x26>
 8005b62:	4a0f      	ldr	r2, [pc, #60]	; (8005ba0 <actSnipCommand+0x5c>)
 8005b64:	7812      	ldrb	r2, [r2, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d207      	bcs.n	8005b7a <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b6a:	2223      	movs	r2, #35	; 0x23
 8005b6c:	490d      	ldr	r1, [pc, #52]	; (8005ba4 <actSnipCommand+0x60>)
 8005b6e:	0020      	movs	r0, r4
 8005b70:	f00d f919 	bl	8012da6 <memcpy>
}
 8005b74:	2000      	movs	r0, #0
 8005b76:	b002      	add	sp, #8
 8005b78:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005b7a:	23ff      	movs	r3, #255	; 0xff
 8005b7c:	4018      	ands	r0, r3
 8005b7e:	3801      	subs	r0, #1
 8005b80:	0083      	lsls	r3, r0, #2
 8005b82:	1818      	adds	r0, r3, r0
 8005b84:	0082      	lsls	r2, r0, #2
 8005b86:	4b08      	ldr	r3, [pc, #32]	; (8005ba8 <actSnipCommand+0x64>)
 8005b88:	189b      	adds	r3, r3, r2
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 8005b8e:	f004 f9e5 	bl	8009f5c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005b92:	2238      	movs	r2, #56	; 0x38
 8005b94:	4905      	ldr	r1, [pc, #20]	; (8005bac <actSnipCommand+0x68>)
 8005b96:	0020      	movs	r0, r4
 8005b98:	f00d f905 	bl	8012da6 <memcpy>
 8005b9c:	e7ea      	b.n	8005b74 <actSnipCommand+0x30>
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	200016d4 	.word	0x200016d4
 8005ba4:	08018b64 	.word	0x08018b64
 8005ba8:	20006864 	.word	0x20006864
 8005bac:	08018bc0 	.word	0x08018bc0

08005bb0 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb2:	46ce      	mov	lr, r9
 8005bb4:	4647      	mov	r7, r8
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b08b      	sub	sp, #44	; 0x2c
 8005bba:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005bbc:	aa06      	add	r2, sp, #24
 8005bbe:	4b75      	ldr	r3, [pc, #468]	; (8005d94 <snipCommand+0x1e4>)
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005bc4:	c223      	stmia	r2!, {r0, r1, r5}
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	8013      	strh	r3, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005bca:	4b73      	ldr	r3, [pc, #460]	; (8005d98 <snipCommand+0x1e8>)
 8005bcc:	7818      	ldrb	r0, [r3, #0]
 8005bce:	2301      	movs	r3, #1
 8005bd0:	425b      	negs	r3, r3
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	3333      	adds	r3, #51	; 0x33
 8005bd6:	2237      	movs	r2, #55	; 0x37
 8005bd8:	4970      	ldr	r1, [pc, #448]	; (8005d9c <snipCommand+0x1ec>)
 8005bda:	f007 fd61 	bl	800d6a0 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005bde:	2700      	movs	r7, #0
	uint8_t count =1;
 8005be0:	2301      	movs	r3, #1
 8005be2:	4698      	mov	r8, r3
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005be4:	e08c      	b.n	8005d00 <snipCommand+0x150>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005be6:	4b6e      	ldr	r3, [pc, #440]	; (8005da0 <snipCommand+0x1f0>)
 8005be8:	189b      	adds	r3, r3, r2
 8005bea:	7c1a      	ldrb	r2, [r3, #16]
 8005bec:	00d3      	lsls	r3, r2, #3
 8005bee:	1a9b      	subs	r3, r3, r2
 8005bf0:	aa06      	add	r2, sp, #24
 8005bf2:	4694      	mov	ip, r2
 8005bf4:	4463      	add	r3, ip
 8005bf6:	4642      	mov	r2, r8
 8005bf8:	496a      	ldr	r1, [pc, #424]	; (8005da4 <snipCommand+0x1f4>)
 8005bfa:	0020      	movs	r0, r4
 8005bfc:	f00d fad6 	bl	80131ac <sprintf>
 8005c00:	e08b      	b.n	8005d1a <snipCommand+0x16a>
				switch(snippets[s].cond.buffer1[1]){
 8005c02:	00b3      	lsls	r3, r6, #2
 8005c04:	199b      	adds	r3, r3, r6
 8005c06:	009a      	lsls	r2, r3, #2
 8005c08:	4b65      	ldr	r3, [pc, #404]	; (8005da0 <snipCommand+0x1f0>)
 8005c0a:	189b      	adds	r3, r3, r2
 8005c0c:	78db      	ldrb	r3, [r3, #3]
 8005c0e:	3b05      	subs	r3, #5
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	2a09      	cmp	r2, #9
 8005c14:	d84e      	bhi.n	8005cb4 <snipCommand+0x104>
 8005c16:	0093      	lsls	r3, r2, #2
 8005c18:	4a63      	ldr	r2, [pc, #396]	; (8005da8 <snipCommand+0x1f8>)
 8005c1a:	58d3      	ldr	r3, [r2, r3]
 8005c1c:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005c1e:	00b3      	lsls	r3, r6, #2
 8005c20:	199b      	adds	r3, r3, r6
 8005c22:	0099      	lsls	r1, r3, #2
 8005c24:	4a5e      	ldr	r2, [pc, #376]	; (8005da0 <snipCommand+0x1f0>)
 8005c26:	1852      	adds	r2, r2, r1
 8005c28:	7893      	ldrb	r3, [r2, #2]
 8005c2a:	68d2      	ldr	r2, [r2, #12]
 8005c2c:	9200      	str	r2, [sp, #0]
 8005c2e:	0022      	movs	r2, r4
 8005c30:	495e      	ldr	r1, [pc, #376]	; (8005dac <snipCommand+0x1fc>)
 8005c32:	0020      	movs	r0, r4
 8005c34:	f00d faba 	bl	80131ac <sprintf>
						break;
 8005c38:	e03c      	b.n	8005cb4 <snipCommand+0x104>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005c3a:	00b3      	lsls	r3, r6, #2
 8005c3c:	199b      	adds	r3, r3, r6
 8005c3e:	0099      	lsls	r1, r3, #2
 8005c40:	4a57      	ldr	r2, [pc, #348]	; (8005da0 <snipCommand+0x1f0>)
 8005c42:	1852      	adds	r2, r2, r1
 8005c44:	7893      	ldrb	r3, [r2, #2]
 8005c46:	68d2      	ldr	r2, [r2, #12]
 8005c48:	9200      	str	r2, [sp, #0]
 8005c4a:	0022      	movs	r2, r4
 8005c4c:	4958      	ldr	r1, [pc, #352]	; (8005db0 <snipCommand+0x200>)
 8005c4e:	0020      	movs	r0, r4
 8005c50:	f00d faac 	bl	80131ac <sprintf>
						break;
 8005c54:	e02e      	b.n	8005cb4 <snipCommand+0x104>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005c56:	00b3      	lsls	r3, r6, #2
 8005c58:	199b      	adds	r3, r3, r6
 8005c5a:	0099      	lsls	r1, r3, #2
 8005c5c:	4a50      	ldr	r2, [pc, #320]	; (8005da0 <snipCommand+0x1f0>)
 8005c5e:	1852      	adds	r2, r2, r1
 8005c60:	7893      	ldrb	r3, [r2, #2]
 8005c62:	7911      	ldrb	r1, [r2, #4]
 8005c64:	68d2      	ldr	r2, [r2, #12]
 8005c66:	9201      	str	r2, [sp, #4]
 8005c68:	9100      	str	r1, [sp, #0]
 8005c6a:	0022      	movs	r2, r4
 8005c6c:	4951      	ldr	r1, [pc, #324]	; (8005db4 <snipCommand+0x204>)
 8005c6e:	0020      	movs	r0, r4
 8005c70:	f00d fa9c 	bl	80131ac <sprintf>
						break;
 8005c74:	e01e      	b.n	8005cb4 <snipCommand+0x104>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005c76:	00b3      	lsls	r3, r6, #2
 8005c78:	199b      	adds	r3, r3, r6
 8005c7a:	0099      	lsls	r1, r3, #2
 8005c7c:	4a48      	ldr	r2, [pc, #288]	; (8005da0 <snipCommand+0x1f0>)
 8005c7e:	1852      	adds	r2, r2, r1
 8005c80:	7893      	ldrb	r3, [r2, #2]
 8005c82:	7911      	ldrb	r1, [r2, #4]
 8005c84:	68d2      	ldr	r2, [r2, #12]
 8005c86:	9201      	str	r2, [sp, #4]
 8005c88:	9100      	str	r1, [sp, #0]
 8005c8a:	0022      	movs	r2, r4
 8005c8c:	494a      	ldr	r1, [pc, #296]	; (8005db8 <snipCommand+0x208>)
 8005c8e:	0020      	movs	r0, r4
 8005c90:	f00d fa8c 	bl	80131ac <sprintf>
						break;
 8005c94:	e00e      	b.n	8005cb4 <snipCommand+0x104>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005c96:	4d49      	ldr	r5, [pc, #292]	; (8005dbc <snipCommand+0x20c>)
 8005c98:	002b      	movs	r3, r5
 8005c9a:	0022      	movs	r2, r4
 8005c9c:	4948      	ldr	r1, [pc, #288]	; (8005dc0 <snipCommand+0x210>)
 8005c9e:	0020      	movs	r0, r4
 8005ca0:	f00d fa84 	bl	80131ac <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005ca4:	0028      	movs	r0, r5
 8005ca6:	f7fa fa37 	bl	8000118 <strlen>
 8005caa:	0002      	movs	r2, r0
 8005cac:	2100      	movs	r1, #0
 8005cae:	0028      	movs	r0, r5
 8005cb0:	f00d f882 	bl	8012db8 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005cb4:	00b3      	lsls	r3, r6, #2
 8005cb6:	199b      	adds	r3, r3, r6
 8005cb8:	009a      	lsls	r2, r3, #2
 8005cba:	4b39      	ldr	r3, [pc, #228]	; (8005da0 <snipCommand+0x1f0>)
 8005cbc:	189b      	adds	r3, r3, r2
 8005cbe:	68d8      	ldr	r0, [r3, #12]
 8005cc0:	493e      	ldr	r1, [pc, #248]	; (8005dbc <snipCommand+0x20c>)
 8005cc2:	f7ff faf3 	bl	80052ac <ParseSnippetCommand>
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	d1e5      	bne.n	8005c96 <snipCommand+0xe6>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005cca:	0020      	movs	r0, r4
 8005ccc:	f7fa fa24 	bl	8000118 <strlen>
 8005cd0:	1820      	adds	r0, r4, r0
 8005cd2:	220c      	movs	r2, #12
 8005cd4:	493b      	ldr	r1, [pc, #236]	; (8005dc4 <snipCommand+0x214>)
 8005cd6:	f00d f866 	bl	8012da6 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005cda:	0020      	movs	r0, r4
 8005cdc:	f7fa fa1c 	bl	8000118 <strlen>
 8005ce0:	b282      	uxth	r2, r0
 8005ce2:	4b2d      	ldr	r3, [pc, #180]	; (8005d98 <snipCommand+0x1e8>)
 8005ce4:	7818      	ldrb	r0, [r3, #0]
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	425b      	negs	r3, r3
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	3333      	adds	r3, #51	; 0x33
 8005cee:	0021      	movs	r1, r4
 8005cf0:	f007 fcd6 	bl	800d6a0 <writePxMutex>
		++count;
 8005cf4:	4643      	mov	r3, r8
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	4698      	mov	r8, r3
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005cfc:	3701      	adds	r7, #1
 8005cfe:	b2ff      	uxtb	r7, r7
 8005d00:	4b31      	ldr	r3, [pc, #196]	; (8005dc8 <snipCommand+0x218>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	42bb      	cmp	r3, r7
 8005d06:	d939      	bls.n	8005d7c <snipCommand+0x1cc>
		if(snippets[s].cond.conditionType)
 8005d08:	003e      	movs	r6, r7
 8005d0a:	00bb      	lsls	r3, r7, #2
 8005d0c:	19db      	adds	r3, r3, r7
 8005d0e:	009a      	lsls	r2, r3, #2
 8005d10:	4b23      	ldr	r3, [pc, #140]	; (8005da0 <snipCommand+0x1f0>)
 8005d12:	5cd3      	ldrb	r3, [r2, r3]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d000      	beq.n	8005d1a <snipCommand+0x16a>
 8005d18:	e765      	b.n	8005be6 <snipCommand+0x36>
		switch(snippets[s].cond.conditionType){
 8005d1a:	00b3      	lsls	r3, r6, #2
 8005d1c:	199b      	adds	r3, r3, r6
 8005d1e:	009a      	lsls	r2, r3, #2
 8005d20:	4b1f      	ldr	r3, [pc, #124]	; (8005da0 <snipCommand+0x1f0>)
 8005d22:	5cd3      	ldrb	r3, [r2, r3]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d100      	bne.n	8005d2a <snipCommand+0x17a>
 8005d28:	e76b      	b.n	8005c02 <snipCommand+0x52>
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d1c2      	bne.n	8005cb4 <snipCommand+0x104>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005d2e:	00b3      	lsls	r3, r6, #2
 8005d30:	199b      	adds	r3, r3, r6
 8005d32:	009d      	lsls	r5, r3, #2
 8005d34:	4b1a      	ldr	r3, [pc, #104]	; (8005da0 <snipCommand+0x1f0>)
 8005d36:	18ed      	adds	r5, r5, r3
 8005d38:	1da9      	adds	r1, r5, #6
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	a805      	add	r0, sp, #20
 8005d3e:	f00d f832 	bl	8012da6 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005d42:	78ea      	ldrb	r2, [r5, #3]
 8005d44:	3a01      	subs	r2, #1
 8005d46:	786b      	ldrb	r3, [r5, #1]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	4912      	ldr	r1, [pc, #72]	; (8005d94 <snipCommand+0x1e4>)
 8005d4c:	005d      	lsls	r5, r3, #1
 8005d4e:	18eb      	adds	r3, r5, r3
 8005d50:	3114      	adds	r1, #20
 8005d52:	18cd      	adds	r5, r1, r3
 8005d54:	0053      	lsls	r3, r2, #1
 8005d56:	189b      	adds	r3, r3, r2
 8005d58:	009a      	lsls	r2, r3, #2
 8005d5a:	4b1c      	ldr	r3, [pc, #112]	; (8005dcc <snipCommand+0x21c>)
 8005d5c:	189b      	adds	r3, r3, r2
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	4699      	mov	r9, r3
 8005d62:	9805      	ldr	r0, [sp, #20]
 8005d64:	f7fc fee8 	bl	8002b38 <__aeabi_f2d>
 8005d68:	9002      	str	r0, [sp, #8]
 8005d6a:	9103      	str	r1, [sp, #12]
 8005d6c:	9500      	str	r5, [sp, #0]
 8005d6e:	464b      	mov	r3, r9
 8005d70:	0022      	movs	r2, r4
 8005d72:	4917      	ldr	r1, [pc, #92]	; (8005dd0 <snipCommand+0x220>)
 8005d74:	0020      	movs	r0, r4
 8005d76:	f00d fa19 	bl	80131ac <sprintf>
				break;
 8005d7a:	e79b      	b.n	8005cb4 <snipCommand+0x104>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005d7c:	22b5      	movs	r2, #181	; 0xb5
 8005d7e:	4915      	ldr	r1, [pc, #84]	; (8005dd4 <snipCommand+0x224>)
 8005d80:	0020      	movs	r0, r4
 8005d82:	f00d f810 	bl	8012da6 <memcpy>
}
 8005d86:	2000      	movs	r0, #0
 8005d88:	b00b      	add	sp, #44	; 0x2c
 8005d8a:	bc0c      	pop	{r2, r3}
 8005d8c:	4690      	mov	r8, r2
 8005d8e:	4699      	mov	r9, r3
 8005d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d92:	46c0      	nop			; (mov r8, r8)
 8005d94:	0801798c 	.word	0x0801798c
 8005d98:	20000c28 	.word	0x20000c28
 8005d9c:	08018bf8 	.word	0x08018bf8
 8005da0:	20006864 	.word	0x20006864
 8005da4:	08018c30 	.word	0x08018c30
 8005da8:	08017730 	.word	0x08017730
 8005dac:	08018c3c 	.word	0x08018c3c
 8005db0:	08018c50 	.word	0x08018c50
 8005db4:	08018c68 	.word	0x08018c68
 8005db8:	08018c80 	.word	0x08018c80
 8005dbc:	200017d4 	.word	0x200017d4
 8005dc0:	08018cac 	.word	0x08018cac
 8005dc4:	08018cb4 	.word	0x08018cb4
 8005dc8:	200016d4 	.word	0x200016d4
 8005dcc:	20000094 	.word	0x20000094
 8005dd0:	08018c9c 	.word	0x08018c9c
 8005dd4:	08018cc0 	.word	0x08018cc0

08005dd8 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dd8:	b510      	push	{r4, lr}
 8005dda:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 8005ddc:	f009 fcf0 	bl	800f7c0 <HAL_GetDEVID>
	switch(dev){
 8005de0:	0400      	lsls	r0, r0, #16
 8005de2:	0c00      	lsrs	r0, r0, #16
 8005de4:	4b1a      	ldr	r3, [pc, #104]	; (8005e50 <idcodeCommand+0x78>)
 8005de6:	469c      	mov	ip, r3
 8005de8:	4460      	add	r0, ip
 8005dea:	2808      	cmp	r0, #8
 8005dec:	d82a      	bhi.n	8005e44 <idcodeCommand+0x6c>
 8005dee:	0080      	lsls	r0, r0, #2
 8005df0:	4b18      	ldr	r3, [pc, #96]	; (8005e54 <idcodeCommand+0x7c>)
 8005df2:	581b      	ldr	r3, [r3, r0]
 8005df4:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005df6:	4a18      	ldr	r2, [pc, #96]	; (8005e58 <idcodeCommand+0x80>)
 8005df8:	4918      	ldr	r1, [pc, #96]	; (8005e5c <idcodeCommand+0x84>)
 8005dfa:	0020      	movs	r0, r4
 8005dfc:	f00d f9d6 	bl	80131ac <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005e00:	f009 fcd8 	bl	800f7b4 <HAL_GetREVID>
 8005e04:	0b03      	lsrs	r3, r0, #12
 8005e06:	0022      	movs	r2, r4
 8005e08:	4915      	ldr	r1, [pc, #84]	; (8005e60 <idcodeCommand+0x88>)
 8005e0a:	0020      	movs	r0, r4
 8005e0c:	f00d f9ce 	bl	80131ac <sprintf>
}
 8005e10:	2000      	movs	r0, #0
 8005e12:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005e14:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <idcodeCommand+0x8c>)
 8005e16:	4911      	ldr	r1, [pc, #68]	; (8005e5c <idcodeCommand+0x84>)
 8005e18:	0020      	movs	r0, r4
 8005e1a:	f00d f9c7 	bl	80131ac <sprintf>
			break;
 8005e1e:	e7ef      	b.n	8005e00 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005e20:	4a11      	ldr	r2, [pc, #68]	; (8005e68 <idcodeCommand+0x90>)
 8005e22:	490e      	ldr	r1, [pc, #56]	; (8005e5c <idcodeCommand+0x84>)
 8005e24:	0020      	movs	r0, r4
 8005e26:	f00d f9c1 	bl	80131ac <sprintf>
			break;
 8005e2a:	e7e9      	b.n	8005e00 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005e2c:	4a0f      	ldr	r2, [pc, #60]	; (8005e6c <idcodeCommand+0x94>)
 8005e2e:	490b      	ldr	r1, [pc, #44]	; (8005e5c <idcodeCommand+0x84>)
 8005e30:	0020      	movs	r0, r4
 8005e32:	f00d f9bb 	bl	80131ac <sprintf>
			break;
 8005e36:	e7e3      	b.n	8005e00 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005e38:	4a0d      	ldr	r2, [pc, #52]	; (8005e70 <idcodeCommand+0x98>)
 8005e3a:	4908      	ldr	r1, [pc, #32]	; (8005e5c <idcodeCommand+0x84>)
 8005e3c:	0020      	movs	r0, r4
 8005e3e:	f00d f9b5 	bl	80131ac <sprintf>
			break;
 8005e42:	e7dd      	b.n	8005e00 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005e44:	4a0b      	ldr	r2, [pc, #44]	; (8005e74 <idcodeCommand+0x9c>)
 8005e46:	4905      	ldr	r1, [pc, #20]	; (8005e5c <idcodeCommand+0x84>)
 8005e48:	0020      	movs	r0, r4
 8005e4a:	f00d f9af 	bl	80131ac <sprintf>
			break;
 8005e4e:	e7d7      	b.n	8005e00 <idcodeCommand+0x28>
 8005e50:	fffffbc0 	.word	0xfffffbc0
 8005e54:	08017758 	.word	0x08017758
 8005e58:	08018d78 	.word	0x08018d78
 8005e5c:	08018d84 	.word	0x08018d84
 8005e60:	08018dd0 	.word	0x08018dd0
 8005e64:	08018d98 	.word	0x08018d98
 8005e68:	08018da4 	.word	0x08018da4
 8005e6c:	08018db0 	.word	0x08018db0
 8005e70:	08018dbc 	.word	0x08018dbc
 8005e74:	08018dc8 	.word	0x08018dc8

08005e78 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e78:	b570      	push	{r4, r5, r6, lr}
 8005e7a:	0005      	movs	r5, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005e7c:	220e      	movs	r2, #14
 8005e7e:	490e      	ldr	r1, [pc, #56]	; (8005eb8 <uuidCommand+0x40>)
 8005e80:	f00c ff91 	bl	8012da6 <memcpy>
	for(uint8_t i =0; i < 3; i++){
 8005e84:	2400      	movs	r4, #0
 8005e86:	e00a      	b.n	8005e9e <uuidCommand+0x26>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005e88:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <uuidCommand+0x44>)
 8005e8a:	18e3      	adds	r3, r4, r3
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	002a      	movs	r2, r5
 8005e92:	490b      	ldr	r1, [pc, #44]	; (8005ec0 <uuidCommand+0x48>)
 8005e94:	0028      	movs	r0, r5
 8005e96:	f00d f989 	bl	80131ac <sprintf>
	for(uint8_t i =0; i < 3; i++){
 8005e9a:	3401      	adds	r4, #1
 8005e9c:	b2e4      	uxtb	r4, r4
 8005e9e:	2c02      	cmp	r4, #2
 8005ea0:	d9f2      	bls.n	8005e88 <uuidCommand+0x10>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005ea2:	0028      	movs	r0, r5
 8005ea4:	f7fa f938 	bl	8000118 <strlen>
 8005ea8:	1828      	adds	r0, r5, r0
 8005eaa:	2203      	movs	r2, #3
 8005eac:	4905      	ldr	r1, [pc, #20]	; (8005ec4 <uuidCommand+0x4c>)
 8005eae:	f00c ff7a 	bl	8012da6 <memcpy>
}
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	bd70      	pop	{r4, r5, r6, pc}
 8005eb6:	46c0      	nop			; (mov r8, r8)
 8005eb8:	08018de8 	.word	0x08018de8
 8005ebc:	07fffdeb 	.word	0x07fffdeb
 8005ec0:	08018df8 	.word	0x08018df8
 8005ec4:	0801a36c 	.word	0x0801a36c

08005ec8 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ec8:	b530      	push	{r4, r5, lr}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	0004      	movs	r4, r0
	GetTimeDate();
 8005ece:	f007 f929 	bl	800d124 <GetTimeDate>
	if(BOS.hourformat == 24)
 8005ed2:	4b1b      	ldr	r3, [pc, #108]	; (8005f40 <timeCommand+0x78>)
 8005ed4:	7b5b      	ldrb	r3, [r3, #13]
 8005ed6:	2b18      	cmp	r3, #24
 8005ed8:	d004      	beq.n	8005ee4 <timeCommand+0x1c>
	else if(BOS.hourformat == 12){
 8005eda:	2b0c      	cmp	r3, #12
 8005edc:	d00e      	beq.n	8005efc <timeCommand+0x34>
}
 8005ede:	2000      	movs	r0, #0
 8005ee0:	b005      	add	sp, #20
 8005ee2:	bd30      	pop	{r4, r5, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8005ee4:	4916      	ldr	r1, [pc, #88]	; (8005f40 <timeCommand+0x78>)
 8005ee6:	7c8a      	ldrb	r2, [r1, #18]
 8005ee8:	7c4b      	ldrb	r3, [r1, #17]
 8005eea:	7c08      	ldrb	r0, [r1, #16]
 8005eec:	89c9      	ldrh	r1, [r1, #14]
 8005eee:	9101      	str	r1, [sp, #4]
 8005ef0:	9000      	str	r0, [sp, #0]
 8005ef2:	4914      	ldr	r1, [pc, #80]	; (8005f44 <timeCommand+0x7c>)
 8005ef4:	0020      	movs	r0, r4
 8005ef6:	f00d f959 	bl	80131ac <sprintf>
 8005efa:	e7f0      	b.n	8005ede <timeCommand+0x16>
		if(BOS.time.ampm == RTC_AM)
 8005efc:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <timeCommand+0x78>)
 8005efe:	7cdb      	ldrb	r3, [r3, #19]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d00f      	beq.n	8005f24 <timeCommand+0x5c>
		else if(BOS.time.ampm == RTC_PM)
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d1ea      	bne.n	8005ede <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8005f08:	490d      	ldr	r1, [pc, #52]	; (8005f40 <timeCommand+0x78>)
 8005f0a:	7c8a      	ldrb	r2, [r1, #18]
 8005f0c:	7c4b      	ldrb	r3, [r1, #17]
 8005f0e:	7c08      	ldrb	r0, [r1, #16]
 8005f10:	89c9      	ldrh	r1, [r1, #14]
 8005f12:	4d0d      	ldr	r5, [pc, #52]	; (8005f48 <timeCommand+0x80>)
 8005f14:	9502      	str	r5, [sp, #8]
 8005f16:	9101      	str	r1, [sp, #4]
 8005f18:	9000      	str	r0, [sp, #0]
 8005f1a:	490c      	ldr	r1, [pc, #48]	; (8005f4c <timeCommand+0x84>)
 8005f1c:	0020      	movs	r0, r4
 8005f1e:	f00d f945 	bl	80131ac <sprintf>
 8005f22:	e7dc      	b.n	8005ede <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8005f24:	4906      	ldr	r1, [pc, #24]	; (8005f40 <timeCommand+0x78>)
 8005f26:	7c8a      	ldrb	r2, [r1, #18]
 8005f28:	7c4b      	ldrb	r3, [r1, #17]
 8005f2a:	7c08      	ldrb	r0, [r1, #16]
 8005f2c:	89c9      	ldrh	r1, [r1, #14]
 8005f2e:	4d08      	ldr	r5, [pc, #32]	; (8005f50 <timeCommand+0x88>)
 8005f30:	9502      	str	r5, [sp, #8]
 8005f32:	9101      	str	r1, [sp, #4]
 8005f34:	9000      	str	r0, [sp, #0]
 8005f36:	4905      	ldr	r1, [pc, #20]	; (8005f4c <timeCommand+0x84>)
 8005f38:	0020      	movs	r0, r4
 8005f3a:	f00d f937 	bl	80131ac <sprintf>
 8005f3e:	e7ce      	b.n	8005ede <timeCommand+0x16>
 8005f40:	20006848 	.word	0x20006848
 8005f44:	08018e00 	.word	0x08018e00
 8005f48:	08018e58 	.word	0x08018e58
 8005f4c:	08018e28 	.word	0x08018e28
 8005f50:	08018e54 	.word	0x08018e54

08005f54 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f54:	b510      	push	{r4, lr}
 8005f56:	0004      	movs	r4, r0
	GetTimeDate();
 8005f58:	f007 f8e4 	bl	800d124 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8005f5c:	f7fe fbae 	bl	80046bc <GetDateString>
 8005f60:	0002      	movs	r2, r0
 8005f62:	4903      	ldr	r1, [pc, #12]	; (8005f70 <dateCommand+0x1c>)
 8005f64:	0020      	movs	r0, r4
 8005f66:	f00d f921 	bl	80131ac <sprintf>
}
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	bd10      	pop	{r4, pc}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	08018e5c 	.word	0x08018e5c

08005f74 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f76:	b083      	sub	sp, #12
 8005f78:	0005      	movs	r5, r0
 8005f7a:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9301      	str	r3, [sp, #4]
 8005f80:	9300      	str	r3, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005f82:	aa01      	add	r2, sp, #4
 8005f84:	2101      	movs	r1, #1
 8005f86:	0030      	movs	r0, r6
 8005f88:	f007 fe30 	bl	800dbec <FreeRTOS_CLIGetParameter>
 8005f8c:	0004      	movs	r4, r0
 8005f8e:	4b7c      	ldr	r3, [pc, #496]	; (8006180 <getCommand+0x20c>)
 8005f90:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005f92:	2204      	movs	r2, #4
 8005f94:	497b      	ldr	r1, [pc, #492]	; (8006184 <getCommand+0x210>)
 8005f96:	f00d f94d 	bl	8013234 <strncmp>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d000      	beq.n	8005fa0 <getCommand+0x2c>
 8005f9e:	e09e      	b.n	80060de <getCommand+0x16a>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8005fa0:	3404      	adds	r4, #4
 8005fa2:	9b01      	ldr	r3, [sp, #4]
 8005fa4:	1f1e      	subs	r6, r3, #4
 8005fa6:	0032      	movs	r2, r6
 8005fa8:	4977      	ldr	r1, [pc, #476]	; (8006188 <getCommand+0x214>)
 8005faa:	0020      	movs	r0, r4
 8005fac:	f00d f942 	bl	8013234 <strncmp>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	d123      	bne.n	8005ffc <getCommand+0x88>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8005fb4:	4b75      	ldr	r3, [pc, #468]	; (800618c <getCommand+0x218>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b60      	cmp	r3, #96	; 0x60
 8005fba:	d00a      	beq.n	8005fd2 <getCommand+0x5e>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d00f      	beq.n	8005fe0 <getCommand+0x6c>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d014      	beq.n	8005fee <getCommand+0x7a>
				result =BOS_ERR_WrongValue;
 8005fc4:	2368      	movs	r3, #104	; 0x68
	else if(result == BOS_ERR_WrongValue)
 8005fc6:	2b68      	cmp	r3, #104	; 0x68
 8005fc8:	d100      	bne.n	8005fcc <getCommand+0x58>
 8005fca:	e0d2      	b.n	8006172 <getCommand+0x1fe>
}
 8005fcc:	2000      	movs	r0, #0
 8005fce:	b003      	add	sp, #12
 8005fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8005fd2:	4a6f      	ldr	r2, [pc, #444]	; (8006190 <getCommand+0x21c>)
 8005fd4:	496f      	ldr	r1, [pc, #444]	; (8006194 <getCommand+0x220>)
 8005fd6:	0028      	movs	r0, r5
 8005fd8:	f00d f8e8 	bl	80131ac <sprintf>
	BOS_Status result =BOS_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	e7f2      	b.n	8005fc6 <getCommand+0x52>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8005fe0:	4a6d      	ldr	r2, [pc, #436]	; (8006198 <getCommand+0x224>)
 8005fe2:	496c      	ldr	r1, [pc, #432]	; (8006194 <getCommand+0x220>)
 8005fe4:	0028      	movs	r0, r5
 8005fe6:	f00d f8e1 	bl	80131ac <sprintf>
	BOS_Status result =BOS_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e7eb      	b.n	8005fc6 <getCommand+0x52>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8005fee:	4a6b      	ldr	r2, [pc, #428]	; (800619c <getCommand+0x228>)
 8005ff0:	4968      	ldr	r1, [pc, #416]	; (8006194 <getCommand+0x220>)
 8005ff2:	0028      	movs	r0, r5
 8005ff4:	f00d f8da 	bl	80131ac <sprintf>
	BOS_Status result =BOS_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	e7e4      	b.n	8005fc6 <getCommand+0x52>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8005ffc:	0032      	movs	r2, r6
 8005ffe:	4968      	ldr	r1, [pc, #416]	; (80061a0 <getCommand+0x22c>)
 8006000:	0020      	movs	r0, r4
 8006002:	f00d f917 	bl	8013234 <strncmp>
 8006006:	2800      	cmp	r0, #0
 8006008:	d11e      	bne.n	8006048 <getCommand+0xd4>
			if(BOSMessaging.trace == TRACE_BOTH)
 800600a:	4b60      	ldr	r3, [pc, #384]	; (800618c <getCommand+0x218>)
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	2b03      	cmp	r3, #3
 8006010:	d005      	beq.n	800601e <getCommand+0xaa>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8006012:	2b01      	cmp	r3, #1
 8006014:	d00a      	beq.n	800602c <getCommand+0xb8>
			else if(BOSMessaging.trace == TRACE_NONE)
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00f      	beq.n	800603a <getCommand+0xc6>
				result =BOS_ERR_WrongValue;
 800601a:	2368      	movs	r3, #104	; 0x68
 800601c:	e7d3      	b.n	8005fc6 <getCommand+0x52>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 800601e:	4a5c      	ldr	r2, [pc, #368]	; (8006190 <getCommand+0x21c>)
 8006020:	495c      	ldr	r1, [pc, #368]	; (8006194 <getCommand+0x220>)
 8006022:	0028      	movs	r0, r5
 8006024:	f00d f8c2 	bl	80131ac <sprintf>
	BOS_Status result =BOS_OK;
 8006028:	2300      	movs	r3, #0
 800602a:	e7cc      	b.n	8005fc6 <getCommand+0x52>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 800602c:	4a5a      	ldr	r2, [pc, #360]	; (8006198 <getCommand+0x224>)
 800602e:	4959      	ldr	r1, [pc, #356]	; (8006194 <getCommand+0x220>)
 8006030:	0028      	movs	r0, r5
 8006032:	f00d f8bb 	bl	80131ac <sprintf>
	BOS_Status result =BOS_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	e7c5      	b.n	8005fc6 <getCommand+0x52>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 800603a:	4a58      	ldr	r2, [pc, #352]	; (800619c <getCommand+0x228>)
 800603c:	4955      	ldr	r1, [pc, #340]	; (8006194 <getCommand+0x220>)
 800603e:	0028      	movs	r0, r5
 8006040:	f00d f8b4 	bl	80131ac <sprintf>
	BOS_Status result =BOS_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	e7be      	b.n	8005fc6 <getCommand+0x52>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006048:	0032      	movs	r2, r6
 800604a:	4956      	ldr	r1, [pc, #344]	; (80061a4 <getCommand+0x230>)
 800604c:	0020      	movs	r0, r4
 800604e:	f00d f8f1 	bl	8013234 <strncmp>
 8006052:	2800      	cmp	r0, #0
 8006054:	d023      	beq.n	800609e <getCommand+0x12a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006056:	0032      	movs	r2, r6
 8006058:	4953      	ldr	r1, [pc, #332]	; (80061a8 <getCommand+0x234>)
 800605a:	0020      	movs	r0, r4
 800605c:	f00d f8ea 	bl	8013234 <strncmp>
 8006060:	2800      	cmp	r0, #0
 8006062:	d024      	beq.n	80060ae <getCommand+0x13a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006064:	0032      	movs	r2, r6
 8006066:	4951      	ldr	r1, [pc, #324]	; (80061ac <getCommand+0x238>)
 8006068:	0020      	movs	r0, r4
 800606a:	f00d f8e3 	bl	8013234 <strncmp>
 800606e:	2800      	cmp	r0, #0
 8006070:	d025      	beq.n	80060be <getCommand+0x14a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006072:	0032      	movs	r2, r6
 8006074:	494e      	ldr	r1, [pc, #312]	; (80061b0 <getCommand+0x23c>)
 8006076:	0020      	movs	r0, r4
 8006078:	f00d f8dc 	bl	8013234 <strncmp>
 800607c:	2800      	cmp	r0, #0
 800607e:	d026      	beq.n	80060ce <getCommand+0x15a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006080:	0032      	movs	r2, r6
 8006082:	494c      	ldr	r1, [pc, #304]	; (80061b4 <getCommand+0x240>)
 8006084:	0020      	movs	r0, r4
 8006086:	f00d f8d5 	bl	8013234 <strncmp>
 800608a:	2800      	cmp	r0, #0
 800608c:	d12e      	bne.n	80060ec <getCommand+0x178>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 800608e:	4b4a      	ldr	r3, [pc, #296]	; (80061b8 <getCommand+0x244>)
 8006090:	795a      	ldrb	r2, [r3, #5]
 8006092:	494a      	ldr	r1, [pc, #296]	; (80061bc <getCommand+0x248>)
 8006094:	0028      	movs	r0, r5
 8006096:	f00d f889 	bl	80131ac <sprintf>
	BOS_Status result =BOS_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	e793      	b.n	8005fc6 <getCommand+0x52>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 800609e:	4b46      	ldr	r3, [pc, #280]	; (80061b8 <getCommand+0x244>)
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	4946      	ldr	r1, [pc, #280]	; (80061bc <getCommand+0x248>)
 80060a4:	0028      	movs	r0, r5
 80060a6:	f00d f881 	bl	80131ac <sprintf>
	BOS_Status result =BOS_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e78b      	b.n	8005fc6 <getCommand+0x52>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 80060ae:	4b42      	ldr	r3, [pc, #264]	; (80061b8 <getCommand+0x244>)
 80060b0:	881a      	ldrh	r2, [r3, #0]
 80060b2:	4942      	ldr	r1, [pc, #264]	; (80061bc <getCommand+0x248>)
 80060b4:	0028      	movs	r0, r5
 80060b6:	f00d f879 	bl	80131ac <sprintf>
	BOS_Status result =BOS_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	e783      	b.n	8005fc6 <getCommand+0x52>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 80060be:	4b3e      	ldr	r3, [pc, #248]	; (80061b8 <getCommand+0x244>)
 80060c0:	885a      	ldrh	r2, [r3, #2]
 80060c2:	493e      	ldr	r1, [pc, #248]	; (80061bc <getCommand+0x248>)
 80060c4:	0028      	movs	r0, r5
 80060c6:	f00d f871 	bl	80131ac <sprintf>
	BOS_Status result =BOS_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	e77b      	b.n	8005fc6 <getCommand+0x52>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 80060ce:	4b3a      	ldr	r3, [pc, #232]	; (80061b8 <getCommand+0x244>)
 80060d0:	791a      	ldrb	r2, [r3, #4]
 80060d2:	493a      	ldr	r1, [pc, #232]	; (80061bc <getCommand+0x248>)
 80060d4:	0028      	movs	r0, r5
 80060d6:	f00d f869 	bl	80131ac <sprintf>
	BOS_Status result =BOS_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	e773      	b.n	8005fc6 <getCommand+0x52>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 80060de:	2205      	movs	r2, #5
 80060e0:	4937      	ldr	r1, [pc, #220]	; (80061c0 <getCommand+0x24c>)
 80060e2:	0020      	movs	r0, r4
 80060e4:	f00d f8a6 	bl	8013234 <strncmp>
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d005      	beq.n	80060f8 <getCommand+0x184>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80060ec:	2213      	movs	r2, #19
 80060ee:	4935      	ldr	r1, [pc, #212]	; (80061c4 <getCommand+0x250>)
 80060f0:	0028      	movs	r0, r5
 80060f2:	f00c fe58 	bl	8012da6 <memcpy>
 80060f6:	e769      	b.n	8005fcc <getCommand+0x58>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80060f8:	466a      	mov	r2, sp
 80060fa:	2102      	movs	r1, #2
 80060fc:	0030      	movs	r0, r6
 80060fe:	f007 fd75 	bl	800dbec <FreeRTOS_CLIGetParameter>
 8006102:	0006      	movs	r6, r0
		for(i =0; i < MaxNumOfGroups; i++){
 8006104:	2400      	movs	r4, #0
 8006106:	2c09      	cmp	r4, #9
 8006108:	d80c      	bhi.n	8006124 <getCommand+0x1b0>
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 800610a:	00a3      	lsls	r3, r4, #2
 800610c:	191b      	adds	r3, r3, r4
 800610e:	0059      	lsls	r1, r3, #1
 8006110:	4b2d      	ldr	r3, [pc, #180]	; (80061c8 <getCommand+0x254>)
 8006112:	18c9      	adds	r1, r1, r3
 8006114:	0030      	movs	r0, r6
 8006116:	f7f9 fff5 	bl	8000104 <strcmp>
 800611a:	2800      	cmp	r0, #0
 800611c:	d00b      	beq.n	8006136 <getCommand+0x1c2>
		for(i =0; i < MaxNumOfGroups; i++){
 800611e:	3401      	adds	r4, #1
 8006120:	b2e4      	uxtb	r4, r4
 8006122:	e7f0      	b.n	8006106 <getCommand+0x192>
		temp8 =0;
 8006124:	2700      	movs	r7, #0
		if(!temp8){
 8006126:	2f00      	cmp	r7, #0
 8006128:	d007      	beq.n	800613a <getCommand+0x1c6>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 800612a:	0032      	movs	r2, r6
 800612c:	4927      	ldr	r1, [pc, #156]	; (80061cc <getCommand+0x258>)
 800612e:	0028      	movs	r0, r5
 8006130:	f00d f83c 	bl	80131ac <sprintf>
			for(j =1; j <= N; j++)						// N modules
 8006134:	e009      	b.n	800614a <getCommand+0x1d6>
				temp8 =1;
 8006136:	2701      	movs	r7, #1
 8006138:	e7f5      	b.n	8006126 <getCommand+0x1b2>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 800613a:	0032      	movs	r2, r6
 800613c:	4924      	ldr	r1, [pc, #144]	; (80061d0 <getCommand+0x25c>)
 800613e:	0028      	movs	r0, r5
 8006140:	f00d f834 	bl	80131ac <sprintf>
			return pdFALSE;
 8006144:	e742      	b.n	8005fcc <getCommand+0x58>
			for(j =1; j <= N; j++)						// N modules
 8006146:	3701      	adds	r7, #1
 8006148:	b2ff      	uxtb	r7, r7
 800614a:	4b22      	ldr	r3, [pc, #136]	; (80061d4 <getCommand+0x260>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	42bb      	cmp	r3, r7
 8006150:	d30d      	bcc.n	800616e <getCommand+0x1fa>
				if(InGroup(j,i)){
 8006152:	1e7b      	subs	r3, r7, #1
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	4a20      	ldr	r2, [pc, #128]	; (80061d8 <getCommand+0x264>)
 8006158:	5a9b      	ldrh	r3, [r3, r2]
 800615a:	4123      	asrs	r3, r4
 800615c:	07db      	lsls	r3, r3, #31
 800615e:	d5f2      	bpl.n	8006146 <getCommand+0x1d2>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8006160:	003b      	movs	r3, r7
 8006162:	002a      	movs	r2, r5
 8006164:	491d      	ldr	r1, [pc, #116]	; (80061dc <getCommand+0x268>)
 8006166:	0028      	movs	r0, r5
 8006168:	f00d f820 	bl	80131ac <sprintf>
 800616c:	e7eb      	b.n	8006146 <getCommand+0x1d2>
	BOS_Status result =BOS_OK;
 800616e:	2300      	movs	r3, #0
 8006170:	e729      	b.n	8005fc6 <getCommand+0x52>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8006172:	4b03      	ldr	r3, [pc, #12]	; (8006180 <getCommand+0x20c>)
 8006174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006176:	491a      	ldr	r1, [pc, #104]	; (80061e0 <getCommand+0x26c>)
 8006178:	0028      	movs	r0, r5
 800617a:	f00d f817 	bl	80131ac <sprintf>
 800617e:	e725      	b.n	8005fcc <getCommand+0x58>
 8006180:	200017d4 	.word	0x200017d4
 8006184:	08018e74 	.word	0x08018e74
 8006188:	08018e7c 	.word	0x08018e7c
 800618c:	200067c8 	.word	0x200067c8
 8006190:	08017f70 	.word	0x08017f70
 8006194:	08017e4c 	.word	0x08017e4c
 8006198:	08018e88 	.word	0x08018e88
 800619c:	08018e8c 	.word	0x08018e8c
 80061a0:	08018e94 	.word	0x08018e94
 80061a4:	08018e9c 	.word	0x08018e9c
 80061a8:	08018ea8 	.word	0x08018ea8
 80061ac:	08018eb4 	.word	0x08018eb4
 80061b0:	08018ec4 	.word	0x08018ec4
 80061b4:	08018ed8 	.word	0x08018ed8
 80061b8:	20006848 	.word	0x20006848
 80061bc:	080185cc 	.word	0x080185cc
 80061c0:	08018eec 	.word	0x08018eec
 80061c4:	08018f2c 	.word	0x08018f2c
 80061c8:	20000ad0 	.word	0x20000ad0
 80061cc:	08018f10 	.word	0x08018f10
 80061d0:	08018ef4 	.word	0x08018ef4
 80061d4:	20000008 	.word	0x20000008
 80061d8:	20000a9c 	.word	0x20000a9c
 80061dc:	08018f24 	.word	0x08018f24
 80061e0:	08018f40 	.word	0x08018f40

080061e4 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80061e4:	b570      	push	{r4, r5, r6, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	0006      	movs	r6, r0
 80061ea:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80061ec:	2300      	movs	r3, #0
 80061ee:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80061f0:	aa01      	add	r2, sp, #4
 80061f2:	2101      	movs	r1, #1
 80061f4:	f007 fcfa 	bl	800dbec <FreeRTOS_CLIGetParameter>
 80061f8:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 80061fa:	9d01      	ldr	r5, [sp, #4]
 80061fc:	002a      	movs	r2, r5
 80061fe:	491f      	ldr	r1, [pc, #124]	; (800627c <defaultCommand+0x98>)
 8006200:	f00d f818 	bl	8013234 <strncmp>
 8006204:	2800      	cmp	r0, #0
 8006206:	d020      	beq.n	800624a <defaultCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006208:	002a      	movs	r2, r5
 800620a:	491d      	ldr	r1, [pc, #116]	; (8006280 <defaultCommand+0x9c>)
 800620c:	0020      	movs	r0, r4
 800620e:	f00d f811 	bl	8013234 <strncmp>
 8006212:	2800      	cmp	r0, #0
 8006214:	d12b      	bne.n	800626e <defaultCommand+0x8a>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006216:	2200      	movs	r2, #0
 8006218:	2116      	movs	r1, #22
 800621a:	20ff      	movs	r0, #255	; 0xff
 800621c:	f002 f802 	bl	8008224 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8006220:	4b18      	ldr	r3, [pc, #96]	; (8006284 <defaultCommand+0xa0>)
 8006222:	2202      	movs	r2, #2
 8006224:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006226:	2064      	movs	r0, #100	; 0x64
 8006228:	f007 fbbc 	bl	800d9a4 <osDelay>
		ClearEEportsDir();
 800622c:	f7fd f9e4 	bl	80035f8 <ClearEEportsDir>
		ClearROtopology();
 8006230:	f003 ff80 	bl	800a134 <ClearROtopology>
		osDelay(100);
 8006234:	2064      	movs	r0, #100	; 0x64
 8006236:	f007 fbb5 	bl	800d9a4 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 800623a:	2240      	movs	r2, #64	; 0x40
 800623c:	4912      	ldr	r1, [pc, #72]	; (8006288 <defaultCommand+0xa4>)
 800623e:	0030      	movs	r0, r6
 8006240:	f00c fdb1 	bl	8012da6 <memcpy>
}
 8006244:	2000      	movs	r0, #0
 8006246:	b002      	add	sp, #8
 8006248:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 800624a:	4910      	ldr	r1, [pc, #64]	; (800628c <defaultCommand+0xa8>)
 800624c:	4810      	ldr	r0, [pc, #64]	; (8006290 <defaultCommand+0xac>)
 800624e:	000b      	movs	r3, r1
 8006250:	0002      	movs	r2, r0
 8006252:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006254:	c313      	stmia	r3!, {r0, r1, r4}
 8006256:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006258:	c313      	stmia	r3!, {r0, r1, r4}
 800625a:	6812      	ldr	r2, [r2, #0]
 800625c:	601a      	str	r2, [r3, #0]
		SaveEEparams();
 800625e:	f7fd f987 	bl	8003570 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006262:	2227      	movs	r2, #39	; 0x27
 8006264:	490b      	ldr	r1, [pc, #44]	; (8006294 <defaultCommand+0xb0>)
 8006266:	0030      	movs	r0, r6
 8006268:	f00c fd9d 	bl	8012da6 <memcpy>
 800626c:	e7ea      	b.n	8006244 <defaultCommand+0x60>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 800626e:	220f      	movs	r2, #15
 8006270:	4909      	ldr	r1, [pc, #36]	; (8006298 <defaultCommand+0xb4>)
 8006272:	0030      	movs	r0, r6
 8006274:	f00c fd97 	bl	8012da6 <memcpy>
 8006278:	e7e4      	b.n	8006244 <defaultCommand+0x60>
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	08018f60 	.word	0x08018f60
 8006280:	08018f90 	.word	0x08018f90
 8006284:	2000113e 	.word	0x2000113e
 8006288:	08018fa8 	.word	0x08018fa8
 800628c:	20006848 	.word	0x20006848
 8006290:	20000014 	.word	0x20000014
 8006294:	08018f68 	.word	0x08018f68
 8006298:	08018f98 	.word	0x08018f98

0800629c <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800629c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800629e:	46d6      	mov	lr, sl
 80062a0:	464f      	mov	r7, r9
 80062a2:	4646      	mov	r6, r8
 80062a4:	b5c0      	push	{r6, r7, lr}
 80062a6:	b08c      	sub	sp, #48	; 0x30
 80062a8:	0006      	movs	r6, r0
 80062aa:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80062b0:	930a      	str	r3, [sp, #40]	; 0x28
 80062b2:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80062b4:	9308      	str	r3, [sp, #32]
 80062b6:	9307      	str	r3, [sp, #28]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80062b8:	aa0b      	add	r2, sp, #44	; 0x2c
 80062ba:	2101      	movs	r1, #1
 80062bc:	0028      	movs	r0, r5
 80062be:	f007 fc95 	bl	800dbec <FreeRTOS_CLIGetParameter>
 80062c2:	0004      	movs	r4, r0
 80062c4:	4bb4      	ldr	r3, [pc, #720]	; (8006598 <setCommand+0x2fc>)
 80062c6:	6398      	str	r0, [r3, #56]	; 0x38
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80062c8:	2204      	movs	r2, #4
 80062ca:	49b4      	ldr	r1, [pc, #720]	; (800659c <setCommand+0x300>)
 80062cc:	f00c ffb2 	bl	8013234 <strncmp>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d01d      	beq.n	8006310 <setCommand+0x74>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 80062d4:	2204      	movs	r2, #4
 80062d6:	49b2      	ldr	r1, [pc, #712]	; (80065a0 <setCommand+0x304>)
 80062d8:	0020      	movs	r0, r4
 80062da:	f00c ffab 	bl	8013234 <strncmp>
 80062de:	2800      	cmp	r0, #0
 80062e0:	d100      	bne.n	80062e4 <setCommand+0x48>
 80062e2:	e17b      	b.n	80065dc <setCommand+0x340>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 80062e4:	2204      	movs	r2, #4
 80062e6:	49af      	ldr	r1, [pc, #700]	; (80065a4 <setCommand+0x308>)
 80062e8:	0020      	movs	r0, r4
 80062ea:	f00c ffa3 	bl	8013234 <strncmp>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d100      	bne.n	80062f4 <setCommand+0x58>
 80062f2:	e1cf      	b.n	8006694 <setCommand+0x3f8>
		result =BOS_ERR_WrongParam;
 80062f4:	2467      	movs	r4, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 80062f6:	2c67      	cmp	r4, #103	; 0x67
 80062f8:	d100      	bne.n	80062fc <setCommand+0x60>
 80062fa:	e3d2      	b.n	8006aa2 <setCommand+0x806>
	else if(result == BOS_ERR_WrongValue)
 80062fc:	2c68      	cmp	r4, #104	; 0x68
 80062fe:	d100      	bne.n	8006302 <setCommand+0x66>
 8006300:	e3d5      	b.n	8006aae <setCommand+0x812>
}
 8006302:	2000      	movs	r0, #0
 8006304:	b00c      	add	sp, #48	; 0x30
 8006306:	bc1c      	pop	{r2, r3, r4}
 8006308:	4690      	mov	r8, r2
 800630a:	4699      	mov	r9, r3
 800630c:	46a2      	mov	sl, r4
 800630e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006310:	aa0a      	add	r2, sp, #40	; 0x28
 8006312:	2102      	movs	r1, #2
 8006314:	0028      	movs	r0, r5
 8006316:	f007 fc69 	bl	800dbec <FreeRTOS_CLIGetParameter>
 800631a:	0007      	movs	r7, r0
 800631c:	4b9e      	ldr	r3, [pc, #632]	; (8006598 <setCommand+0x2fc>)
 800631e:	63d8      	str	r0, [r3, #60]	; 0x3c
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006320:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8006322:	3404      	adds	r4, #4
 8006324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006326:	1f1d      	subs	r5, r3, #4
 8006328:	002a      	movs	r2, r5
 800632a:	499f      	ldr	r1, [pc, #636]	; (80065a8 <setCommand+0x30c>)
 800632c:	0020      	movs	r0, r4
 800632e:	f00c ff81 	bl	8013234 <strncmp>
 8006332:	2800      	cmp	r0, #0
 8006334:	d150      	bne.n	80063d8 <setCommand+0x13c>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006336:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006338:	0022      	movs	r2, r4
 800633a:	499c      	ldr	r1, [pc, #624]	; (80065ac <setCommand+0x310>)
 800633c:	0038      	movs	r0, r7
 800633e:	f00c ff79 	bl	8013234 <strncmp>
 8006342:	2800      	cmp	r0, #0
 8006344:	d016      	beq.n	8006374 <setCommand+0xd8>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006346:	0022      	movs	r2, r4
 8006348:	4999      	ldr	r1, [pc, #612]	; (80065b0 <setCommand+0x314>)
 800634a:	0038      	movs	r0, r7
 800634c:	f00c ff72 	bl	8013234 <strncmp>
 8006350:	2800      	cmp	r0, #0
 8006352:	d01c      	beq.n	800638e <setCommand+0xf2>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006354:	0022      	movs	r2, r4
 8006356:	4997      	ldr	r1, [pc, #604]	; (80065b4 <setCommand+0x318>)
 8006358:	0038      	movs	r0, r7
 800635a:	f00c ff6b 	bl	8013234 <strncmp>
 800635e:	2800      	cmp	r0, #0
 8006360:	d022      	beq.n	80063a8 <setCommand+0x10c>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006362:	0022      	movs	r2, r4
 8006364:	4994      	ldr	r1, [pc, #592]	; (80065b8 <setCommand+0x31c>)
 8006366:	0038      	movs	r0, r7
 8006368:	f00c ff64 	bl	8013234 <strncmp>
 800636c:	2800      	cmp	r0, #0
 800636e:	d028      	beq.n	80063c2 <setCommand+0x126>
				result =BOS_ERR_WrongValue;
 8006370:	2468      	movs	r4, #104	; 0x68
 8006372:	e7c0      	b.n	80062f6 <setCommand+0x5a>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006374:	4b91      	ldr	r3, [pc, #580]	; (80065bc <setCommand+0x320>)
 8006376:	2260      	movs	r2, #96	; 0x60
 8006378:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800637a:	7859      	ldrb	r1, [r3, #1]
 800637c:	0209      	lsls	r1, r1, #8
 800637e:	2360      	movs	r3, #96	; 0x60
 8006380:	4319      	orrs	r1, r3
 8006382:	308a      	adds	r0, #138	; 0x8a
 8006384:	0040      	lsls	r0, r0, #1
 8006386:	f005 f801 	bl	800b38c <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800638a:	2400      	movs	r4, #0
 800638c:	e360      	b.n	8006a50 <setCommand+0x7b4>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 800638e:	4b8b      	ldr	r3, [pc, #556]	; (80065bc <setCommand+0x320>)
 8006390:	2220      	movs	r2, #32
 8006392:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006394:	7859      	ldrb	r1, [r3, #1]
 8006396:	0209      	lsls	r1, r1, #8
 8006398:	2320      	movs	r3, #32
 800639a:	4319      	orrs	r1, r3
 800639c:	308a      	adds	r0, #138	; 0x8a
 800639e:	0040      	lsls	r0, r0, #1
 80063a0:	f004 fff4 	bl	800b38c <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80063a4:	2400      	movs	r4, #0
 80063a6:	e353      	b.n	8006a50 <setCommand+0x7b4>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80063a8:	4b84      	ldr	r3, [pc, #528]	; (80065bc <setCommand+0x320>)
 80063aa:	2240      	movs	r2, #64	; 0x40
 80063ac:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80063ae:	7859      	ldrb	r1, [r3, #1]
 80063b0:	0209      	lsls	r1, r1, #8
 80063b2:	2340      	movs	r3, #64	; 0x40
 80063b4:	4319      	orrs	r1, r3
 80063b6:	308a      	adds	r0, #138	; 0x8a
 80063b8:	0040      	lsls	r0, r0, #1
 80063ba:	f004 ffe7 	bl	800b38c <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80063be:	2400      	movs	r4, #0
 80063c0:	e346      	b.n	8006a50 <setCommand+0x7b4>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80063c2:	4b7e      	ldr	r3, [pc, #504]	; (80065bc <setCommand+0x320>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80063c8:	7859      	ldrb	r1, [r3, #1]
 80063ca:	0209      	lsls	r1, r1, #8
 80063cc:	308a      	adds	r0, #138	; 0x8a
 80063ce:	0040      	lsls	r0, r0, #1
 80063d0:	f004 ffdc 	bl	800b38c <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80063d4:	2400      	movs	r4, #0
 80063d6:	e33b      	b.n	8006a50 <setCommand+0x7b4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 80063d8:	002a      	movs	r2, r5
 80063da:	4979      	ldr	r1, [pc, #484]	; (80065c0 <setCommand+0x324>)
 80063dc:	0020      	movs	r0, r4
 80063de:	f00c ff29 	bl	8013234 <strncmp>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d14f      	bne.n	8006486 <setCommand+0x1ea>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80063e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80063e8:	0022      	movs	r2, r4
 80063ea:	4970      	ldr	r1, [pc, #448]	; (80065ac <setCommand+0x310>)
 80063ec:	0038      	movs	r0, r7
 80063ee:	f00c ff21 	bl	8013234 <strncmp>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d016      	beq.n	8006424 <setCommand+0x188>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80063f6:	0022      	movs	r2, r4
 80063f8:	496d      	ldr	r1, [pc, #436]	; (80065b0 <setCommand+0x314>)
 80063fa:	0038      	movs	r0, r7
 80063fc:	f00c ff1a 	bl	8013234 <strncmp>
 8006400:	2800      	cmp	r0, #0
 8006402:	d01c      	beq.n	800643e <setCommand+0x1a2>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 8006404:	0022      	movs	r2, r4
 8006406:	4968      	ldr	r1, [pc, #416]	; (80065a8 <setCommand+0x30c>)
 8006408:	0038      	movs	r0, r7
 800640a:	f00c ff13 	bl	8013234 <strncmp>
 800640e:	2800      	cmp	r0, #0
 8006410:	d022      	beq.n	8006458 <setCommand+0x1bc>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006412:	0022      	movs	r2, r4
 8006414:	4968      	ldr	r1, [pc, #416]	; (80065b8 <setCommand+0x31c>)
 8006416:	0038      	movs	r0, r7
 8006418:	f00c ff0c 	bl	8013234 <strncmp>
 800641c:	2800      	cmp	r0, #0
 800641e:	d028      	beq.n	8006472 <setCommand+0x1d6>
				result =BOS_ERR_WrongValue;
 8006420:	2468      	movs	r4, #104	; 0x68
 8006422:	e768      	b.n	80062f6 <setCommand+0x5a>
				BOSMessaging.trace =TRACE_BOTH;
 8006424:	4b65      	ldr	r3, [pc, #404]	; (80065bc <setCommand+0x320>)
 8006426:	2203      	movs	r2, #3
 8006428:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	21c0      	movs	r1, #192	; 0xc0
 800642e:	0089      	lsls	r1, r1, #2
 8006430:	4319      	orrs	r1, r3
 8006432:	308a      	adds	r0, #138	; 0x8a
 8006434:	0040      	lsls	r0, r0, #1
 8006436:	f004 ffa9 	bl	800b38c <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800643a:	2400      	movs	r4, #0
 800643c:	e308      	b.n	8006a50 <setCommand+0x7b4>
				BOSMessaging.trace =TRACE_MESSAGE;
 800643e:	4b5f      	ldr	r3, [pc, #380]	; (80065bc <setCommand+0x320>)
 8006440:	2201      	movs	r2, #1
 8006442:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2180      	movs	r1, #128	; 0x80
 8006448:	0049      	lsls	r1, r1, #1
 800644a:	4319      	orrs	r1, r3
 800644c:	308a      	adds	r0, #138	; 0x8a
 800644e:	0040      	lsls	r0, r0, #1
 8006450:	f004 ff9c 	bl	800b38c <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006454:	2400      	movs	r4, #0
 8006456:	e2fb      	b.n	8006a50 <setCommand+0x7b4>
				BOSMessaging.trace =TRACE_RESPONSE;
 8006458:	4b58      	ldr	r3, [pc, #352]	; (80065bc <setCommand+0x320>)
 800645a:	2202      	movs	r2, #2
 800645c:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2180      	movs	r1, #128	; 0x80
 8006462:	0089      	lsls	r1, r1, #2
 8006464:	4319      	orrs	r1, r3
 8006466:	308a      	adds	r0, #138	; 0x8a
 8006468:	0040      	lsls	r0, r0, #1
 800646a:	f004 ff8f 	bl	800b38c <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800646e:	2400      	movs	r4, #0
 8006470:	e2ee      	b.n	8006a50 <setCommand+0x7b4>
				BOSMessaging.trace =TRACE_NONE;
 8006472:	4b52      	ldr	r3, [pc, #328]	; (80065bc <setCommand+0x320>)
 8006474:	2200      	movs	r2, #0
 8006476:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006478:	7819      	ldrb	r1, [r3, #0]
 800647a:	308a      	adds	r0, #138	; 0x8a
 800647c:	0040      	lsls	r0, r0, #1
 800647e:	f004 ff85 	bl	800b38c <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006482:	2400      	movs	r4, #0
 8006484:	e2e4      	b.n	8006a50 <setCommand+0x7b4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006486:	002a      	movs	r2, r5
 8006488:	494e      	ldr	r1, [pc, #312]	; (80065c4 <setCommand+0x328>)
 800648a:	0020      	movs	r0, r4
 800648c:	f00c fed2 	bl	8013234 <strncmp>
 8006490:	2800      	cmp	r0, #0
 8006492:	d01d      	beq.n	80064d0 <setCommand+0x234>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006494:	002a      	movs	r2, r5
 8006496:	494c      	ldr	r1, [pc, #304]	; (80065c8 <setCommand+0x32c>)
 8006498:	0020      	movs	r0, r4
 800649a:	f00c fecb 	bl	8013234 <strncmp>
 800649e:	2800      	cmp	r0, #0
 80064a0:	d02d      	beq.n	80064fe <setCommand+0x262>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80064a2:	002a      	movs	r2, r5
 80064a4:	4949      	ldr	r1, [pc, #292]	; (80065cc <setCommand+0x330>)
 80064a6:	0020      	movs	r0, r4
 80064a8:	f00c fec4 	bl	8013234 <strncmp>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d036      	beq.n	800651e <setCommand+0x282>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80064b0:	002a      	movs	r2, r5
 80064b2:	4947      	ldr	r1, [pc, #284]	; (80065d0 <setCommand+0x334>)
 80064b4:	0020      	movs	r0, r4
 80064b6:	f00c febd 	bl	8013234 <strncmp>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d03f      	beq.n	800653e <setCommand+0x2a2>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80064be:	002a      	movs	r2, r5
 80064c0:	4944      	ldr	r1, [pc, #272]	; (80065d4 <setCommand+0x338>)
 80064c2:	0020      	movs	r0, r4
 80064c4:	f00c feb6 	bl	8013234 <strncmp>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d04e      	beq.n	800656a <setCommand+0x2ce>
			result =BOS_ERR_WrongParam;
 80064cc:	2467      	movs	r4, #103	; 0x67
 80064ce:	e712      	b.n	80062f6 <setCommand+0x5a>
			temp2 =atoi((const char* )pcParameterString2);
 80064d0:	0038      	movs	r0, r7
 80064d2:	f00c f9d8 	bl	8012886 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 80064d6:	23e1      	movs	r3, #225	; 0xe1
 80064d8:	031b      	lsls	r3, r3, #12
 80064da:	4298      	cmp	r0, r3
 80064dc:	d901      	bls.n	80064e2 <setCommand+0x246>
				result =BOS_ERR_WrongValue;
 80064de:	2468      	movs	r4, #104	; 0x68
 80064e0:	e709      	b.n	80062f6 <setCommand+0x5a>
				BOS.clibaudrate =temp2;
 80064e2:	4c3d      	ldr	r4, [pc, #244]	; (80065d8 <setCommand+0x33c>)
 80064e4:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80064e6:	b281      	uxth	r1, r0
 80064e8:	208c      	movs	r0, #140	; 0x8c
 80064ea:	0040      	lsls	r0, r0, #1
 80064ec:	f004 ff4e 	bl	800b38c <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80064f0:	8961      	ldrh	r1, [r4, #10]
 80064f2:	201a      	movs	r0, #26
 80064f4:	30ff      	adds	r0, #255	; 0xff
 80064f6:	f004 ff49 	bl	800b38c <EE_WriteVariable>
				extraMessage =1;
 80064fa:	2401      	movs	r4, #1
 80064fc:	e2a8      	b.n	8006a50 <setCommand+0x7b4>
			temp16 =atoi((const char* )pcParameterString2);
 80064fe:	0038      	movs	r0, r7
 8006500:	f00c f9c1 	bl	8012886 <atoi>
 8006504:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006506:	2900      	cmp	r1, #0
 8006508:	d101      	bne.n	800650e <setCommand+0x272>
				result =BOS_ERR_WrongValue;
 800650a:	2468      	movs	r4, #104	; 0x68
 800650c:	e6f3      	b.n	80062f6 <setCommand+0x5a>
				BOS.buttons.debounce =temp16;
 800650e:	4b32      	ldr	r3, [pc, #200]	; (80065d8 <setCommand+0x33c>)
 8006510:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006512:	2016      	movs	r0, #22
 8006514:	30ff      	adds	r0, #255	; 0xff
 8006516:	f004 ff39 	bl	800b38c <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800651a:	2400      	movs	r4, #0
 800651c:	e298      	b.n	8006a50 <setCommand+0x7b4>
			temp16 =atoi((const char* )pcParameterString2);
 800651e:	0038      	movs	r0, r7
 8006520:	f00c f9b1 	bl	8012886 <atoi>
 8006524:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006526:	2900      	cmp	r1, #0
 8006528:	d101      	bne.n	800652e <setCommand+0x292>
				result =BOS_ERR_WrongValue;
 800652a:	2468      	movs	r4, #104	; 0x68
 800652c:	e6e3      	b.n	80062f6 <setCommand+0x5a>
				BOS.buttons.singleClickTime =temp16;
 800652e:	4b2a      	ldr	r3, [pc, #168]	; (80065d8 <setCommand+0x33c>)
 8006530:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006532:	208b      	movs	r0, #139	; 0x8b
 8006534:	0040      	lsls	r0, r0, #1
 8006536:	f004 ff29 	bl	800b38c <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800653a:	2400      	movs	r4, #0
 800653c:	e288      	b.n	8006a50 <setCommand+0x7b4>
			temp16 =atoi((const char* )pcParameterString2);
 800653e:	0038      	movs	r0, r7
 8006540:	f00c f9a1 	bl	8012886 <atoi>
 8006544:	b283      	uxth	r3, r0
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006546:	3b01      	subs	r3, #1
 8006548:	b29b      	uxth	r3, r3
 800654a:	2bfe      	cmp	r3, #254	; 0xfe
 800654c:	d901      	bls.n	8006552 <setCommand+0x2b6>
				result =BOS_ERR_WrongValue;
 800654e:	2468      	movs	r4, #104	; 0x68
 8006550:	e6d1      	b.n	80062f6 <setCommand+0x5a>
				BOS.buttons.minInterClickTime =temp16;
 8006552:	b2c0      	uxtb	r0, r0
 8006554:	4b20      	ldr	r3, [pc, #128]	; (80065d8 <setCommand+0x33c>)
 8006556:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006558:	7959      	ldrb	r1, [r3, #5]
 800655a:	0209      	lsls	r1, r1, #8
 800655c:	4301      	orrs	r1, r0
 800655e:	2018      	movs	r0, #24
 8006560:	30ff      	adds	r0, #255	; 0xff
 8006562:	f004 ff13 	bl	800b38c <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006566:	2400      	movs	r4, #0
 8006568:	e272      	b.n	8006a50 <setCommand+0x7b4>
			temp16 =atoi((const char* )pcParameterString2);
 800656a:	0038      	movs	r0, r7
 800656c:	f00c f98b 	bl	8012886 <atoi>
 8006570:	b283      	uxth	r3, r0
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006572:	3b01      	subs	r3, #1
 8006574:	b29b      	uxth	r3, r3
 8006576:	2bfe      	cmp	r3, #254	; 0xfe
 8006578:	d901      	bls.n	800657e <setCommand+0x2e2>
				result =BOS_ERR_WrongValue;
 800657a:	2468      	movs	r4, #104	; 0x68
 800657c:	e6bb      	b.n	80062f6 <setCommand+0x5a>
				BOS.buttons.maxInterClickTime =temp16;
 800657e:	b2c0      	uxtb	r0, r0
 8006580:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <setCommand+0x33c>)
 8006582:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006584:	0200      	lsls	r0, r0, #8
 8006586:	7919      	ldrb	r1, [r3, #4]
 8006588:	4301      	orrs	r1, r0
 800658a:	2018      	movs	r0, #24
 800658c:	30ff      	adds	r0, #255	; 0xff
 800658e:	f004 fefd 	bl	800b38c <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006592:	2400      	movs	r4, #0
 8006594:	e25c      	b.n	8006a50 <setCommand+0x7b4>
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	200017d4 	.word	0x200017d4
 800659c:	08018e74 	.word	0x08018e74
 80065a0:	08018ff4 	.word	0x08018ff4
 80065a4:	08019004 	.word	0x08019004
 80065a8:	08018e7c 	.word	0x08018e7c
 80065ac:	08017f70 	.word	0x08017f70
 80065b0:	08018fe8 	.word	0x08018fe8
 80065b4:	08018ff0 	.word	0x08018ff0
 80065b8:	08018e8c 	.word	0x08018e8c
 80065bc:	200067c8 	.word	0x200067c8
 80065c0:	08018e94 	.word	0x08018e94
 80065c4:	08018e9c 	.word	0x08018e9c
 80065c8:	08018ea8 	.word	0x08018ea8
 80065cc:	08018eb4 	.word	0x08018eb4
 80065d0:	08018ec4 	.word	0x08018ec4
 80065d4:	08018ed8 	.word	0x08018ed8
 80065d8:	20006848 	.word	0x20006848
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80065dc:	aa0a      	add	r2, sp, #40	; 0x28
 80065de:	2102      	movs	r1, #2
 80065e0:	0028      	movs	r0, r5
 80065e2:	f007 fb03 	bl	800dbec <FreeRTOS_CLIGetParameter>
 80065e6:	4cdb      	ldr	r4, [pc, #876]	; (8006954 <setCommand+0x6b8>)
 80065e8:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80065ea:	aa09      	add	r2, sp, #36	; 0x24
 80065ec:	2103      	movs	r1, #3
 80065ee:	0028      	movs	r0, r5
 80065f0:	f007 fafc 	bl	800dbec <FreeRTOS_CLIGetParameter>
 80065f4:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80065f6:	aa08      	add	r2, sp, #32
 80065f8:	2104      	movs	r1, #4
 80065fa:	0028      	movs	r0, r5
 80065fc:	f007 faf6 	bl	800dbec <FreeRTOS_CLIGetParameter>
 8006600:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006602:	aa07      	add	r2, sp, #28
 8006604:	2105      	movs	r1, #5
 8006606:	0028      	movs	r0, r5
 8006608:	f007 faf0 	bl	800dbec <FreeRTOS_CLIGetParameter>
 800660c:	64a0      	str	r0, [r4, #72]	; 0x48
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 800660e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006610:	f00c f939 	bl	8012886 <atoi>
 8006614:	b2c5      	uxtb	r5, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006616:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006618:	f00c f935 	bl	8012886 <atoi>
 800661c:	b2c3      	uxtb	r3, r0
 800661e:	4699      	mov	r9, r3
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006620:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006622:	f00c f930 	bl	8012886 <atoi>
 8006626:	b2c7      	uxtb	r7, r0
		if(pcParameterString5 != NULL){
 8006628:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 800662a:	2c00      	cmp	r4, #0
 800662c:	d013      	beq.n	8006656 <setCommand+0x3ba>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 800662e:	2202      	movs	r2, #2
 8006630:	49c9      	ldr	r1, [pc, #804]	; (8006958 <setCommand+0x6bc>)
 8006632:	0020      	movs	r0, r4
 8006634:	f00c fdfe 	bl	8013234 <strncmp>
 8006638:	2800      	cmp	r0, #0
 800663a:	d00a      	beq.n	8006652 <setCommand+0x3b6>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 800663c:	2202      	movs	r2, #2
 800663e:	49c7      	ldr	r1, [pc, #796]	; (800695c <setCommand+0x6c0>)
 8006640:	0020      	movs	r0, r4
 8006642:	f00c fdf7 	bl	8013234 <strncmp>
 8006646:	2800      	cmp	r0, #0
 8006648:	d000      	beq.n	800664c <setCommand+0x3b0>
 800664a:	e1fd      	b.n	8006a48 <setCommand+0x7ac>
				temp84 =RTC_PM;
 800664c:	2302      	movs	r3, #2
 800664e:	4698      	mov	r8, r3
 8006650:	e001      	b.n	8006656 <setCommand+0x3ba>
				temp84 =RTC_AM;
 8006652:	2301      	movs	r3, #1
 8006654:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006656:	2d17      	cmp	r5, #23
 8006658:	d900      	bls.n	800665c <setCommand+0x3c0>
 800665a:	e21a      	b.n	8006a92 <setCommand+0x7f6>
 800665c:	464b      	mov	r3, r9
 800665e:	2b3b      	cmp	r3, #59	; 0x3b
 8006660:	d900      	bls.n	8006664 <setCommand+0x3c8>
 8006662:	e218      	b.n	8006a96 <setCommand+0x7fa>
 8006664:	2f3b      	cmp	r7, #59	; 0x3b
 8006666:	d901      	bls.n	800666c <setCommand+0x3d0>
				result =BOS_ERR_WrongValue;
 8006668:	2468      	movs	r4, #104	; 0x68
 800666a:	e644      	b.n	80062f6 <setCommand+0x5a>
				GetTimeDate();
 800666c:	f006 fd5a 	bl	800d124 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006670:	4cbb      	ldr	r4, [pc, #748]	; (8006960 <setCommand+0x6c4>)
 8006672:	7da0      	ldrb	r0, [r4, #22]
 8006674:	7d61      	ldrb	r1, [r4, #21]
 8006676:	8b22      	ldrh	r2, [r4, #24]
 8006678:	7d23      	ldrb	r3, [r4, #20]
 800667a:	7b24      	ldrb	r4, [r4, #12]
 800667c:	b264      	sxtb	r4, r4
 800667e:	9404      	str	r4, [sp, #16]
 8006680:	4644      	mov	r4, r8
 8006682:	9403      	str	r4, [sp, #12]
 8006684:	9502      	str	r5, [sp, #8]
 8006686:	464c      	mov	r4, r9
 8006688:	9401      	str	r4, [sp, #4]
 800668a:	9700      	str	r7, [sp, #0]
 800668c:	f006 fcf0 	bl	800d070 <BOS_CalendarConfig>
 8006690:	0004      	movs	r4, r0
 8006692:	e1da      	b.n	8006a4a <setCommand+0x7ae>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006694:	aa0a      	add	r2, sp, #40	; 0x28
 8006696:	2102      	movs	r1, #2
 8006698:	0028      	movs	r0, r5
 800669a:	f007 faa7 	bl	800dbec <FreeRTOS_CLIGetParameter>
 800669e:	4cad      	ldr	r4, [pc, #692]	; (8006954 <setCommand+0x6b8>)
 80066a0:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80066a2:	aa09      	add	r2, sp, #36	; 0x24
 80066a4:	2103      	movs	r1, #3
 80066a6:	0028      	movs	r0, r5
 80066a8:	f007 faa0 	bl	800dbec <FreeRTOS_CLIGetParameter>
 80066ac:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80066ae:	aa08      	add	r2, sp, #32
 80066b0:	2104      	movs	r1, #4
 80066b2:	0028      	movs	r0, r5
 80066b4:	f007 fa9a 	bl	800dbec <FreeRTOS_CLIGetParameter>
 80066b8:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80066ba:	aa07      	add	r2, sp, #28
 80066bc:	2105      	movs	r1, #5
 80066be:	0028      	movs	r0, r5
 80066c0:	f007 fa94 	bl	800dbec <FreeRTOS_CLIGetParameter>
 80066c4:	64a0      	str	r0, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 80066c6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80066c8:	f00c f8dd 	bl	8012886 <atoi>
 80066cc:	b2c7      	uxtb	r7, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 80066ce:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80066d0:	f00c f8d9 	bl	8012886 <atoi>
 80066d4:	b283      	uxth	r3, r0
 80066d6:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 80066d8:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80066da:	2206      	movs	r2, #6
 80066dc:	49a1      	ldr	r1, [pc, #644]	; (8006964 <setCommand+0x6c8>)
 80066de:	0020      	movs	r0, r4
 80066e0:	f00c fda8 	bl	8013234 <strncmp>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d033      	beq.n	8006750 <setCommand+0x4b4>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 80066e8:	2207      	movs	r2, #7
 80066ea:	499f      	ldr	r1, [pc, #636]	; (8006968 <setCommand+0x6cc>)
 80066ec:	0020      	movs	r0, r4
 80066ee:	f00c fda1 	bl	8013234 <strncmp>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	d100      	bne.n	80066f8 <setCommand+0x45c>
 80066f6:	e0f2      	b.n	80068de <setCommand+0x642>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 80066f8:	2209      	movs	r2, #9
 80066fa:	499c      	ldr	r1, [pc, #624]	; (800696c <setCommand+0x6d0>)
 80066fc:	0020      	movs	r0, r4
 80066fe:	f00c fd99 	bl	8013234 <strncmp>
 8006702:	2800      	cmp	r0, #0
 8006704:	d100      	bne.n	8006708 <setCommand+0x46c>
 8006706:	e0ee      	b.n	80068e6 <setCommand+0x64a>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006708:	2208      	movs	r2, #8
 800670a:	4999      	ldr	r1, [pc, #612]	; (8006970 <setCommand+0x6d4>)
 800670c:	0020      	movs	r0, r4
 800670e:	f00c fd91 	bl	8013234 <strncmp>
 8006712:	2800      	cmp	r0, #0
 8006714:	d100      	bne.n	8006718 <setCommand+0x47c>
 8006716:	e0ea      	b.n	80068ee <setCommand+0x652>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006718:	2206      	movs	r2, #6
 800671a:	4996      	ldr	r1, [pc, #600]	; (8006974 <setCommand+0x6d8>)
 800671c:	0020      	movs	r0, r4
 800671e:	f00c fd89 	bl	8013234 <strncmp>
 8006722:	2800      	cmp	r0, #0
 8006724:	d100      	bne.n	8006728 <setCommand+0x48c>
 8006726:	e0e6      	b.n	80068f6 <setCommand+0x65a>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006728:	2208      	movs	r2, #8
 800672a:	4993      	ldr	r1, [pc, #588]	; (8006978 <setCommand+0x6dc>)
 800672c:	0020      	movs	r0, r4
 800672e:	f00c fd81 	bl	8013234 <strncmp>
 8006732:	2800      	cmp	r0, #0
 8006734:	d100      	bne.n	8006738 <setCommand+0x49c>
 8006736:	e0e2      	b.n	80068fe <setCommand+0x662>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006738:	2206      	movs	r2, #6
 800673a:	4990      	ldr	r1, [pc, #576]	; (800697c <setCommand+0x6e0>)
 800673c:	0020      	movs	r0, r4
 800673e:	f00c fd79 	bl	8013234 <strncmp>
 8006742:	2800      	cmp	r0, #0
 8006744:	d000      	beq.n	8006748 <setCommand+0x4ac>
 8006746:	e0de      	b.n	8006906 <setCommand+0x66a>
			temp81 =SUNDAY;
 8006748:	2307      	movs	r3, #7
 800674a:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
 800674c:	2400      	movs	r4, #0
 800674e:	e002      	b.n	8006756 <setCommand+0x4ba>
			temp81 =MONDAY;
 8006750:	2301      	movs	r3, #1
 8006752:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
 8006754:	2400      	movs	r4, #0
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006756:	4b7f      	ldr	r3, [pc, #508]	; (8006954 <setCommand+0x6b8>)
 8006758:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800675a:	2207      	movs	r2, #7
 800675c:	4988      	ldr	r1, [pc, #544]	; (8006980 <setCommand+0x6e4>)
 800675e:	0028      	movs	r0, r5
 8006760:	f00c fd68 	bl	8013234 <strncmp>
 8006764:	2800      	cmp	r0, #0
 8006766:	d100      	bne.n	800676a <setCommand+0x4ce>
 8006768:	e0cf      	b.n	800690a <setCommand+0x66e>
 800676a:	2202      	movs	r2, #2
 800676c:	4985      	ldr	r1, [pc, #532]	; (8006984 <setCommand+0x6e8>)
 800676e:	0028      	movs	r0, r5
 8006770:	f00c fd60 	bl	8013234 <strncmp>
 8006774:	2800      	cmp	r0, #0
 8006776:	d100      	bne.n	800677a <setCommand+0x4de>
 8006778:	e0d9      	b.n	800692e <setCommand+0x692>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 800677a:	2208      	movs	r2, #8
 800677c:	4982      	ldr	r1, [pc, #520]	; (8006988 <setCommand+0x6ec>)
 800677e:	0028      	movs	r0, r5
 8006780:	f00c fd58 	bl	8013234 <strncmp>
 8006784:	2800      	cmp	r0, #0
 8006786:	d100      	bne.n	800678a <setCommand+0x4ee>
 8006788:	e0d3      	b.n	8006932 <setCommand+0x696>
 800678a:	2202      	movs	r2, #2
 800678c:	497f      	ldr	r1, [pc, #508]	; (800698c <setCommand+0x6f0>)
 800678e:	0028      	movs	r0, r5
 8006790:	f00c fd50 	bl	8013234 <strncmp>
 8006794:	2800      	cmp	r0, #0
 8006796:	d100      	bne.n	800679a <setCommand+0x4fe>
 8006798:	e0cd      	b.n	8006936 <setCommand+0x69a>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 800679a:	2205      	movs	r2, #5
 800679c:	497c      	ldr	r1, [pc, #496]	; (8006990 <setCommand+0x6f4>)
 800679e:	0028      	movs	r0, r5
 80067a0:	f00c fd48 	bl	8013234 <strncmp>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d100      	bne.n	80067aa <setCommand+0x50e>
 80067a8:	e0c7      	b.n	800693a <setCommand+0x69e>
 80067aa:	2202      	movs	r2, #2
 80067ac:	4979      	ldr	r1, [pc, #484]	; (8006994 <setCommand+0x6f8>)
 80067ae:	0028      	movs	r0, r5
 80067b0:	f00c fd40 	bl	8013234 <strncmp>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d100      	bne.n	80067ba <setCommand+0x51e>
 80067b8:	e0c1      	b.n	800693e <setCommand+0x6a2>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 80067ba:	2205      	movs	r2, #5
 80067bc:	4976      	ldr	r1, [pc, #472]	; (8006998 <setCommand+0x6fc>)
 80067be:	0028      	movs	r0, r5
 80067c0:	f00c fd38 	bl	8013234 <strncmp>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d100      	bne.n	80067ca <setCommand+0x52e>
 80067c8:	e0bb      	b.n	8006942 <setCommand+0x6a6>
 80067ca:	2202      	movs	r2, #2
 80067cc:	4973      	ldr	r1, [pc, #460]	; (800699c <setCommand+0x700>)
 80067ce:	0028      	movs	r0, r5
 80067d0:	f00c fd30 	bl	8013234 <strncmp>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d100      	bne.n	80067da <setCommand+0x53e>
 80067d8:	e0b5      	b.n	8006946 <setCommand+0x6aa>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 80067da:	2203      	movs	r2, #3
 80067dc:	4970      	ldr	r1, [pc, #448]	; (80069a0 <setCommand+0x704>)
 80067de:	0028      	movs	r0, r5
 80067e0:	f00c fd28 	bl	8013234 <strncmp>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d100      	bne.n	80067ea <setCommand+0x54e>
 80067e8:	e0af      	b.n	800694a <setCommand+0x6ae>
 80067ea:	2202      	movs	r2, #2
 80067ec:	496d      	ldr	r1, [pc, #436]	; (80069a4 <setCommand+0x708>)
 80067ee:	0028      	movs	r0, r5
 80067f0:	f00c fd20 	bl	8013234 <strncmp>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d100      	bne.n	80067fa <setCommand+0x55e>
 80067f8:	e0a9      	b.n	800694e <setCommand+0x6b2>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 80067fa:	2204      	movs	r2, #4
 80067fc:	496a      	ldr	r1, [pc, #424]	; (80069a8 <setCommand+0x70c>)
 80067fe:	0028      	movs	r0, r5
 8006800:	f00c fd18 	bl	8013234 <strncmp>
 8006804:	2800      	cmp	r0, #0
 8006806:	d100      	bne.n	800680a <setCommand+0x56e>
 8006808:	e0ee      	b.n	80069e8 <setCommand+0x74c>
 800680a:	2202      	movs	r2, #2
 800680c:	4967      	ldr	r1, [pc, #412]	; (80069ac <setCommand+0x710>)
 800680e:	0028      	movs	r0, r5
 8006810:	f00c fd10 	bl	8013234 <strncmp>
 8006814:	2800      	cmp	r0, #0
 8006816:	d100      	bne.n	800681a <setCommand+0x57e>
 8006818:	e0e8      	b.n	80069ec <setCommand+0x750>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 800681a:	2204      	movs	r2, #4
 800681c:	4964      	ldr	r1, [pc, #400]	; (80069b0 <setCommand+0x714>)
 800681e:	0028      	movs	r0, r5
 8006820:	f00c fd08 	bl	8013234 <strncmp>
 8006824:	2800      	cmp	r0, #0
 8006826:	d100      	bne.n	800682a <setCommand+0x58e>
 8006828:	e0e2      	b.n	80069f0 <setCommand+0x754>
 800682a:	2202      	movs	r2, #2
 800682c:	4961      	ldr	r1, [pc, #388]	; (80069b4 <setCommand+0x718>)
 800682e:	0028      	movs	r0, r5
 8006830:	f00c fd00 	bl	8013234 <strncmp>
 8006834:	2800      	cmp	r0, #0
 8006836:	d100      	bne.n	800683a <setCommand+0x59e>
 8006838:	e0dc      	b.n	80069f4 <setCommand+0x758>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 800683a:	2205      	movs	r2, #5
 800683c:	495e      	ldr	r1, [pc, #376]	; (80069b8 <setCommand+0x71c>)
 800683e:	0028      	movs	r0, r5
 8006840:	f00c fcf8 	bl	8013234 <strncmp>
 8006844:	2800      	cmp	r0, #0
 8006846:	d100      	bne.n	800684a <setCommand+0x5ae>
 8006848:	e0d6      	b.n	80069f8 <setCommand+0x75c>
 800684a:	2202      	movs	r2, #2
 800684c:	495b      	ldr	r1, [pc, #364]	; (80069bc <setCommand+0x720>)
 800684e:	0028      	movs	r0, r5
 8006850:	f00c fcf0 	bl	8013234 <strncmp>
 8006854:	2800      	cmp	r0, #0
 8006856:	d100      	bne.n	800685a <setCommand+0x5be>
 8006858:	e0d0      	b.n	80069fc <setCommand+0x760>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 800685a:	2209      	movs	r2, #9
 800685c:	4958      	ldr	r1, [pc, #352]	; (80069c0 <setCommand+0x724>)
 800685e:	0028      	movs	r0, r5
 8006860:	f00c fce8 	bl	8013234 <strncmp>
 8006864:	2800      	cmp	r0, #0
 8006866:	d100      	bne.n	800686a <setCommand+0x5ce>
 8006868:	e0ca      	b.n	8006a00 <setCommand+0x764>
 800686a:	2202      	movs	r2, #2
 800686c:	4955      	ldr	r1, [pc, #340]	; (80069c4 <setCommand+0x728>)
 800686e:	0028      	movs	r0, r5
 8006870:	f00c fce0 	bl	8013234 <strncmp>
 8006874:	2800      	cmp	r0, #0
 8006876:	d100      	bne.n	800687a <setCommand+0x5de>
 8006878:	e0c4      	b.n	8006a04 <setCommand+0x768>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 800687a:	2207      	movs	r2, #7
 800687c:	4952      	ldr	r1, [pc, #328]	; (80069c8 <setCommand+0x72c>)
 800687e:	0028      	movs	r0, r5
 8006880:	f00c fcd8 	bl	8013234 <strncmp>
 8006884:	2800      	cmp	r0, #0
 8006886:	d100      	bne.n	800688a <setCommand+0x5ee>
 8006888:	e0be      	b.n	8006a08 <setCommand+0x76c>
 800688a:	2202      	movs	r2, #2
 800688c:	494f      	ldr	r1, [pc, #316]	; (80069cc <setCommand+0x730>)
 800688e:	0028      	movs	r0, r5
 8006890:	f00c fcd0 	bl	8013234 <strncmp>
 8006894:	2800      	cmp	r0, #0
 8006896:	d100      	bne.n	800689a <setCommand+0x5fe>
 8006898:	e0b8      	b.n	8006a0c <setCommand+0x770>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 800689a:	2208      	movs	r2, #8
 800689c:	494c      	ldr	r1, [pc, #304]	; (80069d0 <setCommand+0x734>)
 800689e:	0028      	movs	r0, r5
 80068a0:	f00c fcc8 	bl	8013234 <strncmp>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d100      	bne.n	80068aa <setCommand+0x60e>
 80068a8:	e0b2      	b.n	8006a10 <setCommand+0x774>
 80068aa:	2202      	movs	r2, #2
 80068ac:	4949      	ldr	r1, [pc, #292]	; (80069d4 <setCommand+0x738>)
 80068ae:	0028      	movs	r0, r5
 80068b0:	f00c fcc0 	bl	8013234 <strncmp>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d100      	bne.n	80068ba <setCommand+0x61e>
 80068b8:	e0ac      	b.n	8006a14 <setCommand+0x778>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 80068ba:	2208      	movs	r2, #8
 80068bc:	4946      	ldr	r1, [pc, #280]	; (80069d8 <setCommand+0x73c>)
 80068be:	0028      	movs	r0, r5
 80068c0:	f00c fcb8 	bl	8013234 <strncmp>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d100      	bne.n	80068ca <setCommand+0x62e>
 80068c8:	e0a6      	b.n	8006a18 <setCommand+0x77c>
 80068ca:	2202      	movs	r2, #2
 80068cc:	4943      	ldr	r1, [pc, #268]	; (80069dc <setCommand+0x740>)
 80068ce:	0028      	movs	r0, r5
 80068d0:	f00c fcb0 	bl	8013234 <strncmp>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d000      	beq.n	80068da <setCommand+0x63e>
 80068d8:	e0d9      	b.n	8006a8e <setCommand+0x7f2>
			temp82 =DECEMBER;
 80068da:	250c      	movs	r5, #12
 80068dc:	e016      	b.n	800690c <setCommand+0x670>
			temp81 =TUESDAY;
 80068de:	2302      	movs	r3, #2
 80068e0:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
 80068e2:	2400      	movs	r4, #0
 80068e4:	e737      	b.n	8006756 <setCommand+0x4ba>
			temp81 =WEDNESDAY;
 80068e6:	2303      	movs	r3, #3
 80068e8:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
 80068ea:	2400      	movs	r4, #0
 80068ec:	e733      	b.n	8006756 <setCommand+0x4ba>
			temp81 =THURSDAY;
 80068ee:	2304      	movs	r3, #4
 80068f0:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
 80068f2:	2400      	movs	r4, #0
 80068f4:	e72f      	b.n	8006756 <setCommand+0x4ba>
			temp81 =FRIDAY;
 80068f6:	2305      	movs	r3, #5
 80068f8:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
 80068fa:	2400      	movs	r4, #0
 80068fc:	e72b      	b.n	8006756 <setCommand+0x4ba>
			temp81 =SATURDAY;
 80068fe:	2306      	movs	r3, #6
 8006900:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
 8006902:	2400      	movs	r4, #0
 8006904:	e727      	b.n	8006756 <setCommand+0x4ba>
			result =BOS_ERR_WrongValue;
 8006906:	2468      	movs	r4, #104	; 0x68
 8006908:	e725      	b.n	8006756 <setCommand+0x4ba>
			temp82 =JANUARY;
 800690a:	2501      	movs	r5, #1
		if(result == BOS_OK){
 800690c:	2c00      	cmp	r4, #0
 800690e:	d000      	beq.n	8006912 <setCommand+0x676>
 8006910:	e09b      	b.n	8006a4a <setCommand+0x7ae>
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006912:	1e7b      	subs	r3, r7, #1
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b1e      	cmp	r3, #30
 8006918:	d900      	bls.n	800691c <setCommand+0x680>
 800691a:	e0be      	b.n	8006a9a <setCommand+0x7fe>
 800691c:	4b30      	ldr	r3, [pc, #192]	; (80069e0 <setCommand+0x744>)
 800691e:	4599      	cmp	r9, r3
 8006920:	d800      	bhi.n	8006924 <setCommand+0x688>
 8006922:	e0bc      	b.n	8006a9e <setCommand+0x802>
 8006924:	4b2f      	ldr	r3, [pc, #188]	; (80069e4 <setCommand+0x748>)
 8006926:	4599      	cmp	r9, r3
 8006928:	d978      	bls.n	8006a1c <setCommand+0x780>
				result =BOS_ERR_WrongValue;
 800692a:	2468      	movs	r4, #104	; 0x68
 800692c:	e4e3      	b.n	80062f6 <setCommand+0x5a>
			temp82 =JANUARY;
 800692e:	2501      	movs	r5, #1
 8006930:	e7ec      	b.n	800690c <setCommand+0x670>
			temp82 =FEBRUARY;
 8006932:	2502      	movs	r5, #2
 8006934:	e7ea      	b.n	800690c <setCommand+0x670>
 8006936:	2502      	movs	r5, #2
 8006938:	e7e8      	b.n	800690c <setCommand+0x670>
			temp82 =MARCH;
 800693a:	2503      	movs	r5, #3
 800693c:	e7e6      	b.n	800690c <setCommand+0x670>
 800693e:	2503      	movs	r5, #3
 8006940:	e7e4      	b.n	800690c <setCommand+0x670>
			temp82 =APRIL;
 8006942:	2504      	movs	r5, #4
 8006944:	e7e2      	b.n	800690c <setCommand+0x670>
 8006946:	2504      	movs	r5, #4
 8006948:	e7e0      	b.n	800690c <setCommand+0x670>
			temp82 =MAY;
 800694a:	2505      	movs	r5, #5
 800694c:	e7de      	b.n	800690c <setCommand+0x670>
 800694e:	2505      	movs	r5, #5
 8006950:	e7dc      	b.n	800690c <setCommand+0x670>
 8006952:	46c0      	nop			; (mov r8, r8)
 8006954:	200017d4 	.word	0x200017d4
 8006958:	08018ffc 	.word	0x08018ffc
 800695c:	08019000 	.word	0x08019000
 8006960:	20006848 	.word	0x20006848
 8006964:	0801900c 	.word	0x0801900c
 8006968:	08019014 	.word	0x08019014
 800696c:	0801901c 	.word	0x0801901c
 8006970:	08019028 	.word	0x08019028
 8006974:	08019034 	.word	0x08019034
 8006978:	0801903c 	.word	0x0801903c
 800697c:	08019048 	.word	0x08019048
 8006980:	08019050 	.word	0x08019050
 8006984:	08019058 	.word	0x08019058
 8006988:	0801905c 	.word	0x0801905c
 800698c:	08019068 	.word	0x08019068
 8006990:	0801906c 	.word	0x0801906c
 8006994:	08019074 	.word	0x08019074
 8006998:	08019078 	.word	0x08019078
 800699c:	08019080 	.word	0x08019080
 80069a0:	08019084 	.word	0x08019084
 80069a4:	08019088 	.word	0x08019088
 80069a8:	0801908c 	.word	0x0801908c
 80069ac:	08019094 	.word	0x08019094
 80069b0:	08019098 	.word	0x08019098
 80069b4:	080190a0 	.word	0x080190a0
 80069b8:	080190a4 	.word	0x080190a4
 80069bc:	080190ac 	.word	0x080190ac
 80069c0:	080190b0 	.word	0x080190b0
 80069c4:	080190bc 	.word	0x080190bc
 80069c8:	080190c0 	.word	0x080190c0
 80069cc:	080190c8 	.word	0x080190c8
 80069d0:	080190cc 	.word	0x080190cc
 80069d4:	080190d8 	.word	0x080190d8
 80069d8:	080190dc 	.word	0x080190dc
 80069dc:	080190e8 	.word	0x080190e8
 80069e0:	000007cf 	.word	0x000007cf
 80069e4:	00000834 	.word	0x00000834
			temp82 =JUNE;
 80069e8:	2506      	movs	r5, #6
 80069ea:	e78f      	b.n	800690c <setCommand+0x670>
 80069ec:	2506      	movs	r5, #6
 80069ee:	e78d      	b.n	800690c <setCommand+0x670>
			temp82 =JULY;
 80069f0:	2507      	movs	r5, #7
 80069f2:	e78b      	b.n	800690c <setCommand+0x670>
 80069f4:	2507      	movs	r5, #7
 80069f6:	e789      	b.n	800690c <setCommand+0x670>
			temp82 =AUGUST;
 80069f8:	2508      	movs	r5, #8
 80069fa:	e787      	b.n	800690c <setCommand+0x670>
 80069fc:	2508      	movs	r5, #8
 80069fe:	e785      	b.n	800690c <setCommand+0x670>
			temp82 =SEPTEMBER;
 8006a00:	2509      	movs	r5, #9
 8006a02:	e783      	b.n	800690c <setCommand+0x670>
 8006a04:	2509      	movs	r5, #9
 8006a06:	e781      	b.n	800690c <setCommand+0x670>
			temp82 =OCTOBER;
 8006a08:	250a      	movs	r5, #10
 8006a0a:	e77f      	b.n	800690c <setCommand+0x670>
 8006a0c:	250a      	movs	r5, #10
 8006a0e:	e77d      	b.n	800690c <setCommand+0x670>
			temp82 =NOVEMBER;
 8006a10:	250b      	movs	r5, #11
 8006a12:	e77b      	b.n	800690c <setCommand+0x670>
 8006a14:	250b      	movs	r5, #11
 8006a16:	e779      	b.n	800690c <setCommand+0x670>
			temp82 =DECEMBER;
 8006a18:	250c      	movs	r5, #12
 8006a1a:	e777      	b.n	800690c <setCommand+0x670>
				GetTimeDate();
 8006a1c:	f006 fb82 	bl	800d124 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006a20:	4b26      	ldr	r3, [pc, #152]	; (8006abc <setCommand+0x820>)
 8006a22:	7c1a      	ldrb	r2, [r3, #16]
 8006a24:	7c59      	ldrb	r1, [r3, #17]
 8006a26:	7c98      	ldrb	r0, [r3, #18]
 8006a28:	7cdc      	ldrb	r4, [r3, #19]
 8006a2a:	7b1b      	ldrb	r3, [r3, #12]
 8006a2c:	b25b      	sxtb	r3, r3
 8006a2e:	9304      	str	r3, [sp, #16]
 8006a30:	9403      	str	r4, [sp, #12]
 8006a32:	9002      	str	r0, [sp, #8]
 8006a34:	9101      	str	r1, [sp, #4]
 8006a36:	9200      	str	r2, [sp, #0]
 8006a38:	4653      	mov	r3, sl
 8006a3a:	464a      	mov	r2, r9
 8006a3c:	0039      	movs	r1, r7
 8006a3e:	0028      	movs	r0, r5
 8006a40:	f006 fb16 	bl	800d070 <BOS_CalendarConfig>
 8006a44:	0004      	movs	r4, r0
 8006a46:	e000      	b.n	8006a4a <setCommand+0x7ae>
				result =BOS_ERR_WrongValue;
 8006a48:	2468      	movs	r4, #104	; 0x68
	if(result == BOS_OK){
 8006a4a:	2c00      	cmp	r4, #0
 8006a4c:	d000      	beq.n	8006a50 <setCommand+0x7b4>
 8006a4e:	e452      	b.n	80062f6 <setCommand+0x5a>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006a50:	491b      	ldr	r1, [pc, #108]	; (8006ac0 <setCommand+0x824>)
 8006a52:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8006a54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a56:	18d3      	adds	r3, r2, r3
 8006a58:	2000      	movs	r0, #0
 8006a5a:	7018      	strb	r0, [r3, #0]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006a5c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006a5e:	4919      	ldr	r1, [pc, #100]	; (8006ac4 <setCommand+0x828>)
 8006a60:	0030      	movs	r0, r6
 8006a62:	f00c fba3 	bl	80131ac <sprintf>
		if(extraMessage == 1){
 8006a66:	2c01      	cmp	r4, #1
 8006a68:	d000      	beq.n	8006a6c <setCommand+0x7d0>
 8006a6a:	e44a      	b.n	8006302 <setCommand+0x66>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006a6c:	0030      	movs	r0, r6
 8006a6e:	f7f9 fb53 	bl	8000118 <strlen>
 8006a72:	1830      	adds	r0, r6, r0
 8006a74:	2230      	movs	r2, #48	; 0x30
 8006a76:	4914      	ldr	r1, [pc, #80]	; (8006ac8 <setCommand+0x82c>)
 8006a78:	f00c f995 	bl	8012da6 <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006a7c:	0030      	movs	r0, r6
 8006a7e:	f7f9 fb4b 	bl	8000118 <strlen>
 8006a82:	1830      	adds	r0, r6, r0
 8006a84:	22b2      	movs	r2, #178	; 0xb2
 8006a86:	4911      	ldr	r1, [pc, #68]	; (8006acc <setCommand+0x830>)
 8006a88:	f00c f98d 	bl	8012da6 <memcpy>
 8006a8c:	e439      	b.n	8006302 <setCommand+0x66>
			result =BOS_ERR_WrongValue;
 8006a8e:	2468      	movs	r4, #104	; 0x68
 8006a90:	e7db      	b.n	8006a4a <setCommand+0x7ae>
				result =BOS_ERR_WrongValue;
 8006a92:	2468      	movs	r4, #104	; 0x68
 8006a94:	e42f      	b.n	80062f6 <setCommand+0x5a>
 8006a96:	2468      	movs	r4, #104	; 0x68
 8006a98:	e42d      	b.n	80062f6 <setCommand+0x5a>
				result =BOS_ERR_WrongValue;
 8006a9a:	2468      	movs	r4, #104	; 0x68
 8006a9c:	e42b      	b.n	80062f6 <setCommand+0x5a>
 8006a9e:	2468      	movs	r4, #104	; 0x68
 8006aa0:	e429      	b.n	80062f6 <setCommand+0x5a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006aa2:	2213      	movs	r2, #19
 8006aa4:	490a      	ldr	r1, [pc, #40]	; (8006ad0 <setCommand+0x834>)
 8006aa6:	0030      	movs	r0, r6
 8006aa8:	f00c f97d 	bl	8012da6 <memcpy>
 8006aac:	e429      	b.n	8006302 <setCommand+0x66>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006aae:	220f      	movs	r2, #15
 8006ab0:	4908      	ldr	r1, [pc, #32]	; (8006ad4 <setCommand+0x838>)
 8006ab2:	0030      	movs	r0, r6
 8006ab4:	f00c f977 	bl	8012da6 <memcpy>
 8006ab8:	e423      	b.n	8006302 <setCommand+0x66>
 8006aba:	46c0      	nop			; (mov r8, r8)
 8006abc:	20006848 	.word	0x20006848
 8006ac0:	200017d4 	.word	0x200017d4
 8006ac4:	080190ec 	.word	0x080190ec
 8006ac8:	08019100 	.word	0x08019100
 8006acc:	08019130 	.word	0x08019130
 8006ad0:	08018f2c 	.word	0x08018f2c
 8006ad4:	08018f98 	.word	0x08018f98

08006ad8 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ad8:	b530      	push	{r4, r5, lr}
 8006ada:	b083      	sub	sp, #12
 8006adc:	0005      	movs	r5, r0
 8006ade:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006ae4:	aa01      	add	r2, sp, #4
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	f007 f880 	bl	800dbec <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006aec:	2300      	movs	r3, #0
 8006aee:	56c3      	ldrsb	r3, [r0, r3]
 8006af0:	2b70      	cmp	r3, #112	; 0x70
 8006af2:	d008      	beq.n	8006b06 <removebuttonCommand+0x2e>
	uint8_t port =0;
 8006af4:	2400      	movs	r4, #0
	result =RemovePortButton(port);
 8006af6:	0020      	movs	r0, r4
 8006af8:	f005 f8ca 	bl	800bc90 <RemovePortButton>
	if(result == BOS_OK){
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d007      	beq.n	8006b10 <removebuttonCommand+0x38>
}
 8006b00:	2000      	movs	r0, #0
 8006b02:	b003      	add	sp, #12
 8006b04:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006b06:	3001      	adds	r0, #1
 8006b08:	f00b fec3 	bl	8012892 <atol>
 8006b0c:	b2c4      	uxtb	r4, r0
 8006b0e:	e7f2      	b.n	8006af6 <removebuttonCommand+0x1e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006b10:	0023      	movs	r3, r4
 8006b12:	0022      	movs	r2, r4
 8006b14:	4902      	ldr	r1, [pc, #8]	; (8006b20 <removebuttonCommand+0x48>)
 8006b16:	0028      	movs	r0, r5
 8006b18:	f00c fb48 	bl	80131ac <sprintf>
 8006b1c:	e7f0      	b.n	8006b00 <removebuttonCommand+0x28>
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	080191e4 	.word	0x080191e4

08006b24 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b26:	b085      	sub	sp, #20
 8006b28:	0006      	movs	r6, r0
 8006b2a:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9303      	str	r3, [sp, #12]
 8006b30:	9302      	str	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b32:	aa03      	add	r2, sp, #12
 8006b34:	2101      	movs	r1, #1
 8006b36:	0028      	movs	r0, r5
 8006b38:	f007 f858 	bl	800dbec <FreeRTOS_CLIGetParameter>
 8006b3c:	0004      	movs	r4, r0
 8006b3e:	4b26      	ldr	r3, [pc, #152]	; (8006bd8 <addbuttonCommand+0xb4>)
 8006b40:	64d8      	str	r0, [r3, #76]	; 0x4c
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006b42:	9f03      	ldr	r7, [sp, #12]
 8006b44:	003a      	movs	r2, r7
 8006b46:	4925      	ldr	r1, [pc, #148]	; (8006bdc <addbuttonCommand+0xb8>)
 8006b48:	f00c fb74 	bl	8013234 <strncmp>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d016      	beq.n	8006b7e <addbuttonCommand+0x5a>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006b50:	003a      	movs	r2, r7
 8006b52:	4923      	ldr	r1, [pc, #140]	; (8006be0 <addbuttonCommand+0xbc>)
 8006b54:	0020      	movs	r0, r4
 8006b56:	f00c fb6d 	bl	8013234 <strncmp>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d023      	beq.n	8006ba6 <addbuttonCommand+0x82>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006b5e:	003a      	movs	r2, r7
 8006b60:	4920      	ldr	r1, [pc, #128]	; (8006be4 <addbuttonCommand+0xc0>)
 8006b62:	0020      	movs	r0, r4
 8006b64:	f00c fb66 	bl	8013234 <strncmp>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d01e      	beq.n	8006baa <addbuttonCommand+0x86>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006b6c:	003a      	movs	r2, r7
 8006b6e:	491e      	ldr	r1, [pc, #120]	; (8006be8 <addbuttonCommand+0xc4>)
 8006b70:	0020      	movs	r0, r4
 8006b72:	f00c fb5f 	bl	8013234 <strncmp>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d019      	beq.n	8006bae <addbuttonCommand+0x8a>
	uint8_t port =0, type =0;
 8006b7a:	2700      	movs	r7, #0
 8006b7c:	e000      	b.n	8006b80 <addbuttonCommand+0x5c>
		type =MOMENTARY_NO;
 8006b7e:	2701      	movs	r7, #1
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006b80:	aa02      	add	r2, sp, #8
 8006b82:	2102      	movs	r1, #2
 8006b84:	0028      	movs	r0, r5
 8006b86:	f007 f831 	bl	800dbec <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	56c3      	ldrsb	r3, [r0, r3]
 8006b8e:	2b70      	cmp	r3, #112	; 0x70
 8006b90:	d00f      	beq.n	8006bb2 <addbuttonCommand+0x8e>
	uint8_t port =0, type =0;
 8006b92:	2400      	movs	r4, #0
	result =AddPortButton(type,port);
 8006b94:	0021      	movs	r1, r4
 8006b96:	0038      	movs	r0, r7
 8006b98:	f004 ffe8 	bl	800bb6c <AddPortButton>
	if(result == BOS_OK){
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d00d      	beq.n	8006bbc <addbuttonCommand+0x98>
}
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	b005      	add	sp, #20
 8006ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		type =MOMENTARY_NC;
 8006ba6:	2702      	movs	r7, #2
 8006ba8:	e7ea      	b.n	8006b80 <addbuttonCommand+0x5c>
		type =ONOFF_NO;
 8006baa:	2703      	movs	r7, #3
 8006bac:	e7e8      	b.n	8006b80 <addbuttonCommand+0x5c>
		type =ONOFF_NC;
 8006bae:	2704      	movs	r7, #4
 8006bb0:	e7e6      	b.n	8006b80 <addbuttonCommand+0x5c>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	f00b fe6d 	bl	8012892 <atol>
 8006bb8:	b2c4      	uxtb	r4, r0
 8006bba:	e7eb      	b.n	8006b94 <addbuttonCommand+0x70>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006bbc:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <addbuttonCommand+0xb4>)
 8006bbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bc0:	9b03      	ldr	r3, [sp, #12]
 8006bc2:	18d3      	adds	r3, r2, r3
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	7019      	strb	r1, [r3, #0]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006bc8:	9400      	str	r4, [sp, #0]
 8006bca:	0023      	movs	r3, r4
 8006bcc:	4907      	ldr	r1, [pc, #28]	; (8006bec <addbuttonCommand+0xc8>)
 8006bce:	0030      	movs	r0, r6
 8006bd0:	f00c faec 	bl	80131ac <sprintf>
 8006bd4:	e7e4      	b.n	8006ba0 <addbuttonCommand+0x7c>
 8006bd6:	46c0      	nop			; (mov r8, r8)
 8006bd8:	200017d4 	.word	0x200017d4
 8006bdc:	0801920c 	.word	0x0801920c
 8006be0:	0801921c 	.word	0x0801921c
 8006be4:	0801922c 	.word	0x0801922c
 8006be8:	08019238 	.word	0x08019238
 8006bec:	08019244 	.word	0x08019244

08006bf0 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bf2:	46de      	mov	lr, fp
 8006bf4:	464f      	mov	r7, r9
 8006bf6:	4646      	mov	r6, r8
 8006bf8:	b5c0      	push	{r6, r7, lr}
 8006bfa:	b098      	sub	sp, #96	; 0x60
 8006bfc:	9007      	str	r0, [sp, #28]
 8006bfe:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c04:	9316      	str	r3, [sp, #88]	; 0x58
 8006c06:	9315      	str	r3, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006c08:	9314      	str	r3, [sp, #80]	; 0x50
 8006c0a:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c0c:	9312      	str	r3, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 =0;
 8006c0e:	9311      	str	r3, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006c10:	220a      	movs	r2, #10
 8006c12:	2100      	movs	r1, #0
 8006c14:	a80e      	add	r0, sp, #56	; 0x38
 8006c16:	f00c f8cf 	bl	8012db8 <memset>
 8006c1a:	220a      	movs	r2, #10
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	a80b      	add	r0, sp, #44	; 0x2c
 8006c20:	f00c f8ca 	bl	8012db8 <memset>
 8006c24:	220a      	movs	r2, #10
 8006c26:	2100      	movs	r1, #0
 8006c28:	a808      	add	r0, sp, #32
 8006c2a:	f00c f8c5 	bl	8012db8 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c2e:	aa17      	add	r2, sp, #92	; 0x5c
 8006c30:	2101      	movs	r1, #1
 8006c32:	0020      	movs	r0, r4
 8006c34:	f006 ffda 	bl	800dbec <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006c38:	2300      	movs	r3, #0
 8006c3a:	56c3      	ldrsb	r3, [r0, r3]
 8006c3c:	2b50      	cmp	r3, #80	; 0x50
 8006c3e:	d047      	beq.n	8006cd0 <scastCommand+0xe0>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006c40:	2300      	movs	r3, #0
 8006c42:	9306      	str	r3, [sp, #24]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c44:	aa16      	add	r2, sp, #88	; 0x58
 8006c46:	2102      	movs	r1, #2
 8006c48:	0020      	movs	r0, r4
 8006c4a:	f006 ffcf 	bl	800dbec <FreeRTOS_CLIGetParameter>
 8006c4e:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006c50:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006c52:	a80e      	add	r0, sp, #56	; 0x38
 8006c54:	f00c faff 	bl	8013256 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006c58:	a80e      	add	r0, sp, #56	; 0x38
 8006c5a:	f7fd fa9f 	bl	800419c <GetID>
 8006c5e:	b2c3      	uxtb	r3, r0
 8006c60:	4698      	mov	r8, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006c62:	aa15      	add	r2, sp, #84	; 0x54
 8006c64:	2103      	movs	r1, #3
 8006c66:	0020      	movs	r0, r4
 8006c68:	f006 ffc0 	bl	800dbec <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	56c3      	ldrsb	r3, [r0, r3]
 8006c70:	2b70      	cmp	r3, #112	; 0x70
 8006c72:	d033      	beq.n	8006cdc <scastCommand+0xec>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006c74:	2700      	movs	r7, #0
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006c76:	aa14      	add	r2, sp, #80	; 0x50
 8006c78:	2104      	movs	r1, #4
 8006c7a:	0020      	movs	r0, r4
 8006c7c:	f006 ffb6 	bl	800dbec <FreeRTOS_CLIGetParameter>
 8006c80:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006c82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c84:	a80b      	add	r0, sp, #44	; 0x2c
 8006c86:	f00c fae6 	bl	8013256 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006c8a:	a80b      	add	r0, sp, #44	; 0x2c
 8006c8c:	f7fd fa86 	bl	800419c <GetID>
 8006c90:	b2c3      	uxtb	r3, r0
 8006c92:	4699      	mov	r9, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006c94:	aa13      	add	r2, sp, #76	; 0x4c
 8006c96:	2105      	movs	r1, #5
 8006c98:	0020      	movs	r0, r4
 8006c9a:	f006 ffa7 	bl	800dbec <FreeRTOS_CLIGetParameter>
 8006c9e:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006ca0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8006ca2:	0032      	movs	r2, r6
 8006ca4:	4930      	ldr	r1, [pc, #192]	; (8006d68 <scastCommand+0x178>)
 8006ca6:	f00c fac5 	bl	8013234 <strncmp>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d01b      	beq.n	8006ce6 <scastCommand+0xf6>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006cae:	0032      	movs	r2, r6
 8006cb0:	492e      	ldr	r1, [pc, #184]	; (8006d6c <scastCommand+0x17c>)
 8006cb2:	0028      	movs	r0, r5
 8006cb4:	f00c fabe 	bl	8013234 <strncmp>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d040      	beq.n	8006d3e <scastCommand+0x14e>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006cbc:	0032      	movs	r2, r6
 8006cbe:	492c      	ldr	r1, [pc, #176]	; (8006d70 <scastCommand+0x180>)
 8006cc0:	0028      	movs	r0, r5
 8006cc2:	f00c fab7 	bl	8013234 <strncmp>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d03c      	beq.n	8006d44 <scastCommand+0x154>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	469b      	mov	fp, r3
 8006cce:	e00c      	b.n	8006cea <scastCommand+0xfa>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	f00b fdde 	bl	8012892 <atol>
 8006cd6:	b2c3      	uxtb	r3, r0
 8006cd8:	9306      	str	r3, [sp, #24]
 8006cda:	e7b3      	b.n	8006c44 <scastCommand+0x54>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006cdc:	3001      	adds	r0, #1
 8006cde:	f00b fdd8 	bl	8012892 <atol>
 8006ce2:	b2c7      	uxtb	r7, r0
 8006ce4:	e7c7      	b.n	8006c76 <scastCommand+0x86>
		direction =FORWARD;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	469b      	mov	fp, r3
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006cea:	0032      	movs	r2, r6
 8006cec:	0029      	movs	r1, r5
 8006cee:	a808      	add	r0, sp, #32
 8006cf0:	f00c fab1 	bl	8013256 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006cf4:	aa12      	add	r2, sp, #72	; 0x48
 8006cf6:	2106      	movs	r1, #6
 8006cf8:	0020      	movs	r0, r4
 8006cfa:	f006 ff77 	bl	800dbec <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006cfe:	f00b fdc8 	bl	8012892 <atol>
 8006d02:	0005      	movs	r5, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006d04:	aa11      	add	r2, sp, #68	; 0x44
 8006d06:	2107      	movs	r1, #7
 8006d08:	0020      	movs	r0, r4
 8006d0a:	f006 ff6f 	bl	800dbec <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006d0e:	f00b fdc0 	bl	8012892 <atol>
 8006d12:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006d14:	2300      	movs	r3, #0
 8006d16:	9303      	str	r3, [sp, #12]
 8006d18:	9002      	str	r0, [sp, #8]
 8006d1a:	9501      	str	r5, [sp, #4]
 8006d1c:	465b      	mov	r3, fp
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	464b      	mov	r3, r9
 8006d22:	003a      	movs	r2, r7
 8006d24:	4641      	mov	r1, r8
 8006d26:	9806      	ldr	r0, [sp, #24]
 8006d28:	f001 faa2 	bl	8008270 <StartScastDMAStream>
	if(result == BOS_OK){
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d00c      	beq.n	8006d4a <scastCommand+0x15a>
}
 8006d30:	2000      	movs	r0, #0
 8006d32:	b018      	add	sp, #96	; 0x60
 8006d34:	bc1c      	pop	{r2, r3, r4}
 8006d36:	4690      	mov	r8, r2
 8006d38:	4699      	mov	r9, r3
 8006d3a:	46a3      	mov	fp, r4
 8006d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		direction =BACKWARD;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	469b      	mov	fp, r3
 8006d42:	e7d2      	b.n	8006cea <scastCommand+0xfa>
		direction =BIDIRECTIONAL;
 8006d44:	2302      	movs	r3, #2
 8006d46:	469b      	mov	fp, r3
 8006d48:	e7cf      	b.n	8006cea <scastCommand+0xfa>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006d4a:	9404      	str	r4, [sp, #16]
 8006d4c:	9503      	str	r5, [sp, #12]
 8006d4e:	ab0b      	add	r3, sp, #44	; 0x2c
 8006d50:	9302      	str	r3, [sp, #8]
 8006d52:	9701      	str	r7, [sp, #4]
 8006d54:	ab0e      	add	r3, sp, #56	; 0x38
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	9b06      	ldr	r3, [sp, #24]
 8006d5a:	aa08      	add	r2, sp, #32
 8006d5c:	4905      	ldr	r1, [pc, #20]	; (8006d74 <scastCommand+0x184>)
 8006d5e:	9807      	ldr	r0, [sp, #28]
 8006d60:	f00c fa24 	bl	80131ac <sprintf>
 8006d64:	e7e4      	b.n	8006d30 <scastCommand+0x140>
 8006d66:	46c0      	nop			; (mov r8, r8)
 8006d68:	08019278 	.word	0x08019278
 8006d6c:	08019280 	.word	0x08019280
 8006d70:	0801928c 	.word	0x0801928c
 8006d74:	0801929c 	.word	0x0801929c

08006d78 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	0004      	movs	r4, r0
	if(N > 1)
 8006d7e:	4b26      	ldr	r3, [pc, #152]	; (8006e18 <infoCommand+0xa0>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d832      	bhi.n	8006dec <infoCommand+0x74>
	BOS_Status result =BOS_OK;
 8006d86:	2700      	movs	r7, #0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006d88:	4b23      	ldr	r3, [pc, #140]	; (8006e18 <infoCommand+0xa0>)
 8006d8a:	781a      	ldrb	r2, [r3, #0]
 8006d8c:	4923      	ldr	r1, [pc, #140]	; (8006e1c <infoCommand+0xa4>)
 8006d8e:	0020      	movs	r0, r4
 8006d90:	f00c fa0c 	bl	80131ac <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006d94:	0020      	movs	r0, r4
 8006d96:	f7f9 f9bf 	bl	8000118 <strlen>
 8006d9a:	b282      	uxth	r2, r0
 8006d9c:	4d20      	ldr	r5, [pc, #128]	; (8006e20 <infoCommand+0xa8>)
 8006d9e:	7828      	ldrb	r0, [r5, #0]
 8006da0:	2601      	movs	r6, #1
 8006da2:	4276      	negs	r6, r6
 8006da4:	9600      	str	r6, [sp, #0]
 8006da6:	2332      	movs	r3, #50	; 0x32
 8006da8:	0021      	movs	r1, r4
 8006daa:	f006 fc79 	bl	800d6a0 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006dae:	2213      	movs	r2, #19
 8006db0:	491c      	ldr	r1, [pc, #112]	; (8006e24 <infoCommand+0xac>)
 8006db2:	0020      	movs	r0, r4
 8006db4:	f00b fff7 	bl	8012da6 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006db8:	0020      	movs	r0, r4
 8006dba:	f7f9 f9ad 	bl	8000118 <strlen>
 8006dbe:	b282      	uxth	r2, r0
 8006dc0:	7828      	ldrb	r0, [r5, #0]
 8006dc2:	9600      	str	r6, [sp, #0]
 8006dc4:	2332      	movs	r3, #50	; 0x32
 8006dc6:	0021      	movs	r1, r4
 8006dc8:	f006 fc6a 	bl	800d6a0 <writePxMutex>
	DisplayTopology(PcPort);
 8006dcc:	7828      	ldrb	r0, [r5, #0]
 8006dce:	f7fc ff31 	bl	8003c34 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006dd2:	7828      	ldrb	r0, [r5, #0]
 8006dd4:	f7fc fffe 	bl	8003dd4 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006dd8:	2f02      	cmp	r7, #2
 8006dda:	d00b      	beq.n	8006df4 <infoCommand+0x7c>
	sprintf((char* )pcWriteBuffer," ");
 8006ddc:	2202      	movs	r2, #2
 8006dde:	4912      	ldr	r1, [pc, #72]	; (8006e28 <infoCommand+0xb0>)
 8006de0:	0020      	movs	r0, r4
 8006de2:	f00b ffe0 	bl	8012da6 <memcpy>
}
 8006de6:	2000      	movs	r0, #0
 8006de8:	b003      	add	sp, #12
 8006dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result =ReadPortsDir();
 8006dec:	f006 fce8 	bl	800d7c0 <ReadPortsDir>
 8006df0:	0007      	movs	r7, r0
 8006df2:	e7c9      	b.n	8006d88 <infoCommand+0x10>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006df4:	2244      	movs	r2, #68	; 0x44
 8006df6:	490d      	ldr	r1, [pc, #52]	; (8006e2c <infoCommand+0xb4>)
 8006df8:	0020      	movs	r0, r4
 8006dfa:	f00b ffd4 	bl	8012da6 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006dfe:	0020      	movs	r0, r4
 8006e00:	f7f9 f98a 	bl	8000118 <strlen>
 8006e04:	b282      	uxth	r2, r0
 8006e06:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <infoCommand+0xa8>)
 8006e08:	7818      	ldrb	r0, [r3, #0]
 8006e0a:	0033      	movs	r3, r6
 8006e0c:	9600      	str	r6, [sp, #0]
 8006e0e:	3333      	adds	r3, #51	; 0x33
 8006e10:	0021      	movs	r1, r4
 8006e12:	f006 fc45 	bl	800d6a0 <writePxMutex>
 8006e16:	e7e1      	b.n	8006ddc <infoCommand+0x64>
 8006e18:	20000008 	.word	0x20000008
 8006e1c:	08019324 	.word	0x08019324
 8006e20:	20000c28 	.word	0x20000c28
 8006e24:	08019340 	.word	0x08019340
 8006e28:	08017e6c 	.word	0x08017e6c
 8006e2c:	08019354 	.word	0x08019354

08006e30 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e30:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 8006e32:	2000      	movs	r0, #0
 8006e34:	f7fd f83a 	bl	8003eac <DisplayModuleStatus>
}
 8006e38:	2000      	movs	r0, #0
 8006e3a:	bd10      	pop	{r4, pc}

08006e3c <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e3e:	46ce      	mov	lr, r9
 8006e40:	b500      	push	{lr}
 8006e42:	b090      	sub	sp, #64	; 0x40
 8006e44:	0005      	movs	r5, r0
 8006e46:	0016      	movs	r6, r2
 8006e48:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8006e4a:	2227      	movs	r2, #39	; 0x27
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	a806      	add	r0, sp, #24
 8006e50:	f00b ffb2 	bl	8012db8 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006e54:	220a      	movs	r2, #10
 8006e56:	2100      	movs	r1, #0
 8006e58:	a803      	add	r0, sp, #12
 8006e5a:	f00b ffad 	bl	8012db8 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e5e:	4c5c      	ldr	r4, [pc, #368]	; (8006fd0 <groupCommand+0x194>)
 8006e60:	0023      	movs	r3, r4
 8006e62:	3350      	adds	r3, #80	; 0x50
 8006e64:	001a      	movs	r2, r3
 8006e66:	2101      	movs	r1, #1
 8006e68:	0030      	movs	r0, r6
 8006e6a:	f006 febf 	bl	800dbec <FreeRTOS_CLIGetParameter>
 8006e6e:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006e70:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006e72:	a803      	add	r0, sp, #12
 8006e74:	f00c f9ef 	bl	8013256 <strncpy>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006e78:	2400      	movs	r4, #0
 8006e7a:	2c09      	cmp	r4, #9
 8006e7c:	d80c      	bhi.n	8006e98 <groupCommand+0x5c>
		if(!strcmp(alias,groupAlias[i])){
 8006e7e:	00a3      	lsls	r3, r4, #2
 8006e80:	191b      	adds	r3, r3, r4
 8006e82:	0059      	lsls	r1, r3, #1
 8006e84:	4b53      	ldr	r3, [pc, #332]	; (8006fd4 <groupCommand+0x198>)
 8006e86:	18c9      	adds	r1, r1, r3
 8006e88:	a803      	add	r0, sp, #12
 8006e8a:	f7f9 f93b 	bl	8000104 <strcmp>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d017      	beq.n	8006ec2 <groupCommand+0x86>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006e92:	3401      	adds	r4, #1
 8006e94:	b2e4      	uxtb	r4, r4
 8006e96:	e7f0      	b.n	8006e7a <groupCommand+0x3e>
	type =1;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	4699      	mov	r9, r3
	count =2;
 8006e9c:	4c4c      	ldr	r4, [pc, #304]	; (8006fd0 <groupCommand+0x194>)
 8006e9e:	2354      	movs	r3, #84	; 0x54
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	54e2      	strb	r2, [r4, r3]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006ea4:	3208      	adds	r2, #8
 8006ea6:	494c      	ldr	r1, [pc, #304]	; (8006fd8 <groupCommand+0x19c>)
 8006ea8:	0028      	movs	r0, r5
 8006eaa:	f00b ff7c 	bl	8012da6 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006eae:	0022      	movs	r2, r4
 8006eb0:	3258      	adds	r2, #88	; 0x58
 8006eb2:	2102      	movs	r1, #2
 8006eb4:	9801      	ldr	r0, [sp, #4]
 8006eb6:	f006 fe99 	bl	800dbec <FreeRTOS_CLIGetParameter>
 8006eba:	65e0      	str	r0, [r4, #92]	; 0x5c
	int16_t modID =0, type =0;
 8006ebc:	2600      	movs	r6, #0
	BOS_Status result =BOS_OK;
 8006ebe:	2700      	movs	r7, #0
	while(pcParameterString != NULL){
 8006ec0:	e011      	b.n	8006ee6 <groupCommand+0xaa>
			type =0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	4699      	mov	r9, r3
 8006ec6:	e7e9      	b.n	8006e9c <groupCommand+0x60>
		strcat((char* )pcWriteBuffer,module);
 8006ec8:	a906      	add	r1, sp, #24
 8006eca:	0028      	movs	r0, r5
 8006ecc:	f00c f98e 	bl	80131ec <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006ed0:	3401      	adds	r4, #1
 8006ed2:	b261      	sxtb	r1, r4
 8006ed4:	4c3e      	ldr	r4, [pc, #248]	; (8006fd0 <groupCommand+0x194>)
 8006ed6:	2354      	movs	r3, #84	; 0x54
 8006ed8:	54e1      	strb	r1, [r4, r3]
 8006eda:	0022      	movs	r2, r4
 8006edc:	3258      	adds	r2, #88	; 0x58
 8006ede:	9801      	ldr	r0, [sp, #4]
 8006ee0:	f006 fe84 	bl	800dbec <FreeRTOS_CLIGetParameter>
 8006ee4:	65e0      	str	r0, [r4, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006ee6:	4b3a      	ldr	r3, [pc, #232]	; (8006fd0 <groupCommand+0x194>)
 8006ee8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8006eea:	2900      	cmp	r1, #0
 8006eec:	d021      	beq.n	8006f32 <groupCommand+0xf6>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006eee:	4b38      	ldr	r3, [pc, #224]	; (8006fd0 <groupCommand+0x194>)
 8006ef0:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 8006ef2:	ac06      	add	r4, sp, #24
 8006ef4:	0032      	movs	r2, r6
 8006ef6:	0020      	movs	r0, r4
 8006ef8:	f00c f9ad 	bl	8013256 <strncpy>
		module[xParameterStringLength] ='\0';
 8006efc:	2300      	movs	r3, #0
 8006efe:	55a3      	strb	r3, [r4, r6]
		modID =GetID(module);
 8006f00:	0020      	movs	r0, r4
 8006f02:	f7fd f94b 	bl	800419c <GetID>
 8006f06:	1e06      	subs	r6, r0, #0
		if(modID < 0)
 8006f08:	db13      	blt.n	8006f32 <groupCommand+0xf6>
		result =AddModuleToGroup(modID,alias);
 8006f0a:	b2c0      	uxtb	r0, r0
 8006f0c:	a903      	add	r1, sp, #12
 8006f0e:	f7fd fa0f 	bl	8004330 <AddModuleToGroup>
 8006f12:	1e07      	subs	r7, r0, #0
		if(result != BOS_OK)
 8006f14:	d10d      	bne.n	8006f32 <groupCommand+0xf6>
		if(count > 2)
 8006f16:	4a2e      	ldr	r2, [pc, #184]	; (8006fd0 <groupCommand+0x194>)
 8006f18:	2354      	movs	r3, #84	; 0x54
 8006f1a:	56d4      	ldrsb	r4, [r2, r3]
 8006f1c:	2c02      	cmp	r4, #2
 8006f1e:	ddd3      	ble.n	8006ec8 <groupCommand+0x8c>
			strcat((char* )pcWriteBuffer,", ");
 8006f20:	0028      	movs	r0, r5
 8006f22:	f7f9 f8f9 	bl	8000118 <strlen>
 8006f26:	1828      	adds	r0, r5, r0
 8006f28:	2203      	movs	r2, #3
 8006f2a:	492c      	ldr	r1, [pc, #176]	; (8006fdc <groupCommand+0x1a0>)
 8006f2c:	f00b ff3b 	bl	8012da6 <memcpy>
 8006f30:	e7ca      	b.n	8006ec8 <groupCommand+0x8c>
	if(modID < 0)
 8006f32:	2e00      	cmp	r6, #0
 8006f34:	db19      	blt.n	8006f6a <groupCommand+0x12e>
	else if(count == 2)
 8006f36:	4a26      	ldr	r2, [pc, #152]	; (8006fd0 <groupCommand+0x194>)
 8006f38:	2354      	movs	r3, #84	; 0x54
 8006f3a:	56d3      	ldrsb	r3, [r2, r3]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d01a      	beq.n	8006f76 <groupCommand+0x13a>
	else if(result == BOS_OK && type){
 8006f40:	2f00      	cmp	r7, #0
 8006f42:	d102      	bne.n	8006f4a <groupCommand+0x10e>
 8006f44:	464b      	mov	r3, r9
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d11b      	bne.n	8006f82 <groupCommand+0x146>
	else if(result == BOS_OK && !type){
 8006f4a:	2f00      	cmp	r7, #0
 8006f4c:	d102      	bne.n	8006f54 <groupCommand+0x118>
 8006f4e:	464b      	mov	r3, r9
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d020      	beq.n	8006f96 <groupCommand+0x15a>
	else if(result == BOS_ERR_Keyword)
 8006f54:	2f06      	cmp	r7, #6
 8006f56:	d028      	beq.n	8006faa <groupCommand+0x16e>
	else if(result == BOS_ERR_ExistingAlias)
 8006f58:	2f07      	cmp	r7, #7
 8006f5a:	d02c      	beq.n	8006fb6 <groupCommand+0x17a>
	else if(result == BOS_ERR_ExistingCmd)
 8006f5c:	2f08      	cmp	r7, #8
 8006f5e:	d030      	beq.n	8006fc2 <groupCommand+0x186>
}
 8006f60:	2000      	movs	r0, #0
 8006f62:	b010      	add	sp, #64	; 0x40
 8006f64:	bc04      	pop	{r2}
 8006f66:	4691      	mov	r9, r2
 8006f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006f6a:	aa06      	add	r2, sp, #24
 8006f6c:	491c      	ldr	r1, [pc, #112]	; (8006fe0 <groupCommand+0x1a4>)
 8006f6e:	0028      	movs	r0, r5
 8006f70:	f00c f91c 	bl	80131ac <sprintf>
 8006f74:	e7f4      	b.n	8006f60 <groupCommand+0x124>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8006f76:	aa03      	add	r2, sp, #12
 8006f78:	491a      	ldr	r1, [pc, #104]	; (8006fe4 <groupCommand+0x1a8>)
 8006f7a:	0028      	movs	r0, r5
 8006f7c:	f00c f916 	bl	80131ac <sprintf>
 8006f80:	e7ee      	b.n	8006f60 <groupCommand+0x124>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006f82:	aa03      	add	r2, sp, #12
 8006f84:	4918      	ldr	r1, [pc, #96]	; (8006fe8 <groupCommand+0x1ac>)
 8006f86:	a806      	add	r0, sp, #24
 8006f88:	f00c f910 	bl	80131ac <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006f8c:	a906      	add	r1, sp, #24
 8006f8e:	0028      	movs	r0, r5
 8006f90:	f00c f92c 	bl	80131ec <strcat>
 8006f94:	e7e4      	b.n	8006f60 <groupCommand+0x124>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006f96:	aa03      	add	r2, sp, #12
 8006f98:	4914      	ldr	r1, [pc, #80]	; (8006fec <groupCommand+0x1b0>)
 8006f9a:	a806      	add	r0, sp, #24
 8006f9c:	f00c f906 	bl	80131ac <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006fa0:	a906      	add	r1, sp, #24
 8006fa2:	0028      	movs	r0, r5
 8006fa4:	f00c f922 	bl	80131ec <strcat>
 8006fa8:	e7da      	b.n	8006f60 <groupCommand+0x124>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006faa:	aa03      	add	r2, sp, #12
 8006fac:	4910      	ldr	r1, [pc, #64]	; (8006ff0 <groupCommand+0x1b4>)
 8006fae:	0028      	movs	r0, r5
 8006fb0:	f00c f8fc 	bl	80131ac <sprintf>
 8006fb4:	e7d4      	b.n	8006f60 <groupCommand+0x124>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8006fb6:	aa03      	add	r2, sp, #12
 8006fb8:	490e      	ldr	r1, [pc, #56]	; (8006ff4 <groupCommand+0x1b8>)
 8006fba:	0028      	movs	r0, r5
 8006fbc:	f00c f8f6 	bl	80131ac <sprintf>
 8006fc0:	e7ce      	b.n	8006f60 <groupCommand+0x124>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006fc2:	aa03      	add	r2, sp, #12
 8006fc4:	490c      	ldr	r1, [pc, #48]	; (8006ff8 <groupCommand+0x1bc>)
 8006fc6:	0028      	movs	r0, r5
 8006fc8:	f00c f8f0 	bl	80131ac <sprintf>
 8006fcc:	e7c8      	b.n	8006f60 <groupCommand+0x124>
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	200017d4 	.word	0x200017d4
 8006fd4:	20000ad0 	.word	0x20000ad0
 8006fd8:	08019398 	.word	0x08019398
 8006fdc:	080193a4 	.word	0x080193a4
 8006fe0:	080193a8 	.word	0x080193a8
 8006fe4:	080193cc 	.word	0x080193cc
 8006fe8:	080193f8 	.word	0x080193f8
 8006fec:	08019414 	.word	0x08019414
 8006ff0:	08019434 	.word	0x08019434
 8006ff4:	08019474 	.word	0x08019474
 8006ff8:	080194a8 	.word	0x080194a8

08006ffc <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	0005      	movs	r5, r0
 8007000:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007002:	4c1c      	ldr	r4, [pc, #112]	; (8007074 <nameCommand+0x78>)
 8007004:	0022      	movs	r2, r4
 8007006:	3260      	adds	r2, #96	; 0x60
 8007008:	2101      	movs	r1, #1
 800700a:	f006 fdef 	bl	800dbec <FreeRTOS_CLIGetParameter>
 800700e:	0001      	movs	r1, r0
 8007010:	6660      	str	r0, [r4, #100]	; 0x64
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8007012:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007014:	2b09      	cmp	r3, #9
 8007016:	dd01      	ble.n	800701c <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8007018:	2300      	movs	r3, #0
 800701a:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 800701c:	4b16      	ldr	r3, [pc, #88]	; (8007078 <nameCommand+0x7c>)
 800701e:	7818      	ldrb	r0, [r3, #0]
 8007020:	f7fd f91e 	bl	8004260 <NameModule>
	if(result == BOS_OK)
 8007024:	2800      	cmp	r0, #0
 8007026:	d007      	beq.n	8007038 <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 8007028:	2806      	cmp	r0, #6
 800702a:	d00e      	beq.n	800704a <nameCommand+0x4e>
	else if(result == BOS_ERR_ExistingAlias)
 800702c:	2807      	cmp	r0, #7
 800702e:	d013      	beq.n	8007058 <nameCommand+0x5c>
	else if(result == BOS_ERR_ExistingCmd)
 8007030:	2808      	cmp	r0, #8
 8007032:	d018      	beq.n	8007066 <nameCommand+0x6a>
}
 8007034:	2000      	movs	r0, #0
 8007036:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8007038:	4b0e      	ldr	r3, [pc, #56]	; (8007074 <nameCommand+0x78>)
 800703a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800703c:	4a0e      	ldr	r2, [pc, #56]	; (8007078 <nameCommand+0x7c>)
 800703e:	7812      	ldrb	r2, [r2, #0]
 8007040:	490e      	ldr	r1, [pc, #56]	; (800707c <nameCommand+0x80>)
 8007042:	0028      	movs	r0, r5
 8007044:	f00c f8b2 	bl	80131ac <sprintf>
 8007048:	e7f4      	b.n	8007034 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 800704a:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <nameCommand+0x78>)
 800704c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800704e:	490c      	ldr	r1, [pc, #48]	; (8007080 <nameCommand+0x84>)
 8007050:	0028      	movs	r0, r5
 8007052:	f00c f8ab 	bl	80131ac <sprintf>
 8007056:	e7ed      	b.n	8007034 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8007058:	4b06      	ldr	r3, [pc, #24]	; (8007074 <nameCommand+0x78>)
 800705a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800705c:	4909      	ldr	r1, [pc, #36]	; (8007084 <nameCommand+0x88>)
 800705e:	0028      	movs	r0, r5
 8007060:	f00c f8a4 	bl	80131ac <sprintf>
 8007064:	e7e6      	b.n	8007034 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8007066:	4b03      	ldr	r3, [pc, #12]	; (8007074 <nameCommand+0x78>)
 8007068:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800706a:	4907      	ldr	r1, [pc, #28]	; (8007088 <nameCommand+0x8c>)
 800706c:	0028      	movs	r0, r5
 800706e:	f00c f89d 	bl	80131ac <sprintf>
 8007072:	e7df      	b.n	8007034 <nameCommand+0x38>
 8007074:	200017d4 	.word	0x200017d4
 8007078:	20000a98 	.word	0x20000a98
 800707c:	080194e8 	.word	0x080194e8
 8007080:	08019434 	.word	0x08019434
 8007084:	08019474 	.word	0x08019474
 8007088:	080194a8 	.word	0x080194a8

0800708c <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800708c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800708e:	b085      	sub	sp, #20
 8007090:	9003      	str	r0, [sp, #12]
 8007092:	0014      	movs	r4, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007094:	4a4b      	ldr	r2, [pc, #300]	; (80071c4 <bootloaderUpdateCommand+0x138>)
 8007096:	3268      	adds	r2, #104	; 0x68
 8007098:	2101      	movs	r1, #1
 800709a:	0020      	movs	r0, r4
 800709c:	f006 fda6 	bl	800dbec <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d045      	beq.n	8007130 <bootloaderUpdateCommand+0xa4>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 80070a4:	4b47      	ldr	r3, [pc, #284]	; (80071c4 <bootloaderUpdateCommand+0x138>)
 80070a6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80070a8:	4947      	ldr	r1, [pc, #284]	; (80071c8 <bootloaderUpdateCommand+0x13c>)
 80070aa:	f00c f8c3 	bl	8013234 <strncmp>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d136      	bne.n	8007120 <bootloaderUpdateCommand+0x94>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80070b2:	4f44      	ldr	r7, [pc, #272]	; (80071c4 <bootloaderUpdateCommand+0x138>)
 80070b4:	003a      	movs	r2, r7
 80070b6:	326c      	adds	r2, #108	; 0x6c
 80070b8:	2102      	movs	r1, #2
 80070ba:	0020      	movs	r0, r4
 80070bc:	f006 fd96 	bl	800dbec <FreeRTOS_CLIGetParameter>
 80070c0:	6738      	str	r0, [r7, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80070c2:	003a      	movs	r2, r7
 80070c4:	3274      	adds	r2, #116	; 0x74
 80070c6:	2103      	movs	r1, #3
 80070c8:	0020      	movs	r0, r4
 80070ca:	f006 fd8f 	bl	800dbec <FreeRTOS_CLIGetParameter>
 80070ce:	67b8      	str	r0, [r7, #120]	; 0x78
			if(pcParameterString2[0] == '#'){
 80070d0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80070d2:	2300      	movs	r3, #0
 80070d4:	56c3      	ldrsb	r3, [r0, r3]
 80070d6:	2b23      	cmp	r3, #35	; 0x23
 80070d8:	d055      	beq.n	8007186 <bootloaderUpdateCommand+0xfa>
				result =BOS_ERR_WrongValue;
 80070da:	2468      	movs	r4, #104	; 0x68
			if(pcParameterString3[0] == 'p'){
 80070dc:	4b39      	ldr	r3, [pc, #228]	; (80071c4 <bootloaderUpdateCommand+0x138>)
 80070de:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80070e0:	2300      	movs	r3, #0
 80070e2:	56c3      	ldrsb	r3, [r0, r3]
 80070e4:	2b70      	cmp	r3, #112	; 0x70
 80070e6:	d054      	beq.n	8007192 <bootloaderUpdateCommand+0x106>
				result =BOS_ERR_WrongValue;
 80070e8:	2468      	movs	r4, #104	; 0x68
			if(module != myID){
 80070ea:	4b38      	ldr	r3, [pc, #224]	; (80071cc <bootloaderUpdateCommand+0x140>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	42ab      	cmp	r3, r5
 80070f0:	d054      	beq.n	800719c <bootloaderUpdateCommand+0x110>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80070f2:	4b37      	ldr	r3, [pc, #220]	; (80071d0 <bootloaderUpdateCommand+0x144>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 80070f8:	4b36      	ldr	r3, [pc, #216]	; (80071d4 <bootloaderUpdateCommand+0x148>)
 80070fa:	701e      	strb	r6, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80070fc:	3201      	adds	r2, #1
 80070fe:	211a      	movs	r1, #26
 8007100:	0028      	movs	r0, r5
 8007102:	f001 f88f 	bl	8008224 <SendMessageToModule>
				osDelay(100);
 8007106:	2064      	movs	r0, #100	; 0x64
 8007108:	f006 fc4c 	bl	800d9a4 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 800710c:	4b32      	ldr	r3, [pc, #200]	; (80071d8 <bootloaderUpdateCommand+0x14c>)
 800710e:	781a      	ldrb	r2, [r3, #0]
 8007110:	4b2e      	ldr	r3, [pc, #184]	; (80071cc <bootloaderUpdateCommand+0x140>)
 8007112:	7818      	ldrb	r0, [r3, #0]
 8007114:	0033      	movs	r3, r6
 8007116:	0029      	movs	r1, r5
 8007118:	f003 f838 	bl	800a18c <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 800711c:	2c68      	cmp	r4, #104	; 0x68
 800711e:	d104      	bne.n	800712a <bootloaderUpdateCommand+0x9e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8007120:	220f      	movs	r2, #15
 8007122:	492e      	ldr	r1, [pc, #184]	; (80071dc <bootloaderUpdateCommand+0x150>)
 8007124:	9803      	ldr	r0, [sp, #12]
 8007126:	f00b fe3e 	bl	8012da6 <memcpy>
}
 800712a:	2000      	movs	r0, #0
 800712c:	b005      	add	sp, #20
 800712e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8007130:	4b26      	ldr	r3, [pc, #152]	; (80071cc <bootloaderUpdateCommand+0x140>)
 8007132:	781a      	ldrb	r2, [r3, #0]
 8007134:	492a      	ldr	r1, [pc, #168]	; (80071e0 <bootloaderUpdateCommand+0x154>)
 8007136:	9c03      	ldr	r4, [sp, #12]
 8007138:	0020      	movs	r0, r4
 800713a:	f00c f837 	bl	80131ac <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 800713e:	4b29      	ldr	r3, [pc, #164]	; (80071e4 <bootloaderUpdateCommand+0x158>)
 8007140:	6819      	ldr	r1, [r3, #0]
 8007142:	0020      	movs	r0, r4
 8007144:	f00c f852 	bl	80131ec <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8007148:	0020      	movs	r0, r4
 800714a:	f7f8 ffe5 	bl	8000118 <strlen>
 800714e:	b282      	uxth	r2, r0
 8007150:	4b21      	ldr	r3, [pc, #132]	; (80071d8 <bootloaderUpdateCommand+0x14c>)
 8007152:	7818      	ldrb	r0, [r3, #0]
 8007154:	2301      	movs	r3, #1
 8007156:	425b      	negs	r3, r3
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	3333      	adds	r3, #51	; 0x33
 800715c:	0021      	movs	r1, r4
 800715e:	f006 fa9f 	bl	800d6a0 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8007162:	4b21      	ldr	r3, [pc, #132]	; (80071e8 <bootloaderUpdateCommand+0x15c>)
 8007164:	4a21      	ldr	r2, [pc, #132]	; (80071ec <bootloaderUpdateCommand+0x160>)
 8007166:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8007168:	4b21      	ldr	r3, [pc, #132]	; (80071f0 <bootloaderUpdateCommand+0x164>)
 800716a:	2201      	movs	r2, #1
 800716c:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 800716e:	200a      	movs	r0, #10
 8007170:	f006 fc18 	bl	800d9a4 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	4b1e      	ldr	r3, [pc, #120]	; (80071f4 <bootloaderUpdateCommand+0x168>)
 800717a:	4a1f      	ldr	r2, [pc, #124]	; (80071f8 <bootloaderUpdateCommand+0x16c>)
 800717c:	60da      	str	r2, [r3, #12]
 800717e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007182:	46c0      	nop			; (mov r8, r8)
 8007184:	e7fd      	b.n	8007182 <bootloaderUpdateCommand+0xf6>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8007186:	3001      	adds	r0, #1
 8007188:	f00b fb83 	bl	8012892 <atol>
 800718c:	b2c5      	uxtb	r5, r0
	BOS_Status result =BOS_OK;
 800718e:	2400      	movs	r4, #0
 8007190:	e7a4      	b.n	80070dc <bootloaderUpdateCommand+0x50>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007192:	3001      	adds	r0, #1
 8007194:	f00b fb7d 	bl	8012892 <atol>
 8007198:	b2c6      	uxtb	r6, r0
 800719a:	e7a6      	b.n	80070ea <bootloaderUpdateCommand+0x5e>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 800719c:	2300      	movs	r3, #0
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	3319      	adds	r3, #25
 80071a2:	2200      	movs	r2, #0
 80071a4:	2100      	movs	r1, #0
 80071a6:	0030      	movs	r0, r6
 80071a8:	f000 fde8 	bl	8007d7c <SendMessageFromPort>
				osDelay(100);
 80071ac:	2064      	movs	r0, #100	; 0x64
 80071ae:	f006 fbf9 	bl	800d9a4 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 80071b2:	4b06      	ldr	r3, [pc, #24]	; (80071cc <bootloaderUpdateCommand+0x140>)
 80071b4:	7818      	ldrb	r0, [r3, #0]
 80071b6:	4b08      	ldr	r3, [pc, #32]	; (80071d8 <bootloaderUpdateCommand+0x14c>)
 80071b8:	781a      	ldrb	r2, [r3, #0]
 80071ba:	0033      	movs	r3, r6
 80071bc:	0001      	movs	r1, r0
 80071be:	f002 ffe5 	bl	800a18c <remoteBootloaderUpdate>
 80071c2:	e7ab      	b.n	800711c <bootloaderUpdateCommand+0x90>
 80071c4:	200017d4 	.word	0x200017d4
 80071c8:	08019520 	.word	0x08019520
 80071cc:	20000a98 	.word	0x20000a98
 80071d0:	200067c8 	.word	0x200067c8
 80071d4:	20000b3c 	.word	0x20000b3c
 80071d8:	20000c28 	.word	0x20000c28
 80071dc:	08018f98 	.word	0x08018f98
 80071e0:	08019500 	.word	0x08019500
 80071e4:	20000060 	.word	0x20000060
 80071e8:	20007ff0 	.word	0x20007ff0
 80071ec:	deadbeef 	.word	0xdeadbeef
 80071f0:	2000113e 	.word	0x2000113e
 80071f4:	e000ed00 	.word	0xe000ed00
 80071f8:	05fa0004 	.word	0x05fa0004

080071fc <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80071fc:	b510      	push	{r4, lr}
	if(!moduleAlias[myID][0])
 80071fe:	4b13      	ldr	r3, [pc, #76]	; (800724c <pingCommand+0x50>)
 8007200:	781a      	ldrb	r2, [r3, #0]
 8007202:	0093      	lsls	r3, r2, #2
 8007204:	189b      	adds	r3, r3, r2
 8007206:	0059      	lsls	r1, r3, #1
 8007208:	4b11      	ldr	r3, [pc, #68]	; (8007250 <pingCommand+0x54>)
 800720a:	5ccb      	ldrb	r3, [r1, r3]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d018      	beq.n	8007242 <pingCommand+0x46>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 8007210:	0091      	lsls	r1, r2, #2
 8007212:	1889      	adds	r1, r1, r2
 8007214:	004b      	lsls	r3, r1, #1
 8007216:	490e      	ldr	r1, [pc, #56]	; (8007250 <pingCommand+0x54>)
 8007218:	185b      	adds	r3, r3, r1
 800721a:	490e      	ldr	r1, [pc, #56]	; (8007254 <pingCommand+0x58>)
 800721c:	f00b ffc6 	bl	80131ac <sprintf>
	RTOS_IND_blink(200);
 8007220:	2490      	movs	r4, #144	; 0x90
 8007222:	05e4      	lsls	r4, r4, #23
 8007224:	2201      	movs	r2, #1
 8007226:	2140      	movs	r1, #64	; 0x40
 8007228:	0020      	movs	r0, r4
 800722a:	f009 fe6c 	bl	8010f06 <HAL_GPIO_WritePin>
 800722e:	20c8      	movs	r0, #200	; 0xc8
 8007230:	f006 fbb8 	bl	800d9a4 <osDelay>
 8007234:	2200      	movs	r2, #0
 8007236:	2140      	movs	r1, #64	; 0x40
 8007238:	0020      	movs	r0, r4
 800723a:	f009 fe64 	bl	8010f06 <HAL_GPIO_WritePin>
}
 800723e:	2000      	movs	r0, #0
 8007240:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8007242:	4905      	ldr	r1, [pc, #20]	; (8007258 <pingCommand+0x5c>)
 8007244:	f00b ffb2 	bl	80131ac <sprintf>
 8007248:	e7ea      	b.n	8007220 <pingCommand+0x24>
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	20000a98 	.word	0x20000a98
 8007250:	20000dc4 	.word	0x20000dc4
 8007254:	08019538 	.word	0x08019538
 8007258:	08019524 	.word	0x08019524

0800725c <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800725c:	b510      	push	{r4, lr}
 800725e:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007260:	2241      	movs	r2, #65	; 0x41
 8007262:	4904      	ldr	r1, [pc, #16]	; (8007274 <prvRunTimeStatsCommand+0x18>)
 8007264:	f00b fd9f 	bl	8012da6 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 8007268:	0020      	movs	r0, r4
 800726a:	3040      	adds	r0, #64	; 0x40
 800726c:	f007 fe18 	bl	800eea0 <vTaskGetRunTimeStats>
}
 8007270:	2000      	movs	r0, #0
 8007272:	bd10      	pop	{r4, pc}
 8007274:	08019554 	.word	0x08019554

08007278 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007278:	b510      	push	{r4, lr}
 800727a:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 800727c:	2250      	movs	r2, #80	; 0x50
 800727e:	4904      	ldr	r1, [pc, #16]	; (8007290 <prvTaskStatsCommand+0x18>)
 8007280:	f00b fd91 	bl	8012da6 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 8007284:	0020      	movs	r0, r4
 8007286:	304f      	adds	r0, #79	; 0x4f
 8007288:	f007 fdb0 	bl	800edec <vTaskList>
}
 800728c:	2000      	movs	r0, #0
 800728e:	bd10      	pop	{r4, pc}
 8007290:	08019598 	.word	0x08019598

08007294 <resetCommand>:
  __ASM volatile ("dsb 0xF":::"memory");
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	4b03      	ldr	r3, [pc, #12]	; (80072a8 <resetCommand+0x14>)
 800729a:	4a04      	ldr	r2, [pc, #16]	; (80072ac <resetCommand+0x18>)
 800729c:	60da      	str	r2, [r3, #12]
 800729e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80072a2:	46c0      	nop			; (mov r8, r8)
 80072a4:	e7fd      	b.n	80072a2 <resetCommand+0xe>
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	e000ed00 	.word	0xe000ed00
 80072ac:	05fa0004 	.word	0x05fa0004

080072b0 <RegisterUserCLICommands>:
}
 80072b0:	4770      	bx	lr
	...

080072b4 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 80072b4:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 80072b6:	4c45      	ldr	r4, [pc, #276]	; (80073cc <vRegisterCLICommands+0x118>)
 80072b8:	0020      	movs	r0, r4
 80072ba:	f006 fc13 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 80072be:	0020      	movs	r0, r4
 80072c0:	3010      	adds	r0, #16
 80072c2:	f006 fc0f 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 80072c6:	0020      	movs	r0, r4
 80072c8:	3020      	adds	r0, #32
 80072ca:	f006 fc0b 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 80072ce:	0020      	movs	r0, r4
 80072d0:	3030      	adds	r0, #48	; 0x30
 80072d2:	f006 fc07 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 80072d6:	0020      	movs	r0, r4
 80072d8:	3040      	adds	r0, #64	; 0x40
 80072da:	f006 fc03 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 80072de:	0020      	movs	r0, r4
 80072e0:	3050      	adds	r0, #80	; 0x50
 80072e2:	f006 fbff 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 80072e6:	0020      	movs	r0, r4
 80072e8:	3060      	adds	r0, #96	; 0x60
 80072ea:	f006 fbfb 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80072ee:	0020      	movs	r0, r4
 80072f0:	3070      	adds	r0, #112	; 0x70
 80072f2:	f006 fbf7 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80072f6:	4c36      	ldr	r4, [pc, #216]	; (80073d0 <vRegisterCLICommands+0x11c>)
 80072f8:	0020      	movs	r0, r4
 80072fa:	f006 fbf3 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 80072fe:	0020      	movs	r0, r4
 8007300:	3010      	adds	r0, #16
 8007302:	f006 fbef 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 8007306:	0020      	movs	r0, r4
 8007308:	3020      	adds	r0, #32
 800730a:	f006 fbeb 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 800730e:	0020      	movs	r0, r4
 8007310:	3030      	adds	r0, #48	; 0x30
 8007312:	f006 fbe7 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007316:	0020      	movs	r0, r4
 8007318:	3040      	adds	r0, #64	; 0x40
 800731a:	f006 fbe3 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 800731e:	0020      	movs	r0, r4
 8007320:	3050      	adds	r0, #80	; 0x50
 8007322:	f006 fbdf 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8007326:	0020      	movs	r0, r4
 8007328:	3060      	adds	r0, #96	; 0x60
 800732a:	f006 fbdb 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 800732e:	0020      	movs	r0, r4
 8007330:	3070      	adds	r0, #112	; 0x70
 8007332:	f006 fbd7 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 8007336:	4c27      	ldr	r4, [pc, #156]	; (80073d4 <vRegisterCLICommands+0x120>)
 8007338:	0020      	movs	r0, r4
 800733a:	f006 fbd3 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 800733e:	0020      	movs	r0, r4
 8007340:	3010      	adds	r0, #16
 8007342:	f006 fbcf 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 8007346:	0020      	movs	r0, r4
 8007348:	3020      	adds	r0, #32
 800734a:	f006 fbcb 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 800734e:	0020      	movs	r0, r4
 8007350:	3030      	adds	r0, #48	; 0x30
 8007352:	f006 fbc7 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007356:	0020      	movs	r0, r4
 8007358:	3040      	adds	r0, #64	; 0x40
 800735a:	f006 fbc3 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 800735e:	0020      	movs	r0, r4
 8007360:	3050      	adds	r0, #80	; 0x50
 8007362:	f006 fbbf 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8007366:	0020      	movs	r0, r4
 8007368:	3060      	adds	r0, #96	; 0x60
 800736a:	f006 fbbb 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 800736e:	0020      	movs	r0, r4
 8007370:	3070      	adds	r0, #112	; 0x70
 8007372:	f006 fbb7 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 8007376:	4c18      	ldr	r4, [pc, #96]	; (80073d8 <vRegisterCLICommands+0x124>)
 8007378:	0020      	movs	r0, r4
 800737a:	f006 fbb3 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 800737e:	0020      	movs	r0, r4
 8007380:	3010      	adds	r0, #16
 8007382:	f006 fbaf 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8007386:	0020      	movs	r0, r4
 8007388:	3020      	adds	r0, #32
 800738a:	f006 fbab 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 800738e:	0020      	movs	r0, r4
 8007390:	3030      	adds	r0, #48	; 0x30
 8007392:	f006 fba7 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007396:	0020      	movs	r0, r4
 8007398:	3040      	adds	r0, #64	; 0x40
 800739a:	f006 fba3 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 800739e:	0020      	movs	r0, r4
 80073a0:	3050      	adds	r0, #80	; 0x50
 80073a2:	f006 fb9f 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 80073a6:	0020      	movs	r0, r4
 80073a8:	3060      	adds	r0, #96	; 0x60
 80073aa:	f006 fb9b 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 80073ae:	0020      	movs	r0, r4
 80073b0:	3070      	adds	r0, #112	; 0x70
 80073b2:	f006 fb97 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 80073b6:	4809      	ldr	r0, [pc, #36]	; (80073dc <vRegisterCLICommands+0x128>)
 80073b8:	f006 fb94 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80073bc:	4b08      	ldr	r3, [pc, #32]	; (80073e0 <vRegisterCLICommands+0x12c>)
 80073be:	2223      	movs	r2, #35	; 0x23
 80073c0:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80073c2:	f002 ff59 	bl	800a278 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80073c6:	f7ff ff73 	bl	80072b0 <RegisterUserCLICommands>
}
 80073ca:	bd10      	pop	{r4, pc}
 80073cc:	0801777c 	.word	0x0801777c
 80073d0:	080177fc 	.word	0x080177fc
 80073d4:	0801787c 	.word	0x0801787c
 80073d8:	080178fc 	.word	0x080178fc
 80073dc:	0801797c 	.word	0x0801797c
 80073e0:	200067c4 	.word	0x200067c4

080073e4 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	0005      	movs	r5, r0
 80073e8:	000e      	movs	r6, r1
 80073ea:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 80073ec:	f002 ff4c 	bl	800a288 <GetPort>
 80073f0:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80073f2:	4b0e      	ldr	r3, [pc, #56]	; (800742c <StartDMAstream+0x48>)
 80073f4:	5c1b      	ldrb	r3, [r3, r0]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d901      	bls.n	80073fe <StartDMAstream+0x1a>
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d113      	bne.n	8007426 <StartDMAstream+0x42>
	{
		SwitchMsgDMAToStream(srcPort);
 80073fe:	0020      	movs	r0, r4
 8007400:	f003 f874 	bl	800a4ec <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007404:	1e62      	subs	r2, r4, #1
 8007406:	4b0a      	ldr	r3, [pc, #40]	; (8007430 <StartDMAstream+0x4c>)
 8007408:	0092      	lsls	r2, r2, #2
 800740a:	50d6      	str	r6, [r2, r3]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 800740c:	4907      	ldr	r1, [pc, #28]	; (800742c <StartDMAstream+0x48>)
 800740e:	2002      	movs	r0, #2
 8007410:	5508      	strb	r0, [r1, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 8007412:	189b      	adds	r3, r3, r2
 8007414:	2200      	movs	r2, #0
 8007416:	615a      	str	r2, [r3, #20]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007418:	003a      	movs	r2, r7
 800741a:	0031      	movs	r1, r6
 800741c:	0028      	movs	r0, r5
 800741e:	f003 fdf1 	bl	800b004 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007422:	2000      	movs	r0, #0
}
 8007424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007426:	2017      	movs	r0, #23
 8007428:	e7fc      	b.n	8007424 <StartDMAstream+0x40>
 800742a:	46c0      	nop			; (mov r8, r8)
 800742c:	20000c2c 	.word	0x20000c2c
 8007430:	20001850 	.word	0x20001850

08007434 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 8007438:	4b15      	ldr	r3, [pc, #84]	; (8007490 <DMA_IRQHandler+0x5c>)
 800743a:	5c1b      	ldrb	r3, [r3, r0]
 800743c:	2b02      	cmp	r3, #2
 800743e:	d008      	beq.n	8007452 <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8007440:	3c01      	subs	r4, #1
 8007442:	00e3      	lsls	r3, r4, #3
 8007444:	1b1c      	subs	r4, r3, r4
 8007446:	00e0      	lsls	r0, r4, #3
 8007448:	4b12      	ldr	r3, [pc, #72]	; (8007494 <DMA_IRQHandler+0x60>)
 800744a:	18c0      	adds	r0, r0, r3
 800744c:	f008 feac 	bl	80101a8 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007450:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8007452:	1e45      	subs	r5, r0, #1
 8007454:	00eb      	lsls	r3, r5, #3
 8007456:	1b5b      	subs	r3, r3, r5
 8007458:	00d8      	lsls	r0, r3, #3
 800745a:	4b0f      	ldr	r3, [pc, #60]	; (8007498 <DMA_IRQHandler+0x64>)
 800745c:	18c0      	adds	r0, r0, r3
 800745e:	f008 fea3 	bl	80101a8 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 8007462:	00aa      	lsls	r2, r5, #2
 8007464:	4b0d      	ldr	r3, [pc, #52]	; (800749c <DMA_IRQHandler+0x68>)
 8007466:	189b      	adds	r3, r3, r2
 8007468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800746a:	2a00      	cmp	r2, #0
 800746c:	d005      	beq.n	800747a <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 800746e:	00a9      	lsls	r1, r5, #2
 8007470:	4b0a      	ldr	r3, [pc, #40]	; (800749c <DMA_IRQHandler+0x68>)
 8007472:	185b      	adds	r3, r3, r1
 8007474:	6959      	ldr	r1, [r3, #20]
 8007476:	3101      	adds	r1, #1
 8007478:	6159      	str	r1, [r3, #20]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 800747a:	00ad      	lsls	r5, r5, #2
 800747c:	4b07      	ldr	r3, [pc, #28]	; (800749c <DMA_IRQHandler+0x68>)
 800747e:	195d      	adds	r5, r3, r5
 8007480:	696b      	ldr	r3, [r5, #20]
 8007482:	429a      	cmp	r2, r3
 8007484:	d8e4      	bhi.n	8007450 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007486:	0020      	movs	r0, r4
 8007488:	f003 f804 	bl	800a494 <StopStreamDMA>
}
 800748c:	e7e0      	b.n	8007450 <DMA_IRQHandler+0x1c>
 800748e:	46c0      	nop			; (mov r8, r8)
 8007490:	20000c2c 	.word	0x20000c2c
 8007494:	20002250 	.word	0x20002250
 8007498:	20002058 	.word	0x20002058
 800749c:	20001850 	.word	0x20001850

080074a0 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 80074a0:	4b09      	ldr	r3, [pc, #36]	; (80074c8 <ResetUartORE+0x28>)
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	2308      	movs	r3, #8
 80074a6:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80074a8:	4a08      	ldr	r2, [pc, #32]	; (80074cc <ResetUartORE+0x2c>)
 80074aa:	6812      	ldr	r2, [r2, #0]
 80074ac:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80074ae:	4a08      	ldr	r2, [pc, #32]	; (80074d0 <ResetUartORE+0x30>)
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 80074b4:	4a07      	ldr	r2, [pc, #28]	; (80074d4 <ResetUartORE+0x34>)
 80074b6:	6812      	ldr	r2, [r2, #0]
 80074b8:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 80074ba:	4a07      	ldr	r2, [pc, #28]	; (80074d8 <ResetUartORE+0x38>)
 80074bc:	6812      	ldr	r2, [r2, #0]
 80074be:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 80074c0:	4a06      	ldr	r2, [pc, #24]	; (80074dc <ResetUartORE+0x3c>)
 80074c2:	6812      	ldr	r2, [r2, #0]
 80074c4:	6213      	str	r3, [r2, #32]
#endif
}
 80074c6:	4770      	bx	lr
 80074c8:	20006a58 	.word	0x20006a58
 80074cc:	20006ba8 	.word	0x20006ba8
 80074d0:	20006968 	.word	0x20006968
 80074d4:	20006b38 	.word	0x20006b38
 80074d8:	200069e8 	.word	0x200069e8
 80074dc:	20006ac8 	.word	0x20006ac8

080074e0 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 80074e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074e2:	b08f      	sub	sp, #60	; 0x3c
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80074e4:	2400      	movs	r4, #0
 80074e6:	9403      	str	r4, [sp, #12]
 80074e8:	9402      	str	r4, [sp, #8]
 80074ea:	4d56      	ldr	r5, [pc, #344]	; (8007644 <MX_FREERTOS_Init+0x164>)
 80074ec:	9501      	str	r5, [sp, #4]
 80074ee:	2603      	movs	r6, #3
 80074f0:	9600      	str	r6, [sp, #0]
 80074f2:	2300      	movs	r3, #0
 80074f4:	22f0      	movs	r2, #240	; 0xf0
 80074f6:	4954      	ldr	r1, [pc, #336]	; (8007648 <MX_FREERTOS_Init+0x168>)
 80074f8:	4854      	ldr	r0, [pc, #336]	; (800764c <MX_FREERTOS_Init+0x16c>)
 80074fa:	f007 f85d 	bl	800e5b8 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(BACKEND_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 80074fe:	9403      	str	r4, [sp, #12]
 8007500:	9402      	str	r4, [sp, #8]
 8007502:	1d2b      	adds	r3, r5, #4
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	9600      	str	r6, [sp, #0]
 8007508:	2300      	movs	r3, #0
 800750a:	22f0      	movs	r2, #240	; 0xf0
 800750c:	4950      	ldr	r1, [pc, #320]	; (8007650 <MX_FREERTOS_Init+0x170>)
 800750e:	4851      	ldr	r0, [pc, #324]	; (8007654 <MX_FREERTOS_Init+0x174>)
 8007510:	f007 f852 	bl	800e5b8 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(USER_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007514:	9403      	str	r4, [sp, #12]
 8007516:	9402      	str	r4, [sp, #8]
 8007518:	002b      	movs	r3, r5
 800751a:	3308      	adds	r3, #8
 800751c:	9301      	str	r3, [sp, #4]
 800751e:	9600      	str	r6, [sp, #0]
 8007520:	2300      	movs	r3, #0
 8007522:	22f0      	movs	r2, #240	; 0xf0
 8007524:	494c      	ldr	r1, [pc, #304]	; (8007658 <MX_FREERTOS_Init+0x178>)
 8007526:	484d      	ldr	r0, [pc, #308]	; (800765c <MX_FREERTOS_Init+0x17c>)
 8007528:	f007 f846 	bl	800e5b8 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 800752c:	f7ff fec2 	bl	80072b4 <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(CLI_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007530:	228c      	movs	r2, #140	; 0x8c
 8007532:	9403      	str	r4, [sp, #12]
 8007534:	9402      	str	r4, [sp, #8]
 8007536:	002b      	movs	r3, r5
 8007538:	330c      	adds	r3, #12
 800753a:	9301      	str	r3, [sp, #4]
 800753c:	9600      	str	r6, [sp, #0]
 800753e:	2300      	movs	r3, #0
 8007540:	0052      	lsls	r2, r2, #1
 8007542:	4947      	ldr	r1, [pc, #284]	; (8007660 <MX_FREERTOS_Init+0x180>)
 8007544:	4847      	ldr	r0, [pc, #284]	; (8007664 <MX_FREERTOS_Init+0x184>)
 8007546:	f007 f837 	bl	800e5b8 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 800754a:	4e47      	ldr	r6, [pc, #284]	; (8007668 <MX_FREERTOS_Init+0x188>)
 800754c:	9403      	str	r4, [sp, #12]
 800754e:	9402      	str	r4, [sp, #8]
 8007550:	002b      	movs	r3, r5
 8007552:	3310      	adds	r3, #16
 8007554:	9301      	str	r3, [sp, #4]
 8007556:	2704      	movs	r7, #4
 8007558:	9700      	str	r7, [sp, #0]
 800755a:	2301      	movs	r3, #1
 800755c:	22f0      	movs	r2, #240	; 0xf0
 800755e:	4943      	ldr	r1, [pc, #268]	; (800766c <MX_FREERTOS_Init+0x18c>)
 8007560:	0030      	movs	r0, r6
 8007562:	f007 f829 	bl	800e5b8 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8007566:	9403      	str	r4, [sp, #12]
 8007568:	9402      	str	r4, [sp, #8]
 800756a:	002b      	movs	r3, r5
 800756c:	3314      	adds	r3, #20
 800756e:	9301      	str	r3, [sp, #4]
 8007570:	9700      	str	r7, [sp, #0]
 8007572:	2302      	movs	r3, #2
 8007574:	22f0      	movs	r2, #240	; 0xf0
 8007576:	493e      	ldr	r1, [pc, #248]	; (8007670 <MX_FREERTOS_Init+0x190>)
 8007578:	0030      	movs	r0, r6
 800757a:	f007 f81d 	bl	800e5b8 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 800757e:	9403      	str	r4, [sp, #12]
 8007580:	9402      	str	r4, [sp, #8]
 8007582:	002b      	movs	r3, r5
 8007584:	3318      	adds	r3, #24
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	9700      	str	r7, [sp, #0]
 800758a:	2303      	movs	r3, #3
 800758c:	22f0      	movs	r2, #240	; 0xf0
 800758e:	4939      	ldr	r1, [pc, #228]	; (8007674 <MX_FREERTOS_Init+0x194>)
 8007590:	0030      	movs	r0, r6
 8007592:	f007 f811 	bl	800e5b8 <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007596:	9403      	str	r4, [sp, #12]
 8007598:	9402      	str	r4, [sp, #8]
 800759a:	002b      	movs	r3, r5
 800759c:	331c      	adds	r3, #28
 800759e:	9301      	str	r3, [sp, #4]
 80075a0:	9700      	str	r7, [sp, #0]
 80075a2:	2304      	movs	r3, #4
 80075a4:	22f0      	movs	r2, #240	; 0xf0
 80075a6:	4934      	ldr	r1, [pc, #208]	; (8007678 <MX_FREERTOS_Init+0x198>)
 80075a8:	0030      	movs	r0, r6
 80075aa:	f007 f805 	bl	800e5b8 <xTaskGenericCreate>
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 80075ae:	9403      	str	r4, [sp, #12]
 80075b0:	9402      	str	r4, [sp, #8]
 80075b2:	3520      	adds	r5, #32
 80075b4:	9501      	str	r5, [sp, #4]
 80075b6:	9700      	str	r7, [sp, #0]
 80075b8:	2305      	movs	r3, #5
 80075ba:	22f0      	movs	r2, #240	; 0xf0
 80075bc:	492f      	ldr	r1, [pc, #188]	; (800767c <MX_FREERTOS_Init+0x19c>)
 80075be:	0030      	movs	r0, r6
 80075c0:	f006 fffa 	bl	800e5b8 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
 80075c4:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80075c6:	2101      	movs	r1, #1
 80075c8:	a80d      	add	r0, sp, #52	; 0x34
 80075ca:	f006 f9f3 	bl	800d9b4 <osSemaphoreCreate>
 80075ce:	4e2c      	ldr	r6, [pc, #176]	; (8007680 <MX_FREERTOS_Init+0x1a0>)
 80075d0:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 80075d2:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80075d4:	2101      	movs	r1, #1
 80075d6:	a80c      	add	r0, sp, #48	; 0x30
 80075d8:	f006 f9ec 	bl	800d9b4 <osSemaphoreCreate>
 80075dc:	4d29      	ldr	r5, [pc, #164]	; (8007684 <MX_FREERTOS_Init+0x1a4>)
 80075de:	6068      	str	r0, [r5, #4]
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
 80075e0:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80075e2:	2101      	movs	r1, #1
 80075e4:	a80b      	add	r0, sp, #44	; 0x2c
 80075e6:	f006 f9e5 	bl	800d9b4 <osSemaphoreCreate>
 80075ea:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 80075ec:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80075ee:	2101      	movs	r1, #1
 80075f0:	a80a      	add	r0, sp, #40	; 0x28
 80075f2:	f006 f9df 	bl	800d9b4 <osSemaphoreCreate>
 80075f6:	60a8      	str	r0, [r5, #8]
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
 80075f8:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80075fa:	2101      	movs	r1, #1
 80075fc:	a809      	add	r0, sp, #36	; 0x24
 80075fe:	f006 f9d9 	bl	800d9b4 <osSemaphoreCreate>
 8007602:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 8007604:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007606:	2101      	movs	r1, #1
 8007608:	a808      	add	r0, sp, #32
 800760a:	f006 f9d3 	bl	800d9b4 <osSemaphoreCreate>
 800760e:	60e8      	str	r0, [r5, #12]
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
 8007610:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007612:	2101      	movs	r1, #1
 8007614:	a807      	add	r0, sp, #28
 8007616:	f006 f9cd 	bl	800d9b4 <osSemaphoreCreate>
 800761a:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8);
 800761c:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800761e:	2101      	movs	r1, #1
 8007620:	a806      	add	r0, sp, #24
 8007622:	f006 f9c7 	bl	800d9b4 <osSemaphoreCreate>
 8007626:	6128      	str	r0, [r5, #16]
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
 8007628:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800762a:	2101      	movs	r1, #1
 800762c:	a805      	add	r0, sp, #20
 800762e:	f006 f9c1 	bl	800d9b4 <osSemaphoreCreate>
 8007632:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10);
 8007634:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007636:	2101      	movs	r1, #1
 8007638:	a804      	add	r0, sp, #16
 800763a:	f006 f9bb 	bl	800d9b4 <osSemaphoreCreate>
 800763e:	6168      	str	r0, [r5, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
#endif
	
}
 8007640:	b00f      	add	sp, #60	; 0x3c
 8007642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007644:	20001c9c 	.word	0x20001c9c
 8007648:	0801a264 	.word	0x0801a264
 800764c:	08007a1d 	.word	0x08007a1d
 8007650:	0801a270 	.word	0x0801a270
 8007654:	080083dd 	.word	0x080083dd
 8007658:	0801a27c 	.word	0x0801a27c
 800765c:	08012867 	.word	0x08012867
 8007660:	0801a288 	.word	0x0801a288
 8007664:	08005139 	.word	0x08005139
 8007668:	0800854d 	.word	0x0800854d
 800766c:	0801a290 	.word	0x0801a290
 8007670:	0801a29c 	.word	0x0801a29c
 8007674:	0801a2a8 	.word	0x0801a2a8
 8007678:	0801a2b4 	.word	0x0801a2b4
 800767c:	0801a2c0 	.word	0x0801a2c0
 8007680:	200068ec 	.word	0x200068ec
 8007684:	200068cc 	.word	0x200068cc

08007688 <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 8007688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 800768a:	4bd5      	ldr	r3, [pc, #852]	; (80079e0 <ExecuteMonitor+0x358>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b03      	cmp	r3, #3
 8007690:	d000      	beq.n	8007694 <ExecuteMonitor+0xc>
 8007692:	e1a3      	b.n	80079dc <ExecuteMonitor+0x354>

#if defined(H0FR7) || defined(H08R6) || defined(H09R0)  || defined(H15R0) || defined(H26R0)
initialValue();
#endif

	Monitor_time =0;
 8007694:	4bd2      	ldr	r3, [pc, #840]	; (80079e0 <ExecuteMonitor+0x358>)
 8007696:	2200      	movs	r2, #0
 8007698:	601a      	str	r2, [r3, #0]
	flag=0;
 800769a:	711a      	strb	r2, [r3, #4]
	currentCharacter=SPACE;
 800769c:	3220      	adds	r2, #32
 800769e:	715a      	strb	r2, [r3, #5]
 80076a0:	e05e      	b.n	8007760 <ExecuteMonitor+0xd8>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
								perviousCharacter=currentCharacter;
								currentCharacter= INTIAL_VALUE;
							}
				            }
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 80076a2:	4bd0      	ldr	r3, [pc, #832]	; (80079e4 <ExecuteMonitor+0x35c>)
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	2b20      	cmp	r3, #32
 80076a8:	d020      	beq.n	80076ec <ExecuteMonitor+0x64>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d01e      	beq.n	80076ec <ExecuteMonitor+0x64>
 80076ae:	4bcc      	ldr	r3, [pc, #816]	; (80079e0 <ExecuteMonitor+0x358>)
 80076b0:	791b      	ldrb	r3, [r3, #4]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d01a      	beq.n	80076ec <ExecuteMonitor+0x64>
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d018      	beq.n	80076ec <ExecuteMonitor+0x64>
		            	    perviousCharacter= INTIAL_VALUE;
 80076ba:	4cca      	ldr	r4, [pc, #808]	; (80079e4 <ExecuteMonitor+0x35c>)
 80076bc:	2303      	movs	r3, #3
 80076be:	7023      	strb	r3, [r4, #0]
		            	    Delay_us(100);
 80076c0:	2064      	movs	r0, #100	; 0x64
 80076c2:	f005 fdc5 	bl	800d250 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 80076c6:	4bc6      	ldr	r3, [pc, #792]	; (80079e0 <ExecuteMonitor+0x358>)
 80076c8:	795b      	ldrb	r3, [r3, #5]
 80076ca:	7822      	ldrb	r2, [r4, #0]
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d0e8      	beq.n	80076a2 <ExecuteMonitor+0x1a>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 80076d0:	4ac5      	ldr	r2, [pc, #788]	; (80079e8 <ExecuteMonitor+0x360>)
 80076d2:	7811      	ldrb	r1, [r2, #0]
 80076d4:	1c48      	adds	r0, r1, #1
 80076d6:	7010      	strb	r0, [r2, #0]
 80076d8:	4ac4      	ldr	r2, [pc, #784]	; (80079ec <ExecuteMonitor+0x364>)
 80076da:	1852      	adds	r2, r2, r1
 80076dc:	2124      	movs	r1, #36	; 0x24
 80076de:	5453      	strb	r3, [r2, r1]
								perviousCharacter=currentCharacter;
 80076e0:	4ac0      	ldr	r2, [pc, #768]	; (80079e4 <ExecuteMonitor+0x35c>)
 80076e2:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 80076e4:	4bbe      	ldr	r3, [pc, #760]	; (80079e0 <ExecuteMonitor+0x358>)
 80076e6:	2203      	movs	r2, #3
 80076e8:	715a      	strb	r2, [r3, #5]
 80076ea:	e7da      	b.n	80076a2 <ExecuteMonitor+0x1a>


                   if(flag == NonActive)
 80076ec:	4bbc      	ldr	r3, [pc, #752]	; (80079e0 <ExecuteMonitor+0x358>)
 80076ee:	791d      	ldrb	r5, [r3, #4]
 80076f0:	2d00      	cmp	r5, #0
 80076f2:	d12d      	bne.n	8007750 <ExecuteMonitor+0xc8>
                   {
                	   nonProcessingParameterIndex=0;
 80076f4:	4bbc      	ldr	r3, [pc, #752]	; (80079e8 <ExecuteMonitor+0x360>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	701a      	strb	r2, [r3, #0]
 		              //first parameter:It's the parameter that has no specific location in the commands.
 		            if(FirstCharacterInParameter == '[')
 80076fa:	4abc      	ldr	r2, [pc, #752]	; (80079ec <ExecuteMonitor+0x364>)
 80076fc:	2324      	movs	r3, #36	; 0x24
 80076fe:	5cd3      	ldrb	r3, [r2, r3]
 8007700:	2b5b      	cmp	r3, #91	; 0x5b
 8007702:	d031      	beq.n	8007768 <ExecuteMonitor+0xe0>
 		            	processingParameterIndex=1;
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 		            }

 		           //second parameter:It's the parameter that has specific location in the commands.
 		            else if(FirstCharacterInParameter == '#')
 8007704:	2b23      	cmp	r3, #35	; 0x23
 8007706:	d06e      	beq.n	80077e6 <ExecuteMonitor+0x15e>
 		            	processingParameterIndex=1;
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 		            }

 		           //third parameter:It's the first parameter in the command
 		            else if(FirstCharacterInParameter == '=')
 8007708:	2b3d      	cmp	r3, #61	; 0x3d
 800770a:	d100      	bne.n	800770e <ExecuteMonitor+0x86>
 800770c:	e082      	b.n	8007814 <ExecuteMonitor+0x18c>
                	    processingParameterIndex=1;
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
                	   }


               	   desiredArray=ParameterLocationIn2dArray;
 800770e:	4cb7      	ldr	r4, [pc, #732]	; (80079ec <ExecuteMonitor+0x364>)
 8007710:	2338      	movs	r3, #56	; 0x38
 8007712:	5ce2      	ldrb	r2, [r4, r3]
 8007714:	4bb6      	ldr	r3, [pc, #728]	; (80079f0 <ExecuteMonitor+0x368>)
 8007716:	701a      	strb	r2, [r3, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007718:	0027      	movs	r7, r4
 800771a:	374c      	adds	r7, #76	; 0x4c
 800771c:	0113      	lsls	r3, r2, #4
 800771e:	1a9b      	subs	r3, r3, r2
 8007720:	18ff      	adds	r7, r7, r3
 8007722:	220f      	movs	r2, #15
 8007724:	2100      	movs	r1, #0
 8007726:	0038      	movs	r0, r7
 8007728:	f00b fb46 	bl	8012db8 <memset>
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 800772c:	0026      	movs	r6, r4
 800772e:	3638      	adds	r6, #56	; 0x38
 8007730:	220f      	movs	r2, #15
 8007732:	0031      	movs	r1, r6
 8007734:	0038      	movs	r0, r7
 8007736:	f00b fb36 	bl	8012da6 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 800773a:	0020      	movs	r0, r4
 800773c:	3024      	adds	r0, #36	; 0x24
 800773e:	2214      	movs	r2, #20
 8007740:	2100      	movs	r1, #0
 8007742:	f00b fb39 	bl	8012db8 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 8007746:	2214      	movs	r2, #20
 8007748:	2100      	movs	r1, #0
 800774a:	0030      	movs	r0, r6
 800774c:	f00b fb34 	bl	8012db8 <memset>
                   }


                  //mode RUN_FOR_ONCE
                   if(flag == RUN_FOR_ONCE)
 8007750:	2d01      	cmp	r5, #1
 8007752:	d100      	bne.n	8007756 <ExecuteMonitor+0xce>
 8007754:	e081      	b.n	800785a <ExecuteMonitor+0x1d2>
		           }



                   //mode CONTINUOUS_RUN
                   if(flag == CONTINUOUS_RUN)
 8007756:	4ba2      	ldr	r3, [pc, #648]	; (80079e0 <ExecuteMonitor+0x358>)
 8007758:	791b      	ldrb	r3, [r3, #4]
 800775a:	2b02      	cmp	r3, #2
 800775c:	d100      	bne.n	8007760 <ExecuteMonitor+0xd8>
 800775e:	e0d6      	b.n	800790e <ExecuteMonitor+0x286>
		                    nonProcessingParameterIndex=0;
 8007760:	4ba1      	ldr	r3, [pc, #644]	; (80079e8 <ExecuteMonitor+0x360>)
 8007762:	2200      	movs	r2, #0
 8007764:	701a      	strb	r2, [r3, #0]
 8007766:	e7a8      	b.n	80076ba <ExecuteMonitor+0x32>
 		            	nonProcessingParameterIndex++;
 8007768:	4b9f      	ldr	r3, [pc, #636]	; (80079e8 <ExecuteMonitor+0x360>)
 800776a:	2201      	movs	r2, #1
 800776c:	701a      	strb	r2, [r3, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 800776e:	4b9e      	ldr	r3, [pc, #632]	; (80079e8 <ExecuteMonitor+0x360>)
 8007770:	781c      	ldrb	r4, [r3, #0]
 8007772:	4b9e      	ldr	r3, [pc, #632]	; (80079ec <ExecuteMonitor+0x364>)
 8007774:	191b      	adds	r3, r3, r4
 8007776:	2224      	movs	r2, #36	; 0x24
 8007778:	5c98      	ldrb	r0, [r3, r2]
 800777a:	210a      	movs	r1, #10
 800777c:	f7f8 fd6e 	bl	800025c <__aeabi_uidivmod>
 8007780:	b2c9      	uxtb	r1, r1
 8007782:	4b9c      	ldr	r3, [pc, #624]	; (80079f4 <ExecuteMonitor+0x36c>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	4299      	cmp	r1, r3
 8007788:	d003      	beq.n	8007792 <ExecuteMonitor+0x10a>
 		            			nonProcessingParameterIndex+=2;
 800778a:	3402      	adds	r4, #2
 800778c:	4b96      	ldr	r3, [pc, #600]	; (80079e8 <ExecuteMonitor+0x360>)
 800778e:	701c      	strb	r4, [r3, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007790:	e7ed      	b.n	800776e <ExecuteMonitor+0xe6>
 		            			nonProcessingParameterIndex++;
 8007792:	3401      	adds	r4, #1
 8007794:	b2e4      	uxtb	r4, r4
 8007796:	4b94      	ldr	r3, [pc, #592]	; (80079e8 <ExecuteMonitor+0x360>)
 8007798:	701c      	strb	r4, [r3, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 800779a:	4e94      	ldr	r6, [pc, #592]	; (80079ec <ExecuteMonitor+0x364>)
 800779c:	1934      	adds	r4, r6, r4
 800779e:	2324      	movs	r3, #36	; 0x24
 80077a0:	5ce0      	ldrb	r0, [r4, r3]
 80077a2:	210a      	movs	r1, #10
 80077a4:	f7f8 fd5a 	bl	800025c <__aeabi_uidivmod>
 80077a8:	2338      	movs	r3, #56	; 0x38
 80077aa:	54f1      	strb	r1, [r6, r3]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 80077ac:	e002      	b.n	80077b4 <ExecuteMonitor+0x12c>
 		            		nonProcessingParameterIndex++;
 80077ae:	3301      	adds	r3, #1
 80077b0:	4a8d      	ldr	r2, [pc, #564]	; (80079e8 <ExecuteMonitor+0x360>)
 80077b2:	7013      	strb	r3, [r2, #0]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 80077b4:	4b8c      	ldr	r3, [pc, #560]	; (80079e8 <ExecuteMonitor+0x360>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	4a8c      	ldr	r2, [pc, #560]	; (80079ec <ExecuteMonitor+0x364>)
 80077ba:	18d2      	adds	r2, r2, r3
 80077bc:	2124      	movs	r1, #36	; 0x24
 80077be:	5c52      	ldrb	r2, [r2, r1]
 80077c0:	2a5d      	cmp	r2, #93	; 0x5d
 80077c2:	d1f4      	bne.n	80077ae <ExecuteMonitor+0x126>
 		            	nonProcessingParameterIndex++;
 80077c4:	3301      	adds	r3, #1
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	4a87      	ldr	r2, [pc, #540]	; (80079e8 <ExecuteMonitor+0x360>)
 80077ca:	7013      	strb	r3, [r2, #0]
 		            	processingParameterIndex=1;
 80077cc:	4a8a      	ldr	r2, [pc, #552]	; (80079f8 <ExecuteMonitor+0x370>)
 80077ce:	3923      	subs	r1, #35	; 0x23
 80077d0:	7011      	strb	r1, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80077d2:	4886      	ldr	r0, [pc, #536]	; (80079ec <ExecuteMonitor+0x364>)
 80077d4:	0001      	movs	r1, r0
 80077d6:	3124      	adds	r1, #36	; 0x24
 80077d8:	18c9      	adds	r1, r1, r3
 80077da:	2214      	movs	r2, #20
 80077dc:	1ad2      	subs	r2, r2, r3
 80077de:	3039      	adds	r0, #57	; 0x39
 80077e0:	f00b fae1 	bl	8012da6 <memcpy>
 80077e4:	e793      	b.n	800770e <ExecuteMonitor+0x86>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80077e6:	4c81      	ldr	r4, [pc, #516]	; (80079ec <ExecuteMonitor+0x364>)
 80077e8:	0023      	movs	r3, r4
 80077ea:	3324      	adds	r3, #36	; 0x24
 80077ec:	7858      	ldrb	r0, [r3, #1]
 80077ee:	210a      	movs	r1, #10
 80077f0:	f7f8 fd34 	bl	800025c <__aeabi_uidivmod>
 80077f4:	2338      	movs	r3, #56	; 0x38
 80077f6:	54e1      	strb	r1, [r4, r3]
 		            	nonProcessingParameterIndex=2;
 80077f8:	4b7b      	ldr	r3, [pc, #492]	; (80079e8 <ExecuteMonitor+0x360>)
 80077fa:	2202      	movs	r2, #2
 80077fc:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 80077fe:	4b7e      	ldr	r3, [pc, #504]	; (80079f8 <ExecuteMonitor+0x370>)
 8007800:	3a01      	subs	r2, #1
 8007802:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007804:	0020      	movs	r0, r4
 8007806:	3039      	adds	r0, #57	; 0x39
 8007808:	0021      	movs	r1, r4
 800780a:	3126      	adds	r1, #38	; 0x26
 800780c:	3211      	adds	r2, #17
 800780e:	f00b faca 	bl	8012da6 <memcpy>
 8007812:	e77c      	b.n	800770e <ExecuteMonitor+0x86>
                	    digitTheCommand=nonProcessingParameter[1]%10;
 8007814:	4c75      	ldr	r4, [pc, #468]	; (80079ec <ExecuteMonitor+0x364>)
 8007816:	0026      	movs	r6, r4
 8007818:	3624      	adds	r6, #36	; 0x24
 800781a:	7870      	ldrb	r0, [r6, #1]
 800781c:	210a      	movs	r1, #10
 800781e:	f7f8 fd1d 	bl	800025c <__aeabi_uidivmod>
 8007822:	4b74      	ldr	r3, [pc, #464]	; (80079f4 <ExecuteMonitor+0x36c>)
 8007824:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 8007826:	78b0      	ldrb	r0, [r6, #2]
 8007828:	210a      	movs	r1, #10
 800782a:	f7f8 fd17 	bl	800025c <__aeabi_uidivmod>
 800782e:	4b73      	ldr	r3, [pc, #460]	; (80079fc <ExecuteMonitor+0x374>)
 8007830:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007832:	78f0      	ldrb	r0, [r6, #3]
 8007834:	210a      	movs	r1, #10
 8007836:	f7f8 fd11 	bl	800025c <__aeabi_uidivmod>
 800783a:	2338      	movs	r3, #56	; 0x38
 800783c:	54e1      	strb	r1, [r4, r3]
                	    nonProcessingParameterIndex=4;
 800783e:	4b6a      	ldr	r3, [pc, #424]	; (80079e8 <ExecuteMonitor+0x360>)
 8007840:	2204      	movs	r2, #4
 8007842:	701a      	strb	r2, [r3, #0]
                	    processingParameterIndex=1;
 8007844:	4b6c      	ldr	r3, [pc, #432]	; (80079f8 <ExecuteMonitor+0x370>)
 8007846:	3a03      	subs	r2, #3
 8007848:	701a      	strb	r2, [r3, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800784a:	0020      	movs	r0, r4
 800784c:	3039      	adds	r0, #57	; 0x39
 800784e:	0021      	movs	r1, r4
 8007850:	3128      	adds	r1, #40	; 0x28
 8007852:	320f      	adds	r2, #15
 8007854:	f00b faa7 	bl	8012da6 <memcpy>
 8007858:	e759      	b.n	800770e <ExecuteMonitor+0x86>
                	finalMatrixIndex=0;
 800785a:	2300      	movs	r3, #0
 800785c:	4a68      	ldr	r2, [pc, #416]	; (8007a00 <ExecuteMonitor+0x378>)
 800785e:	7013      	strb	r3, [r2, #0]
                	twoDMatrixIndex=1;
 8007860:	4a68      	ldr	r2, [pc, #416]	; (8007a04 <ExecuteMonitor+0x37c>)
 8007862:	2101      	movs	r1, #1
 8007864:	7011      	strb	r1, [r2, #0]
		          	counter=0;
 8007866:	4a68      	ldr	r2, [pc, #416]	; (8007a08 <ExecuteMonitor+0x380>)
 8007868:	7013      	strb	r3, [r2, #0]
		           while(counter != numCommandParameters)
 800786a:	e006      	b.n	800787a <ExecuteMonitor+0x1f2>
		                   counter++;
 800786c:	4a66      	ldr	r2, [pc, #408]	; (8007a08 <ExecuteMonitor+0x380>)
 800786e:	7813      	ldrb	r3, [r2, #0]
 8007870:	3301      	adds	r3, #1
 8007872:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 8007874:	4b63      	ldr	r3, [pc, #396]	; (8007a04 <ExecuteMonitor+0x37c>)
 8007876:	2201      	movs	r2, #1
 8007878:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 800787a:	4b63      	ldr	r3, [pc, #396]	; (8007a08 <ExecuteMonitor+0x380>)
 800787c:	781a      	ldrb	r2, [r3, #0]
 800787e:	4b5f      	ldr	r3, [pc, #380]	; (80079fc <ExecuteMonitor+0x374>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d020      	beq.n	80078c8 <ExecuteMonitor+0x240>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007886:	4b60      	ldr	r3, [pc, #384]	; (8007a08 <ExecuteMonitor+0x380>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	4a5e      	ldr	r2, [pc, #376]	; (8007a04 <ExecuteMonitor+0x37c>)
 800788c:	7810      	ldrb	r0, [r2, #0]
 800788e:	1c41      	adds	r1, r0, #1
 8007890:	7011      	strb	r1, [r2, #0]
 8007892:	4d5b      	ldr	r5, [pc, #364]	; (8007a00 <ExecuteMonitor+0x378>)
 8007894:	782a      	ldrb	r2, [r5, #0]
 8007896:	1c51      	adds	r1, r2, #1
 8007898:	7029      	strb	r1, [r5, #0]
 800789a:	0119      	lsls	r1, r3, #4
 800789c:	1ac9      	subs	r1, r1, r3
 800789e:	4b53      	ldr	r3, [pc, #332]	; (80079ec <ExecuteMonitor+0x364>)
 80078a0:	185b      	adds	r3, r3, r1
 80078a2:	181b      	adds	r3, r3, r0
 80078a4:	214c      	movs	r1, #76	; 0x4c
 80078a6:	5c5b      	ldrb	r3, [r3, r1]
 80078a8:	4c58      	ldr	r4, [pc, #352]	; (8007a0c <ExecuteMonitor+0x384>)
 80078aa:	2644      	movs	r6, #68	; 0x44
 80078ac:	18a2      	adds	r2, r4, r2
 80078ae:	5593      	strb	r3, [r2, r6]
		            	Delay_ms(1);
 80078b0:	2001      	movs	r0, #1
 80078b2:	f007 ff71 	bl	800f798 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80078b6:	782b      	ldrb	r3, [r5, #0]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	18e4      	adds	r4, r4, r3
 80078bc:	5da3      	ldrb	r3, [r4, r6]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0d4      	beq.n	800786c <ExecuteMonitor+0x1e4>
 80078c2:	2b20      	cmp	r3, #32
 80078c4:	d1df      	bne.n	8007886 <ExecuteMonitor+0x1fe>
 80078c6:	e7d1      	b.n	800786c <ExecuteMonitor+0x1e4>
		          		   flag=0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	4a45      	ldr	r2, [pc, #276]	; (80079e0 <ExecuteMonitor+0x358>)
 80078cc:	7113      	strb	r3, [r2, #4]
		          		   counter=0;
 80078ce:	4a4e      	ldr	r2, [pc, #312]	; (8007a08 <ExecuteMonitor+0x380>)
 80078d0:	7013      	strb	r3, [r2, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80078d2:	4a4f      	ldr	r2, [pc, #316]	; (8007a10 <ExecuteMonitor+0x388>)
 80078d4:	7013      	strb	r3, [r2, #0]
 80078d6:	e00f      	b.n	80078f8 <ExecuteMonitor+0x270>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80078d8:	4b4c      	ldr	r3, [pc, #304]	; (8007a0c <ExecuteMonitor+0x384>)
 80078da:	189b      	adds	r3, r3, r2
 80078dc:	2144      	movs	r1, #68	; 0x44
 80078de:	5c59      	ldrb	r1, [r3, r1]
 80078e0:	4b4c      	ldr	r3, [pc, #304]	; (8007a14 <ExecuteMonitor+0x38c>)
 80078e2:	189b      	adds	r3, r3, r2
 80078e4:	3381      	adds	r3, #129	; 0x81
 80078e6:	33ff      	adds	r3, #255	; 0xff
 80078e8:	7019      	strb	r1, [r3, #0]
		          			Delay_ms(1);
 80078ea:	2001      	movs	r0, #1
 80078ec:	f007 ff54 	bl	800f798 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80078f0:	4a47      	ldr	r2, [pc, #284]	; (8007a10 <ExecuteMonitor+0x388>)
 80078f2:	7813      	ldrb	r3, [r2, #0]
 80078f4:	3301      	adds	r3, #1
 80078f6:	7013      	strb	r3, [r2, #0]
 80078f8:	4b45      	ldr	r3, [pc, #276]	; (8007a10 <ExecuteMonitor+0x388>)
 80078fa:	781a      	ldrb	r2, [r3, #0]
 80078fc:	2a3f      	cmp	r2, #63	; 0x3f
 80078fe:	d9eb      	bls.n	80078d8 <ExecuteMonitor+0x250>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007900:	4842      	ldr	r0, [pc, #264]	; (8007a0c <ExecuteMonitor+0x384>)
 8007902:	2240      	movs	r2, #64	; 0x40
 8007904:	2100      	movs	r1, #0
 8007906:	3044      	adds	r0, #68	; 0x44
 8007908:	f00b fa56 	bl	8012db8 <memset>
 800790c:	e723      	b.n	8007756 <ExecuteMonitor+0xce>
		           {
                	finalMatrixIndex=0;
 800790e:	2300      	movs	r3, #0
 8007910:	4a3b      	ldr	r2, [pc, #236]	; (8007a00 <ExecuteMonitor+0x378>)
 8007912:	7013      	strb	r3, [r2, #0]
                	twoDMatrixIndex=1;
 8007914:	4a3b      	ldr	r2, [pc, #236]	; (8007a04 <ExecuteMonitor+0x37c>)
 8007916:	2101      	movs	r1, #1
 8007918:	7011      	strb	r1, [r2, #0]
   		          	counter=0;
 800791a:	4a3b      	ldr	r2, [pc, #236]	; (8007a08 <ExecuteMonitor+0x380>)
 800791c:	7013      	strb	r3, [r2, #0]
   		           while(counter != numCommandParameters)
 800791e:	e006      	b.n	800792e <ExecuteMonitor+0x2a6>
   		            	Delay_ms(1);
   		          }

   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);

   		             counter++;
 8007920:	4a39      	ldr	r2, [pc, #228]	; (8007a08 <ExecuteMonitor+0x380>)
 8007922:	7813      	ldrb	r3, [r2, #0]
 8007924:	3301      	adds	r3, #1
 8007926:	7013      	strb	r3, [r2, #0]
   		             twoDMatrixIndex=1;
 8007928:	4b36      	ldr	r3, [pc, #216]	; (8007a04 <ExecuteMonitor+0x37c>)
 800792a:	2201      	movs	r2, #1
 800792c:	701a      	strb	r2, [r3, #0]
   		           while(counter != numCommandParameters)
 800792e:	4b36      	ldr	r3, [pc, #216]	; (8007a08 <ExecuteMonitor+0x380>)
 8007930:	781a      	ldrb	r2, [r3, #0]
 8007932:	4b32      	ldr	r3, [pc, #200]	; (80079fc <ExecuteMonitor+0x374>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	429a      	cmp	r2, r3
 8007938:	d020      	beq.n	800797c <ExecuteMonitor+0x2f4>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800793a:	4b33      	ldr	r3, [pc, #204]	; (8007a08 <ExecuteMonitor+0x380>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	4a31      	ldr	r2, [pc, #196]	; (8007a04 <ExecuteMonitor+0x37c>)
 8007940:	7810      	ldrb	r0, [r2, #0]
 8007942:	1c41      	adds	r1, r0, #1
 8007944:	7011      	strb	r1, [r2, #0]
 8007946:	4d2e      	ldr	r5, [pc, #184]	; (8007a00 <ExecuteMonitor+0x378>)
 8007948:	782a      	ldrb	r2, [r5, #0]
 800794a:	1c51      	adds	r1, r2, #1
 800794c:	7029      	strb	r1, [r5, #0]
 800794e:	0119      	lsls	r1, r3, #4
 8007950:	1ac9      	subs	r1, r1, r3
 8007952:	4b26      	ldr	r3, [pc, #152]	; (80079ec <ExecuteMonitor+0x364>)
 8007954:	185b      	adds	r3, r3, r1
 8007956:	181b      	adds	r3, r3, r0
 8007958:	214c      	movs	r1, #76	; 0x4c
 800795a:	5c5b      	ldrb	r3, [r3, r1]
 800795c:	4c2b      	ldr	r4, [pc, #172]	; (8007a0c <ExecuteMonitor+0x384>)
 800795e:	2644      	movs	r6, #68	; 0x44
 8007960:	18a2      	adds	r2, r4, r2
 8007962:	5593      	strb	r3, [r2, r6]
   		            	Delay_ms(1);
 8007964:	2001      	movs	r0, #1
 8007966:	f007 ff17 	bl	800f798 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800796a:	782b      	ldrb	r3, [r5, #0]
 800796c:	3b01      	subs	r3, #1
 800796e:	18e4      	adds	r4, r4, r3
 8007970:	5da3      	ldrb	r3, [r4, r6]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0d4      	beq.n	8007920 <ExecuteMonitor+0x298>
 8007976:	2b20      	cmp	r3, #32
 8007978:	d1df      	bne.n	800793a <ExecuteMonitor+0x2b2>
 800797a:	e7d1      	b.n	8007920 <ExecuteMonitor+0x298>
   		          }
		            counter=0;
 800797c:	4b22      	ldr	r3, [pc, #136]	; (8007a08 <ExecuteMonitor+0x380>)
 800797e:	2200      	movs	r2, #0
 8007980:	701a      	strb	r2, [r3, #0]
                  while(flag != NonActive)
 8007982:	e017      	b.n	80079b4 <ExecuteMonitor+0x32c>
                  {
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
		          		 					  {
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007984:	4b21      	ldr	r3, [pc, #132]	; (8007a0c <ExecuteMonitor+0x384>)
 8007986:	189b      	adds	r3, r3, r2
 8007988:	2144      	movs	r1, #68	; 0x44
 800798a:	5c59      	ldrb	r1, [r3, r1]
 800798c:	4b21      	ldr	r3, [pc, #132]	; (8007a14 <ExecuteMonitor+0x38c>)
 800798e:	189b      	adds	r3, r3, r2
 8007990:	3381      	adds	r3, #129	; 0x81
 8007992:	33ff      	adds	r3, #255	; 0xff
 8007994:	7019      	strb	r1, [r3, #0]
		          			Delay_us(200);
 8007996:	20c8      	movs	r0, #200	; 0xc8
 8007998:	f005 fc5a 	bl	800d250 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800799c:	4a1c      	ldr	r2, [pc, #112]	; (8007a10 <ExecuteMonitor+0x388>)
 800799e:	7813      	ldrb	r3, [r2, #0]
 80079a0:	3301      	adds	r3, #1
 80079a2:	7013      	strb	r3, [r2, #0]
 80079a4:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <ExecuteMonitor+0x388>)
 80079a6:	781a      	ldrb	r2, [r3, #0]
 80079a8:	2a3f      	cmp	r2, #63	; 0x3f
 80079aa:	d9eb      	bls.n	8007984 <ExecuteMonitor+0x2fc>
		          		 					  }
  	          		 Delay_ms(Monitor_time);
 80079ac:	4b0c      	ldr	r3, [pc, #48]	; (80079e0 <ExecuteMonitor+0x358>)
 80079ae:	6818      	ldr	r0, [r3, #0]
 80079b0:	f007 fef2 	bl	800f798 <HAL_Delay>
                  while(flag != NonActive)
 80079b4:	4b0a      	ldr	r3, [pc, #40]	; (80079e0 <ExecuteMonitor+0x358>)
 80079b6:	791b      	ldrb	r3, [r3, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <ExecuteMonitor+0x33c>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80079bc:	4b14      	ldr	r3, [pc, #80]	; (8007a10 <ExecuteMonitor+0x388>)
 80079be:	2200      	movs	r2, #0
 80079c0:	701a      	strb	r2, [r3, #0]
 80079c2:	e7ef      	b.n	80079a4 <ExecuteMonitor+0x31c>
                  }
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 80079c4:	4811      	ldr	r0, [pc, #68]	; (8007a0c <ExecuteMonitor+0x384>)
 80079c6:	2240      	movs	r2, #64	; 0x40
 80079c8:	2100      	movs	r1, #0
 80079ca:	3044      	adds	r0, #68	; 0x44
 80079cc:	f00b f9f4 	bl	8012db8 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 80079d0:	22c0      	movs	r2, #192	; 0xc0
 80079d2:	2100      	movs	r1, #0
 80079d4:	4810      	ldr	r0, [pc, #64]	; (8007a18 <ExecuteMonitor+0x390>)
 80079d6:	f00b f9ef 	bl	8012db8 <memset>
 80079da:	e6c1      	b.n	8007760 <ExecuteMonitor+0xd8>
		           }
	}
  }
}
 80079dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079de:	46c0      	nop			; (mov r8, r8)
 80079e0:	20000000 	.word	0x20000000
 80079e4:	200068c8 	.word	0x200068c8
 80079e8:	200068e9 	.word	0x200068e9
 80079ec:	20001c9c 	.word	0x20001c9c
 80079f0:	2000690b 	.word	0x2000690b
 80079f4:	2000690a 	.word	0x2000690a
 80079f8:	200068e8 	.word	0x200068e8
 80079fc:	20006908 	.word	0x20006908
 8007a00:	2000690c 	.word	0x2000690c
 8007a04:	20006909 	.word	0x20006909
 8007a08:	200068ea 	.word	0x200068ea
 8007a0c:	20001d1c 	.word	0x20001d1c
 8007a10:	200068c9 	.word	0x200068c9
 8007a14:	200018d4 	.word	0x200018d4
 8007a18:	20001a54 	.word	0x20001a54

08007a1c <StartDefaultTask>:
void StartDefaultTask(void *argument){
 8007a1c:	b510      	push	{r4, lr}
 8007a1e:	e020      	b.n	8007a62 <StartDefaultTask+0x46>
				RTOS_IND_blink(200);
 8007a20:	2490      	movs	r4, #144	; 0x90
 8007a22:	05e4      	lsls	r4, r4, #23
 8007a24:	2201      	movs	r2, #1
 8007a26:	2140      	movs	r1, #64	; 0x40
 8007a28:	0020      	movs	r0, r4
 8007a2a:	f009 fa6c 	bl	8010f06 <HAL_GPIO_WritePin>
 8007a2e:	20c8      	movs	r0, #200	; 0xc8
 8007a30:	f005 ffb8 	bl	800d9a4 <osDelay>
 8007a34:	2200      	movs	r2, #0
 8007a36:	2140      	movs	r1, #64	; 0x40
 8007a38:	0020      	movs	r0, r4
 8007a3a:	f009 fa64 	bl	8010f06 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007a3e:	4b20      	ldr	r3, [pc, #128]	; (8007ac0 <StartDefaultTask+0xa4>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
		CheckAttachedButtons();
 8007a44:	f004 fdf0 	bl	800c628 <CheckAttachedButtons>
		ExecuteSnippet();
 8007a48:	f7fd fd0e 	bl	8005468 <ExecuteSnippet>
		ExecuteMonitor();
 8007a4c:	f7ff fe1c 	bl	8007688 <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 8007a50:	4b1c      	ldr	r3, [pc, #112]	; (8007ac4 <StartDefaultTask+0xa8>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d102      	bne.n	8007a5e <StartDefaultTask+0x42>
			delayButtonStateReset = false;
 8007a58:	4b1b      	ldr	r3, [pc, #108]	; (8007ac8 <StartDefaultTask+0xac>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	701a      	strb	r2, [r3, #0]
		taskYIELD();
 8007a5e:	f007 fd39 	bl	800f4d4 <vPortYield>
		switch(indMode){
 8007a62:	4b17      	ldr	r3, [pc, #92]	; (8007ac0 <StartDefaultTask+0xa4>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d004      	beq.n	8007a74 <StartDefaultTask+0x58>
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d015      	beq.n	8007a9a <StartDefaultTask+0x7e>
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d1e8      	bne.n	8007a44 <StartDefaultTask+0x28>
 8007a72:	e7d5      	b.n	8007a20 <StartDefaultTask+0x4>
				RTOS_IND_blink(100);
 8007a74:	2490      	movs	r4, #144	; 0x90
 8007a76:	05e4      	lsls	r4, r4, #23
 8007a78:	2201      	movs	r2, #1
 8007a7a:	2140      	movs	r1, #64	; 0x40
 8007a7c:	0020      	movs	r0, r4
 8007a7e:	f009 fa42 	bl	8010f06 <HAL_GPIO_WritePin>
 8007a82:	2064      	movs	r0, #100	; 0x64
 8007a84:	f005 ff8e 	bl	800d9a4 <osDelay>
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2140      	movs	r1, #64	; 0x40
 8007a8c:	0020      	movs	r0, r4
 8007a8e:	f009 fa3a 	bl	8010f06 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007a92:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <StartDefaultTask+0xa4>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	701a      	strb	r2, [r3, #0]
				break;
 8007a98:	e7d4      	b.n	8007a44 <StartDefaultTask+0x28>
				RTOS_IND_blink(30);
 8007a9a:	2490      	movs	r4, #144	; 0x90
 8007a9c:	05e4      	lsls	r4, r4, #23
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	2140      	movs	r1, #64	; 0x40
 8007aa2:	0020      	movs	r0, r4
 8007aa4:	f009 fa2f 	bl	8010f06 <HAL_GPIO_WritePin>
 8007aa8:	201e      	movs	r0, #30
 8007aaa:	f005 ff7b 	bl	800d9a4 <osDelay>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2140      	movs	r1, #64	; 0x40
 8007ab2:	0020      	movs	r0, r4
 8007ab4:	f009 fa27 	bl	8010f06 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007ab8:	4b01      	ldr	r3, [pc, #4]	; (8007ac0 <StartDefaultTask+0xa4>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	701a      	strb	r2, [r3, #0]
				break;
 8007abe:	e7c1      	b.n	8007a44 <StartDefaultTask+0x28>
 8007ac0:	2000113e 	.word	0x2000113e
 8007ac4:	20002442 	.word	0x20002442
 8007ac8:	20002438 	.word	0x20002438

08007acc <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
 8007acc:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007ace:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <vMainConfigureTimerForRunTimeStats+0x14>)
 8007ad0:	6818      	ldr	r0, [r3, #0]
 8007ad2:	4904      	ldr	r1, [pc, #16]	; (8007ae4 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007ad4:	f7f8 fb3c 	bl	8000150 <__udivsi3>
 8007ad8:	4b03      	ldr	r3, [pc, #12]	; (8007ae8 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007ada:	6058      	str	r0, [r3, #4]
}
 8007adc:	bd10      	pop	{r4, pc}
 8007ade:	46c0      	nop			; (mov r8, r8)
 8007ae0:	200000a4 	.word	0x200000a4
 8007ae4:	00002710 	.word	0x00002710
 8007ae8:	20001d9c 	.word	0x20001d9c

08007aec <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 8007aec:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007aee:	4b0f      	ldr	r3, [pc, #60]	; (8007b2c <ulMainGetRunTimeCounterValue+0x40>)
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	21fa      	movs	r1, #250	; 0xfa
 8007af4:	0089      	lsls	r1, r1, #2
 8007af6:	f7f8 fb2b 	bl	8000150 <__udivsi3>
 8007afa:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007afc:	4b0c      	ldr	r3, [pc, #48]	; (8007b30 <ulMainGetRunTimeCounterValue+0x44>)
 8007afe:	681c      	ldr	r4, [r3, #0]
 8007b00:	1b2c      	subs	r4, r5, r4
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8007b02:	f006 fe73 	bl	800e7ec <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007b06:	4b0b      	ldr	r3, [pc, #44]	; (8007b34 <ulMainGetRunTimeCounterValue+0x48>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	015b      	lsls	r3, r3, #5
 8007b0c:	d503      	bpl.n	8007b16 <ulMainGetRunTimeCounterValue+0x2a>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 8007b0e:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007b10:	4b07      	ldr	r3, [pc, #28]	; (8007b30 <ulMainGetRunTimeCounterValue+0x44>)
 8007b12:	681c      	ldr	r4, [r3, #0]
 8007b14:	1b2c      	subs	r4, r5, r4
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 8007b16:	0083      	lsls	r3, r0, #2
 8007b18:	1818      	adds	r0, r3, r0
 8007b1a:	0045      	lsls	r5, r0, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007b1c:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <ulMainGetRunTimeCounterValue+0x4c>)
 8007b1e:	6859      	ldr	r1, [r3, #4]
 8007b20:	0020      	movs	r0, r4
 8007b22:	f7f8 fb15 	bl	8000150 <__udivsi3>
 8007b26:	1940      	adds	r0, r0, r5
	
	return ulReturn;
}
 8007b28:	bd70      	pop	{r4, r5, r6, pc}
 8007b2a:	46c0      	nop			; (mov r8, r8)
 8007b2c:	200000a4 	.word	0x200000a4
 8007b30:	e000e018 	.word	0xe000e018
 8007b34:	e000ed04 	.word	0xe000ed04
 8007b38:	20001d9c 	.word	0x20001d9c

08007b3c <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007b3c:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8007b3e:	f007 fc6e 	bl	800f41e <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007b42:	b2c4      	uxtb	r4, r0
 8007b44:	0020      	movs	r0, r4
 8007b46:	f002 fca5 	bl	800a494 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007b4a:	0020      	movs	r0, r4
 8007b4c:	f003 fa28 	bl	800afa0 <SwitchStreamDMAToMsg>
}
 8007b50:	bd10      	pop	{r4, pc}
	...

08007b54 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b56:	b085      	sub	sp, #20
 8007b58:	000d      	movs	r5, r1
 8007b5a:	0014      	movs	r4, r2
 8007b5c:	220f      	movs	r2, #15
 8007b5e:	446a      	add	r2, sp
 8007b60:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007b62:	aa0a      	add	r2, sp, #40	; 0x28
 8007b64:	7812      	ldrb	r2, [r2, #0]
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00d      	beq.n	8007b86 <SetupDMAStreams+0x32>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d100      	bne.n	8007b70 <SetupDMAStreams+0x1c>
 8007b6e:	e0b9      	b.n	8007ce4 <SetupDMAStreams+0x190>
 8007b70:	2a00      	cmp	r2, #0
 8007b72:	d100      	bne.n	8007b76 <SetupDMAStreams+0x22>
 8007b74:	e0b9      	b.n	8007cea <SetupDMAStreams+0x196>
	if(direction == FORWARD){
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d00a      	beq.n	8007b90 <SetupDMAStreams+0x3c>
	else if(direction == BACKWARD){
 8007b7a:	2801      	cmp	r0, #1
 8007b7c:	d041      	beq.n	8007c02 <SetupDMAStreams+0xae>
	else if(direction == BIDIRECTIONAL){
 8007b7e:	2802      	cmp	r0, #2
 8007b80:	d069      	beq.n	8007c56 <SetupDMAStreams+0x102>
		return BOS_ERR_WrongParam;
 8007b82:	2067      	movs	r0, #103	; 0x67
 8007b84:	e0af      	b.n	8007ce6 <SetupDMAStreams+0x192>
		portStatus[src] =STREAM;
 8007b86:	4a5b      	ldr	r2, [pc, #364]	; (8007cf4 <SetupDMAStreams+0x1a0>)
 8007b88:	2102      	movs	r1, #2
 8007b8a:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8007b8c:	2067      	movs	r0, #103	; 0x67
 8007b8e:	e0aa      	b.n	8007ce6 <SetupDMAStreams+0x192>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007b90:	0018      	movs	r0, r3
 8007b92:	f005 fd67 	bl	800d664 <GetUart>
 8007b96:	0006      	movs	r6, r0
 8007b98:	ab0a      	add	r3, sp, #40	; 0x28
 8007b9a:	7818      	ldrb	r0, [r3, #0]
 8007b9c:	f005 fd62 	bl	800d664 <GetUart>
 8007ba0:	0001      	movs	r1, r0
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	0030      	movs	r0, r6
 8007ba6:	f7ff fc1d 	bl	80073e4 <StartDMAstream>
 8007baa:	2817      	cmp	r0, #23
 8007bac:	d100      	bne.n	8007bb0 <SetupDMAStreams+0x5c>
 8007bae:	e09a      	b.n	8007ce6 <SetupDMAStreams+0x192>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007bb0:	0160      	lsls	r0, r4, #5
 8007bb2:	1b00      	subs	r0, r0, r4
 8007bb4:	0080      	lsls	r0, r0, #2
 8007bb6:	1900      	adds	r0, r0, r4
 8007bb8:	00c0      	lsls	r0, r0, #3
 8007bba:	21fa      	movs	r1, #250	; 0xfa
 8007bbc:	0089      	lsls	r1, r1, #2
 8007bbe:	f7f8 fac7 	bl	8000150 <__udivsi3>
 8007bc2:	0001      	movs	r1, r0
 8007bc4:	260f      	movs	r6, #15
 8007bc6:	446e      	add	r6, sp
 8007bc8:	4b4b      	ldr	r3, [pc, #300]	; (8007cf8 <SetupDMAStreams+0x1a4>)
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	0033      	movs	r3, r6
 8007bce:	2200      	movs	r2, #0
 8007bd0:	484a      	ldr	r0, [pc, #296]	; (8007cfc <SetupDMAStreams+0x1a8>)
 8007bd2:	f007 fadd 	bl	800f190 <xTimerCreate>
 8007bd6:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8007bd8:	7833      	ldrb	r3, [r6, #0]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4a48      	ldr	r2, [pc, #288]	; (8007d00 <SetupDMAStreams+0x1ac>)
 8007be0:	509d      	str	r5, [r3, r2]
	if(xTimerStream != NULL)
 8007be2:	2c00      	cmp	r4, #0
 8007be4:	d100      	bne.n	8007be8 <SetupDMAStreams+0x94>
 8007be6:	e082      	b.n	8007cee <SetupDMAStreams+0x19a>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8007be8:	f006 fdfa 	bl	800e7e0 <xTaskGetTickCount>
 8007bec:	0002      	movs	r2, r0
 8007bee:	2301      	movs	r3, #1
 8007bf0:	425b      	negs	r3, r3
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	0020      	movs	r0, r4
 8007bfa:	f007 fae7 	bl	800f1cc <xTimerGenericCommand>
	return BOS_OK;
 8007bfe:	2000      	movs	r0, #0
 8007c00:	e071      	b.n	8007ce6 <SetupDMAStreams+0x192>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007c02:	0010      	movs	r0, r2
 8007c04:	f005 fd2e 	bl	800d664 <GetUart>
 8007c08:	0006      	movs	r6, r0
 8007c0a:	230f      	movs	r3, #15
 8007c0c:	446b      	add	r3, sp
 8007c0e:	7818      	ldrb	r0, [r3, #0]
 8007c10:	f005 fd28 	bl	800d664 <GetUart>
 8007c14:	0001      	movs	r1, r0
 8007c16:	2201      	movs	r2, #1
 8007c18:	0030      	movs	r0, r6
 8007c1a:	f7ff fbe3 	bl	80073e4 <StartDMAstream>
 8007c1e:	2817      	cmp	r0, #23
 8007c20:	d061      	beq.n	8007ce6 <SetupDMAStreams+0x192>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007c22:	0160      	lsls	r0, r4, #5
 8007c24:	1b00      	subs	r0, r0, r4
 8007c26:	0080      	lsls	r0, r0, #2
 8007c28:	1900      	adds	r0, r0, r4
 8007c2a:	00c0      	lsls	r0, r0, #3
 8007c2c:	21fa      	movs	r1, #250	; 0xfa
 8007c2e:	0089      	lsls	r1, r1, #2
 8007c30:	f7f8 fa8e 	bl	8000150 <__udivsi3>
 8007c34:	0001      	movs	r1, r0
 8007c36:	4b30      	ldr	r3, [pc, #192]	; (8007cf8 <SetupDMAStreams+0x1a4>)
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	ab0a      	add	r3, sp, #40	; 0x28
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	482f      	ldr	r0, [pc, #188]	; (8007cfc <SetupDMAStreams+0x1a8>)
 8007c40:	f007 faa6 	bl	800f190 <xTimerCreate>
 8007c44:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8007c46:	230f      	movs	r3, #15
 8007c48:	446b      	add	r3, sp
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4a2b      	ldr	r2, [pc, #172]	; (8007d00 <SetupDMAStreams+0x1ac>)
 8007c52:	509d      	str	r5, [r3, r2]
 8007c54:	e7c5      	b.n	8007be2 <SetupDMAStreams+0x8e>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007c56:	0018      	movs	r0, r3
 8007c58:	f005 fd04 	bl	800d664 <GetUart>
 8007c5c:	0006      	movs	r6, r0
 8007c5e:	ab0a      	add	r3, sp, #40	; 0x28
 8007c60:	7818      	ldrb	r0, [r3, #0]
 8007c62:	f005 fcff 	bl	800d664 <GetUart>
 8007c66:	0001      	movs	r1, r0
 8007c68:	2201      	movs	r2, #1
 8007c6a:	0030      	movs	r0, r6
 8007c6c:	f7ff fbba 	bl	80073e4 <StartDMAstream>
 8007c70:	2817      	cmp	r0, #23
 8007c72:	d038      	beq.n	8007ce6 <SetupDMAStreams+0x192>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007c74:	0160      	lsls	r0, r4, #5
 8007c76:	1b00      	subs	r0, r0, r4
 8007c78:	0080      	lsls	r0, r0, #2
 8007c7a:	1900      	adds	r0, r0, r4
 8007c7c:	00c0      	lsls	r0, r0, #3
 8007c7e:	21fa      	movs	r1, #250	; 0xfa
 8007c80:	0089      	lsls	r1, r1, #2
 8007c82:	f7f8 fa65 	bl	8000150 <__udivsi3>
 8007c86:	0004      	movs	r4, r0
 8007c88:	260f      	movs	r6, #15
 8007c8a:	446e      	add	r6, sp
 8007c8c:	4b1a      	ldr	r3, [pc, #104]	; (8007cf8 <SetupDMAStreams+0x1a4>)
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	0033      	movs	r3, r6
 8007c92:	2200      	movs	r2, #0
 8007c94:	0001      	movs	r1, r0
 8007c96:	4819      	ldr	r0, [pc, #100]	; (8007cfc <SetupDMAStreams+0x1a8>)
 8007c98:	f007 fa7a 	bl	800f190 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007c9c:	7833      	ldrb	r3, [r6, #0]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4a17      	ldr	r2, [pc, #92]	; (8007d00 <SetupDMAStreams+0x1ac>)
 8007ca4:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007ca6:	ab0a      	add	r3, sp, #40	; 0x28
 8007ca8:	7818      	ldrb	r0, [r3, #0]
 8007caa:	f005 fcdb 	bl	800d664 <GetUart>
 8007cae:	0007      	movs	r7, r0
 8007cb0:	7830      	ldrb	r0, [r6, #0]
 8007cb2:	f005 fcd7 	bl	800d664 <GetUart>
 8007cb6:	0001      	movs	r1, r0
 8007cb8:	2201      	movs	r2, #1
 8007cba:	0038      	movs	r0, r7
 8007cbc:	f7ff fb92 	bl	80073e4 <StartDMAstream>
 8007cc0:	2817      	cmp	r0, #23
 8007cc2:	d010      	beq.n	8007ce6 <SetupDMAStreams+0x192>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007cc4:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <SetupDMAStreams+0x1a4>)
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	ab0a      	add	r3, sp, #40	; 0x28
 8007cca:	2200      	movs	r2, #0
 8007ccc:	0021      	movs	r1, r4
 8007cce:	480b      	ldr	r0, [pc, #44]	; (8007cfc <SetupDMAStreams+0x1a8>)
 8007cd0:	f007 fa5e 	bl	800f190 <xTimerCreate>
 8007cd4:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 8007cd6:	ab0a      	add	r3, sp, #40	; 0x28
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4a08      	ldr	r2, [pc, #32]	; (8007d00 <SetupDMAStreams+0x1ac>)
 8007ce0:	509d      	str	r5, [r3, r2]
 8007ce2:	e77e      	b.n	8007be2 <SetupDMAStreams+0x8e>
		return BOS_ERR_WrongParam;
 8007ce4:	2067      	movs	r0, #103	; 0x67
}
 8007ce6:	b005      	add	sp, #20
 8007ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 8007cea:	2067      	movs	r0, #103	; 0x67
 8007cec:	e7fb      	b.n	8007ce6 <SetupDMAStreams+0x192>
	return BOS_OK;
 8007cee:	2000      	movs	r0, #0
 8007cf0:	e7f9      	b.n	8007ce6 <SetupDMAStreams+0x192>
 8007cf2:	46c0      	nop			; (mov r8, r8)
 8007cf4:	20000c2c 	.word	0x20000c2c
 8007cf8:	08007b3d 	.word	0x08007b3d
 8007cfc:	0801a2cc 	.word	0x0801a2cc
 8007d00:	20001878 	.word	0x20001878

08007d04 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007d04:	b510      	push	{r4, lr}
	switch(port){
 8007d06:	2805      	cmp	r0, #5
 8007d08:	d80a      	bhi.n	8007d20 <NotifyMessagingTask+0x1c>
 8007d0a:	0080      	lsls	r0, r0, #2
 8007d0c:	4b15      	ldr	r3, [pc, #84]	; (8007d64 <NotifyMessagingTask+0x60>)
 8007d0e:	581b      	ldr	r3, [r3, r0]
 8007d10:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
			xTaskNotifyGive(P1MsgTaskHandle)
 8007d12:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <NotifyMessagingTask+0x64>)
 8007d14:	6818      	ldr	r0, [r3, #0]
 8007d16:	2300      	movs	r3, #0
 8007d18:	2202      	movs	r2, #2
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	f007 f96a 	bl	800eff4 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8007d20:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle)
 8007d22:	4b12      	ldr	r3, [pc, #72]	; (8007d6c <NotifyMessagingTask+0x68>)
 8007d24:	6818      	ldr	r0, [r3, #0]
 8007d26:	2300      	movs	r3, #0
 8007d28:	2202      	movs	r2, #2
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	f007 f962 	bl	800eff4 <xTaskGenericNotify>
			break;
 8007d30:	e7f6      	b.n	8007d20 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007d32:	4b0f      	ldr	r3, [pc, #60]	; (8007d70 <NotifyMessagingTask+0x6c>)
 8007d34:	6818      	ldr	r0, [r3, #0]
 8007d36:	2300      	movs	r3, #0
 8007d38:	2202      	movs	r2, #2
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	f007 f95a 	bl	800eff4 <xTaskGenericNotify>
			break;
 8007d40:	e7ee      	b.n	8007d20 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle)
 8007d42:	4b0c      	ldr	r3, [pc, #48]	; (8007d74 <NotifyMessagingTask+0x70>)
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	2300      	movs	r3, #0
 8007d48:	2202      	movs	r2, #2
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	f007 f952 	bl	800eff4 <xTaskGenericNotify>
			break;
 8007d50:	e7e6      	b.n	8007d20 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle)
 8007d52:	4b09      	ldr	r3, [pc, #36]	; (8007d78 <NotifyMessagingTask+0x74>)
 8007d54:	6818      	ldr	r0, [r3, #0]
 8007d56:	2300      	movs	r3, #0
 8007d58:	2202      	movs	r2, #2
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	f007 f94a 	bl	800eff4 <xTaskGenericNotify>
}
 8007d60:	e7de      	b.n	8007d20 <NotifyMessagingTask+0x1c>
 8007d62:	46c0      	nop			; (mov r8, r8)
 8007d64:	080179b4 	.word	0x080179b4
 8007d68:	20001cac 	.word	0x20001cac
 8007d6c:	20001cb0 	.word	0x20001cb0
 8007d70:	20001cb4 	.word	0x20001cb4
 8007d74:	20001cb8 	.word	0x20001cb8
 8007d78:	20001cbc 	.word	0x20001cbc

08007d7c <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d7e:	46de      	mov	lr, fp
 8007d80:	4657      	mov	r7, sl
 8007d82:	464e      	mov	r6, r9
 8007d84:	4645      	mov	r5, r8
 8007d86:	b5e0      	push	{r5, r6, r7, lr}
 8007d88:	b085      	sub	sp, #20
 8007d8a:	0005      	movs	r5, r0
 8007d8c:	4689      	mov	r9, r1
 8007d8e:	0016      	movs	r6, r2
 8007d90:	4698      	mov	r8, r3
 8007d92:	ab0e      	add	r3, sp, #56	; 0x38
 8007d94:	881f      	ldrh	r7, [r3, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8007d96:	0003      	movs	r3, r0
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	d100      	bne.n	8007d9e <SendMessageFromPort+0x22>
 8007d9c:	e1aa      	b.n	80080f4 <SendMessageFromPort+0x378>
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	d104      	bne.n	8007dac <SendMessageFromPort+0x30>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007da2:	2aff      	cmp	r2, #255	; 0xff
 8007da4:	d002      	beq.n	8007dac <SendMessageFromPort+0x30>
 8007da6:	2afe      	cmp	r2, #254	; 0xfe
 8007da8:	d000      	beq.n	8007dac <SendMessageFromPort+0x30>
 8007daa:	e1a5      	b.n	80080f8 <SendMessageFromPort+0x37c>
 8007dac:	2d00      	cmp	r5, #0
 8007dae:	d005      	beq.n	8007dbc <SendMessageFromPort+0x40>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8007db0:	464b      	mov	r3, r9
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d002      	beq.n	8007dbc <SendMessageFromPort+0x40>
 8007db6:	2e00      	cmp	r6, #0
 8007db8:	d100      	bne.n	8007dbc <SendMessageFromPort+0x40>
 8007dba:	e19f      	b.n	80080fc <SendMessageFromPort+0x380>
		return BOS_ERR_WrongParam;
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	f006 fc73 	bl	800e6a8 <uxTaskPriorityGet>
 8007dc2:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007dc4:	2105      	movs	r1, #5
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	f006 fc7e 	bl	800e6c8 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 8007dcc:	4bcd      	ldr	r3, [pc, #820]	; (8008104 <SendMessageFromPort+0x388>)
 8007dce:	2248      	movs	r2, #72	; 0x48
 8007dd0:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8007dd2:	3212      	adds	r2, #18
 8007dd4:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	432b      	orrs	r3, r5
 8007dda:	d103      	bne.n	8007de4 <SendMessageFromPort+0x68>
 8007ddc:	1cb3      	adds	r3, r6, #2
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d902      	bls.n	8007dea <SendMessageFromPort+0x6e>
 8007de4:	4643      	mov	r3, r8
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d12e      	bne.n	8007e48 <SendMessageFromPort+0xcc>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 8007dea:	3f01      	subs	r7, #1
 8007dec:	4bc6      	ldr	r3, [pc, #792]	; (8008108 <SendMessageFromPort+0x38c>)
 8007dee:	5ddc      	ldrb	r4, [r3, r7]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007df0:	00fb      	lsls	r3, r7, #3
 8007df2:	1bdf      	subs	r7, r3, r7
 8007df4:	00f9      	lsls	r1, r7, #3
 8007df6:	4bc5      	ldr	r3, [pc, #788]	; (800810c <SendMessageFromPort+0x390>)
 8007df8:	18c9      	adds	r1, r1, r3
 8007dfa:	0022      	movs	r2, r4
 8007dfc:	48c4      	ldr	r0, [pc, #784]	; (8008110 <SendMessageFromPort+0x394>)
 8007dfe:	f00a ffd2 	bl	8012da6 <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 8007e02:	4bc0      	ldr	r3, [pc, #768]	; (8008104 <SendMessageFromPort+0x388>)
 8007e04:	469a      	mov	sl, r3
 8007e06:	709c      	strb	r4, [r3, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 8007e08:	1ce7      	adds	r7, r4, #3
 8007e0a:	003a      	movs	r2, r7
 8007e0c:	0019      	movs	r1, r3
 8007e0e:	48c1      	ldr	r0, [pc, #772]	; (8008114 <SendMessageFromPort+0x398>)
 8007e10:	f00a ffc9 	bl	8012da6 <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007e14:	b2a4      	uxth	r4, r4
 8007e16:	1ce1      	adds	r1, r4, #3
 8007e18:	b289      	uxth	r1, r1
 8007e1a:	48be      	ldr	r0, [pc, #760]	; (8008114 <SendMessageFromPort+0x398>)
 8007e1c:	f003 f934 	bl	800b088 <CalculateCRC8>
 8007e20:	4653      	mov	r3, sl
 8007e22:	55d8      	strb	r0, [r3, r7]
	/* end of crc calculation function addition */

	memset(crcBuffer,0,sizeof(crcBuffer));
 8007e24:	2238      	movs	r2, #56	; 0x38
 8007e26:	2100      	movs	r1, #0
 8007e28:	48ba      	ldr	r0, [pc, #744]	; (8008114 <SendMessageFromPort+0x398>)
 8007e2a:	f00a ffc5 	bl	8012db8 <memset>
	
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007e2e:	3602      	adds	r6, #2
 8007e30:	b2f6      	uxtb	r6, r6
 8007e32:	2e01      	cmp	r6, #1
 8007e34:	d800      	bhi.n	8007e38 <SendMessageFromPort+0xbc>
 8007e36:	e125      	b.n	8008084 <SendMessageFromPort+0x308>
		/* Transmit the message - single-cast */

		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007e38:	4643      	mov	r3, r8
 8007e3a:	3b2c      	subs	r3, #44	; 0x2c
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d800      	bhi.n	8007e44 <SendMessageFromPort+0xc8>
 8007e42:	e0e3      	b.n	800800c <SendMessageFromPort+0x290>
			Send_BOS_Message(port,message,length + 4,cmd50ms);
		}
		else{

			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007e44:	2600      	movs	r6, #0
 8007e46:	e104      	b.n	8008052 <SendMessageFromPort+0x2d6>
		if(src == 0)
 8007e48:	464b      	mov	r3, r9
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d102      	bne.n	8007e54 <SendMessageFromPort+0xd8>
			src =myID;
 8007e4e:	4bb2      	ldr	r3, [pc, #712]	; (8008118 <SendMessageFromPort+0x39c>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	4699      	mov	r9, r3
		if(code > 0xFF)
 8007e54:	4643      	mov	r3, r8
 8007e56:	2bff      	cmp	r3, #255	; 0xff
 8007e58:	d84e      	bhi.n	8007ef8 <SendMessageFromPort+0x17c>
	bool extendOptions = false, extendCode = false;
 8007e5a:	2100      	movs	r1, #0
		message[2] =length;
 8007e5c:	4aa9      	ldr	r2, [pc, #676]	; (8008104 <SendMessageFromPort+0x388>)
 8007e5e:	2300      	movs	r3, #0
 8007e60:	7093      	strb	r3, [r2, #2]
		message[3] =dst;
 8007e62:	70d6      	strb	r6, [r2, #3]
		message[4] =src;
 8007e64:	464b      	mov	r3, r9
 8007e66:	7113      	strb	r3, [r2, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007e68:	48ac      	ldr	r0, [pc, #688]	; (800811c <SendMessageFromPort+0x3a0>)
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	56c3      	ldrsb	r3, [r0, r3]
 8007e6e:	7904      	ldrb	r4, [r0, #4]
 8007e70:	0124      	lsls	r4, r4, #4
 8007e72:	4323      	orrs	r3, r4
 8007e74:	b25b      	sxtb	r3, r3
 8007e76:	7840      	ldrb	r0, [r0, #1]
 8007e78:	0080      	lsls	r0, r0, #2
 8007e7a:	4303      	orrs	r3, r0
 8007e7c:	b25b      	sxtb	r3, r3
 8007e7e:	0048      	lsls	r0, r1, #1
 8007e80:	4303      	orrs	r3, r0
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	7153      	strb	r3, [r2, #5]
		message[6 + shift] =(uint8_t )code;
 8007e86:	4640      	mov	r0, r8
 8007e88:	7190      	strb	r0, [r2, #6]
		if(extendCode == true){
 8007e8a:	2900      	cmp	r1, #0
 8007e8c:	d036      	beq.n	8007efc <SendMessageFromPort+0x180>
			message[6 + shift] =(uint8_t )(code >> 8);
 8007e8e:	0a02      	lsrs	r2, r0, #8
 8007e90:	499c      	ldr	r1, [pc, #624]	; (8008104 <SendMessageFromPort+0x388>)
 8007e92:	71ca      	strb	r2, [r1, #7]
			++shift;
 8007e94:	2201      	movs	r2, #1
 8007e96:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8007e98:	2f2e      	cmp	r7, #46	; 0x2e
 8007e9a:	d932      	bls.n	8007f02 <SendMessageFromPort+0x186>
			message[5] |=0x80;
 8007e9c:	2280      	movs	r2, #128	; 0x80
 8007e9e:	4252      	negs	r2, r2
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	4a98      	ldr	r2, [pc, #608]	; (8008104 <SendMessageFromPort+0x388>)
 8007ea4:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 8007ea6:	4b9e      	ldr	r3, [pc, #632]	; (8008120 <SendMessageFromPort+0x3a4>)
 8007ea8:	805f      	strh	r7, [r3, #2]
	uint8_t length =0, shift =0;
 8007eaa:	2400      	movs	r4, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 8007eac:	272e      	movs	r7, #46	; 0x2e
			while(totalNumberOfParams != 0){
 8007eae:	4b9c      	ldr	r3, [pc, #624]	; (8008120 <SendMessageFromPort+0x3a4>)
 8007eb0:	885b      	ldrh	r3, [r3, #2]
 8007eb2:	469a      	mov	sl, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d034      	beq.n	8007f22 <SendMessageFromPort+0x1a6>
				if((totalNumberOfParams / numberOfParams) >= 1){
 8007eb8:	0039      	movs	r1, r7
 8007eba:	4650      	mov	r0, sl
 8007ebc:	f7f8 f948 	bl	8000150 <__udivsi3>
 8007ec0:	b280      	uxth	r0, r0
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d13a      	bne.n	8007f3c <SendMessageFromPort+0x1c0>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007ec6:	488f      	ldr	r0, [pc, #572]	; (8008104 <SendMessageFromPort+0x388>)
 8007ec8:	7942      	ldrb	r2, [r0, #5]
 8007eca:	237f      	movs	r3, #127	; 0x7f
 8007ecc:	4013      	ands	r3, r2
 8007ece:	7143      	strb	r3, [r0, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007ed0:	465b      	mov	r3, fp
 8007ed2:	3307      	adds	r3, #7
 8007ed4:	1818      	adds	r0, r3, r0
 8007ed6:	4c92      	ldr	r4, [pc, #584]	; (8008120 <SendMessageFromPort+0x3a4>)
 8007ed8:	8821      	ldrh	r1, [r4, #0]
 8007eda:	4b92      	ldr	r3, [pc, #584]	; (8008124 <SendMessageFromPort+0x3a8>)
 8007edc:	18c9      	adds	r1, r1, r3
 8007ede:	4652      	mov	r2, sl
 8007ee0:	f00a ff61 	bl	8012da6 <memcpy>
					ptrShift =0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	8023      	strh	r3, [r4, #0]
					totalNumberOfParams =0;
 8007ee8:	8063      	strh	r3, [r4, #2]
					length =numberOfParams + shift + 4;
 8007eea:	465c      	mov	r4, fp
 8007eec:	4454      	add	r4, sl
 8007eee:	b2e4      	uxtb	r4, r4
 8007ef0:	3404      	adds	r4, #4
 8007ef2:	b2e4      	uxtb	r4, r4
					numberOfParams =totalNumberOfParams;
 8007ef4:	4657      	mov	r7, sl
 8007ef6:	e7da      	b.n	8007eae <SendMessageFromPort+0x132>
			extendCode = true;
 8007ef8:	2101      	movs	r1, #1
 8007efa:	e7af      	b.n	8007e5c <SendMessageFromPort+0xe0>
 8007efc:	2200      	movs	r2, #0
 8007efe:	4693      	mov	fp, r2
 8007f00:	e7ca      	b.n	8007e98 <SendMessageFromPort+0x11c>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007f02:	465b      	mov	r3, fp
 8007f04:	3307      	adds	r3, #7
 8007f06:	487f      	ldr	r0, [pc, #508]	; (8008104 <SendMessageFromPort+0x388>)
 8007f08:	1818      	adds	r0, r3, r0
 8007f0a:	4b85      	ldr	r3, [pc, #532]	; (8008120 <SendMessageFromPort+0x3a4>)
 8007f0c:	8819      	ldrh	r1, [r3, #0]
 8007f0e:	4b85      	ldr	r3, [pc, #532]	; (8008124 <SendMessageFromPort+0x3a8>)
 8007f10:	18c9      	adds	r1, r1, r3
 8007f12:	003a      	movs	r2, r7
 8007f14:	f00a ff47 	bl	8012da6 <memcpy>
			length =numberOfParams + shift + 4;
 8007f18:	465b      	mov	r3, fp
 8007f1a:	19dc      	adds	r4, r3, r7
 8007f1c:	b2e4      	uxtb	r4, r4
 8007f1e:	3404      	adds	r4, #4
 8007f20:	b2e4      	uxtb	r4, r4
		if(AddBcastPayload == true){
 8007f22:	4b81      	ldr	r3, [pc, #516]	; (8008128 <SendMessageFromPort+0x3ac>)
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d100      	bne.n	8007f2c <SendMessageFromPort+0x1b0>
 8007f2a:	e76a      	b.n	8007e02 <SendMessageFromPort+0x86>
			if(dstGroupID < BOS_BROADCAST){
 8007f2c:	4b7f      	ldr	r3, [pc, #508]	; (800812c <SendMessageFromPort+0x3b0>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	469a      	mov	sl, r3
 8007f32:	2bff      	cmp	r3, #255	; 0xff
 8007f34:	d014      	beq.n	8007f60 <SendMessageFromPort+0x1e4>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007f36:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 8007f38:	2200      	movs	r2, #0
 8007f3a:	e015      	b.n	8007f68 <SendMessageFromPort+0x1ec>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007f3c:	9700      	str	r7, [sp, #0]
 8007f3e:	4643      	mov	r3, r8
 8007f40:	0032      	movs	r2, r6
 8007f42:	4649      	mov	r1, r9
 8007f44:	0028      	movs	r0, r5
 8007f46:	f7ff ff19 	bl	8007d7c <SendMessageFromPort>
					osDelay(10);
 8007f4a:	200a      	movs	r0, #10
 8007f4c:	f005 fd2a 	bl	800d9a4 <osDelay>
					totalNumberOfParams -=numberOfParams;
 8007f50:	4b73      	ldr	r3, [pc, #460]	; (8008120 <SendMessageFromPort+0x3a4>)
 8007f52:	885a      	ldrh	r2, [r3, #2]
 8007f54:	1bd2      	subs	r2, r2, r7
 8007f56:	805a      	strh	r2, [r3, #2]
					ptrShift +=numberOfParams;
 8007f58:	881a      	ldrh	r2, [r3, #0]
 8007f5a:	18ba      	adds	r2, r7, r2
 8007f5c:	801a      	strh	r2, [r3, #0]
 8007f5e:	e7a6      	b.n	8007eae <SendMessageFromPort+0x132>
			uint8_t groupMembers =0;
 8007f60:	2200      	movs	r2, #0
 8007f62:	e022      	b.n	8007faa <SendMessageFromPort+0x22e>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007f64:	3301      	adds	r3, #1
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	4871      	ldr	r0, [pc, #452]	; (8008130 <SendMessageFromPort+0x3b4>)
 8007f6a:	7800      	ldrb	r0, [r0, #0]
 8007f6c:	4298      	cmp	r0, r3
 8007f6e:	d316      	bcc.n	8007f9e <SendMessageFromPort+0x222>
					if(InGroup(i,dstGroupID)){
 8007f70:	1e58      	subs	r0, r3, #1
 8007f72:	0040      	lsls	r0, r0, #1
 8007f74:	496f      	ldr	r1, [pc, #444]	; (8008134 <SendMessageFromPort+0x3b8>)
 8007f76:	5a40      	ldrh	r0, [r0, r1]
 8007f78:	4651      	mov	r1, sl
 8007f7a:	4108      	asrs	r0, r1
 8007f7c:	07c1      	lsls	r1, r0, #31
 8007f7e:	d5f1      	bpl.n	8007f64 <SendMessageFromPort+0x1e8>
						++groupMembers;							// Add this member
 8007f80:	3201      	adds	r2, #1
 8007f82:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8007f84:	18b8      	adds	r0, r7, r2
 8007f86:	3001      	adds	r0, #1
 8007f88:	282d      	cmp	r0, #45	; 0x2d
 8007f8a:	dd00      	ble.n	8007f8e <SendMessageFromPort+0x212>
 8007f8c:	e0b8      	b.n	8008100 <SendMessageFromPort+0x384>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007f8e:	4659      	mov	r1, fp
 8007f90:	1dc8      	adds	r0, r1, #7
 8007f92:	1838      	adds	r0, r7, r0
 8007f94:	1810      	adds	r0, r2, r0
 8007f96:	3801      	subs	r0, #1
 8007f98:	495a      	ldr	r1, [pc, #360]	; (8008104 <SendMessageFromPort+0x388>)
 8007f9a:	540b      	strb	r3, [r1, r0]
 8007f9c:	e7e2      	b.n	8007f64 <SendMessageFromPort+0x1e8>
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8007f9e:	465b      	mov	r3, fp
 8007fa0:	3307      	adds	r3, #7
 8007fa2:	18fb      	adds	r3, r7, r3
 8007fa4:	18d3      	adds	r3, r2, r3
 8007fa6:	4857      	ldr	r0, [pc, #348]	; (8008104 <SendMessageFromPort+0x388>)
 8007fa8:	54c2      	strb	r2, [r0, r3]
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8007faa:	4653      	mov	r3, sl
 8007fac:	2bff      	cmp	r3, #255	; 0xff
 8007fae:	d01c      	beq.n	8007fea <SendMessageFromPort+0x26e>
			else if(dstGroupID == BOS_BROADCAST)
 8007fb0:	4653      	mov	r3, sl
 8007fb2:	2bff      	cmp	r3, #255	; 0xff
 8007fb4:	d100      	bne.n	8007fb8 <SendMessageFromPort+0x23c>
 8007fb6:	e0c9      	b.n	800814c <SendMessageFromPort+0x3d0>
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007fb8:	18bb      	adds	r3, r7, r2
 8007fba:	3302      	adds	r3, #2
 8007fbc:	2b2d      	cmp	r3, #45	; 0x2d
 8007fbe:	dd00      	ble.n	8007fc2 <SendMessageFromPort+0x246>
 8007fc0:	e0c6      	b.n	8008150 <SendMessageFromPort+0x3d4>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007fc2:	485d      	ldr	r0, [pc, #372]	; (8008138 <SendMessageFromPort+0x3bc>)
 8007fc4:	7803      	ldrb	r3, [r0, #0]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	7003      	strb	r3, [r0, #0]
 8007fcc:	4658      	mov	r0, fp
 8007fce:	3007      	adds	r0, #7
 8007fd0:	183f      	adds	r7, r7, r0
 8007fd2:	19d7      	adds	r7, r2, r7
 8007fd4:	3701      	adds	r7, #1
 8007fd6:	484b      	ldr	r0, [pc, #300]	; (8008104 <SendMessageFromPort+0x388>)
 8007fd8:	55c3      	strb	r3, [r0, r7]
			if(dstGroupID == BOS_BROADCAST)
 8007fda:	4653      	mov	r3, sl
 8007fdc:	2bff      	cmp	r3, #255	; 0xff
 8007fde:	d012      	beq.n	8008006 <SendMessageFromPort+0x28a>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007fe0:	18a4      	adds	r4, r4, r2
 8007fe2:	b2e4      	uxtb	r4, r4
 8007fe4:	3402      	adds	r4, #2
 8007fe6:	b2e4      	uxtb	r4, r4
 8007fe8:	e70b      	b.n	8007e02 <SendMessageFromPort+0x86>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8007fea:	1c7b      	adds	r3, r7, #1
 8007fec:	2b2d      	cmp	r3, #45	; 0x2d
 8007fee:	dcdf      	bgt.n	8007fb0 <SendMessageFromPort+0x234>
				message[7 + shift + numberOfParams] =++bcastID;
 8007ff0:	4851      	ldr	r0, [pc, #324]	; (8008138 <SendMessageFromPort+0x3bc>)
 8007ff2:	7803      	ldrb	r3, [r0, #0]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	7003      	strb	r3, [r0, #0]
 8007ffa:	4658      	mov	r0, fp
 8007ffc:	3007      	adds	r0, #7
 8007ffe:	183f      	adds	r7, r7, r0
 8008000:	4840      	ldr	r0, [pc, #256]	; (8008104 <SendMessageFromPort+0x388>)
 8008002:	55c3      	strb	r3, [r0, r7]
 8008004:	e7e9      	b.n	8007fda <SendMessageFromPort+0x25e>
				length +=1;		// + bcastID
 8008006:	3401      	adds	r4, #1
 8008008:	b2e4      	uxtb	r4, r4
 800800a:	e6fa      	b.n	8007e02 <SendMessageFromPort+0x86>
			Send_BOS_Message(port,message,length + 4,cmd50ms);
 800800c:	1d22      	adds	r2, r4, #4
 800800e:	b292      	uxth	r2, r2
 8008010:	2332      	movs	r3, #50	; 0x32
 8008012:	493c      	ldr	r1, [pc, #240]	; (8008104 <SendMessageFromPort+0x388>)
 8008014:	0028      	movs	r0, r5
 8008016:	f7fa fe8f 	bl	8002d38 <Send_BOS_Message>
					break;
				if(rejected_FLAG == true)
					Send_BOS_Message(port,message,length + 4,cmd50ms);
			}
		}
		ACK_FLAG =false; rejected_FLAG=false;
 800801a:	2300      	movs	r3, #0
 800801c:	4a47      	ldr	r2, [pc, #284]	; (800813c <SendMessageFromPort+0x3c0>)
 800801e:	7013      	strb	r3, [r2, #0]
 8008020:	4a47      	ldr	r2, [pc, #284]	; (8008140 <SendMessageFromPort+0x3c4>)
 8008022:	7013      	strb	r3, [r2, #0]
			Delay_us(10);
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 8008024:	9903      	ldr	r1, [sp, #12]
 8008026:	2000      	movs	r0, #0
 8008028:	f006 fb4e 	bl	800e6c8 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 800802c:	4b45      	ldr	r3, [pc, #276]	; (8008144 <SendMessageFromPort+0x3c8>)
 800802e:	2202      	movs	r2, #2
 8008030:	701a      	strb	r2, [r3, #0]
	
	return result;
 8008032:	2000      	movs	r0, #0
}
 8008034:	b005      	add	sp, #20
 8008036:	bc3c      	pop	{r2, r3, r4, r5}
 8008038:	4690      	mov	r8, r2
 800803a:	4699      	mov	r9, r3
 800803c:	46a2      	mov	sl, r4
 800803e:	46ab      	mov	fp, r5
 8008040:	bdf0      	pop	{r4, r5, r6, r7, pc}
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 8008042:	2332      	movs	r3, #50	; 0x32
 8008044:	003a      	movs	r2, r7
 8008046:	492f      	ldr	r1, [pc, #188]	; (8008104 <SendMessageFromPort+0x388>)
 8008048:	0028      	movs	r0, r5
 800804a:	f7fa fe75 	bl	8002d38 <Send_BOS_Message>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 800804e:	3601      	adds	r6, #1
 8008050:	b2f6      	uxtb	r6, r6
 8008052:	b2b3      	uxth	r3, r6
 8008054:	4a31      	ldr	r2, [pc, #196]	; (800811c <SendMessageFromPort+0x3a0>)
 8008056:	88d2      	ldrh	r2, [r2, #6]
 8008058:	4293      	cmp	r3, r2
 800805a:	d2de      	bcs.n	800801a <SendMessageFromPort+0x29e>
				Send_BOS_Message(port,message,length + 4,cmd50ms);
 800805c:	1d27      	adds	r7, r4, #4
 800805e:	b2bf      	uxth	r7, r7
 8008060:	2332      	movs	r3, #50	; 0x32
 8008062:	003a      	movs	r2, r7
 8008064:	4927      	ldr	r1, [pc, #156]	; (8008104 <SendMessageFromPort+0x388>)
 8008066:	0028      	movs	r0, r5
 8008068:	f7fa fe66 	bl	8002d38 <Send_BOS_Message>
				osDelay(200);
 800806c:	20c8      	movs	r0, #200	; 0xc8
 800806e:	f005 fc99 	bl	800d9a4 <osDelay>
				if(ACK_FLAG == true)
 8008072:	4b32      	ldr	r3, [pc, #200]	; (800813c <SendMessageFromPort+0x3c0>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1cf      	bne.n	800801a <SendMessageFromPort+0x29e>
				if(rejected_FLAG == true)
 800807a:	4b31      	ldr	r3, [pc, #196]	; (8008140 <SendMessageFromPort+0x3c4>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0e5      	beq.n	800804e <SendMessageFromPort+0x2d2>
 8008082:	e7de      	b.n	8008042 <SendMessageFromPort+0x2c6>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8008084:	4643      	mov	r3, r8
 8008086:	2b00      	cmp	r3, #0
 8008088:	d105      	bne.n	8008096 <SendMessageFromPort+0x31a>
 800808a:	464b      	mov	r3, r9
 800808c:	2b00      	cmp	r3, #0
 800808e:	d102      	bne.n	8008096 <SendMessageFromPort+0x31a>
			src =message[4];
 8008090:	4b1c      	ldr	r3, [pc, #112]	; (8008104 <SendMessageFromPort+0x388>)
 8008092:	791b      	ldrb	r3, [r3, #4]
 8008094:	4699      	mov	r9, r3
		FindBroadcastRoutes(src);
 8008096:	4648      	mov	r0, r9
 8008098:	f7fb fc54 	bl	8003944 <FindBroadcastRoutes>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800809c:	2601      	movs	r6, #1
 800809e:	e007      	b.n	80080b0 <SendMessageFromPort+0x334>
			rejected_FLAG=false;
 80080a0:	4b27      	ldr	r3, [pc, #156]	; (8008140 <SendMessageFromPort+0x3c4>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	701a      	strb	r2, [r3, #0]
			Delay_us(10);
 80080a6:	200a      	movs	r0, #10
 80080a8:	f005 f8d2 	bl	800d250 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 80080ac:	3601      	adds	r6, #1
 80080ae:	b2f6      	uxtb	r6, r6
 80080b0:	2e05      	cmp	r6, #5
 80080b2:	d8b7      	bhi.n	8008024 <SendMessageFromPort+0x2a8>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 80080b4:	4b18      	ldr	r3, [pc, #96]	; (8008118 <SendMessageFromPort+0x39c>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	005b      	lsls	r3, r3, #1
 80080bc:	4a22      	ldr	r2, [pc, #136]	; (8008148 <SendMessageFromPort+0x3cc>)
 80080be:	5a9b      	ldrh	r3, [r3, r2]
 80080c0:	1e72      	subs	r2, r6, #1
 80080c2:	4113      	asrs	r3, r2
 80080c4:	07db      	lsls	r3, r3, #31
 80080c6:	d5eb      	bpl.n	80080a0 <SendMessageFromPort+0x324>
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 80080c8:	1d27      	adds	r7, r4, #4
 80080ca:	b2bf      	uxth	r7, r7
 80080cc:	2332      	movs	r3, #50	; 0x32
 80080ce:	003a      	movs	r2, r7
 80080d0:	490c      	ldr	r1, [pc, #48]	; (8008104 <SendMessageFromPort+0x388>)
 80080d2:	0030      	movs	r0, r6
 80080d4:	f7fa fe30 	bl	8002d38 <Send_BOS_Message>
				osDelay(200);
 80080d8:	20c8      	movs	r0, #200	; 0xc8
 80080da:	f005 fc63 	bl	800d9a4 <osDelay>
				if(rejected_FLAG == true)
 80080de:	4b18      	ldr	r3, [pc, #96]	; (8008140 <SendMessageFromPort+0x3c4>)
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d0dc      	beq.n	80080a0 <SendMessageFromPort+0x324>
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 80080e6:	2332      	movs	r3, #50	; 0x32
 80080e8:	003a      	movs	r2, r7
 80080ea:	4906      	ldr	r1, [pc, #24]	; (8008104 <SendMessageFromPort+0x388>)
 80080ec:	0028      	movs	r0, r5
 80080ee:	f7fa fe23 	bl	8002d38 <Send_BOS_Message>
 80080f2:	e7d5      	b.n	80080a0 <SendMessageFromPort+0x324>
		return BOS_ERR_WrongParam;
 80080f4:	2067      	movs	r0, #103	; 0x67
 80080f6:	e79d      	b.n	8008034 <SendMessageFromPort+0x2b8>
 80080f8:	2067      	movs	r0, #103	; 0x67
 80080fa:	e79b      	b.n	8008034 <SendMessageFromPort+0x2b8>
 80080fc:	2067      	movs	r0, #103	; 0x67
 80080fe:	e799      	b.n	8008034 <SendMessageFromPort+0x2b8>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8008100:	2069      	movs	r0, #105	; 0x69
 8008102:	e797      	b.n	8008034 <SendMessageFromPort+0x2b8>
 8008104:	20000c58 	.word	0x20000c58
 8008108:	20000c50 	.word	0x20000c50
 800810c:	20000c90 	.word	0x20000c90
 8008110:	20000c5b 	.word	0x20000c5b
 8008114:	2000189c 	.word	0x2000189c
 8008118:	20000a98 	.word	0x20000a98
 800811c:	200067c8 	.word	0x200067c8
 8008120:	20001da4 	.word	0x20001da4
 8008124:	20000b3c 	.word	0x20000b3c
 8008128:	20001110 	.word	0x20001110
 800812c:	20000050 	.word	0x20000050
 8008130:	20000008 	.word	0x20000008
 8008134:	20000a9c 	.word	0x20000a9c
 8008138:	20000c48 	.word	0x20000c48
 800813c:	2000113d 	.word	0x2000113d
 8008140:	2000113c 	.word	0x2000113c
 8008144:	20000c3c 	.word	0x20000c3c
 8008148:	20000b6c 	.word	0x20000b6c
				return BOS_ERR_MSG_DOES_NOT_FIT;
 800814c:	2069      	movs	r0, #105	; 0x69
 800814e:	e771      	b.n	8008034 <SendMessageFromPort+0x2b8>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8008150:	2069      	movs	r0, #105	; 0x69
 8008152:	e76f      	b.n	8008034 <SendMessageFromPort+0x2b8>

08008154 <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8008154:	b530      	push	{r4, r5, lr}
 8008156:	b083      	sub	sp, #12
 8008158:	0005      	movs	r5, r0
	AddBcastPayload = false;
 800815a:	4b0b      	ldr	r3, [pc, #44]	; (8008188 <ForwardReceivedMessage+0x34>)
 800815c:	2200      	movs	r2, #0
 800815e:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8008160:	1e42      	subs	r2, r0, #1
 8008162:	00d3      	lsls	r3, r2, #3
 8008164:	1a9b      	subs	r3, r3, r2
 8008166:	00da      	lsls	r2, r3, #3
 8008168:	4b08      	ldr	r3, [pc, #32]	; (800818c <ForwardReceivedMessage+0x38>)
 800816a:	5cd4      	ldrb	r4, [r2, r3]
		port =FindRoute(myID,dst);
 800816c:	4b08      	ldr	r3, [pc, #32]	; (8008190 <ForwardReceivedMessage+0x3c>)
 800816e:	7818      	ldrb	r0, [r3, #0]
 8008170:	0021      	movs	r1, r4
 8008172:	f7fb fcb1 	bl	8003ad8 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8008176:	9500      	str	r5, [sp, #0]
 8008178:	2300      	movs	r3, #0
 800817a:	0022      	movs	r2, r4
 800817c:	2100      	movs	r1, #0
 800817e:	f7ff fdfd 	bl	8007d7c <SendMessageFromPort>
}
 8008182:	2000      	movs	r0, #0
 8008184:	b003      	add	sp, #12
 8008186:	bd30      	pop	{r4, r5, pc}
 8008188:	20001110 	.word	0x20001110
 800818c:	20000c90 	.word	0x20000c90
 8008190:	20000a98 	.word	0x20000a98

08008194 <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8008194:	b500      	push	{lr}
 8008196:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8008198:	4b0c      	ldr	r3, [pc, #48]	; (80081cc <BroadcastReceivedMessage+0x38>)
 800819a:	2200      	movs	r2, #0
 800819c:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 800819e:	4b0c      	ldr	r3, [pc, #48]	; (80081d0 <BroadcastReceivedMessage+0x3c>)
 80081a0:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 80081a2:	28ff      	cmp	r0, #255	; 0xff
 80081a4:	d009      	beq.n	80081ba <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 80081a6:	9100      	str	r1, [sp, #0]
 80081a8:	2300      	movs	r3, #0
 80081aa:	22fe      	movs	r2, #254	; 0xfe
 80081ac:	2100      	movs	r1, #0
 80081ae:	2000      	movs	r0, #0
 80081b0:	f7ff fde4 	bl	8007d7c <SendMessageFromPort>
}
 80081b4:	2000      	movs	r0, #0
 80081b6:	b003      	add	sp, #12
 80081b8:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 80081ba:	9100      	str	r1, [sp, #0]
 80081bc:	2300      	movs	r3, #0
 80081be:	32ff      	adds	r2, #255	; 0xff
 80081c0:	2100      	movs	r1, #0
 80081c2:	2000      	movs	r0, #0
 80081c4:	f7ff fdda 	bl	8007d7c <SendMessageFromPort>
 80081c8:	e7f4      	b.n	80081b4 <BroadcastReceivedMessage+0x20>
 80081ca:	46c0      	nop			; (mov r8, r8)
 80081cc:	20001110 	.word	0x20001110
 80081d0:	20000050 	.word	0x20000050

080081d4 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 80081d4:	b530      	push	{r4, r5, lr}
 80081d6:	b083      	sub	sp, #12
 80081d8:	001c      	movs	r4, r3
	AddBcastPayload = true;
 80081da:	4b0f      	ldr	r3, [pc, #60]	; (8008218 <BroadcastMessage+0x44>)
 80081dc:	2501      	movs	r5, #1
 80081de:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 80081e0:	4b0e      	ldr	r3, [pc, #56]	; (800821c <BroadcastMessage+0x48>)
 80081e2:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 80081e4:	29ff      	cmp	r1, #255	; 0xff
 80081e6:	d00e      	beq.n	8008206 <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 80081e8:	9400      	str	r4, [sp, #0]
 80081ea:	0013      	movs	r3, r2
 80081ec:	22fe      	movs	r2, #254	; 0xfe
 80081ee:	0001      	movs	r1, r0
 80081f0:	2000      	movs	r0, #0
 80081f2:	f7ff fdc3 	bl	8007d7c <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 80081f6:	0022      	movs	r2, r4
 80081f8:	2100      	movs	r1, #0
 80081fa:	4809      	ldr	r0, [pc, #36]	; (8008220 <BroadcastMessage+0x4c>)
 80081fc:	f00a fddc 	bl	8012db8 <memset>
}
 8008200:	2000      	movs	r0, #0
 8008202:	b003      	add	sp, #12
 8008204:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 8008206:	9400      	str	r4, [sp, #0]
 8008208:	0013      	movs	r3, r2
 800820a:	22ff      	movs	r2, #255	; 0xff
 800820c:	0001      	movs	r1, r0
 800820e:	2000      	movs	r0, #0
 8008210:	f7ff fdb4 	bl	8007d7c <SendMessageFromPort>
 8008214:	e7ef      	b.n	80081f6 <BroadcastMessage+0x22>
 8008216:	46c0      	nop			; (mov r8, r8)
 8008218:	20001110 	.word	0x20001110
 800821c:	20000050 	.word	0x20000050
 8008220:	20000b3c 	.word	0x20000b3c

08008224 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8008224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008226:	b083      	sub	sp, #12
 8008228:	0004      	movs	r4, r0
 800822a:	000e      	movs	r6, r1
 800822c:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 800822e:	28ff      	cmp	r0, #255	; 0xff
 8008230:	d012      	beq.n	8008258 <SendMessageToModule+0x34>
				port =FindRoute(myID,dst);
 8008232:	4f0d      	ldr	r7, [pc, #52]	; (8008268 <SendMessageToModule+0x44>)
 8008234:	7838      	ldrb	r0, [r7, #0]
 8008236:	0021      	movs	r1, r4
 8008238:	f7fb fc4e 	bl	8003ad8 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 800823c:	7839      	ldrb	r1, [r7, #0]
 800823e:	9500      	str	r5, [sp, #0]
 8008240:	0033      	movs	r3, r6
 8008242:	0022      	movs	r2, r4
 8008244:	f7ff fd9a 	bl	8007d7c <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8008248:	002a      	movs	r2, r5
 800824a:	2100      	movs	r1, #0
 800824c:	4807      	ldr	r0, [pc, #28]	; (800826c <SendMessageToModule+0x48>)
 800824e:	f00a fdb3 	bl	8012db8 <memset>
}
 8008252:	2000      	movs	r0, #0
 8008254:	b003      	add	sp, #12
 8008256:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8008258:	4b03      	ldr	r3, [pc, #12]	; (8008268 <SendMessageToModule+0x44>)
 800825a:	7818      	ldrb	r0, [r3, #0]
 800825c:	0013      	movs	r3, r2
 800825e:	000a      	movs	r2, r1
 8008260:	21ff      	movs	r1, #255	; 0xff
 8008262:	f7ff ffb7 	bl	80081d4 <BroadcastMessage>
 8008266:	e7f4      	b.n	8008252 <SendMessageToModule+0x2e>
 8008268:	20000a98 	.word	0x20000a98
 800826c:	20000b3c 	.word	0x20000b3c

08008270 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8008270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008272:	46de      	mov	lr, fp
 8008274:	4657      	mov	r7, sl
 8008276:	464e      	mov	r6, r9
 8008278:	b5c0      	push	{r6, r7, lr}
 800827a:	b08a      	sub	sp, #40	; 0x28
 800827c:	9009      	str	r0, [sp, #36]	; 0x24
 800827e:	000c      	movs	r4, r1
 8008280:	9107      	str	r1, [sp, #28]
 8008282:	9208      	str	r2, [sp, #32]
 8008284:	001d      	movs	r5, r3
 8008286:	9306      	str	r3, [sp, #24]
 8008288:	ab12      	add	r3, sp, #72	; 0x48
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	469a      	mov	sl, r3
 800828e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8008290:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008292:	ab15      	add	r3, sp, #84	; 0x54
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	469b      	mov	fp, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8008298:	4b4d      	ldr	r3, [pc, #308]	; (80083d0 <StartScastDMAStream+0x160>)
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	428b      	cmp	r3, r1
 800829e:	d103      	bne.n	80082a8 <StartScastDMAStream+0x38>
		
		return result;
	}
	
	/* Inform participating modules */
	for(uint8_t i =0; i < sizeof(route); i++){
 80082a0:	2400      	movs	r4, #0
 80082a2:	003d      	movs	r5, r7
 80082a4:	0037      	movs	r7, r6
 80082a6:	e055      	b.n	8008354 <StartScastDMAStream+0xe4>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80082a8:	0e32      	lsrs	r2, r6, #24
 80082aa:	4b4a      	ldr	r3, [pc, #296]	; (80083d4 <StartScastDMAStream+0x164>)
 80082ac:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 80082ae:	0c32      	lsrs	r2, r6, #16
 80082b0:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 80082b2:	0a32      	lsrs	r2, r6, #8
 80082b4:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 80082b6:	70de      	strb	r6, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80082b8:	0e3a      	lsrs	r2, r7, #24
 80082ba:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 80082bc:	0c3a      	lsrs	r2, r7, #16
 80082be:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 80082c0:	0a3a      	lsrs	r2, r7, #8
 80082c2:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 80082c4:	71df      	strb	r7, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 80082c6:	4651      	mov	r1, sl
 80082c8:	7219      	strb	r1, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 80082ca:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 80082cc:	729d      	strb	r5, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 80082ce:	9a08      	ldr	r2, [sp, #32]
 80082d0:	72da      	strb	r2, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 80082d2:	465a      	mov	r2, fp
 80082d4:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80082d6:	220d      	movs	r2, #13
 80082d8:	211c      	movs	r1, #28
 80082da:	0020      	movs	r0, r4
 80082dc:	f7ff ffa2 	bl	8008224 <SendMessageToModule>
	if(stored){
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 80082e0:	2000      	movs	r0, #0
 80082e2:	b00a      	add	sp, #40	; 0x28
 80082e4:	bc1c      	pop	{r2, r3, r4}
 80082e6:	4691      	mov	r9, r2
 80082e8:	469a      	mov	sl, r3
 80082ea:	46a3      	mov	fp, r4
 80082ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 80082ee:	9907      	ldr	r1, [sp, #28]
 80082f0:	f7fb fbf2 	bl	8003ad8 <FindRoute>
 80082f4:	4681      	mov	r9, r0
			FindRoute(srcM,dstM);
 80082f6:	9906      	ldr	r1, [sp, #24]
 80082f8:	9807      	ldr	r0, [sp, #28]
 80082fa:	f7fb fbed 	bl	8003ad8 <FindRoute>
			if(route[i] == dstM){
 80082fe:	4b36      	ldr	r3, [pc, #216]	; (80083d8 <StartScastDMAStream+0x168>)
 8008300:	5d98      	ldrb	r0, [r3, r6]
 8008302:	9b06      	ldr	r3, [sp, #24]
 8008304:	4298      	cmp	r0, r3
 8008306:	d139      	bne.n	800837c <StartScastDMAStream+0x10c>
				temp2 =dstP;
 8008308:	9808      	ldr	r0, [sp, #32]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800830a:	0e3a      	lsrs	r2, r7, #24
 800830c:	4b31      	ldr	r3, [pc, #196]	; (80083d4 <StartScastDMAStream+0x164>)
 800830e:	701a      	strb	r2, [r3, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8008310:	0c3a      	lsrs	r2, r7, #16
 8008312:	705a      	strb	r2, [r3, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8008314:	0a3a      	lsrs	r2, r7, #8
 8008316:	709a      	strb	r2, [r3, #2]
			messageParams[3] =(uint8_t )count;
 8008318:	70df      	strb	r7, [r3, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 800831a:	0e2a      	lsrs	r2, r5, #24
 800831c:	711a      	strb	r2, [r3, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 800831e:	0c2a      	lsrs	r2, r5, #16
 8008320:	715a      	strb	r2, [r3, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8008322:	0a2a      	lsrs	r2, r5, #8
 8008324:	719a      	strb	r2, [r3, #6]
			messageParams[7] =(uint8_t )timeout;
 8008326:	71dd      	strb	r5, [r3, #7]
			messageParams[8] =direction; /* Stream direction */
 8008328:	4652      	mov	r2, sl
 800832a:	721a      	strb	r2, [r3, #8]
			messageParams[9] =temp1; /* Source port */
 800832c:	464a      	mov	r2, r9
 800832e:	725a      	strb	r2, [r3, #9]
			messageParams[10] =temp2; /* destination port */
 8008330:	7298      	strb	r0, [r3, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8008332:	465a      	mov	r2, fp
 8008334:	72da      	strb	r2, [r3, #11]
			FindRoute(srcM,dstM);
 8008336:	9906      	ldr	r1, [sp, #24]
 8008338:	9807      	ldr	r0, [sp, #28]
 800833a:	f7fb fbcd 	bl	8003ad8 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 800833e:	4b26      	ldr	r3, [pc, #152]	; (80083d8 <StartScastDMAStream+0x168>)
 8008340:	5d98      	ldrb	r0, [r3, r6]
 8008342:	220c      	movs	r2, #12
 8008344:	211b      	movs	r1, #27
 8008346:	f7ff ff6d 	bl	8008224 <SendMessageToModule>
			osDelay(10);
 800834a:	200a      	movs	r0, #10
 800834c:	f005 fb2a 	bl	800d9a4 <osDelay>
	for(uint8_t i =0; i < sizeof(route); i++){
 8008350:	3401      	adds	r4, #1
 8008352:	b2e4      	uxtb	r4, r4
 8008354:	2c19      	cmp	r4, #25
 8008356:	d817      	bhi.n	8008388 <StartScastDMAStream+0x118>
		FindRoute(srcM,dstM);
 8008358:	9906      	ldr	r1, [sp, #24]
 800835a:	9807      	ldr	r0, [sp, #28]
 800835c:	f7fb fbbc 	bl	8003ad8 <FindRoute>
		if(route[i]){
 8008360:	0026      	movs	r6, r4
 8008362:	4b1d      	ldr	r3, [pc, #116]	; (80083d8 <StartScastDMAStream+0x168>)
 8008364:	5d18      	ldrb	r0, [r3, r4]
 8008366:	2800      	cmp	r0, #0
 8008368:	d0f2      	beq.n	8008350 <StartScastDMAStream+0xe0>
			if(route[i + 1]){
 800836a:	1c63      	adds	r3, r4, #1
 800836c:	4a1a      	ldr	r2, [pc, #104]	; (80083d8 <StartScastDMAStream+0x168>)
 800836e:	5cd1      	ldrb	r1, [r2, r3]
 8008370:	2900      	cmp	r1, #0
 8008372:	d0bc      	beq.n	80082ee <StartScastDMAStream+0x7e>
				temp1 =FindRoute(route[i],route[i + 1]);
 8008374:	f7fb fbb0 	bl	8003ad8 <FindRoute>
 8008378:	4681      	mov	r9, r0
 800837a:	e7bc      	b.n	80082f6 <StartScastDMAStream+0x86>
				temp2 =FindRoute(route[i],route[i - 1]);
 800837c:	1e73      	subs	r3, r6, #1
 800837e:	4a16      	ldr	r2, [pc, #88]	; (80083d8 <StartScastDMAStream+0x168>)
 8008380:	5cd1      	ldrb	r1, [r2, r3]
 8008382:	f7fb fba9 	bl	8003ad8 <FindRoute>
 8008386:	e7c0      	b.n	800830a <StartScastDMAStream+0x9a>
 8008388:	003e      	movs	r6, r7
 800838a:	002f      	movs	r7, r5
	if(srcM == dstM)
 800838c:	9807      	ldr	r0, [sp, #28]
 800838e:	9906      	ldr	r1, [sp, #24]
 8008390:	4288      	cmp	r0, r1
 8008392:	d118      	bne.n	80083c6 <StartScastDMAStream+0x156>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8008394:	9b08      	ldr	r3, [sp, #32]
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839a:	003a      	movs	r2, r7
 800839c:	0031      	movs	r1, r6
 800839e:	4650      	mov	r0, sl
 80083a0:	f7ff fbd8 	bl	8007b54 <SetupDMAStreams>
	if(stored){
 80083a4:	465b      	mov	r3, fp
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d09a      	beq.n	80082e0 <StartScastDMAStream+0x70>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 80083aa:	2300      	movs	r3, #0
 80083ac:	9304      	str	r3, [sp, #16]
 80083ae:	9303      	str	r3, [sp, #12]
 80083b0:	9302      	str	r3, [sp, #8]
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	9b08      	ldr	r3, [sp, #32]
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ba:	003a      	movs	r2, r7
 80083bc:	0031      	movs	r1, r6
 80083be:	4650      	mov	r0, sl
 80083c0:	f7fb f890 	bl	80034e4 <SaveEEstreams>
 80083c4:	e78c      	b.n	80082e0 <StartScastDMAStream+0x70>
		port =FindRoute(srcM,dstM);
 80083c6:	f7fb fb87 	bl	8003ad8 <FindRoute>
 80083ca:	9008      	str	r0, [sp, #32]
 80083cc:	e7e2      	b.n	8008394 <StartScastDMAStream+0x124>
 80083ce:	46c0      	nop			; (mov r8, r8)
 80083d0:	20000a98 	.word	0x20000a98
 80083d4:	20000b3c 	.word	0x20000b3c
 80083d8:	20006910 	.word	0x20006910

080083dc <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 80083dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083de:	46ce      	mov	lr, r9
 80083e0:	4647      	mov	r7, r8
 80083e2:	b580      	push	{r7, lr}
 80083e4:	e040      	b.n	8008468 <BackEndTask+0x8c>
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
			Calculate_CRC_Buffer[2] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
			for(int i=0;i<length;i++)
			{
				Calculate_CRC_Buffer[i+3] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][i + 3];
 80083e6:	1cc7      	adds	r7, r0, #3
 80083e8:	00f2      	lsls	r2, r6, #3
 80083ea:	1b92      	subs	r2, r2, r6
 80083ec:	00d3      	lsls	r3, r2, #3
 80083ee:	00a1      	lsls	r1, r4, #2
 80083f0:	1909      	adds	r1, r1, r4
 80083f2:	00ca      	lsls	r2, r1, #3
 80083f4:	1a52      	subs	r2, r2, r1
 80083f6:	00d1      	lsls	r1, r2, #3
 80083f8:	185b      	adds	r3, r3, r1
 80083fa:	4a49      	ldr	r2, [pc, #292]	; (8008520 <BackEndTask+0x144>)
 80083fc:	18d3      	adds	r3, r2, r3
 80083fe:	5dda      	ldrb	r2, [r3, r7]
 8008400:	4b48      	ldr	r3, [pc, #288]	; (8008524 <BackEndTask+0x148>)
 8008402:	55da      	strb	r2, [r3, r7]
			for(int i=0;i<length;i++)
 8008404:	3001      	adds	r0, #1
 8008406:	002f      	movs	r7, r5
 8008408:	4285      	cmp	r5, r0
 800840a:	dcec      	bgt.n	80083e6 <BackEndTask+0xa>
			}

			calculated_crc = CalculateCRC8(Calculate_CRC_Buffer,
 800840c:	1ce9      	adds	r1, r5, #3
 800840e:	4845      	ldr	r0, [pc, #276]	; (8008524 <BackEndTask+0x148>)
 8008410:	f002 fe3a 	bl	800b088 <CalculateCRC8>
 8008414:	4684      	mov	ip, r0
				length + 3);


			Message_counter++;
 8008416:	4a44      	ldr	r2, [pc, #272]	; (8008528 <BackEndTask+0x14c>)
 8008418:	8813      	ldrh	r3, [r2, #0]
 800841a:	3301      	adds	r3, #1
 800841c:	8013      	strh	r3, [r2, #0]
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 800841e:	4b43      	ldr	r3, [pc, #268]	; (800852c <BackEndTask+0x150>)
 8008420:	5d18      	ldrb	r0, [r3, r4]
 8008422:	3703      	adds	r7, #3
 8008424:	00c2      	lsls	r2, r0, #3
 8008426:	1a12      	subs	r2, r2, r0
 8008428:	00d3      	lsls	r3, r2, #3
 800842a:	00a1      	lsls	r1, r4, #2
 800842c:	1909      	adds	r1, r1, r4
 800842e:	00ca      	lsls	r2, r1, #3
 8008430:	1a52      	subs	r2, r2, r1
 8008432:	00d1      	lsls	r1, r2, #3
 8008434:	185b      	adds	r3, r3, r1
 8008436:	4a3a      	ldr	r2, [pc, #232]	; (8008520 <BackEndTask+0x144>)
 8008438:	18d3      	adds	r3, r2, r3
 800843a:	5ddb      	ldrb	r3, [r3, r7]
 800843c:	4563      	cmp	r3, ip
 800843e:	d037      	beq.n	80084b0 <BackEndTask+0xd4>


			}
			else
			{
				Rejected_Messages++;
 8008440:	4a39      	ldr	r2, [pc, #228]	; (8008528 <BackEndTask+0x14c>)
 8008442:	8893      	ldrh	r3, [r2, #4]
 8008444:	3301      	adds	r3, #1
 8008446:	8093      	strh	r3, [r2, #4]
				//TODO: Implement something here when the message is rejected.
			}

			MSG_Buffer_Index_Start[port_index]++;
 8008448:	4a38      	ldr	r2, [pc, #224]	; (800852c <BackEndTask+0x150>)
 800844a:	5d13      	ldrb	r3, [r2, r4]
 800844c:	3301      	adds	r3, #1
 800844e:	b2db      	uxtb	r3, r3
 8008450:	5513      	strb	r3, [r2, r4]
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 8008452:	2b05      	cmp	r3, #5
 8008454:	d05c      	beq.n	8008510 <BackEndTask+0x134>

			Process_Message_Buffer_Index_Start++;
 8008456:	4a36      	ldr	r2, [pc, #216]	; (8008530 <BackEndTask+0x154>)
 8008458:	7813      	ldrb	r3, [r2, #0]
 800845a:	3301      	adds	r3, #1
 800845c:	b2db      	uxtb	r3, r3
 800845e:	7013      	strb	r3, [r2, #0]
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 8008460:	2b05      	cmp	r3, #5
 8008462:	d059      	beq.n	8008518 <BackEndTask+0x13c>
		}

		taskYIELD();
 8008464:	f007 f836 	bl	800f4d4 <vPortYield>
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 8008468:	4b32      	ldr	r3, [pc, #200]	; (8008534 <BackEndTask+0x158>)
 800846a:	781a      	ldrb	r2, [r3, #0]
 800846c:	4b30      	ldr	r3, [pc, #192]	; (8008530 <BackEndTask+0x154>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	429a      	cmp	r2, r3
 8008472:	d0f7      	beq.n	8008464 <BackEndTask+0x88>
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 8008474:	4a30      	ldr	r2, [pc, #192]	; (8008538 <BackEndTask+0x15c>)
 8008476:	5cd3      	ldrb	r3, [r2, r3]
 8008478:	4699      	mov	r9, r3
			port_index = port_number - 1;
 800847a:	1e5c      	subs	r4, r3, #1
 800847c:	b2e4      	uxtb	r4, r4
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 800847e:	4b2b      	ldr	r3, [pc, #172]	; (800852c <BackEndTask+0x150>)
 8008480:	5d1e      	ldrb	r6, [r3, r4]
 8008482:	4827      	ldr	r0, [pc, #156]	; (8008520 <BackEndTask+0x144>)
 8008484:	00f2      	lsls	r2, r6, #3
 8008486:	1b92      	subs	r2, r2, r6
 8008488:	00d3      	lsls	r3, r2, #3
 800848a:	00a1      	lsls	r1, r4, #2
 800848c:	1909      	adds	r1, r1, r4
 800848e:	00ca      	lsls	r2, r1, #3
 8008490:	1a52      	subs	r2, r2, r1
 8008492:	00d1      	lsls	r1, r2, #3
 8008494:	185b      	adds	r3, r3, r1
 8008496:	2248      	movs	r2, #72	; 0x48
 8008498:	541a      	strb	r2, [r3, r0]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 800849a:	18c1      	adds	r1, r0, r3
 800849c:	3212      	adds	r2, #18
 800849e:	704a      	strb	r2, [r1, #1]
			length = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 80084a0:	788d      	ldrb	r5, [r1, #2]
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 80084a2:	5c19      	ldrb	r1, [r3, r0]
 80084a4:	4b1f      	ldr	r3, [pc, #124]	; (8008524 <BackEndTask+0x148>)
 80084a6:	7019      	strb	r1, [r3, #0]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
 80084a8:	705a      	strb	r2, [r3, #1]
			Calculate_CRC_Buffer[2] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 80084aa:	709d      	strb	r5, [r3, #2]
			for(int i=0;i<length;i++)
 80084ac:	2000      	movs	r0, #0
 80084ae:	e7aa      	b.n	8008406 <BackEndTask+0x2a>
				Accepted_Messages++;
 80084b0:	4a1d      	ldr	r2, [pc, #116]	; (8008528 <BackEndTask+0x14c>)
 80084b2:	8853      	ldrh	r3, [r2, #2]
 80084b4:	3301      	adds	r3, #1
 80084b6:	8053      	strh	r3, [r2, #2]
				messageLength[port_index] =length;
 80084b8:	4b20      	ldr	r3, [pc, #128]	; (800853c <BackEndTask+0x160>)
 80084ba:	551d      	strb	r5, [r3, r4]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 80084bc:	00e7      	lsls	r7, r4, #3
 80084be:	1b3a      	subs	r2, r7, r4
 80084c0:	00d3      	lsls	r3, r2, #3
 80084c2:	4a1f      	ldr	r2, [pc, #124]	; (8008540 <BackEndTask+0x164>)
 80084c4:	4690      	mov	r8, r2
 80084c6:	4443      	add	r3, r8
 80084c8:	00c2      	lsls	r2, r0, #3
 80084ca:	1a10      	subs	r0, r2, r0
 80084cc:	00c1      	lsls	r1, r0, #3
 80084ce:	00a0      	lsls	r0, r4, #2
 80084d0:	1900      	adds	r0, r0, r4
 80084d2:	00c2      	lsls	r2, r0, #3
 80084d4:	1a12      	subs	r2, r2, r0
 80084d6:	00d0      	lsls	r0, r2, #3
 80084d8:	1809      	adds	r1, r1, r0
 80084da:	3103      	adds	r1, #3
 80084dc:	4a10      	ldr	r2, [pc, #64]	; (8008520 <BackEndTask+0x144>)
 80084de:	1889      	adds	r1, r1, r2
 80084e0:	002a      	movs	r2, r5
 80084e2:	0018      	movs	r0, r3
 80084e4:	f00a fc5f 	bl	8012da6 <memcpy>
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 80084e8:	1b3f      	subs	r7, r7, r4
 80084ea:	00fb      	lsls	r3, r7, #3
 80084ec:	4642      	mov	r2, r8
 80084ee:	5c9b      	ldrb	r3, [r3, r2]
 80084f0:	4a14      	ldr	r2, [pc, #80]	; (8008544 <BackEndTask+0x168>)
 80084f2:	7812      	ldrb	r2, [r2, #0]
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d003      	beq.n	8008500 <BackEndTask+0x124>
 80084f8:	2bff      	cmp	r3, #255	; 0xff
 80084fa:	d001      	beq.n	8008500 <BackEndTask+0x124>
 80084fc:	2bfe      	cmp	r3, #254	; 0xfe
 80084fe:	d103      	bne.n	8008508 <BackEndTask+0x12c>
					NotifyMessagingTask(port_number);
 8008500:	4648      	mov	r0, r9
 8008502:	f7ff fbff 	bl	8007d04 <NotifyMessagingTask>
 8008506:	e79f      	b.n	8008448 <BackEndTask+0x6c>
					ForwardReceivedMessage(port_number);
 8008508:	4648      	mov	r0, r9
 800850a:	f7ff fe23 	bl	8008154 <ForwardReceivedMessage>
 800850e:	e79b      	b.n	8008448 <BackEndTask+0x6c>
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 8008510:	0013      	movs	r3, r2
 8008512:	2200      	movs	r2, #0
 8008514:	551a      	strb	r2, [r3, r4]
 8008516:	e79e      	b.n	8008456 <BackEndTask+0x7a>
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 8008518:	0013      	movs	r3, r2
 800851a:	2200      	movs	r2, #0
 800851c:	701a      	strb	r2, [r3, #0]
 800851e:	e7a1      	b.n	8008464 <BackEndTask+0x88>
 8008520:	2000114c 	.word	0x2000114c
 8008524:	20006930 	.word	0x20006930
 8008528:	20001dac 	.word	0x20001dac
 800852c:	200016cc 	.word	0x200016cc
 8008530:	20001140 	.word	0x20001140
 8008534:	2000113f 	.word	0x2000113f
 8008538:	20001144 	.word	0x20001144
 800853c:	20000c50 	.word	0x20000c50
 8008540:	20000c90 	.word	0x20000c90
 8008544:	20000a98 	.word	0x20000a98

08008548 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8008548:	2001      	movs	r0, #1
 800854a:	4770      	bx	lr

0800854c <PxMessagingTask>:
void PxMessagingTask(void *argument){
 800854c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800854e:	46de      	mov	lr, fp
 8008550:	4657      	mov	r7, sl
 8008552:	464e      	mov	r6, r9
 8008554:	4645      	mov	r5, r8
 8008556:	b5e0      	push	{r5, r6, r7, lr}
 8008558:	b093      	sub	sp, #76	; 0x4c
 800855a:	9006      	str	r0, [sp, #24]
	port =(int8_t )(unsigned )argument;
 800855c:	b2c3      	uxtb	r3, r0
 800855e:	9307      	str	r3, [sp, #28]
	HAL_StatusTypeDef status =HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	9308      	str	r3, [sp, #32]
	BOS_Status result =BOS_OK;
 8008564:	469b      	mov	fp, r3
 8008566:	e065      	b.n	8008634 <PxMessagingTask+0xe8>
				longMessage =1;
 8008568:	4add      	ldr	r2, [pc, #884]	; (80088e0 <PxMessagingTask+0x394>)
 800856a:	2101      	movs	r1, #1
 800856c:	7011      	strb	r1, [r2, #0]
 800856e:	e07b      	b.n	8008668 <PxMessagingTask+0x11c>
				++shift;
 8008570:	2401      	movs	r4, #1
 8008572:	e087      	b.n	8008684 <PxMessagingTask+0x138>
				code =cMessage[port - 1][3 + shift];
 8008574:	1ce1      	adds	r1, r4, #3
 8008576:	00eb      	lsls	r3, r5, #3
 8008578:	1b5b      	subs	r3, r3, r5
 800857a:	00d8      	lsls	r0, r3, #3
 800857c:	4bd9      	ldr	r3, [pc, #868]	; (80088e4 <PxMessagingTask+0x398>)
 800857e:	181b      	adds	r3, r3, r0
 8008580:	5c5e      	ldrb	r6, [r3, r1]
 8008582:	e09d      	b.n	80086c0 <PxMessagingTask+0x174>
				BOSMessaging.Acknowledgment =false;
 8008584:	4bd8      	ldr	r3, [pc, #864]	; (80088e8 <PxMessagingTask+0x39c>)
 8008586:	2200      	movs	r2, #0
 8008588:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800858a:	212c      	movs	r1, #44	; 0x2c
 800858c:	9805      	ldr	r0, [sp, #20]
 800858e:	f7ff fe49 	bl	8008224 <SendMessageToModule>
 8008592:	e098      	b.n	80086c6 <PxMessagingTask+0x17a>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008594:	2bfc      	cmp	r3, #252	; 0xfc
 8008596:	d805      	bhi.n	80085a4 <PxMessagingTask+0x58>
 8008598:	4bd4      	ldr	r3, [pc, #848]	; (80088ec <PxMessagingTask+0x3a0>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	454b      	cmp	r3, r9
 800859e:	d001      	beq.n	80085a4 <PxMessagingTask+0x58>
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d020      	beq.n	80085e6 <PxMessagingTask+0x9a>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 80085a4:	464b      	mov	r3, r9
 80085a6:	2bff      	cmp	r3, #255	; 0xff
 80085a8:	d100      	bne.n	80085ac <PxMessagingTask+0x60>
 80085aa:	e0bf      	b.n	800872c <PxMessagingTask+0x1e0>
				else if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 80085ac:	464b      	mov	r3, r9
 80085ae:	2bff      	cmp	r3, #255	; 0xff
 80085b0:	d100      	bne.n	80085b4 <PxMessagingTask+0x68>
 80085b2:	e0de      	b.n	8008772 <PxMessagingTask+0x226>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 80085b4:	464b      	mov	r3, r9
 80085b6:	2bfe      	cmp	r3, #254	; 0xfe
 80085b8:	d100      	bne.n	80085bc <PxMessagingTask+0x70>
 80085ba:	e0eb      	b.n	8008794 <PxMessagingTask+0x248>
				else if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 80085bc:	464b      	mov	r3, r9
 80085be:	2bfe      	cmp	r3, #254	; 0xfe
 80085c0:	d100      	bne.n	80085c4 <PxMessagingTask+0x78>
 80085c2:	e121      	b.n	8008808 <PxMessagingTask+0x2bc>
				shift +=4;
 80085c4:	3404      	adds	r4, #4
 80085c6:	b2e4      	uxtb	r4, r4
				numOfParams =messageLength[port - 1] - shift;
 80085c8:	4bc9      	ldr	r3, [pc, #804]	; (80088f0 <PxMessagingTask+0x3a4>)
 80085ca:	5d5b      	ldrb	r3, [r3, r5]
 80085cc:	1b1f      	subs	r7, r3, r4
 80085ce:	b2ff      	uxtb	r7, r7
				if(result == BOS_OK){
 80085d0:	465a      	mov	r2, fp
 80085d2:	2a00      	cmp	r2, #0
 80085d4:	d110      	bne.n	80085f8 <PxMessagingTask+0xac>
					switch(code){
 80085d6:	2e2d      	cmp	r6, #45	; 0x2d
 80085d8:	d901      	bls.n	80085de <PxMessagingTask+0x92>
 80085da:	f001 fc38 	bl	8009e4e <PxMessagingTask+0x1902>
 80085de:	00b2      	lsls	r2, r6, #2
 80085e0:	49c4      	ldr	r1, [pc, #784]	; (80088f4 <PxMessagingTask+0x3a8>)
 80085e2:	588a      	ldr	r2, [r1, r2]
 80085e4:	4697      	mov	pc, r2
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 80085e6:	2e10      	cmp	r6, #16
 80085e8:	d17b      	bne.n	80086e2 <PxMessagingTask+0x196>
 80085ea:	e7db      	b.n	80085a4 <PxMessagingTask+0x58>
				if(code == CODE_UPDATE){ // Remote bootloader update
 80085ec:	2e19      	cmp	r6, #25
 80085ee:	d100      	bne.n	80085f2 <PxMessagingTask+0xa6>
 80085f0:	e083      	b.n	80086fa <PxMessagingTask+0x1ae>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 80085f2:	2e1a      	cmp	r6, #26
 80085f4:	d100      	bne.n	80085f8 <PxMessagingTask+0xac>
 80085f6:	e08a      	b.n	800870e <PxMessagingTask+0x1c2>
		if(result == BOS_ERR_UnknownMessage){
 80085f8:	465b      	mov	r3, fp
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d101      	bne.n	8008602 <PxMessagingTask+0xb6>
 80085fe:	f001 fc3c 	bl	8009e7a <PxMessagingTask+0x192e>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008602:	00eb      	lsls	r3, r5, #3
 8008604:	1b5b      	subs	r3, r3, r5
 8008606:	00d8      	lsls	r0, r3, #3
 8008608:	4bb6      	ldr	r3, [pc, #728]	; (80088e4 <PxMessagingTask+0x398>)
 800860a:	18c0      	adds	r0, r0, r3
 800860c:	4cb8      	ldr	r4, [pc, #736]	; (80088f0 <PxMessagingTask+0x3a4>)
 800860e:	5d62      	ldrb	r2, [r4, r5]
 8008610:	2100      	movs	r1, #0
 8008612:	f00a fbd1 	bl	8012db8 <memset>
		messageLength[port - 1] =0;
 8008616:	2300      	movs	r3, #0
 8008618:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800861a:	4bb7      	ldr	r3, [pc, #732]	; (80088f8 <PxMessagingTask+0x3ac>)
 800861c:	4642      	mov	r2, r8
 800861e:	5c9b      	ldrb	r3, [r3, r2]
 8008620:	3b02      	subs	r3, #2
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b02      	cmp	r3, #2
 8008626:	d903      	bls.n	8008630 <PxMessagingTask+0xe4>
			portStatus[port] =FREE;
 8008628:	4bb3      	ldr	r3, [pc, #716]	; (80088f8 <PxMessagingTask+0x3ac>)
 800862a:	2200      	movs	r2, #0
 800862c:	4641      	mov	r1, r8
 800862e:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8008630:	f006 ff50 	bl	800f4d4 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8008634:	2101      	movs	r1, #1
 8008636:	4249      	negs	r1, r1
 8008638:	2001      	movs	r0, #1
 800863a:	f006 fc95 	bl	800ef68 <ulTaskNotifyTake>
 800863e:	23ff      	movs	r3, #255	; 0xff
 8008640:	9a06      	ldr	r2, [sp, #24]
 8008642:	401a      	ands	r2, r3
 8008644:	4690      	mov	r8, r2
		if(messageLength[port - 1]){
 8008646:	1e55      	subs	r5, r2, #1
 8008648:	4ba9      	ldr	r3, [pc, #676]	; (80088f0 <PxMessagingTask+0x3a4>)
 800864a:	5d5b      	ldrb	r3, [r3, r5]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0d3      	beq.n	80085f8 <PxMessagingTask+0xac>
			if(cMessage[port - 1][2] >> 7){
 8008650:	00eb      	lsls	r3, r5, #3
 8008652:	1b5b      	subs	r3, r3, r5
 8008654:	00da      	lsls	r2, r3, #3
 8008656:	4ba3      	ldr	r3, [pc, #652]	; (80088e4 <PxMessagingTask+0x398>)
 8008658:	189b      	adds	r3, r3, r2
 800865a:	789b      	ldrb	r3, [r3, #2]
 800865c:	b25a      	sxtb	r2, r3
 800865e:	2a00      	cmp	r2, #0
 8008660:	db82      	blt.n	8008568 <PxMessagingTask+0x1c>
				longMessage =0;
 8008662:	4a9f      	ldr	r2, [pc, #636]	; (80088e0 <PxMessagingTask+0x394>)
 8008664:	2100      	movs	r1, #0
 8008666:	7011      	strb	r1, [r2, #0]
			dst =cMessage[port - 1][0];
 8008668:	499e      	ldr	r1, [pc, #632]	; (80088e4 <PxMessagingTask+0x398>)
 800866a:	00ea      	lsls	r2, r5, #3
 800866c:	1b54      	subs	r4, r2, r5
 800866e:	00e0      	lsls	r0, r4, #3
 8008670:	5c40      	ldrb	r0, [r0, r1]
 8008672:	4681      	mov	r9, r0
			src =cMessage[port - 1][1];
 8008674:	00e0      	lsls	r0, r4, #3
 8008676:	1809      	adds	r1, r1, r0
 8008678:	784a      	ldrb	r2, [r1, #1]
 800867a:	9205      	str	r2, [sp, #20]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 800867c:	07da      	lsls	r2, r3, #31
 800867e:	d500      	bpl.n	8008682 <PxMessagingTask+0x136>
 8008680:	e776      	b.n	8008570 <PxMessagingTask+0x24>
			shift =0;
 8008682:	2400      	movs	r4, #0
			extendCode =(cMessage[port - 1][2] >> 1) & 0x01; 					// 2nd bit Extended code
 8008684:	085f      	lsrs	r7, r3, #1
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008686:	0899      	lsrs	r1, r3, #2
 8008688:	2203      	movs	r2, #3
 800868a:	400a      	ands	r2, r1
 800868c:	4996      	ldr	r1, [pc, #600]	; (80088e8 <PxMessagingTask+0x39c>)
 800868e:	704a      	strb	r2, [r1, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 8008690:	091a      	lsrs	r2, r3, #4
 8008692:	2601      	movs	r6, #1
 8008694:	4032      	ands	r2, r6
 8008696:	70ca      	strb	r2, [r1, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 8008698:	2060      	movs	r0, #96	; 0x60
 800869a:	4003      	ands	r3, r0
 800869c:	700b      	strb	r3, [r1, #0]
			if(extendCode == true){
 800869e:	423e      	tst	r6, r7
 80086a0:	d100      	bne.n	80086a4 <PxMessagingTask+0x158>
 80086a2:	e767      	b.n	8008574 <PxMessagingTask+0x28>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 80086a4:	1d20      	adds	r0, r4, #4
 80086a6:	00e9      	lsls	r1, r5, #3
 80086a8:	1b49      	subs	r1, r1, r5
 80086aa:	00cb      	lsls	r3, r1, #3
 80086ac:	498d      	ldr	r1, [pc, #564]	; (80088e4 <PxMessagingTask+0x398>)
 80086ae:	18cb      	adds	r3, r1, r3
 80086b0:	5c1e      	ldrb	r6, [r3, r0]
 80086b2:	0236      	lsls	r6, r6, #8
 80086b4:	1ce1      	adds	r1, r4, #3
 80086b6:	5c5b      	ldrb	r3, [r3, r1]
 80086b8:	18f6      	adds	r6, r6, r3
 80086ba:	b2b6      	uxth	r6, r6
				++shift;
 80086bc:	3401      	adds	r4, #1
 80086be:	b2e4      	uxtb	r4, r4
			if(true == BOSMessaging.received_Acknowledgment){
 80086c0:	2a00      	cmp	r2, #0
 80086c2:	d000      	beq.n	80086c6 <PxMessagingTask+0x17a>
 80086c4:	e75e      	b.n	8008584 <PxMessagingTask+0x38>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 80086c6:	464b      	mov	r3, r9
 80086c8:	3b01      	subs	r3, #1
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2bfc      	cmp	r3, #252	; 0xfc
 80086ce:	d900      	bls.n	80086d2 <PxMessagingTask+0x186>
 80086d0:	e760      	b.n	8008594 <PxMessagingTask+0x48>
 80086d2:	4a86      	ldr	r2, [pc, #536]	; (80088ec <PxMessagingTask+0x3a0>)
 80086d4:	7812      	ldrb	r2, [r2, #0]
 80086d6:	454a      	cmp	r2, r9
 80086d8:	d100      	bne.n	80086dc <PxMessagingTask+0x190>
 80086da:	e75b      	b.n	8008594 <PxMessagingTask+0x48>
 80086dc:	2a01      	cmp	r2, #1
 80086de:	d100      	bne.n	80086e2 <PxMessagingTask+0x196>
 80086e0:	e758      	b.n	8008594 <PxMessagingTask+0x48>
				ForwardReceivedMessage(port);
 80086e2:	9807      	ldr	r0, [sp, #28]
 80086e4:	f7ff fd36 	bl	8008154 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 80086e8:	4b7f      	ldr	r3, [pc, #508]	; (80088e8 <PxMessagingTask+0x39c>)
 80086ea:	785b      	ldrb	r3, [r3, #1]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d100      	bne.n	80086f2 <PxMessagingTask+0x1a6>
 80086f0:	e77c      	b.n	80085ec <PxMessagingTask+0xa0>
					indMode =IND_SHORT_BLINK;
 80086f2:	4b82      	ldr	r3, [pc, #520]	; (80088fc <PxMessagingTask+0x3b0>)
 80086f4:	2203      	movs	r2, #3
 80086f6:	701a      	strb	r2, [r3, #0]
 80086f8:	e778      	b.n	80085ec <PxMessagingTask+0xa0>
					Delay_ms(100);
 80086fa:	2064      	movs	r0, #100	; 0x64
 80086fc:	f007 f84c 	bl	800f798 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8008700:	2300      	movs	r3, #0
 8008702:	9a07      	ldr	r2, [sp, #28]
 8008704:	4649      	mov	r1, r9
 8008706:	9805      	ldr	r0, [sp, #20]
 8008708:	f001 fd40 	bl	800a18c <remoteBootloaderUpdate>
 800870c:	e774      	b.n	80085f8 <PxMessagingTask+0xac>
					Delay_ms(100);
 800870e:	2064      	movs	r0, #100	; 0x64
 8008710:	f007 f842 	bl	800f798 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008714:	00eb      	lsls	r3, r5, #3
 8008716:	1b5b      	subs	r3, r3, r5
 8008718:	00da      	lsls	r2, r3, #3
 800871a:	4b72      	ldr	r3, [pc, #456]	; (80088e4 <PxMessagingTask+0x398>)
 800871c:	189b      	adds	r3, r3, r2
 800871e:	5d1b      	ldrb	r3, [r3, r4]
 8008720:	9a07      	ldr	r2, [sp, #28]
 8008722:	4649      	mov	r1, r9
 8008724:	9805      	ldr	r0, [sp, #20]
 8008726:	f001 fd31 	bl	800a18c <remoteBootloaderUpdate>
 800872a:	e765      	b.n	80085f8 <PxMessagingTask+0xac>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800872c:	4b70      	ldr	r3, [pc, #448]	; (80088f0 <PxMessagingTask+0x3a4>)
 800872e:	5d5a      	ldrb	r2, [r3, r5]
 8008730:	3a01      	subs	r2, #1
 8008732:	00eb      	lsls	r3, r5, #3
 8008734:	1b5b      	subs	r3, r3, r5
 8008736:	00d9      	lsls	r1, r3, #3
 8008738:	4b6a      	ldr	r3, [pc, #424]	; (80088e4 <PxMessagingTask+0x398>)
 800873a:	185b      	adds	r3, r3, r1
 800873c:	5c9b      	ldrb	r3, [r3, r2]
 800873e:	4a70      	ldr	r2, [pc, #448]	; (8008900 <PxMessagingTask+0x3b4>)
 8008740:	7992      	ldrb	r2, [r2, #6]
 8008742:	4293      	cmp	r3, r2
 8008744:	d100      	bne.n	8008748 <PxMessagingTask+0x1fc>
 8008746:	e731      	b.n	80085ac <PxMessagingTask+0x60>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008748:	4a6d      	ldr	r2, [pc, #436]	; (8008900 <PxMessagingTask+0x3b4>)
 800874a:	7193      	strb	r3, [r2, #6]
 800874c:	4a6d      	ldr	r2, [pc, #436]	; (8008904 <PxMessagingTask+0x3b8>)
 800874e:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008750:	9907      	ldr	r1, [sp, #28]
 8008752:	20ff      	movs	r0, #255	; 0xff
 8008754:	f7ff fd1e 	bl	8008194 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008758:	4b65      	ldr	r3, [pc, #404]	; (80088f0 <PxMessagingTask+0x3a4>)
 800875a:	5d5a      	ldrb	r2, [r3, r5]
 800875c:	3a01      	subs	r2, #1
 800875e:	00eb      	lsls	r3, r5, #3
 8008760:	1b5b      	subs	r3, r3, r5
 8008762:	00d9      	lsls	r1, r3, #3
 8008764:	4b5f      	ldr	r3, [pc, #380]	; (80088e4 <PxMessagingTask+0x398>)
 8008766:	185b      	adds	r3, r3, r1
 8008768:	2100      	movs	r1, #0
 800876a:	5499      	strb	r1, [r3, r2]
					result =BOS_OK;
 800876c:	2300      	movs	r3, #0
 800876e:	469b      	mov	fp, r3
 8008770:	e720      	b.n	80085b4 <PxMessagingTask+0x68>
				else if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 8008772:	4b5f      	ldr	r3, [pc, #380]	; (80088f0 <PxMessagingTask+0x3a4>)
 8008774:	5d5a      	ldrb	r2, [r3, r5]
 8008776:	3a01      	subs	r2, #1
 8008778:	00eb      	lsls	r3, r5, #3
 800877a:	1b5b      	subs	r3, r3, r5
 800877c:	00d9      	lsls	r1, r3, #3
 800877e:	4b59      	ldr	r3, [pc, #356]	; (80088e4 <PxMessagingTask+0x398>)
 8008780:	185b      	adds	r3, r3, r1
 8008782:	5c9a      	ldrb	r2, [r3, r2]
 8008784:	4b5e      	ldr	r3, [pc, #376]	; (8008900 <PxMessagingTask+0x3b4>)
 8008786:	799b      	ldrb	r3, [r3, #6]
 8008788:	429a      	cmp	r2, r3
 800878a:	d000      	beq.n	800878e <PxMessagingTask+0x242>
 800878c:	e712      	b.n	80085b4 <PxMessagingTask+0x68>
					result =BOS_ERR_MSG_Reflection;
 800878e:	2303      	movs	r3, #3
 8008790:	469b      	mov	fp, r3
 8008792:	e70f      	b.n	80085b4 <PxMessagingTask+0x68>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008794:	4b56      	ldr	r3, [pc, #344]	; (80088f0 <PxMessagingTask+0x3a4>)
 8008796:	5d5a      	ldrb	r2, [r3, r5]
 8008798:	3a01      	subs	r2, #1
 800879a:	00eb      	lsls	r3, r5, #3
 800879c:	1b5b      	subs	r3, r3, r5
 800879e:	00d9      	lsls	r1, r3, #3
 80087a0:	4b50      	ldr	r3, [pc, #320]	; (80088e4 <PxMessagingTask+0x398>)
 80087a2:	185b      	adds	r3, r3, r1
 80087a4:	5c9b      	ldrb	r3, [r3, r2]
 80087a6:	4a56      	ldr	r2, [pc, #344]	; (8008900 <PxMessagingTask+0x3b4>)
 80087a8:	7992      	ldrb	r2, [r2, #6]
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d100      	bne.n	80087b0 <PxMessagingTask+0x264>
 80087ae:	e705      	b.n	80085bc <PxMessagingTask+0x70>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80087b0:	4a53      	ldr	r2, [pc, #332]	; (8008900 <PxMessagingTask+0x3b4>)
 80087b2:	7193      	strb	r3, [r2, #6]
 80087b4:	4a53      	ldr	r2, [pc, #332]	; (8008904 <PxMessagingTask+0x3b8>)
 80087b6:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 80087b8:	9907      	ldr	r1, [sp, #28]
 80087ba:	20fe      	movs	r0, #254	; 0xfe
 80087bc:	f7ff fcea 	bl	8008194 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 80087c0:	4b4b      	ldr	r3, [pc, #300]	; (80088f0 <PxMessagingTask+0x3a4>)
 80087c2:	5d58      	ldrb	r0, [r3, r5]
 80087c4:	1e41      	subs	r1, r0, #1
 80087c6:	00ea      	lsls	r2, r5, #3
 80087c8:	1b52      	subs	r2, r2, r5
 80087ca:	00d7      	lsls	r7, r2, #3
 80087cc:	4b45      	ldr	r3, [pc, #276]	; (80088e4 <PxMessagingTask+0x398>)
 80087ce:	19db      	adds	r3, r3, r7
 80087d0:	2200      	movs	r2, #0
 80087d2:	545a      	strb	r2, [r3, r1]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 80087d4:	3802      	subs	r0, #2
 80087d6:	5c1b      	ldrb	r3, [r3, r0]
 80087d8:	001f      	movs	r7, r3
 80087da:	46a4      	mov	ip, r4
					for(i =0; i < temp; i++){
 80087dc:	42ba      	cmp	r2, r7
 80087de:	d20e      	bcs.n	80087fe <PxMessagingTask+0x2b2>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 80087e0:	1bc1      	subs	r1, r0, r7
 80087e2:	1851      	adds	r1, r2, r1
 80087e4:	00eb      	lsls	r3, r5, #3
 80087e6:	1b5b      	subs	r3, r3, r5
 80087e8:	00dc      	lsls	r4, r3, #3
 80087ea:	4b3e      	ldr	r3, [pc, #248]	; (80088e4 <PxMessagingTask+0x398>)
 80087ec:	191b      	adds	r3, r3, r4
 80087ee:	5c59      	ldrb	r1, [r3, r1]
 80087f0:	4b3e      	ldr	r3, [pc, #248]	; (80088ec <PxMessagingTask+0x3a0>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	4299      	cmp	r1, r3
 80087f6:	d018      	beq.n	800882a <PxMessagingTask+0x2de>
					for(i =0; i < temp; i++){
 80087f8:	3201      	adds	r2, #1
 80087fa:	b2d2      	uxtb	r2, r2
 80087fc:	e7ee      	b.n	80087dc <PxMessagingTask+0x290>
 80087fe:	46ba      	mov	sl, r7
 8008800:	4664      	mov	r4, ip
					result =BOS_ERR_WrongID;
 8008802:	2366      	movs	r3, #102	; 0x66
 8008804:	469b      	mov	fp, r3
 8008806:	e6dd      	b.n	80085c4 <PxMessagingTask+0x78>
				else if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 8008808:	4b39      	ldr	r3, [pc, #228]	; (80088f0 <PxMessagingTask+0x3a4>)
 800880a:	5d5a      	ldrb	r2, [r3, r5]
 800880c:	3a01      	subs	r2, #1
 800880e:	00eb      	lsls	r3, r5, #3
 8008810:	1b5b      	subs	r3, r3, r5
 8008812:	00d9      	lsls	r1, r3, #3
 8008814:	4b33      	ldr	r3, [pc, #204]	; (80088e4 <PxMessagingTask+0x398>)
 8008816:	185b      	adds	r3, r3, r1
 8008818:	5c9a      	ldrb	r2, [r3, r2]
 800881a:	4b39      	ldr	r3, [pc, #228]	; (8008900 <PxMessagingTask+0x3b4>)
 800881c:	799b      	ldrb	r3, [r3, #6]
 800881e:	429a      	cmp	r2, r3
 8008820:	d000      	beq.n	8008824 <PxMessagingTask+0x2d8>
 8008822:	e6cf      	b.n	80085c4 <PxMessagingTask+0x78>
					result =BOS_ERR_MSG_Reflection;
 8008824:	2303      	movs	r3, #3
 8008826:	469b      	mov	fp, r3
 8008828:	e6cc      	b.n	80085c4 <PxMessagingTask+0x78>
 800882a:	46ba      	mov	sl, r7
 800882c:	4664      	mov	r4, ip
							result =BOS_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	469b      	mov	fp, r3
 8008832:	e6c7      	b.n	80085c4 <PxMessagingTask+0x78>
							indMode =IND_PING;
 8008834:	4b31      	ldr	r3, [pc, #196]	; (80088fc <PxMessagingTask+0x3b0>)
 8008836:	2201      	movs	r2, #1
 8008838:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800883a:	200a      	movs	r0, #10
 800883c:	f005 f8b2 	bl	800d9a4 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 8008840:	4b29      	ldr	r3, [pc, #164]	; (80088e8 <PxMessagingTask+0x39c>)
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2b60      	cmp	r3, #96	; 0x60
 8008846:	d002      	beq.n	800884e <PxMessagingTask+0x302>
 8008848:	2b20      	cmp	r3, #32
 800884a:	d000      	beq.n	800884e <PxMessagingTask+0x302>
 800884c:	e6d4      	b.n	80085f8 <PxMessagingTask+0xac>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800884e:	2200      	movs	r2, #0
 8008850:	2102      	movs	r1, #2
 8008852:	9805      	ldr	r0, [sp, #20]
 8008854:	f7ff fce6 	bl	8008224 <SendMessageToModule>
 8008858:	e6ce      	b.n	80085f8 <PxMessagingTask+0xac>
							if(!moduleAlias[myID][0])
 800885a:	4b24      	ldr	r3, [pc, #144]	; (80088ec <PxMessagingTask+0x3a0>)
 800885c:	781a      	ldrb	r2, [r3, #0]
 800885e:	0093      	lsls	r3, r2, #2
 8008860:	189b      	adds	r3, r3, r2
 8008862:	005a      	lsls	r2, r3, #1
 8008864:	4b28      	ldr	r3, [pc, #160]	; (8008908 <PxMessagingTask+0x3bc>)
 8008866:	5cd3      	ldrb	r3, [r2, r3]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d118      	bne.n	800889e <PxMessagingTask+0x352>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800886c:	4824      	ldr	r0, [pc, #144]	; (8008900 <PxMessagingTask+0x3b4>)
 800886e:	9a05      	ldr	r2, [sp, #20]
 8008870:	4926      	ldr	r1, [pc, #152]	; (800890c <PxMessagingTask+0x3c0>)
 8008872:	3008      	adds	r0, #8
 8008874:	f00a fc9a 	bl	80131ac <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8008878:	4c21      	ldr	r4, [pc, #132]	; (8008900 <PxMessagingTask+0x3b4>)
 800887a:	3408      	adds	r4, #8
 800887c:	0020      	movs	r0, r4
 800887e:	f7f7 fc4b 	bl	8000118 <strlen>
 8008882:	b282      	uxth	r2, r0
 8008884:	4b22      	ldr	r3, [pc, #136]	; (8008910 <PxMessagingTask+0x3c4>)
 8008886:	7818      	ldrb	r0, [r3, #0]
 8008888:	2301      	movs	r3, #1
 800888a:	425b      	negs	r3, r3
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	3333      	adds	r3, #51	; 0x33
 8008890:	0021      	movs	r1, r4
 8008892:	f004 ff05 	bl	800d6a0 <writePxMutex>
							responseStatus =BOS_OK;
 8008896:	4b1f      	ldr	r3, [pc, #124]	; (8008914 <PxMessagingTask+0x3c8>)
 8008898:	2200      	movs	r2, #0
 800889a:	701a      	strb	r2, [r3, #0]
							break;
 800889c:	e6ac      	b.n	80085f8 <PxMessagingTask+0xac>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800889e:	230a      	movs	r3, #10
 80088a0:	9905      	ldr	r1, [sp, #20]
 80088a2:	434b      	muls	r3, r1
 80088a4:	4a18      	ldr	r2, [pc, #96]	; (8008908 <PxMessagingTask+0x3bc>)
 80088a6:	189b      	adds	r3, r3, r2
 80088a8:	4815      	ldr	r0, [pc, #84]	; (8008900 <PxMessagingTask+0x3b4>)
 80088aa:	000a      	movs	r2, r1
 80088ac:	491a      	ldr	r1, [pc, #104]	; (8008918 <PxMessagingTask+0x3cc>)
 80088ae:	3008      	adds	r0, #8
 80088b0:	f00a fc7c 	bl	80131ac <sprintf>
 80088b4:	e7e0      	b.n	8008878 <PxMessagingTask+0x32c>
							IND_ON();
 80088b6:	2090      	movs	r0, #144	; 0x90
 80088b8:	2201      	movs	r2, #1
 80088ba:	2140      	movs	r1, #64	; 0x40
 80088bc:	05c0      	lsls	r0, r0, #23
 80088be:	f008 fb22 	bl	8010f06 <HAL_GPIO_WritePin>
							break;
 80088c2:	e699      	b.n	80085f8 <PxMessagingTask+0xac>
							IND_OFF();
 80088c4:	2090      	movs	r0, #144	; 0x90
 80088c6:	2200      	movs	r2, #0
 80088c8:	2140      	movs	r1, #64	; 0x40
 80088ca:	05c0      	lsls	r0, r0, #23
 80088cc:	f008 fb1b 	bl	8010f06 <HAL_GPIO_WritePin>
							break;
 80088d0:	e692      	b.n	80085f8 <PxMessagingTask+0xac>
							IND_toggle();
 80088d2:	2090      	movs	r0, #144	; 0x90
 80088d4:	2140      	movs	r1, #64	; 0x40
 80088d6:	05c0      	lsls	r0, r0, #23
 80088d8:	f008 fb1b 	bl	8010f12 <HAL_GPIO_TogglePin>
							break;
 80088dc:	e68c      	b.n	80085f8 <PxMessagingTask+0xac>
 80088de:	46c0      	nop			; (mov r8, r8)
 80088e0:	20000c4c 	.word	0x20000c4c
 80088e4:	20000c90 	.word	0x20000c90
 80088e8:	200067c8 	.word	0x200067c8
 80088ec:	20000a98 	.word	0x20000a98
 80088f0:	20000c50 	.word	0x20000c50
 80088f4:	080179cc 	.word	0x080179cc
 80088f8:	20000c2c 	.word	0x20000c2c
 80088fc:	2000113e 	.word	0x2000113e
 8008900:	20001dac 	.word	0x20001dac
 8008904:	20000c48 	.word	0x20000c48
 8008908:	20000dc4 	.word	0x20000dc4
 800890c:	08019524 	.word	0x08019524
 8008910:	20000c28 	.word	0x20000c28
 8008914:	20000c3c 	.word	0x20000c3c
 8008918:	08019538 	.word	0x08019538
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800891c:	9b05      	ldr	r3, [sp, #20]
 800891e:	021a      	lsls	r2, r3, #8
 8008920:	b292      	uxth	r2, r2
 8008922:	1ca0      	adds	r0, r4, #2
 8008924:	00eb      	lsls	r3, r5, #3
 8008926:	1b5b      	subs	r3, r3, r5
 8008928:	00d9      	lsls	r1, r3, #3
 800892a:	4bdb      	ldr	r3, [pc, #876]	; (8008c98 <PxMessagingTask+0x74c>)
 800892c:	1859      	adds	r1, r3, r1
 800892e:	5c0b      	ldrb	r3, [r1, r0]
 8008930:	18d2      	adds	r2, r2, r3
 8008932:	4bda      	ldr	r3, [pc, #872]	; (8008c9c <PxMessagingTask+0x750>)
 8008934:	00a8      	lsls	r0, r5, #2
 8008936:	521a      	strh	r2, [r3, r0]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008938:	5d0a      	ldrb	r2, [r1, r4]
 800893a:	0212      	lsls	r2, r2, #8
 800893c:	3401      	adds	r4, #1
 800893e:	5d09      	ldrb	r1, [r1, r4]
 8008940:	1852      	adds	r2, r2, r1
 8008942:	181b      	adds	r3, r3, r0
 8008944:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 8008946:	4bd6      	ldr	r3, [pc, #856]	; (8008ca0 <PxMessagingTask+0x754>)
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	4ad6      	ldr	r2, [pc, #856]	; (8008ca4 <PxMessagingTask+0x758>)
 800894c:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 800894e:	0a1b      	lsrs	r3, r3, #8
 8008950:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8008952:	9c07      	ldr	r4, [sp, #28]
 8008954:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 8008956:	2002      	movs	r0, #2
 8008958:	f005 f824 	bl	800d9a4 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800895c:	2303      	movs	r3, #3
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	3308      	adds	r3, #8
 8008962:	2200      	movs	r2, #0
 8008964:	2100      	movs	r1, #0
 8008966:	0020      	movs	r0, r4
 8008968:	f7ff fa08 	bl	8007d7c <SendMessageFromPort>
							break;
 800896c:	e644      	b.n	80085f8 <PxMessagingTask+0xac>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800896e:	9b05      	ldr	r3, [sp, #20]
 8008970:	021a      	lsls	r2, r3, #8
 8008972:	b292      	uxth	r2, r2
 8008974:	1ca1      	adds	r1, r4, #2
 8008976:	00eb      	lsls	r3, r5, #3
 8008978:	1b5b      	subs	r3, r3, r5
 800897a:	00d8      	lsls	r0, r3, #3
 800897c:	4bc6      	ldr	r3, [pc, #792]	; (8008c98 <PxMessagingTask+0x74c>)
 800897e:	1818      	adds	r0, r3, r0
 8008980:	5c43      	ldrb	r3, [r0, r1]
 8008982:	18d2      	adds	r2, r2, r3
 8008984:	4bc5      	ldr	r3, [pc, #788]	; (8008c9c <PxMessagingTask+0x750>)
 8008986:	00a9      	lsls	r1, r5, #2
 8008988:	525a      	strh	r2, [r3, r1]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800898a:	5d02      	ldrb	r2, [r0, r4]
 800898c:	0212      	lsls	r2, r2, #8
 800898e:	3401      	adds	r4, #1
 8008990:	5d00      	ldrb	r0, [r0, r4]
 8008992:	1812      	adds	r2, r2, r0
 8008994:	185b      	adds	r3, r3, r1
 8008996:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 8008998:	4bc3      	ldr	r3, [pc, #780]	; (8008ca8 <PxMessagingTask+0x75c>)
 800899a:	2200      	movs	r2, #0
 800899c:	701a      	strb	r2, [r3, #0]
							break;
 800899e:	e62b      	b.n	80085f8 <PxMessagingTask+0xac>
							ExploreNeighbors(port);
 80089a0:	9807      	ldr	r0, [sp, #28]
 80089a2:	f7fa ffa7 	bl	80038f4 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 80089a6:	4bc1      	ldr	r3, [pc, #772]	; (8008cac <PxMessagingTask+0x760>)
 80089a8:	2202      	movs	r2, #2
 80089aa:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 80089ac:	200a      	movs	r0, #10
 80089ae:	f004 fff9 	bl	800d9a4 <osDelay>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 80089b2:	2401      	movs	r4, #1
							temp =0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	001e      	movs	r6, r3
							for(uint8_t p =1; p <= NumOfPorts; p++){
 80089b8:	e001      	b.n	80089be <PxMessagingTask+0x472>
 80089ba:	3401      	adds	r4, #1
 80089bc:	b2e4      	uxtb	r4, r4
 80089be:	2c05      	cmp	r4, #5
 80089c0:	d812      	bhi.n	80089e8 <PxMessagingTask+0x49c>
								if(neighbors[p - 1][0]){
 80089c2:	1e63      	subs	r3, r4, #1
 80089c4:	0099      	lsls	r1, r3, #2
 80089c6:	4ab5      	ldr	r2, [pc, #724]	; (8008c9c <PxMessagingTask+0x750>)
 80089c8:	5a8a      	ldrh	r2, [r1, r2]
 80089ca:	2a00      	cmp	r2, #0
 80089cc:	d0f5      	beq.n	80089ba <PxMessagingTask+0x46e>
									messageParams[temp] =p;
 80089ce:	4ab5      	ldr	r2, [pc, #724]	; (8008ca4 <PxMessagingTask+0x758>)
 80089d0:	5594      	strb	r4, [r2, r6]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 80089d2:	1c70      	adds	r0, r6, #1
 80089d4:	000b      	movs	r3, r1
 80089d6:	49b1      	ldr	r1, [pc, #708]	; (8008c9c <PxMessagingTask+0x750>)
 80089d8:	1859      	adds	r1, r3, r1
 80089da:	1880      	adds	r0, r0, r2
 80089dc:	2204      	movs	r2, #4
 80089de:	f00a f9e2 	bl	8012da6 <memcpy>
									temp +=5;
 80089e2:	3605      	adds	r6, #5
 80089e4:	b2f6      	uxtb	r6, r6
 80089e6:	e7e8      	b.n	80089ba <PxMessagingTask+0x46e>
 80089e8:	46b2      	mov	sl, r6
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 80089ea:	b2b2      	uxth	r2, r6
 80089ec:	210d      	movs	r1, #13
 80089ee:	9805      	ldr	r0, [sp, #20]
 80089f0:	f7ff fc18 	bl	8008224 <SendMessageToModule>
							break;
 80089f4:	e600      	b.n	80085f8 <PxMessagingTask+0xac>
							temp =numOfParams / 5;
 80089f6:	2105      	movs	r1, #5
 80089f8:	0038      	movs	r0, r7
 80089fa:	f7f7 fba9 	bl	8000150 <__udivsi3>
 80089fe:	b2c3      	uxtb	r3, r0
 8008a00:	469a      	mov	sl, r3
							for(uint8_t k =0; k < temp; k++){
 8008a02:	2600      	movs	r6, #0
 8008a04:	e019      	b.n	8008a3a <PxMessagingTask+0x4ee>
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8008a06:	00b3      	lsls	r3, r6, #2
 8008a08:	199b      	adds	r3, r3, r6
 8008a0a:	18e2      	adds	r2, r4, r3
 8008a0c:	4694      	mov	ip, r2
 8008a0e:	49a2      	ldr	r1, [pc, #648]	; (8008c98 <PxMessagingTask+0x74c>)
 8008a10:	00ea      	lsls	r2, r5, #3
 8008a12:	1b57      	subs	r7, r2, r5
 8008a14:	00f8      	lsls	r0, r7, #3
 8008a16:	1808      	adds	r0, r1, r0
 8008a18:	4667      	mov	r7, ip
 8008a1a:	5dc0      	ldrb	r0, [r0, r7]
 8008a1c:	3801      	subs	r0, #1
 8008a1e:	0080      	lsls	r0, r0, #2
 8008a20:	4fa3      	ldr	r7, [pc, #652]	; (8008cb0 <PxMessagingTask+0x764>)
 8008a22:	19c0      	adds	r0, r0, r7
 8008a24:	1c67      	adds	r7, r4, #1
 8008a26:	19df      	adds	r7, r3, r7
 8008a28:	1b52      	subs	r2, r2, r5
 8008a2a:	00d3      	lsls	r3, r2, #3
 8008a2c:	19db      	adds	r3, r3, r7
 8008a2e:	1859      	adds	r1, r3, r1
 8008a30:	2204      	movs	r2, #4
 8008a32:	f00a f9b8 	bl	8012da6 <memcpy>
							for(uint8_t k =0; k < temp; k++){
 8008a36:	3601      	adds	r6, #1
 8008a38:	b2f6      	uxtb	r6, r6
 8008a3a:	4556      	cmp	r6, sl
 8008a3c:	d3e3      	bcc.n	8008a06 <PxMessagingTask+0x4ba>
							responseStatus =BOS_OK;
 8008a3e:	4b9a      	ldr	r3, [pc, #616]	; (8008ca8 <PxMessagingTask+0x75c>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	701a      	strb	r2, [r3, #0]
							break;
 8008a44:	e5d8      	b.n	80085f8 <PxMessagingTask+0xac>
								if(p != port)
 8008a46:	9b07      	ldr	r3, [sp, #28]
 8008a48:	429e      	cmp	r6, r3
 8008a4a:	d00c      	beq.n	8008a66 <PxMessagingTask+0x51a>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 8008a4c:	0030      	movs	r0, r6
 8008a4e:	f004 fe09 	bl	800d664 <GetUart>
 8008a52:	19a2      	adds	r2, r4, r6
 8008a54:	3a01      	subs	r2, #1
 8008a56:	00eb      	lsls	r3, r5, #3
 8008a58:	1b5b      	subs	r3, r3, r5
 8008a5a:	00d9      	lsls	r1, r3, #3
 8008a5c:	4b8e      	ldr	r3, [pc, #568]	; (8008c98 <PxMessagingTask+0x74c>)
 8008a5e:	185b      	adds	r3, r3, r1
 8008a60:	5c99      	ldrb	r1, [r3, r2]
 8008a62:	f004 fe75 	bl	800d750 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008a66:	3601      	adds	r6, #1
 8008a68:	b2f6      	uxtb	r6, r6
 8008a6a:	2e05      	cmp	r6, #5
 8008a6c:	d9eb      	bls.n	8008a46 <PxMessagingTask+0x4fa>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 8008a6e:	9807      	ldr	r0, [sp, #28]
 8008a70:	f004 fdf8 	bl	800d664 <GetUart>
 8008a74:	340a      	adds	r4, #10
 8008a76:	00eb      	lsls	r3, r5, #3
 8008a78:	1b5b      	subs	r3, r3, r5
 8008a7a:	00da      	lsls	r2, r3, #3
 8008a7c:	4b86      	ldr	r3, [pc, #536]	; (8008c98 <PxMessagingTask+0x74c>)
 8008a7e:	189b      	adds	r3, r3, r2
 8008a80:	5d19      	ldrb	r1, [r3, r4]
 8008a82:	f004 fe65 	bl	800d750 <SwapUartPins>
							break;
 8008a86:	e5b7      	b.n	80085f8 <PxMessagingTask+0xac>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008a88:	2601      	movs	r6, #1
 8008a8a:	e7ee      	b.n	8008a6a <PxMessagingTask+0x51e>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 8008a8c:	00eb      	lsls	r3, r5, #3
 8008a8e:	1b5b      	subs	r3, r3, r5
 8008a90:	00da      	lsls	r2, r3, #3
 8008a92:	4b81      	ldr	r3, [pc, #516]	; (8008c98 <PxMessagingTask+0x74c>)
 8008a94:	189b      	adds	r3, r3, r2
 8008a96:	5d1b      	ldrb	r3, [r3, r4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d108      	bne.n	8008aae <PxMessagingTask+0x562>
								myID =cMessage[port - 1][1 + shift];
 8008a9c:	3401      	adds	r4, #1
 8008a9e:	2238      	movs	r2, #56	; 0x38
 8008aa0:	436a      	muls	r2, r5
 8008aa2:	4b7d      	ldr	r3, [pc, #500]	; (8008c98 <PxMessagingTask+0x74c>)
 8008aa4:	189b      	adds	r3, r3, r2
 8008aa6:	5d1a      	ldrb	r2, [r3, r4]
 8008aa8:	4b82      	ldr	r3, [pc, #520]	; (8008cb4 <PxMessagingTask+0x768>)
 8008aaa:	701a      	strb	r2, [r3, #0]
 8008aac:	e5a4      	b.n	80085f8 <PxMessagingTask+0xac>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d000      	beq.n	8008ab4 <PxMessagingTask+0x568>
 8008ab2:	e5a1      	b.n	80085f8 <PxMessagingTask+0xac>
								messageParams[0] =0; /* change own ID */
 8008ab4:	4a7b      	ldr	r2, [pc, #492]	; (8008ca4 <PxMessagingTask+0x758>)
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	7011      	strb	r1, [r2, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8008aba:	1c60      	adds	r0, r4, #1
 8008abc:	3337      	adds	r3, #55	; 0x37
 8008abe:	436b      	muls	r3, r5
 8008ac0:	4e75      	ldr	r6, [pc, #468]	; (8008c98 <PxMessagingTask+0x74c>)
 8008ac2:	18f3      	adds	r3, r6, r3
 8008ac4:	5c18      	ldrb	r0, [r3, r0]
 8008ac6:	7050      	strb	r0, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 8008ac8:	3402      	adds	r4, #2
 8008aca:	5d18      	ldrb	r0, [r3, r4]
 8008acc:	2303      	movs	r3, #3
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	330d      	adds	r3, #13
 8008ad2:	000a      	movs	r2, r1
 8008ad4:	f7ff f952 	bl	8007d7c <SendMessageFromPort>
 8008ad8:	e58e      	b.n	80085f8 <PxMessagingTask+0xac>
							if(longMessage){
 8008ada:	4b77      	ldr	r3, [pc, #476]	; (8008cb8 <PxMessagingTask+0x76c>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00f      	beq.n	8008b02 <PxMessagingTask+0x5b6>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008ae2:	4e76      	ldr	r6, [pc, #472]	; (8008cbc <PxMessagingTask+0x770>)
 8008ae4:	8833      	ldrh	r3, [r6, #0]
 8008ae6:	4876      	ldr	r0, [pc, #472]	; (8008cc0 <PxMessagingTask+0x774>)
 8008ae8:	1818      	adds	r0, r3, r0
 8008aea:	2138      	movs	r1, #56	; 0x38
 8008aec:	4369      	muls	r1, r5
 8008aee:	190c      	adds	r4, r1, r4
 8008af0:	4969      	ldr	r1, [pc, #420]	; (8008c98 <PxMessagingTask+0x74c>)
 8008af2:	1861      	adds	r1, r4, r1
 8008af4:	003a      	movs	r2, r7
 8008af6:	f00a f956 	bl	8012da6 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008afa:	8833      	ldrh	r3, [r6, #0]
 8008afc:	19df      	adds	r7, r3, r7
 8008afe:	8037      	strh	r7, [r6, #0]
 8008b00:	e57a      	b.n	80085f8 <PxMessagingTask+0xac>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008b02:	4e6e      	ldr	r6, [pc, #440]	; (8008cbc <PxMessagingTask+0x770>)
 8008b04:	8830      	ldrh	r0, [r6, #0]
 8008b06:	4b6e      	ldr	r3, [pc, #440]	; (8008cc0 <PxMessagingTask+0x774>)
 8008b08:	4699      	mov	r9, r3
 8008b0a:	4448      	add	r0, r9
 8008b0c:	2138      	movs	r1, #56	; 0x38
 8008b0e:	4369      	muls	r1, r5
 8008b10:	190c      	adds	r4, r1, r4
 8008b12:	4961      	ldr	r1, [pc, #388]	; (8008c98 <PxMessagingTask+0x74c>)
 8008b14:	1861      	adds	r1, r4, r1
 8008b16:	003a      	movs	r2, r7
 8008b18:	f00a f945 	bl	8012da6 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008b1c:	8834      	ldrh	r4, [r6, #0]
 8008b1e:	19e4      	adds	r4, r4, r7
 8008b20:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8008b22:	2116      	movs	r1, #22
 8008b24:	0020      	movs	r0, r4
 8008b26:	f7f7 fb13 	bl	8000150 <__udivsi3>
 8008b2a:	4b66      	ldr	r3, [pc, #408]	; (8008cc4 <PxMessagingTask+0x778>)
 8008b2c:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8008b2e:	0022      	movs	r2, r4
 8008b30:	4649      	mov	r1, r9
 8008b32:	4865      	ldr	r0, [pc, #404]	; (8008cc8 <PxMessagingTask+0x77c>)
 8008b34:	f00a f937 	bl	8012da6 <memcpy>
								longMessageLastPtr =0;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	8033      	strh	r3, [r6, #0]
 8008b3c:	e55c      	b.n	80085f8 <PxMessagingTask+0xac>
							ReadPortsDirMSG(src);
 8008b3e:	9805      	ldr	r0, [sp, #20]
 8008b40:	f004 fe68 	bl	800d814 <ReadPortsDirMSG>
								break;
 8008b44:	e558      	b.n	80085f8 <PxMessagingTask+0xac>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 8008b46:	9b05      	ldr	r3, [sp, #20]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	1860      	adds	r0, r4, r1
 8008b4c:	00ea      	lsls	r2, r5, #3
 8008b4e:	1b52      	subs	r2, r2, r5
 8008b50:	00d6      	lsls	r6, r2, #3
 8008b52:	4a51      	ldr	r2, [pc, #324]	; (8008c98 <PxMessagingTask+0x74c>)
 8008b54:	1992      	adds	r2, r2, r6
 8008b56:	5c10      	ldrb	r0, [r2, r0]
 8008b58:	3801      	subs	r0, #1
 8008b5a:	2680      	movs	r6, #128	; 0x80
 8008b5c:	0236      	lsls	r6, r6, #8
 8008b5e:	4106      	asrs	r6, r0
 8008b60:	485a      	ldr	r0, [pc, #360]	; (8008ccc <PxMessagingTask+0x780>)
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	5a1a      	ldrh	r2, [r3, r0]
 8008b66:	4332      	orrs	r2, r6
 8008b68:	521a      	strh	r2, [r3, r0]
							for(p =0; p < numOfParams; p++){
 8008b6a:	3101      	adds	r1, #1
 8008b6c:	b2c9      	uxtb	r1, r1
 8008b6e:	42b9      	cmp	r1, r7
 8008b70:	d3e9      	bcc.n	8008b46 <PxMessagingTask+0x5fa>
							responseStatus =BOS_OK;
 8008b72:	4b4d      	ldr	r3, [pc, #308]	; (8008ca8 <PxMessagingTask+0x75c>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	701a      	strb	r2, [r3, #0]
							break;
 8008b78:	e53e      	b.n	80085f8 <PxMessagingTask+0xac>
							for(p =0; p < numOfParams; p++){
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	e7f7      	b.n	8008b6e <PxMessagingTask+0x622>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008b7e:	00eb      	lsls	r3, r5, #3
 8008b80:	1b5b      	subs	r3, r3, r5
 8008b82:	00da      	lsls	r2, r3, #3
 8008b84:	4b44      	ldr	r3, [pc, #272]	; (8008c98 <PxMessagingTask+0x74c>)
 8008b86:	189b      	adds	r3, r3, r2
 8008b88:	5d1e      	ldrb	r6, [r3, r4]
 8008b8a:	0636      	lsls	r6, r6, #24
 8008b8c:	1c62      	adds	r2, r4, #1
 8008b8e:	5c9a      	ldrb	r2, [r3, r2]
 8008b90:	0412      	lsls	r2, r2, #16
 8008b92:	18b6      	adds	r6, r6, r2
 8008b94:	1ca2      	adds	r2, r4, #2
 8008b96:	5c9a      	ldrb	r2, [r3, r2]
 8008b98:	0212      	lsls	r2, r2, #8
 8008b9a:	18b6      	adds	r6, r6, r2
 8008b9c:	1ce2      	adds	r2, r4, #3
 8008b9e:	5c9a      	ldrb	r2, [r3, r2]
 8008ba0:	18b6      	adds	r6, r6, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 8008ba2:	1d22      	adds	r2, r4, #4
 8008ba4:	4691      	mov	r9, r2
 8008ba6:	5c9b      	ldrb	r3, [r3, r2]
 8008ba8:	2bff      	cmp	r3, #255	; 0xff
 8008baa:	d00e      	beq.n	8008bca <PxMessagingTask+0x67e>
								for(p =0; p < numOfParams; p++){
 8008bac:	2400      	movs	r4, #0
							temp =temp32 =0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	469a      	mov	sl, r3
 8008bb2:	e01b      	b.n	8008bec <PxMessagingTask+0x6a0>
									UpdateBaudrate(p,temp32);
 8008bb4:	0031      	movs	r1, r6
 8008bb6:	0020      	movs	r0, r4
 8008bb8:	f004 fdc0 	bl	800d73c <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 8008bbc:	3401      	adds	r4, #1
 8008bbe:	b2e4      	uxtb	r4, r4
 8008bc0:	2c05      	cmp	r4, #5
 8008bc2:	d9f7      	bls.n	8008bb4 <PxMessagingTask+0x668>
							temp =temp32 =0;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	469a      	mov	sl, r3
 8008bc8:	e516      	b.n	80085f8 <PxMessagingTask+0xac>
								for(p =1; p <= NumOfPorts; p++){
 8008bca:	2401      	movs	r4, #1
 8008bcc:	e7f8      	b.n	8008bc0 <PxMessagingTask+0x674>
									temp =cMessage[port - 1][4 + shift + p];
 8008bce:	464b      	mov	r3, r9
 8008bd0:	18e2      	adds	r2, r4, r3
 8008bd2:	00eb      	lsls	r3, r5, #3
 8008bd4:	1b5b      	subs	r3, r3, r5
 8008bd6:	00d9      	lsls	r1, r3, #3
 8008bd8:	4b2f      	ldr	r3, [pc, #188]	; (8008c98 <PxMessagingTask+0x74c>)
 8008bda:	185b      	adds	r3, r3, r1
 8008bdc:	5c9b      	ldrb	r3, [r3, r2]
 8008bde:	469a      	mov	sl, r3
									if(temp > 0 && temp <= NumOfPorts){
 8008be0:	3b01      	subs	r3, #1
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b04      	cmp	r3, #4
 8008be6:	d904      	bls.n	8008bf2 <PxMessagingTask+0x6a6>
								for(p =0; p < numOfParams; p++){
 8008be8:	3401      	adds	r4, #1
 8008bea:	b2e4      	uxtb	r4, r4
 8008bec:	42bc      	cmp	r4, r7
 8008bee:	d3ee      	bcc.n	8008bce <PxMessagingTask+0x682>
 8008bf0:	e502      	b.n	80085f8 <PxMessagingTask+0xac>
										UpdateBaudrate(temp,temp32);
 8008bf2:	0031      	movs	r1, r6
 8008bf4:	4650      	mov	r0, sl
 8008bf6:	f004 fda1 	bl	800d73c <UpdateBaudrate>
 8008bfa:	e7f5      	b.n	8008be8 <PxMessagingTask+0x69c>
							SaveToRO();
 8008bfc:	f001 f9ae 	bl	8009f5c <SaveToRO>
							SaveEEportsDir();
 8008c00:	f7fa fc20 	bl	8003444 <SaveEEportsDir>
							indMode =IND_PING;
 8008c04:	4b29      	ldr	r3, [pc, #164]	; (8008cac <PxMessagingTask+0x760>)
 8008c06:	2201      	movs	r2, #1
 8008c08:	701a      	strb	r2, [r3, #0]
							break;
 8008c0a:	e4f5      	b.n	80085f8 <PxMessagingTask+0xac>
							ClearEEportsDir();
 8008c0c:	f7fa fcf4 	bl	80035f8 <ClearEEportsDir>
							ClearROtopology();
 8008c10:	f001 fa90 	bl	800a134 <ClearROtopology>
							osDelay(100);
 8008c14:	2064      	movs	r0, #100	; 0x64
 8008c16:	f004 fec5 	bl	800d9a4 <osDelay>
							indMode =IND_TOPOLOGY;
 8008c1a:	4b24      	ldr	r3, [pc, #144]	; (8008cac <PxMessagingTask+0x760>)
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	701a      	strb	r2, [r3, #0]
							break;
 8008c20:	e4ea      	b.n	80085f8 <PxMessagingTask+0xac>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008c22:	f004 ffdf 	bl	800dbe4 <FreeRTOS_CLIGetOutputBuffer>
 8008c26:	0006      	movs	r6, r0
							if(dst == BOS_BROADCAST)
 8008c28:	464b      	mov	r3, r9
 8008c2a:	2bff      	cmp	r3, #255	; 0xff
 8008c2c:	d028      	beq.n	8008c80 <PxMessagingTask+0x734>
							else if(dst == BOS_MULTICAST)
 8008c2e:	2bfe      	cmp	r3, #254	; 0xfe
 8008c30:	d054      	beq.n	8008cdc <PxMessagingTask+0x790>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008c32:	00ea      	lsls	r2, r5, #3
 8008c34:	1b52      	subs	r2, r2, r5
 8008c36:	00d3      	lsls	r3, r2, #3
 8008c38:	191c      	adds	r4, r3, r4
 8008c3a:	4917      	ldr	r1, [pc, #92]	; (8008c98 <PxMessagingTask+0x74c>)
 8008c3c:	1861      	adds	r1, r4, r1
 8008c3e:	4824      	ldr	r0, [pc, #144]	; (8008cd0 <PxMessagingTask+0x784>)
 8008c40:	003a      	movs	r2, r7
 8008c42:	3058      	adds	r0, #88	; 0x58
 8008c44:	f00a f8af 	bl	8012da6 <memcpy>
								temp =PcPort;
 8008c48:	4f22      	ldr	r7, [pc, #136]	; (8008cd4 <PxMessagingTask+0x788>)
 8008c4a:	783c      	ldrb	r4, [r7, #0]
								PcPort =port;
 8008c4c:	9b07      	ldr	r3, [sp, #28]
 8008c4e:	703b      	strb	r3, [r7, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008c50:	2299      	movs	r2, #153	; 0x99
 8008c52:	481f      	ldr	r0, [pc, #124]	; (8008cd0 <PxMessagingTask+0x784>)
 8008c54:	0092      	lsls	r2, r2, #2
 8008c56:	0031      	movs	r1, r6
 8008c58:	3058      	adds	r0, #88	; 0x58
 8008c5a:	f004 ff5b 	bl	800db14 <FreeRTOS_CLIProcessCommand>
 8008c5e:	4681      	mov	r9, r0
								PcPort =temp;
 8008c60:	703c      	strb	r4, [r7, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8008c62:	4b1d      	ldr	r3, [pc, #116]	; (8008cd8 <PxMessagingTask+0x78c>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	2b60      	cmp	r3, #96	; 0x60
 8008c68:	d045      	beq.n	8008cf6 <PxMessagingTask+0x7aa>
							} while(xReturned != pdFALSE);
 8008c6a:	464b      	mov	r3, r9
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1eb      	bne.n	8008c48 <PxMessagingTask+0x6fc>
 8008c70:	46a2      	mov	sl, r4
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 8008c72:	4817      	ldr	r0, [pc, #92]	; (8008cd0 <PxMessagingTask+0x784>)
 8008c74:	2232      	movs	r2, #50	; 0x32
 8008c76:	2100      	movs	r1, #0
 8008c78:	3058      	adds	r0, #88	; 0x58
 8008c7a:	f00a f89d 	bl	8012db8 <memset>
							break;
 8008c7e:	e4bb      	b.n	80085f8 <PxMessagingTask+0xac>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 8008c80:	2138      	movs	r1, #56	; 0x38
 8008c82:	4369      	muls	r1, r5
 8008c84:	190c      	adds	r4, r1, r4
 8008c86:	4904      	ldr	r1, [pc, #16]	; (8008c98 <PxMessagingTask+0x74c>)
 8008c88:	1861      	adds	r1, r4, r1
 8008c8a:	1e7a      	subs	r2, r7, #1
 8008c8c:	4810      	ldr	r0, [pc, #64]	; (8008cd0 <PxMessagingTask+0x784>)
 8008c8e:	3058      	adds	r0, #88	; 0x58
 8008c90:	f00a f889 	bl	8012da6 <memcpy>
 8008c94:	e7d8      	b.n	8008c48 <PxMessagingTask+0x6fc>
 8008c96:	46c0      	nop			; (mov r8, r8)
 8008c98:	20000c90 	.word	0x20000c90
 8008c9c:	20001128 	.word	0x20001128
 8008ca0:	20000030 	.word	0x20000030
 8008ca4:	20000b3c 	.word	0x20000b3c
 8008ca8:	20000c3c 	.word	0x20000c3c
 8008cac:	2000113e 	.word	0x2000113e
 8008cb0:	20001114 	.word	0x20001114
 8008cb4:	20000a98 	.word	0x20000a98
 8008cb8:	20000c4c 	.word	0x20000c4c
 8008cbc:	20000c4a 	.word	0x20000c4a
 8008cc0:	20001e70 	.word	0x20001e70
 8008cc4:	20000008 	.word	0x20000008
 8008cc8:	20000ed4 	.word	0x20000ed4
 8008ccc:	20006d58 	.word	0x20006d58
 8008cd0:	20001dac 	.word	0x20001dac
 8008cd4:	20000c28 	.word	0x20000c28
 8008cd8:	200067c8 	.word	0x200067c8
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008cdc:	2138      	movs	r1, #56	; 0x38
 8008cde:	4369      	muls	r1, r5
 8008ce0:	190c      	adds	r4, r1, r4
 8008ce2:	49ed      	ldr	r1, [pc, #948]	; (8009098 <PxMessagingTask+0xb4c>)
 8008ce4:	1861      	adds	r1, r4, r1
 8008ce6:	4653      	mov	r3, sl
 8008ce8:	1afa      	subs	r2, r7, r3
 8008cea:	3a02      	subs	r2, #2
 8008cec:	48eb      	ldr	r0, [pc, #940]	; (800909c <PxMessagingTask+0xb50>)
 8008cee:	3058      	adds	r0, #88	; 0x58
 8008cf0:	f00a f859 	bl	8012da6 <memcpy>
 8008cf4:	e7a8      	b.n	8008c48 <PxMessagingTask+0x6fc>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 8008cf6:	0030      	movs	r0, r6
 8008cf8:	f7f7 fa0e 	bl	8000118 <strlen>
 8008cfc:	0002      	movs	r2, r0
 8008cfe:	0031      	movs	r1, r6
 8008d00:	48e7      	ldr	r0, [pc, #924]	; (80090a0 <PxMessagingTask+0xb54>)
 8008d02:	f00a f850 	bl	8012da6 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 8008d06:	0030      	movs	r0, r6
 8008d08:	f7f7 fa06 	bl	8000118 <strlen>
 8008d0c:	b282      	uxth	r2, r0
 8008d0e:	2118      	movs	r1, #24
 8008d10:	9805      	ldr	r0, [sp, #20]
 8008d12:	f7ff fa87 	bl	8008224 <SendMessageToModule>
									osDelay(10);
 8008d16:	200a      	movs	r0, #10
 8008d18:	f004 fe44 	bl	800d9a4 <osDelay>
 8008d1c:	e7a5      	b.n	8008c6a <PxMessagingTask+0x71e>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008d1e:	f004 ff61 	bl	800dbe4 <FreeRTOS_CLIGetOutputBuffer>
 8008d22:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8008d24:	f7f7 f9f8 	bl	8000118 <strlen>
 8008d28:	0002      	movs	r2, r0
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	0030      	movs	r0, r6
 8008d2e:	f00a f843 	bl	8012db8 <memset>
							if(longMessage){
 8008d32:	4bdc      	ldr	r3, [pc, #880]	; (80090a4 <PxMessagingTask+0xb58>)
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d011      	beq.n	8008d5e <PxMessagingTask+0x812>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008d3a:	4bdb      	ldr	r3, [pc, #876]	; (80090a8 <PxMessagingTask+0xb5c>)
 8008d3c:	4699      	mov	r9, r3
 8008d3e:	8818      	ldrh	r0, [r3, #0]
 8008d40:	1830      	adds	r0, r6, r0
 8008d42:	2138      	movs	r1, #56	; 0x38
 8008d44:	4369      	muls	r1, r5
 8008d46:	190c      	adds	r4, r1, r4
 8008d48:	49d3      	ldr	r1, [pc, #844]	; (8009098 <PxMessagingTask+0xb4c>)
 8008d4a:	1861      	adds	r1, r4, r1
 8008d4c:	003a      	movs	r2, r7
 8008d4e:	f00a f82a 	bl	8012da6 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008d52:	464b      	mov	r3, r9
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	19df      	adds	r7, r3, r7
 8008d58:	464b      	mov	r3, r9
 8008d5a:	801f      	strh	r7, [r3, #0]
 8008d5c:	e44c      	b.n	80085f8 <PxMessagingTask+0xac>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008d5e:	4bd2      	ldr	r3, [pc, #840]	; (80090a8 <PxMessagingTask+0xb5c>)
 8008d60:	4699      	mov	r9, r3
 8008d62:	8818      	ldrh	r0, [r3, #0]
 8008d64:	1830      	adds	r0, r6, r0
 8008d66:	2138      	movs	r1, #56	; 0x38
 8008d68:	4369      	muls	r1, r5
 8008d6a:	190c      	adds	r4, r1, r4
 8008d6c:	49ca      	ldr	r1, [pc, #808]	; (8009098 <PxMessagingTask+0xb4c>)
 8008d6e:	1861      	adds	r1, r4, r1
 8008d70:	003a      	movs	r2, r7
 8008d72:	f00a f818 	bl	8012da6 <memcpy>
								longMessageLastPtr =0;
 8008d76:	2100      	movs	r1, #0
 8008d78:	464b      	mov	r3, r9
 8008d7a:	8019      	strh	r1, [r3, #0]
								responseStatus =BOS_OK;
 8008d7c:	4bcb      	ldr	r3, [pc, #812]	; (80090ac <PxMessagingTask+0xb60>)
 8008d7e:	7019      	strb	r1, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8008d80:	000b      	movs	r3, r1
 8008d82:	000a      	movs	r2, r1
 8008d84:	48ca      	ldr	r0, [pc, #808]	; (80090b0 <PxMessagingTask+0xb64>)
 8008d86:	6800      	ldr	r0, [r0, #0]
 8008d88:	f006 f934 	bl	800eff4 <xTaskGenericNotify>
 8008d8c:	e434      	b.n	80085f8 <PxMessagingTask+0xac>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008d8e:	4bc9      	ldr	r3, [pc, #804]	; (80090b4 <PxMessagingTask+0xb68>)
 8008d90:	4ac9      	ldr	r2, [pc, #804]	; (80090b8 <PxMessagingTask+0xb6c>)
 8008d92:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 8008d94:	4bc9      	ldr	r3, [pc, #804]	; (80090bc <PxMessagingTask+0xb70>)
 8008d96:	2201      	movs	r2, #1
 8008d98:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008d9a:	200a      	movs	r0, #10
 8008d9c:	f004 fe02 	bl	800d9a4 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	4bc6      	ldr	r3, [pc, #792]	; (80090c0 <PxMessagingTask+0xb74>)
 8008da6:	4ac7      	ldr	r2, [pc, #796]	; (80090c4 <PxMessagingTask+0xb78>)
 8008da8:	60da      	str	r2, [r3, #12]
 8008daa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008dae:	46c0      	nop			; (mov r8, r8)
 8008db0:	e7fd      	b.n	8008dae <PxMessagingTask+0x862>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 8008db2:	00eb      	lsls	r3, r5, #3
 8008db4:	1b5b      	subs	r3, r3, r5
 8008db6:	00da      	lsls	r2, r3, #3
 8008db8:	4eb7      	ldr	r6, [pc, #732]	; (8009098 <PxMessagingTask+0xb4c>)
 8008dba:	18b6      	adds	r6, r6, r2
 8008dbc:	5d30      	ldrb	r0, [r6, r4]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	3319      	adds	r3, #25
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	f7fe ffd8 	bl	8007d7c <SendMessageFromPort>
							osDelay(100);
 8008dcc:	2064      	movs	r0, #100	; 0x64
 8008dce:	f004 fde9 	bl	800d9a4 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 8008dd2:	5d33      	ldrb	r3, [r6, r4]
 8008dd4:	4abc      	ldr	r2, [pc, #752]	; (80090c8 <PxMessagingTask+0xb7c>)
 8008dd6:	7811      	ldrb	r1, [r2, #0]
 8008dd8:	9a07      	ldr	r2, [sp, #28]
 8008dda:	9805      	ldr	r0, [sp, #20]
 8008ddc:	f001 f9d6 	bl	800a18c <remoteBootloaderUpdate>
							break;
 8008de0:	f7ff fc0a 	bl	80085f8 <PxMessagingTask+0xac>
							temp =cMessage[port - 1][11 + shift];
 8008de4:	9409      	str	r4, [sp, #36]	; 0x24
 8008de6:	230b      	movs	r3, #11
 8008de8:	469c      	mov	ip, r3
 8008dea:	44a4      	add	ip, r4
 8008dec:	4661      	mov	r1, ip
 8008dee:	910b      	str	r1, [sp, #44]	; 0x2c
 8008df0:	00eb      	lsls	r3, r5, #3
 8008df2:	1b5b      	subs	r3, r3, r5
 8008df4:	00da      	lsls	r2, r3, #3
 8008df6:	4ba8      	ldr	r3, [pc, #672]	; (8009098 <PxMessagingTask+0xb4c>)
 8008df8:	189b      	adds	r3, r3, r2
 8008dfa:	5c5b      	ldrb	r3, [r3, r1]
 8008dfc:	469a      	mov	sl, r3
							if(numOfParams == 15)
 8008dfe:	2f0f      	cmp	r7, #15
 8008e00:	d100      	bne.n	8008e04 <PxMessagingTask+0x8b8>
 8008e02:	e08a      	b.n	8008f1a <PxMessagingTask+0x9ce>
							if(numOfParams == 17)
 8008e04:	2f11      	cmp	r7, #17
 8008e06:	d100      	bne.n	8008e0a <PxMessagingTask+0x8be>
 8008e08:	e090      	b.n	8008f2c <PxMessagingTask+0x9e0>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008e0a:	00ea      	lsls	r2, r5, #3
 8008e0c:	1b52      	subs	r2, r2, r5
 8008e0e:	00d3      	lsls	r3, r2, #3
 8008e10:	4aa1      	ldr	r2, [pc, #644]	; (8009098 <PxMessagingTask+0xb4c>)
 8008e12:	18d3      	adds	r3, r2, r3
 8008e14:	5d1a      	ldrb	r2, [r3, r4]
 8008e16:	0612      	lsls	r2, r2, #24
 8008e18:	1c61      	adds	r1, r4, #1
 8008e1a:	910c      	str	r1, [sp, #48]	; 0x30
 8008e1c:	5c59      	ldrb	r1, [r3, r1]
 8008e1e:	0409      	lsls	r1, r1, #16
 8008e20:	1852      	adds	r2, r2, r1
 8008e22:	1ca1      	adds	r1, r4, #2
 8008e24:	910d      	str	r1, [sp, #52]	; 0x34
 8008e26:	5c59      	ldrb	r1, [r3, r1]
 8008e28:	0209      	lsls	r1, r1, #8
 8008e2a:	1852      	adds	r2, r2, r1
 8008e2c:	1ce1      	adds	r1, r4, #3
 8008e2e:	910e      	str	r1, [sp, #56]	; 0x38
 8008e30:	5c59      	ldrb	r1, [r3, r1]
 8008e32:	1852      	adds	r2, r2, r1
 8008e34:	920a      	str	r2, [sp, #40]	; 0x28
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008e36:	1d22      	adds	r2, r4, #4
 8008e38:	920f      	str	r2, [sp, #60]	; 0x3c
 8008e3a:	5c9e      	ldrb	r6, [r3, r2]
 8008e3c:	0636      	lsls	r6, r6, #24
 8008e3e:	1d62      	adds	r2, r4, #5
 8008e40:	9210      	str	r2, [sp, #64]	; 0x40
 8008e42:	5c9a      	ldrb	r2, [r3, r2]
 8008e44:	0412      	lsls	r2, r2, #16
 8008e46:	18b6      	adds	r6, r6, r2
 8008e48:	1da2      	adds	r2, r4, #6
 8008e4a:	9211      	str	r2, [sp, #68]	; 0x44
 8008e4c:	5c9a      	ldrb	r2, [r3, r2]
 8008e4e:	0212      	lsls	r2, r2, #8
 8008e50:	18b2      	adds	r2, r6, r2
 8008e52:	1de1      	adds	r1, r4, #7
 8008e54:	5c5e      	ldrb	r6, [r3, r1]
 8008e56:	1996      	adds	r6, r2, r6
							if(temp == false){
 8008e58:	4653      	mov	r3, sl
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d16f      	bne.n	8008f3e <PxMessagingTask+0x9f2>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 8008e5e:	00eb      	lsls	r3, r5, #3
 8008e60:	1b5b      	subs	r3, r3, r5
 8008e62:	00d9      	lsls	r1, r3, #3
 8008e64:	4a8c      	ldr	r2, [pc, #560]	; (8009098 <PxMessagingTask+0xb4c>)
 8008e66:	1852      	adds	r2, r2, r1
 8008e68:	0023      	movs	r3, r4
 8008e6a:	3309      	adds	r3, #9
 8008e6c:	5cd3      	ldrb	r3, [r2, r3]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d013      	beq.n	8008e9a <PxMessagingTask+0x94e>
 8008e72:	2238      	movs	r2, #56	; 0x38
 8008e74:	436a      	muls	r2, r5
 8008e76:	4988      	ldr	r1, [pc, #544]	; (8009098 <PxMessagingTask+0xb4c>)
 8008e78:	1889      	adds	r1, r1, r2
 8008e7a:	0022      	movs	r2, r4
 8008e7c:	320a      	adds	r2, #10
 8008e7e:	5c89      	ldrb	r1, [r1, r2]
 8008e80:	2900      	cmp	r1, #0
 8008e82:	d00a      	beq.n	8008e9a <PxMessagingTask+0x94e>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 8008e84:	3a02      	subs	r2, #2
 8008e86:	2738      	movs	r7, #56	; 0x38
 8008e88:	436f      	muls	r7, r5
 8008e8a:	4883      	ldr	r0, [pc, #524]	; (8009098 <PxMessagingTask+0xb4c>)
 8008e8c:	19c0      	adds	r0, r0, r7
 8008e8e:	5c80      	ldrb	r0, [r0, r2]
 8008e90:	9100      	str	r1, [sp, #0]
 8008e92:	0032      	movs	r2, r6
 8008e94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e96:	f7fe fe5d 	bl	8007b54 <SetupDMAStreams>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 8008e9a:	00eb      	lsls	r3, r5, #3
 8008e9c:	1b5b      	subs	r3, r3, r5
 8008e9e:	00da      	lsls	r2, r3, #3
 8008ea0:	4b7d      	ldr	r3, [pc, #500]	; (8009098 <PxMessagingTask+0xb4c>)
 8008ea2:	189b      	adds	r3, r3, r2
 8008ea4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ea6:	5c9b      	ldrb	r3, [r3, r2]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d012      	beq.n	8008ed2 <PxMessagingTask+0x986>
 8008eac:	0022      	movs	r2, r4
 8008eae:	320c      	adds	r2, #12
 8008eb0:	2038      	movs	r0, #56	; 0x38
 8008eb2:	4368      	muls	r0, r5
 8008eb4:	4978      	ldr	r1, [pc, #480]	; (8009098 <PxMessagingTask+0xb4c>)
 8008eb6:	1809      	adds	r1, r1, r0
 8008eb8:	5c89      	ldrb	r1, [r1, r2]
 8008eba:	2900      	cmp	r1, #0
 8008ebc:	d009      	beq.n	8008ed2 <PxMessagingTask+0x986>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 8008ebe:	3a04      	subs	r2, #4
 8008ec0:	0007      	movs	r7, r0
 8008ec2:	4875      	ldr	r0, [pc, #468]	; (8009098 <PxMessagingTask+0xb4c>)
 8008ec4:	19c0      	adds	r0, r0, r7
 8008ec6:	5c80      	ldrb	r0, [r0, r2]
 8008ec8:	9100      	str	r1, [sp, #0]
 8008eca:	0032      	movs	r2, r6
 8008ecc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ece:	f7fe fe41 	bl	8007b54 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 8008ed2:	00eb      	lsls	r3, r5, #3
 8008ed4:	1b5b      	subs	r3, r3, r5
 8008ed6:	00d9      	lsls	r1, r3, #3
 8008ed8:	4a6f      	ldr	r2, [pc, #444]	; (8009098 <PxMessagingTask+0xb4c>)
 8008eda:	1852      	adds	r2, r2, r1
 8008edc:	0023      	movs	r3, r4
 8008ede:	330d      	adds	r3, #13
 8008ee0:	5cd3      	ldrb	r3, [r2, r3]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <PxMessagingTask+0x99e>
 8008ee6:	f7ff fb87 	bl	80085f8 <PxMessagingTask+0xac>
 8008eea:	2238      	movs	r2, #56	; 0x38
 8008eec:	436a      	muls	r2, r5
 8008eee:	496a      	ldr	r1, [pc, #424]	; (8009098 <PxMessagingTask+0xb4c>)
 8008ef0:	1889      	adds	r1, r1, r2
 8008ef2:	0022      	movs	r2, r4
 8008ef4:	320e      	adds	r2, #14
 8008ef6:	5c89      	ldrb	r1, [r1, r2]
 8008ef8:	2900      	cmp	r1, #0
 8008efa:	d101      	bne.n	8008f00 <PxMessagingTask+0x9b4>
 8008efc:	f7ff fb7c 	bl	80085f8 <PxMessagingTask+0xac>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 8008f00:	3408      	adds	r4, #8
 8008f02:	2038      	movs	r0, #56	; 0x38
 8008f04:	4368      	muls	r0, r5
 8008f06:	4a64      	ldr	r2, [pc, #400]	; (8009098 <PxMessagingTask+0xb4c>)
 8008f08:	1812      	adds	r2, r2, r0
 8008f0a:	5d10      	ldrb	r0, [r2, r4]
 8008f0c:	9100      	str	r1, [sp, #0]
 8008f0e:	0032      	movs	r2, r6
 8008f10:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f12:	f7fe fe1f 	bl	8007b54 <SetupDMAStreams>
 8008f16:	f7ff fb6f 	bl	80085f8 <PxMessagingTask+0xac>
								temp =cMessage[port - 1][13 + shift];
 8008f1a:	2338      	movs	r3, #56	; 0x38
 8008f1c:	436b      	muls	r3, r5
 8008f1e:	4a5e      	ldr	r2, [pc, #376]	; (8009098 <PxMessagingTask+0xb4c>)
 8008f20:	18d2      	adds	r2, r2, r3
 8008f22:	0023      	movs	r3, r4
 8008f24:	330d      	adds	r3, #13
 8008f26:	5cd3      	ldrb	r3, [r2, r3]
 8008f28:	469a      	mov	sl, r3
 8008f2a:	e76b      	b.n	8008e04 <PxMessagingTask+0x8b8>
								temp =cMessage[port - 1][15 + shift];
 8008f2c:	2338      	movs	r3, #56	; 0x38
 8008f2e:	436b      	muls	r3, r5
 8008f30:	4a59      	ldr	r2, [pc, #356]	; (8009098 <PxMessagingTask+0xb4c>)
 8008f32:	18d2      	adds	r2, r2, r3
 8008f34:	0023      	movs	r3, r4
 8008f36:	330f      	adds	r3, #15
 8008f38:	5cd3      	ldrb	r3, [r2, r3]
 8008f3a:	469a      	mov	sl, r3
 8008f3c:	e765      	b.n	8008e0a <PxMessagingTask+0x8be>
 8008f3e:	000e      	movs	r6, r1
 8008f40:	46b9      	mov	r9, r7
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 8008f42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008f44:	003b      	movs	r3, r7
 8008f46:	3308      	adds	r3, #8
 8008f48:	2238      	movs	r2, #56	; 0x38
 8008f4a:	436a      	muls	r2, r5
 8008f4c:	4c52      	ldr	r4, [pc, #328]	; (8009098 <PxMessagingTask+0xb4c>)
 8008f4e:	18a4      	adds	r4, r4, r2
 8008f50:	5ce1      	ldrb	r1, [r4, r3]
 8008f52:	20e4      	movs	r0, #228	; 0xe4
 8008f54:	f002 fa1a 	bl	800b38c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 8008f58:	5de1      	ldrb	r1, [r4, r7]
 8008f5a:	0209      	lsls	r1, r1, #8
 8008f5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f5e:	5ce3      	ldrb	r3, [r4, r3]
 8008f60:	18c9      	adds	r1, r1, r3
 8008f62:	b289      	uxth	r1, r1
 8008f64:	20e5      	movs	r0, #229	; 0xe5
 8008f66:	f002 fa11 	bl	800b38c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 8008f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f6c:	5ce1      	ldrb	r1, [r4, r3]
 8008f6e:	0209      	lsls	r1, r1, #8
 8008f70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f72:	5ce3      	ldrb	r3, [r4, r3]
 8008f74:	18c9      	adds	r1, r1, r3
 8008f76:	b289      	uxth	r1, r1
 8008f78:	20e6      	movs	r0, #230	; 0xe6
 8008f7a:	f002 fa07 	bl	800b38c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 8008f7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f80:	5ce1      	ldrb	r1, [r4, r3]
 8008f82:	0209      	lsls	r1, r1, #8
 8008f84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f86:	5ce3      	ldrb	r3, [r4, r3]
 8008f88:	18c9      	adds	r1, r1, r3
 8008f8a:	b289      	uxth	r1, r1
 8008f8c:	20e7      	movs	r0, #231	; 0xe7
 8008f8e:	f002 f9fd 	bl	800b38c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 8008f92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f94:	5ce1      	ldrb	r1, [r4, r3]
 8008f96:	0209      	lsls	r1, r1, #8
 8008f98:	5da3      	ldrb	r3, [r4, r6]
 8008f9a:	18c9      	adds	r1, r1, r3
 8008f9c:	b289      	uxth	r1, r1
 8008f9e:	20e8      	movs	r0, #232	; 0xe8
 8008fa0:	f002 f9f4 	bl	800b38c <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 8008fa4:	003b      	movs	r3, r7
 8008fa6:	3309      	adds	r3, #9
 8008fa8:	5ce1      	ldrb	r1, [r4, r3]
 8008faa:	0209      	lsls	r1, r1, #8
 8008fac:	3301      	adds	r3, #1
 8008fae:	5ce3      	ldrb	r3, [r4, r3]
 8008fb0:	18c9      	adds	r1, r1, r3
 8008fb2:	b289      	uxth	r1, r1
 8008fb4:	20e9      	movs	r0, #233	; 0xe9
 8008fb6:	f002 f9e9 	bl	800b38c <EE_WriteVariable>
								if(numOfParams == 19)
 8008fba:	464b      	mov	r3, r9
 8008fbc:	2b13      	cmp	r3, #19
 8008fbe:	d10e      	bne.n	8008fde <PxMessagingTask+0xa92>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 8008fc0:	2238      	movs	r2, #56	; 0x38
 8008fc2:	436a      	muls	r2, r5
 8008fc4:	4b34      	ldr	r3, [pc, #208]	; (8009098 <PxMessagingTask+0xb4c>)
 8008fc6:	189b      	adds	r3, r3, r2
 8008fc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fca:	5c99      	ldrb	r1, [r3, r2]
 8008fcc:	0209      	lsls	r1, r1, #8
 8008fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fd0:	320c      	adds	r2, #12
 8008fd2:	5c9b      	ldrb	r3, [r3, r2]
 8008fd4:	18c9      	adds	r1, r1, r3
 8008fd6:	b289      	uxth	r1, r1
 8008fd8:	20ea      	movs	r0, #234	; 0xea
 8008fda:	f002 f9d7 	bl	800b38c <EE_WriteVariable>
								if(numOfParams == 21)
 8008fde:	464b      	mov	r3, r9
 8008fe0:	2b15      	cmp	r3, #21
 8008fe2:	d110      	bne.n	8009006 <PxMessagingTask+0xaba>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 8008fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fe6:	0001      	movs	r1, r0
 8008fe8:	310d      	adds	r1, #13
 8008fea:	3323      	adds	r3, #35	; 0x23
 8008fec:	436b      	muls	r3, r5
 8008fee:	4a2a      	ldr	r2, [pc, #168]	; (8009098 <PxMessagingTask+0xb4c>)
 8008ff0:	18d2      	adds	r2, r2, r3
 8008ff2:	5c51      	ldrb	r1, [r2, r1]
 8008ff4:	0209      	lsls	r1, r1, #8
 8008ff6:	0003      	movs	r3, r0
 8008ff8:	330e      	adds	r3, #14
 8008ffa:	5cd3      	ldrb	r3, [r2, r3]
 8008ffc:	18c9      	adds	r1, r1, r3
 8008ffe:	b289      	uxth	r1, r1
 8009000:	20eb      	movs	r0, #235	; 0xeb
 8009002:	f002 f9c3 	bl	800b38c <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	4b2d      	ldr	r3, [pc, #180]	; (80090c0 <PxMessagingTask+0xb74>)
 800900c:	4a2d      	ldr	r2, [pc, #180]	; (80090c4 <PxMessagingTask+0xb78>)
 800900e:	60da      	str	r2, [r3, #12]
 8009010:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8009014:	46c0      	nop			; (mov r8, r8)
 8009016:	e7fd      	b.n	8009014 <PxMessagingTask+0xac8>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8009018:	00eb      	lsls	r3, r5, #3
 800901a:	1b5b      	subs	r3, r3, r5
 800901c:	00da      	lsls	r2, r3, #3
 800901e:	4e1e      	ldr	r6, [pc, #120]	; (8009098 <PxMessagingTask+0xb4c>)
 8009020:	18b6      	adds	r6, r6, r2
 8009022:	5d33      	ldrb	r3, [r6, r4]
 8009024:	061b      	lsls	r3, r3, #24
 8009026:	1c62      	adds	r2, r4, #1
 8009028:	5cb2      	ldrb	r2, [r6, r2]
 800902a:	0412      	lsls	r2, r2, #16
 800902c:	189b      	adds	r3, r3, r2
 800902e:	1ca2      	adds	r2, r4, #2
 8009030:	5cb2      	ldrb	r2, [r6, r2]
 8009032:	0212      	lsls	r2, r2, #8
 8009034:	189b      	adds	r3, r3, r2
 8009036:	1ce2      	adds	r2, r4, #3
 8009038:	5cb2      	ldrb	r2, [r6, r2]
 800903a:	4699      	mov	r9, r3
 800903c:	4491      	add	r9, r2
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800903e:	1d23      	adds	r3, r4, #4
 8009040:	5cf2      	ldrb	r2, [r6, r3]
 8009042:	0612      	lsls	r2, r2, #24
 8009044:	1d63      	adds	r3, r4, #5
 8009046:	5cf3      	ldrb	r3, [r6, r3]
 8009048:	041b      	lsls	r3, r3, #16
 800904a:	18d3      	adds	r3, r2, r3
 800904c:	1da2      	adds	r2, r4, #6
 800904e:	5cb2      	ldrb	r2, [r6, r2]
 8009050:	0212      	lsls	r2, r2, #8
 8009052:	189b      	adds	r3, r3, r2
 8009054:	1de2      	adds	r2, r4, #7
 8009056:	5cb2      	ldrb	r2, [r6, r2]
 8009058:	469c      	mov	ip, r3
 800905a:	4494      	add	ip, r2
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800905c:	0020      	movs	r0, r4
 800905e:	3009      	adds	r0, #9
 8009060:	0022      	movs	r2, r4
 8009062:	320b      	adds	r2, #11
 8009064:	0023      	movs	r3, r4
 8009066:	330a      	adds	r3, #10
 8009068:	0027      	movs	r7, r4
 800906a:	3708      	adds	r7, #8
 800906c:	340c      	adds	r4, #12
 800906e:	5d34      	ldrb	r4, [r6, r4]
 8009070:	5cf3      	ldrb	r3, [r6, r3]
 8009072:	9309      	str	r3, [sp, #36]	; 0x24
 8009074:	5cb2      	ldrb	r2, [r6, r2]
 8009076:	4914      	ldr	r1, [pc, #80]	; (80090c8 <PxMessagingTask+0xb7c>)
 8009078:	7809      	ldrb	r1, [r1, #0]
 800907a:	5c30      	ldrb	r0, [r6, r0]
 800907c:	1e63      	subs	r3, r4, #1
 800907e:	419c      	sbcs	r4, r3
 8009080:	9403      	str	r4, [sp, #12]
 8009082:	4664      	mov	r4, ip
 8009084:	9402      	str	r4, [sp, #8]
 8009086:	464c      	mov	r4, r9
 8009088:	9401      	str	r4, [sp, #4]
 800908a:	5df4      	ldrb	r4, [r6, r7]
 800908c:	9400      	str	r4, [sp, #0]
 800908e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009090:	f7ff f8ee 	bl	8008270 <StartScastDMAStream>
							break;
 8009094:	f7ff fab0 	bl	80085f8 <PxMessagingTask+0xac>
 8009098:	20000c90 	.word	0x20000c90
 800909c:	20001dac 	.word	0x20001dac
 80090a0:	20000b3c 	.word	0x20000b3c
 80090a4:	20000c4c 	.word	0x20000c4c
 80090a8:	20000c4a 	.word	0x20000c4a
 80090ac:	20000c3c 	.word	0x20000c3c
 80090b0:	20001ca8 	.word	0x20001ca8
 80090b4:	20007ff0 	.word	0x20007ff0
 80090b8:	deadbeef 	.word	0xdeadbeef
 80090bc:	2000113e 	.word	0x2000113e
 80090c0:	e000ed00 	.word	0xe000ed00
 80090c4:	05fa0004 	.word	0x05fa0004
 80090c8:	20000a98 	.word	0x20000a98
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 80090cc:	00ea      	lsls	r2, r5, #3
 80090ce:	1b52      	subs	r2, r2, r5
 80090d0:	00d1      	lsls	r1, r2, #3
 80090d2:	4aed      	ldr	r2, [pc, #948]	; (8009488 <PxMessagingTask+0xf3c>)
 80090d4:	1852      	adds	r2, r2, r1
 80090d6:	5d12      	ldrb	r2, [r2, r4]
 80090d8:	2a00      	cmp	r2, #0
 80090da:	d000      	beq.n	80090de <PxMessagingTask+0xb92>
 80090dc:	e083      	b.n	80091e6 <PxMessagingTask+0xc9a>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 80090de:	1ca1      	adds	r1, r4, #2
 80090e0:	2338      	movs	r3, #56	; 0x38
 80090e2:	436b      	muls	r3, r5
 80090e4:	4ae8      	ldr	r2, [pc, #928]	; (8009488 <PxMessagingTask+0xf3c>)
 80090e6:	18d2      	adds	r2, r2, r3
 80090e8:	5c53      	ldrb	r3, [r2, r1]
 80090ea:	061b      	lsls	r3, r3, #24
 80090ec:	1ce1      	adds	r1, r4, #3
 80090ee:	5c51      	ldrb	r1, [r2, r1]
 80090f0:	0409      	lsls	r1, r1, #16
 80090f2:	185b      	adds	r3, r3, r1
 80090f4:	1d21      	adds	r1, r4, #4
 80090f6:	5c51      	ldrb	r1, [r2, r1]
 80090f8:	0209      	lsls	r1, r1, #8
 80090fa:	185b      	adds	r3, r3, r1
 80090fc:	1d61      	adds	r1, r4, #5
 80090fe:	5c51      	ldrb	r1, [r2, r1]
 8009100:	185b      	adds	r3, r3, r1
								switch(cMessage[port - 1][1 + shift]) // requested format
 8009102:	3401      	adds	r4, #1
 8009104:	5d12      	ldrb	r2, [r2, r4]
 8009106:	3a01      	subs	r2, #1
 8009108:	b2d1      	uxtb	r1, r2
 800910a:	2907      	cmp	r1, #7
 800910c:	d901      	bls.n	8009112 <PxMessagingTask+0xbc6>
 800910e:	f7ff fa73 	bl	80085f8 <PxMessagingTask+0xac>
 8009112:	b2d2      	uxtb	r2, r2
 8009114:	0092      	lsls	r2, r2, #2
 8009116:	49dd      	ldr	r1, [pc, #884]	; (800948c <PxMessagingTask+0xf40>)
 8009118:	588a      	ldr	r2, [r1, r2]
 800911a:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 800911c:	781a      	ldrb	r2, [r3, #0]
 800911e:	4bdc      	ldr	r3, [pc, #880]	; (8009490 <PxMessagingTask+0xf44>)
 8009120:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 8009122:	2201      	movs	r2, #1
 8009124:	211f      	movs	r1, #31
 8009126:	9805      	ldr	r0, [sp, #20]
 8009128:	f7ff f87c 	bl	8008224 <SendMessageToModule>
										break;
 800912c:	f7ff fa64 	bl	80085f8 <PxMessagingTask+0xac>
										messageParams[0] =*(__IO int8_t* )temp32;
 8009130:	781a      	ldrb	r2, [r3, #0]
 8009132:	4bd7      	ldr	r3, [pc, #860]	; (8009490 <PxMessagingTask+0xf44>)
 8009134:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 8009136:	2201      	movs	r2, #1
 8009138:	211f      	movs	r1, #31
 800913a:	9805      	ldr	r0, [sp, #20]
 800913c:	f7ff f872 	bl	8008224 <SendMessageToModule>
										break;
 8009140:	f7ff fa5a 	bl	80085f8 <PxMessagingTask+0xac>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8009144:	8819      	ldrh	r1, [r3, #0]
 8009146:	4ad2      	ldr	r2, [pc, #840]	; (8009490 <PxMessagingTask+0xf44>)
 8009148:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	0a1b      	lsrs	r3, r3, #8
 800914e:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 8009150:	2202      	movs	r2, #2
 8009152:	211f      	movs	r1, #31
 8009154:	9805      	ldr	r0, [sp, #20]
 8009156:	f7ff f865 	bl	8008224 <SendMessageToModule>
										break;
 800915a:	f7ff fa4d 	bl	80085f8 <PxMessagingTask+0xac>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800915e:	8819      	ldrh	r1, [r3, #0]
 8009160:	4acb      	ldr	r2, [pc, #812]	; (8009490 <PxMessagingTask+0xf44>)
 8009162:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009164:	881b      	ldrh	r3, [r3, #0]
 8009166:	b21b      	sxth	r3, r3
 8009168:	121b      	asrs	r3, r3, #8
 800916a:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800916c:	2202      	movs	r2, #2
 800916e:	211f      	movs	r1, #31
 8009170:	9805      	ldr	r0, [sp, #20]
 8009172:	f7ff f857 	bl	8008224 <SendMessageToModule>
										break;
 8009176:	f7ff fa3f 	bl	80085f8 <PxMessagingTask+0xac>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800917a:	6819      	ldr	r1, [r3, #0]
 800917c:	4ac4      	ldr	r2, [pc, #784]	; (8009490 <PxMessagingTask+0xf44>)
 800917e:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009180:	6819      	ldr	r1, [r3, #0]
 8009182:	0a09      	lsrs	r1, r1, #8
 8009184:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009186:	6819      	ldr	r1, [r3, #0]
 8009188:	0c09      	lsrs	r1, r1, #16
 800918a:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	0e1b      	lsrs	r3, r3, #24
 8009190:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 8009192:	2204      	movs	r2, #4
 8009194:	211f      	movs	r1, #31
 8009196:	9805      	ldr	r0, [sp, #20]
 8009198:	f7ff f844 	bl	8008224 <SendMessageToModule>
										break;
 800919c:	f7ff fa2c 	bl	80085f8 <PxMessagingTask+0xac>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 80091a0:	6819      	ldr	r1, [r3, #0]
 80091a2:	4abb      	ldr	r2, [pc, #748]	; (8009490 <PxMessagingTask+0xf44>)
 80091a4:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 80091a6:	6819      	ldr	r1, [r3, #0]
 80091a8:	1209      	asrs	r1, r1, #8
 80091aa:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 80091ac:	6819      	ldr	r1, [r3, #0]
 80091ae:	1409      	asrs	r1, r1, #16
 80091b0:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	0e1b      	lsrs	r3, r3, #24
 80091b6:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 80091b8:	2204      	movs	r2, #4
 80091ba:	211f      	movs	r1, #31
 80091bc:	9805      	ldr	r0, [sp, #20]
 80091be:	f7ff f831 	bl	8008224 <SendMessageToModule>
										break;
 80091c2:	f7ff fa19 	bl	80085f8 <PxMessagingTask+0xac>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 80091c6:	7819      	ldrb	r1, [r3, #0]
 80091c8:	4ab1      	ldr	r2, [pc, #708]	; (8009490 <PxMessagingTask+0xf44>)
 80091ca:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 80091cc:	7859      	ldrb	r1, [r3, #1]
 80091ce:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 80091d0:	7899      	ldrb	r1, [r3, #2]
 80091d2:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 80091d4:	78db      	ldrb	r3, [r3, #3]
 80091d6:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 80091d8:	2208      	movs	r2, #8
 80091da:	211f      	movs	r1, #31
 80091dc:	9805      	ldr	r0, [sp, #20]
 80091de:	f7ff f821 	bl	8008224 <SendMessageToModule>
										break; // You cannot bitwise floats
 80091e2:	f7ff fa09 	bl	80085f8 <PxMessagingTask+0xac>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 80091e6:	2a02      	cmp	r2, #2
 80091e8:	d000      	beq.n	80091ec <PxMessagingTask+0xca0>
 80091ea:	e08e      	b.n	800930a <PxMessagingTask+0xdbe>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 80091ec:	3b01      	subs	r3, #1
 80091ee:	48a6      	ldr	r0, [pc, #664]	; (8009488 <PxMessagingTask+0xf3c>)
 80091f0:	3236      	adds	r2, #54	; 0x36
 80091f2:	436a      	muls	r2, r5
 80091f4:	1881      	adds	r1, r0, r2
 80091f6:	2600      	movs	r6, #0
 80091f8:	54ce      	strb	r6, [r1, r3]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 80091fa:	3401      	adds	r4, #1
 80091fc:	1912      	adds	r2, r2, r4
 80091fe:	1810      	adds	r0, r2, r0
 8009200:	f7fa fa7e 	bl	8003700 <IsModuleParameter>
 8009204:	4682      	mov	sl, r0
								if(temp == 0){ // Parameter does not exist
 8009206:	42b0      	cmp	r0, r6
 8009208:	d106      	bne.n	8009218 <PxMessagingTask+0xccc>
									SendMessageToModule(src,
 800920a:	2201      	movs	r2, #1
 800920c:	211f      	movs	r1, #31
 800920e:	9805      	ldr	r0, [sp, #20]
 8009210:	f7ff f808 	bl	8008224 <SendMessageToModule>
 8009214:	f7ff f9f0 	bl	80085f8 <PxMessagingTask+0xac>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009218:	3801      	subs	r0, #1
 800921a:	4a9e      	ldr	r2, [pc, #632]	; (8009494 <PxMessagingTask+0xf48>)
 800921c:	210c      	movs	r1, #12
 800921e:	4341      	muls	r1, r0
 8009220:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009222:	1852      	adds	r2, r2, r1
 8009224:	7912      	ldrb	r2, [r2, #4]
 8009226:	499a      	ldr	r1, [pc, #616]	; (8009490 <PxMessagingTask+0xf44>)
 8009228:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800922a:	3a01      	subs	r2, #1
 800922c:	b2d1      	uxtb	r1, r2
 800922e:	2907      	cmp	r1, #7
 8009230:	d901      	bls.n	8009236 <PxMessagingTask+0xcea>
 8009232:	f7ff f9e1 	bl	80085f8 <PxMessagingTask+0xac>
 8009236:	b2d2      	uxtb	r2, r2
 8009238:	0092      	lsls	r2, r2, #2
 800923a:	4997      	ldr	r1, [pc, #604]	; (8009498 <PxMessagingTask+0xf4c>)
 800923c:	588a      	ldr	r2, [r1, r2]
 800923e:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 8009240:	781a      	ldrb	r2, [r3, #0]
 8009242:	4b93      	ldr	r3, [pc, #588]	; (8009490 <PxMessagingTask+0xf44>)
 8009244:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 8009246:	2202      	movs	r2, #2
 8009248:	211f      	movs	r1, #31
 800924a:	9805      	ldr	r0, [sp, #20]
 800924c:	f7fe ffea 	bl	8008224 <SendMessageToModule>
											break;
 8009250:	f7ff f9d2 	bl	80085f8 <PxMessagingTask+0xac>
											messageParams[1] =*(__IO int8_t* )temp32;
 8009254:	781a      	ldrb	r2, [r3, #0]
 8009256:	4b8e      	ldr	r3, [pc, #568]	; (8009490 <PxMessagingTask+0xf44>)
 8009258:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800925a:	2202      	movs	r2, #2
 800925c:	211f      	movs	r1, #31
 800925e:	9805      	ldr	r0, [sp, #20]
 8009260:	f7fe ffe0 	bl	8008224 <SendMessageToModule>
											break;
 8009264:	f7ff f9c8 	bl	80085f8 <PxMessagingTask+0xac>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8009268:	8819      	ldrh	r1, [r3, #0]
 800926a:	4a89      	ldr	r2, [pc, #548]	; (8009490 <PxMessagingTask+0xf44>)
 800926c:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	0a1b      	lsrs	r3, r3, #8
 8009272:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8009274:	2203      	movs	r2, #3
 8009276:	211f      	movs	r1, #31
 8009278:	9805      	ldr	r0, [sp, #20]
 800927a:	f7fe ffd3 	bl	8008224 <SendMessageToModule>
											break;
 800927e:	f7ff f9bb 	bl	80085f8 <PxMessagingTask+0xac>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8009282:	8819      	ldrh	r1, [r3, #0]
 8009284:	4a82      	ldr	r2, [pc, #520]	; (8009490 <PxMessagingTask+0xf44>)
 8009286:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009288:	881b      	ldrh	r3, [r3, #0]
 800928a:	b21b      	sxth	r3, r3
 800928c:	121b      	asrs	r3, r3, #8
 800928e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8009290:	2203      	movs	r2, #3
 8009292:	211f      	movs	r1, #31
 8009294:	9805      	ldr	r0, [sp, #20]
 8009296:	f7fe ffc5 	bl	8008224 <SendMessageToModule>
											break;
 800929a:	f7ff f9ad 	bl	80085f8 <PxMessagingTask+0xac>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800929e:	6819      	ldr	r1, [r3, #0]
 80092a0:	4a7b      	ldr	r2, [pc, #492]	; (8009490 <PxMessagingTask+0xf44>)
 80092a2:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 80092a4:	6819      	ldr	r1, [r3, #0]
 80092a6:	0a09      	lsrs	r1, r1, #8
 80092a8:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 80092aa:	6819      	ldr	r1, [r3, #0]
 80092ac:	0c09      	lsrs	r1, r1, #16
 80092ae:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	0e1b      	lsrs	r3, r3, #24
 80092b4:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 80092b6:	2205      	movs	r2, #5
 80092b8:	211f      	movs	r1, #31
 80092ba:	9805      	ldr	r0, [sp, #20]
 80092bc:	f7fe ffb2 	bl	8008224 <SendMessageToModule>
											break;
 80092c0:	f7ff f99a 	bl	80085f8 <PxMessagingTask+0xac>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 80092c4:	6819      	ldr	r1, [r3, #0]
 80092c6:	4a72      	ldr	r2, [pc, #456]	; (8009490 <PxMessagingTask+0xf44>)
 80092c8:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 80092ca:	6819      	ldr	r1, [r3, #0]
 80092cc:	1209      	asrs	r1, r1, #8
 80092ce:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 80092d0:	6819      	ldr	r1, [r3, #0]
 80092d2:	1409      	asrs	r1, r1, #16
 80092d4:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	0e1b      	lsrs	r3, r3, #24
 80092da:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 80092dc:	2205      	movs	r2, #5
 80092de:	211f      	movs	r1, #31
 80092e0:	9805      	ldr	r0, [sp, #20]
 80092e2:	f7fe ff9f 	bl	8008224 <SendMessageToModule>
											break;
 80092e6:	f7ff f987 	bl	80085f8 <PxMessagingTask+0xac>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 80092ea:	7819      	ldrb	r1, [r3, #0]
 80092ec:	4a68      	ldr	r2, [pc, #416]	; (8009490 <PxMessagingTask+0xf44>)
 80092ee:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 80092f0:	7859      	ldrb	r1, [r3, #1]
 80092f2:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 80092f4:	7899      	ldrb	r1, [r3, #2]
 80092f6:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 80092f8:	78db      	ldrb	r3, [r3, #3]
 80092fa:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 80092fc:	2209      	movs	r2, #9
 80092fe:	211f      	movs	r1, #31
 8009300:	9805      	ldr	r0, [sp, #20]
 8009302:	f7fe ff8f 	bl	8008224 <SendMessageToModule>
											break;
 8009306:	f7ff f977 	bl	80085f8 <PxMessagingTask+0xac>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800930a:	2a02      	cmp	r2, #2
 800930c:	d801      	bhi.n	8009312 <PxMessagingTask+0xdc6>
 800930e:	f7ff f973 	bl	80085f8 <PxMessagingTask+0xac>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 8009312:	3a04      	subs	r2, #4
 8009314:	0092      	lsls	r2, r2, #2
 8009316:	4b61      	ldr	r3, [pc, #388]	; (800949c <PxMessagingTask+0xf50>)
 8009318:	58d1      	ldr	r1, [r2, r3]
 800931a:	220f      	movs	r2, #15
 800931c:	400a      	ands	r2, r1
 800931e:	4b5c      	ldr	r3, [pc, #368]	; (8009490 <PxMessagingTask+0xf44>)
 8009320:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 8009322:	d106      	bne.n	8009332 <PxMessagingTask+0xde6>
									SendMessageToModule(src,
 8009324:	3201      	adds	r2, #1
 8009326:	211f      	movs	r1, #31
 8009328:	9805      	ldr	r0, [sp, #20]
 800932a:	f7fe ff7b 	bl	8008224 <SendMessageToModule>
 800932e:	f7ff f963 	bl	80085f8 <PxMessagingTask+0xac>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 8009332:	0c09      	lsrs	r1, r1, #16
 8009334:	2380      	movs	r3, #128	; 0x80
 8009336:	059b      	lsls	r3, r3, #22
 8009338:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 800933a:	3a01      	subs	r2, #1
 800933c:	b2d0      	uxtb	r0, r2
 800933e:	2807      	cmp	r0, #7
 8009340:	d901      	bls.n	8009346 <PxMessagingTask+0xdfa>
 8009342:	f7ff f959 	bl	80085f8 <PxMessagingTask+0xac>
 8009346:	b2d2      	uxtb	r2, r2
 8009348:	0092      	lsls	r2, r2, #2
 800934a:	4855      	ldr	r0, [pc, #340]	; (80094a0 <PxMessagingTask+0xf54>)
 800934c:	5882      	ldr	r2, [r0, r2]
 800934e:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 8009350:	781a      	ldrb	r2, [r3, #0]
 8009352:	4b4f      	ldr	r3, [pc, #316]	; (8009490 <PxMessagingTask+0xf44>)
 8009354:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 8009356:	2202      	movs	r2, #2
 8009358:	211f      	movs	r1, #31
 800935a:	9805      	ldr	r0, [sp, #20]
 800935c:	f7fe ff62 	bl	8008224 <SendMessageToModule>
											break;
 8009360:	f7ff f94a 	bl	80085f8 <PxMessagingTask+0xac>
											messageParams[1] =*(__IO int8_t* )temp32;
 8009364:	781a      	ldrb	r2, [r3, #0]
 8009366:	4b4a      	ldr	r3, [pc, #296]	; (8009490 <PxMessagingTask+0xf44>)
 8009368:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800936a:	2202      	movs	r2, #2
 800936c:	211f      	movs	r1, #31
 800936e:	9805      	ldr	r0, [sp, #20]
 8009370:	f7fe ff58 	bl	8008224 <SendMessageToModule>
											break;
 8009374:	f7ff f940 	bl	80085f8 <PxMessagingTask+0xac>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8009378:	8819      	ldrh	r1, [r3, #0]
 800937a:	4a45      	ldr	r2, [pc, #276]	; (8009490 <PxMessagingTask+0xf44>)
 800937c:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	0a1b      	lsrs	r3, r3, #8
 8009382:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8009384:	2203      	movs	r2, #3
 8009386:	211f      	movs	r1, #31
 8009388:	9805      	ldr	r0, [sp, #20]
 800938a:	f7fe ff4b 	bl	8008224 <SendMessageToModule>
											break;
 800938e:	f7ff f933 	bl	80085f8 <PxMessagingTask+0xac>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8009392:	8819      	ldrh	r1, [r3, #0]
 8009394:	4a3e      	ldr	r2, [pc, #248]	; (8009490 <PxMessagingTask+0xf44>)
 8009396:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	b21b      	sxth	r3, r3
 800939c:	121b      	asrs	r3, r3, #8
 800939e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 80093a0:	2203      	movs	r2, #3
 80093a2:	211f      	movs	r1, #31
 80093a4:	9805      	ldr	r0, [sp, #20]
 80093a6:	f7fe ff3d 	bl	8008224 <SendMessageToModule>
											break;
 80093aa:	f7ff f925 	bl	80085f8 <PxMessagingTask+0xac>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 80093ae:	6819      	ldr	r1, [r3, #0]
 80093b0:	4a37      	ldr	r2, [pc, #220]	; (8009490 <PxMessagingTask+0xf44>)
 80093b2:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 80093b4:	6819      	ldr	r1, [r3, #0]
 80093b6:	0a09      	lsrs	r1, r1, #8
 80093b8:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 80093ba:	6819      	ldr	r1, [r3, #0]
 80093bc:	0c09      	lsrs	r1, r1, #16
 80093be:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	0e1b      	lsrs	r3, r3, #24
 80093c4:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 80093c6:	2205      	movs	r2, #5
 80093c8:	211f      	movs	r1, #31
 80093ca:	9805      	ldr	r0, [sp, #20]
 80093cc:	f7fe ff2a 	bl	8008224 <SendMessageToModule>
											break;
 80093d0:	f7ff f912 	bl	80085f8 <PxMessagingTask+0xac>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 80093d4:	6819      	ldr	r1, [r3, #0]
 80093d6:	4a2e      	ldr	r2, [pc, #184]	; (8009490 <PxMessagingTask+0xf44>)
 80093d8:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 80093da:	6819      	ldr	r1, [r3, #0]
 80093dc:	1209      	asrs	r1, r1, #8
 80093de:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 80093e0:	6819      	ldr	r1, [r3, #0]
 80093e2:	1409      	asrs	r1, r1, #16
 80093e4:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	0e1b      	lsrs	r3, r3, #24
 80093ea:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 80093ec:	2205      	movs	r2, #5
 80093ee:	211f      	movs	r1, #31
 80093f0:	9805      	ldr	r0, [sp, #20]
 80093f2:	f7fe ff17 	bl	8008224 <SendMessageToModule>
											break;
 80093f6:	f7ff f8ff 	bl	80085f8 <PxMessagingTask+0xac>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 80093fa:	781a      	ldrb	r2, [r3, #0]
 80093fc:	4b24      	ldr	r3, [pc, #144]	; (8009490 <PxMessagingTask+0xf44>)
 80093fe:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009400:	4a28      	ldr	r2, [pc, #160]	; (80094a4 <PxMessagingTask+0xf58>)
 8009402:	188a      	adds	r2, r1, r2
 8009404:	7812      	ldrb	r2, [r2, #0]
 8009406:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8009408:	4a27      	ldr	r2, [pc, #156]	; (80094a8 <PxMessagingTask+0xf5c>)
 800940a:	188a      	adds	r2, r1, r2
 800940c:	7812      	ldrb	r2, [r2, #0]
 800940e:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009410:	4a26      	ldr	r2, [pc, #152]	; (80094ac <PxMessagingTask+0xf60>)
 8009412:	4694      	mov	ip, r2
 8009414:	4461      	add	r1, ip
 8009416:	780a      	ldrb	r2, [r1, #0]
 8009418:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 800941a:	2209      	movs	r2, #9
 800941c:	211f      	movs	r1, #31
 800941e:	9805      	ldr	r0, [sp, #20]
 8009420:	f7fe ff00 	bl	8008224 <SendMessageToModule>
											break;
 8009424:	f7ff f8e8 	bl	80085f8 <PxMessagingTask+0xac>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009428:	4b21      	ldr	r3, [pc, #132]	; (80094b0 <PxMessagingTask+0xf64>)
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	2002      	movs	r0, #2
 8009430:	4240      	negs	r0, r0
 8009432:	17c1      	asrs	r1, r0, #31
 8009434:	1880      	adds	r0, r0, r2
 8009436:	4159      	adcs	r1, r3
 8009438:	2900      	cmp	r1, #0
 800943a:	d014      	beq.n	8009466 <PxMessagingTask+0xf1a>
							else if(remoteBuffer == REMOTE_MEMORY_ADD) // We requested a memory location
 800943c:	0011      	movs	r1, r2
 800943e:	4319      	orrs	r1, r3
 8009440:	d141      	bne.n	80094c6 <PxMessagingTask+0xf7a>
								switch(remoteBuffer) // Requested format
 8009442:	2601      	movs	r6, #1
 8009444:	4276      	negs	r6, r6
 8009446:	17f7      	asrs	r7, r6, #31
 8009448:	18b6      	adds	r6, r6, r2
 800944a:	415f      	adcs	r7, r3
 800944c:	2207      	movs	r2, #7
 800944e:	2300      	movs	r3, #0
 8009450:	0030      	movs	r0, r6
 8009452:	0039      	movs	r1, r7
 8009454:	f7f7 f86a 	bl	800052c <__aeabi_ulcmp>
 8009458:	3001      	adds	r0, #1
 800945a:	2801      	cmp	r0, #1
 800945c:	d833      	bhi.n	80094c6 <PxMessagingTask+0xf7a>
 800945e:	00b6      	lsls	r6, r6, #2
 8009460:	4b14      	ldr	r3, [pc, #80]	; (80094b4 <PxMessagingTask+0xf68>)
 8009462:	599b      	ldr	r3, [r3, r6]
 8009464:	469f      	mov	pc, r3
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009466:	2900      	cmp	r1, #0
 8009468:	d101      	bne.n	800946e <PxMessagingTask+0xf22>
 800946a:	2801      	cmp	r0, #1
 800946c:	d8e6      	bhi.n	800943c <PxMessagingTask+0xef0>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800946e:	2238      	movs	r2, #56	; 0x38
 8009470:	436a      	muls	r2, r5
 8009472:	4b05      	ldr	r3, [pc, #20]	; (8009488 <PxMessagingTask+0xf3c>)
 8009474:	189b      	adds	r3, r3, r2
 8009476:	5d1b      	ldrb	r3, [r3, r4]
 8009478:	4a0f      	ldr	r2, [pc, #60]	; (80094b8 <PxMessagingTask+0xf6c>)
 800947a:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800947c:	2b08      	cmp	r3, #8
 800947e:	d822      	bhi.n	80094c6 <PxMessagingTask+0xf7a>
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4a0e      	ldr	r2, [pc, #56]	; (80094bc <PxMessagingTask+0xf70>)
 8009484:	58d3      	ldr	r3, [r2, r3]
 8009486:	469f      	mov	pc, r3
 8009488:	20000c90 	.word	0x20000c90
 800948c:	08017a84 	.word	0x08017a84
 8009490:	20000b3c 	.word	0x20000b3c
 8009494:	20000094 	.word	0x20000094
 8009498:	08017aa4 	.word	0x08017aa4
 800949c:	200067d0 	.word	0x200067d0
 80094a0:	08017ac4 	.word	0x08017ac4
 80094a4:	20000001 	.word	0x20000001
 80094a8:	20000002 	.word	0x20000002
 80094ac:	20000003 	.word	0x20000003
 80094b0:	20000c40 	.word	0x20000c40
 80094b4:	08017ae4 	.word	0x08017ae4
 80094b8:	20000032 	.word	0x20000032
 80094bc:	08017b04 	.word	0x08017b04
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 80094c0:	4bd2      	ldr	r3, [pc, #840]	; (800980c <PxMessagingTask+0x12c0>)
 80094c2:	2210      	movs	r2, #16
 80094c4:	701a      	strb	r2, [r3, #0]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 80094c6:	4bd1      	ldr	r3, [pc, #836]	; (800980c <PxMessagingTask+0x12c0>)
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	2b10      	cmp	r3, #16
 80094cc:	d101      	bne.n	80094d2 <PxMessagingTask+0xf86>
 80094ce:	f7ff f893 	bl	80085f8 <PxMessagingTask+0xac>
								responseStatus =BOS_OK;
 80094d2:	4bce      	ldr	r3, [pc, #824]	; (800980c <PxMessagingTask+0x12c0>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	701a      	strb	r2, [r3, #0]
 80094d8:	f7ff f88e 	bl	80085f8 <PxMessagingTask+0xac>
										remoteBuffer =cMessage[port - 1][1 + shift];
 80094dc:	3401      	adds	r4, #1
 80094de:	2238      	movs	r2, #56	; 0x38
 80094e0:	436a      	muls	r2, r5
 80094e2:	4bcb      	ldr	r3, [pc, #812]	; (8009810 <PxMessagingTask+0x12c4>)
 80094e4:	189b      	adds	r3, r3, r2
 80094e6:	5d1a      	ldrb	r2, [r3, r4]
 80094e8:	4bca      	ldr	r3, [pc, #808]	; (8009814 <PxMessagingTask+0x12c8>)
 80094ea:	601a      	str	r2, [r3, #0]
 80094ec:	2200      	movs	r2, #0
 80094ee:	605a      	str	r2, [r3, #4]
										break;
 80094f0:	e7e9      	b.n	80094c6 <PxMessagingTask+0xf7a>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 80094f2:	3401      	adds	r4, #1
 80094f4:	2238      	movs	r2, #56	; 0x38
 80094f6:	436a      	muls	r2, r5
 80094f8:	4bc5      	ldr	r3, [pc, #788]	; (8009810 <PxMessagingTask+0x12c4>)
 80094fa:	189b      	adds	r3, r3, r2
 80094fc:	571a      	ldrsb	r2, [r3, r4]
 80094fe:	17d1      	asrs	r1, r2, #31
 8009500:	4bc4      	ldr	r3, [pc, #784]	; (8009814 <PxMessagingTask+0x12c8>)
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	6059      	str	r1, [r3, #4]
										break;
 8009506:	e7de      	b.n	80094c6 <PxMessagingTask+0xf7a>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 8009508:	1c61      	adds	r1, r4, #1
 800950a:	2338      	movs	r3, #56	; 0x38
 800950c:	436b      	muls	r3, r5
 800950e:	4ac0      	ldr	r2, [pc, #768]	; (8009810 <PxMessagingTask+0x12c4>)
 8009510:	18d2      	adds	r2, r2, r3
 8009512:	5c53      	ldrb	r3, [r2, r1]
 8009514:	3402      	adds	r4, #2
 8009516:	5d12      	ldrb	r2, [r2, r4]
 8009518:	0212      	lsls	r2, r2, #8
 800951a:	189b      	adds	r3, r3, r2
 800951c:	17d9      	asrs	r1, r3, #31
 800951e:	4abd      	ldr	r2, [pc, #756]	; (8009814 <PxMessagingTask+0x12c8>)
 8009520:	6013      	str	r3, [r2, #0]
 8009522:	6051      	str	r1, [r2, #4]
										break;
 8009524:	e7cf      	b.n	80094c6 <PxMessagingTask+0xf7a>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 8009526:	1c61      	adds	r1, r4, #1
 8009528:	2338      	movs	r3, #56	; 0x38
 800952a:	436b      	muls	r3, r5
 800952c:	4ab8      	ldr	r2, [pc, #736]	; (8009810 <PxMessagingTask+0x12c4>)
 800952e:	18d2      	adds	r2, r2, r3
 8009530:	5c53      	ldrb	r3, [r2, r1]
 8009532:	3402      	adds	r4, #2
 8009534:	5d12      	ldrb	r2, [r2, r4]
 8009536:	0212      	lsls	r2, r2, #8
 8009538:	189b      	adds	r3, r3, r2
 800953a:	17d9      	asrs	r1, r3, #31
 800953c:	4ab5      	ldr	r2, [pc, #724]	; (8009814 <PxMessagingTask+0x12c8>)
 800953e:	6013      	str	r3, [r2, #0]
 8009540:	6051      	str	r1, [r2, #4]
										break;
 8009542:	e7c0      	b.n	80094c6 <PxMessagingTask+0xf7a>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009544:	1c61      	adds	r1, r4, #1
 8009546:	2338      	movs	r3, #56	; 0x38
 8009548:	436b      	muls	r3, r5
 800954a:	4ab1      	ldr	r2, [pc, #708]	; (8009810 <PxMessagingTask+0x12c4>)
 800954c:	18d2      	adds	r2, r2, r3
 800954e:	5c53      	ldrb	r3, [r2, r1]
 8009550:	1ca1      	adds	r1, r4, #2
 8009552:	5c51      	ldrb	r1, [r2, r1]
 8009554:	0209      	lsls	r1, r1, #8
 8009556:	185b      	adds	r3, r3, r1
 8009558:	1ce1      	adds	r1, r4, #3
 800955a:	5c51      	ldrb	r1, [r2, r1]
 800955c:	0409      	lsls	r1, r1, #16
 800955e:	185b      	adds	r3, r3, r1
 8009560:	3404      	adds	r4, #4
 8009562:	5d12      	ldrb	r2, [r2, r4]
 8009564:	0612      	lsls	r2, r2, #24
 8009566:	189b      	adds	r3, r3, r2
 8009568:	4aaa      	ldr	r2, [pc, #680]	; (8009814 <PxMessagingTask+0x12c8>)
 800956a:	6013      	str	r3, [r2, #0]
 800956c:	2300      	movs	r3, #0
 800956e:	6053      	str	r3, [r2, #4]
										break;
 8009570:	e7a9      	b.n	80094c6 <PxMessagingTask+0xf7a>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 8009572:	1c61      	adds	r1, r4, #1
 8009574:	2338      	movs	r3, #56	; 0x38
 8009576:	436b      	muls	r3, r5
 8009578:	4aa5      	ldr	r2, [pc, #660]	; (8009810 <PxMessagingTask+0x12c4>)
 800957a:	18d2      	adds	r2, r2, r3
 800957c:	5c53      	ldrb	r3, [r2, r1]
 800957e:	1ca1      	adds	r1, r4, #2
 8009580:	5c51      	ldrb	r1, [r2, r1]
 8009582:	0209      	lsls	r1, r1, #8
 8009584:	185b      	adds	r3, r3, r1
 8009586:	1ce1      	adds	r1, r4, #3
 8009588:	5c51      	ldrb	r1, [r2, r1]
 800958a:	0409      	lsls	r1, r1, #16
 800958c:	185b      	adds	r3, r3, r1
 800958e:	3404      	adds	r4, #4
 8009590:	5d12      	ldrb	r2, [r2, r4]
 8009592:	0612      	lsls	r2, r2, #24
 8009594:	189b      	adds	r3, r3, r2
 8009596:	17d9      	asrs	r1, r3, #31
 8009598:	4a9e      	ldr	r2, [pc, #632]	; (8009814 <PxMessagingTask+0x12c8>)
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	6051      	str	r1, [r2, #4]
										break;
 800959e:	e792      	b.n	80094c6 <PxMessagingTask+0xf7a>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80095a0:	1c61      	adds	r1, r4, #1
 80095a2:	2338      	movs	r3, #56	; 0x38
 80095a4:	436b      	muls	r3, r5
 80095a6:	4a9a      	ldr	r2, [pc, #616]	; (8009810 <PxMessagingTask+0x12c4>)
 80095a8:	18d2      	adds	r2, r2, r3
 80095aa:	5c53      	ldrb	r3, [r2, r1]
 80095ac:	1ca1      	adds	r1, r4, #2
 80095ae:	5c51      	ldrb	r1, [r2, r1]
 80095b0:	0209      	lsls	r1, r1, #8
 80095b2:	185b      	adds	r3, r3, r1
 80095b4:	1ce1      	adds	r1, r4, #3
 80095b6:	5c51      	ldrb	r1, [r2, r1]
 80095b8:	0409      	lsls	r1, r1, #16
 80095ba:	185b      	adds	r3, r3, r1
 80095bc:	3404      	adds	r4, #4
 80095be:	5d12      	ldrb	r2, [r2, r4]
 80095c0:	0612      	lsls	r2, r2, #24
 80095c2:	189b      	adds	r3, r3, r2
 80095c4:	4a93      	ldr	r2, [pc, #588]	; (8009814 <PxMessagingTask+0x12c8>)
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	2300      	movs	r3, #0
 80095ca:	6053      	str	r3, [r2, #4]
										break;
 80095cc:	e77b      	b.n	80094c6 <PxMessagingTask+0xf7a>
										remoteBuffer =cMessage[port - 1][shift];
 80095ce:	2238      	movs	r2, #56	; 0x38
 80095d0:	436a      	muls	r2, r5
 80095d2:	4b8f      	ldr	r3, [pc, #572]	; (8009810 <PxMessagingTask+0x12c4>)
 80095d4:	189b      	adds	r3, r3, r2
 80095d6:	5d1a      	ldrb	r2, [r3, r4]
 80095d8:	4b8e      	ldr	r3, [pc, #568]	; (8009814 <PxMessagingTask+0x12c8>)
 80095da:	601a      	str	r2, [r3, #0]
 80095dc:	2200      	movs	r2, #0
 80095de:	605a      	str	r2, [r3, #4]
										break;
 80095e0:	e771      	b.n	80094c6 <PxMessagingTask+0xf7a>
										remoteBuffer =(int8_t )cMessage[port - 1][shift];
 80095e2:	2238      	movs	r2, #56	; 0x38
 80095e4:	436a      	muls	r2, r5
 80095e6:	4b8a      	ldr	r3, [pc, #552]	; (8009810 <PxMessagingTask+0x12c4>)
 80095e8:	189b      	adds	r3, r3, r2
 80095ea:	571a      	ldrsb	r2, [r3, r4]
 80095ec:	17d1      	asrs	r1, r2, #31
 80095ee:	4b89      	ldr	r3, [pc, #548]	; (8009814 <PxMessagingTask+0x12c8>)
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	6059      	str	r1, [r3, #4]
										break;
 80095f4:	e767      	b.n	80094c6 <PxMessagingTask+0xf7a>
										remoteBuffer =((uint16_t )cMessage[port - 1][shift] << 0) + ((uint16_t )cMessage[port - 1][1 + shift] << 8);
 80095f6:	2338      	movs	r3, #56	; 0x38
 80095f8:	436b      	muls	r3, r5
 80095fa:	4a85      	ldr	r2, [pc, #532]	; (8009810 <PxMessagingTask+0x12c4>)
 80095fc:	18d2      	adds	r2, r2, r3
 80095fe:	5d13      	ldrb	r3, [r2, r4]
 8009600:	3401      	adds	r4, #1
 8009602:	5d12      	ldrb	r2, [r2, r4]
 8009604:	0212      	lsls	r2, r2, #8
 8009606:	189b      	adds	r3, r3, r2
 8009608:	17d9      	asrs	r1, r3, #31
 800960a:	4a82      	ldr	r2, [pc, #520]	; (8009814 <PxMessagingTask+0x12c8>)
 800960c:	6013      	str	r3, [r2, #0]
 800960e:	6051      	str	r1, [r2, #4]
										break;
 8009610:	e759      	b.n	80094c6 <PxMessagingTask+0xf7a>
										remoteBuffer =((int16_t )cMessage[port - 1][shift] << 0) + ((int16_t )cMessage[port - 1][1 + shift] << 8);
 8009612:	2338      	movs	r3, #56	; 0x38
 8009614:	436b      	muls	r3, r5
 8009616:	4a7e      	ldr	r2, [pc, #504]	; (8009810 <PxMessagingTask+0x12c4>)
 8009618:	18d2      	adds	r2, r2, r3
 800961a:	5d13      	ldrb	r3, [r2, r4]
 800961c:	3401      	adds	r4, #1
 800961e:	5d12      	ldrb	r2, [r2, r4]
 8009620:	0212      	lsls	r2, r2, #8
 8009622:	189b      	adds	r3, r3, r2
 8009624:	17d9      	asrs	r1, r3, #31
 8009626:	4a7b      	ldr	r2, [pc, #492]	; (8009814 <PxMessagingTask+0x12c8>)
 8009628:	6013      	str	r3, [r2, #0]
 800962a:	6051      	str	r1, [r2, #4]
										break;
 800962c:	e74b      	b.n	80094c6 <PxMessagingTask+0xf7a>
										remoteBuffer =((uint32_t )cMessage[port - 1][shift] << 0) + ((uint32_t )cMessage[port - 1][1 + shift] << 8) + ((uint32_t )cMessage[port - 1][2 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 24);
 800962e:	2338      	movs	r3, #56	; 0x38
 8009630:	436b      	muls	r3, r5
 8009632:	4a77      	ldr	r2, [pc, #476]	; (8009810 <PxMessagingTask+0x12c4>)
 8009634:	18d2      	adds	r2, r2, r3
 8009636:	5d13      	ldrb	r3, [r2, r4]
 8009638:	1c61      	adds	r1, r4, #1
 800963a:	5c51      	ldrb	r1, [r2, r1]
 800963c:	0209      	lsls	r1, r1, #8
 800963e:	185b      	adds	r3, r3, r1
 8009640:	1ca1      	adds	r1, r4, #2
 8009642:	5c51      	ldrb	r1, [r2, r1]
 8009644:	0409      	lsls	r1, r1, #16
 8009646:	185b      	adds	r3, r3, r1
 8009648:	3403      	adds	r4, #3
 800964a:	5d12      	ldrb	r2, [r2, r4]
 800964c:	0612      	lsls	r2, r2, #24
 800964e:	189b      	adds	r3, r3, r2
 8009650:	4a70      	ldr	r2, [pc, #448]	; (8009814 <PxMessagingTask+0x12c8>)
 8009652:	6013      	str	r3, [r2, #0]
 8009654:	2300      	movs	r3, #0
 8009656:	6053      	str	r3, [r2, #4]
										break;
 8009658:	e735      	b.n	80094c6 <PxMessagingTask+0xf7a>
										remoteBuffer =((int32_t )cMessage[port - 1][shift] << 0) + ((int32_t )cMessage[port - 1][1 + shift] << 8) + ((int32_t )cMessage[port - 1][2 + shift] << 16) + ((int32_t )cMessage[port - 1][3 + shift] << 24);
 800965a:	2338      	movs	r3, #56	; 0x38
 800965c:	436b      	muls	r3, r5
 800965e:	4a6c      	ldr	r2, [pc, #432]	; (8009810 <PxMessagingTask+0x12c4>)
 8009660:	18d2      	adds	r2, r2, r3
 8009662:	5d13      	ldrb	r3, [r2, r4]
 8009664:	1c61      	adds	r1, r4, #1
 8009666:	5c51      	ldrb	r1, [r2, r1]
 8009668:	0209      	lsls	r1, r1, #8
 800966a:	185b      	adds	r3, r3, r1
 800966c:	1ca1      	adds	r1, r4, #2
 800966e:	5c51      	ldrb	r1, [r2, r1]
 8009670:	0409      	lsls	r1, r1, #16
 8009672:	185b      	adds	r3, r3, r1
 8009674:	3403      	adds	r4, #3
 8009676:	5d12      	ldrb	r2, [r2, r4]
 8009678:	0612      	lsls	r2, r2, #24
 800967a:	189b      	adds	r3, r3, r2
 800967c:	17d9      	asrs	r1, r3, #31
 800967e:	4a65      	ldr	r2, [pc, #404]	; (8009814 <PxMessagingTask+0x12c8>)
 8009680:	6013      	str	r3, [r2, #0]
 8009682:	6051      	str	r1, [r2, #4]
										break;
 8009684:	e71f      	b.n	80094c6 <PxMessagingTask+0xf7a>
										remoteBuffer =((uint32_t )cMessage[port - 1][shift] << 0) + ((uint32_t )cMessage[port - 1][1 + shift] << 8) + ((uint32_t )cMessage[port - 1][2 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 24);
 8009686:	2338      	movs	r3, #56	; 0x38
 8009688:	436b      	muls	r3, r5
 800968a:	4a61      	ldr	r2, [pc, #388]	; (8009810 <PxMessagingTask+0x12c4>)
 800968c:	18d2      	adds	r2, r2, r3
 800968e:	5d13      	ldrb	r3, [r2, r4]
 8009690:	1c61      	adds	r1, r4, #1
 8009692:	5c51      	ldrb	r1, [r2, r1]
 8009694:	0209      	lsls	r1, r1, #8
 8009696:	185b      	adds	r3, r3, r1
 8009698:	1ca1      	adds	r1, r4, #2
 800969a:	5c51      	ldrb	r1, [r2, r1]
 800969c:	0409      	lsls	r1, r1, #16
 800969e:	185b      	adds	r3, r3, r1
 80096a0:	3403      	adds	r4, #3
 80096a2:	5d12      	ldrb	r2, [r2, r4]
 80096a4:	0612      	lsls	r2, r2, #24
 80096a6:	189b      	adds	r3, r3, r2
 80096a8:	4a5a      	ldr	r2, [pc, #360]	; (8009814 <PxMessagingTask+0x12c8>)
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	2300      	movs	r3, #0
 80096ae:	6053      	str	r3, [r2, #4]
										break;
 80096b0:	e709      	b.n	80094c6 <PxMessagingTask+0xf7a>
							responseStatus =BOS_OK; // Initialize response
 80096b2:	4b56      	ldr	r3, [pc, #344]	; (800980c <PxMessagingTask+0x12c0>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 80096b8:	00eb      	lsls	r3, r5, #3
 80096ba:	1b5b      	subs	r3, r3, r5
 80096bc:	00da      	lsls	r2, r3, #3
 80096be:	4b54      	ldr	r3, [pc, #336]	; (8009810 <PxMessagingTask+0x12c4>)
 80096c0:	189b      	adds	r3, r3, r2
 80096c2:	5d1f      	ldrb	r7, [r3, r4]
 80096c4:	2f00      	cmp	r7, #0
 80096c6:	d100      	bne.n	80096ca <PxMessagingTask+0x117e>
 80096c8:	e155      	b.n	8009976 <PxMessagingTask+0x142a>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 80096ca:	2f1e      	cmp	r7, #30
 80096cc:	d900      	bls.n	80096d0 <PxMessagingTask+0x1184>
 80096ce:	e14e      	b.n	800996e <PxMessagingTask+0x1422>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 80096d0:	3f01      	subs	r7, #1
 80096d2:	00ba      	lsls	r2, r7, #2
 80096d4:	4b50      	ldr	r3, [pc, #320]	; (8009818 <PxMessagingTask+0x12cc>)
 80096d6:	58d1      	ldr	r1, [r2, r3]
 80096d8:	0c0b      	lsrs	r3, r1, #16
 80096da:	2280      	movs	r2, #128	; 0x80
 80096dc:	0592      	lsls	r2, r2, #22
 80096de:	4694      	mov	ip, r2
 80096e0:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 80096e2:	1c62      	adds	r2, r4, #1
 80096e4:	4691      	mov	r9, r2
 80096e6:	2038      	movs	r0, #56	; 0x38
 80096e8:	4368      	muls	r0, r5
 80096ea:	4a49      	ldr	r2, [pc, #292]	; (8009810 <PxMessagingTask+0x12c4>)
 80096ec:	1812      	adds	r2, r2, r0
 80096ee:	4648      	mov	r0, r9
 80096f0:	5c16      	ldrb	r6, [r2, r0]
 80096f2:	1e72      	subs	r2, r6, #1
 80096f4:	b2d0      	uxtb	r0, r2
 80096f6:	2807      	cmp	r0, #7
 80096f8:	d81b      	bhi.n	8009732 <PxMessagingTask+0x11e6>
 80096fa:	b2d2      	uxtb	r2, r2
 80096fc:	0092      	lsls	r2, r2, #2
 80096fe:	4847      	ldr	r0, [pc, #284]	; (800981c <PxMessagingTask+0x12d0>)
 8009700:	5882      	ldr	r2, [r0, r2]
 8009702:	4697      	mov	pc, r2
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009704:	070a      	lsls	r2, r1, #28
 8009706:	d109      	bne.n	800971c <PxMessagingTask+0x11d0>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 8009708:	2001      	movs	r0, #1
 800970a:	f009 f8ff 	bl	801290c <malloc>
 800970e:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009710:	d03b      	beq.n	800978a <PxMessagingTask+0x123e>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009712:	0400      	lsls	r0, r0, #16
 8009714:	1986      	adds	r6, r0, r6
 8009716:	00bf      	lsls	r7, r7, #2
 8009718:	4a3f      	ldr	r2, [pc, #252]	; (8009818 <PxMessagingTask+0x12cc>)
 800971a:	50be      	str	r6, [r7, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800971c:	4a3b      	ldr	r2, [pc, #236]	; (800980c <PxMessagingTask+0x12c0>)
 800971e:	7812      	ldrb	r2, [r2, #0]
 8009720:	2a12      	cmp	r2, #18
 8009722:	d006      	beq.n	8009732 <PxMessagingTask+0x11e6>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 8009724:	1ca2      	adds	r2, r4, #2
 8009726:	2038      	movs	r0, #56	; 0x38
 8009728:	4368      	muls	r0, r5
 800972a:	4939      	ldr	r1, [pc, #228]	; (8009810 <PxMessagingTask+0x12c4>)
 800972c:	1809      	adds	r1, r1, r0
 800972e:	5c8a      	ldrb	r2, [r1, r2]
 8009730:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009732:	2338      	movs	r3, #56	; 0x38
 8009734:	436b      	muls	r3, r5
 8009736:	4a36      	ldr	r2, [pc, #216]	; (8009810 <PxMessagingTask+0x12c4>)
 8009738:	18d3      	adds	r3, r2, r3
 800973a:	5d1a      	ldrb	r2, [r3, r4]
 800973c:	3a01      	subs	r2, #1
 800973e:	0090      	lsls	r0, r2, #2
 8009740:	4935      	ldr	r1, [pc, #212]	; (8009818 <PxMessagingTask+0x12cc>)
 8009742:	5841      	ldr	r1, [r0, r1]
 8009744:	200f      	movs	r0, #15
 8009746:	4008      	ands	r0, r1
 8009748:	464c      	mov	r4, r9
 800974a:	5d1b      	ldrb	r3, [r3, r4]
 800974c:	4298      	cmp	r0, r3
 800974e:	d009      	beq.n	8009764 <PxMessagingTask+0x1218>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 8009750:	4833      	ldr	r0, [pc, #204]	; (8009820 <PxMessagingTask+0x12d4>)
 8009752:	4684      	mov	ip, r0
 8009754:	4463      	add	r3, ip
 8009756:	0092      	lsls	r2, r2, #2
 8009758:	400b      	ands	r3, r1
 800975a:	492f      	ldr	r1, [pc, #188]	; (8009818 <PxMessagingTask+0x12cc>)
 800975c:	5053      	str	r3, [r2, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800975e:	4b2b      	ldr	r3, [pc, #172]	; (800980c <PxMessagingTask+0x12c0>)
 8009760:	2214      	movs	r2, #20
 8009762:	701a      	strb	r2, [r3, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 8009764:	4b2f      	ldr	r3, [pc, #188]	; (8009824 <PxMessagingTask+0x12d8>)
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	2b60      	cmp	r3, #96	; 0x60
 800976a:	d003      	beq.n	8009774 <PxMessagingTask+0x1228>
 800976c:	2b20      	cmp	r3, #32
 800976e:	d001      	beq.n	8009774 <PxMessagingTask+0x1228>
 8009770:	f7fe ff42 	bl	80085f8 <PxMessagingTask+0xac>
								messageParams[0] =responseStatus;
 8009774:	4b25      	ldr	r3, [pc, #148]	; (800980c <PxMessagingTask+0x12c0>)
 8009776:	781a      	ldrb	r2, [r3, #0]
 8009778:	4b2b      	ldr	r3, [pc, #172]	; (8009828 <PxMessagingTask+0x12dc>)
 800977a:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800977c:	2201      	movs	r2, #1
 800977e:	2121      	movs	r1, #33	; 0x21
 8009780:	9805      	ldr	r0, [sp, #20]
 8009782:	f7fe fd4f 	bl	8008224 <SendMessageToModule>
 8009786:	f7fe ff37 	bl	80085f8 <PxMessagingTask+0xac>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800978a:	4a20      	ldr	r2, [pc, #128]	; (800980c <PxMessagingTask+0x12c0>)
 800978c:	2112      	movs	r1, #18
 800978e:	7011      	strb	r1, [r2, #0]
 8009790:	e7c4      	b.n	800971c <PxMessagingTask+0x11d0>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009792:	070a      	lsls	r2, r1, #28
 8009794:	d109      	bne.n	80097aa <PxMessagingTask+0x125e>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 8009796:	2001      	movs	r0, #1
 8009798:	f009 f8b8 	bl	801290c <malloc>
 800979c:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800979e:	d010      	beq.n	80097c2 <PxMessagingTask+0x1276>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80097a0:	0400      	lsls	r0, r0, #16
 80097a2:	1986      	adds	r6, r0, r6
 80097a4:	00bf      	lsls	r7, r7, #2
 80097a6:	4a1c      	ldr	r2, [pc, #112]	; (8009818 <PxMessagingTask+0x12cc>)
 80097a8:	50be      	str	r6, [r7, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 80097aa:	4a18      	ldr	r2, [pc, #96]	; (800980c <PxMessagingTask+0x12c0>)
 80097ac:	7812      	ldrb	r2, [r2, #0]
 80097ae:	2a12      	cmp	r2, #18
 80097b0:	d0bf      	beq.n	8009732 <PxMessagingTask+0x11e6>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 80097b2:	1ca2      	adds	r2, r4, #2
 80097b4:	2038      	movs	r0, #56	; 0x38
 80097b6:	4368      	muls	r0, r5
 80097b8:	4915      	ldr	r1, [pc, #84]	; (8009810 <PxMessagingTask+0x12c4>)
 80097ba:	1809      	adds	r1, r1, r0
 80097bc:	568a      	ldrsb	r2, [r1, r2]
 80097be:	701a      	strb	r2, [r3, #0]
 80097c0:	e7b7      	b.n	8009732 <PxMessagingTask+0x11e6>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 80097c2:	4a12      	ldr	r2, [pc, #72]	; (800980c <PxMessagingTask+0x12c0>)
 80097c4:	2112      	movs	r1, #18
 80097c6:	7011      	strb	r1, [r2, #0]
 80097c8:	e7ef      	b.n	80097aa <PxMessagingTask+0x125e>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80097ca:	070a      	lsls	r2, r1, #28
 80097cc:	d109      	bne.n	80097e2 <PxMessagingTask+0x1296>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 80097ce:	2002      	movs	r0, #2
 80097d0:	f009 f89c 	bl	801290c <malloc>
 80097d4:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80097d6:	d015      	beq.n	8009804 <PxMessagingTask+0x12b8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80097d8:	0400      	lsls	r0, r0, #16
 80097da:	1986      	adds	r6, r0, r6
 80097dc:	00bf      	lsls	r7, r7, #2
 80097de:	4a0e      	ldr	r2, [pc, #56]	; (8009818 <PxMessagingTask+0x12cc>)
 80097e0:	50be      	str	r6, [r7, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 80097e2:	4a0a      	ldr	r2, [pc, #40]	; (800980c <PxMessagingTask+0x12c0>)
 80097e4:	7812      	ldrb	r2, [r2, #0]
 80097e6:	2a12      	cmp	r2, #18
 80097e8:	d0a3      	beq.n	8009732 <PxMessagingTask+0x11e6>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 80097ea:	1ca2      	adds	r2, r4, #2
 80097ec:	2138      	movs	r1, #56	; 0x38
 80097ee:	4369      	muls	r1, r5
 80097f0:	4807      	ldr	r0, [pc, #28]	; (8009810 <PxMessagingTask+0x12c4>)
 80097f2:	1841      	adds	r1, r0, r1
 80097f4:	5c88      	ldrb	r0, [r1, r2]
 80097f6:	1ce2      	adds	r2, r4, #3
 80097f8:	5c8a      	ldrb	r2, [r1, r2]
 80097fa:	0212      	lsls	r2, r2, #8
 80097fc:	1882      	adds	r2, r0, r2
 80097fe:	b292      	uxth	r2, r2
 8009800:	801a      	strh	r2, [r3, #0]
 8009802:	e796      	b.n	8009732 <PxMessagingTask+0x11e6>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009804:	4a01      	ldr	r2, [pc, #4]	; (800980c <PxMessagingTask+0x12c0>)
 8009806:	2112      	movs	r1, #18
 8009808:	7011      	strb	r1, [r2, #0]
 800980a:	e7ea      	b.n	80097e2 <PxMessagingTask+0x1296>
 800980c:	20000c3c 	.word	0x20000c3c
 8009810:	20000c90 	.word	0x20000c90
 8009814:	20000c40 	.word	0x20000c40
 8009818:	200067d0 	.word	0x200067d0
 800981c:	08017b28 	.word	0x08017b28
 8009820:	0000fff0 	.word	0x0000fff0
 8009824:	200067c8 	.word	0x200067c8
 8009828:	20000b3c 	.word	0x20000b3c
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800982c:	070a      	lsls	r2, r1, #28
 800982e:	d109      	bne.n	8009844 <PxMessagingTask+0x12f8>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 8009830:	2002      	movs	r0, #2
 8009832:	f009 f86b 	bl	801290c <malloc>
 8009836:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009838:	d016      	beq.n	8009868 <PxMessagingTask+0x131c>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800983a:	0400      	lsls	r0, r0, #16
 800983c:	1986      	adds	r6, r0, r6
 800983e:	00bf      	lsls	r7, r7, #2
 8009840:	4add      	ldr	r2, [pc, #884]	; (8009bb8 <PxMessagingTask+0x166c>)
 8009842:	50be      	str	r6, [r7, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009844:	4add      	ldr	r2, [pc, #884]	; (8009bbc <PxMessagingTask+0x1670>)
 8009846:	7812      	ldrb	r2, [r2, #0]
 8009848:	2a12      	cmp	r2, #18
 800984a:	d100      	bne.n	800984e <PxMessagingTask+0x1302>
 800984c:	e771      	b.n	8009732 <PxMessagingTask+0x11e6>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800984e:	1ca2      	adds	r2, r4, #2
 8009850:	2138      	movs	r1, #56	; 0x38
 8009852:	4369      	muls	r1, r5
 8009854:	48da      	ldr	r0, [pc, #872]	; (8009bc0 <PxMessagingTask+0x1674>)
 8009856:	1841      	adds	r1, r0, r1
 8009858:	5c88      	ldrb	r0, [r1, r2]
 800985a:	1ce2      	adds	r2, r4, #3
 800985c:	5c8a      	ldrb	r2, [r1, r2]
 800985e:	0212      	lsls	r2, r2, #8
 8009860:	1882      	adds	r2, r0, r2
 8009862:	b212      	sxth	r2, r2
 8009864:	801a      	strh	r2, [r3, #0]
 8009866:	e764      	b.n	8009732 <PxMessagingTask+0x11e6>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009868:	4ad4      	ldr	r2, [pc, #848]	; (8009bbc <PxMessagingTask+0x1670>)
 800986a:	2112      	movs	r1, #18
 800986c:	7011      	strb	r1, [r2, #0]
 800986e:	e7e9      	b.n	8009844 <PxMessagingTask+0x12f8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009870:	070a      	lsls	r2, r1, #28
 8009872:	d109      	bne.n	8009888 <PxMessagingTask+0x133c>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 8009874:	2004      	movs	r0, #4
 8009876:	f009 f849 	bl	801290c <malloc>
 800987a:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800987c:	d01d      	beq.n	80098ba <PxMessagingTask+0x136e>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800987e:	0400      	lsls	r0, r0, #16
 8009880:	1986      	adds	r6, r0, r6
 8009882:	00bf      	lsls	r7, r7, #2
 8009884:	4acc      	ldr	r2, [pc, #816]	; (8009bb8 <PxMessagingTask+0x166c>)
 8009886:	50be      	str	r6, [r7, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009888:	4acc      	ldr	r2, [pc, #816]	; (8009bbc <PxMessagingTask+0x1670>)
 800988a:	7812      	ldrb	r2, [r2, #0]
 800988c:	2a12      	cmp	r2, #18
 800988e:	d100      	bne.n	8009892 <PxMessagingTask+0x1346>
 8009890:	e74f      	b.n	8009732 <PxMessagingTask+0x11e6>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009892:	1ca2      	adds	r2, r4, #2
 8009894:	2138      	movs	r1, #56	; 0x38
 8009896:	4369      	muls	r1, r5
 8009898:	48c9      	ldr	r0, [pc, #804]	; (8009bc0 <PxMessagingTask+0x1674>)
 800989a:	1841      	adds	r1, r0, r1
 800989c:	5c88      	ldrb	r0, [r1, r2]
 800989e:	1ce2      	adds	r2, r4, #3
 80098a0:	5c8a      	ldrb	r2, [r1, r2]
 80098a2:	0212      	lsls	r2, r2, #8
 80098a4:	1880      	adds	r0, r0, r2
 80098a6:	1d22      	adds	r2, r4, #4
 80098a8:	5c8a      	ldrb	r2, [r1, r2]
 80098aa:	0412      	lsls	r2, r2, #16
 80098ac:	1882      	adds	r2, r0, r2
 80098ae:	1d60      	adds	r0, r4, #5
 80098b0:	5c09      	ldrb	r1, [r1, r0]
 80098b2:	0609      	lsls	r1, r1, #24
 80098b4:	1852      	adds	r2, r2, r1
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	e73b      	b.n	8009732 <PxMessagingTask+0x11e6>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 80098ba:	4ac0      	ldr	r2, [pc, #768]	; (8009bbc <PxMessagingTask+0x1670>)
 80098bc:	2112      	movs	r1, #18
 80098be:	7011      	strb	r1, [r2, #0]
 80098c0:	e7e2      	b.n	8009888 <PxMessagingTask+0x133c>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80098c2:	070a      	lsls	r2, r1, #28
 80098c4:	d109      	bne.n	80098da <PxMessagingTask+0x138e>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 80098c6:	2004      	movs	r0, #4
 80098c8:	f009 f820 	bl	801290c <malloc>
 80098cc:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80098ce:	d01d      	beq.n	800990c <PxMessagingTask+0x13c0>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80098d0:	0400      	lsls	r0, r0, #16
 80098d2:	1986      	adds	r6, r0, r6
 80098d4:	00bf      	lsls	r7, r7, #2
 80098d6:	4ab8      	ldr	r2, [pc, #736]	; (8009bb8 <PxMessagingTask+0x166c>)
 80098d8:	50be      	str	r6, [r7, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 80098da:	4ab8      	ldr	r2, [pc, #736]	; (8009bbc <PxMessagingTask+0x1670>)
 80098dc:	7812      	ldrb	r2, [r2, #0]
 80098de:	2a12      	cmp	r2, #18
 80098e0:	d100      	bne.n	80098e4 <PxMessagingTask+0x1398>
 80098e2:	e726      	b.n	8009732 <PxMessagingTask+0x11e6>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 80098e4:	1ca2      	adds	r2, r4, #2
 80098e6:	2138      	movs	r1, #56	; 0x38
 80098e8:	4369      	muls	r1, r5
 80098ea:	48b5      	ldr	r0, [pc, #724]	; (8009bc0 <PxMessagingTask+0x1674>)
 80098ec:	1841      	adds	r1, r0, r1
 80098ee:	5c88      	ldrb	r0, [r1, r2]
 80098f0:	1ce2      	adds	r2, r4, #3
 80098f2:	5c8a      	ldrb	r2, [r1, r2]
 80098f4:	0212      	lsls	r2, r2, #8
 80098f6:	1880      	adds	r0, r0, r2
 80098f8:	1d22      	adds	r2, r4, #4
 80098fa:	5c8a      	ldrb	r2, [r1, r2]
 80098fc:	0412      	lsls	r2, r2, #16
 80098fe:	1882      	adds	r2, r0, r2
 8009900:	1d60      	adds	r0, r4, #5
 8009902:	5c09      	ldrb	r1, [r1, r0]
 8009904:	0609      	lsls	r1, r1, #24
 8009906:	1852      	adds	r2, r2, r1
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	e712      	b.n	8009732 <PxMessagingTask+0x11e6>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800990c:	4aab      	ldr	r2, [pc, #684]	; (8009bbc <PxMessagingTask+0x1670>)
 800990e:	2112      	movs	r1, #18
 8009910:	7011      	strb	r1, [r2, #0]
 8009912:	e7e2      	b.n	80098da <PxMessagingTask+0x138e>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009914:	070a      	lsls	r2, r1, #28
 8009916:	d109      	bne.n	800992c <PxMessagingTask+0x13e0>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 8009918:	2004      	movs	r0, #4
 800991a:	f008 fff7 	bl	801290c <malloc>
 800991e:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009920:	d021      	beq.n	8009966 <PxMessagingTask+0x141a>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009922:	0400      	lsls	r0, r0, #16
 8009924:	1986      	adds	r6, r0, r6
 8009926:	00bf      	lsls	r7, r7, #2
 8009928:	4aa3      	ldr	r2, [pc, #652]	; (8009bb8 <PxMessagingTask+0x166c>)
 800992a:	50be      	str	r6, [r7, r2]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL){ // Write remote value
 800992c:	4aa3      	ldr	r2, [pc, #652]	; (8009bbc <PxMessagingTask+0x1670>)
 800992e:	7812      	ldrb	r2, [r2, #0]
 8009930:	2a12      	cmp	r2, #18
 8009932:	d100      	bne.n	8009936 <PxMessagingTask+0x13ea>
 8009934:	e6fd      	b.n	8009732 <PxMessagingTask+0x11e6>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009936:	1ca2      	adds	r2, r4, #2
 8009938:	2138      	movs	r1, #56	; 0x38
 800993a:	4369      	muls	r1, r5
 800993c:	48a0      	ldr	r0, [pc, #640]	; (8009bc0 <PxMessagingTask+0x1674>)
 800993e:	1841      	adds	r1, r0, r1
 8009940:	5c88      	ldrb	r0, [r1, r2]
 8009942:	1ce2      	adds	r2, r4, #3
 8009944:	5c8a      	ldrb	r2, [r1, r2]
 8009946:	0212      	lsls	r2, r2, #8
 8009948:	1880      	adds	r0, r0, r2
 800994a:	1d22      	adds	r2, r4, #4
 800994c:	5c8a      	ldrb	r2, [r1, r2]
 800994e:	0412      	lsls	r2, r2, #16
 8009950:	1882      	adds	r2, r0, r2
 8009952:	1d60      	adds	r0, r4, #5
 8009954:	5c09      	ldrb	r1, [r1, r0]
 8009956:	0609      	lsls	r1, r1, #24
 8009958:	1852      	adds	r2, r2, r1
 800995a:	499a      	ldr	r1, [pc, #616]	; (8009bc4 <PxMessagingTask+0x1678>)
 800995c:	600a      	str	r2, [r1, #0]
 800995e:	2000      	movs	r0, #0
 8009960:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	e6e5      	b.n	8009732 <PxMessagingTask+0x11e6>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009966:	4a95      	ldr	r2, [pc, #596]	; (8009bbc <PxMessagingTask+0x1670>)
 8009968:	2112      	movs	r1, #18
 800996a:	7011      	strb	r1, [r2, #0]
 800996c:	e7de      	b.n	800992c <PxMessagingTask+0x13e0>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800996e:	4b93      	ldr	r3, [pc, #588]	; (8009bbc <PxMessagingTask+0x1670>)
 8009970:	2213      	movs	r2, #19
 8009972:	701a      	strb	r2, [r3, #0]
 8009974:	e6f6      	b.n	8009764 <PxMessagingTask+0x1218>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8009976:	1ca2      	adds	r2, r4, #2
 8009978:	2338      	movs	r3, #56	; 0x38
 800997a:	436b      	muls	r3, r5
 800997c:	4990      	ldr	r1, [pc, #576]	; (8009bc0 <PxMessagingTask+0x1674>)
 800997e:	18cb      	adds	r3, r1, r3
 8009980:	5c9f      	ldrb	r7, [r3, r2]
 8009982:	063f      	lsls	r7, r7, #24
 8009984:	1ce2      	adds	r2, r4, #3
 8009986:	5c9a      	ldrb	r2, [r3, r2]
 8009988:	0412      	lsls	r2, r2, #16
 800998a:	18bf      	adds	r7, r7, r2
 800998c:	1d22      	adds	r2, r4, #4
 800998e:	5c9a      	ldrb	r2, [r3, r2]
 8009990:	0212      	lsls	r2, r2, #8
 8009992:	18bf      	adds	r7, r7, r2
 8009994:	1d62      	adds	r2, r4, #5
 8009996:	5c9b      	ldrb	r3, [r3, r2]
 8009998:	18ff      	adds	r7, r7, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800999a:	23e0      	movs	r3, #224	; 0xe0
 800999c:	061b      	lsls	r3, r3, #24
 800999e:	18fa      	adds	r2, r7, r3
 80099a0:	4b89      	ldr	r3, [pc, #548]	; (8009bc8 <PxMessagingTask+0x167c>)
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d87c      	bhi.n	8009aa0 <PxMessagingTask+0x1554>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 80099a6:	1c63      	adds	r3, r4, #1
 80099a8:	2138      	movs	r1, #56	; 0x38
 80099aa:	4369      	muls	r1, r5
 80099ac:	4a84      	ldr	r2, [pc, #528]	; (8009bc0 <PxMessagingTask+0x1674>)
 80099ae:	1852      	adds	r2, r2, r1
 80099b0:	5cd3      	ldrb	r3, [r2, r3]
 80099b2:	3b01      	subs	r3, #1
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	2a07      	cmp	r2, #7
 80099b8:	d900      	bls.n	80099bc <PxMessagingTask+0x1470>
 80099ba:	e6d3      	b.n	8009764 <PxMessagingTask+0x1218>
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4a82      	ldr	r2, [pc, #520]	; (8009bcc <PxMessagingTask+0x1680>)
 80099c2:	58d3      	ldr	r3, [r2, r3]
 80099c4:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 80099c6:	3406      	adds	r4, #6
 80099c8:	2238      	movs	r2, #56	; 0x38
 80099ca:	436a      	muls	r2, r5
 80099cc:	4b7c      	ldr	r3, [pc, #496]	; (8009bc0 <PxMessagingTask+0x1674>)
 80099ce:	189b      	adds	r3, r3, r2
 80099d0:	5d1b      	ldrb	r3, [r3, r4]
 80099d2:	703b      	strb	r3, [r7, #0]
											break;
 80099d4:	e6c6      	b.n	8009764 <PxMessagingTask+0x1218>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 80099d6:	3406      	adds	r4, #6
 80099d8:	2238      	movs	r2, #56	; 0x38
 80099da:	436a      	muls	r2, r5
 80099dc:	4b78      	ldr	r3, [pc, #480]	; (8009bc0 <PxMessagingTask+0x1674>)
 80099de:	189b      	adds	r3, r3, r2
 80099e0:	571b      	ldrsb	r3, [r3, r4]
 80099e2:	703b      	strb	r3, [r7, #0]
											break;
 80099e4:	e6be      	b.n	8009764 <PxMessagingTask+0x1218>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 80099e6:	1da1      	adds	r1, r4, #6
 80099e8:	2338      	movs	r3, #56	; 0x38
 80099ea:	436b      	muls	r3, r5
 80099ec:	4a74      	ldr	r2, [pc, #464]	; (8009bc0 <PxMessagingTask+0x1674>)
 80099ee:	18d2      	adds	r2, r2, r3
 80099f0:	5c53      	ldrb	r3, [r2, r1]
 80099f2:	3407      	adds	r4, #7
 80099f4:	5d12      	ldrb	r2, [r2, r4]
 80099f6:	0212      	lsls	r2, r2, #8
 80099f8:	189b      	adds	r3, r3, r2
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	803b      	strh	r3, [r7, #0]
											break;
 80099fe:	e6b1      	b.n	8009764 <PxMessagingTask+0x1218>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 8009a00:	1da1      	adds	r1, r4, #6
 8009a02:	2338      	movs	r3, #56	; 0x38
 8009a04:	436b      	muls	r3, r5
 8009a06:	4a6e      	ldr	r2, [pc, #440]	; (8009bc0 <PxMessagingTask+0x1674>)
 8009a08:	18d2      	adds	r2, r2, r3
 8009a0a:	5c53      	ldrb	r3, [r2, r1]
 8009a0c:	3407      	adds	r4, #7
 8009a0e:	5d12      	ldrb	r2, [r2, r4]
 8009a10:	0212      	lsls	r2, r2, #8
 8009a12:	189b      	adds	r3, r3, r2
 8009a14:	b21b      	sxth	r3, r3
 8009a16:	803b      	strh	r3, [r7, #0]
											break;
 8009a18:	e6a4      	b.n	8009764 <PxMessagingTask+0x1218>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009a1a:	1da1      	adds	r1, r4, #6
 8009a1c:	2338      	movs	r3, #56	; 0x38
 8009a1e:	436b      	muls	r3, r5
 8009a20:	4a67      	ldr	r2, [pc, #412]	; (8009bc0 <PxMessagingTask+0x1674>)
 8009a22:	18d2      	adds	r2, r2, r3
 8009a24:	5c53      	ldrb	r3, [r2, r1]
 8009a26:	1de1      	adds	r1, r4, #7
 8009a28:	5c51      	ldrb	r1, [r2, r1]
 8009a2a:	0209      	lsls	r1, r1, #8
 8009a2c:	185b      	adds	r3, r3, r1
 8009a2e:	0021      	movs	r1, r4
 8009a30:	3108      	adds	r1, #8
 8009a32:	5c51      	ldrb	r1, [r2, r1]
 8009a34:	0409      	lsls	r1, r1, #16
 8009a36:	185b      	adds	r3, r3, r1
 8009a38:	3409      	adds	r4, #9
 8009a3a:	5d12      	ldrb	r2, [r2, r4]
 8009a3c:	0612      	lsls	r2, r2, #24
 8009a3e:	189b      	adds	r3, r3, r2
 8009a40:	603b      	str	r3, [r7, #0]
											break;
 8009a42:	e68f      	b.n	8009764 <PxMessagingTask+0x1218>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 8009a44:	1da1      	adds	r1, r4, #6
 8009a46:	2338      	movs	r3, #56	; 0x38
 8009a48:	436b      	muls	r3, r5
 8009a4a:	4a5d      	ldr	r2, [pc, #372]	; (8009bc0 <PxMessagingTask+0x1674>)
 8009a4c:	18d2      	adds	r2, r2, r3
 8009a4e:	5c53      	ldrb	r3, [r2, r1]
 8009a50:	1de1      	adds	r1, r4, #7
 8009a52:	5c51      	ldrb	r1, [r2, r1]
 8009a54:	0209      	lsls	r1, r1, #8
 8009a56:	185b      	adds	r3, r3, r1
 8009a58:	0021      	movs	r1, r4
 8009a5a:	3108      	adds	r1, #8
 8009a5c:	5c51      	ldrb	r1, [r2, r1]
 8009a5e:	0409      	lsls	r1, r1, #16
 8009a60:	185b      	adds	r3, r3, r1
 8009a62:	3409      	adds	r4, #9
 8009a64:	5d12      	ldrb	r2, [r2, r4]
 8009a66:	0612      	lsls	r2, r2, #24
 8009a68:	189b      	adds	r3, r3, r2
 8009a6a:	603b      	str	r3, [r7, #0]
											break;
 8009a6c:	e67a      	b.n	8009764 <PxMessagingTask+0x1218>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009a6e:	1da1      	adds	r1, r4, #6
 8009a70:	2338      	movs	r3, #56	; 0x38
 8009a72:	436b      	muls	r3, r5
 8009a74:	4a52      	ldr	r2, [pc, #328]	; (8009bc0 <PxMessagingTask+0x1674>)
 8009a76:	18d2      	adds	r2, r2, r3
 8009a78:	5c53      	ldrb	r3, [r2, r1]
 8009a7a:	1de1      	adds	r1, r4, #7
 8009a7c:	5c51      	ldrb	r1, [r2, r1]
 8009a7e:	0209      	lsls	r1, r1, #8
 8009a80:	185b      	adds	r3, r3, r1
 8009a82:	0021      	movs	r1, r4
 8009a84:	3108      	adds	r1, #8
 8009a86:	5c51      	ldrb	r1, [r2, r1]
 8009a88:	0409      	lsls	r1, r1, #16
 8009a8a:	185b      	adds	r3, r3, r1
 8009a8c:	3409      	adds	r4, #9
 8009a8e:	5d12      	ldrb	r2, [r2, r4]
 8009a90:	0612      	lsls	r2, r2, #24
 8009a92:	189b      	adds	r3, r3, r2
 8009a94:	4a4b      	ldr	r2, [pc, #300]	; (8009bc4 <PxMessagingTask+0x1678>)
 8009a96:	6013      	str	r3, [r2, #0]
 8009a98:	2100      	movs	r1, #0
 8009a9a:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 8009a9c:	603b      	str	r3, [r7, #0]
											break;
 8009a9e:	e661      	b.n	8009764 <PxMessagingTask+0x1218>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 8009aa0:	4a4b      	ldr	r2, [pc, #300]	; (8009bd0 <PxMessagingTask+0x1684>)
 8009aa2:	23f8      	movs	r3, #248	; 0xf8
 8009aa4:	061b      	lsls	r3, r3, #24
 8009aa6:	18fb      	adds	r3, r7, r3
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d900      	bls.n	8009aae <PxMessagingTask+0x1562>
 8009aac:	e0b3      	b.n	8009c16 <PxMessagingTask+0x16ca>
									HAL_FLASH_Unlock();
 8009aae:	f006 ffc7 	bl	8010a40 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 8009ab2:	2e22      	cmp	r6, #34	; 0x22
 8009ab4:	d102      	bne.n	8009abc <PxMessagingTask+0x1570>
										EraseSector(temp32);
 8009ab6:	0038      	movs	r0, r7
 8009ab8:	f001 fea4 	bl	800b804 <EraseSector>
									if(responseStatus == BOS_OK){
 8009abc:	4b3f      	ldr	r3, [pc, #252]	; (8009bbc <PxMessagingTask+0x1670>)
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d116      	bne.n	8009af2 <PxMessagingTask+0x15a6>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 8009ac4:	1c63      	adds	r3, r4, #1
 8009ac6:	2138      	movs	r1, #56	; 0x38
 8009ac8:	4369      	muls	r1, r5
 8009aca:	4a3d      	ldr	r2, [pc, #244]	; (8009bc0 <PxMessagingTask+0x1674>)
 8009acc:	1852      	adds	r2, r2, r1
 8009ace:	5cd3      	ldrb	r3, [r2, r3]
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	2a07      	cmp	r2, #7
 8009ad6:	d80c      	bhi.n	8009af2 <PxMessagingTask+0x15a6>
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4a3d      	ldr	r2, [pc, #244]	; (8009bd4 <PxMessagingTask+0x1688>)
 8009ade:	58d3      	ldr	r3, [r2, r3]
 8009ae0:	469f      	mov	pc, r3
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009ae2:	883b      	ldrh	r3, [r7, #0]
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	4a3c      	ldr	r2, [pc, #240]	; (8009bd8 <PxMessagingTask+0x168c>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d00c      	beq.n	8009b06 <PxMessagingTask+0x15ba>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009aec:	4b33      	ldr	r3, [pc, #204]	; (8009bbc <PxMessagingTask+0x1670>)
 8009aee:	2216      	movs	r2, #22
 8009af0:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 8009af2:	f006 ffb9 	bl	8010a68 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 8009af6:	9b08      	ldr	r3, [sp, #32]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d100      	bne.n	8009afe <PxMessagingTask+0x15b2>
 8009afc:	e632      	b.n	8009764 <PxMessagingTask+0x1218>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009afe:	4b2f      	ldr	r3, [pc, #188]	; (8009bbc <PxMessagingTask+0x1670>)
 8009b00:	2216      	movs	r2, #22
 8009b02:	701a      	strb	r2, [r3, #0]
 8009b04:	e62e      	b.n	8009764 <PxMessagingTask+0x1218>
													remoteBuffer =cMessage[port - 1][6 + shift];
 8009b06:	3406      	adds	r4, #6
 8009b08:	2238      	movs	r2, #56	; 0x38
 8009b0a:	436a      	muls	r2, r5
 8009b0c:	4b2c      	ldr	r3, [pc, #176]	; (8009bc0 <PxMessagingTask+0x1674>)
 8009b0e:	189b      	adds	r3, r3, r2
 8009b10:	5d1a      	ldrb	r2, [r3, r4]
 8009b12:	2300      	movs	r3, #0
 8009b14:	492b      	ldr	r1, [pc, #172]	; (8009bc4 <PxMessagingTask+0x1678>)
 8009b16:	600a      	str	r2, [r1, #0]
 8009b18:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009b1a:	0039      	movs	r1, r7
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	f006 ffdb 	bl	8010ad8 <HAL_FLASH_Program>
 8009b22:	9008      	str	r0, [sp, #32]
													break;
 8009b24:	e7e5      	b.n	8009af2 <PxMessagingTask+0x15a6>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009b26:	883b      	ldrh	r3, [r7, #0]
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	4a2b      	ldr	r2, [pc, #172]	; (8009bd8 <PxMessagingTask+0x168c>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d003      	beq.n	8009b38 <PxMessagingTask+0x15ec>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009b30:	4b22      	ldr	r3, [pc, #136]	; (8009bbc <PxMessagingTask+0x1670>)
 8009b32:	2216      	movs	r2, #22
 8009b34:	701a      	strb	r2, [r3, #0]
													break;
 8009b36:	e7dc      	b.n	8009af2 <PxMessagingTask+0x15a6>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009b38:	1da1      	adds	r1, r4, #6
 8009b3a:	2238      	movs	r2, #56	; 0x38
 8009b3c:	436a      	muls	r2, r5
 8009b3e:	4b20      	ldr	r3, [pc, #128]	; (8009bc0 <PxMessagingTask+0x1674>)
 8009b40:	189b      	adds	r3, r3, r2
 8009b42:	5c5a      	ldrb	r2, [r3, r1]
 8009b44:	3407      	adds	r4, #7
 8009b46:	5d1b      	ldrb	r3, [r3, r4]
 8009b48:	021b      	lsls	r3, r3, #8
 8009b4a:	18d2      	adds	r2, r2, r3
 8009b4c:	17d3      	asrs	r3, r2, #31
 8009b4e:	491d      	ldr	r1, [pc, #116]	; (8009bc4 <PxMessagingTask+0x1678>)
 8009b50:	600a      	str	r2, [r1, #0]
 8009b52:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009b54:	0039      	movs	r1, r7
 8009b56:	2001      	movs	r0, #1
 8009b58:	f006 ffbe 	bl	8010ad8 <HAL_FLASH_Program>
 8009b5c:	9008      	str	r0, [sp, #32]
													break;
 8009b5e:	e7c8      	b.n	8009af2 <PxMessagingTask+0x15a6>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	3301      	adds	r3, #1
 8009b64:	d003      	beq.n	8009b6e <PxMessagingTask+0x1622>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009b66:	4b15      	ldr	r3, [pc, #84]	; (8009bbc <PxMessagingTask+0x1670>)
 8009b68:	2216      	movs	r2, #22
 8009b6a:	701a      	strb	r2, [r3, #0]
													break;
 8009b6c:	e7c1      	b.n	8009af2 <PxMessagingTask+0x15a6>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);													// TOCHECKLATER
 8009b6e:	1da2      	adds	r2, r4, #6
 8009b70:	2338      	movs	r3, #56	; 0x38
 8009b72:	436b      	muls	r3, r5
 8009b74:	4912      	ldr	r1, [pc, #72]	; (8009bc0 <PxMessagingTask+0x1674>)
 8009b76:	18cb      	adds	r3, r1, r3
 8009b78:	5c9a      	ldrb	r2, [r3, r2]
 8009b7a:	1de1      	adds	r1, r4, #7
 8009b7c:	5c59      	ldrb	r1, [r3, r1]
 8009b7e:	0209      	lsls	r1, r1, #8
 8009b80:	1852      	adds	r2, r2, r1
 8009b82:	0021      	movs	r1, r4
 8009b84:	3108      	adds	r1, #8
 8009b86:	5c59      	ldrb	r1, [r3, r1]
 8009b88:	0409      	lsls	r1, r1, #16
 8009b8a:	1852      	adds	r2, r2, r1
 8009b8c:	3409      	adds	r4, #9
 8009b8e:	5d1b      	ldrb	r3, [r3, r4]
 8009b90:	061b      	lsls	r3, r3, #24
 8009b92:	18d2      	adds	r2, r2, r3
 8009b94:	2300      	movs	r3, #0
 8009b96:	490b      	ldr	r1, [pc, #44]	; (8009bc4 <PxMessagingTask+0x1678>)
 8009b98:	600a      	str	r2, [r1, #0]
 8009b9a:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009b9c:	0039      	movs	r1, r7
 8009b9e:	2002      	movs	r0, #2
 8009ba0:	f006 ff9a 	bl	8010ad8 <HAL_FLASH_Program>
 8009ba4:	9008      	str	r0, [sp, #32]
													break;
 8009ba6:	e7a4      	b.n	8009af2 <PxMessagingTask+0x15a6>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	3301      	adds	r3, #1
 8009bac:	d016      	beq.n	8009bdc <PxMessagingTask+0x1690>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009bae:	4b03      	ldr	r3, [pc, #12]	; (8009bbc <PxMessagingTask+0x1670>)
 8009bb0:	2216      	movs	r2, #22
 8009bb2:	701a      	strb	r2, [r3, #0]
													break;
 8009bb4:	e79d      	b.n	8009af2 <PxMessagingTask+0x15a6>
 8009bb6:	46c0      	nop			; (mov r8, r8)
 8009bb8:	200067d0 	.word	0x200067d0
 8009bbc:	20000c3c 	.word	0x20000c3c
 8009bc0:	20000c90 	.word	0x20000c90
 8009bc4:	20000c40 	.word	0x20000c40
 8009bc8:	00007fff 	.word	0x00007fff
 8009bcc:	08017b48 	.word	0x08017b48
 8009bd0:	0001ffff 	.word	0x0001ffff
 8009bd4:	08017b68 	.word	0x08017b68
 8009bd8:	0000ffff 	.word	0x0000ffff
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009bdc:	1da2      	adds	r2, r4, #6
 8009bde:	2338      	movs	r3, #56	; 0x38
 8009be0:	436b      	muls	r3, r5
 8009be2:	49aa      	ldr	r1, [pc, #680]	; (8009e8c <PxMessagingTask+0x1940>)
 8009be4:	18cb      	adds	r3, r1, r3
 8009be6:	5c9a      	ldrb	r2, [r3, r2]
 8009be8:	1de1      	adds	r1, r4, #7
 8009bea:	5c59      	ldrb	r1, [r3, r1]
 8009bec:	0209      	lsls	r1, r1, #8
 8009bee:	1852      	adds	r2, r2, r1
 8009bf0:	0021      	movs	r1, r4
 8009bf2:	3108      	adds	r1, #8
 8009bf4:	5c59      	ldrb	r1, [r3, r1]
 8009bf6:	0409      	lsls	r1, r1, #16
 8009bf8:	1852      	adds	r2, r2, r1
 8009bfa:	3409      	adds	r4, #9
 8009bfc:	5d1b      	ldrb	r3, [r3, r4]
 8009bfe:	061b      	lsls	r3, r3, #24
 8009c00:	18d2      	adds	r2, r2, r3
 8009c02:	2300      	movs	r3, #0
 8009c04:	49a2      	ldr	r1, [pc, #648]	; (8009e90 <PxMessagingTask+0x1944>)
 8009c06:	600a      	str	r2, [r1, #0]
 8009c08:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009c0a:	0039      	movs	r1, r7
 8009c0c:	2003      	movs	r0, #3
 8009c0e:	f006 ff63 	bl	8010ad8 <HAL_FLASH_Program>
 8009c12:	9008      	str	r0, [sp, #32]
													break;
 8009c14:	e76d      	b.n	8009af2 <PxMessagingTask+0x15a6>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 8009c16:	4b9f      	ldr	r3, [pc, #636]	; (8009e94 <PxMessagingTask+0x1948>)
 8009c18:	2215      	movs	r2, #21
 8009c1a:	701a      	strb	r2, [r3, #0]
 8009c1c:	e5a2      	b.n	8009764 <PxMessagingTask+0x1218>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 8009c1e:	00eb      	lsls	r3, r5, #3
 8009c20:	1b5b      	subs	r3, r3, r5
 8009c22:	00da      	lsls	r2, r3, #3
 8009c24:	4b99      	ldr	r3, [pc, #612]	; (8009e8c <PxMessagingTask+0x1940>)
 8009c26:	189b      	adds	r3, r3, r2
 8009c28:	5d1a      	ldrb	r2, [r3, r4]
 8009c2a:	4b9a      	ldr	r3, [pc, #616]	; (8009e94 <PxMessagingTask+0x1948>)
 8009c2c:	701a      	strb	r2, [r3, #0]
							break;
 8009c2e:	f7fe fce3 	bl	80085f8 <PxMessagingTask+0xac>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 8009c32:	1c60      	adds	r0, r4, #1
 8009c34:	00eb      	lsls	r3, r5, #3
 8009c36:	1b5a      	subs	r2, r3, r5
 8009c38:	00d1      	lsls	r1, r2, #3
 8009c3a:	1809      	adds	r1, r1, r0
 8009c3c:	4893      	ldr	r0, [pc, #588]	; (8009e8c <PxMessagingTask+0x1940>)
 8009c3e:	1809      	adds	r1, r1, r0
 8009c40:	1e7a      	subs	r2, r7, #1
 8009c42:	b292      	uxth	r2, r2
 8009c44:	1b5b      	subs	r3, r3, r5
 8009c46:	00de      	lsls	r6, r3, #3
 8009c48:	1980      	adds	r0, r0, r6
 8009c4a:	5d00      	ldrb	r0, [r0, r4]
 8009c4c:	230a      	movs	r3, #10
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	f003 fd26 	bl	800d6a0 <writePxMutex>
							break;
 8009c54:	f7fe fcd0 	bl	80085f8 <PxMessagingTask+0xac>
							switch(cMessage[port - 1][0 + shift]){
 8009c58:	00eb      	lsls	r3, r5, #3
 8009c5a:	1b5b      	subs	r3, r3, r5
 8009c5c:	00da      	lsls	r2, r3, #3
 8009c5e:	4b8b      	ldr	r3, [pc, #556]	; (8009e8c <PxMessagingTask+0x1940>)
 8009c60:	189b      	adds	r3, r3, r2
 8009c62:	5d1b      	ldrb	r3, [r3, r4]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d100      	bne.n	8009c6a <PxMessagingTask+0x171e>
 8009c68:	e08b      	b.n	8009d82 <PxMessagingTask+0x1836>
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d052      	beq.n	8009d14 <PxMessagingTask+0x17c8>
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d100      	bne.n	8009c74 <PxMessagingTask+0x1728>
 8009c72:	e0bd      	b.n	8009df0 <PxMessagingTask+0x18a4>
							ADCPort =cMessage[port - 1][shift];
 8009c74:	00ea      	lsls	r2, r5, #3
 8009c76:	1b52      	subs	r2, r2, r5
 8009c78:	00d1      	lsls	r1, r2, #3
 8009c7a:	4b84      	ldr	r3, [pc, #528]	; (8009e8c <PxMessagingTask+0x1940>)
 8009c7c:	185b      	adds	r3, r3, r1
 8009c7e:	5d18      	ldrb	r0, [r3, r4]
 8009c80:	4a85      	ldr	r2, [pc, #532]	; (8009e98 <PxMessagingTask+0x194c>)
 8009c82:	8610      	strh	r0, [r2, #48]	; 0x30
							ADCSide =cMessage[port - 1][shift + 1];
 8009c84:	1c61      	adds	r1, r4, #1
 8009c86:	5c5b      	ldrb	r3, [r3, r1]
 8009c88:	8653      	strh	r3, [r2, #50]	; 0x32
							if(0 == ADCSide){
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d000      	beq.n	8009c90 <PxMessagingTask+0x1744>
 8009c8e:	e0c4      	b.n	8009e1a <PxMessagingTask+0x18ce>
								ADCSelectChannel(ADCPort,"top");
 8009c90:	4e82      	ldr	r6, [pc, #520]	; (8009e9c <PxMessagingTask+0x1950>)
 8009c92:	0031      	movs	r1, r6
 8009c94:	f002 fc32 	bl	800c4fc <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 8009c98:	4b7f      	ldr	r3, [pc, #508]	; (8009e98 <PxMessagingTask+0x194c>)
 8009c9a:	001a      	movs	r2, r3
 8009c9c:	3234      	adds	r2, #52	; 0x34
 8009c9e:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 8009ca0:	b2c0      	uxtb	r0, r0
 8009ca2:	0031      	movs	r1, r6
 8009ca4:	f002 fc5a 	bl	800c55c <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 8009ca8:	487b      	ldr	r0, [pc, #492]	; (8009e98 <PxMessagingTask+0x194c>)
 8009caa:	0001      	movs	r1, r0
 8009cac:	3138      	adds	r1, #56	; 0x38
 8009cae:	303c      	adds	r0, #60	; 0x3c
 8009cb0:	f002 fa84 	bl	800c1bc <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 8009cb4:	00eb      	lsls	r3, r5, #3
 8009cb6:	1b5b      	subs	r3, r3, r5
 8009cb8:	00da      	lsls	r2, r3, #3
 8009cba:	4e74      	ldr	r6, [pc, #464]	; (8009e8c <PxMessagingTask+0x1940>)
 8009cbc:	18b6      	adds	r6, r6, r2
 8009cbe:	5d30      	ldrb	r0, [r6, r4]
 8009cc0:	4f75      	ldr	r7, [pc, #468]	; (8009e98 <PxMessagingTask+0x194c>)
 8009cc2:	8638      	strh	r0, [r7, #48]	; 0x30
							GetReadPrecentage(ADCPort,&ADCPercentage);
 8009cc4:	0039      	movs	r1, r7
 8009cc6:	3140      	adds	r1, #64	; 0x40
 8009cc8:	f002 fb36 	bl	800c338 <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009ccc:	1d63      	adds	r3, r4, #5
 8009cce:	5cf3      	ldrb	r3, [r6, r3]
 8009cd0:	1da2      	adds	r2, r4, #6
 8009cd2:	5cb2      	ldrb	r2, [r6, r2]
 8009cd4:	0212      	lsls	r2, r2, #8
 8009cd6:	189b      	adds	r3, r3, r2
 8009cd8:	1de2      	adds	r2, r4, #7
 8009cda:	5cb2      	ldrb	r2, [r6, r2]
 8009cdc:	0412      	lsls	r2, r2, #16
 8009cde:	189b      	adds	r3, r3, r2
 8009ce0:	0022      	movs	r2, r4
 8009ce2:	3208      	adds	r2, #8
 8009ce4:	5cb2      	ldrb	r2, [r6, r2]
 8009ce6:	0612      	lsls	r2, r2, #24
 8009ce8:	189b      	adds	r3, r3, r2
 8009cea:	62bb      	str	r3, [r7, #40]	; 0x28
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009cec:	0023      	movs	r3, r4
 8009cee:	3309      	adds	r3, #9
 8009cf0:	5cf3      	ldrb	r3, [r6, r3]
 8009cf2:	0022      	movs	r2, r4
 8009cf4:	320a      	adds	r2, #10
 8009cf6:	5cb2      	ldrb	r2, [r6, r2]
 8009cf8:	0212      	lsls	r2, r2, #8
 8009cfa:	189b      	adds	r3, r3, r2
 8009cfc:	0022      	movs	r2, r4
 8009cfe:	320b      	adds	r2, #11
 8009d00:	5cb2      	ldrb	r2, [r6, r2]
 8009d02:	0412      	lsls	r2, r2, #16
 8009d04:	189b      	adds	r3, r3, r2
 8009d06:	340c      	adds	r4, #12
 8009d08:	5d32      	ldrb	r2, [r6, r4]
 8009d0a:	0612      	lsls	r2, r2, #24
 8009d0c:	189b      	adds	r3, r3, r2
 8009d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
							break;
 8009d10:	f7fe fc72 	bl	80085f8 <PxMessagingTask+0xac>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009d14:	1c62      	adds	r2, r4, #1
 8009d16:	2338      	movs	r3, #56	; 0x38
 8009d18:	436b      	muls	r3, r5
 8009d1a:	495c      	ldr	r1, [pc, #368]	; (8009e8c <PxMessagingTask+0x1940>)
 8009d1c:	18cb      	adds	r3, r1, r3
 8009d1e:	5c9a      	ldrb	r2, [r3, r2]
 8009d20:	1ca1      	adds	r1, r4, #2
 8009d22:	5c59      	ldrb	r1, [r3, r1]
 8009d24:	0209      	lsls	r1, r1, #8
 8009d26:	1852      	adds	r2, r2, r1
 8009d28:	1ce1      	adds	r1, r4, #3
 8009d2a:	5c59      	ldrb	r1, [r3, r1]
 8009d2c:	0409      	lsls	r1, r1, #16
 8009d2e:	1852      	adds	r2, r2, r1
 8009d30:	1d21      	adds	r1, r4, #4
 8009d32:	5c59      	ldrb	r1, [r3, r1]
 8009d34:	0609      	lsls	r1, r1, #24
 8009d36:	1852      	adds	r2, r2, r1
 8009d38:	4957      	ldr	r1, [pc, #348]	; (8009e98 <PxMessagingTask+0x194c>)
 8009d3a:	60ca      	str	r2, [r1, #12]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009d3c:	1d62      	adds	r2, r4, #5
 8009d3e:	5c98      	ldrb	r0, [r3, r2]
 8009d40:	1da2      	adds	r2, r4, #6
 8009d42:	5c9a      	ldrb	r2, [r3, r2]
 8009d44:	0212      	lsls	r2, r2, #8
 8009d46:	1880      	adds	r0, r0, r2
 8009d48:	1de2      	adds	r2, r4, #7
 8009d4a:	5c9a      	ldrb	r2, [r3, r2]
 8009d4c:	0412      	lsls	r2, r2, #16
 8009d4e:	1880      	adds	r0, r0, r2
 8009d50:	0022      	movs	r2, r4
 8009d52:	3208      	adds	r2, #8
 8009d54:	5c9a      	ldrb	r2, [r3, r2]
 8009d56:	0612      	lsls	r2, r2, #24
 8009d58:	1882      	adds	r2, r0, r2
 8009d5a:	610a      	str	r2, [r1, #16]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009d5c:	0022      	movs	r2, r4
 8009d5e:	3209      	adds	r2, #9
 8009d60:	5c98      	ldrb	r0, [r3, r2]
 8009d62:	3201      	adds	r2, #1
 8009d64:	5c9a      	ldrb	r2, [r3, r2]
 8009d66:	0212      	lsls	r2, r2, #8
 8009d68:	1880      	adds	r0, r0, r2
 8009d6a:	0022      	movs	r2, r4
 8009d6c:	320b      	adds	r2, #11
 8009d6e:	5c9a      	ldrb	r2, [r3, r2]
 8009d70:	0412      	lsls	r2, r2, #16
 8009d72:	1882      	adds	r2, r0, r2
 8009d74:	0020      	movs	r0, r4
 8009d76:	300c      	adds	r0, #12
 8009d78:	5c1b      	ldrb	r3, [r3, r0]
 8009d7a:	061b      	lsls	r3, r3, #24
 8009d7c:	18d3      	adds	r3, r2, r3
 8009d7e:	614b      	str	r3, [r1, #20]
									break;
 8009d80:	e778      	b.n	8009c74 <PxMessagingTask+0x1728>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009d82:	1c62      	adds	r2, r4, #1
 8009d84:	2338      	movs	r3, #56	; 0x38
 8009d86:	436b      	muls	r3, r5
 8009d88:	4940      	ldr	r1, [pc, #256]	; (8009e8c <PxMessagingTask+0x1940>)
 8009d8a:	18cb      	adds	r3, r1, r3
 8009d8c:	5c9a      	ldrb	r2, [r3, r2]
 8009d8e:	1ca1      	adds	r1, r4, #2
 8009d90:	5c59      	ldrb	r1, [r3, r1]
 8009d92:	0209      	lsls	r1, r1, #8
 8009d94:	1852      	adds	r2, r2, r1
 8009d96:	1ce1      	adds	r1, r4, #3
 8009d98:	5c59      	ldrb	r1, [r3, r1]
 8009d9a:	0409      	lsls	r1, r1, #16
 8009d9c:	1852      	adds	r2, r2, r1
 8009d9e:	1d21      	adds	r1, r4, #4
 8009da0:	5c59      	ldrb	r1, [r3, r1]
 8009da2:	0609      	lsls	r1, r1, #24
 8009da4:	1852      	adds	r2, r2, r1
 8009da6:	493c      	ldr	r1, [pc, #240]	; (8009e98 <PxMessagingTask+0x194c>)
 8009da8:	618a      	str	r2, [r1, #24]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009daa:	1d62      	adds	r2, r4, #5
 8009dac:	5c98      	ldrb	r0, [r3, r2]
 8009dae:	1da2      	adds	r2, r4, #6
 8009db0:	5c9a      	ldrb	r2, [r3, r2]
 8009db2:	0212      	lsls	r2, r2, #8
 8009db4:	1880      	adds	r0, r0, r2
 8009db6:	1de2      	adds	r2, r4, #7
 8009db8:	5c9a      	ldrb	r2, [r3, r2]
 8009dba:	0412      	lsls	r2, r2, #16
 8009dbc:	1880      	adds	r0, r0, r2
 8009dbe:	0022      	movs	r2, r4
 8009dc0:	3208      	adds	r2, #8
 8009dc2:	5c9a      	ldrb	r2, [r3, r2]
 8009dc4:	0612      	lsls	r2, r2, #24
 8009dc6:	1882      	adds	r2, r0, r2
 8009dc8:	61ca      	str	r2, [r1, #28]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009dca:	0022      	movs	r2, r4
 8009dcc:	3209      	adds	r2, #9
 8009dce:	5c98      	ldrb	r0, [r3, r2]
 8009dd0:	3201      	adds	r2, #1
 8009dd2:	5c9a      	ldrb	r2, [r3, r2]
 8009dd4:	0212      	lsls	r2, r2, #8
 8009dd6:	1880      	adds	r0, r0, r2
 8009dd8:	0022      	movs	r2, r4
 8009dda:	320b      	adds	r2, #11
 8009ddc:	5c9a      	ldrb	r2, [r3, r2]
 8009dde:	0412      	lsls	r2, r2, #16
 8009de0:	1882      	adds	r2, r0, r2
 8009de2:	0020      	movs	r0, r4
 8009de4:	300c      	adds	r0, #12
 8009de6:	5c1b      	ldrb	r3, [r3, r0]
 8009de8:	061b      	lsls	r3, r3, #24
 8009dea:	18d3      	adds	r3, r2, r3
 8009dec:	620b      	str	r3, [r1, #32]
									break;
 8009dee:	e741      	b.n	8009c74 <PxMessagingTask+0x1728>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009df0:	1c63      	adds	r3, r4, #1
 8009df2:	2238      	movs	r2, #56	; 0x38
 8009df4:	436a      	muls	r2, r5
 8009df6:	4925      	ldr	r1, [pc, #148]	; (8009e8c <PxMessagingTask+0x1940>)
 8009df8:	188a      	adds	r2, r1, r2
 8009dfa:	5cd3      	ldrb	r3, [r2, r3]
 8009dfc:	1ca1      	adds	r1, r4, #2
 8009dfe:	5c51      	ldrb	r1, [r2, r1]
 8009e00:	0209      	lsls	r1, r1, #8
 8009e02:	185b      	adds	r3, r3, r1
 8009e04:	1ce1      	adds	r1, r4, #3
 8009e06:	5c51      	ldrb	r1, [r2, r1]
 8009e08:	0409      	lsls	r1, r1, #16
 8009e0a:	185b      	adds	r3, r3, r1
 8009e0c:	1d21      	adds	r1, r4, #4
 8009e0e:	5c52      	ldrb	r2, [r2, r1]
 8009e10:	0612      	lsls	r2, r2, #24
 8009e12:	189b      	adds	r3, r3, r2
 8009e14:	4a20      	ldr	r2, [pc, #128]	; (8009e98 <PxMessagingTask+0x194c>)
 8009e16:	6253      	str	r3, [r2, #36]	; 0x24
 8009e18:	e72c      	b.n	8009c74 <PxMessagingTask+0x1728>
							else if(1 == ADCSide){
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d000      	beq.n	8009e20 <PxMessagingTask+0x18d4>
 8009e1e:	e743      	b.n	8009ca8 <PxMessagingTask+0x175c>
								ADCSelectChannel(ADCPort,"bottom");
 8009e20:	4e1f      	ldr	r6, [pc, #124]	; (8009ea0 <PxMessagingTask+0x1954>)
 8009e22:	0031      	movs	r1, r6
 8009e24:	f002 fb6a 	bl	800c4fc <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 8009e28:	4b1b      	ldr	r3, [pc, #108]	; (8009e98 <PxMessagingTask+0x194c>)
 8009e2a:	001a      	movs	r2, r3
 8009e2c:	3234      	adds	r2, #52	; 0x34
 8009e2e:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 8009e30:	b2c0      	uxtb	r0, r0
 8009e32:	0031      	movs	r1, r6
 8009e34:	f002 fb92 	bl	800c55c <ReadADCChannel>
 8009e38:	e736      	b.n	8009ca8 <PxMessagingTask+0x175c>
							ACK_FLAG =1;
 8009e3a:	4b1a      	ldr	r3, [pc, #104]	; (8009ea4 <PxMessagingTask+0x1958>)
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	701a      	strb	r2, [r3, #0]
							break;
 8009e40:	f7fe fbda 	bl	80085f8 <PxMessagingTask+0xac>
							rejected_FLAG =1;
 8009e44:	4b18      	ldr	r3, [pc, #96]	; (8009ea8 <PxMessagingTask+0x195c>)
 8009e46:	2201      	movs	r2, #1
 8009e48:	701a      	strb	r2, [r3, #0]
							break;
 8009e4a:	f7fe fbd5 	bl	80085f8 <PxMessagingTask+0xac>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 8009e4e:	9400      	str	r4, [sp, #0]
 8009e50:	464b      	mov	r3, r9
 8009e52:	9a05      	ldr	r2, [sp, #20]
 8009e54:	9907      	ldr	r1, [sp, #28]
 8009e56:	0030      	movs	r0, r6
 8009e58:	f7fe fb76 	bl	8008548 <User_MessagingParser>
 8009e5c:	4683      	mov	fp, r0
							if(result == BOS_ERR_UnknownMessage){
 8009e5e:	2801      	cmp	r0, #1
 8009e60:	d001      	beq.n	8009e66 <PxMessagingTask+0x191a>
 8009e62:	f7fe fbc9 	bl	80085f8 <PxMessagingTask+0xac>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8009e66:	9400      	str	r4, [sp, #0]
 8009e68:	464b      	mov	r3, r9
 8009e6a:	9a05      	ldr	r2, [sp, #20]
 8009e6c:	9907      	ldr	r1, [sp, #28]
 8009e6e:	0030      	movs	r0, r6
 8009e70:	f000 fa44 	bl	800a2fc <Module_MessagingTask>
 8009e74:	4683      	mov	fp, r0
 8009e76:	f7fe fbbf 	bl	80085f8 <PxMessagingTask+0xac>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	9805      	ldr	r0, [sp, #20]
 8009e80:	f7fe f9d0 	bl	8008224 <SendMessageToModule>
			result =BOS_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	469b      	mov	fp, r3
 8009e88:	f7fe fbbb 	bl	8008602 <PxMessagingTask+0xb6>
 8009e8c:	20000c90 	.word	0x20000c90
 8009e90:	20000c40 	.word	0x20000c40
 8009e94:	20000c3c 	.word	0x20000c3c
 8009e98:	20001e2c 	.word	0x20001e2c
 8009e9c:	080189d4 	.word	0x080189d4
 8009ea0:	080189d8 	.word	0x080189d8
 8009ea4:	2000113d 	.word	0x2000113d
 8009ea8:	2000113c 	.word	0x2000113c

08009eac <SystemClock_Config>:
	|												 Private Functions	 														|
   ----------------------------------------------------------------------- 
*/

void SystemClock_Config(void)
{
 8009eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eae:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009eb0:	2401      	movs	r4, #1
 8009eb2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009eb4:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009eb6:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8009eb8:	2310      	movs	r3, #16
 8009eba:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009ebc:	2702      	movs	r7, #2
 8009ebe:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009ec0:	2680      	movs	r6, #128	; 0x80
 8009ec2:	0276      	lsls	r6, r6, #9
 8009ec4:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009ec6:	2380      	movs	r3, #128	; 0x80
 8009ec8:	035b      	lsls	r3, r3, #13
 8009eca:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8009ecc:	2500      	movs	r5, #0
 8009ece:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8009ed0:	a80d      	add	r0, sp, #52	; 0x34
 8009ed2:	f007 f82d 	bl	8010f30 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8009ed6:	2307      	movs	r3, #7
 8009ed8:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009eda:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009edc:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009ede:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	a809      	add	r0, sp, #36	; 0x24
 8009ee4:	f007 fac8 	bl	8011478 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 8009ee8:	4b1a      	ldr	r3, [pc, #104]	; (8009f54 <SystemClock_Config+0xa8>)
 8009eea:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8009eec:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009eee:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009ef0:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009ef2:	a802      	add	r0, sp, #8
 8009ef4:	f007 fc58 	bl	80117a8 <HAL_RCCEx_PeriphCLKConfig>
	
	__HAL_RCC_PWR_CLK_ENABLE();
 8009ef8:	4d17      	ldr	r5, [pc, #92]	; (8009f58 <SystemClock_Config+0xac>)
 8009efa:	69ea      	ldr	r2, [r5, #28]
 8009efc:	2180      	movs	r1, #128	; 0x80
 8009efe:	0549      	lsls	r1, r1, #21
 8009f00:	430a      	orrs	r2, r1
 8009f02:	61ea      	str	r2, [r5, #28]
 8009f04:	69eb      	ldr	r3, [r5, #28]
 8009f06:	400b      	ands	r3, r1
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 8009f0c:	f007 f806 	bl	8010f1c <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009f10:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009f12:	23c0      	movs	r3, #192	; 0xc0
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009f18:	a802      	add	r0, sp, #8
 8009f1a:	f007 fc45 	bl	80117a8 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8009f1e:	f007 fc1b 	bl	8011758 <HAL_RCC_GetHCLKFreq>
 8009f22:	21fa      	movs	r1, #250	; 0xfa
 8009f24:	0089      	lsls	r1, r1, #2
 8009f26:	f7f6 f913 	bl	8000150 <__udivsi3>
 8009f2a:	f005 ff67 	bl	800fdfc <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8009f2e:	2004      	movs	r0, #4
 8009f30:	f005 ff80 	bl	800fe34 <HAL_SYSTICK_CLKSourceConfig>
	

	__SYSCFG_CLK_ENABLE();
 8009f34:	69ab      	ldr	r3, [r5, #24]
 8009f36:	4323      	orrs	r3, r4
 8009f38:	61ab      	str	r3, [r5, #24]
 8009f3a:	69ab      	ldr	r3, [r5, #24]
 8009f3c:	401c      	ands	r4, r3
 8009f3e:	9401      	str	r4, [sp, #4]
 8009f40:	9b01      	ldr	r3, [sp, #4]

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009f42:	2001      	movs	r0, #1
 8009f44:	2200      	movs	r2, #0
 8009f46:	2100      	movs	r1, #0
 8009f48:	4240      	negs	r0, r0
 8009f4a:	f005 ff13 	bl	800fd74 <HAL_NVIC_SetPriority>
	
}
 8009f4e:	b01b      	add	sp, #108	; 0x6c
 8009f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f52:	46c0      	nop			; (mov r8, r8)
 8009f54:	00040003 	.word	0x00040003
 8009f58:	40021000 	.word	0x40021000

08009f5c <SaveToRO>:

/* --- Save array topology and Command Snippets in Flash RO --- 
*/
uint8_t SaveToRO(void)
{
 8009f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f5e:	46c6      	mov	lr, r8
 8009f60:	b500      	push	{lr}
 8009f62:	b086      	sub	sp, #24
	BOS_Status result = BOS_OK; 
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 8009f64:	2215      	movs	r2, #21
 8009f66:	2100      	movs	r1, #0
 8009f68:	4668      	mov	r0, sp
 8009f6a:	f008 ff25 	bl	8012db8 <memset>
	
	HAL_FLASH_Unlock();
 8009f6e:	f006 fd67 	bl	8010a40 <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 8009f72:	4866      	ldr	r0, [pc, #408]	; (800a10c <SaveToRO+0x1b0>)
 8009f74:	f006 fe12 	bl	8010b9c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009f78:	4865      	ldr	r0, [pc, #404]	; (800a110 <SaveToRO+0x1b4>)
 8009f7a:	f006 fd7f 	bl	8010a7c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d10b      	bne.n	8009f9a <SaveToRO+0x3e>
		return pFlash.ErrorCode;
	} else {			
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8009f82:	4a64      	ldr	r2, [pc, #400]	; (800a114 <SaveToRO+0x1b8>)
 8009f84:	6913      	ldr	r3, [r2, #16]
 8009f86:	2102      	movs	r1, #2
 8009f88:	438b      	bics	r3, r1
 8009f8a:	6113      	str	r3, [r2, #16]
	}	
	
	/* Save number of modules and myID */
	if (myID)
 8009f8c:	4b62      	ldr	r3, [pc, #392]	; (800a118 <SaveToRO+0x1bc>)
 8009f8e:	781a      	ldrb	r2, [r3, #0]
 8009f90:	2a00      	cmp	r2, #0
 8009f92:	d109      	bne.n	8009fa8 <SaveToRO+0x4c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
					currentAdd += 2;
				}				
			}			
			// Copy the snippet commands buffer. Always an even number. Note the string termination char might be skipped
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 8009f94:	2400      	movs	r4, #0
 8009f96:	4e61      	ldr	r6, [pc, #388]	; (800a11c <SaveToRO+0x1c0>)
 8009f98:	e081      	b.n	800a09e <SaveToRO+0x142>
		return pFlash.ErrorCode;
 8009f9a:	4b61      	ldr	r3, [pc, #388]	; (800a120 <SaveToRO+0x1c4>)
 8009f9c:	69d8      	ldr	r0, [r3, #28]
 8009f9e:	b2c0      	uxtb	r0, r0
	}
	
	HAL_FLASH_Lock();
	
	return result;
}
 8009fa0:	b006      	add	sp, #24
 8009fa2:	bc04      	pop	{r2}
 8009fa4:	4690      	mov	r8, r2
 8009fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 8009fa8:	4b5e      	ldr	r3, [pc, #376]	; (800a124 <SaveToRO+0x1c8>)
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	021b      	lsls	r3, r3, #8
 8009fae:	18d2      	adds	r2, r2, r3
 8009fb0:	b292      	uxth	r2, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	4955      	ldr	r1, [pc, #340]	; (800a10c <SaveToRO+0x1b0>)
 8009fb6:	2001      	movs	r0, #1
 8009fb8:	f006 fd8e 	bl	8010ad8 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8009fbc:	4854      	ldr	r0, [pc, #336]	; (800a110 <SaveToRO+0x1b4>)
 8009fbe:	f006 fd5d 	bl	8010a7c <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d107      	bne.n	8009fd6 <SaveToRO+0x7a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009fc6:	4a53      	ldr	r2, [pc, #332]	; (800a114 <SaveToRO+0x1b8>)
 8009fc8:	6913      	ldr	r3, [r2, #16]
 8009fca:	2101      	movs	r1, #1
 8009fcc:	438b      	bics	r3, r1
 8009fce:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 8009fd0:	2601      	movs	r6, #1
	uint16_t add = 2, temp = 0;
 8009fd2:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 8009fd4:	e02e      	b.n	800a034 <SaveToRO+0xd8>
			return pFlash.ErrorCode;
 8009fd6:	4b52      	ldr	r3, [pc, #328]	; (800a120 <SaveToRO+0x1c4>)
 8009fd8:	69d8      	ldr	r0, [r3, #28]
 8009fda:	b2c0      	uxtb	r0, r0
 8009fdc:	e7e0      	b.n	8009fa0 <SaveToRO+0x44>
						return pFlash.ErrorCode;
 8009fde:	4b50      	ldr	r3, [pc, #320]	; (800a120 <SaveToRO+0x1c4>)
 8009fe0:	69d8      	ldr	r0, [r3, #28]
 8009fe2:	b2c0      	uxtb	r0, r0
 8009fe4:	e7dc      	b.n	8009fa0 <SaveToRO+0x44>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 8009fe6:	3401      	adds	r4, #1
 8009fe8:	b2e4      	uxtb	r4, r4
 8009fea:	2c0a      	cmp	r4, #10
 8009fec:	d820      	bhi.n	800a030 <SaveToRO+0xd4>
				if (array[i-1][0]) {
 8009fee:	1e72      	subs	r2, r6, #1
 8009ff0:	2316      	movs	r3, #22
 8009ff2:	4353      	muls	r3, r2
 8009ff4:	494c      	ldr	r1, [pc, #304]	; (800a128 <SaveToRO+0x1cc>)
 8009ff6:	5a5b      	ldrh	r3, [r3, r1]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d0f4      	beq.n	8009fe6 <SaveToRO+0x8a>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 8009ffc:	0093      	lsls	r3, r2, #2
 8009ffe:	189b      	adds	r3, r3, r2
 800a000:	005b      	lsls	r3, r3, #1
 800a002:	189b      	adds	r3, r3, r2
 800a004:	191b      	adds	r3, r3, r4
 800a006:	005b      	lsls	r3, r3, #1
 800a008:	5a5a      	ldrh	r2, [r3, r1]
 800a00a:	4b40      	ldr	r3, [pc, #256]	; (800a10c <SaveToRO+0x1b0>)
 800a00c:	18e9      	adds	r1, r5, r3
 800a00e:	2300      	movs	r3, #0
 800a010:	2001      	movs	r0, #1
 800a012:	f006 fd61 	bl	8010ad8 <HAL_FLASH_Program>
					add += 2;
 800a016:	3502      	adds	r5, #2
 800a018:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a01a:	483d      	ldr	r0, [pc, #244]	; (800a110 <SaveToRO+0x1b4>)
 800a01c:	f006 fd2e 	bl	8010a7c <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800a020:	2800      	cmp	r0, #0
 800a022:	d1dc      	bne.n	8009fde <SaveToRO+0x82>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a024:	4a3b      	ldr	r2, [pc, #236]	; (800a114 <SaveToRO+0x1b8>)
 800a026:	6913      	ldr	r3, [r2, #16]
 800a028:	2101      	movs	r1, #1
 800a02a:	438b      	bics	r3, r1
 800a02c:	6113      	str	r3, [r2, #16]
 800a02e:	e7da      	b.n	8009fe6 <SaveToRO+0x8a>
		for(uint8_t i=1 ; i<=N ; i++)
 800a030:	3601      	adds	r6, #1
 800a032:	b2f6      	uxtb	r6, r6
 800a034:	4b3b      	ldr	r3, [pc, #236]	; (800a124 <SaveToRO+0x1c8>)
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	42b3      	cmp	r3, r6
 800a03a:	d3ab      	bcc.n	8009f94 <SaveToRO+0x38>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800a03c:	2400      	movs	r4, #0
 800a03e:	e7d4      	b.n	8009fea <SaveToRO+0x8e>
					return pFlash.ErrorCode;
 800a040:	4b37      	ldr	r3, [pc, #220]	; (800a120 <SaveToRO+0x1c4>)
 800a042:	69d8      	ldr	r0, [r3, #28]
 800a044:	b2c0      	uxtb	r0, r0
 800a046:	e7ab      	b.n	8009fa0 <SaveToRO+0x44>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800a048:	2500      	movs	r5, #0
 800a04a:	00bb      	lsls	r3, r7, #2
 800a04c:	19db      	adds	r3, r3, r7
 800a04e:	009a      	lsls	r2, r3, #2
 800a050:	4b36      	ldr	r3, [pc, #216]	; (800a12c <SaveToRO+0x1d0>)
 800a052:	189b      	adds	r3, r3, r2
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	4698      	mov	r8, r3
 800a058:	0018      	movs	r0, r3
 800a05a:	f7f6 f85d 	bl	8000118 <strlen>
 800a05e:	3001      	adds	r0, #1
 800a060:	0840      	lsrs	r0, r0, #1
 800a062:	4285      	cmp	r5, r0
 800a064:	d219      	bcs.n	800a09a <SaveToRO+0x13e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800a066:	006b      	lsls	r3, r5, #1
 800a068:	4642      	mov	r2, r8
 800a06a:	5ad2      	ldrh	r2, [r2, r3]
 800a06c:	2300      	movs	r3, #0
 800a06e:	0031      	movs	r1, r6
 800a070:	2001      	movs	r0, #1
 800a072:	f006 fd31 	bl	8010ad8 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a076:	4826      	ldr	r0, [pc, #152]	; (800a110 <SaveToRO+0x1b4>)
 800a078:	f006 fd00 	bl	8010a7c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a07c:	2800      	cmp	r0, #0
 800a07e:	d108      	bne.n	800a092 <SaveToRO+0x136>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a080:	4a24      	ldr	r2, [pc, #144]	; (800a114 <SaveToRO+0x1b8>)
 800a082:	6913      	ldr	r3, [r2, #16]
 800a084:	2101      	movs	r1, #1
 800a086:	438b      	bics	r3, r1
 800a088:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800a08a:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800a08c:	3501      	adds	r5, #1
 800a08e:	b2ed      	uxtb	r5, r5
 800a090:	e7db      	b.n	800a04a <SaveToRO+0xee>
					return pFlash.ErrorCode;
 800a092:	4b23      	ldr	r3, [pc, #140]	; (800a120 <SaveToRO+0x1c4>)
 800a094:	69d8      	ldr	r0, [r3, #28]
 800a096:	b2c0      	uxtb	r0, r0
 800a098:	e782      	b.n	8009fa0 <SaveToRO+0x44>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800a09a:	3401      	adds	r4, #1
 800a09c:	b2e4      	uxtb	r4, r4
 800a09e:	4b24      	ldr	r3, [pc, #144]	; (800a130 <SaveToRO+0x1d4>)
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	42a3      	cmp	r3, r4
 800a0a4:	d92d      	bls.n	800a102 <SaveToRO+0x1a6>
		if (snippets[s].cond.conditionType) 
 800a0a6:	0027      	movs	r7, r4
 800a0a8:	00a3      	lsls	r3, r4, #2
 800a0aa:	191b      	adds	r3, r3, r4
 800a0ac:	009a      	lsls	r2, r3, #2
 800a0ae:	4b1f      	ldr	r3, [pc, #124]	; (800a12c <SaveToRO+0x1d0>)
 800a0b0:	5cd3      	ldrb	r3, [r2, r3]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d0f1      	beq.n	800a09a <SaveToRO+0x13e>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800a0b6:	23fe      	movs	r3, #254	; 0xfe
 800a0b8:	466a      	mov	r2, sp
 800a0ba:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800a0bc:	00a3      	lsls	r3, r4, #2
 800a0be:	191b      	adds	r3, r3, r4
 800a0c0:	0099      	lsls	r1, r3, #2
 800a0c2:	4b1a      	ldr	r3, [pc, #104]	; (800a12c <SaveToRO+0x1d0>)
 800a0c4:	18c9      	adds	r1, r1, r3
 800a0c6:	2214      	movs	r2, #20
 800a0c8:	466b      	mov	r3, sp
 800a0ca:	1c58      	adds	r0, r3, #1
 800a0cc:	f008 fe6b 	bl	8012da6 <memcpy>
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800a0d0:	2500      	movs	r5, #0
 800a0d2:	2d09      	cmp	r5, #9
 800a0d4:	d8b8      	bhi.n	800a048 <SaveToRO+0xec>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800a0d6:	006b      	lsls	r3, r5, #1
 800a0d8:	466a      	mov	r2, sp
 800a0da:	5ad2      	ldrh	r2, [r2, r3]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	0031      	movs	r1, r6
 800a0e0:	2001      	movs	r0, #1
 800a0e2:	f006 fcf9 	bl	8010ad8 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a0e6:	480a      	ldr	r0, [pc, #40]	; (800a110 <SaveToRO+0x1b4>)
 800a0e8:	f006 fcc8 	bl	8010a7c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d1a7      	bne.n	800a040 <SaveToRO+0xe4>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a0f0:	4a08      	ldr	r2, [pc, #32]	; (800a114 <SaveToRO+0x1b8>)
 800a0f2:	6913      	ldr	r3, [r2, #16]
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	438b      	bics	r3, r1
 800a0f8:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800a0fa:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800a0fc:	3501      	adds	r5, #1
 800a0fe:	b2ed      	uxtb	r5, r5
 800a100:	e7e7      	b.n	800a0d2 <SaveToRO+0x176>
	HAL_FLASH_Lock();
 800a102:	f006 fcb1 	bl	8010a68 <HAL_FLASH_Lock>
	return result;
 800a106:	2000      	movs	r0, #0
 800a108:	e74a      	b.n	8009fa0 <SaveToRO+0x44>
 800a10a:	46c0      	nop			; (mov r8, r8)
 800a10c:	0801d800 	.word	0x0801d800
 800a110:	0000c350 	.word	0x0000c350
 800a114:	40022000 	.word	0x40022000
 800a118:	20000a98 	.word	0x20000a98
 800a11c:	0801dc00 	.word	0x0801dc00
 800a120:	20006dd0 	.word	0x20006dd0
 800a124:	20000008 	.word	0x20000008
 800a128:	20000ed4 	.word	0x20000ed4
 800a12c:	20006864 	.word	0x20006864
 800a130:	200016d4 	.word	0x200016d4

0800a134 <ClearROtopology>:

/* --- Clear array topology in SRAM and Flash RO --- 
*/
uint8_t ClearROtopology(void)
{
 800a134:	b510      	push	{r4, lr}
	// Clear the array 
	memset(array, 0, sizeof(array));
 800a136:	228f      	movs	r2, #143	; 0x8f
 800a138:	0092      	lsls	r2, r2, #2
 800a13a:	2100      	movs	r1, #0
 800a13c:	4805      	ldr	r0, [pc, #20]	; (800a154 <ClearROtopology+0x20>)
 800a13e:	f008 fe3b 	bl	8012db8 <memset>
	N = 1; myID = 0;
 800a142:	4b05      	ldr	r3, [pc, #20]	; (800a158 <ClearROtopology+0x24>)
 800a144:	2201      	movs	r2, #1
 800a146:	701a      	strb	r2, [r3, #0]
 800a148:	4b04      	ldr	r3, [pc, #16]	; (800a15c <ClearROtopology+0x28>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	701a      	strb	r2, [r3, #0]
	
	return SaveToRO();
 800a14e:	f7ff ff05 	bl	8009f5c <SaveToRO>
}
 800a152:	bd10      	pop	{r4, pc}
 800a154:	20000ed4 	.word	0x20000ed4
 800a158:	20000008 	.word	0x20000008
 800a15c:	20000a98 	.word	0x20000a98

0800a160 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 800a160:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 800a162:	f003 fa7f 	bl	800d664 <GetUart>
 800a166:	0004      	movs	r4, r0

	huart->Init.BaudRate =57600;
 800a168:	23e1      	movs	r3, #225	; 0xe1
 800a16a:	021b      	lsls	r3, r3, #8
 800a16c:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800a16e:	2380      	movs	r3, #128	; 0x80
 800a170:	00db      	lsls	r3, r3, #3
 800a172:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a174:	2380      	movs	r3, #128	; 0x80
 800a176:	015b      	lsls	r3, r3, #5
 800a178:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800a17a:	f008 fa19 	bl	80125b0 <HAL_UART_Init>

	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800a17e:	6822      	ldr	r2, [r4, #0]
 800a180:	6813      	ldr	r3, [r2, #0]
 800a182:	2120      	movs	r1, #32
 800a184:	430b      	orrs	r3, r1
 800a186:	6013      	str	r3, [r2, #0]
}
 800a188:	bd10      	pop	{r4, pc}
	...

0800a18c <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800a18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a18e:	b087      	sub	sp, #28
 800a190:	0007      	movs	r7, r0
 800a192:	000e      	movs	r6, r1
 800a194:	0015      	movs	r5, r2
 800a196:	001c      	movs	r4, r3
	myOutport =FindRoute(myID,dst);
 800a198:	4b25      	ldr	r3, [pc, #148]	; (800a230 <remoteBootloaderUpdate+0xa4>)
 800a19a:	7818      	ldrb	r0, [r3, #0]
 800a19c:	f7f9 fc9c 	bl	8003ad8 <FindRoute>
 800a1a0:	9005      	str	r0, [sp, #20]
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a1a2:	2c00      	cmp	r4, #0
 800a1a4:	d003      	beq.n	800a1ae <remoteBootloaderUpdate+0x22>
 800a1a6:	4b22      	ldr	r3, [pc, #136]	; (800a230 <remoteBootloaderUpdate+0xa4>)
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	42b3      	cmp	r3, r6
 800a1ac:	d01a      	beq.n	800a1e4 <remoteBootloaderUpdate+0x58>
	if(src == myID){
 800a1ae:	4b20      	ldr	r3, [pc, #128]	; (800a230 <remoteBootloaderUpdate+0xa4>)
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	42bb      	cmp	r3, r7
 800a1b4:	d018      	beq.n	800a1e8 <remoteBootloaderUpdate+0x5c>
	SetupPortForRemoteBootloaderUpdate(inport);
 800a1b6:	0028      	movs	r0, r5
 800a1b8:	f7ff ffd2 	bl	800a160 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 800a1bc:	9c05      	ldr	r4, [sp, #20]
 800a1be:	0020      	movs	r0, r4
 800a1c0:	f7ff ffce 	bl	800a160 <SetupPortForRemoteBootloaderUpdate>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 800a1c4:	4b1a      	ldr	r3, [pc, #104]	; (800a230 <remoteBootloaderUpdate+0xa4>)
 800a1c6:	7819      	ldrb	r1, [r3, #0]
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	9303      	str	r3, [sp, #12]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	9302      	str	r3, [sp, #8]
 800a1d0:	9301      	str	r3, [sp, #4]
 800a1d2:	3303      	adds	r3, #3
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	000b      	movs	r3, r1
 800a1d8:	0022      	movs	r2, r4
 800a1da:	0028      	movs	r0, r5
 800a1dc:	f7fe f848 	bl	8008270 <StartScastDMAStream>
}
 800a1e0:	b007      	add	sp, #28
 800a1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		myOutport =outport;
 800a1e4:	9405      	str	r4, [sp, #20]
 800a1e6:	e7e2      	b.n	800a1ae <remoteBootloaderUpdate+0x22>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a1e8:	f003 fcfc 	bl	800dbe4 <FreeRTOS_CLIGetOutputBuffer>
 800a1ec:	0007      	movs	r7, r0
		if(outport == 0)		// This is a remote module update
 800a1ee:	2c00      	cmp	r4, #0
 800a1f0:	d116      	bne.n	800a220 <remoteBootloaderUpdate+0x94>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 800a1f2:	4b10      	ldr	r3, [pc, #64]	; (800a234 <remoteBootloaderUpdate+0xa8>)
 800a1f4:	6819      	ldr	r1, [r3, #0]
 800a1f6:	0032      	movs	r2, r6
 800a1f8:	f008 ffd8 	bl	80131ac <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 800a1fc:	4b0e      	ldr	r3, [pc, #56]	; (800a238 <remoteBootloaderUpdate+0xac>)
 800a1fe:	6819      	ldr	r1, [r3, #0]
 800a200:	0038      	movs	r0, r7
 800a202:	f008 fff3 	bl	80131ec <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 800a206:	0038      	movs	r0, r7
 800a208:	f7f5 ff86 	bl	8000118 <strlen>
 800a20c:	b282      	uxth	r2, r0
 800a20e:	2332      	movs	r3, #50	; 0x32
 800a210:	0039      	movs	r1, r7
 800a212:	0028      	movs	r0, r5
 800a214:	f003 fa72 	bl	800d6fc <writePxITMutex>
		Delay_ms(100);
 800a218:	2064      	movs	r0, #100	; 0x64
 800a21a:	f005 fabd 	bl	800f798 <HAL_Delay>
 800a21e:	e7ca      	b.n	800a1b6 <remoteBootloaderUpdate+0x2a>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 800a220:	4b06      	ldr	r3, [pc, #24]	; (800a23c <remoteBootloaderUpdate+0xb0>)
 800a222:	6819      	ldr	r1, [r3, #0]
 800a224:	0023      	movs	r3, r4
 800a226:	0032      	movs	r2, r6
 800a228:	f008 ffc0 	bl	80131ac <sprintf>
 800a22c:	e7e6      	b.n	800a1fc <remoteBootloaderUpdate+0x70>
 800a22e:	46c0      	nop			; (mov r8, r8)
 800a230:	20000a98 	.word	0x20000a98
 800a234:	2000005c 	.word	0x2000005c
 800a238:	20000054 	.word	0x20000054
 800a23c:	20000058 	.word	0x20000058

0800a240 <Module_Peripheral_Init>:

/*-----------------------------------------------------------*/
/* --- H1AR0 module initialization. 
*/
void Module_Peripheral_Init(void)
{
 800a240:	b510      	push	{r4, lr}
	/* Array ports */
  MX_USART2_UART_Init();
 800a242:	f003 f841 	bl	800d2c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800a246:	f003 f857 	bl	800d2f8 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800a24a:	f003 f86d 	bl	800d328 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800a24e:	f003 f883 	bl	800d358 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800a252:	f003 f899 	bl	800d388 <MX_USART6_UART_Init>
	
	/* USB port */
  MX_USART1_UART_Init();
 800a256:	f003 f81f 	bl	800d298 <MX_USART1_UART_Init>

  Status = HAL_UART_Receive_DMA(&huart1, bufferRx, 9);
 800a25a:	2209      	movs	r2, #9
 800a25c:	4903      	ldr	r1, [pc, #12]	; (800a26c <Module_Peripheral_Init+0x2c>)
 800a25e:	4804      	ldr	r0, [pc, #16]	; (800a270 <Module_Peripheral_Init+0x30>)
 800a260:	f007 fe82 	bl	8011f68 <HAL_UART_Receive_DMA>
 800a264:	4b03      	ldr	r3, [pc, #12]	; (800a274 <Module_Peripheral_Init+0x34>)
 800a266:	7018      	strb	r0, [r3, #0]
	
//	/* Bridge USB and P5 ports by default - only if PUSB is not bridged with any other port */
//	if (portStatus[PUSB] != STREAM)
//		Bridge(PUSB, P5);
	
}
 800a268:	bd10      	pop	{r4, pc}
 800a26a:	46c0      	nop			; (mov r8, r8)
 800a26c:	200069dc 	.word	0x200069dc
 800a270:	20006a58 	.word	0x20006a58
 800a274:	200069d8 	.word	0x200069d8

0800a278 <RegisterModuleCLICommands>:
/*-----------------------------------------------------------*/

/* --- Register this module CLI Commands 
*/
void RegisterModuleCLICommands(void)
{
 800a278:	b510      	push	{r4, lr}
	 FreeRTOS_CLIRegisterCommand(&CLI_Transmit_DataCommandDefinition);
 800a27a:	4802      	ldr	r0, [pc, #8]	; (800a284 <RegisterModuleCLICommands+0xc>)
 800a27c:	f003 fc32 	bl	800dae4 <FreeRTOS_CLIRegisterCommand>

}
 800a280:	bd10      	pop	{r4, pc}
 800a282:	46c0      	nop			; (mov r8, r8)
 800a284:	08017b88 	.word	0x08017b88

0800a288 <GetPort>:

/* --- Get the port for a given UART. 
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART2)
 800a288:	6803      	ldr	r3, [r0, #0]
 800a28a:	4a0d      	ldr	r2, [pc, #52]	; (800a2c0 <GetPort+0x38>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d00f      	beq.n	800a2b0 <GetPort+0x28>
			return P1;
	else if (huart->Instance == USART6)
 800a290:	4a0c      	ldr	r2, [pc, #48]	; (800a2c4 <GetPort+0x3c>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d00e      	beq.n	800a2b4 <GetPort+0x2c>
			return P2;
	else if (huart->Instance == USART5)
 800a296:	4a0c      	ldr	r2, [pc, #48]	; (800a2c8 <GetPort+0x40>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d00d      	beq.n	800a2b8 <GetPort+0x30>
			return P3;
	else if (huart->Instance == USART4)
 800a29c:	4a0b      	ldr	r2, [pc, #44]	; (800a2cc <GetPort+0x44>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d00c      	beq.n	800a2bc <GetPort+0x34>
			return P4;
	else if (huart->Instance == USART3)
 800a2a2:	4a0b      	ldr	r2, [pc, #44]	; (800a2d0 <GetPort+0x48>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d001      	beq.n	800a2ac <GetPort+0x24>
			return P5;
	else if (huart->Instance == USART4)
			return P6;
		
	return 0;
 800a2a8:	2000      	movs	r0, #0
}
 800a2aa:	4770      	bx	lr
			return P5;
 800a2ac:	2005      	movs	r0, #5
 800a2ae:	e7fc      	b.n	800a2aa <GetPort+0x22>
			return P1;
 800a2b0:	2001      	movs	r0, #1
 800a2b2:	e7fa      	b.n	800a2aa <GetPort+0x22>
			return P2;
 800a2b4:	2002      	movs	r0, #2
 800a2b6:	e7f8      	b.n	800a2aa <GetPort+0x22>
			return P3;
 800a2b8:	2003      	movs	r0, #3
 800a2ba:	e7f6      	b.n	800a2aa <GetPort+0x22>
			return P4;
 800a2bc:	2004      	movs	r0, #4
 800a2be:	e7f4      	b.n	800a2aa <GetPort+0x22>
 800a2c0:	40004400 	.word	0x40004400
 800a2c4:	40011400 	.word	0x40011400
 800a2c8:	40005000 	.word	0x40005000
 800a2cc:	40004c00 	.word	0x40004c00
 800a2d0:	40004800 	.word	0x40004800

0800a2d4 <TransmitData>:

/* -----------------------------------------------------------------------
	|																APIs	 																 	|
   ----------------------------------------------------------------------- 
*/
Module_Status TransmitData(uint8_t* data,uint16_t Size){
 800a2d4:	b510      	push	{r4, lr}
	Module_Status status=H1AR0_OK;

	if(data!=NULL && Size!=0)
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d00a      	beq.n	800a2f0 <TransmitData+0x1c>
 800a2da:	2900      	cmp	r1, #0
 800a2dc:	d00a      	beq.n	800a2f4 <TransmitData+0x20>
	{
		HAL_UART_Transmit(&huart1, data, Size, HAL_MAX_DELAY);
 800a2de:	2301      	movs	r3, #1
 800a2e0:	425b      	negs	r3, r3
 800a2e2:	000a      	movs	r2, r1
 800a2e4:	0001      	movs	r1, r0
 800a2e6:	4804      	ldr	r0, [pc, #16]	; (800a2f8 <TransmitData+0x24>)
 800a2e8:	f008 f8b8 	bl	801245c <HAL_UART_Transmit>
	Module_Status status=H1AR0_OK;
 800a2ec:	2000      	movs	r0, #0
		status=H1AR0_ERROR;

	}

	return status;
}
 800a2ee:	bd10      	pop	{r4, pc}
		status=H1AR0_ERROR;
 800a2f0:	20ff      	movs	r0, #255	; 0xff
 800a2f2:	e7fc      	b.n	800a2ee <TransmitData+0x1a>
 800a2f4:	20ff      	movs	r0, #255	; 0xff
 800a2f6:	e7fa      	b.n	800a2ee <TransmitData+0x1a>
 800a2f8:	20006a58 	.word	0x20006a58

0800a2fc <Module_MessagingTask>:
{
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	ab04      	add	r3, sp, #16
 800a300:	781a      	ldrb	r2, [r3, #0]
	switch (code)
 800a302:	4b0a      	ldr	r3, [pc, #40]	; (800a32c <Module_MessagingTask+0x30>)
 800a304:	4298      	cmp	r0, r3
 800a306:	d001      	beq.n	800a30c <Module_MessagingTask+0x10>
			result = H1AR0_ERR_UnknownMessage;
 800a308:	2001      	movs	r0, #1
}
 800a30a:	bd70      	pop	{r4, r5, r6, pc}
		Size=(uint16_t)cMessage[port - 1][shift];
 800a30c:	1e4b      	subs	r3, r1, #1
 800a30e:	4d08      	ldr	r5, [pc, #32]	; (800a330 <Module_MessagingTask+0x34>)
 800a310:	00dc      	lsls	r4, r3, #3
 800a312:	1ae0      	subs	r0, r4, r3
 800a314:	00c1      	lsls	r1, r0, #3
 800a316:	1869      	adds	r1, r5, r1
 800a318:	5c89      	ldrb	r1, [r1, r2]
		TransmitData(&cMessage[port - 1][1+shift],Size);
 800a31a:	1c50      	adds	r0, r2, #1
 800a31c:	1ae3      	subs	r3, r4, r3
 800a31e:	00da      	lsls	r2, r3, #3
 800a320:	1810      	adds	r0, r2, r0
 800a322:	1940      	adds	r0, r0, r5
 800a324:	f7ff ffd6 	bl	800a2d4 <TransmitData>
	Module_Status result = H1AR0_OK;
 800a328:	2000      	movs	r0, #0
		break;
 800a32a:	e7ee      	b.n	800a30a <Module_MessagingTask+0xe>
 800a32c:	00000514 	.word	0x00000514
 800a330:	20000c90 	.word	0x20000c90

0800a334 <CLI_Transmit_DataCommand>:

/* -----------------------------------------------------------------------
	|															Commands																 	|
   ----------------------------------------------------------------------- 
*/
portBASE_TYPE CLI_Transmit_DataCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 800a334:	b510      	push	{r4, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	0004      	movs	r4, r0
 800a33a:	0010      	movs	r0, r2
	Module_Status status = H1AR0_OK;;



	static int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 800a33c:	2300      	movs	r3, #0
 800a33e:	9301      	str	r3, [sp, #4]


	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameterStringLength1 );
 800a340:	aa01      	add	r2, sp, #4
 800a342:	2101      	movs	r1, #1
 800a344:	f003 fc52 	bl	800dbec <FreeRTOS_CLIGetParameter>
 800a348:	4b0c      	ldr	r3, [pc, #48]	; (800a37c <CLI_Transmit_DataCommand+0x48>)
 800a34a:	6018      	str	r0, [r3, #0]


	status=TransmitData(pcParameterString1, xParameterStringLength1);
 800a34c:	9b01      	ldr	r3, [sp, #4]
 800a34e:	b299      	uxth	r1, r3
 800a350:	f7ff ffc0 	bl	800a2d4 <TransmitData>
	if(status == H1AR0_OK)
 800a354:	2800      	cmp	r0, #0
 800a356:	d004      	beq.n	800a362 <CLI_Transmit_DataCommand+0x2e>
	{
		sprintf((char* )pcWriteBuffer,(char* )pcOKMessage,pcParameterString1);

	}

	else if(status == H1AR0_ERROR)
 800a358:	28ff      	cmp	r0, #255	; 0xff
 800a35a:	d009      	beq.n	800a370 <CLI_Transmit_DataCommand+0x3c>
		strcpy((char* )pcWriteBuffer,(char* )pcWrongParamsMessage);



	return pdFALSE;
}
 800a35c:	2000      	movs	r0, #0
 800a35e:	b002      	add	sp, #8
 800a360:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcOKMessage,pcParameterString1);
 800a362:	4b06      	ldr	r3, [pc, #24]	; (800a37c <CLI_Transmit_DataCommand+0x48>)
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	4906      	ldr	r1, [pc, #24]	; (800a380 <CLI_Transmit_DataCommand+0x4c>)
 800a368:	0020      	movs	r0, r4
 800a36a:	f008 ff1f 	bl	80131ac <sprintf>
 800a36e:	e7f5      	b.n	800a35c <CLI_Transmit_DataCommand+0x28>
		strcpy((char* )pcWriteBuffer,(char* )pcWrongParamsMessage);
 800a370:	2210      	movs	r2, #16
 800a372:	4904      	ldr	r1, [pc, #16]	; (800a384 <CLI_Transmit_DataCommand+0x50>)
 800a374:	0020      	movs	r0, r4
 800a376:	f008 fd16 	bl	8012da6 <memcpy>
 800a37a:	e7ef      	b.n	800a35c <CLI_Transmit_DataCommand+0x28>
 800a37c:	20001fac 	.word	0x20001fac
 800a380:	0801a2d8 	.word	0x0801a2d8
 800a384:	0801a300 	.word	0x0801a300

0800a388 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800a388:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800a38a:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a38c:	2300      	movs	r3, #0
 800a38e:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a390:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a392:	2280      	movs	r2, #128	; 0x80
 800a394:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a396:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a398:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a39a:	3320      	adds	r3, #32
 800a39c:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a39e:	2380      	movs	r3, #128	; 0x80
 800a3a0:	019b      	lsls	r3, r3, #6
 800a3a2:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800a3a4:	f005 fe84 	bl	80100b0 <HAL_DMA_Init>
}
 800a3a8:	bd10      	pop	{r4, pc}

0800a3aa <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800a3aa:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800a3ac:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a3ae:	2310      	movs	r3, #16
 800a3b0:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a3b6:	2280      	movs	r2, #128	; 0x80
 800a3b8:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a3ba:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a3bc:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800a3be:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a3c0:	2380      	movs	r3, #128	; 0x80
 800a3c2:	019b      	lsls	r3, r3, #6
 800a3c4:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800a3c6:	f005 fe73 	bl	80100b0 <HAL_DMA_Init>
}
 800a3ca:	bd10      	pop	{r4, pc}

0800a3cc <DMA_Init>:
{
 800a3cc:	b510      	push	{r4, lr}
 800a3ce:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800a3d0:	4b1d      	ldr	r3, [pc, #116]	; (800a448 <DMA_Init+0x7c>)
 800a3d2:	6959      	ldr	r1, [r3, #20]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	4311      	orrs	r1, r2
 800a3d8:	6159      	str	r1, [r3, #20]
 800a3da:	6959      	ldr	r1, [r3, #20]
 800a3dc:	400a      	ands	r2, r1
 800a3de:	9200      	str	r2, [sp, #0]
 800a3e0:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800a3e2:	6959      	ldr	r1, [r3, #20]
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	4311      	orrs	r1, r2
 800a3e8:	6159      	str	r1, [r3, #20]
 800a3ea:	695b      	ldr	r3, [r3, #20]
 800a3ec:	401a      	ands	r2, r3
 800a3ee:	9201      	str	r2, [sp, #4]
 800a3f0:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800a3f2:	4c16      	ldr	r4, [pc, #88]	; (800a44c <DMA_Init+0x80>)
 800a3f4:	4916      	ldr	r1, [pc, #88]	; (800a450 <DMA_Init+0x84>)
 800a3f6:	0020      	movs	r0, r4
 800a3f8:	f7ff ffc6 	bl	800a388 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800a3fc:	0020      	movs	r0, r4
 800a3fe:	3038      	adds	r0, #56	; 0x38
 800a400:	4914      	ldr	r1, [pc, #80]	; (800a454 <DMA_Init+0x88>)
 800a402:	f7ff ffc1 	bl	800a388 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800a406:	0020      	movs	r0, r4
 800a408:	3070      	adds	r0, #112	; 0x70
 800a40a:	4913      	ldr	r1, [pc, #76]	; (800a458 <DMA_Init+0x8c>)
 800a40c:	f7ff ffbc 	bl	800a388 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800a410:	0020      	movs	r0, r4
 800a412:	30a8      	adds	r0, #168	; 0xa8
 800a414:	4911      	ldr	r1, [pc, #68]	; (800a45c <DMA_Init+0x90>)
 800a416:	f7ff ffb7 	bl	800a388 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800a41a:	0020      	movs	r0, r4
 800a41c:	30e0      	adds	r0, #224	; 0xe0
 800a41e:	4910      	ldr	r1, [pc, #64]	; (800a460 <DMA_Init+0x94>)
 800a420:	f7ff ffb2 	bl	800a388 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800a424:	4c0f      	ldr	r4, [pc, #60]	; (800a464 <DMA_Init+0x98>)
 800a426:	4910      	ldr	r1, [pc, #64]	; (800a468 <DMA_Init+0x9c>)
 800a428:	0020      	movs	r0, r4
 800a42a:	f7ff ffbe 	bl	800a3aa <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800a42e:	0020      	movs	r0, r4
 800a430:	3038      	adds	r0, #56	; 0x38
 800a432:	490e      	ldr	r1, [pc, #56]	; (800a46c <DMA_Init+0xa0>)
 800a434:	f7ff ffb9 	bl	800a3aa <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800a438:	0020      	movs	r0, r4
 800a43a:	3070      	adds	r0, #112	; 0x70
 800a43c:	490c      	ldr	r1, [pc, #48]	; (800a470 <DMA_Init+0xa4>)
 800a43e:	f7ff ffb4 	bl	800a3aa <DMA_MSG_TX_CH_Init>
}
 800a442:	b002      	add	sp, #8
 800a444:	bd10      	pop	{r4, pc}
 800a446:	46c0      	nop			; (mov r8, r8)
 800a448:	40021000 	.word	0x40021000
 800a44c:	20002250 	.word	0x20002250
 800a450:	40020008 	.word	0x40020008
 800a454:	40020030 	.word	0x40020030
 800a458:	40020058 	.word	0x40020058
 800a45c:	4002006c 	.word	0x4002006c
 800a460:	4002041c 	.word	0x4002041c
 800a464:	200021a8 	.word	0x200021a8
 800a468:	4002001c 	.word	0x4002001c
 800a46c:	40020044 	.word	0x40020044
 800a470:	40020080 	.word	0x40020080

0800a474 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800a474:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800a476:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a478:	2300      	movs	r3, #0
 800a47a:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a47c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800a47e:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a480:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a482:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a484:	3320      	adds	r3, #32
 800a486:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800a488:	2380      	movs	r3, #128	; 0x80
 800a48a:	015b      	lsls	r3, r3, #5
 800a48c:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800a48e:	f005 fe0f 	bl	80100b0 <HAL_DMA_Init>
}
 800a492:	bd10      	pop	{r4, pc}

0800a494 <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 800a494:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 800a496:	1e44      	subs	r4, r0, #1
 800a498:	00e5      	lsls	r5, r4, #3
 800a49a:	1b2b      	subs	r3, r5, r4
 800a49c:	00d8      	lsls	r0, r3, #3
 800a49e:	4e07      	ldr	r6, [pc, #28]	; (800a4bc <StopStreamDMA+0x28>)
 800a4a0:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800a4a2:	f005 fe58 	bl	8010156 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800a4a6:	1b2d      	subs	r5, r5, r4
 800a4a8:	00eb      	lsls	r3, r5, #3
 800a4aa:	599a      	ldr	r2, [r3, r6]
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800a4b0:	00a4      	lsls	r4, r4, #2
 800a4b2:	4a03      	ldr	r2, [pc, #12]	; (800a4c0 <StopStreamDMA+0x2c>)
 800a4b4:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 800a4b6:	4a03      	ldr	r2, [pc, #12]	; (800a4c4 <StopStreamDMA+0x30>)
 800a4b8:	50a3      	str	r3, [r4, r2]

}
 800a4ba:	bd70      	pop	{r4, r5, r6, pc}
 800a4bc:	20002058 	.word	0x20002058
 800a4c0:	20001864 	.word	0x20001864
 800a4c4:	20001878 	.word	0x20001878

0800a4c8 <StopMsgDMA>:


/* --- Stop a messaging DMA ---
 */
void StopMsgDMA(uint8_t port){
 800a4c8:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800a4ca:	1e45      	subs	r5, r0, #1
 800a4cc:	00ec      	lsls	r4, r5, #3
 800a4ce:	1b63      	subs	r3, r4, r5
 800a4d0:	00d8      	lsls	r0, r3, #3
 800a4d2:	4e05      	ldr	r6, [pc, #20]	; (800a4e8 <StopMsgDMA+0x20>)
 800a4d4:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800a4d6:	f005 fe3e 	bl	8010156 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800a4da:	1b64      	subs	r4, r4, r5
 800a4dc:	00e3      	lsls	r3, r4, #3
 800a4de:	599b      	ldr	r3, [r3, r6]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	605a      	str	r2, [r3, #4]
}
 800a4e4:	bd70      	pop	{r4, r5, r6, pc}
 800a4e6:	46c0      	nop			; (mov r8, r8)
 800a4e8:	20002250 	.word	0x20002250

0800a4ec <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 800a4ec:	b510      	push	{r4, lr}
 800a4ee:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?

	// Stop the messaging DMA
	StopMsgDMA(port);
 800a4f0:	f7ff ffea 	bl	800a4c8 <StopMsgDMA>

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
 800a4f4:	3c01      	subs	r4, #1
 800a4f6:	00e3      	lsls	r3, r4, #3
 800a4f8:	1b19      	subs	r1, r3, r4
 800a4fa:	00ca      	lsls	r2, r1, #3
 800a4fc:	4903      	ldr	r1, [pc, #12]	; (800a50c <SwitchMsgDMAToStream+0x20>)
 800a4fe:	5851      	ldr	r1, [r2, r1]
 800a500:	4b03      	ldr	r3, [pc, #12]	; (800a510 <SwitchMsgDMAToStream+0x24>)
 800a502:	18d0      	adds	r0, r2, r3
 800a504:	f7ff ffb6 	bl	800a474 <DMA_STREAM_CH_Init>
}
 800a508:	bd10      	pop	{r4, pc}
 800a50a:	46c0      	nop			; (mov r8, r8)
 800a50c:	20002250 	.word	0x20002250
 800a510:	20002058 	.word	0x20002058

0800a514 <SetupDMAInterrupts>:
}

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800a514:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800a516:	6803      	ldr	r3, [r0, #0]
 800a518:	4a20      	ldr	r2, [pc, #128]	; (800a59c <SetupDMAInterrupts+0x88>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d020      	beq.n	800a560 <SetupDMAInterrupts+0x4c>
 800a51e:	d827      	bhi.n	800a570 <SetupDMAInterrupts+0x5c>
 800a520:	4a1f      	ldr	r2, [pc, #124]	; (800a5a0 <SetupDMAInterrupts+0x8c>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d00e      	beq.n	800a544 <SetupDMAInterrupts+0x30>
 800a526:	d815      	bhi.n	800a554 <SetupDMAInterrupts+0x40>
 800a528:	4a1e      	ldr	r2, [pc, #120]	; (800a5a4 <SetupDMAInterrupts+0x90>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d107      	bne.n	800a53e <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800a52e:	2200      	movs	r2, #0
 800a530:	2009      	movs	r0, #9
 800a532:	f005 fc1f 	bl	800fd74 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800a536:	2009      	movs	r0, #9
 800a538:	f005 fc4c 	bl	800fdd4 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800a53c:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800a53e:	4a1a      	ldr	r2, [pc, #104]	; (800a5a8 <SetupDMAInterrupts+0x94>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d1fb      	bne.n	800a53c <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800a544:	2200      	movs	r2, #0
 800a546:	200a      	movs	r0, #10
 800a548:	f005 fc14 	bl	800fd74 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800a54c:	200a      	movs	r0, #10
 800a54e:	f005 fc41 	bl	800fdd4 <HAL_NVIC_EnableIRQ>
			break;
 800a552:	e7f3      	b.n	800a53c <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800a554:	4a15      	ldr	r2, [pc, #84]	; (800a5ac <SetupDMAInterrupts+0x98>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d002      	beq.n	800a560 <SetupDMAInterrupts+0x4c>
 800a55a:	4a15      	ldr	r2, [pc, #84]	; (800a5b0 <SetupDMAInterrupts+0x9c>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d1ed      	bne.n	800a53c <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800a560:	2200      	movs	r2, #0
 800a562:	200b      	movs	r0, #11
 800a564:	f005 fc06 	bl	800fd74 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800a568:	200b      	movs	r0, #11
 800a56a:	f005 fc33 	bl	800fdd4 <HAL_NVIC_EnableIRQ>
}
 800a56e:	e7e5      	b.n	800a53c <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800a570:	4a10      	ldr	r2, [pc, #64]	; (800a5b4 <SetupDMAInterrupts+0xa0>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d0e6      	beq.n	800a544 <SetupDMAInterrupts+0x30>
 800a576:	d909      	bls.n	800a58c <SetupDMAInterrupts+0x78>
 800a578:	4a0f      	ldr	r2, [pc, #60]	; (800a5b8 <SetupDMAInterrupts+0xa4>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d0f0      	beq.n	800a560 <SetupDMAInterrupts+0x4c>
 800a57e:	4a0f      	ldr	r2, [pc, #60]	; (800a5bc <SetupDMAInterrupts+0xa8>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d0ed      	beq.n	800a560 <SetupDMAInterrupts+0x4c>
 800a584:	4a0e      	ldr	r2, [pc, #56]	; (800a5c0 <SetupDMAInterrupts+0xac>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d1d8      	bne.n	800a53c <SetupDMAInterrupts+0x28>
 800a58a:	e7e9      	b.n	800a560 <SetupDMAInterrupts+0x4c>
 800a58c:	4a0d      	ldr	r2, [pc, #52]	; (800a5c4 <SetupDMAInterrupts+0xb0>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d0e6      	beq.n	800a560 <SetupDMAInterrupts+0x4c>
 800a592:	4a0d      	ldr	r2, [pc, #52]	; (800a5c8 <SetupDMAInterrupts+0xb4>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d0d5      	beq.n	800a544 <SetupDMAInterrupts+0x30>
 800a598:	e7d0      	b.n	800a53c <SetupDMAInterrupts+0x28>
 800a59a:	46c0      	nop			; (mov r8, r8)
 800a59c:	4002006c 	.word	0x4002006c
 800a5a0:	40020030 	.word	0x40020030
 800a5a4:	40020008 	.word	0x40020008
 800a5a8:	4002001c 	.word	0x4002001c
 800a5ac:	40020044 	.word	0x40020044
 800a5b0:	40020058 	.word	0x40020058
 800a5b4:	4002041c 	.word	0x4002041c
 800a5b8:	40020444 	.word	0x40020444
 800a5bc:	40020458 	.word	0x40020458
 800a5c0:	40020430 	.word	0x40020430
 800a5c4:	40020080 	.word	0x40020080
 800a5c8:	40020408 	.word	0x40020408

0800a5cc <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800a5cc:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800a5ce:	6803      	ldr	r3, [r0, #0]
 800a5d0:	4a1a      	ldr	r2, [pc, #104]	; (800a63c <UnSetupDMAInterrupts+0x70>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d018      	beq.n	800a608 <UnSetupDMAInterrupts+0x3c>
 800a5d6:	d81b      	bhi.n	800a610 <UnSetupDMAInterrupts+0x44>
 800a5d8:	4a19      	ldr	r2, [pc, #100]	; (800a640 <UnSetupDMAInterrupts+0x74>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d00a      	beq.n	800a5f4 <UnSetupDMAInterrupts+0x28>
 800a5de:	d80d      	bhi.n	800a5fc <UnSetupDMAInterrupts+0x30>
 800a5e0:	4a18      	ldr	r2, [pc, #96]	; (800a644 <UnSetupDMAInterrupts+0x78>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d103      	bne.n	800a5ee <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800a5e6:	2009      	movs	r0, #9
 800a5e8:	f005 fbfe 	bl	800fde8 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800a5ec:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800a5ee:	4a16      	ldr	r2, [pc, #88]	; (800a648 <UnSetupDMAInterrupts+0x7c>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d1fb      	bne.n	800a5ec <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800a5f4:	200a      	movs	r0, #10
 800a5f6:	f005 fbf7 	bl	800fde8 <HAL_NVIC_DisableIRQ>
			break;
 800a5fa:	e7f7      	b.n	800a5ec <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800a5fc:	4a13      	ldr	r2, [pc, #76]	; (800a64c <UnSetupDMAInterrupts+0x80>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d002      	beq.n	800a608 <UnSetupDMAInterrupts+0x3c>
 800a602:	4a13      	ldr	r2, [pc, #76]	; (800a650 <UnSetupDMAInterrupts+0x84>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d1f1      	bne.n	800a5ec <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800a608:	200b      	movs	r0, #11
 800a60a:	f005 fbed 	bl	800fde8 <HAL_NVIC_DisableIRQ>
}
 800a60e:	e7ed      	b.n	800a5ec <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800a610:	4a10      	ldr	r2, [pc, #64]	; (800a654 <UnSetupDMAInterrupts+0x88>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d0ee      	beq.n	800a5f4 <UnSetupDMAInterrupts+0x28>
 800a616:	d909      	bls.n	800a62c <UnSetupDMAInterrupts+0x60>
 800a618:	4a0f      	ldr	r2, [pc, #60]	; (800a658 <UnSetupDMAInterrupts+0x8c>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d0f4      	beq.n	800a608 <UnSetupDMAInterrupts+0x3c>
 800a61e:	4a0f      	ldr	r2, [pc, #60]	; (800a65c <UnSetupDMAInterrupts+0x90>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d0f1      	beq.n	800a608 <UnSetupDMAInterrupts+0x3c>
 800a624:	4a0e      	ldr	r2, [pc, #56]	; (800a660 <UnSetupDMAInterrupts+0x94>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d1e0      	bne.n	800a5ec <UnSetupDMAInterrupts+0x20>
 800a62a:	e7ed      	b.n	800a608 <UnSetupDMAInterrupts+0x3c>
 800a62c:	4a0d      	ldr	r2, [pc, #52]	; (800a664 <UnSetupDMAInterrupts+0x98>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d0ea      	beq.n	800a608 <UnSetupDMAInterrupts+0x3c>
 800a632:	4a0d      	ldr	r2, [pc, #52]	; (800a668 <UnSetupDMAInterrupts+0x9c>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d0dd      	beq.n	800a5f4 <UnSetupDMAInterrupts+0x28>
 800a638:	e7d8      	b.n	800a5ec <UnSetupDMAInterrupts+0x20>
 800a63a:	46c0      	nop			; (mov r8, r8)
 800a63c:	4002006c 	.word	0x4002006c
 800a640:	40020030 	.word	0x40020030
 800a644:	40020008 	.word	0x40020008
 800a648:	4002001c 	.word	0x4002001c
 800a64c:	40020044 	.word	0x40020044
 800a650:	40020058 	.word	0x40020058
 800a654:	4002041c 	.word	0x4002041c
 800a658:	40020444 	.word	0x40020444
 800a65c:	40020458 	.word	0x40020458
 800a660:	40020430 	.word	0x40020430
 800a664:	40020080 	.word	0x40020080
 800a668:	40020408 	.word	0x40020408

0800a66c <DMA_MSG_TX_UnSetup>:
{	
 800a66c:	b510      	push	{r4, lr}
 800a66e:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800a670:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800a672:	f7ff ffab 	bl	800a5cc <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800a676:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a678:	2300      	movs	r3, #0
 800a67a:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800a67c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800a67e:	bd10      	pop	{r4, pc}

0800a680 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800a680:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a682:	6803      	ldr	r3, [r0, #0]
 800a684:	4acc      	ldr	r2, [pc, #816]	; (800a9b8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d100      	bne.n	800a68c <RemapAndLinkDMAtoUARTRx+0xc>
 800a68a:	e0ca      	b.n	800a822 <RemapAndLinkDMAtoUARTRx+0x1a2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800a68c:	4aca      	ldr	r2, [pc, #808]	; (800a9b8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d100      	bne.n	800a694 <RemapAndLinkDMAtoUARTRx+0x14>
 800a692:	e0d8      	b.n	800a846 <RemapAndLinkDMAtoUARTRx+0x1c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800a694:	4ac8      	ldr	r2, [pc, #800]	; (800a9b8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d100      	bne.n	800a69c <RemapAndLinkDMAtoUARTRx+0x1c>
 800a69a:	e0e5      	b.n	800a868 <RemapAndLinkDMAtoUARTRx+0x1e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800a69c:	4ac6      	ldr	r2, [pc, #792]	; (800a9b8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d100      	bne.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0x24>
 800a6a2:	e0f2      	b.n	800a88a <RemapAndLinkDMAtoUARTRx+0x20a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800a6a4:	4ac4      	ldr	r2, [pc, #784]	; (800a9b8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d100      	bne.n	800a6ac <RemapAndLinkDMAtoUARTRx+0x2c>
 800a6aa:	e0ff      	b.n	800a8ac <RemapAndLinkDMAtoUARTRx+0x22c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800a6ac:	4ac2      	ldr	r2, [pc, #776]	; (800a9b8 <RemapAndLinkDMAtoUARTRx+0x338>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d100      	bne.n	800a6b4 <RemapAndLinkDMAtoUARTRx+0x34>
 800a6b2:	e10b      	b.n	800a8cc <RemapAndLinkDMAtoUARTRx+0x24c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800a6b4:	4ac1      	ldr	r2, [pc, #772]	; (800a9bc <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d100      	bne.n	800a6bc <RemapAndLinkDMAtoUARTRx+0x3c>
 800a6ba:	e118      	b.n	800a8ee <RemapAndLinkDMAtoUARTRx+0x26e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800a6bc:	4abf      	ldr	r2, [pc, #764]	; (800a9bc <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d100      	bne.n	800a6c4 <RemapAndLinkDMAtoUARTRx+0x44>
 800a6c2:	e124      	b.n	800a90e <RemapAndLinkDMAtoUARTRx+0x28e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800a6c4:	4abd      	ldr	r2, [pc, #756]	; (800a9bc <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d100      	bne.n	800a6cc <RemapAndLinkDMAtoUARTRx+0x4c>
 800a6ca:	e131      	b.n	800a930 <RemapAndLinkDMAtoUARTRx+0x2b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800a6cc:	4abb      	ldr	r2, [pc, #748]	; (800a9bc <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d100      	bne.n	800a6d4 <RemapAndLinkDMAtoUARTRx+0x54>
 800a6d2:	e13e      	b.n	800a952 <RemapAndLinkDMAtoUARTRx+0x2d2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800a6d4:	4ab9      	ldr	r2, [pc, #740]	; (800a9bc <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d100      	bne.n	800a6dc <RemapAndLinkDMAtoUARTRx+0x5c>
 800a6da:	e14b      	b.n	800a974 <RemapAndLinkDMAtoUARTRx+0x2f4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800a6dc:	4ab7      	ldr	r2, [pc, #732]	; (800a9bc <RemapAndLinkDMAtoUARTRx+0x33c>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d100      	bne.n	800a6e4 <RemapAndLinkDMAtoUARTRx+0x64>
 800a6e2:	e157      	b.n	800a994 <RemapAndLinkDMAtoUARTRx+0x314>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800a6e4:	4ab6      	ldr	r2, [pc, #728]	; (800a9c0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d100      	bne.n	800a6ec <RemapAndLinkDMAtoUARTRx+0x6c>
 800a6ea:	e18b      	b.n	800aa04 <RemapAndLinkDMAtoUARTRx+0x384>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800a6ec:	4ab4      	ldr	r2, [pc, #720]	; (800a9c0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d100      	bne.n	800a6f4 <RemapAndLinkDMAtoUARTRx+0x74>
 800a6f2:	e197      	b.n	800aa24 <RemapAndLinkDMAtoUARTRx+0x3a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800a6f4:	4ab2      	ldr	r2, [pc, #712]	; (800a9c0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d100      	bne.n	800a6fc <RemapAndLinkDMAtoUARTRx+0x7c>
 800a6fa:	e1a4      	b.n	800aa46 <RemapAndLinkDMAtoUARTRx+0x3c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800a6fc:	4ab0      	ldr	r2, [pc, #704]	; (800a9c0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d100      	bne.n	800a704 <RemapAndLinkDMAtoUARTRx+0x84>
 800a702:	e1b1      	b.n	800aa68 <RemapAndLinkDMAtoUARTRx+0x3e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800a704:	4aae      	ldr	r2, [pc, #696]	; (800a9c0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d100      	bne.n	800a70c <RemapAndLinkDMAtoUARTRx+0x8c>
 800a70a:	e1be      	b.n	800aa8a <RemapAndLinkDMAtoUARTRx+0x40a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800a70c:	4aac      	ldr	r2, [pc, #688]	; (800a9c0 <RemapAndLinkDMAtoUARTRx+0x340>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d100      	bne.n	800a714 <RemapAndLinkDMAtoUARTRx+0x94>
 800a712:	e1ca      	b.n	800aaaa <RemapAndLinkDMAtoUARTRx+0x42a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800a714:	4aab      	ldr	r2, [pc, #684]	; (800a9c4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d100      	bne.n	800a71c <RemapAndLinkDMAtoUARTRx+0x9c>
 800a71a:	e1d7      	b.n	800aacc <RemapAndLinkDMAtoUARTRx+0x44c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800a71c:	4aa9      	ldr	r2, [pc, #676]	; (800a9c4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d100      	bne.n	800a724 <RemapAndLinkDMAtoUARTRx+0xa4>
 800a722:	e1e3      	b.n	800aaec <RemapAndLinkDMAtoUARTRx+0x46c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800a724:	4aa7      	ldr	r2, [pc, #668]	; (800a9c4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d100      	bne.n	800a72c <RemapAndLinkDMAtoUARTRx+0xac>
 800a72a:	e1f0      	b.n	800ab0e <RemapAndLinkDMAtoUARTRx+0x48e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800a72c:	4aa5      	ldr	r2, [pc, #660]	; (800a9c4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d100      	bne.n	800a734 <RemapAndLinkDMAtoUARTRx+0xb4>
 800a732:	e1fd      	b.n	800ab30 <RemapAndLinkDMAtoUARTRx+0x4b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800a734:	4aa3      	ldr	r2, [pc, #652]	; (800a9c4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d100      	bne.n	800a73c <RemapAndLinkDMAtoUARTRx+0xbc>
 800a73a:	e20a      	b.n	800ab52 <RemapAndLinkDMAtoUARTRx+0x4d2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800a73c:	4aa1      	ldr	r2, [pc, #644]	; (800a9c4 <RemapAndLinkDMAtoUARTRx+0x344>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d100      	bne.n	800a744 <RemapAndLinkDMAtoUARTRx+0xc4>
 800a742:	e216      	b.n	800ab72 <RemapAndLinkDMAtoUARTRx+0x4f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800a744:	4aa0      	ldr	r2, [pc, #640]	; (800a9c8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d100      	bne.n	800a74c <RemapAndLinkDMAtoUARTRx+0xcc>
 800a74a:	e223      	b.n	800ab94 <RemapAndLinkDMAtoUARTRx+0x514>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800a74c:	4a9e      	ldr	r2, [pc, #632]	; (800a9c8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d100      	bne.n	800a754 <RemapAndLinkDMAtoUARTRx+0xd4>
 800a752:	e22f      	b.n	800abb4 <RemapAndLinkDMAtoUARTRx+0x534>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800a754:	4a9c      	ldr	r2, [pc, #624]	; (800a9c8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d100      	bne.n	800a75c <RemapAndLinkDMAtoUARTRx+0xdc>
 800a75a:	e23c      	b.n	800abd6 <RemapAndLinkDMAtoUARTRx+0x556>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800a75c:	4a9a      	ldr	r2, [pc, #616]	; (800a9c8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d100      	bne.n	800a764 <RemapAndLinkDMAtoUARTRx+0xe4>
 800a762:	e249      	b.n	800abf8 <RemapAndLinkDMAtoUARTRx+0x578>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800a764:	4a98      	ldr	r2, [pc, #608]	; (800a9c8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d100      	bne.n	800a76c <RemapAndLinkDMAtoUARTRx+0xec>
 800a76a:	e256      	b.n	800ac1a <RemapAndLinkDMAtoUARTRx+0x59a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800a76c:	4a96      	ldr	r2, [pc, #600]	; (800a9c8 <RemapAndLinkDMAtoUARTRx+0x348>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d100      	bne.n	800a774 <RemapAndLinkDMAtoUARTRx+0xf4>
 800a772:	e262      	b.n	800ac3a <RemapAndLinkDMAtoUARTRx+0x5ba>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800a774:	4a95      	ldr	r2, [pc, #596]	; (800a9cc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d100      	bne.n	800a77c <RemapAndLinkDMAtoUARTRx+0xfc>
 800a77a:	e26f      	b.n	800ac5c <RemapAndLinkDMAtoUARTRx+0x5dc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800a77c:	4a93      	ldr	r2, [pc, #588]	; (800a9cc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d100      	bne.n	800a784 <RemapAndLinkDMAtoUARTRx+0x104>
 800a782:	e27b      	b.n	800ac7c <RemapAndLinkDMAtoUARTRx+0x5fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800a784:	4a91      	ldr	r2, [pc, #580]	; (800a9cc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d100      	bne.n	800a78c <RemapAndLinkDMAtoUARTRx+0x10c>
 800a78a:	e288      	b.n	800ac9e <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800a78c:	4a8f      	ldr	r2, [pc, #572]	; (800a9cc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d100      	bne.n	800a794 <RemapAndLinkDMAtoUARTRx+0x114>
 800a792:	e295      	b.n	800acc0 <RemapAndLinkDMAtoUARTRx+0x640>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800a794:	4a8d      	ldr	r2, [pc, #564]	; (800a9cc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d100      	bne.n	800a79c <RemapAndLinkDMAtoUARTRx+0x11c>
 800a79a:	e2a2      	b.n	800ace2 <RemapAndLinkDMAtoUARTRx+0x662>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800a79c:	4a8b      	ldr	r2, [pc, #556]	; (800a9cc <RemapAndLinkDMAtoUARTRx+0x34c>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d100      	bne.n	800a7a4 <RemapAndLinkDMAtoUARTRx+0x124>
 800a7a2:	e2ae      	b.n	800ad02 <RemapAndLinkDMAtoUARTRx+0x682>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800a7a4:	4a8a      	ldr	r2, [pc, #552]	; (800a9d0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d100      	bne.n	800a7ac <RemapAndLinkDMAtoUARTRx+0x12c>
 800a7aa:	e2bb      	b.n	800ad24 <RemapAndLinkDMAtoUARTRx+0x6a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800a7ac:	4a88      	ldr	r2, [pc, #544]	; (800a9d0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d100      	bne.n	800a7b4 <RemapAndLinkDMAtoUARTRx+0x134>
 800a7b2:	e2c7      	b.n	800ad44 <RemapAndLinkDMAtoUARTRx+0x6c4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800a7b4:	4a86      	ldr	r2, [pc, #536]	; (800a9d0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d100      	bne.n	800a7bc <RemapAndLinkDMAtoUARTRx+0x13c>
 800a7ba:	e2d4      	b.n	800ad66 <RemapAndLinkDMAtoUARTRx+0x6e6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800a7bc:	4a84      	ldr	r2, [pc, #528]	; (800a9d0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d100      	bne.n	800a7c4 <RemapAndLinkDMAtoUARTRx+0x144>
 800a7c2:	e2f7      	b.n	800adb4 <RemapAndLinkDMAtoUARTRx+0x734>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800a7c4:	4a82      	ldr	r2, [pc, #520]	; (800a9d0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d100      	bne.n	800a7cc <RemapAndLinkDMAtoUARTRx+0x14c>
 800a7ca:	e304      	b.n	800add6 <RemapAndLinkDMAtoUARTRx+0x756>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800a7cc:	4a80      	ldr	r2, [pc, #512]	; (800a9d0 <RemapAndLinkDMAtoUARTRx+0x350>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d100      	bne.n	800a7d4 <RemapAndLinkDMAtoUARTRx+0x154>
 800a7d2:	e310      	b.n	800adf6 <RemapAndLinkDMAtoUARTRx+0x776>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800a7d4:	4a7f      	ldr	r2, [pc, #508]	; (800a9d4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d100      	bne.n	800a7dc <RemapAndLinkDMAtoUARTRx+0x15c>
 800a7da:	e31d      	b.n	800ae18 <RemapAndLinkDMAtoUARTRx+0x798>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800a7dc:	4a7d      	ldr	r2, [pc, #500]	; (800a9d4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d100      	bne.n	800a7e4 <RemapAndLinkDMAtoUARTRx+0x164>
 800a7e2:	e328      	b.n	800ae36 <RemapAndLinkDMAtoUARTRx+0x7b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800a7e4:	4a7b      	ldr	r2, [pc, #492]	; (800a9d4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d100      	bne.n	800a7ec <RemapAndLinkDMAtoUARTRx+0x16c>
 800a7ea:	e335      	b.n	800ae58 <RemapAndLinkDMAtoUARTRx+0x7d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800a7ec:	4a79      	ldr	r2, [pc, #484]	; (800a9d4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d100      	bne.n	800a7f4 <RemapAndLinkDMAtoUARTRx+0x174>
 800a7f2:	e342      	b.n	800ae7a <RemapAndLinkDMAtoUARTRx+0x7fa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800a7f4:	4a77      	ldr	r2, [pc, #476]	; (800a9d4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d100      	bne.n	800a7fc <RemapAndLinkDMAtoUARTRx+0x17c>
 800a7fa:	e34f      	b.n	800ae9c <RemapAndLinkDMAtoUARTRx+0x81c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800a7fc:	4a75      	ldr	r2, [pc, #468]	; (800a9d4 <RemapAndLinkDMAtoUARTRx+0x354>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d11e      	bne.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800a802:	4b75      	ldr	r3, [pc, #468]	; (800a9d8 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a804:	680a      	ldr	r2, [r1, #0]
 800a806:	429a      	cmp	r2, r3
 800a808:	d11a      	bne.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800a80a:	4a74      	ldr	r2, [pc, #464]	; (800a9dc <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a80c:	23a8      	movs	r3, #168	; 0xa8
 800a80e:	58d4      	ldr	r4, [r2, r3]
 800a810:	4d73      	ldr	r5, [pc, #460]	; (800a9e0 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a812:	402c      	ands	r4, r5
 800a814:	50d4      	str	r4, [r2, r3]
 800a816:	58d5      	ldr	r5, [r2, r3]
 800a818:	24f0      	movs	r4, #240	; 0xf0
 800a81a:	0124      	lsls	r4, r4, #4
 800a81c:	432c      	orrs	r4, r5
 800a81e:	50d4      	str	r4, [r2, r3]
 800a820:	e00e      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800a822:	4a70      	ldr	r2, [pc, #448]	; (800a9e4 <RemapAndLinkDMAtoUARTRx+0x364>)
 800a824:	680c      	ldr	r4, [r1, #0]
 800a826:	4294      	cmp	r4, r2
 800a828:	d000      	beq.n	800a82c <RemapAndLinkDMAtoUARTRx+0x1ac>
 800a82a:	e72f      	b.n	800a68c <RemapAndLinkDMAtoUARTRx+0xc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800a82c:	4a6e      	ldr	r2, [pc, #440]	; (800a9e8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800a82e:	23a8      	movs	r3, #168	; 0xa8
 800a830:	58d4      	ldr	r4, [r2, r3]
 800a832:	250f      	movs	r5, #15
 800a834:	43ac      	bics	r4, r5
 800a836:	50d4      	str	r4, [r2, r3]
 800a838:	58d4      	ldr	r4, [r2, r3]
 800a83a:	3d07      	subs	r5, #7
 800a83c:	432c      	orrs	r4, r5
 800a83e:	50d4      	str	r4, [r2, r3]
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800a840:	6641      	str	r1, [r0, #100]	; 0x64
 800a842:	6248      	str	r0, [r1, #36]	; 0x24
}
 800a844:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800a846:	4a69      	ldr	r2, [pc, #420]	; (800a9ec <RemapAndLinkDMAtoUARTRx+0x36c>)
 800a848:	680c      	ldr	r4, [r1, #0]
 800a84a:	4294      	cmp	r4, r2
 800a84c:	d000      	beq.n	800a850 <RemapAndLinkDMAtoUARTRx+0x1d0>
 800a84e:	e721      	b.n	800a694 <RemapAndLinkDMAtoUARTRx+0x14>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800a850:	4a65      	ldr	r2, [pc, #404]	; (800a9e8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800a852:	23a8      	movs	r3, #168	; 0xa8
 800a854:	58d4      	ldr	r4, [r2, r3]
 800a856:	4d62      	ldr	r5, [pc, #392]	; (800a9e0 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a858:	402c      	ands	r4, r5
 800a85a:	50d4      	str	r4, [r2, r3]
 800a85c:	58d5      	ldr	r5, [r2, r3]
 800a85e:	2480      	movs	r4, #128	; 0x80
 800a860:	0124      	lsls	r4, r4, #4
 800a862:	432c      	orrs	r4, r5
 800a864:	50d4      	str	r4, [r2, r3]
 800a866:	e7eb      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800a868:	4a61      	ldr	r2, [pc, #388]	; (800a9f0 <RemapAndLinkDMAtoUARTRx+0x370>)
 800a86a:	680c      	ldr	r4, [r1, #0]
 800a86c:	4294      	cmp	r4, r2
 800a86e:	d000      	beq.n	800a872 <RemapAndLinkDMAtoUARTRx+0x1f2>
 800a870:	e714      	b.n	800a69c <RemapAndLinkDMAtoUARTRx+0x1c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800a872:	4a5d      	ldr	r2, [pc, #372]	; (800a9e8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800a874:	23a8      	movs	r3, #168	; 0xa8
 800a876:	58d4      	ldr	r4, [r2, r3]
 800a878:	4d5e      	ldr	r5, [pc, #376]	; (800a9f4 <RemapAndLinkDMAtoUARTRx+0x374>)
 800a87a:	402c      	ands	r4, r5
 800a87c:	50d4      	str	r4, [r2, r3]
 800a87e:	58d5      	ldr	r5, [r2, r3]
 800a880:	2480      	movs	r4, #128	; 0x80
 800a882:	0324      	lsls	r4, r4, #12
 800a884:	432c      	orrs	r4, r5
 800a886:	50d4      	str	r4, [r2, r3]
 800a888:	e7da      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800a88a:	4a5b      	ldr	r2, [pc, #364]	; (800a9f8 <RemapAndLinkDMAtoUARTRx+0x378>)
 800a88c:	680c      	ldr	r4, [r1, #0]
 800a88e:	4294      	cmp	r4, r2
 800a890:	d000      	beq.n	800a894 <RemapAndLinkDMAtoUARTRx+0x214>
 800a892:	e707      	b.n	800a6a4 <RemapAndLinkDMAtoUARTRx+0x24>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800a894:	4a54      	ldr	r2, [pc, #336]	; (800a9e8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800a896:	23a8      	movs	r3, #168	; 0xa8
 800a898:	58d4      	ldr	r4, [r2, r3]
 800a89a:	4d58      	ldr	r5, [pc, #352]	; (800a9fc <RemapAndLinkDMAtoUARTRx+0x37c>)
 800a89c:	402c      	ands	r4, r5
 800a89e:	50d4      	str	r4, [r2, r3]
 800a8a0:	58d5      	ldr	r5, [r2, r3]
 800a8a2:	2480      	movs	r4, #128	; 0x80
 800a8a4:	0424      	lsls	r4, r4, #16
 800a8a6:	432c      	orrs	r4, r5
 800a8a8:	50d4      	str	r4, [r2, r3]
 800a8aa:	e7c9      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800a8ac:	4a54      	ldr	r2, [pc, #336]	; (800aa00 <RemapAndLinkDMAtoUARTRx+0x380>)
 800a8ae:	680c      	ldr	r4, [r1, #0]
 800a8b0:	4294      	cmp	r4, r2
 800a8b2:	d000      	beq.n	800a8b6 <RemapAndLinkDMAtoUARTRx+0x236>
 800a8b4:	e6fa      	b.n	800a6ac <RemapAndLinkDMAtoUARTRx+0x2c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800a8b6:	4a49      	ldr	r2, [pc, #292]	; (800a9dc <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a8b8:	23a8      	movs	r3, #168	; 0xa8
 800a8ba:	58d4      	ldr	r4, [r2, r3]
 800a8bc:	25f0      	movs	r5, #240	; 0xf0
 800a8be:	43ac      	bics	r4, r5
 800a8c0:	50d4      	str	r4, [r2, r3]
 800a8c2:	58d4      	ldr	r4, [r2, r3]
 800a8c4:	3d70      	subs	r5, #112	; 0x70
 800a8c6:	432c      	orrs	r4, r5
 800a8c8:	50d4      	str	r4, [r2, r3]
 800a8ca:	e7b9      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800a8cc:	4a42      	ldr	r2, [pc, #264]	; (800a9d8 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a8ce:	680c      	ldr	r4, [r1, #0]
 800a8d0:	4294      	cmp	r4, r2
 800a8d2:	d000      	beq.n	800a8d6 <RemapAndLinkDMAtoUARTRx+0x256>
 800a8d4:	e6ee      	b.n	800a6b4 <RemapAndLinkDMAtoUARTRx+0x34>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800a8d6:	4a41      	ldr	r2, [pc, #260]	; (800a9dc <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a8d8:	23a8      	movs	r3, #168	; 0xa8
 800a8da:	58d4      	ldr	r4, [r2, r3]
 800a8dc:	4d40      	ldr	r5, [pc, #256]	; (800a9e0 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a8de:	402c      	ands	r4, r5
 800a8e0:	50d4      	str	r4, [r2, r3]
 800a8e2:	58d5      	ldr	r5, [r2, r3]
 800a8e4:	2480      	movs	r4, #128	; 0x80
 800a8e6:	0124      	lsls	r4, r4, #4
 800a8e8:	432c      	orrs	r4, r5
 800a8ea:	50d4      	str	r4, [r2, r3]
 800a8ec:	e7a8      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800a8ee:	4a3d      	ldr	r2, [pc, #244]	; (800a9e4 <RemapAndLinkDMAtoUARTRx+0x364>)
 800a8f0:	680c      	ldr	r4, [r1, #0]
 800a8f2:	4294      	cmp	r4, r2
 800a8f4:	d000      	beq.n	800a8f8 <RemapAndLinkDMAtoUARTRx+0x278>
 800a8f6:	e6e1      	b.n	800a6bc <RemapAndLinkDMAtoUARTRx+0x3c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800a8f8:	4a3b      	ldr	r2, [pc, #236]	; (800a9e8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800a8fa:	23a8      	movs	r3, #168	; 0xa8
 800a8fc:	58d4      	ldr	r4, [r2, r3]
 800a8fe:	250f      	movs	r5, #15
 800a900:	43ac      	bics	r4, r5
 800a902:	50d4      	str	r4, [r2, r3]
 800a904:	58d4      	ldr	r4, [r2, r3]
 800a906:	3d06      	subs	r5, #6
 800a908:	432c      	orrs	r4, r5
 800a90a:	50d4      	str	r4, [r2, r3]
 800a90c:	e798      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800a90e:	4a37      	ldr	r2, [pc, #220]	; (800a9ec <RemapAndLinkDMAtoUARTRx+0x36c>)
 800a910:	680c      	ldr	r4, [r1, #0]
 800a912:	4294      	cmp	r4, r2
 800a914:	d000      	beq.n	800a918 <RemapAndLinkDMAtoUARTRx+0x298>
 800a916:	e6d5      	b.n	800a6c4 <RemapAndLinkDMAtoUARTRx+0x44>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800a918:	4a33      	ldr	r2, [pc, #204]	; (800a9e8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800a91a:	23a8      	movs	r3, #168	; 0xa8
 800a91c:	58d4      	ldr	r4, [r2, r3]
 800a91e:	4d30      	ldr	r5, [pc, #192]	; (800a9e0 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a920:	402c      	ands	r4, r5
 800a922:	50d4      	str	r4, [r2, r3]
 800a924:	58d5      	ldr	r5, [r2, r3]
 800a926:	2490      	movs	r4, #144	; 0x90
 800a928:	0124      	lsls	r4, r4, #4
 800a92a:	432c      	orrs	r4, r5
 800a92c:	50d4      	str	r4, [r2, r3]
 800a92e:	e787      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800a930:	4a2f      	ldr	r2, [pc, #188]	; (800a9f0 <RemapAndLinkDMAtoUARTRx+0x370>)
 800a932:	680c      	ldr	r4, [r1, #0]
 800a934:	4294      	cmp	r4, r2
 800a936:	d000      	beq.n	800a93a <RemapAndLinkDMAtoUARTRx+0x2ba>
 800a938:	e6c8      	b.n	800a6cc <RemapAndLinkDMAtoUARTRx+0x4c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800a93a:	4a2b      	ldr	r2, [pc, #172]	; (800a9e8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800a93c:	23a8      	movs	r3, #168	; 0xa8
 800a93e:	58d4      	ldr	r4, [r2, r3]
 800a940:	4d2c      	ldr	r5, [pc, #176]	; (800a9f4 <RemapAndLinkDMAtoUARTRx+0x374>)
 800a942:	402c      	ands	r4, r5
 800a944:	50d4      	str	r4, [r2, r3]
 800a946:	58d5      	ldr	r5, [r2, r3]
 800a948:	2490      	movs	r4, #144	; 0x90
 800a94a:	0324      	lsls	r4, r4, #12
 800a94c:	432c      	orrs	r4, r5
 800a94e:	50d4      	str	r4, [r2, r3]
 800a950:	e776      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800a952:	4a29      	ldr	r2, [pc, #164]	; (800a9f8 <RemapAndLinkDMAtoUARTRx+0x378>)
 800a954:	680c      	ldr	r4, [r1, #0]
 800a956:	4294      	cmp	r4, r2
 800a958:	d000      	beq.n	800a95c <RemapAndLinkDMAtoUARTRx+0x2dc>
 800a95a:	e6bb      	b.n	800a6d4 <RemapAndLinkDMAtoUARTRx+0x54>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800a95c:	4a22      	ldr	r2, [pc, #136]	; (800a9e8 <RemapAndLinkDMAtoUARTRx+0x368>)
 800a95e:	23a8      	movs	r3, #168	; 0xa8
 800a960:	58d4      	ldr	r4, [r2, r3]
 800a962:	4d26      	ldr	r5, [pc, #152]	; (800a9fc <RemapAndLinkDMAtoUARTRx+0x37c>)
 800a964:	402c      	ands	r4, r5
 800a966:	50d4      	str	r4, [r2, r3]
 800a968:	58d5      	ldr	r5, [r2, r3]
 800a96a:	2490      	movs	r4, #144	; 0x90
 800a96c:	0424      	lsls	r4, r4, #16
 800a96e:	432c      	orrs	r4, r5
 800a970:	50d4      	str	r4, [r2, r3]
 800a972:	e765      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800a974:	4a22      	ldr	r2, [pc, #136]	; (800aa00 <RemapAndLinkDMAtoUARTRx+0x380>)
 800a976:	680c      	ldr	r4, [r1, #0]
 800a978:	4294      	cmp	r4, r2
 800a97a:	d000      	beq.n	800a97e <RemapAndLinkDMAtoUARTRx+0x2fe>
 800a97c:	e6ae      	b.n	800a6dc <RemapAndLinkDMAtoUARTRx+0x5c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800a97e:	4a17      	ldr	r2, [pc, #92]	; (800a9dc <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a980:	23a8      	movs	r3, #168	; 0xa8
 800a982:	58d4      	ldr	r4, [r2, r3]
 800a984:	25f0      	movs	r5, #240	; 0xf0
 800a986:	43ac      	bics	r4, r5
 800a988:	50d4      	str	r4, [r2, r3]
 800a98a:	58d4      	ldr	r4, [r2, r3]
 800a98c:	3d60      	subs	r5, #96	; 0x60
 800a98e:	432c      	orrs	r4, r5
 800a990:	50d4      	str	r4, [r2, r3]
 800a992:	e755      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800a994:	4a10      	ldr	r2, [pc, #64]	; (800a9d8 <RemapAndLinkDMAtoUARTRx+0x358>)
 800a996:	680c      	ldr	r4, [r1, #0]
 800a998:	4294      	cmp	r4, r2
 800a99a:	d000      	beq.n	800a99e <RemapAndLinkDMAtoUARTRx+0x31e>
 800a99c:	e6a2      	b.n	800a6e4 <RemapAndLinkDMAtoUARTRx+0x64>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800a99e:	4a0f      	ldr	r2, [pc, #60]	; (800a9dc <RemapAndLinkDMAtoUARTRx+0x35c>)
 800a9a0:	23a8      	movs	r3, #168	; 0xa8
 800a9a2:	58d4      	ldr	r4, [r2, r3]
 800a9a4:	4d0e      	ldr	r5, [pc, #56]	; (800a9e0 <RemapAndLinkDMAtoUARTRx+0x360>)
 800a9a6:	402c      	ands	r4, r5
 800a9a8:	50d4      	str	r4, [r2, r3]
 800a9aa:	58d5      	ldr	r5, [r2, r3]
 800a9ac:	2490      	movs	r4, #144	; 0x90
 800a9ae:	0124      	lsls	r4, r4, #4
 800a9b0:	432c      	orrs	r4, r5
 800a9b2:	50d4      	str	r4, [r2, r3]
 800a9b4:	e744      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800a9b6:	46c0      	nop			; (mov r8, r8)
 800a9b8:	40013800 	.word	0x40013800
 800a9bc:	40004400 	.word	0x40004400
 800a9c0:	40004800 	.word	0x40004800
 800a9c4:	40004c00 	.word	0x40004c00
 800a9c8:	40005000 	.word	0x40005000
 800a9cc:	40011400 	.word	0x40011400
 800a9d0:	40011800 	.word	0x40011800
 800a9d4:	40011c00 	.word	0x40011c00
 800a9d8:	40020430 	.word	0x40020430
 800a9dc:	40020400 	.word	0x40020400
 800a9e0:	fffff0ff 	.word	0xfffff0ff
 800a9e4:	40020008 	.word	0x40020008
 800a9e8:	40020000 	.word	0x40020000
 800a9ec:	40020030 	.word	0x40020030
 800a9f0:	40020058 	.word	0x40020058
 800a9f4:	fff0ffff 	.word	0xfff0ffff
 800a9f8:	4002006c 	.word	0x4002006c
 800a9fc:	ff0fffff 	.word	0xff0fffff
 800aa00:	4002041c 	.word	0x4002041c
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800aa04:	4ae0      	ldr	r2, [pc, #896]	; (800ad88 <RemapAndLinkDMAtoUARTRx+0x708>)
 800aa06:	680c      	ldr	r4, [r1, #0]
 800aa08:	4294      	cmp	r4, r2
 800aa0a:	d000      	beq.n	800aa0e <RemapAndLinkDMAtoUARTRx+0x38e>
 800aa0c:	e66e      	b.n	800a6ec <RemapAndLinkDMAtoUARTRx+0x6c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800aa0e:	4adf      	ldr	r2, [pc, #892]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800aa10:	23a8      	movs	r3, #168	; 0xa8
 800aa12:	58d4      	ldr	r4, [r2, r3]
 800aa14:	250f      	movs	r5, #15
 800aa16:	43ac      	bics	r4, r5
 800aa18:	50d4      	str	r4, [r2, r3]
 800aa1a:	58d4      	ldr	r4, [r2, r3]
 800aa1c:	3d05      	subs	r5, #5
 800aa1e:	432c      	orrs	r4, r5
 800aa20:	50d4      	str	r4, [r2, r3]
 800aa22:	e70d      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800aa24:	4ada      	ldr	r2, [pc, #872]	; (800ad90 <RemapAndLinkDMAtoUARTRx+0x710>)
 800aa26:	680c      	ldr	r4, [r1, #0]
 800aa28:	4294      	cmp	r4, r2
 800aa2a:	d000      	beq.n	800aa2e <RemapAndLinkDMAtoUARTRx+0x3ae>
 800aa2c:	e662      	b.n	800a6f4 <RemapAndLinkDMAtoUARTRx+0x74>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800aa2e:	4ad7      	ldr	r2, [pc, #860]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800aa30:	23a8      	movs	r3, #168	; 0xa8
 800aa32:	58d4      	ldr	r4, [r2, r3]
 800aa34:	4dd7      	ldr	r5, [pc, #860]	; (800ad94 <RemapAndLinkDMAtoUARTRx+0x714>)
 800aa36:	402c      	ands	r4, r5
 800aa38:	50d4      	str	r4, [r2, r3]
 800aa3a:	58d5      	ldr	r5, [r2, r3]
 800aa3c:	24a0      	movs	r4, #160	; 0xa0
 800aa3e:	0124      	lsls	r4, r4, #4
 800aa40:	432c      	orrs	r4, r5
 800aa42:	50d4      	str	r4, [r2, r3]
 800aa44:	e6fc      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800aa46:	4ad4      	ldr	r2, [pc, #848]	; (800ad98 <RemapAndLinkDMAtoUARTRx+0x718>)
 800aa48:	680c      	ldr	r4, [r1, #0]
 800aa4a:	4294      	cmp	r4, r2
 800aa4c:	d000      	beq.n	800aa50 <RemapAndLinkDMAtoUARTRx+0x3d0>
 800aa4e:	e655      	b.n	800a6fc <RemapAndLinkDMAtoUARTRx+0x7c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800aa50:	4ace      	ldr	r2, [pc, #824]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800aa52:	23a8      	movs	r3, #168	; 0xa8
 800aa54:	58d4      	ldr	r4, [r2, r3]
 800aa56:	4dd1      	ldr	r5, [pc, #836]	; (800ad9c <RemapAndLinkDMAtoUARTRx+0x71c>)
 800aa58:	402c      	ands	r4, r5
 800aa5a:	50d4      	str	r4, [r2, r3]
 800aa5c:	58d5      	ldr	r5, [r2, r3]
 800aa5e:	24a0      	movs	r4, #160	; 0xa0
 800aa60:	0324      	lsls	r4, r4, #12
 800aa62:	432c      	orrs	r4, r5
 800aa64:	50d4      	str	r4, [r2, r3]
 800aa66:	e6eb      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800aa68:	4acd      	ldr	r2, [pc, #820]	; (800ada0 <RemapAndLinkDMAtoUARTRx+0x720>)
 800aa6a:	680c      	ldr	r4, [r1, #0]
 800aa6c:	4294      	cmp	r4, r2
 800aa6e:	d000      	beq.n	800aa72 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800aa70:	e648      	b.n	800a704 <RemapAndLinkDMAtoUARTRx+0x84>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800aa72:	4ac6      	ldr	r2, [pc, #792]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800aa74:	23a8      	movs	r3, #168	; 0xa8
 800aa76:	58d4      	ldr	r4, [r2, r3]
 800aa78:	4dca      	ldr	r5, [pc, #808]	; (800ada4 <RemapAndLinkDMAtoUARTRx+0x724>)
 800aa7a:	402c      	ands	r4, r5
 800aa7c:	50d4      	str	r4, [r2, r3]
 800aa7e:	58d5      	ldr	r5, [r2, r3]
 800aa80:	24a0      	movs	r4, #160	; 0xa0
 800aa82:	0424      	lsls	r4, r4, #16
 800aa84:	432c      	orrs	r4, r5
 800aa86:	50d4      	str	r4, [r2, r3]
 800aa88:	e6da      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800aa8a:	4ac7      	ldr	r2, [pc, #796]	; (800ada8 <RemapAndLinkDMAtoUARTRx+0x728>)
 800aa8c:	680c      	ldr	r4, [r1, #0]
 800aa8e:	4294      	cmp	r4, r2
 800aa90:	d000      	beq.n	800aa94 <RemapAndLinkDMAtoUARTRx+0x414>
 800aa92:	e63b      	b.n	800a70c <RemapAndLinkDMAtoUARTRx+0x8c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800aa94:	4ac5      	ldr	r2, [pc, #788]	; (800adac <RemapAndLinkDMAtoUARTRx+0x72c>)
 800aa96:	23a8      	movs	r3, #168	; 0xa8
 800aa98:	58d4      	ldr	r4, [r2, r3]
 800aa9a:	25f0      	movs	r5, #240	; 0xf0
 800aa9c:	43ac      	bics	r4, r5
 800aa9e:	50d4      	str	r4, [r2, r3]
 800aaa0:	58d4      	ldr	r4, [r2, r3]
 800aaa2:	3d50      	subs	r5, #80	; 0x50
 800aaa4:	432c      	orrs	r4, r5
 800aaa6:	50d4      	str	r4, [r2, r3]
 800aaa8:	e6ca      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800aaaa:	4ac1      	ldr	r2, [pc, #772]	; (800adb0 <RemapAndLinkDMAtoUARTRx+0x730>)
 800aaac:	680c      	ldr	r4, [r1, #0]
 800aaae:	4294      	cmp	r4, r2
 800aab0:	d000      	beq.n	800aab4 <RemapAndLinkDMAtoUARTRx+0x434>
 800aab2:	e62f      	b.n	800a714 <RemapAndLinkDMAtoUARTRx+0x94>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800aab4:	4abd      	ldr	r2, [pc, #756]	; (800adac <RemapAndLinkDMAtoUARTRx+0x72c>)
 800aab6:	23a8      	movs	r3, #168	; 0xa8
 800aab8:	58d4      	ldr	r4, [r2, r3]
 800aaba:	4db6      	ldr	r5, [pc, #728]	; (800ad94 <RemapAndLinkDMAtoUARTRx+0x714>)
 800aabc:	402c      	ands	r4, r5
 800aabe:	50d4      	str	r4, [r2, r3]
 800aac0:	58d5      	ldr	r5, [r2, r3]
 800aac2:	24a0      	movs	r4, #160	; 0xa0
 800aac4:	0124      	lsls	r4, r4, #4
 800aac6:	432c      	orrs	r4, r5
 800aac8:	50d4      	str	r4, [r2, r3]
 800aaca:	e6b9      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800aacc:	4aae      	ldr	r2, [pc, #696]	; (800ad88 <RemapAndLinkDMAtoUARTRx+0x708>)
 800aace:	680c      	ldr	r4, [r1, #0]
 800aad0:	4294      	cmp	r4, r2
 800aad2:	d000      	beq.n	800aad6 <RemapAndLinkDMAtoUARTRx+0x456>
 800aad4:	e622      	b.n	800a71c <RemapAndLinkDMAtoUARTRx+0x9c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800aad6:	4aad      	ldr	r2, [pc, #692]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800aad8:	23a8      	movs	r3, #168	; 0xa8
 800aada:	58d4      	ldr	r4, [r2, r3]
 800aadc:	250f      	movs	r5, #15
 800aade:	43ac      	bics	r4, r5
 800aae0:	50d4      	str	r4, [r2, r3]
 800aae2:	58d4      	ldr	r4, [r2, r3]
 800aae4:	3d04      	subs	r5, #4
 800aae6:	432c      	orrs	r4, r5
 800aae8:	50d4      	str	r4, [r2, r3]
 800aaea:	e6a9      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800aaec:	4aa8      	ldr	r2, [pc, #672]	; (800ad90 <RemapAndLinkDMAtoUARTRx+0x710>)
 800aaee:	680c      	ldr	r4, [r1, #0]
 800aaf0:	4294      	cmp	r4, r2
 800aaf2:	d000      	beq.n	800aaf6 <RemapAndLinkDMAtoUARTRx+0x476>
 800aaf4:	e616      	b.n	800a724 <RemapAndLinkDMAtoUARTRx+0xa4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800aaf6:	4aa5      	ldr	r2, [pc, #660]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800aaf8:	23a8      	movs	r3, #168	; 0xa8
 800aafa:	58d4      	ldr	r4, [r2, r3]
 800aafc:	4da5      	ldr	r5, [pc, #660]	; (800ad94 <RemapAndLinkDMAtoUARTRx+0x714>)
 800aafe:	402c      	ands	r4, r5
 800ab00:	50d4      	str	r4, [r2, r3]
 800ab02:	58d5      	ldr	r5, [r2, r3]
 800ab04:	24b0      	movs	r4, #176	; 0xb0
 800ab06:	0124      	lsls	r4, r4, #4
 800ab08:	432c      	orrs	r4, r5
 800ab0a:	50d4      	str	r4, [r2, r3]
 800ab0c:	e698      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800ab0e:	4aa2      	ldr	r2, [pc, #648]	; (800ad98 <RemapAndLinkDMAtoUARTRx+0x718>)
 800ab10:	680c      	ldr	r4, [r1, #0]
 800ab12:	4294      	cmp	r4, r2
 800ab14:	d000      	beq.n	800ab18 <RemapAndLinkDMAtoUARTRx+0x498>
 800ab16:	e609      	b.n	800a72c <RemapAndLinkDMAtoUARTRx+0xac>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800ab18:	4a9c      	ldr	r2, [pc, #624]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800ab1a:	23a8      	movs	r3, #168	; 0xa8
 800ab1c:	58d4      	ldr	r4, [r2, r3]
 800ab1e:	4d9f      	ldr	r5, [pc, #636]	; (800ad9c <RemapAndLinkDMAtoUARTRx+0x71c>)
 800ab20:	402c      	ands	r4, r5
 800ab22:	50d4      	str	r4, [r2, r3]
 800ab24:	58d5      	ldr	r5, [r2, r3]
 800ab26:	24b0      	movs	r4, #176	; 0xb0
 800ab28:	0324      	lsls	r4, r4, #12
 800ab2a:	432c      	orrs	r4, r5
 800ab2c:	50d4      	str	r4, [r2, r3]
 800ab2e:	e687      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800ab30:	4a9b      	ldr	r2, [pc, #620]	; (800ada0 <RemapAndLinkDMAtoUARTRx+0x720>)
 800ab32:	680c      	ldr	r4, [r1, #0]
 800ab34:	4294      	cmp	r4, r2
 800ab36:	d000      	beq.n	800ab3a <RemapAndLinkDMAtoUARTRx+0x4ba>
 800ab38:	e5fc      	b.n	800a734 <RemapAndLinkDMAtoUARTRx+0xb4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800ab3a:	4a94      	ldr	r2, [pc, #592]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800ab3c:	23a8      	movs	r3, #168	; 0xa8
 800ab3e:	58d4      	ldr	r4, [r2, r3]
 800ab40:	4d98      	ldr	r5, [pc, #608]	; (800ada4 <RemapAndLinkDMAtoUARTRx+0x724>)
 800ab42:	402c      	ands	r4, r5
 800ab44:	50d4      	str	r4, [r2, r3]
 800ab46:	58d5      	ldr	r5, [r2, r3]
 800ab48:	24b0      	movs	r4, #176	; 0xb0
 800ab4a:	0424      	lsls	r4, r4, #16
 800ab4c:	432c      	orrs	r4, r5
 800ab4e:	50d4      	str	r4, [r2, r3]
 800ab50:	e676      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800ab52:	4a95      	ldr	r2, [pc, #596]	; (800ada8 <RemapAndLinkDMAtoUARTRx+0x728>)
 800ab54:	680c      	ldr	r4, [r1, #0]
 800ab56:	4294      	cmp	r4, r2
 800ab58:	d000      	beq.n	800ab5c <RemapAndLinkDMAtoUARTRx+0x4dc>
 800ab5a:	e5ef      	b.n	800a73c <RemapAndLinkDMAtoUARTRx+0xbc>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800ab5c:	4a93      	ldr	r2, [pc, #588]	; (800adac <RemapAndLinkDMAtoUARTRx+0x72c>)
 800ab5e:	23a8      	movs	r3, #168	; 0xa8
 800ab60:	58d4      	ldr	r4, [r2, r3]
 800ab62:	25f0      	movs	r5, #240	; 0xf0
 800ab64:	43ac      	bics	r4, r5
 800ab66:	50d4      	str	r4, [r2, r3]
 800ab68:	58d4      	ldr	r4, [r2, r3]
 800ab6a:	3d40      	subs	r5, #64	; 0x40
 800ab6c:	432c      	orrs	r4, r5
 800ab6e:	50d4      	str	r4, [r2, r3]
 800ab70:	e666      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800ab72:	4a8f      	ldr	r2, [pc, #572]	; (800adb0 <RemapAndLinkDMAtoUARTRx+0x730>)
 800ab74:	680c      	ldr	r4, [r1, #0]
 800ab76:	4294      	cmp	r4, r2
 800ab78:	d000      	beq.n	800ab7c <RemapAndLinkDMAtoUARTRx+0x4fc>
 800ab7a:	e5e3      	b.n	800a744 <RemapAndLinkDMAtoUARTRx+0xc4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800ab7c:	4a8b      	ldr	r2, [pc, #556]	; (800adac <RemapAndLinkDMAtoUARTRx+0x72c>)
 800ab7e:	23a8      	movs	r3, #168	; 0xa8
 800ab80:	58d4      	ldr	r4, [r2, r3]
 800ab82:	4d84      	ldr	r5, [pc, #528]	; (800ad94 <RemapAndLinkDMAtoUARTRx+0x714>)
 800ab84:	402c      	ands	r4, r5
 800ab86:	50d4      	str	r4, [r2, r3]
 800ab88:	58d5      	ldr	r5, [r2, r3]
 800ab8a:	24b0      	movs	r4, #176	; 0xb0
 800ab8c:	0124      	lsls	r4, r4, #4
 800ab8e:	432c      	orrs	r4, r5
 800ab90:	50d4      	str	r4, [r2, r3]
 800ab92:	e655      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800ab94:	4a7c      	ldr	r2, [pc, #496]	; (800ad88 <RemapAndLinkDMAtoUARTRx+0x708>)
 800ab96:	680c      	ldr	r4, [r1, #0]
 800ab98:	4294      	cmp	r4, r2
 800ab9a:	d000      	beq.n	800ab9e <RemapAndLinkDMAtoUARTRx+0x51e>
 800ab9c:	e5d6      	b.n	800a74c <RemapAndLinkDMAtoUARTRx+0xcc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800ab9e:	4a7b      	ldr	r2, [pc, #492]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800aba0:	23a8      	movs	r3, #168	; 0xa8
 800aba2:	58d4      	ldr	r4, [r2, r3]
 800aba4:	250f      	movs	r5, #15
 800aba6:	43ac      	bics	r4, r5
 800aba8:	50d4      	str	r4, [r2, r3]
 800abaa:	58d4      	ldr	r4, [r2, r3]
 800abac:	3d03      	subs	r5, #3
 800abae:	432c      	orrs	r4, r5
 800abb0:	50d4      	str	r4, [r2, r3]
 800abb2:	e645      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800abb4:	4a76      	ldr	r2, [pc, #472]	; (800ad90 <RemapAndLinkDMAtoUARTRx+0x710>)
 800abb6:	680c      	ldr	r4, [r1, #0]
 800abb8:	4294      	cmp	r4, r2
 800abba:	d000      	beq.n	800abbe <RemapAndLinkDMAtoUARTRx+0x53e>
 800abbc:	e5ca      	b.n	800a754 <RemapAndLinkDMAtoUARTRx+0xd4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800abbe:	4a73      	ldr	r2, [pc, #460]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800abc0:	23a8      	movs	r3, #168	; 0xa8
 800abc2:	58d4      	ldr	r4, [r2, r3]
 800abc4:	4d73      	ldr	r5, [pc, #460]	; (800ad94 <RemapAndLinkDMAtoUARTRx+0x714>)
 800abc6:	402c      	ands	r4, r5
 800abc8:	50d4      	str	r4, [r2, r3]
 800abca:	58d5      	ldr	r5, [r2, r3]
 800abcc:	24c0      	movs	r4, #192	; 0xc0
 800abce:	0124      	lsls	r4, r4, #4
 800abd0:	432c      	orrs	r4, r5
 800abd2:	50d4      	str	r4, [r2, r3]
 800abd4:	e634      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800abd6:	4a70      	ldr	r2, [pc, #448]	; (800ad98 <RemapAndLinkDMAtoUARTRx+0x718>)
 800abd8:	680c      	ldr	r4, [r1, #0]
 800abda:	4294      	cmp	r4, r2
 800abdc:	d000      	beq.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x560>
 800abde:	e5bd      	b.n	800a75c <RemapAndLinkDMAtoUARTRx+0xdc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800abe0:	4a6a      	ldr	r2, [pc, #424]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800abe2:	23a8      	movs	r3, #168	; 0xa8
 800abe4:	58d4      	ldr	r4, [r2, r3]
 800abe6:	4d6d      	ldr	r5, [pc, #436]	; (800ad9c <RemapAndLinkDMAtoUARTRx+0x71c>)
 800abe8:	402c      	ands	r4, r5
 800abea:	50d4      	str	r4, [r2, r3]
 800abec:	58d5      	ldr	r5, [r2, r3]
 800abee:	24c0      	movs	r4, #192	; 0xc0
 800abf0:	0324      	lsls	r4, r4, #12
 800abf2:	432c      	orrs	r4, r5
 800abf4:	50d4      	str	r4, [r2, r3]
 800abf6:	e623      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800abf8:	4a69      	ldr	r2, [pc, #420]	; (800ada0 <RemapAndLinkDMAtoUARTRx+0x720>)
 800abfa:	680c      	ldr	r4, [r1, #0]
 800abfc:	4294      	cmp	r4, r2
 800abfe:	d000      	beq.n	800ac02 <RemapAndLinkDMAtoUARTRx+0x582>
 800ac00:	e5b0      	b.n	800a764 <RemapAndLinkDMAtoUARTRx+0xe4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800ac02:	4a62      	ldr	r2, [pc, #392]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800ac04:	23a8      	movs	r3, #168	; 0xa8
 800ac06:	58d4      	ldr	r4, [r2, r3]
 800ac08:	4d66      	ldr	r5, [pc, #408]	; (800ada4 <RemapAndLinkDMAtoUARTRx+0x724>)
 800ac0a:	402c      	ands	r4, r5
 800ac0c:	50d4      	str	r4, [r2, r3]
 800ac0e:	58d5      	ldr	r5, [r2, r3]
 800ac10:	24c0      	movs	r4, #192	; 0xc0
 800ac12:	0424      	lsls	r4, r4, #16
 800ac14:	432c      	orrs	r4, r5
 800ac16:	50d4      	str	r4, [r2, r3]
 800ac18:	e612      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800ac1a:	4a63      	ldr	r2, [pc, #396]	; (800ada8 <RemapAndLinkDMAtoUARTRx+0x728>)
 800ac1c:	680c      	ldr	r4, [r1, #0]
 800ac1e:	4294      	cmp	r4, r2
 800ac20:	d000      	beq.n	800ac24 <RemapAndLinkDMAtoUARTRx+0x5a4>
 800ac22:	e5a3      	b.n	800a76c <RemapAndLinkDMAtoUARTRx+0xec>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800ac24:	4a61      	ldr	r2, [pc, #388]	; (800adac <RemapAndLinkDMAtoUARTRx+0x72c>)
 800ac26:	23a8      	movs	r3, #168	; 0xa8
 800ac28:	58d4      	ldr	r4, [r2, r3]
 800ac2a:	25f0      	movs	r5, #240	; 0xf0
 800ac2c:	43ac      	bics	r4, r5
 800ac2e:	50d4      	str	r4, [r2, r3]
 800ac30:	58d4      	ldr	r4, [r2, r3]
 800ac32:	3d30      	subs	r5, #48	; 0x30
 800ac34:	432c      	orrs	r4, r5
 800ac36:	50d4      	str	r4, [r2, r3]
 800ac38:	e602      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800ac3a:	4a5d      	ldr	r2, [pc, #372]	; (800adb0 <RemapAndLinkDMAtoUARTRx+0x730>)
 800ac3c:	680c      	ldr	r4, [r1, #0]
 800ac3e:	4294      	cmp	r4, r2
 800ac40:	d000      	beq.n	800ac44 <RemapAndLinkDMAtoUARTRx+0x5c4>
 800ac42:	e597      	b.n	800a774 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800ac44:	4a59      	ldr	r2, [pc, #356]	; (800adac <RemapAndLinkDMAtoUARTRx+0x72c>)
 800ac46:	23a8      	movs	r3, #168	; 0xa8
 800ac48:	58d4      	ldr	r4, [r2, r3]
 800ac4a:	4d52      	ldr	r5, [pc, #328]	; (800ad94 <RemapAndLinkDMAtoUARTRx+0x714>)
 800ac4c:	402c      	ands	r4, r5
 800ac4e:	50d4      	str	r4, [r2, r3]
 800ac50:	58d5      	ldr	r5, [r2, r3]
 800ac52:	24c0      	movs	r4, #192	; 0xc0
 800ac54:	0124      	lsls	r4, r4, #4
 800ac56:	432c      	orrs	r4, r5
 800ac58:	50d4      	str	r4, [r2, r3]
 800ac5a:	e5f1      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800ac5c:	4a4a      	ldr	r2, [pc, #296]	; (800ad88 <RemapAndLinkDMAtoUARTRx+0x708>)
 800ac5e:	680c      	ldr	r4, [r1, #0]
 800ac60:	4294      	cmp	r4, r2
 800ac62:	d000      	beq.n	800ac66 <RemapAndLinkDMAtoUARTRx+0x5e6>
 800ac64:	e58a      	b.n	800a77c <RemapAndLinkDMAtoUARTRx+0xfc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800ac66:	4a49      	ldr	r2, [pc, #292]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800ac68:	23a8      	movs	r3, #168	; 0xa8
 800ac6a:	58d4      	ldr	r4, [r2, r3]
 800ac6c:	250f      	movs	r5, #15
 800ac6e:	43ac      	bics	r4, r5
 800ac70:	50d4      	str	r4, [r2, r3]
 800ac72:	58d4      	ldr	r4, [r2, r3]
 800ac74:	3d02      	subs	r5, #2
 800ac76:	432c      	orrs	r4, r5
 800ac78:	50d4      	str	r4, [r2, r3]
 800ac7a:	e5e1      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800ac7c:	4a44      	ldr	r2, [pc, #272]	; (800ad90 <RemapAndLinkDMAtoUARTRx+0x710>)
 800ac7e:	680c      	ldr	r4, [r1, #0]
 800ac80:	4294      	cmp	r4, r2
 800ac82:	d000      	beq.n	800ac86 <RemapAndLinkDMAtoUARTRx+0x606>
 800ac84:	e57e      	b.n	800a784 <RemapAndLinkDMAtoUARTRx+0x104>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800ac86:	4a41      	ldr	r2, [pc, #260]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800ac88:	23a8      	movs	r3, #168	; 0xa8
 800ac8a:	58d4      	ldr	r4, [r2, r3]
 800ac8c:	4d41      	ldr	r5, [pc, #260]	; (800ad94 <RemapAndLinkDMAtoUARTRx+0x714>)
 800ac8e:	402c      	ands	r4, r5
 800ac90:	50d4      	str	r4, [r2, r3]
 800ac92:	58d5      	ldr	r5, [r2, r3]
 800ac94:	24d0      	movs	r4, #208	; 0xd0
 800ac96:	0124      	lsls	r4, r4, #4
 800ac98:	432c      	orrs	r4, r5
 800ac9a:	50d4      	str	r4, [r2, r3]
 800ac9c:	e5d0      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800ac9e:	4a3e      	ldr	r2, [pc, #248]	; (800ad98 <RemapAndLinkDMAtoUARTRx+0x718>)
 800aca0:	680c      	ldr	r4, [r1, #0]
 800aca2:	4294      	cmp	r4, r2
 800aca4:	d000      	beq.n	800aca8 <RemapAndLinkDMAtoUARTRx+0x628>
 800aca6:	e571      	b.n	800a78c <RemapAndLinkDMAtoUARTRx+0x10c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800aca8:	4a38      	ldr	r2, [pc, #224]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800acaa:	23a8      	movs	r3, #168	; 0xa8
 800acac:	58d4      	ldr	r4, [r2, r3]
 800acae:	4d3b      	ldr	r5, [pc, #236]	; (800ad9c <RemapAndLinkDMAtoUARTRx+0x71c>)
 800acb0:	402c      	ands	r4, r5
 800acb2:	50d4      	str	r4, [r2, r3]
 800acb4:	58d5      	ldr	r5, [r2, r3]
 800acb6:	24d0      	movs	r4, #208	; 0xd0
 800acb8:	0324      	lsls	r4, r4, #12
 800acba:	432c      	orrs	r4, r5
 800acbc:	50d4      	str	r4, [r2, r3]
 800acbe:	e5bf      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800acc0:	4a37      	ldr	r2, [pc, #220]	; (800ada0 <RemapAndLinkDMAtoUARTRx+0x720>)
 800acc2:	680c      	ldr	r4, [r1, #0]
 800acc4:	4294      	cmp	r4, r2
 800acc6:	d000      	beq.n	800acca <RemapAndLinkDMAtoUARTRx+0x64a>
 800acc8:	e564      	b.n	800a794 <RemapAndLinkDMAtoUARTRx+0x114>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800acca:	4a30      	ldr	r2, [pc, #192]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800accc:	23a8      	movs	r3, #168	; 0xa8
 800acce:	58d4      	ldr	r4, [r2, r3]
 800acd0:	4d34      	ldr	r5, [pc, #208]	; (800ada4 <RemapAndLinkDMAtoUARTRx+0x724>)
 800acd2:	402c      	ands	r4, r5
 800acd4:	50d4      	str	r4, [r2, r3]
 800acd6:	58d5      	ldr	r5, [r2, r3]
 800acd8:	24d0      	movs	r4, #208	; 0xd0
 800acda:	0424      	lsls	r4, r4, #16
 800acdc:	432c      	orrs	r4, r5
 800acde:	50d4      	str	r4, [r2, r3]
 800ace0:	e5ae      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800ace2:	4a31      	ldr	r2, [pc, #196]	; (800ada8 <RemapAndLinkDMAtoUARTRx+0x728>)
 800ace4:	680c      	ldr	r4, [r1, #0]
 800ace6:	4294      	cmp	r4, r2
 800ace8:	d000      	beq.n	800acec <RemapAndLinkDMAtoUARTRx+0x66c>
 800acea:	e557      	b.n	800a79c <RemapAndLinkDMAtoUARTRx+0x11c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800acec:	4a2f      	ldr	r2, [pc, #188]	; (800adac <RemapAndLinkDMAtoUARTRx+0x72c>)
 800acee:	23a8      	movs	r3, #168	; 0xa8
 800acf0:	58d4      	ldr	r4, [r2, r3]
 800acf2:	25f0      	movs	r5, #240	; 0xf0
 800acf4:	43ac      	bics	r4, r5
 800acf6:	50d4      	str	r4, [r2, r3]
 800acf8:	58d4      	ldr	r4, [r2, r3]
 800acfa:	3d20      	subs	r5, #32
 800acfc:	432c      	orrs	r4, r5
 800acfe:	50d4      	str	r4, [r2, r3]
 800ad00:	e59e      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800ad02:	4a2b      	ldr	r2, [pc, #172]	; (800adb0 <RemapAndLinkDMAtoUARTRx+0x730>)
 800ad04:	680c      	ldr	r4, [r1, #0]
 800ad06:	4294      	cmp	r4, r2
 800ad08:	d000      	beq.n	800ad0c <RemapAndLinkDMAtoUARTRx+0x68c>
 800ad0a:	e54b      	b.n	800a7a4 <RemapAndLinkDMAtoUARTRx+0x124>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800ad0c:	4a27      	ldr	r2, [pc, #156]	; (800adac <RemapAndLinkDMAtoUARTRx+0x72c>)
 800ad0e:	23a8      	movs	r3, #168	; 0xa8
 800ad10:	58d4      	ldr	r4, [r2, r3]
 800ad12:	4d20      	ldr	r5, [pc, #128]	; (800ad94 <RemapAndLinkDMAtoUARTRx+0x714>)
 800ad14:	402c      	ands	r4, r5
 800ad16:	50d4      	str	r4, [r2, r3]
 800ad18:	58d5      	ldr	r5, [r2, r3]
 800ad1a:	24d0      	movs	r4, #208	; 0xd0
 800ad1c:	0124      	lsls	r4, r4, #4
 800ad1e:	432c      	orrs	r4, r5
 800ad20:	50d4      	str	r4, [r2, r3]
 800ad22:	e58d      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800ad24:	4a18      	ldr	r2, [pc, #96]	; (800ad88 <RemapAndLinkDMAtoUARTRx+0x708>)
 800ad26:	680c      	ldr	r4, [r1, #0]
 800ad28:	4294      	cmp	r4, r2
 800ad2a:	d000      	beq.n	800ad2e <RemapAndLinkDMAtoUARTRx+0x6ae>
 800ad2c:	e53e      	b.n	800a7ac <RemapAndLinkDMAtoUARTRx+0x12c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800ad2e:	4a17      	ldr	r2, [pc, #92]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800ad30:	23a8      	movs	r3, #168	; 0xa8
 800ad32:	58d4      	ldr	r4, [r2, r3]
 800ad34:	250f      	movs	r5, #15
 800ad36:	43ac      	bics	r4, r5
 800ad38:	50d4      	str	r4, [r2, r3]
 800ad3a:	58d4      	ldr	r4, [r2, r3]
 800ad3c:	3d01      	subs	r5, #1
 800ad3e:	432c      	orrs	r4, r5
 800ad40:	50d4      	str	r4, [r2, r3]
 800ad42:	e57d      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800ad44:	4a12      	ldr	r2, [pc, #72]	; (800ad90 <RemapAndLinkDMAtoUARTRx+0x710>)
 800ad46:	680c      	ldr	r4, [r1, #0]
 800ad48:	4294      	cmp	r4, r2
 800ad4a:	d000      	beq.n	800ad4e <RemapAndLinkDMAtoUARTRx+0x6ce>
 800ad4c:	e532      	b.n	800a7b4 <RemapAndLinkDMAtoUARTRx+0x134>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800ad4e:	4a0f      	ldr	r2, [pc, #60]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800ad50:	23a8      	movs	r3, #168	; 0xa8
 800ad52:	58d4      	ldr	r4, [r2, r3]
 800ad54:	4d0f      	ldr	r5, [pc, #60]	; (800ad94 <RemapAndLinkDMAtoUARTRx+0x714>)
 800ad56:	402c      	ands	r4, r5
 800ad58:	50d4      	str	r4, [r2, r3]
 800ad5a:	58d5      	ldr	r5, [r2, r3]
 800ad5c:	24e0      	movs	r4, #224	; 0xe0
 800ad5e:	0124      	lsls	r4, r4, #4
 800ad60:	432c      	orrs	r4, r5
 800ad62:	50d4      	str	r4, [r2, r3]
 800ad64:	e56c      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800ad66:	4a0c      	ldr	r2, [pc, #48]	; (800ad98 <RemapAndLinkDMAtoUARTRx+0x718>)
 800ad68:	680c      	ldr	r4, [r1, #0]
 800ad6a:	4294      	cmp	r4, r2
 800ad6c:	d000      	beq.n	800ad70 <RemapAndLinkDMAtoUARTRx+0x6f0>
 800ad6e:	e525      	b.n	800a7bc <RemapAndLinkDMAtoUARTRx+0x13c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800ad70:	4a06      	ldr	r2, [pc, #24]	; (800ad8c <RemapAndLinkDMAtoUARTRx+0x70c>)
 800ad72:	23a8      	movs	r3, #168	; 0xa8
 800ad74:	58d4      	ldr	r4, [r2, r3]
 800ad76:	4d09      	ldr	r5, [pc, #36]	; (800ad9c <RemapAndLinkDMAtoUARTRx+0x71c>)
 800ad78:	402c      	ands	r4, r5
 800ad7a:	50d4      	str	r4, [r2, r3]
 800ad7c:	58d5      	ldr	r5, [r2, r3]
 800ad7e:	24e0      	movs	r4, #224	; 0xe0
 800ad80:	0324      	lsls	r4, r4, #12
 800ad82:	432c      	orrs	r4, r5
 800ad84:	50d4      	str	r4, [r2, r3]
 800ad86:	e55b      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800ad88:	40020008 	.word	0x40020008
 800ad8c:	40020000 	.word	0x40020000
 800ad90:	40020030 	.word	0x40020030
 800ad94:	fffff0ff 	.word	0xfffff0ff
 800ad98:	40020058 	.word	0x40020058
 800ad9c:	fff0ffff 	.word	0xfff0ffff
 800ada0:	4002006c 	.word	0x4002006c
 800ada4:	ff0fffff 	.word	0xff0fffff
 800ada8:	4002041c 	.word	0x4002041c
 800adac:	40020400 	.word	0x40020400
 800adb0:	40020430 	.word	0x40020430
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800adb4:	4a41      	ldr	r2, [pc, #260]	; (800aebc <RemapAndLinkDMAtoUARTRx+0x83c>)
 800adb6:	680c      	ldr	r4, [r1, #0]
 800adb8:	4294      	cmp	r4, r2
 800adba:	d000      	beq.n	800adbe <RemapAndLinkDMAtoUARTRx+0x73e>
 800adbc:	e502      	b.n	800a7c4 <RemapAndLinkDMAtoUARTRx+0x144>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800adbe:	4a40      	ldr	r2, [pc, #256]	; (800aec0 <RemapAndLinkDMAtoUARTRx+0x840>)
 800adc0:	23a8      	movs	r3, #168	; 0xa8
 800adc2:	58d4      	ldr	r4, [r2, r3]
 800adc4:	4d3f      	ldr	r5, [pc, #252]	; (800aec4 <RemapAndLinkDMAtoUARTRx+0x844>)
 800adc6:	402c      	ands	r4, r5
 800adc8:	50d4      	str	r4, [r2, r3]
 800adca:	58d5      	ldr	r5, [r2, r3]
 800adcc:	24e0      	movs	r4, #224	; 0xe0
 800adce:	0424      	lsls	r4, r4, #16
 800add0:	432c      	orrs	r4, r5
 800add2:	50d4      	str	r4, [r2, r3]
 800add4:	e534      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800add6:	4a3c      	ldr	r2, [pc, #240]	; (800aec8 <RemapAndLinkDMAtoUARTRx+0x848>)
 800add8:	680c      	ldr	r4, [r1, #0]
 800adda:	4294      	cmp	r4, r2
 800addc:	d000      	beq.n	800ade0 <RemapAndLinkDMAtoUARTRx+0x760>
 800adde:	e4f5      	b.n	800a7cc <RemapAndLinkDMAtoUARTRx+0x14c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800ade0:	4a3a      	ldr	r2, [pc, #232]	; (800aecc <RemapAndLinkDMAtoUARTRx+0x84c>)
 800ade2:	23a8      	movs	r3, #168	; 0xa8
 800ade4:	58d4      	ldr	r4, [r2, r3]
 800ade6:	25f0      	movs	r5, #240	; 0xf0
 800ade8:	43ac      	bics	r4, r5
 800adea:	50d4      	str	r4, [r2, r3]
 800adec:	58d4      	ldr	r4, [r2, r3]
 800adee:	3d10      	subs	r5, #16
 800adf0:	432c      	orrs	r4, r5
 800adf2:	50d4      	str	r4, [r2, r3]
 800adf4:	e524      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800adf6:	4a36      	ldr	r2, [pc, #216]	; (800aed0 <RemapAndLinkDMAtoUARTRx+0x850>)
 800adf8:	680c      	ldr	r4, [r1, #0]
 800adfa:	4294      	cmp	r4, r2
 800adfc:	d000      	beq.n	800ae00 <RemapAndLinkDMAtoUARTRx+0x780>
 800adfe:	e4e9      	b.n	800a7d4 <RemapAndLinkDMAtoUARTRx+0x154>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800ae00:	4a32      	ldr	r2, [pc, #200]	; (800aecc <RemapAndLinkDMAtoUARTRx+0x84c>)
 800ae02:	23a8      	movs	r3, #168	; 0xa8
 800ae04:	58d4      	ldr	r4, [r2, r3]
 800ae06:	4d33      	ldr	r5, [pc, #204]	; (800aed4 <RemapAndLinkDMAtoUARTRx+0x854>)
 800ae08:	402c      	ands	r4, r5
 800ae0a:	50d4      	str	r4, [r2, r3]
 800ae0c:	58d5      	ldr	r5, [r2, r3]
 800ae0e:	24e0      	movs	r4, #224	; 0xe0
 800ae10:	0124      	lsls	r4, r4, #4
 800ae12:	432c      	orrs	r4, r5
 800ae14:	50d4      	str	r4, [r2, r3]
 800ae16:	e513      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800ae18:	4a2f      	ldr	r2, [pc, #188]	; (800aed8 <RemapAndLinkDMAtoUARTRx+0x858>)
 800ae1a:	680c      	ldr	r4, [r1, #0]
 800ae1c:	4294      	cmp	r4, r2
 800ae1e:	d000      	beq.n	800ae22 <RemapAndLinkDMAtoUARTRx+0x7a2>
 800ae20:	e4dc      	b.n	800a7dc <RemapAndLinkDMAtoUARTRx+0x15c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800ae22:	4a27      	ldr	r2, [pc, #156]	; (800aec0 <RemapAndLinkDMAtoUARTRx+0x840>)
 800ae24:	23a8      	movs	r3, #168	; 0xa8
 800ae26:	58d5      	ldr	r5, [r2, r3]
 800ae28:	260f      	movs	r6, #15
 800ae2a:	43b5      	bics	r5, r6
 800ae2c:	50d5      	str	r5, [r2, r3]
 800ae2e:	58d4      	ldr	r4, [r2, r3]
 800ae30:	4334      	orrs	r4, r6
 800ae32:	50d4      	str	r4, [r2, r3]
 800ae34:	e504      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800ae36:	4a29      	ldr	r2, [pc, #164]	; (800aedc <RemapAndLinkDMAtoUARTRx+0x85c>)
 800ae38:	680c      	ldr	r4, [r1, #0]
 800ae3a:	4294      	cmp	r4, r2
 800ae3c:	d000      	beq.n	800ae40 <RemapAndLinkDMAtoUARTRx+0x7c0>
 800ae3e:	e4d1      	b.n	800a7e4 <RemapAndLinkDMAtoUARTRx+0x164>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800ae40:	4a1f      	ldr	r2, [pc, #124]	; (800aec0 <RemapAndLinkDMAtoUARTRx+0x840>)
 800ae42:	23a8      	movs	r3, #168	; 0xa8
 800ae44:	58d4      	ldr	r4, [r2, r3]
 800ae46:	4d23      	ldr	r5, [pc, #140]	; (800aed4 <RemapAndLinkDMAtoUARTRx+0x854>)
 800ae48:	402c      	ands	r4, r5
 800ae4a:	50d4      	str	r4, [r2, r3]
 800ae4c:	58d5      	ldr	r5, [r2, r3]
 800ae4e:	24f0      	movs	r4, #240	; 0xf0
 800ae50:	0124      	lsls	r4, r4, #4
 800ae52:	432c      	orrs	r4, r5
 800ae54:	50d4      	str	r4, [r2, r3]
 800ae56:	e4f3      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800ae58:	4a21      	ldr	r2, [pc, #132]	; (800aee0 <RemapAndLinkDMAtoUARTRx+0x860>)
 800ae5a:	680c      	ldr	r4, [r1, #0]
 800ae5c:	4294      	cmp	r4, r2
 800ae5e:	d000      	beq.n	800ae62 <RemapAndLinkDMAtoUARTRx+0x7e2>
 800ae60:	e4c4      	b.n	800a7ec <RemapAndLinkDMAtoUARTRx+0x16c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800ae62:	4a17      	ldr	r2, [pc, #92]	; (800aec0 <RemapAndLinkDMAtoUARTRx+0x840>)
 800ae64:	23a8      	movs	r3, #168	; 0xa8
 800ae66:	58d4      	ldr	r4, [r2, r3]
 800ae68:	4d1e      	ldr	r5, [pc, #120]	; (800aee4 <RemapAndLinkDMAtoUARTRx+0x864>)
 800ae6a:	402c      	ands	r4, r5
 800ae6c:	50d4      	str	r4, [r2, r3]
 800ae6e:	58d5      	ldr	r5, [r2, r3]
 800ae70:	24f0      	movs	r4, #240	; 0xf0
 800ae72:	0324      	lsls	r4, r4, #12
 800ae74:	432c      	orrs	r4, r5
 800ae76:	50d4      	str	r4, [r2, r3]
 800ae78:	e4e2      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800ae7a:	4a10      	ldr	r2, [pc, #64]	; (800aebc <RemapAndLinkDMAtoUARTRx+0x83c>)
 800ae7c:	680c      	ldr	r4, [r1, #0]
 800ae7e:	4294      	cmp	r4, r2
 800ae80:	d000      	beq.n	800ae84 <RemapAndLinkDMAtoUARTRx+0x804>
 800ae82:	e4b7      	b.n	800a7f4 <RemapAndLinkDMAtoUARTRx+0x174>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800ae84:	4a0e      	ldr	r2, [pc, #56]	; (800aec0 <RemapAndLinkDMAtoUARTRx+0x840>)
 800ae86:	23a8      	movs	r3, #168	; 0xa8
 800ae88:	58d4      	ldr	r4, [r2, r3]
 800ae8a:	4d0e      	ldr	r5, [pc, #56]	; (800aec4 <RemapAndLinkDMAtoUARTRx+0x844>)
 800ae8c:	402c      	ands	r4, r5
 800ae8e:	50d4      	str	r4, [r2, r3]
 800ae90:	58d5      	ldr	r5, [r2, r3]
 800ae92:	24f0      	movs	r4, #240	; 0xf0
 800ae94:	0424      	lsls	r4, r4, #16
 800ae96:	432c      	orrs	r4, r5
 800ae98:	50d4      	str	r4, [r2, r3]
 800ae9a:	e4d1      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800ae9c:	4a0a      	ldr	r2, [pc, #40]	; (800aec8 <RemapAndLinkDMAtoUARTRx+0x848>)
 800ae9e:	680c      	ldr	r4, [r1, #0]
 800aea0:	4294      	cmp	r4, r2
 800aea2:	d000      	beq.n	800aea6 <RemapAndLinkDMAtoUARTRx+0x826>
 800aea4:	e4aa      	b.n	800a7fc <RemapAndLinkDMAtoUARTRx+0x17c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800aea6:	4a09      	ldr	r2, [pc, #36]	; (800aecc <RemapAndLinkDMAtoUARTRx+0x84c>)
 800aea8:	23a8      	movs	r3, #168	; 0xa8
 800aeaa:	58d5      	ldr	r5, [r2, r3]
 800aeac:	26f0      	movs	r6, #240	; 0xf0
 800aeae:	43b5      	bics	r5, r6
 800aeb0:	50d5      	str	r5, [r2, r3]
 800aeb2:	58d4      	ldr	r4, [r2, r3]
 800aeb4:	4334      	orrs	r4, r6
 800aeb6:	50d4      	str	r4, [r2, r3]
 800aeb8:	e4c2      	b.n	800a840 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800aeba:	46c0      	nop			; (mov r8, r8)
 800aebc:	4002006c 	.word	0x4002006c
 800aec0:	40020000 	.word	0x40020000
 800aec4:	ff0fffff 	.word	0xff0fffff
 800aec8:	4002041c 	.word	0x4002041c
 800aecc:	40020400 	.word	0x40020400
 800aed0:	40020430 	.word	0x40020430
 800aed4:	fffff0ff 	.word	0xfffff0ff
 800aed8:	40020008 	.word	0x40020008
 800aedc:	40020030 	.word	0x40020030
 800aee0:	40020058 	.word	0x40020058
 800aee4:	fff0ffff 	.word	0xfff0ffff

0800aee8 <DMA_MSG_RX_Setup>:
{	
 800aee8:	b570      	push	{r4, r5, r6, lr}
 800aeea:	0004      	movs	r4, r0
 800aeec:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800aeee:	f7ff fbc7 	bl	800a680 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800aef2:	2100      	movs	r1, #0
 800aef4:	0028      	movs	r0, r5
 800aef6:	f7ff fb0d 	bl	800a514 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);	
 800aefa:	0020      	movs	r0, r4
 800aefc:	f7ff f9c4 	bl	800a288 <GetPort>
 800af00:	1e41      	subs	r1, r0, #1
 800af02:	4803      	ldr	r0, [pc, #12]	; (800af10 <DMA_MSG_RX_Setup+0x28>)
 800af04:	1809      	adds	r1, r1, r0
 800af06:	2201      	movs	r2, #1
 800af08:	0020      	movs	r0, r4
 800af0a:	f007 f82d 	bl	8011f68 <HAL_UART_Receive_DMA>
}
 800af0e:	bd70      	pop	{r4, r5, r6, pc}
 800af10:	20001c94 	.word	0x20001c94

0800af14 <SetupMessagingRxDMAs>:
{	
 800af14:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800af16:	4b17      	ldr	r3, [pc, #92]	; (800af74 <SetupMessagingRxDMAs+0x60>)
 800af18:	785b      	ldrb	r3, [r3, #1]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d010      	beq.n	800af40 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800af1e:	4b15      	ldr	r3, [pc, #84]	; (800af74 <SetupMessagingRxDMAs+0x60>)
 800af20:	789b      	ldrb	r3, [r3, #2]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d011      	beq.n	800af4a <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800af26:	4b13      	ldr	r3, [pc, #76]	; (800af74 <SetupMessagingRxDMAs+0x60>)
 800af28:	78db      	ldrb	r3, [r3, #3]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d012      	beq.n	800af54 <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800af2e:	4b11      	ldr	r3, [pc, #68]	; (800af74 <SetupMessagingRxDMAs+0x60>)
 800af30:	791b      	ldrb	r3, [r3, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d013      	beq.n	800af5e <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800af36:	4b0f      	ldr	r3, [pc, #60]	; (800af74 <SetupMessagingRxDMAs+0x60>)
 800af38:	795b      	ldrb	r3, [r3, #5]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d014      	beq.n	800af68 <SetupMessagingRxDMAs+0x54>
}
 800af3e:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800af40:	490d      	ldr	r1, [pc, #52]	; (800af78 <SetupMessagingRxDMAs+0x64>)
 800af42:	480e      	ldr	r0, [pc, #56]	; (800af7c <SetupMessagingRxDMAs+0x68>)
 800af44:	f7ff ffd0 	bl	800aee8 <DMA_MSG_RX_Setup>
 800af48:	e7e9      	b.n	800af1e <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800af4a:	490d      	ldr	r1, [pc, #52]	; (800af80 <SetupMessagingRxDMAs+0x6c>)
 800af4c:	480d      	ldr	r0, [pc, #52]	; (800af84 <SetupMessagingRxDMAs+0x70>)
 800af4e:	f7ff ffcb 	bl	800aee8 <DMA_MSG_RX_Setup>
 800af52:	e7e8      	b.n	800af26 <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800af54:	490c      	ldr	r1, [pc, #48]	; (800af88 <SetupMessagingRxDMAs+0x74>)
 800af56:	480d      	ldr	r0, [pc, #52]	; (800af8c <SetupMessagingRxDMAs+0x78>)
 800af58:	f7ff ffc6 	bl	800aee8 <DMA_MSG_RX_Setup>
 800af5c:	e7e7      	b.n	800af2e <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800af5e:	490c      	ldr	r1, [pc, #48]	; (800af90 <SetupMessagingRxDMAs+0x7c>)
 800af60:	480c      	ldr	r0, [pc, #48]	; (800af94 <SetupMessagingRxDMAs+0x80>)
 800af62:	f7ff ffc1 	bl	800aee8 <DMA_MSG_RX_Setup>
 800af66:	e7e6      	b.n	800af36 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800af68:	490b      	ldr	r1, [pc, #44]	; (800af98 <SetupMessagingRxDMAs+0x84>)
 800af6a:	480c      	ldr	r0, [pc, #48]	; (800af9c <SetupMessagingRxDMAs+0x88>)
 800af6c:	f7ff ffbc 	bl	800aee8 <DMA_MSG_RX_Setup>
}
 800af70:	e7e5      	b.n	800af3e <SetupMessagingRxDMAs+0x2a>
 800af72:	46c0      	nop			; (mov r8, r8)
 800af74:	20000c2c 	.word	0x20000c2c
 800af78:	20002250 	.word	0x20002250
 800af7c:	20006ba8 	.word	0x20006ba8
 800af80:	20002288 	.word	0x20002288
 800af84:	20006ac8 	.word	0x20006ac8
 800af88:	200022c0 	.word	0x200022c0
 800af8c:	200069e8 	.word	0x200069e8
 800af90:	200022f8 	.word	0x200022f8
 800af94:	20006b38 	.word	0x20006b38
 800af98:	20002330 	.word	0x20002330
 800af9c:	20006968 	.word	0x20006968

0800afa0 <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800afa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afa2:	b083      	sub	sp, #12
 800afa4:	0004      	movs	r4, r0
	StopStreamDMA(port);
 800afa6:	f7ff fa75 	bl	800a494 <StopStreamDMA>
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800afaa:	9401      	str	r4, [sp, #4]
 800afac:	3c01      	subs	r4, #1
 800afae:	00e7      	lsls	r7, r4, #3
 800afb0:	1b3b      	subs	r3, r7, r4
 800afb2:	00dd      	lsls	r5, r3, #3
 800afb4:	4b0f      	ldr	r3, [pc, #60]	; (800aff4 <SwitchStreamDMAToMsg+0x54>)
 800afb6:	18ed      	adds	r5, r5, r3
 800afb8:	4e0f      	ldr	r6, [pc, #60]	; (800aff8 <SwitchStreamDMAToMsg+0x58>)
 800afba:	1b3a      	subs	r2, r7, r4
 800afbc:	00d3      	lsls	r3, r2, #3
 800afbe:	5999      	ldr	r1, [r3, r6]
 800afc0:	0028      	movs	r0, r5
 800afc2:	f7ff f9e1 	bl	800a388 <DMA_MSG_RX_CH_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800afc6:	1b3a      	subs	r2, r7, r4
 800afc8:	00d3      	lsls	r3, r2, #3
 800afca:	18f3      	adds	r3, r6, r3
 800afcc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800afce:	f7ff f95b 	bl	800a288 <GetPort>
 800afd2:	2300      	movs	r3, #0
 800afd4:	4a09      	ldr	r2, [pc, #36]	; (800affc <SwitchStreamDMAToMsg+0x5c>)
 800afd6:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance = 0;
 800afd8:	1b3f      	subs	r7, r7, r4
 800afda:	00fa      	lsls	r2, r7, #3
 800afdc:	5193      	str	r3, [r2, r6]
	dmaStreamDst[port - 1] = 0;
 800afde:	00a4      	lsls	r4, r4, #2
 800afe0:	4a07      	ldr	r2, [pc, #28]	; (800b000 <SwitchStreamDMAToMsg+0x60>)
 800afe2:	50a3      	str	r3, [r4, r2]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800afe4:	9801      	ldr	r0, [sp, #4]
 800afe6:	f002 fb3d 	bl	800d664 <GetUart>
 800afea:	0029      	movs	r1, r5
 800afec:	f7ff ff7c 	bl	800aee8 <DMA_MSG_RX_Setup>
}
 800aff0:	b003      	add	sp, #12
 800aff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aff4:	20002250 	.word	0x20002250
 800aff8:	20002058 	.word	0x20002058
 800affc:	20000c2c 	.word	0x20000c2c
 800b000:	20001850 	.word	0x20001850

0800b004 <DMA_STREAM_Setup>:
{	
 800b004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b006:	0005      	movs	r5, r0
 800b008:	000f      	movs	r7, r1
 800b00a:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800b00c:	f7ff f93c 	bl	800a288 <GetPort>
	hDMA = &streamDMA[port-1];
 800b010:	3801      	subs	r0, #1
 800b012:	00c3      	lsls	r3, r0, #3
 800b014:	1a18      	subs	r0, r3, r0
 800b016:	00c4      	lsls	r4, r0, #3
 800b018:	4b09      	ldr	r3, [pc, #36]	; (800b040 <DMA_STREAM_Setup+0x3c>)
 800b01a:	18e4      	adds	r4, r4, r3
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800b01c:	0021      	movs	r1, r4
 800b01e:	0028      	movs	r0, r5
 800b020:	f7ff fb2e 	bl	800a680 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800b024:	2101      	movs	r1, #1
 800b026:	0020      	movs	r0, r4
 800b028:	f7ff fa74 	bl	800a514 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800b02c:	2369      	movs	r3, #105	; 0x69
 800b02e:	2201      	movs	r2, #1
 800b030:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	3128      	adds	r1, #40	; 0x28
 800b036:	0032      	movs	r2, r6
 800b038:	0028      	movs	r0, r5
 800b03a:	f006 ff95 	bl	8011f68 <HAL_UART_Receive_DMA>
}
 800b03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b040:	20002058 	.word	0x20002058

0800b044 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800b044:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800b046:	4807      	ldr	r0, [pc, #28]	; (800b064 <CRC_Init+0x20>)
 800b048:	4b07      	ldr	r3, [pc, #28]	; (800b068 <CRC_Init+0x24>)
 800b04a:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800b04c:	2310      	movs	r3, #16
 800b04e:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800b050:	2300      	movs	r3, #0
 800b052:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800b054:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800b056:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800b058:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800b05a:	3303      	adds	r3, #3
 800b05c:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800b05e:	f004 ff4c 	bl	800fefa <HAL_CRC_Init>
}
 800b062:	bd10      	pop	{r4, pc}
 800b064:	20006c18 	.word	0x20006c18
 800b068:	40023000 	.word	0x40023000

0800b06c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800b06c:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800b06e:	4a05      	ldr	r2, [pc, #20]	; (800b084 <HAL_CRC_MspInit+0x18>)
 800b070:	6951      	ldr	r1, [r2, #20]
 800b072:	2340      	movs	r3, #64	; 0x40
 800b074:	4319      	orrs	r1, r3
 800b076:	6151      	str	r1, [r2, #20]
 800b078:	6952      	ldr	r2, [r2, #20]
 800b07a:	4013      	ands	r3, r2
 800b07c:	9301      	str	r3, [sp, #4]
 800b07e:	9b01      	ldr	r3, [sp, #4]
}
 800b080:	b002      	add	sp, #8
 800b082:	4770      	bx	lr
 800b084:	40021000 	.word	0x40021000

0800b088 <CalculateCRC8>:
/*
 * calculate CRC8 byte for a data buffer
 */

uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
 800b088:	b530      	push	{r4, r5, lr}
 800b08a:	b083      	sub	sp, #12
 800b08c:	0005      	movs	r5, r0
 800b08e:	000c      	movs	r4, r1
  uint8_t pTemp;
  uint8_t temp_index;
  uint8_t temp_buffer[4] = {0};
 800b090:	2300      	movs	r3, #0
 800b092:	9301      	str	r3, [sp, #4]

  /* check if the passed variables are null */
  if (NULL!=pBuffer && 0!=size)
 800b094:	2800      	cmp	r0, #0
 800b096:	d03c      	beq.n	800b112 <CalculateCRC8+0x8a>
 800b098:	2900      	cmp	r1, #0
 800b09a:	d03c      	beq.n	800b116 <CalculateCRC8+0x8e>
  {
	if(size < 4)
 800b09c:	2903      	cmp	r1, #3
 800b09e:	d816      	bhi.n	800b0ce <CalculateCRC8+0x46>
	{
		temp_index = 0;
		for(int i=0; i<4; i++)
 800b0a0:	2300      	movs	r3, #0
		temp_index = 0;
 800b0a2:	2100      	movs	r1, #0
		for(int i=0; i<4; i++)
 800b0a4:	2b03      	cmp	r3, #3
 800b0a6:	dc0b      	bgt.n	800b0c0 <CalculateCRC8+0x38>
		{
			temp_buffer[i] = pBuffer[temp_index++];
 800b0a8:	1c4a      	adds	r2, r1, #1
 800b0aa:	b2d2      	uxtb	r2, r2
 800b0ac:	5c68      	ldrb	r0, [r5, r1]
 800b0ae:	a901      	add	r1, sp, #4
 800b0b0:	54c8      	strb	r0, [r1, r3]
			if(--size == 0) break;
 800b0b2:	3c01      	subs	r4, #1
 800b0b4:	b2a4      	uxth	r4, r4
 800b0b6:	2c00      	cmp	r4, #0
 800b0b8:	d002      	beq.n	800b0c0 <CalculateCRC8+0x38>
		for(int i=0; i<4; i++)
 800b0ba:	3301      	adds	r3, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800b0bc:	0011      	movs	r1, r2
 800b0be:	e7f1      	b.n	800b0a4 <CalculateCRC8+0x1c>
		}
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	a901      	add	r1, sp, #4
 800b0c4:	4815      	ldr	r0, [pc, #84]	; (800b11c <CalculateCRC8+0x94>)
 800b0c6:	f004 ff73 	bl	800ffb0 <HAL_CRC_Calculate>
 800b0ca:	b2c0      	uxtb	r0, r0
 800b0cc:	e024      	b.n	800b118 <CalculateCRC8+0x90>

	}

	else
	{
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800b0ce:	088a      	lsrs	r2, r1, #2
 800b0d0:	0001      	movs	r1, r0
 800b0d2:	4812      	ldr	r0, [pc, #72]	; (800b11c <CalculateCRC8+0x94>)
 800b0d4:	f004 ff6c 	bl	800ffb0 <HAL_CRC_Calculate>
 800b0d8:	b2c0      	uxtb	r0, r0
		if ((size%4)!=0)
 800b0da:	2303      	movs	r3, #3
 800b0dc:	4023      	ands	r3, r4
 800b0de:	d01b      	beq.n	800b118 <CalculateCRC8+0x90>
		{
			temp_index = size - (size%4);
 800b0e0:	b2e4      	uxtb	r4, r4
 800b0e2:	2203      	movs	r2, #3
 800b0e4:	4394      	bics	r4, r2
			size %= 4;
			for(int i=0; i<4; i++)
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	2a03      	cmp	r2, #3
 800b0ea:	dc0b      	bgt.n	800b104 <CalculateCRC8+0x7c>
			{
				temp_buffer[i] = pBuffer[temp_index++];
 800b0ec:	1c61      	adds	r1, r4, #1
 800b0ee:	b2c9      	uxtb	r1, r1
 800b0f0:	5d2c      	ldrb	r4, [r5, r4]
 800b0f2:	a801      	add	r0, sp, #4
 800b0f4:	5484      	strb	r4, [r0, r2]
				if(--size == 0) break;
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d002      	beq.n	800b104 <CalculateCRC8+0x7c>
			for(int i=0; i<4; i++)
 800b0fe:	3201      	adds	r2, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800b100:	000c      	movs	r4, r1
 800b102:	e7f1      	b.n	800b0e8 <CalculateCRC8+0x60>
			}
		  	pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b104:	2201      	movs	r2, #1
 800b106:	a901      	add	r1, sp, #4
 800b108:	4804      	ldr	r0, [pc, #16]	; (800b11c <CalculateCRC8+0x94>)
 800b10a:	f004 ff27 	bl	800ff5c <HAL_CRC_Accumulate>
 800b10e:	b2c0      	uxtb	r0, r0
 800b110:	e002      	b.n	800b118 <CalculateCRC8+0x90>

	return pTemp;
  }
  
else
	return 0;
 800b112:	2000      	movs	r0, #0
 800b114:	e000      	b.n	800b118 <CalculateCRC8+0x90>
 800b116:	2000      	movs	r0, #0
}
 800b118:	b003      	add	sp, #12
 800b11a:	bd30      	pop	{r4, r5, pc}
 800b11c:	20006c18 	.word	0x20006c18

0800b120 <EE_FindValidPage>:
 */
static uint16_t EE_FindValidPage(uint8_t Operation){
	uint16_t PageStatusA =6, PageStatusB =6;
	
	/* Get PageA actual status */
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b120:	4b13      	ldr	r3, [pc, #76]	; (800b170 <EE_FindValidPage+0x50>)
 800b122:	881b      	ldrh	r3, [r3, #0]
 800b124:	b29b      	uxth	r3, r3
	
	/* Get PageB actual status */
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b126:	4a13      	ldr	r2, [pc, #76]	; (800b174 <EE_FindValidPage+0x54>)
 800b128:	8812      	ldrh	r2, [r2, #0]
 800b12a:	b292      	uxth	r2, r2
	
	/* Write or read operation */
	switch(Operation){
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d00f      	beq.n	800b150 <EE_FindValidPage+0x30>
 800b130:	2801      	cmp	r0, #1
 800b132:	d113      	bne.n	800b15c <EE_FindValidPage+0x3c>
		case WRITE_IN_VALID_PAGE: /* ---- Write operation ---- */
			if(PageStatusB == VALID_PAGE){
 800b134:	2a00      	cmp	r2, #0
 800b136:	d104      	bne.n	800b142 <EE_FindValidPage+0x22>
				/* PageA receiving data */
				if(PageStatusA == RECEIVE_DATA){
 800b138:	490f      	ldr	r1, [pc, #60]	; (800b178 <EE_FindValidPage+0x58>)
 800b13a:	428b      	cmp	r3, r1
 800b13c:	d111      	bne.n	800b162 <EE_FindValidPage+0x42>
					return PAGEA; /* PageA valid */
 800b13e:	0013      	movs	r3, r2
 800b140:	e00d      	b.n	800b15e <EE_FindValidPage+0x3e>
				}
				else{
					return PAGEB; /* PageB valid */
				}
			}
			else if(PageStatusA == VALID_PAGE){
 800b142:	2b00      	cmp	r3, #0
 800b144:	d10f      	bne.n	800b166 <EE_FindValidPage+0x46>
				/* PageB receiving data */
				if(PageStatusB == RECEIVE_DATA){
 800b146:	490c      	ldr	r1, [pc, #48]	; (800b178 <EE_FindValidPage+0x58>)
 800b148:	428a      	cmp	r2, r1
 800b14a:	d108      	bne.n	800b15e <EE_FindValidPage+0x3e>
					return PAGEB; /* PageB valid */
 800b14c:	3302      	adds	r3, #2
 800b14e:	e006      	b.n	800b15e <EE_FindValidPage+0x3e>
			else{
				return NO_VALID_PAGE; /* No valid Page */
			}
			
		case READ_FROM_VALID_PAGE: /* ---- Read operation ---- */
			if(PageStatusA == VALID_PAGE){
 800b150:	2b00      	cmp	r3, #0
 800b152:	d004      	beq.n	800b15e <EE_FindValidPage+0x3e>
				return PAGEA; /* PageA valid */
			}
			else if(PageStatusB == VALID_PAGE){
 800b154:	2a00      	cmp	r2, #0
 800b156:	d108      	bne.n	800b16a <EE_FindValidPage+0x4a>
				return PAGEB; /* PageB valid */
 800b158:	2302      	movs	r3, #2
 800b15a:	e000      	b.n	800b15e <EE_FindValidPage+0x3e>
			else{
				return NO_VALID_PAGE; /* No valid Page */
			}
			
		default:
			return PAGEA; /* PageA valid */
 800b15c:	2300      	movs	r3, #0
	}
}
 800b15e:	0018      	movs	r0, r3
 800b160:	4770      	bx	lr
					return PAGEB; /* PageB valid */
 800b162:	2302      	movs	r3, #2
 800b164:	e7fb      	b.n	800b15e <EE_FindValidPage+0x3e>
				return NO_VALID_PAGE; /* No valid Page */
 800b166:	23ab      	movs	r3, #171	; 0xab
 800b168:	e7f9      	b.n	800b15e <EE_FindValidPage+0x3e>
				return NO_VALID_PAGE; /* No valid Page */
 800b16a:	23ab      	movs	r3, #171	; 0xab
 800b16c:	e7f7      	b.n	800b15e <EE_FindValidPage+0x3e>
 800b16e:	46c0      	nop			; (mov r8, r8)
 800b170:	0801e000 	.word	0x0801e000
 800b174:	0801f000 	.word	0x0801f000
 800b178:	0000eeee 	.word	0x0000eeee

0800b17c <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800b17c:	b570      	push	{r4, r5, r6, lr}
 800b17e:	0005      	movs	r5, r0
 800b180:	000e      	movs	r6, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800b182:	f005 fc5d 	bl	8010a40 <HAL_FLASH_Unlock>
	
	/* Get valid Page for write operation */
	ValidPage =EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800b186:	2001      	movs	r0, #1
 800b188:	f7ff ffca 	bl	800b120 <EE_FindValidPage>
 800b18c:	0003      	movs	r3, r0
	
	/* Check if there is no valid page */
	if(ValidPage == NO_VALID_PAGE){
 800b18e:	28ab      	cmp	r0, #171	; 0xab
 800b190:	d03d      	beq.n	800b20e <EE_VerifyPageFullWriteVariable+0x92>
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800b192:	4b20      	ldr	r3, [pc, #128]	; (800b214 <EE_VerifyPageFullWriteVariable+0x98>)
 800b194:	18c4      	adds	r4, r0, r3
 800b196:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800b198:	3002      	adds	r0, #2
 800b19a:	02c0      	lsls	r0, r0, #11
 800b19c:	4b1e      	ldr	r3, [pc, #120]	; (800b218 <EE_VerifyPageFullWriteVariable+0x9c>)
 800b19e:	469c      	mov	ip, r3
 800b1a0:	4460      	add	r0, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
 800b1a2:	4284      	cmp	r4, r0
 800b1a4:	d230      	bcs.n	800b208 <EE_VerifyPageFullWriteVariable+0x8c>
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	d001      	beq.n	800b1b0 <EE_VerifyPageFullWriteVariable+0x34>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800b1ac:	3404      	adds	r4, #4
 800b1ae:	e7f8      	b.n	800b1a2 <EE_VerifyPageFullWriteVariable+0x26>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800b1b0:	0032      	movs	r2, r6
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	0021      	movs	r1, r4
 800b1b6:	2001      	movs	r0, #1
 800b1b8:	f005 fc8e 	bl	8010ad8 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b1bc:	4817      	ldr	r0, [pc, #92]	; (800b21c <EE_VerifyPageFullWriteVariable+0xa0>)
 800b1be:	f005 fc5d 	bl	8010a7c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	d003      	beq.n	800b1ce <EE_VerifyPageFullWriteVariable+0x52>
				return pFlash.ErrorCode;
 800b1c6:	4b16      	ldr	r3, [pc, #88]	; (800b220 <EE_VerifyPageFullWriteVariable+0xa4>)
 800b1c8:	69db      	ldr	r3, [r3, #28]
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	e01f      	b.n	800b20e <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b1ce:	4a15      	ldr	r2, [pc, #84]	; (800b224 <EE_VerifyPageFullWriteVariable+0xa8>)
 800b1d0:	6913      	ldr	r3, [r2, #16]
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	438b      	bics	r3, r1
 800b1d6:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b1d8:	1ca1      	adds	r1, r4, #2
 800b1da:	002a      	movs	r2, r5
 800b1dc:	2300      	movs	r3, #0
 800b1de:	2001      	movs	r0, #1
 800b1e0:	f005 fc7a 	bl	8010ad8 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b1e4:	480d      	ldr	r0, [pc, #52]	; (800b21c <EE_VerifyPageFullWriteVariable+0xa0>)
 800b1e6:	f005 fc49 	bl	8010a7c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	d003      	beq.n	800b1f6 <EE_VerifyPageFullWriteVariable+0x7a>
				return pFlash.ErrorCode;
 800b1ee:	4b0c      	ldr	r3, [pc, #48]	; (800b220 <EE_VerifyPageFullWriteVariable+0xa4>)
 800b1f0:	69db      	ldr	r3, [r3, #28]
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	e00b      	b.n	800b20e <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b1f6:	4a0b      	ldr	r2, [pc, #44]	; (800b224 <EE_VerifyPageFullWriteVariable+0xa8>)
 800b1f8:	6913      	ldr	r3, [r2, #16]
 800b1fa:	2101      	movs	r1, #1
 800b1fc:	438b      	bics	r3, r1
 800b1fe:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 800b200:	4b07      	ldr	r3, [pc, #28]	; (800b220 <EE_VerifyPageFullWriteVariable+0xa4>)
 800b202:	69db      	ldr	r3, [r3, #28]
 800b204:	b29b      	uxth	r3, r3
 800b206:	e002      	b.n	800b20e <EE_VerifyPageFullWriteVariable+0x92>
		}
	}
	
	HAL_FLASH_Lock();
 800b208:	f005 fc2e 	bl	8010a68 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800b20c:	2380      	movs	r3, #128	; 0x80
}
 800b20e:	0018      	movs	r0, r3
 800b210:	bd70      	pop	{r4, r5, r6, pc}
 800b212:	46c0      	nop			; (mov r8, r8)
 800b214:	0001003c 	.word	0x0001003c
 800b218:	0801dffe 	.word	0x0801dffe
 800b21c:	0000c350 	.word	0x0000c350
 800b220:	20006dd0 	.word	0x20006dd0
 800b224:	40022000 	.word	0x40022000

0800b228 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800b228:	b570      	push	{r4, r5, r6, lr}
 800b22a:	0005      	movs	r5, r0
 800b22c:	000c      	movs	r4, r1
	ValidPage =EE_FindValidPage(READ_FROM_VALID_PAGE);
 800b22e:	2000      	movs	r0, #0
 800b230:	f7ff ff76 	bl	800b120 <EE_FindValidPage>
 800b234:	0003      	movs	r3, r0
	if(ValidPage == NO_VALID_PAGE){
 800b236:	28ab      	cmp	r0, #171	; 0xab
 800b238:	d016      	beq.n	800b268 <EE_ReadVariable+0x40>
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800b23a:	4b0c      	ldr	r3, [pc, #48]	; (800b26c <EE_ReadVariable+0x44>)
 800b23c:	18c2      	adds	r2, r0, r3
 800b23e:	02d2      	lsls	r2, r2, #11
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800b240:	3002      	adds	r0, #2
 800b242:	02c0      	lsls	r0, r0, #11
 800b244:	4b0a      	ldr	r3, [pc, #40]	; (800b270 <EE_ReadVariable+0x48>)
 800b246:	469c      	mov	ip, r3
 800b248:	4460      	add	r0, ip
	while(Address > (PageStartAddress + 2)){
 800b24a:	1c93      	adds	r3, r2, #2
 800b24c:	4283      	cmp	r3, r0
 800b24e:	d20a      	bcs.n	800b266 <EE_ReadVariable+0x3e>
		AddressValue =(*(__IO uint16_t* )Address);
 800b250:	8803      	ldrh	r3, [r0, #0]
 800b252:	b29b      	uxth	r3, r3
		if(AddressValue == VirtAddress){
 800b254:	42ab      	cmp	r3, r5
 800b256:	d001      	beq.n	800b25c <EE_ReadVariable+0x34>
			Address =Address - 4;
 800b258:	3804      	subs	r0, #4
 800b25a:	e7f6      	b.n	800b24a <EE_ReadVariable+0x22>
			*Data =(*(__IO uint16_t* )(Address - 2));
 800b25c:	3802      	subs	r0, #2
 800b25e:	8803      	ldrh	r3, [r0, #0]
 800b260:	8023      	strh	r3, [r4, #0]
			ReadStatus =0;
 800b262:	2300      	movs	r3, #0
			break;
 800b264:	e000      	b.n	800b268 <EE_ReadVariable+0x40>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800b266:	2301      	movs	r3, #1
}
 800b268:	0018      	movs	r0, r3
 800b26a:	bd70      	pop	{r4, r5, r6, pc}
 800b26c:	0001003c 	.word	0x0001003c
 800b270:	0801dffe 	.word	0x0801dffe

0800b274 <EE_PageTransfer>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_PageTransfer(uint16_t VirtAddress,uint16_t Data){
 800b274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b276:	0006      	movs	r6, r0
 800b278:	000c      	movs	r4, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800b27a:	f005 fbe1 	bl	8010a40 <HAL_FLASH_Unlock>
	
	/* Get active Page for read operation */
	ValidPage =EE_FindValidPage(READ_FROM_VALID_PAGE);
 800b27e:	2000      	movs	r0, #0
 800b280:	f7ff ff4e 	bl	800b120 <EE_FindValidPage>
	
	if(ValidPage == PAGEB) /* PageB valid */
 800b284:	2802      	cmp	r0, #2
 800b286:	d013      	beq.n	800b2b0 <EE_PageTransfer+0x3c>
		NewPageAddress = PAGEA1_BASE_ADDRESS;
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEB1_BASE_ADDRESS;
	}
	else if(ValidPage == PAGEA) /* PageA valid */
 800b288:	2800      	cmp	r0, #0
 800b28a:	d000      	beq.n	800b28e <EE_PageTransfer+0x1a>
 800b28c:	e06d      	b.n	800b36a <EE_PageTransfer+0xf6>
	{
		/* New page address where variable will be moved to */
		NewPageAddress = PAGEB1_BASE_ADDRESS;
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800b28e:	4f38      	ldr	r7, [pc, #224]	; (800b370 <EE_PageTransfer+0xfc>)
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800b290:	4d38      	ldr	r5, [pc, #224]	; (800b374 <EE_PageTransfer+0x100>)
	else{
		return NO_VALID_PAGE; /* No valid Page */
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800b292:	4a39      	ldr	r2, [pc, #228]	; (800b378 <EE_PageTransfer+0x104>)
 800b294:	2300      	movs	r3, #0
 800b296:	0029      	movs	r1, r5
 800b298:	2001      	movs	r0, #1
 800b29a:	f005 fc1d 	bl	8010ad8 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b29e:	4837      	ldr	r0, [pc, #220]	; (800b37c <EE_PageTransfer+0x108>)
 800b2a0:	f005 fbec 	bl	8010a7c <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d006      	beq.n	800b2b6 <EE_PageTransfer+0x42>
		return pFlash.ErrorCode;
 800b2a8:	4b35      	ldr	r3, [pc, #212]	; (800b380 <EE_PageTransfer+0x10c>)
 800b2aa:	69d8      	ldr	r0, [r3, #28]
 800b2ac:	b280      	uxth	r0, r0
	
	HAL_FLASH_Lock();
	
	/* Return last operation flash status */
	return FlashStatus;
}
 800b2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800b2b0:	4f30      	ldr	r7, [pc, #192]	; (800b374 <EE_PageTransfer+0x100>)
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800b2b2:	4d2f      	ldr	r5, [pc, #188]	; (800b370 <EE_PageTransfer+0xfc>)
 800b2b4:	e7ed      	b.n	800b292 <EE_PageTransfer+0x1e>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b2b6:	4a33      	ldr	r2, [pc, #204]	; (800b384 <EE_PageTransfer+0x110>)
 800b2b8:	6913      	ldr	r3, [r2, #16]
 800b2ba:	2101      	movs	r1, #1
 800b2bc:	438b      	bics	r3, r1
 800b2be:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800b2c0:	0021      	movs	r1, r4
 800b2c2:	0030      	movs	r0, r6
 800b2c4:	f7ff ff5a 	bl	800b17c <EE_VerifyPageFullWriteVariable>
	if(EepromStatus != HAL_OK){
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d1f0      	bne.n	800b2ae <EE_PageTransfer+0x3a>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b2cc:	2401      	movs	r4, #1
 800b2ce:	e001      	b.n	800b2d4 <EE_PageTransfer+0x60>
 800b2d0:	3401      	adds	r4, #1
 800b2d2:	b2a4      	uxth	r4, r4
 800b2d4:	2380      	movs	r3, #128	; 0x80
 800b2d6:	00db      	lsls	r3, r3, #3
 800b2d8:	429c      	cmp	r4, r3
 800b2da:	d80f      	bhi.n	800b2fc <EE_PageTransfer+0x88>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800b2dc:	42b4      	cmp	r4, r6
 800b2de:	d0f7      	beq.n	800b2d0 <EE_PageTransfer+0x5c>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b2e0:	4929      	ldr	r1, [pc, #164]	; (800b388 <EE_PageTransfer+0x114>)
 800b2e2:	0020      	movs	r0, r4
 800b2e4:	f7ff ffa0 	bl	800b228 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800b2e8:	2801      	cmp	r0, #1
 800b2ea:	d0f1      	beq.n	800b2d0 <EE_PageTransfer+0x5c>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800b2ec:	4b26      	ldr	r3, [pc, #152]	; (800b388 <EE_PageTransfer+0x114>)
 800b2ee:	8819      	ldrh	r1, [r3, #0]
 800b2f0:	0020      	movs	r0, r4
 800b2f2:	f7ff ff43 	bl	800b17c <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	d0ea      	beq.n	800b2d0 <EE_PageTransfer+0x5c>
 800b2fa:	e7d8      	b.n	800b2ae <EE_PageTransfer+0x3a>
	FLASH_PageErase(OldPageAddress);
 800b2fc:	0038      	movs	r0, r7
 800b2fe:	f005 fc4d 	bl	8010b9c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b302:	481e      	ldr	r0, [pc, #120]	; (800b37c <EE_PageTransfer+0x108>)
 800b304:	f005 fbba 	bl	8010a7c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b308:	2800      	cmp	r0, #0
 800b30a:	d003      	beq.n	800b314 <EE_PageTransfer+0xa0>
		return pFlash.ErrorCode;
 800b30c:	4b1c      	ldr	r3, [pc, #112]	; (800b380 <EE_PageTransfer+0x10c>)
 800b30e:	69d8      	ldr	r0, [r3, #28]
 800b310:	b280      	uxth	r0, r0
 800b312:	e7cc      	b.n	800b2ae <EE_PageTransfer+0x3a>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800b314:	2380      	movs	r3, #128	; 0x80
 800b316:	011b      	lsls	r3, r3, #4
 800b318:	18f8      	adds	r0, r7, r3
 800b31a:	f005 fc3f 	bl	8010b9c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b31e:	4817      	ldr	r0, [pc, #92]	; (800b37c <EE_PageTransfer+0x108>)
 800b320:	f005 fbac 	bl	8010a7c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800b324:	2800      	cmp	r0, #0
 800b326:	d003      	beq.n	800b330 <EE_PageTransfer+0xbc>
			return pFlash.ErrorCode;
 800b328:	4b15      	ldr	r3, [pc, #84]	; (800b380 <EE_PageTransfer+0x10c>)
 800b32a:	69d8      	ldr	r0, [r3, #28]
 800b32c:	b280      	uxth	r0, r0
 800b32e:	e7be      	b.n	800b2ae <EE_PageTransfer+0x3a>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b330:	4a14      	ldr	r2, [pc, #80]	; (800b384 <EE_PageTransfer+0x110>)
 800b332:	6913      	ldr	r3, [r2, #16]
 800b334:	2102      	movs	r1, #2
 800b336:	438b      	bics	r3, r1
 800b338:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800b33a:	2200      	movs	r2, #0
 800b33c:	2300      	movs	r3, #0
 800b33e:	0029      	movs	r1, r5
 800b340:	2001      	movs	r0, #1
 800b342:	f005 fbc9 	bl	8010ad8 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b346:	480d      	ldr	r0, [pc, #52]	; (800b37c <EE_PageTransfer+0x108>)
 800b348:	f005 fb98 	bl	8010a7c <FLASH_WaitForLastOperation>
 800b34c:	1e04      	subs	r4, r0, #0
	if(FlashStatus != HAL_OK){
 800b34e:	d003      	beq.n	800b358 <EE_PageTransfer+0xe4>
		return pFlash.ErrorCode;
 800b350:	4b0b      	ldr	r3, [pc, #44]	; (800b380 <EE_PageTransfer+0x10c>)
 800b352:	69d8      	ldr	r0, [r3, #28]
 800b354:	b280      	uxth	r0, r0
 800b356:	e7aa      	b.n	800b2ae <EE_PageTransfer+0x3a>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b358:	4a0a      	ldr	r2, [pc, #40]	; (800b384 <EE_PageTransfer+0x110>)
 800b35a:	6913      	ldr	r3, [r2, #16]
 800b35c:	2101      	movs	r1, #1
 800b35e:	438b      	bics	r3, r1
 800b360:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800b362:	f005 fb81 	bl	8010a68 <HAL_FLASH_Lock>
	return FlashStatus;
 800b366:	b2a0      	uxth	r0, r4
 800b368:	e7a1      	b.n	800b2ae <EE_PageTransfer+0x3a>
		return NO_VALID_PAGE; /* No valid Page */
 800b36a:	20ab      	movs	r0, #171	; 0xab
 800b36c:	e79f      	b.n	800b2ae <EE_PageTransfer+0x3a>
 800b36e:	46c0      	nop			; (mov r8, r8)
 800b370:	0801e000 	.word	0x0801e000
 800b374:	0801f000 	.word	0x0801f000
 800b378:	0000eeee 	.word	0x0000eeee
 800b37c:	0000c350 	.word	0x0000c350
 800b380:	20006dd0 	.word	0x20006dd0
 800b384:	40022000 	.word	0x40022000
 800b388:	200023a0 	.word	0x200023a0

0800b38c <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800b38c:	b570      	push	{r4, r5, r6, lr}
 800b38e:	0005      	movs	r5, r0
 800b390:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 800b392:	f005 fb55 	bl	8010a40 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800b396:	0031      	movs	r1, r6
 800b398:	0028      	movs	r0, r5
 800b39a:	f7ff feef 	bl	800b17c <EE_VerifyPageFullWriteVariable>
 800b39e:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 800b3a0:	2880      	cmp	r0, #128	; 0x80
 800b3a2:	d003      	beq.n	800b3ac <EE_WriteVariable+0x20>
	HAL_FLASH_Lock();
 800b3a4:	f005 fb60 	bl	8010a68 <HAL_FLASH_Lock>
}
 800b3a8:	0020      	movs	r0, r4
 800b3aa:	bd70      	pop	{r4, r5, r6, pc}
		Status =EE_PageTransfer(VirtAddress,Data);
 800b3ac:	0031      	movs	r1, r6
 800b3ae:	0028      	movs	r0, r5
 800b3b0:	f7ff ff60 	bl	800b274 <EE_PageTransfer>
 800b3b4:	0004      	movs	r4, r0
 800b3b6:	e7f5      	b.n	800b3a4 <EE_WriteVariable+0x18>

0800b3b8 <EE_Format>:
uint16_t EE_Format(void){
 800b3b8:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800b3ba:	f005 fb41 	bl	8010a40 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b3be:	4829      	ldr	r0, [pc, #164]	; (800b464 <EE_Format+0xac>)
 800b3c0:	f005 fbec 	bl	8010b9c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b3c4:	4828      	ldr	r0, [pc, #160]	; (800b468 <EE_Format+0xb0>)
 800b3c6:	f005 fb59 	bl	8010a7c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	d003      	beq.n	800b3d6 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800b3ce:	4b27      	ldr	r3, [pc, #156]	; (800b46c <EE_Format+0xb4>)
 800b3d0:	69d8      	ldr	r0, [r3, #28]
 800b3d2:	b280      	uxth	r0, r0
}
 800b3d4:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b3d6:	4826      	ldr	r0, [pc, #152]	; (800b470 <EE_Format+0xb8>)
 800b3d8:	f005 fbe0 	bl	8010b9c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b3dc:	4822      	ldr	r0, [pc, #136]	; (800b468 <EE_Format+0xb0>)
 800b3de:	f005 fb4d 	bl	8010a7c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	d003      	beq.n	800b3ee <EE_Format+0x36>
			return pFlash.ErrorCode;
 800b3e6:	4b21      	ldr	r3, [pc, #132]	; (800b46c <EE_Format+0xb4>)
 800b3e8:	69d8      	ldr	r0, [r3, #28]
 800b3ea:	b280      	uxth	r0, r0
 800b3ec:	e7f2      	b.n	800b3d4 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b3ee:	4a21      	ldr	r2, [pc, #132]	; (800b474 <EE_Format+0xbc>)
 800b3f0:	6913      	ldr	r3, [r2, #16]
 800b3f2:	2102      	movs	r1, #2
 800b3f4:	438b      	bics	r3, r1
 800b3f6:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	4919      	ldr	r1, [pc, #100]	; (800b464 <EE_Format+0xac>)
 800b3fe:	2001      	movs	r0, #1
 800b400:	f005 fb6a 	bl	8010ad8 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b404:	4818      	ldr	r0, [pc, #96]	; (800b468 <EE_Format+0xb0>)
 800b406:	f005 fb39 	bl	8010a7c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d003      	beq.n	800b416 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 800b40e:	4b17      	ldr	r3, [pc, #92]	; (800b46c <EE_Format+0xb4>)
 800b410:	69d8      	ldr	r0, [r3, #28]
 800b412:	b280      	uxth	r0, r0
 800b414:	e7de      	b.n	800b3d4 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b416:	4a17      	ldr	r2, [pc, #92]	; (800b474 <EE_Format+0xbc>)
 800b418:	6913      	ldr	r3, [r2, #16]
 800b41a:	2101      	movs	r1, #1
 800b41c:	438b      	bics	r3, r1
 800b41e:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b420:	4815      	ldr	r0, [pc, #84]	; (800b478 <EE_Format+0xc0>)
 800b422:	f005 fbbb 	bl	8010b9c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b426:	4810      	ldr	r0, [pc, #64]	; (800b468 <EE_Format+0xb0>)
 800b428:	f005 fb28 	bl	8010a7c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d003      	beq.n	800b438 <EE_Format+0x80>
		return pFlash.ErrorCode;
 800b430:	4b0e      	ldr	r3, [pc, #56]	; (800b46c <EE_Format+0xb4>)
 800b432:	69d8      	ldr	r0, [r3, #28]
 800b434:	b280      	uxth	r0, r0
 800b436:	e7cd      	b.n	800b3d4 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b438:	4810      	ldr	r0, [pc, #64]	; (800b47c <EE_Format+0xc4>)
 800b43a:	f005 fbaf 	bl	8010b9c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b43e:	480a      	ldr	r0, [pc, #40]	; (800b468 <EE_Format+0xb0>)
 800b440:	f005 fb1c 	bl	8010a7c <FLASH_WaitForLastOperation>
 800b444:	1e04      	subs	r4, r0, #0
		if(FlashStatus != HAL_OK){
 800b446:	d003      	beq.n	800b450 <EE_Format+0x98>
			return pFlash.ErrorCode;
 800b448:	4b08      	ldr	r3, [pc, #32]	; (800b46c <EE_Format+0xb4>)
 800b44a:	69d8      	ldr	r0, [r3, #28]
 800b44c:	b280      	uxth	r0, r0
 800b44e:	e7c1      	b.n	800b3d4 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b450:	4a08      	ldr	r2, [pc, #32]	; (800b474 <EE_Format+0xbc>)
 800b452:	6913      	ldr	r3, [r2, #16]
 800b454:	2101      	movs	r1, #1
 800b456:	438b      	bics	r3, r1
 800b458:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800b45a:	f005 fb05 	bl	8010a68 <HAL_FLASH_Lock>
	return FlashStatus;
 800b45e:	b2a0      	uxth	r0, r4
 800b460:	e7b8      	b.n	800b3d4 <EE_Format+0x1c>
 800b462:	46c0      	nop			; (mov r8, r8)
 800b464:	0801e000 	.word	0x0801e000
 800b468:	0000c350 	.word	0x0000c350
 800b46c:	20006dd0 	.word	0x20006dd0
 800b470:	0801e800 	.word	0x0801e800
 800b474:	40022000 	.word	0x40022000
 800b478:	0801f000 	.word	0x0801f000
 800b47c:	0801f800 	.word	0x0801f800

0800b480 <EE_Init>:
uint16_t EE_Init(void){
 800b480:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 800b482:	f005 fadd 	bl	8010a40 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b486:	4bbc      	ldr	r3, [pc, #752]	; (800b778 <EE_Init+0x2f8>)
 800b488:	881b      	ldrh	r3, [r3, #0]
 800b48a:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b48c:	4abb      	ldr	r2, [pc, #748]	; (800b77c <EE_Init+0x2fc>)
 800b48e:	8812      	ldrh	r2, [r2, #0]
 800b490:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800b492:	49bb      	ldr	r1, [pc, #748]	; (800b780 <EE_Init+0x300>)
 800b494:	428b      	cmp	r3, r1
 800b496:	d100      	bne.n	800b49a <EE_Init+0x1a>
 800b498:	e072      	b.n	800b580 <EE_Init+0x100>
 800b49a:	49ba      	ldr	r1, [pc, #744]	; (800b784 <EE_Init+0x304>)
 800b49c:	428b      	cmp	r3, r1
 800b49e:	d00f      	beq.n	800b4c0 <EE_Init+0x40>
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d100      	bne.n	800b4a6 <EE_Init+0x26>
 800b4a4:	e106      	b.n	800b6b4 <EE_Init+0x234>
			FlashStatus =EE_Format();
 800b4a6:	f7ff ff87 	bl	800b3b8 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b4aa:	48b7      	ldr	r0, [pc, #732]	; (800b788 <EE_Init+0x308>)
 800b4ac:	f005 fae6 	bl	8010a7c <FLASH_WaitForLastOperation>
 800b4b0:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 800b4b2:	2d00      	cmp	r5, #0
 800b4b4:	d102      	bne.n	800b4bc <EE_Init+0x3c>
	HAL_FLASH_Lock();
 800b4b6:	f005 fad7 	bl	8010a68 <HAL_FLASH_Lock>
	return HAL_OK;
 800b4ba:	2500      	movs	r5, #0
}
 800b4bc:	0028      	movs	r0, r5
 800b4be:	bd70      	pop	{r4, r5, r6, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800b4c0:	2a00      	cmp	r2, #0
 800b4c2:	d00d      	beq.n	800b4e0 <EE_Init+0x60>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800b4c4:	4bae      	ldr	r3, [pc, #696]	; (800b780 <EE_Init+0x300>)
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d028      	beq.n	800b51c <EE_Init+0x9c>
				FlashStatus =EE_Format();
 800b4ca:	f7ff ff75 	bl	800b3b8 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b4ce:	48ae      	ldr	r0, [pc, #696]	; (800b788 <EE_Init+0x308>)
 800b4d0:	f005 fad4 	bl	8010a7c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d0ee      	beq.n	800b4b6 <EE_Init+0x36>
					return pFlash.ErrorCode;
 800b4d8:	4bac      	ldr	r3, [pc, #688]	; (800b78c <EE_Init+0x30c>)
 800b4da:	69dd      	ldr	r5, [r3, #28]
 800b4dc:	b2ad      	uxth	r5, r5
 800b4de:	e7ed      	b.n	800b4bc <EE_Init+0x3c>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b4e0:	48a5      	ldr	r0, [pc, #660]	; (800b778 <EE_Init+0x2f8>)
 800b4e2:	f005 fb5b 	bl	8010b9c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b4e6:	48a8      	ldr	r0, [pc, #672]	; (800b788 <EE_Init+0x308>)
 800b4e8:	f005 fac8 	bl	8010a7c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	d003      	beq.n	800b4f8 <EE_Init+0x78>
					return pFlash.ErrorCode;
 800b4f0:	4ba6      	ldr	r3, [pc, #664]	; (800b78c <EE_Init+0x30c>)
 800b4f2:	69dd      	ldr	r5, [r3, #28]
 800b4f4:	b2ad      	uxth	r5, r5
 800b4f6:	e7e1      	b.n	800b4bc <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b4f8:	48a5      	ldr	r0, [pc, #660]	; (800b790 <EE_Init+0x310>)
 800b4fa:	f005 fb4f 	bl	8010b9c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b4fe:	48a2      	ldr	r0, [pc, #648]	; (800b788 <EE_Init+0x308>)
 800b500:	f005 fabc 	bl	8010a7c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b504:	2800      	cmp	r0, #0
 800b506:	d105      	bne.n	800b514 <EE_Init+0x94>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b508:	4aa2      	ldr	r2, [pc, #648]	; (800b794 <EE_Init+0x314>)
 800b50a:	6913      	ldr	r3, [r2, #16]
 800b50c:	2102      	movs	r1, #2
 800b50e:	438b      	bics	r3, r1
 800b510:	6113      	str	r3, [r2, #16]
 800b512:	e7d0      	b.n	800b4b6 <EE_Init+0x36>
						return pFlash.ErrorCode;
 800b514:	4b9d      	ldr	r3, [pc, #628]	; (800b78c <EE_Init+0x30c>)
 800b516:	69dd      	ldr	r5, [r3, #28]
 800b518:	b2ad      	uxth	r5, r5
 800b51a:	e7cf      	b.n	800b4bc <EE_Init+0x3c>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b51c:	4896      	ldr	r0, [pc, #600]	; (800b778 <EE_Init+0x2f8>)
 800b51e:	f005 fb3d 	bl	8010b9c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b522:	4899      	ldr	r0, [pc, #612]	; (800b788 <EE_Init+0x308>)
 800b524:	f005 faaa 	bl	8010a7c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b528:	2800      	cmp	r0, #0
 800b52a:	d003      	beq.n	800b534 <EE_Init+0xb4>
					return pFlash.ErrorCode;
 800b52c:	4b97      	ldr	r3, [pc, #604]	; (800b78c <EE_Init+0x30c>)
 800b52e:	69dd      	ldr	r5, [r3, #28]
 800b530:	b2ad      	uxth	r5, r5
 800b532:	e7c3      	b.n	800b4bc <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b534:	4896      	ldr	r0, [pc, #600]	; (800b790 <EE_Init+0x310>)
 800b536:	f005 fb31 	bl	8010b9c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b53a:	4893      	ldr	r0, [pc, #588]	; (800b788 <EE_Init+0x308>)
 800b53c:	f005 fa9e 	bl	8010a7c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b540:	2800      	cmp	r0, #0
 800b542:	d003      	beq.n	800b54c <EE_Init+0xcc>
						return pFlash.ErrorCode;
 800b544:	4b91      	ldr	r3, [pc, #580]	; (800b78c <EE_Init+0x30c>)
 800b546:	69dd      	ldr	r5, [r3, #28]
 800b548:	b2ad      	uxth	r5, r5
 800b54a:	e7b7      	b.n	800b4bc <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b54c:	4a91      	ldr	r2, [pc, #580]	; (800b794 <EE_Init+0x314>)
 800b54e:	6913      	ldr	r3, [r2, #16]
 800b550:	2102      	movs	r1, #2
 800b552:	438b      	bics	r3, r1
 800b554:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b556:	2200      	movs	r2, #0
 800b558:	2300      	movs	r3, #0
 800b55a:	4988      	ldr	r1, [pc, #544]	; (800b77c <EE_Init+0x2fc>)
 800b55c:	2001      	movs	r0, #1
 800b55e:	f005 fabb 	bl	8010ad8 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b562:	4889      	ldr	r0, [pc, #548]	; (800b788 <EE_Init+0x308>)
 800b564:	f005 fa8a 	bl	8010a7c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b568:	2800      	cmp	r0, #0
 800b56a:	d105      	bne.n	800b578 <EE_Init+0xf8>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b56c:	4a89      	ldr	r2, [pc, #548]	; (800b794 <EE_Init+0x314>)
 800b56e:	6913      	ldr	r3, [r2, #16]
 800b570:	2101      	movs	r1, #1
 800b572:	438b      	bics	r3, r1
 800b574:	6113      	str	r3, [r2, #16]
 800b576:	e79e      	b.n	800b4b6 <EE_Init+0x36>
					return pFlash.ErrorCode;
 800b578:	4b84      	ldr	r3, [pc, #528]	; (800b78c <EE_Init+0x30c>)
 800b57a:	69dd      	ldr	r5, [r3, #28]
 800b57c:	b2ad      	uxth	r5, r5
 800b57e:	e79d      	b.n	800b4bc <EE_Init+0x3c>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800b580:	2a00      	cmp	r2, #0
 800b582:	d02f      	beq.n	800b5e4 <EE_Init+0x164>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800b584:	4b7f      	ldr	r3, [pc, #508]	; (800b784 <EE_Init+0x304>)
 800b586:	429a      	cmp	r2, r3
 800b588:	d062      	beq.n	800b650 <EE_Init+0x1d0>
				FlashStatus =EE_Format();
 800b58a:	f7ff ff15 	bl	800b3b8 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b58e:	487e      	ldr	r0, [pc, #504]	; (800b788 <EE_Init+0x308>)
 800b590:	f005 fa74 	bl	8010a7c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b594:	2800      	cmp	r0, #0
 800b596:	d100      	bne.n	800b59a <EE_Init+0x11a>
 800b598:	e78d      	b.n	800b4b6 <EE_Init+0x36>
					return pFlash.ErrorCode;
 800b59a:	4b7c      	ldr	r3, [pc, #496]	; (800b78c <EE_Init+0x30c>)
 800b59c:	69dd      	ldr	r5, [r3, #28]
 800b59e:	b2ad      	uxth	r5, r5
 800b5a0:	e78c      	b.n	800b4bc <EE_Init+0x3c>
						x =VarIdx;
 800b5a2:	b226      	sxth	r6, r4
 800b5a4:	e00a      	b.n	800b5bc <EE_Init+0x13c>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b5a6:	3401      	adds	r4, #1
 800b5a8:	b2a4      	uxth	r4, r4
 800b5aa:	2380      	movs	r3, #128	; 0x80
 800b5ac:	00db      	lsls	r3, r3, #3
 800b5ae:	429c      	cmp	r4, r3
 800b5b0:	d81c      	bhi.n	800b5ec <EE_Init+0x16c>
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800b5b2:	4b79      	ldr	r3, [pc, #484]	; (800b798 <EE_Init+0x318>)
 800b5b4:	881b      	ldrh	r3, [r3, #0]
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	42a3      	cmp	r3, r4
 800b5ba:	d0f2      	beq.n	800b5a2 <EE_Init+0x122>
					if(VarIdx != x){
 800b5bc:	42b4      	cmp	r4, r6
 800b5be:	d0f2      	beq.n	800b5a6 <EE_Init+0x126>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b5c0:	4976      	ldr	r1, [pc, #472]	; (800b79c <EE_Init+0x31c>)
 800b5c2:	0020      	movs	r0, r4
 800b5c4:	f7ff fe30 	bl	800b228 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800b5c8:	2801      	cmp	r0, #1
 800b5ca:	d0ec      	beq.n	800b5a6 <EE_Init+0x126>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800b5cc:	4b73      	ldr	r3, [pc, #460]	; (800b79c <EE_Init+0x31c>)
 800b5ce:	8819      	ldrh	r1, [r3, #0]
 800b5d0:	0020      	movs	r0, r4
 800b5d2:	f7ff fdd3 	bl	800b17c <EE_VerifyPageFullWriteVariable>
 800b5d6:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b5d8:	486b      	ldr	r0, [pc, #428]	; (800b788 <EE_Init+0x308>)
 800b5da:	f005 fa4f 	bl	8010a7c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d0e1      	beq.n	800b5a6 <EE_Init+0x126>
 800b5e2:	e76b      	b.n	800b4bc <EE_Init+0x3c>
	int16_t x =-1;
 800b5e4:	2601      	movs	r6, #1
 800b5e6:	4276      	negs	r6, r6
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b5e8:	2401      	movs	r4, #1
 800b5ea:	e7de      	b.n	800b5aa <EE_Init+0x12a>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	4961      	ldr	r1, [pc, #388]	; (800b778 <EE_Init+0x2f8>)
 800b5f2:	2001      	movs	r0, #1
 800b5f4:	f005 fa70 	bl	8010ad8 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b5f8:	4863      	ldr	r0, [pc, #396]	; (800b788 <EE_Init+0x308>)
 800b5fa:	f005 fa3f 	bl	8010a7c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d003      	beq.n	800b60a <EE_Init+0x18a>
					return pFlash.ErrorCode;
 800b602:	4b62      	ldr	r3, [pc, #392]	; (800b78c <EE_Init+0x30c>)
 800b604:	69dd      	ldr	r5, [r3, #28]
 800b606:	b2ad      	uxth	r5, r5
 800b608:	e758      	b.n	800b4bc <EE_Init+0x3c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b60a:	4a62      	ldr	r2, [pc, #392]	; (800b794 <EE_Init+0x314>)
 800b60c:	6913      	ldr	r3, [r2, #16]
 800b60e:	2101      	movs	r1, #1
 800b610:	438b      	bics	r3, r1
 800b612:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b614:	4859      	ldr	r0, [pc, #356]	; (800b77c <EE_Init+0x2fc>)
 800b616:	f005 fac1 	bl	8010b9c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b61a:	485b      	ldr	r0, [pc, #364]	; (800b788 <EE_Init+0x308>)
 800b61c:	f005 fa2e 	bl	8010a7c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b620:	2800      	cmp	r0, #0
 800b622:	d003      	beq.n	800b62c <EE_Init+0x1ac>
					return pFlash.ErrorCode;
 800b624:	4b59      	ldr	r3, [pc, #356]	; (800b78c <EE_Init+0x30c>)
 800b626:	69dd      	ldr	r5, [r3, #28]
 800b628:	b2ad      	uxth	r5, r5
 800b62a:	e747      	b.n	800b4bc <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b62c:	485c      	ldr	r0, [pc, #368]	; (800b7a0 <EE_Init+0x320>)
 800b62e:	f005 fab5 	bl	8010b9c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b632:	4855      	ldr	r0, [pc, #340]	; (800b788 <EE_Init+0x308>)
 800b634:	f005 fa22 	bl	8010a7c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b638:	2800      	cmp	r0, #0
 800b63a:	d105      	bne.n	800b648 <EE_Init+0x1c8>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b63c:	4a55      	ldr	r2, [pc, #340]	; (800b794 <EE_Init+0x314>)
 800b63e:	6913      	ldr	r3, [r2, #16]
 800b640:	2102      	movs	r1, #2
 800b642:	438b      	bics	r3, r1
 800b644:	6113      	str	r3, [r2, #16]
 800b646:	e736      	b.n	800b4b6 <EE_Init+0x36>
						return pFlash.ErrorCode;
 800b648:	4b50      	ldr	r3, [pc, #320]	; (800b78c <EE_Init+0x30c>)
 800b64a:	69dd      	ldr	r5, [r3, #28]
 800b64c:	b2ad      	uxth	r5, r5
 800b64e:	e735      	b.n	800b4bc <EE_Init+0x3c>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b650:	484a      	ldr	r0, [pc, #296]	; (800b77c <EE_Init+0x2fc>)
 800b652:	f005 faa3 	bl	8010b9c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b656:	484c      	ldr	r0, [pc, #304]	; (800b788 <EE_Init+0x308>)
 800b658:	f005 fa10 	bl	8010a7c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d003      	beq.n	800b668 <EE_Init+0x1e8>
					return pFlash.ErrorCode;
 800b660:	4b4a      	ldr	r3, [pc, #296]	; (800b78c <EE_Init+0x30c>)
 800b662:	69dd      	ldr	r5, [r3, #28]
 800b664:	b2ad      	uxth	r5, r5
 800b666:	e729      	b.n	800b4bc <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b668:	484d      	ldr	r0, [pc, #308]	; (800b7a0 <EE_Init+0x320>)
 800b66a:	f005 fa97 	bl	8010b9c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b66e:	4846      	ldr	r0, [pc, #280]	; (800b788 <EE_Init+0x308>)
 800b670:	f005 fa04 	bl	8010a7c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b674:	2800      	cmp	r0, #0
 800b676:	d003      	beq.n	800b680 <EE_Init+0x200>
						return pFlash.ErrorCode;
 800b678:	4b44      	ldr	r3, [pc, #272]	; (800b78c <EE_Init+0x30c>)
 800b67a:	69dd      	ldr	r5, [r3, #28]
 800b67c:	b2ad      	uxth	r5, r5
 800b67e:	e71d      	b.n	800b4bc <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b680:	4a44      	ldr	r2, [pc, #272]	; (800b794 <EE_Init+0x314>)
 800b682:	6913      	ldr	r3, [r2, #16]
 800b684:	2102      	movs	r1, #2
 800b686:	438b      	bics	r3, r1
 800b688:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b68a:	2200      	movs	r2, #0
 800b68c:	2300      	movs	r3, #0
 800b68e:	493a      	ldr	r1, [pc, #232]	; (800b778 <EE_Init+0x2f8>)
 800b690:	2001      	movs	r0, #1
 800b692:	f005 fa21 	bl	8010ad8 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b696:	483c      	ldr	r0, [pc, #240]	; (800b788 <EE_Init+0x308>)
 800b698:	f005 f9f0 	bl	8010a7c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b69c:	2800      	cmp	r0, #0
 800b69e:	d003      	beq.n	800b6a8 <EE_Init+0x228>
					return pFlash.ErrorCode;
 800b6a0:	4b3a      	ldr	r3, [pc, #232]	; (800b78c <EE_Init+0x30c>)
 800b6a2:	69dd      	ldr	r5, [r3, #28]
 800b6a4:	b2ad      	uxth	r5, r5
 800b6a6:	e709      	b.n	800b4bc <EE_Init+0x3c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b6a8:	4a3a      	ldr	r2, [pc, #232]	; (800b794 <EE_Init+0x314>)
 800b6aa:	6913      	ldr	r3, [r2, #16]
 800b6ac:	2101      	movs	r1, #1
 800b6ae:	438b      	bics	r3, r1
 800b6b0:	6113      	str	r3, [r2, #16]
 800b6b2:	e700      	b.n	800b4b6 <EE_Init+0x36>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800b6b4:	2a00      	cmp	r2, #0
 800b6b6:	d006      	beq.n	800b6c6 <EE_Init+0x246>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800b6b8:	4b32      	ldr	r3, [pc, #200]	; (800b784 <EE_Init+0x304>)
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d00d      	beq.n	800b6da <EE_Init+0x25a>
	int16_t x =-1;
 800b6be:	2601      	movs	r6, #1
 800b6c0:	4276      	negs	r6, r6
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b6c2:	2401      	movs	r4, #1
 800b6c4:	e02b      	b.n	800b71e <EE_Init+0x29e>
				FlashStatus =EE_Format();
 800b6c6:	f7ff fe77 	bl	800b3b8 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b6ca:	482f      	ldr	r0, [pc, #188]	; (800b788 <EE_Init+0x308>)
 800b6cc:	f005 f9d6 	bl	8010a7c <FLASH_WaitForLastOperation>
 800b6d0:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK){
 800b6d2:	2d00      	cmp	r5, #0
 800b6d4:	d100      	bne.n	800b6d8 <EE_Init+0x258>
 800b6d6:	e6ee      	b.n	800b4b6 <EE_Init+0x36>
 800b6d8:	e6f0      	b.n	800b4bc <EE_Init+0x3c>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b6da:	4828      	ldr	r0, [pc, #160]	; (800b77c <EE_Init+0x2fc>)
 800b6dc:	f005 fa5e 	bl	8010b9c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b6e0:	4829      	ldr	r0, [pc, #164]	; (800b788 <EE_Init+0x308>)
 800b6e2:	f005 f9cb 	bl	8010a7c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d003      	beq.n	800b6f2 <EE_Init+0x272>
					return pFlash.ErrorCode;
 800b6ea:	4b28      	ldr	r3, [pc, #160]	; (800b78c <EE_Init+0x30c>)
 800b6ec:	69dd      	ldr	r5, [r3, #28]
 800b6ee:	b2ad      	uxth	r5, r5
 800b6f0:	e6e4      	b.n	800b4bc <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b6f2:	482b      	ldr	r0, [pc, #172]	; (800b7a0 <EE_Init+0x320>)
 800b6f4:	f005 fa52 	bl	8010b9c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b6f8:	4823      	ldr	r0, [pc, #140]	; (800b788 <EE_Init+0x308>)
 800b6fa:	f005 f9bf 	bl	8010a7c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b6fe:	2800      	cmp	r0, #0
 800b700:	d105      	bne.n	800b70e <EE_Init+0x28e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b702:	4a24      	ldr	r2, [pc, #144]	; (800b794 <EE_Init+0x314>)
 800b704:	6913      	ldr	r3, [r2, #16]
 800b706:	2102      	movs	r1, #2
 800b708:	438b      	bics	r3, r1
 800b70a:	6113      	str	r3, [r2, #16]
 800b70c:	e6d3      	b.n	800b4b6 <EE_Init+0x36>
						return pFlash.ErrorCode;
 800b70e:	4b1f      	ldr	r3, [pc, #124]	; (800b78c <EE_Init+0x30c>)
 800b710:	69dd      	ldr	r5, [r3, #28]
 800b712:	b2ad      	uxth	r5, r5
 800b714:	e6d2      	b.n	800b4bc <EE_Init+0x3c>
						x =VarIdx;
 800b716:	b226      	sxth	r6, r4
 800b718:	e00a      	b.n	800b730 <EE_Init+0x2b0>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b71a:	3401      	adds	r4, #1
 800b71c:	b2a4      	uxth	r4, r4
 800b71e:	2380      	movs	r3, #128	; 0x80
 800b720:	00db      	lsls	r3, r3, #3
 800b722:	429c      	cmp	r4, r3
 800b724:	d818      	bhi.n	800b758 <EE_Init+0x2d8>
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800b726:	4b1f      	ldr	r3, [pc, #124]	; (800b7a4 <EE_Init+0x324>)
 800b728:	881b      	ldrh	r3, [r3, #0]
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	42a3      	cmp	r3, r4
 800b72e:	d0f2      	beq.n	800b716 <EE_Init+0x296>
					if(VarIdx != x){
 800b730:	42b4      	cmp	r4, r6
 800b732:	d0f2      	beq.n	800b71a <EE_Init+0x29a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b734:	4919      	ldr	r1, [pc, #100]	; (800b79c <EE_Init+0x31c>)
 800b736:	0020      	movs	r0, r4
 800b738:	f7ff fd76 	bl	800b228 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800b73c:	2801      	cmp	r0, #1
 800b73e:	d0ec      	beq.n	800b71a <EE_Init+0x29a>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800b740:	4b16      	ldr	r3, [pc, #88]	; (800b79c <EE_Init+0x31c>)
 800b742:	8819      	ldrh	r1, [r3, #0]
 800b744:	0020      	movs	r0, r4
 800b746:	f7ff fd19 	bl	800b17c <EE_VerifyPageFullWriteVariable>
 800b74a:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b74c:	480e      	ldr	r0, [pc, #56]	; (800b788 <EE_Init+0x308>)
 800b74e:	f005 f995 	bl	8010a7c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800b752:	2800      	cmp	r0, #0
 800b754:	d0e1      	beq.n	800b71a <EE_Init+0x29a>
 800b756:	e6b1      	b.n	800b4bc <EE_Init+0x3c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b758:	2200      	movs	r2, #0
 800b75a:	2300      	movs	r3, #0
 800b75c:	4907      	ldr	r1, [pc, #28]	; (800b77c <EE_Init+0x2fc>)
 800b75e:	2001      	movs	r0, #1
 800b760:	f005 f9ba 	bl	8010ad8 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b764:	4808      	ldr	r0, [pc, #32]	; (800b788 <EE_Init+0x308>)
 800b766:	f005 f989 	bl	8010a7c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d01c      	beq.n	800b7a8 <EE_Init+0x328>
					return pFlash.ErrorCode;
 800b76e:	4b07      	ldr	r3, [pc, #28]	; (800b78c <EE_Init+0x30c>)
 800b770:	69dd      	ldr	r5, [r3, #28]
 800b772:	b2ad      	uxth	r5, r5
 800b774:	e6a2      	b.n	800b4bc <EE_Init+0x3c>
 800b776:	46c0      	nop			; (mov r8, r8)
 800b778:	0801e000 	.word	0x0801e000
 800b77c:	0801f000 	.word	0x0801f000
 800b780:	0000eeee 	.word	0x0000eeee
 800b784:	0000ffff 	.word	0x0000ffff
 800b788:	0000c350 	.word	0x0000c350
 800b78c:	20006dd0 	.word	0x20006dd0
 800b790:	0801e800 	.word	0x0801e800
 800b794:	40022000 	.word	0x40022000
 800b798:	0801e006 	.word	0x0801e006
 800b79c:	200023a0 	.word	0x200023a0
 800b7a0:	0801f800 	.word	0x0801f800
 800b7a4:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b7a8:	4a11      	ldr	r2, [pc, #68]	; (800b7f0 <EE_Init+0x370>)
 800b7aa:	6913      	ldr	r3, [r2, #16]
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	438b      	bics	r3, r1
 800b7b0:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b7b2:	4810      	ldr	r0, [pc, #64]	; (800b7f4 <EE_Init+0x374>)
 800b7b4:	f005 f9f2 	bl	8010b9c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b7b8:	480f      	ldr	r0, [pc, #60]	; (800b7f8 <EE_Init+0x378>)
 800b7ba:	f005 f95f 	bl	8010a7c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d003      	beq.n	800b7ca <EE_Init+0x34a>
					return pFlash.ErrorCode;
 800b7c2:	4b0e      	ldr	r3, [pc, #56]	; (800b7fc <EE_Init+0x37c>)
 800b7c4:	69dd      	ldr	r5, [r3, #28]
 800b7c6:	b2ad      	uxth	r5, r5
 800b7c8:	e678      	b.n	800b4bc <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b7ca:	480d      	ldr	r0, [pc, #52]	; (800b800 <EE_Init+0x380>)
 800b7cc:	f005 f9e6 	bl	8010b9c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b7d0:	4809      	ldr	r0, [pc, #36]	; (800b7f8 <EE_Init+0x378>)
 800b7d2:	f005 f953 	bl	8010a7c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d105      	bne.n	800b7e6 <EE_Init+0x366>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b7da:	4a05      	ldr	r2, [pc, #20]	; (800b7f0 <EE_Init+0x370>)
 800b7dc:	6913      	ldr	r3, [r2, #16]
 800b7de:	2102      	movs	r1, #2
 800b7e0:	438b      	bics	r3, r1
 800b7e2:	6113      	str	r3, [r2, #16]
 800b7e4:	e667      	b.n	800b4b6 <EE_Init+0x36>
						return pFlash.ErrorCode;
 800b7e6:	4b05      	ldr	r3, [pc, #20]	; (800b7fc <EE_Init+0x37c>)
 800b7e8:	69dd      	ldr	r5, [r3, #28]
 800b7ea:	b2ad      	uxth	r5, r5
 800b7ec:	e666      	b.n	800b4bc <EE_Init+0x3c>
 800b7ee:	46c0      	nop			; (mov r8, r8)
 800b7f0:	40022000 	.word	0x40022000
 800b7f4:	0801e000 	.word	0x0801e000
 800b7f8:	0000c350 	.word	0x0000c350
 800b7fc:	20006dd0 	.word	0x20006dd0
 800b800:	0801e800 	.word	0x0801e800

0800b804 <EraseSector>:
	/* Return last operation flash status */
	return FlashStatus;
}

/* Erase sector if force write is requested */
BOS_Status EraseSector(uint32_t sector ) {
 800b804:	b500      	push	{lr}
 800b806:	b085      	sub	sp, #20
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b808:	2300      	movs	r3, #0
 800b80a:	9301      	str	r3, [sp, #4]
		erase.PageAddress = sector;
 800b80c:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800b80e:	3301      	adds	r3, #1
 800b810:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b812:	4669      	mov	r1, sp
 800b814:	a801      	add	r0, sp, #4
 800b816:	f005 f9d3 	bl	8010bc0 <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d102      	bne.n	800b824 <EraseSector+0x20>
 800b81e:	9b00      	ldr	r3, [sp, #0]
 800b820:	3301      	adds	r3, #1
 800b822:	d002      	beq.n	800b82a <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b824:	4b02      	ldr	r3, [pc, #8]	; (800b830 <EraseSector+0x2c>)
 800b826:	2216      	movs	r2, #22
 800b828:	701a      	strb	r2, [r3, #0]

	return result;
}
 800b82a:	2000      	movs	r0, #0
 800b82c:	b005      	add	sp, #20
 800b82e:	bd00      	pop	{pc}
 800b830:	20000c3c 	.word	0x20000c3c

0800b834 <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800b834:	b500      	push	{lr}
 800b836:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800b838:	2340      	movs	r3, #64	; 0x40
 800b83a:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b83c:	3b3f      	subs	r3, #63	; 0x3f
 800b83e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b840:	2300      	movs	r3, #0
 800b842:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b844:	3303      	adds	r3, #3
 800b846:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800b848:	2090      	movs	r0, #144	; 0x90
 800b84a:	a901      	add	r1, sp, #4
 800b84c:	05c0      	lsls	r0, r0, #23
 800b84e:	f005 fa09 	bl	8010c64 <HAL_GPIO_Init>
}
 800b852:	b007      	add	sp, #28
 800b854:	bd00      	pop	{pc}
	...

0800b858 <GPIO_Init>:
{
 800b858:	b500      	push	{lr}
 800b85a:	b087      	sub	sp, #28
    __GPIOC_CLK_ENABLE();
 800b85c:	4b18      	ldr	r3, [pc, #96]	; (800b8c0 <GPIO_Init+0x68>)
 800b85e:	6959      	ldr	r1, [r3, #20]
 800b860:	2080      	movs	r0, #128	; 0x80
 800b862:	0300      	lsls	r0, r0, #12
 800b864:	4301      	orrs	r1, r0
 800b866:	6159      	str	r1, [r3, #20]
 800b868:	695a      	ldr	r2, [r3, #20]
 800b86a:	4002      	ands	r2, r0
 800b86c:	9201      	str	r2, [sp, #4]
 800b86e:	9a01      	ldr	r2, [sp, #4]
    __GPIOA_CLK_ENABLE();
 800b870:	6959      	ldr	r1, [r3, #20]
 800b872:	2080      	movs	r0, #128	; 0x80
 800b874:	0280      	lsls	r0, r0, #10
 800b876:	4301      	orrs	r1, r0
 800b878:	6159      	str	r1, [r3, #20]
 800b87a:	695a      	ldr	r2, [r3, #20]
 800b87c:	4002      	ands	r2, r0
 800b87e:	9202      	str	r2, [sp, #8]
 800b880:	9a02      	ldr	r2, [sp, #8]
    __GPIOD_CLK_ENABLE();
 800b882:	6959      	ldr	r1, [r3, #20]
 800b884:	2080      	movs	r0, #128	; 0x80
 800b886:	0340      	lsls	r0, r0, #13
 800b888:	4301      	orrs	r1, r0
 800b88a:	6159      	str	r1, [r3, #20]
 800b88c:	695a      	ldr	r2, [r3, #20]
 800b88e:	4002      	ands	r2, r0
 800b890:	9203      	str	r2, [sp, #12]
 800b892:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800b894:	6959      	ldr	r1, [r3, #20]
 800b896:	2080      	movs	r0, #128	; 0x80
 800b898:	02c0      	lsls	r0, r0, #11
 800b89a:	4301      	orrs	r1, r0
 800b89c:	6159      	str	r1, [r3, #20]
 800b89e:	695a      	ldr	r2, [r3, #20]
 800b8a0:	4002      	ands	r2, r0
 800b8a2:	9204      	str	r2, [sp, #16]
 800b8a4:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800b8a6:	695a      	ldr	r2, [r3, #20]
 800b8a8:	2180      	movs	r1, #128	; 0x80
 800b8aa:	03c9      	lsls	r1, r1, #15
 800b8ac:	430a      	orrs	r2, r1
 800b8ae:	615a      	str	r2, [r3, #20]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	400b      	ands	r3, r1
 800b8b4:	9305      	str	r3, [sp, #20]
 800b8b6:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800b8b8:	f7ff ffbc 	bl	800b834 <IND_LED_Init>
}
 800b8bc:	b007      	add	sp, #28
 800b8be:	bd00      	pop	{pc}
 800b8c0:	40021000 	.word	0x40021000

0800b8c4 <GetPortGPIOs>:


/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800b8c4:	b570      	push	{r4, r5, r6, lr}
 800b8c6:	000e      	movs	r6, r1
 800b8c8:	0015      	movs	r5, r2
 800b8ca:	001c      	movs	r4, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800b8cc:	f001 feca 	bl	800d664 <GetUart>
	
	if (huart == &huart1) 
 800b8d0:	4b2b      	ldr	r3, [pc, #172]	; (800b980 <GetPortGPIOs+0xbc>)
 800b8d2:	4298      	cmp	r0, r3
 800b8d4:	d010      	beq.n	800b8f8 <GetPortGPIOs+0x34>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800b8d6:	4b2b      	ldr	r3, [pc, #172]	; (800b984 <GetPortGPIOs+0xc0>)
 800b8d8:	4298      	cmp	r0, r3
 800b8da:	d01a      	beq.n	800b912 <GetPortGPIOs+0x4e>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800b8dc:	4b2a      	ldr	r3, [pc, #168]	; (800b988 <GetPortGPIOs+0xc4>)
 800b8de:	4298      	cmp	r0, r3
 800b8e0:	d022      	beq.n	800b928 <GetPortGPIOs+0x64>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800b8e2:	4b2a      	ldr	r3, [pc, #168]	; (800b98c <GetPortGPIOs+0xc8>)
 800b8e4:	4298      	cmp	r0, r3
 800b8e6:	d02b      	beq.n	800b940 <GetPortGPIOs+0x7c>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800b8e8:	4b29      	ldr	r3, [pc, #164]	; (800b990 <GetPortGPIOs+0xcc>)
 800b8ea:	4298      	cmp	r0, r3
 800b8ec:	d033      	beq.n	800b956 <GetPortGPIOs+0x92>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800b8ee:	4b29      	ldr	r3, [pc, #164]	; (800b994 <GetPortGPIOs+0xd0>)
 800b8f0:	4298      	cmp	r0, r3
 800b8f2:	d03a      	beq.n	800b96a <GetPortGPIOs+0xa6>
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800b8f4:	20ff      	movs	r0, #255	; 0xff
 800b8f6:	e00b      	b.n	800b910 <GetPortGPIOs+0x4c>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800b8f8:	2390      	movs	r3, #144	; 0x90
 800b8fa:	05db      	lsls	r3, r3, #23
 800b8fc:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800b8fe:	2280      	movs	r2, #128	; 0x80
 800b900:	0092      	lsls	r2, r2, #2
 800b902:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800b904:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800b906:	2380      	movs	r3, #128	; 0x80
 800b908:	00db      	lsls	r3, r3, #3
 800b90a:	9a04      	ldr	r2, [sp, #16]
 800b90c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800b90e:	2000      	movs	r0, #0
	
	return result;	
}
 800b910:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800b912:	2390      	movs	r3, #144	; 0x90
 800b914:	05db      	lsls	r3, r3, #23
 800b916:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800b918:	2204      	movs	r2, #4
 800b91a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800b91c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800b91e:	2308      	movs	r3, #8
 800b920:	9a04      	ldr	r2, [sp, #16]
 800b922:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800b924:	2000      	movs	r0, #0
 800b926:	e7f3      	b.n	800b910 <GetPortGPIOs+0x4c>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800b928:	4b1b      	ldr	r3, [pc, #108]	; (800b998 <GetPortGPIOs+0xd4>)
 800b92a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800b92c:	2280      	movs	r2, #128	; 0x80
 800b92e:	00d2      	lsls	r2, r2, #3
 800b930:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800b932:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800b934:	2380      	movs	r3, #128	; 0x80
 800b936:	011b      	lsls	r3, r3, #4
 800b938:	9a04      	ldr	r2, [sp, #16]
 800b93a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800b93c:	2000      	movs	r0, #0
 800b93e:	e7e7      	b.n	800b910 <GetPortGPIOs+0x4c>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800b940:	2390      	movs	r3, #144	; 0x90
 800b942:	05db      	lsls	r3, r3, #23
 800b944:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800b946:	2201      	movs	r2, #1
 800b948:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800b94a:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800b94c:	2302      	movs	r3, #2
 800b94e:	9a04      	ldr	r2, [sp, #16]
 800b950:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800b952:	2000      	movs	r0, #0
 800b954:	e7dc      	b.n	800b910 <GetPortGPIOs+0x4c>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800b956:	4b10      	ldr	r3, [pc, #64]	; (800b998 <GetPortGPIOs+0xd4>)
 800b958:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800b95a:	2208      	movs	r2, #8
 800b95c:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800b95e:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800b960:	2310      	movs	r3, #16
 800b962:	9a04      	ldr	r2, [sp, #16]
 800b964:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800b966:	2000      	movs	r0, #0
 800b968:	e7d2      	b.n	800b910 <GetPortGPIOs+0x4c>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800b96a:	2390      	movs	r3, #144	; 0x90
 800b96c:	05db      	lsls	r3, r3, #23
 800b96e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800b970:	2210      	movs	r2, #16
 800b972:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800b974:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800b976:	2320      	movs	r3, #32
 800b978:	9a04      	ldr	r2, [sp, #16]
 800b97a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800b97c:	2000      	movs	r0, #0
 800b97e:	e7c7      	b.n	800b910 <GetPortGPIOs+0x4c>
 800b980:	20006a58 	.word	0x20006a58
 800b984:	20006ba8 	.word	0x20006ba8
 800b988:	20006968 	.word	0x20006968
 800b98c:	20006b38 	.word	0x20006b38
 800b990:	200069e8 	.word	0x200069e8
 800b994:	20006ac8 	.word	0x20006ac8
 800b998:	48000400 	.word	0x48000400

0800b99c <IsFactoryReset>:
				- P1 TXD is connected to last port RXD    
*/


uint8_t IsFactoryReset(void)
{
 800b99c:	b570      	push	{r4, r5, r6, lr}
 800b99e:	b092      	sub	sp, #72	; 0x48
	uint16_t P1_TX_Pin, P1_RX_Pin, P_last_TX_Pin, P_last_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
  /* Enable all GPIO Ports Clocks */
  __GPIOA_CLK_ENABLE();
 800b9a0:	4b39      	ldr	r3, [pc, #228]	; (800ba88 <IsFactoryReset+0xec>)
 800b9a2:	6959      	ldr	r1, [r3, #20]
 800b9a4:	2080      	movs	r0, #128	; 0x80
 800b9a6:	0280      	lsls	r0, r0, #10
 800b9a8:	4301      	orrs	r1, r0
 800b9aa:	6159      	str	r1, [r3, #20]
 800b9ac:	695a      	ldr	r2, [r3, #20]
 800b9ae:	4002      	ands	r2, r0
 800b9b0:	9203      	str	r2, [sp, #12]
 800b9b2:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800b9b4:	6959      	ldr	r1, [r3, #20]
 800b9b6:	2080      	movs	r0, #128	; 0x80
 800b9b8:	02c0      	lsls	r0, r0, #11
 800b9ba:	4301      	orrs	r1, r0
 800b9bc:	6159      	str	r1, [r3, #20]
 800b9be:	695a      	ldr	r2, [r3, #20]
 800b9c0:	4002      	ands	r2, r0
 800b9c2:	9204      	str	r2, [sp, #16]
 800b9c4:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800b9c6:	6959      	ldr	r1, [r3, #20]
 800b9c8:	2080      	movs	r0, #128	; 0x80
 800b9ca:	0300      	lsls	r0, r0, #12
 800b9cc:	4301      	orrs	r1, r0
 800b9ce:	6159      	str	r1, [r3, #20]
 800b9d0:	695a      	ldr	r2, [r3, #20]
 800b9d2:	4002      	ands	r2, r0
 800b9d4:	9205      	str	r2, [sp, #20]
 800b9d6:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 800b9d8:	695a      	ldr	r2, [r3, #20]
 800b9da:	2180      	movs	r1, #128	; 0x80
 800b9dc:	0349      	lsls	r1, r1, #13
 800b9de:	430a      	orrs	r2, r1
 800b9e0:	615a      	str	r2, [r3, #20]
 800b9e2:	695b      	ldr	r3, [r3, #20]
 800b9e4:	400b      	ands	r3, r1
 800b9e6:	9306      	str	r3, [sp, #24]
 800b9e8:	9b06      	ldr	r3, [sp, #24]
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800b9ea:	2522      	movs	r5, #34	; 0x22
 800b9ec:	446d      	add	r5, sp
 800b9ee:	ab08      	add	r3, sp, #32
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	ab0b      	add	r3, sp, #44	; 0x2c
 800b9f4:	002a      	movs	r2, r5
 800b9f6:	a90c      	add	r1, sp, #48	; 0x30
 800b9f8:	2001      	movs	r0, #1
 800b9fa:	f7ff ff63 	bl	800b8c4 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800b9fe:	ac07      	add	r4, sp, #28
 800ba00:	9400      	str	r4, [sp, #0]
 800ba02:	ab09      	add	r3, sp, #36	; 0x24
 800ba04:	221e      	movs	r2, #30
 800ba06:	446a      	add	r2, sp
 800ba08:	a90a      	add	r1, sp, #40	; 0x28
 800ba0a:	2005      	movs	r0, #5
 800ba0c:	f7ff ff5a 	bl	800b8c4 <GetPortGPIOs>
	
	/* TXD of first port */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ba10:	2301      	movs	r3, #1
 800ba12:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba14:	2600      	movs	r6, #0
 800ba16:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800ba18:	882b      	ldrh	r3, [r5, #0]
 800ba1a:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800ba1c:	a90d      	add	r1, sp, #52	; 0x34
 800ba1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ba20:	f005 f920 	bl	8010c64 <HAL_GPIO_Init>
	
	/* RXD of last port */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba24:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800ba26:	2302      	movs	r3, #2
 800ba28:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800ba2a:	8823      	ldrh	r3, [r4, #0]
 800ba2c:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800ba2e:	a90d      	add	r1, sp, #52	; 0x34
 800ba30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba32:	f005 f917 	bl	8010c64 <HAL_GPIO_Init>

	
	/* Check for factory reset conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800ba36:	8829      	ldrh	r1, [r5, #0]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ba3c:	f005 fa63 	bl	8010f06 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800ba40:	2005      	movs	r0, #5
 800ba42:	f001 fc17 	bl	800d274 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800ba46:	8821      	ldrh	r1, [r4, #0]
 800ba48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba4a:	f005 fa55 	bl	8010ef8 <HAL_GPIO_ReadPin>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d006      	beq.n	800ba60 <IsFactoryReset+0xc4>
		}
	}

	/* Clear flag for formated EEPROM if it was already set */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800ba52:	4b0e      	ldr	r3, [pc, #56]	; (800ba8c <IsFactoryReset+0xf0>)
 800ba54:	2201      	movs	r2, #1
 800ba56:	4252      	negs	r2, r2
 800ba58:	601a      	str	r2, [r3, #0]
	
	return 0;
 800ba5a:	2000      	movs	r0, #0
}
 800ba5c:	b012      	add	sp, #72	; 0x48
 800ba5e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800ba60:	2322      	movs	r3, #34	; 0x22
 800ba62:	446b      	add	r3, sp
 800ba64:	8819      	ldrh	r1, [r3, #0]
 800ba66:	2201      	movs	r2, #1
 800ba68:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ba6a:	f005 fa4c 	bl	8010f06 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800ba6e:	2005      	movs	r0, #5
 800ba70:	f001 fc00 	bl	800d274 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800ba74:	ab07      	add	r3, sp, #28
 800ba76:	8819      	ldrh	r1, [r3, #0]
 800ba78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba7a:	f005 fa3d 	bl	8010ef8 <HAL_GPIO_ReadPin>
 800ba7e:	2801      	cmp	r0, #1
 800ba80:	d1e7      	bne.n	800ba52 <IsFactoryReset+0xb6>
			return 1;
 800ba82:	2001      	movs	r0, #1
 800ba84:	e7ea      	b.n	800ba5c <IsFactoryReset+0xc0>
 800ba86:	46c0      	nop			; (mov r8, r8)
 800ba88:	40021000 	.word	0x40021000
 800ba8c:	20007ff0 	.word	0x20007ff0

0800ba90 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800ba90:	4770      	bx	lr
	...

0800ba94 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port) {
 800ba94:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800ba96:	4c19      	ldr	r4, [pc, #100]	; (800bafc <CheckForTimedButtonPress+0x68>)
 800ba98:	00c3      	lsls	r3, r0, #3
 800ba9a:	181b      	adds	r3, r3, r0
 800ba9c:	18e3      	adds	r3, r4, r3
 800ba9e:	789a      	ldrb	r2, [r3, #2]
 800baa0:	78df      	ldrb	r7, [r3, #3]
			t3 = button[port].pressedX3Sec;
 800baa2:	791e      	ldrb	r6, [r3, #4]

	/* Convert to ms */
	t1 *= 1000;
 800baa4:	0151      	lsls	r1, r2, #5
 800baa6:	1a89      	subs	r1, r1, r2
 800baa8:	0089      	lsls	r1, r1, #2
 800baaa:	1889      	adds	r1, r1, r2
 800baac:	00cd      	lsls	r5, r1, #3
	t2 *= 1000;
 800baae:	017a      	lsls	r2, r7, #5
 800bab0:	1bd2      	subs	r2, r2, r7
 800bab2:	0092      	lsls	r2, r2, #2
 800bab4:	19d2      	adds	r2, r2, r7
 800bab6:	00d3      	lsls	r3, r2, #3
 800bab8:	001a      	movs	r2, r3
	t3 *= 1000;
 800baba:	0173      	lsls	r3, r6, #5
 800babc:	1b9b      	subs	r3, r3, r6
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	199b      	adds	r3, r3, r6
 800bac2:	00d9      	lsls	r1, r3, #3

	if (pressCounter[port] == t1) {
 800bac4:	0083      	lsls	r3, r0, #2
 800bac6:	18e4      	adds	r4, r4, r3
 800bac8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800baca:	42ab      	cmp	r3, r5
 800bacc:	d009      	beq.n	800bae2 <CheckForTimedButtonPress+0x4e>
		button[port].state = PRESSED_FOR_X1_SEC;
	} else if (pressCounter[port] == t2) {
 800bace:	4293      	cmp	r3, r2
 800bad0:	d00e      	beq.n	800baf0 <CheckForTimedButtonPress+0x5c>
		button[port].state = PRESSED_FOR_X2_SEC;
	} else if (pressCounter[port] == t3) {
 800bad2:	428b      	cmp	r3, r1
 800bad4:	d10a      	bne.n	800baec <CheckForTimedButtonPress+0x58>
		button[port].state = PRESSED_FOR_X2_SEC;
 800bad6:	00c3      	lsls	r3, r0, #3
 800bad8:	1818      	adds	r0, r3, r0
 800bada:	4b08      	ldr	r3, [pc, #32]	; (800bafc <CheckForTimedButtonPress+0x68>)
 800badc:	220a      	movs	r2, #10
 800bade:	54c2      	strb	r2, [r0, r3]
 800bae0:	e004      	b.n	800baec <CheckForTimedButtonPress+0x58>
		button[port].state = PRESSED_FOR_X1_SEC;
 800bae2:	00c3      	lsls	r3, r0, #3
 800bae4:	1818      	adds	r0, r3, r0
 800bae6:	4b05      	ldr	r3, [pc, #20]	; (800bafc <CheckForTimedButtonPress+0x68>)
 800bae8:	2209      	movs	r2, #9
 800baea:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800baec:	2000      	movs	r0, #0
 800baee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 800baf0:	00c3      	lsls	r3, r0, #3
 800baf2:	1818      	adds	r0, r3, r0
 800baf4:	4b01      	ldr	r3, [pc, #4]	; (800bafc <CheckForTimedButtonPress+0x68>)
 800baf6:	220a      	movs	r2, #10
 800baf8:	54c2      	strb	r2, [r0, r3]
 800bafa:	e7f7      	b.n	800baec <CheckForTimedButtonPress+0x58>
 800bafc:	200023a4 	.word	0x200023a4

0800bb00 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port) {
 800bb00:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800bb02:	4c19      	ldr	r4, [pc, #100]	; (800bb68 <CheckForTimedButtonRelease+0x68>)
 800bb04:	00c3      	lsls	r3, r0, #3
 800bb06:	181b      	adds	r3, r3, r0
 800bb08:	18e3      	adds	r3, r4, r3
 800bb0a:	795a      	ldrb	r2, [r3, #5]
 800bb0c:	799f      	ldrb	r7, [r3, #6]
			t3 = button[port].releasedY3Sec;
 800bb0e:	79de      	ldrb	r6, [r3, #7]

	/* Convert to ms */
	t1 *= 1000;
 800bb10:	0151      	lsls	r1, r2, #5
 800bb12:	1a89      	subs	r1, r1, r2
 800bb14:	0089      	lsls	r1, r1, #2
 800bb16:	1889      	adds	r1, r1, r2
 800bb18:	00cd      	lsls	r5, r1, #3
	t2 *= 1000;
 800bb1a:	017a      	lsls	r2, r7, #5
 800bb1c:	1bd2      	subs	r2, r2, r7
 800bb1e:	0092      	lsls	r2, r2, #2
 800bb20:	19d2      	adds	r2, r2, r7
 800bb22:	00d3      	lsls	r3, r2, #3
 800bb24:	001a      	movs	r2, r3
	t3 *= 1000;
 800bb26:	0173      	lsls	r3, r6, #5
 800bb28:	1b9b      	subs	r3, r3, r6
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	199b      	adds	r3, r3, r6
 800bb2e:	00d9      	lsls	r1, r3, #3

	if (releaseCounter[port] == t1) {
 800bb30:	0083      	lsls	r3, r0, #2
 800bb32:	18e4      	adds	r4, r4, r3
 800bb34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bb36:	42ab      	cmp	r3, r5
 800bb38:	d009      	beq.n	800bb4e <CheckForTimedButtonRelease+0x4e>
		button[port].state = RELEASED_FOR_Y1_SEC;
	} else if (releaseCounter[port] == t2) {
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d00e      	beq.n	800bb5c <CheckForTimedButtonRelease+0x5c>
		button[port].state = RELEASED_FOR_Y2_SEC;
	} else if (releaseCounter[port] == t3) {
 800bb3e:	428b      	cmp	r3, r1
 800bb40:	d10a      	bne.n	800bb58 <CheckForTimedButtonRelease+0x58>
		button[port].state = RELEASED_FOR_Y2_SEC;
 800bb42:	00c3      	lsls	r3, r0, #3
 800bb44:	1818      	adds	r0, r3, r0
 800bb46:	4b08      	ldr	r3, [pc, #32]	; (800bb68 <CheckForTimedButtonRelease+0x68>)
 800bb48:	220d      	movs	r2, #13
 800bb4a:	54c2      	strb	r2, [r0, r3]
 800bb4c:	e004      	b.n	800bb58 <CheckForTimedButtonRelease+0x58>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800bb4e:	00c3      	lsls	r3, r0, #3
 800bb50:	1818      	adds	r0, r3, r0
 800bb52:	4b05      	ldr	r3, [pc, #20]	; (800bb68 <CheckForTimedButtonRelease+0x68>)
 800bb54:	220c      	movs	r2, #12
 800bb56:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800bb58:	2000      	movs	r0, #0
 800bb5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 800bb5c:	00c3      	lsls	r3, r0, #3
 800bb5e:	1818      	adds	r0, r3, r0
 800bb60:	4b01      	ldr	r3, [pc, #4]	; (800bb68 <CheckForTimedButtonRelease+0x68>)
 800bb62:	220d      	movs	r2, #13
 800bb64:	54c2      	strb	r2, [r0, r3]
 800bb66:	e7f7      	b.n	800bb58 <CheckForTimedButtonRelease+0x58>
 800bb68:	200023a4 	.word	0x200023a4

0800bb6c <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800bb6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb6e:	b08d      	sub	sp, #52	; 0x34
 800bb70:	0006      	movs	r6, r0
 800bb72:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800bb74:	4b41      	ldr	r3, [pc, #260]	; (800bc7c <AddPortButton+0x110>)
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d157      	bne.n	800bc2c <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800bb7c:	4b40      	ldr	r3, [pc, #256]	; (800bc80 <AddPortButton+0x114>)
 800bb7e:	2204      	movs	r2, #4
 800bb80:	551a      	strb	r2, [r3, r4]

	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 800bb82:	4b3e      	ldr	r3, [pc, #248]	; (800bc7c <AddPortButton+0x110>)
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d15a      	bne.n	800bc40 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800bb8a:	2512      	movs	r5, #18
 800bb8c:	446d      	add	r5, sp
 800bb8e:	af04      	add	r7, sp, #16
 800bb90:	9700      	str	r7, [sp, #0]
 800bb92:	ab05      	add	r3, sp, #20
 800bb94:	002a      	movs	r2, r5
 800bb96:	a906      	add	r1, sp, #24
 800bb98:	0020      	movs	r0, r4
 800bb9a:	f7ff fe93 	bl	800b8c4 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800bb9e:	882b      	ldrh	r3, [r5, #0]
 800bba0:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bba2:	2301      	movs	r3, #1
 800bba4:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bba6:	2500      	movs	r5, #0
 800bba8:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800bbaa:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800bbac:	a907      	add	r1, sp, #28
 800bbae:	9806      	ldr	r0, [sp, #24]
 800bbb0:	f005 f858 	bl	8010c64 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800bbb4:	883b      	ldrh	r3, [r7, #0]
 800bbb6:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bbb8:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800bbba:	2302      	movs	r3, #2
 800bbbc:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800bbbe:	a907      	add	r1, sp, #28
 800bbc0:	9805      	ldr	r0, [sp, #20]
 800bbc2:	f005 f84f 	bl	8010c64 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800bbc6:	00e2      	lsls	r2, r4, #3
 800bbc8:	1912      	adds	r2, r2, r4
 800bbca:	4b2e      	ldr	r3, [pc, #184]	; (800bc84 <AddPortButton+0x118>)
 800bbcc:	189b      	adds	r3, r3, r2
 800bbce:	705e      	strb	r6, [r3, #1]

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800bbd0:	0025      	movs	r5, r4
 800bbd2:	353a      	adds	r5, #58	; 0x3a
 800bbd4:	00ad      	lsls	r5, r5, #2
 800bbd6:	210e      	movs	r1, #14
 800bbd8:	4469      	add	r1, sp
 800bbda:	0028      	movs	r0, r5
 800bbdc:	f7ff fb24 	bl	800b228 <EE_ReadVariable>
	if (!res)											// This variable exists
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	d133      	bne.n	800bc4c <AddPortButton+0xe0>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800bbe4:	230e      	movs	r3, #14
 800bbe6:	446b      	add	r3, sp
 800bbe8:	881b      	ldrh	r3, [r3, #0]
 800bbea:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800bbec:	091a      	lsrs	r2, r3, #4
 800bbee:	42a2      	cmp	r2, r4
 800bbf0:	d103      	bne.n	800bbfa <AddPortButton+0x8e>
 800bbf2:	220f      	movs	r2, #15
 800bbf4:	4013      	ands	r3, r2
 800bbf6:	42b3      	cmp	r3, r6
 800bbf8:	d015      	beq.n	800bc26 <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800bbfa:	0324      	lsls	r4, r4, #12
 800bbfc:	0231      	lsls	r1, r6, #8
 800bbfe:	4321      	orrs	r1, r4
 800bc00:	b289      	uxth	r1, r1
 800bc02:	230e      	movs	r3, #14
 800bc04:	446b      	add	r3, sp
 800bc06:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800bc08:	0028      	movs	r0, r5
 800bc0a:	f7ff fbbf 	bl	800b38c <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800bc0e:	1c68      	adds	r0, r5, #1
 800bc10:	2100      	movs	r1, #0
 800bc12:	f7ff fbbb 	bl	800b38c <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800bc16:	1ca8      	adds	r0, r5, #2
 800bc18:	2100      	movs	r1, #0
 800bc1a:	f7ff fbb7 	bl	800b38c <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800bc1e:	1ce8      	adds	r0, r5, #3
 800bc20:	2100      	movs	r1, #0
 800bc22:	f7ff fbb3 	bl	800b38c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	return result;
}
 800bc26:	2000      	movs	r0, #0
 800bc28:	b00d      	add	sp, #52	; 0x34
 800bc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800bc2c:	008d      	lsls	r5, r1, #2
 800bc2e:	4b16      	ldr	r3, [pc, #88]	; (800bc88 <AddPortButton+0x11c>)
 800bc30:	58e8      	ldr	r0, [r5, r3]
 800bc32:	f001 ff0b 	bl	800da4c <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800bc36:	4b15      	ldr	r3, [pc, #84]	; (800bc8c <AddPortButton+0x120>)
 800bc38:	58e8      	ldr	r0, [r5, r3]
 800bc3a:	f001 ff07 	bl	800da4c <osSemaphoreRelease>
 800bc3e:	e79d      	b.n	800bb7c <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 800bc40:	0020      	movs	r0, r4
 800bc42:	f001 fd0f 	bl	800d664 <GetUart>
 800bc46:	f006 f8c4 	bl	8011dd2 <HAL_UART_DeInit>
 800bc4a:	e79e      	b.n	800bb8a <AddPortButton+0x1e>
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800bc4c:	0324      	lsls	r4, r4, #12
 800bc4e:	0231      	lsls	r1, r6, #8
 800bc50:	4321      	orrs	r1, r4
 800bc52:	b289      	uxth	r1, r1
 800bc54:	230e      	movs	r3, #14
 800bc56:	446b      	add	r3, sp
 800bc58:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800bc5a:	0028      	movs	r0, r5
 800bc5c:	f7ff fb96 	bl	800b38c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800bc60:	1c68      	adds	r0, r5, #1
 800bc62:	2100      	movs	r1, #0
 800bc64:	f7ff fb92 	bl	800b38c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800bc68:	1ca8      	adds	r0, r5, #2
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	f7ff fb8e 	bl	800b38c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800bc70:	1ce8      	adds	r0, r5, #3
 800bc72:	2100      	movs	r1, #0
 800bc74:	f7ff fb8a 	bl	800b38c <EE_WriteVariable>
 800bc78:	e7d5      	b.n	800bc26 <AddPortButton+0xba>
 800bc7a:	46c0      	nop			; (mov r8, r8)
 800bc7c:	20000b3b 	.word	0x20000b3b
 800bc80:	20000c2c 	.word	0x20000c2c
 800bc84:	200023a4 	.word	0x200023a4
 800bc88:	200068ec 	.word	0x200068ec
 800bc8c:	200068cc 	.word	0x200068cc

0800bc90 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800bc90:	b570      	push	{r4, r5, r6, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	0004      	movs	r4, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800bc96:	4837      	ldr	r0, [pc, #220]	; (800bd74 <RemovePortButton+0xe4>)
 800bc98:	00e1      	lsls	r1, r4, #3
 800bc9a:	1909      	adds	r1, r1, r4
 800bc9c:	1842      	adds	r2, r0, r1
 800bc9e:	2300      	movs	r3, #0
 800bca0:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 800bca2:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 800bca4:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800bca6:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800bca8:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800bcaa:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800bcac:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800bcae:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800bcb0:	71d3      	strb	r3, [r2, #7]

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800bcb2:	0025      	movs	r5, r4
 800bcb4:	353a      	adds	r5, #58	; 0x3a
 800bcb6:	00ad      	lsls	r5, r5, #2
 800bcb8:	466b      	mov	r3, sp
 800bcba:	1d99      	adds	r1, r3, #6
 800bcbc:	0028      	movs	r0, r5
 800bcbe:	f7ff fab3 	bl	800b228 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d01e      	beq.n	800bd04 <RemovePortButton+0x74>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800bcc6:	0020      	movs	r0, r4
 800bcc8:	f001 fccc 	bl	800d664 <GetUart>
 800bccc:	0005      	movs	r5, r0

	if (huart->Instance == USART1) {
 800bcce:	6803      	ldr	r3, [r0, #0]
 800bcd0:	4a29      	ldr	r2, [pc, #164]	; (800bd78 <RemovePortButton+0xe8>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d027      	beq.n	800bd26 <RemovePortButton+0x96>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800bcd6:	4a29      	ldr	r2, [pc, #164]	; (800bd7c <RemovePortButton+0xec>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d032      	beq.n	800bd42 <RemovePortButton+0xb2>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800bcdc:	4a28      	ldr	r2, [pc, #160]	; (800bd80 <RemovePortButton+0xf0>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d033      	beq.n	800bd4a <RemovePortButton+0xba>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800bce2:	4a28      	ldr	r2, [pc, #160]	; (800bd84 <RemovePortButton+0xf4>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d034      	beq.n	800bd52 <RemovePortButton+0xc2>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800bce8:	4a27      	ldr	r2, [pc, #156]	; (800bd88 <RemovePortButton+0xf8>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d035      	beq.n	800bd5a <RemovePortButton+0xca>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800bcee:	4a27      	ldr	r2, [pc, #156]	; (800bd8c <RemovePortButton+0xfc>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d036      	beq.n	800bd62 <RemovePortButton+0xd2>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800bcf4:	4a26      	ldr	r2, [pc, #152]	; (800bd90 <RemovePortButton+0x100>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d039      	beq.n	800bd6e <RemovePortButton+0xde>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800bcfa:	4a26      	ldr	r2, [pc, #152]	; (800bd94 <RemovePortButton+0x104>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d034      	beq.n	800bd6a <RemovePortButton+0xda>
#ifdef _Usart8	
		MX_USART8_UART_Init();
#endif
	} else
		result = BOS_ERROR;
 800bd00:	26ff      	movs	r6, #255	; 0xff
 800bd02:	e013      	b.n	800bd2c <RemovePortButton+0x9c>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800bd04:	2100      	movs	r1, #0
 800bd06:	0028      	movs	r0, r5
 800bd08:	f7ff fb40 	bl	800b38c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800bd0c:	1c68      	adds	r0, r5, #1
 800bd0e:	2100      	movs	r1, #0
 800bd10:	f7ff fb3c 	bl	800b38c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800bd14:	1ca8      	adds	r0, r5, #2
 800bd16:	2100      	movs	r1, #0
 800bd18:	f7ff fb38 	bl	800b38c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800bd1c:	1ce8      	adds	r0, r5, #3
 800bd1e:	2100      	movs	r1, #0
 800bd20:	f7ff fb34 	bl	800b38c <EE_WriteVariable>
 800bd24:	e7cf      	b.n	800bcc6 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 800bd26:	f001 fab7 	bl	800d298 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800bd2a:	2600      	movs	r6, #0

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800bd2c:	4b1a      	ldr	r3, [pc, #104]	; (800bd98 <RemovePortButton+0x108>)
 800bd2e:	2200      	movs	r2, #0
 800bd30:	551a      	strb	r2, [r3, r4]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800bd32:	3201      	adds	r2, #1
 800bd34:	4919      	ldr	r1, [pc, #100]	; (800bd9c <RemovePortButton+0x10c>)
 800bd36:	0028      	movs	r0, r5
 800bd38:	f006 f8a4 	bl	8011e84 <HAL_UART_Receive_IT>

	return result;
}
 800bd3c:	0030      	movs	r0, r6
 800bd3e:	b002      	add	sp, #8
 800bd40:	bd70      	pop	{r4, r5, r6, pc}
		MX_USART2_UART_Init();
 800bd42:	f001 fac1 	bl	800d2c8 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800bd46:	2600      	movs	r6, #0
 800bd48:	e7f0      	b.n	800bd2c <RemovePortButton+0x9c>
		MX_USART3_UART_Init();
 800bd4a:	f001 fad5 	bl	800d2f8 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800bd4e:	2600      	movs	r6, #0
 800bd50:	e7ec      	b.n	800bd2c <RemovePortButton+0x9c>
		MX_USART4_UART_Init();
 800bd52:	f001 fae9 	bl	800d328 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 800bd56:	2600      	movs	r6, #0
 800bd58:	e7e8      	b.n	800bd2c <RemovePortButton+0x9c>
		MX_USART5_UART_Init();
 800bd5a:	f001 fafd 	bl	800d358 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 800bd5e:	2600      	movs	r6, #0
 800bd60:	e7e4      	b.n	800bd2c <RemovePortButton+0x9c>
		MX_USART6_UART_Init();
 800bd62:	f001 fb11 	bl	800d388 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800bd66:	2600      	movs	r6, #0
 800bd68:	e7e0      	b.n	800bd2c <RemovePortButton+0x9c>
 800bd6a:	2600      	movs	r6, #0
 800bd6c:	e7de      	b.n	800bd2c <RemovePortButton+0x9c>
 800bd6e:	2600      	movs	r6, #0
 800bd70:	e7dc      	b.n	800bd2c <RemovePortButton+0x9c>
 800bd72:	46c0      	nop			; (mov r8, r8)
 800bd74:	200023a4 	.word	0x200023a4
 800bd78:	40013800 	.word	0x40013800
 800bd7c:	40004400 	.word	0x40004400
 800bd80:	40004800 	.word	0x40004800
 800bd84:	40004c00 	.word	0x40004c00
 800bd88:	40005000 	.word	0x40005000
 800bd8c:	40011400 	.word	0x40011400
 800bd90:	40011800 	.word	0x40011800
 800bd94:	40011c00 	.word	0x40011c00
 800bd98:	20000c2c 	.word	0x20000c2c
 800bd9c:	20000c4d 	.word	0x20000c4d

0800bda0 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800bda0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bda2:	46de      	mov	lr, fp
 800bda4:	4657      	mov	r7, sl
 800bda6:	464e      	mov	r6, r9
 800bda8:	4645      	mov	r5, r8
 800bdaa:	b5e0      	push	{r5, r6, r7, lr}
 800bdac:	b085      	sub	sp, #20
 800bdae:	0007      	movs	r7, r0
 800bdb0:	469b      	mov	fp, r3
 800bdb2:	ab0e      	add	r3, sp, #56	; 0x38
 800bdb4:	781e      	ldrb	r6, [r3, #0]
 800bdb6:	ab0f      	add	r3, sp, #60	; 0x3c
 800bdb8:	781d      	ldrb	r5, [r3, #0]
 800bdba:	ab10      	add	r3, sp, #64	; 0x40
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	469a      	mov	sl, r3
 800bdc0:	ab11      	add	r3, sp, #68	; 0x44
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	4699      	mov	r9, r3
 800bdc6:	ab12      	add	r3, sp, #72	; 0x48
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	4698      	mov	r8, r3
 800bdcc:	ab13      	add	r3, sp, #76	; 0x4c
 800bdce:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800bdd0:	00c4      	lsls	r4, r0, #3
 800bdd2:	1824      	adds	r4, r4, r0
 800bdd4:	48b3      	ldr	r0, [pc, #716]	; (800c0a4 <SetButtonEvents+0x304>)
 800bdd6:	1900      	adds	r0, r0, r4
 800bdd8:	7840      	ldrb	r0, [r0, #1]
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d100      	bne.n	800bde0 <SetButtonEvents+0x40>
 800bdde:	e155      	b.n	800c08c <SetButtonEvents+0x2ec>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800bde0:	00fc      	lsls	r4, r7, #3
 800bde2:	19e4      	adds	r4, r4, r7
 800bde4:	48af      	ldr	r0, [pc, #700]	; (800c0a4 <SetButtonEvents+0x304>)
 800bde6:	1900      	adds	r0, r0, r4
 800bde8:	465c      	mov	r4, fp
 800bdea:	7084      	strb	r4, [r0, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800bdec:	70c6      	strb	r6, [r0, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800bdee:	7105      	strb	r5, [r0, #4]
	button[port].releasedY1Sec = released_y1sec;
 800bdf0:	4654      	mov	r4, sl
 800bdf2:	7144      	strb	r4, [r0, #5]
	button[port].releasedY2Sec = released_y2sec;
 800bdf4:	464c      	mov	r4, r9
 800bdf6:	7184      	strb	r4, [r0, #6]
	button[port].releasedY3Sec = released_y3sec;
 800bdf8:	4644      	mov	r4, r8
 800bdfa:	71c4      	strb	r4, [r0, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d005      	beq.n	800be0c <SetButtonEvents+0x6c>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800be00:	2b00      	cmp	r3, #0
 800be02:	d000      	beq.n	800be06 <SetButtonEvents+0x66>
 800be04:	e0ca      	b.n	800bf9c <SetButtonEvents+0x1fc>
 800be06:	2900      	cmp	r1, #0
 800be08:	d100      	bne.n	800be0c <SetButtonEvents+0x6c>
 800be0a:	e0c7      	b.n	800bf9c <SetButtonEvents+0x1fc>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800be0c:	00f8      	lsls	r0, r7, #3
 800be0e:	19c0      	adds	r0, r0, r7
 800be10:	49a4      	ldr	r1, [pc, #656]	; (800c0a4 <SetButtonEvents+0x304>)
 800be12:	1809      	adds	r1, r1, r0
 800be14:	7a08      	ldrb	r0, [r1, #8]
 800be16:	2401      	movs	r4, #1
 800be18:	4320      	orrs	r0, r4
 800be1a:	7208      	strb	r0, [r1, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	d005      	beq.n	800be2c <SetButtonEvents+0x8c>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800be20:	2b00      	cmp	r3, #0
 800be22:	d000      	beq.n	800be26 <SetButtonEvents+0x86>
 800be24:	e0c6      	b.n	800bfb4 <SetButtonEvents+0x214>
 800be26:	2a00      	cmp	r2, #0
 800be28:	d100      	bne.n	800be2c <SetButtonEvents+0x8c>
 800be2a:	e0c3      	b.n	800bfb4 <SetButtonEvents+0x214>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800be2c:	00f9      	lsls	r1, r7, #3
 800be2e:	19c9      	adds	r1, r1, r7
 800be30:	4a9c      	ldr	r2, [pc, #624]	; (800c0a4 <SetButtonEvents+0x304>)
 800be32:	1852      	adds	r2, r2, r1
 800be34:	7a11      	ldrb	r1, [r2, #8]
 800be36:	2002      	movs	r0, #2
 800be38:	4301      	orrs	r1, r0
 800be3a:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d006      	beq.n	800be4e <SetButtonEvents+0xae>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800be40:	2b00      	cmp	r3, #0
 800be42:	d000      	beq.n	800be46 <SetButtonEvents+0xa6>
 800be44:	e0c2      	b.n	800bfcc <SetButtonEvents+0x22c>
 800be46:	465a      	mov	r2, fp
 800be48:	2a00      	cmp	r2, #0
 800be4a:	d100      	bne.n	800be4e <SetButtonEvents+0xae>
 800be4c:	e0be      	b.n	800bfcc <SetButtonEvents+0x22c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800be4e:	00f9      	lsls	r1, r7, #3
 800be50:	19c9      	adds	r1, r1, r7
 800be52:	4a94      	ldr	r2, [pc, #592]	; (800c0a4 <SetButtonEvents+0x304>)
 800be54:	1852      	adds	r2, r2, r1
 800be56:	7a11      	ldrb	r1, [r2, #8]
 800be58:	2004      	movs	r0, #4
 800be5a:	4301      	orrs	r1, r0
 800be5c:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d005      	beq.n	800be6e <SetButtonEvents+0xce>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800be62:	2b00      	cmp	r3, #0
 800be64:	d000      	beq.n	800be68 <SetButtonEvents+0xc8>
 800be66:	e0be      	b.n	800bfe6 <SetButtonEvents+0x246>
 800be68:	2e00      	cmp	r6, #0
 800be6a:	d100      	bne.n	800be6e <SetButtonEvents+0xce>
 800be6c:	e0bb      	b.n	800bfe6 <SetButtonEvents+0x246>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800be6e:	00f9      	lsls	r1, r7, #3
 800be70:	19c9      	adds	r1, r1, r7
 800be72:	4a8c      	ldr	r2, [pc, #560]	; (800c0a4 <SetButtonEvents+0x304>)
 800be74:	1852      	adds	r2, r2, r1
 800be76:	7a11      	ldrb	r1, [r2, #8]
 800be78:	2008      	movs	r0, #8
 800be7a:	4301      	orrs	r1, r0
 800be7c:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d005      	beq.n	800be8e <SetButtonEvents+0xee>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800be82:	2b00      	cmp	r3, #0
 800be84:	d000      	beq.n	800be88 <SetButtonEvents+0xe8>
 800be86:	e0bb      	b.n	800c000 <SetButtonEvents+0x260>
 800be88:	2d00      	cmp	r5, #0
 800be8a:	d100      	bne.n	800be8e <SetButtonEvents+0xee>
 800be8c:	e0b8      	b.n	800c000 <SetButtonEvents+0x260>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800be8e:	00f9      	lsls	r1, r7, #3
 800be90:	19c9      	adds	r1, r1, r7
 800be92:	4a84      	ldr	r2, [pc, #528]	; (800c0a4 <SetButtonEvents+0x304>)
 800be94:	1852      	adds	r2, r2, r1
 800be96:	7a11      	ldrb	r1, [r2, #8]
 800be98:	2010      	movs	r0, #16
 800be9a:	4301      	orrs	r1, r0
 800be9c:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d006      	beq.n	800beb0 <SetButtonEvents+0x110>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d000      	beq.n	800bea8 <SetButtonEvents+0x108>
 800bea6:	e0b8      	b.n	800c01a <SetButtonEvents+0x27a>
 800bea8:	4652      	mov	r2, sl
 800beaa:	2a00      	cmp	r2, #0
 800beac:	d100      	bne.n	800beb0 <SetButtonEvents+0x110>
 800beae:	e0b4      	b.n	800c01a <SetButtonEvents+0x27a>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800beb0:	00f9      	lsls	r1, r7, #3
 800beb2:	19c9      	adds	r1, r1, r7
 800beb4:	4a7b      	ldr	r2, [pc, #492]	; (800c0a4 <SetButtonEvents+0x304>)
 800beb6:	1852      	adds	r2, r2, r1
 800beb8:	7a11      	ldrb	r1, [r2, #8]
 800beba:	2020      	movs	r0, #32
 800bebc:	4301      	orrs	r1, r0
 800bebe:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d006      	beq.n	800bed2 <SetButtonEvents+0x132>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d000      	beq.n	800beca <SetButtonEvents+0x12a>
 800bec8:	e0b4      	b.n	800c034 <SetButtonEvents+0x294>
 800beca:	464a      	mov	r2, r9
 800becc:	2a00      	cmp	r2, #0
 800bece:	d100      	bne.n	800bed2 <SetButtonEvents+0x132>
 800bed0:	e0b0      	b.n	800c034 <SetButtonEvents+0x294>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800bed2:	00f9      	lsls	r1, r7, #3
 800bed4:	19c9      	adds	r1, r1, r7
 800bed6:	4a73      	ldr	r2, [pc, #460]	; (800c0a4 <SetButtonEvents+0x304>)
 800bed8:	1852      	adds	r2, r2, r1
 800beda:	7a11      	ldrb	r1, [r2, #8]
 800bedc:	2040      	movs	r0, #64	; 0x40
 800bede:	4301      	orrs	r1, r0
 800bee0:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d006      	beq.n	800bef4 <SetButtonEvents+0x154>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d000      	beq.n	800beec <SetButtonEvents+0x14c>
 800beea:	e0b0      	b.n	800c04e <SetButtonEvents+0x2ae>
 800beec:	4642      	mov	r2, r8
 800beee:	2a00      	cmp	r2, #0
 800bef0:	d100      	bne.n	800bef4 <SetButtonEvents+0x154>
 800bef2:	e0ac      	b.n	800c04e <SetButtonEvents+0x2ae>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800bef4:	00fa      	lsls	r2, r7, #3
 800bef6:	19d2      	adds	r2, r2, r7
 800bef8:	4b6a      	ldr	r3, [pc, #424]	; (800c0a4 <SetButtonEvents+0x304>)
 800befa:	189b      	adds	r3, r3, r2
 800befc:	7a19      	ldrb	r1, [r3, #8]
 800befe:	2280      	movs	r2, #128	; 0x80
 800bf00:	4252      	negs	r2, r2
 800bf02:	430a      	orrs	r2, r1
 800bf04:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	}

	/* Add to EEPROM */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800bf06:	003c      	movs	r4, r7
 800bf08:	343a      	adds	r4, #58	; 0x3a
 800bf0a:	00a4      	lsls	r4, r4, #2
 800bf0c:	ab02      	add	r3, sp, #8
 800bf0e:	1d99      	adds	r1, r3, #6
 800bf10:	0020      	movs	r0, r4
 800bf12:	f7ff f989 	bl	800b228 <EE_ReadVariable>
	if (!res)											// This variable exists
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d000      	beq.n	800bf1c <SetButtonEvents+0x17c>
 800bf1a:	e0bf      	b.n	800c09c <SetButtonEvents+0x2fc>
	{
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800bf1c:	ab02      	add	r3, sp, #8
 800bf1e:	3306      	adds	r3, #6
 800bf20:	881b      	ldrh	r3, [r3, #0]
 800bf22:	0a18      	lsrs	r0, r3, #8
		/* Store event flags */
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	00fa      	lsls	r2, r7, #3
 800bf28:	19d2      	adds	r2, r2, r7
 800bf2a:	4f5e      	ldr	r7, [pc, #376]	; (800c0a4 <SetButtonEvents+0x304>)
 800bf2c:	18bf      	adds	r7, r7, r2
 800bf2e:	7a39      	ldrb	r1, [r7, #8]
 800bf30:	428b      	cmp	r3, r1
 800bf32:	d000      	beq.n	800bf36 <SetButtonEvents+0x196>
 800bf34:	e098      	b.n	800c068 <SetButtonEvents+0x2c8>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
		}

		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800bf36:	1c63      	adds	r3, r4, #1
 800bf38:	aa02      	add	r2, sp, #8
 800bf3a:	1d97      	adds	r7, r2, #6
 800bf3c:	0039      	movs	r1, r7
 800bf3e:	9301      	str	r3, [sp, #4]
 800bf40:	0018      	movs	r0, r3
 800bf42:	f7ff f971 	bl	800b228 <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800bf46:	883a      	ldrh	r2, [r7, #0]
 800bf48:	4659      	mov	r1, fp
 800bf4a:	0209      	lsls	r1, r1, #8
 800bf4c:	4653      	mov	r3, sl
 800bf4e:	430b      	orrs	r3, r1
		if (temp16
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d000      	beq.n	800bf56 <SetButtonEvents+0x1b6>
 800bf54:	e090      	b.n	800c078 <SetButtonEvents+0x2d8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
					((uint16_t) pressed_x1sec << 8)
							| (uint16_t) released_y1sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800bf56:	1ca3      	adds	r3, r4, #2
 800bf58:	aa02      	add	r2, sp, #8
 800bf5a:	1d97      	adds	r7, r2, #6
 800bf5c:	0039      	movs	r1, r7
 800bf5e:	9301      	str	r3, [sp, #4]
 800bf60:	0018      	movs	r0, r3
 800bf62:	f7ff f961 	bl	800b228 <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800bf66:	883a      	ldrh	r2, [r7, #0]
 800bf68:	0236      	lsls	r6, r6, #8
 800bf6a:	464b      	mov	r3, r9
 800bf6c:	4333      	orrs	r3, r6
		if (temp16
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d000      	beq.n	800bf74 <SetButtonEvents+0x1d4>
 800bf72:	e086      	b.n	800c082 <SetButtonEvents+0x2e2>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
					((uint16_t) pressed_x2sec << 8)
							| (uint16_t) released_y2sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800bf74:	3403      	adds	r4, #3
 800bf76:	ab02      	add	r3, sp, #8
 800bf78:	1d9e      	adds	r6, r3, #6
 800bf7a:	0031      	movs	r1, r6
 800bf7c:	0020      	movs	r0, r4
 800bf7e:	f7ff f953 	bl	800b228 <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800bf82:	8832      	ldrh	r2, [r6, #0]
 800bf84:	022d      	lsls	r5, r5, #8
 800bf86:	4643      	mov	r3, r8
 800bf88:	432b      	orrs	r3, r5
		if (temp16
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d100      	bne.n	800bf90 <SetButtonEvents+0x1f0>
 800bf8e:	e087      	b.n	800c0a0 <SetButtonEvents+0x300>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800bf90:	0019      	movs	r1, r3
 800bf92:	0020      	movs	r0, r4
 800bf94:	f7ff f9fa 	bl	800b38c <EE_WriteVariable>
	}	// TODO - var does not exist after adding button!
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
 800bf98:	2000      	movs	r0, #0
 800bf9a:	e078      	b.n	800c08e <SetButtonEvents+0x2ee>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
 800bf9c:	4319      	orrs	r1, r3
 800bf9e:	d000      	beq.n	800bfa2 <SetButtonEvents+0x202>
 800bfa0:	e73c      	b.n	800be1c <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800bfa2:	00f8      	lsls	r0, r7, #3
 800bfa4:	19c0      	adds	r0, r0, r7
 800bfa6:	493f      	ldr	r1, [pc, #252]	; (800c0a4 <SetButtonEvents+0x304>)
 800bfa8:	1809      	adds	r1, r1, r0
 800bfaa:	7a08      	ldrb	r0, [r1, #8]
 800bfac:	2401      	movs	r4, #1
 800bfae:	43a0      	bics	r0, r4
 800bfb0:	7208      	strb	r0, [r1, #8]
 800bfb2:	e733      	b.n	800be1c <SetButtonEvents+0x7c>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
 800bfb4:	431a      	orrs	r2, r3
 800bfb6:	d000      	beq.n	800bfba <SetButtonEvents+0x21a>
 800bfb8:	e740      	b.n	800be3c <SetButtonEvents+0x9c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800bfba:	00f9      	lsls	r1, r7, #3
 800bfbc:	19c9      	adds	r1, r1, r7
 800bfbe:	4a39      	ldr	r2, [pc, #228]	; (800c0a4 <SetButtonEvents+0x304>)
 800bfc0:	1852      	adds	r2, r2, r1
 800bfc2:	7a11      	ldrb	r1, [r2, #8]
 800bfc4:	2002      	movs	r0, #2
 800bfc6:	4381      	bics	r1, r0
 800bfc8:	7211      	strb	r1, [r2, #8]
 800bfca:	e737      	b.n	800be3c <SetButtonEvents+0x9c>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
 800bfcc:	465a      	mov	r2, fp
 800bfce:	431a      	orrs	r2, r3
 800bfd0:	d000      	beq.n	800bfd4 <SetButtonEvents+0x234>
 800bfd2:	e744      	b.n	800be5e <SetButtonEvents+0xbe>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800bfd4:	00f9      	lsls	r1, r7, #3
 800bfd6:	19c9      	adds	r1, r1, r7
 800bfd8:	4a32      	ldr	r2, [pc, #200]	; (800c0a4 <SetButtonEvents+0x304>)
 800bfda:	1852      	adds	r2, r2, r1
 800bfdc:	7a11      	ldrb	r1, [r2, #8]
 800bfde:	2004      	movs	r0, #4
 800bfe0:	4381      	bics	r1, r0
 800bfe2:	7211      	strb	r1, [r2, #8]
 800bfe4:	e73b      	b.n	800be5e <SetButtonEvents+0xbe>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
 800bfe6:	0032      	movs	r2, r6
 800bfe8:	431a      	orrs	r2, r3
 800bfea:	d000      	beq.n	800bfee <SetButtonEvents+0x24e>
 800bfec:	e747      	b.n	800be7e <SetButtonEvents+0xde>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800bfee:	00f9      	lsls	r1, r7, #3
 800bff0:	19c9      	adds	r1, r1, r7
 800bff2:	4a2c      	ldr	r2, [pc, #176]	; (800c0a4 <SetButtonEvents+0x304>)
 800bff4:	1852      	adds	r2, r2, r1
 800bff6:	7a11      	ldrb	r1, [r2, #8]
 800bff8:	2008      	movs	r0, #8
 800bffa:	4381      	bics	r1, r0
 800bffc:	7211      	strb	r1, [r2, #8]
 800bffe:	e73e      	b.n	800be7e <SetButtonEvents+0xde>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
 800c000:	002a      	movs	r2, r5
 800c002:	431a      	orrs	r2, r3
 800c004:	d000      	beq.n	800c008 <SetButtonEvents+0x268>
 800c006:	e74a      	b.n	800be9e <SetButtonEvents+0xfe>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c008:	00f9      	lsls	r1, r7, #3
 800c00a:	19c9      	adds	r1, r1, r7
 800c00c:	4a25      	ldr	r2, [pc, #148]	; (800c0a4 <SetButtonEvents+0x304>)
 800c00e:	1852      	adds	r2, r2, r1
 800c010:	7a11      	ldrb	r1, [r2, #8]
 800c012:	2010      	movs	r0, #16
 800c014:	4381      	bics	r1, r0
 800c016:	7211      	strb	r1, [r2, #8]
 800c018:	e741      	b.n	800be9e <SetButtonEvents+0xfe>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
 800c01a:	4652      	mov	r2, sl
 800c01c:	431a      	orrs	r2, r3
 800c01e:	d000      	beq.n	800c022 <SetButtonEvents+0x282>
 800c020:	e74e      	b.n	800bec0 <SetButtonEvents+0x120>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c022:	00f9      	lsls	r1, r7, #3
 800c024:	19c9      	adds	r1, r1, r7
 800c026:	4a1f      	ldr	r2, [pc, #124]	; (800c0a4 <SetButtonEvents+0x304>)
 800c028:	1852      	adds	r2, r2, r1
 800c02a:	7a11      	ldrb	r1, [r2, #8]
 800c02c:	2020      	movs	r0, #32
 800c02e:	4381      	bics	r1, r0
 800c030:	7211      	strb	r1, [r2, #8]
 800c032:	e745      	b.n	800bec0 <SetButtonEvents+0x120>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
 800c034:	464a      	mov	r2, r9
 800c036:	431a      	orrs	r2, r3
 800c038:	d000      	beq.n	800c03c <SetButtonEvents+0x29c>
 800c03a:	e752      	b.n	800bee2 <SetButtonEvents+0x142>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c03c:	00f9      	lsls	r1, r7, #3
 800c03e:	19c9      	adds	r1, r1, r7
 800c040:	4a18      	ldr	r2, [pc, #96]	; (800c0a4 <SetButtonEvents+0x304>)
 800c042:	1852      	adds	r2, r2, r1
 800c044:	7a11      	ldrb	r1, [r2, #8]
 800c046:	2040      	movs	r0, #64	; 0x40
 800c048:	4381      	bics	r1, r0
 800c04a:	7211      	strb	r1, [r2, #8]
 800c04c:	e749      	b.n	800bee2 <SetButtonEvents+0x142>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
 800c04e:	4642      	mov	r2, r8
 800c050:	4313      	orrs	r3, r2
 800c052:	d000      	beq.n	800c056 <SetButtonEvents+0x2b6>
 800c054:	e757      	b.n	800bf06 <SetButtonEvents+0x166>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800c056:	00fa      	lsls	r2, r7, #3
 800c058:	19d2      	adds	r2, r2, r7
 800c05a:	4b12      	ldr	r3, [pc, #72]	; (800c0a4 <SetButtonEvents+0x304>)
 800c05c:	189b      	adds	r3, r3, r2
 800c05e:	7a19      	ldrb	r1, [r3, #8]
 800c060:	227f      	movs	r2, #127	; 0x7f
 800c062:	400a      	ands	r2, r1
 800c064:	721a      	strb	r2, [r3, #8]
 800c066:	e74e      	b.n	800bf06 <SetButtonEvents+0x166>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800c068:	0200      	lsls	r0, r0, #8
 800c06a:	4301      	orrs	r1, r0
 800c06c:	ab02      	add	r3, sp, #8
 800c06e:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c070:	0020      	movs	r0, r4
 800c072:	f7ff f98b 	bl	800b38c <EE_WriteVariable>
 800c076:	e75e      	b.n	800bf36 <SetButtonEvents+0x196>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800c078:	0019      	movs	r1, r3
 800c07a:	9801      	ldr	r0, [sp, #4]
 800c07c:	f7ff f986 	bl	800b38c <EE_WriteVariable>
 800c080:	e769      	b.n	800bf56 <SetButtonEvents+0x1b6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800c082:	0019      	movs	r1, r3
 800c084:	9801      	ldr	r0, [sp, #4]
 800c086:	f7ff f981 	bl	800b38c <EE_WriteVariable>
 800c08a:	e773      	b.n	800bf74 <SetButtonEvents+0x1d4>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800c08c:	200b      	movs	r0, #11
}
 800c08e:	b005      	add	sp, #20
 800c090:	bc3c      	pop	{r2, r3, r4, r5}
 800c092:	4690      	mov	r8, r2
 800c094:	4699      	mov	r9, r3
 800c096:	46a2      	mov	sl, r4
 800c098:	46ab      	mov	fp, r5
 800c09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800c09c:	200b      	movs	r0, #11
 800c09e:	e7f6      	b.n	800c08e <SetButtonEvents+0x2ee>
	return result;
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	e7f4      	b.n	800c08e <SetButtonEvents+0x2ee>
 800c0a4:	200023a4 	.word	0x200023a4

0800c0a8 <HAL_ADC_MspInit>:
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
		Error_Handler();
	}
	ADC_flag = 1;
}
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800c0a8:	b500      	push	{lr}
 800c0aa:	b089      	sub	sp, #36	; 0x24

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800c0ac:	2214      	movs	r2, #20
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	a803      	add	r0, sp, #12
 800c0b2:	f006 fe81 	bl	8012db8 <memset>
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c0b6:	4b12      	ldr	r3, [pc, #72]	; (800c100 <HAL_ADC_MspInit+0x58>)
 800c0b8:	6999      	ldr	r1, [r3, #24]
 800c0ba:	2080      	movs	r0, #128	; 0x80
 800c0bc:	0080      	lsls	r0, r0, #2
 800c0be:	4301      	orrs	r1, r0
 800c0c0:	6199      	str	r1, [r3, #24]
 800c0c2:	699a      	ldr	r2, [r3, #24]
 800c0c4:	4002      	ands	r2, r0
 800c0c6:	9201      	str	r2, [sp, #4]
 800c0c8:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c0ca:	695a      	ldr	r2, [r3, #20]
 800c0cc:	2180      	movs	r1, #128	; 0x80
 800c0ce:	0289      	lsls	r1, r1, #10
 800c0d0:	430a      	orrs	r2, r1
 800c0d2:	615a      	str	r2, [r3, #20]
 800c0d4:	695b      	ldr	r3, [r3, #20]
 800c0d6:	400b      	ands	r3, r1
 800c0d8:	9302      	str	r3, [sp, #8]
 800c0da:	9b02      	ldr	r3, [sp, #8]
		 PA2     ------> ADC_IN2
		 PA3     ------> ADC_IN3
		 PA4     ------> ADC_IN4
		 PA5     ------> ADC_IN5
		 */
		if(flag_ADC_Select==1){
 800c0dc:	4a09      	ldr	r2, [pc, #36]	; (800c104 <HAL_ADC_MspInit+0x5c>)
 800c0de:	2368      	movs	r3, #104	; 0x68
 800c0e0:	5cd3      	ldrb	r3, [r2, r3]
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d001      	beq.n	800c0ea <HAL_ADC_MspInit+0x42>
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}

}
 800c0e6:	b009      	add	sp, #36	; 0x24
 800c0e8:	bd00      	pop	{pc}
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800c0ea:	333b      	adds	r3, #59	; 0x3b
 800c0ec:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c0ee:	3b39      	subs	r3, #57	; 0x39
 800c0f0:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c0f2:	3871      	subs	r0, #113	; 0x71
 800c0f4:	38ff      	subs	r0, #255	; 0xff
 800c0f6:	a903      	add	r1, sp, #12
 800c0f8:	05c0      	lsls	r0, r0, #23
 800c0fa:	f004 fdb3 	bl	8010c64 <HAL_GPIO_Init>
}
 800c0fe:	e7f2      	b.n	800c0e6 <HAL_ADC_MspInit+0x3e>
 800c100:	40021000 	.word	0x40021000
 800c104:	200023a4 	.word	0x200023a4

0800c108 <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart, char *side) {

	if (huart->Instance == USART2 && side == "top")
 800c108:	6803      	ldr	r3, [r0, #0]
 800c10a:	4a10      	ldr	r2, [pc, #64]	; (800c14c <Get_channel+0x44>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d009      	beq.n	800c124 <Get_channel+0x1c>
		return ADC_CHANNEL_2;
	else if (huart->Instance == USART2 && side == "bottom")
 800c110:	4a0e      	ldr	r2, [pc, #56]	; (800c14c <Get_channel+0x44>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d00b      	beq.n	800c12e <Get_channel+0x26>
		return ADC_CHANNEL_3;
	else if (huart->Instance == USART6 && side == "top")
 800c116:	4a0e      	ldr	r2, [pc, #56]	; (800c150 <Get_channel+0x48>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d00d      	beq.n	800c138 <Get_channel+0x30>
		return ADC_CHANNEL_4;
	else if (huart->Instance == USART6 && side == "bottom")
 800c11c:	4a0c      	ldr	r2, [pc, #48]	; (800c150 <Get_channel+0x48>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d00f      	beq.n	800c142 <Get_channel+0x3a>
		return ADC_CHANNEL_5;
}
 800c122:	4770      	bx	lr
	if (huart->Instance == USART2 && side == "top")
 800c124:	4a0b      	ldr	r2, [pc, #44]	; (800c154 <Get_channel+0x4c>)
 800c126:	4291      	cmp	r1, r2
 800c128:	d1f2      	bne.n	800c110 <Get_channel+0x8>
		return ADC_CHANNEL_2;
 800c12a:	2002      	movs	r0, #2
 800c12c:	e7f9      	b.n	800c122 <Get_channel+0x1a>
	else if (huart->Instance == USART2 && side == "bottom")
 800c12e:	4a0a      	ldr	r2, [pc, #40]	; (800c158 <Get_channel+0x50>)
 800c130:	4291      	cmp	r1, r2
 800c132:	d1f0      	bne.n	800c116 <Get_channel+0xe>
		return ADC_CHANNEL_3;
 800c134:	2003      	movs	r0, #3
 800c136:	e7f4      	b.n	800c122 <Get_channel+0x1a>
	else if (huart->Instance == USART6 && side == "top")
 800c138:	4a06      	ldr	r2, [pc, #24]	; (800c154 <Get_channel+0x4c>)
 800c13a:	4291      	cmp	r1, r2
 800c13c:	d1ee      	bne.n	800c11c <Get_channel+0x14>
		return ADC_CHANNEL_4;
 800c13e:	2004      	movs	r0, #4
 800c140:	e7ef      	b.n	800c122 <Get_channel+0x1a>
	else if (huart->Instance == USART6 && side == "bottom")
 800c142:	4b05      	ldr	r3, [pc, #20]	; (800c158 <Get_channel+0x50>)
 800c144:	4299      	cmp	r1, r3
 800c146:	d1ec      	bne.n	800c122 <Get_channel+0x1a>
		return ADC_CHANNEL_5;
 800c148:	2005      	movs	r0, #5
 800c14a:	e7ea      	b.n	800c122 <Get_channel+0x1a>
 800c14c:	40004400 	.word	0x40004400
 800c150:	40011400 	.word	0x40011400
 800c154:	080189d4 	.word	0x080189d4
 800c158:	080189d8 	.word	0x080189d8

0800c15c <Error_Handler>:

void Error_Handler(void) {
 800c15c:	b510      	push	{r4, lr}

	HAL_Delay(100);
 800c15e:	2064      	movs	r0, #100	; 0x64
 800c160:	f003 fb1a 	bl	800f798 <HAL_Delay>

}
 800c164:	bd10      	pop	{r4, pc}
	...

0800c168 <MX_ADC_Init>:
void MX_ADC_Init(void) {
 800c168:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 800c16a:	4811      	ldr	r0, [pc, #68]	; (800c1b0 <MX_ADC_Init+0x48>)
 800c16c:	4b11      	ldr	r3, [pc, #68]	; (800c1b4 <MX_ADC_Init+0x4c>)
 800c16e:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c170:	2380      	movs	r3, #128	; 0x80
 800c172:	061b      	lsls	r3, r3, #24
 800c174:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c176:	2300      	movs	r3, #0
 800c178:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c17a:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800c17c:	2201      	movs	r2, #1
 800c17e:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c180:	2104      	movs	r1, #4
 800c182:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800c184:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800c186:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 800c188:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800c18a:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c18c:	21c2      	movs	r1, #194	; 0xc2
 800c18e:	31ff      	adds	r1, #255	; 0xff
 800c190:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c192:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 800c194:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c196:	6342      	str	r2, [r0, #52]	; 0x34
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800c198:	f003 fbd8 	bl	800f94c <HAL_ADC_Init>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	d104      	bne.n	800c1aa <MX_ADC_Init+0x42>
	ADC_flag = 1;
 800c1a0:	4a05      	ldr	r2, [pc, #20]	; (800c1b8 <MX_ADC_Init+0x50>)
 800c1a2:	2369      	movs	r3, #105	; 0x69
 800c1a4:	2101      	movs	r1, #1
 800c1a6:	54d1      	strb	r1, [r2, r3]
}
 800c1a8:	bd10      	pop	{r4, pc}
		Error_Handler();
 800c1aa:	f7ff ffd7 	bl	800c15c <Error_Handler>
 800c1ae:	e7f7      	b.n	800c1a0 <MX_ADC_Init+0x38>
 800c1b0:	20006c3c 	.word	0x20006c3c
 800c1b4:	40012400 	.word	0x40012400
 800c1b8:	200023a4 	.word	0x200023a4

0800c1bc <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800c1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	0006      	movs	r6, r0
 800c1c2:	000f      	movs	r7, r1
	if (0 == ADC_flag)
 800c1c4:	4a50      	ldr	r2, [pc, #320]	; (800c308 <ReadTempAndVref+0x14c>)
 800c1c6:	2369      	movs	r3, #105	; 0x69
 800c1c8:	5cd3      	ldrb	r3, [r2, r3]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d100      	bne.n	800c1d0 <ReadTempAndVref+0x14>
 800c1ce:	e08b      	b.n	800c2e8 <ReadTempAndVref+0x12c>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c1d0:	494d      	ldr	r1, [pc, #308]	; (800c308 <ReadTempAndVref+0x14c>)
 800c1d2:	2310      	movs	r3, #16
 800c1d4:	66cb      	str	r3, [r1, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c1d6:	2380      	movs	r3, #128	; 0x80
 800c1d8:	015b      	lsls	r3, r3, #5
 800c1da:	670b      	str	r3, [r1, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	674b      	str	r3, [r1, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c1e0:	316c      	adds	r1, #108	; 0x6c
 800c1e2:	484a      	ldr	r0, [pc, #296]	; (800c30c <ReadTempAndVref+0x150>)
 800c1e4:	f003 fd20 	bl	800fc28 <HAL_ADC_ConfigChannel>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	d000      	beq.n	800c1ee <ReadTempAndVref+0x32>
 800c1ec:	e07f      	b.n	800c2ee <ReadTempAndVref+0x132>
	HAL_ADC_Start(&hadc);
 800c1ee:	4d47      	ldr	r5, [pc, #284]	; (800c30c <ReadTempAndVref+0x150>)
 800c1f0:	0028      	movs	r0, r5
 800c1f2:	f003 fc5f 	bl	800fab4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800c1f6:	2164      	movs	r1, #100	; 0x64
 800c1f8:	0028      	movs	r0, r5
 800c1fa:	f003 fcad 	bl	800fb58 <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800c1fe:	0028      	movs	r0, r5
 800c200:	f003 fd0c 	bl	800fc1c <HAL_ADC_GetValue>
 800c204:	b280      	uxth	r0, r0
 800c206:	4c40      	ldr	r4, [pc, #256]	; (800c308 <ReadTempAndVref+0x14c>)
 800c208:	2378      	movs	r3, #120	; 0x78
 800c20a:	52e0      	strh	r0, [r4, r3]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800c20c:	f7f6 fc28 	bl	8002a60 <__aeabi_i2d>
 800c210:	4a3f      	ldr	r2, [pc, #252]	; (800c310 <ReadTempAndVref+0x154>)
 800c212:	4b40      	ldr	r3, [pc, #256]	; (800c314 <ReadTempAndVref+0x158>)
 800c214:	f7f5 fe18 	bl	8001e48 <__aeabi_dmul>
 800c218:	2200      	movs	r2, #0
 800c21a:	4b3f      	ldr	r3, [pc, #252]	; (800c318 <ReadTempAndVref+0x15c>)
 800c21c:	f7f5 fa0a 	bl	8001634 <__aeabi_ddiv>
 800c220:	4a3e      	ldr	r2, [pc, #248]	; (800c31c <ReadTempAndVref+0x160>)
 800c222:	4b3f      	ldr	r3, [pc, #252]	; (800c320 <ReadTempAndVref+0x164>)
 800c224:	f7f6 f882 	bl	800232c <__aeabi_dsub>
 800c228:	4a3e      	ldr	r2, [pc, #248]	; (800c324 <ReadTempAndVref+0x168>)
 800c22a:	4b3f      	ldr	r3, [pc, #252]	; (800c328 <ReadTempAndVref+0x16c>)
 800c22c:	f7f5 fa02 	bl	8001634 <__aeabi_ddiv>
 800c230:	2200      	movs	r2, #0
 800c232:	4b3e      	ldr	r3, [pc, #248]	; (800c32c <ReadTempAndVref+0x170>)
 800c234:	f7f4 fee2 	bl	8000ffc <__aeabi_dadd>
 800c238:	f7f6 fcd0 	bl	8002bdc <__aeabi_d2f>
 800c23c:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 800c23e:	0028      	movs	r0, r5
 800c240:	f003 fc68 	bl	800fb14 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c244:	2310      	movs	r3, #16
 800c246:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_NONE;
 800c248:	4b39      	ldr	r3, [pc, #228]	; (800c330 <ReadTempAndVref+0x174>)
 800c24a:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c24c:	2301      	movs	r3, #1
 800c24e:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c250:	0021      	movs	r1, r4
 800c252:	316c      	adds	r1, #108	; 0x6c
 800c254:	0028      	movs	r0, r5
 800c256:	f003 fce7 	bl	800fc28 <HAL_ADC_ConfigChannel>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	d14a      	bne.n	800c2f4 <ReadTempAndVref+0x138>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800c25e:	492a      	ldr	r1, [pc, #168]	; (800c308 <ReadTempAndVref+0x14c>)
 800c260:	2311      	movs	r3, #17
 800c262:	66cb      	str	r3, [r1, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c264:	2380      	movs	r3, #128	; 0x80
 800c266:	015b      	lsls	r3, r3, #5
 800c268:	670b      	str	r3, [r1, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800c26a:	2305      	movs	r3, #5
 800c26c:	674b      	str	r3, [r1, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c26e:	316c      	adds	r1, #108	; 0x6c
 800c270:	4826      	ldr	r0, [pc, #152]	; (800c30c <ReadTempAndVref+0x150>)
 800c272:	f003 fcd9 	bl	800fc28 <HAL_ADC_ConfigChannel>
 800c276:	2800      	cmp	r0, #0
 800c278:	d13f      	bne.n	800c2fa <ReadTempAndVref+0x13e>
	HAL_ADC_Start(&hadc);
 800c27a:	4d24      	ldr	r5, [pc, #144]	; (800c30c <ReadTempAndVref+0x150>)
 800c27c:	0028      	movs	r0, r5
 800c27e:	f003 fc19 	bl	800fab4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800c282:	2164      	movs	r1, #100	; 0x64
 800c284:	0028      	movs	r0, r5
 800c286:	f003 fc67 	bl	800fb58 <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800c28a:	0028      	movs	r0, r5
 800c28c:	f003 fcc6 	bl	800fc1c <HAL_ADC_GetValue>
 800c290:	b286      	uxth	r6, r0
 800c292:	4c1d      	ldr	r4, [pc, #116]	; (800c308 <ReadTempAndVref+0x14c>)
 800c294:	237a      	movs	r3, #122	; 0x7a
 800c296:	52e6      	strh	r6, [r4, r3]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800c298:	4b26      	ldr	r3, [pc, #152]	; (800c334 <ReadTempAndVref+0x178>)
 800c29a:	8818      	ldrh	r0, [r3, #0]
 800c29c:	f7f6 fbe0 	bl	8002a60 <__aeabi_i2d>
 800c2a0:	4a1b      	ldr	r2, [pc, #108]	; (800c310 <ReadTempAndVref+0x154>)
 800c2a2:	4b1c      	ldr	r3, [pc, #112]	; (800c314 <ReadTempAndVref+0x158>)
 800c2a4:	f7f5 fdd0 	bl	8001e48 <__aeabi_dmul>
 800c2a8:	9000      	str	r0, [sp, #0]
 800c2aa:	9101      	str	r1, [sp, #4]
 800c2ac:	0030      	movs	r0, r6
 800c2ae:	f7f6 fbd7 	bl	8002a60 <__aeabi_i2d>
 800c2b2:	0002      	movs	r2, r0
 800c2b4:	000b      	movs	r3, r1
 800c2b6:	9800      	ldr	r0, [sp, #0]
 800c2b8:	9901      	ldr	r1, [sp, #4]
 800c2ba:	f7f5 f9bb 	bl	8001634 <__aeabi_ddiv>
 800c2be:	f7f6 fc8d 	bl	8002bdc <__aeabi_d2f>
 800c2c2:	6038      	str	r0, [r7, #0]
	HAL_ADC_Stop(&hadc);
 800c2c4:	0028      	movs	r0, r5
 800c2c6:	f003 fc25 	bl	800fb14 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800c2ca:	2311      	movs	r3, #17
 800c2cc:	66e3      	str	r3, [r4, #108]	; 0x6c
	sConfig.Rank = ADC_RANK_NONE;
 800c2ce:	4b18      	ldr	r3, [pc, #96]	; (800c330 <ReadTempAndVref+0x174>)
 800c2d0:	6723      	str	r3, [r4, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	6763      	str	r3, [r4, #116]	; 0x74
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c2d6:	0021      	movs	r1, r4
 800c2d8:	316c      	adds	r1, #108	; 0x6c
 800c2da:	0028      	movs	r0, r5
 800c2dc:	f003 fca4 	bl	800fc28 <HAL_ADC_ConfigChannel>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	d10d      	bne.n	800c300 <ReadTempAndVref+0x144>
}
 800c2e4:	b003      	add	sp, #12
 800c2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		MX_ADC_Init();
 800c2e8:	f7ff ff3e 	bl	800c168 <MX_ADC_Init>
 800c2ec:	e770      	b.n	800c1d0 <ReadTempAndVref+0x14>
		Error_Handler();
 800c2ee:	f7ff ff35 	bl	800c15c <Error_Handler>
 800c2f2:	e77c      	b.n	800c1ee <ReadTempAndVref+0x32>
		Error_Handler();
 800c2f4:	f7ff ff32 	bl	800c15c <Error_Handler>
 800c2f8:	e7b1      	b.n	800c25e <ReadTempAndVref+0xa2>
		Error_Handler();
 800c2fa:	f7ff ff2f 	bl	800c15c <Error_Handler>
 800c2fe:	e7bc      	b.n	800c27a <ReadTempAndVref+0xbe>
		Error_Handler();
 800c300:	f7ff ff2c 	bl	800c15c <Error_Handler>
}
 800c304:	e7ee      	b.n	800c2e4 <ReadTempAndVref+0x128>
 800c306:	46c0      	nop			; (mov r8, r8)
 800c308:	200023a4 	.word	0x200023a4
 800c30c:	20006c3c 	.word	0x20006c3c
 800c310:	66666666 	.word	0x66666666
 800c314:	400a6666 	.word	0x400a6666
 800c318:	40affe00 	.word	0x40affe00
 800c31c:	28f5c28f 	.word	0x28f5c28f
 800c320:	3ff68f5c 	.word	0x3ff68f5c
 800c324:	33333333 	.word	0x33333333
 800c328:	40113333 	.word	0x40113333
 800c32c:	40390000 	.word	0x40390000
 800c330:	00001001 	.word	0x00001001
 800c334:	1ffff7ba 	.word	0x1ffff7ba

0800c338 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800c338:	b570      	push	{r4, r5, r6, lr}
 800c33a:	b086      	sub	sp, #24
 800c33c:	0004      	movs	r4, r0
 800c33e:	000d      	movs	r5, r1
	if (port == 2 || port == 3) {
 800c340:	1e83      	subs	r3, r0, #2
 800c342:	b2db      	uxtb	r3, r3
 800c344:	2b01      	cmp	r3, #1
 800c346:	d901      	bls.n	800c34c <GetReadPrecentage+0x14>
}
 800c348:	b006      	add	sp, #24
 800c34a:	bd70      	pop	{r4, r5, r6, pc}
		if (0 == ADC_flag) {
 800c34c:	4a4a      	ldr	r2, [pc, #296]	; (800c478 <GetReadPrecentage+0x140>)
 800c34e:	2369      	movs	r3, #105	; 0x69
 800c350:	5cd3      	ldrb	r3, [r2, r3]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d050      	beq.n	800c3f8 <GetReadPrecentage+0xc0>
		Channel = Get_channel(GetUart(port), "bottom");
 800c356:	0020      	movs	r0, r4
 800c358:	f001 f984 	bl	800d664 <GetUart>
 800c35c:	4947      	ldr	r1, [pc, #284]	; (800c47c <GetReadPrecentage+0x144>)
 800c35e:	f7ff fed3 	bl	800c108 <Get_channel>
 800c362:	4945      	ldr	r1, [pc, #276]	; (800c478 <GetReadPrecentage+0x140>)
 800c364:	237c      	movs	r3, #124	; 0x7c
 800c366:	54c8      	strb	r0, [r1, r3]
		sConfig.Channel = Channel;
 800c368:	66c8      	str	r0, [r1, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c36a:	2380      	movs	r3, #128	; 0x80
 800c36c:	015b      	lsls	r3, r3, #5
 800c36e:	670b      	str	r3, [r1, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c370:	2301      	movs	r3, #1
 800c372:	674b      	str	r3, [r1, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c374:	316c      	adds	r1, #108	; 0x6c
 800c376:	4842      	ldr	r0, [pc, #264]	; (800c480 <GetReadPrecentage+0x148>)
 800c378:	f003 fc56 	bl	800fc28 <HAL_ADC_ConfigChannel>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d178      	bne.n	800c472 <GetReadPrecentage+0x13a>
		HAL_ADC_Start(&hadc);
 800c380:	4c3f      	ldr	r4, [pc, #252]	; (800c480 <GetReadPrecentage+0x148>)
 800c382:	0020      	movs	r0, r4
 800c384:	f003 fb96 	bl	800fab4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800c388:	2164      	movs	r1, #100	; 0x64
 800c38a:	0020      	movs	r0, r4
 800c38c:	f003 fbe4 	bl	800fb58 <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800c390:	0020      	movs	r0, r4
 800c392:	f003 fc43 	bl	800fc1c <HAL_ADC_GetValue>
 800c396:	f7f4 fdf1 	bl	8000f7c <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 800c39a:	f7f6 fbcd 	bl	8002b38 <__aeabi_f2d>
 800c39e:	4a39      	ldr	r2, [pc, #228]	; (800c484 <GetReadPrecentage+0x14c>)
 800c3a0:	4b39      	ldr	r3, [pc, #228]	; (800c488 <GetReadPrecentage+0x150>)
 800c3a2:	f7f5 fd51 	bl	8001e48 <__aeabi_dmul>
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	4b38      	ldr	r3, [pc, #224]	; (800c48c <GetReadPrecentage+0x154>)
 800c3aa:	f7f5 f943 	bl	8001634 <__aeabi_ddiv>
 800c3ae:	f7f6 fc15 	bl	8002bdc <__aeabi_d2f>
 800c3b2:	4e37      	ldr	r6, [pc, #220]	; (800c490 <GetReadPrecentage+0x158>)
 800c3b4:	6030      	str	r0, [r6, #0]
		current = (100 * percentage) / 3.3;
 800c3b6:	4937      	ldr	r1, [pc, #220]	; (800c494 <GetReadPrecentage+0x15c>)
 800c3b8:	f7f4 faca 	bl	8000950 <__aeabi_fmul>
 800c3bc:	f7f6 fbbc 	bl	8002b38 <__aeabi_f2d>
 800c3c0:	4a30      	ldr	r2, [pc, #192]	; (800c484 <GetReadPrecentage+0x14c>)
 800c3c2:	4b31      	ldr	r3, [pc, #196]	; (800c488 <GetReadPrecentage+0x150>)
 800c3c4:	f7f5 f936 	bl	8001634 <__aeabi_ddiv>
 800c3c8:	f7f6 fc08 	bl	8002bdc <__aeabi_d2f>
 800c3cc:	6070      	str	r0, [r6, #4]
		*precentageValue = current;
 800c3ce:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800c3d0:	0020      	movs	r0, r4
 800c3d2:	f003 fb9f 	bl	800fb14 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800c3d6:	4928      	ldr	r1, [pc, #160]	; (800c478 <GetReadPrecentage+0x140>)
 800c3d8:	237c      	movs	r3, #124	; 0x7c
 800c3da:	5ccb      	ldrb	r3, [r1, r3]
 800c3dc:	66cb      	str	r3, [r1, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800c3de:	4b2e      	ldr	r3, [pc, #184]	; (800c498 <GetReadPrecentage+0x160>)
 800c3e0:	670b      	str	r3, [r1, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	674b      	str	r3, [r1, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c3e6:	316c      	adds	r1, #108	; 0x6c
 800c3e8:	0020      	movs	r0, r4
 800c3ea:	f003 fc1d 	bl	800fc28 <HAL_ADC_ConfigChannel>
 800c3ee:	2800      	cmp	r0, #0
 800c3f0:	d0aa      	beq.n	800c348 <GetReadPrecentage+0x10>
			Error_Handler();
 800c3f2:	f7ff feb3 	bl	800c15c <Error_Handler>
 800c3f6:	e7a7      	b.n	800c348 <GetReadPrecentage+0x10>
			MX_ADC_Init();
 800c3f8:	f7ff feb6 	bl	800c168 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800c3fc:	0020      	movs	r0, r4
 800c3fe:	f001 f931 	bl	800d664 <GetUart>
 800c402:	f005 fce6 	bl	8011dd2 <HAL_UART_DeInit>
			if (port == 3) {
 800c406:	2c03      	cmp	r4, #3
 800c408:	d019      	beq.n	800c43e <GetReadPrecentage+0x106>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800c40a:	2690      	movs	r6, #144	; 0x90
 800c40c:	05f6      	lsls	r6, r6, #23
 800c40e:	2104      	movs	r1, #4
 800c410:	0030      	movs	r0, r6
 800c412:	f004 fcef 	bl	8010df4 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c416:	2304      	movs	r3, #4
 800c418:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c41a:	3b03      	subs	r3, #3
 800c41c:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c41e:	3302      	adds	r3, #2
 800c420:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c422:	a901      	add	r1, sp, #4
 800c424:	0030      	movs	r0, r6
 800c426:	f004 fc1d 	bl	8010c64 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800c42a:	1e63      	subs	r3, r4, #1
 800c42c:	4a1b      	ldr	r2, [pc, #108]	; (800c49c <GetReadPrecentage+0x164>)
 800c42e:	2106      	movs	r1, #6
 800c430:	54d1      	strb	r1, [r2, r3]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800c432:	2201      	movs	r2, #1
 800c434:	3902      	subs	r1, #2
 800c436:	0030      	movs	r0, r6
 800c438:	f004 fd65 	bl	8010f06 <HAL_GPIO_WritePin>
 800c43c:	e78b      	b.n	800c356 <GetReadPrecentage+0x1e>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800c43e:	2690      	movs	r6, #144	; 0x90
 800c440:	05f6      	lsls	r6, r6, #23
 800c442:	2110      	movs	r1, #16
 800c444:	0030      	movs	r0, r6
 800c446:	f004 fcd5 	bl	8010df4 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c44a:	2310      	movs	r3, #16
 800c44c:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c44e:	3b0f      	subs	r3, #15
 800c450:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c452:	3302      	adds	r3, #2
 800c454:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c456:	a901      	add	r1, sp, #4
 800c458:	0030      	movs	r0, r6
 800c45a:	f004 fc03 	bl	8010c64 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800c45e:	1e63      	subs	r3, r4, #1
 800c460:	4a0e      	ldr	r2, [pc, #56]	; (800c49c <GetReadPrecentage+0x164>)
 800c462:	2106      	movs	r1, #6
 800c464:	54d1      	strb	r1, [r2, r3]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c466:	2201      	movs	r2, #1
 800c468:	310a      	adds	r1, #10
 800c46a:	0030      	movs	r0, r6
 800c46c:	f004 fd4b 	bl	8010f06 <HAL_GPIO_WritePin>
 800c470:	e771      	b.n	800c356 <GetReadPrecentage+0x1e>
			Error_Handler();
 800c472:	f7ff fe73 	bl	800c15c <Error_Handler>
 800c476:	e783      	b.n	800c380 <GetReadPrecentage+0x48>
 800c478:	200023a4 	.word	0x200023a4
 800c47c:	080189d8 	.word	0x080189d8
 800c480:	20006c3c 	.word	0x20006c3c
 800c484:	66666666 	.word	0x66666666
 800c488:	400a6666 	.word	0x400a6666
 800c48c:	40affe00 	.word	0x40affe00
 800c490:	20002424 	.word	0x20002424
 800c494:	42c80000 	.word	0x42c80000
 800c498:	00001001 	.word	0x00001001
 800c49c:	20000c2c 	.word	0x20000c2c

0800c4a0 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800c4a0:	2802      	cmp	r0, #2
 800c4a2:	d008      	beq.n	800c4b6 <Get_Rank+0x16>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
 800c4a4:	2802      	cmp	r0, #2
 800c4a6:	d00d      	beq.n	800c4c4 <Get_Rank+0x24>
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800c4a8:	2803      	cmp	r0, #3
 800c4aa:	d012      	beq.n	800c4d2 <Get_Rank+0x32>
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
 800c4ac:	2803      	cmp	r0, #3
 800c4ae:	d017      	beq.n	800c4e0 <Get_Rank+0x40>
		Rank_t = 3;
	return Rank_t;
 800c4b0:	4b0f      	ldr	r3, [pc, #60]	; (800c4f0 <Get_Rank+0x50>)
 800c4b2:	7a18      	ldrb	r0, [r3, #8]
}
 800c4b4:	4770      	bx	lr
	if (Port == 2 && side == "top")
 800c4b6:	4b0f      	ldr	r3, [pc, #60]	; (800c4f4 <Get_Rank+0x54>)
 800c4b8:	4299      	cmp	r1, r3
 800c4ba:	d1f3      	bne.n	800c4a4 <Get_Rank+0x4>
		Rank_t = 0;
 800c4bc:	4b0c      	ldr	r3, [pc, #48]	; (800c4f0 <Get_Rank+0x50>)
 800c4be:	2200      	movs	r2, #0
 800c4c0:	721a      	strb	r2, [r3, #8]
 800c4c2:	e7f5      	b.n	800c4b0 <Get_Rank+0x10>
	else if (Port == 2 && side == "bottom")
 800c4c4:	4b0c      	ldr	r3, [pc, #48]	; (800c4f8 <Get_Rank+0x58>)
 800c4c6:	4299      	cmp	r1, r3
 800c4c8:	d1ee      	bne.n	800c4a8 <Get_Rank+0x8>
		Rank_t = 1;
 800c4ca:	4b09      	ldr	r3, [pc, #36]	; (800c4f0 <Get_Rank+0x50>)
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	721a      	strb	r2, [r3, #8]
 800c4d0:	e7ee      	b.n	800c4b0 <Get_Rank+0x10>
	else if (Port == 3 && side == "top")
 800c4d2:	4b08      	ldr	r3, [pc, #32]	; (800c4f4 <Get_Rank+0x54>)
 800c4d4:	4299      	cmp	r1, r3
 800c4d6:	d1e9      	bne.n	800c4ac <Get_Rank+0xc>
		Rank_t = 2;
 800c4d8:	4b05      	ldr	r3, [pc, #20]	; (800c4f0 <Get_Rank+0x50>)
 800c4da:	2202      	movs	r2, #2
 800c4dc:	721a      	strb	r2, [r3, #8]
 800c4de:	e7e7      	b.n	800c4b0 <Get_Rank+0x10>
	else if (Port == 3 && side == "bottom")
 800c4e0:	4b05      	ldr	r3, [pc, #20]	; (800c4f8 <Get_Rank+0x58>)
 800c4e2:	4299      	cmp	r1, r3
 800c4e4:	d1e4      	bne.n	800c4b0 <Get_Rank+0x10>
		Rank_t = 3;
 800c4e6:	4b02      	ldr	r3, [pc, #8]	; (800c4f0 <Get_Rank+0x50>)
 800c4e8:	2203      	movs	r2, #3
 800c4ea:	721a      	strb	r2, [r3, #8]
 800c4ec:	e7e0      	b.n	800c4b0 <Get_Rank+0x10>
 800c4ee:	46c0      	nop			; (mov r8, r8)
 800c4f0:	20002424 	.word	0x20002424
 800c4f4:	080189d4 	.word	0x080189d4
 800c4f8:	080189d8 	.word	0x080189d8

0800c4fc <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800c4fc:	b570      	push	{r4, r5, r6, lr}
 800c4fe:	0004      	movs	r4, r0
 800c500:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800c502:	1e83      	subs	r3, r0, #2
 800c504:	b2db      	uxtb	r3, r3
 800c506:	2b01      	cmp	r3, #1
 800c508:	d900      	bls.n	800c50c <ADCSelectChannel+0x10>
}
 800c50a:	bd70      	pop	{r4, r5, r6, pc}
		flag_ADC_Select=1;
 800c50c:	4e10      	ldr	r6, [pc, #64]	; (800c550 <ADCSelectChannel+0x54>)
 800c50e:	2368      	movs	r3, #104	; 0x68
 800c510:	2201      	movs	r2, #1
 800c512:	54f2      	strb	r2, [r6, r3]
		HAL_UART_DeInit(GetUart(ADC_port));
 800c514:	f001 f8a6 	bl	800d664 <GetUart>
 800c518:	f005 fc5b 	bl	8011dd2 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800c51c:	1e63      	subs	r3, r4, #1
 800c51e:	4a0d      	ldr	r2, [pc, #52]	; (800c554 <ADCSelectChannel+0x58>)
 800c520:	2106      	movs	r1, #6
 800c522:	54d1      	strb	r1, [r2, r3]
		Channel = Get_channel(GetUart(ADC_port), side);
 800c524:	0020      	movs	r0, r4
 800c526:	f001 f89d 	bl	800d664 <GetUart>
 800c52a:	0029      	movs	r1, r5
 800c52c:	f7ff fdec 	bl	800c108 <Get_channel>
 800c530:	237c      	movs	r3, #124	; 0x7c
 800c532:	54f0      	strb	r0, [r6, r3]
		Rank_t = Get_Rank(ADC_port, side);
 800c534:	0029      	movs	r1, r5
 800c536:	0020      	movs	r0, r4
 800c538:	f7ff ffb2 	bl	800c4a0 <Get_Rank>
 800c53c:	4b06      	ldr	r3, [pc, #24]	; (800c558 <ADCSelectChannel+0x5c>)
 800c53e:	7218      	strb	r0, [r3, #8]
		if (ADC_flag == 0)
 800c540:	2369      	movs	r3, #105	; 0x69
 800c542:	5cf3      	ldrb	r3, [r6, r3]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1e0      	bne.n	800c50a <ADCSelectChannel+0xe>
			MX_ADC_Init();
 800c548:	f7ff fe0e 	bl	800c168 <MX_ADC_Init>
}
 800c54c:	e7dd      	b.n	800c50a <ADCSelectChannel+0xe>
 800c54e:	46c0      	nop			; (mov r8, r8)
 800c550:	200023a4 	.word	0x200023a4
 800c554:	20000c2c 	.word	0x20000c2c
 800c558:	20002424 	.word	0x20002424

0800c55c <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800c55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c55e:	b083      	sub	sp, #12
 800c560:	9001      	str	r0, [sp, #4]
 800c562:	000f      	movs	r7, r1
 800c564:	0015      	movs	r5, r2
	if (ADC_flag == 1) {
 800c566:	4a29      	ldr	r2, [pc, #164]	; (800c60c <ReadADCChannel+0xb0>)
 800c568:	2369      	movs	r3, #105	; 0x69
 800c56a:	5cd3      	ldrb	r3, [r2, r3]
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d009      	beq.n	800c584 <ReadADCChannel+0x28>
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800c570:	4b27      	ldr	r3, [pc, #156]	; (800c610 <ReadADCChannel+0xb4>)
 800c572:	7a1a      	ldrb	r2, [r3, #8]
 800c574:	0052      	lsls	r2, r2, #1
 800c576:	189b      	adds	r3, r3, r2
 800c578:	8998      	ldrh	r0, [r3, #12]
 800c57a:	f7f4 fcff 	bl	8000f7c <__aeabi_ui2f>
 800c57e:	6028      	str	r0, [r5, #0]
}
 800c580:	b003      	add	sp, #12
 800c582:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800c584:	f001 f86e 	bl	800d664 <GetUart>
 800c588:	0039      	movs	r1, r7
 800c58a:	f7ff fdbd 	bl	800c108 <Get_channel>
 800c58e:	4c1f      	ldr	r4, [pc, #124]	; (800c60c <ReadADCChannel+0xb0>)
 800c590:	267c      	movs	r6, #124	; 0x7c
 800c592:	55a0      	strb	r0, [r4, r6]
		Rank_t = Get_Rank(Port, side);
 800c594:	0039      	movs	r1, r7
 800c596:	9801      	ldr	r0, [sp, #4]
 800c598:	f7ff ff82 	bl	800c4a0 <Get_Rank>
 800c59c:	4b1c      	ldr	r3, [pc, #112]	; (800c610 <ReadADCChannel+0xb4>)
 800c59e:	7218      	strb	r0, [r3, #8]
		sConfig.Channel = Channel;
 800c5a0:	5da3      	ldrb	r3, [r4, r6]
 800c5a2:	66e3      	str	r3, [r4, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c5a4:	2380      	movs	r3, #128	; 0x80
 800c5a6:	015b      	lsls	r3, r3, #5
 800c5a8:	6723      	str	r3, [r4, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c5aa:	2303      	movs	r3, #3
 800c5ac:	6763      	str	r3, [r4, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c5ae:	0021      	movs	r1, r4
 800c5b0:	316c      	adds	r1, #108	; 0x6c
 800c5b2:	4818      	ldr	r0, [pc, #96]	; (800c614 <ReadADCChannel+0xb8>)
 800c5b4:	f003 fb38 	bl	800fc28 <HAL_ADC_ConfigChannel>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d123      	bne.n	800c604 <ReadADCChannel+0xa8>
		HAL_ADC_Start(&hadc);
 800c5bc:	4c15      	ldr	r4, [pc, #84]	; (800c614 <ReadADCChannel+0xb8>)
 800c5be:	0020      	movs	r0, r4
 800c5c0:	f003 fa78 	bl	800fab4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800c5c4:	2164      	movs	r1, #100	; 0x64
 800c5c6:	0020      	movs	r0, r4
 800c5c8:	f003 fac6 	bl	800fb58 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800c5cc:	0020      	movs	r0, r4
 800c5ce:	f003 fb25 	bl	800fc1c <HAL_ADC_GetValue>
 800c5d2:	4b0f      	ldr	r3, [pc, #60]	; (800c610 <ReadADCChannel+0xb4>)
 800c5d4:	7a1a      	ldrb	r2, [r3, #8]
 800c5d6:	0052      	lsls	r2, r2, #1
 800c5d8:	189b      	adds	r3, r3, r2
 800c5da:	8198      	strh	r0, [r3, #12]
		HAL_ADC_Stop(&hadc);
 800c5dc:	0020      	movs	r0, r4
 800c5de:	f003 fa99 	bl	800fb14 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800c5e2:	490a      	ldr	r1, [pc, #40]	; (800c60c <ReadADCChannel+0xb0>)
 800c5e4:	237c      	movs	r3, #124	; 0x7c
 800c5e6:	5ccb      	ldrb	r3, [r1, r3]
 800c5e8:	66cb      	str	r3, [r1, #108]	; 0x6c
		sConfig.Rank = ADC_RANK_NONE;
 800c5ea:	4b0b      	ldr	r3, [pc, #44]	; (800c618 <ReadADCChannel+0xbc>)
 800c5ec:	670b      	str	r3, [r1, #112]	; 0x70
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c5ee:	2303      	movs	r3, #3
 800c5f0:	674b      	str	r3, [r1, #116]	; 0x74
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c5f2:	316c      	adds	r1, #108	; 0x6c
 800c5f4:	0020      	movs	r0, r4
 800c5f6:	f003 fb17 	bl	800fc28 <HAL_ADC_ConfigChannel>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d0b8      	beq.n	800c570 <ReadADCChannel+0x14>
			Error_Handler();
 800c5fe:	f7ff fdad 	bl	800c15c <Error_Handler>
 800c602:	e7b5      	b.n	800c570 <ReadADCChannel+0x14>
			Error_Handler();
 800c604:	f7ff fdaa 	bl	800c15c <Error_Handler>
 800c608:	e7d8      	b.n	800c5bc <ReadADCChannel+0x60>
 800c60a:	46c0      	nop			; (mov r8, r8)
 800c60c:	200023a4 	.word	0x200023a4
 800c610:	20002424 	.word	0x20002424
 800c614:	20006c3c 	.word	0x20006c3c
 800c618:	00001001 	.word	0x00001001

0800c61c <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port) {
}
 800c61c:	4770      	bx	lr

0800c61e <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port) {
}
 800c61e:	4770      	bx	lr

0800c620 <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port) {
}
 800c620:	4770      	bx	lr

0800c622 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800c622:	4770      	bx	lr

0800c624 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType) {
}
 800c624:	4770      	bx	lr
	...

0800c628 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800c628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c62a:	46ce      	mov	lr, r9
 800c62c:	4647      	mov	r7, r8
 800c62e:	b580      	push	{r7, lr}
 800c630:	b087      	sub	sp, #28
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800c632:	2401      	movs	r4, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800c634:	2600      	movs	r6, #0
 800c636:	2300      	movs	r3, #0
 800c638:	4698      	mov	r8, r3
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800c63a:	e12f      	b.n	800c89c <CheckAttachedButtons+0x274>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800c63c:	230e      	movs	r3, #14
 800c63e:	446b      	add	r3, sp
 800c640:	8819      	ldrh	r1, [r3, #0]
 800c642:	2201      	movs	r2, #1
 800c644:	9805      	ldr	r0, [sp, #20]
 800c646:	f004 fc5e 	bl	8010f06 <HAL_GPIO_WritePin>
				Delay_us(10);
 800c64a:	200a      	movs	r0, #10
 800c64c:	f000 fe00 	bl	800d250 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800c650:	ab03      	add	r3, sp, #12
 800c652:	8819      	ldrh	r1, [r3, #0]
 800c654:	9804      	ldr	r0, [sp, #16]
 800c656:	f004 fc4f 	bl	8010ef8 <HAL_GPIO_ReadPin>
 800c65a:	4680      	mov	r8, r0
 800c65c:	e14c      	b.n	800c8f8 <CheckAttachedButtons+0x2d0>
			switch (button[i].type) {
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d104      	bne.n	800c66c <CheckAttachedButtons+0x44>
				if (connected == GPIO_PIN_SET)
 800c662:	4643      	mov	r3, r8
 800c664:	2b01      	cmp	r3, #1
 800c666:	d047      	beq.n	800c6f8 <CheckAttachedButtons+0xd0>
				else if (connected == GPIO_PIN_RESET)
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d03f      	beq.n	800c6ec <CheckAttachedButtons+0xc4>
			if (state == CLOSED || state == ON) {
 800c66c:	2e04      	cmp	r6, #4
 800c66e:	d044      	beq.n	800c6fa <CheckAttachedButtons+0xd2>
 800c670:	2e02      	cmp	r6, #2
 800c672:	d042      	beq.n	800c6fa <CheckAttachedButtons+0xd2>
			if (state == OPEN || state == OFF) {
 800c674:	2e03      	cmp	r6, #3
 800c676:	d055      	beq.n	800c724 <CheckAttachedButtons+0xfc>
 800c678:	2e01      	cmp	r6, #1
 800c67a:	d053      	beq.n	800c724 <CheckAttachedButtons+0xfc>
			if (pressCounter[i] < BOS.buttons.debounce) {
 800c67c:	00aa      	lsls	r2, r5, #2
 800c67e:	4bc5      	ldr	r3, [pc, #788]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c680:	189b      	adds	r3, r3, r2
 800c682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c684:	4ac4      	ldr	r2, [pc, #784]	; (800c998 <CheckAttachedButtons+0x370>)
 800c686:	8812      	ldrh	r2, [r2, #0]
 800c688:	4293      	cmp	r3, r2
 800c68a:	d200      	bcs.n	800c68e <CheckAttachedButtons+0x66>
 800c68c:	e0a6      	b.n	800c7dc <CheckAttachedButtons+0x1b4>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800c68e:	d078      	beq.n	800c782 <CheckAttachedButtons+0x15a>
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800c690:	00a9      	lsls	r1, r5, #2
 800c692:	4bc0      	ldr	r3, [pc, #768]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c694:	185b      	adds	r3, r3, r1
 800c696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c698:	429a      	cmp	r2, r3
 800c69a:	d203      	bcs.n	800c6a4 <CheckAttachedButtons+0x7c>
					releaseCounter[i] = 0;
 800c69c:	4bbd      	ldr	r3, [pc, #756]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c69e:	185b      	adds	r3, r3, r1
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	651a      	str	r2, [r3, #80]	; 0x50
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800c6a4:	00aa      	lsls	r2, r5, #2
 800c6a6:	4bbb      	ldr	r3, [pc, #748]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c6a8:	189b      	adds	r3, r3, r2
 800c6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ac:	4aba      	ldr	r2, [pc, #744]	; (800c998 <CheckAttachedButtons+0x370>)
 800c6ae:	8852      	ldrh	r2, [r2, #2]
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d800      	bhi.n	800c6b6 <CheckAttachedButtons+0x8e>
 800c6b4:	e083      	b.n	800c7be <CheckAttachedButtons+0x196>
						&& pressCounter[i] < 500) {
 800c6b6:	22f4      	movs	r2, #244	; 0xf4
 800c6b8:	32ff      	adds	r2, #255	; 0xff
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d87f      	bhi.n	800c7be <CheckAttachedButtons+0x196>
					if (clicked == 0)
 800c6be:	4bb7      	ldr	r3, [pc, #732]	; (800c99c <CheckAttachedButtons+0x374>)
 800c6c0:	7d5b      	ldrb	r3, [r3, #21]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d167      	bne.n	800c796 <CheckAttachedButtons+0x16e>
						clicked = 1;		// Record a possible single click
 800c6c6:	4bb5      	ldr	r3, [pc, #724]	; (800c99c <CheckAttachedButtons+0x374>)
 800c6c8:	3af3      	subs	r2, #243	; 0xf3
 800c6ca:	3aff      	subs	r2, #255	; 0xff
 800c6cc:	755a      	strb	r2, [r3, #21]
 800c6ce:	e085      	b.n	800c7dc <CheckAttachedButtons+0x1b4>
				if (connected == GPIO_PIN_SET)
 800c6d0:	4643      	mov	r3, r8
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d01e      	beq.n	800c714 <CheckAttachedButtons+0xec>
				else if (connected == GPIO_PIN_RESET)
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1c8      	bne.n	800c66c <CheckAttachedButtons+0x44>
					state = OPEN;
 800c6da:	2603      	movs	r6, #3
 800c6dc:	e7c8      	b.n	800c670 <CheckAttachedButtons+0x48>
				if (connected == GPIO_PIN_SET)
 800c6de:	4643      	mov	r3, r8
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d005      	beq.n	800c6f0 <CheckAttachedButtons+0xc8>
				else if (connected == GPIO_PIN_RESET)
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d1c1      	bne.n	800c66c <CheckAttachedButtons+0x44>
					state = OFF;
 800c6e8:	2601      	movs	r6, #1
 800c6ea:	e7c1      	b.n	800c670 <CheckAttachedButtons+0x48>
					state = OPEN;
 800c6ec:	2603      	movs	r6, #3
 800c6ee:	e7bf      	b.n	800c670 <CheckAttachedButtons+0x48>
					state = ON;
 800c6f0:	2602      	movs	r6, #2
 800c6f2:	e7bd      	b.n	800c670 <CheckAttachedButtons+0x48>
					state = OFF;
 800c6f4:	4646      	mov	r6, r8
 800c6f6:	e7bb      	b.n	800c670 <CheckAttachedButtons+0x48>
					state = CLOSED;
 800c6f8:	2604      	movs	r6, #4
				if (pressCounter[i] < 0xFFFF)
 800c6fa:	00aa      	lsls	r2, r5, #2
 800c6fc:	4ba5      	ldr	r3, [pc, #660]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c6fe:	189b      	adds	r3, r3, r2
 800c700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c702:	4aa7      	ldr	r2, [pc, #668]	; (800c9a0 <CheckAttachedButtons+0x378>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d807      	bhi.n	800c718 <CheckAttachedButtons+0xf0>
					++pressCounter[i];			// Advance the debounce counter
 800c708:	00a9      	lsls	r1, r5, #2
 800c70a:	4aa2      	ldr	r2, [pc, #648]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c70c:	1852      	adds	r2, r2, r1
 800c70e:	3301      	adds	r3, #1
 800c710:	6393      	str	r3, [r2, #56]	; 0x38
 800c712:	e7af      	b.n	800c674 <CheckAttachedButtons+0x4c>
					state = CLOSED;
 800c714:	2604      	movs	r6, #4
 800c716:	e7f0      	b.n	800c6fa <CheckAttachedButtons+0xd2>
					pressCounter[i] = 0;			// Reset debounce counter
 800c718:	00aa      	lsls	r2, r5, #2
 800c71a:	4b9e      	ldr	r3, [pc, #632]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c71c:	189b      	adds	r3, r3, r2
 800c71e:	2200      	movs	r2, #0
 800c720:	639a      	str	r2, [r3, #56]	; 0x38
 800c722:	e7a7      	b.n	800c674 <CheckAttachedButtons+0x4c>
				if (releaseCounter[i] < 0xFFFF)
 800c724:	00aa      	lsls	r2, r5, #2
 800c726:	4b9b      	ldr	r3, [pc, #620]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c728:	189b      	adds	r3, r3, r2
 800c72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c72c:	4a9c      	ldr	r2, [pc, #624]	; (800c9a0 <CheckAttachedButtons+0x378>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d815      	bhi.n	800c75e <CheckAttachedButtons+0x136>
					++releaseCounter[i];		// Advance the debounce counter
 800c732:	00a9      	lsls	r1, r5, #2
 800c734:	4a97      	ldr	r2, [pc, #604]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c736:	1852      	adds	r2, r2, r1
 800c738:	3301      	adds	r3, #1
 800c73a:	6513      	str	r3, [r2, #80]	; 0x50
				if (clicked == 2
 800c73c:	4b97      	ldr	r3, [pc, #604]	; (800c99c <CheckAttachedButtons+0x374>)
 800c73e:	7d5b      	ldrb	r3, [r3, #21]
 800c740:	2b02      	cmp	r3, #2
 800c742:	d012      	beq.n	800c76a <CheckAttachedButtons+0x142>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800c744:	4b95      	ldr	r3, [pc, #596]	; (800c99c <CheckAttachedButtons+0x374>)
 800c746:	195b      	adds	r3, r3, r5
 800c748:	7e1a      	ldrb	r2, [r3, #24]
 800c74a:	4b93      	ldr	r3, [pc, #588]	; (800c998 <CheckAttachedButtons+0x370>)
 800c74c:	795b      	ldrb	r3, [r3, #5]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d994      	bls.n	800c67c <CheckAttachedButtons+0x54>
					clicked = 0;
 800c752:	4b92      	ldr	r3, [pc, #584]	; (800c99c <CheckAttachedButtons+0x374>)
 800c754:	2200      	movs	r2, #0
 800c756:	755a      	strb	r2, [r3, #21]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800c758:	195b      	adds	r3, r3, r5
 800c75a:	761a      	strb	r2, [r3, #24]
 800c75c:	e78e      	b.n	800c67c <CheckAttachedButtons+0x54>
					releaseCounter[i] = 0;		// Reset debounce counter
 800c75e:	00aa      	lsls	r2, r5, #2
 800c760:	4b8c      	ldr	r3, [pc, #560]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c762:	189b      	adds	r3, r3, r2
 800c764:	2200      	movs	r2, #0
 800c766:	651a      	str	r2, [r3, #80]	; 0x50
 800c768:	e7e8      	b.n	800c73c <CheckAttachedButtons+0x114>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800c76a:	4b8c      	ldr	r3, [pc, #560]	; (800c99c <CheckAttachedButtons+0x374>)
 800c76c:	195b      	adds	r3, r3, r5
 800c76e:	7e1b      	ldrb	r3, [r3, #24]
 800c770:	4a89      	ldr	r2, [pc, #548]	; (800c998 <CheckAttachedButtons+0x370>)
 800c772:	7952      	ldrb	r2, [r2, #5]
 800c774:	4293      	cmp	r3, r2
 800c776:	d8e5      	bhi.n	800c744 <CheckAttachedButtons+0x11c>
					++dblCounter[i];
 800c778:	4a88      	ldr	r2, [pc, #544]	; (800c99c <CheckAttachedButtons+0x374>)
 800c77a:	1952      	adds	r2, r2, r5
 800c77c:	3301      	adds	r3, #1
 800c77e:	7613      	strb	r3, [r2, #24]
 800c780:	e77c      	b.n	800c67c <CheckAttachedButtons+0x54>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800c782:	4984      	ldr	r1, [pc, #528]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c784:	00e8      	lsls	r0, r5, #3
 800c786:	1940      	adds	r0, r0, r5
 800c788:	2707      	movs	r7, #7
 800c78a:	5447      	strb	r7, [r0, r1]
					++pressCounter[i];
 800c78c:	00a8      	lsls	r0, r5, #2
 800c78e:	1809      	adds	r1, r1, r0
 800c790:	3301      	adds	r3, #1
 800c792:	638b      	str	r3, [r1, #56]	; 0x38
 800c794:	e77c      	b.n	800c690 <CheckAttachedButtons+0x68>
					else if (clicked == 2) {
 800c796:	2b02      	cmp	r3, #2
 800c798:	d120      	bne.n	800c7dc <CheckAttachedButtons+0x1b4>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800c79a:	4b80      	ldr	r3, [pc, #512]	; (800c99c <CheckAttachedButtons+0x374>)
 800c79c:	195b      	adds	r3, r3, r5
 800c79e:	7e1b      	ldrb	r3, [r3, #24]
 800c7a0:	4a7d      	ldr	r2, [pc, #500]	; (800c998 <CheckAttachedButtons+0x370>)
 800c7a2:	7912      	ldrb	r2, [r2, #4]
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d919      	bls.n	800c7dc <CheckAttachedButtons+0x1b4>
										< BOS.buttons.maxInterClickTime) {
 800c7a8:	4a7b      	ldr	r2, [pc, #492]	; (800c998 <CheckAttachedButtons+0x370>)
 800c7aa:	7952      	ldrb	r2, [r2, #5]
								&& dblCounter[i]
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d215      	bcs.n	800c7dc <CheckAttachedButtons+0x1b4>
							clicked = 3;	// Record a possible double click
 800c7b0:	4b7a      	ldr	r3, [pc, #488]	; (800c99c <CheckAttachedButtons+0x374>)
 800c7b2:	2203      	movs	r2, #3
 800c7b4:	755a      	strb	r2, [r3, #21]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800c7b6:	195b      	adds	r3, r3, r5
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	761a      	strb	r2, [r3, #24]
 800c7bc:	e00e      	b.n	800c7dc <CheckAttachedButtons+0x1b4>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800c7be:	3bf5      	subs	r3, #245	; 0xf5
 800c7c0:	3bff      	subs	r3, #255	; 0xff
 800c7c2:	4a78      	ldr	r2, [pc, #480]	; (800c9a4 <CheckAttachedButtons+0x37c>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d809      	bhi.n	800c7dc <CheckAttachedButtons+0x1b4>
					if (clicked)
 800c7c8:	4b74      	ldr	r3, [pc, #464]	; (800c99c <CheckAttachedButtons+0x374>)
 800c7ca:	7d5b      	ldrb	r3, [r3, #21]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d002      	beq.n	800c7d6 <CheckAttachedButtons+0x1ae>
						clicked = 0;						// Cannot be a click
 800c7d0:	4b72      	ldr	r3, [pc, #456]	; (800c99c <CheckAttachedButtons+0x374>)
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	755a      	strb	r2, [r3, #21]
					CheckForTimedButtonPress(i);
 800c7d6:	0020      	movs	r0, r4
 800c7d8:	f7ff f95c 	bl	800ba94 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800c7dc:	00aa      	lsls	r2, r5, #2
 800c7de:	4b6d      	ldr	r3, [pc, #436]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c7e0:	189b      	adds	r3, r3, r2
 800c7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7e4:	4a6c      	ldr	r2, [pc, #432]	; (800c998 <CheckAttachedButtons+0x370>)
 800c7e6:	8812      	ldrh	r2, [r2, #0]
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d33d      	bcc.n	800c868 <CheckAttachedButtons+0x240>
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800c7ec:	d024      	beq.n	800c838 <CheckAttachedButtons+0x210>
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800c7ee:	00a9      	lsls	r1, r5, #2
 800c7f0:	4b68      	ldr	r3, [pc, #416]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c7f2:	185b      	adds	r3, r3, r1
 800c7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d203      	bcs.n	800c802 <CheckAttachedButtons+0x1da>
					pressCounter[i] = 0;
 800c7fa:	4b66      	ldr	r3, [pc, #408]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c7fc:	185b      	adds	r3, r3, r1
 800c7fe:	2200      	movs	r2, #0
 800c800:	639a      	str	r2, [r3, #56]	; 0x38
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800c802:	00aa      	lsls	r2, r5, #2
 800c804:	4b63      	ldr	r3, [pc, #396]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c806:	189b      	adds	r3, r3, r2
 800c808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c80a:	4a63      	ldr	r2, [pc, #396]	; (800c998 <CheckAttachedButtons+0x370>)
 800c80c:	8852      	ldrh	r2, [r2, #2]
 800c80e:	4293      	cmp	r3, r2
 800c810:	d925      	bls.n	800c85e <CheckAttachedButtons+0x236>
						&& releaseCounter[i] < 500) {
 800c812:	22f4      	movs	r2, #244	; 0xf4
 800c814:	32ff      	adds	r2, #255	; 0xff
 800c816:	4293      	cmp	r3, r2
 800c818:	d821      	bhi.n	800c85e <CheckAttachedButtons+0x236>
					if (clicked == 1) {
 800c81a:	4b60      	ldr	r3, [pc, #384]	; (800c99c <CheckAttachedButtons+0x374>)
 800c81c:	7d5b      	ldrb	r3, [r3, #21]
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d014      	beq.n	800c84c <CheckAttachedButtons+0x224>
					} else if (clicked == 3) {
 800c822:	2b03      	cmp	r3, #3
 800c824:	d120      	bne.n	800c868 <CheckAttachedButtons+0x240>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800c826:	00eb      	lsls	r3, r5, #3
 800c828:	195b      	adds	r3, r3, r5
 800c82a:	4a5a      	ldr	r2, [pc, #360]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c82c:	2106      	movs	r1, #6
 800c82e:	5499      	strb	r1, [r3, r2]
						clicked = 0;			// Prepare for a single click
 800c830:	4b5a      	ldr	r3, [pc, #360]	; (800c99c <CheckAttachedButtons+0x374>)
 800c832:	2200      	movs	r2, #0
 800c834:	755a      	strb	r2, [r3, #21]
 800c836:	e017      	b.n	800c868 <CheckAttachedButtons+0x240>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800c838:	4956      	ldr	r1, [pc, #344]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c83a:	00e8      	lsls	r0, r5, #3
 800c83c:	1940      	adds	r0, r0, r5
 800c83e:	2708      	movs	r7, #8
 800c840:	5447      	strb	r7, [r0, r1]
					++releaseCounter[i];
 800c842:	00a8      	lsls	r0, r5, #2
 800c844:	1809      	adds	r1, r1, r0
 800c846:	3301      	adds	r3, #1
 800c848:	650b      	str	r3, [r1, #80]	; 0x50
 800c84a:	e7d0      	b.n	800c7ee <CheckAttachedButtons+0x1c6>
						button[i].state = CLICKED;// Record a single button click event
 800c84c:	00eb      	lsls	r3, r5, #3
 800c84e:	195b      	adds	r3, r3, r5
 800c850:	4a50      	ldr	r2, [pc, #320]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c852:	2105      	movs	r1, #5
 800c854:	5499      	strb	r1, [r3, r2]
						clicked = 2;			// Prepare for a double click
 800c856:	4b51      	ldr	r3, [pc, #324]	; (800c99c <CheckAttachedButtons+0x374>)
 800c858:	2202      	movs	r2, #2
 800c85a:	755a      	strb	r2, [r3, #21]
 800c85c:	e004      	b.n	800c868 <CheckAttachedButtons+0x240>
						&& releaseCounter[i] < 0xFFFF) {
 800c85e:	3bf5      	subs	r3, #245	; 0xf5
 800c860:	3bff      	subs	r3, #255	; 0xff
				} else if (releaseCounter[i] >= 500
 800c862:	4a50      	ldr	r2, [pc, #320]	; (800c9a4 <CheckAttachedButtons+0x37c>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d90b      	bls.n	800c880 <CheckAttachedButtons+0x258>
			switch (button[i].state) {
 800c868:	00eb      	lsls	r3, r5, #3
 800c86a:	195b      	adds	r3, r3, r5
 800c86c:	4a49      	ldr	r2, [pc, #292]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c86e:	5c9b      	ldrb	r3, [r3, r2]
 800c870:	3b05      	subs	r3, #5
 800c872:	b2da      	uxtb	r2, r3
 800c874:	2a09      	cmp	r2, #9
 800c876:	d80f      	bhi.n	800c898 <CheckAttachedButtons+0x270>
 800c878:	0093      	lsls	r3, r2, #2
 800c87a:	4a4b      	ldr	r2, [pc, #300]	; (800c9a8 <CheckAttachedButtons+0x380>)
 800c87c:	58d3      	ldr	r3, [r2, r3]
 800c87e:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 800c880:	0020      	movs	r0, r4
 800c882:	f7ff f93d 	bl	800bb00 <CheckForTimedButtonRelease>
 800c886:	e7ef      	b.n	800c868 <CheckAttachedButtons+0x240>
				buttonPressedCallback(i);
 800c888:	0020      	movs	r0, r4
 800c88a:	f7ff f901 	bl	800ba90 <buttonPressedCallback>
				button[i].state = NONE;
 800c88e:	00eb      	lsls	r3, r5, #3
 800c890:	195d      	adds	r5, r3, r5
 800c892:	4b40      	ldr	r3, [pc, #256]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c894:	2200      	movs	r2, #0
 800c896:	54ea      	strb	r2, [r5, r3]
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800c898:	3401      	adds	r4, #1
 800c89a:	b2e4      	uxtb	r4, r4
 800c89c:	2c05      	cmp	r4, #5
 800c89e:	d900      	bls.n	800c8a2 <CheckAttachedButtons+0x27a>
 800c8a0:	e103      	b.n	800caaa <CheckAttachedButtons+0x482>
		if (button[i].type)			// Only check defined butons
 800c8a2:	0025      	movs	r5, r4
 800c8a4:	00e2      	lsls	r2, r4, #3
 800c8a6:	1912      	adds	r2, r2, r4
 800c8a8:	4b3a      	ldr	r3, [pc, #232]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c8aa:	189b      	adds	r3, r3, r2
 800c8ac:	785b      	ldrb	r3, [r3, #1]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d0f2      	beq.n	800c898 <CheckAttachedButtons+0x270>
			if (delayButtonStateReset == false)
 800c8b2:	4b3a      	ldr	r3, [pc, #232]	; (800c99c <CheckAttachedButtons+0x374>)
 800c8b4:	7d1b      	ldrb	r3, [r3, #20]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d103      	bne.n	800c8c2 <CheckAttachedButtons+0x29a>
				button[i].state = NONE;
 800c8ba:	0013      	movs	r3, r2
 800c8bc:	4a35      	ldr	r2, [pc, #212]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c8be:	2100      	movs	r1, #0
 800c8c0:	5499      	strb	r1, [r3, r2]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800c8c2:	230e      	movs	r3, #14
 800c8c4:	446b      	add	r3, sp
 800c8c6:	4699      	mov	r9, r3
 800c8c8:	af03      	add	r7, sp, #12
 800c8ca:	9700      	str	r7, [sp, #0]
 800c8cc:	ab04      	add	r3, sp, #16
 800c8ce:	464a      	mov	r2, r9
 800c8d0:	a905      	add	r1, sp, #20
 800c8d2:	0020      	movs	r0, r4
 800c8d4:	f7fe fff6 	bl	800b8c4 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800c8d8:	464b      	mov	r3, r9
 800c8da:	8819      	ldrh	r1, [r3, #0]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	9805      	ldr	r0, [sp, #20]
 800c8e0:	f004 fb11 	bl	8010f06 <HAL_GPIO_WritePin>
			Delay_us(10);
 800c8e4:	200a      	movs	r0, #10
 800c8e6:	f000 fcb3 	bl	800d250 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800c8ea:	8839      	ldrh	r1, [r7, #0]
 800c8ec:	9804      	ldr	r0, [sp, #16]
 800c8ee:	f004 fb03 	bl	8010ef8 <HAL_GPIO_ReadPin>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	d100      	bne.n	800c8f8 <CheckAttachedButtons+0x2d0>
 800c8f6:	e6a1      	b.n	800c63c <CheckAttachedButtons+0x14>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800c8f8:	230e      	movs	r3, #14
 800c8fa:	446b      	add	r3, sp
 800c8fc:	8819      	ldrh	r1, [r3, #0]
 800c8fe:	2200      	movs	r2, #0
 800c900:	9805      	ldr	r0, [sp, #20]
 800c902:	f004 fb00 	bl	8010f06 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800c906:	00ea      	lsls	r2, r5, #3
 800c908:	1952      	adds	r2, r2, r5
 800c90a:	4b22      	ldr	r3, [pc, #136]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c90c:	189b      	adds	r3, r3, r2
 800c90e:	785b      	ldrb	r3, [r3, #1]
 800c910:	2b02      	cmp	r3, #2
 800c912:	d100      	bne.n	800c916 <CheckAttachedButtons+0x2ee>
 800c914:	e6dc      	b.n	800c6d0 <CheckAttachedButtons+0xa8>
 800c916:	d800      	bhi.n	800c91a <CheckAttachedButtons+0x2f2>
 800c918:	e6a1      	b.n	800c65e <CheckAttachedButtons+0x36>
 800c91a:	2b03      	cmp	r3, #3
 800c91c:	d100      	bne.n	800c920 <CheckAttachedButtons+0x2f8>
 800c91e:	e6de      	b.n	800c6de <CheckAttachedButtons+0xb6>
 800c920:	2b04      	cmp	r3, #4
 800c922:	d000      	beq.n	800c926 <CheckAttachedButtons+0x2fe>
 800c924:	e6a2      	b.n	800c66c <CheckAttachedButtons+0x44>
				if (connected == GPIO_PIN_SET)
 800c926:	4643      	mov	r3, r8
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d100      	bne.n	800c92e <CheckAttachedButtons+0x306>
 800c92c:	e6e2      	b.n	800c6f4 <CheckAttachedButtons+0xcc>
				else if (connected == GPIO_PIN_RESET)
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d000      	beq.n	800c934 <CheckAttachedButtons+0x30c>
 800c932:	e69b      	b.n	800c66c <CheckAttachedButtons+0x44>
					state = ON;
 800c934:	2602      	movs	r6, #2
 800c936:	e69b      	b.n	800c670 <CheckAttachedButtons+0x48>
				buttonReleasedCallback(i);
 800c938:	0020      	movs	r0, r4
 800c93a:	f7ff fe6f 	bl	800c61c <buttonReleasedCallback>
				button[i].state = NONE;
 800c93e:	00eb      	lsls	r3, r5, #3
 800c940:	195d      	adds	r5, r3, r5
 800c942:	4b14      	ldr	r3, [pc, #80]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c944:	2200      	movs	r2, #0
 800c946:	54ea      	strb	r2, [r5, r3]
				break;
 800c948:	e7a6      	b.n	800c898 <CheckAttachedButtons+0x270>
				if (!delayButtonStateReset
 800c94a:	4b14      	ldr	r3, [pc, #80]	; (800c99c <CheckAttachedButtons+0x374>)
 800c94c:	7d1b      	ldrb	r3, [r3, #20]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d1a2      	bne.n	800c898 <CheckAttachedButtons+0x270>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800c952:	00eb      	lsls	r3, r5, #3
 800c954:	195b      	adds	r3, r3, r5
 800c956:	4d0f      	ldr	r5, [pc, #60]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c958:	18ed      	adds	r5, r5, r3
 800c95a:	7a2b      	ldrb	r3, [r5, #8]
 800c95c:	07db      	lsls	r3, r3, #31
 800c95e:	d59b      	bpl.n	800c898 <CheckAttachedButtons+0x270>
					delayButtonStateReset = true;
 800c960:	4b0e      	ldr	r3, [pc, #56]	; (800c99c <CheckAttachedButtons+0x374>)
 800c962:	2201      	movs	r2, #1
 800c964:	751a      	strb	r2, [r3, #20]
					buttonClickedCallback(i);
 800c966:	0020      	movs	r0, r4
 800c968:	f7ff fe59 	bl	800c61e <buttonClickedCallback>
 800c96c:	e794      	b.n	800c898 <CheckAttachedButtons+0x270>
				if (!delayButtonStateReset
 800c96e:	4b0b      	ldr	r3, [pc, #44]	; (800c99c <CheckAttachedButtons+0x374>)
 800c970:	7d1b      	ldrb	r3, [r3, #20]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d190      	bne.n	800c898 <CheckAttachedButtons+0x270>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800c976:	00eb      	lsls	r3, r5, #3
 800c978:	195b      	adds	r3, r3, r5
 800c97a:	4d06      	ldr	r5, [pc, #24]	; (800c994 <CheckAttachedButtons+0x36c>)
 800c97c:	18ed      	adds	r5, r5, r3
 800c97e:	7a2b      	ldrb	r3, [r5, #8]
 800c980:	079b      	lsls	r3, r3, #30
 800c982:	d589      	bpl.n	800c898 <CheckAttachedButtons+0x270>
					delayButtonStateReset = true;
 800c984:	4b05      	ldr	r3, [pc, #20]	; (800c99c <CheckAttachedButtons+0x374>)
 800c986:	2201      	movs	r2, #1
 800c988:	751a      	strb	r2, [r3, #20]
					buttonDblClickedCallback(i);
 800c98a:	0020      	movs	r0, r4
 800c98c:	f7ff fe48 	bl	800c620 <buttonDblClickedCallback>
 800c990:	e782      	b.n	800c898 <CheckAttachedButtons+0x270>
 800c992:	46c0      	nop			; (mov r8, r8)
 800c994:	200023a4 	.word	0x200023a4
 800c998:	20006848 	.word	0x20006848
 800c99c:	20002424 	.word	0x20002424
 800c9a0:	0000fffe 	.word	0x0000fffe
 800c9a4:	0000fe0a 	.word	0x0000fe0a
 800c9a8:	08017b98 	.word	0x08017b98
				if (!delayButtonStateReset
 800c9ac:	4b41      	ldr	r3, [pc, #260]	; (800cab4 <CheckAttachedButtons+0x48c>)
 800c9ae:	7d1b      	ldrb	r3, [r3, #20]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d000      	beq.n	800c9b6 <CheckAttachedButtons+0x38e>
 800c9b4:	e770      	b.n	800c898 <CheckAttachedButtons+0x270>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800c9b6:	00eb      	lsls	r3, r5, #3
 800c9b8:	195b      	adds	r3, r3, r5
 800c9ba:	4d3f      	ldr	r5, [pc, #252]	; (800cab8 <CheckAttachedButtons+0x490>)
 800c9bc:	18ed      	adds	r5, r5, r3
 800c9be:	7a2b      	ldrb	r3, [r5, #8]
 800c9c0:	075b      	lsls	r3, r3, #29
 800c9c2:	d400      	bmi.n	800c9c6 <CheckAttachedButtons+0x39e>
 800c9c4:	e768      	b.n	800c898 <CheckAttachedButtons+0x270>
					delayButtonStateReset = true;
 800c9c6:	4b3b      	ldr	r3, [pc, #236]	; (800cab4 <CheckAttachedButtons+0x48c>)
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	751a      	strb	r2, [r3, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800c9cc:	2101      	movs	r1, #1
 800c9ce:	0020      	movs	r0, r4
 800c9d0:	f7ff fe27 	bl	800c622 <buttonPressedForXCallback>
 800c9d4:	e760      	b.n	800c898 <CheckAttachedButtons+0x270>
				if (!delayButtonStateReset
 800c9d6:	4b37      	ldr	r3, [pc, #220]	; (800cab4 <CheckAttachedButtons+0x48c>)
 800c9d8:	7d1b      	ldrb	r3, [r3, #20]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d000      	beq.n	800c9e0 <CheckAttachedButtons+0x3b8>
 800c9de:	e75b      	b.n	800c898 <CheckAttachedButtons+0x270>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800c9e0:	00eb      	lsls	r3, r5, #3
 800c9e2:	195b      	adds	r3, r3, r5
 800c9e4:	4d34      	ldr	r5, [pc, #208]	; (800cab8 <CheckAttachedButtons+0x490>)
 800c9e6:	18ed      	adds	r5, r5, r3
 800c9e8:	7a2b      	ldrb	r3, [r5, #8]
 800c9ea:	071b      	lsls	r3, r3, #28
 800c9ec:	d400      	bmi.n	800c9f0 <CheckAttachedButtons+0x3c8>
 800c9ee:	e753      	b.n	800c898 <CheckAttachedButtons+0x270>
					delayButtonStateReset = true;
 800c9f0:	4b30      	ldr	r3, [pc, #192]	; (800cab4 <CheckAttachedButtons+0x48c>)
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	751a      	strb	r2, [r3, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800c9f6:	2102      	movs	r1, #2
 800c9f8:	0020      	movs	r0, r4
 800c9fa:	f7ff fe12 	bl	800c622 <buttonPressedForXCallback>
 800c9fe:	e74b      	b.n	800c898 <CheckAttachedButtons+0x270>
				if (!delayButtonStateReset
 800ca00:	4b2c      	ldr	r3, [pc, #176]	; (800cab4 <CheckAttachedButtons+0x48c>)
 800ca02:	7d1b      	ldrb	r3, [r3, #20]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d000      	beq.n	800ca0a <CheckAttachedButtons+0x3e2>
 800ca08:	e746      	b.n	800c898 <CheckAttachedButtons+0x270>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800ca0a:	00eb      	lsls	r3, r5, #3
 800ca0c:	195b      	adds	r3, r3, r5
 800ca0e:	4d2a      	ldr	r5, [pc, #168]	; (800cab8 <CheckAttachedButtons+0x490>)
 800ca10:	18ed      	adds	r5, r5, r3
 800ca12:	7a2b      	ldrb	r3, [r5, #8]
 800ca14:	06db      	lsls	r3, r3, #27
 800ca16:	d400      	bmi.n	800ca1a <CheckAttachedButtons+0x3f2>
 800ca18:	e73e      	b.n	800c898 <CheckAttachedButtons+0x270>
					delayButtonStateReset = true;
 800ca1a:	4b26      	ldr	r3, [pc, #152]	; (800cab4 <CheckAttachedButtons+0x48c>)
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	751a      	strb	r2, [r3, #20]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800ca20:	2103      	movs	r1, #3
 800ca22:	0020      	movs	r0, r4
 800ca24:	f7ff fdfd 	bl	800c622 <buttonPressedForXCallback>
 800ca28:	e736      	b.n	800c898 <CheckAttachedButtons+0x270>
				if (!delayButtonStateReset
 800ca2a:	4b22      	ldr	r3, [pc, #136]	; (800cab4 <CheckAttachedButtons+0x48c>)
 800ca2c:	7d1b      	ldrb	r3, [r3, #20]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d000      	beq.n	800ca34 <CheckAttachedButtons+0x40c>
 800ca32:	e731      	b.n	800c898 <CheckAttachedButtons+0x270>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800ca34:	00eb      	lsls	r3, r5, #3
 800ca36:	195b      	adds	r3, r3, r5
 800ca38:	4d1f      	ldr	r5, [pc, #124]	; (800cab8 <CheckAttachedButtons+0x490>)
 800ca3a:	18ed      	adds	r5, r5, r3
 800ca3c:	7a2b      	ldrb	r3, [r5, #8]
 800ca3e:	069b      	lsls	r3, r3, #26
 800ca40:	d400      	bmi.n	800ca44 <CheckAttachedButtons+0x41c>
 800ca42:	e729      	b.n	800c898 <CheckAttachedButtons+0x270>
					delayButtonStateReset = true;
 800ca44:	4b1b      	ldr	r3, [pc, #108]	; (800cab4 <CheckAttachedButtons+0x48c>)
 800ca46:	2201      	movs	r2, #1
 800ca48:	751a      	strb	r2, [r3, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800ca4a:	2101      	movs	r1, #1
 800ca4c:	0020      	movs	r0, r4
 800ca4e:	f7ff fde9 	bl	800c624 <buttonReleasedForYCallback>
 800ca52:	e721      	b.n	800c898 <CheckAttachedButtons+0x270>
				if (!delayButtonStateReset
 800ca54:	4b17      	ldr	r3, [pc, #92]	; (800cab4 <CheckAttachedButtons+0x48c>)
 800ca56:	7d1b      	ldrb	r3, [r3, #20]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d000      	beq.n	800ca5e <CheckAttachedButtons+0x436>
 800ca5c:	e71c      	b.n	800c898 <CheckAttachedButtons+0x270>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800ca5e:	00eb      	lsls	r3, r5, #3
 800ca60:	195b      	adds	r3, r3, r5
 800ca62:	4d15      	ldr	r5, [pc, #84]	; (800cab8 <CheckAttachedButtons+0x490>)
 800ca64:	18ed      	adds	r5, r5, r3
 800ca66:	7a2b      	ldrb	r3, [r5, #8]
 800ca68:	065b      	lsls	r3, r3, #25
 800ca6a:	d400      	bmi.n	800ca6e <CheckAttachedButtons+0x446>
 800ca6c:	e714      	b.n	800c898 <CheckAttachedButtons+0x270>
					delayButtonStateReset = true;
 800ca6e:	4b11      	ldr	r3, [pc, #68]	; (800cab4 <CheckAttachedButtons+0x48c>)
 800ca70:	2201      	movs	r2, #1
 800ca72:	751a      	strb	r2, [r3, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800ca74:	2102      	movs	r1, #2
 800ca76:	0020      	movs	r0, r4
 800ca78:	f7ff fdd4 	bl	800c624 <buttonReleasedForYCallback>
 800ca7c:	e70c      	b.n	800c898 <CheckAttachedButtons+0x270>
				if (!delayButtonStateReset
 800ca7e:	4b0d      	ldr	r3, [pc, #52]	; (800cab4 <CheckAttachedButtons+0x48c>)
 800ca80:	7d1b      	ldrb	r3, [r3, #20]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d000      	beq.n	800ca88 <CheckAttachedButtons+0x460>
 800ca86:	e707      	b.n	800c898 <CheckAttachedButtons+0x270>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800ca88:	00eb      	lsls	r3, r5, #3
 800ca8a:	195b      	adds	r3, r3, r5
 800ca8c:	4d0a      	ldr	r5, [pc, #40]	; (800cab8 <CheckAttachedButtons+0x490>)
 800ca8e:	18ed      	adds	r5, r5, r3
 800ca90:	2308      	movs	r3, #8
 800ca92:	56eb      	ldrsb	r3, [r5, r3]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	db00      	blt.n	800ca9a <CheckAttachedButtons+0x472>
 800ca98:	e6fe      	b.n	800c898 <CheckAttachedButtons+0x270>
					delayButtonStateReset = true;
 800ca9a:	4b06      	ldr	r3, [pc, #24]	; (800cab4 <CheckAttachedButtons+0x48c>)
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	751a      	strb	r2, [r3, #20]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800caa0:	2103      	movs	r1, #3
 800caa2:	0020      	movs	r0, r4
 800caa4:	f7ff fdbe 	bl	800c624 <buttonReleasedForYCallback>
 800caa8:	e6f6      	b.n	800c898 <CheckAttachedButtons+0x270>
}
 800caaa:	b007      	add	sp, #28
 800caac:	bc0c      	pop	{r2, r3}
 800caae:	4690      	mov	r8, r2
 800cab0:	4699      	mov	r9, r3
 800cab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cab4:	20002424 	.word	0x20002424
 800cab8:	200023a4 	.word	0x200023a4

0800cabc <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800cabc:	f3bf 8f4f 	dsb	sy
 800cac0:	4b03      	ldr	r3, [pc, #12]	; (800cad0 <NVIC_SystemReset+0x14>)
 800cac2:	4a04      	ldr	r2, [pc, #16]	; (800cad4 <NVIC_SystemReset+0x18>)
 800cac4:	60da      	str	r2, [r3, #12]
 800cac6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800caca:	46c0      	nop			; (mov r8, r8)
 800cacc:	e7fd      	b.n	800caca <NVIC_SystemReset+0xe>
 800cace:	46c0      	nop			; (mov r8, r8)
 800cad0:	e000ed00 	.word	0xe000ed00
 800cad4:	05fa0004 	.word	0x05fa0004

0800cad8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800cad8:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800cada:	f002 fe4f 	bl	800f77c <HAL_IncTick>
  osSystickHandler();  
 800cade:	f000 ffe1 	bl	800daa4 <osSystickHandler>

}
 800cae2:	bd10      	pop	{r4, pc}

0800cae4 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800cae4:	b530      	push	{r4, r5, lr}
 800cae6:	b083      	sub	sp, #12
	/* Loop here */
	uint8_t* error_message = "HardFault Error\r\n";
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800cae8:	4d09      	ldr	r5, [pc, #36]	; (800cb10 <HardFault_Handler+0x2c>)
 800caea:	7828      	ldrb	r0, [r5, #0]
 800caec:	24ff      	movs	r4, #255	; 0xff
 800caee:	9400      	str	r4, [sp, #0]
 800caf0:	23ff      	movs	r3, #255	; 0xff
 800caf2:	2211      	movs	r2, #17
 800caf4:	4907      	ldr	r1, [pc, #28]	; (800cb14 <HardFault_Handler+0x30>)
 800caf6:	f000 fdd3 	bl	800d6a0 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800cafa:	4b07      	ldr	r3, [pc, #28]	; (800cb18 <HardFault_Handler+0x34>)
 800cafc:	6819      	ldr	r1, [r3, #0]
 800cafe:	7828      	ldrb	r0, [r5, #0]
 800cb00:	9400      	str	r4, [sp, #0]
 800cb02:	23ff      	movs	r3, #255	; 0xff
 800cb04:	220f      	movs	r2, #15
 800cb06:	f000 fdcb 	bl	800d6a0 <writePxMutex>
	NVIC_SystemReset();
 800cb0a:	f7ff ffd7 	bl	800cabc <NVIC_SystemReset>
 800cb0e:	46c0      	nop			; (mov r8, r8)
 800cb10:	20000c28 	.word	0x20000c28
 800cb14:	0801a370 	.word	0x0801a370
 800cb18:	200000a0 	.word	0x200000a0

0800cb1c <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800cb1c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800cb1e:	4802      	ldr	r0, [pc, #8]	; (800cb28 <USART1_IRQHandler+0xc>)
 800cb20:	f005 fe1f 	bl	8012762 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cb24:	bd10      	pop	{r4, pc}
 800cb26:	46c0      	nop			; (mov r8, r8)
 800cb28:	20006a58 	.word	0x20006a58

0800cb2c <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800cb2c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800cb2e:	4802      	ldr	r0, [pc, #8]	; (800cb38 <USART2_IRQHandler+0xc>)
 800cb30:	f005 fe17 	bl	8012762 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cb34:	bd10      	pop	{r4, pc}
 800cb36:	46c0      	nop			; (mov r8, r8)
 800cb38:	20006ba8 	.word	0x20006ba8

0800cb3c <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800cb3c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800cb3e:	4806      	ldr	r0, [pc, #24]	; (800cb58 <USART3_8_IRQHandler+0x1c>)
 800cb40:	f005 fe0f 	bl	8012762 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800cb44:	4805      	ldr	r0, [pc, #20]	; (800cb5c <USART3_8_IRQHandler+0x20>)
 800cb46:	f005 fe0c 	bl	8012762 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800cb4a:	4805      	ldr	r0, [pc, #20]	; (800cb60 <USART3_8_IRQHandler+0x24>)
 800cb4c:	f005 fe09 	bl	8012762 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800cb50:	4804      	ldr	r0, [pc, #16]	; (800cb64 <USART3_8_IRQHandler+0x28>)
 800cb52:	f005 fe06 	bl	8012762 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cb56:	bd10      	pop	{r4, pc}
 800cb58:	20006968 	.word	0x20006968
 800cb5c:	20006b38 	.word	0x20006b38
 800cb60:	200069e8 	.word	0x200069e8
 800cb64:	20006ac8 	.word	0x20006ac8

0800cb68 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800cb68:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800cb6a:	2001      	movs	r0, #1
 800cb6c:	f7fa fc62 	bl	8007434 <DMA_IRQHandler>
	
}
 800cb70:	bd10      	pop	{r4, pc}
	...

0800cb74 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800cb74:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800cb76:	4b0c      	ldr	r3, [pc, #48]	; (800cba8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	06db      	lsls	r3, r3, #27
 800cb7c:	d408      	bmi.n	800cb90 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800cb7e:	4b0b      	ldr	r3, [pc, #44]	; (800cbac <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	05db      	lsls	r3, r3, #23
 800cb84:	d408      	bmi.n	800cb98 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800cb86:	4b09      	ldr	r3, [pc, #36]	; (800cbac <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	06db      	lsls	r3, r3, #27
 800cb8c:	d408      	bmi.n	800cba0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800cb8e:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800cb90:	2005      	movs	r0, #5
 800cb92:	f7fa fc4f 	bl	8007434 <DMA_IRQHandler>
 800cb96:	e7fa      	b.n	800cb8e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800cb98:	2002      	movs	r0, #2
 800cb9a:	f7fa fc4b 	bl	8007434 <DMA_IRQHandler>
 800cb9e:	e7f6      	b.n	800cb8e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800cba0:	4803      	ldr	r0, [pc, #12]	; (800cbb0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800cba2:	f003 fb01 	bl	80101a8 <HAL_DMA_IRQHandler>
}
 800cba6:	e7f2      	b.n	800cb8e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800cba8:	40020400 	.word	0x40020400
 800cbac:	40020000 	.word	0x40020000
 800cbb0:	200021a8 	.word	0x200021a8

0800cbb4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800cbb4:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cbb6:	4b14      	ldr	r3, [pc, #80]	; (800cc08 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	03db      	lsls	r3, r3, #15
 800cbbc:	d413      	bmi.n	800cbe6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800cbbe:	4b12      	ldr	r3, [pc, #72]	; (800cc08 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	02db      	lsls	r3, r3, #11
 800cbc4:	d413      	bmi.n	800cbee <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800cbc6:	4b11      	ldr	r3, [pc, #68]	; (800cc0c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	05db      	lsls	r3, r3, #23
 800cbcc:	d413      	bmi.n	800cbf6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800cbce:	4b0e      	ldr	r3, [pc, #56]	; (800cc08 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	04db      	lsls	r3, r3, #19
 800cbd4:	d413      	bmi.n	800cbfe <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800cbd6:	4b0c      	ldr	r3, [pc, #48]	; (800cc08 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	01db      	lsls	r3, r3, #7
 800cbdc:	d506      	bpl.n	800cbec <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800cbde:	480c      	ldr	r0, [pc, #48]	; (800cc10 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800cbe0:	f003 fae2 	bl	80101a8 <HAL_DMA_IRQHandler>
	}
}
 800cbe4:	e002      	b.n	800cbec <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800cbe6:	2003      	movs	r0, #3
 800cbe8:	f7fa fc24 	bl	8007434 <DMA_IRQHandler>
}
 800cbec:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800cbee:	2004      	movs	r0, #4
 800cbf0:	f7fa fc20 	bl	8007434 <DMA_IRQHandler>
 800cbf4:	e7fa      	b.n	800cbec <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800cbf6:	2006      	movs	r0, #6
 800cbf8:	f7fa fc1c 	bl	8007434 <DMA_IRQHandler>
 800cbfc:	e7f6      	b.n	800cbec <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800cbfe:	4805      	ldr	r0, [pc, #20]	; (800cc14 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800cc00:	f003 fad2 	bl	80101a8 <HAL_DMA_IRQHandler>
 800cc04:	e7f2      	b.n	800cbec <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800cc06:	46c0      	nop			; (mov r8, r8)
 800cc08:	40020000 	.word	0x40020000
 800cc0c:	40020400 	.word	0x40020400
 800cc10:	20002218 	.word	0x20002218
 800cc14:	200021e0 	.word	0x200021e0

0800cc18 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc18:	b510      	push	{r4, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800cc22:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d001      	beq.n	800cc2c <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800cc28:	f7fd fd20 	bl	800a66c <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800cc2c:	0020      	movs	r0, r4
 800cc2e:	f7fd fb2b 	bl	800a288 <GetPort>
 800cc32:	0080      	lsls	r0, r0, #2
 800cc34:	4b03      	ldr	r3, [pc, #12]	; (800cc44 <HAL_UART_TxCpltCallback+0x2c>)
 800cc36:	58c0      	ldr	r0, [r0, r3]
 800cc38:	a901      	add	r1, sp, #4
 800cc3a:	f001 fa79 	bl	800e130 <xQueueGiveFromISR>
}
 800cc3e:	b002      	add	sp, #8
 800cc40:	bd10      	pop	{r4, pc}
 800cc42:	46c0      	nop			; (mov r8, r8)
 800cc44:	200068cc 	.word	0x200068cc

0800cc48 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cc48:	b510      	push	{r4, lr}
 800cc4a:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800cc4c:	2369      	movs	r3, #105	; 0x69
 800cc4e:	2201      	movs	r2, #1
 800cc50:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800cc52:	f7fd fb19 	bl	800a288 <GetPort>
	if (portStatus[port] == STREAM) {
 800cc56:	4b0b      	ldr	r3, [pc, #44]	; (800cc84 <HAL_UART_ErrorCallback+0x3c>)
 800cc58:	5c1b      	ldrb	r3, [r3, r0]
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	d004      	beq.n	800cc68 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800cc5e:	3801      	subs	r0, #1
 800cc60:	4b09      	ldr	r3, [pc, #36]	; (800cc88 <HAL_UART_ErrorCallback+0x40>)
 800cc62:	2201      	movs	r2, #1
 800cc64:	541a      	strb	r2, [r3, r0]
	}	
}
 800cc66:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800cc68:	3801      	subs	r0, #1
 800cc6a:	0080      	lsls	r0, r0, #2
 800cc6c:	4b07      	ldr	r3, [pc, #28]	; (800cc8c <HAL_UART_ErrorCallback+0x44>)
 800cc6e:	58c3      	ldr	r3, [r0, r3]
 800cc70:	6819      	ldr	r1, [r3, #0]
 800cc72:	3128      	adds	r1, #40	; 0x28
 800cc74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	685a      	ldr	r2, [r3, #4]
 800cc7a:	b292      	uxth	r2, r2
 800cc7c:	0020      	movs	r0, r4
 800cc7e:	f005 f973 	bl	8011f68 <HAL_UART_Receive_DMA>
 800cc82:	e7f0      	b.n	800cc66 <HAL_UART_ErrorCallback+0x1e>
 800cc84:	20000c2c 	.word	0x20000c2c
 800cc88:	2000188c 	.word	0x2000188c
 800cc8c:	20001850 	.word	0x20001850

0800cc90 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800cc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc92:	46de      	mov	lr, fp
 800cc94:	4657      	mov	r7, sl
 800cc96:	464e      	mov	r6, r9
 800cc98:	4645      	mov	r5, r8
 800cc9a:	b5e0      	push	{r5, r6, r7, lr}
 800cc9c:	0004      	movs	r4, r0
	uint8_t port_number = GetPort(huart);
 800cc9e:	f7fd faf3 	bl	800a288 <GetPort>
	uint8_t port_index = port_number - 1;
 800cca2:	1e43      	subs	r3, r0, #1
 800cca4:	b2db      	uxtb	r3, r3
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800cca6:	4a67      	ldr	r2, [pc, #412]	; (800ce44 <HAL_UART_RxCpltCallback+0x1b4>)
 800cca8:	5cd2      	ldrb	r2, [r2, r3]
 800ccaa:	2a0d      	cmp	r2, #13
 800ccac:	d031      	beq.n	800cd12 <HAL_UART_RxCpltCallback+0x82>

		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
		Activate_CLI_For_First_Time_Flag = 1;

	}
	else if(portStatus[port_number] == CLI)
 800ccae:	4966      	ldr	r1, [pc, #408]	; (800ce48 <HAL_UART_RxCpltCallback+0x1b8>)
 800ccb0:	5c09      	ldrb	r1, [r1, r0]
 800ccb2:	2903      	cmp	r1, #3
 800ccb4:	d051      	beq.n	800cd5a <HAL_UART_RxCpltCallback+0xca>
	{
		Read_In_CLI_Task_Flag = 1;
	}

	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800ccb6:	2a48      	cmp	r2, #72	; 0x48
 800ccb8:	d062      	beq.n	800cd80 <HAL_UART_RxCpltCallback+0xf0>
	{
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
	}

	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800ccba:	2a5a      	cmp	r2, #90	; 0x5a
 800ccbc:	d066      	beq.n	800cd8c <HAL_UART_RxCpltCallback+0xfc>
	{
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
	}

	else if(Rx_Data[port_index] != 'Z' && portStatus[port_number] == H_Status)
 800ccbe:	2a5a      	cmp	r2, #90	; 0x5a
 800ccc0:	d001      	beq.n	800ccc6 <HAL_UART_RxCpltCallback+0x36>
 800ccc2:	2907      	cmp	r1, #7
 800ccc4:	d068      	beq.n	800cd98 <HAL_UART_RxCpltCallback+0x108>
	{
		portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
	}

	else if(portStatus[port_number] == Z_Status)
 800ccc6:	2908      	cmp	r1, #8
 800ccc8:	d06a      	beq.n	800cda0 <HAL_UART_RxCpltCallback+0x110>
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
		temp_index[port_index] = 3;
		temp_length[port_index] = Rx_Data[port_index] + 1;
	}

	else if(portStatus[port_number] == MSG)
 800ccca:	2901      	cmp	r1, #1
 800cccc:	d148      	bne.n	800cd60 <HAL_UART_RxCpltCallback+0xd0>
	{
		if(temp_length[port_index] > 1)
 800ccce:	495f      	ldr	r1, [pc, #380]	; (800ce4c <HAL_UART_RxCpltCallback+0x1bc>)
 800ccd0:	18c9      	adds	r1, r1, r3
 800ccd2:	7a09      	ldrb	r1, [r1, #8]
 800ccd4:	468b      	mov	fp, r1
 800ccd6:	2901      	cmp	r1, #1
 800ccd8:	d800      	bhi.n	800ccdc <HAL_UART_RxCpltCallback+0x4c>
 800ccda:	e079      	b.n	800cdd0 <HAL_UART_RxCpltCallback+0x140>
		{
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800ccdc:	485c      	ldr	r0, [pc, #368]	; (800ce50 <HAL_UART_RxCpltCallback+0x1c0>)
 800ccde:	5cc6      	ldrb	r6, [r0, r3]
 800cce0:	485a      	ldr	r0, [pc, #360]	; (800ce4c <HAL_UART_RxCpltCallback+0x1bc>)
 800cce2:	5cc5      	ldrb	r5, [r0, r3]
 800cce4:	00f7      	lsls	r7, r6, #3
 800cce6:	1bbf      	subs	r7, r7, r6
 800cce8:	00fe      	lsls	r6, r7, #3
 800ccea:	009f      	lsls	r7, r3, #2
 800ccec:	46bc      	mov	ip, r7
 800ccee:	449c      	add	ip, r3
 800ccf0:	4667      	mov	r7, ip
 800ccf2:	00ff      	lsls	r7, r7, #3
 800ccf4:	4661      	mov	r1, ip
 800ccf6:	1a7f      	subs	r7, r7, r1
 800ccf8:	00f9      	lsls	r1, r7, #3
 800ccfa:	468c      	mov	ip, r1
 800ccfc:	4466      	add	r6, ip
 800ccfe:	4f55      	ldr	r7, [pc, #340]	; (800ce54 <HAL_UART_RxCpltCallback+0x1c4>)
 800cd00:	19be      	adds	r6, r7, r6
 800cd02:	5572      	strb	r2, [r6, r5]
			temp_index[port_index]++;
 800cd04:	3501      	adds	r5, #1
 800cd06:	54c5      	strb	r5, [r0, r3]
			temp_length[port_index]--;
 800cd08:	18c3      	adds	r3, r0, r3
 800cd0a:	4659      	mov	r1, fp
 800cd0c:	3901      	subs	r1, #1
 800cd0e:	7219      	strb	r1, [r3, #8]
 800cd10:	e026      	b.n	800cd60 <HAL_UART_RxCpltCallback+0xd0>
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800cd12:	494d      	ldr	r1, [pc, #308]	; (800ce48 <HAL_UART_RxCpltCallback+0x1b8>)
 800cd14:	5c09      	ldrb	r1, [r1, r0]
 800cd16:	2900      	cmp	r1, #0
 800cd18:	d1c9      	bne.n	800ccae <HAL_UART_RxCpltCallback+0x1e>
		for(int i=0;i<=NumOfPorts;i++) portStatus[i] = FREE; // Free all ports
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	e003      	b.n	800cd26 <HAL_UART_RxCpltCallback+0x96>
 800cd1e:	4a4a      	ldr	r2, [pc, #296]	; (800ce48 <HAL_UART_RxCpltCallback+0x1b8>)
 800cd20:	2100      	movs	r1, #0
 800cd22:	54d1      	strb	r1, [r2, r3]
 800cd24:	3301      	adds	r3, #1
 800cd26:	2b05      	cmp	r3, #5
 800cd28:	ddf9      	ble.n	800cd1e <HAL_UART_RxCpltCallback+0x8e>
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800cd2a:	4b47      	ldr	r3, [pc, #284]	; (800ce48 <HAL_UART_RxCpltCallback+0x1b8>)
 800cd2c:	2203      	movs	r2, #3
 800cd2e:	541a      	strb	r2, [r3, r0]
		PcPort = port_number;
 800cd30:	4b49      	ldr	r3, [pc, #292]	; (800ce58 <HAL_UART_RxCpltCallback+0x1c8>)
 800cd32:	7018      	strb	r0, [r3, #0]
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800cd34:	4b49      	ldr	r3, [pc, #292]	; (800ce5c <HAL_UART_RxCpltCallback+0x1cc>)
 800cd36:	6818      	ldr	r0, [r3, #0]
 800cd38:	2300      	movs	r3, #0
 800cd3a:	3a01      	subs	r2, #1
 800cd3c:	2100      	movs	r1, #0
 800cd3e:	f002 f959 	bl	800eff4 <xTaskGenericNotify>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800cd42:	4b47      	ldr	r3, [pc, #284]	; (800ce60 <HAL_UART_RxCpltCallback+0x1d0>)
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d003      	beq.n	800cd52 <HAL_UART_RxCpltCallback+0xc2>
		Activate_CLI_For_First_Time_Flag = 1;
 800cd4a:	4b45      	ldr	r3, [pc, #276]	; (800ce60 <HAL_UART_RxCpltCallback+0x1d0>)
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	701a      	strb	r2, [r3, #0]
 800cd50:	e006      	b.n	800cd60 <HAL_UART_RxCpltCallback+0xd0>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800cd52:	4b44      	ldr	r3, [pc, #272]	; (800ce64 <HAL_UART_RxCpltCallback+0x1d4>)
 800cd54:	2201      	movs	r2, #1
 800cd56:	701a      	strb	r2, [r3, #0]
 800cd58:	e7f7      	b.n	800cd4a <HAL_UART_RxCpltCallback+0xba>
		Read_In_CLI_Task_Flag = 1;
 800cd5a:	4b42      	ldr	r3, [pc, #264]	; (800ce64 <HAL_UART_RxCpltCallback+0x1d4>)
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	701a      	strb	r2, [r3, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
			portStatus[port_number] =FREE; // End of receiving message.
		}
	}

		HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800cd60:	0020      	movs	r0, r4
 800cd62:	f7fd fa91 	bl	800a288 <GetPort>
 800cd66:	1e41      	subs	r1, r0, #1
 800cd68:	4836      	ldr	r0, [pc, #216]	; (800ce44 <HAL_UART_RxCpltCallback+0x1b4>)
 800cd6a:	1809      	adds	r1, r1, r0
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	0020      	movs	r0, r4
 800cd70:	f005 f8fa 	bl	8011f68 <HAL_UART_Receive_DMA>
}
 800cd74:	bc3c      	pop	{r2, r3, r4, r5}
 800cd76:	4690      	mov	r8, r2
 800cd78:	4699      	mov	r9, r3
 800cd7a:	46a2      	mov	sl, r4
 800cd7c:	46ab      	mov	fp, r5
 800cd7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800cd80:	2900      	cmp	r1, #0
 800cd82:	d19a      	bne.n	800ccba <HAL_UART_RxCpltCallback+0x2a>
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 800cd84:	4b30      	ldr	r3, [pc, #192]	; (800ce48 <HAL_UART_RxCpltCallback+0x1b8>)
 800cd86:	3a41      	subs	r2, #65	; 0x41
 800cd88:	541a      	strb	r2, [r3, r0]
 800cd8a:	e7e9      	b.n	800cd60 <HAL_UART_RxCpltCallback+0xd0>
	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800cd8c:	2907      	cmp	r1, #7
 800cd8e:	d196      	bne.n	800ccbe <HAL_UART_RxCpltCallback+0x2e>
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 800cd90:	4b2d      	ldr	r3, [pc, #180]	; (800ce48 <HAL_UART_RxCpltCallback+0x1b8>)
 800cd92:	3a52      	subs	r2, #82	; 0x52
 800cd94:	541a      	strb	r2, [r3, r0]
 800cd96:	e7e3      	b.n	800cd60 <HAL_UART_RxCpltCallback+0xd0>
		portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
 800cd98:	4b2b      	ldr	r3, [pc, #172]	; (800ce48 <HAL_UART_RxCpltCallback+0x1b8>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	541a      	strb	r2, [r3, r0]
 800cd9e:	e7df      	b.n	800cd60 <HAL_UART_RxCpltCallback+0xd0>
		portStatus[port_number] =MSG; // Receive length byte.
 800cda0:	4929      	ldr	r1, [pc, #164]	; (800ce48 <HAL_UART_RxCpltCallback+0x1b8>)
 800cda2:	2501      	movs	r5, #1
 800cda4:	540d      	strb	r5, [r1, r0]
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800cda6:	492a      	ldr	r1, [pc, #168]	; (800ce50 <HAL_UART_RxCpltCallback+0x1c0>)
 800cda8:	5cc9      	ldrb	r1, [r1, r3]
 800cdaa:	00c8      	lsls	r0, r1, #3
 800cdac:	1a40      	subs	r0, r0, r1
 800cdae:	00c1      	lsls	r1, r0, #3
 800cdb0:	009d      	lsls	r5, r3, #2
 800cdb2:	18ed      	adds	r5, r5, r3
 800cdb4:	00e8      	lsls	r0, r5, #3
 800cdb6:	1b40      	subs	r0, r0, r5
 800cdb8:	00c5      	lsls	r5, r0, #3
 800cdba:	1949      	adds	r1, r1, r5
 800cdbc:	4825      	ldr	r0, [pc, #148]	; (800ce54 <HAL_UART_RxCpltCallback+0x1c4>)
 800cdbe:	1841      	adds	r1, r0, r1
 800cdc0:	708a      	strb	r2, [r1, #2]
		temp_index[port_index] = 3;
 800cdc2:	4922      	ldr	r1, [pc, #136]	; (800ce4c <HAL_UART_RxCpltCallback+0x1bc>)
 800cdc4:	2003      	movs	r0, #3
 800cdc6:	54c8      	strb	r0, [r1, r3]
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800cdc8:	3201      	adds	r2, #1
 800cdca:	18cb      	adds	r3, r1, r3
 800cdcc:	721a      	strb	r2, [r3, #8]
 800cdce:	e7c7      	b.n	800cd60 <HAL_UART_RxCpltCallback+0xd0>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800cdd0:	491f      	ldr	r1, [pc, #124]	; (800ce50 <HAL_UART_RxCpltCallback+0x1c0>)
 800cdd2:	468c      	mov	ip, r1
 800cdd4:	5ccd      	ldrb	r5, [r1, r3]
 800cdd6:	491d      	ldr	r1, [pc, #116]	; (800ce4c <HAL_UART_RxCpltCallback+0x1bc>)
 800cdd8:	5ccf      	ldrb	r7, [r1, r3]
 800cdda:	00e9      	lsls	r1, r5, #3
 800cddc:	1b49      	subs	r1, r1, r5
 800cdde:	00c9      	lsls	r1, r1, #3
 800cde0:	4688      	mov	r8, r1
 800cde2:	0099      	lsls	r1, r3, #2
 800cde4:	468a      	mov	sl, r1
 800cde6:	449a      	add	sl, r3
 800cde8:	4651      	mov	r1, sl
 800cdea:	00c9      	lsls	r1, r1, #3
 800cdec:	4656      	mov	r6, sl
 800cdee:	1b89      	subs	r1, r1, r6
 800cdf0:	00c9      	lsls	r1, r1, #3
 800cdf2:	468a      	mov	sl, r1
 800cdf4:	44d0      	add	r8, sl
 800cdf6:	4917      	ldr	r1, [pc, #92]	; (800ce54 <HAL_UART_RxCpltCallback+0x1c4>)
 800cdf8:	4689      	mov	r9, r1
 800cdfa:	44c8      	add	r8, r9
 800cdfc:	4641      	mov	r1, r8
 800cdfe:	55ca      	strb	r2, [r1, r7]
			temp_index[port_index]++;
 800ce00:	3701      	adds	r7, #1
 800ce02:	4a12      	ldr	r2, [pc, #72]	; (800ce4c <HAL_UART_RxCpltCallback+0x1bc>)
 800ce04:	54d7      	strb	r7, [r2, r3]
			temp_length[port_index]--;
 800ce06:	18d6      	adds	r6, r2, r3
 800ce08:	4659      	mov	r1, fp
 800ce0a:	3901      	subs	r1, #1
 800ce0c:	7231      	strb	r1, [r6, #8]
			MSG_Buffer_Index_End[port_index]++;
 800ce0e:	3501      	adds	r5, #1
 800ce10:	b2ed      	uxtb	r5, r5
 800ce12:	4662      	mov	r2, ip
 800ce14:	54d5      	strb	r5, [r2, r3]
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800ce16:	2d05      	cmp	r5, #5
 800ce18:	d00c      	beq.n	800ce34 <HAL_UART_RxCpltCallback+0x1a4>
			Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 800ce1a:	4a13      	ldr	r2, [pc, #76]	; (800ce68 <HAL_UART_RxCpltCallback+0x1d8>)
 800ce1c:	7813      	ldrb	r3, [r2, #0]
 800ce1e:	4913      	ldr	r1, [pc, #76]	; (800ce6c <HAL_UART_RxCpltCallback+0x1dc>)
 800ce20:	54c8      	strb	r0, [r1, r3]
			Process_Message_Buffer_Index_End++;
 800ce22:	3301      	adds	r3, #1
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	7013      	strb	r3, [r2, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800ce28:	2b05      	cmp	r3, #5
 800ce2a:	d006      	beq.n	800ce3a <HAL_UART_RxCpltCallback+0x1aa>
			portStatus[port_number] =FREE; // End of receiving message.
 800ce2c:	4b06      	ldr	r3, [pc, #24]	; (800ce48 <HAL_UART_RxCpltCallback+0x1b8>)
 800ce2e:	2200      	movs	r2, #0
 800ce30:	541a      	strb	r2, [r3, r0]
 800ce32:	e795      	b.n	800cd60 <HAL_UART_RxCpltCallback+0xd0>
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800ce34:	2100      	movs	r1, #0
 800ce36:	54d1      	strb	r1, [r2, r3]
 800ce38:	e7ef      	b.n	800ce1a <HAL_UART_RxCpltCallback+0x18a>
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800ce3a:	0013      	movs	r3, r2
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	701a      	strb	r2, [r3, #0]
 800ce40:	e7f4      	b.n	800ce2c <HAL_UART_RxCpltCallback+0x19c>
 800ce42:	46c0      	nop			; (mov r8, r8)
 800ce44:	20001c94 	.word	0x20001c94
 800ce48:	20000c2c 	.word	0x20000c2c
 800ce4c:	20002444 	.word	0x20002444
 800ce50:	200016c4 	.word	0x200016c4
 800ce54:	2000114c 	.word	0x2000114c
 800ce58:	20000c28 	.word	0x20000c28
 800ce5c:	20001ca8 	.word	0x20001ca8
 800ce60:	200016d2 	.word	0x200016d2
 800ce64:	200016d1 	.word	0x200016d1
 800ce68:	2000113f 	.word	0x2000113f
 800ce6c:	20001144 	.word	0x20001144

0800ce70 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

/* Run time stack overflow checking is performed if
 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 function is called if a stack overflow is detected. */
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800ce70:	b530      	push	{r4, r5, lr}
 800ce72:	b083      	sub	sp, #12
	(void )pcTaskName;
	(void )pxTask;
	uint8_t* error_message = "Stack Overflow\r\n";
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800ce74:	4d09      	ldr	r5, [pc, #36]	; (800ce9c <vApplicationStackOverflowHook+0x2c>)
 800ce76:	7828      	ldrb	r0, [r5, #0]
 800ce78:	24ff      	movs	r4, #255	; 0xff
 800ce7a:	9400      	str	r4, [sp, #0]
 800ce7c:	23ff      	movs	r3, #255	; 0xff
 800ce7e:	2210      	movs	r2, #16
 800ce80:	4907      	ldr	r1, [pc, #28]	; (800cea0 <vApplicationStackOverflowHook+0x30>)
 800ce82:	f000 fc0d 	bl	800d6a0 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800ce86:	4b07      	ldr	r3, [pc, #28]	; (800cea4 <vApplicationStackOverflowHook+0x34>)
 800ce88:	6819      	ldr	r1, [r3, #0]
 800ce8a:	7828      	ldrb	r0, [r5, #0]
 800ce8c:	9400      	str	r4, [sp, #0]
 800ce8e:	23ff      	movs	r3, #255	; 0xff
 800ce90:	220f      	movs	r2, #15
 800ce92:	f000 fc05 	bl	800d6a0 <writePxMutex>
	NVIC_SystemReset();
 800ce96:	f7ff fe11 	bl	800cabc <NVIC_SystemReset>
 800ce9a:	46c0      	nop			; (mov r8, r8)
 800ce9c:	20000c28 	.word	0x20000c28
 800cea0:	0801a384 	.word	0x0801a384
 800cea4:	200000a0 	.word	0x200000a0

0800cea8 <vApplicationMallocFailedHook>:
 demo application.  If heap_1.c or heap_2.c are used, then the size of the
 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
 to query the size of free heap space that remains (although it does not
 provide information on how the remaining heap might be fragmented). */
void vApplicationMallocFailedHook(void){
 800cea8:	b530      	push	{r4, r5, lr}
 800ceaa:	b083      	sub	sp, #12
	uint8_t* error_message = "Heap size exceeded\r\n";
	writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800ceac:	4d09      	ldr	r5, [pc, #36]	; (800ced4 <vApplicationMallocFailedHook+0x2c>)
 800ceae:	7828      	ldrb	r0, [r5, #0]
 800ceb0:	24ff      	movs	r4, #255	; 0xff
 800ceb2:	9400      	str	r4, [sp, #0]
 800ceb4:	23ff      	movs	r3, #255	; 0xff
 800ceb6:	2214      	movs	r2, #20
 800ceb8:	4907      	ldr	r1, [pc, #28]	; (800ced8 <vApplicationMallocFailedHook+0x30>)
 800ceba:	f000 fbf1 	bl	800d6a0 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800cebe:	4b07      	ldr	r3, [pc, #28]	; (800cedc <vApplicationMallocFailedHook+0x34>)
 800cec0:	6819      	ldr	r1, [r3, #0]
 800cec2:	7828      	ldrb	r0, [r5, #0]
 800cec4:	9400      	str	r4, [sp, #0]
 800cec6:	23ff      	movs	r3, #255	; 0xff
 800cec8:	220f      	movs	r2, #15
 800ceca:	f000 fbe9 	bl	800d6a0 <writePxMutex>
	NVIC_SystemReset();
 800cece:	f7ff fdf5 	bl	800cabc <NVIC_SystemReset>
 800ced2:	46c0      	nop			; (mov r8, r8)
 800ced4:	20000c28 	.word	0x20000c28
 800ced8:	0801a398 	.word	0x0801a398
 800cedc:	200000a0 	.word	0x200000a0

0800cee0 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800cee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cee2:	46d6      	mov	lr, sl
 800cee4:	464f      	mov	r7, r9
 800cee6:	4646      	mov	r6, r8
 800cee8:	b5c0      	push	{r6, r7, lr}
 800ceea:	b08c      	sub	sp, #48	; 0x30
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800ceec:	ac03      	add	r4, sp, #12
 800ceee:	4b37      	ldr	r3, [pc, #220]	; (800cfcc <RTC_CalendarConfig+0xec>)
 800cef0:	0022      	movs	r2, r4
 800cef2:	cb43      	ldmia	r3!, {r0, r1, r6}
 800cef4:	c243      	stmia	r2!, {r0, r1, r6}
 800cef6:	466b      	mov	r3, sp
 800cef8:	4a35      	ldr	r2, [pc, #212]	; (800cfd0 <RTC_CalendarConfig+0xf0>)
 800cefa:	ca03      	ldmia	r2!, {r0, r1}
 800cefc:	c303      	stmia	r3!, {r0, r1}
 800cefe:	0019      	movs	r1, r3
 800cf00:	7813      	ldrb	r3, [r2, #0]
 800cf02:	700b      	strb	r3, [r1, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800cf04:	2015      	movs	r0, #21
 800cf06:	4468      	add	r0, sp
 800cf08:	f005 fcbd 	bl	8012886 <atoi>
 800cf0c:	b2c7      	uxtb	r7, r0
  *(comDate + 6) = 0;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	4698      	mov	r8, r3
 800cf12:	71a3      	strb	r3, [r4, #6]
  day = atoi(comDate + 4);
 800cf14:	a804      	add	r0, sp, #16
 800cf16:	f005 fcb6 	bl	8012886 <atoi>
 800cf1a:	b2c6      	uxtb	r6, r0
  *(comDate + 3) = 0;
 800cf1c:	4643      	mov	r3, r8
 800cf1e:	70e3      	strb	r3, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800cf20:	2400      	movs	r4, #0
 800cf22:	e001      	b.n	800cf28 <RTC_CalendarConfig+0x48>
 800cf24:	3401      	adds	r4, #1
 800cf26:	b2e4      	uxtb	r4, r4
 800cf28:	2c0b      	cmp	r4, #11
 800cf2a:	d80a      	bhi.n	800cf42 <RTC_CalendarConfig+0x62>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800cf2c:	00a3      	lsls	r3, r4, #2
 800cf2e:	4a29      	ldr	r2, [pc, #164]	; (800cfd4 <RTC_CalendarConfig+0xf4>)
 800cf30:	5899      	ldr	r1, [r3, r2]
 800cf32:	a803      	add	r0, sp, #12
 800cf34:	f7f3 f8e6 	bl	8000104 <strcmp>
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	d1f3      	bne.n	800cf24 <RTC_CalendarConfig+0x44>
			month = i + 1;
 800cf3c:	1c65      	adds	r5, r4, #1
 800cf3e:	b2ed      	uxtb	r5, r5
 800cf40:	e7f0      	b.n	800cf24 <RTC_CalendarConfig+0x44>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800cf42:	466b      	mov	r3, sp
 800cf44:	1d98      	adds	r0, r3, #6
 800cf46:	f005 fc9e 	bl	8012886 <atoi>
 800cf4a:	b2c3      	uxtb	r3, r0
 800cf4c:	4698      	mov	r8, r3
	*(comDate + 5) = 0;
 800cf4e:	ac03      	add	r4, sp, #12
 800cf50:	2300      	movs	r3, #0
 800cf52:	469a      	mov	sl, r3
 800cf54:	7163      	strb	r3, [r4, #5]
	minutes = atoi(comTime + 3);
 800cf56:	466b      	mov	r3, sp
 800cf58:	1cd8      	adds	r0, r3, #3
 800cf5a:	f005 fc94 	bl	8012886 <atoi>
 800cf5e:	b2c3      	uxtb	r3, r0
 800cf60:	4699      	mov	r9, r3
	*(comDate + 2) = 0;
 800cf62:	4653      	mov	r3, sl
 800cf64:	70a3      	strb	r3, [r4, #2]
	hours = atoi(comTime);
 800cf66:	4668      	mov	r0, sp
 800cf68:	f005 fc8d 	bl	8012886 <atoi>
 800cf6c:	b2c4      	uxtb	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800cf6e:	a90b      	add	r1, sp, #44	; 0x2c
 800cf70:	70cf      	strb	r7, [r1, #3]
  sdatestructure.Month = month;
 800cf72:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800cf74:	708e      	strb	r6, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800cf76:	2301      	movs	r3, #1
 800cf78:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	4816      	ldr	r0, [pc, #88]	; (800cfd8 <RTC_CalendarConfig+0xf8>)
 800cf7e:	f004 fdbd 	bl	8011afc <HAL_RTC_SetDate>
 800cf82:	2800      	cmp	r0, #0
 800cf84:	d119      	bne.n	800cfba <RTC_CalendarConfig+0xda>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800cf86:	a906      	add	r1, sp, #24
 800cf88:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800cf8a:	464b      	mov	r3, r9
 800cf8c:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800cf8e:	4643      	mov	r3, r8
 800cf90:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800cf92:	2300      	movs	r3, #0
 800cf94:	720b      	strb	r3, [r1, #8]
 800cf96:	4a11      	ldr	r2, [pc, #68]	; (800cfdc <RTC_CalendarConfig+0xfc>)
 800cf98:	3018      	adds	r0, #24
 800cf9a:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cf9c:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800cf9e:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	480d      	ldr	r0, [pc, #52]	; (800cfd8 <RTC_CalendarConfig+0xf8>)
 800cfa4:	f004 fd2c 	bl	8011a00 <HAL_RTC_SetTime>
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	d10d      	bne.n	800cfc8 <RTC_CalendarConfig+0xe8>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800cfac:	4a0c      	ldr	r2, [pc, #48]	; (800cfe0 <RTC_CalendarConfig+0x100>)
 800cfae:	2101      	movs	r1, #1
 800cfb0:	4809      	ldr	r0, [pc, #36]	; (800cfd8 <RTC_CalendarConfig+0xf8>)
 800cfb2:	f004 fe65 	bl	8011c80 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800cfb6:	2000      	movs	r0, #0
 800cfb8:	e000      	b.n	800cfbc <RTC_CalendarConfig+0xdc>
		return BOS_ERROR;
 800cfba:	20ff      	movs	r0, #255	; 0xff
}
 800cfbc:	b00c      	add	sp, #48	; 0x30
 800cfbe:	bc1c      	pop	{r2, r3, r4}
 800cfc0:	4690      	mov	r8, r2
 800cfc2:	4699      	mov	r9, r3
 800cfc4:	46a2      	mov	sl, r4
 800cfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800cfc8:	20ff      	movs	r0, #255	; 0xff
 800cfca:	e7f7      	b.n	800cfbc <RTC_CalendarConfig+0xdc>
 800cfcc:	08017e08 	.word	0x08017e08
 800cfd0:	0801a3c0 	.word	0x0801a3c0
 800cfd4:	20000064 	.word	0x20000064
 800cfd8:	20006c88 	.word	0x20006c88
 800cfdc:	20006848 	.word	0x20006848
 800cfe0:	000032f2 	.word	0x000032f2

0800cfe4 <RTC_Init>:
{
 800cfe4:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800cfe6:	4a1c      	ldr	r2, [pc, #112]	; (800d058 <RTC_Init+0x74>)
 800cfe8:	6a11      	ldr	r1, [r2, #32]
 800cfea:	2380      	movs	r3, #128	; 0x80
 800cfec:	021b      	lsls	r3, r3, #8
 800cfee:	430b      	orrs	r3, r1
 800cff0:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800cff2:	481a      	ldr	r0, [pc, #104]	; (800d05c <RTC_Init+0x78>)
 800cff4:	4b1a      	ldr	r3, [pc, #104]	; (800d060 <RTC_Init+0x7c>)
 800cff6:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800cff8:	2300      	movs	r3, #0
 800cffa:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800cffc:	227c      	movs	r2, #124	; 0x7c
 800cffe:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800d000:	4a18      	ldr	r2, [pc, #96]	; (800d064 <RTC_Init+0x80>)
 800d002:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d004:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d006:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d008:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d00a:	f004 fc9d 	bl	8011948 <HAL_RTC_Init>
 800d00e:	2800      	cmp	r0, #0
 800d010:	d11f      	bne.n	800d052 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800d012:	2101      	movs	r1, #1
 800d014:	4811      	ldr	r0, [pc, #68]	; (800d05c <RTC_Init+0x78>)
 800d016:	f004 fe39 	bl	8011c8c <HAL_RTCEx_BKUPRead>
 800d01a:	4b13      	ldr	r3, [pc, #76]	; (800d068 <RTC_Init+0x84>)
 800d01c:	4298      	cmp	r0, r3
 800d01e:	d10e      	bne.n	800d03e <RTC_Init+0x5a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800d020:	4b0d      	ldr	r3, [pc, #52]	; (800d058 <RTC_Init+0x74>)
 800d022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d024:	011b      	lsls	r3, r3, #4
 800d026:	d502      	bpl.n	800d02e <RTC_Init+0x4a>
			bootStatus = POWER_ON_BOOT;
 800d028:	4b10      	ldr	r3, [pc, #64]	; (800d06c <RTC_Init+0x88>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800d02e:	4b0a      	ldr	r3, [pc, #40]	; (800d058 <RTC_Init+0x74>)
 800d030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d032:	015b      	lsls	r3, r3, #5
 800d034:	d505      	bpl.n	800d042 <RTC_Init+0x5e>
			bootStatus = RESET_BOOT;
 800d036:	4b0d      	ldr	r3, [pc, #52]	; (800d06c <RTC_Init+0x88>)
 800d038:	2201      	movs	r2, #1
 800d03a:	701a      	strb	r2, [r3, #0]
 800d03c:	e001      	b.n	800d042 <RTC_Init+0x5e>
    RTC_CalendarConfig();
 800d03e:	f7ff ff4f 	bl	800cee0 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d042:	4a05      	ldr	r2, [pc, #20]	; (800d058 <RTC_Init+0x74>)
 800d044:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d046:	2380      	movs	r3, #128	; 0x80
 800d048:	045b      	lsls	r3, r3, #17
 800d04a:	430b      	orrs	r3, r1
 800d04c:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800d04e:	2000      	movs	r0, #0
}
 800d050:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d052:	20ff      	movs	r0, #255	; 0xff
 800d054:	e7fc      	b.n	800d050 <RTC_Init+0x6c>
 800d056:	46c0      	nop			; (mov r8, r8)
 800d058:	40021000 	.word	0x40021000
 800d05c:	20006c88 	.word	0x20006c88
 800d060:	40002800 	.word	0x40002800
 800d064:	000007cf 	.word	0x000007cf
 800d068:	000032f2 	.word	0x000032f2
 800d06c:	20002451 	.word	0x20002451

0800d070 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800d070:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d072:	46c6      	mov	lr, r8
 800d074:	b500      	push	{lr}
 800d076:	b086      	sub	sp, #24
 800d078:	ac0c      	add	r4, sp, #48	; 0x30
 800d07a:	7827      	ldrb	r7, [r4, #0]
 800d07c:	ac0d      	add	r4, sp, #52	; 0x34
 800d07e:	7824      	ldrb	r4, [r4, #0]
 800d080:	46a0      	mov	r8, r4
 800d082:	ac0e      	add	r4, sp, #56	; 0x38
 800d084:	7825      	ldrb	r5, [r4, #0]
 800d086:	ac0f      	add	r4, sp, #60	; 0x3c
 800d088:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800d08a:	3230      	adds	r2, #48	; 0x30
 800d08c:	ac05      	add	r4, sp, #20
 800d08e:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800d090:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800d092:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800d094:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d096:	2200      	movs	r2, #0
 800d098:	0021      	movs	r1, r4
 800d09a:	481f      	ldr	r0, [pc, #124]	; (800d118 <BOS_CalendarConfig+0xa8>)
 800d09c:	f004 fd2e 	bl	8011afc <HAL_RTC_SetDate>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	d134      	bne.n	800d10e <BOS_CalendarConfig+0x9e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d0a4:	466b      	mov	r3, sp
 800d0a6:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800d0a8:	4642      	mov	r2, r8
 800d0aa:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800d0ac:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800d0b2:	2e01      	cmp	r6, #1
 800d0b4:	d01e      	beq.n	800d0f4 <BOS_CalendarConfig+0x84>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800d0b6:	2e02      	cmp	r6, #2
 800d0b8:	d022      	beq.n	800d100 <BOS_CalendarConfig+0x90>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800d0ba:	4b18      	ldr	r3, [pc, #96]	; (800d11c <BOS_CalendarConfig+0xac>)
 800d0bc:	2218      	movs	r2, #24
 800d0be:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	4669      	mov	r1, sp
 800d0c4:	4814      	ldr	r0, [pc, #80]	; (800d118 <BOS_CalendarConfig+0xa8>)
 800d0c6:	f004 fc9b 	bl	8011a00 <HAL_RTC_SetTime>
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	d121      	bne.n	800d112 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800d0ce:	4a13      	ldr	r2, [pc, #76]	; (800d11c <BOS_CalendarConfig+0xac>)
 800d0d0:	7b53      	ldrb	r3, [r2, #13]
 800d0d2:	021b      	lsls	r3, r3, #8
 800d0d4:	7911      	ldrb	r1, [r2, #4]
 800d0d6:	4319      	orrs	r1, r3
 800d0d8:	308d      	adds	r0, #141	; 0x8d
 800d0da:	0040      	lsls	r0, r0, #1
 800d0dc:	f7fe f956 	bl	800b38c <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d0e0:	4a0f      	ldr	r2, [pc, #60]	; (800d120 <BOS_CalendarConfig+0xb0>)
 800d0e2:	2101      	movs	r1, #1
 800d0e4:	480c      	ldr	r0, [pc, #48]	; (800d118 <BOS_CalendarConfig+0xa8>)
 800d0e6:	f004 fdcb 	bl	8011c80 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d0ea:	2000      	movs	r0, #0
}
 800d0ec:	b006      	add	sp, #24
 800d0ee:	bc04      	pop	{r2}
 800d0f0:	4690      	mov	r8, r2
 800d0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d0f4:	466a      	mov	r2, sp
 800d0f6:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d0f8:	4b08      	ldr	r3, [pc, #32]	; (800d11c <BOS_CalendarConfig+0xac>)
 800d0fa:	220c      	movs	r2, #12
 800d0fc:	735a      	strb	r2, [r3, #13]
 800d0fe:	e7df      	b.n	800d0c0 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800d100:	2340      	movs	r3, #64	; 0x40
 800d102:	466a      	mov	r2, sp
 800d104:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d106:	4b05      	ldr	r3, [pc, #20]	; (800d11c <BOS_CalendarConfig+0xac>)
 800d108:	220c      	movs	r2, #12
 800d10a:	735a      	strb	r2, [r3, #13]
 800d10c:	e7d8      	b.n	800d0c0 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800d10e:	20ff      	movs	r0, #255	; 0xff
 800d110:	e7ec      	b.n	800d0ec <BOS_CalendarConfig+0x7c>
		return BOS_ERROR;
 800d112:	20ff      	movs	r0, #255	; 0xff
 800d114:	e7ea      	b.n	800d0ec <BOS_CalendarConfig+0x7c>
 800d116:	46c0      	nop			; (mov r8, r8)
 800d118:	20006c88 	.word	0x20006c88
 800d11c:	20006848 	.word	0x20006848
 800d120:	000032f2 	.word	0x000032f2

0800d124 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800d124:	b530      	push	{r4, r5, lr}
 800d126:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d128:	4d16      	ldr	r5, [pc, #88]	; (800d184 <GetTimeDate+0x60>)
 800d12a:	2200      	movs	r2, #0
 800d12c:	a902      	add	r1, sp, #8
 800d12e:	0028      	movs	r0, r5
 800d130:	f004 fd5a 	bl	8011be8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d134:	ac07      	add	r4, sp, #28
 800d136:	2200      	movs	r2, #0
 800d138:	0021      	movs	r1, r4
 800d13a:	0028      	movs	r0, r5
 800d13c:	f004 fd7c 	bl	8011c38 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800d140:	ab02      	add	r3, sp, #8
 800d142:	7a1a      	ldrb	r2, [r3, #8]
 800d144:	09d2      	lsrs	r2, r2, #7
 800d146:	3201      	adds	r2, #1
 800d148:	4b0f      	ldr	r3, [pc, #60]	; (800d188 <GetTimeDate+0x64>)
 800d14a:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d14c:	9a03      	ldr	r2, [sp, #12]
 800d14e:	9201      	str	r2, [sp, #4]
 800d150:	0852      	lsrs	r2, r2, #1
 800d152:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800d154:	aa02      	add	r2, sp, #8
 800d156:	7892      	ldrb	r2, [r2, #2]
 800d158:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800d15a:	aa02      	add	r2, sp, #8
 800d15c:	7852      	ldrb	r2, [r2, #1]
 800d15e:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800d160:	aa02      	add	r2, sp, #8
 800d162:	7812      	ldrb	r2, [r2, #0]
 800d164:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800d166:	78a2      	ldrb	r2, [r4, #2]
 800d168:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800d16a:	7862      	ldrb	r2, [r4, #1]
 800d16c:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800d16e:	7822      	ldrb	r2, [r4, #0]
 800d170:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d172:	78e2      	ldrb	r2, [r4, #3]
 800d174:	21fa      	movs	r1, #250	; 0xfa
 800d176:	00c9      	lsls	r1, r1, #3
 800d178:	468c      	mov	ip, r1
 800d17a:	4462      	add	r2, ip
 800d17c:	831a      	strh	r2, [r3, #24]
}
 800d17e:	b009      	add	sp, #36	; 0x24
 800d180:	bd30      	pop	{r4, r5, pc}
 800d182:	46c0      	nop			; (mov r8, r8)
 800d184:	20006c88 	.word	0x20006c88
 800d188:	20006848 	.word	0x20006848

0800d18c <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800d18c:	b530      	push	{r4, r5, lr}
 800d18e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800d190:	4a12      	ldr	r2, [pc, #72]	; (800d1dc <TIM_USEC_Init+0x50>)
 800d192:	69d1      	ldr	r1, [r2, #28]
 800d194:	2080      	movs	r0, #128	; 0x80
 800d196:	0040      	lsls	r0, r0, #1
 800d198:	4301      	orrs	r1, r0
 800d19a:	61d1      	str	r1, [r2, #28]
 800d19c:	69d3      	ldr	r3, [r2, #28]
 800d19e:	4003      	ands	r3, r0
 800d1a0:	9301      	str	r3, [sp, #4]
 800d1a2:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800d1a4:	4c0e      	ldr	r4, [pc, #56]	; (800d1e0 <TIM_USEC_Init+0x54>)
 800d1a6:	4b0f      	ldr	r3, [pc, #60]	; (800d1e4 <TIM_USEC_Init+0x58>)
 800d1a8:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d1aa:	f004 faeb 	bl	8011784 <HAL_RCC_GetPCLK1Freq>
 800d1ae:	490e      	ldr	r1, [pc, #56]	; (800d1e8 <TIM_USEC_Init+0x5c>)
 800d1b0:	f7f2 ffce 	bl	8000150 <__udivsi3>
 800d1b4:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d1b6:	2500      	movs	r5, #0
 800d1b8:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800d1ba:	4b0c      	ldr	r3, [pc, #48]	; (800d1ec <TIM_USEC_Init+0x60>)
 800d1bc:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800d1be:	0020      	movs	r0, r4
 800d1c0:	f004 fdc6 	bl	8011d50 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d1c4:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d1c6:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d1c8:	a902      	add	r1, sp, #8
 800d1ca:	0020      	movs	r0, r4
 800d1cc:	f004 fdda 	bl	8011d84 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800d1d0:	0020      	movs	r0, r4
 800d1d2:	f004 fd62 	bl	8011c9a <HAL_TIM_Base_Start>
}
 800d1d6:	b005      	add	sp, #20
 800d1d8:	bd30      	pop	{r4, r5, pc}
 800d1da:	46c0      	nop			; (mov r8, r8)
 800d1dc:	40021000 	.word	0x40021000
 800d1e0:	20006ce4 	.word	0x20006ce4
 800d1e4:	40002000 	.word	0x40002000
 800d1e8:	000f4240 	.word	0x000f4240
 800d1ec:	0000ffff 	.word	0x0000ffff

0800d1f0 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800d1f0:	b530      	push	{r4, r5, lr}
 800d1f2:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800d1f4:	4a12      	ldr	r2, [pc, #72]	; (800d240 <TIM_MSEC_Init+0x50>)
 800d1f6:	6991      	ldr	r1, [r2, #24]
 800d1f8:	2080      	movs	r0, #128	; 0x80
 800d1fa:	0240      	lsls	r0, r0, #9
 800d1fc:	4301      	orrs	r1, r0
 800d1fe:	6191      	str	r1, [r2, #24]
 800d200:	6993      	ldr	r3, [r2, #24]
 800d202:	4003      	ands	r3, r0
 800d204:	9301      	str	r3, [sp, #4]
 800d206:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800d208:	4c0e      	ldr	r4, [pc, #56]	; (800d244 <TIM_MSEC_Init+0x54>)
 800d20a:	4b0f      	ldr	r3, [pc, #60]	; (800d248 <TIM_MSEC_Init+0x58>)
 800d20c:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d20e:	f004 fab9 	bl	8011784 <HAL_RCC_GetPCLK1Freq>
 800d212:	21fa      	movs	r1, #250	; 0xfa
 800d214:	0089      	lsls	r1, r1, #2
 800d216:	f7f2 ff9b 	bl	8000150 <__udivsi3>
 800d21a:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d21c:	2500      	movs	r5, #0
 800d21e:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800d220:	4b0a      	ldr	r3, [pc, #40]	; (800d24c <TIM_MSEC_Init+0x5c>)
 800d222:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800d224:	0020      	movs	r0, r4
 800d226:	f004 fd93 	bl	8011d50 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d22a:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d22c:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d22e:	a902      	add	r1, sp, #8
 800d230:	0020      	movs	r0, r4
 800d232:	f004 fda7 	bl	8011d84 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800d236:	0020      	movs	r0, r4
 800d238:	f004 fd2f 	bl	8011c9a <HAL_TIM_Base_Start>
}
 800d23c:	b005      	add	sp, #20
 800d23e:	bd30      	pop	{r4, r5, pc}
 800d240:	40021000 	.word	0x40021000
 800d244:	20006ca8 	.word	0x20006ca8
 800d248:	40014000 	.word	0x40014000
 800d24c:	0000ffff 	.word	0x0000ffff

0800d250 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800d250:	b510      	push	{r4, lr}
 800d252:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800d254:	f002 f94a 	bl	800f4ec <vPortEnterCritical>
	
	if (Delay)
 800d258:	2c00      	cmp	r4, #0
 800d25a:	d006      	beq.n	800d26a <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800d25c:	4b04      	ldr	r3, [pc, #16]	; (800d270 <StartMicroDelay+0x20>)
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800d262:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d264:	1a5b      	subs	r3, r3, r1
 800d266:	42a3      	cmp	r3, r4
 800d268:	d9fb      	bls.n	800d262 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d26a:	f002 f94b 	bl	800f504 <vPortExitCritical>
}
 800d26e:	bd10      	pop	{r4, pc}
 800d270:	20006ce4 	.word	0x20006ce4

0800d274 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800d274:	b510      	push	{r4, lr}
 800d276:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800d278:	f002 f938 	bl	800f4ec <vPortEnterCritical>
	
	if (Delay)
 800d27c:	2c00      	cmp	r4, #0
 800d27e:	d006      	beq.n	800d28e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800d280:	4b04      	ldr	r3, [pc, #16]	; (800d294 <StartMilliDelay+0x20>)
 800d282:	681a      	ldr	r2, [r3, #0]
 800d284:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800d286:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d288:	1a5b      	subs	r3, r3, r1
 800d28a:	42a3      	cmp	r3, r4
 800d28c:	d9fb      	bls.n	800d286 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d28e:	f002 f939 	bl	800f504 <vPortExitCritical>
}
 800d292:	bd10      	pop	{r4, pc}
 800d294:	20006ca8 	.word	0x20006ca8

0800d298 <MX_USART1_UART_Init>:
/* USART1 init function */
DMA_HandleTypeDef hdma_usart1_rx;
#ifdef _Usart1

void MX_USART1_UART_Init(void)
{
 800d298:	b510      	push	{r4, lr}
	  huart1.Instance = USART1;
 800d29a:	4809      	ldr	r0, [pc, #36]	; (800d2c0 <MX_USART1_UART_Init+0x28>)
 800d29c:	4b09      	ldr	r3, [pc, #36]	; (800d2c4 <MX_USART1_UART_Init+0x2c>)
 800d29e:	6003      	str	r3, [r0, #0]
	  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d2a0:	23e1      	movs	r3, #225	; 0xe1
 800d2a2:	031b      	lsls	r3, r3, #12
 800d2a4:	6043      	str	r3, [r0, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	6083      	str	r3, [r0, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 800d2aa:	60c3      	str	r3, [r0, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 800d2ac:	6103      	str	r3, [r0, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 800d2ae:	220c      	movs	r2, #12
 800d2b0:	6142      	str	r2, [r0, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d2b2:	6183      	str	r3, [r0, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d2b4:	61c3      	str	r3, [r0, #28]
	  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d2b6:	6203      	str	r3, [r0, #32]
	  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d2b8:	6243      	str	r3, [r0, #36]	; 0x24
	  HAL_UART_Init(&huart1);
 800d2ba:	f005 f979 	bl	80125b0 <HAL_UART_Init>
}
 800d2be:	bd10      	pop	{r4, pc}
 800d2c0:	20006a58 	.word	0x20006a58
 800d2c4:	40013800 	.word	0x40013800

0800d2c8 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800d2c8:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d2ca:	4809      	ldr	r0, [pc, #36]	; (800d2f0 <MX_USART2_UART_Init+0x28>)
 800d2cc:	4b09      	ldr	r3, [pc, #36]	; (800d2f4 <MX_USART2_UART_Init+0x2c>)
 800d2ce:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d2d0:	23e1      	movs	r3, #225	; 0xe1
 800d2d2:	031b      	lsls	r3, r3, #12
 800d2d4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d2da:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d2dc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d2de:	220c      	movs	r2, #12
 800d2e0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d2e2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d2e4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d2e6:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d2e8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d2ea:	f005 f961 	bl	80125b0 <HAL_UART_Init>
	#if _P1pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800d2ee:	bd10      	pop	{r4, pc}
 800d2f0:	20006ba8 	.word	0x20006ba8
 800d2f4:	40004400 	.word	0x40004400

0800d2f8 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800d2f8:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d2fa:	4809      	ldr	r0, [pc, #36]	; (800d320 <MX_USART3_UART_Init+0x28>)
 800d2fc:	4b09      	ldr	r3, [pc, #36]	; (800d324 <MX_USART3_UART_Init+0x2c>)
 800d2fe:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d300:	23e1      	movs	r3, #225	; 0xe1
 800d302:	031b      	lsls	r3, r3, #12
 800d304:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d306:	2300      	movs	r3, #0
 800d308:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d30a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d30c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d30e:	220c      	movs	r2, #12
 800d310:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d312:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d314:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d316:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d318:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d31a:	f005 f949 	bl	80125b0 <HAL_UART_Init>
	#if _P5pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800d31e:	bd10      	pop	{r4, pc}
 800d320:	20006968 	.word	0x20006968
 800d324:	40004800 	.word	0x40004800

0800d328 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800d328:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800d32a:	4809      	ldr	r0, [pc, #36]	; (800d350 <MX_USART4_UART_Init+0x28>)
 800d32c:	4b09      	ldr	r3, [pc, #36]	; (800d354 <MX_USART4_UART_Init+0x2c>)
 800d32e:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d330:	23e1      	movs	r3, #225	; 0xe1
 800d332:	031b      	lsls	r3, r3, #12
 800d334:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d336:	2300      	movs	r3, #0
 800d338:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d33a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d33c:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d33e:	220c      	movs	r2, #12
 800d340:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d342:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d344:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d346:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d348:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800d34a:	f005 f931 	bl	80125b0 <HAL_UART_Init>
	#if _P4pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800d34e:	bd10      	pop	{r4, pc}
 800d350:	20006b38 	.word	0x20006b38
 800d354:	40004c00 	.word	0x40004c00

0800d358 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800d358:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800d35a:	4809      	ldr	r0, [pc, #36]	; (800d380 <MX_USART5_UART_Init+0x28>)
 800d35c:	4b09      	ldr	r3, [pc, #36]	; (800d384 <MX_USART5_UART_Init+0x2c>)
 800d35e:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d360:	23e1      	movs	r3, #225	; 0xe1
 800d362:	031b      	lsls	r3, r3, #12
 800d364:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d366:	2300      	movs	r3, #0
 800d368:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d36a:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d36c:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d36e:	220c      	movs	r2, #12
 800d370:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d372:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d374:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d376:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d378:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800d37a:	f005 f919 	bl	80125b0 <HAL_UART_Init>
	#if _P3pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800d37e:	bd10      	pop	{r4, pc}
 800d380:	200069e8 	.word	0x200069e8
 800d384:	40005000 	.word	0x40005000

0800d388 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800d388:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d38a:	4809      	ldr	r0, [pc, #36]	; (800d3b0 <MX_USART6_UART_Init+0x28>)
 800d38c:	4b09      	ldr	r3, [pc, #36]	; (800d3b4 <MX_USART6_UART_Init+0x2c>)
 800d38e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d390:	23e1      	movs	r3, #225	; 0xe1
 800d392:	031b      	lsls	r3, r3, #12
 800d394:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d396:	2300      	movs	r3, #0
 800d398:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d39a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d39c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d39e:	220c      	movs	r2, #12
 800d3a0:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d3a2:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d3a4:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d3a6:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d3a8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d3aa:	f005 f901 	bl	80125b0 <HAL_UART_Init>
	#if _P2pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800d3ae:	bd10      	pop	{r4, pc}
 800d3b0:	20006ac8 	.word	0x20006ac8
 800d3b4:	40011400 	.word	0x40011400

0800d3b8 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ba:	46ce      	mov	lr, r9
 800d3bc:	b500      	push	{lr}
 800d3be:	b090      	sub	sp, #64	; 0x40
 800d3c0:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800d3c2:	6803      	ldr	r3, [r0, #0]
 800d3c4:	4a9b      	ldr	r2, [pc, #620]	; (800d634 <HAL_UART_MspInit+0x27c>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d016      	beq.n	800d3f8 <HAL_UART_MspInit+0x40>

	    	__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);

	    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
  }
  else if(huart->Instance==USART2)
 800d3ca:	4a9b      	ldr	r2, [pc, #620]	; (800d638 <HAL_UART_MspInit+0x280>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d055      	beq.n	800d47c <HAL_UART_MspInit+0xc4>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800d3d0:	4a9a      	ldr	r2, [pc, #616]	; (800d63c <HAL_UART_MspInit+0x284>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d100      	bne.n	800d3d8 <HAL_UART_MspInit+0x20>
 800d3d6:	e07d      	b.n	800d4d4 <HAL_UART_MspInit+0x11c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800d3d8:	4a99      	ldr	r2, [pc, #612]	; (800d640 <HAL_UART_MspInit+0x288>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d100      	bne.n	800d3e0 <HAL_UART_MspInit+0x28>
 800d3de:	e0a6      	b.n	800d52e <HAL_UART_MspInit+0x176>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800d3e0:	4a98      	ldr	r2, [pc, #608]	; (800d644 <HAL_UART_MspInit+0x28c>)
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d100      	bne.n	800d3e8 <HAL_UART_MspInit+0x30>
 800d3e6:	e0cd      	b.n	800d584 <HAL_UART_MspInit+0x1cc>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800d3e8:	4a97      	ldr	r2, [pc, #604]	; (800d648 <HAL_UART_MspInit+0x290>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d100      	bne.n	800d3f0 <HAL_UART_MspInit+0x38>
 800d3ee:	e0f4      	b.n	800d5da <HAL_UART_MspInit+0x222>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800d3f0:	b010      	add	sp, #64	; 0x40
 800d3f2:	bc04      	pop	{r2}
 800d3f4:	4691      	mov	r9, r2
 800d3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3f8:	2500      	movs	r5, #0
 800d3fa:	9508      	str	r5, [sp, #32]
	    __HAL_RCC_USART1_CLK_ENABLE();
 800d3fc:	4b93      	ldr	r3, [pc, #588]	; (800d64c <HAL_UART_MspInit+0x294>)
 800d3fe:	6999      	ldr	r1, [r3, #24]
 800d400:	2080      	movs	r0, #128	; 0x80
 800d402:	01c0      	lsls	r0, r0, #7
 800d404:	4301      	orrs	r1, r0
 800d406:	6199      	str	r1, [r3, #24]
 800d408:	699a      	ldr	r2, [r3, #24]
 800d40a:	4002      	ands	r2, r0
 800d40c:	9200      	str	r2, [sp, #0]
 800d40e:	9a00      	ldr	r2, [sp, #0]
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d410:	695a      	ldr	r2, [r3, #20]
 800d412:	2180      	movs	r1, #128	; 0x80
 800d414:	0289      	lsls	r1, r1, #10
 800d416:	430a      	orrs	r2, r1
 800d418:	615a      	str	r2, [r3, #20]
 800d41a:	695b      	ldr	r3, [r3, #20]
 800d41c:	400b      	ands	r3, r1
 800d41e:	9301      	str	r3, [sp, #4]
 800d420:	9b01      	ldr	r3, [sp, #4]
	    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d422:	23c0      	movs	r3, #192	; 0xc0
 800d424:	00db      	lsls	r3, r3, #3
 800d426:	9306      	str	r3, [sp, #24]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d428:	2302      	movs	r3, #2
 800d42a:	9307      	str	r3, [sp, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d42c:	3301      	adds	r3, #1
 800d42e:	9309      	str	r3, [sp, #36]	; 0x24
	    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800d430:	3b02      	subs	r3, #2
 800d432:	930a      	str	r3, [sp, #40]	; 0x28
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d434:	2090      	movs	r0, #144	; 0x90
 800d436:	a906      	add	r1, sp, #24
 800d438:	05c0      	lsls	r0, r0, #23
 800d43a:	f003 fc13 	bl	8010c64 <HAL_GPIO_Init>
	    hdma_usart1_rx.Instance = DMA2_Channel3;
 800d43e:	4884      	ldr	r0, [pc, #528]	; (800d650 <HAL_UART_MspInit+0x298>)
 800d440:	4b84      	ldr	r3, [pc, #528]	; (800d654 <HAL_UART_MspInit+0x29c>)
 800d442:	6003      	str	r3, [r0, #0]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d444:	6045      	str	r5, [r0, #4]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d446:	6085      	str	r5, [r0, #8]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d448:	2380      	movs	r3, #128	; 0x80
 800d44a:	60c3      	str	r3, [r0, #12]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d44c:	6105      	str	r5, [r0, #16]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d44e:	6145      	str	r5, [r0, #20]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800d450:	3b60      	subs	r3, #96	; 0x60
 800d452:	6183      	str	r3, [r0, #24]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d454:	61c5      	str	r5, [r0, #28]
	    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800d456:	f002 fe2b 	bl	80100b0 <HAL_DMA_Init>
 800d45a:	2800      	cmp	r0, #0
 800d45c:	d00a      	beq.n	800d474 <HAL_UART_MspInit+0xbc>
	    	__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);
 800d45e:	4a7e      	ldr	r2, [pc, #504]	; (800d658 <HAL_UART_MspInit+0x2a0>)
 800d460:	23a8      	movs	r3, #168	; 0xa8
 800d462:	58d1      	ldr	r1, [r2, r3]
 800d464:	487d      	ldr	r0, [pc, #500]	; (800d65c <HAL_UART_MspInit+0x2a4>)
 800d466:	4001      	ands	r1, r0
 800d468:	50d1      	str	r1, [r2, r3]
 800d46a:	58d0      	ldr	r0, [r2, r3]
 800d46c:	2180      	movs	r1, #128	; 0x80
 800d46e:	0109      	lsls	r1, r1, #4
 800d470:	4301      	orrs	r1, r0
 800d472:	50d1      	str	r1, [r2, r3]
	    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800d474:	4b76      	ldr	r3, [pc, #472]	; (800d650 <HAL_UART_MspInit+0x298>)
 800d476:	6663      	str	r3, [r4, #100]	; 0x64
 800d478:	625c      	str	r4, [r3, #36]	; 0x24
 800d47a:	e7b9      	b.n	800d3f0 <HAL_UART_MspInit+0x38>
    __USART2_CLK_ENABLE();
 800d47c:	4a73      	ldr	r2, [pc, #460]	; (800d64c <HAL_UART_MspInit+0x294>)
 800d47e:	69d1      	ldr	r1, [r2, #28]
 800d480:	2080      	movs	r0, #128	; 0x80
 800d482:	0280      	lsls	r0, r0, #10
 800d484:	4301      	orrs	r1, r0
 800d486:	61d1      	str	r1, [r2, #28]
 800d488:	69d3      	ldr	r3, [r2, #28]
 800d48a:	4003      	ands	r3, r0
 800d48c:	9302      	str	r3, [sp, #8]
 800d48e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d490:	2304      	movs	r3, #4
 800d492:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d494:	2702      	movs	r7, #2
 800d496:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d498:	2401      	movs	r4, #1
 800d49a:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d49c:	2603      	movs	r6, #3
 800d49e:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART2_AF;	
 800d4a0:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d4a2:	2590      	movs	r5, #144	; 0x90
 800d4a4:	05ed      	lsls	r5, r5, #23
 800d4a6:	a90b      	add	r1, sp, #44	; 0x2c
 800d4a8:	0028      	movs	r0, r5
 800d4aa:	f003 fbdb 	bl	8010c64 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d4ae:	2308      	movs	r3, #8
 800d4b0:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4b2:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d4b4:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d4b6:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART2_AF;
 800d4b8:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d4ba:	a90b      	add	r1, sp, #44	; 0x2c
 800d4bc:	0028      	movs	r0, r5
 800d4be:	f003 fbd1 	bl	8010c64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	2101      	movs	r1, #1
 800d4c6:	201c      	movs	r0, #28
 800d4c8:	f002 fc54 	bl	800fd74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d4cc:	201c      	movs	r0, #28
 800d4ce:	f002 fc81 	bl	800fdd4 <HAL_NVIC_EnableIRQ>
 800d4d2:	e78d      	b.n	800d3f0 <HAL_UART_MspInit+0x38>
    __USART3_CLK_ENABLE();
 800d4d4:	4a5d      	ldr	r2, [pc, #372]	; (800d64c <HAL_UART_MspInit+0x294>)
 800d4d6:	69d1      	ldr	r1, [r2, #28]
 800d4d8:	2080      	movs	r0, #128	; 0x80
 800d4da:	02c0      	lsls	r0, r0, #11
 800d4dc:	4301      	orrs	r1, r0
 800d4de:	61d1      	str	r1, [r2, #28]
 800d4e0:	69d3      	ldr	r3, [r2, #28]
 800d4e2:	4003      	ands	r3, r0
 800d4e4:	9303      	str	r3, [sp, #12]
 800d4e6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d4e8:	2380      	movs	r3, #128	; 0x80
 800d4ea:	00db      	lsls	r3, r3, #3
 800d4ec:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4ee:	2402      	movs	r4, #2
 800d4f0:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d4f2:	2701      	movs	r7, #1
 800d4f4:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d4f6:	2603      	movs	r6, #3
 800d4f8:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d4fa:	2504      	movs	r5, #4
 800d4fc:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d4fe:	a90b      	add	r1, sp, #44	; 0x2c
 800d500:	4857      	ldr	r0, [pc, #348]	; (800d660 <HAL_UART_MspInit+0x2a8>)
 800d502:	f003 fbaf 	bl	8010c64 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800d506:	2380      	movs	r3, #128	; 0x80
 800d508:	011b      	lsls	r3, r3, #4
 800d50a:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d50c:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d50e:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d510:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART3_AF;
 800d512:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800d514:	a90b      	add	r1, sp, #44	; 0x2c
 800d516:	4852      	ldr	r0, [pc, #328]	; (800d660 <HAL_UART_MspInit+0x2a8>)
 800d518:	f003 fba4 	bl	8010c64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d51c:	2200      	movs	r2, #0
 800d51e:	2101      	movs	r1, #1
 800d520:	201d      	movs	r0, #29
 800d522:	f002 fc27 	bl	800fd74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d526:	201d      	movs	r0, #29
 800d528:	f002 fc54 	bl	800fdd4 <HAL_NVIC_EnableIRQ>
 800d52c:	e760      	b.n	800d3f0 <HAL_UART_MspInit+0x38>
    __USART4_CLK_ENABLE();
 800d52e:	4a47      	ldr	r2, [pc, #284]	; (800d64c <HAL_UART_MspInit+0x294>)
 800d530:	69d1      	ldr	r1, [r2, #28]
 800d532:	2080      	movs	r0, #128	; 0x80
 800d534:	0300      	lsls	r0, r0, #12
 800d536:	4301      	orrs	r1, r0
 800d538:	61d1      	str	r1, [r2, #28]
 800d53a:	69d3      	ldr	r3, [r2, #28]
 800d53c:	4003      	ands	r3, r0
 800d53e:	9304      	str	r3, [sp, #16]
 800d540:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800d542:	2401      	movs	r4, #1
 800d544:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d546:	2502      	movs	r5, #2
 800d548:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d54a:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d54c:	2603      	movs	r6, #3
 800d54e:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART4_AF;	
 800d550:	2704      	movs	r7, #4
 800d552:	970f      	str	r7, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800d554:	a90b      	add	r1, sp, #44	; 0x2c
 800d556:	2090      	movs	r0, #144	; 0x90
 800d558:	05c0      	lsls	r0, r0, #23
 800d55a:	f003 fb83 	bl	8010c64 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800d55e:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d560:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d562:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d564:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART4_AF;
 800d566:	970f      	str	r7, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800d568:	a90b      	add	r1, sp, #44	; 0x2c
 800d56a:	2090      	movs	r0, #144	; 0x90
 800d56c:	05c0      	lsls	r0, r0, #23
 800d56e:	f003 fb79 	bl	8010c64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d572:	2200      	movs	r2, #0
 800d574:	2101      	movs	r1, #1
 800d576:	201d      	movs	r0, #29
 800d578:	f002 fbfc 	bl	800fd74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d57c:	201d      	movs	r0, #29
 800d57e:	f002 fc29 	bl	800fdd4 <HAL_NVIC_EnableIRQ>
 800d582:	e735      	b.n	800d3f0 <HAL_UART_MspInit+0x38>
    __USART5_CLK_ENABLE();
 800d584:	4a31      	ldr	r2, [pc, #196]	; (800d64c <HAL_UART_MspInit+0x294>)
 800d586:	69d1      	ldr	r1, [r2, #28]
 800d588:	2080      	movs	r0, #128	; 0x80
 800d58a:	0340      	lsls	r0, r0, #13
 800d58c:	4301      	orrs	r1, r0
 800d58e:	61d1      	str	r1, [r2, #28]
 800d590:	69d3      	ldr	r3, [r2, #28]
 800d592:	4003      	ands	r3, r0
 800d594:	9305      	str	r3, [sp, #20]
 800d596:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d598:	2308      	movs	r3, #8
 800d59a:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d59c:	2402      	movs	r4, #2
 800d59e:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d5a0:	2701      	movs	r7, #1
 800d5a2:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d5a4:	2603      	movs	r6, #3
 800d5a6:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d5a8:	2504      	movs	r5, #4
 800d5aa:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d5ac:	a90b      	add	r1, sp, #44	; 0x2c
 800d5ae:	482c      	ldr	r0, [pc, #176]	; (800d660 <HAL_UART_MspInit+0x2a8>)
 800d5b0:	f003 fb58 	bl	8010c64 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d5b4:	2310      	movs	r3, #16
 800d5b6:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5b8:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d5ba:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d5bc:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART5_AF;
 800d5be:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d5c0:	a90b      	add	r1, sp, #44	; 0x2c
 800d5c2:	4827      	ldr	r0, [pc, #156]	; (800d660 <HAL_UART_MspInit+0x2a8>)
 800d5c4:	f003 fb4e 	bl	8010c64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	2101      	movs	r1, #1
 800d5cc:	201d      	movs	r0, #29
 800d5ce:	f002 fbd1 	bl	800fd74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d5d2:	201d      	movs	r0, #29
 800d5d4:	f002 fbfe 	bl	800fdd4 <HAL_NVIC_EnableIRQ>
 800d5d8:	e70a      	b.n	800d3f0 <HAL_UART_MspInit+0x38>
    __USART6_CLK_ENABLE();
 800d5da:	4b1c      	ldr	r3, [pc, #112]	; (800d64c <HAL_UART_MspInit+0x294>)
 800d5dc:	699a      	ldr	r2, [r3, #24]
 800d5de:	2420      	movs	r4, #32
 800d5e0:	4322      	orrs	r2, r4
 800d5e2:	619a      	str	r2, [r3, #24]
 800d5e4:	699b      	ldr	r3, [r3, #24]
 800d5e6:	4023      	ands	r3, r4
 800d5e8:	9306      	str	r3, [sp, #24]
 800d5ea:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800d5ec:	2310      	movs	r3, #16
 800d5ee:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5f0:	3b0e      	subs	r3, #14
 800d5f2:	4699      	mov	r9, r3
 800d5f4:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d5f6:	2501      	movs	r5, #1
 800d5f8:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d5fa:	2703      	movs	r7, #3
 800d5fc:	970e      	str	r7, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d5fe:	2605      	movs	r6, #5
 800d600:	960f      	str	r6, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d602:	a90b      	add	r1, sp, #44	; 0x2c
 800d604:	2090      	movs	r0, #144	; 0x90
 800d606:	05c0      	lsls	r0, r0, #23
 800d608:	f003 fb2c 	bl	8010c64 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800d60c:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d60e:	464b      	mov	r3, r9
 800d610:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d612:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d614:	970e      	str	r7, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART6_AF;
 800d616:	960f      	str	r6, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d618:	a90b      	add	r1, sp, #44	; 0x2c
 800d61a:	2090      	movs	r0, #144	; 0x90
 800d61c:	05c0      	lsls	r0, r0, #23
 800d61e:	f003 fb21 	bl	8010c64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d622:	2200      	movs	r2, #0
 800d624:	2101      	movs	r1, #1
 800d626:	201d      	movs	r0, #29
 800d628:	f002 fba4 	bl	800fd74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d62c:	201d      	movs	r0, #29
 800d62e:	f002 fbd1 	bl	800fdd4 <HAL_NVIC_EnableIRQ>
}
 800d632:	e6dd      	b.n	800d3f0 <HAL_UART_MspInit+0x38>
 800d634:	40013800 	.word	0x40013800
 800d638:	40004400 	.word	0x40004400
 800d63c:	40004800 	.word	0x40004800
 800d640:	40004c00 	.word	0x40004c00
 800d644:	40005000 	.word	0x40005000
 800d648:	40011400 	.word	0x40011400
 800d64c:	40021000 	.word	0x40021000
 800d650:	20006d20 	.word	0x20006d20
 800d654:	40020430 	.word	0x40020430
 800d658:	40020400 	.word	0x40020400
 800d65c:	fffff0ff 	.word	0xfffff0ff
 800d660:	48000400 	.word	0x48000400

0800d664 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800d664:	2805      	cmp	r0, #5
 800d666:	d80b      	bhi.n	800d680 <GetUart+0x1c>
 800d668:	0080      	lsls	r0, r0, #2
 800d66a:	4b07      	ldr	r3, [pc, #28]	; (800d688 <GetUart+0x24>)
 800d66c:	581b      	ldr	r3, [r3, r0]
 800d66e:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			return P1uart;	
 800d670:	4806      	ldr	r0, [pc, #24]	; (800d68c <GetUart+0x28>)
 800d672:	e008      	b.n	800d686 <GetUart+0x22>
		case P2 :
			return P2uart;
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800d674:	4806      	ldr	r0, [pc, #24]	; (800d690 <GetUart+0x2c>)
 800d676:	e006      	b.n	800d686 <GetUart+0x22>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800d678:	4806      	ldr	r0, [pc, #24]	; (800d694 <GetUart+0x30>)
 800d67a:	e004      	b.n	800d686 <GetUart+0x22>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800d67c:	4806      	ldr	r0, [pc, #24]	; (800d698 <GetUart+0x34>)
 800d67e:	e002      	b.n	800d686 <GetUart+0x22>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800d680:	2000      	movs	r0, #0
 800d682:	e000      	b.n	800d686 <GetUart+0x22>
			return P2uart;
 800d684:	4805      	ldr	r0, [pc, #20]	; (800d69c <GetUart+0x38>)
	}		
}
 800d686:	4770      	bx	lr
 800d688:	08017bc0 	.word	0x08017bc0
 800d68c:	20006ba8 	.word	0x20006ba8
 800d690:	200069e8 	.word	0x200069e8
 800d694:	20006b38 	.word	0x20006b38
 800d698:	20006968 	.word	0x20006968
 800d69c:	20006ac8 	.word	0x20006ac8

0800d6a0 <writePxMutex>:
{
 800d6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	0005      	movs	r5, r0
 800d6a6:	9101      	str	r1, [sp, #4]
 800d6a8:	0017      	movs	r7, r2
 800d6aa:	001e      	movs	r6, r3
	if (GetUart(port) != NULL) {
 800d6ac:	f7ff ffda 	bl	800d664 <GetUart>
 800d6b0:	1e04      	subs	r4, r0, #0
 800d6b2:	d01c      	beq.n	800d6ee <writePxMutex+0x4e>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d6b4:	00ab      	lsls	r3, r5, #2
 800d6b6:	4a10      	ldr	r2, [pc, #64]	; (800d6f8 <writePxMutex+0x58>)
 800d6b8:	5898      	ldr	r0, [r3, r2]
 800d6ba:	0031      	movs	r1, r6
 800d6bc:	f000 f990 	bl	800d9e0 <osSemaphoreWait>
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	d101      	bne.n	800d6c8 <writePxMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR;
 800d6c4:	2601      	movs	r6, #1
 800d6c6:	e008      	b.n	800d6da <writePxMutex+0x3a>
 800d6c8:	2601      	movs	r6, #1
 800d6ca:	e011      	b.n	800d6f0 <writePxMutex+0x50>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800d6cc:	9b08      	ldr	r3, [sp, #32]
 800d6ce:	003a      	movs	r2, r7
 800d6d0:	9901      	ldr	r1, [sp, #4]
 800d6d2:	0020      	movs	r0, r4
 800d6d4:	f004 fec2 	bl	801245c <HAL_UART_Transmit>
 800d6d8:	0006      	movs	r6, r0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d6da:	2e00      	cmp	r6, #0
 800d6dc:	d001      	beq.n	800d6e2 <writePxMutex+0x42>
 800d6de:	2e03      	cmp	r6, #3
 800d6e0:	d1f4      	bne.n	800d6cc <writePxMutex+0x2c>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800d6e2:	00ad      	lsls	r5, r5, #2
 800d6e4:	4b04      	ldr	r3, [pc, #16]	; (800d6f8 <writePxMutex+0x58>)
 800d6e6:	58e8      	ldr	r0, [r5, r3]
 800d6e8:	f000 f9b0 	bl	800da4c <osSemaphoreRelease>
 800d6ec:	e000      	b.n	800d6f0 <writePxMutex+0x50>
	HAL_StatusTypeDef result = HAL_ERROR;
 800d6ee:	2601      	movs	r6, #1
}
 800d6f0:	0030      	movs	r0, r6
 800d6f2:	b003      	add	sp, #12
 800d6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6f6:	46c0      	nop			; (mov r8, r8)
 800d6f8:	200068cc 	.word	0x200068cc

0800d6fc <writePxITMutex>:
{
 800d6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6fe:	b083      	sub	sp, #12
 800d700:	0004      	movs	r4, r0
 800d702:	9101      	str	r1, [sp, #4]
 800d704:	0017      	movs	r7, r2
 800d706:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800d708:	f7ff ffac 	bl	800d664 <GetUart>
 800d70c:	1e06      	subs	r6, r0, #0
 800d70e:	d00f      	beq.n	800d730 <writePxITMutex+0x34>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d710:	00a4      	lsls	r4, r4, #2
 800d712:	4b09      	ldr	r3, [pc, #36]	; (800d738 <writePxITMutex+0x3c>)
 800d714:	58e0      	ldr	r0, [r4, r3]
 800d716:	0029      	movs	r1, r5
 800d718:	f000 f962 	bl	800d9e0 <osSemaphoreWait>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	d001      	beq.n	800d724 <writePxITMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d720:	2001      	movs	r0, #1
 800d722:	e006      	b.n	800d732 <writePxITMutex+0x36>
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800d724:	003a      	movs	r2, r7
 800d726:	9901      	ldr	r1, [sp, #4]
 800d728:	0030      	movs	r0, r6
 800d72a:	f004 fb6e 	bl	8011e0a <HAL_UART_Transmit_IT>
 800d72e:	e000      	b.n	800d732 <writePxITMutex+0x36>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d730:	2001      	movs	r0, #1
}
 800d732:	b003      	add	sp, #12
 800d734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d736:	46c0      	nop			; (mov r8, r8)
 800d738:	200068cc 	.word	0x200068cc

0800d73c <UpdateBaudrate>:
{
 800d73c:	b510      	push	{r4, lr}
 800d73e:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800d740:	f7ff ff90 	bl	800d664 <GetUart>
	huart->Init.BaudRate = baudrate;
 800d744:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800d746:	f004 ff33 	bl	80125b0 <HAL_UART_Init>
}
 800d74a:	2000      	movs	r0, #0
 800d74c:	bd10      	pop	{r4, pc}
	...

0800d750 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800d750:	b570      	push	{r4, r5, r6, lr}
 800d752:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800d754:	d003      	beq.n	800d75e <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800d756:	2901      	cmp	r1, #1
 800d758:	d002      	beq.n	800d760 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800d75a:	2900      	cmp	r1, #0
 800d75c:	d016      	beq.n	800d78c <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800d75e:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d760:	f7fc fd92 	bl	800a288 <GetPort>
 800d764:	3801      	subs	r0, #1
 800d766:	2180      	movs	r1, #128	; 0x80
 800d768:	0209      	lsls	r1, r1, #8
 800d76a:	000d      	movs	r5, r1
 800d76c:	4105      	asrs	r5, r0
 800d76e:	4b12      	ldr	r3, [pc, #72]	; (800d7b8 <SwapUartPins+0x68>)
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	3b01      	subs	r3, #1
 800d774:	4811      	ldr	r0, [pc, #68]	; (800d7bc <SwapUartPins+0x6c>)
 800d776:	005b      	lsls	r3, r3, #1
 800d778:	5a1a      	ldrh	r2, [r3, r0]
 800d77a:	432a      	orrs	r2, r5
 800d77c:	521a      	strh	r2, [r3, r0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d77e:	2308      	movs	r3, #8
 800d780:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d782:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800d784:	0020      	movs	r0, r4
 800d786:	f004 ff13 	bl	80125b0 <HAL_UART_Init>
 800d78a:	e7e8      	b.n	800d75e <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d78c:	f7fc fd7c 	bl	800a288 <GetPort>
 800d790:	3801      	subs	r0, #1
 800d792:	2180      	movs	r1, #128	; 0x80
 800d794:	0209      	lsls	r1, r1, #8
 800d796:	4101      	asrs	r1, r0
 800d798:	4b07      	ldr	r3, [pc, #28]	; (800d7b8 <SwapUartPins+0x68>)
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	3b01      	subs	r3, #1
 800d79e:	4807      	ldr	r0, [pc, #28]	; (800d7bc <SwapUartPins+0x6c>)
 800d7a0:	005b      	lsls	r3, r3, #1
 800d7a2:	5a1a      	ldrh	r2, [r3, r0]
 800d7a4:	438a      	bics	r2, r1
 800d7a6:	521a      	strh	r2, [r3, r0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d7a8:	2308      	movs	r3, #8
 800d7aa:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800d7b0:	0020      	movs	r0, r4
 800d7b2:	f004 fefd 	bl	80125b0 <HAL_UART_Init>
}
 800d7b6:	e7d2      	b.n	800d75e <SwapUartPins+0xe>
 800d7b8:	20000a98 	.word	0x20000a98
 800d7bc:	20006d58 	.word	0x20006d58

0800d7c0 <ReadPortsDir>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800d7c0:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800d7c2:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800d7c4:	2500      	movs	r5, #0
	for (uint8_t i = 1; i <= N; i++) {
 800d7c6:	e005      	b.n	800d7d4 <ReadPortsDir+0x14>
			if (responseStatus != BOS_OK) {
				result = BOS_ERR_NoResponse;
			}
		} else {
			/* Check my own ports */
			for (uint8_t p = 1; p <= NumOfPorts; p++) {
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	2b05      	cmp	r3, #5
 800d7ce:	d9fb      	bls.n	800d7c8 <ReadPortsDir+0x8>
	for (uint8_t i = 1; i <= N; i++) {
 800d7d0:	3401      	adds	r4, #1
 800d7d2:	b2e4      	uxtb	r4, r4
 800d7d4:	4b0c      	ldr	r3, [pc, #48]	; (800d808 <ReadPortsDir+0x48>)
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	42a3      	cmp	r3, r4
 800d7da:	d313      	bcc.n	800d804 <ReadPortsDir+0x44>
		if (i != myID) {
 800d7dc:	4b0b      	ldr	r3, [pc, #44]	; (800d80c <ReadPortsDir+0x4c>)
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	42a3      	cmp	r3, r4
 800d7e2:	d00d      	beq.n	800d800 <ReadPortsDir+0x40>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	2113      	movs	r1, #19
 800d7e8:	0020      	movs	r0, r4
 800d7ea:	f7fa fd1b 	bl	8008224 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800d7ee:	2032      	movs	r0, #50	; 0x32
 800d7f0:	f7ff fd40 	bl	800d274 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800d7f4:	4b06      	ldr	r3, [pc, #24]	; (800d810 <ReadPortsDir+0x50>)
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d0e9      	beq.n	800d7d0 <ReadPortsDir+0x10>
				result = BOS_ERR_NoResponse;
 800d7fc:	2502      	movs	r5, #2
 800d7fe:	e7e7      	b.n	800d7d0 <ReadPortsDir+0x10>
			for (uint8_t p = 1; p <= NumOfPorts; p++) {
 800d800:	2301      	movs	r3, #1
 800d802:	e7e3      	b.n	800d7cc <ReadPortsDir+0xc>
			}
		}
	}

	return result;
}
 800d804:	0028      	movs	r0, r5
 800d806:	bd70      	pop	{r4, r5, r6, pc}
 800d808:	20000008 	.word	0x20000008
 800d80c:	20000a98 	.word	0x20000a98
 800d810:	20000c3c 	.word	0x20000c3c

0800d814 <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800d814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d816:	0006      	movs	r6, r0
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
 800d818:	2401      	movs	r4, #1
	uint16_t temp =0;
 800d81a:	2700      	movs	r7, #0
	for (int p = 1; p <= NumOfPorts; p++) {
 800d81c:	e000      	b.n	800d820 <ReadPortsDirMSG+0xc>
 800d81e:	3401      	adds	r4, #1
 800d820:	2c05      	cmp	r4, #5
 800d822:	dc0d      	bgt.n	800d840 <ReadPortsDirMSG+0x2c>
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800d824:	b2e5      	uxtb	r5, r4
 800d826:	0028      	movs	r0, r5
 800d828:	f7ff ff1c 	bl	800d664 <GetUart>
 800d82c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800d82e:	2380      	movs	r3, #128	; 0x80
 800d830:	021b      	lsls	r3, r3, #8
 800d832:	429a      	cmp	r2, r3
 800d834:	d1f3      	bne.n	800d81e <ReadPortsDirMSG+0xa>
			messageParams[temp++] = p;
 800d836:	1c7b      	adds	r3, r7, #1
 800d838:	4a05      	ldr	r2, [pc, #20]	; (800d850 <ReadPortsDirMSG+0x3c>)
 800d83a:	55d5      	strb	r5, [r2, r7]
 800d83c:	b29f      	uxth	r7, r3
 800d83e:	e7ee      	b.n	800d81e <ReadPortsDirMSG+0xa>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800d840:	003a      	movs	r2, r7
 800d842:	2114      	movs	r1, #20
 800d844:	0030      	movs	r0, r6
 800d846:	f7fa fced 	bl	8008224 <SendMessageToModule>
	return result;
}
 800d84a:	2000      	movs	r0, #0
 800d84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d84e:	46c0      	nop			; (mov r8, r8)
 800d850:	20000b3c 	.word	0x20000b3c

0800d854 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800d854:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800d856:	2401      	movs	r4, #1
 800d858:	e007      	b.n	800d86a <UpdateMyPortsDir+0x16>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);
 800d85a:	0020      	movs	r0, r4
 800d85c:	f7ff ff02 	bl	800d664 <GetUart>
 800d860:	2101      	movs	r1, #1
 800d862:	f7ff ff75 	bl	800d750 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800d866:	3401      	adds	r4, #1
 800d868:	b2e4      	uxtb	r4, r4
 800d86a:	2c05      	cmp	r4, #5
 800d86c:	d812      	bhi.n	800d894 <UpdateMyPortsDir+0x40>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800d86e:	4b0a      	ldr	r3, [pc, #40]	; (800d898 <UpdateMyPortsDir+0x44>)
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	3b01      	subs	r3, #1
 800d874:	005b      	lsls	r3, r3, #1
 800d876:	4a09      	ldr	r2, [pc, #36]	; (800d89c <UpdateMyPortsDir+0x48>)
 800d878:	5a9a      	ldrh	r2, [r3, r2]
 800d87a:	1e61      	subs	r1, r4, #1
 800d87c:	2380      	movs	r3, #128	; 0x80
 800d87e:	021b      	lsls	r3, r3, #8
 800d880:	410b      	asrs	r3, r1
 800d882:	4213      	tst	r3, r2
 800d884:	d1e9      	bne.n	800d85a <UpdateMyPortsDir+0x6>
			SwapUartPins(GetUart(p), NORMAL);
 800d886:	0020      	movs	r0, r4
 800d888:	f7ff feec 	bl	800d664 <GetUart>
 800d88c:	2100      	movs	r1, #0
 800d88e:	f7ff ff5f 	bl	800d750 <SwapUartPins>
 800d892:	e7e8      	b.n	800d866 <UpdateMyPortsDir+0x12>
		}
	}

	return result;
}
 800d894:	2000      	movs	r0, #0
 800d896:	bd10      	pop	{r4, pc}
 800d898:	20000a98 	.word	0x20000a98
 800d89c:	20006d58 	.word	0x20006d58

0800d8a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d8a0:	4816      	ldr	r0, [pc, #88]	; (800d8fc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d8a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d8a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d8a6:	e003      	b.n	800d8b0 <LoopCopyDataInit>

0800d8a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d8a8:	4b15      	ldr	r3, [pc, #84]	; (800d900 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800d8aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d8ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d8ae:	3104      	adds	r1, #4

0800d8b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d8b0:	4814      	ldr	r0, [pc, #80]	; (800d904 <LoopForever+0xc>)
  ldr r3, =_edata
 800d8b2:	4b15      	ldr	r3, [pc, #84]	; (800d908 <LoopForever+0x10>)
  adds r2, r0, r1
 800d8b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d8b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d8b8:	d3f6      	bcc.n	800d8a8 <CopyDataInit>
  ldr r2, =_sbss
 800d8ba:	4a14      	ldr	r2, [pc, #80]	; (800d90c <LoopForever+0x14>)
  b LoopFillZerobss
 800d8bc:	e002      	b.n	800d8c4 <LoopFillZerobss>

0800d8be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d8be:	2300      	movs	r3, #0
  str  r3, [r2]
 800d8c0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d8c2:	3204      	adds	r2, #4

0800d8c4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d8c4:	4b12      	ldr	r3, [pc, #72]	; (800d910 <LoopForever+0x18>)
  cmp r2, r3
 800d8c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d8c8:	d3f9      	bcc.n	800d8be <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d8ca:	4812      	ldr	r0, [pc, #72]	; (800d914 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800d8cc:	4912      	ldr	r1, [pc, #72]	; (800d918 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800d8ce:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800d8d0:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800d8d2:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800d8d4:	d005      	beq.n	800d8e2 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d8d6:	f000 f82b 	bl	800d930 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d8da:	f004 ffe1 	bl	80128a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d8de:	f004 ffbe 	bl	801285e <main>

0800d8e2 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d8e2:	480e      	ldr	r0, [pc, #56]	; (800d91c <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d8e4:	490e      	ldr	r1, [pc, #56]	; (800d920 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d8e6:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d8e8:	480e      	ldr	r0, [pc, #56]	; (800d924 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800d8ea:	490d      	ldr	r1, [pc, #52]	; (800d920 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d8ec:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d8ee:	480e      	ldr	r0, [pc, #56]	; (800d928 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800d8f0:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800d8f2:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800d8f4:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800d8f6:	4700      	bx	r0

0800d8f8 <LoopForever>:


LoopForever:
    b LoopForever
 800d8f8:	e7fe      	b.n	800d8f8 <LoopForever>
 800d8fa:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d8fc:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800d900:	0801a818 	.word	0x0801a818
  ldr r0, =_sdata
 800d904:	20000008 	.word	0x20000008
  ldr r3, =_edata
 800d908:	20000a78 	.word	0x20000a78
  ldr r2, =_sbss
 800d90c:	20000a78 	.word	0x20000a78
  ldr r3, = _ebss
 800d910:	20006e00 	.word	0x20006e00
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d914:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800d918:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d91c:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d920:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d924:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d928:	1fffd800 	.word	0x1fffd800

0800d92c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d92c:	e7fe      	b.n	800d92c <ADC1_COMP_IRQHandler>
	...

0800d930 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d930:	4b11      	ldr	r3, [pc, #68]	; (800d978 <SystemInit+0x48>)
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	2101      	movs	r1, #1
 800d936:	430a      	orrs	r2, r1
 800d938:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d93a:	685a      	ldr	r2, [r3, #4]
 800d93c:	480f      	ldr	r0, [pc, #60]	; (800d97c <SystemInit+0x4c>)
 800d93e:	4002      	ands	r2, r0
 800d940:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	480e      	ldr	r0, [pc, #56]	; (800d980 <SystemInit+0x50>)
 800d946:	4002      	ands	r2, r0
 800d948:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	480d      	ldr	r0, [pc, #52]	; (800d984 <SystemInit+0x54>)
 800d94e:	4002      	ands	r2, r0
 800d950:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d952:	685a      	ldr	r2, [r3, #4]
 800d954:	480c      	ldr	r0, [pc, #48]	; (800d988 <SystemInit+0x58>)
 800d956:	4002      	ands	r2, r0
 800d958:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d95c:	200f      	movs	r0, #15
 800d95e:	4382      	bics	r2, r0
 800d960:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800d962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d964:	4809      	ldr	r0, [pc, #36]	; (800d98c <SystemInit+0x5c>)
 800d966:	4002      	ands	r2, r0
 800d968:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800d96a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d96c:	438a      	bics	r2, r1
 800d96e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d970:	2200      	movs	r2, #0
 800d972:	609a      	str	r2, [r3, #8]

}
 800d974:	4770      	bx	lr
 800d976:	46c0      	nop			; (mov r8, r8)
 800d978:	40021000 	.word	0x40021000
 800d97c:	08ffb80c 	.word	0x08ffb80c
 800d980:	fef6ffff 	.word	0xfef6ffff
 800d984:	fffbffff 	.word	0xfffbffff
 800d988:	ffc0ffff 	.word	0xffc0ffff
 800d98c:	fff0feac 	.word	0xfff0feac

0800d990 <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d990:	f3ef 8005 	mrs	r0, IPSR


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
 800d994:	1e43      	subs	r3, r0, #1
 800d996:	4198      	sbcs	r0, r3
}
 800d998:	4770      	bx	lr

0800d99a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d99a:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800d99c:	f000 fef2 	bl	800e784 <vTaskStartScheduler>
  
  return osOK;
}
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	bd10      	pop	{r4, pc}

0800d9a4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d9a4:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d100      	bne.n	800d9ac <osDelay+0x8>
 800d9aa:	3001      	adds	r0, #1
 800d9ac:	f000 fffa 	bl	800e9a4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	bd10      	pop	{r4, pc}

0800d9b4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800d9b4:	b510      	push	{r4, lr}
 800d9b6:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800d9b8:	2901      	cmp	r1, #1
 800d9ba:	d005      	beq.n	800d9c8 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800d9bc:	2100      	movs	r1, #0
 800d9be:	f000 fb02 	bl	800dfc6 <xQueueCreateCountingSemaphore>
 800d9c2:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800d9c4:	0020      	movs	r0, r4
 800d9c6:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800d9c8:	2203      	movs	r2, #3
 800d9ca:	2100      	movs	r1, #0
 800d9cc:	f000 fad9 	bl	800df82 <xQueueGenericCreate>
 800d9d0:	1e04      	subs	r4, r0, #0
 800d9d2:	d0f7      	beq.n	800d9c4 <osSemaphoreCreate+0x10>
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	2100      	movs	r1, #0
 800d9da:	f000 fafe 	bl	800dfda <xQueueGenericSend>
 800d9de:	e7f1      	b.n	800d9c4 <osSemaphoreCreate+0x10>

0800d9e0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d9e0:	b530      	push	{r4, r5, lr}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	0005      	movs	r5, r0
 800d9e6:	000c      	movs	r4, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	d025      	beq.n	800da3c <osSemaphoreWait+0x5c>
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800d9f0:	1c4b      	adds	r3, r1, #1
 800d9f2:	d013      	beq.n	800da1c <osSemaphoreWait+0x3c>
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d9f4:	f7ff ffcc 	bl	800d990 <inHandlerMode>
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	d012      	beq.n	800da22 <osSemaphoreWait+0x42>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d9fc:	aa01      	add	r2, sp, #4
 800d9fe:	2100      	movs	r1, #0
 800da00:	0028      	movs	r0, r5
 800da02:	f000 fc54 	bl	800e2ae <xQueueReceiveFromISR>
 800da06:	2801      	cmp	r0, #1
 800da08:	d11a      	bne.n	800da40 <osSemaphoreWait+0x60>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800da0a:	9b01      	ldr	r3, [sp, #4]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d019      	beq.n	800da44 <osSemaphoreWait+0x64>
 800da10:	4b0d      	ldr	r3, [pc, #52]	; (800da48 <osSemaphoreWait+0x68>)
 800da12:	2280      	movs	r2, #128	; 0x80
 800da14:	0552      	lsls	r2, r2, #21
 800da16:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800da18:	2000      	movs	r0, #0
 800da1a:	e00b      	b.n	800da34 <osSemaphoreWait+0x54>
    ticks = portMAX_DELAY;
 800da1c:	2401      	movs	r4, #1
 800da1e:	4264      	negs	r4, r4
 800da20:	e7e8      	b.n	800d9f4 <osSemaphoreWait+0x14>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800da22:	2300      	movs	r3, #0
 800da24:	0022      	movs	r2, r4
 800da26:	2100      	movs	r1, #0
 800da28:	0028      	movs	r0, r5
 800da2a:	f000 fbb1 	bl	800e190 <xQueueGenericReceive>
 800da2e:	2801      	cmp	r0, #1
 800da30:	d102      	bne.n	800da38 <osSemaphoreWait+0x58>
  return osOK;
 800da32:	2000      	movs	r0, #0
}
 800da34:	b003      	add	sp, #12
 800da36:	bd30      	pop	{r4, r5, pc}
    return osErrorOS;
 800da38:	20ff      	movs	r0, #255	; 0xff
 800da3a:	e7fb      	b.n	800da34 <osSemaphoreWait+0x54>
    return osErrorParameter;
 800da3c:	2080      	movs	r0, #128	; 0x80
 800da3e:	e7f9      	b.n	800da34 <osSemaphoreWait+0x54>
      return osErrorOS;
 800da40:	20ff      	movs	r0, #255	; 0xff
 800da42:	e7f7      	b.n	800da34 <osSemaphoreWait+0x54>
  return osOK;
 800da44:	2000      	movs	r0, #0
 800da46:	e7f5      	b.n	800da34 <osSemaphoreWait+0x54>
 800da48:	e000ed04 	.word	0xe000ed04

0800da4c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800da4c:	b510      	push	{r4, lr}
 800da4e:	b082      	sub	sp, #8
 800da50:	0004      	movs	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800da52:	2300      	movs	r3, #0
 800da54:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 800da56:	f7ff ff9b 	bl	800d990 <inHandlerMode>
 800da5a:	2800      	cmp	r0, #0
 800da5c:	d00e      	beq.n	800da7c <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800da5e:	a901      	add	r1, sp, #4
 800da60:	0020      	movs	r0, r4
 800da62:	f000 fb65 	bl	800e130 <xQueueGiveFromISR>
 800da66:	2801      	cmp	r0, #1
 800da68:	d113      	bne.n	800da92 <osSemaphoreRelease+0x46>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800da6a:	9b01      	ldr	r3, [sp, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d012      	beq.n	800da96 <osSemaphoreRelease+0x4a>
 800da70:	4b0b      	ldr	r3, [pc, #44]	; (800daa0 <osSemaphoreRelease+0x54>)
 800da72:	2280      	movs	r2, #128	; 0x80
 800da74:	0552      	lsls	r2, r2, #21
 800da76:	601a      	str	r2, [r3, #0]
  osStatus result = osOK;
 800da78:	2000      	movs	r0, #0
 800da7a:	e008      	b.n	800da8e <osSemaphoreRelease+0x42>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800da7c:	2300      	movs	r3, #0
 800da7e:	2200      	movs	r2, #0
 800da80:	2100      	movs	r1, #0
 800da82:	0020      	movs	r0, r4
 800da84:	f000 faa9 	bl	800dfda <xQueueGenericSend>
 800da88:	2801      	cmp	r0, #1
 800da8a:	d106      	bne.n	800da9a <osSemaphoreRelease+0x4e>
  osStatus result = osOK;
 800da8c:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 800da8e:	b002      	add	sp, #8
 800da90:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800da92:	20ff      	movs	r0, #255	; 0xff
 800da94:	e7fb      	b.n	800da8e <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800da96:	2000      	movs	r0, #0
 800da98:	e7f9      	b.n	800da8e <osSemaphoreRelease+0x42>
      result = osErrorOS;
 800da9a:	20ff      	movs	r0, #255	; 0xff
 800da9c:	e7f7      	b.n	800da8e <osSemaphoreRelease+0x42>
 800da9e:	46c0      	nop			; (mov r8, r8)
 800daa0:	e000ed04 	.word	0xe000ed04

0800daa4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800daa4:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800daa6:	f001 f921 	bl	800ecec <xTaskGetSchedulerState>
 800daaa:	2801      	cmp	r0, #1
 800daac:	d001      	beq.n	800dab2 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800daae:	f001 fd5d 	bl	800f56c <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800dab2:	bd10      	pop	{r4, pc}

0800dab4 <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const int8_t * pcCommandString )
{
 800dab4:	0003      	movs	r3, r0
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800dab6:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800dab8:	2000      	movs	r0, #0

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800daba:	e005      	b.n	800dac8 <prvGetNumberOfParameters+0x14>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800dabc:	2901      	cmp	r1, #1
 800dabe:	d002      	beq.n	800dac6 <prvGetNumberOfParameters+0x12>
			{
				cParameters++;
 800dac0:	3001      	adds	r0, #1
 800dac2:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800dac4:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800dac6:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800dac8:	2200      	movs	r2, #0
 800daca:	569a      	ldrsb	r2, [r3, r2]
 800dacc:	2a00      	cmp	r2, #0
 800dace:	d003      	beq.n	800dad8 <prvGetNumberOfParameters+0x24>
		if( ( *pcCommandString ) == ' ' )
 800dad0:	2a20      	cmp	r2, #32
 800dad2:	d0f3      	beq.n	800dabc <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800dad4:	2100      	movs	r1, #0
 800dad6:	e7f6      	b.n	800dac6 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800dad8:	2901      	cmp	r1, #1
 800dada:	d000      	beq.n	800dade <prvGetNumberOfParameters+0x2a>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800dadc:	4770      	bx	lr
		cParameters--;
 800dade:	3801      	subs	r0, #1
 800dae0:	b240      	sxtb	r0, r0
 800dae2:	e7fb      	b.n	800dadc <prvGetNumberOfParameters+0x28>

0800dae4 <FreeRTOS_CLIRegisterCommand>:
{
 800dae4:	b570      	push	{r4, r5, r6, lr}
 800dae6:	0005      	movs	r5, r0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800dae8:	2008      	movs	r0, #8
 800daea:	f001 fda1 	bl	800f630 <pvPortMalloc>
 800daee:	1e04      	subs	r4, r0, #0
	if( pxNewListItem != NULL )
 800daf0:	d00c      	beq.n	800db0c <FreeRTOS_CLIRegisterCommand+0x28>
		taskENTER_CRITICAL();
 800daf2:	f001 fcfb 	bl	800f4ec <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800daf6:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800daf8:	2300      	movs	r3, #0
 800dafa:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800dafc:	4b04      	ldr	r3, [pc, #16]	; (800db10 <FreeRTOS_CLIRegisterCommand+0x2c>)
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800db02:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800db04:	f001 fcfe 	bl	800f504 <vPortExitCritical>
		xReturn = pdPASS;
 800db08:	2001      	movs	r0, #1
}
 800db0a:	bd70      	pop	{r4, r5, r6, pc}
portBASE_TYPE xReturn = pdFAIL;
 800db0c:	2000      	movs	r0, #0
	return xReturn;
 800db0e:	e7fc      	b.n	800db0a <FreeRTOS_CLIRegisterCommand+0x26>
 800db10:	200000b8 	.word	0x200000b8

0800db14 <FreeRTOS_CLIProcessCommand>:
{
 800db14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db16:	b083      	sub	sp, #12
 800db18:	0005      	movs	r5, r0
 800db1a:	9100      	str	r1, [sp, #0]
 800db1c:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
 800db1e:	4b2d      	ldr	r3, [pc, #180]	; (800dbd4 <FreeRTOS_CLIProcessCommand+0xc0>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d016      	beq.n	800db54 <FreeRTOS_CLIProcessCommand+0x40>
portBASE_TYPE xReturn = pdTRUE;
 800db26:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800db28:	4b2a      	ldr	r3, [pc, #168]	; (800dbd4 <FreeRTOS_CLIProcessCommand+0xc0>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d001      	beq.n	800db34 <FreeRTOS_CLIProcessCommand+0x20>
 800db30:	2c00      	cmp	r4, #0
 800db32:	d03e      	beq.n	800dbb2 <FreeRTOS_CLIProcessCommand+0x9e>
	else if( pxCommand != NULL )
 800db34:	2b00      	cmp	r3, #0
 800db36:	d045      	beq.n	800dbc4 <FreeRTOS_CLIProcessCommand+0xb0>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	689b      	ldr	r3, [r3, #8]
 800db3c:	002a      	movs	r2, r5
 800db3e:	9901      	ldr	r1, [sp, #4]
 800db40:	9800      	ldr	r0, [sp, #0]
 800db42:	4798      	blx	r3
 800db44:	1e04      	subs	r4, r0, #0
		if( xReturn == pdFALSE )
 800db46:	d102      	bne.n	800db4e <FreeRTOS_CLIProcessCommand+0x3a>
			pxCommand = NULL;
 800db48:	4b22      	ldr	r3, [pc, #136]	; (800dbd4 <FreeRTOS_CLIProcessCommand+0xc0>)
 800db4a:	2200      	movs	r2, #0
 800db4c:	601a      	str	r2, [r3, #0]
}
 800db4e:	0020      	movs	r0, r4
 800db50:	b003      	add	sp, #12
 800db52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800db54:	4b20      	ldr	r3, [pc, #128]	; (800dbd8 <FreeRTOS_CLIProcessCommand+0xc4>)
 800db56:	4a1f      	ldr	r2, [pc, #124]	; (800dbd4 <FreeRTOS_CLIProcessCommand+0xc0>)
 800db58:	3304      	adds	r3, #4
 800db5a:	6013      	str	r3, [r2, #0]
 800db5c:	e009      	b.n	800db72 <FreeRTOS_CLIProcessCommand+0x5e>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800db5e:	0002      	movs	r2, r0
 800db60:	0021      	movs	r1, r4
 800db62:	0028      	movs	r0, r5
 800db64:	f005 fb66 	bl	8013234 <strncmp>
 800db68:	2800      	cmp	r0, #0
 800db6a:	d011      	beq.n	800db90 <FreeRTOS_CLIProcessCommand+0x7c>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	4b19      	ldr	r3, [pc, #100]	; (800dbd4 <FreeRTOS_CLIProcessCommand+0xc0>)
 800db70:	601a      	str	r2, [r3, #0]
 800db72:	4b18      	ldr	r3, [pc, #96]	; (800dbd4 <FreeRTOS_CLIProcessCommand+0xc0>)
 800db74:	681f      	ldr	r7, [r3, #0]
 800db76:	2f00      	cmp	r7, #0
 800db78:	d019      	beq.n	800dbae <FreeRTOS_CLIProcessCommand+0x9a>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800db7a:	683e      	ldr	r6, [r7, #0]
 800db7c:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800db7e:	0020      	movs	r0, r4
 800db80:	f7f2 faca 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800db84:	562b      	ldrsb	r3, [r5, r0]
 800db86:	2b20      	cmp	r3, #32
 800db88:	d0e9      	beq.n	800db5e <FreeRTOS_CLIProcessCommand+0x4a>
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d1ee      	bne.n	800db6c <FreeRTOS_CLIProcessCommand+0x58>
 800db8e:	e7e6      	b.n	800db5e <FreeRTOS_CLIProcessCommand+0x4a>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800db90:	240c      	movs	r4, #12
 800db92:	5734      	ldrsb	r4, [r6, r4]
 800db94:	2c00      	cmp	r4, #0
 800db96:	da01      	bge.n	800db9c <FreeRTOS_CLIProcessCommand+0x88>
portBASE_TYPE xReturn = pdTRUE;
 800db98:	2401      	movs	r4, #1
 800db9a:	e7c5      	b.n	800db28 <FreeRTOS_CLIProcessCommand+0x14>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800db9c:	0028      	movs	r0, r5
 800db9e:	f7ff ff89 	bl	800dab4 <prvGetNumberOfParameters>
 800dba2:	4284      	cmp	r4, r0
 800dba4:	d001      	beq.n	800dbaa <FreeRTOS_CLIProcessCommand+0x96>
							xReturn = pdFALSE;
 800dba6:	2400      	movs	r4, #0
 800dba8:	e7be      	b.n	800db28 <FreeRTOS_CLIProcessCommand+0x14>
portBASE_TYPE xReturn = pdTRUE;
 800dbaa:	2401      	movs	r4, #1
 800dbac:	e7bc      	b.n	800db28 <FreeRTOS_CLIProcessCommand+0x14>
 800dbae:	2401      	movs	r4, #1
 800dbb0:	e7ba      	b.n	800db28 <FreeRTOS_CLIProcessCommand+0x14>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800dbb2:	9a01      	ldr	r2, [sp, #4]
 800dbb4:	4909      	ldr	r1, [pc, #36]	; (800dbdc <FreeRTOS_CLIProcessCommand+0xc8>)
 800dbb6:	9800      	ldr	r0, [sp, #0]
 800dbb8:	f005 fb4d 	bl	8013256 <strncpy>
		pxCommand = NULL;
 800dbbc:	4b05      	ldr	r3, [pc, #20]	; (800dbd4 <FreeRTOS_CLIProcessCommand+0xc0>)
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	601a      	str	r2, [r3, #0]
 800dbc2:	e7c4      	b.n	800db4e <FreeRTOS_CLIProcessCommand+0x3a>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800dbc4:	9a01      	ldr	r2, [sp, #4]
 800dbc6:	4906      	ldr	r1, [pc, #24]	; (800dbe0 <FreeRTOS_CLIProcessCommand+0xcc>)
 800dbc8:	9800      	ldr	r0, [sp, #0]
 800dbca:	f005 fb44 	bl	8013256 <strncpy>
		xReturn = pdFALSE;
 800dbce:	2400      	movs	r4, #0
	return xReturn;
 800dbd0:	e7bd      	b.n	800db4e <FreeRTOS_CLIProcessCommand+0x3a>
 800dbd2:	46c0      	nop			; (mov r8, r8)
 800dbd4:	20002454 	.word	0x20002454
 800dbd8:	200000b8 	.word	0x200000b8
 800dbdc:	0801a3cc 	.word	0x0801a3cc
 800dbe0:	0801a424 	.word	0x0801a424

0800dbe4 <FreeRTOS_CLIGetOutputBuffer>:
}
 800dbe4:	4800      	ldr	r0, [pc, #0]	; (800dbe8 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800dbe6:	4770      	bx	lr
 800dbe8:	20002464 	.word	0x20002464

0800dbec <FreeRTOS_CLIGetParameter>:
{
 800dbec:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800dbf2:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800dbf4:	e011      	b.n	800dc1a <FreeRTOS_CLIGetParameter+0x2e>
			pcCommandString++;
 800dbf6:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	56c3      	ldrsb	r3, [r0, r3]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d003      	beq.n	800dc08 <FreeRTOS_CLIGetParameter+0x1c>
 800dc00:	2b20      	cmp	r3, #32
 800dc02:	d1f8      	bne.n	800dbf6 <FreeRTOS_CLIGetParameter+0xa>
 800dc04:	e000      	b.n	800dc08 <FreeRTOS_CLIGetParameter+0x1c>
			pcCommandString++;
 800dc06:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800dc08:	2300      	movs	r3, #0
 800dc0a:	56c3      	ldrsb	r3, [r0, r3]
 800dc0c:	2b20      	cmp	r3, #32
 800dc0e:	d0fa      	beq.n	800dc06 <FreeRTOS_CLIGetParameter+0x1a>
		if( *pcCommandString != 0x00 )
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d017      	beq.n	800dc44 <FreeRTOS_CLIGetParameter+0x58>
			uxParametersFound++;
 800dc14:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800dc16:	42a1      	cmp	r1, r4
 800dc18:	d012      	beq.n	800dc40 <FreeRTOS_CLIGetParameter+0x54>
	while( uxParametersFound < uxWantedParameter )
 800dc1a:	428c      	cmp	r4, r1
 800dc1c:	d3ec      	bcc.n	800dbf8 <FreeRTOS_CLIGetParameter+0xc>
const int8_t *pcReturn = NULL;
 800dc1e:	2000      	movs	r0, #0
}
 800dc20:	bd10      	pop	{r4, pc}
					( *pxParameterStringLength )++;
 800dc22:	6813      	ldr	r3, [r2, #0]
 800dc24:	3301      	adds	r3, #1
 800dc26:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800dc28:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	56cb      	ldrsb	r3, [r1, r3]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d001      	beq.n	800dc36 <FreeRTOS_CLIGetParameter+0x4a>
 800dc32:	2b20      	cmp	r3, #32
 800dc34:	d1f5      	bne.n	800dc22 <FreeRTOS_CLIGetParameter+0x36>
				if( *pxParameterStringLength == 0 )
 800dc36:	6813      	ldr	r3, [r2, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d1f1      	bne.n	800dc20 <FreeRTOS_CLIGetParameter+0x34>
					pcReturn = NULL;
 800dc3c:	2000      	movs	r0, #0
	return pcReturn;
 800dc3e:	e7ef      	b.n	800dc20 <FreeRTOS_CLIGetParameter+0x34>
 800dc40:	0001      	movs	r1, r0
 800dc42:	e7f2      	b.n	800dc2a <FreeRTOS_CLIGetParameter+0x3e>
const int8_t *pcReturn = NULL;
 800dc44:	2000      	movs	r0, #0
 800dc46:	e7eb      	b.n	800dc20 <FreeRTOS_CLIGetParameter+0x34>

0800dc48 <prvHelpCommand>:
{
 800dc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	0005      	movs	r5, r0
 800dc4e:	000e      	movs	r6, r1
 800dc50:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800dc52:	2300      	movs	r3, #0
 800dc54:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800dc56:	aa01      	add	r2, sp, #4
 800dc58:	2101      	movs	r1, #1
 800dc5a:	f7ff ffc7 	bl	800dbec <FreeRTOS_CLIGetParameter>
 800dc5e:	1e04      	subs	r4, r0, #0
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800dc60:	d022      	beq.n	800dca8 <prvHelpCommand+0x60>
 800dc62:	2206      	movs	r2, #6
 800dc64:	4930      	ldr	r1, [pc, #192]	; (800dd28 <prvHelpCommand+0xe0>)
 800dc66:	f005 fae5 	bl	8013234 <strncmp>
 800dc6a:	2800      	cmp	r0, #0
 800dc6c:	d11c      	bne.n	800dca8 <prvHelpCommand+0x60>
		if( str == NumOfParamsHelpStrings )
 800dc6e:	4b2f      	ldr	r3, [pc, #188]	; (800dd2c <prvHelpCommand+0xe4>)
 800dc70:	791b      	ldrb	r3, [r3, #4]
 800dc72:	2b07      	cmp	r3, #7
 800dc74:	d00f      	beq.n	800dc96 <prvHelpCommand+0x4e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800dc76:	4a2d      	ldr	r2, [pc, #180]	; (800dd2c <prvHelpCommand+0xe4>)
 800dc78:	7913      	ldrb	r3, [r2, #4]
 800dc7a:	1c5c      	adds	r4, r3, #1
 800dc7c:	b2e4      	uxtb	r4, r4
 800dc7e:	7114      	strb	r4, [r2, #4]
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	4a2b      	ldr	r2, [pc, #172]	; (800dd30 <prvHelpCommand+0xe8>)
 800dc84:	5899      	ldr	r1, [r3, r2]
 800dc86:	0032      	movs	r2, r6
 800dc88:	0028      	movs	r0, r5
 800dc8a:	f005 fae4 	bl	8013256 <strncpy>
		if( str == NumOfParamsHelpStrings )
 800dc8e:	2c07      	cmp	r4, #7
 800dc90:	d005      	beq.n	800dc9e <prvHelpCommand+0x56>
			xReturn = pdTRUE;
 800dc92:	2701      	movs	r7, #1
 800dc94:	e00a      	b.n	800dcac <prvHelpCommand+0x64>
			str = 0;
 800dc96:	4b25      	ldr	r3, [pc, #148]	; (800dd2c <prvHelpCommand+0xe4>)
 800dc98:	2200      	movs	r2, #0
 800dc9a:	711a      	strb	r2, [r3, #4]
 800dc9c:	e7eb      	b.n	800dc76 <prvHelpCommand+0x2e>
			xReturn = pdFALSE; str = 0;
 800dc9e:	4b23      	ldr	r3, [pc, #140]	; (800dd2c <prvHelpCommand+0xe4>)
 800dca0:	2200      	movs	r2, #0
 800dca2:	711a      	strb	r2, [r3, #4]
 800dca4:	2700      	movs	r7, #0
 800dca6:	e001      	b.n	800dcac <prvHelpCommand+0x64>
	else if (pcParameterString1 == NULL)
 800dca8:	2c00      	cmp	r4, #0
 800dcaa:	d002      	beq.n	800dcb2 <prvHelpCommand+0x6a>
}
 800dcac:	0038      	movs	r0, r7
 800dcae:	b003      	add	sp, #12
 800dcb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800dcb2:	4b1e      	ldr	r3, [pc, #120]	; (800dd2c <prvHelpCommand+0xe4>)
 800dcb4:	689b      	ldr	r3, [r3, #8]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d024      	beq.n	800dd04 <prvHelpCommand+0xbc>
		if (counter > numOfBosCommands) {
 800dcba:	4b1c      	ldr	r3, [pc, #112]	; (800dd2c <prvHelpCommand+0xe4>)
 800dcbc:	7b1a      	ldrb	r2, [r3, #12]
 800dcbe:	4b1d      	ldr	r3, [pc, #116]	; (800dd34 <prvHelpCommand+0xec>)
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d925      	bls.n	800dd12 <prvHelpCommand+0xca>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800dcc6:	4b19      	ldr	r3, [pc, #100]	; (800dd2c <prvHelpCommand+0xe4>)
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	6859      	ldr	r1, [r3, #4]
 800dcce:	0032      	movs	r2, r6
 800dcd0:	3a08      	subs	r2, #8
 800dcd2:	0028      	movs	r0, r5
 800dcd4:	3008      	adds	r0, #8
 800dcd6:	f005 fabe 	bl	8013256 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800dcda:	1c68      	adds	r0, r5, #1
 800dcdc:	4916      	ldr	r1, [pc, #88]	; (800dd38 <prvHelpCommand+0xf0>)
 800dcde:	f005 faa1 	bl	8013224 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800dce2:	2328      	movs	r3, #40	; 0x28
 800dce4:	702b      	strb	r3, [r5, #0]
 800dce6:	3301      	adds	r3, #1
 800dce8:	71ab      	strb	r3, [r5, #6]
 800dcea:	3b09      	subs	r3, #9
 800dcec:	71eb      	strb	r3, [r5, #7]
		pxCommand = pxCommand->pxNext;
 800dcee:	4b0f      	ldr	r3, [pc, #60]	; (800dd2c <prvHelpCommand+0xe4>)
 800dcf0:	689a      	ldr	r2, [r3, #8]
 800dcf2:	6851      	ldr	r1, [r2, #4]
 800dcf4:	6099      	str	r1, [r3, #8]
		counter++;
 800dcf6:	7b1a      	ldrb	r2, [r3, #12]
 800dcf8:	3201      	adds	r2, #1
 800dcfa:	731a      	strb	r2, [r3, #12]
		if( pxCommand == NULL )
 800dcfc:	2900      	cmp	r1, #0
 800dcfe:	d011      	beq.n	800dd24 <prvHelpCommand+0xdc>
			xReturn = pdTRUE;
 800dd00:	2701      	movs	r7, #1
	return xReturn;
 800dd02:	e7d3      	b.n	800dcac <prvHelpCommand+0x64>
			pxCommand = &xRegisteredCommands;
 800dd04:	4a09      	ldr	r2, [pc, #36]	; (800dd2c <prvHelpCommand+0xe4>)
 800dd06:	4b0d      	ldr	r3, [pc, #52]	; (800dd3c <prvHelpCommand+0xf4>)
 800dd08:	3304      	adds	r3, #4
 800dd0a:	6093      	str	r3, [r2, #8]
			counter = 1;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	7313      	strb	r3, [r2, #12]
 800dd10:	e7d3      	b.n	800dcba <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800dd12:	4b06      	ldr	r3, [pc, #24]	; (800dd2c <prvHelpCommand+0xe4>)
 800dd14:	689b      	ldr	r3, [r3, #8]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	6859      	ldr	r1, [r3, #4]
 800dd1a:	0032      	movs	r2, r6
 800dd1c:	0028      	movs	r0, r5
 800dd1e:	f005 fa9a 	bl	8013256 <strncpy>
 800dd22:	e7e4      	b.n	800dcee <prvHelpCommand+0xa6>
			xReturn = pdFALSE;
 800dd24:	2700      	movs	r7, #0
 800dd26:	e7c1      	b.n	800dcac <prvHelpCommand+0x64>
 800dd28:	08018f60 	.word	0x08018f60
 800dd2c:	20002454 	.word	0x20002454
 800dd30:	20000034 	.word	0x20000034
 800dd34:	200067c4 	.word	0x200067c4
 800dd38:	080176ba 	.word	0x080176ba
 800dd3c:	200000b8 	.word	0x200000b8

0800dd40 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd40:	0003      	movs	r3, r0
 800dd42:	3308      	adds	r3, #8
 800dd44:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dd46:	2201      	movs	r2, #1
 800dd48:	4252      	negs	r2, r2
 800dd4a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd4c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd4e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dd50:	2300      	movs	r3, #0
 800dd52:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dd54:	4770      	bx	lr

0800dd56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800dd56:	2300      	movs	r3, #0
 800dd58:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dd5a:	4770      	bx	lr

0800dd5c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800dd5c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dd5e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dd60:	689a      	ldr	r2, [r3, #8]
 800dd62:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dd64:	689a      	ldr	r2, [r3, #8]
 800dd66:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dd68:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800dd6a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800dd6c:	6803      	ldr	r3, [r0, #0]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	6003      	str	r3, [r0, #0]
}
 800dd72:	4770      	bx	lr

0800dd74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd74:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dd76:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dd78:	1c63      	adds	r3, r4, #1
 800dd7a:	d002      	beq.n	800dd82 <vListInsert+0xe>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd7c:	0002      	movs	r2, r0
 800dd7e:	3208      	adds	r2, #8
 800dd80:	e002      	b.n	800dd88 <vListInsert+0x14>
		pxIterator = pxList->xListEnd.pxPrevious;
 800dd82:	6902      	ldr	r2, [r0, #16]
 800dd84:	e004      	b.n	800dd90 <vListInsert+0x1c>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd86:	001a      	movs	r2, r3
 800dd88:	6853      	ldr	r3, [r2, #4]
 800dd8a:	681d      	ldr	r5, [r3, #0]
 800dd8c:	42a5      	cmp	r5, r4
 800dd8e:	d9fa      	bls.n	800dd86 <vListInsert+0x12>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dd90:	6853      	ldr	r3, [r2, #4]
 800dd92:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dd94:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dd96:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800dd98:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800dd9a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800dd9c:	6803      	ldr	r3, [r0, #0]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	6003      	str	r3, [r0, #0]
}
 800dda2:	bd30      	pop	{r4, r5, pc}

0800dda4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800dda4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dda6:	6842      	ldr	r2, [r0, #4]
 800dda8:	6881      	ldr	r1, [r0, #8]
 800ddaa:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ddac:	6882      	ldr	r2, [r0, #8]
 800ddae:	6841      	ldr	r1, [r0, #4]
 800ddb0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ddb2:	685a      	ldr	r2, [r3, #4]
 800ddb4:	4282      	cmp	r2, r0
 800ddb6:	d005      	beq.n	800ddc4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ddb8:	2200      	movs	r2, #0
 800ddba:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	1e50      	subs	r0, r2, #1
 800ddc0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800ddc2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ddc4:	6882      	ldr	r2, [r0, #8]
 800ddc6:	605a      	str	r2, [r3, #4]
 800ddc8:	e7f6      	b.n	800ddb8 <uxListRemove+0x14>

0800ddca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ddca:	b510      	push	{r4, lr}
 800ddcc:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ddce:	f001 fb8d 	bl	800f4ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ddd2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ddd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d004      	beq.n	800dde4 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800ddda:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800dddc:	f001 fb92 	bl	800f504 <vPortExitCritical>

	return xReturn;
}
 800dde0:	0020      	movs	r0, r4
 800dde2:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800dde4:	2401      	movs	r4, #1
 800dde6:	e7f9      	b.n	800dddc <prvIsQueueFull+0x12>

0800dde8 <prvIsQueueEmpty>:
{
 800dde8:	b510      	push	{r4, lr}
 800ddea:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800ddec:	f001 fb7e 	bl	800f4ec <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ddf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d004      	beq.n	800de00 <prvIsQueueEmpty+0x18>
			xReturn = pdFALSE;
 800ddf6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ddf8:	f001 fb84 	bl	800f504 <vPortExitCritical>
}
 800ddfc:	0020      	movs	r0, r4
 800ddfe:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800de00:	2401      	movs	r4, #1
 800de02:	e7f9      	b.n	800ddf8 <prvIsQueueEmpty+0x10>

0800de04 <prvCopyDataToQueue>:
{
 800de04:	b570      	push	{r4, r5, r6, lr}
 800de06:	0004      	movs	r4, r0
 800de08:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800de0a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800de0c:	2a00      	cmp	r2, #0
 800de0e:	d10d      	bne.n	800de2c <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de10:	6803      	ldr	r3, [r0, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d004      	beq.n	800de20 <prvCopyDataToQueue+0x1c>
BaseType_t xReturn = pdFALSE;
 800de16:	2000      	movs	r0, #0
	++( pxQueue->uxMessagesWaiting );
 800de18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de1a:	3301      	adds	r3, #1
 800de1c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800de1e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800de20:	6840      	ldr	r0, [r0, #4]
 800de22:	f000 ffb3 	bl	800ed8c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800de26:	2300      	movs	r3, #0
 800de28:	6063      	str	r3, [r4, #4]
 800de2a:	e7f5      	b.n	800de18 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800de2c:	2d00      	cmp	r5, #0
 800de2e:	d10e      	bne.n	800de4e <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800de30:	6880      	ldr	r0, [r0, #8]
 800de32:	f004 ffb8 	bl	8012da6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800de36:	68a3      	ldr	r3, [r4, #8]
 800de38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800de3a:	4694      	mov	ip, r2
 800de3c:	4463      	add	r3, ip
 800de3e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de40:	6862      	ldr	r2, [r4, #4]
 800de42:	4293      	cmp	r3, r2
 800de44:	d31e      	bcc.n	800de84 <prvCopyDataToQueue+0x80>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800de46:	6823      	ldr	r3, [r4, #0]
 800de48:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800de4a:	2000      	movs	r0, #0
 800de4c:	e7e4      	b.n	800de18 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de4e:	68c0      	ldr	r0, [r0, #12]
 800de50:	f004 ffa9 	bl	8012da6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800de54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de56:	425a      	negs	r2, r3
 800de58:	68e3      	ldr	r3, [r4, #12]
 800de5a:	189b      	adds	r3, r3, r2
 800de5c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de5e:	6821      	ldr	r1, [r4, #0]
 800de60:	428b      	cmp	r3, r1
 800de62:	d203      	bcs.n	800de6c <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800de64:	6863      	ldr	r3, [r4, #4]
 800de66:	469c      	mov	ip, r3
 800de68:	4462      	add	r2, ip
 800de6a:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800de6c:	2d02      	cmp	r5, #2
 800de6e:	d001      	beq.n	800de74 <prvCopyDataToQueue+0x70>
BaseType_t xReturn = pdFALSE;
 800de70:	2000      	movs	r0, #0
 800de72:	e7d1      	b.n	800de18 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de76:	2b00      	cmp	r3, #0
 800de78:	d006      	beq.n	800de88 <prvCopyDataToQueue+0x84>
				--( pxQueue->uxMessagesWaiting );
 800de7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de7c:	3b01      	subs	r3, #1
 800de7e:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
 800de80:	2000      	movs	r0, #0
 800de82:	e7c9      	b.n	800de18 <prvCopyDataToQueue+0x14>
 800de84:	2000      	movs	r0, #0
 800de86:	e7c7      	b.n	800de18 <prvCopyDataToQueue+0x14>
 800de88:	2000      	movs	r0, #0
 800de8a:	e7c5      	b.n	800de18 <prvCopyDataToQueue+0x14>

0800de8c <prvCopyDataFromQueue>:
{
 800de8c:	b510      	push	{r4, lr}
 800de8e:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800de90:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800de92:	2a00      	cmp	r2, #0
 800de94:	d00b      	beq.n	800deae <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800de96:	68c3      	ldr	r3, [r0, #12]
 800de98:	189b      	adds	r3, r3, r2
 800de9a:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800de9c:	6841      	ldr	r1, [r0, #4]
 800de9e:	428b      	cmp	r3, r1
 800dea0:	d301      	bcc.n	800dea6 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800dea2:	6803      	ldr	r3, [r0, #0]
 800dea4:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800dea6:	68c1      	ldr	r1, [r0, #12]
 800dea8:	0020      	movs	r0, r4
 800deaa:	f004 ff7c 	bl	8012da6 <memcpy>
}
 800deae:	bd10      	pop	{r4, pc}

0800deb0 <prvUnlockQueue>:
{
 800deb0:	b510      	push	{r4, lr}
 800deb2:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800deb4:	f001 fb1a 	bl	800f4ec <vPortEnterCritical>
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800deb8:	e004      	b.n	800dec4 <prvUnlockQueue+0x14>
						vTaskMissedYield();
 800deba:	f000 ff11 	bl	800ece0 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800debe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dec0:	3b01      	subs	r3, #1
 800dec2:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dec4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	dd09      	ble.n	800dede <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800deca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800decc:	2b00      	cmp	r3, #0
 800dece:	d006      	beq.n	800dede <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ded0:	0020      	movs	r0, r4
 800ded2:	3024      	adds	r0, #36	; 0x24
 800ded4:	f000 fe94 	bl	800ec00 <xTaskRemoveFromEventList>
 800ded8:	2800      	cmp	r0, #0
 800deda:	d0f0      	beq.n	800debe <prvUnlockQueue+0xe>
 800dedc:	e7ed      	b.n	800deba <prvUnlockQueue+0xa>
		pxQueue->xTxLock = queueUNLOCKED;
 800dede:	2301      	movs	r3, #1
 800dee0:	425b      	negs	r3, r3
 800dee2:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
 800dee4:	f001 fb0e 	bl	800f504 <vPortExitCritical>
	taskENTER_CRITICAL();
 800dee8:	f001 fb00 	bl	800f4ec <vPortEnterCritical>
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800deec:	e004      	b.n	800def8 <prvUnlockQueue+0x48>
					vTaskMissedYield();
 800deee:	f000 fef7 	bl	800ece0 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800def2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800def4:	3b01      	subs	r3, #1
 800def6:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800def8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800defa:	2b00      	cmp	r3, #0
 800defc:	dd09      	ble.n	800df12 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800defe:	6923      	ldr	r3, [r4, #16]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d006      	beq.n	800df12 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df04:	0020      	movs	r0, r4
 800df06:	3010      	adds	r0, #16
 800df08:	f000 fe7a 	bl	800ec00 <xTaskRemoveFromEventList>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	d0f0      	beq.n	800def2 <prvUnlockQueue+0x42>
 800df10:	e7ed      	b.n	800deee <prvUnlockQueue+0x3e>
		pxQueue->xRxLock = queueUNLOCKED;
 800df12:	2301      	movs	r3, #1
 800df14:	425b      	negs	r3, r3
 800df16:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800df18:	f001 faf4 	bl	800f504 <vPortExitCritical>
}
 800df1c:	bd10      	pop	{r4, pc}

0800df1e <xQueueGenericReset>:
{
 800df1e:	b570      	push	{r4, r5, r6, lr}
 800df20:	0004      	movs	r4, r0
 800df22:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800df24:	f001 fae2 	bl	800f4ec <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800df28:	6822      	ldr	r2, [r4, #0]
 800df2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800df2c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800df2e:	0001      	movs	r1, r0
 800df30:	4359      	muls	r1, r3
 800df32:	1851      	adds	r1, r2, r1
 800df34:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800df36:	2100      	movs	r1, #0
 800df38:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800df3a:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800df3c:	3b01      	subs	r3, #1
 800df3e:	4343      	muls	r3, r0
 800df40:	18d3      	adds	r3, r2, r3
 800df42:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800df44:	2301      	movs	r3, #1
 800df46:	425b      	negs	r3, r3
 800df48:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800df4a:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800df4c:	2d00      	cmp	r5, #0
 800df4e:	d10f      	bne.n	800df70 <xQueueGenericReset+0x52>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df50:	6923      	ldr	r3, [r4, #16]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d103      	bne.n	800df5e <xQueueGenericReset+0x40>
	taskEXIT_CRITICAL();
 800df56:	f001 fad5 	bl	800f504 <vPortExitCritical>
}
 800df5a:	2001      	movs	r0, #1
 800df5c:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800df5e:	0020      	movs	r0, r4
 800df60:	3010      	adds	r0, #16
 800df62:	f000 fe4d 	bl	800ec00 <xTaskRemoveFromEventList>
 800df66:	2801      	cmp	r0, #1
 800df68:	d1f5      	bne.n	800df56 <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 800df6a:	f001 fab3 	bl	800f4d4 <vPortYield>
 800df6e:	e7f2      	b.n	800df56 <xQueueGenericReset+0x38>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800df70:	0020      	movs	r0, r4
 800df72:	3010      	adds	r0, #16
 800df74:	f7ff fee4 	bl	800dd40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800df78:	0020      	movs	r0, r4
 800df7a:	3024      	adds	r0, #36	; 0x24
 800df7c:	f7ff fee0 	bl	800dd40 <vListInitialise>
 800df80:	e7e9      	b.n	800df56 <xQueueGenericReset+0x38>

0800df82 <xQueueGenericCreate>:
{
 800df82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df84:	0006      	movs	r6, r0
 800df86:	000d      	movs	r5, r1
 800df88:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800df8a:	2900      	cmp	r1, #0
 800df8c:	d013      	beq.n	800dfb6 <xQueueGenericCreate+0x34>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df8e:	4348      	muls	r0, r1
 800df90:	3001      	adds	r0, #1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800df92:	3054      	adds	r0, #84	; 0x54
 800df94:	f001 fb4c 	bl	800f630 <pvPortMalloc>
 800df98:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800df9a:	d012      	beq.n	800dfc2 <xQueueGenericCreate+0x40>
		if( uxItemSize == ( UBaseType_t ) 0 )
 800df9c:	2d00      	cmp	r5, #0
 800df9e:	d10c      	bne.n	800dfba <xQueueGenericCreate+0x38>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dfa0:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800dfa2:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800dfa4:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dfa6:	2101      	movs	r1, #1
 800dfa8:	0020      	movs	r0, r4
 800dfaa:	f7ff ffb8 	bl	800df1e <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800dfae:	2350      	movs	r3, #80	; 0x50
 800dfb0:	54e7      	strb	r7, [r4, r3]
}
 800dfb2:	0020      	movs	r0, r4
 800dfb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xQueueSizeInBytes = ( size_t ) 0;
 800dfb6:	2000      	movs	r0, #0
 800dfb8:	e7eb      	b.n	800df92 <xQueueGenericCreate+0x10>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800dfba:	0003      	movs	r3, r0
 800dfbc:	3354      	adds	r3, #84	; 0x54
 800dfbe:	6003      	str	r3, [r0, #0]
 800dfc0:	e7ef      	b.n	800dfa2 <xQueueGenericCreate+0x20>
QueueHandle_t xReturn = NULL;
 800dfc2:	2400      	movs	r4, #0
	return xReturn;
 800dfc4:	e7f5      	b.n	800dfb2 <xQueueGenericCreate+0x30>

0800dfc6 <xQueueCreateCountingSemaphore>:
	{
 800dfc6:	b510      	push	{r4, lr}
 800dfc8:	000c      	movs	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dfca:	2202      	movs	r2, #2
 800dfcc:	2100      	movs	r1, #0
 800dfce:	f7ff ffd8 	bl	800df82 <xQueueGenericCreate>
		if( xHandle != NULL )
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	d000      	beq.n	800dfd8 <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dfd6:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800dfd8:	bd10      	pop	{r4, pc}

0800dfda <xQueueGenericSend>:
{
 800dfda:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfdc:	b085      	sub	sp, #20
 800dfde:	0004      	movs	r4, r0
 800dfe0:	000d      	movs	r5, r1
 800dfe2:	9201      	str	r2, [sp, #4]
 800dfe4:	001f      	movs	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dfe6:	2600      	movs	r6, #0
 800dfe8:	e02e      	b.n	800e048 <xQueueGenericSend+0x6e>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dfea:	003a      	movs	r2, r7
 800dfec:	0029      	movs	r1, r5
 800dfee:	0020      	movs	r0, r4
 800dff0:	f7ff ff08 	bl	800de04 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dff4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d106      	bne.n	800e008 <xQueueGenericSend+0x2e>
					else if( xYieldRequired != pdFALSE )
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d10d      	bne.n	800e01a <xQueueGenericSend+0x40>
				taskEXIT_CRITICAL();
 800dffe:	f001 fa81 	bl	800f504 <vPortExitCritical>
				return pdPASS;
 800e002:	2001      	movs	r0, #1
}
 800e004:	b005      	add	sp, #20
 800e006:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800e008:	0020      	movs	r0, r4
 800e00a:	3024      	adds	r0, #36	; 0x24
 800e00c:	f000 fdf8 	bl	800ec00 <xTaskRemoveFromEventList>
 800e010:	2801      	cmp	r0, #1
 800e012:	d1f4      	bne.n	800dffe <xQueueGenericSend+0x24>
							queueYIELD_IF_USING_PREEMPTION();
 800e014:	f001 fa5e 	bl	800f4d4 <vPortYield>
 800e018:	e7f1      	b.n	800dffe <xQueueGenericSend+0x24>
						queueYIELD_IF_USING_PREEMPTION();
 800e01a:	f001 fa5b 	bl	800f4d4 <vPortYield>
 800e01e:	e7ee      	b.n	800dffe <xQueueGenericSend+0x24>
					taskEXIT_CRITICAL();
 800e020:	f001 fa70 	bl	800f504 <vPortExitCritical>
					return errQUEUE_FULL;
 800e024:	2000      	movs	r0, #0
 800e026:	e7ed      	b.n	800e004 <xQueueGenericSend+0x2a>
					vTaskSetTimeOutState( &xTimeOut );
 800e028:	a802      	add	r0, sp, #8
 800e02a:	f000 fe21 	bl	800ec70 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e02e:	3601      	adds	r6, #1
 800e030:	e017      	b.n	800e062 <xQueueGenericSend+0x88>
		prvLockQueue( pxQueue );
 800e032:	2300      	movs	r3, #0
 800e034:	6463      	str	r3, [r4, #68]	; 0x44
 800e036:	e01d      	b.n	800e074 <xQueueGenericSend+0x9a>
 800e038:	2300      	movs	r3, #0
 800e03a:	64a3      	str	r3, [r4, #72]	; 0x48
 800e03c:	e01d      	b.n	800e07a <xQueueGenericSend+0xa0>
				prvUnlockQueue( pxQueue );
 800e03e:	0020      	movs	r0, r4
 800e040:	f7ff ff36 	bl	800deb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e044:	f000 fc4c 	bl	800e8e0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800e048:	f001 fa50 	bl	800f4ec <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e04c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e04e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e050:	4293      	cmp	r3, r2
 800e052:	d3ca      	bcc.n	800dfea <xQueueGenericSend+0x10>
 800e054:	2f02      	cmp	r7, #2
 800e056:	d0c8      	beq.n	800dfea <xQueueGenericSend+0x10>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e058:	9b01      	ldr	r3, [sp, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d0e0      	beq.n	800e020 <xQueueGenericSend+0x46>
				else if( xEntryTimeSet == pdFALSE )
 800e05e:	2e00      	cmp	r6, #0
 800e060:	d0e2      	beq.n	800e028 <xQueueGenericSend+0x4e>
		taskEXIT_CRITICAL();
 800e062:	f001 fa4f 	bl	800f504 <vPortExitCritical>
		vTaskSuspendAll();
 800e066:	f000 fbb3 	bl	800e7d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e06a:	f001 fa3f 	bl	800f4ec <vPortEnterCritical>
 800e06e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e070:	3301      	adds	r3, #1
 800e072:	d0de      	beq.n	800e032 <xQueueGenericSend+0x58>
 800e074:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e076:	3301      	adds	r3, #1
 800e078:	d0de      	beq.n	800e038 <xQueueGenericSend+0x5e>
 800e07a:	f001 fa43 	bl	800f504 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e07e:	a901      	add	r1, sp, #4
 800e080:	a802      	add	r0, sp, #8
 800e082:	f000 fe01 	bl	800ec88 <xTaskCheckForTimeOut>
 800e086:	2800      	cmp	r0, #0
 800e088:	d113      	bne.n	800e0b2 <xQueueGenericSend+0xd8>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e08a:	0020      	movs	r0, r4
 800e08c:	f7ff fe9d 	bl	800ddca <prvIsQueueFull>
 800e090:	2800      	cmp	r0, #0
 800e092:	d0d4      	beq.n	800e03e <xQueueGenericSend+0x64>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e094:	0020      	movs	r0, r4
 800e096:	3010      	adds	r0, #16
 800e098:	9901      	ldr	r1, [sp, #4]
 800e09a:	f000 fd83 	bl	800eba4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e09e:	0020      	movs	r0, r4
 800e0a0:	f7ff ff06 	bl	800deb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e0a4:	f000 fc1c 	bl	800e8e0 <xTaskResumeAll>
 800e0a8:	2800      	cmp	r0, #0
 800e0aa:	d1cd      	bne.n	800e048 <xQueueGenericSend+0x6e>
					portYIELD_WITHIN_API();
 800e0ac:	f001 fa12 	bl	800f4d4 <vPortYield>
 800e0b0:	e7ca      	b.n	800e048 <xQueueGenericSend+0x6e>
			prvUnlockQueue( pxQueue );
 800e0b2:	0020      	movs	r0, r4
 800e0b4:	f7ff fefc 	bl	800deb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e0b8:	f000 fc12 	bl	800e8e0 <xTaskResumeAll>
			return errQUEUE_FULL;
 800e0bc:	2000      	movs	r0, #0
 800e0be:	e7a1      	b.n	800e004 <xQueueGenericSend+0x2a>

0800e0c0 <xQueueGenericSendFromISR>:
{
 800e0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	0006      	movs	r6, r0
 800e0c6:	9101      	str	r1, [sp, #4]
 800e0c8:	0017      	movs	r7, r2
 800e0ca:	001c      	movs	r4, r3
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e0cc:	f001 fa24 	bl	800f518 <ulSetInterruptMaskFromISR>
 800e0d0:	0005      	movs	r5, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e0d2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800e0d4:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	d308      	bcc.n	800e0ec <xQueueGenericSendFromISR+0x2c>
 800e0da:	2c02      	cmp	r4, #2
 800e0dc:	d006      	beq.n	800e0ec <xQueueGenericSendFromISR+0x2c>
			xReturn = errQUEUE_FULL;
 800e0de:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e0e0:	0028      	movs	r0, r5
 800e0e2:	f001 fa1e 	bl	800f522 <vClearInterruptMaskFromISR>
}
 800e0e6:	0020      	movs	r0, r4
 800e0e8:	b003      	add	sp, #12
 800e0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e0ec:	0022      	movs	r2, r4
 800e0ee:	9901      	ldr	r1, [sp, #4]
 800e0f0:	0030      	movs	r0, r6
 800e0f2:	f7ff fe87 	bl	800de04 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e0f6:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	d004      	beq.n	800e106 <xQueueGenericSendFromISR+0x46>
				++( pxQueue->xTxLock );
 800e0fc:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800e0fe:	3301      	adds	r3, #1
 800e100:	64b3      	str	r3, [r6, #72]	; 0x48
			xReturn = pdPASS;
 800e102:	2401      	movs	r4, #1
 800e104:	e7ec      	b.n	800e0e0 <xQueueGenericSendFromISR+0x20>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e106:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d101      	bne.n	800e110 <xQueueGenericSendFromISR+0x50>
			xReturn = pdPASS;
 800e10c:	2401      	movs	r4, #1
 800e10e:	e7e7      	b.n	800e0e0 <xQueueGenericSendFromISR+0x20>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e110:	0030      	movs	r0, r6
 800e112:	3024      	adds	r0, #36	; 0x24
 800e114:	f000 fd74 	bl	800ec00 <xTaskRemoveFromEventList>
 800e118:	2800      	cmp	r0, #0
 800e11a:	d005      	beq.n	800e128 <xQueueGenericSendFromISR+0x68>
							if( pxHigherPriorityTaskWoken != NULL )
 800e11c:	2f00      	cmp	r7, #0
 800e11e:	d005      	beq.n	800e12c <xQueueGenericSendFromISR+0x6c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e120:	2301      	movs	r3, #1
 800e122:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800e124:	2401      	movs	r4, #1
 800e126:	e7db      	b.n	800e0e0 <xQueueGenericSendFromISR+0x20>
 800e128:	2401      	movs	r4, #1
 800e12a:	e7d9      	b.n	800e0e0 <xQueueGenericSendFromISR+0x20>
 800e12c:	2401      	movs	r4, #1
 800e12e:	e7d7      	b.n	800e0e0 <xQueueGenericSendFromISR+0x20>

0800e130 <xQueueGiveFromISR>:
{
 800e130:	b570      	push	{r4, r5, r6, lr}
 800e132:	0004      	movs	r4, r0
 800e134:	000e      	movs	r6, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e136:	f001 f9ef 	bl	800f518 <ulSetInterruptMaskFromISR>
 800e13a:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e13c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e13e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e140:	4293      	cmp	r3, r2
 800e142:	d21b      	bcs.n	800e17c <xQueueGiveFromISR+0x4c>
			++( pxQueue->uxMessagesWaiting );
 800e144:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e146:	3301      	adds	r3, #1
 800e148:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e14a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e14c:	3301      	adds	r3, #1
 800e14e:	d004      	beq.n	800e15a <xQueueGiveFromISR+0x2a>
				++( pxQueue->xTxLock );
 800e150:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e152:	3301      	adds	r3, #1
 800e154:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e156:	2401      	movs	r4, #1
 800e158:	e011      	b.n	800e17e <xQueueGiveFromISR+0x4e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d101      	bne.n	800e164 <xQueueGiveFromISR+0x34>
			xReturn = pdPASS;
 800e160:	2401      	movs	r4, #1
 800e162:	e00c      	b.n	800e17e <xQueueGiveFromISR+0x4e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e164:	0020      	movs	r0, r4
 800e166:	3024      	adds	r0, #36	; 0x24
 800e168:	f000 fd4a 	bl	800ec00 <xTaskRemoveFromEventList>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d00b      	beq.n	800e188 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 800e170:	2e00      	cmp	r6, #0
 800e172:	d00b      	beq.n	800e18c <xQueueGiveFromISR+0x5c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e174:	2301      	movs	r3, #1
 800e176:	6033      	str	r3, [r6, #0]
			xReturn = pdPASS;
 800e178:	2401      	movs	r4, #1
 800e17a:	e000      	b.n	800e17e <xQueueGiveFromISR+0x4e>
			xReturn = errQUEUE_FULL;
 800e17c:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e17e:	0028      	movs	r0, r5
 800e180:	f001 f9cf 	bl	800f522 <vClearInterruptMaskFromISR>
}
 800e184:	0020      	movs	r0, r4
 800e186:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800e188:	2401      	movs	r4, #1
 800e18a:	e7f8      	b.n	800e17e <xQueueGiveFromISR+0x4e>
 800e18c:	2401      	movs	r4, #1
 800e18e:	e7f6      	b.n	800e17e <xQueueGiveFromISR+0x4e>

0800e190 <xQueueGenericReceive>:
{
 800e190:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e192:	b085      	sub	sp, #20
 800e194:	0004      	movs	r4, r0
 800e196:	000e      	movs	r6, r1
 800e198:	9201      	str	r2, [sp, #4]
 800e19a:	001d      	movs	r5, r3
BaseType_t xEntryTimeSet = pdFALSE;
 800e19c:	2700      	movs	r7, #0
 800e19e:	e04a      	b.n	800e236 <xQueueGenericReceive+0xa6>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800e1a0:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e1a2:	0031      	movs	r1, r6
 800e1a4:	0020      	movs	r0, r4
 800e1a6:	f7ff fe71 	bl	800de8c <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800e1aa:	2d00      	cmp	r5, #0
 800e1ac:	d11a      	bne.n	800e1e4 <xQueueGenericReceive+0x54>
					--( pxQueue->uxMessagesWaiting );
 800e1ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e1b0:	3b01      	subs	r3, #1
 800e1b2:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e1b4:	6823      	ldr	r3, [r4, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d007      	beq.n	800e1ca <xQueueGenericReceive+0x3a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1ba:	6923      	ldr	r3, [r4, #16]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d108      	bne.n	800e1d2 <xQueueGenericReceive+0x42>
				taskEXIT_CRITICAL();
 800e1c0:	f001 f9a0 	bl	800f504 <vPortExitCritical>
				return pdPASS;
 800e1c4:	2001      	movs	r0, #1
}
 800e1c6:	b005      	add	sp, #20
 800e1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e1ca:	f000 febf 	bl	800ef4c <pvTaskIncrementMutexHeldCount>
 800e1ce:	6060      	str	r0, [r4, #4]
 800e1d0:	e7f3      	b.n	800e1ba <xQueueGenericReceive+0x2a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e1d2:	0020      	movs	r0, r4
 800e1d4:	3010      	adds	r0, #16
 800e1d6:	f000 fd13 	bl	800ec00 <xTaskRemoveFromEventList>
 800e1da:	2801      	cmp	r0, #1
 800e1dc:	d1f0      	bne.n	800e1c0 <xQueueGenericReceive+0x30>
							queueYIELD_IF_USING_PREEMPTION();
 800e1de:	f001 f979 	bl	800f4d4 <vPortYield>
 800e1e2:	e7ed      	b.n	800e1c0 <xQueueGenericReceive+0x30>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800e1e4:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e1e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d0e9      	beq.n	800e1c0 <xQueueGenericReceive+0x30>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e1ec:	0020      	movs	r0, r4
 800e1ee:	3024      	adds	r0, #36	; 0x24
 800e1f0:	f000 fd06 	bl	800ec00 <xTaskRemoveFromEventList>
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	d0e3      	beq.n	800e1c0 <xQueueGenericReceive+0x30>
							queueYIELD_IF_USING_PREEMPTION();
 800e1f8:	f001 f96c 	bl	800f4d4 <vPortYield>
 800e1fc:	e7e0      	b.n	800e1c0 <xQueueGenericReceive+0x30>
					taskEXIT_CRITICAL();
 800e1fe:	f001 f981 	bl	800f504 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e202:	2000      	movs	r0, #0
 800e204:	e7df      	b.n	800e1c6 <xQueueGenericReceive+0x36>
					vTaskSetTimeOutState( &xTimeOut );
 800e206:	a802      	add	r0, sp, #8
 800e208:	f000 fd32 	bl	800ec70 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e20c:	3701      	adds	r7, #1
 800e20e:	e01c      	b.n	800e24a <xQueueGenericReceive+0xba>
		prvLockQueue( pxQueue );
 800e210:	2300      	movs	r3, #0
 800e212:	6463      	str	r3, [r4, #68]	; 0x44
 800e214:	e022      	b.n	800e25c <xQueueGenericReceive+0xcc>
 800e216:	2300      	movs	r3, #0
 800e218:	64a3      	str	r3, [r4, #72]	; 0x48
 800e21a:	e022      	b.n	800e262 <xQueueGenericReceive+0xd2>
						taskENTER_CRITICAL();
 800e21c:	f001 f966 	bl	800f4ec <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e220:	6860      	ldr	r0, [r4, #4]
 800e222:	f000 fd75 	bl	800ed10 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800e226:	f001 f96d 	bl	800f504 <vPortExitCritical>
 800e22a:	e02a      	b.n	800e282 <xQueueGenericReceive+0xf2>
				prvUnlockQueue( pxQueue );
 800e22c:	0020      	movs	r0, r4
 800e22e:	f7ff fe3f 	bl	800deb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e232:	f000 fb55 	bl	800e8e0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800e236:	f001 f959 	bl	800f4ec <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e23a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d1af      	bne.n	800e1a0 <xQueueGenericReceive+0x10>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e240:	9b01      	ldr	r3, [sp, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d0db      	beq.n	800e1fe <xQueueGenericReceive+0x6e>
				else if( xEntryTimeSet == pdFALSE )
 800e246:	2f00      	cmp	r7, #0
 800e248:	d0dd      	beq.n	800e206 <xQueueGenericReceive+0x76>
		taskEXIT_CRITICAL();
 800e24a:	f001 f95b 	bl	800f504 <vPortExitCritical>
		vTaskSuspendAll();
 800e24e:	f000 fabf 	bl	800e7d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e252:	f001 f94b 	bl	800f4ec <vPortEnterCritical>
 800e256:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e258:	3301      	adds	r3, #1
 800e25a:	d0d9      	beq.n	800e210 <xQueueGenericReceive+0x80>
 800e25c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e25e:	3301      	adds	r3, #1
 800e260:	d0d9      	beq.n	800e216 <xQueueGenericReceive+0x86>
 800e262:	f001 f94f 	bl	800f504 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e266:	a901      	add	r1, sp, #4
 800e268:	a802      	add	r0, sp, #8
 800e26a:	f000 fd0d 	bl	800ec88 <xTaskCheckForTimeOut>
 800e26e:	2800      	cmp	r0, #0
 800e270:	d116      	bne.n	800e2a0 <xQueueGenericReceive+0x110>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e272:	0020      	movs	r0, r4
 800e274:	f7ff fdb8 	bl	800dde8 <prvIsQueueEmpty>
 800e278:	2800      	cmp	r0, #0
 800e27a:	d0d7      	beq.n	800e22c <xQueueGenericReceive+0x9c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e27c:	6823      	ldr	r3, [r4, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d0cc      	beq.n	800e21c <xQueueGenericReceive+0x8c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e282:	0020      	movs	r0, r4
 800e284:	3024      	adds	r0, #36	; 0x24
 800e286:	9901      	ldr	r1, [sp, #4]
 800e288:	f000 fc8c 	bl	800eba4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e28c:	0020      	movs	r0, r4
 800e28e:	f7ff fe0f 	bl	800deb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e292:	f000 fb25 	bl	800e8e0 <xTaskResumeAll>
 800e296:	2800      	cmp	r0, #0
 800e298:	d1cd      	bne.n	800e236 <xQueueGenericReceive+0xa6>
					portYIELD_WITHIN_API();
 800e29a:	f001 f91b 	bl	800f4d4 <vPortYield>
 800e29e:	e7ca      	b.n	800e236 <xQueueGenericReceive+0xa6>
			prvUnlockQueue( pxQueue );
 800e2a0:	0020      	movs	r0, r4
 800e2a2:	f7ff fe05 	bl	800deb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e2a6:	f000 fb1b 	bl	800e8e0 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800e2aa:	2000      	movs	r0, #0
 800e2ac:	e78b      	b.n	800e1c6 <xQueueGenericReceive+0x36>

0800e2ae <xQueueReceiveFromISR>:
{
 800e2ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2b0:	0004      	movs	r4, r0
 800e2b2:	000e      	movs	r6, r1
 800e2b4:	0017      	movs	r7, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e2b6:	f001 f92f 	bl	800f518 <ulSetInterruptMaskFromISR>
 800e2ba:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e2bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d105      	bne.n	800e2ce <xQueueReceiveFromISR+0x20>
			xReturn = pdFAIL;
 800e2c2:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e2c4:	0028      	movs	r0, r5
 800e2c6:	f001 f92c 	bl	800f522 <vClearInterruptMaskFromISR>
}
 800e2ca:	0020      	movs	r0, r4
 800e2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e2ce:	0031      	movs	r1, r6
 800e2d0:	0020      	movs	r0, r4
 800e2d2:	f7ff fddb 	bl	800de8c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800e2d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e2dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e2de:	3301      	adds	r3, #1
 800e2e0:	d004      	beq.n	800e2ec <xQueueReceiveFromISR+0x3e>
				++( pxQueue->xRxLock );
 800e2e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800e2e8:	2401      	movs	r4, #1
 800e2ea:	e7eb      	b.n	800e2c4 <xQueueReceiveFromISR+0x16>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2ec:	6923      	ldr	r3, [r4, #16]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d101      	bne.n	800e2f6 <xQueueReceiveFromISR+0x48>
			xReturn = pdPASS;
 800e2f2:	2401      	movs	r4, #1
 800e2f4:	e7e6      	b.n	800e2c4 <xQueueReceiveFromISR+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2f6:	0020      	movs	r0, r4
 800e2f8:	3010      	adds	r0, #16
 800e2fa:	f000 fc81 	bl	800ec00 <xTaskRemoveFromEventList>
 800e2fe:	2800      	cmp	r0, #0
 800e300:	d005      	beq.n	800e30e <xQueueReceiveFromISR+0x60>
						if( pxHigherPriorityTaskWoken != NULL )
 800e302:	2f00      	cmp	r7, #0
 800e304:	d005      	beq.n	800e312 <xQueueReceiveFromISR+0x64>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e306:	2301      	movs	r3, #1
 800e308:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800e30a:	2401      	movs	r4, #1
 800e30c:	e7da      	b.n	800e2c4 <xQueueReceiveFromISR+0x16>
 800e30e:	2401      	movs	r4, #1
 800e310:	e7d8      	b.n	800e2c4 <xQueueReceiveFromISR+0x16>
 800e312:	2401      	movs	r4, #1
 800e314:	e7d6      	b.n	800e2c4 <xQueueReceiveFromISR+0x16>
	...

0800e318 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e318:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e31a:	2300      	movs	r3, #0
 800e31c:	2b07      	cmp	r3, #7
 800e31e:	d80a      	bhi.n	800e336 <vQueueAddToRegistry+0x1e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e320:	00da      	lsls	r2, r3, #3
 800e322:	4c05      	ldr	r4, [pc, #20]	; (800e338 <vQueueAddToRegistry+0x20>)
 800e324:	5912      	ldr	r2, [r2, r4]
 800e326:	2a00      	cmp	r2, #0
 800e328:	d001      	beq.n	800e32e <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e32a:	3301      	adds	r3, #1
 800e32c:	e7f6      	b.n	800e31c <vQueueAddToRegistry+0x4>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e32e:	00db      	lsls	r3, r3, #3
 800e330:	5119      	str	r1, [r3, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e332:	18e3      	adds	r3, r4, r3
 800e334:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e336:	bd10      	pop	{r4, pc}
 800e338:	20006d8c 	.word	0x20006d8c

0800e33c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e33c:	b570      	push	{r4, r5, r6, lr}
 800e33e:	0004      	movs	r4, r0
 800e340:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e342:	f001 f8d3 	bl	800f4ec <vPortEnterCritical>
 800e346:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e348:	3301      	adds	r3, #1
 800e34a:	d00b      	beq.n	800e364 <vQueueWaitForMessageRestricted+0x28>
 800e34c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e34e:	3301      	adds	r3, #1
 800e350:	d00b      	beq.n	800e36a <vQueueWaitForMessageRestricted+0x2e>
 800e352:	f001 f8d7 	bl	800f504 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e356:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d009      	beq.n	800e370 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e35c:	0020      	movs	r0, r4
 800e35e:	f7ff fda7 	bl	800deb0 <prvUnlockQueue>
	}
 800e362:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800e364:	2300      	movs	r3, #0
 800e366:	6463      	str	r3, [r4, #68]	; 0x44
 800e368:	e7f0      	b.n	800e34c <vQueueWaitForMessageRestricted+0x10>
 800e36a:	2300      	movs	r3, #0
 800e36c:	64a3      	str	r3, [r4, #72]	; 0x48
 800e36e:	e7f0      	b.n	800e352 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e370:	0020      	movs	r0, r4
 800e372:	3024      	adds	r0, #36	; 0x24
 800e374:	0029      	movs	r1, r5
 800e376:	f000 fc31 	bl	800ebdc <vTaskPlaceOnEventListRestricted>
 800e37a:	e7ef      	b.n	800e35c <vQueueWaitForMessageRestricted+0x20>

0800e37c <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 800e37c:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e37e:	e001      	b.n	800e384 <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 800e380:	3001      	adds	r0, #1
			ulCount++;
 800e382:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e384:	7802      	ldrb	r2, [r0, #0]
 800e386:	2aa5      	cmp	r2, #165	; 0xa5
 800e388:	d0fa      	beq.n	800e380 <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e38a:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800e38c:	b298      	uxth	r0, r3
	}
 800e38e:	4770      	bx	lr

0800e390 <prvListTaskWithinSingleList>:
	{
 800e390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e392:	46de      	mov	lr, fp
 800e394:	4657      	mov	r7, sl
 800e396:	464e      	mov	r6, r9
 800e398:	4645      	mov	r5, r8
 800e39a:	b5e0      	push	{r5, r6, r7, lr}
 800e39c:	4682      	mov	sl, r0
 800e39e:	000e      	movs	r6, r1
 800e3a0:	4690      	mov	r8, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e3a2:	680f      	ldr	r7, [r1, #0]
 800e3a4:	2f00      	cmp	r7, #0
 800e3a6:	d039      	beq.n	800e41c <prvListTaskWithinSingleList+0x8c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e3a8:	684b      	ldr	r3, [r1, #4]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	604b      	str	r3, [r1, #4]
 800e3ae:	2208      	movs	r2, #8
 800e3b0:	4691      	mov	r9, r2
 800e3b2:	4489      	add	r9, r1
 800e3b4:	454b      	cmp	r3, r9
 800e3b6:	d004      	beq.n	800e3c2 <prvListTaskWithinSingleList+0x32>
 800e3b8:	6873      	ldr	r3, [r6, #4]
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	469b      	mov	fp, r3
	UBaseType_t uxTask = 0;
 800e3be:	2700      	movs	r7, #0
 800e3c0:	e010      	b.n	800e3e4 <prvListTaskWithinSingleList+0x54>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	604b      	str	r3, [r1, #4]
 800e3c6:	e7f7      	b.n	800e3b8 <prvListTaskWithinSingleList+0x28>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	6073      	str	r3, [r6, #4]
 800e3cc:	e00f      	b.n	800e3ee <prvListTaskWithinSingleList+0x5e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e3ce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800e3d0:	6163      	str	r3, [r4, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e3d2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800e3d4:	61a3      	str	r3, [r4, #24]
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e3d6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e3d8:	f7ff ffd0 	bl	800e37c <prvTaskCheckFreeStackSpace>
 800e3dc:	83a0      	strh	r0, [r4, #28]
				uxTask++;
 800e3de:	3701      	adds	r7, #1
			} while( pxNextTCB != pxFirstTCB );
 800e3e0:	45ab      	cmp	fp, r5
 800e3e2:	d01b      	beq.n	800e41c <prvListTaskWithinSingleList+0x8c>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e3e4:	6873      	ldr	r3, [r6, #4]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	6073      	str	r3, [r6, #4]
 800e3ea:	4599      	cmp	r9, r3
 800e3ec:	d0ec      	beq.n	800e3c8 <prvListTaskWithinSingleList+0x38>
 800e3ee:	6873      	ldr	r3, [r6, #4]
 800e3f0:	68dd      	ldr	r5, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e3f2:	017c      	lsls	r4, r7, #5
 800e3f4:	4454      	add	r4, sl
 800e3f6:	6025      	str	r5, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e3f8:	002b      	movs	r3, r5
 800e3fa:	3334      	adds	r3, #52	; 0x34
 800e3fc:	6063      	str	r3, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e3fe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800e400:	60a3      	str	r3, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e402:	4643      	mov	r3, r8
 800e404:	7323      	strb	r3, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e406:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e408:	6123      	str	r3, [r4, #16]
					if( eState == eSuspended )
 800e40a:	4643      	mov	r3, r8
 800e40c:	2b03      	cmp	r3, #3
 800e40e:	d1de      	bne.n	800e3ce <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e410:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e412:	2b00      	cmp	r3, #0
 800e414:	d0db      	beq.n	800e3ce <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e416:	2302      	movs	r3, #2
 800e418:	7323      	strb	r3, [r4, #12]
 800e41a:	e7d8      	b.n	800e3ce <prvListTaskWithinSingleList+0x3e>
	}
 800e41c:	0038      	movs	r0, r7
 800e41e:	bc3c      	pop	{r2, r3, r4, r5}
 800e420:	4690      	mov	r8, r2
 800e422:	4699      	mov	r9, r3
 800e424:	46a2      	mov	sl, r4
 800e426:	46ab      	mov	fp, r5
 800e428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e42c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e42c:	4b08      	ldr	r3, [pc, #32]	; (800e450 <prvResetNextTaskUnblockTime+0x24>)
 800e42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d007      	beq.n	800e446 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e436:	4b06      	ldr	r3, [pc, #24]	; (800e450 <prvResetNextTaskUnblockTime+0x24>)
 800e438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e43a:	68db      	ldr	r3, [r3, #12]
 800e43c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e43e:	685a      	ldr	r2, [r3, #4]
 800e440:	4b04      	ldr	r3, [pc, #16]	; (800e454 <prvResetNextTaskUnblockTime+0x28>)
 800e442:	601a      	str	r2, [r3, #0]
	}
}
 800e444:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800e446:	4b03      	ldr	r3, [pc, #12]	; (800e454 <prvResetNextTaskUnblockTime+0x28>)
 800e448:	2201      	movs	r2, #1
 800e44a:	4252      	negs	r2, r2
 800e44c:	601a      	str	r2, [r3, #0]
 800e44e:	e7f9      	b.n	800e444 <prvResetNextTaskUnblockTime+0x18>
 800e450:	200026c8 	.word	0x200026c8
 800e454:	200000c4 	.word	0x200000c4

0800e458 <prvDeleteTCB>:
	{
 800e458:	b510      	push	{r4, lr}
 800e45a:	0004      	movs	r4, r0
			vPortFreeAligned( pxTCB->pxStack );
 800e45c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800e45e:	f001 f94b 	bl	800f6f8 <vPortFree>
		vPortFree( pxTCB );
 800e462:	0020      	movs	r0, r4
 800e464:	f001 f948 	bl	800f6f8 <vPortFree>
	}
 800e468:	bd10      	pop	{r4, pc}

0800e46a <prvAllocateTCBAndStack>:
{
 800e46a:	b570      	push	{r4, r5, r6, lr}
 800e46c:	0006      	movs	r6, r0
 800e46e:	1e0d      	subs	r5, r1, #0
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e470:	d010      	beq.n	800e494 <prvAllocateTCBAndStack+0x2a>
		if( pxStack != NULL )
 800e472:	2d00      	cmp	r5, #0
 800e474:	d017      	beq.n	800e4a6 <prvAllocateTCBAndStack+0x3c>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e476:	2060      	movs	r0, #96	; 0x60
 800e478:	f001 f8da 	bl	800f630 <pvPortMalloc>
 800e47c:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800e47e:	d00e      	beq.n	800e49e <prvAllocateTCBAndStack+0x34>
				pxNewTCB->pxStack = pxStack;
 800e480:	6305      	str	r5, [r0, #48]	; 0x30
	if( pxNewTCB != NULL )
 800e482:	2c00      	cmp	r4, #0
 800e484:	d004      	beq.n	800e490 <prvAllocateTCBAndStack+0x26>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e486:	00b2      	lsls	r2, r6, #2
 800e488:	21a5      	movs	r1, #165	; 0xa5
 800e48a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e48c:	f004 fc94 	bl	8012db8 <memset>
}
 800e490:	0020      	movs	r0, r4
 800e492:	bd70      	pop	{r4, r5, r6, pc}
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e494:	0080      	lsls	r0, r0, #2
 800e496:	f001 f8cb 	bl	800f630 <pvPortMalloc>
 800e49a:	0005      	movs	r5, r0
 800e49c:	e7e9      	b.n	800e472 <prvAllocateTCBAndStack+0x8>
				vPortFree( pxStack );
 800e49e:	0028      	movs	r0, r5
 800e4a0:	f001 f92a 	bl	800f6f8 <vPortFree>
 800e4a4:	e7ed      	b.n	800e482 <prvAllocateTCBAndStack+0x18>
			pxNewTCB = NULL;
 800e4a6:	2400      	movs	r4, #0
	return pxNewTCB;
 800e4a8:	e7f2      	b.n	800e490 <prvAllocateTCBAndStack+0x26>

0800e4aa <prvInitialiseTCBVariables>:
{
 800e4aa:	b570      	push	{r4, r5, r6, lr}
 800e4ac:	0004      	movs	r4, r0
 800e4ae:	0016      	movs	r6, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	2b0c      	cmp	r3, #12
 800e4b4:	d809      	bhi.n	800e4ca <prvInitialiseTCBVariables+0x20>
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e4b6:	18c8      	adds	r0, r1, r3
 800e4b8:	7805      	ldrb	r5, [r0, #0]
 800e4ba:	18e2      	adds	r2, r4, r3
 800e4bc:	3234      	adds	r2, #52	; 0x34
 800e4be:	7015      	strb	r5, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800e4c0:	7802      	ldrb	r2, [r0, #0]
 800e4c2:	2a00      	cmp	r2, #0
 800e4c4:	d001      	beq.n	800e4ca <prvInitialiseTCBVariables+0x20>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	e7f3      	b.n	800e4b2 <prvInitialiseTCBVariables+0x8>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e4ca:	2340      	movs	r3, #64	; 0x40
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e4d0:	2e06      	cmp	r6, #6
 800e4d2:	d900      	bls.n	800e4d6 <prvInitialiseTCBVariables+0x2c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e4d4:	2606      	movs	r6, #6
	pxTCB->uxPriority = uxPriority;
 800e4d6:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800e4d8:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800e4da:	2500      	movs	r5, #0
 800e4dc:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e4de:	1d20      	adds	r0, r4, #4
 800e4e0:	f7ff fc39 	bl	800dd56 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800e4e4:	0020      	movs	r0, r4
 800e4e6:	3018      	adds	r0, #24
 800e4e8:	f7ff fc35 	bl	800dd56 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800e4ec:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4ee:	2307      	movs	r3, #7
 800e4f0:	1b9e      	subs	r6, r3, r6
 800e4f2:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800e4f4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800e4f6:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800e4f8:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e4fa:	3355      	adds	r3, #85	; 0x55
 800e4fc:	54e5      	strb	r5, [r4, r3]
}
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}

0800e500 <prvInitialiseTaskLists>:
{
 800e500:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e502:	2400      	movs	r4, #0
 800e504:	e007      	b.n	800e516 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e506:	00a3      	lsls	r3, r4, #2
 800e508:	191b      	adds	r3, r3, r4
 800e50a:	0098      	lsls	r0, r3, #2
 800e50c:	4b0f      	ldr	r3, [pc, #60]	; (800e54c <prvInitialiseTaskLists+0x4c>)
 800e50e:	18c0      	adds	r0, r0, r3
 800e510:	f7ff fc16 	bl	800dd40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e514:	3401      	adds	r4, #1
 800e516:	2c06      	cmp	r4, #6
 800e518:	d9f5      	bls.n	800e506 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800e51a:	4c0d      	ldr	r4, [pc, #52]	; (800e550 <prvInitialiseTaskLists+0x50>)
 800e51c:	0026      	movs	r6, r4
 800e51e:	362c      	adds	r6, #44	; 0x2c
 800e520:	0030      	movs	r0, r6
 800e522:	f7ff fc0d 	bl	800dd40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e526:	0025      	movs	r5, r4
 800e528:	3540      	adds	r5, #64	; 0x40
 800e52a:	0028      	movs	r0, r5
 800e52c:	f7ff fc08 	bl	800dd40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e530:	0020      	movs	r0, r4
 800e532:	3014      	adds	r0, #20
 800e534:	f7ff fc04 	bl	800dd40 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e538:	0020      	movs	r0, r4
 800e53a:	3054      	adds	r0, #84	; 0x54
 800e53c:	f7ff fc00 	bl	800dd40 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e540:	0020      	movs	r0, r4
 800e542:	f7ff fbfd 	bl	800dd40 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e546:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e548:	66a5      	str	r5, [r4, #104]	; 0x68
}
 800e54a:	bd70      	pop	{r4, r5, r6, pc}
 800e54c:	20002764 	.word	0x20002764
 800e550:	200026c8 	.word	0x200026c8

0800e554 <prvAddCurrentTaskToDelayedList>:
{
 800e554:	b510      	push	{r4, lr}
 800e556:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e558:	4b0c      	ldr	r3, [pc, #48]	; (800e58c <prvAddCurrentTaskToDelayedList+0x38>)
 800e55a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e55c:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800e55e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e560:	4283      	cmp	r3, r0
 800e562:	d80c      	bhi.n	800e57e <prvAddCurrentTaskToDelayedList+0x2a>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e564:	4b09      	ldr	r3, [pc, #36]	; (800e58c <prvAddCurrentTaskToDelayedList+0x38>)
 800e566:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800e568:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e56a:	3104      	adds	r1, #4
 800e56c:	f7ff fc02 	bl	800dd74 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e570:	4b07      	ldr	r3, [pc, #28]	; (800e590 <prvAddCurrentTaskToDelayedList+0x3c>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	42a3      	cmp	r3, r4
 800e576:	d908      	bls.n	800e58a <prvAddCurrentTaskToDelayedList+0x36>
			xNextTaskUnblockTime = xTimeToWake;
 800e578:	4b05      	ldr	r3, [pc, #20]	; (800e590 <prvAddCurrentTaskToDelayedList+0x3c>)
 800e57a:	601c      	str	r4, [r3, #0]
}
 800e57c:	e005      	b.n	800e58a <prvAddCurrentTaskToDelayedList+0x36>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e57e:	4b03      	ldr	r3, [pc, #12]	; (800e58c <prvAddCurrentTaskToDelayedList+0x38>)
 800e580:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800e582:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e584:	3104      	adds	r1, #4
 800e586:	f7ff fbf5 	bl	800dd74 <vListInsert>
}
 800e58a:	bd10      	pop	{r4, pc}
 800e58c:	200026c8 	.word	0x200026c8
 800e590:	200000c4 	.word	0x200000c4

0800e594 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e594:	b510      	push	{r4, lr}
 800e596:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e598:	f004 fe44 	bl	8013224 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e59c:	0020      	movs	r0, r4
 800e59e:	f7f1 fdbb 	bl	8000118 <strlen>
 800e5a2:	e002      	b.n	800e5aa <prvWriteNameToBuffer+0x16>
		{
			pcBuffer[ x ] = ' ';
 800e5a4:	2320      	movs	r3, #32
 800e5a6:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e5a8:	3001      	adds	r0, #1
 800e5aa:	280b      	cmp	r0, #11
 800e5ac:	ddfa      	ble.n	800e5a4 <prvWriteNameToBuffer+0x10>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800e5ae:	1820      	adds	r0, r4, r0
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800e5b4:	bd10      	pop	{r4, pc}
	...

0800e5b8 <xTaskGenericCreate>:
{
 800e5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5ba:	b087      	sub	sp, #28
 800e5bc:	9003      	str	r0, [sp, #12]
 800e5be:	9104      	str	r1, [sp, #16]
 800e5c0:	0017      	movs	r7, r2
 800e5c2:	9305      	str	r3, [sp, #20]
 800e5c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 800e5c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e5c8:	0010      	movs	r0, r2
 800e5ca:	f7ff ff4e 	bl	800e46a <prvAllocateTCBAndStack>
 800e5ce:	1e05      	subs	r5, r0, #0
	if( pxNewTCB != NULL )
 800e5d0:	d05b      	beq.n	800e68a <xTaskGenericCreate+0xd2>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e5d2:	4e31      	ldr	r6, [pc, #196]	; (800e698 <xTaskGenericCreate+0xe0>)
 800e5d4:	19bb      	adds	r3, r7, r6
 800e5d6:	009b      	lsls	r3, r3, #2
 800e5d8:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800e5da:	46b4      	mov	ip, r6
 800e5dc:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e5de:	2207      	movs	r2, #7
 800e5e0:	001e      	movs	r6, r3
 800e5e2:	4396      	bics	r6, r2
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 800e5e4:	9700      	str	r7, [sp, #0]
 800e5e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e5e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e5ea:	9904      	ldr	r1, [sp, #16]
 800e5ec:	f7ff ff5d 	bl	800e4aa <prvInitialiseTCBVariables>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e5f0:	9a05      	ldr	r2, [sp, #20]
 800e5f2:	9903      	ldr	r1, [sp, #12]
 800e5f4:	0030      	movs	r0, r6
 800e5f6:	f000 ff41 	bl	800f47c <pxPortInitialiseStack>
 800e5fa:	6028      	str	r0, [r5, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800e5fc:	2c00      	cmp	r4, #0
 800e5fe:	d000      	beq.n	800e602 <xTaskGenericCreate+0x4a>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e600:	6025      	str	r5, [r4, #0]
		taskENTER_CRITICAL();
 800e602:	f000 ff73 	bl	800f4ec <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800e606:	4b25      	ldr	r3, [pc, #148]	; (800e69c <xTaskGenericCreate+0xe4>)
 800e608:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e60a:	3201      	adds	r2, #1
 800e60c:	675a      	str	r2, [r3, #116]	; 0x74
			if( pxCurrentTCB == NULL )
 800e60e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00c      	beq.n	800e62e <xTaskGenericCreate+0x76>
				if( xSchedulerRunning == pdFALSE )
 800e614:	4b21      	ldr	r3, [pc, #132]	; (800e69c <xTaskGenericCreate+0xe4>)
 800e616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d10d      	bne.n	800e638 <xTaskGenericCreate+0x80>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800e61c:	4b1f      	ldr	r3, [pc, #124]	; (800e69c <xTaskGenericCreate+0xe4>)
 800e61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e624:	4293      	cmp	r3, r2
 800e626:	d807      	bhi.n	800e638 <xTaskGenericCreate+0x80>
						pxCurrentTCB = pxNewTCB;
 800e628:	4b1c      	ldr	r3, [pc, #112]	; (800e69c <xTaskGenericCreate+0xe4>)
 800e62a:	66dd      	str	r5, [r3, #108]	; 0x6c
 800e62c:	e004      	b.n	800e638 <xTaskGenericCreate+0x80>
				pxCurrentTCB =  pxNewTCB;
 800e62e:	4b1b      	ldr	r3, [pc, #108]	; (800e69c <xTaskGenericCreate+0xe4>)
 800e630:	66dd      	str	r5, [r3, #108]	; 0x6c
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e634:	2b01      	cmp	r3, #1
 800e636:	d021      	beq.n	800e67c <xTaskGenericCreate+0xc4>
			uxTaskNumber++;
 800e638:	4a18      	ldr	r2, [pc, #96]	; (800e69c <xTaskGenericCreate+0xe4>)
 800e63a:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 800e63c:	3301      	adds	r3, #1
 800e63e:	67d3      	str	r3, [r2, #124]	; 0x7c
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e640:	646b      	str	r3, [r5, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800e642:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800e644:	4b16      	ldr	r3, [pc, #88]	; (800e6a0 <xTaskGenericCreate+0xe8>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	429a      	cmp	r2, r3
 800e64a:	d901      	bls.n	800e650 <xTaskGenericCreate+0x98>
 800e64c:	4b14      	ldr	r3, [pc, #80]	; (800e6a0 <xTaskGenericCreate+0xe8>)
 800e64e:	601a      	str	r2, [r3, #0]
 800e650:	1d29      	adds	r1, r5, #4
 800e652:	0093      	lsls	r3, r2, #2
 800e654:	189b      	adds	r3, r3, r2
 800e656:	0098      	lsls	r0, r3, #2
 800e658:	4b12      	ldr	r3, [pc, #72]	; (800e6a4 <xTaskGenericCreate+0xec>)
 800e65a:	18c0      	adds	r0, r0, r3
 800e65c:	f7ff fb7e 	bl	800dd5c <vListInsertEnd>
		taskEXIT_CRITICAL();
 800e660:	f000 ff50 	bl	800f504 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e664:	4b0d      	ldr	r3, [pc, #52]	; (800e69c <xTaskGenericCreate+0xe4>)
 800e666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d011      	beq.n	800e690 <xTaskGenericCreate+0xd8>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800e66c:	4b0b      	ldr	r3, [pc, #44]	; (800e69c <xTaskGenericCreate+0xe4>)
 800e66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e674:	4293      	cmp	r3, r2
 800e676:	d304      	bcc.n	800e682 <xTaskGenericCreate+0xca>
			xReturn = pdPASS;
 800e678:	2001      	movs	r0, #1
	return xReturn;
 800e67a:	e00a      	b.n	800e692 <xTaskGenericCreate+0xda>
					prvInitialiseTaskLists();
 800e67c:	f7ff ff40 	bl	800e500 <prvInitialiseTaskLists>
 800e680:	e7da      	b.n	800e638 <xTaskGenericCreate+0x80>
				taskYIELD_IF_USING_PREEMPTION();
 800e682:	f000 ff27 	bl	800f4d4 <vPortYield>
			xReturn = pdPASS;
 800e686:	2001      	movs	r0, #1
 800e688:	e003      	b.n	800e692 <xTaskGenericCreate+0xda>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e68a:	2001      	movs	r0, #1
 800e68c:	4240      	negs	r0, r0
 800e68e:	e000      	b.n	800e692 <xTaskGenericCreate+0xda>
			xReturn = pdPASS;
 800e690:	2001      	movs	r0, #1
}
 800e692:	b007      	add	sp, #28
 800e694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e696:	46c0      	nop			; (mov r8, r8)
 800e698:	3fffffff 	.word	0x3fffffff
 800e69c:	200026c8 	.word	0x200026c8
 800e6a0:	20002748 	.word	0x20002748
 800e6a4:	20002764 	.word	0x20002764

0800e6a8 <uxTaskPriorityGet>:
	{
 800e6a8:	b510      	push	{r4, lr}
 800e6aa:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800e6ac:	f000 ff1e 	bl	800f4ec <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e6b0:	2c00      	cmp	r4, #0
 800e6b2:	d004      	beq.n	800e6be <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800e6b4:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800e6b6:	f000 ff25 	bl	800f504 <vPortExitCritical>
	}
 800e6ba:	0020      	movs	r0, r4
 800e6bc:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800e6be:	4b01      	ldr	r3, [pc, #4]	; (800e6c4 <uxTaskPriorityGet+0x1c>)
 800e6c0:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800e6c2:	e7f7      	b.n	800e6b4 <uxTaskPriorityGet+0xc>
 800e6c4:	200026c8 	.word	0x200026c8

0800e6c8 <vTaskPrioritySet>:
	{
 800e6c8:	b570      	push	{r4, r5, r6, lr}
 800e6ca:	0004      	movs	r4, r0
 800e6cc:	000d      	movs	r5, r1
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e6ce:	2906      	cmp	r1, #6
 800e6d0:	d900      	bls.n	800e6d4 <vTaskPrioritySet+0xc>
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e6d2:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800e6d4:	f000 ff0a 	bl	800f4ec <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e6d8:	2c00      	cmp	r4, #0
 800e6da:	d00e      	beq.n	800e6fa <vTaskPrioritySet+0x32>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e6dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800e6de:	429d      	cmp	r5, r3
 800e6e0:	d027      	beq.n	800e732 <vTaskPrioritySet+0x6a>
				if( uxNewPriority > uxCurrentBasePriority )
 800e6e2:	d90d      	bls.n	800e700 <vTaskPrioritySet+0x38>
					if( pxTCB != pxCurrentTCB )
 800e6e4:	4a24      	ldr	r2, [pc, #144]	; (800e778 <vTaskPrioritySet+0xb0>)
 800e6e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e6e8:	42a2      	cmp	r2, r4
 800e6ea:	d025      	beq.n	800e738 <vTaskPrioritySet+0x70>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800e6ec:	4a22      	ldr	r2, [pc, #136]	; (800e778 <vTaskPrioritySet+0xb0>)
 800e6ee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e6f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e6f2:	42aa      	cmp	r2, r5
 800e6f4:	d922      	bls.n	800e73c <vTaskPrioritySet+0x74>
	BaseType_t xYieldRequired = pdFALSE;
 800e6f6:	2600      	movs	r6, #0
 800e6f8:	e007      	b.n	800e70a <vTaskPrioritySet+0x42>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e6fa:	4b1f      	ldr	r3, [pc, #124]	; (800e778 <vTaskPrioritySet+0xb0>)
 800e6fc:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800e6fe:	e7ed      	b.n	800e6dc <vTaskPrioritySet+0x14>
				else if( pxTCB == pxCurrentTCB )
 800e700:	4a1d      	ldr	r2, [pc, #116]	; (800e778 <vTaskPrioritySet+0xb0>)
 800e702:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e704:	42a2      	cmp	r2, r4
 800e706:	d01b      	beq.n	800e740 <vTaskPrioritySet+0x78>
	BaseType_t xYieldRequired = pdFALSE;
 800e708:	2600      	movs	r6, #0
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e70a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800e70c:	428b      	cmp	r3, r1
 800e70e:	d019      	beq.n	800e744 <vTaskPrioritySet+0x7c>
					pxTCB->uxBasePriority = uxNewPriority;
 800e710:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e712:	69a3      	ldr	r3, [r4, #24]
 800e714:	2b00      	cmp	r3, #0
 800e716:	db02      	blt.n	800e71e <vTaskPrioritySet+0x56>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e718:	2307      	movs	r3, #7
 800e71a:	1b5d      	subs	r5, r3, r5
 800e71c:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e71e:	008a      	lsls	r2, r1, #2
 800e720:	1852      	adds	r2, r2, r1
 800e722:	0093      	lsls	r3, r2, #2
 800e724:	4a15      	ldr	r2, [pc, #84]	; (800e77c <vTaskPrioritySet+0xb4>)
 800e726:	189b      	adds	r3, r3, r2
 800e728:	6962      	ldr	r2, [r4, #20]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d00c      	beq.n	800e748 <vTaskPrioritySet+0x80>
				if( xYieldRequired == pdTRUE )
 800e72e:	2e01      	cmp	r6, #1
 800e730:	d01e      	beq.n	800e770 <vTaskPrioritySet+0xa8>
		taskEXIT_CRITICAL();
 800e732:	f000 fee7 	bl	800f504 <vPortExitCritical>
	}
 800e736:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800e738:	2600      	movs	r6, #0
 800e73a:	e7e6      	b.n	800e70a <vTaskPrioritySet+0x42>
							xYieldRequired = pdTRUE;
 800e73c:	2601      	movs	r6, #1
 800e73e:	e7e4      	b.n	800e70a <vTaskPrioritySet+0x42>
					xYieldRequired = pdTRUE;
 800e740:	2601      	movs	r6, #1
 800e742:	e7e2      	b.n	800e70a <vTaskPrioritySet+0x42>
						pxTCB->uxPriority = uxNewPriority;
 800e744:	62e5      	str	r5, [r4, #44]	; 0x2c
 800e746:	e7e3      	b.n	800e710 <vTaskPrioritySet+0x48>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e748:	1d25      	adds	r5, r4, #4
 800e74a:	0028      	movs	r0, r5
 800e74c:	f7ff fb2a 	bl	800dda4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e750:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e752:	4b0b      	ldr	r3, [pc, #44]	; (800e780 <vTaskPrioritySet+0xb8>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	429a      	cmp	r2, r3
 800e758:	d901      	bls.n	800e75e <vTaskPrioritySet+0x96>
 800e75a:	4b09      	ldr	r3, [pc, #36]	; (800e780 <vTaskPrioritySet+0xb8>)
 800e75c:	601a      	str	r2, [r3, #0]
 800e75e:	0093      	lsls	r3, r2, #2
 800e760:	189b      	adds	r3, r3, r2
 800e762:	0098      	lsls	r0, r3, #2
 800e764:	4b05      	ldr	r3, [pc, #20]	; (800e77c <vTaskPrioritySet+0xb4>)
 800e766:	18c0      	adds	r0, r0, r3
 800e768:	0029      	movs	r1, r5
 800e76a:	f7ff faf7 	bl	800dd5c <vListInsertEnd>
 800e76e:	e7de      	b.n	800e72e <vTaskPrioritySet+0x66>
					taskYIELD_IF_USING_PREEMPTION();
 800e770:	f000 feb0 	bl	800f4d4 <vPortYield>
 800e774:	e7dd      	b.n	800e732 <vTaskPrioritySet+0x6a>
 800e776:	46c0      	nop			; (mov r8, r8)
 800e778:	200026c8 	.word	0x200026c8
 800e77c:	20002764 	.word	0x20002764
 800e780:	20002748 	.word	0x20002748

0800e784 <vTaskStartScheduler>:
{
 800e784:	b500      	push	{lr}
 800e786:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800e788:	2300      	movs	r3, #0
 800e78a:	9303      	str	r3, [sp, #12]
 800e78c:	9302      	str	r3, [sp, #8]
 800e78e:	9301      	str	r3, [sp, #4]
 800e790:	9300      	str	r3, [sp, #0]
 800e792:	2296      	movs	r2, #150	; 0x96
 800e794:	490b      	ldr	r1, [pc, #44]	; (800e7c4 <vTaskStartScheduler+0x40>)
 800e796:	480c      	ldr	r0, [pc, #48]	; (800e7c8 <vTaskStartScheduler+0x44>)
 800e798:	f7ff ff0e 	bl	800e5b8 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800e79c:	2801      	cmp	r0, #1
 800e79e:	d003      	beq.n	800e7a8 <vTaskStartScheduler+0x24>
	if( xReturn == pdPASS )
 800e7a0:	2801      	cmp	r0, #1
 800e7a2:	d004      	beq.n	800e7ae <vTaskStartScheduler+0x2a>
}
 800e7a4:	b005      	add	sp, #20
 800e7a6:	bd00      	pop	{pc}
			xReturn = xTimerCreateTimerTask();
 800e7a8:	f000 fcd4 	bl	800f154 <xTimerCreateTimerTask>
 800e7ac:	e7f8      	b.n	800e7a0 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800e7ae:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800e7b0:	4b06      	ldr	r3, [pc, #24]	; (800e7cc <vTaskStartScheduler+0x48>)
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	679a      	str	r2, [r3, #120]	; 0x78
		xTickCount = ( TickType_t ) 0U;
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	671a      	str	r2, [r3, #112]	; 0x70
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e7ba:	f7f9 f987 	bl	8007acc <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800e7be:	f000 fe6f 	bl	800f4a0 <xPortStartScheduler>
}
 800e7c2:	e7ef      	b.n	800e7a4 <vTaskStartScheduler+0x20>
 800e7c4:	0801a4f8 	.word	0x0801a4f8
 800e7c8:	0800ea25 	.word	0x0800ea25
 800e7cc:	200026c8 	.word	0x200026c8

0800e7d0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e7d0:	4a02      	ldr	r2, [pc, #8]	; (800e7dc <vTaskSuspendAll+0xc>)
 800e7d2:	6893      	ldr	r3, [r2, #8]
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	6093      	str	r3, [r2, #8]
}
 800e7d8:	4770      	bx	lr
 800e7da:	46c0      	nop			; (mov r8, r8)
 800e7dc:	20002748 	.word	0x20002748

0800e7e0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e7e0:	4b01      	ldr	r3, [pc, #4]	; (800e7e8 <xTaskGetTickCount+0x8>)
 800e7e2:	6f18      	ldr	r0, [r3, #112]	; 0x70
}
 800e7e4:	4770      	bx	lr
 800e7e6:	46c0      	nop			; (mov r8, r8)
 800e7e8:	200026c8 	.word	0x200026c8

0800e7ec <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800e7ec:	4b01      	ldr	r3, [pc, #4]	; (800e7f4 <xTaskGetTickCountFromISR+0x8>)
 800e7ee:	6f18      	ldr	r0, [r3, #112]	; 0x70
}
 800e7f0:	4770      	bx	lr
 800e7f2:	46c0      	nop			; (mov r8, r8)
 800e7f4:	200026c8 	.word	0x200026c8

0800e7f8 <xTaskIncrementTick>:
{
 800e7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7fa:	4b35      	ldr	r3, [pc, #212]	; (800e8d0 <xTaskIncrementTick+0xd8>)
 800e7fc:	689b      	ldr	r3, [r3, #8]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d15a      	bne.n	800e8b8 <xTaskIncrementTick+0xc0>
		++xTickCount;
 800e802:	4b34      	ldr	r3, [pc, #208]	; (800e8d4 <xTaskIncrementTick+0xdc>)
 800e804:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e806:	3201      	adds	r2, #1
 800e808:	671a      	str	r2, [r3, #112]	; 0x70
			const TickType_t xConstTickCount = xTickCount;
 800e80a:	6f1f      	ldr	r7, [r3, #112]	; 0x70
			if( xConstTickCount == ( TickType_t ) 0U )
 800e80c:	2f00      	cmp	r7, #0
 800e80e:	d010      	beq.n	800e832 <xTaskIncrementTick+0x3a>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e810:	4b31      	ldr	r3, [pc, #196]	; (800e8d8 <xTaskIncrementTick+0xe0>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	42bb      	cmp	r3, r7
 800e816:	d945      	bls.n	800e8a4 <xTaskIncrementTick+0xac>
BaseType_t xSwitchRequired = pdFALSE;
 800e818:	2600      	movs	r6, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e81a:	4b2e      	ldr	r3, [pc, #184]	; (800e8d4 <xTaskIncrementTick+0xdc>)
 800e81c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e820:	0093      	lsls	r3, r2, #2
 800e822:	189b      	adds	r3, r3, r2
 800e824:	009a      	lsls	r2, r3, #2
 800e826:	4b2d      	ldr	r3, [pc, #180]	; (800e8dc <xTaskIncrementTick+0xe4>)
 800e828:	58d3      	ldr	r3, [r2, r3]
 800e82a:	2b01      	cmp	r3, #1
 800e82c:	d949      	bls.n	800e8c2 <xTaskIncrementTick+0xca>
				xSwitchRequired = pdTRUE;
 800e82e:	2601      	movs	r6, #1
 800e830:	e047      	b.n	800e8c2 <xTaskIncrementTick+0xca>
				taskSWITCH_DELAYED_LISTS();
 800e832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e834:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800e836:	6299      	str	r1, [r3, #40]	; 0x28
 800e838:	669a      	str	r2, [r3, #104]	; 0x68
 800e83a:	4a25      	ldr	r2, [pc, #148]	; (800e8d0 <xTaskIncrementTick+0xd8>)
 800e83c:	68d3      	ldr	r3, [r2, #12]
 800e83e:	3301      	adds	r3, #1
 800e840:	60d3      	str	r3, [r2, #12]
 800e842:	f7ff fdf3 	bl	800e42c <prvResetNextTaskUnblockTime>
 800e846:	e7e3      	b.n	800e810 <xTaskIncrementTick+0x18>
								xSwitchRequired = pdTRUE;
 800e848:	2601      	movs	r6, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e84a:	4b22      	ldr	r3, [pc, #136]	; (800e8d4 <xTaskIncrementTick+0xdc>)
 800e84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d029      	beq.n	800e8a8 <xTaskIncrementTick+0xb0>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e854:	4b1f      	ldr	r3, [pc, #124]	; (800e8d4 <xTaskIncrementTick+0xdc>)
 800e856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e858:	68db      	ldr	r3, [r3, #12]
 800e85a:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800e85c:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800e85e:	429f      	cmp	r7, r3
 800e860:	d327      	bcc.n	800e8b2 <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e862:	1d25      	adds	r5, r4, #4
 800e864:	0028      	movs	r0, r5
 800e866:	f7ff fa9d 	bl	800dda4 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e86a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d003      	beq.n	800e878 <xTaskIncrementTick+0x80>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e870:	0020      	movs	r0, r4
 800e872:	3018      	adds	r0, #24
 800e874:	f7ff fa96 	bl	800dda4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e878:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e87a:	4b15      	ldr	r3, [pc, #84]	; (800e8d0 <xTaskIncrementTick+0xd8>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d901      	bls.n	800e886 <xTaskIncrementTick+0x8e>
 800e882:	4b13      	ldr	r3, [pc, #76]	; (800e8d0 <xTaskIncrementTick+0xd8>)
 800e884:	601a      	str	r2, [r3, #0]
 800e886:	0093      	lsls	r3, r2, #2
 800e888:	189b      	adds	r3, r3, r2
 800e88a:	0098      	lsls	r0, r3, #2
 800e88c:	4b13      	ldr	r3, [pc, #76]	; (800e8dc <xTaskIncrementTick+0xe4>)
 800e88e:	18c0      	adds	r0, r0, r3
 800e890:	0029      	movs	r1, r5
 800e892:	f7ff fa63 	bl	800dd5c <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e896:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e898:	4b0e      	ldr	r3, [pc, #56]	; (800e8d4 <xTaskIncrementTick+0xdc>)
 800e89a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d2d2      	bcs.n	800e848 <xTaskIncrementTick+0x50>
 800e8a2:	e7d2      	b.n	800e84a <xTaskIncrementTick+0x52>
BaseType_t xSwitchRequired = pdFALSE;
 800e8a4:	2600      	movs	r6, #0
 800e8a6:	e7d0      	b.n	800e84a <xTaskIncrementTick+0x52>
						xNextTaskUnblockTime = portMAX_DELAY;
 800e8a8:	4b0b      	ldr	r3, [pc, #44]	; (800e8d8 <xTaskIncrementTick+0xe0>)
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	4252      	negs	r2, r2
 800e8ae:	601a      	str	r2, [r3, #0]
						break;
 800e8b0:	e7b3      	b.n	800e81a <xTaskIncrementTick+0x22>
							xNextTaskUnblockTime = xItemValue;
 800e8b2:	4a09      	ldr	r2, [pc, #36]	; (800e8d8 <xTaskIncrementTick+0xe0>)
 800e8b4:	6013      	str	r3, [r2, #0]
							break;
 800e8b6:	e7b0      	b.n	800e81a <xTaskIncrementTick+0x22>
		++uxPendedTicks;
 800e8b8:	4a05      	ldr	r2, [pc, #20]	; (800e8d0 <xTaskIncrementTick+0xd8>)
 800e8ba:	6913      	ldr	r3, [r2, #16]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	6113      	str	r3, [r2, #16]
BaseType_t xSwitchRequired = pdFALSE;
 800e8c0:	2600      	movs	r6, #0
		if( xYieldPending != pdFALSE )
 800e8c2:	4b03      	ldr	r3, [pc, #12]	; (800e8d0 <xTaskIncrementTick+0xd8>)
 800e8c4:	695b      	ldr	r3, [r3, #20]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d000      	beq.n	800e8cc <xTaskIncrementTick+0xd4>
			xSwitchRequired = pdTRUE;
 800e8ca:	2601      	movs	r6, #1
}
 800e8cc:	0030      	movs	r0, r6
 800e8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8d0:	20002748 	.word	0x20002748
 800e8d4:	200026c8 	.word	0x200026c8
 800e8d8:	200000c4 	.word	0x200000c4
 800e8dc:	20002764 	.word	0x20002764

0800e8e0 <xTaskResumeAll>:
{
 800e8e0:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 800e8e2:	f000 fe03 	bl	800f4ec <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e8e6:	4b2c      	ldr	r3, [pc, #176]	; (800e998 <xTaskResumeAll+0xb8>)
 800e8e8:	689a      	ldr	r2, [r3, #8]
 800e8ea:	3a01      	subs	r2, #1
 800e8ec:	609a      	str	r2, [r3, #8]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8ee:	689b      	ldr	r3, [r3, #8]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d14c      	bne.n	800e98e <xTaskResumeAll+0xae>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e8f4:	4b29      	ldr	r3, [pc, #164]	; (800e99c <xTaskResumeAll+0xbc>)
 800e8f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d10f      	bne.n	800e91c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 800e8fc:	2400      	movs	r4, #0
 800e8fe:	e047      	b.n	800e990 <xTaskResumeAll+0xb0>
					prvAddTaskToReadyList( pxTCB );
 800e900:	0093      	lsls	r3, r2, #2
 800e902:	189b      	adds	r3, r3, r2
 800e904:	0098      	lsls	r0, r3, #2
 800e906:	4b26      	ldr	r3, [pc, #152]	; (800e9a0 <xTaskResumeAll+0xc0>)
 800e908:	18c0      	adds	r0, r0, r3
 800e90a:	0029      	movs	r1, r5
 800e90c:	f7ff fa26 	bl	800dd5c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e910:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e912:	4b22      	ldr	r3, [pc, #136]	; (800e99c <xTaskResumeAll+0xbc>)
 800e914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e918:	429a      	cmp	r2, r3
 800e91a:	d216      	bcs.n	800e94a <xTaskResumeAll+0x6a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e91c:	4b1f      	ldr	r3, [pc, #124]	; (800e99c <xTaskResumeAll+0xbc>)
 800e91e:	695b      	ldr	r3, [r3, #20]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d016      	beq.n	800e952 <xTaskResumeAll+0x72>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e924:	4b1d      	ldr	r3, [pc, #116]	; (800e99c <xTaskResumeAll+0xbc>)
 800e926:	6a1b      	ldr	r3, [r3, #32]
 800e928:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e92a:	0020      	movs	r0, r4
 800e92c:	3018      	adds	r0, #24
 800e92e:	f7ff fa39 	bl	800dda4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e932:	1d25      	adds	r5, r4, #4
 800e934:	0028      	movs	r0, r5
 800e936:	f7ff fa35 	bl	800dda4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e93a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e93c:	4b16      	ldr	r3, [pc, #88]	; (800e998 <xTaskResumeAll+0xb8>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	429a      	cmp	r2, r3
 800e942:	d9dd      	bls.n	800e900 <xTaskResumeAll+0x20>
 800e944:	4b14      	ldr	r3, [pc, #80]	; (800e998 <xTaskResumeAll+0xb8>)
 800e946:	601a      	str	r2, [r3, #0]
 800e948:	e7da      	b.n	800e900 <xTaskResumeAll+0x20>
						xYieldPending = pdTRUE;
 800e94a:	4b13      	ldr	r3, [pc, #76]	; (800e998 <xTaskResumeAll+0xb8>)
 800e94c:	2201      	movs	r2, #1
 800e94e:	615a      	str	r2, [r3, #20]
 800e950:	e7e4      	b.n	800e91c <xTaskResumeAll+0x3c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e952:	4b11      	ldr	r3, [pc, #68]	; (800e998 <xTaskResumeAll+0xb8>)
 800e954:	691b      	ldr	r3, [r3, #16]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d109      	bne.n	800e96e <xTaskResumeAll+0x8e>
				if( xYieldPending == pdTRUE )
 800e95a:	4b0f      	ldr	r3, [pc, #60]	; (800e998 <xTaskResumeAll+0xb8>)
 800e95c:	695b      	ldr	r3, [r3, #20]
 800e95e:	2b01      	cmp	r3, #1
 800e960:	d011      	beq.n	800e986 <xTaskResumeAll+0xa6>
BaseType_t xAlreadyYielded = pdFALSE;
 800e962:	2400      	movs	r4, #0
 800e964:	e014      	b.n	800e990 <xTaskResumeAll+0xb0>
						--uxPendedTicks;
 800e966:	4a0c      	ldr	r2, [pc, #48]	; (800e998 <xTaskResumeAll+0xb8>)
 800e968:	6913      	ldr	r3, [r2, #16]
 800e96a:	3b01      	subs	r3, #1
 800e96c:	6113      	str	r3, [r2, #16]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e96e:	4b0a      	ldr	r3, [pc, #40]	; (800e998 <xTaskResumeAll+0xb8>)
 800e970:	691b      	ldr	r3, [r3, #16]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d0f1      	beq.n	800e95a <xTaskResumeAll+0x7a>
						if( xTaskIncrementTick() != pdFALSE )
 800e976:	f7ff ff3f 	bl	800e7f8 <xTaskIncrementTick>
 800e97a:	2800      	cmp	r0, #0
 800e97c:	d0f3      	beq.n	800e966 <xTaskResumeAll+0x86>
							xYieldPending = pdTRUE;
 800e97e:	4b06      	ldr	r3, [pc, #24]	; (800e998 <xTaskResumeAll+0xb8>)
 800e980:	2201      	movs	r2, #1
 800e982:	615a      	str	r2, [r3, #20]
 800e984:	e7ef      	b.n	800e966 <xTaskResumeAll+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800e986:	f000 fda5 	bl	800f4d4 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800e98a:	2401      	movs	r4, #1
 800e98c:	e000      	b.n	800e990 <xTaskResumeAll+0xb0>
BaseType_t xAlreadyYielded = pdFALSE;
 800e98e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e990:	f000 fdb8 	bl	800f504 <vPortExitCritical>
}
 800e994:	0020      	movs	r0, r4
 800e996:	bd70      	pop	{r4, r5, r6, pc}
 800e998:	20002748 	.word	0x20002748
 800e99c:	200026c8 	.word	0x200026c8
 800e9a0:	20002764 	.word	0x20002764

0800e9a4 <vTaskDelay>:
	{
 800e9a4:	b510      	push	{r4, lr}
 800e9a6:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e9a8:	d00f      	beq.n	800e9ca <vTaskDelay+0x26>
			vTaskSuspendAll();
 800e9aa:	f7ff ff11 	bl	800e7d0 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800e9ae:	4a08      	ldr	r2, [pc, #32]	; (800e9d0 <vTaskDelay+0x2c>)
 800e9b0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800e9b2:	191c      	adds	r4, r3, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e9b4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800e9b6:	3004      	adds	r0, #4
 800e9b8:	f7ff f9f4 	bl	800dda4 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e9bc:	0020      	movs	r0, r4
 800e9be:	f7ff fdc9 	bl	800e554 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e9c2:	f7ff ff8d 	bl	800e8e0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	d101      	bne.n	800e9ce <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
 800e9ca:	f000 fd83 	bl	800f4d4 <vPortYield>
	}
 800e9ce:	bd10      	pop	{r4, pc}
 800e9d0:	200026c8 	.word	0x200026c8

0800e9d4 <prvCheckTasksWaitingTermination>:
{
 800e9d4:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e9d6:	4b11      	ldr	r3, [pc, #68]	; (800ea1c <prvCheckTasksWaitingTermination+0x48>)
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d01c      	beq.n	800ea18 <prvCheckTasksWaitingTermination+0x44>
			vTaskSuspendAll();
 800e9de:	f7ff fef7 	bl	800e7d0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e9e2:	4b0f      	ldr	r3, [pc, #60]	; (800ea20 <prvCheckTasksWaitingTermination+0x4c>)
 800e9e4:	6d5c      	ldr	r4, [r3, #84]	; 0x54
			( void ) xTaskResumeAll();
 800e9e6:	f7ff ff7b 	bl	800e8e0 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800e9ea:	2c00      	cmp	r4, #0
 800e9ec:	d0f3      	beq.n	800e9d6 <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
 800e9ee:	f000 fd7d 	bl	800f4ec <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e9f2:	4c0b      	ldr	r4, [pc, #44]	; (800ea20 <prvCheckTasksWaitingTermination+0x4c>)
 800e9f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800e9f6:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e9f8:	1d28      	adds	r0, r5, #4
 800e9fa:	f7ff f9d3 	bl	800dda4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e9fe:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800ea00:	3b01      	subs	r3, #1
 800ea02:	6763      	str	r3, [r4, #116]	; 0x74
					--uxTasksDeleted;
 800ea04:	4a05      	ldr	r2, [pc, #20]	; (800ea1c <prvCheckTasksWaitingTermination+0x48>)
 800ea06:	6853      	ldr	r3, [r2, #4]
 800ea08:	3b01      	subs	r3, #1
 800ea0a:	6053      	str	r3, [r2, #4]
				taskEXIT_CRITICAL();
 800ea0c:	f000 fd7a 	bl	800f504 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 800ea10:	0028      	movs	r0, r5
 800ea12:	f7ff fd21 	bl	800e458 <prvDeleteTCB>
 800ea16:	e7de      	b.n	800e9d6 <prvCheckTasksWaitingTermination+0x2>
}
 800ea18:	bd70      	pop	{r4, r5, r6, pc}
 800ea1a:	46c0      	nop			; (mov r8, r8)
 800ea1c:	20002748 	.word	0x20002748
 800ea20:	200026c8 	.word	0x200026c8

0800ea24 <prvIdleTask>:
{
 800ea24:	b510      	push	{r4, lr}
		prvCheckTasksWaitingTermination();
 800ea26:	f7ff ffd5 	bl	800e9d4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ea2a:	4b03      	ldr	r3, [pc, #12]	; (800ea38 <prvIdleTask+0x14>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d9f9      	bls.n	800ea26 <prvIdleTask+0x2>
				taskYIELD();
 800ea32:	f000 fd4f 	bl	800f4d4 <vPortYield>
 800ea36:	e7f6      	b.n	800ea26 <prvIdleTask+0x2>
 800ea38:	20002764 	.word	0x20002764

0800ea3c <uxTaskGetSystemState>:
	{
 800ea3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea3e:	0007      	movs	r7, r0
 800ea40:	000c      	movs	r4, r1
 800ea42:	0016      	movs	r6, r2
		vTaskSuspendAll();
 800ea44:	f7ff fec4 	bl	800e7d0 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800ea48:	4b1e      	ldr	r3, [pc, #120]	; (800eac4 <uxTaskGetSystemState+0x88>)
 800ea4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea4c:	42a3      	cmp	r3, r4
 800ea4e:	d833      	bhi.n	800eab8 <uxTaskGetSystemState+0x7c>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800ea50:	2507      	movs	r5, #7
 800ea52:	2400      	movs	r4, #0
					uxQueue--;
 800ea54:	3d01      	subs	r5, #1
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800ea56:	0160      	lsls	r0, r4, #5
 800ea58:	00ab      	lsls	r3, r5, #2
 800ea5a:	195b      	adds	r3, r3, r5
 800ea5c:	0099      	lsls	r1, r3, #2
 800ea5e:	4b1a      	ldr	r3, [pc, #104]	; (800eac8 <uxTaskGetSystemState+0x8c>)
 800ea60:	18c9      	adds	r1, r1, r3
 800ea62:	1838      	adds	r0, r7, r0
 800ea64:	2201      	movs	r2, #1
 800ea66:	f7ff fc93 	bl	800e390 <prvListTaskWithinSingleList>
 800ea6a:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea6c:	2d00      	cmp	r5, #0
 800ea6e:	d1f1      	bne.n	800ea54 <uxTaskGetSystemState+0x18>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800ea70:	0160      	lsls	r0, r4, #5
 800ea72:	4d14      	ldr	r5, [pc, #80]	; (800eac4 <uxTaskGetSystemState+0x88>)
 800ea74:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800ea76:	1838      	adds	r0, r7, r0
 800ea78:	2202      	movs	r2, #2
 800ea7a:	f7ff fc89 	bl	800e390 <prvListTaskWithinSingleList>
 800ea7e:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800ea80:	0160      	lsls	r0, r4, #5
 800ea82:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800ea84:	1838      	adds	r0, r7, r0
 800ea86:	2202      	movs	r2, #2
 800ea88:	f7ff fc82 	bl	800e390 <prvListTaskWithinSingleList>
 800ea8c:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800ea8e:	0160      	lsls	r0, r4, #5
 800ea90:	0029      	movs	r1, r5
 800ea92:	3154      	adds	r1, #84	; 0x54
 800ea94:	1838      	adds	r0, r7, r0
 800ea96:	2204      	movs	r2, #4
 800ea98:	f7ff fc7a 	bl	800e390 <prvListTaskWithinSingleList>
 800ea9c:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800ea9e:	0160      	lsls	r0, r4, #5
 800eaa0:	1838      	adds	r0, r7, r0
 800eaa2:	2203      	movs	r2, #3
 800eaa4:	0029      	movs	r1, r5
 800eaa6:	f7ff fc73 	bl	800e390 <prvListTaskWithinSingleList>
 800eaaa:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800eaac:	2e00      	cmp	r6, #0
 800eaae:	d004      	beq.n	800eaba <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800eab0:	f7f9 f81c 	bl	8007aec <ulMainGetRunTimeCounterValue>
 800eab4:	6030      	str	r0, [r6, #0]
 800eab6:	e000      	b.n	800eaba <uxTaskGetSystemState+0x7e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800eab8:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 800eaba:	f7ff ff11 	bl	800e8e0 <xTaskResumeAll>
	}
 800eabe:	0020      	movs	r0, r4
 800eac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eac2:	46c0      	nop			; (mov r8, r8)
 800eac4:	200026c8 	.word	0x200026c8
 800eac8:	20002764 	.word	0x20002764

0800eacc <vTaskSwitchContext>:
{
 800eacc:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eace:	4b31      	ldr	r3, [pc, #196]	; (800eb94 <vTaskSwitchContext+0xc8>)
 800ead0:	689b      	ldr	r3, [r3, #8]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d003      	beq.n	800eade <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800ead6:	4b2f      	ldr	r3, [pc, #188]	; (800eb94 <vTaskSwitchContext+0xc8>)
 800ead8:	2201      	movs	r2, #1
 800eada:	615a      	str	r2, [r3, #20]
}
 800eadc:	bd70      	pop	{r4, r5, r6, pc}
		xYieldPending = pdFALSE;
 800eade:	4c2d      	ldr	r4, [pc, #180]	; (800eb94 <vTaskSwitchContext+0xc8>)
 800eae0:	2300      	movs	r3, #0
 800eae2:	6163      	str	r3, [r4, #20]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800eae4:	f7f9 f802 	bl	8007aec <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800eae8:	69a3      	ldr	r3, [r4, #24]
 800eaea:	4298      	cmp	r0, r3
 800eaec:	d906      	bls.n	800eafc <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800eaee:	4a2a      	ldr	r2, [pc, #168]	; (800eb98 <vTaskSwitchContext+0xcc>)
 800eaf0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800eaf2:	1ac3      	subs	r3, r0, r3
 800eaf4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800eaf6:	468c      	mov	ip, r1
 800eaf8:	4463      	add	r3, ip
 800eafa:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800eafc:	4b25      	ldr	r3, [pc, #148]	; (800eb94 <vTaskSwitchContext+0xc8>)
 800eafe:	6198      	str	r0, [r3, #24]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800eb00:	4b25      	ldr	r3, [pc, #148]	; (800eb98 <vTaskSwitchContext+0xcc>)
 800eb02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800eb04:	6812      	ldr	r2, [r2, #0]
 800eb06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d90f      	bls.n	800eb2e <vTaskSwitchContext+0x62>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800eb0e:	4b22      	ldr	r3, [pc, #136]	; (800eb98 <vTaskSwitchContext+0xcc>)
 800eb10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb12:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eb14:	2214      	movs	r2, #20
 800eb16:	4921      	ldr	r1, [pc, #132]	; (800eb9c <vTaskSwitchContext+0xd0>)
 800eb18:	f004 f936 	bl	8012d88 <memcmp>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d011      	beq.n	800eb44 <vTaskSwitchContext+0x78>
 800eb20:	4b1d      	ldr	r3, [pc, #116]	; (800eb98 <vTaskSwitchContext+0xcc>)
 800eb22:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800eb24:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800eb26:	3134      	adds	r1, #52	; 0x34
 800eb28:	f7fe f9a2 	bl	800ce70 <vApplicationStackOverflowHook>
 800eb2c:	e00a      	b.n	800eb44 <vTaskSwitchContext+0x78>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800eb2e:	4b1a      	ldr	r3, [pc, #104]	; (800eb98 <vTaskSwitchContext+0xcc>)
 800eb30:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800eb32:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800eb34:	3134      	adds	r1, #52	; 0x34
 800eb36:	f7fe f99b 	bl	800ce70 <vApplicationStackOverflowHook>
 800eb3a:	e7e8      	b.n	800eb0e <vTaskSwitchContext+0x42>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800eb3c:	4a15      	ldr	r2, [pc, #84]	; (800eb94 <vTaskSwitchContext+0xc8>)
 800eb3e:	6813      	ldr	r3, [r2, #0]
 800eb40:	3b01      	subs	r3, #1
 800eb42:	6013      	str	r3, [r2, #0]
 800eb44:	4b13      	ldr	r3, [pc, #76]	; (800eb94 <vTaskSwitchContext+0xc8>)
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	0093      	lsls	r3, r2, #2
 800eb4a:	189b      	adds	r3, r3, r2
 800eb4c:	009a      	lsls	r2, r3, #2
 800eb4e:	4b14      	ldr	r3, [pc, #80]	; (800eba0 <vTaskSwitchContext+0xd4>)
 800eb50:	58d3      	ldr	r3, [r2, r3]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d0f2      	beq.n	800eb3c <vTaskSwitchContext+0x70>
 800eb56:	4b0f      	ldr	r3, [pc, #60]	; (800eb94 <vTaskSwitchContext+0xc8>)
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	4d11      	ldr	r5, [pc, #68]	; (800eba0 <vTaskSwitchContext+0xd4>)
 800eb5c:	0091      	lsls	r1, r2, #2
 800eb5e:	188b      	adds	r3, r1, r2
 800eb60:	0098      	lsls	r0, r3, #2
 800eb62:	1828      	adds	r0, r5, r0
 800eb64:	6843      	ldr	r3, [r0, #4]
 800eb66:	685c      	ldr	r4, [r3, #4]
 800eb68:	6044      	str	r4, [r0, #4]
 800eb6a:	1889      	adds	r1, r1, r2
 800eb6c:	008b      	lsls	r3, r1, #2
 800eb6e:	0019      	movs	r1, r3
 800eb70:	3308      	adds	r3, #8
 800eb72:	195b      	adds	r3, r3, r5
 800eb74:	429c      	cmp	r4, r3
 800eb76:	d009      	beq.n	800eb8c <vTaskSwitchContext+0xc0>
 800eb78:	0093      	lsls	r3, r2, #2
 800eb7a:	189a      	adds	r2, r3, r2
 800eb7c:	0091      	lsls	r1, r2, #2
 800eb7e:	4b08      	ldr	r3, [pc, #32]	; (800eba0 <vTaskSwitchContext+0xd4>)
 800eb80:	185b      	adds	r3, r3, r1
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	68da      	ldr	r2, [r3, #12]
 800eb86:	4b04      	ldr	r3, [pc, #16]	; (800eb98 <vTaskSwitchContext+0xcc>)
 800eb88:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800eb8a:	e7a7      	b.n	800eadc <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800eb8c:	6860      	ldr	r0, [r4, #4]
 800eb8e:	186b      	adds	r3, r5, r1
 800eb90:	6058      	str	r0, [r3, #4]
 800eb92:	e7f1      	b.n	800eb78 <vTaskSwitchContext+0xac>
 800eb94:	20002748 	.word	0x20002748
 800eb98:	200026c8 	.word	0x200026c8
 800eb9c:	08017be8 	.word	0x08017be8
 800eba0:	20002764 	.word	0x20002764

0800eba4 <vTaskPlaceOnEventList>:
{
 800eba4:	b570      	push	{r4, r5, r6, lr}
 800eba6:	000d      	movs	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eba8:	4c0b      	ldr	r4, [pc, #44]	; (800ebd8 <vTaskPlaceOnEventList+0x34>)
 800ebaa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800ebac:	3118      	adds	r1, #24
 800ebae:	f7ff f8e1 	bl	800dd74 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ebb2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800ebb4:	3004      	adds	r0, #4
 800ebb6:	f7ff f8f5 	bl	800dda4 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800ebba:	1c6b      	adds	r3, r5, #1
 800ebbc:	d005      	beq.n	800ebca <vTaskPlaceOnEventList+0x26>
			xTimeToWake = xTickCount + xTicksToWait;
 800ebbe:	4b06      	ldr	r3, [pc, #24]	; (800ebd8 <vTaskPlaceOnEventList+0x34>)
 800ebc0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800ebc2:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ebc4:	f7ff fcc6 	bl	800e554 <prvAddCurrentTaskToDelayedList>
}
 800ebc8:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ebca:	4803      	ldr	r0, [pc, #12]	; (800ebd8 <vTaskPlaceOnEventList+0x34>)
 800ebcc:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800ebce:	3104      	adds	r1, #4
 800ebd0:	f7ff f8c4 	bl	800dd5c <vListInsertEnd>
 800ebd4:	e7f8      	b.n	800ebc8 <vTaskPlaceOnEventList+0x24>
 800ebd6:	46c0      	nop			; (mov r8, r8)
 800ebd8:	200026c8 	.word	0x200026c8

0800ebdc <vTaskPlaceOnEventListRestricted>:
	{
 800ebdc:	b570      	push	{r4, r5, r6, lr}
 800ebde:	000d      	movs	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ebe0:	4c06      	ldr	r4, [pc, #24]	; (800ebfc <vTaskPlaceOnEventListRestricted+0x20>)
 800ebe2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800ebe4:	3118      	adds	r1, #24
 800ebe6:	f7ff f8b9 	bl	800dd5c <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ebea:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800ebec:	3004      	adds	r0, #4
 800ebee:	f7ff f8d9 	bl	800dda4 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800ebf2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800ebf4:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ebf6:	f7ff fcad 	bl	800e554 <prvAddCurrentTaskToDelayedList>
	}
 800ebfa:	bd70      	pop	{r4, r5, r6, pc}
 800ebfc:	200026c8 	.word	0x200026c8

0800ec00 <xTaskRemoveFromEventList>:
{
 800ec00:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ec02:	68c3      	ldr	r3, [r0, #12]
 800ec04:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ec06:	0025      	movs	r5, r4
 800ec08:	3518      	adds	r5, #24
 800ec0a:	0028      	movs	r0, r5
 800ec0c:	f7ff f8ca 	bl	800dda4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec10:	4b14      	ldr	r3, [pc, #80]	; (800ec64 <xTaskRemoveFromEventList+0x64>)
 800ec12:	689b      	ldr	r3, [r3, #8]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d11d      	bne.n	800ec54 <xTaskRemoveFromEventList+0x54>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800ec18:	1d25      	adds	r5, r4, #4
 800ec1a:	0028      	movs	r0, r5
 800ec1c:	f7ff f8c2 	bl	800dda4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ec20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ec22:	4b10      	ldr	r3, [pc, #64]	; (800ec64 <xTaskRemoveFromEventList+0x64>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d901      	bls.n	800ec2e <xTaskRemoveFromEventList+0x2e>
 800ec2a:	4b0e      	ldr	r3, [pc, #56]	; (800ec64 <xTaskRemoveFromEventList+0x64>)
 800ec2c:	601a      	str	r2, [r3, #0]
 800ec2e:	0093      	lsls	r3, r2, #2
 800ec30:	189b      	adds	r3, r3, r2
 800ec32:	0098      	lsls	r0, r3, #2
 800ec34:	4b0c      	ldr	r3, [pc, #48]	; (800ec68 <xTaskRemoveFromEventList+0x68>)
 800ec36:	18c0      	adds	r0, r0, r3
 800ec38:	0029      	movs	r1, r5
 800ec3a:	f7ff f88f 	bl	800dd5c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ec3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ec40:	4b0a      	ldr	r3, [pc, #40]	; (800ec6c <xTaskRemoveFromEventList+0x6c>)
 800ec42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d90a      	bls.n	800ec60 <xTaskRemoveFromEventList+0x60>
		xYieldPending = pdTRUE;
 800ec4a:	4b06      	ldr	r3, [pc, #24]	; (800ec64 <xTaskRemoveFromEventList+0x64>)
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	615a      	str	r2, [r3, #20]
		xReturn = pdTRUE;
 800ec50:	2001      	movs	r0, #1
}
 800ec52:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ec54:	4805      	ldr	r0, [pc, #20]	; (800ec6c <xTaskRemoveFromEventList+0x6c>)
 800ec56:	0029      	movs	r1, r5
 800ec58:	3014      	adds	r0, #20
 800ec5a:	f7ff f87f 	bl	800dd5c <vListInsertEnd>
 800ec5e:	e7ee      	b.n	800ec3e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800ec60:	2000      	movs	r0, #0
	return xReturn;
 800ec62:	e7f6      	b.n	800ec52 <xTaskRemoveFromEventList+0x52>
 800ec64:	20002748 	.word	0x20002748
 800ec68:	20002764 	.word	0x20002764
 800ec6c:	200026c8 	.word	0x200026c8

0800ec70 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ec70:	4b03      	ldr	r3, [pc, #12]	; (800ec80 <vTaskSetTimeOutState+0x10>)
 800ec72:	68db      	ldr	r3, [r3, #12]
 800ec74:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ec76:	4b03      	ldr	r3, [pc, #12]	; (800ec84 <vTaskSetTimeOutState+0x14>)
 800ec78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec7a:	6043      	str	r3, [r0, #4]
}
 800ec7c:	4770      	bx	lr
 800ec7e:	46c0      	nop			; (mov r8, r8)
 800ec80:	20002748 	.word	0x20002748
 800ec84:	200026c8 	.word	0x200026c8

0800ec88 <xTaskCheckForTimeOut>:
{
 800ec88:	b570      	push	{r4, r5, r6, lr}
 800ec8a:	0004      	movs	r4, r0
 800ec8c:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800ec8e:	f000 fc2d 	bl	800f4ec <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ec92:	4b11      	ldr	r3, [pc, #68]	; (800ecd8 <xTaskCheckForTimeOut+0x50>)
 800ec94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
			if( *pxTicksToWait == portMAX_DELAY )
 800ec96:	682b      	ldr	r3, [r5, #0]
 800ec98:	1c59      	adds	r1, r3, #1
 800ec9a:	d018      	beq.n	800ecce <xTaskCheckForTimeOut+0x46>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec9c:	490f      	ldr	r1, [pc, #60]	; (800ecdc <xTaskCheckForTimeOut+0x54>)
 800ec9e:	68c9      	ldr	r1, [r1, #12]
 800eca0:	6820      	ldr	r0, [r4, #0]
 800eca2:	4288      	cmp	r0, r1
 800eca4:	d002      	beq.n	800ecac <xTaskCheckForTimeOut+0x24>
 800eca6:	6861      	ldr	r1, [r4, #4]
 800eca8:	4291      	cmp	r1, r2
 800ecaa:	d912      	bls.n	800ecd2 <xTaskCheckForTimeOut+0x4a>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ecac:	6861      	ldr	r1, [r4, #4]
 800ecae:	1a50      	subs	r0, r2, r1
 800ecb0:	4283      	cmp	r3, r0
 800ecb2:	d804      	bhi.n	800ecbe <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800ecb4:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800ecb6:	f000 fc25 	bl	800f504 <vPortExitCritical>
}
 800ecba:	0020      	movs	r0, r4
 800ecbc:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800ecbe:	1a8a      	subs	r2, r1, r2
 800ecc0:	189b      	adds	r3, r3, r2
 800ecc2:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800ecc4:	0020      	movs	r0, r4
 800ecc6:	f7ff ffd3 	bl	800ec70 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800ecca:	2400      	movs	r4, #0
 800eccc:	e7f3      	b.n	800ecb6 <xTaskCheckForTimeOut+0x2e>
				xReturn = pdFALSE;
 800ecce:	2400      	movs	r4, #0
 800ecd0:	e7f1      	b.n	800ecb6 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
 800ecd2:	2401      	movs	r4, #1
 800ecd4:	e7ef      	b.n	800ecb6 <xTaskCheckForTimeOut+0x2e>
 800ecd6:	46c0      	nop			; (mov r8, r8)
 800ecd8:	200026c8 	.word	0x200026c8
 800ecdc:	20002748 	.word	0x20002748

0800ece0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ece0:	4b01      	ldr	r3, [pc, #4]	; (800ece8 <vTaskMissedYield+0x8>)
 800ece2:	2201      	movs	r2, #1
 800ece4:	615a      	str	r2, [r3, #20]
}
 800ece6:	4770      	bx	lr
 800ece8:	20002748 	.word	0x20002748

0800ecec <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ecec:	4b06      	ldr	r3, [pc, #24]	; (800ed08 <xTaskGetSchedulerState+0x1c>)
 800ecee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d007      	beq.n	800ed04 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecf4:	4b05      	ldr	r3, [pc, #20]	; (800ed0c <xTaskGetSchedulerState+0x20>)
 800ecf6:	689b      	ldr	r3, [r3, #8]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d001      	beq.n	800ed00 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 800ecfc:	2000      	movs	r0, #0
		return xReturn;
 800ecfe:	e002      	b.n	800ed06 <xTaskGetSchedulerState+0x1a>
				xReturn = taskSCHEDULER_RUNNING;
 800ed00:	2002      	movs	r0, #2
 800ed02:	e000      	b.n	800ed06 <xTaskGetSchedulerState+0x1a>
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ed04:	2001      	movs	r0, #1
	}
 800ed06:	4770      	bx	lr
 800ed08:	200026c8 	.word	0x200026c8
 800ed0c:	20002748 	.word	0x20002748

0800ed10 <vTaskPriorityInherit>:
	{
 800ed10:	b570      	push	{r4, r5, r6, lr}
 800ed12:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800ed14:	d01a      	beq.n	800ed4c <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ed16:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ed18:	4a19      	ldr	r2, [pc, #100]	; (800ed80 <vTaskPriorityInherit+0x70>)
 800ed1a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ed1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d214      	bcs.n	800ed4c <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed22:	6982      	ldr	r2, [r0, #24]
 800ed24:	2a00      	cmp	r2, #0
 800ed26:	db05      	blt.n	800ed34 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed28:	4a15      	ldr	r2, [pc, #84]	; (800ed80 <vTaskPriorityInherit+0x70>)
 800ed2a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ed2c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ed2e:	2207      	movs	r2, #7
 800ed30:	1a52      	subs	r2, r2, r1
 800ed32:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ed34:	009a      	lsls	r2, r3, #2
 800ed36:	18d3      	adds	r3, r2, r3
 800ed38:	009a      	lsls	r2, r3, #2
 800ed3a:	4b12      	ldr	r3, [pc, #72]	; (800ed84 <vTaskPriorityInherit+0x74>)
 800ed3c:	18d2      	adds	r2, r2, r3
 800ed3e:	6963      	ldr	r3, [r4, #20]
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d004      	beq.n	800ed4e <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed44:	4b0e      	ldr	r3, [pc, #56]	; (800ed80 <vTaskPriorityInherit+0x70>)
 800ed46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed4a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800ed4c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ed4e:	1d25      	adds	r5, r4, #4
 800ed50:	0028      	movs	r0, r5
 800ed52:	f7ff f827 	bl	800dda4 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed56:	4b0a      	ldr	r3, [pc, #40]	; (800ed80 <vTaskPriorityInherit+0x70>)
 800ed58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed5c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ed5e:	4a0a      	ldr	r2, [pc, #40]	; (800ed88 <vTaskPriorityInherit+0x78>)
 800ed60:	6812      	ldr	r2, [r2, #0]
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d808      	bhi.n	800ed78 <vTaskPriorityInherit+0x68>
 800ed66:	009a      	lsls	r2, r3, #2
 800ed68:	18d3      	adds	r3, r2, r3
 800ed6a:	0098      	lsls	r0, r3, #2
 800ed6c:	4b05      	ldr	r3, [pc, #20]	; (800ed84 <vTaskPriorityInherit+0x74>)
 800ed6e:	18c0      	adds	r0, r0, r3
 800ed70:	0029      	movs	r1, r5
 800ed72:	f7fe fff3 	bl	800dd5c <vListInsertEnd>
	}
 800ed76:	e7e9      	b.n	800ed4c <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800ed78:	4a03      	ldr	r2, [pc, #12]	; (800ed88 <vTaskPriorityInherit+0x78>)
 800ed7a:	6013      	str	r3, [r2, #0]
 800ed7c:	e7f3      	b.n	800ed66 <vTaskPriorityInherit+0x56>
 800ed7e:	46c0      	nop			; (mov r8, r8)
 800ed80:	200026c8 	.word	0x200026c8
 800ed84:	20002764 	.word	0x20002764
 800ed88:	20002748 	.word	0x20002748

0800ed8c <xTaskPriorityDisinherit>:
	{
 800ed8c:	b570      	push	{r4, r5, r6, lr}
 800ed8e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800ed90:	d023      	beq.n	800edda <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ed92:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ed94:	3b01      	subs	r3, #1
 800ed96:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed98:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ed9a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800ed9c:	428a      	cmp	r2, r1
 800ed9e:	d01e      	beq.n	800edde <xTaskPriorityDisinherit+0x52>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d001      	beq.n	800eda8 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800eda4:	2000      	movs	r0, #0
	}
 800eda6:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eda8:	1d05      	adds	r5, r0, #4
 800edaa:	0028      	movs	r0, r5
 800edac:	f7fe fffa 	bl	800dda4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800edb0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800edb2:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edb4:	2207      	movs	r2, #7
 800edb6:	1ad2      	subs	r2, r2, r3
 800edb8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800edba:	4a0a      	ldr	r2, [pc, #40]	; (800ede4 <xTaskPriorityDisinherit+0x58>)
 800edbc:	6812      	ldr	r2, [r2, #0]
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d901      	bls.n	800edc6 <xTaskPriorityDisinherit+0x3a>
 800edc2:	4a08      	ldr	r2, [pc, #32]	; (800ede4 <xTaskPriorityDisinherit+0x58>)
 800edc4:	6013      	str	r3, [r2, #0]
 800edc6:	009a      	lsls	r2, r3, #2
 800edc8:	18d3      	adds	r3, r2, r3
 800edca:	0098      	lsls	r0, r3, #2
 800edcc:	4b06      	ldr	r3, [pc, #24]	; (800ede8 <xTaskPriorityDisinherit+0x5c>)
 800edce:	18c0      	adds	r0, r0, r3
 800edd0:	0029      	movs	r1, r5
 800edd2:	f7fe ffc3 	bl	800dd5c <vListInsertEnd>
					xReturn = pdTRUE;
 800edd6:	2001      	movs	r0, #1
 800edd8:	e7e5      	b.n	800eda6 <xTaskPriorityDisinherit+0x1a>
	BaseType_t xReturn = pdFALSE;
 800edda:	2000      	movs	r0, #0
 800eddc:	e7e3      	b.n	800eda6 <xTaskPriorityDisinherit+0x1a>
 800edde:	2000      	movs	r0, #0
 800ede0:	e7e1      	b.n	800eda6 <xTaskPriorityDisinherit+0x1a>
 800ede2:	46c0      	nop			; (mov r8, r8)
 800ede4:	20002748 	.word	0x20002748
 800ede8:	20002764 	.word	0x20002764

0800edec <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800edec:	b570      	push	{r4, r5, r6, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800edf2:	2300      	movs	r3, #0
 800edf4:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800edf6:	4b28      	ldr	r3, [pc, #160]	; (800ee98 <vTaskList+0xac>)
 800edf8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800edfa:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800edfc:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800edfe:	0140      	lsls	r0, r0, #5
 800ee00:	f000 fc16 	bl	800f630 <pvPortMalloc>
 800ee04:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800ee06:	d045      	beq.n	800ee94 <vTaskList+0xa8>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ee08:	9903      	ldr	r1, [sp, #12]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	f7ff fe16 	bl	800ea3c <uxTaskGetSystemState>
 800ee10:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ee12:	2300      	movs	r3, #0
 800ee14:	9302      	str	r3, [sp, #8]
 800ee16:	e023      	b.n	800ee60 <vTaskList+0x74>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d134      	bne.n	800ee86 <vTaskList+0x9a>
				{
					case eReady:		cStatus = tskREADY_CHAR;
 800ee1c:	2552      	movs	r5, #82	; 0x52
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ee1e:	9b02      	ldr	r3, [sp, #8]
 800ee20:	015b      	lsls	r3, r3, #5
 800ee22:	18f3      	adds	r3, r6, r3
 800ee24:	6859      	ldr	r1, [r3, #4]
 800ee26:	0020      	movs	r0, r4
 800ee28:	f7ff fbb4 	bl	800e594 <prvWriteNameToBuffer>
 800ee2c:	0004      	movs	r4, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ee2e:	9b02      	ldr	r3, [sp, #8]
 800ee30:	015b      	lsls	r3, r3, #5
 800ee32:	18f3      	adds	r3, r6, r3
 800ee34:	691b      	ldr	r3, [r3, #16]
 800ee36:	9a02      	ldr	r2, [sp, #8]
 800ee38:	0152      	lsls	r2, r2, #5
 800ee3a:	18b2      	adds	r2, r6, r2
 800ee3c:	8b91      	ldrh	r1, [r2, #28]
 800ee3e:	9a02      	ldr	r2, [sp, #8]
 800ee40:	0152      	lsls	r2, r2, #5
 800ee42:	18b2      	adds	r2, r6, r2
 800ee44:	6892      	ldr	r2, [r2, #8]
 800ee46:	9201      	str	r2, [sp, #4]
 800ee48:	9100      	str	r1, [sp, #0]
 800ee4a:	002a      	movs	r2, r5
 800ee4c:	4913      	ldr	r1, [pc, #76]	; (800ee9c <vTaskList+0xb0>)
 800ee4e:	f004 f9ad 	bl	80131ac <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ee52:	0020      	movs	r0, r4
 800ee54:	f7f1 f960 	bl	8000118 <strlen>
 800ee58:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800ee5a:	9b02      	ldr	r3, [sp, #8]
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	9302      	str	r3, [sp, #8]
 800ee60:	9a02      	ldr	r2, [sp, #8]
 800ee62:	9b03      	ldr	r3, [sp, #12]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d212      	bcs.n	800ee8e <vTaskList+0xa2>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ee68:	9b02      	ldr	r3, [sp, #8]
 800ee6a:	015b      	lsls	r3, r3, #5
 800ee6c:	18f3      	adds	r3, r6, r3
 800ee6e:	7b1b      	ldrb	r3, [r3, #12]
 800ee70:	2b02      	cmp	r3, #2
 800ee72:	d00a      	beq.n	800ee8a <vTaskList+0x9e>
 800ee74:	d9d0      	bls.n	800ee18 <vTaskList+0x2c>
 800ee76:	2b03      	cmp	r3, #3
 800ee78:	d003      	beq.n	800ee82 <vTaskList+0x96>
 800ee7a:	2b04      	cmp	r3, #4
 800ee7c:	d103      	bne.n	800ee86 <vTaskList+0x9a>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ee7e:	2544      	movs	r5, #68	; 0x44
										break;
 800ee80:	e7cd      	b.n	800ee1e <vTaskList+0x32>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ee82:	2553      	movs	r5, #83	; 0x53
										break;
 800ee84:	e7cb      	b.n	800ee1e <vTaskList+0x32>
										cStatus = 0x00;
 800ee86:	2500      	movs	r5, #0
										break;
 800ee88:	e7c9      	b.n	800ee1e <vTaskList+0x32>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ee8a:	2542      	movs	r5, #66	; 0x42
 800ee8c:	e7c7      	b.n	800ee1e <vTaskList+0x32>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ee8e:	0030      	movs	r0, r6
 800ee90:	f000 fc32 	bl	800f6f8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee94:	b004      	add	sp, #16
 800ee96:	bd70      	pop	{r4, r5, r6, pc}
 800ee98:	200026c8 	.word	0x200026c8
 800ee9c:	0801a500 	.word	0x0801a500

0800eea0 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800eea0:	b570      	push	{r4, r5, r6, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800eea6:	2300      	movs	r3, #0
 800eea8:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800eeaa:	4b25      	ldr	r3, [pc, #148]	; (800ef40 <vTaskGetRunTimeStats+0xa0>)
 800eeac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800eeae:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800eeb0:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800eeb2:	0140      	lsls	r0, r0, #5
 800eeb4:	f000 fbbc 	bl	800f630 <pvPortMalloc>
 800eeb8:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800eeba:	d03e      	beq.n	800ef3a <vTaskGetRunTimeStats+0x9a>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800eebc:	9903      	ldr	r1, [sp, #12]
 800eebe:	aa01      	add	r2, sp, #4
 800eec0:	f7ff fdbc 	bl	800ea3c <uxTaskGetSystemState>
 800eec4:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800eec6:	2164      	movs	r1, #100	; 0x64
 800eec8:	9801      	ldr	r0, [sp, #4]
 800eeca:	f7f1 f941 	bl	8000150 <__udivsi3>
 800eece:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800eed0:	2800      	cmp	r0, #0
 800eed2:	d02f      	beq.n	800ef34 <vTaskGetRunTimeStats+0x94>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800eed4:	2300      	movs	r3, #0
 800eed6:	9302      	str	r3, [sp, #8]
 800eed8:	e00d      	b.n	800eef6 <vTaskGetRunTimeStats+0x56>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800eeda:	9b02      	ldr	r3, [sp, #8]
 800eedc:	015b      	lsls	r3, r3, #5
 800eede:	18f3      	adds	r3, r6, r3
 800eee0:	699a      	ldr	r2, [r3, #24]
 800eee2:	4918      	ldr	r1, [pc, #96]	; (800ef44 <vTaskGetRunTimeStats+0xa4>)
 800eee4:	f004 f962 	bl	80131ac <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800eee8:	0020      	movs	r0, r4
 800eeea:	f7f1 f915 	bl	8000118 <strlen>
 800eeee:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800eef0:	9b02      	ldr	r3, [sp, #8]
 800eef2:	3301      	adds	r3, #1
 800eef4:	9302      	str	r3, [sp, #8]
 800eef6:	9a02      	ldr	r2, [sp, #8]
 800eef8:	9b03      	ldr	r3, [sp, #12]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d21a      	bcs.n	800ef34 <vTaskGetRunTimeStats+0x94>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800eefe:	9b02      	ldr	r3, [sp, #8]
 800ef00:	015b      	lsls	r3, r3, #5
 800ef02:	18f3      	adds	r3, r6, r3
 800ef04:	6998      	ldr	r0, [r3, #24]
 800ef06:	9901      	ldr	r1, [sp, #4]
 800ef08:	f7f1 f922 	bl	8000150 <__udivsi3>
 800ef0c:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ef0e:	9b02      	ldr	r3, [sp, #8]
 800ef10:	015b      	lsls	r3, r3, #5
 800ef12:	18f3      	adds	r3, r6, r3
 800ef14:	6859      	ldr	r1, [r3, #4]
 800ef16:	0020      	movs	r0, r4
 800ef18:	f7ff fb3c 	bl	800e594 <prvWriteNameToBuffer>
 800ef1c:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800ef1e:	2d00      	cmp	r5, #0
 800ef20:	d0db      	beq.n	800eeda <vTaskGetRunTimeStats+0x3a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ef22:	9b02      	ldr	r3, [sp, #8]
 800ef24:	015b      	lsls	r3, r3, #5
 800ef26:	18f3      	adds	r3, r6, r3
 800ef28:	699a      	ldr	r2, [r3, #24]
 800ef2a:	002b      	movs	r3, r5
 800ef2c:	4906      	ldr	r1, [pc, #24]	; (800ef48 <vTaskGetRunTimeStats+0xa8>)
 800ef2e:	f004 f93d 	bl	80131ac <sprintf>
 800ef32:	e7d9      	b.n	800eee8 <vTaskGetRunTimeStats+0x48>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ef34:	0030      	movs	r0, r6
 800ef36:	f000 fbdf 	bl	800f6f8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef3a:	b004      	add	sp, #16
 800ef3c:	bd70      	pop	{r4, r5, r6, pc}
 800ef3e:	46c0      	nop			; (mov r8, r8)
 800ef40:	200026c8 	.word	0x200026c8
 800ef44:	0801a51c 	.word	0x0801a51c
 800ef48:	0801a510 	.word	0x0801a510

0800ef4c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ef4c:	4b05      	ldr	r3, [pc, #20]	; (800ef64 <pvTaskIncrementMutexHeldCount+0x18>)
 800ef4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d004      	beq.n	800ef5e <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ef54:	4b03      	ldr	r3, [pc, #12]	; (800ef64 <pvTaskIncrementMutexHeldCount+0x18>)
 800ef56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ef58:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ef5e:	4b01      	ldr	r3, [pc, #4]	; (800ef64 <pvTaskIncrementMutexHeldCount+0x18>)
 800ef60:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
	}
 800ef62:	4770      	bx	lr
 800ef64:	200026c8 	.word	0x200026c8

0800ef68 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ef68:	b570      	push	{r4, r5, r6, lr}
 800ef6a:	0005      	movs	r5, r0
 800ef6c:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ef6e:	f000 fabd 	bl	800f4ec <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ef72:	4b1f      	ldr	r3, [pc, #124]	; (800eff0 <ulTaskNotifyTake+0x88>)
 800ef74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d106      	bne.n	800ef8a <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800ef7c:	4b1c      	ldr	r3, [pc, #112]	; (800eff0 <ulTaskNotifyTake+0x88>)
 800ef7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ef80:	235c      	movs	r3, #92	; 0x5c
 800ef82:	2101      	movs	r1, #1
 800ef84:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800ef86:	2c00      	cmp	r4, #0
 800ef88:	d118      	bne.n	800efbc <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ef8a:	f000 fabb 	bl	800f504 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ef8e:	f000 faad 	bl	800f4ec <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ef92:	4b17      	ldr	r3, [pc, #92]	; (800eff0 <ulTaskNotifyTake+0x88>)
 800ef94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef96:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800ef98:	2c00      	cmp	r4, #0
 800ef9a:	d006      	beq.n	800efaa <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 800ef9c:	2d00      	cmp	r5, #0
 800ef9e:	d122      	bne.n	800efe6 <ulTaskNotifyTake+0x7e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800efa0:	4b13      	ldr	r3, [pc, #76]	; (800eff0 <ulTaskNotifyTake+0x88>)
 800efa2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800efa4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800efa6:	3b01      	subs	r3, #1
 800efa8:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800efaa:	4b11      	ldr	r3, [pc, #68]	; (800eff0 <ulTaskNotifyTake+0x88>)
 800efac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800efae:	235c      	movs	r3, #92	; 0x5c
 800efb0:	2100      	movs	r1, #0
 800efb2:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800efb4:	f000 faa6 	bl	800f504 <vPortExitCritical>

		return ulReturn;
	}
 800efb8:	0020      	movs	r0, r4
 800efba:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800efbc:	4b0c      	ldr	r3, [pc, #48]	; (800eff0 <ulTaskNotifyTake+0x88>)
 800efbe:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800efc0:	3004      	adds	r0, #4
 800efc2:	f7fe feef 	bl	800dda4 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800efc6:	1c63      	adds	r3, r4, #1
 800efc8:	d007      	beq.n	800efda <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 800efca:	4b09      	ldr	r3, [pc, #36]	; (800eff0 <ulTaskNotifyTake+0x88>)
 800efcc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800efce:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800efd0:	f7ff fac0 	bl	800e554 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800efd4:	f000 fa7e 	bl	800f4d4 <vPortYield>
 800efd8:	e7d7      	b.n	800ef8a <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800efda:	4805      	ldr	r0, [pc, #20]	; (800eff0 <ulTaskNotifyTake+0x88>)
 800efdc:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800efde:	3104      	adds	r1, #4
 800efe0:	f7fe febc 	bl	800dd5c <vListInsertEnd>
 800efe4:	e7f6      	b.n	800efd4 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800efe6:	4b02      	ldr	r3, [pc, #8]	; (800eff0 <ulTaskNotifyTake+0x88>)
 800efe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efea:	2200      	movs	r2, #0
 800efec:	659a      	str	r2, [r3, #88]	; 0x58
 800efee:	e7dc      	b.n	800efaa <ulTaskNotifyTake+0x42>
 800eff0:	200026c8 	.word	0x200026c8

0800eff4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800eff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eff6:	0004      	movs	r4, r0
 800eff8:	000d      	movs	r5, r1
 800effa:	0016      	movs	r6, r2
 800effc:	001f      	movs	r7, r3
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800effe:	f000 fa75 	bl	800f4ec <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f002:	2f00      	cmp	r7, #0
 800f004:	d001      	beq.n	800f00a <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f006:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f008:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800f00a:	225c      	movs	r2, #92	; 0x5c
 800f00c:	5ca3      	ldrb	r3, [r4, r2]
 800f00e:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800f010:	2102      	movs	r1, #2
 800f012:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800f014:	2e02      	cmp	r6, #2
 800f016:	d015      	beq.n	800f044 <xTaskGenericNotify+0x50>
 800f018:	d908      	bls.n	800f02c <xTaskGenericNotify+0x38>
 800f01a:	2e03      	cmp	r6, #3
 800f01c:	d017      	beq.n	800f04e <xTaskGenericNotify+0x5a>
 800f01e:	2e04      	cmp	r6, #4
 800f020:	d118      	bne.n	800f054 <xTaskGenericNotify+0x60>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800f022:	2b02      	cmp	r3, #2
 800f024:	d018      	beq.n	800f058 <xTaskGenericNotify+0x64>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f026:	65a5      	str	r5, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f028:	2501      	movs	r5, #1
 800f02a:	e005      	b.n	800f038 <xTaskGenericNotify+0x44>
			switch( eAction )
 800f02c:	2e01      	cmp	r6, #1
 800f02e:	d111      	bne.n	800f054 <xTaskGenericNotify+0x60>
					pxTCB->ulNotifiedValue |= ulValue;
 800f030:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f032:	4315      	orrs	r5, r2
 800f034:	65a5      	str	r5, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f036:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800f038:	2b01      	cmp	r3, #1
 800f03a:	d00f      	beq.n	800f05c <xTaskGenericNotify+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f03c:	f000 fa62 	bl	800f504 <vPortExitCritical>

		return xReturn;
	}
 800f040:	0028      	movs	r0, r5
 800f042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 800f044:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f046:	3201      	adds	r2, #1
 800f048:	65a2      	str	r2, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f04a:	2501      	movs	r5, #1
					break;
 800f04c:	e7f4      	b.n	800f038 <xTaskGenericNotify+0x44>
					pxTCB->ulNotifiedValue = ulValue;
 800f04e:	65a5      	str	r5, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f050:	2501      	movs	r5, #1
					break;
 800f052:	e7f1      	b.n	800f038 <xTaskGenericNotify+0x44>
	BaseType_t xReturn = pdPASS;
 800f054:	2501      	movs	r5, #1
 800f056:	e7ef      	b.n	800f038 <xTaskGenericNotify+0x44>
						xReturn = pdFAIL;
 800f058:	2500      	movs	r5, #0
 800f05a:	e7ed      	b.n	800f038 <xTaskGenericNotify+0x44>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f05c:	1d26      	adds	r6, r4, #4
 800f05e:	0030      	movs	r0, r6
 800f060:	f7fe fea0 	bl	800dda4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f064:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f066:	4b0b      	ldr	r3, [pc, #44]	; (800f094 <xTaskGenericNotify+0xa0>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d901      	bls.n	800f072 <xTaskGenericNotify+0x7e>
 800f06e:	4b09      	ldr	r3, [pc, #36]	; (800f094 <xTaskGenericNotify+0xa0>)
 800f070:	601a      	str	r2, [r3, #0]
 800f072:	0093      	lsls	r3, r2, #2
 800f074:	189b      	adds	r3, r3, r2
 800f076:	0098      	lsls	r0, r3, #2
 800f078:	4b07      	ldr	r3, [pc, #28]	; (800f098 <xTaskGenericNotify+0xa4>)
 800f07a:	18c0      	adds	r0, r0, r3
 800f07c:	0031      	movs	r1, r6
 800f07e:	f7fe fe6d 	bl	800dd5c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f082:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f084:	4b05      	ldr	r3, [pc, #20]	; (800f09c <xTaskGenericNotify+0xa8>)
 800f086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d9d6      	bls.n	800f03c <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 800f08e:	f000 fa21 	bl	800f4d4 <vPortYield>
 800f092:	e7d3      	b.n	800f03c <xTaskGenericNotify+0x48>
 800f094:	20002748 	.word	0x20002748
 800f098:	20002764 	.word	0x20002764
 800f09c:	200026c8 	.word	0x200026c8

0800f0a0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f0a0:	4b06      	ldr	r3, [pc, #24]	; (800f0bc <prvGetNextExpireTime+0x1c>)
 800f0a2:	681a      	ldr	r2, [r3, #0]
 800f0a4:	6813      	ldr	r3, [r2, #0]
 800f0a6:	4259      	negs	r1, r3
 800f0a8:	414b      	adcs	r3, r1
 800f0aa:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d102      	bne.n	800f0b6 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0b0:	68d3      	ldr	r3, [r2, #12]
 800f0b2:	6818      	ldr	r0, [r3, #0]
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
	}

	return xNextExpireTime;
}
 800f0b4:	4770      	bx	lr
		xNextExpireTime = ( TickType_t ) 0U;
 800f0b6:	2000      	movs	r0, #0
	return xNextExpireTime;
 800f0b8:	e7fc      	b.n	800f0b4 <prvGetNextExpireTime+0x14>
 800f0ba:	46c0      	nop			; (mov r8, r8)
 800f0bc:	200027f0 	.word	0x200027f0

0800f0c0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f0c0:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f0c2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f0c4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f0c6:	4291      	cmp	r1, r2
 800f0c8:	d80c      	bhi.n	800f0e4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f0ca:	1ad2      	subs	r2, r2, r3
 800f0cc:	6983      	ldr	r3, [r0, #24]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d301      	bcc.n	800f0d6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f0d2:	2001      	movs	r0, #1
 800f0d4:	e010      	b.n	800f0f8 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f0d6:	1d01      	adds	r1, r0, #4
 800f0d8:	4b09      	ldr	r3, [pc, #36]	; (800f100 <prvInsertTimerInActiveList+0x40>)
 800f0da:	6858      	ldr	r0, [r3, #4]
 800f0dc:	f7fe fe4a 	bl	800dd74 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f0e0:	2000      	movs	r0, #0
 800f0e2:	e009      	b.n	800f0f8 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d201      	bcs.n	800f0ec <prvInsertTimerInActiveList+0x2c>
 800f0e8:	4299      	cmp	r1, r3
 800f0ea:	d206      	bcs.n	800f0fa <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f0ec:	1d01      	adds	r1, r0, #4
 800f0ee:	4b04      	ldr	r3, [pc, #16]	; (800f100 <prvInsertTimerInActiveList+0x40>)
 800f0f0:	6818      	ldr	r0, [r3, #0]
 800f0f2:	f7fe fe3f 	bl	800dd74 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f0f6:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800f0f8:	bd10      	pop	{r4, pc}
			xProcessTimerNow = pdTRUE;
 800f0fa:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800f0fc:	e7fc      	b.n	800f0f8 <prvInsertTimerInActiveList+0x38>
 800f0fe:	46c0      	nop			; (mov r8, r8)
 800f100:	200027f0 	.word	0x200027f0

0800f104 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f104:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f106:	f000 f9f1 	bl	800f4ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f10a:	4b10      	ldr	r3, [pc, #64]	; (800f14c <prvCheckForValidListAndQueue+0x48>)
 800f10c:	689b      	ldr	r3, [r3, #8]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d002      	beq.n	800f118 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f112:	f000 f9f7 	bl	800f504 <vPortExitCritical>
}
 800f116:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800f118:	4c0c      	ldr	r4, [pc, #48]	; (800f14c <prvCheckForValidListAndQueue+0x48>)
 800f11a:	0026      	movs	r6, r4
 800f11c:	360c      	adds	r6, #12
 800f11e:	0030      	movs	r0, r6
 800f120:	f7fe fe0e 	bl	800dd40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f124:	0025      	movs	r5, r4
 800f126:	3520      	adds	r5, #32
 800f128:	0028      	movs	r0, r5
 800f12a:	f7fe fe09 	bl	800dd40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f12e:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f130:	6065      	str	r5, [r4, #4]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f132:	2200      	movs	r2, #0
 800f134:	2110      	movs	r1, #16
 800f136:	2004      	movs	r0, #4
 800f138:	f7fe ff23 	bl	800df82 <xQueueGenericCreate>
 800f13c:	60a0      	str	r0, [r4, #8]
				if( xTimerQueue != NULL )
 800f13e:	2800      	cmp	r0, #0
 800f140:	d0e7      	beq.n	800f112 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f142:	4903      	ldr	r1, [pc, #12]	; (800f150 <prvCheckForValidListAndQueue+0x4c>)
 800f144:	f7ff f8e8 	bl	800e318 <vQueueAddToRegistry>
 800f148:	e7e3      	b.n	800f112 <prvCheckForValidListAndQueue+0xe>
 800f14a:	46c0      	nop			; (mov r8, r8)
 800f14c:	200027f0 	.word	0x200027f0
 800f150:	0801a528 	.word	0x0801a528

0800f154 <xTimerCreateTimerTask>:
{
 800f154:	b500      	push	{lr}
 800f156:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800f158:	f7ff ffd4 	bl	800f104 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f15c:	4b09      	ldr	r3, [pc, #36]	; (800f184 <xTimerCreateTimerTask+0x30>)
 800f15e:	689b      	ldr	r3, [r3, #8]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d00d      	beq.n	800f180 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800f164:	2300      	movs	r3, #0
 800f166:	9303      	str	r3, [sp, #12]
 800f168:	9302      	str	r3, [sp, #8]
 800f16a:	9301      	str	r3, [sp, #4]
 800f16c:	3303      	adds	r3, #3
 800f16e:	9300      	str	r3, [sp, #0]
 800f170:	2300      	movs	r3, #0
 800f172:	2296      	movs	r2, #150	; 0x96
 800f174:	4904      	ldr	r1, [pc, #16]	; (800f188 <xTimerCreateTimerTask+0x34>)
 800f176:	4805      	ldr	r0, [pc, #20]	; (800f18c <xTimerCreateTimerTask+0x38>)
 800f178:	f7ff fa1e 	bl	800e5b8 <xTaskGenericCreate>
}
 800f17c:	b005      	add	sp, #20
 800f17e:	bd00      	pop	{pc}
BaseType_t xReturn = pdFAIL;
 800f180:	2000      	movs	r0, #0
	return xReturn;
 800f182:	e7fb      	b.n	800f17c <xTimerCreateTimerTask+0x28>
 800f184:	200027f0 	.word	0x200027f0
 800f188:	0801a530 	.word	0x0801a530
 800f18c:	0800f409 	.word	0x0800f409

0800f190 <xTimerCreate>:
{
 800f190:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f192:	b083      	sub	sp, #12
 800f194:	0007      	movs	r7, r0
 800f196:	000d      	movs	r5, r1
 800f198:	0016      	movs	r6, r2
 800f19a:	9301      	str	r3, [sp, #4]
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800f19c:	2900      	cmp	r1, #0
 800f19e:	d013      	beq.n	800f1c8 <xTimerCreate+0x38>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f1a0:	202c      	movs	r0, #44	; 0x2c
 800f1a2:	f000 fa45 	bl	800f630 <pvPortMalloc>
 800f1a6:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800f1a8:	d00b      	beq.n	800f1c2 <xTimerCreate+0x32>
			prvCheckForValidListAndQueue();
 800f1aa:	f7ff ffab 	bl	800f104 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800f1ae:	6027      	str	r7, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f1b0:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800f1b2:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800f1b4:	9b01      	ldr	r3, [sp, #4]
 800f1b6:	6223      	str	r3, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f1b8:	9b08      	ldr	r3, [sp, #32]
 800f1ba:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f1bc:	1d20      	adds	r0, r4, #4
 800f1be:	f7fe fdca 	bl	800dd56 <vListInitialiseItem>
}
 800f1c2:	0020      	movs	r0, r4
 800f1c4:	b003      	add	sp, #12
 800f1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTimer = NULL;
 800f1c8:	2400      	movs	r4, #0
	return ( TimerHandle_t ) pxNewTimer;
 800f1ca:	e7fa      	b.n	800f1c2 <xTimerCreate+0x32>

0800f1cc <xTimerGenericCommand>:
{
 800f1cc:	b530      	push	{r4, r5, lr}
 800f1ce:	b085      	sub	sp, #20
 800f1d0:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800f1d2:	4b13      	ldr	r3, [pc, #76]	; (800f220 <xTimerGenericCommand+0x54>)
 800f1d4:	689c      	ldr	r4, [r3, #8]
 800f1d6:	2c00      	cmp	r4, #0
 800f1d8:	d020      	beq.n	800f21c <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800f1da:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f1dc:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f1de:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f1e0:	2905      	cmp	r1, #5
 800f1e2:	dc13      	bgt.n	800f20c <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f1e4:	f7ff fd82 	bl	800ecec <xTaskGetSchedulerState>
 800f1e8:	2802      	cmp	r0, #2
 800f1ea:	d007      	beq.n	800f1fc <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f1ec:	4b0c      	ldr	r3, [pc, #48]	; (800f220 <xTimerGenericCommand+0x54>)
 800f1ee:	6898      	ldr	r0, [r3, #8]
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	4669      	mov	r1, sp
 800f1f6:	f7fe fef0 	bl	800dfda <xQueueGenericSend>
 800f1fa:	e00d      	b.n	800f218 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f1fc:	4b08      	ldr	r3, [pc, #32]	; (800f220 <xTimerGenericCommand+0x54>)
 800f1fe:	6898      	ldr	r0, [r3, #8]
 800f200:	2300      	movs	r3, #0
 800f202:	9a08      	ldr	r2, [sp, #32]
 800f204:	4669      	mov	r1, sp
 800f206:	f7fe fee8 	bl	800dfda <xQueueGenericSend>
 800f20a:	e005      	b.n	800f218 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f20c:	2300      	movs	r3, #0
 800f20e:	002a      	movs	r2, r5
 800f210:	4669      	mov	r1, sp
 800f212:	0020      	movs	r0, r4
 800f214:	f7fe ff54 	bl	800e0c0 <xQueueGenericSendFromISR>
}
 800f218:	b005      	add	sp, #20
 800f21a:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800f21c:	2000      	movs	r0, #0
	return xReturn;
 800f21e:	e7fb      	b.n	800f218 <xTimerGenericCommand+0x4c>
 800f220:	200027f0 	.word	0x200027f0

0800f224 <prvSwitchTimerLists>:
{
 800f224:	b570      	push	{r4, r5, r6, lr}
 800f226:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f228:	4b15      	ldr	r3, [pc, #84]	; (800f280 <prvSwitchTimerLists+0x5c>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	2a00      	cmp	r2, #0
 800f230:	d020      	beq.n	800f274 <prvSwitchTimerLists+0x50>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f232:	68db      	ldr	r3, [r3, #12]
 800f234:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f236:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f238:	1d25      	adds	r5, r4, #4
 800f23a:	0028      	movs	r0, r5
 800f23c:	f7fe fdb2 	bl	800dda4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f240:	0020      	movs	r0, r4
 800f242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f244:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f246:	69e3      	ldr	r3, [r4, #28]
 800f248:	2b01      	cmp	r3, #1
 800f24a:	d1ed      	bne.n	800f228 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f24c:	69a3      	ldr	r3, [r4, #24]
 800f24e:	199b      	adds	r3, r3, r6
			if( xReloadTime > xNextExpireTime )
 800f250:	429e      	cmp	r6, r3
 800f252:	d207      	bcs.n	800f264 <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f254:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f256:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f258:	4b09      	ldr	r3, [pc, #36]	; (800f280 <prvSwitchTimerLists+0x5c>)
 800f25a:	6818      	ldr	r0, [r3, #0]
 800f25c:	0029      	movs	r1, r5
 800f25e:	f7fe fd89 	bl	800dd74 <vListInsert>
 800f262:	e7e1      	b.n	800f228 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f264:	2300      	movs	r3, #0
 800f266:	9300      	str	r3, [sp, #0]
 800f268:	0032      	movs	r2, r6
 800f26a:	2100      	movs	r1, #0
 800f26c:	0020      	movs	r0, r4
 800f26e:	f7ff ffad 	bl	800f1cc <xTimerGenericCommand>
 800f272:	e7d9      	b.n	800f228 <prvSwitchTimerLists+0x4>
	pxCurrentTimerList = pxOverflowTimerList;
 800f274:	4a02      	ldr	r2, [pc, #8]	; (800f280 <prvSwitchTimerLists+0x5c>)
 800f276:	6851      	ldr	r1, [r2, #4]
 800f278:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f27a:	6053      	str	r3, [r2, #4]
}
 800f27c:	b002      	add	sp, #8
 800f27e:	bd70      	pop	{r4, r5, r6, pc}
 800f280:	200027f0 	.word	0x200027f0

0800f284 <prvSampleTimeNow>:
{
 800f284:	b570      	push	{r4, r5, r6, lr}
 800f286:	0005      	movs	r5, r0
	xTimeNow = xTaskGetTickCount();
 800f288:	f7ff faaa 	bl	800e7e0 <xTaskGetTickCount>
 800f28c:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800f28e:	4b07      	ldr	r3, [pc, #28]	; (800f2ac <prvSampleTimeNow+0x28>)
 800f290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f292:	4283      	cmp	r3, r0
 800f294:	d805      	bhi.n	800f2a2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800f296:	2300      	movs	r3, #0
 800f298:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800f29a:	4b04      	ldr	r3, [pc, #16]	; (800f2ac <prvSampleTimeNow+0x28>)
 800f29c:	635c      	str	r4, [r3, #52]	; 0x34
}
 800f29e:	0020      	movs	r0, r4
 800f2a0:	bd70      	pop	{r4, r5, r6, pc}
		prvSwitchTimerLists();
 800f2a2:	f7ff ffbf 	bl	800f224 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	602b      	str	r3, [r5, #0]
 800f2aa:	e7f6      	b.n	800f29a <prvSampleTimeNow+0x16>
 800f2ac:	200027f0 	.word	0x200027f0

0800f2b0 <prvProcessExpiredTimer>:
{
 800f2b0:	b570      	push	{r4, r5, r6, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	0005      	movs	r5, r0
 800f2b6:	000e      	movs	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f2b8:	4b0f      	ldr	r3, [pc, #60]	; (800f2f8 <prvProcessExpiredTimer+0x48>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	68db      	ldr	r3, [r3, #12]
 800f2be:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f2c0:	1d20      	adds	r0, r4, #4
 800f2c2:	f7fe fd6f 	bl	800dda4 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f2c6:	69e3      	ldr	r3, [r4, #28]
 800f2c8:	2b01      	cmp	r3, #1
 800f2ca:	d004      	beq.n	800f2d6 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f2cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2ce:	0020      	movs	r0, r4
 800f2d0:	4798      	blx	r3
}
 800f2d2:	b002      	add	sp, #8
 800f2d4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f2d6:	69a3      	ldr	r3, [r4, #24]
 800f2d8:	1959      	adds	r1, r3, r5
 800f2da:	002b      	movs	r3, r5
 800f2dc:	0032      	movs	r2, r6
 800f2de:	0020      	movs	r0, r4
 800f2e0:	f7ff feee 	bl	800f0c0 <prvInsertTimerInActiveList>
 800f2e4:	2801      	cmp	r0, #1
 800f2e6:	d1f1      	bne.n	800f2cc <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	9300      	str	r3, [sp, #0]
 800f2ec:	002a      	movs	r2, r5
 800f2ee:	2100      	movs	r1, #0
 800f2f0:	0020      	movs	r0, r4
 800f2f2:	f7ff ff6b 	bl	800f1cc <xTimerGenericCommand>
 800f2f6:	e7e9      	b.n	800f2cc <prvProcessExpiredTimer+0x1c>
 800f2f8:	200027f0 	.word	0x200027f0

0800f2fc <prvProcessTimerOrBlockTask>:
{
 800f2fc:	b570      	push	{r4, r5, r6, lr}
 800f2fe:	b082      	sub	sp, #8
 800f300:	0004      	movs	r4, r0
 800f302:	000e      	movs	r6, r1
	vTaskSuspendAll();
 800f304:	f7ff fa64 	bl	800e7d0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f308:	a801      	add	r0, sp, #4
 800f30a:	f7ff ffbb 	bl	800f284 <prvSampleTimeNow>
 800f30e:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f310:	9b01      	ldr	r3, [sp, #4]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d118      	bne.n	800f348 <prvProcessTimerOrBlockTask+0x4c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f316:	2e00      	cmp	r6, #0
 800f318:	d101      	bne.n	800f31e <prvProcessTimerOrBlockTask+0x22>
 800f31a:	42a0      	cmp	r0, r4
 800f31c:	d20a      	bcs.n	800f334 <prvProcessTimerOrBlockTask+0x38>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f31e:	1b61      	subs	r1, r4, r5
 800f320:	4b0b      	ldr	r3, [pc, #44]	; (800f350 <prvProcessTimerOrBlockTask+0x54>)
 800f322:	6898      	ldr	r0, [r3, #8]
 800f324:	f7ff f80a 	bl	800e33c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f328:	f7ff fada 	bl	800e8e0 <xTaskResumeAll>
 800f32c:	2800      	cmp	r0, #0
 800f32e:	d008      	beq.n	800f342 <prvProcessTimerOrBlockTask+0x46>
}
 800f330:	b002      	add	sp, #8
 800f332:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
 800f334:	f7ff fad4 	bl	800e8e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f338:	0029      	movs	r1, r5
 800f33a:	0020      	movs	r0, r4
 800f33c:	f7ff ffb8 	bl	800f2b0 <prvProcessExpiredTimer>
 800f340:	e7f6      	b.n	800f330 <prvProcessTimerOrBlockTask+0x34>
					portYIELD_WITHIN_API();
 800f342:	f000 f8c7 	bl	800f4d4 <vPortYield>
 800f346:	e7f3      	b.n	800f330 <prvProcessTimerOrBlockTask+0x34>
			( void ) xTaskResumeAll();
 800f348:	f7ff faca 	bl	800e8e0 <xTaskResumeAll>
}
 800f34c:	e7f0      	b.n	800f330 <prvProcessTimerOrBlockTask+0x34>
 800f34e:	46c0      	nop			; (mov r8, r8)
 800f350:	200027f0 	.word	0x200027f0

0800f354 <prvProcessReceivedCommands>:
{
 800f354:	b510      	push	{r4, lr}
 800f356:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f358:	e002      	b.n	800f360 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f35a:	9b04      	ldr	r3, [sp, #16]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	da10      	bge.n	800f382 <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f360:	4b27      	ldr	r3, [pc, #156]	; (800f400 <prvProcessReceivedCommands+0xac>)
 800f362:	6898      	ldr	r0, [r3, #8]
 800f364:	2300      	movs	r3, #0
 800f366:	2200      	movs	r2, #0
 800f368:	a904      	add	r1, sp, #16
 800f36a:	f7fe ff11 	bl	800e190 <xQueueGenericReceive>
 800f36e:	2800      	cmp	r0, #0
 800f370:	d043      	beq.n	800f3fa <prvProcessReceivedCommands+0xa6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f372:	9b04      	ldr	r3, [sp, #16]
 800f374:	2b00      	cmp	r3, #0
 800f376:	daf0      	bge.n	800f35a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f378:	9b05      	ldr	r3, [sp, #20]
 800f37a:	9907      	ldr	r1, [sp, #28]
 800f37c:	9806      	ldr	r0, [sp, #24]
 800f37e:	4798      	blx	r3
 800f380:	e7eb      	b.n	800f35a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f382:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f384:	6963      	ldr	r3, [r4, #20]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d002      	beq.n	800f390 <prvProcessReceivedCommands+0x3c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f38a:	1d20      	adds	r0, r4, #4
 800f38c:	f7fe fd0a 	bl	800dda4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f390:	a803      	add	r0, sp, #12
 800f392:	f7ff ff77 	bl	800f284 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800f396:	9b04      	ldr	r3, [sp, #16]
 800f398:	2b09      	cmp	r3, #9
 800f39a:	d8e1      	bhi.n	800f360 <prvProcessReceivedCommands+0xc>
 800f39c:	009b      	lsls	r3, r3, #2
 800f39e:	4a19      	ldr	r2, [pc, #100]	; (800f404 <prvProcessReceivedCommands+0xb0>)
 800f3a0:	58d3      	ldr	r3, [r2, r3]
 800f3a2:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f3a4:	9b05      	ldr	r3, [sp, #20]
 800f3a6:	69a2      	ldr	r2, [r4, #24]
 800f3a8:	4694      	mov	ip, r2
 800f3aa:	4463      	add	r3, ip
 800f3ac:	0019      	movs	r1, r3
 800f3ae:	9b05      	ldr	r3, [sp, #20]
 800f3b0:	0002      	movs	r2, r0
 800f3b2:	0020      	movs	r0, r4
 800f3b4:	f7ff fe84 	bl	800f0c0 <prvInsertTimerInActiveList>
 800f3b8:	2801      	cmp	r0, #1
 800f3ba:	d1d1      	bne.n	800f360 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f3bc:	0020      	movs	r0, r4
 800f3be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3c0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f3c2:	69e3      	ldr	r3, [r4, #28]
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d1cb      	bne.n	800f360 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f3c8:	9b05      	ldr	r3, [sp, #20]
 800f3ca:	69a1      	ldr	r1, [r4, #24]
 800f3cc:	468c      	mov	ip, r1
 800f3ce:	4463      	add	r3, ip
 800f3d0:	001a      	movs	r2, r3
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	9300      	str	r3, [sp, #0]
 800f3d6:	2100      	movs	r1, #0
 800f3d8:	0020      	movs	r0, r4
 800f3da:	f7ff fef7 	bl	800f1cc <xTimerGenericCommand>
 800f3de:	e7bf      	b.n	800f360 <prvProcessReceivedCommands+0xc>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f3e0:	9905      	ldr	r1, [sp, #20]
 800f3e2:	61a1      	str	r1, [r4, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f3e4:	1809      	adds	r1, r1, r0
 800f3e6:	0003      	movs	r3, r0
 800f3e8:	0002      	movs	r2, r0
 800f3ea:	0020      	movs	r0, r4
 800f3ec:	f7ff fe68 	bl	800f0c0 <prvInsertTimerInActiveList>
					break;
 800f3f0:	e7b6      	b.n	800f360 <prvProcessReceivedCommands+0xc>
					vPortFree( pxTimer );
 800f3f2:	0020      	movs	r0, r4
 800f3f4:	f000 f980 	bl	800f6f8 <vPortFree>
					break;
 800f3f8:	e7b2      	b.n	800f360 <prvProcessReceivedCommands+0xc>
}
 800f3fa:	b008      	add	sp, #32
 800f3fc:	bd10      	pop	{r4, pc}
 800f3fe:	46c0      	nop			; (mov r8, r8)
 800f400:	200027f0 	.word	0x200027f0
 800f404:	08017bfc 	.word	0x08017bfc

0800f408 <prvTimerTask>:
{
 800f408:	b500      	push	{lr}
 800f40a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f40c:	a801      	add	r0, sp, #4
 800f40e:	f7ff fe47 	bl	800f0a0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f412:	9901      	ldr	r1, [sp, #4]
 800f414:	f7ff ff72 	bl	800f2fc <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800f418:	f7ff ff9c 	bl	800f354 <prvProcessReceivedCommands>
 800f41c:	e7f6      	b.n	800f40c <prvTimerTask+0x4>

0800f41e <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f41e:	b510      	push	{r4, lr}
 800f420:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 800f422:	f000 f863 	bl	800f4ec <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f426:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f428:	f000 f86c 	bl	800f504 <vPortExitCritical>

	return pvReturn;
}
 800f42c:	0020      	movs	r0, r4
 800f42e:	bd10      	pop	{r4, pc}

0800f430 <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 800f430:	b672      	cpsid	i
 800f432:	e7fe      	b.n	800f432 <prvTaskExitError+0x2>

0800f434 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f434:	4a06      	ldr	r2, [pc, #24]	; (800f450 <pxCurrentTCBConst2>)
 800f436:	6813      	ldr	r3, [r2, #0]
 800f438:	6818      	ldr	r0, [r3, #0]
 800f43a:	3020      	adds	r0, #32
 800f43c:	f380 8809 	msr	PSP, r0
 800f440:	2002      	movs	r0, #2
 800f442:	f380 8814 	msr	CONTROL, r0
 800f446:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f448:	46ae      	mov	lr, r5
 800f44a:	b662      	cpsie	i
 800f44c:	bd00      	pop	{pc}
 800f44e:	46c0      	nop			; (mov r8, r8)

0800f450 <pxCurrentTCBConst2>:
 800f450:	20002734 	.word	0x20002734

0800f454 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800f454:	b510      	push	{r4, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f456:	4b06      	ldr	r3, [pc, #24]	; (800f470 <prvSetupTimerInterrupt+0x1c>)
 800f458:	6818      	ldr	r0, [r3, #0]
 800f45a:	21fa      	movs	r1, #250	; 0xfa
 800f45c:	0089      	lsls	r1, r1, #2
 800f45e:	f7f0 fe77 	bl	8000150 <__udivsi3>
 800f462:	3801      	subs	r0, #1
 800f464:	4b03      	ldr	r3, [pc, #12]	; (800f474 <prvSetupTimerInterrupt+0x20>)
 800f466:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f468:	4b03      	ldr	r3, [pc, #12]	; (800f478 <prvSetupTimerInterrupt+0x24>)
 800f46a:	2207      	movs	r2, #7
 800f46c:	601a      	str	r2, [r3, #0]
}
 800f46e:	bd10      	pop	{r4, pc}
 800f470:	200000a4 	.word	0x200000a4
 800f474:	e000e014 	.word	0xe000e014
 800f478:	e000e010 	.word	0xe000e010

0800f47c <pxPortInitialiseStack>:
{
 800f47c:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f47e:	1f03      	subs	r3, r0, #4
 800f480:	2480      	movs	r4, #128	; 0x80
 800f482:	0464      	lsls	r4, r4, #17
 800f484:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f486:	3b04      	subs	r3, #4
 800f488:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f48a:	3b04      	subs	r3, #4
 800f48c:	4902      	ldr	r1, [pc, #8]	; (800f498 <pxPortInitialiseStack+0x1c>)
 800f48e:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f490:	3b14      	subs	r3, #20
 800f492:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800f494:	3840      	subs	r0, #64	; 0x40
}
 800f496:	bd10      	pop	{r4, pc}
 800f498:	0800f431 	.word	0x0800f431

0800f49c <SVC_Handler>:
}
 800f49c:	4770      	bx	lr
	...

0800f4a0 <xPortStartScheduler>:
{
 800f4a0:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f4a2:	4b0a      	ldr	r3, [pc, #40]	; (800f4cc <xPortStartScheduler+0x2c>)
 800f4a4:	6819      	ldr	r1, [r3, #0]
 800f4a6:	22ff      	movs	r2, #255	; 0xff
 800f4a8:	0412      	lsls	r2, r2, #16
 800f4aa:	430a      	orrs	r2, r1
 800f4ac:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f4ae:	6819      	ldr	r1, [r3, #0]
 800f4b0:	22ff      	movs	r2, #255	; 0xff
 800f4b2:	0612      	lsls	r2, r2, #24
 800f4b4:	430a      	orrs	r2, r1
 800f4b6:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
 800f4b8:	f7ff ffcc 	bl	800f454 <prvSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800f4bc:	4b04      	ldr	r3, [pc, #16]	; (800f4d0 <xPortStartScheduler+0x30>)
 800f4be:	2200      	movs	r2, #0
 800f4c0:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f4c2:	f7ff ffb7 	bl	800f434 <vPortStartFirstTask>
	prvTaskExitError();
 800f4c6:	f7ff ffb3 	bl	800f430 <prvTaskExitError>
 800f4ca:	46c0      	nop			; (mov r8, r8)
 800f4cc:	e000ed20 	.word	0xe000ed20
 800f4d0:	200000c8 	.word	0x200000c8

0800f4d4 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f4d4:	4b04      	ldr	r3, [pc, #16]	; (800f4e8 <vPortYield+0x14>)
 800f4d6:	2280      	movs	r2, #128	; 0x80
 800f4d8:	0552      	lsls	r2, r2, #21
 800f4da:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f4dc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f4e0:	f3bf 8f6f 	isb	sy
}
 800f4e4:	4770      	bx	lr
 800f4e6:	46c0      	nop			; (mov r8, r8)
 800f4e8:	e000ed04 	.word	0xe000ed04

0800f4ec <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f4ec:	b672      	cpsid	i
    uxCriticalNesting++;
 800f4ee:	4a04      	ldr	r2, [pc, #16]	; (800f500 <vPortEnterCritical+0x14>)
 800f4f0:	6813      	ldr	r3, [r2, #0]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f4f6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f4fa:	f3bf 8f6f 	isb	sy
}
 800f4fe:	4770      	bx	lr
 800f500:	200000c8 	.word	0x200000c8

0800f504 <vPortExitCritical>:
    uxCriticalNesting--;
 800f504:	4a03      	ldr	r2, [pc, #12]	; (800f514 <vPortExitCritical+0x10>)
 800f506:	6813      	ldr	r3, [r2, #0]
 800f508:	3b01      	subs	r3, #1
 800f50a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d100      	bne.n	800f512 <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 800f510:	b662      	cpsie	i
}
 800f512:	4770      	bx	lr
 800f514:	200000c8 	.word	0x200000c8

0800f518 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f518:	f3ef 8010 	mrs	r0, PRIMASK
 800f51c:	b672      	cpsid	i
 800f51e:	4770      	bx	lr
}
 800f520:	2000      	movs	r0, #0

0800f522 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f522:	f380 8810 	msr	PRIMASK, r0
 800f526:	4770      	bx	lr

0800f528 <PendSV_Handler>:
	__asm volatile
 800f528:	f3ef 8009 	mrs	r0, PSP
 800f52c:	4b0e      	ldr	r3, [pc, #56]	; (800f568 <pxCurrentTCBConst>)
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	3820      	subs	r0, #32
 800f532:	6010      	str	r0, [r2, #0]
 800f534:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f536:	4644      	mov	r4, r8
 800f538:	464d      	mov	r5, r9
 800f53a:	4656      	mov	r6, sl
 800f53c:	465f      	mov	r7, fp
 800f53e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f540:	b508      	push	{r3, lr}
 800f542:	b672      	cpsid	i
 800f544:	f7ff fac2 	bl	800eacc <vTaskSwitchContext>
 800f548:	b662      	cpsie	i
 800f54a:	bc0c      	pop	{r2, r3}
 800f54c:	6811      	ldr	r1, [r2, #0]
 800f54e:	6808      	ldr	r0, [r1, #0]
 800f550:	3010      	adds	r0, #16
 800f552:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f554:	46a0      	mov	r8, r4
 800f556:	46a9      	mov	r9, r5
 800f558:	46b2      	mov	sl, r6
 800f55a:	46bb      	mov	fp, r7
 800f55c:	f380 8809 	msr	PSP, r0
 800f560:	3820      	subs	r0, #32
 800f562:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f564:	4718      	bx	r3
 800f566:	46c0      	nop			; (mov r8, r8)

0800f568 <pxCurrentTCBConst>:
 800f568:	20002734 	.word	0x20002734

0800f56c <xPortSysTickHandler>:
{
 800f56c:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f56e:	f7ff ffd3 	bl	800f518 <ulSetInterruptMaskFromISR>
 800f572:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800f574:	f7ff f940 	bl	800e7f8 <xTaskIncrementTick>
 800f578:	2800      	cmp	r0, #0
 800f57a:	d003      	beq.n	800f584 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800f57c:	4b03      	ldr	r3, [pc, #12]	; (800f58c <xPortSysTickHandler+0x20>)
 800f57e:	2280      	movs	r2, #128	; 0x80
 800f580:	0552      	lsls	r2, r2, #21
 800f582:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f584:	0020      	movs	r0, r4
 800f586:	f7ff ffcc 	bl	800f522 <vClearInterruptMaskFromISR>
}
 800f58a:	bd10      	pop	{r4, pc}
 800f58c:	e000ed04 	.word	0xe000ed04

0800f590 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f590:	b510      	push	{r4, lr}
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
 800f592:	4a10      	ldr	r2, [pc, #64]	; (800f5d4 <prvHeapInit+0x44>)

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f594:	0753      	lsls	r3, r2, #29
 800f596:	d01a      	beq.n	800f5ce <prvHeapInit+0x3e>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800f598:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f59a:	2307      	movs	r3, #7
 800f59c:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800f59e:	4b0e      	ldr	r3, [pc, #56]	; (800f5d8 <prvHeapInit+0x48>)
 800f5a0:	1a5b      	subs	r3, r3, r1
 800f5a2:	189b      	adds	r3, r3, r2
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f5a4:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) ulAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f5a6:	490d      	ldr	r1, [pc, #52]	; (800f5dc <prvHeapInit+0x4c>)
 800f5a8:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f5aa:	2000      	movs	r0, #0
 800f5ac:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f5ae:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800f5b0:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f5b2:	2407      	movs	r4, #7
 800f5b4:	43a3      	bics	r3, r4
	pxEnd = ( void * ) ulAddress;
 800f5b6:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 800f5b8:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f5ba:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f5bc:	1a98      	subs	r0, r3, r2
 800f5be:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f5c0:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f5c2:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f5c4:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f5c6:	2380      	movs	r3, #128	; 0x80
 800f5c8:	061b      	lsls	r3, r3, #24
 800f5ca:	614b      	str	r3, [r1, #20]
}
 800f5cc:	bd10      	pop	{r4, pc}
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f5ce:	4b02      	ldr	r3, [pc, #8]	; (800f5d8 <prvHeapInit+0x48>)
 800f5d0:	e7e9      	b.n	800f5a6 <prvHeapInit+0x16>
 800f5d2:	46c0      	nop			; (mov r8, r8)
 800f5d4:	20002840 	.word	0x20002840
 800f5d8:	00003f48 	.word	0x00003f48
 800f5dc:	20002828 	.word	0x20002828

0800f5e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f5e0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f5e2:	4a12      	ldr	r2, [pc, #72]	; (800f62c <prvInsertBlockIntoFreeList+0x4c>)
 800f5e4:	e000      	b.n	800f5e8 <prvInsertBlockIntoFreeList+0x8>
 800f5e6:	001a      	movs	r2, r3
 800f5e8:	6813      	ldr	r3, [r2, #0]
 800f5ea:	4283      	cmp	r3, r0
 800f5ec:	d3fb      	bcc.n	800f5e6 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f5ee:	6851      	ldr	r1, [r2, #4]
 800f5f0:	1854      	adds	r4, r2, r1
 800f5f2:	4284      	cmp	r4, r0
 800f5f4:	d008      	beq.n	800f608 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f5f6:	6841      	ldr	r1, [r0, #4]
 800f5f8:	1844      	adds	r4, r0, r1
 800f5fa:	42a3      	cmp	r3, r4
 800f5fc:	d009      	beq.n	800f612 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f5fe:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f600:	4290      	cmp	r0, r2
 800f602:	d000      	beq.n	800f606 <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f604:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f606:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f608:	6840      	ldr	r0, [r0, #4]
 800f60a:	1809      	adds	r1, r1, r0
 800f60c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800f60e:	0010      	movs	r0, r2
 800f610:	e7f1      	b.n	800f5f6 <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f612:	4c06      	ldr	r4, [pc, #24]	; (800f62c <prvInsertBlockIntoFreeList+0x4c>)
 800f614:	68a4      	ldr	r4, [r4, #8]
 800f616:	42a3      	cmp	r3, r4
 800f618:	d006      	beq.n	800f628 <prvInsertBlockIntoFreeList+0x48>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	18c9      	adds	r1, r1, r3
 800f61e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f620:	6813      	ldr	r3, [r2, #0]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	6003      	str	r3, [r0, #0]
 800f626:	e7eb      	b.n	800f600 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f628:	6004      	str	r4, [r0, #0]
 800f62a:	e7e9      	b.n	800f600 <prvInsertBlockIntoFreeList+0x20>
 800f62c:	20002828 	.word	0x20002828

0800f630 <pvPortMalloc>:
{
 800f630:	b570      	push	{r4, r5, r6, lr}
 800f632:	0005      	movs	r5, r0
	vTaskSuspendAll();
 800f634:	f7ff f8cc 	bl	800e7d0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f638:	4b2e      	ldr	r3, [pc, #184]	; (800f6f4 <pvPortMalloc+0xc4>)
 800f63a:	689b      	ldr	r3, [r3, #8]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d014      	beq.n	800f66a <pvPortMalloc+0x3a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f640:	4b2c      	ldr	r3, [pc, #176]	; (800f6f4 <pvPortMalloc+0xc4>)
 800f642:	695b      	ldr	r3, [r3, #20]
 800f644:	422b      	tst	r3, r5
 800f646:	d113      	bne.n	800f670 <pvPortMalloc+0x40>
			if( xWantedSize > 0 )
 800f648:	2d00      	cmp	r5, #0
 800f64a:	d005      	beq.n	800f658 <pvPortMalloc+0x28>
				xWantedSize += xHeapStructSize;
 800f64c:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f64e:	076b      	lsls	r3, r5, #29
 800f650:	d002      	beq.n	800f658 <pvPortMalloc+0x28>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f652:	2307      	movs	r3, #7
 800f654:	439d      	bics	r5, r3
 800f656:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f658:	2d00      	cmp	r5, #0
 800f65a:	d010      	beq.n	800f67e <pvPortMalloc+0x4e>
 800f65c:	4b25      	ldr	r3, [pc, #148]	; (800f6f4 <pvPortMalloc+0xc4>)
 800f65e:	691b      	ldr	r3, [r3, #16]
 800f660:	42ab      	cmp	r3, r5
 800f662:	d310      	bcc.n	800f686 <pvPortMalloc+0x56>
				pxBlock = xStart.pxNextFreeBlock;
 800f664:	4a23      	ldr	r2, [pc, #140]	; (800f6f4 <pvPortMalloc+0xc4>)
 800f666:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f668:	e013      	b.n	800f692 <pvPortMalloc+0x62>
			prvHeapInit();
 800f66a:	f7ff ff91 	bl	800f590 <prvHeapInit>
 800f66e:	e7e7      	b.n	800f640 <pvPortMalloc+0x10>
	( void ) xTaskResumeAll();
 800f670:	f7ff f936 	bl	800e8e0 <xTaskResumeAll>
void *pvReturn = NULL;
 800f674:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 800f676:	f7fd fc17 	bl	800cea8 <vApplicationMallocFailedHook>
}
 800f67a:	0030      	movs	r0, r6
 800f67c:	bd70      	pop	{r4, r5, r6, pc}
	( void ) xTaskResumeAll();
 800f67e:	f7ff f92f 	bl	800e8e0 <xTaskResumeAll>
void *pvReturn = NULL;
 800f682:	2600      	movs	r6, #0
 800f684:	e7f7      	b.n	800f676 <pvPortMalloc+0x46>
	( void ) xTaskResumeAll();
 800f686:	f7ff f92b 	bl	800e8e0 <xTaskResumeAll>
void *pvReturn = NULL;
 800f68a:	2600      	movs	r6, #0
 800f68c:	e7f3      	b.n	800f676 <pvPortMalloc+0x46>
					pxPreviousBlock = pxBlock;
 800f68e:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800f690:	001c      	movs	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f692:	6863      	ldr	r3, [r4, #4]
 800f694:	42ab      	cmp	r3, r5
 800f696:	d202      	bcs.n	800f69e <pvPortMalloc+0x6e>
 800f698:	6823      	ldr	r3, [r4, #0]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d1f7      	bne.n	800f68e <pvPortMalloc+0x5e>
				if( pxBlock != pxEnd )
 800f69e:	4b15      	ldr	r3, [pc, #84]	; (800f6f4 <pvPortMalloc+0xc4>)
 800f6a0:	689b      	ldr	r3, [r3, #8]
 800f6a2:	42a3      	cmp	r3, r4
 800f6a4:	d01c      	beq.n	800f6e0 <pvPortMalloc+0xb0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f6a6:	6816      	ldr	r6, [r2, #0]
 800f6a8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f6aa:	6823      	ldr	r3, [r4, #0]
 800f6ac:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f6ae:	6863      	ldr	r3, [r4, #4]
 800f6b0:	1b5b      	subs	r3, r3, r5
 800f6b2:	2b10      	cmp	r3, #16
 800f6b4:	d818      	bhi.n	800f6e8 <pvPortMalloc+0xb8>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f6b6:	6861      	ldr	r1, [r4, #4]
 800f6b8:	4a0e      	ldr	r2, [pc, #56]	; (800f6f4 <pvPortMalloc+0xc4>)
 800f6ba:	6913      	ldr	r3, [r2, #16]
 800f6bc:	1a5b      	subs	r3, r3, r1
 800f6be:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f6c0:	68d2      	ldr	r2, [r2, #12]
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d201      	bcs.n	800f6ca <pvPortMalloc+0x9a>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f6c6:	4a0b      	ldr	r2, [pc, #44]	; (800f6f4 <pvPortMalloc+0xc4>)
 800f6c8:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f6ca:	4b0a      	ldr	r3, [pc, #40]	; (800f6f4 <pvPortMalloc+0xc4>)
 800f6cc:	695b      	ldr	r3, [r3, #20]
 800f6ce:	430b      	orrs	r3, r1
 800f6d0:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800f6d6:	f7ff f903 	bl	800e8e0 <xTaskResumeAll>
		if( pvReturn == NULL )
 800f6da:	2e00      	cmp	r6, #0
 800f6dc:	d1cd      	bne.n	800f67a <pvPortMalloc+0x4a>
 800f6de:	e7ca      	b.n	800f676 <pvPortMalloc+0x46>
	( void ) xTaskResumeAll();
 800f6e0:	f7ff f8fe 	bl	800e8e0 <xTaskResumeAll>
void *pvReturn = NULL;
 800f6e4:	2600      	movs	r6, #0
 800f6e6:	e7c6      	b.n	800f676 <pvPortMalloc+0x46>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f6e8:	1960      	adds	r0, r4, r5
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f6ea:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f6ec:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800f6ee:	f7ff ff77 	bl	800f5e0 <prvInsertBlockIntoFreeList>
 800f6f2:	e7e0      	b.n	800f6b6 <pvPortMalloc+0x86>
 800f6f4:	20002828 	.word	0x20002828

0800f6f8 <vPortFree>:
{
 800f6f8:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800f6fa:	2800      	cmp	r0, #0
 800f6fc:	d009      	beq.n	800f712 <vPortFree+0x1a>
		puc -= xHeapStructSize;
 800f6fe:	0005      	movs	r5, r0
 800f700:	3d08      	subs	r5, #8
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f702:	686b      	ldr	r3, [r5, #4]
 800f704:	4a0b      	ldr	r2, [pc, #44]	; (800f734 <vPortFree+0x3c>)
 800f706:	6952      	ldr	r2, [r2, #20]
 800f708:	421a      	tst	r2, r3
 800f70a:	d002      	beq.n	800f712 <vPortFree+0x1a>
			if( pxLink->pxNextFreeBlock == NULL )
 800f70c:	6829      	ldr	r1, [r5, #0]
 800f70e:	2900      	cmp	r1, #0
 800f710:	d000      	beq.n	800f714 <vPortFree+0x1c>
}
 800f712:	bd70      	pop	{r4, r5, r6, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f714:	4393      	bics	r3, r2
 800f716:	606b      	str	r3, [r5, #4]
				vTaskSuspendAll();
 800f718:	f7ff f85a 	bl	800e7d0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f71c:	686b      	ldr	r3, [r5, #4]
 800f71e:	4a05      	ldr	r2, [pc, #20]	; (800f734 <vPortFree+0x3c>)
 800f720:	6911      	ldr	r1, [r2, #16]
 800f722:	468c      	mov	ip, r1
 800f724:	4463      	add	r3, ip
 800f726:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f728:	0028      	movs	r0, r5
 800f72a:	f7ff ff59 	bl	800f5e0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800f72e:	f7ff f8d7 	bl	800e8e0 <xTaskResumeAll>
}
 800f732:	e7ee      	b.n	800f712 <vPortFree+0x1a>
 800f734:	20002828 	.word	0x20002828

0800f738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f738:	b510      	push	{r4, lr}
 800f73a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f73c:	f002 f80c 	bl	8011758 <HAL_RCC_GetHCLKFreq>
 800f740:	21fa      	movs	r1, #250	; 0xfa
 800f742:	0089      	lsls	r1, r1, #2
 800f744:	f7f0 fd04 	bl	8000150 <__udivsi3>
 800f748:	f000 fb58 	bl	800fdfc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800f74c:	2001      	movs	r0, #1
 800f74e:	2200      	movs	r2, #0
 800f750:	0021      	movs	r1, r4
 800f752:	4240      	negs	r0, r0
 800f754:	f000 fb0e 	bl	800fd74 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800f758:	2000      	movs	r0, #0
 800f75a:	bd10      	pop	{r4, pc}

0800f75c <HAL_Init>:
{
 800f75c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f75e:	4a06      	ldr	r2, [pc, #24]	; (800f778 <HAL_Init+0x1c>)
 800f760:	6813      	ldr	r3, [r2, #0]
 800f762:	2110      	movs	r1, #16
 800f764:	430b      	orrs	r3, r1
 800f766:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f768:	2000      	movs	r0, #0
 800f76a:	f7ff ffe5 	bl	800f738 <HAL_InitTick>
  HAL_MspInit();
 800f76e:	f001 fbd4 	bl	8010f1a <HAL_MspInit>
}
 800f772:	2000      	movs	r0, #0
 800f774:	bd10      	pop	{r4, pc}
 800f776:	46c0      	nop			; (mov r8, r8)
 800f778:	40022000 	.word	0x40022000

0800f77c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800f77c:	4a02      	ldr	r2, [pc, #8]	; (800f788 <HAL_IncTick+0xc>)
 800f77e:	6813      	ldr	r3, [r2, #0]
 800f780:	3301      	adds	r3, #1
 800f782:	6013      	str	r3, [r2, #0]
}
 800f784:	4770      	bx	lr
 800f786:	46c0      	nop			; (mov r8, r8)
 800f788:	20006788 	.word	0x20006788

0800f78c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800f78c:	4b01      	ldr	r3, [pc, #4]	; (800f794 <HAL_GetTick+0x8>)
 800f78e:	6818      	ldr	r0, [r3, #0]
}
 800f790:	4770      	bx	lr
 800f792:	46c0      	nop			; (mov r8, r8)
 800f794:	20006788 	.word	0x20006788

0800f798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800f798:	b510      	push	{r4, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800f79e:	f7ff fff5 	bl	800f78c <HAL_GetTick>
 800f7a2:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800f7a4:	f7ff fff2 	bl	800f78c <HAL_GetTick>
 800f7a8:	1b00      	subs	r0, r0, r4
 800f7aa:	9b01      	ldr	r3, [sp, #4]
 800f7ac:	4298      	cmp	r0, r3
 800f7ae:	d3f9      	bcc.n	800f7a4 <HAL_Delay+0xc>
  {
  }
}
 800f7b0:	b002      	add	sp, #8
 800f7b2:	bd10      	pop	{r4, pc}

0800f7b4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800f7b4:	4b01      	ldr	r3, [pc, #4]	; (800f7bc <HAL_GetREVID+0x8>)
 800f7b6:	6818      	ldr	r0, [r3, #0]
 800f7b8:	0c00      	lsrs	r0, r0, #16
}
 800f7ba:	4770      	bx	lr
 800f7bc:	40015800 	.word	0x40015800

0800f7c0 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800f7c0:	4b02      	ldr	r3, [pc, #8]	; (800f7cc <HAL_GetDEVID+0xc>)
 800f7c2:	6818      	ldr	r0, [r3, #0]
 800f7c4:	0500      	lsls	r0, r0, #20
 800f7c6:	0d00      	lsrs	r0, r0, #20
}
 800f7c8:	4770      	bx	lr
 800f7ca:	46c0      	nop			; (mov r8, r8)
 800f7cc:	40015800 	.word	0x40015800

0800f7d0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800f7d0:	b570      	push	{r4, r5, r6, lr}
 800f7d2:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f7d4:	6803      	ldr	r3, [r0, #0]
 800f7d6:	689a      	ldr	r2, [r3, #8]
 800f7d8:	0752      	lsls	r2, r2, #29
 800f7da:	d521      	bpl.n	800f820 <ADC_ConversionStop+0x50>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f7dc:	689a      	ldr	r2, [r3, #8]
 800f7de:	0752      	lsls	r2, r2, #29
 800f7e0:	d506      	bpl.n	800f7f0 <ADC_ConversionStop+0x20>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800f7e2:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f7e4:	0792      	lsls	r2, r2, #30
 800f7e6:	d403      	bmi.n	800f7f0 <ADC_ConversionStop+0x20>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800f7e8:	689a      	ldr	r2, [r3, #8]
 800f7ea:	2110      	movs	r1, #16
 800f7ec:	430a      	orrs	r2, r1
 800f7ee:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800f7f0:	f7ff ffcc 	bl	800f78c <HAL_GetTick>
 800f7f4:	0005      	movs	r5, r0
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f7f6:	6823      	ldr	r3, [r4, #0]
 800f7f8:	689b      	ldr	r3, [r3, #8]
 800f7fa:	075b      	lsls	r3, r3, #29
 800f7fc:	d50e      	bpl.n	800f81c <ADC_ConversionStop+0x4c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800f7fe:	f7ff ffc5 	bl	800f78c <HAL_GetTick>
 800f802:	1b40      	subs	r0, r0, r5
 800f804:	2802      	cmp	r0, #2
 800f806:	d9f6      	bls.n	800f7f6 <ADC_ConversionStop+0x26>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f808:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f80a:	2210      	movs	r2, #16
 800f80c:	4313      	orrs	r3, r2
 800f80e:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f810:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f812:	3a0f      	subs	r2, #15
 800f814:	4313      	orrs	r3, r2
 800f816:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 800f818:	2001      	movs	r0, #1
 800f81a:	e002      	b.n	800f822 <ADC_ConversionStop+0x52>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800f81c:	2000      	movs	r0, #0
 800f81e:	e000      	b.n	800f822 <ADC_ConversionStop+0x52>
 800f820:	2000      	movs	r0, #0
}
 800f822:	bd70      	pop	{r4, r5, r6, pc}

0800f824 <ADC_Disable>:
{
 800f824:	b570      	push	{r4, r5, r6, lr}
 800f826:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f828:	6802      	ldr	r2, [r0, #0]
 800f82a:	6891      	ldr	r1, [r2, #8]
 800f82c:	2303      	movs	r3, #3
 800f82e:	400b      	ands	r3, r1
 800f830:	2b01      	cmp	r3, #1
 800f832:	d001      	beq.n	800f838 <ADC_Disable+0x14>
  return HAL_OK;
 800f834:	2000      	movs	r0, #0
}
 800f836:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f838:	6813      	ldr	r3, [r2, #0]
 800f83a:	07db      	lsls	r3, r3, #31
 800f83c:	d402      	bmi.n	800f844 <ADC_Disable+0x20>
 800f83e:	68d3      	ldr	r3, [r2, #12]
 800f840:	041b      	lsls	r3, r3, #16
 800f842:	d52d      	bpl.n	800f8a0 <ADC_Disable+0x7c>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800f844:	6891      	ldr	r1, [r2, #8]
 800f846:	2305      	movs	r3, #5
 800f848:	400b      	ands	r3, r1
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d009      	beq.n	800f862 <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f84e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f850:	2210      	movs	r2, #16
 800f852:	4313      	orrs	r3, r2
 800f854:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f856:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f858:	3a0f      	subs	r2, #15
 800f85a:	4313      	orrs	r3, r2
 800f85c:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800f85e:	2001      	movs	r0, #1
 800f860:	e7e9      	b.n	800f836 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 800f862:	6893      	ldr	r3, [r2, #8]
 800f864:	2102      	movs	r1, #2
 800f866:	430b      	orrs	r3, r1
 800f868:	6093      	str	r3, [r2, #8]
 800f86a:	6823      	ldr	r3, [r4, #0]
 800f86c:	2203      	movs	r2, #3
 800f86e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800f870:	f7ff ff8c 	bl	800f78c <HAL_GetTick>
 800f874:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f876:	6823      	ldr	r3, [r4, #0]
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	07db      	lsls	r3, r3, #31
 800f87c:	d50e      	bpl.n	800f89c <ADC_Disable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800f87e:	f7ff ff85 	bl	800f78c <HAL_GetTick>
 800f882:	1b40      	subs	r0, r0, r5
 800f884:	2802      	cmp	r0, #2
 800f886:	d9f6      	bls.n	800f876 <ADC_Disable+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f888:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f88a:	2210      	movs	r2, #16
 800f88c:	4313      	orrs	r3, r2
 800f88e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f890:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f892:	3a0f      	subs	r2, #15
 800f894:	4313      	orrs	r3, r2
 800f896:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f898:	2001      	movs	r0, #1
 800f89a:	e7cc      	b.n	800f836 <ADC_Disable+0x12>
  return HAL_OK;
 800f89c:	2000      	movs	r0, #0
 800f89e:	e7ca      	b.n	800f836 <ADC_Disable+0x12>
 800f8a0:	2000      	movs	r0, #0
 800f8a2:	e7c8      	b.n	800f836 <ADC_Disable+0x12>

0800f8a4 <ADC_Enable>:
{
 800f8a4:	b530      	push	{r4, r5, lr}
 800f8a6:	b083      	sub	sp, #12
 800f8a8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f8ae:	6803      	ldr	r3, [r0, #0]
 800f8b0:	6899      	ldr	r1, [r3, #8]
 800f8b2:	2203      	movs	r2, #3
 800f8b4:	400a      	ands	r2, r1
 800f8b6:	2a01      	cmp	r2, #1
 800f8b8:	d00e      	beq.n	800f8d8 <ADC_Enable+0x34>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f8ba:	6899      	ldr	r1, [r3, #8]
 800f8bc:	4a20      	ldr	r2, [pc, #128]	; (800f940 <ADC_Enable+0x9c>)
 800f8be:	4211      	tst	r1, r2
 800f8c0:	d112      	bne.n	800f8e8 <ADC_Enable+0x44>
    __HAL_ADC_ENABLE(hadc);
 800f8c2:	689a      	ldr	r2, [r3, #8]
 800f8c4:	2101      	movs	r1, #1
 800f8c6:	430a      	orrs	r2, r1
 800f8c8:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800f8ca:	4b1e      	ldr	r3, [pc, #120]	; (800f944 <ADC_Enable+0xa0>)
 800f8cc:	6818      	ldr	r0, [r3, #0]
 800f8ce:	491e      	ldr	r1, [pc, #120]	; (800f948 <ADC_Enable+0xa4>)
 800f8d0:	f7f0 fc3e 	bl	8000150 <__udivsi3>
 800f8d4:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800f8d6:	e015      	b.n	800f904 <ADC_Enable+0x60>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f8d8:	681a      	ldr	r2, [r3, #0]
 800f8da:	07d2      	lsls	r2, r2, #31
 800f8dc:	d42d      	bmi.n	800f93a <ADC_Enable+0x96>
 800f8de:	68da      	ldr	r2, [r3, #12]
 800f8e0:	0412      	lsls	r2, r2, #16
 800f8e2:	d5ea      	bpl.n	800f8ba <ADC_Enable+0x16>
  return HAL_OK;
 800f8e4:	2000      	movs	r0, #0
 800f8e6:	e008      	b.n	800f8fa <ADC_Enable+0x56>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f8e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f8ea:	2210      	movs	r2, #16
 800f8ec:	4313      	orrs	r3, r2
 800f8ee:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f8f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f8f2:	3a0f      	subs	r2, #15
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800f8f8:	2001      	movs	r0, #1
}
 800f8fa:	b003      	add	sp, #12
 800f8fc:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 800f8fe:	9b01      	ldr	r3, [sp, #4]
 800f900:	3b01      	subs	r3, #1
 800f902:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800f904:	9b01      	ldr	r3, [sp, #4]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d1f9      	bne.n	800f8fe <ADC_Enable+0x5a>
    tickstart = HAL_GetTick();
 800f90a:	f7ff ff3f 	bl	800f78c <HAL_GetTick>
 800f90e:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f910:	6823      	ldr	r3, [r4, #0]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	07db      	lsls	r3, r3, #31
 800f916:	d40e      	bmi.n	800f936 <ADC_Enable+0x92>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f918:	f7ff ff38 	bl	800f78c <HAL_GetTick>
 800f91c:	1b40      	subs	r0, r0, r5
 800f91e:	2802      	cmp	r0, #2
 800f920:	d9f6      	bls.n	800f910 <ADC_Enable+0x6c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f922:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f924:	2210      	movs	r2, #16
 800f926:	4313      	orrs	r3, r2
 800f928:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f92a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f92c:	3a0f      	subs	r2, #15
 800f92e:	4313      	orrs	r3, r2
 800f930:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f932:	2001      	movs	r0, #1
 800f934:	e7e1      	b.n	800f8fa <ADC_Enable+0x56>
  return HAL_OK;
 800f936:	2000      	movs	r0, #0
 800f938:	e7df      	b.n	800f8fa <ADC_Enable+0x56>
 800f93a:	2000      	movs	r0, #0
 800f93c:	e7dd      	b.n	800f8fa <ADC_Enable+0x56>
 800f93e:	46c0      	nop			; (mov r8, r8)
 800f940:	80000017 	.word	0x80000017
 800f944:	200000a4 	.word	0x200000a4
 800f948:	000f4240 	.word	0x000f4240

0800f94c <HAL_ADC_Init>:
{
 800f94c:	b570      	push	{r4, r5, r6, lr}
 800f94e:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800f950:	d100      	bne.n	800f954 <HAL_ADC_Init+0x8>
 800f952:	e0a7      	b.n	800faa4 <HAL_ADC_Init+0x158>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f954:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f956:	2b00      	cmp	r3, #0
 800f958:	d07d      	beq.n	800fa56 <HAL_ADC_Init+0x10a>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f95a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f95c:	06db      	lsls	r3, r3, #27
 800f95e:	d500      	bpl.n	800f962 <HAL_ADC_Init+0x16>
 800f960:	e09a      	b.n	800fa98 <HAL_ADC_Init+0x14c>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800f962:	6821      	ldr	r1, [r4, #0]
 800f964:	688b      	ldr	r3, [r1, #8]
 800f966:	2204      	movs	r2, #4
 800f968:	401a      	ands	r2, r3
      (tmp_hal_status == HAL_OK)                                &&
 800f96a:	d000      	beq.n	800f96e <HAL_ADC_Init+0x22>
 800f96c:	e094      	b.n	800fa98 <HAL_ADC_Init+0x14c>
    ADC_STATE_CLR_SET(hadc->State,
 800f96e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f970:	484d      	ldr	r0, [pc, #308]	; (800faa8 <HAL_ADC_Init+0x15c>)
 800f972:	4003      	ands	r3, r0
 800f974:	3006      	adds	r0, #6
 800f976:	30ff      	adds	r0, #255	; 0xff
 800f978:	4303      	orrs	r3, r0
 800f97a:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f97c:	6888      	ldr	r0, [r1, #8]
 800f97e:	2303      	movs	r3, #3
 800f980:	4003      	ands	r3, r0
 800f982:	2b01      	cmp	r3, #1
 800f984:	d06d      	beq.n	800fa62 <HAL_ADC_Init+0x116>
      MODIFY_REG(hadc->Instance->CFGR1,
 800f986:	68cb      	ldr	r3, [r1, #12]
 800f988:	2018      	movs	r0, #24
 800f98a:	4383      	bics	r3, r0
 800f98c:	68a0      	ldr	r0, [r4, #8]
 800f98e:	4303      	orrs	r3, r0
 800f990:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800f992:	6821      	ldr	r1, [r4, #0]
 800f994:	690b      	ldr	r3, [r1, #16]
 800f996:	009b      	lsls	r3, r3, #2
 800f998:	089b      	lsrs	r3, r3, #2
 800f99a:	6860      	ldr	r0, [r4, #4]
 800f99c:	4303      	orrs	r3, r0
 800f99e:	610b      	str	r3, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f9a0:	6821      	ldr	r1, [r4, #0]
 800f9a2:	68cb      	ldr	r3, [r1, #12]
 800f9a4:	4841      	ldr	r0, [pc, #260]	; (800faac <HAL_ADC_Init+0x160>)
 800f9a6:	4003      	ands	r3, r0
 800f9a8:	60cb      	str	r3, [r1, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f9aa:	69a3      	ldr	r3, [r4, #24]
 800f9ac:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800f9ae:	69e1      	ldr	r1, [r4, #28]
 800f9b0:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f9b2:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f9b4:	6a21      	ldr	r1, [r4, #32]
 800f9b6:	0348      	lsls	r0, r1, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800f9b8:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800f9ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800f9bc:	2801      	cmp	r0, #1
 800f9be:	d057      	beq.n	800fa70 <HAL_ADC_Init+0x124>
 800f9c0:	2080      	movs	r0, #128	; 0x80
 800f9c2:	0140      	lsls	r0, r0, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f9c4:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800f9c6:	68e0      	ldr	r0, [r4, #12]
 800f9c8:	4303      	orrs	r3, r0
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f9ca:	6920      	ldr	r0, [r4, #16]
 800f9cc:	2802      	cmp	r0, #2
 800f9ce:	d051      	beq.n	800fa74 <HAL_ADC_Init+0x128>
                 hadc->Init.DataAlign                                   |
 800f9d0:	4313      	orrs	r3, r2
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800f9d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f9d4:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f9d6:	4313      	orrs	r3, r2
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f9d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f9da:	2a01      	cmp	r2, #1
 800f9dc:	d04c      	beq.n	800fa78 <HAL_ADC_Init+0x12c>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f9de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800f9e0:	21c2      	movs	r1, #194	; 0xc2
 800f9e2:	31ff      	adds	r1, #255	; 0xff
 800f9e4:	428a      	cmp	r2, r1
 800f9e6:	d002      	beq.n	800f9ee <HAL_ADC_Init+0xa2>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800f9e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f9ea:	430a      	orrs	r2, r1
 800f9ec:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f9ee:	6821      	ldr	r1, [r4, #0]
 800f9f0:	68ca      	ldr	r2, [r1, #12]
 800f9f2:	431a      	orrs	r2, r3
 800f9f4:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f9f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f9f8:	2180      	movs	r1, #128	; 0x80
 800f9fa:	0549      	lsls	r1, r1, #21
 800f9fc:	428a      	cmp	r2, r1
 800f9fe:	d00d      	beq.n	800fa1c <HAL_ADC_Init+0xd0>
 800fa00:	2a01      	cmp	r2, #1
 800fa02:	d00b      	beq.n	800fa1c <HAL_ADC_Init+0xd0>
 800fa04:	2a02      	cmp	r2, #2
 800fa06:	d009      	beq.n	800fa1c <HAL_ADC_Init+0xd0>
 800fa08:	2a03      	cmp	r2, #3
 800fa0a:	d007      	beq.n	800fa1c <HAL_ADC_Init+0xd0>
 800fa0c:	2a04      	cmp	r2, #4
 800fa0e:	d005      	beq.n	800fa1c <HAL_ADC_Init+0xd0>
 800fa10:	2a05      	cmp	r2, #5
 800fa12:	d003      	beq.n	800fa1c <HAL_ADC_Init+0xd0>
 800fa14:	2a06      	cmp	r2, #6
 800fa16:	d001      	beq.n	800fa1c <HAL_ADC_Init+0xd0>
 800fa18:	2a07      	cmp	r2, #7
 800fa1a:	d10a      	bne.n	800fa32 <HAL_ADC_Init+0xe6>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fa1c:	6820      	ldr	r0, [r4, #0]
 800fa1e:	6941      	ldr	r1, [r0, #20]
 800fa20:	2207      	movs	r2, #7
 800fa22:	4391      	bics	r1, r2
 800fa24:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800fa26:	6820      	ldr	r0, [r4, #0]
 800fa28:	6941      	ldr	r1, [r0, #20]
 800fa2a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800fa2c:	402a      	ands	r2, r5
 800fa2e:	430a      	orrs	r2, r1
 800fa30:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800fa32:	6822      	ldr	r2, [r4, #0]
 800fa34:	68d2      	ldr	r2, [r2, #12]
 800fa36:	491e      	ldr	r1, [pc, #120]	; (800fab0 <HAL_ADC_Init+0x164>)
 800fa38:	400a      	ands	r2, r1
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d022      	beq.n	800fa84 <HAL_ADC_Init+0x138>
      ADC_STATE_CLR_SET(hadc->State,
 800fa3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fa40:	2212      	movs	r2, #18
 800fa42:	4393      	bics	r3, r2
 800fa44:	3a02      	subs	r2, #2
 800fa46:	4313      	orrs	r3, r2
 800fa48:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fa4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fa4c:	3a0f      	subs	r2, #15
 800fa4e:	4313      	orrs	r3, r2
 800fa50:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800fa52:	2001      	movs	r0, #1
 800fa54:	e025      	b.n	800faa2 <HAL_ADC_Init+0x156>
    ADC_CLEAR_ERRORCODE(hadc);
 800fa56:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800fa58:	2240      	movs	r2, #64	; 0x40
 800fa5a:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800fa5c:	f7fc fb24 	bl	800c0a8 <HAL_ADC_MspInit>
 800fa60:	e77b      	b.n	800f95a <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800fa62:	680b      	ldr	r3, [r1, #0]
 800fa64:	07db      	lsls	r3, r3, #31
 800fa66:	d49b      	bmi.n	800f9a0 <HAL_ADC_Init+0x54>
 800fa68:	68cb      	ldr	r3, [r1, #12]
 800fa6a:	041b      	lsls	r3, r3, #16
 800fa6c:	d498      	bmi.n	800f9a0 <HAL_ADC_Init+0x54>
 800fa6e:	e78a      	b.n	800f986 <HAL_ADC_Init+0x3a>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800fa70:	0010      	movs	r0, r2
 800fa72:	e7a7      	b.n	800f9c4 <HAL_ADC_Init+0x78>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800fa74:	2204      	movs	r2, #4
 800fa76:	e7ab      	b.n	800f9d0 <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800fa78:	2900      	cmp	r1, #0
 800fa7a:	d1b0      	bne.n	800f9de <HAL_ADC_Init+0x92>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800fa7c:	2280      	movs	r2, #128	; 0x80
 800fa7e:	0252      	lsls	r2, r2, #9
 800fa80:	4313      	orrs	r3, r2
 800fa82:	e7ac      	b.n	800f9de <HAL_ADC_Init+0x92>
      ADC_CLEAR_ERRORCODE(hadc);
 800fa84:	2300      	movs	r3, #0
 800fa86:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800fa88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fa8a:	2203      	movs	r2, #3
 800fa8c:	4393      	bics	r3, r2
 800fa8e:	3a02      	subs	r2, #2
 800fa90:	4313      	orrs	r3, r2
 800fa92:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fa94:	2000      	movs	r0, #0
 800fa96:	e004      	b.n	800faa2 <HAL_ADC_Init+0x156>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fa98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fa9a:	2210      	movs	r2, #16
 800fa9c:	4313      	orrs	r3, r2
 800fa9e:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800faa0:	2001      	movs	r0, #1
}
 800faa2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800faa4:	2001      	movs	r0, #1
 800faa6:	e7fc      	b.n	800faa2 <HAL_ADC_Init+0x156>
 800faa8:	fffffefd 	.word	0xfffffefd
 800faac:	fffe0219 	.word	0xfffe0219
 800fab0:	833fffe7 	.word	0x833fffe7

0800fab4 <HAL_ADC_Start>:
{
 800fab4:	b510      	push	{r4, lr}
 800fab6:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fab8:	6803      	ldr	r3, [r0, #0]
 800faba:	689b      	ldr	r3, [r3, #8]
 800fabc:	075b      	lsls	r3, r3, #29
 800fabe:	d423      	bmi.n	800fb08 <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 800fac0:	2340      	movs	r3, #64	; 0x40
 800fac2:	5cc3      	ldrb	r3, [r0, r3]
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d021      	beq.n	800fb0c <HAL_ADC_Start+0x58>
 800fac8:	2340      	movs	r3, #64	; 0x40
 800faca:	2201      	movs	r2, #1
 800facc:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800face:	69c3      	ldr	r3, [r0, #28]
 800fad0:	2b01      	cmp	r3, #1
 800fad2:	d114      	bne.n	800fafe <HAL_ADC_Start+0x4a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fad4:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800fad6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fad8:	4a0d      	ldr	r2, [pc, #52]	; (800fb10 <HAL_ADC_Start+0x5c>)
 800fada:	401a      	ands	r2, r3
 800fadc:	2380      	movs	r3, #128	; 0x80
 800fade:	005b      	lsls	r3, r3, #1
 800fae0:	4313      	orrs	r3, r2
 800fae2:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 800fae4:	2300      	movs	r3, #0
 800fae6:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800fae8:	2240      	movs	r2, #64	; 0x40
 800faea:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800faec:	6823      	ldr	r3, [r4, #0]
 800faee:	3a24      	subs	r2, #36	; 0x24
 800faf0:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800faf2:	6822      	ldr	r2, [r4, #0]
 800faf4:	6893      	ldr	r3, [r2, #8]
 800faf6:	2104      	movs	r1, #4
 800faf8:	430b      	orrs	r3, r1
 800fafa:	6093      	str	r3, [r2, #8]
}
 800fafc:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800fafe:	f7ff fed1 	bl	800f8a4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800fb02:	2800      	cmp	r0, #0
 800fb04:	d0e7      	beq.n	800fad6 <HAL_ADC_Start+0x22>
 800fb06:	e7f9      	b.n	800fafc <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 800fb08:	2002      	movs	r0, #2
 800fb0a:	e7f7      	b.n	800fafc <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 800fb0c:	2002      	movs	r0, #2
 800fb0e:	e7f5      	b.n	800fafc <HAL_ADC_Start+0x48>
 800fb10:	fffff0fe 	.word	0xfffff0fe

0800fb14 <HAL_ADC_Stop>:
{ 
 800fb14:	b510      	push	{r4, lr}
 800fb16:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800fb18:	2340      	movs	r3, #64	; 0x40
 800fb1a:	5cc3      	ldrb	r3, [r0, r3]
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	d017      	beq.n	800fb50 <HAL_ADC_Stop+0x3c>
 800fb20:	2340      	movs	r3, #64	; 0x40
 800fb22:	2201      	movs	r2, #1
 800fb24:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800fb26:	f7ff fe53 	bl	800f7d0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800fb2a:	2800      	cmp	r0, #0
 800fb2c:	d003      	beq.n	800fb36 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 800fb2e:	2340      	movs	r3, #64	; 0x40
 800fb30:	2200      	movs	r2, #0
 800fb32:	54e2      	strb	r2, [r4, r3]
}
 800fb34:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800fb36:	0020      	movs	r0, r4
 800fb38:	f7ff fe74 	bl	800f824 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800fb3c:	2800      	cmp	r0, #0
 800fb3e:	d1f6      	bne.n	800fb2e <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 800fb40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fb42:	4a04      	ldr	r2, [pc, #16]	; (800fb54 <HAL_ADC_Stop+0x40>)
 800fb44:	4013      	ands	r3, r2
 800fb46:	3204      	adds	r2, #4
 800fb48:	32ff      	adds	r2, #255	; 0xff
 800fb4a:	4313      	orrs	r3, r2
 800fb4c:	6463      	str	r3, [r4, #68]	; 0x44
 800fb4e:	e7ee      	b.n	800fb2e <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 800fb50:	2002      	movs	r0, #2
 800fb52:	e7ef      	b.n	800fb34 <HAL_ADC_Stop+0x20>
 800fb54:	fffffefe 	.word	0xfffffefe

0800fb58 <HAL_ADC_PollForConversion>:
{
 800fb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb5a:	0004      	movs	r4, r0
 800fb5c:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800fb5e:	6943      	ldr	r3, [r0, #20]
 800fb60:	2b08      	cmp	r3, #8
 800fb62:	d026      	beq.n	800fbb2 <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800fb64:	6803      	ldr	r3, [r0, #0]
 800fb66:	68db      	ldr	r3, [r3, #12]
 800fb68:	07db      	lsls	r3, r3, #31
 800fb6a:	d419      	bmi.n	800fba0 <HAL_ADC_PollForConversion+0x48>
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800fb6c:	260c      	movs	r6, #12
  tickstart = HAL_GetTick();
 800fb6e:	f7ff fe0d 	bl	800f78c <HAL_GetTick>
 800fb72:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fb74:	6823      	ldr	r3, [r4, #0]
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	4216      	tst	r6, r2
 800fb7a:	d11c      	bne.n	800fbb6 <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 800fb7c:	1c6b      	adds	r3, r5, #1
 800fb7e:	d0f9      	beq.n	800fb74 <HAL_ADC_PollForConversion+0x1c>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800fb80:	2d00      	cmp	r5, #0
 800fb82:	d004      	beq.n	800fb8e <HAL_ADC_PollForConversion+0x36>
 800fb84:	f7ff fe02 	bl	800f78c <HAL_GetTick>
 800fb88:	1bc0      	subs	r0, r0, r7
 800fb8a:	42a8      	cmp	r0, r5
 800fb8c:	d9f2      	bls.n	800fb74 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800fb8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fb90:	2204      	movs	r2, #4
 800fb92:	4313      	orrs	r3, r2
 800fb94:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800fb96:	2340      	movs	r3, #64	; 0x40
 800fb98:	2200      	movs	r2, #0
 800fb9a:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 800fb9c:	2003      	movs	r0, #3
 800fb9e:	e007      	b.n	800fbb0 <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fba0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fba2:	2220      	movs	r2, #32
 800fba4:	4313      	orrs	r3, r2
 800fba6:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800fba8:	2340      	movs	r3, #64	; 0x40
 800fbaa:	2200      	movs	r2, #0
 800fbac:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800fbae:	2001      	movs	r0, #1
}
 800fbb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800fbb2:	2608      	movs	r6, #8
 800fbb4:	e7db      	b.n	800fb6e <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800fbb6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800fbb8:	2280      	movs	r2, #128	; 0x80
 800fbba:	0092      	lsls	r2, r2, #2
 800fbbc:	430a      	orrs	r2, r1
 800fbbe:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800fbc0:	68d9      	ldr	r1, [r3, #12]
 800fbc2:	22c0      	movs	r2, #192	; 0xc0
 800fbc4:	0112      	lsls	r2, r2, #4
 800fbc6:	4211      	tst	r1, r2
 800fbc8:	d113      	bne.n	800fbf2 <HAL_ADC_PollForConversion+0x9a>
 800fbca:	6a22      	ldr	r2, [r4, #32]
 800fbcc:	2a00      	cmp	r2, #0
 800fbce:	d110      	bne.n	800fbf2 <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800fbd0:	681a      	ldr	r2, [r3, #0]
 800fbd2:	0712      	lsls	r2, r2, #28
 800fbd4:	d50d      	bpl.n	800fbf2 <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fbd6:	689a      	ldr	r2, [r3, #8]
 800fbd8:	0752      	lsls	r2, r2, #29
 800fbda:	d412      	bmi.n	800fc02 <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800fbdc:	685a      	ldr	r2, [r3, #4]
 800fbde:	210c      	movs	r1, #12
 800fbe0:	438a      	bics	r2, r1
 800fbe2:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800fbe4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fbe6:	4a0c      	ldr	r2, [pc, #48]	; (800fc18 <HAL_ADC_PollForConversion+0xc0>)
 800fbe8:	4013      	ands	r3, r2
 800fbea:	3204      	adds	r2, #4
 800fbec:	32ff      	adds	r2, #255	; 0xff
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	6463      	str	r3, [r4, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800fbf2:	69a3      	ldr	r3, [r4, #24]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d10d      	bne.n	800fc14 <HAL_ADC_PollForConversion+0xbc>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800fbf8:	6823      	ldr	r3, [r4, #0]
 800fbfa:	220c      	movs	r2, #12
 800fbfc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800fbfe:	2000      	movs	r0, #0
 800fc00:	e7d6      	b.n	800fbb0 <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fc02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fc04:	2220      	movs	r2, #32
 800fc06:	4313      	orrs	r3, r2
 800fc08:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fc0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fc0c:	3a1f      	subs	r2, #31
 800fc0e:	4313      	orrs	r3, r2
 800fc10:	64a3      	str	r3, [r4, #72]	; 0x48
 800fc12:	e7ee      	b.n	800fbf2 <HAL_ADC_PollForConversion+0x9a>
  return HAL_OK;
 800fc14:	2000      	movs	r0, #0
 800fc16:	e7cb      	b.n	800fbb0 <HAL_ADC_PollForConversion+0x58>
 800fc18:	fffffefe 	.word	0xfffffefe

0800fc1c <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800fc1c:	6803      	ldr	r3, [r0, #0]
 800fc1e:	2208      	movs	r2, #8
 800fc20:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800fc22:	6803      	ldr	r3, [r0, #0]
 800fc24:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800fc26:	4770      	bx	lr

0800fc28 <HAL_ADC_ConfigChannel>:
{
 800fc28:	b530      	push	{r4, r5, lr}
 800fc2a:	b083      	sub	sp, #12
 800fc2c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800fc32:	3340      	adds	r3, #64	; 0x40
 800fc34:	5cc3      	ldrb	r3, [r0, r3]
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	d100      	bne.n	800fc3c <HAL_ADC_ConfigChannel+0x14>
 800fc3a:	e08a      	b.n	800fd52 <HAL_ADC_ConfigChannel+0x12a>
 800fc3c:	2340      	movs	r3, #64	; 0x40
 800fc3e:	2201      	movs	r2, #1
 800fc40:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fc42:	6803      	ldr	r3, [r0, #0]
 800fc44:	689a      	ldr	r2, [r3, #8]
 800fc46:	0752      	lsls	r2, r2, #29
 800fc48:	d475      	bmi.n	800fd36 <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 800fc4a:	4a43      	ldr	r2, [pc, #268]	; (800fd58 <HAL_ADC_ConfigChannel+0x130>)
 800fc4c:	6848      	ldr	r0, [r1, #4]
 800fc4e:	4290      	cmp	r0, r2
 800fc50:	d056      	beq.n	800fd00 <HAL_ADC_ConfigChannel+0xd8>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fc52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fc54:	2001      	movs	r0, #1
 800fc56:	680d      	ldr	r5, [r1, #0]
 800fc58:	40a8      	lsls	r0, r5
 800fc5a:	4302      	orrs	r2, r0
 800fc5c:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fc5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fc60:	2280      	movs	r2, #128	; 0x80
 800fc62:	0552      	lsls	r2, r2, #21
 800fc64:	4293      	cmp	r3, r2
 800fc66:	d01e      	beq.n	800fca6 <HAL_ADC_ConfigChannel+0x7e>
 800fc68:	2b01      	cmp	r3, #1
 800fc6a:	d01c      	beq.n	800fca6 <HAL_ADC_ConfigChannel+0x7e>
 800fc6c:	2b02      	cmp	r3, #2
 800fc6e:	d01a      	beq.n	800fca6 <HAL_ADC_ConfigChannel+0x7e>
 800fc70:	2b03      	cmp	r3, #3
 800fc72:	d018      	beq.n	800fca6 <HAL_ADC_ConfigChannel+0x7e>
 800fc74:	2b04      	cmp	r3, #4
 800fc76:	d016      	beq.n	800fca6 <HAL_ADC_ConfigChannel+0x7e>
 800fc78:	2b05      	cmp	r3, #5
 800fc7a:	d014      	beq.n	800fca6 <HAL_ADC_ConfigChannel+0x7e>
 800fc7c:	2b06      	cmp	r3, #6
 800fc7e:	d012      	beq.n	800fca6 <HAL_ADC_ConfigChannel+0x7e>
 800fc80:	2b07      	cmp	r3, #7
 800fc82:	d010      	beq.n	800fca6 <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800fc84:	6822      	ldr	r2, [r4, #0]
 800fc86:	6950      	ldr	r0, [r2, #20]
 800fc88:	2307      	movs	r3, #7
 800fc8a:	4003      	ands	r3, r0
 800fc8c:	6888      	ldr	r0, [r1, #8]
 800fc8e:	4298      	cmp	r0, r3
 800fc90:	d009      	beq.n	800fca6 <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fc92:	6950      	ldr	r0, [r2, #20]
 800fc94:	2307      	movs	r3, #7
 800fc96:	4398      	bics	r0, r3
 800fc98:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800fc9a:	6820      	ldr	r0, [r4, #0]
 800fc9c:	6942      	ldr	r2, [r0, #20]
 800fc9e:	688d      	ldr	r5, [r1, #8]
 800fca0:	402b      	ands	r3, r5
 800fca2:	4313      	orrs	r3, r2
 800fca4:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fca6:	680b      	ldr	r3, [r1, #0]
 800fca8:	001a      	movs	r2, r3
 800fcaa:	3a10      	subs	r2, #16
 800fcac:	2a02      	cmp	r2, #2
 800fcae:	d84c      	bhi.n	800fd4a <HAL_ADC_ConfigChannel+0x122>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fcb0:	4a2a      	ldr	r2, [pc, #168]	; (800fd5c <HAL_ADC_ConfigChannel+0x134>)
 800fcb2:	6812      	ldr	r2, [r2, #0]
 800fcb4:	2b10      	cmp	r3, #16
 800fcb6:	d00e      	beq.n	800fcd6 <HAL_ADC_ConfigChannel+0xae>
 800fcb8:	2b11      	cmp	r3, #17
 800fcba:	d009      	beq.n	800fcd0 <HAL_ADC_ConfigChannel+0xa8>
 800fcbc:	2380      	movs	r3, #128	; 0x80
 800fcbe:	045b      	lsls	r3, r3, #17
 800fcc0:	4313      	orrs	r3, r2
 800fcc2:	4a26      	ldr	r2, [pc, #152]	; (800fd5c <HAL_ADC_ConfigChannel+0x134>)
 800fcc4:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800fcc6:	680b      	ldr	r3, [r1, #0]
 800fcc8:	2b10      	cmp	r3, #16
 800fcca:	d007      	beq.n	800fcdc <HAL_ADC_ConfigChannel+0xb4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fccc:	2000      	movs	r0, #0
 800fcce:	e037      	b.n	800fd40 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fcd0:	2380      	movs	r3, #128	; 0x80
 800fcd2:	03db      	lsls	r3, r3, #15
 800fcd4:	e7f4      	b.n	800fcc0 <HAL_ADC_ConfigChannel+0x98>
 800fcd6:	2380      	movs	r3, #128	; 0x80
 800fcd8:	041b      	lsls	r3, r3, #16
 800fcda:	e7f1      	b.n	800fcc0 <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800fcdc:	4b20      	ldr	r3, [pc, #128]	; (800fd60 <HAL_ADC_ConfigChannel+0x138>)
 800fcde:	6818      	ldr	r0, [r3, #0]
 800fce0:	4920      	ldr	r1, [pc, #128]	; (800fd64 <HAL_ADC_ConfigChannel+0x13c>)
 800fce2:	f7f0 fa35 	bl	8000150 <__udivsi3>
 800fce6:	0083      	lsls	r3, r0, #2
 800fce8:	1818      	adds	r0, r3, r0
 800fcea:	0043      	lsls	r3, r0, #1
 800fcec:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800fcee:	e002      	b.n	800fcf6 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 800fcf0:	9b01      	ldr	r3, [sp, #4]
 800fcf2:	3b01      	subs	r3, #1
 800fcf4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800fcf6:	9b01      	ldr	r3, [sp, #4]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d1f9      	bne.n	800fcf0 <HAL_ADC_ConfigChannel+0xc8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	e01f      	b.n	800fd40 <HAL_ADC_ConfigChannel+0x118>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fd00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd02:	2001      	movs	r0, #1
 800fd04:	680d      	ldr	r5, [r1, #0]
 800fd06:	40a8      	lsls	r0, r5
 800fd08:	4382      	bics	r2, r0
 800fd0a:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fd0c:	680b      	ldr	r3, [r1, #0]
 800fd0e:	001a      	movs	r2, r3
 800fd10:	3a10      	subs	r2, #16
 800fd12:	2a02      	cmp	r2, #2
 800fd14:	d81b      	bhi.n	800fd4e <HAL_ADC_ConfigChannel+0x126>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fd16:	4a11      	ldr	r2, [pc, #68]	; (800fd5c <HAL_ADC_ConfigChannel+0x134>)
 800fd18:	6812      	ldr	r2, [r2, #0]
 800fd1a:	2b10      	cmp	r3, #16
 800fd1c:	d009      	beq.n	800fd32 <HAL_ADC_ConfigChannel+0x10a>
 800fd1e:	2b11      	cmp	r3, #17
 800fd20:	d005      	beq.n	800fd2e <HAL_ADC_ConfigChannel+0x106>
 800fd22:	4b11      	ldr	r3, [pc, #68]	; (800fd68 <HAL_ADC_ConfigChannel+0x140>)
 800fd24:	4013      	ands	r3, r2
 800fd26:	4a0d      	ldr	r2, [pc, #52]	; (800fd5c <HAL_ADC_ConfigChannel+0x134>)
 800fd28:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fd2a:	2000      	movs	r0, #0
 800fd2c:	e008      	b.n	800fd40 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fd2e:	4b0f      	ldr	r3, [pc, #60]	; (800fd6c <HAL_ADC_ConfigChannel+0x144>)
 800fd30:	e7f8      	b.n	800fd24 <HAL_ADC_ConfigChannel+0xfc>
 800fd32:	4b0f      	ldr	r3, [pc, #60]	; (800fd70 <HAL_ADC_ConfigChannel+0x148>)
 800fd34:	e7f6      	b.n	800fd24 <HAL_ADC_ConfigChannel+0xfc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fd36:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fd38:	2220      	movs	r2, #32
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800fd3e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800fd40:	2340      	movs	r3, #64	; 0x40
 800fd42:	2200      	movs	r2, #0
 800fd44:	54e2      	strb	r2, [r4, r3]
}
 800fd46:	b003      	add	sp, #12
 800fd48:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fd4a:	2000      	movs	r0, #0
 800fd4c:	e7f8      	b.n	800fd40 <HAL_ADC_ConfigChannel+0x118>
 800fd4e:	2000      	movs	r0, #0
 800fd50:	e7f6      	b.n	800fd40 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 800fd52:	2002      	movs	r0, #2
 800fd54:	e7f7      	b.n	800fd46 <HAL_ADC_ConfigChannel+0x11e>
 800fd56:	46c0      	nop			; (mov r8, r8)
 800fd58:	00001001 	.word	0x00001001
 800fd5c:	40012708 	.word	0x40012708
 800fd60:	200000a4 	.word	0x200000a4
 800fd64:	000f4240 	.word	0x000f4240
 800fd68:	feffffff 	.word	0xfeffffff
 800fd6c:	ffbfffff 	.word	0xffbfffff
 800fd70:	ff7fffff 	.word	0xff7fffff

0800fd74 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fd74:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 800fd76:	2800      	cmp	r0, #0
 800fd78:	db11      	blt.n	800fd9e <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fd7a:	0884      	lsrs	r4, r0, #2
 800fd7c:	4d13      	ldr	r5, [pc, #76]	; (800fdcc <HAL_NVIC_SetPriority+0x58>)
 800fd7e:	34c0      	adds	r4, #192	; 0xc0
 800fd80:	00a4      	lsls	r4, r4, #2
 800fd82:	5962      	ldr	r2, [r4, r5]
 800fd84:	2303      	movs	r3, #3
 800fd86:	4018      	ands	r0, r3
 800fd88:	00c0      	lsls	r0, r0, #3
 800fd8a:	33fc      	adds	r3, #252	; 0xfc
 800fd8c:	001e      	movs	r6, r3
 800fd8e:	4086      	lsls	r6, r0
 800fd90:	43b2      	bics	r2, r6
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fd92:	0189      	lsls	r1, r1, #6
 800fd94:	400b      	ands	r3, r1
 800fd96:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fd98:	4313      	orrs	r3, r2
 800fd9a:	5163      	str	r3, [r4, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800fd9c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fd9e:	b2c0      	uxtb	r0, r0
 800fda0:	220f      	movs	r2, #15
 800fda2:	4002      	ands	r2, r0
 800fda4:	3a08      	subs	r2, #8
 800fda6:	0892      	lsrs	r2, r2, #2
 800fda8:	3206      	adds	r2, #6
 800fdaa:	0092      	lsls	r2, r2, #2
 800fdac:	4b08      	ldr	r3, [pc, #32]	; (800fdd0 <HAL_NVIC_SetPriority+0x5c>)
 800fdae:	18d3      	adds	r3, r2, r3
 800fdb0:	685d      	ldr	r5, [r3, #4]
 800fdb2:	2403      	movs	r4, #3
 800fdb4:	4020      	ands	r0, r4
 800fdb6:	00c0      	lsls	r0, r0, #3
 800fdb8:	22ff      	movs	r2, #255	; 0xff
 800fdba:	0014      	movs	r4, r2
 800fdbc:	4084      	lsls	r4, r0
 800fdbe:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fdc0:	0189      	lsls	r1, r1, #6
 800fdc2:	400a      	ands	r2, r1
 800fdc4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fdc6:	432a      	orrs	r2, r5
 800fdc8:	605a      	str	r2, [r3, #4]
 800fdca:	e7e7      	b.n	800fd9c <HAL_NVIC_SetPriority+0x28>
 800fdcc:	e000e100 	.word	0xe000e100
 800fdd0:	e000ed00 	.word	0xe000ed00

0800fdd4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fdd4:	231f      	movs	r3, #31
 800fdd6:	4018      	ands	r0, r3
 800fdd8:	3b1e      	subs	r3, #30
 800fdda:	4083      	lsls	r3, r0
 800fddc:	4a01      	ldr	r2, [pc, #4]	; (800fde4 <HAL_NVIC_EnableIRQ+0x10>)
 800fdde:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800fde0:	4770      	bx	lr
 800fde2:	46c0      	nop			; (mov r8, r8)
 800fde4:	e000e100 	.word	0xe000e100

0800fde8 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fde8:	231f      	movs	r3, #31
 800fdea:	4018      	ands	r0, r3
 800fdec:	3b1e      	subs	r3, #30
 800fdee:	4083      	lsls	r3, r0
 800fdf0:	4901      	ldr	r1, [pc, #4]	; (800fdf8 <HAL_NVIC_DisableIRQ+0x10>)
 800fdf2:	2280      	movs	r2, #128	; 0x80
 800fdf4:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800fdf6:	4770      	bx	lr
 800fdf8:	e000e100 	.word	0xe000e100

0800fdfc <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800fdfc:	3801      	subs	r0, #1
 800fdfe:	4b0a      	ldr	r3, [pc, #40]	; (800fe28 <HAL_SYSTICK_Config+0x2c>)
 800fe00:	4298      	cmp	r0, r3
 800fe02:	d80f      	bhi.n	800fe24 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fe04:	4a09      	ldr	r2, [pc, #36]	; (800fe2c <HAL_SYSTICK_Config+0x30>)
 800fe06:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fe08:	4809      	ldr	r0, [pc, #36]	; (800fe30 <HAL_SYSTICK_Config+0x34>)
 800fe0a:	6a03      	ldr	r3, [r0, #32]
 800fe0c:	021b      	lsls	r3, r3, #8
 800fe0e:	0a1b      	lsrs	r3, r3, #8
 800fe10:	21c0      	movs	r1, #192	; 0xc0
 800fe12:	0609      	lsls	r1, r1, #24
 800fe14:	430b      	orrs	r3, r1
 800fe16:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fe18:	2300      	movs	r3, #0
 800fe1a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fe1c:	3307      	adds	r3, #7
 800fe1e:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fe20:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800fe22:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800fe24:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 800fe26:	e7fc      	b.n	800fe22 <HAL_SYSTICK_Config+0x26>
 800fe28:	00ffffff 	.word	0x00ffffff
 800fe2c:	e000e010 	.word	0xe000e010
 800fe30:	e000ed00 	.word	0xe000ed00

0800fe34 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800fe34:	2804      	cmp	r0, #4
 800fe36:	d005      	beq.n	800fe44 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800fe38:	4a05      	ldr	r2, [pc, #20]	; (800fe50 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800fe3a:	6813      	ldr	r3, [r2, #0]
 800fe3c:	2104      	movs	r1, #4
 800fe3e:	438b      	bics	r3, r1
 800fe40:	6013      	str	r3, [r2, #0]
  }
}
 800fe42:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fe44:	4a02      	ldr	r2, [pc, #8]	; (800fe50 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800fe46:	6813      	ldr	r3, [r2, #0]
 800fe48:	2104      	movs	r1, #4
 800fe4a:	430b      	orrs	r3, r1
 800fe4c:	6013      	str	r3, [r2, #0]
 800fe4e:	e7f8      	b.n	800fe42 <HAL_SYSTICK_CLKSourceConfig+0xe>
 800fe50:	e000e010 	.word	0xe000e010

0800fe54 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800fe54:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800fe56:	2500      	movs	r5, #0
 800fe58:	e00e      	b.n	800fe78 <CRC_Handle_8+0x24>
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800fe5a:	00ac      	lsls	r4, r5, #2
 800fe5c:	5d0b      	ldrb	r3, [r1, r4]
 800fe5e:	061b      	lsls	r3, r3, #24
 800fe60:	190c      	adds	r4, r1, r4
 800fe62:	7866      	ldrb	r6, [r4, #1]
 800fe64:	0436      	lsls	r6, r6, #16
 800fe66:	4333      	orrs	r3, r6
 800fe68:	78a6      	ldrb	r6, [r4, #2]
 800fe6a:	0236      	lsls	r6, r6, #8
 800fe6c:	4333      	orrs	r3, r6
 800fe6e:	78e6      	ldrb	r6, [r4, #3]
 800fe70:	6804      	ldr	r4, [r0, #0]
 800fe72:	4333      	orrs	r3, r6
 800fe74:	6023      	str	r3, [r4, #0]
   for(i = 0; i < (BufferLength/4); i++)
 800fe76:	3501      	adds	r5, #1
 800fe78:	0893      	lsrs	r3, r2, #2
 800fe7a:	42ab      	cmp	r3, r5
 800fe7c:	d8ed      	bhi.n	800fe5a <CRC_Handle_8+0x6>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800fe7e:	2303      	movs	r3, #3
 800fe80:	401a      	ands	r2, r3
 800fe82:	d005      	beq.n	800fe90 <CRC_Handle_8+0x3c>
   {
     if  (BufferLength%4 == 1)
 800fe84:	2a01      	cmp	r2, #1
 800fe86:	d006      	beq.n	800fe96 <CRC_Handle_8+0x42>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 800fe88:	2a02      	cmp	r2, #2
 800fe8a:	d009      	beq.n	800fea0 <CRC_Handle_8+0x4c>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
     }
     if  (BufferLength%4 == 3)
 800fe8c:	2a03      	cmp	r2, #3
 800fe8e:	d010      	beq.n	800feb2 <CRC_Handle_8+0x5e>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800fe90:	6803      	ldr	r3, [r0, #0]
 800fe92:	6818      	ldr	r0, [r3, #0]
}
 800fe94:	bd70      	pop	{r4, r5, r6, pc}
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800fe96:	00ab      	lsls	r3, r5, #2
 800fe98:	5ccb      	ldrb	r3, [r1, r3]
 800fe9a:	6804      	ldr	r4, [r0, #0]
 800fe9c:	7023      	strb	r3, [r4, #0]
 800fe9e:	e7f3      	b.n	800fe88 <CRC_Handle_8+0x34>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800fea0:	00ab      	lsls	r3, r5, #2
 800fea2:	5ccc      	ldrb	r4, [r1, r3]
 800fea4:	0224      	lsls	r4, r4, #8
 800fea6:	18cb      	adds	r3, r1, r3
 800fea8:	785b      	ldrb	r3, [r3, #1]
 800feaa:	4323      	orrs	r3, r4
 800feac:	6804      	ldr	r4, [r0, #0]
 800feae:	8023      	strh	r3, [r4, #0]
 800feb0:	e7ec      	b.n	800fe8c <CRC_Handle_8+0x38>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800feb2:	00ad      	lsls	r5, r5, #2
 800feb4:	5d4a      	ldrb	r2, [r1, r5]
 800feb6:	0212      	lsls	r2, r2, #8
 800feb8:	194d      	adds	r5, r1, r5
 800feba:	786b      	ldrb	r3, [r5, #1]
 800febc:	4313      	orrs	r3, r2
 800febe:	6802      	ldr	r2, [r0, #0]
 800fec0:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800fec2:	78ab      	ldrb	r3, [r5, #2]
 800fec4:	6802      	ldr	r2, [r0, #0]
 800fec6:	7013      	strb	r3, [r2, #0]
 800fec8:	e7e2      	b.n	800fe90 <CRC_Handle_8+0x3c>

0800feca <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800feca:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800fecc:	2500      	movs	r5, #0
 800fece:	e008      	b.n	800fee2 <CRC_Handle_16+0x18>
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800fed0:	00ac      	lsls	r4, r5, #2
 800fed2:	5b0b      	ldrh	r3, [r1, r4]
 800fed4:	041b      	lsls	r3, r3, #16
 800fed6:	190c      	adds	r4, r1, r4
 800fed8:	8866      	ldrh	r6, [r4, #2]
 800feda:	6804      	ldr	r4, [r0, #0]
 800fedc:	4333      	orrs	r3, r6
 800fede:	6023      	str	r3, [r4, #0]
  for(i = 0; i < (BufferLength/2); i++)
 800fee0:	3501      	adds	r5, #1
 800fee2:	0853      	lsrs	r3, r2, #1
 800fee4:	42ab      	cmp	r3, r5
 800fee6:	d8f3      	bhi.n	800fed0 <CRC_Handle_16+0x6>
  }
  if ((BufferLength%2) != 0)
 800fee8:	07d3      	lsls	r3, r2, #31
 800feea:	d503      	bpl.n	800fef4 <CRC_Handle_16+0x2a>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800feec:	00ad      	lsls	r5, r5, #2
 800feee:	5a6b      	ldrh	r3, [r5, r1]
 800fef0:	6802      	ldr	r2, [r0, #0]
 800fef2:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800fef4:	6803      	ldr	r3, [r0, #0]
 800fef6:	6818      	ldr	r0, [r3, #0]
}
 800fef8:	bd70      	pop	{r4, r5, r6, pc}

0800fefa <HAL_CRC_Init>:
{
 800fefa:	b510      	push	{r4, lr}
 800fefc:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800fefe:	d029      	beq.n	800ff54 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800ff00:	7f43      	ldrb	r3, [r0, #29]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d01e      	beq.n	800ff44 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800ff06:	2302      	movs	r3, #2
 800ff08:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800ff0a:	0020      	movs	r0, r4
 800ff0c:	f000 f8a8 	bl	8010060 <HAL_CRCEx_Init>
 800ff10:	2800      	cmp	r0, #0
 800ff12:	d121      	bne.n	800ff58 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800ff14:	7963      	ldrb	r3, [r4, #5]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d118      	bne.n	800ff4c <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800ff1a:	6823      	ldr	r3, [r4, #0]
 800ff1c:	2201      	movs	r2, #1
 800ff1e:	4252      	negs	r2, r2
 800ff20:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800ff22:	6822      	ldr	r2, [r4, #0]
 800ff24:	6893      	ldr	r3, [r2, #8]
 800ff26:	2160      	movs	r1, #96	; 0x60
 800ff28:	438b      	bics	r3, r1
 800ff2a:	6961      	ldr	r1, [r4, #20]
 800ff2c:	430b      	orrs	r3, r1
 800ff2e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800ff30:	6822      	ldr	r2, [r4, #0]
 800ff32:	6893      	ldr	r3, [r2, #8]
 800ff34:	2180      	movs	r1, #128	; 0x80
 800ff36:	438b      	bics	r3, r1
 800ff38:	69a1      	ldr	r1, [r4, #24]
 800ff3a:	430b      	orrs	r3, r1
 800ff3c:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800ff3e:	2301      	movs	r3, #1
 800ff40:	7763      	strb	r3, [r4, #29]
}
 800ff42:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800ff44:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800ff46:	f7fb f891 	bl	800b06c <HAL_CRC_MspInit>
 800ff4a:	e7dc      	b.n	800ff06 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800ff4c:	6823      	ldr	r3, [r4, #0]
 800ff4e:	6922      	ldr	r2, [r4, #16]
 800ff50:	611a      	str	r2, [r3, #16]
 800ff52:	e7e6      	b.n	800ff22 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 800ff54:	2001      	movs	r0, #1
 800ff56:	e7f4      	b.n	800ff42 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800ff58:	2001      	movs	r0, #1
 800ff5a:	e7f2      	b.n	800ff42 <HAL_CRC_Init+0x48>

0800ff5c <HAL_CRC_Accumulate>:
{
 800ff5c:	b570      	push	{r4, r5, r6, lr}
 800ff5e:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800ff60:	7f03      	ldrb	r3, [r0, #28]
 800ff62:	2b01      	cmp	r3, #1
 800ff64:	d022      	beq.n	800ffac <HAL_CRC_Accumulate+0x50>
 800ff66:	2301      	movs	r3, #1
 800ff68:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ff6a:	3301      	adds	r3, #1
 800ff6c:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800ff6e:	6a03      	ldr	r3, [r0, #32]
 800ff70:	2b02      	cmp	r3, #2
 800ff72:	d018      	beq.n	800ffa6 <HAL_CRC_Accumulate+0x4a>
 800ff74:	2b03      	cmp	r3, #3
 800ff76:	d011      	beq.n	800ff9c <HAL_CRC_Accumulate+0x40>
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	d011      	beq.n	800ffa0 <HAL_CRC_Accumulate+0x44>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800ff7c:	2000      	movs	r0, #0
 800ff7e:	e008      	b.n	800ff92 <HAL_CRC_Accumulate+0x36>
        hcrc->Instance->DR = pBuffer[index];
 800ff80:	6820      	ldr	r0, [r4, #0]
 800ff82:	009d      	lsls	r5, r3, #2
 800ff84:	586d      	ldr	r5, [r5, r1]
 800ff86:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800ff88:	3301      	adds	r3, #1
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	d3f8      	bcc.n	800ff80 <HAL_CRC_Accumulate+0x24>
      temp = hcrc->Instance->DR;
 800ff8e:	6823      	ldr	r3, [r4, #0]
 800ff90:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY; 
 800ff92:	2301      	movs	r3, #1
 800ff94:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800ff96:	2300      	movs	r3, #0
 800ff98:	7723      	strb	r3, [r4, #28]
}
 800ff9a:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	e7f4      	b.n	800ff8a <HAL_CRC_Accumulate+0x2e>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800ffa0:	f7ff ff58 	bl	800fe54 <CRC_Handle_8>
      break;
 800ffa4:	e7f5      	b.n	800ff92 <HAL_CRC_Accumulate+0x36>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800ffa6:	f7ff ff90 	bl	800feca <CRC_Handle_16>
      break;
 800ffaa:	e7f2      	b.n	800ff92 <HAL_CRC_Accumulate+0x36>
  __HAL_LOCK(hcrc); 
 800ffac:	2002      	movs	r0, #2
 800ffae:	e7f4      	b.n	800ff9a <HAL_CRC_Accumulate+0x3e>

0800ffb0 <HAL_CRC_Calculate>:
{
 800ffb0:	b570      	push	{r4, r5, r6, lr}
 800ffb2:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800ffb4:	7f03      	ldrb	r3, [r0, #28]
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	d028      	beq.n	801000c <HAL_CRC_Calculate+0x5c>
 800ffba:	2501      	movs	r5, #1
 800ffbc:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ffbe:	2302      	movs	r3, #2
 800ffc0:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800ffc2:	6800      	ldr	r0, [r0, #0]
 800ffc4:	6883      	ldr	r3, [r0, #8]
 800ffc6:	432b      	orrs	r3, r5
 800ffc8:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 800ffca:	6a23      	ldr	r3, [r4, #32]
 800ffcc:	2b02      	cmp	r3, #2
 800ffce:	d019      	beq.n	8010004 <HAL_CRC_Calculate+0x54>
 800ffd0:	2b03      	cmp	r3, #3
 800ffd2:	d011      	beq.n	800fff8 <HAL_CRC_Calculate+0x48>
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	d011      	beq.n	800fffc <HAL_CRC_Calculate+0x4c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800ffd8:	2000      	movs	r0, #0
 800ffda:	e008      	b.n	800ffee <HAL_CRC_Calculate+0x3e>
        hcrc->Instance->DR = pBuffer[index];
 800ffdc:	6820      	ldr	r0, [r4, #0]
 800ffde:	009d      	lsls	r5, r3, #2
 800ffe0:	586d      	ldr	r5, [r5, r1]
 800ffe2:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d3f8      	bcc.n	800ffdc <HAL_CRC_Calculate+0x2c>
      temp = hcrc->Instance->DR;
 800ffea:	6823      	ldr	r3, [r4, #0]
 800ffec:	6818      	ldr	r0, [r3, #0]
  hcrc->State = HAL_CRC_STATE_READY; 
 800ffee:	2301      	movs	r3, #1
 800fff0:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800fff2:	2300      	movs	r3, #0
 800fff4:	7723      	strb	r3, [r4, #28]
}
 800fff6:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800fff8:	2300      	movs	r3, #0
 800fffa:	e7f4      	b.n	800ffe6 <HAL_CRC_Calculate+0x36>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800fffc:	0020      	movs	r0, r4
 800fffe:	f7ff ff29 	bl	800fe54 <CRC_Handle_8>
      break;
 8010002:	e7f4      	b.n	800ffee <HAL_CRC_Calculate+0x3e>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010004:	0020      	movs	r0, r4
 8010006:	f7ff ff60 	bl	800feca <CRC_Handle_16>
      break;
 801000a:	e7f0      	b.n	800ffee <HAL_CRC_Calculate+0x3e>
  __HAL_LOCK(hcrc); 
 801000c:	2002      	movs	r0, #2
 801000e:	e7f2      	b.n	800fff6 <HAL_CRC_Calculate+0x46>

08010010 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010010:	b510      	push	{r4, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8010012:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010014:	e000      	b.n	8010018 <HAL_CRCEx_Polynomial_Set+0x8>
 8010016:	001c      	movs	r4, r3
 8010018:	2301      	movs	r3, #1
 801001a:	40a3      	lsls	r3, r4
 801001c:	4219      	tst	r1, r3
 801001e:	d103      	bne.n	8010028 <HAL_CRCEx_Polynomial_Set+0x18>
 8010020:	1e63      	subs	r3, r4, #1
 8010022:	2c00      	cmp	r4, #0
 8010024:	d1f7      	bne.n	8010016 <HAL_CRCEx_Polynomial_Set+0x6>
 8010026:	001c      	movs	r4, r3
  {}

  switch (PolyLength)
 8010028:	2a10      	cmp	r2, #16
 801002a:	d011      	beq.n	8010050 <HAL_CRCEx_Polynomial_Set+0x40>
 801002c:	2a18      	cmp	r2, #24
 801002e:	d00b      	beq.n	8010048 <HAL_CRCEx_Polynomial_Set+0x38>
 8010030:	2a08      	cmp	r2, #8
 8010032:	d011      	beq.n	8010058 <HAL_CRCEx_Polynomial_Set+0x48>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010034:	6803      	ldr	r3, [r0, #0]
 8010036:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010038:	6801      	ldr	r1, [r0, #0]
 801003a:	688b      	ldr	r3, [r1, #8]
 801003c:	2018      	movs	r0, #24
 801003e:	4383      	bics	r3, r0
 8010040:	431a      	orrs	r2, r3
 8010042:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8010044:	2000      	movs	r0, #0
}
 8010046:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8010048:	2c06      	cmp	r4, #6
 801004a:	d9f3      	bls.n	8010034 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 801004c:	2001      	movs	r0, #1
 801004e:	e7fa      	b.n	8010046 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_8B)
 8010050:	2c07      	cmp	r4, #7
 8010052:	d9ef      	bls.n	8010034 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 8010054:	2001      	movs	r0, #1
 8010056:	e7f6      	b.n	8010046 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_16B)
 8010058:	2c0f      	cmp	r4, #15
 801005a:	d9eb      	bls.n	8010034 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 801005c:	2001      	movs	r0, #1
 801005e:	e7f2      	b.n	8010046 <HAL_CRCEx_Polynomial_Set+0x36>

08010060 <HAL_CRCEx_Init>:
{
 8010060:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010062:	7903      	ldrb	r3, [r0, #4]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d109      	bne.n	801007c <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010068:	6803      	ldr	r3, [r0, #0]
 801006a:	4a08      	ldr	r2, [pc, #32]	; (801008c <HAL_CRCEx_Init+0x2c>)
 801006c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 801006e:	6802      	ldr	r2, [r0, #0]
 8010070:	6893      	ldr	r3, [r2, #8]
 8010072:	2118      	movs	r1, #24
 8010074:	438b      	bics	r3, r1
 8010076:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 8010078:	2000      	movs	r0, #0
}
 801007a:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 801007c:	68c2      	ldr	r2, [r0, #12]
 801007e:	6881      	ldr	r1, [r0, #8]
 8010080:	f7ff ffc6 	bl	8010010 <HAL_CRCEx_Polynomial_Set>
 8010084:	2800      	cmp	r0, #0
 8010086:	d0f8      	beq.n	801007a <HAL_CRCEx_Init+0x1a>
      return HAL_ERROR;
 8010088:	2001      	movs	r0, #1
 801008a:	e7f6      	b.n	801007a <HAL_CRCEx_Init+0x1a>
 801008c:	04c11db7 	.word	0x04c11db7

08010090 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8010090:	b510      	push	{r4, lr}
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010092:	6804      	ldr	r4, [r0, #0]
 8010094:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010096:	6843      	ldr	r3, [r0, #4]
 8010098:	2b10      	cmp	r3, #16
 801009a:	d004      	beq.n	80100a6 <DMA_SetConfig+0x16>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 801009c:	6803      	ldr	r3, [r0, #0]
 801009e:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80100a0:	6803      	ldr	r3, [r0, #0]
 80100a2:	60da      	str	r2, [r3, #12]
  }
}
 80100a4:	bd10      	pop	{r4, pc}
    hdma->Instance->CPAR = DstAddress;
 80100a6:	6803      	ldr	r3, [r0, #0]
 80100a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80100aa:	6803      	ldr	r3, [r0, #0]
 80100ac:	60d9      	str	r1, [r3, #12]
 80100ae:	e7f9      	b.n	80100a4 <DMA_SetConfig+0x14>

080100b0 <HAL_DMA_Init>:
{ 
 80100b0:	b530      	push	{r4, r5, lr}
  if(hdma == NULL)
 80100b2:	2800      	cmp	r0, #0
 80100b4:	d022      	beq.n	80100fc <HAL_DMA_Init+0x4c>
  if(hdma->State == HAL_DMA_STATE_RESET)
 80100b6:	2321      	movs	r3, #33	; 0x21
 80100b8:	5cc3      	ldrb	r3, [r0, r3]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d102      	bne.n	80100c4 <HAL_DMA_Init+0x14>
    hdma->Lock = HAL_UNLOCKED;
 80100be:	3320      	adds	r3, #32
 80100c0:	2200      	movs	r2, #0
 80100c2:	54c2      	strb	r2, [r0, r3]
  hdma->State = HAL_DMA_STATE_BUSY;
 80100c4:	2121      	movs	r1, #33	; 0x21
 80100c6:	2302      	movs	r3, #2
 80100c8:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 80100ca:	6804      	ldr	r4, [r0, #0]
 80100cc:	6823      	ldr	r3, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80100ce:	4a0c      	ldr	r2, [pc, #48]	; (8010100 <HAL_DMA_Init+0x50>)
 80100d0:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80100d2:	6843      	ldr	r3, [r0, #4]
 80100d4:	6885      	ldr	r5, [r0, #8]
 80100d6:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80100d8:	68c5      	ldr	r5, [r0, #12]
 80100da:	432b      	orrs	r3, r5
 80100dc:	6905      	ldr	r5, [r0, #16]
 80100de:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80100e0:	6945      	ldr	r5, [r0, #20]
 80100e2:	432b      	orrs	r3, r5
 80100e4:	6985      	ldr	r5, [r0, #24]
 80100e6:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80100e8:	69c5      	ldr	r5, [r0, #28]
 80100ea:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80100ec:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 80100ee:	6023      	str	r3, [r4, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80100f0:	2300      	movs	r3, #0
 80100f2:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->State  = HAL_DMA_STATE_READY;
 80100f4:	3301      	adds	r3, #1
 80100f6:	5443      	strb	r3, [r0, r1]
  return HAL_OK;
 80100f8:	2000      	movs	r0, #0
}  
 80100fa:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80100fc:	2001      	movs	r0, #1
 80100fe:	e7fc      	b.n	80100fa <HAL_DMA_Init+0x4a>
 8010100:	ffffc00f 	.word	0xffffc00f

08010104 <HAL_DMA_Start_IT>:
{
 8010104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010106:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8010108:	2020      	movs	r0, #32
 801010a:	5c20      	ldrb	r0, [r4, r0]
 801010c:	2801      	cmp	r0, #1
 801010e:	d020      	beq.n	8010152 <HAL_DMA_Start_IT+0x4e>
 8010110:	2501      	movs	r5, #1
 8010112:	2020      	movs	r0, #32
 8010114:	5425      	strb	r5, [r4, r0]
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010116:	2602      	movs	r6, #2
 8010118:	3001      	adds	r0, #1
 801011a:	5426      	strb	r6, [r4, r0]
  __HAL_DMA_DISABLE(hdma);
 801011c:	6827      	ldr	r7, [r4, #0]
 801011e:	6838      	ldr	r0, [r7, #0]
 8010120:	43a8      	bics	r0, r5
 8010122:	6038      	str	r0, [r7, #0]
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010124:	0020      	movs	r0, r4
 8010126:	f7ff ffb3 	bl	8010090 <DMA_SetConfig>
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 801012a:	6822      	ldr	r2, [r4, #0]
 801012c:	6813      	ldr	r3, [r2, #0]
 801012e:	4333      	orrs	r3, r6
 8010130:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8010132:	6822      	ldr	r2, [r4, #0]
 8010134:	6813      	ldr	r3, [r2, #0]
 8010136:	2104      	movs	r1, #4
 8010138:	430b      	orrs	r3, r1
 801013a:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 801013c:	6822      	ldr	r2, [r4, #0]
 801013e:	6813      	ldr	r3, [r2, #0]
 8010140:	3104      	adds	r1, #4
 8010142:	430b      	orrs	r3, r1
 8010144:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 8010146:	6822      	ldr	r2, [r4, #0]
 8010148:	6813      	ldr	r3, [r2, #0]
 801014a:	432b      	orrs	r3, r5
 801014c:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 801014e:	2000      	movs	r0, #0
} 
 8010150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8010152:	2002      	movs	r0, #2
 8010154:	e7fc      	b.n	8010150 <HAL_DMA_Start_IT+0x4c>

08010156 <HAL_DMA_Abort>:
{
 8010156:	b570      	push	{r4, r5, r6, lr}
 8010158:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 801015a:	6802      	ldr	r2, [r0, #0]
 801015c:	6813      	ldr	r3, [r2, #0]
 801015e:	2101      	movs	r1, #1
 8010160:	438b      	bics	r3, r1
 8010162:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8010164:	f7ff fb12 	bl	800f78c <HAL_GetTick>
 8010168:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801016a:	6823      	ldr	r3, [r4, #0]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	07db      	lsls	r3, r3, #31
 8010170:	d511      	bpl.n	8010196 <HAL_DMA_Abort+0x40>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010172:	f7ff fb0b 	bl	800f78c <HAL_GetTick>
 8010176:	1b40      	subs	r0, r0, r5
 8010178:	23fa      	movs	r3, #250	; 0xfa
 801017a:	009b      	lsls	r3, r3, #2
 801017c:	4298      	cmp	r0, r3
 801017e:	d9f4      	bls.n	801016a <HAL_DMA_Abort+0x14>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010180:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010182:	2220      	movs	r2, #32
 8010184:	4313      	orrs	r3, r2
 8010186:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010188:	2321      	movs	r3, #33	; 0x21
 801018a:	2103      	movs	r1, #3
 801018c:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 801018e:	2300      	movs	r3, #0
 8010190:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010192:	2003      	movs	r0, #3
 8010194:	e006      	b.n	80101a4 <HAL_DMA_Abort+0x4e>
  hdma->State = HAL_DMA_STATE_READY; 
 8010196:	2321      	movs	r3, #33	; 0x21
 8010198:	2201      	movs	r2, #1
 801019a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 801019c:	3b01      	subs	r3, #1
 801019e:	2200      	movs	r2, #0
 80101a0:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 80101a2:	2000      	movs	r0, #0
}
 80101a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080101a8 <HAL_DMA_IRQHandler>:
{        
 80101a8:	b510      	push	{r4, lr}
 80101aa:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80101ac:	6802      	ldr	r2, [r0, #0]
 80101ae:	4bb6      	ldr	r3, [pc, #728]	; (8010488 <HAL_DMA_IRQHandler+0x2e0>)
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d800      	bhi.n	80101b6 <HAL_DMA_IRQHandler+0xe>
 80101b4:	e083      	b.n	80102be <HAL_DMA_IRQHandler+0x116>
 80101b6:	4bb5      	ldr	r3, [pc, #724]	; (801048c <HAL_DMA_IRQHandler+0x2e4>)
 80101b8:	6819      	ldr	r1, [r3, #0]
 80101ba:	4bb5      	ldr	r3, [pc, #724]	; (8010490 <HAL_DMA_IRQHandler+0x2e8>)
 80101bc:	429a      	cmp	r2, r3
 80101be:	d023      	beq.n	8010208 <HAL_DMA_IRQHandler+0x60>
 80101c0:	4bb4      	ldr	r3, [pc, #720]	; (8010494 <HAL_DMA_IRQHandler+0x2ec>)
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d063      	beq.n	801028e <HAL_DMA_IRQHandler+0xe6>
 80101c6:	4bb4      	ldr	r3, [pc, #720]	; (8010498 <HAL_DMA_IRQHandler+0x2f0>)
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d062      	beq.n	8010292 <HAL_DMA_IRQHandler+0xea>
 80101cc:	4bb3      	ldr	r3, [pc, #716]	; (801049c <HAL_DMA_IRQHandler+0x2f4>)
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d062      	beq.n	8010298 <HAL_DMA_IRQHandler+0xf0>
 80101d2:	4bb3      	ldr	r3, [pc, #716]	; (80104a0 <HAL_DMA_IRQHandler+0x2f8>)
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d062      	beq.n	801029e <HAL_DMA_IRQHandler+0xf6>
 80101d8:	4bb2      	ldr	r3, [pc, #712]	; (80104a4 <HAL_DMA_IRQHandler+0x2fc>)
 80101da:	429a      	cmp	r2, r3
 80101dc:	d062      	beq.n	80102a4 <HAL_DMA_IRQHandler+0xfc>
 80101de:	4baa      	ldr	r3, [pc, #680]	; (8010488 <HAL_DMA_IRQHandler+0x2e0>)
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d062      	beq.n	80102aa <HAL_DMA_IRQHandler+0x102>
 80101e4:	4bb0      	ldr	r3, [pc, #704]	; (80104a8 <HAL_DMA_IRQHandler+0x300>)
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d062      	beq.n	80102b0 <HAL_DMA_IRQHandler+0x108>
 80101ea:	4bb0      	ldr	r3, [pc, #704]	; (80104ac <HAL_DMA_IRQHandler+0x304>)
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d061      	beq.n	80102b4 <HAL_DMA_IRQHandler+0x10c>
 80101f0:	4baf      	ldr	r3, [pc, #700]	; (80104b0 <HAL_DMA_IRQHandler+0x308>)
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d060      	beq.n	80102b8 <HAL_DMA_IRQHandler+0x110>
 80101f6:	4baf      	ldr	r3, [pc, #700]	; (80104b4 <HAL_DMA_IRQHandler+0x30c>)
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d002      	beq.n	8010202 <HAL_DMA_IRQHandler+0x5a>
 80101fc:	2380      	movs	r3, #128	; 0x80
 80101fe:	031b      	lsls	r3, r3, #12
 8010200:	e003      	b.n	801020a <HAL_DMA_IRQHandler+0x62>
 8010202:	2380      	movs	r3, #128	; 0x80
 8010204:	021b      	lsls	r3, r3, #8
 8010206:	e000      	b.n	801020a <HAL_DMA_IRQHandler+0x62>
 8010208:	2308      	movs	r3, #8
 801020a:	400b      	ands	r3, r1
 801020c:	1e59      	subs	r1, r3, #1
 801020e:	418b      	sbcs	r3, r1
 8010210:	b2db      	uxtb	r3, r3
 8010212:	2b00      	cmp	r3, #0
 8010214:	d100      	bne.n	8010218 <HAL_DMA_IRQHandler+0x70>
 8010216:	e0ae      	b.n	8010376 <HAL_DMA_IRQHandler+0x1ce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010218:	6813      	ldr	r3, [r2, #0]
 801021a:	071b      	lsls	r3, r3, #28
 801021c:	d400      	bmi.n	8010220 <HAL_DMA_IRQHandler+0x78>
 801021e:	e0aa      	b.n	8010376 <HAL_DMA_IRQHandler+0x1ce>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010220:	6813      	ldr	r3, [r2, #0]
 8010222:	2108      	movs	r1, #8
 8010224:	438b      	bics	r3, r1
 8010226:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010228:	6823      	ldr	r3, [r4, #0]
 801022a:	4a97      	ldr	r2, [pc, #604]	; (8010488 <HAL_DMA_IRQHandler+0x2e0>)
 801022c:	4293      	cmp	r3, r2
 801022e:	d800      	bhi.n	8010232 <HAL_DMA_IRQHandler+0x8a>
 8010230:	e0ee      	b.n	8010410 <HAL_DMA_IRQHandler+0x268>
 8010232:	4a97      	ldr	r2, [pc, #604]	; (8010490 <HAL_DMA_IRQHandler+0x2e8>)
 8010234:	4293      	cmp	r3, r2
 8010236:	d100      	bne.n	801023a <HAL_DMA_IRQHandler+0x92>
 8010238:	e08b      	b.n	8010352 <HAL_DMA_IRQHandler+0x1aa>
 801023a:	4a96      	ldr	r2, [pc, #600]	; (8010494 <HAL_DMA_IRQHandler+0x2ec>)
 801023c:	4293      	cmp	r3, r2
 801023e:	d100      	bne.n	8010242 <HAL_DMA_IRQHandler+0x9a>
 8010240:	e0ce      	b.n	80103e0 <HAL_DMA_IRQHandler+0x238>
 8010242:	4a95      	ldr	r2, [pc, #596]	; (8010498 <HAL_DMA_IRQHandler+0x2f0>)
 8010244:	4293      	cmp	r3, r2
 8010246:	d100      	bne.n	801024a <HAL_DMA_IRQHandler+0xa2>
 8010248:	e0cc      	b.n	80103e4 <HAL_DMA_IRQHandler+0x23c>
 801024a:	4a94      	ldr	r2, [pc, #592]	; (801049c <HAL_DMA_IRQHandler+0x2f4>)
 801024c:	4293      	cmp	r3, r2
 801024e:	d100      	bne.n	8010252 <HAL_DMA_IRQHandler+0xaa>
 8010250:	e0cb      	b.n	80103ea <HAL_DMA_IRQHandler+0x242>
 8010252:	4a93      	ldr	r2, [pc, #588]	; (80104a0 <HAL_DMA_IRQHandler+0x2f8>)
 8010254:	4293      	cmp	r3, r2
 8010256:	d100      	bne.n	801025a <HAL_DMA_IRQHandler+0xb2>
 8010258:	e0ca      	b.n	80103f0 <HAL_DMA_IRQHandler+0x248>
 801025a:	4a92      	ldr	r2, [pc, #584]	; (80104a4 <HAL_DMA_IRQHandler+0x2fc>)
 801025c:	4293      	cmp	r3, r2
 801025e:	d100      	bne.n	8010262 <HAL_DMA_IRQHandler+0xba>
 8010260:	e0c9      	b.n	80103f6 <HAL_DMA_IRQHandler+0x24e>
 8010262:	4a89      	ldr	r2, [pc, #548]	; (8010488 <HAL_DMA_IRQHandler+0x2e0>)
 8010264:	4293      	cmp	r3, r2
 8010266:	d100      	bne.n	801026a <HAL_DMA_IRQHandler+0xc2>
 8010268:	e0c8      	b.n	80103fc <HAL_DMA_IRQHandler+0x254>
 801026a:	4a8f      	ldr	r2, [pc, #572]	; (80104a8 <HAL_DMA_IRQHandler+0x300>)
 801026c:	4293      	cmp	r3, r2
 801026e:	d100      	bne.n	8010272 <HAL_DMA_IRQHandler+0xca>
 8010270:	e0c7      	b.n	8010402 <HAL_DMA_IRQHandler+0x25a>
 8010272:	4a8e      	ldr	r2, [pc, #568]	; (80104ac <HAL_DMA_IRQHandler+0x304>)
 8010274:	4293      	cmp	r3, r2
 8010276:	d100      	bne.n	801027a <HAL_DMA_IRQHandler+0xd2>
 8010278:	e0c5      	b.n	8010406 <HAL_DMA_IRQHandler+0x25e>
 801027a:	4a8d      	ldr	r2, [pc, #564]	; (80104b0 <HAL_DMA_IRQHandler+0x308>)
 801027c:	4293      	cmp	r3, r2
 801027e:	d100      	bne.n	8010282 <HAL_DMA_IRQHandler+0xda>
 8010280:	e0c3      	b.n	801040a <HAL_DMA_IRQHandler+0x262>
 8010282:	4a8c      	ldr	r2, [pc, #560]	; (80104b4 <HAL_DMA_IRQHandler+0x30c>)
 8010284:	4293      	cmp	r3, r2
 8010286:	d061      	beq.n	801034c <HAL_DMA_IRQHandler+0x1a4>
 8010288:	2280      	movs	r2, #128	; 0x80
 801028a:	0312      	lsls	r2, r2, #12
 801028c:	e062      	b.n	8010354 <HAL_DMA_IRQHandler+0x1ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801028e:	2380      	movs	r3, #128	; 0x80
 8010290:	e7bb      	b.n	801020a <HAL_DMA_IRQHandler+0x62>
 8010292:	2380      	movs	r3, #128	; 0x80
 8010294:	011b      	lsls	r3, r3, #4
 8010296:	e7b8      	b.n	801020a <HAL_DMA_IRQHandler+0x62>
 8010298:	2380      	movs	r3, #128	; 0x80
 801029a:	021b      	lsls	r3, r3, #8
 801029c:	e7b5      	b.n	801020a <HAL_DMA_IRQHandler+0x62>
 801029e:	2380      	movs	r3, #128	; 0x80
 80102a0:	031b      	lsls	r3, r3, #12
 80102a2:	e7b2      	b.n	801020a <HAL_DMA_IRQHandler+0x62>
 80102a4:	2380      	movs	r3, #128	; 0x80
 80102a6:	041b      	lsls	r3, r3, #16
 80102a8:	e7af      	b.n	801020a <HAL_DMA_IRQHandler+0x62>
 80102aa:	2380      	movs	r3, #128	; 0x80
 80102ac:	051b      	lsls	r3, r3, #20
 80102ae:	e7ac      	b.n	801020a <HAL_DMA_IRQHandler+0x62>
 80102b0:	2308      	movs	r3, #8
 80102b2:	e7aa      	b.n	801020a <HAL_DMA_IRQHandler+0x62>
 80102b4:	2380      	movs	r3, #128	; 0x80
 80102b6:	e7a8      	b.n	801020a <HAL_DMA_IRQHandler+0x62>
 80102b8:	2380      	movs	r3, #128	; 0x80
 80102ba:	011b      	lsls	r3, r3, #4
 80102bc:	e7a5      	b.n	801020a <HAL_DMA_IRQHandler+0x62>
 80102be:	4b7e      	ldr	r3, [pc, #504]	; (80104b8 <HAL_DMA_IRQHandler+0x310>)
 80102c0:	6819      	ldr	r1, [r3, #0]
 80102c2:	4b73      	ldr	r3, [pc, #460]	; (8010490 <HAL_DMA_IRQHandler+0x2e8>)
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d023      	beq.n	8010310 <HAL_DMA_IRQHandler+0x168>
 80102c8:	4b72      	ldr	r3, [pc, #456]	; (8010494 <HAL_DMA_IRQHandler+0x2ec>)
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d026      	beq.n	801031c <HAL_DMA_IRQHandler+0x174>
 80102ce:	4b72      	ldr	r3, [pc, #456]	; (8010498 <HAL_DMA_IRQHandler+0x2f0>)
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d025      	beq.n	8010320 <HAL_DMA_IRQHandler+0x178>
 80102d4:	4b71      	ldr	r3, [pc, #452]	; (801049c <HAL_DMA_IRQHandler+0x2f4>)
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d025      	beq.n	8010326 <HAL_DMA_IRQHandler+0x17e>
 80102da:	4b71      	ldr	r3, [pc, #452]	; (80104a0 <HAL_DMA_IRQHandler+0x2f8>)
 80102dc:	429a      	cmp	r2, r3
 80102de:	d025      	beq.n	801032c <HAL_DMA_IRQHandler+0x184>
 80102e0:	4b70      	ldr	r3, [pc, #448]	; (80104a4 <HAL_DMA_IRQHandler+0x2fc>)
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d025      	beq.n	8010332 <HAL_DMA_IRQHandler+0x18a>
 80102e6:	4b68      	ldr	r3, [pc, #416]	; (8010488 <HAL_DMA_IRQHandler+0x2e0>)
 80102e8:	429a      	cmp	r2, r3
 80102ea:	d025      	beq.n	8010338 <HAL_DMA_IRQHandler+0x190>
 80102ec:	4b6e      	ldr	r3, [pc, #440]	; (80104a8 <HAL_DMA_IRQHandler+0x300>)
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d025      	beq.n	801033e <HAL_DMA_IRQHandler+0x196>
 80102f2:	4b6e      	ldr	r3, [pc, #440]	; (80104ac <HAL_DMA_IRQHandler+0x304>)
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d024      	beq.n	8010342 <HAL_DMA_IRQHandler+0x19a>
 80102f8:	4b6d      	ldr	r3, [pc, #436]	; (80104b0 <HAL_DMA_IRQHandler+0x308>)
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d023      	beq.n	8010346 <HAL_DMA_IRQHandler+0x19e>
 80102fe:	4b6d      	ldr	r3, [pc, #436]	; (80104b4 <HAL_DMA_IRQHandler+0x30c>)
 8010300:	429a      	cmp	r2, r3
 8010302:	d002      	beq.n	801030a <HAL_DMA_IRQHandler+0x162>
 8010304:	2380      	movs	r3, #128	; 0x80
 8010306:	031b      	lsls	r3, r3, #12
 8010308:	e003      	b.n	8010312 <HAL_DMA_IRQHandler+0x16a>
 801030a:	2380      	movs	r3, #128	; 0x80
 801030c:	021b      	lsls	r3, r3, #8
 801030e:	e000      	b.n	8010312 <HAL_DMA_IRQHandler+0x16a>
 8010310:	2308      	movs	r3, #8
 8010312:	400b      	ands	r3, r1
 8010314:	1e59      	subs	r1, r3, #1
 8010316:	418b      	sbcs	r3, r1
 8010318:	b2db      	uxtb	r3, r3
 801031a:	e77a      	b.n	8010212 <HAL_DMA_IRQHandler+0x6a>
 801031c:	2380      	movs	r3, #128	; 0x80
 801031e:	e7f8      	b.n	8010312 <HAL_DMA_IRQHandler+0x16a>
 8010320:	2380      	movs	r3, #128	; 0x80
 8010322:	011b      	lsls	r3, r3, #4
 8010324:	e7f5      	b.n	8010312 <HAL_DMA_IRQHandler+0x16a>
 8010326:	2380      	movs	r3, #128	; 0x80
 8010328:	021b      	lsls	r3, r3, #8
 801032a:	e7f2      	b.n	8010312 <HAL_DMA_IRQHandler+0x16a>
 801032c:	2380      	movs	r3, #128	; 0x80
 801032e:	031b      	lsls	r3, r3, #12
 8010330:	e7ef      	b.n	8010312 <HAL_DMA_IRQHandler+0x16a>
 8010332:	2380      	movs	r3, #128	; 0x80
 8010334:	041b      	lsls	r3, r3, #16
 8010336:	e7ec      	b.n	8010312 <HAL_DMA_IRQHandler+0x16a>
 8010338:	2380      	movs	r3, #128	; 0x80
 801033a:	051b      	lsls	r3, r3, #20
 801033c:	e7e9      	b.n	8010312 <HAL_DMA_IRQHandler+0x16a>
 801033e:	2308      	movs	r3, #8
 8010340:	e7e7      	b.n	8010312 <HAL_DMA_IRQHandler+0x16a>
 8010342:	2380      	movs	r3, #128	; 0x80
 8010344:	e7e5      	b.n	8010312 <HAL_DMA_IRQHandler+0x16a>
 8010346:	2380      	movs	r3, #128	; 0x80
 8010348:	011b      	lsls	r3, r3, #4
 801034a:	e7e2      	b.n	8010312 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801034c:	2280      	movs	r2, #128	; 0x80
 801034e:	0212      	lsls	r2, r2, #8
 8010350:	e000      	b.n	8010354 <HAL_DMA_IRQHandler+0x1ac>
 8010352:	2208      	movs	r2, #8
 8010354:	4b4d      	ldr	r3, [pc, #308]	; (801048c <HAL_DMA_IRQHandler+0x2e4>)
 8010356:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010358:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801035a:	2201      	movs	r2, #1
 801035c:	4313      	orrs	r3, r2
 801035e:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010360:	2321      	movs	r3, #33	; 0x21
 8010362:	3203      	adds	r2, #3
 8010364:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8010366:	3b01      	subs	r3, #1
 8010368:	2200      	movs	r2, #0
 801036a:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801036c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801036e:	2b00      	cmp	r3, #0
 8010370:	d001      	beq.n	8010376 <HAL_DMA_IRQHandler+0x1ce>
        hdma->XferErrorCallback(hdma);
 8010372:	0020      	movs	r0, r4
 8010374:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010376:	6822      	ldr	r2, [r4, #0]
 8010378:	4b43      	ldr	r3, [pc, #268]	; (8010488 <HAL_DMA_IRQHandler+0x2e0>)
 801037a:	429a      	cmp	r2, r3
 801037c:	d800      	bhi.n	8010380 <HAL_DMA_IRQHandler+0x1d8>
 801037e:	e105      	b.n	801058c <HAL_DMA_IRQHandler+0x3e4>
 8010380:	4b42      	ldr	r3, [pc, #264]	; (801048c <HAL_DMA_IRQHandler+0x2e4>)
 8010382:	6819      	ldr	r1, [r3, #0]
 8010384:	4b42      	ldr	r3, [pc, #264]	; (8010490 <HAL_DMA_IRQHandler+0x2e8>)
 8010386:	429a      	cmp	r2, r3
 8010388:	d100      	bne.n	801038c <HAL_DMA_IRQHandler+0x1e4>
 801038a:	e0a1      	b.n	80104d0 <HAL_DMA_IRQHandler+0x328>
 801038c:	4b41      	ldr	r3, [pc, #260]	; (8010494 <HAL_DMA_IRQHandler+0x2ec>)
 801038e:	429a      	cmp	r2, r3
 8010390:	d100      	bne.n	8010394 <HAL_DMA_IRQHandler+0x1ec>
 8010392:	e0e3      	b.n	801055c <HAL_DMA_IRQHandler+0x3b4>
 8010394:	4b40      	ldr	r3, [pc, #256]	; (8010498 <HAL_DMA_IRQHandler+0x2f0>)
 8010396:	429a      	cmp	r2, r3
 8010398:	d100      	bne.n	801039c <HAL_DMA_IRQHandler+0x1f4>
 801039a:	e0e1      	b.n	8010560 <HAL_DMA_IRQHandler+0x3b8>
 801039c:	4b3f      	ldr	r3, [pc, #252]	; (801049c <HAL_DMA_IRQHandler+0x2f4>)
 801039e:	429a      	cmp	r2, r3
 80103a0:	d100      	bne.n	80103a4 <HAL_DMA_IRQHandler+0x1fc>
 80103a2:	e0e0      	b.n	8010566 <HAL_DMA_IRQHandler+0x3be>
 80103a4:	4b3e      	ldr	r3, [pc, #248]	; (80104a0 <HAL_DMA_IRQHandler+0x2f8>)
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d100      	bne.n	80103ac <HAL_DMA_IRQHandler+0x204>
 80103aa:	e0df      	b.n	801056c <HAL_DMA_IRQHandler+0x3c4>
 80103ac:	4b3d      	ldr	r3, [pc, #244]	; (80104a4 <HAL_DMA_IRQHandler+0x2fc>)
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d100      	bne.n	80103b4 <HAL_DMA_IRQHandler+0x20c>
 80103b2:	e0de      	b.n	8010572 <HAL_DMA_IRQHandler+0x3ca>
 80103b4:	4b34      	ldr	r3, [pc, #208]	; (8010488 <HAL_DMA_IRQHandler+0x2e0>)
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d100      	bne.n	80103bc <HAL_DMA_IRQHandler+0x214>
 80103ba:	e0dd      	b.n	8010578 <HAL_DMA_IRQHandler+0x3d0>
 80103bc:	4b3a      	ldr	r3, [pc, #232]	; (80104a8 <HAL_DMA_IRQHandler+0x300>)
 80103be:	429a      	cmp	r2, r3
 80103c0:	d100      	bne.n	80103c4 <HAL_DMA_IRQHandler+0x21c>
 80103c2:	e0dc      	b.n	801057e <HAL_DMA_IRQHandler+0x3d6>
 80103c4:	4b39      	ldr	r3, [pc, #228]	; (80104ac <HAL_DMA_IRQHandler+0x304>)
 80103c6:	429a      	cmp	r2, r3
 80103c8:	d100      	bne.n	80103cc <HAL_DMA_IRQHandler+0x224>
 80103ca:	e0da      	b.n	8010582 <HAL_DMA_IRQHandler+0x3da>
 80103cc:	4b38      	ldr	r3, [pc, #224]	; (80104b0 <HAL_DMA_IRQHandler+0x308>)
 80103ce:	429a      	cmp	r2, r3
 80103d0:	d100      	bne.n	80103d4 <HAL_DMA_IRQHandler+0x22c>
 80103d2:	e0d8      	b.n	8010586 <HAL_DMA_IRQHandler+0x3de>
 80103d4:	4b37      	ldr	r3, [pc, #220]	; (80104b4 <HAL_DMA_IRQHandler+0x30c>)
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d077      	beq.n	80104ca <HAL_DMA_IRQHandler+0x322>
 80103da:	2380      	movs	r3, #128	; 0x80
 80103dc:	02db      	lsls	r3, r3, #11
 80103de:	e078      	b.n	80104d2 <HAL_DMA_IRQHandler+0x32a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80103e0:	2280      	movs	r2, #128	; 0x80
 80103e2:	e7b7      	b.n	8010354 <HAL_DMA_IRQHandler+0x1ac>
 80103e4:	2280      	movs	r2, #128	; 0x80
 80103e6:	0112      	lsls	r2, r2, #4
 80103e8:	e7b4      	b.n	8010354 <HAL_DMA_IRQHandler+0x1ac>
 80103ea:	2280      	movs	r2, #128	; 0x80
 80103ec:	0212      	lsls	r2, r2, #8
 80103ee:	e7b1      	b.n	8010354 <HAL_DMA_IRQHandler+0x1ac>
 80103f0:	2280      	movs	r2, #128	; 0x80
 80103f2:	0312      	lsls	r2, r2, #12
 80103f4:	e7ae      	b.n	8010354 <HAL_DMA_IRQHandler+0x1ac>
 80103f6:	2280      	movs	r2, #128	; 0x80
 80103f8:	0412      	lsls	r2, r2, #16
 80103fa:	e7ab      	b.n	8010354 <HAL_DMA_IRQHandler+0x1ac>
 80103fc:	2280      	movs	r2, #128	; 0x80
 80103fe:	0512      	lsls	r2, r2, #20
 8010400:	e7a8      	b.n	8010354 <HAL_DMA_IRQHandler+0x1ac>
 8010402:	2208      	movs	r2, #8
 8010404:	e7a6      	b.n	8010354 <HAL_DMA_IRQHandler+0x1ac>
 8010406:	2280      	movs	r2, #128	; 0x80
 8010408:	e7a4      	b.n	8010354 <HAL_DMA_IRQHandler+0x1ac>
 801040a:	2280      	movs	r2, #128	; 0x80
 801040c:	0112      	lsls	r2, r2, #4
 801040e:	e7a1      	b.n	8010354 <HAL_DMA_IRQHandler+0x1ac>
 8010410:	4a1f      	ldr	r2, [pc, #124]	; (8010490 <HAL_DMA_IRQHandler+0x2e8>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d023      	beq.n	801045e <HAL_DMA_IRQHandler+0x2b6>
 8010416:	4a1f      	ldr	r2, [pc, #124]	; (8010494 <HAL_DMA_IRQHandler+0x2ec>)
 8010418:	4293      	cmp	r3, r2
 801041a:	d024      	beq.n	8010466 <HAL_DMA_IRQHandler+0x2be>
 801041c:	4a1e      	ldr	r2, [pc, #120]	; (8010498 <HAL_DMA_IRQHandler+0x2f0>)
 801041e:	4293      	cmp	r3, r2
 8010420:	d023      	beq.n	801046a <HAL_DMA_IRQHandler+0x2c2>
 8010422:	4a1e      	ldr	r2, [pc, #120]	; (801049c <HAL_DMA_IRQHandler+0x2f4>)
 8010424:	4293      	cmp	r3, r2
 8010426:	d023      	beq.n	8010470 <HAL_DMA_IRQHandler+0x2c8>
 8010428:	4a1d      	ldr	r2, [pc, #116]	; (80104a0 <HAL_DMA_IRQHandler+0x2f8>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d023      	beq.n	8010476 <HAL_DMA_IRQHandler+0x2ce>
 801042e:	4a1d      	ldr	r2, [pc, #116]	; (80104a4 <HAL_DMA_IRQHandler+0x2fc>)
 8010430:	4293      	cmp	r3, r2
 8010432:	d023      	beq.n	801047c <HAL_DMA_IRQHandler+0x2d4>
 8010434:	4a14      	ldr	r2, [pc, #80]	; (8010488 <HAL_DMA_IRQHandler+0x2e0>)
 8010436:	4293      	cmp	r3, r2
 8010438:	d023      	beq.n	8010482 <HAL_DMA_IRQHandler+0x2da>
 801043a:	4a1b      	ldr	r2, [pc, #108]	; (80104a8 <HAL_DMA_IRQHandler+0x300>)
 801043c:	4293      	cmp	r3, r2
 801043e:	d03d      	beq.n	80104bc <HAL_DMA_IRQHandler+0x314>
 8010440:	4a1a      	ldr	r2, [pc, #104]	; (80104ac <HAL_DMA_IRQHandler+0x304>)
 8010442:	4293      	cmp	r3, r2
 8010444:	d03c      	beq.n	80104c0 <HAL_DMA_IRQHandler+0x318>
 8010446:	4a1a      	ldr	r2, [pc, #104]	; (80104b0 <HAL_DMA_IRQHandler+0x308>)
 8010448:	4293      	cmp	r3, r2
 801044a:	d03b      	beq.n	80104c4 <HAL_DMA_IRQHandler+0x31c>
 801044c:	4a19      	ldr	r2, [pc, #100]	; (80104b4 <HAL_DMA_IRQHandler+0x30c>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d002      	beq.n	8010458 <HAL_DMA_IRQHandler+0x2b0>
 8010452:	2280      	movs	r2, #128	; 0x80
 8010454:	0312      	lsls	r2, r2, #12
 8010456:	e003      	b.n	8010460 <HAL_DMA_IRQHandler+0x2b8>
 8010458:	2280      	movs	r2, #128	; 0x80
 801045a:	0212      	lsls	r2, r2, #8
 801045c:	e000      	b.n	8010460 <HAL_DMA_IRQHandler+0x2b8>
 801045e:	2208      	movs	r2, #8
 8010460:	4b15      	ldr	r3, [pc, #84]	; (80104b8 <HAL_DMA_IRQHandler+0x310>)
 8010462:	605a      	str	r2, [r3, #4]
 8010464:	e778      	b.n	8010358 <HAL_DMA_IRQHandler+0x1b0>
 8010466:	2280      	movs	r2, #128	; 0x80
 8010468:	e7fa      	b.n	8010460 <HAL_DMA_IRQHandler+0x2b8>
 801046a:	2280      	movs	r2, #128	; 0x80
 801046c:	0112      	lsls	r2, r2, #4
 801046e:	e7f7      	b.n	8010460 <HAL_DMA_IRQHandler+0x2b8>
 8010470:	2280      	movs	r2, #128	; 0x80
 8010472:	0212      	lsls	r2, r2, #8
 8010474:	e7f4      	b.n	8010460 <HAL_DMA_IRQHandler+0x2b8>
 8010476:	2280      	movs	r2, #128	; 0x80
 8010478:	0312      	lsls	r2, r2, #12
 801047a:	e7f1      	b.n	8010460 <HAL_DMA_IRQHandler+0x2b8>
 801047c:	2280      	movs	r2, #128	; 0x80
 801047e:	0412      	lsls	r2, r2, #16
 8010480:	e7ee      	b.n	8010460 <HAL_DMA_IRQHandler+0x2b8>
 8010482:	2280      	movs	r2, #128	; 0x80
 8010484:	0512      	lsls	r2, r2, #20
 8010486:	e7eb      	b.n	8010460 <HAL_DMA_IRQHandler+0x2b8>
 8010488:	40020080 	.word	0x40020080
 801048c:	40020400 	.word	0x40020400
 8010490:	40020008 	.word	0x40020008
 8010494:	4002001c 	.word	0x4002001c
 8010498:	40020030 	.word	0x40020030
 801049c:	40020044 	.word	0x40020044
 80104a0:	40020058 	.word	0x40020058
 80104a4:	4002006c 	.word	0x4002006c
 80104a8:	40020408 	.word	0x40020408
 80104ac:	4002041c 	.word	0x4002041c
 80104b0:	40020430 	.word	0x40020430
 80104b4:	40020444 	.word	0x40020444
 80104b8:	40020000 	.word	0x40020000
 80104bc:	2208      	movs	r2, #8
 80104be:	e7cf      	b.n	8010460 <HAL_DMA_IRQHandler+0x2b8>
 80104c0:	2280      	movs	r2, #128	; 0x80
 80104c2:	e7cd      	b.n	8010460 <HAL_DMA_IRQHandler+0x2b8>
 80104c4:	2280      	movs	r2, #128	; 0x80
 80104c6:	0112      	lsls	r2, r2, #4
 80104c8:	e7ca      	b.n	8010460 <HAL_DMA_IRQHandler+0x2b8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80104ca:	2380      	movs	r3, #128	; 0x80
 80104cc:	01db      	lsls	r3, r3, #7
 80104ce:	e000      	b.n	80104d2 <HAL_DMA_IRQHandler+0x32a>
 80104d0:	2304      	movs	r3, #4
 80104d2:	400b      	ands	r3, r1
 80104d4:	1e59      	subs	r1, r3, #1
 80104d6:	418b      	sbcs	r3, r1
 80104d8:	b2db      	uxtb	r3, r3
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d100      	bne.n	80104e0 <HAL_DMA_IRQHandler+0x338>
 80104de:	e0aa      	b.n	8010636 <HAL_DMA_IRQHandler+0x48e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80104e0:	6813      	ldr	r3, [r2, #0]
 80104e2:	075b      	lsls	r3, r3, #29
 80104e4:	d400      	bmi.n	80104e8 <HAL_DMA_IRQHandler+0x340>
 80104e6:	e0a6      	b.n	8010636 <HAL_DMA_IRQHandler+0x48e>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80104e8:	6813      	ldr	r3, [r2, #0]
 80104ea:	069b      	lsls	r3, r3, #26
 80104ec:	d403      	bmi.n	80104f6 <HAL_DMA_IRQHandler+0x34e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80104ee:	6813      	ldr	r3, [r2, #0]
 80104f0:	2104      	movs	r1, #4
 80104f2:	438b      	bics	r3, r1
 80104f4:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80104f6:	6823      	ldr	r3, [r4, #0]
 80104f8:	4a98      	ldr	r2, [pc, #608]	; (801075c <HAL_DMA_IRQHandler+0x5b4>)
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d800      	bhi.n	8010500 <HAL_DMA_IRQHandler+0x358>
 80104fe:	e0e7      	b.n	80106d0 <HAL_DMA_IRQHandler+0x528>
 8010500:	4a97      	ldr	r2, [pc, #604]	; (8010760 <HAL_DMA_IRQHandler+0x5b8>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d100      	bne.n	8010508 <HAL_DMA_IRQHandler+0x360>
 8010506:	e08b      	b.n	8010620 <HAL_DMA_IRQHandler+0x478>
 8010508:	4a96      	ldr	r2, [pc, #600]	; (8010764 <HAL_DMA_IRQHandler+0x5bc>)
 801050a:	4293      	cmp	r3, r2
 801050c:	d100      	bne.n	8010510 <HAL_DMA_IRQHandler+0x368>
 801050e:	e0c7      	b.n	80106a0 <HAL_DMA_IRQHandler+0x4f8>
 8010510:	4a95      	ldr	r2, [pc, #596]	; (8010768 <HAL_DMA_IRQHandler+0x5c0>)
 8010512:	4293      	cmp	r3, r2
 8010514:	d100      	bne.n	8010518 <HAL_DMA_IRQHandler+0x370>
 8010516:	e0c5      	b.n	80106a4 <HAL_DMA_IRQHandler+0x4fc>
 8010518:	4a94      	ldr	r2, [pc, #592]	; (801076c <HAL_DMA_IRQHandler+0x5c4>)
 801051a:	4293      	cmp	r3, r2
 801051c:	d100      	bne.n	8010520 <HAL_DMA_IRQHandler+0x378>
 801051e:	e0c4      	b.n	80106aa <HAL_DMA_IRQHandler+0x502>
 8010520:	4a93      	ldr	r2, [pc, #588]	; (8010770 <HAL_DMA_IRQHandler+0x5c8>)
 8010522:	4293      	cmp	r3, r2
 8010524:	d100      	bne.n	8010528 <HAL_DMA_IRQHandler+0x380>
 8010526:	e0c3      	b.n	80106b0 <HAL_DMA_IRQHandler+0x508>
 8010528:	4a92      	ldr	r2, [pc, #584]	; (8010774 <HAL_DMA_IRQHandler+0x5cc>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d100      	bne.n	8010530 <HAL_DMA_IRQHandler+0x388>
 801052e:	e0c2      	b.n	80106b6 <HAL_DMA_IRQHandler+0x50e>
 8010530:	4a8a      	ldr	r2, [pc, #552]	; (801075c <HAL_DMA_IRQHandler+0x5b4>)
 8010532:	4293      	cmp	r3, r2
 8010534:	d100      	bne.n	8010538 <HAL_DMA_IRQHandler+0x390>
 8010536:	e0c1      	b.n	80106bc <HAL_DMA_IRQHandler+0x514>
 8010538:	4a8f      	ldr	r2, [pc, #572]	; (8010778 <HAL_DMA_IRQHandler+0x5d0>)
 801053a:	4293      	cmp	r3, r2
 801053c:	d100      	bne.n	8010540 <HAL_DMA_IRQHandler+0x398>
 801053e:	e0c0      	b.n	80106c2 <HAL_DMA_IRQHandler+0x51a>
 8010540:	4a8e      	ldr	r2, [pc, #568]	; (801077c <HAL_DMA_IRQHandler+0x5d4>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d100      	bne.n	8010548 <HAL_DMA_IRQHandler+0x3a0>
 8010546:	e0be      	b.n	80106c6 <HAL_DMA_IRQHandler+0x51e>
 8010548:	4a8d      	ldr	r2, [pc, #564]	; (8010780 <HAL_DMA_IRQHandler+0x5d8>)
 801054a:	4293      	cmp	r3, r2
 801054c:	d100      	bne.n	8010550 <HAL_DMA_IRQHandler+0x3a8>
 801054e:	e0bc      	b.n	80106ca <HAL_DMA_IRQHandler+0x522>
 8010550:	4a8c      	ldr	r2, [pc, #560]	; (8010784 <HAL_DMA_IRQHandler+0x5dc>)
 8010552:	4293      	cmp	r3, r2
 8010554:	d061      	beq.n	801061a <HAL_DMA_IRQHandler+0x472>
 8010556:	2280      	movs	r2, #128	; 0x80
 8010558:	02d2      	lsls	r2, r2, #11
 801055a:	e062      	b.n	8010622 <HAL_DMA_IRQHandler+0x47a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801055c:	2340      	movs	r3, #64	; 0x40
 801055e:	e7b8      	b.n	80104d2 <HAL_DMA_IRQHandler+0x32a>
 8010560:	2380      	movs	r3, #128	; 0x80
 8010562:	00db      	lsls	r3, r3, #3
 8010564:	e7b5      	b.n	80104d2 <HAL_DMA_IRQHandler+0x32a>
 8010566:	2380      	movs	r3, #128	; 0x80
 8010568:	01db      	lsls	r3, r3, #7
 801056a:	e7b2      	b.n	80104d2 <HAL_DMA_IRQHandler+0x32a>
 801056c:	2380      	movs	r3, #128	; 0x80
 801056e:	02db      	lsls	r3, r3, #11
 8010570:	e7af      	b.n	80104d2 <HAL_DMA_IRQHandler+0x32a>
 8010572:	2380      	movs	r3, #128	; 0x80
 8010574:	03db      	lsls	r3, r3, #15
 8010576:	e7ac      	b.n	80104d2 <HAL_DMA_IRQHandler+0x32a>
 8010578:	2380      	movs	r3, #128	; 0x80
 801057a:	04db      	lsls	r3, r3, #19
 801057c:	e7a9      	b.n	80104d2 <HAL_DMA_IRQHandler+0x32a>
 801057e:	2304      	movs	r3, #4
 8010580:	e7a7      	b.n	80104d2 <HAL_DMA_IRQHandler+0x32a>
 8010582:	2340      	movs	r3, #64	; 0x40
 8010584:	e7a5      	b.n	80104d2 <HAL_DMA_IRQHandler+0x32a>
 8010586:	2380      	movs	r3, #128	; 0x80
 8010588:	00db      	lsls	r3, r3, #3
 801058a:	e7a2      	b.n	80104d2 <HAL_DMA_IRQHandler+0x32a>
 801058c:	4b7e      	ldr	r3, [pc, #504]	; (8010788 <HAL_DMA_IRQHandler+0x5e0>)
 801058e:	6819      	ldr	r1, [r3, #0]
 8010590:	4b73      	ldr	r3, [pc, #460]	; (8010760 <HAL_DMA_IRQHandler+0x5b8>)
 8010592:	429a      	cmp	r2, r3
 8010594:	d023      	beq.n	80105de <HAL_DMA_IRQHandler+0x436>
 8010596:	4b73      	ldr	r3, [pc, #460]	; (8010764 <HAL_DMA_IRQHandler+0x5bc>)
 8010598:	429a      	cmp	r2, r3
 801059a:	d026      	beq.n	80105ea <HAL_DMA_IRQHandler+0x442>
 801059c:	4b72      	ldr	r3, [pc, #456]	; (8010768 <HAL_DMA_IRQHandler+0x5c0>)
 801059e:	429a      	cmp	r2, r3
 80105a0:	d025      	beq.n	80105ee <HAL_DMA_IRQHandler+0x446>
 80105a2:	4b72      	ldr	r3, [pc, #456]	; (801076c <HAL_DMA_IRQHandler+0x5c4>)
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d025      	beq.n	80105f4 <HAL_DMA_IRQHandler+0x44c>
 80105a8:	4b71      	ldr	r3, [pc, #452]	; (8010770 <HAL_DMA_IRQHandler+0x5c8>)
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d025      	beq.n	80105fa <HAL_DMA_IRQHandler+0x452>
 80105ae:	4b71      	ldr	r3, [pc, #452]	; (8010774 <HAL_DMA_IRQHandler+0x5cc>)
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d025      	beq.n	8010600 <HAL_DMA_IRQHandler+0x458>
 80105b4:	4b69      	ldr	r3, [pc, #420]	; (801075c <HAL_DMA_IRQHandler+0x5b4>)
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d025      	beq.n	8010606 <HAL_DMA_IRQHandler+0x45e>
 80105ba:	4b6f      	ldr	r3, [pc, #444]	; (8010778 <HAL_DMA_IRQHandler+0x5d0>)
 80105bc:	429a      	cmp	r2, r3
 80105be:	d025      	beq.n	801060c <HAL_DMA_IRQHandler+0x464>
 80105c0:	4b6e      	ldr	r3, [pc, #440]	; (801077c <HAL_DMA_IRQHandler+0x5d4>)
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d024      	beq.n	8010610 <HAL_DMA_IRQHandler+0x468>
 80105c6:	4b6e      	ldr	r3, [pc, #440]	; (8010780 <HAL_DMA_IRQHandler+0x5d8>)
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d023      	beq.n	8010614 <HAL_DMA_IRQHandler+0x46c>
 80105cc:	4b6d      	ldr	r3, [pc, #436]	; (8010784 <HAL_DMA_IRQHandler+0x5dc>)
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d002      	beq.n	80105d8 <HAL_DMA_IRQHandler+0x430>
 80105d2:	2380      	movs	r3, #128	; 0x80
 80105d4:	02db      	lsls	r3, r3, #11
 80105d6:	e003      	b.n	80105e0 <HAL_DMA_IRQHandler+0x438>
 80105d8:	2380      	movs	r3, #128	; 0x80
 80105da:	01db      	lsls	r3, r3, #7
 80105dc:	e000      	b.n	80105e0 <HAL_DMA_IRQHandler+0x438>
 80105de:	2304      	movs	r3, #4
 80105e0:	400b      	ands	r3, r1
 80105e2:	1e59      	subs	r1, r3, #1
 80105e4:	418b      	sbcs	r3, r1
 80105e6:	b2db      	uxtb	r3, r3
 80105e8:	e777      	b.n	80104da <HAL_DMA_IRQHandler+0x332>
 80105ea:	2340      	movs	r3, #64	; 0x40
 80105ec:	e7f8      	b.n	80105e0 <HAL_DMA_IRQHandler+0x438>
 80105ee:	2380      	movs	r3, #128	; 0x80
 80105f0:	00db      	lsls	r3, r3, #3
 80105f2:	e7f5      	b.n	80105e0 <HAL_DMA_IRQHandler+0x438>
 80105f4:	2380      	movs	r3, #128	; 0x80
 80105f6:	01db      	lsls	r3, r3, #7
 80105f8:	e7f2      	b.n	80105e0 <HAL_DMA_IRQHandler+0x438>
 80105fa:	2380      	movs	r3, #128	; 0x80
 80105fc:	02db      	lsls	r3, r3, #11
 80105fe:	e7ef      	b.n	80105e0 <HAL_DMA_IRQHandler+0x438>
 8010600:	2380      	movs	r3, #128	; 0x80
 8010602:	03db      	lsls	r3, r3, #15
 8010604:	e7ec      	b.n	80105e0 <HAL_DMA_IRQHandler+0x438>
 8010606:	2380      	movs	r3, #128	; 0x80
 8010608:	04db      	lsls	r3, r3, #19
 801060a:	e7e9      	b.n	80105e0 <HAL_DMA_IRQHandler+0x438>
 801060c:	2304      	movs	r3, #4
 801060e:	e7e7      	b.n	80105e0 <HAL_DMA_IRQHandler+0x438>
 8010610:	2340      	movs	r3, #64	; 0x40
 8010612:	e7e5      	b.n	80105e0 <HAL_DMA_IRQHandler+0x438>
 8010614:	2380      	movs	r3, #128	; 0x80
 8010616:	00db      	lsls	r3, r3, #3
 8010618:	e7e2      	b.n	80105e0 <HAL_DMA_IRQHandler+0x438>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801061a:	2280      	movs	r2, #128	; 0x80
 801061c:	01d2      	lsls	r2, r2, #7
 801061e:	e000      	b.n	8010622 <HAL_DMA_IRQHandler+0x47a>
 8010620:	2204      	movs	r2, #4
 8010622:	4b5a      	ldr	r3, [pc, #360]	; (801078c <HAL_DMA_IRQHandler+0x5e4>)
 8010624:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010626:	2321      	movs	r3, #33	; 0x21
 8010628:	2211      	movs	r2, #17
 801062a:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801062c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801062e:	2b00      	cmp	r3, #0
 8010630:	d001      	beq.n	8010636 <HAL_DMA_IRQHandler+0x48e>
        hdma->XferHalfCpltCallback(hdma);
 8010632:	0020      	movs	r0, r4
 8010634:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010636:	6822      	ldr	r2, [r4, #0]
 8010638:	4b48      	ldr	r3, [pc, #288]	; (801075c <HAL_DMA_IRQHandler+0x5b4>)
 801063a:	429a      	cmp	r2, r3
 801063c:	d800      	bhi.n	8010640 <HAL_DMA_IRQHandler+0x498>
 801063e:	e105      	b.n	801084c <HAL_DMA_IRQHandler+0x6a4>
 8010640:	4b52      	ldr	r3, [pc, #328]	; (801078c <HAL_DMA_IRQHandler+0x5e4>)
 8010642:	6819      	ldr	r1, [r3, #0]
 8010644:	4b46      	ldr	r3, [pc, #280]	; (8010760 <HAL_DMA_IRQHandler+0x5b8>)
 8010646:	429a      	cmp	r2, r3
 8010648:	d100      	bne.n	801064c <HAL_DMA_IRQHandler+0x4a4>
 801064a:	e0a1      	b.n	8010790 <HAL_DMA_IRQHandler+0x5e8>
 801064c:	4b45      	ldr	r3, [pc, #276]	; (8010764 <HAL_DMA_IRQHandler+0x5bc>)
 801064e:	429a      	cmp	r2, r3
 8010650:	d100      	bne.n	8010654 <HAL_DMA_IRQHandler+0x4ac>
 8010652:	e0e3      	b.n	801081c <HAL_DMA_IRQHandler+0x674>
 8010654:	4b44      	ldr	r3, [pc, #272]	; (8010768 <HAL_DMA_IRQHandler+0x5c0>)
 8010656:	429a      	cmp	r2, r3
 8010658:	d100      	bne.n	801065c <HAL_DMA_IRQHandler+0x4b4>
 801065a:	e0e1      	b.n	8010820 <HAL_DMA_IRQHandler+0x678>
 801065c:	4b43      	ldr	r3, [pc, #268]	; (801076c <HAL_DMA_IRQHandler+0x5c4>)
 801065e:	429a      	cmp	r2, r3
 8010660:	d100      	bne.n	8010664 <HAL_DMA_IRQHandler+0x4bc>
 8010662:	e0e0      	b.n	8010826 <HAL_DMA_IRQHandler+0x67e>
 8010664:	4b42      	ldr	r3, [pc, #264]	; (8010770 <HAL_DMA_IRQHandler+0x5c8>)
 8010666:	429a      	cmp	r2, r3
 8010668:	d100      	bne.n	801066c <HAL_DMA_IRQHandler+0x4c4>
 801066a:	e0df      	b.n	801082c <HAL_DMA_IRQHandler+0x684>
 801066c:	4b41      	ldr	r3, [pc, #260]	; (8010774 <HAL_DMA_IRQHandler+0x5cc>)
 801066e:	429a      	cmp	r2, r3
 8010670:	d100      	bne.n	8010674 <HAL_DMA_IRQHandler+0x4cc>
 8010672:	e0de      	b.n	8010832 <HAL_DMA_IRQHandler+0x68a>
 8010674:	4b39      	ldr	r3, [pc, #228]	; (801075c <HAL_DMA_IRQHandler+0x5b4>)
 8010676:	429a      	cmp	r2, r3
 8010678:	d100      	bne.n	801067c <HAL_DMA_IRQHandler+0x4d4>
 801067a:	e0dd      	b.n	8010838 <HAL_DMA_IRQHandler+0x690>
 801067c:	4b3e      	ldr	r3, [pc, #248]	; (8010778 <HAL_DMA_IRQHandler+0x5d0>)
 801067e:	429a      	cmp	r2, r3
 8010680:	d100      	bne.n	8010684 <HAL_DMA_IRQHandler+0x4dc>
 8010682:	e0dc      	b.n	801083e <HAL_DMA_IRQHandler+0x696>
 8010684:	4b3d      	ldr	r3, [pc, #244]	; (801077c <HAL_DMA_IRQHandler+0x5d4>)
 8010686:	429a      	cmp	r2, r3
 8010688:	d100      	bne.n	801068c <HAL_DMA_IRQHandler+0x4e4>
 801068a:	e0da      	b.n	8010842 <HAL_DMA_IRQHandler+0x69a>
 801068c:	4b3c      	ldr	r3, [pc, #240]	; (8010780 <HAL_DMA_IRQHandler+0x5d8>)
 801068e:	429a      	cmp	r2, r3
 8010690:	d100      	bne.n	8010694 <HAL_DMA_IRQHandler+0x4ec>
 8010692:	e0d8      	b.n	8010846 <HAL_DMA_IRQHandler+0x69e>
 8010694:	4b3b      	ldr	r3, [pc, #236]	; (8010784 <HAL_DMA_IRQHandler+0x5dc>)
 8010696:	429a      	cmp	r2, r3
 8010698:	d05d      	beq.n	8010756 <HAL_DMA_IRQHandler+0x5ae>
 801069a:	2380      	movs	r3, #128	; 0x80
 801069c:	029b      	lsls	r3, r3, #10
 801069e:	e078      	b.n	8010792 <HAL_DMA_IRQHandler+0x5ea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80106a0:	2240      	movs	r2, #64	; 0x40
 80106a2:	e7be      	b.n	8010622 <HAL_DMA_IRQHandler+0x47a>
 80106a4:	2280      	movs	r2, #128	; 0x80
 80106a6:	00d2      	lsls	r2, r2, #3
 80106a8:	e7bb      	b.n	8010622 <HAL_DMA_IRQHandler+0x47a>
 80106aa:	2280      	movs	r2, #128	; 0x80
 80106ac:	01d2      	lsls	r2, r2, #7
 80106ae:	e7b8      	b.n	8010622 <HAL_DMA_IRQHandler+0x47a>
 80106b0:	2280      	movs	r2, #128	; 0x80
 80106b2:	02d2      	lsls	r2, r2, #11
 80106b4:	e7b5      	b.n	8010622 <HAL_DMA_IRQHandler+0x47a>
 80106b6:	2280      	movs	r2, #128	; 0x80
 80106b8:	03d2      	lsls	r2, r2, #15
 80106ba:	e7b2      	b.n	8010622 <HAL_DMA_IRQHandler+0x47a>
 80106bc:	2280      	movs	r2, #128	; 0x80
 80106be:	04d2      	lsls	r2, r2, #19
 80106c0:	e7af      	b.n	8010622 <HAL_DMA_IRQHandler+0x47a>
 80106c2:	2204      	movs	r2, #4
 80106c4:	e7ad      	b.n	8010622 <HAL_DMA_IRQHandler+0x47a>
 80106c6:	2240      	movs	r2, #64	; 0x40
 80106c8:	e7ab      	b.n	8010622 <HAL_DMA_IRQHandler+0x47a>
 80106ca:	2280      	movs	r2, #128	; 0x80
 80106cc:	00d2      	lsls	r2, r2, #3
 80106ce:	e7a8      	b.n	8010622 <HAL_DMA_IRQHandler+0x47a>
 80106d0:	4a23      	ldr	r2, [pc, #140]	; (8010760 <HAL_DMA_IRQHandler+0x5b8>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d023      	beq.n	801071e <HAL_DMA_IRQHandler+0x576>
 80106d6:	4a23      	ldr	r2, [pc, #140]	; (8010764 <HAL_DMA_IRQHandler+0x5bc>)
 80106d8:	4293      	cmp	r3, r2
 80106da:	d024      	beq.n	8010726 <HAL_DMA_IRQHandler+0x57e>
 80106dc:	4a22      	ldr	r2, [pc, #136]	; (8010768 <HAL_DMA_IRQHandler+0x5c0>)
 80106de:	4293      	cmp	r3, r2
 80106e0:	d023      	beq.n	801072a <HAL_DMA_IRQHandler+0x582>
 80106e2:	4a22      	ldr	r2, [pc, #136]	; (801076c <HAL_DMA_IRQHandler+0x5c4>)
 80106e4:	4293      	cmp	r3, r2
 80106e6:	d023      	beq.n	8010730 <HAL_DMA_IRQHandler+0x588>
 80106e8:	4a21      	ldr	r2, [pc, #132]	; (8010770 <HAL_DMA_IRQHandler+0x5c8>)
 80106ea:	4293      	cmp	r3, r2
 80106ec:	d023      	beq.n	8010736 <HAL_DMA_IRQHandler+0x58e>
 80106ee:	4a21      	ldr	r2, [pc, #132]	; (8010774 <HAL_DMA_IRQHandler+0x5cc>)
 80106f0:	4293      	cmp	r3, r2
 80106f2:	d023      	beq.n	801073c <HAL_DMA_IRQHandler+0x594>
 80106f4:	4a19      	ldr	r2, [pc, #100]	; (801075c <HAL_DMA_IRQHandler+0x5b4>)
 80106f6:	4293      	cmp	r3, r2
 80106f8:	d023      	beq.n	8010742 <HAL_DMA_IRQHandler+0x59a>
 80106fa:	4a1f      	ldr	r2, [pc, #124]	; (8010778 <HAL_DMA_IRQHandler+0x5d0>)
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d023      	beq.n	8010748 <HAL_DMA_IRQHandler+0x5a0>
 8010700:	4a1e      	ldr	r2, [pc, #120]	; (801077c <HAL_DMA_IRQHandler+0x5d4>)
 8010702:	4293      	cmp	r3, r2
 8010704:	d022      	beq.n	801074c <HAL_DMA_IRQHandler+0x5a4>
 8010706:	4a1e      	ldr	r2, [pc, #120]	; (8010780 <HAL_DMA_IRQHandler+0x5d8>)
 8010708:	4293      	cmp	r3, r2
 801070a:	d021      	beq.n	8010750 <HAL_DMA_IRQHandler+0x5a8>
 801070c:	4a1d      	ldr	r2, [pc, #116]	; (8010784 <HAL_DMA_IRQHandler+0x5dc>)
 801070e:	4293      	cmp	r3, r2
 8010710:	d002      	beq.n	8010718 <HAL_DMA_IRQHandler+0x570>
 8010712:	2280      	movs	r2, #128	; 0x80
 8010714:	02d2      	lsls	r2, r2, #11
 8010716:	e003      	b.n	8010720 <HAL_DMA_IRQHandler+0x578>
 8010718:	2280      	movs	r2, #128	; 0x80
 801071a:	01d2      	lsls	r2, r2, #7
 801071c:	e000      	b.n	8010720 <HAL_DMA_IRQHandler+0x578>
 801071e:	2204      	movs	r2, #4
 8010720:	4b19      	ldr	r3, [pc, #100]	; (8010788 <HAL_DMA_IRQHandler+0x5e0>)
 8010722:	605a      	str	r2, [r3, #4]
 8010724:	e77f      	b.n	8010626 <HAL_DMA_IRQHandler+0x47e>
 8010726:	2240      	movs	r2, #64	; 0x40
 8010728:	e7fa      	b.n	8010720 <HAL_DMA_IRQHandler+0x578>
 801072a:	2280      	movs	r2, #128	; 0x80
 801072c:	00d2      	lsls	r2, r2, #3
 801072e:	e7f7      	b.n	8010720 <HAL_DMA_IRQHandler+0x578>
 8010730:	2280      	movs	r2, #128	; 0x80
 8010732:	01d2      	lsls	r2, r2, #7
 8010734:	e7f4      	b.n	8010720 <HAL_DMA_IRQHandler+0x578>
 8010736:	2280      	movs	r2, #128	; 0x80
 8010738:	02d2      	lsls	r2, r2, #11
 801073a:	e7f1      	b.n	8010720 <HAL_DMA_IRQHandler+0x578>
 801073c:	2280      	movs	r2, #128	; 0x80
 801073e:	03d2      	lsls	r2, r2, #15
 8010740:	e7ee      	b.n	8010720 <HAL_DMA_IRQHandler+0x578>
 8010742:	2280      	movs	r2, #128	; 0x80
 8010744:	04d2      	lsls	r2, r2, #19
 8010746:	e7eb      	b.n	8010720 <HAL_DMA_IRQHandler+0x578>
 8010748:	2204      	movs	r2, #4
 801074a:	e7e9      	b.n	8010720 <HAL_DMA_IRQHandler+0x578>
 801074c:	2240      	movs	r2, #64	; 0x40
 801074e:	e7e7      	b.n	8010720 <HAL_DMA_IRQHandler+0x578>
 8010750:	2280      	movs	r2, #128	; 0x80
 8010752:	00d2      	lsls	r2, r2, #3
 8010754:	e7e4      	b.n	8010720 <HAL_DMA_IRQHandler+0x578>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010756:	2380      	movs	r3, #128	; 0x80
 8010758:	019b      	lsls	r3, r3, #6
 801075a:	e01a      	b.n	8010792 <HAL_DMA_IRQHandler+0x5ea>
 801075c:	40020080 	.word	0x40020080
 8010760:	40020008 	.word	0x40020008
 8010764:	4002001c 	.word	0x4002001c
 8010768:	40020030 	.word	0x40020030
 801076c:	40020044 	.word	0x40020044
 8010770:	40020058 	.word	0x40020058
 8010774:	4002006c 	.word	0x4002006c
 8010778:	40020408 	.word	0x40020408
 801077c:	4002041c 	.word	0x4002041c
 8010780:	40020430 	.word	0x40020430
 8010784:	40020444 	.word	0x40020444
 8010788:	40020000 	.word	0x40020000
 801078c:	40020400 	.word	0x40020400
 8010790:	2302      	movs	r3, #2
 8010792:	400b      	ands	r3, r1
 8010794:	1e59      	subs	r1, r3, #1
 8010796:	418b      	sbcs	r3, r1
 8010798:	b2db      	uxtb	r3, r3
 801079a:	2b00      	cmp	r3, #0
 801079c:	d100      	bne.n	80107a0 <HAL_DMA_IRQHandler+0x5f8>
 801079e:	e0af      	b.n	8010900 <HAL_DMA_IRQHandler+0x758>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80107a0:	6813      	ldr	r3, [r2, #0]
 80107a2:	079b      	lsls	r3, r3, #30
 80107a4:	d400      	bmi.n	80107a8 <HAL_DMA_IRQHandler+0x600>
 80107a6:	e0ab      	b.n	8010900 <HAL_DMA_IRQHandler+0x758>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80107a8:	6813      	ldr	r3, [r2, #0]
 80107aa:	069b      	lsls	r3, r3, #26
 80107ac:	d403      	bmi.n	80107b6 <HAL_DMA_IRQHandler+0x60e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80107ae:	6813      	ldr	r3, [r2, #0]
 80107b0:	2102      	movs	r1, #2
 80107b2:	438b      	bics	r3, r1
 80107b4:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80107b6:	6823      	ldr	r3, [r4, #0]
 80107b8:	4a7f      	ldr	r2, [pc, #508]	; (80109b8 <HAL_DMA_IRQHandler+0x810>)
 80107ba:	4293      	cmp	r3, r2
 80107bc:	d800      	bhi.n	80107c0 <HAL_DMA_IRQHandler+0x618>
 80107be:	e0b8      	b.n	8010932 <HAL_DMA_IRQHandler+0x78a>
 80107c0:	4a7e      	ldr	r2, [pc, #504]	; (80109bc <HAL_DMA_IRQHandler+0x814>)
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d100      	bne.n	80107c8 <HAL_DMA_IRQHandler+0x620>
 80107c6:	e08b      	b.n	80108e0 <HAL_DMA_IRQHandler+0x738>
 80107c8:	4a7d      	ldr	r2, [pc, #500]	; (80109c0 <HAL_DMA_IRQHandler+0x818>)
 80107ca:	4293      	cmp	r3, r2
 80107cc:	d100      	bne.n	80107d0 <HAL_DMA_IRQHandler+0x628>
 80107ce:	e098      	b.n	8010902 <HAL_DMA_IRQHandler+0x75a>
 80107d0:	4a7c      	ldr	r2, [pc, #496]	; (80109c4 <HAL_DMA_IRQHandler+0x81c>)
 80107d2:	4293      	cmp	r3, r2
 80107d4:	d100      	bne.n	80107d8 <HAL_DMA_IRQHandler+0x630>
 80107d6:	e096      	b.n	8010906 <HAL_DMA_IRQHandler+0x75e>
 80107d8:	4a7b      	ldr	r2, [pc, #492]	; (80109c8 <HAL_DMA_IRQHandler+0x820>)
 80107da:	4293      	cmp	r3, r2
 80107dc:	d100      	bne.n	80107e0 <HAL_DMA_IRQHandler+0x638>
 80107de:	e095      	b.n	801090c <HAL_DMA_IRQHandler+0x764>
 80107e0:	4a7a      	ldr	r2, [pc, #488]	; (80109cc <HAL_DMA_IRQHandler+0x824>)
 80107e2:	4293      	cmp	r3, r2
 80107e4:	d100      	bne.n	80107e8 <HAL_DMA_IRQHandler+0x640>
 80107e6:	e094      	b.n	8010912 <HAL_DMA_IRQHandler+0x76a>
 80107e8:	4a79      	ldr	r2, [pc, #484]	; (80109d0 <HAL_DMA_IRQHandler+0x828>)
 80107ea:	4293      	cmp	r3, r2
 80107ec:	d100      	bne.n	80107f0 <HAL_DMA_IRQHandler+0x648>
 80107ee:	e093      	b.n	8010918 <HAL_DMA_IRQHandler+0x770>
 80107f0:	4a71      	ldr	r2, [pc, #452]	; (80109b8 <HAL_DMA_IRQHandler+0x810>)
 80107f2:	4293      	cmp	r3, r2
 80107f4:	d100      	bne.n	80107f8 <HAL_DMA_IRQHandler+0x650>
 80107f6:	e092      	b.n	801091e <HAL_DMA_IRQHandler+0x776>
 80107f8:	4a76      	ldr	r2, [pc, #472]	; (80109d4 <HAL_DMA_IRQHandler+0x82c>)
 80107fa:	4293      	cmp	r3, r2
 80107fc:	d100      	bne.n	8010800 <HAL_DMA_IRQHandler+0x658>
 80107fe:	e091      	b.n	8010924 <HAL_DMA_IRQHandler+0x77c>
 8010800:	4a75      	ldr	r2, [pc, #468]	; (80109d8 <HAL_DMA_IRQHandler+0x830>)
 8010802:	4293      	cmp	r3, r2
 8010804:	d100      	bne.n	8010808 <HAL_DMA_IRQHandler+0x660>
 8010806:	e08f      	b.n	8010928 <HAL_DMA_IRQHandler+0x780>
 8010808:	4a74      	ldr	r2, [pc, #464]	; (80109dc <HAL_DMA_IRQHandler+0x834>)
 801080a:	4293      	cmp	r3, r2
 801080c:	d100      	bne.n	8010810 <HAL_DMA_IRQHandler+0x668>
 801080e:	e08d      	b.n	801092c <HAL_DMA_IRQHandler+0x784>
 8010810:	4a73      	ldr	r2, [pc, #460]	; (80109e0 <HAL_DMA_IRQHandler+0x838>)
 8010812:	4293      	cmp	r3, r2
 8010814:	d061      	beq.n	80108da <HAL_DMA_IRQHandler+0x732>
 8010816:	2280      	movs	r2, #128	; 0x80
 8010818:	0292      	lsls	r2, r2, #10
 801081a:	e062      	b.n	80108e2 <HAL_DMA_IRQHandler+0x73a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801081c:	2320      	movs	r3, #32
 801081e:	e7b8      	b.n	8010792 <HAL_DMA_IRQHandler+0x5ea>
 8010820:	2380      	movs	r3, #128	; 0x80
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	e7b5      	b.n	8010792 <HAL_DMA_IRQHandler+0x5ea>
 8010826:	2380      	movs	r3, #128	; 0x80
 8010828:	019b      	lsls	r3, r3, #6
 801082a:	e7b2      	b.n	8010792 <HAL_DMA_IRQHandler+0x5ea>
 801082c:	2380      	movs	r3, #128	; 0x80
 801082e:	029b      	lsls	r3, r3, #10
 8010830:	e7af      	b.n	8010792 <HAL_DMA_IRQHandler+0x5ea>
 8010832:	2380      	movs	r3, #128	; 0x80
 8010834:	039b      	lsls	r3, r3, #14
 8010836:	e7ac      	b.n	8010792 <HAL_DMA_IRQHandler+0x5ea>
 8010838:	2380      	movs	r3, #128	; 0x80
 801083a:	049b      	lsls	r3, r3, #18
 801083c:	e7a9      	b.n	8010792 <HAL_DMA_IRQHandler+0x5ea>
 801083e:	2302      	movs	r3, #2
 8010840:	e7a7      	b.n	8010792 <HAL_DMA_IRQHandler+0x5ea>
 8010842:	2320      	movs	r3, #32
 8010844:	e7a5      	b.n	8010792 <HAL_DMA_IRQHandler+0x5ea>
 8010846:	2380      	movs	r3, #128	; 0x80
 8010848:	009b      	lsls	r3, r3, #2
 801084a:	e7a2      	b.n	8010792 <HAL_DMA_IRQHandler+0x5ea>
 801084c:	4b65      	ldr	r3, [pc, #404]	; (80109e4 <HAL_DMA_IRQHandler+0x83c>)
 801084e:	6819      	ldr	r1, [r3, #0]
 8010850:	4b5a      	ldr	r3, [pc, #360]	; (80109bc <HAL_DMA_IRQHandler+0x814>)
 8010852:	429a      	cmp	r2, r3
 8010854:	d023      	beq.n	801089e <HAL_DMA_IRQHandler+0x6f6>
 8010856:	4b5a      	ldr	r3, [pc, #360]	; (80109c0 <HAL_DMA_IRQHandler+0x818>)
 8010858:	429a      	cmp	r2, r3
 801085a:	d026      	beq.n	80108aa <HAL_DMA_IRQHandler+0x702>
 801085c:	4b59      	ldr	r3, [pc, #356]	; (80109c4 <HAL_DMA_IRQHandler+0x81c>)
 801085e:	429a      	cmp	r2, r3
 8010860:	d025      	beq.n	80108ae <HAL_DMA_IRQHandler+0x706>
 8010862:	4b59      	ldr	r3, [pc, #356]	; (80109c8 <HAL_DMA_IRQHandler+0x820>)
 8010864:	429a      	cmp	r2, r3
 8010866:	d025      	beq.n	80108b4 <HAL_DMA_IRQHandler+0x70c>
 8010868:	4b58      	ldr	r3, [pc, #352]	; (80109cc <HAL_DMA_IRQHandler+0x824>)
 801086a:	429a      	cmp	r2, r3
 801086c:	d025      	beq.n	80108ba <HAL_DMA_IRQHandler+0x712>
 801086e:	4b58      	ldr	r3, [pc, #352]	; (80109d0 <HAL_DMA_IRQHandler+0x828>)
 8010870:	429a      	cmp	r2, r3
 8010872:	d025      	beq.n	80108c0 <HAL_DMA_IRQHandler+0x718>
 8010874:	4b50      	ldr	r3, [pc, #320]	; (80109b8 <HAL_DMA_IRQHandler+0x810>)
 8010876:	429a      	cmp	r2, r3
 8010878:	d025      	beq.n	80108c6 <HAL_DMA_IRQHandler+0x71e>
 801087a:	4b56      	ldr	r3, [pc, #344]	; (80109d4 <HAL_DMA_IRQHandler+0x82c>)
 801087c:	429a      	cmp	r2, r3
 801087e:	d025      	beq.n	80108cc <HAL_DMA_IRQHandler+0x724>
 8010880:	4b55      	ldr	r3, [pc, #340]	; (80109d8 <HAL_DMA_IRQHandler+0x830>)
 8010882:	429a      	cmp	r2, r3
 8010884:	d024      	beq.n	80108d0 <HAL_DMA_IRQHandler+0x728>
 8010886:	4b55      	ldr	r3, [pc, #340]	; (80109dc <HAL_DMA_IRQHandler+0x834>)
 8010888:	429a      	cmp	r2, r3
 801088a:	d023      	beq.n	80108d4 <HAL_DMA_IRQHandler+0x72c>
 801088c:	4b54      	ldr	r3, [pc, #336]	; (80109e0 <HAL_DMA_IRQHandler+0x838>)
 801088e:	429a      	cmp	r2, r3
 8010890:	d002      	beq.n	8010898 <HAL_DMA_IRQHandler+0x6f0>
 8010892:	2380      	movs	r3, #128	; 0x80
 8010894:	029b      	lsls	r3, r3, #10
 8010896:	e003      	b.n	80108a0 <HAL_DMA_IRQHandler+0x6f8>
 8010898:	2380      	movs	r3, #128	; 0x80
 801089a:	019b      	lsls	r3, r3, #6
 801089c:	e000      	b.n	80108a0 <HAL_DMA_IRQHandler+0x6f8>
 801089e:	2302      	movs	r3, #2
 80108a0:	400b      	ands	r3, r1
 80108a2:	1e59      	subs	r1, r3, #1
 80108a4:	418b      	sbcs	r3, r1
 80108a6:	b2db      	uxtb	r3, r3
 80108a8:	e777      	b.n	801079a <HAL_DMA_IRQHandler+0x5f2>
 80108aa:	2320      	movs	r3, #32
 80108ac:	e7f8      	b.n	80108a0 <HAL_DMA_IRQHandler+0x6f8>
 80108ae:	2380      	movs	r3, #128	; 0x80
 80108b0:	009b      	lsls	r3, r3, #2
 80108b2:	e7f5      	b.n	80108a0 <HAL_DMA_IRQHandler+0x6f8>
 80108b4:	2380      	movs	r3, #128	; 0x80
 80108b6:	019b      	lsls	r3, r3, #6
 80108b8:	e7f2      	b.n	80108a0 <HAL_DMA_IRQHandler+0x6f8>
 80108ba:	2380      	movs	r3, #128	; 0x80
 80108bc:	029b      	lsls	r3, r3, #10
 80108be:	e7ef      	b.n	80108a0 <HAL_DMA_IRQHandler+0x6f8>
 80108c0:	2380      	movs	r3, #128	; 0x80
 80108c2:	039b      	lsls	r3, r3, #14
 80108c4:	e7ec      	b.n	80108a0 <HAL_DMA_IRQHandler+0x6f8>
 80108c6:	2380      	movs	r3, #128	; 0x80
 80108c8:	049b      	lsls	r3, r3, #18
 80108ca:	e7e9      	b.n	80108a0 <HAL_DMA_IRQHandler+0x6f8>
 80108cc:	2302      	movs	r3, #2
 80108ce:	e7e7      	b.n	80108a0 <HAL_DMA_IRQHandler+0x6f8>
 80108d0:	2320      	movs	r3, #32
 80108d2:	e7e5      	b.n	80108a0 <HAL_DMA_IRQHandler+0x6f8>
 80108d4:	2380      	movs	r3, #128	; 0x80
 80108d6:	009b      	lsls	r3, r3, #2
 80108d8:	e7e2      	b.n	80108a0 <HAL_DMA_IRQHandler+0x6f8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80108da:	2280      	movs	r2, #128	; 0x80
 80108dc:	0192      	lsls	r2, r2, #6
 80108de:	e000      	b.n	80108e2 <HAL_DMA_IRQHandler+0x73a>
 80108e0:	2202      	movs	r2, #2
 80108e2:	4b41      	ldr	r3, [pc, #260]	; (80109e8 <HAL_DMA_IRQHandler+0x840>)
 80108e4:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80108e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108e8:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 80108ea:	2321      	movs	r3, #33	; 0x21
 80108ec:	2201      	movs	r2, #1
 80108ee:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 80108f0:	3b01      	subs	r3, #1
 80108f2:	2200      	movs	r2, #0
 80108f4:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80108f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d001      	beq.n	8010900 <HAL_DMA_IRQHandler+0x758>
        hdma->XferCpltCallback(hdma);
 80108fc:	0020      	movs	r0, r4
 80108fe:	4798      	blx	r3
}  
 8010900:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010902:	2220      	movs	r2, #32
 8010904:	e7ed      	b.n	80108e2 <HAL_DMA_IRQHandler+0x73a>
 8010906:	2280      	movs	r2, #128	; 0x80
 8010908:	0092      	lsls	r2, r2, #2
 801090a:	e7ea      	b.n	80108e2 <HAL_DMA_IRQHandler+0x73a>
 801090c:	2280      	movs	r2, #128	; 0x80
 801090e:	0192      	lsls	r2, r2, #6
 8010910:	e7e7      	b.n	80108e2 <HAL_DMA_IRQHandler+0x73a>
 8010912:	2280      	movs	r2, #128	; 0x80
 8010914:	0292      	lsls	r2, r2, #10
 8010916:	e7e4      	b.n	80108e2 <HAL_DMA_IRQHandler+0x73a>
 8010918:	2280      	movs	r2, #128	; 0x80
 801091a:	0392      	lsls	r2, r2, #14
 801091c:	e7e1      	b.n	80108e2 <HAL_DMA_IRQHandler+0x73a>
 801091e:	2280      	movs	r2, #128	; 0x80
 8010920:	0492      	lsls	r2, r2, #18
 8010922:	e7de      	b.n	80108e2 <HAL_DMA_IRQHandler+0x73a>
 8010924:	2202      	movs	r2, #2
 8010926:	e7dc      	b.n	80108e2 <HAL_DMA_IRQHandler+0x73a>
 8010928:	2220      	movs	r2, #32
 801092a:	e7da      	b.n	80108e2 <HAL_DMA_IRQHandler+0x73a>
 801092c:	2280      	movs	r2, #128	; 0x80
 801092e:	0092      	lsls	r2, r2, #2
 8010930:	e7d7      	b.n	80108e2 <HAL_DMA_IRQHandler+0x73a>
 8010932:	4a22      	ldr	r2, [pc, #136]	; (80109bc <HAL_DMA_IRQHandler+0x814>)
 8010934:	4293      	cmp	r3, r2
 8010936:	d023      	beq.n	8010980 <HAL_DMA_IRQHandler+0x7d8>
 8010938:	4a21      	ldr	r2, [pc, #132]	; (80109c0 <HAL_DMA_IRQHandler+0x818>)
 801093a:	4293      	cmp	r3, r2
 801093c:	d024      	beq.n	8010988 <HAL_DMA_IRQHandler+0x7e0>
 801093e:	4a21      	ldr	r2, [pc, #132]	; (80109c4 <HAL_DMA_IRQHandler+0x81c>)
 8010940:	4293      	cmp	r3, r2
 8010942:	d023      	beq.n	801098c <HAL_DMA_IRQHandler+0x7e4>
 8010944:	4a20      	ldr	r2, [pc, #128]	; (80109c8 <HAL_DMA_IRQHandler+0x820>)
 8010946:	4293      	cmp	r3, r2
 8010948:	d023      	beq.n	8010992 <HAL_DMA_IRQHandler+0x7ea>
 801094a:	4a20      	ldr	r2, [pc, #128]	; (80109cc <HAL_DMA_IRQHandler+0x824>)
 801094c:	4293      	cmp	r3, r2
 801094e:	d023      	beq.n	8010998 <HAL_DMA_IRQHandler+0x7f0>
 8010950:	4a1f      	ldr	r2, [pc, #124]	; (80109d0 <HAL_DMA_IRQHandler+0x828>)
 8010952:	4293      	cmp	r3, r2
 8010954:	d023      	beq.n	801099e <HAL_DMA_IRQHandler+0x7f6>
 8010956:	4a18      	ldr	r2, [pc, #96]	; (80109b8 <HAL_DMA_IRQHandler+0x810>)
 8010958:	4293      	cmp	r3, r2
 801095a:	d023      	beq.n	80109a4 <HAL_DMA_IRQHandler+0x7fc>
 801095c:	4a1d      	ldr	r2, [pc, #116]	; (80109d4 <HAL_DMA_IRQHandler+0x82c>)
 801095e:	4293      	cmp	r3, r2
 8010960:	d023      	beq.n	80109aa <HAL_DMA_IRQHandler+0x802>
 8010962:	4a1d      	ldr	r2, [pc, #116]	; (80109d8 <HAL_DMA_IRQHandler+0x830>)
 8010964:	4293      	cmp	r3, r2
 8010966:	d022      	beq.n	80109ae <HAL_DMA_IRQHandler+0x806>
 8010968:	4a1c      	ldr	r2, [pc, #112]	; (80109dc <HAL_DMA_IRQHandler+0x834>)
 801096a:	4293      	cmp	r3, r2
 801096c:	d021      	beq.n	80109b2 <HAL_DMA_IRQHandler+0x80a>
 801096e:	4a1c      	ldr	r2, [pc, #112]	; (80109e0 <HAL_DMA_IRQHandler+0x838>)
 8010970:	4293      	cmp	r3, r2
 8010972:	d002      	beq.n	801097a <HAL_DMA_IRQHandler+0x7d2>
 8010974:	2280      	movs	r2, #128	; 0x80
 8010976:	0292      	lsls	r2, r2, #10
 8010978:	e003      	b.n	8010982 <HAL_DMA_IRQHandler+0x7da>
 801097a:	2280      	movs	r2, #128	; 0x80
 801097c:	0192      	lsls	r2, r2, #6
 801097e:	e000      	b.n	8010982 <HAL_DMA_IRQHandler+0x7da>
 8010980:	2202      	movs	r2, #2
 8010982:	4b18      	ldr	r3, [pc, #96]	; (80109e4 <HAL_DMA_IRQHandler+0x83c>)
 8010984:	605a      	str	r2, [r3, #4]
 8010986:	e7ae      	b.n	80108e6 <HAL_DMA_IRQHandler+0x73e>
 8010988:	2220      	movs	r2, #32
 801098a:	e7fa      	b.n	8010982 <HAL_DMA_IRQHandler+0x7da>
 801098c:	2280      	movs	r2, #128	; 0x80
 801098e:	0092      	lsls	r2, r2, #2
 8010990:	e7f7      	b.n	8010982 <HAL_DMA_IRQHandler+0x7da>
 8010992:	2280      	movs	r2, #128	; 0x80
 8010994:	0192      	lsls	r2, r2, #6
 8010996:	e7f4      	b.n	8010982 <HAL_DMA_IRQHandler+0x7da>
 8010998:	2280      	movs	r2, #128	; 0x80
 801099a:	0292      	lsls	r2, r2, #10
 801099c:	e7f1      	b.n	8010982 <HAL_DMA_IRQHandler+0x7da>
 801099e:	2280      	movs	r2, #128	; 0x80
 80109a0:	0392      	lsls	r2, r2, #14
 80109a2:	e7ee      	b.n	8010982 <HAL_DMA_IRQHandler+0x7da>
 80109a4:	2280      	movs	r2, #128	; 0x80
 80109a6:	0492      	lsls	r2, r2, #18
 80109a8:	e7eb      	b.n	8010982 <HAL_DMA_IRQHandler+0x7da>
 80109aa:	2202      	movs	r2, #2
 80109ac:	e7e9      	b.n	8010982 <HAL_DMA_IRQHandler+0x7da>
 80109ae:	2220      	movs	r2, #32
 80109b0:	e7e7      	b.n	8010982 <HAL_DMA_IRQHandler+0x7da>
 80109b2:	2280      	movs	r2, #128	; 0x80
 80109b4:	0092      	lsls	r2, r2, #2
 80109b6:	e7e4      	b.n	8010982 <HAL_DMA_IRQHandler+0x7da>
 80109b8:	40020080 	.word	0x40020080
 80109bc:	40020008 	.word	0x40020008
 80109c0:	4002001c 	.word	0x4002001c
 80109c4:	40020030 	.word	0x40020030
 80109c8:	40020044 	.word	0x40020044
 80109cc:	40020058 	.word	0x40020058
 80109d0:	4002006c 	.word	0x4002006c
 80109d4:	40020408 	.word	0x40020408
 80109d8:	4002041c 	.word	0x4002041c
 80109dc:	40020430 	.word	0x40020430
 80109e0:	40020444 	.word	0x40020444
 80109e4:	40020000 	.word	0x40020000
 80109e8:	40020400 	.word	0x40020400

080109ec <FLASH_Program_HalfWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80109ec:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80109ee:	4b05      	ldr	r3, [pc, #20]	; (8010a04 <FLASH_Program_HalfWord+0x18>)
 80109f0:	2200      	movs	r2, #0
 80109f2:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80109f4:	4a04      	ldr	r2, [pc, #16]	; (8010a08 <FLASH_Program_HalfWord+0x1c>)
 80109f6:	6913      	ldr	r3, [r2, #16]
 80109f8:	2401      	movs	r4, #1
 80109fa:	4323      	orrs	r3, r4
 80109fc:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80109fe:	8001      	strh	r1, [r0, #0]
}
 8010a00:	bd10      	pop	{r4, pc}
 8010a02:	46c0      	nop			; (mov r8, r8)
 8010a04:	20006dd0 	.word	0x20006dd0
 8010a08:	40022000 	.word	0x40022000

08010a0c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010a0c:	4b0a      	ldr	r3, [pc, #40]	; (8010a38 <FLASH_SetErrorCode+0x2c>)
 8010a0e:	68db      	ldr	r3, [r3, #12]
 8010a10:	06db      	lsls	r3, r3, #27
 8010a12:	d504      	bpl.n	8010a1e <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010a14:	4a09      	ldr	r2, [pc, #36]	; (8010a3c <FLASH_SetErrorCode+0x30>)
 8010a16:	69d3      	ldr	r3, [r2, #28]
 8010a18:	2102      	movs	r1, #2
 8010a1a:	430b      	orrs	r3, r1
 8010a1c:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010a1e:	4b06      	ldr	r3, [pc, #24]	; (8010a38 <FLASH_SetErrorCode+0x2c>)
 8010a20:	68db      	ldr	r3, [r3, #12]
 8010a22:	075b      	lsls	r3, r3, #29
 8010a24:	d504      	bpl.n	8010a30 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8010a26:	4a05      	ldr	r2, [pc, #20]	; (8010a3c <FLASH_SetErrorCode+0x30>)
 8010a28:	69d3      	ldr	r3, [r2, #28]
 8010a2a:	2101      	movs	r1, #1
 8010a2c:	430b      	orrs	r3, r1
 8010a2e:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010a30:	4b01      	ldr	r3, [pc, #4]	; (8010a38 <FLASH_SetErrorCode+0x2c>)
 8010a32:	2214      	movs	r2, #20
 8010a34:	60da      	str	r2, [r3, #12]
}  
 8010a36:	4770      	bx	lr
 8010a38:	40022000 	.word	0x40022000
 8010a3c:	20006dd0 	.word	0x20006dd0

08010a40 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010a40:	4b06      	ldr	r3, [pc, #24]	; (8010a5c <HAL_FLASH_Unlock+0x1c>)
 8010a42:	691b      	ldr	r3, [r3, #16]
 8010a44:	061b      	lsls	r3, r3, #24
 8010a46:	d506      	bpl.n	8010a56 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010a48:	4b04      	ldr	r3, [pc, #16]	; (8010a5c <HAL_FLASH_Unlock+0x1c>)
 8010a4a:	4a05      	ldr	r2, [pc, #20]	; (8010a60 <HAL_FLASH_Unlock+0x20>)
 8010a4c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010a4e:	4a05      	ldr	r2, [pc, #20]	; (8010a64 <HAL_FLASH_Unlock+0x24>)
 8010a50:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8010a52:	2000      	movs	r0, #0
}
 8010a54:	4770      	bx	lr
    return HAL_ERROR;
 8010a56:	2001      	movs	r0, #1
 8010a58:	e7fc      	b.n	8010a54 <HAL_FLASH_Unlock+0x14>
 8010a5a:	46c0      	nop			; (mov r8, r8)
 8010a5c:	40022000 	.word	0x40022000
 8010a60:	45670123 	.word	0x45670123
 8010a64:	cdef89ab 	.word	0xcdef89ab

08010a68 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010a68:	4a03      	ldr	r2, [pc, #12]	; (8010a78 <HAL_FLASH_Lock+0x10>)
 8010a6a:	6913      	ldr	r3, [r2, #16]
 8010a6c:	2180      	movs	r1, #128	; 0x80
 8010a6e:	430b      	orrs	r3, r1
 8010a70:	6113      	str	r3, [r2, #16]
}
 8010a72:	2000      	movs	r0, #0
 8010a74:	4770      	bx	lr
 8010a76:	46c0      	nop			; (mov r8, r8)
 8010a78:	40022000 	.word	0x40022000

08010a7c <FLASH_WaitForLastOperation>:
{
 8010a7c:	b570      	push	{r4, r5, r6, lr}
 8010a7e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8010a80:	f7fe fe84 	bl	800f78c <HAL_GetTick>
 8010a84:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010a86:	4b13      	ldr	r3, [pc, #76]	; (8010ad4 <FLASH_WaitForLastOperation+0x58>)
 8010a88:	68db      	ldr	r3, [r3, #12]
 8010a8a:	07db      	lsls	r3, r3, #31
 8010a8c:	d50a      	bpl.n	8010aa4 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8010a8e:	1c63      	adds	r3, r4, #1
 8010a90:	d0f9      	beq.n	8010a86 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010a92:	2c00      	cmp	r4, #0
 8010a94:	d019      	beq.n	8010aca <FLASH_WaitForLastOperation+0x4e>
 8010a96:	f7fe fe79 	bl	800f78c <HAL_GetTick>
 8010a9a:	1b40      	subs	r0, r0, r5
 8010a9c:	42a0      	cmp	r0, r4
 8010a9e:	d9f2      	bls.n	8010a86 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8010aa0:	2003      	movs	r0, #3
 8010aa2:	e011      	b.n	8010ac8 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8010aa4:	4b0b      	ldr	r3, [pc, #44]	; (8010ad4 <FLASH_WaitForLastOperation+0x58>)
 8010aa6:	68db      	ldr	r3, [r3, #12]
 8010aa8:	069b      	lsls	r3, r3, #26
 8010aaa:	d502      	bpl.n	8010ab2 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010aac:	4b09      	ldr	r3, [pc, #36]	; (8010ad4 <FLASH_WaitForLastOperation+0x58>)
 8010aae:	2220      	movs	r2, #32
 8010ab0:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010ab2:	4b08      	ldr	r3, [pc, #32]	; (8010ad4 <FLASH_WaitForLastOperation+0x58>)
 8010ab4:	68db      	ldr	r3, [r3, #12]
 8010ab6:	06db      	lsls	r3, r3, #27
 8010ab8:	d403      	bmi.n	8010ac2 <FLASH_WaitForLastOperation+0x46>
 8010aba:	4b06      	ldr	r3, [pc, #24]	; (8010ad4 <FLASH_WaitForLastOperation+0x58>)
 8010abc:	68db      	ldr	r3, [r3, #12]
 8010abe:	075b      	lsls	r3, r3, #29
 8010ac0:	d505      	bpl.n	8010ace <FLASH_WaitForLastOperation+0x52>
    FLASH_SetErrorCode();
 8010ac2:	f7ff ffa3 	bl	8010a0c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010ac6:	2001      	movs	r0, #1
}
 8010ac8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 8010aca:	2003      	movs	r0, #3
 8010acc:	e7fc      	b.n	8010ac8 <FLASH_WaitForLastOperation+0x4c>
  return HAL_OK;
 8010ace:	2000      	movs	r0, #0
 8010ad0:	e7fa      	b.n	8010ac8 <FLASH_WaitForLastOperation+0x4c>
 8010ad2:	46c0      	nop			; (mov r8, r8)
 8010ad4:	40022000 	.word	0x40022000

08010ad8 <HAL_FLASH_Program>:
{
 8010ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ada:	46c6      	mov	lr, r8
 8010adc:	b500      	push	{lr}
 8010ade:	0004      	movs	r4, r0
 8010ae0:	000d      	movs	r5, r1
 8010ae2:	4690      	mov	r8, r2
 8010ae4:	001e      	movs	r6, r3
  __HAL_LOCK(&pFlash);
 8010ae6:	4b21      	ldr	r3, [pc, #132]	; (8010b6c <HAL_FLASH_Program+0x94>)
 8010ae8:	7e1b      	ldrb	r3, [r3, #24]
 8010aea:	2b01      	cmp	r3, #1
 8010aec:	d03b      	beq.n	8010b66 <HAL_FLASH_Program+0x8e>
 8010aee:	4b1f      	ldr	r3, [pc, #124]	; (8010b6c <HAL_FLASH_Program+0x94>)
 8010af0:	2201      	movs	r2, #1
 8010af2:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010af4:	481e      	ldr	r0, [pc, #120]	; (8010b70 <HAL_FLASH_Program+0x98>)
 8010af6:	f7ff ffc1 	bl	8010a7c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8010afa:	2800      	cmp	r0, #0
 8010afc:	d12d      	bne.n	8010b5a <HAL_FLASH_Program+0x82>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010afe:	2c01      	cmp	r4, #1
 8010b00:	d006      	beq.n	8010b10 <HAL_FLASH_Program+0x38>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8010b02:	2c02      	cmp	r4, #2
 8010b04:	d002      	beq.n	8010b0c <HAL_FLASH_Program+0x34>
      nbiterations = 4;
 8010b06:	2704      	movs	r7, #4
    for (index = 0; index < nbiterations; index++)
 8010b08:	2400      	movs	r4, #0
 8010b0a:	e01b      	b.n	8010b44 <HAL_FLASH_Program+0x6c>
      nbiterations = 2;
 8010b0c:	2702      	movs	r7, #2
 8010b0e:	e7fb      	b.n	8010b08 <HAL_FLASH_Program+0x30>
      nbiterations = 1;
 8010b10:	2701      	movs	r7, #1
 8010b12:	e7f9      	b.n	8010b08 <HAL_FLASH_Program+0x30>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010b14:	2220      	movs	r2, #32
 8010b16:	1ad2      	subs	r2, r2, r3
 8010b18:	0031      	movs	r1, r6
 8010b1a:	4091      	lsls	r1, r2
 8010b1c:	000a      	movs	r2, r1
 8010b1e:	4641      	mov	r1, r8
 8010b20:	40d9      	lsrs	r1, r3
 8010b22:	4311      	orrs	r1, r2
 8010b24:	b289      	uxth	r1, r1
 8010b26:	1940      	adds	r0, r0, r5
 8010b28:	f7ff ff60 	bl	80109ec <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010b2c:	4810      	ldr	r0, [pc, #64]	; (8010b70 <HAL_FLASH_Program+0x98>)
 8010b2e:	f7ff ffa5 	bl	8010a7c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8010b32:	4a10      	ldr	r2, [pc, #64]	; (8010b74 <HAL_FLASH_Program+0x9c>)
 8010b34:	6913      	ldr	r3, [r2, #16]
 8010b36:	2101      	movs	r1, #1
 8010b38:	438b      	bics	r3, r1
 8010b3a:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	d10c      	bne.n	8010b5a <HAL_FLASH_Program+0x82>
    for (index = 0; index < nbiterations; index++)
 8010b40:	3401      	adds	r4, #1
 8010b42:	b2e4      	uxtb	r4, r4
 8010b44:	42bc      	cmp	r4, r7
 8010b46:	d208      	bcs.n	8010b5a <HAL_FLASH_Program+0x82>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010b48:	0060      	lsls	r0, r4, #1
 8010b4a:	0123      	lsls	r3, r4, #4
 8010b4c:	2220      	movs	r2, #32
 8010b4e:	4252      	negs	r2, r2
 8010b50:	189a      	adds	r2, r3, r2
 8010b52:	d4df      	bmi.n	8010b14 <HAL_FLASH_Program+0x3c>
 8010b54:	0031      	movs	r1, r6
 8010b56:	40d1      	lsrs	r1, r2
 8010b58:	e7e4      	b.n	8010b24 <HAL_FLASH_Program+0x4c>
  __HAL_UNLOCK(&pFlash);
 8010b5a:	4b04      	ldr	r3, [pc, #16]	; (8010b6c <HAL_FLASH_Program+0x94>)
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	761a      	strb	r2, [r3, #24]
}
 8010b60:	bc04      	pop	{r2}
 8010b62:	4690      	mov	r8, r2
 8010b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8010b66:	2002      	movs	r0, #2
 8010b68:	e7fa      	b.n	8010b60 <HAL_FLASH_Program+0x88>
 8010b6a:	46c0      	nop			; (mov r8, r8)
 8010b6c:	20006dd0 	.word	0x20006dd0
 8010b70:	0000c350 	.word	0x0000c350
 8010b74:	40022000 	.word	0x40022000

08010b78 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010b78:	4b06      	ldr	r3, [pc, #24]	; (8010b94 <FLASH_MassErase+0x1c>)
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010b7e:	4b06      	ldr	r3, [pc, #24]	; (8010b98 <FLASH_MassErase+0x20>)
 8010b80:	691a      	ldr	r2, [r3, #16]
 8010b82:	2104      	movs	r1, #4
 8010b84:	430a      	orrs	r2, r1
 8010b86:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010b88:	691a      	ldr	r2, [r3, #16]
 8010b8a:	313c      	adds	r1, #60	; 0x3c
 8010b8c:	430a      	orrs	r2, r1
 8010b8e:	611a      	str	r2, [r3, #16]
}
 8010b90:	4770      	bx	lr
 8010b92:	46c0      	nop			; (mov r8, r8)
 8010b94:	20006dd0 	.word	0x20006dd0
 8010b98:	40022000 	.word	0x40022000

08010b9c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010b9c:	4b06      	ldr	r3, [pc, #24]	; (8010bb8 <FLASH_PageErase+0x1c>)
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010ba2:	4b06      	ldr	r3, [pc, #24]	; (8010bbc <FLASH_PageErase+0x20>)
 8010ba4:	691a      	ldr	r2, [r3, #16]
 8010ba6:	2102      	movs	r1, #2
 8010ba8:	430a      	orrs	r2, r1
 8010baa:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010bac:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010bae:	691a      	ldr	r2, [r3, #16]
 8010bb0:	313e      	adds	r1, #62	; 0x3e
 8010bb2:	430a      	orrs	r2, r1
 8010bb4:	611a      	str	r2, [r3, #16]
}
 8010bb6:	4770      	bx	lr
 8010bb8:	20006dd0 	.word	0x20006dd0
 8010bbc:	40022000 	.word	0x40022000

08010bc0 <HAL_FLASHEx_Erase>:
{
 8010bc0:	b570      	push	{r4, r5, r6, lr}
 8010bc2:	0005      	movs	r5, r0
 8010bc4:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8010bc6:	4b24      	ldr	r3, [pc, #144]	; (8010c58 <HAL_FLASHEx_Erase+0x98>)
 8010bc8:	7e1b      	ldrb	r3, [r3, #24]
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d041      	beq.n	8010c52 <HAL_FLASHEx_Erase+0x92>
 8010bce:	4b22      	ldr	r3, [pc, #136]	; (8010c58 <HAL_FLASHEx_Erase+0x98>)
 8010bd0:	2201      	movs	r2, #1
 8010bd2:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010bd4:	6803      	ldr	r3, [r0, #0]
 8010bd6:	2b01      	cmp	r3, #1
 8010bd8:	d022      	beq.n	8010c20 <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010bda:	4820      	ldr	r0, [pc, #128]	; (8010c5c <HAL_FLASHEx_Erase+0x9c>)
 8010bdc:	f7ff ff4e 	bl	8010a7c <FLASH_WaitForLastOperation>
 8010be0:	2800      	cmp	r0, #0
 8010be2:	d131      	bne.n	8010c48 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFF;
 8010be4:	2301      	movs	r3, #1
 8010be6:	425b      	negs	r3, r3
 8010be8:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8010bea:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010bec:	3001      	adds	r0, #1
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010bee:	68ab      	ldr	r3, [r5, #8]
 8010bf0:	02db      	lsls	r3, r3, #11
 8010bf2:	686a      	ldr	r2, [r5, #4]
 8010bf4:	4694      	mov	ip, r2
 8010bf6:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8010bf8:	42a3      	cmp	r3, r4
 8010bfa:	d926      	bls.n	8010c4a <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8010bfc:	0020      	movs	r0, r4
 8010bfe:	f7ff ffcd 	bl	8010b9c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010c02:	4816      	ldr	r0, [pc, #88]	; (8010c5c <HAL_FLASHEx_Erase+0x9c>)
 8010c04:	f7ff ff3a 	bl	8010a7c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010c08:	4a15      	ldr	r2, [pc, #84]	; (8010c60 <HAL_FLASHEx_Erase+0xa0>)
 8010c0a:	6913      	ldr	r3, [r2, #16]
 8010c0c:	2102      	movs	r1, #2
 8010c0e:	438b      	bics	r3, r1
 8010c10:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8010c12:	2800      	cmp	r0, #0
 8010c14:	d116      	bne.n	8010c44 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 8010c16:	2380      	movs	r3, #128	; 0x80
 8010c18:	011b      	lsls	r3, r3, #4
 8010c1a:	469c      	mov	ip, r3
 8010c1c:	4464      	add	r4, ip
 8010c1e:	e7e6      	b.n	8010bee <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010c20:	480e      	ldr	r0, [pc, #56]	; (8010c5c <HAL_FLASHEx_Erase+0x9c>)
 8010c22:	f7ff ff2b 	bl	8010a7c <FLASH_WaitForLastOperation>
 8010c26:	2800      	cmp	r0, #0
 8010c28:	d001      	beq.n	8010c2e <HAL_FLASHEx_Erase+0x6e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010c2a:	2001      	movs	r0, #1
 8010c2c:	e00d      	b.n	8010c4a <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 8010c2e:	f7ff ffa3 	bl	8010b78 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010c32:	480a      	ldr	r0, [pc, #40]	; (8010c5c <HAL_FLASHEx_Erase+0x9c>)
 8010c34:	f7ff ff22 	bl	8010a7c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8010c38:	4a09      	ldr	r2, [pc, #36]	; (8010c60 <HAL_FLASHEx_Erase+0xa0>)
 8010c3a:	6913      	ldr	r3, [r2, #16]
 8010c3c:	2104      	movs	r1, #4
 8010c3e:	438b      	bics	r3, r1
 8010c40:	6113      	str	r3, [r2, #16]
 8010c42:	e002      	b.n	8010c4a <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8010c44:	6034      	str	r4, [r6, #0]
            break;
 8010c46:	e000      	b.n	8010c4a <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010c48:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8010c4a:	4b03      	ldr	r3, [pc, #12]	; (8010c58 <HAL_FLASHEx_Erase+0x98>)
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	761a      	strb	r2, [r3, #24]
}
 8010c50:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8010c52:	2002      	movs	r0, #2
 8010c54:	e7fc      	b.n	8010c50 <HAL_FLASHEx_Erase+0x90>
 8010c56:	46c0      	nop			; (mov r8, r8)
 8010c58:	20006dd0 	.word	0x20006dd0
 8010c5c:	0000c350 	.word	0x0000c350
 8010c60:	40022000 	.word	0x40022000

08010c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8010c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c66:	46c6      	mov	lr, r8
 8010c68:	b500      	push	{lr}
 8010c6a:	b082      	sub	sp, #8
  uint32_t position = 0x00;
 8010c6c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8010c6e:	e033      	b.n	8010cd8 <HAL_GPIO_Init+0x74>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010c70:	2604      	movs	r6, #4
 8010c72:	e000      	b.n	8010c76 <HAL_GPIO_Init+0x12>
 8010c74:	2600      	movs	r6, #0
 8010c76:	40ae      	lsls	r6, r5
 8010c78:	0035      	movs	r5, r6
 8010c7a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8010c7c:	3402      	adds	r4, #2
 8010c7e:	00a4      	lsls	r4, r4, #2
 8010c80:	4e55      	ldr	r6, [pc, #340]	; (8010dd8 <HAL_GPIO_Init+0x174>)
 8010c82:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010c84:	4c55      	ldr	r4, [pc, #340]	; (8010ddc <HAL_GPIO_Init+0x178>)
 8010c86:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010c88:	43d4      	mvns	r4, r2
 8010c8a:	002e      	movs	r6, r5
 8010c8c:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010c8e:	684f      	ldr	r7, [r1, #4]
 8010c90:	03ff      	lsls	r7, r7, #15
 8010c92:	d501      	bpl.n	8010c98 <HAL_GPIO_Init+0x34>
        {
          SET_BIT(temp, iocurrent); 
 8010c94:	4315      	orrs	r5, r2
 8010c96:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 8010c98:	4d50      	ldr	r5, [pc, #320]	; (8010ddc <HAL_GPIO_Init+0x178>)
 8010c9a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8010c9c:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8010c9e:	002e      	movs	r6, r5
 8010ca0:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010ca2:	684f      	ldr	r7, [r1, #4]
 8010ca4:	03bf      	lsls	r7, r7, #14
 8010ca6:	d501      	bpl.n	8010cac <HAL_GPIO_Init+0x48>
        { 
          SET_BIT(temp, iocurrent); 
 8010ca8:	4315      	orrs	r5, r2
 8010caa:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 8010cac:	4d4b      	ldr	r5, [pc, #300]	; (8010ddc <HAL_GPIO_Init+0x178>)
 8010cae:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010cb0:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010cb2:	002e      	movs	r6, r5
 8010cb4:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010cb6:	684f      	ldr	r7, [r1, #4]
 8010cb8:	02ff      	lsls	r7, r7, #11
 8010cba:	d501      	bpl.n	8010cc0 <HAL_GPIO_Init+0x5c>
        {
          SET_BIT(temp, iocurrent); 
 8010cbc:	4315      	orrs	r5, r2
 8010cbe:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8010cc0:	4d46      	ldr	r5, [pc, #280]	; (8010ddc <HAL_GPIO_Init+0x178>)
 8010cc2:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8010cc4:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010cc6:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010cc8:	684e      	ldr	r6, [r1, #4]
 8010cca:	02b6      	lsls	r6, r6, #10
 8010ccc:	d501      	bpl.n	8010cd2 <HAL_GPIO_Init+0x6e>
        {
          SET_BIT(temp, iocurrent); 
 8010cce:	432a      	orrs	r2, r5
 8010cd0:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8010cd2:	4a42      	ldr	r2, [pc, #264]	; (8010ddc <HAL_GPIO_Init+0x178>)
 8010cd4:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8010cd6:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8010cd8:	680a      	ldr	r2, [r1, #0]
 8010cda:	0014      	movs	r4, r2
 8010cdc:	40dc      	lsrs	r4, r3
 8010cde:	d076      	beq.n	8010dce <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010ce0:	2401      	movs	r4, #1
 8010ce2:	409c      	lsls	r4, r3
 8010ce4:	4022      	ands	r2, r4
    if(iocurrent)
 8010ce6:	d0f6      	beq.n	8010cd6 <HAL_GPIO_Init+0x72>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010ce8:	684c      	ldr	r4, [r1, #4]
 8010cea:	2c02      	cmp	r4, #2
 8010cec:	d001      	beq.n	8010cf2 <HAL_GPIO_Init+0x8e>
 8010cee:	2c12      	cmp	r4, #18
 8010cf0:	d10e      	bne.n	8010d10 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 8010cf2:	08dc      	lsrs	r4, r3, #3
 8010cf4:	3408      	adds	r4, #8
 8010cf6:	00a4      	lsls	r4, r4, #2
 8010cf8:	5826      	ldr	r6, [r4, r0]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010cfa:	2507      	movs	r5, #7
 8010cfc:	401d      	ands	r5, r3
 8010cfe:	00ad      	lsls	r5, r5, #2
 8010d00:	270f      	movs	r7, #15
 8010d02:	40af      	lsls	r7, r5
 8010d04:	43be      	bics	r6, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8010d06:	690f      	ldr	r7, [r1, #16]
 8010d08:	40af      	lsls	r7, r5
 8010d0a:	003d      	movs	r5, r7
 8010d0c:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3] = temp;
 8010d0e:	5025      	str	r5, [r4, r0]
      temp = GPIOx->MODER;
 8010d10:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010d12:	005e      	lsls	r6, r3, #1
 8010d14:	2403      	movs	r4, #3
 8010d16:	0025      	movs	r5, r4
 8010d18:	40b5      	lsls	r5, r6
 8010d1a:	43ed      	mvns	r5, r5
 8010d1c:	46a8      	mov	r8, r5
 8010d1e:	402f      	ands	r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010d20:	684d      	ldr	r5, [r1, #4]
 8010d22:	402c      	ands	r4, r5
 8010d24:	40b4      	lsls	r4, r6
 8010d26:	433c      	orrs	r4, r7
      GPIOx->MODER = temp;
 8010d28:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010d2a:	684c      	ldr	r4, [r1, #4]
 8010d2c:	1e67      	subs	r7, r4, #1
 8010d2e:	2f01      	cmp	r7, #1
 8010d30:	d903      	bls.n	8010d3a <HAL_GPIO_Init+0xd6>
 8010d32:	2c11      	cmp	r4, #17
 8010d34:	d001      	beq.n	8010d3a <HAL_GPIO_Init+0xd6>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010d36:	2c12      	cmp	r4, #18
 8010d38:	d111      	bne.n	8010d5e <HAL_GPIO_Init+0xfa>
        temp = GPIOx->OSPEEDR; 
 8010d3a:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010d3c:	4644      	mov	r4, r8
 8010d3e:	4027      	ands	r7, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010d40:	68cc      	ldr	r4, [r1, #12]
 8010d42:	40b4      	lsls	r4, r6
 8010d44:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8010d46:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8010d48:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010d4a:	2401      	movs	r4, #1
 8010d4c:	0025      	movs	r5, r4
 8010d4e:	409d      	lsls	r5, r3
 8010d50:	43af      	bics	r7, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8010d52:	684d      	ldr	r5, [r1, #4]
 8010d54:	092d      	lsrs	r5, r5, #4
 8010d56:	402c      	ands	r4, r5
 8010d58:	409c      	lsls	r4, r3
 8010d5a:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8010d5c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8010d5e:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010d60:	4645      	mov	r5, r8
 8010d62:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010d64:	688d      	ldr	r5, [r1, #8]
 8010d66:	40b5      	lsls	r5, r6
 8010d68:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8010d6a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010d6c:	684c      	ldr	r4, [r1, #4]
 8010d6e:	00e4      	lsls	r4, r4, #3
 8010d70:	d5b1      	bpl.n	8010cd6 <HAL_GPIO_Init+0x72>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010d72:	4d1b      	ldr	r5, [pc, #108]	; (8010de0 <HAL_GPIO_Init+0x17c>)
 8010d74:	69ae      	ldr	r6, [r5, #24]
 8010d76:	2401      	movs	r4, #1
 8010d78:	4326      	orrs	r6, r4
 8010d7a:	61ae      	str	r6, [r5, #24]
 8010d7c:	69ad      	ldr	r5, [r5, #24]
 8010d7e:	402c      	ands	r4, r5
 8010d80:	9401      	str	r4, [sp, #4]
 8010d82:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8010d84:	089c      	lsrs	r4, r3, #2
 8010d86:	1ca5      	adds	r5, r4, #2
 8010d88:	00ad      	lsls	r5, r5, #2
 8010d8a:	4e13      	ldr	r6, [pc, #76]	; (8010dd8 <HAL_GPIO_Init+0x174>)
 8010d8c:	59af      	ldr	r7, [r5, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010d8e:	2603      	movs	r6, #3
 8010d90:	401e      	ands	r6, r3
 8010d92:	00b5      	lsls	r5, r6, #2
 8010d94:	260f      	movs	r6, #15
 8010d96:	40ae      	lsls	r6, r5
 8010d98:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010d9a:	2690      	movs	r6, #144	; 0x90
 8010d9c:	05f6      	lsls	r6, r6, #23
 8010d9e:	42b0      	cmp	r0, r6
 8010da0:	d100      	bne.n	8010da4 <HAL_GPIO_Init+0x140>
 8010da2:	e767      	b.n	8010c74 <HAL_GPIO_Init+0x10>
 8010da4:	4e0f      	ldr	r6, [pc, #60]	; (8010de4 <HAL_GPIO_Init+0x180>)
 8010da6:	42b0      	cmp	r0, r6
 8010da8:	d00b      	beq.n	8010dc2 <HAL_GPIO_Init+0x15e>
 8010daa:	4e0f      	ldr	r6, [pc, #60]	; (8010de8 <HAL_GPIO_Init+0x184>)
 8010dac:	42b0      	cmp	r0, r6
 8010dae:	d00a      	beq.n	8010dc6 <HAL_GPIO_Init+0x162>
 8010db0:	4e0e      	ldr	r6, [pc, #56]	; (8010dec <HAL_GPIO_Init+0x188>)
 8010db2:	42b0      	cmp	r0, r6
 8010db4:	d009      	beq.n	8010dca <HAL_GPIO_Init+0x166>
 8010db6:	4e0e      	ldr	r6, [pc, #56]	; (8010df0 <HAL_GPIO_Init+0x18c>)
 8010db8:	42b0      	cmp	r0, r6
 8010dba:	d100      	bne.n	8010dbe <HAL_GPIO_Init+0x15a>
 8010dbc:	e758      	b.n	8010c70 <HAL_GPIO_Init+0xc>
 8010dbe:	2605      	movs	r6, #5
 8010dc0:	e759      	b.n	8010c76 <HAL_GPIO_Init+0x12>
 8010dc2:	2601      	movs	r6, #1
 8010dc4:	e757      	b.n	8010c76 <HAL_GPIO_Init+0x12>
 8010dc6:	2602      	movs	r6, #2
 8010dc8:	e755      	b.n	8010c76 <HAL_GPIO_Init+0x12>
 8010dca:	2603      	movs	r6, #3
 8010dcc:	e753      	b.n	8010c76 <HAL_GPIO_Init+0x12>
  } 
}
 8010dce:	b002      	add	sp, #8
 8010dd0:	bc04      	pop	{r2}
 8010dd2:	4690      	mov	r8, r2
 8010dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dd6:	46c0      	nop			; (mov r8, r8)
 8010dd8:	40010000 	.word	0x40010000
 8010ddc:	40010400 	.word	0x40010400
 8010de0:	40021000 	.word	0x40021000
 8010de4:	48000400 	.word	0x48000400
 8010de8:	48000800 	.word	0x48000800
 8010dec:	48000c00 	.word	0x48000c00
 8010df0:	48001000 	.word	0x48001000

08010df4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010df6:	46ce      	mov	lr, r9
 8010df8:	4647      	mov	r7, r8
 8010dfa:	b580      	push	{r7, lr}
  uint32_t position = 0x00;
 8010dfc:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8010dfe:	e006      	b.n	8010e0e <HAL_GPIO_DeInit+0x1a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010e00:	2704      	movs	r7, #4
 8010e02:	e000      	b.n	8010e06 <HAL_GPIO_DeInit+0x12>
 8010e04:	2700      	movs	r7, #0
 8010e06:	40a7      	lsls	r7, r4
 8010e08:	42af      	cmp	r7, r5
 8010e0a:	d04e      	beq.n	8010eaa <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8010e0c:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8010e0e:	000a      	movs	r2, r1
 8010e10:	40da      	lsrs	r2, r3
 8010e12:	d060      	beq.n	8010ed6 <HAL_GPIO_DeInit+0xe2>
    iocurrent = (GPIO_Pin) & (1 << position);
 8010e14:	2201      	movs	r2, #1
 8010e16:	409a      	lsls	r2, r3
 8010e18:	400a      	ands	r2, r1
    if (iocurrent)
 8010e1a:	d0f7      	beq.n	8010e0c <HAL_GPIO_DeInit+0x18>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010e1c:	6805      	ldr	r5, [r0, #0]
 8010e1e:	005e      	lsls	r6, r3, #1
 8010e20:	2403      	movs	r4, #3
 8010e22:	46a1      	mov	r9, r4
 8010e24:	0027      	movs	r7, r4
 8010e26:	40b7      	lsls	r7, r6
 8010e28:	43ff      	mvns	r7, r7
 8010e2a:	403d      	ands	r5, r7
 8010e2c:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010e2e:	08de      	lsrs	r6, r3, #3
 8010e30:	3608      	adds	r6, #8
 8010e32:	00b6      	lsls	r6, r6, #2
 8010e34:	5834      	ldr	r4, [r6, r0]
 8010e36:	46a0      	mov	r8, r4
 8010e38:	2507      	movs	r5, #7
 8010e3a:	401d      	ands	r5, r3
 8010e3c:	00ad      	lsls	r5, r5, #2
 8010e3e:	240f      	movs	r4, #15
 8010e40:	46a4      	mov	ip, r4
 8010e42:	40ac      	lsls	r4, r5
 8010e44:	0025      	movs	r5, r4
 8010e46:	4644      	mov	r4, r8
 8010e48:	43ac      	bics	r4, r5
 8010e4a:	5034      	str	r4, [r6, r0]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010e4c:	6885      	ldr	r5, [r0, #8]
 8010e4e:	403d      	ands	r5, r7
 8010e50:	6085      	str	r5, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8010e52:	6845      	ldr	r5, [r0, #4]
 8010e54:	2601      	movs	r6, #1
 8010e56:	409e      	lsls	r6, r3
 8010e58:	43b5      	bics	r5, r6
 8010e5a:	6045      	str	r5, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010e5c:	68c5      	ldr	r5, [r0, #12]
 8010e5e:	402f      	ands	r7, r5
 8010e60:	60c7      	str	r7, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8010e62:	089e      	lsrs	r6, r3, #2
 8010e64:	1cb5      	adds	r5, r6, #2
 8010e66:	00ad      	lsls	r5, r5, #2
 8010e68:	4f1d      	ldr	r7, [pc, #116]	; (8010ee0 <HAL_GPIO_DeInit+0xec>)
 8010e6a:	59ed      	ldr	r5, [r5, r7]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010e6c:	464c      	mov	r4, r9
 8010e6e:	401c      	ands	r4, r3
 8010e70:	00a4      	lsls	r4, r4, #2
 8010e72:	4667      	mov	r7, ip
 8010e74:	40a7      	lsls	r7, r4
 8010e76:	46bc      	mov	ip, r7
 8010e78:	403d      	ands	r5, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010e7a:	2790      	movs	r7, #144	; 0x90
 8010e7c:	05ff      	lsls	r7, r7, #23
 8010e7e:	42b8      	cmp	r0, r7
 8010e80:	d0c0      	beq.n	8010e04 <HAL_GPIO_DeInit+0x10>
 8010e82:	4f18      	ldr	r7, [pc, #96]	; (8010ee4 <HAL_GPIO_DeInit+0xf0>)
 8010e84:	42b8      	cmp	r0, r7
 8010e86:	d00a      	beq.n	8010e9e <HAL_GPIO_DeInit+0xaa>
 8010e88:	4f17      	ldr	r7, [pc, #92]	; (8010ee8 <HAL_GPIO_DeInit+0xf4>)
 8010e8a:	42b8      	cmp	r0, r7
 8010e8c:	d009      	beq.n	8010ea2 <HAL_GPIO_DeInit+0xae>
 8010e8e:	4f17      	ldr	r7, [pc, #92]	; (8010eec <HAL_GPIO_DeInit+0xf8>)
 8010e90:	42b8      	cmp	r0, r7
 8010e92:	d008      	beq.n	8010ea6 <HAL_GPIO_DeInit+0xb2>
 8010e94:	4f16      	ldr	r7, [pc, #88]	; (8010ef0 <HAL_GPIO_DeInit+0xfc>)
 8010e96:	42b8      	cmp	r0, r7
 8010e98:	d0b2      	beq.n	8010e00 <HAL_GPIO_DeInit+0xc>
 8010e9a:	2705      	movs	r7, #5
 8010e9c:	e7b3      	b.n	8010e06 <HAL_GPIO_DeInit+0x12>
 8010e9e:	2701      	movs	r7, #1
 8010ea0:	e7b1      	b.n	8010e06 <HAL_GPIO_DeInit+0x12>
 8010ea2:	2702      	movs	r7, #2
 8010ea4:	e7af      	b.n	8010e06 <HAL_GPIO_DeInit+0x12>
 8010ea6:	2703      	movs	r7, #3
 8010ea8:	e7ad      	b.n	8010e06 <HAL_GPIO_DeInit+0x12>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010eaa:	4f0d      	ldr	r7, [pc, #52]	; (8010ee0 <HAL_GPIO_DeInit+0xec>)
 8010eac:	1cb4      	adds	r4, r6, #2
 8010eae:	00a4      	lsls	r4, r4, #2
 8010eb0:	59e5      	ldr	r5, [r4, r7]
 8010eb2:	4666      	mov	r6, ip
 8010eb4:	43b5      	bics	r5, r6
 8010eb6:	51e5      	str	r5, [r4, r7]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8010eb8:	4c0e      	ldr	r4, [pc, #56]	; (8010ef4 <HAL_GPIO_DeInit+0x100>)
 8010eba:	6825      	ldr	r5, [r4, #0]
 8010ebc:	43d2      	mvns	r2, r2
 8010ebe:	4015      	ands	r5, r2
 8010ec0:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8010ec2:	6865      	ldr	r5, [r4, #4]
 8010ec4:	4015      	ands	r5, r2
 8010ec6:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8010ec8:	68a5      	ldr	r5, [r4, #8]
 8010eca:	4015      	ands	r5, r2
 8010ecc:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8010ece:	68e5      	ldr	r5, [r4, #12]
 8010ed0:	402a      	ands	r2, r5
 8010ed2:	60e2      	str	r2, [r4, #12]
 8010ed4:	e79a      	b.n	8010e0c <HAL_GPIO_DeInit+0x18>
  }
}
 8010ed6:	bc0c      	pop	{r2, r3}
 8010ed8:	4690      	mov	r8, r2
 8010eda:	4699      	mov	r9, r3
 8010edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ede:	46c0      	nop			; (mov r8, r8)
 8010ee0:	40010000 	.word	0x40010000
 8010ee4:	48000400 	.word	0x48000400
 8010ee8:	48000800 	.word	0x48000800
 8010eec:	48000c00 	.word	0x48000c00
 8010ef0:	48001000 	.word	0x48001000
 8010ef4:	40010400 	.word	0x40010400

08010ef8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010ef8:	6903      	ldr	r3, [r0, #16]
 8010efa:	420b      	tst	r3, r1
 8010efc:	d101      	bne.n	8010f02 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8010efe:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 8010f00:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8010f02:	2001      	movs	r0, #1
 8010f04:	e7fc      	b.n	8010f00 <HAL_GPIO_ReadPin+0x8>

08010f06 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010f06:	2a00      	cmp	r2, #0
 8010f08:	d101      	bne.n	8010f0e <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010f0a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8010f0c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010f0e:	6181      	str	r1, [r0, #24]
 8010f10:	e7fc      	b.n	8010f0c <HAL_GPIO_WritePin+0x6>

08010f12 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8010f12:	6943      	ldr	r3, [r0, #20]
 8010f14:	4059      	eors	r1, r3
 8010f16:	6141      	str	r1, [r0, #20]
}
 8010f18:	4770      	bx	lr

08010f1a <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8010f1a:	4770      	bx	lr

08010f1c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8010f1c:	4a03      	ldr	r2, [pc, #12]	; (8010f2c <HAL_PWR_EnableBkUpAccess+0x10>)
 8010f1e:	6811      	ldr	r1, [r2, #0]
 8010f20:	2380      	movs	r3, #128	; 0x80
 8010f22:	005b      	lsls	r3, r3, #1
 8010f24:	430b      	orrs	r3, r1
 8010f26:	6013      	str	r3, [r2, #0]
}
 8010f28:	4770      	bx	lr
 8010f2a:	46c0      	nop			; (mov r8, r8)
 8010f2c:	40007000 	.word	0x40007000

08010f30 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010f30:	b530      	push	{r4, r5, lr}
 8010f32:	b083      	sub	sp, #12
 8010f34:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010f36:	6803      	ldr	r3, [r0, #0]
 8010f38:	07db      	lsls	r3, r3, #31
 8010f3a:	d534      	bpl.n	8010fa6 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8010f3c:	4bc1      	ldr	r3, [pc, #772]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8010f3e:	685a      	ldr	r2, [r3, #4]
 8010f40:	230c      	movs	r3, #12
 8010f42:	4013      	ands	r3, r2
 8010f44:	2b04      	cmp	r3, #4
 8010f46:	d026      	beq.n	8010f96 <HAL_RCC_OscConfig+0x66>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8010f48:	4bbe      	ldr	r3, [pc, #760]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8010f4a:	685a      	ldr	r2, [r3, #4]
 8010f4c:	230c      	movs	r3, #12
 8010f4e:	4013      	ands	r3, r2
 8010f50:	2b08      	cmp	r3, #8
 8010f52:	d108      	bne.n	8010f66 <HAL_RCC_OscConfig+0x36>
 8010f54:	4bbb      	ldr	r3, [pc, #748]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	22c0      	movs	r2, #192	; 0xc0
 8010f5a:	0252      	lsls	r2, r2, #9
 8010f5c:	4013      	ands	r3, r2
 8010f5e:	2280      	movs	r2, #128	; 0x80
 8010f60:	0252      	lsls	r2, r2, #9
 8010f62:	4293      	cmp	r3, r2
 8010f64:	d017      	beq.n	8010f96 <HAL_RCC_OscConfig+0x66>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010f66:	4bb7      	ldr	r3, [pc, #732]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8010f68:	681a      	ldr	r2, [r3, #0]
 8010f6a:	49b7      	ldr	r1, [pc, #732]	; (8011248 <HAL_RCC_OscConfig+0x318>)
 8010f6c:	400a      	ands	r2, r1
 8010f6e:	601a      	str	r2, [r3, #0]
 8010f70:	681a      	ldr	r2, [r3, #0]
 8010f72:	49b6      	ldr	r1, [pc, #728]	; (801124c <HAL_RCC_OscConfig+0x31c>)
 8010f74:	400a      	ands	r2, r1
 8010f76:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010f78:	f7fe fc08 	bl	800f78c <HAL_GetTick>
 8010f7c:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f7e:	4bb1      	ldr	r3, [pc, #708]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	039b      	lsls	r3, r3, #14
 8010f84:	d536      	bpl.n	8010ff4 <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010f86:	f7fe fc01 	bl	800f78c <HAL_GetTick>
 8010f8a:	1b40      	subs	r0, r0, r5
 8010f8c:	2864      	cmp	r0, #100	; 0x64
 8010f8e:	d9f6      	bls.n	8010f7e <HAL_RCC_OscConfig+0x4e>
        {
          return HAL_TIMEOUT;
 8010f90:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8010f92:	b003      	add	sp, #12
 8010f94:	bd30      	pop	{r4, r5, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010f96:	4bab      	ldr	r3, [pc, #684]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	039b      	lsls	r3, r3, #14
 8010f9c:	d503      	bpl.n	8010fa6 <HAL_RCC_OscConfig+0x76>
 8010f9e:	6863      	ldr	r3, [r4, #4]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d100      	bne.n	8010fa6 <HAL_RCC_OscConfig+0x76>
 8010fa4:	e258      	b.n	8011458 <HAL_RCC_OscConfig+0x528>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010fa6:	6823      	ldr	r3, [r4, #0]
 8010fa8:	079b      	lsls	r3, r3, #30
 8010faa:	d400      	bmi.n	8010fae <HAL_RCC_OscConfig+0x7e>
 8010fac:	e088      	b.n	80110c0 <HAL_RCC_OscConfig+0x190>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8010fae:	4ba5      	ldr	r3, [pc, #660]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	220c      	movs	r2, #12
 8010fb4:	421a      	tst	r2, r3
 8010fb6:	d072      	beq.n	801109e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8010fb8:	4ba2      	ldr	r3, [pc, #648]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8010fba:	685a      	ldr	r2, [r3, #4]
 8010fbc:	230c      	movs	r3, #12
 8010fbe:	4013      	ands	r3, r2
 8010fc0:	2b08      	cmp	r3, #8
 8010fc2:	d063      	beq.n	801108c <HAL_RCC_OscConfig+0x15c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010fc4:	68e3      	ldr	r3, [r4, #12]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d100      	bne.n	8010fcc <HAL_RCC_OscConfig+0x9c>
 8010fca:	e09b      	b.n	8011104 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_ENABLE();
 8010fcc:	4a9d      	ldr	r2, [pc, #628]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8010fce:	6813      	ldr	r3, [r2, #0]
 8010fd0:	2101      	movs	r1, #1
 8010fd2:	430b      	orrs	r3, r1
 8010fd4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8010fd6:	f7fe fbd9 	bl	800f78c <HAL_GetTick>
 8010fda:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010fdc:	4b99      	ldr	r3, [pc, #612]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	079b      	lsls	r3, r3, #30
 8010fe2:	d500      	bpl.n	8010fe6 <HAL_RCC_OscConfig+0xb6>
 8010fe4:	e085      	b.n	80110f2 <HAL_RCC_OscConfig+0x1c2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010fe6:	f7fe fbd1 	bl	800f78c <HAL_GetTick>
 8010fea:	1b40      	subs	r0, r0, r5
 8010fec:	2864      	cmp	r0, #100	; 0x64
 8010fee:	d9f5      	bls.n	8010fdc <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
 8010ff0:	2003      	movs	r0, #3
 8010ff2:	e7ce      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010ff4:	6863      	ldr	r3, [r4, #4]
 8010ff6:	2b01      	cmp	r3, #1
 8010ff8:	d00b      	beq.n	8011012 <HAL_RCC_OscConfig+0xe2>
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d120      	bne.n	8011040 <HAL_RCC_OscConfig+0x110>
 8010ffe:	4b91      	ldr	r3, [pc, #580]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8011000:	681a      	ldr	r2, [r3, #0]
 8011002:	4991      	ldr	r1, [pc, #580]	; (8011248 <HAL_RCC_OscConfig+0x318>)
 8011004:	400a      	ands	r2, r1
 8011006:	601a      	str	r2, [r3, #0]
 8011008:	681a      	ldr	r2, [r3, #0]
 801100a:	4990      	ldr	r1, [pc, #576]	; (801124c <HAL_RCC_OscConfig+0x31c>)
 801100c:	400a      	ands	r2, r1
 801100e:	601a      	str	r2, [r3, #0]
 8011010:	e005      	b.n	801101e <HAL_RCC_OscConfig+0xee>
 8011012:	4a8c      	ldr	r2, [pc, #560]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8011014:	6811      	ldr	r1, [r2, #0]
 8011016:	2380      	movs	r3, #128	; 0x80
 8011018:	025b      	lsls	r3, r3, #9
 801101a:	430b      	orrs	r3, r1
 801101c:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801101e:	6863      	ldr	r3, [r4, #4]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d025      	beq.n	8011070 <HAL_RCC_OscConfig+0x140>
        tickstart = HAL_GetTick();
 8011024:	f7fe fbb2 	bl	800f78c <HAL_GetTick>
 8011028:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801102a:	4b86      	ldr	r3, [pc, #536]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	039b      	lsls	r3, r3, #14
 8011030:	d4b9      	bmi.n	8010fa6 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011032:	f7fe fbab 	bl	800f78c <HAL_GetTick>
 8011036:	1b40      	subs	r0, r0, r5
 8011038:	2864      	cmp	r0, #100	; 0x64
 801103a:	d9f6      	bls.n	801102a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 801103c:	2003      	movs	r0, #3
 801103e:	e7a8      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011040:	2b05      	cmp	r3, #5
 8011042:	d009      	beq.n	8011058 <HAL_RCC_OscConfig+0x128>
 8011044:	4b7f      	ldr	r3, [pc, #508]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	497f      	ldr	r1, [pc, #508]	; (8011248 <HAL_RCC_OscConfig+0x318>)
 801104a:	400a      	ands	r2, r1
 801104c:	601a      	str	r2, [r3, #0]
 801104e:	681a      	ldr	r2, [r3, #0]
 8011050:	497e      	ldr	r1, [pc, #504]	; (801124c <HAL_RCC_OscConfig+0x31c>)
 8011052:	400a      	ands	r2, r1
 8011054:	601a      	str	r2, [r3, #0]
 8011056:	e7e2      	b.n	801101e <HAL_RCC_OscConfig+0xee>
 8011058:	4b7a      	ldr	r3, [pc, #488]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 801105a:	6819      	ldr	r1, [r3, #0]
 801105c:	2280      	movs	r2, #128	; 0x80
 801105e:	02d2      	lsls	r2, r2, #11
 8011060:	430a      	orrs	r2, r1
 8011062:	601a      	str	r2, [r3, #0]
 8011064:	6819      	ldr	r1, [r3, #0]
 8011066:	2280      	movs	r2, #128	; 0x80
 8011068:	0252      	lsls	r2, r2, #9
 801106a:	430a      	orrs	r2, r1
 801106c:	601a      	str	r2, [r3, #0]
 801106e:	e7d6      	b.n	801101e <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8011070:	f7fe fb8c 	bl	800f78c <HAL_GetTick>
 8011074:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011076:	4b73      	ldr	r3, [pc, #460]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	039b      	lsls	r3, r3, #14
 801107c:	d593      	bpl.n	8010fa6 <HAL_RCC_OscConfig+0x76>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801107e:	f7fe fb85 	bl	800f78c <HAL_GetTick>
 8011082:	1b40      	subs	r0, r0, r5
 8011084:	2864      	cmp	r0, #100	; 0x64
 8011086:	d9f6      	bls.n	8011076 <HAL_RCC_OscConfig+0x146>
            return HAL_TIMEOUT;
 8011088:	2003      	movs	r0, #3
 801108a:	e782      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801108c:	4b6d      	ldr	r3, [pc, #436]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 801108e:	685b      	ldr	r3, [r3, #4]
 8011090:	22c0      	movs	r2, #192	; 0xc0
 8011092:	0252      	lsls	r2, r2, #9
 8011094:	4013      	ands	r3, r2
 8011096:	2280      	movs	r2, #128	; 0x80
 8011098:	0212      	lsls	r2, r2, #8
 801109a:	4293      	cmp	r3, r2
 801109c:	d192      	bne.n	8010fc4 <HAL_RCC_OscConfig+0x94>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801109e:	4b69      	ldr	r3, [pc, #420]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	079b      	lsls	r3, r3, #30
 80110a4:	d504      	bpl.n	80110b0 <HAL_RCC_OscConfig+0x180>
 80110a6:	68e3      	ldr	r3, [r4, #12]
 80110a8:	2b01      	cmp	r3, #1
 80110aa:	d001      	beq.n	80110b0 <HAL_RCC_OscConfig+0x180>
        return HAL_ERROR;
 80110ac:	2001      	movs	r0, #1
 80110ae:	e770      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80110b0:	4964      	ldr	r1, [pc, #400]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 80110b2:	680b      	ldr	r3, [r1, #0]
 80110b4:	22f8      	movs	r2, #248	; 0xf8
 80110b6:	4393      	bics	r3, r2
 80110b8:	6922      	ldr	r2, [r4, #16]
 80110ba:	00d2      	lsls	r2, r2, #3
 80110bc:	4313      	orrs	r3, r2
 80110be:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80110c0:	6823      	ldr	r3, [r4, #0]
 80110c2:	071b      	lsls	r3, r3, #28
 80110c4:	d544      	bpl.n	8011150 <HAL_RCC_OscConfig+0x220>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80110c6:	6a23      	ldr	r3, [r4, #32]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d02e      	beq.n	801112a <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 80110cc:	4a5d      	ldr	r2, [pc, #372]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 80110ce:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80110d0:	2101      	movs	r1, #1
 80110d2:	430b      	orrs	r3, r1
 80110d4:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 80110d6:	f7fe fb59 	bl	800f78c <HAL_GetTick>
 80110da:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80110dc:	4b59      	ldr	r3, [pc, #356]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 80110de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e0:	079b      	lsls	r3, r3, #30
 80110e2:	d435      	bmi.n	8011150 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80110e4:	f7fe fb52 	bl	800f78c <HAL_GetTick>
 80110e8:	1b40      	subs	r0, r0, r5
 80110ea:	2864      	cmp	r0, #100	; 0x64
 80110ec:	d9f6      	bls.n	80110dc <HAL_RCC_OscConfig+0x1ac>
          return HAL_TIMEOUT;
 80110ee:	2003      	movs	r0, #3
 80110f0:	e74f      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80110f2:	4954      	ldr	r1, [pc, #336]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 80110f4:	680b      	ldr	r3, [r1, #0]
 80110f6:	22f8      	movs	r2, #248	; 0xf8
 80110f8:	4393      	bics	r3, r2
 80110fa:	6922      	ldr	r2, [r4, #16]
 80110fc:	00d2      	lsls	r2, r2, #3
 80110fe:	4313      	orrs	r3, r2
 8011100:	600b      	str	r3, [r1, #0]
 8011102:	e7dd      	b.n	80110c0 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_DISABLE();
 8011104:	4a4f      	ldr	r2, [pc, #316]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8011106:	6813      	ldr	r3, [r2, #0]
 8011108:	2101      	movs	r1, #1
 801110a:	438b      	bics	r3, r1
 801110c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801110e:	f7fe fb3d 	bl	800f78c <HAL_GetTick>
 8011112:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011114:	4b4b      	ldr	r3, [pc, #300]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	079b      	lsls	r3, r3, #30
 801111a:	d5d1      	bpl.n	80110c0 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801111c:	f7fe fb36 	bl	800f78c <HAL_GetTick>
 8011120:	1b40      	subs	r0, r0, r5
 8011122:	2864      	cmp	r0, #100	; 0x64
 8011124:	d9f6      	bls.n	8011114 <HAL_RCC_OscConfig+0x1e4>
            return HAL_TIMEOUT;
 8011126:	2003      	movs	r0, #3
 8011128:	e733      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSI_DISABLE();
 801112a:	4a46      	ldr	r2, [pc, #280]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 801112c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801112e:	2101      	movs	r1, #1
 8011130:	438b      	bics	r3, r1
 8011132:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011134:	f7fe fb2a 	bl	800f78c <HAL_GetTick>
 8011138:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801113a:	4b42      	ldr	r3, [pc, #264]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 801113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801113e:	079b      	lsls	r3, r3, #30
 8011140:	d506      	bpl.n	8011150 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011142:	f7fe fb23 	bl	800f78c <HAL_GetTick>
 8011146:	1b40      	subs	r0, r0, r5
 8011148:	2864      	cmp	r0, #100	; 0x64
 801114a:	d9f6      	bls.n	801113a <HAL_RCC_OscConfig+0x20a>
          return HAL_TIMEOUT;
 801114c:	2003      	movs	r0, #3
 801114e:	e720      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011150:	6823      	ldr	r3, [r4, #0]
 8011152:	075b      	lsls	r3, r3, #29
 8011154:	d440      	bmi.n	80111d8 <HAL_RCC_OscConfig+0x2a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8011156:	6823      	ldr	r3, [r4, #0]
 8011158:	06db      	lsls	r3, r3, #27
 801115a:	d512      	bpl.n	8011182 <HAL_RCC_OscConfig+0x252>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 801115c:	6963      	ldr	r3, [r4, #20]
 801115e:	2b01      	cmp	r3, #1
 8011160:	d100      	bne.n	8011164 <HAL_RCC_OscConfig+0x234>
 8011162:	e0c6      	b.n	80112f2 <HAL_RCC_OscConfig+0x3c2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8011164:	3305      	adds	r3, #5
 8011166:	d000      	beq.n	801116a <HAL_RCC_OscConfig+0x23a>
 8011168:	e0e3      	b.n	8011332 <HAL_RCC_OscConfig+0x402>
      __HAL_RCC_HSI14ADC_ENABLE();
 801116a:	4a36      	ldr	r2, [pc, #216]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 801116c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801116e:	2104      	movs	r1, #4
 8011170:	438b      	bics	r3, r1
 8011172:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011174:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011176:	31f4      	adds	r1, #244	; 0xf4
 8011178:	438b      	bics	r3, r1
 801117a:	69a1      	ldr	r1, [r4, #24]
 801117c:	00c9      	lsls	r1, r1, #3
 801117e:	430b      	orrs	r3, r1
 8011180:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011182:	6823      	ldr	r3, [r4, #0]
 8011184:	069b      	lsls	r3, r3, #26
 8011186:	d400      	bmi.n	801118a <HAL_RCC_OscConfig+0x25a>
 8011188:	e10f      	b.n	80113aa <HAL_RCC_OscConfig+0x47a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801118a:	4b2e      	ldr	r3, [pc, #184]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 801118c:	685a      	ldr	r2, [r3, #4]
 801118e:	230c      	movs	r3, #12
 8011190:	4013      	ands	r3, r2
 8011192:	2b0c      	cmp	r3, #12
 8011194:	d100      	bne.n	8011198 <HAL_RCC_OscConfig+0x268>
 8011196:	e0ec      	b.n	8011372 <HAL_RCC_OscConfig+0x442>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011198:	4b2a      	ldr	r3, [pc, #168]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 801119a:	685a      	ldr	r2, [r3, #4]
 801119c:	230c      	movs	r3, #12
 801119e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80111a0:	2b08      	cmp	r3, #8
 80111a2:	d100      	bne.n	80111a6 <HAL_RCC_OscConfig+0x276>
 80111a4:	e0dd      	b.n	8011362 <HAL_RCC_OscConfig+0x432>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80111a6:	69e3      	ldr	r3, [r4, #28]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d100      	bne.n	80111ae <HAL_RCC_OscConfig+0x27e>
 80111ac:	e0ea      	b.n	8011384 <HAL_RCC_OscConfig+0x454>
        __HAL_RCC_HSI48_ENABLE();
 80111ae:	4a25      	ldr	r2, [pc, #148]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 80111b0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80111b2:	2380      	movs	r3, #128	; 0x80
 80111b4:	025b      	lsls	r3, r3, #9
 80111b6:	430b      	orrs	r3, r1
 80111b8:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 80111ba:	f7fe fae7 	bl	800f78c <HAL_GetTick>
 80111be:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80111c0:	4b20      	ldr	r3, [pc, #128]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 80111c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111c4:	03db      	lsls	r3, r3, #15
 80111c6:	d500      	bpl.n	80111ca <HAL_RCC_OscConfig+0x29a>
 80111c8:	e0ef      	b.n	80113aa <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80111ca:	f7fe fadf 	bl	800f78c <HAL_GetTick>
 80111ce:	1b40      	subs	r0, r0, r5
 80111d0:	2864      	cmp	r0, #100	; 0x64
 80111d2:	d9f5      	bls.n	80111c0 <HAL_RCC_OscConfig+0x290>
            return HAL_TIMEOUT;
 80111d4:	2003      	movs	r0, #3
 80111d6:	e6dc      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_PWR_CLK_ENABLE();
 80111d8:	4a1a      	ldr	r2, [pc, #104]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 80111da:	69d1      	ldr	r1, [r2, #28]
 80111dc:	2080      	movs	r0, #128	; 0x80
 80111de:	0540      	lsls	r0, r0, #21
 80111e0:	4301      	orrs	r1, r0
 80111e2:	61d1      	str	r1, [r2, #28]
 80111e4:	69d3      	ldr	r3, [r2, #28]
 80111e6:	4003      	ands	r3, r0
 80111e8:	9301      	str	r3, [sp, #4]
 80111ea:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80111ec:	4a18      	ldr	r2, [pc, #96]	; (8011250 <HAL_RCC_OscConfig+0x320>)
 80111ee:	6811      	ldr	r1, [r2, #0]
 80111f0:	2380      	movs	r3, #128	; 0x80
 80111f2:	005b      	lsls	r3, r3, #1
 80111f4:	430b      	orrs	r3, r1
 80111f6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80111f8:	f7fe fac8 	bl	800f78c <HAL_GetTick>
 80111fc:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80111fe:	4b14      	ldr	r3, [pc, #80]	; (8011250 <HAL_RCC_OscConfig+0x320>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	05db      	lsls	r3, r3, #23
 8011204:	d406      	bmi.n	8011214 <HAL_RCC_OscConfig+0x2e4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8011206:	f7fe fac1 	bl	800f78c <HAL_GetTick>
 801120a:	1b40      	subs	r0, r0, r5
 801120c:	2864      	cmp	r0, #100	; 0x64
 801120e:	d9f6      	bls.n	80111fe <HAL_RCC_OscConfig+0x2ce>
        return HAL_TIMEOUT;
 8011210:	2003      	movs	r0, #3
 8011212:	e6be      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8011214:	4b0b      	ldr	r3, [pc, #44]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 8011216:	6a1a      	ldr	r2, [r3, #32]
 8011218:	2101      	movs	r1, #1
 801121a:	438a      	bics	r2, r1
 801121c:	621a      	str	r2, [r3, #32]
 801121e:	6a1a      	ldr	r2, [r3, #32]
 8011220:	3103      	adds	r1, #3
 8011222:	438a      	bics	r2, r1
 8011224:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 8011226:	f7fe fab1 	bl	800f78c <HAL_GetTick>
 801122a:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801122c:	4b05      	ldr	r3, [pc, #20]	; (8011244 <HAL_RCC_OscConfig+0x314>)
 801122e:	6a1b      	ldr	r3, [r3, #32]
 8011230:	079b      	lsls	r3, r3, #30
 8011232:	d511      	bpl.n	8011258 <HAL_RCC_OscConfig+0x328>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011234:	f7fe faaa 	bl	800f78c <HAL_GetTick>
 8011238:	1b40      	subs	r0, r0, r5
 801123a:	4b06      	ldr	r3, [pc, #24]	; (8011254 <HAL_RCC_OscConfig+0x324>)
 801123c:	4298      	cmp	r0, r3
 801123e:	d9f5      	bls.n	801122c <HAL_RCC_OscConfig+0x2fc>
        return HAL_TIMEOUT;
 8011240:	2003      	movs	r0, #3
 8011242:	e6a6      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
 8011244:	40021000 	.word	0x40021000
 8011248:	fffeffff 	.word	0xfffeffff
 801124c:	fffbffff 	.word	0xfffbffff
 8011250:	40007000 	.word	0x40007000
 8011254:	00001388 	.word	0x00001388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011258:	68a3      	ldr	r3, [r4, #8]
 801125a:	2b01      	cmp	r3, #1
 801125c:	d00b      	beq.n	8011276 <HAL_RCC_OscConfig+0x346>
 801125e:	2b00      	cmp	r3, #0
 8011260:	d121      	bne.n	80112a6 <HAL_RCC_OscConfig+0x376>
 8011262:	4b80      	ldr	r3, [pc, #512]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 8011264:	6a1a      	ldr	r2, [r3, #32]
 8011266:	2101      	movs	r1, #1
 8011268:	438a      	bics	r2, r1
 801126a:	621a      	str	r2, [r3, #32]
 801126c:	6a1a      	ldr	r2, [r3, #32]
 801126e:	3103      	adds	r1, #3
 8011270:	438a      	bics	r2, r1
 8011272:	621a      	str	r2, [r3, #32]
 8011274:	e004      	b.n	8011280 <HAL_RCC_OscConfig+0x350>
 8011276:	4a7b      	ldr	r2, [pc, #492]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 8011278:	6a13      	ldr	r3, [r2, #32]
 801127a:	2101      	movs	r1, #1
 801127c:	430b      	orrs	r3, r1
 801127e:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011280:	68a3      	ldr	r3, [r4, #8]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d025      	beq.n	80112d2 <HAL_RCC_OscConfig+0x3a2>
      tickstart = HAL_GetTick();
 8011286:	f7fe fa81 	bl	800f78c <HAL_GetTick>
 801128a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801128c:	4b75      	ldr	r3, [pc, #468]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 801128e:	6a1b      	ldr	r3, [r3, #32]
 8011290:	079b      	lsls	r3, r3, #30
 8011292:	d500      	bpl.n	8011296 <HAL_RCC_OscConfig+0x366>
 8011294:	e75f      	b.n	8011156 <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011296:	f7fe fa79 	bl	800f78c <HAL_GetTick>
 801129a:	1b40      	subs	r0, r0, r5
 801129c:	4b72      	ldr	r3, [pc, #456]	; (8011468 <HAL_RCC_OscConfig+0x538>)
 801129e:	4298      	cmp	r0, r3
 80112a0:	d9f4      	bls.n	801128c <HAL_RCC_OscConfig+0x35c>
          return HAL_TIMEOUT;
 80112a2:	2003      	movs	r0, #3
 80112a4:	e675      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80112a6:	2b05      	cmp	r3, #5
 80112a8:	d009      	beq.n	80112be <HAL_RCC_OscConfig+0x38e>
 80112aa:	4b6e      	ldr	r3, [pc, #440]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 80112ac:	6a1a      	ldr	r2, [r3, #32]
 80112ae:	2101      	movs	r1, #1
 80112b0:	438a      	bics	r2, r1
 80112b2:	621a      	str	r2, [r3, #32]
 80112b4:	6a1a      	ldr	r2, [r3, #32]
 80112b6:	3103      	adds	r1, #3
 80112b8:	438a      	bics	r2, r1
 80112ba:	621a      	str	r2, [r3, #32]
 80112bc:	e7e0      	b.n	8011280 <HAL_RCC_OscConfig+0x350>
 80112be:	4b69      	ldr	r3, [pc, #420]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 80112c0:	6a1a      	ldr	r2, [r3, #32]
 80112c2:	2104      	movs	r1, #4
 80112c4:	430a      	orrs	r2, r1
 80112c6:	621a      	str	r2, [r3, #32]
 80112c8:	6a1a      	ldr	r2, [r3, #32]
 80112ca:	3903      	subs	r1, #3
 80112cc:	430a      	orrs	r2, r1
 80112ce:	621a      	str	r2, [r3, #32]
 80112d0:	e7d6      	b.n	8011280 <HAL_RCC_OscConfig+0x350>
      tickstart = HAL_GetTick();
 80112d2:	f7fe fa5b 	bl	800f78c <HAL_GetTick>
 80112d6:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80112d8:	4b62      	ldr	r3, [pc, #392]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 80112da:	6a1b      	ldr	r3, [r3, #32]
 80112dc:	079b      	lsls	r3, r3, #30
 80112de:	d400      	bmi.n	80112e2 <HAL_RCC_OscConfig+0x3b2>
 80112e0:	e739      	b.n	8011156 <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80112e2:	f7fe fa53 	bl	800f78c <HAL_GetTick>
 80112e6:	1b40      	subs	r0, r0, r5
 80112e8:	4b5f      	ldr	r3, [pc, #380]	; (8011468 <HAL_RCC_OscConfig+0x538>)
 80112ea:	4298      	cmp	r0, r3
 80112ec:	d9f4      	bls.n	80112d8 <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 80112ee:	2003      	movs	r0, #3
 80112f0:	e64f      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14ADC_DISABLE();
 80112f2:	4b5c      	ldr	r3, [pc, #368]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 80112f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80112f6:	2104      	movs	r1, #4
 80112f8:	430a      	orrs	r2, r1
 80112fa:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80112fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80112fe:	3903      	subs	r1, #3
 8011300:	430a      	orrs	r2, r1
 8011302:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011304:	f7fe fa42 	bl	800f78c <HAL_GetTick>
 8011308:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 801130a:	4b56      	ldr	r3, [pc, #344]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 801130c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801130e:	079b      	lsls	r3, r3, #30
 8011310:	d406      	bmi.n	8011320 <HAL_RCC_OscConfig+0x3f0>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011312:	f7fe fa3b 	bl	800f78c <HAL_GetTick>
 8011316:	1b40      	subs	r0, r0, r5
 8011318:	2864      	cmp	r0, #100	; 0x64
 801131a:	d9f6      	bls.n	801130a <HAL_RCC_OscConfig+0x3da>
          return HAL_TIMEOUT;
 801131c:	2003      	movs	r0, #3
 801131e:	e638      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011320:	4950      	ldr	r1, [pc, #320]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 8011322:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8011324:	22f8      	movs	r2, #248	; 0xf8
 8011326:	4393      	bics	r3, r2
 8011328:	69a2      	ldr	r2, [r4, #24]
 801132a:	00d2      	lsls	r2, r2, #3
 801132c:	4313      	orrs	r3, r2
 801132e:	634b      	str	r3, [r1, #52]	; 0x34
 8011330:	e727      	b.n	8011182 <HAL_RCC_OscConfig+0x252>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011332:	4b4c      	ldr	r3, [pc, #304]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 8011334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011336:	2104      	movs	r1, #4
 8011338:	430a      	orrs	r2, r1
 801133a:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 801133c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801133e:	3903      	subs	r1, #3
 8011340:	438a      	bics	r2, r1
 8011342:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011344:	f7fe fa22 	bl	800f78c <HAL_GetTick>
 8011348:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801134a:	4b46      	ldr	r3, [pc, #280]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 801134c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801134e:	079b      	lsls	r3, r3, #30
 8011350:	d400      	bmi.n	8011354 <HAL_RCC_OscConfig+0x424>
 8011352:	e716      	b.n	8011182 <HAL_RCC_OscConfig+0x252>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011354:	f7fe fa1a 	bl	800f78c <HAL_GetTick>
 8011358:	1b40      	subs	r0, r0, r5
 801135a:	2864      	cmp	r0, #100	; 0x64
 801135c:	d9f5      	bls.n	801134a <HAL_RCC_OscConfig+0x41a>
          return HAL_TIMEOUT;
 801135e:	2003      	movs	r0, #3
 8011360:	e617      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011362:	4b40      	ldr	r3, [pc, #256]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	22c0      	movs	r2, #192	; 0xc0
 8011368:	0252      	lsls	r2, r2, #9
 801136a:	4013      	ands	r3, r2
 801136c:	4293      	cmp	r3, r2
 801136e:	d000      	beq.n	8011372 <HAL_RCC_OscConfig+0x442>
 8011370:	e719      	b.n	80111a6 <HAL_RCC_OscConfig+0x276>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8011372:	4b3c      	ldr	r3, [pc, #240]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 8011374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011376:	03db      	lsls	r3, r3, #15
 8011378:	d517      	bpl.n	80113aa <HAL_RCC_OscConfig+0x47a>
 801137a:	69e3      	ldr	r3, [r4, #28]
 801137c:	2b01      	cmp	r3, #1
 801137e:	d014      	beq.n	80113aa <HAL_RCC_OscConfig+0x47a>
        return HAL_ERROR;
 8011380:	2001      	movs	r0, #1
 8011382:	e606      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI48_DISABLE();
 8011384:	4a37      	ldr	r2, [pc, #220]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 8011386:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011388:	4938      	ldr	r1, [pc, #224]	; (801146c <HAL_RCC_OscConfig+0x53c>)
 801138a:	400b      	ands	r3, r1
 801138c:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801138e:	f7fe f9fd 	bl	800f78c <HAL_GetTick>
 8011392:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011394:	4b33      	ldr	r3, [pc, #204]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 8011396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011398:	03db      	lsls	r3, r3, #15
 801139a:	d506      	bpl.n	80113aa <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801139c:	f7fe f9f6 	bl	800f78c <HAL_GetTick>
 80113a0:	1b40      	subs	r0, r0, r5
 80113a2:	2864      	cmp	r0, #100	; 0x64
 80113a4:	d9f6      	bls.n	8011394 <HAL_RCC_OscConfig+0x464>
            return HAL_TIMEOUT;
 80113a6:	2003      	movs	r0, #3
 80113a8:	e5f3      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80113aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d055      	beq.n	801145c <HAL_RCC_OscConfig+0x52c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80113b0:	4a2c      	ldr	r2, [pc, #176]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 80113b2:	6851      	ldr	r1, [r2, #4]
 80113b4:	220c      	movs	r2, #12
 80113b6:	400a      	ands	r2, r1
 80113b8:	2a08      	cmp	r2, #8
 80113ba:	d051      	beq.n	8011460 <HAL_RCC_OscConfig+0x530>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80113bc:	2b02      	cmp	r3, #2
 80113be:	d012      	beq.n	80113e6 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_DISABLE();
 80113c0:	4a28      	ldr	r2, [pc, #160]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 80113c2:	6813      	ldr	r3, [r2, #0]
 80113c4:	492a      	ldr	r1, [pc, #168]	; (8011470 <HAL_RCC_OscConfig+0x540>)
 80113c6:	400b      	ands	r3, r1
 80113c8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80113ca:	f7fe f9df 	bl	800f78c <HAL_GetTick>
 80113ce:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80113d0:	4b24      	ldr	r3, [pc, #144]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	019b      	lsls	r3, r3, #6
 80113d6:	d53d      	bpl.n	8011454 <HAL_RCC_OscConfig+0x524>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80113d8:	f7fe f9d8 	bl	800f78c <HAL_GetTick>
 80113dc:	1b00      	subs	r0, r0, r4
 80113de:	2864      	cmp	r0, #100	; 0x64
 80113e0:	d9f6      	bls.n	80113d0 <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 80113e2:	2003      	movs	r0, #3
 80113e4:	e5d5      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_DISABLE();
 80113e6:	4a1f      	ldr	r2, [pc, #124]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 80113e8:	6813      	ldr	r3, [r2, #0]
 80113ea:	4921      	ldr	r1, [pc, #132]	; (8011470 <HAL_RCC_OscConfig+0x540>)
 80113ec:	400b      	ands	r3, r1
 80113ee:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80113f0:	f7fe f9cc 	bl	800f78c <HAL_GetTick>
 80113f4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80113f6:	4b1b      	ldr	r3, [pc, #108]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	019b      	lsls	r3, r3, #6
 80113fc:	d506      	bpl.n	801140c <HAL_RCC_OscConfig+0x4dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80113fe:	f7fe f9c5 	bl	800f78c <HAL_GetTick>
 8011402:	1b40      	subs	r0, r0, r5
 8011404:	2864      	cmp	r0, #100	; 0x64
 8011406:	d9f6      	bls.n	80113f6 <HAL_RCC_OscConfig+0x4c6>
            return HAL_TIMEOUT;
 8011408:	2003      	movs	r0, #3
 801140a:	e5c2      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801140c:	4b15      	ldr	r3, [pc, #84]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 801140e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011410:	210f      	movs	r1, #15
 8011412:	438a      	bics	r2, r1
 8011414:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011416:	430a      	orrs	r2, r1
 8011418:	62da      	str	r2, [r3, #44]	; 0x2c
 801141a:	685a      	ldr	r2, [r3, #4]
 801141c:	4915      	ldr	r1, [pc, #84]	; (8011474 <HAL_RCC_OscConfig+0x544>)
 801141e:	400a      	ands	r2, r1
 8011420:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011422:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011424:	4301      	orrs	r1, r0
 8011426:	430a      	orrs	r2, r1
 8011428:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 801142a:	6819      	ldr	r1, [r3, #0]
 801142c:	2280      	movs	r2, #128	; 0x80
 801142e:	0452      	lsls	r2, r2, #17
 8011430:	430a      	orrs	r2, r1
 8011432:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011434:	f7fe f9aa 	bl	800f78c <HAL_GetTick>
 8011438:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801143a:	4b0a      	ldr	r3, [pc, #40]	; (8011464 <HAL_RCC_OscConfig+0x534>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	019b      	lsls	r3, r3, #6
 8011440:	d406      	bmi.n	8011450 <HAL_RCC_OscConfig+0x520>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011442:	f7fe f9a3 	bl	800f78c <HAL_GetTick>
 8011446:	1b00      	subs	r0, r0, r4
 8011448:	2864      	cmp	r0, #100	; 0x64
 801144a:	d9f6      	bls.n	801143a <HAL_RCC_OscConfig+0x50a>
            return HAL_TIMEOUT;
 801144c:	2003      	movs	r0, #3
 801144e:	e5a0      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 8011450:	2000      	movs	r0, #0
 8011452:	e59e      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
 8011454:	2000      	movs	r0, #0
 8011456:	e59c      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8011458:	2001      	movs	r0, #1
 801145a:	e59a      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 801145c:	2000      	movs	r0, #0
 801145e:	e598      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
      return HAL_ERROR;
 8011460:	2001      	movs	r0, #1
 8011462:	e596      	b.n	8010f92 <HAL_RCC_OscConfig+0x62>
 8011464:	40021000 	.word	0x40021000
 8011468:	00001388 	.word	0x00001388
 801146c:	fffeffff 	.word	0xfffeffff
 8011470:	feffffff 	.word	0xfeffffff
 8011474:	ffc27fff 	.word	0xffc27fff

08011478 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011478:	b570      	push	{r4, r5, r6, lr}
 801147a:	0005      	movs	r5, r0
 801147c:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 801147e:	4b8d      	ldr	r3, [pc, #564]	; (80116b4 <HAL_RCC_ClockConfig+0x23c>)
 8011480:	681a      	ldr	r2, [r3, #0]
 8011482:	2301      	movs	r3, #1
 8011484:	4013      	ands	r3, r2
 8011486:	428b      	cmp	r3, r1
 8011488:	d300      	bcc.n	801148c <HAL_RCC_ClockConfig+0x14>
 801148a:	e082      	b.n	8011592 <HAL_RCC_ClockConfig+0x11a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801148c:	4989      	ldr	r1, [pc, #548]	; (80116b4 <HAL_RCC_ClockConfig+0x23c>)
 801148e:	680b      	ldr	r3, [r1, #0]
 8011490:	2201      	movs	r2, #1
 8011492:	4393      	bics	r3, r2
 8011494:	4323      	orrs	r3, r4
 8011496:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011498:	680b      	ldr	r3, [r1, #0]
 801149a:	401a      	ands	r2, r3
 801149c:	42a2      	cmp	r2, r4
 801149e:	d001      	beq.n	80114a4 <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 80114a0:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80114a2:	bd70      	pop	{r4, r5, r6, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80114a4:	6803      	ldr	r3, [r0, #0]
 80114a6:	079b      	lsls	r3, r3, #30
 80114a8:	d506      	bpl.n	80114b8 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80114aa:	4a83      	ldr	r2, [pc, #524]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 80114ac:	6853      	ldr	r3, [r2, #4]
 80114ae:	21f0      	movs	r1, #240	; 0xf0
 80114b0:	438b      	bics	r3, r1
 80114b2:	6881      	ldr	r1, [r0, #8]
 80114b4:	430b      	orrs	r3, r1
 80114b6:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80114b8:	682b      	ldr	r3, [r5, #0]
 80114ba:	07db      	lsls	r3, r3, #31
 80114bc:	d400      	bmi.n	80114c0 <HAL_RCC_ClockConfig+0x48>
 80114be:	e0e5      	b.n	801168c <HAL_RCC_ClockConfig+0x214>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80114c0:	686b      	ldr	r3, [r5, #4]
 80114c2:	2b01      	cmp	r3, #1
 80114c4:	d009      	beq.n	80114da <HAL_RCC_ClockConfig+0x62>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80114c6:	2b02      	cmp	r3, #2
 80114c8:	d02a      	beq.n	8011520 <HAL_RCC_ClockConfig+0xa8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80114ca:	2b03      	cmp	r3, #3
 80114cc:	d02e      	beq.n	801152c <HAL_RCC_ClockConfig+0xb4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80114ce:	4a7a      	ldr	r2, [pc, #488]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 80114d0:	6812      	ldr	r2, [r2, #0]
 80114d2:	0792      	lsls	r2, r2, #30
 80114d4:	d406      	bmi.n	80114e4 <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 80114d6:	2001      	movs	r0, #1
 80114d8:	e7e3      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80114da:	4a77      	ldr	r2, [pc, #476]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 80114dc:	6812      	ldr	r2, [r2, #0]
 80114de:	0392      	lsls	r2, r2, #14
 80114e0:	d400      	bmi.n	80114e4 <HAL_RCC_ClockConfig+0x6c>
 80114e2:	e0e2      	b.n	80116aa <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80114e4:	4974      	ldr	r1, [pc, #464]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 80114e6:	684a      	ldr	r2, [r1, #4]
 80114e8:	2003      	movs	r0, #3
 80114ea:	4382      	bics	r2, r0
 80114ec:	4313      	orrs	r3, r2
 80114ee:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 80114f0:	f7fe f94c 	bl	800f78c <HAL_GetTick>
 80114f4:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80114f6:	686b      	ldr	r3, [r5, #4]
 80114f8:	2b01      	cmp	r3, #1
 80114fa:	d01d      	beq.n	8011538 <HAL_RCC_ClockConfig+0xc0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80114fc:	2b02      	cmp	r3, #2
 80114fe:	d02a      	beq.n	8011556 <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011500:	2b03      	cmp	r3, #3
 8011502:	d037      	beq.n	8011574 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011504:	4b6c      	ldr	r3, [pc, #432]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	220c      	movs	r2, #12
 801150a:	421a      	tst	r2, r3
 801150c:	d100      	bne.n	8011510 <HAL_RCC_ClockConfig+0x98>
 801150e:	e0bd      	b.n	801168c <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011510:	f7fe f93c 	bl	800f78c <HAL_GetTick>
 8011514:	1b00      	subs	r0, r0, r4
 8011516:	4b69      	ldr	r3, [pc, #420]	; (80116bc <HAL_RCC_ClockConfig+0x244>)
 8011518:	4298      	cmp	r0, r3
 801151a:	d9f3      	bls.n	8011504 <HAL_RCC_ClockConfig+0x8c>
            return HAL_TIMEOUT;
 801151c:	2003      	movs	r0, #3
 801151e:	e7c0      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011520:	4a65      	ldr	r2, [pc, #404]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 8011522:	6812      	ldr	r2, [r2, #0]
 8011524:	0192      	lsls	r2, r2, #6
 8011526:	d4dd      	bmi.n	80114e4 <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 8011528:	2001      	movs	r0, #1
 801152a:	e7ba      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801152c:	4a62      	ldr	r2, [pc, #392]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 801152e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011530:	03d2      	lsls	r2, r2, #15
 8011532:	d4d7      	bmi.n	80114e4 <HAL_RCC_ClockConfig+0x6c>
          return HAL_ERROR;
 8011534:	2001      	movs	r0, #1
 8011536:	e7b4      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011538:	4b5f      	ldr	r3, [pc, #380]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 801153a:	685a      	ldr	r2, [r3, #4]
 801153c:	230c      	movs	r3, #12
 801153e:	4013      	ands	r3, r2
 8011540:	2b04      	cmp	r3, #4
 8011542:	d100      	bne.n	8011546 <HAL_RCC_ClockConfig+0xce>
 8011544:	e0a2      	b.n	801168c <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011546:	f7fe f921 	bl	800f78c <HAL_GetTick>
 801154a:	1b00      	subs	r0, r0, r4
 801154c:	4b5b      	ldr	r3, [pc, #364]	; (80116bc <HAL_RCC_ClockConfig+0x244>)
 801154e:	4298      	cmp	r0, r3
 8011550:	d9f2      	bls.n	8011538 <HAL_RCC_ClockConfig+0xc0>
            return HAL_TIMEOUT;
 8011552:	2003      	movs	r0, #3
 8011554:	e7a5      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011556:	4b58      	ldr	r3, [pc, #352]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 8011558:	685a      	ldr	r2, [r3, #4]
 801155a:	230c      	movs	r3, #12
 801155c:	4013      	ands	r3, r2
 801155e:	2b08      	cmp	r3, #8
 8011560:	d100      	bne.n	8011564 <HAL_RCC_ClockConfig+0xec>
 8011562:	e093      	b.n	801168c <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011564:	f7fe f912 	bl	800f78c <HAL_GetTick>
 8011568:	1b00      	subs	r0, r0, r4
 801156a:	4b54      	ldr	r3, [pc, #336]	; (80116bc <HAL_RCC_ClockConfig+0x244>)
 801156c:	4298      	cmp	r0, r3
 801156e:	d9f2      	bls.n	8011556 <HAL_RCC_ClockConfig+0xde>
            return HAL_TIMEOUT;
 8011570:	2003      	movs	r0, #3
 8011572:	e796      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011574:	4b50      	ldr	r3, [pc, #320]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 8011576:	685a      	ldr	r2, [r3, #4]
 8011578:	230c      	movs	r3, #12
 801157a:	4013      	ands	r3, r2
 801157c:	2b0c      	cmp	r3, #12
 801157e:	d100      	bne.n	8011582 <HAL_RCC_ClockConfig+0x10a>
 8011580:	e084      	b.n	801168c <HAL_RCC_ClockConfig+0x214>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011582:	f7fe f903 	bl	800f78c <HAL_GetTick>
 8011586:	1b00      	subs	r0, r0, r4
 8011588:	4b4c      	ldr	r3, [pc, #304]	; (80116bc <HAL_RCC_ClockConfig+0x244>)
 801158a:	4298      	cmp	r0, r3
 801158c:	d9f2      	bls.n	8011574 <HAL_RCC_ClockConfig+0xfc>
            return HAL_TIMEOUT;
 801158e:	2003      	movs	r0, #3
 8011590:	e787      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011592:	6803      	ldr	r3, [r0, #0]
 8011594:	079b      	lsls	r3, r3, #30
 8011596:	d506      	bpl.n	80115a6 <HAL_RCC_ClockConfig+0x12e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011598:	4a47      	ldr	r2, [pc, #284]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 801159a:	6853      	ldr	r3, [r2, #4]
 801159c:	21f0      	movs	r1, #240	; 0xf0
 801159e:	438b      	bics	r3, r1
 80115a0:	6881      	ldr	r1, [r0, #8]
 80115a2:	430b      	orrs	r3, r1
 80115a4:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80115a6:	682b      	ldr	r3, [r5, #0]
 80115a8:	07db      	lsls	r3, r3, #31
 80115aa:	d563      	bpl.n	8011674 <HAL_RCC_ClockConfig+0x1fc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80115ac:	686b      	ldr	r3, [r5, #4]
 80115ae:	2b01      	cmp	r3, #1
 80115b0:	d009      	beq.n	80115c6 <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80115b2:	2b02      	cmp	r3, #2
 80115b4:	d028      	beq.n	8011608 <HAL_RCC_ClockConfig+0x190>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80115b6:	2b03      	cmp	r3, #3
 80115b8:	d02c      	beq.n	8011614 <HAL_RCC_ClockConfig+0x19c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80115ba:	4a3f      	ldr	r2, [pc, #252]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 80115bc:	6812      	ldr	r2, [r2, #0]
 80115be:	0792      	lsls	r2, r2, #30
 80115c0:	d405      	bmi.n	80115ce <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 80115c2:	2001      	movs	r0, #1
 80115c4:	e76d      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80115c6:	4a3c      	ldr	r2, [pc, #240]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 80115c8:	6812      	ldr	r2, [r2, #0]
 80115ca:	0392      	lsls	r2, r2, #14
 80115cc:	d56f      	bpl.n	80116ae <HAL_RCC_ClockConfig+0x236>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80115ce:	493a      	ldr	r1, [pc, #232]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 80115d0:	684a      	ldr	r2, [r1, #4]
 80115d2:	2003      	movs	r0, #3
 80115d4:	4382      	bics	r2, r0
 80115d6:	4313      	orrs	r3, r2
 80115d8:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 80115da:	f7fe f8d7 	bl	800f78c <HAL_GetTick>
 80115de:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80115e0:	686b      	ldr	r3, [r5, #4]
 80115e2:	2b01      	cmp	r3, #1
 80115e4:	d01c      	beq.n	8011620 <HAL_RCC_ClockConfig+0x1a8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80115e6:	2b02      	cmp	r3, #2
 80115e8:	d028      	beq.n	801163c <HAL_RCC_ClockConfig+0x1c4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80115ea:	2b03      	cmp	r3, #3
 80115ec:	d034      	beq.n	8011658 <HAL_RCC_ClockConfig+0x1e0>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80115ee:	4b32      	ldr	r3, [pc, #200]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 80115f0:	685b      	ldr	r3, [r3, #4]
 80115f2:	220c      	movs	r2, #12
 80115f4:	421a      	tst	r2, r3
 80115f6:	d03d      	beq.n	8011674 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115f8:	f7fe f8c8 	bl	800f78c <HAL_GetTick>
 80115fc:	1b80      	subs	r0, r0, r6
 80115fe:	4b2f      	ldr	r3, [pc, #188]	; (80116bc <HAL_RCC_ClockConfig+0x244>)
 8011600:	4298      	cmp	r0, r3
 8011602:	d9f4      	bls.n	80115ee <HAL_RCC_ClockConfig+0x176>
            return HAL_TIMEOUT;
 8011604:	2003      	movs	r0, #3
 8011606:	e74c      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011608:	4a2b      	ldr	r2, [pc, #172]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 801160a:	6812      	ldr	r2, [r2, #0]
 801160c:	0192      	lsls	r2, r2, #6
 801160e:	d4de      	bmi.n	80115ce <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8011610:	2001      	movs	r0, #1
 8011612:	e746      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011614:	4a28      	ldr	r2, [pc, #160]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 8011616:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011618:	03d2      	lsls	r2, r2, #15
 801161a:	d4d8      	bmi.n	80115ce <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 801161c:	2001      	movs	r0, #1
 801161e:	e740      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011620:	4b25      	ldr	r3, [pc, #148]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 8011622:	685a      	ldr	r2, [r3, #4]
 8011624:	230c      	movs	r3, #12
 8011626:	4013      	ands	r3, r2
 8011628:	2b04      	cmp	r3, #4
 801162a:	d023      	beq.n	8011674 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801162c:	f7fe f8ae 	bl	800f78c <HAL_GetTick>
 8011630:	1b80      	subs	r0, r0, r6
 8011632:	4b22      	ldr	r3, [pc, #136]	; (80116bc <HAL_RCC_ClockConfig+0x244>)
 8011634:	4298      	cmp	r0, r3
 8011636:	d9f3      	bls.n	8011620 <HAL_RCC_ClockConfig+0x1a8>
            return HAL_TIMEOUT;
 8011638:	2003      	movs	r0, #3
 801163a:	e732      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801163c:	4b1e      	ldr	r3, [pc, #120]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 801163e:	685a      	ldr	r2, [r3, #4]
 8011640:	230c      	movs	r3, #12
 8011642:	4013      	ands	r3, r2
 8011644:	2b08      	cmp	r3, #8
 8011646:	d015      	beq.n	8011674 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011648:	f7fe f8a0 	bl	800f78c <HAL_GetTick>
 801164c:	1b80      	subs	r0, r0, r6
 801164e:	4b1b      	ldr	r3, [pc, #108]	; (80116bc <HAL_RCC_ClockConfig+0x244>)
 8011650:	4298      	cmp	r0, r3
 8011652:	d9f3      	bls.n	801163c <HAL_RCC_ClockConfig+0x1c4>
            return HAL_TIMEOUT;
 8011654:	2003      	movs	r0, #3
 8011656:	e724      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011658:	4b17      	ldr	r3, [pc, #92]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 801165a:	685a      	ldr	r2, [r3, #4]
 801165c:	230c      	movs	r3, #12
 801165e:	4013      	ands	r3, r2
 8011660:	2b0c      	cmp	r3, #12
 8011662:	d007      	beq.n	8011674 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011664:	f7fe f892 	bl	800f78c <HAL_GetTick>
 8011668:	1b80      	subs	r0, r0, r6
 801166a:	4b14      	ldr	r3, [pc, #80]	; (80116bc <HAL_RCC_ClockConfig+0x244>)
 801166c:	4298      	cmp	r0, r3
 801166e:	d9f3      	bls.n	8011658 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
 8011670:	2003      	movs	r0, #3
 8011672:	e716      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011674:	490f      	ldr	r1, [pc, #60]	; (80116b4 <HAL_RCC_ClockConfig+0x23c>)
 8011676:	680b      	ldr	r3, [r1, #0]
 8011678:	2201      	movs	r2, #1
 801167a:	4393      	bics	r3, r2
 801167c:	4323      	orrs	r3, r4
 801167e:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011680:	680b      	ldr	r3, [r1, #0]
 8011682:	401a      	ands	r2, r3
 8011684:	42a2      	cmp	r2, r4
 8011686:	d001      	beq.n	801168c <HAL_RCC_ClockConfig+0x214>
      return HAL_ERROR;
 8011688:	2001      	movs	r0, #1
 801168a:	e70a      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801168c:	682b      	ldr	r3, [r5, #0]
 801168e:	075b      	lsls	r3, r3, #29
 8011690:	d506      	bpl.n	80116a0 <HAL_RCC_ClockConfig+0x228>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8011692:	4a09      	ldr	r2, [pc, #36]	; (80116b8 <HAL_RCC_ClockConfig+0x240>)
 8011694:	6853      	ldr	r3, [r2, #4]
 8011696:	490a      	ldr	r1, [pc, #40]	; (80116c0 <HAL_RCC_ClockConfig+0x248>)
 8011698:	400b      	ands	r3, r1
 801169a:	68e9      	ldr	r1, [r5, #12]
 801169c:	430b      	orrs	r3, r1
 801169e:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 80116a0:	2000      	movs	r0, #0
 80116a2:	f7fe f849 	bl	800f738 <HAL_InitTick>
  return HAL_OK;
 80116a6:	2000      	movs	r0, #0
 80116a8:	e6fb      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
          return HAL_ERROR;
 80116aa:	2001      	movs	r0, #1
 80116ac:	e6f9      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
          return HAL_ERROR;
 80116ae:	2001      	movs	r0, #1
 80116b0:	e6f7      	b.n	80114a2 <HAL_RCC_ClockConfig+0x2a>
 80116b2:	46c0      	nop			; (mov r8, r8)
 80116b4:	40022000 	.word	0x40022000
 80116b8:	40021000 	.word	0x40021000
 80116bc:	00001388 	.word	0x00001388
 80116c0:	fffff8ff 	.word	0xfffff8ff

080116c4 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80116c4:	b530      	push	{r4, r5, lr}
 80116c6:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 80116c8:	aa04      	add	r2, sp, #16
 80116ca:	4b1f      	ldr	r3, [pc, #124]	; (8011748 <HAL_RCC_GetSysClockFreq+0x84>)
 80116cc:	0018      	movs	r0, r3
 80116ce:	c832      	ldmia	r0!, {r1, r4, r5}
 80116d0:	c232      	stmia	r2!, {r1, r4, r5}
 80116d2:	0011      	movs	r1, r2
 80116d4:	6802      	ldr	r2, [r0, #0]
 80116d6:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 80116d8:	466a      	mov	r2, sp
 80116da:	3310      	adds	r3, #16
 80116dc:	cb13      	ldmia	r3!, {r0, r1, r4}
 80116de:	c213      	stmia	r2!, {r0, r1, r4}
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 80116e4:	4b19      	ldr	r3, [pc, #100]	; (801174c <HAL_RCC_GetSysClockFreq+0x88>)
 80116e6:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80116e8:	230c      	movs	r3, #12
 80116ea:	4013      	ands	r3, r2
 80116ec:	2b08      	cmp	r3, #8
 80116ee:	d004      	beq.n	80116fa <HAL_RCC_GetSysClockFreq+0x36>
 80116f0:	2b0c      	cmp	r3, #12
 80116f2:	d026      	beq.n	8011742 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80116f4:	4816      	ldr	r0, [pc, #88]	; (8011750 <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80116f6:	b009      	add	sp, #36	; 0x24
 80116f8:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80116fa:	0c91      	lsrs	r1, r2, #18
 80116fc:	230f      	movs	r3, #15
 80116fe:	4019      	ands	r1, r3
 8011700:	a804      	add	r0, sp, #16
 8011702:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8011704:	4911      	ldr	r1, [pc, #68]	; (801174c <HAL_RCC_GetSysClockFreq+0x88>)
 8011706:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8011708:	400b      	ands	r3, r1
 801170a:	4669      	mov	r1, sp
 801170c:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 801170e:	23c0      	movs	r3, #192	; 0xc0
 8011710:	025b      	lsls	r3, r3, #9
 8011712:	401a      	ands	r2, r3
 8011714:	2380      	movs	r3, #128	; 0x80
 8011716:	025b      	lsls	r3, r3, #9
 8011718:	429a      	cmp	r2, r3
 801171a:	d008      	beq.n	801172e <HAL_RCC_GetSysClockFreq+0x6a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 801171c:	23c0      	movs	r3, #192	; 0xc0
 801171e:	025b      	lsls	r3, r3, #9
 8011720:	429a      	cmp	r2, r3
 8011722:	d009      	beq.n	8011738 <HAL_RCC_GetSysClockFreq+0x74>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8011724:	480a      	ldr	r0, [pc, #40]	; (8011750 <HAL_RCC_GetSysClockFreq+0x8c>)
 8011726:	f7ee fd13 	bl	8000150 <__udivsi3>
 801172a:	4360      	muls	r0, r4
 801172c:	e7e3      	b.n	80116f6 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 801172e:	4808      	ldr	r0, [pc, #32]	; (8011750 <HAL_RCC_GetSysClockFreq+0x8c>)
 8011730:	f7ee fd0e 	bl	8000150 <__udivsi3>
 8011734:	4360      	muls	r0, r4
 8011736:	e7de      	b.n	80116f6 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8011738:	4806      	ldr	r0, [pc, #24]	; (8011754 <HAL_RCC_GetSysClockFreq+0x90>)
 801173a:	f7ee fd09 	bl	8000150 <__udivsi3>
 801173e:	4360      	muls	r0, r4
 8011740:	e7d9      	b.n	80116f6 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSI48_VALUE;
 8011742:	4804      	ldr	r0, [pc, #16]	; (8011754 <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 8011744:	e7d7      	b.n	80116f6 <HAL_RCC_GetSysClockFreq+0x32>
 8011746:	46c0      	nop			; (mov r8, r8)
 8011748:	08017c24 	.word	0x08017c24
 801174c:	40021000 	.word	0x40021000
 8011750:	007a1200 	.word	0x007a1200
 8011754:	02dc6c00 	.word	0x02dc6c00

08011758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011758:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 801175a:	f7ff ffb3 	bl	80116c4 <HAL_RCC_GetSysClockFreq>
 801175e:	4b06      	ldr	r3, [pc, #24]	; (8011778 <HAL_RCC_GetHCLKFreq+0x20>)
 8011760:	685a      	ldr	r2, [r3, #4]
 8011762:	0912      	lsrs	r2, r2, #4
 8011764:	230f      	movs	r3, #15
 8011766:	401a      	ands	r2, r3
 8011768:	4b04      	ldr	r3, [pc, #16]	; (801177c <HAL_RCC_GetHCLKFreq+0x24>)
 801176a:	189b      	adds	r3, r3, r2
 801176c:	2220      	movs	r2, #32
 801176e:	5c9b      	ldrb	r3, [r3, r2]
 8011770:	40d8      	lsrs	r0, r3
 8011772:	4b03      	ldr	r3, [pc, #12]	; (8011780 <HAL_RCC_GetHCLKFreq+0x28>)
 8011774:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8011776:	bd10      	pop	{r4, pc}
 8011778:	40021000 	.word	0x40021000
 801177c:	08017c24 	.word	0x08017c24
 8011780:	200000a4 	.word	0x200000a4

08011784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011784:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8011786:	f7ff ffe7 	bl	8011758 <HAL_RCC_GetHCLKFreq>
 801178a:	4b05      	ldr	r3, [pc, #20]	; (80117a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 801178c:	685a      	ldr	r2, [r3, #4]
 801178e:	0a12      	lsrs	r2, r2, #8
 8011790:	2307      	movs	r3, #7
 8011792:	401a      	ands	r2, r3
 8011794:	4b03      	ldr	r3, [pc, #12]	; (80117a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8011796:	189b      	adds	r3, r3, r2
 8011798:	2220      	movs	r2, #32
 801179a:	5c9b      	ldrb	r3, [r3, r2]
 801179c:	40d8      	lsrs	r0, r3
}    
 801179e:	bd10      	pop	{r4, pc}
 80117a0:	40021000 	.word	0x40021000
 80117a4:	08017c24 	.word	0x08017c24

080117a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80117a8:	b530      	push	{r4, r5, lr}
 80117aa:	b083      	sub	sp, #12
 80117ac:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80117ae:	6803      	ldr	r3, [r0, #0]
 80117b0:	03db      	lsls	r3, r3, #15
 80117b2:	d507      	bpl.n	80117c4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80117b4:	4b41      	ldr	r3, [pc, #260]	; (80118bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80117b6:	6a1b      	ldr	r3, [r3, #32]
 80117b8:	6842      	ldr	r2, [r0, #4]
 80117ba:	4053      	eors	r3, r2
 80117bc:	22c0      	movs	r2, #192	; 0xc0
 80117be:	0092      	lsls	r2, r2, #2
 80117c0:	4213      	tst	r3, r2
 80117c2:	d134      	bne.n	801182e <HAL_RCCEx_PeriphCLKConfig+0x86>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80117c4:	6823      	ldr	r3, [r4, #0]
 80117c6:	07db      	lsls	r3, r3, #31
 80117c8:	d506      	bpl.n	80117d8 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80117ca:	4a3c      	ldr	r2, [pc, #240]	; (80118bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80117cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80117ce:	2103      	movs	r1, #3
 80117d0:	438b      	bics	r3, r1
 80117d2:	68a1      	ldr	r1, [r4, #8]
 80117d4:	430b      	orrs	r3, r1
 80117d6:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80117d8:	6823      	ldr	r3, [r4, #0]
 80117da:	079b      	lsls	r3, r3, #30
 80117dc:	d506      	bpl.n	80117ec <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80117de:	4a37      	ldr	r2, [pc, #220]	; (80118bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80117e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80117e2:	4937      	ldr	r1, [pc, #220]	; (80118c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80117e4:	400b      	ands	r3, r1
 80117e6:	68e1      	ldr	r1, [r4, #12]
 80117e8:	430b      	orrs	r3, r1
 80117ea:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80117ec:	6823      	ldr	r3, [r4, #0]
 80117ee:	035b      	lsls	r3, r3, #13
 80117f0:	d506      	bpl.n	8011800 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80117f2:	4a32      	ldr	r2, [pc, #200]	; (80118bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80117f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80117f6:	4933      	ldr	r1, [pc, #204]	; (80118c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80117f8:	400b      	ands	r3, r1
 80117fa:	6921      	ldr	r1, [r4, #16]
 80117fc:	430b      	orrs	r3, r1
 80117fe:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011800:	6823      	ldr	r3, [r4, #0]
 8011802:	069b      	lsls	r3, r3, #26
 8011804:	d506      	bpl.n	8011814 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011806:	4a2d      	ldr	r2, [pc, #180]	; (80118bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011808:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801180a:	2110      	movs	r1, #16
 801180c:	438b      	bics	r3, r1
 801180e:	6961      	ldr	r1, [r4, #20]
 8011810:	430b      	orrs	r3, r1
 8011812:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011814:	6823      	ldr	r3, [r4, #0]
 8011816:	055b      	lsls	r3, r3, #21
 8011818:	d54e      	bpl.n	80118b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801181a:	4a28      	ldr	r2, [pc, #160]	; (80118bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801181c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801181e:	2140      	movs	r1, #64	; 0x40
 8011820:	438b      	bics	r3, r1
 8011822:	69a1      	ldr	r1, [r4, #24]
 8011824:	430b      	orrs	r3, r1
 8011826:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8011828:	2000      	movs	r0, #0
}
 801182a:	b003      	add	sp, #12
 801182c:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 801182e:	4a23      	ldr	r2, [pc, #140]	; (80118bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011830:	69d1      	ldr	r1, [r2, #28]
 8011832:	2080      	movs	r0, #128	; 0x80
 8011834:	0540      	lsls	r0, r0, #21
 8011836:	4301      	orrs	r1, r0
 8011838:	61d1      	str	r1, [r2, #28]
 801183a:	69d3      	ldr	r3, [r2, #28]
 801183c:	4003      	ands	r3, r0
 801183e:	9301      	str	r3, [sp, #4]
 8011840:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011842:	4a21      	ldr	r2, [pc, #132]	; (80118c8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011844:	6811      	ldr	r1, [r2, #0]
 8011846:	2380      	movs	r3, #128	; 0x80
 8011848:	005b      	lsls	r3, r3, #1
 801184a:	430b      	orrs	r3, r1
 801184c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 801184e:	f7fd ff9d 	bl	800f78c <HAL_GetTick>
 8011852:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011854:	4b1c      	ldr	r3, [pc, #112]	; (80118c8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	05db      	lsls	r3, r3, #23
 801185a:	d406      	bmi.n	801186a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801185c:	f7fd ff96 	bl	800f78c <HAL_GetTick>
 8011860:	1b40      	subs	r0, r0, r5
 8011862:	2864      	cmp	r0, #100	; 0x64
 8011864:	d9f6      	bls.n	8011854 <HAL_RCCEx_PeriphCLKConfig+0xac>
          return HAL_TIMEOUT;
 8011866:	2003      	movs	r0, #3
 8011868:	e7df      	b.n	801182a <HAL_RCCEx_PeriphCLKConfig+0x82>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801186a:	4b14      	ldr	r3, [pc, #80]	; (80118bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801186c:	6a18      	ldr	r0, [r3, #32]
 801186e:	4a17      	ldr	r2, [pc, #92]	; (80118cc <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8011870:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8011872:	6a1d      	ldr	r5, [r3, #32]
 8011874:	2180      	movs	r1, #128	; 0x80
 8011876:	0249      	lsls	r1, r1, #9
 8011878:	4329      	orrs	r1, r5
 801187a:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801187c:	6a19      	ldr	r1, [r3, #32]
 801187e:	4d14      	ldr	r5, [pc, #80]	; (80118d0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8011880:	4029      	ands	r1, r5
 8011882:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8011884:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8011886:	0783      	lsls	r3, r0, #30
 8011888:	d407      	bmi.n	801189a <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 801188a:	4a0c      	ldr	r2, [pc, #48]	; (80118bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801188c:	6a13      	ldr	r3, [r2, #32]
 801188e:	490f      	ldr	r1, [pc, #60]	; (80118cc <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8011890:	400b      	ands	r3, r1
 8011892:	6861      	ldr	r1, [r4, #4]
 8011894:	430b      	orrs	r3, r1
 8011896:	6213      	str	r3, [r2, #32]
 8011898:	e794      	b.n	80117c4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        tickstart = HAL_GetTick();
 801189a:	f7fd ff77 	bl	800f78c <HAL_GetTick>
 801189e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80118a0:	4b06      	ldr	r3, [pc, #24]	; (80118bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80118a2:	6a1b      	ldr	r3, [r3, #32]
 80118a4:	079b      	lsls	r3, r3, #30
 80118a6:	d4f0      	bmi.n	801188a <HAL_RCCEx_PeriphCLKConfig+0xe2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80118a8:	f7fd ff70 	bl	800f78c <HAL_GetTick>
 80118ac:	1b40      	subs	r0, r0, r5
 80118ae:	4b09      	ldr	r3, [pc, #36]	; (80118d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80118b0:	4298      	cmp	r0, r3
 80118b2:	d9f5      	bls.n	80118a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
            return HAL_TIMEOUT;
 80118b4:	2003      	movs	r0, #3
 80118b6:	e7b8      	b.n	801182a <HAL_RCCEx_PeriphCLKConfig+0x82>
  return HAL_OK;
 80118b8:	2000      	movs	r0, #0
 80118ba:	e7b6      	b.n	801182a <HAL_RCCEx_PeriphCLKConfig+0x82>
 80118bc:	40021000 	.word	0x40021000
 80118c0:	fffcffff 	.word	0xfffcffff
 80118c4:	fff3ffff 	.word	0xfff3ffff
 80118c8:	40007000 	.word	0x40007000
 80118cc:	fffffcff 	.word	0xfffffcff
 80118d0:	fffeffff 	.word	0xfffeffff
 80118d4:	00001388 	.word	0x00001388

080118d8 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 80118d8:	4770      	bx	lr

080118da <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80118da:	b570      	push	{r4, r5, r6, lr}
 80118dc:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80118de:	6802      	ldr	r2, [r0, #0]
 80118e0:	68d3      	ldr	r3, [r2, #12]
 80118e2:	21a0      	movs	r1, #160	; 0xa0
 80118e4:	438b      	bics	r3, r1
 80118e6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80118e8:	f7fd ff50 	bl	800f78c <HAL_GetTick>
 80118ec:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80118ee:	6823      	ldr	r3, [r4, #0]
 80118f0:	68db      	ldr	r3, [r3, #12]
 80118f2:	069b      	lsls	r3, r3, #26
 80118f4:	d408      	bmi.n	8011908 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80118f6:	f7fd ff49 	bl	800f78c <HAL_GetTick>
 80118fa:	1b40      	subs	r0, r0, r5
 80118fc:	23fa      	movs	r3, #250	; 0xfa
 80118fe:	009b      	lsls	r3, r3, #2
 8011900:	4298      	cmp	r0, r3
 8011902:	d9f4      	bls.n	80118ee <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8011904:	2003      	movs	r0, #3
 8011906:	e000      	b.n	801190a <HAL_RTC_WaitForSynchro+0x30>
    } 
  }

  return HAL_OK;
 8011908:	2000      	movs	r0, #0
}
 801190a:	bd70      	pop	{r4, r5, r6, pc}

0801190c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 801190c:	b570      	push	{r4, r5, r6, lr}
 801190e:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011910:	6803      	ldr	r3, [r0, #0]
 8011912:	68da      	ldr	r2, [r3, #12]
 8011914:	0652      	lsls	r2, r2, #25
 8011916:	d501      	bpl.n	801191c <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8011918:	2000      	movs	r0, #0
}
 801191a:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801191c:	2201      	movs	r2, #1
 801191e:	4252      	negs	r2, r2
 8011920:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8011922:	f7fd ff33 	bl	800f78c <HAL_GetTick>
 8011926:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011928:	6823      	ldr	r3, [r4, #0]
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	065b      	lsls	r3, r3, #25
 801192e:	d408      	bmi.n	8011942 <RTC_EnterInitMode+0x36>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011930:	f7fd ff2c 	bl	800f78c <HAL_GetTick>
 8011934:	1b40      	subs	r0, r0, r5
 8011936:	23fa      	movs	r3, #250	; 0xfa
 8011938:	009b      	lsls	r3, r3, #2
 801193a:	4298      	cmp	r0, r3
 801193c:	d9f4      	bls.n	8011928 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 801193e:	2003      	movs	r0, #3
 8011940:	e7eb      	b.n	801191a <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8011942:	2000      	movs	r0, #0
 8011944:	e7e9      	b.n	801191a <RTC_EnterInitMode+0xe>
	...

08011948 <HAL_RTC_Init>:
{
 8011948:	b570      	push	{r4, r5, r6, lr}
 801194a:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 801194c:	d046      	beq.n	80119dc <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 801194e:	7f43      	ldrb	r3, [r0, #29]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d038      	beq.n	80119c6 <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011954:	2302      	movs	r3, #2
 8011956:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011958:	6823      	ldr	r3, [r4, #0]
 801195a:	22ca      	movs	r2, #202	; 0xca
 801195c:	625a      	str	r2, [r3, #36]	; 0x24
 801195e:	6823      	ldr	r3, [r4, #0]
 8011960:	3a77      	subs	r2, #119	; 0x77
 8011962:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011964:	0020      	movs	r0, r4
 8011966:	f7ff ffd1 	bl	801190c <RTC_EnterInitMode>
 801196a:	2800      	cmp	r0, #0
 801196c:	d12f      	bne.n	80119ce <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801196e:	6822      	ldr	r2, [r4, #0]
 8011970:	6893      	ldr	r3, [r2, #8]
 8011972:	491b      	ldr	r1, [pc, #108]	; (80119e0 <HAL_RTC_Init+0x98>)
 8011974:	400b      	ands	r3, r1
 8011976:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011978:	6821      	ldr	r1, [r4, #0]
 801197a:	688a      	ldr	r2, [r1, #8]
 801197c:	6863      	ldr	r3, [r4, #4]
 801197e:	6925      	ldr	r5, [r4, #16]
 8011980:	432b      	orrs	r3, r5
 8011982:	6965      	ldr	r5, [r4, #20]
 8011984:	432b      	orrs	r3, r5
 8011986:	4313      	orrs	r3, r2
 8011988:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801198a:	6823      	ldr	r3, [r4, #0]
 801198c:	68e2      	ldr	r2, [r4, #12]
 801198e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011990:	6821      	ldr	r1, [r4, #0]
 8011992:	690b      	ldr	r3, [r1, #16]
 8011994:	68a2      	ldr	r2, [r4, #8]
 8011996:	0412      	lsls	r2, r2, #16
 8011998:	4313      	orrs	r3, r2
 801199a:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 801199c:	6822      	ldr	r2, [r4, #0]
 801199e:	68d3      	ldr	r3, [r2, #12]
 80119a0:	2180      	movs	r1, #128	; 0x80
 80119a2:	438b      	bics	r3, r1
 80119a4:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80119a6:	6822      	ldr	r2, [r4, #0]
 80119a8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80119aa:	490e      	ldr	r1, [pc, #56]	; (80119e4 <HAL_RTC_Init+0x9c>)
 80119ac:	400b      	ands	r3, r1
 80119ae:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80119b0:	6822      	ldr	r2, [r4, #0]
 80119b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80119b4:	69a1      	ldr	r1, [r4, #24]
 80119b6:	430b      	orrs	r3, r1
 80119b8:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80119ba:	6823      	ldr	r3, [r4, #0]
 80119bc:	22ff      	movs	r2, #255	; 0xff
 80119be:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80119c0:	2301      	movs	r3, #1
 80119c2:	7763      	strb	r3, [r4, #29]
}
 80119c4:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80119c6:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80119c8:	f7ff ff86 	bl	80118d8 <HAL_RTC_MspInit>
 80119cc:	e7c2      	b.n	8011954 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80119ce:	6823      	ldr	r3, [r4, #0]
 80119d0:	22ff      	movs	r2, #255	; 0xff
 80119d2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80119d4:	2304      	movs	r3, #4
 80119d6:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80119d8:	2001      	movs	r0, #1
 80119da:	e7f3      	b.n	80119c4 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 80119dc:	2001      	movs	r0, #1
 80119de:	e7f1      	b.n	80119c4 <HAL_RTC_Init+0x7c>
 80119e0:	ff8fffbf 	.word	0xff8fffbf
 80119e4:	fffbffff 	.word	0xfffbffff

080119e8 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 80119e8:	2300      	movs	r3, #0
  
  while(Value >= 10)
 80119ea:	e002      	b.n	80119f2 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80119ec:	3301      	adds	r3, #1
    Value -= 10;
 80119ee:	380a      	subs	r0, #10
 80119f0:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 80119f2:	2809      	cmp	r0, #9
 80119f4:	d8fa      	bhi.n	80119ec <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80119f6:	011b      	lsls	r3, r3, #4
 80119f8:	b2db      	uxtb	r3, r3
 80119fa:	4318      	orrs	r0, r3
}
 80119fc:	4770      	bx	lr
	...

08011a00 <HAL_RTC_SetTime>:
{
 8011a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a02:	0004      	movs	r4, r0
 8011a04:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8011a06:	7f03      	ldrb	r3, [r0, #28]
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d100      	bne.n	8011a0e <HAL_RTC_SetTime+0xe>
 8011a0c:	e070      	b.n	8011af0 <HAL_RTC_SetTime+0xf0>
 8011a0e:	2301      	movs	r3, #1
 8011a10:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011a12:	3301      	adds	r3, #1
 8011a14:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8011a16:	2a00      	cmp	r2, #0
 8011a18:	d141      	bne.n	8011a9e <HAL_RTC_SetTime+0x9e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011a1a:	6803      	ldr	r3, [r0, #0]
 8011a1c:	689b      	ldr	r3, [r3, #8]
 8011a1e:	065b      	lsls	r3, r3, #25
 8011a20:	d401      	bmi.n	8011a26 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 8011a22:	2300      	movs	r3, #0
 8011a24:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011a26:	7830      	ldrb	r0, [r6, #0]
 8011a28:	f7ff ffde 	bl	80119e8 <RTC_ByteToBcd2>
 8011a2c:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011a2e:	7870      	ldrb	r0, [r6, #1]
 8011a30:	f7ff ffda 	bl	80119e8 <RTC_ByteToBcd2>
 8011a34:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011a36:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011a38:	78b0      	ldrb	r0, [r6, #2]
 8011a3a:	f7ff ffd5 	bl	80119e8 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011a3e:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8011a40:	7a30      	ldrb	r0, [r6, #8]
 8011a42:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011a44:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011a46:	6823      	ldr	r3, [r4, #0]
 8011a48:	22ca      	movs	r2, #202	; 0xca
 8011a4a:	625a      	str	r2, [r3, #36]	; 0x24
 8011a4c:	6823      	ldr	r3, [r4, #0]
 8011a4e:	3a77      	subs	r2, #119	; 0x77
 8011a50:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011a52:	0020      	movs	r0, r4
 8011a54:	f7ff ff5a 	bl	801190c <RTC_EnterInitMode>
 8011a58:	1e07      	subs	r7, r0, #0
 8011a5a:	d131      	bne.n	8011ac0 <HAL_RTC_SetTime+0xc0>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011a5c:	6823      	ldr	r3, [r4, #0]
 8011a5e:	4825      	ldr	r0, [pc, #148]	; (8011af4 <HAL_RTC_SetTime+0xf4>)
 8011a60:	4005      	ands	r5, r0
 8011a62:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011a64:	6822      	ldr	r2, [r4, #0]
 8011a66:	6893      	ldr	r3, [r2, #8]
 8011a68:	4923      	ldr	r1, [pc, #140]	; (8011af8 <HAL_RTC_SetTime+0xf8>)
 8011a6a:	400b      	ands	r3, r1
 8011a6c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011a6e:	6821      	ldr	r1, [r4, #0]
 8011a70:	688b      	ldr	r3, [r1, #8]
 8011a72:	68f2      	ldr	r2, [r6, #12]
 8011a74:	6930      	ldr	r0, [r6, #16]
 8011a76:	4302      	orrs	r2, r0
 8011a78:	4313      	orrs	r3, r2
 8011a7a:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011a7c:	6822      	ldr	r2, [r4, #0]
 8011a7e:	68d3      	ldr	r3, [r2, #12]
 8011a80:	2180      	movs	r1, #128	; 0x80
 8011a82:	438b      	bics	r3, r1
 8011a84:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011a86:	6823      	ldr	r3, [r4, #0]
 8011a88:	689b      	ldr	r3, [r3, #8]
 8011a8a:	069b      	lsls	r3, r3, #26
 8011a8c:	d522      	bpl.n	8011ad4 <HAL_RTC_SetTime+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011a8e:	6823      	ldr	r3, [r4, #0]
 8011a90:	22ff      	movs	r2, #255	; 0xff
 8011a92:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8011a94:	2301      	movs	r3, #1
 8011a96:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8011a98:	2300      	movs	r3, #0
 8011a9a:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8011a9c:	e018      	b.n	8011ad0 <HAL_RTC_SetTime+0xd0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011a9e:	6803      	ldr	r3, [r0, #0]
 8011aa0:	689b      	ldr	r3, [r3, #8]
 8011aa2:	065b      	lsls	r3, r3, #25
 8011aa4:	d401      	bmi.n	8011aaa <HAL_RTC_SetTime+0xaa>
      sTime->TimeFormat = 0x00;
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011aaa:	7835      	ldrb	r5, [r6, #0]
 8011aac:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011aae:	7870      	ldrb	r0, [r6, #1]
 8011ab0:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011ab2:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8011ab4:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011ab6:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8011ab8:	7a30      	ldrb	r0, [r6, #8]
 8011aba:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011abc:	4305      	orrs	r5, r0
 8011abe:	e7c2      	b.n	8011a46 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011ac0:	6823      	ldr	r3, [r4, #0]
 8011ac2:	22ff      	movs	r2, #255	; 0xff
 8011ac4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011ac6:	2304      	movs	r3, #4
 8011ac8:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011aca:	2300      	movs	r3, #0
 8011acc:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011ace:	2701      	movs	r7, #1
}
 8011ad0:	0038      	movs	r0, r7
 8011ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011ad4:	0020      	movs	r0, r4
 8011ad6:	f7ff ff00 	bl	80118da <HAL_RTC_WaitForSynchro>
 8011ada:	2800      	cmp	r0, #0
 8011adc:	d0d7      	beq.n	8011a8e <HAL_RTC_SetTime+0x8e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011ade:	6823      	ldr	r3, [r4, #0]
 8011ae0:	22ff      	movs	r2, #255	; 0xff
 8011ae2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011ae4:	2304      	movs	r3, #4
 8011ae6:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8011ae8:	2300      	movs	r3, #0
 8011aea:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8011aec:	2701      	movs	r7, #1
 8011aee:	e7ef      	b.n	8011ad0 <HAL_RTC_SetTime+0xd0>
  __HAL_LOCK(hrtc);
 8011af0:	2702      	movs	r7, #2
 8011af2:	e7ed      	b.n	8011ad0 <HAL_RTC_SetTime+0xd0>
 8011af4:	007f7f7f 	.word	0x007f7f7f
 8011af8:	fffbffff 	.word	0xfffbffff

08011afc <HAL_RTC_SetDate>:
{
 8011afc:	b570      	push	{r4, r5, r6, lr}
 8011afe:	0004      	movs	r4, r0
 8011b00:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8011b02:	7f03      	ldrb	r3, [r0, #28]
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	d061      	beq.n	8011bcc <HAL_RTC_SetDate+0xd0>
 8011b08:	2301      	movs	r3, #1
 8011b0a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8011b0c:	3301      	adds	r3, #1
 8011b0e:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011b10:	2a00      	cmp	r2, #0
 8011b12:	d106      	bne.n	8011b22 <HAL_RTC_SetDate+0x26>
 8011b14:	784b      	ldrb	r3, [r1, #1]
 8011b16:	06d9      	lsls	r1, r3, #27
 8011b18:	d503      	bpl.n	8011b22 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8011b1a:	2110      	movs	r1, #16
 8011b1c:	438b      	bics	r3, r1
 8011b1e:	330a      	adds	r3, #10
 8011b20:	7073      	strb	r3, [r6, #1]
  if(Format == RTC_FORMAT_BIN)
 8011b22:	2a00      	cmp	r2, #0
 8011b24:	d12f      	bne.n	8011b86 <HAL_RTC_SetDate+0x8a>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011b26:	78f0      	ldrb	r0, [r6, #3]
 8011b28:	f7ff ff5e 	bl	80119e8 <RTC_ByteToBcd2>
 8011b2c:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011b2e:	7870      	ldrb	r0, [r6, #1]
 8011b30:	f7ff ff5a 	bl	80119e8 <RTC_ByteToBcd2>
 8011b34:	0200      	lsls	r0, r0, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011b36:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8011b38:	78b0      	ldrb	r0, [r6, #2]
 8011b3a:	f7ff ff55 	bl	80119e8 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011b3e:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));   
 8011b40:	7830      	ldrb	r0, [r6, #0]
 8011b42:	0340      	lsls	r0, r0, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011b44:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b46:	6823      	ldr	r3, [r4, #0]
 8011b48:	22ca      	movs	r2, #202	; 0xca
 8011b4a:	625a      	str	r2, [r3, #36]	; 0x24
 8011b4c:	6823      	ldr	r3, [r4, #0]
 8011b4e:	3a77      	subs	r2, #119	; 0x77
 8011b50:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011b52:	0020      	movs	r0, r4
 8011b54:	f7ff feda 	bl	801190c <RTC_EnterInitMode>
 8011b58:	1e06      	subs	r6, r0, #0
 8011b5a:	d11f      	bne.n	8011b9c <HAL_RTC_SetDate+0xa0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011b5c:	6823      	ldr	r3, [r4, #0]
 8011b5e:	481c      	ldr	r0, [pc, #112]	; (8011bd0 <HAL_RTC_SetDate+0xd4>)
 8011b60:	4005      	ands	r5, r0
 8011b62:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011b64:	6822      	ldr	r2, [r4, #0]
 8011b66:	68d3      	ldr	r3, [r2, #12]
 8011b68:	2180      	movs	r1, #128	; 0x80
 8011b6a:	438b      	bics	r3, r1
 8011b6c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011b6e:	6823      	ldr	r3, [r4, #0]
 8011b70:	689b      	ldr	r3, [r3, #8]
 8011b72:	069b      	lsls	r3, r3, #26
 8011b74:	d51c      	bpl.n	8011bb0 <HAL_RTC_SetDate+0xb4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011b76:	6823      	ldr	r3, [r4, #0]
 8011b78:	22ff      	movs	r2, #255	; 0xff
 8011b7a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011b80:	2300      	movs	r3, #0
 8011b82:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8011b84:	e012      	b.n	8011bac <HAL_RTC_SetDate+0xb0>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8011b86:	7873      	ldrb	r3, [r6, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8011b88:	78b0      	ldrb	r0, [r6, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011b8a:	78f5      	ldrb	r5, [r6, #3]
 8011b8c:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8011b8e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011b90:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->Month) << 8) | \
 8011b92:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8011b94:	7830      	ldrb	r0, [r6, #0]
 8011b96:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011b98:	4305      	orrs	r5, r0
 8011b9a:	e7d4      	b.n	8011b46 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011b9c:	6823      	ldr	r3, [r4, #0]
 8011b9e:	22ff      	movs	r2, #255	; 0xff
 8011ba0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011ba2:	2304      	movs	r3, #4
 8011ba4:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011baa:	2601      	movs	r6, #1
}
 8011bac:	0030      	movs	r0, r6
 8011bae:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011bb0:	0020      	movs	r0, r4
 8011bb2:	f7ff fe92 	bl	80118da <HAL_RTC_WaitForSynchro>
 8011bb6:	2800      	cmp	r0, #0
 8011bb8:	d0dd      	beq.n	8011b76 <HAL_RTC_SetDate+0x7a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011bba:	6823      	ldr	r3, [r4, #0]
 8011bbc:	22ff      	movs	r2, #255	; 0xff
 8011bbe:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011bc0:	2304      	movs	r3, #4
 8011bc2:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8011bc8:	2601      	movs	r6, #1
 8011bca:	e7ef      	b.n	8011bac <HAL_RTC_SetDate+0xb0>
 __HAL_LOCK(hrtc);
 8011bcc:	2602      	movs	r6, #2
 8011bce:	e7ed      	b.n	8011bac <HAL_RTC_SetDate+0xb0>
 8011bd0:	00ffff3f 	.word	0x00ffff3f

08011bd4 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011bd4:	0902      	lsrs	r2, r0, #4
 8011bd6:	0093      	lsls	r3, r2, #2
 8011bd8:	189b      	adds	r3, r3, r2
 8011bda:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011bdc:	230f      	movs	r3, #15
 8011bde:	4018      	ands	r0, r3
 8011be0:	1880      	adds	r0, r0, r2
 8011be2:	b2c0      	uxtb	r0, r0
}
 8011be4:	4770      	bx	lr
	...

08011be8 <HAL_RTC_GetTime>:
{
 8011be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bea:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011bec:	6803      	ldr	r3, [r0, #0]
 8011bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bf0:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8011bf2:	6803      	ldr	r3, [r0, #0]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	490f      	ldr	r1, [pc, #60]	; (8011c34 <HAL_RTC_GetTime+0x4c>)
 8011bf8:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011bfa:	0c1d      	lsrs	r5, r3, #16
 8011bfc:	203f      	movs	r0, #63	; 0x3f
 8011bfe:	4028      	ands	r0, r5
 8011c00:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011c02:	0a1e      	lsrs	r6, r3, #8
 8011c04:	277f      	movs	r7, #127	; 0x7f
 8011c06:	403e      	ands	r6, r7
 8011c08:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011c0a:	401f      	ands	r7, r3
 8011c0c:	70a7      	strb	r7, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011c0e:	2140      	movs	r1, #64	; 0x40
 8011c10:	4029      	ands	r1, r5
 8011c12:	7221      	strb	r1, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 8011c14:	2a00      	cmp	r2, #0
 8011c16:	d10a      	bne.n	8011c2e <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011c18:	f7ff ffdc 	bl	8011bd4 <RTC_Bcd2ToByte>
 8011c1c:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011c1e:	0030      	movs	r0, r6
 8011c20:	f7ff ffd8 	bl	8011bd4 <RTC_Bcd2ToByte>
 8011c24:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8011c26:	0038      	movs	r0, r7
 8011c28:	f7ff ffd4 	bl	8011bd4 <RTC_Bcd2ToByte>
 8011c2c:	70a0      	strb	r0, [r4, #2]
}
 8011c2e:	2000      	movs	r0, #0
 8011c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c32:	46c0      	nop			; (mov r8, r8)
 8011c34:	007f7f7f 	.word	0x007f7f7f

08011c38 <HAL_RTC_GetDate>:
{
 8011c38:	b570      	push	{r4, r5, r6, lr}
 8011c3a:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8011c3c:	6803      	ldr	r3, [r0, #0]
 8011c3e:	685b      	ldr	r3, [r3, #4]
 8011c40:	490e      	ldr	r1, [pc, #56]	; (8011c7c <HAL_RTC_GetDate+0x44>)
 8011c42:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8011c44:	0c18      	lsrs	r0, r3, #16
 8011c46:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011c48:	0a19      	lsrs	r1, r3, #8
 8011c4a:	261f      	movs	r6, #31
 8011c4c:	400e      	ands	r6, r1
 8011c4e:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8011c50:	253f      	movs	r5, #63	; 0x3f
 8011c52:	401d      	ands	r5, r3
 8011c54:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8011c56:	0b5b      	lsrs	r3, r3, #13
 8011c58:	2107      	movs	r1, #7
 8011c5a:	400b      	ands	r3, r1
 8011c5c:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8011c5e:	2a00      	cmp	r2, #0
 8011c60:	d10a      	bne.n	8011c78 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011c62:	f7ff ffb7 	bl	8011bd4 <RTC_Bcd2ToByte>
 8011c66:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011c68:	0030      	movs	r0, r6
 8011c6a:	f7ff ffb3 	bl	8011bd4 <RTC_Bcd2ToByte>
 8011c6e:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8011c70:	0028      	movs	r0, r5
 8011c72:	f7ff ffaf 	bl	8011bd4 <RTC_Bcd2ToByte>
 8011c76:	70a0      	strb	r0, [r4, #2]
}
 8011c78:	2000      	movs	r0, #0
 8011c7a:	bd70      	pop	{r4, r5, r6, pc}
 8011c7c:	00ffff3f 	.word	0x00ffff3f

08011c80 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011c80:	6803      	ldr	r3, [r0, #0]
 8011c82:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011c84:	0089      	lsls	r1, r1, #2
 8011c86:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8011c88:	600a      	str	r2, [r1, #0]
}
 8011c8a:	4770      	bx	lr

08011c8c <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011c8c:	6803      	ldr	r3, [r0, #0]
 8011c8e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011c90:	0089      	lsls	r1, r1, #2
 8011c92:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8011c94:	6808      	ldr	r0, [r1, #0]
}
 8011c96:	4770      	bx	lr

08011c98 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8011c98:	4770      	bx	lr

08011c9a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8011c9a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8011c9c:	2239      	movs	r2, #57	; 0x39
 8011c9e:	2302      	movs	r3, #2
 8011ca0:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8011ca2:	6804      	ldr	r4, [r0, #0]
 8011ca4:	6823      	ldr	r3, [r4, #0]
 8011ca6:	2101      	movs	r1, #1
 8011ca8:	430b      	orrs	r3, r1
 8011caa:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8011cac:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8011cae:	2000      	movs	r0, #0
 8011cb0:	bd10      	pop	{r4, pc}
	...

08011cb4 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8011cb4:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011cb6:	4a1f      	ldr	r2, [pc, #124]	; (8011d34 <TIM_Base_SetConfig+0x80>)
 8011cb8:	4290      	cmp	r0, r2
 8011cba:	d006      	beq.n	8011cca <TIM_Base_SetConfig+0x16>
 8011cbc:	2280      	movs	r2, #128	; 0x80
 8011cbe:	05d2      	lsls	r2, r2, #23
 8011cc0:	4290      	cmp	r0, r2
 8011cc2:	d002      	beq.n	8011cca <TIM_Base_SetConfig+0x16>
 8011cc4:	4a1c      	ldr	r2, [pc, #112]	; (8011d38 <TIM_Base_SetConfig+0x84>)
 8011cc6:	4290      	cmp	r0, r2
 8011cc8:	d103      	bne.n	8011cd2 <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011cca:	2270      	movs	r2, #112	; 0x70
 8011ccc:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011cce:	684a      	ldr	r2, [r1, #4]
 8011cd0:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011cd2:	4a18      	ldr	r2, [pc, #96]	; (8011d34 <TIM_Base_SetConfig+0x80>)
 8011cd4:	4290      	cmp	r0, r2
 8011cd6:	d012      	beq.n	8011cfe <TIM_Base_SetConfig+0x4a>
 8011cd8:	2280      	movs	r2, #128	; 0x80
 8011cda:	05d2      	lsls	r2, r2, #23
 8011cdc:	4290      	cmp	r0, r2
 8011cde:	d00e      	beq.n	8011cfe <TIM_Base_SetConfig+0x4a>
 8011ce0:	4a15      	ldr	r2, [pc, #84]	; (8011d38 <TIM_Base_SetConfig+0x84>)
 8011ce2:	4290      	cmp	r0, r2
 8011ce4:	d00b      	beq.n	8011cfe <TIM_Base_SetConfig+0x4a>
 8011ce6:	4a15      	ldr	r2, [pc, #84]	; (8011d3c <TIM_Base_SetConfig+0x88>)
 8011ce8:	4290      	cmp	r0, r2
 8011cea:	d008      	beq.n	8011cfe <TIM_Base_SetConfig+0x4a>
 8011cec:	4a14      	ldr	r2, [pc, #80]	; (8011d40 <TIM_Base_SetConfig+0x8c>)
 8011cee:	4290      	cmp	r0, r2
 8011cf0:	d005      	beq.n	8011cfe <TIM_Base_SetConfig+0x4a>
 8011cf2:	4a14      	ldr	r2, [pc, #80]	; (8011d44 <TIM_Base_SetConfig+0x90>)
 8011cf4:	4290      	cmp	r0, r2
 8011cf6:	d002      	beq.n	8011cfe <TIM_Base_SetConfig+0x4a>
 8011cf8:	4a13      	ldr	r2, [pc, #76]	; (8011d48 <TIM_Base_SetConfig+0x94>)
 8011cfa:	4290      	cmp	r0, r2
 8011cfc:	d103      	bne.n	8011d06 <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011cfe:	4a13      	ldr	r2, [pc, #76]	; (8011d4c <TIM_Base_SetConfig+0x98>)
 8011d00:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011d02:	68ca      	ldr	r2, [r1, #12]
 8011d04:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8011d06:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011d08:	688b      	ldr	r3, [r1, #8]
 8011d0a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011d0c:	680b      	ldr	r3, [r1, #0]
 8011d0e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011d10:	4b08      	ldr	r3, [pc, #32]	; (8011d34 <TIM_Base_SetConfig+0x80>)
 8011d12:	4298      	cmp	r0, r3
 8011d14:	d008      	beq.n	8011d28 <TIM_Base_SetConfig+0x74>
 8011d16:	4b0a      	ldr	r3, [pc, #40]	; (8011d40 <TIM_Base_SetConfig+0x8c>)
 8011d18:	4298      	cmp	r0, r3
 8011d1a:	d005      	beq.n	8011d28 <TIM_Base_SetConfig+0x74>
 8011d1c:	4b09      	ldr	r3, [pc, #36]	; (8011d44 <TIM_Base_SetConfig+0x90>)
 8011d1e:	4298      	cmp	r0, r3
 8011d20:	d002      	beq.n	8011d28 <TIM_Base_SetConfig+0x74>
 8011d22:	4b09      	ldr	r3, [pc, #36]	; (8011d48 <TIM_Base_SetConfig+0x94>)
 8011d24:	4298      	cmp	r0, r3
 8011d26:	d101      	bne.n	8011d2c <TIM_Base_SetConfig+0x78>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011d28:	690b      	ldr	r3, [r1, #16]
 8011d2a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	6143      	str	r3, [r0, #20]
}
 8011d30:	4770      	bx	lr
 8011d32:	46c0      	nop			; (mov r8, r8)
 8011d34:	40012c00 	.word	0x40012c00
 8011d38:	40000400 	.word	0x40000400
 8011d3c:	40002000 	.word	0x40002000
 8011d40:	40014000 	.word	0x40014000
 8011d44:	40014400 	.word	0x40014400
 8011d48:	40014800 	.word	0x40014800
 8011d4c:	fffffcff 	.word	0xfffffcff

08011d50 <HAL_TIM_Base_Init>:
{
 8011d50:	b570      	push	{r4, r5, r6, lr}
 8011d52:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8011d54:	d014      	beq.n	8011d80 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8011d56:	2339      	movs	r3, #57	; 0x39
 8011d58:	5cc3      	ldrb	r3, [r0, r3]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d00a      	beq.n	8011d74 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8011d5e:	2539      	movs	r5, #57	; 0x39
 8011d60:	2302      	movs	r3, #2
 8011d62:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011d64:	1d21      	adds	r1, r4, #4
 8011d66:	6820      	ldr	r0, [r4, #0]
 8011d68:	f7ff ffa4 	bl	8011cb4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8011d70:	2000      	movs	r0, #0
}
 8011d72:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8011d74:	3338      	adds	r3, #56	; 0x38
 8011d76:	2200      	movs	r2, #0
 8011d78:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8011d7a:	f7ff ff8d 	bl	8011c98 <HAL_TIM_Base_MspInit>
 8011d7e:	e7ee      	b.n	8011d5e <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8011d80:	2001      	movs	r0, #1
 8011d82:	e7f6      	b.n	8011d72 <HAL_TIM_Base_Init+0x22>

08011d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8011d84:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8011d86:	2338      	movs	r3, #56	; 0x38
 8011d88:	5cc3      	ldrb	r3, [r0, r3]
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d01e      	beq.n	8011dcc <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8011d8e:	2238      	movs	r2, #56	; 0x38
 8011d90:	2501      	movs	r5, #1
 8011d92:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8011d94:	2439      	movs	r4, #57	; 0x39
 8011d96:	2302      	movs	r3, #2
 8011d98:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011d9a:	6806      	ldr	r6, [r0, #0]
 8011d9c:	6873      	ldr	r3, [r6, #4]
 8011d9e:	2770      	movs	r7, #112	; 0x70
 8011da0:	43bb      	bics	r3, r7
 8011da2:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011da4:	6806      	ldr	r6, [r0, #0]
 8011da6:	6873      	ldr	r3, [r6, #4]
 8011da8:	680f      	ldr	r7, [r1, #0]
 8011daa:	433b      	orrs	r3, r7
 8011dac:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011dae:	6806      	ldr	r6, [r0, #0]
 8011db0:	68b3      	ldr	r3, [r6, #8]
 8011db2:	2780      	movs	r7, #128	; 0x80
 8011db4:	43bb      	bics	r3, r7
 8011db6:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011db8:	6806      	ldr	r6, [r0, #0]
 8011dba:	68b3      	ldr	r3, [r6, #8]
 8011dbc:	6849      	ldr	r1, [r1, #4]
 8011dbe:	430b      	orrs	r3, r1
 8011dc0:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8011dc2:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8011dc8:	2000      	movs	r0, #0
}
 8011dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8011dcc:	2002      	movs	r0, #2
 8011dce:	e7fc      	b.n	8011dca <HAL_TIMEx_MasterConfigSynchronization+0x46>

08011dd0 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8011dd0:	4770      	bx	lr

08011dd2 <HAL_UART_DeInit>:
{
 8011dd2:	b570      	push	{r4, r5, r6, lr}
 8011dd4:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8011dd6:	d016      	beq.n	8011e06 <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 8011dd8:	2669      	movs	r6, #105	; 0x69
 8011dda:	2302      	movs	r3, #2
 8011ddc:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 8011dde:	6802      	ldr	r2, [r0, #0]
 8011de0:	6813      	ldr	r3, [r2, #0]
 8011de2:	2101      	movs	r1, #1
 8011de4:	438b      	bics	r3, r1
 8011de6:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8011de8:	6803      	ldr	r3, [r0, #0]
 8011dea:	2500      	movs	r5, #0
 8011dec:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8011dee:	6803      	ldr	r3, [r0, #0]
 8011df0:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8011df2:	6803      	ldr	r3, [r0, #0]
 8011df4:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8011df6:	f7ff ffeb 	bl	8011dd0 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011dfa:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8011dfc:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8011dfe:	2368      	movs	r3, #104	; 0x68
 8011e00:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8011e02:	2000      	movs	r0, #0
}
 8011e04:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8011e06:	2001      	movs	r0, #1
 8011e08:	e7fc      	b.n	8011e04 <HAL_UART_DeInit+0x32>

08011e0a <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011e0a:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011e0c:	2369      	movs	r3, #105	; 0x69
 8011e0e:	5cc3      	ldrb	r3, [r0, r3]
 8011e10:	2b01      	cmp	r3, #1
 8011e12:	d003      	beq.n	8011e1c <HAL_UART_Transmit_IT+0x12>
 8011e14:	2369      	movs	r3, #105	; 0x69
 8011e16:	5cc3      	ldrb	r3, [r0, r3]
 8011e18:	2b22      	cmp	r3, #34	; 0x22
 8011e1a:	d12b      	bne.n	8011e74 <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 8011e1c:	2900      	cmp	r1, #0
 8011e1e:	d02b      	beq.n	8011e78 <HAL_UART_Transmit_IT+0x6e>
 8011e20:	2a00      	cmp	r2, #0
 8011e22:	d02b      	beq.n	8011e7c <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011e24:	2368      	movs	r3, #104	; 0x68
 8011e26:	5cc3      	ldrb	r3, [r0, r3]
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	d029      	beq.n	8011e80 <HAL_UART_Transmit_IT+0x76>
 8011e2c:	2368      	movs	r3, #104	; 0x68
 8011e2e:	2401      	movs	r4, #1
 8011e30:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 8011e32:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8011e34:	3b18      	subs	r3, #24
 8011e36:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8011e38:	3302      	adds	r3, #2
 8011e3a:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011e40:	3369      	adds	r3, #105	; 0x69
 8011e42:	5cc3      	ldrb	r3, [r0, r3]
 8011e44:	2b22      	cmp	r3, #34	; 0x22
 8011e46:	d011      	beq.n	8011e6c <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011e48:	2369      	movs	r3, #105	; 0x69
 8011e4a:	2212      	movs	r2, #18
 8011e4c:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011e4e:	6802      	ldr	r2, [r0, #0]
 8011e50:	6893      	ldr	r3, [r2, #8]
 8011e52:	2101      	movs	r1, #1
 8011e54:	430b      	orrs	r3, r1
 8011e56:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011e58:	2368      	movs	r3, #104	; 0x68
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8011e5e:	6802      	ldr	r2, [r0, #0]
 8011e60:	6813      	ldr	r3, [r2, #0]
 8011e62:	317f      	adds	r1, #127	; 0x7f
 8011e64:	430b      	orrs	r3, r1
 8011e66:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8011e68:	2000      	movs	r0, #0
 8011e6a:	e004      	b.n	8011e76 <HAL_UART_Transmit_IT+0x6c>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011e6c:	3347      	adds	r3, #71	; 0x47
 8011e6e:	2232      	movs	r2, #50	; 0x32
 8011e70:	54c2      	strb	r2, [r0, r3]
 8011e72:	e7ec      	b.n	8011e4e <HAL_UART_Transmit_IT+0x44>
  }
  else
  {
    return HAL_BUSY;
 8011e74:	2002      	movs	r0, #2
  }
}
 8011e76:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8011e78:	2001      	movs	r0, #1
 8011e7a:	e7fc      	b.n	8011e76 <HAL_UART_Transmit_IT+0x6c>
 8011e7c:	2001      	movs	r0, #1
 8011e7e:	e7fa      	b.n	8011e76 <HAL_UART_Transmit_IT+0x6c>
    __HAL_LOCK(huart);
 8011e80:	2002      	movs	r0, #2
 8011e82:	e7f8      	b.n	8011e76 <HAL_UART_Transmit_IT+0x6c>

08011e84 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011e84:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011e86:	2369      	movs	r3, #105	; 0x69
 8011e88:	5cc3      	ldrb	r3, [r0, r3]
 8011e8a:	2b01      	cmp	r3, #1
 8011e8c:	d003      	beq.n	8011e96 <HAL_UART_Receive_IT+0x12>
 8011e8e:	2369      	movs	r3, #105	; 0x69
 8011e90:	5cc3      	ldrb	r3, [r0, r3]
 8011e92:	2b12      	cmp	r3, #18
 8011e94:	d15d      	bne.n	8011f52 <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 8011e96:	2900      	cmp	r1, #0
 8011e98:	d05d      	beq.n	8011f56 <HAL_UART_Receive_IT+0xd2>
 8011e9a:	2a00      	cmp	r2, #0
 8011e9c:	d05d      	beq.n	8011f5a <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011e9e:	2368      	movs	r3, #104	; 0x68
 8011ea0:	5cc3      	ldrb	r3, [r0, r3]
 8011ea2:	2b01      	cmp	r3, #1
 8011ea4:	d05b      	beq.n	8011f5e <HAL_UART_Receive_IT+0xda>
 8011ea6:	2368      	movs	r3, #104	; 0x68
 8011ea8:	2401      	movs	r4, #1
 8011eaa:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 8011eac:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8011eae:	3b10      	subs	r3, #16
 8011eb0:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8011eb2:	3302      	adds	r3, #2
 8011eb4:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8011eb6:	6883      	ldr	r3, [r0, #8]
 8011eb8:	2280      	movs	r2, #128	; 0x80
 8011eba:	0152      	lsls	r2, r2, #5
 8011ebc:	4293      	cmp	r3, r2
 8011ebe:	d008      	beq.n	8011ed2 <HAL_UART_Receive_IT+0x4e>
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d115      	bne.n	8011ef0 <HAL_UART_Receive_IT+0x6c>
 8011ec4:	6903      	ldr	r3, [r0, #16]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d10e      	bne.n	8011ee8 <HAL_UART_Receive_IT+0x64>
 8011eca:	335c      	adds	r3, #92	; 0x5c
 8011ecc:	22ff      	movs	r2, #255	; 0xff
 8011ece:	52c2      	strh	r2, [r0, r3]
 8011ed0:	e012      	b.n	8011ef8 <HAL_UART_Receive_IT+0x74>
 8011ed2:	6903      	ldr	r3, [r0, #16]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d103      	bne.n	8011ee0 <HAL_UART_Receive_IT+0x5c>
 8011ed8:	335c      	adds	r3, #92	; 0x5c
 8011eda:	4a22      	ldr	r2, [pc, #136]	; (8011f64 <HAL_UART_Receive_IT+0xe0>)
 8011edc:	52c2      	strh	r2, [r0, r3]
 8011ede:	e00b      	b.n	8011ef8 <HAL_UART_Receive_IT+0x74>
 8011ee0:	235c      	movs	r3, #92	; 0x5c
 8011ee2:	22ff      	movs	r2, #255	; 0xff
 8011ee4:	52c2      	strh	r2, [r0, r3]
 8011ee6:	e007      	b.n	8011ef8 <HAL_UART_Receive_IT+0x74>
 8011ee8:	235c      	movs	r3, #92	; 0x5c
 8011eea:	227f      	movs	r2, #127	; 0x7f
 8011eec:	52c2      	strh	r2, [r0, r3]
 8011eee:	e003      	b.n	8011ef8 <HAL_UART_Receive_IT+0x74>
 8011ef0:	2280      	movs	r2, #128	; 0x80
 8011ef2:	0552      	lsls	r2, r2, #21
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	d01d      	beq.n	8011f34 <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8011efc:	3369      	adds	r3, #105	; 0x69
 8011efe:	5cc3      	ldrb	r3, [r0, r3]
 8011f00:	2b12      	cmp	r3, #18
 8011f02:	d022      	beq.n	8011f4a <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011f04:	2369      	movs	r3, #105	; 0x69
 8011f06:	2222      	movs	r2, #34	; 0x22
 8011f08:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011f0a:	6802      	ldr	r2, [r0, #0]
 8011f0c:	6811      	ldr	r1, [r2, #0]
 8011f0e:	2380      	movs	r3, #128	; 0x80
 8011f10:	005b      	lsls	r3, r3, #1
 8011f12:	430b      	orrs	r3, r1
 8011f14:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011f16:	6802      	ldr	r2, [r0, #0]
 8011f18:	6893      	ldr	r3, [r2, #8]
 8011f1a:	2101      	movs	r1, #1
 8011f1c:	430b      	orrs	r3, r1
 8011f1e:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011f20:	2368      	movs	r3, #104	; 0x68
 8011f22:	2200      	movs	r2, #0
 8011f24:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011f26:	6802      	ldr	r2, [r0, #0]
 8011f28:	6813      	ldr	r3, [r2, #0]
 8011f2a:	311f      	adds	r1, #31
 8011f2c:	430b      	orrs	r3, r1
 8011f2e:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8011f30:	2000      	movs	r0, #0
 8011f32:	e00f      	b.n	8011f54 <HAL_UART_Receive_IT+0xd0>
    UART_MASK_COMPUTATION(huart);
 8011f34:	6903      	ldr	r3, [r0, #16]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d103      	bne.n	8011f42 <HAL_UART_Receive_IT+0xbe>
 8011f3a:	335c      	adds	r3, #92	; 0x5c
 8011f3c:	227f      	movs	r2, #127	; 0x7f
 8011f3e:	52c2      	strh	r2, [r0, r3]
 8011f40:	e7da      	b.n	8011ef8 <HAL_UART_Receive_IT+0x74>
 8011f42:	235c      	movs	r3, #92	; 0x5c
 8011f44:	223f      	movs	r2, #63	; 0x3f
 8011f46:	52c2      	strh	r2, [r0, r3]
 8011f48:	e7d6      	b.n	8011ef8 <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011f4a:	3357      	adds	r3, #87	; 0x57
 8011f4c:	2232      	movs	r2, #50	; 0x32
 8011f4e:	54c2      	strb	r2, [r0, r3]
 8011f50:	e7db      	b.n	8011f0a <HAL_UART_Receive_IT+0x86>
  }
  else
  {
    return HAL_BUSY;
 8011f52:	2002      	movs	r0, #2
  }
}
 8011f54:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8011f56:	2001      	movs	r0, #1
 8011f58:	e7fc      	b.n	8011f54 <HAL_UART_Receive_IT+0xd0>
 8011f5a:	2001      	movs	r0, #1
 8011f5c:	e7fa      	b.n	8011f54 <HAL_UART_Receive_IT+0xd0>
    __HAL_LOCK(huart);
 8011f5e:	2002      	movs	r0, #2
 8011f60:	e7f8      	b.n	8011f54 <HAL_UART_Receive_IT+0xd0>
 8011f62:	46c0      	nop			; (mov r8, r8)
 8011f64:	000001ff 	.word	0x000001ff

08011f68 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011f68:	b510      	push	{r4, lr}
 8011f6a:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011f6c:	2069      	movs	r0, #105	; 0x69
 8011f6e:	5c20      	ldrb	r0, [r4, r0]
 8011f70:	2801      	cmp	r0, #1
 8011f72:	d003      	beq.n	8011f7c <HAL_UART_Receive_DMA+0x14>
 8011f74:	2369      	movs	r3, #105	; 0x69
 8011f76:	5ce3      	ldrb	r3, [r4, r3]
 8011f78:	2b12      	cmp	r3, #18
 8011f7a:	d135      	bne.n	8011fe8 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 8011f7c:	2900      	cmp	r1, #0
 8011f7e:	d035      	beq.n	8011fec <HAL_UART_Receive_DMA+0x84>
 8011f80:	2a00      	cmp	r2, #0
 8011f82:	d035      	beq.n	8011ff0 <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011f84:	2368      	movs	r3, #104	; 0x68
 8011f86:	5ce3      	ldrb	r3, [r4, r3]
 8011f88:	2b01      	cmp	r3, #1
 8011f8a:	d033      	beq.n	8011ff4 <HAL_UART_Receive_DMA+0x8c>
 8011f8c:	2368      	movs	r3, #104	; 0x68
 8011f8e:	2001      	movs	r0, #1
 8011f90:	54e0      	strb	r0, [r4, r3]

    huart->pRxBuffPtr = pData;
 8011f92:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8011f94:	3b10      	subs	r3, #16
 8011f96:	52e2      	strh	r2, [r4, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	66e3      	str	r3, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8011f9c:	3369      	adds	r3, #105	; 0x69
 8011f9e:	5ce3      	ldrb	r3, [r4, r3]
 8011fa0:	2b12      	cmp	r3, #18
 8011fa2:	d01d      	beq.n	8011fe0 <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8011fa4:	2369      	movs	r3, #105	; 0x69
 8011fa6:	2022      	movs	r0, #34	; 0x22
 8011fa8:	54e0      	strb	r0, [r4, r3]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011faa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fac:	4812      	ldr	r0, [pc, #72]	; (8011ff8 <HAL_UART_Receive_DMA+0x90>)
 8011fae:	6298      	str	r0, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011fb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fb2:	4812      	ldr	r0, [pc, #72]	; (8011ffc <HAL_UART_Receive_DMA+0x94>)
 8011fb4:	62d8      	str	r0, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011fb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fb8:	4811      	ldr	r0, [pc, #68]	; (8012000 <HAL_UART_Receive_DMA+0x98>)
 8011fba:	6318      	str	r0, [r3, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8011fbc:	6820      	ldr	r0, [r4, #0]
 8011fbe:	3024      	adds	r0, #36	; 0x24
 8011fc0:	0013      	movs	r3, r2
 8011fc2:	000a      	movs	r2, r1
 8011fc4:	0001      	movs	r1, r0
 8011fc6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8011fc8:	f7fe f89c 	bl	8010104 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8011fcc:	6822      	ldr	r2, [r4, #0]
 8011fce:	6893      	ldr	r3, [r2, #8]
 8011fd0:	2140      	movs	r1, #64	; 0x40
 8011fd2:	430b      	orrs	r3, r1
 8011fd4:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 8011fd6:	2368      	movs	r3, #104	; 0x68
 8011fd8:	2200      	movs	r2, #0
 8011fda:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8011fdc:	2000      	movs	r0, #0
 8011fde:	e004      	b.n	8011fea <HAL_UART_Receive_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011fe0:	3357      	adds	r3, #87	; 0x57
 8011fe2:	3031      	adds	r0, #49	; 0x31
 8011fe4:	54e0      	strb	r0, [r4, r3]
 8011fe6:	e7e0      	b.n	8011faa <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8011fe8:	2002      	movs	r0, #2
  }
}
 8011fea:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8011fec:	2001      	movs	r0, #1
 8011fee:	e7fc      	b.n	8011fea <HAL_UART_Receive_DMA+0x82>
 8011ff0:	2001      	movs	r0, #1
 8011ff2:	e7fa      	b.n	8011fea <HAL_UART_Receive_DMA+0x82>
    __HAL_LOCK(huart);
 8011ff4:	2002      	movs	r0, #2
 8011ff6:	e7f8      	b.n	8011fea <HAL_UART_Receive_DMA+0x82>
 8011ff8:	08012005 	.word	0x08012005
 8011ffc:	08012041 	.word	0x08012041
 8012000:	0801204b 	.word	0x0801204b

08012004 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012004:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012006:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012008:	6802      	ldr	r2, [r0, #0]
 801200a:	6812      	ldr	r2, [r2, #0]
 801200c:	0692      	lsls	r2, r2, #26
 801200e:	d40e      	bmi.n	801202e <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8012010:	225a      	movs	r2, #90	; 0x5a
 8012012:	2100      	movs	r1, #0
 8012014:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012016:	6819      	ldr	r1, [r3, #0]
 8012018:	688a      	ldr	r2, [r1, #8]
 801201a:	2040      	movs	r0, #64	; 0x40
 801201c:	4382      	bics	r2, r0
 801201e:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012020:	2269      	movs	r2, #105	; 0x69
 8012022:	5c9a      	ldrb	r2, [r3, r2]
 8012024:	2a32      	cmp	r2, #50	; 0x32
 8012026:	d006      	beq.n	8012036 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012028:	2269      	movs	r2, #105	; 0x69
 801202a:	2101      	movs	r1, #1
 801202c:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 801202e:	0018      	movs	r0, r3
 8012030:	f7fa fe2e 	bl	800cc90 <HAL_UART_RxCpltCallback>
}
 8012034:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012036:	3237      	adds	r2, #55	; 0x37
 8012038:	2112      	movs	r1, #18
 801203a:	5499      	strb	r1, [r3, r2]
 801203c:	e7f7      	b.n	801202e <UART_DMAReceiveCplt+0x2a>

0801203e <HAL_UART_RxHalfCpltCallback>:
}
 801203e:	4770      	bx	lr

08012040 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012040:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8012042:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_RxHalfCpltCallback(huart);
 8012044:	f7ff fffb 	bl	801203e <HAL_UART_RxHalfCpltCallback>
}
 8012048:	bd10      	pop	{r4, pc}

0801204a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801204a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801204c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 801204e:	2300      	movs	r3, #0
 8012050:	225a      	movs	r2, #90	; 0x5a
 8012052:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8012054:	3a08      	subs	r2, #8
 8012056:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8012058:	3369      	adds	r3, #105	; 0x69
 801205a:	3a51      	subs	r2, #81	; 0x51
 801205c:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801205e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012060:	320f      	adds	r2, #15
 8012062:	4313      	orrs	r3, r2
 8012064:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8012066:	f7fa fdef 	bl	800cc48 <HAL_UART_ErrorCallback>
}
 801206a:	bd10      	pop	{r4, pc}

0801206c <UART_SetConfig>:
{
 801206c:	b570      	push	{r4, r5, r6, lr}
 801206e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012070:	6883      	ldr	r3, [r0, #8]
 8012072:	6902      	ldr	r2, [r0, #16]
 8012074:	4313      	orrs	r3, r2
 8012076:	6942      	ldr	r2, [r0, #20]
 8012078:	4313      	orrs	r3, r2
 801207a:	69c2      	ldr	r2, [r0, #28]
 801207c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801207e:	6801      	ldr	r1, [r0, #0]
 8012080:	680a      	ldr	r2, [r1, #0]
 8012082:	487c      	ldr	r0, [pc, #496]	; (8012274 <UART_SetConfig+0x208>)
 8012084:	4002      	ands	r2, r0
 8012086:	4313      	orrs	r3, r2
 8012088:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801208a:	6822      	ldr	r2, [r4, #0]
 801208c:	6853      	ldr	r3, [r2, #4]
 801208e:	497a      	ldr	r1, [pc, #488]	; (8012278 <UART_SetConfig+0x20c>)
 8012090:	400b      	ands	r3, r1
 8012092:	68e1      	ldr	r1, [r4, #12]
 8012094:	430b      	orrs	r3, r1
 8012096:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012098:	69a2      	ldr	r2, [r4, #24]
 801209a:	6a23      	ldr	r3, [r4, #32]
 801209c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801209e:	6821      	ldr	r1, [r4, #0]
 80120a0:	688b      	ldr	r3, [r1, #8]
 80120a2:	4876      	ldr	r0, [pc, #472]	; (801227c <UART_SetConfig+0x210>)
 80120a4:	4003      	ands	r3, r0
 80120a6:	4313      	orrs	r3, r2
 80120a8:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80120aa:	6825      	ldr	r5, [r4, #0]
 80120ac:	4b74      	ldr	r3, [pc, #464]	; (8012280 <UART_SetConfig+0x214>)
 80120ae:	429d      	cmp	r5, r3
 80120b0:	d016      	beq.n	80120e0 <UART_SetConfig+0x74>
 80120b2:	4b74      	ldr	r3, [pc, #464]	; (8012284 <UART_SetConfig+0x218>)
 80120b4:	429d      	cmp	r5, r3
 80120b6:	d027      	beq.n	8012108 <UART_SetConfig+0x9c>
 80120b8:	4b73      	ldr	r3, [pc, #460]	; (8012288 <UART_SetConfig+0x21c>)
 80120ba:	429d      	cmp	r5, r3
 80120bc:	d042      	beq.n	8012144 <UART_SetConfig+0xd8>
 80120be:	4b73      	ldr	r3, [pc, #460]	; (801228c <UART_SetConfig+0x220>)
 80120c0:	429d      	cmp	r5, r3
 80120c2:	d061      	beq.n	8012188 <UART_SetConfig+0x11c>
 80120c4:	4b72      	ldr	r3, [pc, #456]	; (8012290 <UART_SetConfig+0x224>)
 80120c6:	429d      	cmp	r5, r3
 80120c8:	d075      	beq.n	80121b6 <UART_SetConfig+0x14a>
 80120ca:	4b72      	ldr	r3, [pc, #456]	; (8012294 <UART_SetConfig+0x228>)
 80120cc:	429d      	cmp	r5, r3
 80120ce:	d074      	beq.n	80121ba <UART_SetConfig+0x14e>
 80120d0:	4b71      	ldr	r3, [pc, #452]	; (8012298 <UART_SetConfig+0x22c>)
 80120d2:	429d      	cmp	r5, r3
 80120d4:	d073      	beq.n	80121be <UART_SetConfig+0x152>
 80120d6:	4b71      	ldr	r3, [pc, #452]	; (801229c <UART_SetConfig+0x230>)
 80120d8:	429d      	cmp	r5, r3
 80120da:	d051      	beq.n	8012180 <UART_SetConfig+0x114>
 80120dc:	2310      	movs	r3, #16
 80120de:	e054      	b.n	801218a <UART_SetConfig+0x11e>
 80120e0:	4b6f      	ldr	r3, [pc, #444]	; (80122a0 <UART_SetConfig+0x234>)
 80120e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80120e4:	2303      	movs	r3, #3
 80120e6:	4013      	ands	r3, r2
 80120e8:	2b01      	cmp	r3, #1
 80120ea:	d009      	beq.n	8012100 <UART_SetConfig+0x94>
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d005      	beq.n	80120fc <UART_SetConfig+0x90>
 80120f0:	2b02      	cmp	r3, #2
 80120f2:	d007      	beq.n	8012104 <UART_SetConfig+0x98>
 80120f4:	2b03      	cmp	r3, #3
 80120f6:	d045      	beq.n	8012184 <UART_SetConfig+0x118>
 80120f8:	2310      	movs	r3, #16
 80120fa:	e046      	b.n	801218a <UART_SetConfig+0x11e>
 80120fc:	2300      	movs	r3, #0
 80120fe:	e044      	b.n	801218a <UART_SetConfig+0x11e>
 8012100:	2304      	movs	r3, #4
 8012102:	e042      	b.n	801218a <UART_SetConfig+0x11e>
 8012104:	2308      	movs	r3, #8
 8012106:	e040      	b.n	801218a <UART_SetConfig+0x11e>
 8012108:	4b65      	ldr	r3, [pc, #404]	; (80122a0 <UART_SetConfig+0x234>)
 801210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801210c:	22c0      	movs	r2, #192	; 0xc0
 801210e:	0292      	lsls	r2, r2, #10
 8012110:	4013      	ands	r3, r2
 8012112:	2280      	movs	r2, #128	; 0x80
 8012114:	0252      	lsls	r2, r2, #9
 8012116:	4293      	cmp	r3, r2
 8012118:	d00e      	beq.n	8012138 <UART_SetConfig+0xcc>
 801211a:	d909      	bls.n	8012130 <UART_SetConfig+0xc4>
 801211c:	2280      	movs	r2, #128	; 0x80
 801211e:	0292      	lsls	r2, r2, #10
 8012120:	4293      	cmp	r3, r2
 8012122:	d00b      	beq.n	801213c <UART_SetConfig+0xd0>
 8012124:	22c0      	movs	r2, #192	; 0xc0
 8012126:	0292      	lsls	r2, r2, #10
 8012128:	4293      	cmp	r3, r2
 801212a:	d109      	bne.n	8012140 <UART_SetConfig+0xd4>
 801212c:	2302      	movs	r3, #2
 801212e:	e02c      	b.n	801218a <UART_SetConfig+0x11e>
 8012130:	2b00      	cmp	r3, #0
 8012132:	d105      	bne.n	8012140 <UART_SetConfig+0xd4>
 8012134:	2300      	movs	r3, #0
 8012136:	e028      	b.n	801218a <UART_SetConfig+0x11e>
 8012138:	2304      	movs	r3, #4
 801213a:	e026      	b.n	801218a <UART_SetConfig+0x11e>
 801213c:	2308      	movs	r3, #8
 801213e:	e024      	b.n	801218a <UART_SetConfig+0x11e>
 8012140:	2310      	movs	r3, #16
 8012142:	e022      	b.n	801218a <UART_SetConfig+0x11e>
 8012144:	4b56      	ldr	r3, [pc, #344]	; (80122a0 <UART_SetConfig+0x234>)
 8012146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012148:	22c0      	movs	r2, #192	; 0xc0
 801214a:	0312      	lsls	r2, r2, #12
 801214c:	4013      	ands	r3, r2
 801214e:	2280      	movs	r2, #128	; 0x80
 8012150:	02d2      	lsls	r2, r2, #11
 8012152:	4293      	cmp	r3, r2
 8012154:	d00e      	beq.n	8012174 <UART_SetConfig+0x108>
 8012156:	d909      	bls.n	801216c <UART_SetConfig+0x100>
 8012158:	2280      	movs	r2, #128	; 0x80
 801215a:	0312      	lsls	r2, r2, #12
 801215c:	4293      	cmp	r3, r2
 801215e:	d00b      	beq.n	8012178 <UART_SetConfig+0x10c>
 8012160:	22c0      	movs	r2, #192	; 0xc0
 8012162:	0312      	lsls	r2, r2, #12
 8012164:	4293      	cmp	r3, r2
 8012166:	d109      	bne.n	801217c <UART_SetConfig+0x110>
 8012168:	2302      	movs	r3, #2
 801216a:	e00e      	b.n	801218a <UART_SetConfig+0x11e>
 801216c:	2b00      	cmp	r3, #0
 801216e:	d105      	bne.n	801217c <UART_SetConfig+0x110>
 8012170:	2300      	movs	r3, #0
 8012172:	e00a      	b.n	801218a <UART_SetConfig+0x11e>
 8012174:	2304      	movs	r3, #4
 8012176:	e008      	b.n	801218a <UART_SetConfig+0x11e>
 8012178:	2308      	movs	r3, #8
 801217a:	e006      	b.n	801218a <UART_SetConfig+0x11e>
 801217c:	2310      	movs	r3, #16
 801217e:	e004      	b.n	801218a <UART_SetConfig+0x11e>
 8012180:	2300      	movs	r3, #0
 8012182:	e002      	b.n	801218a <UART_SetConfig+0x11e>
 8012184:	2302      	movs	r3, #2
 8012186:	e000      	b.n	801218a <UART_SetConfig+0x11e>
 8012188:	2300      	movs	r3, #0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801218a:	2280      	movs	r2, #128	; 0x80
 801218c:	0212      	lsls	r2, r2, #8
 801218e:	69e1      	ldr	r1, [r4, #28]
 8012190:	4291      	cmp	r1, r2
 8012192:	d016      	beq.n	80121c2 <UART_SetConfig+0x156>
    switch (clocksource)
 8012194:	2b02      	cmp	r3, #2
 8012196:	d057      	beq.n	8012248 <UART_SetConfig+0x1dc>
 8012198:	d949      	bls.n	801222e <UART_SetConfig+0x1c2>
 801219a:	2b04      	cmp	r3, #4
 801219c:	d05d      	beq.n	801225a <UART_SetConfig+0x1ee>
 801219e:	2b08      	cmp	r3, #8
 80121a0:	d166      	bne.n	8012270 <UART_SetConfig+0x204>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80121a2:	6861      	ldr	r1, [r4, #4]
 80121a4:	2080      	movs	r0, #128	; 0x80
 80121a6:	0200      	lsls	r0, r0, #8
 80121a8:	f7ed ffd2 	bl	8000150 <__udivsi3>
 80121ac:	0400      	lsls	r0, r0, #16
 80121ae:	0c00      	lsrs	r0, r0, #16
 80121b0:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80121b2:	2000      	movs	r0, #0
        break;
 80121b4:	e027      	b.n	8012206 <UART_SetConfig+0x19a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80121b6:	2300      	movs	r3, #0
 80121b8:	e7e7      	b.n	801218a <UART_SetConfig+0x11e>
 80121ba:	2300      	movs	r3, #0
 80121bc:	e7e5      	b.n	801218a <UART_SetConfig+0x11e>
 80121be:	2300      	movs	r3, #0
 80121c0:	e7e3      	b.n	801218a <UART_SetConfig+0x11e>
    switch (clocksource)
 80121c2:	2b02      	cmp	r3, #2
 80121c4:	d020      	beq.n	8012208 <UART_SetConfig+0x19c>
 80121c6:	d90b      	bls.n	80121e0 <UART_SetConfig+0x174>
 80121c8:	2b04      	cmp	r3, #4
 80121ca:	d024      	beq.n	8012216 <UART_SetConfig+0x1aa>
 80121cc:	2b08      	cmp	r3, #8
 80121ce:	d12b      	bne.n	8012228 <UART_SetConfig+0x1bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80121d0:	6861      	ldr	r1, [r4, #4]
 80121d2:	2080      	movs	r0, #128	; 0x80
 80121d4:	0240      	lsls	r0, r0, #9
 80121d6:	f7ed ffbb 	bl	8000150 <__udivsi3>
 80121da:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80121dc:	2000      	movs	r0, #0
        break;
 80121de:	e009      	b.n	80121f4 <UART_SetConfig+0x188>
    switch (clocksource)
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d121      	bne.n	8012228 <UART_SetConfig+0x1bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80121e4:	f7ff face 	bl	8011784 <HAL_RCC_GetPCLK1Freq>
 80121e8:	0040      	lsls	r0, r0, #1
 80121ea:	6861      	ldr	r1, [r4, #4]
 80121ec:	f7ed ffb0 	bl	8000150 <__udivsi3>
 80121f0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80121f2:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 80121f4:	220f      	movs	r2, #15
 80121f6:	0019      	movs	r1, r3
 80121f8:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80121fa:	105b      	asrs	r3, r3, #1
 80121fc:	3a08      	subs	r2, #8
 80121fe:	4013      	ands	r3, r2
 8012200:	430b      	orrs	r3, r1
    huart->Instance->BRR = brrtemp;
 8012202:	6822      	ldr	r2, [r4, #0]
 8012204:	60d3      	str	r3, [r2, #12]
}
 8012206:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012208:	6861      	ldr	r1, [r4, #4]
 801220a:	4826      	ldr	r0, [pc, #152]	; (80122a4 <UART_SetConfig+0x238>)
 801220c:	f7ed ffa0 	bl	8000150 <__udivsi3>
 8012210:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012212:	2000      	movs	r0, #0
        break;
 8012214:	e7ee      	b.n	80121f4 <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012216:	f7ff fa55 	bl	80116c4 <HAL_RCC_GetSysClockFreq>
 801221a:	0040      	lsls	r0, r0, #1
 801221c:	6861      	ldr	r1, [r4, #4]
 801221e:	f7ed ff97 	bl	8000150 <__udivsi3>
 8012222:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012224:	2000      	movs	r0, #0
        break;
 8012226:	e7e5      	b.n	80121f4 <UART_SetConfig+0x188>
        ret = HAL_ERROR;
 8012228:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 801222a:	2300      	movs	r3, #0
 801222c:	e7e2      	b.n	80121f4 <UART_SetConfig+0x188>
    switch (clocksource)
 801222e:	2b00      	cmp	r3, #0
 8012230:	d11e      	bne.n	8012270 <UART_SetConfig+0x204>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012232:	f7ff faa7 	bl	8011784 <HAL_RCC_GetPCLK1Freq>
 8012236:	6861      	ldr	r1, [r4, #4]
 8012238:	f7ed ff8a 	bl	8000150 <__udivsi3>
 801223c:	6823      	ldr	r3, [r4, #0]
 801223e:	0400      	lsls	r0, r0, #16
 8012240:	0c00      	lsrs	r0, r0, #16
 8012242:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012244:	2000      	movs	r0, #0
        break;
 8012246:	e7de      	b.n	8012206 <UART_SetConfig+0x19a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8012248:	6861      	ldr	r1, [r4, #4]
 801224a:	4817      	ldr	r0, [pc, #92]	; (80122a8 <UART_SetConfig+0x23c>)
 801224c:	f7ed ff80 	bl	8000150 <__udivsi3>
 8012250:	0400      	lsls	r0, r0, #16
 8012252:	0c00      	lsrs	r0, r0, #16
 8012254:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012256:	2000      	movs	r0, #0
        break;
 8012258:	e7d5      	b.n	8012206 <UART_SetConfig+0x19a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801225a:	f7ff fa33 	bl	80116c4 <HAL_RCC_GetSysClockFreq>
 801225e:	6861      	ldr	r1, [r4, #4]
 8012260:	f7ed ff76 	bl	8000150 <__udivsi3>
 8012264:	6823      	ldr	r3, [r4, #0]
 8012266:	0400      	lsls	r0, r0, #16
 8012268:	0c00      	lsrs	r0, r0, #16
 801226a:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801226c:	2000      	movs	r0, #0
        break;
 801226e:	e7ca      	b.n	8012206 <UART_SetConfig+0x19a>
        ret = HAL_ERROR;
 8012270:	2001      	movs	r0, #1
 8012272:	e7c8      	b.n	8012206 <UART_SetConfig+0x19a>
 8012274:	efff69f3 	.word	0xefff69f3
 8012278:	ffffcfff 	.word	0xffffcfff
 801227c:	fffff4ff 	.word	0xfffff4ff
 8012280:	40013800 	.word	0x40013800
 8012284:	40004400 	.word	0x40004400
 8012288:	40004800 	.word	0x40004800
 801228c:	40004c00 	.word	0x40004c00
 8012290:	40005000 	.word	0x40005000
 8012294:	40011400 	.word	0x40011400
 8012298:	40011800 	.word	0x40011800
 801229c:	40011c00 	.word	0x40011c00
 80122a0:	40021000 	.word	0x40021000
 80122a4:	00f42400 	.word	0x00f42400
 80122a8:	007a1200 	.word	0x007a1200

080122ac <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80122ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80122ae:	07db      	lsls	r3, r3, #31
 80122b0:	d506      	bpl.n	80122c0 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80122b2:	6802      	ldr	r2, [r0, #0]
 80122b4:	6853      	ldr	r3, [r2, #4]
 80122b6:	492c      	ldr	r1, [pc, #176]	; (8012368 <UART_AdvFeatureConfig+0xbc>)
 80122b8:	400b      	ands	r3, r1
 80122ba:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80122bc:	430b      	orrs	r3, r1
 80122be:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80122c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80122c2:	079b      	lsls	r3, r3, #30
 80122c4:	d506      	bpl.n	80122d4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80122c6:	6802      	ldr	r2, [r0, #0]
 80122c8:	6853      	ldr	r3, [r2, #4]
 80122ca:	4928      	ldr	r1, [pc, #160]	; (801236c <UART_AdvFeatureConfig+0xc0>)
 80122cc:	400b      	ands	r3, r1
 80122ce:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80122d0:	430b      	orrs	r3, r1
 80122d2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80122d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80122d6:	075b      	lsls	r3, r3, #29
 80122d8:	d506      	bpl.n	80122e8 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80122da:	6802      	ldr	r2, [r0, #0]
 80122dc:	6853      	ldr	r3, [r2, #4]
 80122de:	4924      	ldr	r1, [pc, #144]	; (8012370 <UART_AdvFeatureConfig+0xc4>)
 80122e0:	400b      	ands	r3, r1
 80122e2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80122e4:	430b      	orrs	r3, r1
 80122e6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80122e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80122ea:	071b      	lsls	r3, r3, #28
 80122ec:	d506      	bpl.n	80122fc <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80122ee:	6802      	ldr	r2, [r0, #0]
 80122f0:	6853      	ldr	r3, [r2, #4]
 80122f2:	4920      	ldr	r1, [pc, #128]	; (8012374 <UART_AdvFeatureConfig+0xc8>)
 80122f4:	400b      	ands	r3, r1
 80122f6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80122f8:	430b      	orrs	r3, r1
 80122fa:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80122fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80122fe:	06db      	lsls	r3, r3, #27
 8012300:	d506      	bpl.n	8012310 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012302:	6802      	ldr	r2, [r0, #0]
 8012304:	6893      	ldr	r3, [r2, #8]
 8012306:	491c      	ldr	r1, [pc, #112]	; (8012378 <UART_AdvFeatureConfig+0xcc>)
 8012308:	400b      	ands	r3, r1
 801230a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 801230c:	430b      	orrs	r3, r1
 801230e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012310:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012312:	069b      	lsls	r3, r3, #26
 8012314:	d506      	bpl.n	8012324 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012316:	6802      	ldr	r2, [r0, #0]
 8012318:	6893      	ldr	r3, [r2, #8]
 801231a:	4918      	ldr	r1, [pc, #96]	; (801237c <UART_AdvFeatureConfig+0xd0>)
 801231c:	400b      	ands	r3, r1
 801231e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8012320:	430b      	orrs	r3, r1
 8012322:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012324:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012326:	065b      	lsls	r3, r3, #25
 8012328:	d50b      	bpl.n	8012342 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801232a:	6802      	ldr	r2, [r0, #0]
 801232c:	6853      	ldr	r3, [r2, #4]
 801232e:	4914      	ldr	r1, [pc, #80]	; (8012380 <UART_AdvFeatureConfig+0xd4>)
 8012330:	400b      	ands	r3, r1
 8012332:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8012334:	430b      	orrs	r3, r1
 8012336:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012338:	2380      	movs	r3, #128	; 0x80
 801233a:	035b      	lsls	r3, r3, #13
 801233c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801233e:	429a      	cmp	r2, r3
 8012340:	d00a      	beq.n	8012358 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012342:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012344:	061b      	lsls	r3, r3, #24
 8012346:	d506      	bpl.n	8012356 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012348:	6802      	ldr	r2, [r0, #0]
 801234a:	6853      	ldr	r3, [r2, #4]
 801234c:	490d      	ldr	r1, [pc, #52]	; (8012384 <UART_AdvFeatureConfig+0xd8>)
 801234e:	400b      	ands	r3, r1
 8012350:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8012352:	430b      	orrs	r3, r1
 8012354:	6053      	str	r3, [r2, #4]
}
 8012356:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012358:	6802      	ldr	r2, [r0, #0]
 801235a:	6853      	ldr	r3, [r2, #4]
 801235c:	490a      	ldr	r1, [pc, #40]	; (8012388 <UART_AdvFeatureConfig+0xdc>)
 801235e:	400b      	ands	r3, r1
 8012360:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8012362:	430b      	orrs	r3, r1
 8012364:	6053      	str	r3, [r2, #4]
 8012366:	e7ec      	b.n	8012342 <UART_AdvFeatureConfig+0x96>
 8012368:	fffdffff 	.word	0xfffdffff
 801236c:	fffeffff 	.word	0xfffeffff
 8012370:	fffbffff 	.word	0xfffbffff
 8012374:	ffff7fff 	.word	0xffff7fff
 8012378:	ffffefff 	.word	0xffffefff
 801237c:	ffffdfff 	.word	0xffffdfff
 8012380:	ffefffff 	.word	0xffefffff
 8012384:	fff7ffff 	.word	0xfff7ffff
 8012388:	ff9fffff 	.word	0xff9fffff

0801238c <UART_WaitOnFlagUntilTimeout>:
{
 801238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801238e:	46c6      	mov	lr, r8
 8012390:	b500      	push	{lr}
 8012392:	0006      	movs	r6, r0
 8012394:	000c      	movs	r4, r1
 8012396:	0017      	movs	r7, r2
 8012398:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 801239a:	f7fd f9f7 	bl	800f78c <HAL_GetTick>
 801239e:	4680      	mov	r8, r0
  if(Status == RESET)
 80123a0:	2f00      	cmp	r7, #0
 80123a2:	d029      	beq.n	80123f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80123a4:	6833      	ldr	r3, [r6, #0]
 80123a6:	69db      	ldr	r3, [r3, #28]
 80123a8:	4023      	ands	r3, r4
 80123aa:	42a3      	cmp	r3, r4
 80123ac:	d152      	bne.n	8012454 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 80123ae:	1c6b      	adds	r3, r5, #1
 80123b0:	d0f8      	beq.n	80123a4 <UART_WaitOnFlagUntilTimeout+0x18>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80123b2:	2d00      	cmp	r5, #0
 80123b4:	d005      	beq.n	80123c2 <UART_WaitOnFlagUntilTimeout+0x36>
 80123b6:	f7fd f9e9 	bl	800f78c <HAL_GetTick>
 80123ba:	4643      	mov	r3, r8
 80123bc:	1ac0      	subs	r0, r0, r3
 80123be:	42a8      	cmp	r0, r5
 80123c0:	d9f0      	bls.n	80123a4 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80123c2:	6832      	ldr	r2, [r6, #0]
 80123c4:	6813      	ldr	r3, [r2, #0]
 80123c6:	2180      	movs	r1, #128	; 0x80
 80123c8:	438b      	bics	r3, r1
 80123ca:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80123cc:	6832      	ldr	r2, [r6, #0]
 80123ce:	6813      	ldr	r3, [r2, #0]
 80123d0:	3960      	subs	r1, #96	; 0x60
 80123d2:	438b      	bics	r3, r1
 80123d4:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80123d6:	6832      	ldr	r2, [r6, #0]
 80123d8:	6813      	ldr	r3, [r2, #0]
 80123da:	491f      	ldr	r1, [pc, #124]	; (8012458 <UART_WaitOnFlagUntilTimeout+0xcc>)
 80123dc:	400b      	ands	r3, r1
 80123de:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80123e0:	6831      	ldr	r1, [r6, #0]
 80123e2:	688b      	ldr	r3, [r1, #8]
 80123e4:	2201      	movs	r2, #1
 80123e6:	4393      	bics	r3, r2
 80123e8:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80123ea:	2369      	movs	r3, #105	; 0x69
 80123ec:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 80123ee:	3b01      	subs	r3, #1
 80123f0:	2200      	movs	r2, #0
 80123f2:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80123f4:	2003      	movs	r0, #3
 80123f6:	e02a      	b.n	801244e <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80123f8:	6833      	ldr	r3, [r6, #0]
 80123fa:	69db      	ldr	r3, [r3, #28]
 80123fc:	4023      	ands	r3, r4
 80123fe:	42a3      	cmp	r3, r4
 8012400:	d024      	beq.n	801244c <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8012402:	1c6b      	adds	r3, r5, #1
 8012404:	d0f8      	beq.n	80123f8 <UART_WaitOnFlagUntilTimeout+0x6c>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012406:	2d00      	cmp	r5, #0
 8012408:	d005      	beq.n	8012416 <UART_WaitOnFlagUntilTimeout+0x8a>
 801240a:	f7fd f9bf 	bl	800f78c <HAL_GetTick>
 801240e:	4643      	mov	r3, r8
 8012410:	1ac0      	subs	r0, r0, r3
 8012412:	42a8      	cmp	r0, r5
 8012414:	d9f0      	bls.n	80123f8 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012416:	6832      	ldr	r2, [r6, #0]
 8012418:	6813      	ldr	r3, [r2, #0]
 801241a:	2180      	movs	r1, #128	; 0x80
 801241c:	438b      	bics	r3, r1
 801241e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012420:	6832      	ldr	r2, [r6, #0]
 8012422:	6813      	ldr	r3, [r2, #0]
 8012424:	3960      	subs	r1, #96	; 0x60
 8012426:	438b      	bics	r3, r1
 8012428:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801242a:	6832      	ldr	r2, [r6, #0]
 801242c:	6813      	ldr	r3, [r2, #0]
 801242e:	490a      	ldr	r1, [pc, #40]	; (8012458 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012430:	400b      	ands	r3, r1
 8012432:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012434:	6831      	ldr	r1, [r6, #0]
 8012436:	688b      	ldr	r3, [r1, #8]
 8012438:	2201      	movs	r2, #1
 801243a:	4393      	bics	r3, r2
 801243c:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 801243e:	2369      	movs	r3, #105	; 0x69
 8012440:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8012442:	3b01      	subs	r3, #1
 8012444:	2200      	movs	r2, #0
 8012446:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8012448:	2003      	movs	r0, #3
 801244a:	e000      	b.n	801244e <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 801244c:	2000      	movs	r0, #0
}
 801244e:	bc04      	pop	{r2}
 8012450:	4690      	mov	r8, r2
 8012452:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8012454:	2000      	movs	r0, #0
 8012456:	e7fa      	b.n	801244e <UART_WaitOnFlagUntilTimeout+0xc2>
 8012458:	fffffeff 	.word	0xfffffeff

0801245c <HAL_UART_Transmit>:
{
 801245c:	b570      	push	{r4, r5, r6, lr}
 801245e:	0004      	movs	r4, r0
 8012460:	000e      	movs	r6, r1
 8012462:	001d      	movs	r5, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012464:	2369      	movs	r3, #105	; 0x69
 8012466:	5cc3      	ldrb	r3, [r0, r3]
 8012468:	2b01      	cmp	r3, #1
 801246a:	d003      	beq.n	8012474 <HAL_UART_Transmit+0x18>
 801246c:	2369      	movs	r3, #105	; 0x69
 801246e:	5cc3      	ldrb	r3, [r0, r3]
 8012470:	2b22      	cmp	r3, #34	; 0x22
 8012472:	d155      	bne.n	8012520 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 8012474:	2e00      	cmp	r6, #0
 8012476:	d055      	beq.n	8012524 <HAL_UART_Transmit+0xc8>
 8012478:	2a00      	cmp	r2, #0
 801247a:	d055      	beq.n	8012528 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 801247c:	2368      	movs	r3, #104	; 0x68
 801247e:	5ce3      	ldrb	r3, [r4, r3]
 8012480:	2b01      	cmp	r3, #1
 8012482:	d053      	beq.n	801252c <HAL_UART_Transmit+0xd0>
 8012484:	2368      	movs	r3, #104	; 0x68
 8012486:	2101      	movs	r1, #1
 8012488:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801248a:	2300      	movs	r3, #0
 801248c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801248e:	3369      	adds	r3, #105	; 0x69
 8012490:	5ce3      	ldrb	r3, [r4, r3]
 8012492:	2b22      	cmp	r3, #34	; 0x22
 8012494:	d007      	beq.n	80124a6 <HAL_UART_Transmit+0x4a>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012496:	2369      	movs	r3, #105	; 0x69
 8012498:	2112      	movs	r1, #18
 801249a:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 801249c:	2350      	movs	r3, #80	; 0x50
 801249e:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80124a0:	3302      	adds	r3, #2
 80124a2:	52e2      	strh	r2, [r4, r3]
    while(huart->TxXferCount > 0)
 80124a4:	e007      	b.n	80124b6 <HAL_UART_Transmit+0x5a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80124a6:	3347      	adds	r3, #71	; 0x47
 80124a8:	3131      	adds	r1, #49	; 0x31
 80124aa:	54e1      	strb	r1, [r4, r3]
 80124ac:	e7f6      	b.n	801249c <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80124ae:	7833      	ldrb	r3, [r6, #0]
 80124b0:	6822      	ldr	r2, [r4, #0]
 80124b2:	8513      	strh	r3, [r2, #40]	; 0x28
 80124b4:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 80124b6:	2352      	movs	r3, #82	; 0x52
 80124b8:	5ae3      	ldrh	r3, [r4, r3]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d019      	beq.n	80124f2 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 80124be:	3b01      	subs	r3, #1
 80124c0:	2252      	movs	r2, #82	; 0x52
 80124c2:	52a3      	strh	r3, [r4, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80124c4:	002b      	movs	r3, r5
 80124c6:	2200      	movs	r2, #0
 80124c8:	2180      	movs	r1, #128	; 0x80
 80124ca:	0020      	movs	r0, r4
 80124cc:	f7ff ff5e 	bl	801238c <UART_WaitOnFlagUntilTimeout>
 80124d0:	2800      	cmp	r0, #0
 80124d2:	d12d      	bne.n	8012530 <HAL_UART_Transmit+0xd4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80124d4:	2380      	movs	r3, #128	; 0x80
 80124d6:	015b      	lsls	r3, r3, #5
 80124d8:	68a2      	ldr	r2, [r4, #8]
 80124da:	429a      	cmp	r2, r3
 80124dc:	d1e7      	bne.n	80124ae <HAL_UART_Transmit+0x52>
 80124de:	6923      	ldr	r3, [r4, #16]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d1e4      	bne.n	80124ae <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80124e4:	8833      	ldrh	r3, [r6, #0]
 80124e6:	05db      	lsls	r3, r3, #23
 80124e8:	0ddb      	lsrs	r3, r3, #23
 80124ea:	6822      	ldr	r2, [r4, #0]
 80124ec:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80124ee:	3602      	adds	r6, #2
 80124f0:	e7e1      	b.n	80124b6 <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80124f2:	002b      	movs	r3, r5
 80124f4:	2200      	movs	r2, #0
 80124f6:	2140      	movs	r1, #64	; 0x40
 80124f8:	0020      	movs	r0, r4
 80124fa:	f7ff ff47 	bl	801238c <UART_WaitOnFlagUntilTimeout>
 80124fe:	2800      	cmp	r0, #0
 8012500:	d118      	bne.n	8012534 <HAL_UART_Transmit+0xd8>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012502:	2369      	movs	r3, #105	; 0x69
 8012504:	5ce3      	ldrb	r3, [r4, r3]
 8012506:	2b32      	cmp	r3, #50	; 0x32
 8012508:	d006      	beq.n	8012518 <HAL_UART_Transmit+0xbc>
      huart->State = HAL_UART_STATE_READY;
 801250a:	2369      	movs	r3, #105	; 0x69
 801250c:	2201      	movs	r2, #1
 801250e:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8012510:	2368      	movs	r3, #104	; 0x68
 8012512:	2200      	movs	r2, #0
 8012514:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012516:	e004      	b.n	8012522 <HAL_UART_Transmit+0xc6>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012518:	3337      	adds	r3, #55	; 0x37
 801251a:	2222      	movs	r2, #34	; 0x22
 801251c:	54e2      	strb	r2, [r4, r3]
 801251e:	e7f7      	b.n	8012510 <HAL_UART_Transmit+0xb4>
    return HAL_BUSY;
 8012520:	2002      	movs	r0, #2
}
 8012522:	bd70      	pop	{r4, r5, r6, pc}
      return  HAL_ERROR;
 8012524:	2001      	movs	r0, #1
 8012526:	e7fc      	b.n	8012522 <HAL_UART_Transmit+0xc6>
 8012528:	2001      	movs	r0, #1
 801252a:	e7fa      	b.n	8012522 <HAL_UART_Transmit+0xc6>
    __HAL_LOCK(huart);
 801252c:	2002      	movs	r0, #2
 801252e:	e7f8      	b.n	8012522 <HAL_UART_Transmit+0xc6>
        return HAL_TIMEOUT;
 8012530:	2003      	movs	r0, #3
 8012532:	e7f6      	b.n	8012522 <HAL_UART_Transmit+0xc6>
      return HAL_TIMEOUT;
 8012534:	2003      	movs	r0, #3
 8012536:	e7f4      	b.n	8012522 <HAL_UART_Transmit+0xc6>

08012538 <UART_CheckIdleState>:
{
 8012538:	b510      	push	{r4, lr}
 801253a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801253c:	2300      	movs	r3, #0
 801253e:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012540:	6803      	ldr	r3, [r0, #0]
 8012542:	4a18      	ldr	r2, [pc, #96]	; (80125a4 <UART_CheckIdleState+0x6c>)
 8012544:	4293      	cmp	r3, r2
 8012546:	d005      	beq.n	8012554 <UART_CheckIdleState+0x1c>
 8012548:	4a17      	ldr	r2, [pc, #92]	; (80125a8 <UART_CheckIdleState+0x70>)
 801254a:	4293      	cmp	r3, r2
 801254c:	d002      	beq.n	8012554 <UART_CheckIdleState+0x1c>
 801254e:	4a17      	ldr	r2, [pc, #92]	; (80125ac <UART_CheckIdleState+0x74>)
 8012550:	4293      	cmp	r3, r2
 8012552:	d106      	bne.n	8012562 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	071b      	lsls	r3, r3, #28
 8012558:	d40b      	bmi.n	8012572 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801255a:	6823      	ldr	r3, [r4, #0]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	075b      	lsls	r3, r3, #29
 8012560:	d413      	bmi.n	801258a <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8012562:	2369      	movs	r3, #105	; 0x69
 8012564:	2201      	movs	r2, #1
 8012566:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8012568:	3b01      	subs	r3, #1
 801256a:	2200      	movs	r2, #0
 801256c:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 801256e:	2000      	movs	r0, #0
}
 8012570:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012572:	23fa      	movs	r3, #250	; 0xfa
 8012574:	2180      	movs	r1, #128	; 0x80
 8012576:	009b      	lsls	r3, r3, #2
 8012578:	2200      	movs	r2, #0
 801257a:	0389      	lsls	r1, r1, #14
 801257c:	0020      	movs	r0, r4
 801257e:	f7ff ff05 	bl	801238c <UART_WaitOnFlagUntilTimeout>
 8012582:	2800      	cmp	r0, #0
 8012584:	d0e9      	beq.n	801255a <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8012586:	2003      	movs	r0, #3
 8012588:	e7f2      	b.n	8012570 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801258a:	23fa      	movs	r3, #250	; 0xfa
 801258c:	2180      	movs	r1, #128	; 0x80
 801258e:	009b      	lsls	r3, r3, #2
 8012590:	2200      	movs	r2, #0
 8012592:	03c9      	lsls	r1, r1, #15
 8012594:	0020      	movs	r0, r4
 8012596:	f7ff fef9 	bl	801238c <UART_WaitOnFlagUntilTimeout>
 801259a:	2800      	cmp	r0, #0
 801259c:	d0e1      	beq.n	8012562 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 801259e:	2003      	movs	r0, #3
 80125a0:	e7e6      	b.n	8012570 <UART_CheckIdleState+0x38>
 80125a2:	46c0      	nop			; (mov r8, r8)
 80125a4:	40013800 	.word	0x40013800
 80125a8:	40004400 	.word	0x40004400
 80125ac:	40004800 	.word	0x40004800

080125b0 <HAL_UART_Init>:
{
 80125b0:	b510      	push	{r4, lr}
 80125b2:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80125b4:	d030      	beq.n	8012618 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 80125b6:	2369      	movs	r3, #105	; 0x69
 80125b8:	5cc3      	ldrb	r3, [r0, r3]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d022      	beq.n	8012604 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 80125be:	2369      	movs	r3, #105	; 0x69
 80125c0:	2202      	movs	r2, #2
 80125c2:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80125c4:	6822      	ldr	r2, [r4, #0]
 80125c6:	6813      	ldr	r3, [r2, #0]
 80125c8:	2101      	movs	r1, #1
 80125ca:	438b      	bics	r3, r1
 80125cc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80125ce:	0020      	movs	r0, r4
 80125d0:	f7ff fd4c 	bl	801206c <UART_SetConfig>
 80125d4:	2801      	cmp	r0, #1
 80125d6:	d014      	beq.n	8012602 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80125d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d118      	bne.n	8012610 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80125de:	6822      	ldr	r2, [r4, #0]
 80125e0:	6853      	ldr	r3, [r2, #4]
 80125e2:	490e      	ldr	r1, [pc, #56]	; (801261c <HAL_UART_Init+0x6c>)
 80125e4:	400b      	ands	r3, r1
 80125e6:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80125e8:	6822      	ldr	r2, [r4, #0]
 80125ea:	6893      	ldr	r3, [r2, #8]
 80125ec:	212a      	movs	r1, #42	; 0x2a
 80125ee:	438b      	bics	r3, r1
 80125f0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80125f2:	6822      	ldr	r2, [r4, #0]
 80125f4:	6813      	ldr	r3, [r2, #0]
 80125f6:	3929      	subs	r1, #41	; 0x29
 80125f8:	430b      	orrs	r3, r1
 80125fa:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80125fc:	0020      	movs	r0, r4
 80125fe:	f7ff ff9b 	bl	8012538 <UART_CheckIdleState>
}
 8012602:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8012604:	3368      	adds	r3, #104	; 0x68
 8012606:	2200      	movs	r2, #0
 8012608:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 801260a:	f7fa fed5 	bl	800d3b8 <HAL_UART_MspInit>
 801260e:	e7d6      	b.n	80125be <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8012610:	0020      	movs	r0, r4
 8012612:	f7ff fe4b 	bl	80122ac <UART_AdvFeatureConfig>
 8012616:	e7e2      	b.n	80125de <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8012618:	2001      	movs	r0, #1
 801261a:	e7f2      	b.n	8012602 <HAL_UART_Init+0x52>
 801261c:	ffffb7ff 	.word	0xffffb7ff

08012620 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012620:	2369      	movs	r3, #105	; 0x69
 8012622:	5cc3      	ldrb	r3, [r0, r3]
 8012624:	2b12      	cmp	r3, #18
 8012626:	d003      	beq.n	8012630 <UART_Transmit_IT+0x10>
 8012628:	2369      	movs	r3, #105	; 0x69
 801262a:	5cc3      	ldrb	r3, [r0, r3]
 801262c:	2b32      	cmp	r3, #50	; 0x32
 801262e:	d12d      	bne.n	801268c <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 8012630:	2352      	movs	r3, #82	; 0x52
 8012632:	5ac3      	ldrh	r3, [r0, r3]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d010      	beq.n	801265a <UART_Transmit_IT+0x3a>

      return HAL_OK;
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012638:	2380      	movs	r3, #128	; 0x80
 801263a:	015b      	lsls	r3, r3, #5
 801263c:	6882      	ldr	r2, [r0, #8]
 801263e:	429a      	cmp	r2, r3
 8012640:	d017      	beq.n	8012672 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8012642:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012644:	1c5a      	adds	r2, r3, #1
 8012646:	64c2      	str	r2, [r0, #76]	; 0x4c
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	6802      	ldr	r2, [r0, #0]
 801264c:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 801264e:	2252      	movs	r2, #82	; 0x52
 8012650:	5a83      	ldrh	r3, [r0, r2]
 8012652:	3b01      	subs	r3, #1
 8012654:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 8012656:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012658:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801265a:	6802      	ldr	r2, [r0, #0]
 801265c:	6813      	ldr	r3, [r2, #0]
 801265e:	2180      	movs	r1, #128	; 0x80
 8012660:	438b      	bics	r3, r1
 8012662:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012664:	6802      	ldr	r2, [r0, #0]
 8012666:	6813      	ldr	r3, [r2, #0]
 8012668:	3940      	subs	r1, #64	; 0x40
 801266a:	430b      	orrs	r3, r1
 801266c:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 801266e:	2000      	movs	r0, #0
 8012670:	e7f2      	b.n	8012658 <UART_Transmit_IT+0x38>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012672:	6903      	ldr	r3, [r0, #16]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d1e4      	bne.n	8012642 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012678:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801267a:	881b      	ldrh	r3, [r3, #0]
 801267c:	05db      	lsls	r3, r3, #23
 801267e:	0ddb      	lsrs	r3, r3, #23
 8012680:	6802      	ldr	r2, [r0, #0]
 8012682:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8012684:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012686:	3302      	adds	r3, #2
 8012688:	64c3      	str	r3, [r0, #76]	; 0x4c
 801268a:	e7e0      	b.n	801264e <UART_Transmit_IT+0x2e>
    return HAL_BUSY;
 801268c:	2002      	movs	r0, #2
 801268e:	e7e3      	b.n	8012658 <UART_Transmit_IT+0x38>

08012690 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012690:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012692:	6802      	ldr	r2, [r0, #0]
 8012694:	6813      	ldr	r3, [r2, #0]
 8012696:	2140      	movs	r1, #64	; 0x40
 8012698:	438b      	bics	r3, r1
 801269a:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801269c:	2369      	movs	r3, #105	; 0x69
 801269e:	5cc3      	ldrb	r3, [r0, r3]
 80126a0:	2b32      	cmp	r3, #50	; 0x32
 80126a2:	d00a      	beq.n	80126ba <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80126a4:	6801      	ldr	r1, [r0, #0]
 80126a6:	688b      	ldr	r3, [r1, #8]
 80126a8:	2201      	movs	r2, #1
 80126aa:	4393      	bics	r3, r2
 80126ac:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 80126ae:	2369      	movs	r3, #105	; 0x69
 80126b0:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 80126b2:	f7fa fab1 	bl	800cc18 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80126b6:	2000      	movs	r0, #0
 80126b8:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 80126ba:	3337      	adds	r3, #55	; 0x37
 80126bc:	2222      	movs	r2, #34	; 0x22
 80126be:	54c2      	strb	r2, [r0, r3]
 80126c0:	e7f7      	b.n	80126b2 <UART_EndTransmit_IT+0x22>
	...

080126c4 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80126c4:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 80126c6:	235c      	movs	r3, #92	; 0x5c
 80126c8:	5ac3      	ldrh	r3, [r0, r3]

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80126ca:	2269      	movs	r2, #105	; 0x69
 80126cc:	5c82      	ldrb	r2, [r0, r2]
 80126ce:	2a22      	cmp	r2, #34	; 0x22
 80126d0:	d003      	beq.n	80126da <UART_Receive_IT+0x16>
 80126d2:	2269      	movs	r2, #105	; 0x69
 80126d4:	5c82      	ldrb	r2, [r0, r2]
 80126d6:	2a32      	cmp	r2, #50	; 0x32
 80126d8:	d13c      	bne.n	8012754 <UART_Receive_IT+0x90>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80126da:	2280      	movs	r2, #128	; 0x80
 80126dc:	0152      	lsls	r2, r2, #5
 80126de:	6881      	ldr	r1, [r0, #8]
 80126e0:	4291      	cmp	r1, r2
 80126e2:	d027      	beq.n	8012734 <UART_Receive_IT+0x70>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80126e4:	6802      	ldr	r2, [r0, #0]
 80126e6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80126e8:	b2db      	uxtb	r3, r3
 80126ea:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80126ec:	1c4c      	adds	r4, r1, #1
 80126ee:	6544      	str	r4, [r0, #84]	; 0x54
 80126f0:	4013      	ands	r3, r2
 80126f2:	700b      	strb	r3, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 80126f4:	225a      	movs	r2, #90	; 0x5a
 80126f6:	5a83      	ldrh	r3, [r0, r2]
 80126f8:	3b01      	subs	r3, #1
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	5283      	strh	r3, [r0, r2]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d12a      	bne.n	8012758 <UART_Receive_IT+0x94>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012702:	6802      	ldr	r2, [r0, #0]
 8012704:	6813      	ldr	r3, [r2, #0]
 8012706:	2120      	movs	r1, #32
 8012708:	438b      	bics	r3, r1
 801270a:	6013      	str	r3, [r2, #0]

      /* Check if a transmit Process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801270c:	2369      	movs	r3, #105	; 0x69
 801270e:	5cc3      	ldrb	r3, [r0, r3]
 8012710:	2b32      	cmp	r3, #50	; 0x32
 8012712:	d01b      	beq.n	801274c <UART_Receive_IT+0x88>
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012714:	6802      	ldr	r2, [r0, #0]
 8012716:	6813      	ldr	r3, [r2, #0]
 8012718:	4910      	ldr	r1, [pc, #64]	; (801275c <UART_Receive_IT+0x98>)
 801271a:	400b      	ands	r3, r1
 801271c:	6013      	str	r3, [r2, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801271e:	6801      	ldr	r1, [r0, #0]
 8012720:	688b      	ldr	r3, [r1, #8]
 8012722:	2201      	movs	r2, #1
 8012724:	4393      	bics	r3, r2
 8012726:	608b      	str	r3, [r1, #8]

        huart->State = HAL_UART_STATE_READY;
 8012728:	2369      	movs	r3, #105	; 0x69
 801272a:	54c2      	strb	r2, [r0, r3]
      }

      HAL_UART_RxCpltCallback(huart);
 801272c:	f7fa fab0 	bl	800cc90 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8012730:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012732:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012734:	6902      	ldr	r2, [r0, #16]
 8012736:	2a00      	cmp	r2, #0
 8012738:	d1d4      	bne.n	80126e4 <UART_Receive_IT+0x20>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 801273a:	6802      	ldr	r2, [r0, #0]
 801273c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 801273e:	4013      	ands	r3, r2
 8012740:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8012742:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8012744:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8012746:	3302      	adds	r3, #2
 8012748:	6543      	str	r3, [r0, #84]	; 0x54
 801274a:	e7d3      	b.n	80126f4 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 801274c:	3337      	adds	r3, #55	; 0x37
 801274e:	2212      	movs	r2, #18
 8012750:	54c2      	strb	r2, [r0, r3]
 8012752:	e7eb      	b.n	801272c <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8012754:	2002      	movs	r0, #2
 8012756:	e7ec      	b.n	8012732 <UART_Receive_IT+0x6e>
    return HAL_OK;
 8012758:	2000      	movs	r0, #0
 801275a:	e7ea      	b.n	8012732 <UART_Receive_IT+0x6e>
 801275c:	fffffeff 	.word	0xfffffeff

08012760 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8012760:	4770      	bx	lr

08012762 <HAL_UART_IRQHandler>:
{
 8012762:	b510      	push	{r4, lr}
 8012764:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8012766:	6803      	ldr	r3, [r0, #0]
 8012768:	69da      	ldr	r2, [r3, #28]
 801276a:	07d2      	lsls	r2, r2, #31
 801276c:	d509      	bpl.n	8012782 <HAL_UART_IRQHandler+0x20>
 801276e:	681a      	ldr	r2, [r3, #0]
 8012770:	05d2      	lsls	r2, r2, #23
 8012772:	d506      	bpl.n	8012782 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8012774:	2201      	movs	r2, #1
 8012776:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012778:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801277a:	4313      	orrs	r3, r2
 801277c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801277e:	2369      	movs	r3, #105	; 0x69
 8012780:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012782:	6823      	ldr	r3, [r4, #0]
 8012784:	69da      	ldr	r2, [r3, #28]
 8012786:	0792      	lsls	r2, r2, #30
 8012788:	d50b      	bpl.n	80127a2 <HAL_UART_IRQHandler+0x40>
 801278a:	689a      	ldr	r2, [r3, #8]
 801278c:	07d2      	lsls	r2, r2, #31
 801278e:	d508      	bpl.n	80127a2 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8012790:	2202      	movs	r2, #2
 8012792:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012794:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012796:	3202      	adds	r2, #2
 8012798:	4313      	orrs	r3, r2
 801279a:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801279c:	2369      	movs	r3, #105	; 0x69
 801279e:	3a03      	subs	r2, #3
 80127a0:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80127a2:	6823      	ldr	r3, [r4, #0]
 80127a4:	69da      	ldr	r2, [r3, #28]
 80127a6:	0752      	lsls	r2, r2, #29
 80127a8:	d50b      	bpl.n	80127c2 <HAL_UART_IRQHandler+0x60>
 80127aa:	689a      	ldr	r2, [r3, #8]
 80127ac:	07d2      	lsls	r2, r2, #31
 80127ae:	d508      	bpl.n	80127c2 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80127b0:	2204      	movs	r2, #4
 80127b2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80127b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80127b6:	3a02      	subs	r2, #2
 80127b8:	4313      	orrs	r3, r2
 80127ba:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80127bc:	2369      	movs	r3, #105	; 0x69
 80127be:	3a01      	subs	r2, #1
 80127c0:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80127c2:	6823      	ldr	r3, [r4, #0]
 80127c4:	69da      	ldr	r2, [r3, #28]
 80127c6:	0712      	lsls	r2, r2, #28
 80127c8:	d50a      	bpl.n	80127e0 <HAL_UART_IRQHandler+0x7e>
 80127ca:	689a      	ldr	r2, [r3, #8]
 80127cc:	07d2      	lsls	r2, r2, #31
 80127ce:	d507      	bpl.n	80127e0 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80127d0:	2208      	movs	r2, #8
 80127d2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80127d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80127d6:	4313      	orrs	r3, r2
 80127d8:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80127da:	2369      	movs	r3, #105	; 0x69
 80127dc:	3a07      	subs	r2, #7
 80127de:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80127e0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d11c      	bne.n	8012820 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80127e6:	6823      	ldr	r3, [r4, #0]
 80127e8:	69da      	ldr	r2, [r3, #28]
 80127ea:	02d2      	lsls	r2, r2, #11
 80127ec:	d502      	bpl.n	80127f4 <HAL_UART_IRQHandler+0x92>
 80127ee:	689a      	ldr	r2, [r3, #8]
 80127f0:	0252      	lsls	r2, r2, #9
 80127f2:	d419      	bmi.n	8012828 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 80127f4:	6823      	ldr	r3, [r4, #0]
 80127f6:	69da      	ldr	r2, [r3, #28]
 80127f8:	0692      	lsls	r2, r2, #26
 80127fa:	d502      	bpl.n	8012802 <HAL_UART_IRQHandler+0xa0>
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	069b      	lsls	r3, r3, #26
 8012800:	d41c      	bmi.n	801283c <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8012802:	6823      	ldr	r3, [r4, #0]
 8012804:	69da      	ldr	r2, [r3, #28]
 8012806:	0612      	lsls	r2, r2, #24
 8012808:	d502      	bpl.n	8012810 <HAL_UART_IRQHandler+0xae>
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	061b      	lsls	r3, r3, #24
 801280e:	d41e      	bmi.n	801284e <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8012810:	6823      	ldr	r3, [r4, #0]
 8012812:	69da      	ldr	r2, [r3, #28]
 8012814:	0652      	lsls	r2, r2, #25
 8012816:	d502      	bpl.n	801281e <HAL_UART_IRQHandler+0xbc>
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	065b      	lsls	r3, r3, #25
 801281c:	d41b      	bmi.n	8012856 <HAL_UART_IRQHandler+0xf4>
}
 801281e:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8012820:	0020      	movs	r0, r4
 8012822:	f7fa fa11 	bl	800cc48 <HAL_UART_ErrorCallback>
 8012826:	e7de      	b.n	80127e6 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8012828:	2280      	movs	r2, #128	; 0x80
 801282a:	0352      	lsls	r2, r2, #13
 801282c:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 801282e:	2369      	movs	r3, #105	; 0x69
 8012830:	2201      	movs	r2, #1
 8012832:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8012834:	0020      	movs	r0, r4
 8012836:	f7ff ff93 	bl	8012760 <HAL_UARTEx_WakeupCallback>
 801283a:	e7db      	b.n	80127f4 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 801283c:	0020      	movs	r0, r4
 801283e:	f7ff ff41 	bl	80126c4 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012842:	6822      	ldr	r2, [r4, #0]
 8012844:	6993      	ldr	r3, [r2, #24]
 8012846:	2108      	movs	r1, #8
 8012848:	430b      	orrs	r3, r1
 801284a:	6193      	str	r3, [r2, #24]
 801284c:	e7d9      	b.n	8012802 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 801284e:	0020      	movs	r0, r4
 8012850:	f7ff fee6 	bl	8012620 <UART_Transmit_IT>
 8012854:	e7dc      	b.n	8012810 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8012856:	0020      	movs	r0, r4
 8012858:	f7ff ff1a 	bl	8012690 <UART_EndTransmit_IT>
}
 801285c:	e7df      	b.n	801281e <HAL_UART_IRQHandler+0xbc>

0801285e <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 801285e:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8012860:	f7f1 f83c 	bl	80038dc <Module_Init>
 8012864:	e7fe      	b.n	8012864 <main+0x6>

08012866 <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8012866:	b510      	push	{r4, lr}


	// put your code here, to run repeatedly.
	while(1){

		IND_toggle();
 8012868:	2090      	movs	r0, #144	; 0x90
 801286a:	2140      	movs	r1, #64	; 0x40
 801286c:	05c0      	lsls	r0, r0, #23
 801286e:	f7fe fb50 	bl	8010f12 <HAL_GPIO_TogglePin>
//		TransmitData(bufferTx,8);
//		Status = HAL_UART_Transmit(&huart1, (uint8_t *)buffer, 8, 0xffff);
		HAL_Delay(1000);
 8012872:	20fa      	movs	r0, #250	; 0xfa
 8012874:	0080      	lsls	r0, r0, #2
 8012876:	f7fc ff8f 	bl	800f798 <HAL_Delay>
 801287a:	e7f5      	b.n	8012868 <UserTask+0x2>

0801287c <atof>:
 801287c:	b510      	push	{r4, lr}
 801287e:	2100      	movs	r1, #0
 8012880:	f001 fb3e 	bl	8013f00 <strtod>
 8012884:	bd10      	pop	{r4, pc}

08012886 <atoi>:
 8012886:	b510      	push	{r4, lr}
 8012888:	220a      	movs	r2, #10
 801288a:	2100      	movs	r1, #0
 801288c:	f001 fc04 	bl	8014098 <strtol>
 8012890:	bd10      	pop	{r4, pc}

08012892 <atol>:
 8012892:	b510      	push	{r4, lr}
 8012894:	220a      	movs	r2, #10
 8012896:	2100      	movs	r1, #0
 8012898:	f001 fbfe 	bl	8014098 <strtol>
 801289c:	bd10      	pop	{r4, pc}
	...

080128a0 <__libc_init_array>:
 80128a0:	b570      	push	{r4, r5, r6, lr}
 80128a2:	2600      	movs	r6, #0
 80128a4:	4d0c      	ldr	r5, [pc, #48]	; (80128d8 <__libc_init_array+0x38>)
 80128a6:	4c0d      	ldr	r4, [pc, #52]	; (80128dc <__libc_init_array+0x3c>)
 80128a8:	1b64      	subs	r4, r4, r5
 80128aa:	10a4      	asrs	r4, r4, #2
 80128ac:	42a6      	cmp	r6, r4
 80128ae:	d109      	bne.n	80128c4 <__libc_init_array+0x24>
 80128b0:	2600      	movs	r6, #0
 80128b2:	f004 fe6d 	bl	8017590 <_init>
 80128b6:	4d0a      	ldr	r5, [pc, #40]	; (80128e0 <__libc_init_array+0x40>)
 80128b8:	4c0a      	ldr	r4, [pc, #40]	; (80128e4 <__libc_init_array+0x44>)
 80128ba:	1b64      	subs	r4, r4, r5
 80128bc:	10a4      	asrs	r4, r4, #2
 80128be:	42a6      	cmp	r6, r4
 80128c0:	d105      	bne.n	80128ce <__libc_init_array+0x2e>
 80128c2:	bd70      	pop	{r4, r5, r6, pc}
 80128c4:	00b3      	lsls	r3, r6, #2
 80128c6:	58eb      	ldr	r3, [r5, r3]
 80128c8:	4798      	blx	r3
 80128ca:	3601      	adds	r6, #1
 80128cc:	e7ee      	b.n	80128ac <__libc_init_array+0xc>
 80128ce:	00b3      	lsls	r3, r6, #2
 80128d0:	58eb      	ldr	r3, [r5, r3]
 80128d2:	4798      	blx	r3
 80128d4:	3601      	adds	r6, #1
 80128d6:	e7f2      	b.n	80128be <__libc_init_array+0x1e>
 80128d8:	0801a804 	.word	0x0801a804
 80128dc:	0801a804 	.word	0x0801a804
 80128e0:	0801a804 	.word	0x0801a804
 80128e4:	0801a80c 	.word	0x0801a80c

080128e8 <__locale_ctype_ptr_l>:
 80128e8:	30ec      	adds	r0, #236	; 0xec
 80128ea:	6800      	ldr	r0, [r0, #0]
 80128ec:	4770      	bx	lr
	...

080128f0 <__locale_ctype_ptr>:
 80128f0:	4b04      	ldr	r3, [pc, #16]	; (8012904 <__locale_ctype_ptr+0x14>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d100      	bne.n	80128fc <__locale_ctype_ptr+0xc>
 80128fa:	4b03      	ldr	r3, [pc, #12]	; (8012908 <__locale_ctype_ptr+0x18>)
 80128fc:	33ec      	adds	r3, #236	; 0xec
 80128fe:	6818      	ldr	r0, [r3, #0]
 8012900:	4770      	bx	lr
 8012902:	46c0      	nop			; (mov r8, r8)
 8012904:	200000cc 	.word	0x200000cc
 8012908:	200004f8 	.word	0x200004f8

0801290c <malloc>:
 801290c:	b510      	push	{r4, lr}
 801290e:	4b03      	ldr	r3, [pc, #12]	; (801291c <malloc+0x10>)
 8012910:	0001      	movs	r1, r0
 8012912:	6818      	ldr	r0, [r3, #0]
 8012914:	f000 f80e 	bl	8012934 <_malloc_r>
 8012918:	bd10      	pop	{r4, pc}
 801291a:	46c0      	nop			; (mov r8, r8)
 801291c:	200000cc 	.word	0x200000cc

08012920 <free>:
 8012920:	b510      	push	{r4, lr}
 8012922:	4b03      	ldr	r3, [pc, #12]	; (8012930 <free+0x10>)
 8012924:	0001      	movs	r1, r0
 8012926:	6818      	ldr	r0, [r3, #0]
 8012928:	f003 fd10 	bl	801634c <_free_r>
 801292c:	bd10      	pop	{r4, pc}
 801292e:	46c0      	nop			; (mov r8, r8)
 8012930:	200000cc 	.word	0x200000cc

08012934 <_malloc_r>:
 8012934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012936:	000d      	movs	r5, r1
 8012938:	b085      	sub	sp, #20
 801293a:	350b      	adds	r5, #11
 801293c:	9001      	str	r0, [sp, #4]
 801293e:	2d16      	cmp	r5, #22
 8012940:	d908      	bls.n	8012954 <_malloc_r+0x20>
 8012942:	2307      	movs	r3, #7
 8012944:	439d      	bics	r5, r3
 8012946:	d506      	bpl.n	8012956 <_malloc_r+0x22>
 8012948:	230c      	movs	r3, #12
 801294a:	9a01      	ldr	r2, [sp, #4]
 801294c:	6013      	str	r3, [r2, #0]
 801294e:	2000      	movs	r0, #0
 8012950:	b005      	add	sp, #20
 8012952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012954:	2510      	movs	r5, #16
 8012956:	428d      	cmp	r5, r1
 8012958:	d3f6      	bcc.n	8012948 <_malloc_r+0x14>
 801295a:	9801      	ldr	r0, [sp, #4]
 801295c:	f000 fa34 	bl	8012dc8 <__malloc_lock>
 8012960:	23f8      	movs	r3, #248	; 0xf8
 8012962:	33ff      	adds	r3, #255	; 0xff
 8012964:	4ac4      	ldr	r2, [pc, #784]	; (8012c78 <_malloc_r+0x344>)
 8012966:	429d      	cmp	r5, r3
 8012968:	d820      	bhi.n	80129ac <_malloc_r+0x78>
 801296a:	0029      	movs	r1, r5
 801296c:	3108      	adds	r1, #8
 801296e:	1851      	adds	r1, r2, r1
 8012970:	0008      	movs	r0, r1
 8012972:	684c      	ldr	r4, [r1, #4]
 8012974:	3808      	subs	r0, #8
 8012976:	08eb      	lsrs	r3, r5, #3
 8012978:	4284      	cmp	r4, r0
 801297a:	d104      	bne.n	8012986 <_malloc_r+0x52>
 801297c:	68cc      	ldr	r4, [r1, #12]
 801297e:	3302      	adds	r3, #2
 8012980:	469c      	mov	ip, r3
 8012982:	42a1      	cmp	r1, r4
 8012984:	d02a      	beq.n	80129dc <_malloc_r+0xa8>
 8012986:	2303      	movs	r3, #3
 8012988:	6862      	ldr	r2, [r4, #4]
 801298a:	68a1      	ldr	r1, [r4, #8]
 801298c:	439a      	bics	r2, r3
 801298e:	0013      	movs	r3, r2
 8012990:	68e2      	ldr	r2, [r4, #12]
 8012992:	18e3      	adds	r3, r4, r3
 8012994:	60ca      	str	r2, [r1, #12]
 8012996:	6091      	str	r1, [r2, #8]
 8012998:	2201      	movs	r2, #1
 801299a:	6859      	ldr	r1, [r3, #4]
 801299c:	430a      	orrs	r2, r1
 801299e:	605a      	str	r2, [r3, #4]
 80129a0:	9801      	ldr	r0, [sp, #4]
 80129a2:	f000 fa19 	bl	8012dd8 <__malloc_unlock>
 80129a6:	0020      	movs	r0, r4
 80129a8:	3008      	adds	r0, #8
 80129aa:	e7d1      	b.n	8012950 <_malloc_r+0x1c>
 80129ac:	0a69      	lsrs	r1, r5, #9
 80129ae:	233f      	movs	r3, #63	; 0x3f
 80129b0:	2900      	cmp	r1, #0
 80129b2:	d003      	beq.n	80129bc <_malloc_r+0x88>
 80129b4:	2904      	cmp	r1, #4
 80129b6:	d828      	bhi.n	8012a0a <_malloc_r+0xd6>
 80129b8:	09ab      	lsrs	r3, r5, #6
 80129ba:	3338      	adds	r3, #56	; 0x38
 80129bc:	2103      	movs	r1, #3
 80129be:	468c      	mov	ip, r1
 80129c0:	00d8      	lsls	r0, r3, #3
 80129c2:	1880      	adds	r0, r0, r2
 80129c4:	68c4      	ldr	r4, [r0, #12]
 80129c6:	4284      	cmp	r4, r0
 80129c8:	d006      	beq.n	80129d8 <_malloc_r+0xa4>
 80129ca:	4666      	mov	r6, ip
 80129cc:	6861      	ldr	r1, [r4, #4]
 80129ce:	43b1      	bics	r1, r6
 80129d0:	1b4f      	subs	r7, r1, r5
 80129d2:	2f0f      	cmp	r7, #15
 80129d4:	dd31      	ble.n	8012a3a <_malloc_r+0x106>
 80129d6:	3b01      	subs	r3, #1
 80129d8:	3301      	adds	r3, #1
 80129da:	469c      	mov	ip, r3
 80129dc:	6914      	ldr	r4, [r2, #16]
 80129de:	49a7      	ldr	r1, [pc, #668]	; (8012c7c <_malloc_r+0x348>)
 80129e0:	428c      	cmp	r4, r1
 80129e2:	d055      	beq.n	8012a90 <_malloc_r+0x15c>
 80129e4:	2303      	movs	r3, #3
 80129e6:	6860      	ldr	r0, [r4, #4]
 80129e8:	4398      	bics	r0, r3
 80129ea:	0003      	movs	r3, r0
 80129ec:	1b46      	subs	r6, r0, r5
 80129ee:	2e0f      	cmp	r6, #15
 80129f0:	dd31      	ble.n	8012a56 <_malloc_r+0x122>
 80129f2:	2701      	movs	r7, #1
 80129f4:	1960      	adds	r0, r4, r5
 80129f6:	433d      	orrs	r5, r7
 80129f8:	4337      	orrs	r7, r6
 80129fa:	6065      	str	r5, [r4, #4]
 80129fc:	6150      	str	r0, [r2, #20]
 80129fe:	6110      	str	r0, [r2, #16]
 8012a00:	60c1      	str	r1, [r0, #12]
 8012a02:	6081      	str	r1, [r0, #8]
 8012a04:	6047      	str	r7, [r0, #4]
 8012a06:	50e6      	str	r6, [r4, r3]
 8012a08:	e7ca      	b.n	80129a0 <_malloc_r+0x6c>
 8012a0a:	2914      	cmp	r1, #20
 8012a0c:	d802      	bhi.n	8012a14 <_malloc_r+0xe0>
 8012a0e:	000b      	movs	r3, r1
 8012a10:	335b      	adds	r3, #91	; 0x5b
 8012a12:	e7d3      	b.n	80129bc <_malloc_r+0x88>
 8012a14:	2954      	cmp	r1, #84	; 0x54
 8012a16:	d802      	bhi.n	8012a1e <_malloc_r+0xea>
 8012a18:	0b2b      	lsrs	r3, r5, #12
 8012a1a:	336e      	adds	r3, #110	; 0x6e
 8012a1c:	e7ce      	b.n	80129bc <_malloc_r+0x88>
 8012a1e:	23aa      	movs	r3, #170	; 0xaa
 8012a20:	005b      	lsls	r3, r3, #1
 8012a22:	4299      	cmp	r1, r3
 8012a24:	d802      	bhi.n	8012a2c <_malloc_r+0xf8>
 8012a26:	0beb      	lsrs	r3, r5, #15
 8012a28:	3377      	adds	r3, #119	; 0x77
 8012a2a:	e7c7      	b.n	80129bc <_malloc_r+0x88>
 8012a2c:	4894      	ldr	r0, [pc, #592]	; (8012c80 <_malloc_r+0x34c>)
 8012a2e:	237e      	movs	r3, #126	; 0x7e
 8012a30:	4281      	cmp	r1, r0
 8012a32:	d8c3      	bhi.n	80129bc <_malloc_r+0x88>
 8012a34:	0cab      	lsrs	r3, r5, #18
 8012a36:	337c      	adds	r3, #124	; 0x7c
 8012a38:	e7c0      	b.n	80129bc <_malloc_r+0x88>
 8012a3a:	68e6      	ldr	r6, [r4, #12]
 8012a3c:	2f00      	cmp	r7, #0
 8012a3e:	db08      	blt.n	8012a52 <_malloc_r+0x11e>
 8012a40:	68a3      	ldr	r3, [r4, #8]
 8012a42:	1861      	adds	r1, r4, r1
 8012a44:	60de      	str	r6, [r3, #12]
 8012a46:	60b3      	str	r3, [r6, #8]
 8012a48:	2301      	movs	r3, #1
 8012a4a:	684a      	ldr	r2, [r1, #4]
 8012a4c:	4313      	orrs	r3, r2
 8012a4e:	604b      	str	r3, [r1, #4]
 8012a50:	e7a6      	b.n	80129a0 <_malloc_r+0x6c>
 8012a52:	0034      	movs	r4, r6
 8012a54:	e7b7      	b.n	80129c6 <_malloc_r+0x92>
 8012a56:	6151      	str	r1, [r2, #20]
 8012a58:	6111      	str	r1, [r2, #16]
 8012a5a:	2e00      	cmp	r6, #0
 8012a5c:	db05      	blt.n	8012a6a <_malloc_r+0x136>
 8012a5e:	2101      	movs	r1, #1
 8012a60:	1823      	adds	r3, r4, r0
 8012a62:	685a      	ldr	r2, [r3, #4]
 8012a64:	4311      	orrs	r1, r2
 8012a66:	6059      	str	r1, [r3, #4]
 8012a68:	e79a      	b.n	80129a0 <_malloc_r+0x6c>
 8012a6a:	4986      	ldr	r1, [pc, #536]	; (8012c84 <_malloc_r+0x350>)
 8012a6c:	6857      	ldr	r7, [r2, #4]
 8012a6e:	4288      	cmp	r0, r1
 8012a70:	d900      	bls.n	8012a74 <_malloc_r+0x140>
 8012a72:	e090      	b.n	8012b96 <_malloc_r+0x262>
 8012a74:	08c3      	lsrs	r3, r0, #3
 8012a76:	39ff      	subs	r1, #255	; 0xff
 8012a78:	1098      	asrs	r0, r3, #2
 8012a7a:	39ff      	subs	r1, #255	; 0xff
 8012a7c:	4081      	lsls	r1, r0
 8012a7e:	00db      	lsls	r3, r3, #3
 8012a80:	4339      	orrs	r1, r7
 8012a82:	6051      	str	r1, [r2, #4]
 8012a84:	189a      	adds	r2, r3, r2
 8012a86:	6893      	ldr	r3, [r2, #8]
 8012a88:	60e2      	str	r2, [r4, #12]
 8012a8a:	60a3      	str	r3, [r4, #8]
 8012a8c:	6094      	str	r4, [r2, #8]
 8012a8e:	60dc      	str	r4, [r3, #12]
 8012a90:	4663      	mov	r3, ip
 8012a92:	2201      	movs	r2, #1
 8012a94:	4978      	ldr	r1, [pc, #480]	; (8012c78 <_malloc_r+0x344>)
 8012a96:	109b      	asrs	r3, r3, #2
 8012a98:	6848      	ldr	r0, [r1, #4]
 8012a9a:	409a      	lsls	r2, r3
 8012a9c:	4290      	cmp	r0, r2
 8012a9e:	d32d      	bcc.n	8012afc <_malloc_r+0x1c8>
 8012aa0:	4202      	tst	r2, r0
 8012aa2:	d109      	bne.n	8012ab8 <_malloc_r+0x184>
 8012aa4:	2303      	movs	r3, #3
 8012aa6:	4664      	mov	r4, ip
 8012aa8:	439c      	bics	r4, r3
 8012aaa:	0023      	movs	r3, r4
 8012aac:	3304      	adds	r3, #4
 8012aae:	469c      	mov	ip, r3
 8012ab0:	0052      	lsls	r2, r2, #1
 8012ab2:	4202      	tst	r2, r0
 8012ab4:	d100      	bne.n	8012ab8 <_malloc_r+0x184>
 8012ab6:	e0a4      	b.n	8012c02 <_malloc_r+0x2ce>
 8012ab8:	4663      	mov	r3, ip
 8012aba:	00db      	lsls	r3, r3, #3
 8012abc:	18cb      	adds	r3, r1, r3
 8012abe:	9303      	str	r3, [sp, #12]
 8012ac0:	001f      	movs	r7, r3
 8012ac2:	4663      	mov	r3, ip
 8012ac4:	9302      	str	r3, [sp, #8]
 8012ac6:	68fc      	ldr	r4, [r7, #12]
 8012ac8:	42bc      	cmp	r4, r7
 8012aca:	d000      	beq.n	8012ace <_malloc_r+0x19a>
 8012acc:	e09c      	b.n	8012c08 <_malloc_r+0x2d4>
 8012ace:	2003      	movs	r0, #3
 8012ad0:	9b02      	ldr	r3, [sp, #8]
 8012ad2:	3708      	adds	r7, #8
 8012ad4:	3301      	adds	r3, #1
 8012ad6:	9302      	str	r3, [sp, #8]
 8012ad8:	4203      	tst	r3, r0
 8012ada:	d1f4      	bne.n	8012ac6 <_malloc_r+0x192>
 8012adc:	4663      	mov	r3, ip
 8012ade:	2003      	movs	r0, #3
 8012ae0:	4203      	tst	r3, r0
 8012ae2:	d000      	beq.n	8012ae6 <_malloc_r+0x1b2>
 8012ae4:	e0b3      	b.n	8012c4e <_malloc_r+0x31a>
 8012ae6:	684b      	ldr	r3, [r1, #4]
 8012ae8:	4393      	bics	r3, r2
 8012aea:	604b      	str	r3, [r1, #4]
 8012aec:	4b62      	ldr	r3, [pc, #392]	; (8012c78 <_malloc_r+0x344>)
 8012aee:	0052      	lsls	r2, r2, #1
 8012af0:	685b      	ldr	r3, [r3, #4]
 8012af2:	4293      	cmp	r3, r2
 8012af4:	d302      	bcc.n	8012afc <_malloc_r+0x1c8>
 8012af6:	2a00      	cmp	r2, #0
 8012af8:	d000      	beq.n	8012afc <_malloc_r+0x1c8>
 8012afa:	e0b9      	b.n	8012c70 <_malloc_r+0x33c>
 8012afc:	2303      	movs	r3, #3
 8012afe:	688f      	ldr	r7, [r1, #8]
 8012b00:	687a      	ldr	r2, [r7, #4]
 8012b02:	439a      	bics	r2, r3
 8012b04:	9202      	str	r2, [sp, #8]
 8012b06:	42aa      	cmp	r2, r5
 8012b08:	d303      	bcc.n	8012b12 <_malloc_r+0x1de>
 8012b0a:	1b52      	subs	r2, r2, r5
 8012b0c:	2a0f      	cmp	r2, #15
 8012b0e:	dd00      	ble.n	8012b12 <_malloc_r+0x1de>
 8012b10:	e116      	b.n	8012d40 <_malloc_r+0x40c>
 8012b12:	4b5d      	ldr	r3, [pc, #372]	; (8012c88 <_malloc_r+0x354>)
 8012b14:	2008      	movs	r0, #8
 8012b16:	681e      	ldr	r6, [r3, #0]
 8012b18:	f002 fd26 	bl	8015568 <sysconf>
 8012b1c:	4b5b      	ldr	r3, [pc, #364]	; (8012c8c <_malloc_r+0x358>)
 8012b1e:	3610      	adds	r6, #16
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	1976      	adds	r6, r6, r5
 8012b24:	9003      	str	r0, [sp, #12]
 8012b26:	3301      	adds	r3, #1
 8012b28:	d003      	beq.n	8012b32 <_malloc_r+0x1fe>
 8012b2a:	3e01      	subs	r6, #1
 8012b2c:	1836      	adds	r6, r6, r0
 8012b2e:	4243      	negs	r3, r0
 8012b30:	401e      	ands	r6, r3
 8012b32:	0031      	movs	r1, r6
 8012b34:	9801      	ldr	r0, [sp, #4]
 8012b36:	f000 fb27 	bl	8013188 <_sbrk_r>
 8012b3a:	0004      	movs	r4, r0
 8012b3c:	1c43      	adds	r3, r0, #1
 8012b3e:	d100      	bne.n	8012b42 <_malloc_r+0x20e>
 8012b40:	e0d6      	b.n	8012cf0 <_malloc_r+0x3bc>
 8012b42:	9b02      	ldr	r3, [sp, #8]
 8012b44:	18fb      	adds	r3, r7, r3
 8012b46:	4283      	cmp	r3, r0
 8012b48:	d903      	bls.n	8012b52 <_malloc_r+0x21e>
 8012b4a:	4a4b      	ldr	r2, [pc, #300]	; (8012c78 <_malloc_r+0x344>)
 8012b4c:	4297      	cmp	r7, r2
 8012b4e:	d000      	beq.n	8012b52 <_malloc_r+0x21e>
 8012b50:	e0ce      	b.n	8012cf0 <_malloc_r+0x3bc>
 8012b52:	494f      	ldr	r1, [pc, #316]	; (8012c90 <_malloc_r+0x35c>)
 8012b54:	680a      	ldr	r2, [r1, #0]
 8012b56:	18b2      	adds	r2, r6, r2
 8012b58:	600a      	str	r2, [r1, #0]
 8012b5a:	9903      	ldr	r1, [sp, #12]
 8012b5c:	4694      	mov	ip, r2
 8012b5e:	1e48      	subs	r0, r1, #1
 8012b60:	42a3      	cmp	r3, r4
 8012b62:	d000      	beq.n	8012b66 <_malloc_r+0x232>
 8012b64:	e09a      	b.n	8012c9c <_malloc_r+0x368>
 8012b66:	4203      	tst	r3, r0
 8012b68:	d000      	beq.n	8012b6c <_malloc_r+0x238>
 8012b6a:	e097      	b.n	8012c9c <_malloc_r+0x368>
 8012b6c:	9a02      	ldr	r2, [sp, #8]
 8012b6e:	4b42      	ldr	r3, [pc, #264]	; (8012c78 <_malloc_r+0x344>)
 8012b70:	1992      	adds	r2, r2, r6
 8012b72:	2601      	movs	r6, #1
 8012b74:	689b      	ldr	r3, [r3, #8]
 8012b76:	4316      	orrs	r6, r2
 8012b78:	605e      	str	r6, [r3, #4]
 8012b7a:	4b45      	ldr	r3, [pc, #276]	; (8012c90 <_malloc_r+0x35c>)
 8012b7c:	4a45      	ldr	r2, [pc, #276]	; (8012c94 <_malloc_r+0x360>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	6811      	ldr	r1, [r2, #0]
 8012b82:	428b      	cmp	r3, r1
 8012b84:	d900      	bls.n	8012b88 <_malloc_r+0x254>
 8012b86:	6013      	str	r3, [r2, #0]
 8012b88:	4a43      	ldr	r2, [pc, #268]	; (8012c98 <_malloc_r+0x364>)
 8012b8a:	6811      	ldr	r1, [r2, #0]
 8012b8c:	428b      	cmp	r3, r1
 8012b8e:	d800      	bhi.n	8012b92 <_malloc_r+0x25e>
 8012b90:	e0ae      	b.n	8012cf0 <_malloc_r+0x3bc>
 8012b92:	6013      	str	r3, [r2, #0]
 8012b94:	e0ac      	b.n	8012cf0 <_malloc_r+0x3bc>
 8012b96:	0a40      	lsrs	r0, r0, #9
 8012b98:	2804      	cmp	r0, #4
 8012b9a:	d810      	bhi.n	8012bbe <_malloc_r+0x28a>
 8012b9c:	0999      	lsrs	r1, r3, #6
 8012b9e:	3138      	adds	r1, #56	; 0x38
 8012ba0:	00ce      	lsls	r6, r1, #3
 8012ba2:	18b6      	adds	r6, r6, r2
 8012ba4:	68b0      	ldr	r0, [r6, #8]
 8012ba6:	4286      	cmp	r6, r0
 8012ba8:	d124      	bne.n	8012bf4 <_malloc_r+0x2c0>
 8012baa:	2301      	movs	r3, #1
 8012bac:	1089      	asrs	r1, r1, #2
 8012bae:	408b      	lsls	r3, r1
 8012bb0:	433b      	orrs	r3, r7
 8012bb2:	6053      	str	r3, [r2, #4]
 8012bb4:	60e6      	str	r6, [r4, #12]
 8012bb6:	60a0      	str	r0, [r4, #8]
 8012bb8:	60b4      	str	r4, [r6, #8]
 8012bba:	60c4      	str	r4, [r0, #12]
 8012bbc:	e768      	b.n	8012a90 <_malloc_r+0x15c>
 8012bbe:	2814      	cmp	r0, #20
 8012bc0:	d802      	bhi.n	8012bc8 <_malloc_r+0x294>
 8012bc2:	0001      	movs	r1, r0
 8012bc4:	315b      	adds	r1, #91	; 0x5b
 8012bc6:	e7eb      	b.n	8012ba0 <_malloc_r+0x26c>
 8012bc8:	2854      	cmp	r0, #84	; 0x54
 8012bca:	d802      	bhi.n	8012bd2 <_malloc_r+0x29e>
 8012bcc:	0b19      	lsrs	r1, r3, #12
 8012bce:	316e      	adds	r1, #110	; 0x6e
 8012bd0:	e7e6      	b.n	8012ba0 <_malloc_r+0x26c>
 8012bd2:	21aa      	movs	r1, #170	; 0xaa
 8012bd4:	0049      	lsls	r1, r1, #1
 8012bd6:	4288      	cmp	r0, r1
 8012bd8:	d802      	bhi.n	8012be0 <_malloc_r+0x2ac>
 8012bda:	0bd9      	lsrs	r1, r3, #15
 8012bdc:	3177      	adds	r1, #119	; 0x77
 8012bde:	e7df      	b.n	8012ba0 <_malloc_r+0x26c>
 8012be0:	4e27      	ldr	r6, [pc, #156]	; (8012c80 <_malloc_r+0x34c>)
 8012be2:	217e      	movs	r1, #126	; 0x7e
 8012be4:	42b0      	cmp	r0, r6
 8012be6:	d8db      	bhi.n	8012ba0 <_malloc_r+0x26c>
 8012be8:	0c99      	lsrs	r1, r3, #18
 8012bea:	317c      	adds	r1, #124	; 0x7c
 8012bec:	e7d8      	b.n	8012ba0 <_malloc_r+0x26c>
 8012bee:	6880      	ldr	r0, [r0, #8]
 8012bf0:	4286      	cmp	r6, r0
 8012bf2:	d004      	beq.n	8012bfe <_malloc_r+0x2ca>
 8012bf4:	2103      	movs	r1, #3
 8012bf6:	6842      	ldr	r2, [r0, #4]
 8012bf8:	438a      	bics	r2, r1
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	d8f7      	bhi.n	8012bee <_malloc_r+0x2ba>
 8012bfe:	68c6      	ldr	r6, [r0, #12]
 8012c00:	e7d8      	b.n	8012bb4 <_malloc_r+0x280>
 8012c02:	2304      	movs	r3, #4
 8012c04:	449c      	add	ip, r3
 8012c06:	e753      	b.n	8012ab0 <_malloc_r+0x17c>
 8012c08:	2003      	movs	r0, #3
 8012c0a:	6863      	ldr	r3, [r4, #4]
 8012c0c:	4383      	bics	r3, r0
 8012c0e:	1b5e      	subs	r6, r3, r5
 8012c10:	68e0      	ldr	r0, [r4, #12]
 8012c12:	2e0f      	cmp	r6, #15
 8012c14:	dd0e      	ble.n	8012c34 <_malloc_r+0x300>
 8012c16:	2701      	movs	r7, #1
 8012c18:	1962      	adds	r2, r4, r5
 8012c1a:	433d      	orrs	r5, r7
 8012c1c:	6065      	str	r5, [r4, #4]
 8012c1e:	68a5      	ldr	r5, [r4, #8]
 8012c20:	4337      	orrs	r7, r6
 8012c22:	60e8      	str	r0, [r5, #12]
 8012c24:	6085      	str	r5, [r0, #8]
 8012c26:	614a      	str	r2, [r1, #20]
 8012c28:	610a      	str	r2, [r1, #16]
 8012c2a:	4914      	ldr	r1, [pc, #80]	; (8012c7c <_malloc_r+0x348>)
 8012c2c:	6057      	str	r7, [r2, #4]
 8012c2e:	60d1      	str	r1, [r2, #12]
 8012c30:	6091      	str	r1, [r2, #8]
 8012c32:	e6e8      	b.n	8012a06 <_malloc_r+0xd2>
 8012c34:	2e00      	cmp	r6, #0
 8012c36:	db08      	blt.n	8012c4a <_malloc_r+0x316>
 8012c38:	2201      	movs	r2, #1
 8012c3a:	18e3      	adds	r3, r4, r3
 8012c3c:	6859      	ldr	r1, [r3, #4]
 8012c3e:	430a      	orrs	r2, r1
 8012c40:	605a      	str	r2, [r3, #4]
 8012c42:	68a3      	ldr	r3, [r4, #8]
 8012c44:	60d8      	str	r0, [r3, #12]
 8012c46:	6083      	str	r3, [r0, #8]
 8012c48:	e6aa      	b.n	80129a0 <_malloc_r+0x6c>
 8012c4a:	0004      	movs	r4, r0
 8012c4c:	e73c      	b.n	8012ac8 <_malloc_r+0x194>
 8012c4e:	2301      	movs	r3, #1
 8012c50:	425b      	negs	r3, r3
 8012c52:	449c      	add	ip, r3
 8012c54:	9b03      	ldr	r3, [sp, #12]
 8012c56:	6818      	ldr	r0, [r3, #0]
 8012c58:	3b08      	subs	r3, #8
 8012c5a:	9003      	str	r0, [sp, #12]
 8012c5c:	4298      	cmp	r0, r3
 8012c5e:	d100      	bne.n	8012c62 <_malloc_r+0x32e>
 8012c60:	e73c      	b.n	8012adc <_malloc_r+0x1a8>
 8012c62:	e743      	b.n	8012aec <_malloc_r+0x1b8>
 8012c64:	2004      	movs	r0, #4
 8012c66:	0052      	lsls	r2, r2, #1
 8012c68:	4484      	add	ip, r0
 8012c6a:	421a      	tst	r2, r3
 8012c6c:	d0fa      	beq.n	8012c64 <_malloc_r+0x330>
 8012c6e:	e723      	b.n	8012ab8 <_malloc_r+0x184>
 8012c70:	9802      	ldr	r0, [sp, #8]
 8012c72:	4684      	mov	ip, r0
 8012c74:	e7f9      	b.n	8012c6a <_malloc_r+0x336>
 8012c76:	46c0      	nop			; (mov r8, r8)
 8012c78:	20000664 	.word	0x20000664
 8012c7c:	2000066c 	.word	0x2000066c
 8012c80:	00000554 	.word	0x00000554
 8012c84:	000001ff 	.word	0x000001ff
 8012c88:	200067bc 	.word	0x200067bc
 8012c8c:	20000a6c 	.word	0x20000a6c
 8012c90:	2000678c 	.word	0x2000678c
 8012c94:	200067b4 	.word	0x200067b4
 8012c98:	200067b8 	.word	0x200067b8
 8012c9c:	492e      	ldr	r1, [pc, #184]	; (8012d58 <_malloc_r+0x424>)
 8012c9e:	680a      	ldr	r2, [r1, #0]
 8012ca0:	3201      	adds	r2, #1
 8012ca2:	d133      	bne.n	8012d0c <_malloc_r+0x3d8>
 8012ca4:	600c      	str	r4, [r1, #0]
 8012ca6:	2307      	movs	r3, #7
 8012ca8:	4023      	ands	r3, r4
 8012caa:	d002      	beq.n	8012cb2 <_malloc_r+0x37e>
 8012cac:	2208      	movs	r2, #8
 8012cae:	1ad3      	subs	r3, r2, r3
 8012cb0:	18e4      	adds	r4, r4, r3
 8012cb2:	9a03      	ldr	r2, [sp, #12]
 8012cb4:	19a6      	adds	r6, r4, r6
 8012cb6:	18d3      	adds	r3, r2, r3
 8012cb8:	4006      	ands	r6, r0
 8012cba:	1b9e      	subs	r6, r3, r6
 8012cbc:	0031      	movs	r1, r6
 8012cbe:	9801      	ldr	r0, [sp, #4]
 8012cc0:	f000 fa62 	bl	8013188 <_sbrk_r>
 8012cc4:	1c43      	adds	r3, r0, #1
 8012cc6:	d101      	bne.n	8012ccc <_malloc_r+0x398>
 8012cc8:	0020      	movs	r0, r4
 8012cca:	2600      	movs	r6, #0
 8012ccc:	4a23      	ldr	r2, [pc, #140]	; (8012d5c <_malloc_r+0x428>)
 8012cce:	1b00      	subs	r0, r0, r4
 8012cd0:	6813      	ldr	r3, [r2, #0]
 8012cd2:	199b      	adds	r3, r3, r6
 8012cd4:	6013      	str	r3, [r2, #0]
 8012cd6:	2301      	movs	r3, #1
 8012cd8:	4a21      	ldr	r2, [pc, #132]	; (8012d60 <_malloc_r+0x42c>)
 8012cda:	1986      	adds	r6, r0, r6
 8012cdc:	431e      	orrs	r6, r3
 8012cde:	6094      	str	r4, [r2, #8]
 8012ce0:	6066      	str	r6, [r4, #4]
 8012ce2:	4297      	cmp	r7, r2
 8012ce4:	d100      	bne.n	8012ce8 <_malloc_r+0x3b4>
 8012ce6:	e748      	b.n	8012b7a <_malloc_r+0x246>
 8012ce8:	9a02      	ldr	r2, [sp, #8]
 8012cea:	2a0f      	cmp	r2, #15
 8012cec:	d813      	bhi.n	8012d16 <_malloc_r+0x3e2>
 8012cee:	6063      	str	r3, [r4, #4]
 8012cf0:	2203      	movs	r2, #3
 8012cf2:	4b1b      	ldr	r3, [pc, #108]	; (8012d60 <_malloc_r+0x42c>)
 8012cf4:	689b      	ldr	r3, [r3, #8]
 8012cf6:	685b      	ldr	r3, [r3, #4]
 8012cf8:	4393      	bics	r3, r2
 8012cfa:	1b5a      	subs	r2, r3, r5
 8012cfc:	42ab      	cmp	r3, r5
 8012cfe:	d301      	bcc.n	8012d04 <_malloc_r+0x3d0>
 8012d00:	2a0f      	cmp	r2, #15
 8012d02:	dc1d      	bgt.n	8012d40 <_malloc_r+0x40c>
 8012d04:	9801      	ldr	r0, [sp, #4]
 8012d06:	f000 f867 	bl	8012dd8 <__malloc_unlock>
 8012d0a:	e620      	b.n	801294e <_malloc_r+0x1a>
 8012d0c:	1ae3      	subs	r3, r4, r3
 8012d0e:	4a13      	ldr	r2, [pc, #76]	; (8012d5c <_malloc_r+0x428>)
 8012d10:	4463      	add	r3, ip
 8012d12:	6013      	str	r3, [r2, #0]
 8012d14:	e7c7      	b.n	8012ca6 <_malloc_r+0x372>
 8012d16:	2207      	movs	r2, #7
 8012d18:	9e02      	ldr	r6, [sp, #8]
 8012d1a:	3e0c      	subs	r6, #12
 8012d1c:	4396      	bics	r6, r2
 8012d1e:	687a      	ldr	r2, [r7, #4]
 8012d20:	4013      	ands	r3, r2
 8012d22:	2205      	movs	r2, #5
 8012d24:	4333      	orrs	r3, r6
 8012d26:	607b      	str	r3, [r7, #4]
 8012d28:	19bb      	adds	r3, r7, r6
 8012d2a:	605a      	str	r2, [r3, #4]
 8012d2c:	609a      	str	r2, [r3, #8]
 8012d2e:	2e0f      	cmp	r6, #15
 8012d30:	d800      	bhi.n	8012d34 <_malloc_r+0x400>
 8012d32:	e722      	b.n	8012b7a <_malloc_r+0x246>
 8012d34:	0039      	movs	r1, r7
 8012d36:	9801      	ldr	r0, [sp, #4]
 8012d38:	3108      	adds	r1, #8
 8012d3a:	f003 fb07 	bl	801634c <_free_r>
 8012d3e:	e71c      	b.n	8012b7a <_malloc_r+0x246>
 8012d40:	2301      	movs	r3, #1
 8012d42:	0018      	movs	r0, r3
 8012d44:	4906      	ldr	r1, [pc, #24]	; (8012d60 <_malloc_r+0x42c>)
 8012d46:	4328      	orrs	r0, r5
 8012d48:	688c      	ldr	r4, [r1, #8]
 8012d4a:	4313      	orrs	r3, r2
 8012d4c:	1965      	adds	r5, r4, r5
 8012d4e:	6060      	str	r0, [r4, #4]
 8012d50:	608d      	str	r5, [r1, #8]
 8012d52:	606b      	str	r3, [r5, #4]
 8012d54:	e624      	b.n	80129a0 <_malloc_r+0x6c>
 8012d56:	46c0      	nop			; (mov r8, r8)
 8012d58:	20000a6c 	.word	0x20000a6c
 8012d5c:	2000678c 	.word	0x2000678c
 8012d60:	20000664 	.word	0x20000664

08012d64 <__ascii_mbtowc>:
 8012d64:	b082      	sub	sp, #8
 8012d66:	2900      	cmp	r1, #0
 8012d68:	d100      	bne.n	8012d6c <__ascii_mbtowc+0x8>
 8012d6a:	a901      	add	r1, sp, #4
 8012d6c:	1e10      	subs	r0, r2, #0
 8012d6e:	d006      	beq.n	8012d7e <__ascii_mbtowc+0x1a>
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d006      	beq.n	8012d82 <__ascii_mbtowc+0x1e>
 8012d74:	7813      	ldrb	r3, [r2, #0]
 8012d76:	600b      	str	r3, [r1, #0]
 8012d78:	7810      	ldrb	r0, [r2, #0]
 8012d7a:	1e43      	subs	r3, r0, #1
 8012d7c:	4198      	sbcs	r0, r3
 8012d7e:	b002      	add	sp, #8
 8012d80:	4770      	bx	lr
 8012d82:	2002      	movs	r0, #2
 8012d84:	4240      	negs	r0, r0
 8012d86:	e7fa      	b.n	8012d7e <__ascii_mbtowc+0x1a>

08012d88 <memcmp>:
 8012d88:	b530      	push	{r4, r5, lr}
 8012d8a:	2400      	movs	r4, #0
 8012d8c:	42a2      	cmp	r2, r4
 8012d8e:	d101      	bne.n	8012d94 <memcmp+0xc>
 8012d90:	2000      	movs	r0, #0
 8012d92:	e005      	b.n	8012da0 <memcmp+0x18>
 8012d94:	5d03      	ldrb	r3, [r0, r4]
 8012d96:	1c65      	adds	r5, r4, #1
 8012d98:	5d0c      	ldrb	r4, [r1, r4]
 8012d9a:	42a3      	cmp	r3, r4
 8012d9c:	d001      	beq.n	8012da2 <memcmp+0x1a>
 8012d9e:	1b18      	subs	r0, r3, r4
 8012da0:	bd30      	pop	{r4, r5, pc}
 8012da2:	002c      	movs	r4, r5
 8012da4:	e7f2      	b.n	8012d8c <memcmp+0x4>

08012da6 <memcpy>:
 8012da6:	2300      	movs	r3, #0
 8012da8:	b510      	push	{r4, lr}
 8012daa:	429a      	cmp	r2, r3
 8012dac:	d100      	bne.n	8012db0 <memcpy+0xa>
 8012dae:	bd10      	pop	{r4, pc}
 8012db0:	5ccc      	ldrb	r4, [r1, r3]
 8012db2:	54c4      	strb	r4, [r0, r3]
 8012db4:	3301      	adds	r3, #1
 8012db6:	e7f8      	b.n	8012daa <memcpy+0x4>

08012db8 <memset>:
 8012db8:	0003      	movs	r3, r0
 8012dba:	1812      	adds	r2, r2, r0
 8012dbc:	4293      	cmp	r3, r2
 8012dbe:	d100      	bne.n	8012dc2 <memset+0xa>
 8012dc0:	4770      	bx	lr
 8012dc2:	7019      	strb	r1, [r3, #0]
 8012dc4:	3301      	adds	r3, #1
 8012dc6:	e7f9      	b.n	8012dbc <memset+0x4>

08012dc8 <__malloc_lock>:
 8012dc8:	b510      	push	{r4, lr}
 8012dca:	4802      	ldr	r0, [pc, #8]	; (8012dd4 <__malloc_lock+0xc>)
 8012dcc:	f003 feb2 	bl	8016b34 <__retarget_lock_acquire_recursive>
 8012dd0:	bd10      	pop	{r4, pc}
 8012dd2:	46c0      	nop			; (mov r8, r8)
 8012dd4:	20006df4 	.word	0x20006df4

08012dd8 <__malloc_unlock>:
 8012dd8:	b510      	push	{r4, lr}
 8012dda:	4802      	ldr	r0, [pc, #8]	; (8012de4 <__malloc_unlock+0xc>)
 8012ddc:	f003 feab 	bl	8016b36 <__retarget_lock_release_recursive>
 8012de0:	bd10      	pop	{r4, pc}
 8012de2:	46c0      	nop			; (mov r8, r8)
 8012de4:	20006df4 	.word	0x20006df4

08012de8 <rand>:
 8012de8:	4b09      	ldr	r3, [pc, #36]	; (8012e10 <rand+0x28>)
 8012dea:	b510      	push	{r4, lr}
 8012dec:	681c      	ldr	r4, [r3, #0]
 8012dee:	4a09      	ldr	r2, [pc, #36]	; (8012e14 <rand+0x2c>)
 8012df0:	34a8      	adds	r4, #168	; 0xa8
 8012df2:	6820      	ldr	r0, [r4, #0]
 8012df4:	6861      	ldr	r1, [r4, #4]
 8012df6:	4b08      	ldr	r3, [pc, #32]	; (8012e18 <rand+0x30>)
 8012df8:	f7ed fbc2 	bl	8000580 <__aeabi_lmul>
 8012dfc:	2201      	movs	r2, #1
 8012dfe:	2300      	movs	r3, #0
 8012e00:	1880      	adds	r0, r0, r2
 8012e02:	4159      	adcs	r1, r3
 8012e04:	6020      	str	r0, [r4, #0]
 8012e06:	6061      	str	r1, [r4, #4]
 8012e08:	0048      	lsls	r0, r1, #1
 8012e0a:	0840      	lsrs	r0, r0, #1
 8012e0c:	bd10      	pop	{r4, pc}
 8012e0e:	46c0      	nop			; (mov r8, r8)
 8012e10:	200000cc 	.word	0x200000cc
 8012e14:	4c957f2d 	.word	0x4c957f2d
 8012e18:	5851f42d 	.word	0x5851f42d

08012e1c <realloc>:
 8012e1c:	b510      	push	{r4, lr}
 8012e1e:	4b03      	ldr	r3, [pc, #12]	; (8012e2c <realloc+0x10>)
 8012e20:	000a      	movs	r2, r1
 8012e22:	0001      	movs	r1, r0
 8012e24:	6818      	ldr	r0, [r3, #0]
 8012e26:	f000 f803 	bl	8012e30 <_realloc_r>
 8012e2a:	bd10      	pop	{r4, pc}
 8012e2c:	200000cc 	.word	0x200000cc

08012e30 <_realloc_r>:
 8012e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e32:	b087      	sub	sp, #28
 8012e34:	9003      	str	r0, [sp, #12]
 8012e36:	1e0c      	subs	r4, r1, #0
 8012e38:	9205      	str	r2, [sp, #20]
 8012e3a:	d106      	bne.n	8012e4a <_realloc_r+0x1a>
 8012e3c:	0011      	movs	r1, r2
 8012e3e:	f7ff fd79 	bl	8012934 <_malloc_r>
 8012e42:	0007      	movs	r7, r0
 8012e44:	0038      	movs	r0, r7
 8012e46:	b007      	add	sp, #28
 8012e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e4a:	9803      	ldr	r0, [sp, #12]
 8012e4c:	f7ff ffbc 	bl	8012dc8 <__malloc_lock>
 8012e50:	0023      	movs	r3, r4
 8012e52:	3b08      	subs	r3, #8
 8012e54:	685f      	ldr	r7, [r3, #4]
 8012e56:	9302      	str	r3, [sp, #8]
 8012e58:	003a      	movs	r2, r7
 8012e5a:	2303      	movs	r3, #3
 8012e5c:	9e05      	ldr	r6, [sp, #20]
 8012e5e:	439a      	bics	r2, r3
 8012e60:	360b      	adds	r6, #11
 8012e62:	9204      	str	r2, [sp, #16]
 8012e64:	2e16      	cmp	r6, #22
 8012e66:	d908      	bls.n	8012e7a <_realloc_r+0x4a>
 8012e68:	3304      	adds	r3, #4
 8012e6a:	439e      	bics	r6, r3
 8012e6c:	9601      	str	r6, [sp, #4]
 8012e6e:	d506      	bpl.n	8012e7e <_realloc_r+0x4e>
 8012e70:	230c      	movs	r3, #12
 8012e72:	9a03      	ldr	r2, [sp, #12]
 8012e74:	2700      	movs	r7, #0
 8012e76:	6013      	str	r3, [r2, #0]
 8012e78:	e7e4      	b.n	8012e44 <_realloc_r+0x14>
 8012e7a:	2310      	movs	r3, #16
 8012e7c:	9301      	str	r3, [sp, #4]
 8012e7e:	9b01      	ldr	r3, [sp, #4]
 8012e80:	9a05      	ldr	r2, [sp, #20]
 8012e82:	4293      	cmp	r3, r2
 8012e84:	d3f4      	bcc.n	8012e70 <_realloc_r+0x40>
 8012e86:	9b01      	ldr	r3, [sp, #4]
 8012e88:	9a04      	ldr	r2, [sp, #16]
 8012e8a:	4293      	cmp	r3, r2
 8012e8c:	dc00      	bgt.n	8012e90 <_realloc_r+0x60>
 8012e8e:	e16f      	b.n	8013170 <_realloc_r+0x340>
 8012e90:	9b02      	ldr	r3, [sp, #8]
 8012e92:	48bc      	ldr	r0, [pc, #752]	; (8013184 <_realloc_r+0x354>)
 8012e94:	189b      	adds	r3, r3, r2
 8012e96:	6882      	ldr	r2, [r0, #8]
 8012e98:	4694      	mov	ip, r2
 8012e9a:	685a      	ldr	r2, [r3, #4]
 8012e9c:	459c      	cmp	ip, r3
 8012e9e:	d006      	beq.n	8012eae <_realloc_r+0x7e>
 8012ea0:	2501      	movs	r5, #1
 8012ea2:	0011      	movs	r1, r2
 8012ea4:	43a9      	bics	r1, r5
 8012ea6:	1859      	adds	r1, r3, r1
 8012ea8:	6849      	ldr	r1, [r1, #4]
 8012eaa:	4229      	tst	r1, r5
 8012eac:	d146      	bne.n	8012f3c <_realloc_r+0x10c>
 8012eae:	2103      	movs	r1, #3
 8012eb0:	438a      	bics	r2, r1
 8012eb2:	9904      	ldr	r1, [sp, #16]
 8012eb4:	188e      	adds	r6, r1, r2
 8012eb6:	9901      	ldr	r1, [sp, #4]
 8012eb8:	459c      	cmp	ip, r3
 8012eba:	d117      	bne.n	8012eec <_realloc_r+0xbc>
 8012ebc:	3110      	adds	r1, #16
 8012ebe:	42b1      	cmp	r1, r6
 8012ec0:	dc3e      	bgt.n	8012f40 <_realloc_r+0x110>
 8012ec2:	9901      	ldr	r1, [sp, #4]
 8012ec4:	9b02      	ldr	r3, [sp, #8]
 8012ec6:	468c      	mov	ip, r1
 8012ec8:	4463      	add	r3, ip
 8012eca:	6083      	str	r3, [r0, #8]
 8012ecc:	001a      	movs	r2, r3
 8012ece:	1a73      	subs	r3, r6, r1
 8012ed0:	2601      	movs	r6, #1
 8012ed2:	4333      	orrs	r3, r6
 8012ed4:	6053      	str	r3, [r2, #4]
 8012ed6:	0023      	movs	r3, r4
 8012ed8:	3b08      	subs	r3, #8
 8012eda:	685a      	ldr	r2, [r3, #4]
 8012edc:	9803      	ldr	r0, [sp, #12]
 8012ede:	4016      	ands	r6, r2
 8012ee0:	430e      	orrs	r6, r1
 8012ee2:	605e      	str	r6, [r3, #4]
 8012ee4:	f7ff ff78 	bl	8012dd8 <__malloc_unlock>
 8012ee8:	0027      	movs	r7, r4
 8012eea:	e7ab      	b.n	8012e44 <_realloc_r+0x14>
 8012eec:	42b1      	cmp	r1, r6
 8012eee:	dc27      	bgt.n	8012f40 <_realloc_r+0x110>
 8012ef0:	68da      	ldr	r2, [r3, #12]
 8012ef2:	689b      	ldr	r3, [r3, #8]
 8012ef4:	60da      	str	r2, [r3, #12]
 8012ef6:	6093      	str	r3, [r2, #8]
 8012ef8:	9b01      	ldr	r3, [sp, #4]
 8012efa:	9a02      	ldr	r2, [sp, #8]
 8012efc:	1af4      	subs	r4, r6, r3
 8012efe:	9b02      	ldr	r3, [sp, #8]
 8012f00:	1992      	adds	r2, r2, r6
 8012f02:	685b      	ldr	r3, [r3, #4]
 8012f04:	9304      	str	r3, [sp, #16]
 8012f06:	2301      	movs	r3, #1
 8012f08:	9804      	ldr	r0, [sp, #16]
 8012f0a:	4018      	ands	r0, r3
 8012f0c:	2c0f      	cmp	r4, #15
 8012f0e:	d800      	bhi.n	8012f12 <_realloc_r+0xe2>
 8012f10:	e130      	b.n	8013174 <_realloc_r+0x344>
 8012f12:	9d01      	ldr	r5, [sp, #4]
 8012f14:	9902      	ldr	r1, [sp, #8]
 8012f16:	4328      	orrs	r0, r5
 8012f18:	1949      	adds	r1, r1, r5
 8012f1a:	9d02      	ldr	r5, [sp, #8]
 8012f1c:	431c      	orrs	r4, r3
 8012f1e:	6068      	str	r0, [r5, #4]
 8012f20:	604c      	str	r4, [r1, #4]
 8012f22:	6850      	ldr	r0, [r2, #4]
 8012f24:	3108      	adds	r1, #8
 8012f26:	4303      	orrs	r3, r0
 8012f28:	6053      	str	r3, [r2, #4]
 8012f2a:	9803      	ldr	r0, [sp, #12]
 8012f2c:	f003 fa0e 	bl	801634c <_free_r>
 8012f30:	9803      	ldr	r0, [sp, #12]
 8012f32:	f7ff ff51 	bl	8012dd8 <__malloc_unlock>
 8012f36:	9f02      	ldr	r7, [sp, #8]
 8012f38:	3708      	adds	r7, #8
 8012f3a:	e783      	b.n	8012e44 <_realloc_r+0x14>
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	0013      	movs	r3, r2
 8012f40:	07f9      	lsls	r1, r7, #31
 8012f42:	d500      	bpl.n	8012f46 <_realloc_r+0x116>
 8012f44:	e0c6      	b.n	80130d4 <_realloc_r+0x2a4>
 8012f46:	0021      	movs	r1, r4
 8012f48:	3908      	subs	r1, #8
 8012f4a:	680d      	ldr	r5, [r1, #0]
 8012f4c:	9902      	ldr	r1, [sp, #8]
 8012f4e:	1b4d      	subs	r5, r1, r5
 8012f50:	2103      	movs	r1, #3
 8012f52:	686f      	ldr	r7, [r5, #4]
 8012f54:	438f      	bics	r7, r1
 8012f56:	9904      	ldr	r1, [sp, #16]
 8012f58:	187f      	adds	r7, r7, r1
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d100      	bne.n	8012f60 <_realloc_r+0x130>
 8012f5e:	e084      	b.n	801306a <_realloc_r+0x23a>
 8012f60:	19d6      	adds	r6, r2, r7
 8012f62:	459c      	cmp	ip, r3
 8012f64:	d148      	bne.n	8012ff8 <_realloc_r+0x1c8>
 8012f66:	9b01      	ldr	r3, [sp, #4]
 8012f68:	3310      	adds	r3, #16
 8012f6a:	42b3      	cmp	r3, r6
 8012f6c:	dc7d      	bgt.n	801306a <_realloc_r+0x23a>
 8012f6e:	68aa      	ldr	r2, [r5, #8]
 8012f70:	68eb      	ldr	r3, [r5, #12]
 8012f72:	002f      	movs	r7, r5
 8012f74:	60d3      	str	r3, [r2, #12]
 8012f76:	609a      	str	r2, [r3, #8]
 8012f78:	000a      	movs	r2, r1
 8012f7a:	3a04      	subs	r2, #4
 8012f7c:	3708      	adds	r7, #8
 8012f7e:	2a24      	cmp	r2, #36	; 0x24
 8012f80:	d835      	bhi.n	8012fee <_realloc_r+0x1be>
 8012f82:	003b      	movs	r3, r7
 8012f84:	2a13      	cmp	r2, #19
 8012f86:	d908      	bls.n	8012f9a <_realloc_r+0x16a>
 8012f88:	6823      	ldr	r3, [r4, #0]
 8012f8a:	60ab      	str	r3, [r5, #8]
 8012f8c:	6863      	ldr	r3, [r4, #4]
 8012f8e:	60eb      	str	r3, [r5, #12]
 8012f90:	2a1b      	cmp	r2, #27
 8012f92:	d81a      	bhi.n	8012fca <_realloc_r+0x19a>
 8012f94:	002b      	movs	r3, r5
 8012f96:	3408      	adds	r4, #8
 8012f98:	3310      	adds	r3, #16
 8012f9a:	6822      	ldr	r2, [r4, #0]
 8012f9c:	601a      	str	r2, [r3, #0]
 8012f9e:	6862      	ldr	r2, [r4, #4]
 8012fa0:	605a      	str	r2, [r3, #4]
 8012fa2:	68a2      	ldr	r2, [r4, #8]
 8012fa4:	609a      	str	r2, [r3, #8]
 8012fa6:	9b01      	ldr	r3, [sp, #4]
 8012fa8:	18ea      	adds	r2, r5, r3
 8012faa:	4b76      	ldr	r3, [pc, #472]	; (8013184 <_realloc_r+0x354>)
 8012fac:	609a      	str	r2, [r3, #8]
 8012fae:	9b01      	ldr	r3, [sp, #4]
 8012fb0:	1af3      	subs	r3, r6, r3
 8012fb2:	2601      	movs	r6, #1
 8012fb4:	4333      	orrs	r3, r6
 8012fb6:	6053      	str	r3, [r2, #4]
 8012fb8:	686b      	ldr	r3, [r5, #4]
 8012fba:	401e      	ands	r6, r3
 8012fbc:	9b01      	ldr	r3, [sp, #4]
 8012fbe:	431e      	orrs	r6, r3
 8012fc0:	606e      	str	r6, [r5, #4]
 8012fc2:	9803      	ldr	r0, [sp, #12]
 8012fc4:	f7ff ff08 	bl	8012dd8 <__malloc_unlock>
 8012fc8:	e73c      	b.n	8012e44 <_realloc_r+0x14>
 8012fca:	68a3      	ldr	r3, [r4, #8]
 8012fcc:	612b      	str	r3, [r5, #16]
 8012fce:	68e3      	ldr	r3, [r4, #12]
 8012fd0:	616b      	str	r3, [r5, #20]
 8012fd2:	2a24      	cmp	r2, #36	; 0x24
 8012fd4:	d003      	beq.n	8012fde <_realloc_r+0x1ae>
 8012fd6:	002b      	movs	r3, r5
 8012fd8:	3410      	adds	r4, #16
 8012fda:	3318      	adds	r3, #24
 8012fdc:	e7dd      	b.n	8012f9a <_realloc_r+0x16a>
 8012fde:	6923      	ldr	r3, [r4, #16]
 8012fe0:	61ab      	str	r3, [r5, #24]
 8012fe2:	002b      	movs	r3, r5
 8012fe4:	6962      	ldr	r2, [r4, #20]
 8012fe6:	3320      	adds	r3, #32
 8012fe8:	61ea      	str	r2, [r5, #28]
 8012fea:	3418      	adds	r4, #24
 8012fec:	e7d5      	b.n	8012f9a <_realloc_r+0x16a>
 8012fee:	0021      	movs	r1, r4
 8012ff0:	0038      	movs	r0, r7
 8012ff2:	f003 fdac 	bl	8016b4e <memmove>
 8012ff6:	e7d6      	b.n	8012fa6 <_realloc_r+0x176>
 8012ff8:	9a01      	ldr	r2, [sp, #4]
 8012ffa:	42b2      	cmp	r2, r6
 8012ffc:	dc35      	bgt.n	801306a <_realloc_r+0x23a>
 8012ffe:	0028      	movs	r0, r5
 8013000:	68da      	ldr	r2, [r3, #12]
 8013002:	689b      	ldr	r3, [r3, #8]
 8013004:	3008      	adds	r0, #8
 8013006:	60da      	str	r2, [r3, #12]
 8013008:	6093      	str	r3, [r2, #8]
 801300a:	68aa      	ldr	r2, [r5, #8]
 801300c:	68eb      	ldr	r3, [r5, #12]
 801300e:	60d3      	str	r3, [r2, #12]
 8013010:	609a      	str	r2, [r3, #8]
 8013012:	9a04      	ldr	r2, [sp, #16]
 8013014:	3a04      	subs	r2, #4
 8013016:	2a24      	cmp	r2, #36	; 0x24
 8013018:	d823      	bhi.n	8013062 <_realloc_r+0x232>
 801301a:	2a13      	cmp	r2, #19
 801301c:	d907      	bls.n	801302e <_realloc_r+0x1fe>
 801301e:	6823      	ldr	r3, [r4, #0]
 8013020:	60ab      	str	r3, [r5, #8]
 8013022:	6863      	ldr	r3, [r4, #4]
 8013024:	60eb      	str	r3, [r5, #12]
 8013026:	2a1b      	cmp	r2, #27
 8013028:	d809      	bhi.n	801303e <_realloc_r+0x20e>
 801302a:	3408      	adds	r4, #8
 801302c:	3008      	adds	r0, #8
 801302e:	6823      	ldr	r3, [r4, #0]
 8013030:	6003      	str	r3, [r0, #0]
 8013032:	6863      	ldr	r3, [r4, #4]
 8013034:	6043      	str	r3, [r0, #4]
 8013036:	68a3      	ldr	r3, [r4, #8]
 8013038:	6083      	str	r3, [r0, #8]
 801303a:	9502      	str	r5, [sp, #8]
 801303c:	e75c      	b.n	8012ef8 <_realloc_r+0xc8>
 801303e:	68a3      	ldr	r3, [r4, #8]
 8013040:	612b      	str	r3, [r5, #16]
 8013042:	68e3      	ldr	r3, [r4, #12]
 8013044:	616b      	str	r3, [r5, #20]
 8013046:	2a24      	cmp	r2, #36	; 0x24
 8013048:	d003      	beq.n	8013052 <_realloc_r+0x222>
 801304a:	0028      	movs	r0, r5
 801304c:	3410      	adds	r4, #16
 801304e:	3018      	adds	r0, #24
 8013050:	e7ed      	b.n	801302e <_realloc_r+0x1fe>
 8013052:	0028      	movs	r0, r5
 8013054:	6923      	ldr	r3, [r4, #16]
 8013056:	3020      	adds	r0, #32
 8013058:	61ab      	str	r3, [r5, #24]
 801305a:	6963      	ldr	r3, [r4, #20]
 801305c:	3418      	adds	r4, #24
 801305e:	61eb      	str	r3, [r5, #28]
 8013060:	e7e5      	b.n	801302e <_realloc_r+0x1fe>
 8013062:	0021      	movs	r1, r4
 8013064:	f003 fd73 	bl	8016b4e <memmove>
 8013068:	e7e7      	b.n	801303a <_realloc_r+0x20a>
 801306a:	9b01      	ldr	r3, [sp, #4]
 801306c:	42bb      	cmp	r3, r7
 801306e:	dc31      	bgt.n	80130d4 <_realloc_r+0x2a4>
 8013070:	0028      	movs	r0, r5
 8013072:	68aa      	ldr	r2, [r5, #8]
 8013074:	68eb      	ldr	r3, [r5, #12]
 8013076:	3008      	adds	r0, #8
 8013078:	60d3      	str	r3, [r2, #12]
 801307a:	609a      	str	r2, [r3, #8]
 801307c:	9a04      	ldr	r2, [sp, #16]
 801307e:	3a04      	subs	r2, #4
 8013080:	2a24      	cmp	r2, #36	; 0x24
 8013082:	d823      	bhi.n	80130cc <_realloc_r+0x29c>
 8013084:	2a13      	cmp	r2, #19
 8013086:	d907      	bls.n	8013098 <_realloc_r+0x268>
 8013088:	6823      	ldr	r3, [r4, #0]
 801308a:	60ab      	str	r3, [r5, #8]
 801308c:	6863      	ldr	r3, [r4, #4]
 801308e:	60eb      	str	r3, [r5, #12]
 8013090:	2a1b      	cmp	r2, #27
 8013092:	d809      	bhi.n	80130a8 <_realloc_r+0x278>
 8013094:	3408      	adds	r4, #8
 8013096:	3008      	adds	r0, #8
 8013098:	6823      	ldr	r3, [r4, #0]
 801309a:	6003      	str	r3, [r0, #0]
 801309c:	6863      	ldr	r3, [r4, #4]
 801309e:	6043      	str	r3, [r0, #4]
 80130a0:	68a3      	ldr	r3, [r4, #8]
 80130a2:	6083      	str	r3, [r0, #8]
 80130a4:	003e      	movs	r6, r7
 80130a6:	e7c8      	b.n	801303a <_realloc_r+0x20a>
 80130a8:	68a3      	ldr	r3, [r4, #8]
 80130aa:	612b      	str	r3, [r5, #16]
 80130ac:	68e3      	ldr	r3, [r4, #12]
 80130ae:	616b      	str	r3, [r5, #20]
 80130b0:	2a24      	cmp	r2, #36	; 0x24
 80130b2:	d003      	beq.n	80130bc <_realloc_r+0x28c>
 80130b4:	0028      	movs	r0, r5
 80130b6:	3410      	adds	r4, #16
 80130b8:	3018      	adds	r0, #24
 80130ba:	e7ed      	b.n	8013098 <_realloc_r+0x268>
 80130bc:	0028      	movs	r0, r5
 80130be:	6923      	ldr	r3, [r4, #16]
 80130c0:	3020      	adds	r0, #32
 80130c2:	61ab      	str	r3, [r5, #24]
 80130c4:	6963      	ldr	r3, [r4, #20]
 80130c6:	3418      	adds	r4, #24
 80130c8:	61eb      	str	r3, [r5, #28]
 80130ca:	e7e5      	b.n	8013098 <_realloc_r+0x268>
 80130cc:	0021      	movs	r1, r4
 80130ce:	f003 fd3e 	bl	8016b4e <memmove>
 80130d2:	e7e7      	b.n	80130a4 <_realloc_r+0x274>
 80130d4:	9905      	ldr	r1, [sp, #20]
 80130d6:	9803      	ldr	r0, [sp, #12]
 80130d8:	f7ff fc2c 	bl	8012934 <_malloc_r>
 80130dc:	1e07      	subs	r7, r0, #0
 80130de:	d100      	bne.n	80130e2 <_realloc_r+0x2b2>
 80130e0:	e76f      	b.n	8012fc2 <_realloc_r+0x192>
 80130e2:	0023      	movs	r3, r4
 80130e4:	2201      	movs	r2, #1
 80130e6:	3b08      	subs	r3, #8
 80130e8:	685b      	ldr	r3, [r3, #4]
 80130ea:	4393      	bics	r3, r2
 80130ec:	9a02      	ldr	r2, [sp, #8]
 80130ee:	18d3      	adds	r3, r2, r3
 80130f0:	0002      	movs	r2, r0
 80130f2:	3a08      	subs	r2, #8
 80130f4:	4293      	cmp	r3, r2
 80130f6:	d105      	bne.n	8013104 <_realloc_r+0x2d4>
 80130f8:	685e      	ldr	r6, [r3, #4]
 80130fa:	2303      	movs	r3, #3
 80130fc:	439e      	bics	r6, r3
 80130fe:	9b04      	ldr	r3, [sp, #16]
 8013100:	18f6      	adds	r6, r6, r3
 8013102:	e6f9      	b.n	8012ef8 <_realloc_r+0xc8>
 8013104:	9a04      	ldr	r2, [sp, #16]
 8013106:	3a04      	subs	r2, #4
 8013108:	2a24      	cmp	r2, #36	; 0x24
 801310a:	d82d      	bhi.n	8013168 <_realloc_r+0x338>
 801310c:	2a13      	cmp	r2, #19
 801310e:	d928      	bls.n	8013162 <_realloc_r+0x332>
 8013110:	6823      	ldr	r3, [r4, #0]
 8013112:	6003      	str	r3, [r0, #0]
 8013114:	6863      	ldr	r3, [r4, #4]
 8013116:	6043      	str	r3, [r0, #4]
 8013118:	2a1b      	cmp	r2, #27
 801311a:	d80e      	bhi.n	801313a <_realloc_r+0x30a>
 801311c:	0022      	movs	r2, r4
 801311e:	0003      	movs	r3, r0
 8013120:	3208      	adds	r2, #8
 8013122:	3308      	adds	r3, #8
 8013124:	6811      	ldr	r1, [r2, #0]
 8013126:	6019      	str	r1, [r3, #0]
 8013128:	6851      	ldr	r1, [r2, #4]
 801312a:	6059      	str	r1, [r3, #4]
 801312c:	6892      	ldr	r2, [r2, #8]
 801312e:	609a      	str	r2, [r3, #8]
 8013130:	0021      	movs	r1, r4
 8013132:	9803      	ldr	r0, [sp, #12]
 8013134:	f003 f90a 	bl	801634c <_free_r>
 8013138:	e743      	b.n	8012fc2 <_realloc_r+0x192>
 801313a:	68a3      	ldr	r3, [r4, #8]
 801313c:	6083      	str	r3, [r0, #8]
 801313e:	68e3      	ldr	r3, [r4, #12]
 8013140:	60c3      	str	r3, [r0, #12]
 8013142:	2a24      	cmp	r2, #36	; 0x24
 8013144:	d004      	beq.n	8013150 <_realloc_r+0x320>
 8013146:	0022      	movs	r2, r4
 8013148:	0003      	movs	r3, r0
 801314a:	3210      	adds	r2, #16
 801314c:	3310      	adds	r3, #16
 801314e:	e7e9      	b.n	8013124 <_realloc_r+0x2f4>
 8013150:	6923      	ldr	r3, [r4, #16]
 8013152:	0022      	movs	r2, r4
 8013154:	6103      	str	r3, [r0, #16]
 8013156:	0003      	movs	r3, r0
 8013158:	6961      	ldr	r1, [r4, #20]
 801315a:	3218      	adds	r2, #24
 801315c:	3318      	adds	r3, #24
 801315e:	6141      	str	r1, [r0, #20]
 8013160:	e7e0      	b.n	8013124 <_realloc_r+0x2f4>
 8013162:	0003      	movs	r3, r0
 8013164:	0022      	movs	r2, r4
 8013166:	e7dd      	b.n	8013124 <_realloc_r+0x2f4>
 8013168:	0021      	movs	r1, r4
 801316a:	f003 fcf0 	bl	8016b4e <memmove>
 801316e:	e7df      	b.n	8013130 <_realloc_r+0x300>
 8013170:	9e04      	ldr	r6, [sp, #16]
 8013172:	e6c1      	b.n	8012ef8 <_realloc_r+0xc8>
 8013174:	9902      	ldr	r1, [sp, #8]
 8013176:	4306      	orrs	r6, r0
 8013178:	604e      	str	r6, [r1, #4]
 801317a:	6851      	ldr	r1, [r2, #4]
 801317c:	430b      	orrs	r3, r1
 801317e:	6053      	str	r3, [r2, #4]
 8013180:	e6d6      	b.n	8012f30 <_realloc_r+0x100>
 8013182:	46c0      	nop			; (mov r8, r8)
 8013184:	20000664 	.word	0x20000664

08013188 <_sbrk_r>:
 8013188:	2300      	movs	r3, #0
 801318a:	b570      	push	{r4, r5, r6, lr}
 801318c:	4c06      	ldr	r4, [pc, #24]	; (80131a8 <_sbrk_r+0x20>)
 801318e:	0005      	movs	r5, r0
 8013190:	0008      	movs	r0, r1
 8013192:	6023      	str	r3, [r4, #0]
 8013194:	f004 f9ec 	bl	8017570 <_sbrk>
 8013198:	1c43      	adds	r3, r0, #1
 801319a:	d103      	bne.n	80131a4 <_sbrk_r+0x1c>
 801319c:	6823      	ldr	r3, [r4, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d000      	beq.n	80131a4 <_sbrk_r+0x1c>
 80131a2:	602b      	str	r3, [r5, #0]
 80131a4:	bd70      	pop	{r4, r5, r6, pc}
 80131a6:	46c0      	nop			; (mov r8, r8)
 80131a8:	20006dfc 	.word	0x20006dfc

080131ac <sprintf>:
 80131ac:	b40e      	push	{r1, r2, r3}
 80131ae:	b500      	push	{lr}
 80131b0:	490b      	ldr	r1, [pc, #44]	; (80131e0 <sprintf+0x34>)
 80131b2:	b09c      	sub	sp, #112	; 0x70
 80131b4:	ab1d      	add	r3, sp, #116	; 0x74
 80131b6:	9002      	str	r0, [sp, #8]
 80131b8:	9006      	str	r0, [sp, #24]
 80131ba:	9107      	str	r1, [sp, #28]
 80131bc:	9104      	str	r1, [sp, #16]
 80131be:	4809      	ldr	r0, [pc, #36]	; (80131e4 <sprintf+0x38>)
 80131c0:	4909      	ldr	r1, [pc, #36]	; (80131e8 <sprintf+0x3c>)
 80131c2:	cb04      	ldmia	r3!, {r2}
 80131c4:	9105      	str	r1, [sp, #20]
 80131c6:	6800      	ldr	r0, [r0, #0]
 80131c8:	a902      	add	r1, sp, #8
 80131ca:	9301      	str	r3, [sp, #4]
 80131cc:	f000 ff78 	bl	80140c0 <_svfprintf_r>
 80131d0:	2300      	movs	r3, #0
 80131d2:	9a02      	ldr	r2, [sp, #8]
 80131d4:	7013      	strb	r3, [r2, #0]
 80131d6:	b01c      	add	sp, #112	; 0x70
 80131d8:	bc08      	pop	{r3}
 80131da:	b003      	add	sp, #12
 80131dc:	4718      	bx	r3
 80131de:	46c0      	nop			; (mov r8, r8)
 80131e0:	7fffffff 	.word	0x7fffffff
 80131e4:	200000cc 	.word	0x200000cc
 80131e8:	ffff0208 	.word	0xffff0208

080131ec <strcat>:
 80131ec:	0002      	movs	r2, r0
 80131ee:	b510      	push	{r4, lr}
 80131f0:	7813      	ldrb	r3, [r2, #0]
 80131f2:	1c54      	adds	r4, r2, #1
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d105      	bne.n	8013204 <strcat+0x18>
 80131f8:	5ccc      	ldrb	r4, [r1, r3]
 80131fa:	54d4      	strb	r4, [r2, r3]
 80131fc:	3301      	adds	r3, #1
 80131fe:	2c00      	cmp	r4, #0
 8013200:	d1fa      	bne.n	80131f8 <strcat+0xc>
 8013202:	bd10      	pop	{r4, pc}
 8013204:	0022      	movs	r2, r4
 8013206:	e7f3      	b.n	80131f0 <strcat+0x4>

08013208 <strchr>:
 8013208:	b2c9      	uxtb	r1, r1
 801320a:	7803      	ldrb	r3, [r0, #0]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d004      	beq.n	801321a <strchr+0x12>
 8013210:	428b      	cmp	r3, r1
 8013212:	d100      	bne.n	8013216 <strchr+0xe>
 8013214:	4770      	bx	lr
 8013216:	3001      	adds	r0, #1
 8013218:	e7f7      	b.n	801320a <strchr+0x2>
 801321a:	424b      	negs	r3, r1
 801321c:	4159      	adcs	r1, r3
 801321e:	4249      	negs	r1, r1
 8013220:	4008      	ands	r0, r1
 8013222:	e7f7      	b.n	8013214 <strchr+0xc>

08013224 <strcpy>:
 8013224:	0003      	movs	r3, r0
 8013226:	780a      	ldrb	r2, [r1, #0]
 8013228:	3101      	adds	r1, #1
 801322a:	701a      	strb	r2, [r3, #0]
 801322c:	3301      	adds	r3, #1
 801322e:	2a00      	cmp	r2, #0
 8013230:	d1f9      	bne.n	8013226 <strcpy+0x2>
 8013232:	4770      	bx	lr

08013234 <strncmp>:
 8013234:	2300      	movs	r3, #0
 8013236:	b530      	push	{r4, r5, lr}
 8013238:	429a      	cmp	r2, r3
 801323a:	d00a      	beq.n	8013252 <strncmp+0x1e>
 801323c:	3a01      	subs	r2, #1
 801323e:	5cc4      	ldrb	r4, [r0, r3]
 8013240:	5ccd      	ldrb	r5, [r1, r3]
 8013242:	42ac      	cmp	r4, r5
 8013244:	d104      	bne.n	8013250 <strncmp+0x1c>
 8013246:	4293      	cmp	r3, r2
 8013248:	d002      	beq.n	8013250 <strncmp+0x1c>
 801324a:	3301      	adds	r3, #1
 801324c:	2c00      	cmp	r4, #0
 801324e:	d1f6      	bne.n	801323e <strncmp+0xa>
 8013250:	1b63      	subs	r3, r4, r5
 8013252:	0018      	movs	r0, r3
 8013254:	bd30      	pop	{r4, r5, pc}

08013256 <strncpy>:
 8013256:	b530      	push	{r4, r5, lr}
 8013258:	0005      	movs	r5, r0
 801325a:	2a00      	cmp	r2, #0
 801325c:	d100      	bne.n	8013260 <strncpy+0xa>
 801325e:	bd30      	pop	{r4, r5, pc}
 8013260:	780c      	ldrb	r4, [r1, #0]
 8013262:	3a01      	subs	r2, #1
 8013264:	1c6b      	adds	r3, r5, #1
 8013266:	702c      	strb	r4, [r5, #0]
 8013268:	3101      	adds	r1, #1
 801326a:	2c00      	cmp	r4, #0
 801326c:	d105      	bne.n	801327a <strncpy+0x24>
 801326e:	189a      	adds	r2, r3, r2
 8013270:	429a      	cmp	r2, r3
 8013272:	d0f4      	beq.n	801325e <strncpy+0x8>
 8013274:	701c      	strb	r4, [r3, #0]
 8013276:	3301      	adds	r3, #1
 8013278:	e7fa      	b.n	8013270 <strncpy+0x1a>
 801327a:	001d      	movs	r5, r3
 801327c:	e7ed      	b.n	801325a <strncpy+0x4>
	...

08013280 <sulp>:
 8013280:	b570      	push	{r4, r5, r6, lr}
 8013282:	0016      	movs	r6, r2
 8013284:	000d      	movs	r5, r1
 8013286:	f003 ff17 	bl	80170b8 <__ulp>
 801328a:	2e00      	cmp	r6, #0
 801328c:	d00d      	beq.n	80132aa <sulp+0x2a>
 801328e:	236b      	movs	r3, #107	; 0x6b
 8013290:	006a      	lsls	r2, r5, #1
 8013292:	0d52      	lsrs	r2, r2, #21
 8013294:	1a9b      	subs	r3, r3, r2
 8013296:	2b00      	cmp	r3, #0
 8013298:	dd07      	ble.n	80132aa <sulp+0x2a>
 801329a:	2400      	movs	r4, #0
 801329c:	4a03      	ldr	r2, [pc, #12]	; (80132ac <sulp+0x2c>)
 801329e:	051b      	lsls	r3, r3, #20
 80132a0:	189d      	adds	r5, r3, r2
 80132a2:	002b      	movs	r3, r5
 80132a4:	0022      	movs	r2, r4
 80132a6:	f7ee fdcf 	bl	8001e48 <__aeabi_dmul>
 80132aa:	bd70      	pop	{r4, r5, r6, pc}
 80132ac:	3ff00000 	.word	0x3ff00000

080132b0 <_strtod_l>:
 80132b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132b2:	b0a7      	sub	sp, #156	; 0x9c
 80132b4:	9307      	str	r3, [sp, #28]
 80132b6:	2300      	movs	r3, #0
 80132b8:	9004      	str	r0, [sp, #16]
 80132ba:	9807      	ldr	r0, [sp, #28]
 80132bc:	9322      	str	r3, [sp, #136]	; 0x88
 80132be:	9106      	str	r1, [sp, #24]
 80132c0:	921d      	str	r2, [sp, #116]	; 0x74
 80132c2:	f003 fc28 	bl	8016b16 <__localeconv_l>
 80132c6:	0005      	movs	r5, r0
 80132c8:	6800      	ldr	r0, [r0, #0]
 80132ca:	f7ec ff25 	bl	8000118 <strlen>
 80132ce:	2600      	movs	r6, #0
 80132d0:	2700      	movs	r7, #0
 80132d2:	9b06      	ldr	r3, [sp, #24]
 80132d4:	9005      	str	r0, [sp, #20]
 80132d6:	9321      	str	r3, [sp, #132]	; 0x84
 80132d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132da:	781a      	ldrb	r2, [r3, #0]
 80132dc:	2a0d      	cmp	r2, #13
 80132de:	d839      	bhi.n	8013354 <_strtod_l+0xa4>
 80132e0:	2a09      	cmp	r2, #9
 80132e2:	d23d      	bcs.n	8013360 <_strtod_l+0xb0>
 80132e4:	2a00      	cmp	r2, #0
 80132e6:	d044      	beq.n	8013372 <_strtod_l+0xc2>
 80132e8:	2300      	movs	r3, #0
 80132ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80132ec:	2200      	movs	r2, #0
 80132ee:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80132f0:	920c      	str	r2, [sp, #48]	; 0x30
 80132f2:	7823      	ldrb	r3, [r4, #0]
 80132f4:	2b30      	cmp	r3, #48	; 0x30
 80132f6:	d000      	beq.n	80132fa <_strtod_l+0x4a>
 80132f8:	e07e      	b.n	80133f8 <_strtod_l+0x148>
 80132fa:	7863      	ldrb	r3, [r4, #1]
 80132fc:	2b58      	cmp	r3, #88	; 0x58
 80132fe:	d002      	beq.n	8013306 <_strtod_l+0x56>
 8013300:	2b78      	cmp	r3, #120	; 0x78
 8013302:	d000      	beq.n	8013306 <_strtod_l+0x56>
 8013304:	e06e      	b.n	80133e4 <_strtod_l+0x134>
 8013306:	9b07      	ldr	r3, [sp, #28]
 8013308:	4a96      	ldr	r2, [pc, #600]	; (8013564 <_strtod_l+0x2b4>)
 801330a:	9302      	str	r3, [sp, #8]
 801330c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801330e:	a921      	add	r1, sp, #132	; 0x84
 8013310:	9301      	str	r3, [sp, #4]
 8013312:	ab22      	add	r3, sp, #136	; 0x88
 8013314:	9300      	str	r3, [sp, #0]
 8013316:	9804      	ldr	r0, [sp, #16]
 8013318:	ab23      	add	r3, sp, #140	; 0x8c
 801331a:	f003 f914 	bl	8016546 <__gethex>
 801331e:	2507      	movs	r5, #7
 8013320:	9005      	str	r0, [sp, #20]
 8013322:	4005      	ands	r5, r0
 8013324:	d005      	beq.n	8013332 <_strtod_l+0x82>
 8013326:	2d06      	cmp	r5, #6
 8013328:	d12f      	bne.n	801338a <_strtod_l+0xda>
 801332a:	2300      	movs	r3, #0
 801332c:	3401      	adds	r4, #1
 801332e:	9421      	str	r4, [sp, #132]	; 0x84
 8013330:	9313      	str	r3, [sp, #76]	; 0x4c
 8013332:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013334:	2b00      	cmp	r3, #0
 8013336:	d002      	beq.n	801333e <_strtod_l+0x8e>
 8013338:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801333a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801333c:	601a      	str	r2, [r3, #0]
 801333e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013340:	2b00      	cmp	r3, #0
 8013342:	d01d      	beq.n	8013380 <_strtod_l+0xd0>
 8013344:	2380      	movs	r3, #128	; 0x80
 8013346:	0032      	movs	r2, r6
 8013348:	061b      	lsls	r3, r3, #24
 801334a:	18fb      	adds	r3, r7, r3
 801334c:	0010      	movs	r0, r2
 801334e:	0019      	movs	r1, r3
 8013350:	b027      	add	sp, #156	; 0x9c
 8013352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013354:	2a2b      	cmp	r2, #43	; 0x2b
 8013356:	d016      	beq.n	8013386 <_strtod_l+0xd6>
 8013358:	2a2d      	cmp	r2, #45	; 0x2d
 801335a:	d003      	beq.n	8013364 <_strtod_l+0xb4>
 801335c:	2a20      	cmp	r2, #32
 801335e:	d1c3      	bne.n	80132e8 <_strtod_l+0x38>
 8013360:	3301      	adds	r3, #1
 8013362:	e7b8      	b.n	80132d6 <_strtod_l+0x26>
 8013364:	2201      	movs	r2, #1
 8013366:	9213      	str	r2, [sp, #76]	; 0x4c
 8013368:	1c5a      	adds	r2, r3, #1
 801336a:	9221      	str	r2, [sp, #132]	; 0x84
 801336c:	785b      	ldrb	r3, [r3, #1]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d1bc      	bne.n	80132ec <_strtod_l+0x3c>
 8013372:	9b06      	ldr	r3, [sp, #24]
 8013374:	9321      	str	r3, [sp, #132]	; 0x84
 8013376:	2300      	movs	r3, #0
 8013378:	9313      	str	r3, [sp, #76]	; 0x4c
 801337a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801337c:	2b00      	cmp	r3, #0
 801337e:	d1db      	bne.n	8013338 <_strtod_l+0x88>
 8013380:	0032      	movs	r2, r6
 8013382:	003b      	movs	r3, r7
 8013384:	e7e2      	b.n	801334c <_strtod_l+0x9c>
 8013386:	2200      	movs	r2, #0
 8013388:	e7ed      	b.n	8013366 <_strtod_l+0xb6>
 801338a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801338c:	2a00      	cmp	r2, #0
 801338e:	d007      	beq.n	80133a0 <_strtod_l+0xf0>
 8013390:	2135      	movs	r1, #53	; 0x35
 8013392:	a824      	add	r0, sp, #144	; 0x90
 8013394:	f003 ff7d 	bl	8017292 <__copybits>
 8013398:	9922      	ldr	r1, [sp, #136]	; 0x88
 801339a:	9804      	ldr	r0, [sp, #16]
 801339c:	f003 fc12 	bl	8016bc4 <_Bfree>
 80133a0:	1e68      	subs	r0, r5, #1
 80133a2:	2804      	cmp	r0, #4
 80133a4:	d806      	bhi.n	80133b4 <_strtod_l+0x104>
 80133a6:	f7ec febf 	bl	8000128 <__gnu_thumb1_case_uqi>
 80133aa:	030c      	.short	0x030c
 80133ac:	1917      	.short	0x1917
 80133ae:	0c          	.byte	0x0c
 80133af:	00          	.byte	0x00
 80133b0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80133b2:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80133b4:	9b05      	ldr	r3, [sp, #20]
 80133b6:	071b      	lsls	r3, r3, #28
 80133b8:	d5bb      	bpl.n	8013332 <_strtod_l+0x82>
 80133ba:	2380      	movs	r3, #128	; 0x80
 80133bc:	061b      	lsls	r3, r3, #24
 80133be:	431f      	orrs	r7, r3
 80133c0:	e7b7      	b.n	8013332 <_strtod_l+0x82>
 80133c2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80133c4:	4a68      	ldr	r2, [pc, #416]	; (8013568 <_strtod_l+0x2b8>)
 80133c6:	4969      	ldr	r1, [pc, #420]	; (801356c <_strtod_l+0x2bc>)
 80133c8:	401a      	ands	r2, r3
 80133ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80133cc:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80133ce:	185b      	adds	r3, r3, r1
 80133d0:	051b      	lsls	r3, r3, #20
 80133d2:	431a      	orrs	r2, r3
 80133d4:	0017      	movs	r7, r2
 80133d6:	e7ed      	b.n	80133b4 <_strtod_l+0x104>
 80133d8:	4f65      	ldr	r7, [pc, #404]	; (8013570 <_strtod_l+0x2c0>)
 80133da:	e7eb      	b.n	80133b4 <_strtod_l+0x104>
 80133dc:	2601      	movs	r6, #1
 80133de:	4f65      	ldr	r7, [pc, #404]	; (8013574 <_strtod_l+0x2c4>)
 80133e0:	4276      	negs	r6, r6
 80133e2:	e7e7      	b.n	80133b4 <_strtod_l+0x104>
 80133e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80133e6:	1c5a      	adds	r2, r3, #1
 80133e8:	9221      	str	r2, [sp, #132]	; 0x84
 80133ea:	785b      	ldrb	r3, [r3, #1]
 80133ec:	2b30      	cmp	r3, #48	; 0x30
 80133ee:	d0f9      	beq.n	80133e4 <_strtod_l+0x134>
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d09e      	beq.n	8013332 <_strtod_l+0x82>
 80133f4:	2301      	movs	r3, #1
 80133f6:	930c      	str	r3, [sp, #48]	; 0x30
 80133f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80133fa:	220a      	movs	r2, #10
 80133fc:	9312      	str	r3, [sp, #72]	; 0x48
 80133fe:	2300      	movs	r3, #0
 8013400:	930b      	str	r3, [sp, #44]	; 0x2c
 8013402:	9308      	str	r3, [sp, #32]
 8013404:	930a      	str	r3, [sp, #40]	; 0x28
 8013406:	9821      	ldr	r0, [sp, #132]	; 0x84
 8013408:	7804      	ldrb	r4, [r0, #0]
 801340a:	0023      	movs	r3, r4
 801340c:	3b30      	subs	r3, #48	; 0x30
 801340e:	b2d9      	uxtb	r1, r3
 8013410:	2909      	cmp	r1, #9
 8013412:	d934      	bls.n	801347e <_strtod_l+0x1ce>
 8013414:	9a05      	ldr	r2, [sp, #20]
 8013416:	6829      	ldr	r1, [r5, #0]
 8013418:	f7ff ff0c 	bl	8013234 <strncmp>
 801341c:	2800      	cmp	r0, #0
 801341e:	d040      	beq.n	80134a2 <_strtod_l+0x1f2>
 8013420:	2000      	movs	r0, #0
 8013422:	0023      	movs	r3, r4
 8013424:	4684      	mov	ip, r0
 8013426:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013428:	9007      	str	r0, [sp, #28]
 801342a:	9205      	str	r2, [sp, #20]
 801342c:	2220      	movs	r2, #32
 801342e:	0019      	movs	r1, r3
 8013430:	4391      	bics	r1, r2
 8013432:	000a      	movs	r2, r1
 8013434:	2100      	movs	r1, #0
 8013436:	2a45      	cmp	r2, #69	; 0x45
 8013438:	d000      	beq.n	801343c <_strtod_l+0x18c>
 801343a:	e0bf      	b.n	80135bc <_strtod_l+0x30c>
 801343c:	9b05      	ldr	r3, [sp, #20]
 801343e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013440:	4303      	orrs	r3, r0
 8013442:	4313      	orrs	r3, r2
 8013444:	428b      	cmp	r3, r1
 8013446:	d094      	beq.n	8013372 <_strtod_l+0xc2>
 8013448:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801344a:	9306      	str	r3, [sp, #24]
 801344c:	3301      	adds	r3, #1
 801344e:	9321      	str	r3, [sp, #132]	; 0x84
 8013450:	9b06      	ldr	r3, [sp, #24]
 8013452:	785b      	ldrb	r3, [r3, #1]
 8013454:	2b2b      	cmp	r3, #43	; 0x2b
 8013456:	d100      	bne.n	801345a <_strtod_l+0x1aa>
 8013458:	e082      	b.n	8013560 <_strtod_l+0x2b0>
 801345a:	000c      	movs	r4, r1
 801345c:	2b2d      	cmp	r3, #45	; 0x2d
 801345e:	d105      	bne.n	801346c <_strtod_l+0x1bc>
 8013460:	2401      	movs	r4, #1
 8013462:	9b06      	ldr	r3, [sp, #24]
 8013464:	3302      	adds	r3, #2
 8013466:	9321      	str	r3, [sp, #132]	; 0x84
 8013468:	9b06      	ldr	r3, [sp, #24]
 801346a:	789b      	ldrb	r3, [r3, #2]
 801346c:	001a      	movs	r2, r3
 801346e:	3a30      	subs	r2, #48	; 0x30
 8013470:	2a09      	cmp	r2, #9
 8013472:	d800      	bhi.n	8013476 <_strtod_l+0x1c6>
 8013474:	e084      	b.n	8013580 <_strtod_l+0x2d0>
 8013476:	9a06      	ldr	r2, [sp, #24]
 8013478:	2100      	movs	r1, #0
 801347a:	9221      	str	r2, [sp, #132]	; 0x84
 801347c:	e09e      	b.n	80135bc <_strtod_l+0x30c>
 801347e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013480:	2908      	cmp	r1, #8
 8013482:	dc09      	bgt.n	8013498 <_strtod_l+0x1e8>
 8013484:	9908      	ldr	r1, [sp, #32]
 8013486:	4351      	muls	r1, r2
 8013488:	18cb      	adds	r3, r1, r3
 801348a:	9308      	str	r3, [sp, #32]
 801348c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801348e:	3001      	adds	r0, #1
 8013490:	3301      	adds	r3, #1
 8013492:	930a      	str	r3, [sp, #40]	; 0x28
 8013494:	9021      	str	r0, [sp, #132]	; 0x84
 8013496:	e7b6      	b.n	8013406 <_strtod_l+0x156>
 8013498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801349a:	4351      	muls	r1, r2
 801349c:	18cb      	adds	r3, r1, r3
 801349e:	930b      	str	r3, [sp, #44]	; 0x2c
 80134a0:	e7f4      	b.n	801348c <_strtod_l+0x1dc>
 80134a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80134a4:	9b05      	ldr	r3, [sp, #20]
 80134a6:	4694      	mov	ip, r2
 80134a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134aa:	4463      	add	r3, ip
 80134ac:	9321      	str	r3, [sp, #132]	; 0x84
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	2a00      	cmp	r2, #0
 80134b2:	d036      	beq.n	8013522 <_strtod_l+0x272>
 80134b4:	4684      	mov	ip, r0
 80134b6:	9205      	str	r2, [sp, #20]
 80134b8:	001a      	movs	r2, r3
 80134ba:	3a30      	subs	r2, #48	; 0x30
 80134bc:	2a09      	cmp	r2, #9
 80134be:	d912      	bls.n	80134e6 <_strtod_l+0x236>
 80134c0:	2201      	movs	r2, #1
 80134c2:	9207      	str	r2, [sp, #28]
 80134c4:	e7b2      	b.n	801342c <_strtod_l+0x17c>
 80134c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134c8:	3001      	adds	r0, #1
 80134ca:	1c5a      	adds	r2, r3, #1
 80134cc:	9221      	str	r2, [sp, #132]	; 0x84
 80134ce:	785b      	ldrb	r3, [r3, #1]
 80134d0:	2b30      	cmp	r3, #48	; 0x30
 80134d2:	d0f8      	beq.n	80134c6 <_strtod_l+0x216>
 80134d4:	001a      	movs	r2, r3
 80134d6:	3a31      	subs	r2, #49	; 0x31
 80134d8:	2a08      	cmp	r2, #8
 80134da:	d83c      	bhi.n	8013556 <_strtod_l+0x2a6>
 80134dc:	4684      	mov	ip, r0
 80134de:	2000      	movs	r0, #0
 80134e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80134e2:	9005      	str	r0, [sp, #20]
 80134e4:	9212      	str	r2, [sp, #72]	; 0x48
 80134e6:	3b30      	subs	r3, #48	; 0x30
 80134e8:	1c42      	adds	r2, r0, #1
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d013      	beq.n	8013516 <_strtod_l+0x266>
 80134ee:	210a      	movs	r1, #10
 80134f0:	4494      	add	ip, r2
 80134f2:	9a05      	ldr	r2, [sp, #20]
 80134f4:	1885      	adds	r5, r0, r2
 80134f6:	42aa      	cmp	r2, r5
 80134f8:	d115      	bne.n	8013526 <_strtod_l+0x276>
 80134fa:	9905      	ldr	r1, [sp, #20]
 80134fc:	9a05      	ldr	r2, [sp, #20]
 80134fe:	3101      	adds	r1, #1
 8013500:	1809      	adds	r1, r1, r0
 8013502:	1812      	adds	r2, r2, r0
 8013504:	9105      	str	r1, [sp, #20]
 8013506:	2a08      	cmp	r2, #8
 8013508:	dc1b      	bgt.n	8013542 <_strtod_l+0x292>
 801350a:	220a      	movs	r2, #10
 801350c:	9908      	ldr	r1, [sp, #32]
 801350e:	434a      	muls	r2, r1
 8013510:	189b      	adds	r3, r3, r2
 8013512:	2200      	movs	r2, #0
 8013514:	9308      	str	r3, [sp, #32]
 8013516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013518:	0010      	movs	r0, r2
 801351a:	1c59      	adds	r1, r3, #1
 801351c:	9121      	str	r1, [sp, #132]	; 0x84
 801351e:	785b      	ldrb	r3, [r3, #1]
 8013520:	e7ca      	b.n	80134b8 <_strtod_l+0x208>
 8013522:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013524:	e7d4      	b.n	80134d0 <_strtod_l+0x220>
 8013526:	1c54      	adds	r4, r2, #1
 8013528:	2a08      	cmp	r2, #8
 801352a:	dc04      	bgt.n	8013536 <_strtod_l+0x286>
 801352c:	9a08      	ldr	r2, [sp, #32]
 801352e:	434a      	muls	r2, r1
 8013530:	9208      	str	r2, [sp, #32]
 8013532:	0022      	movs	r2, r4
 8013534:	e7df      	b.n	80134f6 <_strtod_l+0x246>
 8013536:	2c10      	cmp	r4, #16
 8013538:	dcfb      	bgt.n	8013532 <_strtod_l+0x282>
 801353a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801353c:	434a      	muls	r2, r1
 801353e:	920b      	str	r2, [sp, #44]	; 0x2c
 8013540:	e7f7      	b.n	8013532 <_strtod_l+0x282>
 8013542:	9905      	ldr	r1, [sp, #20]
 8013544:	2200      	movs	r2, #0
 8013546:	2910      	cmp	r1, #16
 8013548:	dce5      	bgt.n	8013516 <_strtod_l+0x266>
 801354a:	210a      	movs	r1, #10
 801354c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801354e:	4341      	muls	r1, r0
 8013550:	185b      	adds	r3, r3, r1
 8013552:	930b      	str	r3, [sp, #44]	; 0x2c
 8013554:	e7df      	b.n	8013516 <_strtod_l+0x266>
 8013556:	2200      	movs	r2, #0
 8013558:	4694      	mov	ip, r2
 801355a:	9205      	str	r2, [sp, #20]
 801355c:	3201      	adds	r2, #1
 801355e:	e7b0      	b.n	80134c2 <_strtod_l+0x212>
 8013560:	000c      	movs	r4, r1
 8013562:	e77e      	b.n	8013462 <_strtod_l+0x1b2>
 8013564:	0801a548 	.word	0x0801a548
 8013568:	ffefffff 	.word	0xffefffff
 801356c:	00000433 	.word	0x00000433
 8013570:	7ff00000 	.word	0x7ff00000
 8013574:	7fffffff 	.word	0x7fffffff
 8013578:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801357a:	1c5a      	adds	r2, r3, #1
 801357c:	9221      	str	r2, [sp, #132]	; 0x84
 801357e:	785b      	ldrb	r3, [r3, #1]
 8013580:	2b30      	cmp	r3, #48	; 0x30
 8013582:	d0f9      	beq.n	8013578 <_strtod_l+0x2c8>
 8013584:	001a      	movs	r2, r3
 8013586:	3a31      	subs	r2, #49	; 0x31
 8013588:	2100      	movs	r1, #0
 801358a:	2a08      	cmp	r2, #8
 801358c:	d816      	bhi.n	80135bc <_strtod_l+0x30c>
 801358e:	3b30      	subs	r3, #48	; 0x30
 8013590:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8013592:	930e      	str	r3, [sp, #56]	; 0x38
 8013594:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013596:	1c59      	adds	r1, r3, #1
 8013598:	9121      	str	r1, [sp, #132]	; 0x84
 801359a:	785b      	ldrb	r3, [r3, #1]
 801359c:	001a      	movs	r2, r3
 801359e:	3a30      	subs	r2, #48	; 0x30
 80135a0:	2a09      	cmp	r2, #9
 80135a2:	d932      	bls.n	801360a <_strtod_l+0x35a>
 80135a4:	1b4a      	subs	r2, r1, r5
 80135a6:	4dad      	ldr	r5, [pc, #692]	; (801385c <_strtod_l+0x5ac>)
 80135a8:	0029      	movs	r1, r5
 80135aa:	2a08      	cmp	r2, #8
 80135ac:	dc03      	bgt.n	80135b6 <_strtod_l+0x306>
 80135ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80135b0:	42a9      	cmp	r1, r5
 80135b2:	dd00      	ble.n	80135b6 <_strtod_l+0x306>
 80135b4:	0029      	movs	r1, r5
 80135b6:	2c00      	cmp	r4, #0
 80135b8:	d000      	beq.n	80135bc <_strtod_l+0x30c>
 80135ba:	4249      	negs	r1, r1
 80135bc:	9a05      	ldr	r2, [sp, #20]
 80135be:	2a00      	cmp	r2, #0
 80135c0:	d149      	bne.n	8013656 <_strtod_l+0x3a6>
 80135c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80135c4:	4310      	orrs	r0, r2
 80135c6:	d000      	beq.n	80135ca <_strtod_l+0x31a>
 80135c8:	e6b3      	b.n	8013332 <_strtod_l+0x82>
 80135ca:	9a07      	ldr	r2, [sp, #28]
 80135cc:	2a00      	cmp	r2, #0
 80135ce:	d000      	beq.n	80135d2 <_strtod_l+0x322>
 80135d0:	e6cf      	b.n	8013372 <_strtod_l+0xc2>
 80135d2:	2b4e      	cmp	r3, #78	; 0x4e
 80135d4:	d025      	beq.n	8013622 <_strtod_l+0x372>
 80135d6:	dc1f      	bgt.n	8013618 <_strtod_l+0x368>
 80135d8:	2b49      	cmp	r3, #73	; 0x49
 80135da:	d000      	beq.n	80135de <_strtod_l+0x32e>
 80135dc:	e6c9      	b.n	8013372 <_strtod_l+0xc2>
 80135de:	49a0      	ldr	r1, [pc, #640]	; (8013860 <_strtod_l+0x5b0>)
 80135e0:	a821      	add	r0, sp, #132	; 0x84
 80135e2:	f003 f9ed 	bl	80169c0 <__match>
 80135e6:	2800      	cmp	r0, #0
 80135e8:	d100      	bne.n	80135ec <_strtod_l+0x33c>
 80135ea:	e6c2      	b.n	8013372 <_strtod_l+0xc2>
 80135ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135ee:	499d      	ldr	r1, [pc, #628]	; (8013864 <_strtod_l+0x5b4>)
 80135f0:	3b01      	subs	r3, #1
 80135f2:	a821      	add	r0, sp, #132	; 0x84
 80135f4:	9321      	str	r3, [sp, #132]	; 0x84
 80135f6:	f003 f9e3 	bl	80169c0 <__match>
 80135fa:	2800      	cmp	r0, #0
 80135fc:	d102      	bne.n	8013604 <_strtod_l+0x354>
 80135fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013600:	3301      	adds	r3, #1
 8013602:	9321      	str	r3, [sp, #132]	; 0x84
 8013604:	4f98      	ldr	r7, [pc, #608]	; (8013868 <_strtod_l+0x5b8>)
 8013606:	2600      	movs	r6, #0
 8013608:	e693      	b.n	8013332 <_strtod_l+0x82>
 801360a:	220a      	movs	r2, #10
 801360c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801360e:	434a      	muls	r2, r1
 8013610:	18d2      	adds	r2, r2, r3
 8013612:	3a30      	subs	r2, #48	; 0x30
 8013614:	920e      	str	r2, [sp, #56]	; 0x38
 8013616:	e7bd      	b.n	8013594 <_strtod_l+0x2e4>
 8013618:	2b69      	cmp	r3, #105	; 0x69
 801361a:	d0e0      	beq.n	80135de <_strtod_l+0x32e>
 801361c:	2b6e      	cmp	r3, #110	; 0x6e
 801361e:	d000      	beq.n	8013622 <_strtod_l+0x372>
 8013620:	e6a7      	b.n	8013372 <_strtod_l+0xc2>
 8013622:	4992      	ldr	r1, [pc, #584]	; (801386c <_strtod_l+0x5bc>)
 8013624:	a821      	add	r0, sp, #132	; 0x84
 8013626:	f003 f9cb 	bl	80169c0 <__match>
 801362a:	2800      	cmp	r0, #0
 801362c:	d100      	bne.n	8013630 <_strtod_l+0x380>
 801362e:	e6a0      	b.n	8013372 <_strtod_l+0xc2>
 8013630:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013632:	781b      	ldrb	r3, [r3, #0]
 8013634:	2b28      	cmp	r3, #40	; 0x28
 8013636:	d10c      	bne.n	8013652 <_strtod_l+0x3a2>
 8013638:	aa24      	add	r2, sp, #144	; 0x90
 801363a:	498d      	ldr	r1, [pc, #564]	; (8013870 <_strtod_l+0x5c0>)
 801363c:	a821      	add	r0, sp, #132	; 0x84
 801363e:	f003 f9d3 	bl	80169e8 <__hexnan>
 8013642:	2805      	cmp	r0, #5
 8013644:	d105      	bne.n	8013652 <_strtod_l+0x3a2>
 8013646:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013648:	4a87      	ldr	r2, [pc, #540]	; (8013868 <_strtod_l+0x5b8>)
 801364a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801364c:	431a      	orrs	r2, r3
 801364e:	0017      	movs	r7, r2
 8013650:	e66f      	b.n	8013332 <_strtod_l+0x82>
 8013652:	4f88      	ldr	r7, [pc, #544]	; (8013874 <_strtod_l+0x5c4>)
 8013654:	e7d7      	b.n	8013606 <_strtod_l+0x356>
 8013656:	4663      	mov	r3, ip
 8013658:	1acb      	subs	r3, r1, r3
 801365a:	9307      	str	r3, [sp, #28]
 801365c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801365e:	2b00      	cmp	r3, #0
 8013660:	d101      	bne.n	8013666 <_strtod_l+0x3b6>
 8013662:	9b05      	ldr	r3, [sp, #20]
 8013664:	930a      	str	r3, [sp, #40]	; 0x28
 8013666:	9c05      	ldr	r4, [sp, #20]
 8013668:	2c10      	cmp	r4, #16
 801366a:	dd00      	ble.n	801366e <_strtod_l+0x3be>
 801366c:	2410      	movs	r4, #16
 801366e:	9808      	ldr	r0, [sp, #32]
 8013670:	f7ef fa30 	bl	8002ad4 <__aeabi_ui2d>
 8013674:	9b05      	ldr	r3, [sp, #20]
 8013676:	0006      	movs	r6, r0
 8013678:	000f      	movs	r7, r1
 801367a:	2b09      	cmp	r3, #9
 801367c:	dc15      	bgt.n	80136aa <_strtod_l+0x3fa>
 801367e:	9b07      	ldr	r3, [sp, #28]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d100      	bne.n	8013686 <_strtod_l+0x3d6>
 8013684:	e655      	b.n	8013332 <_strtod_l+0x82>
 8013686:	9b07      	ldr	r3, [sp, #28]
 8013688:	2b00      	cmp	r3, #0
 801368a:	dc00      	bgt.n	801368e <_strtod_l+0x3de>
 801368c:	e07d      	b.n	801378a <_strtod_l+0x4da>
 801368e:	2b16      	cmp	r3, #22
 8013690:	dc62      	bgt.n	8013758 <_strtod_l+0x4a8>
 8013692:	00dc      	lsls	r4, r3, #3
 8013694:	4b78      	ldr	r3, [pc, #480]	; (8013878 <_strtod_l+0x5c8>)
 8013696:	0032      	movs	r2, r6
 8013698:	1919      	adds	r1, r3, r4
 801369a:	003b      	movs	r3, r7
 801369c:	6808      	ldr	r0, [r1, #0]
 801369e:	6849      	ldr	r1, [r1, #4]
 80136a0:	f7ee fbd2 	bl	8001e48 <__aeabi_dmul>
 80136a4:	0006      	movs	r6, r0
 80136a6:	000f      	movs	r7, r1
 80136a8:	e643      	b.n	8013332 <_strtod_l+0x82>
 80136aa:	0022      	movs	r2, r4
 80136ac:	4b72      	ldr	r3, [pc, #456]	; (8013878 <_strtod_l+0x5c8>)
 80136ae:	3a09      	subs	r2, #9
 80136b0:	00d2      	lsls	r2, r2, #3
 80136b2:	189b      	adds	r3, r3, r2
 80136b4:	681a      	ldr	r2, [r3, #0]
 80136b6:	685b      	ldr	r3, [r3, #4]
 80136b8:	f7ee fbc6 	bl	8001e48 <__aeabi_dmul>
 80136bc:	0006      	movs	r6, r0
 80136be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80136c0:	000f      	movs	r7, r1
 80136c2:	f7ef fa07 	bl	8002ad4 <__aeabi_ui2d>
 80136c6:	000b      	movs	r3, r1
 80136c8:	0002      	movs	r2, r0
 80136ca:	0039      	movs	r1, r7
 80136cc:	0030      	movs	r0, r6
 80136ce:	f7ed fc95 	bl	8000ffc <__aeabi_dadd>
 80136d2:	9b05      	ldr	r3, [sp, #20]
 80136d4:	0006      	movs	r6, r0
 80136d6:	000f      	movs	r7, r1
 80136d8:	2b0f      	cmp	r3, #15
 80136da:	ddd0      	ble.n	801367e <_strtod_l+0x3ce>
 80136dc:	9b05      	ldr	r3, [sp, #20]
 80136de:	1b1c      	subs	r4, r3, r4
 80136e0:	9b07      	ldr	r3, [sp, #28]
 80136e2:	18e4      	adds	r4, r4, r3
 80136e4:	2c00      	cmp	r4, #0
 80136e6:	dc00      	bgt.n	80136ea <_strtod_l+0x43a>
 80136e8:	e094      	b.n	8013814 <_strtod_l+0x564>
 80136ea:	230f      	movs	r3, #15
 80136ec:	4023      	ands	r3, r4
 80136ee:	d00a      	beq.n	8013706 <_strtod_l+0x456>
 80136f0:	4961      	ldr	r1, [pc, #388]	; (8013878 <_strtod_l+0x5c8>)
 80136f2:	00db      	lsls	r3, r3, #3
 80136f4:	18c9      	adds	r1, r1, r3
 80136f6:	0032      	movs	r2, r6
 80136f8:	6808      	ldr	r0, [r1, #0]
 80136fa:	6849      	ldr	r1, [r1, #4]
 80136fc:	003b      	movs	r3, r7
 80136fe:	f7ee fba3 	bl	8001e48 <__aeabi_dmul>
 8013702:	0006      	movs	r6, r0
 8013704:	000f      	movs	r7, r1
 8013706:	230f      	movs	r3, #15
 8013708:	439c      	bics	r4, r3
 801370a:	d06e      	beq.n	80137ea <_strtod_l+0x53a>
 801370c:	3326      	adds	r3, #38	; 0x26
 801370e:	33ff      	adds	r3, #255	; 0xff
 8013710:	429c      	cmp	r4, r3
 8013712:	dd48      	ble.n	80137a6 <_strtod_l+0x4f6>
 8013714:	2400      	movs	r4, #0
 8013716:	9405      	str	r4, [sp, #20]
 8013718:	940b      	str	r4, [sp, #44]	; 0x2c
 801371a:	940a      	str	r4, [sp, #40]	; 0x28
 801371c:	2322      	movs	r3, #34	; 0x22
 801371e:	2600      	movs	r6, #0
 8013720:	9a04      	ldr	r2, [sp, #16]
 8013722:	4f51      	ldr	r7, [pc, #324]	; (8013868 <_strtod_l+0x5b8>)
 8013724:	6013      	str	r3, [r2, #0]
 8013726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013728:	42b3      	cmp	r3, r6
 801372a:	d100      	bne.n	801372e <_strtod_l+0x47e>
 801372c:	e601      	b.n	8013332 <_strtod_l+0x82>
 801372e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013730:	9804      	ldr	r0, [sp, #16]
 8013732:	f003 fa47 	bl	8016bc4 <_Bfree>
 8013736:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013738:	9804      	ldr	r0, [sp, #16]
 801373a:	f003 fa43 	bl	8016bc4 <_Bfree>
 801373e:	9905      	ldr	r1, [sp, #20]
 8013740:	9804      	ldr	r0, [sp, #16]
 8013742:	f003 fa3f 	bl	8016bc4 <_Bfree>
 8013746:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013748:	9804      	ldr	r0, [sp, #16]
 801374a:	f003 fa3b 	bl	8016bc4 <_Bfree>
 801374e:	0021      	movs	r1, r4
 8013750:	9804      	ldr	r0, [sp, #16]
 8013752:	f003 fa37 	bl	8016bc4 <_Bfree>
 8013756:	e5ec      	b.n	8013332 <_strtod_l+0x82>
 8013758:	2325      	movs	r3, #37	; 0x25
 801375a:	9a05      	ldr	r2, [sp, #20]
 801375c:	1a9b      	subs	r3, r3, r2
 801375e:	9a07      	ldr	r2, [sp, #28]
 8013760:	4293      	cmp	r3, r2
 8013762:	dbbb      	blt.n	80136dc <_strtod_l+0x42c>
 8013764:	230f      	movs	r3, #15
 8013766:	9a05      	ldr	r2, [sp, #20]
 8013768:	4c43      	ldr	r4, [pc, #268]	; (8013878 <_strtod_l+0x5c8>)
 801376a:	1a9d      	subs	r5, r3, r2
 801376c:	00e9      	lsls	r1, r5, #3
 801376e:	1861      	adds	r1, r4, r1
 8013770:	0032      	movs	r2, r6
 8013772:	6808      	ldr	r0, [r1, #0]
 8013774:	6849      	ldr	r1, [r1, #4]
 8013776:	003b      	movs	r3, r7
 8013778:	f7ee fb66 	bl	8001e48 <__aeabi_dmul>
 801377c:	9b07      	ldr	r3, [sp, #28]
 801377e:	1b5e      	subs	r6, r3, r5
 8013780:	00f6      	lsls	r6, r6, #3
 8013782:	19a6      	adds	r6, r4, r6
 8013784:	6832      	ldr	r2, [r6, #0]
 8013786:	6873      	ldr	r3, [r6, #4]
 8013788:	e78a      	b.n	80136a0 <_strtod_l+0x3f0>
 801378a:	9b07      	ldr	r3, [sp, #28]
 801378c:	3316      	adds	r3, #22
 801378e:	dba5      	blt.n	80136dc <_strtod_l+0x42c>
 8013790:	9b07      	ldr	r3, [sp, #28]
 8013792:	0030      	movs	r0, r6
 8013794:	00da      	lsls	r2, r3, #3
 8013796:	4b38      	ldr	r3, [pc, #224]	; (8013878 <_strtod_l+0x5c8>)
 8013798:	0039      	movs	r1, r7
 801379a:	1a9b      	subs	r3, r3, r2
 801379c:	681a      	ldr	r2, [r3, #0]
 801379e:	685b      	ldr	r3, [r3, #4]
 80137a0:	f7ed ff48 	bl	8001634 <__aeabi_ddiv>
 80137a4:	e77e      	b.n	80136a4 <_strtod_l+0x3f4>
 80137a6:	2300      	movs	r3, #0
 80137a8:	0030      	movs	r0, r6
 80137aa:	0039      	movs	r1, r7
 80137ac:	001d      	movs	r5, r3
 80137ae:	1124      	asrs	r4, r4, #4
 80137b0:	2c01      	cmp	r4, #1
 80137b2:	dc1d      	bgt.n	80137f0 <_strtod_l+0x540>
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d001      	beq.n	80137bc <_strtod_l+0x50c>
 80137b8:	0006      	movs	r6, r0
 80137ba:	000f      	movs	r7, r1
 80137bc:	4b2f      	ldr	r3, [pc, #188]	; (801387c <_strtod_l+0x5cc>)
 80137be:	00ed      	lsls	r5, r5, #3
 80137c0:	18ff      	adds	r7, r7, r3
 80137c2:	4b2f      	ldr	r3, [pc, #188]	; (8013880 <_strtod_l+0x5d0>)
 80137c4:	0032      	movs	r2, r6
 80137c6:	195d      	adds	r5, r3, r5
 80137c8:	6828      	ldr	r0, [r5, #0]
 80137ca:	6869      	ldr	r1, [r5, #4]
 80137cc:	003b      	movs	r3, r7
 80137ce:	f7ee fb3b 	bl	8001e48 <__aeabi_dmul>
 80137d2:	4b25      	ldr	r3, [pc, #148]	; (8013868 <_strtod_l+0x5b8>)
 80137d4:	4a2b      	ldr	r2, [pc, #172]	; (8013884 <_strtod_l+0x5d4>)
 80137d6:	0006      	movs	r6, r0
 80137d8:	400b      	ands	r3, r1
 80137da:	4293      	cmp	r3, r2
 80137dc:	d89a      	bhi.n	8013714 <_strtod_l+0x464>
 80137de:	4a2a      	ldr	r2, [pc, #168]	; (8013888 <_strtod_l+0x5d8>)
 80137e0:	4293      	cmp	r3, r2
 80137e2:	d913      	bls.n	801380c <_strtod_l+0x55c>
 80137e4:	2601      	movs	r6, #1
 80137e6:	4f29      	ldr	r7, [pc, #164]	; (801388c <_strtod_l+0x5dc>)
 80137e8:	4276      	negs	r6, r6
 80137ea:	2300      	movs	r3, #0
 80137ec:	9306      	str	r3, [sp, #24]
 80137ee:	e07b      	b.n	80138e8 <_strtod_l+0x638>
 80137f0:	2201      	movs	r2, #1
 80137f2:	4214      	tst	r4, r2
 80137f4:	d007      	beq.n	8013806 <_strtod_l+0x556>
 80137f6:	4a22      	ldr	r2, [pc, #136]	; (8013880 <_strtod_l+0x5d0>)
 80137f8:	00eb      	lsls	r3, r5, #3
 80137fa:	189b      	adds	r3, r3, r2
 80137fc:	681a      	ldr	r2, [r3, #0]
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	f7ee fb22 	bl	8001e48 <__aeabi_dmul>
 8013804:	2301      	movs	r3, #1
 8013806:	3501      	adds	r5, #1
 8013808:	1064      	asrs	r4, r4, #1
 801380a:	e7d1      	b.n	80137b0 <_strtod_l+0x500>
 801380c:	23d4      	movs	r3, #212	; 0xd4
 801380e:	049b      	lsls	r3, r3, #18
 8013810:	18cf      	adds	r7, r1, r3
 8013812:	e7ea      	b.n	80137ea <_strtod_l+0x53a>
 8013814:	2c00      	cmp	r4, #0
 8013816:	d0e8      	beq.n	80137ea <_strtod_l+0x53a>
 8013818:	230f      	movs	r3, #15
 801381a:	4264      	negs	r4, r4
 801381c:	4023      	ands	r3, r4
 801381e:	d00a      	beq.n	8013836 <_strtod_l+0x586>
 8013820:	4a15      	ldr	r2, [pc, #84]	; (8013878 <_strtod_l+0x5c8>)
 8013822:	00db      	lsls	r3, r3, #3
 8013824:	18d3      	adds	r3, r2, r3
 8013826:	0030      	movs	r0, r6
 8013828:	681a      	ldr	r2, [r3, #0]
 801382a:	685b      	ldr	r3, [r3, #4]
 801382c:	0039      	movs	r1, r7
 801382e:	f7ed ff01 	bl	8001634 <__aeabi_ddiv>
 8013832:	0006      	movs	r6, r0
 8013834:	000f      	movs	r7, r1
 8013836:	1124      	asrs	r4, r4, #4
 8013838:	d0d7      	beq.n	80137ea <_strtod_l+0x53a>
 801383a:	2c1f      	cmp	r4, #31
 801383c:	dd28      	ble.n	8013890 <_strtod_l+0x5e0>
 801383e:	2400      	movs	r4, #0
 8013840:	9405      	str	r4, [sp, #20]
 8013842:	940b      	str	r4, [sp, #44]	; 0x2c
 8013844:	940a      	str	r4, [sp, #40]	; 0x28
 8013846:	2322      	movs	r3, #34	; 0x22
 8013848:	9a04      	ldr	r2, [sp, #16]
 801384a:	2600      	movs	r6, #0
 801384c:	6013      	str	r3, [r2, #0]
 801384e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013850:	2700      	movs	r7, #0
 8013852:	2b00      	cmp	r3, #0
 8013854:	d000      	beq.n	8013858 <_strtod_l+0x5a8>
 8013856:	e76a      	b.n	801372e <_strtod_l+0x47e>
 8013858:	e56b      	b.n	8013332 <_strtod_l+0x82>
 801385a:	46c0      	nop			; (mov r8, r8)
 801385c:	00004e1f 	.word	0x00004e1f
 8013860:	0801a59d 	.word	0x0801a59d
 8013864:	0801a6f0 	.word	0x0801a6f0
 8013868:	7ff00000 	.word	0x7ff00000
 801386c:	0801a5a5 	.word	0x0801a5a5
 8013870:	0801a55c 	.word	0x0801a55c
 8013874:	fff80000 	.word	0xfff80000
 8013878:	0801a728 	.word	0x0801a728
 801387c:	fcb00000 	.word	0xfcb00000
 8013880:	0801a700 	.word	0x0801a700
 8013884:	7ca00000 	.word	0x7ca00000
 8013888:	7c900000 	.word	0x7c900000
 801388c:	7fefffff 	.word	0x7fefffff
 8013890:	2310      	movs	r3, #16
 8013892:	4023      	ands	r3, r4
 8013894:	9306      	str	r3, [sp, #24]
 8013896:	d001      	beq.n	801389c <_strtod_l+0x5ec>
 8013898:	236a      	movs	r3, #106	; 0x6a
 801389a:	9306      	str	r3, [sp, #24]
 801389c:	2300      	movs	r3, #0
 801389e:	0030      	movs	r0, r6
 80138a0:	0039      	movs	r1, r7
 80138a2:	001d      	movs	r5, r3
 80138a4:	2c00      	cmp	r4, #0
 80138a6:	dd00      	ble.n	80138aa <_strtod_l+0x5fa>
 80138a8:	e10e      	b.n	8013ac8 <_strtod_l+0x818>
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d001      	beq.n	80138b2 <_strtod_l+0x602>
 80138ae:	0006      	movs	r6, r0
 80138b0:	000f      	movs	r7, r1
 80138b2:	9b06      	ldr	r3, [sp, #24]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d00f      	beq.n	80138d8 <_strtod_l+0x628>
 80138b8:	236b      	movs	r3, #107	; 0x6b
 80138ba:	0079      	lsls	r1, r7, #1
 80138bc:	0d49      	lsrs	r1, r1, #21
 80138be:	003a      	movs	r2, r7
 80138c0:	1a5b      	subs	r3, r3, r1
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	dd08      	ble.n	80138d8 <_strtod_l+0x628>
 80138c6:	2b1f      	cmp	r3, #31
 80138c8:	dc00      	bgt.n	80138cc <_strtod_l+0x61c>
 80138ca:	e112      	b.n	8013af2 <_strtod_l+0x842>
 80138cc:	2600      	movs	r6, #0
 80138ce:	2b34      	cmp	r3, #52	; 0x34
 80138d0:	dc00      	bgt.n	80138d4 <_strtod_l+0x624>
 80138d2:	e107      	b.n	8013ae4 <_strtod_l+0x834>
 80138d4:	27dc      	movs	r7, #220	; 0xdc
 80138d6:	04bf      	lsls	r7, r7, #18
 80138d8:	2200      	movs	r2, #0
 80138da:	2300      	movs	r3, #0
 80138dc:	0030      	movs	r0, r6
 80138de:	0039      	movs	r1, r7
 80138e0:	f7ec fdbc 	bl	800045c <__aeabi_dcmpeq>
 80138e4:	2800      	cmp	r0, #0
 80138e6:	d1aa      	bne.n	801383e <_strtod_l+0x58e>
 80138e8:	9b08      	ldr	r3, [sp, #32]
 80138ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80138ec:	9300      	str	r3, [sp, #0]
 80138ee:	9912      	ldr	r1, [sp, #72]	; 0x48
 80138f0:	9b05      	ldr	r3, [sp, #20]
 80138f2:	9804      	ldr	r0, [sp, #16]
 80138f4:	f003 f9ae 	bl	8016c54 <__s2b>
 80138f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80138fa:	2800      	cmp	r0, #0
 80138fc:	d100      	bne.n	8013900 <_strtod_l+0x650>
 80138fe:	e709      	b.n	8013714 <_strtod_l+0x464>
 8013900:	9b07      	ldr	r3, [sp, #28]
 8013902:	9a07      	ldr	r2, [sp, #28]
 8013904:	17db      	asrs	r3, r3, #31
 8013906:	4252      	negs	r2, r2
 8013908:	4013      	ands	r3, r2
 801390a:	9315      	str	r3, [sp, #84]	; 0x54
 801390c:	9b07      	ldr	r3, [sp, #28]
 801390e:	2400      	movs	r4, #0
 8013910:	43db      	mvns	r3, r3
 8013912:	9a07      	ldr	r2, [sp, #28]
 8013914:	17db      	asrs	r3, r3, #31
 8013916:	401a      	ands	r2, r3
 8013918:	921c      	str	r2, [sp, #112]	; 0x70
 801391a:	9405      	str	r4, [sp, #20]
 801391c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801391e:	9804      	ldr	r0, [sp, #16]
 8013920:	6859      	ldr	r1, [r3, #4]
 8013922:	f003 f927 	bl	8016b74 <_Balloc>
 8013926:	900a      	str	r0, [sp, #40]	; 0x28
 8013928:	2800      	cmp	r0, #0
 801392a:	d100      	bne.n	801392e <_strtod_l+0x67e>
 801392c:	e6f6      	b.n	801371c <_strtod_l+0x46c>
 801392e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013930:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013932:	691b      	ldr	r3, [r3, #16]
 8013934:	310c      	adds	r1, #12
 8013936:	1c9a      	adds	r2, r3, #2
 8013938:	0092      	lsls	r2, r2, #2
 801393a:	300c      	adds	r0, #12
 801393c:	9308      	str	r3, [sp, #32]
 801393e:	f7ff fa32 	bl	8012da6 <memcpy>
 8013942:	ab24      	add	r3, sp, #144	; 0x90
 8013944:	9301      	str	r3, [sp, #4]
 8013946:	ab23      	add	r3, sp, #140	; 0x8c
 8013948:	9300      	str	r3, [sp, #0]
 801394a:	0032      	movs	r2, r6
 801394c:	003b      	movs	r3, r7
 801394e:	9804      	ldr	r0, [sp, #16]
 8013950:	960e      	str	r6, [sp, #56]	; 0x38
 8013952:	970f      	str	r7, [sp, #60]	; 0x3c
 8013954:	f003 fc22 	bl	801719c <__d2b>
 8013958:	9022      	str	r0, [sp, #136]	; 0x88
 801395a:	2800      	cmp	r0, #0
 801395c:	d100      	bne.n	8013960 <_strtod_l+0x6b0>
 801395e:	e6dd      	b.n	801371c <_strtod_l+0x46c>
 8013960:	2101      	movs	r1, #1
 8013962:	9804      	ldr	r0, [sp, #16]
 8013964:	f003 f9fd 	bl	8016d62 <__i2b>
 8013968:	9005      	str	r0, [sp, #20]
 801396a:	2800      	cmp	r0, #0
 801396c:	d100      	bne.n	8013970 <_strtod_l+0x6c0>
 801396e:	e6d5      	b.n	801371c <_strtod_l+0x46c>
 8013970:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013972:	2b00      	cmp	r3, #0
 8013974:	da00      	bge.n	8013978 <_strtod_l+0x6c8>
 8013976:	e0c1      	b.n	8013afc <_strtod_l+0x84c>
 8013978:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801397a:	189d      	adds	r5, r3, r2
 801397c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801397e:	4694      	mov	ip, r2
 8013980:	9906      	ldr	r1, [sp, #24]
 8013982:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013984:	1a5b      	subs	r3, r3, r1
 8013986:	2136      	movs	r1, #54	; 0x36
 8013988:	189b      	adds	r3, r3, r2
 801398a:	1a8a      	subs	r2, r1, r2
 801398c:	49b2      	ldr	r1, [pc, #712]	; (8013c58 <_strtod_l+0x9a8>)
 801398e:	3b01      	subs	r3, #1
 8013990:	2001      	movs	r0, #1
 8013992:	428b      	cmp	r3, r1
 8013994:	db00      	blt.n	8013998 <_strtod_l+0x6e8>
 8013996:	e0bd      	b.n	8013b14 <_strtod_l+0x864>
 8013998:	1ac9      	subs	r1, r1, r3
 801399a:	1a52      	subs	r2, r2, r1
 801399c:	291f      	cmp	r1, #31
 801399e:	dd00      	ble.n	80139a2 <_strtod_l+0x6f2>
 80139a0:	e0b1      	b.n	8013b06 <_strtod_l+0x856>
 80139a2:	4088      	lsls	r0, r1
 80139a4:	2300      	movs	r3, #0
 80139a6:	9014      	str	r0, [sp, #80]	; 0x50
 80139a8:	9310      	str	r3, [sp, #64]	; 0x40
 80139aa:	18ab      	adds	r3, r5, r2
 80139ac:	9308      	str	r3, [sp, #32]
 80139ae:	0013      	movs	r3, r2
 80139b0:	9a06      	ldr	r2, [sp, #24]
 80139b2:	4463      	add	r3, ip
 80139b4:	18d3      	adds	r3, r2, r3
 80139b6:	9a08      	ldr	r2, [sp, #32]
 80139b8:	930c      	str	r3, [sp, #48]	; 0x30
 80139ba:	002b      	movs	r3, r5
 80139bc:	4295      	cmp	r5, r2
 80139be:	dd00      	ble.n	80139c2 <_strtod_l+0x712>
 80139c0:	0013      	movs	r3, r2
 80139c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80139c4:	4293      	cmp	r3, r2
 80139c6:	dd00      	ble.n	80139ca <_strtod_l+0x71a>
 80139c8:	0013      	movs	r3, r2
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	dd06      	ble.n	80139dc <_strtod_l+0x72c>
 80139ce:	9a08      	ldr	r2, [sp, #32]
 80139d0:	1aed      	subs	r5, r5, r3
 80139d2:	1ad2      	subs	r2, r2, r3
 80139d4:	9208      	str	r2, [sp, #32]
 80139d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80139d8:	1ad2      	subs	r2, r2, r3
 80139da:	920c      	str	r2, [sp, #48]	; 0x30
 80139dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d017      	beq.n	8013a12 <_strtod_l+0x762>
 80139e2:	001a      	movs	r2, r3
 80139e4:	9905      	ldr	r1, [sp, #20]
 80139e6:	9804      	ldr	r0, [sp, #16]
 80139e8:	f003 fa54 	bl	8016e94 <__pow5mult>
 80139ec:	9005      	str	r0, [sp, #20]
 80139ee:	2800      	cmp	r0, #0
 80139f0:	d100      	bne.n	80139f4 <_strtod_l+0x744>
 80139f2:	e693      	b.n	801371c <_strtod_l+0x46c>
 80139f4:	0001      	movs	r1, r0
 80139f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80139f8:	9804      	ldr	r0, [sp, #16]
 80139fa:	f003 f9bb 	bl	8016d74 <__multiply>
 80139fe:	9012      	str	r0, [sp, #72]	; 0x48
 8013a00:	2800      	cmp	r0, #0
 8013a02:	d100      	bne.n	8013a06 <_strtod_l+0x756>
 8013a04:	e68a      	b.n	801371c <_strtod_l+0x46c>
 8013a06:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013a08:	9804      	ldr	r0, [sp, #16]
 8013a0a:	f003 f8db 	bl	8016bc4 <_Bfree>
 8013a0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a10:	9322      	str	r3, [sp, #136]	; 0x88
 8013a12:	9b08      	ldr	r3, [sp, #32]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	dd00      	ble.n	8013a1a <_strtod_l+0x76a>
 8013a18:	e07f      	b.n	8013b1a <_strtod_l+0x86a>
 8013a1a:	9b07      	ldr	r3, [sp, #28]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	dd08      	ble.n	8013a32 <_strtod_l+0x782>
 8013a20:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013a22:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a24:	9804      	ldr	r0, [sp, #16]
 8013a26:	f003 fa35 	bl	8016e94 <__pow5mult>
 8013a2a:	900a      	str	r0, [sp, #40]	; 0x28
 8013a2c:	2800      	cmp	r0, #0
 8013a2e:	d100      	bne.n	8013a32 <_strtod_l+0x782>
 8013a30:	e674      	b.n	801371c <_strtod_l+0x46c>
 8013a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	dd08      	ble.n	8013a4a <_strtod_l+0x79a>
 8013a38:	001a      	movs	r2, r3
 8013a3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a3c:	9804      	ldr	r0, [sp, #16]
 8013a3e:	f003 fa6b 	bl	8016f18 <__lshift>
 8013a42:	900a      	str	r0, [sp, #40]	; 0x28
 8013a44:	2800      	cmp	r0, #0
 8013a46:	d100      	bne.n	8013a4a <_strtod_l+0x79a>
 8013a48:	e668      	b.n	801371c <_strtod_l+0x46c>
 8013a4a:	2d00      	cmp	r5, #0
 8013a4c:	dd08      	ble.n	8013a60 <_strtod_l+0x7b0>
 8013a4e:	002a      	movs	r2, r5
 8013a50:	9905      	ldr	r1, [sp, #20]
 8013a52:	9804      	ldr	r0, [sp, #16]
 8013a54:	f003 fa60 	bl	8016f18 <__lshift>
 8013a58:	9005      	str	r0, [sp, #20]
 8013a5a:	2800      	cmp	r0, #0
 8013a5c:	d100      	bne.n	8013a60 <_strtod_l+0x7b0>
 8013a5e:	e65d      	b.n	801371c <_strtod_l+0x46c>
 8013a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a62:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013a64:	9804      	ldr	r0, [sp, #16]
 8013a66:	f003 fac3 	bl	8016ff0 <__mdiff>
 8013a6a:	1e04      	subs	r4, r0, #0
 8013a6c:	d100      	bne.n	8013a70 <_strtod_l+0x7c0>
 8013a6e:	e655      	b.n	801371c <_strtod_l+0x46c>
 8013a70:	2500      	movs	r5, #0
 8013a72:	68c3      	ldr	r3, [r0, #12]
 8013a74:	9905      	ldr	r1, [sp, #20]
 8013a76:	60c5      	str	r5, [r0, #12]
 8013a78:	9312      	str	r3, [sp, #72]	; 0x48
 8013a7a:	f003 fa9f 	bl	8016fbc <__mcmp>
 8013a7e:	42a8      	cmp	r0, r5
 8013a80:	da55      	bge.n	8013b2e <_strtod_l+0x87e>
 8013a82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a84:	42ab      	cmp	r3, r5
 8013a86:	d11b      	bne.n	8013ac0 <_strtod_l+0x810>
 8013a88:	42ae      	cmp	r6, r5
 8013a8a:	d119      	bne.n	8013ac0 <_strtod_l+0x810>
 8013a8c:	033b      	lsls	r3, r7, #12
 8013a8e:	42ab      	cmp	r3, r5
 8013a90:	d116      	bne.n	8013ac0 <_strtod_l+0x810>
 8013a92:	22d6      	movs	r2, #214	; 0xd6
 8013a94:	4b71      	ldr	r3, [pc, #452]	; (8013c5c <_strtod_l+0x9ac>)
 8013a96:	04d2      	lsls	r2, r2, #19
 8013a98:	403b      	ands	r3, r7
 8013a9a:	4293      	cmp	r3, r2
 8013a9c:	d910      	bls.n	8013ac0 <_strtod_l+0x810>
 8013a9e:	6963      	ldr	r3, [r4, #20]
 8013aa0:	42ab      	cmp	r3, r5
 8013aa2:	d102      	bne.n	8013aaa <_strtod_l+0x7fa>
 8013aa4:	6923      	ldr	r3, [r4, #16]
 8013aa6:	2b01      	cmp	r3, #1
 8013aa8:	dd0a      	ble.n	8013ac0 <_strtod_l+0x810>
 8013aaa:	0021      	movs	r1, r4
 8013aac:	2201      	movs	r2, #1
 8013aae:	9804      	ldr	r0, [sp, #16]
 8013ab0:	f003 fa32 	bl	8016f18 <__lshift>
 8013ab4:	9905      	ldr	r1, [sp, #20]
 8013ab6:	0004      	movs	r4, r0
 8013ab8:	f003 fa80 	bl	8016fbc <__mcmp>
 8013abc:	2800      	cmp	r0, #0
 8013abe:	dc6b      	bgt.n	8013b98 <_strtod_l+0x8e8>
 8013ac0:	9b06      	ldr	r3, [sp, #24]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d178      	bne.n	8013bb8 <_strtod_l+0x908>
 8013ac6:	e632      	b.n	801372e <_strtod_l+0x47e>
 8013ac8:	2201      	movs	r2, #1
 8013aca:	4214      	tst	r4, r2
 8013acc:	d007      	beq.n	8013ade <_strtod_l+0x82e>
 8013ace:	4a64      	ldr	r2, [pc, #400]	; (8013c60 <_strtod_l+0x9b0>)
 8013ad0:	00eb      	lsls	r3, r5, #3
 8013ad2:	18d3      	adds	r3, r2, r3
 8013ad4:	681a      	ldr	r2, [r3, #0]
 8013ad6:	685b      	ldr	r3, [r3, #4]
 8013ad8:	f7ee f9b6 	bl	8001e48 <__aeabi_dmul>
 8013adc:	2301      	movs	r3, #1
 8013ade:	3501      	adds	r5, #1
 8013ae0:	1064      	asrs	r4, r4, #1
 8013ae2:	e6df      	b.n	80138a4 <_strtod_l+0x5f4>
 8013ae4:	2101      	movs	r1, #1
 8013ae6:	3b20      	subs	r3, #32
 8013ae8:	4249      	negs	r1, r1
 8013aea:	4099      	lsls	r1, r3
 8013aec:	400a      	ands	r2, r1
 8013aee:	0017      	movs	r7, r2
 8013af0:	e6f2      	b.n	80138d8 <_strtod_l+0x628>
 8013af2:	2201      	movs	r2, #1
 8013af4:	4252      	negs	r2, r2
 8013af6:	409a      	lsls	r2, r3
 8013af8:	4016      	ands	r6, r2
 8013afa:	e6ed      	b.n	80138d8 <_strtod_l+0x628>
 8013afc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013afe:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013b00:	1ad2      	subs	r2, r2, r3
 8013b02:	4694      	mov	ip, r2
 8013b04:	e73c      	b.n	8013980 <_strtod_l+0x6d0>
 8013b06:	4957      	ldr	r1, [pc, #348]	; (8013c64 <_strtod_l+0x9b4>)
 8013b08:	1acb      	subs	r3, r1, r3
 8013b0a:	0001      	movs	r1, r0
 8013b0c:	4099      	lsls	r1, r3
 8013b0e:	9110      	str	r1, [sp, #64]	; 0x40
 8013b10:	9014      	str	r0, [sp, #80]	; 0x50
 8013b12:	e74a      	b.n	80139aa <_strtod_l+0x6fa>
 8013b14:	2300      	movs	r3, #0
 8013b16:	9310      	str	r3, [sp, #64]	; 0x40
 8013b18:	e7fa      	b.n	8013b10 <_strtod_l+0x860>
 8013b1a:	9a08      	ldr	r2, [sp, #32]
 8013b1c:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013b1e:	9804      	ldr	r0, [sp, #16]
 8013b20:	f003 f9fa 	bl	8016f18 <__lshift>
 8013b24:	9022      	str	r0, [sp, #136]	; 0x88
 8013b26:	2800      	cmp	r0, #0
 8013b28:	d000      	beq.n	8013b2c <_strtod_l+0x87c>
 8013b2a:	e776      	b.n	8013a1a <_strtod_l+0x76a>
 8013b2c:	e5f6      	b.n	801371c <_strtod_l+0x46c>
 8013b2e:	970c      	str	r7, [sp, #48]	; 0x30
 8013b30:	2800      	cmp	r0, #0
 8013b32:	d000      	beq.n	8013b36 <_strtod_l+0x886>
 8013b34:	e0a0      	b.n	8013c78 <_strtod_l+0x9c8>
 8013b36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b38:	033b      	lsls	r3, r7, #12
 8013b3a:	0b1b      	lsrs	r3, r3, #12
 8013b3c:	2a00      	cmp	r2, #0
 8013b3e:	d027      	beq.n	8013b90 <_strtod_l+0x8e0>
 8013b40:	4a49      	ldr	r2, [pc, #292]	; (8013c68 <_strtod_l+0x9b8>)
 8013b42:	4293      	cmp	r3, r2
 8013b44:	d157      	bne.n	8013bf6 <_strtod_l+0x946>
 8013b46:	2201      	movs	r2, #1
 8013b48:	9b06      	ldr	r3, [sp, #24]
 8013b4a:	4252      	negs	r2, r2
 8013b4c:	0031      	movs	r1, r6
 8013b4e:	0010      	movs	r0, r2
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d00b      	beq.n	8013b6c <_strtod_l+0x8bc>
 8013b54:	25d4      	movs	r5, #212	; 0xd4
 8013b56:	4b41      	ldr	r3, [pc, #260]	; (8013c5c <_strtod_l+0x9ac>)
 8013b58:	04ed      	lsls	r5, r5, #19
 8013b5a:	403b      	ands	r3, r7
 8013b5c:	0010      	movs	r0, r2
 8013b5e:	42ab      	cmp	r3, r5
 8013b60:	d804      	bhi.n	8013b6c <_strtod_l+0x8bc>
 8013b62:	306c      	adds	r0, #108	; 0x6c
 8013b64:	0d1b      	lsrs	r3, r3, #20
 8013b66:	1ac3      	subs	r3, r0, r3
 8013b68:	409a      	lsls	r2, r3
 8013b6a:	0010      	movs	r0, r2
 8013b6c:	4281      	cmp	r1, r0
 8013b6e:	d142      	bne.n	8013bf6 <_strtod_l+0x946>
 8013b70:	4b3e      	ldr	r3, [pc, #248]	; (8013c6c <_strtod_l+0x9bc>)
 8013b72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b74:	429a      	cmp	r2, r3
 8013b76:	d102      	bne.n	8013b7e <_strtod_l+0x8ce>
 8013b78:	1c4b      	adds	r3, r1, #1
 8013b7a:	d100      	bne.n	8013b7e <_strtod_l+0x8ce>
 8013b7c:	e5ce      	b.n	801371c <_strtod_l+0x46c>
 8013b7e:	4b37      	ldr	r3, [pc, #220]	; (8013c5c <_strtod_l+0x9ac>)
 8013b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b82:	2600      	movs	r6, #0
 8013b84:	401a      	ands	r2, r3
 8013b86:	0013      	movs	r3, r2
 8013b88:	2280      	movs	r2, #128	; 0x80
 8013b8a:	0352      	lsls	r2, r2, #13
 8013b8c:	189f      	adds	r7, r3, r2
 8013b8e:	e797      	b.n	8013ac0 <_strtod_l+0x810>
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d130      	bne.n	8013bf6 <_strtod_l+0x946>
 8013b94:	2e00      	cmp	r6, #0
 8013b96:	d12e      	bne.n	8013bf6 <_strtod_l+0x946>
 8013b98:	9906      	ldr	r1, [sp, #24]
 8013b9a:	003b      	movs	r3, r7
 8013b9c:	4a2f      	ldr	r2, [pc, #188]	; (8013c5c <_strtod_l+0x9ac>)
 8013b9e:	2900      	cmp	r1, #0
 8013ba0:	d020      	beq.n	8013be4 <_strtod_l+0x934>
 8013ba2:	0011      	movs	r1, r2
 8013ba4:	20d6      	movs	r0, #214	; 0xd6
 8013ba6:	4039      	ands	r1, r7
 8013ba8:	04c0      	lsls	r0, r0, #19
 8013baa:	4281      	cmp	r1, r0
 8013bac:	dc1a      	bgt.n	8013be4 <_strtod_l+0x934>
 8013bae:	23dc      	movs	r3, #220	; 0xdc
 8013bb0:	049b      	lsls	r3, r3, #18
 8013bb2:	4299      	cmp	r1, r3
 8013bb4:	dc00      	bgt.n	8013bb8 <_strtod_l+0x908>
 8013bb6:	e646      	b.n	8013846 <_strtod_l+0x596>
 8013bb8:	4b2d      	ldr	r3, [pc, #180]	; (8013c70 <_strtod_l+0x9c0>)
 8013bba:	0030      	movs	r0, r6
 8013bbc:	931b      	str	r3, [sp, #108]	; 0x6c
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	931a      	str	r3, [sp, #104]	; 0x68
 8013bc2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013bc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013bc6:	0039      	movs	r1, r7
 8013bc8:	f7ee f93e 	bl	8001e48 <__aeabi_dmul>
 8013bcc:	0006      	movs	r6, r0
 8013bce:	000f      	movs	r7, r1
 8013bd0:	1e0b      	subs	r3, r1, #0
 8013bd2:	d000      	beq.n	8013bd6 <_strtod_l+0x926>
 8013bd4:	e5ab      	b.n	801372e <_strtod_l+0x47e>
 8013bd6:	2800      	cmp	r0, #0
 8013bd8:	d000      	beq.n	8013bdc <_strtod_l+0x92c>
 8013bda:	e5a8      	b.n	801372e <_strtod_l+0x47e>
 8013bdc:	9a04      	ldr	r2, [sp, #16]
 8013bde:	3322      	adds	r3, #34	; 0x22
 8013be0:	6013      	str	r3, [r2, #0]
 8013be2:	e5a4      	b.n	801372e <_strtod_l+0x47e>
 8013be4:	2601      	movs	r6, #1
 8013be6:	4013      	ands	r3, r2
 8013be8:	4a22      	ldr	r2, [pc, #136]	; (8013c74 <_strtod_l+0x9c4>)
 8013bea:	4276      	negs	r6, r6
 8013bec:	189b      	adds	r3, r3, r2
 8013bee:	4a1e      	ldr	r2, [pc, #120]	; (8013c68 <_strtod_l+0x9b8>)
 8013bf0:	431a      	orrs	r2, r3
 8013bf2:	0017      	movs	r7, r2
 8013bf4:	e764      	b.n	8013ac0 <_strtod_l+0x810>
 8013bf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d015      	beq.n	8013c28 <_strtod_l+0x978>
 8013bfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013bfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013c00:	4213      	tst	r3, r2
 8013c02:	d100      	bne.n	8013c06 <_strtod_l+0x956>
 8013c04:	e75c      	b.n	8013ac0 <_strtod_l+0x810>
 8013c06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c08:	9a06      	ldr	r2, [sp, #24]
 8013c0a:	0030      	movs	r0, r6
 8013c0c:	0039      	movs	r1, r7
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d00f      	beq.n	8013c32 <_strtod_l+0x982>
 8013c12:	f7ff fb35 	bl	8013280 <sulp>
 8013c16:	0002      	movs	r2, r0
 8013c18:	000b      	movs	r3, r1
 8013c1a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013c1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013c1e:	f7ed f9ed 	bl	8000ffc <__aeabi_dadd>
 8013c22:	0006      	movs	r6, r0
 8013c24:	000f      	movs	r7, r1
 8013c26:	e74b      	b.n	8013ac0 <_strtod_l+0x810>
 8013c28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013c2a:	4233      	tst	r3, r6
 8013c2c:	d100      	bne.n	8013c30 <_strtod_l+0x980>
 8013c2e:	e747      	b.n	8013ac0 <_strtod_l+0x810>
 8013c30:	e7e9      	b.n	8013c06 <_strtod_l+0x956>
 8013c32:	f7ff fb25 	bl	8013280 <sulp>
 8013c36:	0002      	movs	r2, r0
 8013c38:	000b      	movs	r3, r1
 8013c3a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013c3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013c3e:	f7ee fb75 	bl	800232c <__aeabi_dsub>
 8013c42:	2200      	movs	r2, #0
 8013c44:	2300      	movs	r3, #0
 8013c46:	0006      	movs	r6, r0
 8013c48:	000f      	movs	r7, r1
 8013c4a:	f7ec fc07 	bl	800045c <__aeabi_dcmpeq>
 8013c4e:	2800      	cmp	r0, #0
 8013c50:	d000      	beq.n	8013c54 <_strtod_l+0x9a4>
 8013c52:	e5f8      	b.n	8013846 <_strtod_l+0x596>
 8013c54:	e734      	b.n	8013ac0 <_strtod_l+0x810>
 8013c56:	46c0      	nop			; (mov r8, r8)
 8013c58:	fffffc02 	.word	0xfffffc02
 8013c5c:	7ff00000 	.word	0x7ff00000
 8013c60:	0801a570 	.word	0x0801a570
 8013c64:	fffffbe2 	.word	0xfffffbe2
 8013c68:	000fffff 	.word	0x000fffff
 8013c6c:	7fefffff 	.word	0x7fefffff
 8013c70:	39500000 	.word	0x39500000
 8013c74:	fff00000 	.word	0xfff00000
 8013c78:	9905      	ldr	r1, [sp, #20]
 8013c7a:	0020      	movs	r0, r4
 8013c7c:	f003 fae2 	bl	8017244 <__ratio>
 8013c80:	2380      	movs	r3, #128	; 0x80
 8013c82:	2200      	movs	r2, #0
 8013c84:	05db      	lsls	r3, r3, #23
 8013c86:	9008      	str	r0, [sp, #32]
 8013c88:	9109      	str	r1, [sp, #36]	; 0x24
 8013c8a:	f7ec fbf7 	bl	800047c <__aeabi_dcmple>
 8013c8e:	2800      	cmp	r0, #0
 8013c90:	d100      	bne.n	8013c94 <_strtod_l+0x9e4>
 8013c92:	e07f      	b.n	8013d94 <_strtod_l+0xae4>
 8013c94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d04b      	beq.n	8013d32 <_strtod_l+0xa82>
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	4b8a      	ldr	r3, [pc, #552]	; (8013ec8 <_strtod_l+0xc18>)
 8013c9e:	9210      	str	r2, [sp, #64]	; 0x40
 8013ca0:	9311      	str	r3, [sp, #68]	; 0x44
 8013ca2:	4b89      	ldr	r3, [pc, #548]	; (8013ec8 <_strtod_l+0xc18>)
 8013ca4:	9308      	str	r3, [sp, #32]
 8013ca6:	4a89      	ldr	r2, [pc, #548]	; (8013ecc <_strtod_l+0xc1c>)
 8013ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013caa:	4013      	ands	r3, r2
 8013cac:	9314      	str	r3, [sp, #80]	; 0x50
 8013cae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013cb0:	4b87      	ldr	r3, [pc, #540]	; (8013ed0 <_strtod_l+0xc20>)
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d000      	beq.n	8013cb8 <_strtod_l+0xa08>
 8013cb6:	e0ba      	b.n	8013e2e <_strtod_l+0xb7e>
 8013cb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013cba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013cbc:	921a      	str	r2, [sp, #104]	; 0x68
 8013cbe:	931b      	str	r3, [sp, #108]	; 0x6c
 8013cc0:	4a84      	ldr	r2, [pc, #528]	; (8013ed4 <_strtod_l+0xc24>)
 8013cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cc4:	4694      	mov	ip, r2
 8013cc6:	4463      	add	r3, ip
 8013cc8:	001f      	movs	r7, r3
 8013cca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013ccc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013cce:	0030      	movs	r0, r6
 8013cd0:	0039      	movs	r1, r7
 8013cd2:	920c      	str	r2, [sp, #48]	; 0x30
 8013cd4:	930d      	str	r3, [sp, #52]	; 0x34
 8013cd6:	f003 f9ef 	bl	80170b8 <__ulp>
 8013cda:	0002      	movs	r2, r0
 8013cdc:	000b      	movs	r3, r1
 8013cde:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013ce0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013ce2:	f7ee f8b1 	bl	8001e48 <__aeabi_dmul>
 8013ce6:	0032      	movs	r2, r6
 8013ce8:	003b      	movs	r3, r7
 8013cea:	f7ed f987 	bl	8000ffc <__aeabi_dadd>
 8013cee:	4a77      	ldr	r2, [pc, #476]	; (8013ecc <_strtod_l+0xc1c>)
 8013cf0:	4b79      	ldr	r3, [pc, #484]	; (8013ed8 <_strtod_l+0xc28>)
 8013cf2:	0006      	movs	r6, r0
 8013cf4:	400a      	ands	r2, r1
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	d964      	bls.n	8013dc4 <_strtod_l+0xb14>
 8013cfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013cfc:	4a77      	ldr	r2, [pc, #476]	; (8013edc <_strtod_l+0xc2c>)
 8013cfe:	4293      	cmp	r3, r2
 8013d00:	d103      	bne.n	8013d0a <_strtod_l+0xa5a>
 8013d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013d04:	3301      	adds	r3, #1
 8013d06:	d100      	bne.n	8013d0a <_strtod_l+0xa5a>
 8013d08:	e508      	b.n	801371c <_strtod_l+0x46c>
 8013d0a:	2601      	movs	r6, #1
 8013d0c:	4f73      	ldr	r7, [pc, #460]	; (8013edc <_strtod_l+0xc2c>)
 8013d0e:	4276      	negs	r6, r6
 8013d10:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013d12:	9804      	ldr	r0, [sp, #16]
 8013d14:	f002 ff56 	bl	8016bc4 <_Bfree>
 8013d18:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013d1a:	9804      	ldr	r0, [sp, #16]
 8013d1c:	f002 ff52 	bl	8016bc4 <_Bfree>
 8013d20:	9905      	ldr	r1, [sp, #20]
 8013d22:	9804      	ldr	r0, [sp, #16]
 8013d24:	f002 ff4e 	bl	8016bc4 <_Bfree>
 8013d28:	0021      	movs	r1, r4
 8013d2a:	9804      	ldr	r0, [sp, #16]
 8013d2c:	f002 ff4a 	bl	8016bc4 <_Bfree>
 8013d30:	e5f4      	b.n	801391c <_strtod_l+0x66c>
 8013d32:	2e00      	cmp	r6, #0
 8013d34:	d11e      	bne.n	8013d74 <_strtod_l+0xac4>
 8013d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d38:	031b      	lsls	r3, r3, #12
 8013d3a:	d121      	bne.n	8013d80 <_strtod_l+0xad0>
 8013d3c:	9808      	ldr	r0, [sp, #32]
 8013d3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d40:	2200      	movs	r2, #0
 8013d42:	4b61      	ldr	r3, [pc, #388]	; (8013ec8 <_strtod_l+0xc18>)
 8013d44:	f7ec fb90 	bl	8000468 <__aeabi_dcmplt>
 8013d48:	2800      	cmp	r0, #0
 8013d4a:	d11f      	bne.n	8013d8c <_strtod_l+0xadc>
 8013d4c:	9808      	ldr	r0, [sp, #32]
 8013d4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d50:	2200      	movs	r2, #0
 8013d52:	4b63      	ldr	r3, [pc, #396]	; (8013ee0 <_strtod_l+0xc30>)
 8013d54:	f7ee f878 	bl	8001e48 <__aeabi_dmul>
 8013d58:	0005      	movs	r5, r0
 8013d5a:	9108      	str	r1, [sp, #32]
 8013d5c:	2280      	movs	r2, #128	; 0x80
 8013d5e:	0612      	lsls	r2, r2, #24
 8013d60:	4694      	mov	ip, r2
 8013d62:	9b08      	ldr	r3, [sp, #32]
 8013d64:	951e      	str	r5, [sp, #120]	; 0x78
 8013d66:	4463      	add	r3, ip
 8013d68:	931f      	str	r3, [sp, #124]	; 0x7c
 8013d6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013d6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013d6e:	9210      	str	r2, [sp, #64]	; 0x40
 8013d70:	9311      	str	r3, [sp, #68]	; 0x44
 8013d72:	e798      	b.n	8013ca6 <_strtod_l+0x9f6>
 8013d74:	2e01      	cmp	r6, #1
 8013d76:	d103      	bne.n	8013d80 <_strtod_l+0xad0>
 8013d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d100      	bne.n	8013d80 <_strtod_l+0xad0>
 8013d7e:	e562      	b.n	8013846 <_strtod_l+0x596>
 8013d80:	2200      	movs	r2, #0
 8013d82:	4b58      	ldr	r3, [pc, #352]	; (8013ee4 <_strtod_l+0xc34>)
 8013d84:	2500      	movs	r5, #0
 8013d86:	9210      	str	r2, [sp, #64]	; 0x40
 8013d88:	9311      	str	r3, [sp, #68]	; 0x44
 8013d8a:	e78a      	b.n	8013ca2 <_strtod_l+0x9f2>
 8013d8c:	4b54      	ldr	r3, [pc, #336]	; (8013ee0 <_strtod_l+0xc30>)
 8013d8e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013d90:	9308      	str	r3, [sp, #32]
 8013d92:	e7e3      	b.n	8013d5c <_strtod_l+0xaac>
 8013d94:	4b52      	ldr	r3, [pc, #328]	; (8013ee0 <_strtod_l+0xc30>)
 8013d96:	9808      	ldr	r0, [sp, #32]
 8013d98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	f7ee f854 	bl	8001e48 <__aeabi_dmul>
 8013da0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013da2:	0005      	movs	r5, r0
 8013da4:	9108      	str	r1, [sp, #32]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d107      	bne.n	8013dba <_strtod_l+0xb0a>
 8013daa:	2380      	movs	r3, #128	; 0x80
 8013dac:	061b      	lsls	r3, r3, #24
 8013dae:	18cb      	adds	r3, r1, r3
 8013db0:	9016      	str	r0, [sp, #88]	; 0x58
 8013db2:	9317      	str	r3, [sp, #92]	; 0x5c
 8013db4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013db6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013db8:	e7d9      	b.n	8013d6e <_strtod_l+0xabe>
 8013dba:	0002      	movs	r2, r0
 8013dbc:	9b08      	ldr	r3, [sp, #32]
 8013dbe:	9216      	str	r2, [sp, #88]	; 0x58
 8013dc0:	9317      	str	r3, [sp, #92]	; 0x5c
 8013dc2:	e7f7      	b.n	8013db4 <_strtod_l+0xb04>
 8013dc4:	23d4      	movs	r3, #212	; 0xd4
 8013dc6:	049b      	lsls	r3, r3, #18
 8013dc8:	18cf      	adds	r7, r1, r3
 8013dca:	9b06      	ldr	r3, [sp, #24]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d19f      	bne.n	8013d10 <_strtod_l+0xa60>
 8013dd0:	4b3e      	ldr	r3, [pc, #248]	; (8013ecc <_strtod_l+0xc1c>)
 8013dd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013dd4:	970c      	str	r7, [sp, #48]	; 0x30
 8013dd6:	403b      	ands	r3, r7
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d199      	bne.n	8013d10 <_strtod_l+0xa60>
 8013ddc:	9908      	ldr	r1, [sp, #32]
 8013dde:	0028      	movs	r0, r5
 8013de0:	f7ee fe08 	bl	80029f4 <__aeabi_d2iz>
 8013de4:	f7ee fe3c 	bl	8002a60 <__aeabi_i2d>
 8013de8:	000b      	movs	r3, r1
 8013dea:	0002      	movs	r2, r0
 8013dec:	9908      	ldr	r1, [sp, #32]
 8013dee:	0028      	movs	r0, r5
 8013df0:	f7ee fa9c 	bl	800232c <__aeabi_dsub>
 8013df4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013df6:	9008      	str	r0, [sp, #32]
 8013df8:	9109      	str	r1, [sp, #36]	; 0x24
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d104      	bne.n	8013e08 <_strtod_l+0xb58>
 8013dfe:	2e00      	cmp	r6, #0
 8013e00:	d102      	bne.n	8013e08 <_strtod_l+0xb58>
 8013e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e04:	031b      	lsls	r3, r3, #12
 8013e06:	d058      	beq.n	8013eba <_strtod_l+0xc0a>
 8013e08:	9808      	ldr	r0, [sp, #32]
 8013e0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e0c:	4a36      	ldr	r2, [pc, #216]	; (8013ee8 <_strtod_l+0xc38>)
 8013e0e:	4b37      	ldr	r3, [pc, #220]	; (8013eec <_strtod_l+0xc3c>)
 8013e10:	f7ec fb2a 	bl	8000468 <__aeabi_dcmplt>
 8013e14:	2800      	cmp	r0, #0
 8013e16:	d000      	beq.n	8013e1a <_strtod_l+0xb6a>
 8013e18:	e489      	b.n	801372e <_strtod_l+0x47e>
 8013e1a:	9808      	ldr	r0, [sp, #32]
 8013e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e1e:	4a34      	ldr	r2, [pc, #208]	; (8013ef0 <_strtod_l+0xc40>)
 8013e20:	4b2f      	ldr	r3, [pc, #188]	; (8013ee0 <_strtod_l+0xc30>)
 8013e22:	f7ec fb35 	bl	8000490 <__aeabi_dcmpgt>
 8013e26:	2800      	cmp	r0, #0
 8013e28:	d100      	bne.n	8013e2c <_strtod_l+0xb7c>
 8013e2a:	e771      	b.n	8013d10 <_strtod_l+0xa60>
 8013e2c:	e47f      	b.n	801372e <_strtod_l+0x47e>
 8013e2e:	9b06      	ldr	r3, [sp, #24]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d02a      	beq.n	8013e8a <_strtod_l+0xbda>
 8013e34:	23d4      	movs	r3, #212	; 0xd4
 8013e36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013e38:	04db      	lsls	r3, r3, #19
 8013e3a:	429a      	cmp	r2, r3
 8013e3c:	d825      	bhi.n	8013e8a <_strtod_l+0xbda>
 8013e3e:	4a2d      	ldr	r2, [pc, #180]	; (8013ef4 <_strtod_l+0xc44>)
 8013e40:	4b2d      	ldr	r3, [pc, #180]	; (8013ef8 <_strtod_l+0xc48>)
 8013e42:	0028      	movs	r0, r5
 8013e44:	9908      	ldr	r1, [sp, #32]
 8013e46:	f7ec fb19 	bl	800047c <__aeabi_dcmple>
 8013e4a:	2800      	cmp	r0, #0
 8013e4c:	d016      	beq.n	8013e7c <_strtod_l+0xbcc>
 8013e4e:	0028      	movs	r0, r5
 8013e50:	9908      	ldr	r1, [sp, #32]
 8013e52:	f7ec fbd7 	bl	8000604 <__aeabi_d2uiz>
 8013e56:	2800      	cmp	r0, #0
 8013e58:	d100      	bne.n	8013e5c <_strtod_l+0xbac>
 8013e5a:	3001      	adds	r0, #1
 8013e5c:	f7ee fe3a 	bl	8002ad4 <__aeabi_ui2d>
 8013e60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e62:	0005      	movs	r5, r0
 8013e64:	9108      	str	r1, [sp, #32]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d122      	bne.n	8013eb0 <_strtod_l+0xc00>
 8013e6a:	2380      	movs	r3, #128	; 0x80
 8013e6c:	061b      	lsls	r3, r3, #24
 8013e6e:	18cb      	adds	r3, r1, r3
 8013e70:	9018      	str	r0, [sp, #96]	; 0x60
 8013e72:	9319      	str	r3, [sp, #100]	; 0x64
 8013e74:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013e76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013e78:	9210      	str	r2, [sp, #64]	; 0x40
 8013e7a:	9311      	str	r3, [sp, #68]	; 0x44
 8013e7c:	22d6      	movs	r2, #214	; 0xd6
 8013e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013e80:	04d2      	lsls	r2, r2, #19
 8013e82:	189b      	adds	r3, r3, r2
 8013e84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013e86:	1a9b      	subs	r3, r3, r2
 8013e88:	9311      	str	r3, [sp, #68]	; 0x44
 8013e8a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013e8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013e8e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013e90:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013e92:	f003 f911 	bl	80170b8 <__ulp>
 8013e96:	0002      	movs	r2, r0
 8013e98:	000b      	movs	r3, r1
 8013e9a:	0030      	movs	r0, r6
 8013e9c:	0039      	movs	r1, r7
 8013e9e:	f7ed ffd3 	bl	8001e48 <__aeabi_dmul>
 8013ea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013ea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ea6:	f7ed f8a9 	bl	8000ffc <__aeabi_dadd>
 8013eaa:	0006      	movs	r6, r0
 8013eac:	000f      	movs	r7, r1
 8013eae:	e78c      	b.n	8013dca <_strtod_l+0xb1a>
 8013eb0:	0002      	movs	r2, r0
 8013eb2:	9b08      	ldr	r3, [sp, #32]
 8013eb4:	9218      	str	r2, [sp, #96]	; 0x60
 8013eb6:	9319      	str	r3, [sp, #100]	; 0x64
 8013eb8:	e7dc      	b.n	8013e74 <_strtod_l+0xbc4>
 8013eba:	4a0b      	ldr	r2, [pc, #44]	; (8013ee8 <_strtod_l+0xc38>)
 8013ebc:	4b0f      	ldr	r3, [pc, #60]	; (8013efc <_strtod_l+0xc4c>)
 8013ebe:	9808      	ldr	r0, [sp, #32]
 8013ec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013ec2:	f7ec fad1 	bl	8000468 <__aeabi_dcmplt>
 8013ec6:	e7ae      	b.n	8013e26 <_strtod_l+0xb76>
 8013ec8:	3ff00000 	.word	0x3ff00000
 8013ecc:	7ff00000 	.word	0x7ff00000
 8013ed0:	7fe00000 	.word	0x7fe00000
 8013ed4:	fcb00000 	.word	0xfcb00000
 8013ed8:	7c9fffff 	.word	0x7c9fffff
 8013edc:	7fefffff 	.word	0x7fefffff
 8013ee0:	3fe00000 	.word	0x3fe00000
 8013ee4:	bff00000 	.word	0xbff00000
 8013ee8:	94a03595 	.word	0x94a03595
 8013eec:	3fdfffff 	.word	0x3fdfffff
 8013ef0:	35afe535 	.word	0x35afe535
 8013ef4:	ffc00000 	.word	0xffc00000
 8013ef8:	41dfffff 	.word	0x41dfffff
 8013efc:	3fcfffff 	.word	0x3fcfffff

08013f00 <strtod>:
 8013f00:	4b06      	ldr	r3, [pc, #24]	; (8013f1c <strtod+0x1c>)
 8013f02:	b510      	push	{r4, lr}
 8013f04:	0004      	movs	r4, r0
 8013f06:	6818      	ldr	r0, [r3, #0]
 8013f08:	000a      	movs	r2, r1
 8013f0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d100      	bne.n	8013f12 <strtod+0x12>
 8013f10:	4b03      	ldr	r3, [pc, #12]	; (8013f20 <strtod+0x20>)
 8013f12:	0021      	movs	r1, r4
 8013f14:	f7ff f9cc 	bl	80132b0 <_strtod_l>
 8013f18:	bd10      	pop	{r4, pc}
 8013f1a:	46c0      	nop			; (mov r8, r8)
 8013f1c:	200000cc 	.word	0x200000cc
 8013f20:	200004f8 	.word	0x200004f8

08013f24 <strtok>:
 8013f24:	4b03      	ldr	r3, [pc, #12]	; (8013f34 <strtok+0x10>)
 8013f26:	b510      	push	{r4, lr}
 8013f28:	681a      	ldr	r2, [r3, #0]
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	325c      	adds	r2, #92	; 0x5c
 8013f2e:	f000 f803 	bl	8013f38 <__strtok_r>
 8013f32:	bd10      	pop	{r4, pc}
 8013f34:	200000cc 	.word	0x200000cc

08013f38 <__strtok_r>:
 8013f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f3a:	2800      	cmp	r0, #0
 8013f3c:	d104      	bne.n	8013f48 <__strtok_r+0x10>
 8013f3e:	6810      	ldr	r0, [r2, #0]
 8013f40:	2800      	cmp	r0, #0
 8013f42:	d101      	bne.n	8013f48 <__strtok_r+0x10>
 8013f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f46:	0020      	movs	r0, r4
 8013f48:	000e      	movs	r6, r1
 8013f4a:	7805      	ldrb	r5, [r0, #0]
 8013f4c:	1c44      	adds	r4, r0, #1
 8013f4e:	7837      	ldrb	r7, [r6, #0]
 8013f50:	2f00      	cmp	r7, #0
 8013f52:	d104      	bne.n	8013f5e <__strtok_r+0x26>
 8013f54:	2d00      	cmp	r5, #0
 8013f56:	d110      	bne.n	8013f7a <__strtok_r+0x42>
 8013f58:	6015      	str	r5, [r2, #0]
 8013f5a:	0028      	movs	r0, r5
 8013f5c:	e7f2      	b.n	8013f44 <__strtok_r+0xc>
 8013f5e:	3601      	adds	r6, #1
 8013f60:	42bd      	cmp	r5, r7
 8013f62:	d1f4      	bne.n	8013f4e <__strtok_r+0x16>
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d1ee      	bne.n	8013f46 <__strtok_r+0xe>
 8013f68:	6014      	str	r4, [r2, #0]
 8013f6a:	7003      	strb	r3, [r0, #0]
 8013f6c:	e7ea      	b.n	8013f44 <__strtok_r+0xc>
 8013f6e:	0033      	movs	r3, r6
 8013f70:	e00d      	b.n	8013f8e <__strtok_r+0x56>
 8013f72:	3501      	adds	r5, #1
 8013f74:	2f00      	cmp	r7, #0
 8013f76:	d103      	bne.n	8013f80 <__strtok_r+0x48>
 8013f78:	001c      	movs	r4, r3
 8013f7a:	000d      	movs	r5, r1
 8013f7c:	7826      	ldrb	r6, [r4, #0]
 8013f7e:	1c63      	adds	r3, r4, #1
 8013f80:	782f      	ldrb	r7, [r5, #0]
 8013f82:	42be      	cmp	r6, r7
 8013f84:	d1f5      	bne.n	8013f72 <__strtok_r+0x3a>
 8013f86:	2e00      	cmp	r6, #0
 8013f88:	d0f1      	beq.n	8013f6e <__strtok_r+0x36>
 8013f8a:	2100      	movs	r1, #0
 8013f8c:	7021      	strb	r1, [r4, #0]
 8013f8e:	6013      	str	r3, [r2, #0]
 8013f90:	e7d8      	b.n	8013f44 <__strtok_r+0xc>
	...

08013f94 <_strtol_l.isra.0>:
 8013f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f96:	001f      	movs	r7, r3
 8013f98:	000e      	movs	r6, r1
 8013f9a:	b087      	sub	sp, #28
 8013f9c:	9005      	str	r0, [sp, #20]
 8013f9e:	9101      	str	r1, [sp, #4]
 8013fa0:	9202      	str	r2, [sp, #8]
 8013fa2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013fa4:	7834      	ldrb	r4, [r6, #0]
 8013fa6:	f7fe fc9f 	bl	80128e8 <__locale_ctype_ptr_l>
 8013faa:	2208      	movs	r2, #8
 8013fac:	1900      	adds	r0, r0, r4
 8013fae:	7843      	ldrb	r3, [r0, #1]
 8013fb0:	1c75      	adds	r5, r6, #1
 8013fb2:	4013      	ands	r3, r2
 8013fb4:	d136      	bne.n	8014024 <_strtol_l.isra.0+0x90>
 8013fb6:	2c2d      	cmp	r4, #45	; 0x2d
 8013fb8:	d136      	bne.n	8014028 <_strtol_l.isra.0+0x94>
 8013fba:	1cb5      	adds	r5, r6, #2
 8013fbc:	7874      	ldrb	r4, [r6, #1]
 8013fbe:	2601      	movs	r6, #1
 8013fc0:	2f00      	cmp	r7, #0
 8013fc2:	d062      	beq.n	801408a <_strtol_l.isra.0+0xf6>
 8013fc4:	2f10      	cmp	r7, #16
 8013fc6:	d109      	bne.n	8013fdc <_strtol_l.isra.0+0x48>
 8013fc8:	2c30      	cmp	r4, #48	; 0x30
 8013fca:	d107      	bne.n	8013fdc <_strtol_l.isra.0+0x48>
 8013fcc:	2220      	movs	r2, #32
 8013fce:	782b      	ldrb	r3, [r5, #0]
 8013fd0:	4393      	bics	r3, r2
 8013fd2:	2b58      	cmp	r3, #88	; 0x58
 8013fd4:	d154      	bne.n	8014080 <_strtol_l.isra.0+0xec>
 8013fd6:	2710      	movs	r7, #16
 8013fd8:	786c      	ldrb	r4, [r5, #1]
 8013fda:	3502      	adds	r5, #2
 8013fdc:	4b2d      	ldr	r3, [pc, #180]	; (8014094 <_strtol_l.isra.0+0x100>)
 8013fde:	0039      	movs	r1, r7
 8013fe0:	18f3      	adds	r3, r6, r3
 8013fe2:	0018      	movs	r0, r3
 8013fe4:	9303      	str	r3, [sp, #12]
 8013fe6:	f7ec f939 	bl	800025c <__aeabi_uidivmod>
 8013fea:	9104      	str	r1, [sp, #16]
 8013fec:	2101      	movs	r1, #1
 8013fee:	2300      	movs	r3, #0
 8013ff0:	4249      	negs	r1, r1
 8013ff2:	0002      	movs	r2, r0
 8013ff4:	468c      	mov	ip, r1
 8013ff6:	0018      	movs	r0, r3
 8013ff8:	0021      	movs	r1, r4
 8013ffa:	3930      	subs	r1, #48	; 0x30
 8013ffc:	2909      	cmp	r1, #9
 8013ffe:	d81a      	bhi.n	8014036 <_strtol_l.isra.0+0xa2>
 8014000:	000c      	movs	r4, r1
 8014002:	42a7      	cmp	r7, r4
 8014004:	dd23      	ble.n	801404e <_strtol_l.isra.0+0xba>
 8014006:	1c59      	adds	r1, r3, #1
 8014008:	d009      	beq.n	801401e <_strtol_l.isra.0+0x8a>
 801400a:	4663      	mov	r3, ip
 801400c:	4282      	cmp	r2, r0
 801400e:	d306      	bcc.n	801401e <_strtol_l.isra.0+0x8a>
 8014010:	d102      	bne.n	8014018 <_strtol_l.isra.0+0x84>
 8014012:	9904      	ldr	r1, [sp, #16]
 8014014:	42a1      	cmp	r1, r4
 8014016:	db02      	blt.n	801401e <_strtol_l.isra.0+0x8a>
 8014018:	2301      	movs	r3, #1
 801401a:	4378      	muls	r0, r7
 801401c:	1820      	adds	r0, r4, r0
 801401e:	782c      	ldrb	r4, [r5, #0]
 8014020:	3501      	adds	r5, #1
 8014022:	e7e9      	b.n	8013ff8 <_strtol_l.isra.0+0x64>
 8014024:	002e      	movs	r6, r5
 8014026:	e7bc      	b.n	8013fa2 <_strtol_l.isra.0+0xe>
 8014028:	2c2b      	cmp	r4, #43	; 0x2b
 801402a:	d001      	beq.n	8014030 <_strtol_l.isra.0+0x9c>
 801402c:	001e      	movs	r6, r3
 801402e:	e7c7      	b.n	8013fc0 <_strtol_l.isra.0+0x2c>
 8014030:	1cb5      	adds	r5, r6, #2
 8014032:	7874      	ldrb	r4, [r6, #1]
 8014034:	e7fa      	b.n	801402c <_strtol_l.isra.0+0x98>
 8014036:	0021      	movs	r1, r4
 8014038:	3941      	subs	r1, #65	; 0x41
 801403a:	2919      	cmp	r1, #25
 801403c:	d801      	bhi.n	8014042 <_strtol_l.isra.0+0xae>
 801403e:	3c37      	subs	r4, #55	; 0x37
 8014040:	e7df      	b.n	8014002 <_strtol_l.isra.0+0x6e>
 8014042:	0021      	movs	r1, r4
 8014044:	3961      	subs	r1, #97	; 0x61
 8014046:	2919      	cmp	r1, #25
 8014048:	d801      	bhi.n	801404e <_strtol_l.isra.0+0xba>
 801404a:	3c57      	subs	r4, #87	; 0x57
 801404c:	e7d9      	b.n	8014002 <_strtol_l.isra.0+0x6e>
 801404e:	1c5a      	adds	r2, r3, #1
 8014050:	d108      	bne.n	8014064 <_strtol_l.isra.0+0xd0>
 8014052:	9a05      	ldr	r2, [sp, #20]
 8014054:	3323      	adds	r3, #35	; 0x23
 8014056:	6013      	str	r3, [r2, #0]
 8014058:	9b02      	ldr	r3, [sp, #8]
 801405a:	9803      	ldr	r0, [sp, #12]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d109      	bne.n	8014074 <_strtol_l.isra.0+0xe0>
 8014060:	b007      	add	sp, #28
 8014062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014064:	2e00      	cmp	r6, #0
 8014066:	d000      	beq.n	801406a <_strtol_l.isra.0+0xd6>
 8014068:	4240      	negs	r0, r0
 801406a:	9a02      	ldr	r2, [sp, #8]
 801406c:	2a00      	cmp	r2, #0
 801406e:	d0f7      	beq.n	8014060 <_strtol_l.isra.0+0xcc>
 8014070:	2b00      	cmp	r3, #0
 8014072:	d001      	beq.n	8014078 <_strtol_l.isra.0+0xe4>
 8014074:	1e6b      	subs	r3, r5, #1
 8014076:	9301      	str	r3, [sp, #4]
 8014078:	9b02      	ldr	r3, [sp, #8]
 801407a:	9a01      	ldr	r2, [sp, #4]
 801407c:	601a      	str	r2, [r3, #0]
 801407e:	e7ef      	b.n	8014060 <_strtol_l.isra.0+0xcc>
 8014080:	2430      	movs	r4, #48	; 0x30
 8014082:	2f00      	cmp	r7, #0
 8014084:	d1aa      	bne.n	8013fdc <_strtol_l.isra.0+0x48>
 8014086:	2708      	movs	r7, #8
 8014088:	e7a8      	b.n	8013fdc <_strtol_l.isra.0+0x48>
 801408a:	2c30      	cmp	r4, #48	; 0x30
 801408c:	d09e      	beq.n	8013fcc <_strtol_l.isra.0+0x38>
 801408e:	270a      	movs	r7, #10
 8014090:	e7a4      	b.n	8013fdc <_strtol_l.isra.0+0x48>
 8014092:	46c0      	nop			; (mov r8, r8)
 8014094:	7fffffff 	.word	0x7fffffff

08014098 <strtol>:
 8014098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801409a:	0013      	movs	r3, r2
 801409c:	4a06      	ldr	r2, [pc, #24]	; (80140b8 <strtol+0x20>)
 801409e:	0005      	movs	r5, r0
 80140a0:	6810      	ldr	r0, [r2, #0]
 80140a2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80140a4:	2c00      	cmp	r4, #0
 80140a6:	d100      	bne.n	80140aa <strtol+0x12>
 80140a8:	4c04      	ldr	r4, [pc, #16]	; (80140bc <strtol+0x24>)
 80140aa:	000a      	movs	r2, r1
 80140ac:	9400      	str	r4, [sp, #0]
 80140ae:	0029      	movs	r1, r5
 80140b0:	f7ff ff70 	bl	8013f94 <_strtol_l.isra.0>
 80140b4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80140b6:	46c0      	nop			; (mov r8, r8)
 80140b8:	200000cc 	.word	0x200000cc
 80140bc:	200004f8 	.word	0x200004f8

080140c0 <_svfprintf_r>:
 80140c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140c2:	b0d9      	sub	sp, #356	; 0x164
 80140c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80140c6:	9209      	str	r2, [sp, #36]	; 0x24
 80140c8:	001c      	movs	r4, r3
 80140ca:	900a      	str	r0, [sp, #40]	; 0x28
 80140cc:	f002 fd26 	bl	8016b1c <_localeconv_r>
 80140d0:	6803      	ldr	r3, [r0, #0]
 80140d2:	0018      	movs	r0, r3
 80140d4:	931c      	str	r3, [sp, #112]	; 0x70
 80140d6:	f7ec f81f 	bl	8000118 <strlen>
 80140da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140dc:	9014      	str	r0, [sp, #80]	; 0x50
 80140de:	899b      	ldrh	r3, [r3, #12]
 80140e0:	061b      	lsls	r3, r3, #24
 80140e2:	d518      	bpl.n	8014116 <_svfprintf_r+0x56>
 80140e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140e6:	691b      	ldr	r3, [r3, #16]
 80140e8:	9308      	str	r3, [sp, #32]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d113      	bne.n	8014116 <_svfprintf_r+0x56>
 80140ee:	2140      	movs	r1, #64	; 0x40
 80140f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80140f2:	f7fe fc1f 	bl	8012934 <_malloc_r>
 80140f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140f8:	6018      	str	r0, [r3, #0]
 80140fa:	6118      	str	r0, [r3, #16]
 80140fc:	2800      	cmp	r0, #0
 80140fe:	d107      	bne.n	8014110 <_svfprintf_r+0x50>
 8014100:	230c      	movs	r3, #12
 8014102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014104:	6013      	str	r3, [r2, #0]
 8014106:	3b0d      	subs	r3, #13
 8014108:	9315      	str	r3, [sp, #84]	; 0x54
 801410a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801410c:	b059      	add	sp, #356	; 0x164
 801410e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014110:	2340      	movs	r3, #64	; 0x40
 8014112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014114:	6153      	str	r3, [r2, #20]
 8014116:	2600      	movs	r6, #0
 8014118:	af2f      	add	r7, sp, #188	; 0xbc
 801411a:	972c      	str	r7, [sp, #176]	; 0xb0
 801411c:	962e      	str	r6, [sp, #184]	; 0xb8
 801411e:	962d      	str	r6, [sp, #180]	; 0xb4
 8014120:	960d      	str	r6, [sp, #52]	; 0x34
 8014122:	961a      	str	r6, [sp, #104]	; 0x68
 8014124:	9619      	str	r6, [sp, #100]	; 0x64
 8014126:	961e      	str	r6, [sp, #120]	; 0x78
 8014128:	961d      	str	r6, [sp, #116]	; 0x74
 801412a:	9613      	str	r6, [sp, #76]	; 0x4c
 801412c:	961b      	str	r6, [sp, #108]	; 0x6c
 801412e:	961f      	str	r6, [sp, #124]	; 0x7c
 8014130:	9615      	str	r6, [sp, #84]	; 0x54
 8014132:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014134:	782b      	ldrb	r3, [r5, #0]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d002      	beq.n	8014140 <_svfprintf_r+0x80>
 801413a:	2b25      	cmp	r3, #37	; 0x25
 801413c:	d000      	beq.n	8014140 <_svfprintf_r+0x80>
 801413e:	e095      	b.n	801426c <_svfprintf_r+0x1ac>
 8014140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014142:	1aee      	subs	r6, r5, r3
 8014144:	d017      	beq.n	8014176 <_svfprintf_r+0xb6>
 8014146:	603b      	str	r3, [r7, #0]
 8014148:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801414a:	607e      	str	r6, [r7, #4]
 801414c:	199b      	adds	r3, r3, r6
 801414e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014150:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014152:	3708      	adds	r7, #8
 8014154:	9308      	str	r3, [sp, #32]
 8014156:	3301      	adds	r3, #1
 8014158:	932d      	str	r3, [sp, #180]	; 0xb4
 801415a:	2b07      	cmp	r3, #7
 801415c:	dd08      	ble.n	8014170 <_svfprintf_r+0xb0>
 801415e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014160:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014162:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014164:	f003 f900 	bl	8017368 <__ssprint_r>
 8014168:	2800      	cmp	r0, #0
 801416a:	d000      	beq.n	801416e <_svfprintf_r+0xae>
 801416c:	e2d9      	b.n	8014722 <_svfprintf_r+0x662>
 801416e:	af2f      	add	r7, sp, #188	; 0xbc
 8014170:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014172:	199b      	adds	r3, r3, r6
 8014174:	9315      	str	r3, [sp, #84]	; 0x54
 8014176:	782b      	ldrb	r3, [r5, #0]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d101      	bne.n	8014180 <_svfprintf_r+0xc0>
 801417c:	f001 f9e5 	bl	801554a <_svfprintf_r+0x148a>
 8014180:	1c6b      	adds	r3, r5, #1
 8014182:	221b      	movs	r2, #27
 8014184:	9311      	str	r3, [sp, #68]	; 0x44
 8014186:	2300      	movs	r3, #0
 8014188:	a91e      	add	r1, sp, #120	; 0x78
 801418a:	1852      	adds	r2, r2, r1
 801418c:	7013      	strb	r3, [r2, #0]
 801418e:	2201      	movs	r2, #1
 8014190:	001e      	movs	r6, r3
 8014192:	2520      	movs	r5, #32
 8014194:	4252      	negs	r2, r2
 8014196:	9208      	str	r2, [sp, #32]
 8014198:	9316      	str	r3, [sp, #88]	; 0x58
 801419a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801419c:	781b      	ldrb	r3, [r3, #0]
 801419e:	930e      	str	r3, [sp, #56]	; 0x38
 80141a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80141a2:	3301      	adds	r3, #1
 80141a4:	9311      	str	r3, [sp, #68]	; 0x44
 80141a6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80141a8:	3820      	subs	r0, #32
 80141aa:	285a      	cmp	r0, #90	; 0x5a
 80141ac:	d901      	bls.n	80141b2 <_svfprintf_r+0xf2>
 80141ae:	f000 fe3d 	bl	8014e2c <_svfprintf_r+0xd6c>
 80141b2:	f7eb ffc3 	bl	800013c <__gnu_thumb1_case_shi>
 80141b6:	009e      	.short	0x009e
 80141b8:	063b063b 	.word	0x063b063b
 80141bc:	063b00a7 	.word	0x063b00a7
 80141c0:	063b063b 	.word	0x063b063b
 80141c4:	063b0080 	.word	0x063b0080
 80141c8:	00a9063b 	.word	0x00a9063b
 80141cc:	063b00b3 	.word	0x063b00b3
 80141d0:	00b900b1 	.word	0x00b900b1
 80141d4:	00dd063b 	.word	0x00dd063b
 80141d8:	00df00df 	.word	0x00df00df
 80141dc:	00df00df 	.word	0x00df00df
 80141e0:	00df00df 	.word	0x00df00df
 80141e4:	00df00df 	.word	0x00df00df
 80141e8:	063b00df 	.word	0x063b00df
 80141ec:	063b063b 	.word	0x063b063b
 80141f0:	063b063b 	.word	0x063b063b
 80141f4:	063b063b 	.word	0x063b063b
 80141f8:	063b0240 	.word	0x063b0240
 80141fc:	01fd010a 	.word	0x01fd010a
 8014200:	02400240 	.word	0x02400240
 8014204:	063b0240 	.word	0x063b0240
 8014208:	063b063b 	.word	0x063b063b
 801420c:	00f1063b 	.word	0x00f1063b
 8014210:	063b063b 	.word	0x063b063b
 8014214:	063b04e2 	.word	0x063b04e2
 8014218:	063b063b 	.word	0x063b063b
 801421c:	063b0537 	.word	0x063b0537
 8014220:	063b0557 	.word	0x063b0557
 8014224:	005d063b 	.word	0x005d063b
 8014228:	063b063b 	.word	0x063b063b
 801422c:	063b063b 	.word	0x063b063b
 8014230:	063b063b 	.word	0x063b063b
 8014234:	063b063b 	.word	0x063b063b
 8014238:	063b0240 	.word	0x063b0240
 801423c:	01ff010a 	.word	0x01ff010a
 8014240:	02400240 	.word	0x02400240
 8014244:	00f30240 	.word	0x00f30240
 8014248:	010601ff 	.word	0x010601ff
 801424c:	00ff063b 	.word	0x00ff063b
 8014250:	04c5063b 	.word	0x04c5063b
 8014254:	052704e4 	.word	0x052704e4
 8014258:	063b0106 	.word	0x063b0106
 801425c:	fff20537 	.word	0xfff20537
 8014260:	063b0559 	.word	0x063b0559
 8014264:	0582063b 	.word	0x0582063b
 8014268:	fff2063b 	.word	0xfff2063b
 801426c:	3501      	adds	r5, #1
 801426e:	e761      	b.n	8014134 <_svfprintf_r+0x74>
 8014270:	4bcb      	ldr	r3, [pc, #812]	; (80145a0 <_svfprintf_r+0x4e0>)
 8014272:	2220      	movs	r2, #32
 8014274:	931e      	str	r3, [sp, #120]	; 0x78
 8014276:	4032      	ands	r2, r6
 8014278:	d101      	bne.n	801427e <_svfprintf_r+0x1be>
 801427a:	f000 fd21 	bl	8014cc0 <_svfprintf_r+0xc00>
 801427e:	2307      	movs	r3, #7
 8014280:	3407      	adds	r4, #7
 8014282:	439c      	bics	r4, r3
 8014284:	0023      	movs	r3, r4
 8014286:	3308      	adds	r3, #8
 8014288:	9312      	str	r3, [sp, #72]	; 0x48
 801428a:	6823      	ldr	r3, [r4, #0]
 801428c:	6864      	ldr	r4, [r4, #4]
 801428e:	9306      	str	r3, [sp, #24]
 8014290:	9407      	str	r4, [sp, #28]
 8014292:	07f3      	lsls	r3, r6, #31
 8014294:	d50a      	bpl.n	80142ac <_svfprintf_r+0x1ec>
 8014296:	9b06      	ldr	r3, [sp, #24]
 8014298:	9a07      	ldr	r2, [sp, #28]
 801429a:	4313      	orrs	r3, r2
 801429c:	d006      	beq.n	80142ac <_svfprintf_r+0x1ec>
 801429e:	2230      	movs	r2, #48	; 0x30
 80142a0:	ab25      	add	r3, sp, #148	; 0x94
 80142a2:	701a      	strb	r2, [r3, #0]
 80142a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80142a6:	705a      	strb	r2, [r3, #1]
 80142a8:	2302      	movs	r3, #2
 80142aa:	431e      	orrs	r6, r3
 80142ac:	4bbd      	ldr	r3, [pc, #756]	; (80145a4 <_svfprintf_r+0x4e4>)
 80142ae:	401e      	ands	r6, r3
 80142b0:	2302      	movs	r3, #2
 80142b2:	f000 fc74 	bl	8014b9e <_svfprintf_r+0xade>
 80142b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80142b8:	f002 fc30 	bl	8016b1c <_localeconv_r>
 80142bc:	6843      	ldr	r3, [r0, #4]
 80142be:	0018      	movs	r0, r3
 80142c0:	931f      	str	r3, [sp, #124]	; 0x7c
 80142c2:	f7eb ff29 	bl	8000118 <strlen>
 80142c6:	901b      	str	r0, [sp, #108]	; 0x6c
 80142c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80142ca:	f002 fc27 	bl	8016b1c <_localeconv_r>
 80142ce:	6883      	ldr	r3, [r0, #8]
 80142d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80142d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d100      	bne.n	80142da <_svfprintf_r+0x21a>
 80142d8:	e75f      	b.n	801419a <_svfprintf_r+0xda>
 80142da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d100      	bne.n	80142e2 <_svfprintf_r+0x222>
 80142e0:	e75b      	b.n	801419a <_svfprintf_r+0xda>
 80142e2:	781b      	ldrb	r3, [r3, #0]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d100      	bne.n	80142ea <_svfprintf_r+0x22a>
 80142e8:	e757      	b.n	801419a <_svfprintf_r+0xda>
 80142ea:	2380      	movs	r3, #128	; 0x80
 80142ec:	00db      	lsls	r3, r3, #3
 80142ee:	431e      	orrs	r6, r3
 80142f0:	e753      	b.n	801419a <_svfprintf_r+0xda>
 80142f2:	231b      	movs	r3, #27
 80142f4:	aa1e      	add	r2, sp, #120	; 0x78
 80142f6:	189b      	adds	r3, r3, r2
 80142f8:	781a      	ldrb	r2, [r3, #0]
 80142fa:	2a00      	cmp	r2, #0
 80142fc:	d000      	beq.n	8014300 <_svfprintf_r+0x240>
 80142fe:	e74c      	b.n	801419a <_svfprintf_r+0xda>
 8014300:	701d      	strb	r5, [r3, #0]
 8014302:	e74a      	b.n	801419a <_svfprintf_r+0xda>
 8014304:	2301      	movs	r3, #1
 8014306:	e7f2      	b.n	80142ee <_svfprintf_r+0x22e>
 8014308:	6823      	ldr	r3, [r4, #0]
 801430a:	3404      	adds	r4, #4
 801430c:	9316      	str	r3, [sp, #88]	; 0x58
 801430e:	2b00      	cmp	r3, #0
 8014310:	db00      	blt.n	8014314 <_svfprintf_r+0x254>
 8014312:	e742      	b.n	801419a <_svfprintf_r+0xda>
 8014314:	425b      	negs	r3, r3
 8014316:	9316      	str	r3, [sp, #88]	; 0x58
 8014318:	2304      	movs	r3, #4
 801431a:	e7e8      	b.n	80142ee <_svfprintf_r+0x22e>
 801431c:	231b      	movs	r3, #27
 801431e:	aa1e      	add	r2, sp, #120	; 0x78
 8014320:	189b      	adds	r3, r3, r2
 8014322:	222b      	movs	r2, #43	; 0x2b
 8014324:	701a      	strb	r2, [r3, #0]
 8014326:	e738      	b.n	801419a <_svfprintf_r+0xda>
 8014328:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801432a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801432c:	7812      	ldrb	r2, [r2, #0]
 801432e:	3301      	adds	r3, #1
 8014330:	920e      	str	r2, [sp, #56]	; 0x38
 8014332:	2a2a      	cmp	r2, #42	; 0x2a
 8014334:	d008      	beq.n	8014348 <_svfprintf_r+0x288>
 8014336:	2200      	movs	r2, #0
 8014338:	9208      	str	r2, [sp, #32]
 801433a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801433c:	001a      	movs	r2, r3
 801433e:	3930      	subs	r1, #48	; 0x30
 8014340:	2909      	cmp	r1, #9
 8014342:	d90c      	bls.n	801435e <_svfprintf_r+0x29e>
 8014344:	9211      	str	r2, [sp, #68]	; 0x44
 8014346:	e72e      	b.n	80141a6 <_svfprintf_r+0xe6>
 8014348:	6821      	ldr	r1, [r4, #0]
 801434a:	1d22      	adds	r2, r4, #4
 801434c:	9108      	str	r1, [sp, #32]
 801434e:	2900      	cmp	r1, #0
 8014350:	da02      	bge.n	8014358 <_svfprintf_r+0x298>
 8014352:	2101      	movs	r1, #1
 8014354:	4249      	negs	r1, r1
 8014356:	9108      	str	r1, [sp, #32]
 8014358:	0014      	movs	r4, r2
 801435a:	9311      	str	r3, [sp, #68]	; 0x44
 801435c:	e71d      	b.n	801419a <_svfprintf_r+0xda>
 801435e:	200a      	movs	r0, #10
 8014360:	9a08      	ldr	r2, [sp, #32]
 8014362:	4342      	muls	r2, r0
 8014364:	1852      	adds	r2, r2, r1
 8014366:	9208      	str	r2, [sp, #32]
 8014368:	781a      	ldrb	r2, [r3, #0]
 801436a:	3301      	adds	r3, #1
 801436c:	920e      	str	r2, [sp, #56]	; 0x38
 801436e:	e7e4      	b.n	801433a <_svfprintf_r+0x27a>
 8014370:	2380      	movs	r3, #128	; 0x80
 8014372:	e7bc      	b.n	80142ee <_svfprintf_r+0x22e>
 8014374:	2300      	movs	r3, #0
 8014376:	9316      	str	r3, [sp, #88]	; 0x58
 8014378:	220a      	movs	r2, #10
 801437a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801437c:	4353      	muls	r3, r2
 801437e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014380:	3a30      	subs	r2, #48	; 0x30
 8014382:	18d3      	adds	r3, r2, r3
 8014384:	9316      	str	r3, [sp, #88]	; 0x58
 8014386:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014388:	1c5a      	adds	r2, r3, #1
 801438a:	781b      	ldrb	r3, [r3, #0]
 801438c:	9211      	str	r2, [sp, #68]	; 0x44
 801438e:	930e      	str	r3, [sp, #56]	; 0x38
 8014390:	3b30      	subs	r3, #48	; 0x30
 8014392:	2b09      	cmp	r3, #9
 8014394:	d9f0      	bls.n	8014378 <_svfprintf_r+0x2b8>
 8014396:	e7d5      	b.n	8014344 <_svfprintf_r+0x284>
 8014398:	2308      	movs	r3, #8
 801439a:	e7a8      	b.n	80142ee <_svfprintf_r+0x22e>
 801439c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	2b68      	cmp	r3, #104	; 0x68
 80143a2:	d105      	bne.n	80143b0 <_svfprintf_r+0x2f0>
 80143a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80143a6:	3301      	adds	r3, #1
 80143a8:	9311      	str	r3, [sp, #68]	; 0x44
 80143aa:	2380      	movs	r3, #128	; 0x80
 80143ac:	009b      	lsls	r3, r3, #2
 80143ae:	e79e      	b.n	80142ee <_svfprintf_r+0x22e>
 80143b0:	2340      	movs	r3, #64	; 0x40
 80143b2:	e79c      	b.n	80142ee <_svfprintf_r+0x22e>
 80143b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80143b6:	781b      	ldrb	r3, [r3, #0]
 80143b8:	2b6c      	cmp	r3, #108	; 0x6c
 80143ba:	d104      	bne.n	80143c6 <_svfprintf_r+0x306>
 80143bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80143be:	3301      	adds	r3, #1
 80143c0:	9311      	str	r3, [sp, #68]	; 0x44
 80143c2:	432e      	orrs	r6, r5
 80143c4:	e6e9      	b.n	801419a <_svfprintf_r+0xda>
 80143c6:	2310      	movs	r3, #16
 80143c8:	e791      	b.n	80142ee <_svfprintf_r+0x22e>
 80143ca:	1d23      	adds	r3, r4, #4
 80143cc:	6822      	ldr	r2, [r4, #0]
 80143ce:	9312      	str	r3, [sp, #72]	; 0x48
 80143d0:	ab3f      	add	r3, sp, #252	; 0xfc
 80143d2:	701a      	strb	r2, [r3, #0]
 80143d4:	221b      	movs	r2, #27
 80143d6:	2000      	movs	r0, #0
 80143d8:	a91e      	add	r1, sp, #120	; 0x78
 80143da:	1852      	adds	r2, r2, r1
 80143dc:	7010      	strb	r0, [r2, #0]
 80143de:	2201      	movs	r2, #1
 80143e0:	0005      	movs	r5, r0
 80143e2:	900c      	str	r0, [sp, #48]	; 0x30
 80143e4:	9208      	str	r2, [sp, #32]
 80143e6:	9017      	str	r0, [sp, #92]	; 0x5c
 80143e8:	9010      	str	r0, [sp, #64]	; 0x40
 80143ea:	900f      	str	r0, [sp, #60]	; 0x3c
 80143ec:	9309      	str	r3, [sp, #36]	; 0x24
 80143ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80143f0:	9a08      	ldr	r2, [sp, #32]
 80143f2:	9318      	str	r3, [sp, #96]	; 0x60
 80143f4:	4293      	cmp	r3, r2
 80143f6:	da00      	bge.n	80143fa <_svfprintf_r+0x33a>
 80143f8:	9218      	str	r2, [sp, #96]	; 0x60
 80143fa:	231b      	movs	r3, #27
 80143fc:	aa1e      	add	r2, sp, #120	; 0x78
 80143fe:	189b      	adds	r3, r3, r2
 8014400:	781b      	ldrb	r3, [r3, #0]
 8014402:	1e5a      	subs	r2, r3, #1
 8014404:	4193      	sbcs	r3, r2
 8014406:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014408:	18d3      	adds	r3, r2, r3
 801440a:	9318      	str	r3, [sp, #96]	; 0x60
 801440c:	2302      	movs	r3, #2
 801440e:	4033      	ands	r3, r6
 8014410:	9320      	str	r3, [sp, #128]	; 0x80
 8014412:	d002      	beq.n	801441a <_svfprintf_r+0x35a>
 8014414:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014416:	3302      	adds	r3, #2
 8014418:	9318      	str	r3, [sp, #96]	; 0x60
 801441a:	2384      	movs	r3, #132	; 0x84
 801441c:	4033      	ands	r3, r6
 801441e:	9321      	str	r3, [sp, #132]	; 0x84
 8014420:	d121      	bne.n	8014466 <_svfprintf_r+0x3a6>
 8014422:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014424:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014426:	1a9c      	subs	r4, r3, r2
 8014428:	2c00      	cmp	r4, #0
 801442a:	dd1c      	ble.n	8014466 <_svfprintf_r+0x3a6>
 801442c:	0039      	movs	r1, r7
 801442e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014430:	485d      	ldr	r0, [pc, #372]	; (80145a8 <_svfprintf_r+0x4e8>)
 8014432:	9322      	str	r3, [sp, #136]	; 0x88
 8014434:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014436:	3301      	adds	r3, #1
 8014438:	3108      	adds	r1, #8
 801443a:	6038      	str	r0, [r7, #0]
 801443c:	2c10      	cmp	r4, #16
 801443e:	dd01      	ble.n	8014444 <_svfprintf_r+0x384>
 8014440:	f000 fd08 	bl	8014e54 <_svfprintf_r+0xd94>
 8014444:	607c      	str	r4, [r7, #4]
 8014446:	18a4      	adds	r4, r4, r2
 8014448:	942e      	str	r4, [sp, #184]	; 0xb8
 801444a:	932d      	str	r3, [sp, #180]	; 0xb4
 801444c:	000f      	movs	r7, r1
 801444e:	2b07      	cmp	r3, #7
 8014450:	dd09      	ble.n	8014466 <_svfprintf_r+0x3a6>
 8014452:	aa2c      	add	r2, sp, #176	; 0xb0
 8014454:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014456:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014458:	f002 ff86 	bl	8017368 <__ssprint_r>
 801445c:	2800      	cmp	r0, #0
 801445e:	d001      	beq.n	8014464 <_svfprintf_r+0x3a4>
 8014460:	f001 f852 	bl	8015508 <_svfprintf_r+0x1448>
 8014464:	af2f      	add	r7, sp, #188	; 0xbc
 8014466:	231b      	movs	r3, #27
 8014468:	aa1e      	add	r2, sp, #120	; 0x78
 801446a:	189b      	adds	r3, r3, r2
 801446c:	781a      	ldrb	r2, [r3, #0]
 801446e:	2a00      	cmp	r2, #0
 8014470:	d017      	beq.n	80144a2 <_svfprintf_r+0x3e2>
 8014472:	603b      	str	r3, [r7, #0]
 8014474:	2301      	movs	r3, #1
 8014476:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014478:	607b      	str	r3, [r7, #4]
 801447a:	0013      	movs	r3, r2
 801447c:	3301      	adds	r3, #1
 801447e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014480:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014482:	3708      	adds	r7, #8
 8014484:	9322      	str	r3, [sp, #136]	; 0x88
 8014486:	3301      	adds	r3, #1
 8014488:	932d      	str	r3, [sp, #180]	; 0xb4
 801448a:	2b07      	cmp	r3, #7
 801448c:	dd09      	ble.n	80144a2 <_svfprintf_r+0x3e2>
 801448e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014490:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014492:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014494:	f002 ff68 	bl	8017368 <__ssprint_r>
 8014498:	2800      	cmp	r0, #0
 801449a:	d001      	beq.n	80144a0 <_svfprintf_r+0x3e0>
 801449c:	f001 f834 	bl	8015508 <_svfprintf_r+0x1448>
 80144a0:	af2f      	add	r7, sp, #188	; 0xbc
 80144a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d019      	beq.n	80144dc <_svfprintf_r+0x41c>
 80144a8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80144aa:	9320      	str	r3, [sp, #128]	; 0x80
 80144ac:	ab25      	add	r3, sp, #148	; 0x94
 80144ae:	603b      	str	r3, [r7, #0]
 80144b0:	2302      	movs	r3, #2
 80144b2:	607b      	str	r3, [r7, #4]
 80144b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80144b6:	3708      	adds	r7, #8
 80144b8:	3302      	adds	r3, #2
 80144ba:	932e      	str	r3, [sp, #184]	; 0xb8
 80144bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80144be:	9320      	str	r3, [sp, #128]	; 0x80
 80144c0:	3301      	adds	r3, #1
 80144c2:	932d      	str	r3, [sp, #180]	; 0xb4
 80144c4:	2b07      	cmp	r3, #7
 80144c6:	dd09      	ble.n	80144dc <_svfprintf_r+0x41c>
 80144c8:	aa2c      	add	r2, sp, #176	; 0xb0
 80144ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80144cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144ce:	f002 ff4b 	bl	8017368 <__ssprint_r>
 80144d2:	2800      	cmp	r0, #0
 80144d4:	d001      	beq.n	80144da <_svfprintf_r+0x41a>
 80144d6:	f001 f817 	bl	8015508 <_svfprintf_r+0x1448>
 80144da:	af2f      	add	r7, sp, #188	; 0xbc
 80144dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144de:	2b80      	cmp	r3, #128	; 0x80
 80144e0:	d121      	bne.n	8014526 <_svfprintf_r+0x466>
 80144e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80144e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80144e6:	1a9c      	subs	r4, r3, r2
 80144e8:	2c00      	cmp	r4, #0
 80144ea:	dd1c      	ble.n	8014526 <_svfprintf_r+0x466>
 80144ec:	0039      	movs	r1, r7
 80144ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80144f0:	482e      	ldr	r0, [pc, #184]	; (80145ac <_svfprintf_r+0x4ec>)
 80144f2:	9320      	str	r3, [sp, #128]	; 0x80
 80144f4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80144f6:	3301      	adds	r3, #1
 80144f8:	3108      	adds	r1, #8
 80144fa:	6038      	str	r0, [r7, #0]
 80144fc:	2c10      	cmp	r4, #16
 80144fe:	dd01      	ble.n	8014504 <_svfprintf_r+0x444>
 8014500:	f000 fcbc 	bl	8014e7c <_svfprintf_r+0xdbc>
 8014504:	607c      	str	r4, [r7, #4]
 8014506:	18a4      	adds	r4, r4, r2
 8014508:	942e      	str	r4, [sp, #184]	; 0xb8
 801450a:	932d      	str	r3, [sp, #180]	; 0xb4
 801450c:	000f      	movs	r7, r1
 801450e:	2b07      	cmp	r3, #7
 8014510:	dd09      	ble.n	8014526 <_svfprintf_r+0x466>
 8014512:	aa2c      	add	r2, sp, #176	; 0xb0
 8014514:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014516:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014518:	f002 ff26 	bl	8017368 <__ssprint_r>
 801451c:	2800      	cmp	r0, #0
 801451e:	d001      	beq.n	8014524 <_svfprintf_r+0x464>
 8014520:	f000 fff2 	bl	8015508 <_svfprintf_r+0x1448>
 8014524:	af2f      	add	r7, sp, #188	; 0xbc
 8014526:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014528:	9a08      	ldr	r2, [sp, #32]
 801452a:	1a9c      	subs	r4, r3, r2
 801452c:	2c00      	cmp	r4, #0
 801452e:	dd1c      	ble.n	801456a <_svfprintf_r+0x4aa>
 8014530:	0039      	movs	r1, r7
 8014532:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014534:	481d      	ldr	r0, [pc, #116]	; (80145ac <_svfprintf_r+0x4ec>)
 8014536:	9317      	str	r3, [sp, #92]	; 0x5c
 8014538:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801453a:	3301      	adds	r3, #1
 801453c:	3108      	adds	r1, #8
 801453e:	6038      	str	r0, [r7, #0]
 8014540:	2c10      	cmp	r4, #16
 8014542:	dd01      	ble.n	8014548 <_svfprintf_r+0x488>
 8014544:	f000 fcb4 	bl	8014eb0 <_svfprintf_r+0xdf0>
 8014548:	18a2      	adds	r2, r4, r2
 801454a:	607c      	str	r4, [r7, #4]
 801454c:	922e      	str	r2, [sp, #184]	; 0xb8
 801454e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014550:	000f      	movs	r7, r1
 8014552:	2b07      	cmp	r3, #7
 8014554:	dd09      	ble.n	801456a <_svfprintf_r+0x4aa>
 8014556:	aa2c      	add	r2, sp, #176	; 0xb0
 8014558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801455a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801455c:	f002 ff04 	bl	8017368 <__ssprint_r>
 8014560:	2800      	cmp	r0, #0
 8014562:	d001      	beq.n	8014568 <_svfprintf_r+0x4a8>
 8014564:	f000 ffd0 	bl	8015508 <_svfprintf_r+0x1448>
 8014568:	af2f      	add	r7, sp, #188	; 0xbc
 801456a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801456c:	9317      	str	r3, [sp, #92]	; 0x5c
 801456e:	05f3      	lsls	r3, r6, #23
 8014570:	d501      	bpl.n	8014576 <_svfprintf_r+0x4b6>
 8014572:	f000 fcb1 	bl	8014ed8 <_svfprintf_r+0xe18>
 8014576:	9a08      	ldr	r2, [sp, #32]
 8014578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801457a:	4694      	mov	ip, r2
 801457c:	603b      	str	r3, [r7, #0]
 801457e:	9b08      	ldr	r3, [sp, #32]
 8014580:	607b      	str	r3, [r7, #4]
 8014582:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014584:	4463      	add	r3, ip
 8014586:	932e      	str	r3, [sp, #184]	; 0xb8
 8014588:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801458a:	9308      	str	r3, [sp, #32]
 801458c:	3301      	adds	r3, #1
 801458e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014590:	2b07      	cmp	r3, #7
 8014592:	dd01      	ble.n	8014598 <_svfprintf_r+0x4d8>
 8014594:	f000 fd94 	bl	80150c0 <_svfprintf_r+0x1000>
 8014598:	3708      	adds	r7, #8
 801459a:	f000 fce4 	bl	8014f66 <_svfprintf_r+0xea6>
 801459e:	46c0      	nop			; (mov r8, r8)
 80145a0:	0801a5b9 	.word	0x0801a5b9
 80145a4:	fffffbff 	.word	0xfffffbff
 80145a8:	0801a5cc 	.word	0x0801a5cc
 80145ac:	0801a5dc 	.word	0x0801a5dc
 80145b0:	2310      	movs	r3, #16
 80145b2:	431e      	orrs	r6, r3
 80145b4:	06b3      	lsls	r3, r6, #26
 80145b6:	d52c      	bpl.n	8014612 <_svfprintf_r+0x552>
 80145b8:	2307      	movs	r3, #7
 80145ba:	3407      	adds	r4, #7
 80145bc:	439c      	bics	r4, r3
 80145be:	0023      	movs	r3, r4
 80145c0:	3308      	adds	r3, #8
 80145c2:	9312      	str	r3, [sp, #72]	; 0x48
 80145c4:	6823      	ldr	r3, [r4, #0]
 80145c6:	6864      	ldr	r4, [r4, #4]
 80145c8:	9306      	str	r3, [sp, #24]
 80145ca:	9407      	str	r4, [sp, #28]
 80145cc:	9b07      	ldr	r3, [sp, #28]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	da0b      	bge.n	80145ea <_svfprintf_r+0x52a>
 80145d2:	9906      	ldr	r1, [sp, #24]
 80145d4:	9a07      	ldr	r2, [sp, #28]
 80145d6:	2400      	movs	r4, #0
 80145d8:	424b      	negs	r3, r1
 80145da:	4194      	sbcs	r4, r2
 80145dc:	9306      	str	r3, [sp, #24]
 80145de:	9407      	str	r4, [sp, #28]
 80145e0:	231b      	movs	r3, #27
 80145e2:	aa1e      	add	r2, sp, #120	; 0x78
 80145e4:	189b      	adds	r3, r3, r2
 80145e6:	222d      	movs	r2, #45	; 0x2d
 80145e8:	701a      	strb	r2, [r3, #0]
 80145ea:	9b08      	ldr	r3, [sp, #32]
 80145ec:	3301      	adds	r3, #1
 80145ee:	d000      	beq.n	80145f2 <_svfprintf_r+0x532>
 80145f0:	e382      	b.n	8014cf8 <_svfprintf_r+0xc38>
 80145f2:	9b07      	ldr	r3, [sp, #28]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d000      	beq.n	80145fa <_svfprintf_r+0x53a>
 80145f8:	e3b0      	b.n	8014d5c <_svfprintf_r+0xc9c>
 80145fa:	9b06      	ldr	r3, [sp, #24]
 80145fc:	2b09      	cmp	r3, #9
 80145fe:	d900      	bls.n	8014602 <_svfprintf_r+0x542>
 8014600:	e3ac      	b.n	8014d5c <_svfprintf_r+0xc9c>
 8014602:	23e7      	movs	r3, #231	; 0xe7
 8014604:	aa1e      	add	r2, sp, #120	; 0x78
 8014606:	189b      	adds	r3, r3, r2
 8014608:	9a06      	ldr	r2, [sp, #24]
 801460a:	3230      	adds	r2, #48	; 0x30
 801460c:	701a      	strb	r2, [r3, #0]
 801460e:	9309      	str	r3, [sp, #36]	; 0x24
 8014610:	e395      	b.n	8014d3e <_svfprintf_r+0xc7e>
 8014612:	1d23      	adds	r3, r4, #4
 8014614:	9312      	str	r3, [sp, #72]	; 0x48
 8014616:	06f3      	lsls	r3, r6, #27
 8014618:	d504      	bpl.n	8014624 <_svfprintf_r+0x564>
 801461a:	6823      	ldr	r3, [r4, #0]
 801461c:	9306      	str	r3, [sp, #24]
 801461e:	17db      	asrs	r3, r3, #31
 8014620:	9307      	str	r3, [sp, #28]
 8014622:	e7d3      	b.n	80145cc <_svfprintf_r+0x50c>
 8014624:	6823      	ldr	r3, [r4, #0]
 8014626:	0672      	lsls	r2, r6, #25
 8014628:	d501      	bpl.n	801462e <_svfprintf_r+0x56e>
 801462a:	b21b      	sxth	r3, r3
 801462c:	e7f6      	b.n	801461c <_svfprintf_r+0x55c>
 801462e:	05b2      	lsls	r2, r6, #22
 8014630:	d5f4      	bpl.n	801461c <_svfprintf_r+0x55c>
 8014632:	b25b      	sxtb	r3, r3
 8014634:	e7f2      	b.n	801461c <_svfprintf_r+0x55c>
 8014636:	2307      	movs	r3, #7
 8014638:	3407      	adds	r4, #7
 801463a:	439c      	bics	r4, r3
 801463c:	0023      	movs	r3, r4
 801463e:	2201      	movs	r2, #1
 8014640:	3308      	adds	r3, #8
 8014642:	9312      	str	r3, [sp, #72]	; 0x48
 8014644:	6823      	ldr	r3, [r4, #0]
 8014646:	4252      	negs	r2, r2
 8014648:	931a      	str	r3, [sp, #104]	; 0x68
 801464a:	6863      	ldr	r3, [r4, #4]
 801464c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801464e:	005c      	lsls	r4, r3, #1
 8014650:	0864      	lsrs	r4, r4, #1
 8014652:	9319      	str	r3, [sp, #100]	; 0x64
 8014654:	0028      	movs	r0, r5
 8014656:	4bcf      	ldr	r3, [pc, #828]	; (8014994 <_svfprintf_r+0x8d4>)
 8014658:	0021      	movs	r1, r4
 801465a:	f7ee f9af 	bl	80029bc <__aeabi_dcmpun>
 801465e:	2800      	cmp	r0, #0
 8014660:	d125      	bne.n	80146ae <_svfprintf_r+0x5ee>
 8014662:	2201      	movs	r2, #1
 8014664:	4bcb      	ldr	r3, [pc, #812]	; (8014994 <_svfprintf_r+0x8d4>)
 8014666:	4252      	negs	r2, r2
 8014668:	0028      	movs	r0, r5
 801466a:	0021      	movs	r1, r4
 801466c:	f7eb ff06 	bl	800047c <__aeabi_dcmple>
 8014670:	2800      	cmp	r0, #0
 8014672:	d11c      	bne.n	80146ae <_svfprintf_r+0x5ee>
 8014674:	2200      	movs	r2, #0
 8014676:	2300      	movs	r3, #0
 8014678:	981a      	ldr	r0, [sp, #104]	; 0x68
 801467a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801467c:	f7eb fef4 	bl	8000468 <__aeabi_dcmplt>
 8014680:	2800      	cmp	r0, #0
 8014682:	d004      	beq.n	801468e <_svfprintf_r+0x5ce>
 8014684:	231b      	movs	r3, #27
 8014686:	aa1e      	add	r2, sp, #120	; 0x78
 8014688:	189b      	adds	r3, r3, r2
 801468a:	222d      	movs	r2, #45	; 0x2d
 801468c:	701a      	strb	r2, [r3, #0]
 801468e:	4bc2      	ldr	r3, [pc, #776]	; (8014998 <_svfprintf_r+0x8d8>)
 8014690:	9309      	str	r3, [sp, #36]	; 0x24
 8014692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014694:	2b47      	cmp	r3, #71	; 0x47
 8014696:	dc01      	bgt.n	801469c <_svfprintf_r+0x5dc>
 8014698:	4bc0      	ldr	r3, [pc, #768]	; (801499c <_svfprintf_r+0x8dc>)
 801469a:	9309      	str	r3, [sp, #36]	; 0x24
 801469c:	2380      	movs	r3, #128	; 0x80
 801469e:	439e      	bics	r6, r3
 80146a0:	2300      	movs	r3, #0
 80146a2:	930c      	str	r3, [sp, #48]	; 0x30
 80146a4:	3303      	adds	r3, #3
 80146a6:	9308      	str	r3, [sp, #32]
 80146a8:	2300      	movs	r3, #0
 80146aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80146ac:	e34f      	b.n	8014d4e <_svfprintf_r+0xc8e>
 80146ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80146b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80146b2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80146b4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80146b6:	f7ee f981 	bl	80029bc <__aeabi_dcmpun>
 80146ba:	2800      	cmp	r0, #0
 80146bc:	d00e      	beq.n	80146dc <_svfprintf_r+0x61c>
 80146be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	da04      	bge.n	80146ce <_svfprintf_r+0x60e>
 80146c4:	231b      	movs	r3, #27
 80146c6:	aa1e      	add	r2, sp, #120	; 0x78
 80146c8:	189b      	adds	r3, r3, r2
 80146ca:	222d      	movs	r2, #45	; 0x2d
 80146cc:	701a      	strb	r2, [r3, #0]
 80146ce:	4bb4      	ldr	r3, [pc, #720]	; (80149a0 <_svfprintf_r+0x8e0>)
 80146d0:	9309      	str	r3, [sp, #36]	; 0x24
 80146d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146d4:	2b47      	cmp	r3, #71	; 0x47
 80146d6:	dce1      	bgt.n	801469c <_svfprintf_r+0x5dc>
 80146d8:	4bb2      	ldr	r3, [pc, #712]	; (80149a4 <_svfprintf_r+0x8e4>)
 80146da:	e7de      	b.n	801469a <_svfprintf_r+0x5da>
 80146dc:	2320      	movs	r3, #32
 80146de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80146e0:	439a      	bics	r2, r3
 80146e2:	920f      	str	r2, [sp, #60]	; 0x3c
 80146e4:	2a41      	cmp	r2, #65	; 0x41
 80146e6:	d124      	bne.n	8014732 <_svfprintf_r+0x672>
 80146e8:	2230      	movs	r2, #48	; 0x30
 80146ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 80146ec:	ab25      	add	r3, sp, #148	; 0x94
 80146ee:	701a      	strb	r2, [r3, #0]
 80146f0:	3228      	adds	r2, #40	; 0x28
 80146f2:	2961      	cmp	r1, #97	; 0x61
 80146f4:	d100      	bne.n	80146f8 <_svfprintf_r+0x638>
 80146f6:	3220      	adds	r2, #32
 80146f8:	705a      	strb	r2, [r3, #1]
 80146fa:	2302      	movs	r3, #2
 80146fc:	431e      	orrs	r6, r3
 80146fe:	9b08      	ldr	r3, [sp, #32]
 8014700:	2b63      	cmp	r3, #99	; 0x63
 8014702:	dc00      	bgt.n	8014706 <_svfprintf_r+0x646>
 8014704:	e09e      	b.n	8014844 <_svfprintf_r+0x784>
 8014706:	1c59      	adds	r1, r3, #1
 8014708:	980a      	ldr	r0, [sp, #40]	; 0x28
 801470a:	f7fe f913 	bl	8012934 <_malloc_r>
 801470e:	9009      	str	r0, [sp, #36]	; 0x24
 8014710:	2800      	cmp	r0, #0
 8014712:	d000      	beq.n	8014716 <_svfprintf_r+0x656>
 8014714:	e09b      	b.n	801484e <_svfprintf_r+0x78e>
 8014716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014718:	899a      	ldrh	r2, [r3, #12]
 801471a:	2340      	movs	r3, #64	; 0x40
 801471c:	4313      	orrs	r3, r2
 801471e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014720:	8193      	strh	r3, [r2, #12]
 8014722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014724:	899b      	ldrh	r3, [r3, #12]
 8014726:	065b      	lsls	r3, r3, #25
 8014728:	d400      	bmi.n	801472c <_svfprintf_r+0x66c>
 801472a:	e4ee      	b.n	801410a <_svfprintf_r+0x4a>
 801472c:	2301      	movs	r3, #1
 801472e:	425b      	negs	r3, r3
 8014730:	e4ea      	b.n	8014108 <_svfprintf_r+0x48>
 8014732:	9b08      	ldr	r3, [sp, #32]
 8014734:	900c      	str	r0, [sp, #48]	; 0x30
 8014736:	3301      	adds	r3, #1
 8014738:	d100      	bne.n	801473c <_svfprintf_r+0x67c>
 801473a:	e08b      	b.n	8014854 <_svfprintf_r+0x794>
 801473c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801473e:	2b47      	cmp	r3, #71	; 0x47
 8014740:	d103      	bne.n	801474a <_svfprintf_r+0x68a>
 8014742:	9b08      	ldr	r3, [sp, #32]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d100      	bne.n	801474a <_svfprintf_r+0x68a>
 8014748:	e087      	b.n	801485a <_svfprintf_r+0x79a>
 801474a:	2380      	movs	r3, #128	; 0x80
 801474c:	005b      	lsls	r3, r3, #1
 801474e:	4333      	orrs	r3, r6
 8014750:	9320      	str	r3, [sp, #128]	; 0x80
 8014752:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014754:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8014756:	2b00      	cmp	r3, #0
 8014758:	db00      	blt.n	801475c <_svfprintf_r+0x69c>
 801475a:	e082      	b.n	8014862 <_svfprintf_r+0x7a2>
 801475c:	2280      	movs	r2, #128	; 0x80
 801475e:	0612      	lsls	r2, r2, #24
 8014760:	4694      	mov	ip, r2
 8014762:	4463      	add	r3, ip
 8014764:	930d      	str	r3, [sp, #52]	; 0x34
 8014766:	232d      	movs	r3, #45	; 0x2d
 8014768:	9322      	str	r3, [sp, #136]	; 0x88
 801476a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801476c:	2b41      	cmp	r3, #65	; 0x41
 801476e:	d000      	beq.n	8014772 <_svfprintf_r+0x6b2>
 8014770:	e105      	b.n	801497e <_svfprintf_r+0x8be>
 8014772:	aa26      	add	r2, sp, #152	; 0x98
 8014774:	0020      	movs	r0, r4
 8014776:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014778:	f002 fdc4 	bl	8017304 <frexp>
 801477c:	23ff      	movs	r3, #255	; 0xff
 801477e:	2200      	movs	r2, #0
 8014780:	059b      	lsls	r3, r3, #22
 8014782:	f7ed fb61 	bl	8001e48 <__aeabi_dmul>
 8014786:	2200      	movs	r2, #0
 8014788:	2300      	movs	r3, #0
 801478a:	0004      	movs	r4, r0
 801478c:	000d      	movs	r5, r1
 801478e:	f7eb fe65 	bl	800045c <__aeabi_dcmpeq>
 8014792:	2800      	cmp	r0, #0
 8014794:	d001      	beq.n	801479a <_svfprintf_r+0x6da>
 8014796:	2301      	movs	r3, #1
 8014798:	9326      	str	r3, [sp, #152]	; 0x98
 801479a:	4b83      	ldr	r3, [pc, #524]	; (80149a8 <_svfprintf_r+0x8e8>)
 801479c:	9317      	str	r3, [sp, #92]	; 0x5c
 801479e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80147a0:	2b61      	cmp	r3, #97	; 0x61
 80147a2:	d101      	bne.n	80147a8 <_svfprintf_r+0x6e8>
 80147a4:	4b81      	ldr	r3, [pc, #516]	; (80149ac <_svfprintf_r+0x8ec>)
 80147a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80147a8:	9b08      	ldr	r3, [sp, #32]
 80147aa:	3b01      	subs	r3, #1
 80147ac:	9310      	str	r3, [sp, #64]	; 0x40
 80147ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147b0:	9318      	str	r3, [sp, #96]	; 0x60
 80147b2:	2200      	movs	r2, #0
 80147b4:	4b7e      	ldr	r3, [pc, #504]	; (80149b0 <_svfprintf_r+0x8f0>)
 80147b6:	0020      	movs	r0, r4
 80147b8:	0029      	movs	r1, r5
 80147ba:	f7ed fb45 	bl	8001e48 <__aeabi_dmul>
 80147be:	000d      	movs	r5, r1
 80147c0:	0004      	movs	r4, r0
 80147c2:	f7ee f917 	bl	80029f4 <__aeabi_d2iz>
 80147c6:	9021      	str	r0, [sp, #132]	; 0x84
 80147c8:	f7ee f94a 	bl	8002a60 <__aeabi_i2d>
 80147cc:	0002      	movs	r2, r0
 80147ce:	000b      	movs	r3, r1
 80147d0:	0020      	movs	r0, r4
 80147d2:	0029      	movs	r1, r5
 80147d4:	f7ed fdaa 	bl	800232c <__aeabi_dsub>
 80147d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80147da:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80147dc:	3301      	adds	r3, #1
 80147de:	930d      	str	r3, [sp, #52]	; 0x34
 80147e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80147e2:	0004      	movs	r4, r0
 80147e4:	5c9b      	ldrb	r3, [r3, r2]
 80147e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80147e8:	000d      	movs	r5, r1
 80147ea:	7013      	strb	r3, [r2, #0]
 80147ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80147ee:	9323      	str	r3, [sp, #140]	; 0x8c
 80147f0:	3301      	adds	r3, #1
 80147f2:	d00a      	beq.n	801480a <_svfprintf_r+0x74a>
 80147f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80147f6:	2200      	movs	r2, #0
 80147f8:	3b01      	subs	r3, #1
 80147fa:	9310      	str	r3, [sp, #64]	; 0x40
 80147fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80147fe:	9318      	str	r3, [sp, #96]	; 0x60
 8014800:	2300      	movs	r3, #0
 8014802:	f7eb fe2b 	bl	800045c <__aeabi_dcmpeq>
 8014806:	2800      	cmp	r0, #0
 8014808:	d0d3      	beq.n	80147b2 <_svfprintf_r+0x6f2>
 801480a:	2200      	movs	r2, #0
 801480c:	4b69      	ldr	r3, [pc, #420]	; (80149b4 <_svfprintf_r+0x8f4>)
 801480e:	0020      	movs	r0, r4
 8014810:	0029      	movs	r1, r5
 8014812:	f7eb fe3d 	bl	8000490 <__aeabi_dcmpgt>
 8014816:	2800      	cmp	r0, #0
 8014818:	d126      	bne.n	8014868 <_svfprintf_r+0x7a8>
 801481a:	2200      	movs	r2, #0
 801481c:	4b65      	ldr	r3, [pc, #404]	; (80149b4 <_svfprintf_r+0x8f4>)
 801481e:	0020      	movs	r0, r4
 8014820:	0029      	movs	r1, r5
 8014822:	f7eb fe1b 	bl	800045c <__aeabi_dcmpeq>
 8014826:	2800      	cmp	r0, #0
 8014828:	d002      	beq.n	8014830 <_svfprintf_r+0x770>
 801482a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801482c:	07db      	lsls	r3, r3, #31
 801482e:	d41b      	bmi.n	8014868 <_svfprintf_r+0x7a8>
 8014830:	2130      	movs	r1, #48	; 0x30
 8014832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014834:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8014836:	1898      	adds	r0, r3, r2
 8014838:	930d      	str	r3, [sp, #52]	; 0x34
 801483a:	1ac2      	subs	r2, r0, r3
 801483c:	d426      	bmi.n	801488c <_svfprintf_r+0x7cc>
 801483e:	7019      	strb	r1, [r3, #0]
 8014840:	3301      	adds	r3, #1
 8014842:	e7f9      	b.n	8014838 <_svfprintf_r+0x778>
 8014844:	2300      	movs	r3, #0
 8014846:	930c      	str	r3, [sp, #48]	; 0x30
 8014848:	ab3f      	add	r3, sp, #252	; 0xfc
 801484a:	9309      	str	r3, [sp, #36]	; 0x24
 801484c:	e77d      	b.n	801474a <_svfprintf_r+0x68a>
 801484e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014850:	930c      	str	r3, [sp, #48]	; 0x30
 8014852:	e77a      	b.n	801474a <_svfprintf_r+0x68a>
 8014854:	2306      	movs	r3, #6
 8014856:	9308      	str	r3, [sp, #32]
 8014858:	e777      	b.n	801474a <_svfprintf_r+0x68a>
 801485a:	9b08      	ldr	r3, [sp, #32]
 801485c:	930c      	str	r3, [sp, #48]	; 0x30
 801485e:	2301      	movs	r3, #1
 8014860:	e7f9      	b.n	8014856 <_svfprintf_r+0x796>
 8014862:	930d      	str	r3, [sp, #52]	; 0x34
 8014864:	2300      	movs	r3, #0
 8014866:	e77f      	b.n	8014768 <_svfprintf_r+0x6a8>
 8014868:	2030      	movs	r0, #48	; 0x30
 801486a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801486c:	932a      	str	r3, [sp, #168]	; 0xa8
 801486e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014870:	7bda      	ldrb	r2, [r3, #15]
 8014872:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014874:	3b01      	subs	r3, #1
 8014876:	932a      	str	r3, [sp, #168]	; 0xa8
 8014878:	7819      	ldrb	r1, [r3, #0]
 801487a:	4291      	cmp	r1, r2
 801487c:	d07d      	beq.n	801497a <_svfprintf_r+0x8ba>
 801487e:	1c4a      	adds	r2, r1, #1
 8014880:	b2d2      	uxtb	r2, r2
 8014882:	2939      	cmp	r1, #57	; 0x39
 8014884:	d101      	bne.n	801488a <_svfprintf_r+0x7ca>
 8014886:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014888:	7a92      	ldrb	r2, [r2, #10]
 801488a:	701a      	strb	r2, [r3, #0]
 801488c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801488e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014890:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8014892:	1a9b      	subs	r3, r3, r2
 8014894:	930d      	str	r3, [sp, #52]	; 0x34
 8014896:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014898:	2b47      	cmp	r3, #71	; 0x47
 801489a:	d000      	beq.n	801489e <_svfprintf_r+0x7de>
 801489c:	e0d2      	b.n	8014a44 <_svfprintf_r+0x984>
 801489e:	1ceb      	adds	r3, r5, #3
 80148a0:	db03      	blt.n	80148aa <_svfprintf_r+0x7ea>
 80148a2:	9b08      	ldr	r3, [sp, #32]
 80148a4:	42ab      	cmp	r3, r5
 80148a6:	db00      	blt.n	80148aa <_svfprintf_r+0x7ea>
 80148a8:	e0fd      	b.n	8014aa6 <_svfprintf_r+0x9e6>
 80148aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80148ac:	3b02      	subs	r3, #2
 80148ae:	930e      	str	r3, [sp, #56]	; 0x38
 80148b0:	2238      	movs	r2, #56	; 0x38
 80148b2:	466b      	mov	r3, sp
 80148b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80148b6:	189b      	adds	r3, r3, r2
 80148b8:	3a18      	subs	r2, #24
 80148ba:	4391      	bics	r1, r2
 80148bc:	1e6c      	subs	r4, r5, #1
 80148be:	000a      	movs	r2, r1
 80148c0:	9426      	str	r4, [sp, #152]	; 0x98
 80148c2:	781b      	ldrb	r3, [r3, #0]
 80148c4:	2100      	movs	r1, #0
 80148c6:	2a41      	cmp	r2, #65	; 0x41
 80148c8:	d102      	bne.n	80148d0 <_svfprintf_r+0x810>
 80148ca:	330f      	adds	r3, #15
 80148cc:	b2db      	uxtb	r3, r3
 80148ce:	3101      	adds	r1, #1
 80148d0:	aa28      	add	r2, sp, #160	; 0xa0
 80148d2:	7013      	strb	r3, [r2, #0]
 80148d4:	232b      	movs	r3, #43	; 0x2b
 80148d6:	2c00      	cmp	r4, #0
 80148d8:	da02      	bge.n	80148e0 <_svfprintf_r+0x820>
 80148da:	2401      	movs	r4, #1
 80148dc:	232d      	movs	r3, #45	; 0x2d
 80148de:	1b64      	subs	r4, r4, r5
 80148e0:	7053      	strb	r3, [r2, #1]
 80148e2:	2c09      	cmp	r4, #9
 80148e4:	dc00      	bgt.n	80148e8 <_svfprintf_r+0x828>
 80148e6:	e0c7      	b.n	8014a78 <_svfprintf_r+0x9b8>
 80148e8:	2537      	movs	r5, #55	; 0x37
 80148ea:	ab1e      	add	r3, sp, #120	; 0x78
 80148ec:	18ed      	adds	r5, r5, r3
 80148ee:	1e6b      	subs	r3, r5, #1
 80148f0:	0020      	movs	r0, r4
 80148f2:	210a      	movs	r1, #10
 80148f4:	9308      	str	r3, [sp, #32]
 80148f6:	f7eb fd9b 	bl	8000430 <__aeabi_idivmod>
 80148fa:	1e6b      	subs	r3, r5, #1
 80148fc:	3130      	adds	r1, #48	; 0x30
 80148fe:	7019      	strb	r1, [r3, #0]
 8014900:	0020      	movs	r0, r4
 8014902:	210a      	movs	r1, #10
 8014904:	f7eb fcae 	bl	8000264 <__divsi3>
 8014908:	0004      	movs	r4, r0
 801490a:	2809      	cmp	r0, #9
 801490c:	dd00      	ble.n	8014910 <_svfprintf_r+0x850>
 801490e:	e0ac      	b.n	8014a6a <_svfprintf_r+0x9aa>
 8014910:	232a      	movs	r3, #42	; 0x2a
 8014912:	2137      	movs	r1, #55	; 0x37
 8014914:	aa1e      	add	r2, sp, #120	; 0x78
 8014916:	3d02      	subs	r5, #2
 8014918:	3430      	adds	r4, #48	; 0x30
 801491a:	702c      	strb	r4, [r5, #0]
 801491c:	189b      	adds	r3, r3, r2
 801491e:	1889      	adds	r1, r1, r2
 8014920:	001a      	movs	r2, r3
 8014922:	428d      	cmp	r5, r1
 8014924:	d200      	bcs.n	8014928 <_svfprintf_r+0x868>
 8014926:	e0a2      	b.n	8014a6e <_svfprintf_r+0x9ae>
 8014928:	ab28      	add	r3, sp, #160	; 0xa0
 801492a:	1ad3      	subs	r3, r2, r3
 801492c:	931d      	str	r3, [sp, #116]	; 0x74
 801492e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014932:	4694      	mov	ip, r2
 8014934:	4463      	add	r3, ip
 8014936:	9308      	str	r3, [sp, #32]
 8014938:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801493a:	2b01      	cmp	r3, #1
 801493c:	dc01      	bgt.n	8014942 <_svfprintf_r+0x882>
 801493e:	07f3      	lsls	r3, r6, #31
 8014940:	d504      	bpl.n	801494c <_svfprintf_r+0x88c>
 8014942:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014944:	9b08      	ldr	r3, [sp, #32]
 8014946:	4694      	mov	ip, r2
 8014948:	4463      	add	r3, ip
 801494a:	9308      	str	r3, [sp, #32]
 801494c:	2280      	movs	r2, #128	; 0x80
 801494e:	4b1a      	ldr	r3, [pc, #104]	; (80149b8 <_svfprintf_r+0x8f8>)
 8014950:	0052      	lsls	r2, r2, #1
 8014952:	4033      	ands	r3, r6
 8014954:	431a      	orrs	r2, r3
 8014956:	2300      	movs	r3, #0
 8014958:	001d      	movs	r5, r3
 801495a:	9220      	str	r2, [sp, #128]	; 0x80
 801495c:	9310      	str	r3, [sp, #64]	; 0x40
 801495e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014960:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014962:	2b00      	cmp	r3, #0
 8014964:	d100      	bne.n	8014968 <_svfprintf_r+0x8a8>
 8014966:	e270      	b.n	8014e4a <_svfprintf_r+0xd8a>
 8014968:	231b      	movs	r3, #27
 801496a:	aa1e      	add	r2, sp, #120	; 0x78
 801496c:	189b      	adds	r3, r3, r2
 801496e:	222d      	movs	r2, #45	; 0x2d
 8014970:	701a      	strb	r2, [r3, #0]
 8014972:	2300      	movs	r3, #0
 8014974:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014976:	9317      	str	r3, [sp, #92]	; 0x5c
 8014978:	e539      	b.n	80143ee <_svfprintf_r+0x32e>
 801497a:	7018      	strb	r0, [r3, #0]
 801497c:	e779      	b.n	8014872 <_svfprintf_r+0x7b2>
 801497e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014980:	2b46      	cmp	r3, #70	; 0x46
 8014982:	d01b      	beq.n	80149bc <_svfprintf_r+0x8fc>
 8014984:	9d08      	ldr	r5, [sp, #32]
 8014986:	2b45      	cmp	r3, #69	; 0x45
 8014988:	d101      	bne.n	801498e <_svfprintf_r+0x8ce>
 801498a:	9b08      	ldr	r3, [sp, #32]
 801498c:	1c5d      	adds	r5, r3, #1
 801498e:	2302      	movs	r3, #2
 8014990:	e016      	b.n	80149c0 <_svfprintf_r+0x900>
 8014992:	46c0      	nop			; (mov r8, r8)
 8014994:	7fefffff 	.word	0x7fefffff
 8014998:	0801a59c 	.word	0x0801a59c
 801499c:	0801a598 	.word	0x0801a598
 80149a0:	0801a5a4 	.word	0x0801a5a4
 80149a4:	0801a5a0 	.word	0x0801a5a0
 80149a8:	0801a5b9 	.word	0x0801a5b9
 80149ac:	0801a5a8 	.word	0x0801a5a8
 80149b0:	40300000 	.word	0x40300000
 80149b4:	3fe00000 	.word	0x3fe00000
 80149b8:	fffffbff 	.word	0xfffffbff
 80149bc:	2303      	movs	r3, #3
 80149be:	9d08      	ldr	r5, [sp, #32]
 80149c0:	aa2a      	add	r2, sp, #168	; 0xa8
 80149c2:	9204      	str	r2, [sp, #16]
 80149c4:	aa27      	add	r2, sp, #156	; 0x9c
 80149c6:	9203      	str	r2, [sp, #12]
 80149c8:	aa26      	add	r2, sp, #152	; 0x98
 80149ca:	9202      	str	r2, [sp, #8]
 80149cc:	9300      	str	r3, [sp, #0]
 80149ce:	9501      	str	r5, [sp, #4]
 80149d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149d2:	0022      	movs	r2, r4
 80149d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80149d6:	f000 fe79 	bl	80156cc <_dtoa_r>
 80149da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149dc:	9009      	str	r0, [sp, #36]	; 0x24
 80149de:	2b47      	cmp	r3, #71	; 0x47
 80149e0:	d101      	bne.n	80149e6 <_svfprintf_r+0x926>
 80149e2:	07f3      	lsls	r3, r6, #31
 80149e4:	d524      	bpl.n	8014a30 <_svfprintf_r+0x970>
 80149e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149e8:	195b      	adds	r3, r3, r5
 80149ea:	9310      	str	r3, [sp, #64]	; 0x40
 80149ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149ee:	2b46      	cmp	r3, #70	; 0x46
 80149f0:	d113      	bne.n	8014a1a <_svfprintf_r+0x95a>
 80149f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149f4:	781b      	ldrb	r3, [r3, #0]
 80149f6:	2b30      	cmp	r3, #48	; 0x30
 80149f8:	d10a      	bne.n	8014a10 <_svfprintf_r+0x950>
 80149fa:	2200      	movs	r2, #0
 80149fc:	2300      	movs	r3, #0
 80149fe:	0020      	movs	r0, r4
 8014a00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014a02:	f7eb fd2b 	bl	800045c <__aeabi_dcmpeq>
 8014a06:	2800      	cmp	r0, #0
 8014a08:	d102      	bne.n	8014a10 <_svfprintf_r+0x950>
 8014a0a:	2301      	movs	r3, #1
 8014a0c:	1b5d      	subs	r5, r3, r5
 8014a0e:	9526      	str	r5, [sp, #152]	; 0x98
 8014a10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014a12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a14:	4694      	mov	ip, r2
 8014a16:	4463      	add	r3, ip
 8014a18:	9310      	str	r3, [sp, #64]	; 0x40
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	0020      	movs	r0, r4
 8014a20:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014a22:	f7eb fd1b 	bl	800045c <__aeabi_dcmpeq>
 8014a26:	2230      	movs	r2, #48	; 0x30
 8014a28:	2800      	cmp	r0, #0
 8014a2a:	d006      	beq.n	8014a3a <_svfprintf_r+0x97a>
 8014a2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a2e:	932a      	str	r3, [sp, #168]	; 0xa8
 8014a30:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014a32:	e72c      	b.n	801488e <_svfprintf_r+0x7ce>
 8014a34:	1c59      	adds	r1, r3, #1
 8014a36:	912a      	str	r1, [sp, #168]	; 0xa8
 8014a38:	701a      	strb	r2, [r3, #0]
 8014a3a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014a3c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014a3e:	4299      	cmp	r1, r3
 8014a40:	d8f8      	bhi.n	8014a34 <_svfprintf_r+0x974>
 8014a42:	e7f5      	b.n	8014a30 <_svfprintf_r+0x970>
 8014a44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a46:	2b46      	cmp	r3, #70	; 0x46
 8014a48:	d000      	beq.n	8014a4c <_svfprintf_r+0x98c>
 8014a4a:	e731      	b.n	80148b0 <_svfprintf_r+0x7f0>
 8014a4c:	9b08      	ldr	r3, [sp, #32]
 8014a4e:	2d00      	cmp	r5, #0
 8014a50:	dd21      	ble.n	8014a96 <_svfprintf_r+0x9d6>
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d101      	bne.n	8014a5a <_svfprintf_r+0x99a>
 8014a56:	07f3      	lsls	r3, r6, #31
 8014a58:	d54a      	bpl.n	8014af0 <_svfprintf_r+0xa30>
 8014a5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014a5c:	18eb      	adds	r3, r5, r3
 8014a5e:	9a08      	ldr	r2, [sp, #32]
 8014a60:	18d3      	adds	r3, r2, r3
 8014a62:	9308      	str	r3, [sp, #32]
 8014a64:	2366      	movs	r3, #102	; 0x66
 8014a66:	930e      	str	r3, [sp, #56]	; 0x38
 8014a68:	e034      	b.n	8014ad4 <_svfprintf_r+0xa14>
 8014a6a:	9d08      	ldr	r5, [sp, #32]
 8014a6c:	e73f      	b.n	80148ee <_svfprintf_r+0x82e>
 8014a6e:	782a      	ldrb	r2, [r5, #0]
 8014a70:	3501      	adds	r5, #1
 8014a72:	701a      	strb	r2, [r3, #0]
 8014a74:	3301      	adds	r3, #1
 8014a76:	e753      	b.n	8014920 <_svfprintf_r+0x860>
 8014a78:	232a      	movs	r3, #42	; 0x2a
 8014a7a:	aa1e      	add	r2, sp, #120	; 0x78
 8014a7c:	189b      	adds	r3, r3, r2
 8014a7e:	2900      	cmp	r1, #0
 8014a80:	d105      	bne.n	8014a8e <_svfprintf_r+0x9ce>
 8014a82:	2230      	movs	r2, #48	; 0x30
 8014a84:	ab28      	add	r3, sp, #160	; 0xa0
 8014a86:	709a      	strb	r2, [r3, #2]
 8014a88:	232b      	movs	r3, #43	; 0x2b
 8014a8a:	aa1e      	add	r2, sp, #120	; 0x78
 8014a8c:	189b      	adds	r3, r3, r2
 8014a8e:	3430      	adds	r4, #48	; 0x30
 8014a90:	1c5a      	adds	r2, r3, #1
 8014a92:	701c      	strb	r4, [r3, #0]
 8014a94:	e748      	b.n	8014928 <_svfprintf_r+0x868>
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d102      	bne.n	8014aa0 <_svfprintf_r+0x9e0>
 8014a9a:	3301      	adds	r3, #1
 8014a9c:	421e      	tst	r6, r3
 8014a9e:	d029      	beq.n	8014af4 <_svfprintf_r+0xa34>
 8014aa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014aa2:	3301      	adds	r3, #1
 8014aa4:	e7db      	b.n	8014a5e <_svfprintf_r+0x99e>
 8014aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014aa8:	42ab      	cmp	r3, r5
 8014aaa:	dc06      	bgt.n	8014aba <_svfprintf_r+0x9fa>
 8014aac:	07f3      	lsls	r3, r6, #31
 8014aae:	d524      	bpl.n	8014afa <_svfprintf_r+0xa3a>
 8014ab0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ab2:	18eb      	adds	r3, r5, r3
 8014ab4:	9308      	str	r3, [sp, #32]
 8014ab6:	2367      	movs	r3, #103	; 0x67
 8014ab8:	e7d5      	b.n	8014a66 <_svfprintf_r+0x9a6>
 8014aba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014abc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014abe:	4694      	mov	ip, r2
 8014ac0:	4463      	add	r3, ip
 8014ac2:	9308      	str	r3, [sp, #32]
 8014ac4:	2367      	movs	r3, #103	; 0x67
 8014ac6:	930e      	str	r3, [sp, #56]	; 0x38
 8014ac8:	2d00      	cmp	r5, #0
 8014aca:	dc03      	bgt.n	8014ad4 <_svfprintf_r+0xa14>
 8014acc:	9b08      	ldr	r3, [sp, #32]
 8014ace:	1b5b      	subs	r3, r3, r5
 8014ad0:	3301      	adds	r3, #1
 8014ad2:	9308      	str	r3, [sp, #32]
 8014ad4:	2380      	movs	r3, #128	; 0x80
 8014ad6:	00db      	lsls	r3, r3, #3
 8014ad8:	401e      	ands	r6, r3
 8014ada:	2300      	movs	r3, #0
 8014adc:	960f      	str	r6, [sp, #60]	; 0x3c
 8014ade:	9310      	str	r3, [sp, #64]	; 0x40
 8014ae0:	2e00      	cmp	r6, #0
 8014ae2:	d100      	bne.n	8014ae6 <_svfprintf_r+0xa26>
 8014ae4:	e73c      	b.n	8014960 <_svfprintf_r+0x8a0>
 8014ae6:	2d00      	cmp	r5, #0
 8014ae8:	dc27      	bgt.n	8014b3a <_svfprintf_r+0xa7a>
 8014aea:	2300      	movs	r3, #0
 8014aec:	930f      	str	r3, [sp, #60]	; 0x3c
 8014aee:	e737      	b.n	8014960 <_svfprintf_r+0x8a0>
 8014af0:	9508      	str	r5, [sp, #32]
 8014af2:	e7b7      	b.n	8014a64 <_svfprintf_r+0x9a4>
 8014af4:	2266      	movs	r2, #102	; 0x66
 8014af6:	920e      	str	r2, [sp, #56]	; 0x38
 8014af8:	e7eb      	b.n	8014ad2 <_svfprintf_r+0xa12>
 8014afa:	9508      	str	r5, [sp, #32]
 8014afc:	e7db      	b.n	8014ab6 <_svfprintf_r+0x9f6>
 8014afe:	42ab      	cmp	r3, r5
 8014b00:	da0e      	bge.n	8014b20 <_svfprintf_r+0xa60>
 8014b02:	1aed      	subs	r5, r5, r3
 8014b04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b06:	785b      	ldrb	r3, [r3, #1]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d012      	beq.n	8014b32 <_svfprintf_r+0xa72>
 8014b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b0e:	3301      	adds	r3, #1
 8014b10:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b14:	3301      	adds	r3, #1
 8014b16:	9313      	str	r3, [sp, #76]	; 0x4c
 8014b18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b1a:	781b      	ldrb	r3, [r3, #0]
 8014b1c:	2bff      	cmp	r3, #255	; 0xff
 8014b1e:	d1ee      	bne.n	8014afe <_svfprintf_r+0xa3e>
 8014b20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014b22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b24:	189b      	adds	r3, r3, r2
 8014b26:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014b28:	4353      	muls	r3, r2
 8014b2a:	9a08      	ldr	r2, [sp, #32]
 8014b2c:	189b      	adds	r3, r3, r2
 8014b2e:	9308      	str	r3, [sp, #32]
 8014b30:	e716      	b.n	8014960 <_svfprintf_r+0x8a0>
 8014b32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b34:	3301      	adds	r3, #1
 8014b36:	9310      	str	r3, [sp, #64]	; 0x40
 8014b38:	e7ee      	b.n	8014b18 <_svfprintf_r+0xa58>
 8014b3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b3e:	e7eb      	b.n	8014b18 <_svfprintf_r+0xa58>
 8014b40:	0022      	movs	r2, r4
 8014b42:	ca08      	ldmia	r2!, {r3}
 8014b44:	9212      	str	r2, [sp, #72]	; 0x48
 8014b46:	06b2      	lsls	r2, r6, #26
 8014b48:	d508      	bpl.n	8014b5c <_svfprintf_r+0xa9c>
 8014b4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014b4c:	601a      	str	r2, [r3, #0]
 8014b4e:	17d2      	asrs	r2, r2, #31
 8014b50:	605a      	str	r2, [r3, #4]
 8014b52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014b54:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014b56:	9309      	str	r3, [sp, #36]	; 0x24
 8014b58:	f7ff faeb 	bl	8014132 <_svfprintf_r+0x72>
 8014b5c:	06f2      	lsls	r2, r6, #27
 8014b5e:	d502      	bpl.n	8014b66 <_svfprintf_r+0xaa6>
 8014b60:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014b62:	601a      	str	r2, [r3, #0]
 8014b64:	e7f5      	b.n	8014b52 <_svfprintf_r+0xa92>
 8014b66:	0672      	lsls	r2, r6, #25
 8014b68:	d502      	bpl.n	8014b70 <_svfprintf_r+0xab0>
 8014b6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014b6c:	801a      	strh	r2, [r3, #0]
 8014b6e:	e7f0      	b.n	8014b52 <_svfprintf_r+0xa92>
 8014b70:	05b2      	lsls	r2, r6, #22
 8014b72:	d5f5      	bpl.n	8014b60 <_svfprintf_r+0xaa0>
 8014b74:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014b76:	701a      	strb	r2, [r3, #0]
 8014b78:	e7eb      	b.n	8014b52 <_svfprintf_r+0xa92>
 8014b7a:	2310      	movs	r3, #16
 8014b7c:	431e      	orrs	r6, r3
 8014b7e:	2220      	movs	r2, #32
 8014b80:	4032      	ands	r2, r6
 8014b82:	d025      	beq.n	8014bd0 <_svfprintf_r+0xb10>
 8014b84:	2307      	movs	r3, #7
 8014b86:	3407      	adds	r4, #7
 8014b88:	439c      	bics	r4, r3
 8014b8a:	0023      	movs	r3, r4
 8014b8c:	3308      	adds	r3, #8
 8014b8e:	9312      	str	r3, [sp, #72]	; 0x48
 8014b90:	6823      	ldr	r3, [r4, #0]
 8014b92:	6864      	ldr	r4, [r4, #4]
 8014b94:	9306      	str	r3, [sp, #24]
 8014b96:	9407      	str	r4, [sp, #28]
 8014b98:	4bc2      	ldr	r3, [pc, #776]	; (8014ea4 <_svfprintf_r+0xde4>)
 8014b9a:	401e      	ands	r6, r3
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	221b      	movs	r2, #27
 8014ba0:	a91e      	add	r1, sp, #120	; 0x78
 8014ba2:	1852      	adds	r2, r2, r1
 8014ba4:	2100      	movs	r1, #0
 8014ba6:	7011      	strb	r1, [r2, #0]
 8014ba8:	9a08      	ldr	r2, [sp, #32]
 8014baa:	3201      	adds	r2, #1
 8014bac:	d100      	bne.n	8014bb0 <_svfprintf_r+0xaf0>
 8014bae:	e0a6      	b.n	8014cfe <_svfprintf_r+0xc3e>
 8014bb0:	0032      	movs	r2, r6
 8014bb2:	2180      	movs	r1, #128	; 0x80
 8014bb4:	9807      	ldr	r0, [sp, #28]
 8014bb6:	438e      	bics	r6, r1
 8014bb8:	9906      	ldr	r1, [sp, #24]
 8014bba:	4301      	orrs	r1, r0
 8014bbc:	d000      	beq.n	8014bc0 <_svfprintf_r+0xb00>
 8014bbe:	e09e      	b.n	8014cfe <_svfprintf_r+0xc3e>
 8014bc0:	9908      	ldr	r1, [sp, #32]
 8014bc2:	2900      	cmp	r1, #0
 8014bc4:	d100      	bne.n	8014bc8 <_svfprintf_r+0xb08>
 8014bc6:	e125      	b.n	8014e14 <_svfprintf_r+0xd54>
 8014bc8:	2b01      	cmp	r3, #1
 8014bca:	d000      	beq.n	8014bce <_svfprintf_r+0xb0e>
 8014bcc:	e09a      	b.n	8014d04 <_svfprintf_r+0xc44>
 8014bce:	e518      	b.n	8014602 <_svfprintf_r+0x542>
 8014bd0:	1d23      	adds	r3, r4, #4
 8014bd2:	9312      	str	r3, [sp, #72]	; 0x48
 8014bd4:	2310      	movs	r3, #16
 8014bd6:	4033      	ands	r3, r6
 8014bd8:	d003      	beq.n	8014be2 <_svfprintf_r+0xb22>
 8014bda:	6823      	ldr	r3, [r4, #0]
 8014bdc:	9306      	str	r3, [sp, #24]
 8014bde:	9207      	str	r2, [sp, #28]
 8014be0:	e7da      	b.n	8014b98 <_svfprintf_r+0xad8>
 8014be2:	2240      	movs	r2, #64	; 0x40
 8014be4:	4032      	ands	r2, r6
 8014be6:	d004      	beq.n	8014bf2 <_svfprintf_r+0xb32>
 8014be8:	6822      	ldr	r2, [r4, #0]
 8014bea:	b292      	uxth	r2, r2
 8014bec:	9206      	str	r2, [sp, #24]
 8014bee:	9307      	str	r3, [sp, #28]
 8014bf0:	e7d2      	b.n	8014b98 <_svfprintf_r+0xad8>
 8014bf2:	2380      	movs	r3, #128	; 0x80
 8014bf4:	009b      	lsls	r3, r3, #2
 8014bf6:	4033      	ands	r3, r6
 8014bf8:	d002      	beq.n	8014c00 <_svfprintf_r+0xb40>
 8014bfa:	6823      	ldr	r3, [r4, #0]
 8014bfc:	b2db      	uxtb	r3, r3
 8014bfe:	e7ed      	b.n	8014bdc <_svfprintf_r+0xb1c>
 8014c00:	6822      	ldr	r2, [r4, #0]
 8014c02:	e7f3      	b.n	8014bec <_svfprintf_r+0xb2c>
 8014c04:	1d23      	adds	r3, r4, #4
 8014c06:	49a8      	ldr	r1, [pc, #672]	; (8014ea8 <_svfprintf_r+0xde8>)
 8014c08:	aa25      	add	r2, sp, #148	; 0x94
 8014c0a:	9312      	str	r3, [sp, #72]	; 0x48
 8014c0c:	6823      	ldr	r3, [r4, #0]
 8014c0e:	8011      	strh	r1, [r2, #0]
 8014c10:	4aa6      	ldr	r2, [pc, #664]	; (8014eac <_svfprintf_r+0xdec>)
 8014c12:	9306      	str	r3, [sp, #24]
 8014c14:	2300      	movs	r3, #0
 8014c16:	921e      	str	r2, [sp, #120]	; 0x78
 8014c18:	2278      	movs	r2, #120	; 0x78
 8014c1a:	9307      	str	r3, [sp, #28]
 8014c1c:	3302      	adds	r3, #2
 8014c1e:	431e      	orrs	r6, r3
 8014c20:	920e      	str	r2, [sp, #56]	; 0x38
 8014c22:	e7bc      	b.n	8014b9e <_svfprintf_r+0xade>
 8014c24:	1d23      	adds	r3, r4, #4
 8014c26:	9312      	str	r3, [sp, #72]	; 0x48
 8014c28:	6823      	ldr	r3, [r4, #0]
 8014c2a:	2400      	movs	r4, #0
 8014c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8014c2e:	231b      	movs	r3, #27
 8014c30:	aa1e      	add	r2, sp, #120	; 0x78
 8014c32:	189b      	adds	r3, r3, r2
 8014c34:	701c      	strb	r4, [r3, #0]
 8014c36:	9b08      	ldr	r3, [sp, #32]
 8014c38:	3301      	adds	r3, #1
 8014c3a:	d00e      	beq.n	8014c5a <_svfprintf_r+0xb9a>
 8014c3c:	9a08      	ldr	r2, [sp, #32]
 8014c3e:	0021      	movs	r1, r4
 8014c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c42:	f001 ff79 	bl	8016b38 <memchr>
 8014c46:	900c      	str	r0, [sp, #48]	; 0x30
 8014c48:	42a0      	cmp	r0, r4
 8014c4a:	d100      	bne.n	8014c4e <_svfprintf_r+0xb8e>
 8014c4c:	e100      	b.n	8014e50 <_svfprintf_r+0xd90>
 8014c4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c50:	1a83      	subs	r3, r0, r2
 8014c52:	9308      	str	r3, [sp, #32]
 8014c54:	940c      	str	r4, [sp, #48]	; 0x30
 8014c56:	0023      	movs	r3, r4
 8014c58:	e527      	b.n	80146aa <_svfprintf_r+0x5ea>
 8014c5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c5c:	f7eb fa5c 	bl	8000118 <strlen>
 8014c60:	9008      	str	r0, [sp, #32]
 8014c62:	e7f7      	b.n	8014c54 <_svfprintf_r+0xb94>
 8014c64:	2310      	movs	r3, #16
 8014c66:	431e      	orrs	r6, r3
 8014c68:	2220      	movs	r2, #32
 8014c6a:	4032      	ands	r2, r6
 8014c6c:	d00b      	beq.n	8014c86 <_svfprintf_r+0xbc6>
 8014c6e:	2307      	movs	r3, #7
 8014c70:	3407      	adds	r4, #7
 8014c72:	439c      	bics	r4, r3
 8014c74:	0023      	movs	r3, r4
 8014c76:	3308      	adds	r3, #8
 8014c78:	9312      	str	r3, [sp, #72]	; 0x48
 8014c7a:	6823      	ldr	r3, [r4, #0]
 8014c7c:	6864      	ldr	r4, [r4, #4]
 8014c7e:	9306      	str	r3, [sp, #24]
 8014c80:	9407      	str	r4, [sp, #28]
 8014c82:	2301      	movs	r3, #1
 8014c84:	e78b      	b.n	8014b9e <_svfprintf_r+0xade>
 8014c86:	1d23      	adds	r3, r4, #4
 8014c88:	9312      	str	r3, [sp, #72]	; 0x48
 8014c8a:	2310      	movs	r3, #16
 8014c8c:	4033      	ands	r3, r6
 8014c8e:	d003      	beq.n	8014c98 <_svfprintf_r+0xbd8>
 8014c90:	6823      	ldr	r3, [r4, #0]
 8014c92:	9306      	str	r3, [sp, #24]
 8014c94:	9207      	str	r2, [sp, #28]
 8014c96:	e7f4      	b.n	8014c82 <_svfprintf_r+0xbc2>
 8014c98:	2240      	movs	r2, #64	; 0x40
 8014c9a:	4032      	ands	r2, r6
 8014c9c:	d004      	beq.n	8014ca8 <_svfprintf_r+0xbe8>
 8014c9e:	6822      	ldr	r2, [r4, #0]
 8014ca0:	b292      	uxth	r2, r2
 8014ca2:	9206      	str	r2, [sp, #24]
 8014ca4:	9307      	str	r3, [sp, #28]
 8014ca6:	e7ec      	b.n	8014c82 <_svfprintf_r+0xbc2>
 8014ca8:	2380      	movs	r3, #128	; 0x80
 8014caa:	009b      	lsls	r3, r3, #2
 8014cac:	4033      	ands	r3, r6
 8014cae:	d002      	beq.n	8014cb6 <_svfprintf_r+0xbf6>
 8014cb0:	6823      	ldr	r3, [r4, #0]
 8014cb2:	b2db      	uxtb	r3, r3
 8014cb4:	e7ed      	b.n	8014c92 <_svfprintf_r+0xbd2>
 8014cb6:	6822      	ldr	r2, [r4, #0]
 8014cb8:	e7f3      	b.n	8014ca2 <_svfprintf_r+0xbe2>
 8014cba:	4b7c      	ldr	r3, [pc, #496]	; (8014eac <_svfprintf_r+0xdec>)
 8014cbc:	f7ff fad9 	bl	8014272 <_svfprintf_r+0x1b2>
 8014cc0:	1d23      	adds	r3, r4, #4
 8014cc2:	9312      	str	r3, [sp, #72]	; 0x48
 8014cc4:	2310      	movs	r3, #16
 8014cc6:	4033      	ands	r3, r6
 8014cc8:	d004      	beq.n	8014cd4 <_svfprintf_r+0xc14>
 8014cca:	6823      	ldr	r3, [r4, #0]
 8014ccc:	9306      	str	r3, [sp, #24]
 8014cce:	9207      	str	r2, [sp, #28]
 8014cd0:	f7ff fadf 	bl	8014292 <_svfprintf_r+0x1d2>
 8014cd4:	2240      	movs	r2, #64	; 0x40
 8014cd6:	4032      	ands	r2, r6
 8014cd8:	d005      	beq.n	8014ce6 <_svfprintf_r+0xc26>
 8014cda:	6822      	ldr	r2, [r4, #0]
 8014cdc:	b292      	uxth	r2, r2
 8014cde:	9206      	str	r2, [sp, #24]
 8014ce0:	9307      	str	r3, [sp, #28]
 8014ce2:	f7ff fad6 	bl	8014292 <_svfprintf_r+0x1d2>
 8014ce6:	2380      	movs	r3, #128	; 0x80
 8014ce8:	009b      	lsls	r3, r3, #2
 8014cea:	4033      	ands	r3, r6
 8014cec:	d002      	beq.n	8014cf4 <_svfprintf_r+0xc34>
 8014cee:	6823      	ldr	r3, [r4, #0]
 8014cf0:	b2db      	uxtb	r3, r3
 8014cf2:	e7eb      	b.n	8014ccc <_svfprintf_r+0xc0c>
 8014cf4:	6822      	ldr	r2, [r4, #0]
 8014cf6:	e7f2      	b.n	8014cde <_svfprintf_r+0xc1e>
 8014cf8:	0032      	movs	r2, r6
 8014cfa:	2301      	movs	r3, #1
 8014cfc:	e759      	b.n	8014bb2 <_svfprintf_r+0xaf2>
 8014cfe:	2b01      	cmp	r3, #1
 8014d00:	d100      	bne.n	8014d04 <_svfprintf_r+0xc44>
 8014d02:	e476      	b.n	80145f2 <_svfprintf_r+0x532>
 8014d04:	2b02      	cmp	r3, #2
 8014d06:	d06b      	beq.n	8014de0 <_svfprintf_r+0xd20>
 8014d08:	2507      	movs	r5, #7
 8014d0a:	ab58      	add	r3, sp, #352	; 0x160
 8014d0c:	1e5a      	subs	r2, r3, #1
 8014d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8014d10:	9a06      	ldr	r2, [sp, #24]
 8014d12:	1e59      	subs	r1, r3, #1
 8014d14:	402a      	ands	r2, r5
 8014d16:	3230      	adds	r2, #48	; 0x30
 8014d18:	700a      	strb	r2, [r1, #0]
 8014d1a:	9907      	ldr	r1, [sp, #28]
 8014d1c:	074c      	lsls	r4, r1, #29
 8014d1e:	9906      	ldr	r1, [sp, #24]
 8014d20:	08c8      	lsrs	r0, r1, #3
 8014d22:	9907      	ldr	r1, [sp, #28]
 8014d24:	4304      	orrs	r4, r0
 8014d26:	08c9      	lsrs	r1, r1, #3
 8014d28:	9107      	str	r1, [sp, #28]
 8014d2a:	0021      	movs	r1, r4
 8014d2c:	9807      	ldr	r0, [sp, #28]
 8014d2e:	9406      	str	r4, [sp, #24]
 8014d30:	4301      	orrs	r1, r0
 8014d32:	d111      	bne.n	8014d58 <_svfprintf_r+0xc98>
 8014d34:	07f1      	lsls	r1, r6, #31
 8014d36:	d502      	bpl.n	8014d3e <_svfprintf_r+0xc7e>
 8014d38:	3b02      	subs	r3, #2
 8014d3a:	2a30      	cmp	r2, #48	; 0x30
 8014d3c:	d173      	bne.n	8014e26 <_svfprintf_r+0xd66>
 8014d3e:	9b08      	ldr	r3, [sp, #32]
 8014d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d42:	9317      	str	r3, [sp, #92]	; 0x5c
 8014d44:	ab58      	add	r3, sp, #352	; 0x160
 8014d46:	1a9b      	subs	r3, r3, r2
 8014d48:	9308      	str	r3, [sp, #32]
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	930c      	str	r3, [sp, #48]	; 0x30
 8014d4e:	9310      	str	r3, [sp, #64]	; 0x40
 8014d50:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d52:	001d      	movs	r5, r3
 8014d54:	f7ff fb4b 	bl	80143ee <_svfprintf_r+0x32e>
 8014d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d5a:	e7d7      	b.n	8014d0c <_svfprintf_r+0xc4c>
 8014d5c:	2480      	movs	r4, #128	; 0x80
 8014d5e:	2300      	movs	r3, #0
 8014d60:	00e4      	lsls	r4, r4, #3
 8014d62:	930d      	str	r3, [sp, #52]	; 0x34
 8014d64:	4034      	ands	r4, r6
 8014d66:	ab58      	add	r3, sp, #352	; 0x160
 8014d68:	3b01      	subs	r3, #1
 8014d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8014d6c:	220a      	movs	r2, #10
 8014d6e:	9806      	ldr	r0, [sp, #24]
 8014d70:	9907      	ldr	r1, [sp, #28]
 8014d72:	2300      	movs	r3, #0
 8014d74:	f7eb fbe4 	bl	8000540 <__aeabi_uldivmod>
 8014d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d7a:	3230      	adds	r2, #48	; 0x30
 8014d7c:	701a      	strb	r2, [r3, #0]
 8014d7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d80:	3301      	adds	r3, #1
 8014d82:	930d      	str	r3, [sp, #52]	; 0x34
 8014d84:	2c00      	cmp	r4, #0
 8014d86:	d01d      	beq.n	8014dc4 <_svfprintf_r+0xd04>
 8014d88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d8c:	781b      	ldrb	r3, [r3, #0]
 8014d8e:	429a      	cmp	r2, r3
 8014d90:	d118      	bne.n	8014dc4 <_svfprintf_r+0xd04>
 8014d92:	2aff      	cmp	r2, #255	; 0xff
 8014d94:	d016      	beq.n	8014dc4 <_svfprintf_r+0xd04>
 8014d96:	9b07      	ldr	r3, [sp, #28]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d102      	bne.n	8014da2 <_svfprintf_r+0xce2>
 8014d9c:	9b06      	ldr	r3, [sp, #24]
 8014d9e:	2b09      	cmp	r3, #9
 8014da0:	d910      	bls.n	8014dc4 <_svfprintf_r+0xd04>
 8014da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014da4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014da6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014da8:	1a9b      	subs	r3, r3, r2
 8014daa:	0018      	movs	r0, r3
 8014dac:	9309      	str	r3, [sp, #36]	; 0x24
 8014dae:	f7fe fa52 	bl	8013256 <strncpy>
 8014db2:	2200      	movs	r2, #0
 8014db4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014db6:	920d      	str	r2, [sp, #52]	; 0x34
 8014db8:	785b      	ldrb	r3, [r3, #1]
 8014dba:	1e5a      	subs	r2, r3, #1
 8014dbc:	4193      	sbcs	r3, r2
 8014dbe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014dc0:	18d3      	adds	r3, r2, r3
 8014dc2:	9313      	str	r3, [sp, #76]	; 0x4c
 8014dc4:	220a      	movs	r2, #10
 8014dc6:	9806      	ldr	r0, [sp, #24]
 8014dc8:	9907      	ldr	r1, [sp, #28]
 8014dca:	2300      	movs	r3, #0
 8014dcc:	f7eb fbb8 	bl	8000540 <__aeabi_uldivmod>
 8014dd0:	9006      	str	r0, [sp, #24]
 8014dd2:	9107      	str	r1, [sp, #28]
 8014dd4:	9b06      	ldr	r3, [sp, #24]
 8014dd6:	9a07      	ldr	r2, [sp, #28]
 8014dd8:	4313      	orrs	r3, r2
 8014dda:	d0b0      	beq.n	8014d3e <_svfprintf_r+0xc7e>
 8014ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dde:	e7c3      	b.n	8014d68 <_svfprintf_r+0xca8>
 8014de0:	200f      	movs	r0, #15
 8014de2:	ab58      	add	r3, sp, #352	; 0x160
 8014de4:	9309      	str	r3, [sp, #36]	; 0x24
 8014de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014de8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014dea:	3b01      	subs	r3, #1
 8014dec:	9309      	str	r3, [sp, #36]	; 0x24
 8014dee:	9b06      	ldr	r3, [sp, #24]
 8014df0:	4003      	ands	r3, r0
 8014df2:	5cd3      	ldrb	r3, [r2, r3]
 8014df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014df6:	7013      	strb	r3, [r2, #0]
 8014df8:	9b07      	ldr	r3, [sp, #28]
 8014dfa:	0719      	lsls	r1, r3, #28
 8014dfc:	9b06      	ldr	r3, [sp, #24]
 8014dfe:	091a      	lsrs	r2, r3, #4
 8014e00:	9b07      	ldr	r3, [sp, #28]
 8014e02:	4311      	orrs	r1, r2
 8014e04:	091b      	lsrs	r3, r3, #4
 8014e06:	9307      	str	r3, [sp, #28]
 8014e08:	000b      	movs	r3, r1
 8014e0a:	9a07      	ldr	r2, [sp, #28]
 8014e0c:	9106      	str	r1, [sp, #24]
 8014e0e:	4313      	orrs	r3, r2
 8014e10:	d1e9      	bne.n	8014de6 <_svfprintf_r+0xd26>
 8014e12:	e794      	b.n	8014d3e <_svfprintf_r+0xc7e>
 8014e14:	a958      	add	r1, sp, #352	; 0x160
 8014e16:	9109      	str	r1, [sp, #36]	; 0x24
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d190      	bne.n	8014d3e <_svfprintf_r+0xc7e>
 8014e1c:	07d3      	lsls	r3, r2, #31
 8014e1e:	d58e      	bpl.n	8014d3e <_svfprintf_r+0xc7e>
 8014e20:	23e7      	movs	r3, #231	; 0xe7
 8014e22:	aa1e      	add	r2, sp, #120	; 0x78
 8014e24:	189b      	adds	r3, r3, r2
 8014e26:	2230      	movs	r2, #48	; 0x30
 8014e28:	f7ff fbf0 	bl	801460c <_svfprintf_r+0x54c>
 8014e2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d100      	bne.n	8014e34 <_svfprintf_r+0xd74>
 8014e32:	e38a      	b.n	801554a <_svfprintf_r+0x148a>
 8014e34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014e36:	ab3f      	add	r3, sp, #252	; 0xfc
 8014e38:	701a      	strb	r2, [r3, #0]
 8014e3a:	221b      	movs	r2, #27
 8014e3c:	2000      	movs	r0, #0
 8014e3e:	a91e      	add	r1, sp, #120	; 0x78
 8014e40:	1852      	adds	r2, r2, r1
 8014e42:	7010      	strb	r0, [r2, #0]
 8014e44:	9412      	str	r4, [sp, #72]	; 0x48
 8014e46:	f7ff faca 	bl	80143de <_svfprintf_r+0x31e>
 8014e4a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014e4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014e4e:	e592      	b.n	8014976 <_svfprintf_r+0x8b6>
 8014e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e52:	e42a      	b.n	80146aa <_svfprintf_r+0x5ea>
 8014e54:	2010      	movs	r0, #16
 8014e56:	1812      	adds	r2, r2, r0
 8014e58:	6078      	str	r0, [r7, #4]
 8014e5a:	922e      	str	r2, [sp, #184]	; 0xb8
 8014e5c:	932d      	str	r3, [sp, #180]	; 0xb4
 8014e5e:	2b07      	cmp	r3, #7
 8014e60:	dd08      	ble.n	8014e74 <_svfprintf_r+0xdb4>
 8014e62:	aa2c      	add	r2, sp, #176	; 0xb0
 8014e64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e66:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014e68:	f002 fa7e 	bl	8017368 <__ssprint_r>
 8014e6c:	2800      	cmp	r0, #0
 8014e6e:	d000      	beq.n	8014e72 <_svfprintf_r+0xdb2>
 8014e70:	e34a      	b.n	8015508 <_svfprintf_r+0x1448>
 8014e72:	a92f      	add	r1, sp, #188	; 0xbc
 8014e74:	3c10      	subs	r4, #16
 8014e76:	000f      	movs	r7, r1
 8014e78:	f7ff fad8 	bl	801442c <_svfprintf_r+0x36c>
 8014e7c:	2010      	movs	r0, #16
 8014e7e:	1812      	adds	r2, r2, r0
 8014e80:	6078      	str	r0, [r7, #4]
 8014e82:	922e      	str	r2, [sp, #184]	; 0xb8
 8014e84:	932d      	str	r3, [sp, #180]	; 0xb4
 8014e86:	2b07      	cmp	r3, #7
 8014e88:	dd08      	ble.n	8014e9c <_svfprintf_r+0xddc>
 8014e8a:	aa2c      	add	r2, sp, #176	; 0xb0
 8014e8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014e90:	f002 fa6a 	bl	8017368 <__ssprint_r>
 8014e94:	2800      	cmp	r0, #0
 8014e96:	d000      	beq.n	8014e9a <_svfprintf_r+0xdda>
 8014e98:	e336      	b.n	8015508 <_svfprintf_r+0x1448>
 8014e9a:	a92f      	add	r1, sp, #188	; 0xbc
 8014e9c:	3c10      	subs	r4, #16
 8014e9e:	000f      	movs	r7, r1
 8014ea0:	f7ff fb24 	bl	80144ec <_svfprintf_r+0x42c>
 8014ea4:	fffffbff 	.word	0xfffffbff
 8014ea8:	00007830 	.word	0x00007830
 8014eac:	0801a5a8 	.word	0x0801a5a8
 8014eb0:	2010      	movs	r0, #16
 8014eb2:	1812      	adds	r2, r2, r0
 8014eb4:	6078      	str	r0, [r7, #4]
 8014eb6:	922e      	str	r2, [sp, #184]	; 0xb8
 8014eb8:	932d      	str	r3, [sp, #180]	; 0xb4
 8014eba:	2b07      	cmp	r3, #7
 8014ebc:	dd08      	ble.n	8014ed0 <_svfprintf_r+0xe10>
 8014ebe:	aa2c      	add	r2, sp, #176	; 0xb0
 8014ec0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ec2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014ec4:	f002 fa50 	bl	8017368 <__ssprint_r>
 8014ec8:	2800      	cmp	r0, #0
 8014eca:	d000      	beq.n	8014ece <_svfprintf_r+0xe0e>
 8014ecc:	e31c      	b.n	8015508 <_svfprintf_r+0x1448>
 8014ece:	a92f      	add	r1, sp, #188	; 0xbc
 8014ed0:	3c10      	subs	r4, #16
 8014ed2:	000f      	movs	r7, r1
 8014ed4:	f7ff fb2c 	bl	8014530 <_svfprintf_r+0x470>
 8014ed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014eda:	2b65      	cmp	r3, #101	; 0x65
 8014edc:	dc00      	bgt.n	8014ee0 <_svfprintf_r+0xe20>
 8014ede:	e259      	b.n	8015394 <_svfprintf_r+0x12d4>
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014ee6:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014ee8:	f7eb fab8 	bl	800045c <__aeabi_dcmpeq>
 8014eec:	2800      	cmp	r0, #0
 8014eee:	d07c      	beq.n	8014fea <_svfprintf_r+0xf2a>
 8014ef0:	4b81      	ldr	r3, [pc, #516]	; (80150f8 <_svfprintf_r+0x1038>)
 8014ef2:	603b      	str	r3, [r7, #0]
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	607b      	str	r3, [r7, #4]
 8014ef8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014efa:	3708      	adds	r7, #8
 8014efc:	3301      	adds	r3, #1
 8014efe:	932e      	str	r3, [sp, #184]	; 0xb8
 8014f00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014f02:	9308      	str	r3, [sp, #32]
 8014f04:	3301      	adds	r3, #1
 8014f06:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f08:	2b07      	cmp	r3, #7
 8014f0a:	dd08      	ble.n	8014f1e <_svfprintf_r+0xe5e>
 8014f0c:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f12:	f002 fa29 	bl	8017368 <__ssprint_r>
 8014f16:	2800      	cmp	r0, #0
 8014f18:	d000      	beq.n	8014f1c <_svfprintf_r+0xe5c>
 8014f1a:	e2f5      	b.n	8015508 <_svfprintf_r+0x1448>
 8014f1c:	af2f      	add	r7, sp, #188	; 0xbc
 8014f1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014f20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014f22:	4293      	cmp	r3, r2
 8014f24:	db01      	blt.n	8014f2a <_svfprintf_r+0xe6a>
 8014f26:	07f3      	lsls	r3, r6, #31
 8014f28:	d51d      	bpl.n	8014f66 <_svfprintf_r+0xea6>
 8014f2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014f2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014f2e:	4694      	mov	ip, r2
 8014f30:	603b      	str	r3, [r7, #0]
 8014f32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014f34:	607b      	str	r3, [r7, #4]
 8014f36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014f38:	3708      	adds	r7, #8
 8014f3a:	4463      	add	r3, ip
 8014f3c:	932e      	str	r3, [sp, #184]	; 0xb8
 8014f3e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014f40:	9308      	str	r3, [sp, #32]
 8014f42:	3301      	adds	r3, #1
 8014f44:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f46:	2b07      	cmp	r3, #7
 8014f48:	dd08      	ble.n	8014f5c <_svfprintf_r+0xe9c>
 8014f4a:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f50:	f002 fa0a 	bl	8017368 <__ssprint_r>
 8014f54:	2800      	cmp	r0, #0
 8014f56:	d000      	beq.n	8014f5a <_svfprintf_r+0xe9a>
 8014f58:	e2d6      	b.n	8015508 <_svfprintf_r+0x1448>
 8014f5a:	af2f      	add	r7, sp, #188	; 0xbc
 8014f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f5e:	2510      	movs	r5, #16
 8014f60:	1e5c      	subs	r4, r3, #1
 8014f62:	2c00      	cmp	r4, #0
 8014f64:	dc2f      	bgt.n	8014fc6 <_svfprintf_r+0xf06>
 8014f66:	0773      	lsls	r3, r6, #29
 8014f68:	d500      	bpl.n	8014f6c <_svfprintf_r+0xeac>
 8014f6a:	e2af      	b.n	80154cc <_svfprintf_r+0x140c>
 8014f6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014f6e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014f70:	4293      	cmp	r3, r2
 8014f72:	da00      	bge.n	8014f76 <_svfprintf_r+0xeb6>
 8014f74:	0013      	movs	r3, r2
 8014f76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014f78:	18d3      	adds	r3, r2, r3
 8014f7a:	9315      	str	r3, [sp, #84]	; 0x54
 8014f7c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014f7e:	9308      	str	r3, [sp, #32]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d007      	beq.n	8014f94 <_svfprintf_r+0xed4>
 8014f84:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f8a:	f002 f9ed 	bl	8017368 <__ssprint_r>
 8014f8e:	2800      	cmp	r0, #0
 8014f90:	d000      	beq.n	8014f94 <_svfprintf_r+0xed4>
 8014f92:	e2b9      	b.n	8015508 <_svfprintf_r+0x1448>
 8014f94:	2300      	movs	r3, #0
 8014f96:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d000      	beq.n	8014fa0 <_svfprintf_r+0xee0>
 8014f9e:	e2cf      	b.n	8015540 <_svfprintf_r+0x1480>
 8014fa0:	af2f      	add	r7, sp, #188	; 0xbc
 8014fa2:	e5d6      	b.n	8014b52 <_svfprintf_r+0xa92>
 8014fa4:	3210      	adds	r2, #16
 8014fa6:	607d      	str	r5, [r7, #4]
 8014fa8:	922e      	str	r2, [sp, #184]	; 0xb8
 8014faa:	932d      	str	r3, [sp, #180]	; 0xb4
 8014fac:	2b07      	cmp	r3, #7
 8014fae:	dd08      	ble.n	8014fc2 <_svfprintf_r+0xf02>
 8014fb0:	aa2c      	add	r2, sp, #176	; 0xb0
 8014fb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014fb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014fb6:	f002 f9d7 	bl	8017368 <__ssprint_r>
 8014fba:	2800      	cmp	r0, #0
 8014fbc:	d000      	beq.n	8014fc0 <_svfprintf_r+0xf00>
 8014fbe:	e2a3      	b.n	8015508 <_svfprintf_r+0x1448>
 8014fc0:	a92f      	add	r1, sp, #188	; 0xbc
 8014fc2:	000f      	movs	r7, r1
 8014fc4:	3c10      	subs	r4, #16
 8014fc6:	0039      	movs	r1, r7
 8014fc8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014fca:	484c      	ldr	r0, [pc, #304]	; (80150fc <_svfprintf_r+0x103c>)
 8014fcc:	9308      	str	r3, [sp, #32]
 8014fce:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014fd0:	3301      	adds	r3, #1
 8014fd2:	3108      	adds	r1, #8
 8014fd4:	6038      	str	r0, [r7, #0]
 8014fd6:	2c10      	cmp	r4, #16
 8014fd8:	dce4      	bgt.n	8014fa4 <_svfprintf_r+0xee4>
 8014fda:	607c      	str	r4, [r7, #4]
 8014fdc:	18a4      	adds	r4, r4, r2
 8014fde:	942e      	str	r4, [sp, #184]	; 0xb8
 8014fe0:	932d      	str	r3, [sp, #180]	; 0xb4
 8014fe2:	000f      	movs	r7, r1
 8014fe4:	2b07      	cmp	r3, #7
 8014fe6:	ddbe      	ble.n	8014f66 <_svfprintf_r+0xea6>
 8014fe8:	e06a      	b.n	80150c0 <_svfprintf_r+0x1000>
 8014fea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	dd00      	ble.n	8014ff2 <_svfprintf_r+0xf32>
 8014ff0:	e086      	b.n	8015100 <_svfprintf_r+0x1040>
 8014ff2:	4b41      	ldr	r3, [pc, #260]	; (80150f8 <_svfprintf_r+0x1038>)
 8014ff4:	603b      	str	r3, [r7, #0]
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	607b      	str	r3, [r7, #4]
 8014ffa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014ffc:	3708      	adds	r7, #8
 8014ffe:	3301      	adds	r3, #1
 8015000:	932e      	str	r3, [sp, #184]	; 0xb8
 8015002:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015004:	9308      	str	r3, [sp, #32]
 8015006:	3301      	adds	r3, #1
 8015008:	932d      	str	r3, [sp, #180]	; 0xb4
 801500a:	2b07      	cmp	r3, #7
 801500c:	dd08      	ble.n	8015020 <_svfprintf_r+0xf60>
 801500e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015010:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015012:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015014:	f002 f9a8 	bl	8017368 <__ssprint_r>
 8015018:	2800      	cmp	r0, #0
 801501a:	d000      	beq.n	801501e <_svfprintf_r+0xf5e>
 801501c:	e274      	b.n	8015508 <_svfprintf_r+0x1448>
 801501e:	af2f      	add	r7, sp, #188	; 0xbc
 8015020:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015022:	2b00      	cmp	r3, #0
 8015024:	d104      	bne.n	8015030 <_svfprintf_r+0xf70>
 8015026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015028:	2b00      	cmp	r3, #0
 801502a:	d101      	bne.n	8015030 <_svfprintf_r+0xf70>
 801502c:	07f3      	lsls	r3, r6, #31
 801502e:	d59a      	bpl.n	8014f66 <_svfprintf_r+0xea6>
 8015030:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015032:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015034:	4694      	mov	ip, r2
 8015036:	603b      	str	r3, [r7, #0]
 8015038:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801503a:	607b      	str	r3, [r7, #4]
 801503c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801503e:	3708      	adds	r7, #8
 8015040:	4463      	add	r3, ip
 8015042:	932e      	str	r3, [sp, #184]	; 0xb8
 8015044:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015046:	9308      	str	r3, [sp, #32]
 8015048:	3301      	adds	r3, #1
 801504a:	932d      	str	r3, [sp, #180]	; 0xb4
 801504c:	2b07      	cmp	r3, #7
 801504e:	dd08      	ble.n	8015062 <_svfprintf_r+0xfa2>
 8015050:	aa2c      	add	r2, sp, #176	; 0xb0
 8015052:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015054:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015056:	f002 f987 	bl	8017368 <__ssprint_r>
 801505a:	2800      	cmp	r0, #0
 801505c:	d000      	beq.n	8015060 <_svfprintf_r+0xfa0>
 801505e:	e253      	b.n	8015508 <_svfprintf_r+0x1448>
 8015060:	af2f      	add	r7, sp, #188	; 0xbc
 8015062:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8015064:	2c00      	cmp	r4, #0
 8015066:	da1a      	bge.n	801509e <_svfprintf_r+0xfde>
 8015068:	0039      	movs	r1, r7
 801506a:	2510      	movs	r5, #16
 801506c:	4264      	negs	r4, r4
 801506e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015070:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8015072:	9308      	str	r3, [sp, #32]
 8015074:	1c5a      	adds	r2, r3, #1
 8015076:	4b21      	ldr	r3, [pc, #132]	; (80150fc <_svfprintf_r+0x103c>)
 8015078:	3708      	adds	r7, #8
 801507a:	600b      	str	r3, [r1, #0]
 801507c:	2c10      	cmp	r4, #16
 801507e:	dc29      	bgt.n	80150d4 <_svfprintf_r+0x1014>
 8015080:	604c      	str	r4, [r1, #4]
 8015082:	1824      	adds	r4, r4, r0
 8015084:	942e      	str	r4, [sp, #184]	; 0xb8
 8015086:	922d      	str	r2, [sp, #180]	; 0xb4
 8015088:	2a07      	cmp	r2, #7
 801508a:	dd08      	ble.n	801509e <_svfprintf_r+0xfde>
 801508c:	aa2c      	add	r2, sp, #176	; 0xb0
 801508e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015090:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015092:	f002 f969 	bl	8017368 <__ssprint_r>
 8015096:	2800      	cmp	r0, #0
 8015098:	d000      	beq.n	801509c <_svfprintf_r+0xfdc>
 801509a:	e235      	b.n	8015508 <_svfprintf_r+0x1448>
 801509c:	af2f      	add	r7, sp, #188	; 0xbc
 801509e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80150a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150a2:	468c      	mov	ip, r1
 80150a4:	603b      	str	r3, [r7, #0]
 80150a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80150a8:	607b      	str	r3, [r7, #4]
 80150aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80150ac:	4463      	add	r3, ip
 80150ae:	932e      	str	r3, [sp, #184]	; 0xb8
 80150b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150b2:	1c5a      	adds	r2, r3, #1
 80150b4:	9308      	str	r3, [sp, #32]
 80150b6:	922d      	str	r2, [sp, #180]	; 0xb4
 80150b8:	2a07      	cmp	r2, #7
 80150ba:	dc01      	bgt.n	80150c0 <_svfprintf_r+0x1000>
 80150bc:	f7ff fa6c 	bl	8014598 <_svfprintf_r+0x4d8>
 80150c0:	aa2c      	add	r2, sp, #176	; 0xb0
 80150c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150c6:	f002 f94f 	bl	8017368 <__ssprint_r>
 80150ca:	2800      	cmp	r0, #0
 80150cc:	d000      	beq.n	80150d0 <_svfprintf_r+0x1010>
 80150ce:	e21b      	b.n	8015508 <_svfprintf_r+0x1448>
 80150d0:	af2f      	add	r7, sp, #188	; 0xbc
 80150d2:	e748      	b.n	8014f66 <_svfprintf_r+0xea6>
 80150d4:	3010      	adds	r0, #16
 80150d6:	604d      	str	r5, [r1, #4]
 80150d8:	902e      	str	r0, [sp, #184]	; 0xb8
 80150da:	922d      	str	r2, [sp, #180]	; 0xb4
 80150dc:	2a07      	cmp	r2, #7
 80150de:	dd08      	ble.n	80150f2 <_svfprintf_r+0x1032>
 80150e0:	aa2c      	add	r2, sp, #176	; 0xb0
 80150e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150e6:	f002 f93f 	bl	8017368 <__ssprint_r>
 80150ea:	2800      	cmp	r0, #0
 80150ec:	d000      	beq.n	80150f0 <_svfprintf_r+0x1030>
 80150ee:	e20b      	b.n	8015508 <_svfprintf_r+0x1448>
 80150f0:	af2f      	add	r7, sp, #188	; 0xbc
 80150f2:	3c10      	subs	r4, #16
 80150f4:	0039      	movs	r1, r7
 80150f6:	e7ba      	b.n	801506e <_svfprintf_r+0xfae>
 80150f8:	0801a5ca 	.word	0x0801a5ca
 80150fc:	0801a5dc 	.word	0x0801a5dc
 8015100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015102:	002c      	movs	r4, r5
 8015104:	429d      	cmp	r5, r3
 8015106:	dd00      	ble.n	801510a <_svfprintf_r+0x104a>
 8015108:	001c      	movs	r4, r3
 801510a:	2c00      	cmp	r4, #0
 801510c:	dd15      	ble.n	801513a <_svfprintf_r+0x107a>
 801510e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015110:	607c      	str	r4, [r7, #4]
 8015112:	603b      	str	r3, [r7, #0]
 8015114:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015116:	3708      	adds	r7, #8
 8015118:	18e3      	adds	r3, r4, r3
 801511a:	932e      	str	r3, [sp, #184]	; 0xb8
 801511c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801511e:	9308      	str	r3, [sp, #32]
 8015120:	3301      	adds	r3, #1
 8015122:	932d      	str	r3, [sp, #180]	; 0xb4
 8015124:	2b07      	cmp	r3, #7
 8015126:	dd08      	ble.n	801513a <_svfprintf_r+0x107a>
 8015128:	aa2c      	add	r2, sp, #176	; 0xb0
 801512a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801512c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801512e:	f002 f91b 	bl	8017368 <__ssprint_r>
 8015132:	2800      	cmp	r0, #0
 8015134:	d000      	beq.n	8015138 <_svfprintf_r+0x1078>
 8015136:	e1e7      	b.n	8015508 <_svfprintf_r+0x1448>
 8015138:	af2f      	add	r7, sp, #188	; 0xbc
 801513a:	43e3      	mvns	r3, r4
 801513c:	17db      	asrs	r3, r3, #31
 801513e:	401c      	ands	r4, r3
 8015140:	1b2c      	subs	r4, r5, r4
 8015142:	2c00      	cmp	r4, #0
 8015144:	dd1a      	ble.n	801517c <_svfprintf_r+0x10bc>
 8015146:	0039      	movs	r1, r7
 8015148:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801514a:	48d4      	ldr	r0, [pc, #848]	; (801549c <_svfprintf_r+0x13dc>)
 801514c:	9308      	str	r3, [sp, #32]
 801514e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015150:	3301      	adds	r3, #1
 8015152:	3108      	adds	r1, #8
 8015154:	6038      	str	r0, [r7, #0]
 8015156:	2c10      	cmp	r4, #16
 8015158:	dd00      	ble.n	801515c <_svfprintf_r+0x109c>
 801515a:	e089      	b.n	8015270 <_svfprintf_r+0x11b0>
 801515c:	607c      	str	r4, [r7, #4]
 801515e:	18a4      	adds	r4, r4, r2
 8015160:	942e      	str	r4, [sp, #184]	; 0xb8
 8015162:	932d      	str	r3, [sp, #180]	; 0xb4
 8015164:	000f      	movs	r7, r1
 8015166:	2b07      	cmp	r3, #7
 8015168:	dd08      	ble.n	801517c <_svfprintf_r+0x10bc>
 801516a:	aa2c      	add	r2, sp, #176	; 0xb0
 801516c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801516e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015170:	f002 f8fa 	bl	8017368 <__ssprint_r>
 8015174:	2800      	cmp	r0, #0
 8015176:	d000      	beq.n	801517a <_svfprintf_r+0x10ba>
 8015178:	e1c6      	b.n	8015508 <_svfprintf_r+0x1448>
 801517a:	af2f      	add	r7, sp, #188	; 0xbc
 801517c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801517e:	195d      	adds	r5, r3, r5
 8015180:	0573      	lsls	r3, r6, #21
 8015182:	d50d      	bpl.n	80151a0 <_svfprintf_r+0x10e0>
 8015184:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015186:	2b00      	cmp	r3, #0
 8015188:	d000      	beq.n	801518c <_svfprintf_r+0x10cc>
 801518a:	e084      	b.n	8015296 <_svfprintf_r+0x11d6>
 801518c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801518e:	2b00      	cmp	r3, #0
 8015190:	d000      	beq.n	8015194 <_svfprintf_r+0x10d4>
 8015192:	e083      	b.n	801529c <_svfprintf_r+0x11dc>
 8015194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015196:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015198:	189b      	adds	r3, r3, r2
 801519a:	429d      	cmp	r5, r3
 801519c:	d900      	bls.n	80151a0 <_svfprintf_r+0x10e0>
 801519e:	001d      	movs	r5, r3
 80151a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80151a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80151a4:	4293      	cmp	r3, r2
 80151a6:	db01      	blt.n	80151ac <_svfprintf_r+0x10ec>
 80151a8:	07f3      	lsls	r3, r6, #31
 80151aa:	d518      	bpl.n	80151de <_svfprintf_r+0x111e>
 80151ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80151ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80151b0:	4694      	mov	ip, r2
 80151b2:	603b      	str	r3, [r7, #0]
 80151b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80151b6:	607b      	str	r3, [r7, #4]
 80151b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80151ba:	3708      	adds	r7, #8
 80151bc:	4463      	add	r3, ip
 80151be:	932e      	str	r3, [sp, #184]	; 0xb8
 80151c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80151c2:	9308      	str	r3, [sp, #32]
 80151c4:	3301      	adds	r3, #1
 80151c6:	932d      	str	r3, [sp, #180]	; 0xb4
 80151c8:	2b07      	cmp	r3, #7
 80151ca:	dd08      	ble.n	80151de <_svfprintf_r+0x111e>
 80151cc:	aa2c      	add	r2, sp, #176	; 0xb0
 80151ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151d2:	f002 f8c9 	bl	8017368 <__ssprint_r>
 80151d6:	2800      	cmp	r0, #0
 80151d8:	d000      	beq.n	80151dc <_svfprintf_r+0x111c>
 80151da:	e195      	b.n	8015508 <_svfprintf_r+0x1448>
 80151dc:	af2f      	add	r7, sp, #188	; 0xbc
 80151de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80151e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151e2:	4694      	mov	ip, r2
 80151e4:	9926      	ldr	r1, [sp, #152]	; 0x98
 80151e6:	4463      	add	r3, ip
 80151e8:	1b5b      	subs	r3, r3, r5
 80151ea:	1a54      	subs	r4, r2, r1
 80151ec:	429c      	cmp	r4, r3
 80151ee:	dd00      	ble.n	80151f2 <_svfprintf_r+0x1132>
 80151f0:	001c      	movs	r4, r3
 80151f2:	2c00      	cmp	r4, #0
 80151f4:	dd14      	ble.n	8015220 <_svfprintf_r+0x1160>
 80151f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80151f8:	603d      	str	r5, [r7, #0]
 80151fa:	18e3      	adds	r3, r4, r3
 80151fc:	932e      	str	r3, [sp, #184]	; 0xb8
 80151fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015200:	607c      	str	r4, [r7, #4]
 8015202:	9308      	str	r3, [sp, #32]
 8015204:	3301      	adds	r3, #1
 8015206:	932d      	str	r3, [sp, #180]	; 0xb4
 8015208:	3708      	adds	r7, #8
 801520a:	2b07      	cmp	r3, #7
 801520c:	dd08      	ble.n	8015220 <_svfprintf_r+0x1160>
 801520e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015210:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015212:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015214:	f002 f8a8 	bl	8017368 <__ssprint_r>
 8015218:	2800      	cmp	r0, #0
 801521a:	d000      	beq.n	801521e <_svfprintf_r+0x115e>
 801521c:	e174      	b.n	8015508 <_svfprintf_r+0x1448>
 801521e:	af2f      	add	r7, sp, #188	; 0xbc
 8015220:	43e3      	mvns	r3, r4
 8015222:	17db      	asrs	r3, r3, #31
 8015224:	401c      	ands	r4, r3
 8015226:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801522a:	2510      	movs	r5, #16
 801522c:	1a9b      	subs	r3, r3, r2
 801522e:	1b1c      	subs	r4, r3, r4
 8015230:	2c00      	cmp	r4, #0
 8015232:	dc00      	bgt.n	8015236 <_svfprintf_r+0x1176>
 8015234:	e697      	b.n	8014f66 <_svfprintf_r+0xea6>
 8015236:	0039      	movs	r1, r7
 8015238:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801523a:	4898      	ldr	r0, [pc, #608]	; (801549c <_svfprintf_r+0x13dc>)
 801523c:	9308      	str	r3, [sp, #32]
 801523e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015240:	3301      	adds	r3, #1
 8015242:	3108      	adds	r1, #8
 8015244:	6038      	str	r0, [r7, #0]
 8015246:	2c10      	cmp	r4, #16
 8015248:	dc00      	bgt.n	801524c <_svfprintf_r+0x118c>
 801524a:	e6c6      	b.n	8014fda <_svfprintf_r+0xf1a>
 801524c:	3210      	adds	r2, #16
 801524e:	607d      	str	r5, [r7, #4]
 8015250:	922e      	str	r2, [sp, #184]	; 0xb8
 8015252:	932d      	str	r3, [sp, #180]	; 0xb4
 8015254:	2b07      	cmp	r3, #7
 8015256:	dd08      	ble.n	801526a <_svfprintf_r+0x11aa>
 8015258:	aa2c      	add	r2, sp, #176	; 0xb0
 801525a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801525c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801525e:	f002 f883 	bl	8017368 <__ssprint_r>
 8015262:	2800      	cmp	r0, #0
 8015264:	d000      	beq.n	8015268 <_svfprintf_r+0x11a8>
 8015266:	e14f      	b.n	8015508 <_svfprintf_r+0x1448>
 8015268:	a92f      	add	r1, sp, #188	; 0xbc
 801526a:	3c10      	subs	r4, #16
 801526c:	000f      	movs	r7, r1
 801526e:	e7e2      	b.n	8015236 <_svfprintf_r+0x1176>
 8015270:	2010      	movs	r0, #16
 8015272:	1812      	adds	r2, r2, r0
 8015274:	6078      	str	r0, [r7, #4]
 8015276:	922e      	str	r2, [sp, #184]	; 0xb8
 8015278:	932d      	str	r3, [sp, #180]	; 0xb4
 801527a:	2b07      	cmp	r3, #7
 801527c:	dd08      	ble.n	8015290 <_svfprintf_r+0x11d0>
 801527e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015280:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015282:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015284:	f002 f870 	bl	8017368 <__ssprint_r>
 8015288:	2800      	cmp	r0, #0
 801528a:	d000      	beq.n	801528e <_svfprintf_r+0x11ce>
 801528c:	e13c      	b.n	8015508 <_svfprintf_r+0x1448>
 801528e:	a92f      	add	r1, sp, #188	; 0xbc
 8015290:	3c10      	subs	r4, #16
 8015292:	000f      	movs	r7, r1
 8015294:	e757      	b.n	8015146 <_svfprintf_r+0x1086>
 8015296:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015298:	2b00      	cmp	r3, #0
 801529a:	d061      	beq.n	8015360 <_svfprintf_r+0x12a0>
 801529c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801529e:	3b01      	subs	r3, #1
 80152a0:	9310      	str	r3, [sp, #64]	; 0x40
 80152a2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80152a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80152a6:	4694      	mov	ip, r2
 80152a8:	603b      	str	r3, [r7, #0]
 80152aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80152ac:	607b      	str	r3, [r7, #4]
 80152ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80152b0:	3708      	adds	r7, #8
 80152b2:	4463      	add	r3, ip
 80152b4:	932e      	str	r3, [sp, #184]	; 0xb8
 80152b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80152b8:	9308      	str	r3, [sp, #32]
 80152ba:	3301      	adds	r3, #1
 80152bc:	932d      	str	r3, [sp, #180]	; 0xb4
 80152be:	2b07      	cmp	r3, #7
 80152c0:	dd08      	ble.n	80152d4 <_svfprintf_r+0x1214>
 80152c2:	aa2c      	add	r2, sp, #176	; 0xb0
 80152c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152c8:	f002 f84e 	bl	8017368 <__ssprint_r>
 80152cc:	2800      	cmp	r0, #0
 80152ce:	d000      	beq.n	80152d2 <_svfprintf_r+0x1212>
 80152d0:	e11a      	b.n	8015508 <_svfprintf_r+0x1448>
 80152d2:	af2f      	add	r7, sp, #188	; 0xbc
 80152d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80152d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152d8:	189b      	adds	r3, r3, r2
 80152da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80152dc:	1b5b      	subs	r3, r3, r5
 80152de:	7814      	ldrb	r4, [r2, #0]
 80152e0:	429c      	cmp	r4, r3
 80152e2:	dd00      	ble.n	80152e6 <_svfprintf_r+0x1226>
 80152e4:	001c      	movs	r4, r3
 80152e6:	2c00      	cmp	r4, #0
 80152e8:	dd14      	ble.n	8015314 <_svfprintf_r+0x1254>
 80152ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80152ec:	603d      	str	r5, [r7, #0]
 80152ee:	18e3      	adds	r3, r4, r3
 80152f0:	932e      	str	r3, [sp, #184]	; 0xb8
 80152f2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80152f4:	607c      	str	r4, [r7, #4]
 80152f6:	9308      	str	r3, [sp, #32]
 80152f8:	3301      	adds	r3, #1
 80152fa:	932d      	str	r3, [sp, #180]	; 0xb4
 80152fc:	3708      	adds	r7, #8
 80152fe:	2b07      	cmp	r3, #7
 8015300:	dd08      	ble.n	8015314 <_svfprintf_r+0x1254>
 8015302:	aa2c      	add	r2, sp, #176	; 0xb0
 8015304:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015306:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015308:	f002 f82e 	bl	8017368 <__ssprint_r>
 801530c:	2800      	cmp	r0, #0
 801530e:	d000      	beq.n	8015312 <_svfprintf_r+0x1252>
 8015310:	e0fa      	b.n	8015508 <_svfprintf_r+0x1448>
 8015312:	af2f      	add	r7, sp, #188	; 0xbc
 8015314:	43e3      	mvns	r3, r4
 8015316:	17db      	asrs	r3, r3, #31
 8015318:	401c      	ands	r4, r3
 801531a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801531c:	781b      	ldrb	r3, [r3, #0]
 801531e:	1b1c      	subs	r4, r3, r4
 8015320:	2c00      	cmp	r4, #0
 8015322:	dd19      	ble.n	8015358 <_svfprintf_r+0x1298>
 8015324:	0039      	movs	r1, r7
 8015326:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015328:	485c      	ldr	r0, [pc, #368]	; (801549c <_svfprintf_r+0x13dc>)
 801532a:	9308      	str	r3, [sp, #32]
 801532c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801532e:	3301      	adds	r3, #1
 8015330:	3108      	adds	r1, #8
 8015332:	6038      	str	r0, [r7, #0]
 8015334:	2c10      	cmp	r4, #16
 8015336:	dc1a      	bgt.n	801536e <_svfprintf_r+0x12ae>
 8015338:	607c      	str	r4, [r7, #4]
 801533a:	18a4      	adds	r4, r4, r2
 801533c:	942e      	str	r4, [sp, #184]	; 0xb8
 801533e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015340:	000f      	movs	r7, r1
 8015342:	2b07      	cmp	r3, #7
 8015344:	dd08      	ble.n	8015358 <_svfprintf_r+0x1298>
 8015346:	aa2c      	add	r2, sp, #176	; 0xb0
 8015348:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801534a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801534c:	f002 f80c 	bl	8017368 <__ssprint_r>
 8015350:	2800      	cmp	r0, #0
 8015352:	d000      	beq.n	8015356 <_svfprintf_r+0x1296>
 8015354:	e0d8      	b.n	8015508 <_svfprintf_r+0x1448>
 8015356:	af2f      	add	r7, sp, #188	; 0xbc
 8015358:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801535a:	781b      	ldrb	r3, [r3, #0]
 801535c:	18ed      	adds	r5, r5, r3
 801535e:	e711      	b.n	8015184 <_svfprintf_r+0x10c4>
 8015360:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015362:	3b01      	subs	r3, #1
 8015364:	9313      	str	r3, [sp, #76]	; 0x4c
 8015366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015368:	3b01      	subs	r3, #1
 801536a:	930f      	str	r3, [sp, #60]	; 0x3c
 801536c:	e799      	b.n	80152a2 <_svfprintf_r+0x11e2>
 801536e:	2010      	movs	r0, #16
 8015370:	1812      	adds	r2, r2, r0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	922e      	str	r2, [sp, #184]	; 0xb8
 8015376:	932d      	str	r3, [sp, #180]	; 0xb4
 8015378:	2b07      	cmp	r3, #7
 801537a:	dd08      	ble.n	801538e <_svfprintf_r+0x12ce>
 801537c:	aa2c      	add	r2, sp, #176	; 0xb0
 801537e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015380:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015382:	f001 fff1 	bl	8017368 <__ssprint_r>
 8015386:	2800      	cmp	r0, #0
 8015388:	d000      	beq.n	801538c <_svfprintf_r+0x12cc>
 801538a:	e0bd      	b.n	8015508 <_svfprintf_r+0x1448>
 801538c:	a92f      	add	r1, sp, #188	; 0xbc
 801538e:	3c10      	subs	r4, #16
 8015390:	000f      	movs	r7, r1
 8015392:	e7c7      	b.n	8015324 <_svfprintf_r+0x1264>
 8015394:	003c      	movs	r4, r7
 8015396:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015398:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801539a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801539c:	9308      	str	r3, [sp, #32]
 801539e:	3101      	adds	r1, #1
 80153a0:	3301      	adds	r3, #1
 80153a2:	3408      	adds	r4, #8
 80153a4:	2a01      	cmp	r2, #1
 80153a6:	dc03      	bgt.n	80153b0 <_svfprintf_r+0x12f0>
 80153a8:	2201      	movs	r2, #1
 80153aa:	4216      	tst	r6, r2
 80153ac:	d100      	bne.n	80153b0 <_svfprintf_r+0x12f0>
 80153ae:	e088      	b.n	80154c2 <_svfprintf_r+0x1402>
 80153b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80153b2:	912e      	str	r1, [sp, #184]	; 0xb8
 80153b4:	603a      	str	r2, [r7, #0]
 80153b6:	2201      	movs	r2, #1
 80153b8:	932d      	str	r3, [sp, #180]	; 0xb4
 80153ba:	607a      	str	r2, [r7, #4]
 80153bc:	2b07      	cmp	r3, #7
 80153be:	dd08      	ble.n	80153d2 <_svfprintf_r+0x1312>
 80153c0:	aa2c      	add	r2, sp, #176	; 0xb0
 80153c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153c6:	f001 ffcf 	bl	8017368 <__ssprint_r>
 80153ca:	2800      	cmp	r0, #0
 80153cc:	d000      	beq.n	80153d0 <_svfprintf_r+0x1310>
 80153ce:	e09b      	b.n	8015508 <_svfprintf_r+0x1448>
 80153d0:	ac2f      	add	r4, sp, #188	; 0xbc
 80153d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80153d6:	4694      	mov	ip, r2
 80153d8:	6023      	str	r3, [r4, #0]
 80153da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80153dc:	6063      	str	r3, [r4, #4]
 80153de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80153e0:	3408      	adds	r4, #8
 80153e2:	4463      	add	r3, ip
 80153e4:	932e      	str	r3, [sp, #184]	; 0xb8
 80153e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153e8:	9308      	str	r3, [sp, #32]
 80153ea:	3301      	adds	r3, #1
 80153ec:	932d      	str	r3, [sp, #180]	; 0xb4
 80153ee:	2b07      	cmp	r3, #7
 80153f0:	dd08      	ble.n	8015404 <_svfprintf_r+0x1344>
 80153f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80153f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153f8:	f001 ffb6 	bl	8017368 <__ssprint_r>
 80153fc:	2800      	cmp	r0, #0
 80153fe:	d000      	beq.n	8015402 <_svfprintf_r+0x1342>
 8015400:	e082      	b.n	8015508 <_svfprintf_r+0x1448>
 8015402:	ac2f      	add	r4, sp, #188	; 0xbc
 8015404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015406:	2200      	movs	r2, #0
 8015408:	1e5d      	subs	r5, r3, #1
 801540a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801540c:	2300      	movs	r3, #0
 801540e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015410:	f7eb f824 	bl	800045c <__aeabi_dcmpeq>
 8015414:	2800      	cmp	r0, #0
 8015416:	d12c      	bne.n	8015472 <_svfprintf_r+0x13b2>
 8015418:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801541a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801541c:	9308      	str	r3, [sp, #32]
 801541e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015420:	6065      	str	r5, [r4, #4]
 8015422:	1c5a      	adds	r2, r3, #1
 8015424:	930e      	str	r3, [sp, #56]	; 0x38
 8015426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015428:	922d      	str	r2, [sp, #180]	; 0xb4
 801542a:	3301      	adds	r3, #1
 801542c:	6023      	str	r3, [r4, #0]
 801542e:	9b08      	ldr	r3, [sp, #32]
 8015430:	3408      	adds	r4, #8
 8015432:	3b01      	subs	r3, #1
 8015434:	185b      	adds	r3, r3, r1
 8015436:	932e      	str	r3, [sp, #184]	; 0xb8
 8015438:	2a07      	cmp	r2, #7
 801543a:	dd07      	ble.n	801544c <_svfprintf_r+0x138c>
 801543c:	aa2c      	add	r2, sp, #176	; 0xb0
 801543e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015440:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015442:	f001 ff91 	bl	8017368 <__ssprint_r>
 8015446:	2800      	cmp	r0, #0
 8015448:	d15e      	bne.n	8015508 <_svfprintf_r+0x1448>
 801544a:	ac2f      	add	r4, sp, #188	; 0xbc
 801544c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801544e:	ab28      	add	r3, sp, #160	; 0xa0
 8015450:	4694      	mov	ip, r2
 8015452:	6023      	str	r3, [r4, #0]
 8015454:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015456:	6063      	str	r3, [r4, #4]
 8015458:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801545a:	4463      	add	r3, ip
 801545c:	932e      	str	r3, [sp, #184]	; 0xb8
 801545e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015460:	9308      	str	r3, [sp, #32]
 8015462:	3301      	adds	r3, #1
 8015464:	932d      	str	r3, [sp, #180]	; 0xb4
 8015466:	2b07      	cmp	r3, #7
 8015468:	dd00      	ble.n	801546c <_svfprintf_r+0x13ac>
 801546a:	e629      	b.n	80150c0 <_svfprintf_r+0x1000>
 801546c:	3408      	adds	r4, #8
 801546e:	0027      	movs	r7, r4
 8015470:	e579      	b.n	8014f66 <_svfprintf_r+0xea6>
 8015472:	2710      	movs	r7, #16
 8015474:	2d00      	cmp	r5, #0
 8015476:	dde9      	ble.n	801544c <_svfprintf_r+0x138c>
 8015478:	0021      	movs	r1, r4
 801547a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801547c:	4807      	ldr	r0, [pc, #28]	; (801549c <_svfprintf_r+0x13dc>)
 801547e:	9308      	str	r3, [sp, #32]
 8015480:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015482:	3301      	adds	r3, #1
 8015484:	3108      	adds	r1, #8
 8015486:	6020      	str	r0, [r4, #0]
 8015488:	2d10      	cmp	r5, #16
 801548a:	dc09      	bgt.n	80154a0 <_svfprintf_r+0x13e0>
 801548c:	6065      	str	r5, [r4, #4]
 801548e:	000c      	movs	r4, r1
 8015490:	18ad      	adds	r5, r5, r2
 8015492:	952e      	str	r5, [sp, #184]	; 0xb8
 8015494:	932d      	str	r3, [sp, #180]	; 0xb4
 8015496:	2b07      	cmp	r3, #7
 8015498:	ddd8      	ble.n	801544c <_svfprintf_r+0x138c>
 801549a:	e7cf      	b.n	801543c <_svfprintf_r+0x137c>
 801549c:	0801a5dc 	.word	0x0801a5dc
 80154a0:	3210      	adds	r2, #16
 80154a2:	6067      	str	r7, [r4, #4]
 80154a4:	922e      	str	r2, [sp, #184]	; 0xb8
 80154a6:	932d      	str	r3, [sp, #180]	; 0xb4
 80154a8:	2b07      	cmp	r3, #7
 80154aa:	dd07      	ble.n	80154bc <_svfprintf_r+0x13fc>
 80154ac:	aa2c      	add	r2, sp, #176	; 0xb0
 80154ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154b2:	f001 ff59 	bl	8017368 <__ssprint_r>
 80154b6:	2800      	cmp	r0, #0
 80154b8:	d126      	bne.n	8015508 <_svfprintf_r+0x1448>
 80154ba:	a92f      	add	r1, sp, #188	; 0xbc
 80154bc:	3d10      	subs	r5, #16
 80154be:	000c      	movs	r4, r1
 80154c0:	e7da      	b.n	8015478 <_svfprintf_r+0x13b8>
 80154c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80154c4:	912e      	str	r1, [sp, #184]	; 0xb8
 80154c6:	c705      	stmia	r7!, {r0, r2}
 80154c8:	932d      	str	r3, [sp, #180]	; 0xb4
 80154ca:	e7e4      	b.n	8015496 <_svfprintf_r+0x13d6>
 80154cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80154ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80154d0:	2510      	movs	r5, #16
 80154d2:	1a9c      	subs	r4, r3, r2
 80154d4:	2c00      	cmp	r4, #0
 80154d6:	dc00      	bgt.n	80154da <_svfprintf_r+0x141a>
 80154d8:	e548      	b.n	8014f6c <_svfprintf_r+0xeac>
 80154da:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80154dc:	4921      	ldr	r1, [pc, #132]	; (8015564 <_svfprintf_r+0x14a4>)
 80154de:	9308      	str	r3, [sp, #32]
 80154e0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80154e2:	3301      	adds	r3, #1
 80154e4:	6039      	str	r1, [r7, #0]
 80154e6:	2c10      	cmp	r4, #16
 80154e8:	dc19      	bgt.n	801551e <_svfprintf_r+0x145e>
 80154ea:	607c      	str	r4, [r7, #4]
 80154ec:	18a4      	adds	r4, r4, r2
 80154ee:	942e      	str	r4, [sp, #184]	; 0xb8
 80154f0:	932d      	str	r3, [sp, #180]	; 0xb4
 80154f2:	2b07      	cmp	r3, #7
 80154f4:	dc00      	bgt.n	80154f8 <_svfprintf_r+0x1438>
 80154f6:	e539      	b.n	8014f6c <_svfprintf_r+0xeac>
 80154f8:	aa2c      	add	r2, sp, #176	; 0xb0
 80154fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154fe:	f001 ff33 	bl	8017368 <__ssprint_r>
 8015502:	2800      	cmp	r0, #0
 8015504:	d100      	bne.n	8015508 <_svfprintf_r+0x1448>
 8015506:	e531      	b.n	8014f6c <_svfprintf_r+0xeac>
 8015508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801550a:	2b00      	cmp	r3, #0
 801550c:	d101      	bne.n	8015512 <_svfprintf_r+0x1452>
 801550e:	f7ff f908 	bl	8014722 <_svfprintf_r+0x662>
 8015512:	0019      	movs	r1, r3
 8015514:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015516:	f000 ff19 	bl	801634c <_free_r>
 801551a:	f7ff f902 	bl	8014722 <_svfprintf_r+0x662>
 801551e:	3210      	adds	r2, #16
 8015520:	607d      	str	r5, [r7, #4]
 8015522:	922e      	str	r2, [sp, #184]	; 0xb8
 8015524:	932d      	str	r3, [sp, #180]	; 0xb4
 8015526:	3708      	adds	r7, #8
 8015528:	2b07      	cmp	r3, #7
 801552a:	dd07      	ble.n	801553c <_svfprintf_r+0x147c>
 801552c:	aa2c      	add	r2, sp, #176	; 0xb0
 801552e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015530:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015532:	f001 ff19 	bl	8017368 <__ssprint_r>
 8015536:	2800      	cmp	r0, #0
 8015538:	d1e6      	bne.n	8015508 <_svfprintf_r+0x1448>
 801553a:	af2f      	add	r7, sp, #188	; 0xbc
 801553c:	3c10      	subs	r4, #16
 801553e:	e7cc      	b.n	80154da <_svfprintf_r+0x141a>
 8015540:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015542:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015544:	f000 ff02 	bl	801634c <_free_r>
 8015548:	e52a      	b.n	8014fa0 <_svfprintf_r+0xee0>
 801554a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801554c:	9306      	str	r3, [sp, #24]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d101      	bne.n	8015556 <_svfprintf_r+0x1496>
 8015552:	f7ff f8e6 	bl	8014722 <_svfprintf_r+0x662>
 8015556:	aa2c      	add	r2, sp, #176	; 0xb0
 8015558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801555a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801555c:	f001 ff04 	bl	8017368 <__ssprint_r>
 8015560:	f7ff f8df 	bl	8014722 <_svfprintf_r+0x662>
 8015564:	0801a5cc 	.word	0x0801a5cc

08015568 <sysconf>:
 8015568:	2380      	movs	r3, #128	; 0x80
 801556a:	b510      	push	{r4, lr}
 801556c:	015b      	lsls	r3, r3, #5
 801556e:	2808      	cmp	r0, #8
 8015570:	d004      	beq.n	801557c <sysconf+0x14>
 8015572:	f000 fe7d 	bl	8016270 <__errno>
 8015576:	2316      	movs	r3, #22
 8015578:	6003      	str	r3, [r0, #0]
 801557a:	3b17      	subs	r3, #23
 801557c:	0018      	movs	r0, r3
 801557e:	bd10      	pop	{r4, pc}

08015580 <__ascii_wctomb>:
 8015580:	1e0b      	subs	r3, r1, #0
 8015582:	d004      	beq.n	801558e <__ascii_wctomb+0xe>
 8015584:	2aff      	cmp	r2, #255	; 0xff
 8015586:	d904      	bls.n	8015592 <__ascii_wctomb+0x12>
 8015588:	238a      	movs	r3, #138	; 0x8a
 801558a:	6003      	str	r3, [r0, #0]
 801558c:	3b8b      	subs	r3, #139	; 0x8b
 801558e:	0018      	movs	r0, r3
 8015590:	4770      	bx	lr
 8015592:	700a      	strb	r2, [r1, #0]
 8015594:	2301      	movs	r3, #1
 8015596:	e7fa      	b.n	801558e <__ascii_wctomb+0xe>

08015598 <register_fini>:
 8015598:	4b03      	ldr	r3, [pc, #12]	; (80155a8 <register_fini+0x10>)
 801559a:	b510      	push	{r4, lr}
 801559c:	2b00      	cmp	r3, #0
 801559e:	d002      	beq.n	80155a6 <register_fini+0xe>
 80155a0:	4802      	ldr	r0, [pc, #8]	; (80155ac <register_fini+0x14>)
 80155a2:	f000 f805 	bl	80155b0 <atexit>
 80155a6:	bd10      	pop	{r4, pc}
 80155a8:	00000000 	.word	0x00000000
 80155ac:	0801627d 	.word	0x0801627d

080155b0 <atexit>:
 80155b0:	2300      	movs	r3, #0
 80155b2:	b510      	push	{r4, lr}
 80155b4:	0001      	movs	r1, r0
 80155b6:	001a      	movs	r2, r3
 80155b8:	0018      	movs	r0, r3
 80155ba:	f001 ff53 	bl	8017464 <__register_exitproc>
 80155be:	bd10      	pop	{r4, pc}

080155c0 <quorem>:
 80155c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155c2:	6903      	ldr	r3, [r0, #16]
 80155c4:	690c      	ldr	r4, [r1, #16]
 80155c6:	b089      	sub	sp, #36	; 0x24
 80155c8:	0007      	movs	r7, r0
 80155ca:	9105      	str	r1, [sp, #20]
 80155cc:	2600      	movs	r6, #0
 80155ce:	42a3      	cmp	r3, r4
 80155d0:	db65      	blt.n	801569e <quorem+0xde>
 80155d2:	000b      	movs	r3, r1
 80155d4:	3c01      	subs	r4, #1
 80155d6:	3314      	adds	r3, #20
 80155d8:	00a5      	lsls	r5, r4, #2
 80155da:	9303      	str	r3, [sp, #12]
 80155dc:	195b      	adds	r3, r3, r5
 80155de:	9304      	str	r3, [sp, #16]
 80155e0:	0003      	movs	r3, r0
 80155e2:	3314      	adds	r3, #20
 80155e4:	9302      	str	r3, [sp, #8]
 80155e6:	195d      	adds	r5, r3, r5
 80155e8:	9b04      	ldr	r3, [sp, #16]
 80155ea:	6828      	ldr	r0, [r5, #0]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	1c59      	adds	r1, r3, #1
 80155f0:	9301      	str	r3, [sp, #4]
 80155f2:	f7ea fdad 	bl	8000150 <__udivsi3>
 80155f6:	9001      	str	r0, [sp, #4]
 80155f8:	42b0      	cmp	r0, r6
 80155fa:	d029      	beq.n	8015650 <quorem+0x90>
 80155fc:	9b03      	ldr	r3, [sp, #12]
 80155fe:	9802      	ldr	r0, [sp, #8]
 8015600:	469c      	mov	ip, r3
 8015602:	9606      	str	r6, [sp, #24]
 8015604:	4662      	mov	r2, ip
 8015606:	ca08      	ldmia	r2!, {r3}
 8015608:	4694      	mov	ip, r2
 801560a:	9a01      	ldr	r2, [sp, #4]
 801560c:	b299      	uxth	r1, r3
 801560e:	4351      	muls	r1, r2
 8015610:	0c1b      	lsrs	r3, r3, #16
 8015612:	4353      	muls	r3, r2
 8015614:	1989      	adds	r1, r1, r6
 8015616:	0c0a      	lsrs	r2, r1, #16
 8015618:	189b      	adds	r3, r3, r2
 801561a:	9307      	str	r3, [sp, #28]
 801561c:	0c1e      	lsrs	r6, r3, #16
 801561e:	6803      	ldr	r3, [r0, #0]
 8015620:	b289      	uxth	r1, r1
 8015622:	b29a      	uxth	r2, r3
 8015624:	9b06      	ldr	r3, [sp, #24]
 8015626:	18d2      	adds	r2, r2, r3
 8015628:	6803      	ldr	r3, [r0, #0]
 801562a:	1a52      	subs	r2, r2, r1
 801562c:	0c19      	lsrs	r1, r3, #16
 801562e:	466b      	mov	r3, sp
 8015630:	8b9b      	ldrh	r3, [r3, #28]
 8015632:	1acb      	subs	r3, r1, r3
 8015634:	1411      	asrs	r1, r2, #16
 8015636:	185b      	adds	r3, r3, r1
 8015638:	1419      	asrs	r1, r3, #16
 801563a:	b292      	uxth	r2, r2
 801563c:	041b      	lsls	r3, r3, #16
 801563e:	431a      	orrs	r2, r3
 8015640:	9b04      	ldr	r3, [sp, #16]
 8015642:	9106      	str	r1, [sp, #24]
 8015644:	c004      	stmia	r0!, {r2}
 8015646:	4563      	cmp	r3, ip
 8015648:	d2dc      	bcs.n	8015604 <quorem+0x44>
 801564a:	682b      	ldr	r3, [r5, #0]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d02d      	beq.n	80156ac <quorem+0xec>
 8015650:	9905      	ldr	r1, [sp, #20]
 8015652:	0038      	movs	r0, r7
 8015654:	f001 fcb2 	bl	8016fbc <__mcmp>
 8015658:	2800      	cmp	r0, #0
 801565a:	db1f      	blt.n	801569c <quorem+0xdc>
 801565c:	2500      	movs	r5, #0
 801565e:	9b01      	ldr	r3, [sp, #4]
 8015660:	9802      	ldr	r0, [sp, #8]
 8015662:	3301      	adds	r3, #1
 8015664:	9903      	ldr	r1, [sp, #12]
 8015666:	9301      	str	r3, [sp, #4]
 8015668:	6802      	ldr	r2, [r0, #0]
 801566a:	c908      	ldmia	r1!, {r3}
 801566c:	b292      	uxth	r2, r2
 801566e:	1955      	adds	r5, r2, r5
 8015670:	b29a      	uxth	r2, r3
 8015672:	1aaa      	subs	r2, r5, r2
 8015674:	6805      	ldr	r5, [r0, #0]
 8015676:	0c1b      	lsrs	r3, r3, #16
 8015678:	0c2d      	lsrs	r5, r5, #16
 801567a:	1aeb      	subs	r3, r5, r3
 801567c:	1415      	asrs	r5, r2, #16
 801567e:	195b      	adds	r3, r3, r5
 8015680:	141d      	asrs	r5, r3, #16
 8015682:	b292      	uxth	r2, r2
 8015684:	041b      	lsls	r3, r3, #16
 8015686:	4313      	orrs	r3, r2
 8015688:	c008      	stmia	r0!, {r3}
 801568a:	9b04      	ldr	r3, [sp, #16]
 801568c:	428b      	cmp	r3, r1
 801568e:	d2eb      	bcs.n	8015668 <quorem+0xa8>
 8015690:	9a02      	ldr	r2, [sp, #8]
 8015692:	00a3      	lsls	r3, r4, #2
 8015694:	18d3      	adds	r3, r2, r3
 8015696:	681a      	ldr	r2, [r3, #0]
 8015698:	2a00      	cmp	r2, #0
 801569a:	d011      	beq.n	80156c0 <quorem+0x100>
 801569c:	9e01      	ldr	r6, [sp, #4]
 801569e:	0030      	movs	r0, r6
 80156a0:	b009      	add	sp, #36	; 0x24
 80156a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156a4:	682b      	ldr	r3, [r5, #0]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d104      	bne.n	80156b4 <quorem+0xf4>
 80156aa:	3c01      	subs	r4, #1
 80156ac:	9b02      	ldr	r3, [sp, #8]
 80156ae:	3d04      	subs	r5, #4
 80156b0:	42ab      	cmp	r3, r5
 80156b2:	d3f7      	bcc.n	80156a4 <quorem+0xe4>
 80156b4:	613c      	str	r4, [r7, #16]
 80156b6:	e7cb      	b.n	8015650 <quorem+0x90>
 80156b8:	681a      	ldr	r2, [r3, #0]
 80156ba:	2a00      	cmp	r2, #0
 80156bc:	d104      	bne.n	80156c8 <quorem+0x108>
 80156be:	3c01      	subs	r4, #1
 80156c0:	9a02      	ldr	r2, [sp, #8]
 80156c2:	3b04      	subs	r3, #4
 80156c4:	429a      	cmp	r2, r3
 80156c6:	d3f7      	bcc.n	80156b8 <quorem+0xf8>
 80156c8:	613c      	str	r4, [r7, #16]
 80156ca:	e7e7      	b.n	801569c <quorem+0xdc>

080156cc <_dtoa_r>:
 80156cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156ce:	0014      	movs	r4, r2
 80156d0:	001d      	movs	r5, r3
 80156d2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80156d4:	b09b      	sub	sp, #108	; 0x6c
 80156d6:	9002      	str	r0, [sp, #8]
 80156d8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80156da:	9406      	str	r4, [sp, #24]
 80156dc:	9507      	str	r5, [sp, #28]
 80156de:	2900      	cmp	r1, #0
 80156e0:	d009      	beq.n	80156f6 <_dtoa_r+0x2a>
 80156e2:	2301      	movs	r3, #1
 80156e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80156e6:	4093      	lsls	r3, r2
 80156e8:	604a      	str	r2, [r1, #4]
 80156ea:	608b      	str	r3, [r1, #8]
 80156ec:	f001 fa6a 	bl	8016bc4 <_Bfree>
 80156f0:	2300      	movs	r3, #0
 80156f2:	9a02      	ldr	r2, [sp, #8]
 80156f4:	6413      	str	r3, [r2, #64]	; 0x40
 80156f6:	2d00      	cmp	r5, #0
 80156f8:	da20      	bge.n	801573c <_dtoa_r+0x70>
 80156fa:	2301      	movs	r3, #1
 80156fc:	6033      	str	r3, [r6, #0]
 80156fe:	006b      	lsls	r3, r5, #1
 8015700:	085b      	lsrs	r3, r3, #1
 8015702:	9307      	str	r3, [sp, #28]
 8015704:	9c07      	ldr	r4, [sp, #28]
 8015706:	4bb2      	ldr	r3, [pc, #712]	; (80159d0 <_dtoa_r+0x304>)
 8015708:	0022      	movs	r2, r4
 801570a:	9317      	str	r3, [sp, #92]	; 0x5c
 801570c:	401a      	ands	r2, r3
 801570e:	429a      	cmp	r2, r3
 8015710:	d117      	bne.n	8015742 <_dtoa_r+0x76>
 8015712:	4bb0      	ldr	r3, [pc, #704]	; (80159d4 <_dtoa_r+0x308>)
 8015714:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015716:	6013      	str	r3, [r2, #0]
 8015718:	9b06      	ldr	r3, [sp, #24]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d103      	bne.n	8015726 <_dtoa_r+0x5a>
 801571e:	0324      	lsls	r4, r4, #12
 8015720:	d101      	bne.n	8015726 <_dtoa_r+0x5a>
 8015722:	f000 fd89 	bl	8016238 <_dtoa_r+0xb6c>
 8015726:	4bac      	ldr	r3, [pc, #688]	; (80159d8 <_dtoa_r+0x30c>)
 8015728:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801572a:	9308      	str	r3, [sp, #32]
 801572c:	2a00      	cmp	r2, #0
 801572e:	d002      	beq.n	8015736 <_dtoa_r+0x6a>
 8015730:	4baa      	ldr	r3, [pc, #680]	; (80159dc <_dtoa_r+0x310>)
 8015732:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015734:	6013      	str	r3, [r2, #0]
 8015736:	9808      	ldr	r0, [sp, #32]
 8015738:	b01b      	add	sp, #108	; 0x6c
 801573a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801573c:	2300      	movs	r3, #0
 801573e:	6033      	str	r3, [r6, #0]
 8015740:	e7e0      	b.n	8015704 <_dtoa_r+0x38>
 8015742:	9e06      	ldr	r6, [sp, #24]
 8015744:	9f07      	ldr	r7, [sp, #28]
 8015746:	2200      	movs	r2, #0
 8015748:	2300      	movs	r3, #0
 801574a:	0030      	movs	r0, r6
 801574c:	0039      	movs	r1, r7
 801574e:	f7ea fe85 	bl	800045c <__aeabi_dcmpeq>
 8015752:	1e05      	subs	r5, r0, #0
 8015754:	d00b      	beq.n	801576e <_dtoa_r+0xa2>
 8015756:	2301      	movs	r3, #1
 8015758:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801575a:	6013      	str	r3, [r2, #0]
 801575c:	4ba0      	ldr	r3, [pc, #640]	; (80159e0 <_dtoa_r+0x314>)
 801575e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015760:	9308      	str	r3, [sp, #32]
 8015762:	2a00      	cmp	r2, #0
 8015764:	d0e7      	beq.n	8015736 <_dtoa_r+0x6a>
 8015766:	4a9f      	ldr	r2, [pc, #636]	; (80159e4 <_dtoa_r+0x318>)
 8015768:	9924      	ldr	r1, [sp, #144]	; 0x90
 801576a:	600a      	str	r2, [r1, #0]
 801576c:	e7e3      	b.n	8015736 <_dtoa_r+0x6a>
 801576e:	ab18      	add	r3, sp, #96	; 0x60
 8015770:	9301      	str	r3, [sp, #4]
 8015772:	ab19      	add	r3, sp, #100	; 0x64
 8015774:	9300      	str	r3, [sp, #0]
 8015776:	0032      	movs	r2, r6
 8015778:	003b      	movs	r3, r7
 801577a:	9802      	ldr	r0, [sp, #8]
 801577c:	f001 fd0e 	bl	801719c <__d2b>
 8015780:	0063      	lsls	r3, r4, #1
 8015782:	9003      	str	r0, [sp, #12]
 8015784:	0d5b      	lsrs	r3, r3, #21
 8015786:	d074      	beq.n	8015872 <_dtoa_r+0x1a6>
 8015788:	033a      	lsls	r2, r7, #12
 801578a:	4c97      	ldr	r4, [pc, #604]	; (80159e8 <_dtoa_r+0x31c>)
 801578c:	0b12      	lsrs	r2, r2, #12
 801578e:	4314      	orrs	r4, r2
 8015790:	0021      	movs	r1, r4
 8015792:	4a96      	ldr	r2, [pc, #600]	; (80159ec <_dtoa_r+0x320>)
 8015794:	0030      	movs	r0, r6
 8015796:	9516      	str	r5, [sp, #88]	; 0x58
 8015798:	189e      	adds	r6, r3, r2
 801579a:	2200      	movs	r2, #0
 801579c:	4b94      	ldr	r3, [pc, #592]	; (80159f0 <_dtoa_r+0x324>)
 801579e:	f7ec fdc5 	bl	800232c <__aeabi_dsub>
 80157a2:	4a94      	ldr	r2, [pc, #592]	; (80159f4 <_dtoa_r+0x328>)
 80157a4:	4b94      	ldr	r3, [pc, #592]	; (80159f8 <_dtoa_r+0x32c>)
 80157a6:	f7ec fb4f 	bl	8001e48 <__aeabi_dmul>
 80157aa:	4a94      	ldr	r2, [pc, #592]	; (80159fc <_dtoa_r+0x330>)
 80157ac:	4b94      	ldr	r3, [pc, #592]	; (8015a00 <_dtoa_r+0x334>)
 80157ae:	f7eb fc25 	bl	8000ffc <__aeabi_dadd>
 80157b2:	0004      	movs	r4, r0
 80157b4:	0030      	movs	r0, r6
 80157b6:	000d      	movs	r5, r1
 80157b8:	f7ed f952 	bl	8002a60 <__aeabi_i2d>
 80157bc:	4a91      	ldr	r2, [pc, #580]	; (8015a04 <_dtoa_r+0x338>)
 80157be:	4b92      	ldr	r3, [pc, #584]	; (8015a08 <_dtoa_r+0x33c>)
 80157c0:	f7ec fb42 	bl	8001e48 <__aeabi_dmul>
 80157c4:	0002      	movs	r2, r0
 80157c6:	000b      	movs	r3, r1
 80157c8:	0020      	movs	r0, r4
 80157ca:	0029      	movs	r1, r5
 80157cc:	f7eb fc16 	bl	8000ffc <__aeabi_dadd>
 80157d0:	0004      	movs	r4, r0
 80157d2:	000d      	movs	r5, r1
 80157d4:	f7ed f90e 	bl	80029f4 <__aeabi_d2iz>
 80157d8:	2200      	movs	r2, #0
 80157da:	0007      	movs	r7, r0
 80157dc:	2300      	movs	r3, #0
 80157de:	0020      	movs	r0, r4
 80157e0:	0029      	movs	r1, r5
 80157e2:	f7ea fe41 	bl	8000468 <__aeabi_dcmplt>
 80157e6:	2800      	cmp	r0, #0
 80157e8:	d009      	beq.n	80157fe <_dtoa_r+0x132>
 80157ea:	0038      	movs	r0, r7
 80157ec:	f7ed f938 	bl	8002a60 <__aeabi_i2d>
 80157f0:	002b      	movs	r3, r5
 80157f2:	0022      	movs	r2, r4
 80157f4:	f7ea fe32 	bl	800045c <__aeabi_dcmpeq>
 80157f8:	4243      	negs	r3, r0
 80157fa:	4158      	adcs	r0, r3
 80157fc:	1a3f      	subs	r7, r7, r0
 80157fe:	2301      	movs	r3, #1
 8015800:	9314      	str	r3, [sp, #80]	; 0x50
 8015802:	2f16      	cmp	r7, #22
 8015804:	d80d      	bhi.n	8015822 <_dtoa_r+0x156>
 8015806:	4981      	ldr	r1, [pc, #516]	; (8015a0c <_dtoa_r+0x340>)
 8015808:	00fb      	lsls	r3, r7, #3
 801580a:	18c9      	adds	r1, r1, r3
 801580c:	6808      	ldr	r0, [r1, #0]
 801580e:	6849      	ldr	r1, [r1, #4]
 8015810:	9a06      	ldr	r2, [sp, #24]
 8015812:	9b07      	ldr	r3, [sp, #28]
 8015814:	f7ea fe3c 	bl	8000490 <__aeabi_dcmpgt>
 8015818:	2800      	cmp	r0, #0
 801581a:	d046      	beq.n	80158aa <_dtoa_r+0x1de>
 801581c:	2300      	movs	r3, #0
 801581e:	3f01      	subs	r7, #1
 8015820:	9314      	str	r3, [sp, #80]	; 0x50
 8015822:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015824:	1b9e      	subs	r6, r3, r6
 8015826:	2300      	movs	r3, #0
 8015828:	930a      	str	r3, [sp, #40]	; 0x28
 801582a:	0033      	movs	r3, r6
 801582c:	3b01      	subs	r3, #1
 801582e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015830:	d504      	bpl.n	801583c <_dtoa_r+0x170>
 8015832:	2301      	movs	r3, #1
 8015834:	1b9b      	subs	r3, r3, r6
 8015836:	930a      	str	r3, [sp, #40]	; 0x28
 8015838:	2300      	movs	r3, #0
 801583a:	930b      	str	r3, [sp, #44]	; 0x2c
 801583c:	2f00      	cmp	r7, #0
 801583e:	db36      	blt.n	80158ae <_dtoa_r+0x1e2>
 8015840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015842:	9711      	str	r7, [sp, #68]	; 0x44
 8015844:	19db      	adds	r3, r3, r7
 8015846:	930b      	str	r3, [sp, #44]	; 0x2c
 8015848:	2300      	movs	r3, #0
 801584a:	9304      	str	r3, [sp, #16]
 801584c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801584e:	2401      	movs	r4, #1
 8015850:	2b09      	cmp	r3, #9
 8015852:	d900      	bls.n	8015856 <_dtoa_r+0x18a>
 8015854:	e082      	b.n	801595c <_dtoa_r+0x290>
 8015856:	2b05      	cmp	r3, #5
 8015858:	dd02      	ble.n	8015860 <_dtoa_r+0x194>
 801585a:	2400      	movs	r4, #0
 801585c:	3b04      	subs	r3, #4
 801585e:	9320      	str	r3, [sp, #128]	; 0x80
 8015860:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015862:	1e98      	subs	r0, r3, #2
 8015864:	2803      	cmp	r0, #3
 8015866:	d900      	bls.n	801586a <_dtoa_r+0x19e>
 8015868:	e082      	b.n	8015970 <_dtoa_r+0x2a4>
 801586a:	f7ea fc5d 	bl	8000128 <__gnu_thumb1_case_uqi>
 801586e:	7573      	.short	0x7573
 8015870:	6828      	.short	0x6828
 8015872:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015874:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015876:	189e      	adds	r6, r3, r2
 8015878:	4b65      	ldr	r3, [pc, #404]	; (8015a10 <_dtoa_r+0x344>)
 801587a:	18f2      	adds	r2, r6, r3
 801587c:	2a20      	cmp	r2, #32
 801587e:	dd0f      	ble.n	80158a0 <_dtoa_r+0x1d4>
 8015880:	2340      	movs	r3, #64	; 0x40
 8015882:	1a9b      	subs	r3, r3, r2
 8015884:	409c      	lsls	r4, r3
 8015886:	4b63      	ldr	r3, [pc, #396]	; (8015a14 <_dtoa_r+0x348>)
 8015888:	9806      	ldr	r0, [sp, #24]
 801588a:	18f3      	adds	r3, r6, r3
 801588c:	40d8      	lsrs	r0, r3
 801588e:	4320      	orrs	r0, r4
 8015890:	f7ed f920 	bl	8002ad4 <__aeabi_ui2d>
 8015894:	2301      	movs	r3, #1
 8015896:	4c60      	ldr	r4, [pc, #384]	; (8015a18 <_dtoa_r+0x34c>)
 8015898:	3e01      	subs	r6, #1
 801589a:	1909      	adds	r1, r1, r4
 801589c:	9316      	str	r3, [sp, #88]	; 0x58
 801589e:	e77c      	b.n	801579a <_dtoa_r+0xce>
 80158a0:	2320      	movs	r3, #32
 80158a2:	9806      	ldr	r0, [sp, #24]
 80158a4:	1a9b      	subs	r3, r3, r2
 80158a6:	4098      	lsls	r0, r3
 80158a8:	e7f2      	b.n	8015890 <_dtoa_r+0x1c4>
 80158aa:	9014      	str	r0, [sp, #80]	; 0x50
 80158ac:	e7b9      	b.n	8015822 <_dtoa_r+0x156>
 80158ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158b0:	1bdb      	subs	r3, r3, r7
 80158b2:	930a      	str	r3, [sp, #40]	; 0x28
 80158b4:	427b      	negs	r3, r7
 80158b6:	9304      	str	r3, [sp, #16]
 80158b8:	2300      	movs	r3, #0
 80158ba:	9311      	str	r3, [sp, #68]	; 0x44
 80158bc:	e7c6      	b.n	801584c <_dtoa_r+0x180>
 80158be:	2301      	movs	r3, #1
 80158c0:	930d      	str	r3, [sp, #52]	; 0x34
 80158c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	dd57      	ble.n	8015978 <_dtoa_r+0x2ac>
 80158c8:	930c      	str	r3, [sp, #48]	; 0x30
 80158ca:	9309      	str	r3, [sp, #36]	; 0x24
 80158cc:	2200      	movs	r2, #0
 80158ce:	9902      	ldr	r1, [sp, #8]
 80158d0:	644a      	str	r2, [r1, #68]	; 0x44
 80158d2:	3204      	adds	r2, #4
 80158d4:	0010      	movs	r0, r2
 80158d6:	9902      	ldr	r1, [sp, #8]
 80158d8:	3014      	adds	r0, #20
 80158da:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80158dc:	4298      	cmp	r0, r3
 80158de:	d950      	bls.n	8015982 <_dtoa_r+0x2b6>
 80158e0:	9802      	ldr	r0, [sp, #8]
 80158e2:	f001 f947 	bl	8016b74 <_Balloc>
 80158e6:	9b02      	ldr	r3, [sp, #8]
 80158e8:	9008      	str	r0, [sp, #32]
 80158ea:	6418      	str	r0, [r3, #64]	; 0x40
 80158ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158ee:	2b0e      	cmp	r3, #14
 80158f0:	d900      	bls.n	80158f4 <_dtoa_r+0x228>
 80158f2:	e10c      	b.n	8015b0e <_dtoa_r+0x442>
 80158f4:	2c00      	cmp	r4, #0
 80158f6:	d100      	bne.n	80158fa <_dtoa_r+0x22e>
 80158f8:	e109      	b.n	8015b0e <_dtoa_r+0x442>
 80158fa:	9b06      	ldr	r3, [sp, #24]
 80158fc:	9c07      	ldr	r4, [sp, #28]
 80158fe:	9312      	str	r3, [sp, #72]	; 0x48
 8015900:	9413      	str	r4, [sp, #76]	; 0x4c
 8015902:	2f00      	cmp	r7, #0
 8015904:	dc00      	bgt.n	8015908 <_dtoa_r+0x23c>
 8015906:	e08b      	b.n	8015a20 <_dtoa_r+0x354>
 8015908:	210f      	movs	r1, #15
 801590a:	003a      	movs	r2, r7
 801590c:	4b3f      	ldr	r3, [pc, #252]	; (8015a0c <_dtoa_r+0x340>)
 801590e:	400a      	ands	r2, r1
 8015910:	00d2      	lsls	r2, r2, #3
 8015912:	189b      	adds	r3, r3, r2
 8015914:	681d      	ldr	r5, [r3, #0]
 8015916:	685e      	ldr	r6, [r3, #4]
 8015918:	2302      	movs	r3, #2
 801591a:	113c      	asrs	r4, r7, #4
 801591c:	930e      	str	r3, [sp, #56]	; 0x38
 801591e:	06e3      	lsls	r3, r4, #27
 8015920:	d50b      	bpl.n	801593a <_dtoa_r+0x26e>
 8015922:	4b3e      	ldr	r3, [pc, #248]	; (8015a1c <_dtoa_r+0x350>)
 8015924:	400c      	ands	r4, r1
 8015926:	6a1a      	ldr	r2, [r3, #32]
 8015928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801592a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801592c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801592e:	f7eb fe81 	bl	8001634 <__aeabi_ddiv>
 8015932:	2303      	movs	r3, #3
 8015934:	9006      	str	r0, [sp, #24]
 8015936:	9107      	str	r1, [sp, #28]
 8015938:	930e      	str	r3, [sp, #56]	; 0x38
 801593a:	2300      	movs	r3, #0
 801593c:	e03b      	b.n	80159b6 <_dtoa_r+0x2ea>
 801593e:	2301      	movs	r3, #1
 8015940:	930d      	str	r3, [sp, #52]	; 0x34
 8015942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015944:	18fb      	adds	r3, r7, r3
 8015946:	930c      	str	r3, [sp, #48]	; 0x30
 8015948:	3301      	adds	r3, #1
 801594a:	9309      	str	r3, [sp, #36]	; 0x24
 801594c:	2b00      	cmp	r3, #0
 801594e:	dcbd      	bgt.n	80158cc <_dtoa_r+0x200>
 8015950:	2301      	movs	r3, #1
 8015952:	e7bb      	b.n	80158cc <_dtoa_r+0x200>
 8015954:	2300      	movs	r3, #0
 8015956:	e7b3      	b.n	80158c0 <_dtoa_r+0x1f4>
 8015958:	2300      	movs	r3, #0
 801595a:	e7f1      	b.n	8015940 <_dtoa_r+0x274>
 801595c:	2300      	movs	r3, #0
 801595e:	940d      	str	r4, [sp, #52]	; 0x34
 8015960:	9320      	str	r3, [sp, #128]	; 0x80
 8015962:	3b01      	subs	r3, #1
 8015964:	2200      	movs	r2, #0
 8015966:	930c      	str	r3, [sp, #48]	; 0x30
 8015968:	9309      	str	r3, [sp, #36]	; 0x24
 801596a:	3313      	adds	r3, #19
 801596c:	9221      	str	r2, [sp, #132]	; 0x84
 801596e:	e7ad      	b.n	80158cc <_dtoa_r+0x200>
 8015970:	2301      	movs	r3, #1
 8015972:	930d      	str	r3, [sp, #52]	; 0x34
 8015974:	3b02      	subs	r3, #2
 8015976:	e7f5      	b.n	8015964 <_dtoa_r+0x298>
 8015978:	2301      	movs	r3, #1
 801597a:	930c      	str	r3, [sp, #48]	; 0x30
 801597c:	9309      	str	r3, [sp, #36]	; 0x24
 801597e:	001a      	movs	r2, r3
 8015980:	e7f4      	b.n	801596c <_dtoa_r+0x2a0>
 8015982:	9802      	ldr	r0, [sp, #8]
 8015984:	3101      	adds	r1, #1
 8015986:	6441      	str	r1, [r0, #68]	; 0x44
 8015988:	0052      	lsls	r2, r2, #1
 801598a:	e7a3      	b.n	80158d4 <_dtoa_r+0x208>
 801598c:	2301      	movs	r3, #1
 801598e:	421c      	tst	r4, r3
 8015990:	d00e      	beq.n	80159b0 <_dtoa_r+0x2e4>
 8015992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015994:	4a21      	ldr	r2, [pc, #132]	; (8015a1c <_dtoa_r+0x350>)
 8015996:	3301      	adds	r3, #1
 8015998:	930e      	str	r3, [sp, #56]	; 0x38
 801599a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801599c:	0028      	movs	r0, r5
 801599e:	00db      	lsls	r3, r3, #3
 80159a0:	189b      	adds	r3, r3, r2
 80159a2:	0031      	movs	r1, r6
 80159a4:	681a      	ldr	r2, [r3, #0]
 80159a6:	685b      	ldr	r3, [r3, #4]
 80159a8:	f7ec fa4e 	bl	8001e48 <__aeabi_dmul>
 80159ac:	0005      	movs	r5, r0
 80159ae:	000e      	movs	r6, r1
 80159b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80159b2:	1064      	asrs	r4, r4, #1
 80159b4:	3301      	adds	r3, #1
 80159b6:	9310      	str	r3, [sp, #64]	; 0x40
 80159b8:	2c00      	cmp	r4, #0
 80159ba:	d1e7      	bne.n	801598c <_dtoa_r+0x2c0>
 80159bc:	9806      	ldr	r0, [sp, #24]
 80159be:	9907      	ldr	r1, [sp, #28]
 80159c0:	002a      	movs	r2, r5
 80159c2:	0033      	movs	r3, r6
 80159c4:	f7eb fe36 	bl	8001634 <__aeabi_ddiv>
 80159c8:	9006      	str	r0, [sp, #24]
 80159ca:	9107      	str	r1, [sp, #28]
 80159cc:	e043      	b.n	8015a56 <_dtoa_r+0x38a>
 80159ce:	46c0      	nop			; (mov r8, r8)
 80159d0:	7ff00000 	.word	0x7ff00000
 80159d4:	0000270f 	.word	0x0000270f
 80159d8:	0801a6f6 	.word	0x0801a6f6
 80159dc:	0801a6f9 	.word	0x0801a6f9
 80159e0:	0801a5ca 	.word	0x0801a5ca
 80159e4:	0801a5cb 	.word	0x0801a5cb
 80159e8:	3ff00000 	.word	0x3ff00000
 80159ec:	fffffc01 	.word	0xfffffc01
 80159f0:	3ff80000 	.word	0x3ff80000
 80159f4:	636f4361 	.word	0x636f4361
 80159f8:	3fd287a7 	.word	0x3fd287a7
 80159fc:	8b60c8b3 	.word	0x8b60c8b3
 8015a00:	3fc68a28 	.word	0x3fc68a28
 8015a04:	509f79fb 	.word	0x509f79fb
 8015a08:	3fd34413 	.word	0x3fd34413
 8015a0c:	0801a728 	.word	0x0801a728
 8015a10:	00000432 	.word	0x00000432
 8015a14:	00000412 	.word	0x00000412
 8015a18:	fe100000 	.word	0xfe100000
 8015a1c:	0801a700 	.word	0x0801a700
 8015a20:	2302      	movs	r3, #2
 8015a22:	930e      	str	r3, [sp, #56]	; 0x38
 8015a24:	2f00      	cmp	r7, #0
 8015a26:	d016      	beq.n	8015a56 <_dtoa_r+0x38a>
 8015a28:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015a2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015a2c:	427c      	negs	r4, r7
 8015a2e:	330d      	adds	r3, #13
 8015a30:	4023      	ands	r3, r4
 8015a32:	4acf      	ldr	r2, [pc, #828]	; (8015d70 <_dtoa_r+0x6a4>)
 8015a34:	00db      	lsls	r3, r3, #3
 8015a36:	18d3      	adds	r3, r2, r3
 8015a38:	681a      	ldr	r2, [r3, #0]
 8015a3a:	685b      	ldr	r3, [r3, #4]
 8015a3c:	f7ec fa04 	bl	8001e48 <__aeabi_dmul>
 8015a40:	2300      	movs	r3, #0
 8015a42:	2601      	movs	r6, #1
 8015a44:	001d      	movs	r5, r3
 8015a46:	9006      	str	r0, [sp, #24]
 8015a48:	9107      	str	r1, [sp, #28]
 8015a4a:	1124      	asrs	r4, r4, #4
 8015a4c:	2c00      	cmp	r4, #0
 8015a4e:	d000      	beq.n	8015a52 <_dtoa_r+0x386>
 8015a50:	e08c      	b.n	8015b6c <_dtoa_r+0x4a0>
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d1b8      	bne.n	80159c8 <_dtoa_r+0x2fc>
 8015a56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d100      	bne.n	8015a5e <_dtoa_r+0x392>
 8015a5c:	e096      	b.n	8015b8c <_dtoa_r+0x4c0>
 8015a5e:	9c06      	ldr	r4, [sp, #24]
 8015a60:	9d07      	ldr	r5, [sp, #28]
 8015a62:	2200      	movs	r2, #0
 8015a64:	4bc3      	ldr	r3, [pc, #780]	; (8015d74 <_dtoa_r+0x6a8>)
 8015a66:	0020      	movs	r0, r4
 8015a68:	0029      	movs	r1, r5
 8015a6a:	f7ea fcfd 	bl	8000468 <__aeabi_dcmplt>
 8015a6e:	2800      	cmp	r0, #0
 8015a70:	d100      	bne.n	8015a74 <_dtoa_r+0x3a8>
 8015a72:	e08b      	b.n	8015b8c <_dtoa_r+0x4c0>
 8015a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d100      	bne.n	8015a7c <_dtoa_r+0x3b0>
 8015a7a:	e087      	b.n	8015b8c <_dtoa_r+0x4c0>
 8015a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	dd41      	ble.n	8015b06 <_dtoa_r+0x43a>
 8015a82:	4bbd      	ldr	r3, [pc, #756]	; (8015d78 <_dtoa_r+0x6ac>)
 8015a84:	2200      	movs	r2, #0
 8015a86:	0020      	movs	r0, r4
 8015a88:	0029      	movs	r1, r5
 8015a8a:	f7ec f9dd 	bl	8001e48 <__aeabi_dmul>
 8015a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a90:	9006      	str	r0, [sp, #24]
 8015a92:	9107      	str	r1, [sp, #28]
 8015a94:	3301      	adds	r3, #1
 8015a96:	930e      	str	r3, [sp, #56]	; 0x38
 8015a98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a9a:	1e7e      	subs	r6, r7, #1
 8015a9c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015a9e:	9310      	str	r3, [sp, #64]	; 0x40
 8015aa0:	f7ec ffde 	bl	8002a60 <__aeabi_i2d>
 8015aa4:	9a06      	ldr	r2, [sp, #24]
 8015aa6:	9b07      	ldr	r3, [sp, #28]
 8015aa8:	f7ec f9ce 	bl	8001e48 <__aeabi_dmul>
 8015aac:	2200      	movs	r2, #0
 8015aae:	4bb3      	ldr	r3, [pc, #716]	; (8015d7c <_dtoa_r+0x6b0>)
 8015ab0:	f7eb faa4 	bl	8000ffc <__aeabi_dadd>
 8015ab4:	4ab2      	ldr	r2, [pc, #712]	; (8015d80 <_dtoa_r+0x6b4>)
 8015ab6:	900e      	str	r0, [sp, #56]	; 0x38
 8015ab8:	910f      	str	r1, [sp, #60]	; 0x3c
 8015aba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015abc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015abe:	4694      	mov	ip, r2
 8015ac0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ac2:	4463      	add	r3, ip
 8015ac4:	9315      	str	r3, [sp, #84]	; 0x54
 8015ac6:	001d      	movs	r5, r3
 8015ac8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d161      	bne.n	8015b92 <_dtoa_r+0x4c6>
 8015ace:	9806      	ldr	r0, [sp, #24]
 8015ad0:	9907      	ldr	r1, [sp, #28]
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	4bab      	ldr	r3, [pc, #684]	; (8015d84 <_dtoa_r+0x6b8>)
 8015ad6:	f7ec fc29 	bl	800232c <__aeabi_dsub>
 8015ada:	0022      	movs	r2, r4
 8015adc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ade:	9006      	str	r0, [sp, #24]
 8015ae0:	9107      	str	r1, [sp, #28]
 8015ae2:	f7ea fcd5 	bl	8000490 <__aeabi_dcmpgt>
 8015ae6:	2800      	cmp	r0, #0
 8015ae8:	d000      	beq.n	8015aec <_dtoa_r+0x420>
 8015aea:	e2aa      	b.n	8016042 <_dtoa_r+0x976>
 8015aec:	48a6      	ldr	r0, [pc, #664]	; (8015d88 <_dtoa_r+0x6bc>)
 8015aee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015af0:	4684      	mov	ip, r0
 8015af2:	4461      	add	r1, ip
 8015af4:	000b      	movs	r3, r1
 8015af6:	9806      	ldr	r0, [sp, #24]
 8015af8:	9907      	ldr	r1, [sp, #28]
 8015afa:	0022      	movs	r2, r4
 8015afc:	f7ea fcb4 	bl	8000468 <__aeabi_dcmplt>
 8015b00:	2800      	cmp	r0, #0
 8015b02:	d000      	beq.n	8015b06 <_dtoa_r+0x43a>
 8015b04:	e297      	b.n	8016036 <_dtoa_r+0x96a>
 8015b06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015b08:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015b0a:	9306      	str	r3, [sp, #24]
 8015b0c:	9407      	str	r4, [sp, #28]
 8015b0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	da00      	bge.n	8015b16 <_dtoa_r+0x44a>
 8015b14:	e15e      	b.n	8015dd4 <_dtoa_r+0x708>
 8015b16:	2f0e      	cmp	r7, #14
 8015b18:	dd00      	ble.n	8015b1c <_dtoa_r+0x450>
 8015b1a:	e15b      	b.n	8015dd4 <_dtoa_r+0x708>
 8015b1c:	4b94      	ldr	r3, [pc, #592]	; (8015d70 <_dtoa_r+0x6a4>)
 8015b1e:	00fa      	lsls	r2, r7, #3
 8015b20:	189b      	adds	r3, r3, r2
 8015b22:	685c      	ldr	r4, [r3, #4]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	9304      	str	r3, [sp, #16]
 8015b28:	9405      	str	r4, [sp, #20]
 8015b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	db00      	blt.n	8015b32 <_dtoa_r+0x466>
 8015b30:	e0da      	b.n	8015ce8 <_dtoa_r+0x61c>
 8015b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	dd00      	ble.n	8015b3a <_dtoa_r+0x46e>
 8015b38:	e0d6      	b.n	8015ce8 <_dtoa_r+0x61c>
 8015b3a:	d000      	beq.n	8015b3e <_dtoa_r+0x472>
 8015b3c:	e27f      	b.n	801603e <_dtoa_r+0x972>
 8015b3e:	9804      	ldr	r0, [sp, #16]
 8015b40:	9905      	ldr	r1, [sp, #20]
 8015b42:	2200      	movs	r2, #0
 8015b44:	4b8f      	ldr	r3, [pc, #572]	; (8015d84 <_dtoa_r+0x6b8>)
 8015b46:	f7ec f97f 	bl	8001e48 <__aeabi_dmul>
 8015b4a:	9a06      	ldr	r2, [sp, #24]
 8015b4c:	9b07      	ldr	r3, [sp, #28]
 8015b4e:	f7ea fca9 	bl	80004a4 <__aeabi_dcmpge>
 8015b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b54:	9304      	str	r3, [sp, #16]
 8015b56:	001e      	movs	r6, r3
 8015b58:	2800      	cmp	r0, #0
 8015b5a:	d000      	beq.n	8015b5e <_dtoa_r+0x492>
 8015b5c:	e251      	b.n	8016002 <_dtoa_r+0x936>
 8015b5e:	9b08      	ldr	r3, [sp, #32]
 8015b60:	9a08      	ldr	r2, [sp, #32]
 8015b62:	1c5d      	adds	r5, r3, #1
 8015b64:	2331      	movs	r3, #49	; 0x31
 8015b66:	3701      	adds	r7, #1
 8015b68:	7013      	strb	r3, [r2, #0]
 8015b6a:	e24d      	b.n	8016008 <_dtoa_r+0x93c>
 8015b6c:	4234      	tst	r4, r6
 8015b6e:	d00a      	beq.n	8015b86 <_dtoa_r+0x4ba>
 8015b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b72:	4a86      	ldr	r2, [pc, #536]	; (8015d8c <_dtoa_r+0x6c0>)
 8015b74:	3301      	adds	r3, #1
 8015b76:	930e      	str	r3, [sp, #56]	; 0x38
 8015b78:	00eb      	lsls	r3, r5, #3
 8015b7a:	189b      	adds	r3, r3, r2
 8015b7c:	681a      	ldr	r2, [r3, #0]
 8015b7e:	685b      	ldr	r3, [r3, #4]
 8015b80:	f7ec f962 	bl	8001e48 <__aeabi_dmul>
 8015b84:	0033      	movs	r3, r6
 8015b86:	1064      	asrs	r4, r4, #1
 8015b88:	3501      	adds	r5, #1
 8015b8a:	e75f      	b.n	8015a4c <_dtoa_r+0x380>
 8015b8c:	003e      	movs	r6, r7
 8015b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b90:	e784      	b.n	8015a9c <_dtoa_r+0x3d0>
 8015b92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b94:	1e5a      	subs	r2, r3, #1
 8015b96:	4b76      	ldr	r3, [pc, #472]	; (8015d70 <_dtoa_r+0x6a4>)
 8015b98:	00d2      	lsls	r2, r2, #3
 8015b9a:	189b      	adds	r3, r3, r2
 8015b9c:	6818      	ldr	r0, [r3, #0]
 8015b9e:	6859      	ldr	r1, [r3, #4]
 8015ba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d04b      	beq.n	8015c3e <_dtoa_r+0x572>
 8015ba6:	0002      	movs	r2, r0
 8015ba8:	000b      	movs	r3, r1
 8015baa:	2000      	movs	r0, #0
 8015bac:	4978      	ldr	r1, [pc, #480]	; (8015d90 <_dtoa_r+0x6c4>)
 8015bae:	f7eb fd41 	bl	8001634 <__aeabi_ddiv>
 8015bb2:	002b      	movs	r3, r5
 8015bb4:	0022      	movs	r2, r4
 8015bb6:	f7ec fbb9 	bl	800232c <__aeabi_dsub>
 8015bba:	9b08      	ldr	r3, [sp, #32]
 8015bbc:	900e      	str	r0, [sp, #56]	; 0x38
 8015bbe:	910f      	str	r1, [sp, #60]	; 0x3c
 8015bc0:	9315      	str	r3, [sp, #84]	; 0x54
 8015bc2:	9806      	ldr	r0, [sp, #24]
 8015bc4:	9907      	ldr	r1, [sp, #28]
 8015bc6:	f7ec ff15 	bl	80029f4 <__aeabi_d2iz>
 8015bca:	0004      	movs	r4, r0
 8015bcc:	f7ec ff48 	bl	8002a60 <__aeabi_i2d>
 8015bd0:	0002      	movs	r2, r0
 8015bd2:	000b      	movs	r3, r1
 8015bd4:	9806      	ldr	r0, [sp, #24]
 8015bd6:	9907      	ldr	r1, [sp, #28]
 8015bd8:	f7ec fba8 	bl	800232c <__aeabi_dsub>
 8015bdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015bde:	3430      	adds	r4, #48	; 0x30
 8015be0:	1c5d      	adds	r5, r3, #1
 8015be2:	701c      	strb	r4, [r3, #0]
 8015be4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015be6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015be8:	9006      	str	r0, [sp, #24]
 8015bea:	9107      	str	r1, [sp, #28]
 8015bec:	f7ea fc3c 	bl	8000468 <__aeabi_dcmplt>
 8015bf0:	2800      	cmp	r0, #0
 8015bf2:	d16c      	bne.n	8015cce <_dtoa_r+0x602>
 8015bf4:	9a06      	ldr	r2, [sp, #24]
 8015bf6:	9b07      	ldr	r3, [sp, #28]
 8015bf8:	2000      	movs	r0, #0
 8015bfa:	495e      	ldr	r1, [pc, #376]	; (8015d74 <_dtoa_r+0x6a8>)
 8015bfc:	f7ec fb96 	bl	800232c <__aeabi_dsub>
 8015c00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c04:	f7ea fc30 	bl	8000468 <__aeabi_dcmplt>
 8015c08:	2800      	cmp	r0, #0
 8015c0a:	d000      	beq.n	8015c0e <_dtoa_r+0x542>
 8015c0c:	e0c3      	b.n	8015d96 <_dtoa_r+0x6ca>
 8015c0e:	9b08      	ldr	r3, [sp, #32]
 8015c10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015c12:	1aeb      	subs	r3, r5, r3
 8015c14:	429a      	cmp	r2, r3
 8015c16:	dc00      	bgt.n	8015c1a <_dtoa_r+0x54e>
 8015c18:	e775      	b.n	8015b06 <_dtoa_r+0x43a>
 8015c1a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015c1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015c1e:	2200      	movs	r2, #0
 8015c20:	4b55      	ldr	r3, [pc, #340]	; (8015d78 <_dtoa_r+0x6ac>)
 8015c22:	f7ec f911 	bl	8001e48 <__aeabi_dmul>
 8015c26:	2200      	movs	r2, #0
 8015c28:	900e      	str	r0, [sp, #56]	; 0x38
 8015c2a:	910f      	str	r1, [sp, #60]	; 0x3c
 8015c2c:	9806      	ldr	r0, [sp, #24]
 8015c2e:	9907      	ldr	r1, [sp, #28]
 8015c30:	4b51      	ldr	r3, [pc, #324]	; (8015d78 <_dtoa_r+0x6ac>)
 8015c32:	f7ec f909 	bl	8001e48 <__aeabi_dmul>
 8015c36:	9515      	str	r5, [sp, #84]	; 0x54
 8015c38:	9006      	str	r0, [sp, #24]
 8015c3a:	9107      	str	r1, [sp, #28]
 8015c3c:	e7c1      	b.n	8015bc2 <_dtoa_r+0x4f6>
 8015c3e:	0022      	movs	r2, r4
 8015c40:	002b      	movs	r3, r5
 8015c42:	f7ec f901 	bl	8001e48 <__aeabi_dmul>
 8015c46:	9c08      	ldr	r4, [sp, #32]
 8015c48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015c4a:	0023      	movs	r3, r4
 8015c4c:	4694      	mov	ip, r2
 8015c4e:	900e      	str	r0, [sp, #56]	; 0x38
 8015c50:	910f      	str	r1, [sp, #60]	; 0x3c
 8015c52:	4463      	add	r3, ip
 8015c54:	9315      	str	r3, [sp, #84]	; 0x54
 8015c56:	9806      	ldr	r0, [sp, #24]
 8015c58:	9907      	ldr	r1, [sp, #28]
 8015c5a:	f7ec fecb 	bl	80029f4 <__aeabi_d2iz>
 8015c5e:	0005      	movs	r5, r0
 8015c60:	f7ec fefe 	bl	8002a60 <__aeabi_i2d>
 8015c64:	000b      	movs	r3, r1
 8015c66:	0002      	movs	r2, r0
 8015c68:	9806      	ldr	r0, [sp, #24]
 8015c6a:	9907      	ldr	r1, [sp, #28]
 8015c6c:	f7ec fb5e 	bl	800232c <__aeabi_dsub>
 8015c70:	3530      	adds	r5, #48	; 0x30
 8015c72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c74:	7025      	strb	r5, [r4, #0]
 8015c76:	3401      	adds	r4, #1
 8015c78:	9006      	str	r0, [sp, #24]
 8015c7a:	9107      	str	r1, [sp, #28]
 8015c7c:	42a3      	cmp	r3, r4
 8015c7e:	d12a      	bne.n	8015cd6 <_dtoa_r+0x60a>
 8015c80:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015c82:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015c84:	9a08      	ldr	r2, [sp, #32]
 8015c86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c88:	4694      	mov	ip, r2
 8015c8a:	4463      	add	r3, ip
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	001d      	movs	r5, r3
 8015c90:	4b3f      	ldr	r3, [pc, #252]	; (8015d90 <_dtoa_r+0x6c4>)
 8015c92:	f7eb f9b3 	bl	8000ffc <__aeabi_dadd>
 8015c96:	0002      	movs	r2, r0
 8015c98:	000b      	movs	r3, r1
 8015c9a:	9806      	ldr	r0, [sp, #24]
 8015c9c:	9907      	ldr	r1, [sp, #28]
 8015c9e:	f7ea fbf7 	bl	8000490 <__aeabi_dcmpgt>
 8015ca2:	2800      	cmp	r0, #0
 8015ca4:	d000      	beq.n	8015ca8 <_dtoa_r+0x5dc>
 8015ca6:	e076      	b.n	8015d96 <_dtoa_r+0x6ca>
 8015ca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015caa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cac:	2000      	movs	r0, #0
 8015cae:	4938      	ldr	r1, [pc, #224]	; (8015d90 <_dtoa_r+0x6c4>)
 8015cb0:	f7ec fb3c 	bl	800232c <__aeabi_dsub>
 8015cb4:	0002      	movs	r2, r0
 8015cb6:	000b      	movs	r3, r1
 8015cb8:	9806      	ldr	r0, [sp, #24]
 8015cba:	9907      	ldr	r1, [sp, #28]
 8015cbc:	f7ea fbd4 	bl	8000468 <__aeabi_dcmplt>
 8015cc0:	2800      	cmp	r0, #0
 8015cc2:	d100      	bne.n	8015cc6 <_dtoa_r+0x5fa>
 8015cc4:	e71f      	b.n	8015b06 <_dtoa_r+0x43a>
 8015cc6:	1e6b      	subs	r3, r5, #1
 8015cc8:	781a      	ldrb	r2, [r3, #0]
 8015cca:	2a30      	cmp	r2, #48	; 0x30
 8015ccc:	d001      	beq.n	8015cd2 <_dtoa_r+0x606>
 8015cce:	0037      	movs	r7, r6
 8015cd0:	e03f      	b.n	8015d52 <_dtoa_r+0x686>
 8015cd2:	001d      	movs	r5, r3
 8015cd4:	e7f7      	b.n	8015cc6 <_dtoa_r+0x5fa>
 8015cd6:	9806      	ldr	r0, [sp, #24]
 8015cd8:	9907      	ldr	r1, [sp, #28]
 8015cda:	2200      	movs	r2, #0
 8015cdc:	4b26      	ldr	r3, [pc, #152]	; (8015d78 <_dtoa_r+0x6ac>)
 8015cde:	f7ec f8b3 	bl	8001e48 <__aeabi_dmul>
 8015ce2:	9006      	str	r0, [sp, #24]
 8015ce4:	9107      	str	r1, [sp, #28]
 8015ce6:	e7b6      	b.n	8015c56 <_dtoa_r+0x58a>
 8015ce8:	9e08      	ldr	r6, [sp, #32]
 8015cea:	9a04      	ldr	r2, [sp, #16]
 8015cec:	9b05      	ldr	r3, [sp, #20]
 8015cee:	9806      	ldr	r0, [sp, #24]
 8015cf0:	9907      	ldr	r1, [sp, #28]
 8015cf2:	f7eb fc9f 	bl	8001634 <__aeabi_ddiv>
 8015cf6:	f7ec fe7d 	bl	80029f4 <__aeabi_d2iz>
 8015cfa:	0004      	movs	r4, r0
 8015cfc:	f7ec feb0 	bl	8002a60 <__aeabi_i2d>
 8015d00:	9a04      	ldr	r2, [sp, #16]
 8015d02:	9b05      	ldr	r3, [sp, #20]
 8015d04:	f7ec f8a0 	bl	8001e48 <__aeabi_dmul>
 8015d08:	0002      	movs	r2, r0
 8015d0a:	000b      	movs	r3, r1
 8015d0c:	9806      	ldr	r0, [sp, #24]
 8015d0e:	9907      	ldr	r1, [sp, #28]
 8015d10:	f7ec fb0c 	bl	800232c <__aeabi_dsub>
 8015d14:	0023      	movs	r3, r4
 8015d16:	3330      	adds	r3, #48	; 0x30
 8015d18:	7033      	strb	r3, [r6, #0]
 8015d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d1c:	9b08      	ldr	r3, [sp, #32]
 8015d1e:	1c75      	adds	r5, r6, #1
 8015d20:	1aeb      	subs	r3, r5, r3
 8015d22:	429a      	cmp	r2, r3
 8015d24:	d148      	bne.n	8015db8 <_dtoa_r+0x6ec>
 8015d26:	0002      	movs	r2, r0
 8015d28:	000b      	movs	r3, r1
 8015d2a:	f7eb f967 	bl	8000ffc <__aeabi_dadd>
 8015d2e:	9a04      	ldr	r2, [sp, #16]
 8015d30:	9b05      	ldr	r3, [sp, #20]
 8015d32:	9006      	str	r0, [sp, #24]
 8015d34:	9107      	str	r1, [sp, #28]
 8015d36:	f7ea fbab 	bl	8000490 <__aeabi_dcmpgt>
 8015d3a:	2800      	cmp	r0, #0
 8015d3c:	d12a      	bne.n	8015d94 <_dtoa_r+0x6c8>
 8015d3e:	9a04      	ldr	r2, [sp, #16]
 8015d40:	9b05      	ldr	r3, [sp, #20]
 8015d42:	9806      	ldr	r0, [sp, #24]
 8015d44:	9907      	ldr	r1, [sp, #28]
 8015d46:	f7ea fb89 	bl	800045c <__aeabi_dcmpeq>
 8015d4a:	2800      	cmp	r0, #0
 8015d4c:	d001      	beq.n	8015d52 <_dtoa_r+0x686>
 8015d4e:	07e3      	lsls	r3, r4, #31
 8015d50:	d420      	bmi.n	8015d94 <_dtoa_r+0x6c8>
 8015d52:	9903      	ldr	r1, [sp, #12]
 8015d54:	9802      	ldr	r0, [sp, #8]
 8015d56:	f000 ff35 	bl	8016bc4 <_Bfree>
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	702b      	strb	r3, [r5, #0]
 8015d5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015d60:	3701      	adds	r7, #1
 8015d62:	601f      	str	r7, [r3, #0]
 8015d64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d100      	bne.n	8015d6c <_dtoa_r+0x6a0>
 8015d6a:	e4e4      	b.n	8015736 <_dtoa_r+0x6a>
 8015d6c:	601d      	str	r5, [r3, #0]
 8015d6e:	e4e2      	b.n	8015736 <_dtoa_r+0x6a>
 8015d70:	0801a728 	.word	0x0801a728
 8015d74:	3ff00000 	.word	0x3ff00000
 8015d78:	40240000 	.word	0x40240000
 8015d7c:	401c0000 	.word	0x401c0000
 8015d80:	fcc00000 	.word	0xfcc00000
 8015d84:	40140000 	.word	0x40140000
 8015d88:	7cc00000 	.word	0x7cc00000
 8015d8c:	0801a700 	.word	0x0801a700
 8015d90:	3fe00000 	.word	0x3fe00000
 8015d94:	003e      	movs	r6, r7
 8015d96:	1e6b      	subs	r3, r5, #1
 8015d98:	781a      	ldrb	r2, [r3, #0]
 8015d9a:	2a39      	cmp	r2, #57	; 0x39
 8015d9c:	d106      	bne.n	8015dac <_dtoa_r+0x6e0>
 8015d9e:	9a08      	ldr	r2, [sp, #32]
 8015da0:	429a      	cmp	r2, r3
 8015da2:	d107      	bne.n	8015db4 <_dtoa_r+0x6e8>
 8015da4:	2330      	movs	r3, #48	; 0x30
 8015da6:	7013      	strb	r3, [r2, #0]
 8015da8:	0013      	movs	r3, r2
 8015daa:	3601      	adds	r6, #1
 8015dac:	781a      	ldrb	r2, [r3, #0]
 8015dae:	3201      	adds	r2, #1
 8015db0:	701a      	strb	r2, [r3, #0]
 8015db2:	e78c      	b.n	8015cce <_dtoa_r+0x602>
 8015db4:	001d      	movs	r5, r3
 8015db6:	e7ee      	b.n	8015d96 <_dtoa_r+0x6ca>
 8015db8:	2200      	movs	r2, #0
 8015dba:	4ba4      	ldr	r3, [pc, #656]	; (801604c <_dtoa_r+0x980>)
 8015dbc:	f7ec f844 	bl	8001e48 <__aeabi_dmul>
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	9006      	str	r0, [sp, #24]
 8015dc6:	9107      	str	r1, [sp, #28]
 8015dc8:	002e      	movs	r6, r5
 8015dca:	f7ea fb47 	bl	800045c <__aeabi_dcmpeq>
 8015dce:	2800      	cmp	r0, #0
 8015dd0:	d08b      	beq.n	8015cea <_dtoa_r+0x61e>
 8015dd2:	e7be      	b.n	8015d52 <_dtoa_r+0x686>
 8015dd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015dd6:	2a00      	cmp	r2, #0
 8015dd8:	d100      	bne.n	8015ddc <_dtoa_r+0x710>
 8015dda:	e0da      	b.n	8015f92 <_dtoa_r+0x8c6>
 8015ddc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015dde:	2a01      	cmp	r2, #1
 8015de0:	dd00      	ble.n	8015de4 <_dtoa_r+0x718>
 8015de2:	e0bd      	b.n	8015f60 <_dtoa_r+0x894>
 8015de4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015de6:	2a00      	cmp	r2, #0
 8015de8:	d100      	bne.n	8015dec <_dtoa_r+0x720>
 8015dea:	e0b5      	b.n	8015f58 <_dtoa_r+0x88c>
 8015dec:	4a98      	ldr	r2, [pc, #608]	; (8016050 <_dtoa_r+0x984>)
 8015dee:	189b      	adds	r3, r3, r2
 8015df0:	9d04      	ldr	r5, [sp, #16]
 8015df2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015df6:	2101      	movs	r1, #1
 8015df8:	18d2      	adds	r2, r2, r3
 8015dfa:	920a      	str	r2, [sp, #40]	; 0x28
 8015dfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015dfe:	9802      	ldr	r0, [sp, #8]
 8015e00:	18d3      	adds	r3, r2, r3
 8015e02:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e04:	f000 ffad 	bl	8016d62 <__i2b>
 8015e08:	0006      	movs	r6, r0
 8015e0a:	2c00      	cmp	r4, #0
 8015e0c:	dd0e      	ble.n	8015e2c <_dtoa_r+0x760>
 8015e0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	dd0b      	ble.n	8015e2c <_dtoa_r+0x760>
 8015e14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e16:	0023      	movs	r3, r4
 8015e18:	4294      	cmp	r4, r2
 8015e1a:	dd00      	ble.n	8015e1e <_dtoa_r+0x752>
 8015e1c:	0013      	movs	r3, r2
 8015e1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e20:	1ae4      	subs	r4, r4, r3
 8015e22:	1ad2      	subs	r2, r2, r3
 8015e24:	920a      	str	r2, [sp, #40]	; 0x28
 8015e26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e28:	1ad3      	subs	r3, r2, r3
 8015e2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e2c:	9b04      	ldr	r3, [sp, #16]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d01f      	beq.n	8015e72 <_dtoa_r+0x7a6>
 8015e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d100      	bne.n	8015e3a <_dtoa_r+0x76e>
 8015e38:	e0af      	b.n	8015f9a <_dtoa_r+0x8ce>
 8015e3a:	2d00      	cmp	r5, #0
 8015e3c:	d011      	beq.n	8015e62 <_dtoa_r+0x796>
 8015e3e:	0031      	movs	r1, r6
 8015e40:	002a      	movs	r2, r5
 8015e42:	9802      	ldr	r0, [sp, #8]
 8015e44:	f001 f826 	bl	8016e94 <__pow5mult>
 8015e48:	9a03      	ldr	r2, [sp, #12]
 8015e4a:	0001      	movs	r1, r0
 8015e4c:	0006      	movs	r6, r0
 8015e4e:	9802      	ldr	r0, [sp, #8]
 8015e50:	f000 ff90 	bl	8016d74 <__multiply>
 8015e54:	9903      	ldr	r1, [sp, #12]
 8015e56:	9010      	str	r0, [sp, #64]	; 0x40
 8015e58:	9802      	ldr	r0, [sp, #8]
 8015e5a:	f000 feb3 	bl	8016bc4 <_Bfree>
 8015e5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e60:	9303      	str	r3, [sp, #12]
 8015e62:	9b04      	ldr	r3, [sp, #16]
 8015e64:	1b5a      	subs	r2, r3, r5
 8015e66:	d004      	beq.n	8015e72 <_dtoa_r+0x7a6>
 8015e68:	9903      	ldr	r1, [sp, #12]
 8015e6a:	9802      	ldr	r0, [sp, #8]
 8015e6c:	f001 f812 	bl	8016e94 <__pow5mult>
 8015e70:	9003      	str	r0, [sp, #12]
 8015e72:	2101      	movs	r1, #1
 8015e74:	9802      	ldr	r0, [sp, #8]
 8015e76:	f000 ff74 	bl	8016d62 <__i2b>
 8015e7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e7c:	9004      	str	r0, [sp, #16]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d100      	bne.n	8015e84 <_dtoa_r+0x7b8>
 8015e82:	e1e3      	b.n	801624c <_dtoa_r+0xb80>
 8015e84:	001a      	movs	r2, r3
 8015e86:	0001      	movs	r1, r0
 8015e88:	9802      	ldr	r0, [sp, #8]
 8015e8a:	f001 f803 	bl	8016e94 <__pow5mult>
 8015e8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015e90:	9004      	str	r0, [sp, #16]
 8015e92:	2b01      	cmp	r3, #1
 8015e94:	dd00      	ble.n	8015e98 <_dtoa_r+0x7cc>
 8015e96:	e082      	b.n	8015f9e <_dtoa_r+0x8d2>
 8015e98:	2500      	movs	r5, #0
 8015e9a:	9b06      	ldr	r3, [sp, #24]
 8015e9c:	42ab      	cmp	r3, r5
 8015e9e:	d10e      	bne.n	8015ebe <_dtoa_r+0x7f2>
 8015ea0:	9b07      	ldr	r3, [sp, #28]
 8015ea2:	031b      	lsls	r3, r3, #12
 8015ea4:	42ab      	cmp	r3, r5
 8015ea6:	d10a      	bne.n	8015ebe <_dtoa_r+0x7f2>
 8015ea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015eaa:	9a07      	ldr	r2, [sp, #28]
 8015eac:	4213      	tst	r3, r2
 8015eae:	d006      	beq.n	8015ebe <_dtoa_r+0x7f2>
 8015eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015eb2:	3501      	adds	r5, #1
 8015eb4:	3301      	adds	r3, #1
 8015eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8015eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015eba:	3301      	adds	r3, #1
 8015ebc:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ebe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ec0:	2001      	movs	r0, #1
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d16c      	bne.n	8015fa0 <_dtoa_r+0x8d4>
 8015ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ec8:	1818      	adds	r0, r3, r0
 8015eca:	231f      	movs	r3, #31
 8015ecc:	4018      	ands	r0, r3
 8015ece:	d07e      	beq.n	8015fce <_dtoa_r+0x902>
 8015ed0:	3301      	adds	r3, #1
 8015ed2:	1a1b      	subs	r3, r3, r0
 8015ed4:	2b04      	cmp	r3, #4
 8015ed6:	dd70      	ble.n	8015fba <_dtoa_r+0x8ee>
 8015ed8:	231c      	movs	r3, #28
 8015eda:	1a18      	subs	r0, r3, r0
 8015edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ede:	1824      	adds	r4, r4, r0
 8015ee0:	181b      	adds	r3, r3, r0
 8015ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8015ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ee6:	181b      	adds	r3, r3, r0
 8015ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8015eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	dd05      	ble.n	8015efc <_dtoa_r+0x830>
 8015ef0:	001a      	movs	r2, r3
 8015ef2:	9903      	ldr	r1, [sp, #12]
 8015ef4:	9802      	ldr	r0, [sp, #8]
 8015ef6:	f001 f80f 	bl	8016f18 <__lshift>
 8015efa:	9003      	str	r0, [sp, #12]
 8015efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	dd05      	ble.n	8015f0e <_dtoa_r+0x842>
 8015f02:	001a      	movs	r2, r3
 8015f04:	9904      	ldr	r1, [sp, #16]
 8015f06:	9802      	ldr	r0, [sp, #8]
 8015f08:	f001 f806 	bl	8016f18 <__lshift>
 8015f0c:	9004      	str	r0, [sp, #16]
 8015f0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d05e      	beq.n	8015fd2 <_dtoa_r+0x906>
 8015f14:	9904      	ldr	r1, [sp, #16]
 8015f16:	9803      	ldr	r0, [sp, #12]
 8015f18:	f001 f850 	bl	8016fbc <__mcmp>
 8015f1c:	2800      	cmp	r0, #0
 8015f1e:	da58      	bge.n	8015fd2 <_dtoa_r+0x906>
 8015f20:	2300      	movs	r3, #0
 8015f22:	220a      	movs	r2, #10
 8015f24:	9903      	ldr	r1, [sp, #12]
 8015f26:	9802      	ldr	r0, [sp, #8]
 8015f28:	f000 fe56 	bl	8016bd8 <__multadd>
 8015f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f2e:	3f01      	subs	r7, #1
 8015f30:	9003      	str	r0, [sp, #12]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d100      	bne.n	8015f38 <_dtoa_r+0x86c>
 8015f36:	e190      	b.n	801625a <_dtoa_r+0xb8e>
 8015f38:	2300      	movs	r3, #0
 8015f3a:	0031      	movs	r1, r6
 8015f3c:	220a      	movs	r2, #10
 8015f3e:	9802      	ldr	r0, [sp, #8]
 8015f40:	f000 fe4a 	bl	8016bd8 <__multadd>
 8015f44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f46:	0006      	movs	r6, r0
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	dd00      	ble.n	8015f4e <_dtoa_r+0x882>
 8015f4c:	e088      	b.n	8016060 <_dtoa_r+0x994>
 8015f4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015f50:	2b02      	cmp	r3, #2
 8015f52:	dc00      	bgt.n	8015f56 <_dtoa_r+0x88a>
 8015f54:	e084      	b.n	8016060 <_dtoa_r+0x994>
 8015f56:	e044      	b.n	8015fe2 <_dtoa_r+0x916>
 8015f58:	2336      	movs	r3, #54	; 0x36
 8015f5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015f5c:	1a9b      	subs	r3, r3, r2
 8015f5e:	e747      	b.n	8015df0 <_dtoa_r+0x724>
 8015f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f62:	1e5d      	subs	r5, r3, #1
 8015f64:	9b04      	ldr	r3, [sp, #16]
 8015f66:	42ab      	cmp	r3, r5
 8015f68:	db08      	blt.n	8015f7c <_dtoa_r+0x8b0>
 8015f6a:	1b5d      	subs	r5, r3, r5
 8015f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	da0c      	bge.n	8015f8c <_dtoa_r+0x8c0>
 8015f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f76:	1a9c      	subs	r4, r3, r2
 8015f78:	2300      	movs	r3, #0
 8015f7a:	e73b      	b.n	8015df4 <_dtoa_r+0x728>
 8015f7c:	9b04      	ldr	r3, [sp, #16]
 8015f7e:	9504      	str	r5, [sp, #16]
 8015f80:	1aea      	subs	r2, r5, r3
 8015f82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f84:	2500      	movs	r5, #0
 8015f86:	189b      	adds	r3, r3, r2
 8015f88:	9311      	str	r3, [sp, #68]	; 0x44
 8015f8a:	e7ef      	b.n	8015f6c <_dtoa_r+0x8a0>
 8015f8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f90:	e730      	b.n	8015df4 <_dtoa_r+0x728>
 8015f92:	9d04      	ldr	r5, [sp, #16]
 8015f94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015f96:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8015f98:	e737      	b.n	8015e0a <_dtoa_r+0x73e>
 8015f9a:	9a04      	ldr	r2, [sp, #16]
 8015f9c:	e764      	b.n	8015e68 <_dtoa_r+0x79c>
 8015f9e:	2500      	movs	r5, #0
 8015fa0:	9b04      	ldr	r3, [sp, #16]
 8015fa2:	9a04      	ldr	r2, [sp, #16]
 8015fa4:	691b      	ldr	r3, [r3, #16]
 8015fa6:	9310      	str	r3, [sp, #64]	; 0x40
 8015fa8:	3303      	adds	r3, #3
 8015faa:	009b      	lsls	r3, r3, #2
 8015fac:	18d3      	adds	r3, r2, r3
 8015fae:	6858      	ldr	r0, [r3, #4]
 8015fb0:	f000 fe8e 	bl	8016cd0 <__hi0bits>
 8015fb4:	2320      	movs	r3, #32
 8015fb6:	1a18      	subs	r0, r3, r0
 8015fb8:	e785      	b.n	8015ec6 <_dtoa_r+0x7fa>
 8015fba:	2b04      	cmp	r3, #4
 8015fbc:	d095      	beq.n	8015eea <_dtoa_r+0x81e>
 8015fbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015fc0:	331c      	adds	r3, #28
 8015fc2:	18d2      	adds	r2, r2, r3
 8015fc4:	920a      	str	r2, [sp, #40]	; 0x28
 8015fc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015fc8:	18e4      	adds	r4, r4, r3
 8015fca:	18d3      	adds	r3, r2, r3
 8015fcc:	e78c      	b.n	8015ee8 <_dtoa_r+0x81c>
 8015fce:	0003      	movs	r3, r0
 8015fd0:	e7f5      	b.n	8015fbe <_dtoa_r+0x8f2>
 8015fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	dc3d      	bgt.n	8016054 <_dtoa_r+0x988>
 8015fd8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015fda:	2b02      	cmp	r3, #2
 8015fdc:	dd3a      	ble.n	8016054 <_dtoa_r+0x988>
 8015fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fe0:	930c      	str	r3, [sp, #48]	; 0x30
 8015fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d10c      	bne.n	8016002 <_dtoa_r+0x936>
 8015fe8:	9904      	ldr	r1, [sp, #16]
 8015fea:	2205      	movs	r2, #5
 8015fec:	9802      	ldr	r0, [sp, #8]
 8015fee:	f000 fdf3 	bl	8016bd8 <__multadd>
 8015ff2:	9004      	str	r0, [sp, #16]
 8015ff4:	0001      	movs	r1, r0
 8015ff6:	9803      	ldr	r0, [sp, #12]
 8015ff8:	f000 ffe0 	bl	8016fbc <__mcmp>
 8015ffc:	2800      	cmp	r0, #0
 8015ffe:	dd00      	ble.n	8016002 <_dtoa_r+0x936>
 8016000:	e5ad      	b.n	8015b5e <_dtoa_r+0x492>
 8016002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016004:	9d08      	ldr	r5, [sp, #32]
 8016006:	43df      	mvns	r7, r3
 8016008:	2300      	movs	r3, #0
 801600a:	9309      	str	r3, [sp, #36]	; 0x24
 801600c:	9904      	ldr	r1, [sp, #16]
 801600e:	9802      	ldr	r0, [sp, #8]
 8016010:	f000 fdd8 	bl	8016bc4 <_Bfree>
 8016014:	2e00      	cmp	r6, #0
 8016016:	d100      	bne.n	801601a <_dtoa_r+0x94e>
 8016018:	e69b      	b.n	8015d52 <_dtoa_r+0x686>
 801601a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801601c:	2b00      	cmp	r3, #0
 801601e:	d005      	beq.n	801602c <_dtoa_r+0x960>
 8016020:	42b3      	cmp	r3, r6
 8016022:	d003      	beq.n	801602c <_dtoa_r+0x960>
 8016024:	0019      	movs	r1, r3
 8016026:	9802      	ldr	r0, [sp, #8]
 8016028:	f000 fdcc 	bl	8016bc4 <_Bfree>
 801602c:	0031      	movs	r1, r6
 801602e:	9802      	ldr	r0, [sp, #8]
 8016030:	f000 fdc8 	bl	8016bc4 <_Bfree>
 8016034:	e68d      	b.n	8015d52 <_dtoa_r+0x686>
 8016036:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016038:	9304      	str	r3, [sp, #16]
 801603a:	001e      	movs	r6, r3
 801603c:	e7e1      	b.n	8016002 <_dtoa_r+0x936>
 801603e:	2300      	movs	r3, #0
 8016040:	e7fa      	b.n	8016038 <_dtoa_r+0x96c>
 8016042:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016044:	0037      	movs	r7, r6
 8016046:	9304      	str	r3, [sp, #16]
 8016048:	001e      	movs	r6, r3
 801604a:	e588      	b.n	8015b5e <_dtoa_r+0x492>
 801604c:	40240000 	.word	0x40240000
 8016050:	00000433 	.word	0x00000433
 8016054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016056:	2b00      	cmp	r3, #0
 8016058:	d100      	bne.n	801605c <_dtoa_r+0x990>
 801605a:	e0b2      	b.n	80161c2 <_dtoa_r+0xaf6>
 801605c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801605e:	930c      	str	r3, [sp, #48]	; 0x30
 8016060:	2c00      	cmp	r4, #0
 8016062:	dd05      	ble.n	8016070 <_dtoa_r+0x9a4>
 8016064:	0031      	movs	r1, r6
 8016066:	0022      	movs	r2, r4
 8016068:	9802      	ldr	r0, [sp, #8]
 801606a:	f000 ff55 	bl	8016f18 <__lshift>
 801606e:	0006      	movs	r6, r0
 8016070:	0030      	movs	r0, r6
 8016072:	2d00      	cmp	r5, #0
 8016074:	d011      	beq.n	801609a <_dtoa_r+0x9ce>
 8016076:	6871      	ldr	r1, [r6, #4]
 8016078:	9802      	ldr	r0, [sp, #8]
 801607a:	f000 fd7b 	bl	8016b74 <_Balloc>
 801607e:	0031      	movs	r1, r6
 8016080:	0004      	movs	r4, r0
 8016082:	6933      	ldr	r3, [r6, #16]
 8016084:	310c      	adds	r1, #12
 8016086:	1c9a      	adds	r2, r3, #2
 8016088:	0092      	lsls	r2, r2, #2
 801608a:	300c      	adds	r0, #12
 801608c:	f7fc fe8b 	bl	8012da6 <memcpy>
 8016090:	2201      	movs	r2, #1
 8016092:	0021      	movs	r1, r4
 8016094:	9802      	ldr	r0, [sp, #8]
 8016096:	f000 ff3f 	bl	8016f18 <__lshift>
 801609a:	9609      	str	r6, [sp, #36]	; 0x24
 801609c:	0006      	movs	r6, r0
 801609e:	9b08      	ldr	r3, [sp, #32]
 80160a0:	930a      	str	r3, [sp, #40]	; 0x28
 80160a2:	9904      	ldr	r1, [sp, #16]
 80160a4:	9803      	ldr	r0, [sp, #12]
 80160a6:	f7ff fa8b 	bl	80155c0 <quorem>
 80160aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80160ac:	900d      	str	r0, [sp, #52]	; 0x34
 80160ae:	0004      	movs	r4, r0
 80160b0:	9803      	ldr	r0, [sp, #12]
 80160b2:	f000 ff83 	bl	8016fbc <__mcmp>
 80160b6:	0032      	movs	r2, r6
 80160b8:	9010      	str	r0, [sp, #64]	; 0x40
 80160ba:	9904      	ldr	r1, [sp, #16]
 80160bc:	9802      	ldr	r0, [sp, #8]
 80160be:	f000 ff97 	bl	8016ff0 <__mdiff>
 80160c2:	2301      	movs	r3, #1
 80160c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80160c6:	68c3      	ldr	r3, [r0, #12]
 80160c8:	3430      	adds	r4, #48	; 0x30
 80160ca:	0005      	movs	r5, r0
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d104      	bne.n	80160da <_dtoa_r+0xa0e>
 80160d0:	0001      	movs	r1, r0
 80160d2:	9803      	ldr	r0, [sp, #12]
 80160d4:	f000 ff72 	bl	8016fbc <__mcmp>
 80160d8:	900b      	str	r0, [sp, #44]	; 0x2c
 80160da:	0029      	movs	r1, r5
 80160dc:	9802      	ldr	r0, [sp, #8]
 80160de:	f000 fd71 	bl	8016bc4 <_Bfree>
 80160e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80160e6:	4313      	orrs	r3, r2
 80160e8:	d10e      	bne.n	8016108 <_dtoa_r+0xa3c>
 80160ea:	9a06      	ldr	r2, [sp, #24]
 80160ec:	3301      	adds	r3, #1
 80160ee:	4213      	tst	r3, r2
 80160f0:	d10a      	bne.n	8016108 <_dtoa_r+0xa3c>
 80160f2:	2c39      	cmp	r4, #57	; 0x39
 80160f4:	d026      	beq.n	8016144 <_dtoa_r+0xa78>
 80160f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	dd01      	ble.n	8016100 <_dtoa_r+0xa34>
 80160fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80160fe:	3431      	adds	r4, #49	; 0x31
 8016100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016102:	1c5d      	adds	r5, r3, #1
 8016104:	701c      	strb	r4, [r3, #0]
 8016106:	e781      	b.n	801600c <_dtoa_r+0x940>
 8016108:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801610a:	2b00      	cmp	r3, #0
 801610c:	db07      	blt.n	801611e <_dtoa_r+0xa52>
 801610e:	001d      	movs	r5, r3
 8016110:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016112:	431d      	orrs	r5, r3
 8016114:	d122      	bne.n	801615c <_dtoa_r+0xa90>
 8016116:	2301      	movs	r3, #1
 8016118:	9a06      	ldr	r2, [sp, #24]
 801611a:	4213      	tst	r3, r2
 801611c:	d11e      	bne.n	801615c <_dtoa_r+0xa90>
 801611e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016120:	2b00      	cmp	r3, #0
 8016122:	dded      	ble.n	8016100 <_dtoa_r+0xa34>
 8016124:	9903      	ldr	r1, [sp, #12]
 8016126:	2201      	movs	r2, #1
 8016128:	9802      	ldr	r0, [sp, #8]
 801612a:	f000 fef5 	bl	8016f18 <__lshift>
 801612e:	9904      	ldr	r1, [sp, #16]
 8016130:	9003      	str	r0, [sp, #12]
 8016132:	f000 ff43 	bl	8016fbc <__mcmp>
 8016136:	2800      	cmp	r0, #0
 8016138:	dc02      	bgt.n	8016140 <_dtoa_r+0xa74>
 801613a:	d1e1      	bne.n	8016100 <_dtoa_r+0xa34>
 801613c:	07e3      	lsls	r3, r4, #31
 801613e:	d5df      	bpl.n	8016100 <_dtoa_r+0xa34>
 8016140:	2c39      	cmp	r4, #57	; 0x39
 8016142:	d1db      	bne.n	80160fc <_dtoa_r+0xa30>
 8016144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016148:	1c5d      	adds	r5, r3, #1
 801614a:	2339      	movs	r3, #57	; 0x39
 801614c:	7013      	strb	r3, [r2, #0]
 801614e:	1e6b      	subs	r3, r5, #1
 8016150:	781a      	ldrb	r2, [r3, #0]
 8016152:	2a39      	cmp	r2, #57	; 0x39
 8016154:	d067      	beq.n	8016226 <_dtoa_r+0xb5a>
 8016156:	3201      	adds	r2, #1
 8016158:	701a      	strb	r2, [r3, #0]
 801615a:	e757      	b.n	801600c <_dtoa_r+0x940>
 801615c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801615e:	1c5d      	adds	r5, r3, #1
 8016160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016162:	2b00      	cmp	r3, #0
 8016164:	dd04      	ble.n	8016170 <_dtoa_r+0xaa4>
 8016166:	2c39      	cmp	r4, #57	; 0x39
 8016168:	d0ec      	beq.n	8016144 <_dtoa_r+0xa78>
 801616a:	3401      	adds	r4, #1
 801616c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801616e:	e7c9      	b.n	8016104 <_dtoa_r+0xa38>
 8016170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016172:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016174:	701c      	strb	r4, [r3, #0]
 8016176:	9b08      	ldr	r3, [sp, #32]
 8016178:	1aeb      	subs	r3, r5, r3
 801617a:	4293      	cmp	r3, r2
 801617c:	d03e      	beq.n	80161fc <_dtoa_r+0xb30>
 801617e:	2300      	movs	r3, #0
 8016180:	220a      	movs	r2, #10
 8016182:	9903      	ldr	r1, [sp, #12]
 8016184:	9802      	ldr	r0, [sp, #8]
 8016186:	f000 fd27 	bl	8016bd8 <__multadd>
 801618a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801618c:	9003      	str	r0, [sp, #12]
 801618e:	42b3      	cmp	r3, r6
 8016190:	d109      	bne.n	80161a6 <_dtoa_r+0xada>
 8016192:	2300      	movs	r3, #0
 8016194:	220a      	movs	r2, #10
 8016196:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016198:	9802      	ldr	r0, [sp, #8]
 801619a:	f000 fd1d 	bl	8016bd8 <__multadd>
 801619e:	9009      	str	r0, [sp, #36]	; 0x24
 80161a0:	0006      	movs	r6, r0
 80161a2:	950a      	str	r5, [sp, #40]	; 0x28
 80161a4:	e77d      	b.n	80160a2 <_dtoa_r+0x9d6>
 80161a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80161a8:	2300      	movs	r3, #0
 80161aa:	220a      	movs	r2, #10
 80161ac:	9802      	ldr	r0, [sp, #8]
 80161ae:	f000 fd13 	bl	8016bd8 <__multadd>
 80161b2:	2300      	movs	r3, #0
 80161b4:	9009      	str	r0, [sp, #36]	; 0x24
 80161b6:	220a      	movs	r2, #10
 80161b8:	0031      	movs	r1, r6
 80161ba:	9802      	ldr	r0, [sp, #8]
 80161bc:	f000 fd0c 	bl	8016bd8 <__multadd>
 80161c0:	e7ee      	b.n	80161a0 <_dtoa_r+0xad4>
 80161c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161c4:	930c      	str	r3, [sp, #48]	; 0x30
 80161c6:	9b08      	ldr	r3, [sp, #32]
 80161c8:	9306      	str	r3, [sp, #24]
 80161ca:	9904      	ldr	r1, [sp, #16]
 80161cc:	9803      	ldr	r0, [sp, #12]
 80161ce:	f7ff f9f7 	bl	80155c0 <quorem>
 80161d2:	9b06      	ldr	r3, [sp, #24]
 80161d4:	3030      	adds	r0, #48	; 0x30
 80161d6:	1c5d      	adds	r5, r3, #1
 80161d8:	7018      	strb	r0, [r3, #0]
 80161da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80161dc:	9b08      	ldr	r3, [sp, #32]
 80161de:	0004      	movs	r4, r0
 80161e0:	1aeb      	subs	r3, r5, r3
 80161e2:	429a      	cmp	r2, r3
 80161e4:	dd08      	ble.n	80161f8 <_dtoa_r+0xb2c>
 80161e6:	2300      	movs	r3, #0
 80161e8:	220a      	movs	r2, #10
 80161ea:	9903      	ldr	r1, [sp, #12]
 80161ec:	9802      	ldr	r0, [sp, #8]
 80161ee:	f000 fcf3 	bl	8016bd8 <__multadd>
 80161f2:	9506      	str	r5, [sp, #24]
 80161f4:	9003      	str	r0, [sp, #12]
 80161f6:	e7e8      	b.n	80161ca <_dtoa_r+0xafe>
 80161f8:	2300      	movs	r3, #0
 80161fa:	9309      	str	r3, [sp, #36]	; 0x24
 80161fc:	9903      	ldr	r1, [sp, #12]
 80161fe:	2201      	movs	r2, #1
 8016200:	9802      	ldr	r0, [sp, #8]
 8016202:	f000 fe89 	bl	8016f18 <__lshift>
 8016206:	9904      	ldr	r1, [sp, #16]
 8016208:	9003      	str	r0, [sp, #12]
 801620a:	f000 fed7 	bl	8016fbc <__mcmp>
 801620e:	2800      	cmp	r0, #0
 8016210:	dc9d      	bgt.n	801614e <_dtoa_r+0xa82>
 8016212:	d101      	bne.n	8016218 <_dtoa_r+0xb4c>
 8016214:	07e3      	lsls	r3, r4, #31
 8016216:	d49a      	bmi.n	801614e <_dtoa_r+0xa82>
 8016218:	1e6b      	subs	r3, r5, #1
 801621a:	781a      	ldrb	r2, [r3, #0]
 801621c:	2a30      	cmp	r2, #48	; 0x30
 801621e:	d000      	beq.n	8016222 <_dtoa_r+0xb56>
 8016220:	e6f4      	b.n	801600c <_dtoa_r+0x940>
 8016222:	001d      	movs	r5, r3
 8016224:	e7f8      	b.n	8016218 <_dtoa_r+0xb4c>
 8016226:	9a08      	ldr	r2, [sp, #32]
 8016228:	429a      	cmp	r2, r3
 801622a:	d103      	bne.n	8016234 <_dtoa_r+0xb68>
 801622c:	2331      	movs	r3, #49	; 0x31
 801622e:	3701      	adds	r7, #1
 8016230:	7013      	strb	r3, [r2, #0]
 8016232:	e6eb      	b.n	801600c <_dtoa_r+0x940>
 8016234:	001d      	movs	r5, r3
 8016236:	e78a      	b.n	801614e <_dtoa_r+0xa82>
 8016238:	4b0b      	ldr	r3, [pc, #44]	; (8016268 <_dtoa_r+0xb9c>)
 801623a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801623c:	9308      	str	r3, [sp, #32]
 801623e:	4b0b      	ldr	r3, [pc, #44]	; (801626c <_dtoa_r+0xba0>)
 8016240:	2a00      	cmp	r2, #0
 8016242:	d001      	beq.n	8016248 <_dtoa_r+0xb7c>
 8016244:	f7ff fa75 	bl	8015732 <_dtoa_r+0x66>
 8016248:	f7ff fa75 	bl	8015736 <_dtoa_r+0x6a>
 801624c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801624e:	2b01      	cmp	r3, #1
 8016250:	dc00      	bgt.n	8016254 <_dtoa_r+0xb88>
 8016252:	e621      	b.n	8015e98 <_dtoa_r+0x7cc>
 8016254:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016256:	2001      	movs	r0, #1
 8016258:	e635      	b.n	8015ec6 <_dtoa_r+0x7fa>
 801625a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801625c:	2b00      	cmp	r3, #0
 801625e:	dcb2      	bgt.n	80161c6 <_dtoa_r+0xafa>
 8016260:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016262:	2b02      	cmp	r3, #2
 8016264:	ddaf      	ble.n	80161c6 <_dtoa_r+0xafa>
 8016266:	e6bc      	b.n	8015fe2 <_dtoa_r+0x916>
 8016268:	0801a6ed 	.word	0x0801a6ed
 801626c:	0801a6f5 	.word	0x0801a6f5

08016270 <__errno>:
 8016270:	4b01      	ldr	r3, [pc, #4]	; (8016278 <__errno+0x8>)
 8016272:	6818      	ldr	r0, [r3, #0]
 8016274:	4770      	bx	lr
 8016276:	46c0      	nop			; (mov r8, r8)
 8016278:	200000cc 	.word	0x200000cc

0801627c <__libc_fini_array>:
 801627c:	b570      	push	{r4, r5, r6, lr}
 801627e:	4d07      	ldr	r5, [pc, #28]	; (801629c <__libc_fini_array+0x20>)
 8016280:	4c07      	ldr	r4, [pc, #28]	; (80162a0 <__libc_fini_array+0x24>)
 8016282:	1b64      	subs	r4, r4, r5
 8016284:	10a4      	asrs	r4, r4, #2
 8016286:	2c00      	cmp	r4, #0
 8016288:	d102      	bne.n	8016290 <__libc_fini_array+0x14>
 801628a:	f001 f987 	bl	801759c <_fini>
 801628e:	bd70      	pop	{r4, r5, r6, pc}
 8016290:	3c01      	subs	r4, #1
 8016292:	00a3      	lsls	r3, r4, #2
 8016294:	58eb      	ldr	r3, [r5, r3]
 8016296:	4798      	blx	r3
 8016298:	e7f5      	b.n	8016286 <__libc_fini_array+0xa>
 801629a:	46c0      	nop			; (mov r8, r8)
 801629c:	0801a80c 	.word	0x0801a80c
 80162a0:	0801a810 	.word	0x0801a810

080162a4 <_malloc_trim_r>:
 80162a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80162a6:	0005      	movs	r5, r0
 80162a8:	2008      	movs	r0, #8
 80162aa:	000c      	movs	r4, r1
 80162ac:	f7ff f95c 	bl	8015568 <sysconf>
 80162b0:	0007      	movs	r7, r0
 80162b2:	0028      	movs	r0, r5
 80162b4:	f7fc fd88 	bl	8012dc8 <__malloc_lock>
 80162b8:	2203      	movs	r2, #3
 80162ba:	4e21      	ldr	r6, [pc, #132]	; (8016340 <_malloc_trim_r+0x9c>)
 80162bc:	0039      	movs	r1, r7
 80162be:	68b3      	ldr	r3, [r6, #8]
 80162c0:	685b      	ldr	r3, [r3, #4]
 80162c2:	4393      	bics	r3, r2
 80162c4:	1b18      	subs	r0, r3, r4
 80162c6:	3811      	subs	r0, #17
 80162c8:	19c0      	adds	r0, r0, r7
 80162ca:	9301      	str	r3, [sp, #4]
 80162cc:	f7e9 ff40 	bl	8000150 <__udivsi3>
 80162d0:	1e44      	subs	r4, r0, #1
 80162d2:	437c      	muls	r4, r7
 80162d4:	42a7      	cmp	r7, r4
 80162d6:	dd04      	ble.n	80162e2 <_malloc_trim_r+0x3e>
 80162d8:	0028      	movs	r0, r5
 80162da:	f7fc fd7d 	bl	8012dd8 <__malloc_unlock>
 80162de:	2000      	movs	r0, #0
 80162e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80162e2:	2100      	movs	r1, #0
 80162e4:	0028      	movs	r0, r5
 80162e6:	f7fc ff4f 	bl	8013188 <_sbrk_r>
 80162ea:	68b3      	ldr	r3, [r6, #8]
 80162ec:	9a01      	ldr	r2, [sp, #4]
 80162ee:	189b      	adds	r3, r3, r2
 80162f0:	4298      	cmp	r0, r3
 80162f2:	d1f1      	bne.n	80162d8 <_malloc_trim_r+0x34>
 80162f4:	4261      	negs	r1, r4
 80162f6:	0028      	movs	r0, r5
 80162f8:	f7fc ff46 	bl	8013188 <_sbrk_r>
 80162fc:	1c43      	adds	r3, r0, #1
 80162fe:	d110      	bne.n	8016322 <_malloc_trim_r+0x7e>
 8016300:	2100      	movs	r1, #0
 8016302:	0028      	movs	r0, r5
 8016304:	f7fc ff40 	bl	8013188 <_sbrk_r>
 8016308:	68b2      	ldr	r2, [r6, #8]
 801630a:	1a81      	subs	r1, r0, r2
 801630c:	290f      	cmp	r1, #15
 801630e:	dde3      	ble.n	80162d8 <_malloc_trim_r+0x34>
 8016310:	4b0c      	ldr	r3, [pc, #48]	; (8016344 <_malloc_trim_r+0xa0>)
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	1ac0      	subs	r0, r0, r3
 8016316:	4b0c      	ldr	r3, [pc, #48]	; (8016348 <_malloc_trim_r+0xa4>)
 8016318:	6018      	str	r0, [r3, #0]
 801631a:	2301      	movs	r3, #1
 801631c:	430b      	orrs	r3, r1
 801631e:	6053      	str	r3, [r2, #4]
 8016320:	e7da      	b.n	80162d8 <_malloc_trim_r+0x34>
 8016322:	68b2      	ldr	r2, [r6, #8]
 8016324:	2601      	movs	r6, #1
 8016326:	9b01      	ldr	r3, [sp, #4]
 8016328:	0028      	movs	r0, r5
 801632a:	1b1b      	subs	r3, r3, r4
 801632c:	4333      	orrs	r3, r6
 801632e:	6053      	str	r3, [r2, #4]
 8016330:	4b05      	ldr	r3, [pc, #20]	; (8016348 <_malloc_trim_r+0xa4>)
 8016332:	681a      	ldr	r2, [r3, #0]
 8016334:	1b14      	subs	r4, r2, r4
 8016336:	601c      	str	r4, [r3, #0]
 8016338:	f7fc fd4e 	bl	8012dd8 <__malloc_unlock>
 801633c:	0030      	movs	r0, r6
 801633e:	e7cf      	b.n	80162e0 <_malloc_trim_r+0x3c>
 8016340:	20000664 	.word	0x20000664
 8016344:	20000a6c 	.word	0x20000a6c
 8016348:	2000678c 	.word	0x2000678c

0801634c <_free_r>:
 801634c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801634e:	1e0d      	subs	r5, r1, #0
 8016350:	9001      	str	r0, [sp, #4]
 8016352:	d02d      	beq.n	80163b0 <_free_r+0x64>
 8016354:	f7fc fd38 	bl	8012dc8 <__malloc_lock>
 8016358:	2301      	movs	r3, #1
 801635a:	0029      	movs	r1, r5
 801635c:	469c      	mov	ip, r3
 801635e:	3908      	subs	r1, #8
 8016360:	684f      	ldr	r7, [r1, #4]
 8016362:	4662      	mov	r2, ip
 8016364:	003b      	movs	r3, r7
 8016366:	4666      	mov	r6, ip
 8016368:	4393      	bics	r3, r2
 801636a:	18c8      	adds	r0, r1, r3
 801636c:	6845      	ldr	r5, [r0, #4]
 801636e:	3202      	adds	r2, #2
 8016370:	4395      	bics	r5, r2
 8016372:	4a4a      	ldr	r2, [pc, #296]	; (801649c <_free_r+0x150>)
 8016374:	4037      	ands	r7, r6
 8016376:	6896      	ldr	r6, [r2, #8]
 8016378:	4286      	cmp	r6, r0
 801637a:	d11a      	bne.n	80163b2 <_free_r+0x66>
 801637c:	195b      	adds	r3, r3, r5
 801637e:	2f00      	cmp	r7, #0
 8016380:	d106      	bne.n	8016390 <_free_r+0x44>
 8016382:	6808      	ldr	r0, [r1, #0]
 8016384:	1a09      	subs	r1, r1, r0
 8016386:	688d      	ldr	r5, [r1, #8]
 8016388:	181b      	adds	r3, r3, r0
 801638a:	68c8      	ldr	r0, [r1, #12]
 801638c:	60e8      	str	r0, [r5, #12]
 801638e:	6085      	str	r5, [r0, #8]
 8016390:	2001      	movs	r0, #1
 8016392:	4318      	orrs	r0, r3
 8016394:	6048      	str	r0, [r1, #4]
 8016396:	6091      	str	r1, [r2, #8]
 8016398:	4a41      	ldr	r2, [pc, #260]	; (80164a0 <_free_r+0x154>)
 801639a:	6812      	ldr	r2, [r2, #0]
 801639c:	429a      	cmp	r2, r3
 801639e:	d804      	bhi.n	80163aa <_free_r+0x5e>
 80163a0:	4b40      	ldr	r3, [pc, #256]	; (80164a4 <_free_r+0x158>)
 80163a2:	9801      	ldr	r0, [sp, #4]
 80163a4:	6819      	ldr	r1, [r3, #0]
 80163a6:	f7ff ff7d 	bl	80162a4 <_malloc_trim_r>
 80163aa:	9801      	ldr	r0, [sp, #4]
 80163ac:	f7fc fd14 	bl	8012dd8 <__malloc_unlock>
 80163b0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80163b2:	2600      	movs	r6, #0
 80163b4:	6045      	str	r5, [r0, #4]
 80163b6:	42b7      	cmp	r7, r6
 80163b8:	d109      	bne.n	80163ce <_free_r+0x82>
 80163ba:	680f      	ldr	r7, [r1, #0]
 80163bc:	4c3a      	ldr	r4, [pc, #232]	; (80164a8 <_free_r+0x15c>)
 80163be:	1bc9      	subs	r1, r1, r7
 80163c0:	19db      	adds	r3, r3, r7
 80163c2:	688f      	ldr	r7, [r1, #8]
 80163c4:	42a7      	cmp	r7, r4
 80163c6:	d02b      	beq.n	8016420 <_free_r+0xd4>
 80163c8:	68cc      	ldr	r4, [r1, #12]
 80163ca:	60fc      	str	r4, [r7, #12]
 80163cc:	60a7      	str	r7, [r4, #8]
 80163ce:	1947      	adds	r7, r0, r5
 80163d0:	687c      	ldr	r4, [r7, #4]
 80163d2:	2701      	movs	r7, #1
 80163d4:	423c      	tst	r4, r7
 80163d6:	d10b      	bne.n	80163f0 <_free_r+0xa4>
 80163d8:	195b      	adds	r3, r3, r5
 80163da:	6885      	ldr	r5, [r0, #8]
 80163dc:	2e00      	cmp	r6, #0
 80163de:	d121      	bne.n	8016424 <_free_r+0xd8>
 80163e0:	4c31      	ldr	r4, [pc, #196]	; (80164a8 <_free_r+0x15c>)
 80163e2:	42a5      	cmp	r5, r4
 80163e4:	d11e      	bne.n	8016424 <_free_r+0xd8>
 80163e6:	003e      	movs	r6, r7
 80163e8:	6151      	str	r1, [r2, #20]
 80163ea:	6111      	str	r1, [r2, #16]
 80163ec:	60cd      	str	r5, [r1, #12]
 80163ee:	608d      	str	r5, [r1, #8]
 80163f0:	2001      	movs	r0, #1
 80163f2:	0005      	movs	r5, r0
 80163f4:	431d      	orrs	r5, r3
 80163f6:	604d      	str	r5, [r1, #4]
 80163f8:	50cb      	str	r3, [r1, r3]
 80163fa:	2e00      	cmp	r6, #0
 80163fc:	d1d5      	bne.n	80163aa <_free_r+0x5e>
 80163fe:	4d2b      	ldr	r5, [pc, #172]	; (80164ac <_free_r+0x160>)
 8016400:	42ab      	cmp	r3, r5
 8016402:	d813      	bhi.n	801642c <_free_r+0xe0>
 8016404:	08db      	lsrs	r3, r3, #3
 8016406:	109d      	asrs	r5, r3, #2
 8016408:	40a8      	lsls	r0, r5
 801640a:	6854      	ldr	r4, [r2, #4]
 801640c:	00db      	lsls	r3, r3, #3
 801640e:	4320      	orrs	r0, r4
 8016410:	6050      	str	r0, [r2, #4]
 8016412:	189a      	adds	r2, r3, r2
 8016414:	6893      	ldr	r3, [r2, #8]
 8016416:	60ca      	str	r2, [r1, #12]
 8016418:	608b      	str	r3, [r1, #8]
 801641a:	6091      	str	r1, [r2, #8]
 801641c:	60d9      	str	r1, [r3, #12]
 801641e:	e7c4      	b.n	80163aa <_free_r+0x5e>
 8016420:	4666      	mov	r6, ip
 8016422:	e7d4      	b.n	80163ce <_free_r+0x82>
 8016424:	68c0      	ldr	r0, [r0, #12]
 8016426:	60e8      	str	r0, [r5, #12]
 8016428:	6085      	str	r5, [r0, #8]
 801642a:	e7e1      	b.n	80163f0 <_free_r+0xa4>
 801642c:	0a5d      	lsrs	r5, r3, #9
 801642e:	2d04      	cmp	r5, #4
 8016430:	d812      	bhi.n	8016458 <_free_r+0x10c>
 8016432:	0998      	lsrs	r0, r3, #6
 8016434:	3038      	adds	r0, #56	; 0x38
 8016436:	00c6      	lsls	r6, r0, #3
 8016438:	18b6      	adds	r6, r6, r2
 801643a:	68b5      	ldr	r5, [r6, #8]
 801643c:	2703      	movs	r7, #3
 801643e:	42ae      	cmp	r6, r5
 8016440:	d125      	bne.n	801648e <_free_r+0x142>
 8016442:	2301      	movs	r3, #1
 8016444:	1080      	asrs	r0, r0, #2
 8016446:	4083      	lsls	r3, r0
 8016448:	6850      	ldr	r0, [r2, #4]
 801644a:	4303      	orrs	r3, r0
 801644c:	6053      	str	r3, [r2, #4]
 801644e:	60ce      	str	r6, [r1, #12]
 8016450:	608d      	str	r5, [r1, #8]
 8016452:	60b1      	str	r1, [r6, #8]
 8016454:	60e9      	str	r1, [r5, #12]
 8016456:	e7a8      	b.n	80163aa <_free_r+0x5e>
 8016458:	2d14      	cmp	r5, #20
 801645a:	d802      	bhi.n	8016462 <_free_r+0x116>
 801645c:	0028      	movs	r0, r5
 801645e:	305b      	adds	r0, #91	; 0x5b
 8016460:	e7e9      	b.n	8016436 <_free_r+0xea>
 8016462:	2d54      	cmp	r5, #84	; 0x54
 8016464:	d802      	bhi.n	801646c <_free_r+0x120>
 8016466:	0b18      	lsrs	r0, r3, #12
 8016468:	306e      	adds	r0, #110	; 0x6e
 801646a:	e7e4      	b.n	8016436 <_free_r+0xea>
 801646c:	20aa      	movs	r0, #170	; 0xaa
 801646e:	0040      	lsls	r0, r0, #1
 8016470:	4285      	cmp	r5, r0
 8016472:	d802      	bhi.n	801647a <_free_r+0x12e>
 8016474:	0bd8      	lsrs	r0, r3, #15
 8016476:	3077      	adds	r0, #119	; 0x77
 8016478:	e7dd      	b.n	8016436 <_free_r+0xea>
 801647a:	4e0d      	ldr	r6, [pc, #52]	; (80164b0 <_free_r+0x164>)
 801647c:	207e      	movs	r0, #126	; 0x7e
 801647e:	42b5      	cmp	r5, r6
 8016480:	d8d9      	bhi.n	8016436 <_free_r+0xea>
 8016482:	0c98      	lsrs	r0, r3, #18
 8016484:	307c      	adds	r0, #124	; 0x7c
 8016486:	e7d6      	b.n	8016436 <_free_r+0xea>
 8016488:	68ad      	ldr	r5, [r5, #8]
 801648a:	42ae      	cmp	r6, r5
 801648c:	d003      	beq.n	8016496 <_free_r+0x14a>
 801648e:	686a      	ldr	r2, [r5, #4]
 8016490:	43ba      	bics	r2, r7
 8016492:	429a      	cmp	r2, r3
 8016494:	d8f8      	bhi.n	8016488 <_free_r+0x13c>
 8016496:	68ee      	ldr	r6, [r5, #12]
 8016498:	e7d9      	b.n	801644e <_free_r+0x102>
 801649a:	46c0      	nop			; (mov r8, r8)
 801649c:	20000664 	.word	0x20000664
 80164a0:	20000a70 	.word	0x20000a70
 80164a4:	200067bc 	.word	0x200067bc
 80164a8:	2000066c 	.word	0x2000066c
 80164ac:	000001ff 	.word	0x000001ff
 80164b0:	00000554 	.word	0x00000554

080164b4 <rshift>:
 80164b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164b6:	0004      	movs	r4, r0
 80164b8:	6905      	ldr	r5, [r0, #16]
 80164ba:	3414      	adds	r4, #20
 80164bc:	114b      	asrs	r3, r1, #5
 80164be:	0026      	movs	r6, r4
 80164c0:	429d      	cmp	r5, r3
 80164c2:	dd14      	ble.n	80164ee <rshift+0x3a>
 80164c4:	221f      	movs	r2, #31
 80164c6:	00ad      	lsls	r5, r5, #2
 80164c8:	009b      	lsls	r3, r3, #2
 80164ca:	4011      	ands	r1, r2
 80164cc:	1965      	adds	r5, r4, r5
 80164ce:	18e3      	adds	r3, r4, r3
 80164d0:	0022      	movs	r2, r4
 80164d2:	2900      	cmp	r1, #0
 80164d4:	d01e      	beq.n	8016514 <rshift+0x60>
 80164d6:	cb04      	ldmia	r3!, {r2}
 80164d8:	2720      	movs	r7, #32
 80164da:	40ca      	lsrs	r2, r1
 80164dc:	46a4      	mov	ip, r4
 80164de:	1a7f      	subs	r7, r7, r1
 80164e0:	4666      	mov	r6, ip
 80164e2:	429d      	cmp	r5, r3
 80164e4:	d80b      	bhi.n	80164fe <rshift+0x4a>
 80164e6:	6032      	str	r2, [r6, #0]
 80164e8:	2a00      	cmp	r2, #0
 80164ea:	d000      	beq.n	80164ee <rshift+0x3a>
 80164ec:	3604      	adds	r6, #4
 80164ee:	1b33      	subs	r3, r6, r4
 80164f0:	109b      	asrs	r3, r3, #2
 80164f2:	6103      	str	r3, [r0, #16]
 80164f4:	42a6      	cmp	r6, r4
 80164f6:	d101      	bne.n	80164fc <rshift+0x48>
 80164f8:	2300      	movs	r3, #0
 80164fa:	6143      	str	r3, [r0, #20]
 80164fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164fe:	681e      	ldr	r6, [r3, #0]
 8016500:	40be      	lsls	r6, r7
 8016502:	4332      	orrs	r2, r6
 8016504:	4666      	mov	r6, ip
 8016506:	c604      	stmia	r6!, {r2}
 8016508:	cb04      	ldmia	r3!, {r2}
 801650a:	46b4      	mov	ip, r6
 801650c:	40ca      	lsrs	r2, r1
 801650e:	e7e7      	b.n	80164e0 <rshift+0x2c>
 8016510:	cb02      	ldmia	r3!, {r1}
 8016512:	c202      	stmia	r2!, {r1}
 8016514:	0016      	movs	r6, r2
 8016516:	429d      	cmp	r5, r3
 8016518:	d8fa      	bhi.n	8016510 <rshift+0x5c>
 801651a:	e7e8      	b.n	80164ee <rshift+0x3a>

0801651c <__hexdig_fun>:
 801651c:	0003      	movs	r3, r0
 801651e:	3b30      	subs	r3, #48	; 0x30
 8016520:	2b09      	cmp	r3, #9
 8016522:	d803      	bhi.n	801652c <__hexdig_fun+0x10>
 8016524:	3820      	subs	r0, #32
 8016526:	b2c3      	uxtb	r3, r0
 8016528:	0018      	movs	r0, r3
 801652a:	4770      	bx	lr
 801652c:	0003      	movs	r3, r0
 801652e:	3b61      	subs	r3, #97	; 0x61
 8016530:	2b05      	cmp	r3, #5
 8016532:	d801      	bhi.n	8016538 <__hexdig_fun+0x1c>
 8016534:	3847      	subs	r0, #71	; 0x47
 8016536:	e7f6      	b.n	8016526 <__hexdig_fun+0xa>
 8016538:	0002      	movs	r2, r0
 801653a:	3a41      	subs	r2, #65	; 0x41
 801653c:	2300      	movs	r3, #0
 801653e:	2a05      	cmp	r2, #5
 8016540:	d8f2      	bhi.n	8016528 <__hexdig_fun+0xc>
 8016542:	3827      	subs	r0, #39	; 0x27
 8016544:	e7ef      	b.n	8016526 <__hexdig_fun+0xa>

08016546 <__gethex>:
 8016546:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016548:	b08d      	sub	sp, #52	; 0x34
 801654a:	9005      	str	r0, [sp, #20]
 801654c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801654e:	9109      	str	r1, [sp, #36]	; 0x24
 8016550:	9202      	str	r2, [sp, #8]
 8016552:	930a      	str	r3, [sp, #40]	; 0x28
 8016554:	f000 fadf 	bl	8016b16 <__localeconv_l>
 8016558:	6803      	ldr	r3, [r0, #0]
 801655a:	0018      	movs	r0, r3
 801655c:	9307      	str	r3, [sp, #28]
 801655e:	f7e9 fddb 	bl	8000118 <strlen>
 8016562:	2202      	movs	r2, #2
 8016564:	9b07      	ldr	r3, [sp, #28]
 8016566:	4252      	negs	r2, r2
 8016568:	181b      	adds	r3, r3, r0
 801656a:	3b01      	subs	r3, #1
 801656c:	781b      	ldrb	r3, [r3, #0]
 801656e:	9004      	str	r0, [sp, #16]
 8016570:	930b      	str	r3, [sp, #44]	; 0x2c
 8016572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016574:	6819      	ldr	r1, [r3, #0]
 8016576:	1c8b      	adds	r3, r1, #2
 8016578:	1a52      	subs	r2, r2, r1
 801657a:	18d1      	adds	r1, r2, r3
 801657c:	9301      	str	r3, [sp, #4]
 801657e:	9108      	str	r1, [sp, #32]
 8016580:	9901      	ldr	r1, [sp, #4]
 8016582:	3301      	adds	r3, #1
 8016584:	7808      	ldrb	r0, [r1, #0]
 8016586:	2830      	cmp	r0, #48	; 0x30
 8016588:	d0f7      	beq.n	801657a <__gethex+0x34>
 801658a:	f7ff ffc7 	bl	801651c <__hexdig_fun>
 801658e:	1e07      	subs	r7, r0, #0
 8016590:	d000      	beq.n	8016594 <__gethex+0x4e>
 8016592:	e06f      	b.n	8016674 <__gethex+0x12e>
 8016594:	9a04      	ldr	r2, [sp, #16]
 8016596:	9907      	ldr	r1, [sp, #28]
 8016598:	9801      	ldr	r0, [sp, #4]
 801659a:	f7fc fe4b 	bl	8013234 <strncmp>
 801659e:	2800      	cmp	r0, #0
 80165a0:	d000      	beq.n	80165a4 <__gethex+0x5e>
 80165a2:	e06d      	b.n	8016680 <__gethex+0x13a>
 80165a4:	9b01      	ldr	r3, [sp, #4]
 80165a6:	9a04      	ldr	r2, [sp, #16]
 80165a8:	189c      	adds	r4, r3, r2
 80165aa:	7820      	ldrb	r0, [r4, #0]
 80165ac:	f7ff ffb6 	bl	801651c <__hexdig_fun>
 80165b0:	2800      	cmp	r0, #0
 80165b2:	d069      	beq.n	8016688 <__gethex+0x142>
 80165b4:	9401      	str	r4, [sp, #4]
 80165b6:	9b01      	ldr	r3, [sp, #4]
 80165b8:	7818      	ldrb	r0, [r3, #0]
 80165ba:	2830      	cmp	r0, #48	; 0x30
 80165bc:	d009      	beq.n	80165d2 <__gethex+0x8c>
 80165be:	f7ff ffad 	bl	801651c <__hexdig_fun>
 80165c2:	4243      	negs	r3, r0
 80165c4:	4143      	adcs	r3, r0
 80165c6:	9303      	str	r3, [sp, #12]
 80165c8:	2301      	movs	r3, #1
 80165ca:	0026      	movs	r6, r4
 80165cc:	9308      	str	r3, [sp, #32]
 80165ce:	9c01      	ldr	r4, [sp, #4]
 80165d0:	e004      	b.n	80165dc <__gethex+0x96>
 80165d2:	9b01      	ldr	r3, [sp, #4]
 80165d4:	3301      	adds	r3, #1
 80165d6:	9301      	str	r3, [sp, #4]
 80165d8:	e7ed      	b.n	80165b6 <__gethex+0x70>
 80165da:	3401      	adds	r4, #1
 80165dc:	7820      	ldrb	r0, [r4, #0]
 80165de:	f7ff ff9d 	bl	801651c <__hexdig_fun>
 80165e2:	2800      	cmp	r0, #0
 80165e4:	d1f9      	bne.n	80165da <__gethex+0x94>
 80165e6:	9a04      	ldr	r2, [sp, #16]
 80165e8:	9907      	ldr	r1, [sp, #28]
 80165ea:	0020      	movs	r0, r4
 80165ec:	f7fc fe22 	bl	8013234 <strncmp>
 80165f0:	2800      	cmp	r0, #0
 80165f2:	d109      	bne.n	8016608 <__gethex+0xc2>
 80165f4:	2e00      	cmp	r6, #0
 80165f6:	d10a      	bne.n	801660e <__gethex+0xc8>
 80165f8:	9b04      	ldr	r3, [sp, #16]
 80165fa:	18e4      	adds	r4, r4, r3
 80165fc:	0026      	movs	r6, r4
 80165fe:	7820      	ldrb	r0, [r4, #0]
 8016600:	f7ff ff8c 	bl	801651c <__hexdig_fun>
 8016604:	2800      	cmp	r0, #0
 8016606:	d139      	bne.n	801667c <__gethex+0x136>
 8016608:	2700      	movs	r7, #0
 801660a:	42be      	cmp	r6, r7
 801660c:	d001      	beq.n	8016612 <__gethex+0xcc>
 801660e:	1b37      	subs	r7, r6, r4
 8016610:	00bf      	lsls	r7, r7, #2
 8016612:	7823      	ldrb	r3, [r4, #0]
 8016614:	2b50      	cmp	r3, #80	; 0x50
 8016616:	d001      	beq.n	801661c <__gethex+0xd6>
 8016618:	2b70      	cmp	r3, #112	; 0x70
 801661a:	d142      	bne.n	80166a2 <__gethex+0x15c>
 801661c:	7863      	ldrb	r3, [r4, #1]
 801661e:	2b2b      	cmp	r3, #43	; 0x2b
 8016620:	d034      	beq.n	801668c <__gethex+0x146>
 8016622:	2b2d      	cmp	r3, #45	; 0x2d
 8016624:	d036      	beq.n	8016694 <__gethex+0x14e>
 8016626:	2300      	movs	r3, #0
 8016628:	1c66      	adds	r6, r4, #1
 801662a:	9306      	str	r3, [sp, #24]
 801662c:	7830      	ldrb	r0, [r6, #0]
 801662e:	f7ff ff75 	bl	801651c <__hexdig_fun>
 8016632:	1e43      	subs	r3, r0, #1
 8016634:	b2db      	uxtb	r3, r3
 8016636:	2b18      	cmp	r3, #24
 8016638:	d833      	bhi.n	80166a2 <__gethex+0x15c>
 801663a:	3810      	subs	r0, #16
 801663c:	0005      	movs	r5, r0
 801663e:	3601      	adds	r6, #1
 8016640:	7830      	ldrb	r0, [r6, #0]
 8016642:	f7ff ff6b 	bl	801651c <__hexdig_fun>
 8016646:	1e43      	subs	r3, r0, #1
 8016648:	b2db      	uxtb	r3, r3
 801664a:	2b18      	cmp	r3, #24
 801664c:	d924      	bls.n	8016698 <__gethex+0x152>
 801664e:	9b06      	ldr	r3, [sp, #24]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d000      	beq.n	8016656 <__gethex+0x110>
 8016654:	426d      	negs	r5, r5
 8016656:	197f      	adds	r7, r7, r5
 8016658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801665a:	601e      	str	r6, [r3, #0]
 801665c:	9b03      	ldr	r3, [sp, #12]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d021      	beq.n	80166a6 <__gethex+0x160>
 8016662:	9b08      	ldr	r3, [sp, #32]
 8016664:	2606      	movs	r6, #6
 8016666:	425a      	negs	r2, r3
 8016668:	4153      	adcs	r3, r2
 801666a:	425b      	negs	r3, r3
 801666c:	401e      	ands	r6, r3
 801666e:	0030      	movs	r0, r6
 8016670:	b00d      	add	sp, #52	; 0x34
 8016672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016674:	2300      	movs	r3, #0
 8016676:	9303      	str	r3, [sp, #12]
 8016678:	001e      	movs	r6, r3
 801667a:	e7a8      	b.n	80165ce <__gethex+0x88>
 801667c:	3401      	adds	r4, #1
 801667e:	e7be      	b.n	80165fe <__gethex+0xb8>
 8016680:	9c01      	ldr	r4, [sp, #4]
 8016682:	2301      	movs	r3, #1
 8016684:	9303      	str	r3, [sp, #12]
 8016686:	e7c4      	b.n	8016612 <__gethex+0xcc>
 8016688:	0007      	movs	r7, r0
 801668a:	e7fa      	b.n	8016682 <__gethex+0x13c>
 801668c:	2300      	movs	r3, #0
 801668e:	9306      	str	r3, [sp, #24]
 8016690:	1ca6      	adds	r6, r4, #2
 8016692:	e7cb      	b.n	801662c <__gethex+0xe6>
 8016694:	2301      	movs	r3, #1
 8016696:	e7fa      	b.n	801668e <__gethex+0x148>
 8016698:	230a      	movs	r3, #10
 801669a:	435d      	muls	r5, r3
 801669c:	182d      	adds	r5, r5, r0
 801669e:	3d10      	subs	r5, #16
 80166a0:	e7cd      	b.n	801663e <__gethex+0xf8>
 80166a2:	0026      	movs	r6, r4
 80166a4:	e7d8      	b.n	8016658 <__gethex+0x112>
 80166a6:	9b01      	ldr	r3, [sp, #4]
 80166a8:	9903      	ldr	r1, [sp, #12]
 80166aa:	1ae3      	subs	r3, r4, r3
 80166ac:	3b01      	subs	r3, #1
 80166ae:	2b07      	cmp	r3, #7
 80166b0:	dc47      	bgt.n	8016742 <__gethex+0x1fc>
 80166b2:	9805      	ldr	r0, [sp, #20]
 80166b4:	f000 fa5e 	bl	8016b74 <_Balloc>
 80166b8:	0003      	movs	r3, r0
 80166ba:	3314      	adds	r3, #20
 80166bc:	9303      	str	r3, [sp, #12]
 80166be:	9308      	str	r3, [sp, #32]
 80166c0:	2300      	movs	r3, #0
 80166c2:	0005      	movs	r5, r0
 80166c4:	001e      	movs	r6, r3
 80166c6:	9306      	str	r3, [sp, #24]
 80166c8:	9b01      	ldr	r3, [sp, #4]
 80166ca:	42a3      	cmp	r3, r4
 80166cc:	d33c      	bcc.n	8016748 <__gethex+0x202>
 80166ce:	9c08      	ldr	r4, [sp, #32]
 80166d0:	9b03      	ldr	r3, [sp, #12]
 80166d2:	c440      	stmia	r4!, {r6}
 80166d4:	1ae4      	subs	r4, r4, r3
 80166d6:	10a4      	asrs	r4, r4, #2
 80166d8:	612c      	str	r4, [r5, #16]
 80166da:	0030      	movs	r0, r6
 80166dc:	f000 faf8 	bl	8016cd0 <__hi0bits>
 80166e0:	9b02      	ldr	r3, [sp, #8]
 80166e2:	0164      	lsls	r4, r4, #5
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	1a26      	subs	r6, r4, r0
 80166e8:	9301      	str	r3, [sp, #4]
 80166ea:	429e      	cmp	r6, r3
 80166ec:	dd5f      	ble.n	80167ae <__gethex+0x268>
 80166ee:	1af6      	subs	r6, r6, r3
 80166f0:	0031      	movs	r1, r6
 80166f2:	0028      	movs	r0, r5
 80166f4:	f000 fde3 	bl	80172be <__any_on>
 80166f8:	1e04      	subs	r4, r0, #0
 80166fa:	d00f      	beq.n	801671c <__gethex+0x1d6>
 80166fc:	2401      	movs	r4, #1
 80166fe:	211f      	movs	r1, #31
 8016700:	0020      	movs	r0, r4
 8016702:	1e73      	subs	r3, r6, #1
 8016704:	4019      	ands	r1, r3
 8016706:	4088      	lsls	r0, r1
 8016708:	0001      	movs	r1, r0
 801670a:	115a      	asrs	r2, r3, #5
 801670c:	9803      	ldr	r0, [sp, #12]
 801670e:	0092      	lsls	r2, r2, #2
 8016710:	5812      	ldr	r2, [r2, r0]
 8016712:	420a      	tst	r2, r1
 8016714:	d002      	beq.n	801671c <__gethex+0x1d6>
 8016716:	42a3      	cmp	r3, r4
 8016718:	dc41      	bgt.n	801679e <__gethex+0x258>
 801671a:	2402      	movs	r4, #2
 801671c:	0031      	movs	r1, r6
 801671e:	0028      	movs	r0, r5
 8016720:	f7ff fec8 	bl	80164b4 <rshift>
 8016724:	19bf      	adds	r7, r7, r6
 8016726:	9b02      	ldr	r3, [sp, #8]
 8016728:	689b      	ldr	r3, [r3, #8]
 801672a:	9304      	str	r3, [sp, #16]
 801672c:	42bb      	cmp	r3, r7
 801672e:	da4e      	bge.n	80167ce <__gethex+0x288>
 8016730:	0029      	movs	r1, r5
 8016732:	9805      	ldr	r0, [sp, #20]
 8016734:	f000 fa46 	bl	8016bc4 <_Bfree>
 8016738:	2300      	movs	r3, #0
 801673a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801673c:	26a3      	movs	r6, #163	; 0xa3
 801673e:	6013      	str	r3, [r2, #0]
 8016740:	e795      	b.n	801666e <__gethex+0x128>
 8016742:	3101      	adds	r1, #1
 8016744:	105b      	asrs	r3, r3, #1
 8016746:	e7b2      	b.n	80166ae <__gethex+0x168>
 8016748:	1e63      	subs	r3, r4, #1
 801674a:	9309      	str	r3, [sp, #36]	; 0x24
 801674c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801674e:	781b      	ldrb	r3, [r3, #0]
 8016750:	4293      	cmp	r3, r2
 8016752:	d015      	beq.n	8016780 <__gethex+0x23a>
 8016754:	9b06      	ldr	r3, [sp, #24]
 8016756:	2b20      	cmp	r3, #32
 8016758:	d105      	bne.n	8016766 <__gethex+0x220>
 801675a:	9b08      	ldr	r3, [sp, #32]
 801675c:	601e      	str	r6, [r3, #0]
 801675e:	2600      	movs	r6, #0
 8016760:	3304      	adds	r3, #4
 8016762:	9308      	str	r3, [sp, #32]
 8016764:	9606      	str	r6, [sp, #24]
 8016766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016768:	7818      	ldrb	r0, [r3, #0]
 801676a:	f7ff fed7 	bl	801651c <__hexdig_fun>
 801676e:	230f      	movs	r3, #15
 8016770:	4018      	ands	r0, r3
 8016772:	9b06      	ldr	r3, [sp, #24]
 8016774:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016776:	4098      	lsls	r0, r3
 8016778:	3304      	adds	r3, #4
 801677a:	4306      	orrs	r6, r0
 801677c:	9306      	str	r3, [sp, #24]
 801677e:	e7a3      	b.n	80166c8 <__gethex+0x182>
 8016780:	2301      	movs	r3, #1
 8016782:	9a04      	ldr	r2, [sp, #16]
 8016784:	1a9c      	subs	r4, r3, r2
 8016786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016788:	191c      	adds	r4, r3, r4
 801678a:	9b01      	ldr	r3, [sp, #4]
 801678c:	429c      	cmp	r4, r3
 801678e:	d3e1      	bcc.n	8016754 <__gethex+0x20e>
 8016790:	9907      	ldr	r1, [sp, #28]
 8016792:	0020      	movs	r0, r4
 8016794:	f7fc fd4e 	bl	8013234 <strncmp>
 8016798:	2800      	cmp	r0, #0
 801679a:	d1db      	bne.n	8016754 <__gethex+0x20e>
 801679c:	e794      	b.n	80166c8 <__gethex+0x182>
 801679e:	1eb1      	subs	r1, r6, #2
 80167a0:	0028      	movs	r0, r5
 80167a2:	f000 fd8c 	bl	80172be <__any_on>
 80167a6:	2800      	cmp	r0, #0
 80167a8:	d0b7      	beq.n	801671a <__gethex+0x1d4>
 80167aa:	2403      	movs	r4, #3
 80167ac:	e7b6      	b.n	801671c <__gethex+0x1d6>
 80167ae:	9b01      	ldr	r3, [sp, #4]
 80167b0:	2400      	movs	r4, #0
 80167b2:	429e      	cmp	r6, r3
 80167b4:	dab7      	bge.n	8016726 <__gethex+0x1e0>
 80167b6:	1b9e      	subs	r6, r3, r6
 80167b8:	0029      	movs	r1, r5
 80167ba:	0032      	movs	r2, r6
 80167bc:	9805      	ldr	r0, [sp, #20]
 80167be:	f000 fbab 	bl	8016f18 <__lshift>
 80167c2:	0003      	movs	r3, r0
 80167c4:	3314      	adds	r3, #20
 80167c6:	0005      	movs	r5, r0
 80167c8:	1bbf      	subs	r7, r7, r6
 80167ca:	9303      	str	r3, [sp, #12]
 80167cc:	e7ab      	b.n	8016726 <__gethex+0x1e0>
 80167ce:	9b02      	ldr	r3, [sp, #8]
 80167d0:	685e      	ldr	r6, [r3, #4]
 80167d2:	42be      	cmp	r6, r7
 80167d4:	dd6b      	ble.n	80168ae <__gethex+0x368>
 80167d6:	9b01      	ldr	r3, [sp, #4]
 80167d8:	1bf6      	subs	r6, r6, r7
 80167da:	42b3      	cmp	r3, r6
 80167dc:	dc32      	bgt.n	8016844 <__gethex+0x2fe>
 80167de:	9b02      	ldr	r3, [sp, #8]
 80167e0:	68db      	ldr	r3, [r3, #12]
 80167e2:	2b02      	cmp	r3, #2
 80167e4:	d026      	beq.n	8016834 <__gethex+0x2ee>
 80167e6:	2b03      	cmp	r3, #3
 80167e8:	d028      	beq.n	801683c <__gethex+0x2f6>
 80167ea:	2b01      	cmp	r3, #1
 80167ec:	d119      	bne.n	8016822 <__gethex+0x2dc>
 80167ee:	9b01      	ldr	r3, [sp, #4]
 80167f0:	42b3      	cmp	r3, r6
 80167f2:	d116      	bne.n	8016822 <__gethex+0x2dc>
 80167f4:	2b01      	cmp	r3, #1
 80167f6:	dc0d      	bgt.n	8016814 <__gethex+0x2ce>
 80167f8:	9b02      	ldr	r3, [sp, #8]
 80167fa:	2662      	movs	r6, #98	; 0x62
 80167fc:	685b      	ldr	r3, [r3, #4]
 80167fe:	9301      	str	r3, [sp, #4]
 8016800:	9a01      	ldr	r2, [sp, #4]
 8016802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016804:	601a      	str	r2, [r3, #0]
 8016806:	2301      	movs	r3, #1
 8016808:	9a03      	ldr	r2, [sp, #12]
 801680a:	612b      	str	r3, [r5, #16]
 801680c:	6013      	str	r3, [r2, #0]
 801680e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016810:	601d      	str	r5, [r3, #0]
 8016812:	e72c      	b.n	801666e <__gethex+0x128>
 8016814:	9901      	ldr	r1, [sp, #4]
 8016816:	0028      	movs	r0, r5
 8016818:	3901      	subs	r1, #1
 801681a:	f000 fd50 	bl	80172be <__any_on>
 801681e:	2800      	cmp	r0, #0
 8016820:	d1ea      	bne.n	80167f8 <__gethex+0x2b2>
 8016822:	0029      	movs	r1, r5
 8016824:	9805      	ldr	r0, [sp, #20]
 8016826:	f000 f9cd 	bl	8016bc4 <_Bfree>
 801682a:	2300      	movs	r3, #0
 801682c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801682e:	2650      	movs	r6, #80	; 0x50
 8016830:	6013      	str	r3, [r2, #0]
 8016832:	e71c      	b.n	801666e <__gethex+0x128>
 8016834:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016836:	2b00      	cmp	r3, #0
 8016838:	d0de      	beq.n	80167f8 <__gethex+0x2b2>
 801683a:	e7f2      	b.n	8016822 <__gethex+0x2dc>
 801683c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801683e:	2b00      	cmp	r3, #0
 8016840:	d1da      	bne.n	80167f8 <__gethex+0x2b2>
 8016842:	e7ee      	b.n	8016822 <__gethex+0x2dc>
 8016844:	1e77      	subs	r7, r6, #1
 8016846:	2c00      	cmp	r4, #0
 8016848:	d12f      	bne.n	80168aa <__gethex+0x364>
 801684a:	2f00      	cmp	r7, #0
 801684c:	d004      	beq.n	8016858 <__gethex+0x312>
 801684e:	0039      	movs	r1, r7
 8016850:	0028      	movs	r0, r5
 8016852:	f000 fd34 	bl	80172be <__any_on>
 8016856:	0004      	movs	r4, r0
 8016858:	231f      	movs	r3, #31
 801685a:	117a      	asrs	r2, r7, #5
 801685c:	401f      	ands	r7, r3
 801685e:	3b1e      	subs	r3, #30
 8016860:	40bb      	lsls	r3, r7
 8016862:	9903      	ldr	r1, [sp, #12]
 8016864:	0092      	lsls	r2, r2, #2
 8016866:	5852      	ldr	r2, [r2, r1]
 8016868:	421a      	tst	r2, r3
 801686a:	d001      	beq.n	8016870 <__gethex+0x32a>
 801686c:	2302      	movs	r3, #2
 801686e:	431c      	orrs	r4, r3
 8016870:	9b01      	ldr	r3, [sp, #4]
 8016872:	0031      	movs	r1, r6
 8016874:	1b9b      	subs	r3, r3, r6
 8016876:	2602      	movs	r6, #2
 8016878:	0028      	movs	r0, r5
 801687a:	9301      	str	r3, [sp, #4]
 801687c:	f7ff fe1a 	bl	80164b4 <rshift>
 8016880:	9b02      	ldr	r3, [sp, #8]
 8016882:	685f      	ldr	r7, [r3, #4]
 8016884:	2c00      	cmp	r4, #0
 8016886:	d040      	beq.n	801690a <__gethex+0x3c4>
 8016888:	9b02      	ldr	r3, [sp, #8]
 801688a:	68db      	ldr	r3, [r3, #12]
 801688c:	2b02      	cmp	r3, #2
 801688e:	d010      	beq.n	80168b2 <__gethex+0x36c>
 8016890:	2b03      	cmp	r3, #3
 8016892:	d012      	beq.n	80168ba <__gethex+0x374>
 8016894:	2b01      	cmp	r3, #1
 8016896:	d106      	bne.n	80168a6 <__gethex+0x360>
 8016898:	07a2      	lsls	r2, r4, #30
 801689a:	d504      	bpl.n	80168a6 <__gethex+0x360>
 801689c:	9a03      	ldr	r2, [sp, #12]
 801689e:	6812      	ldr	r2, [r2, #0]
 80168a0:	4314      	orrs	r4, r2
 80168a2:	421c      	tst	r4, r3
 80168a4:	d10c      	bne.n	80168c0 <__gethex+0x37a>
 80168a6:	2310      	movs	r3, #16
 80168a8:	e02e      	b.n	8016908 <__gethex+0x3c2>
 80168aa:	2401      	movs	r4, #1
 80168ac:	e7d4      	b.n	8016858 <__gethex+0x312>
 80168ae:	2601      	movs	r6, #1
 80168b0:	e7e8      	b.n	8016884 <__gethex+0x33e>
 80168b2:	2301      	movs	r3, #1
 80168b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80168b6:	1a9b      	subs	r3, r3, r2
 80168b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80168ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d0f2      	beq.n	80168a6 <__gethex+0x360>
 80168c0:	692c      	ldr	r4, [r5, #16]
 80168c2:	00a3      	lsls	r3, r4, #2
 80168c4:	9304      	str	r3, [sp, #16]
 80168c6:	002b      	movs	r3, r5
 80168c8:	00a2      	lsls	r2, r4, #2
 80168ca:	3314      	adds	r3, #20
 80168cc:	1899      	adds	r1, r3, r2
 80168ce:	2200      	movs	r2, #0
 80168d0:	4694      	mov	ip, r2
 80168d2:	681a      	ldr	r2, [r3, #0]
 80168d4:	1c50      	adds	r0, r2, #1
 80168d6:	d01d      	beq.n	8016914 <__gethex+0x3ce>
 80168d8:	3201      	adds	r2, #1
 80168da:	601a      	str	r2, [r3, #0]
 80168dc:	002b      	movs	r3, r5
 80168de:	3314      	adds	r3, #20
 80168e0:	2e02      	cmp	r6, #2
 80168e2:	d13a      	bne.n	801695a <__gethex+0x414>
 80168e4:	9a02      	ldr	r2, [sp, #8]
 80168e6:	9901      	ldr	r1, [sp, #4]
 80168e8:	6812      	ldr	r2, [r2, #0]
 80168ea:	3a01      	subs	r2, #1
 80168ec:	428a      	cmp	r2, r1
 80168ee:	d10a      	bne.n	8016906 <__gethex+0x3c0>
 80168f0:	114a      	asrs	r2, r1, #5
 80168f2:	211f      	movs	r1, #31
 80168f4:	9801      	ldr	r0, [sp, #4]
 80168f6:	0092      	lsls	r2, r2, #2
 80168f8:	4001      	ands	r1, r0
 80168fa:	2001      	movs	r0, #1
 80168fc:	0004      	movs	r4, r0
 80168fe:	408c      	lsls	r4, r1
 8016900:	58d3      	ldr	r3, [r2, r3]
 8016902:	4223      	tst	r3, r4
 8016904:	d148      	bne.n	8016998 <__gethex+0x452>
 8016906:	2320      	movs	r3, #32
 8016908:	431e      	orrs	r6, r3
 801690a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801690c:	601d      	str	r5, [r3, #0]
 801690e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016910:	601f      	str	r7, [r3, #0]
 8016912:	e6ac      	b.n	801666e <__gethex+0x128>
 8016914:	4662      	mov	r2, ip
 8016916:	c304      	stmia	r3!, {r2}
 8016918:	4299      	cmp	r1, r3
 801691a:	d8da      	bhi.n	80168d2 <__gethex+0x38c>
 801691c:	68ab      	ldr	r3, [r5, #8]
 801691e:	429c      	cmp	r4, r3
 8016920:	db12      	blt.n	8016948 <__gethex+0x402>
 8016922:	686b      	ldr	r3, [r5, #4]
 8016924:	9805      	ldr	r0, [sp, #20]
 8016926:	1c59      	adds	r1, r3, #1
 8016928:	f000 f924 	bl	8016b74 <_Balloc>
 801692c:	0029      	movs	r1, r5
 801692e:	692b      	ldr	r3, [r5, #16]
 8016930:	9003      	str	r0, [sp, #12]
 8016932:	1c9a      	adds	r2, r3, #2
 8016934:	0092      	lsls	r2, r2, #2
 8016936:	310c      	adds	r1, #12
 8016938:	300c      	adds	r0, #12
 801693a:	f7fc fa34 	bl	8012da6 <memcpy>
 801693e:	0029      	movs	r1, r5
 8016940:	9805      	ldr	r0, [sp, #20]
 8016942:	f000 f93f 	bl	8016bc4 <_Bfree>
 8016946:	9d03      	ldr	r5, [sp, #12]
 8016948:	692b      	ldr	r3, [r5, #16]
 801694a:	1c5a      	adds	r2, r3, #1
 801694c:	612a      	str	r2, [r5, #16]
 801694e:	2201      	movs	r2, #1
 8016950:	3304      	adds	r3, #4
 8016952:	009b      	lsls	r3, r3, #2
 8016954:	18eb      	adds	r3, r5, r3
 8016956:	605a      	str	r2, [r3, #4]
 8016958:	e7c0      	b.n	80168dc <__gethex+0x396>
 801695a:	692a      	ldr	r2, [r5, #16]
 801695c:	42a2      	cmp	r2, r4
 801695e:	dd0a      	ble.n	8016976 <__gethex+0x430>
 8016960:	2101      	movs	r1, #1
 8016962:	0028      	movs	r0, r5
 8016964:	f7ff fda6 	bl	80164b4 <rshift>
 8016968:	9b02      	ldr	r3, [sp, #8]
 801696a:	3701      	adds	r7, #1
 801696c:	689b      	ldr	r3, [r3, #8]
 801696e:	2601      	movs	r6, #1
 8016970:	42bb      	cmp	r3, r7
 8016972:	dac8      	bge.n	8016906 <__gethex+0x3c0>
 8016974:	e6dc      	b.n	8016730 <__gethex+0x1ea>
 8016976:	241f      	movs	r4, #31
 8016978:	9a01      	ldr	r2, [sp, #4]
 801697a:	2601      	movs	r6, #1
 801697c:	4022      	ands	r2, r4
 801697e:	1e14      	subs	r4, r2, #0
 8016980:	d0c1      	beq.n	8016906 <__gethex+0x3c0>
 8016982:	9a04      	ldr	r2, [sp, #16]
 8016984:	189b      	adds	r3, r3, r2
 8016986:	3b04      	subs	r3, #4
 8016988:	6818      	ldr	r0, [r3, #0]
 801698a:	f000 f9a1 	bl	8016cd0 <__hi0bits>
 801698e:	2120      	movs	r1, #32
 8016990:	1b0c      	subs	r4, r1, r4
 8016992:	42a0      	cmp	r0, r4
 8016994:	dbe4      	blt.n	8016960 <__gethex+0x41a>
 8016996:	e7b6      	b.n	8016906 <__gethex+0x3c0>
 8016998:	0006      	movs	r6, r0
 801699a:	e7b4      	b.n	8016906 <__gethex+0x3c0>

0801699c <L_shift>:
 801699c:	2308      	movs	r3, #8
 801699e:	b570      	push	{r4, r5, r6, lr}
 80169a0:	2520      	movs	r5, #32
 80169a2:	1a9a      	subs	r2, r3, r2
 80169a4:	0092      	lsls	r2, r2, #2
 80169a6:	1aad      	subs	r5, r5, r2
 80169a8:	6843      	ldr	r3, [r0, #4]
 80169aa:	6806      	ldr	r6, [r0, #0]
 80169ac:	001c      	movs	r4, r3
 80169ae:	40ac      	lsls	r4, r5
 80169b0:	40d3      	lsrs	r3, r2
 80169b2:	4334      	orrs	r4, r6
 80169b4:	6004      	str	r4, [r0, #0]
 80169b6:	6043      	str	r3, [r0, #4]
 80169b8:	3004      	adds	r0, #4
 80169ba:	4288      	cmp	r0, r1
 80169bc:	d3f4      	bcc.n	80169a8 <L_shift+0xc>
 80169be:	bd70      	pop	{r4, r5, r6, pc}

080169c0 <__match>:
 80169c0:	b530      	push	{r4, r5, lr}
 80169c2:	6803      	ldr	r3, [r0, #0]
 80169c4:	780c      	ldrb	r4, [r1, #0]
 80169c6:	3301      	adds	r3, #1
 80169c8:	2c00      	cmp	r4, #0
 80169ca:	d102      	bne.n	80169d2 <__match+0x12>
 80169cc:	6003      	str	r3, [r0, #0]
 80169ce:	2001      	movs	r0, #1
 80169d0:	bd30      	pop	{r4, r5, pc}
 80169d2:	781a      	ldrb	r2, [r3, #0]
 80169d4:	0015      	movs	r5, r2
 80169d6:	3d41      	subs	r5, #65	; 0x41
 80169d8:	2d19      	cmp	r5, #25
 80169da:	d800      	bhi.n	80169de <__match+0x1e>
 80169dc:	3220      	adds	r2, #32
 80169de:	3101      	adds	r1, #1
 80169e0:	42a2      	cmp	r2, r4
 80169e2:	d0ef      	beq.n	80169c4 <__match+0x4>
 80169e4:	2000      	movs	r0, #0
 80169e6:	e7f3      	b.n	80169d0 <__match+0x10>

080169e8 <__hexnan>:
 80169e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169ea:	b08b      	sub	sp, #44	; 0x2c
 80169ec:	9201      	str	r2, [sp, #4]
 80169ee:	680a      	ldr	r2, [r1, #0]
 80169f0:	9901      	ldr	r1, [sp, #4]
 80169f2:	1153      	asrs	r3, r2, #5
 80169f4:	009b      	lsls	r3, r3, #2
 80169f6:	18cb      	adds	r3, r1, r3
 80169f8:	9304      	str	r3, [sp, #16]
 80169fa:	231f      	movs	r3, #31
 80169fc:	401a      	ands	r2, r3
 80169fe:	9008      	str	r0, [sp, #32]
 8016a00:	9206      	str	r2, [sp, #24]
 8016a02:	d002      	beq.n	8016a0a <__hexnan+0x22>
 8016a04:	9b04      	ldr	r3, [sp, #16]
 8016a06:	3304      	adds	r3, #4
 8016a08:	9304      	str	r3, [sp, #16]
 8016a0a:	9b04      	ldr	r3, [sp, #16]
 8016a0c:	2500      	movs	r5, #0
 8016a0e:	1f1e      	subs	r6, r3, #4
 8016a10:	0037      	movs	r7, r6
 8016a12:	0034      	movs	r4, r6
 8016a14:	9b08      	ldr	r3, [sp, #32]
 8016a16:	6035      	str	r5, [r6, #0]
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	9507      	str	r5, [sp, #28]
 8016a1c:	9305      	str	r3, [sp, #20]
 8016a1e:	9502      	str	r5, [sp, #8]
 8016a20:	9b05      	ldr	r3, [sp, #20]
 8016a22:	3301      	adds	r3, #1
 8016a24:	9309      	str	r3, [sp, #36]	; 0x24
 8016a26:	9b05      	ldr	r3, [sp, #20]
 8016a28:	785b      	ldrb	r3, [r3, #1]
 8016a2a:	9303      	str	r3, [sp, #12]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d028      	beq.n	8016a82 <__hexnan+0x9a>
 8016a30:	9803      	ldr	r0, [sp, #12]
 8016a32:	f7ff fd73 	bl	801651c <__hexdig_fun>
 8016a36:	2800      	cmp	r0, #0
 8016a38:	d145      	bne.n	8016ac6 <__hexnan+0xde>
 8016a3a:	9b03      	ldr	r3, [sp, #12]
 8016a3c:	2b20      	cmp	r3, #32
 8016a3e:	d819      	bhi.n	8016a74 <__hexnan+0x8c>
 8016a40:	9b02      	ldr	r3, [sp, #8]
 8016a42:	9a07      	ldr	r2, [sp, #28]
 8016a44:	4293      	cmp	r3, r2
 8016a46:	dd12      	ble.n	8016a6e <__hexnan+0x86>
 8016a48:	42bc      	cmp	r4, r7
 8016a4a:	d206      	bcs.n	8016a5a <__hexnan+0x72>
 8016a4c:	2d07      	cmp	r5, #7
 8016a4e:	dc04      	bgt.n	8016a5a <__hexnan+0x72>
 8016a50:	002a      	movs	r2, r5
 8016a52:	0039      	movs	r1, r7
 8016a54:	0020      	movs	r0, r4
 8016a56:	f7ff ffa1 	bl	801699c <L_shift>
 8016a5a:	9b01      	ldr	r3, [sp, #4]
 8016a5c:	2508      	movs	r5, #8
 8016a5e:	429c      	cmp	r4, r3
 8016a60:	d905      	bls.n	8016a6e <__hexnan+0x86>
 8016a62:	1f27      	subs	r7, r4, #4
 8016a64:	2500      	movs	r5, #0
 8016a66:	003c      	movs	r4, r7
 8016a68:	9b02      	ldr	r3, [sp, #8]
 8016a6a:	603d      	str	r5, [r7, #0]
 8016a6c:	9307      	str	r3, [sp, #28]
 8016a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a70:	9305      	str	r3, [sp, #20]
 8016a72:	e7d5      	b.n	8016a20 <__hexnan+0x38>
 8016a74:	9b03      	ldr	r3, [sp, #12]
 8016a76:	2b29      	cmp	r3, #41	; 0x29
 8016a78:	d14a      	bne.n	8016b10 <__hexnan+0x128>
 8016a7a:	9b05      	ldr	r3, [sp, #20]
 8016a7c:	9a08      	ldr	r2, [sp, #32]
 8016a7e:	3302      	adds	r3, #2
 8016a80:	6013      	str	r3, [r2, #0]
 8016a82:	9b02      	ldr	r3, [sp, #8]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d043      	beq.n	8016b10 <__hexnan+0x128>
 8016a88:	42bc      	cmp	r4, r7
 8016a8a:	d206      	bcs.n	8016a9a <__hexnan+0xb2>
 8016a8c:	2d07      	cmp	r5, #7
 8016a8e:	dc04      	bgt.n	8016a9a <__hexnan+0xb2>
 8016a90:	002a      	movs	r2, r5
 8016a92:	0039      	movs	r1, r7
 8016a94:	0020      	movs	r0, r4
 8016a96:	f7ff ff81 	bl	801699c <L_shift>
 8016a9a:	9b01      	ldr	r3, [sp, #4]
 8016a9c:	429c      	cmp	r4, r3
 8016a9e:	d926      	bls.n	8016aee <__hexnan+0x106>
 8016aa0:	cc04      	ldmia	r4!, {r2}
 8016aa2:	601a      	str	r2, [r3, #0]
 8016aa4:	3304      	adds	r3, #4
 8016aa6:	42a6      	cmp	r6, r4
 8016aa8:	d2fa      	bcs.n	8016aa0 <__hexnan+0xb8>
 8016aaa:	2200      	movs	r2, #0
 8016aac:	c304      	stmia	r3!, {r2}
 8016aae:	429e      	cmp	r6, r3
 8016ab0:	d2fc      	bcs.n	8016aac <__hexnan+0xc4>
 8016ab2:	6833      	ldr	r3, [r6, #0]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d104      	bne.n	8016ac2 <__hexnan+0xda>
 8016ab8:	9b01      	ldr	r3, [sp, #4]
 8016aba:	429e      	cmp	r6, r3
 8016abc:	d126      	bne.n	8016b0c <__hexnan+0x124>
 8016abe:	2301      	movs	r3, #1
 8016ac0:	6033      	str	r3, [r6, #0]
 8016ac2:	2005      	movs	r0, #5
 8016ac4:	e025      	b.n	8016b12 <__hexnan+0x12a>
 8016ac6:	9b02      	ldr	r3, [sp, #8]
 8016ac8:	3501      	adds	r5, #1
 8016aca:	3301      	adds	r3, #1
 8016acc:	9302      	str	r3, [sp, #8]
 8016ace:	2d08      	cmp	r5, #8
 8016ad0:	dd06      	ble.n	8016ae0 <__hexnan+0xf8>
 8016ad2:	9b01      	ldr	r3, [sp, #4]
 8016ad4:	429c      	cmp	r4, r3
 8016ad6:	d9ca      	bls.n	8016a6e <__hexnan+0x86>
 8016ad8:	2300      	movs	r3, #0
 8016ada:	2501      	movs	r5, #1
 8016adc:	3c04      	subs	r4, #4
 8016ade:	6023      	str	r3, [r4, #0]
 8016ae0:	220f      	movs	r2, #15
 8016ae2:	6823      	ldr	r3, [r4, #0]
 8016ae4:	4010      	ands	r0, r2
 8016ae6:	011b      	lsls	r3, r3, #4
 8016ae8:	4318      	orrs	r0, r3
 8016aea:	6020      	str	r0, [r4, #0]
 8016aec:	e7bf      	b.n	8016a6e <__hexnan+0x86>
 8016aee:	9b06      	ldr	r3, [sp, #24]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d0de      	beq.n	8016ab2 <__hexnan+0xca>
 8016af4:	2120      	movs	r1, #32
 8016af6:	9a06      	ldr	r2, [sp, #24]
 8016af8:	9b04      	ldr	r3, [sp, #16]
 8016afa:	1a89      	subs	r1, r1, r2
 8016afc:	2201      	movs	r2, #1
 8016afe:	4252      	negs	r2, r2
 8016b00:	40ca      	lsrs	r2, r1
 8016b02:	3b04      	subs	r3, #4
 8016b04:	6819      	ldr	r1, [r3, #0]
 8016b06:	400a      	ands	r2, r1
 8016b08:	601a      	str	r2, [r3, #0]
 8016b0a:	e7d2      	b.n	8016ab2 <__hexnan+0xca>
 8016b0c:	3e04      	subs	r6, #4
 8016b0e:	e7d0      	b.n	8016ab2 <__hexnan+0xca>
 8016b10:	2004      	movs	r0, #4
 8016b12:	b00b      	add	sp, #44	; 0x2c
 8016b14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016b16 <__localeconv_l>:
 8016b16:	30f0      	adds	r0, #240	; 0xf0
 8016b18:	4770      	bx	lr
	...

08016b1c <_localeconv_r>:
 8016b1c:	4b03      	ldr	r3, [pc, #12]	; (8016b2c <_localeconv_r+0x10>)
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016b22:	2800      	cmp	r0, #0
 8016b24:	d100      	bne.n	8016b28 <_localeconv_r+0xc>
 8016b26:	4802      	ldr	r0, [pc, #8]	; (8016b30 <_localeconv_r+0x14>)
 8016b28:	30f0      	adds	r0, #240	; 0xf0
 8016b2a:	4770      	bx	lr
 8016b2c:	200000cc 	.word	0x200000cc
 8016b30:	200004f8 	.word	0x200004f8

08016b34 <__retarget_lock_acquire_recursive>:
 8016b34:	4770      	bx	lr

08016b36 <__retarget_lock_release_recursive>:
 8016b36:	4770      	bx	lr

08016b38 <memchr>:
 8016b38:	b2c9      	uxtb	r1, r1
 8016b3a:	1882      	adds	r2, r0, r2
 8016b3c:	4290      	cmp	r0, r2
 8016b3e:	d101      	bne.n	8016b44 <memchr+0xc>
 8016b40:	2000      	movs	r0, #0
 8016b42:	4770      	bx	lr
 8016b44:	7803      	ldrb	r3, [r0, #0]
 8016b46:	428b      	cmp	r3, r1
 8016b48:	d0fb      	beq.n	8016b42 <memchr+0xa>
 8016b4a:	3001      	adds	r0, #1
 8016b4c:	e7f6      	b.n	8016b3c <memchr+0x4>

08016b4e <memmove>:
 8016b4e:	b510      	push	{r4, lr}
 8016b50:	4288      	cmp	r0, r1
 8016b52:	d902      	bls.n	8016b5a <memmove+0xc>
 8016b54:	188b      	adds	r3, r1, r2
 8016b56:	4298      	cmp	r0, r3
 8016b58:	d303      	bcc.n	8016b62 <memmove+0x14>
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	e007      	b.n	8016b6e <memmove+0x20>
 8016b5e:	5c8b      	ldrb	r3, [r1, r2]
 8016b60:	5483      	strb	r3, [r0, r2]
 8016b62:	3a01      	subs	r2, #1
 8016b64:	d2fb      	bcs.n	8016b5e <memmove+0x10>
 8016b66:	bd10      	pop	{r4, pc}
 8016b68:	5ccc      	ldrb	r4, [r1, r3]
 8016b6a:	54c4      	strb	r4, [r0, r3]
 8016b6c:	3301      	adds	r3, #1
 8016b6e:	429a      	cmp	r2, r3
 8016b70:	d1fa      	bne.n	8016b68 <memmove+0x1a>
 8016b72:	e7f8      	b.n	8016b66 <memmove+0x18>

08016b74 <_Balloc>:
 8016b74:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016b76:	b570      	push	{r4, r5, r6, lr}
 8016b78:	0004      	movs	r4, r0
 8016b7a:	000d      	movs	r5, r1
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d012      	beq.n	8016ba6 <_Balloc+0x32>
 8016b80:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016b82:	00ab      	lsls	r3, r5, #2
 8016b84:	18d3      	adds	r3, r2, r3
 8016b86:	6818      	ldr	r0, [r3, #0]
 8016b88:	2800      	cmp	r0, #0
 8016b8a:	d115      	bne.n	8016bb8 <_Balloc+0x44>
 8016b8c:	2101      	movs	r1, #1
 8016b8e:	000e      	movs	r6, r1
 8016b90:	40ae      	lsls	r6, r5
 8016b92:	1d72      	adds	r2, r6, #5
 8016b94:	0092      	lsls	r2, r2, #2
 8016b96:	0020      	movs	r0, r4
 8016b98:	f000 fcbe 	bl	8017518 <_calloc_r>
 8016b9c:	2800      	cmp	r0, #0
 8016b9e:	d009      	beq.n	8016bb4 <_Balloc+0x40>
 8016ba0:	6045      	str	r5, [r0, #4]
 8016ba2:	6086      	str	r6, [r0, #8]
 8016ba4:	e00a      	b.n	8016bbc <_Balloc+0x48>
 8016ba6:	2221      	movs	r2, #33	; 0x21
 8016ba8:	2104      	movs	r1, #4
 8016baa:	f000 fcb5 	bl	8017518 <_calloc_r>
 8016bae:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016bb0:	2800      	cmp	r0, #0
 8016bb2:	d1e5      	bne.n	8016b80 <_Balloc+0xc>
 8016bb4:	2000      	movs	r0, #0
 8016bb6:	bd70      	pop	{r4, r5, r6, pc}
 8016bb8:	6802      	ldr	r2, [r0, #0]
 8016bba:	601a      	str	r2, [r3, #0]
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	6103      	str	r3, [r0, #16]
 8016bc0:	60c3      	str	r3, [r0, #12]
 8016bc2:	e7f8      	b.n	8016bb6 <_Balloc+0x42>

08016bc4 <_Bfree>:
 8016bc4:	2900      	cmp	r1, #0
 8016bc6:	d006      	beq.n	8016bd6 <_Bfree+0x12>
 8016bc8:	684b      	ldr	r3, [r1, #4]
 8016bca:	009a      	lsls	r2, r3, #2
 8016bcc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016bce:	189b      	adds	r3, r3, r2
 8016bd0:	681a      	ldr	r2, [r3, #0]
 8016bd2:	600a      	str	r2, [r1, #0]
 8016bd4:	6019      	str	r1, [r3, #0]
 8016bd6:	4770      	bx	lr

08016bd8 <__multadd>:
 8016bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016bda:	001e      	movs	r6, r3
 8016bdc:	2314      	movs	r3, #20
 8016bde:	469c      	mov	ip, r3
 8016be0:	0007      	movs	r7, r0
 8016be2:	000c      	movs	r4, r1
 8016be4:	2000      	movs	r0, #0
 8016be6:	690d      	ldr	r5, [r1, #16]
 8016be8:	448c      	add	ip, r1
 8016bea:	4663      	mov	r3, ip
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	3001      	adds	r0, #1
 8016bf0:	b299      	uxth	r1, r3
 8016bf2:	4663      	mov	r3, ip
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	4351      	muls	r1, r2
 8016bf8:	0c1b      	lsrs	r3, r3, #16
 8016bfa:	4353      	muls	r3, r2
 8016bfc:	1989      	adds	r1, r1, r6
 8016bfe:	0c0e      	lsrs	r6, r1, #16
 8016c00:	199b      	adds	r3, r3, r6
 8016c02:	b289      	uxth	r1, r1
 8016c04:	0c1e      	lsrs	r6, r3, #16
 8016c06:	041b      	lsls	r3, r3, #16
 8016c08:	185b      	adds	r3, r3, r1
 8016c0a:	4661      	mov	r1, ip
 8016c0c:	c108      	stmia	r1!, {r3}
 8016c0e:	468c      	mov	ip, r1
 8016c10:	4285      	cmp	r5, r0
 8016c12:	dcea      	bgt.n	8016bea <__multadd+0x12>
 8016c14:	2e00      	cmp	r6, #0
 8016c16:	d01b      	beq.n	8016c50 <__multadd+0x78>
 8016c18:	68a3      	ldr	r3, [r4, #8]
 8016c1a:	42ab      	cmp	r3, r5
 8016c1c:	dc12      	bgt.n	8016c44 <__multadd+0x6c>
 8016c1e:	6863      	ldr	r3, [r4, #4]
 8016c20:	0038      	movs	r0, r7
 8016c22:	1c59      	adds	r1, r3, #1
 8016c24:	f7ff ffa6 	bl	8016b74 <_Balloc>
 8016c28:	0021      	movs	r1, r4
 8016c2a:	6923      	ldr	r3, [r4, #16]
 8016c2c:	9001      	str	r0, [sp, #4]
 8016c2e:	1c9a      	adds	r2, r3, #2
 8016c30:	0092      	lsls	r2, r2, #2
 8016c32:	310c      	adds	r1, #12
 8016c34:	300c      	adds	r0, #12
 8016c36:	f7fc f8b6 	bl	8012da6 <memcpy>
 8016c3a:	0021      	movs	r1, r4
 8016c3c:	0038      	movs	r0, r7
 8016c3e:	f7ff ffc1 	bl	8016bc4 <_Bfree>
 8016c42:	9c01      	ldr	r4, [sp, #4]
 8016c44:	1d2b      	adds	r3, r5, #4
 8016c46:	009b      	lsls	r3, r3, #2
 8016c48:	18e3      	adds	r3, r4, r3
 8016c4a:	3501      	adds	r5, #1
 8016c4c:	605e      	str	r6, [r3, #4]
 8016c4e:	6125      	str	r5, [r4, #16]
 8016c50:	0020      	movs	r0, r4
 8016c52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08016c54 <__s2b>:
 8016c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c56:	0006      	movs	r6, r0
 8016c58:	0018      	movs	r0, r3
 8016c5a:	000c      	movs	r4, r1
 8016c5c:	3008      	adds	r0, #8
 8016c5e:	2109      	movs	r1, #9
 8016c60:	9301      	str	r3, [sp, #4]
 8016c62:	0015      	movs	r5, r2
 8016c64:	f7e9 fafe 	bl	8000264 <__divsi3>
 8016c68:	2301      	movs	r3, #1
 8016c6a:	2100      	movs	r1, #0
 8016c6c:	4283      	cmp	r3, r0
 8016c6e:	db1f      	blt.n	8016cb0 <__s2b+0x5c>
 8016c70:	0030      	movs	r0, r6
 8016c72:	f7ff ff7f 	bl	8016b74 <_Balloc>
 8016c76:	9b08      	ldr	r3, [sp, #32]
 8016c78:	6143      	str	r3, [r0, #20]
 8016c7a:	2301      	movs	r3, #1
 8016c7c:	6103      	str	r3, [r0, #16]
 8016c7e:	2d09      	cmp	r5, #9
 8016c80:	dd19      	ble.n	8016cb6 <__s2b+0x62>
 8016c82:	0023      	movs	r3, r4
 8016c84:	3309      	adds	r3, #9
 8016c86:	001f      	movs	r7, r3
 8016c88:	9300      	str	r3, [sp, #0]
 8016c8a:	1964      	adds	r4, r4, r5
 8016c8c:	783b      	ldrb	r3, [r7, #0]
 8016c8e:	0001      	movs	r1, r0
 8016c90:	3b30      	subs	r3, #48	; 0x30
 8016c92:	220a      	movs	r2, #10
 8016c94:	0030      	movs	r0, r6
 8016c96:	3701      	adds	r7, #1
 8016c98:	f7ff ff9e 	bl	8016bd8 <__multadd>
 8016c9c:	42a7      	cmp	r7, r4
 8016c9e:	d1f5      	bne.n	8016c8c <__s2b+0x38>
 8016ca0:	9b00      	ldr	r3, [sp, #0]
 8016ca2:	195c      	adds	r4, r3, r5
 8016ca4:	3c08      	subs	r4, #8
 8016ca6:	002f      	movs	r7, r5
 8016ca8:	9b01      	ldr	r3, [sp, #4]
 8016caa:	429f      	cmp	r7, r3
 8016cac:	db06      	blt.n	8016cbc <__s2b+0x68>
 8016cae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016cb0:	005b      	lsls	r3, r3, #1
 8016cb2:	3101      	adds	r1, #1
 8016cb4:	e7da      	b.n	8016c6c <__s2b+0x18>
 8016cb6:	340a      	adds	r4, #10
 8016cb8:	2509      	movs	r5, #9
 8016cba:	e7f4      	b.n	8016ca6 <__s2b+0x52>
 8016cbc:	1b63      	subs	r3, r4, r5
 8016cbe:	5ddb      	ldrb	r3, [r3, r7]
 8016cc0:	0001      	movs	r1, r0
 8016cc2:	3b30      	subs	r3, #48	; 0x30
 8016cc4:	220a      	movs	r2, #10
 8016cc6:	0030      	movs	r0, r6
 8016cc8:	f7ff ff86 	bl	8016bd8 <__multadd>
 8016ccc:	3701      	adds	r7, #1
 8016cce:	e7eb      	b.n	8016ca8 <__s2b+0x54>

08016cd0 <__hi0bits>:
 8016cd0:	0003      	movs	r3, r0
 8016cd2:	0c02      	lsrs	r2, r0, #16
 8016cd4:	2000      	movs	r0, #0
 8016cd6:	4282      	cmp	r2, r0
 8016cd8:	d101      	bne.n	8016cde <__hi0bits+0xe>
 8016cda:	041b      	lsls	r3, r3, #16
 8016cdc:	3010      	adds	r0, #16
 8016cde:	0e1a      	lsrs	r2, r3, #24
 8016ce0:	d101      	bne.n	8016ce6 <__hi0bits+0x16>
 8016ce2:	3008      	adds	r0, #8
 8016ce4:	021b      	lsls	r3, r3, #8
 8016ce6:	0f1a      	lsrs	r2, r3, #28
 8016ce8:	d101      	bne.n	8016cee <__hi0bits+0x1e>
 8016cea:	3004      	adds	r0, #4
 8016cec:	011b      	lsls	r3, r3, #4
 8016cee:	0f9a      	lsrs	r2, r3, #30
 8016cf0:	d101      	bne.n	8016cf6 <__hi0bits+0x26>
 8016cf2:	3002      	adds	r0, #2
 8016cf4:	009b      	lsls	r3, r3, #2
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	db03      	blt.n	8016d02 <__hi0bits+0x32>
 8016cfa:	3001      	adds	r0, #1
 8016cfc:	005b      	lsls	r3, r3, #1
 8016cfe:	d400      	bmi.n	8016d02 <__hi0bits+0x32>
 8016d00:	2020      	movs	r0, #32
 8016d02:	4770      	bx	lr

08016d04 <__lo0bits>:
 8016d04:	2207      	movs	r2, #7
 8016d06:	6803      	ldr	r3, [r0, #0]
 8016d08:	b510      	push	{r4, lr}
 8016d0a:	0001      	movs	r1, r0
 8016d0c:	401a      	ands	r2, r3
 8016d0e:	d00d      	beq.n	8016d2c <__lo0bits+0x28>
 8016d10:	2401      	movs	r4, #1
 8016d12:	2000      	movs	r0, #0
 8016d14:	4223      	tst	r3, r4
 8016d16:	d105      	bne.n	8016d24 <__lo0bits+0x20>
 8016d18:	3002      	adds	r0, #2
 8016d1a:	4203      	tst	r3, r0
 8016d1c:	d003      	beq.n	8016d26 <__lo0bits+0x22>
 8016d1e:	40e3      	lsrs	r3, r4
 8016d20:	0020      	movs	r0, r4
 8016d22:	600b      	str	r3, [r1, #0]
 8016d24:	bd10      	pop	{r4, pc}
 8016d26:	089b      	lsrs	r3, r3, #2
 8016d28:	600b      	str	r3, [r1, #0]
 8016d2a:	e7fb      	b.n	8016d24 <__lo0bits+0x20>
 8016d2c:	b29c      	uxth	r4, r3
 8016d2e:	0010      	movs	r0, r2
 8016d30:	2c00      	cmp	r4, #0
 8016d32:	d101      	bne.n	8016d38 <__lo0bits+0x34>
 8016d34:	2010      	movs	r0, #16
 8016d36:	0c1b      	lsrs	r3, r3, #16
 8016d38:	b2da      	uxtb	r2, r3
 8016d3a:	2a00      	cmp	r2, #0
 8016d3c:	d101      	bne.n	8016d42 <__lo0bits+0x3e>
 8016d3e:	3008      	adds	r0, #8
 8016d40:	0a1b      	lsrs	r3, r3, #8
 8016d42:	071a      	lsls	r2, r3, #28
 8016d44:	d101      	bne.n	8016d4a <__lo0bits+0x46>
 8016d46:	3004      	adds	r0, #4
 8016d48:	091b      	lsrs	r3, r3, #4
 8016d4a:	079a      	lsls	r2, r3, #30
 8016d4c:	d101      	bne.n	8016d52 <__lo0bits+0x4e>
 8016d4e:	3002      	adds	r0, #2
 8016d50:	089b      	lsrs	r3, r3, #2
 8016d52:	07da      	lsls	r2, r3, #31
 8016d54:	d4e8      	bmi.n	8016d28 <__lo0bits+0x24>
 8016d56:	085b      	lsrs	r3, r3, #1
 8016d58:	d001      	beq.n	8016d5e <__lo0bits+0x5a>
 8016d5a:	3001      	adds	r0, #1
 8016d5c:	e7e4      	b.n	8016d28 <__lo0bits+0x24>
 8016d5e:	2020      	movs	r0, #32
 8016d60:	e7e0      	b.n	8016d24 <__lo0bits+0x20>

08016d62 <__i2b>:
 8016d62:	b510      	push	{r4, lr}
 8016d64:	000c      	movs	r4, r1
 8016d66:	2101      	movs	r1, #1
 8016d68:	f7ff ff04 	bl	8016b74 <_Balloc>
 8016d6c:	2301      	movs	r3, #1
 8016d6e:	6144      	str	r4, [r0, #20]
 8016d70:	6103      	str	r3, [r0, #16]
 8016d72:	bd10      	pop	{r4, pc}

08016d74 <__multiply>:
 8016d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d76:	690b      	ldr	r3, [r1, #16]
 8016d78:	0014      	movs	r4, r2
 8016d7a:	6912      	ldr	r2, [r2, #16]
 8016d7c:	b089      	sub	sp, #36	; 0x24
 8016d7e:	000d      	movs	r5, r1
 8016d80:	4293      	cmp	r3, r2
 8016d82:	da01      	bge.n	8016d88 <__multiply+0x14>
 8016d84:	0025      	movs	r5, r4
 8016d86:	000c      	movs	r4, r1
 8016d88:	692f      	ldr	r7, [r5, #16]
 8016d8a:	6926      	ldr	r6, [r4, #16]
 8016d8c:	6869      	ldr	r1, [r5, #4]
 8016d8e:	19bb      	adds	r3, r7, r6
 8016d90:	9302      	str	r3, [sp, #8]
 8016d92:	68ab      	ldr	r3, [r5, #8]
 8016d94:	19ba      	adds	r2, r7, r6
 8016d96:	4293      	cmp	r3, r2
 8016d98:	da00      	bge.n	8016d9c <__multiply+0x28>
 8016d9a:	3101      	adds	r1, #1
 8016d9c:	f7ff feea 	bl	8016b74 <_Balloc>
 8016da0:	0002      	movs	r2, r0
 8016da2:	19bb      	adds	r3, r7, r6
 8016da4:	3214      	adds	r2, #20
 8016da6:	009b      	lsls	r3, r3, #2
 8016da8:	18d3      	adds	r3, r2, r3
 8016daa:	469c      	mov	ip, r3
 8016dac:	2100      	movs	r1, #0
 8016dae:	0013      	movs	r3, r2
 8016db0:	9004      	str	r0, [sp, #16]
 8016db2:	4563      	cmp	r3, ip
 8016db4:	d31d      	bcc.n	8016df2 <__multiply+0x7e>
 8016db6:	3514      	adds	r5, #20
 8016db8:	00bf      	lsls	r7, r7, #2
 8016dba:	19eb      	adds	r3, r5, r7
 8016dbc:	3414      	adds	r4, #20
 8016dbe:	00b6      	lsls	r6, r6, #2
 8016dc0:	9305      	str	r3, [sp, #20]
 8016dc2:	19a3      	adds	r3, r4, r6
 8016dc4:	9503      	str	r5, [sp, #12]
 8016dc6:	9401      	str	r4, [sp, #4]
 8016dc8:	9307      	str	r3, [sp, #28]
 8016dca:	9b07      	ldr	r3, [sp, #28]
 8016dcc:	9901      	ldr	r1, [sp, #4]
 8016dce:	4299      	cmp	r1, r3
 8016dd0:	d311      	bcc.n	8016df6 <__multiply+0x82>
 8016dd2:	9b02      	ldr	r3, [sp, #8]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	dd06      	ble.n	8016de6 <__multiply+0x72>
 8016dd8:	2304      	movs	r3, #4
 8016dda:	425b      	negs	r3, r3
 8016ddc:	449c      	add	ip, r3
 8016dde:	4663      	mov	r3, ip
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d051      	beq.n	8016e8a <__multiply+0x116>
 8016de6:	9b04      	ldr	r3, [sp, #16]
 8016de8:	9a02      	ldr	r2, [sp, #8]
 8016dea:	0018      	movs	r0, r3
 8016dec:	611a      	str	r2, [r3, #16]
 8016dee:	b009      	add	sp, #36	; 0x24
 8016df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016df2:	c302      	stmia	r3!, {r1}
 8016df4:	e7dd      	b.n	8016db2 <__multiply+0x3e>
 8016df6:	9b01      	ldr	r3, [sp, #4]
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	b298      	uxth	r0, r3
 8016dfc:	2800      	cmp	r0, #0
 8016dfe:	d01c      	beq.n	8016e3a <__multiply+0xc6>
 8016e00:	0015      	movs	r5, r2
 8016e02:	2600      	movs	r6, #0
 8016e04:	9f03      	ldr	r7, [sp, #12]
 8016e06:	cf02      	ldmia	r7!, {r1}
 8016e08:	682c      	ldr	r4, [r5, #0]
 8016e0a:	b28b      	uxth	r3, r1
 8016e0c:	4343      	muls	r3, r0
 8016e0e:	0c09      	lsrs	r1, r1, #16
 8016e10:	4341      	muls	r1, r0
 8016e12:	b2a4      	uxth	r4, r4
 8016e14:	191b      	adds	r3, r3, r4
 8016e16:	199b      	adds	r3, r3, r6
 8016e18:	000e      	movs	r6, r1
 8016e1a:	6829      	ldr	r1, [r5, #0]
 8016e1c:	9506      	str	r5, [sp, #24]
 8016e1e:	0c09      	lsrs	r1, r1, #16
 8016e20:	1871      	adds	r1, r6, r1
 8016e22:	0c1e      	lsrs	r6, r3, #16
 8016e24:	1989      	adds	r1, r1, r6
 8016e26:	0c0e      	lsrs	r6, r1, #16
 8016e28:	b29b      	uxth	r3, r3
 8016e2a:	0409      	lsls	r1, r1, #16
 8016e2c:	430b      	orrs	r3, r1
 8016e2e:	c508      	stmia	r5!, {r3}
 8016e30:	9b05      	ldr	r3, [sp, #20]
 8016e32:	42bb      	cmp	r3, r7
 8016e34:	d8e7      	bhi.n	8016e06 <__multiply+0x92>
 8016e36:	9b06      	ldr	r3, [sp, #24]
 8016e38:	605e      	str	r6, [r3, #4]
 8016e3a:	9b01      	ldr	r3, [sp, #4]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	0c1d      	lsrs	r5, r3, #16
 8016e40:	d01e      	beq.n	8016e80 <__multiply+0x10c>
 8016e42:	0010      	movs	r0, r2
 8016e44:	2700      	movs	r7, #0
 8016e46:	6813      	ldr	r3, [r2, #0]
 8016e48:	9e03      	ldr	r6, [sp, #12]
 8016e4a:	6831      	ldr	r1, [r6, #0]
 8016e4c:	6804      	ldr	r4, [r0, #0]
 8016e4e:	b289      	uxth	r1, r1
 8016e50:	4369      	muls	r1, r5
 8016e52:	0c24      	lsrs	r4, r4, #16
 8016e54:	1909      	adds	r1, r1, r4
 8016e56:	19c9      	adds	r1, r1, r7
 8016e58:	040f      	lsls	r7, r1, #16
 8016e5a:	b29b      	uxth	r3, r3
 8016e5c:	433b      	orrs	r3, r7
 8016e5e:	6003      	str	r3, [r0, #0]
 8016e60:	ce80      	ldmia	r6!, {r7}
 8016e62:	6843      	ldr	r3, [r0, #4]
 8016e64:	0c3f      	lsrs	r7, r7, #16
 8016e66:	436f      	muls	r7, r5
 8016e68:	b29b      	uxth	r3, r3
 8016e6a:	18fb      	adds	r3, r7, r3
 8016e6c:	0c09      	lsrs	r1, r1, #16
 8016e6e:	185b      	adds	r3, r3, r1
 8016e70:	9905      	ldr	r1, [sp, #20]
 8016e72:	9006      	str	r0, [sp, #24]
 8016e74:	0c1f      	lsrs	r7, r3, #16
 8016e76:	3004      	adds	r0, #4
 8016e78:	42b1      	cmp	r1, r6
 8016e7a:	d8e6      	bhi.n	8016e4a <__multiply+0xd6>
 8016e7c:	9906      	ldr	r1, [sp, #24]
 8016e7e:	604b      	str	r3, [r1, #4]
 8016e80:	9b01      	ldr	r3, [sp, #4]
 8016e82:	3204      	adds	r2, #4
 8016e84:	3304      	adds	r3, #4
 8016e86:	9301      	str	r3, [sp, #4]
 8016e88:	e79f      	b.n	8016dca <__multiply+0x56>
 8016e8a:	9b02      	ldr	r3, [sp, #8]
 8016e8c:	3b01      	subs	r3, #1
 8016e8e:	9302      	str	r3, [sp, #8]
 8016e90:	e79f      	b.n	8016dd2 <__multiply+0x5e>
	...

08016e94 <__pow5mult>:
 8016e94:	2303      	movs	r3, #3
 8016e96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e98:	4013      	ands	r3, r2
 8016e9a:	0006      	movs	r6, r0
 8016e9c:	000f      	movs	r7, r1
 8016e9e:	0015      	movs	r5, r2
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d008      	beq.n	8016eb6 <__pow5mult+0x22>
 8016ea4:	491a      	ldr	r1, [pc, #104]	; (8016f10 <__pow5mult+0x7c>)
 8016ea6:	3b01      	subs	r3, #1
 8016ea8:	009a      	lsls	r2, r3, #2
 8016eaa:	5852      	ldr	r2, [r2, r1]
 8016eac:	2300      	movs	r3, #0
 8016eae:	0039      	movs	r1, r7
 8016eb0:	f7ff fe92 	bl	8016bd8 <__multadd>
 8016eb4:	0007      	movs	r7, r0
 8016eb6:	10ad      	asrs	r5, r5, #2
 8016eb8:	d027      	beq.n	8016f0a <__pow5mult+0x76>
 8016eba:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8016ebc:	2c00      	cmp	r4, #0
 8016ebe:	d107      	bne.n	8016ed0 <__pow5mult+0x3c>
 8016ec0:	4914      	ldr	r1, [pc, #80]	; (8016f14 <__pow5mult+0x80>)
 8016ec2:	0030      	movs	r0, r6
 8016ec4:	f7ff ff4d 	bl	8016d62 <__i2b>
 8016ec8:	2300      	movs	r3, #0
 8016eca:	0004      	movs	r4, r0
 8016ecc:	64b0      	str	r0, [r6, #72]	; 0x48
 8016ece:	6003      	str	r3, [r0, #0]
 8016ed0:	2301      	movs	r3, #1
 8016ed2:	421d      	tst	r5, r3
 8016ed4:	d00a      	beq.n	8016eec <__pow5mult+0x58>
 8016ed6:	0039      	movs	r1, r7
 8016ed8:	0022      	movs	r2, r4
 8016eda:	0030      	movs	r0, r6
 8016edc:	f7ff ff4a 	bl	8016d74 <__multiply>
 8016ee0:	0039      	movs	r1, r7
 8016ee2:	9001      	str	r0, [sp, #4]
 8016ee4:	0030      	movs	r0, r6
 8016ee6:	f7ff fe6d 	bl	8016bc4 <_Bfree>
 8016eea:	9f01      	ldr	r7, [sp, #4]
 8016eec:	106d      	asrs	r5, r5, #1
 8016eee:	d00c      	beq.n	8016f0a <__pow5mult+0x76>
 8016ef0:	6820      	ldr	r0, [r4, #0]
 8016ef2:	2800      	cmp	r0, #0
 8016ef4:	d107      	bne.n	8016f06 <__pow5mult+0x72>
 8016ef6:	0022      	movs	r2, r4
 8016ef8:	0021      	movs	r1, r4
 8016efa:	0030      	movs	r0, r6
 8016efc:	f7ff ff3a 	bl	8016d74 <__multiply>
 8016f00:	2300      	movs	r3, #0
 8016f02:	6020      	str	r0, [r4, #0]
 8016f04:	6003      	str	r3, [r0, #0]
 8016f06:	0004      	movs	r4, r0
 8016f08:	e7e2      	b.n	8016ed0 <__pow5mult+0x3c>
 8016f0a:	0038      	movs	r0, r7
 8016f0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016f0e:	46c0      	nop			; (mov r8, r8)
 8016f10:	0801a7f0 	.word	0x0801a7f0
 8016f14:	00000271 	.word	0x00000271

08016f18 <__lshift>:
 8016f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f1a:	000d      	movs	r5, r1
 8016f1c:	0017      	movs	r7, r2
 8016f1e:	692b      	ldr	r3, [r5, #16]
 8016f20:	1154      	asrs	r4, r2, #5
 8016f22:	b085      	sub	sp, #20
 8016f24:	18e3      	adds	r3, r4, r3
 8016f26:	9301      	str	r3, [sp, #4]
 8016f28:	3301      	adds	r3, #1
 8016f2a:	9300      	str	r3, [sp, #0]
 8016f2c:	6849      	ldr	r1, [r1, #4]
 8016f2e:	68ab      	ldr	r3, [r5, #8]
 8016f30:	9002      	str	r0, [sp, #8]
 8016f32:	9a00      	ldr	r2, [sp, #0]
 8016f34:	4293      	cmp	r3, r2
 8016f36:	db35      	blt.n	8016fa4 <__lshift+0x8c>
 8016f38:	9802      	ldr	r0, [sp, #8]
 8016f3a:	f7ff fe1b 	bl	8016b74 <_Balloc>
 8016f3e:	2300      	movs	r3, #0
 8016f40:	0002      	movs	r2, r0
 8016f42:	0006      	movs	r6, r0
 8016f44:	0019      	movs	r1, r3
 8016f46:	3214      	adds	r2, #20
 8016f48:	42a3      	cmp	r3, r4
 8016f4a:	db2e      	blt.n	8016faa <__lshift+0x92>
 8016f4c:	43e3      	mvns	r3, r4
 8016f4e:	17db      	asrs	r3, r3, #31
 8016f50:	401c      	ands	r4, r3
 8016f52:	002b      	movs	r3, r5
 8016f54:	00a4      	lsls	r4, r4, #2
 8016f56:	1914      	adds	r4, r2, r4
 8016f58:	692a      	ldr	r2, [r5, #16]
 8016f5a:	3314      	adds	r3, #20
 8016f5c:	0092      	lsls	r2, r2, #2
 8016f5e:	189a      	adds	r2, r3, r2
 8016f60:	4694      	mov	ip, r2
 8016f62:	221f      	movs	r2, #31
 8016f64:	4017      	ands	r7, r2
 8016f66:	d024      	beq.n	8016fb2 <__lshift+0x9a>
 8016f68:	3201      	adds	r2, #1
 8016f6a:	1bd2      	subs	r2, r2, r7
 8016f6c:	9203      	str	r2, [sp, #12]
 8016f6e:	2200      	movs	r2, #0
 8016f70:	6819      	ldr	r1, [r3, #0]
 8016f72:	0020      	movs	r0, r4
 8016f74:	40b9      	lsls	r1, r7
 8016f76:	430a      	orrs	r2, r1
 8016f78:	c404      	stmia	r4!, {r2}
 8016f7a:	cb04      	ldmia	r3!, {r2}
 8016f7c:	9903      	ldr	r1, [sp, #12]
 8016f7e:	40ca      	lsrs	r2, r1
 8016f80:	459c      	cmp	ip, r3
 8016f82:	d8f5      	bhi.n	8016f70 <__lshift+0x58>
 8016f84:	6042      	str	r2, [r0, #4]
 8016f86:	2a00      	cmp	r2, #0
 8016f88:	d002      	beq.n	8016f90 <__lshift+0x78>
 8016f8a:	9b01      	ldr	r3, [sp, #4]
 8016f8c:	3302      	adds	r3, #2
 8016f8e:	9300      	str	r3, [sp, #0]
 8016f90:	9b00      	ldr	r3, [sp, #0]
 8016f92:	9802      	ldr	r0, [sp, #8]
 8016f94:	3b01      	subs	r3, #1
 8016f96:	6133      	str	r3, [r6, #16]
 8016f98:	0029      	movs	r1, r5
 8016f9a:	f7ff fe13 	bl	8016bc4 <_Bfree>
 8016f9e:	0030      	movs	r0, r6
 8016fa0:	b005      	add	sp, #20
 8016fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fa4:	3101      	adds	r1, #1
 8016fa6:	005b      	lsls	r3, r3, #1
 8016fa8:	e7c3      	b.n	8016f32 <__lshift+0x1a>
 8016faa:	0098      	lsls	r0, r3, #2
 8016fac:	5011      	str	r1, [r2, r0]
 8016fae:	3301      	adds	r3, #1
 8016fb0:	e7ca      	b.n	8016f48 <__lshift+0x30>
 8016fb2:	cb04      	ldmia	r3!, {r2}
 8016fb4:	c404      	stmia	r4!, {r2}
 8016fb6:	459c      	cmp	ip, r3
 8016fb8:	d8fb      	bhi.n	8016fb2 <__lshift+0x9a>
 8016fba:	e7e9      	b.n	8016f90 <__lshift+0x78>

08016fbc <__mcmp>:
 8016fbc:	690a      	ldr	r2, [r1, #16]
 8016fbe:	6903      	ldr	r3, [r0, #16]
 8016fc0:	b530      	push	{r4, r5, lr}
 8016fc2:	1a9b      	subs	r3, r3, r2
 8016fc4:	d10d      	bne.n	8016fe2 <__mcmp+0x26>
 8016fc6:	0092      	lsls	r2, r2, #2
 8016fc8:	3014      	adds	r0, #20
 8016fca:	3114      	adds	r1, #20
 8016fcc:	1884      	adds	r4, r0, r2
 8016fce:	1889      	adds	r1, r1, r2
 8016fd0:	3c04      	subs	r4, #4
 8016fd2:	3904      	subs	r1, #4
 8016fd4:	6825      	ldr	r5, [r4, #0]
 8016fd6:	680a      	ldr	r2, [r1, #0]
 8016fd8:	4295      	cmp	r5, r2
 8016fda:	d004      	beq.n	8016fe6 <__mcmp+0x2a>
 8016fdc:	2301      	movs	r3, #1
 8016fde:	4295      	cmp	r5, r2
 8016fe0:	d304      	bcc.n	8016fec <__mcmp+0x30>
 8016fe2:	0018      	movs	r0, r3
 8016fe4:	bd30      	pop	{r4, r5, pc}
 8016fe6:	42a0      	cmp	r0, r4
 8016fe8:	d3f2      	bcc.n	8016fd0 <__mcmp+0x14>
 8016fea:	e7fa      	b.n	8016fe2 <__mcmp+0x26>
 8016fec:	425b      	negs	r3, r3
 8016fee:	e7f8      	b.n	8016fe2 <__mcmp+0x26>

08016ff0 <__mdiff>:
 8016ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ff2:	000d      	movs	r5, r1
 8016ff4:	b085      	sub	sp, #20
 8016ff6:	0007      	movs	r7, r0
 8016ff8:	0011      	movs	r1, r2
 8016ffa:	0028      	movs	r0, r5
 8016ffc:	0014      	movs	r4, r2
 8016ffe:	f7ff ffdd 	bl	8016fbc <__mcmp>
 8017002:	1e06      	subs	r6, r0, #0
 8017004:	d108      	bne.n	8017018 <__mdiff+0x28>
 8017006:	0001      	movs	r1, r0
 8017008:	0038      	movs	r0, r7
 801700a:	f7ff fdb3 	bl	8016b74 <_Balloc>
 801700e:	2301      	movs	r3, #1
 8017010:	6146      	str	r6, [r0, #20]
 8017012:	6103      	str	r3, [r0, #16]
 8017014:	b005      	add	sp, #20
 8017016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017018:	2301      	movs	r3, #1
 801701a:	9301      	str	r3, [sp, #4]
 801701c:	2800      	cmp	r0, #0
 801701e:	db04      	blt.n	801702a <__mdiff+0x3a>
 8017020:	0023      	movs	r3, r4
 8017022:	002c      	movs	r4, r5
 8017024:	001d      	movs	r5, r3
 8017026:	2300      	movs	r3, #0
 8017028:	9301      	str	r3, [sp, #4]
 801702a:	6861      	ldr	r1, [r4, #4]
 801702c:	0038      	movs	r0, r7
 801702e:	f7ff fda1 	bl	8016b74 <_Balloc>
 8017032:	002f      	movs	r7, r5
 8017034:	2200      	movs	r2, #0
 8017036:	9b01      	ldr	r3, [sp, #4]
 8017038:	6926      	ldr	r6, [r4, #16]
 801703a:	60c3      	str	r3, [r0, #12]
 801703c:	3414      	adds	r4, #20
 801703e:	00b3      	lsls	r3, r6, #2
 8017040:	18e3      	adds	r3, r4, r3
 8017042:	9302      	str	r3, [sp, #8]
 8017044:	692b      	ldr	r3, [r5, #16]
 8017046:	3714      	adds	r7, #20
 8017048:	009b      	lsls	r3, r3, #2
 801704a:	18fb      	adds	r3, r7, r3
 801704c:	9303      	str	r3, [sp, #12]
 801704e:	0003      	movs	r3, r0
 8017050:	4694      	mov	ip, r2
 8017052:	3314      	adds	r3, #20
 8017054:	cc20      	ldmia	r4!, {r5}
 8017056:	cf04      	ldmia	r7!, {r2}
 8017058:	9201      	str	r2, [sp, #4]
 801705a:	b2aa      	uxth	r2, r5
 801705c:	4494      	add	ip, r2
 801705e:	466a      	mov	r2, sp
 8017060:	4661      	mov	r1, ip
 8017062:	8892      	ldrh	r2, [r2, #4]
 8017064:	0c2d      	lsrs	r5, r5, #16
 8017066:	1a8a      	subs	r2, r1, r2
 8017068:	9901      	ldr	r1, [sp, #4]
 801706a:	0c09      	lsrs	r1, r1, #16
 801706c:	1a69      	subs	r1, r5, r1
 801706e:	1415      	asrs	r5, r2, #16
 8017070:	1949      	adds	r1, r1, r5
 8017072:	140d      	asrs	r5, r1, #16
 8017074:	b292      	uxth	r2, r2
 8017076:	0409      	lsls	r1, r1, #16
 8017078:	430a      	orrs	r2, r1
 801707a:	601a      	str	r2, [r3, #0]
 801707c:	9a03      	ldr	r2, [sp, #12]
 801707e:	46ac      	mov	ip, r5
 8017080:	3304      	adds	r3, #4
 8017082:	42ba      	cmp	r2, r7
 8017084:	d8e6      	bhi.n	8017054 <__mdiff+0x64>
 8017086:	9902      	ldr	r1, [sp, #8]
 8017088:	001a      	movs	r2, r3
 801708a:	428c      	cmp	r4, r1
 801708c:	d305      	bcc.n	801709a <__mdiff+0xaa>
 801708e:	3a04      	subs	r2, #4
 8017090:	6813      	ldr	r3, [r2, #0]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d00e      	beq.n	80170b4 <__mdiff+0xc4>
 8017096:	6106      	str	r6, [r0, #16]
 8017098:	e7bc      	b.n	8017014 <__mdiff+0x24>
 801709a:	cc04      	ldmia	r4!, {r2}
 801709c:	b291      	uxth	r1, r2
 801709e:	4461      	add	r1, ip
 80170a0:	140d      	asrs	r5, r1, #16
 80170a2:	0c12      	lsrs	r2, r2, #16
 80170a4:	1952      	adds	r2, r2, r5
 80170a6:	1415      	asrs	r5, r2, #16
 80170a8:	b289      	uxth	r1, r1
 80170aa:	0412      	lsls	r2, r2, #16
 80170ac:	430a      	orrs	r2, r1
 80170ae:	46ac      	mov	ip, r5
 80170b0:	c304      	stmia	r3!, {r2}
 80170b2:	e7e8      	b.n	8017086 <__mdiff+0x96>
 80170b4:	3e01      	subs	r6, #1
 80170b6:	e7ea      	b.n	801708e <__mdiff+0x9e>

080170b8 <__ulp>:
 80170b8:	000b      	movs	r3, r1
 80170ba:	4910      	ldr	r1, [pc, #64]	; (80170fc <__ulp+0x44>)
 80170bc:	b510      	push	{r4, lr}
 80170be:	4019      	ands	r1, r3
 80170c0:	4b0f      	ldr	r3, [pc, #60]	; (8017100 <__ulp+0x48>)
 80170c2:	18c9      	adds	r1, r1, r3
 80170c4:	2900      	cmp	r1, #0
 80170c6:	dd04      	ble.n	80170d2 <__ulp+0x1a>
 80170c8:	2200      	movs	r2, #0
 80170ca:	000b      	movs	r3, r1
 80170cc:	0010      	movs	r0, r2
 80170ce:	0019      	movs	r1, r3
 80170d0:	bd10      	pop	{r4, pc}
 80170d2:	4249      	negs	r1, r1
 80170d4:	1509      	asrs	r1, r1, #20
 80170d6:	2200      	movs	r2, #0
 80170d8:	2300      	movs	r3, #0
 80170da:	2913      	cmp	r1, #19
 80170dc:	dc04      	bgt.n	80170e8 <__ulp+0x30>
 80170de:	2080      	movs	r0, #128	; 0x80
 80170e0:	0300      	lsls	r0, r0, #12
 80170e2:	4108      	asrs	r0, r1
 80170e4:	0003      	movs	r3, r0
 80170e6:	e7f1      	b.n	80170cc <__ulp+0x14>
 80170e8:	3914      	subs	r1, #20
 80170ea:	2001      	movs	r0, #1
 80170ec:	291e      	cmp	r1, #30
 80170ee:	dc02      	bgt.n	80170f6 <__ulp+0x3e>
 80170f0:	241f      	movs	r4, #31
 80170f2:	1a61      	subs	r1, r4, r1
 80170f4:	4088      	lsls	r0, r1
 80170f6:	0002      	movs	r2, r0
 80170f8:	e7e8      	b.n	80170cc <__ulp+0x14>
 80170fa:	46c0      	nop			; (mov r8, r8)
 80170fc:	7ff00000 	.word	0x7ff00000
 8017100:	fcc00000 	.word	0xfcc00000

08017104 <__b2d>:
 8017104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017106:	0006      	movs	r6, r0
 8017108:	6903      	ldr	r3, [r0, #16]
 801710a:	3614      	adds	r6, #20
 801710c:	009b      	lsls	r3, r3, #2
 801710e:	18f3      	adds	r3, r6, r3
 8017110:	1f1d      	subs	r5, r3, #4
 8017112:	682c      	ldr	r4, [r5, #0]
 8017114:	000f      	movs	r7, r1
 8017116:	0020      	movs	r0, r4
 8017118:	9301      	str	r3, [sp, #4]
 801711a:	f7ff fdd9 	bl	8016cd0 <__hi0bits>
 801711e:	2320      	movs	r3, #32
 8017120:	1a1b      	subs	r3, r3, r0
 8017122:	603b      	str	r3, [r7, #0]
 8017124:	491c      	ldr	r1, [pc, #112]	; (8017198 <__b2d+0x94>)
 8017126:	280a      	cmp	r0, #10
 8017128:	dc16      	bgt.n	8017158 <__b2d+0x54>
 801712a:	230b      	movs	r3, #11
 801712c:	0027      	movs	r7, r4
 801712e:	1a1b      	subs	r3, r3, r0
 8017130:	40df      	lsrs	r7, r3
 8017132:	4339      	orrs	r1, r7
 8017134:	469c      	mov	ip, r3
 8017136:	000b      	movs	r3, r1
 8017138:	2100      	movs	r1, #0
 801713a:	42ae      	cmp	r6, r5
 801713c:	d202      	bcs.n	8017144 <__b2d+0x40>
 801713e:	9901      	ldr	r1, [sp, #4]
 8017140:	3908      	subs	r1, #8
 8017142:	6809      	ldr	r1, [r1, #0]
 8017144:	3015      	adds	r0, #21
 8017146:	4084      	lsls	r4, r0
 8017148:	4660      	mov	r0, ip
 801714a:	40c1      	lsrs	r1, r0
 801714c:	430c      	orrs	r4, r1
 801714e:	0022      	movs	r2, r4
 8017150:	0010      	movs	r0, r2
 8017152:	0019      	movs	r1, r3
 8017154:	b003      	add	sp, #12
 8017156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017158:	2700      	movs	r7, #0
 801715a:	42ae      	cmp	r6, r5
 801715c:	d202      	bcs.n	8017164 <__b2d+0x60>
 801715e:	9d01      	ldr	r5, [sp, #4]
 8017160:	3d08      	subs	r5, #8
 8017162:	682f      	ldr	r7, [r5, #0]
 8017164:	380b      	subs	r0, #11
 8017166:	4684      	mov	ip, r0
 8017168:	1e03      	subs	r3, r0, #0
 801716a:	d012      	beq.n	8017192 <__b2d+0x8e>
 801716c:	409c      	lsls	r4, r3
 801716e:	2020      	movs	r0, #32
 8017170:	4321      	orrs	r1, r4
 8017172:	003c      	movs	r4, r7
 8017174:	1ac0      	subs	r0, r0, r3
 8017176:	40c4      	lsrs	r4, r0
 8017178:	4321      	orrs	r1, r4
 801717a:	000b      	movs	r3, r1
 801717c:	2100      	movs	r1, #0
 801717e:	42b5      	cmp	r5, r6
 8017180:	d901      	bls.n	8017186 <__b2d+0x82>
 8017182:	3d04      	subs	r5, #4
 8017184:	6829      	ldr	r1, [r5, #0]
 8017186:	4664      	mov	r4, ip
 8017188:	40c1      	lsrs	r1, r0
 801718a:	40a7      	lsls	r7, r4
 801718c:	430f      	orrs	r7, r1
 801718e:	003a      	movs	r2, r7
 8017190:	e7de      	b.n	8017150 <__b2d+0x4c>
 8017192:	4321      	orrs	r1, r4
 8017194:	000b      	movs	r3, r1
 8017196:	e7fa      	b.n	801718e <__b2d+0x8a>
 8017198:	3ff00000 	.word	0x3ff00000

0801719c <__d2b>:
 801719c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801719e:	001d      	movs	r5, r3
 80171a0:	2101      	movs	r1, #1
 80171a2:	0014      	movs	r4, r2
 80171a4:	9f08      	ldr	r7, [sp, #32]
 80171a6:	f7ff fce5 	bl	8016b74 <_Balloc>
 80171aa:	032b      	lsls	r3, r5, #12
 80171ac:	006d      	lsls	r5, r5, #1
 80171ae:	0006      	movs	r6, r0
 80171b0:	0b1b      	lsrs	r3, r3, #12
 80171b2:	0d6d      	lsrs	r5, r5, #21
 80171b4:	d124      	bne.n	8017200 <__d2b+0x64>
 80171b6:	9301      	str	r3, [sp, #4]
 80171b8:	2c00      	cmp	r4, #0
 80171ba:	d027      	beq.n	801720c <__d2b+0x70>
 80171bc:	4668      	mov	r0, sp
 80171be:	9400      	str	r4, [sp, #0]
 80171c0:	f7ff fda0 	bl	8016d04 <__lo0bits>
 80171c4:	9c00      	ldr	r4, [sp, #0]
 80171c6:	2800      	cmp	r0, #0
 80171c8:	d01e      	beq.n	8017208 <__d2b+0x6c>
 80171ca:	9b01      	ldr	r3, [sp, #4]
 80171cc:	2120      	movs	r1, #32
 80171ce:	001a      	movs	r2, r3
 80171d0:	1a09      	subs	r1, r1, r0
 80171d2:	408a      	lsls	r2, r1
 80171d4:	40c3      	lsrs	r3, r0
 80171d6:	4322      	orrs	r2, r4
 80171d8:	6172      	str	r2, [r6, #20]
 80171da:	9301      	str	r3, [sp, #4]
 80171dc:	9c01      	ldr	r4, [sp, #4]
 80171de:	61b4      	str	r4, [r6, #24]
 80171e0:	1e63      	subs	r3, r4, #1
 80171e2:	419c      	sbcs	r4, r3
 80171e4:	3401      	adds	r4, #1
 80171e6:	6134      	str	r4, [r6, #16]
 80171e8:	2d00      	cmp	r5, #0
 80171ea:	d018      	beq.n	801721e <__d2b+0x82>
 80171ec:	4b12      	ldr	r3, [pc, #72]	; (8017238 <__d2b+0x9c>)
 80171ee:	18ed      	adds	r5, r5, r3
 80171f0:	2335      	movs	r3, #53	; 0x35
 80171f2:	182d      	adds	r5, r5, r0
 80171f4:	603d      	str	r5, [r7, #0]
 80171f6:	1a18      	subs	r0, r3, r0
 80171f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171fa:	6018      	str	r0, [r3, #0]
 80171fc:	0030      	movs	r0, r6
 80171fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017200:	2280      	movs	r2, #128	; 0x80
 8017202:	0352      	lsls	r2, r2, #13
 8017204:	4313      	orrs	r3, r2
 8017206:	e7d6      	b.n	80171b6 <__d2b+0x1a>
 8017208:	6174      	str	r4, [r6, #20]
 801720a:	e7e7      	b.n	80171dc <__d2b+0x40>
 801720c:	a801      	add	r0, sp, #4
 801720e:	f7ff fd79 	bl	8016d04 <__lo0bits>
 8017212:	2401      	movs	r4, #1
 8017214:	9b01      	ldr	r3, [sp, #4]
 8017216:	6134      	str	r4, [r6, #16]
 8017218:	6173      	str	r3, [r6, #20]
 801721a:	3020      	adds	r0, #32
 801721c:	e7e4      	b.n	80171e8 <__d2b+0x4c>
 801721e:	4b07      	ldr	r3, [pc, #28]	; (801723c <__d2b+0xa0>)
 8017220:	18c0      	adds	r0, r0, r3
 8017222:	4b07      	ldr	r3, [pc, #28]	; (8017240 <__d2b+0xa4>)
 8017224:	6038      	str	r0, [r7, #0]
 8017226:	18e3      	adds	r3, r4, r3
 8017228:	009b      	lsls	r3, r3, #2
 801722a:	18f3      	adds	r3, r6, r3
 801722c:	6958      	ldr	r0, [r3, #20]
 801722e:	f7ff fd4f 	bl	8016cd0 <__hi0bits>
 8017232:	0164      	lsls	r4, r4, #5
 8017234:	1a20      	subs	r0, r4, r0
 8017236:	e7df      	b.n	80171f8 <__d2b+0x5c>
 8017238:	fffffbcd 	.word	0xfffffbcd
 801723c:	fffffbce 	.word	0xfffffbce
 8017240:	3fffffff 	.word	0x3fffffff

08017244 <__ratio>:
 8017244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017246:	b085      	sub	sp, #20
 8017248:	000f      	movs	r7, r1
 801724a:	a902      	add	r1, sp, #8
 801724c:	0006      	movs	r6, r0
 801724e:	f7ff ff59 	bl	8017104 <__b2d>
 8017252:	0004      	movs	r4, r0
 8017254:	000d      	movs	r5, r1
 8017256:	0038      	movs	r0, r7
 8017258:	a903      	add	r1, sp, #12
 801725a:	9400      	str	r4, [sp, #0]
 801725c:	9501      	str	r5, [sp, #4]
 801725e:	f7ff ff51 	bl	8017104 <__b2d>
 8017262:	6936      	ldr	r6, [r6, #16]
 8017264:	693f      	ldr	r7, [r7, #16]
 8017266:	0002      	movs	r2, r0
 8017268:	1bf7      	subs	r7, r6, r7
 801726a:	017e      	lsls	r6, r7, #5
 801726c:	46b4      	mov	ip, r6
 801726e:	9f03      	ldr	r7, [sp, #12]
 8017270:	9e02      	ldr	r6, [sp, #8]
 8017272:	000b      	movs	r3, r1
 8017274:	1bf6      	subs	r6, r6, r7
 8017276:	4466      	add	r6, ip
 8017278:	0537      	lsls	r7, r6, #20
 801727a:	2e00      	cmp	r6, #0
 801727c:	dd07      	ble.n	801728e <__ratio+0x4a>
 801727e:	1979      	adds	r1, r7, r5
 8017280:	9101      	str	r1, [sp, #4]
 8017282:	9800      	ldr	r0, [sp, #0]
 8017284:	9901      	ldr	r1, [sp, #4]
 8017286:	f7ea f9d5 	bl	8001634 <__aeabi_ddiv>
 801728a:	b005      	add	sp, #20
 801728c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801728e:	1bcb      	subs	r3, r1, r7
 8017290:	e7f7      	b.n	8017282 <__ratio+0x3e>

08017292 <__copybits>:
 8017292:	0013      	movs	r3, r2
 8017294:	3901      	subs	r1, #1
 8017296:	b510      	push	{r4, lr}
 8017298:	1149      	asrs	r1, r1, #5
 801729a:	6912      	ldr	r2, [r2, #16]
 801729c:	3101      	adds	r1, #1
 801729e:	0089      	lsls	r1, r1, #2
 80172a0:	3314      	adds	r3, #20
 80172a2:	0092      	lsls	r2, r2, #2
 80172a4:	1841      	adds	r1, r0, r1
 80172a6:	189a      	adds	r2, r3, r2
 80172a8:	429a      	cmp	r2, r3
 80172aa:	d803      	bhi.n	80172b4 <__copybits+0x22>
 80172ac:	2300      	movs	r3, #0
 80172ae:	4281      	cmp	r1, r0
 80172b0:	d803      	bhi.n	80172ba <__copybits+0x28>
 80172b2:	bd10      	pop	{r4, pc}
 80172b4:	cb10      	ldmia	r3!, {r4}
 80172b6:	c010      	stmia	r0!, {r4}
 80172b8:	e7f6      	b.n	80172a8 <__copybits+0x16>
 80172ba:	c008      	stmia	r0!, {r3}
 80172bc:	e7f7      	b.n	80172ae <__copybits+0x1c>

080172be <__any_on>:
 80172be:	0002      	movs	r2, r0
 80172c0:	6900      	ldr	r0, [r0, #16]
 80172c2:	b510      	push	{r4, lr}
 80172c4:	3214      	adds	r2, #20
 80172c6:	114b      	asrs	r3, r1, #5
 80172c8:	4298      	cmp	r0, r3
 80172ca:	db12      	blt.n	80172f2 <__any_on+0x34>
 80172cc:	dd0b      	ble.n	80172e6 <__any_on+0x28>
 80172ce:	201f      	movs	r0, #31
 80172d0:	4001      	ands	r1, r0
 80172d2:	d008      	beq.n	80172e6 <__any_on+0x28>
 80172d4:	0098      	lsls	r0, r3, #2
 80172d6:	5884      	ldr	r4, [r0, r2]
 80172d8:	0020      	movs	r0, r4
 80172da:	40c8      	lsrs	r0, r1
 80172dc:	4088      	lsls	r0, r1
 80172de:	0001      	movs	r1, r0
 80172e0:	2001      	movs	r0, #1
 80172e2:	428c      	cmp	r4, r1
 80172e4:	d104      	bne.n	80172f0 <__any_on+0x32>
 80172e6:	009b      	lsls	r3, r3, #2
 80172e8:	18d3      	adds	r3, r2, r3
 80172ea:	4293      	cmp	r3, r2
 80172ec:	d803      	bhi.n	80172f6 <__any_on+0x38>
 80172ee:	2000      	movs	r0, #0
 80172f0:	bd10      	pop	{r4, pc}
 80172f2:	0003      	movs	r3, r0
 80172f4:	e7f7      	b.n	80172e6 <__any_on+0x28>
 80172f6:	3b04      	subs	r3, #4
 80172f8:	6819      	ldr	r1, [r3, #0]
 80172fa:	2900      	cmp	r1, #0
 80172fc:	d0f5      	beq.n	80172ea <__any_on+0x2c>
 80172fe:	2001      	movs	r0, #1
 8017300:	e7f6      	b.n	80172f0 <__any_on+0x32>
	...

08017304 <frexp>:
 8017304:	b570      	push	{r4, r5, r6, lr}
 8017306:	0014      	movs	r4, r2
 8017308:	2500      	movs	r5, #0
 801730a:	6025      	str	r5, [r4, #0]
 801730c:	4d10      	ldr	r5, [pc, #64]	; (8017350 <frexp+0x4c>)
 801730e:	004b      	lsls	r3, r1, #1
 8017310:	000a      	movs	r2, r1
 8017312:	085b      	lsrs	r3, r3, #1
 8017314:	42ab      	cmp	r3, r5
 8017316:	dc1a      	bgt.n	801734e <frexp+0x4a>
 8017318:	001d      	movs	r5, r3
 801731a:	4305      	orrs	r5, r0
 801731c:	d017      	beq.n	801734e <frexp+0x4a>
 801731e:	4d0d      	ldr	r5, [pc, #52]	; (8017354 <frexp+0x50>)
 8017320:	42ab      	cmp	r3, r5
 8017322:	dc09      	bgt.n	8017338 <frexp+0x34>
 8017324:	2200      	movs	r2, #0
 8017326:	4b0c      	ldr	r3, [pc, #48]	; (8017358 <frexp+0x54>)
 8017328:	f7ea fd8e 	bl	8001e48 <__aeabi_dmul>
 801732c:	2536      	movs	r5, #54	; 0x36
 801732e:	000a      	movs	r2, r1
 8017330:	004b      	lsls	r3, r1, #1
 8017332:	426d      	negs	r5, r5
 8017334:	085b      	lsrs	r3, r3, #1
 8017336:	6025      	str	r5, [r4, #0]
 8017338:	4d08      	ldr	r5, [pc, #32]	; (801735c <frexp+0x58>)
 801733a:	151b      	asrs	r3, r3, #20
 801733c:	195b      	adds	r3, r3, r5
 801733e:	6825      	ldr	r5, [r4, #0]
 8017340:	18eb      	adds	r3, r5, r3
 8017342:	6023      	str	r3, [r4, #0]
 8017344:	4b06      	ldr	r3, [pc, #24]	; (8017360 <frexp+0x5c>)
 8017346:	401a      	ands	r2, r3
 8017348:	4b06      	ldr	r3, [pc, #24]	; (8017364 <frexp+0x60>)
 801734a:	4313      	orrs	r3, r2
 801734c:	0019      	movs	r1, r3
 801734e:	bd70      	pop	{r4, r5, r6, pc}
 8017350:	7fefffff 	.word	0x7fefffff
 8017354:	000fffff 	.word	0x000fffff
 8017358:	43500000 	.word	0x43500000
 801735c:	fffffc02 	.word	0xfffffc02
 8017360:	800fffff 	.word	0x800fffff
 8017364:	3fe00000 	.word	0x3fe00000

08017368 <__ssprint_r>:
 8017368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801736a:	6893      	ldr	r3, [r2, #8]
 801736c:	b087      	sub	sp, #28
 801736e:	9002      	str	r0, [sp, #8]
 8017370:	000c      	movs	r4, r1
 8017372:	0016      	movs	r6, r2
 8017374:	2b00      	cmp	r3, #0
 8017376:	d063      	beq.n	8017440 <__ssprint_r+0xd8>
 8017378:	6813      	ldr	r3, [r2, #0]
 801737a:	9303      	str	r3, [sp, #12]
 801737c:	2300      	movs	r3, #0
 801737e:	001f      	movs	r7, r3
 8017380:	9305      	str	r3, [sp, #20]
 8017382:	2f00      	cmp	r7, #0
 8017384:	d02e      	beq.n	80173e4 <__ssprint_r+0x7c>
 8017386:	68a5      	ldr	r5, [r4, #8]
 8017388:	42af      	cmp	r7, r5
 801738a:	d347      	bcc.n	801741c <__ssprint_r+0xb4>
 801738c:	2390      	movs	r3, #144	; 0x90
 801738e:	89a2      	ldrh	r2, [r4, #12]
 8017390:	00db      	lsls	r3, r3, #3
 8017392:	421a      	tst	r2, r3
 8017394:	d042      	beq.n	801741c <__ssprint_r+0xb4>
 8017396:	2003      	movs	r0, #3
 8017398:	6921      	ldr	r1, [r4, #16]
 801739a:	6823      	ldr	r3, [r4, #0]
 801739c:	1a5b      	subs	r3, r3, r1
 801739e:	9304      	str	r3, [sp, #16]
 80173a0:	6963      	ldr	r3, [r4, #20]
 80173a2:	4343      	muls	r3, r0
 80173a4:	0fd8      	lsrs	r0, r3, #31
 80173a6:	18c3      	adds	r3, r0, r3
 80173a8:	105b      	asrs	r3, r3, #1
 80173aa:	9301      	str	r3, [sp, #4]
 80173ac:	9b04      	ldr	r3, [sp, #16]
 80173ae:	9801      	ldr	r0, [sp, #4]
 80173b0:	3301      	adds	r3, #1
 80173b2:	19db      	adds	r3, r3, r7
 80173b4:	4283      	cmp	r3, r0
 80173b6:	d900      	bls.n	80173ba <__ssprint_r+0x52>
 80173b8:	9301      	str	r3, [sp, #4]
 80173ba:	0553      	lsls	r3, r2, #21
 80173bc:	d544      	bpl.n	8017448 <__ssprint_r+0xe0>
 80173be:	9901      	ldr	r1, [sp, #4]
 80173c0:	9802      	ldr	r0, [sp, #8]
 80173c2:	f7fb fab7 	bl	8012934 <_malloc_r>
 80173c6:	1e05      	subs	r5, r0, #0
 80173c8:	d114      	bne.n	80173f4 <__ssprint_r+0x8c>
 80173ca:	230c      	movs	r3, #12
 80173cc:	9a02      	ldr	r2, [sp, #8]
 80173ce:	2001      	movs	r0, #1
 80173d0:	6013      	str	r3, [r2, #0]
 80173d2:	2340      	movs	r3, #64	; 0x40
 80173d4:	89a2      	ldrh	r2, [r4, #12]
 80173d6:	4240      	negs	r0, r0
 80173d8:	4313      	orrs	r3, r2
 80173da:	81a3      	strh	r3, [r4, #12]
 80173dc:	2300      	movs	r3, #0
 80173de:	60b3      	str	r3, [r6, #8]
 80173e0:	6073      	str	r3, [r6, #4]
 80173e2:	e02f      	b.n	8017444 <__ssprint_r+0xdc>
 80173e4:	9b03      	ldr	r3, [sp, #12]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	9305      	str	r3, [sp, #20]
 80173ea:	9b03      	ldr	r3, [sp, #12]
 80173ec:	685f      	ldr	r7, [r3, #4]
 80173ee:	3308      	adds	r3, #8
 80173f0:	9303      	str	r3, [sp, #12]
 80173f2:	e7c6      	b.n	8017382 <__ssprint_r+0x1a>
 80173f4:	9a04      	ldr	r2, [sp, #16]
 80173f6:	6921      	ldr	r1, [r4, #16]
 80173f8:	f7fb fcd5 	bl	8012da6 <memcpy>
 80173fc:	89a3      	ldrh	r3, [r4, #12]
 80173fe:	4a18      	ldr	r2, [pc, #96]	; (8017460 <__ssprint_r+0xf8>)
 8017400:	401a      	ands	r2, r3
 8017402:	2380      	movs	r3, #128	; 0x80
 8017404:	4313      	orrs	r3, r2
 8017406:	81a3      	strh	r3, [r4, #12]
 8017408:	9b04      	ldr	r3, [sp, #16]
 801740a:	6125      	str	r5, [r4, #16]
 801740c:	18ed      	adds	r5, r5, r3
 801740e:	6025      	str	r5, [r4, #0]
 8017410:	003d      	movs	r5, r7
 8017412:	9b01      	ldr	r3, [sp, #4]
 8017414:	9a04      	ldr	r2, [sp, #16]
 8017416:	6163      	str	r3, [r4, #20]
 8017418:	1a9b      	subs	r3, r3, r2
 801741a:	60a3      	str	r3, [r4, #8]
 801741c:	42bd      	cmp	r5, r7
 801741e:	d900      	bls.n	8017422 <__ssprint_r+0xba>
 8017420:	003d      	movs	r5, r7
 8017422:	002a      	movs	r2, r5
 8017424:	9905      	ldr	r1, [sp, #20]
 8017426:	6820      	ldr	r0, [r4, #0]
 8017428:	f7ff fb91 	bl	8016b4e <memmove>
 801742c:	68a3      	ldr	r3, [r4, #8]
 801742e:	1b5b      	subs	r3, r3, r5
 8017430:	60a3      	str	r3, [r4, #8]
 8017432:	6823      	ldr	r3, [r4, #0]
 8017434:	195d      	adds	r5, r3, r5
 8017436:	68b3      	ldr	r3, [r6, #8]
 8017438:	6025      	str	r5, [r4, #0]
 801743a:	1bdb      	subs	r3, r3, r7
 801743c:	60b3      	str	r3, [r6, #8]
 801743e:	d1d1      	bne.n	80173e4 <__ssprint_r+0x7c>
 8017440:	2000      	movs	r0, #0
 8017442:	6070      	str	r0, [r6, #4]
 8017444:	b007      	add	sp, #28
 8017446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017448:	9a01      	ldr	r2, [sp, #4]
 801744a:	9802      	ldr	r0, [sp, #8]
 801744c:	f7fb fcf0 	bl	8012e30 <_realloc_r>
 8017450:	1e05      	subs	r5, r0, #0
 8017452:	d1d9      	bne.n	8017408 <__ssprint_r+0xa0>
 8017454:	6921      	ldr	r1, [r4, #16]
 8017456:	9802      	ldr	r0, [sp, #8]
 8017458:	f7fe ff78 	bl	801634c <_free_r>
 801745c:	e7b5      	b.n	80173ca <__ssprint_r+0x62>
 801745e:	46c0      	nop			; (mov r8, r8)
 8017460:	fffffb7f 	.word	0xfffffb7f

08017464 <__register_exitproc>:
 8017464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017466:	4d29      	ldr	r5, [pc, #164]	; (801750c <__register_exitproc+0xa8>)
 8017468:	0006      	movs	r6, r0
 801746a:	6828      	ldr	r0, [r5, #0]
 801746c:	9301      	str	r3, [sp, #4]
 801746e:	9100      	str	r1, [sp, #0]
 8017470:	0017      	movs	r7, r2
 8017472:	f7ff fb5f 	bl	8016b34 <__retarget_lock_acquire_recursive>
 8017476:	4b26      	ldr	r3, [pc, #152]	; (8017510 <__register_exitproc+0xac>)
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	001c      	movs	r4, r3
 801747c:	34fc      	adds	r4, #252	; 0xfc
 801747e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017480:	2800      	cmp	r0, #0
 8017482:	d103      	bne.n	801748c <__register_exitproc+0x28>
 8017484:	334d      	adds	r3, #77	; 0x4d
 8017486:	33ff      	adds	r3, #255	; 0xff
 8017488:	0018      	movs	r0, r3
 801748a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801748c:	6843      	ldr	r3, [r0, #4]
 801748e:	2b1f      	cmp	r3, #31
 8017490:	dd18      	ble.n	80174c4 <__register_exitproc+0x60>
 8017492:	4b20      	ldr	r3, [pc, #128]	; (8017514 <__register_exitproc+0xb0>)
 8017494:	2b00      	cmp	r3, #0
 8017496:	d105      	bne.n	80174a4 <__register_exitproc+0x40>
 8017498:	6828      	ldr	r0, [r5, #0]
 801749a:	f7ff fb4c 	bl	8016b36 <__retarget_lock_release_recursive>
 801749e:	2001      	movs	r0, #1
 80174a0:	4240      	negs	r0, r0
 80174a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80174a4:	20c8      	movs	r0, #200	; 0xc8
 80174a6:	0040      	lsls	r0, r0, #1
 80174a8:	f7fb fa30 	bl	801290c <malloc>
 80174ac:	2800      	cmp	r0, #0
 80174ae:	d0f3      	beq.n	8017498 <__register_exitproc+0x34>
 80174b0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80174b2:	2300      	movs	r3, #0
 80174b4:	6002      	str	r2, [r0, #0]
 80174b6:	22c4      	movs	r2, #196	; 0xc4
 80174b8:	0052      	lsls	r2, r2, #1
 80174ba:	6043      	str	r3, [r0, #4]
 80174bc:	64e0      	str	r0, [r4, #76]	; 0x4c
 80174be:	5083      	str	r3, [r0, r2]
 80174c0:	3204      	adds	r2, #4
 80174c2:	5083      	str	r3, [r0, r2]
 80174c4:	6843      	ldr	r3, [r0, #4]
 80174c6:	2e00      	cmp	r6, #0
 80174c8:	d014      	beq.n	80174f4 <__register_exitproc+0x90>
 80174ca:	009a      	lsls	r2, r3, #2
 80174cc:	1882      	adds	r2, r0, r2
 80174ce:	0011      	movs	r1, r2
 80174d0:	3188      	adds	r1, #136	; 0x88
 80174d2:	600f      	str	r7, [r1, #0]
 80174d4:	2101      	movs	r1, #1
 80174d6:	0004      	movs	r4, r0
 80174d8:	4099      	lsls	r1, r3
 80174da:	3485      	adds	r4, #133	; 0x85
 80174dc:	34ff      	adds	r4, #255	; 0xff
 80174de:	6865      	ldr	r5, [r4, #4]
 80174e0:	32fc      	adds	r2, #252	; 0xfc
 80174e2:	430d      	orrs	r5, r1
 80174e4:	6065      	str	r5, [r4, #4]
 80174e6:	9d01      	ldr	r5, [sp, #4]
 80174e8:	60d5      	str	r5, [r2, #12]
 80174ea:	2e02      	cmp	r6, #2
 80174ec:	d102      	bne.n	80174f4 <__register_exitproc+0x90>
 80174ee:	68a2      	ldr	r2, [r4, #8]
 80174f0:	4311      	orrs	r1, r2
 80174f2:	60a1      	str	r1, [r4, #8]
 80174f4:	1c5a      	adds	r2, r3, #1
 80174f6:	6042      	str	r2, [r0, #4]
 80174f8:	3302      	adds	r3, #2
 80174fa:	9a00      	ldr	r2, [sp, #0]
 80174fc:	009b      	lsls	r3, r3, #2
 80174fe:	501a      	str	r2, [r3, r0]
 8017500:	4b02      	ldr	r3, [pc, #8]	; (801750c <__register_exitproc+0xa8>)
 8017502:	6818      	ldr	r0, [r3, #0]
 8017504:	f7ff fb17 	bl	8016b36 <__retarget_lock_release_recursive>
 8017508:	2000      	movs	r0, #0
 801750a:	e7ca      	b.n	80174a2 <__register_exitproc+0x3e>
 801750c:	20000a74 	.word	0x20000a74
 8017510:	0801a538 	.word	0x0801a538
 8017514:	0801290d 	.word	0x0801290d

08017518 <_calloc_r>:
 8017518:	b510      	push	{r4, lr}
 801751a:	4351      	muls	r1, r2
 801751c:	f7fb fa0a 	bl	8012934 <_malloc_r>
 8017520:	1e04      	subs	r4, r0, #0
 8017522:	d01a      	beq.n	801755a <_calloc_r+0x42>
 8017524:	0003      	movs	r3, r0
 8017526:	3b08      	subs	r3, #8
 8017528:	685a      	ldr	r2, [r3, #4]
 801752a:	2303      	movs	r3, #3
 801752c:	439a      	bics	r2, r3
 801752e:	3a04      	subs	r2, #4
 8017530:	2a24      	cmp	r2, #36	; 0x24
 8017532:	d819      	bhi.n	8017568 <_calloc_r+0x50>
 8017534:	0003      	movs	r3, r0
 8017536:	2a13      	cmp	r2, #19
 8017538:	d90b      	bls.n	8017552 <_calloc_r+0x3a>
 801753a:	2100      	movs	r1, #0
 801753c:	3308      	adds	r3, #8
 801753e:	6001      	str	r1, [r0, #0]
 8017540:	6041      	str	r1, [r0, #4]
 8017542:	2a1b      	cmp	r2, #27
 8017544:	d905      	bls.n	8017552 <_calloc_r+0x3a>
 8017546:	6081      	str	r1, [r0, #8]
 8017548:	60c1      	str	r1, [r0, #12]
 801754a:	2a24      	cmp	r2, #36	; 0x24
 801754c:	d007      	beq.n	801755e <_calloc_r+0x46>
 801754e:	0003      	movs	r3, r0
 8017550:	3310      	adds	r3, #16
 8017552:	2200      	movs	r2, #0
 8017554:	601a      	str	r2, [r3, #0]
 8017556:	605a      	str	r2, [r3, #4]
 8017558:	609a      	str	r2, [r3, #8]
 801755a:	0020      	movs	r0, r4
 801755c:	bd10      	pop	{r4, pc}
 801755e:	0003      	movs	r3, r0
 8017560:	6101      	str	r1, [r0, #16]
 8017562:	3318      	adds	r3, #24
 8017564:	6141      	str	r1, [r0, #20]
 8017566:	e7f4      	b.n	8017552 <_calloc_r+0x3a>
 8017568:	2100      	movs	r1, #0
 801756a:	f7fb fc25 	bl	8012db8 <memset>
 801756e:	e7f4      	b.n	801755a <_calloc_r+0x42>

08017570 <_sbrk>:
 8017570:	4b05      	ldr	r3, [pc, #20]	; (8017588 <_sbrk+0x18>)
 8017572:	0002      	movs	r2, r0
 8017574:	6819      	ldr	r1, [r3, #0]
 8017576:	2900      	cmp	r1, #0
 8017578:	d101      	bne.n	801757e <_sbrk+0xe>
 801757a:	4904      	ldr	r1, [pc, #16]	; (801758c <_sbrk+0x1c>)
 801757c:	6019      	str	r1, [r3, #0]
 801757e:	6818      	ldr	r0, [r3, #0]
 8017580:	1882      	adds	r2, r0, r2
 8017582:	601a      	str	r2, [r3, #0]
 8017584:	4770      	bx	lr
 8017586:	46c0      	nop			; (mov r8, r8)
 8017588:	200067c0 	.word	0x200067c0
 801758c:	20006e00 	.word	0x20006e00

08017590 <_init>:
 8017590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017592:	46c0      	nop			; (mov r8, r8)
 8017594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017596:	bc08      	pop	{r3}
 8017598:	469e      	mov	lr, r3
 801759a:	4770      	bx	lr

0801759c <_fini>:
 801759c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801759e:	46c0      	nop			; (mov r8, r8)
 80175a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175a2:	bc08      	pop	{r3}
 80175a4:	469e      	mov	lr, r3
 80175a6:	4770      	bx	lr
