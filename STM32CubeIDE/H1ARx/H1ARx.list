
H1ARx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000195e4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033e0  080196a0  080196a0  000296a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ca80  0801ca80  00030a7c  2**0
                  CONTENTS
  4 .ARM          00000008  0801ca80  0801ca80  0002ca80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ca88  0801ca88  00030a7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801ca88  0801ca88  0002ca88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ca90  0801ca90  0002ca90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    00000008  20000000  0801ca94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000a74  20000008  0801ca9c  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006508  20000a80  0801d510  00030a80  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20006f88  0801d510  00036f88  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030a7c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034fe8  00000000  00000000  00030aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006f3e  00000000  00000000  00065a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0001cec4  00000000  00000000  0006c9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001dd8  00000000  00000000  00089890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001fb0  00000000  00000000  0008b668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002607b  00000000  00000000  0008d618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a3e3  00000000  00000000  000b3693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000bda76  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e00  00000000  00000000  000bdac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  000c48c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  000c4994  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a80 	.word	0x20000a80
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08019688 	.word	0x08019688

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a84 	.word	0x20000a84
 8000100:	08019688 	.word	0x08019688

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_uhi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5a09      	ldrh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fcd9 	bl	8001e04 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fc29 	bl	8001cb4 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fccb 	bl	8001e04 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fcc1 	bl	8001e04 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc51 	bl	8001d38 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fc47 	bl	8001d38 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fa4b 	bl	800095c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f9d7 	bl	8000884 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fa3d 	bl	800095c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fa33 	bl	800095c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f9e3 	bl	80008d0 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f9d9 	bl	80008d0 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_ulcmp>:
 800052c:	4299      	cmp	r1, r3
 800052e:	d101      	bne.n	8000534 <__aeabi_ulcmp+0x8>
 8000530:	1a80      	subs	r0, r0, r2
 8000532:	d004      	beq.n	800053e <__aeabi_ulcmp+0x12>
 8000534:	d202      	bcs.n	800053c <__aeabi_ulcmp+0x10>
 8000536:	2001      	movs	r0, #1
 8000538:	4240      	negs	r0, r0
 800053a:	4770      	bx	lr
 800053c:	2001      	movs	r0, #1
 800053e:	4770      	bx	lr

08000540 <__aeabi_uldivmod>:
 8000540:	2b00      	cmp	r3, #0
 8000542:	d111      	bne.n	8000568 <__aeabi_uldivmod+0x28>
 8000544:	2a00      	cmp	r2, #0
 8000546:	d10f      	bne.n	8000568 <__aeabi_uldivmod+0x28>
 8000548:	2900      	cmp	r1, #0
 800054a:	d100      	bne.n	800054e <__aeabi_uldivmod+0xe>
 800054c:	2800      	cmp	r0, #0
 800054e:	d002      	beq.n	8000556 <__aeabi_uldivmod+0x16>
 8000550:	2100      	movs	r1, #0
 8000552:	43c9      	mvns	r1, r1
 8000554:	0008      	movs	r0, r1
 8000556:	b407      	push	{r0, r1, r2}
 8000558:	4802      	ldr	r0, [pc, #8]	; (8000564 <__aeabi_uldivmod+0x24>)
 800055a:	a102      	add	r1, pc, #8	; (adr r1, 8000564 <__aeabi_uldivmod+0x24>)
 800055c:	1840      	adds	r0, r0, r1
 800055e:	9002      	str	r0, [sp, #8]
 8000560:	bd03      	pop	{r0, r1, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	fffffed5 	.word	0xfffffed5
 8000568:	b403      	push	{r0, r1}
 800056a:	4668      	mov	r0, sp
 800056c:	b501      	push	{r0, lr}
 800056e:	9802      	ldr	r0, [sp, #8]
 8000570:	f000 f8bc 	bl	80006ec <__udivmoddi4>
 8000574:	9b01      	ldr	r3, [sp, #4]
 8000576:	469e      	mov	lr, r3
 8000578:	b002      	add	sp, #8
 800057a:	bc0c      	pop	{r2, r3}
 800057c:	4770      	bx	lr
 800057e:	46c0      	nop			; (mov r8, r8)

08000580 <__aeabi_lmul>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	46ce      	mov	lr, r9
 8000584:	4647      	mov	r7, r8
 8000586:	b580      	push	{r7, lr}
 8000588:	0007      	movs	r7, r0
 800058a:	4699      	mov	r9, r3
 800058c:	0c3b      	lsrs	r3, r7, #16
 800058e:	469c      	mov	ip, r3
 8000590:	0413      	lsls	r3, r2, #16
 8000592:	0c1b      	lsrs	r3, r3, #16
 8000594:	001d      	movs	r5, r3
 8000596:	000e      	movs	r6, r1
 8000598:	4661      	mov	r1, ip
 800059a:	0400      	lsls	r0, r0, #16
 800059c:	0c14      	lsrs	r4, r2, #16
 800059e:	0c00      	lsrs	r0, r0, #16
 80005a0:	4345      	muls	r5, r0
 80005a2:	434b      	muls	r3, r1
 80005a4:	4360      	muls	r0, r4
 80005a6:	4361      	muls	r1, r4
 80005a8:	18c0      	adds	r0, r0, r3
 80005aa:	0c2c      	lsrs	r4, r5, #16
 80005ac:	1820      	adds	r0, r4, r0
 80005ae:	468c      	mov	ip, r1
 80005b0:	4283      	cmp	r3, r0
 80005b2:	d903      	bls.n	80005bc <__aeabi_lmul+0x3c>
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	025b      	lsls	r3, r3, #9
 80005b8:	4698      	mov	r8, r3
 80005ba:	44c4      	add	ip, r8
 80005bc:	4649      	mov	r1, r9
 80005be:	4379      	muls	r1, r7
 80005c0:	4372      	muls	r2, r6
 80005c2:	0c03      	lsrs	r3, r0, #16
 80005c4:	4463      	add	r3, ip
 80005c6:	042d      	lsls	r5, r5, #16
 80005c8:	0c2d      	lsrs	r5, r5, #16
 80005ca:	18c9      	adds	r1, r1, r3
 80005cc:	0400      	lsls	r0, r0, #16
 80005ce:	1940      	adds	r0, r0, r5
 80005d0:	1889      	adds	r1, r1, r2
 80005d2:	bcc0      	pop	{r6, r7}
 80005d4:	46b9      	mov	r9, r7
 80005d6:	46b0      	mov	r8, r6
 80005d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__aeabi_f2uiz>:
 80005dc:	219e      	movs	r1, #158	; 0x9e
 80005de:	b510      	push	{r4, lr}
 80005e0:	05c9      	lsls	r1, r1, #23
 80005e2:	1c04      	adds	r4, r0, #0
 80005e4:	f7ff ff98 	bl	8000518 <__aeabi_fcmpge>
 80005e8:	2800      	cmp	r0, #0
 80005ea:	d103      	bne.n	80005f4 <__aeabi_f2uiz+0x18>
 80005ec:	1c20      	adds	r0, r4, #0
 80005ee:	f000 fccd 	bl	8000f8c <__aeabi_f2iz>
 80005f2:	bd10      	pop	{r4, pc}
 80005f4:	219e      	movs	r1, #158	; 0x9e
 80005f6:	1c20      	adds	r0, r4, #0
 80005f8:	05c9      	lsls	r1, r1, #23
 80005fa:	f000 fb19 	bl	8000c30 <__aeabi_fsub>
 80005fe:	f000 fcc5 	bl	8000f8c <__aeabi_f2iz>
 8000602:	2380      	movs	r3, #128	; 0x80
 8000604:	061b      	lsls	r3, r3, #24
 8000606:	469c      	mov	ip, r3
 8000608:	4460      	add	r0, ip
 800060a:	e7f2      	b.n	80005f2 <__aeabi_f2uiz+0x16>

0800060c <__aeabi_d2uiz>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	2200      	movs	r2, #0
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <__aeabi_d2uiz+0x38>)
 8000612:	0004      	movs	r4, r0
 8000614:	000d      	movs	r5, r1
 8000616:	f7ff ff45 	bl	80004a4 <__aeabi_dcmpge>
 800061a:	2800      	cmp	r0, #0
 800061c:	d104      	bne.n	8000628 <__aeabi_d2uiz+0x1c>
 800061e:	0020      	movs	r0, r4
 8000620:	0029      	movs	r1, r5
 8000622:	f002 fa6f 	bl	8002b04 <__aeabi_d2iz>
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <__aeabi_d2uiz+0x38>)
 800062a:	2200      	movs	r2, #0
 800062c:	0020      	movs	r0, r4
 800062e:	0029      	movs	r1, r5
 8000630:	f001 feb8 	bl	80023a4 <__aeabi_dsub>
 8000634:	f002 fa66 	bl	8002b04 <__aeabi_d2iz>
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	061b      	lsls	r3, r3, #24
 800063c:	469c      	mov	ip, r3
 800063e:	4460      	add	r0, ip
 8000640:	e7f1      	b.n	8000626 <__aeabi_d2uiz+0x1a>
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	41e00000 	.word	0x41e00000

08000648 <__aeabi_d2lz>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	0005      	movs	r5, r0
 800064c:	000c      	movs	r4, r1
 800064e:	2200      	movs	r2, #0
 8000650:	2300      	movs	r3, #0
 8000652:	0028      	movs	r0, r5
 8000654:	0021      	movs	r1, r4
 8000656:	f7ff ff07 	bl	8000468 <__aeabi_dcmplt>
 800065a:	2800      	cmp	r0, #0
 800065c:	d108      	bne.n	8000670 <__aeabi_d2lz+0x28>
 800065e:	0028      	movs	r0, r5
 8000660:	0021      	movs	r1, r4
 8000662:	f000 f80f 	bl	8000684 <__aeabi_d2ulz>
 8000666:	0002      	movs	r2, r0
 8000668:	000b      	movs	r3, r1
 800066a:	0010      	movs	r0, r2
 800066c:	0019      	movs	r1, r3
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	061b      	lsls	r3, r3, #24
 8000674:	18e1      	adds	r1, r4, r3
 8000676:	0028      	movs	r0, r5
 8000678:	f000 f804 	bl	8000684 <__aeabi_d2ulz>
 800067c:	2300      	movs	r3, #0
 800067e:	4242      	negs	r2, r0
 8000680:	418b      	sbcs	r3, r1
 8000682:	e7f2      	b.n	800066a <__aeabi_d2lz+0x22>

08000684 <__aeabi_d2ulz>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	2200      	movs	r2, #0
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <__aeabi_d2ulz+0x34>)
 800068a:	000d      	movs	r5, r1
 800068c:	0004      	movs	r4, r0
 800068e:	f001 fc1d 	bl	8001ecc <__aeabi_dmul>
 8000692:	f7ff ffbb 	bl	800060c <__aeabi_d2uiz>
 8000696:	0006      	movs	r6, r0
 8000698:	f002 fa9a 	bl	8002bd0 <__aeabi_ui2d>
 800069c:	2200      	movs	r2, #0
 800069e:	4b07      	ldr	r3, [pc, #28]	; (80006bc <__aeabi_d2ulz+0x38>)
 80006a0:	f001 fc14 	bl	8001ecc <__aeabi_dmul>
 80006a4:	0002      	movs	r2, r0
 80006a6:	000b      	movs	r3, r1
 80006a8:	0020      	movs	r0, r4
 80006aa:	0029      	movs	r1, r5
 80006ac:	f001 fe7a 	bl	80023a4 <__aeabi_dsub>
 80006b0:	f7ff ffac 	bl	800060c <__aeabi_d2uiz>
 80006b4:	0031      	movs	r1, r6
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	3df00000 	.word	0x3df00000
 80006bc:	41f00000 	.word	0x41f00000

080006c0 <__aeabi_l2d>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	0006      	movs	r6, r0
 80006c4:	0008      	movs	r0, r1
 80006c6:	f002 fa53 	bl	8002b70 <__aeabi_i2d>
 80006ca:	2200      	movs	r2, #0
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <__aeabi_l2d+0x28>)
 80006ce:	f001 fbfd 	bl	8001ecc <__aeabi_dmul>
 80006d2:	000d      	movs	r5, r1
 80006d4:	0004      	movs	r4, r0
 80006d6:	0030      	movs	r0, r6
 80006d8:	f002 fa7a 	bl	8002bd0 <__aeabi_ui2d>
 80006dc:	002b      	movs	r3, r5
 80006de:	0022      	movs	r2, r4
 80006e0:	f000 fcb6 	bl	8001050 <__aeabi_dadd>
 80006e4:	bd70      	pop	{r4, r5, r6, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	41f00000 	.word	0x41f00000

080006ec <__udivmoddi4>:
 80006ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ee:	4657      	mov	r7, sl
 80006f0:	464e      	mov	r6, r9
 80006f2:	4645      	mov	r5, r8
 80006f4:	46de      	mov	lr, fp
 80006f6:	b5e0      	push	{r5, r6, r7, lr}
 80006f8:	0004      	movs	r4, r0
 80006fa:	000d      	movs	r5, r1
 80006fc:	4692      	mov	sl, r2
 80006fe:	4699      	mov	r9, r3
 8000700:	b083      	sub	sp, #12
 8000702:	428b      	cmp	r3, r1
 8000704:	d830      	bhi.n	8000768 <__udivmoddi4+0x7c>
 8000706:	d02d      	beq.n	8000764 <__udivmoddi4+0x78>
 8000708:	4649      	mov	r1, r9
 800070a:	4650      	mov	r0, sl
 800070c:	f002 fb74 	bl	8002df8 <__clzdi2>
 8000710:	0029      	movs	r1, r5
 8000712:	0006      	movs	r6, r0
 8000714:	0020      	movs	r0, r4
 8000716:	f002 fb6f 	bl	8002df8 <__clzdi2>
 800071a:	1a33      	subs	r3, r6, r0
 800071c:	4698      	mov	r8, r3
 800071e:	3b20      	subs	r3, #32
 8000720:	469b      	mov	fp, r3
 8000722:	d433      	bmi.n	800078c <__udivmoddi4+0xa0>
 8000724:	465a      	mov	r2, fp
 8000726:	4653      	mov	r3, sl
 8000728:	4093      	lsls	r3, r2
 800072a:	4642      	mov	r2, r8
 800072c:	001f      	movs	r7, r3
 800072e:	4653      	mov	r3, sl
 8000730:	4093      	lsls	r3, r2
 8000732:	001e      	movs	r6, r3
 8000734:	42af      	cmp	r7, r5
 8000736:	d83a      	bhi.n	80007ae <__udivmoddi4+0xc2>
 8000738:	42af      	cmp	r7, r5
 800073a:	d100      	bne.n	800073e <__udivmoddi4+0x52>
 800073c:	e078      	b.n	8000830 <__udivmoddi4+0x144>
 800073e:	465b      	mov	r3, fp
 8000740:	1ba4      	subs	r4, r4, r6
 8000742:	41bd      	sbcs	r5, r7
 8000744:	2b00      	cmp	r3, #0
 8000746:	da00      	bge.n	800074a <__udivmoddi4+0x5e>
 8000748:	e075      	b.n	8000836 <__udivmoddi4+0x14a>
 800074a:	2200      	movs	r2, #0
 800074c:	2300      	movs	r3, #0
 800074e:	9200      	str	r2, [sp, #0]
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	2301      	movs	r3, #1
 8000754:	465a      	mov	r2, fp
 8000756:	4093      	lsls	r3, r2
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	2301      	movs	r3, #1
 800075c:	4642      	mov	r2, r8
 800075e:	4093      	lsls	r3, r2
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	e028      	b.n	80007b6 <__udivmoddi4+0xca>
 8000764:	4282      	cmp	r2, r0
 8000766:	d9cf      	bls.n	8000708 <__udivmoddi4+0x1c>
 8000768:	2200      	movs	r2, #0
 800076a:	2300      	movs	r3, #0
 800076c:	9200      	str	r2, [sp, #0]
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <__udivmoddi4+0x8e>
 8000776:	601c      	str	r4, [r3, #0]
 8000778:	605d      	str	r5, [r3, #4]
 800077a:	9800      	ldr	r0, [sp, #0]
 800077c:	9901      	ldr	r1, [sp, #4]
 800077e:	b003      	add	sp, #12
 8000780:	bcf0      	pop	{r4, r5, r6, r7}
 8000782:	46bb      	mov	fp, r7
 8000784:	46b2      	mov	sl, r6
 8000786:	46a9      	mov	r9, r5
 8000788:	46a0      	mov	r8, r4
 800078a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800078c:	4642      	mov	r2, r8
 800078e:	2320      	movs	r3, #32
 8000790:	1a9b      	subs	r3, r3, r2
 8000792:	4652      	mov	r2, sl
 8000794:	40da      	lsrs	r2, r3
 8000796:	4641      	mov	r1, r8
 8000798:	0013      	movs	r3, r2
 800079a:	464a      	mov	r2, r9
 800079c:	408a      	lsls	r2, r1
 800079e:	0017      	movs	r7, r2
 80007a0:	4642      	mov	r2, r8
 80007a2:	431f      	orrs	r7, r3
 80007a4:	4653      	mov	r3, sl
 80007a6:	4093      	lsls	r3, r2
 80007a8:	001e      	movs	r6, r3
 80007aa:	42af      	cmp	r7, r5
 80007ac:	d9c4      	bls.n	8000738 <__udivmoddi4+0x4c>
 80007ae:	2200      	movs	r2, #0
 80007b0:	2300      	movs	r3, #0
 80007b2:	9200      	str	r2, [sp, #0]
 80007b4:	9301      	str	r3, [sp, #4]
 80007b6:	4643      	mov	r3, r8
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0d9      	beq.n	8000770 <__udivmoddi4+0x84>
 80007bc:	07fb      	lsls	r3, r7, #31
 80007be:	0872      	lsrs	r2, r6, #1
 80007c0:	431a      	orrs	r2, r3
 80007c2:	4646      	mov	r6, r8
 80007c4:	087b      	lsrs	r3, r7, #1
 80007c6:	e00e      	b.n	80007e6 <__udivmoddi4+0xfa>
 80007c8:	42ab      	cmp	r3, r5
 80007ca:	d101      	bne.n	80007d0 <__udivmoddi4+0xe4>
 80007cc:	42a2      	cmp	r2, r4
 80007ce:	d80c      	bhi.n	80007ea <__udivmoddi4+0xfe>
 80007d0:	1aa4      	subs	r4, r4, r2
 80007d2:	419d      	sbcs	r5, r3
 80007d4:	2001      	movs	r0, #1
 80007d6:	1924      	adds	r4, r4, r4
 80007d8:	416d      	adcs	r5, r5
 80007da:	2100      	movs	r1, #0
 80007dc:	3e01      	subs	r6, #1
 80007de:	1824      	adds	r4, r4, r0
 80007e0:	414d      	adcs	r5, r1
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d006      	beq.n	80007f4 <__udivmoddi4+0x108>
 80007e6:	42ab      	cmp	r3, r5
 80007e8:	d9ee      	bls.n	80007c8 <__udivmoddi4+0xdc>
 80007ea:	3e01      	subs	r6, #1
 80007ec:	1924      	adds	r4, r4, r4
 80007ee:	416d      	adcs	r5, r5
 80007f0:	2e00      	cmp	r6, #0
 80007f2:	d1f8      	bne.n	80007e6 <__udivmoddi4+0xfa>
 80007f4:	9800      	ldr	r0, [sp, #0]
 80007f6:	9901      	ldr	r1, [sp, #4]
 80007f8:	465b      	mov	r3, fp
 80007fa:	1900      	adds	r0, r0, r4
 80007fc:	4169      	adcs	r1, r5
 80007fe:	2b00      	cmp	r3, #0
 8000800:	db24      	blt.n	800084c <__udivmoddi4+0x160>
 8000802:	002b      	movs	r3, r5
 8000804:	465a      	mov	r2, fp
 8000806:	4644      	mov	r4, r8
 8000808:	40d3      	lsrs	r3, r2
 800080a:	002a      	movs	r2, r5
 800080c:	40e2      	lsrs	r2, r4
 800080e:	001c      	movs	r4, r3
 8000810:	465b      	mov	r3, fp
 8000812:	0015      	movs	r5, r2
 8000814:	2b00      	cmp	r3, #0
 8000816:	db2a      	blt.n	800086e <__udivmoddi4+0x182>
 8000818:	0026      	movs	r6, r4
 800081a:	409e      	lsls	r6, r3
 800081c:	0033      	movs	r3, r6
 800081e:	0026      	movs	r6, r4
 8000820:	4647      	mov	r7, r8
 8000822:	40be      	lsls	r6, r7
 8000824:	0032      	movs	r2, r6
 8000826:	1a80      	subs	r0, r0, r2
 8000828:	4199      	sbcs	r1, r3
 800082a:	9000      	str	r0, [sp, #0]
 800082c:	9101      	str	r1, [sp, #4]
 800082e:	e79f      	b.n	8000770 <__udivmoddi4+0x84>
 8000830:	42a3      	cmp	r3, r4
 8000832:	d8bc      	bhi.n	80007ae <__udivmoddi4+0xc2>
 8000834:	e783      	b.n	800073e <__udivmoddi4+0x52>
 8000836:	4642      	mov	r2, r8
 8000838:	2320      	movs	r3, #32
 800083a:	2100      	movs	r1, #0
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	2200      	movs	r2, #0
 8000840:	9100      	str	r1, [sp, #0]
 8000842:	9201      	str	r2, [sp, #4]
 8000844:	2201      	movs	r2, #1
 8000846:	40da      	lsrs	r2, r3
 8000848:	9201      	str	r2, [sp, #4]
 800084a:	e786      	b.n	800075a <__udivmoddi4+0x6e>
 800084c:	4642      	mov	r2, r8
 800084e:	2320      	movs	r3, #32
 8000850:	1a9b      	subs	r3, r3, r2
 8000852:	002a      	movs	r2, r5
 8000854:	4646      	mov	r6, r8
 8000856:	409a      	lsls	r2, r3
 8000858:	0023      	movs	r3, r4
 800085a:	40f3      	lsrs	r3, r6
 800085c:	4644      	mov	r4, r8
 800085e:	4313      	orrs	r3, r2
 8000860:	002a      	movs	r2, r5
 8000862:	40e2      	lsrs	r2, r4
 8000864:	001c      	movs	r4, r3
 8000866:	465b      	mov	r3, fp
 8000868:	0015      	movs	r5, r2
 800086a:	2b00      	cmp	r3, #0
 800086c:	dad4      	bge.n	8000818 <__udivmoddi4+0x12c>
 800086e:	4642      	mov	r2, r8
 8000870:	002f      	movs	r7, r5
 8000872:	2320      	movs	r3, #32
 8000874:	0026      	movs	r6, r4
 8000876:	4097      	lsls	r7, r2
 8000878:	1a9b      	subs	r3, r3, r2
 800087a:	40de      	lsrs	r6, r3
 800087c:	003b      	movs	r3, r7
 800087e:	4333      	orrs	r3, r6
 8000880:	e7cd      	b.n	800081e <__udivmoddi4+0x132>
 8000882:	46c0      	nop			; (mov r8, r8)

08000884 <__eqsf2>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	0042      	lsls	r2, r0, #1
 8000888:	0245      	lsls	r5, r0, #9
 800088a:	024e      	lsls	r6, r1, #9
 800088c:	004c      	lsls	r4, r1, #1
 800088e:	0fc3      	lsrs	r3, r0, #31
 8000890:	0a6d      	lsrs	r5, r5, #9
 8000892:	2001      	movs	r0, #1
 8000894:	0e12      	lsrs	r2, r2, #24
 8000896:	0a76      	lsrs	r6, r6, #9
 8000898:	0e24      	lsrs	r4, r4, #24
 800089a:	0fc9      	lsrs	r1, r1, #31
 800089c:	2aff      	cmp	r2, #255	; 0xff
 800089e:	d006      	beq.n	80008ae <__eqsf2+0x2a>
 80008a0:	2cff      	cmp	r4, #255	; 0xff
 80008a2:	d003      	beq.n	80008ac <__eqsf2+0x28>
 80008a4:	42a2      	cmp	r2, r4
 80008a6:	d101      	bne.n	80008ac <__eqsf2+0x28>
 80008a8:	42b5      	cmp	r5, r6
 80008aa:	d006      	beq.n	80008ba <__eqsf2+0x36>
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d1fc      	bne.n	80008ac <__eqsf2+0x28>
 80008b2:	2cff      	cmp	r4, #255	; 0xff
 80008b4:	d1fa      	bne.n	80008ac <__eqsf2+0x28>
 80008b6:	2e00      	cmp	r6, #0
 80008b8:	d1f8      	bne.n	80008ac <__eqsf2+0x28>
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d006      	beq.n	80008cc <__eqsf2+0x48>
 80008be:	2001      	movs	r0, #1
 80008c0:	2a00      	cmp	r2, #0
 80008c2:	d1f3      	bne.n	80008ac <__eqsf2+0x28>
 80008c4:	0028      	movs	r0, r5
 80008c6:	1e43      	subs	r3, r0, #1
 80008c8:	4198      	sbcs	r0, r3
 80008ca:	e7ef      	b.n	80008ac <__eqsf2+0x28>
 80008cc:	2000      	movs	r0, #0
 80008ce:	e7ed      	b.n	80008ac <__eqsf2+0x28>

080008d0 <__gesf2>:
 80008d0:	b570      	push	{r4, r5, r6, lr}
 80008d2:	0042      	lsls	r2, r0, #1
 80008d4:	0245      	lsls	r5, r0, #9
 80008d6:	024e      	lsls	r6, r1, #9
 80008d8:	004c      	lsls	r4, r1, #1
 80008da:	0fc3      	lsrs	r3, r0, #31
 80008dc:	0a6d      	lsrs	r5, r5, #9
 80008de:	0e12      	lsrs	r2, r2, #24
 80008e0:	0a76      	lsrs	r6, r6, #9
 80008e2:	0e24      	lsrs	r4, r4, #24
 80008e4:	0fc8      	lsrs	r0, r1, #31
 80008e6:	2aff      	cmp	r2, #255	; 0xff
 80008e8:	d01b      	beq.n	8000922 <__gesf2+0x52>
 80008ea:	2cff      	cmp	r4, #255	; 0xff
 80008ec:	d00e      	beq.n	800090c <__gesf2+0x3c>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d11b      	bne.n	800092a <__gesf2+0x5a>
 80008f2:	2c00      	cmp	r4, #0
 80008f4:	d101      	bne.n	80008fa <__gesf2+0x2a>
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	d01c      	beq.n	8000934 <__gesf2+0x64>
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d00c      	beq.n	8000918 <__gesf2+0x48>
 80008fe:	4283      	cmp	r3, r0
 8000900:	d01c      	beq.n	800093c <__gesf2+0x6c>
 8000902:	2102      	movs	r1, #2
 8000904:	1e58      	subs	r0, r3, #1
 8000906:	4008      	ands	r0, r1
 8000908:	3801      	subs	r0, #1
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	2e00      	cmp	r6, #0
 800090e:	d122      	bne.n	8000956 <__gesf2+0x86>
 8000910:	2a00      	cmp	r2, #0
 8000912:	d1f4      	bne.n	80008fe <__gesf2+0x2e>
 8000914:	2d00      	cmp	r5, #0
 8000916:	d1f2      	bne.n	80008fe <__gesf2+0x2e>
 8000918:	2800      	cmp	r0, #0
 800091a:	d1f6      	bne.n	800090a <__gesf2+0x3a>
 800091c:	2001      	movs	r0, #1
 800091e:	4240      	negs	r0, r0
 8000920:	e7f3      	b.n	800090a <__gesf2+0x3a>
 8000922:	2d00      	cmp	r5, #0
 8000924:	d117      	bne.n	8000956 <__gesf2+0x86>
 8000926:	2cff      	cmp	r4, #255	; 0xff
 8000928:	d0f0      	beq.n	800090c <__gesf2+0x3c>
 800092a:	2c00      	cmp	r4, #0
 800092c:	d1e7      	bne.n	80008fe <__gesf2+0x2e>
 800092e:	2e00      	cmp	r6, #0
 8000930:	d1e5      	bne.n	80008fe <__gesf2+0x2e>
 8000932:	e7e6      	b.n	8000902 <__gesf2+0x32>
 8000934:	2000      	movs	r0, #0
 8000936:	2d00      	cmp	r5, #0
 8000938:	d0e7      	beq.n	800090a <__gesf2+0x3a>
 800093a:	e7e2      	b.n	8000902 <__gesf2+0x32>
 800093c:	42a2      	cmp	r2, r4
 800093e:	dc05      	bgt.n	800094c <__gesf2+0x7c>
 8000940:	dbea      	blt.n	8000918 <__gesf2+0x48>
 8000942:	42b5      	cmp	r5, r6
 8000944:	d802      	bhi.n	800094c <__gesf2+0x7c>
 8000946:	d3e7      	bcc.n	8000918 <__gesf2+0x48>
 8000948:	2000      	movs	r0, #0
 800094a:	e7de      	b.n	800090a <__gesf2+0x3a>
 800094c:	4243      	negs	r3, r0
 800094e:	4158      	adcs	r0, r3
 8000950:	0040      	lsls	r0, r0, #1
 8000952:	3801      	subs	r0, #1
 8000954:	e7d9      	b.n	800090a <__gesf2+0x3a>
 8000956:	2002      	movs	r0, #2
 8000958:	4240      	negs	r0, r0
 800095a:	e7d6      	b.n	800090a <__gesf2+0x3a>

0800095c <__lesf2>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	0042      	lsls	r2, r0, #1
 8000960:	0245      	lsls	r5, r0, #9
 8000962:	024e      	lsls	r6, r1, #9
 8000964:	004c      	lsls	r4, r1, #1
 8000966:	0fc3      	lsrs	r3, r0, #31
 8000968:	0a6d      	lsrs	r5, r5, #9
 800096a:	0e12      	lsrs	r2, r2, #24
 800096c:	0a76      	lsrs	r6, r6, #9
 800096e:	0e24      	lsrs	r4, r4, #24
 8000970:	0fc8      	lsrs	r0, r1, #31
 8000972:	2aff      	cmp	r2, #255	; 0xff
 8000974:	d00b      	beq.n	800098e <__lesf2+0x32>
 8000976:	2cff      	cmp	r4, #255	; 0xff
 8000978:	d00d      	beq.n	8000996 <__lesf2+0x3a>
 800097a:	2a00      	cmp	r2, #0
 800097c:	d11f      	bne.n	80009be <__lesf2+0x62>
 800097e:	2c00      	cmp	r4, #0
 8000980:	d116      	bne.n	80009b0 <__lesf2+0x54>
 8000982:	2e00      	cmp	r6, #0
 8000984:	d114      	bne.n	80009b0 <__lesf2+0x54>
 8000986:	2000      	movs	r0, #0
 8000988:	2d00      	cmp	r5, #0
 800098a:	d010      	beq.n	80009ae <__lesf2+0x52>
 800098c:	e009      	b.n	80009a2 <__lesf2+0x46>
 800098e:	2d00      	cmp	r5, #0
 8000990:	d10c      	bne.n	80009ac <__lesf2+0x50>
 8000992:	2cff      	cmp	r4, #255	; 0xff
 8000994:	d113      	bne.n	80009be <__lesf2+0x62>
 8000996:	2e00      	cmp	r6, #0
 8000998:	d108      	bne.n	80009ac <__lesf2+0x50>
 800099a:	2a00      	cmp	r2, #0
 800099c:	d008      	beq.n	80009b0 <__lesf2+0x54>
 800099e:	4283      	cmp	r3, r0
 80009a0:	d012      	beq.n	80009c8 <__lesf2+0x6c>
 80009a2:	2102      	movs	r1, #2
 80009a4:	1e58      	subs	r0, r3, #1
 80009a6:	4008      	ands	r0, r1
 80009a8:	3801      	subs	r0, #1
 80009aa:	e000      	b.n	80009ae <__lesf2+0x52>
 80009ac:	2002      	movs	r0, #2
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d1f4      	bne.n	800099e <__lesf2+0x42>
 80009b4:	2800      	cmp	r0, #0
 80009b6:	d1fa      	bne.n	80009ae <__lesf2+0x52>
 80009b8:	2001      	movs	r0, #1
 80009ba:	4240      	negs	r0, r0
 80009bc:	e7f7      	b.n	80009ae <__lesf2+0x52>
 80009be:	2c00      	cmp	r4, #0
 80009c0:	d1ed      	bne.n	800099e <__lesf2+0x42>
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d1eb      	bne.n	800099e <__lesf2+0x42>
 80009c6:	e7ec      	b.n	80009a2 <__lesf2+0x46>
 80009c8:	42a2      	cmp	r2, r4
 80009ca:	dc05      	bgt.n	80009d8 <__lesf2+0x7c>
 80009cc:	dbf2      	blt.n	80009b4 <__lesf2+0x58>
 80009ce:	42b5      	cmp	r5, r6
 80009d0:	d802      	bhi.n	80009d8 <__lesf2+0x7c>
 80009d2:	d3ef      	bcc.n	80009b4 <__lesf2+0x58>
 80009d4:	2000      	movs	r0, #0
 80009d6:	e7ea      	b.n	80009ae <__lesf2+0x52>
 80009d8:	4243      	negs	r3, r0
 80009da:	4158      	adcs	r0, r3
 80009dc:	0040      	lsls	r0, r0, #1
 80009de:	3801      	subs	r0, #1
 80009e0:	e7e5      	b.n	80009ae <__lesf2+0x52>
 80009e2:	46c0      	nop			; (mov r8, r8)

080009e4 <__aeabi_fmul>:
 80009e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009e6:	464f      	mov	r7, r9
 80009e8:	4646      	mov	r6, r8
 80009ea:	46d6      	mov	lr, sl
 80009ec:	0244      	lsls	r4, r0, #9
 80009ee:	0045      	lsls	r5, r0, #1
 80009f0:	b5c0      	push	{r6, r7, lr}
 80009f2:	0a64      	lsrs	r4, r4, #9
 80009f4:	1c0f      	adds	r7, r1, #0
 80009f6:	0e2d      	lsrs	r5, r5, #24
 80009f8:	0fc6      	lsrs	r6, r0, #31
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d100      	bne.n	8000a00 <__aeabi_fmul+0x1c>
 80009fe:	e08d      	b.n	8000b1c <__aeabi_fmul+0x138>
 8000a00:	2dff      	cmp	r5, #255	; 0xff
 8000a02:	d100      	bne.n	8000a06 <__aeabi_fmul+0x22>
 8000a04:	e092      	b.n	8000b2c <__aeabi_fmul+0x148>
 8000a06:	2300      	movs	r3, #0
 8000a08:	2080      	movs	r0, #128	; 0x80
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	469a      	mov	sl, r3
 8000a0e:	00e4      	lsls	r4, r4, #3
 8000a10:	04c0      	lsls	r0, r0, #19
 8000a12:	4304      	orrs	r4, r0
 8000a14:	3d7f      	subs	r5, #127	; 0x7f
 8000a16:	0278      	lsls	r0, r7, #9
 8000a18:	0a43      	lsrs	r3, r0, #9
 8000a1a:	4698      	mov	r8, r3
 8000a1c:	007b      	lsls	r3, r7, #1
 8000a1e:	0e1b      	lsrs	r3, r3, #24
 8000a20:	0fff      	lsrs	r7, r7, #31
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d100      	bne.n	8000a28 <__aeabi_fmul+0x44>
 8000a26:	e070      	b.n	8000b0a <__aeabi_fmul+0x126>
 8000a28:	2bff      	cmp	r3, #255	; 0xff
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_fmul+0x4a>
 8000a2c:	e086      	b.n	8000b3c <__aeabi_fmul+0x158>
 8000a2e:	4642      	mov	r2, r8
 8000a30:	00d0      	lsls	r0, r2, #3
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	3b7f      	subs	r3, #127	; 0x7f
 8000a36:	18ed      	adds	r5, r5, r3
 8000a38:	2300      	movs	r3, #0
 8000a3a:	04d2      	lsls	r2, r2, #19
 8000a3c:	4302      	orrs	r2, r0
 8000a3e:	4690      	mov	r8, r2
 8000a40:	469c      	mov	ip, r3
 8000a42:	0031      	movs	r1, r6
 8000a44:	464b      	mov	r3, r9
 8000a46:	4079      	eors	r1, r7
 8000a48:	1c68      	adds	r0, r5, #1
 8000a4a:	2b0f      	cmp	r3, #15
 8000a4c:	d81c      	bhi.n	8000a88 <__aeabi_fmul+0xa4>
 8000a4e:	4a76      	ldr	r2, [pc, #472]	; (8000c28 <__aeabi_fmul+0x244>)
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	58d3      	ldr	r3, [r2, r3]
 8000a54:	469f      	mov	pc, r3
 8000a56:	0039      	movs	r1, r7
 8000a58:	4644      	mov	r4, r8
 8000a5a:	46e2      	mov	sl, ip
 8000a5c:	4653      	mov	r3, sl
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d00f      	beq.n	8000a82 <__aeabi_fmul+0x9e>
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fmul+0x84>
 8000a66:	e0d7      	b.n	8000c18 <__aeabi_fmul+0x234>
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d137      	bne.n	8000adc <__aeabi_fmul+0xf8>
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	2400      	movs	r4, #0
 8000a70:	05c0      	lsls	r0, r0, #23
 8000a72:	4320      	orrs	r0, r4
 8000a74:	07c9      	lsls	r1, r1, #31
 8000a76:	4308      	orrs	r0, r1
 8000a78:	bce0      	pop	{r5, r6, r7}
 8000a7a:	46ba      	mov	sl, r7
 8000a7c:	46b1      	mov	r9, r6
 8000a7e:	46a8      	mov	r8, r5
 8000a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a82:	20ff      	movs	r0, #255	; 0xff
 8000a84:	2400      	movs	r4, #0
 8000a86:	e7f3      	b.n	8000a70 <__aeabi_fmul+0x8c>
 8000a88:	0c26      	lsrs	r6, r4, #16
 8000a8a:	0424      	lsls	r4, r4, #16
 8000a8c:	0c22      	lsrs	r2, r4, #16
 8000a8e:	4644      	mov	r4, r8
 8000a90:	0424      	lsls	r4, r4, #16
 8000a92:	0c24      	lsrs	r4, r4, #16
 8000a94:	4643      	mov	r3, r8
 8000a96:	0027      	movs	r7, r4
 8000a98:	0c1b      	lsrs	r3, r3, #16
 8000a9a:	4357      	muls	r7, r2
 8000a9c:	4374      	muls	r4, r6
 8000a9e:	435a      	muls	r2, r3
 8000aa0:	435e      	muls	r6, r3
 8000aa2:	1912      	adds	r2, r2, r4
 8000aa4:	0c3b      	lsrs	r3, r7, #16
 8000aa6:	189b      	adds	r3, r3, r2
 8000aa8:	429c      	cmp	r4, r3
 8000aaa:	d903      	bls.n	8000ab4 <__aeabi_fmul+0xd0>
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	0252      	lsls	r2, r2, #9
 8000ab0:	4694      	mov	ip, r2
 8000ab2:	4466      	add	r6, ip
 8000ab4:	043f      	lsls	r7, r7, #16
 8000ab6:	041a      	lsls	r2, r3, #16
 8000ab8:	0c3f      	lsrs	r7, r7, #16
 8000aba:	19d2      	adds	r2, r2, r7
 8000abc:	0194      	lsls	r4, r2, #6
 8000abe:	1e67      	subs	r7, r4, #1
 8000ac0:	41bc      	sbcs	r4, r7
 8000ac2:	0c1b      	lsrs	r3, r3, #16
 8000ac4:	0e92      	lsrs	r2, r2, #26
 8000ac6:	199b      	adds	r3, r3, r6
 8000ac8:	4314      	orrs	r4, r2
 8000aca:	019b      	lsls	r3, r3, #6
 8000acc:	431c      	orrs	r4, r3
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	d400      	bmi.n	8000ad4 <__aeabi_fmul+0xf0>
 8000ad2:	e09b      	b.n	8000c0c <__aeabi_fmul+0x228>
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	0862      	lsrs	r2, r4, #1
 8000ad8:	401c      	ands	r4, r3
 8000ada:	4314      	orrs	r4, r2
 8000adc:	0002      	movs	r2, r0
 8000ade:	327f      	adds	r2, #127	; 0x7f
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	dd64      	ble.n	8000bae <__aeabi_fmul+0x1ca>
 8000ae4:	0763      	lsls	r3, r4, #29
 8000ae6:	d004      	beq.n	8000af2 <__aeabi_fmul+0x10e>
 8000ae8:	230f      	movs	r3, #15
 8000aea:	4023      	ands	r3, r4
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	d000      	beq.n	8000af2 <__aeabi_fmul+0x10e>
 8000af0:	3404      	adds	r4, #4
 8000af2:	0123      	lsls	r3, r4, #4
 8000af4:	d503      	bpl.n	8000afe <__aeabi_fmul+0x11a>
 8000af6:	0002      	movs	r2, r0
 8000af8:	4b4c      	ldr	r3, [pc, #304]	; (8000c2c <__aeabi_fmul+0x248>)
 8000afa:	3280      	adds	r2, #128	; 0x80
 8000afc:	401c      	ands	r4, r3
 8000afe:	2afe      	cmp	r2, #254	; 0xfe
 8000b00:	dcbf      	bgt.n	8000a82 <__aeabi_fmul+0x9e>
 8000b02:	01a4      	lsls	r4, r4, #6
 8000b04:	0a64      	lsrs	r4, r4, #9
 8000b06:	b2d0      	uxtb	r0, r2
 8000b08:	e7b2      	b.n	8000a70 <__aeabi_fmul+0x8c>
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d13d      	bne.n	8000b8c <__aeabi_fmul+0x1a8>
 8000b10:	464a      	mov	r2, r9
 8000b12:	3301      	adds	r3, #1
 8000b14:	431a      	orrs	r2, r3
 8000b16:	4691      	mov	r9, r2
 8000b18:	469c      	mov	ip, r3
 8000b1a:	e792      	b.n	8000a42 <__aeabi_fmul+0x5e>
 8000b1c:	2c00      	cmp	r4, #0
 8000b1e:	d129      	bne.n	8000b74 <__aeabi_fmul+0x190>
 8000b20:	2304      	movs	r3, #4
 8000b22:	4699      	mov	r9, r3
 8000b24:	3b03      	subs	r3, #3
 8000b26:	2500      	movs	r5, #0
 8000b28:	469a      	mov	sl, r3
 8000b2a:	e774      	b.n	8000a16 <__aeabi_fmul+0x32>
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d11b      	bne.n	8000b68 <__aeabi_fmul+0x184>
 8000b30:	2308      	movs	r3, #8
 8000b32:	4699      	mov	r9, r3
 8000b34:	3b06      	subs	r3, #6
 8000b36:	25ff      	movs	r5, #255	; 0xff
 8000b38:	469a      	mov	sl, r3
 8000b3a:	e76c      	b.n	8000a16 <__aeabi_fmul+0x32>
 8000b3c:	4643      	mov	r3, r8
 8000b3e:	35ff      	adds	r5, #255	; 0xff
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d10b      	bne.n	8000b5c <__aeabi_fmul+0x178>
 8000b44:	2302      	movs	r3, #2
 8000b46:	464a      	mov	r2, r9
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	4691      	mov	r9, r2
 8000b4c:	469c      	mov	ip, r3
 8000b4e:	e778      	b.n	8000a42 <__aeabi_fmul+0x5e>
 8000b50:	4653      	mov	r3, sl
 8000b52:	0031      	movs	r1, r6
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d000      	beq.n	8000b5a <__aeabi_fmul+0x176>
 8000b58:	e783      	b.n	8000a62 <__aeabi_fmul+0x7e>
 8000b5a:	e792      	b.n	8000a82 <__aeabi_fmul+0x9e>
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	464a      	mov	r2, r9
 8000b60:	431a      	orrs	r2, r3
 8000b62:	4691      	mov	r9, r2
 8000b64:	469c      	mov	ip, r3
 8000b66:	e76c      	b.n	8000a42 <__aeabi_fmul+0x5e>
 8000b68:	230c      	movs	r3, #12
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b09      	subs	r3, #9
 8000b6e:	25ff      	movs	r5, #255	; 0xff
 8000b70:	469a      	mov	sl, r3
 8000b72:	e750      	b.n	8000a16 <__aeabi_fmul+0x32>
 8000b74:	0020      	movs	r0, r4
 8000b76:	f002 f921 	bl	8002dbc <__clzsi2>
 8000b7a:	2576      	movs	r5, #118	; 0x76
 8000b7c:	1f43      	subs	r3, r0, #5
 8000b7e:	409c      	lsls	r4, r3
 8000b80:	2300      	movs	r3, #0
 8000b82:	426d      	negs	r5, r5
 8000b84:	4699      	mov	r9, r3
 8000b86:	469a      	mov	sl, r3
 8000b88:	1a2d      	subs	r5, r5, r0
 8000b8a:	e744      	b.n	8000a16 <__aeabi_fmul+0x32>
 8000b8c:	4640      	mov	r0, r8
 8000b8e:	f002 f915 	bl	8002dbc <__clzsi2>
 8000b92:	4642      	mov	r2, r8
 8000b94:	1f43      	subs	r3, r0, #5
 8000b96:	409a      	lsls	r2, r3
 8000b98:	2300      	movs	r3, #0
 8000b9a:	1a2d      	subs	r5, r5, r0
 8000b9c:	4690      	mov	r8, r2
 8000b9e:	469c      	mov	ip, r3
 8000ba0:	3d76      	subs	r5, #118	; 0x76
 8000ba2:	e74e      	b.n	8000a42 <__aeabi_fmul+0x5e>
 8000ba4:	2480      	movs	r4, #128	; 0x80
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	20ff      	movs	r0, #255	; 0xff
 8000baa:	03e4      	lsls	r4, r4, #15
 8000bac:	e760      	b.n	8000a70 <__aeabi_fmul+0x8c>
 8000bae:	2301      	movs	r3, #1
 8000bb0:	1a9b      	subs	r3, r3, r2
 8000bb2:	2b1b      	cmp	r3, #27
 8000bb4:	dd00      	ble.n	8000bb8 <__aeabi_fmul+0x1d4>
 8000bb6:	e759      	b.n	8000a6c <__aeabi_fmul+0x88>
 8000bb8:	0022      	movs	r2, r4
 8000bba:	309e      	adds	r0, #158	; 0x9e
 8000bbc:	40da      	lsrs	r2, r3
 8000bbe:	4084      	lsls	r4, r0
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	1e62      	subs	r2, r4, #1
 8000bc4:	4194      	sbcs	r4, r2
 8000bc6:	431c      	orrs	r4, r3
 8000bc8:	0763      	lsls	r3, r4, #29
 8000bca:	d004      	beq.n	8000bd6 <__aeabi_fmul+0x1f2>
 8000bcc:	230f      	movs	r3, #15
 8000bce:	4023      	ands	r3, r4
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d000      	beq.n	8000bd6 <__aeabi_fmul+0x1f2>
 8000bd4:	3404      	adds	r4, #4
 8000bd6:	0163      	lsls	r3, r4, #5
 8000bd8:	d51a      	bpl.n	8000c10 <__aeabi_fmul+0x22c>
 8000bda:	2001      	movs	r0, #1
 8000bdc:	2400      	movs	r4, #0
 8000bde:	e747      	b.n	8000a70 <__aeabi_fmul+0x8c>
 8000be0:	2080      	movs	r0, #128	; 0x80
 8000be2:	03c0      	lsls	r0, r0, #15
 8000be4:	4204      	tst	r4, r0
 8000be6:	d009      	beq.n	8000bfc <__aeabi_fmul+0x218>
 8000be8:	4643      	mov	r3, r8
 8000bea:	4203      	tst	r3, r0
 8000bec:	d106      	bne.n	8000bfc <__aeabi_fmul+0x218>
 8000bee:	4644      	mov	r4, r8
 8000bf0:	4304      	orrs	r4, r0
 8000bf2:	0264      	lsls	r4, r4, #9
 8000bf4:	0039      	movs	r1, r7
 8000bf6:	20ff      	movs	r0, #255	; 0xff
 8000bf8:	0a64      	lsrs	r4, r4, #9
 8000bfa:	e739      	b.n	8000a70 <__aeabi_fmul+0x8c>
 8000bfc:	2080      	movs	r0, #128	; 0x80
 8000bfe:	03c0      	lsls	r0, r0, #15
 8000c00:	4304      	orrs	r4, r0
 8000c02:	0264      	lsls	r4, r4, #9
 8000c04:	0031      	movs	r1, r6
 8000c06:	20ff      	movs	r0, #255	; 0xff
 8000c08:	0a64      	lsrs	r4, r4, #9
 8000c0a:	e731      	b.n	8000a70 <__aeabi_fmul+0x8c>
 8000c0c:	0028      	movs	r0, r5
 8000c0e:	e765      	b.n	8000adc <__aeabi_fmul+0xf8>
 8000c10:	01a4      	lsls	r4, r4, #6
 8000c12:	2000      	movs	r0, #0
 8000c14:	0a64      	lsrs	r4, r4, #9
 8000c16:	e72b      	b.n	8000a70 <__aeabi_fmul+0x8c>
 8000c18:	2080      	movs	r0, #128	; 0x80
 8000c1a:	03c0      	lsls	r0, r0, #15
 8000c1c:	4304      	orrs	r4, r0
 8000c1e:	0264      	lsls	r4, r4, #9
 8000c20:	20ff      	movs	r0, #255	; 0xff
 8000c22:	0a64      	lsrs	r4, r4, #9
 8000c24:	e724      	b.n	8000a70 <__aeabi_fmul+0x8c>
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	08019d24 	.word	0x08019d24
 8000c2c:	f7ffffff 	.word	0xf7ffffff

08000c30 <__aeabi_fsub>:
 8000c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c32:	46ce      	mov	lr, r9
 8000c34:	4647      	mov	r7, r8
 8000c36:	0243      	lsls	r3, r0, #9
 8000c38:	0a5b      	lsrs	r3, r3, #9
 8000c3a:	024e      	lsls	r6, r1, #9
 8000c3c:	00da      	lsls	r2, r3, #3
 8000c3e:	4694      	mov	ip, r2
 8000c40:	0a72      	lsrs	r2, r6, #9
 8000c42:	4691      	mov	r9, r2
 8000c44:	0045      	lsls	r5, r0, #1
 8000c46:	004a      	lsls	r2, r1, #1
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	0e2d      	lsrs	r5, r5, #24
 8000c4c:	001f      	movs	r7, r3
 8000c4e:	0fc4      	lsrs	r4, r0, #31
 8000c50:	0e12      	lsrs	r2, r2, #24
 8000c52:	0fc9      	lsrs	r1, r1, #31
 8000c54:	09b6      	lsrs	r6, r6, #6
 8000c56:	2aff      	cmp	r2, #255	; 0xff
 8000c58:	d05b      	beq.n	8000d12 <__aeabi_fsub+0xe2>
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	4041      	eors	r1, r0
 8000c5e:	428c      	cmp	r4, r1
 8000c60:	d039      	beq.n	8000cd6 <__aeabi_fsub+0xa6>
 8000c62:	1aa8      	subs	r0, r5, r2
 8000c64:	2800      	cmp	r0, #0
 8000c66:	dd5a      	ble.n	8000d1e <__aeabi_fsub+0xee>
 8000c68:	2a00      	cmp	r2, #0
 8000c6a:	d06a      	beq.n	8000d42 <__aeabi_fsub+0x112>
 8000c6c:	2dff      	cmp	r5, #255	; 0xff
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_fsub+0x42>
 8000c70:	e0d9      	b.n	8000e26 <__aeabi_fsub+0x1f6>
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	04d2      	lsls	r2, r2, #19
 8000c76:	4316      	orrs	r6, r2
 8000c78:	281b      	cmp	r0, #27
 8000c7a:	dc00      	bgt.n	8000c7e <__aeabi_fsub+0x4e>
 8000c7c:	e0e9      	b.n	8000e52 <__aeabi_fsub+0x222>
 8000c7e:	2001      	movs	r0, #1
 8000c80:	4663      	mov	r3, ip
 8000c82:	1a18      	subs	r0, r3, r0
 8000c84:	0143      	lsls	r3, r0, #5
 8000c86:	d400      	bmi.n	8000c8a <__aeabi_fsub+0x5a>
 8000c88:	e0b4      	b.n	8000df4 <__aeabi_fsub+0x1c4>
 8000c8a:	0180      	lsls	r0, r0, #6
 8000c8c:	0987      	lsrs	r7, r0, #6
 8000c8e:	0038      	movs	r0, r7
 8000c90:	f002 f894 	bl	8002dbc <__clzsi2>
 8000c94:	3805      	subs	r0, #5
 8000c96:	4087      	lsls	r7, r0
 8000c98:	4285      	cmp	r5, r0
 8000c9a:	dc00      	bgt.n	8000c9e <__aeabi_fsub+0x6e>
 8000c9c:	e0cc      	b.n	8000e38 <__aeabi_fsub+0x208>
 8000c9e:	1a2d      	subs	r5, r5, r0
 8000ca0:	48b5      	ldr	r0, [pc, #724]	; (8000f78 <__aeabi_fsub+0x348>)
 8000ca2:	4038      	ands	r0, r7
 8000ca4:	0743      	lsls	r3, r0, #29
 8000ca6:	d004      	beq.n	8000cb2 <__aeabi_fsub+0x82>
 8000ca8:	230f      	movs	r3, #15
 8000caa:	4003      	ands	r3, r0
 8000cac:	2b04      	cmp	r3, #4
 8000cae:	d000      	beq.n	8000cb2 <__aeabi_fsub+0x82>
 8000cb0:	3004      	adds	r0, #4
 8000cb2:	0143      	lsls	r3, r0, #5
 8000cb4:	d400      	bmi.n	8000cb8 <__aeabi_fsub+0x88>
 8000cb6:	e0a0      	b.n	8000dfa <__aeabi_fsub+0x1ca>
 8000cb8:	1c6a      	adds	r2, r5, #1
 8000cba:	2dfe      	cmp	r5, #254	; 0xfe
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_fsub+0x90>
 8000cbe:	e08d      	b.n	8000ddc <__aeabi_fsub+0x1ac>
 8000cc0:	0180      	lsls	r0, r0, #6
 8000cc2:	0a47      	lsrs	r7, r0, #9
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	05d0      	lsls	r0, r2, #23
 8000cc8:	4338      	orrs	r0, r7
 8000cca:	07e4      	lsls	r4, r4, #31
 8000ccc:	4320      	orrs	r0, r4
 8000cce:	bcc0      	pop	{r6, r7}
 8000cd0:	46b9      	mov	r9, r7
 8000cd2:	46b0      	mov	r8, r6
 8000cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cd6:	1aa8      	subs	r0, r5, r2
 8000cd8:	4680      	mov	r8, r0
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	dd45      	ble.n	8000d6a <__aeabi_fsub+0x13a>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	d070      	beq.n	8000dc4 <__aeabi_fsub+0x194>
 8000ce2:	2dff      	cmp	r5, #255	; 0xff
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_fsub+0xb8>
 8000ce6:	e09e      	b.n	8000e26 <__aeabi_fsub+0x1f6>
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	04db      	lsls	r3, r3, #19
 8000cec:	431e      	orrs	r6, r3
 8000cee:	4643      	mov	r3, r8
 8000cf0:	2b1b      	cmp	r3, #27
 8000cf2:	dc00      	bgt.n	8000cf6 <__aeabi_fsub+0xc6>
 8000cf4:	e0d2      	b.n	8000e9c <__aeabi_fsub+0x26c>
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4460      	add	r0, ip
 8000cfa:	0143      	lsls	r3, r0, #5
 8000cfc:	d57a      	bpl.n	8000df4 <__aeabi_fsub+0x1c4>
 8000cfe:	3501      	adds	r5, #1
 8000d00:	2dff      	cmp	r5, #255	; 0xff
 8000d02:	d06b      	beq.n	8000ddc <__aeabi_fsub+0x1ac>
 8000d04:	2301      	movs	r3, #1
 8000d06:	4a9d      	ldr	r2, [pc, #628]	; (8000f7c <__aeabi_fsub+0x34c>)
 8000d08:	4003      	ands	r3, r0
 8000d0a:	0840      	lsrs	r0, r0, #1
 8000d0c:	4010      	ands	r0, r2
 8000d0e:	4318      	orrs	r0, r3
 8000d10:	e7c8      	b.n	8000ca4 <__aeabi_fsub+0x74>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d020      	beq.n	8000d58 <__aeabi_fsub+0x128>
 8000d16:	428c      	cmp	r4, r1
 8000d18:	d023      	beq.n	8000d62 <__aeabi_fsub+0x132>
 8000d1a:	0028      	movs	r0, r5
 8000d1c:	38ff      	subs	r0, #255	; 0xff
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	d039      	beq.n	8000d96 <__aeabi_fsub+0x166>
 8000d22:	1b57      	subs	r7, r2, r5
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d000      	beq.n	8000d2a <__aeabi_fsub+0xfa>
 8000d28:	e09d      	b.n	8000e66 <__aeabi_fsub+0x236>
 8000d2a:	4663      	mov	r3, ip
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_fsub+0x102>
 8000d30:	e0db      	b.n	8000eea <__aeabi_fsub+0x2ba>
 8000d32:	1e7b      	subs	r3, r7, #1
 8000d34:	2f01      	cmp	r7, #1
 8000d36:	d100      	bne.n	8000d3a <__aeabi_fsub+0x10a>
 8000d38:	e10d      	b.n	8000f56 <__aeabi_fsub+0x326>
 8000d3a:	2fff      	cmp	r7, #255	; 0xff
 8000d3c:	d071      	beq.n	8000e22 <__aeabi_fsub+0x1f2>
 8000d3e:	001f      	movs	r7, r3
 8000d40:	e098      	b.n	8000e74 <__aeabi_fsub+0x244>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d100      	bne.n	8000d48 <__aeabi_fsub+0x118>
 8000d46:	e0a7      	b.n	8000e98 <__aeabi_fsub+0x268>
 8000d48:	1e42      	subs	r2, r0, #1
 8000d4a:	2801      	cmp	r0, #1
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_fsub+0x120>
 8000d4e:	e0e6      	b.n	8000f1e <__aeabi_fsub+0x2ee>
 8000d50:	28ff      	cmp	r0, #255	; 0xff
 8000d52:	d068      	beq.n	8000e26 <__aeabi_fsub+0x1f6>
 8000d54:	0010      	movs	r0, r2
 8000d56:	e78f      	b.n	8000c78 <__aeabi_fsub+0x48>
 8000d58:	2001      	movs	r0, #1
 8000d5a:	4041      	eors	r1, r0
 8000d5c:	42a1      	cmp	r1, r4
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_fsub+0x132>
 8000d60:	e77f      	b.n	8000c62 <__aeabi_fsub+0x32>
 8000d62:	20ff      	movs	r0, #255	; 0xff
 8000d64:	4240      	negs	r0, r0
 8000d66:	4680      	mov	r8, r0
 8000d68:	44a8      	add	r8, r5
 8000d6a:	4640      	mov	r0, r8
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	d038      	beq.n	8000de2 <__aeabi_fsub+0x1b2>
 8000d70:	1b51      	subs	r1, r2, r5
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fsub+0x148>
 8000d76:	e0ae      	b.n	8000ed6 <__aeabi_fsub+0x2a6>
 8000d78:	2aff      	cmp	r2, #255	; 0xff
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_fsub+0x14e>
 8000d7c:	e0df      	b.n	8000f3e <__aeabi_fsub+0x30e>
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	4660      	mov	r0, ip
 8000d82:	04db      	lsls	r3, r3, #19
 8000d84:	4318      	orrs	r0, r3
 8000d86:	4684      	mov	ip, r0
 8000d88:	291b      	cmp	r1, #27
 8000d8a:	dc00      	bgt.n	8000d8e <__aeabi_fsub+0x15e>
 8000d8c:	e0d9      	b.n	8000f42 <__aeabi_fsub+0x312>
 8000d8e:	2001      	movs	r0, #1
 8000d90:	0015      	movs	r5, r2
 8000d92:	1980      	adds	r0, r0, r6
 8000d94:	e7b1      	b.n	8000cfa <__aeabi_fsub+0xca>
 8000d96:	20fe      	movs	r0, #254	; 0xfe
 8000d98:	1c6a      	adds	r2, r5, #1
 8000d9a:	4210      	tst	r0, r2
 8000d9c:	d171      	bne.n	8000e82 <__aeabi_fsub+0x252>
 8000d9e:	2d00      	cmp	r5, #0
 8000da0:	d000      	beq.n	8000da4 <__aeabi_fsub+0x174>
 8000da2:	e0a6      	b.n	8000ef2 <__aeabi_fsub+0x2c2>
 8000da4:	4663      	mov	r3, ip
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d100      	bne.n	8000dac <__aeabi_fsub+0x17c>
 8000daa:	e0d9      	b.n	8000f60 <__aeabi_fsub+0x330>
 8000dac:	2200      	movs	r2, #0
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d100      	bne.n	8000db4 <__aeabi_fsub+0x184>
 8000db2:	e788      	b.n	8000cc6 <__aeabi_fsub+0x96>
 8000db4:	1b98      	subs	r0, r3, r6
 8000db6:	0143      	lsls	r3, r0, #5
 8000db8:	d400      	bmi.n	8000dbc <__aeabi_fsub+0x18c>
 8000dba:	e0e1      	b.n	8000f80 <__aeabi_fsub+0x350>
 8000dbc:	4663      	mov	r3, ip
 8000dbe:	000c      	movs	r4, r1
 8000dc0:	1af0      	subs	r0, r6, r3
 8000dc2:	e76f      	b.n	8000ca4 <__aeabi_fsub+0x74>
 8000dc4:	2e00      	cmp	r6, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_fsub+0x19a>
 8000dc8:	e0b7      	b.n	8000f3a <__aeabi_fsub+0x30a>
 8000dca:	0002      	movs	r2, r0
 8000dcc:	3a01      	subs	r2, #1
 8000dce:	2801      	cmp	r0, #1
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x1a4>
 8000dd2:	e09c      	b.n	8000f0e <__aeabi_fsub+0x2de>
 8000dd4:	28ff      	cmp	r0, #255	; 0xff
 8000dd6:	d026      	beq.n	8000e26 <__aeabi_fsub+0x1f6>
 8000dd8:	4690      	mov	r8, r2
 8000dda:	e788      	b.n	8000cee <__aeabi_fsub+0xbe>
 8000ddc:	22ff      	movs	r2, #255	; 0xff
 8000dde:	2700      	movs	r7, #0
 8000de0:	e771      	b.n	8000cc6 <__aeabi_fsub+0x96>
 8000de2:	20fe      	movs	r0, #254	; 0xfe
 8000de4:	1c6a      	adds	r2, r5, #1
 8000de6:	4210      	tst	r0, r2
 8000de8:	d064      	beq.n	8000eb4 <__aeabi_fsub+0x284>
 8000dea:	2aff      	cmp	r2, #255	; 0xff
 8000dec:	d0f6      	beq.n	8000ddc <__aeabi_fsub+0x1ac>
 8000dee:	0015      	movs	r5, r2
 8000df0:	4466      	add	r6, ip
 8000df2:	0870      	lsrs	r0, r6, #1
 8000df4:	0743      	lsls	r3, r0, #29
 8000df6:	d000      	beq.n	8000dfa <__aeabi_fsub+0x1ca>
 8000df8:	e756      	b.n	8000ca8 <__aeabi_fsub+0x78>
 8000dfa:	08c3      	lsrs	r3, r0, #3
 8000dfc:	2dff      	cmp	r5, #255	; 0xff
 8000dfe:	d012      	beq.n	8000e26 <__aeabi_fsub+0x1f6>
 8000e00:	025b      	lsls	r3, r3, #9
 8000e02:	0a5f      	lsrs	r7, r3, #9
 8000e04:	b2ea      	uxtb	r2, r5
 8000e06:	e75e      	b.n	8000cc6 <__aeabi_fsub+0x96>
 8000e08:	4662      	mov	r2, ip
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_fsub+0x1e0>
 8000e0e:	e096      	b.n	8000f3e <__aeabi_fsub+0x30e>
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	d008      	beq.n	8000e26 <__aeabi_fsub+0x1f6>
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	03d2      	lsls	r2, r2, #15
 8000e18:	4213      	tst	r3, r2
 8000e1a:	d004      	beq.n	8000e26 <__aeabi_fsub+0x1f6>
 8000e1c:	4648      	mov	r0, r9
 8000e1e:	4210      	tst	r0, r2
 8000e20:	d101      	bne.n	8000e26 <__aeabi_fsub+0x1f6>
 8000e22:	000c      	movs	r4, r1
 8000e24:	464b      	mov	r3, r9
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0d8      	beq.n	8000ddc <__aeabi_fsub+0x1ac>
 8000e2a:	2780      	movs	r7, #128	; 0x80
 8000e2c:	03ff      	lsls	r7, r7, #15
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	027f      	lsls	r7, r7, #9
 8000e32:	22ff      	movs	r2, #255	; 0xff
 8000e34:	0a7f      	lsrs	r7, r7, #9
 8000e36:	e746      	b.n	8000cc6 <__aeabi_fsub+0x96>
 8000e38:	2320      	movs	r3, #32
 8000e3a:	003a      	movs	r2, r7
 8000e3c:	1b45      	subs	r5, r0, r5
 8000e3e:	0038      	movs	r0, r7
 8000e40:	3501      	adds	r5, #1
 8000e42:	40ea      	lsrs	r2, r5
 8000e44:	1b5d      	subs	r5, r3, r5
 8000e46:	40a8      	lsls	r0, r5
 8000e48:	1e43      	subs	r3, r0, #1
 8000e4a:	4198      	sbcs	r0, r3
 8000e4c:	2500      	movs	r5, #0
 8000e4e:	4310      	orrs	r0, r2
 8000e50:	e728      	b.n	8000ca4 <__aeabi_fsub+0x74>
 8000e52:	2320      	movs	r3, #32
 8000e54:	1a1b      	subs	r3, r3, r0
 8000e56:	0032      	movs	r2, r6
 8000e58:	409e      	lsls	r6, r3
 8000e5a:	40c2      	lsrs	r2, r0
 8000e5c:	0030      	movs	r0, r6
 8000e5e:	1e43      	subs	r3, r0, #1
 8000e60:	4198      	sbcs	r0, r3
 8000e62:	4310      	orrs	r0, r2
 8000e64:	e70c      	b.n	8000c80 <__aeabi_fsub+0x50>
 8000e66:	2aff      	cmp	r2, #255	; 0xff
 8000e68:	d0db      	beq.n	8000e22 <__aeabi_fsub+0x1f2>
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	4660      	mov	r0, ip
 8000e6e:	04db      	lsls	r3, r3, #19
 8000e70:	4318      	orrs	r0, r3
 8000e72:	4684      	mov	ip, r0
 8000e74:	2f1b      	cmp	r7, #27
 8000e76:	dd56      	ble.n	8000f26 <__aeabi_fsub+0x2f6>
 8000e78:	2001      	movs	r0, #1
 8000e7a:	000c      	movs	r4, r1
 8000e7c:	0015      	movs	r5, r2
 8000e7e:	1a30      	subs	r0, r6, r0
 8000e80:	e700      	b.n	8000c84 <__aeabi_fsub+0x54>
 8000e82:	4663      	mov	r3, ip
 8000e84:	1b9f      	subs	r7, r3, r6
 8000e86:	017b      	lsls	r3, r7, #5
 8000e88:	d43d      	bmi.n	8000f06 <__aeabi_fsub+0x2d6>
 8000e8a:	2f00      	cmp	r7, #0
 8000e8c:	d000      	beq.n	8000e90 <__aeabi_fsub+0x260>
 8000e8e:	e6fe      	b.n	8000c8e <__aeabi_fsub+0x5e>
 8000e90:	2400      	movs	r4, #0
 8000e92:	2200      	movs	r2, #0
 8000e94:	2700      	movs	r7, #0
 8000e96:	e716      	b.n	8000cc6 <__aeabi_fsub+0x96>
 8000e98:	0005      	movs	r5, r0
 8000e9a:	e7af      	b.n	8000dfc <__aeabi_fsub+0x1cc>
 8000e9c:	0032      	movs	r2, r6
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	4641      	mov	r1, r8
 8000ea2:	40da      	lsrs	r2, r3
 8000ea4:	2320      	movs	r3, #32
 8000ea6:	1a5b      	subs	r3, r3, r1
 8000ea8:	409e      	lsls	r6, r3
 8000eaa:	0030      	movs	r0, r6
 8000eac:	1e43      	subs	r3, r0, #1
 8000eae:	4198      	sbcs	r0, r3
 8000eb0:	4310      	orrs	r0, r2
 8000eb2:	e721      	b.n	8000cf8 <__aeabi_fsub+0xc8>
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d1a7      	bne.n	8000e08 <__aeabi_fsub+0x1d8>
 8000eb8:	4663      	mov	r3, ip
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d059      	beq.n	8000f72 <__aeabi_fsub+0x342>
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2e00      	cmp	r6, #0
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_fsub+0x296>
 8000ec4:	e6ff      	b.n	8000cc6 <__aeabi_fsub+0x96>
 8000ec6:	0030      	movs	r0, r6
 8000ec8:	4460      	add	r0, ip
 8000eca:	0143      	lsls	r3, r0, #5
 8000ecc:	d592      	bpl.n	8000df4 <__aeabi_fsub+0x1c4>
 8000ece:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <__aeabi_fsub+0x348>)
 8000ed0:	3501      	adds	r5, #1
 8000ed2:	4018      	ands	r0, r3
 8000ed4:	e78e      	b.n	8000df4 <__aeabi_fsub+0x1c4>
 8000ed6:	4663      	mov	r3, ip
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d047      	beq.n	8000f6c <__aeabi_fsub+0x33c>
 8000edc:	1e4b      	subs	r3, r1, #1
 8000ede:	2901      	cmp	r1, #1
 8000ee0:	d015      	beq.n	8000f0e <__aeabi_fsub+0x2de>
 8000ee2:	29ff      	cmp	r1, #255	; 0xff
 8000ee4:	d02b      	beq.n	8000f3e <__aeabi_fsub+0x30e>
 8000ee6:	0019      	movs	r1, r3
 8000ee8:	e74e      	b.n	8000d88 <__aeabi_fsub+0x158>
 8000eea:	000c      	movs	r4, r1
 8000eec:	464b      	mov	r3, r9
 8000eee:	003d      	movs	r5, r7
 8000ef0:	e784      	b.n	8000dfc <__aeabi_fsub+0x1cc>
 8000ef2:	4662      	mov	r2, ip
 8000ef4:	2a00      	cmp	r2, #0
 8000ef6:	d18b      	bne.n	8000e10 <__aeabi_fsub+0x1e0>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d192      	bne.n	8000e22 <__aeabi_fsub+0x1f2>
 8000efc:	2780      	movs	r7, #128	; 0x80
 8000efe:	2400      	movs	r4, #0
 8000f00:	22ff      	movs	r2, #255	; 0xff
 8000f02:	03ff      	lsls	r7, r7, #15
 8000f04:	e6df      	b.n	8000cc6 <__aeabi_fsub+0x96>
 8000f06:	4663      	mov	r3, ip
 8000f08:	000c      	movs	r4, r1
 8000f0a:	1af7      	subs	r7, r6, r3
 8000f0c:	e6bf      	b.n	8000c8e <__aeabi_fsub+0x5e>
 8000f0e:	0030      	movs	r0, r6
 8000f10:	4460      	add	r0, ip
 8000f12:	2501      	movs	r5, #1
 8000f14:	0143      	lsls	r3, r0, #5
 8000f16:	d400      	bmi.n	8000f1a <__aeabi_fsub+0x2ea>
 8000f18:	e76c      	b.n	8000df4 <__aeabi_fsub+0x1c4>
 8000f1a:	2502      	movs	r5, #2
 8000f1c:	e6f2      	b.n	8000d04 <__aeabi_fsub+0xd4>
 8000f1e:	4663      	mov	r3, ip
 8000f20:	2501      	movs	r5, #1
 8000f22:	1b98      	subs	r0, r3, r6
 8000f24:	e6ae      	b.n	8000c84 <__aeabi_fsub+0x54>
 8000f26:	2320      	movs	r3, #32
 8000f28:	4664      	mov	r4, ip
 8000f2a:	4660      	mov	r0, ip
 8000f2c:	40fc      	lsrs	r4, r7
 8000f2e:	1bdf      	subs	r7, r3, r7
 8000f30:	40b8      	lsls	r0, r7
 8000f32:	1e43      	subs	r3, r0, #1
 8000f34:	4198      	sbcs	r0, r3
 8000f36:	4320      	orrs	r0, r4
 8000f38:	e79f      	b.n	8000e7a <__aeabi_fsub+0x24a>
 8000f3a:	0005      	movs	r5, r0
 8000f3c:	e75e      	b.n	8000dfc <__aeabi_fsub+0x1cc>
 8000f3e:	464b      	mov	r3, r9
 8000f40:	e771      	b.n	8000e26 <__aeabi_fsub+0x1f6>
 8000f42:	2320      	movs	r3, #32
 8000f44:	4665      	mov	r5, ip
 8000f46:	4660      	mov	r0, ip
 8000f48:	40cd      	lsrs	r5, r1
 8000f4a:	1a59      	subs	r1, r3, r1
 8000f4c:	4088      	lsls	r0, r1
 8000f4e:	1e43      	subs	r3, r0, #1
 8000f50:	4198      	sbcs	r0, r3
 8000f52:	4328      	orrs	r0, r5
 8000f54:	e71c      	b.n	8000d90 <__aeabi_fsub+0x160>
 8000f56:	4663      	mov	r3, ip
 8000f58:	000c      	movs	r4, r1
 8000f5a:	2501      	movs	r5, #1
 8000f5c:	1af0      	subs	r0, r6, r3
 8000f5e:	e691      	b.n	8000c84 <__aeabi_fsub+0x54>
 8000f60:	2e00      	cmp	r6, #0
 8000f62:	d095      	beq.n	8000e90 <__aeabi_fsub+0x260>
 8000f64:	000c      	movs	r4, r1
 8000f66:	464f      	mov	r7, r9
 8000f68:	2200      	movs	r2, #0
 8000f6a:	e6ac      	b.n	8000cc6 <__aeabi_fsub+0x96>
 8000f6c:	464b      	mov	r3, r9
 8000f6e:	000d      	movs	r5, r1
 8000f70:	e744      	b.n	8000dfc <__aeabi_fsub+0x1cc>
 8000f72:	464f      	mov	r7, r9
 8000f74:	2200      	movs	r2, #0
 8000f76:	e6a6      	b.n	8000cc6 <__aeabi_fsub+0x96>
 8000f78:	fbffffff 	.word	0xfbffffff
 8000f7c:	7dffffff 	.word	0x7dffffff
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d000      	beq.n	8000f86 <__aeabi_fsub+0x356>
 8000f84:	e736      	b.n	8000df4 <__aeabi_fsub+0x1c4>
 8000f86:	2400      	movs	r4, #0
 8000f88:	2700      	movs	r7, #0
 8000f8a:	e69c      	b.n	8000cc6 <__aeabi_fsub+0x96>

08000f8c <__aeabi_f2iz>:
 8000f8c:	0241      	lsls	r1, r0, #9
 8000f8e:	0042      	lsls	r2, r0, #1
 8000f90:	0fc3      	lsrs	r3, r0, #31
 8000f92:	0a49      	lsrs	r1, r1, #9
 8000f94:	2000      	movs	r0, #0
 8000f96:	0e12      	lsrs	r2, r2, #24
 8000f98:	2a7e      	cmp	r2, #126	; 0x7e
 8000f9a:	dd03      	ble.n	8000fa4 <__aeabi_f2iz+0x18>
 8000f9c:	2a9d      	cmp	r2, #157	; 0x9d
 8000f9e:	dd02      	ble.n	8000fa6 <__aeabi_f2iz+0x1a>
 8000fa0:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <__aeabi_f2iz+0x3c>)
 8000fa2:	1898      	adds	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	2080      	movs	r0, #128	; 0x80
 8000fa8:	0400      	lsls	r0, r0, #16
 8000faa:	4301      	orrs	r1, r0
 8000fac:	2a95      	cmp	r2, #149	; 0x95
 8000fae:	dc07      	bgt.n	8000fc0 <__aeabi_f2iz+0x34>
 8000fb0:	2096      	movs	r0, #150	; 0x96
 8000fb2:	1a82      	subs	r2, r0, r2
 8000fb4:	40d1      	lsrs	r1, r2
 8000fb6:	4248      	negs	r0, r1
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1f3      	bne.n	8000fa4 <__aeabi_f2iz+0x18>
 8000fbc:	0008      	movs	r0, r1
 8000fbe:	e7f1      	b.n	8000fa4 <__aeabi_f2iz+0x18>
 8000fc0:	3a96      	subs	r2, #150	; 0x96
 8000fc2:	4091      	lsls	r1, r2
 8000fc4:	e7f7      	b.n	8000fb6 <__aeabi_f2iz+0x2a>
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	7fffffff 	.word	0x7fffffff

08000fcc <__aeabi_ui2f>:
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	1e05      	subs	r5, r0, #0
 8000fd0:	d00e      	beq.n	8000ff0 <__aeabi_ui2f+0x24>
 8000fd2:	f001 fef3 	bl	8002dbc <__clzsi2>
 8000fd6:	239e      	movs	r3, #158	; 0x9e
 8000fd8:	0004      	movs	r4, r0
 8000fda:	1a1b      	subs	r3, r3, r0
 8000fdc:	2b96      	cmp	r3, #150	; 0x96
 8000fde:	dc0c      	bgt.n	8000ffa <__aeabi_ui2f+0x2e>
 8000fe0:	2808      	cmp	r0, #8
 8000fe2:	dd01      	ble.n	8000fe8 <__aeabi_ui2f+0x1c>
 8000fe4:	3c08      	subs	r4, #8
 8000fe6:	40a5      	lsls	r5, r4
 8000fe8:	026d      	lsls	r5, r5, #9
 8000fea:	0a6d      	lsrs	r5, r5, #9
 8000fec:	b2d8      	uxtb	r0, r3
 8000fee:	e001      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	2500      	movs	r5, #0
 8000ff4:	05c0      	lsls	r0, r0, #23
 8000ff6:	4328      	orrs	r0, r5
 8000ff8:	bd70      	pop	{r4, r5, r6, pc}
 8000ffa:	2b99      	cmp	r3, #153	; 0x99
 8000ffc:	dd09      	ble.n	8001012 <__aeabi_ui2f+0x46>
 8000ffe:	0002      	movs	r2, r0
 8001000:	0029      	movs	r1, r5
 8001002:	321b      	adds	r2, #27
 8001004:	4091      	lsls	r1, r2
 8001006:	1e4a      	subs	r2, r1, #1
 8001008:	4191      	sbcs	r1, r2
 800100a:	2205      	movs	r2, #5
 800100c:	1a12      	subs	r2, r2, r0
 800100e:	40d5      	lsrs	r5, r2
 8001010:	430d      	orrs	r5, r1
 8001012:	2c05      	cmp	r4, #5
 8001014:	dc12      	bgt.n	800103c <__aeabi_ui2f+0x70>
 8001016:	0029      	movs	r1, r5
 8001018:	4e0c      	ldr	r6, [pc, #48]	; (800104c <__aeabi_ui2f+0x80>)
 800101a:	4031      	ands	r1, r6
 800101c:	076a      	lsls	r2, r5, #29
 800101e:	d009      	beq.n	8001034 <__aeabi_ui2f+0x68>
 8001020:	200f      	movs	r0, #15
 8001022:	4028      	ands	r0, r5
 8001024:	2804      	cmp	r0, #4
 8001026:	d005      	beq.n	8001034 <__aeabi_ui2f+0x68>
 8001028:	3104      	adds	r1, #4
 800102a:	014a      	lsls	r2, r1, #5
 800102c:	d502      	bpl.n	8001034 <__aeabi_ui2f+0x68>
 800102e:	239f      	movs	r3, #159	; 0x9f
 8001030:	4031      	ands	r1, r6
 8001032:	1b1b      	subs	r3, r3, r4
 8001034:	0189      	lsls	r1, r1, #6
 8001036:	0a4d      	lsrs	r5, r1, #9
 8001038:	b2d8      	uxtb	r0, r3
 800103a:	e7db      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 800103c:	1f62      	subs	r2, r4, #5
 800103e:	4095      	lsls	r5, r2
 8001040:	0029      	movs	r1, r5
 8001042:	4e02      	ldr	r6, [pc, #8]	; (800104c <__aeabi_ui2f+0x80>)
 8001044:	4031      	ands	r1, r6
 8001046:	076a      	lsls	r2, r5, #29
 8001048:	d0f4      	beq.n	8001034 <__aeabi_ui2f+0x68>
 800104a:	e7e9      	b.n	8001020 <__aeabi_ui2f+0x54>
 800104c:	fbffffff 	.word	0xfbffffff

08001050 <__aeabi_dadd>:
 8001050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001052:	464f      	mov	r7, r9
 8001054:	4646      	mov	r6, r8
 8001056:	46d6      	mov	lr, sl
 8001058:	000d      	movs	r5, r1
 800105a:	0004      	movs	r4, r0
 800105c:	b5c0      	push	{r6, r7, lr}
 800105e:	001f      	movs	r7, r3
 8001060:	0011      	movs	r1, r2
 8001062:	0328      	lsls	r0, r5, #12
 8001064:	0f62      	lsrs	r2, r4, #29
 8001066:	0a40      	lsrs	r0, r0, #9
 8001068:	4310      	orrs	r0, r2
 800106a:	007a      	lsls	r2, r7, #1
 800106c:	0d52      	lsrs	r2, r2, #21
 800106e:	00e3      	lsls	r3, r4, #3
 8001070:	033c      	lsls	r4, r7, #12
 8001072:	4691      	mov	r9, r2
 8001074:	0a64      	lsrs	r4, r4, #9
 8001076:	0ffa      	lsrs	r2, r7, #31
 8001078:	0f4f      	lsrs	r7, r1, #29
 800107a:	006e      	lsls	r6, r5, #1
 800107c:	4327      	orrs	r7, r4
 800107e:	4692      	mov	sl, r2
 8001080:	46b8      	mov	r8, r7
 8001082:	0d76      	lsrs	r6, r6, #21
 8001084:	0fed      	lsrs	r5, r5, #31
 8001086:	00c9      	lsls	r1, r1, #3
 8001088:	4295      	cmp	r5, r2
 800108a:	d100      	bne.n	800108e <__aeabi_dadd+0x3e>
 800108c:	e099      	b.n	80011c2 <__aeabi_dadd+0x172>
 800108e:	464c      	mov	r4, r9
 8001090:	1b34      	subs	r4, r6, r4
 8001092:	46a4      	mov	ip, r4
 8001094:	2c00      	cmp	r4, #0
 8001096:	dc00      	bgt.n	800109a <__aeabi_dadd+0x4a>
 8001098:	e07c      	b.n	8001194 <__aeabi_dadd+0x144>
 800109a:	464a      	mov	r2, r9
 800109c:	2a00      	cmp	r2, #0
 800109e:	d100      	bne.n	80010a2 <__aeabi_dadd+0x52>
 80010a0:	e0b8      	b.n	8001214 <__aeabi_dadd+0x1c4>
 80010a2:	4ac5      	ldr	r2, [pc, #788]	; (80013b8 <__aeabi_dadd+0x368>)
 80010a4:	4296      	cmp	r6, r2
 80010a6:	d100      	bne.n	80010aa <__aeabi_dadd+0x5a>
 80010a8:	e11c      	b.n	80012e4 <__aeabi_dadd+0x294>
 80010aa:	2280      	movs	r2, #128	; 0x80
 80010ac:	003c      	movs	r4, r7
 80010ae:	0412      	lsls	r2, r2, #16
 80010b0:	4314      	orrs	r4, r2
 80010b2:	46a0      	mov	r8, r4
 80010b4:	4662      	mov	r2, ip
 80010b6:	2a38      	cmp	r2, #56	; 0x38
 80010b8:	dd00      	ble.n	80010bc <__aeabi_dadd+0x6c>
 80010ba:	e161      	b.n	8001380 <__aeabi_dadd+0x330>
 80010bc:	2a1f      	cmp	r2, #31
 80010be:	dd00      	ble.n	80010c2 <__aeabi_dadd+0x72>
 80010c0:	e1cc      	b.n	800145c <__aeabi_dadd+0x40c>
 80010c2:	4664      	mov	r4, ip
 80010c4:	2220      	movs	r2, #32
 80010c6:	1b12      	subs	r2, r2, r4
 80010c8:	4644      	mov	r4, r8
 80010ca:	4094      	lsls	r4, r2
 80010cc:	000f      	movs	r7, r1
 80010ce:	46a1      	mov	r9, r4
 80010d0:	4664      	mov	r4, ip
 80010d2:	4091      	lsls	r1, r2
 80010d4:	40e7      	lsrs	r7, r4
 80010d6:	464c      	mov	r4, r9
 80010d8:	1e4a      	subs	r2, r1, #1
 80010da:	4191      	sbcs	r1, r2
 80010dc:	433c      	orrs	r4, r7
 80010de:	4642      	mov	r2, r8
 80010e0:	4321      	orrs	r1, r4
 80010e2:	4664      	mov	r4, ip
 80010e4:	40e2      	lsrs	r2, r4
 80010e6:	1a80      	subs	r0, r0, r2
 80010e8:	1a5c      	subs	r4, r3, r1
 80010ea:	42a3      	cmp	r3, r4
 80010ec:	419b      	sbcs	r3, r3
 80010ee:	425f      	negs	r7, r3
 80010f0:	1bc7      	subs	r7, r0, r7
 80010f2:	023b      	lsls	r3, r7, #8
 80010f4:	d400      	bmi.n	80010f8 <__aeabi_dadd+0xa8>
 80010f6:	e0d0      	b.n	800129a <__aeabi_dadd+0x24a>
 80010f8:	027f      	lsls	r7, r7, #9
 80010fa:	0a7f      	lsrs	r7, r7, #9
 80010fc:	2f00      	cmp	r7, #0
 80010fe:	d100      	bne.n	8001102 <__aeabi_dadd+0xb2>
 8001100:	e0ff      	b.n	8001302 <__aeabi_dadd+0x2b2>
 8001102:	0038      	movs	r0, r7
 8001104:	f001 fe5a 	bl	8002dbc <__clzsi2>
 8001108:	0001      	movs	r1, r0
 800110a:	3908      	subs	r1, #8
 800110c:	2320      	movs	r3, #32
 800110e:	0022      	movs	r2, r4
 8001110:	1a5b      	subs	r3, r3, r1
 8001112:	408f      	lsls	r7, r1
 8001114:	40da      	lsrs	r2, r3
 8001116:	408c      	lsls	r4, r1
 8001118:	4317      	orrs	r7, r2
 800111a:	42b1      	cmp	r1, r6
 800111c:	da00      	bge.n	8001120 <__aeabi_dadd+0xd0>
 800111e:	e0ff      	b.n	8001320 <__aeabi_dadd+0x2d0>
 8001120:	1b89      	subs	r1, r1, r6
 8001122:	1c4b      	adds	r3, r1, #1
 8001124:	2b1f      	cmp	r3, #31
 8001126:	dd00      	ble.n	800112a <__aeabi_dadd+0xda>
 8001128:	e0a8      	b.n	800127c <__aeabi_dadd+0x22c>
 800112a:	2220      	movs	r2, #32
 800112c:	0039      	movs	r1, r7
 800112e:	1ad2      	subs	r2, r2, r3
 8001130:	0020      	movs	r0, r4
 8001132:	4094      	lsls	r4, r2
 8001134:	4091      	lsls	r1, r2
 8001136:	40d8      	lsrs	r0, r3
 8001138:	1e62      	subs	r2, r4, #1
 800113a:	4194      	sbcs	r4, r2
 800113c:	40df      	lsrs	r7, r3
 800113e:	2600      	movs	r6, #0
 8001140:	4301      	orrs	r1, r0
 8001142:	430c      	orrs	r4, r1
 8001144:	0763      	lsls	r3, r4, #29
 8001146:	d009      	beq.n	800115c <__aeabi_dadd+0x10c>
 8001148:	230f      	movs	r3, #15
 800114a:	4023      	ands	r3, r4
 800114c:	2b04      	cmp	r3, #4
 800114e:	d005      	beq.n	800115c <__aeabi_dadd+0x10c>
 8001150:	1d23      	adds	r3, r4, #4
 8001152:	42a3      	cmp	r3, r4
 8001154:	41a4      	sbcs	r4, r4
 8001156:	4264      	negs	r4, r4
 8001158:	193f      	adds	r7, r7, r4
 800115a:	001c      	movs	r4, r3
 800115c:	023b      	lsls	r3, r7, #8
 800115e:	d400      	bmi.n	8001162 <__aeabi_dadd+0x112>
 8001160:	e09e      	b.n	80012a0 <__aeabi_dadd+0x250>
 8001162:	4b95      	ldr	r3, [pc, #596]	; (80013b8 <__aeabi_dadd+0x368>)
 8001164:	3601      	adds	r6, #1
 8001166:	429e      	cmp	r6, r3
 8001168:	d100      	bne.n	800116c <__aeabi_dadd+0x11c>
 800116a:	e0b7      	b.n	80012dc <__aeabi_dadd+0x28c>
 800116c:	4a93      	ldr	r2, [pc, #588]	; (80013bc <__aeabi_dadd+0x36c>)
 800116e:	08e4      	lsrs	r4, r4, #3
 8001170:	4017      	ands	r7, r2
 8001172:	077b      	lsls	r3, r7, #29
 8001174:	0571      	lsls	r1, r6, #21
 8001176:	027f      	lsls	r7, r7, #9
 8001178:	4323      	orrs	r3, r4
 800117a:	0b3f      	lsrs	r7, r7, #12
 800117c:	0d4a      	lsrs	r2, r1, #21
 800117e:	0512      	lsls	r2, r2, #20
 8001180:	433a      	orrs	r2, r7
 8001182:	07ed      	lsls	r5, r5, #31
 8001184:	432a      	orrs	r2, r5
 8001186:	0018      	movs	r0, r3
 8001188:	0011      	movs	r1, r2
 800118a:	bce0      	pop	{r5, r6, r7}
 800118c:	46ba      	mov	sl, r7
 800118e:	46b1      	mov	r9, r6
 8001190:	46a8      	mov	r8, r5
 8001192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001194:	2c00      	cmp	r4, #0
 8001196:	d04b      	beq.n	8001230 <__aeabi_dadd+0x1e0>
 8001198:	464c      	mov	r4, r9
 800119a:	1ba4      	subs	r4, r4, r6
 800119c:	46a4      	mov	ip, r4
 800119e:	2e00      	cmp	r6, #0
 80011a0:	d000      	beq.n	80011a4 <__aeabi_dadd+0x154>
 80011a2:	e123      	b.n	80013ec <__aeabi_dadd+0x39c>
 80011a4:	0004      	movs	r4, r0
 80011a6:	431c      	orrs	r4, r3
 80011a8:	d100      	bne.n	80011ac <__aeabi_dadd+0x15c>
 80011aa:	e1af      	b.n	800150c <__aeabi_dadd+0x4bc>
 80011ac:	4662      	mov	r2, ip
 80011ae:	1e54      	subs	r4, r2, #1
 80011b0:	2a01      	cmp	r2, #1
 80011b2:	d100      	bne.n	80011b6 <__aeabi_dadd+0x166>
 80011b4:	e215      	b.n	80015e2 <__aeabi_dadd+0x592>
 80011b6:	4d80      	ldr	r5, [pc, #512]	; (80013b8 <__aeabi_dadd+0x368>)
 80011b8:	45ac      	cmp	ip, r5
 80011ba:	d100      	bne.n	80011be <__aeabi_dadd+0x16e>
 80011bc:	e1c8      	b.n	8001550 <__aeabi_dadd+0x500>
 80011be:	46a4      	mov	ip, r4
 80011c0:	e11b      	b.n	80013fa <__aeabi_dadd+0x3aa>
 80011c2:	464a      	mov	r2, r9
 80011c4:	1ab2      	subs	r2, r6, r2
 80011c6:	4694      	mov	ip, r2
 80011c8:	2a00      	cmp	r2, #0
 80011ca:	dc00      	bgt.n	80011ce <__aeabi_dadd+0x17e>
 80011cc:	e0ac      	b.n	8001328 <__aeabi_dadd+0x2d8>
 80011ce:	464a      	mov	r2, r9
 80011d0:	2a00      	cmp	r2, #0
 80011d2:	d043      	beq.n	800125c <__aeabi_dadd+0x20c>
 80011d4:	4a78      	ldr	r2, [pc, #480]	; (80013b8 <__aeabi_dadd+0x368>)
 80011d6:	4296      	cmp	r6, r2
 80011d8:	d100      	bne.n	80011dc <__aeabi_dadd+0x18c>
 80011da:	e1af      	b.n	800153c <__aeabi_dadd+0x4ec>
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	003c      	movs	r4, r7
 80011e0:	0412      	lsls	r2, r2, #16
 80011e2:	4314      	orrs	r4, r2
 80011e4:	46a0      	mov	r8, r4
 80011e6:	4662      	mov	r2, ip
 80011e8:	2a38      	cmp	r2, #56	; 0x38
 80011ea:	dc67      	bgt.n	80012bc <__aeabi_dadd+0x26c>
 80011ec:	2a1f      	cmp	r2, #31
 80011ee:	dc00      	bgt.n	80011f2 <__aeabi_dadd+0x1a2>
 80011f0:	e15f      	b.n	80014b2 <__aeabi_dadd+0x462>
 80011f2:	4647      	mov	r7, r8
 80011f4:	3a20      	subs	r2, #32
 80011f6:	40d7      	lsrs	r7, r2
 80011f8:	4662      	mov	r2, ip
 80011fa:	2a20      	cmp	r2, #32
 80011fc:	d005      	beq.n	800120a <__aeabi_dadd+0x1ba>
 80011fe:	4664      	mov	r4, ip
 8001200:	2240      	movs	r2, #64	; 0x40
 8001202:	1b12      	subs	r2, r2, r4
 8001204:	4644      	mov	r4, r8
 8001206:	4094      	lsls	r4, r2
 8001208:	4321      	orrs	r1, r4
 800120a:	1e4a      	subs	r2, r1, #1
 800120c:	4191      	sbcs	r1, r2
 800120e:	000c      	movs	r4, r1
 8001210:	433c      	orrs	r4, r7
 8001212:	e057      	b.n	80012c4 <__aeabi_dadd+0x274>
 8001214:	003a      	movs	r2, r7
 8001216:	430a      	orrs	r2, r1
 8001218:	d100      	bne.n	800121c <__aeabi_dadd+0x1cc>
 800121a:	e105      	b.n	8001428 <__aeabi_dadd+0x3d8>
 800121c:	0022      	movs	r2, r4
 800121e:	3a01      	subs	r2, #1
 8001220:	2c01      	cmp	r4, #1
 8001222:	d100      	bne.n	8001226 <__aeabi_dadd+0x1d6>
 8001224:	e182      	b.n	800152c <__aeabi_dadd+0x4dc>
 8001226:	4c64      	ldr	r4, [pc, #400]	; (80013b8 <__aeabi_dadd+0x368>)
 8001228:	45a4      	cmp	ip, r4
 800122a:	d05b      	beq.n	80012e4 <__aeabi_dadd+0x294>
 800122c:	4694      	mov	ip, r2
 800122e:	e741      	b.n	80010b4 <__aeabi_dadd+0x64>
 8001230:	4c63      	ldr	r4, [pc, #396]	; (80013c0 <__aeabi_dadd+0x370>)
 8001232:	1c77      	adds	r7, r6, #1
 8001234:	4227      	tst	r7, r4
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x1ea>
 8001238:	e0c4      	b.n	80013c4 <__aeabi_dadd+0x374>
 800123a:	0004      	movs	r4, r0
 800123c:	431c      	orrs	r4, r3
 800123e:	2e00      	cmp	r6, #0
 8001240:	d000      	beq.n	8001244 <__aeabi_dadd+0x1f4>
 8001242:	e169      	b.n	8001518 <__aeabi_dadd+0x4c8>
 8001244:	2c00      	cmp	r4, #0
 8001246:	d100      	bne.n	800124a <__aeabi_dadd+0x1fa>
 8001248:	e1bf      	b.n	80015ca <__aeabi_dadd+0x57a>
 800124a:	4644      	mov	r4, r8
 800124c:	430c      	orrs	r4, r1
 800124e:	d000      	beq.n	8001252 <__aeabi_dadd+0x202>
 8001250:	e1d0      	b.n	80015f4 <__aeabi_dadd+0x5a4>
 8001252:	0742      	lsls	r2, r0, #29
 8001254:	08db      	lsrs	r3, r3, #3
 8001256:	4313      	orrs	r3, r2
 8001258:	08c0      	lsrs	r0, r0, #3
 800125a:	e029      	b.n	80012b0 <__aeabi_dadd+0x260>
 800125c:	003a      	movs	r2, r7
 800125e:	430a      	orrs	r2, r1
 8001260:	d100      	bne.n	8001264 <__aeabi_dadd+0x214>
 8001262:	e170      	b.n	8001546 <__aeabi_dadd+0x4f6>
 8001264:	4662      	mov	r2, ip
 8001266:	4664      	mov	r4, ip
 8001268:	3a01      	subs	r2, #1
 800126a:	2c01      	cmp	r4, #1
 800126c:	d100      	bne.n	8001270 <__aeabi_dadd+0x220>
 800126e:	e0e0      	b.n	8001432 <__aeabi_dadd+0x3e2>
 8001270:	4c51      	ldr	r4, [pc, #324]	; (80013b8 <__aeabi_dadd+0x368>)
 8001272:	45a4      	cmp	ip, r4
 8001274:	d100      	bne.n	8001278 <__aeabi_dadd+0x228>
 8001276:	e161      	b.n	800153c <__aeabi_dadd+0x4ec>
 8001278:	4694      	mov	ip, r2
 800127a:	e7b4      	b.n	80011e6 <__aeabi_dadd+0x196>
 800127c:	003a      	movs	r2, r7
 800127e:	391f      	subs	r1, #31
 8001280:	40ca      	lsrs	r2, r1
 8001282:	0011      	movs	r1, r2
 8001284:	2b20      	cmp	r3, #32
 8001286:	d003      	beq.n	8001290 <__aeabi_dadd+0x240>
 8001288:	2240      	movs	r2, #64	; 0x40
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	409f      	lsls	r7, r3
 800128e:	433c      	orrs	r4, r7
 8001290:	1e63      	subs	r3, r4, #1
 8001292:	419c      	sbcs	r4, r3
 8001294:	2700      	movs	r7, #0
 8001296:	2600      	movs	r6, #0
 8001298:	430c      	orrs	r4, r1
 800129a:	0763      	lsls	r3, r4, #29
 800129c:	d000      	beq.n	80012a0 <__aeabi_dadd+0x250>
 800129e:	e753      	b.n	8001148 <__aeabi_dadd+0xf8>
 80012a0:	46b4      	mov	ip, r6
 80012a2:	08e4      	lsrs	r4, r4, #3
 80012a4:	077b      	lsls	r3, r7, #29
 80012a6:	4323      	orrs	r3, r4
 80012a8:	08f8      	lsrs	r0, r7, #3
 80012aa:	4a43      	ldr	r2, [pc, #268]	; (80013b8 <__aeabi_dadd+0x368>)
 80012ac:	4594      	cmp	ip, r2
 80012ae:	d01d      	beq.n	80012ec <__aeabi_dadd+0x29c>
 80012b0:	4662      	mov	r2, ip
 80012b2:	0307      	lsls	r7, r0, #12
 80012b4:	0552      	lsls	r2, r2, #21
 80012b6:	0b3f      	lsrs	r7, r7, #12
 80012b8:	0d52      	lsrs	r2, r2, #21
 80012ba:	e760      	b.n	800117e <__aeabi_dadd+0x12e>
 80012bc:	4644      	mov	r4, r8
 80012be:	430c      	orrs	r4, r1
 80012c0:	1e62      	subs	r2, r4, #1
 80012c2:	4194      	sbcs	r4, r2
 80012c4:	18e4      	adds	r4, r4, r3
 80012c6:	429c      	cmp	r4, r3
 80012c8:	419b      	sbcs	r3, r3
 80012ca:	425f      	negs	r7, r3
 80012cc:	183f      	adds	r7, r7, r0
 80012ce:	023b      	lsls	r3, r7, #8
 80012d0:	d5e3      	bpl.n	800129a <__aeabi_dadd+0x24a>
 80012d2:	4b39      	ldr	r3, [pc, #228]	; (80013b8 <__aeabi_dadd+0x368>)
 80012d4:	3601      	adds	r6, #1
 80012d6:	429e      	cmp	r6, r3
 80012d8:	d000      	beq.n	80012dc <__aeabi_dadd+0x28c>
 80012da:	e0b5      	b.n	8001448 <__aeabi_dadd+0x3f8>
 80012dc:	0032      	movs	r2, r6
 80012de:	2700      	movs	r7, #0
 80012e0:	2300      	movs	r3, #0
 80012e2:	e74c      	b.n	800117e <__aeabi_dadd+0x12e>
 80012e4:	0742      	lsls	r2, r0, #29
 80012e6:	08db      	lsrs	r3, r3, #3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	08c0      	lsrs	r0, r0, #3
 80012ec:	001a      	movs	r2, r3
 80012ee:	4302      	orrs	r2, r0
 80012f0:	d100      	bne.n	80012f4 <__aeabi_dadd+0x2a4>
 80012f2:	e1e1      	b.n	80016b8 <__aeabi_dadd+0x668>
 80012f4:	2780      	movs	r7, #128	; 0x80
 80012f6:	033f      	lsls	r7, r7, #12
 80012f8:	4307      	orrs	r7, r0
 80012fa:	033f      	lsls	r7, r7, #12
 80012fc:	4a2e      	ldr	r2, [pc, #184]	; (80013b8 <__aeabi_dadd+0x368>)
 80012fe:	0b3f      	lsrs	r7, r7, #12
 8001300:	e73d      	b.n	800117e <__aeabi_dadd+0x12e>
 8001302:	0020      	movs	r0, r4
 8001304:	f001 fd5a 	bl	8002dbc <__clzsi2>
 8001308:	0001      	movs	r1, r0
 800130a:	3118      	adds	r1, #24
 800130c:	291f      	cmp	r1, #31
 800130e:	dc00      	bgt.n	8001312 <__aeabi_dadd+0x2c2>
 8001310:	e6fc      	b.n	800110c <__aeabi_dadd+0xbc>
 8001312:	3808      	subs	r0, #8
 8001314:	4084      	lsls	r4, r0
 8001316:	0027      	movs	r7, r4
 8001318:	2400      	movs	r4, #0
 800131a:	42b1      	cmp	r1, r6
 800131c:	db00      	blt.n	8001320 <__aeabi_dadd+0x2d0>
 800131e:	e6ff      	b.n	8001120 <__aeabi_dadd+0xd0>
 8001320:	4a26      	ldr	r2, [pc, #152]	; (80013bc <__aeabi_dadd+0x36c>)
 8001322:	1a76      	subs	r6, r6, r1
 8001324:	4017      	ands	r7, r2
 8001326:	e70d      	b.n	8001144 <__aeabi_dadd+0xf4>
 8001328:	2a00      	cmp	r2, #0
 800132a:	d02f      	beq.n	800138c <__aeabi_dadd+0x33c>
 800132c:	464a      	mov	r2, r9
 800132e:	1b92      	subs	r2, r2, r6
 8001330:	4694      	mov	ip, r2
 8001332:	2e00      	cmp	r6, #0
 8001334:	d100      	bne.n	8001338 <__aeabi_dadd+0x2e8>
 8001336:	e0ad      	b.n	8001494 <__aeabi_dadd+0x444>
 8001338:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <__aeabi_dadd+0x368>)
 800133a:	4591      	cmp	r9, r2
 800133c:	d100      	bne.n	8001340 <__aeabi_dadd+0x2f0>
 800133e:	e10f      	b.n	8001560 <__aeabi_dadd+0x510>
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	0412      	lsls	r2, r2, #16
 8001344:	4310      	orrs	r0, r2
 8001346:	4662      	mov	r2, ip
 8001348:	2a38      	cmp	r2, #56	; 0x38
 800134a:	dd00      	ble.n	800134e <__aeabi_dadd+0x2fe>
 800134c:	e10f      	b.n	800156e <__aeabi_dadd+0x51e>
 800134e:	2a1f      	cmp	r2, #31
 8001350:	dd00      	ble.n	8001354 <__aeabi_dadd+0x304>
 8001352:	e180      	b.n	8001656 <__aeabi_dadd+0x606>
 8001354:	4664      	mov	r4, ip
 8001356:	2220      	movs	r2, #32
 8001358:	001e      	movs	r6, r3
 800135a:	1b12      	subs	r2, r2, r4
 800135c:	4667      	mov	r7, ip
 800135e:	0004      	movs	r4, r0
 8001360:	4093      	lsls	r3, r2
 8001362:	4094      	lsls	r4, r2
 8001364:	40fe      	lsrs	r6, r7
 8001366:	1e5a      	subs	r2, r3, #1
 8001368:	4193      	sbcs	r3, r2
 800136a:	40f8      	lsrs	r0, r7
 800136c:	4334      	orrs	r4, r6
 800136e:	431c      	orrs	r4, r3
 8001370:	4480      	add	r8, r0
 8001372:	1864      	adds	r4, r4, r1
 8001374:	428c      	cmp	r4, r1
 8001376:	41bf      	sbcs	r7, r7
 8001378:	427f      	negs	r7, r7
 800137a:	464e      	mov	r6, r9
 800137c:	4447      	add	r7, r8
 800137e:	e7a6      	b.n	80012ce <__aeabi_dadd+0x27e>
 8001380:	4642      	mov	r2, r8
 8001382:	430a      	orrs	r2, r1
 8001384:	0011      	movs	r1, r2
 8001386:	1e4a      	subs	r2, r1, #1
 8001388:	4191      	sbcs	r1, r2
 800138a:	e6ad      	b.n	80010e8 <__aeabi_dadd+0x98>
 800138c:	4c0c      	ldr	r4, [pc, #48]	; (80013c0 <__aeabi_dadd+0x370>)
 800138e:	1c72      	adds	r2, r6, #1
 8001390:	4222      	tst	r2, r4
 8001392:	d000      	beq.n	8001396 <__aeabi_dadd+0x346>
 8001394:	e0a1      	b.n	80014da <__aeabi_dadd+0x48a>
 8001396:	0002      	movs	r2, r0
 8001398:	431a      	orrs	r2, r3
 800139a:	2e00      	cmp	r6, #0
 800139c:	d000      	beq.n	80013a0 <__aeabi_dadd+0x350>
 800139e:	e0fa      	b.n	8001596 <__aeabi_dadd+0x546>
 80013a0:	2a00      	cmp	r2, #0
 80013a2:	d100      	bne.n	80013a6 <__aeabi_dadd+0x356>
 80013a4:	e145      	b.n	8001632 <__aeabi_dadd+0x5e2>
 80013a6:	003a      	movs	r2, r7
 80013a8:	430a      	orrs	r2, r1
 80013aa:	d000      	beq.n	80013ae <__aeabi_dadd+0x35e>
 80013ac:	e146      	b.n	800163c <__aeabi_dadd+0x5ec>
 80013ae:	0742      	lsls	r2, r0, #29
 80013b0:	08db      	lsrs	r3, r3, #3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	08c0      	lsrs	r0, r0, #3
 80013b6:	e77b      	b.n	80012b0 <__aeabi_dadd+0x260>
 80013b8:	000007ff 	.word	0x000007ff
 80013bc:	ff7fffff 	.word	0xff7fffff
 80013c0:	000007fe 	.word	0x000007fe
 80013c4:	4647      	mov	r7, r8
 80013c6:	1a5c      	subs	r4, r3, r1
 80013c8:	1bc2      	subs	r2, r0, r7
 80013ca:	42a3      	cmp	r3, r4
 80013cc:	41bf      	sbcs	r7, r7
 80013ce:	427f      	negs	r7, r7
 80013d0:	46b9      	mov	r9, r7
 80013d2:	0017      	movs	r7, r2
 80013d4:	464a      	mov	r2, r9
 80013d6:	1abf      	subs	r7, r7, r2
 80013d8:	023a      	lsls	r2, r7, #8
 80013da:	d500      	bpl.n	80013de <__aeabi_dadd+0x38e>
 80013dc:	e08d      	b.n	80014fa <__aeabi_dadd+0x4aa>
 80013de:	0023      	movs	r3, r4
 80013e0:	433b      	orrs	r3, r7
 80013e2:	d000      	beq.n	80013e6 <__aeabi_dadd+0x396>
 80013e4:	e68a      	b.n	80010fc <__aeabi_dadd+0xac>
 80013e6:	2000      	movs	r0, #0
 80013e8:	2500      	movs	r5, #0
 80013ea:	e761      	b.n	80012b0 <__aeabi_dadd+0x260>
 80013ec:	4cb4      	ldr	r4, [pc, #720]	; (80016c0 <__aeabi_dadd+0x670>)
 80013ee:	45a1      	cmp	r9, r4
 80013f0:	d100      	bne.n	80013f4 <__aeabi_dadd+0x3a4>
 80013f2:	e0ad      	b.n	8001550 <__aeabi_dadd+0x500>
 80013f4:	2480      	movs	r4, #128	; 0x80
 80013f6:	0424      	lsls	r4, r4, #16
 80013f8:	4320      	orrs	r0, r4
 80013fa:	4664      	mov	r4, ip
 80013fc:	2c38      	cmp	r4, #56	; 0x38
 80013fe:	dc3d      	bgt.n	800147c <__aeabi_dadd+0x42c>
 8001400:	4662      	mov	r2, ip
 8001402:	2c1f      	cmp	r4, #31
 8001404:	dd00      	ble.n	8001408 <__aeabi_dadd+0x3b8>
 8001406:	e0b7      	b.n	8001578 <__aeabi_dadd+0x528>
 8001408:	2520      	movs	r5, #32
 800140a:	001e      	movs	r6, r3
 800140c:	1b2d      	subs	r5, r5, r4
 800140e:	0004      	movs	r4, r0
 8001410:	40ab      	lsls	r3, r5
 8001412:	40ac      	lsls	r4, r5
 8001414:	40d6      	lsrs	r6, r2
 8001416:	40d0      	lsrs	r0, r2
 8001418:	4642      	mov	r2, r8
 800141a:	1e5d      	subs	r5, r3, #1
 800141c:	41ab      	sbcs	r3, r5
 800141e:	4334      	orrs	r4, r6
 8001420:	1a12      	subs	r2, r2, r0
 8001422:	4690      	mov	r8, r2
 8001424:	4323      	orrs	r3, r4
 8001426:	e02c      	b.n	8001482 <__aeabi_dadd+0x432>
 8001428:	0742      	lsls	r2, r0, #29
 800142a:	08db      	lsrs	r3, r3, #3
 800142c:	4313      	orrs	r3, r2
 800142e:	08c0      	lsrs	r0, r0, #3
 8001430:	e73b      	b.n	80012aa <__aeabi_dadd+0x25a>
 8001432:	185c      	adds	r4, r3, r1
 8001434:	429c      	cmp	r4, r3
 8001436:	419b      	sbcs	r3, r3
 8001438:	4440      	add	r0, r8
 800143a:	425b      	negs	r3, r3
 800143c:	18c7      	adds	r7, r0, r3
 800143e:	2601      	movs	r6, #1
 8001440:	023b      	lsls	r3, r7, #8
 8001442:	d400      	bmi.n	8001446 <__aeabi_dadd+0x3f6>
 8001444:	e729      	b.n	800129a <__aeabi_dadd+0x24a>
 8001446:	2602      	movs	r6, #2
 8001448:	4a9e      	ldr	r2, [pc, #632]	; (80016c4 <__aeabi_dadd+0x674>)
 800144a:	0863      	lsrs	r3, r4, #1
 800144c:	4017      	ands	r7, r2
 800144e:	2201      	movs	r2, #1
 8001450:	4014      	ands	r4, r2
 8001452:	431c      	orrs	r4, r3
 8001454:	07fb      	lsls	r3, r7, #31
 8001456:	431c      	orrs	r4, r3
 8001458:	087f      	lsrs	r7, r7, #1
 800145a:	e673      	b.n	8001144 <__aeabi_dadd+0xf4>
 800145c:	4644      	mov	r4, r8
 800145e:	3a20      	subs	r2, #32
 8001460:	40d4      	lsrs	r4, r2
 8001462:	4662      	mov	r2, ip
 8001464:	2a20      	cmp	r2, #32
 8001466:	d005      	beq.n	8001474 <__aeabi_dadd+0x424>
 8001468:	4667      	mov	r7, ip
 800146a:	2240      	movs	r2, #64	; 0x40
 800146c:	1bd2      	subs	r2, r2, r7
 800146e:	4647      	mov	r7, r8
 8001470:	4097      	lsls	r7, r2
 8001472:	4339      	orrs	r1, r7
 8001474:	1e4a      	subs	r2, r1, #1
 8001476:	4191      	sbcs	r1, r2
 8001478:	4321      	orrs	r1, r4
 800147a:	e635      	b.n	80010e8 <__aeabi_dadd+0x98>
 800147c:	4303      	orrs	r3, r0
 800147e:	1e58      	subs	r0, r3, #1
 8001480:	4183      	sbcs	r3, r0
 8001482:	1acc      	subs	r4, r1, r3
 8001484:	42a1      	cmp	r1, r4
 8001486:	41bf      	sbcs	r7, r7
 8001488:	4643      	mov	r3, r8
 800148a:	427f      	negs	r7, r7
 800148c:	4655      	mov	r5, sl
 800148e:	464e      	mov	r6, r9
 8001490:	1bdf      	subs	r7, r3, r7
 8001492:	e62e      	b.n	80010f2 <__aeabi_dadd+0xa2>
 8001494:	0002      	movs	r2, r0
 8001496:	431a      	orrs	r2, r3
 8001498:	d100      	bne.n	800149c <__aeabi_dadd+0x44c>
 800149a:	e0bd      	b.n	8001618 <__aeabi_dadd+0x5c8>
 800149c:	4662      	mov	r2, ip
 800149e:	4664      	mov	r4, ip
 80014a0:	3a01      	subs	r2, #1
 80014a2:	2c01      	cmp	r4, #1
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dadd+0x458>
 80014a6:	e0e5      	b.n	8001674 <__aeabi_dadd+0x624>
 80014a8:	4c85      	ldr	r4, [pc, #532]	; (80016c0 <__aeabi_dadd+0x670>)
 80014aa:	45a4      	cmp	ip, r4
 80014ac:	d058      	beq.n	8001560 <__aeabi_dadd+0x510>
 80014ae:	4694      	mov	ip, r2
 80014b0:	e749      	b.n	8001346 <__aeabi_dadd+0x2f6>
 80014b2:	4664      	mov	r4, ip
 80014b4:	2220      	movs	r2, #32
 80014b6:	1b12      	subs	r2, r2, r4
 80014b8:	4644      	mov	r4, r8
 80014ba:	4094      	lsls	r4, r2
 80014bc:	000f      	movs	r7, r1
 80014be:	46a1      	mov	r9, r4
 80014c0:	4664      	mov	r4, ip
 80014c2:	4091      	lsls	r1, r2
 80014c4:	40e7      	lsrs	r7, r4
 80014c6:	464c      	mov	r4, r9
 80014c8:	1e4a      	subs	r2, r1, #1
 80014ca:	4191      	sbcs	r1, r2
 80014cc:	433c      	orrs	r4, r7
 80014ce:	4642      	mov	r2, r8
 80014d0:	430c      	orrs	r4, r1
 80014d2:	4661      	mov	r1, ip
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1880      	adds	r0, r0, r2
 80014d8:	e6f4      	b.n	80012c4 <__aeabi_dadd+0x274>
 80014da:	4c79      	ldr	r4, [pc, #484]	; (80016c0 <__aeabi_dadd+0x670>)
 80014dc:	42a2      	cmp	r2, r4
 80014de:	d100      	bne.n	80014e2 <__aeabi_dadd+0x492>
 80014e0:	e6fd      	b.n	80012de <__aeabi_dadd+0x28e>
 80014e2:	1859      	adds	r1, r3, r1
 80014e4:	4299      	cmp	r1, r3
 80014e6:	419b      	sbcs	r3, r3
 80014e8:	4440      	add	r0, r8
 80014ea:	425f      	negs	r7, r3
 80014ec:	19c7      	adds	r7, r0, r7
 80014ee:	07fc      	lsls	r4, r7, #31
 80014f0:	0849      	lsrs	r1, r1, #1
 80014f2:	0016      	movs	r6, r2
 80014f4:	430c      	orrs	r4, r1
 80014f6:	087f      	lsrs	r7, r7, #1
 80014f8:	e6cf      	b.n	800129a <__aeabi_dadd+0x24a>
 80014fa:	1acc      	subs	r4, r1, r3
 80014fc:	42a1      	cmp	r1, r4
 80014fe:	41bf      	sbcs	r7, r7
 8001500:	4643      	mov	r3, r8
 8001502:	427f      	negs	r7, r7
 8001504:	1a18      	subs	r0, r3, r0
 8001506:	4655      	mov	r5, sl
 8001508:	1bc7      	subs	r7, r0, r7
 800150a:	e5f7      	b.n	80010fc <__aeabi_dadd+0xac>
 800150c:	08c9      	lsrs	r1, r1, #3
 800150e:	077b      	lsls	r3, r7, #29
 8001510:	4655      	mov	r5, sl
 8001512:	430b      	orrs	r3, r1
 8001514:	08f8      	lsrs	r0, r7, #3
 8001516:	e6c8      	b.n	80012aa <__aeabi_dadd+0x25a>
 8001518:	2c00      	cmp	r4, #0
 800151a:	d000      	beq.n	800151e <__aeabi_dadd+0x4ce>
 800151c:	e081      	b.n	8001622 <__aeabi_dadd+0x5d2>
 800151e:	4643      	mov	r3, r8
 8001520:	430b      	orrs	r3, r1
 8001522:	d115      	bne.n	8001550 <__aeabi_dadd+0x500>
 8001524:	2080      	movs	r0, #128	; 0x80
 8001526:	2500      	movs	r5, #0
 8001528:	0300      	lsls	r0, r0, #12
 800152a:	e6e3      	b.n	80012f4 <__aeabi_dadd+0x2a4>
 800152c:	1a5c      	subs	r4, r3, r1
 800152e:	42a3      	cmp	r3, r4
 8001530:	419b      	sbcs	r3, r3
 8001532:	1bc7      	subs	r7, r0, r7
 8001534:	425b      	negs	r3, r3
 8001536:	2601      	movs	r6, #1
 8001538:	1aff      	subs	r7, r7, r3
 800153a:	e5da      	b.n	80010f2 <__aeabi_dadd+0xa2>
 800153c:	0742      	lsls	r2, r0, #29
 800153e:	08db      	lsrs	r3, r3, #3
 8001540:	4313      	orrs	r3, r2
 8001542:	08c0      	lsrs	r0, r0, #3
 8001544:	e6d2      	b.n	80012ec <__aeabi_dadd+0x29c>
 8001546:	0742      	lsls	r2, r0, #29
 8001548:	08db      	lsrs	r3, r3, #3
 800154a:	4313      	orrs	r3, r2
 800154c:	08c0      	lsrs	r0, r0, #3
 800154e:	e6ac      	b.n	80012aa <__aeabi_dadd+0x25a>
 8001550:	4643      	mov	r3, r8
 8001552:	4642      	mov	r2, r8
 8001554:	08c9      	lsrs	r1, r1, #3
 8001556:	075b      	lsls	r3, r3, #29
 8001558:	4655      	mov	r5, sl
 800155a:	430b      	orrs	r3, r1
 800155c:	08d0      	lsrs	r0, r2, #3
 800155e:	e6c5      	b.n	80012ec <__aeabi_dadd+0x29c>
 8001560:	4643      	mov	r3, r8
 8001562:	4642      	mov	r2, r8
 8001564:	075b      	lsls	r3, r3, #29
 8001566:	08c9      	lsrs	r1, r1, #3
 8001568:	430b      	orrs	r3, r1
 800156a:	08d0      	lsrs	r0, r2, #3
 800156c:	e6be      	b.n	80012ec <__aeabi_dadd+0x29c>
 800156e:	4303      	orrs	r3, r0
 8001570:	001c      	movs	r4, r3
 8001572:	1e63      	subs	r3, r4, #1
 8001574:	419c      	sbcs	r4, r3
 8001576:	e6fc      	b.n	8001372 <__aeabi_dadd+0x322>
 8001578:	0002      	movs	r2, r0
 800157a:	3c20      	subs	r4, #32
 800157c:	40e2      	lsrs	r2, r4
 800157e:	0014      	movs	r4, r2
 8001580:	4662      	mov	r2, ip
 8001582:	2a20      	cmp	r2, #32
 8001584:	d003      	beq.n	800158e <__aeabi_dadd+0x53e>
 8001586:	2540      	movs	r5, #64	; 0x40
 8001588:	1aad      	subs	r5, r5, r2
 800158a:	40a8      	lsls	r0, r5
 800158c:	4303      	orrs	r3, r0
 800158e:	1e58      	subs	r0, r3, #1
 8001590:	4183      	sbcs	r3, r0
 8001592:	4323      	orrs	r3, r4
 8001594:	e775      	b.n	8001482 <__aeabi_dadd+0x432>
 8001596:	2a00      	cmp	r2, #0
 8001598:	d0e2      	beq.n	8001560 <__aeabi_dadd+0x510>
 800159a:	003a      	movs	r2, r7
 800159c:	430a      	orrs	r2, r1
 800159e:	d0cd      	beq.n	800153c <__aeabi_dadd+0x4ec>
 80015a0:	0742      	lsls	r2, r0, #29
 80015a2:	08db      	lsrs	r3, r3, #3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	2280      	movs	r2, #128	; 0x80
 80015a8:	08c0      	lsrs	r0, r0, #3
 80015aa:	0312      	lsls	r2, r2, #12
 80015ac:	4210      	tst	r0, r2
 80015ae:	d006      	beq.n	80015be <__aeabi_dadd+0x56e>
 80015b0:	08fc      	lsrs	r4, r7, #3
 80015b2:	4214      	tst	r4, r2
 80015b4:	d103      	bne.n	80015be <__aeabi_dadd+0x56e>
 80015b6:	0020      	movs	r0, r4
 80015b8:	08cb      	lsrs	r3, r1, #3
 80015ba:	077a      	lsls	r2, r7, #29
 80015bc:	4313      	orrs	r3, r2
 80015be:	0f5a      	lsrs	r2, r3, #29
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	0752      	lsls	r2, r2, #29
 80015c4:	08db      	lsrs	r3, r3, #3
 80015c6:	4313      	orrs	r3, r2
 80015c8:	e690      	b.n	80012ec <__aeabi_dadd+0x29c>
 80015ca:	4643      	mov	r3, r8
 80015cc:	430b      	orrs	r3, r1
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dadd+0x582>
 80015d0:	e709      	b.n	80013e6 <__aeabi_dadd+0x396>
 80015d2:	4643      	mov	r3, r8
 80015d4:	4642      	mov	r2, r8
 80015d6:	08c9      	lsrs	r1, r1, #3
 80015d8:	075b      	lsls	r3, r3, #29
 80015da:	4655      	mov	r5, sl
 80015dc:	430b      	orrs	r3, r1
 80015de:	08d0      	lsrs	r0, r2, #3
 80015e0:	e666      	b.n	80012b0 <__aeabi_dadd+0x260>
 80015e2:	1acc      	subs	r4, r1, r3
 80015e4:	42a1      	cmp	r1, r4
 80015e6:	4189      	sbcs	r1, r1
 80015e8:	1a3f      	subs	r7, r7, r0
 80015ea:	4249      	negs	r1, r1
 80015ec:	4655      	mov	r5, sl
 80015ee:	2601      	movs	r6, #1
 80015f0:	1a7f      	subs	r7, r7, r1
 80015f2:	e57e      	b.n	80010f2 <__aeabi_dadd+0xa2>
 80015f4:	4642      	mov	r2, r8
 80015f6:	1a5c      	subs	r4, r3, r1
 80015f8:	1a87      	subs	r7, r0, r2
 80015fa:	42a3      	cmp	r3, r4
 80015fc:	4192      	sbcs	r2, r2
 80015fe:	4252      	negs	r2, r2
 8001600:	1abf      	subs	r7, r7, r2
 8001602:	023a      	lsls	r2, r7, #8
 8001604:	d53d      	bpl.n	8001682 <__aeabi_dadd+0x632>
 8001606:	1acc      	subs	r4, r1, r3
 8001608:	42a1      	cmp	r1, r4
 800160a:	4189      	sbcs	r1, r1
 800160c:	4643      	mov	r3, r8
 800160e:	4249      	negs	r1, r1
 8001610:	1a1f      	subs	r7, r3, r0
 8001612:	4655      	mov	r5, sl
 8001614:	1a7f      	subs	r7, r7, r1
 8001616:	e595      	b.n	8001144 <__aeabi_dadd+0xf4>
 8001618:	077b      	lsls	r3, r7, #29
 800161a:	08c9      	lsrs	r1, r1, #3
 800161c:	430b      	orrs	r3, r1
 800161e:	08f8      	lsrs	r0, r7, #3
 8001620:	e643      	b.n	80012aa <__aeabi_dadd+0x25a>
 8001622:	4644      	mov	r4, r8
 8001624:	08db      	lsrs	r3, r3, #3
 8001626:	430c      	orrs	r4, r1
 8001628:	d130      	bne.n	800168c <__aeabi_dadd+0x63c>
 800162a:	0742      	lsls	r2, r0, #29
 800162c:	4313      	orrs	r3, r2
 800162e:	08c0      	lsrs	r0, r0, #3
 8001630:	e65c      	b.n	80012ec <__aeabi_dadd+0x29c>
 8001632:	077b      	lsls	r3, r7, #29
 8001634:	08c9      	lsrs	r1, r1, #3
 8001636:	430b      	orrs	r3, r1
 8001638:	08f8      	lsrs	r0, r7, #3
 800163a:	e639      	b.n	80012b0 <__aeabi_dadd+0x260>
 800163c:	185c      	adds	r4, r3, r1
 800163e:	429c      	cmp	r4, r3
 8001640:	419b      	sbcs	r3, r3
 8001642:	4440      	add	r0, r8
 8001644:	425b      	negs	r3, r3
 8001646:	18c7      	adds	r7, r0, r3
 8001648:	023b      	lsls	r3, r7, #8
 800164a:	d400      	bmi.n	800164e <__aeabi_dadd+0x5fe>
 800164c:	e625      	b.n	800129a <__aeabi_dadd+0x24a>
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <__aeabi_dadd+0x674>)
 8001650:	2601      	movs	r6, #1
 8001652:	401f      	ands	r7, r3
 8001654:	e621      	b.n	800129a <__aeabi_dadd+0x24a>
 8001656:	0004      	movs	r4, r0
 8001658:	3a20      	subs	r2, #32
 800165a:	40d4      	lsrs	r4, r2
 800165c:	4662      	mov	r2, ip
 800165e:	2a20      	cmp	r2, #32
 8001660:	d004      	beq.n	800166c <__aeabi_dadd+0x61c>
 8001662:	2240      	movs	r2, #64	; 0x40
 8001664:	4666      	mov	r6, ip
 8001666:	1b92      	subs	r2, r2, r6
 8001668:	4090      	lsls	r0, r2
 800166a:	4303      	orrs	r3, r0
 800166c:	1e5a      	subs	r2, r3, #1
 800166e:	4193      	sbcs	r3, r2
 8001670:	431c      	orrs	r4, r3
 8001672:	e67e      	b.n	8001372 <__aeabi_dadd+0x322>
 8001674:	185c      	adds	r4, r3, r1
 8001676:	428c      	cmp	r4, r1
 8001678:	4189      	sbcs	r1, r1
 800167a:	4440      	add	r0, r8
 800167c:	4249      	negs	r1, r1
 800167e:	1847      	adds	r7, r0, r1
 8001680:	e6dd      	b.n	800143e <__aeabi_dadd+0x3ee>
 8001682:	0023      	movs	r3, r4
 8001684:	433b      	orrs	r3, r7
 8001686:	d100      	bne.n	800168a <__aeabi_dadd+0x63a>
 8001688:	e6ad      	b.n	80013e6 <__aeabi_dadd+0x396>
 800168a:	e606      	b.n	800129a <__aeabi_dadd+0x24a>
 800168c:	0744      	lsls	r4, r0, #29
 800168e:	4323      	orrs	r3, r4
 8001690:	2480      	movs	r4, #128	; 0x80
 8001692:	08c0      	lsrs	r0, r0, #3
 8001694:	0324      	lsls	r4, r4, #12
 8001696:	4220      	tst	r0, r4
 8001698:	d008      	beq.n	80016ac <__aeabi_dadd+0x65c>
 800169a:	4642      	mov	r2, r8
 800169c:	08d6      	lsrs	r6, r2, #3
 800169e:	4226      	tst	r6, r4
 80016a0:	d104      	bne.n	80016ac <__aeabi_dadd+0x65c>
 80016a2:	4655      	mov	r5, sl
 80016a4:	0030      	movs	r0, r6
 80016a6:	08cb      	lsrs	r3, r1, #3
 80016a8:	0751      	lsls	r1, r2, #29
 80016aa:	430b      	orrs	r3, r1
 80016ac:	0f5a      	lsrs	r2, r3, #29
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	08db      	lsrs	r3, r3, #3
 80016b2:	0752      	lsls	r2, r2, #29
 80016b4:	4313      	orrs	r3, r2
 80016b6:	e619      	b.n	80012ec <__aeabi_dadd+0x29c>
 80016b8:	2300      	movs	r3, #0
 80016ba:	4a01      	ldr	r2, [pc, #4]	; (80016c0 <__aeabi_dadd+0x670>)
 80016bc:	001f      	movs	r7, r3
 80016be:	e55e      	b.n	800117e <__aeabi_dadd+0x12e>
 80016c0:	000007ff 	.word	0x000007ff
 80016c4:	ff7fffff 	.word	0xff7fffff

080016c8 <__aeabi_ddiv>:
 80016c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ca:	4657      	mov	r7, sl
 80016cc:	464e      	mov	r6, r9
 80016ce:	4645      	mov	r5, r8
 80016d0:	46de      	mov	lr, fp
 80016d2:	b5e0      	push	{r5, r6, r7, lr}
 80016d4:	4681      	mov	r9, r0
 80016d6:	0005      	movs	r5, r0
 80016d8:	030c      	lsls	r4, r1, #12
 80016da:	0048      	lsls	r0, r1, #1
 80016dc:	4692      	mov	sl, r2
 80016de:	001f      	movs	r7, r3
 80016e0:	b085      	sub	sp, #20
 80016e2:	0b24      	lsrs	r4, r4, #12
 80016e4:	0d40      	lsrs	r0, r0, #21
 80016e6:	0fce      	lsrs	r6, r1, #31
 80016e8:	2800      	cmp	r0, #0
 80016ea:	d100      	bne.n	80016ee <__aeabi_ddiv+0x26>
 80016ec:	e156      	b.n	800199c <__aeabi_ddiv+0x2d4>
 80016ee:	4bd4      	ldr	r3, [pc, #848]	; (8001a40 <__aeabi_ddiv+0x378>)
 80016f0:	4298      	cmp	r0, r3
 80016f2:	d100      	bne.n	80016f6 <__aeabi_ddiv+0x2e>
 80016f4:	e172      	b.n	80019dc <__aeabi_ddiv+0x314>
 80016f6:	0f6b      	lsrs	r3, r5, #29
 80016f8:	00e4      	lsls	r4, r4, #3
 80016fa:	431c      	orrs	r4, r3
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	041b      	lsls	r3, r3, #16
 8001700:	4323      	orrs	r3, r4
 8001702:	4698      	mov	r8, r3
 8001704:	4bcf      	ldr	r3, [pc, #828]	; (8001a44 <__aeabi_ddiv+0x37c>)
 8001706:	00ed      	lsls	r5, r5, #3
 8001708:	469b      	mov	fp, r3
 800170a:	2300      	movs	r3, #0
 800170c:	4699      	mov	r9, r3
 800170e:	4483      	add	fp, r0
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	033c      	lsls	r4, r7, #12
 8001714:	007b      	lsls	r3, r7, #1
 8001716:	4650      	mov	r0, sl
 8001718:	0b24      	lsrs	r4, r4, #12
 800171a:	0d5b      	lsrs	r3, r3, #21
 800171c:	0fff      	lsrs	r7, r7, #31
 800171e:	2b00      	cmp	r3, #0
 8001720:	d100      	bne.n	8001724 <__aeabi_ddiv+0x5c>
 8001722:	e11f      	b.n	8001964 <__aeabi_ddiv+0x29c>
 8001724:	4ac6      	ldr	r2, [pc, #792]	; (8001a40 <__aeabi_ddiv+0x378>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d100      	bne.n	800172c <__aeabi_ddiv+0x64>
 800172a:	e162      	b.n	80019f2 <__aeabi_ddiv+0x32a>
 800172c:	49c5      	ldr	r1, [pc, #788]	; (8001a44 <__aeabi_ddiv+0x37c>)
 800172e:	0f42      	lsrs	r2, r0, #29
 8001730:	468c      	mov	ip, r1
 8001732:	00e4      	lsls	r4, r4, #3
 8001734:	4659      	mov	r1, fp
 8001736:	4314      	orrs	r4, r2
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	4463      	add	r3, ip
 800173c:	0412      	lsls	r2, r2, #16
 800173e:	1acb      	subs	r3, r1, r3
 8001740:	4314      	orrs	r4, r2
 8001742:	469b      	mov	fp, r3
 8001744:	00c2      	lsls	r2, r0, #3
 8001746:	2000      	movs	r0, #0
 8001748:	0033      	movs	r3, r6
 800174a:	407b      	eors	r3, r7
 800174c:	469a      	mov	sl, r3
 800174e:	464b      	mov	r3, r9
 8001750:	2b0f      	cmp	r3, #15
 8001752:	d827      	bhi.n	80017a4 <__aeabi_ddiv+0xdc>
 8001754:	49bc      	ldr	r1, [pc, #752]	; (8001a48 <__aeabi_ddiv+0x380>)
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	58cb      	ldr	r3, [r1, r3]
 800175a:	469f      	mov	pc, r3
 800175c:	46b2      	mov	sl, r6
 800175e:	9b00      	ldr	r3, [sp, #0]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d016      	beq.n	8001792 <__aeabi_ddiv+0xca>
 8001764:	2b03      	cmp	r3, #3
 8001766:	d100      	bne.n	800176a <__aeabi_ddiv+0xa2>
 8001768:	e28e      	b.n	8001c88 <__aeabi_ddiv+0x5c0>
 800176a:	2b01      	cmp	r3, #1
 800176c:	d000      	beq.n	8001770 <__aeabi_ddiv+0xa8>
 800176e:	e0d9      	b.n	8001924 <__aeabi_ddiv+0x25c>
 8001770:	2300      	movs	r3, #0
 8001772:	2400      	movs	r4, #0
 8001774:	2500      	movs	r5, #0
 8001776:	4652      	mov	r2, sl
 8001778:	051b      	lsls	r3, r3, #20
 800177a:	4323      	orrs	r3, r4
 800177c:	07d2      	lsls	r2, r2, #31
 800177e:	4313      	orrs	r3, r2
 8001780:	0028      	movs	r0, r5
 8001782:	0019      	movs	r1, r3
 8001784:	b005      	add	sp, #20
 8001786:	bcf0      	pop	{r4, r5, r6, r7}
 8001788:	46bb      	mov	fp, r7
 800178a:	46b2      	mov	sl, r6
 800178c:	46a9      	mov	r9, r5
 800178e:	46a0      	mov	r8, r4
 8001790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001792:	2400      	movs	r4, #0
 8001794:	2500      	movs	r5, #0
 8001796:	4baa      	ldr	r3, [pc, #680]	; (8001a40 <__aeabi_ddiv+0x378>)
 8001798:	e7ed      	b.n	8001776 <__aeabi_ddiv+0xae>
 800179a:	46ba      	mov	sl, r7
 800179c:	46a0      	mov	r8, r4
 800179e:	0015      	movs	r5, r2
 80017a0:	9000      	str	r0, [sp, #0]
 80017a2:	e7dc      	b.n	800175e <__aeabi_ddiv+0x96>
 80017a4:	4544      	cmp	r4, r8
 80017a6:	d200      	bcs.n	80017aa <__aeabi_ddiv+0xe2>
 80017a8:	e1c7      	b.n	8001b3a <__aeabi_ddiv+0x472>
 80017aa:	d100      	bne.n	80017ae <__aeabi_ddiv+0xe6>
 80017ac:	e1c2      	b.n	8001b34 <__aeabi_ddiv+0x46c>
 80017ae:	2301      	movs	r3, #1
 80017b0:	425b      	negs	r3, r3
 80017b2:	469c      	mov	ip, r3
 80017b4:	002e      	movs	r6, r5
 80017b6:	4640      	mov	r0, r8
 80017b8:	2500      	movs	r5, #0
 80017ba:	44e3      	add	fp, ip
 80017bc:	0223      	lsls	r3, r4, #8
 80017be:	0e14      	lsrs	r4, r2, #24
 80017c0:	431c      	orrs	r4, r3
 80017c2:	0c1b      	lsrs	r3, r3, #16
 80017c4:	4699      	mov	r9, r3
 80017c6:	0423      	lsls	r3, r4, #16
 80017c8:	0c1f      	lsrs	r7, r3, #16
 80017ca:	0212      	lsls	r2, r2, #8
 80017cc:	4649      	mov	r1, r9
 80017ce:	9200      	str	r2, [sp, #0]
 80017d0:	9701      	str	r7, [sp, #4]
 80017d2:	f7fe fd43 	bl	800025c <__aeabi_uidivmod>
 80017d6:	0002      	movs	r2, r0
 80017d8:	437a      	muls	r2, r7
 80017da:	040b      	lsls	r3, r1, #16
 80017dc:	0c31      	lsrs	r1, r6, #16
 80017de:	4680      	mov	r8, r0
 80017e0:	4319      	orrs	r1, r3
 80017e2:	428a      	cmp	r2, r1
 80017e4:	d907      	bls.n	80017f6 <__aeabi_ddiv+0x12e>
 80017e6:	2301      	movs	r3, #1
 80017e8:	425b      	negs	r3, r3
 80017ea:	469c      	mov	ip, r3
 80017ec:	1909      	adds	r1, r1, r4
 80017ee:	44e0      	add	r8, ip
 80017f0:	428c      	cmp	r4, r1
 80017f2:	d800      	bhi.n	80017f6 <__aeabi_ddiv+0x12e>
 80017f4:	e207      	b.n	8001c06 <__aeabi_ddiv+0x53e>
 80017f6:	1a88      	subs	r0, r1, r2
 80017f8:	4649      	mov	r1, r9
 80017fa:	f7fe fd2f 	bl	800025c <__aeabi_uidivmod>
 80017fe:	0409      	lsls	r1, r1, #16
 8001800:	468c      	mov	ip, r1
 8001802:	0431      	lsls	r1, r6, #16
 8001804:	4666      	mov	r6, ip
 8001806:	9a01      	ldr	r2, [sp, #4]
 8001808:	0c09      	lsrs	r1, r1, #16
 800180a:	4342      	muls	r2, r0
 800180c:	0003      	movs	r3, r0
 800180e:	4331      	orrs	r1, r6
 8001810:	428a      	cmp	r2, r1
 8001812:	d904      	bls.n	800181e <__aeabi_ddiv+0x156>
 8001814:	1909      	adds	r1, r1, r4
 8001816:	3b01      	subs	r3, #1
 8001818:	428c      	cmp	r4, r1
 800181a:	d800      	bhi.n	800181e <__aeabi_ddiv+0x156>
 800181c:	e1ed      	b.n	8001bfa <__aeabi_ddiv+0x532>
 800181e:	1a88      	subs	r0, r1, r2
 8001820:	4642      	mov	r2, r8
 8001822:	0412      	lsls	r2, r2, #16
 8001824:	431a      	orrs	r2, r3
 8001826:	4690      	mov	r8, r2
 8001828:	4641      	mov	r1, r8
 800182a:	9b00      	ldr	r3, [sp, #0]
 800182c:	040e      	lsls	r6, r1, #16
 800182e:	0c1b      	lsrs	r3, r3, #16
 8001830:	001f      	movs	r7, r3
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	9b00      	ldr	r3, [sp, #0]
 8001836:	0c36      	lsrs	r6, r6, #16
 8001838:	041b      	lsls	r3, r3, #16
 800183a:	0c19      	lsrs	r1, r3, #16
 800183c:	000b      	movs	r3, r1
 800183e:	4373      	muls	r3, r6
 8001840:	0c12      	lsrs	r2, r2, #16
 8001842:	437e      	muls	r6, r7
 8001844:	9103      	str	r1, [sp, #12]
 8001846:	4351      	muls	r1, r2
 8001848:	437a      	muls	r2, r7
 800184a:	0c1f      	lsrs	r7, r3, #16
 800184c:	46bc      	mov	ip, r7
 800184e:	1876      	adds	r6, r6, r1
 8001850:	4466      	add	r6, ip
 8001852:	42b1      	cmp	r1, r6
 8001854:	d903      	bls.n	800185e <__aeabi_ddiv+0x196>
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	0249      	lsls	r1, r1, #9
 800185a:	468c      	mov	ip, r1
 800185c:	4462      	add	r2, ip
 800185e:	0c31      	lsrs	r1, r6, #16
 8001860:	188a      	adds	r2, r1, r2
 8001862:	0431      	lsls	r1, r6, #16
 8001864:	041e      	lsls	r6, r3, #16
 8001866:	0c36      	lsrs	r6, r6, #16
 8001868:	198e      	adds	r6, r1, r6
 800186a:	4290      	cmp	r0, r2
 800186c:	d302      	bcc.n	8001874 <__aeabi_ddiv+0x1ac>
 800186e:	d112      	bne.n	8001896 <__aeabi_ddiv+0x1ce>
 8001870:	42b5      	cmp	r5, r6
 8001872:	d210      	bcs.n	8001896 <__aeabi_ddiv+0x1ce>
 8001874:	4643      	mov	r3, r8
 8001876:	1e59      	subs	r1, r3, #1
 8001878:	9b00      	ldr	r3, [sp, #0]
 800187a:	469c      	mov	ip, r3
 800187c:	4465      	add	r5, ip
 800187e:	001f      	movs	r7, r3
 8001880:	429d      	cmp	r5, r3
 8001882:	419b      	sbcs	r3, r3
 8001884:	425b      	negs	r3, r3
 8001886:	191b      	adds	r3, r3, r4
 8001888:	18c0      	adds	r0, r0, r3
 800188a:	4284      	cmp	r4, r0
 800188c:	d200      	bcs.n	8001890 <__aeabi_ddiv+0x1c8>
 800188e:	e1a0      	b.n	8001bd2 <__aeabi_ddiv+0x50a>
 8001890:	d100      	bne.n	8001894 <__aeabi_ddiv+0x1cc>
 8001892:	e19b      	b.n	8001bcc <__aeabi_ddiv+0x504>
 8001894:	4688      	mov	r8, r1
 8001896:	1bae      	subs	r6, r5, r6
 8001898:	42b5      	cmp	r5, r6
 800189a:	41ad      	sbcs	r5, r5
 800189c:	1a80      	subs	r0, r0, r2
 800189e:	426d      	negs	r5, r5
 80018a0:	1b40      	subs	r0, r0, r5
 80018a2:	4284      	cmp	r4, r0
 80018a4:	d100      	bne.n	80018a8 <__aeabi_ddiv+0x1e0>
 80018a6:	e1d5      	b.n	8001c54 <__aeabi_ddiv+0x58c>
 80018a8:	4649      	mov	r1, r9
 80018aa:	f7fe fcd7 	bl	800025c <__aeabi_uidivmod>
 80018ae:	9a01      	ldr	r2, [sp, #4]
 80018b0:	040b      	lsls	r3, r1, #16
 80018b2:	4342      	muls	r2, r0
 80018b4:	0c31      	lsrs	r1, r6, #16
 80018b6:	0005      	movs	r5, r0
 80018b8:	4319      	orrs	r1, r3
 80018ba:	428a      	cmp	r2, r1
 80018bc:	d900      	bls.n	80018c0 <__aeabi_ddiv+0x1f8>
 80018be:	e16c      	b.n	8001b9a <__aeabi_ddiv+0x4d2>
 80018c0:	1a88      	subs	r0, r1, r2
 80018c2:	4649      	mov	r1, r9
 80018c4:	f7fe fcca 	bl	800025c <__aeabi_uidivmod>
 80018c8:	9a01      	ldr	r2, [sp, #4]
 80018ca:	0436      	lsls	r6, r6, #16
 80018cc:	4342      	muls	r2, r0
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	0c36      	lsrs	r6, r6, #16
 80018d2:	0003      	movs	r3, r0
 80018d4:	430e      	orrs	r6, r1
 80018d6:	42b2      	cmp	r2, r6
 80018d8:	d900      	bls.n	80018dc <__aeabi_ddiv+0x214>
 80018da:	e153      	b.n	8001b84 <__aeabi_ddiv+0x4bc>
 80018dc:	9803      	ldr	r0, [sp, #12]
 80018de:	1ab6      	subs	r6, r6, r2
 80018e0:	0002      	movs	r2, r0
 80018e2:	042d      	lsls	r5, r5, #16
 80018e4:	431d      	orrs	r5, r3
 80018e6:	9f02      	ldr	r7, [sp, #8]
 80018e8:	042b      	lsls	r3, r5, #16
 80018ea:	0c1b      	lsrs	r3, r3, #16
 80018ec:	435a      	muls	r2, r3
 80018ee:	437b      	muls	r3, r7
 80018f0:	469c      	mov	ip, r3
 80018f2:	0c29      	lsrs	r1, r5, #16
 80018f4:	4348      	muls	r0, r1
 80018f6:	0c13      	lsrs	r3, r2, #16
 80018f8:	4484      	add	ip, r0
 80018fa:	4463      	add	r3, ip
 80018fc:	4379      	muls	r1, r7
 80018fe:	4298      	cmp	r0, r3
 8001900:	d903      	bls.n	800190a <__aeabi_ddiv+0x242>
 8001902:	2080      	movs	r0, #128	; 0x80
 8001904:	0240      	lsls	r0, r0, #9
 8001906:	4684      	mov	ip, r0
 8001908:	4461      	add	r1, ip
 800190a:	0c18      	lsrs	r0, r3, #16
 800190c:	0412      	lsls	r2, r2, #16
 800190e:	041b      	lsls	r3, r3, #16
 8001910:	0c12      	lsrs	r2, r2, #16
 8001912:	1841      	adds	r1, r0, r1
 8001914:	189b      	adds	r3, r3, r2
 8001916:	428e      	cmp	r6, r1
 8001918:	d200      	bcs.n	800191c <__aeabi_ddiv+0x254>
 800191a:	e0ff      	b.n	8001b1c <__aeabi_ddiv+0x454>
 800191c:	d100      	bne.n	8001920 <__aeabi_ddiv+0x258>
 800191e:	e0fa      	b.n	8001b16 <__aeabi_ddiv+0x44e>
 8001920:	2301      	movs	r3, #1
 8001922:	431d      	orrs	r5, r3
 8001924:	4a49      	ldr	r2, [pc, #292]	; (8001a4c <__aeabi_ddiv+0x384>)
 8001926:	445a      	add	r2, fp
 8001928:	2a00      	cmp	r2, #0
 800192a:	dc00      	bgt.n	800192e <__aeabi_ddiv+0x266>
 800192c:	e0aa      	b.n	8001a84 <__aeabi_ddiv+0x3bc>
 800192e:	076b      	lsls	r3, r5, #29
 8001930:	d000      	beq.n	8001934 <__aeabi_ddiv+0x26c>
 8001932:	e13d      	b.n	8001bb0 <__aeabi_ddiv+0x4e8>
 8001934:	08ed      	lsrs	r5, r5, #3
 8001936:	4643      	mov	r3, r8
 8001938:	01db      	lsls	r3, r3, #7
 800193a:	d506      	bpl.n	800194a <__aeabi_ddiv+0x282>
 800193c:	4642      	mov	r2, r8
 800193e:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <__aeabi_ddiv+0x388>)
 8001940:	401a      	ands	r2, r3
 8001942:	4690      	mov	r8, r2
 8001944:	2280      	movs	r2, #128	; 0x80
 8001946:	00d2      	lsls	r2, r2, #3
 8001948:	445a      	add	r2, fp
 800194a:	4b42      	ldr	r3, [pc, #264]	; (8001a54 <__aeabi_ddiv+0x38c>)
 800194c:	429a      	cmp	r2, r3
 800194e:	dd00      	ble.n	8001952 <__aeabi_ddiv+0x28a>
 8001950:	e71f      	b.n	8001792 <__aeabi_ddiv+0xca>
 8001952:	4643      	mov	r3, r8
 8001954:	075b      	lsls	r3, r3, #29
 8001956:	431d      	orrs	r5, r3
 8001958:	4643      	mov	r3, r8
 800195a:	0552      	lsls	r2, r2, #21
 800195c:	025c      	lsls	r4, r3, #9
 800195e:	0b24      	lsrs	r4, r4, #12
 8001960:	0d53      	lsrs	r3, r2, #21
 8001962:	e708      	b.n	8001776 <__aeabi_ddiv+0xae>
 8001964:	4652      	mov	r2, sl
 8001966:	4322      	orrs	r2, r4
 8001968:	d100      	bne.n	800196c <__aeabi_ddiv+0x2a4>
 800196a:	e07b      	b.n	8001a64 <__aeabi_ddiv+0x39c>
 800196c:	2c00      	cmp	r4, #0
 800196e:	d100      	bne.n	8001972 <__aeabi_ddiv+0x2aa>
 8001970:	e0fa      	b.n	8001b68 <__aeabi_ddiv+0x4a0>
 8001972:	0020      	movs	r0, r4
 8001974:	f001 fa22 	bl	8002dbc <__clzsi2>
 8001978:	0002      	movs	r2, r0
 800197a:	3a0b      	subs	r2, #11
 800197c:	231d      	movs	r3, #29
 800197e:	0001      	movs	r1, r0
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	4652      	mov	r2, sl
 8001984:	3908      	subs	r1, #8
 8001986:	40da      	lsrs	r2, r3
 8001988:	408c      	lsls	r4, r1
 800198a:	4314      	orrs	r4, r2
 800198c:	4652      	mov	r2, sl
 800198e:	408a      	lsls	r2, r1
 8001990:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <__aeabi_ddiv+0x390>)
 8001992:	4458      	add	r0, fp
 8001994:	469b      	mov	fp, r3
 8001996:	4483      	add	fp, r0
 8001998:	2000      	movs	r0, #0
 800199a:	e6d5      	b.n	8001748 <__aeabi_ddiv+0x80>
 800199c:	464b      	mov	r3, r9
 800199e:	4323      	orrs	r3, r4
 80019a0:	4698      	mov	r8, r3
 80019a2:	d044      	beq.n	8001a2e <__aeabi_ddiv+0x366>
 80019a4:	2c00      	cmp	r4, #0
 80019a6:	d100      	bne.n	80019aa <__aeabi_ddiv+0x2e2>
 80019a8:	e0ce      	b.n	8001b48 <__aeabi_ddiv+0x480>
 80019aa:	0020      	movs	r0, r4
 80019ac:	f001 fa06 	bl	8002dbc <__clzsi2>
 80019b0:	0001      	movs	r1, r0
 80019b2:	0002      	movs	r2, r0
 80019b4:	390b      	subs	r1, #11
 80019b6:	231d      	movs	r3, #29
 80019b8:	1a5b      	subs	r3, r3, r1
 80019ba:	4649      	mov	r1, r9
 80019bc:	0010      	movs	r0, r2
 80019be:	40d9      	lsrs	r1, r3
 80019c0:	3808      	subs	r0, #8
 80019c2:	4084      	lsls	r4, r0
 80019c4:	000b      	movs	r3, r1
 80019c6:	464d      	mov	r5, r9
 80019c8:	4323      	orrs	r3, r4
 80019ca:	4698      	mov	r8, r3
 80019cc:	4085      	lsls	r5, r0
 80019ce:	4823      	ldr	r0, [pc, #140]	; (8001a5c <__aeabi_ddiv+0x394>)
 80019d0:	1a83      	subs	r3, r0, r2
 80019d2:	469b      	mov	fp, r3
 80019d4:	2300      	movs	r3, #0
 80019d6:	4699      	mov	r9, r3
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	e69a      	b.n	8001712 <__aeabi_ddiv+0x4a>
 80019dc:	464b      	mov	r3, r9
 80019de:	4323      	orrs	r3, r4
 80019e0:	4698      	mov	r8, r3
 80019e2:	d11d      	bne.n	8001a20 <__aeabi_ddiv+0x358>
 80019e4:	2308      	movs	r3, #8
 80019e6:	4699      	mov	r9, r3
 80019e8:	3b06      	subs	r3, #6
 80019ea:	2500      	movs	r5, #0
 80019ec:	4683      	mov	fp, r0
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	e68f      	b.n	8001712 <__aeabi_ddiv+0x4a>
 80019f2:	4652      	mov	r2, sl
 80019f4:	4322      	orrs	r2, r4
 80019f6:	d109      	bne.n	8001a0c <__aeabi_ddiv+0x344>
 80019f8:	2302      	movs	r3, #2
 80019fa:	4649      	mov	r1, r9
 80019fc:	4319      	orrs	r1, r3
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <__aeabi_ddiv+0x398>)
 8001a00:	4689      	mov	r9, r1
 8001a02:	469c      	mov	ip, r3
 8001a04:	2400      	movs	r4, #0
 8001a06:	2002      	movs	r0, #2
 8001a08:	44e3      	add	fp, ip
 8001a0a:	e69d      	b.n	8001748 <__aeabi_ddiv+0x80>
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	464a      	mov	r2, r9
 8001a10:	431a      	orrs	r2, r3
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <__aeabi_ddiv+0x398>)
 8001a14:	4691      	mov	r9, r2
 8001a16:	469c      	mov	ip, r3
 8001a18:	4652      	mov	r2, sl
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	44e3      	add	fp, ip
 8001a1e:	e693      	b.n	8001748 <__aeabi_ddiv+0x80>
 8001a20:	230c      	movs	r3, #12
 8001a22:	4699      	mov	r9, r3
 8001a24:	3b09      	subs	r3, #9
 8001a26:	46a0      	mov	r8, r4
 8001a28:	4683      	mov	fp, r0
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	e671      	b.n	8001712 <__aeabi_ddiv+0x4a>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	4699      	mov	r9, r3
 8001a32:	2300      	movs	r3, #0
 8001a34:	469b      	mov	fp, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	2500      	movs	r5, #0
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	e669      	b.n	8001712 <__aeabi_ddiv+0x4a>
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	000007ff 	.word	0x000007ff
 8001a44:	fffffc01 	.word	0xfffffc01
 8001a48:	08019d64 	.word	0x08019d64
 8001a4c:	000003ff 	.word	0x000003ff
 8001a50:	feffffff 	.word	0xfeffffff
 8001a54:	000007fe 	.word	0x000007fe
 8001a58:	000003f3 	.word	0x000003f3
 8001a5c:	fffffc0d 	.word	0xfffffc0d
 8001a60:	fffff801 	.word	0xfffff801
 8001a64:	4649      	mov	r1, r9
 8001a66:	2301      	movs	r3, #1
 8001a68:	4319      	orrs	r1, r3
 8001a6a:	4689      	mov	r9, r1
 8001a6c:	2400      	movs	r4, #0
 8001a6e:	2001      	movs	r0, #1
 8001a70:	e66a      	b.n	8001748 <__aeabi_ddiv+0x80>
 8001a72:	2300      	movs	r3, #0
 8001a74:	2480      	movs	r4, #128	; 0x80
 8001a76:	469a      	mov	sl, r3
 8001a78:	2500      	movs	r5, #0
 8001a7a:	4b8a      	ldr	r3, [pc, #552]	; (8001ca4 <__aeabi_ddiv+0x5dc>)
 8001a7c:	0324      	lsls	r4, r4, #12
 8001a7e:	e67a      	b.n	8001776 <__aeabi_ddiv+0xae>
 8001a80:	2501      	movs	r5, #1
 8001a82:	426d      	negs	r5, r5
 8001a84:	2301      	movs	r3, #1
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	2b38      	cmp	r3, #56	; 0x38
 8001a8a:	dd00      	ble.n	8001a8e <__aeabi_ddiv+0x3c6>
 8001a8c:	e670      	b.n	8001770 <__aeabi_ddiv+0xa8>
 8001a8e:	2b1f      	cmp	r3, #31
 8001a90:	dc00      	bgt.n	8001a94 <__aeabi_ddiv+0x3cc>
 8001a92:	e0bf      	b.n	8001c14 <__aeabi_ddiv+0x54c>
 8001a94:	211f      	movs	r1, #31
 8001a96:	4249      	negs	r1, r1
 8001a98:	1a8a      	subs	r2, r1, r2
 8001a9a:	4641      	mov	r1, r8
 8001a9c:	40d1      	lsrs	r1, r2
 8001a9e:	000a      	movs	r2, r1
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d004      	beq.n	8001aae <__aeabi_ddiv+0x3e6>
 8001aa4:	4641      	mov	r1, r8
 8001aa6:	4b80      	ldr	r3, [pc, #512]	; (8001ca8 <__aeabi_ddiv+0x5e0>)
 8001aa8:	445b      	add	r3, fp
 8001aaa:	4099      	lsls	r1, r3
 8001aac:	430d      	orrs	r5, r1
 8001aae:	1e6b      	subs	r3, r5, #1
 8001ab0:	419d      	sbcs	r5, r3
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	432a      	orrs	r2, r5
 8001ab6:	001d      	movs	r5, r3
 8001ab8:	2400      	movs	r4, #0
 8001aba:	4015      	ands	r5, r2
 8001abc:	4213      	tst	r3, r2
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_ddiv+0x3fa>
 8001ac0:	e0d4      	b.n	8001c6c <__aeabi_ddiv+0x5a4>
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4011      	ands	r1, r2
 8001ac8:	2904      	cmp	r1, #4
 8001aca:	d100      	bne.n	8001ace <__aeabi_ddiv+0x406>
 8001acc:	e0cb      	b.n	8001c66 <__aeabi_ddiv+0x59e>
 8001ace:	1d11      	adds	r1, r2, #4
 8001ad0:	4291      	cmp	r1, r2
 8001ad2:	4192      	sbcs	r2, r2
 8001ad4:	4252      	negs	r2, r2
 8001ad6:	189b      	adds	r3, r3, r2
 8001ad8:	000a      	movs	r2, r1
 8001ada:	0219      	lsls	r1, r3, #8
 8001adc:	d400      	bmi.n	8001ae0 <__aeabi_ddiv+0x418>
 8001ade:	e0c2      	b.n	8001c66 <__aeabi_ddiv+0x59e>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	2400      	movs	r4, #0
 8001ae4:	2500      	movs	r5, #0
 8001ae6:	e646      	b.n	8001776 <__aeabi_ddiv+0xae>
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	4641      	mov	r1, r8
 8001aec:	031b      	lsls	r3, r3, #12
 8001aee:	4219      	tst	r1, r3
 8001af0:	d008      	beq.n	8001b04 <__aeabi_ddiv+0x43c>
 8001af2:	421c      	tst	r4, r3
 8001af4:	d106      	bne.n	8001b04 <__aeabi_ddiv+0x43c>
 8001af6:	431c      	orrs	r4, r3
 8001af8:	0324      	lsls	r4, r4, #12
 8001afa:	46ba      	mov	sl, r7
 8001afc:	0015      	movs	r5, r2
 8001afe:	4b69      	ldr	r3, [pc, #420]	; (8001ca4 <__aeabi_ddiv+0x5dc>)
 8001b00:	0b24      	lsrs	r4, r4, #12
 8001b02:	e638      	b.n	8001776 <__aeabi_ddiv+0xae>
 8001b04:	2480      	movs	r4, #128	; 0x80
 8001b06:	4643      	mov	r3, r8
 8001b08:	0324      	lsls	r4, r4, #12
 8001b0a:	431c      	orrs	r4, r3
 8001b0c:	0324      	lsls	r4, r4, #12
 8001b0e:	46b2      	mov	sl, r6
 8001b10:	4b64      	ldr	r3, [pc, #400]	; (8001ca4 <__aeabi_ddiv+0x5dc>)
 8001b12:	0b24      	lsrs	r4, r4, #12
 8001b14:	e62f      	b.n	8001776 <__aeabi_ddiv+0xae>
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d100      	bne.n	8001b1c <__aeabi_ddiv+0x454>
 8001b1a:	e703      	b.n	8001924 <__aeabi_ddiv+0x25c>
 8001b1c:	19a6      	adds	r6, r4, r6
 8001b1e:	1e68      	subs	r0, r5, #1
 8001b20:	42a6      	cmp	r6, r4
 8001b22:	d200      	bcs.n	8001b26 <__aeabi_ddiv+0x45e>
 8001b24:	e08d      	b.n	8001c42 <__aeabi_ddiv+0x57a>
 8001b26:	428e      	cmp	r6, r1
 8001b28:	d200      	bcs.n	8001b2c <__aeabi_ddiv+0x464>
 8001b2a:	e0a3      	b.n	8001c74 <__aeabi_ddiv+0x5ac>
 8001b2c:	d100      	bne.n	8001b30 <__aeabi_ddiv+0x468>
 8001b2e:	e0b3      	b.n	8001c98 <__aeabi_ddiv+0x5d0>
 8001b30:	0005      	movs	r5, r0
 8001b32:	e6f5      	b.n	8001920 <__aeabi_ddiv+0x258>
 8001b34:	42aa      	cmp	r2, r5
 8001b36:	d900      	bls.n	8001b3a <__aeabi_ddiv+0x472>
 8001b38:	e639      	b.n	80017ae <__aeabi_ddiv+0xe6>
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	07de      	lsls	r6, r3, #31
 8001b3e:	0858      	lsrs	r0, r3, #1
 8001b40:	086b      	lsrs	r3, r5, #1
 8001b42:	431e      	orrs	r6, r3
 8001b44:	07ed      	lsls	r5, r5, #31
 8001b46:	e639      	b.n	80017bc <__aeabi_ddiv+0xf4>
 8001b48:	4648      	mov	r0, r9
 8001b4a:	f001 f937 	bl	8002dbc <__clzsi2>
 8001b4e:	0001      	movs	r1, r0
 8001b50:	0002      	movs	r2, r0
 8001b52:	3115      	adds	r1, #21
 8001b54:	3220      	adds	r2, #32
 8001b56:	291c      	cmp	r1, #28
 8001b58:	dc00      	bgt.n	8001b5c <__aeabi_ddiv+0x494>
 8001b5a:	e72c      	b.n	80019b6 <__aeabi_ddiv+0x2ee>
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	3808      	subs	r0, #8
 8001b60:	4083      	lsls	r3, r0
 8001b62:	2500      	movs	r5, #0
 8001b64:	4698      	mov	r8, r3
 8001b66:	e732      	b.n	80019ce <__aeabi_ddiv+0x306>
 8001b68:	f001 f928 	bl	8002dbc <__clzsi2>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	001a      	movs	r2, r3
 8001b70:	3215      	adds	r2, #21
 8001b72:	3020      	adds	r0, #32
 8001b74:	2a1c      	cmp	r2, #28
 8001b76:	dc00      	bgt.n	8001b7a <__aeabi_ddiv+0x4b2>
 8001b78:	e700      	b.n	800197c <__aeabi_ddiv+0x2b4>
 8001b7a:	4654      	mov	r4, sl
 8001b7c:	3b08      	subs	r3, #8
 8001b7e:	2200      	movs	r2, #0
 8001b80:	409c      	lsls	r4, r3
 8001b82:	e705      	b.n	8001990 <__aeabi_ddiv+0x2c8>
 8001b84:	1936      	adds	r6, r6, r4
 8001b86:	3b01      	subs	r3, #1
 8001b88:	42b4      	cmp	r4, r6
 8001b8a:	d900      	bls.n	8001b8e <__aeabi_ddiv+0x4c6>
 8001b8c:	e6a6      	b.n	80018dc <__aeabi_ddiv+0x214>
 8001b8e:	42b2      	cmp	r2, r6
 8001b90:	d800      	bhi.n	8001b94 <__aeabi_ddiv+0x4cc>
 8001b92:	e6a3      	b.n	80018dc <__aeabi_ddiv+0x214>
 8001b94:	1e83      	subs	r3, r0, #2
 8001b96:	1936      	adds	r6, r6, r4
 8001b98:	e6a0      	b.n	80018dc <__aeabi_ddiv+0x214>
 8001b9a:	1909      	adds	r1, r1, r4
 8001b9c:	3d01      	subs	r5, #1
 8001b9e:	428c      	cmp	r4, r1
 8001ba0:	d900      	bls.n	8001ba4 <__aeabi_ddiv+0x4dc>
 8001ba2:	e68d      	b.n	80018c0 <__aeabi_ddiv+0x1f8>
 8001ba4:	428a      	cmp	r2, r1
 8001ba6:	d800      	bhi.n	8001baa <__aeabi_ddiv+0x4e2>
 8001ba8:	e68a      	b.n	80018c0 <__aeabi_ddiv+0x1f8>
 8001baa:	1e85      	subs	r5, r0, #2
 8001bac:	1909      	adds	r1, r1, r4
 8001bae:	e687      	b.n	80018c0 <__aeabi_ddiv+0x1f8>
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	402b      	ands	r3, r5
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d100      	bne.n	8001bba <__aeabi_ddiv+0x4f2>
 8001bb8:	e6bc      	b.n	8001934 <__aeabi_ddiv+0x26c>
 8001bba:	2305      	movs	r3, #5
 8001bbc:	425b      	negs	r3, r3
 8001bbe:	42ab      	cmp	r3, r5
 8001bc0:	419b      	sbcs	r3, r3
 8001bc2:	3504      	adds	r5, #4
 8001bc4:	425b      	negs	r3, r3
 8001bc6:	08ed      	lsrs	r5, r5, #3
 8001bc8:	4498      	add	r8, r3
 8001bca:	e6b4      	b.n	8001936 <__aeabi_ddiv+0x26e>
 8001bcc:	42af      	cmp	r7, r5
 8001bce:	d900      	bls.n	8001bd2 <__aeabi_ddiv+0x50a>
 8001bd0:	e660      	b.n	8001894 <__aeabi_ddiv+0x1cc>
 8001bd2:	4282      	cmp	r2, r0
 8001bd4:	d804      	bhi.n	8001be0 <__aeabi_ddiv+0x518>
 8001bd6:	d000      	beq.n	8001bda <__aeabi_ddiv+0x512>
 8001bd8:	e65c      	b.n	8001894 <__aeabi_ddiv+0x1cc>
 8001bda:	42ae      	cmp	r6, r5
 8001bdc:	d800      	bhi.n	8001be0 <__aeabi_ddiv+0x518>
 8001bde:	e659      	b.n	8001894 <__aeabi_ddiv+0x1cc>
 8001be0:	2302      	movs	r3, #2
 8001be2:	425b      	negs	r3, r3
 8001be4:	469c      	mov	ip, r3
 8001be6:	9b00      	ldr	r3, [sp, #0]
 8001be8:	44e0      	add	r8, ip
 8001bea:	469c      	mov	ip, r3
 8001bec:	4465      	add	r5, ip
 8001bee:	429d      	cmp	r5, r3
 8001bf0:	419b      	sbcs	r3, r3
 8001bf2:	425b      	negs	r3, r3
 8001bf4:	191b      	adds	r3, r3, r4
 8001bf6:	18c0      	adds	r0, r0, r3
 8001bf8:	e64d      	b.n	8001896 <__aeabi_ddiv+0x1ce>
 8001bfa:	428a      	cmp	r2, r1
 8001bfc:	d800      	bhi.n	8001c00 <__aeabi_ddiv+0x538>
 8001bfe:	e60e      	b.n	800181e <__aeabi_ddiv+0x156>
 8001c00:	1e83      	subs	r3, r0, #2
 8001c02:	1909      	adds	r1, r1, r4
 8001c04:	e60b      	b.n	800181e <__aeabi_ddiv+0x156>
 8001c06:	428a      	cmp	r2, r1
 8001c08:	d800      	bhi.n	8001c0c <__aeabi_ddiv+0x544>
 8001c0a:	e5f4      	b.n	80017f6 <__aeabi_ddiv+0x12e>
 8001c0c:	1e83      	subs	r3, r0, #2
 8001c0e:	4698      	mov	r8, r3
 8001c10:	1909      	adds	r1, r1, r4
 8001c12:	e5f0      	b.n	80017f6 <__aeabi_ddiv+0x12e>
 8001c14:	4925      	ldr	r1, [pc, #148]	; (8001cac <__aeabi_ddiv+0x5e4>)
 8001c16:	0028      	movs	r0, r5
 8001c18:	4459      	add	r1, fp
 8001c1a:	408d      	lsls	r5, r1
 8001c1c:	4642      	mov	r2, r8
 8001c1e:	408a      	lsls	r2, r1
 8001c20:	1e69      	subs	r1, r5, #1
 8001c22:	418d      	sbcs	r5, r1
 8001c24:	4641      	mov	r1, r8
 8001c26:	40d8      	lsrs	r0, r3
 8001c28:	40d9      	lsrs	r1, r3
 8001c2a:	4302      	orrs	r2, r0
 8001c2c:	432a      	orrs	r2, r5
 8001c2e:	000b      	movs	r3, r1
 8001c30:	0751      	lsls	r1, r2, #29
 8001c32:	d100      	bne.n	8001c36 <__aeabi_ddiv+0x56e>
 8001c34:	e751      	b.n	8001ada <__aeabi_ddiv+0x412>
 8001c36:	210f      	movs	r1, #15
 8001c38:	4011      	ands	r1, r2
 8001c3a:	2904      	cmp	r1, #4
 8001c3c:	d000      	beq.n	8001c40 <__aeabi_ddiv+0x578>
 8001c3e:	e746      	b.n	8001ace <__aeabi_ddiv+0x406>
 8001c40:	e74b      	b.n	8001ada <__aeabi_ddiv+0x412>
 8001c42:	0005      	movs	r5, r0
 8001c44:	428e      	cmp	r6, r1
 8001c46:	d000      	beq.n	8001c4a <__aeabi_ddiv+0x582>
 8001c48:	e66a      	b.n	8001920 <__aeabi_ddiv+0x258>
 8001c4a:	9a00      	ldr	r2, [sp, #0]
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d000      	beq.n	8001c52 <__aeabi_ddiv+0x58a>
 8001c50:	e666      	b.n	8001920 <__aeabi_ddiv+0x258>
 8001c52:	e667      	b.n	8001924 <__aeabi_ddiv+0x25c>
 8001c54:	4a16      	ldr	r2, [pc, #88]	; (8001cb0 <__aeabi_ddiv+0x5e8>)
 8001c56:	445a      	add	r2, fp
 8001c58:	2a00      	cmp	r2, #0
 8001c5a:	dc00      	bgt.n	8001c5e <__aeabi_ddiv+0x596>
 8001c5c:	e710      	b.n	8001a80 <__aeabi_ddiv+0x3b8>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	2500      	movs	r5, #0
 8001c62:	4498      	add	r8, r3
 8001c64:	e667      	b.n	8001936 <__aeabi_ddiv+0x26e>
 8001c66:	075d      	lsls	r5, r3, #29
 8001c68:	025b      	lsls	r3, r3, #9
 8001c6a:	0b1c      	lsrs	r4, r3, #12
 8001c6c:	08d2      	lsrs	r2, r2, #3
 8001c6e:	2300      	movs	r3, #0
 8001c70:	4315      	orrs	r5, r2
 8001c72:	e580      	b.n	8001776 <__aeabi_ddiv+0xae>
 8001c74:	9800      	ldr	r0, [sp, #0]
 8001c76:	3d02      	subs	r5, #2
 8001c78:	0042      	lsls	r2, r0, #1
 8001c7a:	4282      	cmp	r2, r0
 8001c7c:	41bf      	sbcs	r7, r7
 8001c7e:	427f      	negs	r7, r7
 8001c80:	193c      	adds	r4, r7, r4
 8001c82:	1936      	adds	r6, r6, r4
 8001c84:	9200      	str	r2, [sp, #0]
 8001c86:	e7dd      	b.n	8001c44 <__aeabi_ddiv+0x57c>
 8001c88:	2480      	movs	r4, #128	; 0x80
 8001c8a:	4643      	mov	r3, r8
 8001c8c:	0324      	lsls	r4, r4, #12
 8001c8e:	431c      	orrs	r4, r3
 8001c90:	0324      	lsls	r4, r4, #12
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__aeabi_ddiv+0x5dc>)
 8001c94:	0b24      	lsrs	r4, r4, #12
 8001c96:	e56e      	b.n	8001776 <__aeabi_ddiv+0xae>
 8001c98:	9a00      	ldr	r2, [sp, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d3ea      	bcc.n	8001c74 <__aeabi_ddiv+0x5ac>
 8001c9e:	0005      	movs	r5, r0
 8001ca0:	e7d3      	b.n	8001c4a <__aeabi_ddiv+0x582>
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	0000043e 	.word	0x0000043e
 8001cac:	0000041e 	.word	0x0000041e
 8001cb0:	000003ff 	.word	0x000003ff

08001cb4 <__eqdf2>:
 8001cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb6:	464e      	mov	r6, r9
 8001cb8:	4645      	mov	r5, r8
 8001cba:	46de      	mov	lr, fp
 8001cbc:	4657      	mov	r7, sl
 8001cbe:	4690      	mov	r8, r2
 8001cc0:	b5e0      	push	{r5, r6, r7, lr}
 8001cc2:	0017      	movs	r7, r2
 8001cc4:	031a      	lsls	r2, r3, #12
 8001cc6:	0b12      	lsrs	r2, r2, #12
 8001cc8:	0005      	movs	r5, r0
 8001cca:	4684      	mov	ip, r0
 8001ccc:	4819      	ldr	r0, [pc, #100]	; (8001d34 <__eqdf2+0x80>)
 8001cce:	030e      	lsls	r6, r1, #12
 8001cd0:	004c      	lsls	r4, r1, #1
 8001cd2:	4691      	mov	r9, r2
 8001cd4:	005a      	lsls	r2, r3, #1
 8001cd6:	0fdb      	lsrs	r3, r3, #31
 8001cd8:	469b      	mov	fp, r3
 8001cda:	0b36      	lsrs	r6, r6, #12
 8001cdc:	0d64      	lsrs	r4, r4, #21
 8001cde:	0fc9      	lsrs	r1, r1, #31
 8001ce0:	0d52      	lsrs	r2, r2, #21
 8001ce2:	4284      	cmp	r4, r0
 8001ce4:	d019      	beq.n	8001d1a <__eqdf2+0x66>
 8001ce6:	4282      	cmp	r2, r0
 8001ce8:	d010      	beq.n	8001d0c <__eqdf2+0x58>
 8001cea:	2001      	movs	r0, #1
 8001cec:	4294      	cmp	r4, r2
 8001cee:	d10e      	bne.n	8001d0e <__eqdf2+0x5a>
 8001cf0:	454e      	cmp	r6, r9
 8001cf2:	d10c      	bne.n	8001d0e <__eqdf2+0x5a>
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	45c4      	cmp	ip, r8
 8001cf8:	d109      	bne.n	8001d0e <__eqdf2+0x5a>
 8001cfa:	4559      	cmp	r1, fp
 8001cfc:	d017      	beq.n	8001d2e <__eqdf2+0x7a>
 8001cfe:	2c00      	cmp	r4, #0
 8001d00:	d105      	bne.n	8001d0e <__eqdf2+0x5a>
 8001d02:	0030      	movs	r0, r6
 8001d04:	4328      	orrs	r0, r5
 8001d06:	1e43      	subs	r3, r0, #1
 8001d08:	4198      	sbcs	r0, r3
 8001d0a:	e000      	b.n	8001d0e <__eqdf2+0x5a>
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d10:	46bb      	mov	fp, r7
 8001d12:	46b2      	mov	sl, r6
 8001d14:	46a9      	mov	r9, r5
 8001d16:	46a0      	mov	r8, r4
 8001d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1a:	0033      	movs	r3, r6
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	432b      	orrs	r3, r5
 8001d20:	d1f5      	bne.n	8001d0e <__eqdf2+0x5a>
 8001d22:	42a2      	cmp	r2, r4
 8001d24:	d1f3      	bne.n	8001d0e <__eqdf2+0x5a>
 8001d26:	464b      	mov	r3, r9
 8001d28:	433b      	orrs	r3, r7
 8001d2a:	d1f0      	bne.n	8001d0e <__eqdf2+0x5a>
 8001d2c:	e7e2      	b.n	8001cf4 <__eqdf2+0x40>
 8001d2e:	2000      	movs	r0, #0
 8001d30:	e7ed      	b.n	8001d0e <__eqdf2+0x5a>
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	000007ff 	.word	0x000007ff

08001d38 <__gedf2>:
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3a:	4647      	mov	r7, r8
 8001d3c:	46ce      	mov	lr, r9
 8001d3e:	0004      	movs	r4, r0
 8001d40:	0018      	movs	r0, r3
 8001d42:	0016      	movs	r6, r2
 8001d44:	031b      	lsls	r3, r3, #12
 8001d46:	0b1b      	lsrs	r3, r3, #12
 8001d48:	4d2d      	ldr	r5, [pc, #180]	; (8001e00 <__gedf2+0xc8>)
 8001d4a:	004a      	lsls	r2, r1, #1
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	0043      	lsls	r3, r0, #1
 8001d52:	030f      	lsls	r7, r1, #12
 8001d54:	46a4      	mov	ip, r4
 8001d56:	46b0      	mov	r8, r6
 8001d58:	0b3f      	lsrs	r7, r7, #12
 8001d5a:	0d52      	lsrs	r2, r2, #21
 8001d5c:	0fc9      	lsrs	r1, r1, #31
 8001d5e:	0d5b      	lsrs	r3, r3, #21
 8001d60:	0fc0      	lsrs	r0, r0, #31
 8001d62:	42aa      	cmp	r2, r5
 8001d64:	d021      	beq.n	8001daa <__gedf2+0x72>
 8001d66:	42ab      	cmp	r3, r5
 8001d68:	d013      	beq.n	8001d92 <__gedf2+0x5a>
 8001d6a:	2a00      	cmp	r2, #0
 8001d6c:	d122      	bne.n	8001db4 <__gedf2+0x7c>
 8001d6e:	433c      	orrs	r4, r7
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <__gedf2+0x42>
 8001d74:	464d      	mov	r5, r9
 8001d76:	432e      	orrs	r6, r5
 8001d78:	d022      	beq.n	8001dc0 <__gedf2+0x88>
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	d010      	beq.n	8001da0 <__gedf2+0x68>
 8001d7e:	4281      	cmp	r1, r0
 8001d80:	d022      	beq.n	8001dc8 <__gedf2+0x90>
 8001d82:	2002      	movs	r0, #2
 8001d84:	3901      	subs	r1, #1
 8001d86:	4008      	ands	r0, r1
 8001d88:	3801      	subs	r0, #1
 8001d8a:	bcc0      	pop	{r6, r7}
 8001d8c:	46b9      	mov	r9, r7
 8001d8e:	46b0      	mov	r8, r6
 8001d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d92:	464d      	mov	r5, r9
 8001d94:	432e      	orrs	r6, r5
 8001d96:	d129      	bne.n	8001dec <__gedf2+0xb4>
 8001d98:	2a00      	cmp	r2, #0
 8001d9a:	d1f0      	bne.n	8001d7e <__gedf2+0x46>
 8001d9c:	433c      	orrs	r4, r7
 8001d9e:	d1ee      	bne.n	8001d7e <__gedf2+0x46>
 8001da0:	2800      	cmp	r0, #0
 8001da2:	d1f2      	bne.n	8001d8a <__gedf2+0x52>
 8001da4:	2001      	movs	r0, #1
 8001da6:	4240      	negs	r0, r0
 8001da8:	e7ef      	b.n	8001d8a <__gedf2+0x52>
 8001daa:	003d      	movs	r5, r7
 8001dac:	4325      	orrs	r5, r4
 8001dae:	d11d      	bne.n	8001dec <__gedf2+0xb4>
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d0ee      	beq.n	8001d92 <__gedf2+0x5a>
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1e2      	bne.n	8001d7e <__gedf2+0x46>
 8001db8:	464c      	mov	r4, r9
 8001dba:	4326      	orrs	r6, r4
 8001dbc:	d1df      	bne.n	8001d7e <__gedf2+0x46>
 8001dbe:	e7e0      	b.n	8001d82 <__gedf2+0x4a>
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	2c00      	cmp	r4, #0
 8001dc4:	d0e1      	beq.n	8001d8a <__gedf2+0x52>
 8001dc6:	e7dc      	b.n	8001d82 <__gedf2+0x4a>
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dc0a      	bgt.n	8001de2 <__gedf2+0xaa>
 8001dcc:	dbe8      	blt.n	8001da0 <__gedf2+0x68>
 8001dce:	454f      	cmp	r7, r9
 8001dd0:	d8d7      	bhi.n	8001d82 <__gedf2+0x4a>
 8001dd2:	d00e      	beq.n	8001df2 <__gedf2+0xba>
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	454f      	cmp	r7, r9
 8001dd8:	d2d7      	bcs.n	8001d8a <__gedf2+0x52>
 8001dda:	2900      	cmp	r1, #0
 8001ddc:	d0e2      	beq.n	8001da4 <__gedf2+0x6c>
 8001dde:	0008      	movs	r0, r1
 8001de0:	e7d3      	b.n	8001d8a <__gedf2+0x52>
 8001de2:	4243      	negs	r3, r0
 8001de4:	4158      	adcs	r0, r3
 8001de6:	0040      	lsls	r0, r0, #1
 8001de8:	3801      	subs	r0, #1
 8001dea:	e7ce      	b.n	8001d8a <__gedf2+0x52>
 8001dec:	2002      	movs	r0, #2
 8001dee:	4240      	negs	r0, r0
 8001df0:	e7cb      	b.n	8001d8a <__gedf2+0x52>
 8001df2:	45c4      	cmp	ip, r8
 8001df4:	d8c5      	bhi.n	8001d82 <__gedf2+0x4a>
 8001df6:	2000      	movs	r0, #0
 8001df8:	45c4      	cmp	ip, r8
 8001dfa:	d2c6      	bcs.n	8001d8a <__gedf2+0x52>
 8001dfc:	e7ed      	b.n	8001dda <__gedf2+0xa2>
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	000007ff 	.word	0x000007ff

08001e04 <__ledf2>:
 8001e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e06:	4647      	mov	r7, r8
 8001e08:	46ce      	mov	lr, r9
 8001e0a:	0004      	movs	r4, r0
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	0016      	movs	r6, r2
 8001e10:	031b      	lsls	r3, r3, #12
 8001e12:	0b1b      	lsrs	r3, r3, #12
 8001e14:	4d2c      	ldr	r5, [pc, #176]	; (8001ec8 <__ledf2+0xc4>)
 8001e16:	004a      	lsls	r2, r1, #1
 8001e18:	4699      	mov	r9, r3
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	0043      	lsls	r3, r0, #1
 8001e1e:	030f      	lsls	r7, r1, #12
 8001e20:	46a4      	mov	ip, r4
 8001e22:	46b0      	mov	r8, r6
 8001e24:	0b3f      	lsrs	r7, r7, #12
 8001e26:	0d52      	lsrs	r2, r2, #21
 8001e28:	0fc9      	lsrs	r1, r1, #31
 8001e2a:	0d5b      	lsrs	r3, r3, #21
 8001e2c:	0fc0      	lsrs	r0, r0, #31
 8001e2e:	42aa      	cmp	r2, r5
 8001e30:	d00d      	beq.n	8001e4e <__ledf2+0x4a>
 8001e32:	42ab      	cmp	r3, r5
 8001e34:	d010      	beq.n	8001e58 <__ledf2+0x54>
 8001e36:	2a00      	cmp	r2, #0
 8001e38:	d127      	bne.n	8001e8a <__ledf2+0x86>
 8001e3a:	433c      	orrs	r4, r7
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d111      	bne.n	8001e64 <__ledf2+0x60>
 8001e40:	464d      	mov	r5, r9
 8001e42:	432e      	orrs	r6, r5
 8001e44:	d10e      	bne.n	8001e64 <__ledf2+0x60>
 8001e46:	2000      	movs	r0, #0
 8001e48:	2c00      	cmp	r4, #0
 8001e4a:	d015      	beq.n	8001e78 <__ledf2+0x74>
 8001e4c:	e00e      	b.n	8001e6c <__ledf2+0x68>
 8001e4e:	003d      	movs	r5, r7
 8001e50:	4325      	orrs	r5, r4
 8001e52:	d110      	bne.n	8001e76 <__ledf2+0x72>
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d118      	bne.n	8001e8a <__ledf2+0x86>
 8001e58:	464d      	mov	r5, r9
 8001e5a:	432e      	orrs	r6, r5
 8001e5c:	d10b      	bne.n	8001e76 <__ledf2+0x72>
 8001e5e:	2a00      	cmp	r2, #0
 8001e60:	d102      	bne.n	8001e68 <__ledf2+0x64>
 8001e62:	433c      	orrs	r4, r7
 8001e64:	2c00      	cmp	r4, #0
 8001e66:	d00b      	beq.n	8001e80 <__ledf2+0x7c>
 8001e68:	4281      	cmp	r1, r0
 8001e6a:	d014      	beq.n	8001e96 <__ledf2+0x92>
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	3901      	subs	r1, #1
 8001e70:	4008      	ands	r0, r1
 8001e72:	3801      	subs	r0, #1
 8001e74:	e000      	b.n	8001e78 <__ledf2+0x74>
 8001e76:	2002      	movs	r0, #2
 8001e78:	bcc0      	pop	{r6, r7}
 8001e7a:	46b9      	mov	r9, r7
 8001e7c:	46b0      	mov	r8, r6
 8001e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e80:	2800      	cmp	r0, #0
 8001e82:	d1f9      	bne.n	8001e78 <__ledf2+0x74>
 8001e84:	2001      	movs	r0, #1
 8001e86:	4240      	negs	r0, r0
 8001e88:	e7f6      	b.n	8001e78 <__ledf2+0x74>
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1ec      	bne.n	8001e68 <__ledf2+0x64>
 8001e8e:	464c      	mov	r4, r9
 8001e90:	4326      	orrs	r6, r4
 8001e92:	d1e9      	bne.n	8001e68 <__ledf2+0x64>
 8001e94:	e7ea      	b.n	8001e6c <__ledf2+0x68>
 8001e96:	429a      	cmp	r2, r3
 8001e98:	dd04      	ble.n	8001ea4 <__ledf2+0xa0>
 8001e9a:	4243      	negs	r3, r0
 8001e9c:	4158      	adcs	r0, r3
 8001e9e:	0040      	lsls	r0, r0, #1
 8001ea0:	3801      	subs	r0, #1
 8001ea2:	e7e9      	b.n	8001e78 <__ledf2+0x74>
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dbeb      	blt.n	8001e80 <__ledf2+0x7c>
 8001ea8:	454f      	cmp	r7, r9
 8001eaa:	d8df      	bhi.n	8001e6c <__ledf2+0x68>
 8001eac:	d006      	beq.n	8001ebc <__ledf2+0xb8>
 8001eae:	2000      	movs	r0, #0
 8001eb0:	454f      	cmp	r7, r9
 8001eb2:	d2e1      	bcs.n	8001e78 <__ledf2+0x74>
 8001eb4:	2900      	cmp	r1, #0
 8001eb6:	d0e5      	beq.n	8001e84 <__ledf2+0x80>
 8001eb8:	0008      	movs	r0, r1
 8001eba:	e7dd      	b.n	8001e78 <__ledf2+0x74>
 8001ebc:	45c4      	cmp	ip, r8
 8001ebe:	d8d5      	bhi.n	8001e6c <__ledf2+0x68>
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	45c4      	cmp	ip, r8
 8001ec4:	d2d8      	bcs.n	8001e78 <__ledf2+0x74>
 8001ec6:	e7f5      	b.n	8001eb4 <__ledf2+0xb0>
 8001ec8:	000007ff 	.word	0x000007ff

08001ecc <__aeabi_dmul>:
 8001ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ece:	4657      	mov	r7, sl
 8001ed0:	464e      	mov	r6, r9
 8001ed2:	4645      	mov	r5, r8
 8001ed4:	46de      	mov	lr, fp
 8001ed6:	b5e0      	push	{r5, r6, r7, lr}
 8001ed8:	4698      	mov	r8, r3
 8001eda:	030c      	lsls	r4, r1, #12
 8001edc:	004b      	lsls	r3, r1, #1
 8001ede:	0006      	movs	r6, r0
 8001ee0:	4692      	mov	sl, r2
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	0b24      	lsrs	r4, r4, #12
 8001ee6:	0d5b      	lsrs	r3, r3, #21
 8001ee8:	0fcf      	lsrs	r7, r1, #31
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_dmul+0x24>
 8001eee:	e15c      	b.n	80021aa <__aeabi_dmul+0x2de>
 8001ef0:	4ad9      	ldr	r2, [pc, #868]	; (8002258 <__aeabi_dmul+0x38c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0x2c>
 8001ef6:	e175      	b.n	80021e4 <__aeabi_dmul+0x318>
 8001ef8:	0f42      	lsrs	r2, r0, #29
 8001efa:	00e4      	lsls	r4, r4, #3
 8001efc:	4314      	orrs	r4, r2
 8001efe:	2280      	movs	r2, #128	; 0x80
 8001f00:	0412      	lsls	r2, r2, #16
 8001f02:	4314      	orrs	r4, r2
 8001f04:	4ad5      	ldr	r2, [pc, #852]	; (800225c <__aeabi_dmul+0x390>)
 8001f06:	00c5      	lsls	r5, r0, #3
 8001f08:	4694      	mov	ip, r2
 8001f0a:	4463      	add	r3, ip
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	4699      	mov	r9, r3
 8001f12:	469b      	mov	fp, r3
 8001f14:	4643      	mov	r3, r8
 8001f16:	4642      	mov	r2, r8
 8001f18:	031e      	lsls	r6, r3, #12
 8001f1a:	0fd2      	lsrs	r2, r2, #31
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4650      	mov	r0, sl
 8001f20:	4690      	mov	r8, r2
 8001f22:	0b36      	lsrs	r6, r6, #12
 8001f24:	0d5b      	lsrs	r3, r3, #21
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dmul+0x5e>
 8001f28:	e120      	b.n	800216c <__aeabi_dmul+0x2a0>
 8001f2a:	4acb      	ldr	r2, [pc, #812]	; (8002258 <__aeabi_dmul+0x38c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d100      	bne.n	8001f32 <__aeabi_dmul+0x66>
 8001f30:	e162      	b.n	80021f8 <__aeabi_dmul+0x32c>
 8001f32:	49ca      	ldr	r1, [pc, #808]	; (800225c <__aeabi_dmul+0x390>)
 8001f34:	0f42      	lsrs	r2, r0, #29
 8001f36:	468c      	mov	ip, r1
 8001f38:	9900      	ldr	r1, [sp, #0]
 8001f3a:	4463      	add	r3, ip
 8001f3c:	00f6      	lsls	r6, r6, #3
 8001f3e:	468c      	mov	ip, r1
 8001f40:	4316      	orrs	r6, r2
 8001f42:	2280      	movs	r2, #128	; 0x80
 8001f44:	449c      	add	ip, r3
 8001f46:	0412      	lsls	r2, r2, #16
 8001f48:	4663      	mov	r3, ip
 8001f4a:	4316      	orrs	r6, r2
 8001f4c:	00c2      	lsls	r2, r0, #3
 8001f4e:	2000      	movs	r0, #0
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	9900      	ldr	r1, [sp, #0]
 8001f54:	4643      	mov	r3, r8
 8001f56:	3101      	adds	r1, #1
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4649      	mov	r1, r9
 8001f5c:	407b      	eors	r3, r7
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	290f      	cmp	r1, #15
 8001f62:	d826      	bhi.n	8001fb2 <__aeabi_dmul+0xe6>
 8001f64:	4bbe      	ldr	r3, [pc, #760]	; (8002260 <__aeabi_dmul+0x394>)
 8001f66:	0089      	lsls	r1, r1, #2
 8001f68:	5859      	ldr	r1, [r3, r1]
 8001f6a:	468f      	mov	pc, r1
 8001f6c:	4643      	mov	r3, r8
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	0034      	movs	r4, r6
 8001f72:	0015      	movs	r5, r2
 8001f74:	4683      	mov	fp, r0
 8001f76:	465b      	mov	r3, fp
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d016      	beq.n	8001faa <__aeabi_dmul+0xde>
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d100      	bne.n	8001f82 <__aeabi_dmul+0xb6>
 8001f80:	e203      	b.n	800238a <__aeabi_dmul+0x4be>
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d000      	beq.n	8001f88 <__aeabi_dmul+0xbc>
 8001f86:	e0cd      	b.n	8002124 <__aeabi_dmul+0x258>
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	2500      	movs	r5, #0
 8001f8e:	9b01      	ldr	r3, [sp, #4]
 8001f90:	0512      	lsls	r2, r2, #20
 8001f92:	4322      	orrs	r2, r4
 8001f94:	07db      	lsls	r3, r3, #31
 8001f96:	431a      	orrs	r2, r3
 8001f98:	0028      	movs	r0, r5
 8001f9a:	0011      	movs	r1, r2
 8001f9c:	b007      	add	sp, #28
 8001f9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001fa0:	46bb      	mov	fp, r7
 8001fa2:	46b2      	mov	sl, r6
 8001fa4:	46a9      	mov	r9, r5
 8001fa6:	46a0      	mov	r8, r4
 8001fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001faa:	2400      	movs	r4, #0
 8001fac:	2500      	movs	r5, #0
 8001fae:	4aaa      	ldr	r2, [pc, #680]	; (8002258 <__aeabi_dmul+0x38c>)
 8001fb0:	e7ed      	b.n	8001f8e <__aeabi_dmul+0xc2>
 8001fb2:	0c28      	lsrs	r0, r5, #16
 8001fb4:	042d      	lsls	r5, r5, #16
 8001fb6:	0c2d      	lsrs	r5, r5, #16
 8001fb8:	002b      	movs	r3, r5
 8001fba:	0c11      	lsrs	r1, r2, #16
 8001fbc:	0412      	lsls	r2, r2, #16
 8001fbe:	0c12      	lsrs	r2, r2, #16
 8001fc0:	4353      	muls	r3, r2
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	0013      	movs	r3, r2
 8001fc6:	002f      	movs	r7, r5
 8001fc8:	4343      	muls	r3, r0
 8001fca:	4699      	mov	r9, r3
 8001fcc:	434f      	muls	r7, r1
 8001fce:	444f      	add	r7, r9
 8001fd0:	46bb      	mov	fp, r7
 8001fd2:	4647      	mov	r7, r8
 8001fd4:	000b      	movs	r3, r1
 8001fd6:	0c3f      	lsrs	r7, r7, #16
 8001fd8:	46ba      	mov	sl, r7
 8001fda:	4343      	muls	r3, r0
 8001fdc:	44da      	add	sl, fp
 8001fde:	9302      	str	r3, [sp, #8]
 8001fe0:	45d1      	cmp	r9, sl
 8001fe2:	d904      	bls.n	8001fee <__aeabi_dmul+0x122>
 8001fe4:	2780      	movs	r7, #128	; 0x80
 8001fe6:	027f      	lsls	r7, r7, #9
 8001fe8:	46b9      	mov	r9, r7
 8001fea:	444b      	add	r3, r9
 8001fec:	9302      	str	r3, [sp, #8]
 8001fee:	4653      	mov	r3, sl
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	469b      	mov	fp, r3
 8001ff4:	4653      	mov	r3, sl
 8001ff6:	041f      	lsls	r7, r3, #16
 8001ff8:	4643      	mov	r3, r8
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	0c1b      	lsrs	r3, r3, #16
 8001ffe:	4698      	mov	r8, r3
 8002000:	003b      	movs	r3, r7
 8002002:	4443      	add	r3, r8
 8002004:	9304      	str	r3, [sp, #16]
 8002006:	0c33      	lsrs	r3, r6, #16
 8002008:	0436      	lsls	r6, r6, #16
 800200a:	0c36      	lsrs	r6, r6, #16
 800200c:	4698      	mov	r8, r3
 800200e:	0033      	movs	r3, r6
 8002010:	4343      	muls	r3, r0
 8002012:	4699      	mov	r9, r3
 8002014:	4643      	mov	r3, r8
 8002016:	4343      	muls	r3, r0
 8002018:	002f      	movs	r7, r5
 800201a:	469a      	mov	sl, r3
 800201c:	4643      	mov	r3, r8
 800201e:	4377      	muls	r7, r6
 8002020:	435d      	muls	r5, r3
 8002022:	0c38      	lsrs	r0, r7, #16
 8002024:	444d      	add	r5, r9
 8002026:	1945      	adds	r5, r0, r5
 8002028:	45a9      	cmp	r9, r5
 800202a:	d903      	bls.n	8002034 <__aeabi_dmul+0x168>
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	025b      	lsls	r3, r3, #9
 8002030:	4699      	mov	r9, r3
 8002032:	44ca      	add	sl, r9
 8002034:	043f      	lsls	r7, r7, #16
 8002036:	0c28      	lsrs	r0, r5, #16
 8002038:	0c3f      	lsrs	r7, r7, #16
 800203a:	042d      	lsls	r5, r5, #16
 800203c:	19ed      	adds	r5, r5, r7
 800203e:	0c27      	lsrs	r7, r4, #16
 8002040:	0424      	lsls	r4, r4, #16
 8002042:	0c24      	lsrs	r4, r4, #16
 8002044:	0003      	movs	r3, r0
 8002046:	0020      	movs	r0, r4
 8002048:	4350      	muls	r0, r2
 800204a:	437a      	muls	r2, r7
 800204c:	4691      	mov	r9, r2
 800204e:	003a      	movs	r2, r7
 8002050:	4453      	add	r3, sl
 8002052:	9305      	str	r3, [sp, #20]
 8002054:	0c03      	lsrs	r3, r0, #16
 8002056:	469a      	mov	sl, r3
 8002058:	434a      	muls	r2, r1
 800205a:	4361      	muls	r1, r4
 800205c:	4449      	add	r1, r9
 800205e:	4451      	add	r1, sl
 8002060:	44ab      	add	fp, r5
 8002062:	4589      	cmp	r9, r1
 8002064:	d903      	bls.n	800206e <__aeabi_dmul+0x1a2>
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	025b      	lsls	r3, r3, #9
 800206a:	4699      	mov	r9, r3
 800206c:	444a      	add	r2, r9
 800206e:	0400      	lsls	r0, r0, #16
 8002070:	0c0b      	lsrs	r3, r1, #16
 8002072:	0c00      	lsrs	r0, r0, #16
 8002074:	0409      	lsls	r1, r1, #16
 8002076:	1809      	adds	r1, r1, r0
 8002078:	0020      	movs	r0, r4
 800207a:	4699      	mov	r9, r3
 800207c:	4643      	mov	r3, r8
 800207e:	4370      	muls	r0, r6
 8002080:	435c      	muls	r4, r3
 8002082:	437e      	muls	r6, r7
 8002084:	435f      	muls	r7, r3
 8002086:	0c03      	lsrs	r3, r0, #16
 8002088:	4698      	mov	r8, r3
 800208a:	19a4      	adds	r4, r4, r6
 800208c:	4444      	add	r4, r8
 800208e:	444a      	add	r2, r9
 8002090:	9703      	str	r7, [sp, #12]
 8002092:	42a6      	cmp	r6, r4
 8002094:	d904      	bls.n	80020a0 <__aeabi_dmul+0x1d4>
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	4698      	mov	r8, r3
 800209c:	4447      	add	r7, r8
 800209e:	9703      	str	r7, [sp, #12]
 80020a0:	0423      	lsls	r3, r4, #16
 80020a2:	9e02      	ldr	r6, [sp, #8]
 80020a4:	469a      	mov	sl, r3
 80020a6:	9b05      	ldr	r3, [sp, #20]
 80020a8:	445e      	add	r6, fp
 80020aa:	4698      	mov	r8, r3
 80020ac:	42ae      	cmp	r6, r5
 80020ae:	41ad      	sbcs	r5, r5
 80020b0:	1876      	adds	r6, r6, r1
 80020b2:	428e      	cmp	r6, r1
 80020b4:	4189      	sbcs	r1, r1
 80020b6:	0400      	lsls	r0, r0, #16
 80020b8:	0c00      	lsrs	r0, r0, #16
 80020ba:	4450      	add	r0, sl
 80020bc:	4440      	add	r0, r8
 80020be:	426d      	negs	r5, r5
 80020c0:	1947      	adds	r7, r0, r5
 80020c2:	46b8      	mov	r8, r7
 80020c4:	4693      	mov	fp, r2
 80020c6:	4249      	negs	r1, r1
 80020c8:	4689      	mov	r9, r1
 80020ca:	44c3      	add	fp, r8
 80020cc:	44d9      	add	r9, fp
 80020ce:	4298      	cmp	r0, r3
 80020d0:	4180      	sbcs	r0, r0
 80020d2:	45a8      	cmp	r8, r5
 80020d4:	41ad      	sbcs	r5, r5
 80020d6:	4593      	cmp	fp, r2
 80020d8:	4192      	sbcs	r2, r2
 80020da:	4589      	cmp	r9, r1
 80020dc:	4189      	sbcs	r1, r1
 80020de:	426d      	negs	r5, r5
 80020e0:	4240      	negs	r0, r0
 80020e2:	4328      	orrs	r0, r5
 80020e4:	0c24      	lsrs	r4, r4, #16
 80020e6:	4252      	negs	r2, r2
 80020e8:	4249      	negs	r1, r1
 80020ea:	430a      	orrs	r2, r1
 80020ec:	9b03      	ldr	r3, [sp, #12]
 80020ee:	1900      	adds	r0, r0, r4
 80020f0:	1880      	adds	r0, r0, r2
 80020f2:	18c7      	adds	r7, r0, r3
 80020f4:	464b      	mov	r3, r9
 80020f6:	0ddc      	lsrs	r4, r3, #23
 80020f8:	9b04      	ldr	r3, [sp, #16]
 80020fa:	0275      	lsls	r5, r6, #9
 80020fc:	431d      	orrs	r5, r3
 80020fe:	1e6a      	subs	r2, r5, #1
 8002100:	4195      	sbcs	r5, r2
 8002102:	464b      	mov	r3, r9
 8002104:	0df6      	lsrs	r6, r6, #23
 8002106:	027f      	lsls	r7, r7, #9
 8002108:	4335      	orrs	r5, r6
 800210a:	025a      	lsls	r2, r3, #9
 800210c:	433c      	orrs	r4, r7
 800210e:	4315      	orrs	r5, r2
 8002110:	01fb      	lsls	r3, r7, #7
 8002112:	d400      	bmi.n	8002116 <__aeabi_dmul+0x24a>
 8002114:	e11c      	b.n	8002350 <__aeabi_dmul+0x484>
 8002116:	2101      	movs	r1, #1
 8002118:	086a      	lsrs	r2, r5, #1
 800211a:	400d      	ands	r5, r1
 800211c:	4315      	orrs	r5, r2
 800211e:	07e2      	lsls	r2, r4, #31
 8002120:	4315      	orrs	r5, r2
 8002122:	0864      	lsrs	r4, r4, #1
 8002124:	494f      	ldr	r1, [pc, #316]	; (8002264 <__aeabi_dmul+0x398>)
 8002126:	4461      	add	r1, ip
 8002128:	2900      	cmp	r1, #0
 800212a:	dc00      	bgt.n	800212e <__aeabi_dmul+0x262>
 800212c:	e0b0      	b.n	8002290 <__aeabi_dmul+0x3c4>
 800212e:	076b      	lsls	r3, r5, #29
 8002130:	d009      	beq.n	8002146 <__aeabi_dmul+0x27a>
 8002132:	220f      	movs	r2, #15
 8002134:	402a      	ands	r2, r5
 8002136:	2a04      	cmp	r2, #4
 8002138:	d005      	beq.n	8002146 <__aeabi_dmul+0x27a>
 800213a:	1d2a      	adds	r2, r5, #4
 800213c:	42aa      	cmp	r2, r5
 800213e:	41ad      	sbcs	r5, r5
 8002140:	426d      	negs	r5, r5
 8002142:	1964      	adds	r4, r4, r5
 8002144:	0015      	movs	r5, r2
 8002146:	01e3      	lsls	r3, r4, #7
 8002148:	d504      	bpl.n	8002154 <__aeabi_dmul+0x288>
 800214a:	2180      	movs	r1, #128	; 0x80
 800214c:	4a46      	ldr	r2, [pc, #280]	; (8002268 <__aeabi_dmul+0x39c>)
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	4014      	ands	r4, r2
 8002152:	4461      	add	r1, ip
 8002154:	4a45      	ldr	r2, [pc, #276]	; (800226c <__aeabi_dmul+0x3a0>)
 8002156:	4291      	cmp	r1, r2
 8002158:	dd00      	ble.n	800215c <__aeabi_dmul+0x290>
 800215a:	e726      	b.n	8001faa <__aeabi_dmul+0xde>
 800215c:	0762      	lsls	r2, r4, #29
 800215e:	08ed      	lsrs	r5, r5, #3
 8002160:	0264      	lsls	r4, r4, #9
 8002162:	0549      	lsls	r1, r1, #21
 8002164:	4315      	orrs	r5, r2
 8002166:	0b24      	lsrs	r4, r4, #12
 8002168:	0d4a      	lsrs	r2, r1, #21
 800216a:	e710      	b.n	8001f8e <__aeabi_dmul+0xc2>
 800216c:	4652      	mov	r2, sl
 800216e:	4332      	orrs	r2, r6
 8002170:	d100      	bne.n	8002174 <__aeabi_dmul+0x2a8>
 8002172:	e07f      	b.n	8002274 <__aeabi_dmul+0x3a8>
 8002174:	2e00      	cmp	r6, #0
 8002176:	d100      	bne.n	800217a <__aeabi_dmul+0x2ae>
 8002178:	e0dc      	b.n	8002334 <__aeabi_dmul+0x468>
 800217a:	0030      	movs	r0, r6
 800217c:	f000 fe1e 	bl	8002dbc <__clzsi2>
 8002180:	0002      	movs	r2, r0
 8002182:	3a0b      	subs	r2, #11
 8002184:	231d      	movs	r3, #29
 8002186:	0001      	movs	r1, r0
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	4652      	mov	r2, sl
 800218c:	3908      	subs	r1, #8
 800218e:	40da      	lsrs	r2, r3
 8002190:	408e      	lsls	r6, r1
 8002192:	4316      	orrs	r6, r2
 8002194:	4652      	mov	r2, sl
 8002196:	408a      	lsls	r2, r1
 8002198:	9b00      	ldr	r3, [sp, #0]
 800219a:	4935      	ldr	r1, [pc, #212]	; (8002270 <__aeabi_dmul+0x3a4>)
 800219c:	1a18      	subs	r0, r3, r0
 800219e:	0003      	movs	r3, r0
 80021a0:	468c      	mov	ip, r1
 80021a2:	4463      	add	r3, ip
 80021a4:	2000      	movs	r0, #0
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	e6d3      	b.n	8001f52 <__aeabi_dmul+0x86>
 80021aa:	0025      	movs	r5, r4
 80021ac:	4305      	orrs	r5, r0
 80021ae:	d04a      	beq.n	8002246 <__aeabi_dmul+0x37a>
 80021b0:	2c00      	cmp	r4, #0
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dmul+0x2ea>
 80021b4:	e0b0      	b.n	8002318 <__aeabi_dmul+0x44c>
 80021b6:	0020      	movs	r0, r4
 80021b8:	f000 fe00 	bl	8002dbc <__clzsi2>
 80021bc:	0001      	movs	r1, r0
 80021be:	0002      	movs	r2, r0
 80021c0:	390b      	subs	r1, #11
 80021c2:	231d      	movs	r3, #29
 80021c4:	0010      	movs	r0, r2
 80021c6:	1a5b      	subs	r3, r3, r1
 80021c8:	0031      	movs	r1, r6
 80021ca:	0035      	movs	r5, r6
 80021cc:	3808      	subs	r0, #8
 80021ce:	4084      	lsls	r4, r0
 80021d0:	40d9      	lsrs	r1, r3
 80021d2:	4085      	lsls	r5, r0
 80021d4:	430c      	orrs	r4, r1
 80021d6:	4826      	ldr	r0, [pc, #152]	; (8002270 <__aeabi_dmul+0x3a4>)
 80021d8:	1a83      	subs	r3, r0, r2
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2300      	movs	r3, #0
 80021de:	4699      	mov	r9, r3
 80021e0:	469b      	mov	fp, r3
 80021e2:	e697      	b.n	8001f14 <__aeabi_dmul+0x48>
 80021e4:	0005      	movs	r5, r0
 80021e6:	4325      	orrs	r5, r4
 80021e8:	d126      	bne.n	8002238 <__aeabi_dmul+0x36c>
 80021ea:	2208      	movs	r2, #8
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2302      	movs	r3, #2
 80021f0:	2400      	movs	r4, #0
 80021f2:	4691      	mov	r9, r2
 80021f4:	469b      	mov	fp, r3
 80021f6:	e68d      	b.n	8001f14 <__aeabi_dmul+0x48>
 80021f8:	4652      	mov	r2, sl
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	4332      	orrs	r2, r6
 80021fe:	d110      	bne.n	8002222 <__aeabi_dmul+0x356>
 8002200:	4915      	ldr	r1, [pc, #84]	; (8002258 <__aeabi_dmul+0x38c>)
 8002202:	2600      	movs	r6, #0
 8002204:	468c      	mov	ip, r1
 8002206:	4463      	add	r3, ip
 8002208:	4649      	mov	r1, r9
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2302      	movs	r3, #2
 800220e:	4319      	orrs	r1, r3
 8002210:	4689      	mov	r9, r1
 8002212:	2002      	movs	r0, #2
 8002214:	e69d      	b.n	8001f52 <__aeabi_dmul+0x86>
 8002216:	465b      	mov	r3, fp
 8002218:	9701      	str	r7, [sp, #4]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d000      	beq.n	8002220 <__aeabi_dmul+0x354>
 800221e:	e6ad      	b.n	8001f7c <__aeabi_dmul+0xb0>
 8002220:	e6c3      	b.n	8001faa <__aeabi_dmul+0xde>
 8002222:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <__aeabi_dmul+0x38c>)
 8002224:	2003      	movs	r0, #3
 8002226:	4694      	mov	ip, r2
 8002228:	4463      	add	r3, ip
 800222a:	464a      	mov	r2, r9
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2303      	movs	r3, #3
 8002230:	431a      	orrs	r2, r3
 8002232:	4691      	mov	r9, r2
 8002234:	4652      	mov	r2, sl
 8002236:	e68c      	b.n	8001f52 <__aeabi_dmul+0x86>
 8002238:	220c      	movs	r2, #12
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	2303      	movs	r3, #3
 800223e:	0005      	movs	r5, r0
 8002240:	4691      	mov	r9, r2
 8002242:	469b      	mov	fp, r3
 8002244:	e666      	b.n	8001f14 <__aeabi_dmul+0x48>
 8002246:	2304      	movs	r3, #4
 8002248:	4699      	mov	r9, r3
 800224a:	2300      	movs	r3, #0
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	3301      	adds	r3, #1
 8002250:	2400      	movs	r4, #0
 8002252:	469b      	mov	fp, r3
 8002254:	e65e      	b.n	8001f14 <__aeabi_dmul+0x48>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	000007ff 	.word	0x000007ff
 800225c:	fffffc01 	.word	0xfffffc01
 8002260:	08019da4 	.word	0x08019da4
 8002264:	000003ff 	.word	0x000003ff
 8002268:	feffffff 	.word	0xfeffffff
 800226c:	000007fe 	.word	0x000007fe
 8002270:	fffffc0d 	.word	0xfffffc0d
 8002274:	4649      	mov	r1, r9
 8002276:	2301      	movs	r3, #1
 8002278:	4319      	orrs	r1, r3
 800227a:	4689      	mov	r9, r1
 800227c:	2600      	movs	r6, #0
 800227e:	2001      	movs	r0, #1
 8002280:	e667      	b.n	8001f52 <__aeabi_dmul+0x86>
 8002282:	2300      	movs	r3, #0
 8002284:	2480      	movs	r4, #128	; 0x80
 8002286:	2500      	movs	r5, #0
 8002288:	4a43      	ldr	r2, [pc, #268]	; (8002398 <__aeabi_dmul+0x4cc>)
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	0324      	lsls	r4, r4, #12
 800228e:	e67e      	b.n	8001f8e <__aeabi_dmul+0xc2>
 8002290:	2001      	movs	r0, #1
 8002292:	1a40      	subs	r0, r0, r1
 8002294:	2838      	cmp	r0, #56	; 0x38
 8002296:	dd00      	ble.n	800229a <__aeabi_dmul+0x3ce>
 8002298:	e676      	b.n	8001f88 <__aeabi_dmul+0xbc>
 800229a:	281f      	cmp	r0, #31
 800229c:	dd5b      	ble.n	8002356 <__aeabi_dmul+0x48a>
 800229e:	221f      	movs	r2, #31
 80022a0:	0023      	movs	r3, r4
 80022a2:	4252      	negs	r2, r2
 80022a4:	1a51      	subs	r1, r2, r1
 80022a6:	40cb      	lsrs	r3, r1
 80022a8:	0019      	movs	r1, r3
 80022aa:	2820      	cmp	r0, #32
 80022ac:	d003      	beq.n	80022b6 <__aeabi_dmul+0x3ea>
 80022ae:	4a3b      	ldr	r2, [pc, #236]	; (800239c <__aeabi_dmul+0x4d0>)
 80022b0:	4462      	add	r2, ip
 80022b2:	4094      	lsls	r4, r2
 80022b4:	4325      	orrs	r5, r4
 80022b6:	1e6a      	subs	r2, r5, #1
 80022b8:	4195      	sbcs	r5, r2
 80022ba:	002a      	movs	r2, r5
 80022bc:	430a      	orrs	r2, r1
 80022be:	2107      	movs	r1, #7
 80022c0:	000d      	movs	r5, r1
 80022c2:	2400      	movs	r4, #0
 80022c4:	4015      	ands	r5, r2
 80022c6:	4211      	tst	r1, r2
 80022c8:	d05b      	beq.n	8002382 <__aeabi_dmul+0x4b6>
 80022ca:	210f      	movs	r1, #15
 80022cc:	2400      	movs	r4, #0
 80022ce:	4011      	ands	r1, r2
 80022d0:	2904      	cmp	r1, #4
 80022d2:	d053      	beq.n	800237c <__aeabi_dmul+0x4b0>
 80022d4:	1d11      	adds	r1, r2, #4
 80022d6:	4291      	cmp	r1, r2
 80022d8:	4192      	sbcs	r2, r2
 80022da:	4252      	negs	r2, r2
 80022dc:	18a4      	adds	r4, r4, r2
 80022de:	000a      	movs	r2, r1
 80022e0:	0223      	lsls	r3, r4, #8
 80022e2:	d54b      	bpl.n	800237c <__aeabi_dmul+0x4b0>
 80022e4:	2201      	movs	r2, #1
 80022e6:	2400      	movs	r4, #0
 80022e8:	2500      	movs	r5, #0
 80022ea:	e650      	b.n	8001f8e <__aeabi_dmul+0xc2>
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	031b      	lsls	r3, r3, #12
 80022f0:	421c      	tst	r4, r3
 80022f2:	d009      	beq.n	8002308 <__aeabi_dmul+0x43c>
 80022f4:	421e      	tst	r6, r3
 80022f6:	d107      	bne.n	8002308 <__aeabi_dmul+0x43c>
 80022f8:	4333      	orrs	r3, r6
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	4643      	mov	r3, r8
 80022fe:	0015      	movs	r5, r2
 8002300:	0b24      	lsrs	r4, r4, #12
 8002302:	4a25      	ldr	r2, [pc, #148]	; (8002398 <__aeabi_dmul+0x4cc>)
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	e642      	b.n	8001f8e <__aeabi_dmul+0xc2>
 8002308:	2280      	movs	r2, #128	; 0x80
 800230a:	0312      	lsls	r2, r2, #12
 800230c:	4314      	orrs	r4, r2
 800230e:	0324      	lsls	r4, r4, #12
 8002310:	4a21      	ldr	r2, [pc, #132]	; (8002398 <__aeabi_dmul+0x4cc>)
 8002312:	0b24      	lsrs	r4, r4, #12
 8002314:	9701      	str	r7, [sp, #4]
 8002316:	e63a      	b.n	8001f8e <__aeabi_dmul+0xc2>
 8002318:	f000 fd50 	bl	8002dbc <__clzsi2>
 800231c:	0001      	movs	r1, r0
 800231e:	0002      	movs	r2, r0
 8002320:	3115      	adds	r1, #21
 8002322:	3220      	adds	r2, #32
 8002324:	291c      	cmp	r1, #28
 8002326:	dc00      	bgt.n	800232a <__aeabi_dmul+0x45e>
 8002328:	e74b      	b.n	80021c2 <__aeabi_dmul+0x2f6>
 800232a:	0034      	movs	r4, r6
 800232c:	3808      	subs	r0, #8
 800232e:	2500      	movs	r5, #0
 8002330:	4084      	lsls	r4, r0
 8002332:	e750      	b.n	80021d6 <__aeabi_dmul+0x30a>
 8002334:	f000 fd42 	bl	8002dbc <__clzsi2>
 8002338:	0003      	movs	r3, r0
 800233a:	001a      	movs	r2, r3
 800233c:	3215      	adds	r2, #21
 800233e:	3020      	adds	r0, #32
 8002340:	2a1c      	cmp	r2, #28
 8002342:	dc00      	bgt.n	8002346 <__aeabi_dmul+0x47a>
 8002344:	e71e      	b.n	8002184 <__aeabi_dmul+0x2b8>
 8002346:	4656      	mov	r6, sl
 8002348:	3b08      	subs	r3, #8
 800234a:	2200      	movs	r2, #0
 800234c:	409e      	lsls	r6, r3
 800234e:	e723      	b.n	8002198 <__aeabi_dmul+0x2cc>
 8002350:	9b00      	ldr	r3, [sp, #0]
 8002352:	469c      	mov	ip, r3
 8002354:	e6e6      	b.n	8002124 <__aeabi_dmul+0x258>
 8002356:	4912      	ldr	r1, [pc, #72]	; (80023a0 <__aeabi_dmul+0x4d4>)
 8002358:	0022      	movs	r2, r4
 800235a:	4461      	add	r1, ip
 800235c:	002e      	movs	r6, r5
 800235e:	408d      	lsls	r5, r1
 8002360:	408a      	lsls	r2, r1
 8002362:	40c6      	lsrs	r6, r0
 8002364:	1e69      	subs	r1, r5, #1
 8002366:	418d      	sbcs	r5, r1
 8002368:	4332      	orrs	r2, r6
 800236a:	432a      	orrs	r2, r5
 800236c:	40c4      	lsrs	r4, r0
 800236e:	0753      	lsls	r3, r2, #29
 8002370:	d0b6      	beq.n	80022e0 <__aeabi_dmul+0x414>
 8002372:	210f      	movs	r1, #15
 8002374:	4011      	ands	r1, r2
 8002376:	2904      	cmp	r1, #4
 8002378:	d1ac      	bne.n	80022d4 <__aeabi_dmul+0x408>
 800237a:	e7b1      	b.n	80022e0 <__aeabi_dmul+0x414>
 800237c:	0765      	lsls	r5, r4, #29
 800237e:	0264      	lsls	r4, r4, #9
 8002380:	0b24      	lsrs	r4, r4, #12
 8002382:	08d2      	lsrs	r2, r2, #3
 8002384:	4315      	orrs	r5, r2
 8002386:	2200      	movs	r2, #0
 8002388:	e601      	b.n	8001f8e <__aeabi_dmul+0xc2>
 800238a:	2280      	movs	r2, #128	; 0x80
 800238c:	0312      	lsls	r2, r2, #12
 800238e:	4314      	orrs	r4, r2
 8002390:	0324      	lsls	r4, r4, #12
 8002392:	4a01      	ldr	r2, [pc, #4]	; (8002398 <__aeabi_dmul+0x4cc>)
 8002394:	0b24      	lsrs	r4, r4, #12
 8002396:	e5fa      	b.n	8001f8e <__aeabi_dmul+0xc2>
 8002398:	000007ff 	.word	0x000007ff
 800239c:	0000043e 	.word	0x0000043e
 80023a0:	0000041e 	.word	0x0000041e

080023a4 <__aeabi_dsub>:
 80023a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a6:	4657      	mov	r7, sl
 80023a8:	464e      	mov	r6, r9
 80023aa:	4645      	mov	r5, r8
 80023ac:	46de      	mov	lr, fp
 80023ae:	b5e0      	push	{r5, r6, r7, lr}
 80023b0:	001e      	movs	r6, r3
 80023b2:	0017      	movs	r7, r2
 80023b4:	004a      	lsls	r2, r1, #1
 80023b6:	030b      	lsls	r3, r1, #12
 80023b8:	0d52      	lsrs	r2, r2, #21
 80023ba:	0a5b      	lsrs	r3, r3, #9
 80023bc:	4690      	mov	r8, r2
 80023be:	0f42      	lsrs	r2, r0, #29
 80023c0:	431a      	orrs	r2, r3
 80023c2:	0fcd      	lsrs	r5, r1, #31
 80023c4:	4ccd      	ldr	r4, [pc, #820]	; (80026fc <__aeabi_dsub+0x358>)
 80023c6:	0331      	lsls	r1, r6, #12
 80023c8:	00c3      	lsls	r3, r0, #3
 80023ca:	4694      	mov	ip, r2
 80023cc:	0070      	lsls	r0, r6, #1
 80023ce:	0f7a      	lsrs	r2, r7, #29
 80023d0:	0a49      	lsrs	r1, r1, #9
 80023d2:	00ff      	lsls	r7, r7, #3
 80023d4:	469a      	mov	sl, r3
 80023d6:	46b9      	mov	r9, r7
 80023d8:	0d40      	lsrs	r0, r0, #21
 80023da:	0ff6      	lsrs	r6, r6, #31
 80023dc:	4311      	orrs	r1, r2
 80023de:	42a0      	cmp	r0, r4
 80023e0:	d100      	bne.n	80023e4 <__aeabi_dsub+0x40>
 80023e2:	e0b1      	b.n	8002548 <__aeabi_dsub+0x1a4>
 80023e4:	2201      	movs	r2, #1
 80023e6:	4056      	eors	r6, r2
 80023e8:	46b3      	mov	fp, r6
 80023ea:	42b5      	cmp	r5, r6
 80023ec:	d100      	bne.n	80023f0 <__aeabi_dsub+0x4c>
 80023ee:	e088      	b.n	8002502 <__aeabi_dsub+0x15e>
 80023f0:	4642      	mov	r2, r8
 80023f2:	1a12      	subs	r2, r2, r0
 80023f4:	2a00      	cmp	r2, #0
 80023f6:	dc00      	bgt.n	80023fa <__aeabi_dsub+0x56>
 80023f8:	e0ae      	b.n	8002558 <__aeabi_dsub+0x1b4>
 80023fa:	2800      	cmp	r0, #0
 80023fc:	d100      	bne.n	8002400 <__aeabi_dsub+0x5c>
 80023fe:	e0c1      	b.n	8002584 <__aeabi_dsub+0x1e0>
 8002400:	48be      	ldr	r0, [pc, #760]	; (80026fc <__aeabi_dsub+0x358>)
 8002402:	4580      	cmp	r8, r0
 8002404:	d100      	bne.n	8002408 <__aeabi_dsub+0x64>
 8002406:	e151      	b.n	80026ac <__aeabi_dsub+0x308>
 8002408:	2080      	movs	r0, #128	; 0x80
 800240a:	0400      	lsls	r0, r0, #16
 800240c:	4301      	orrs	r1, r0
 800240e:	2a38      	cmp	r2, #56	; 0x38
 8002410:	dd00      	ble.n	8002414 <__aeabi_dsub+0x70>
 8002412:	e17b      	b.n	800270c <__aeabi_dsub+0x368>
 8002414:	2a1f      	cmp	r2, #31
 8002416:	dd00      	ble.n	800241a <__aeabi_dsub+0x76>
 8002418:	e1ee      	b.n	80027f8 <__aeabi_dsub+0x454>
 800241a:	2020      	movs	r0, #32
 800241c:	003e      	movs	r6, r7
 800241e:	1a80      	subs	r0, r0, r2
 8002420:	000c      	movs	r4, r1
 8002422:	40d6      	lsrs	r6, r2
 8002424:	40d1      	lsrs	r1, r2
 8002426:	4087      	lsls	r7, r0
 8002428:	4662      	mov	r2, ip
 800242a:	4084      	lsls	r4, r0
 800242c:	1a52      	subs	r2, r2, r1
 800242e:	1e78      	subs	r0, r7, #1
 8002430:	4187      	sbcs	r7, r0
 8002432:	4694      	mov	ip, r2
 8002434:	4334      	orrs	r4, r6
 8002436:	4327      	orrs	r7, r4
 8002438:	1bdc      	subs	r4, r3, r7
 800243a:	42a3      	cmp	r3, r4
 800243c:	419b      	sbcs	r3, r3
 800243e:	4662      	mov	r2, ip
 8002440:	425b      	negs	r3, r3
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	4699      	mov	r9, r3
 8002446:	464b      	mov	r3, r9
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	d400      	bmi.n	800244e <__aeabi_dsub+0xaa>
 800244c:	e118      	b.n	8002680 <__aeabi_dsub+0x2dc>
 800244e:	464b      	mov	r3, r9
 8002450:	0258      	lsls	r0, r3, #9
 8002452:	0a43      	lsrs	r3, r0, #9
 8002454:	4699      	mov	r9, r3
 8002456:	464b      	mov	r3, r9
 8002458:	2b00      	cmp	r3, #0
 800245a:	d100      	bne.n	800245e <__aeabi_dsub+0xba>
 800245c:	e137      	b.n	80026ce <__aeabi_dsub+0x32a>
 800245e:	4648      	mov	r0, r9
 8002460:	f000 fcac 	bl	8002dbc <__clzsi2>
 8002464:	0001      	movs	r1, r0
 8002466:	3908      	subs	r1, #8
 8002468:	2320      	movs	r3, #32
 800246a:	0022      	movs	r2, r4
 800246c:	4648      	mov	r0, r9
 800246e:	1a5b      	subs	r3, r3, r1
 8002470:	40da      	lsrs	r2, r3
 8002472:	4088      	lsls	r0, r1
 8002474:	408c      	lsls	r4, r1
 8002476:	4643      	mov	r3, r8
 8002478:	4310      	orrs	r0, r2
 800247a:	4588      	cmp	r8, r1
 800247c:	dd00      	ble.n	8002480 <__aeabi_dsub+0xdc>
 800247e:	e136      	b.n	80026ee <__aeabi_dsub+0x34a>
 8002480:	1ac9      	subs	r1, r1, r3
 8002482:	1c4b      	adds	r3, r1, #1
 8002484:	2b1f      	cmp	r3, #31
 8002486:	dd00      	ble.n	800248a <__aeabi_dsub+0xe6>
 8002488:	e0ea      	b.n	8002660 <__aeabi_dsub+0x2bc>
 800248a:	2220      	movs	r2, #32
 800248c:	0026      	movs	r6, r4
 800248e:	1ad2      	subs	r2, r2, r3
 8002490:	0001      	movs	r1, r0
 8002492:	4094      	lsls	r4, r2
 8002494:	40de      	lsrs	r6, r3
 8002496:	40d8      	lsrs	r0, r3
 8002498:	2300      	movs	r3, #0
 800249a:	4091      	lsls	r1, r2
 800249c:	1e62      	subs	r2, r4, #1
 800249e:	4194      	sbcs	r4, r2
 80024a0:	4681      	mov	r9, r0
 80024a2:	4698      	mov	r8, r3
 80024a4:	4331      	orrs	r1, r6
 80024a6:	430c      	orrs	r4, r1
 80024a8:	0763      	lsls	r3, r4, #29
 80024aa:	d009      	beq.n	80024c0 <__aeabi_dsub+0x11c>
 80024ac:	230f      	movs	r3, #15
 80024ae:	4023      	ands	r3, r4
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d005      	beq.n	80024c0 <__aeabi_dsub+0x11c>
 80024b4:	1d23      	adds	r3, r4, #4
 80024b6:	42a3      	cmp	r3, r4
 80024b8:	41a4      	sbcs	r4, r4
 80024ba:	4264      	negs	r4, r4
 80024bc:	44a1      	add	r9, r4
 80024be:	001c      	movs	r4, r3
 80024c0:	464b      	mov	r3, r9
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	d400      	bmi.n	80024c8 <__aeabi_dsub+0x124>
 80024c6:	e0de      	b.n	8002686 <__aeabi_dsub+0x2e2>
 80024c8:	4641      	mov	r1, r8
 80024ca:	4b8c      	ldr	r3, [pc, #560]	; (80026fc <__aeabi_dsub+0x358>)
 80024cc:	3101      	adds	r1, #1
 80024ce:	4299      	cmp	r1, r3
 80024d0:	d100      	bne.n	80024d4 <__aeabi_dsub+0x130>
 80024d2:	e0e7      	b.n	80026a4 <__aeabi_dsub+0x300>
 80024d4:	464b      	mov	r3, r9
 80024d6:	488a      	ldr	r0, [pc, #552]	; (8002700 <__aeabi_dsub+0x35c>)
 80024d8:	08e4      	lsrs	r4, r4, #3
 80024da:	4003      	ands	r3, r0
 80024dc:	0018      	movs	r0, r3
 80024de:	0549      	lsls	r1, r1, #21
 80024e0:	075b      	lsls	r3, r3, #29
 80024e2:	0240      	lsls	r0, r0, #9
 80024e4:	4323      	orrs	r3, r4
 80024e6:	0d4a      	lsrs	r2, r1, #21
 80024e8:	0b04      	lsrs	r4, r0, #12
 80024ea:	0512      	lsls	r2, r2, #20
 80024ec:	07ed      	lsls	r5, r5, #31
 80024ee:	4322      	orrs	r2, r4
 80024f0:	432a      	orrs	r2, r5
 80024f2:	0018      	movs	r0, r3
 80024f4:	0011      	movs	r1, r2
 80024f6:	bcf0      	pop	{r4, r5, r6, r7}
 80024f8:	46bb      	mov	fp, r7
 80024fa:	46b2      	mov	sl, r6
 80024fc:	46a9      	mov	r9, r5
 80024fe:	46a0      	mov	r8, r4
 8002500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002502:	4642      	mov	r2, r8
 8002504:	1a12      	subs	r2, r2, r0
 8002506:	2a00      	cmp	r2, #0
 8002508:	dd52      	ble.n	80025b0 <__aeabi_dsub+0x20c>
 800250a:	2800      	cmp	r0, #0
 800250c:	d100      	bne.n	8002510 <__aeabi_dsub+0x16c>
 800250e:	e09c      	b.n	800264a <__aeabi_dsub+0x2a6>
 8002510:	45a0      	cmp	r8, r4
 8002512:	d100      	bne.n	8002516 <__aeabi_dsub+0x172>
 8002514:	e0ca      	b.n	80026ac <__aeabi_dsub+0x308>
 8002516:	2080      	movs	r0, #128	; 0x80
 8002518:	0400      	lsls	r0, r0, #16
 800251a:	4301      	orrs	r1, r0
 800251c:	2a38      	cmp	r2, #56	; 0x38
 800251e:	dd00      	ble.n	8002522 <__aeabi_dsub+0x17e>
 8002520:	e149      	b.n	80027b6 <__aeabi_dsub+0x412>
 8002522:	2a1f      	cmp	r2, #31
 8002524:	dc00      	bgt.n	8002528 <__aeabi_dsub+0x184>
 8002526:	e197      	b.n	8002858 <__aeabi_dsub+0x4b4>
 8002528:	0010      	movs	r0, r2
 800252a:	000e      	movs	r6, r1
 800252c:	3820      	subs	r0, #32
 800252e:	40c6      	lsrs	r6, r0
 8002530:	2a20      	cmp	r2, #32
 8002532:	d004      	beq.n	800253e <__aeabi_dsub+0x19a>
 8002534:	2040      	movs	r0, #64	; 0x40
 8002536:	1a82      	subs	r2, r0, r2
 8002538:	4091      	lsls	r1, r2
 800253a:	430f      	orrs	r7, r1
 800253c:	46b9      	mov	r9, r7
 800253e:	464c      	mov	r4, r9
 8002540:	1e62      	subs	r2, r4, #1
 8002542:	4194      	sbcs	r4, r2
 8002544:	4334      	orrs	r4, r6
 8002546:	e13a      	b.n	80027be <__aeabi_dsub+0x41a>
 8002548:	000a      	movs	r2, r1
 800254a:	433a      	orrs	r2, r7
 800254c:	d028      	beq.n	80025a0 <__aeabi_dsub+0x1fc>
 800254e:	46b3      	mov	fp, r6
 8002550:	42b5      	cmp	r5, r6
 8002552:	d02b      	beq.n	80025ac <__aeabi_dsub+0x208>
 8002554:	4a6b      	ldr	r2, [pc, #428]	; (8002704 <__aeabi_dsub+0x360>)
 8002556:	4442      	add	r2, r8
 8002558:	2a00      	cmp	r2, #0
 800255a:	d05d      	beq.n	8002618 <__aeabi_dsub+0x274>
 800255c:	4642      	mov	r2, r8
 800255e:	4644      	mov	r4, r8
 8002560:	1a82      	subs	r2, r0, r2
 8002562:	2c00      	cmp	r4, #0
 8002564:	d000      	beq.n	8002568 <__aeabi_dsub+0x1c4>
 8002566:	e0f5      	b.n	8002754 <__aeabi_dsub+0x3b0>
 8002568:	4665      	mov	r5, ip
 800256a:	431d      	orrs	r5, r3
 800256c:	d100      	bne.n	8002570 <__aeabi_dsub+0x1cc>
 800256e:	e19c      	b.n	80028aa <__aeabi_dsub+0x506>
 8002570:	1e55      	subs	r5, r2, #1
 8002572:	2a01      	cmp	r2, #1
 8002574:	d100      	bne.n	8002578 <__aeabi_dsub+0x1d4>
 8002576:	e1fb      	b.n	8002970 <__aeabi_dsub+0x5cc>
 8002578:	4c60      	ldr	r4, [pc, #384]	; (80026fc <__aeabi_dsub+0x358>)
 800257a:	42a2      	cmp	r2, r4
 800257c:	d100      	bne.n	8002580 <__aeabi_dsub+0x1dc>
 800257e:	e1bd      	b.n	80028fc <__aeabi_dsub+0x558>
 8002580:	002a      	movs	r2, r5
 8002582:	e0f0      	b.n	8002766 <__aeabi_dsub+0x3c2>
 8002584:	0008      	movs	r0, r1
 8002586:	4338      	orrs	r0, r7
 8002588:	d100      	bne.n	800258c <__aeabi_dsub+0x1e8>
 800258a:	e0c3      	b.n	8002714 <__aeabi_dsub+0x370>
 800258c:	1e50      	subs	r0, r2, #1
 800258e:	2a01      	cmp	r2, #1
 8002590:	d100      	bne.n	8002594 <__aeabi_dsub+0x1f0>
 8002592:	e1a8      	b.n	80028e6 <__aeabi_dsub+0x542>
 8002594:	4c59      	ldr	r4, [pc, #356]	; (80026fc <__aeabi_dsub+0x358>)
 8002596:	42a2      	cmp	r2, r4
 8002598:	d100      	bne.n	800259c <__aeabi_dsub+0x1f8>
 800259a:	e087      	b.n	80026ac <__aeabi_dsub+0x308>
 800259c:	0002      	movs	r2, r0
 800259e:	e736      	b.n	800240e <__aeabi_dsub+0x6a>
 80025a0:	2201      	movs	r2, #1
 80025a2:	4056      	eors	r6, r2
 80025a4:	46b3      	mov	fp, r6
 80025a6:	42b5      	cmp	r5, r6
 80025a8:	d000      	beq.n	80025ac <__aeabi_dsub+0x208>
 80025aa:	e721      	b.n	80023f0 <__aeabi_dsub+0x4c>
 80025ac:	4a55      	ldr	r2, [pc, #340]	; (8002704 <__aeabi_dsub+0x360>)
 80025ae:	4442      	add	r2, r8
 80025b0:	2a00      	cmp	r2, #0
 80025b2:	d100      	bne.n	80025b6 <__aeabi_dsub+0x212>
 80025b4:	e0b5      	b.n	8002722 <__aeabi_dsub+0x37e>
 80025b6:	4642      	mov	r2, r8
 80025b8:	4644      	mov	r4, r8
 80025ba:	1a82      	subs	r2, r0, r2
 80025bc:	2c00      	cmp	r4, #0
 80025be:	d100      	bne.n	80025c2 <__aeabi_dsub+0x21e>
 80025c0:	e138      	b.n	8002834 <__aeabi_dsub+0x490>
 80025c2:	4e4e      	ldr	r6, [pc, #312]	; (80026fc <__aeabi_dsub+0x358>)
 80025c4:	42b0      	cmp	r0, r6
 80025c6:	d100      	bne.n	80025ca <__aeabi_dsub+0x226>
 80025c8:	e1de      	b.n	8002988 <__aeabi_dsub+0x5e4>
 80025ca:	2680      	movs	r6, #128	; 0x80
 80025cc:	4664      	mov	r4, ip
 80025ce:	0436      	lsls	r6, r6, #16
 80025d0:	4334      	orrs	r4, r6
 80025d2:	46a4      	mov	ip, r4
 80025d4:	2a38      	cmp	r2, #56	; 0x38
 80025d6:	dd00      	ble.n	80025da <__aeabi_dsub+0x236>
 80025d8:	e196      	b.n	8002908 <__aeabi_dsub+0x564>
 80025da:	2a1f      	cmp	r2, #31
 80025dc:	dd00      	ble.n	80025e0 <__aeabi_dsub+0x23c>
 80025de:	e224      	b.n	8002a2a <__aeabi_dsub+0x686>
 80025e0:	2620      	movs	r6, #32
 80025e2:	1ab4      	subs	r4, r6, r2
 80025e4:	46a2      	mov	sl, r4
 80025e6:	4664      	mov	r4, ip
 80025e8:	4656      	mov	r6, sl
 80025ea:	40b4      	lsls	r4, r6
 80025ec:	46a1      	mov	r9, r4
 80025ee:	001c      	movs	r4, r3
 80025f0:	464e      	mov	r6, r9
 80025f2:	40d4      	lsrs	r4, r2
 80025f4:	4326      	orrs	r6, r4
 80025f6:	0034      	movs	r4, r6
 80025f8:	4656      	mov	r6, sl
 80025fa:	40b3      	lsls	r3, r6
 80025fc:	1e5e      	subs	r6, r3, #1
 80025fe:	41b3      	sbcs	r3, r6
 8002600:	431c      	orrs	r4, r3
 8002602:	4663      	mov	r3, ip
 8002604:	40d3      	lsrs	r3, r2
 8002606:	18c9      	adds	r1, r1, r3
 8002608:	19e4      	adds	r4, r4, r7
 800260a:	42bc      	cmp	r4, r7
 800260c:	41bf      	sbcs	r7, r7
 800260e:	427f      	negs	r7, r7
 8002610:	46b9      	mov	r9, r7
 8002612:	4680      	mov	r8, r0
 8002614:	4489      	add	r9, r1
 8002616:	e0d8      	b.n	80027ca <__aeabi_dsub+0x426>
 8002618:	4640      	mov	r0, r8
 800261a:	4c3b      	ldr	r4, [pc, #236]	; (8002708 <__aeabi_dsub+0x364>)
 800261c:	3001      	adds	r0, #1
 800261e:	4220      	tst	r0, r4
 8002620:	d000      	beq.n	8002624 <__aeabi_dsub+0x280>
 8002622:	e0b4      	b.n	800278e <__aeabi_dsub+0x3ea>
 8002624:	4640      	mov	r0, r8
 8002626:	2800      	cmp	r0, #0
 8002628:	d000      	beq.n	800262c <__aeabi_dsub+0x288>
 800262a:	e144      	b.n	80028b6 <__aeabi_dsub+0x512>
 800262c:	4660      	mov	r0, ip
 800262e:	4318      	orrs	r0, r3
 8002630:	d100      	bne.n	8002634 <__aeabi_dsub+0x290>
 8002632:	e190      	b.n	8002956 <__aeabi_dsub+0x5b2>
 8002634:	0008      	movs	r0, r1
 8002636:	4338      	orrs	r0, r7
 8002638:	d000      	beq.n	800263c <__aeabi_dsub+0x298>
 800263a:	e1aa      	b.n	8002992 <__aeabi_dsub+0x5ee>
 800263c:	4661      	mov	r1, ip
 800263e:	08db      	lsrs	r3, r3, #3
 8002640:	0749      	lsls	r1, r1, #29
 8002642:	430b      	orrs	r3, r1
 8002644:	4661      	mov	r1, ip
 8002646:	08cc      	lsrs	r4, r1, #3
 8002648:	e027      	b.n	800269a <__aeabi_dsub+0x2f6>
 800264a:	0008      	movs	r0, r1
 800264c:	4338      	orrs	r0, r7
 800264e:	d061      	beq.n	8002714 <__aeabi_dsub+0x370>
 8002650:	1e50      	subs	r0, r2, #1
 8002652:	2a01      	cmp	r2, #1
 8002654:	d100      	bne.n	8002658 <__aeabi_dsub+0x2b4>
 8002656:	e139      	b.n	80028cc <__aeabi_dsub+0x528>
 8002658:	42a2      	cmp	r2, r4
 800265a:	d027      	beq.n	80026ac <__aeabi_dsub+0x308>
 800265c:	0002      	movs	r2, r0
 800265e:	e75d      	b.n	800251c <__aeabi_dsub+0x178>
 8002660:	0002      	movs	r2, r0
 8002662:	391f      	subs	r1, #31
 8002664:	40ca      	lsrs	r2, r1
 8002666:	0011      	movs	r1, r2
 8002668:	2b20      	cmp	r3, #32
 800266a:	d003      	beq.n	8002674 <__aeabi_dsub+0x2d0>
 800266c:	2240      	movs	r2, #64	; 0x40
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	4098      	lsls	r0, r3
 8002672:	4304      	orrs	r4, r0
 8002674:	1e63      	subs	r3, r4, #1
 8002676:	419c      	sbcs	r4, r3
 8002678:	2300      	movs	r3, #0
 800267a:	4699      	mov	r9, r3
 800267c:	4698      	mov	r8, r3
 800267e:	430c      	orrs	r4, r1
 8002680:	0763      	lsls	r3, r4, #29
 8002682:	d000      	beq.n	8002686 <__aeabi_dsub+0x2e2>
 8002684:	e712      	b.n	80024ac <__aeabi_dsub+0x108>
 8002686:	464b      	mov	r3, r9
 8002688:	464a      	mov	r2, r9
 800268a:	08e4      	lsrs	r4, r4, #3
 800268c:	075b      	lsls	r3, r3, #29
 800268e:	4323      	orrs	r3, r4
 8002690:	08d4      	lsrs	r4, r2, #3
 8002692:	4642      	mov	r2, r8
 8002694:	4919      	ldr	r1, [pc, #100]	; (80026fc <__aeabi_dsub+0x358>)
 8002696:	428a      	cmp	r2, r1
 8002698:	d00e      	beq.n	80026b8 <__aeabi_dsub+0x314>
 800269a:	0324      	lsls	r4, r4, #12
 800269c:	0552      	lsls	r2, r2, #21
 800269e:	0b24      	lsrs	r4, r4, #12
 80026a0:	0d52      	lsrs	r2, r2, #21
 80026a2:	e722      	b.n	80024ea <__aeabi_dsub+0x146>
 80026a4:	000a      	movs	r2, r1
 80026a6:	2400      	movs	r4, #0
 80026a8:	2300      	movs	r3, #0
 80026aa:	e71e      	b.n	80024ea <__aeabi_dsub+0x146>
 80026ac:	08db      	lsrs	r3, r3, #3
 80026ae:	4662      	mov	r2, ip
 80026b0:	0752      	lsls	r2, r2, #29
 80026b2:	4313      	orrs	r3, r2
 80026b4:	4662      	mov	r2, ip
 80026b6:	08d4      	lsrs	r4, r2, #3
 80026b8:	001a      	movs	r2, r3
 80026ba:	4322      	orrs	r2, r4
 80026bc:	d100      	bne.n	80026c0 <__aeabi_dsub+0x31c>
 80026be:	e1fc      	b.n	8002aba <__aeabi_dsub+0x716>
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	0312      	lsls	r2, r2, #12
 80026c4:	4314      	orrs	r4, r2
 80026c6:	0324      	lsls	r4, r4, #12
 80026c8:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <__aeabi_dsub+0x358>)
 80026ca:	0b24      	lsrs	r4, r4, #12
 80026cc:	e70d      	b.n	80024ea <__aeabi_dsub+0x146>
 80026ce:	0020      	movs	r0, r4
 80026d0:	f000 fb74 	bl	8002dbc <__clzsi2>
 80026d4:	0001      	movs	r1, r0
 80026d6:	3118      	adds	r1, #24
 80026d8:	291f      	cmp	r1, #31
 80026da:	dc00      	bgt.n	80026de <__aeabi_dsub+0x33a>
 80026dc:	e6c4      	b.n	8002468 <__aeabi_dsub+0xc4>
 80026de:	3808      	subs	r0, #8
 80026e0:	4084      	lsls	r4, r0
 80026e2:	4643      	mov	r3, r8
 80026e4:	0020      	movs	r0, r4
 80026e6:	2400      	movs	r4, #0
 80026e8:	4588      	cmp	r8, r1
 80026ea:	dc00      	bgt.n	80026ee <__aeabi_dsub+0x34a>
 80026ec:	e6c8      	b.n	8002480 <__aeabi_dsub+0xdc>
 80026ee:	4a04      	ldr	r2, [pc, #16]	; (8002700 <__aeabi_dsub+0x35c>)
 80026f0:	1a5b      	subs	r3, r3, r1
 80026f2:	4010      	ands	r0, r2
 80026f4:	4698      	mov	r8, r3
 80026f6:	4681      	mov	r9, r0
 80026f8:	e6d6      	b.n	80024a8 <__aeabi_dsub+0x104>
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	000007ff 	.word	0x000007ff
 8002700:	ff7fffff 	.word	0xff7fffff
 8002704:	fffff801 	.word	0xfffff801
 8002708:	000007fe 	.word	0x000007fe
 800270c:	430f      	orrs	r7, r1
 800270e:	1e7a      	subs	r2, r7, #1
 8002710:	4197      	sbcs	r7, r2
 8002712:	e691      	b.n	8002438 <__aeabi_dsub+0x94>
 8002714:	4661      	mov	r1, ip
 8002716:	08db      	lsrs	r3, r3, #3
 8002718:	0749      	lsls	r1, r1, #29
 800271a:	430b      	orrs	r3, r1
 800271c:	4661      	mov	r1, ip
 800271e:	08cc      	lsrs	r4, r1, #3
 8002720:	e7b8      	b.n	8002694 <__aeabi_dsub+0x2f0>
 8002722:	4640      	mov	r0, r8
 8002724:	4cd3      	ldr	r4, [pc, #844]	; (8002a74 <__aeabi_dsub+0x6d0>)
 8002726:	3001      	adds	r0, #1
 8002728:	4220      	tst	r0, r4
 800272a:	d000      	beq.n	800272e <__aeabi_dsub+0x38a>
 800272c:	e0a2      	b.n	8002874 <__aeabi_dsub+0x4d0>
 800272e:	4640      	mov	r0, r8
 8002730:	2800      	cmp	r0, #0
 8002732:	d000      	beq.n	8002736 <__aeabi_dsub+0x392>
 8002734:	e101      	b.n	800293a <__aeabi_dsub+0x596>
 8002736:	4660      	mov	r0, ip
 8002738:	4318      	orrs	r0, r3
 800273a:	d100      	bne.n	800273e <__aeabi_dsub+0x39a>
 800273c:	e15e      	b.n	80029fc <__aeabi_dsub+0x658>
 800273e:	0008      	movs	r0, r1
 8002740:	4338      	orrs	r0, r7
 8002742:	d000      	beq.n	8002746 <__aeabi_dsub+0x3a2>
 8002744:	e15f      	b.n	8002a06 <__aeabi_dsub+0x662>
 8002746:	4661      	mov	r1, ip
 8002748:	08db      	lsrs	r3, r3, #3
 800274a:	0749      	lsls	r1, r1, #29
 800274c:	430b      	orrs	r3, r1
 800274e:	4661      	mov	r1, ip
 8002750:	08cc      	lsrs	r4, r1, #3
 8002752:	e7a2      	b.n	800269a <__aeabi_dsub+0x2f6>
 8002754:	4dc8      	ldr	r5, [pc, #800]	; (8002a78 <__aeabi_dsub+0x6d4>)
 8002756:	42a8      	cmp	r0, r5
 8002758:	d100      	bne.n	800275c <__aeabi_dsub+0x3b8>
 800275a:	e0cf      	b.n	80028fc <__aeabi_dsub+0x558>
 800275c:	2580      	movs	r5, #128	; 0x80
 800275e:	4664      	mov	r4, ip
 8002760:	042d      	lsls	r5, r5, #16
 8002762:	432c      	orrs	r4, r5
 8002764:	46a4      	mov	ip, r4
 8002766:	2a38      	cmp	r2, #56	; 0x38
 8002768:	dc56      	bgt.n	8002818 <__aeabi_dsub+0x474>
 800276a:	2a1f      	cmp	r2, #31
 800276c:	dd00      	ble.n	8002770 <__aeabi_dsub+0x3cc>
 800276e:	e0d1      	b.n	8002914 <__aeabi_dsub+0x570>
 8002770:	2520      	movs	r5, #32
 8002772:	001e      	movs	r6, r3
 8002774:	1aad      	subs	r5, r5, r2
 8002776:	4664      	mov	r4, ip
 8002778:	40ab      	lsls	r3, r5
 800277a:	40ac      	lsls	r4, r5
 800277c:	40d6      	lsrs	r6, r2
 800277e:	1e5d      	subs	r5, r3, #1
 8002780:	41ab      	sbcs	r3, r5
 8002782:	4334      	orrs	r4, r6
 8002784:	4323      	orrs	r3, r4
 8002786:	4664      	mov	r4, ip
 8002788:	40d4      	lsrs	r4, r2
 800278a:	1b09      	subs	r1, r1, r4
 800278c:	e049      	b.n	8002822 <__aeabi_dsub+0x47e>
 800278e:	4660      	mov	r0, ip
 8002790:	1bdc      	subs	r4, r3, r7
 8002792:	1a46      	subs	r6, r0, r1
 8002794:	42a3      	cmp	r3, r4
 8002796:	4180      	sbcs	r0, r0
 8002798:	4240      	negs	r0, r0
 800279a:	4681      	mov	r9, r0
 800279c:	0030      	movs	r0, r6
 800279e:	464e      	mov	r6, r9
 80027a0:	1b80      	subs	r0, r0, r6
 80027a2:	4681      	mov	r9, r0
 80027a4:	0200      	lsls	r0, r0, #8
 80027a6:	d476      	bmi.n	8002896 <__aeabi_dsub+0x4f2>
 80027a8:	464b      	mov	r3, r9
 80027aa:	4323      	orrs	r3, r4
 80027ac:	d000      	beq.n	80027b0 <__aeabi_dsub+0x40c>
 80027ae:	e652      	b.n	8002456 <__aeabi_dsub+0xb2>
 80027b0:	2400      	movs	r4, #0
 80027b2:	2500      	movs	r5, #0
 80027b4:	e771      	b.n	800269a <__aeabi_dsub+0x2f6>
 80027b6:	4339      	orrs	r1, r7
 80027b8:	000c      	movs	r4, r1
 80027ba:	1e62      	subs	r2, r4, #1
 80027bc:	4194      	sbcs	r4, r2
 80027be:	18e4      	adds	r4, r4, r3
 80027c0:	429c      	cmp	r4, r3
 80027c2:	419b      	sbcs	r3, r3
 80027c4:	425b      	negs	r3, r3
 80027c6:	4463      	add	r3, ip
 80027c8:	4699      	mov	r9, r3
 80027ca:	464b      	mov	r3, r9
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	d400      	bmi.n	80027d2 <__aeabi_dsub+0x42e>
 80027d0:	e756      	b.n	8002680 <__aeabi_dsub+0x2dc>
 80027d2:	2301      	movs	r3, #1
 80027d4:	469c      	mov	ip, r3
 80027d6:	4ba8      	ldr	r3, [pc, #672]	; (8002a78 <__aeabi_dsub+0x6d4>)
 80027d8:	44e0      	add	r8, ip
 80027da:	4598      	cmp	r8, r3
 80027dc:	d038      	beq.n	8002850 <__aeabi_dsub+0x4ac>
 80027de:	464b      	mov	r3, r9
 80027e0:	48a6      	ldr	r0, [pc, #664]	; (8002a7c <__aeabi_dsub+0x6d8>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	4003      	ands	r3, r0
 80027e6:	0018      	movs	r0, r3
 80027e8:	0863      	lsrs	r3, r4, #1
 80027ea:	4014      	ands	r4, r2
 80027ec:	431c      	orrs	r4, r3
 80027ee:	07c3      	lsls	r3, r0, #31
 80027f0:	431c      	orrs	r4, r3
 80027f2:	0843      	lsrs	r3, r0, #1
 80027f4:	4699      	mov	r9, r3
 80027f6:	e657      	b.n	80024a8 <__aeabi_dsub+0x104>
 80027f8:	0010      	movs	r0, r2
 80027fa:	000e      	movs	r6, r1
 80027fc:	3820      	subs	r0, #32
 80027fe:	40c6      	lsrs	r6, r0
 8002800:	2a20      	cmp	r2, #32
 8002802:	d004      	beq.n	800280e <__aeabi_dsub+0x46a>
 8002804:	2040      	movs	r0, #64	; 0x40
 8002806:	1a82      	subs	r2, r0, r2
 8002808:	4091      	lsls	r1, r2
 800280a:	430f      	orrs	r7, r1
 800280c:	46b9      	mov	r9, r7
 800280e:	464f      	mov	r7, r9
 8002810:	1e7a      	subs	r2, r7, #1
 8002812:	4197      	sbcs	r7, r2
 8002814:	4337      	orrs	r7, r6
 8002816:	e60f      	b.n	8002438 <__aeabi_dsub+0x94>
 8002818:	4662      	mov	r2, ip
 800281a:	431a      	orrs	r2, r3
 800281c:	0013      	movs	r3, r2
 800281e:	1e5a      	subs	r2, r3, #1
 8002820:	4193      	sbcs	r3, r2
 8002822:	1afc      	subs	r4, r7, r3
 8002824:	42a7      	cmp	r7, r4
 8002826:	41bf      	sbcs	r7, r7
 8002828:	427f      	negs	r7, r7
 800282a:	1bcb      	subs	r3, r1, r7
 800282c:	4699      	mov	r9, r3
 800282e:	465d      	mov	r5, fp
 8002830:	4680      	mov	r8, r0
 8002832:	e608      	b.n	8002446 <__aeabi_dsub+0xa2>
 8002834:	4666      	mov	r6, ip
 8002836:	431e      	orrs	r6, r3
 8002838:	d100      	bne.n	800283c <__aeabi_dsub+0x498>
 800283a:	e0be      	b.n	80029ba <__aeabi_dsub+0x616>
 800283c:	1e56      	subs	r6, r2, #1
 800283e:	2a01      	cmp	r2, #1
 8002840:	d100      	bne.n	8002844 <__aeabi_dsub+0x4a0>
 8002842:	e109      	b.n	8002a58 <__aeabi_dsub+0x6b4>
 8002844:	4c8c      	ldr	r4, [pc, #560]	; (8002a78 <__aeabi_dsub+0x6d4>)
 8002846:	42a2      	cmp	r2, r4
 8002848:	d100      	bne.n	800284c <__aeabi_dsub+0x4a8>
 800284a:	e119      	b.n	8002a80 <__aeabi_dsub+0x6dc>
 800284c:	0032      	movs	r2, r6
 800284e:	e6c1      	b.n	80025d4 <__aeabi_dsub+0x230>
 8002850:	4642      	mov	r2, r8
 8002852:	2400      	movs	r4, #0
 8002854:	2300      	movs	r3, #0
 8002856:	e648      	b.n	80024ea <__aeabi_dsub+0x146>
 8002858:	2020      	movs	r0, #32
 800285a:	000c      	movs	r4, r1
 800285c:	1a80      	subs	r0, r0, r2
 800285e:	003e      	movs	r6, r7
 8002860:	4087      	lsls	r7, r0
 8002862:	4084      	lsls	r4, r0
 8002864:	40d6      	lsrs	r6, r2
 8002866:	1e78      	subs	r0, r7, #1
 8002868:	4187      	sbcs	r7, r0
 800286a:	40d1      	lsrs	r1, r2
 800286c:	4334      	orrs	r4, r6
 800286e:	433c      	orrs	r4, r7
 8002870:	448c      	add	ip, r1
 8002872:	e7a4      	b.n	80027be <__aeabi_dsub+0x41a>
 8002874:	4a80      	ldr	r2, [pc, #512]	; (8002a78 <__aeabi_dsub+0x6d4>)
 8002876:	4290      	cmp	r0, r2
 8002878:	d100      	bne.n	800287c <__aeabi_dsub+0x4d8>
 800287a:	e0e9      	b.n	8002a50 <__aeabi_dsub+0x6ac>
 800287c:	19df      	adds	r7, r3, r7
 800287e:	429f      	cmp	r7, r3
 8002880:	419b      	sbcs	r3, r3
 8002882:	4461      	add	r1, ip
 8002884:	425b      	negs	r3, r3
 8002886:	18c9      	adds	r1, r1, r3
 8002888:	07cc      	lsls	r4, r1, #31
 800288a:	087f      	lsrs	r7, r7, #1
 800288c:	084b      	lsrs	r3, r1, #1
 800288e:	4699      	mov	r9, r3
 8002890:	4680      	mov	r8, r0
 8002892:	433c      	orrs	r4, r7
 8002894:	e6f4      	b.n	8002680 <__aeabi_dsub+0x2dc>
 8002896:	1afc      	subs	r4, r7, r3
 8002898:	42a7      	cmp	r7, r4
 800289a:	41bf      	sbcs	r7, r7
 800289c:	4663      	mov	r3, ip
 800289e:	427f      	negs	r7, r7
 80028a0:	1ac9      	subs	r1, r1, r3
 80028a2:	1bcb      	subs	r3, r1, r7
 80028a4:	4699      	mov	r9, r3
 80028a6:	465d      	mov	r5, fp
 80028a8:	e5d5      	b.n	8002456 <__aeabi_dsub+0xb2>
 80028aa:	08ff      	lsrs	r7, r7, #3
 80028ac:	074b      	lsls	r3, r1, #29
 80028ae:	465d      	mov	r5, fp
 80028b0:	433b      	orrs	r3, r7
 80028b2:	08cc      	lsrs	r4, r1, #3
 80028b4:	e6ee      	b.n	8002694 <__aeabi_dsub+0x2f0>
 80028b6:	4662      	mov	r2, ip
 80028b8:	431a      	orrs	r2, r3
 80028ba:	d000      	beq.n	80028be <__aeabi_dsub+0x51a>
 80028bc:	e082      	b.n	80029c4 <__aeabi_dsub+0x620>
 80028be:	000b      	movs	r3, r1
 80028c0:	433b      	orrs	r3, r7
 80028c2:	d11b      	bne.n	80028fc <__aeabi_dsub+0x558>
 80028c4:	2480      	movs	r4, #128	; 0x80
 80028c6:	2500      	movs	r5, #0
 80028c8:	0324      	lsls	r4, r4, #12
 80028ca:	e6f9      	b.n	80026c0 <__aeabi_dsub+0x31c>
 80028cc:	19dc      	adds	r4, r3, r7
 80028ce:	429c      	cmp	r4, r3
 80028d0:	419b      	sbcs	r3, r3
 80028d2:	4461      	add	r1, ip
 80028d4:	4689      	mov	r9, r1
 80028d6:	425b      	negs	r3, r3
 80028d8:	4499      	add	r9, r3
 80028da:	464b      	mov	r3, r9
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	d444      	bmi.n	800296a <__aeabi_dsub+0x5c6>
 80028e0:	2301      	movs	r3, #1
 80028e2:	4698      	mov	r8, r3
 80028e4:	e6cc      	b.n	8002680 <__aeabi_dsub+0x2dc>
 80028e6:	1bdc      	subs	r4, r3, r7
 80028e8:	4662      	mov	r2, ip
 80028ea:	42a3      	cmp	r3, r4
 80028ec:	419b      	sbcs	r3, r3
 80028ee:	1a51      	subs	r1, r2, r1
 80028f0:	425b      	negs	r3, r3
 80028f2:	1acb      	subs	r3, r1, r3
 80028f4:	4699      	mov	r9, r3
 80028f6:	2301      	movs	r3, #1
 80028f8:	4698      	mov	r8, r3
 80028fa:	e5a4      	b.n	8002446 <__aeabi_dsub+0xa2>
 80028fc:	08ff      	lsrs	r7, r7, #3
 80028fe:	074b      	lsls	r3, r1, #29
 8002900:	465d      	mov	r5, fp
 8002902:	433b      	orrs	r3, r7
 8002904:	08cc      	lsrs	r4, r1, #3
 8002906:	e6d7      	b.n	80026b8 <__aeabi_dsub+0x314>
 8002908:	4662      	mov	r2, ip
 800290a:	431a      	orrs	r2, r3
 800290c:	0014      	movs	r4, r2
 800290e:	1e63      	subs	r3, r4, #1
 8002910:	419c      	sbcs	r4, r3
 8002912:	e679      	b.n	8002608 <__aeabi_dsub+0x264>
 8002914:	0015      	movs	r5, r2
 8002916:	4664      	mov	r4, ip
 8002918:	3d20      	subs	r5, #32
 800291a:	40ec      	lsrs	r4, r5
 800291c:	46a0      	mov	r8, r4
 800291e:	2a20      	cmp	r2, #32
 8002920:	d005      	beq.n	800292e <__aeabi_dsub+0x58a>
 8002922:	2540      	movs	r5, #64	; 0x40
 8002924:	4664      	mov	r4, ip
 8002926:	1aaa      	subs	r2, r5, r2
 8002928:	4094      	lsls	r4, r2
 800292a:	4323      	orrs	r3, r4
 800292c:	469a      	mov	sl, r3
 800292e:	4654      	mov	r4, sl
 8002930:	1e63      	subs	r3, r4, #1
 8002932:	419c      	sbcs	r4, r3
 8002934:	4643      	mov	r3, r8
 8002936:	4323      	orrs	r3, r4
 8002938:	e773      	b.n	8002822 <__aeabi_dsub+0x47e>
 800293a:	4662      	mov	r2, ip
 800293c:	431a      	orrs	r2, r3
 800293e:	d023      	beq.n	8002988 <__aeabi_dsub+0x5e4>
 8002940:	000a      	movs	r2, r1
 8002942:	433a      	orrs	r2, r7
 8002944:	d000      	beq.n	8002948 <__aeabi_dsub+0x5a4>
 8002946:	e0a0      	b.n	8002a8a <__aeabi_dsub+0x6e6>
 8002948:	4662      	mov	r2, ip
 800294a:	08db      	lsrs	r3, r3, #3
 800294c:	0752      	lsls	r2, r2, #29
 800294e:	4313      	orrs	r3, r2
 8002950:	4662      	mov	r2, ip
 8002952:	08d4      	lsrs	r4, r2, #3
 8002954:	e6b0      	b.n	80026b8 <__aeabi_dsub+0x314>
 8002956:	000b      	movs	r3, r1
 8002958:	433b      	orrs	r3, r7
 800295a:	d100      	bne.n	800295e <__aeabi_dsub+0x5ba>
 800295c:	e728      	b.n	80027b0 <__aeabi_dsub+0x40c>
 800295e:	08ff      	lsrs	r7, r7, #3
 8002960:	074b      	lsls	r3, r1, #29
 8002962:	465d      	mov	r5, fp
 8002964:	433b      	orrs	r3, r7
 8002966:	08cc      	lsrs	r4, r1, #3
 8002968:	e697      	b.n	800269a <__aeabi_dsub+0x2f6>
 800296a:	2302      	movs	r3, #2
 800296c:	4698      	mov	r8, r3
 800296e:	e736      	b.n	80027de <__aeabi_dsub+0x43a>
 8002970:	1afc      	subs	r4, r7, r3
 8002972:	42a7      	cmp	r7, r4
 8002974:	41bf      	sbcs	r7, r7
 8002976:	4663      	mov	r3, ip
 8002978:	427f      	negs	r7, r7
 800297a:	1ac9      	subs	r1, r1, r3
 800297c:	1bcb      	subs	r3, r1, r7
 800297e:	4699      	mov	r9, r3
 8002980:	2301      	movs	r3, #1
 8002982:	465d      	mov	r5, fp
 8002984:	4698      	mov	r8, r3
 8002986:	e55e      	b.n	8002446 <__aeabi_dsub+0xa2>
 8002988:	074b      	lsls	r3, r1, #29
 800298a:	08ff      	lsrs	r7, r7, #3
 800298c:	433b      	orrs	r3, r7
 800298e:	08cc      	lsrs	r4, r1, #3
 8002990:	e692      	b.n	80026b8 <__aeabi_dsub+0x314>
 8002992:	1bdc      	subs	r4, r3, r7
 8002994:	4660      	mov	r0, ip
 8002996:	42a3      	cmp	r3, r4
 8002998:	41b6      	sbcs	r6, r6
 800299a:	1a40      	subs	r0, r0, r1
 800299c:	4276      	negs	r6, r6
 800299e:	1b80      	subs	r0, r0, r6
 80029a0:	4681      	mov	r9, r0
 80029a2:	0200      	lsls	r0, r0, #8
 80029a4:	d560      	bpl.n	8002a68 <__aeabi_dsub+0x6c4>
 80029a6:	1afc      	subs	r4, r7, r3
 80029a8:	42a7      	cmp	r7, r4
 80029aa:	41bf      	sbcs	r7, r7
 80029ac:	4663      	mov	r3, ip
 80029ae:	427f      	negs	r7, r7
 80029b0:	1ac9      	subs	r1, r1, r3
 80029b2:	1bcb      	subs	r3, r1, r7
 80029b4:	4699      	mov	r9, r3
 80029b6:	465d      	mov	r5, fp
 80029b8:	e576      	b.n	80024a8 <__aeabi_dsub+0x104>
 80029ba:	08ff      	lsrs	r7, r7, #3
 80029bc:	074b      	lsls	r3, r1, #29
 80029be:	433b      	orrs	r3, r7
 80029c0:	08cc      	lsrs	r4, r1, #3
 80029c2:	e667      	b.n	8002694 <__aeabi_dsub+0x2f0>
 80029c4:	000a      	movs	r2, r1
 80029c6:	08db      	lsrs	r3, r3, #3
 80029c8:	433a      	orrs	r2, r7
 80029ca:	d100      	bne.n	80029ce <__aeabi_dsub+0x62a>
 80029cc:	e66f      	b.n	80026ae <__aeabi_dsub+0x30a>
 80029ce:	4662      	mov	r2, ip
 80029d0:	0752      	lsls	r2, r2, #29
 80029d2:	4313      	orrs	r3, r2
 80029d4:	4662      	mov	r2, ip
 80029d6:	08d4      	lsrs	r4, r2, #3
 80029d8:	2280      	movs	r2, #128	; 0x80
 80029da:	0312      	lsls	r2, r2, #12
 80029dc:	4214      	tst	r4, r2
 80029de:	d007      	beq.n	80029f0 <__aeabi_dsub+0x64c>
 80029e0:	08c8      	lsrs	r0, r1, #3
 80029e2:	4210      	tst	r0, r2
 80029e4:	d104      	bne.n	80029f0 <__aeabi_dsub+0x64c>
 80029e6:	465d      	mov	r5, fp
 80029e8:	0004      	movs	r4, r0
 80029ea:	08fb      	lsrs	r3, r7, #3
 80029ec:	0749      	lsls	r1, r1, #29
 80029ee:	430b      	orrs	r3, r1
 80029f0:	0f5a      	lsrs	r2, r3, #29
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	08db      	lsrs	r3, r3, #3
 80029f6:	0752      	lsls	r2, r2, #29
 80029f8:	4313      	orrs	r3, r2
 80029fa:	e65d      	b.n	80026b8 <__aeabi_dsub+0x314>
 80029fc:	074b      	lsls	r3, r1, #29
 80029fe:	08ff      	lsrs	r7, r7, #3
 8002a00:	433b      	orrs	r3, r7
 8002a02:	08cc      	lsrs	r4, r1, #3
 8002a04:	e649      	b.n	800269a <__aeabi_dsub+0x2f6>
 8002a06:	19dc      	adds	r4, r3, r7
 8002a08:	429c      	cmp	r4, r3
 8002a0a:	419b      	sbcs	r3, r3
 8002a0c:	4461      	add	r1, ip
 8002a0e:	4689      	mov	r9, r1
 8002a10:	425b      	negs	r3, r3
 8002a12:	4499      	add	r9, r3
 8002a14:	464b      	mov	r3, r9
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	d400      	bmi.n	8002a1c <__aeabi_dsub+0x678>
 8002a1a:	e631      	b.n	8002680 <__aeabi_dsub+0x2dc>
 8002a1c:	464a      	mov	r2, r9
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <__aeabi_dsub+0x6d8>)
 8002a20:	401a      	ands	r2, r3
 8002a22:	2301      	movs	r3, #1
 8002a24:	4691      	mov	r9, r2
 8002a26:	4698      	mov	r8, r3
 8002a28:	e62a      	b.n	8002680 <__aeabi_dsub+0x2dc>
 8002a2a:	0016      	movs	r6, r2
 8002a2c:	4664      	mov	r4, ip
 8002a2e:	3e20      	subs	r6, #32
 8002a30:	40f4      	lsrs	r4, r6
 8002a32:	46a0      	mov	r8, r4
 8002a34:	2a20      	cmp	r2, #32
 8002a36:	d005      	beq.n	8002a44 <__aeabi_dsub+0x6a0>
 8002a38:	2640      	movs	r6, #64	; 0x40
 8002a3a:	4664      	mov	r4, ip
 8002a3c:	1ab2      	subs	r2, r6, r2
 8002a3e:	4094      	lsls	r4, r2
 8002a40:	4323      	orrs	r3, r4
 8002a42:	469a      	mov	sl, r3
 8002a44:	4654      	mov	r4, sl
 8002a46:	1e63      	subs	r3, r4, #1
 8002a48:	419c      	sbcs	r4, r3
 8002a4a:	4643      	mov	r3, r8
 8002a4c:	431c      	orrs	r4, r3
 8002a4e:	e5db      	b.n	8002608 <__aeabi_dsub+0x264>
 8002a50:	0002      	movs	r2, r0
 8002a52:	2400      	movs	r4, #0
 8002a54:	2300      	movs	r3, #0
 8002a56:	e548      	b.n	80024ea <__aeabi_dsub+0x146>
 8002a58:	19dc      	adds	r4, r3, r7
 8002a5a:	42bc      	cmp	r4, r7
 8002a5c:	41bf      	sbcs	r7, r7
 8002a5e:	4461      	add	r1, ip
 8002a60:	4689      	mov	r9, r1
 8002a62:	427f      	negs	r7, r7
 8002a64:	44b9      	add	r9, r7
 8002a66:	e738      	b.n	80028da <__aeabi_dsub+0x536>
 8002a68:	464b      	mov	r3, r9
 8002a6a:	4323      	orrs	r3, r4
 8002a6c:	d100      	bne.n	8002a70 <__aeabi_dsub+0x6cc>
 8002a6e:	e69f      	b.n	80027b0 <__aeabi_dsub+0x40c>
 8002a70:	e606      	b.n	8002680 <__aeabi_dsub+0x2dc>
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	000007fe 	.word	0x000007fe
 8002a78:	000007ff 	.word	0x000007ff
 8002a7c:	ff7fffff 	.word	0xff7fffff
 8002a80:	08ff      	lsrs	r7, r7, #3
 8002a82:	074b      	lsls	r3, r1, #29
 8002a84:	433b      	orrs	r3, r7
 8002a86:	08cc      	lsrs	r4, r1, #3
 8002a88:	e616      	b.n	80026b8 <__aeabi_dsub+0x314>
 8002a8a:	4662      	mov	r2, ip
 8002a8c:	08db      	lsrs	r3, r3, #3
 8002a8e:	0752      	lsls	r2, r2, #29
 8002a90:	4313      	orrs	r3, r2
 8002a92:	4662      	mov	r2, ip
 8002a94:	08d4      	lsrs	r4, r2, #3
 8002a96:	2280      	movs	r2, #128	; 0x80
 8002a98:	0312      	lsls	r2, r2, #12
 8002a9a:	4214      	tst	r4, r2
 8002a9c:	d007      	beq.n	8002aae <__aeabi_dsub+0x70a>
 8002a9e:	08c8      	lsrs	r0, r1, #3
 8002aa0:	4210      	tst	r0, r2
 8002aa2:	d104      	bne.n	8002aae <__aeabi_dsub+0x70a>
 8002aa4:	465d      	mov	r5, fp
 8002aa6:	0004      	movs	r4, r0
 8002aa8:	08fb      	lsrs	r3, r7, #3
 8002aaa:	0749      	lsls	r1, r1, #29
 8002aac:	430b      	orrs	r3, r1
 8002aae:	0f5a      	lsrs	r2, r3, #29
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	0752      	lsls	r2, r2, #29
 8002ab4:	08db      	lsrs	r3, r3, #3
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	e5fe      	b.n	80026b8 <__aeabi_dsub+0x314>
 8002aba:	2300      	movs	r3, #0
 8002abc:	4a01      	ldr	r2, [pc, #4]	; (8002ac4 <__aeabi_dsub+0x720>)
 8002abe:	001c      	movs	r4, r3
 8002ac0:	e513      	b.n	80024ea <__aeabi_dsub+0x146>
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	000007ff 	.word	0x000007ff

08002ac8 <__aeabi_dcmpun>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	0005      	movs	r5, r0
 8002acc:	480c      	ldr	r0, [pc, #48]	; (8002b00 <__aeabi_dcmpun+0x38>)
 8002ace:	031c      	lsls	r4, r3, #12
 8002ad0:	0016      	movs	r6, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	030a      	lsls	r2, r1, #12
 8002ad6:	0049      	lsls	r1, r1, #1
 8002ad8:	0b12      	lsrs	r2, r2, #12
 8002ada:	0d49      	lsrs	r1, r1, #21
 8002adc:	0b24      	lsrs	r4, r4, #12
 8002ade:	0d5b      	lsrs	r3, r3, #21
 8002ae0:	4281      	cmp	r1, r0
 8002ae2:	d008      	beq.n	8002af6 <__aeabi_dcmpun+0x2e>
 8002ae4:	4a06      	ldr	r2, [pc, #24]	; (8002b00 <__aeabi_dcmpun+0x38>)
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d103      	bne.n	8002af4 <__aeabi_dcmpun+0x2c>
 8002aec:	0020      	movs	r0, r4
 8002aee:	4330      	orrs	r0, r6
 8002af0:	1e43      	subs	r3, r0, #1
 8002af2:	4198      	sbcs	r0, r3
 8002af4:	bd70      	pop	{r4, r5, r6, pc}
 8002af6:	2001      	movs	r0, #1
 8002af8:	432a      	orrs	r2, r5
 8002afa:	d1fb      	bne.n	8002af4 <__aeabi_dcmpun+0x2c>
 8002afc:	e7f2      	b.n	8002ae4 <__aeabi_dcmpun+0x1c>
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	000007ff 	.word	0x000007ff

08002b04 <__aeabi_d2iz>:
 8002b04:	000a      	movs	r2, r1
 8002b06:	b530      	push	{r4, r5, lr}
 8002b08:	4c13      	ldr	r4, [pc, #76]	; (8002b58 <__aeabi_d2iz+0x54>)
 8002b0a:	0053      	lsls	r3, r2, #1
 8002b0c:	0309      	lsls	r1, r1, #12
 8002b0e:	0005      	movs	r5, r0
 8002b10:	0b09      	lsrs	r1, r1, #12
 8002b12:	2000      	movs	r0, #0
 8002b14:	0d5b      	lsrs	r3, r3, #21
 8002b16:	0fd2      	lsrs	r2, r2, #31
 8002b18:	42a3      	cmp	r3, r4
 8002b1a:	dd04      	ble.n	8002b26 <__aeabi_d2iz+0x22>
 8002b1c:	480f      	ldr	r0, [pc, #60]	; (8002b5c <__aeabi_d2iz+0x58>)
 8002b1e:	4283      	cmp	r3, r0
 8002b20:	dd02      	ble.n	8002b28 <__aeabi_d2iz+0x24>
 8002b22:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <__aeabi_d2iz+0x5c>)
 8002b24:	18d0      	adds	r0, r2, r3
 8002b26:	bd30      	pop	{r4, r5, pc}
 8002b28:	2080      	movs	r0, #128	; 0x80
 8002b2a:	0340      	lsls	r0, r0, #13
 8002b2c:	4301      	orrs	r1, r0
 8002b2e:	480d      	ldr	r0, [pc, #52]	; (8002b64 <__aeabi_d2iz+0x60>)
 8002b30:	1ac0      	subs	r0, r0, r3
 8002b32:	281f      	cmp	r0, #31
 8002b34:	dd08      	ble.n	8002b48 <__aeabi_d2iz+0x44>
 8002b36:	480c      	ldr	r0, [pc, #48]	; (8002b68 <__aeabi_d2iz+0x64>)
 8002b38:	1ac3      	subs	r3, r0, r3
 8002b3a:	40d9      	lsrs	r1, r3
 8002b3c:	000b      	movs	r3, r1
 8002b3e:	4258      	negs	r0, r3
 8002b40:	2a00      	cmp	r2, #0
 8002b42:	d1f0      	bne.n	8002b26 <__aeabi_d2iz+0x22>
 8002b44:	0018      	movs	r0, r3
 8002b46:	e7ee      	b.n	8002b26 <__aeabi_d2iz+0x22>
 8002b48:	4c08      	ldr	r4, [pc, #32]	; (8002b6c <__aeabi_d2iz+0x68>)
 8002b4a:	40c5      	lsrs	r5, r0
 8002b4c:	46a4      	mov	ip, r4
 8002b4e:	4463      	add	r3, ip
 8002b50:	4099      	lsls	r1, r3
 8002b52:	000b      	movs	r3, r1
 8002b54:	432b      	orrs	r3, r5
 8002b56:	e7f2      	b.n	8002b3e <__aeabi_d2iz+0x3a>
 8002b58:	000003fe 	.word	0x000003fe
 8002b5c:	0000041d 	.word	0x0000041d
 8002b60:	7fffffff 	.word	0x7fffffff
 8002b64:	00000433 	.word	0x00000433
 8002b68:	00000413 	.word	0x00000413
 8002b6c:	fffffbed 	.word	0xfffffbed

08002b70 <__aeabi_i2d>:
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	2800      	cmp	r0, #0
 8002b74:	d016      	beq.n	8002ba4 <__aeabi_i2d+0x34>
 8002b76:	17c3      	asrs	r3, r0, #31
 8002b78:	18c5      	adds	r5, r0, r3
 8002b7a:	405d      	eors	r5, r3
 8002b7c:	0fc4      	lsrs	r4, r0, #31
 8002b7e:	0028      	movs	r0, r5
 8002b80:	f000 f91c 	bl	8002dbc <__clzsi2>
 8002b84:	4a11      	ldr	r2, [pc, #68]	; (8002bcc <__aeabi_i2d+0x5c>)
 8002b86:	1a12      	subs	r2, r2, r0
 8002b88:	280a      	cmp	r0, #10
 8002b8a:	dc16      	bgt.n	8002bba <__aeabi_i2d+0x4a>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	002e      	movs	r6, r5
 8002b90:	3315      	adds	r3, #21
 8002b92:	409e      	lsls	r6, r3
 8002b94:	230b      	movs	r3, #11
 8002b96:	1a18      	subs	r0, r3, r0
 8002b98:	40c5      	lsrs	r5, r0
 8002b9a:	0552      	lsls	r2, r2, #21
 8002b9c:	032d      	lsls	r5, r5, #12
 8002b9e:	0b2d      	lsrs	r5, r5, #12
 8002ba0:	0d53      	lsrs	r3, r2, #21
 8002ba2:	e003      	b.n	8002bac <__aeabi_i2d+0x3c>
 8002ba4:	2400      	movs	r4, #0
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2500      	movs	r5, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	051b      	lsls	r3, r3, #20
 8002bae:	432b      	orrs	r3, r5
 8002bb0:	07e4      	lsls	r4, r4, #31
 8002bb2:	4323      	orrs	r3, r4
 8002bb4:	0030      	movs	r0, r6
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	bd70      	pop	{r4, r5, r6, pc}
 8002bba:	380b      	subs	r0, #11
 8002bbc:	4085      	lsls	r5, r0
 8002bbe:	0552      	lsls	r2, r2, #21
 8002bc0:	032d      	lsls	r5, r5, #12
 8002bc2:	2600      	movs	r6, #0
 8002bc4:	0b2d      	lsrs	r5, r5, #12
 8002bc6:	0d53      	lsrs	r3, r2, #21
 8002bc8:	e7f0      	b.n	8002bac <__aeabi_i2d+0x3c>
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	0000041e 	.word	0x0000041e

08002bd0 <__aeabi_ui2d>:
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	1e04      	subs	r4, r0, #0
 8002bd4:	d010      	beq.n	8002bf8 <__aeabi_ui2d+0x28>
 8002bd6:	f000 f8f1 	bl	8002dbc <__clzsi2>
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <__aeabi_ui2d+0x48>)
 8002bdc:	1a1b      	subs	r3, r3, r0
 8002bde:	280a      	cmp	r0, #10
 8002be0:	dc11      	bgt.n	8002c06 <__aeabi_ui2d+0x36>
 8002be2:	220b      	movs	r2, #11
 8002be4:	0021      	movs	r1, r4
 8002be6:	1a12      	subs	r2, r2, r0
 8002be8:	40d1      	lsrs	r1, r2
 8002bea:	3015      	adds	r0, #21
 8002bec:	030a      	lsls	r2, r1, #12
 8002bee:	055b      	lsls	r3, r3, #21
 8002bf0:	4084      	lsls	r4, r0
 8002bf2:	0b12      	lsrs	r2, r2, #12
 8002bf4:	0d5b      	lsrs	r3, r3, #21
 8002bf6:	e001      	b.n	8002bfc <__aeabi_ui2d+0x2c>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	051b      	lsls	r3, r3, #20
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	0020      	movs	r0, r4
 8002c02:	0019      	movs	r1, r3
 8002c04:	bd10      	pop	{r4, pc}
 8002c06:	0022      	movs	r2, r4
 8002c08:	380b      	subs	r0, #11
 8002c0a:	4082      	lsls	r2, r0
 8002c0c:	055b      	lsls	r3, r3, #21
 8002c0e:	0312      	lsls	r2, r2, #12
 8002c10:	2400      	movs	r4, #0
 8002c12:	0b12      	lsrs	r2, r2, #12
 8002c14:	0d5b      	lsrs	r3, r3, #21
 8002c16:	e7f1      	b.n	8002bfc <__aeabi_ui2d+0x2c>
 8002c18:	0000041e 	.word	0x0000041e

08002c1c <__aeabi_f2d>:
 8002c1c:	b570      	push	{r4, r5, r6, lr}
 8002c1e:	0043      	lsls	r3, r0, #1
 8002c20:	0246      	lsls	r6, r0, #9
 8002c22:	0fc4      	lsrs	r4, r0, #31
 8002c24:	20fe      	movs	r0, #254	; 0xfe
 8002c26:	0e1b      	lsrs	r3, r3, #24
 8002c28:	1c59      	adds	r1, r3, #1
 8002c2a:	0a75      	lsrs	r5, r6, #9
 8002c2c:	4208      	tst	r0, r1
 8002c2e:	d00c      	beq.n	8002c4a <__aeabi_f2d+0x2e>
 8002c30:	22e0      	movs	r2, #224	; 0xe0
 8002c32:	0092      	lsls	r2, r2, #2
 8002c34:	4694      	mov	ip, r2
 8002c36:	076d      	lsls	r5, r5, #29
 8002c38:	0b36      	lsrs	r6, r6, #12
 8002c3a:	4463      	add	r3, ip
 8002c3c:	051b      	lsls	r3, r3, #20
 8002c3e:	4333      	orrs	r3, r6
 8002c40:	07e4      	lsls	r4, r4, #31
 8002c42:	4323      	orrs	r3, r4
 8002c44:	0028      	movs	r0, r5
 8002c46:	0019      	movs	r1, r3
 8002c48:	bd70      	pop	{r4, r5, r6, pc}
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d114      	bne.n	8002c78 <__aeabi_f2d+0x5c>
 8002c4e:	2d00      	cmp	r5, #0
 8002c50:	d01b      	beq.n	8002c8a <__aeabi_f2d+0x6e>
 8002c52:	0028      	movs	r0, r5
 8002c54:	f000 f8b2 	bl	8002dbc <__clzsi2>
 8002c58:	280a      	cmp	r0, #10
 8002c5a:	dc1c      	bgt.n	8002c96 <__aeabi_f2d+0x7a>
 8002c5c:	230b      	movs	r3, #11
 8002c5e:	002e      	movs	r6, r5
 8002c60:	1a1b      	subs	r3, r3, r0
 8002c62:	40de      	lsrs	r6, r3
 8002c64:	0003      	movs	r3, r0
 8002c66:	3315      	adds	r3, #21
 8002c68:	409d      	lsls	r5, r3
 8002c6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <__aeabi_f2d+0x88>)
 8002c6c:	0336      	lsls	r6, r6, #12
 8002c6e:	1a12      	subs	r2, r2, r0
 8002c70:	0552      	lsls	r2, r2, #21
 8002c72:	0b36      	lsrs	r6, r6, #12
 8002c74:	0d53      	lsrs	r3, r2, #21
 8002c76:	e7e1      	b.n	8002c3c <__aeabi_f2d+0x20>
 8002c78:	2d00      	cmp	r5, #0
 8002c7a:	d009      	beq.n	8002c90 <__aeabi_f2d+0x74>
 8002c7c:	2280      	movs	r2, #128	; 0x80
 8002c7e:	0b36      	lsrs	r6, r6, #12
 8002c80:	0312      	lsls	r2, r2, #12
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <__aeabi_f2d+0x8c>)
 8002c84:	076d      	lsls	r5, r5, #29
 8002c86:	4316      	orrs	r6, r2
 8002c88:	e7d8      	b.n	8002c3c <__aeabi_f2d+0x20>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2600      	movs	r6, #0
 8002c8e:	e7d5      	b.n	8002c3c <__aeabi_f2d+0x20>
 8002c90:	2600      	movs	r6, #0
 8002c92:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <__aeabi_f2d+0x8c>)
 8002c94:	e7d2      	b.n	8002c3c <__aeabi_f2d+0x20>
 8002c96:	0003      	movs	r3, r0
 8002c98:	3b0b      	subs	r3, #11
 8002c9a:	409d      	lsls	r5, r3
 8002c9c:	002e      	movs	r6, r5
 8002c9e:	2500      	movs	r5, #0
 8002ca0:	e7e3      	b.n	8002c6a <__aeabi_f2d+0x4e>
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	00000389 	.word	0x00000389
 8002ca8:	000007ff 	.word	0x000007ff

08002cac <__aeabi_d2f>:
 8002cac:	0002      	movs	r2, r0
 8002cae:	004b      	lsls	r3, r1, #1
 8002cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb2:	0d5b      	lsrs	r3, r3, #21
 8002cb4:	030c      	lsls	r4, r1, #12
 8002cb6:	4e3d      	ldr	r6, [pc, #244]	; (8002dac <__aeabi_d2f+0x100>)
 8002cb8:	0a64      	lsrs	r4, r4, #9
 8002cba:	0f40      	lsrs	r0, r0, #29
 8002cbc:	1c5f      	adds	r7, r3, #1
 8002cbe:	0fc9      	lsrs	r1, r1, #31
 8002cc0:	4304      	orrs	r4, r0
 8002cc2:	00d5      	lsls	r5, r2, #3
 8002cc4:	4237      	tst	r7, r6
 8002cc6:	d00a      	beq.n	8002cde <__aeabi_d2f+0x32>
 8002cc8:	4839      	ldr	r0, [pc, #228]	; (8002db0 <__aeabi_d2f+0x104>)
 8002cca:	181e      	adds	r6, r3, r0
 8002ccc:	2efe      	cmp	r6, #254	; 0xfe
 8002cce:	dd16      	ble.n	8002cfe <__aeabi_d2f+0x52>
 8002cd0:	20ff      	movs	r0, #255	; 0xff
 8002cd2:	2400      	movs	r4, #0
 8002cd4:	05c0      	lsls	r0, r0, #23
 8002cd6:	4320      	orrs	r0, r4
 8002cd8:	07c9      	lsls	r1, r1, #31
 8002cda:	4308      	orrs	r0, r1
 8002cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <__aeabi_d2f+0x44>
 8002ce2:	432c      	orrs	r4, r5
 8002ce4:	d026      	beq.n	8002d34 <__aeabi_d2f+0x88>
 8002ce6:	2205      	movs	r2, #5
 8002ce8:	0192      	lsls	r2, r2, #6
 8002cea:	0a54      	lsrs	r4, r2, #9
 8002cec:	b2d8      	uxtb	r0, r3
 8002cee:	e7f1      	b.n	8002cd4 <__aeabi_d2f+0x28>
 8002cf0:	4325      	orrs	r5, r4
 8002cf2:	d0ed      	beq.n	8002cd0 <__aeabi_d2f+0x24>
 8002cf4:	2080      	movs	r0, #128	; 0x80
 8002cf6:	03c0      	lsls	r0, r0, #15
 8002cf8:	4304      	orrs	r4, r0
 8002cfa:	20ff      	movs	r0, #255	; 0xff
 8002cfc:	e7ea      	b.n	8002cd4 <__aeabi_d2f+0x28>
 8002cfe:	2e00      	cmp	r6, #0
 8002d00:	dd1b      	ble.n	8002d3a <__aeabi_d2f+0x8e>
 8002d02:	0192      	lsls	r2, r2, #6
 8002d04:	1e53      	subs	r3, r2, #1
 8002d06:	419a      	sbcs	r2, r3
 8002d08:	00e4      	lsls	r4, r4, #3
 8002d0a:	0f6d      	lsrs	r5, r5, #29
 8002d0c:	4322      	orrs	r2, r4
 8002d0e:	432a      	orrs	r2, r5
 8002d10:	0753      	lsls	r3, r2, #29
 8002d12:	d048      	beq.n	8002da6 <__aeabi_d2f+0xfa>
 8002d14:	230f      	movs	r3, #15
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d000      	beq.n	8002d1e <__aeabi_d2f+0x72>
 8002d1c:	3204      	adds	r2, #4
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	04db      	lsls	r3, r3, #19
 8002d22:	4013      	ands	r3, r2
 8002d24:	d03f      	beq.n	8002da6 <__aeabi_d2f+0xfa>
 8002d26:	1c70      	adds	r0, r6, #1
 8002d28:	2efe      	cmp	r6, #254	; 0xfe
 8002d2a:	d0d1      	beq.n	8002cd0 <__aeabi_d2f+0x24>
 8002d2c:	0192      	lsls	r2, r2, #6
 8002d2e:	0a54      	lsrs	r4, r2, #9
 8002d30:	b2c0      	uxtb	r0, r0
 8002d32:	e7cf      	b.n	8002cd4 <__aeabi_d2f+0x28>
 8002d34:	2000      	movs	r0, #0
 8002d36:	2400      	movs	r4, #0
 8002d38:	e7cc      	b.n	8002cd4 <__aeabi_d2f+0x28>
 8002d3a:	0032      	movs	r2, r6
 8002d3c:	3217      	adds	r2, #23
 8002d3e:	db22      	blt.n	8002d86 <__aeabi_d2f+0xda>
 8002d40:	2080      	movs	r0, #128	; 0x80
 8002d42:	0400      	lsls	r0, r0, #16
 8002d44:	4320      	orrs	r0, r4
 8002d46:	241e      	movs	r4, #30
 8002d48:	1ba4      	subs	r4, r4, r6
 8002d4a:	2c1f      	cmp	r4, #31
 8002d4c:	dd1d      	ble.n	8002d8a <__aeabi_d2f+0xde>
 8002d4e:	2202      	movs	r2, #2
 8002d50:	4252      	negs	r2, r2
 8002d52:	1b96      	subs	r6, r2, r6
 8002d54:	0002      	movs	r2, r0
 8002d56:	40f2      	lsrs	r2, r6
 8002d58:	0016      	movs	r6, r2
 8002d5a:	2c20      	cmp	r4, #32
 8002d5c:	d004      	beq.n	8002d68 <__aeabi_d2f+0xbc>
 8002d5e:	4a15      	ldr	r2, [pc, #84]	; (8002db4 <__aeabi_d2f+0x108>)
 8002d60:	4694      	mov	ip, r2
 8002d62:	4463      	add	r3, ip
 8002d64:	4098      	lsls	r0, r3
 8002d66:	4305      	orrs	r5, r0
 8002d68:	002a      	movs	r2, r5
 8002d6a:	1e53      	subs	r3, r2, #1
 8002d6c:	419a      	sbcs	r2, r3
 8002d6e:	4332      	orrs	r2, r6
 8002d70:	2600      	movs	r6, #0
 8002d72:	0753      	lsls	r3, r2, #29
 8002d74:	d1ce      	bne.n	8002d14 <__aeabi_d2f+0x68>
 8002d76:	2480      	movs	r4, #128	; 0x80
 8002d78:	0013      	movs	r3, r2
 8002d7a:	04e4      	lsls	r4, r4, #19
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	4023      	ands	r3, r4
 8002d80:	4222      	tst	r2, r4
 8002d82:	d1d3      	bne.n	8002d2c <__aeabi_d2f+0x80>
 8002d84:	e7b0      	b.n	8002ce8 <__aeabi_d2f+0x3c>
 8002d86:	2300      	movs	r3, #0
 8002d88:	e7ad      	b.n	8002ce6 <__aeabi_d2f+0x3a>
 8002d8a:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <__aeabi_d2f+0x10c>)
 8002d8c:	4694      	mov	ip, r2
 8002d8e:	002a      	movs	r2, r5
 8002d90:	40e2      	lsrs	r2, r4
 8002d92:	0014      	movs	r4, r2
 8002d94:	002a      	movs	r2, r5
 8002d96:	4463      	add	r3, ip
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	4098      	lsls	r0, r3
 8002d9c:	1e55      	subs	r5, r2, #1
 8002d9e:	41aa      	sbcs	r2, r5
 8002da0:	4302      	orrs	r2, r0
 8002da2:	4322      	orrs	r2, r4
 8002da4:	e7e4      	b.n	8002d70 <__aeabi_d2f+0xc4>
 8002da6:	0033      	movs	r3, r6
 8002da8:	e79e      	b.n	8002ce8 <__aeabi_d2f+0x3c>
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	000007fe 	.word	0x000007fe
 8002db0:	fffffc80 	.word	0xfffffc80
 8002db4:	fffffca2 	.word	0xfffffca2
 8002db8:	fffffc82 	.word	0xfffffc82

08002dbc <__clzsi2>:
 8002dbc:	211c      	movs	r1, #28
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	4298      	cmp	r0, r3
 8002dc4:	d301      	bcc.n	8002dca <__clzsi2+0xe>
 8002dc6:	0c00      	lsrs	r0, r0, #16
 8002dc8:	3910      	subs	r1, #16
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	4298      	cmp	r0, r3
 8002dce:	d301      	bcc.n	8002dd4 <__clzsi2+0x18>
 8002dd0:	0a00      	lsrs	r0, r0, #8
 8002dd2:	3908      	subs	r1, #8
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	4298      	cmp	r0, r3
 8002dd8:	d301      	bcc.n	8002dde <__clzsi2+0x22>
 8002dda:	0900      	lsrs	r0, r0, #4
 8002ddc:	3904      	subs	r1, #4
 8002dde:	a202      	add	r2, pc, #8	; (adr r2, 8002de8 <__clzsi2+0x2c>)
 8002de0:	5c10      	ldrb	r0, [r2, r0]
 8002de2:	1840      	adds	r0, r0, r1
 8002de4:	4770      	bx	lr
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	02020304 	.word	0x02020304
 8002dec:	01010101 	.word	0x01010101
	...

08002df8 <__clzdi2>:
 8002df8:	b510      	push	{r4, lr}
 8002dfa:	2900      	cmp	r1, #0
 8002dfc:	d103      	bne.n	8002e06 <__clzdi2+0xe>
 8002dfe:	f7ff ffdd 	bl	8002dbc <__clzsi2>
 8002e02:	3020      	adds	r0, #32
 8002e04:	e002      	b.n	8002e0c <__clzdi2+0x14>
 8002e06:	0008      	movs	r0, r1
 8002e08:	f7ff ffd8 	bl	8002dbc <__clzsi2>
 8002e0c:	bd10      	pop	{r4, pc}
 8002e0e:	46c0      	nop			; (mov r8, r8)

08002e10 <Processor_type>:


 // Function To find  type of MCU
char Processor_type(uint8_t module_name)
{
	if( module_name==_H1AR2 || module_name==_H23R3 || module_name==_H10R4||
 8002e10:	2811      	cmp	r0, #17
 8002e12:	d01f      	beq.n	8002e54 <Processor_type+0x44>
 8002e14:	2805      	cmp	r0, #5
 8002e16:	d01f      	beq.n	8002e58 <Processor_type+0x48>
 8002e18:	2819      	cmp	r0, #25
 8002e1a:	d01f      	beq.n	8002e5c <Processor_type+0x4c>
 8002e1c:	2807      	cmp	r0, #7
 8002e1e:	d01f      	beq.n	8002e60 <Processor_type+0x50>
		module_name==_H08R6 || module_name==_P08R6||module_name==_H26R0 ||module_name==_H0FR6 || module_name==_H0FR1||
 8002e20:	2808      	cmp	r0, #8
 8002e22:	d01f      	beq.n	8002e64 <Processor_type+0x54>
 8002e24:	2817      	cmp	r0, #23
 8002e26:	d01f      	beq.n	8002e68 <Processor_type+0x58>
 8002e28:	280f      	cmp	r0, #15
 8002e2a:	d01f      	beq.n	8002e6c <Processor_type+0x5c>
 8002e2c:	280e      	cmp	r0, #14
 8002e2e:	d01f      	beq.n	8002e70 <Processor_type+0x60>
 8002e30:	281a      	cmp	r0, #26
 8002e32:	d01f      	beq.n	8002e74 <Processor_type+0x64>
		module_name==_H2AR3 || module_name==_H41R6||module_name==_H15R0|| module_name==_H09R9 ||
 8002e34:	281b      	cmp	r0, #27
 8002e36:	d01f      	beq.n	8002e78 <Processor_type+0x68>
 8002e38:	2818      	cmp	r0, #24
 8002e3a:	d01f      	beq.n	8002e7c <Processor_type+0x6c>
 8002e3c:	280a      	cmp	r0, #10
 8002e3e:	d01f      	beq.n	8002e80 <Processor_type+0x70>
 8002e40:	2809      	cmp	r0, #9
 8002e42:	d01f      	beq.n	8002e84 <Processor_type+0x74>
		module_name==_H09R0 || module_name==_H1DR1||module_name==_H07R3 )
 8002e44:	2813      	cmp	r0, #19
 8002e46:	d01f      	beq.n	8002e88 <Processor_type+0x78>
 8002e48:	2806      	cmp	r0, #6
 8002e4a:	d001      	beq.n	8002e50 <Processor_type+0x40>
	{
	  return 'F' ;
      }
    else
      {
	  return 'G';
 8002e4c:	2047      	movs	r0, #71	; 0x47
 8002e4e:	e002      	b.n	8002e56 <Processor_type+0x46>
	  return 'F' ;
 8002e50:	3040      	adds	r0, #64	; 0x40
 8002e52:	e000      	b.n	8002e56 <Processor_type+0x46>
 8002e54:	2046      	movs	r0, #70	; 0x46
	  }
}
 8002e56:	4770      	bx	lr
	  return 'F' ;
 8002e58:	2046      	movs	r0, #70	; 0x46
 8002e5a:	e7fc      	b.n	8002e56 <Processor_type+0x46>
 8002e5c:	2046      	movs	r0, #70	; 0x46
 8002e5e:	e7fa      	b.n	8002e56 <Processor_type+0x46>
 8002e60:	2046      	movs	r0, #70	; 0x46
 8002e62:	e7f8      	b.n	8002e56 <Processor_type+0x46>
 8002e64:	2046      	movs	r0, #70	; 0x46
 8002e66:	e7f6      	b.n	8002e56 <Processor_type+0x46>
 8002e68:	2046      	movs	r0, #70	; 0x46
 8002e6a:	e7f4      	b.n	8002e56 <Processor_type+0x46>
 8002e6c:	2046      	movs	r0, #70	; 0x46
 8002e6e:	e7f2      	b.n	8002e56 <Processor_type+0x46>
 8002e70:	2046      	movs	r0, #70	; 0x46
 8002e72:	e7f0      	b.n	8002e56 <Processor_type+0x46>
 8002e74:	2046      	movs	r0, #70	; 0x46
 8002e76:	e7ee      	b.n	8002e56 <Processor_type+0x46>
 8002e78:	2046      	movs	r0, #70	; 0x46
 8002e7a:	e7ec      	b.n	8002e56 <Processor_type+0x46>
 8002e7c:	2046      	movs	r0, #70	; 0x46
 8002e7e:	e7ea      	b.n	8002e56 <Processor_type+0x46>
 8002e80:	2046      	movs	r0, #70	; 0x46
 8002e82:	e7e8      	b.n	8002e56 <Processor_type+0x46>
 8002e84:	2046      	movs	r0, #70	; 0x46
 8002e86:	e7e6      	b.n	8002e56 <Processor_type+0x46>
 8002e88:	2046      	movs	r0, #70	; 0x46
 8002e8a:	e7e4      	b.n	8002e56 <Processor_type+0x46>

08002e8c <Get_Module_Name>:

//Function To find Name of Module
uint8_t Get_Module_Name(uint8_t dst)
{
	 return array[dst-1][0];
 8002e8c:	1e43      	subs	r3, r0, #1
 8002e8e:	2016      	movs	r0, #22
 8002e90:	4358      	muls	r0, r3
 8002e92:	4b01      	ldr	r3, [pc, #4]	; (8002e98 <Get_Module_Name+0xc>)
 8002e94:	5c18      	ldrb	r0, [r3, r0]
}
 8002e96:	4770      	bx	lr
 8002e98:	20000f7c 	.word	0x20000f7c

08002e9c <Send_BOS_Message>:

HAL_StatusTypeDef Send_BOS_Message(uint8_t port, uint8_t* buffer, uint16_t n, uint32_t mutexTimeout,uint8_t dst)
{
 8002e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9e:	46c6      	mov	lr, r8
 8002ea0:	b500      	push	{lr}
 8002ea2:	0007      	movs	r7, r0
 8002ea4:	000d      	movs	r5, r1
 8002ea6:	4690      	mov	r8, r2
 8002ea8:	001c      	movs	r4, r3
 8002eaa:	ab06      	add	r3, sp, #24
 8002eac:	7818      	ldrb	r0, [r3, #0]
	uint8_t module_name=Get_Module_Name(dst);
 8002eae:	f7ff ffed 	bl	8002e8c <Get_Module_Name>
 8002eb2:	0006      	movs	r6, r0
	HAL_StatusTypeDef result =HAL_ERROR;

	if(GetUart(port) != NULL)
 8002eb4:	0038      	movs	r0, r7
 8002eb6:	f00a ff73 	bl	800dda0 <GetUart>
 8002eba:	2800      	cmp	r0, #0
 8002ebc:	d02a      	beq.n	8002f14 <Send_BOS_Message+0x78>
	{
		/* Wait for the mutex to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK)
 8002ebe:	00bb      	lsls	r3, r7, #2
 8002ec0:	4a19      	ldr	r2, [pc, #100]	; (8002f28 <Send_BOS_Message+0x8c>)
 8002ec2:	5898      	ldr	r0, [r3, r2]
 8002ec4:	0021      	movs	r1, r4
 8002ec6:	f00b f931 	bl	800e12c <osSemaphoreWait>
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d12a      	bne.n	8002f24 <Send_BOS_Message+0x88>
		{
			if(Processor_type(module_name)=='G')
 8002ece:	0030      	movs	r0, r6
 8002ed0:	f7ff ff9e 	bl	8002e10 <Processor_type>
 8002ed4:	2847      	cmp	r0, #71	; 0x47
 8002ed6:	d002      	beq.n	8002ede <Send_BOS_Message+0x42>
			{
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,n);
			}
			else
			{
			for(uint8_t i=0;i<n;i++)
 8002ed8:	2400      	movs	r4, #0
	HAL_StatusTypeDef result =HAL_ERROR;
 8002eda:	2601      	movs	r6, #1
 8002edc:	e016      	b.n	8002f0c <Send_BOS_Message+0x70>
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,n);
 8002ede:	0038      	movs	r0, r7
 8002ee0:	f00a ff5e 	bl	800dda0 <GetUart>
 8002ee4:	4642      	mov	r2, r8
 8002ee6:	0029      	movs	r1, r5
 8002ee8:	f00f fb45 	bl	8012576 <HAL_UART_Transmit_IT>
 8002eec:	0006      	movs	r6, r0
 8002eee:	e012      	b.n	8002f16 <Send_BOS_Message+0x7a>
			  {
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002ef0:	0038      	movs	r0, r7
 8002ef2:	f00a ff55 	bl	800dda0 <GetUart>
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	0029      	movs	r1, r5
 8002efa:	f00f fb3c 	bl	8012576 <HAL_UART_Transmit_IT>
 8002efe:	0006      	movs	r6, r0
				buffer++;
 8002f00:	3501      	adds	r5, #1
				//Delay_us(500);
			 	Delay_ms(2);
 8002f02:	2002      	movs	r0, #2
 8002f04:	f00c fff4 	bl	800fef0 <HAL_Delay>
			for(uint8_t i=0;i<n;i++)
 8002f08:	3401      	adds	r4, #1
 8002f0a:	b2e4      	uxtb	r4, r4
 8002f0c:	b2a3      	uxth	r3, r4
 8002f0e:	4543      	cmp	r3, r8
 8002f10:	d3ee      	bcc.n	8002ef0 <Send_BOS_Message+0x54>
 8002f12:	e000      	b.n	8002f16 <Send_BOS_Message+0x7a>
	HAL_StatusTypeDef result =HAL_ERROR;
 8002f14:	2601      	movs	r6, #1
			  }
			}
		}
	}

	Delay_ms(10);// Delay Between Sending Two Messages.
 8002f16:	200a      	movs	r0, #10
 8002f18:	f00c ffea 	bl	800fef0 <HAL_Delay>
	return result;
}
 8002f1c:	0030      	movs	r0, r6
 8002f1e:	bc80      	pop	{r7}
 8002f20:	46b8      	mov	r8, r7
 8002f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef result =HAL_ERROR;
 8002f24:	2601      	movs	r6, #1
 8002f26:	e7f6      	b.n	8002f16 <Send_BOS_Message+0x7a>
 8002f28:	20001e48 	.word	0x20001e48

08002f2c <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002f2c:	b570      	push	{r4, r5, r6, lr}
 8002f2e:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002f30:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <LoadROtopology+0x88>)
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002f36:	4a20      	ldr	r2, [pc, #128]	; (8002fb8 <LoadROtopology+0x8c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00b      	beq.n	8002f54 <LoadROtopology+0x28>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002f3c:	0a1a      	lsrs	r2, r3, #8
 8002f3e:	491f      	ldr	r1, [pc, #124]	; (8002fbc <LoadROtopology+0x90>)
 8002f40:	700a      	strb	r2, [r1, #0]
		if(N == 0)
 8002f42:	d102      	bne.n	8002f4a <LoadROtopology+0x1e>
			N =1;
 8002f44:	000a      	movs	r2, r1
 8002f46:	2101      	movs	r1, #1
 8002f48:	7011      	strb	r1, [r2, #0]
		myID =(uint8_t )temp;
 8002f4a:	4a1d      	ldr	r2, [pc, #116]	; (8002fc0 <LoadROtopology+0x94>)
 8002f4c:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002f4e:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8002f50:	2002      	movs	r0, #2
		for(uint8_t i =1; i <= N; i++){
 8002f52:	e023      	b.n	8002f9c <LoadROtopology+0x70>
		N =1;
 8002f54:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <LoadROtopology+0x90>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002f5a:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <LoadROtopology+0x94>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002f60:	20fa      	movs	r0, #250	; 0xfa
 8002f62:	e024      	b.n	8002fae <LoadROtopology+0x82>
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <LoadROtopology+0x88>)
 8002f66:	18c3      	adds	r3, r0, r3
 8002f68:	1e65      	subs	r5, r4, #1
 8002f6a:	466a      	mov	r2, sp
 8002f6c:	79d1      	ldrb	r1, [r2, #7]
 8002f6e:	881e      	ldrh	r6, [r3, #0]
 8002f70:	00ab      	lsls	r3, r5, #2
 8002f72:	195b      	adds	r3, r3, r5
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	195b      	adds	r3, r3, r5
 8002f78:	18cb      	adds	r3, r1, r3
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4911      	ldr	r1, [pc, #68]	; (8002fc4 <LoadROtopology+0x98>)
 8002f7e:	52ce      	strh	r6, [r1, r3]
				add +=2;
 8002f80:	3002      	adds	r0, #2
 8002f82:	b280      	uxth	r0, r0
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002f84:	79d3      	ldrb	r3, [r2, #7]
 8002f86:	3301      	adds	r3, #1
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	71d3      	strb	r3, [r2, #7]
 8002f8c:	466b      	mov	r3, sp
 8002f8e:	3307      	adds	r3, #7
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b0a      	cmp	r3, #10
 8002f96:	d9e5      	bls.n	8002f64 <LoadROtopology+0x38>
		for(uint8_t i =1; i <= N; i++){
 8002f98:	3401      	adds	r4, #1
 8002f9a:	b2e4      	uxtb	r4, r4
 8002f9c:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <LoadROtopology+0x90>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	42a3      	cmp	r3, r4
 8002fa2:	d303      	bcc.n	8002fac <LoadROtopology+0x80>
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002fa4:	466b      	mov	r3, sp
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	71da      	strb	r2, [r3, #7]
 8002faa:	e7ef      	b.n	8002f8c <LoadROtopology+0x60>
			}
		}
	}
	
	return result;
 8002fac:	2000      	movs	r0, #0
}
 8002fae:	b002      	add	sp, #8
 8002fb0:	bd70      	pop	{r4, r5, r6, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	0801d800 	.word	0x0801d800
 8002fb8:	0000ffff 	.word	0x0000ffff
 8002fbc:	20000008 	.word	0x20000008
 8002fc0:	20000aa0 	.word	0x20000aa0
 8002fc4:	20000f7c 	.word	0x20000f7c

08002fc8 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002fc8:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002fca:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002fcc:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002fce:	e001      	b.n	8002fd4 <LoadEEportsDir+0xc>
 8002fd0:	3401      	adds	r4, #1
 8002fd2:	b2e4      	uxtb	r4, r4
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <LoadEEportsDir+0x30>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	42a3      	cmp	r3, r4
 8002fda:	d30a      	bcc.n	8002ff2 <LoadEEportsDir+0x2a>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002fdc:	1e61      	subs	r1, r4, #1
 8002fde:	0049      	lsls	r1, r1, #1
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <LoadEEportsDir+0x34>)
 8002fe2:	18c9      	adds	r1, r1, r3
 8002fe4:	1c60      	adds	r0, r4, #1
 8002fe6:	f008 fcb5 	bl	800b954 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002fea:	2c19      	cmp	r4, #25
 8002fec:	d9f0      	bls.n	8002fd0 <LoadEEportsDir+0x8>
			result =BOS_ERR_EEPROM;
 8002fee:	250a      	movs	r5, #10
 8002ff0:	e7ee      	b.n	8002fd0 <LoadEEportsDir+0x8>
	}
	
	return result;
}
 8002ff2:	0028      	movs	r0, r5
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	20000008 	.word	0x20000008
 8002ffc:	20002b70 	.word	0x20002b70

08003000 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8003000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003002:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003004:	466b      	mov	r3, sp
 8003006:	2200      	movs	r2, #0
 8003008:	80da      	strh	r2, [r3, #6]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800300a:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 800300c:	2500      	movs	r5, #0
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800300e:	e026      	b.n	800305e <LoadEEalias+0x5e>
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8003010:	0028      	movs	r0, r5
 8003012:	301c      	adds	r0, #28
 8003014:	b280      	uxth	r0, r0
 8003016:	466b      	mov	r3, sp
 8003018:	1d99      	adds	r1, r3, #6
 800301a:	f008 fc9b 	bl	800b954 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 800301e:	466b      	mov	r3, sp
 8003020:	88d8      	ldrh	r0, [r3, #6]
 8003022:	799b      	ldrb	r3, [r3, #6]
 8003024:	469c      	mov	ip, r3
 8003026:	4a12      	ldr	r2, [pc, #72]	; (8003070 <LoadEEalias+0x70>)
 8003028:	00b3      	lsls	r3, r6, #2
 800302a:	199f      	adds	r7, r3, r6
 800302c:	0079      	lsls	r1, r7, #1
 800302e:	1851      	adds	r1, r2, r1
 8003030:	4667      	mov	r7, ip
 8003032:	550f      	strb	r7, [r1, r4]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8003034:	1e67      	subs	r7, r4, #1
 8003036:	0a01      	lsrs	r1, r0, #8
 8003038:	199b      	adds	r3, r3, r6
 800303a:	0058      	lsls	r0, r3, #1
 800303c:	1812      	adds	r2, r2, r0
 800303e:	55d1      	strb	r1, [r2, r7]
			add++;
 8003040:	3501      	adds	r5, #1
 8003042:	b2ad      	uxth	r5, r5
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003044:	3402      	adds	r4, #2
 8003046:	b2e4      	uxtb	r4, r4
 8003048:	2c09      	cmp	r4, #9
 800304a:	d9e1      	bls.n	8003010 <LoadEEalias+0x10>
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 800304c:	00b3      	lsls	r3, r6, #2
 800304e:	199b      	adds	r3, r3, r6
 8003050:	005a      	lsls	r2, r3, #1
 8003052:	4b07      	ldr	r3, [pc, #28]	; (8003070 <LoadEEalias+0x70>)
 8003054:	189b      	adds	r3, r3, r2
 8003056:	2200      	movs	r2, #0
 8003058:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800305a:	3601      	adds	r6, #1
 800305c:	b2f6      	uxtb	r6, r6
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <LoadEEalias+0x74>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	42b3      	cmp	r3, r6
 8003064:	d301      	bcc.n	800306a <LoadEEalias+0x6a>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003066:	2401      	movs	r4, #1
 8003068:	e7ee      	b.n	8003048 <LoadEEalias+0x48>
	}
	
	return result;
}
 800306a:	2000      	movs	r0, #0
 800306c:	b003      	add	sp, #12
 800306e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003070:	20000e6c 	.word	0x20000e6c
 8003074:	20000008 	.word	0x20000008

08003078 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8003078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307a:	46ce      	mov	lr, r9
 800307c:	4647      	mov	r7, r8
 800307e:	b580      	push	{r7, lr}
 8003080:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003082:	466b      	mov	r3, sp
 8003084:	2200      	movs	r2, #0
 8003086:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8003088:	2400      	movs	r4, #0
	uint16_t add =0, temp =0;
 800308a:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 800308c:	e00c      	b.n	80030a8 <LoadEEgroup+0x30>
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 800308e:	4925      	ldr	r1, [pc, #148]	; (8003124 <LoadEEgroup+0xac>)
 8003090:	0063      	lsls	r3, r4, #1
 8003092:	3104      	adds	r1, #4
 8003094:	18c9      	adds	r1, r1, r3
 8003096:	0028      	movs	r0, r5
 8003098:	30cb      	adds	r0, #203	; 0xcb
 800309a:	b280      	uxth	r0, r0
 800309c:	f008 fc5a 	bl	800b954 <EE_ReadVariable>
		add++;
 80030a0:	3501      	adds	r5, #1
 80030a2:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 80030a4:	3401      	adds	r4, #1
 80030a6:	b2e4      	uxtb	r4, r4
 80030a8:	4b1f      	ldr	r3, [pc, #124]	; (8003128 <LoadEEgroup+0xb0>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	42a3      	cmp	r3, r4
 80030ae:	d8ee      	bhi.n	800308e <LoadEEgroup+0x16>
	}
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 80030b0:	2600      	movs	r6, #0
 80030b2:	e02d      	b.n	8003110 <LoadEEgroup+0x98>
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 80030b4:	0028      	movs	r0, r5
 80030b6:	3099      	adds	r0, #153	; 0x99
 80030b8:	b280      	uxth	r0, r0
 80030ba:	466b      	mov	r3, sp
 80030bc:	1d99      	adds	r1, r3, #6
 80030be:	f008 fc49 	bl	800b954 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 80030c2:	466b      	mov	r3, sp
 80030c4:	88d8      	ldrh	r0, [r3, #6]
 80030c6:	799b      	ldrb	r3, [r3, #6]
 80030c8:	4698      	mov	r8, r3
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <LoadEEgroup+0xac>)
 80030cc:	4699      	mov	r9, r3
 80030ce:	2738      	movs	r7, #56	; 0x38
 80030d0:	00b1      	lsls	r1, r6, #2
 80030d2:	198a      	adds	r2, r1, r6
 80030d4:	0052      	lsls	r2, r2, #1
 80030d6:	444a      	add	r2, r9
 80030d8:	1912      	adds	r2, r2, r4
 80030da:	4643      	mov	r3, r8
 80030dc:	55d3      	strb	r3, [r2, r7]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 80030de:	1e63      	subs	r3, r4, #1
 80030e0:	469c      	mov	ip, r3
 80030e2:	0a00      	lsrs	r0, r0, #8
 80030e4:	198a      	adds	r2, r1, r6
 80030e6:	0051      	lsls	r1, r2, #1
 80030e8:	000b      	movs	r3, r1
 80030ea:	444b      	add	r3, r9
 80030ec:	4463      	add	r3, ip
 80030ee:	55d8      	strb	r0, [r3, r7]
			add++;
 80030f0:	3501      	adds	r5, #1
 80030f2:	b2ad      	uxth	r5, r5
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80030f4:	3402      	adds	r4, #2
 80030f6:	b2e4      	uxtb	r4, r4
 80030f8:	2c09      	cmp	r4, #9
 80030fa:	d9db      	bls.n	80030b4 <LoadEEgroup+0x3c>
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 80030fc:	00b2      	lsls	r2, r6, #2
 80030fe:	1992      	adds	r2, r2, r6
 8003100:	0051      	lsls	r1, r2, #1
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <LoadEEgroup+0xac>)
 8003104:	185b      	adds	r3, r3, r1
 8003106:	3341      	adds	r3, #65	; 0x41
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 800310c:	3601      	adds	r6, #1
 800310e:	b2f6      	uxtb	r6, r6
 8003110:	2e09      	cmp	r6, #9
 8003112:	d801      	bhi.n	8003118 <LoadEEgroup+0xa0>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003114:	2401      	movs	r4, #1
 8003116:	e7ef      	b.n	80030f8 <LoadEEgroup+0x80>
	}
	
	return result;
}
 8003118:	2000      	movs	r0, #0
 800311a:	b003      	add	sp, #12
 800311c:	bcc0      	pop	{r6, r7}
 800311e:	46b9      	mov	r9, r7
 8003120:	46b0      	mov	r8, r6
 8003122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003124:	20000aa0 	.word	0x20000aa0
 8003128:	20000008 	.word	0x20000008

0800312c <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8003130:	210e      	movs	r1, #14
 8003132:	4469      	add	r1, sp
 8003134:	2300      	movs	r3, #0
 8003136:	800b      	strh	r3, [r1, #0]
 8003138:	aa03      	add	r2, sp, #12
 800313a:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 800313c:	20e4      	movs	r0, #228	; 0xe4
 800313e:	f008 fc09 	bl	800b954 <EE_ReadVariable>
	if(!status1){
 8003142:	2800      	cmp	r0, #0
 8003144:	d000      	beq.n	8003148 <LoadEEstreams+0x1c>
 8003146:	e076      	b.n	8003236 <LoadEEstreams+0x10a>
		direction =(uint8_t )temp1;
 8003148:	230e      	movs	r3, #14
 800314a:	446b      	add	r3, sp
 800314c:	781d      	ldrb	r5, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 800314e:	210e      	movs	r1, #14
 8003150:	4469      	add	r1, sp
 8003152:	20e5      	movs	r0, #229	; 0xe5
 8003154:	f008 fbfe 	bl	800b954 <EE_ReadVariable>
 8003158:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 800315a:	a903      	add	r1, sp, #12
 800315c:	20e6      	movs	r0, #230	; 0xe6
 800315e:	f008 fbf9 	bl	800b954 <EE_ReadVariable>
	if(!status1 && !status2){
 8003162:	4304      	orrs	r4, r0
 8003164:	b2a4      	uxth	r4, r4
 8003166:	2c00      	cmp	r4, #0
 8003168:	d000      	beq.n	800316c <LoadEEstreams+0x40>
 800316a:	e066      	b.n	800323a <LoadEEstreams+0x10e>
		count =((uint32_t )temp1 << 16) + temp2;
 800316c:	230e      	movs	r3, #14
 800316e:	446b      	add	r3, sp
 8003170:	881e      	ldrh	r6, [r3, #0]
 8003172:	0436      	lsls	r6, r6, #16
 8003174:	ab03      	add	r3, sp, #12
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	18f6      	adds	r6, r6, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 800317a:	210e      	movs	r1, #14
 800317c:	4469      	add	r1, sp
 800317e:	20e7      	movs	r0, #231	; 0xe7
 8003180:	f008 fbe8 	bl	800b954 <EE_ReadVariable>
 8003184:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8003186:	a903      	add	r1, sp, #12
 8003188:	20e8      	movs	r0, #232	; 0xe8
 800318a:	f008 fbe3 	bl	800b954 <EE_ReadVariable>
	if(!status1 && !status2){
 800318e:	4304      	orrs	r4, r0
 8003190:	b2a4      	uxth	r4, r4
 8003192:	2c00      	cmp	r4, #0
 8003194:	d153      	bne.n	800323e <LoadEEstreams+0x112>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8003196:	230e      	movs	r3, #14
 8003198:	446b      	add	r3, sp
 800319a:	881c      	ldrh	r4, [r3, #0]
 800319c:	0424      	lsls	r4, r4, #16
 800319e:	ab03      	add	r3, sp, #12
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 80031a4:	210e      	movs	r1, #14
 80031a6:	4469      	add	r1, sp
 80031a8:	20e9      	movs	r0, #233	; 0xe9
 80031aa:	f008 fbd3 	bl	800b954 <EE_ReadVariable>
	if(!status1){
 80031ae:	2800      	cmp	r0, #0
 80031b0:	d106      	bne.n	80031c0 <LoadEEstreams+0x94>
		src1 =(uint8_t )(temp1 >> 8);
 80031b2:	230e      	movs	r3, #14
 80031b4:	446b      	add	r3, sp
 80031b6:	881a      	ldrh	r2, [r3, #0]
 80031b8:	0a11      	lsrs	r1, r2, #8
 80031ba:	4b2c      	ldr	r3, [pc, #176]	; (800326c <LoadEEstreams+0x140>)
 80031bc:	7719      	strb	r1, [r3, #28]
		dst1 =(uint8_t )temp1;
 80031be:	775a      	strb	r2, [r3, #29]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 80031c0:	210e      	movs	r1, #14
 80031c2:	4469      	add	r1, sp
 80031c4:	20ea      	movs	r0, #234	; 0xea
 80031c6:	f008 fbc5 	bl	800b954 <EE_ReadVariable>
	if(!status1){
 80031ca:	2800      	cmp	r0, #0
 80031cc:	d106      	bne.n	80031dc <LoadEEstreams+0xb0>
		src2 =(uint8_t )(temp1 >> 8);
 80031ce:	230e      	movs	r3, #14
 80031d0:	446b      	add	r3, sp
 80031d2:	881a      	ldrh	r2, [r3, #0]
 80031d4:	0a11      	lsrs	r1, r2, #8
 80031d6:	4b25      	ldr	r3, [pc, #148]	; (800326c <LoadEEstreams+0x140>)
 80031d8:	7799      	strb	r1, [r3, #30]
		dst2 =(uint8_t )temp1;
 80031da:	77da      	strb	r2, [r3, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 80031dc:	210e      	movs	r1, #14
 80031de:	4469      	add	r1, sp
 80031e0:	20eb      	movs	r0, #235	; 0xeb
 80031e2:	f008 fbb7 	bl	800b954 <EE_ReadVariable>
	if(!status1){
 80031e6:	2800      	cmp	r0, #0
 80031e8:	d108      	bne.n	80031fc <LoadEEstreams+0xd0>
		src3 =(uint8_t )(temp1 >> 8);
 80031ea:	230e      	movs	r3, #14
 80031ec:	446b      	add	r3, sp
 80031ee:	881a      	ldrh	r2, [r3, #0]
 80031f0:	0a10      	lsrs	r0, r2, #8
 80031f2:	4b1e      	ldr	r3, [pc, #120]	; (800326c <LoadEEstreams+0x140>)
 80031f4:	2120      	movs	r1, #32
 80031f6:	5458      	strb	r0, [r3, r1]
		dst3 =(uint8_t )temp1;
 80031f8:	3101      	adds	r1, #1
 80031fa:	545a      	strb	r2, [r3, r1]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <LoadEEstreams+0x140>)
 80031fe:	7f1b      	ldrb	r3, [r3, #28]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <LoadEEstreams+0xe0>
 8003204:	4a19      	ldr	r2, [pc, #100]	; (800326c <LoadEEstreams+0x140>)
 8003206:	7f52      	ldrb	r2, [r2, #29]
 8003208:	2a00      	cmp	r2, #0
 800320a:	d11a      	bne.n	8003242 <LoadEEstreams+0x116>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 800320c:	4b17      	ldr	r3, [pc, #92]	; (800326c <LoadEEstreams+0x140>)
 800320e:	7f9b      	ldrb	r3, [r3, #30]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <LoadEEstreams+0xf0>
 8003214:	4a15      	ldr	r2, [pc, #84]	; (800326c <LoadEEstreams+0x140>)
 8003216:	7fd2      	ldrb	r2, [r2, #31]
 8003218:	2a00      	cmp	r2, #0
 800321a:	d119      	bne.n	8003250 <LoadEEstreams+0x124>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 800321c:	4a13      	ldr	r2, [pc, #76]	; (800326c <LoadEEstreams+0x140>)
 800321e:	2320      	movs	r3, #32
 8003220:	5cd3      	ldrb	r3, [r2, r3]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d004      	beq.n	8003230 <LoadEEstreams+0x104>
 8003226:	0011      	movs	r1, r2
 8003228:	2221      	movs	r2, #33	; 0x21
 800322a:	5c8a      	ldrb	r2, [r1, r2]
 800322c:	2a00      	cmp	r2, #0
 800322e:	d116      	bne.n	800325e <LoadEEstreams+0x132>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003230:	2000      	movs	r0, #0
 8003232:	b004      	add	sp, #16
 8003234:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t direction =0;
 8003236:	2500      	movs	r5, #0
 8003238:	e789      	b.n	800314e <LoadEEstreams+0x22>
	uint32_t count =0, timeout =0;
 800323a:	2600      	movs	r6, #0
 800323c:	e79d      	b.n	800317a <LoadEEstreams+0x4e>
 800323e:	2400      	movs	r4, #0
 8003240:	e7b0      	b.n	80031a4 <LoadEEstreams+0x78>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 8003242:	9200      	str	r2, [sp, #0]
 8003244:	0022      	movs	r2, r4
 8003246:	0031      	movs	r1, r6
 8003248:	0028      	movs	r0, r5
 800324a:	f004 fdbd 	bl	8007dc8 <SetupDMAStreams>
 800324e:	e7dd      	b.n	800320c <LoadEEstreams+0xe0>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003250:	9200      	str	r2, [sp, #0]
 8003252:	0022      	movs	r2, r4
 8003254:	0031      	movs	r1, r6
 8003256:	0028      	movs	r0, r5
 8003258:	f004 fdb6 	bl	8007dc8 <SetupDMAStreams>
 800325c:	e7de      	b.n	800321c <LoadEEstreams+0xf0>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 800325e:	9200      	str	r2, [sp, #0]
 8003260:	0022      	movs	r2, r4
 8003262:	0031      	movs	r1, r6
 8003264:	0028      	movs	r0, r5
 8003266:	f004 fdaf 	bl	8007dc8 <SetupDMAStreams>
 800326a:	e7e1      	b.n	8003230 <LoadEEstreams+0x104>
 800326c:	20000b20 	.word	0x20000b20

08003270 <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 8003270:	b510      	push	{r4, lr}
 8003272:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003274:	208a      	movs	r0, #138	; 0x8a
 8003276:	466b      	mov	r3, sp
 8003278:	1d99      	adds	r1, r3, #6
 800327a:	0040      	lsls	r0, r0, #1
 800327c:	f008 fb6a 	bl	800b954 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003280:	2800      	cmp	r0, #0
 8003282:	d000      	beq.n	8003286 <LoadEEparams+0x16>
 8003284:	e07c      	b.n	8003380 <LoadEEparams+0x110>
		BOSMessaging.response =(uint8_t )temp1;
 8003286:	466b      	mov	r3, sp
 8003288:	88da      	ldrh	r2, [r3, #6]
 800328a:	7998      	ldrb	r0, [r3, #6]
 800328c:	4b5d      	ldr	r3, [pc, #372]	; (8003404 <LoadEEparams+0x194>)
 800328e:	2124      	movs	r1, #36	; 0x24
 8003290:	5458      	strb	r0, [r3, r1]
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 8003292:	0a12      	lsrs	r2, r2, #8
 8003294:	3324      	adds	r3, #36	; 0x24
 8003296:	705a      	strb	r2, [r3, #1]
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003298:	208e      	movs	r0, #142	; 0x8e
 800329a:	466b      	mov	r3, sp
 800329c:	1d99      	adds	r1, r3, #6
 800329e:	0040      	lsls	r0, r0, #1
 80032a0:	f008 fb58 	bl	800b954 <EE_ReadVariable>

	if(!status1){
 80032a4:	2800      	cmp	r0, #0
 80032a6:	d000      	beq.n	80032aa <LoadEEparams+0x3a>
 80032a8:	e073      	b.n	8003392 <LoadEEparams+0x122>
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80032aa:	466b      	mov	r3, sp
 80032ac:	88db      	ldrh	r3, [r3, #6]
 80032ae:	0bda      	lsrs	r2, r3, #15
 80032b0:	4954      	ldr	r1, [pc, #336]	; (8003404 <LoadEEparams+0x194>)
 80032b2:	0008      	movs	r0, r1
 80032b4:	3024      	adds	r0, #36	; 0x24
 80032b6:	7102      	strb	r2, [r0, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	854b      	strh	r3, [r1, #42]	; 0x2a
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80032bc:	2016      	movs	r0, #22
 80032be:	466b      	mov	r3, sp
 80032c0:	1d99      	adds	r1, r3, #6
 80032c2:	30ff      	adds	r0, #255	; 0xff
 80032c4:	f008 fb46 	bl	800b954 <EE_ReadVariable>
	if(!status1)
 80032c8:	2800      	cmp	r0, #0
 80032ca:	d000      	beq.n	80032ce <LoadEEparams+0x5e>
 80032cc:	e06a      	b.n	80033a4 <LoadEEparams+0x134>
		BOS.buttons.debounce =temp1;
 80032ce:	466b      	mov	r3, sp
 80032d0:	88da      	ldrh	r2, [r3, #6]
 80032d2:	4b4c      	ldr	r3, [pc, #304]	; (8003404 <LoadEEparams+0x194>)
 80032d4:	859a      	strh	r2, [r3, #44]	; 0x2c
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80032d6:	208b      	movs	r0, #139	; 0x8b
 80032d8:	466b      	mov	r3, sp
 80032da:	1d99      	adds	r1, r3, #6
 80032dc:	0040      	lsls	r0, r0, #1
 80032de:	f008 fb39 	bl	800b954 <EE_ReadVariable>
	if(!status1)
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d163      	bne.n	80033ae <LoadEEparams+0x13e>
		BOS.buttons.singleClickTime =temp1;
 80032e6:	466b      	mov	r3, sp
 80032e8:	88da      	ldrh	r2, [r3, #6]
 80032ea:	4b46      	ldr	r3, [pc, #280]	; (8003404 <LoadEEparams+0x194>)
 80032ec:	85da      	strh	r2, [r3, #46]	; 0x2e
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80032ee:	2018      	movs	r0, #24
 80032f0:	466b      	mov	r3, sp
 80032f2:	1d99      	adds	r1, r3, #6
 80032f4:	30ff      	adds	r0, #255	; 0xff
 80032f6:	f008 fb2d 	bl	800b954 <EE_ReadVariable>
	if(!status1){
 80032fa:	2800      	cmp	r0, #0
 80032fc:	d15c      	bne.n	80033b8 <LoadEEparams+0x148>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 80032fe:	466b      	mov	r3, sp
 8003300:	88da      	ldrh	r2, [r3, #6]
 8003302:	7999      	ldrb	r1, [r3, #6]
 8003304:	4b3f      	ldr	r3, [pc, #252]	; (8003404 <LoadEEparams+0x194>)
 8003306:	332c      	adds	r3, #44	; 0x2c
 8003308:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 800330a:	0a12      	lsrs	r2, r2, #8
 800330c:	715a      	strb	r2, [r3, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 800330e:	208c      	movs	r0, #140	; 0x8c
 8003310:	466b      	mov	r3, sp
 8003312:	1d99      	adds	r1, r3, #6
 8003314:	0040      	lsls	r0, r0, #1
 8003316:	f008 fb1d 	bl	800b954 <EE_ReadVariable>
 800331a:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800331c:	201a      	movs	r0, #26
 800331e:	a901      	add	r1, sp, #4
 8003320:	30ff      	adds	r0, #255	; 0xff
 8003322:	f008 fb17 	bl	800b954 <EE_ReadVariable>
	if(!status1 && !status2){
 8003326:	4304      	orrs	r4, r0
 8003328:	b2a4      	uxth	r4, r4
 800332a:	2c00      	cmp	r4, #0
 800332c:	d14c      	bne.n	80033c8 <LoadEEparams+0x158>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 800332e:	466b      	mov	r3, sp
 8003330:	3306      	adds	r3, #6
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	aa01      	add	r2, sp, #4
 8003336:	8812      	ldrh	r2, [r2, #0]
 8003338:	0412      	lsls	r2, r2, #16
 800333a:	4313      	orrs	r3, r2
 800333c:	4a31      	ldr	r2, [pc, #196]	; (8003404 <LoadEEparams+0x194>)
 800333e:	6353      	str	r3, [r2, #52]	; 0x34
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003340:	208d      	movs	r0, #141	; 0x8d
 8003342:	466b      	mov	r3, sp
 8003344:	1d99      	adds	r1, r3, #6
 8003346:	0040      	lsls	r0, r0, #1
 8003348:	f008 fb04 	bl	800b954 <EE_ReadVariable>
	if(!status1){
 800334c:	2800      	cmp	r0, #0
 800334e:	d14a      	bne.n	80033e6 <LoadEEparams+0x176>
		BOS.daylightsaving =(int8_t )temp1;
 8003350:	466b      	mov	r3, sp
 8003352:	88da      	ldrh	r2, [r3, #6]
 8003354:	7999      	ldrb	r1, [r3, #6]
 8003356:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <LoadEEparams+0x194>)
 8003358:	332c      	adds	r3, #44	; 0x2c
 800335a:	7319      	strb	r1, [r3, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800335c:	0a12      	lsrs	r2, r2, #8
 800335e:	735a      	strb	r2, [r3, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003360:	201c      	movs	r0, #28
 8003362:	466b      	mov	r3, sp
 8003364:	1d99      	adds	r1, r3, #6
 8003366:	30ff      	adds	r0, #255	; 0xff
 8003368:	f008 faf4 	bl	800b954 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800336c:	2800      	cmp	r0, #0
 800336e:	d141      	bne.n	80033f4 <LoadEEparams+0x184>
		BOS.disableCLI =(uint8_t )temp1;
 8003370:	466b      	mov	r3, sp
 8003372:	799a      	ldrb	r2, [r3, #6]
 8003374:	4b23      	ldr	r3, [pc, #140]	; (8003404 <LoadEEparams+0x194>)
 8003376:	332c      	adds	r3, #44	; 0x2c
 8003378:	769a      	strb	r2, [r3, #26]
	else{
		BOS.disableCLI =BOS_default.disableCLI;
	}
	
	return result;
}
 800337a:	2000      	movs	r0, #0
 800337c:	b002      	add	sp, #8
 800337e:	bd10      	pop	{r4, pc}
		BOSMessaging.response =BOSMessging_default.response;
 8003380:	4a21      	ldr	r2, [pc, #132]	; (8003408 <LoadEEparams+0x198>)
 8003382:	7910      	ldrb	r0, [r2, #4]
 8003384:	4b1f      	ldr	r3, [pc, #124]	; (8003404 <LoadEEparams+0x194>)
 8003386:	2124      	movs	r1, #36	; 0x24
 8003388:	5458      	strb	r0, [r3, r1]
		BOSMessaging.trace =BOSMessging_default.trace;
 800338a:	7952      	ldrb	r2, [r2, #5]
 800338c:	3324      	adds	r3, #36	; 0x24
 800338e:	705a      	strb	r2, [r3, #1]
 8003390:	e782      	b.n	8003298 <LoadEEparams+0x28>
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003392:	4a1d      	ldr	r2, [pc, #116]	; (8003408 <LoadEEparams+0x198>)
 8003394:	7a10      	ldrb	r0, [r2, #8]
 8003396:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <LoadEEparams+0x194>)
 8003398:	0019      	movs	r1, r3
 800339a:	3124      	adds	r1, #36	; 0x24
 800339c:	7108      	strb	r0, [r1, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 800339e:	8952      	ldrh	r2, [r2, #10]
 80033a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033a2:	e78b      	b.n	80032bc <LoadEEparams+0x4c>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80033a4:	4b18      	ldr	r3, [pc, #96]	; (8003408 <LoadEEparams+0x198>)
 80033a6:	899a      	ldrh	r2, [r3, #12]
 80033a8:	4b16      	ldr	r3, [pc, #88]	; (8003404 <LoadEEparams+0x194>)
 80033aa:	859a      	strh	r2, [r3, #44]	; 0x2c
 80033ac:	e793      	b.n	80032d6 <LoadEEparams+0x66>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80033ae:	4b16      	ldr	r3, [pc, #88]	; (8003408 <LoadEEparams+0x198>)
 80033b0:	89da      	ldrh	r2, [r3, #14]
 80033b2:	4b14      	ldr	r3, [pc, #80]	; (8003404 <LoadEEparams+0x194>)
 80033b4:	85da      	strh	r2, [r3, #46]	; 0x2e
 80033b6:	e79a      	b.n	80032ee <LoadEEparams+0x7e>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 80033b8:	4a13      	ldr	r2, [pc, #76]	; (8003408 <LoadEEparams+0x198>)
 80033ba:	7c11      	ldrb	r1, [r2, #16]
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <LoadEEparams+0x194>)
 80033be:	332c      	adds	r3, #44	; 0x2c
 80033c0:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 80033c2:	7c52      	ldrb	r2, [r2, #17]
 80033c4:	715a      	strb	r2, [r3, #5]
 80033c6:	e7a2      	b.n	800330e <LoadEEparams+0x9e>
	else if(CLI_LOW_Baudrate_Flag)
 80033c8:	4a0e      	ldr	r2, [pc, #56]	; (8003404 <LoadEEparams+0x194>)
 80033ca:	2348      	movs	r3, #72	; 0x48
 80033cc:	5cd3      	ldrb	r3, [r2, r3]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <LoadEEparams+0x16c>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80033d2:	0013      	movs	r3, r2
 80033d4:	22e1      	movs	r2, #225	; 0xe1
 80033d6:	0252      	lsls	r2, r2, #9
 80033d8:	635a      	str	r2, [r3, #52]	; 0x34
 80033da:	e7b1      	b.n	8003340 <LoadEEparams+0xd0>
		BOS.clibaudrate =BOS_default.clibaudrate;
 80033dc:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <LoadEEparams+0x198>)
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	4b08      	ldr	r3, [pc, #32]	; (8003404 <LoadEEparams+0x194>)
 80033e2:	635a      	str	r2, [r3, #52]	; 0x34
 80033e4:	e7ac      	b.n	8003340 <LoadEEparams+0xd0>
		BOS.hourformat =24;
 80033e6:	4b07      	ldr	r3, [pc, #28]	; (8003404 <LoadEEparams+0x194>)
 80033e8:	332c      	adds	r3, #44	; 0x2c
 80033ea:	2218      	movs	r2, #24
 80033ec:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 80033ee:	2200      	movs	r2, #0
 80033f0:	731a      	strb	r2, [r3, #12]
 80033f2:	e7b5      	b.n	8003360 <LoadEEparams+0xf0>
		BOS.disableCLI =BOS_default.disableCLI;
 80033f4:	4a04      	ldr	r2, [pc, #16]	; (8003408 <LoadEEparams+0x198>)
 80033f6:	2326      	movs	r3, #38	; 0x26
 80033f8:	5cd2      	ldrb	r2, [r2, r3]
 80033fa:	4b02      	ldr	r3, [pc, #8]	; (8003404 <LoadEEparams+0x194>)
 80033fc:	332c      	adds	r3, #44	; 0x2c
 80033fe:	769a      	strb	r2, [r3, #26]
 8003400:	e7bb      	b.n	800337a <LoadEEparams+0x10a>
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	20000b20 	.word	0x20000b20
 8003408:	20000008 	.word	0x20000008

0800340c <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 800340c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340e:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 8003410:	231e      	movs	r3, #30
 8003412:	446b      	add	r3, sp
 8003414:	2200      	movs	r2, #0
 8003416:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003418:	2400      	movs	r4, #0
 800341a:	e001      	b.n	8003420 <LoadEEbuttons+0x14>
 800341c:	3401      	adds	r4, #1
 800341e:	b2e4      	uxtb	r4, r4
 8003420:	2c05      	cmp	r4, #5
 8003422:	d85d      	bhi.n	80034e0 <LoadEEbuttons+0xd4>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003424:	0025      	movs	r5, r4
 8003426:	353b      	adds	r5, #59	; 0x3b
 8003428:	00ad      	lsls	r5, r5, #2
 800342a:	b2ad      	uxth	r5, r5
 800342c:	211e      	movs	r1, #30
 800342e:	4469      	add	r1, sp
 8003430:	0028      	movs	r0, r5
 8003432:	f008 fa8f 	bl	800b954 <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 8003436:	2800      	cmp	r0, #0
 8003438:	d1f0      	bne.n	800341c <LoadEEbuttons+0x10>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 800343a:	231e      	movs	r3, #30
 800343c:	446b      	add	r3, sp
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	0a18      	lsrs	r0, r3, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 8003442:	0b19      	lsrs	r1, r3, #12
 8003444:	1c62      	adds	r2, r4, #1
 8003446:	4291      	cmp	r1, r2
 8003448:	d1e8      	bne.n	800341c <LoadEEbuttons+0x10>
 800344a:	210f      	movs	r1, #15
 800344c:	000f      	movs	r7, r1
 800344e:	4007      	ands	r7, r0
 8003450:	4201      	tst	r1, r0
 8003452:	d0e3      	beq.n	800341c <LoadEEbuttons+0x10>
			{
				button[i + 1].type =temp8 & 0x0F;
 8003454:	00d6      	lsls	r6, r2, #3
 8003456:	18b2      	adds	r2, r6, r2
 8003458:	4e23      	ldr	r6, [pc, #140]	; (80034e8 <LoadEEbuttons+0xdc>)
 800345a:	18b6      	adds	r6, r6, r2
 800345c:	7077      	strb	r7, [r6, #1]
				button[i + 1].events =(uint8_t )temp16;
 800345e:	7233      	strb	r3, [r6, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003460:	1c68      	adds	r0, r5, #1
 8003462:	b280      	uxth	r0, r0
 8003464:	231e      	movs	r3, #30
 8003466:	446b      	add	r3, sp
 8003468:	0019      	movs	r1, r3
 800346a:	f008 fa73 	bl	800b954 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800346e:	466b      	mov	r3, sp
 8003470:	8bdb      	ldrh	r3, [r3, #30]
 8003472:	0a1a      	lsrs	r2, r3, #8
 8003474:	70b2      	strb	r2, [r6, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003476:	7173      	strb	r3, [r6, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003478:	1ca8      	adds	r0, r5, #2
 800347a:	b280      	uxth	r0, r0
 800347c:	231e      	movs	r3, #30
 800347e:	446b      	add	r3, sp
 8003480:	0019      	movs	r1, r3
 8003482:	f008 fa67 	bl	800b954 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003486:	466b      	mov	r3, sp
 8003488:	8bdb      	ldrh	r3, [r3, #30]
 800348a:	0a1a      	lsrs	r2, r3, #8
 800348c:	70f2      	strb	r2, [r6, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 800348e:	71b3      	strb	r3, [r6, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003490:	3503      	adds	r5, #3
 8003492:	b2a8      	uxth	r0, r5
 8003494:	231e      	movs	r3, #30
 8003496:	446b      	add	r3, sp
 8003498:	0019      	movs	r1, r3
 800349a:	f008 fa5b 	bl	800b954 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 800349e:	466b      	mov	r3, sp
 80034a0:	8bdb      	ldrh	r3, [r3, #30]
 80034a2:	0a1a      	lsrs	r2, r3, #8
 80034a4:	7132      	strb	r2, [r6, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 80034a6:	71f3      	strb	r3, [r6, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 80034a8:	1c65      	adds	r5, r4, #1
 80034aa:	b2ed      	uxtb	r5, r5
 80034ac:	7870      	ldrb	r0, [r6, #1]
 80034ae:	0029      	movs	r1, r5
 80034b0:	f008 fee0 	bl	800c274 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80034b4:	7a31      	ldrb	r1, [r6, #8]
 80034b6:	084a      	lsrs	r2, r1, #1
 80034b8:	78b3      	ldrb	r3, [r6, #2]
 80034ba:	2001      	movs	r0, #1
 80034bc:	4002      	ands	r2, r0
 80034be:	4001      	ands	r1, r0
 80034c0:	2000      	movs	r0, #0
 80034c2:	9005      	str	r0, [sp, #20]
 80034c4:	79f0      	ldrb	r0, [r6, #7]
 80034c6:	9004      	str	r0, [sp, #16]
 80034c8:	79b0      	ldrb	r0, [r6, #6]
 80034ca:	9003      	str	r0, [sp, #12]
 80034cc:	7970      	ldrb	r0, [r6, #5]
 80034ce:	9002      	str	r0, [sp, #8]
 80034d0:	7930      	ldrb	r0, [r6, #4]
 80034d2:	9001      	str	r0, [sp, #4]
 80034d4:	78f0      	ldrb	r0, [r6, #3]
 80034d6:	9000      	str	r0, [sp, #0]
 80034d8:	0028      	movs	r0, r5
 80034da:	f008 ffe5 	bl	800c4a8 <SetButtonEvents>
 80034de:	e79d      	b.n	800341c <LoadEEbuttons+0x10>
			}
		}
	}
	
	return result;
}
 80034e0:	2000      	movs	r0, #0
 80034e2:	b009      	add	sp, #36	; 0x24
 80034e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	2000299c 	.word	0x2000299c

080034ec <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 80034ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ee:	46d6      	mov	lr, sl
 80034f0:	464f      	mov	r7, r9
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b083      	sub	sp, #12
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80034f6:	2032      	movs	r0, #50	; 0x32
 80034f8:	f00f fdb6 	bl	8013068 <malloc>
 80034fc:	1e06      	subs	r6, r0, #0
	if(snipBuffer == NULL)
 80034fe:	d068      	beq.n	80035d2 <LoadROsnippets+0xe6>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 8003500:	4b36      	ldr	r3, [pc, #216]	; (80035dc <LoadROsnippets+0xf0>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2bfe      	cmp	r3, #254	; 0xfe
 8003506:	d166      	bne.n	80035d6 <LoadROsnippets+0xea>
		return BOS_ERROR;
	
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003508:	2700      	movs	r7, #0
	int currentAdd = RO_MID_ADDRESS;
 800350a:	4c34      	ldr	r4, [pc, #208]	; (80035dc <LoadROsnippets+0xf0>)
 800350c:	e04a      	b.n	80035a4 <LoadROsnippets+0xb8>
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 800350e:	7822      	ldrb	r2, [r4, #0]
 8003510:	54f2      	strb	r2, [r6, r3]
		for(i =0; i < sizeof(snippet_t); i++)
 8003512:	3301      	adds	r3, #1
 8003514:	b2db      	uxtb	r3, r3
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 8003516:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8003518:	2b13      	cmp	r3, #19
 800351a:	d9f8      	bls.n	800350e <LoadROsnippets+0x22>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 800351c:	46ba      	mov	sl, r7
 800351e:	00bb      	lsls	r3, r7, #2
 8003520:	19db      	adds	r3, r3, r7
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4a2e      	ldr	r2, [pc, #184]	; (80035e0 <LoadROsnippets+0xf4>)
 8003526:	4699      	mov	r9, r3
 8003528:	4491      	add	r9, r2
 800352a:	1c71      	adds	r1, r6, #1
 800352c:	2214      	movs	r2, #20
 800352e:	4648      	mov	r0, r9
 8003530:	f00f ffce 	bl	80134d0 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003534:	2214      	movs	r2, #20
 8003536:	2100      	movs	r1, #0
 8003538:	0030      	movs	r0, r6
 800353a:	f00f ffd2 	bl	80134e2 <memset>
		i =0;
		// Load commands until you get next 0xFE
		currentAdd=currentAdd+20;
 800353e:	3414      	adds	r4, #20
		i =0;
 8003540:	2500      	movs	r5, #0
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003542:	e003      	b.n	800354c <LoadROsnippets+0x60>
			snipBuffer[i] =*(uint8_t* )currentAdd;
 8003544:	5573      	strb	r3, [r6, r5]
			++currentAdd;
 8003546:	3401      	adds	r4, #1
			++i;
 8003548:	3501      	adds	r5, #1
 800354a:	b2ed      	uxtb	r5, r5
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800354c:	9401      	str	r4, [sp, #4]
 800354e:	7823      	ldrb	r3, [r4, #0]
 8003550:	2bfd      	cmp	r3, #253	; 0xfd
 8003552:	d801      	bhi.n	8003558 <LoadROsnippets+0x6c>
 8003554:	2d31      	cmp	r5, #49	; 0x31
 8003556:	d9f5      	bls.n	8003544 <LoadROsnippets+0x58>
		}
		if(snipBuffer[i - 1] != 0)
 8003558:	1973      	adds	r3, r6, r5
 800355a:	3b01      	subs	r3, #1
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <LoadROsnippets+0x7a>
			++i;	// String termination char was not recorded, then add one
 8003562:	3501      	adds	r5, #1
 8003564:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd =(char* )malloc(i);
 8003566:	0028      	movs	r0, r5
 8003568:	f00f fd7e 	bl	8013068 <malloc>
 800356c:	4653      	mov	r3, sl
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4453      	add	r3, sl
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4a1a      	ldr	r2, [pc, #104]	; (80035e0 <LoadROsnippets+0xf4>)
 8003576:	18d3      	adds	r3, r2, r3
 8003578:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 800357a:	2800      	cmp	r0, #0
 800357c:	d016      	beq.n	80035ac <LoadROsnippets+0xc0>
			free(snipBuffer);
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
 800357e:	002a      	movs	r2, r5
 8003580:	0031      	movs	r1, r6
 8003582:	f00f ffa5 	bl	80134d0 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003586:	4a17      	ldr	r2, [pc, #92]	; (80035e4 <LoadROsnippets+0xf8>)
 8003588:	7813      	ldrb	r3, [r2, #0]
 800358a:	3301      	adds	r3, #1
 800358c:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 800358e:	002a      	movs	r2, r5
 8003590:	2100      	movs	r1, #0
 8003592:	0030      	movs	r0, r6
 8003594:	f00f ffa5 	bl	80134e2 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 8003598:	9b01      	ldr	r3, [sp, #4]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2bfe      	cmp	r3, #254	; 0xfe
 800359e:	d10f      	bne.n	80035c0 <LoadROsnippets+0xd4>
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 80035a0:	3701      	adds	r7, #1
 80035a2:	b2ff      	uxtb	r7, r7
 80035a4:	2f04      	cmp	r7, #4
 80035a6:	d80b      	bhi.n	80035c0 <LoadROsnippets+0xd4>
		for(i =0; i < sizeof(snippet_t); i++)
 80035a8:	2300      	movs	r3, #0
 80035aa:	e7b5      	b.n	8003518 <LoadROsnippets+0x2c>
			memset(&snippets[s],0,sizeof(snippet_t));
 80035ac:	2214      	movs	r2, #20
 80035ae:	2100      	movs	r1, #0
 80035b0:	4648      	mov	r0, r9
 80035b2:	f00f ff96 	bl	80134e2 <memset>
			free(snipBuffer);
 80035b6:	0030      	movs	r0, r6
 80035b8:	f00f fd60 	bl	801307c <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80035bc:	200e      	movs	r0, #14
 80035be:	e003      	b.n	80035c8 <LoadROsnippets+0xdc>
			break;
	}
	
	free(snipBuffer);
 80035c0:	0030      	movs	r0, r6
 80035c2:	f00f fd5b 	bl	801307c <free>
	return BOS_OK;
 80035c6:	2000      	movs	r0, #0
}
 80035c8:	b003      	add	sp, #12
 80035ca:	bcc0      	pop	{r6, r7}
 80035cc:	46ba      	mov	sl, r7
 80035ce:	46b1      	mov	r9, r6
 80035d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 80035d2:	20fb      	movs	r0, #251	; 0xfb
 80035d4:	e7f8      	b.n	80035c8 <LoadROsnippets+0xdc>
		return BOS_ERROR;
 80035d6:	20ff      	movs	r0, #255	; 0xff
 80035d8:	e7f6      	b.n	80035c8 <LoadROsnippets+0xdc>
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	0801dc00 	.word	0x0801dc00
 80035e0:	200017a8 	.word	0x200017a8
 80035e4:	200017a4 	.word	0x200017a4

080035e8 <LoadEEvars>:
void LoadEEvars(void){
 80035e8:	b510      	push	{r4, lr}
	LoadROtopology();
 80035ea:	f7ff fc9f 	bl	8002f2c <LoadROtopology>
	LoadEEportsDir();
 80035ee:	f7ff fceb 	bl	8002fc8 <LoadEEportsDir>
	LoadEEalias();
 80035f2:	f7ff fd05 	bl	8003000 <LoadEEalias>
	LoadEEgroup();
 80035f6:	f7ff fd3f 	bl	8003078 <LoadEEgroup>
	LoadEEstreams();
 80035fa:	f7ff fd97 	bl	800312c <LoadEEstreams>
	LoadEEparams();
 80035fe:	f7ff fe37 	bl	8003270 <LoadEEparams>
	LoadEEbuttons();
 8003602:	f7ff ff03 	bl	800340c <LoadEEbuttons>
	LoadROsnippets();
 8003606:	f7ff ff71 	bl	80034ec <LoadROsnippets>
}
 800360a:	bd10      	pop	{r4, pc}

0800360c <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 800360c:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 800360e:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003610:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8003612:	e005      	b.n	8003620 <SaveEEportsDir+0x14>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003614:	1c60      	adds	r0, r4, #1
 8003616:	f008 fa4f 	bl	800bab8 <EE_WriteVariable>
 800361a:	e00b      	b.n	8003634 <SaveEEportsDir+0x28>
	for(uint8_t i =1; i <= N; i++){
 800361c:	3401      	adds	r4, #1
 800361e:	b2e4      	uxtb	r4, r4
 8003620:	4b07      	ldr	r3, [pc, #28]	; (8003640 <SaveEEportsDir+0x34>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	42a3      	cmp	r3, r4
 8003626:	d309      	bcc.n	800363c <SaveEEportsDir+0x30>
		if(arrayPortsDir[i - 1])
 8003628:	1e63      	subs	r3, r4, #1
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4a05      	ldr	r2, [pc, #20]	; (8003644 <SaveEEportsDir+0x38>)
 800362e:	5a99      	ldrh	r1, [r3, r2]
 8003630:	2900      	cmp	r1, #0
 8003632:	d1ef      	bne.n	8003614 <SaveEEportsDir+0x8>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003634:	2c19      	cmp	r4, #25
 8003636:	d9f1      	bls.n	800361c <SaveEEportsDir+0x10>
			result =BOS_ERR_EEPROM;
 8003638:	250a      	movs	r5, #10
 800363a:	e7ef      	b.n	800361c <SaveEEportsDir+0x10>
	}
	
	return result;
}
 800363c:	0028      	movs	r0, r5
 800363e:	bd70      	pop	{r4, r5, r6, pc}
 8003640:	20000008 	.word	0x20000008
 8003644:	20002b70 	.word	0x20002b70

08003648 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800364a:	2500      	movs	r5, #0
	uint16_t add =0, temp =0;
 800364c:	2600      	movs	r6, #0
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800364e:	e017      	b.n	8003680 <SaveEEalias+0x38>
	    {
		if(moduleAlias[i][0]){
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 8003650:	1e60      	subs	r0, r4, #1
 8003652:	00ba      	lsls	r2, r7, #2
 8003654:	19d2      	adds	r2, r2, r7
 8003656:	0051      	lsls	r1, r2, #1
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <SaveEEalias+0x58>)
 800365a:	185b      	adds	r3, r3, r1
 800365c:	5c19      	ldrb	r1, [r3, r0]
 800365e:	0209      	lsls	r1, r1, #8
 8003660:	5d1b      	ldrb	r3, [r3, r4]
 8003662:	18c9      	adds	r1, r1, r3
 8003664:	b289      	uxth	r1, r1
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 8003666:	0030      	movs	r0, r6
 8003668:	301c      	adds	r0, #28
 800366a:	b280      	uxth	r0, r0
 800366c:	f008 fa24 	bl	800bab8 <EE_WriteVariable>
				add++;
 8003670:	3601      	adds	r6, #1
 8003672:	b2b6      	uxth	r6, r6
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003674:	3402      	adds	r4, #2
 8003676:	b2e4      	uxtb	r4, r4
 8003678:	2c09      	cmp	r4, #9
 800367a:	d9e9      	bls.n	8003650 <SaveEEalias+0x8>
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800367c:	3501      	adds	r5, #1
 800367e:	b2ed      	uxtb	r5, r5
 8003680:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <SaveEEalias+0x5c>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	42ab      	cmp	r3, r5
 8003686:	d309      	bcc.n	800369c <SaveEEalias+0x54>
		if(moduleAlias[i][0]){
 8003688:	002f      	movs	r7, r5
 800368a:	00ab      	lsls	r3, r5, #2
 800368c:	195b      	adds	r3, r3, r5
 800368e:	005a      	lsls	r2, r3, #1
 8003690:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <SaveEEalias+0x58>)
 8003692:	5cd3      	ldrb	r3, [r2, r3]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f1      	beq.n	800367c <SaveEEalias+0x34>
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003698:	2401      	movs	r4, #1
 800369a:	e7ed      	b.n	8003678 <SaveEEalias+0x30>
			}
		}
	}
	
	return result;
}
 800369c:	2000      	movs	r0, #0
 800369e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a0:	20000e6c 	.word	0x20000e6c
 80036a4:	20000008 	.word	0x20000008

080036a8 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036aa:	46de      	mov	lr, fp
 80036ac:	4657      	mov	r7, sl
 80036ae:	464e      	mov	r6, r9
 80036b0:	4645      	mov	r5, r8
 80036b2:	b5e0      	push	{r5, r6, r7, lr}
 80036b4:	000f      	movs	r7, r1
 80036b6:	0016      	movs	r6, r2
 80036b8:	001c      	movs	r4, r3
 80036ba:	ab0a      	add	r3, sp, #40	; 0x28
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	469b      	mov	fp, r3
 80036c0:	ab0b      	add	r3, sp, #44	; 0x2c
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	469a      	mov	sl, r3
 80036c6:	ab0c      	add	r3, sp, #48	; 0x30
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	4699      	mov	r9, r3
 80036cc:	ab0d      	add	r3, sp, #52	; 0x34
 80036ce:	781d      	ldrb	r5, [r3, #0]
 80036d0:	ab0e      	add	r3, sp, #56	; 0x38
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 80036d6:	0001      	movs	r1, r0
 80036d8:	20e4      	movs	r0, #228	; 0xe4
 80036da:	f008 f9ed 	bl	800bab8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 80036de:	0a39      	lsrs	r1, r7, #8
 80036e0:	b289      	uxth	r1, r1
 80036e2:	20e5      	movs	r0, #229	; 0xe5
 80036e4:	f008 f9e8 	bl	800bab8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 80036e8:	b2b9      	uxth	r1, r7
 80036ea:	20e6      	movs	r0, #230	; 0xe6
 80036ec:	f008 f9e4 	bl	800bab8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 80036f0:	0a31      	lsrs	r1, r6, #8
 80036f2:	b289      	uxth	r1, r1
 80036f4:	20e7      	movs	r0, #231	; 0xe7
 80036f6:	f008 f9df 	bl	800bab8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80036fa:	b2b1      	uxth	r1, r6
 80036fc:	20e8      	movs	r0, #232	; 0xe8
 80036fe:	f008 f9db 	bl	800bab8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003702:	0221      	lsls	r1, r4, #8
 8003704:	4459      	add	r1, fp
 8003706:	b289      	uxth	r1, r1
 8003708:	20e9      	movs	r0, #233	; 0xe9
 800370a:	f008 f9d5 	bl	800bab8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 800370e:	4653      	mov	r3, sl
 8003710:	0219      	lsls	r1, r3, #8
 8003712:	4449      	add	r1, r9
 8003714:	b289      	uxth	r1, r1
 8003716:	20ea      	movs	r0, #234	; 0xea
 8003718:	f008 f9ce 	bl	800bab8 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 800371c:	0229      	lsls	r1, r5, #8
 800371e:	4441      	add	r1, r8
 8003720:	b289      	uxth	r1, r1
 8003722:	20eb      	movs	r0, #235	; 0xeb
 8003724:	f008 f9c8 	bl	800bab8 <EE_WriteVariable>
	
	return result;
}
 8003728:	2000      	movs	r0, #0
 800372a:	bcf0      	pop	{r4, r5, r6, r7}
 800372c:	46bb      	mov	fp, r7
 800372e:	46b2      	mov	sl, r6
 8003730:	46a9      	mov	r9, r5
 8003732:	46a0      	mov	r8, r4
 8003734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003738 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 8003738:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 800373a:	4c21      	ldr	r4, [pc, #132]	; (80037c0 <SaveEEparams+0x88>)
 800373c:	0025      	movs	r5, r4
 800373e:	3524      	adds	r5, #36	; 0x24
 8003740:	786b      	ldrb	r3, [r5, #1]
 8003742:	015b      	lsls	r3, r3, #5
 8003744:	2224      	movs	r2, #36	; 0x24
 8003746:	5ca1      	ldrb	r1, [r4, r2]
 8003748:	4319      	orrs	r1, r3
 800374a:	208a      	movs	r0, #138	; 0x8a
 800374c:	0040      	lsls	r0, r0, #1
 800374e:	f008 f9b3 	bl	800bab8 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 8003752:	792b      	ldrb	r3, [r5, #4]
 8003754:	03db      	lsls	r3, r3, #15
 8003756:	222a      	movs	r2, #42	; 0x2a
 8003758:	5ea1      	ldrsh	r1, [r4, r2]
 800375a:	4319      	orrs	r1, r3
 800375c:	b289      	uxth	r1, r1
 800375e:	208e      	movs	r0, #142	; 0x8e
 8003760:	0040      	lsls	r0, r0, #1
 8003762:	f008 f9a9 	bl	800bab8 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003766:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003768:	2016      	movs	r0, #22
 800376a:	30ff      	adds	r0, #255	; 0xff
 800376c:	f008 f9a4 	bl	800bab8 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 8003770:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003772:	208b      	movs	r0, #139	; 0x8b
 8003774:	0040      	lsls	r0, r0, #1
 8003776:	f008 f99f 	bl	800bab8 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 800377a:	0025      	movs	r5, r4
 800377c:	352c      	adds	r5, #44	; 0x2c
 800377e:	796b      	ldrb	r3, [r5, #5]
 8003780:	021b      	lsls	r3, r3, #8
 8003782:	7b29      	ldrb	r1, [r5, #12]
 8003784:	4319      	orrs	r1, r3
 8003786:	2018      	movs	r0, #24
 8003788:	30ff      	adds	r0, #255	; 0xff
 800378a:	f008 f995 	bl	800bab8 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 800378e:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003790:	208c      	movs	r0, #140	; 0x8c
 8003792:	0040      	lsls	r0, r0, #1
 8003794:	f008 f990 	bl	800bab8 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8003798:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800379a:	201a      	movs	r0, #26
 800379c:	30ff      	adds	r0, #255	; 0xff
 800379e:	f008 f98b 	bl	800bab8 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80037a2:	7b6b      	ldrb	r3, [r5, #13]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	7929      	ldrb	r1, [r5, #4]
 80037a8:	4319      	orrs	r1, r3
 80037aa:	208d      	movs	r0, #141	; 0x8d
 80037ac:	0040      	lsls	r0, r0, #1
 80037ae:	f008 f983 	bl	800bab8 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 80037b2:	7ea9      	ldrb	r1, [r5, #26]
 80037b4:	201c      	movs	r0, #28
 80037b6:	30ff      	adds	r0, #255	; 0xff
 80037b8:	f008 f97e 	bl	800bab8 <EE_WriteVariable>
	
	return result;
}
 80037bc:	2000      	movs	r0, #0
 80037be:	bd70      	pop	{r4, r5, r6, pc}
 80037c0:	20000b20 	.word	0x20000b20

080037c4 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 80037c4:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 80037c6:	2234      	movs	r2, #52	; 0x34
 80037c8:	2100      	movs	r1, #0
 80037ca:	480e      	ldr	r0, [pc, #56]	; (8003804 <ClearEEportsDir+0x40>)
 80037cc:	f00f fe89 	bl	80134e2 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 80037d0:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80037d2:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 80037d4:	e005      	b.n	80037e2 <ClearEEportsDir+0x1e>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80037d6:	1c60      	adds	r0, r4, #1
 80037d8:	f008 f96e 	bl	800bab8 <EE_WriteVariable>
 80037dc:	e00b      	b.n	80037f6 <ClearEEportsDir+0x32>
	for(uint8_t i =1; i <= N; i++){
 80037de:	3401      	adds	r4, #1
 80037e0:	b2e4      	uxtb	r4, r4
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <ClearEEportsDir+0x44>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	42a3      	cmp	r3, r4
 80037e8:	d309      	bcc.n	80037fe <ClearEEportsDir+0x3a>
		if(arrayPortsDir[i - 1])
 80037ea:	1e63      	subs	r3, r4, #1
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4a05      	ldr	r2, [pc, #20]	; (8003804 <ClearEEportsDir+0x40>)
 80037f0:	5a99      	ldrh	r1, [r3, r2]
 80037f2:	2900      	cmp	r1, #0
 80037f4:	d1ef      	bne.n	80037d6 <ClearEEportsDir+0x12>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80037f6:	2c19      	cmp	r4, #25
 80037f8:	d9f1      	bls.n	80037de <ClearEEportsDir+0x1a>
			result =BOS_ERR_EEPROM;
 80037fa:	250a      	movs	r5, #10
 80037fc:	e7ef      	b.n	80037de <ClearEEportsDir+0x1a>
	}
	
	return result;
}
 80037fe:	0028      	movs	r0, r5
 8003800:	bd70      	pop	{r4, r5, r6, pc}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	20002b70 	.word	0x20002b70
 8003808:	20000008 	.word	0x20000008

0800380c <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/
//TODO change loction of the API
// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 800380c:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 800380e:	4b07      	ldr	r3, [pc, #28]	; (800382c <EE_FormatForFactoryReset+0x20>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4b07      	ldr	r3, [pc, #28]	; (8003830 <EE_FormatForFactoryReset+0x24>)
 8003814:	429a      	cmp	r2, r3
 8003816:	d100      	bne.n	800381a <EE_FormatForFactoryReset+0xe>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
		}
	}
	
}
 8003818:	bd10      	pop	{r4, pc}
		if(EE_Format() == HAL_OK){
 800381a:	f008 f963 	bl	800bae4 <EE_Format>
 800381e:	2800      	cmp	r0, #0
 8003820:	d1fa      	bne.n	8003818 <EE_FormatForFactoryReset+0xc>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003822:	4b02      	ldr	r3, [pc, #8]	; (800382c <EE_FormatForFactoryReset+0x20>)
 8003824:	4a02      	ldr	r2, [pc, #8]	; (8003830 <EE_FormatForFactoryReset+0x24>)
 8003826:	601a      	str	r2, [r3, #0]
}
 8003828:	e7f6      	b.n	8003818 <EE_FormatForFactoryReset+0xc>
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	20007ff0 	.word	0x20007ff0
 8003830:	beefdead 	.word	0xbeefdead

08003834 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 8003834:	b530      	push	{r4, r5, lr}
 8003836:	b08f      	sub	sp, #60	; 0x3c
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003838:	ab04      	add	r3, sp, #16
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	ab07      	add	r3, sp, #28
 800383e:	2212      	movs	r2, #18
 8003840:	446a      	add	r2, sp
 8003842:	a908      	add	r1, sp, #32
 8003844:	2001      	movs	r0, #1
 8003846:	f008 fbd3 	bl	800bff0 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 800384a:	ac03      	add	r4, sp, #12
 800384c:	9400      	str	r4, [sp, #0]
 800384e:	ab05      	add	r3, sp, #20
 8003850:	220e      	movs	r2, #14
 8003852:	446a      	add	r2, sp
 8003854:	a906      	add	r1, sp, #24
 8003856:	2002      	movs	r0, #2
 8003858:	f008 fbca 	bl	800bff0 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800385c:	2301      	movs	r3, #1
 800385e:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003860:	2500      	movs	r5, #0
 8003862:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003864:	466b      	mov	r3, sp
 8003866:	8a5b      	ldrh	r3, [r3, #18]
 8003868:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 800386a:	a909      	add	r1, sp, #36	; 0x24
 800386c:	9808      	ldr	r0, [sp, #32]
 800386e:	f00d fdab 	bl	80113c8 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003872:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003874:	2302      	movs	r3, #2
 8003876:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003878:	8823      	ldrh	r3, [r4, #0]
 800387a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 800387c:	a909      	add	r1, sp, #36	; 0x24
 800387e:	9805      	ldr	r0, [sp, #20]
 8003880:	f00d fda2 	bl	80113c8 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003884:	466b      	mov	r3, sp
 8003886:	8a59      	ldrh	r1, [r3, #18]
 8003888:	2200      	movs	r2, #0
 800388a:	9808      	ldr	r0, [sp, #32]
 800388c:	f00d fef1 	bl	8011672 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 8003890:	2005      	movs	r0, #5
 8003892:	f00a f8b5 	bl	800da00 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003896:	8821      	ldrh	r1, [r4, #0]
 8003898:	9805      	ldr	r0, [sp, #20]
 800389a:	f00d fee3 	bl	8011664 <HAL_GPIO_ReadPin>
 800389e:	1e04      	subs	r4, r0, #0
 80038a0:	d003      	beq.n	80038aa <IsLowerCLIbaud+0x76>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 80038a2:	2400      	movs	r4, #0
}
 80038a4:	0020      	movs	r0, r4
 80038a6:	b00f      	add	sp, #60	; 0x3c
 80038a8:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 80038aa:	2312      	movs	r3, #18
 80038ac:	446b      	add	r3, sp
 80038ae:	8819      	ldrh	r1, [r3, #0]
 80038b0:	2201      	movs	r2, #1
 80038b2:	9808      	ldr	r0, [sp, #32]
 80038b4:	f00d fedd 	bl	8011672 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 80038b8:	2005      	movs	r0, #5
 80038ba:	f00a f8a1 	bl	800da00 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 80038be:	ab03      	add	r3, sp, #12
 80038c0:	8819      	ldrh	r1, [r3, #0]
 80038c2:	9805      	ldr	r0, [sp, #20]
 80038c4:	f00d fece 	bl	8011664 <HAL_GPIO_ReadPin>
 80038c8:	2801      	cmp	r0, #1
 80038ca:	d1eb      	bne.n	80038a4 <IsLowerCLIbaud+0x70>
			return 1;
 80038cc:	0004      	movs	r4, r0
 80038ce:	e7e9      	b.n	80038a4 <IsLowerCLIbaud+0x70>

080038d0 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	0005      	movs	r5, r0
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 80038d4:	2400      	movs	r4, #0
 80038d6:	2c00      	cmp	r4, #0
 80038d8:	d001      	beq.n	80038de <IsModuleParameter+0xe>
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
			return i + 1;
	}
	return 0;
 80038da:	2000      	movs	r0, #0
}
 80038dc:	bd70      	pop	{r4, r5, r6, pc}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 80038de:	0063      	lsls	r3, r4, #1
 80038e0:	191b      	adds	r3, r3, r4
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4a06      	ldr	r2, [pc, #24]	; (8003900 <IsModuleParameter+0x30>)
 80038e6:	18d3      	adds	r3, r2, r3
 80038e8:	6899      	ldr	r1, [r3, #8]
 80038ea:	0028      	movs	r0, r5
 80038ec:	f7fc fc0a 	bl	8000104 <strcmp>
 80038f0:	2800      	cmp	r0, #0
 80038f2:	d002      	beq.n	80038fa <IsModuleParameter+0x2a>
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 80038f4:	3401      	adds	r4, #1
 80038f6:	b2e4      	uxtb	r4, r4
 80038f8:	e7ed      	b.n	80038d6 <IsModuleParameter+0x6>
			return i + 1;
 80038fa:	3401      	adds	r4, #1
 80038fc:	b2e0      	uxtb	r0, r4
 80038fe:	e7ed      	b.n	80038dc <IsModuleParameter+0xc>
 8003900:	20000094 	.word	0x20000094

08003904 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003908:	2500      	movs	r5, #0
 800390a:	2d05      	cmp	r5, #5
 800390c:	d826      	bhi.n	800395c <IsMathOperator+0x58>
		if(!strcmp(string,"="))
 800390e:	491a      	ldr	r1, [pc, #104]	; (8003978 <IsMathOperator+0x74>)
 8003910:	0020      	movs	r0, r4
 8003912:	f7fc fbf7 	bl	8000104 <strcmp>
 8003916:	2800      	cmp	r0, #0
 8003918:	d022      	beq.n	8003960 <IsMathOperator+0x5c>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 800391a:	4918      	ldr	r1, [pc, #96]	; (800397c <IsMathOperator+0x78>)
 800391c:	0020      	movs	r0, r4
 800391e:	f7fc fbf1 	bl	8000104 <strcmp>
 8003922:	2800      	cmp	r0, #0
 8003924:	d01e      	beq.n	8003964 <IsMathOperator+0x60>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 8003926:	4916      	ldr	r1, [pc, #88]	; (8003980 <IsMathOperator+0x7c>)
 8003928:	0020      	movs	r0, r4
 800392a:	f7fc fbeb 	bl	8000104 <strcmp>
 800392e:	2800      	cmp	r0, #0
 8003930:	d01a      	beq.n	8003968 <IsMathOperator+0x64>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 8003932:	4914      	ldr	r1, [pc, #80]	; (8003984 <IsMathOperator+0x80>)
 8003934:	0020      	movs	r0, r4
 8003936:	f7fc fbe5 	bl	8000104 <strcmp>
 800393a:	2800      	cmp	r0, #0
 800393c:	d016      	beq.n	800396c <IsMathOperator+0x68>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 800393e:	4912      	ldr	r1, [pc, #72]	; (8003988 <IsMathOperator+0x84>)
 8003940:	0020      	movs	r0, r4
 8003942:	f7fc fbdf 	bl	8000104 <strcmp>
 8003946:	2800      	cmp	r0, #0
 8003948:	d012      	beq.n	8003970 <IsMathOperator+0x6c>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 800394a:	4910      	ldr	r1, [pc, #64]	; (800398c <IsMathOperator+0x88>)
 800394c:	0020      	movs	r0, r4
 800394e:	f7fc fbd9 	bl	8000104 <strcmp>
 8003952:	2800      	cmp	r0, #0
 8003954:	d00e      	beq.n	8003974 <IsMathOperator+0x70>
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003956:	3501      	adds	r5, #1
 8003958:	b2ed      	uxtb	r5, r5
 800395a:	e7d6      	b.n	800390a <IsMathOperator+0x6>
			return MATH_NOT_EQUAL;
	}
	return 0;
 800395c:	2000      	movs	r0, #0
}
 800395e:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 8003960:	2001      	movs	r0, #1
 8003962:	e7fc      	b.n	800395e <IsMathOperator+0x5a>
			return MATH_GREATER;
 8003964:	2002      	movs	r0, #2
 8003966:	e7fa      	b.n	800395e <IsMathOperator+0x5a>
			return MATH_SMALLER;
 8003968:	2003      	movs	r0, #3
 800396a:	e7f8      	b.n	800395e <IsMathOperator+0x5a>
			return MATH_GREATER_EQUAL;
 800396c:	2004      	movs	r0, #4
 800396e:	e7f6      	b.n	800395e <IsMathOperator+0x5a>
			return MATH_SMALLER_EQUAL;
 8003970:	2005      	movs	r0, #5
 8003972:	e7f4      	b.n	800395e <IsMathOperator+0x5a>
			return MATH_NOT_EQUAL;
 8003974:	2006      	movs	r0, #6
 8003976:	e7f2      	b.n	800395e <IsMathOperator+0x5a>
 8003978:	08019de4 	.word	0x08019de4
 800397c:	08019de8 	.word	0x08019de8
 8003980:	08019dec 	.word	0x08019dec
 8003984:	08019df0 	.word	0x08019df0
 8003988:	08019df4 	.word	0x08019df4
 800398c:	08019df8 	.word	0x08019df8

08003990 <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 8003990:	b510      	push	{r4, lr}
		else Output_Port_Array[i-1] = FindRoute(myID, i);
	}
#endif

	/* Initialize and configure RTC */
	RTC_Init();
 8003992:	f009 fee5 	bl	800d760 <RTC_Init>
	GetTimeDate();
 8003996:	f009 ff89 	bl	800d8ac <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 800399a:	f008 f907 	bl	800bbac <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 800399e:	f008 faf1 	bl	800bf84 <GPIO_Init>
	DMA_Init();
 80039a2:	f007 f8d1 	bl	800ab48 <DMA_Init>
	TIM_USEC_Init();
 80039a6:	f009 ffb5 	bl	800d914 <TIM_USEC_Init>
	CRC_Init();
 80039aa:	f007 fee1 	bl	800b770 <CRC_Init>
	TIM_MSEC_Init();
 80039ae:	f009 ffe3 	bl	800d978 <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 80039b2:	f008 fb79 	bl	800c0a8 <IsFactoryReset>
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d111      	bne.n	80039de <BOS_Init+0x4e>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 80039ba:	f7ff ff3b 	bl	8003834 <IsLowerCLIbaud>
 80039be:	2800      	cmp	r0, #0
 80039c0:	d042      	beq.n	8003a48 <BOS_Init+0xb8>
		CLI_LOW_Baudrate_Flag =1;
 80039c2:	4c35      	ldr	r4, [pc, #212]	; (8003a98 <BOS_Init+0x108>)
 80039c4:	2348      	movs	r3, #72	; 0x48
 80039c6:	2201      	movs	r2, #1
 80039c8:	54e2      	strb	r2, [r4, r3]
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80039ca:	2032      	movs	r0, #50	; 0x32
 80039cc:	f00a f818 	bl	800da00 <StartMilliDelay>
		Module_Peripheral_Init();
 80039d0:	f006 fff0 	bl	800a9b4 <Module_Peripheral_Init>
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80039d4:	23e1      	movs	r3, #225	; 0xe1
 80039d6:	025b      	lsls	r3, r3, #9
 80039d8:	6363      	str	r3, [r4, #52]	; 0x34
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80039da:	2401      	movs	r4, #1
 80039dc:	e011      	b.n	8003a02 <BOS_Init+0x72>
		EE_FormatForFactoryReset();
 80039de:	f7ff ff15 	bl	800380c <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80039e2:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039e6:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <BOS_Init+0x10c>)
 80039e8:	4a2d      	ldr	r2, [pc, #180]	; (8003aa0 <BOS_Init+0x110>)
 80039ea:	60da      	str	r2, [r3, #12]
 80039ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	e7fd      	b.n	80039f0 <BOS_Init+0x60>
			UpdateBaudrate(port,BOS.clibaudrate);
 80039f4:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <BOS_Init+0x108>)
 80039f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039f8:	0020      	movs	r0, r4
 80039fa:	f00a fa3f 	bl	800de7c <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80039fe:	3401      	adds	r4, #1
 8003a00:	b2e4      	uxtb	r4, r4
 8003a02:	2c05      	cmp	r4, #5
 8003a04:	d9f6      	bls.n	80039f4 <BOS_Init+0x64>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
		Module_Peripheral_Init();
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 8003a06:	f7ff fdef 	bl	80035e8 <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 8003a0a:	f00a fac7 	bl	800df9c <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 8003a0e:	f007 fe13 	bl	800b638 <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
 8003a12:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <BOS_Init+0x114>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11c      	bne.n	8003a54 <BOS_Init+0xc4>
	{
		IND_ON();
 8003a1a:	2490      	movs	r4, #144	; 0x90
 8003a1c:	05e4      	lsls	r4, r4, #23
 8003a1e:	2201      	movs	r2, #1
 8003a20:	2140      	movs	r1, #64	; 0x40
 8003a22:	0020      	movs	r0, r4
 8003a24:	f00d fe25 	bl	8011672 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8003a28:	20fa      	movs	r0, #250	; 0xfa
 8003a2a:	0040      	lsls	r0, r0, #1
 8003a2c:	f009 ffe8 	bl	800da00 <StartMilliDelay>
 8003a30:	2200      	movs	r2, #0
 8003a32:	2140      	movs	r1, #64	; 0x40
 8003a34:	0020      	movs	r0, r4
 8003a36:	f00d fe1c 	bl	8011672 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
		IND_OFF();
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 8003a3a:	f003 fe8f 	bl	800775c <ResetUartORE>
	
	BOS_initialized =1;
 8003a3e:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <BOS_Init+0x108>)
 8003a40:	2349      	movs	r3, #73	; 0x49
 8003a42:	2101      	movs	r1, #1
 8003a44:	54d1      	strb	r1, [r2, r3]
}
 8003a46:	bd10      	pop	{r4, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003a48:	2032      	movs	r0, #50	; 0x32
 8003a4a:	f009 ffd9 	bl	800da00 <StartMilliDelay>
		Module_Peripheral_Init();
 8003a4e:	f006 ffb1 	bl	800a9b4 <Module_Peripheral_Init>
 8003a52:	e7d8      	b.n	8003a06 <BOS_Init+0x76>
		IND_ON();
 8003a54:	2490      	movs	r4, #144	; 0x90
 8003a56:	05e4      	lsls	r4, r4, #23
 8003a58:	2201      	movs	r2, #1
 8003a5a:	2140      	movs	r1, #64	; 0x40
 8003a5c:	0020      	movs	r0, r4
 8003a5e:	f00d fe08 	bl	8011672 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8003a62:	20fa      	movs	r0, #250	; 0xfa
 8003a64:	0040      	lsls	r0, r0, #1
 8003a66:	f009 ffcb 	bl	800da00 <StartMilliDelay>
		IND_OFF();
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2140      	movs	r1, #64	; 0x40
 8003a6e:	0020      	movs	r0, r4
 8003a70:	f00d fdff 	bl	8011672 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003a74:	2064      	movs	r0, #100	; 0x64
 8003a76:	f009 ffc3 	bl	800da00 <StartMilliDelay>
		IND_ON();
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	2140      	movs	r1, #64	; 0x40
 8003a7e:	0020      	movs	r0, r4
 8003a80:	f00d fdf7 	bl	8011672 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003a84:	2064      	movs	r0, #100	; 0x64
 8003a86:	f009 ffbb 	bl	800da00 <StartMilliDelay>
		IND_OFF();
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2140      	movs	r1, #64	; 0x40
 8003a8e:	0020      	movs	r0, r4
 8003a90:	f00d fdef 	bl	8011672 <HAL_GPIO_WritePin>
 8003a94:	e7d1      	b.n	8003a3a <BOS_Init+0xaa>
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	20000b20 	.word	0x20000b20
 8003a9c:	e000ed00 	.word	0xe000ed00
 8003aa0:	05fa0004 	.word	0x05fa0004
 8003aa4:	20000aa0 	.word	0x20000aa0

08003aa8 <Module_Init>:
void Module_Init(void){
 8003aa8:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003aaa:	f00c fa03 	bl	800feb4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8003aae:	f006 fdab 	bl	800a608 <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 8003ab2:	f7ff ff6d 	bl	8003990 <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8003ab6:	f003 fe71 	bl	800779c <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8003aba:	f00a fb14 	bl	800e0e6 <osKernelStart>
}
 8003abe:	bd10      	pop	{r4, pc}

08003ac0 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003ac0:	b530      	push	{r4, r5, lr}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	0005      	movs	r5, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003ac6:	2401      	movs	r4, #1
 8003ac8:	e015      	b.n	8003af6 <ExploreNeighbors+0x36>
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003aca:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <ExploreNeighbors+0x48>)
 8003acc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8003ace:	0a10      	lsrs	r0, r2, #8
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <ExploreNeighbors+0x4c>)
 8003ad2:	214c      	movs	r1, #76	; 0x4c
 8003ad4:	5458      	strb	r0, [r3, r1]
			messageParams[1] =(uint8_t )myPN;
 8003ad6:	334c      	adds	r3, #76	; 0x4c
 8003ad8:	705a      	strb	r2, [r3, #1]
			messageParams[2] =port;
 8003ada:	709c      	strb	r4, [r3, #2]
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003adc:	2303      	movs	r3, #3
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	3307      	adds	r3, #7
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	0020      	movs	r0, r4
 8003ae8:	f004 fa82 	bl	8007ff0 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003aec:	200a      	movs	r0, #10
 8003aee:	f00a faff 	bl	800e0f0 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003af2:	3401      	adds	r4, #1
 8003af4:	b2e4      	uxtb	r4, r4
 8003af6:	2c05      	cmp	r4, #5
 8003af8:	d802      	bhi.n	8003b00 <ExploreNeighbors+0x40>
		if(port != ignore){
 8003afa:	42ac      	cmp	r4, r5
 8003afc:	d1e5      	bne.n	8003aca <ExploreNeighbors+0xa>
 8003afe:	e7f8      	b.n	8003af2 <ExploreNeighbors+0x32>
		}
	}
	
	return result;
}
 8003b00:	2000      	movs	r0, #0
 8003b02:	b003      	add	sp, #12
 8003b04:	bd30      	pop	{r4, r5, pc}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	20000008 	.word	0x20000008
 8003b0c:	20000b20 	.word	0x20000b20

08003b10 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b12:	46de      	mov	lr, fp
 8003b14:	4657      	mov	r7, sl
 8003b16:	464e      	mov	r6, r9
 8003b18:	4645      	mov	r5, r8
 8003b1a:	b5e0      	push	{r5, r6, r7, lr}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003b20:	4b48      	ldr	r3, [pc, #288]	; (8003c44 <FindBroadcastRoutes+0x134>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	3307      	adds	r3, #7
 8003b26:	08db      	lsrs	r3, r3, #3
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	466a      	mov	r2, sp
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	469d      	mov	sp, r3
 8003b30:	466d      	mov	r5, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003b32:	2300      	movs	r3, #0
 8003b34:	e008      	b.n	8003b48 <FindBroadcastRoutes+0x38>
		modules[m] =0;
 8003b36:	2100      	movs	r1, #0
 8003b38:	54e9      	strb	r1, [r5, r3]
		bcastRoutes[m] =0;
 8003b3a:	005c      	lsls	r4, r3, #1
 8003b3c:	4a42      	ldr	r2, [pc, #264]	; (8003c48 <FindBroadcastRoutes+0x138>)
 8003b3e:	1912      	adds	r2, r2, r4
 8003b40:	247c      	movs	r4, #124	; 0x7c
 8003b42:	5311      	strh	r1, [r2, r4]
	for(m =0; m < N; m++){
 8003b44:	3301      	adds	r3, #1
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	4a3e      	ldr	r2, [pc, #248]	; (8003c44 <FindBroadcastRoutes+0x134>)
 8003b4a:	7812      	ldrb	r2, [r2, #0]
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d3f2      	bcc.n	8003b36 <FindBroadcastRoutes+0x26>
	}
	modules[src - 1] =++level;					// Tag the source
 8003b50:	3801      	subs	r0, #1
 8003b52:	2301      	movs	r3, #1
 8003b54:	542b      	strb	r3, [r5, r0]
	
	/* 2. Source module should send to all neighbors */

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
 8003b56:	2201      	movs	r2, #1
 8003b58:	e001      	b.n	8003b5e <FindBroadcastRoutes+0x4e>
 8003b5a:	3201      	adds	r2, #1
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	2a06      	cmp	r2, #6
 8003b60:	d81b      	bhi.n	8003b9a <FindBroadcastRoutes+0x8a>
		if(array[src - 1][p]){
 8003b62:	0083      	lsls	r3, r0, #2
 8003b64:	181b      	adds	r3, r3, r0
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	181b      	adds	r3, r3, r0
 8003b6a:	189b      	adds	r3, r3, r2
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	4937      	ldr	r1, [pc, #220]	; (8003c4c <FindBroadcastRoutes+0x13c>)
 8003b70:	5a5b      	ldrh	r3, [r3, r1]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f1      	beq.n	8003b5a <FindBroadcastRoutes+0x4a>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003b76:	1e51      	subs	r1, r2, #1
 8003b78:	2601      	movs	r6, #1
 8003b7a:	408e      	lsls	r6, r1
 8003b7c:	217c      	movs	r1, #124	; 0x7c
 8003b7e:	468c      	mov	ip, r1
 8003b80:	0044      	lsls	r4, r0, #1
 8003b82:	4931      	ldr	r1, [pc, #196]	; (8003c48 <FindBroadcastRoutes+0x138>)
 8003b84:	1909      	adds	r1, r1, r4
 8003b86:	4664      	mov	r4, ip
 8003b88:	5b0c      	ldrh	r4, [r1, r4]
 8003b8a:	4334      	orrs	r4, r6
 8003b8c:	4666      	mov	r6, ip
 8003b8e:	538c      	strh	r4, [r1, r6]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003b90:	08db      	lsrs	r3, r3, #3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	2102      	movs	r1, #2
 8003b96:	54e9      	strb	r1, [r5, r3]
 8003b98:	e7df      	b.n	8003b5a <FindBroadcastRoutes+0x4a>
	++level;												// Move one level
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	469b      	mov	fp, r3
	
	/* 3. Starting from source neighbors, check all other modules we haven't broadcasted-to yet, one by one */

	do{
		untaged =0;								// Reset the untaged counter
		++level;											// Move one level
 8003b9e:	465e      	mov	r6, fp
 8003ba0:	3601      	adds	r6, #1
 8003ba2:	b2f3      	uxtb	r3, r6
 8003ba4:	469b      	mov	fp, r3
		untaged =0;								// Reset the untaged counter
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	469c      	mov	ip, r3
		
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003baa:	2200      	movs	r2, #0
 8003bac:	e031      	b.n	8003c12 <FindBroadcastRoutes+0x102>
		    {
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003bae:	3001      	adds	r0, #1
 8003bb0:	b2c0      	uxtb	r0, r0
 8003bb2:	2806      	cmp	r0, #6
 8003bb4:	d82b      	bhi.n	8003c0e <FindBroadcastRoutes+0xfe>
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003bb6:	00a3      	lsls	r3, r4, #2
 8003bb8:	191b      	adds	r3, r3, r4
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	191b      	adds	r3, r3, r4
 8003bbe:	181b      	adds	r3, r3, r0
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4922      	ldr	r1, [pc, #136]	; (8003c4c <FindBroadcastRoutes+0x13c>)
 8003bc4:	5a5b      	ldrh	r3, [r3, r1]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f1      	beq.n	8003bae <FindBroadcastRoutes+0x9e>
 8003bca:	08db      	lsrs	r3, r3, #3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	607b      	str	r3, [r7, #4]
 8003bd0:	5ce9      	ldrb	r1, [r5, r3]
 8003bd2:	2900      	cmp	r1, #0
 8003bd4:	d1eb      	bne.n	8003bae <FindBroadcastRoutes+0x9e>
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003bd6:	0001      	movs	r1, r0
 8003bd8:	3901      	subs	r1, #1
 8003bda:	2601      	movs	r6, #1
 8003bdc:	408e      	lsls	r6, r1
 8003bde:	46b2      	mov	sl, r6
 8003be0:	217c      	movs	r1, #124	; 0x7c
 8003be2:	4689      	mov	r9, r1
 8003be4:	0061      	lsls	r1, r4, #1
 8003be6:	4e18      	ldr	r6, [pc, #96]	; (8003c48 <FindBroadcastRoutes+0x138>)
 8003be8:	46b0      	mov	r8, r6
 8003bea:	000b      	movs	r3, r1
 8003bec:	4443      	add	r3, r8
 8003bee:	464e      	mov	r6, r9
 8003bf0:	5b9e      	ldrh	r6, [r3, r6]
 8003bf2:	46b0      	mov	r8, r6
 8003bf4:	4656      	mov	r6, sl
 8003bf6:	4641      	mov	r1, r8
 8003bf8:	430e      	orrs	r6, r1
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	525e      	strh	r6, [r3, r1]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003bfe:	465b      	mov	r3, fp
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	546b      	strb	r3, [r5, r1]
						++untaged;
 8003c04:	4663      	mov	r3, ip
 8003c06:	3301      	adds	r3, #1
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	469c      	mov	ip, r3
 8003c0c:	e7cf      	b.n	8003bae <FindBroadcastRoutes+0x9e>
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003c0e:	3201      	adds	r2, #1
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <FindBroadcastRoutes+0x134>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d207      	bcs.n	8003c2a <FindBroadcastRoutes+0x11a>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003c1a:	0014      	movs	r4, r2
 8003c1c:	5ca9      	ldrb	r1, [r5, r2]
 8003c1e:	465b      	mov	r3, fp
 8003c20:	3b01      	subs	r3, #1
 8003c22:	4299      	cmp	r1, r3
 8003c24:	d1f3      	bne.n	8003c0e <FindBroadcastRoutes+0xfe>
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003c26:	2001      	movs	r0, #1
 8003c28:	e7c3      	b.n	8003bb2 <FindBroadcastRoutes+0xa2>
					}
				}
			}
		}
	} while(untaged);
 8003c2a:	4663      	mov	r3, ip
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1b6      	bne.n	8003b9e <FindBroadcastRoutes+0x8e>
	
	return result;
}
 8003c30:	2000      	movs	r0, #0
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b003      	add	sp, #12
 8003c36:	bcf0      	pop	{r4, r5, r6, r7}
 8003c38:	46bb      	mov	fp, r7
 8003c3a:	46b2      	mov	sl, r6
 8003c3c:	46a9      	mov	r9, r5
 8003c3e:	46a0      	mov	r8, r4
 8003c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	20000008 	.word	0x20000008
 8003c48:	20000b20 	.word	0x20000b20
 8003c4c:	20000f7c 	.word	0x20000f7c

08003c50 <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	0004      	movs	r4, r0
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 8003c54:	780b      	ldrb	r3, [r1, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d103      	bne.n	8003c62 <minArr+0x12>
		smallest =arr[0];
 8003c5a:	7805      	ldrb	r5, [r0, #0]
	
	for(int i =0; i < N; i++){
		if((arr[i] < smallest) && !Q[i]){
			smallest =arr[i];
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2000      	movs	r0, #0
 8003c60:	e002      	b.n	8003c68 <minArr+0x18>
	uint8_t smallest =0xFF;
 8003c62:	25ff      	movs	r5, #255	; 0xff
 8003c64:	e7fa      	b.n	8003c5c <minArr+0xc>
	for(int i =0; i < N; i++){
 8003c66:	3301      	adds	r3, #1
 8003c68:	4a06      	ldr	r2, [pc, #24]	; (8003c84 <minArr+0x34>)
 8003c6a:	7812      	ldrb	r2, [r2, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	dd08      	ble.n	8003c82 <minArr+0x32>
		if((arr[i] < smallest) && !Q[i]){
 8003c70:	5ce2      	ldrb	r2, [r4, r3]
 8003c72:	42aa      	cmp	r2, r5
 8003c74:	d2f7      	bcs.n	8003c66 <minArr+0x16>
 8003c76:	5cce      	ldrb	r6, [r1, r3]
 8003c78:	2e00      	cmp	r6, #0
 8003c7a:	d1f4      	bne.n	8003c66 <minArr+0x16>
			index =i;
 8003c7c:	b2d8      	uxtb	r0, r3
			smallest =arr[i];
 8003c7e:	0015      	movs	r5, r2
 8003c80:	e7f1      	b.n	8003c66 <minArr+0x16>
		}
	}
	
	return index;
}
 8003c82:	bd70      	pop	{r4, r5, r6, pc}
 8003c84:	20000008 	.word	0x20000008

08003c88 <QnotEmpty>:

/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
 8003c88:	0001      	movs	r1, r0
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003c8a:	2300      	movs	r3, #0
	char temp =1;
 8003c8c:	2001      	movs	r0, #1
	for(int i =0; i < N; i++){
 8003c8e:	e002      	b.n	8003c96 <QnotEmpty+0xe>
		temp &=Q[i];
 8003c90:	5cca      	ldrb	r2, [r1, r3]
 8003c92:	4010      	ands	r0, r2
	for(int i =0; i < N; i++){
 8003c94:	3301      	adds	r3, #1
 8003c96:	4a02      	ldr	r2, [pc, #8]	; (8003ca0 <QnotEmpty+0x18>)
 8003c98:	7812      	ldrb	r2, [r2, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	dcf8      	bgt.n	8003c90 <QnotEmpty+0x8>
	}
	
	return temp;
}
 8003c9e:	4770      	bx	lr
 8003ca0:	20000008 	.word	0x20000008

08003ca4 <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca6:	46c6      	mov	lr, r8
 8003ca8:	b500      	push	{lr}
 8003caa:	b08e      	sub	sp, #56	; 0x38
 8003cac:	0005      	movs	r5, r0
 8003cae:	4688      	mov	r8, r1
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003cb0:	2400      	movs	r4, #0
 8003cb2:	9401      	str	r4, [sp, #4]
 8003cb4:	222e      	movs	r2, #46	; 0x2e
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	a802      	add	r0, sp, #8
 8003cba:	f00f fc12 	bl	80134e2 <memset>
	memset(route,0,sizeof(route));
 8003cbe:	221a      	movs	r2, #26
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4853      	ldr	r0, [pc, #332]	; (8003e10 <FindRoute+0x16c>)
 8003cc4:	f00f fc0d 	bl	80134e2 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003cc8:	0029      	movs	r1, r5
 8003cca:	3d01      	subs	r5, #1
 8003ccc:	4b51      	ldr	r3, [pc, #324]	; (8003e14 <FindRoute+0x170>)
 8003cce:	195b      	adds	r3, r3, r5
 8003cd0:	2230      	movs	r2, #48	; 0x30
 8003cd2:	549c      	strb	r4, [r3, r2]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003cd4:	321c      	adds	r2, #28
 8003cd6:	549c      	strb	r4, [r3, r2]
	for(int col =1; col <= 6; col++){
 8003cd8:	2001      	movs	r0, #1
 8003cda:	e000      	b.n	8003cde <FindRoute+0x3a>
 8003cdc:	3001      	adds	r0, #1
 8003cde:	2806      	cmp	r0, #6
 8003ce0:	dc1d      	bgt.n	8003d1e <FindRoute+0x7a>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003ce2:	00ab      	lsls	r3, r5, #2
 8003ce4:	195b      	adds	r3, r3, r5
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	195b      	adds	r3, r3, r5
 8003cea:	181b      	adds	r3, r3, r0
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4a4a      	ldr	r2, [pc, #296]	; (8003e18 <FindRoute+0x174>)
 8003cf0:	5a9b      	ldrh	r3, [r3, r2]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f2      	beq.n	8003cdc <FindRoute+0x38>
 8003cf6:	08db      	lsrs	r3, r3, #3
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	b292      	uxth	r2, r2
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d1ed      	bne.n	8003cdc <FindRoute+0x38>
			routeDist[desID - 1] =1;
 8003d00:	4643      	mov	r3, r8
 8003d02:	1e5a      	subs	r2, r3, #1
 8003d04:	4b43      	ldr	r3, [pc, #268]	; (8003e14 <FindRoute+0x170>)
 8003d06:	189b      	adds	r3, r3, r2
 8003d08:	2230      	movs	r2, #48	; 0x30
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	5499      	strb	r1, [r3, r2]
			route[0] =desID;
 8003d0e:	4b40      	ldr	r3, [pc, #256]	; (8003e10 <FindRoute+0x16c>)
 8003d10:	4642      	mov	r2, r8
 8003d12:	701a      	strb	r2, [r3, #0]
			return col;
 8003d14:	b2c0      	uxtb	r0, r0
}
 8003d16:	b00e      	add	sp, #56	; 0x38
 8003d18:	bc80      	pop	{r7}
 8003d1a:	46b8      	mov	r8, r7
 8003d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(int i =1; i <= N; i++){
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <FindRoute+0x80>
 8003d22:	3301      	adds	r3, #1
 8003d24:	4a3d      	ldr	r2, [pc, #244]	; (8003e1c <FindRoute+0x178>)
 8003d26:	7812      	ldrb	r2, [r2, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	db0b      	blt.n	8003d44 <FindRoute+0xa0>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003d2c:	4299      	cmp	r1, r3
 8003d2e:	d0f8      	beq.n	8003d22 <FindRoute+0x7e>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003d30:	1e58      	subs	r0, r3, #1
 8003d32:	4a38      	ldr	r2, [pc, #224]	; (8003e14 <FindRoute+0x170>)
 8003d34:	1812      	adds	r2, r2, r0
 8003d36:	2030      	movs	r0, #48	; 0x30
 8003d38:	24ff      	movs	r4, #255	; 0xff
 8003d3a:	5414      	strb	r4, [r2, r0]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003d3c:	301c      	adds	r0, #28
 8003d3e:	2400      	movs	r4, #0
 8003d40:	5414      	strb	r4, [r2, r0]
 8003d42:	e7ee      	b.n	8003d22 <FindRoute+0x7e>
	uint8_t u =0;
 8003d44:	2400      	movs	r4, #0
	while(!QnotEmpty(Q)){
 8003d46:	a801      	add	r0, sp, #4
 8003d48:	f7ff ff9e 	bl	8003c88 <QnotEmpty>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d10d      	bne.n	8003d6c <FindRoute+0xc8>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003d50:	4830      	ldr	r0, [pc, #192]	; (8003e14 <FindRoute+0x170>)
 8003d52:	a901      	add	r1, sp, #4
 8003d54:	3030      	adds	r0, #48	; 0x30
 8003d56:	f7ff ff7b 	bl	8003c50 <minArr>
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003d5e:	4544      	cmp	r4, r8
 8003d60:	d004      	beq.n	8003d6c <FindRoute+0xc8>
			Q[u - 1] =1;									// Remove u from Q
 8003d62:	1e61      	subs	r1, r4, #1
 8003d64:	ab01      	add	r3, sp, #4
 8003d66:	2201      	movs	r2, #1
 8003d68:	545a      	strb	r2, [r3, r1]
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003d6a:	e003      	b.n	8003d74 <FindRoute+0xd0>
	uint8_t u =0;
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	e02a      	b.n	8003dc6 <FindRoute+0x122>
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003d70:	3201      	adds	r2, #1
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	2a06      	cmp	r2, #6
 8003d76:	d8e6      	bhi.n	8003d46 <FindRoute+0xa2>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003d78:	008b      	lsls	r3, r1, #2
 8003d7a:	185b      	adds	r3, r3, r1
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	185b      	adds	r3, r3, r1
 8003d80:	189b      	adds	r3, r3, r2
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	4824      	ldr	r0, [pc, #144]	; (8003e18 <FindRoute+0x174>)
 8003d86:	5a1b      	ldrh	r3, [r3, r0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f1      	beq.n	8003d70 <FindRoute+0xcc>
				v =(array[u - 1][n] >> 3);
 8003d8c:	08db      	lsrs	r3, r3, #3
 8003d8e:	b2db      	uxtb	r3, r3
				if(!Q[v - 1])								// v is still in Q
 8003d90:	3b01      	subs	r3, #1
 8003d92:	a801      	add	r0, sp, #4
 8003d94:	5cc0      	ldrb	r0, [r0, r3]
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d1ea      	bne.n	8003d70 <FindRoute+0xcc>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003d9a:	4f1e      	ldr	r7, [pc, #120]	; (8003e14 <FindRoute+0x170>)
 8003d9c:	2630      	movs	r6, #48	; 0x30
 8003d9e:	1878      	adds	r0, r7, r1
 8003da0:	5d80      	ldrb	r0, [r0, r6]
 8003da2:	3001      	adds	r0, #1
 8003da4:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003da6:	18ff      	adds	r7, r7, r3
 8003da8:	5dbf      	ldrb	r7, [r7, r6]
 8003daa:	4287      	cmp	r7, r0
 8003dac:	d9e0      	bls.n	8003d70 <FindRoute+0xcc>
						routeDist[v - 1] =alt;
 8003dae:	4f19      	ldr	r7, [pc, #100]	; (8003e14 <FindRoute+0x170>)
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	2730      	movs	r7, #48	; 0x30
 8003db4:	55d8      	strb	r0, [r3, r7]
						routePrev[v - 1] =u;
 8003db6:	204c      	movs	r0, #76	; 0x4c
 8003db8:	541c      	strb	r4, [r3, r0]
 8003dba:	e7d9      	b.n	8003d70 <FindRoute+0xcc>
		route[j++] =u;          			// Push the vertex onto the stack
 8003dbc:	1c4b      	adds	r3, r1, #1
 8003dbe:	4a14      	ldr	r2, [pc, #80]	; (8003e10 <FindRoute+0x16c>)
 8003dc0:	5454      	strb	r4, [r2, r1]
 8003dc2:	b2d9      	uxtb	r1, r3
		u =routePrev[u - 1];           		// Traverse from target to source
 8003dc4:	0004      	movs	r4, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003dc6:	1e62      	subs	r2, r4, #1
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <FindRoute+0x170>)
 8003dca:	189b      	adds	r3, r3, r2
 8003dcc:	224c      	movs	r2, #76	; 0x4c
 8003dce:	5c98      	ldrb	r0, [r3, r2]
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d1f3      	bne.n	8003dbc <FindRoute+0x118>
	for(int col =1; col <= 6; col++){
 8003dd4:	3a4b      	subs	r2, #75	; 0x4b
 8003dd6:	e000      	b.n	8003dda <FindRoute+0x136>
 8003dd8:	3201      	adds	r2, #1
 8003dda:	2a06      	cmp	r2, #6
 8003ddc:	dc9b      	bgt.n	8003d16 <FindRoute+0x72>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003dde:	00ab      	lsls	r3, r5, #2
 8003de0:	195b      	adds	r3, r3, r5
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	195b      	adds	r3, r3, r5
 8003de6:	189b      	adds	r3, r3, r2
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	490b      	ldr	r1, [pc, #44]	; (8003e18 <FindRoute+0x174>)
 8003dec:	5a5b      	ldrh	r3, [r3, r1]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f2      	beq.n	8003dd8 <FindRoute+0x134>
 8003df2:	08db      	lsrs	r3, r3, #3
 8003df4:	4641      	mov	r1, r8
 8003df6:	1e4c      	subs	r4, r1, #1
 8003df8:	4906      	ldr	r1, [pc, #24]	; (8003e14 <FindRoute+0x170>)
 8003dfa:	1909      	adds	r1, r1, r4
 8003dfc:	2430      	movs	r4, #48	; 0x30
 8003dfe:	5d09      	ldrb	r1, [r1, r4]
 8003e00:	3901      	subs	r1, #1
 8003e02:	4c03      	ldr	r4, [pc, #12]	; (8003e10 <FindRoute+0x16c>)
 8003e04:	5c61      	ldrb	r1, [r4, r1]
 8003e06:	428b      	cmp	r3, r1
 8003e08:	d1e6      	bne.n	8003dd8 <FindRoute+0x134>
			return col;
 8003e0a:	b2d0      	uxtb	r0, r2
 8003e0c:	e783      	b.n	8003d16 <FindRoute+0x72>
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	20001f60 	.word	0x20001f60
 8003e14:	20000ba0 	.word	0x20000ba0
 8003e18:	20000f7c 	.word	0x20000f7c
 8003e1c:	20000008 	.word	0x20000008

08003e20 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e22:	46c6      	mov	lr, r8
 8003e24:	b500      	push	{lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	0006      	movs	r6, r0
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003e2a:	4c5b      	ldr	r4, [pc, #364]	; (8003f98 <DisplayTopology+0x178>)
 8003e2c:	3468      	adds	r4, #104	; 0x68
 8003e2e:	4b5b      	ldr	r3, [pc, #364]	; (8003f9c <DisplayTopology+0x17c>)
 8003e30:	0022      	movs	r2, r4
 8003e32:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003e34:	c223      	stmia	r2!, {r0, r1, r5}
 8003e36:	6819      	ldr	r1, [r3, #0]
 8003e38:	6011      	str	r1, [r2, #0]
 8003e3a:	889b      	ldrh	r3, [r3, #4]
 8003e3c:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e3e:	0020      	movs	r0, r4
 8003e40:	f7fc f96a 	bl	8000118 <strlen>
 8003e44:	b282      	uxth	r2, r0
 8003e46:	2301      	movs	r3, #1
 8003e48:	425b      	negs	r3, r3
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	3333      	adds	r3, #51	; 0x33
 8003e4e:	0021      	movs	r1, r4
 8003e50:	0030      	movs	r0, r6
 8003e52:	f009 ffc3 	bl	800dddc <writePxMutex>
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003e56:	2401      	movs	r4, #1
 8003e58:	e014      	b.n	8003e84 <DisplayTopology+0x64>
		sprintf(pcUserMessage,"P%d\t",i);
 8003e5a:	4d4f      	ldr	r5, [pc, #316]	; (8003f98 <DisplayTopology+0x178>)
 8003e5c:	3568      	adds	r5, #104	; 0x68
 8003e5e:	0022      	movs	r2, r4
 8003e60:	494f      	ldr	r1, [pc, #316]	; (8003fa0 <DisplayTopology+0x180>)
 8003e62:	0028      	movs	r0, r5
 8003e64:	f00f fd2e 	bl	80138c4 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e68:	0028      	movs	r0, r5
 8003e6a:	f7fc f955 	bl	8000118 <strlen>
 8003e6e:	b282      	uxth	r2, r0
 8003e70:	2301      	movs	r3, #1
 8003e72:	425b      	negs	r3, r3
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	3333      	adds	r3, #51	; 0x33
 8003e78:	0029      	movs	r1, r5
 8003e7a:	0030      	movs	r0, r6
 8003e7c:	f009 ffae 	bl	800dddc <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003e80:	3401      	adds	r4, #1
 8003e82:	b2e4      	uxtb	r4, r4
 8003e84:	2c05      	cmp	r4, #5
 8003e86:	d9e8      	bls.n	8003e5a <DisplayTopology+0x3a>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003e88:	2301      	movs	r3, #1
 8003e8a:	425b      	negs	r3, r3
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	3333      	adds	r3, #51	; 0x33
 8003e90:	2203      	movs	r2, #3
 8003e92:	4944      	ldr	r1, [pc, #272]	; (8003fa4 <DisplayTopology+0x184>)
 8003e94:	0030      	movs	r0, r6
 8003e96:	f009 ffa1 	bl	800dddc <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003e9a:	2700      	movs	r7, #0
 8003e9c:	e036      	b.n	8003f0c <DisplayTopology+0xec>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003e9e:	2307      	movs	r3, #7
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	08d2      	lsrs	r2, r2, #3
 8003ea4:	483c      	ldr	r0, [pc, #240]	; (8003f98 <DisplayTopology+0x178>)
 8003ea6:	4940      	ldr	r1, [pc, #256]	; (8003fa8 <DisplayTopology+0x188>)
 8003ea8:	3068      	adds	r0, #104	; 0x68
 8003eaa:	f00f fd0b 	bl	80138c4 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003eae:	4b3a      	ldr	r3, [pc, #232]	; (8003f98 <DisplayTopology+0x178>)
 8003eb0:	2268      	movs	r2, #104	; 0x68
 8003eb2:	4690      	mov	r8, r2
 8003eb4:	4498      	add	r8, r3
 8003eb6:	4640      	mov	r0, r8
 8003eb8:	f7fc f92e 	bl	8000118 <strlen>
 8003ebc:	b282      	uxth	r2, r0
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	425b      	negs	r3, r3
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	3333      	adds	r3, #51	; 0x33
 8003ec6:	4641      	mov	r1, r8
 8003ec8:	0030      	movs	r0, r6
 8003eca:	f009 ff87 	bl	800dddc <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003ece:	3401      	adds	r4, #1
 8003ed0:	b2e4      	uxtb	r4, r4
 8003ed2:	2c05      	cmp	r4, #5
 8003ed4:	d80f      	bhi.n	8003ef6 <DisplayTopology+0xd6>
			if(!array[row][col])
 8003ed6:	00ab      	lsls	r3, r5, #2
 8003ed8:	195b      	adds	r3, r3, r5
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	195b      	adds	r3, r3, r5
 8003ede:	191b      	adds	r3, r3, r4
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	4a32      	ldr	r2, [pc, #200]	; (8003fac <DisplayTopology+0x18c>)
 8003ee4:	5a9a      	ldrh	r2, [r3, r2]
 8003ee6:	2a00      	cmp	r2, #0
 8003ee8:	d1d9      	bne.n	8003e9e <DisplayTopology+0x7e>
				sprintf(pcUserMessage,"%d\t",0);
 8003eea:	482b      	ldr	r0, [pc, #172]	; (8003f98 <DisplayTopology+0x178>)
 8003eec:	4930      	ldr	r1, [pc, #192]	; (8003fb0 <DisplayTopology+0x190>)
 8003eee:	3068      	adds	r0, #104	; 0x68
 8003ef0:	f00f fce8 	bl	80138c4 <sprintf>
 8003ef4:	e7db      	b.n	8003eae <DisplayTopology+0x8e>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	425b      	negs	r3, r3
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	3333      	adds	r3, #51	; 0x33
 8003efe:	2202      	movs	r2, #2
 8003f00:	492c      	ldr	r1, [pc, #176]	; (8003fb4 <DisplayTopology+0x194>)
 8003f02:	0030      	movs	r0, r6
 8003f04:	f009 ff6a 	bl	800dddc <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003f08:	3701      	adds	r7, #1
 8003f0a:	b2ff      	uxtb	r7, r7
 8003f0c:	4b2a      	ldr	r3, [pc, #168]	; (8003fb8 <DisplayTopology+0x198>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	42bb      	cmp	r3, r7
 8003f12:	d933      	bls.n	8003f7c <DisplayTopology+0x15c>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003f14:	003d      	movs	r5, r7
 8003f16:	1c7a      	adds	r2, r7, #1
 8003f18:	4c1f      	ldr	r4, [pc, #124]	; (8003f98 <DisplayTopology+0x178>)
 8003f1a:	3468      	adds	r4, #104	; 0x68
 8003f1c:	4927      	ldr	r1, [pc, #156]	; (8003fbc <DisplayTopology+0x19c>)
 8003f1e:	0020      	movs	r0, r4
 8003f20:	f00f fcd0 	bl	80138c4 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f24:	0020      	movs	r0, r4
 8003f26:	f7fc f8f7 	bl	8000118 <strlen>
 8003f2a:	b282      	uxth	r2, r0
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	425b      	negs	r3, r3
 8003f30:	4698      	mov	r8, r3
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	3333      	adds	r3, #51	; 0x33
 8003f36:	0021      	movs	r1, r4
 8003f38:	0030      	movs	r0, r6
 8003f3a:	f009 ff4f 	bl	800dddc <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003f3e:	2316      	movs	r3, #22
 8003f40:	437b      	muls	r3, r7
 8003f42:	4a1a      	ldr	r2, [pc, #104]	; (8003fac <DisplayTopology+0x18c>)
 8003f44:	5a9b      	ldrh	r3, [r3, r2]
 8003f46:	0059      	lsls	r1, r3, #1
 8003f48:	18c9      	adds	r1, r1, r3
 8003f4a:	0049      	lsls	r1, r1, #1
 8003f4c:	4b1c      	ldr	r3, [pc, #112]	; (8003fc0 <DisplayTopology+0x1a0>)
 8003f4e:	18c9      	adds	r1, r1, r3
 8003f50:	2205      	movs	r2, #5
 8003f52:	0020      	movs	r0, r4
 8003f54:	f00f fd0b 	bl	801396e <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003f58:	4643      	mov	r3, r8
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	3333      	adds	r3, #51	; 0x33
 8003f5e:	2205      	movs	r2, #5
 8003f60:	0021      	movs	r1, r4
 8003f62:	0030      	movs	r0, r6
 8003f64:	f009 ff3a 	bl	800dddc <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003f68:	4643      	mov	r3, r8
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	3333      	adds	r3, #51	; 0x33
 8003f6e:	2201      	movs	r2, #1
 8003f70:	4914      	ldr	r1, [pc, #80]	; (8003fc4 <DisplayTopology+0x1a4>)
 8003f72:	0030      	movs	r0, r6
 8003f74:	f009 ff32 	bl	800dddc <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003f78:	2401      	movs	r4, #1
 8003f7a:	e7aa      	b.n	8003ed2 <DisplayTopology+0xb2>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	425b      	negs	r3, r3
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	3333      	adds	r3, #51	; 0x33
 8003f84:	2201      	movs	r2, #1
 8003f86:	4910      	ldr	r1, [pc, #64]	; (8003fc8 <DisplayTopology+0x1a8>)
 8003f88:	0030      	movs	r0, r6
 8003f8a:	f009 ff27 	bl	800dddc <writePxMutex>
}
 8003f8e:	b002      	add	sp, #8
 8003f90:	bc80      	pop	{r7}
 8003f92:	46b8      	mov	r8, r7
 8003f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	20000ba0 	.word	0x20000ba0
 8003f9c:	08019dfc 	.word	0x08019dfc
 8003fa0:	08019e10 	.word	0x08019e10
 8003fa4:	0801ad00 	.word	0x0801ad00
 8003fa8:	08019e28 	.word	0x08019e28
 8003fac:	20000f7c 	.word	0x20000f7c
 8003fb0:	08019e24 	.word	0x08019e24
 8003fb4:	08019f34 	.word	0x08019f34
 8003fb8:	20000008 	.word	0x20000008
 8003fbc:	08019e18 	.word	0x08019e18
 8003fc0:	0801974c 	.word	0x0801974c
 8003fc4:	08019e0c 	.word	0x08019e0c
 8003fc8:	0801b714 	.word	0x0801b714

08003fcc <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	0006      	movs	r6, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003fd2:	4c2d      	ldr	r4, [pc, #180]	; (8004088 <DisplayPortsDir+0xbc>)
 8003fd4:	3468      	adds	r4, #104	; 0x68
 8003fd6:	4b2d      	ldr	r3, [pc, #180]	; (800408c <DisplayPortsDir+0xc0>)
 8003fd8:	0022      	movs	r2, r4
 8003fda:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003fdc:	c223      	stmia	r2!, {r0, r1, r5}
 8003fde:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003fe0:	c223      	stmia	r2!, {r0, r1, r5}
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003fe6:	0020      	movs	r0, r4
 8003fe8:	f7fc f896 	bl	8000118 <strlen>
 8003fec:	b282      	uxth	r2, r0
 8003fee:	2301      	movs	r3, #1
 8003ff0:	425b      	negs	r3, r3
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	3333      	adds	r3, #51	; 0x33
 8003ff6:	0021      	movs	r1, r4
 8003ff8:	0030      	movs	r0, r6
 8003ffa:	f009 feef 	bl	800dddc <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003ffe:	2501      	movs	r5, #1
 8004000:	e024      	b.n	800404c <DisplayPortsDir+0x80>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8004002:	3401      	adds	r4, #1
 8004004:	b2e4      	uxtb	r4, r4
 8004006:	2c0a      	cmp	r4, #10
 8004008:	d81e      	bhi.n	8004048 <DisplayPortsDir+0x7c>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800400a:	1e6b      	subs	r3, r5, #1
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	4a20      	ldr	r2, [pc, #128]	; (8004090 <DisplayPortsDir+0xc4>)
 8004010:	5a9a      	ldrh	r2, [r3, r2]
 8004012:	1e61      	subs	r1, r4, #1
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	410b      	asrs	r3, r1
 800401a:	4213      	tst	r3, r2
 800401c:	d0f1      	beq.n	8004002 <DisplayPortsDir+0x36>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 800401e:	4f1a      	ldr	r7, [pc, #104]	; (8004088 <DisplayPortsDir+0xbc>)
 8004020:	3768      	adds	r7, #104	; 0x68
 8004022:	0023      	movs	r3, r4
 8004024:	002a      	movs	r2, r5
 8004026:	491b      	ldr	r1, [pc, #108]	; (8004094 <DisplayPortsDir+0xc8>)
 8004028:	0038      	movs	r0, r7
 800402a:	f00f fc4b 	bl	80138c4 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 800402e:	0038      	movs	r0, r7
 8004030:	f7fc f872 	bl	8000118 <strlen>
 8004034:	b282      	uxth	r2, r0
 8004036:	2301      	movs	r3, #1
 8004038:	425b      	negs	r3, r3
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	3333      	adds	r3, #51	; 0x33
 800403e:	0039      	movs	r1, r7
 8004040:	0030      	movs	r0, r6
 8004042:	f009 fecb 	bl	800dddc <writePxMutex>
 8004046:	e7dc      	b.n	8004002 <DisplayPortsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 8004048:	3501      	adds	r5, #1
 800404a:	b2ed      	uxtb	r5, r5
 800404c:	4b12      	ldr	r3, [pc, #72]	; (8004098 <DisplayPortsDir+0xcc>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	42ab      	cmp	r3, r5
 8004052:	d301      	bcc.n	8004058 <DisplayPortsDir+0x8c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8004054:	2401      	movs	r4, #1
 8004056:	e7d6      	b.n	8004006 <DisplayPortsDir+0x3a>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8004058:	4c0b      	ldr	r4, [pc, #44]	; (8004088 <DisplayPortsDir+0xbc>)
 800405a:	3468      	adds	r4, #104	; 0x68
 800405c:	4b0f      	ldr	r3, [pc, #60]	; (800409c <DisplayPortsDir+0xd0>)
 800405e:	0022      	movs	r2, r4
 8004060:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004062:	c223      	stmia	r2!, {r0, r1, r5}
 8004064:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004066:	c223      	stmia	r2!, {r0, r1, r5}
 8004068:	cb03      	ldmia	r3!, {r0, r1}
 800406a:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 800406c:	0020      	movs	r0, r4
 800406e:	f7fc f853 	bl	8000118 <strlen>
 8004072:	b282      	uxth	r2, r0
 8004074:	2301      	movs	r3, #1
 8004076:	425b      	negs	r3, r3
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	3333      	adds	r3, #51	; 0x33
 800407c:	0021      	movs	r1, r4
 800407e:	0030      	movs	r0, r6
 8004080:	f009 feac 	bl	800dddc <writePxMutex>
	HAL_MAX_DELAY);
}
 8004084:	b003      	add	sp, #12
 8004086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004088:	20000ba0 	.word	0x20000ba0
 800408c:	08019e30 	.word	0x08019e30
 8004090:	20002b70 	.word	0x20002b70
 8004094:	08019e4c 	.word	0x08019e4c
 8004098:	20000008 	.word	0x20000008
 800409c:	08019e60 	.word	0x08019e60

080040a0 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 80040a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a2:	46c6      	mov	lr, r8
 80040a4:	b500      	push	{lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	4680      	mov	r8, r0
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80040aa:	f00a f93f 	bl	800e32c <FreeRTOS_CLIGetOutputBuffer>
 80040ae:	0006      	movs	r6, r0
	
	strcpy((char* )pcOutputString,"");
 80040b0:	2300      	movs	r3, #0
 80040b2:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 80040b4:	4b99      	ldr	r3, [pc, #612]	; (800431c <DisplayModuleStatus+0x27c>)
 80040b6:	781a      	ldrb	r2, [r3, #0]
 80040b8:	4c99      	ldr	r4, [pc, #612]	; (8004320 <DisplayModuleStatus+0x280>)
 80040ba:	3468      	adds	r4, #104	; 0x68
 80040bc:	4999      	ldr	r1, [pc, #612]	; (8004324 <DisplayModuleStatus+0x284>)
 80040be:	0020      	movs	r0, r4
 80040c0:	f00f fc00 	bl	80138c4 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80040c4:	0021      	movs	r1, r4
 80040c6:	0030      	movs	r0, r6
 80040c8:	f00f fc1c 	bl	8013904 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 80040cc:	4a96      	ldr	r2, [pc, #600]	; (8004328 <DisplayModuleStatus+0x288>)
 80040ce:	2338      	movs	r3, #56	; 0x38
 80040d0:	5cd2      	ldrb	r2, [r2, r3]
 80040d2:	4996      	ldr	r1, [pc, #600]	; (800432c <DisplayModuleStatus+0x28c>)
 80040d4:	0020      	movs	r0, r4
 80040d6:	f00f fbf5 	bl	80138c4 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80040da:	0021      	movs	r1, r4
 80040dc:	0030      	movs	r0, r6
 80040de:	f00f fc11 	bl	8013904 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 80040e2:	2306      	movs	r3, #6
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	3b04      	subs	r3, #4
 80040e8:	2200      	movs	r2, #0
 80040ea:	4991      	ldr	r1, [pc, #580]	; (8004330 <DisplayModuleStatus+0x290>)
 80040ec:	0020      	movs	r0, r4
 80040ee:	f00f fbe9 	bl	80138c4 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 80040f2:	0021      	movs	r1, r4
 80040f4:	0030      	movs	r0, r6
 80040f6:	f00f fc05 	bl	8013904 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 80040fa:	4a8e      	ldr	r2, [pc, #568]	; (8004334 <DisplayModuleStatus+0x294>)
 80040fc:	498e      	ldr	r1, [pc, #568]	; (8004338 <DisplayModuleStatus+0x298>)
 80040fe:	0020      	movs	r0, r4
 8004100:	f00f fbe0 	bl	80138c4 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8004104:	0021      	movs	r1, r4
 8004106:	0030      	movs	r0, r6
 8004108:	f00f fbfc 	bl	8013904 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 800410c:	4a8b      	ldr	r2, [pc, #556]	; (800433c <DisplayModuleStatus+0x29c>)
 800410e:	498c      	ldr	r1, [pc, #560]	; (8004340 <DisplayModuleStatus+0x2a0>)
 8004110:	0020      	movs	r0, r4
 8004112:	f00f fbd7 	bl	80138c4 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8004116:	0021      	movs	r1, r4
 8004118:	0030      	movs	r0, r6
 800411a:	f00f fbf3 	bl	8013904 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 800411e:	4b89      	ldr	r3, [pc, #548]	; (8004344 <DisplayModuleStatus+0x2a4>)
 8004120:	0022      	movs	r2, r4
 8004122:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004124:	c223      	stmia	r2!, {r0, r1, r5}
 8004126:	6819      	ldr	r1, [r3, #0]
 8004128:	6011      	str	r1, [r2, #0]
 800412a:	8899      	ldrh	r1, [r3, #4]
 800412c:	8091      	strh	r1, [r2, #4]
 800412e:	799b      	ldrb	r3, [r3, #6]
 8004130:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8004132:	0021      	movs	r1, r4
 8004134:	0030      	movs	r0, r6
 8004136:	f00f fbe5 	bl	8013904 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800413a:	2401      	movs	r4, #1
 800413c:	e010      	b.n	8004160 <DisplayModuleStatus+0xc0>
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 800413e:	4978      	ldr	r1, [pc, #480]	; (8004320 <DisplayModuleStatus+0x280>)
 8004140:	000a      	movs	r2, r1
 8004142:	3268      	adds	r2, #104	; 0x68
 8004144:	4b80      	ldr	r3, [pc, #512]	; (8004348 <DisplayModuleStatus+0x2a8>)
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	6688      	str	r0, [r1, #104]	; 0x68
 800414a:	8899      	ldrh	r1, [r3, #4]
 800414c:	8091      	strh	r1, [r2, #4]
 800414e:	799b      	ldrb	r3, [r3, #6]
 8004150:	7193      	strb	r3, [r2, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8004152:	4973      	ldr	r1, [pc, #460]	; (8004320 <DisplayModuleStatus+0x280>)
 8004154:	3168      	adds	r1, #104	; 0x68
 8004156:	0030      	movs	r0, r6
 8004158:	f00f fbd4 	bl	8013904 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800415c:	3401      	adds	r4, #1
 800415e:	b2e4      	uxtb	r4, r4
 8004160:	2c05      	cmp	r4, #5
 8004162:	d83f      	bhi.n	80041e4 <DisplayModuleStatus+0x144>
		sprintf(pcUserMessage,"P%d: ",i);
 8004164:	4d6e      	ldr	r5, [pc, #440]	; (8004320 <DisplayModuleStatus+0x280>)
 8004166:	3568      	adds	r5, #104	; 0x68
 8004168:	0022      	movs	r2, r4
 800416a:	4978      	ldr	r1, [pc, #480]	; (800434c <DisplayModuleStatus+0x2ac>)
 800416c:	0028      	movs	r0, r5
 800416e:	f00f fba9 	bl	80138c4 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004172:	0029      	movs	r1, r5
 8004174:	0030      	movs	r0, r6
 8004176:	f00f fbc5 	bl	8013904 <strcat>
		switch(portStatus[i]){
 800417a:	4b6b      	ldr	r3, [pc, #428]	; (8004328 <DisplayModuleStatus+0x288>)
 800417c:	191b      	adds	r3, r3, r4
 800417e:	223c      	movs	r2, #60	; 0x3c
 8004180:	5c9b      	ldrb	r3, [r3, r2]
 8004182:	2b04      	cmp	r3, #4
 8004184:	d8e5      	bhi.n	8004152 <DisplayModuleStatus+0xb2>
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4a71      	ldr	r2, [pc, #452]	; (8004350 <DisplayModuleStatus+0x2b0>)
 800418a:	58d3      	ldr	r3, [r2, r3]
 800418c:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 800418e:	4a64      	ldr	r2, [pc, #400]	; (8004320 <DisplayModuleStatus+0x280>)
 8004190:	3268      	adds	r2, #104	; 0x68
 8004192:	4b70      	ldr	r3, [pc, #448]	; (8004354 <DisplayModuleStatus+0x2b4>)
 8004194:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004196:	c223      	stmia	r2!, {r0, r1, r5}
 8004198:	0011      	movs	r1, r2
 800419a:	cb05      	ldmia	r3!, {r0, r2}
 800419c:	c105      	stmia	r1!, {r0, r2}
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	700b      	strb	r3, [r1, #0]
				break;
 80041a2:	e7d6      	b.n	8004152 <DisplayModuleStatus+0xb2>
				sprintf(pcUserMessage,"Streaming\n\r");
 80041a4:	4b5e      	ldr	r3, [pc, #376]	; (8004320 <DisplayModuleStatus+0x280>)
 80041a6:	3368      	adds	r3, #104	; 0x68
 80041a8:	4a6b      	ldr	r2, [pc, #428]	; (8004358 <DisplayModuleStatus+0x2b8>)
 80041aa:	ca23      	ldmia	r2!, {r0, r1, r5}
 80041ac:	c323      	stmia	r3!, {r0, r1, r5}
				break;
 80041ae:	e7d0      	b.n	8004152 <DisplayModuleStatus+0xb2>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 80041b0:	495b      	ldr	r1, [pc, #364]	; (8004320 <DisplayModuleStatus+0x280>)
 80041b2:	3168      	adds	r1, #104	; 0x68
 80041b4:	4b69      	ldr	r3, [pc, #420]	; (800435c <DisplayModuleStatus+0x2bc>)
 80041b6:	000a      	movs	r2, r1
 80041b8:	cb23      	ldmia	r3!, {r0, r1, r5}
 80041ba:	c223      	stmia	r2!, {r0, r1, r5}
 80041bc:	cb23      	ldmia	r3!, {r0, r1, r5}
 80041be:	c223      	stmia	r2!, {r0, r1, r5}
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	8013      	strh	r3, [r2, #0]
				break;
 80041c4:	e7c5      	b.n	8004152 <DisplayModuleStatus+0xb2>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 80041c6:	4956      	ldr	r1, [pc, #344]	; (8004320 <DisplayModuleStatus+0x280>)
 80041c8:	3168      	adds	r1, #104	; 0x68
 80041ca:	4b65      	ldr	r3, [pc, #404]	; (8004360 <DisplayModuleStatus+0x2c0>)
 80041cc:	000a      	movs	r2, r1
 80041ce:	cb23      	ldmia	r3!, {r0, r1, r5}
 80041d0:	c223      	stmia	r2!, {r0, r1, r5}
 80041d2:	cb23      	ldmia	r3!, {r0, r1, r5}
 80041d4:	c223      	stmia	r2!, {r0, r1, r5}
 80041d6:	6819      	ldr	r1, [r3, #0]
 80041d8:	6011      	str	r1, [r2, #0]
 80041da:	8899      	ldrh	r1, [r3, #4]
 80041dc:	8091      	strh	r1, [r2, #4]
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	7193      	strb	r3, [r2, #6]
				break;
 80041e2:	e7b6      	b.n	8004152 <DisplayModuleStatus+0xb2>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 80041e4:	494e      	ldr	r1, [pc, #312]	; (8004320 <DisplayModuleStatus+0x280>)
 80041e6:	3168      	adds	r1, #104	; 0x68
 80041e8:	4b5e      	ldr	r3, [pc, #376]	; (8004364 <DisplayModuleStatus+0x2c4>)
 80041ea:	000a      	movs	r2, r1
 80041ec:	cb31      	ldmia	r3!, {r0, r4, r5}
 80041ee:	c231      	stmia	r2!, {r0, r4, r5}
 80041f0:	cb31      	ldmia	r3!, {r0, r4, r5}
 80041f2:	c231      	stmia	r2!, {r0, r4, r5}
	strcat((char* )pcOutputString,pcUserMessage);
 80041f4:	0030      	movs	r0, r6
 80041f6:	f00f fb85 	bl	8013904 <strcat>
	for(char i =1; i <= 6; i++){
 80041fa:	2401      	movs	r4, #1
 80041fc:	e01c      	b.n	8004238 <DisplayModuleStatus+0x198>
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 80041fe:	00eb      	lsls	r3, r5, #3
 8004200:	1b5b      	subs	r3, r3, r5
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4a58      	ldr	r2, [pc, #352]	; (8004368 <DisplayModuleStatus+0x2c8>)
 8004206:	18d3      	adds	r3, r2, r3
 8004208:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800420a:	f006 fbf9 	bl	800aa00 <GetPort>
 800420e:	0007      	movs	r7, r0
 8004210:	00ad      	lsls	r5, r5, #2
 8004212:	4b56      	ldr	r3, [pc, #344]	; (800436c <DisplayModuleStatus+0x2cc>)
 8004214:	58e8      	ldr	r0, [r5, r3]
 8004216:	f006 fbf3 	bl	800aa00 <GetPort>
 800421a:	4d41      	ldr	r5, [pc, #260]	; (8004320 <DisplayModuleStatus+0x280>)
 800421c:	3568      	adds	r5, #104	; 0x68
 800421e:	9000      	str	r0, [sp, #0]
 8004220:	003b      	movs	r3, r7
 8004222:	0022      	movs	r2, r4
 8004224:	4952      	ldr	r1, [pc, #328]	; (8004370 <DisplayModuleStatus+0x2d0>)
 8004226:	0028      	movs	r0, r5
 8004228:	f00f fb4c 	bl	80138c4 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 800422c:	0029      	movs	r1, r5
 800422e:	0030      	movs	r0, r6
 8004230:	f00f fb68 	bl	8013904 <strcat>
	for(char i =1; i <= 6; i++){
 8004234:	3401      	adds	r4, #1
 8004236:	b2e4      	uxtb	r4, r4
 8004238:	2c06      	cmp	r4, #6
 800423a:	d813      	bhi.n	8004264 <DisplayModuleStatus+0x1c4>
		if(streamDMA[i - 1].Instance == 0){
 800423c:	1e65      	subs	r5, r4, #1
 800423e:	00eb      	lsls	r3, r5, #3
 8004240:	1b5b      	subs	r3, r3, r5
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4a48      	ldr	r2, [pc, #288]	; (8004368 <DisplayModuleStatus+0x2c8>)
 8004246:	589b      	ldr	r3, [r3, r2]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1d8      	bne.n	80041fe <DisplayModuleStatus+0x15e>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 800424c:	4d34      	ldr	r5, [pc, #208]	; (8004320 <DisplayModuleStatus+0x280>)
 800424e:	3568      	adds	r5, #104	; 0x68
 8004250:	0022      	movs	r2, r4
 8004252:	4948      	ldr	r1, [pc, #288]	; (8004374 <DisplayModuleStatus+0x2d4>)
 8004254:	0028      	movs	r0, r5
 8004256:	f00f fb35 	bl	80138c4 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 800425a:	0029      	movs	r1, r5
 800425c:	0030      	movs	r0, r6
 800425e:	f00f fb51 	bl	8013904 <strcat>
 8004262:	e7e7      	b.n	8004234 <DisplayModuleStatus+0x194>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004264:	0030      	movs	r0, r6
 8004266:	f7fb ff57 	bl	8000118 <strlen>
 800426a:	1830      	adds	r0, r6, r0
 800426c:	2203      	movs	r2, #3
 800426e:	4942      	ldr	r1, [pc, #264]	; (8004378 <DisplayModuleStatus+0x2d8>)
 8004270:	f00f f92e 	bl	80134d0 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004274:	0030      	movs	r0, r6
 8004276:	f7fb ff4f 	bl	8000118 <strlen>
 800427a:	1830      	adds	r0, r6, r0
 800427c:	221d      	movs	r2, #29
 800427e:	493f      	ldr	r1, [pc, #252]	; (800437c <DisplayModuleStatus+0x2dc>)
 8004280:	f00f f926 	bl	80134d0 <memcpy>
	temp =strlen((char* )pcOutputString);
 8004284:	0030      	movs	r0, r6
 8004286:	f7fb ff47 	bl	8000118 <strlen>
 800428a:	0007      	movs	r7, r0
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800428c:	2401      	movs	r4, #1
 800428e:	e001      	b.n	8004294 <DisplayModuleStatus+0x1f4>
 8004290:	3401      	adds	r4, #1
 8004292:	b2e4      	uxtb	r4, r4
 8004294:	2c05      	cmp	r4, #5
 8004296:	d817      	bhi.n	80042c8 <DisplayModuleStatus+0x228>
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004298:	4b20      	ldr	r3, [pc, #128]	; (800431c <DisplayModuleStatus+0x27c>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	3b01      	subs	r3, #1
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	4a37      	ldr	r2, [pc, #220]	; (8004380 <DisplayModuleStatus+0x2e0>)
 80042a2:	5a9a      	ldrh	r2, [r3, r2]
 80042a4:	1e61      	subs	r1, r4, #1
 80042a6:	2380      	movs	r3, #128	; 0x80
 80042a8:	021b      	lsls	r3, r3, #8
 80042aa:	410b      	asrs	r3, r1
 80042ac:	4213      	tst	r3, r2
 80042ae:	d0ef      	beq.n	8004290 <DisplayModuleStatus+0x1f0>
		{
			sprintf(pcUserMessage,"P%d ",p);
 80042b0:	4d1b      	ldr	r5, [pc, #108]	; (8004320 <DisplayModuleStatus+0x280>)
 80042b2:	3568      	adds	r5, #104	; 0x68
 80042b4:	0022      	movs	r2, r4
 80042b6:	4933      	ldr	r1, [pc, #204]	; (8004384 <DisplayModuleStatus+0x2e4>)
 80042b8:	0028      	movs	r0, r5
 80042ba:	f00f fb03 	bl	80138c4 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80042be:	0029      	movs	r1, r5
 80042c0:	0030      	movs	r0, r6
 80042c2:	f00f fb1f 	bl	8013904 <strcat>
 80042c6:	e7e3      	b.n	8004290 <DisplayModuleStatus+0x1f0>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 80042c8:	0030      	movs	r0, r6
 80042ca:	f7fb ff25 	bl	8000118 <strlen>
 80042ce:	043d      	lsls	r5, r7, #16
 80042d0:	0c2d      	lsrs	r5, r5, #16
 80042d2:	42a8      	cmp	r0, r5
 80042d4:	d00e      	beq.n	80042f4 <DisplayModuleStatus+0x254>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 80042d6:	0030      	movs	r0, r6
 80042d8:	f7fb ff1e 	bl	8000118 <strlen>
 80042dc:	1830      	adds	r0, r6, r0
 80042de:	2203      	movs	r2, #3
 80042e0:	4925      	ldr	r1, [pc, #148]	; (8004378 <DisplayModuleStatus+0x2d8>)
 80042e2:	f00f f8f5 	bl	80134d0 <memcpy>
	
	/* Display output */
	if(port)
 80042e6:	4643      	mov	r3, r8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <DisplayModuleStatus+0x260>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 80042ec:	b002      	add	sp, #8
 80042ee:	bc80      	pop	{r7}
 80042f0:	46b8      	mov	r8, r7
 80042f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 80042f4:	1830      	adds	r0, r6, r0
 80042f6:	2205      	movs	r2, #5
 80042f8:	4923      	ldr	r1, [pc, #140]	; (8004388 <DisplayModuleStatus+0x2e8>)
 80042fa:	f00f f8e9 	bl	80134d0 <memcpy>
 80042fe:	e7ea      	b.n	80042d6 <DisplayModuleStatus+0x236>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004300:	0030      	movs	r0, r6
 8004302:	f7fb ff09 	bl	8000118 <strlen>
 8004306:	b282      	uxth	r2, r0
 8004308:	2301      	movs	r3, #1
 800430a:	425b      	negs	r3, r3
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	3333      	adds	r3, #51	; 0x33
 8004310:	0031      	movs	r1, r6
 8004312:	4640      	mov	r0, r8
 8004314:	f009 fd62 	bl	800dddc <writePxMutex>
}
 8004318:	e7e8      	b.n	80042ec <DisplayModuleStatus+0x24c>
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	20000aa0 	.word	0x20000aa0
 8004320:	20000ba0 	.word	0x20000ba0
 8004324:	08019e80 	.word	0x08019e80
 8004328:	20000c20 	.word	0x20000c20
 800432c:	08019e9c 	.word	0x08019e9c
 8004330:	08019eb8 	.word	0x08019eb8
 8004334:	08019ed8 	.word	0x08019ed8
 8004338:	08019ee4 	.word	0x08019ee4
 800433c:	08019efc 	.word	0x08019efc
 8004340:	08019f08 	.word	0x08019f08
 8004344:	08019f24 	.word	0x08019f24
 8004348:	08019f40 	.word	0x08019f40
 800434c:	08019f38 	.word	0x08019f38
 8004350:	080196a0 	.word	0x080196a0
 8004354:	08019f48 	.word	0x08019f48
 8004358:	08019f60 	.word	0x08019f60
 800435c:	08019f6c 	.word	0x08019f6c
 8004360:	08019f88 	.word	0x08019f88
 8004364:	08019fa8 	.word	0x08019fa8
 8004368:	20002650 	.word	0x20002650
 800436c:	200019bc 	.word	0x200019bc
 8004370:	08019fdc 	.word	0x08019fdc
 8004374:	08019fc0 	.word	0x08019fc0
 8004378:	08019f34 	.word	0x08019f34
 800437c:	0801a00c 	.word	0x0801a00c
 8004380:	20002b70 	.word	0x20002b70
 8004384:	0801a02c 	.word	0x0801a02c
 8004388:	0801a034 	.word	0x0801a034

0800438c <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 800438c:	b570      	push	{r4, r5, r6, lr}
 800438e:	0006      	movs	r6, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004390:	492a      	ldr	r1, [pc, #168]	; (800443c <GetID+0xb0>)
 8004392:	f7fb feb7 	bl	8000104 <strcmp>
 8004396:	2800      	cmp	r0, #0
 8004398:	d00a      	beq.n	80043b0 <GetID+0x24>
		return myID;
	else if(!strcmp(string,"all"))
 800439a:	4929      	ldr	r1, [pc, #164]	; (8004440 <GetID+0xb4>)
 800439c:	0030      	movs	r0, r6
 800439e:	f7fb feb1 	bl	8000104 <strcmp>
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d047      	beq.n	8004436 <GetID+0xaa>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 80043a6:	7835      	ldrb	r5, [r6, #0]
 80043a8:	2d23      	cmp	r5, #35	; 0x23
 80043aa:	d004      	beq.n	80043b6 <GetID+0x2a>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 80043ac:	2400      	movs	r4, #0
 80043ae:	e018      	b.n	80043e2 <GetID+0x56>
		return myID;
 80043b0:	4b24      	ldr	r3, [pc, #144]	; (8004444 <GetID+0xb8>)
 80043b2:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 80043b4:	bd70      	pop	{r4, r5, r6, pc}
		id =atol(string + 1);
 80043b6:	1c70      	adds	r0, r6, #1
 80043b8:	f00e fe2b 	bl	8013012 <atol>
 80043bc:	b2c0      	uxtb	r0, r0
		if(id > 0 && id <= N)
 80043be:	2800      	cmp	r0, #0
 80043c0:	d003      	beq.n	80043ca <GetID+0x3e>
 80043c2:	4b21      	ldr	r3, [pc, #132]	; (8004448 <GetID+0xbc>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	4283      	cmp	r3, r0
 80043c8:	d205      	bcs.n	80043d6 <GetID+0x4a>
		else if(id == myID)
 80043ca:	4b1e      	ldr	r3, [pc, #120]	; (8004444 <GetID+0xb8>)
 80043cc:	781c      	ldrb	r4, [r3, #0]
 80043ce:	4284      	cmp	r4, r0
 80043d0:	d003      	beq.n	80043da <GetID+0x4e>
			return BOS_ERR_WrongID;
 80043d2:	2066      	movs	r0, #102	; 0x66
 80043d4:	e7ee      	b.n	80043b4 <GetID+0x28>
			return id;
 80043d6:	b200      	sxth	r0, r0
 80043d8:	e7ec      	b.n	80043b4 <GetID+0x28>
			return myID;
 80043da:	b220      	sxth	r0, r4
 80043dc:	e7ea      	b.n	80043b4 <GetID+0x28>
		for(i =0; i < N; i++){
 80043de:	3401      	adds	r4, #1
 80043e0:	b2e4      	uxtb	r4, r4
 80043e2:	4b19      	ldr	r3, [pc, #100]	; (8004448 <GetID+0xbc>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	42a3      	cmp	r3, r4
 80043e8:	d90d      	bls.n	8004406 <GetID+0x7a>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 80043ea:	00a1      	lsls	r1, r4, #2
 80043ec:	1909      	adds	r1, r1, r4
 80043ee:	0049      	lsls	r1, r1, #1
 80043f0:	4b16      	ldr	r3, [pc, #88]	; (800444c <GetID+0xc0>)
 80043f2:	18c9      	adds	r1, r1, r3
 80043f4:	0030      	movs	r0, r6
 80043f6:	f7fb fe85 	bl	8000104 <strcmp>
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d1ef      	bne.n	80043de <GetID+0x52>
 80043fe:	2d00      	cmp	r5, #0
 8004400:	d0ed      	beq.n	80043de <GetID+0x52>
				return (i);
 8004402:	b220      	sxth	r0, r4
 8004404:	e7d6      	b.n	80043b4 <GetID+0x28>
		for(i =0; i < MaxNumOfGroups; i++){
 8004406:	2500      	movs	r5, #0
 8004408:	2d09      	cmp	r5, #9
 800440a:	d812      	bhi.n	8004432 <GetID+0xa6>
			if(!strcmp(string,groupAlias[i]))
 800440c:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <GetID+0xb8>)
 800440e:	00a9      	lsls	r1, r5, #2
 8004410:	1949      	adds	r1, r1, r5
 8004412:	004a      	lsls	r2, r1, #1
 8004414:	3338      	adds	r3, #56	; 0x38
 8004416:	1899      	adds	r1, r3, r2
 8004418:	0030      	movs	r0, r6
 800441a:	f7fb fe73 	bl	8000104 <strcmp>
 800441e:	2800      	cmp	r0, #0
 8004420:	d002      	beq.n	8004428 <GetID+0x9c>
		for(i =0; i < MaxNumOfGroups; i++){
 8004422:	3501      	adds	r5, #1
 8004424:	b2ed      	uxtb	r5, r5
 8004426:	e7ef      	b.n	8004408 <GetID+0x7c>
				return (BOS_MULTICAST | (i << 8));
 8004428:	022c      	lsls	r4, r5, #8
 800442a:	20fe      	movs	r0, #254	; 0xfe
 800442c:	4320      	orrs	r0, r4
 800442e:	b200      	sxth	r0, r0
 8004430:	e7c0      	b.n	80043b4 <GetID+0x28>
		return BOS_ERR_WrongName;
 8004432:	2064      	movs	r0, #100	; 0x64
 8004434:	e7be      	b.n	80043b4 <GetID+0x28>
		return BOS_BROADCAST;
 8004436:	20ff      	movs	r0, #255	; 0xff
 8004438:	e7bc      	b.n	80043b4 <GetID+0x28>
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	0801a03c 	.word	0x0801a03c
 8004440:	0801a040 	.word	0x0801a040
 8004444:	20000aa0 	.word	0x20000aa0
 8004448:	20000008 	.word	0x20000008
 800444c:	20000e6c 	.word	0x20000e6c

08004450 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	0004      	movs	r4, r0
 8004454:	000e      	movs	r6, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
 8004456:	2500      	movs	r5, #0
 8004458:	2d03      	cmp	r5, #3
 800445a:	dc09      	bgt.n	8004470 <NameModule+0x20>
		if(!strcmp(alias,BOSkeywords[i]))
 800445c:	00ab      	lsls	r3, r5, #2
 800445e:	492a      	ldr	r1, [pc, #168]	; (8004508 <NameModule+0xb8>)
 8004460:	18c9      	adds	r1, r1, r3
 8004462:	0030      	movs	r0, r6
 8004464:	f7fb fe4e 	bl	8000104 <strcmp>
 8004468:	2800      	cmp	r0, #0
 800446a:	d046      	beq.n	80044fa <NameModule+0xaa>
	for(i =0; i < NumOfKeywords; i++){
 800446c:	3501      	adds	r5, #1
 800446e:	e7f3      	b.n	8004458 <NameModule+0x8>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004470:	2501      	movs	r5, #1
 8004472:	4b26      	ldr	r3, [pc, #152]	; (800450c <NameModule+0xbc>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	42ab      	cmp	r3, r5
 8004478:	dd0b      	ble.n	8004492 <NameModule+0x42>
		if(!strcmp(alias,moduleAlias[i]))
 800447a:	00a9      	lsls	r1, r5, #2
 800447c:	1949      	adds	r1, r1, r5
 800447e:	0049      	lsls	r1, r1, #1
 8004480:	4b23      	ldr	r3, [pc, #140]	; (8004510 <NameModule+0xc0>)
 8004482:	18c9      	adds	r1, r1, r3
 8004484:	0030      	movs	r0, r6
 8004486:	f7fb fe3d 	bl	8000104 <strcmp>
 800448a:	2800      	cmp	r0, #0
 800448c:	d037      	beq.n	80044fe <NameModule+0xae>
	for(i =1; i < N; i++){
 800448e:	3501      	adds	r5, #1
 8004490:	e7ef      	b.n	8004472 <NameModule+0x22>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
 8004492:	2500      	movs	r5, #0
 8004494:	e000      	b.n	8004498 <NameModule+0x48>
 8004496:	3501      	adds	r5, #1
 8004498:	2d09      	cmp	r5, #9
 800449a:	dc0c      	bgt.n	80044b6 <NameModule+0x66>
		if(!strcmp(alias,groupAlias[i]))
 800449c:	4b1d      	ldr	r3, [pc, #116]	; (8004514 <NameModule+0xc4>)
 800449e:	00a9      	lsls	r1, r5, #2
 80044a0:	1949      	adds	r1, r1, r5
 80044a2:	004a      	lsls	r2, r1, #1
 80044a4:	3338      	adds	r3, #56	; 0x38
 80044a6:	1899      	adds	r1, r3, r2
 80044a8:	0030      	movs	r0, r6
 80044aa:	f7fb fe2b 	bl	8000104 <strcmp>
 80044ae:	2800      	cmp	r0, #0
 80044b0:	d1f1      	bne.n	8004496 <NameModule+0x46>
			return BOS_ERR_ExistingAlias;
 80044b2:	2007      	movs	r0, #7
 80044b4:	e024      	b.n	8004500 <NameModule+0xb0>
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80044b6:	4b18      	ldr	r3, [pc, #96]	; (8004518 <NameModule+0xc8>)
 80044b8:	4a18      	ldr	r2, [pc, #96]	; (800451c <NameModule+0xcc>)
 80044ba:	645a      	str	r2, [r3, #68]	; 0x44
 80044bc:	4b16      	ldr	r3, [pc, #88]	; (8004518 <NameModule+0xc8>)
 80044be:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80044c0:	2d00      	cmp	r5, #0
 80044c2:	d00f      	beq.n	80044e4 <NameModule+0x94>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80044c8:	0038      	movs	r0, r7
 80044ca:	f7fb fe25 	bl	8000118 <strlen>
 80044ce:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80044d0:	0039      	movs	r1, r7
 80044d2:	0030      	movs	r0, r6
 80044d4:	f00f fa39 	bl	801394a <strncmp>
 80044d8:	2800      	cmp	r0, #0
 80044da:	d012      	beq.n	8004502 <NameModule+0xb2>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80044dc:	686a      	ldr	r2, [r5, #4]
 80044de:	4b0e      	ldr	r3, [pc, #56]	; (8004518 <NameModule+0xc8>)
 80044e0:	645a      	str	r2, [r3, #68]	; 0x44
 80044e2:	e7eb      	b.n	80044bc <NameModule+0x6c>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 80044e4:	00a0      	lsls	r0, r4, #2
 80044e6:	1900      	adds	r0, r0, r4
 80044e8:	0040      	lsls	r0, r0, #1
 80044ea:	4c09      	ldr	r4, [pc, #36]	; (8004510 <NameModule+0xc0>)
 80044ec:	1900      	adds	r0, r0, r4
 80044ee:	0031      	movs	r1, r6
 80044f0:	f00f fa23 	bl	801393a <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 80044f4:	f7ff f8a8 	bl	8003648 <SaveEEalias>
	
	return result;
 80044f8:	e002      	b.n	8004500 <NameModule+0xb0>
			return BOS_ERR_Keyword;
 80044fa:	2006      	movs	r0, #6
 80044fc:	e000      	b.n	8004500 <NameModule+0xb0>
			return BOS_ERR_ExistingAlias;
 80044fe:	2007      	movs	r0, #7
}
 8004500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingCmd;
 8004502:	2008      	movs	r0, #8
 8004504:	e7fc      	b.n	8004500 <NameModule+0xb0>
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	080196fc 	.word	0x080196fc
 800450c:	20000008 	.word	0x20000008
 8004510:	20000e6c 	.word	0x20000e6c
 8004514:	20000aa0 	.word	0x20000aa0
 8004518:	20000c20 	.word	0x20000c20
 800451c:	200000bc 	.word	0x200000bc

08004520 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004522:	0004      	movs	r4, r0
 8004524:	000e      	movs	r6, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 8004526:	2500      	movs	r5, #0
 8004528:	2d09      	cmp	r5, #9
 800452a:	dc17      	bgt.n	800455c <AddModuleToGroup+0x3c>
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800452c:	4b39      	ldr	r3, [pc, #228]	; (8004614 <AddModuleToGroup+0xf4>)
 800452e:	00a9      	lsls	r1, r5, #2
 8004530:	1949      	adds	r1, r1, r5
 8004532:	004a      	lsls	r2, r1, #1
 8004534:	3338      	adds	r3, #56	; 0x38
 8004536:	1899      	adds	r1, r3, r2
 8004538:	0030      	movs	r0, r6
 800453a:	f7fb fde3 	bl	8000104 <strcmp>
 800453e:	2800      	cmp	r0, #0
 8004540:	d001      	beq.n	8004546 <AddModuleToGroup+0x26>
	for(i =0; i < MaxNumOfGroups; i++){
 8004542:	3501      	adds	r5, #1
 8004544:	e7f0      	b.n	8004528 <AddModuleToGroup+0x8>
			/* 1. Add this module to the group */
			groupModules[module - 1] |=(0x0001 << i);
 8004546:	3c01      	subs	r4, #1
 8004548:	2201      	movs	r2, #1
 800454a:	40aa      	lsls	r2, r5
 800454c:	0060      	lsls	r0, r4, #1
 800454e:	4c31      	ldr	r4, [pc, #196]	; (8004614 <AddModuleToGroup+0xf4>)
 8004550:	1824      	adds	r4, r4, r0
 8004552:	88a3      	ldrh	r3, [r4, #4]
 8004554:	4313      	orrs	r3, r2
 8004556:	80a3      	strh	r3, [r4, #4]
			
			/* 2. Save group to emulated EEPROM -- Should call this manually */
			//result = SaveEEgroup();			
			return result;
 8004558:	2000      	movs	r0, #0
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 800455a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for(j =0; j < NumOfKeywords; j++){
 800455c:	2500      	movs	r5, #0
 800455e:	2d03      	cmp	r5, #3
 8004560:	dc09      	bgt.n	8004576 <AddModuleToGroup+0x56>
		if(!strcmp(group,BOSkeywords[j]))
 8004562:	00ab      	lsls	r3, r5, #2
 8004564:	492c      	ldr	r1, [pc, #176]	; (8004618 <AddModuleToGroup+0xf8>)
 8004566:	18c9      	adds	r1, r1, r3
 8004568:	0030      	movs	r0, r6
 800456a:	f7fb fdcb 	bl	8000104 <strcmp>
 800456e:	2800      	cmp	r0, #0
 8004570:	d04a      	beq.n	8004608 <AddModuleToGroup+0xe8>
	for(j =0; j < NumOfKeywords; j++){
 8004572:	3501      	adds	r5, #1
 8004574:	e7f3      	b.n	800455e <AddModuleToGroup+0x3e>
	for(j =1; j < N; j++){
 8004576:	2501      	movs	r5, #1
 8004578:	4b28      	ldr	r3, [pc, #160]	; (800461c <AddModuleToGroup+0xfc>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	42ab      	cmp	r3, r5
 800457e:	dd0b      	ble.n	8004598 <AddModuleToGroup+0x78>
		if(!strcmp(group,moduleAlias[j]))
 8004580:	00a9      	lsls	r1, r5, #2
 8004582:	1949      	adds	r1, r1, r5
 8004584:	0049      	lsls	r1, r1, #1
 8004586:	4b26      	ldr	r3, [pc, #152]	; (8004620 <AddModuleToGroup+0x100>)
 8004588:	18c9      	adds	r1, r1, r3
 800458a:	0030      	movs	r0, r6
 800458c:	f7fb fdba 	bl	8000104 <strcmp>
 8004590:	2800      	cmp	r0, #0
 8004592:	d03b      	beq.n	800460c <AddModuleToGroup+0xec>
	for(j =1; j < N; j++){
 8004594:	3501      	adds	r5, #1
 8004596:	e7ef      	b.n	8004578 <AddModuleToGroup+0x58>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004598:	4b22      	ldr	r3, [pc, #136]	; (8004624 <AddModuleToGroup+0x104>)
 800459a:	4a23      	ldr	r2, [pc, #140]	; (8004628 <AddModuleToGroup+0x108>)
 800459c:	649a      	str	r2, [r3, #72]	; 0x48
 800459e:	4b21      	ldr	r3, [pc, #132]	; (8004624 <AddModuleToGroup+0x104>)
 80045a0:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 80045a2:	2d00      	cmp	r5, #0
 80045a4:	d023      	beq.n	80045ee <AddModuleToGroup+0xce>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80045a6:	682b      	ldr	r3, [r5, #0]
 80045a8:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80045aa:	0038      	movs	r0, r7
 80045ac:	f7fb fdb4 	bl	8000118 <strlen>
 80045b0:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80045b2:	0039      	movs	r1, r7
 80045b4:	0030      	movs	r0, r6
 80045b6:	f00f f9c8 	bl	801394a <strncmp>
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d028      	beq.n	8004610 <AddModuleToGroup+0xf0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80045be:	686a      	ldr	r2, [r5, #4]
 80045c0:	4b18      	ldr	r3, [pc, #96]	; (8004624 <AddModuleToGroup+0x104>)
 80045c2:	649a      	str	r2, [r3, #72]	; 0x48
 80045c4:	e7eb      	b.n	800459e <AddModuleToGroup+0x7e>
			strcpy(groupAlias[i],group);
 80045c6:	4813      	ldr	r0, [pc, #76]	; (8004614 <AddModuleToGroup+0xf4>)
 80045c8:	00ab      	lsls	r3, r5, #2
 80045ca:	195b      	adds	r3, r3, r5
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	3038      	adds	r0, #56	; 0x38
 80045d0:	18c0      	adds	r0, r0, r3
 80045d2:	0031      	movs	r1, r6
 80045d4:	f00f f9b1 	bl	801393a <strcpy>
	groupModules[module - 1] |=(0x0001 << i);
 80045d8:	3c01      	subs	r4, #1
 80045da:	2201      	movs	r2, #1
 80045dc:	40aa      	lsls	r2, r5
 80045de:	0064      	lsls	r4, r4, #1
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <AddModuleToGroup+0xf4>)
 80045e2:	191c      	adds	r4, r3, r4
 80045e4:	88a3      	ldrh	r3, [r4, #4]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	80a3      	strh	r3, [r4, #4]
	return result;
 80045ea:	2000      	movs	r0, #0
 80045ec:	e7b5      	b.n	800455a <AddModuleToGroup+0x3a>
	for(i =0; i < MaxNumOfGroups; i++){
 80045ee:	2d09      	cmp	r5, #9
 80045f0:	dcf2      	bgt.n	80045d8 <AddModuleToGroup+0xb8>
		if(!groupAlias[i][0]){
 80045f2:	00ab      	lsls	r3, r5, #2
 80045f4:	195b      	adds	r3, r3, r5
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	4a06      	ldr	r2, [pc, #24]	; (8004614 <AddModuleToGroup+0xf4>)
 80045fa:	18d3      	adds	r3, r2, r3
 80045fc:	2238      	movs	r2, #56	; 0x38
 80045fe:	5c9b      	ldrb	r3, [r3, r2]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0e0      	beq.n	80045c6 <AddModuleToGroup+0xa6>
	for(i =0; i < MaxNumOfGroups; i++){
 8004604:	3501      	adds	r5, #1
 8004606:	e7f2      	b.n	80045ee <AddModuleToGroup+0xce>
			return BOS_ERR_Keyword;
 8004608:	2006      	movs	r0, #6
 800460a:	e7a6      	b.n	800455a <AddModuleToGroup+0x3a>
			return BOS_ERR_ExistingAlias;
 800460c:	2007      	movs	r0, #7
 800460e:	e7a4      	b.n	800455a <AddModuleToGroup+0x3a>
			return BOS_ERR_ExistingCmd;
 8004610:	2008      	movs	r0, #8
 8004612:	e7a2      	b.n	800455a <AddModuleToGroup+0x3a>
 8004614:	20000aa0 	.word	0x20000aa0
 8004618:	080196fc 	.word	0x080196fc
 800461c:	20000008 	.word	0x20000008
 8004620:	20000e6c 	.word	0x20000e6c
 8004624:	20000c20 	.word	0x20000c20
 8004628:	200000bc 	.word	0x200000bc

0800462c <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 800462c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800462e:	46d6      	mov	lr, sl
 8004630:	464f      	mov	r7, r9
 8004632:	4646      	mov	r6, r8
 8004634:	b5c0      	push	{r6, r7, lr}
 8004636:	4682      	mov	sl, r0
 8004638:	000c      	movs	r4, r1
 800463a:	a908      	add	r1, sp, #32
 800463c:	c920      	ldmia	r1!, {r5}
 800463e:	7809      	ldrb	r1, [r1, #0]
 8004640:	4689      	mov	r9, r1
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 8004642:	4f9e      	ldr	r7, [pc, #632]	; (80048bc <WriteToRemote+0x290>)
 8004644:	2624      	movs	r6, #36	; 0x24
 8004646:	5dbf      	ldrb	r7, [r7, r6]
	if(timeout)
 8004648:	2d00      	cmp	r5, #0
 800464a:	d01c      	beq.n	8004686 <WriteToRemote+0x5a>
		BOSMessaging.response = BOS_RESPONSE_MSG;
 800464c:	4e9b      	ldr	r6, [pc, #620]	; (80048bc <WriteToRemote+0x290>)
 800464e:	46b4      	mov	ip, r6
 8004650:	2624      	movs	r6, #36	; 0x24
 8004652:	2020      	movs	r0, #32
 8004654:	4680      	mov	r8, r0
 8004656:	4660      	mov	r0, ip
 8004658:	4641      	mov	r1, r8
 800465a:	5581      	strb	r1, [r0, r6]
	else
		BOSMessaging.response = BOS_RESPONSE_NONE;
	
	/* Check if a force write is needed */
	if(force)
 800465c:	4649      	mov	r1, r9
 800465e:	2900      	cmp	r1, #0
 8004660:	d01a      	beq.n	8004698 <WriteToRemote+0x6c>
		code = CODE_WRITE_REMOTE_FORCE;
 8004662:	2122      	movs	r1, #34	; 0x22
 8004664:	4689      	mov	r9, r1
	else
		code = CODE_WRITE_REMOTE;
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 8004666:	2680      	movs	r6, #128	; 0x80
 8004668:	0536      	lsls	r6, r6, #20
 800466a:	42b2      	cmp	r2, r6
 800466c:	d300      	bcc.n	8004670 <WriteToRemote+0x44>
 800466e:	e08e      	b.n	800478e <WriteToRemote+0x162>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 8004670:	4992      	ldr	r1, [pc, #584]	; (80048bc <WriteToRemote+0x290>)
 8004672:	264c      	movs	r6, #76	; 0x4c
 8004674:	558a      	strb	r2, [r1, r6]
		messageParams[1] =format;						// Send local format
 8004676:	314c      	adds	r1, #76	; 0x4c
 8004678:	704b      	strb	r3, [r1, #1]
		/* Send variable value based on local format */
		switch(format){
 800467a:	2b08      	cmp	r3, #8
 800467c:	d818      	bhi.n	80046b0 <WriteToRemote+0x84>
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4a8f      	ldr	r2, [pc, #572]	; (80048c0 <WriteToRemote+0x294>)
 8004682:	58d3      	ldr	r3, [r2, r3]
 8004684:	469f      	mov	pc, r3
		BOSMessaging.response = BOS_RESPONSE_NONE;
 8004686:	498d      	ldr	r1, [pc, #564]	; (80048bc <WriteToRemote+0x290>)
 8004688:	468c      	mov	ip, r1
 800468a:	2624      	movs	r6, #36	; 0x24
 800468c:	2100      	movs	r1, #0
 800468e:	4688      	mov	r8, r1
 8004690:	4661      	mov	r1, ip
 8004692:	4640      	mov	r0, r8
 8004694:	5588      	strb	r0, [r1, r6]
 8004696:	e7e1      	b.n	800465c <WriteToRemote+0x30>
		code = CODE_WRITE_REMOTE;
 8004698:	2120      	movs	r1, #32
 800469a:	4689      	mov	r9, r1
 800469c:	e7e3      	b.n	8004666 <WriteToRemote+0x3a>
			case FMT_BOOL:
			case FMT_UINT8:
				messageParams[2] =*(__IO uint8_t* )localAddress;
 800469e:	7822      	ldrb	r2, [r4, #0]
 80046a0:	4b86      	ldr	r3, [pc, #536]	; (80048bc <WriteToRemote+0x290>)
 80046a2:	334c      	adds	r3, #76	; 0x4c
 80046a4:	709a      	strb	r2, [r3, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 80046a6:	2203      	movs	r2, #3
 80046a8:	2120      	movs	r1, #32
 80046aa:	4650      	mov	r0, sl
 80046ac:	f003 fef4 	bl	8008498 <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 80046b0:	4a82      	ldr	r2, [pc, #520]	; (80048bc <WriteToRemote+0x290>)
 80046b2:	2324      	movs	r3, #36	; 0x24
 80046b4:	54d7      	strb	r7, [r2, r3]
	
	/* If confirmation is requested, wait for it until timeout */
	if(timeout){
 80046b6:	2d00      	cmp	r5, #0
 80046b8:	d000      	beq.n	80046bc <WriteToRemote+0x90>
 80046ba:	e0ed      	b.n	8004898 <WriteToRemote+0x26c>
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 80046bc:	2000      	movs	r0, #0
}
 80046be:	bce0      	pop	{r5, r6, r7}
 80046c0:	46ba      	mov	sl, r7
 80046c2:	46b1      	mov	r9, r6
 80046c4:	46a8      	mov	r8, r5
 80046c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				messageParams[2] =*(__IO int8_t* )localAddress;
 80046c8:	7822      	ldrb	r2, [r4, #0]
 80046ca:	4b7c      	ldr	r3, [pc, #496]	; (80048bc <WriteToRemote+0x290>)
 80046cc:	334c      	adds	r3, #76	; 0x4c
 80046ce:	709a      	strb	r2, [r3, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 80046d0:	2203      	movs	r2, #3
 80046d2:	2120      	movs	r1, #32
 80046d4:	4650      	mov	r0, sl
 80046d6:	f003 fedf 	bl	8008498 <SendMessageToModule>
				break;
 80046da:	e7e9      	b.n	80046b0 <WriteToRemote+0x84>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 80046dc:	8822      	ldrh	r2, [r4, #0]
 80046de:	4b77      	ldr	r3, [pc, #476]	; (80048bc <WriteToRemote+0x290>)
 80046e0:	334c      	adds	r3, #76	; 0x4c
 80046e2:	709a      	strb	r2, [r3, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 80046e4:	8822      	ldrh	r2, [r4, #0]
 80046e6:	0a12      	lsrs	r2, r2, #8
 80046e8:	70da      	strb	r2, [r3, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 80046ea:	2204      	movs	r2, #4
 80046ec:	2120      	movs	r1, #32
 80046ee:	4650      	mov	r0, sl
 80046f0:	f003 fed2 	bl	8008498 <SendMessageToModule>
				break;
 80046f4:	e7dc      	b.n	80046b0 <WriteToRemote+0x84>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 80046f6:	8823      	ldrh	r3, [r4, #0]
 80046f8:	4a70      	ldr	r2, [pc, #448]	; (80048bc <WriteToRemote+0x290>)
 80046fa:	324c      	adds	r2, #76	; 0x4c
 80046fc:	7093      	strb	r3, [r2, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80046fe:	8823      	ldrh	r3, [r4, #0]
 8004700:	b21b      	sxth	r3, r3
 8004702:	121b      	asrs	r3, r3, #8
 8004704:	70d3      	strb	r3, [r2, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 8004706:	2204      	movs	r2, #4
 8004708:	2120      	movs	r1, #32
 800470a:	4650      	mov	r0, sl
 800470c:	f003 fec4 	bl	8008498 <SendMessageToModule>
				break;
 8004710:	e7ce      	b.n	80046b0 <WriteToRemote+0x84>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	4b69      	ldr	r3, [pc, #420]	; (80048bc <WriteToRemote+0x290>)
 8004716:	334c      	adds	r3, #76	; 0x4c
 8004718:	709a      	strb	r2, [r3, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 800471a:	6822      	ldr	r2, [r4, #0]
 800471c:	0a12      	lsrs	r2, r2, #8
 800471e:	70da      	strb	r2, [r3, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 8004720:	6822      	ldr	r2, [r4, #0]
 8004722:	0c12      	lsrs	r2, r2, #16
 8004724:	711a      	strb	r2, [r3, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004726:	6822      	ldr	r2, [r4, #0]
 8004728:	0e12      	lsrs	r2, r2, #24
 800472a:	715a      	strb	r2, [r3, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 800472c:	2206      	movs	r2, #6
 800472e:	2120      	movs	r1, #32
 8004730:	4650      	mov	r0, sl
 8004732:	f003 feb1 	bl	8008498 <SendMessageToModule>
				break;
 8004736:	e7bb      	b.n	80046b0 <WriteToRemote+0x84>
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 8004738:	6822      	ldr	r2, [r4, #0]
 800473a:	4b60      	ldr	r3, [pc, #384]	; (80048bc <WriteToRemote+0x290>)
 800473c:	334c      	adds	r3, #76	; 0x4c
 800473e:	709a      	strb	r2, [r3, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 8004740:	6822      	ldr	r2, [r4, #0]
 8004742:	1212      	asrs	r2, r2, #8
 8004744:	70da      	strb	r2, [r3, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 8004746:	6822      	ldr	r2, [r4, #0]
 8004748:	1412      	asrs	r2, r2, #16
 800474a:	711a      	strb	r2, [r3, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 800474c:	6822      	ldr	r2, [r4, #0]
 800474e:	0e12      	lsrs	r2, r2, #24
 8004750:	715a      	strb	r2, [r3, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 8004752:	2206      	movs	r2, #6
 8004754:	2120      	movs	r1, #32
 8004756:	4650      	mov	r0, sl
 8004758:	f003 fe9e 	bl	8008498 <SendMessageToModule>
				break;
 800475c:	e7a8      	b.n	80046b0 <WriteToRemote+0x84>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 800475e:	7822      	ldrb	r2, [r4, #0]
 8004760:	4b56      	ldr	r3, [pc, #344]	; (80048bc <WriteToRemote+0x290>)
 8004762:	334c      	adds	r3, #76	; 0x4c
 8004764:	709a      	strb	r2, [r3, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 8004766:	7862      	ldrb	r2, [r4, #1]
 8004768:	70da      	strb	r2, [r3, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 800476a:	78a2      	ldrb	r2, [r4, #2]
 800476c:	711a      	strb	r2, [r3, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 800476e:	78e2      	ldrb	r2, [r4, #3]
 8004770:	715a      	strb	r2, [r3, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 8004772:	7922      	ldrb	r2, [r4, #4]
 8004774:	719a      	strb	r2, [r3, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 8004776:	7962      	ldrb	r2, [r4, #5]
 8004778:	71da      	strb	r2, [r3, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 800477a:	79a2      	ldrb	r2, [r4, #6]
 800477c:	721a      	strb	r2, [r3, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 800477e:	79e2      	ldrb	r2, [r4, #7]
 8004780:	725a      	strb	r2, [r3, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 8004782:	220a      	movs	r2, #10
 8004784:	2120      	movs	r1, #32
 8004786:	4650      	mov	r0, sl
 8004788:	f003 fe86 	bl	8008498 <SendMessageToModule>
				break;
 800478c:	e790      	b.n	80046b0 <WriteToRemote+0x84>
		messageParams[0] =0;
 800478e:	4e4b      	ldr	r6, [pc, #300]	; (80048bc <WriteToRemote+0x290>)
 8004790:	204c      	movs	r0, #76	; 0x4c
 8004792:	4684      	mov	ip, r0
 8004794:	2000      	movs	r0, #0
 8004796:	4680      	mov	r8, r0
 8004798:	4660      	mov	r0, ip
 800479a:	4641      	mov	r1, r8
 800479c:	5431      	strb	r1, [r6, r0]
		messageParams[1] =format;							// Local format
 800479e:	364c      	adds	r6, #76	; 0x4c
 80047a0:	7073      	strb	r3, [r6, #1]
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 80047a2:	0e11      	lsrs	r1, r2, #24
 80047a4:	70b1      	strb	r1, [r6, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 80047a6:	0c11      	lsrs	r1, r2, #16
 80047a8:	70f1      	strb	r1, [r6, #3]
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 80047aa:	0a11      	lsrs	r1, r2, #8
 80047ac:	7131      	strb	r1, [r6, #4]
		messageParams[5] =(uint8_t )remoteAddress;
 80047ae:	7172      	strb	r2, [r6, #5]
		switch(format){
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d900      	bls.n	80047b6 <WriteToRemote+0x18a>
 80047b4:	e77c      	b.n	80046b0 <WriteToRemote+0x84>
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4a42      	ldr	r2, [pc, #264]	; (80048c4 <WriteToRemote+0x298>)
 80047ba:	58d3      	ldr	r3, [r2, r3]
 80047bc:	469f      	mov	pc, r3
				messageParams[6] =*(__IO uint8_t* )localAddress;
 80047be:	7822      	ldrb	r2, [r4, #0]
 80047c0:	4b3e      	ldr	r3, [pc, #248]	; (80048bc <WriteToRemote+0x290>)
 80047c2:	334c      	adds	r3, #76	; 0x4c
 80047c4:	719a      	strb	r2, [r3, #6]
				SendMessageToModule(module,code,7);
 80047c6:	2207      	movs	r2, #7
 80047c8:	4649      	mov	r1, r9
 80047ca:	4650      	mov	r0, sl
 80047cc:	f003 fe64 	bl	8008498 <SendMessageToModule>
				break;
 80047d0:	e76e      	b.n	80046b0 <WriteToRemote+0x84>
				messageParams[6] =*(__IO int8_t* )localAddress;
 80047d2:	7822      	ldrb	r2, [r4, #0]
 80047d4:	4b39      	ldr	r3, [pc, #228]	; (80048bc <WriteToRemote+0x290>)
 80047d6:	334c      	adds	r3, #76	; 0x4c
 80047d8:	719a      	strb	r2, [r3, #6]
				SendMessageToModule(module,code,7);
 80047da:	2207      	movs	r2, #7
 80047dc:	4649      	mov	r1, r9
 80047de:	4650      	mov	r0, sl
 80047e0:	f003 fe5a 	bl	8008498 <SendMessageToModule>
				break;
 80047e4:	e764      	b.n	80046b0 <WriteToRemote+0x84>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 80047e6:	8822      	ldrh	r2, [r4, #0]
 80047e8:	4b34      	ldr	r3, [pc, #208]	; (80048bc <WriteToRemote+0x290>)
 80047ea:	334c      	adds	r3, #76	; 0x4c
 80047ec:	719a      	strb	r2, [r3, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 80047ee:	8822      	ldrh	r2, [r4, #0]
 80047f0:	0a12      	lsrs	r2, r2, #8
 80047f2:	71da      	strb	r2, [r3, #7]
				SendMessageToModule(module,code,8);
 80047f4:	2208      	movs	r2, #8
 80047f6:	4649      	mov	r1, r9
 80047f8:	4650      	mov	r0, sl
 80047fa:	f003 fe4d 	bl	8008498 <SendMessageToModule>
				break;
 80047fe:	e757      	b.n	80046b0 <WriteToRemote+0x84>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 8004800:	8823      	ldrh	r3, [r4, #0]
 8004802:	4a2e      	ldr	r2, [pc, #184]	; (80048bc <WriteToRemote+0x290>)
 8004804:	324c      	adds	r2, #76	; 0x4c
 8004806:	7193      	strb	r3, [r2, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004808:	8823      	ldrh	r3, [r4, #0]
 800480a:	b21b      	sxth	r3, r3
 800480c:	121b      	asrs	r3, r3, #8
 800480e:	71d3      	strb	r3, [r2, #7]
				SendMessageToModule(module,code,8);
 8004810:	2208      	movs	r2, #8
 8004812:	4649      	mov	r1, r9
 8004814:	4650      	mov	r0, sl
 8004816:	f003 fe3f 	bl	8008498 <SendMessageToModule>
				break;
 800481a:	e749      	b.n	80046b0 <WriteToRemote+0x84>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 800481c:	6822      	ldr	r2, [r4, #0]
 800481e:	4b27      	ldr	r3, [pc, #156]	; (80048bc <WriteToRemote+0x290>)
 8004820:	334c      	adds	r3, #76	; 0x4c
 8004822:	719a      	strb	r2, [r3, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 8004824:	6822      	ldr	r2, [r4, #0]
 8004826:	0a12      	lsrs	r2, r2, #8
 8004828:	71da      	strb	r2, [r3, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 800482a:	6822      	ldr	r2, [r4, #0]
 800482c:	0c12      	lsrs	r2, r2, #16
 800482e:	721a      	strb	r2, [r3, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 8004830:	6822      	ldr	r2, [r4, #0]
 8004832:	0e12      	lsrs	r2, r2, #24
 8004834:	725a      	strb	r2, [r3, #9]
				SendMessageToModule(module,code,10);
 8004836:	220a      	movs	r2, #10
 8004838:	4649      	mov	r1, r9
 800483a:	4650      	mov	r0, sl
 800483c:	f003 fe2c 	bl	8008498 <SendMessageToModule>
				break;
 8004840:	e736      	b.n	80046b0 <WriteToRemote+0x84>
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 8004842:	6822      	ldr	r2, [r4, #0]
 8004844:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <WriteToRemote+0x290>)
 8004846:	334c      	adds	r3, #76	; 0x4c
 8004848:	719a      	strb	r2, [r3, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 800484a:	6822      	ldr	r2, [r4, #0]
 800484c:	1212      	asrs	r2, r2, #8
 800484e:	71da      	strb	r2, [r3, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 8004850:	6822      	ldr	r2, [r4, #0]
 8004852:	1412      	asrs	r2, r2, #16
 8004854:	721a      	strb	r2, [r3, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004856:	6822      	ldr	r2, [r4, #0]
 8004858:	0e12      	lsrs	r2, r2, #24
 800485a:	725a      	strb	r2, [r3, #9]
				SendMessageToModule(module,code,10);
 800485c:	220a      	movs	r2, #10
 800485e:	4649      	mov	r1, r9
 8004860:	4650      	mov	r0, sl
 8004862:	f003 fe19 	bl	8008498 <SendMessageToModule>
				break;
 8004866:	e723      	b.n	80046b0 <WriteToRemote+0x84>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 8004868:	7822      	ldrb	r2, [r4, #0]
 800486a:	4b14      	ldr	r3, [pc, #80]	; (80048bc <WriteToRemote+0x290>)
 800486c:	334c      	adds	r3, #76	; 0x4c
 800486e:	719a      	strb	r2, [r3, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004870:	7862      	ldrb	r2, [r4, #1]
 8004872:	71da      	strb	r2, [r3, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004874:	78a2      	ldrb	r2, [r4, #2]
 8004876:	721a      	strb	r2, [r3, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 8004878:	78e2      	ldrb	r2, [r4, #3]
 800487a:	725a      	strb	r2, [r3, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 800487c:	7922      	ldrb	r2, [r4, #4]
 800487e:	729a      	strb	r2, [r3, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 8004880:	7962      	ldrb	r2, [r4, #5]
 8004882:	72da      	strb	r2, [r3, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 8004884:	79a2      	ldrb	r2, [r4, #6]
 8004886:	731a      	strb	r2, [r3, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004888:	79e2      	ldrb	r2, [r4, #7]
 800488a:	735a      	strb	r2, [r3, #13]
				SendMessageToModule(module,code,14);
 800488c:	220e      	movs	r2, #14
 800488e:	4649      	mov	r1, r9
 8004890:	4650      	mov	r0, sl
 8004892:	f003 fe01 	bl	8008498 <SendMessageToModule>
				break;
 8004896:	e70b      	b.n	80046b0 <WriteToRemote+0x84>
		uint32_t t0 =HAL_GetTick();
 8004898:	f00b fb24 	bl	800fee4 <HAL_GetTick>
 800489c:	0004      	movs	r4, r0
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 800489e:	4a0a      	ldr	r2, [pc, #40]	; (80048c8 <WriteToRemote+0x29c>)
 80048a0:	234c      	movs	r3, #76	; 0x4c
 80048a2:	5cd3      	ldrb	r3, [r2, r3]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d004      	beq.n	80048b2 <WriteToRemote+0x286>
 80048a8:	f00b fb1c 	bl	800fee4 <HAL_GetTick>
 80048ac:	1b00      	subs	r0, r0, r4
 80048ae:	42a8      	cmp	r0, r5
 80048b0:	d3f5      	bcc.n	800489e <WriteToRemote+0x272>
		return responseStatus;
 80048b2:	4a05      	ldr	r2, [pc, #20]	; (80048c8 <WriteToRemote+0x29c>)
 80048b4:	234c      	movs	r3, #76	; 0x4c
 80048b6:	5cd0      	ldrb	r0, [r2, r3]
 80048b8:	e701      	b.n	80046be <WriteToRemote+0x92>
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	20000b20 	.word	0x20000b20
 80048c0:	080196b4 	.word	0x080196b4
 80048c4:	080196d8 	.word	0x080196d8
 80048c8:	20000c20 	.word	0x20000c20

080048cc <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 80048cc:	b530      	push	{r4, r5, lr}
 80048ce:	b083      	sub	sp, #12
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 80048d0:	201e      	movs	r0, #30
 80048d2:	f00e fbc9 	bl	8013068 <malloc>
 80048d6:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 80048d8:	221e      	movs	r2, #30
 80048da:	2100      	movs	r1, #0
 80048dc:	f00e fe01 	bl	80134e2 <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 80048e0:	480a      	ldr	r0, [pc, #40]	; (800490c <GetDateString+0x40>)
 80048e2:	0001      	movs	r1, r0
 80048e4:	312c      	adds	r1, #44	; 0x2c
 80048e6:	7d0a      	ldrb	r2, [r1, #20]
 80048e8:	3a01      	subs	r2, #1
 80048ea:	7d8b      	ldrb	r3, [r1, #22]
 80048ec:	7d4d      	ldrb	r5, [r1, #21]
 80048ee:	2144      	movs	r1, #68	; 0x44
 80048f0:	5a40      	ldrh	r0, [r0, r1]
 80048f2:	4907      	ldr	r1, [pc, #28]	; (8004910 <GetDateString+0x44>)
 80048f4:	0092      	lsls	r2, r2, #2
 80048f6:	188a      	adds	r2, r1, r2
 80048f8:	6912      	ldr	r2, [r2, #16]
 80048fa:	312c      	adds	r1, #44	; 0x2c
 80048fc:	9001      	str	r0, [sp, #4]
 80048fe:	9500      	str	r5, [sp, #0]
 8004900:	0020      	movs	r0, r4
 8004902:	f00e ffdf 	bl	80138c4 <sprintf>
	return buffer;
}
 8004906:	0020      	movs	r0, r4
 8004908:	b003      	add	sp, #12
 800490a:	bd30      	pop	{r4, r5, pc}
 800490c:	20000b20 	.word	0x20000b20
 8004910:	080196fc 	.word	0x080196fc

08004914 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004914:	b500      	push	{lr}
 8004916:	b085      	sub	sp, #20
 8004918:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <Bridge+0x24>)
 800491c:	7819      	ldrb	r1, [r3, #0]
 800491e:	2301      	movs	r3, #1
 8004920:	9303      	str	r3, [sp, #12]
 8004922:	3b02      	subs	r3, #2
 8004924:	9302      	str	r3, [sp, #8]
 8004926:	9301      	str	r3, [sp, #4]
 8004928:	3303      	adds	r3, #3
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	000b      	movs	r3, r1
 800492e:	f003 fdd9 	bl	80084e4 <StartScastDMAStream>
}
 8004932:	b005      	add	sp, #20
 8004934:	bd00      	pop	{pc}
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	20000aa0 	.word	0x20000aa0

0800493c <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 800493c:	b530      	push	{r4, r5, lr}
 800493e:	b087      	sub	sp, #28
 8004940:	0005      	movs	r5, r0
 8004942:	000c      	movs	r4, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004944:	2300      	movs	r3, #0
 8004946:	9304      	str	r3, [sp, #16]
 8004948:	9303      	str	r3, [sp, #12]
 800494a:	9302      	str	r3, [sp, #8]
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	2200      	movs	r2, #0
 8004952:	2100      	movs	r1, #0
 8004954:	2000      	movs	r0, #0
 8004956:	f7fe fea7 	bl	80036a8 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 800495a:	1e6a      	subs	r2, r5, #1
 800495c:	00d3      	lsls	r3, r2, #3
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	4a15      	ldr	r2, [pc, #84]	; (80049b8 <Unbridge+0x7c>)
 8004964:	589a      	ldr	r2, [r3, r2]
 8004966:	2a00      	cmp	r2, #0
 8004968:	d007      	beq.n	800497a <Unbridge+0x3e>
 800496a:	1e61      	subs	r1, r4, #1
 800496c:	00cb      	lsls	r3, r1, #3
 800496e:	1a5b      	subs	r3, r3, r1
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	4911      	ldr	r1, [pc, #68]	; (80049b8 <Unbridge+0x7c>)
 8004974:	585b      	ldr	r3, [r3, r1]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10f      	bne.n	800499a <Unbridge+0x5e>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
 800497a:	2a00      	cmp	r2, #0
 800497c:	d115      	bne.n	80049aa <Unbridge+0x6e>
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
 800497e:	1e62      	subs	r2, r4, #1
 8004980:	00d3      	lsls	r3, r2, #3
 8004982:	1a9b      	subs	r3, r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	4a0c      	ldr	r2, [pc, #48]	; (80049b8 <Unbridge+0x7c>)
 8004988:	589b      	ldr	r3, [r3, r2]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d012      	beq.n	80049b4 <Unbridge+0x78>
		SwitchStreamDMAToMsg(port2);
 800498e:	0020      	movs	r0, r4
 8004990:	f006 fe98 	bl	800b6c4 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004994:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 8004996:	b007      	add	sp, #28
 8004998:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 800499a:	0028      	movs	r0, r5
 800499c:	f006 fe92 	bl	800b6c4 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80049a0:	0020      	movs	r0, r4
 80049a2:	f006 fe8f 	bl	800b6c4 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80049a6:	2000      	movs	r0, #0
 80049a8:	e7f5      	b.n	8004996 <Unbridge+0x5a>
		SwitchStreamDMAToMsg(port1);
 80049aa:	0028      	movs	r0, r5
 80049ac:	f006 fe8a 	bl	800b6c4 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80049b0:	2000      	movs	r0, #0
 80049b2:	e7f0      	b.n	8004996 <Unbridge+0x5a>
		return BOS_ERR_WrongValue;
 80049b4:	2068      	movs	r0, #104	; 0x68
 80049b6:	e7ee      	b.n	8004996 <Unbridge+0x5a>
 80049b8:	20002650 	.word	0x20002650

080049bc <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 80049bc:	b530      	push	{r4, r5, lr}
	for(int i =0; string[i]; i++){
 80049be:	2200      	movs	r2, #0
 80049c0:	e001      	b.n	80049c6 <StringToLowerCase+0xa>
		string[i] =tolower(string[i]);
 80049c2:	7023      	strb	r3, [r4, #0]
	for(int i =0; string[i]; i++){
 80049c4:	3201      	adds	r2, #1
 80049c6:	1884      	adds	r4, r0, r2
 80049c8:	5c83      	ldrb	r3, [r0, r2]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <StringToLowerCase+0x22>
		string[i] =tolower(string[i]);
 80049ce:	4904      	ldr	r1, [pc, #16]	; (80049e0 <StringToLowerCase+0x24>)
 80049d0:	5ccd      	ldrb	r5, [r1, r3]
 80049d2:	2103      	movs	r1, #3
 80049d4:	4029      	ands	r1, r5
 80049d6:	2901      	cmp	r1, #1
 80049d8:	d1f3      	bne.n	80049c2 <StringToLowerCase+0x6>
 80049da:	3320      	adds	r3, #32
 80049dc:	e7f1      	b.n	80049c2 <StringToLowerCase+0x6>
	}
}
 80049de:	bd30      	pop	{r4, r5, pc}
 80049e0:	0801c626 	.word	0x0801c626

080049e4 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 80049e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e6:	46ce      	mov	lr, r9
 80049e8:	4647      	mov	r7, r8
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b089      	sub	sp, #36	; 0x24
 80049ee:	0004      	movs	r4, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80049f0:	4bdc      	ldr	r3, [pc, #880]	; (8004d64 <ParseSnippetCondition+0x380>)
 80049f2:	781d      	ldrb	r5, [r3, #0]
 80049f4:	2d05      	cmp	r5, #5
 80049f6:	d100      	bne.n	80049fa <ParseSnippetCondition+0x16>
 80049f8:	e20f      	b.n	8004e1a <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80049fa:	00aa      	lsls	r2, r5, #2
 80049fc:	1951      	adds	r1, r2, r5
 80049fe:	0089      	lsls	r1, r1, #2
 8004a00:	1859      	adds	r1, r3, r1
 8004a02:	2000      	movs	r0, #0
 8004a04:	7108      	strb	r0, [r1, #4]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 8004a06:	7148      	strb	r0, [r1, #5]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004a08:	1d18      	adds	r0, r3, #4
 8004a0a:	1952      	adds	r2, r2, r5
 8004a0c:	0092      	lsls	r2, r2, #2
 8004a0e:	1880      	adds	r0, r0, r2
 8004a10:	3002      	adds	r0, #2
 8004a12:	2204      	movs	r2, #4
 8004a14:	2100      	movs	r1, #0
 8004a16:	f00e fd64 	bl	80134e2 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004a1a:	7823      	ldrb	r3, [r4, #0]
 8004a1c:	2b62      	cmp	r3, #98	; 0x62
 8004a1e:	d102      	bne.n	8004a26 <ParseSnippetCondition+0x42>
 8004a20:	78a3      	ldrb	r3, [r4, #2]
 8004a22:	2b2e      	cmp	r3, #46	; 0x2e
 8004a24:	d053      	beq.n	8004ace <ParseSnippetCondition+0xea>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004a26:	4dcf      	ldr	r5, [pc, #828]	; (8004d64 <ParseSnippetCondition+0x380>)
 8004a28:	3568      	adds	r5, #104	; 0x68
 8004a2a:	0021      	movs	r1, r4
 8004a2c:	0028      	movs	r0, r5
 8004a2e:	f00e ff84 	bl	801393a <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004a32:	4ecd      	ldr	r6, [pc, #820]	; (8004d68 <ParseSnippetCondition+0x384>)
 8004a34:	0031      	movs	r1, r6
 8004a36:	0028      	movs	r0, r5
 8004a38:	f00f fde8 	bl	801460c <strtok>
 8004a3c:	0004      	movs	r4, r0
		secondPart =strtok( NULL," ");
 8004a3e:	0031      	movs	r1, r6
 8004a40:	2000      	movs	r0, #0
 8004a42:	f00f fde3 	bl	801460c <strtok>
 8004a46:	0005      	movs	r5, r0
		thirdPart =strtok( NULL," ");
 8004a48:	0031      	movs	r1, r6
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	f00f fdde 	bl	801460c <strtok>
 8004a50:	0006      	movs	r6, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004a52:	2c00      	cmp	r4, #0
 8004a54:	d100      	bne.n	8004a58 <ParseSnippetCondition+0x74>
 8004a56:	e1e4      	b.n	8004e22 <ParseSnippetCondition+0x43e>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004a58:	0020      	movs	r0, r4
 8004a5a:	f7fe ff39 	bl	80038d0 <IsModuleParameter>
 8004a5e:	1e04      	subs	r4, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004a60:	d002      	beq.n	8004a68 <ParseSnippetCondition+0x84>
 8004a62:	2d00      	cmp	r5, #0
 8004a64:	d100      	bne.n	8004a68 <ParseSnippetCondition+0x84>
 8004a66:	e1ae      	b.n	8004dc6 <ParseSnippetCondition+0x3e2>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004a68:	2d00      	cmp	r5, #0
 8004a6a:	d100      	bne.n	8004a6e <ParseSnippetCondition+0x8a>
 8004a6c:	e1db      	b.n	8004e26 <ParseSnippetCondition+0x442>
 8004a6e:	2e00      	cmp	r6, #0
 8004a70:	d100      	bne.n	8004a74 <ParseSnippetCondition+0x90>
 8004a72:	e1da      	b.n	8004e2a <ParseSnippetCondition+0x446>
				modPar2 =IsModuleParameter(thirdPart);
 8004a74:	0030      	movs	r0, r6
 8004a76:	f7fe ff2b 	bl	80038d0 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	d100      	bne.n	8004a80 <ParseSnippetCondition+0x9c>
 8004a7e:	e1b1      	b.n	8004de4 <ParseSnippetCondition+0x400>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004a80:	49b8      	ldr	r1, [pc, #736]	; (8004d64 <ParseSnippetCondition+0x380>)
 8004a82:	780e      	ldrb	r6, [r1, #0]
 8004a84:	00b3      	lsls	r3, r6, #2
 8004a86:	199a      	adds	r2, r3, r6
 8004a88:	0092      	lsls	r2, r2, #2
 8004a8a:	188a      	adds	r2, r1, r2
 8004a8c:	2704      	movs	r7, #4
 8004a8e:	7117      	strb	r7, [r2, #4]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004a90:	71d4      	strb	r4, [r2, #7]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004a92:	72d0      	strb	r0, [r2, #11]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004a94:	4cb3      	ldr	r4, [pc, #716]	; (8004d64 <ParseSnippetCondition+0x380>)
 8004a96:	7826      	ldrb	r6, [r4, #0]
 8004a98:	0028      	movs	r0, r5
 8004a9a:	f7fe ff33 	bl	8003904 <IsMathOperator>
 8004a9e:	00b3      	lsls	r3, r6, #2
 8004aa0:	199b      	adds	r3, r3, r6
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	18e3      	adds	r3, r4, r3
 8004aa6:	7158      	strb	r0, [r3, #5]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004aa8:	7822      	ldrb	r2, [r4, #0]
 8004aaa:	0093      	lsls	r3, r2, #2
 8004aac:	189b      	adds	r3, r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	18e4      	adds	r4, r4, r3
 8004ab2:	7963      	ldrb	r3, [r4, #5]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d100      	bne.n	8004aba <ParseSnippetCondition+0xd6>
 8004ab8:	e1b9      	b.n	8004e2e <ParseSnippetCondition+0x44a>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004aba:	3201      	adds	r2, #1
 8004abc:	4ba9      	ldr	r3, [pc, #676]	; (8004d64 <ParseSnippetCondition+0x380>)
 8004abe:	701a      	strb	r2, [r3, #0]
				return BOS_OK;
 8004ac0:	2600      	movs	r6, #0
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004ac2:	0030      	movs	r0, r6
 8004ac4:	b009      	add	sp, #36	; 0x24
 8004ac6:	bcc0      	pop	{r6, r7}
 8004ac8:	46b9      	mov	r9, r7
 8004aca:	46b0      	mov	r8, r6
 8004acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004ace:	7867      	ldrb	r7, [r4, #1]
 8004ad0:	3f30      	subs	r7, #48	; 0x30
 8004ad2:	b2ff      	uxtb	r7, r7
 8004ad4:	2f05      	cmp	r7, #5
 8004ad6:	d900      	bls.n	8004ada <ParseSnippetCondition+0xf6>
 8004ad8:	e1a1      	b.n	8004e1e <ParseSnippetCondition+0x43a>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004ada:	00ab      	lsls	r3, r5, #2
 8004adc:	195b      	adds	r3, r3, r5
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	4ba0      	ldr	r3, [pc, #640]	; (8004d64 <ParseSnippetCondition+0x380>)
 8004ae2:	189b      	adds	r3, r3, r2
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	711a      	strb	r2, [r3, #4]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 8004ae8:	2200      	movs	r2, #0
 8004aea:	715a      	strb	r2, [r3, #5]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004aec:	719f      	strb	r7, [r3, #6]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004aee:	1ce6      	adds	r6, r4, #3
 8004af0:	3207      	adds	r2, #7
 8004af2:	499e      	ldr	r1, [pc, #632]	; (8004d6c <ParseSnippetCondition+0x388>)
 8004af4:	0030      	movs	r0, r6
 8004af6:	f00e ff28 	bl	801394a <strncmp>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d124      	bne.n	8004b48 <ParseSnippetCondition+0x164>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004afe:	00ab      	lsls	r3, r5, #2
 8004b00:	195d      	adds	r5, r3, r5
 8004b02:	00ad      	lsls	r5, r5, #2
 8004b04:	4b97      	ldr	r3, [pc, #604]	; (8004d64 <ParseSnippetCondition+0x380>)
 8004b06:	195d      	adds	r5, r3, r5
 8004b08:	2305      	movs	r3, #5
 8004b0a:	71eb      	strb	r3, [r5, #7]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004b0c:	00fa      	lsls	r2, r7, #3
 8004b0e:	19d2      	adds	r2, r2, r7
 8004b10:	4b97      	ldr	r3, [pc, #604]	; (8004d70 <ParseSnippetCondition+0x38c>)
 8004b12:	189b      	adds	r3, r3, r2
 8004b14:	7a1b      	ldrb	r3, [r3, #8]
 8004b16:	2201      	movs	r2, #1
 8004b18:	0016      	movs	r6, r2
 8004b1a:	401e      	ands	r6, r3
 8004b1c:	421a      	tst	r2, r3
 8004b1e:	d005      	beq.n	8004b2c <ParseSnippetCondition+0x148>
				status =BOS_OK;
 8004b20:	2600      	movs	r6, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004b22:	4a90      	ldr	r2, [pc, #576]	; (8004d64 <ParseSnippetCondition+0x380>)
 8004b24:	7813      	ldrb	r3, [r2, #0]
 8004b26:	3301      	adds	r3, #1
 8004b28:	7013      	strb	r3, [r2, #0]
 8004b2a:	e7ca      	b.n	8004ac2 <ParseSnippetCondition+0xde>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	9305      	str	r3, [sp, #20]
 8004b30:	2300      	movs	r3, #0
 8004b32:	9304      	str	r3, [sp, #16]
 8004b34:	9303      	str	r3, [sp, #12]
 8004b36:	9302      	str	r3, [sp, #8]
 8004b38:	9301      	str	r3, [sp, #4]
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2101      	movs	r1, #1
 8004b40:	0038      	movs	r0, r7
 8004b42:	f007 fcb1 	bl	800c4a8 <SetButtonEvents>
 8004b46:	e7ec      	b.n	8004b22 <ParseSnippetCondition+0x13e>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004b48:	220e      	movs	r2, #14
 8004b4a:	498a      	ldr	r1, [pc, #552]	; (8004d74 <ParseSnippetCondition+0x390>)
 8004b4c:	0030      	movs	r0, r6
 8004b4e:	f00e fefc 	bl	801394a <strncmp>
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d120      	bne.n	8004b98 <ParseSnippetCondition+0x1b4>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004b56:	00ab      	lsls	r3, r5, #2
 8004b58:	195d      	adds	r5, r3, r5
 8004b5a:	00ad      	lsls	r5, r5, #2
 8004b5c:	4b81      	ldr	r3, [pc, #516]	; (8004d64 <ParseSnippetCondition+0x380>)
 8004b5e:	195d      	adds	r5, r3, r5
 8004b60:	2306      	movs	r3, #6
 8004b62:	71eb      	strb	r3, [r5, #7]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004b64:	00fa      	lsls	r2, r7, #3
 8004b66:	19d2      	adds	r2, r2, r7
 8004b68:	4b81      	ldr	r3, [pc, #516]	; (8004d70 <ParseSnippetCondition+0x38c>)
 8004b6a:	189b      	adds	r3, r3, r2
 8004b6c:	7a1b      	ldrb	r3, [r3, #8]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	0016      	movs	r6, r2
 8004b72:	401e      	ands	r6, r3
 8004b74:	421a      	tst	r2, r3
 8004b76:	d001      	beq.n	8004b7c <ParseSnippetCondition+0x198>
				status =BOS_OK;
 8004b78:	2600      	movs	r6, #0
 8004b7a:	e7d2      	b.n	8004b22 <ParseSnippetCondition+0x13e>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	9305      	str	r3, [sp, #20]
 8004b80:	2300      	movs	r3, #0
 8004b82:	9304      	str	r3, [sp, #16]
 8004b84:	9303      	str	r3, [sp, #12]
 8004b86:	9302      	str	r3, [sp, #8]
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	3a01      	subs	r2, #1
 8004b8e:	2100      	movs	r1, #0
 8004b90:	0038      	movs	r0, r7
 8004b92:	f007 fc89 	bl	800c4a8 <SetButtonEvents>
 8004b96:	e7c4      	b.n	8004b22 <ParseSnippetCondition+0x13e>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004b98:	220c      	movs	r2, #12
 8004b9a:	4977      	ldr	r1, [pc, #476]	; (8004d78 <ParseSnippetCondition+0x394>)
 8004b9c:	0030      	movs	r0, r6
 8004b9e:	f00e fed4 	bl	801394a <strncmp>
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	d17b      	bne.n	8004c9e <ParseSnippetCondition+0x2ba>
				if(!button[port].pressedX1Sec){
 8004ba6:	00fa      	lsls	r2, r7, #3
 8004ba8:	19d2      	adds	r2, r2, r7
 8004baa:	4b71      	ldr	r3, [pc, #452]	; (8004d70 <ParseSnippetCondition+0x38c>)
 8004bac:	189b      	adds	r3, r3, r2
 8004bae:	789e      	ldrb	r6, [r3, #2]
 8004bb0:	2e00      	cmp	r6, #0
 8004bb2:	d00f      	beq.n	8004bd4 <ParseSnippetCondition+0x1f0>
				else if(!button[port].pressedX2Sec){
 8004bb4:	00fa      	lsls	r2, r7, #3
 8004bb6:	19d2      	adds	r2, r2, r7
 8004bb8:	4b6d      	ldr	r3, [pc, #436]	; (8004d70 <ParseSnippetCondition+0x38c>)
 8004bba:	189b      	adds	r3, r3, r2
 8004bbc:	78de      	ldrb	r6, [r3, #3]
 8004bbe:	2e00      	cmp	r6, #0
 8004bc0:	d029      	beq.n	8004c16 <ParseSnippetCondition+0x232>
				else if(!button[port].pressedX3Sec){
 8004bc2:	00fa      	lsls	r2, r7, #3
 8004bc4:	19d2      	adds	r2, r2, r7
 8004bc6:	4b6a      	ldr	r3, [pc, #424]	; (8004d70 <ParseSnippetCondition+0x38c>)
 8004bc8:	189b      	adds	r3, r3, r2
 8004bca:	791e      	ldrb	r6, [r3, #4]
 8004bcc:	2e00      	cmp	r6, #0
 8004bce:	d044      	beq.n	8004c5a <ParseSnippetCondition+0x276>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004bd0:	260c      	movs	r6, #12
 8004bd2:	e7a6      	b.n	8004b22 <ParseSnippetCondition+0x13e>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004bd4:	4b63      	ldr	r3, [pc, #396]	; (8004d64 <ParseSnippetCondition+0x380>)
 8004bd6:	4698      	mov	r8, r3
 8004bd8:	00ab      	lsls	r3, r5, #2
 8004bda:	195b      	adds	r3, r3, r5
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4443      	add	r3, r8
 8004be0:	2209      	movs	r2, #9
 8004be2:	71da      	strb	r2, [r3, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004be4:	0020      	movs	r0, r4
 8004be6:	300f      	adds	r0, #15
 8004be8:	f00e fa0d 	bl	8013006 <atoi>
 8004bec:	4643      	mov	r3, r8
 8004bee:	7819      	ldrb	r1, [r3, #0]
 8004bf0:	b2c3      	uxtb	r3, r0
 8004bf2:	008a      	lsls	r2, r1, #2
 8004bf4:	1852      	adds	r2, r2, r1
 8004bf6:	0092      	lsls	r2, r2, #2
 8004bf8:	4442      	add	r2, r8
 8004bfa:	7213      	strb	r3, [r2, #8]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	9205      	str	r2, [sp, #20]
 8004c00:	2200      	movs	r2, #0
 8004c02:	9204      	str	r2, [sp, #16]
 8004c04:	9203      	str	r2, [sp, #12]
 8004c06:	9202      	str	r2, [sp, #8]
 8004c08:	9201      	str	r2, [sp, #4]
 8004c0a:	9200      	str	r2, [sp, #0]
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	0038      	movs	r0, r7
 8004c10:	f007 fc4a 	bl	800c4a8 <SetButtonEvents>
					status =BOS_OK;
 8004c14:	e785      	b.n	8004b22 <ParseSnippetCondition+0x13e>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004c16:	4b53      	ldr	r3, [pc, #332]	; (8004d64 <ParseSnippetCondition+0x380>)
 8004c18:	4698      	mov	r8, r3
 8004c1a:	00ab      	lsls	r3, r5, #2
 8004c1c:	195b      	adds	r3, r3, r5
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4443      	add	r3, r8
 8004c22:	220a      	movs	r2, #10
 8004c24:	71da      	strb	r2, [r3, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004c26:	0020      	movs	r0, r4
 8004c28:	300f      	adds	r0, #15
 8004c2a:	f00e f9ec 	bl	8013006 <atoi>
 8004c2e:	4643      	mov	r3, r8
 8004c30:	781a      	ldrb	r2, [r3, #0]
 8004c32:	b2c0      	uxtb	r0, r0
 8004c34:	0093      	lsls	r3, r2, #2
 8004c36:	189b      	adds	r3, r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4443      	add	r3, r8
 8004c3c:	7218      	strb	r0, [r3, #8]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c3e:	2301      	movs	r3, #1
 8004c40:	9305      	str	r3, [sp, #20]
 8004c42:	2300      	movs	r3, #0
 8004c44:	9304      	str	r3, [sp, #16]
 8004c46:	9303      	str	r3, [sp, #12]
 8004c48:	9302      	str	r3, [sp, #8]
 8004c4a:	9301      	str	r3, [sp, #4]
 8004c4c:	9000      	str	r0, [sp, #0]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2100      	movs	r1, #0
 8004c52:	0038      	movs	r0, r7
 8004c54:	f007 fc28 	bl	800c4a8 <SetButtonEvents>
					status =BOS_OK;
 8004c58:	e763      	b.n	8004b22 <ParseSnippetCondition+0x13e>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004c5a:	4b42      	ldr	r3, [pc, #264]	; (8004d64 <ParseSnippetCondition+0x380>)
 8004c5c:	4698      	mov	r8, r3
 8004c5e:	00ab      	lsls	r3, r5, #2
 8004c60:	195b      	adds	r3, r3, r5
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4443      	add	r3, r8
 8004c66:	220b      	movs	r2, #11
 8004c68:	71da      	strb	r2, [r3, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004c6a:	0020      	movs	r0, r4
 8004c6c:	300f      	adds	r0, #15
 8004c6e:	f00e f9ca 	bl	8013006 <atoi>
 8004c72:	4643      	mov	r3, r8
 8004c74:	781a      	ldrb	r2, [r3, #0]
 8004c76:	b2c0      	uxtb	r0, r0
 8004c78:	0093      	lsls	r3, r2, #2
 8004c7a:	189b      	adds	r3, r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4443      	add	r3, r8
 8004c80:	7218      	strb	r0, [r3, #8]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004c82:	2301      	movs	r3, #1
 8004c84:	9305      	str	r3, [sp, #20]
 8004c86:	2300      	movs	r3, #0
 8004c88:	9304      	str	r3, [sp, #16]
 8004c8a:	9303      	str	r3, [sp, #12]
 8004c8c:	9302      	str	r3, [sp, #8]
 8004c8e:	9001      	str	r0, [sp, #4]
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	2200      	movs	r2, #0
 8004c94:	2100      	movs	r1, #0
 8004c96:	0038      	movs	r0, r7
 8004c98:	f007 fc06 	bl	800c4a8 <SetButtonEvents>
					status =BOS_OK;
 8004c9c:	e741      	b.n	8004b22 <ParseSnippetCondition+0x13e>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004c9e:	220d      	movs	r2, #13
 8004ca0:	4936      	ldr	r1, [pc, #216]	; (8004d7c <ParseSnippetCondition+0x398>)
 8004ca2:	0030      	movs	r0, r6
 8004ca4:	f00e fe51 	bl	801394a <strncmp>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d000      	beq.n	8004cae <ParseSnippetCondition+0x2ca>
 8004cac:	e089      	b.n	8004dc2 <ParseSnippetCondition+0x3de>
				if(!button[port].releasedY1Sec){
 8004cae:	00fa      	lsls	r2, r7, #3
 8004cb0:	19d2      	adds	r2, r2, r7
 8004cb2:	4b2f      	ldr	r3, [pc, #188]	; (8004d70 <ParseSnippetCondition+0x38c>)
 8004cb4:	189b      	adds	r3, r3, r2
 8004cb6:	795e      	ldrb	r6, [r3, #5]
 8004cb8:	2e00      	cmp	r6, #0
 8004cba:	d00f      	beq.n	8004cdc <ParseSnippetCondition+0x2f8>
				else if(!button[port].releasedY2Sec){
 8004cbc:	00fa      	lsls	r2, r7, #3
 8004cbe:	19d2      	adds	r2, r2, r7
 8004cc0:	4b2b      	ldr	r3, [pc, #172]	; (8004d70 <ParseSnippetCondition+0x38c>)
 8004cc2:	189b      	adds	r3, r3, r2
 8004cc4:	799e      	ldrb	r6, [r3, #6]
 8004cc6:	2e00      	cmp	r6, #0
 8004cc8:	d02a      	beq.n	8004d20 <ParseSnippetCondition+0x33c>
				else if(!button[port].releasedY3Sec){
 8004cca:	00fa      	lsls	r2, r7, #3
 8004ccc:	19d2      	adds	r2, r2, r7
 8004cce:	4b28      	ldr	r3, [pc, #160]	; (8004d70 <ParseSnippetCondition+0x38c>)
 8004cd0:	189b      	adds	r3, r3, r2
 8004cd2:	79de      	ldrb	r6, [r3, #7]
 8004cd4:	2e00      	cmp	r6, #0
 8004cd6:	d053      	beq.n	8004d80 <ParseSnippetCondition+0x39c>
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004cd8:	260d      	movs	r6, #13
 8004cda:	e722      	b.n	8004b22 <ParseSnippetCondition+0x13e>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004cdc:	4b21      	ldr	r3, [pc, #132]	; (8004d64 <ParseSnippetCondition+0x380>)
 8004cde:	4698      	mov	r8, r3
 8004ce0:	00ab      	lsls	r3, r5, #2
 8004ce2:	195b      	adds	r3, r3, r5
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4443      	add	r3, r8
 8004ce8:	220c      	movs	r2, #12
 8004cea:	71da      	strb	r2, [r3, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004cec:	0020      	movs	r0, r4
 8004cee:	3010      	adds	r0, #16
 8004cf0:	f00e f989 	bl	8013006 <atoi>
 8004cf4:	4643      	mov	r3, r8
 8004cf6:	781a      	ldrb	r2, [r3, #0]
 8004cf8:	b2c0      	uxtb	r0, r0
 8004cfa:	0093      	lsls	r3, r2, #2
 8004cfc:	189b      	adds	r3, r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4443      	add	r3, r8
 8004d02:	7218      	strb	r0, [r3, #8]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004d04:	2301      	movs	r3, #1
 8004d06:	9305      	str	r3, [sp, #20]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	9304      	str	r3, [sp, #16]
 8004d0c:	9303      	str	r3, [sp, #12]
 8004d0e:	9002      	str	r0, [sp, #8]
 8004d10:	9301      	str	r3, [sp, #4]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	2200      	movs	r2, #0
 8004d16:	2100      	movs	r1, #0
 8004d18:	0038      	movs	r0, r7
 8004d1a:	f007 fbc5 	bl	800c4a8 <SetButtonEvents>
					status =BOS_OK;
 8004d1e:	e700      	b.n	8004b22 <ParseSnippetCondition+0x13e>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004d20:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <ParseSnippetCondition+0x380>)
 8004d22:	4698      	mov	r8, r3
 8004d24:	2314      	movs	r3, #20
 8004d26:	4699      	mov	r9, r3
 8004d28:	435d      	muls	r5, r3
 8004d2a:	4445      	add	r5, r8
 8004d2c:	3b07      	subs	r3, #7
 8004d2e:	71eb      	strb	r3, [r5, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d30:	0020      	movs	r0, r4
 8004d32:	3010      	adds	r0, #16
 8004d34:	f00e f967 	bl	8013006 <atoi>
 8004d38:	4643      	mov	r3, r8
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	b2c0      	uxtb	r0, r0
 8004d3e:	464a      	mov	r2, r9
 8004d40:	4353      	muls	r3, r2
 8004d42:	4443      	add	r3, r8
 8004d44:	7218      	strb	r0, [r3, #8]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004d46:	2301      	movs	r3, #1
 8004d48:	9305      	str	r3, [sp, #20]
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	9104      	str	r1, [sp, #16]
 8004d4e:	9003      	str	r0, [sp, #12]
 8004d50:	9102      	str	r1, [sp, #8]
 8004d52:	9101      	str	r1, [sp, #4]
 8004d54:	9100      	str	r1, [sp, #0]
 8004d56:	000b      	movs	r3, r1
 8004d58:	000a      	movs	r2, r1
 8004d5a:	0038      	movs	r0, r7
 8004d5c:	f007 fba4 	bl	800c4a8 <SetButtonEvents>
					status =BOS_OK;
 8004d60:	e6df      	b.n	8004b22 <ParseSnippetCondition+0x13e>
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	200017a4 	.word	0x200017a4
 8004d68:	08019f3c 	.word	0x08019f3c
 8004d6c:	0801ad34 	.word	0x0801ad34
 8004d70:	2000299c 	.word	0x2000299c
 8004d74:	0801a504 	.word	0x0801a504
 8004d78:	0801a514 	.word	0x0801a514
 8004d7c:	0801a524 	.word	0x0801a524
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004d80:	4b2c      	ldr	r3, [pc, #176]	; (8004e34 <ParseSnippetCondition+0x450>)
 8004d82:	4698      	mov	r8, r3
 8004d84:	2314      	movs	r3, #20
 8004d86:	4699      	mov	r9, r3
 8004d88:	435d      	muls	r5, r3
 8004d8a:	4445      	add	r5, r8
 8004d8c:	3b06      	subs	r3, #6
 8004d8e:	71eb      	strb	r3, [r5, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d90:	0020      	movs	r0, r4
 8004d92:	3010      	adds	r0, #16
 8004d94:	f00e f937 	bl	8013006 <atoi>
 8004d98:	4643      	mov	r3, r8
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	b2c0      	uxtb	r0, r0
 8004d9e:	464a      	mov	r2, r9
 8004da0:	4353      	muls	r3, r2
 8004da2:	4443      	add	r3, r8
 8004da4:	7218      	strb	r0, [r3, #8]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004da6:	2301      	movs	r3, #1
 8004da8:	9305      	str	r3, [sp, #20]
 8004daa:	9004      	str	r0, [sp, #16]
 8004dac:	2100      	movs	r1, #0
 8004dae:	9103      	str	r1, [sp, #12]
 8004db0:	9102      	str	r1, [sp, #8]
 8004db2:	9101      	str	r1, [sp, #4]
 8004db4:	9100      	str	r1, [sp, #0]
 8004db6:	000b      	movs	r3, r1
 8004db8:	000a      	movs	r2, r1
 8004dba:	0038      	movs	r0, r7
 8004dbc:	f007 fb74 	bl	800c4a8 <SetButtonEvents>
					status =BOS_OK;
 8004dc0:	e6af      	b.n	8004b22 <ParseSnippetCondition+0x13e>
	BOS_Status status =BOS_OK;
 8004dc2:	2600      	movs	r6, #0
 8004dc4:	e6ad      	b.n	8004b22 <ParseSnippetCondition+0x13e>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004dc6:	2e00      	cmp	r6, #0
 8004dc8:	d000      	beq.n	8004dcc <ParseSnippetCondition+0x3e8>
 8004dca:	e64d      	b.n	8004a68 <ParseSnippetCondition+0x84>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004dcc:	4819      	ldr	r0, [pc, #100]	; (8004e34 <ParseSnippetCondition+0x450>)
 8004dce:	7802      	ldrb	r2, [r0, #0]
 8004dd0:	0093      	lsls	r3, r2, #2
 8004dd2:	1899      	adds	r1, r3, r2
 8004dd4:	0089      	lsls	r1, r1, #2
 8004dd6:	1841      	adds	r1, r0, r1
 8004dd8:	3502      	adds	r5, #2
 8004dda:	710d      	strb	r5, [r1, #4]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004ddc:	71cc      	strb	r4, [r1, #7]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004dde:	3201      	adds	r2, #1
 8004de0:	7002      	strb	r2, [r0, #0]
				return BOS_OK;
 8004de2:	e66e      	b.n	8004ac2 <ParseSnippetCondition+0xde>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004de4:	4f13      	ldr	r7, [pc, #76]	; (8004e34 <ParseSnippetCondition+0x450>)
 8004de6:	7839      	ldrb	r1, [r7, #0]
 8004de8:	008b      	lsls	r3, r1, #2
 8004dea:	185a      	adds	r2, r3, r1
 8004dec:	0092      	lsls	r2, r2, #2
 8004dee:	18ba      	adds	r2, r7, r2
 8004df0:	2003      	movs	r0, #3
 8004df2:	7110      	strb	r0, [r2, #4]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004df4:	71d4      	strb	r4, [r2, #7]
					float constant =atof(thirdPart);
 8004df6:	0030      	movs	r0, r6
 8004df8:	f00e f900 	bl	8012ffc <atof>
 8004dfc:	f7fd ff56 	bl	8002cac <__aeabi_d2f>
 8004e00:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004e02:	1d38      	adds	r0, r7, #4
 8004e04:	783a      	ldrb	r2, [r7, #0]
 8004e06:	0093      	lsls	r3, r2, #2
 8004e08:	189b      	adds	r3, r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	18c0      	adds	r0, r0, r3
 8004e0e:	3006      	adds	r0, #6
 8004e10:	2204      	movs	r2, #4
 8004e12:	a907      	add	r1, sp, #28
 8004e14:	f00e fb5c 	bl	80134d0 <memcpy>
 8004e18:	e63c      	b.n	8004a94 <ParseSnippetCondition+0xb0>
		return BOS_ERR_SNIP_MEM_FULL;
 8004e1a:	260e      	movs	r6, #14
 8004e1c:	e651      	b.n	8004ac2 <ParseSnippetCondition+0xde>
	BOS_Status status =BOS_OK;
 8004e1e:	2600      	movs	r6, #0
 8004e20:	e64f      	b.n	8004ac2 <ParseSnippetCondition+0xde>
			return BOS_ERR_WrongParam;
 8004e22:	2667      	movs	r6, #103	; 0x67
 8004e24:	e64d      	b.n	8004ac2 <ParseSnippetCondition+0xde>
				return BOS_ERR_WrongParam;
 8004e26:	2667      	movs	r6, #103	; 0x67
 8004e28:	e64b      	b.n	8004ac2 <ParseSnippetCondition+0xde>
 8004e2a:	2667      	movs	r6, #103	; 0x67
 8004e2c:	e649      	b.n	8004ac2 <ParseSnippetCondition+0xde>
					return BOS_ERR_WrongParam;
 8004e2e:	2667      	movs	r6, #103	; 0x67
 8004e30:	e647      	b.n	8004ac2 <ParseSnippetCondition+0xde>
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	200017a4 	.word	0x200017a4

08004e38 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	000c      	movs	r4, r1
	switch(code){
 8004e3c:	2802      	cmp	r0, #2
 8004e3e:	d016      	beq.n	8004e6e <AddSnippet+0x36>
 8004e40:	2803      	cmp	r0, #3
 8004e42:	d003      	beq.n	8004e4c <AddSnippet+0x14>
 8004e44:	2801      	cmp	r0, #1
 8004e46:	d00e      	beq.n	8004e66 <AddSnippet+0x2e>
 8004e48:	2000      	movs	r0, #0
}
 8004e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			snippets[numOfRecordedSnippets - 1].state = true;
 8004e4c:	4a34      	ldr	r2, [pc, #208]	; (8004f20 <AddSnippet+0xe8>)
 8004e4e:	7811      	ldrb	r1, [r2, #0]
 8004e50:	3901      	subs	r1, #1
 8004e52:	008b      	lsls	r3, r1, #2
 8004e54:	185b      	adds	r3, r3, r1
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	18d3      	adds	r3, r2, r3
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	751a      	strb	r2, [r3, #20]
			SaveToRO();
 8004e5e:	f005 fc2b 	bl	800a6b8 <SaveToRO>
	return BOS_OK;
 8004e62:	2000      	movs	r0, #0
			break;
 8004e64:	e7f1      	b.n	8004e4a <AddSnippet+0x12>
			return ParseSnippetCondition(string);
 8004e66:	0008      	movs	r0, r1
 8004e68:	f7ff fdbc 	bl	80049e4 <ParseSnippetCondition>
 8004e6c:	e7ed      	b.n	8004e4a <AddSnippet+0x12>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004e6e:	4a2c      	ldr	r2, [pc, #176]	; (8004f20 <AddSnippet+0xe8>)
 8004e70:	7815      	ldrb	r5, [r2, #0]
 8004e72:	3d01      	subs	r5, #1
 8004e74:	00ab      	lsls	r3, r5, #2
 8004e76:	195b      	adds	r3, r3, r5
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	18d3      	adds	r3, r2, r3
 8004e7c:	691e      	ldr	r6, [r3, #16]
 8004e7e:	2e00      	cmp	r6, #0
 8004e80:	d032      	beq.n	8004ee8 <AddSnippet+0xb0>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004e82:	0030      	movs	r0, r6
 8004e84:	f7fb f948 	bl	8000118 <strlen>
 8004e88:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004e8a:	0020      	movs	r0, r4
 8004e8c:	f7fb f944 	bl	8000118 <strlen>
 8004e90:	1839      	adds	r1, r7, r0
 8004e92:	3102      	adds	r1, #2
 8004e94:	0030      	movs	r0, r6
 8004e96:	f00e fb57 	bl	8013548 <realloc>
 8004e9a:	4e21      	ldr	r6, [pc, #132]	; (8004f20 <AddSnippet+0xe8>)
 8004e9c:	00ab      	lsls	r3, r5, #2
 8004e9e:	195d      	adds	r5, r3, r5
 8004ea0:	00ad      	lsls	r5, r5, #2
 8004ea2:	1975      	adds	r5, r6, r5
 8004ea4:	6128      	str	r0, [r5, #16]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004ea6:	7832      	ldrb	r2, [r6, #0]
 8004ea8:	3a01      	subs	r2, #1
 8004eaa:	0093      	lsls	r3, r2, #2
 8004eac:	189b      	adds	r3, r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	18f3      	adds	r3, r6, r3
 8004eb2:	6918      	ldr	r0, [r3, #16]
 8004eb4:	1c7b      	adds	r3, r7, #1
 8004eb6:	18c0      	adds	r0, r0, r3
 8004eb8:	0021      	movs	r1, r4
 8004eba:	f00e fd3e 	bl	801393a <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004ebe:	7832      	ldrb	r2, [r6, #0]
 8004ec0:	3a01      	subs	r2, #1
 8004ec2:	0093      	lsls	r3, r2, #2
 8004ec4:	189b      	adds	r3, r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	18f6      	adds	r6, r6, r3
 8004eca:	6933      	ldr	r3, [r6, #16]
 8004ecc:	2213      	movs	r2, #19
 8004ece:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004ed0:	4913      	ldr	r1, [pc, #76]	; (8004f20 <AddSnippet+0xe8>)
 8004ed2:	780a      	ldrb	r2, [r1, #0]
 8004ed4:	3a01      	subs	r2, #1
 8004ed6:	0093      	lsls	r3, r2, #2
 8004ed8:	189b      	adds	r3, r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	18cb      	adds	r3, r1, r3
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d011      	beq.n	8004f08 <AddSnippet+0xd0>
	return BOS_OK;
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	e7b0      	b.n	8004e4a <AddSnippet+0x12>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004ee8:	0008      	movs	r0, r1
 8004eea:	f7fb f915 	bl	8000118 <strlen>
 8004eee:	3001      	adds	r0, #1
 8004ef0:	f00e f8ba 	bl	8013068 <malloc>
 8004ef4:	00ab      	lsls	r3, r5, #2
 8004ef6:	195d      	adds	r5, r3, r5
 8004ef8:	00ad      	lsls	r5, r5, #2
 8004efa:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <AddSnippet+0xe8>)
 8004efc:	195d      	adds	r5, r3, r5
 8004efe:	6128      	str	r0, [r5, #16]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004f00:	0021      	movs	r1, r4
 8004f02:	f00e fd1a 	bl	801393a <strcpy>
 8004f06:	e7e3      	b.n	8004ed0 <AddSnippet+0x98>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004f08:	0090      	lsls	r0, r2, #2
 8004f0a:	1882      	adds	r2, r0, r2
 8004f0c:	0092      	lsls	r2, r2, #2
 8004f0e:	1d08      	adds	r0, r1, #4
 8004f10:	1880      	adds	r0, r0, r2
 8004f12:	2214      	movs	r2, #20
 8004f14:	2100      	movs	r1, #0
 8004f16:	f00e fae4 	bl	80134e2 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004f1a:	200e      	movs	r0, #14
 8004f1c:	e795      	b.n	8004e4a <AddSnippet+0x12>
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	200017a4 	.word	0x200017a4

08004f24 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f26:	46de      	mov	lr, fp
 8004f28:	4657      	mov	r7, sl
 8004f2a:	464e      	mov	r6, r9
 8004f2c:	4645      	mov	r5, r8
 8004f2e:	b5e0      	push	{r5, r6, r7, lr}
 8004f30:	b089      	sub	sp, #36	; 0x24
 8004f32:	4682      	mov	sl, r0
 8004f34:	4689      	mov	r9, r1
 8004f36:	0015      	movs	r5, r2
 8004f38:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9305      	str	r3, [sp, #20]
 8004f3e:	2205      	movs	r2, #5
 8004f40:	2100      	movs	r1, #0
 8004f42:	a806      	add	r0, sp, #24
 8004f44:	f00e facd 	bl	80134e2 <memset>
 8004f48:	e12e      	b.n	80051a8 <CLI_CommandParser+0x284>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004f4a:	1ce9      	adds	r1, r5, #3
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	f7ff ff73 	bl	8004e38 <AddSnippet>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d106      	bne.n	8004f64 <CLI_CommandParser+0x40>
				recordSnippet = SNIPPET_COMMANDS;
 8004f56:	4bd3      	ldr	r3, [pc, #844]	; (80052a4 <CLI_CommandParser+0x380>)
 8004f58:	2202      	movs	r2, #2
 8004f5a:	769a      	strb	r2, [r3, #26]
				pcOutputString[0] ='\r';
 8004f5c:	230d      	movs	r3, #13
 8004f5e:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 8004f60:	46b8      	mov	r8, r7
 8004f62:	e10f      	b.n	8005184 <CLI_CommandParser+0x260>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004f64:	2252      	movs	r2, #82	; 0x52
 8004f66:	49d0      	ldr	r1, [pc, #832]	; (80052a8 <CLI_CommandParser+0x384>)
 8004f68:	0020      	movs	r0, r4
 8004f6a:	f00e fab1 	bl	80134d0 <memcpy>
				recordSnippet =0;
 8004f6e:	4bcd      	ldr	r3, [pc, #820]	; (80052a4 <CLI_CommandParser+0x380>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	769a      	strb	r2, [r3, #26]
			xReturned = pdFALSE;
 8004f74:	46b8      	mov	r8, r7
 8004f76:	e105      	b.n	8005184 <CLI_CommandParser+0x260>
			recordSnippet =0;
 8004f78:	4bca      	ldr	r3, [pc, #808]	; (80052a4 <CLI_CommandParser+0x380>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	769a      	strb	r2, [r3, #26]
			AddSnippet(SNIPPET_ACTIVATE,"");
 8004f7e:	49cb      	ldr	r1, [pc, #812]	; (80052ac <CLI_CommandParser+0x388>)
 8004f80:	2003      	movs	r0, #3
 8004f82:	f7ff ff59 	bl	8004e38 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004f86:	2241      	movs	r2, #65	; 0x41
 8004f88:	49c9      	ldr	r1, [pc, #804]	; (80052b0 <CLI_CommandParser+0x38c>)
 8004f8a:	0020      	movs	r0, r4
 8004f8c:	f00e faa0 	bl	80134d0 <memcpy>
			xReturned = pdFALSE;
 8004f90:	46b8      	mov	r8, r7
 8004f92:	e0f7      	b.n	8005184 <CLI_CommandParser+0x260>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004f94:	0029      	movs	r1, r5
 8004f96:	2002      	movs	r0, #2
 8004f98:	f7ff ff4e 	bl	8004e38 <AddSnippet>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d104      	bne.n	8004faa <CLI_CommandParser+0x86>
				pcOutputString[0] ='\r';
 8004fa0:	230d      	movs	r3, #13
 8004fa2:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4698      	mov	r8, r3
 8004fa8:	e0ec      	b.n	8005184 <CLI_CommandParser+0x260>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004faa:	2252      	movs	r2, #82	; 0x52
 8004fac:	49be      	ldr	r1, [pc, #760]	; (80052a8 <CLI_CommandParser+0x384>)
 8004fae:	0020      	movs	r0, r4
 8004fb0:	f00e fa8e 	bl	80134d0 <memcpy>
			xReturned = pdFALSE;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	4698      	mov	r8, r3
 8004fb8:	e0e4      	b.n	8005184 <CLI_CommandParser+0x260>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004fba:	1c70      	adds	r0, r6, #1
 8004fbc:	2299      	movs	r2, #153	; 0x99
 8004fbe:	0092      	lsls	r2, r2, #2
 8004fc0:	0021      	movs	r1, r4
 8004fc2:	f009 f949 	bl	800e258 <FreeRTOS_CLIProcessCommand>
 8004fc6:	4680      	mov	r8, r0
 8004fc8:	e0dc      	b.n	8005184 <CLI_CommandParser+0x260>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004fca:	2227      	movs	r2, #39	; 0x27
 8004fcc:	49b9      	ldr	r1, [pc, #740]	; (80052b4 <CLI_CommandParser+0x390>)
 8004fce:	0020      	movs	r0, r4
 8004fd0:	f00e fa7e 	bl	80134d0 <memcpy>
					xReturned = pdFALSE;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	4698      	mov	r8, r3
 8004fd8:	e0d4      	b.n	8005184 <CLI_CommandParser+0x260>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004fda:	2225      	movs	r2, #37	; 0x25
 8004fdc:	49b6      	ldr	r1, [pc, #728]	; (80052b8 <CLI_CommandParser+0x394>)
 8004fde:	0020      	movs	r0, r4
 8004fe0:	f00e fa76 	bl	80134d0 <memcpy>
					xReturned = pdFALSE;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4698      	mov	r8, r3
 8004fe8:	e0cc      	b.n	8005184 <CLI_CommandParser+0x260>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004fea:	221a      	movs	r2, #26
 8004fec:	2100      	movs	r1, #0
 8004fee:	48b3      	ldr	r0, [pc, #716]	; (80052bc <CLI_CommandParser+0x398>)
 8004ff0:	f00e fa77 	bl	80134e2 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004ff4:	3601      	adds	r6, #1
 8004ff6:	0028      	movs	r0, r5
 8004ff8:	f7fb f88e 	bl	8000118 <strlen>
 8004ffc:	0007      	movs	r7, r0
 8004ffe:	a805      	add	r0, sp, #20
 8005000:	f7fb f88a 	bl	8000118 <strlen>
 8005004:	1a3a      	subs	r2, r7, r0
 8005006:	3a01      	subs	r2, #1
 8005008:	0031      	movs	r1, r6
 800500a:	48ad      	ldr	r0, [pc, #692]	; (80052c0 <CLI_CommandParser+0x39c>)
 800500c:	f00e fcaf 	bl	801396e <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005010:	0028      	movs	r0, r5
 8005012:	f7fb f881 	bl	8000118 <strlen>
 8005016:	0007      	movs	r7, r0
 8005018:	a805      	add	r0, sp, #20
 800501a:	f7fb f87d 	bl	8000118 <strlen>
 800501e:	1a3b      	subs	r3, r7, r0
 8005020:	b29b      	uxth	r3, r3
 8005022:	2217      	movs	r2, #23
 8005024:	21ff      	movs	r1, #255	; 0xff
 8005026:	4658      	mov	r0, fp
 8005028:	f003 fa0e 	bl	8008448 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800502c:	2299      	movs	r2, #153	; 0x99
 800502e:	0092      	lsls	r2, r2, #2
 8005030:	0021      	movs	r1, r4
 8005032:	0030      	movs	r0, r6
 8005034:	f009 f910 	bl	800e258 <FreeRTOS_CLIProcessCommand>
 8005038:	4680      	mov	r8, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 800503a:	0020      	movs	r0, r4
 800503c:	f7fb f86c 	bl	8000118 <strlen>
 8005040:	1820      	adds	r0, r4, r0
 8005042:	221d      	movs	r2, #29
 8005044:	499f      	ldr	r1, [pc, #636]	; (80052c4 <CLI_CommandParser+0x3a0>)
 8005046:	f00e fa43 	bl	80134d0 <memcpy>
 800504a:	e09b      	b.n	8005184 <CLI_CommandParser+0x260>
					group =id >> 8;
 800504c:	9b02      	ldr	r3, [sp, #8]
 800504e:	121f      	asrs	r7, r3, #8
 8005050:	b2fb      	uxtb	r3, r7
 8005052:	4f94      	ldr	r7, [pc, #592]	; (80052a4 <CLI_CommandParser+0x380>)
 8005054:	9303      	str	r3, [sp, #12]
 8005056:	76fb      	strb	r3, [r7, #27]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005058:	221a      	movs	r2, #26
 800505a:	2100      	movs	r1, #0
 800505c:	4897      	ldr	r0, [pc, #604]	; (80052bc <CLI_CommandParser+0x398>)
 800505e:	f00e fa40 	bl	80134e2 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005062:	1c72      	adds	r2, r6, #1
 8005064:	9202      	str	r2, [sp, #8]
 8005066:	0028      	movs	r0, r5
 8005068:	f7fb f856 	bl	8000118 <strlen>
 800506c:	0006      	movs	r6, r0
 800506e:	a805      	add	r0, sp, #20
 8005070:	f7fb f852 	bl	8000118 <strlen>
 8005074:	1a32      	subs	r2, r6, r0
 8005076:	3a01      	subs	r2, #1
 8005078:	9902      	ldr	r1, [sp, #8]
 800507a:	4891      	ldr	r0, [pc, #580]	; (80052c0 <CLI_CommandParser+0x39c>)
 800507c:	f00e fc77 	bl	801396e <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005080:	0028      	movs	r0, r5
 8005082:	f7fb f849 	bl	8000118 <strlen>
 8005086:	0006      	movs	r6, r0
 8005088:	a805      	add	r0, sp, #20
 800508a:	f7fb f845 	bl	8000118 <strlen>
 800508e:	1a33      	subs	r3, r6, r0
 8005090:	b29b      	uxth	r3, r3
 8005092:	2217      	movs	r2, #23
 8005094:	9903      	ldr	r1, [sp, #12]
 8005096:	4658      	mov	r0, fp
 8005098:	f003 f9d6 	bl	8008448 <BroadcastMessage>
					if(InGroup(myID,group))
 800509c:	4b8a      	ldr	r3, [pc, #552]	; (80052c8 <CLI_CommandParser+0x3a4>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	4a89      	ldr	r2, [pc, #548]	; (80052cc <CLI_CommandParser+0x3a8>)
 80050a6:	5a9b      	ldrh	r3, [r3, r2]
 80050a8:	7efa      	ldrb	r2, [r7, #27]
 80050aa:	4113      	asrs	r3, r2
 80050ac:	07db      	lsls	r3, r3, #31
 80050ae:	d406      	bmi.n	80050be <CLI_CommandParser+0x19a>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 80050b0:	ab05      	add	r3, sp, #20
 80050b2:	0022      	movs	r2, r4
 80050b4:	4986      	ldr	r1, [pc, #536]	; (80052d0 <CLI_CommandParser+0x3ac>)
 80050b6:	0020      	movs	r0, r4
 80050b8:	f00e fc04 	bl	80138c4 <sprintf>
 80050bc:	e062      	b.n	8005184 <CLI_CommandParser+0x260>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80050be:	2299      	movs	r2, #153	; 0x99
 80050c0:	0092      	lsls	r2, r2, #2
 80050c2:	0021      	movs	r1, r4
 80050c4:	9802      	ldr	r0, [sp, #8]
 80050c6:	f009 f8c7 	bl	800e258 <FreeRTOS_CLIProcessCommand>
 80050ca:	4680      	mov	r8, r0
 80050cc:	e7f0      	b.n	80050b0 <CLI_CommandParser+0x18c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 80050ce:	0028      	movs	r0, r5
 80050d0:	f7fb f822 	bl	8000118 <strlen>
 80050d4:	4680      	mov	r8, r0
 80050d6:	a805      	add	r0, sp, #20
 80050d8:	f7fb f81e 	bl	8000118 <strlen>
 80050dc:	4643      	mov	r3, r8
 80050de:	1a1a      	subs	r2, r3, r0
 80050e0:	3a01      	subs	r2, #1
 80050e2:	0031      	movs	r1, r6
 80050e4:	4876      	ldr	r0, [pc, #472]	; (80052c0 <CLI_CommandParser+0x39c>)
 80050e6:	f00e fc42 	bl	801396e <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 80050ea:	0028      	movs	r0, r5
 80050ec:	f7fb f814 	bl	8000118 <strlen>
 80050f0:	0006      	movs	r6, r0
 80050f2:	a805      	add	r0, sp, #20
 80050f4:	f7fb f810 	bl	8000118 <strlen>
 80050f8:	1a32      	subs	r2, r6, r0
 80050fa:	b292      	uxth	r2, r2
 80050fc:	3a01      	subs	r2, #1
 80050fe:	b292      	uxth	r2, r2
 8005100:	2117      	movs	r1, #23
 8005102:	0038      	movs	r0, r7
 8005104:	f003 f9c8 	bl	8008498 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8005108:	9a02      	ldr	r2, [sp, #8]
 800510a:	4972      	ldr	r1, [pc, #456]	; (80052d4 <CLI_CommandParser+0x3b0>)
 800510c:	0020      	movs	r0, r4
 800510e:	f00e fbd9 	bl	80138c4 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8005112:	7823      	ldrb	r3, [r4, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <CLI_CommandParser+0x1fa>
 8005118:	464b      	mov	r3, r9
 800511a:	2b00      	cmp	r3, #0
 800511c:	d108      	bne.n	8005130 <CLI_CommandParser+0x20c>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800511e:	0020      	movs	r0, r4
 8005120:	f7fa fffa 	bl	8000118 <strlen>
 8005124:	0002      	movs	r2, r0
 8005126:	2100      	movs	r1, #0
 8005128:	0020      	movs	r0, r4
 800512a:	f00e f9da 	bl	80134e2 <memset>
 800512e:	e0a1      	b.n	8005274 <CLI_CommandParser+0x350>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8005130:	0020      	movs	r0, r4
 8005132:	f7fa fff1 	bl	8000118 <strlen>
 8005136:	b282      	uxth	r2, r0
 8005138:	2301      	movs	r3, #1
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	3331      	adds	r3, #49	; 0x31
 800513e:	0021      	movs	r1, r4
 8005140:	4650      	mov	r0, sl
 8005142:	f008 fe4b 	bl	800dddc <writePxMutex>
 8005146:	e7ea      	b.n	800511e <CLI_CommandParser+0x1fa>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8005148:	21fa      	movs	r1, #250	; 0xfa
 800514a:	0089      	lsls	r1, r1, #2
 800514c:	2001      	movs	r0, #1
 800514e:	f00a fab9 	bl	800f6c4 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8005152:	4b61      	ldr	r3, [pc, #388]	; (80052d8 <CLI_CommandParser+0x3b4>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d100      	bne.n	800515c <CLI_CommandParser+0x238>
 800515a:	e093      	b.n	8005284 <CLI_CommandParser+0x360>
							++timedoutMsg;
 800515c:	4a5f      	ldr	r2, [pc, #380]	; (80052dc <CLI_CommandParser+0x3b8>)
 800515e:	8813      	ldrh	r3, [r2, #0]
 8005160:	3301      	adds	r3, #1
 8005162:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8005164:	9b02      	ldr	r3, [sp, #8]
 8005166:	0022      	movs	r2, r4
 8005168:	495d      	ldr	r1, [pc, #372]	; (80052e0 <CLI_CommandParser+0x3bc>)
 800516a:	0020      	movs	r0, r4
 800516c:	f00e fbaa 	bl	80138c4 <sprintf>
					xReturned = pdFALSE;
 8005170:	2300      	movs	r3, #0
 8005172:	4698      	mov	r8, r3
 8005174:	e006      	b.n	8005184 <CLI_CommandParser+0x260>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005176:	2299      	movs	r2, #153	; 0x99
 8005178:	0092      	lsls	r2, r2, #2
 800517a:	0021      	movs	r1, r4
 800517c:	0028      	movs	r0, r5
 800517e:	f009 f86b 	bl	800e258 <FreeRTOS_CLIProcessCommand>
 8005182:	4680      	mov	r8, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8005184:	7823      	ldrb	r3, [r4, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <CLI_CommandParser+0x26c>
 800518a:	464b      	mov	r3, r9
 800518c:	2b00      	cmp	r3, #0
 800518e:	d17c      	bne.n	800528a <CLI_CommandParser+0x366>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005190:	0020      	movs	r0, r4
 8005192:	f7fa ffc1 	bl	8000118 <strlen>
 8005196:	0002      	movs	r2, r0
 8005198:	2100      	movs	r1, #0
 800519a:	0020      	movs	r0, r4
 800519c:	f00e f9a1 	bl	80134e2 <memset>
	} while(xReturned != pdFALSE);
 80051a0:	4643      	mov	r3, r8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d100      	bne.n	80051a8 <CLI_CommandParser+0x284>
 80051a6:	e0ab      	b.n	8005300 <CLI_CommandParser+0x3dc>
		StringToLowerCase((char* )cInputString);
 80051a8:	0028      	movs	r0, r5
 80051aa:	f7ff fc07 	bl	80049bc <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 80051ae:	4b3d      	ldr	r3, [pc, #244]	; (80052a4 <CLI_CommandParser+0x380>)
 80051b0:	7e9e      	ldrb	r6, [r3, #26]
 80051b2:	2e00      	cmp	r6, #0
 80051b4:	d107      	bne.n	80051c6 <CLI_CommandParser+0x2a2>
 80051b6:	2203      	movs	r2, #3
 80051b8:	494a      	ldr	r1, [pc, #296]	; (80052e4 <CLI_CommandParser+0x3c0>)
 80051ba:	0028      	movs	r0, r5
 80051bc:	f00e fbc5 	bl	801394a <strncmp>
 80051c0:	1e07      	subs	r7, r0, #0
 80051c2:	d100      	bne.n	80051c6 <CLI_CommandParser+0x2a2>
 80051c4:	e6c1      	b.n	8004f4a <CLI_CommandParser+0x26>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 80051c6:	2e00      	cmp	r6, #0
 80051c8:	d007      	beq.n	80051da <CLI_CommandParser+0x2b6>
 80051ca:	2206      	movs	r2, #6
 80051cc:	4946      	ldr	r1, [pc, #280]	; (80052e8 <CLI_CommandParser+0x3c4>)
 80051ce:	0028      	movs	r0, r5
 80051d0:	f00e fbbb 	bl	801394a <strncmp>
 80051d4:	1e07      	subs	r7, r0, #0
 80051d6:	d100      	bne.n	80051da <CLI_CommandParser+0x2b6>
 80051d8:	e6ce      	b.n	8004f78 <CLI_CommandParser+0x54>
		else if(recordSnippet == SNIPPET_COMMANDS){
 80051da:	2e02      	cmp	r6, #2
 80051dc:	d100      	bne.n	80051e0 <CLI_CommandParser+0x2bc>
 80051de:	e6d9      	b.n	8004f94 <CLI_CommandParser+0x70>
			loc =strchr((char* )cInputString,'.');
 80051e0:	212e      	movs	r1, #46	; 0x2e
 80051e2:	0028      	movs	r0, r5
 80051e4:	f00e fb9b 	bl	801391e <strchr>
 80051e8:	1e06      	subs	r6, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 80051ea:	d0c4      	beq.n	8005176 <CLI_CommandParser+0x252>
 80051ec:	3803      	subs	r0, #3
 80051ee:	2203      	movs	r2, #3
 80051f0:	493e      	ldr	r1, [pc, #248]	; (80052ec <CLI_CommandParser+0x3c8>)
 80051f2:	f00e fbaa 	bl	801394a <strncmp>
 80051f6:	2800      	cmp	r0, #0
 80051f8:	d0bd      	beq.n	8005176 <CLI_CommandParser+0x252>
 80051fa:	7873      	ldrb	r3, [r6, #1]
 80051fc:	4a3c      	ldr	r2, [pc, #240]	; (80052f0 <CLI_CommandParser+0x3cc>)
 80051fe:	5cd3      	ldrb	r3, [r2, r3]
 8005200:	075b      	lsls	r3, r3, #29
 8005202:	d4b8      	bmi.n	8005176 <CLI_CommandParser+0x252>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8005204:	1b72      	subs	r2, r6, r5
 8005206:	0029      	movs	r1, r5
 8005208:	a805      	add	r0, sp, #20
 800520a:	f00e fbb0 	bl	801396e <strncpy>
				id =GetID(idString);
 800520e:	a805      	add	r0, sp, #20
 8005210:	f7ff f8bc 	bl	800438c <GetID>
 8005214:	9002      	str	r0, [sp, #8]
				if(id == myID){
 8005216:	4a2c      	ldr	r2, [pc, #176]	; (80052c8 <CLI_CommandParser+0x3a4>)
 8005218:	7812      	ldrb	r2, [r2, #0]
 800521a:	4693      	mov	fp, r2
 800521c:	4290      	cmp	r0, r2
 800521e:	d100      	bne.n	8005222 <CLI_CommandParser+0x2fe>
 8005220:	e6cb      	b.n	8004fba <CLI_CommandParser+0x96>
				else if(id == BOS_ERR_WrongName){
 8005222:	2864      	cmp	r0, #100	; 0x64
 8005224:	d100      	bne.n	8005228 <CLI_CommandParser+0x304>
 8005226:	e6d0      	b.n	8004fca <CLI_CommandParser+0xa6>
				else if(id == BOS_ERR_WrongID){
 8005228:	2866      	cmp	r0, #102	; 0x66
 800522a:	d100      	bne.n	800522e <CLI_CommandParser+0x30a>
 800522c:	e6d5      	b.n	8004fda <CLI_CommandParser+0xb6>
				else if(id == BOS_BROADCAST){
 800522e:	28ff      	cmp	r0, #255	; 0xff
 8005230:	d100      	bne.n	8005234 <CLI_CommandParser+0x310>
 8005232:	e6da      	b.n	8004fea <CLI_CommandParser+0xc6>
				else if((uint8_t )id == BOS_MULTICAST){
 8005234:	466b      	mov	r3, sp
 8005236:	7a1f      	ldrb	r7, [r3, #8]
 8005238:	2ffe      	cmp	r7, #254	; 0xfe
 800523a:	d100      	bne.n	800523e <CLI_CommandParser+0x31a>
 800523c:	e706      	b.n	800504c <CLI_CommandParser+0x128>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 800523e:	3601      	adds	r6, #1
 8005240:	2206      	movs	r2, #6
 8005242:	492c      	ldr	r1, [pc, #176]	; (80052f4 <CLI_CommandParser+0x3d0>)
 8005244:	0030      	movs	r0, r6
 8005246:	f00e fb80 	bl	801394a <strncmp>
 800524a:	2800      	cmp	r0, #0
 800524c:	d000      	beq.n	8005250 <CLI_CommandParser+0x32c>
 800524e:	e73e      	b.n	80050ce <CLI_CommandParser+0x1aa>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8005250:	4b29      	ldr	r3, [pc, #164]	; (80052f8 <CLI_CommandParser+0x3d4>)
 8005252:	2200      	movs	r2, #0
 8005254:	701a      	strb	r2, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8005256:	2119      	movs	r1, #25
 8005258:	0038      	movs	r0, r7
 800525a:	f003 f91d 	bl	8008498 <SendMessageToModule>
						osDelay(100);
 800525e:	2064      	movs	r0, #100	; 0x64
 8005260:	f008 ff46 	bl	800e0f0 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8005264:	4b25      	ldr	r3, [pc, #148]	; (80052fc <CLI_CommandParser+0x3d8>)
 8005266:	781a      	ldrb	r2, [r3, #0]
 8005268:	4b17      	ldr	r3, [pc, #92]	; (80052c8 <CLI_CommandParser+0x3a4>)
 800526a:	7818      	ldrb	r0, [r3, #0]
 800526c:	2300      	movs	r3, #0
 800526e:	0039      	movs	r1, r7
 8005270:	f005 fb44 	bl	800a8fc <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8005274:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <CLI_CommandParser+0x3d4>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b60      	cmp	r3, #96	; 0x60
 800527a:	d100      	bne.n	800527e <CLI_CommandParser+0x35a>
 800527c:	e764      	b.n	8005148 <CLI_CommandParser+0x224>
					xReturned = pdFALSE;
 800527e:	2300      	movs	r3, #0
 8005280:	4698      	mov	r8, r3
 8005282:	e77f      	b.n	8005184 <CLI_CommandParser+0x260>
 8005284:	2300      	movs	r3, #0
 8005286:	4698      	mov	r8, r3
 8005288:	e77c      	b.n	8005184 <CLI_CommandParser+0x260>
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800528a:	0020      	movs	r0, r4
 800528c:	f7fa ff44 	bl	8000118 <strlen>
 8005290:	b282      	uxth	r2, r0
 8005292:	2301      	movs	r3, #1
 8005294:	425b      	negs	r3, r3
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	3333      	adds	r3, #51	; 0x33
 800529a:	0021      	movs	r1, r4
 800529c:	4650      	mov	r0, sl
 800529e:	f008 fd9d 	bl	800dddc <writePxMutex>
 80052a2:	e775      	b.n	8005190 <CLI_CommandParser+0x26c>
 80052a4:	20001824 	.word	0x20001824
 80052a8:	0801a538 	.word	0x0801a538
 80052ac:	08019e14 	.word	0x08019e14
 80052b0:	0801a594 	.word	0x0801a594
 80052b4:	0801a5dc 	.word	0x0801a5dc
 80052b8:	0801a604 	.word	0x0801a604
 80052bc:	20000e50 	.word	0x20000e50
 80052c0:	20000b6c 	.word	0x20000b6c
 80052c4:	0801a62c 	.word	0x0801a62c
 80052c8:	20000aa0 	.word	0x20000aa0
 80052cc:	20000aa4 	.word	0x20000aa4
 80052d0:	0801a64c 	.word	0x0801a64c
 80052d4:	0801a680 	.word	0x0801a680
 80052d8:	20000c6c 	.word	0x20000c6c
 80052dc:	200021d0 	.word	0x200021d0
 80052e0:	0801a6a4 	.word	0x0801a6a4
 80052e4:	0801a534 	.word	0x0801a534
 80052e8:	0801a58c 	.word	0x0801a58c
 80052ec:	0801a5d8 	.word	0x0801a5d8
 80052f0:	0801c626 	.word	0x0801c626
 80052f4:	0801a678 	.word	0x0801a678
 80052f8:	20000b44 	.word	0x20000b44
 80052fc:	20000c58 	.word	0x20000c58
	memset(idString,0x00,MaxLengthOfAlias);
 8005300:	2209      	movs	r2, #9
 8005302:	2100      	movs	r1, #0
 8005304:	a805      	add	r0, sp, #20
 8005306:	f00e f8ec 	bl	80134e2 <memset>
	if(!recordSnippet && enableOutput)
 800530a:	4b0c      	ldr	r3, [pc, #48]	; (800533c <CLI_CommandParser+0x418>)
 800530c:	7e9b      	ldrb	r3, [r3, #26]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d102      	bne.n	8005318 <CLI_CommandParser+0x3f4>
 8005312:	464b      	mov	r3, r9
 8005314:	2b00      	cmp	r3, #0
 8005316:	d106      	bne.n	8005326 <CLI_CommandParser+0x402>
}
 8005318:	b009      	add	sp, #36	; 0x24
 800531a:	bcf0      	pop	{r4, r5, r6, r7}
 800531c:	46bb      	mov	fp, r7
 800531e:	46b2      	mov	sl, r6
 8005320:	46a9      	mov	r9, r5
 8005322:	46a0      	mov	r8, r4
 8005324:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8005326:	2301      	movs	r3, #1
 8005328:	425b      	negs	r3, r3
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	3333      	adds	r3, #51	; 0x33
 800532e:	2238      	movs	r2, #56	; 0x38
 8005330:	4903      	ldr	r1, [pc, #12]	; (8005340 <CLI_CommandParser+0x41c>)
 8005332:	4650      	mov	r0, sl
 8005334:	f008 fd52 	bl	800dddc <writePxMutex>
}
 8005338:	e7ee      	b.n	8005318 <CLI_CommandParser+0x3f4>
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	20001824 	.word	0x20001824
 8005340:	0801a6c4 	.word	0x0801a6c4

08005344 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8005344:	b570      	push	{r4, r5, r6, lr}
 8005346:	b084      	sub	sp, #16
	char cRxedChar ='\0';
 8005348:	230f      	movs	r3, #15
 800534a:	446b      	add	r3, sp
 800534c:	2200      	movs	r2, #0
 800534e:	701a      	strb	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005350:	2101      	movs	r1, #1
 8005352:	4249      	negs	r1, r1
 8005354:	2001      	movs	r0, #1
 8005356:	f00a f9b5 	bl	800f6c4 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800535a:	f008 ffe7 	bl	800e32c <FreeRTOS_CLIGetOutputBuffer>
 800535e:	0006      	movs	r6, r0
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005360:	4b54      	ldr	r3, [pc, #336]	; (80054b4 <prvCLITask+0x170>)
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	23e1      	movs	r3, #225	; 0xe1
 8005366:	031b      	lsls	r3, r3, #12
 8005368:	429a      	cmp	r2, r3
 800536a:	d00f      	beq.n	800538c <prvCLITask+0x48>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800536c:	2401      	movs	r4, #1
 800536e:	e001      	b.n	8005374 <prvCLITask+0x30>
 8005370:	3401      	adds	r4, #1
 8005372:	b2e4      	uxtb	r4, r4
 8005374:	2c05      	cmp	r4, #5
 8005376:	d809      	bhi.n	800538c <prvCLITask+0x48>
			if(port != PcPort)
 8005378:	4b4f      	ldr	r3, [pc, #316]	; (80054b8 <prvCLITask+0x174>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	42a3      	cmp	r3, r4
 800537e:	d0f7      	beq.n	8005370 <prvCLITask+0x2c>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005380:	21e1      	movs	r1, #225	; 0xe1
 8005382:	0309      	lsls	r1, r1, #12
 8005384:	0020      	movs	r0, r4
 8005386:	f008 fd79 	bl	800de7c <UpdateBaudrate>
 800538a:	e7f1      	b.n	8005370 <prvCLITask+0x2c>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 800538c:	4b4b      	ldr	r3, [pc, #300]	; (80054bc <prvCLITask+0x178>)
 800538e:	881a      	ldrh	r2, [r3, #0]
 8005390:	0053      	lsls	r3, r2, #1
 8005392:	189b      	adds	r3, r3, r2
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	4a4a      	ldr	r2, [pc, #296]	; (80054c0 <prvCLITask+0x17c>)
 8005398:	189b      	adds	r3, r3, r2
 800539a:	4a4a      	ldr	r2, [pc, #296]	; (80054c4 <prvCLITask+0x180>)
 800539c:	7812      	ldrb	r2, [r2, #0]
 800539e:	4c4a      	ldr	r4, [pc, #296]	; (80054c8 <prvCLITask+0x184>)
 80053a0:	341c      	adds	r4, #28
 80053a2:	4d45      	ldr	r5, [pc, #276]	; (80054b8 <prvCLITask+0x174>)
 80053a4:	7829      	ldrb	r1, [r5, #0]
 80053a6:	9100      	str	r1, [sp, #0]
 80053a8:	4948      	ldr	r1, [pc, #288]	; (80054cc <prvCLITask+0x188>)
 80053aa:	0020      	movs	r0, r4
 80053ac:	f00e fa8a 	bl	80138c4 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 80053b0:	22a4      	movs	r2, #164	; 0xa4
 80053b2:	7828      	ldrb	r0, [r5, #0]
 80053b4:	230a      	movs	r3, #10
 80053b6:	0092      	lsls	r2, r2, #2
 80053b8:	4945      	ldr	r1, [pc, #276]	; (80054d0 <prvCLITask+0x18c>)
 80053ba:	f008 fd3f 	bl	800de3c <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 80053be:	0020      	movs	r0, r4
 80053c0:	f7fa feaa 	bl	8000118 <strlen>
 80053c4:	b282      	uxth	r2, r0
 80053c6:	7828      	ldrb	r0, [r5, #0]
 80053c8:	230a      	movs	r3, #10
 80053ca:	0021      	movs	r1, r4
 80053cc:	f008 fd36 	bl	800de3c <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 80053d0:	2500      	movs	r5, #0
 80053d2:	e027      	b.n	8005424 <prvCLITask+0xe0>
				cRxedChar = CLI_Data;
 80053d4:	4b3f      	ldr	r3, [pc, #252]	; (80054d4 <prvCLITask+0x190>)
 80053d6:	7819      	ldrb	r1, [r3, #0]
 80053d8:	220f      	movs	r2, #15
 80053da:	446a      	add	r2, sp
 80053dc:	7011      	strb	r1, [r2, #0]
				CLI_Data = 0;
 80053de:	2200      	movs	r2, #0
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	e033      	b.n	800544c <prvCLITask+0x108>
				writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 80053e4:	4b34      	ldr	r3, [pc, #208]	; (80054b8 <prvCLITask+0x174>)
 80053e6:	7818      	ldrb	r0, [r3, #0]
 80053e8:	230a      	movs	r3, #10
 80053ea:	3a0b      	subs	r2, #11
 80053ec:	493a      	ldr	r1, [pc, #232]	; (80054d8 <prvCLITask+0x194>)
 80053ee:	f008 fd25 	bl	800de3c <writePxITMutex>
				if(cInputIndex == 0){
 80053f2:	2d00      	cmp	r5, #0
 80053f4:	d04d      	beq.n	8005492 <prvCLITask+0x14e>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 80053f6:	4c34      	ldr	r4, [pc, #208]	; (80054c8 <prvCLITask+0x184>)
 80053f8:	0025      	movs	r5, r4
 80053fa:	3578      	adds	r5, #120	; 0x78
 80053fc:	4b2e      	ldr	r3, [pc, #184]	; (80054b8 <prvCLITask+0x174>)
 80053fe:	7818      	ldrb	r0, [r3, #0]
 8005400:	0033      	movs	r3, r6
 8005402:	002a      	movs	r2, r5
 8005404:	2101      	movs	r1, #1
 8005406:	f7ff fd8d 	bl	8004f24 <CLI_CommandParser>
				strcpy((char* )cLastInputString,(char* )cInputString);
 800540a:	0020      	movs	r0, r4
 800540c:	3044      	adds	r0, #68	; 0x44
 800540e:	0029      	movs	r1, r5
 8005410:	f00e fa93 	bl	801393a <strcpy>
				memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8005414:	2232      	movs	r2, #50	; 0x32
 8005416:	2100      	movs	r1, #0
 8005418:	0028      	movs	r0, r5
 800541a:	f00e f862 	bl	80134e2 <memset>
				cInputIndex =0;
 800541e:	2500      	movs	r5, #0
		taskYIELD();
 8005420:	f00a fc04 	bl	800fc2c <vPortYield>
		if(Read_In_CLI_Task_Flag == 1)
 8005424:	4a2d      	ldr	r2, [pc, #180]	; (80054dc <prvCLITask+0x198>)
 8005426:	7812      	ldrb	r2, [r2, #0]
 8005428:	2a01      	cmp	r2, #1
 800542a:	d1f9      	bne.n	8005420 <prvCLITask+0xdc>
			if(Processor_type(myPN)=='G')
 800542c:	4b23      	ldr	r3, [pc, #140]	; (80054bc <prvCLITask+0x178>)
 800542e:	7818      	ldrb	r0, [r3, #0]
 8005430:	f7fd fcee 	bl	8002e10 <Processor_type>
 8005434:	2847      	cmp	r0, #71	; 0x47
 8005436:	d0cd      	beq.n	80053d4 <prvCLITask+0x90>
				cRxedChar = Rx_Data[PcPort - 1];
 8005438:	4b1f      	ldr	r3, [pc, #124]	; (80054b8 <prvCLITask+0x174>)
 800543a:	781a      	ldrb	r2, [r3, #0]
 800543c:	3a01      	subs	r2, #1
 800543e:	4b28      	ldr	r3, [pc, #160]	; (80054e0 <prvCLITask+0x19c>)
 8005440:	5c98      	ldrb	r0, [r3, r2]
 8005442:	210f      	movs	r1, #15
 8005444:	4469      	add	r1, sp
 8005446:	7008      	strb	r0, [r1, #0]
				Rx_Data[PcPort - 1] = 0;
 8005448:	2100      	movs	r1, #0
 800544a:	5499      	strb	r1, [r3, r2]
			Read_In_CLI_Task_Flag = 0;
 800544c:	4b23      	ldr	r3, [pc, #140]	; (80054dc <prvCLITask+0x198>)
 800544e:	2200      	movs	r2, #0
 8005450:	701a      	strb	r2, [r3, #0]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 8005452:	240f      	movs	r4, #15
 8005454:	446c      	add	r4, sp
 8005456:	4b18      	ldr	r3, [pc, #96]	; (80054b8 <prvCLITask+0x174>)
 8005458:	7818      	ldrb	r0, [r3, #0]
 800545a:	230a      	movs	r3, #10
 800545c:	3201      	adds	r2, #1
 800545e:	0021      	movs	r1, r4
 8005460:	f008 fcec 	bl	800de3c <writePxITMutex>
			if(cRxedChar == '\r'){
 8005464:	7822      	ldrb	r2, [r4, #0]
 8005466:	2a0d      	cmp	r2, #13
 8005468:	d0bc      	beq.n	80053e4 <prvCLITask+0xa0>
				if(cRxedChar == '\n'){
 800546a:	2a0a      	cmp	r2, #10
 800546c:	d0d8      	beq.n	8005420 <prvCLITask+0xdc>
				else if(cRxedChar == '\b' || cRxedChar == 127 ){
 800546e:	2a08      	cmp	r2, #8
 8005470:	d016      	beq.n	80054a0 <prvCLITask+0x15c>
 8005472:	2a7f      	cmp	r2, #127	; 0x7f
 8005474:	d014      	beq.n	80054a0 <prvCLITask+0x15c>
					if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 8005476:	0013      	movs	r3, r2
 8005478:	3b20      	subs	r3, #32
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b5e      	cmp	r3, #94	; 0x5e
 800547e:	d8cf      	bhi.n	8005420 <prvCLITask+0xdc>
						if(cInputIndex < cmdMAX_INPUT_SIZE){
 8005480:	2d31      	cmp	r5, #49	; 0x31
 8005482:	dccd      	bgt.n	8005420 <prvCLITask+0xdc>
							cInputString[cInputIndex] =cRxedChar;
 8005484:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <prvCLITask+0x184>)
 8005486:	195b      	adds	r3, r3, r5
 8005488:	2178      	movs	r1, #120	; 0x78
 800548a:	545a      	strb	r2, [r3, r1]
							cInputIndex++;
 800548c:	3501      	adds	r5, #1
 800548e:	b26d      	sxtb	r5, r5
 8005490:	e7c6      	b.n	8005420 <prvCLITask+0xdc>
					strcpy((char* )cInputString,(char* )cLastInputString);
 8005492:	480d      	ldr	r0, [pc, #52]	; (80054c8 <prvCLITask+0x184>)
 8005494:	0001      	movs	r1, r0
 8005496:	3144      	adds	r1, #68	; 0x44
 8005498:	3078      	adds	r0, #120	; 0x78
 800549a:	f00e fa4e 	bl	801393a <strcpy>
 800549e:	e7aa      	b.n	80053f6 <prvCLITask+0xb2>
					if(cInputIndex > 0){
 80054a0:	2d00      	cmp	r5, #0
 80054a2:	ddbd      	ble.n	8005420 <prvCLITask+0xdc>
						cInputIndex--;
 80054a4:	3d01      	subs	r5, #1
 80054a6:	b26d      	sxtb	r5, r5
						cInputString[cInputIndex] ='\0';
 80054a8:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <prvCLITask+0x184>)
 80054aa:	195b      	adds	r3, r3, r5
 80054ac:	2278      	movs	r2, #120	; 0x78
 80054ae:	2100      	movs	r1, #0
 80054b0:	5499      	strb	r1, [r3, r2]
 80054b2:	e7b5      	b.n	8005420 <prvCLITask+0xdc>
 80054b4:	20000b4c 	.word	0x20000b4c
 80054b8:	20000c58 	.word	0x20000c58
 80054bc:	20000030 	.word	0x20000030
 80054c0:	0801974c 	.word	0x0801974c
 80054c4:	20000aa0 	.word	0x20000aa0
 80054c8:	20001824 	.word	0x20001824
 80054cc:	0801a700 	.word	0x0801a700
 80054d0:	0801a72c 	.word	0x0801a72c
 80054d4:	200011e9 	.word	0x200011e9
 80054d8:	0801c440 	.word	0x0801c440
 80054dc:	200017a1 	.word	0x200017a1
 80054e0:	20001e00 	.word	0x20001e00

080054e4 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80054e8:	4a1d      	ldr	r2, [pc, #116]	; (8005560 <ParseSnippetCommand+0x7c>)
 80054ea:	7811      	ldrb	r1, [r2, #0]
 80054ec:	3901      	subs	r1, #1
 80054ee:	008b      	lsls	r3, r1, #2
 80054f0:	185b      	adds	r3, r3, r1
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	18d3      	adds	r3, r2, r3
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d02e      	beq.n	800555a <ParseSnippetCommand+0x76>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 80054fc:	4b19      	ldr	r3, [pc, #100]	; (8005564 <ParseSnippetCommand+0x80>)
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d016      	beq.n	8005532 <ParseSnippetCommand+0x4e>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 8005504:	4b17      	ldr	r3, [pc, #92]	; (8005564 <ParseSnippetCommand+0x80>)
 8005506:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8005508:	7833      	ldrb	r3, [r6, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d014      	beq.n	8005538 <ParseSnippetCommand+0x54>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 800550e:	2113      	movs	r1, #19
 8005510:	0030      	movs	r0, r6
 8005512:	f00e fa04 	bl	801391e <strchr>
 8005516:	1e05      	subs	r5, r0, #0
 8005518:	4b12      	ldr	r3, [pc, #72]	; (8005564 <ParseSnippetCommand+0x80>)
 800551a:	6318      	str	r0, [r3, #48]	; 0x30
	if(ptrEnd != NULL){
 800551c:	d011      	beq.n	8005542 <ParseSnippetCommand+0x5e>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 800551e:	1b82      	subs	r2, r0, r6
 8005520:	0031      	movs	r1, r6
 8005522:	0020      	movs	r0, r4
 8005524:	f00e fa23 	bl	801396e <strncpy>
		ptrStart =ptrEnd + 1;
 8005528:	3501      	adds	r5, #1
 800552a:	4b0e      	ldr	r3, [pc, #56]	; (8005564 <ParseSnippetCommand+0x80>)
 800552c:	62dd      	str	r5, [r3, #44]	; 0x2c
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 800552e:	2001      	movs	r0, #1
}
 8005530:	bd70      	pop	{r4, r5, r6, pc}
		ptrStart =snippetBuffer;
 8005532:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <ParseSnippetCommand+0x80>)
 8005534:	62d8      	str	r0, [r3, #44]	; 0x2c
 8005536:	e7e5      	b.n	8005504 <ParseSnippetCommand+0x20>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <ParseSnippetCommand+0x80>)
 800553a:	2200      	movs	r2, #0
 800553c:	62da      	str	r2, [r3, #44]	; 0x2c
		return false;
 800553e:	2000      	movs	r0, #0
 8005540:	e7f6      	b.n	8005530 <ParseSnippetCommand+0x4c>
		strcpy((char* )cliBuffer,ptrStart);
 8005542:	0031      	movs	r1, r6
 8005544:	0020      	movs	r0, r4
 8005546:	f00e f9f8 	bl	801393a <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 800554a:	0020      	movs	r0, r4
 800554c:	f7fa fde4 	bl	8000118 <strlen>
 8005550:	1836      	adds	r6, r6, r0
 8005552:	4b04      	ldr	r3, [pc, #16]	; (8005564 <ParseSnippetCommand+0x80>)
 8005554:	62de      	str	r6, [r3, #44]	; 0x2c
	return true;
 8005556:	2001      	movs	r0, #1
 8005558:	e7ea      	b.n	8005530 <ParseSnippetCommand+0x4c>
		return false;
 800555a:	2000      	movs	r0, #0
 800555c:	e7e8      	b.n	8005530 <ParseSnippetCommand+0x4c>
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	200017a4 	.word	0x200017a4
 8005564:	200018a4 	.word	0x200018a4

08005568 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 8005568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800556a:	b083      	sub	sp, #12
 800556c:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 800556e:	0083      	lsls	r3, r0, #2
 8005570:	181b      	adds	r3, r3, r0
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4a45      	ldr	r2, [pc, #276]	; (800568c <CheckSnippetCondition+0x124>)
 8005576:	18d3      	adds	r3, r2, r3
 8005578:	791b      	ldrb	r3, [r3, #4]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d004      	beq.n	8005588 <CheckSnippetCondition+0x20>
 800557e:	2b03      	cmp	r3, #3
 8005580:	d013      	beq.n	80055aa <CheckSnippetCondition+0x42>
 8005582:	2000      	movs	r0, #0
		default:
			break;
	}
	
	return false;
}
 8005584:	b003      	add	sp, #12
 8005586:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 8005588:	4a40      	ldr	r2, [pc, #256]	; (800568c <CheckSnippetCondition+0x124>)
 800558a:	0080      	lsls	r0, r0, #2
 800558c:	1903      	adds	r3, r0, r4
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	18d3      	adds	r3, r2, r3
 8005592:	7999      	ldrb	r1, [r3, #6]
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8005594:	79da      	ldrb	r2, [r3, #7]
 8005596:	00cb      	lsls	r3, r1, #3
 8005598:	185b      	adds	r3, r3, r1
 800559a:	493d      	ldr	r1, [pc, #244]	; (8005690 <CheckSnippetCondition+0x128>)
 800559c:	5c5b      	ldrb	r3, [r3, r1]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d001      	beq.n	80055a6 <CheckSnippetCondition+0x3e>
				return false;
 80055a2:	2000      	movs	r0, #0
 80055a4:	e7ee      	b.n	8005584 <CheckSnippetCondition+0x1c>
				return true;
 80055a6:	2001      	movs	r0, #1
 80055a8:	e7ec      	b.n	8005584 <CheckSnippetCondition+0x1c>
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80055aa:	4e38      	ldr	r6, [pc, #224]	; (800568c <CheckSnippetCondition+0x124>)
 80055ac:	0085      	lsls	r5, r0, #2
 80055ae:	182b      	adds	r3, r5, r0
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	18f3      	adds	r3, r6, r3
 80055b4:	79da      	ldrb	r2, [r3, #7]
 80055b6:	3a01      	subs	r2, #1
 80055b8:	0053      	lsls	r3, r2, #1
 80055ba:	189b      	adds	r3, r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4a35      	ldr	r2, [pc, #212]	; (8005694 <CheckSnippetCondition+0x12c>)
 80055c0:	589b      	ldr	r3, [r3, r2]
 80055c2:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80055c4:	1d31      	adds	r1, r6, #4
 80055c6:	182b      	adds	r3, r5, r0
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	18c9      	adds	r1, r1, r3
 80055cc:	3106      	adds	r1, #6
 80055ce:	2204      	movs	r2, #4
 80055d0:	a801      	add	r0, sp, #4
 80055d2:	f00d ff7d 	bl	80134d0 <memcpy>
			switch(snippets[index].cond.mathOperator){
 80055d6:	192d      	adds	r5, r5, r4
 80055d8:	00ad      	lsls	r5, r5, #2
 80055da:	1975      	adds	r5, r6, r5
 80055dc:	796b      	ldrb	r3, [r5, #5]
 80055de:	2b06      	cmp	r3, #6
 80055e0:	d845      	bhi.n	800566e <CheckSnippetCondition+0x106>
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4a2c      	ldr	r2, [pc, #176]	; (8005698 <CheckSnippetCondition+0x130>)
 80055e6:	58d3      	ldr	r3, [r2, r3]
 80055e8:	469f      	mov	pc, r3
					if(flt1 == flt2)
 80055ea:	1c39      	adds	r1, r7, #0
 80055ec:	9801      	ldr	r0, [sp, #4]
 80055ee:	f7fa ff6f 	bl	80004d0 <__aeabi_fcmpeq>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d0c6      	beq.n	8005584 <CheckSnippetCondition+0x1c>
						return true;
 80055f6:	2001      	movs	r0, #1
 80055f8:	e7c4      	b.n	8005584 <CheckSnippetCondition+0x1c>
					if(flt1 > flt2)
 80055fa:	1c39      	adds	r1, r7, #0
 80055fc:	9801      	ldr	r0, [sp, #4]
 80055fe:	f7fa ff6d 	bl	80004dc <__aeabi_fcmplt>
 8005602:	2800      	cmp	r0, #0
 8005604:	d0be      	beq.n	8005584 <CheckSnippetCondition+0x1c>
						return true;
 8005606:	2001      	movs	r0, #1
 8005608:	e7bc      	b.n	8005584 <CheckSnippetCondition+0x1c>
					if(flt1 < flt2 && flt1 != 0.0f)
 800560a:	1c39      	adds	r1, r7, #0
 800560c:	9801      	ldr	r0, [sp, #4]
 800560e:	f7fa ff79 	bl	8000504 <__aeabi_fcmpgt>
 8005612:	2800      	cmp	r0, #0
 8005614:	d02d      	beq.n	8005672 <CheckSnippetCondition+0x10a>
 8005616:	2100      	movs	r1, #0
 8005618:	1c38      	adds	r0, r7, #0
 800561a:	f7fa ff59 	bl	80004d0 <__aeabi_fcmpeq>
 800561e:	2800      	cmp	r0, #0
 8005620:	d029      	beq.n	8005676 <CheckSnippetCondition+0x10e>
	return false;
 8005622:	2000      	movs	r0, #0
 8005624:	e7ae      	b.n	8005584 <CheckSnippetCondition+0x1c>
					if(flt1 >= flt2)
 8005626:	1c39      	adds	r1, r7, #0
 8005628:	9801      	ldr	r0, [sp, #4]
 800562a:	f7fa ff61 	bl	80004f0 <__aeabi_fcmple>
 800562e:	2800      	cmp	r0, #0
 8005630:	d0a8      	beq.n	8005584 <CheckSnippetCondition+0x1c>
						return true;
 8005632:	2001      	movs	r0, #1
 8005634:	e7a6      	b.n	8005584 <CheckSnippetCondition+0x1c>
					if(flt1 <= flt2 && flt1 != 0.0f)
 8005636:	1c39      	adds	r1, r7, #0
 8005638:	9801      	ldr	r0, [sp, #4]
 800563a:	f7fa ff6d 	bl	8000518 <__aeabi_fcmpge>
 800563e:	2800      	cmp	r0, #0
 8005640:	d01b      	beq.n	800567a <CheckSnippetCondition+0x112>
 8005642:	2100      	movs	r1, #0
 8005644:	1c38      	adds	r0, r7, #0
 8005646:	f7fa ff43 	bl	80004d0 <__aeabi_fcmpeq>
 800564a:	2800      	cmp	r0, #0
 800564c:	d017      	beq.n	800567e <CheckSnippetCondition+0x116>
	return false;
 800564e:	2000      	movs	r0, #0
 8005650:	e798      	b.n	8005584 <CheckSnippetCondition+0x1c>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005652:	1c39      	adds	r1, r7, #0
 8005654:	9801      	ldr	r0, [sp, #4]
 8005656:	f7fa ff3b 	bl	80004d0 <__aeabi_fcmpeq>
 800565a:	2800      	cmp	r0, #0
 800565c:	d111      	bne.n	8005682 <CheckSnippetCondition+0x11a>
 800565e:	2100      	movs	r1, #0
 8005660:	1c38      	adds	r0, r7, #0
 8005662:	f7fa ff35 	bl	80004d0 <__aeabi_fcmpeq>
 8005666:	2800      	cmp	r0, #0
 8005668:	d00d      	beq.n	8005686 <CheckSnippetCondition+0x11e>
	return false;
 800566a:	2000      	movs	r0, #0
 800566c:	e78a      	b.n	8005584 <CheckSnippetCondition+0x1c>
 800566e:	2000      	movs	r0, #0
 8005670:	e788      	b.n	8005584 <CheckSnippetCondition+0x1c>
 8005672:	2000      	movs	r0, #0
 8005674:	e786      	b.n	8005584 <CheckSnippetCondition+0x1c>
						return true;
 8005676:	2001      	movs	r0, #1
 8005678:	e784      	b.n	8005584 <CheckSnippetCondition+0x1c>
	return false;
 800567a:	2000      	movs	r0, #0
 800567c:	e782      	b.n	8005584 <CheckSnippetCondition+0x1c>
						return true;
 800567e:	2001      	movs	r0, #1
 8005680:	e780      	b.n	8005584 <CheckSnippetCondition+0x1c>
	return false;
 8005682:	2000      	movs	r0, #0
 8005684:	e77e      	b.n	8005584 <CheckSnippetCondition+0x1c>
						return true;
 8005686:	2001      	movs	r0, #1
 8005688:	e77c      	b.n	8005584 <CheckSnippetCondition+0x1c>
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	200017a4 	.word	0x200017a4
 8005690:	2000299c 	.word	0x2000299c
 8005694:	20000094 	.word	0x20000094
 8005698:	08019830 	.word	0x08019830

0800569c <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 800569c:	b570      	push	{r4, r5, r6, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800569e:	f008 fe45 	bl	800e32c <FreeRTOS_CLIGetOutputBuffer>
 80056a2:	0006      	movs	r6, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80056a4:	2400      	movs	r4, #0
 80056a6:	e01d      	b.n	80056e4 <ExecuteSnippet+0x48>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80056a8:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <ExecuteSnippet+0x78>)
 80056aa:	4b1b      	ldr	r3, [pc, #108]	; (8005718 <ExecuteSnippet+0x7c>)
 80056ac:	7818      	ldrb	r0, [r3, #0]
 80056ae:	0033      	movs	r3, r6
 80056b0:	3234      	adds	r2, #52	; 0x34
 80056b2:	2100      	movs	r1, #0
 80056b4:	f7ff fc36 	bl	8004f24 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80056b8:	0030      	movs	r0, r6
 80056ba:	f7fa fd2d 	bl	8000118 <strlen>
 80056be:	0002      	movs	r2, r0
 80056c0:	2100      	movs	r1, #0
 80056c2:	0030      	movs	r0, r6
 80056c4:	f00d ff0d 	bl	80134e2 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80056c8:	4912      	ldr	r1, [pc, #72]	; (8005714 <ExecuteSnippet+0x78>)
 80056ca:	00aa      	lsls	r2, r5, #2
 80056cc:	1952      	adds	r2, r2, r5
 80056ce:	0092      	lsls	r2, r2, #2
 80056d0:	4b12      	ldr	r3, [pc, #72]	; (800571c <ExecuteSnippet+0x80>)
 80056d2:	189a      	adds	r2, r3, r2
 80056d4:	6910      	ldr	r0, [r2, #16]
 80056d6:	3134      	adds	r1, #52	; 0x34
 80056d8:	f7ff ff04 	bl	80054e4 <ParseSnippetCommand>
 80056dc:	2800      	cmp	r0, #0
 80056de:	d1e3      	bne.n	80056a8 <ExecuteSnippet+0xc>
	for(s =0; s < numOfRecordedSnippets; s++){
 80056e0:	3401      	adds	r4, #1
 80056e2:	b2a4      	uxth	r4, r4
 80056e4:	4b0d      	ldr	r3, [pc, #52]	; (800571c <ExecuteSnippet+0x80>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	42a3      	cmp	r3, r4
 80056ea:	d911      	bls.n	8005710 <ExecuteSnippet+0x74>
		if(snippets[s].state)								// Check for activated Snippets
 80056ec:	0025      	movs	r5, r4
 80056ee:	00a2      	lsls	r2, r4, #2
 80056f0:	1912      	adds	r2, r2, r4
 80056f2:	0092      	lsls	r2, r2, #2
 80056f4:	4b09      	ldr	r3, [pc, #36]	; (800571c <ExecuteSnippet+0x80>)
 80056f6:	189a      	adds	r2, r3, r2
 80056f8:	7d13      	ldrb	r3, [r2, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f0      	beq.n	80056e0 <ExecuteSnippet+0x44>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 80056fe:	b2e0      	uxtb	r0, r4
 8005700:	f7ff ff32 	bl	8005568 <CheckSnippetCondition>
 8005704:	2800      	cmp	r0, #0
 8005706:	d0eb      	beq.n	80056e0 <ExecuteSnippet+0x44>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005708:	4b05      	ldr	r3, [pc, #20]	; (8005720 <ExecuteSnippet+0x84>)
 800570a:	2220      	movs	r2, #32
 800570c:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800570e:	e7db      	b.n	80056c8 <ExecuteSnippet+0x2c>
			}
		}
	}
	
	return result;
}
 8005710:	2000      	movs	r0, #0
 8005712:	bd70      	pop	{r4, r5, r6, pc}
 8005714:	200018a4 	.word	0x200018a4
 8005718:	20000c58 	.word	0x20000c58
 800571c:	200017a4 	.word	0x200017a4
 8005720:	20000b44 	.word	0x20000b44

08005724 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	4b03      	ldr	r3, [pc, #12]	; (8005738 <NVIC_SystemReset+0x14>)
 800572a:	4a04      	ldr	r2, [pc, #16]	; (800573c <NVIC_SystemReset+0x18>)
 800572c:	60da      	str	r2, [r3, #12]
 800572e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	e7fd      	b.n	8005732 <NVIC_SystemReset+0xe>
 8005736:	46c0      	nop			; (mov r8, r8)
 8005738:	e000ed00 	.word	0xe000ed00
 800573c:	05fa0004 	.word	0x05fa0004

08005740 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 8005740:	2000      	movs	r0, #0
 8005742:	4770      	bx	lr

08005744 <resetCommand>:
#endif

/*-----------------------------------------------------------*/

static portBASE_TYPE resetCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005744:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )pcCommandString;
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	NVIC_SystemReset();
 8005746:	f7ff ffed 	bl	8005724 <NVIC_SystemReset>
	...

0800574c <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800574c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800574e:	b083      	sub	sp, #12
 8005750:	0006      	movs	r6, r0
 8005752:	0014      	movs	r4, r2
 8005754:	2500      	movs	r5, #0
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8005756:	9501      	str	r5, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005758:	9500      	str	r5, [sp, #0]
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800575a:	aa01      	add	r2, sp, #4
 800575c:	2101      	movs	r1, #1
 800575e:	0020      	movs	r0, r4
 8005760:	f008 fde8 	bl	800e334 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005764:	2300      	movs	r3, #0
 8005766:	56c3      	ldrsb	r3, [r0, r3]
 8005768:	2b70      	cmp	r3, #112	; 0x70
 800576a:	d017      	beq.n	800579c <setBaudrateCommand+0x50>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
	}
	else{
		result =BOS_ERR_WrongValue;
 800576c:	2768      	movs	r7, #104	; 0x68
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800576e:	466a      	mov	r2, sp
 8005770:	2102      	movs	r1, #2
 8005772:	0020      	movs	r0, r4
 8005774:	f008 fdde 	bl	800e334 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005778:	f00d fc4b 	bl	8013012 <atol>
 800577c:	0004      	movs	r4, r0
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
 800577e:	2f68      	cmp	r7, #104	; 0x68
 8005780:	d012      	beq.n	80057a8 <setBaudrateCommand+0x5c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
	}
	else{
		UpdateBaudrate(port,baudrate);
 8005782:	0001      	movs	r1, r0
 8005784:	0028      	movs	r0, r5
 8005786:	f008 fb79 	bl	800de7c <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 800578a:	002b      	movs	r3, r5
 800578c:	0022      	movs	r2, r4
 800578e:	4909      	ldr	r1, [pc, #36]	; (80057b4 <setBaudrateCommand+0x68>)
 8005790:	0030      	movs	r0, r6
 8005792:	f00e f897 	bl	80138c4 <sprintf>
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 8005796:	2000      	movs	r0, #0
 8005798:	b003      	add	sp, #12
 800579a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800579c:	3001      	adds	r0, #1
 800579e:	f00d fc38 	bl	8013012 <atol>
 80057a2:	b2c5      	uxtb	r5, r0
	BOS_Status result =BOS_OK;
 80057a4:	2700      	movs	r7, #0
 80057a6:	e7e2      	b.n	800576e <setBaudrateCommand+0x22>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80057a8:	2213      	movs	r2, #19
 80057aa:	4903      	ldr	r1, [pc, #12]	; (80057b8 <setBaudrateCommand+0x6c>)
 80057ac:	0030      	movs	r0, r6
 80057ae:	f00d fe8f 	bl	80134d0 <memcpy>
 80057b2:	e7f0      	b.n	8005796 <setBaudrateCommand+0x4a>
 80057b4:	0801a9d4 	.word	0x0801a9d4
 80057b8:	0801a9c0 	.word	0x0801a9c0

080057bc <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057bc:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80057be:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <flashsizeCommand+0x14>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	0412      	lsls	r2, r2, #16
 80057c4:	0c12      	lsrs	r2, r2, #16
 80057c6:	4903      	ldr	r1, [pc, #12]	; (80057d4 <flashsizeCommand+0x18>)
 80057c8:	f00e f87c 	bl	80138c4 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80057cc:	2000      	movs	r0, #0
 80057ce:	bd10      	pop	{r4, pc}
 80057d0:	1ffff7cc 	.word	0x1ffff7cc
 80057d4:	0801a9fc 	.word	0x0801a9fc

080057d8 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057d8:	b510      	push	{r4, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	0004      	movs	r4, r0
 80057de:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80057e4:	2300      	movs	r3, #0
 80057e6:	9300      	str	r3, [sp, #0]
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057e8:	aa01      	add	r2, sp, #4
 80057ea:	2101      	movs	r1, #1
 80057ec:	f008 fda2 	bl	800e334 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80057f0:	2300      	movs	r3, #0
 80057f2:	56c3      	ldrsb	r3, [r0, r3]
 80057f4:	3b32      	subs	r3, #50	; 0x32
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d907      	bls.n	800580c <GetReadPrecentageCommand+0x34>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80057fc:	2215      	movs	r2, #21
 80057fe:	490b      	ldr	r1, [pc, #44]	; (800582c <GetReadPrecentageCommand+0x54>)
 8005800:	0020      	movs	r0, r4
 8005802:	f00d fe65 	bl	80134d0 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 8005806:	2000      	movs	r0, #0
 8005808:	b002      	add	sp, #8
 800580a:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800580c:	f00d fc01 	bl	8013012 <atol>
 8005810:	b2c0      	uxtb	r0, r0
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 8005812:	4669      	mov	r1, sp
 8005814:	f007 f934 	bl	800ca80 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8005818:	9800      	ldr	r0, [sp, #0]
 800581a:	f7fd f9ff 	bl	8002c1c <__aeabi_f2d>
 800581e:	0002      	movs	r2, r0
 8005820:	000b      	movs	r3, r1
 8005822:	4903      	ldr	r1, [pc, #12]	; (8005830 <GetReadPrecentageCommand+0x58>)
 8005824:	0020      	movs	r0, r4
 8005826:	f00e f84d 	bl	80138c4 <sprintf>
 800582a:	e7ec      	b.n	8005806 <GetReadPrecentageCommand+0x2e>
 800582c:	0801aa40 	.word	0x0801aa40
 8005830:	0801aa1c 	.word	0x0801aa1c

08005834 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005834:	b510      	push	{r4, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 800583a:	2300      	movs	r3, #0
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005840:	4669      	mov	r1, sp
 8005842:	a801      	add	r0, sp, #4
 8005844:	f007 f854 	bl	800c8f0 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005848:	a901      	add	r1, sp, #4
 800584a:	0020      	movs	r0, r4
 800584c:	f00e f875 	bl	801393a <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 8005850:	9800      	ldr	r0, [sp, #0]
 8005852:	f7fd f9e3 	bl	8002c1c <__aeabi_f2d>
 8005856:	0002      	movs	r2, r0
 8005858:	000b      	movs	r3, r1
 800585a:	4903      	ldr	r1, [pc, #12]	; (8005868 <ReadVrefCommand+0x34>)
 800585c:	0020      	movs	r0, r4
 800585e:	f00e f831 	bl	80138c4 <sprintf>
}
 8005862:	2000      	movs	r0, #0
 8005864:	b002      	add	sp, #8
 8005866:	bd10      	pop	{r4, pc}
 8005868:	0801aa58 	.word	0x0801aa58

0800586c <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800586c:	b510      	push	{r4, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005872:	2300      	movs	r3, #0
 8005874:	9301      	str	r3, [sp, #4]
 8005876:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005878:	4669      	mov	r1, sp
 800587a:	a801      	add	r0, sp, #4
 800587c:	f007 f838 	bl	800c8f0 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005880:	a901      	add	r1, sp, #4
 8005882:	0020      	movs	r0, r4
 8005884:	f00e f859 	bl	801393a <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005888:	9801      	ldr	r0, [sp, #4]
 800588a:	f7fd f9c7 	bl	8002c1c <__aeabi_f2d>
 800588e:	0002      	movs	r2, r0
 8005890:	000b      	movs	r3, r1
 8005892:	4903      	ldr	r1, [pc, #12]	; (80058a0 <ReadTempCommand+0x34>)
 8005894:	0020      	movs	r0, r4
 8005896:	f00e f815 	bl	80138c4 <sprintf>
}
 800589a:	2000      	movs	r0, #0
 800589c:	b002      	add	sp, #8
 800589e:	bd10      	pop	{r4, pc}
 80058a0:	0801aa80 	.word	0x0801aa80

080058a4 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	0006      	movs	r6, r0
 80058aa:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 80058b0:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058b6:	aa03      	add	r2, sp, #12
 80058b8:	2101      	movs	r1, #1
 80058ba:	0020      	movs	r0, r4
 80058bc:	f008 fd3a 	bl	800e334 <FreeRTOS_CLIGetParameter>
 80058c0:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80058c2:	aa02      	add	r2, sp, #8
 80058c4:	2102      	movs	r1, #2
 80058c6:	0020      	movs	r0, r4
 80058c8:	f008 fd34 	bl	800e334 <FreeRTOS_CLIGetParameter>
 80058cc:	0004      	movs	r4, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80058ce:	2300      	movs	r3, #0
 80058d0:	56eb      	ldrsb	r3, [r5, r3]
 80058d2:	3b32      	subs	r3, #50	; 0x32
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d907      	bls.n	80058ea <ADCReadCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80058da:	2215      	movs	r2, #21
 80058dc:	4919      	ldr	r1, [pc, #100]	; (8005944 <ADCReadCommand+0xa0>)
 80058de:	0030      	movs	r0, r6
 80058e0:	f00d fdf6 	bl	80134d0 <memcpy>
}
 80058e4:	2000      	movs	r0, #0
 80058e6:	b004      	add	sp, #16
 80058e8:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80058ea:	0028      	movs	r0, r5
 80058ec:	f00d fb91 	bl	8013012 <atol>
 80058f0:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 80058f2:	4915      	ldr	r1, [pc, #84]	; (8005948 <ADCReadCommand+0xa4>)
 80058f4:	0020      	movs	r0, r4
 80058f6:	f7fa fc05 	bl	8000104 <strcmp>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d005      	beq.n	800590a <ADCReadCommand+0x66>
 80058fe:	4913      	ldr	r1, [pc, #76]	; (800594c <ADCReadCommand+0xa8>)
 8005900:	0020      	movs	r0, r4
 8005902:	f7fa fbff 	bl	8000104 <strcmp>
 8005906:	2800      	cmp	r0, #0
 8005908:	d116      	bne.n	8005938 <ADCReadCommand+0x94>
			ADCSelectChannel(ADCports,ADC_Side);
 800590a:	4c0f      	ldr	r4, [pc, #60]	; (8005948 <ADCReadCommand+0xa4>)
 800590c:	0021      	movs	r1, r4
 800590e:	0028      	movs	r0, r5
 8005910:	f007 f99e 	bl	800cc50 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005914:	aa01      	add	r2, sp, #4
 8005916:	0021      	movs	r1, r4
 8005918:	0028      	movs	r0, r5
 800591a:	f007 f9c9 	bl	800ccb0 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 800591e:	a901      	add	r1, sp, #4
 8005920:	0030      	movs	r0, r6
 8005922:	f00e f80a 	bl	801393a <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005926:	9801      	ldr	r0, [sp, #4]
 8005928:	f7fa fe58 	bl	80005dc <__aeabi_f2uiz>
 800592c:	b282      	uxth	r2, r0
 800592e:	4908      	ldr	r1, [pc, #32]	; (8005950 <ADCReadCommand+0xac>)
 8005930:	0030      	movs	r0, r6
 8005932:	f00d ffc7 	bl	80138c4 <sprintf>
 8005936:	e7d5      	b.n	80058e4 <ADCReadCommand+0x40>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005938:	2212      	movs	r2, #18
 800593a:	4906      	ldr	r1, [pc, #24]	; (8005954 <ADCReadCommand+0xb0>)
 800593c:	0030      	movs	r0, r6
 800593e:	f00d fdc7 	bl	80134d0 <memcpy>
 8005942:	e7cf      	b.n	80058e4 <ADCReadCommand+0x40>
 8005944:	0801aa40 	.word	0x0801aa40
 8005948:	0801aaa4 	.word	0x0801aaa4
 800594c:	0801aaa8 	.word	0x0801aaa8
 8005950:	0801aab0 	.word	0x0801aab0
 8005954:	0801aac0 	.word	0x0801aac0

08005958 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005958:	b570      	push	{r4, r5, r6, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	0005      	movs	r5, r0
 800595e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005960:	2300      	movs	r3, #0
 8005962:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 8005964:	4b5e      	ldr	r3, [pc, #376]	; (8005ae0 <testportCommand+0x188>)
 8005966:	781a      	ldrb	r2, [r3, #0]
 8005968:	ab02      	add	r3, sp, #8
 800596a:	701a      	strb	r2, [r3, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800596c:	aa03      	add	r2, sp, #12
 800596e:	2101      	movs	r1, #1
 8005970:	f008 fce0 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8005974:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005976:	495b      	ldr	r1, [pc, #364]	; (8005ae4 <testportCommand+0x18c>)
 8005978:	f7fa fbc4 	bl	8000104 <strcmp>
 800597c:	2800      	cmp	r0, #0
 800597e:	d169      	bne.n	8005a54 <testportCommand+0xfc>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005980:	4b59      	ldr	r3, [pc, #356]	; (8005ae8 <testportCommand+0x190>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	3b01      	subs	r3, #1
 8005986:	4a59      	ldr	r2, [pc, #356]	; (8005aec <testportCommand+0x194>)
 8005988:	5cd6      	ldrb	r6, [r2, r3]
		for(ports =1; ports <= NumOfPorts; ports++){
 800598a:	2401      	movs	r4, #1
 800598c:	e023      	b.n	80059d6 <testportCommand+0x7e>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 800598e:	0022      	movs	r2, r4
 8005990:	4957      	ldr	r1, [pc, #348]	; (8005af0 <testportCommand+0x198>)
 8005992:	0028      	movs	r0, r5
 8005994:	f00d ff96 	bl	80138c4 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005998:	0028      	movs	r0, r5
 800599a:	f7fa fbbd 	bl	8000118 <strlen>
 800599e:	b282      	uxth	r2, r0
 80059a0:	4b51      	ldr	r3, [pc, #324]	; (8005ae8 <testportCommand+0x190>)
 80059a2:	7818      	ldrb	r0, [r3, #0]
 80059a4:	2364      	movs	r3, #100	; 0x64
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	3b5a      	subs	r3, #90	; 0x5a
 80059aa:	0029      	movs	r1, r5
 80059ac:	f008 fa16 	bl	800dddc <writePxMutex>
 80059b0:	e03e      	b.n	8005a30 <testportCommand+0xd8>
					Delay_ms(1);
 80059b2:	2001      	movs	r0, #1
 80059b4:	f00a fa9c 	bl	800fef0 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80059b8:	4b4b      	ldr	r3, [pc, #300]	; (8005ae8 <testportCommand+0x190>)
 80059ba:	781a      	ldrb	r2, [r3, #0]
 80059bc:	3a01      	subs	r2, #1
 80059be:	1c71      	adds	r1, r6, #1
 80059c0:	0053      	lsls	r3, r2, #1
 80059c2:	189b      	adds	r3, r3, r2
 80059c4:	019b      	lsls	r3, r3, #6
 80059c6:	4a4b      	ldr	r2, [pc, #300]	; (8005af4 <testportCommand+0x19c>)
 80059c8:	18d3      	adds	r3, r2, r3
 80059ca:	5c5b      	ldrb	r3, [r3, r1]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0f0      	beq.n	80059b2 <testportCommand+0x5a>
				LastEnter++;
 80059d0:	000e      	movs	r6, r1
		for(ports =1; ports <= NumOfPorts; ports++){
 80059d2:	3401      	adds	r4, #1
 80059d4:	b2e4      	uxtb	r4, r4
 80059d6:	2c05      	cmp	r4, #5
 80059d8:	d845      	bhi.n	8005a66 <testportCommand+0x10e>
			if(PcPort != ports){
 80059da:	4b43      	ldr	r3, [pc, #268]	; (8005ae8 <testportCommand+0x190>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	42a3      	cmp	r3, r4
 80059e0:	d0f7      	beq.n	80059d2 <testportCommand+0x7a>
				WriteVaule[0] =rand();
 80059e2:	f00d fd97 	bl	8013514 <rand>
 80059e6:	466b      	mov	r3, sp
 80059e8:	7218      	strb	r0, [r3, #8]
				writePxMutex(ports,WriteVaule,1,10,100);
 80059ea:	2364      	movs	r3, #100	; 0x64
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	3b5a      	subs	r3, #90	; 0x5a
 80059f0:	2201      	movs	r2, #1
 80059f2:	a902      	add	r1, sp, #8
 80059f4:	0020      	movs	r0, r4
 80059f6:	f008 f9f1 	bl	800dddc <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 80059fa:	0020      	movs	r0, r4
 80059fc:	f008 f9d0 	bl	800dda0 <GetUart>
 8005a00:	6803      	ldr	r3, [r0, #0]
 8005a02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a04:	b2db      	uxtb	r3, r3
				if(WriteVaule[0] == ReadValue[0])
 8005a06:	466a      	mov	r2, sp
 8005a08:	7a12      	ldrb	r2, [r2, #8]
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d0bf      	beq.n	800598e <testportCommand+0x36>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005a0e:	0022      	movs	r2, r4
 8005a10:	4939      	ldr	r1, [pc, #228]	; (8005af8 <testportCommand+0x1a0>)
 8005a12:	0028      	movs	r0, r5
 8005a14:	f00d ff56 	bl	80138c4 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005a18:	0028      	movs	r0, r5
 8005a1a:	f7fa fb7d 	bl	8000118 <strlen>
 8005a1e:	b282      	uxth	r2, r0
 8005a20:	4b31      	ldr	r3, [pc, #196]	; (8005ae8 <testportCommand+0x190>)
 8005a22:	7818      	ldrb	r0, [r3, #0]
 8005a24:	2364      	movs	r3, #100	; 0x64
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	3b5a      	subs	r3, #90	; 0x5a
 8005a2a:	0029      	movs	r1, r5
 8005a2c:	f008 f9d6 	bl	800dddc <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005a30:	2254      	movs	r2, #84	; 0x54
 8005a32:	4932      	ldr	r1, [pc, #200]	; (8005afc <testportCommand+0x1a4>)
 8005a34:	0028      	movs	r0, r5
 8005a36:	f00d fd4b 	bl	80134d0 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005a3a:	0028      	movs	r0, r5
 8005a3c:	f7fa fb6c 	bl	8000118 <strlen>
 8005a40:	b282      	uxth	r2, r0
 8005a42:	4b29      	ldr	r3, [pc, #164]	; (8005ae8 <testportCommand+0x190>)
 8005a44:	7818      	ldrb	r0, [r3, #0]
 8005a46:	2364      	movs	r3, #100	; 0x64
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	3b5a      	subs	r3, #90	; 0x5a
 8005a4c:	0029      	movs	r1, r5
 8005a4e:	f008 f9c5 	bl	800dddc <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005a52:	e7b1      	b.n	80059b8 <testportCommand+0x60>
	else if(pcParameterString1[0] == 'p'){
 8005a54:	2300      	movs	r3, #0
 8005a56:	56e3      	ldrsb	r3, [r4, r3]
 8005a58:	2b70      	cmp	r3, #112	; 0x70
 8005a5a:	d007      	beq.n	8005a6c <testportCommand+0x114>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a5c:	220f      	movs	r2, #15
 8005a5e:	4928      	ldr	r1, [pc, #160]	; (8005b00 <testportCommand+0x1a8>)
 8005a60:	0028      	movs	r0, r5
 8005a62:	f00d fd35 	bl	80134d0 <memcpy>
}
 8005a66:	2000      	movs	r0, #0
 8005a68:	b004      	add	sp, #16
 8005a6a:	bd70      	pop	{r4, r5, r6, pc}
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a6c:	1c60      	adds	r0, r4, #1
 8005a6e:	f00d fad0 	bl	8013012 <atol>
 8005a72:	0004      	movs	r4, r0
 8005a74:	b2c6      	uxtb	r6, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005a76:	1e73      	subs	r3, r6, #1
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d90b      	bls.n	8005a96 <testportCommand+0x13e>
			result =BOS_ERR_WrongID;
 8005a7e:	2366      	movs	r3, #102	; 0x66
		else if(result == BOS_ERR_WrongID)
 8005a80:	2b66      	cmp	r3, #102	; 0x66
 8005a82:	d027      	beq.n	8005ad4 <testportCommand+0x17c>
		else if(result == BOS_ERR_Keyword)
 8005a84:	2b06      	cmp	r3, #6
 8005a86:	d1ee      	bne.n	8005a66 <testportCommand+0x10e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005a88:	22ff      	movs	r2, #255	; 0xff
 8005a8a:	4022      	ands	r2, r4
 8005a8c:	491a      	ldr	r1, [pc, #104]	; (8005af8 <testportCommand+0x1a0>)
 8005a8e:	0028      	movs	r0, r5
 8005a90:	f00d ff18 	bl	80138c4 <sprintf>
 8005a94:	e7e7      	b.n	8005a66 <testportCommand+0x10e>
				WriteVaule[0] =rand();
 8005a96:	f00d fd3d 	bl	8013514 <rand>
 8005a9a:	466b      	mov	r3, sp
 8005a9c:	7218      	strb	r0, [r3, #8]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005a9e:	2364      	movs	r3, #100	; 0x64
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	3b32      	subs	r3, #50	; 0x32
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	a902      	add	r1, sp, #8
 8005aa8:	0030      	movs	r0, r6
 8005aaa:	f008 f997 	bl	800dddc <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005aae:	2000      	movs	r0, #0
 8005ab0:	f008 f976 	bl	800dda0 <GetUart>
 8005ab4:	6803      	ldr	r3, [r0, #0]
 8005ab6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ab8:	b2db      	uxtb	r3, r3
			if(WriteVaule[0] == ReadValue[0])
 8005aba:	466a      	mov	r2, sp
 8005abc:	7a12      	ldrb	r2, [r2, #8]
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d001      	beq.n	8005ac6 <testportCommand+0x16e>
				result =BOS_ERR_Keyword;
 8005ac2:	2306      	movs	r3, #6
 8005ac4:	e7dc      	b.n	8005a80 <testportCommand+0x128>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005ac6:	22ff      	movs	r2, #255	; 0xff
 8005ac8:	4022      	ands	r2, r4
 8005aca:	4909      	ldr	r1, [pc, #36]	; (8005af0 <testportCommand+0x198>)
 8005acc:	0028      	movs	r0, r5
 8005ace:	f00d fef9 	bl	80138c4 <sprintf>
 8005ad2:	e7c8      	b.n	8005a66 <testportCommand+0x10e>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005ad4:	221b      	movs	r2, #27
 8005ad6:	490b      	ldr	r1, [pc, #44]	; (8005b04 <testportCommand+0x1ac>)
 8005ad8:	0028      	movs	r0, r5
 8005ada:	f00d fcf9 	bl	80134d0 <memcpy>
 8005ade:	e7c2      	b.n	8005a66 <testportCommand+0x10e>
 8005ae0:	0801ab84 	.word	0x0801ab84
 8005ae4:	0801a040 	.word	0x0801a040
 8005ae8:	20000c58 	.word	0x20000c58
 8005aec:	20001a00 	.word	0x20001a00
 8005af0:	0801aad4 	.word	0x0801aad4
 8005af4:	20001a40 	.word	0x20001a40
 8005af8:	0801aaf0 	.word	0x0801aaf0
 8005afc:	0801ab04 	.word	0x0801ab04
 8005b00:	0801ab74 	.word	0x0801ab74
 8005b04:	0801ab58 	.word	0x0801ab58

08005b08 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b0a:	46c6      	mov	lr, r8
 8005b0c:	b500      	push	{lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	0005      	movs	r5, r0
 8005b12:	0014      	movs	r4, r2
 8005b14:	2600      	movs	r6, #0
 8005b16:	2700      	movs	r7, #0
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005b18:	9601      	str	r6, [sp, #4]
 8005b1a:	9600      	str	r6, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b1c:	aa01      	add	r2, sp, #4
 8005b1e:	2101      	movs	r1, #1
 8005b20:	0020      	movs	r0, r4
 8005b22:	f008 fc07 	bl	800e334 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005b26:	2300      	movs	r3, #0
 8005b28:	56c3      	ldrsb	r3, [r0, r3]
 8005b2a:	2b70      	cmp	r3, #112	; 0x70
 8005b2c:	d019      	beq.n	8005b62 <unbridgeCommand+0x5a>
		result =BOS_ERR_WrongParam;
 8005b2e:	2367      	movs	r3, #103	; 0x67
 8005b30:	4698      	mov	r8, r3
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005b32:	466a      	mov	r2, sp
 8005b34:	2102      	movs	r1, #2
 8005b36:	0020      	movs	r0, r4
 8005b38:	f008 fbfc 	bl	800e334 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	56c3      	ldrsb	r3, [r0, r3]
 8005b40:	2b70      	cmp	r3, #112	; 0x70
 8005b42:	d015      	beq.n	8005b70 <unbridgeCommand+0x68>
		result =BOS_ERR_WrongParam;
 8005b44:	2067      	movs	r0, #103	; 0x67
	if(result == BOS_OK)
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d020      	beq.n	8005b8c <unbridgeCommand+0x84>
	else if(result == BOS_ERR_WrongParam)
 8005b4a:	2867      	cmp	r0, #103	; 0x67
 8005b4c:	d025      	beq.n	8005b9a <unbridgeCommand+0x92>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005b4e:	2219      	movs	r2, #25
 8005b50:	4915      	ldr	r1, [pc, #84]	; (8005ba8 <unbridgeCommand+0xa0>)
 8005b52:	0028      	movs	r0, r5
 8005b54:	f00d fcbc 	bl	80134d0 <memcpy>
}
 8005b58:	2000      	movs	r0, #0
 8005b5a:	b002      	add	sp, #8
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	46b8      	mov	r8, r7
 8005b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005b62:	3001      	adds	r0, #1
 8005b64:	f00d fa55 	bl	8013012 <atol>
 8005b68:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	4698      	mov	r8, r3
 8005b6e:	e7e0      	b.n	8005b32 <unbridgeCommand+0x2a>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005b70:	3001      	adds	r0, #1
 8005b72:	f00d fa4e 	bl	8013012 <atol>
 8005b76:	b2c7      	uxtb	r7, r0
	if(result == BOS_OK)
 8005b78:	4643      	mov	r3, r8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <unbridgeCommand+0x7a>
		result =BOS_ERR_WrongParam;
 8005b7e:	2067      	movs	r0, #103	; 0x67
 8005b80:	e7e3      	b.n	8005b4a <unbridgeCommand+0x42>
		result =Unbridge(port1,port2);
 8005b82:	0039      	movs	r1, r7
 8005b84:	0030      	movs	r0, r6
 8005b86:	f7fe fed9 	bl	800493c <Unbridge>
 8005b8a:	e7dc      	b.n	8005b46 <unbridgeCommand+0x3e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005b8c:	003b      	movs	r3, r7
 8005b8e:	0032      	movs	r2, r6
 8005b90:	4906      	ldr	r1, [pc, #24]	; (8005bac <unbridgeCommand+0xa4>)
 8005b92:	0028      	movs	r0, r5
 8005b94:	f00d fe96 	bl	80138c4 <sprintf>
 8005b98:	e7de      	b.n	8005b58 <unbridgeCommand+0x50>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b9a:	220f      	movs	r2, #15
 8005b9c:	4904      	ldr	r1, [pc, #16]	; (8005bb0 <unbridgeCommand+0xa8>)
 8005b9e:	0028      	movs	r0, r5
 8005ba0:	f00d fc96 	bl	80134d0 <memcpy>
 8005ba4:	e7d8      	b.n	8005b58 <unbridgeCommand+0x50>
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	0801aba8 	.word	0x0801aba8
 8005bac:	0801ab88 	.word	0x0801ab88
 8005bb0:	0801ab74 	.word	0x0801ab74

08005bb4 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb6:	46c6      	mov	lr, r8
 8005bb8:	b500      	push	{lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	0005      	movs	r5, r0
 8005bbe:	0014      	movs	r4, r2
 8005bc0:	2600      	movs	r6, #0
 8005bc2:	2700      	movs	r7, #0
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005bc4:	9601      	str	r6, [sp, #4]
 8005bc6:	9600      	str	r6, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bc8:	aa01      	add	r2, sp, #4
 8005bca:	2101      	movs	r1, #1
 8005bcc:	0020      	movs	r0, r4
 8005bce:	f008 fbb1 	bl	800e334 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	56c3      	ldrsb	r3, [r0, r3]
 8005bd6:	2b70      	cmp	r3, #112	; 0x70
 8005bd8:	d019      	beq.n	8005c0e <bridgeCommand+0x5a>
		result =BOS_ERR_WrongParam;
 8005bda:	2367      	movs	r3, #103	; 0x67
 8005bdc:	4698      	mov	r8, r3
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005bde:	466a      	mov	r2, sp
 8005be0:	2102      	movs	r1, #2
 8005be2:	0020      	movs	r0, r4
 8005be4:	f008 fba6 	bl	800e334 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005be8:	2300      	movs	r3, #0
 8005bea:	56c3      	ldrsb	r3, [r0, r3]
 8005bec:	2b70      	cmp	r3, #112	; 0x70
 8005bee:	d015      	beq.n	8005c1c <bridgeCommand+0x68>
		result =BOS_ERR_WrongParam;
 8005bf0:	2067      	movs	r0, #103	; 0x67
	if(result == BOS_OK)
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d020      	beq.n	8005c38 <bridgeCommand+0x84>
	else if(result == BOS_ERR_WrongParam)
 8005bf6:	2867      	cmp	r0, #103	; 0x67
 8005bf8:	d025      	beq.n	8005c46 <bridgeCommand+0x92>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005bfa:	2217      	movs	r2, #23
 8005bfc:	4915      	ldr	r1, [pc, #84]	; (8005c54 <bridgeCommand+0xa0>)
 8005bfe:	0028      	movs	r0, r5
 8005c00:	f00d fc66 	bl	80134d0 <memcpy>
}
 8005c04:	2000      	movs	r0, #0
 8005c06:	b002      	add	sp, #8
 8005c08:	bc80      	pop	{r7}
 8005c0a:	46b8      	mov	r8, r7
 8005c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005c0e:	3001      	adds	r0, #1
 8005c10:	f00d f9ff 	bl	8013012 <atol>
 8005c14:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	4698      	mov	r8, r3
 8005c1a:	e7e0      	b.n	8005bde <bridgeCommand+0x2a>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	f00d f9f8 	bl	8013012 <atol>
 8005c22:	b2c7      	uxtb	r7, r0
	if(result == BOS_OK)
 8005c24:	4643      	mov	r3, r8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <bridgeCommand+0x7a>
		result =BOS_ERR_WrongParam;
 8005c2a:	2067      	movs	r0, #103	; 0x67
 8005c2c:	e7e3      	b.n	8005bf6 <bridgeCommand+0x42>
		result =Bridge(port1,port2);
 8005c2e:	0039      	movs	r1, r7
 8005c30:	0030      	movs	r0, r6
 8005c32:	f7fe fe6f 	bl	8004914 <Bridge>
 8005c36:	e7dc      	b.n	8005bf2 <bridgeCommand+0x3e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005c38:	003b      	movs	r3, r7
 8005c3a:	0032      	movs	r2, r6
 8005c3c:	4906      	ldr	r1, [pc, #24]	; (8005c58 <bridgeCommand+0xa4>)
 8005c3e:	0028      	movs	r0, r5
 8005c40:	f00d fe40 	bl	80138c4 <sprintf>
 8005c44:	e7de      	b.n	8005c04 <bridgeCommand+0x50>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c46:	220f      	movs	r2, #15
 8005c48:	4904      	ldr	r1, [pc, #16]	; (8005c5c <bridgeCommand+0xa8>)
 8005c4a:	0028      	movs	r0, r5
 8005c4c:	f00d fc40 	bl	80134d0 <memcpy>
 8005c50:	e7d8      	b.n	8005c04 <bridgeCommand+0x50>
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	0801abe8 	.word	0x0801abe8
 8005c58:	0801abc4 	.word	0x0801abc4
 8005c5c:	0801ab74 	.word	0x0801ab74

08005c60 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c62:	46d6      	mov	lr, sl
 8005c64:	464f      	mov	r7, r9
 8005c66:	4646      	mov	r6, r8
 8005c68:	b5c0      	push	{r6, r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	0005      	movs	r5, r0
 8005c6e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c74:	aa01      	add	r2, sp, #4
 8005c76:	2101      	movs	r1, #1
 8005c78:	f008 fb5c 	bl	800e334 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005c7c:	f00d f9c3 	bl	8013006 <atoi>
 8005c80:	b2c4      	uxtb	r4, r0
	if(!index || index > numOfRecordedSnippets)
 8005c82:	2c00      	cmp	r4, #0
 8005c84:	d04b      	beq.n	8005d1e <delSnipCommand+0xbe>
 8005c86:	4b30      	ldr	r3, [pc, #192]	; (8005d48 <delSnipCommand+0xe8>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	42a3      	cmp	r3, r4
 8005c8c:	d201      	bcs.n	8005c92 <delSnipCommand+0x32>
		result =BOS_ERROR;
 8005c8e:	23ff      	movs	r3, #255	; 0xff
 8005c90:	e046      	b.n	8005d20 <delSnipCommand+0xc0>
		snippets[index - 1].cond.conditionType =0;
 8005c92:	26ff      	movs	r6, #255	; 0xff
 8005c94:	4006      	ands	r6, r0
 8005c96:	3e01      	subs	r6, #1
 8005c98:	4b2c      	ldr	r3, [pc, #176]	; (8005d4c <delSnipCommand+0xec>)
 8005c9a:	4699      	mov	r9, r3
 8005c9c:	00b3      	lsls	r3, r6, #2
 8005c9e:	4698      	mov	r8, r3
 8005ca0:	199b      	adds	r3, r3, r6
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	4692      	mov	sl, r2
 8005ca8:	464a      	mov	r2, r9
 8005caa:	4651      	mov	r1, sl
 8005cac:	5499      	strb	r1, [r3, r2]
		snippets[index - 1].cond.mathOperator =0;
 8005cae:	4643      	mov	r3, r8
 8005cb0:	199f      	adds	r7, r3, r6
 8005cb2:	00bf      	lsls	r7, r7, #2
 8005cb4:	444f      	add	r7, r9
 8005cb6:	7079      	strb	r1, [r7, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005cb8:	1cb8      	adds	r0, r7, #2
 8005cba:	2204      	movs	r2, #4
 8005cbc:	f00d fc11 	bl	80134e2 <memset>
		snippets[index - 1].state = false;
 8005cc0:	4653      	mov	r3, sl
 8005cc2:	743b      	strb	r3, [r7, #16]
		free(snippets[index - 1].cmd);
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f00d f9d9 	bl	801307c <free>
		snippets[index - 1].cmd = NULL;
 8005cca:	4653      	mov	r3, sl
 8005ccc:	60fb      	str	r3, [r7, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005cce:	e001      	b.n	8005cd4 <delSnipCommand+0x74>
 8005cd0:	3401      	adds	r4, #1
 8005cd2:	b2e4      	uxtb	r4, r4
 8005cd4:	4b1c      	ldr	r3, [pc, #112]	; (8005d48 <delSnipCommand+0xe8>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	42a3      	cmp	r3, r4
 8005cda:	d919      	bls.n	8005d10 <delSnipCommand+0xb0>
			if(snippets[s].cond.conditionType){
 8005cdc:	00a3      	lsls	r3, r4, #2
 8005cde:	191b      	adds	r3, r3, r4
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4a1a      	ldr	r2, [pc, #104]	; (8005d4c <delSnipCommand+0xec>)
 8005ce4:	5c9b      	ldrb	r3, [r3, r2]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f2      	beq.n	8005cd0 <delSnipCommand+0x70>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005cea:	1e63      	subs	r3, r4, #1
 8005cec:	0098      	lsls	r0, r3, #2
 8005cee:	18c0      	adds	r0, r0, r3
 8005cf0:	0080      	lsls	r0, r0, #2
 8005cf2:	1880      	adds	r0, r0, r2
 8005cf4:	00a6      	lsls	r6, r4, #2
 8005cf6:	1936      	adds	r6, r6, r4
 8005cf8:	00b6      	lsls	r6, r6, #2
 8005cfa:	18b6      	adds	r6, r6, r2
 8005cfc:	2214      	movs	r2, #20
 8005cfe:	0031      	movs	r1, r6
 8005d00:	f00d fbe6 	bl	80134d0 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005d04:	2214      	movs	r2, #20
 8005d06:	2100      	movs	r1, #0
 8005d08:	0030      	movs	r0, r6
 8005d0a:	f00d fbea 	bl	80134e2 <memset>
 8005d0e:	e7df      	b.n	8005cd0 <delSnipCommand+0x70>
		--numOfRecordedSnippets;
 8005d10:	3b01      	subs	r3, #1
 8005d12:	4a0d      	ldr	r2, [pc, #52]	; (8005d48 <delSnipCommand+0xe8>)
 8005d14:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005d16:	f004 fccf 	bl	800a6b8 <SaveToRO>
	BOS_Status result =BOS_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e000      	b.n	8005d20 <delSnipCommand+0xc0>
		result =BOS_ERROR;
 8005d1e:	23ff      	movs	r3, #255	; 0xff
	if(result == BOS_OK)
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10b      	bne.n	8005d3c <delSnipCommand+0xdc>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005d24:	2236      	movs	r2, #54	; 0x36
 8005d26:	490a      	ldr	r1, [pc, #40]	; (8005d50 <delSnipCommand+0xf0>)
 8005d28:	0028      	movs	r0, r5
 8005d2a:	f00d fbd1 	bl	80134d0 <memcpy>
}
 8005d2e:	2000      	movs	r0, #0
 8005d30:	b002      	add	sp, #8
 8005d32:	bce0      	pop	{r5, r6, r7}
 8005d34:	46ba      	mov	sl, r7
 8005d36:	46b1      	mov	r9, r6
 8005d38:	46a8      	mov	r8, r5
 8005d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005d3c:	2223      	movs	r2, #35	; 0x23
 8005d3e:	4905      	ldr	r1, [pc, #20]	; (8005d54 <delSnipCommand+0xf4>)
 8005d40:	0028      	movs	r0, r5
 8005d42:	f00d fbc5 	bl	80134d0 <memcpy>
 8005d46:	e7f2      	b.n	8005d2e <delSnipCommand+0xce>
 8005d48:	200017a4 	.word	0x200017a4
 8005d4c:	200017a8 	.word	0x200017a8
 8005d50:	0801ac00 	.word	0x0801ac00
 8005d54:	0801ac38 	.word	0x0801ac38

08005d58 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	0004      	movs	r4, r0
 8005d5e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005d60:	2300      	movs	r3, #0
 8005d62:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005d64:	aa01      	add	r2, sp, #4
 8005d66:	2101      	movs	r1, #1
 8005d68:	f008 fae4 	bl	800e334 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005d6c:	f00d f94b 	bl	8013006 <atoi>
 8005d70:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <pauseSnipCommand+0x26>
 8005d76:	4a0f      	ldr	r2, [pc, #60]	; (8005db4 <pauseSnipCommand+0x5c>)
 8005d78:	7812      	ldrb	r2, [r2, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d207      	bcs.n	8005d8e <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005d7e:	2223      	movs	r2, #35	; 0x23
 8005d80:	490d      	ldr	r1, [pc, #52]	; (8005db8 <pauseSnipCommand+0x60>)
 8005d82:	0020      	movs	r0, r4
 8005d84:	f00d fba4 	bl	80134d0 <memcpy>
}
 8005d88:	2000      	movs	r0, #0
 8005d8a:	b002      	add	sp, #8
 8005d8c:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005d8e:	23ff      	movs	r3, #255	; 0xff
 8005d90:	4018      	ands	r0, r3
 8005d92:	3801      	subs	r0, #1
 8005d94:	0083      	lsls	r3, r0, #2
 8005d96:	1818      	adds	r0, r3, r0
 8005d98:	0080      	lsls	r0, r0, #2
 8005d9a:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <pauseSnipCommand+0x64>)
 8005d9c:	1818      	adds	r0, r3, r0
 8005d9e:	2300      	movs	r3, #0
 8005da0:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005da2:	f004 fc89 	bl	800a6b8 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005da6:	2235      	movs	r2, #53	; 0x35
 8005da8:	4905      	ldr	r1, [pc, #20]	; (8005dc0 <pauseSnipCommand+0x68>)
 8005daa:	0020      	movs	r0, r4
 8005dac:	f00d fb90 	bl	80134d0 <memcpy>
 8005db0:	e7ea      	b.n	8005d88 <pauseSnipCommand+0x30>
 8005db2:	46c0      	nop			; (mov r8, r8)
 8005db4:	200017a4 	.word	0x200017a4
 8005db8:	0801ac38 	.word	0x0801ac38
 8005dbc:	200017a8 	.word	0x200017a8
 8005dc0:	0801ac5c 	.word	0x0801ac5c

08005dc4 <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dc4:	b510      	push	{r4, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	0004      	movs	r4, r0
 8005dca:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005dd0:	aa01      	add	r2, sp, #4
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	f008 faae 	bl	800e334 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005dd8:	f00d f915 	bl	8013006 <atoi>
 8005ddc:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <actSnipCommand+0x26>
 8005de2:	4a0f      	ldr	r2, [pc, #60]	; (8005e20 <actSnipCommand+0x5c>)
 8005de4:	7812      	ldrb	r2, [r2, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d207      	bcs.n	8005dfa <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005dea:	2223      	movs	r2, #35	; 0x23
 8005dec:	490d      	ldr	r1, [pc, #52]	; (8005e24 <actSnipCommand+0x60>)
 8005dee:	0020      	movs	r0, r4
 8005df0:	f00d fb6e 	bl	80134d0 <memcpy>
}
 8005df4:	2000      	movs	r0, #0
 8005df6:	b002      	add	sp, #8
 8005df8:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005dfa:	23ff      	movs	r3, #255	; 0xff
 8005dfc:	4018      	ands	r0, r3
 8005dfe:	3801      	subs	r0, #1
 8005e00:	0083      	lsls	r3, r0, #2
 8005e02:	1818      	adds	r0, r3, r0
 8005e04:	0080      	lsls	r0, r0, #2
 8005e06:	4b08      	ldr	r3, [pc, #32]	; (8005e28 <actSnipCommand+0x64>)
 8005e08:	1818      	adds	r0, r3, r0
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005e0e:	f004 fc53 	bl	800a6b8 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005e12:	2238      	movs	r2, #56	; 0x38
 8005e14:	4905      	ldr	r1, [pc, #20]	; (8005e2c <actSnipCommand+0x68>)
 8005e16:	0020      	movs	r0, r4
 8005e18:	f00d fb5a 	bl	80134d0 <memcpy>
 8005e1c:	e7ea      	b.n	8005df4 <actSnipCommand+0x30>
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	200017a4 	.word	0x200017a4
 8005e24:	0801ac38 	.word	0x0801ac38
 8005e28:	200017a8 	.word	0x200017a8
 8005e2c:	0801ac94 	.word	0x0801ac94

08005e30 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e32:	46d6      	mov	lr, sl
 8005e34:	464f      	mov	r7, r9
 8005e36:	4646      	mov	r6, r8
 8005e38:	b5c0      	push	{r6, r7, lr}
 8005e3a:	b08a      	sub	sp, #40	; 0x28
 8005e3c:	0005      	movs	r5, r0
	char status[2][7] ={"Paused", "Active"};
 8005e3e:	aa06      	add	r2, sp, #24
 8005e40:	4b7a      	ldr	r3, [pc, #488]	; (800602c <snipCommand+0x1fc>)
 8005e42:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005e44:	c213      	stmia	r2!, {r0, r1, r4}
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	8013      	strh	r3, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005e4a:	4b79      	ldr	r3, [pc, #484]	; (8006030 <snipCommand+0x200>)
 8005e4c:	7818      	ldrb	r0, [r3, #0]
 8005e4e:	2301      	movs	r3, #1
 8005e50:	425b      	negs	r3, r3
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	3333      	adds	r3, #51	; 0x33
 8005e56:	2237      	movs	r2, #55	; 0x37
 8005e58:	4976      	ldr	r1, [pc, #472]	; (8006034 <snipCommand+0x204>)
 8005e5a:	f007 ffbf 	bl	800dddc <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005e5e:	2600      	movs	r6, #0
	uint8_t count =1;
 8005e60:	2301      	movs	r3, #1
 8005e62:	469a      	mov	sl, r3
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005e64:	e092      	b.n	8005f8c <snipCommand+0x15c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005e66:	00b3      	lsls	r3, r6, #2
 8005e68:	199b      	adds	r3, r3, r6
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	18d3      	adds	r3, r2, r3
 8005e6e:	7c1a      	ldrb	r2, [r3, #16]
 8005e70:	00d3      	lsls	r3, r2, #3
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	aa06      	add	r2, sp, #24
 8005e76:	4694      	mov	ip, r2
 8005e78:	4463      	add	r3, ip
 8005e7a:	4652      	mov	r2, sl
 8005e7c:	496e      	ldr	r1, [pc, #440]	; (8006038 <snipCommand+0x208>)
 8005e7e:	0028      	movs	r0, r5
 8005e80:	f00d fd20 	bl	80138c4 <sprintf>
 8005e84:	e08f      	b.n	8005fa6 <snipCommand+0x176>
				switch(snippets[s].cond.buffer1[1]){
 8005e86:	00a3      	lsls	r3, r4, #2
 8005e88:	191b      	adds	r3, r3, r4
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4a6b      	ldr	r2, [pc, #428]	; (800603c <snipCommand+0x20c>)
 8005e8e:	18d3      	adds	r3, r2, r3
 8005e90:	78db      	ldrb	r3, [r3, #3]
 8005e92:	2b0b      	cmp	r3, #11
 8005e94:	d813      	bhi.n	8005ebe <snipCommand+0x8e>
 8005e96:	2b09      	cmp	r3, #9
 8005e98:	d233      	bcs.n	8005f02 <snipCommand+0xd2>
 8005e9a:	2b05      	cmp	r3, #5
 8005e9c:	d023      	beq.n	8005ee6 <snipCommand+0xb6>
 8005e9e:	2b06      	cmp	r3, #6
 8005ea0:	d14e      	bne.n	8005f40 <snipCommand+0x110>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005ea2:	00a3      	lsls	r3, r4, #2
 8005ea4:	191b      	adds	r3, r3, r4
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4a64      	ldr	r2, [pc, #400]	; (800603c <snipCommand+0x20c>)
 8005eaa:	18d2      	adds	r2, r2, r3
 8005eac:	7893      	ldrb	r3, [r2, #2]
 8005eae:	68d2      	ldr	r2, [r2, #12]
 8005eb0:	9200      	str	r2, [sp, #0]
 8005eb2:	002a      	movs	r2, r5
 8005eb4:	4962      	ldr	r1, [pc, #392]	; (8006040 <snipCommand+0x210>)
 8005eb6:	0028      	movs	r0, r5
 8005eb8:	f00d fd04 	bl	80138c4 <sprintf>
						break;
 8005ebc:	e040      	b.n	8005f40 <snipCommand+0x110>
 8005ebe:	3b0c      	subs	r3, #12
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d83c      	bhi.n	8005f40 <snipCommand+0x110>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005ec6:	00a2      	lsls	r2, r4, #2
 8005ec8:	1912      	adds	r2, r2, r4
 8005eca:	0093      	lsls	r3, r2, #2
 8005ecc:	4a5b      	ldr	r2, [pc, #364]	; (800603c <snipCommand+0x20c>)
 8005ece:	18d2      	adds	r2, r2, r3
 8005ed0:	7893      	ldrb	r3, [r2, #2]
 8005ed2:	7911      	ldrb	r1, [r2, #4]
 8005ed4:	68d2      	ldr	r2, [r2, #12]
 8005ed6:	9201      	str	r2, [sp, #4]
 8005ed8:	9100      	str	r1, [sp, #0]
 8005eda:	002a      	movs	r2, r5
 8005edc:	4959      	ldr	r1, [pc, #356]	; (8006044 <snipCommand+0x214>)
 8005ede:	0028      	movs	r0, r5
 8005ee0:	f00d fcf0 	bl	80138c4 <sprintf>
						break;
 8005ee4:	e02c      	b.n	8005f40 <snipCommand+0x110>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005ee6:	00a3      	lsls	r3, r4, #2
 8005ee8:	191b      	adds	r3, r3, r4
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4a53      	ldr	r2, [pc, #332]	; (800603c <snipCommand+0x20c>)
 8005eee:	18d2      	adds	r2, r2, r3
 8005ef0:	7893      	ldrb	r3, [r2, #2]
 8005ef2:	68d2      	ldr	r2, [r2, #12]
 8005ef4:	9200      	str	r2, [sp, #0]
 8005ef6:	002a      	movs	r2, r5
 8005ef8:	4953      	ldr	r1, [pc, #332]	; (8006048 <snipCommand+0x218>)
 8005efa:	0028      	movs	r0, r5
 8005efc:	f00d fce2 	bl	80138c4 <sprintf>
						break;
 8005f00:	e01e      	b.n	8005f40 <snipCommand+0x110>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005f02:	00a2      	lsls	r2, r4, #2
 8005f04:	1912      	adds	r2, r2, r4
 8005f06:	0093      	lsls	r3, r2, #2
 8005f08:	4a4c      	ldr	r2, [pc, #304]	; (800603c <snipCommand+0x20c>)
 8005f0a:	18d2      	adds	r2, r2, r3
 8005f0c:	7893      	ldrb	r3, [r2, #2]
 8005f0e:	7911      	ldrb	r1, [r2, #4]
 8005f10:	68d2      	ldr	r2, [r2, #12]
 8005f12:	9201      	str	r2, [sp, #4]
 8005f14:	9100      	str	r1, [sp, #0]
 8005f16:	002a      	movs	r2, r5
 8005f18:	494c      	ldr	r1, [pc, #304]	; (800604c <snipCommand+0x21c>)
 8005f1a:	0028      	movs	r0, r5
 8005f1c:	f00d fcd2 	bl	80138c4 <sprintf>
						break;
 8005f20:	e00e      	b.n	8005f40 <snipCommand+0x110>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005f22:	4f4b      	ldr	r7, [pc, #300]	; (8006050 <snipCommand+0x220>)
 8005f24:	003b      	movs	r3, r7
 8005f26:	002a      	movs	r2, r5
 8005f28:	494a      	ldr	r1, [pc, #296]	; (8006054 <snipCommand+0x224>)
 8005f2a:	0028      	movs	r0, r5
 8005f2c:	f00d fcca 	bl	80138c4 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005f30:	0038      	movs	r0, r7
 8005f32:	f7fa f8f1 	bl	8000118 <strlen>
 8005f36:	0002      	movs	r2, r0
 8005f38:	2100      	movs	r1, #0
 8005f3a:	0038      	movs	r0, r7
 8005f3c:	f00d fad1 	bl	80134e2 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005f40:	00a3      	lsls	r3, r4, #2
 8005f42:	191b      	adds	r3, r3, r4
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4a3d      	ldr	r2, [pc, #244]	; (800603c <snipCommand+0x20c>)
 8005f48:	18d3      	adds	r3, r2, r3
 8005f4a:	68d8      	ldr	r0, [r3, #12]
 8005f4c:	4940      	ldr	r1, [pc, #256]	; (8006050 <snipCommand+0x220>)
 8005f4e:	f7ff fac9 	bl	80054e4 <ParseSnippetCommand>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	d1e5      	bne.n	8005f22 <snipCommand+0xf2>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005f56:	0028      	movs	r0, r5
 8005f58:	f7fa f8de 	bl	8000118 <strlen>
 8005f5c:	1828      	adds	r0, r5, r0
 8005f5e:	220c      	movs	r2, #12
 8005f60:	493d      	ldr	r1, [pc, #244]	; (8006058 <snipCommand+0x228>)
 8005f62:	f00d fab5 	bl	80134d0 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005f66:	0028      	movs	r0, r5
 8005f68:	f7fa f8d6 	bl	8000118 <strlen>
 8005f6c:	b282      	uxth	r2, r0
 8005f6e:	4b30      	ldr	r3, [pc, #192]	; (8006030 <snipCommand+0x200>)
 8005f70:	7818      	ldrb	r0, [r3, #0]
 8005f72:	2301      	movs	r3, #1
 8005f74:	425b      	negs	r3, r3
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	3333      	adds	r3, #51	; 0x33
 8005f7a:	0029      	movs	r1, r5
 8005f7c:	f007 ff2e 	bl	800dddc <writePxMutex>
		++count;
 8005f80:	4657      	mov	r7, sl
 8005f82:	3701      	adds	r7, #1
 8005f84:	b2fb      	uxtb	r3, r7
 8005f86:	469a      	mov	sl, r3
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005f88:	3601      	adds	r6, #1
 8005f8a:	b2f6      	uxtb	r6, r6
 8005f8c:	4b33      	ldr	r3, [pc, #204]	; (800605c <snipCommand+0x22c>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	42b3      	cmp	r3, r6
 8005f92:	d93e      	bls.n	8006012 <snipCommand+0x1e2>
		if(snippets[s].cond.conditionType)
 8005f94:	0034      	movs	r4, r6
 8005f96:	00b3      	lsls	r3, r6, #2
 8005f98:	199b      	adds	r3, r3, r6
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4a27      	ldr	r2, [pc, #156]	; (800603c <snipCommand+0x20c>)
 8005f9e:	5c9b      	ldrb	r3, [r3, r2]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d000      	beq.n	8005fa6 <snipCommand+0x176>
 8005fa4:	e75f      	b.n	8005e66 <snipCommand+0x36>
		switch(snippets[s].cond.conditionType){
 8005fa6:	00a3      	lsls	r3, r4, #2
 8005fa8:	191b      	adds	r3, r3, r4
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4a23      	ldr	r2, [pc, #140]	; (800603c <snipCommand+0x20c>)
 8005fae:	5c9b      	ldrb	r3, [r3, r2]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d100      	bne.n	8005fb6 <snipCommand+0x186>
 8005fb4:	e767      	b.n	8005e86 <snipCommand+0x56>
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d1c2      	bne.n	8005f40 <snipCommand+0x110>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005fba:	00a3      	lsls	r3, r4, #2
 8005fbc:	191b      	adds	r3, r3, r4
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4a1e      	ldr	r2, [pc, #120]	; (800603c <snipCommand+0x20c>)
 8005fc2:	4698      	mov	r8, r3
 8005fc4:	4490      	add	r8, r2
 8005fc6:	4643      	mov	r3, r8
 8005fc8:	1d99      	adds	r1, r3, #6
 8005fca:	2204      	movs	r2, #4
 8005fcc:	a805      	add	r0, sp, #20
 8005fce:	f00d fa7f 	bl	80134d0 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005fd2:	4643      	mov	r3, r8
 8005fd4:	78da      	ldrb	r2, [r3, #3]
 8005fd6:	3a01      	subs	r2, #1
 8005fd8:	785b      	ldrb	r3, [r3, #1]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	4813      	ldr	r0, [pc, #76]	; (800602c <snipCommand+0x1fc>)
 8005fde:	0059      	lsls	r1, r3, #1
 8005fe0:	18cb      	adds	r3, r1, r3
 8005fe2:	3010      	adds	r0, #16
 8005fe4:	4680      	mov	r8, r0
 8005fe6:	4498      	add	r8, r3
 8005fe8:	0053      	lsls	r3, r2, #1
 8005fea:	189b      	adds	r3, r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4a1c      	ldr	r2, [pc, #112]	; (8006060 <snipCommand+0x230>)
 8005ff0:	18d3      	adds	r3, r2, r3
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	4699      	mov	r9, r3
 8005ff6:	9805      	ldr	r0, [sp, #20]
 8005ff8:	f7fc fe10 	bl	8002c1c <__aeabi_f2d>
 8005ffc:	9002      	str	r0, [sp, #8]
 8005ffe:	9103      	str	r1, [sp, #12]
 8006000:	4643      	mov	r3, r8
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	464b      	mov	r3, r9
 8006006:	002a      	movs	r2, r5
 8006008:	4916      	ldr	r1, [pc, #88]	; (8006064 <snipCommand+0x234>)
 800600a:	0028      	movs	r0, r5
 800600c:	f00d fc5a 	bl	80138c4 <sprintf>
				break;
 8006010:	e796      	b.n	8005f40 <snipCommand+0x110>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8006012:	22b5      	movs	r2, #181	; 0xb5
 8006014:	4914      	ldr	r1, [pc, #80]	; (8006068 <snipCommand+0x238>)
 8006016:	0028      	movs	r0, r5
 8006018:	f00d fa5a 	bl	80134d0 <memcpy>
}
 800601c:	2000      	movs	r0, #0
 800601e:	b00a      	add	sp, #40	; 0x28
 8006020:	bce0      	pop	{r5, r6, r7}
 8006022:	46ba      	mov	sl, r7
 8006024:	46b1      	mov	r9, r6
 8006026:	46a8      	mov	r8, r5
 8006028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	08019870 	.word	0x08019870
 8006030:	20000c58 	.word	0x20000c58
 8006034:	0801accc 	.word	0x0801accc
 8006038:	0801ad04 	.word	0x0801ad04
 800603c:	200017a8 	.word	0x200017a8
 8006040:	0801ad24 	.word	0x0801ad24
 8006044:	0801ad54 	.word	0x0801ad54
 8006048:	0801ad10 	.word	0x0801ad10
 800604c:	0801ad3c 	.word	0x0801ad3c
 8006050:	2000190c 	.word	0x2000190c
 8006054:	0801ad80 	.word	0x0801ad80
 8006058:	0801ad88 	.word	0x0801ad88
 800605c:	200017a4 	.word	0x200017a4
 8006060:	20000094 	.word	0x20000094
 8006064:	0801ad70 	.word	0x0801ad70
 8006068:	0801ad94 	.word	0x0801ad94

0800606c <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800606c:	b510      	push	{r4, lr}
 800606e:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 8006070:	f009 ff52 	bl	800ff18 <HAL_GetDEVID>
	switch(dev){
 8006074:	0403      	lsls	r3, r0, #16
 8006076:	0c1b      	lsrs	r3, r3, #16
 8006078:	4a1a      	ldr	r2, [pc, #104]	; (80060e4 <idcodeCommand+0x78>)
 800607a:	4694      	mov	ip, r2
 800607c:	4463      	add	r3, ip
 800607e:	2b08      	cmp	r3, #8
 8006080:	d82a      	bhi.n	80060d8 <idcodeCommand+0x6c>
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4a18      	ldr	r2, [pc, #96]	; (80060e8 <idcodeCommand+0x7c>)
 8006086:	58d3      	ldr	r3, [r2, r3]
 8006088:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 800608a:	4a18      	ldr	r2, [pc, #96]	; (80060ec <idcodeCommand+0x80>)
 800608c:	4918      	ldr	r1, [pc, #96]	; (80060f0 <idcodeCommand+0x84>)
 800608e:	0020      	movs	r0, r4
 8006090:	f00d fc18 	bl	80138c4 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8006094:	f009 ff3a 	bl	800ff0c <HAL_GetREVID>
 8006098:	0b03      	lsrs	r3, r0, #12
 800609a:	0022      	movs	r2, r4
 800609c:	4915      	ldr	r1, [pc, #84]	; (80060f4 <idcodeCommand+0x88>)
 800609e:	0020      	movs	r0, r4
 80060a0:	f00d fc10 	bl	80138c4 <sprintf>
}
 80060a4:	2000      	movs	r0, #0
 80060a6:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 80060a8:	4a13      	ldr	r2, [pc, #76]	; (80060f8 <idcodeCommand+0x8c>)
 80060aa:	4911      	ldr	r1, [pc, #68]	; (80060f0 <idcodeCommand+0x84>)
 80060ac:	0020      	movs	r0, r4
 80060ae:	f00d fc09 	bl	80138c4 <sprintf>
			break;
 80060b2:	e7ef      	b.n	8006094 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 80060b4:	4a11      	ldr	r2, [pc, #68]	; (80060fc <idcodeCommand+0x90>)
 80060b6:	490e      	ldr	r1, [pc, #56]	; (80060f0 <idcodeCommand+0x84>)
 80060b8:	0020      	movs	r0, r4
 80060ba:	f00d fc03 	bl	80138c4 <sprintf>
			break;
 80060be:	e7e9      	b.n	8006094 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 80060c0:	4a0f      	ldr	r2, [pc, #60]	; (8006100 <idcodeCommand+0x94>)
 80060c2:	490b      	ldr	r1, [pc, #44]	; (80060f0 <idcodeCommand+0x84>)
 80060c4:	0020      	movs	r0, r4
 80060c6:	f00d fbfd 	bl	80138c4 <sprintf>
			break;
 80060ca:	e7e3      	b.n	8006094 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 80060cc:	4a0d      	ldr	r2, [pc, #52]	; (8006104 <idcodeCommand+0x98>)
 80060ce:	4908      	ldr	r1, [pc, #32]	; (80060f0 <idcodeCommand+0x84>)
 80060d0:	0020      	movs	r0, r4
 80060d2:	f00d fbf7 	bl	80138c4 <sprintf>
			break;
 80060d6:	e7dd      	b.n	8006094 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 80060d8:	4a0b      	ldr	r2, [pc, #44]	; (8006108 <idcodeCommand+0x9c>)
 80060da:	4905      	ldr	r1, [pc, #20]	; (80060f0 <idcodeCommand+0x84>)
 80060dc:	0020      	movs	r0, r4
 80060de:	f00d fbf1 	bl	80138c4 <sprintf>
			break;
 80060e2:	e7d7      	b.n	8006094 <idcodeCommand+0x28>
 80060e4:	fffffbc0 	.word	0xfffffbc0
 80060e8:	0801984c 	.word	0x0801984c
 80060ec:	0801ae4c 	.word	0x0801ae4c
 80060f0:	0801ae58 	.word	0x0801ae58
 80060f4:	0801aea4 	.word	0x0801aea4
 80060f8:	0801ae6c 	.word	0x0801ae6c
 80060fc:	0801ae78 	.word	0x0801ae78
 8006100:	0801ae84 	.word	0x0801ae84
 8006104:	0801ae90 	.word	0x0801ae90
 8006108:	0801ae9c 	.word	0x0801ae9c

0800610c <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	0005      	movs	r5, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8006110:	220e      	movs	r2, #14
 8006112:	490e      	ldr	r1, [pc, #56]	; (800614c <uuidCommand+0x40>)
 8006114:	f00d f9dc 	bl	80134d0 <memcpy>
	for(uint8_t i =0; i < 3; i++){
 8006118:	2400      	movs	r4, #0
 800611a:	e00a      	b.n	8006132 <uuidCommand+0x26>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 800611c:	4b0c      	ldr	r3, [pc, #48]	; (8006150 <uuidCommand+0x44>)
 800611e:	18e3      	adds	r3, r4, r3
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	002a      	movs	r2, r5
 8006126:	490b      	ldr	r1, [pc, #44]	; (8006154 <uuidCommand+0x48>)
 8006128:	0028      	movs	r0, r5
 800612a:	f00d fbcb 	bl	80138c4 <sprintf>
	for(uint8_t i =0; i < 3; i++){
 800612e:	3401      	adds	r4, #1
 8006130:	b2e4      	uxtb	r4, r4
 8006132:	2c02      	cmp	r4, #2
 8006134:	d9f2      	bls.n	800611c <uuidCommand+0x10>
	strcat((char* )pcWriteBuffer,"\r\n");
 8006136:	0028      	movs	r0, r5
 8006138:	f7f9 ffee 	bl	8000118 <strlen>
 800613c:	1828      	adds	r0, r5, r0
 800613e:	2203      	movs	r2, #3
 8006140:	4905      	ldr	r1, [pc, #20]	; (8006158 <uuidCommand+0x4c>)
 8006142:	f00d f9c5 	bl	80134d0 <memcpy>
}
 8006146:	2000      	movs	r0, #0
 8006148:	bd70      	pop	{r4, r5, r6, pc}
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	0801aebc 	.word	0x0801aebc
 8006150:	07fffdeb 	.word	0x07fffdeb
 8006154:	0801aecc 	.word	0x0801aecc
 8006158:	0801c440 	.word	0x0801c440

0800615c <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800615c:	b530      	push	{r4, r5, lr}
 800615e:	b085      	sub	sp, #20
 8006160:	0004      	movs	r4, r0
	GetTimeDate();
 8006162:	f007 fba3 	bl	800d8ac <GetTimeDate>
	if(BOS.hourformat == 24)
 8006166:	4b1b      	ldr	r3, [pc, #108]	; (80061d4 <timeCommand+0x78>)
 8006168:	7b5b      	ldrb	r3, [r3, #13]
 800616a:	2b18      	cmp	r3, #24
 800616c:	d004      	beq.n	8006178 <timeCommand+0x1c>
	else if(BOS.hourformat == 12){
 800616e:	2b0c      	cmp	r3, #12
 8006170:	d00e      	beq.n	8006190 <timeCommand+0x34>
}
 8006172:	2000      	movs	r0, #0
 8006174:	b005      	add	sp, #20
 8006176:	bd30      	pop	{r4, r5, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8006178:	4916      	ldr	r1, [pc, #88]	; (80061d4 <timeCommand+0x78>)
 800617a:	7c8a      	ldrb	r2, [r1, #18]
 800617c:	7c4b      	ldrb	r3, [r1, #17]
 800617e:	7c08      	ldrb	r0, [r1, #16]
 8006180:	89c9      	ldrh	r1, [r1, #14]
 8006182:	9101      	str	r1, [sp, #4]
 8006184:	9000      	str	r0, [sp, #0]
 8006186:	4914      	ldr	r1, [pc, #80]	; (80061d8 <timeCommand+0x7c>)
 8006188:	0020      	movs	r0, r4
 800618a:	f00d fb9b 	bl	80138c4 <sprintf>
 800618e:	e7f0      	b.n	8006172 <timeCommand+0x16>
		if(BOS.time.ampm == RTC_AM)
 8006190:	4b10      	ldr	r3, [pc, #64]	; (80061d4 <timeCommand+0x78>)
 8006192:	7cdb      	ldrb	r3, [r3, #19]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d00f      	beq.n	80061b8 <timeCommand+0x5c>
		else if(BOS.time.ampm == RTC_PM)
 8006198:	2b02      	cmp	r3, #2
 800619a:	d1ea      	bne.n	8006172 <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 800619c:	490d      	ldr	r1, [pc, #52]	; (80061d4 <timeCommand+0x78>)
 800619e:	7c8a      	ldrb	r2, [r1, #18]
 80061a0:	7c4b      	ldrb	r3, [r1, #17]
 80061a2:	7c08      	ldrb	r0, [r1, #16]
 80061a4:	89c9      	ldrh	r1, [r1, #14]
 80061a6:	4d0d      	ldr	r5, [pc, #52]	; (80061dc <timeCommand+0x80>)
 80061a8:	9502      	str	r5, [sp, #8]
 80061aa:	9101      	str	r1, [sp, #4]
 80061ac:	9000      	str	r0, [sp, #0]
 80061ae:	490c      	ldr	r1, [pc, #48]	; (80061e0 <timeCommand+0x84>)
 80061b0:	0020      	movs	r0, r4
 80061b2:	f00d fb87 	bl	80138c4 <sprintf>
 80061b6:	e7dc      	b.n	8006172 <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 80061b8:	4906      	ldr	r1, [pc, #24]	; (80061d4 <timeCommand+0x78>)
 80061ba:	7c8a      	ldrb	r2, [r1, #18]
 80061bc:	7c4b      	ldrb	r3, [r1, #17]
 80061be:	7c08      	ldrb	r0, [r1, #16]
 80061c0:	89c9      	ldrh	r1, [r1, #14]
 80061c2:	4d08      	ldr	r5, [pc, #32]	; (80061e4 <timeCommand+0x88>)
 80061c4:	9502      	str	r5, [sp, #8]
 80061c6:	9101      	str	r1, [sp, #4]
 80061c8:	9000      	str	r0, [sp, #0]
 80061ca:	4905      	ldr	r1, [pc, #20]	; (80061e0 <timeCommand+0x84>)
 80061cc:	0020      	movs	r0, r4
 80061ce:	f00d fb79 	bl	80138c4 <sprintf>
 80061d2:	e7ce      	b.n	8006172 <timeCommand+0x16>
 80061d4:	20000b4c 	.word	0x20000b4c
 80061d8:	0801aed4 	.word	0x0801aed4
 80061dc:	0801af2c 	.word	0x0801af2c
 80061e0:	0801aefc 	.word	0x0801aefc
 80061e4:	0801af28 	.word	0x0801af28

080061e8 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80061e8:	b510      	push	{r4, lr}
 80061ea:	0004      	movs	r4, r0
	GetTimeDate();
 80061ec:	f007 fb5e 	bl	800d8ac <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 80061f0:	f7fe fb6c 	bl	80048cc <GetDateString>
 80061f4:	0002      	movs	r2, r0
 80061f6:	4903      	ldr	r1, [pc, #12]	; (8006204 <dateCommand+0x1c>)
 80061f8:	0020      	movs	r0, r4
 80061fa:	f00d fb63 	bl	80138c4 <sprintf>
}
 80061fe:	2000      	movs	r0, #0
 8006200:	bd10      	pop	{r4, pc}
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	0801af30 	.word	0x0801af30

08006208 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800620a:	b083      	sub	sp, #12
 800620c:	0005      	movs	r5, r0
 800620e:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006210:	2300      	movs	r3, #0
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	9300      	str	r3, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006216:	aa01      	add	r2, sp, #4
 8006218:	2101      	movs	r1, #1
 800621a:	0030      	movs	r0, r6
 800621c:	f008 f88a 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8006220:	0004      	movs	r4, r0
 8006222:	4b7c      	ldr	r3, [pc, #496]	; (8006414 <getCommand+0x20c>)
 8006224:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006226:	2204      	movs	r2, #4
 8006228:	497b      	ldr	r1, [pc, #492]	; (8006418 <getCommand+0x210>)
 800622a:	f00d fb8e 	bl	801394a <strncmp>
 800622e:	2800      	cmp	r0, #0
 8006230:	d000      	beq.n	8006234 <getCommand+0x2c>
 8006232:	e097      	b.n	8006364 <getCommand+0x15c>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006234:	3404      	adds	r4, #4
 8006236:	9b01      	ldr	r3, [sp, #4]
 8006238:	1f1e      	subs	r6, r3, #4
 800623a:	0032      	movs	r2, r6
 800623c:	4977      	ldr	r1, [pc, #476]	; (800641c <getCommand+0x214>)
 800623e:	0020      	movs	r0, r4
 8006240:	f00d fb83 	bl	801394a <strncmp>
 8006244:	2800      	cmp	r0, #0
 8006246:	d11d      	bne.n	8006284 <getCommand+0x7c>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8006248:	4b75      	ldr	r3, [pc, #468]	; (8006420 <getCommand+0x218>)
 800624a:	781c      	ldrb	r4, [r3, #0]
 800624c:	2c60      	cmp	r4, #96	; 0x60
 800624e:	d005      	beq.n	800625c <getCommand+0x54>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8006250:	2c20      	cmp	r4, #32
 8006252:	d00a      	beq.n	800626a <getCommand+0x62>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8006254:	2c00      	cmp	r4, #0
 8006256:	d00f      	beq.n	8006278 <getCommand+0x70>
				result =BOS_ERR_WrongValue;
 8006258:	2468      	movs	r4, #104	; 0x68
 800625a:	e0ce      	b.n	80063fa <getCommand+0x1f2>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 800625c:	4a71      	ldr	r2, [pc, #452]	; (8006424 <getCommand+0x21c>)
 800625e:	4972      	ldr	r1, [pc, #456]	; (8006428 <getCommand+0x220>)
 8006260:	0028      	movs	r0, r5
 8006262:	f00d fb2f 	bl	80138c4 <sprintf>
	BOS_Status result =BOS_OK;
 8006266:	2400      	movs	r4, #0
 8006268:	e0c7      	b.n	80063fa <getCommand+0x1f2>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 800626a:	4a70      	ldr	r2, [pc, #448]	; (800642c <getCommand+0x224>)
 800626c:	496e      	ldr	r1, [pc, #440]	; (8006428 <getCommand+0x220>)
 800626e:	0028      	movs	r0, r5
 8006270:	f00d fb28 	bl	80138c4 <sprintf>
	BOS_Status result =BOS_OK;
 8006274:	2400      	movs	r4, #0
 8006276:	e0c0      	b.n	80063fa <getCommand+0x1f2>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8006278:	4a6d      	ldr	r2, [pc, #436]	; (8006430 <getCommand+0x228>)
 800627a:	496b      	ldr	r1, [pc, #428]	; (8006428 <getCommand+0x220>)
 800627c:	0028      	movs	r0, r5
 800627e:	f00d fb21 	bl	80138c4 <sprintf>
	if(result == BOS_ERR_WrongParam)
 8006282:	e0ba      	b.n	80063fa <getCommand+0x1f2>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006284:	0032      	movs	r2, r6
 8006286:	496b      	ldr	r1, [pc, #428]	; (8006434 <getCommand+0x22c>)
 8006288:	0020      	movs	r0, r4
 800628a:	f00d fb5e 	bl	801394a <strncmp>
 800628e:	2800      	cmp	r0, #0
 8006290:	d11d      	bne.n	80062ce <getCommand+0xc6>
			if(BOSMessaging.trace == TRACE_BOTH)
 8006292:	4b63      	ldr	r3, [pc, #396]	; (8006420 <getCommand+0x218>)
 8006294:	785c      	ldrb	r4, [r3, #1]
 8006296:	2c03      	cmp	r4, #3
 8006298:	d005      	beq.n	80062a6 <getCommand+0x9e>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 800629a:	2c01      	cmp	r4, #1
 800629c:	d00a      	beq.n	80062b4 <getCommand+0xac>
			else if(BOSMessaging.trace == TRACE_NONE)
 800629e:	2c00      	cmp	r4, #0
 80062a0:	d00f      	beq.n	80062c2 <getCommand+0xba>
				result =BOS_ERR_WrongValue;
 80062a2:	2468      	movs	r4, #104	; 0x68
 80062a4:	e0a9      	b.n	80063fa <getCommand+0x1f2>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80062a6:	4a5f      	ldr	r2, [pc, #380]	; (8006424 <getCommand+0x21c>)
 80062a8:	495f      	ldr	r1, [pc, #380]	; (8006428 <getCommand+0x220>)
 80062aa:	0028      	movs	r0, r5
 80062ac:	f00d fb0a 	bl	80138c4 <sprintf>
	BOS_Status result =BOS_OK;
 80062b0:	2400      	movs	r4, #0
 80062b2:	e0a2      	b.n	80063fa <getCommand+0x1f2>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80062b4:	4a5d      	ldr	r2, [pc, #372]	; (800642c <getCommand+0x224>)
 80062b6:	495c      	ldr	r1, [pc, #368]	; (8006428 <getCommand+0x220>)
 80062b8:	0028      	movs	r0, r5
 80062ba:	f00d fb03 	bl	80138c4 <sprintf>
	BOS_Status result =BOS_OK;
 80062be:	2400      	movs	r4, #0
 80062c0:	e09b      	b.n	80063fa <getCommand+0x1f2>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 80062c2:	4a5b      	ldr	r2, [pc, #364]	; (8006430 <getCommand+0x228>)
 80062c4:	4958      	ldr	r1, [pc, #352]	; (8006428 <getCommand+0x220>)
 80062c6:	0028      	movs	r0, r5
 80062c8:	f00d fafc 	bl	80138c4 <sprintf>
	if(result == BOS_ERR_WrongParam)
 80062cc:	e095      	b.n	80063fa <getCommand+0x1f2>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80062ce:	0032      	movs	r2, r6
 80062d0:	4959      	ldr	r1, [pc, #356]	; (8006438 <getCommand+0x230>)
 80062d2:	0020      	movs	r0, r4
 80062d4:	f00d fb39 	bl	801394a <strncmp>
 80062d8:	2800      	cmp	r0, #0
 80062da:	d023      	beq.n	8006324 <getCommand+0x11c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80062dc:	0032      	movs	r2, r6
 80062de:	4957      	ldr	r1, [pc, #348]	; (800643c <getCommand+0x234>)
 80062e0:	0020      	movs	r0, r4
 80062e2:	f00d fb32 	bl	801394a <strncmp>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d024      	beq.n	8006334 <getCommand+0x12c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80062ea:	0032      	movs	r2, r6
 80062ec:	4954      	ldr	r1, [pc, #336]	; (8006440 <getCommand+0x238>)
 80062ee:	0020      	movs	r0, r4
 80062f0:	f00d fb2b 	bl	801394a <strncmp>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d025      	beq.n	8006344 <getCommand+0x13c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80062f8:	0032      	movs	r2, r6
 80062fa:	4952      	ldr	r1, [pc, #328]	; (8006444 <getCommand+0x23c>)
 80062fc:	0020      	movs	r0, r4
 80062fe:	f00d fb24 	bl	801394a <strncmp>
 8006302:	2800      	cmp	r0, #0
 8006304:	d026      	beq.n	8006354 <getCommand+0x14c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006306:	0032      	movs	r2, r6
 8006308:	494f      	ldr	r1, [pc, #316]	; (8006448 <getCommand+0x240>)
 800630a:	0020      	movs	r0, r4
 800630c:	f00d fb1d 	bl	801394a <strncmp>
 8006310:	2800      	cmp	r0, #0
 8006312:	d12e      	bne.n	8006372 <getCommand+0x16a>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8006314:	4b4d      	ldr	r3, [pc, #308]	; (800644c <getCommand+0x244>)
 8006316:	795a      	ldrb	r2, [r3, #5]
 8006318:	494d      	ldr	r1, [pc, #308]	; (8006450 <getCommand+0x248>)
 800631a:	0028      	movs	r0, r5
 800631c:	f00d fad2 	bl	80138c4 <sprintf>
	BOS_Status result =BOS_OK;
 8006320:	2400      	movs	r4, #0
 8006322:	e06a      	b.n	80063fa <getCommand+0x1f2>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8006324:	4b49      	ldr	r3, [pc, #292]	; (800644c <getCommand+0x244>)
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	4949      	ldr	r1, [pc, #292]	; (8006450 <getCommand+0x248>)
 800632a:	0028      	movs	r0, r5
 800632c:	f00d faca 	bl	80138c4 <sprintf>
	BOS_Status result =BOS_OK;
 8006330:	2400      	movs	r4, #0
 8006332:	e062      	b.n	80063fa <getCommand+0x1f2>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8006334:	4b45      	ldr	r3, [pc, #276]	; (800644c <getCommand+0x244>)
 8006336:	881a      	ldrh	r2, [r3, #0]
 8006338:	4945      	ldr	r1, [pc, #276]	; (8006450 <getCommand+0x248>)
 800633a:	0028      	movs	r0, r5
 800633c:	f00d fac2 	bl	80138c4 <sprintf>
	BOS_Status result =BOS_OK;
 8006340:	2400      	movs	r4, #0
 8006342:	e05a      	b.n	80063fa <getCommand+0x1f2>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8006344:	4b41      	ldr	r3, [pc, #260]	; (800644c <getCommand+0x244>)
 8006346:	885a      	ldrh	r2, [r3, #2]
 8006348:	4941      	ldr	r1, [pc, #260]	; (8006450 <getCommand+0x248>)
 800634a:	0028      	movs	r0, r5
 800634c:	f00d faba 	bl	80138c4 <sprintf>
	BOS_Status result =BOS_OK;
 8006350:	2400      	movs	r4, #0
 8006352:	e052      	b.n	80063fa <getCommand+0x1f2>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8006354:	4b3d      	ldr	r3, [pc, #244]	; (800644c <getCommand+0x244>)
 8006356:	791a      	ldrb	r2, [r3, #4]
 8006358:	493d      	ldr	r1, [pc, #244]	; (8006450 <getCommand+0x248>)
 800635a:	0028      	movs	r0, r5
 800635c:	f00d fab2 	bl	80138c4 <sprintf>
	BOS_Status result =BOS_OK;
 8006360:	2400      	movs	r4, #0
 8006362:	e04a      	b.n	80063fa <getCommand+0x1f2>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8006364:	2205      	movs	r2, #5
 8006366:	493b      	ldr	r1, [pc, #236]	; (8006454 <getCommand+0x24c>)
 8006368:	0020      	movs	r0, r4
 800636a:	f00d faee 	bl	801394a <strncmp>
 800636e:	2800      	cmp	r0, #0
 8006370:	d005      	beq.n	800637e <getCommand+0x176>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006372:	2213      	movs	r2, #19
 8006374:	4938      	ldr	r1, [pc, #224]	; (8006458 <getCommand+0x250>)
 8006376:	0028      	movs	r0, r5
 8006378:	f00d f8aa 	bl	80134d0 <memcpy>
 800637c:	e03f      	b.n	80063fe <getCommand+0x1f6>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800637e:	466a      	mov	r2, sp
 8006380:	2102      	movs	r1, #2
 8006382:	0030      	movs	r0, r6
 8006384:	f007 ffd6 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8006388:	0007      	movs	r7, r0
 800638a:	4b22      	ldr	r3, [pc, #136]	; (8006414 <getCommand+0x20c>)
 800638c:	6398      	str	r0, [r3, #56]	; 0x38
		for(i =0; i < MaxNumOfGroups; i++){
 800638e:	2400      	movs	r4, #0
 8006390:	e001      	b.n	8006396 <getCommand+0x18e>
 8006392:	3401      	adds	r4, #1
 8006394:	b2e4      	uxtb	r4, r4
 8006396:	2c09      	cmp	r4, #9
 8006398:	d80b      	bhi.n	80063b2 <getCommand+0x1aa>
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 800639a:	00a1      	lsls	r1, r4, #2
 800639c:	1909      	adds	r1, r1, r4
 800639e:	0049      	lsls	r1, r1, #1
 80063a0:	4b2e      	ldr	r3, [pc, #184]	; (800645c <getCommand+0x254>)
 80063a2:	18c9      	adds	r1, r1, r3
 80063a4:	0038      	movs	r0, r7
 80063a6:	f7f9 fead 	bl	8000104 <strcmp>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d1f1      	bne.n	8006392 <getCommand+0x18a>
				temp8 =1;
 80063ae:	2601      	movs	r6, #1
 80063b0:	e000      	b.n	80063b4 <getCommand+0x1ac>
		temp8 =0;
 80063b2:	2600      	movs	r6, #0
		if(!temp8){
 80063b4:	2e00      	cmp	r6, #0
 80063b6:	d005      	beq.n	80063c4 <getCommand+0x1bc>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 80063b8:	003a      	movs	r2, r7
 80063ba:	4929      	ldr	r1, [pc, #164]	; (8006460 <getCommand+0x258>)
 80063bc:	0028      	movs	r0, r5
 80063be:	f00d fa81 	bl	80138c4 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 80063c2:	e007      	b.n	80063d4 <getCommand+0x1cc>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 80063c4:	003a      	movs	r2, r7
 80063c6:	4927      	ldr	r1, [pc, #156]	; (8006464 <getCommand+0x25c>)
 80063c8:	0028      	movs	r0, r5
 80063ca:	f00d fa7b 	bl	80138c4 <sprintf>
			return pdFALSE;
 80063ce:	e016      	b.n	80063fe <getCommand+0x1f6>
			for(j =1; j <= N; j++)						// N modules
 80063d0:	3601      	adds	r6, #1
 80063d2:	b2f6      	uxtb	r6, r6
 80063d4:	4b24      	ldr	r3, [pc, #144]	; (8006468 <getCommand+0x260>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	42b3      	cmp	r3, r6
 80063da:	d30d      	bcc.n	80063f8 <getCommand+0x1f0>
				if(InGroup(j,i)){
 80063dc:	1e73      	subs	r3, r6, #1
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	4a22      	ldr	r2, [pc, #136]	; (800646c <getCommand+0x264>)
 80063e2:	5a9b      	ldrh	r3, [r3, r2]
 80063e4:	4123      	asrs	r3, r4
 80063e6:	07db      	lsls	r3, r3, #31
 80063e8:	d5f2      	bpl.n	80063d0 <getCommand+0x1c8>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80063ea:	0033      	movs	r3, r6
 80063ec:	002a      	movs	r2, r5
 80063ee:	4920      	ldr	r1, [pc, #128]	; (8006470 <getCommand+0x268>)
 80063f0:	0028      	movs	r0, r5
 80063f2:	f00d fa67 	bl	80138c4 <sprintf>
 80063f6:	e7eb      	b.n	80063d0 <getCommand+0x1c8>
	BOS_Status result =BOS_OK;
 80063f8:	2400      	movs	r4, #0
	else if(result == BOS_ERR_WrongValue)
 80063fa:	2c68      	cmp	r4, #104	; 0x68
 80063fc:	d002      	beq.n	8006404 <getCommand+0x1fc>
}
 80063fe:	2000      	movs	r0, #0
 8006400:	b003      	add	sp, #12
 8006402:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8006404:	4b03      	ldr	r3, [pc, #12]	; (8006414 <getCommand+0x20c>)
 8006406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006408:	491a      	ldr	r1, [pc, #104]	; (8006474 <getCommand+0x26c>)
 800640a:	0028      	movs	r0, r5
 800640c:	f00d fa5a 	bl	80138c4 <sprintf>
 8006410:	e7f5      	b.n	80063fe <getCommand+0x1f6>
 8006412:	46c0      	nop			; (mov r8, r8)
 8006414:	2000190c 	.word	0x2000190c
 8006418:	0801af48 	.word	0x0801af48
 800641c:	0801af50 	.word	0x0801af50
 8006420:	20000b44 	.word	0x20000b44
 8006424:	0801a040 	.word	0x0801a040
 8006428:	08019f1c 	.word	0x08019f1c
 800642c:	0801af5c 	.word	0x0801af5c
 8006430:	0801af60 	.word	0x0801af60
 8006434:	0801af68 	.word	0x0801af68
 8006438:	0801af70 	.word	0x0801af70
 800643c:	0801af7c 	.word	0x0801af7c
 8006440:	0801af88 	.word	0x0801af88
 8006444:	0801af98 	.word	0x0801af98
 8006448:	0801afac 	.word	0x0801afac
 800644c:	20000b4c 	.word	0x20000b4c
 8006450:	0801a69c 	.word	0x0801a69c
 8006454:	0801afc0 	.word	0x0801afc0
 8006458:	0801b000 	.word	0x0801b000
 800645c:	20000ad8 	.word	0x20000ad8
 8006460:	0801afe4 	.word	0x0801afe4
 8006464:	0801afc8 	.word	0x0801afc8
 8006468:	20000008 	.word	0x20000008
 800646c:	20000aa4 	.word	0x20000aa4
 8006470:	0801aff8 	.word	0x0801aff8
 8006474:	0801b014 	.word	0x0801b014

08006478 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	0005      	movs	r5, r0
 800647e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006480:	2300      	movs	r3, #0
 8006482:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006484:	aa01      	add	r2, sp, #4
 8006486:	2101      	movs	r1, #1
 8006488:	f007 ff54 	bl	800e334 <FreeRTOS_CLIGetParameter>
 800648c:	0004      	movs	r4, r0
 800648e:	4b20      	ldr	r3, [pc, #128]	; (8006510 <defaultCommand+0x98>)
 8006490:	63d8      	str	r0, [r3, #60]	; 0x3c
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006492:	9e01      	ldr	r6, [sp, #4]
 8006494:	0032      	movs	r2, r6
 8006496:	491f      	ldr	r1, [pc, #124]	; (8006514 <defaultCommand+0x9c>)
 8006498:	f00d fa57 	bl	801394a <strncmp>
 800649c:	2800      	cmp	r0, #0
 800649e:	d00e      	beq.n	80064be <defaultCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 80064a0:	0032      	movs	r2, r6
 80064a2:	491d      	ldr	r1, [pc, #116]	; (8006518 <defaultCommand+0xa0>)
 80064a4:	0020      	movs	r0, r4
 80064a6:	f00d fa50 	bl	801394a <strncmp>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d018      	beq.n	80064e0 <defaultCommand+0x68>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80064ae:	220f      	movs	r2, #15
 80064b0:	491a      	ldr	r1, [pc, #104]	; (800651c <defaultCommand+0xa4>)
 80064b2:	0028      	movs	r0, r5
 80064b4:	f00d f80c 	bl	80134d0 <memcpy>
}
 80064b8:	2000      	movs	r0, #0
 80064ba:	b002      	add	sp, #8
 80064bc:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 80064be:	4918      	ldr	r1, [pc, #96]	; (8006520 <defaultCommand+0xa8>)
 80064c0:	4b18      	ldr	r3, [pc, #96]	; (8006524 <defaultCommand+0xac>)
 80064c2:	000a      	movs	r2, r1
 80064c4:	cb13      	ldmia	r3!, {r0, r1, r4}
 80064c6:	c213      	stmia	r2!, {r0, r1, r4}
 80064c8:	cb13      	ldmia	r3!, {r0, r1, r4}
 80064ca:	c213      	stmia	r2!, {r0, r1, r4}
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 80064d0:	f7fd f932 	bl	8003738 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 80064d4:	2227      	movs	r2, #39	; 0x27
 80064d6:	4914      	ldr	r1, [pc, #80]	; (8006528 <defaultCommand+0xb0>)
 80064d8:	0028      	movs	r0, r5
 80064da:	f00c fff9 	bl	80134d0 <memcpy>
	if(result == BOS_ERR_WrongValue)
 80064de:	e7eb      	b.n	80064b8 <defaultCommand+0x40>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 80064e0:	2200      	movs	r2, #0
 80064e2:	2116      	movs	r1, #22
 80064e4:	20ff      	movs	r0, #255	; 0xff
 80064e6:	f001 ffd7 	bl	8008498 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 80064ea:	4b10      	ldr	r3, [pc, #64]	; (800652c <defaultCommand+0xb4>)
 80064ec:	2202      	movs	r2, #2
 80064ee:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80064f0:	2064      	movs	r0, #100	; 0x64
 80064f2:	f007 fdfd 	bl	800e0f0 <osDelay>
		ClearEEportsDir();
 80064f6:	f7fd f965 	bl	80037c4 <ClearEEportsDir>
		ClearROtopology();
 80064fa:	f004 f9d3 	bl	800a8a4 <ClearROtopology>
		osDelay(100);
 80064fe:	2064      	movs	r0, #100	; 0x64
 8006500:	f007 fdf6 	bl	800e0f0 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8006504:	2240      	movs	r2, #64	; 0x40
 8006506:	490a      	ldr	r1, [pc, #40]	; (8006530 <defaultCommand+0xb8>)
 8006508:	0028      	movs	r0, r5
 800650a:	f00c ffe1 	bl	80134d0 <memcpy>
	if(result == BOS_ERR_WrongValue)
 800650e:	e7d3      	b.n	80064b8 <defaultCommand+0x40>
 8006510:	2000190c 	.word	0x2000190c
 8006514:	0801b034 	.word	0x0801b034
 8006518:	0801b064 	.word	0x0801b064
 800651c:	0801b06c 	.word	0x0801b06c
 8006520:	20000b4c 	.word	0x20000b4c
 8006524:	20000014 	.word	0x20000014
 8006528:	0801b03c 	.word	0x0801b03c
 800652c:	200011e7 	.word	0x200011e7
 8006530:	0801b07c 	.word	0x0801b07c

08006534 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006536:	46ce      	mov	lr, r9
 8006538:	4647      	mov	r7, r8
 800653a:	b580      	push	{r7, lr}
 800653c:	b08d      	sub	sp, #52	; 0x34
 800653e:	0007      	movs	r7, r0
 8006540:	0016      	movs	r6, r2
 8006542:	2400      	movs	r4, #0
 8006544:	2300      	movs	r3, #0
 8006546:	4698      	mov	r8, r3
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006548:	940b      	str	r4, [sp, #44]	; 0x2c
 800654a:	940a      	str	r4, [sp, #40]	; 0x28
 800654c:	9409      	str	r4, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 800654e:	9408      	str	r4, [sp, #32]
 8006550:	9407      	str	r4, [sp, #28]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006552:	aa0b      	add	r2, sp, #44	; 0x2c
 8006554:	2101      	movs	r1, #1
 8006556:	0030      	movs	r0, r6
 8006558:	f007 feec 	bl	800e334 <FreeRTOS_CLIGetParameter>
 800655c:	0005      	movs	r5, r0
 800655e:	4bb7      	ldr	r3, [pc, #732]	; (800683c <setCommand+0x308>)
 8006560:	6418      	str	r0, [r3, #64]	; 0x40
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006562:	2204      	movs	r2, #4
 8006564:	49b6      	ldr	r1, [pc, #728]	; (8006840 <setCommand+0x30c>)
 8006566:	f00d f9f0 	bl	801394a <strncmp>
 800656a:	2800      	cmp	r0, #0
 800656c:	d01c      	beq.n	80065a8 <setCommand+0x74>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 800656e:	2204      	movs	r2, #4
 8006570:	49b4      	ldr	r1, [pc, #720]	; (8006844 <setCommand+0x310>)
 8006572:	0028      	movs	r0, r5
 8006574:	f00d f9e9 	bl	801394a <strncmp>
 8006578:	2800      	cmp	r0, #0
 800657a:	d100      	bne.n	800657e <setCommand+0x4a>
 800657c:	e180      	b.n	8006880 <setCommand+0x34c>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 800657e:	2204      	movs	r2, #4
 8006580:	49b1      	ldr	r1, [pc, #708]	; (8006848 <setCommand+0x314>)
 8006582:	0028      	movs	r0, r5
 8006584:	f00d f9e1 	bl	801394a <strncmp>
 8006588:	2800      	cmp	r0, #0
 800658a:	d100      	bne.n	800658e <setCommand+0x5a>
 800658c:	e1d4      	b.n	8006938 <setCommand+0x404>
		result =BOS_ERR_WrongParam;
 800658e:	2567      	movs	r5, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8006590:	2d67      	cmp	r5, #103	; 0x67
 8006592:	d100      	bne.n	8006596 <setCommand+0x62>
 8006594:	e3d1      	b.n	8006d3a <setCommand+0x806>
	else if(result == BOS_ERR_WrongValue)
 8006596:	2d68      	cmp	r5, #104	; 0x68
 8006598:	d100      	bne.n	800659c <setCommand+0x68>
 800659a:	e3d4      	b.n	8006d46 <setCommand+0x812>
}
 800659c:	2000      	movs	r0, #0
 800659e:	b00d      	add	sp, #52	; 0x34
 80065a0:	bcc0      	pop	{r6, r7}
 80065a2:	46b9      	mov	r9, r7
 80065a4:	46b0      	mov	r8, r6
 80065a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80065a8:	aa0a      	add	r2, sp, #40	; 0x28
 80065aa:	2102      	movs	r1, #2
 80065ac:	0030      	movs	r0, r6
 80065ae:	f007 fec1 	bl	800e334 <FreeRTOS_CLIGetParameter>
 80065b2:	0004      	movs	r4, r0
 80065b4:	4ba1      	ldr	r3, [pc, #644]	; (800683c <setCommand+0x308>)
 80065b6:	6458      	str	r0, [r3, #68]	; 0x44
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80065b8:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 80065ba:	3504      	adds	r5, #4
 80065bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065be:	1f1e      	subs	r6, r3, #4
 80065c0:	0032      	movs	r2, r6
 80065c2:	49a2      	ldr	r1, [pc, #648]	; (800684c <setCommand+0x318>)
 80065c4:	0028      	movs	r0, r5
 80065c6:	f00d f9c0 	bl	801394a <strncmp>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d156      	bne.n	800667c <setCommand+0x148>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80065ce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80065d0:	002a      	movs	r2, r5
 80065d2:	499f      	ldr	r1, [pc, #636]	; (8006850 <setCommand+0x31c>)
 80065d4:	0020      	movs	r0, r4
 80065d6:	f00d f9b8 	bl	801394a <strncmp>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d016      	beq.n	800660c <setCommand+0xd8>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80065de:	002a      	movs	r2, r5
 80065e0:	499c      	ldr	r1, [pc, #624]	; (8006854 <setCommand+0x320>)
 80065e2:	0020      	movs	r0, r4
 80065e4:	f00d f9b1 	bl	801394a <strncmp>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d01e      	beq.n	800662a <setCommand+0xf6>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 80065ec:	002a      	movs	r2, r5
 80065ee:	499a      	ldr	r1, [pc, #616]	; (8006858 <setCommand+0x324>)
 80065f0:	0020      	movs	r0, r4
 80065f2:	f00d f9aa 	bl	801394a <strncmp>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d026      	beq.n	8006648 <setCommand+0x114>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80065fa:	002a      	movs	r2, r5
 80065fc:	4997      	ldr	r1, [pc, #604]	; (800685c <setCommand+0x328>)
 80065fe:	0020      	movs	r0, r4
 8006600:	f00d f9a3 	bl	801394a <strncmp>
 8006604:	2800      	cmp	r0, #0
 8006606:	d02e      	beq.n	8006666 <setCommand+0x132>
				result =BOS_ERR_WrongValue;
 8006608:	2568      	movs	r5, #104	; 0x68
 800660a:	e7c1      	b.n	8006590 <setCommand+0x5c>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 800660c:	4b94      	ldr	r3, [pc, #592]	; (8006860 <setCommand+0x32c>)
 800660e:	2260      	movs	r2, #96	; 0x60
 8006610:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006612:	7859      	ldrb	r1, [r3, #1]
 8006614:	0209      	lsls	r1, r1, #8
 8006616:	2360      	movs	r3, #96	; 0x60
 8006618:	4319      	orrs	r1, r3
 800661a:	b209      	sxth	r1, r1
 800661c:	b289      	uxth	r1, r1
 800661e:	308a      	adds	r0, #138	; 0x8a
 8006620:	0040      	lsls	r0, r0, #1
 8006622:	f005 fa49 	bl	800bab8 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006626:	2500      	movs	r5, #0
 8006628:	e35e      	b.n	8006ce8 <setCommand+0x7b4>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 800662a:	4b8d      	ldr	r3, [pc, #564]	; (8006860 <setCommand+0x32c>)
 800662c:	2220      	movs	r2, #32
 800662e:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006630:	7859      	ldrb	r1, [r3, #1]
 8006632:	0209      	lsls	r1, r1, #8
 8006634:	2320      	movs	r3, #32
 8006636:	4319      	orrs	r1, r3
 8006638:	b209      	sxth	r1, r1
 800663a:	b289      	uxth	r1, r1
 800663c:	308a      	adds	r0, #138	; 0x8a
 800663e:	0040      	lsls	r0, r0, #1
 8006640:	f005 fa3a 	bl	800bab8 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006644:	2500      	movs	r5, #0
 8006646:	e34f      	b.n	8006ce8 <setCommand+0x7b4>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 8006648:	4b85      	ldr	r3, [pc, #532]	; (8006860 <setCommand+0x32c>)
 800664a:	2240      	movs	r2, #64	; 0x40
 800664c:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800664e:	7859      	ldrb	r1, [r3, #1]
 8006650:	0209      	lsls	r1, r1, #8
 8006652:	2340      	movs	r3, #64	; 0x40
 8006654:	4319      	orrs	r1, r3
 8006656:	b209      	sxth	r1, r1
 8006658:	b289      	uxth	r1, r1
 800665a:	308a      	adds	r0, #138	; 0x8a
 800665c:	0040      	lsls	r0, r0, #1
 800665e:	f005 fa2b 	bl	800bab8 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006662:	2500      	movs	r5, #0
 8006664:	e340      	b.n	8006ce8 <setCommand+0x7b4>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006666:	4b7e      	ldr	r3, [pc, #504]	; (8006860 <setCommand+0x32c>)
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800666c:	7859      	ldrb	r1, [r3, #1]
 800666e:	0209      	lsls	r1, r1, #8
 8006670:	308a      	adds	r0, #138	; 0x8a
 8006672:	0040      	lsls	r0, r0, #1
 8006674:	f005 fa20 	bl	800bab8 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006678:	2500      	movs	r5, #0
 800667a:	e335      	b.n	8006ce8 <setCommand+0x7b4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800667c:	0032      	movs	r2, r6
 800667e:	4979      	ldr	r1, [pc, #484]	; (8006864 <setCommand+0x330>)
 8006680:	0028      	movs	r0, r5
 8006682:	f00d f962 	bl	801394a <strncmp>
 8006686:	2800      	cmp	r0, #0
 8006688:	d14f      	bne.n	800672a <setCommand+0x1f6>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 800668a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800668c:	002a      	movs	r2, r5
 800668e:	4970      	ldr	r1, [pc, #448]	; (8006850 <setCommand+0x31c>)
 8006690:	0020      	movs	r0, r4
 8006692:	f00d f95a 	bl	801394a <strncmp>
 8006696:	2800      	cmp	r0, #0
 8006698:	d016      	beq.n	80066c8 <setCommand+0x194>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800669a:	002a      	movs	r2, r5
 800669c:	496d      	ldr	r1, [pc, #436]	; (8006854 <setCommand+0x320>)
 800669e:	0020      	movs	r0, r4
 80066a0:	f00d f953 	bl	801394a <strncmp>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d01c      	beq.n	80066e2 <setCommand+0x1ae>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 80066a8:	002a      	movs	r2, r5
 80066aa:	4968      	ldr	r1, [pc, #416]	; (800684c <setCommand+0x318>)
 80066ac:	0020      	movs	r0, r4
 80066ae:	f00d f94c 	bl	801394a <strncmp>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d022      	beq.n	80066fc <setCommand+0x1c8>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80066b6:	002a      	movs	r2, r5
 80066b8:	4968      	ldr	r1, [pc, #416]	; (800685c <setCommand+0x328>)
 80066ba:	0020      	movs	r0, r4
 80066bc:	f00d f945 	bl	801394a <strncmp>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d028      	beq.n	8006716 <setCommand+0x1e2>
				result =BOS_ERR_WrongValue;
 80066c4:	2568      	movs	r5, #104	; 0x68
 80066c6:	e763      	b.n	8006590 <setCommand+0x5c>
				BOSMessaging.trace =TRACE_BOTH;
 80066c8:	4b65      	ldr	r3, [pc, #404]	; (8006860 <setCommand+0x32c>)
 80066ca:	2203      	movs	r2, #3
 80066cc:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	21c0      	movs	r1, #192	; 0xc0
 80066d2:	0089      	lsls	r1, r1, #2
 80066d4:	4319      	orrs	r1, r3
 80066d6:	308a      	adds	r0, #138	; 0x8a
 80066d8:	0040      	lsls	r0, r0, #1
 80066da:	f005 f9ed 	bl	800bab8 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80066de:	2500      	movs	r5, #0
 80066e0:	e302      	b.n	8006ce8 <setCommand+0x7b4>
				BOSMessaging.trace =TRACE_MESSAGE;
 80066e2:	4b5f      	ldr	r3, [pc, #380]	; (8006860 <setCommand+0x32c>)
 80066e4:	2201      	movs	r2, #1
 80066e6:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2180      	movs	r1, #128	; 0x80
 80066ec:	0049      	lsls	r1, r1, #1
 80066ee:	4319      	orrs	r1, r3
 80066f0:	308a      	adds	r0, #138	; 0x8a
 80066f2:	0040      	lsls	r0, r0, #1
 80066f4:	f005 f9e0 	bl	800bab8 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80066f8:	2500      	movs	r5, #0
 80066fa:	e2f5      	b.n	8006ce8 <setCommand+0x7b4>
				BOSMessaging.trace =TRACE_RESPONSE;
 80066fc:	4b58      	ldr	r3, [pc, #352]	; (8006860 <setCommand+0x32c>)
 80066fe:	2202      	movs	r2, #2
 8006700:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2180      	movs	r1, #128	; 0x80
 8006706:	0089      	lsls	r1, r1, #2
 8006708:	4319      	orrs	r1, r3
 800670a:	308a      	adds	r0, #138	; 0x8a
 800670c:	0040      	lsls	r0, r0, #1
 800670e:	f005 f9d3 	bl	800bab8 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006712:	2500      	movs	r5, #0
 8006714:	e2e8      	b.n	8006ce8 <setCommand+0x7b4>
				BOSMessaging.trace =TRACE_NONE;
 8006716:	4b52      	ldr	r3, [pc, #328]	; (8006860 <setCommand+0x32c>)
 8006718:	2200      	movs	r2, #0
 800671a:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800671c:	7819      	ldrb	r1, [r3, #0]
 800671e:	308a      	adds	r0, #138	; 0x8a
 8006720:	0040      	lsls	r0, r0, #1
 8006722:	f005 f9c9 	bl	800bab8 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006726:	2500      	movs	r5, #0
 8006728:	e2de      	b.n	8006ce8 <setCommand+0x7b4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800672a:	0032      	movs	r2, r6
 800672c:	494e      	ldr	r1, [pc, #312]	; (8006868 <setCommand+0x334>)
 800672e:	0028      	movs	r0, r5
 8006730:	f00d f90b 	bl	801394a <strncmp>
 8006734:	2800      	cmp	r0, #0
 8006736:	d01d      	beq.n	8006774 <setCommand+0x240>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006738:	0032      	movs	r2, r6
 800673a:	494c      	ldr	r1, [pc, #304]	; (800686c <setCommand+0x338>)
 800673c:	0028      	movs	r0, r5
 800673e:	f00d f904 	bl	801394a <strncmp>
 8006742:	2800      	cmp	r0, #0
 8006744:	d02d      	beq.n	80067a2 <setCommand+0x26e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006746:	0032      	movs	r2, r6
 8006748:	4949      	ldr	r1, [pc, #292]	; (8006870 <setCommand+0x33c>)
 800674a:	0028      	movs	r0, r5
 800674c:	f00d f8fd 	bl	801394a <strncmp>
 8006750:	2800      	cmp	r0, #0
 8006752:	d036      	beq.n	80067c2 <setCommand+0x28e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006754:	0032      	movs	r2, r6
 8006756:	4947      	ldr	r1, [pc, #284]	; (8006874 <setCommand+0x340>)
 8006758:	0028      	movs	r0, r5
 800675a:	f00d f8f6 	bl	801394a <strncmp>
 800675e:	2800      	cmp	r0, #0
 8006760:	d03f      	beq.n	80067e2 <setCommand+0x2ae>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006762:	0032      	movs	r2, r6
 8006764:	4944      	ldr	r1, [pc, #272]	; (8006878 <setCommand+0x344>)
 8006766:	0028      	movs	r0, r5
 8006768:	f00d f8ef 	bl	801394a <strncmp>
 800676c:	2800      	cmp	r0, #0
 800676e:	d04e      	beq.n	800680e <setCommand+0x2da>
			result =BOS_ERR_WrongParam;
 8006770:	2567      	movs	r5, #103	; 0x67
 8006772:	e70d      	b.n	8006590 <setCommand+0x5c>
			temp2 =atoi((const char* )pcParameterString2);
 8006774:	0020      	movs	r0, r4
 8006776:	f00c fc46 	bl	8013006 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 800677a:	23e1      	movs	r3, #225	; 0xe1
 800677c:	031b      	lsls	r3, r3, #12
 800677e:	4298      	cmp	r0, r3
 8006780:	d901      	bls.n	8006786 <setCommand+0x252>
				result =BOS_ERR_WrongValue;
 8006782:	2568      	movs	r5, #104	; 0x68
 8006784:	e704      	b.n	8006590 <setCommand+0x5c>
				BOS.clibaudrate =temp2;
 8006786:	4c3d      	ldr	r4, [pc, #244]	; (800687c <setCommand+0x348>)
 8006788:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 800678a:	b281      	uxth	r1, r0
 800678c:	208c      	movs	r0, #140	; 0x8c
 800678e:	0040      	lsls	r0, r0, #1
 8006790:	f005 f992 	bl	800bab8 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006794:	8961      	ldrh	r1, [r4, #10]
 8006796:	201a      	movs	r0, #26
 8006798:	30ff      	adds	r0, #255	; 0xff
 800679a:	f005 f98d 	bl	800bab8 <EE_WriteVariable>
				extraMessage =1;
 800679e:	2501      	movs	r5, #1
 80067a0:	e2a2      	b.n	8006ce8 <setCommand+0x7b4>
			temp16 =atoi((const char* )pcParameterString2);
 80067a2:	0020      	movs	r0, r4
 80067a4:	f00c fc2f 	bl	8013006 <atoi>
 80067a8:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80067aa:	2900      	cmp	r1, #0
 80067ac:	d101      	bne.n	80067b2 <setCommand+0x27e>
				result =BOS_ERR_WrongValue;
 80067ae:	2568      	movs	r5, #104	; 0x68
 80067b0:	e6ee      	b.n	8006590 <setCommand+0x5c>
				BOS.buttons.debounce =temp16;
 80067b2:	4b32      	ldr	r3, [pc, #200]	; (800687c <setCommand+0x348>)
 80067b4:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80067b6:	2016      	movs	r0, #22
 80067b8:	30ff      	adds	r0, #255	; 0xff
 80067ba:	f005 f97d 	bl	800bab8 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80067be:	2500      	movs	r5, #0
 80067c0:	e292      	b.n	8006ce8 <setCommand+0x7b4>
			temp16 =atoi((const char* )pcParameterString2);
 80067c2:	0020      	movs	r0, r4
 80067c4:	f00c fc1f 	bl	8013006 <atoi>
 80067c8:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80067ca:	2900      	cmp	r1, #0
 80067cc:	d101      	bne.n	80067d2 <setCommand+0x29e>
				result =BOS_ERR_WrongValue;
 80067ce:	2568      	movs	r5, #104	; 0x68
 80067d0:	e6de      	b.n	8006590 <setCommand+0x5c>
				BOS.buttons.singleClickTime =temp16;
 80067d2:	4b2a      	ldr	r3, [pc, #168]	; (800687c <setCommand+0x348>)
 80067d4:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80067d6:	208b      	movs	r0, #139	; 0x8b
 80067d8:	0040      	lsls	r0, r0, #1
 80067da:	f005 f96d 	bl	800bab8 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80067de:	2500      	movs	r5, #0
 80067e0:	e282      	b.n	8006ce8 <setCommand+0x7b4>
			temp16 =atoi((const char* )pcParameterString2);
 80067e2:	0020      	movs	r0, r4
 80067e4:	f00c fc0f 	bl	8013006 <atoi>
 80067e8:	b283      	uxth	r3, r0
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80067ea:	3b01      	subs	r3, #1
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2bfe      	cmp	r3, #254	; 0xfe
 80067f0:	d901      	bls.n	80067f6 <setCommand+0x2c2>
				result =BOS_ERR_WrongValue;
 80067f2:	2568      	movs	r5, #104	; 0x68
 80067f4:	e6cc      	b.n	8006590 <setCommand+0x5c>
				BOS.buttons.minInterClickTime =temp16;
 80067f6:	b2c0      	uxtb	r0, r0
 80067f8:	4b20      	ldr	r3, [pc, #128]	; (800687c <setCommand+0x348>)
 80067fa:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80067fc:	7959      	ldrb	r1, [r3, #5]
 80067fe:	0209      	lsls	r1, r1, #8
 8006800:	4301      	orrs	r1, r0
 8006802:	2018      	movs	r0, #24
 8006804:	30ff      	adds	r0, #255	; 0xff
 8006806:	f005 f957 	bl	800bab8 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800680a:	2500      	movs	r5, #0
 800680c:	e26c      	b.n	8006ce8 <setCommand+0x7b4>
			temp16 =atoi((const char* )pcParameterString2);
 800680e:	0020      	movs	r0, r4
 8006810:	f00c fbf9 	bl	8013006 <atoi>
 8006814:	b283      	uxth	r3, r0
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006816:	3b01      	subs	r3, #1
 8006818:	b29b      	uxth	r3, r3
 800681a:	2bfe      	cmp	r3, #254	; 0xfe
 800681c:	d901      	bls.n	8006822 <setCommand+0x2ee>
				result =BOS_ERR_WrongValue;
 800681e:	2568      	movs	r5, #104	; 0x68
 8006820:	e6b6      	b.n	8006590 <setCommand+0x5c>
				BOS.buttons.maxInterClickTime =temp16;
 8006822:	b2c0      	uxtb	r0, r0
 8006824:	4b15      	ldr	r3, [pc, #84]	; (800687c <setCommand+0x348>)
 8006826:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006828:	0200      	lsls	r0, r0, #8
 800682a:	7919      	ldrb	r1, [r3, #4]
 800682c:	4301      	orrs	r1, r0
 800682e:	2018      	movs	r0, #24
 8006830:	30ff      	adds	r0, #255	; 0xff
 8006832:	f005 f941 	bl	800bab8 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006836:	2500      	movs	r5, #0
 8006838:	e256      	b.n	8006ce8 <setCommand+0x7b4>
 800683a:	46c0      	nop			; (mov r8, r8)
 800683c:	2000190c 	.word	0x2000190c
 8006840:	0801af48 	.word	0x0801af48
 8006844:	0801b0c8 	.word	0x0801b0c8
 8006848:	0801b0d8 	.word	0x0801b0d8
 800684c:	0801af50 	.word	0x0801af50
 8006850:	0801a040 	.word	0x0801a040
 8006854:	0801b0bc 	.word	0x0801b0bc
 8006858:	0801b0c4 	.word	0x0801b0c4
 800685c:	0801af60 	.word	0x0801af60
 8006860:	20000b44 	.word	0x20000b44
 8006864:	0801af68 	.word	0x0801af68
 8006868:	0801af70 	.word	0x0801af70
 800686c:	0801af7c 	.word	0x0801af7c
 8006870:	0801af88 	.word	0x0801af88
 8006874:	0801af98 	.word	0x0801af98
 8006878:	0801afac 	.word	0x0801afac
 800687c:	20000b4c 	.word	0x20000b4c
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006880:	aa0a      	add	r2, sp, #40	; 0x28
 8006882:	2102      	movs	r1, #2
 8006884:	0030      	movs	r0, r6
 8006886:	f007 fd55 	bl	800e334 <FreeRTOS_CLIGetParameter>
 800688a:	4cdb      	ldr	r4, [pc, #876]	; (8006bf8 <setCommand+0x6c4>)
 800688c:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800688e:	aa09      	add	r2, sp, #36	; 0x24
 8006890:	2103      	movs	r1, #3
 8006892:	0030      	movs	r0, r6
 8006894:	f007 fd4e 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8006898:	64a0      	str	r0, [r4, #72]	; 0x48
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800689a:	aa08      	add	r2, sp, #32
 800689c:	2104      	movs	r1, #4
 800689e:	0030      	movs	r0, r6
 80068a0:	f007 fd48 	bl	800e334 <FreeRTOS_CLIGetParameter>
 80068a4:	64e0      	str	r0, [r4, #76]	; 0x4c
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80068a6:	aa07      	add	r2, sp, #28
 80068a8:	2105      	movs	r1, #5
 80068aa:	0030      	movs	r0, r6
 80068ac:	f007 fd42 	bl	800e334 <FreeRTOS_CLIGetParameter>
 80068b0:	6520      	str	r0, [r4, #80]	; 0x50
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 80068b2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80068b4:	f00c fba7 	bl	8013006 <atoi>
 80068b8:	b2c5      	uxtb	r5, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 80068ba:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80068bc:	f00c fba3 	bl	8013006 <atoi>
 80068c0:	b2c3      	uxtb	r3, r0
 80068c2:	4699      	mov	r9, r3
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80068c4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80068c6:	f00c fb9e 	bl	8013006 <atoi>
 80068ca:	b2c6      	uxtb	r6, r0
		if(pcParameterString5 != NULL){
 80068cc:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80068ce:	2c00      	cmp	r4, #0
 80068d0:	d013      	beq.n	80068fa <setCommand+0x3c6>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 80068d2:	2202      	movs	r2, #2
 80068d4:	49c9      	ldr	r1, [pc, #804]	; (8006bfc <setCommand+0x6c8>)
 80068d6:	0020      	movs	r0, r4
 80068d8:	f00d f837 	bl	801394a <strncmp>
 80068dc:	2800      	cmp	r0, #0
 80068de:	d00a      	beq.n	80068f6 <setCommand+0x3c2>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 80068e0:	2202      	movs	r2, #2
 80068e2:	49c7      	ldr	r1, [pc, #796]	; (8006c00 <setCommand+0x6cc>)
 80068e4:	0020      	movs	r0, r4
 80068e6:	f00d f830 	bl	801394a <strncmp>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d000      	beq.n	80068f0 <setCommand+0x3bc>
 80068ee:	e1f7      	b.n	8006ce0 <setCommand+0x7ac>
				temp84 =RTC_PM;
 80068f0:	2302      	movs	r3, #2
 80068f2:	4698      	mov	r8, r3
 80068f4:	e001      	b.n	80068fa <setCommand+0x3c6>
				temp84 =RTC_AM;
 80068f6:	2301      	movs	r3, #1
 80068f8:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80068fa:	2d17      	cmp	r5, #23
 80068fc:	d900      	bls.n	8006900 <setCommand+0x3cc>
 80068fe:	e214      	b.n	8006d2a <setCommand+0x7f6>
 8006900:	464b      	mov	r3, r9
 8006902:	2b3b      	cmp	r3, #59	; 0x3b
 8006904:	d900      	bls.n	8006908 <setCommand+0x3d4>
 8006906:	e212      	b.n	8006d2e <setCommand+0x7fa>
 8006908:	2e3b      	cmp	r6, #59	; 0x3b
 800690a:	d901      	bls.n	8006910 <setCommand+0x3dc>
				result =BOS_ERR_WrongValue;
 800690c:	2568      	movs	r5, #104	; 0x68
 800690e:	e63f      	b.n	8006590 <setCommand+0x5c>
				GetTimeDate();
 8006910:	f006 ffcc 	bl	800d8ac <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006914:	4cbb      	ldr	r4, [pc, #748]	; (8006c04 <setCommand+0x6d0>)
 8006916:	7d23      	ldrb	r3, [r4, #20]
 8006918:	8b22      	ldrh	r2, [r4, #24]
 800691a:	7d61      	ldrb	r1, [r4, #21]
 800691c:	7da0      	ldrb	r0, [r4, #22]
 800691e:	7b24      	ldrb	r4, [r4, #12]
 8006920:	b264      	sxtb	r4, r4
 8006922:	9404      	str	r4, [sp, #16]
 8006924:	4644      	mov	r4, r8
 8006926:	9403      	str	r4, [sp, #12]
 8006928:	9502      	str	r5, [sp, #8]
 800692a:	464c      	mov	r4, r9
 800692c:	9401      	str	r4, [sp, #4]
 800692e:	9600      	str	r6, [sp, #0]
 8006930:	f006 ff5c 	bl	800d7ec <BOS_CalendarConfig>
 8006934:	0005      	movs	r5, r0
 8006936:	e1d4      	b.n	8006ce2 <setCommand+0x7ae>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006938:	aa0a      	add	r2, sp, #40	; 0x28
 800693a:	2102      	movs	r1, #2
 800693c:	0030      	movs	r0, r6
 800693e:	f007 fcf9 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8006942:	4dad      	ldr	r5, [pc, #692]	; (8006bf8 <setCommand+0x6c4>)
 8006944:	6468      	str	r0, [r5, #68]	; 0x44
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006946:	aa09      	add	r2, sp, #36	; 0x24
 8006948:	2103      	movs	r1, #3
 800694a:	0030      	movs	r0, r6
 800694c:	f007 fcf2 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8006950:	64a8      	str	r0, [r5, #72]	; 0x48
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006952:	aa08      	add	r2, sp, #32
 8006954:	2104      	movs	r1, #4
 8006956:	0030      	movs	r0, r6
 8006958:	f007 fcec 	bl	800e334 <FreeRTOS_CLIGetParameter>
 800695c:	64e8      	str	r0, [r5, #76]	; 0x4c
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800695e:	aa07      	add	r2, sp, #28
 8006960:	2105      	movs	r1, #5
 8006962:	0030      	movs	r0, r6
 8006964:	f007 fce6 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8006968:	6528      	str	r0, [r5, #80]	; 0x50
		temp83 =atoi((const char* )pcParameterString4);		// day
 800696a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800696c:	f00c fb4b 	bl	8013006 <atoi>
 8006970:	b2c3      	uxtb	r3, r0
 8006972:	4698      	mov	r8, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006974:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8006976:	f00c fb46 	bl	8013006 <atoi>
 800697a:	b283      	uxth	r3, r0
 800697c:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 800697e:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 8006980:	2206      	movs	r2, #6
 8006982:	49a1      	ldr	r1, [pc, #644]	; (8006c08 <setCommand+0x6d4>)
 8006984:	0028      	movs	r0, r5
 8006986:	f00c ffe0 	bl	801394a <strncmp>
 800698a:	2800      	cmp	r0, #0
 800698c:	d032      	beq.n	80069f4 <setCommand+0x4c0>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 800698e:	2207      	movs	r2, #7
 8006990:	499e      	ldr	r1, [pc, #632]	; (8006c0c <setCommand+0x6d8>)
 8006992:	0028      	movs	r0, r5
 8006994:	f00c ffd9 	bl	801394a <strncmp>
 8006998:	2800      	cmp	r0, #0
 800699a:	d100      	bne.n	800699e <setCommand+0x46a>
 800699c:	e0f0      	b.n	8006b80 <setCommand+0x64c>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 800699e:	2209      	movs	r2, #9
 80069a0:	499b      	ldr	r1, [pc, #620]	; (8006c10 <setCommand+0x6dc>)
 80069a2:	0028      	movs	r0, r5
 80069a4:	f00c ffd1 	bl	801394a <strncmp>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d100      	bne.n	80069ae <setCommand+0x47a>
 80069ac:	e0eb      	b.n	8006b86 <setCommand+0x652>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 80069ae:	2208      	movs	r2, #8
 80069b0:	4998      	ldr	r1, [pc, #608]	; (8006c14 <setCommand+0x6e0>)
 80069b2:	0028      	movs	r0, r5
 80069b4:	f00c ffc9 	bl	801394a <strncmp>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d100      	bne.n	80069be <setCommand+0x48a>
 80069bc:	e0e6      	b.n	8006b8c <setCommand+0x658>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 80069be:	2206      	movs	r2, #6
 80069c0:	4995      	ldr	r1, [pc, #596]	; (8006c18 <setCommand+0x6e4>)
 80069c2:	0028      	movs	r0, r5
 80069c4:	f00c ffc1 	bl	801394a <strncmp>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d100      	bne.n	80069ce <setCommand+0x49a>
 80069cc:	e0e1      	b.n	8006b92 <setCommand+0x65e>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 80069ce:	2208      	movs	r2, #8
 80069d0:	4992      	ldr	r1, [pc, #584]	; (8006c1c <setCommand+0x6e8>)
 80069d2:	0028      	movs	r0, r5
 80069d4:	f00c ffb9 	bl	801394a <strncmp>
 80069d8:	2800      	cmp	r0, #0
 80069da:	d100      	bne.n	80069de <setCommand+0x4aa>
 80069dc:	e0dc      	b.n	8006b98 <setCommand+0x664>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 80069de:	2206      	movs	r2, #6
 80069e0:	498f      	ldr	r1, [pc, #572]	; (8006c20 <setCommand+0x6ec>)
 80069e2:	0028      	movs	r0, r5
 80069e4:	f00c ffb1 	bl	801394a <strncmp>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d000      	beq.n	80069ee <setCommand+0x4ba>
 80069ec:	e0d7      	b.n	8006b9e <setCommand+0x66a>
			temp81 =SUNDAY;
 80069ee:	2407      	movs	r4, #7
	BOS_Status result =BOS_OK;
 80069f0:	2500      	movs	r5, #0
 80069f2:	e001      	b.n	80069f8 <setCommand+0x4c4>
			temp81 =MONDAY;
 80069f4:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80069f6:	2500      	movs	r5, #0
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80069f8:	4b7f      	ldr	r3, [pc, #508]	; (8006bf8 <setCommand+0x6c4>)
 80069fa:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 80069fc:	2207      	movs	r2, #7
 80069fe:	4989      	ldr	r1, [pc, #548]	; (8006c24 <setCommand+0x6f0>)
 8006a00:	0030      	movs	r0, r6
 8006a02:	f00c ffa2 	bl	801394a <strncmp>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d100      	bne.n	8006a0c <setCommand+0x4d8>
 8006a0a:	e0ca      	b.n	8006ba2 <setCommand+0x66e>
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	4986      	ldr	r1, [pc, #536]	; (8006c28 <setCommand+0x6f4>)
 8006a10:	0030      	movs	r0, r6
 8006a12:	f00c ff9a 	bl	801394a <strncmp>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d100      	bne.n	8006a1c <setCommand+0x4e8>
 8006a1a:	e0d6      	b.n	8006bca <setCommand+0x696>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006a1c:	2208      	movs	r2, #8
 8006a1e:	4983      	ldr	r1, [pc, #524]	; (8006c2c <setCommand+0x6f8>)
 8006a20:	0030      	movs	r0, r6
 8006a22:	f00c ff92 	bl	801394a <strncmp>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d100      	bne.n	8006a2c <setCommand+0x4f8>
 8006a2a:	e0d0      	b.n	8006bce <setCommand+0x69a>
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	4980      	ldr	r1, [pc, #512]	; (8006c30 <setCommand+0x6fc>)
 8006a30:	0030      	movs	r0, r6
 8006a32:	f00c ff8a 	bl	801394a <strncmp>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d100      	bne.n	8006a3c <setCommand+0x508>
 8006a3a:	e0ca      	b.n	8006bd2 <setCommand+0x69e>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006a3c:	2205      	movs	r2, #5
 8006a3e:	497d      	ldr	r1, [pc, #500]	; (8006c34 <setCommand+0x700>)
 8006a40:	0030      	movs	r0, r6
 8006a42:	f00c ff82 	bl	801394a <strncmp>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	d100      	bne.n	8006a4c <setCommand+0x518>
 8006a4a:	e0c4      	b.n	8006bd6 <setCommand+0x6a2>
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	497a      	ldr	r1, [pc, #488]	; (8006c38 <setCommand+0x704>)
 8006a50:	0030      	movs	r0, r6
 8006a52:	f00c ff7a 	bl	801394a <strncmp>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d100      	bne.n	8006a5c <setCommand+0x528>
 8006a5a:	e0be      	b.n	8006bda <setCommand+0x6a6>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006a5c:	2205      	movs	r2, #5
 8006a5e:	4977      	ldr	r1, [pc, #476]	; (8006c3c <setCommand+0x708>)
 8006a60:	0030      	movs	r0, r6
 8006a62:	f00c ff72 	bl	801394a <strncmp>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d100      	bne.n	8006a6c <setCommand+0x538>
 8006a6a:	e0b8      	b.n	8006bde <setCommand+0x6aa>
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	4974      	ldr	r1, [pc, #464]	; (8006c40 <setCommand+0x70c>)
 8006a70:	0030      	movs	r0, r6
 8006a72:	f00c ff6a 	bl	801394a <strncmp>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	d100      	bne.n	8006a7c <setCommand+0x548>
 8006a7a:	e0b2      	b.n	8006be2 <setCommand+0x6ae>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006a7c:	2203      	movs	r2, #3
 8006a7e:	4971      	ldr	r1, [pc, #452]	; (8006c44 <setCommand+0x710>)
 8006a80:	0030      	movs	r0, r6
 8006a82:	f00c ff62 	bl	801394a <strncmp>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d100      	bne.n	8006a8c <setCommand+0x558>
 8006a8a:	e0ac      	b.n	8006be6 <setCommand+0x6b2>
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	496e      	ldr	r1, [pc, #440]	; (8006c48 <setCommand+0x714>)
 8006a90:	0030      	movs	r0, r6
 8006a92:	f00c ff5a 	bl	801394a <strncmp>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d100      	bne.n	8006a9c <setCommand+0x568>
 8006a9a:	e0a6      	b.n	8006bea <setCommand+0x6b6>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006a9c:	2204      	movs	r2, #4
 8006a9e:	496b      	ldr	r1, [pc, #428]	; (8006c4c <setCommand+0x718>)
 8006aa0:	0030      	movs	r0, r6
 8006aa2:	f00c ff52 	bl	801394a <strncmp>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d100      	bne.n	8006aac <setCommand+0x578>
 8006aaa:	e0a0      	b.n	8006bee <setCommand+0x6ba>
 8006aac:	2202      	movs	r2, #2
 8006aae:	4968      	ldr	r1, [pc, #416]	; (8006c50 <setCommand+0x71c>)
 8006ab0:	0030      	movs	r0, r6
 8006ab2:	f00c ff4a 	bl	801394a <strncmp>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d100      	bne.n	8006abc <setCommand+0x588>
 8006aba:	e09a      	b.n	8006bf2 <setCommand+0x6be>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006abc:	2204      	movs	r2, #4
 8006abe:	4965      	ldr	r1, [pc, #404]	; (8006c54 <setCommand+0x720>)
 8006ac0:	0030      	movs	r0, r6
 8006ac2:	f00c ff42 	bl	801394a <strncmp>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d100      	bne.n	8006acc <setCommand+0x598>
 8006aca:	e0dd      	b.n	8006c88 <setCommand+0x754>
 8006acc:	2202      	movs	r2, #2
 8006ace:	4962      	ldr	r1, [pc, #392]	; (8006c58 <setCommand+0x724>)
 8006ad0:	0030      	movs	r0, r6
 8006ad2:	f00c ff3a 	bl	801394a <strncmp>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d100      	bne.n	8006adc <setCommand+0x5a8>
 8006ada:	e0d7      	b.n	8006c8c <setCommand+0x758>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006adc:	2205      	movs	r2, #5
 8006ade:	495f      	ldr	r1, [pc, #380]	; (8006c5c <setCommand+0x728>)
 8006ae0:	0030      	movs	r0, r6
 8006ae2:	f00c ff32 	bl	801394a <strncmp>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d100      	bne.n	8006aec <setCommand+0x5b8>
 8006aea:	e0d1      	b.n	8006c90 <setCommand+0x75c>
 8006aec:	2202      	movs	r2, #2
 8006aee:	495c      	ldr	r1, [pc, #368]	; (8006c60 <setCommand+0x72c>)
 8006af0:	0030      	movs	r0, r6
 8006af2:	f00c ff2a 	bl	801394a <strncmp>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d100      	bne.n	8006afc <setCommand+0x5c8>
 8006afa:	e0cb      	b.n	8006c94 <setCommand+0x760>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006afc:	2209      	movs	r2, #9
 8006afe:	4959      	ldr	r1, [pc, #356]	; (8006c64 <setCommand+0x730>)
 8006b00:	0030      	movs	r0, r6
 8006b02:	f00c ff22 	bl	801394a <strncmp>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d100      	bne.n	8006b0c <setCommand+0x5d8>
 8006b0a:	e0c5      	b.n	8006c98 <setCommand+0x764>
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	4956      	ldr	r1, [pc, #344]	; (8006c68 <setCommand+0x734>)
 8006b10:	0030      	movs	r0, r6
 8006b12:	f00c ff1a 	bl	801394a <strncmp>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d100      	bne.n	8006b1c <setCommand+0x5e8>
 8006b1a:	e0bf      	b.n	8006c9c <setCommand+0x768>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006b1c:	2207      	movs	r2, #7
 8006b1e:	4953      	ldr	r1, [pc, #332]	; (8006c6c <setCommand+0x738>)
 8006b20:	0030      	movs	r0, r6
 8006b22:	f00c ff12 	bl	801394a <strncmp>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d100      	bne.n	8006b2c <setCommand+0x5f8>
 8006b2a:	e0b9      	b.n	8006ca0 <setCommand+0x76c>
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	4950      	ldr	r1, [pc, #320]	; (8006c70 <setCommand+0x73c>)
 8006b30:	0030      	movs	r0, r6
 8006b32:	f00c ff0a 	bl	801394a <strncmp>
 8006b36:	2800      	cmp	r0, #0
 8006b38:	d100      	bne.n	8006b3c <setCommand+0x608>
 8006b3a:	e0b3      	b.n	8006ca4 <setCommand+0x770>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006b3c:	2208      	movs	r2, #8
 8006b3e:	494d      	ldr	r1, [pc, #308]	; (8006c74 <setCommand+0x740>)
 8006b40:	0030      	movs	r0, r6
 8006b42:	f00c ff02 	bl	801394a <strncmp>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d100      	bne.n	8006b4c <setCommand+0x618>
 8006b4a:	e0ad      	b.n	8006ca8 <setCommand+0x774>
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	494a      	ldr	r1, [pc, #296]	; (8006c78 <setCommand+0x744>)
 8006b50:	0030      	movs	r0, r6
 8006b52:	f00c fefa 	bl	801394a <strncmp>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d100      	bne.n	8006b5c <setCommand+0x628>
 8006b5a:	e0a7      	b.n	8006cac <setCommand+0x778>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006b5c:	2208      	movs	r2, #8
 8006b5e:	4947      	ldr	r1, [pc, #284]	; (8006c7c <setCommand+0x748>)
 8006b60:	0030      	movs	r0, r6
 8006b62:	f00c fef2 	bl	801394a <strncmp>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d100      	bne.n	8006b6c <setCommand+0x638>
 8006b6a:	e0a1      	b.n	8006cb0 <setCommand+0x77c>
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	4944      	ldr	r1, [pc, #272]	; (8006c80 <setCommand+0x74c>)
 8006b70:	0030      	movs	r0, r6
 8006b72:	f00c feea 	bl	801394a <strncmp>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d000      	beq.n	8006b7c <setCommand+0x648>
 8006b7a:	e0d4      	b.n	8006d26 <setCommand+0x7f2>
			temp82 =DECEMBER;
 8006b7c:	260c      	movs	r6, #12
 8006b7e:	e011      	b.n	8006ba4 <setCommand+0x670>
			temp81 =TUESDAY;
 8006b80:	2402      	movs	r4, #2
	BOS_Status result =BOS_OK;
 8006b82:	2500      	movs	r5, #0
 8006b84:	e738      	b.n	80069f8 <setCommand+0x4c4>
			temp81 =WEDNESDAY;
 8006b86:	2403      	movs	r4, #3
	BOS_Status result =BOS_OK;
 8006b88:	2500      	movs	r5, #0
 8006b8a:	e735      	b.n	80069f8 <setCommand+0x4c4>
			temp81 =THURSDAY;
 8006b8c:	2404      	movs	r4, #4
	BOS_Status result =BOS_OK;
 8006b8e:	2500      	movs	r5, #0
 8006b90:	e732      	b.n	80069f8 <setCommand+0x4c4>
			temp81 =FRIDAY;
 8006b92:	2405      	movs	r4, #5
	BOS_Status result =BOS_OK;
 8006b94:	2500      	movs	r5, #0
 8006b96:	e72f      	b.n	80069f8 <setCommand+0x4c4>
			temp81 =SATURDAY;
 8006b98:	2406      	movs	r4, #6
	BOS_Status result =BOS_OK;
 8006b9a:	2500      	movs	r5, #0
 8006b9c:	e72c      	b.n	80069f8 <setCommand+0x4c4>
			result =BOS_ERR_WrongValue;
 8006b9e:	2568      	movs	r5, #104	; 0x68
 8006ba0:	e72a      	b.n	80069f8 <setCommand+0x4c4>
			temp82 =JANUARY;
 8006ba2:	2601      	movs	r6, #1
		if(result == BOS_OK){
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	d000      	beq.n	8006baa <setCommand+0x676>
 8006ba8:	e09b      	b.n	8006ce2 <setCommand+0x7ae>
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006baa:	4643      	mov	r3, r8
 8006bac:	3b01      	subs	r3, #1
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b1e      	cmp	r3, #30
 8006bb2:	d900      	bls.n	8006bb6 <setCommand+0x682>
 8006bb4:	e0bd      	b.n	8006d32 <setCommand+0x7fe>
 8006bb6:	23fa      	movs	r3, #250	; 0xfa
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	4599      	cmp	r9, r3
 8006bbc:	d200      	bcs.n	8006bc0 <setCommand+0x68c>
 8006bbe:	e0ba      	b.n	8006d36 <setCommand+0x802>
 8006bc0:	4b30      	ldr	r3, [pc, #192]	; (8006c84 <setCommand+0x750>)
 8006bc2:	4599      	cmp	r9, r3
 8006bc4:	d976      	bls.n	8006cb4 <setCommand+0x780>
				result =BOS_ERR_WrongValue;
 8006bc6:	2568      	movs	r5, #104	; 0x68
 8006bc8:	e4e2      	b.n	8006590 <setCommand+0x5c>
			temp82 =JANUARY;
 8006bca:	2601      	movs	r6, #1
 8006bcc:	e7ea      	b.n	8006ba4 <setCommand+0x670>
			temp82 =FEBRUARY;
 8006bce:	2602      	movs	r6, #2
 8006bd0:	e7e8      	b.n	8006ba4 <setCommand+0x670>
 8006bd2:	2602      	movs	r6, #2
 8006bd4:	e7e6      	b.n	8006ba4 <setCommand+0x670>
			temp82 =MARCH;
 8006bd6:	2603      	movs	r6, #3
 8006bd8:	e7e4      	b.n	8006ba4 <setCommand+0x670>
 8006bda:	2603      	movs	r6, #3
 8006bdc:	e7e2      	b.n	8006ba4 <setCommand+0x670>
			temp82 =APRIL;
 8006bde:	2604      	movs	r6, #4
 8006be0:	e7e0      	b.n	8006ba4 <setCommand+0x670>
 8006be2:	2604      	movs	r6, #4
 8006be4:	e7de      	b.n	8006ba4 <setCommand+0x670>
			temp82 =MAY;
 8006be6:	2605      	movs	r6, #5
 8006be8:	e7dc      	b.n	8006ba4 <setCommand+0x670>
 8006bea:	2605      	movs	r6, #5
 8006bec:	e7da      	b.n	8006ba4 <setCommand+0x670>
			temp82 =JUNE;
 8006bee:	2606      	movs	r6, #6
 8006bf0:	e7d8      	b.n	8006ba4 <setCommand+0x670>
 8006bf2:	2606      	movs	r6, #6
 8006bf4:	e7d6      	b.n	8006ba4 <setCommand+0x670>
 8006bf6:	46c0      	nop			; (mov r8, r8)
 8006bf8:	2000190c 	.word	0x2000190c
 8006bfc:	0801b0d0 	.word	0x0801b0d0
 8006c00:	0801b0d4 	.word	0x0801b0d4
 8006c04:	20000b4c 	.word	0x20000b4c
 8006c08:	0801b0e0 	.word	0x0801b0e0
 8006c0c:	0801b0e8 	.word	0x0801b0e8
 8006c10:	0801b0f0 	.word	0x0801b0f0
 8006c14:	0801b0fc 	.word	0x0801b0fc
 8006c18:	0801b108 	.word	0x0801b108
 8006c1c:	0801b110 	.word	0x0801b110
 8006c20:	0801b11c 	.word	0x0801b11c
 8006c24:	0801b124 	.word	0x0801b124
 8006c28:	0801b12c 	.word	0x0801b12c
 8006c2c:	0801b130 	.word	0x0801b130
 8006c30:	0801b13c 	.word	0x0801b13c
 8006c34:	0801b140 	.word	0x0801b140
 8006c38:	0801b148 	.word	0x0801b148
 8006c3c:	0801b14c 	.word	0x0801b14c
 8006c40:	0801b154 	.word	0x0801b154
 8006c44:	0801b158 	.word	0x0801b158
 8006c48:	0801b15c 	.word	0x0801b15c
 8006c4c:	0801b160 	.word	0x0801b160
 8006c50:	0801b168 	.word	0x0801b168
 8006c54:	0801b16c 	.word	0x0801b16c
 8006c58:	0801b174 	.word	0x0801b174
 8006c5c:	0801b178 	.word	0x0801b178
 8006c60:	0801b180 	.word	0x0801b180
 8006c64:	0801b184 	.word	0x0801b184
 8006c68:	0801b190 	.word	0x0801b190
 8006c6c:	0801b194 	.word	0x0801b194
 8006c70:	0801b19c 	.word	0x0801b19c
 8006c74:	0801b1a0 	.word	0x0801b1a0
 8006c78:	0801b1ac 	.word	0x0801b1ac
 8006c7c:	0801b1b0 	.word	0x0801b1b0
 8006c80:	0801b1bc 	.word	0x0801b1bc
 8006c84:	00000834 	.word	0x00000834
			temp82 =JULY;
 8006c88:	2607      	movs	r6, #7
 8006c8a:	e78b      	b.n	8006ba4 <setCommand+0x670>
 8006c8c:	2607      	movs	r6, #7
 8006c8e:	e789      	b.n	8006ba4 <setCommand+0x670>
			temp82 =AUGUST;
 8006c90:	2608      	movs	r6, #8
 8006c92:	e787      	b.n	8006ba4 <setCommand+0x670>
 8006c94:	2608      	movs	r6, #8
 8006c96:	e785      	b.n	8006ba4 <setCommand+0x670>
			temp82 =SEPTEMBER;
 8006c98:	2609      	movs	r6, #9
 8006c9a:	e783      	b.n	8006ba4 <setCommand+0x670>
 8006c9c:	2609      	movs	r6, #9
 8006c9e:	e781      	b.n	8006ba4 <setCommand+0x670>
			temp82 =OCTOBER;
 8006ca0:	260a      	movs	r6, #10
 8006ca2:	e77f      	b.n	8006ba4 <setCommand+0x670>
 8006ca4:	260a      	movs	r6, #10
 8006ca6:	e77d      	b.n	8006ba4 <setCommand+0x670>
			temp82 =NOVEMBER;
 8006ca8:	260b      	movs	r6, #11
 8006caa:	e77b      	b.n	8006ba4 <setCommand+0x670>
 8006cac:	260b      	movs	r6, #11
 8006cae:	e779      	b.n	8006ba4 <setCommand+0x670>
			temp82 =DECEMBER;
 8006cb0:	260c      	movs	r6, #12
 8006cb2:	e777      	b.n	8006ba4 <setCommand+0x670>
				GetTimeDate();
 8006cb4:	f006 fdfa 	bl	800d8ac <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006cb8:	4b26      	ldr	r3, [pc, #152]	; (8006d54 <setCommand+0x820>)
 8006cba:	220c      	movs	r2, #12
 8006cbc:	569a      	ldrsb	r2, [r3, r2]
 8006cbe:	9204      	str	r2, [sp, #16]
 8006cc0:	7cda      	ldrb	r2, [r3, #19]
 8006cc2:	9203      	str	r2, [sp, #12]
 8006cc4:	7c9a      	ldrb	r2, [r3, #18]
 8006cc6:	9202      	str	r2, [sp, #8]
 8006cc8:	7c5a      	ldrb	r2, [r3, #17]
 8006cca:	9201      	str	r2, [sp, #4]
 8006ccc:	7c1b      	ldrb	r3, [r3, #16]
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	0023      	movs	r3, r4
 8006cd2:	464a      	mov	r2, r9
 8006cd4:	4641      	mov	r1, r8
 8006cd6:	0030      	movs	r0, r6
 8006cd8:	f006 fd88 	bl	800d7ec <BOS_CalendarConfig>
 8006cdc:	0005      	movs	r5, r0
 8006cde:	e000      	b.n	8006ce2 <setCommand+0x7ae>
				result =BOS_ERR_WrongValue;
 8006ce0:	2568      	movs	r5, #104	; 0x68
	if(result == BOS_OK){
 8006ce2:	2d00      	cmp	r5, #0
 8006ce4:	d000      	beq.n	8006ce8 <setCommand+0x7b4>
 8006ce6:	e453      	b.n	8006590 <setCommand+0x5c>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006ce8:	491b      	ldr	r1, [pc, #108]	; (8006d58 <setCommand+0x824>)
 8006cea:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006cec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cee:	18d3      	adds	r3, r2, r3
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	7018      	strb	r0, [r3, #0]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006cf4:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8006cf6:	4919      	ldr	r1, [pc, #100]	; (8006d5c <setCommand+0x828>)
 8006cf8:	0038      	movs	r0, r7
 8006cfa:	f00c fde3 	bl	80138c4 <sprintf>
		if(extraMessage == 1){
 8006cfe:	2d01      	cmp	r5, #1
 8006d00:	d000      	beq.n	8006d04 <setCommand+0x7d0>
 8006d02:	e44b      	b.n	800659c <setCommand+0x68>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006d04:	0038      	movs	r0, r7
 8006d06:	f7f9 fa07 	bl	8000118 <strlen>
 8006d0a:	1838      	adds	r0, r7, r0
 8006d0c:	2230      	movs	r2, #48	; 0x30
 8006d0e:	4914      	ldr	r1, [pc, #80]	; (8006d60 <setCommand+0x82c>)
 8006d10:	f00c fbde 	bl	80134d0 <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006d14:	0038      	movs	r0, r7
 8006d16:	f7f9 f9ff 	bl	8000118 <strlen>
 8006d1a:	1838      	adds	r0, r7, r0
 8006d1c:	22b2      	movs	r2, #178	; 0xb2
 8006d1e:	4911      	ldr	r1, [pc, #68]	; (8006d64 <setCommand+0x830>)
 8006d20:	f00c fbd6 	bl	80134d0 <memcpy>
 8006d24:	e43a      	b.n	800659c <setCommand+0x68>
			result =BOS_ERR_WrongValue;
 8006d26:	2568      	movs	r5, #104	; 0x68
 8006d28:	e7db      	b.n	8006ce2 <setCommand+0x7ae>
				result =BOS_ERR_WrongValue;
 8006d2a:	2568      	movs	r5, #104	; 0x68
 8006d2c:	e430      	b.n	8006590 <setCommand+0x5c>
 8006d2e:	2568      	movs	r5, #104	; 0x68
 8006d30:	e42e      	b.n	8006590 <setCommand+0x5c>
				result =BOS_ERR_WrongValue;
 8006d32:	2568      	movs	r5, #104	; 0x68
 8006d34:	e42c      	b.n	8006590 <setCommand+0x5c>
 8006d36:	2568      	movs	r5, #104	; 0x68
 8006d38:	e42a      	b.n	8006590 <setCommand+0x5c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006d3a:	2213      	movs	r2, #19
 8006d3c:	490a      	ldr	r1, [pc, #40]	; (8006d68 <setCommand+0x834>)
 8006d3e:	0038      	movs	r0, r7
 8006d40:	f00c fbc6 	bl	80134d0 <memcpy>
 8006d44:	e42a      	b.n	800659c <setCommand+0x68>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006d46:	220f      	movs	r2, #15
 8006d48:	4908      	ldr	r1, [pc, #32]	; (8006d6c <setCommand+0x838>)
 8006d4a:	0038      	movs	r0, r7
 8006d4c:	f00c fbc0 	bl	80134d0 <memcpy>
 8006d50:	e424      	b.n	800659c <setCommand+0x68>
 8006d52:	46c0      	nop			; (mov r8, r8)
 8006d54:	20000b4c 	.word	0x20000b4c
 8006d58:	2000190c 	.word	0x2000190c
 8006d5c:	0801b1c0 	.word	0x0801b1c0
 8006d60:	0801b1d4 	.word	0x0801b1d4
 8006d64:	0801b204 	.word	0x0801b204
 8006d68:	0801b000 	.word	0x0801b000
 8006d6c:	0801b06c 	.word	0x0801b06c

08006d70 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d70:	b530      	push	{r4, r5, lr}
 8006d72:	b083      	sub	sp, #12
 8006d74:	0004      	movs	r4, r0
 8006d76:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d7c:	aa01      	add	r2, sp, #4
 8006d7e:	2101      	movs	r1, #1
 8006d80:	f007 fad8 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8006d84:	4b0d      	ldr	r3, [pc, #52]	; (8006dbc <removebuttonCommand+0x4c>)
 8006d86:	6558      	str	r0, [r3, #84]	; 0x54
	if(pcParameterString1[0] == 'p'){
 8006d88:	2300      	movs	r3, #0
 8006d8a:	56c3      	ldrsb	r3, [r0, r3]
 8006d8c:	2b70      	cmp	r3, #112	; 0x70
 8006d8e:	d008      	beq.n	8006da2 <removebuttonCommand+0x32>
	uint8_t port =0;
 8006d90:	2500      	movs	r5, #0
	result =RemovePortButton(port);
 8006d92:	0028      	movs	r0, r5
 8006d94:	f005 fb00 	bl	800c398 <RemovePortButton>
	if(result == BOS_OK){
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d007      	beq.n	8006dac <removebuttonCommand+0x3c>
}
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	b003      	add	sp, #12
 8006da0:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006da2:	3001      	adds	r0, #1
 8006da4:	f00c f935 	bl	8013012 <atol>
 8006da8:	b2c5      	uxtb	r5, r0
 8006daa:	e7f2      	b.n	8006d92 <removebuttonCommand+0x22>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006dac:	002b      	movs	r3, r5
 8006dae:	002a      	movs	r2, r5
 8006db0:	4903      	ldr	r1, [pc, #12]	; (8006dc0 <removebuttonCommand+0x50>)
 8006db2:	0020      	movs	r0, r4
 8006db4:	f00c fd86 	bl	80138c4 <sprintf>
 8006db8:	e7f0      	b.n	8006d9c <removebuttonCommand+0x2c>
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	2000190c 	.word	0x2000190c
 8006dc0:	0801b2b8 	.word	0x0801b2b8

08006dc4 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	0005      	movs	r5, r0
 8006dca:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	9303      	str	r3, [sp, #12]
 8006dd0:	9302      	str	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006dd2:	aa03      	add	r2, sp, #12
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	0030      	movs	r0, r6
 8006dd8:	f007 faac 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8006ddc:	0004      	movs	r4, r0
 8006dde:	4b27      	ldr	r3, [pc, #156]	; (8006e7c <addbuttonCommand+0xb8>)
 8006de0:	6598      	str	r0, [r3, #88]	; 0x58
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006de2:	9f03      	ldr	r7, [sp, #12]
 8006de4:	003a      	movs	r2, r7
 8006de6:	4926      	ldr	r1, [pc, #152]	; (8006e80 <addbuttonCommand+0xbc>)
 8006de8:	f00c fdaf 	bl	801394a <strncmp>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d016      	beq.n	8006e1e <addbuttonCommand+0x5a>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006df0:	003a      	movs	r2, r7
 8006df2:	4924      	ldr	r1, [pc, #144]	; (8006e84 <addbuttonCommand+0xc0>)
 8006df4:	0020      	movs	r0, r4
 8006df6:	f00c fda8 	bl	801394a <strncmp>
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d025      	beq.n	8006e4a <addbuttonCommand+0x86>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006dfe:	003a      	movs	r2, r7
 8006e00:	4921      	ldr	r1, [pc, #132]	; (8006e88 <addbuttonCommand+0xc4>)
 8006e02:	0020      	movs	r0, r4
 8006e04:	f00c fda1 	bl	801394a <strncmp>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	d020      	beq.n	8006e4e <addbuttonCommand+0x8a>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006e0c:	003a      	movs	r2, r7
 8006e0e:	491f      	ldr	r1, [pc, #124]	; (8006e8c <addbuttonCommand+0xc8>)
 8006e10:	0020      	movs	r0, r4
 8006e12:	f00c fd9a 	bl	801394a <strncmp>
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d01b      	beq.n	8006e52 <addbuttonCommand+0x8e>
	uint8_t port =0, type =0;
 8006e1a:	2700      	movs	r7, #0
 8006e1c:	e000      	b.n	8006e20 <addbuttonCommand+0x5c>
		type =MOMENTARY_NO;
 8006e1e:	2701      	movs	r7, #1
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006e20:	aa02      	add	r2, sp, #8
 8006e22:	2102      	movs	r1, #2
 8006e24:	0030      	movs	r0, r6
 8006e26:	f007 fa85 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8006e2a:	4b14      	ldr	r3, [pc, #80]	; (8006e7c <addbuttonCommand+0xb8>)
 8006e2c:	65d8      	str	r0, [r3, #92]	; 0x5c
	if(pcParameterString2[0] == 'p'){
 8006e2e:	2300      	movs	r3, #0
 8006e30:	56c3      	ldrsb	r3, [r0, r3]
 8006e32:	2b70      	cmp	r3, #112	; 0x70
 8006e34:	d00f      	beq.n	8006e56 <addbuttonCommand+0x92>
	uint8_t port =0, type =0;
 8006e36:	2400      	movs	r4, #0
	result =AddPortButton(type,port);
 8006e38:	0021      	movs	r1, r4
 8006e3a:	0038      	movs	r0, r7
 8006e3c:	f005 fa1a 	bl	800c274 <AddPortButton>
	if(result == BOS_OK){
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d00d      	beq.n	8006e60 <addbuttonCommand+0x9c>
}
 8006e44:	2000      	movs	r0, #0
 8006e46:	b005      	add	sp, #20
 8006e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		type =MOMENTARY_NC;
 8006e4a:	2702      	movs	r7, #2
 8006e4c:	e7e8      	b.n	8006e20 <addbuttonCommand+0x5c>
		type =ONOFF_NO;
 8006e4e:	2703      	movs	r7, #3
 8006e50:	e7e6      	b.n	8006e20 <addbuttonCommand+0x5c>
		type =ONOFF_NC;
 8006e52:	2704      	movs	r7, #4
 8006e54:	e7e4      	b.n	8006e20 <addbuttonCommand+0x5c>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006e56:	3001      	adds	r0, #1
 8006e58:	f00c f8db 	bl	8013012 <atol>
 8006e5c:	b2c4      	uxtb	r4, r0
 8006e5e:	e7eb      	b.n	8006e38 <addbuttonCommand+0x74>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006e60:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <addbuttonCommand+0xb8>)
 8006e62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e64:	9b03      	ldr	r3, [sp, #12]
 8006e66:	18d3      	adds	r3, r2, r3
 8006e68:	2100      	movs	r1, #0
 8006e6a:	7019      	strb	r1, [r3, #0]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006e6c:	9400      	str	r4, [sp, #0]
 8006e6e:	0023      	movs	r3, r4
 8006e70:	4907      	ldr	r1, [pc, #28]	; (8006e90 <addbuttonCommand+0xcc>)
 8006e72:	0028      	movs	r0, r5
 8006e74:	f00c fd26 	bl	80138c4 <sprintf>
 8006e78:	e7e4      	b.n	8006e44 <addbuttonCommand+0x80>
 8006e7a:	46c0      	nop			; (mov r8, r8)
 8006e7c:	2000190c 	.word	0x2000190c
 8006e80:	0801b2e0 	.word	0x0801b2e0
 8006e84:	0801b2f0 	.word	0x0801b2f0
 8006e88:	0801b300 	.word	0x0801b300
 8006e8c:	0801b30c 	.word	0x0801b30c
 8006e90:	0801b318 	.word	0x0801b318

08006e94 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e96:	46de      	mov	lr, fp
 8006e98:	4657      	mov	r7, sl
 8006e9a:	464e      	mov	r6, r9
 8006e9c:	4645      	mov	r5, r8
 8006e9e:	b5e0      	push	{r5, r6, r7, lr}
 8006ea0:	b099      	sub	sp, #100	; 0x64
 8006ea2:	9007      	str	r0, [sp, #28]
 8006ea4:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006ea6:	2500      	movs	r5, #0
 8006ea8:	9517      	str	r5, [sp, #92]	; 0x5c
 8006eaa:	9516      	str	r5, [sp, #88]	; 0x58
 8006eac:	9515      	str	r5, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006eae:	9514      	str	r5, [sp, #80]	; 0x50
 8006eb0:	9513      	str	r5, [sp, #76]	; 0x4c
 8006eb2:	9512      	str	r5, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 =0;
 8006eb4:	9511      	str	r5, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006eb6:	950e      	str	r5, [sp, #56]	; 0x38
 8006eb8:	2206      	movs	r2, #6
 8006eba:	2100      	movs	r1, #0
 8006ebc:	a80f      	add	r0, sp, #60	; 0x3c
 8006ebe:	f00c fb10 	bl	80134e2 <memset>
 8006ec2:	950b      	str	r5, [sp, #44]	; 0x2c
 8006ec4:	2206      	movs	r2, #6
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	a80c      	add	r0, sp, #48	; 0x30
 8006eca:	f00c fb0a 	bl	80134e2 <memset>
 8006ece:	9508      	str	r5, [sp, #32]
 8006ed0:	2206      	movs	r2, #6
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	a809      	add	r0, sp, #36	; 0x24
 8006ed6:	f00c fb04 	bl	80134e2 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006eda:	aa17      	add	r2, sp, #92	; 0x5c
 8006edc:	2101      	movs	r1, #1
 8006ede:	0020      	movs	r0, r4
 8006ee0:	f007 fa28 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8006ee4:	4b54      	ldr	r3, [pc, #336]	; (8007038 <scastCommand+0x1a4>)
 8006ee6:	6618      	str	r0, [r3, #96]	; 0x60
	if(pcParameterString1[0] == 'P'){
 8006ee8:	2300      	movs	r3, #0
 8006eea:	56c3      	ldrsb	r3, [r0, r3]
 8006eec:	2b50      	cmp	r3, #80	; 0x50
 8006eee:	d04f      	beq.n	8006f90 <scastCommand+0xfc>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4698      	mov	r8, r3
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006ef4:	aa16      	add	r2, sp, #88	; 0x58
 8006ef6:	2102      	movs	r1, #2
 8006ef8:	0020      	movs	r0, r4
 8006efa:	f007 fa1b 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8006efe:	0001      	movs	r1, r0
 8006f00:	4d4d      	ldr	r5, [pc, #308]	; (8007038 <scastCommand+0x1a4>)
 8006f02:	6668      	str	r0, [r5, #100]	; 0x64
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006f04:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006f06:	a80e      	add	r0, sp, #56	; 0x38
 8006f08:	f00c fd31 	bl	801396e <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006f0c:	a80e      	add	r0, sp, #56	; 0x38
 8006f0e:	f7fd fa3d 	bl	800438c <GetID>
 8006f12:	b2c6      	uxtb	r6, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006f14:	aa15      	add	r2, sp, #84	; 0x54
 8006f16:	2103      	movs	r1, #3
 8006f18:	0020      	movs	r0, r4
 8006f1a:	f007 fa0b 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8006f1e:	66a8      	str	r0, [r5, #104]	; 0x68
	if(pcParameterString3[0] == 'p'){
 8006f20:	2300      	movs	r3, #0
 8006f22:	56c3      	ldrsb	r3, [r0, r3]
 8006f24:	2b70      	cmp	r3, #112	; 0x70
 8006f26:	d039      	beq.n	8006f9c <scastCommand+0x108>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4699      	mov	r9, r3
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006f2c:	aa14      	add	r2, sp, #80	; 0x50
 8006f2e:	2104      	movs	r1, #4
 8006f30:	0020      	movs	r0, r4
 8006f32:	f007 f9ff 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8006f36:	0001      	movs	r1, r0
 8006f38:	4b3f      	ldr	r3, [pc, #252]	; (8007038 <scastCommand+0x1a4>)
 8006f3a:	469a      	mov	sl, r3
 8006f3c:	66d8      	str	r0, [r3, #108]	; 0x6c
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006f3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f40:	a80b      	add	r0, sp, #44	; 0x2c
 8006f42:	f00c fd14 	bl	801396e <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006f46:	a80b      	add	r0, sp, #44	; 0x2c
 8006f48:	f7fd fa20 	bl	800438c <GetID>
 8006f4c:	b2c7      	uxtb	r7, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006f4e:	aa13      	add	r2, sp, #76	; 0x4c
 8006f50:	2105      	movs	r1, #5
 8006f52:	0020      	movs	r0, r4
 8006f54:	f007 f9ee 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8006f58:	0005      	movs	r5, r0
 8006f5a:	4653      	mov	r3, sl
 8006f5c:	6718      	str	r0, [r3, #112]	; 0x70
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006f5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f60:	469b      	mov	fp, r3
 8006f62:	001a      	movs	r2, r3
 8006f64:	4935      	ldr	r1, [pc, #212]	; (800703c <scastCommand+0x1a8>)
 8006f66:	f00c fcf0 	bl	801394a <strncmp>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d01c      	beq.n	8006fa8 <scastCommand+0x114>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006f6e:	465a      	mov	r2, fp
 8006f70:	4933      	ldr	r1, [pc, #204]	; (8007040 <scastCommand+0x1ac>)
 8006f72:	0028      	movs	r0, r5
 8006f74:	f00c fce9 	bl	801394a <strncmp>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d046      	beq.n	800700a <scastCommand+0x176>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006f7c:	465a      	mov	r2, fp
 8006f7e:	4931      	ldr	r1, [pc, #196]	; (8007044 <scastCommand+0x1b0>)
 8006f80:	0028      	movs	r0, r5
 8006f82:	f00c fce2 	bl	801394a <strncmp>
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d042      	beq.n	8007010 <scastCommand+0x17c>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	469a      	mov	sl, r3
 8006f8e:	e00d      	b.n	8006fac <scastCommand+0x118>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006f90:	3001      	adds	r0, #1
 8006f92:	f00c f83e 	bl	8013012 <atol>
 8006f96:	b2c3      	uxtb	r3, r0
 8006f98:	4698      	mov	r8, r3
 8006f9a:	e7ab      	b.n	8006ef4 <scastCommand+0x60>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	f00c f838 	bl	8013012 <atol>
 8006fa2:	b2c3      	uxtb	r3, r0
 8006fa4:	4699      	mov	r9, r3
 8006fa6:	e7c1      	b.n	8006f2c <scastCommand+0x98>
		direction =FORWARD;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	469a      	mov	sl, r3
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006fac:	465a      	mov	r2, fp
 8006fae:	0029      	movs	r1, r5
 8006fb0:	a808      	add	r0, sp, #32
 8006fb2:	f00c fcdc 	bl	801396e <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006fb6:	aa12      	add	r2, sp, #72	; 0x48
 8006fb8:	2106      	movs	r1, #6
 8006fba:	0020      	movs	r0, r4
 8006fbc:	f007 f9ba 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8006fc0:	4d1d      	ldr	r5, [pc, #116]	; (8007038 <scastCommand+0x1a4>)
 8006fc2:	6768      	str	r0, [r5, #116]	; 0x74
	count =(uint32_t )atol((char* )pcParameterString6);
 8006fc4:	f00c f825 	bl	8013012 <atol>
 8006fc8:	4683      	mov	fp, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006fca:	aa11      	add	r2, sp, #68	; 0x44
 8006fcc:	2107      	movs	r1, #7
 8006fce:	0020      	movs	r0, r4
 8006fd0:	f007 f9b0 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8006fd4:	67a8      	str	r0, [r5, #120]	; 0x78
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006fd6:	f00c f81c 	bl	8013012 <atol>
 8006fda:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006fdc:	2300      	movs	r3, #0
 8006fde:	9303      	str	r3, [sp, #12]
 8006fe0:	9002      	str	r0, [sp, #8]
 8006fe2:	465b      	mov	r3, fp
 8006fe4:	9301      	str	r3, [sp, #4]
 8006fe6:	4653      	mov	r3, sl
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	003b      	movs	r3, r7
 8006fec:	464a      	mov	r2, r9
 8006fee:	0031      	movs	r1, r6
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	f001 fa77 	bl	80084e4 <StartScastDMAStream>
	if(result == BOS_OK){
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d00d      	beq.n	8007016 <scastCommand+0x182>
}
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	b019      	add	sp, #100	; 0x64
 8006ffe:	bcf0      	pop	{r4, r5, r6, r7}
 8007000:	46bb      	mov	fp, r7
 8007002:	46b2      	mov	sl, r6
 8007004:	46a9      	mov	r9, r5
 8007006:	46a0      	mov	r8, r4
 8007008:	bdf0      	pop	{r4, r5, r6, r7, pc}
		direction =BACKWARD;
 800700a:	2301      	movs	r3, #1
 800700c:	469a      	mov	sl, r3
 800700e:	e7cd      	b.n	8006fac <scastCommand+0x118>
		direction =BIDIRECTIONAL;
 8007010:	2302      	movs	r3, #2
 8007012:	469a      	mov	sl, r3
 8007014:	e7ca      	b.n	8006fac <scastCommand+0x118>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8007016:	9404      	str	r4, [sp, #16]
 8007018:	465b      	mov	r3, fp
 800701a:	9303      	str	r3, [sp, #12]
 800701c:	ab0b      	add	r3, sp, #44	; 0x2c
 800701e:	9302      	str	r3, [sp, #8]
 8007020:	464b      	mov	r3, r9
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	ab0e      	add	r3, sp, #56	; 0x38
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	4643      	mov	r3, r8
 800702a:	aa08      	add	r2, sp, #32
 800702c:	4906      	ldr	r1, [pc, #24]	; (8007048 <scastCommand+0x1b4>)
 800702e:	9807      	ldr	r0, [sp, #28]
 8007030:	f00c fc48 	bl	80138c4 <sprintf>
 8007034:	e7e1      	b.n	8006ffa <scastCommand+0x166>
 8007036:	46c0      	nop			; (mov r8, r8)
 8007038:	2000190c 	.word	0x2000190c
 800703c:	0801b34c 	.word	0x0801b34c
 8007040:	0801b354 	.word	0x0801b354
 8007044:	0801b360 	.word	0x0801b360
 8007048:	0801b370 	.word	0x0801b370

0800704c <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800704c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800704e:	b083      	sub	sp, #12
 8007050:	0004      	movs	r4, r0
	if(N > 1)
 8007052:	4b26      	ldr	r3, [pc, #152]	; (80070ec <infoCommand+0xa0>)
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d832      	bhi.n	80070c0 <infoCommand+0x74>
	BOS_Status result =BOS_OK;
 800705a:	2700      	movs	r7, #0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 800705c:	4b23      	ldr	r3, [pc, #140]	; (80070ec <infoCommand+0xa0>)
 800705e:	781a      	ldrb	r2, [r3, #0]
 8007060:	4923      	ldr	r1, [pc, #140]	; (80070f0 <infoCommand+0xa4>)
 8007062:	0020      	movs	r0, r4
 8007064:	f00c fc2e 	bl	80138c4 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8007068:	0020      	movs	r0, r4
 800706a:	f7f9 f855 	bl	8000118 <strlen>
 800706e:	b282      	uxth	r2, r0
 8007070:	4d20      	ldr	r5, [pc, #128]	; (80070f4 <infoCommand+0xa8>)
 8007072:	7828      	ldrb	r0, [r5, #0]
 8007074:	2601      	movs	r6, #1
 8007076:	4276      	negs	r6, r6
 8007078:	9600      	str	r6, [sp, #0]
 800707a:	2332      	movs	r3, #50	; 0x32
 800707c:	0021      	movs	r1, r4
 800707e:	f006 fead 	bl	800dddc <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8007082:	2213      	movs	r2, #19
 8007084:	491c      	ldr	r1, [pc, #112]	; (80070f8 <infoCommand+0xac>)
 8007086:	0020      	movs	r0, r4
 8007088:	f00c fa22 	bl	80134d0 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 800708c:	0020      	movs	r0, r4
 800708e:	f7f9 f843 	bl	8000118 <strlen>
 8007092:	b282      	uxth	r2, r0
 8007094:	7828      	ldrb	r0, [r5, #0]
 8007096:	9600      	str	r6, [sp, #0]
 8007098:	2332      	movs	r3, #50	; 0x32
 800709a:	0021      	movs	r1, r4
 800709c:	f006 fe9e 	bl	800dddc <writePxMutex>
	DisplayTopology(PcPort);
 80070a0:	7828      	ldrb	r0, [r5, #0]
 80070a2:	f7fc febd 	bl	8003e20 <DisplayTopology>
	DisplayPortsDir(PcPort);
 80070a6:	7828      	ldrb	r0, [r5, #0]
 80070a8:	f7fc ff90 	bl	8003fcc <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 80070ac:	2f02      	cmp	r7, #2
 80070ae:	d00b      	beq.n	80070c8 <infoCommand+0x7c>
	sprintf((char* )pcWriteBuffer," ");
 80070b0:	2202      	movs	r2, #2
 80070b2:	4912      	ldr	r1, [pc, #72]	; (80070fc <infoCommand+0xb0>)
 80070b4:	0020      	movs	r0, r4
 80070b6:	f00c fa0b 	bl	80134d0 <memcpy>
}
 80070ba:	2000      	movs	r0, #0
 80070bc:	b003      	add	sp, #12
 80070be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result =ReadPortsDir();
 80070c0:	f006 ff22 	bl	800df08 <ReadPortsDir>
 80070c4:	0007      	movs	r7, r0
 80070c6:	e7c9      	b.n	800705c <infoCommand+0x10>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 80070c8:	2244      	movs	r2, #68	; 0x44
 80070ca:	490d      	ldr	r1, [pc, #52]	; (8007100 <infoCommand+0xb4>)
 80070cc:	0020      	movs	r0, r4
 80070ce:	f00c f9ff 	bl	80134d0 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 80070d2:	0020      	movs	r0, r4
 80070d4:	f7f9 f820 	bl	8000118 <strlen>
 80070d8:	b282      	uxth	r2, r0
 80070da:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <infoCommand+0xa8>)
 80070dc:	7818      	ldrb	r0, [r3, #0]
 80070de:	0033      	movs	r3, r6
 80070e0:	9600      	str	r6, [sp, #0]
 80070e2:	3333      	adds	r3, #51	; 0x33
 80070e4:	0021      	movs	r1, r4
 80070e6:	f006 fe79 	bl	800dddc <writePxMutex>
 80070ea:	e7e1      	b.n	80070b0 <infoCommand+0x64>
 80070ec:	20000008 	.word	0x20000008
 80070f0:	0801b3f8 	.word	0x0801b3f8
 80070f4:	20000c58 	.word	0x20000c58
 80070f8:	0801b414 	.word	0x0801b414
 80070fc:	08019f3c 	.word	0x08019f3c
 8007100:	0801b428 	.word	0x0801b428

08007104 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007104:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 8007106:	2000      	movs	r0, #0
 8007108:	f7fc ffca 	bl	80040a0 <DisplayModuleStatus>
}
 800710c:	2000      	movs	r0, #0
 800710e:	bd10      	pop	{r4, pc}

08007110 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007112:	46ce      	mov	lr, r9
 8007114:	4647      	mov	r7, r8
 8007116:	b580      	push	{r7, lr}
 8007118:	b08f      	sub	sp, #60	; 0x3c
 800711a:	0007      	movs	r7, r0
 800711c:	4690      	mov	r8, r2
	char module[MaxLengthOfAlias + 30] ={0};
 800711e:	2400      	movs	r4, #0
 8007120:	9404      	str	r4, [sp, #16]
 8007122:	2223      	movs	r2, #35	; 0x23
 8007124:	2100      	movs	r1, #0
 8007126:	a805      	add	r0, sp, #20
 8007128:	f00c f9db 	bl	80134e2 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 800712c:	9401      	str	r4, [sp, #4]
 800712e:	2206      	movs	r2, #6
 8007130:	2100      	movs	r1, #0
 8007132:	a802      	add	r0, sp, #8
 8007134:	f00c f9d5 	bl	80134e2 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007138:	4c5b      	ldr	r4, [pc, #364]	; (80072a8 <groupCommand+0x198>)
 800713a:	0022      	movs	r2, r4
 800713c:	327c      	adds	r2, #124	; 0x7c
 800713e:	2101      	movs	r1, #1
 8007140:	4640      	mov	r0, r8
 8007142:	f007 f8f7 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8007146:	0001      	movs	r1, r0
 8007148:	4b58      	ldr	r3, [pc, #352]	; (80072ac <groupCommand+0x19c>)
 800714a:	6018      	str	r0, [r3, #0]
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 800714c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800714e:	a801      	add	r0, sp, #4
 8007150:	f00c fc0d 	bl	801396e <strncpy>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8007154:	2400      	movs	r4, #0
 8007156:	2c09      	cmp	r4, #9
 8007158:	d80c      	bhi.n	8007174 <groupCommand+0x64>
		if(!strcmp(alias,groupAlias[i])){
 800715a:	00a1      	lsls	r1, r4, #2
 800715c:	1909      	adds	r1, r1, r4
 800715e:	0049      	lsls	r1, r1, #1
 8007160:	4b53      	ldr	r3, [pc, #332]	; (80072b0 <groupCommand+0x1a0>)
 8007162:	18c9      	adds	r1, r1, r3
 8007164:	a801      	add	r0, sp, #4
 8007166:	f7f8 ffcd 	bl	8000104 <strcmp>
 800716a:	2800      	cmp	r0, #0
 800716c:	d016      	beq.n	800719c <groupCommand+0x8c>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 800716e:	3401      	adds	r4, #1
 8007170:	b2e4      	uxtb	r4, r4
 8007172:	e7f0      	b.n	8007156 <groupCommand+0x46>
	type =1;
 8007174:	2301      	movs	r3, #1
 8007176:	4699      	mov	r9, r3
	count =2;
 8007178:	4c4c      	ldr	r4, [pc, #304]	; (80072ac <groupCommand+0x19c>)
 800717a:	2302      	movs	r3, #2
 800717c:	7123      	strb	r3, [r4, #4]
	strcpy((char* )pcWriteBuffer,"Modules [");
 800717e:	220a      	movs	r2, #10
 8007180:	494c      	ldr	r1, [pc, #304]	; (80072b4 <groupCommand+0x1a4>)
 8007182:	0038      	movs	r0, r7
 8007184:	f00c f9a4 	bl	80134d0 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8007188:	0022      	movs	r2, r4
 800718a:	3208      	adds	r2, #8
 800718c:	2102      	movs	r1, #2
 800718e:	4640      	mov	r0, r8
 8007190:	f007 f8d0 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8007194:	60e0      	str	r0, [r4, #12]
	int16_t modID =0, type =0;
 8007196:	2600      	movs	r6, #0
	BOS_Status result =BOS_OK;
 8007198:	2500      	movs	r5, #0
	while(pcParameterString != NULL){
 800719a:	e010      	b.n	80071be <groupCommand+0xae>
			type =0;
 800719c:	2300      	movs	r3, #0
 800719e:	4699      	mov	r9, r3
 80071a0:	e7ea      	b.n	8007178 <groupCommand+0x68>
		strcat((char* )pcWriteBuffer,module);
 80071a2:	a904      	add	r1, sp, #16
 80071a4:	0038      	movs	r0, r7
 80071a6:	f00c fbad 	bl	8013904 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 80071aa:	3401      	adds	r4, #1
 80071ac:	b261      	sxtb	r1, r4
 80071ae:	4c3f      	ldr	r4, [pc, #252]	; (80072ac <groupCommand+0x19c>)
 80071b0:	7121      	strb	r1, [r4, #4]
 80071b2:	0022      	movs	r2, r4
 80071b4:	3208      	adds	r2, #8
 80071b6:	4640      	mov	r0, r8
 80071b8:	f007 f8bc 	bl	800e334 <FreeRTOS_CLIGetParameter>
 80071bc:	60e0      	str	r0, [r4, #12]
	while(pcParameterString != NULL){
 80071be:	4b3b      	ldr	r3, [pc, #236]	; (80072ac <groupCommand+0x19c>)
 80071c0:	68d9      	ldr	r1, [r3, #12]
 80071c2:	2900      	cmp	r1, #0
 80071c4:	d021      	beq.n	800720a <groupCommand+0xfa>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 80071c6:	4b39      	ldr	r3, [pc, #228]	; (80072ac <groupCommand+0x19c>)
 80071c8:	689e      	ldr	r6, [r3, #8]
 80071ca:	ac04      	add	r4, sp, #16
 80071cc:	0032      	movs	r2, r6
 80071ce:	0020      	movs	r0, r4
 80071d0:	f00c fbcd 	bl	801396e <strncpy>
		module[xParameterStringLength] ='\0';
 80071d4:	2300      	movs	r3, #0
 80071d6:	55a3      	strb	r3, [r4, r6]
		modID =GetID(module);
 80071d8:	0020      	movs	r0, r4
 80071da:	f7fd f8d7 	bl	800438c <GetID>
 80071de:	1e06      	subs	r6, r0, #0
		if(modID < 0)
 80071e0:	db13      	blt.n	800720a <groupCommand+0xfa>
		result =AddModuleToGroup(modID,alias);
 80071e2:	b2c0      	uxtb	r0, r0
 80071e4:	a901      	add	r1, sp, #4
 80071e6:	f7fd f99b 	bl	8004520 <AddModuleToGroup>
 80071ea:	1e05      	subs	r5, r0, #0
		if(result != BOS_OK)
 80071ec:	d10d      	bne.n	800720a <groupCommand+0xfa>
		if(count > 2)
 80071ee:	4b2f      	ldr	r3, [pc, #188]	; (80072ac <groupCommand+0x19c>)
 80071f0:	2404      	movs	r4, #4
 80071f2:	571c      	ldrsb	r4, [r3, r4]
 80071f4:	2c02      	cmp	r4, #2
 80071f6:	ddd4      	ble.n	80071a2 <groupCommand+0x92>
			strcat((char* )pcWriteBuffer,", ");
 80071f8:	0038      	movs	r0, r7
 80071fa:	f7f8 ff8d 	bl	8000118 <strlen>
 80071fe:	1838      	adds	r0, r7, r0
 8007200:	2203      	movs	r2, #3
 8007202:	492d      	ldr	r1, [pc, #180]	; (80072b8 <groupCommand+0x1a8>)
 8007204:	f00c f964 	bl	80134d0 <memcpy>
 8007208:	e7cb      	b.n	80071a2 <groupCommand+0x92>
	if(modID < 0)
 800720a:	2e00      	cmp	r6, #0
 800720c:	db1a      	blt.n	8007244 <groupCommand+0x134>
	else if(count == 2)
 800720e:	4b27      	ldr	r3, [pc, #156]	; (80072ac <groupCommand+0x19c>)
 8007210:	791b      	ldrb	r3, [r3, #4]
 8007212:	b25b      	sxtb	r3, r3
 8007214:	2b02      	cmp	r3, #2
 8007216:	d020      	beq.n	800725a <groupCommand+0x14a>
	else if(result == BOS_OK && type){
 8007218:	2d00      	cmp	r5, #0
 800721a:	d102      	bne.n	8007222 <groupCommand+0x112>
 800721c:	464b      	mov	r3, r9
 800721e:	2b00      	cmp	r3, #0
 8007220:	d121      	bne.n	8007266 <groupCommand+0x156>
	else if(result == BOS_OK && !type){
 8007222:	2d00      	cmp	r5, #0
 8007224:	d102      	bne.n	800722c <groupCommand+0x11c>
 8007226:	464b      	mov	r3, r9
 8007228:	2b00      	cmp	r3, #0
 800722a:	d026      	beq.n	800727a <groupCommand+0x16a>
	else if(result == BOS_ERR_Keyword)
 800722c:	2d06      	cmp	r5, #6
 800722e:	d02e      	beq.n	800728e <groupCommand+0x17e>
	else if(result == BOS_ERR_ExistingAlias)
 8007230:	2d07      	cmp	r5, #7
 8007232:	d032      	beq.n	800729a <groupCommand+0x18a>
	else if(result == BOS_ERR_ExistingCmd)
 8007234:	2d08      	cmp	r5, #8
 8007236:	d10a      	bne.n	800724e <groupCommand+0x13e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8007238:	aa01      	add	r2, sp, #4
 800723a:	4920      	ldr	r1, [pc, #128]	; (80072bc <groupCommand+0x1ac>)
 800723c:	0038      	movs	r0, r7
 800723e:	f00c fb41 	bl	80138c4 <sprintf>
 8007242:	e004      	b.n	800724e <groupCommand+0x13e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8007244:	aa04      	add	r2, sp, #16
 8007246:	491e      	ldr	r1, [pc, #120]	; (80072c0 <groupCommand+0x1b0>)
 8007248:	0038      	movs	r0, r7
 800724a:	f00c fb3b 	bl	80138c4 <sprintf>
}
 800724e:	2000      	movs	r0, #0
 8007250:	b00f      	add	sp, #60	; 0x3c
 8007252:	bcc0      	pop	{r6, r7}
 8007254:	46b9      	mov	r9, r7
 8007256:	46b0      	mov	r8, r6
 8007258:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 800725a:	aa01      	add	r2, sp, #4
 800725c:	4919      	ldr	r1, [pc, #100]	; (80072c4 <groupCommand+0x1b4>)
 800725e:	0038      	movs	r0, r7
 8007260:	f00c fb30 	bl	80138c4 <sprintf>
 8007264:	e7f3      	b.n	800724e <groupCommand+0x13e>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8007266:	aa01      	add	r2, sp, #4
 8007268:	4917      	ldr	r1, [pc, #92]	; (80072c8 <groupCommand+0x1b8>)
 800726a:	a804      	add	r0, sp, #16
 800726c:	f00c fb2a 	bl	80138c4 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8007270:	a904      	add	r1, sp, #16
 8007272:	0038      	movs	r0, r7
 8007274:	f00c fb46 	bl	8013904 <strcat>
 8007278:	e7e9      	b.n	800724e <groupCommand+0x13e>
		sprintf(module,(char* )pcMessageOKexist,alias);
 800727a:	aa01      	add	r2, sp, #4
 800727c:	4913      	ldr	r1, [pc, #76]	; (80072cc <groupCommand+0x1bc>)
 800727e:	a804      	add	r0, sp, #16
 8007280:	f00c fb20 	bl	80138c4 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8007284:	a904      	add	r1, sp, #16
 8007286:	0038      	movs	r0, r7
 8007288:	f00c fb3c 	bl	8013904 <strcat>
 800728c:	e7df      	b.n	800724e <groupCommand+0x13e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 800728e:	aa01      	add	r2, sp, #4
 8007290:	490f      	ldr	r1, [pc, #60]	; (80072d0 <groupCommand+0x1c0>)
 8007292:	0038      	movs	r0, r7
 8007294:	f00c fb16 	bl	80138c4 <sprintf>
 8007298:	e7d9      	b.n	800724e <groupCommand+0x13e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 800729a:	aa01      	add	r2, sp, #4
 800729c:	490d      	ldr	r1, [pc, #52]	; (80072d4 <groupCommand+0x1c4>)
 800729e:	0038      	movs	r0, r7
 80072a0:	f00c fb10 	bl	80138c4 <sprintf>
 80072a4:	e7d3      	b.n	800724e <groupCommand+0x13e>
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	2000190c 	.word	0x2000190c
 80072ac:	2000198c 	.word	0x2000198c
 80072b0:	20000ad8 	.word	0x20000ad8
 80072b4:	0801b46c 	.word	0x0801b46c
 80072b8:	0801b478 	.word	0x0801b478
 80072bc:	0801b57c 	.word	0x0801b57c
 80072c0:	0801b47c 	.word	0x0801b47c
 80072c4:	0801b4a0 	.word	0x0801b4a0
 80072c8:	0801b4cc 	.word	0x0801b4cc
 80072cc:	0801b4e8 	.word	0x0801b4e8
 80072d0:	0801b508 	.word	0x0801b508
 80072d4:	0801b548 	.word	0x0801b548

080072d8 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	0004      	movs	r4, r0
 80072dc:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80072de:	4d1c      	ldr	r5, [pc, #112]	; (8007350 <nameCommand+0x78>)
 80072e0:	002a      	movs	r2, r5
 80072e2:	3210      	adds	r2, #16
 80072e4:	2101      	movs	r1, #1
 80072e6:	f007 f825 	bl	800e334 <FreeRTOS_CLIGetParameter>
 80072ea:	0001      	movs	r1, r0
 80072ec:	6168      	str	r0, [r5, #20]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 80072ee:	692b      	ldr	r3, [r5, #16]
 80072f0:	2b09      	cmp	r3, #9
 80072f2:	dd01      	ble.n	80072f8 <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 80072f4:	2300      	movs	r3, #0
 80072f6:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 80072f8:	4b16      	ldr	r3, [pc, #88]	; (8007354 <nameCommand+0x7c>)
 80072fa:	7818      	ldrb	r0, [r3, #0]
 80072fc:	f7fd f8a8 	bl	8004450 <NameModule>
	if(result == BOS_OK)
 8007300:	2800      	cmp	r0, #0
 8007302:	d007      	beq.n	8007314 <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 8007304:	2806      	cmp	r0, #6
 8007306:	d00e      	beq.n	8007326 <nameCommand+0x4e>
	else if(result == BOS_ERR_ExistingAlias)
 8007308:	2807      	cmp	r0, #7
 800730a:	d013      	beq.n	8007334 <nameCommand+0x5c>
	else if(result == BOS_ERR_ExistingCmd)
 800730c:	2808      	cmp	r0, #8
 800730e:	d018      	beq.n	8007342 <nameCommand+0x6a>
}
 8007310:	2000      	movs	r0, #0
 8007312:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8007314:	4b0e      	ldr	r3, [pc, #56]	; (8007350 <nameCommand+0x78>)
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	4a0e      	ldr	r2, [pc, #56]	; (8007354 <nameCommand+0x7c>)
 800731a:	7812      	ldrb	r2, [r2, #0]
 800731c:	490e      	ldr	r1, [pc, #56]	; (8007358 <nameCommand+0x80>)
 800731e:	0020      	movs	r0, r4
 8007320:	f00c fad0 	bl	80138c4 <sprintf>
 8007324:	e7f4      	b.n	8007310 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8007326:	4b0a      	ldr	r3, [pc, #40]	; (8007350 <nameCommand+0x78>)
 8007328:	695a      	ldr	r2, [r3, #20]
 800732a:	490c      	ldr	r1, [pc, #48]	; (800735c <nameCommand+0x84>)
 800732c:	0020      	movs	r0, r4
 800732e:	f00c fac9 	bl	80138c4 <sprintf>
 8007332:	e7ed      	b.n	8007310 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8007334:	4b06      	ldr	r3, [pc, #24]	; (8007350 <nameCommand+0x78>)
 8007336:	695a      	ldr	r2, [r3, #20]
 8007338:	4909      	ldr	r1, [pc, #36]	; (8007360 <nameCommand+0x88>)
 800733a:	0020      	movs	r0, r4
 800733c:	f00c fac2 	bl	80138c4 <sprintf>
 8007340:	e7e6      	b.n	8007310 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8007342:	4b03      	ldr	r3, [pc, #12]	; (8007350 <nameCommand+0x78>)
 8007344:	695a      	ldr	r2, [r3, #20]
 8007346:	4907      	ldr	r1, [pc, #28]	; (8007364 <nameCommand+0x8c>)
 8007348:	0020      	movs	r0, r4
 800734a:	f00c fabb 	bl	80138c4 <sprintf>
 800734e:	e7df      	b.n	8007310 <nameCommand+0x38>
 8007350:	2000198c 	.word	0x2000198c
 8007354:	20000aa0 	.word	0x20000aa0
 8007358:	0801b5bc 	.word	0x0801b5bc
 800735c:	0801b508 	.word	0x0801b508
 8007360:	0801b548 	.word	0x0801b548
 8007364:	0801b57c 	.word	0x0801b57c

08007368 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800736a:	b085      	sub	sp, #20
 800736c:	9003      	str	r0, [sp, #12]
 800736e:	0014      	movs	r4, r2
 8007370:	2700      	movs	r7, #0
 8007372:	2500      	movs	r5, #0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007374:	4e49      	ldr	r6, [pc, #292]	; (800749c <bootloaderUpdateCommand+0x134>)
 8007376:	0032      	movs	r2, r6
 8007378:	3218      	adds	r2, #24
 800737a:	2101      	movs	r1, #1
 800737c:	0020      	movs	r0, r4
 800737e:	f006 ffd9 	bl	800e334 <FreeRTOS_CLIGetParameter>
 8007382:	61f0      	str	r0, [r6, #28]
	if(pcParameterString1 == NULL){
 8007384:	2800      	cmp	r0, #0
 8007386:	d045      	beq.n	8007414 <bootloaderUpdateCommand+0xac>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8007388:	4b44      	ldr	r3, [pc, #272]	; (800749c <bootloaderUpdateCommand+0x134>)
 800738a:	699a      	ldr	r2, [r3, #24]
 800738c:	4944      	ldr	r1, [pc, #272]	; (80074a0 <bootloaderUpdateCommand+0x138>)
 800738e:	f00c fadc 	bl	801394a <strncmp>
 8007392:	2800      	cmp	r0, #0
 8007394:	d136      	bne.n	8007404 <bootloaderUpdateCommand+0x9c>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007396:	4e41      	ldr	r6, [pc, #260]	; (800749c <bootloaderUpdateCommand+0x134>)
 8007398:	0032      	movs	r2, r6
 800739a:	3220      	adds	r2, #32
 800739c:	2102      	movs	r1, #2
 800739e:	0020      	movs	r0, r4
 80073a0:	f006 ffc8 	bl	800e334 <FreeRTOS_CLIGetParameter>
 80073a4:	6270      	str	r0, [r6, #36]	; 0x24
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80073a6:	0032      	movs	r2, r6
 80073a8:	3228      	adds	r2, #40	; 0x28
 80073aa:	2103      	movs	r1, #3
 80073ac:	0020      	movs	r0, r4
 80073ae:	f006 ffc1 	bl	800e334 <FreeRTOS_CLIGetParameter>
 80073b2:	62f0      	str	r0, [r6, #44]	; 0x2c
			if(pcParameterString2[0] == '#'){
 80073b4:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80073b6:	2300      	movs	r3, #0
 80073b8:	56c3      	ldrsb	r3, [r0, r3]
 80073ba:	2b23      	cmp	r3, #35	; 0x23
 80073bc:	d04e      	beq.n	800745c <bootloaderUpdateCommand+0xf4>
				result =BOS_ERR_WrongValue;
 80073be:	2468      	movs	r4, #104	; 0x68
			if(pcParameterString3[0] == 'p'){
 80073c0:	4b36      	ldr	r3, [pc, #216]	; (800749c <bootloaderUpdateCommand+0x134>)
 80073c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80073c4:	2300      	movs	r3, #0
 80073c6:	56c3      	ldrsb	r3, [r0, r3]
 80073c8:	2b70      	cmp	r3, #112	; 0x70
 80073ca:	d04d      	beq.n	8007468 <bootloaderUpdateCommand+0x100>
				result =BOS_ERR_WrongValue;
 80073cc:	2468      	movs	r4, #104	; 0x68
			if(module != myID){
 80073ce:	4b35      	ldr	r3, [pc, #212]	; (80074a4 <bootloaderUpdateCommand+0x13c>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	42bb      	cmp	r3, r7
 80073d4:	d04d      	beq.n	8007472 <bootloaderUpdateCommand+0x10a>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80073d6:	4b34      	ldr	r3, [pc, #208]	; (80074a8 <bootloaderUpdateCommand+0x140>)
 80073d8:	2200      	movs	r2, #0
 80073da:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 80073dc:	4b33      	ldr	r3, [pc, #204]	; (80074ac <bootloaderUpdateCommand+0x144>)
 80073de:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80073e0:	3201      	adds	r2, #1
 80073e2:	211a      	movs	r1, #26
 80073e4:	0038      	movs	r0, r7
 80073e6:	f001 f857 	bl	8008498 <SendMessageToModule>
				osDelay(100);
 80073ea:	2064      	movs	r0, #100	; 0x64
 80073ec:	f006 fe80 	bl	800e0f0 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 80073f0:	4b2f      	ldr	r3, [pc, #188]	; (80074b0 <bootloaderUpdateCommand+0x148>)
 80073f2:	781a      	ldrb	r2, [r3, #0]
 80073f4:	4b2b      	ldr	r3, [pc, #172]	; (80074a4 <bootloaderUpdateCommand+0x13c>)
 80073f6:	7818      	ldrb	r0, [r3, #0]
 80073f8:	002b      	movs	r3, r5
 80073fa:	0039      	movs	r1, r7
 80073fc:	f003 fa7e 	bl	800a8fc <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8007400:	2c68      	cmp	r4, #104	; 0x68
 8007402:	d104      	bne.n	800740e <bootloaderUpdateCommand+0xa6>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8007404:	220f      	movs	r2, #15
 8007406:	492b      	ldr	r1, [pc, #172]	; (80074b4 <bootloaderUpdateCommand+0x14c>)
 8007408:	9803      	ldr	r0, [sp, #12]
 800740a:	f00c f861 	bl	80134d0 <memcpy>
}
 800740e:	2000      	movs	r0, #0
 8007410:	b005      	add	sp, #20
 8007412:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8007414:	4b23      	ldr	r3, [pc, #140]	; (80074a4 <bootloaderUpdateCommand+0x13c>)
 8007416:	781a      	ldrb	r2, [r3, #0]
 8007418:	4927      	ldr	r1, [pc, #156]	; (80074b8 <bootloaderUpdateCommand+0x150>)
 800741a:	9c03      	ldr	r4, [sp, #12]
 800741c:	0020      	movs	r0, r4
 800741e:	f00c fa51 	bl	80138c4 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8007422:	4b26      	ldr	r3, [pc, #152]	; (80074bc <bootloaderUpdateCommand+0x154>)
 8007424:	6819      	ldr	r1, [r3, #0]
 8007426:	0020      	movs	r0, r4
 8007428:	f00c fa6c 	bl	8013904 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800742c:	0020      	movs	r0, r4
 800742e:	f7f8 fe73 	bl	8000118 <strlen>
 8007432:	b282      	uxth	r2, r0
 8007434:	4b1e      	ldr	r3, [pc, #120]	; (80074b0 <bootloaderUpdateCommand+0x148>)
 8007436:	7818      	ldrb	r0, [r3, #0]
 8007438:	2301      	movs	r3, #1
 800743a:	425b      	negs	r3, r3
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	3333      	adds	r3, #51	; 0x33
 8007440:	0021      	movs	r1, r4
 8007442:	f006 fccb 	bl	800dddc <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8007446:	4b1e      	ldr	r3, [pc, #120]	; (80074c0 <bootloaderUpdateCommand+0x158>)
 8007448:	4a1e      	ldr	r2, [pc, #120]	; (80074c4 <bootloaderUpdateCommand+0x15c>)
 800744a:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 800744c:	4b1e      	ldr	r3, [pc, #120]	; (80074c8 <bootloaderUpdateCommand+0x160>)
 800744e:	2201      	movs	r2, #1
 8007450:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8007452:	200a      	movs	r0, #10
 8007454:	f006 fe4c 	bl	800e0f0 <osDelay>
		NVIC_SystemReset();
 8007458:	f7fe f964 	bl	8005724 <NVIC_SystemReset>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800745c:	3001      	adds	r0, #1
 800745e:	f00b fdd8 	bl	8013012 <atol>
 8007462:	b2c7      	uxtb	r7, r0
	BOS_Status result =BOS_OK;
 8007464:	2400      	movs	r4, #0
 8007466:	e7ab      	b.n	80073c0 <bootloaderUpdateCommand+0x58>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007468:	3001      	adds	r0, #1
 800746a:	f00b fdd2 	bl	8013012 <atol>
 800746e:	b2c5      	uxtb	r5, r0
 8007470:	e7ad      	b.n	80073ce <bootloaderUpdateCommand+0x66>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8007472:	2300      	movs	r3, #0
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	3319      	adds	r3, #25
 8007478:	2200      	movs	r2, #0
 800747a:	2100      	movs	r1, #0
 800747c:	0028      	movs	r0, r5
 800747e:	f000 fdb7 	bl	8007ff0 <SendMessageFromPort>
				osDelay(100);
 8007482:	2064      	movs	r0, #100	; 0x64
 8007484:	f006 fe34 	bl	800e0f0 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8007488:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <bootloaderUpdateCommand+0x13c>)
 800748a:	7818      	ldrb	r0, [r3, #0]
 800748c:	4b08      	ldr	r3, [pc, #32]	; (80074b0 <bootloaderUpdateCommand+0x148>)
 800748e:	781a      	ldrb	r2, [r3, #0]
 8007490:	002b      	movs	r3, r5
 8007492:	0001      	movs	r1, r0
 8007494:	f003 fa32 	bl	800a8fc <remoteBootloaderUpdate>
 8007498:	e7b2      	b.n	8007400 <bootloaderUpdateCommand+0x98>
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	2000198c 	.word	0x2000198c
 80074a0:	0801b5f4 	.word	0x0801b5f4
 80074a4:	20000aa0 	.word	0x20000aa0
 80074a8:	20000b44 	.word	0x20000b44
 80074ac:	20000b6c 	.word	0x20000b6c
 80074b0:	20000c58 	.word	0x20000c58
 80074b4:	0801b06c 	.word	0x0801b06c
 80074b8:	0801b5d4 	.word	0x0801b5d4
 80074bc:	20000060 	.word	0x20000060
 80074c0:	20007ff0 	.word	0x20007ff0
 80074c4:	deadbeef 	.word	0xdeadbeef
 80074c8:	200011e7 	.word	0x200011e7

080074cc <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80074cc:	b510      	push	{r4, lr}
	if(!moduleAlias[myID][0])
 80074ce:	4b13      	ldr	r3, [pc, #76]	; (800751c <pingCommand+0x50>)
 80074d0:	781a      	ldrb	r2, [r3, #0]
 80074d2:	0093      	lsls	r3, r2, #2
 80074d4:	189b      	adds	r3, r3, r2
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	4911      	ldr	r1, [pc, #68]	; (8007520 <pingCommand+0x54>)
 80074da:	5c5b      	ldrb	r3, [r3, r1]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d113      	bne.n	8007508 <pingCommand+0x3c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 80074e0:	4910      	ldr	r1, [pc, #64]	; (8007524 <pingCommand+0x58>)
 80074e2:	f00c f9ef 	bl	80138c4 <sprintf>
	RTOS_IND_blink(200);
 80074e6:	2490      	movs	r4, #144	; 0x90
 80074e8:	05e4      	lsls	r4, r4, #23
 80074ea:	2201      	movs	r2, #1
 80074ec:	2140      	movs	r1, #64	; 0x40
 80074ee:	0020      	movs	r0, r4
 80074f0:	f00a f8bf 	bl	8011672 <HAL_GPIO_WritePin>
 80074f4:	20c8      	movs	r0, #200	; 0xc8
 80074f6:	f006 fdfb 	bl	800e0f0 <osDelay>
 80074fa:	2200      	movs	r2, #0
 80074fc:	2140      	movs	r1, #64	; 0x40
 80074fe:	0020      	movs	r0, r4
 8007500:	f00a f8b7 	bl	8011672 <HAL_GPIO_WritePin>
}
 8007504:	2000      	movs	r0, #0
 8007506:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 8007508:	0093      	lsls	r3, r2, #2
 800750a:	189b      	adds	r3, r3, r2
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	4904      	ldr	r1, [pc, #16]	; (8007520 <pingCommand+0x54>)
 8007510:	185b      	adds	r3, r3, r1
 8007512:	4905      	ldr	r1, [pc, #20]	; (8007528 <pingCommand+0x5c>)
 8007514:	f00c f9d6 	bl	80138c4 <sprintf>
 8007518:	e7e5      	b.n	80074e6 <pingCommand+0x1a>
 800751a:	46c0      	nop			; (mov r8, r8)
 800751c:	20000aa0 	.word	0x20000aa0
 8007520:	20000e6c 	.word	0x20000e6c
 8007524:	0801b5f8 	.word	0x0801b5f8
 8007528:	0801b60c 	.word	0x0801b60c

0800752c <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800752c:	b510      	push	{r4, lr}
 800752e:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007530:	2241      	movs	r2, #65	; 0x41
 8007532:	4904      	ldr	r1, [pc, #16]	; (8007544 <prvRunTimeStatsCommand+0x18>)
 8007534:	f00b ffcc 	bl	80134d0 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 8007538:	0020      	movs	r0, r4
 800753a:	3040      	adds	r0, #64	; 0x40
 800753c:	f008 f85c 	bl	800f5f8 <vTaskGetRunTimeStats>
}
 8007540:	2000      	movs	r0, #0
 8007542:	bd10      	pop	{r4, pc}
 8007544:	0801b628 	.word	0x0801b628

08007548 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007548:	b510      	push	{r4, lr}
 800754a:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 800754c:	2250      	movs	r2, #80	; 0x50
 800754e:	4904      	ldr	r1, [pc, #16]	; (8007560 <prvTaskStatsCommand+0x18>)
 8007550:	f00b ffbe 	bl	80134d0 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 8007554:	0020      	movs	r0, r4
 8007556:	304f      	adds	r0, #79	; 0x4f
 8007558:	f007 fff2 	bl	800f540 <vTaskList>
}
 800755c:	2000      	movs	r0, #0
 800755e:	bd10      	pop	{r4, pc}
 8007560:	0801b66c 	.word	0x0801b66c

08007564 <RegisterUserCLICommands>:
}
 8007564:	4770      	bx	lr
	...

08007568 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8007568:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 800756a:	4c47      	ldr	r4, [pc, #284]	; (8007688 <vRegisterCLICommands+0x120>)
 800756c:	0020      	movs	r0, r4
 800756e:	3024      	adds	r0, #36	; 0x24
 8007570:	f006 fe5a 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8007574:	0020      	movs	r0, r4
 8007576:	3034      	adds	r0, #52	; 0x34
 8007578:	f006 fe56 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 800757c:	0020      	movs	r0, r4
 800757e:	3044      	adds	r0, #68	; 0x44
 8007580:	f006 fe52 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 8007584:	0020      	movs	r0, r4
 8007586:	3054      	adds	r0, #84	; 0x54
 8007588:	f006 fe4e 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 800758c:	0020      	movs	r0, r4
 800758e:	3064      	adds	r0, #100	; 0x64
 8007590:	f006 fe4a 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 8007594:	0020      	movs	r0, r4
 8007596:	3074      	adds	r0, #116	; 0x74
 8007598:	f006 fe46 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 800759c:	4c3b      	ldr	r4, [pc, #236]	; (800768c <vRegisterCLICommands+0x124>)
 800759e:	1d20      	adds	r0, r4, #4
 80075a0:	f006 fe42 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80075a4:	0020      	movs	r0, r4
 80075a6:	3014      	adds	r0, #20
 80075a8:	f006 fe3e 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80075ac:	0020      	movs	r0, r4
 80075ae:	3024      	adds	r0, #36	; 0x24
 80075b0:	f006 fe3a 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 80075b4:	0020      	movs	r0, r4
 80075b6:	3034      	adds	r0, #52	; 0x34
 80075b8:	f006 fe36 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 80075bc:	0020      	movs	r0, r4
 80075be:	3044      	adds	r0, #68	; 0x44
 80075c0:	f006 fe32 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 80075c4:	0020      	movs	r0, r4
 80075c6:	3054      	adds	r0, #84	; 0x54
 80075c8:	f006 fe2e 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 80075cc:	0020      	movs	r0, r4
 80075ce:	3064      	adds	r0, #100	; 0x64
 80075d0:	f006 fe2a 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 80075d4:	0020      	movs	r0, r4
 80075d6:	3074      	adds	r0, #116	; 0x74
 80075d8:	f006 fe26 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 80075dc:	4c2c      	ldr	r4, [pc, #176]	; (8007690 <vRegisterCLICommands+0x128>)
 80075de:	1d20      	adds	r0, r4, #4
 80075e0:	f006 fe22 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 80075e4:	0020      	movs	r0, r4
 80075e6:	3014      	adds	r0, #20
 80075e8:	f006 fe1e 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 80075ec:	0020      	movs	r0, r4
 80075ee:	3024      	adds	r0, #36	; 0x24
 80075f0:	f006 fe1a 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 80075f4:	0020      	movs	r0, r4
 80075f6:	3034      	adds	r0, #52	; 0x34
 80075f8:	f006 fe16 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 80075fc:	0020      	movs	r0, r4
 80075fe:	3044      	adds	r0, #68	; 0x44
 8007600:	f006 fe12 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8007604:	0020      	movs	r0, r4
 8007606:	3054      	adds	r0, #84	; 0x54
 8007608:	f006 fe0e 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 800760c:	0020      	movs	r0, r4
 800760e:	3064      	adds	r0, #100	; 0x64
 8007610:	f006 fe0a 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 8007614:	0020      	movs	r0, r4
 8007616:	3074      	adds	r0, #116	; 0x74
 8007618:	f006 fe06 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 800761c:	4c1d      	ldr	r4, [pc, #116]	; (8007694 <vRegisterCLICommands+0x12c>)
 800761e:	1d20      	adds	r0, r4, #4
 8007620:	f006 fe02 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007624:	0020      	movs	r0, r4
 8007626:	3014      	adds	r0, #20
 8007628:	f006 fdfe 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 800762c:	0020      	movs	r0, r4
 800762e:	3024      	adds	r0, #36	; 0x24
 8007630:	f006 fdfa 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007634:	0020      	movs	r0, r4
 8007636:	3034      	adds	r0, #52	; 0x34
 8007638:	f006 fdf6 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 800763c:	0020      	movs	r0, r4
 800763e:	3044      	adds	r0, #68	; 0x44
 8007640:	f006 fdf2 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 8007644:	0020      	movs	r0, r4
 8007646:	3054      	adds	r0, #84	; 0x54
 8007648:	f006 fdee 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 800764c:	0020      	movs	r0, r4
 800764e:	3064      	adds	r0, #100	; 0x64
 8007650:	f006 fdea 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 8007654:	0020      	movs	r0, r4
 8007656:	3074      	adds	r0, #116	; 0x74
 8007658:	f006 fde6 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 800765c:	4c0e      	ldr	r4, [pc, #56]	; (8007698 <vRegisterCLICommands+0x130>)
 800765e:	1d20      	adds	r0, r4, #4
 8007660:	f006 fde2 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007664:	0020      	movs	r0, r4
 8007666:	3014      	adds	r0, #20
 8007668:	f006 fdde 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 800766c:	0020      	movs	r0, r4
 800766e:	3024      	adds	r0, #36	; 0x24
 8007670:	f006 fdda 	bl	800e228 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =34;			// Add "help" command
 8007674:	4b09      	ldr	r3, [pc, #36]	; (800769c <vRegisterCLICommands+0x134>)
 8007676:	2222      	movs	r2, #34	; 0x22
 8007678:	701a      	strb	r2, [r3, #0]
	numOfBosCommands =35;
 800767a:	3201      	adds	r2, #1
 800767c:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 800767e:	f003 f9b7 	bl	800a9f0 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 8007682:	f7ff ff6f 	bl	8007564 <RegisterUserCLICommands>
}
 8007686:	bd10      	pop	{r4, pc}
 8007688:	08019870 	.word	0x08019870
 800768c:	080198f0 	.word	0x080198f0
 8007690:	08019970 	.word	0x08019970
 8007694:	080199f0 	.word	0x080199f0
 8007698:	08019a70 	.word	0x08019a70
 800769c:	200011e4 	.word	0x200011e4

080076a0 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	0005      	movs	r5, r0
 80076a4:	000e      	movs	r6, r1
 80076a6:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 80076a8:	f003 f9aa 	bl	800aa00 <GetPort>
 80076ac:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80076ae:	4b0e      	ldr	r3, [pc, #56]	; (80076e8 <StartDMAstream+0x48>)
 80076b0:	5c1b      	ldrb	r3, [r3, r0]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d903      	bls.n	80076be <StartDMAstream+0x1e>
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d001      	beq.n	80076be <StartDMAstream+0x1e>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 80076ba:	2017      	movs	r0, #23
 80076bc:	e012      	b.n	80076e4 <StartDMAstream+0x44>
		SwitchMsgDMAToStream(srcPort);
 80076be:	0020      	movs	r0, r4
 80076c0:	f003 fad2 	bl	800ac68 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 80076c4:	1e62      	subs	r2, r4, #1
 80076c6:	4b09      	ldr	r3, [pc, #36]	; (80076ec <StartDMAstream+0x4c>)
 80076c8:	0092      	lsls	r2, r2, #2
 80076ca:	50d6      	str	r6, [r2, r3]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 80076cc:	4906      	ldr	r1, [pc, #24]	; (80076e8 <StartDMAstream+0x48>)
 80076ce:	2002      	movs	r0, #2
 80076d0:	5508      	strb	r0, [r1, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 80076d2:	189b      	adds	r3, r3, r2
 80076d4:	2200      	movs	r2, #0
 80076d6:	615a      	str	r2, [r3, #20]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80076d8:	003a      	movs	r2, r7
 80076da:	0031      	movs	r1, r6
 80076dc:	0028      	movs	r0, r5
 80076de:	f004 f827 	bl	800b730 <DMA_STREAM_Setup>
	
	return BOS_OK;
 80076e2:	2000      	movs	r0, #0
}
 80076e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	20000c5c 	.word	0x20000c5c
 80076ec:	200019bc 	.word	0x200019bc

080076f0 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 80076f0:	b570      	push	{r4, r5, r6, lr}
 80076f2:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 80076f4:	4b15      	ldr	r3, [pc, #84]	; (800774c <DMA_IRQHandler+0x5c>)
 80076f6:	5c1b      	ldrb	r3, [r3, r0]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d008      	beq.n	800770e <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 80076fc:	3c01      	subs	r4, #1
 80076fe:	00e0      	lsls	r0, r4, #3
 8007700:	1b00      	subs	r0, r0, r4
 8007702:	00c0      	lsls	r0, r0, #3
 8007704:	4c12      	ldr	r4, [pc, #72]	; (8007750 <DMA_IRQHandler+0x60>)
 8007706:	1900      	adds	r0, r0, r4
 8007708:	f009 f8fe 	bl	8010908 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 800770c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 800770e:	1e45      	subs	r5, r0, #1
 8007710:	00e8      	lsls	r0, r5, #3
 8007712:	1b40      	subs	r0, r0, r5
 8007714:	00c0      	lsls	r0, r0, #3
 8007716:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <DMA_IRQHandler+0x64>)
 8007718:	18c0      	adds	r0, r0, r3
 800771a:	f009 f8f5 	bl	8010908 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 800771e:	00aa      	lsls	r2, r5, #2
 8007720:	4b0d      	ldr	r3, [pc, #52]	; (8007758 <DMA_IRQHandler+0x68>)
 8007722:	189b      	adds	r3, r3, r2
 8007724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007726:	2a00      	cmp	r2, #0
 8007728:	d005      	beq.n	8007736 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 800772a:	00a9      	lsls	r1, r5, #2
 800772c:	4b0a      	ldr	r3, [pc, #40]	; (8007758 <DMA_IRQHandler+0x68>)
 800772e:	185b      	adds	r3, r3, r1
 8007730:	6959      	ldr	r1, [r3, #20]
 8007732:	3101      	adds	r1, #1
 8007734:	6159      	str	r1, [r3, #20]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 8007736:	00ad      	lsls	r5, r5, #2
 8007738:	4b07      	ldr	r3, [pc, #28]	; (8007758 <DMA_IRQHandler+0x68>)
 800773a:	195d      	adds	r5, r3, r5
 800773c:	696b      	ldr	r3, [r5, #20]
 800773e:	429a      	cmp	r2, r3
 8007740:	d8e4      	bhi.n	800770c <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007742:	0020      	movs	r0, r4
 8007744:	f003 fa64 	bl	800ac10 <StopStreamDMA>
}
 8007748:	e7e0      	b.n	800770c <DMA_IRQHandler+0x1c>
 800774a:	46c0      	nop			; (mov r8, r8)
 800774c:	20000c5c 	.word	0x20000c5c
 8007750:	20002848 	.word	0x20002848
 8007754:	20002650 	.word	0x20002650
 8007758:	200019bc 	.word	0x200019bc

0800775c <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 800775c:	4b09      	ldr	r3, [pc, #36]	; (8007784 <ResetUartORE+0x28>)
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	2308      	movs	r3, #8
 8007762:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007764:	4a08      	ldr	r2, [pc, #32]	; (8007788 <ResetUartORE+0x2c>)
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800776a:	4a08      	ldr	r2, [pc, #32]	; (800778c <ResetUartORE+0x30>)
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 8007770:	4a07      	ldr	r2, [pc, #28]	; (8007790 <ResetUartORE+0x34>)
 8007772:	6812      	ldr	r2, [r2, #0]
 8007774:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007776:	4a07      	ldr	r2, [pc, #28]	; (8007794 <ResetUartORE+0x38>)
 8007778:	6812      	ldr	r2, [r2, #0]
 800777a:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800777c:	4a06      	ldr	r2, [pc, #24]	; (8007798 <ResetUartORE+0x3c>)
 800777e:	6812      	ldr	r2, [r2, #0]
 8007780:	6213      	str	r3, [r2, #32]
#endif
}
 8007782:	4770      	bx	lr
 8007784:	200021d8 	.word	0x200021d8
 8007788:	20002514 	.word	0x20002514
 800778c:	200024a4 	.word	0x200024a4
 8007790:	20002434 	.word	0x20002434
 8007794:	200023c4 	.word	0x200023c4
 8007798:	20002354 	.word	0x20002354

0800779c <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 800779c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800779e:	b08f      	sub	sp, #60	; 0x3c
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80077a0:	2400      	movs	r4, #0
 80077a2:	9403      	str	r4, [sp, #12]
 80077a4:	9402      	str	r4, [sp, #8]
 80077a6:	4d56      	ldr	r5, [pc, #344]	; (8007900 <MX_FREERTOS_Init+0x164>)
 80077a8:	9501      	str	r5, [sp, #4]
 80077aa:	2603      	movs	r6, #3
 80077ac:	9600      	str	r6, [sp, #0]
 80077ae:	2300      	movs	r3, #0
 80077b0:	22f0      	movs	r2, #240	; 0xf0
 80077b2:	4954      	ldr	r1, [pc, #336]	; (8007904 <MX_FREERTOS_Init+0x168>)
 80077b4:	4854      	ldr	r0, [pc, #336]	; (8007908 <MX_FREERTOS_Init+0x16c>)
 80077b6:	f007 faa1 	bl	800ecfc <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(BACKEND_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 80077ba:	9403      	str	r4, [sp, #12]
 80077bc:	9402      	str	r4, [sp, #8]
 80077be:	1d2b      	adds	r3, r5, #4
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	9600      	str	r6, [sp, #0]
 80077c4:	2300      	movs	r3, #0
 80077c6:	22f0      	movs	r2, #240	; 0xf0
 80077c8:	4950      	ldr	r1, [pc, #320]	; (800790c <MX_FREERTOS_Init+0x170>)
 80077ca:	4851      	ldr	r0, [pc, #324]	; (8007910 <MX_FREERTOS_Init+0x174>)
 80077cc:	f007 fa96 	bl	800ecfc <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(USER_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 80077d0:	9403      	str	r4, [sp, #12]
 80077d2:	9402      	str	r4, [sp, #8]
 80077d4:	002b      	movs	r3, r5
 80077d6:	3308      	adds	r3, #8
 80077d8:	9301      	str	r3, [sp, #4]
 80077da:	9600      	str	r6, [sp, #0]
 80077dc:	2300      	movs	r3, #0
 80077de:	22f0      	movs	r2, #240	; 0xf0
 80077e0:	494c      	ldr	r1, [pc, #304]	; (8007914 <MX_FREERTOS_Init+0x178>)
 80077e2:	484d      	ldr	r0, [pc, #308]	; (8007918 <MX_FREERTOS_Init+0x17c>)
 80077e4:	f007 fa8a 	bl	800ecfc <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 80077e8:	f7ff febe 	bl	8007568 <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(CLI_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 80077ec:	228c      	movs	r2, #140	; 0x8c
 80077ee:	9403      	str	r4, [sp, #12]
 80077f0:	9402      	str	r4, [sp, #8]
 80077f2:	002b      	movs	r3, r5
 80077f4:	330c      	adds	r3, #12
 80077f6:	9301      	str	r3, [sp, #4]
 80077f8:	9600      	str	r6, [sp, #0]
 80077fa:	2300      	movs	r3, #0
 80077fc:	0052      	lsls	r2, r2, #1
 80077fe:	4947      	ldr	r1, [pc, #284]	; (800791c <MX_FREERTOS_Init+0x180>)
 8007800:	4847      	ldr	r0, [pc, #284]	; (8007920 <MX_FREERTOS_Init+0x184>)
 8007802:	f007 fa7b 	bl	800ecfc <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007806:	4e47      	ldr	r6, [pc, #284]	; (8007924 <MX_FREERTOS_Init+0x188>)
 8007808:	9403      	str	r4, [sp, #12]
 800780a:	9402      	str	r4, [sp, #8]
 800780c:	002b      	movs	r3, r5
 800780e:	3310      	adds	r3, #16
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	2704      	movs	r7, #4
 8007814:	9700      	str	r7, [sp, #0]
 8007816:	2301      	movs	r3, #1
 8007818:	22f0      	movs	r2, #240	; 0xf0
 800781a:	4943      	ldr	r1, [pc, #268]	; (8007928 <MX_FREERTOS_Init+0x18c>)
 800781c:	0030      	movs	r0, r6
 800781e:	f007 fa6d 	bl	800ecfc <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8007822:	9403      	str	r4, [sp, #12]
 8007824:	9402      	str	r4, [sp, #8]
 8007826:	002b      	movs	r3, r5
 8007828:	3314      	adds	r3, #20
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	9700      	str	r7, [sp, #0]
 800782e:	2302      	movs	r3, #2
 8007830:	22f0      	movs	r2, #240	; 0xf0
 8007832:	493e      	ldr	r1, [pc, #248]	; (800792c <MX_FREERTOS_Init+0x190>)
 8007834:	0030      	movs	r0, r6
 8007836:	f007 fa61 	bl	800ecfc <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 800783a:	9403      	str	r4, [sp, #12]
 800783c:	9402      	str	r4, [sp, #8]
 800783e:	002b      	movs	r3, r5
 8007840:	3318      	adds	r3, #24
 8007842:	9301      	str	r3, [sp, #4]
 8007844:	9700      	str	r7, [sp, #0]
 8007846:	2303      	movs	r3, #3
 8007848:	22f0      	movs	r2, #240	; 0xf0
 800784a:	4939      	ldr	r1, [pc, #228]	; (8007930 <MX_FREERTOS_Init+0x194>)
 800784c:	0030      	movs	r0, r6
 800784e:	f007 fa55 	bl	800ecfc <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007852:	9403      	str	r4, [sp, #12]
 8007854:	9402      	str	r4, [sp, #8]
 8007856:	002b      	movs	r3, r5
 8007858:	331c      	adds	r3, #28
 800785a:	9301      	str	r3, [sp, #4]
 800785c:	9700      	str	r7, [sp, #0]
 800785e:	2304      	movs	r3, #4
 8007860:	22f0      	movs	r2, #240	; 0xf0
 8007862:	4934      	ldr	r1, [pc, #208]	; (8007934 <MX_FREERTOS_Init+0x198>)
 8007864:	0030      	movs	r0, r6
 8007866:	f007 fa49 	bl	800ecfc <xTaskGenericCreate>
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 800786a:	9403      	str	r4, [sp, #12]
 800786c:	9402      	str	r4, [sp, #8]
 800786e:	002b      	movs	r3, r5
 8007870:	3320      	adds	r3, #32
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	9700      	str	r7, [sp, #0]
 8007876:	2305      	movs	r3, #5
 8007878:	22f0      	movs	r2, #240	; 0xf0
 800787a:	492f      	ldr	r1, [pc, #188]	; (8007938 <MX_FREERTOS_Init+0x19c>)
 800787c:	0030      	movs	r0, r6
 800787e:	f007 fa3d 	bl	800ecfc <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
 8007882:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007884:	2101      	movs	r1, #1
 8007886:	a80d      	add	r0, sp, #52	; 0x34
 8007888:	f006 fc3a 	bl	800e100 <osSemaphoreCreate>
 800788c:	62a8      	str	r0, [r5, #40]	; 0x28
	osSemaphoreDef(SemaphoreP2);
 800788e:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007890:	2101      	movs	r1, #1
 8007892:	a80c      	add	r0, sp, #48	; 0x30
 8007894:	f006 fc34 	bl	800e100 <osSemaphoreCreate>
 8007898:	6468      	str	r0, [r5, #68]	; 0x44
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
 800789a:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 800789c:	2101      	movs	r1, #1
 800789e:	a80b      	add	r0, sp, #44	; 0x2c
 80078a0:	f006 fc2e 	bl	800e100 <osSemaphoreCreate>
 80078a4:	62e8      	str	r0, [r5, #44]	; 0x2c
	osSemaphoreDef(SemaphoreP4);
 80078a6:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80078a8:	2101      	movs	r1, #1
 80078aa:	a80a      	add	r0, sp, #40	; 0x28
 80078ac:	f006 fc28 	bl	800e100 <osSemaphoreCreate>
 80078b0:	64a8      	str	r0, [r5, #72]	; 0x48
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
 80078b2:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80078b4:	2101      	movs	r1, #1
 80078b6:	a809      	add	r0, sp, #36	; 0x24
 80078b8:	f006 fc22 	bl	800e100 <osSemaphoreCreate>
 80078bc:	6328      	str	r0, [r5, #48]	; 0x30
	osSemaphoreDef(SemaphoreP6);
 80078be:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 80078c0:	2101      	movs	r1, #1
 80078c2:	a808      	add	r0, sp, #32
 80078c4:	f006 fc1c 	bl	800e100 <osSemaphoreCreate>
 80078c8:	64e8      	str	r0, [r5, #76]	; 0x4c
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
 80078ca:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 80078cc:	2101      	movs	r1, #1
 80078ce:	a807      	add	r0, sp, #28
 80078d0:	f006 fc16 	bl	800e100 <osSemaphoreCreate>
 80078d4:	6368      	str	r0, [r5, #52]	; 0x34
	osSemaphoreDef(SemaphoreP8);
 80078d6:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 80078d8:	2101      	movs	r1, #1
 80078da:	a806      	add	r0, sp, #24
 80078dc:	f006 fc10 	bl	800e100 <osSemaphoreCreate>
 80078e0:	6528      	str	r0, [r5, #80]	; 0x50
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
 80078e2:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 80078e4:	2101      	movs	r1, #1
 80078e6:	a805      	add	r0, sp, #20
 80078e8:	f006 fc0a 	bl	800e100 <osSemaphoreCreate>
 80078ec:	63a8      	str	r0, [r5, #56]	; 0x38
	osSemaphoreDef(SemaphoreP10);
 80078ee:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 80078f0:	2101      	movs	r1, #1
 80078f2:	a804      	add	r0, sp, #16
 80078f4:	f006 fc04 	bl	800e100 <osSemaphoreCreate>
 80078f8:	6568      	str	r0, [r5, #84]	; 0x54
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
#endif
	
}
 80078fa:	b00f      	add	sp, #60	; 0x3c
 80078fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078fe:	46c0      	nop			; (mov r8, r8)
 8007900:	20001e08 	.word	0x20001e08
 8007904:	0801c338 	.word	0x0801c338
 8007908:	08007c91 	.word	0x08007c91
 800790c:	0801c344 	.word	0x0801c344
 8007910:	08008691 	.word	0x08008691
 8007914:	0801c350 	.word	0x0801c350
 8007918:	08012ffb 	.word	0x08012ffb
 800791c:	0801c35c 	.word	0x0801c35c
 8007920:	08005345 	.word	0x08005345
 8007924:	08008a1d 	.word	0x08008a1d
 8007928:	0801c364 	.word	0x0801c364
 800792c:	0801c370 	.word	0x0801c370
 8007930:	0801c37c 	.word	0x0801c37c
 8007934:	0801c388 	.word	0x0801c388
 8007938:	0801c394 	.word	0x0801c394

0800793c <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 800793e:	4bce      	ldr	r3, [pc, #824]	; (8007c78 <ExecuteMonitor+0x33c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b03      	cmp	r3, #3
 8007944:	d000      	beq.n	8007948 <ExecuteMonitor+0xc>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
		           }
	}
  }
}
 8007946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Monitor_time =0;
 8007948:	4bcb      	ldr	r3, [pc, #812]	; (8007c78 <ExecuteMonitor+0x33c>)
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
	flag=0;
 800794e:	711a      	strb	r2, [r3, #4]
	currentCharacter=SPACE;
 8007950:	3220      	adds	r2, #32
 8007952:	715a      	strb	r2, [r3, #5]
 8007954:	e05f      	b.n	8007a16 <ExecuteMonitor+0xda>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 8007956:	4ac9      	ldr	r2, [pc, #804]	; (8007c7c <ExecuteMonitor+0x340>)
 8007958:	205c      	movs	r0, #92	; 0x5c
 800795a:	5c11      	ldrb	r1, [r2, r0]
 800795c:	1c4c      	adds	r4, r1, #1
 800795e:	5414      	strb	r4, [r2, r0]
 8007960:	1851      	adds	r1, r2, r1
 8007962:	3004      	adds	r0, #4
 8007964:	540b      	strb	r3, [r1, r0]
								perviousCharacter=currentCharacter;
 8007966:	215d      	movs	r1, #93	; 0x5d
 8007968:	5453      	strb	r3, [r2, r1]
								currentCharacter= INTIAL_VALUE;
 800796a:	4bc3      	ldr	r3, [pc, #780]	; (8007c78 <ExecuteMonitor+0x33c>)
 800796c:	2203      	movs	r2, #3
 800796e:	715a      	strb	r2, [r3, #5]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007970:	4ac2      	ldr	r2, [pc, #776]	; (8007c7c <ExecuteMonitor+0x340>)
 8007972:	235d      	movs	r3, #93	; 0x5d
 8007974:	5cd3      	ldrb	r3, [r2, r3]
 8007976:	2b20      	cmp	r3, #32
 8007978:	d014      	beq.n	80079a4 <ExecuteMonitor+0x68>
 800797a:	2b00      	cmp	r3, #0
 800797c:	d012      	beq.n	80079a4 <ExecuteMonitor+0x68>
 800797e:	4bbe      	ldr	r3, [pc, #760]	; (8007c78 <ExecuteMonitor+0x33c>)
 8007980:	791b      	ldrb	r3, [r3, #4]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d00e      	beq.n	80079a4 <ExecuteMonitor+0x68>
 8007986:	2b02      	cmp	r3, #2
 8007988:	d00c      	beq.n	80079a4 <ExecuteMonitor+0x68>
		            	    perviousCharacter= INTIAL_VALUE;
 800798a:	4dbc      	ldr	r5, [pc, #752]	; (8007c7c <ExecuteMonitor+0x340>)
 800798c:	245d      	movs	r4, #93	; 0x5d
 800798e:	2303      	movs	r3, #3
 8007990:	552b      	strb	r3, [r5, r4]
		            	    Delay_us(100);
 8007992:	2064      	movs	r0, #100	; 0x64
 8007994:	f006 f822 	bl	800d9dc <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 8007998:	4bb7      	ldr	r3, [pc, #732]	; (8007c78 <ExecuteMonitor+0x33c>)
 800799a:	795b      	ldrb	r3, [r3, #5]
 800799c:	5d2a      	ldrb	r2, [r5, r4]
 800799e:	4293      	cmp	r3, r2
 80079a0:	d1d9      	bne.n	8007956 <ExecuteMonitor+0x1a>
 80079a2:	e7e5      	b.n	8007970 <ExecuteMonitor+0x34>
                   if(flag == NonActive)
 80079a4:	4bb4      	ldr	r3, [pc, #720]	; (8007c78 <ExecuteMonitor+0x33c>)
 80079a6:	791d      	ldrb	r5, [r3, #4]
 80079a8:	2d00      	cmp	r5, #0
 80079aa:	d12c      	bne.n	8007a06 <ExecuteMonitor+0xca>
                	   nonProcessingParameterIndex=0;
 80079ac:	4bb3      	ldr	r3, [pc, #716]	; (8007c7c <ExecuteMonitor+0x340>)
 80079ae:	225c      	movs	r2, #92	; 0x5c
 80079b0:	2100      	movs	r1, #0
 80079b2:	5499      	strb	r1, [r3, r2]
 		            if(FirstCharacterInParameter == '[')
 80079b4:	3204      	adds	r2, #4
 80079b6:	5c9b      	ldrb	r3, [r3, r2]
 80079b8:	2b5b      	cmp	r3, #91	; 0x5b
 80079ba:	d031      	beq.n	8007a20 <ExecuteMonitor+0xe4>
 		            else if(FirstCharacterInParameter == '#')
 80079bc:	2b23      	cmp	r3, #35	; 0x23
 80079be:	d070      	beq.n	8007aa2 <ExecuteMonitor+0x166>
 		            else if(FirstCharacterInParameter == '=')
 80079c0:	2b3d      	cmp	r3, #61	; 0x3d
 80079c2:	d100      	bne.n	80079c6 <ExecuteMonitor+0x8a>
 80079c4:	e084      	b.n	8007ad0 <ExecuteMonitor+0x194>
               	   desiredArray=ParameterLocationIn2dArray;
 80079c6:	4ead      	ldr	r6, [pc, #692]	; (8007c7c <ExecuteMonitor+0x340>)
 80079c8:	2378      	movs	r3, #120	; 0x78
 80079ca:	5cf2      	ldrb	r2, [r6, r3]
 80079cc:	4cac      	ldr	r4, [pc, #688]	; (8007c80 <ExecuteMonitor+0x344>)
 80079ce:	73a2      	strb	r2, [r4, #14]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 80079d0:	3410      	adds	r4, #16
 80079d2:	0113      	lsls	r3, r2, #4
 80079d4:	1a9b      	subs	r3, r3, r2
 80079d6:	18e4      	adds	r4, r4, r3
 80079d8:	220f      	movs	r2, #15
 80079da:	2100      	movs	r1, #0
 80079dc:	0020      	movs	r0, r4
 80079de:	f00b fd80 	bl	80134e2 <memset>
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 80079e2:	0037      	movs	r7, r6
 80079e4:	3778      	adds	r7, #120	; 0x78
 80079e6:	220f      	movs	r2, #15
 80079e8:	0039      	movs	r1, r7
 80079ea:	0020      	movs	r0, r4
 80079ec:	f00b fd70 	bl	80134d0 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 80079f0:	0030      	movs	r0, r6
 80079f2:	3060      	adds	r0, #96	; 0x60
 80079f4:	2214      	movs	r2, #20
 80079f6:	2100      	movs	r1, #0
 80079f8:	f00b fd73 	bl	80134e2 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 80079fc:	2214      	movs	r2, #20
 80079fe:	2100      	movs	r1, #0
 8007a00:	0038      	movs	r0, r7
 8007a02:	f00b fd6e 	bl	80134e2 <memset>
                   if(flag == RUN_FOR_ONCE)
 8007a06:	2d01      	cmp	r5, #1
 8007a08:	d100      	bne.n	8007a0c <ExecuteMonitor+0xd0>
 8007a0a:	e083      	b.n	8007b14 <ExecuteMonitor+0x1d8>
                   if(flag == CONTINUOUS_RUN)
 8007a0c:	4b9a      	ldr	r3, [pc, #616]	; (8007c78 <ExecuteMonitor+0x33c>)
 8007a0e:	791b      	ldrb	r3, [r3, #4]
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d100      	bne.n	8007a16 <ExecuteMonitor+0xda>
 8007a14:	e0d0      	b.n	8007bb8 <ExecuteMonitor+0x27c>
		                    nonProcessingParameterIndex=0;
 8007a16:	4a99      	ldr	r2, [pc, #612]	; (8007c7c <ExecuteMonitor+0x340>)
 8007a18:	235c      	movs	r3, #92	; 0x5c
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	54d1      	strb	r1, [r2, r3]
 8007a1e:	e7b4      	b.n	800798a <ExecuteMonitor+0x4e>
 		            	nonProcessingParameterIndex++;
 8007a20:	4a96      	ldr	r2, [pc, #600]	; (8007c7c <ExecuteMonitor+0x340>)
 8007a22:	3301      	adds	r3, #1
 8007a24:	3101      	adds	r1, #1
 8007a26:	54d1      	strb	r1, [r2, r3]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007a28:	4e94      	ldr	r6, [pc, #592]	; (8007c7c <ExecuteMonitor+0x340>)
 8007a2a:	235c      	movs	r3, #92	; 0x5c
 8007a2c:	5cf4      	ldrb	r4, [r6, r3]
 8007a2e:	1932      	adds	r2, r6, r4
 8007a30:	3304      	adds	r3, #4
 8007a32:	5cd0      	ldrb	r0, [r2, r3]
 8007a34:	210a      	movs	r1, #10
 8007a36:	f7f8 fc11 	bl	800025c <__aeabi_uidivmod>
 8007a3a:	b2c9      	uxtb	r1, r1
 8007a3c:	2374      	movs	r3, #116	; 0x74
 8007a3e:	5cf3      	ldrb	r3, [r6, r3]
 8007a40:	4299      	cmp	r1, r3
 8007a42:	d004      	beq.n	8007a4e <ExecuteMonitor+0x112>
 		            			nonProcessingParameterIndex+=2;
 8007a44:	3402      	adds	r4, #2
 8007a46:	4a8d      	ldr	r2, [pc, #564]	; (8007c7c <ExecuteMonitor+0x340>)
 8007a48:	235c      	movs	r3, #92	; 0x5c
 8007a4a:	54d4      	strb	r4, [r2, r3]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007a4c:	e7ec      	b.n	8007a28 <ExecuteMonitor+0xec>
 		            			nonProcessingParameterIndex++;
 8007a4e:	3401      	adds	r4, #1
 8007a50:	b2e4      	uxtb	r4, r4
 8007a52:	235c      	movs	r3, #92	; 0x5c
 8007a54:	54f4      	strb	r4, [r6, r3]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007a56:	1934      	adds	r4, r6, r4
 8007a58:	3304      	adds	r3, #4
 8007a5a:	5ce0      	ldrb	r0, [r4, r3]
 8007a5c:	210a      	movs	r1, #10
 8007a5e:	f7f8 fbfd 	bl	800025c <__aeabi_uidivmod>
 8007a62:	2378      	movs	r3, #120	; 0x78
 8007a64:	54f1      	strb	r1, [r6, r3]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 8007a66:	e003      	b.n	8007a70 <ExecuteMonitor+0x134>
 		            		nonProcessingParameterIndex++;
 8007a68:	3301      	adds	r3, #1
 8007a6a:	4984      	ldr	r1, [pc, #528]	; (8007c7c <ExecuteMonitor+0x340>)
 8007a6c:	225c      	movs	r2, #92	; 0x5c
 8007a6e:	548b      	strb	r3, [r1, r2]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 8007a70:	4a82      	ldr	r2, [pc, #520]	; (8007c7c <ExecuteMonitor+0x340>)
 8007a72:	235c      	movs	r3, #92	; 0x5c
 8007a74:	5cd3      	ldrb	r3, [r2, r3]
 8007a76:	18d2      	adds	r2, r2, r3
 8007a78:	2160      	movs	r1, #96	; 0x60
 8007a7a:	5c52      	ldrb	r2, [r2, r1]
 8007a7c:	2a5d      	cmp	r2, #93	; 0x5d
 8007a7e:	d1f3      	bne.n	8007a68 <ExecuteMonitor+0x12c>
 		            	nonProcessingParameterIndex++;
 8007a80:	3301      	adds	r3, #1
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	487d      	ldr	r0, [pc, #500]	; (8007c7c <ExecuteMonitor+0x340>)
 8007a86:	3a01      	subs	r2, #1
 8007a88:	5483      	strb	r3, [r0, r2]
 		            	processingParameterIndex=1;
 8007a8a:	4a7d      	ldr	r2, [pc, #500]	; (8007c80 <ExecuteMonitor+0x344>)
 8007a8c:	395f      	subs	r1, #95	; 0x5f
 8007a8e:	7311      	strb	r1, [r2, #12]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007a90:	0001      	movs	r1, r0
 8007a92:	3160      	adds	r1, #96	; 0x60
 8007a94:	18c9      	adds	r1, r1, r3
 8007a96:	2214      	movs	r2, #20
 8007a98:	1ad2      	subs	r2, r2, r3
 8007a9a:	3079      	adds	r0, #121	; 0x79
 8007a9c:	f00b fd18 	bl	80134d0 <memcpy>
 8007aa0:	e791      	b.n	80079c6 <ExecuteMonitor+0x8a>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 8007aa2:	4c76      	ldr	r4, [pc, #472]	; (8007c7c <ExecuteMonitor+0x340>)
 8007aa4:	0023      	movs	r3, r4
 8007aa6:	3360      	adds	r3, #96	; 0x60
 8007aa8:	7858      	ldrb	r0, [r3, #1]
 8007aaa:	210a      	movs	r1, #10
 8007aac:	f7f8 fbd6 	bl	800025c <__aeabi_uidivmod>
 8007ab0:	2378      	movs	r3, #120	; 0x78
 8007ab2:	54e1      	strb	r1, [r4, r3]
 		            	nonProcessingParameterIndex=2;
 8007ab4:	3b1c      	subs	r3, #28
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	54e2      	strb	r2, [r4, r3]
 		            	processingParameterIndex=1;
 8007aba:	4b71      	ldr	r3, [pc, #452]	; (8007c80 <ExecuteMonitor+0x344>)
 8007abc:	3a01      	subs	r2, #1
 8007abe:	731a      	strb	r2, [r3, #12]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007ac0:	0020      	movs	r0, r4
 8007ac2:	3079      	adds	r0, #121	; 0x79
 8007ac4:	0021      	movs	r1, r4
 8007ac6:	3162      	adds	r1, #98	; 0x62
 8007ac8:	3211      	adds	r2, #17
 8007aca:	f00b fd01 	bl	80134d0 <memcpy>
 8007ace:	e77a      	b.n	80079c6 <ExecuteMonitor+0x8a>
                	    digitTheCommand=nonProcessingParameter[1]%10;
 8007ad0:	4c6a      	ldr	r4, [pc, #424]	; (8007c7c <ExecuteMonitor+0x340>)
 8007ad2:	0026      	movs	r6, r4
 8007ad4:	3660      	adds	r6, #96	; 0x60
 8007ad6:	7870      	ldrb	r0, [r6, #1]
 8007ad8:	210a      	movs	r1, #10
 8007ada:	f7f8 fbbf 	bl	800025c <__aeabi_uidivmod>
 8007ade:	2374      	movs	r3, #116	; 0x74
 8007ae0:	54e1      	strb	r1, [r4, r3]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 8007ae2:	78b0      	ldrb	r0, [r6, #2]
 8007ae4:	4f66      	ldr	r7, [pc, #408]	; (8007c80 <ExecuteMonitor+0x344>)
 8007ae6:	210a      	movs	r1, #10
 8007ae8:	f7f8 fbb8 	bl	800025c <__aeabi_uidivmod>
 8007aec:	7379      	strb	r1, [r7, #13]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007aee:	78f0      	ldrb	r0, [r6, #3]
 8007af0:	210a      	movs	r1, #10
 8007af2:	f7f8 fbb3 	bl	800025c <__aeabi_uidivmod>
 8007af6:	2378      	movs	r3, #120	; 0x78
 8007af8:	54e1      	strb	r1, [r4, r3]
                	    nonProcessingParameterIndex=4;
 8007afa:	3b1c      	subs	r3, #28
 8007afc:	2204      	movs	r2, #4
 8007afe:	54e2      	strb	r2, [r4, r3]
                	    processingParameterIndex=1;
 8007b00:	3b5b      	subs	r3, #91	; 0x5b
 8007b02:	733b      	strb	r3, [r7, #12]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007b04:	0020      	movs	r0, r4
 8007b06:	3079      	adds	r0, #121	; 0x79
 8007b08:	0021      	movs	r1, r4
 8007b0a:	3164      	adds	r1, #100	; 0x64
 8007b0c:	320c      	adds	r2, #12
 8007b0e:	f00b fcdf 	bl	80134d0 <memcpy>
 8007b12:	e758      	b.n	80079c6 <ExecuteMonitor+0x8a>
                	finalMatrixIndex=0;
 8007b14:	4b5b      	ldr	r3, [pc, #364]	; (8007c84 <ExecuteMonitor+0x348>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	721a      	strb	r2, [r3, #8]
                	twoDMatrixIndex=1;
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	7259      	strb	r1, [r3, #9]
		          	counter=0;
 8007b1e:	729a      	strb	r2, [r3, #10]
		           while(counter != numCommandParameters)
 8007b20:	e005      	b.n	8007b2e <ExecuteMonitor+0x1f2>
		                   counter++;
 8007b22:	4b58      	ldr	r3, [pc, #352]	; (8007c84 <ExecuteMonitor+0x348>)
 8007b24:	7a9a      	ldrb	r2, [r3, #10]
 8007b26:	3201      	adds	r2, #1
 8007b28:	729a      	strb	r2, [r3, #10]
		                   twoDMatrixIndex=1;
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	725a      	strb	r2, [r3, #9]
		           while(counter != numCommandParameters)
 8007b2e:	4b55      	ldr	r3, [pc, #340]	; (8007c84 <ExecuteMonitor+0x348>)
 8007b30:	7a9a      	ldrb	r2, [r3, #10]
 8007b32:	4b53      	ldr	r3, [pc, #332]	; (8007c80 <ExecuteMonitor+0x344>)
 8007b34:	7b5b      	ldrb	r3, [r3, #13]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d01b      	beq.n	8007b72 <ExecuteMonitor+0x236>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007b3a:	4c52      	ldr	r4, [pc, #328]	; (8007c84 <ExecuteMonitor+0x348>)
 8007b3c:	7aa3      	ldrb	r3, [r4, #10]
 8007b3e:	7a60      	ldrb	r0, [r4, #9]
 8007b40:	1c42      	adds	r2, r0, #1
 8007b42:	7262      	strb	r2, [r4, #9]
 8007b44:	7a22      	ldrb	r2, [r4, #8]
 8007b46:	1c51      	adds	r1, r2, #1
 8007b48:	7221      	strb	r1, [r4, #8]
 8007b4a:	0119      	lsls	r1, r3, #4
 8007b4c:	1ac9      	subs	r1, r1, r3
 8007b4e:	4b4c      	ldr	r3, [pc, #304]	; (8007c80 <ExecuteMonitor+0x344>)
 8007b50:	185b      	adds	r3, r3, r1
 8007b52:	181b      	adds	r3, r3, r0
 8007b54:	7c1b      	ldrb	r3, [r3, #16]
 8007b56:	18a2      	adds	r2, r4, r2
 8007b58:	7313      	strb	r3, [r2, #12]
		            	Delay_ms(1);
 8007b5a:	2001      	movs	r0, #1
 8007b5c:	f008 f9c8 	bl	800fef0 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007b60:	7a23      	ldrb	r3, [r4, #8]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	18e4      	adds	r4, r4, r3
 8007b66:	7b23      	ldrb	r3, [r4, #12]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0da      	beq.n	8007b22 <ExecuteMonitor+0x1e6>
 8007b6c:	2b20      	cmp	r3, #32
 8007b6e:	d1e4      	bne.n	8007b3a <ExecuteMonitor+0x1fe>
 8007b70:	e7d7      	b.n	8007b22 <ExecuteMonitor+0x1e6>
		          		   flag=0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	4a40      	ldr	r2, [pc, #256]	; (8007c78 <ExecuteMonitor+0x33c>)
 8007b76:	7113      	strb	r3, [r2, #4]
		          		   counter=0;
 8007b78:	4a42      	ldr	r2, [pc, #264]	; (8007c84 <ExecuteMonitor+0x348>)
 8007b7a:	7293      	strb	r3, [r2, #10]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007b7c:	214c      	movs	r1, #76	; 0x4c
 8007b7e:	5453      	strb	r3, [r2, r1]
 8007b80:	e00e      	b.n	8007ba0 <ExecuteMonitor+0x264>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007b82:	4c40      	ldr	r4, [pc, #256]	; (8007c84 <ExecuteMonitor+0x348>)
 8007b84:	18a3      	adds	r3, r4, r2
 8007b86:	7b19      	ldrb	r1, [r3, #12]
 8007b88:	4b3f      	ldr	r3, [pc, #252]	; (8007c88 <ExecuteMonitor+0x34c>)
 8007b8a:	189b      	adds	r3, r3, r2
 8007b8c:	3381      	adds	r3, #129	; 0x81
 8007b8e:	33ff      	adds	r3, #255	; 0xff
 8007b90:	7019      	strb	r1, [r3, #0]
		          			Delay_ms(1);
 8007b92:	2001      	movs	r0, #1
 8007b94:	f008 f9ac 	bl	800fef0 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007b98:	224c      	movs	r2, #76	; 0x4c
 8007b9a:	5ca3      	ldrb	r3, [r4, r2]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	54a3      	strb	r3, [r4, r2]
 8007ba0:	4a38      	ldr	r2, [pc, #224]	; (8007c84 <ExecuteMonitor+0x348>)
 8007ba2:	234c      	movs	r3, #76	; 0x4c
 8007ba4:	5cd2      	ldrb	r2, [r2, r3]
 8007ba6:	2a3f      	cmp	r2, #63	; 0x3f
 8007ba8:	d9eb      	bls.n	8007b82 <ExecuteMonitor+0x246>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007baa:	4836      	ldr	r0, [pc, #216]	; (8007c84 <ExecuteMonitor+0x348>)
 8007bac:	2240      	movs	r2, #64	; 0x40
 8007bae:	2100      	movs	r1, #0
 8007bb0:	300c      	adds	r0, #12
 8007bb2:	f00b fc96 	bl	80134e2 <memset>
 8007bb6:	e729      	b.n	8007a0c <ExecuteMonitor+0xd0>
                	finalMatrixIndex=0;
 8007bb8:	4b32      	ldr	r3, [pc, #200]	; (8007c84 <ExecuteMonitor+0x348>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	721a      	strb	r2, [r3, #8]
                	twoDMatrixIndex=1;
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	7259      	strb	r1, [r3, #9]
   		          	counter=0;
 8007bc2:	729a      	strb	r2, [r3, #10]
   		           while(counter != numCommandParameters)
 8007bc4:	e005      	b.n	8007bd2 <ExecuteMonitor+0x296>
   		             counter++;
 8007bc6:	4b2f      	ldr	r3, [pc, #188]	; (8007c84 <ExecuteMonitor+0x348>)
 8007bc8:	7a9a      	ldrb	r2, [r3, #10]
 8007bca:	3201      	adds	r2, #1
 8007bcc:	729a      	strb	r2, [r3, #10]
   		             twoDMatrixIndex=1;
 8007bce:	2201      	movs	r2, #1
 8007bd0:	725a      	strb	r2, [r3, #9]
   		           while(counter != numCommandParameters)
 8007bd2:	4b2c      	ldr	r3, [pc, #176]	; (8007c84 <ExecuteMonitor+0x348>)
 8007bd4:	7a9a      	ldrb	r2, [r3, #10]
 8007bd6:	4b2a      	ldr	r3, [pc, #168]	; (8007c80 <ExecuteMonitor+0x344>)
 8007bd8:	7b5b      	ldrb	r3, [r3, #13]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d01b      	beq.n	8007c16 <ExecuteMonitor+0x2da>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007bde:	4c29      	ldr	r4, [pc, #164]	; (8007c84 <ExecuteMonitor+0x348>)
 8007be0:	7aa3      	ldrb	r3, [r4, #10]
 8007be2:	7a60      	ldrb	r0, [r4, #9]
 8007be4:	1c42      	adds	r2, r0, #1
 8007be6:	7262      	strb	r2, [r4, #9]
 8007be8:	7a22      	ldrb	r2, [r4, #8]
 8007bea:	1c51      	adds	r1, r2, #1
 8007bec:	7221      	strb	r1, [r4, #8]
 8007bee:	0119      	lsls	r1, r3, #4
 8007bf0:	1ac9      	subs	r1, r1, r3
 8007bf2:	4b23      	ldr	r3, [pc, #140]	; (8007c80 <ExecuteMonitor+0x344>)
 8007bf4:	185b      	adds	r3, r3, r1
 8007bf6:	181b      	adds	r3, r3, r0
 8007bf8:	7c1b      	ldrb	r3, [r3, #16]
 8007bfa:	18a2      	adds	r2, r4, r2
 8007bfc:	7313      	strb	r3, [r2, #12]
   		            	Delay_ms(1);
 8007bfe:	2001      	movs	r0, #1
 8007c00:	f008 f976 	bl	800fef0 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007c04:	7a23      	ldrb	r3, [r4, #8]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	18e4      	adds	r4, r4, r3
 8007c0a:	7b23      	ldrb	r3, [r4, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d0da      	beq.n	8007bc6 <ExecuteMonitor+0x28a>
 8007c10:	2b20      	cmp	r3, #32
 8007c12:	d1e4      	bne.n	8007bde <ExecuteMonitor+0x2a2>
 8007c14:	e7d7      	b.n	8007bc6 <ExecuteMonitor+0x28a>
		            counter=0;
 8007c16:	4b1b      	ldr	r3, [pc, #108]	; (8007c84 <ExecuteMonitor+0x348>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	729a      	strb	r2, [r3, #10]
                  while(flag != NonActive)
 8007c1c:	e017      	b.n	8007c4e <ExecuteMonitor+0x312>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007c1e:	4c19      	ldr	r4, [pc, #100]	; (8007c84 <ExecuteMonitor+0x348>)
 8007c20:	18a3      	adds	r3, r4, r2
 8007c22:	7b19      	ldrb	r1, [r3, #12]
 8007c24:	4b18      	ldr	r3, [pc, #96]	; (8007c88 <ExecuteMonitor+0x34c>)
 8007c26:	189b      	adds	r3, r3, r2
 8007c28:	3381      	adds	r3, #129	; 0x81
 8007c2a:	33ff      	adds	r3, #255	; 0xff
 8007c2c:	7019      	strb	r1, [r3, #0]
		          			Delay_us(200);
 8007c2e:	20c8      	movs	r0, #200	; 0xc8
 8007c30:	f005 fed4 	bl	800d9dc <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007c34:	224c      	movs	r2, #76	; 0x4c
 8007c36:	5ca3      	ldrb	r3, [r4, r2]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	54a3      	strb	r3, [r4, r2]
 8007c3c:	4a11      	ldr	r2, [pc, #68]	; (8007c84 <ExecuteMonitor+0x348>)
 8007c3e:	234c      	movs	r3, #76	; 0x4c
 8007c40:	5cd2      	ldrb	r2, [r2, r3]
 8007c42:	2a3f      	cmp	r2, #63	; 0x3f
 8007c44:	d9eb      	bls.n	8007c1e <ExecuteMonitor+0x2e2>
  	          		 Delay_ms(Monitor_time);
 8007c46:	4b0c      	ldr	r3, [pc, #48]	; (8007c78 <ExecuteMonitor+0x33c>)
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	f008 f951 	bl	800fef0 <HAL_Delay>
                  while(flag != NonActive)
 8007c4e:	4b0a      	ldr	r3, [pc, #40]	; (8007c78 <ExecuteMonitor+0x33c>)
 8007c50:	791b      	ldrb	r3, [r3, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d004      	beq.n	8007c60 <ExecuteMonitor+0x324>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007c56:	4a0b      	ldr	r2, [pc, #44]	; (8007c84 <ExecuteMonitor+0x348>)
 8007c58:	234c      	movs	r3, #76	; 0x4c
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	54d1      	strb	r1, [r2, r3]
 8007c5e:	e7ed      	b.n	8007c3c <ExecuteMonitor+0x300>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007c60:	4808      	ldr	r0, [pc, #32]	; (8007c84 <ExecuteMonitor+0x348>)
 8007c62:	2240      	movs	r2, #64	; 0x40
 8007c64:	2100      	movs	r1, #0
 8007c66:	300c      	adds	r0, #12
 8007c68:	f00b fc3b 	bl	80134e2 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 8007c6c:	22c0      	movs	r2, #192	; 0xc0
 8007c6e:	2100      	movs	r1, #0
 8007c70:	4806      	ldr	r0, [pc, #24]	; (8007c8c <ExecuteMonitor+0x350>)
 8007c72:	f00b fc36 	bl	80134e2 <memset>
 8007c76:	e6ce      	b.n	8007a16 <ExecuteMonitor+0xda>
 8007c78:	20000000 	.word	0x20000000
 8007c7c:	20001e08 	.word	0x20001e08
 8007c80:	20001e88 	.word	0x20001e88
 8007c84:	20001f08 	.word	0x20001f08
 8007c88:	20001a40 	.word	0x20001a40
 8007c8c:	20001bc0 	.word	0x20001bc0

08007c90 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 8007c90:	b510      	push	{r4, lr}
 8007c92:	e020      	b.n	8007cd6 <StartDefaultTask+0x46>
				RTOS_IND_blink(100);
 8007c94:	2490      	movs	r4, #144	; 0x90
 8007c96:	05e4      	lsls	r4, r4, #23
 8007c98:	2201      	movs	r2, #1
 8007c9a:	2140      	movs	r1, #64	; 0x40
 8007c9c:	0020      	movs	r0, r4
 8007c9e:	f009 fce8 	bl	8011672 <HAL_GPIO_WritePin>
 8007ca2:	2064      	movs	r0, #100	; 0x64
 8007ca4:	f006 fa24 	bl	800e0f0 <osDelay>
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2140      	movs	r1, #64	; 0x40
 8007cac:	0020      	movs	r0, r4
 8007cae:	f009 fce0 	bl	8011672 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007cb2:	4b20      	ldr	r3, [pc, #128]	; (8007d34 <StartDefaultTask+0xa4>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	701a      	strb	r2, [r3, #0]
		CheckAttachedButtons();
 8007cb8:	f005 f868 	bl	800cd8c <CheckAttachedButtons>
		ExecuteSnippet();
 8007cbc:	f7fd fcee 	bl	800569c <ExecuteSnippet>
		ExecuteMonitor();
 8007cc0:	f7ff fe3c 	bl	800793c <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 8007cc4:	4b1c      	ldr	r3, [pc, #112]	; (8007d38 <StartDefaultTask+0xa8>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d102      	bne.n	8007cd2 <StartDefaultTask+0x42>
			delayButtonStateReset = false;
 8007ccc:	4b1b      	ldr	r3, [pc, #108]	; (8007d3c <StartDefaultTask+0xac>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	701a      	strb	r2, [r3, #0]
		taskYIELD();
 8007cd2:	f007 ffab 	bl	800fc2c <vPortYield>
		switch(indMode){
 8007cd6:	4b17      	ldr	r3, [pc, #92]	; (8007d34 <StartDefaultTask+0xa4>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d0da      	beq.n	8007c94 <StartDefaultTask+0x4>
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d014      	beq.n	8007d0c <StartDefaultTask+0x7c>
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d1e8      	bne.n	8007cb8 <StartDefaultTask+0x28>
				RTOS_IND_blink(200);
 8007ce6:	2490      	movs	r4, #144	; 0x90
 8007ce8:	05e4      	lsls	r4, r4, #23
 8007cea:	2201      	movs	r2, #1
 8007cec:	2140      	movs	r1, #64	; 0x40
 8007cee:	0020      	movs	r0, r4
 8007cf0:	f009 fcbf 	bl	8011672 <HAL_GPIO_WritePin>
 8007cf4:	20c8      	movs	r0, #200	; 0xc8
 8007cf6:	f006 f9fb 	bl	800e0f0 <osDelay>
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	2140      	movs	r1, #64	; 0x40
 8007cfe:	0020      	movs	r0, r4
 8007d00:	f009 fcb7 	bl	8011672 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007d04:	4b0b      	ldr	r3, [pc, #44]	; (8007d34 <StartDefaultTask+0xa4>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	701a      	strb	r2, [r3, #0]
				break;
 8007d0a:	e7d5      	b.n	8007cb8 <StartDefaultTask+0x28>
				RTOS_IND_blink(30);
 8007d0c:	2490      	movs	r4, #144	; 0x90
 8007d0e:	05e4      	lsls	r4, r4, #23
 8007d10:	2201      	movs	r2, #1
 8007d12:	2140      	movs	r1, #64	; 0x40
 8007d14:	0020      	movs	r0, r4
 8007d16:	f009 fcac 	bl	8011672 <HAL_GPIO_WritePin>
 8007d1a:	201e      	movs	r0, #30
 8007d1c:	f006 f9e8 	bl	800e0f0 <osDelay>
 8007d20:	2200      	movs	r2, #0
 8007d22:	2140      	movs	r1, #64	; 0x40
 8007d24:	0020      	movs	r0, r4
 8007d26:	f009 fca4 	bl	8011672 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007d2a:	4b02      	ldr	r3, [pc, #8]	; (8007d34 <StartDefaultTask+0xa4>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
				break;
 8007d30:	e7c2      	b.n	8007cb8 <StartDefaultTask+0x28>
 8007d32:	46c0      	nop			; (mov r8, r8)
 8007d34:	200011e7 	.word	0x200011e7
 8007d38:	20002a8a 	.word	0x20002a8a
 8007d3c:	20002a80 	.word	0x20002a80

08007d40 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
 8007d40:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007d42:	4b04      	ldr	r3, [pc, #16]	; (8007d54 <vMainConfigureTimerForRunTimeStats+0x14>)
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	4904      	ldr	r1, [pc, #16]	; (8007d58 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007d48:	f7f8 fa02 	bl	8000150 <__udivsi3>
 8007d4c:	4b03      	ldr	r3, [pc, #12]	; (8007d5c <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007d4e:	6518      	str	r0, [r3, #80]	; 0x50
}
 8007d50:	bd10      	pop	{r4, pc}
 8007d52:	46c0      	nop			; (mov r8, r8)
 8007d54:	200000a4 	.word	0x200000a4
 8007d58:	00002710 	.word	0x00002710
 8007d5c:	20001f08 	.word	0x20001f08

08007d60 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 8007d60:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007d62:	4b0f      	ldr	r3, [pc, #60]	; (8007da0 <ulMainGetRunTimeCounterValue+0x40>)
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	21fa      	movs	r1, #250	; 0xfa
 8007d68:	0089      	lsls	r1, r1, #2
 8007d6a:	f7f8 f9f1 	bl	8000150 <__udivsi3>
 8007d6e:	1e44      	subs	r4, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007d70:	4b0c      	ldr	r3, [pc, #48]	; (8007da4 <ulMainGetRunTimeCounterValue+0x44>)
 8007d72:	681d      	ldr	r5, [r3, #0]
 8007d74:	1b65      	subs	r5, r4, r5
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8007d76:	f007 f8df 	bl	800ef38 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007d7a:	4b0b      	ldr	r3, [pc, #44]	; (8007da8 <ulMainGetRunTimeCounterValue+0x48>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	015b      	lsls	r3, r3, #5
 8007d80:	d503      	bpl.n	8007d8a <ulMainGetRunTimeCounterValue+0x2a>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 8007d82:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007d84:	4b07      	ldr	r3, [pc, #28]	; (8007da4 <ulMainGetRunTimeCounterValue+0x44>)
 8007d86:	681d      	ldr	r5, [r3, #0]
 8007d88:	1b65      	subs	r5, r4, r5
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 8007d8a:	0084      	lsls	r4, r0, #2
 8007d8c:	1824      	adds	r4, r4, r0
 8007d8e:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007d90:	4b06      	ldr	r3, [pc, #24]	; (8007dac <ulMainGetRunTimeCounterValue+0x4c>)
 8007d92:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007d94:	0028      	movs	r0, r5
 8007d96:	f7f8 f9db 	bl	8000150 <__udivsi3>
 8007d9a:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8007d9c:	bd70      	pop	{r4, r5, r6, pc}
 8007d9e:	46c0      	nop			; (mov r8, r8)
 8007da0:	200000a4 	.word	0x200000a4
 8007da4:	e000e018 	.word	0xe000e018
 8007da8:	e000ed04 	.word	0xe000ed04
 8007dac:	20001f08 	.word	0x20001f08

08007db0 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007db0:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8007db2:	f007 fee0 	bl	800fb76 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007db6:	b2c4      	uxtb	r4, r0
 8007db8:	0020      	movs	r0, r4
 8007dba:	f002 ff29 	bl	800ac10 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007dbe:	0020      	movs	r0, r4
 8007dc0:	f003 fc80 	bl	800b6c4 <SwitchStreamDMAToMsg>
}
 8007dc4:	bd10      	pop	{r4, pc}
	...

08007dc8 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007dc8:	b570      	push	{r4, r5, r6, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	0004      	movs	r4, r0
 8007dce:	000e      	movs	r6, r1
 8007dd0:	0015      	movs	r5, r2
 8007dd2:	220f      	movs	r2, #15
 8007dd4:	446a      	add	r2, sp
 8007dd6:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007dd8:	b2d8      	uxtb	r0, r3
 8007dda:	ab08      	add	r3, sp, #32
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	4298      	cmp	r0, r3
 8007de0:	d00d      	beq.n	8007dfe <SetupDMAStreams+0x36>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d100      	bne.n	8007de8 <SetupDMAStreams+0x20>
 8007de6:	e0b8      	b.n	8007f5a <SetupDMAStreams+0x192>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d100      	bne.n	8007dee <SetupDMAStreams+0x26>
 8007dec:	e0b8      	b.n	8007f60 <SetupDMAStreams+0x198>
	if(direction == FORWARD){
 8007dee:	2c00      	cmp	r4, #0
 8007df0:	d00a      	beq.n	8007e08 <SetupDMAStreams+0x40>
	else if(direction == BACKWARD){
 8007df2:	2c01      	cmp	r4, #1
 8007df4:	d040      	beq.n	8007e78 <SetupDMAStreams+0xb0>
	else if(direction == BIDIRECTIONAL){
 8007df6:	2c02      	cmp	r4, #2
 8007df8:	d068      	beq.n	8007ecc <SetupDMAStreams+0x104>
		return BOS_ERR_WrongParam;
 8007dfa:	2067      	movs	r0, #103	; 0x67
 8007dfc:	e0ae      	b.n	8007f5c <SetupDMAStreams+0x194>
		portStatus[src] =STREAM;
 8007dfe:	4b5a      	ldr	r3, [pc, #360]	; (8007f68 <SetupDMAStreams+0x1a0>)
 8007e00:	2202      	movs	r2, #2
 8007e02:	541a      	strb	r2, [r3, r0]
		return BOS_ERR_WrongParam;
 8007e04:	2067      	movs	r0, #103	; 0x67
 8007e06:	e0a9      	b.n	8007f5c <SetupDMAStreams+0x194>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007e08:	f005 ffca 	bl	800dda0 <GetUart>
 8007e0c:	0004      	movs	r4, r0
 8007e0e:	ab08      	add	r3, sp, #32
 8007e10:	7818      	ldrb	r0, [r3, #0]
 8007e12:	f005 ffc5 	bl	800dda0 <GetUart>
 8007e16:	0001      	movs	r1, r0
 8007e18:	2201      	movs	r2, #1
 8007e1a:	0020      	movs	r0, r4
 8007e1c:	f7ff fc40 	bl	80076a0 <StartDMAstream>
 8007e20:	2817      	cmp	r0, #23
 8007e22:	d100      	bne.n	8007e26 <SetupDMAStreams+0x5e>
 8007e24:	e09a      	b.n	8007f5c <SetupDMAStreams+0x194>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007e26:	0168      	lsls	r0, r5, #5
 8007e28:	1b40      	subs	r0, r0, r5
 8007e2a:	0080      	lsls	r0, r0, #2
 8007e2c:	1940      	adds	r0, r0, r5
 8007e2e:	00c0      	lsls	r0, r0, #3
 8007e30:	250f      	movs	r5, #15
 8007e32:	446d      	add	r5, sp
 8007e34:	21fa      	movs	r1, #250	; 0xfa
 8007e36:	0089      	lsls	r1, r1, #2
 8007e38:	f7f8 f98a 	bl	8000150 <__udivsi3>
 8007e3c:	0001      	movs	r1, r0
 8007e3e:	4b4b      	ldr	r3, [pc, #300]	; (8007f6c <SetupDMAStreams+0x1a4>)
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	002b      	movs	r3, r5
 8007e44:	2200      	movs	r2, #0
 8007e46:	484a      	ldr	r0, [pc, #296]	; (8007f70 <SetupDMAStreams+0x1a8>)
 8007e48:	f007 fd52 	bl	800f8f0 <xTimerCreate>
 8007e4c:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8007e4e:	782b      	ldrb	r3, [r5, #0]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4a47      	ldr	r2, [pc, #284]	; (8007f74 <SetupDMAStreams+0x1ac>)
 8007e56:	509e      	str	r6, [r3, r2]
	if(xTimerStream != NULL)
 8007e58:	2c00      	cmp	r4, #0
 8007e5a:	d100      	bne.n	8007e5e <SetupDMAStreams+0x96>
 8007e5c:	e082      	b.n	8007f64 <SetupDMAStreams+0x19c>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8007e5e:	f007 f865 	bl	800ef2c <xTaskGetTickCount>
 8007e62:	0002      	movs	r2, r0
 8007e64:	2301      	movs	r3, #1
 8007e66:	425b      	negs	r3, r3
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	0020      	movs	r0, r4
 8007e70:	f007 fd5c 	bl	800f92c <xTimerGenericCommand>
	return BOS_OK;
 8007e74:	2000      	movs	r0, #0
 8007e76:	e071      	b.n	8007f5c <SetupDMAStreams+0x194>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007e78:	0018      	movs	r0, r3
 8007e7a:	f005 ff91 	bl	800dda0 <GetUart>
 8007e7e:	0004      	movs	r4, r0
 8007e80:	230f      	movs	r3, #15
 8007e82:	446b      	add	r3, sp
 8007e84:	7818      	ldrb	r0, [r3, #0]
 8007e86:	f005 ff8b 	bl	800dda0 <GetUart>
 8007e8a:	0001      	movs	r1, r0
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	0020      	movs	r0, r4
 8007e90:	f7ff fc06 	bl	80076a0 <StartDMAstream>
 8007e94:	2817      	cmp	r0, #23
 8007e96:	d061      	beq.n	8007f5c <SetupDMAStreams+0x194>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007e98:	0168      	lsls	r0, r5, #5
 8007e9a:	1b40      	subs	r0, r0, r5
 8007e9c:	0080      	lsls	r0, r0, #2
 8007e9e:	1940      	adds	r0, r0, r5
 8007ea0:	00c0      	lsls	r0, r0, #3
 8007ea2:	21fa      	movs	r1, #250	; 0xfa
 8007ea4:	0089      	lsls	r1, r1, #2
 8007ea6:	f7f8 f953 	bl	8000150 <__udivsi3>
 8007eaa:	0001      	movs	r1, r0
 8007eac:	4b2f      	ldr	r3, [pc, #188]	; (8007f6c <SetupDMAStreams+0x1a4>)
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	ab08      	add	r3, sp, #32
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	482e      	ldr	r0, [pc, #184]	; (8007f70 <SetupDMAStreams+0x1a8>)
 8007eb6:	f007 fd1b 	bl	800f8f0 <xTimerCreate>
 8007eba:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8007ebc:	230f      	movs	r3, #15
 8007ebe:	446b      	add	r3, sp
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4a2b      	ldr	r2, [pc, #172]	; (8007f74 <SetupDMAStreams+0x1ac>)
 8007ec8:	509e      	str	r6, [r3, r2]
 8007eca:	e7c5      	b.n	8007e58 <SetupDMAStreams+0x90>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007ecc:	f005 ff68 	bl	800dda0 <GetUart>
 8007ed0:	0004      	movs	r4, r0
 8007ed2:	ab08      	add	r3, sp, #32
 8007ed4:	7818      	ldrb	r0, [r3, #0]
 8007ed6:	f005 ff63 	bl	800dda0 <GetUart>
 8007eda:	0001      	movs	r1, r0
 8007edc:	2201      	movs	r2, #1
 8007ede:	0020      	movs	r0, r4
 8007ee0:	f7ff fbde 	bl	80076a0 <StartDMAstream>
 8007ee4:	2817      	cmp	r0, #23
 8007ee6:	d039      	beq.n	8007f5c <SetupDMAStreams+0x194>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007ee8:	0168      	lsls	r0, r5, #5
 8007eea:	1b40      	subs	r0, r0, r5
 8007eec:	0080      	lsls	r0, r0, #2
 8007eee:	1940      	adds	r0, r0, r5
 8007ef0:	00c0      	lsls	r0, r0, #3
 8007ef2:	21fa      	movs	r1, #250	; 0xfa
 8007ef4:	0089      	lsls	r1, r1, #2
 8007ef6:	f7f8 f92b 	bl	8000150 <__udivsi3>
 8007efa:	0004      	movs	r4, r0
 8007efc:	4b1b      	ldr	r3, [pc, #108]	; (8007f6c <SetupDMAStreams+0x1a4>)
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	230f      	movs	r3, #15
 8007f02:	446b      	add	r3, sp
 8007f04:	2200      	movs	r2, #0
 8007f06:	0001      	movs	r1, r0
 8007f08:	4819      	ldr	r0, [pc, #100]	; (8007f70 <SetupDMAStreams+0x1a8>)
 8007f0a:	f007 fcf1 	bl	800f8f0 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007f0e:	466b      	mov	r3, sp
 8007f10:	7bdb      	ldrb	r3, [r3, #15]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4a17      	ldr	r2, [pc, #92]	; (8007f74 <SetupDMAStreams+0x1ac>)
 8007f18:	509e      	str	r6, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007f1a:	ab08      	add	r3, sp, #32
 8007f1c:	7818      	ldrb	r0, [r3, #0]
 8007f1e:	f005 ff3f 	bl	800dda0 <GetUart>
 8007f22:	0005      	movs	r5, r0
 8007f24:	466b      	mov	r3, sp
 8007f26:	7bd8      	ldrb	r0, [r3, #15]
 8007f28:	f005 ff3a 	bl	800dda0 <GetUart>
 8007f2c:	0001      	movs	r1, r0
 8007f2e:	2201      	movs	r2, #1
 8007f30:	0028      	movs	r0, r5
 8007f32:	f7ff fbb5 	bl	80076a0 <StartDMAstream>
 8007f36:	2817      	cmp	r0, #23
 8007f38:	d010      	beq.n	8007f5c <SetupDMAStreams+0x194>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007f3a:	4b0c      	ldr	r3, [pc, #48]	; (8007f6c <SetupDMAStreams+0x1a4>)
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	ab08      	add	r3, sp, #32
 8007f40:	2200      	movs	r2, #0
 8007f42:	0021      	movs	r1, r4
 8007f44:	480a      	ldr	r0, [pc, #40]	; (8007f70 <SetupDMAStreams+0x1a8>)
 8007f46:	f007 fcd3 	bl	800f8f0 <xTimerCreate>
 8007f4a:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 8007f4c:	ab08      	add	r3, sp, #32
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	3b01      	subs	r3, #1
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4a07      	ldr	r2, [pc, #28]	; (8007f74 <SetupDMAStreams+0x1ac>)
 8007f56:	509e      	str	r6, [r3, r2]
 8007f58:	e77e      	b.n	8007e58 <SetupDMAStreams+0x90>
		return BOS_ERR_WrongParam;
 8007f5a:	2067      	movs	r0, #103	; 0x67
}
 8007f5c:	b004      	add	sp, #16
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}
		return BOS_ERR_WrongParam;
 8007f60:	2067      	movs	r0, #103	; 0x67
 8007f62:	e7fb      	b.n	8007f5c <SetupDMAStreams+0x194>
	return BOS_OK;
 8007f64:	2000      	movs	r0, #0
 8007f66:	e7f9      	b.n	8007f5c <SetupDMAStreams+0x194>
 8007f68:	20000c5c 	.word	0x20000c5c
 8007f6c:	08007db1 	.word	0x08007db1
 8007f70:	0801c3a0 	.word	0x0801c3a0
 8007f74:	200019e4 	.word	0x200019e4

08007f78 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007f78:	b510      	push	{r4, lr}
	switch(port){
 8007f7a:	2805      	cmp	r0, #5
 8007f7c:	d80a      	bhi.n	8007f94 <NotifyMessagingTask+0x1c>
 8007f7e:	0080      	lsls	r0, r0, #2
 8007f80:	4b15      	ldr	r3, [pc, #84]	; (8007fd8 <NotifyMessagingTask+0x60>)
 8007f82:	581b      	ldr	r3, [r3, r0]
 8007f84:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
			xTaskNotifyGive(P1MsgTaskHandle)
 8007f86:	4b15      	ldr	r3, [pc, #84]	; (8007fdc <NotifyMessagingTask+0x64>)
 8007f88:	6818      	ldr	r0, [r3, #0]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	2100      	movs	r1, #0
 8007f90:	f007 fbde 	bl	800f750 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8007f94:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle)
 8007f96:	4b12      	ldr	r3, [pc, #72]	; (8007fe0 <NotifyMessagingTask+0x68>)
 8007f98:	6818      	ldr	r0, [r3, #0]
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	f007 fbd6 	bl	800f750 <xTaskGenericNotify>
			break;
 8007fa4:	e7f6      	b.n	8007f94 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007fa6:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <NotifyMessagingTask+0x6c>)
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	2300      	movs	r3, #0
 8007fac:	2202      	movs	r2, #2
 8007fae:	2100      	movs	r1, #0
 8007fb0:	f007 fbce 	bl	800f750 <xTaskGenericNotify>
			break;
 8007fb4:	e7ee      	b.n	8007f94 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle)
 8007fb6:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <NotifyMessagingTask+0x70>)
 8007fb8:	6818      	ldr	r0, [r3, #0]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	f007 fbc6 	bl	800f750 <xTaskGenericNotify>
			break;
 8007fc4:	e7e6      	b.n	8007f94 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle)
 8007fc6:	4b09      	ldr	r3, [pc, #36]	; (8007fec <NotifyMessagingTask+0x74>)
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	2202      	movs	r2, #2
 8007fce:	2100      	movs	r1, #0
 8007fd0:	f007 fbbe 	bl	800f750 <xTaskGenericNotify>
}
 8007fd4:	e7de      	b.n	8007f94 <NotifyMessagingTask+0x1c>
 8007fd6:	46c0      	nop			; (mov r8, r8)
 8007fd8:	08019aa4 	.word	0x08019aa4
 8007fdc:	20001e18 	.word	0x20001e18
 8007fe0:	20001e1c 	.word	0x20001e1c
 8007fe4:	20001e20 	.word	0x20001e20
 8007fe8:	20001e24 	.word	0x20001e24
 8007fec:	20001e28 	.word	0x20001e28

08007ff0 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ff2:	46de      	mov	lr, fp
 8007ff4:	4657      	mov	r7, sl
 8007ff6:	464e      	mov	r6, r9
 8007ff8:	4645      	mov	r5, r8
 8007ffa:	b5e0      	push	{r5, r6, r7, lr}
 8007ffc:	b087      	sub	sp, #28
 8007ffe:	0005      	movs	r5, r0
 8008000:	9103      	str	r1, [sp, #12]
 8008002:	0014      	movs	r4, r2
 8008004:	9304      	str	r3, [sp, #16]
 8008006:	ab10      	add	r3, sp, #64	; 0x40
 8008008:	881f      	ldrh	r7, [r3, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 800800a:	0003      	movs	r3, r0
 800800c:	4313      	orrs	r3, r2
 800800e:	d100      	bne.n	8008012 <SendMessageFromPort+0x22>
 8008010:	e1a9      	b.n	8008366 <SendMessageFromPort+0x376>
 8008012:	2800      	cmp	r0, #0
 8008014:	d104      	bne.n	8008020 <SendMessageFromPort+0x30>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8008016:	2aff      	cmp	r2, #255	; 0xff
 8008018:	d002      	beq.n	8008020 <SendMessageFromPort+0x30>
 800801a:	2afe      	cmp	r2, #254	; 0xfe
 800801c:	d000      	beq.n	8008020 <SendMessageFromPort+0x30>
 800801e:	e1a4      	b.n	800836a <SendMessageFromPort+0x37a>
 8008020:	2d00      	cmp	r5, #0
 8008022:	d005      	beq.n	8008030 <SendMessageFromPort+0x40>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <SendMessageFromPort+0x40>
 800802a:	2c00      	cmp	r4, #0
 800802c:	d100      	bne.n	8008030 <SendMessageFromPort+0x40>
 800802e:	e19e      	b.n	800836e <SendMessageFromPort+0x37e>
		return BOS_ERR_WrongParam;
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 8008030:	2000      	movs	r0, #0
 8008032:	f006 fedf 	bl	800edf4 <uxTaskPriorityGet>
 8008036:	9005      	str	r0, [sp, #20]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8008038:	2105      	movs	r1, #5
 800803a:	2000      	movs	r0, #0
 800803c:	f006 feea 	bl	800ee14 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 8008040:	4bcd      	ldr	r3, [pc, #820]	; (8008378 <SendMessageFromPort+0x388>)
 8008042:	2248      	movs	r2, #72	; 0x48
 8008044:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8008046:	3212      	adds	r2, #18
 8008048:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	432b      	orrs	r3, r5
 800804e:	d101      	bne.n	8008054 <SendMessageFromPort+0x64>
 8008050:	2cfd      	cmp	r4, #253	; 0xfd
 8008052:	d802      	bhi.n	800805a <SendMessageFromPort+0x6a>
 8008054:	9b04      	ldr	r3, [sp, #16]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d130      	bne.n	80080bc <SendMessageFromPort+0xcc>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 800805a:	3f01      	subs	r7, #1
 800805c:	4ac7      	ldr	r2, [pc, #796]	; (800837c <SendMessageFromPort+0x38c>)
 800805e:	5dd6      	ldrb	r6, [r2, r7]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8008060:	00f9      	lsls	r1, r7, #3
 8008062:	1bc9      	subs	r1, r1, r7
 8008064:	00c9      	lsls	r1, r1, #3
 8008066:	4bc6      	ldr	r3, [pc, #792]	; (8008380 <SendMessageFromPort+0x390>)
 8008068:	18c9      	adds	r1, r1, r3
 800806a:	0032      	movs	r2, r6
 800806c:	48c5      	ldr	r0, [pc, #788]	; (8008384 <SendMessageFromPort+0x394>)
 800806e:	f00b fa2f 	bl	80134d0 <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 8008072:	4bc1      	ldr	r3, [pc, #772]	; (8008378 <SendMessageFromPort+0x388>)
 8008074:	469b      	mov	fp, r3
 8008076:	709e      	strb	r6, [r3, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 8008078:	1cf3      	adds	r3, r6, #3
 800807a:	4698      	mov	r8, r3
 800807c:	4bc2      	ldr	r3, [pc, #776]	; (8008388 <SendMessageFromPort+0x398>)
 800807e:	469a      	mov	sl, r3
 8008080:	4642      	mov	r2, r8
 8008082:	4659      	mov	r1, fp
 8008084:	0018      	movs	r0, r3
 8008086:	f00b fa23 	bl	80134d0 <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 800808a:	b2b3      	uxth	r3, r6
 800808c:	4699      	mov	r9, r3
 800808e:	4641      	mov	r1, r8
 8008090:	4650      	mov	r0, sl
 8008092:	f003 fb8f 	bl	800b7b4 <CalculateCRC8>
 8008096:	465b      	mov	r3, fp
 8008098:	4642      	mov	r2, r8
 800809a:	5498      	strb	r0, [r3, r2]
	/* end of crc calculation function addition */

	memset(crcBuffer,0,sizeof(crcBuffer));
 800809c:	2238      	movs	r2, #56	; 0x38
 800809e:	2100      	movs	r1, #0
 80080a0:	4650      	mov	r0, sl
 80080a2:	f00b fa1e 	bl	80134e2 <memset>
	
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 80080a6:	2cfd      	cmp	r4, #253	; 0xfd
 80080a8:	d900      	bls.n	80080ac <SendMessageFromPort+0xbc>
 80080aa:	e121      	b.n	80082f0 <SendMessageFromPort+0x300>
		/* Transmit the message - single-cast */

		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 80080ac:	9f04      	ldr	r7, [sp, #16]
 80080ae:	3f2c      	subs	r7, #44	; 0x2c
 80080b0:	b2bf      	uxth	r7, r7
 80080b2:	2f01      	cmp	r7, #1
 80080b4:	d800      	bhi.n	80080b8 <SendMessageFromPort+0xc8>
 80080b6:	e0da      	b.n	800826e <SendMessageFromPort+0x27e>
			Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
		}
		else{

			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 80080b8:	2600      	movs	r6, #0
 80080ba:	e0f7      	b.n	80082ac <SendMessageFromPort+0x2bc>
		if(src == 0)
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d102      	bne.n	80080c8 <SendMessageFromPort+0xd8>
			src =myID;
 80080c2:	4bb2      	ldr	r3, [pc, #712]	; (800838c <SendMessageFromPort+0x39c>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	9303      	str	r3, [sp, #12]
		if(code > 0xFF)
 80080c8:	9b04      	ldr	r3, [sp, #16]
 80080ca:	2bff      	cmp	r3, #255	; 0xff
 80080cc:	d81f      	bhi.n	800810e <SendMessageFromPort+0x11e>
	bool extendOptions = false, extendCode = false;
 80080ce:	2100      	movs	r1, #0
		message[2] =length;
 80080d0:	4aa9      	ldr	r2, [pc, #676]	; (8008378 <SendMessageFromPort+0x388>)
 80080d2:	2300      	movs	r3, #0
 80080d4:	7093      	strb	r3, [r2, #2]
		message[3] =dst;
 80080d6:	70d4      	strb	r4, [r2, #3]
		message[4] =src;
 80080d8:	9b03      	ldr	r3, [sp, #12]
 80080da:	7113      	strb	r3, [r2, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 80080dc:	48ac      	ldr	r0, [pc, #688]	; (8008390 <SendMessageFromPort+0x3a0>)
 80080de:	2300      	movs	r3, #0
 80080e0:	56c3      	ldrsb	r3, [r0, r3]
 80080e2:	7906      	ldrb	r6, [r0, #4]
 80080e4:	0136      	lsls	r6, r6, #4
 80080e6:	4333      	orrs	r3, r6
 80080e8:	b25b      	sxtb	r3, r3
 80080ea:	7840      	ldrb	r0, [r0, #1]
 80080ec:	0080      	lsls	r0, r0, #2
 80080ee:	4303      	orrs	r3, r0
 80080f0:	b25b      	sxtb	r3, r3
 80080f2:	0048      	lsls	r0, r1, #1
 80080f4:	4303      	orrs	r3, r0
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	7153      	strb	r3, [r2, #5]
		message[6 + shift] =(uint8_t )code;
 80080fa:	9804      	ldr	r0, [sp, #16]
 80080fc:	7190      	strb	r0, [r2, #6]
		if(extendCode == true){
 80080fe:	2900      	cmp	r1, #0
 8008100:	d007      	beq.n	8008112 <SendMessageFromPort+0x122>
			message[6 + shift] =(uint8_t )(code >> 8);
 8008102:	0a02      	lsrs	r2, r0, #8
 8008104:	499c      	ldr	r1, [pc, #624]	; (8008378 <SendMessageFromPort+0x388>)
 8008106:	71ca      	strb	r2, [r1, #7]
			++shift;
 8008108:	2201      	movs	r2, #1
 800810a:	4693      	mov	fp, r2
 800810c:	e003      	b.n	8008116 <SendMessageFromPort+0x126>
			extendCode = true;
 800810e:	2101      	movs	r1, #1
 8008110:	e7de      	b.n	80080d0 <SendMessageFromPort+0xe0>
 8008112:	2200      	movs	r2, #0
 8008114:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8008116:	2f2e      	cmp	r7, #46	; 0x2e
 8008118:	d909      	bls.n	800812e <SendMessageFromPort+0x13e>
			message[5] |=0x80;
 800811a:	2280      	movs	r2, #128	; 0x80
 800811c:	4252      	negs	r2, r2
 800811e:	4313      	orrs	r3, r2
 8008120:	4a95      	ldr	r2, [pc, #596]	; (8008378 <SendMessageFromPort+0x388>)
 8008122:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 8008124:	4b9b      	ldr	r3, [pc, #620]	; (8008394 <SendMessageFromPort+0x3a4>)
 8008126:	805f      	strh	r7, [r3, #2]
	uint8_t length =0, shift =0;
 8008128:	2600      	movs	r6, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 800812a:	272e      	movs	r7, #46	; 0x2e
			while(totalNumberOfParams != 0){
 800812c:	e033      	b.n	8008196 <SendMessageFromPort+0x1a6>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800812e:	465b      	mov	r3, fp
 8008130:	3307      	adds	r3, #7
 8008132:	4891      	ldr	r0, [pc, #580]	; (8008378 <SendMessageFromPort+0x388>)
 8008134:	1818      	adds	r0, r3, r0
 8008136:	4b97      	ldr	r3, [pc, #604]	; (8008394 <SendMessageFromPort+0x3a4>)
 8008138:	8819      	ldrh	r1, [r3, #0]
 800813a:	4b97      	ldr	r3, [pc, #604]	; (8008398 <SendMessageFromPort+0x3a8>)
 800813c:	18c9      	adds	r1, r1, r3
 800813e:	003a      	movs	r2, r7
 8008140:	f00b f9c6 	bl	80134d0 <memcpy>
			length =numberOfParams + shift + 4;
 8008144:	465b      	mov	r3, fp
 8008146:	19de      	adds	r6, r3, r7
 8008148:	b2f6      	uxtb	r6, r6
 800814a:	3604      	adds	r6, #4
 800814c:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true){
 800814e:	4b93      	ldr	r3, [pc, #588]	; (800839c <SendMessageFromPort+0x3ac>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d08d      	beq.n	8008072 <SendMessageFromPort+0x82>
			if(dstGroupID < BOS_BROADCAST){
 8008156:	4b92      	ldr	r3, [pc, #584]	; (80083a0 <SendMessageFromPort+0x3b0>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	4698      	mov	r8, r3
 800815c:	2bff      	cmp	r3, #255	; 0xff
 800815e:	d033      	beq.n	80081c8 <SendMessageFromPort+0x1d8>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8008160:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 8008162:	2100      	movs	r1, #0
 8008164:	e034      	b.n	80081d0 <SendMessageFromPort+0x1e0>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8008166:	4884      	ldr	r0, [pc, #528]	; (8008378 <SendMessageFromPort+0x388>)
 8008168:	7942      	ldrb	r2, [r0, #5]
 800816a:	237f      	movs	r3, #127	; 0x7f
 800816c:	4013      	ands	r3, r2
 800816e:	7143      	strb	r3, [r0, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8008170:	465b      	mov	r3, fp
 8008172:	3307      	adds	r3, #7
 8008174:	1818      	adds	r0, r3, r0
 8008176:	4e87      	ldr	r6, [pc, #540]	; (8008394 <SendMessageFromPort+0x3a4>)
 8008178:	8831      	ldrh	r1, [r6, #0]
 800817a:	4b87      	ldr	r3, [pc, #540]	; (8008398 <SendMessageFromPort+0x3a8>)
 800817c:	18c9      	adds	r1, r1, r3
 800817e:	4652      	mov	r2, sl
 8008180:	f00b f9a6 	bl	80134d0 <memcpy>
					ptrShift =0;
 8008184:	2300      	movs	r3, #0
 8008186:	8033      	strh	r3, [r6, #0]
					totalNumberOfParams =0;
 8008188:	8073      	strh	r3, [r6, #2]
					length =numberOfParams + shift + 4;
 800818a:	465e      	mov	r6, fp
 800818c:	4456      	add	r6, sl
 800818e:	b2f6      	uxtb	r6, r6
 8008190:	3604      	adds	r6, #4
 8008192:	b2f6      	uxtb	r6, r6
					numberOfParams =totalNumberOfParams;
 8008194:	4657      	mov	r7, sl
			while(totalNumberOfParams != 0){
 8008196:	4b7f      	ldr	r3, [pc, #508]	; (8008394 <SendMessageFromPort+0x3a4>)
 8008198:	885b      	ldrh	r3, [r3, #2]
 800819a:	469a      	mov	sl, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d0d6      	beq.n	800814e <SendMessageFromPort+0x15e>
				if((totalNumberOfParams / numberOfParams) >= 1){
 80081a0:	45ba      	cmp	sl, r7
 80081a2:	d3e0      	bcc.n	8008166 <SendMessageFromPort+0x176>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 80081a4:	9700      	str	r7, [sp, #0]
 80081a6:	9b04      	ldr	r3, [sp, #16]
 80081a8:	0022      	movs	r2, r4
 80081aa:	9903      	ldr	r1, [sp, #12]
 80081ac:	0028      	movs	r0, r5
 80081ae:	f7ff ff1f 	bl	8007ff0 <SendMessageFromPort>
					osDelay(10);
 80081b2:	200a      	movs	r0, #10
 80081b4:	f005 ff9c 	bl	800e0f0 <osDelay>
					totalNumberOfParams -=numberOfParams;
 80081b8:	4b76      	ldr	r3, [pc, #472]	; (8008394 <SendMessageFromPort+0x3a4>)
 80081ba:	885a      	ldrh	r2, [r3, #2]
 80081bc:	1bd2      	subs	r2, r2, r7
 80081be:	805a      	strh	r2, [r3, #2]
					ptrShift +=numberOfParams;
 80081c0:	881a      	ldrh	r2, [r3, #0]
 80081c2:	18ba      	adds	r2, r7, r2
 80081c4:	801a      	strh	r2, [r3, #0]
 80081c6:	e7e6      	b.n	8008196 <SendMessageFromPort+0x1a6>
			uint8_t groupMembers =0;
 80081c8:	2100      	movs	r1, #0
 80081ca:	e021      	b.n	8008210 <SendMessageFromPort+0x220>
				for(uint16_t i =1; i <= N; i++)						// N modules
 80081cc:	3301      	adds	r3, #1
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	4874      	ldr	r0, [pc, #464]	; (80083a4 <SendMessageFromPort+0x3b4>)
 80081d2:	7800      	ldrb	r0, [r0, #0]
 80081d4:	4298      	cmp	r0, r3
 80081d6:	d315      	bcc.n	8008204 <SendMessageFromPort+0x214>
					if(InGroup(i,dstGroupID)){
 80081d8:	1e58      	subs	r0, r3, #1
 80081da:	0040      	lsls	r0, r0, #1
 80081dc:	4a72      	ldr	r2, [pc, #456]	; (80083a8 <SendMessageFromPort+0x3b8>)
 80081de:	5a80      	ldrh	r0, [r0, r2]
 80081e0:	4642      	mov	r2, r8
 80081e2:	4110      	asrs	r0, r2
 80081e4:	07c2      	lsls	r2, r0, #31
 80081e6:	d5f1      	bpl.n	80081cc <SendMessageFromPort+0x1dc>
						++groupMembers;							// Add this member
 80081e8:	3101      	adds	r1, #1
 80081ea:	b2c9      	uxtb	r1, r1
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 80081ec:	1878      	adds	r0, r7, r1
 80081ee:	282c      	cmp	r0, #44	; 0x2c
 80081f0:	dd00      	ble.n	80081f4 <SendMessageFromPort+0x204>
 80081f2:	e0be      	b.n	8008372 <SendMessageFromPort+0x382>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80081f4:	465a      	mov	r2, fp
 80081f6:	1dd0      	adds	r0, r2, #7
 80081f8:	1838      	adds	r0, r7, r0
 80081fa:	1808      	adds	r0, r1, r0
 80081fc:	3801      	subs	r0, #1
 80081fe:	4a5e      	ldr	r2, [pc, #376]	; (8008378 <SendMessageFromPort+0x388>)
 8008200:	5413      	strb	r3, [r2, r0]
 8008202:	e7e3      	b.n	80081cc <SendMessageFromPort+0x1dc>
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8008204:	465b      	mov	r3, fp
 8008206:	3307      	adds	r3, #7
 8008208:	18fb      	adds	r3, r7, r3
 800820a:	18cb      	adds	r3, r1, r3
 800820c:	485a      	ldr	r0, [pc, #360]	; (8008378 <SendMessageFromPort+0x388>)
 800820e:	54c1      	strb	r1, [r0, r3]
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8008210:	4643      	mov	r3, r8
 8008212:	2bff      	cmp	r3, #255	; 0xff
 8008214:	d01b      	beq.n	800824e <SendMessageFromPort+0x25e>
			else if(dstGroupID == BOS_BROADCAST)
 8008216:	4643      	mov	r3, r8
 8008218:	2bff      	cmp	r3, #255	; 0xff
 800821a:	d100      	bne.n	800821e <SendMessageFromPort+0x22e>
 800821c:	e0d0      	b.n	80083c0 <SendMessageFromPort+0x3d0>
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 800821e:	187b      	adds	r3, r7, r1
 8008220:	2b2b      	cmp	r3, #43	; 0x2b
 8008222:	dd00      	ble.n	8008226 <SendMessageFromPort+0x236>
 8008224:	e0ce      	b.n	80083c4 <SendMessageFromPort+0x3d4>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8008226:	4b61      	ldr	r3, [pc, #388]	; (80083ac <SendMessageFromPort+0x3bc>)
 8008228:	7818      	ldrb	r0, [r3, #0]
 800822a:	3001      	adds	r0, #1
 800822c:	b2c0      	uxtb	r0, r0
 800822e:	7018      	strb	r0, [r3, #0]
 8008230:	465b      	mov	r3, fp
 8008232:	3307      	adds	r3, #7
 8008234:	18fb      	adds	r3, r7, r3
 8008236:	18cb      	adds	r3, r1, r3
 8008238:	3301      	adds	r3, #1
 800823a:	4a4f      	ldr	r2, [pc, #316]	; (8008378 <SendMessageFromPort+0x388>)
 800823c:	54d0      	strb	r0, [r2, r3]
			if(dstGroupID == BOS_BROADCAST)
 800823e:	4643      	mov	r3, r8
 8008240:	2bff      	cmp	r3, #255	; 0xff
 8008242:	d011      	beq.n	8008268 <SendMessageFromPort+0x278>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8008244:	1876      	adds	r6, r6, r1
 8008246:	b2f6      	uxtb	r6, r6
 8008248:	3602      	adds	r6, #2
 800824a:	b2f6      	uxtb	r6, r6
 800824c:	e711      	b.n	8008072 <SendMessageFromPort+0x82>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 800824e:	2f2c      	cmp	r7, #44	; 0x2c
 8008250:	d8e1      	bhi.n	8008216 <SendMessageFromPort+0x226>
				message[7 + shift + numberOfParams] =++bcastID;
 8008252:	4856      	ldr	r0, [pc, #344]	; (80083ac <SendMessageFromPort+0x3bc>)
 8008254:	7803      	ldrb	r3, [r0, #0]
 8008256:	3301      	adds	r3, #1
 8008258:	b2db      	uxtb	r3, r3
 800825a:	7003      	strb	r3, [r0, #0]
 800825c:	4658      	mov	r0, fp
 800825e:	3007      	adds	r0, #7
 8008260:	1838      	adds	r0, r7, r0
 8008262:	4f45      	ldr	r7, [pc, #276]	; (8008378 <SendMessageFromPort+0x388>)
 8008264:	543b      	strb	r3, [r7, r0]
 8008266:	e7ea      	b.n	800823e <SendMessageFromPort+0x24e>
				length +=1;		// + bcastID
 8008268:	3601      	adds	r6, #1
 800826a:	b2f6      	uxtb	r6, r6
 800826c:	e701      	b.n	8008072 <SendMessageFromPort+0x82>
			Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 800826e:	464a      	mov	r2, r9
 8008270:	3204      	adds	r2, #4
 8008272:	b292      	uxth	r2, r2
 8008274:	9400      	str	r4, [sp, #0]
 8008276:	2332      	movs	r3, #50	; 0x32
 8008278:	493f      	ldr	r1, [pc, #252]	; (8008378 <SendMessageFromPort+0x388>)
 800827a:	0028      	movs	r0, r5
 800827c:	f7fa fe0e 	bl	8002e9c <Send_BOS_Message>
					break;
				if(rejected_FLAG == true)
					Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
			}
		}
		ACK_FLAG =false; rejected_FLAG=false;
 8008280:	2300      	movs	r3, #0
 8008282:	4a4b      	ldr	r2, [pc, #300]	; (80083b0 <SendMessageFromPort+0x3c0>)
 8008284:	7013      	strb	r3, [r2, #0]
 8008286:	4a4b      	ldr	r2, [pc, #300]	; (80083b4 <SendMessageFromPort+0x3c4>)
 8008288:	7013      	strb	r3, [r2, #0]
			Delay_us(10);
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 800828a:	9905      	ldr	r1, [sp, #20]
 800828c:	2000      	movs	r0, #0
 800828e:	f006 fdc1 	bl	800ee14 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 8008292:	4b49      	ldr	r3, [pc, #292]	; (80083b8 <SendMessageFromPort+0x3c8>)
 8008294:	2202      	movs	r2, #2
 8008296:	701a      	strb	r2, [r3, #0]
	
	return result;
 8008298:	2000      	movs	r0, #0
}
 800829a:	b007      	add	sp, #28
 800829c:	bcf0      	pop	{r4, r5, r6, r7}
 800829e:	46bb      	mov	fp, r7
 80082a0:	46b2      	mov	sl, r6
 80082a2:	46a9      	mov	r9, r5
 80082a4:	46a0      	mov	r8, r4
 80082a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 80082a8:	3601      	adds	r6, #1
 80082aa:	b2f6      	uxtb	r6, r6
 80082ac:	b2b3      	uxth	r3, r6
 80082ae:	4a38      	ldr	r2, [pc, #224]	; (8008390 <SendMessageFromPort+0x3a0>)
 80082b0:	88d2      	ldrh	r2, [r2, #6]
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d2e4      	bcs.n	8008280 <SendMessageFromPort+0x290>
				Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 80082b6:	464b      	mov	r3, r9
 80082b8:	1d1f      	adds	r7, r3, #4
 80082ba:	b2bf      	uxth	r7, r7
 80082bc:	9400      	str	r4, [sp, #0]
 80082be:	2332      	movs	r3, #50	; 0x32
 80082c0:	003a      	movs	r2, r7
 80082c2:	492d      	ldr	r1, [pc, #180]	; (8008378 <SendMessageFromPort+0x388>)
 80082c4:	0028      	movs	r0, r5
 80082c6:	f7fa fde9 	bl	8002e9c <Send_BOS_Message>
				osDelay(200);
 80082ca:	20c8      	movs	r0, #200	; 0xc8
 80082cc:	f005 ff10 	bl	800e0f0 <osDelay>
				if(ACK_FLAG == true)
 80082d0:	4b37      	ldr	r3, [pc, #220]	; (80083b0 <SendMessageFromPort+0x3c0>)
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1d3      	bne.n	8008280 <SendMessageFromPort+0x290>
				if(rejected_FLAG == true)
 80082d8:	4b36      	ldr	r3, [pc, #216]	; (80083b4 <SendMessageFromPort+0x3c4>)
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d0e3      	beq.n	80082a8 <SendMessageFromPort+0x2b8>
					Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 80082e0:	9400      	str	r4, [sp, #0]
 80082e2:	2332      	movs	r3, #50	; 0x32
 80082e4:	003a      	movs	r2, r7
 80082e6:	4924      	ldr	r1, [pc, #144]	; (8008378 <SendMessageFromPort+0x388>)
 80082e8:	0028      	movs	r0, r5
 80082ea:	f7fa fdd7 	bl	8002e9c <Send_BOS_Message>
 80082ee:	e7db      	b.n	80082a8 <SendMessageFromPort+0x2b8>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 80082f0:	9b04      	ldr	r3, [sp, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d105      	bne.n	8008302 <SendMessageFromPort+0x312>
 80082f6:	9b03      	ldr	r3, [sp, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <SendMessageFromPort+0x312>
			src =message[4];
 80082fc:	4b1e      	ldr	r3, [pc, #120]	; (8008378 <SendMessageFromPort+0x388>)
 80082fe:	791b      	ldrb	r3, [r3, #4]
 8008300:	9303      	str	r3, [sp, #12]
		FindBroadcastRoutes(src);
 8008302:	9803      	ldr	r0, [sp, #12]
 8008304:	f7fb fc04 	bl	8003b10 <FindBroadcastRoutes>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8008308:	2601      	movs	r6, #1
 800830a:	e007      	b.n	800831c <SendMessageFromPort+0x32c>
			rejected_FLAG=false;
 800830c:	4b29      	ldr	r3, [pc, #164]	; (80083b4 <SendMessageFromPort+0x3c4>)
 800830e:	2200      	movs	r2, #0
 8008310:	701a      	strb	r2, [r3, #0]
			Delay_us(10);
 8008312:	200a      	movs	r0, #10
 8008314:	f005 fb62 	bl	800d9dc <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8008318:	3601      	adds	r6, #1
 800831a:	b2f6      	uxtb	r6, r6
 800831c:	2e05      	cmp	r6, #5
 800831e:	d8b4      	bhi.n	800828a <SendMessageFromPort+0x29a>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8008320:	4b1a      	ldr	r3, [pc, #104]	; (800838c <SendMessageFromPort+0x39c>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	3b01      	subs	r3, #1
 8008326:	005b      	lsls	r3, r3, #1
 8008328:	4a24      	ldr	r2, [pc, #144]	; (80083bc <SendMessageFromPort+0x3cc>)
 800832a:	5a9b      	ldrh	r3, [r3, r2]
 800832c:	1e72      	subs	r2, r6, #1
 800832e:	4113      	asrs	r3, r2
 8008330:	07db      	lsls	r3, r3, #31
 8008332:	d5eb      	bpl.n	800830c <SendMessageFromPort+0x31c>
				Send_BOS_Message(p,message,length + 4,cmd50ms,dst);
 8008334:	464b      	mov	r3, r9
 8008336:	1d1f      	adds	r7, r3, #4
 8008338:	b2bf      	uxth	r7, r7
 800833a:	9400      	str	r4, [sp, #0]
 800833c:	2332      	movs	r3, #50	; 0x32
 800833e:	003a      	movs	r2, r7
 8008340:	490d      	ldr	r1, [pc, #52]	; (8008378 <SendMessageFromPort+0x388>)
 8008342:	0030      	movs	r0, r6
 8008344:	f7fa fdaa 	bl	8002e9c <Send_BOS_Message>
				osDelay(200);
 8008348:	20c8      	movs	r0, #200	; 0xc8
 800834a:	f005 fed1 	bl	800e0f0 <osDelay>
				if(rejected_FLAG == true)
 800834e:	4b19      	ldr	r3, [pc, #100]	; (80083b4 <SendMessageFromPort+0x3c4>)
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0da      	beq.n	800830c <SendMessageFromPort+0x31c>
					Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 8008356:	9400      	str	r4, [sp, #0]
 8008358:	2332      	movs	r3, #50	; 0x32
 800835a:	003a      	movs	r2, r7
 800835c:	4906      	ldr	r1, [pc, #24]	; (8008378 <SendMessageFromPort+0x388>)
 800835e:	0028      	movs	r0, r5
 8008360:	f7fa fd9c 	bl	8002e9c <Send_BOS_Message>
 8008364:	e7d2      	b.n	800830c <SendMessageFromPort+0x31c>
		return BOS_ERR_WrongParam;
 8008366:	2067      	movs	r0, #103	; 0x67
 8008368:	e797      	b.n	800829a <SendMessageFromPort+0x2aa>
 800836a:	2067      	movs	r0, #103	; 0x67
 800836c:	e795      	b.n	800829a <SendMessageFromPort+0x2aa>
 800836e:	2067      	movs	r0, #103	; 0x67
 8008370:	e793      	b.n	800829a <SendMessageFromPort+0x2aa>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8008372:	2069      	movs	r0, #105	; 0x69
 8008374:	e791      	b.n	800829a <SendMessageFromPort+0x2aa>
 8008376:	46c0      	nop			; (mov r8, r8)
 8008378:	20000d00 	.word	0x20000d00
 800837c:	20000cf8 	.word	0x20000cf8
 8008380:	20000d38 	.word	0x20000d38
 8008384:	20000d03 	.word	0x20000d03
 8008388:	20001a08 	.word	0x20001a08
 800838c:	20000aa0 	.word	0x20000aa0
 8008390:	20000b44 	.word	0x20000b44
 8008394:	20001f5c 	.word	0x20001f5c
 8008398:	20000b6c 	.word	0x20000b6c
 800839c:	200011b8 	.word	0x200011b8
 80083a0:	20000050 	.word	0x20000050
 80083a4:	20000008 	.word	0x20000008
 80083a8:	20000aa4 	.word	0x20000aa4
 80083ac:	20000cf0 	.word	0x20000cf0
 80083b0:	200011e6 	.word	0x200011e6
 80083b4:	200011e5 	.word	0x200011e5
 80083b8:	20000c6c 	.word	0x20000c6c
 80083bc:	20000b9c 	.word	0x20000b9c
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80083c0:	2069      	movs	r0, #105	; 0x69
 80083c2:	e76a      	b.n	800829a <SendMessageFromPort+0x2aa>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80083c4:	2069      	movs	r0, #105	; 0x69
 80083c6:	e768      	b.n	800829a <SendMessageFromPort+0x2aa>

080083c8 <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80083c8:	b530      	push	{r4, r5, lr}
 80083ca:	b083      	sub	sp, #12
 80083cc:	0004      	movs	r4, r0
	AddBcastPayload = false;
 80083ce:	4b0b      	ldr	r3, [pc, #44]	; (80083fc <ForwardReceivedMessage+0x34>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 80083d4:	1e42      	subs	r2, r0, #1
 80083d6:	00d3      	lsls	r3, r2, #3
 80083d8:	1a9b      	subs	r3, r3, r2
 80083da:	00db      	lsls	r3, r3, #3
 80083dc:	4a08      	ldr	r2, [pc, #32]	; (8008400 <ForwardReceivedMessage+0x38>)
 80083de:	5c9d      	ldrb	r5, [r3, r2]
		port =FindRoute(myID,dst);
 80083e0:	4b08      	ldr	r3, [pc, #32]	; (8008404 <ForwardReceivedMessage+0x3c>)
 80083e2:	7818      	ldrb	r0, [r3, #0]
 80083e4:	0029      	movs	r1, r5
 80083e6:	f7fb fc5d 	bl	8003ca4 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 80083ea:	9400      	str	r4, [sp, #0]
 80083ec:	2300      	movs	r3, #0
 80083ee:	002a      	movs	r2, r5
 80083f0:	2100      	movs	r1, #0
 80083f2:	f7ff fdfd 	bl	8007ff0 <SendMessageFromPort>
}
 80083f6:	2000      	movs	r0, #0
 80083f8:	b003      	add	sp, #12
 80083fa:	bd30      	pop	{r4, r5, pc}
 80083fc:	200011b8 	.word	0x200011b8
 8008400:	20000d38 	.word	0x20000d38
 8008404:	20000aa0 	.word	0x20000aa0

08008408 <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8008408:	b500      	push	{lr}
 800840a:	b083      	sub	sp, #12
	AddBcastPayload = false;
 800840c:	4b0c      	ldr	r3, [pc, #48]	; (8008440 <BroadcastReceivedMessage+0x38>)
 800840e:	2200      	movs	r2, #0
 8008410:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 8008412:	4b0c      	ldr	r3, [pc, #48]	; (8008444 <BroadcastReceivedMessage+0x3c>)
 8008414:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8008416:	28ff      	cmp	r0, #255	; 0xff
 8008418:	d009      	beq.n	800842e <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 800841a:	9100      	str	r1, [sp, #0]
 800841c:	2300      	movs	r3, #0
 800841e:	22fe      	movs	r2, #254	; 0xfe
 8008420:	2100      	movs	r1, #0
 8008422:	2000      	movs	r0, #0
 8008424:	f7ff fde4 	bl	8007ff0 <SendMessageFromPort>
}
 8008428:	2000      	movs	r0, #0
 800842a:	b003      	add	sp, #12
 800842c:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 800842e:	9100      	str	r1, [sp, #0]
 8008430:	2300      	movs	r3, #0
 8008432:	32ff      	adds	r2, #255	; 0xff
 8008434:	2100      	movs	r1, #0
 8008436:	2000      	movs	r0, #0
 8008438:	f7ff fdda 	bl	8007ff0 <SendMessageFromPort>
 800843c:	e7f4      	b.n	8008428 <BroadcastReceivedMessage+0x20>
 800843e:	46c0      	nop			; (mov r8, r8)
 8008440:	200011b8 	.word	0x200011b8
 8008444:	20000050 	.word	0x20000050

08008448 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8008448:	b530      	push	{r4, r5, lr}
 800844a:	b083      	sub	sp, #12
 800844c:	001c      	movs	r4, r3
	AddBcastPayload = true;
 800844e:	4b0f      	ldr	r3, [pc, #60]	; (800848c <BroadcastMessage+0x44>)
 8008450:	2501      	movs	r5, #1
 8008452:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8008454:	4b0e      	ldr	r3, [pc, #56]	; (8008490 <BroadcastMessage+0x48>)
 8008456:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8008458:	29ff      	cmp	r1, #255	; 0xff
 800845a:	d00e      	beq.n	800847a <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 800845c:	9400      	str	r4, [sp, #0]
 800845e:	0013      	movs	r3, r2
 8008460:	22fe      	movs	r2, #254	; 0xfe
 8008462:	0001      	movs	r1, r0
 8008464:	2000      	movs	r0, #0
 8008466:	f7ff fdc3 	bl	8007ff0 <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 800846a:	0022      	movs	r2, r4
 800846c:	2100      	movs	r1, #0
 800846e:	4809      	ldr	r0, [pc, #36]	; (8008494 <BroadcastMessage+0x4c>)
 8008470:	f00b f837 	bl	80134e2 <memset>
}
 8008474:	2000      	movs	r0, #0
 8008476:	b003      	add	sp, #12
 8008478:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 800847a:	9400      	str	r4, [sp, #0]
 800847c:	0013      	movs	r3, r2
 800847e:	22ff      	movs	r2, #255	; 0xff
 8008480:	0001      	movs	r1, r0
 8008482:	2000      	movs	r0, #0
 8008484:	f7ff fdb4 	bl	8007ff0 <SendMessageFromPort>
 8008488:	e7ef      	b.n	800846a <BroadcastMessage+0x22>
 800848a:	46c0      	nop			; (mov r8, r8)
 800848c:	200011b8 	.word	0x200011b8
 8008490:	20000050 	.word	0x20000050
 8008494:	20000b6c 	.word	0x20000b6c

08008498 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8008498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800849a:	b083      	sub	sp, #12
 800849c:	0004      	movs	r4, r0
 800849e:	000e      	movs	r6, r1
 80084a0:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 80084a2:	28ff      	cmp	r0, #255	; 0xff
 80084a4:	d012      	beq.n	80084cc <SendMessageToModule+0x34>
				port =FindRoute(myID,dst);
 80084a6:	4f0d      	ldr	r7, [pc, #52]	; (80084dc <SendMessageToModule+0x44>)
 80084a8:	7838      	ldrb	r0, [r7, #0]
 80084aa:	0021      	movs	r1, r4
 80084ac:	f7fb fbfa 	bl	8003ca4 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 80084b0:	7839      	ldrb	r1, [r7, #0]
 80084b2:	9500      	str	r5, [sp, #0]
 80084b4:	0033      	movs	r3, r6
 80084b6:	0022      	movs	r2, r4
 80084b8:	f7ff fd9a 	bl	8007ff0 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 80084bc:	002a      	movs	r2, r5
 80084be:	2100      	movs	r1, #0
 80084c0:	4807      	ldr	r0, [pc, #28]	; (80084e0 <SendMessageToModule+0x48>)
 80084c2:	f00b f80e 	bl	80134e2 <memset>
}
 80084c6:	2000      	movs	r0, #0
 80084c8:	b003      	add	sp, #12
 80084ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 80084cc:	4b03      	ldr	r3, [pc, #12]	; (80084dc <SendMessageToModule+0x44>)
 80084ce:	7818      	ldrb	r0, [r3, #0]
 80084d0:	0013      	movs	r3, r2
 80084d2:	000a      	movs	r2, r1
 80084d4:	21ff      	movs	r1, #255	; 0xff
 80084d6:	f7ff ffb7 	bl	8008448 <BroadcastMessage>
 80084da:	e7f4      	b.n	80084c6 <SendMessageToModule+0x2e>
 80084dc:	20000aa0 	.word	0x20000aa0
 80084e0:	20000b6c 	.word	0x20000b6c

080084e4 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 80084e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084e6:	46de      	mov	lr, fp
 80084e8:	4657      	mov	r7, sl
 80084ea:	464e      	mov	r6, r9
 80084ec:	4645      	mov	r5, r8
 80084ee:	b5e0      	push	{r5, r6, r7, lr}
 80084f0:	b08b      	sub	sp, #44	; 0x2c
 80084f2:	9009      	str	r0, [sp, #36]	; 0x24
 80084f4:	000e      	movs	r6, r1
 80084f6:	9208      	str	r2, [sp, #32]
 80084f8:	001d      	movs	r5, r3
 80084fa:	ab14      	add	r3, sp, #80	; 0x50
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	469b      	mov	fp, r3
 8008500:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008502:	4698      	mov	r8, r3
 8008504:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008506:	4699      	mov	r9, r3
 8008508:	ab17      	add	r3, sp, #92	; 0x5c
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 800850e:	4b56      	ldr	r3, [pc, #344]	; (8008668 <StartScastDMAStream+0x184>)
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	428b      	cmp	r3, r1
 8008514:	d101      	bne.n	800851a <StartScastDMAStream+0x36>
		
		return result;
	}
	
	/* Inform participating modules */
	for(uint8_t i =0; i < sizeof(route); i++){
 8008516:	2400      	movs	r4, #0
 8008518:	e060      	b.n	80085dc <StartScastDMAStream+0xf8>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800851a:	4643      	mov	r3, r8
 800851c:	0e1a      	lsrs	r2, r3, #24
 800851e:	4b53      	ldr	r3, [pc, #332]	; (800866c <StartScastDMAStream+0x188>)
 8008520:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8008522:	4642      	mov	r2, r8
 8008524:	0c12      	lsrs	r2, r2, #16
 8008526:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8008528:	4642      	mov	r2, r8
 800852a:	0a12      	lsrs	r2, r2, #8
 800852c:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 800852e:	4642      	mov	r2, r8
 8008530:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008532:	464a      	mov	r2, r9
 8008534:	0e12      	lsrs	r2, r2, #24
 8008536:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8008538:	464a      	mov	r2, r9
 800853a:	0c12      	lsrs	r2, r2, #16
 800853c:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 800853e:	464a      	mov	r2, r9
 8008540:	0a12      	lsrs	r2, r2, #8
 8008542:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8008544:	464a      	mov	r2, r9
 8008546:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8008548:	465a      	mov	r2, fp
 800854a:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 800854c:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 800854e:	729d      	strb	r5, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 8008550:	9a08      	ldr	r2, [sp, #32]
 8008552:	72da      	strb	r2, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 8008554:	4652      	mov	r2, sl
 8008556:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8008558:	220d      	movs	r2, #13
 800855a:	211c      	movs	r1, #28
 800855c:	0030      	movs	r0, r6
 800855e:	f7ff ff9b 	bl	8008498 <SendMessageToModule>
		return result;
 8008562:	e065      	b.n	8008630 <StartScastDMAStream+0x14c>
			/* Find out the inport and outport to this module from previous one */
			if(route[i + 1]){
				temp1 =FindRoute(route[i],route[i + 1]);
			}
			else{
				temp1 =FindRoute(route[i],srcM);
 8008564:	0031      	movs	r1, r6
 8008566:	f7fb fb9d 	bl	8003ca4 <FindRoute>
 800856a:	9007      	str	r0, [sp, #28]
			}
			FindRoute(srcM,dstM);
 800856c:	0029      	movs	r1, r5
 800856e:	0030      	movs	r0, r6
 8008570:	f7fb fb98 	bl	8003ca4 <FindRoute>
			if(route[i] == dstM){
 8008574:	4b3e      	ldr	r3, [pc, #248]	; (8008670 <StartScastDMAStream+0x18c>)
 8008576:	19db      	adds	r3, r3, r7
 8008578:	7918      	ldrb	r0, [r3, #4]
 800857a:	42a8      	cmp	r0, r5
 800857c:	d144      	bne.n	8008608 <StartScastDMAStream+0x124>
				temp2 =dstP;
 800857e:	9808      	ldr	r0, [sp, #32]
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008580:	4643      	mov	r3, r8
 8008582:	0e1a      	lsrs	r2, r3, #24
 8008584:	4b39      	ldr	r3, [pc, #228]	; (800866c <StartScastDMAStream+0x188>)
 8008586:	701a      	strb	r2, [r3, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8008588:	4642      	mov	r2, r8
 800858a:	0c12      	lsrs	r2, r2, #16
 800858c:	705a      	strb	r2, [r3, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 800858e:	4642      	mov	r2, r8
 8008590:	0a12      	lsrs	r2, r2, #8
 8008592:	709a      	strb	r2, [r3, #2]
			messageParams[3] =(uint8_t )count;
 8008594:	4642      	mov	r2, r8
 8008596:	70da      	strb	r2, [r3, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008598:	464a      	mov	r2, r9
 800859a:	0e12      	lsrs	r2, r2, #24
 800859c:	711a      	strb	r2, [r3, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 800859e:	464a      	mov	r2, r9
 80085a0:	0c12      	lsrs	r2, r2, #16
 80085a2:	715a      	strb	r2, [r3, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 80085a4:	464a      	mov	r2, r9
 80085a6:	0a12      	lsrs	r2, r2, #8
 80085a8:	719a      	strb	r2, [r3, #6]
			messageParams[7] =(uint8_t )timeout;
 80085aa:	464a      	mov	r2, r9
 80085ac:	71da      	strb	r2, [r3, #7]
			messageParams[8] =direction; /* Stream direction */
 80085ae:	465a      	mov	r2, fp
 80085b0:	721a      	strb	r2, [r3, #8]
			messageParams[9] =temp1; /* Source port */
 80085b2:	9a07      	ldr	r2, [sp, #28]
 80085b4:	725a      	strb	r2, [r3, #9]
			messageParams[10] =temp2; /* destination port */
 80085b6:	7298      	strb	r0, [r3, #10]
			messageParams[11] =stored; /* EEPROM storage */
 80085b8:	4652      	mov	r2, sl
 80085ba:	72da      	strb	r2, [r3, #11]
			FindRoute(srcM,dstM);
 80085bc:	0029      	movs	r1, r5
 80085be:	0030      	movs	r0, r6
 80085c0:	f7fb fb70 	bl	8003ca4 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 80085c4:	4b2a      	ldr	r3, [pc, #168]	; (8008670 <StartScastDMAStream+0x18c>)
 80085c6:	19df      	adds	r7, r3, r7
 80085c8:	7938      	ldrb	r0, [r7, #4]
 80085ca:	220c      	movs	r2, #12
 80085cc:	211b      	movs	r1, #27
 80085ce:	f7ff ff63 	bl	8008498 <SendMessageToModule>
			osDelay(10);
 80085d2:	200a      	movs	r0, #10
 80085d4:	f005 fd8c 	bl	800e0f0 <osDelay>
	for(uint8_t i =0; i < sizeof(route); i++){
 80085d8:	3401      	adds	r4, #1
 80085da:	b2e4      	uxtb	r4, r4
 80085dc:	2c19      	cmp	r4, #25
 80085de:	d81a      	bhi.n	8008616 <StartScastDMAStream+0x132>
		FindRoute(srcM,dstM);
 80085e0:	0029      	movs	r1, r5
 80085e2:	0030      	movs	r0, r6
 80085e4:	f7fb fb5e 	bl	8003ca4 <FindRoute>
		if(route[i]){
 80085e8:	0027      	movs	r7, r4
 80085ea:	4b21      	ldr	r3, [pc, #132]	; (8008670 <StartScastDMAStream+0x18c>)
 80085ec:	191b      	adds	r3, r3, r4
 80085ee:	7918      	ldrb	r0, [r3, #4]
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d0f1      	beq.n	80085d8 <StartScastDMAStream+0xf4>
			if(route[i + 1]){
 80085f4:	1c62      	adds	r2, r4, #1
 80085f6:	4b1e      	ldr	r3, [pc, #120]	; (8008670 <StartScastDMAStream+0x18c>)
 80085f8:	189b      	adds	r3, r3, r2
 80085fa:	7919      	ldrb	r1, [r3, #4]
 80085fc:	2900      	cmp	r1, #0
 80085fe:	d0b1      	beq.n	8008564 <StartScastDMAStream+0x80>
				temp1 =FindRoute(route[i],route[i + 1]);
 8008600:	f7fb fb50 	bl	8003ca4 <FindRoute>
 8008604:	9007      	str	r0, [sp, #28]
 8008606:	e7b1      	b.n	800856c <StartScastDMAStream+0x88>
				temp2 =FindRoute(route[i],route[i - 1]);
 8008608:	1e7a      	subs	r2, r7, #1
 800860a:	4b19      	ldr	r3, [pc, #100]	; (8008670 <StartScastDMAStream+0x18c>)
 800860c:	189b      	adds	r3, r3, r2
 800860e:	7919      	ldrb	r1, [r3, #4]
 8008610:	f7fb fb48 	bl	8003ca4 <FindRoute>
 8008614:	e7b4      	b.n	8008580 <StartScastDMAStream+0x9c>
		}
	}
	
	if(srcM == dstM)
 8008616:	42ae      	cmp	r6, r5
 8008618:	d112      	bne.n	8008640 <StartScastDMAStream+0x15c>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 800861a:	9b08      	ldr	r3, [sp, #32]
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008620:	464a      	mov	r2, r9
 8008622:	4641      	mov	r1, r8
 8008624:	4658      	mov	r0, fp
 8008626:	f7ff fbcf 	bl	8007dc8 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 800862a:	4653      	mov	r3, sl
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10d      	bne.n	800864c <StartScastDMAStream+0x168>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8008630:	2000      	movs	r0, #0
 8008632:	b00b      	add	sp, #44	; 0x2c
 8008634:	bcf0      	pop	{r4, r5, r6, r7}
 8008636:	46bb      	mov	fp, r7
 8008638:	46b2      	mov	sl, r6
 800863a:	46a9      	mov	r9, r5
 800863c:	46a0      	mov	r8, r4
 800863e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 8008640:	0029      	movs	r1, r5
 8008642:	0030      	movs	r0, r6
 8008644:	f7fb fb2e 	bl	8003ca4 <FindRoute>
 8008648:	9008      	str	r0, [sp, #32]
 800864a:	e7e6      	b.n	800861a <StartScastDMAStream+0x136>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 800864c:	2300      	movs	r3, #0
 800864e:	9304      	str	r3, [sp, #16]
 8008650:	9303      	str	r3, [sp, #12]
 8008652:	9302      	str	r3, [sp, #8]
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	9b08      	ldr	r3, [sp, #32]
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800865c:	464a      	mov	r2, r9
 800865e:	4641      	mov	r1, r8
 8008660:	4658      	mov	r0, fp
 8008662:	f7fb f821 	bl	80036a8 <SaveEEstreams>
 8008666:	e7e3      	b.n	8008630 <StartScastDMAStream+0x14c>
 8008668:	20000aa0 	.word	0x20000aa0
 800866c:	20000b6c 	.word	0x20000b6c
 8008670:	20001f5c 	.word	0x20001f5c

08008674 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	4b03      	ldr	r3, [pc, #12]	; (8008688 <NVIC_SystemReset+0x14>)
 800867a:	4a04      	ldr	r2, [pc, #16]	; (800868c <NVIC_SystemReset+0x18>)
 800867c:	60da      	str	r2, [r3, #12]
 800867e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008682:	46c0      	nop			; (mov r8, r8)
 8008684:	e7fd      	b.n	8008682 <NVIC_SystemReset+0xe>
 8008686:	46c0      	nop			; (mov r8, r8)
 8008688:	e000ed00 	.word	0xe000ed00
 800868c:	05fa0004 	.word	0x05fa0004

08008690 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8008690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008692:	46d6      	mov	lr, sl
 8008694:	464f      	mov	r7, r9
 8008696:	4646      	mov	r6, r8
 8008698:	b5c0      	push	{r6, r7, lr}
 800869a:	b084      	sub	sp, #16

	uint8_t calculated_crc,port_number,length,port_index;

			uint8_t temp_length[NumOfPorts] = {0};
 800869c:	2300      	movs	r3, #0
 800869e:	9302      	str	r3, [sp, #8]
 80086a0:	aa02      	add	r2, sp, #8
 80086a2:	7113      	strb	r3, [r2, #4]
			uint8_t temp_index[NumOfPorts] = {0};
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	466a      	mov	r2, sp
 80086a8:	7113      	strb	r3, [r2, #4]
 80086aa:	e08b      	b.n	80087c4 <BackEndTask+0x134>

	for(;;)
	{
       for(port_DMA=0;port_DMA<NumOfPorts;)
       {port_index=port_DMA;
		index_input[port_DMA]=MSG_RX_BUF_SIZE-(*index_dma[port_DMA]);
 80086ac:	009a      	lsls	r2, r3, #2
 80086ae:	49c5      	ldr	r1, [pc, #788]	; (80089c4 <BackEndTask+0x334>)
 80086b0:	5852      	ldr	r2, [r2, r1]
 80086b2:	6811      	ldr	r1, [r2, #0]
 80086b4:	2240      	movs	r2, #64	; 0x40
 80086b6:	4252      	negs	r2, r2
 80086b8:	1a52      	subs	r2, r2, r1
 80086ba:	b2d2      	uxtb	r2, r2
 80086bc:	49c2      	ldr	r1, [pc, #776]	; (80089c8 <BackEndTask+0x338>)
 80086be:	54ca      	strb	r2, [r1, r3]

		if(index_input[port_DMA] !=index_process[port_DMA])
 80086c0:	49c2      	ldr	r1, [pc, #776]	; (80089cc <BackEndTask+0x33c>)
 80086c2:	5cc8      	ldrb	r0, [r1, r3]
 80086c4:	4282      	cmp	r2, r0
 80086c6:	d100      	bne.n	80086ca <BackEndTask+0x3a>
 80086c8:	e0e3      	b.n	8008892 <BackEndTask+0x202>
		{ port_number =port_DMA+1;
 80086ca:	1c59      	adds	r1, r3, #1
 80086cc:	b2c9      	uxtb	r1, r1
			if(UARTRxBuf[port_number-1][index_process[port_DMA]] == 0x0D && portStatus[port_number] == FREE)
 80086ce:	1e4c      	subs	r4, r1, #1
 80086d0:	0062      	lsls	r2, r4, #1
 80086d2:	1912      	adds	r2, r2, r4
 80086d4:	0192      	lsls	r2, r2, #6
 80086d6:	4cbe      	ldr	r4, [pc, #760]	; (80089d0 <BackEndTask+0x340>)
 80086d8:	18a2      	adds	r2, r4, r2
 80086da:	5c12      	ldrb	r2, [r2, r0]
 80086dc:	2a0d      	cmp	r2, #13
 80086de:	d02b      	beq.n	8008738 <BackEndTask+0xa8>

				if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
				Activate_CLI_For_First_Time_Flag = 1;

			}
			else if(portStatus[port_number] == CLI)
 80086e0:	48bc      	ldr	r0, [pc, #752]	; (80089d4 <BackEndTask+0x344>)
 80086e2:	5c40      	ldrb	r0, [r0, r1]
 80086e4:	2803      	cmp	r0, #3
 80086e6:	d052      	beq.n	800878e <BackEndTask+0xfe>
			{
				CLI_Data = UARTRxBuf[port_number-1][index_process[port_DMA]];
				Read_In_CLI_Task_Flag = 1;
			}

			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  == 'H' && portStatus[port_number] == FREE)
 80086e8:	2a48      	cmp	r2, #72	; 0x48
 80086ea:	d06f      	beq.n	80087cc <BackEndTask+0x13c>
			{
				portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
			}

			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  == 'Z' && portStatus[port_number] == H_Status)
 80086ec:	2a5a      	cmp	r2, #90	; 0x5a
 80086ee:	d073      	beq.n	80087d8 <BackEndTask+0x148>
			{
				portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
			}

			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  != 'Z' && portStatus[port_number] == H_Status)
 80086f0:	2a5a      	cmp	r2, #90	; 0x5a
 80086f2:	d001      	beq.n	80086f8 <BackEndTask+0x68>
 80086f4:	2807      	cmp	r0, #7
 80086f6:	d075      	beq.n	80087e4 <BackEndTask+0x154>
			{
				portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
			}

			else if(portStatus[port_number] == Z_Status)
 80086f8:	2808      	cmp	r0, #8
 80086fa:	d077      	beq.n	80087ec <BackEndTask+0x15c>
				MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
				temp_index[port_index] = 3;
				temp_length[port_index] =UARTRxBuf[port_number-1][index_process[port_DMA]]  + 1;
			}

			else if(portStatus[port_number] == MSG)
 80086fc:	2801      	cmp	r0, #1
 80086fe:	d14b      	bne.n	8008798 <BackEndTask+0x108>
			{
				if(temp_length[port_index] > 1)
 8008700:	a802      	add	r0, sp, #8
 8008702:	5cc0      	ldrb	r0, [r0, r3]
 8008704:	2801      	cmp	r0, #1
 8008706:	d800      	bhi.n	800870a <BackEndTask+0x7a>
 8008708:	e088      	b.n	800881c <BackEndTask+0x18c>
				{
					MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
 800870a:	49b3      	ldr	r1, [pc, #716]	; (80089d8 <BackEndTask+0x348>)
 800870c:	5ccc      	ldrb	r4, [r1, r3]
 800870e:	4669      	mov	r1, sp
 8008710:	5ccd      	ldrb	r5, [r1, r3]
 8008712:	00e1      	lsls	r1, r4, #3
 8008714:	1b09      	subs	r1, r1, r4
 8008716:	00c9      	lsls	r1, r1, #3
 8008718:	009e      	lsls	r6, r3, #2
 800871a:	18f6      	adds	r6, r6, r3
 800871c:	00f4      	lsls	r4, r6, #3
 800871e:	1ba4      	subs	r4, r4, r6
 8008720:	00e4      	lsls	r4, r4, #3
 8008722:	1909      	adds	r1, r1, r4
 8008724:	4cad      	ldr	r4, [pc, #692]	; (80089dc <BackEndTask+0x34c>)
 8008726:	1861      	adds	r1, r4, r1
 8008728:	554a      	strb	r2, [r1, r5]
					temp_index[port_index]++;
 800872a:	3501      	adds	r5, #1
 800872c:	466a      	mov	r2, sp
 800872e:	54d5      	strb	r5, [r2, r3]
					temp_length[port_index]--;
 8008730:	3801      	subs	r0, #1
 8008732:	aa02      	add	r2, sp, #8
 8008734:	54d0      	strb	r0, [r2, r3]
 8008736:	e02f      	b.n	8008798 <BackEndTask+0x108>
			if(UARTRxBuf[port_number-1][index_process[port_DMA]] == 0x0D && portStatus[port_number] == FREE)
 8008738:	48a6      	ldr	r0, [pc, #664]	; (80089d4 <BackEndTask+0x344>)
 800873a:	5c40      	ldrb	r0, [r0, r1]
 800873c:	2800      	cmp	r0, #0
 800873e:	d1cf      	bne.n	80086e0 <BackEndTask+0x50>
				for(int i=0;i<=NumOfPorts;i++) // Free previous CLI port
 8008740:	2300      	movs	r3, #0
 8008742:	e000      	b.n	8008746 <BackEndTask+0xb6>
 8008744:	3301      	adds	r3, #1
 8008746:	2b05      	cmp	r3, #5
 8008748:	dc07      	bgt.n	800875a <BackEndTask+0xca>
					if(portStatus[i] == CLI)
 800874a:	48a2      	ldr	r0, [pc, #648]	; (80089d4 <BackEndTask+0x344>)
 800874c:	5cc0      	ldrb	r0, [r0, r3]
 800874e:	2803      	cmp	r0, #3
 8008750:	d1f8      	bne.n	8008744 <BackEndTask+0xb4>
						portStatus[i] = FREE;
 8008752:	48a0      	ldr	r0, [pc, #640]	; (80089d4 <BackEndTask+0x344>)
 8008754:	2400      	movs	r4, #0
 8008756:	54c4      	strb	r4, [r0, r3]
 8008758:	e7f4      	b.n	8008744 <BackEndTask+0xb4>
				portStatus[port_number] =CLI; // Continue the CLI session on this port
 800875a:	4b9e      	ldr	r3, [pc, #632]	; (80089d4 <BackEndTask+0x344>)
 800875c:	2003      	movs	r0, #3
 800875e:	5458      	strb	r0, [r3, r1]
				PcPort = port_number;
 8008760:	4b9f      	ldr	r3, [pc, #636]	; (80089e0 <BackEndTask+0x350>)
 8008762:	7019      	strb	r1, [r3, #0]
				CLI_Data = UARTRxBuf[port_number-1][index_process[port_DMA]];
 8008764:	4b9f      	ldr	r3, [pc, #636]	; (80089e4 <BackEndTask+0x354>)
 8008766:	701a      	strb	r2, [r3, #0]
				xTaskNotifyGive(xCommandConsoleTaskHandle);
 8008768:	4b9f      	ldr	r3, [pc, #636]	; (80089e8 <BackEndTask+0x358>)
 800876a:	6818      	ldr	r0, [r3, #0]
 800876c:	2300      	movs	r3, #0
 800876e:	2202      	movs	r2, #2
 8008770:	2100      	movs	r1, #0
 8008772:	f006 ffed 	bl	800f750 <xTaskGenericNotify>
				if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 8008776:	4b9d      	ldr	r3, [pc, #628]	; (80089ec <BackEndTask+0x35c>)
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d003      	beq.n	8008786 <BackEndTask+0xf6>
				Activate_CLI_For_First_Time_Flag = 1;
 800877e:	4b9b      	ldr	r3, [pc, #620]	; (80089ec <BackEndTask+0x35c>)
 8008780:	2201      	movs	r2, #1
 8008782:	701a      	strb	r2, [r3, #0]
 8008784:	e008      	b.n	8008798 <BackEndTask+0x108>
				if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 8008786:	4b9a      	ldr	r3, [pc, #616]	; (80089f0 <BackEndTask+0x360>)
 8008788:	2201      	movs	r2, #1
 800878a:	701a      	strb	r2, [r3, #0]
 800878c:	e7f7      	b.n	800877e <BackEndTask+0xee>
				CLI_Data = UARTRxBuf[port_number-1][index_process[port_DMA]];
 800878e:	4b95      	ldr	r3, [pc, #596]	; (80089e4 <BackEndTask+0x354>)
 8008790:	701a      	strb	r2, [r3, #0]
				Read_In_CLI_Task_Flag = 1;
 8008792:	4b97      	ldr	r3, [pc, #604]	; (80089f0 <BackEndTask+0x360>)
 8008794:	2201      	movs	r2, #1
 8008796:	701a      	strb	r2, [r3, #0]
					Process_Message_Buffer_Index_End++;
					if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
					portStatus[port_number] =FREE; // End of receiving message.
				}
			}
			index_process[port_DMA]++;
 8008798:	4b96      	ldr	r3, [pc, #600]	; (80089f4 <BackEndTask+0x364>)
 800879a:	781a      	ldrb	r2, [r3, #0]
 800879c:	498b      	ldr	r1, [pc, #556]	; (80089cc <BackEndTask+0x33c>)
 800879e:	5c8b      	ldrb	r3, [r1, r2]
 80087a0:	3301      	adds	r3, #1
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	548b      	strb	r3, [r1, r2]
			if(index_process[port_DMA]==MSG_RX_BUF_SIZE)
 80087a6:	2bc0      	cmp	r3, #192	; 0xc0
 80087a8:	d06f      	beq.n	800888a <BackEndTask+0x1fa>
		else if(index_input[port_DMA] ==index_process[port_DMA])
		   {
			port_DMA++;
			}

		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80087aa:	4b93      	ldr	r3, [pc, #588]	; (80089f8 <BackEndTask+0x368>)
 80087ac:	781a      	ldrb	r2, [r3, #0]
 80087ae:	4b93      	ldr	r3, [pc, #588]	; (80089fc <BackEndTask+0x36c>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d171      	bne.n	800889a <BackEndTask+0x20a>

			Process_Message_Buffer_Index_Start++;
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
		}

		taskYIELD();
 80087b6:	f007 fa39 	bl	800fc2c <vPortYield>
       for(port_DMA=0;port_DMA<NumOfPorts;)
 80087ba:	4b8e      	ldr	r3, [pc, #568]	; (80089f4 <BackEndTask+0x364>)
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	2b04      	cmp	r3, #4
 80087c0:	d800      	bhi.n	80087c4 <BackEndTask+0x134>
 80087c2:	e773      	b.n	80086ac <BackEndTask+0x1c>
 80087c4:	4b8b      	ldr	r3, [pc, #556]	; (80089f4 <BackEndTask+0x364>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	701a      	strb	r2, [r3, #0]
 80087ca:	e7f6      	b.n	80087ba <BackEndTask+0x12a>
			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  == 'H' && portStatus[port_number] == FREE)
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d18d      	bne.n	80086ec <BackEndTask+0x5c>
				portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 80087d0:	4b80      	ldr	r3, [pc, #512]	; (80089d4 <BackEndTask+0x344>)
 80087d2:	3a41      	subs	r2, #65	; 0x41
 80087d4:	545a      	strb	r2, [r3, r1]
 80087d6:	e7df      	b.n	8008798 <BackEndTask+0x108>
			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  == 'Z' && portStatus[port_number] == H_Status)
 80087d8:	2807      	cmp	r0, #7
 80087da:	d189      	bne.n	80086f0 <BackEndTask+0x60>
				portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 80087dc:	4b7d      	ldr	r3, [pc, #500]	; (80089d4 <BackEndTask+0x344>)
 80087de:	3a52      	subs	r2, #82	; 0x52
 80087e0:	545a      	strb	r2, [r3, r1]
 80087e2:	e7d9      	b.n	8008798 <BackEndTask+0x108>
				portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
 80087e4:	4b7b      	ldr	r3, [pc, #492]	; (80089d4 <BackEndTask+0x344>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	545a      	strb	r2, [r3, r1]
 80087ea:	e7d5      	b.n	8008798 <BackEndTask+0x108>
				portStatus[port_number] =MSG; // Receive length byte.
 80087ec:	4879      	ldr	r0, [pc, #484]	; (80089d4 <BackEndTask+0x344>)
 80087ee:	2401      	movs	r4, #1
 80087f0:	5444      	strb	r4, [r0, r1]
				MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
 80087f2:	4979      	ldr	r1, [pc, #484]	; (80089d8 <BackEndTask+0x348>)
 80087f4:	5cc8      	ldrb	r0, [r1, r3]
 80087f6:	00c1      	lsls	r1, r0, #3
 80087f8:	1a09      	subs	r1, r1, r0
 80087fa:	00c9      	lsls	r1, r1, #3
 80087fc:	009c      	lsls	r4, r3, #2
 80087fe:	18e4      	adds	r4, r4, r3
 8008800:	00e0      	lsls	r0, r4, #3
 8008802:	1b00      	subs	r0, r0, r4
 8008804:	00c0      	lsls	r0, r0, #3
 8008806:	1809      	adds	r1, r1, r0
 8008808:	4874      	ldr	r0, [pc, #464]	; (80089dc <BackEndTask+0x34c>)
 800880a:	1841      	adds	r1, r0, r1
 800880c:	708a      	strb	r2, [r1, #2]
				temp_index[port_index] = 3;
 800880e:	2103      	movs	r1, #3
 8008810:	4668      	mov	r0, sp
 8008812:	54c1      	strb	r1, [r0, r3]
				temp_length[port_index] =UARTRxBuf[port_number-1][index_process[port_DMA]]  + 1;
 8008814:	3201      	adds	r2, #1
 8008816:	a902      	add	r1, sp, #8
 8008818:	54ca      	strb	r2, [r1, r3]
 800881a:	e7bd      	b.n	8008798 <BackEndTask+0x108>
					MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
 800881c:	4e6e      	ldr	r6, [pc, #440]	; (80089d8 <BackEndTask+0x348>)
 800881e:	5cf4      	ldrb	r4, [r6, r3]
 8008820:	466d      	mov	r5, sp
 8008822:	5ced      	ldrb	r5, [r5, r3]
 8008824:	46ac      	mov	ip, r5
 8008826:	00e5      	lsls	r5, r4, #3
 8008828:	1b2d      	subs	r5, r5, r4
 800882a:	00ed      	lsls	r5, r5, #3
 800882c:	46a9      	mov	r9, r5
 800882e:	009f      	lsls	r7, r3, #2
 8008830:	46b8      	mov	r8, r7
 8008832:	4498      	add	r8, r3
 8008834:	4647      	mov	r7, r8
 8008836:	00ff      	lsls	r7, r7, #3
 8008838:	4645      	mov	r5, r8
 800883a:	1b7f      	subs	r7, r7, r5
 800883c:	00ff      	lsls	r7, r7, #3
 800883e:	003d      	movs	r5, r7
 8008840:	444d      	add	r5, r9
 8008842:	4f66      	ldr	r7, [pc, #408]	; (80089dc <BackEndTask+0x34c>)
 8008844:	197d      	adds	r5, r7, r5
 8008846:	4667      	mov	r7, ip
 8008848:	55ea      	strb	r2, [r5, r7]
					temp_index[port_index]++;
 800884a:	4662      	mov	r2, ip
 800884c:	3201      	adds	r2, #1
 800884e:	466d      	mov	r5, sp
 8008850:	54ea      	strb	r2, [r5, r3]
					temp_length[port_index]--;
 8008852:	3801      	subs	r0, #1
 8008854:	aa02      	add	r2, sp, #8
 8008856:	54d0      	strb	r0, [r2, r3]
					MSG_Buffer_Index_End[port_index]++;
 8008858:	3401      	adds	r4, #1
 800885a:	b2e4      	uxtb	r4, r4
 800885c:	54f4      	strb	r4, [r6, r3]
					if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800885e:	2c05      	cmp	r4, #5
 8008860:	d00c      	beq.n	800887c <BackEndTask+0x1ec>
					Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 8008862:	4a65      	ldr	r2, [pc, #404]	; (80089f8 <BackEndTask+0x368>)
 8008864:	7813      	ldrb	r3, [r2, #0]
 8008866:	4866      	ldr	r0, [pc, #408]	; (8008a00 <BackEndTask+0x370>)
 8008868:	54c1      	strb	r1, [r0, r3]
					Process_Message_Buffer_Index_End++;
 800886a:	3301      	adds	r3, #1
 800886c:	b2db      	uxtb	r3, r3
 800886e:	7013      	strb	r3, [r2, #0]
					if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 8008870:	2b05      	cmp	r3, #5
 8008872:	d006      	beq.n	8008882 <BackEndTask+0x1f2>
					portStatus[port_number] =FREE; // End of receiving message.
 8008874:	4b57      	ldr	r3, [pc, #348]	; (80089d4 <BackEndTask+0x344>)
 8008876:	2200      	movs	r2, #0
 8008878:	545a      	strb	r2, [r3, r1]
 800887a:	e78d      	b.n	8008798 <BackEndTask+0x108>
					if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800887c:	2000      	movs	r0, #0
 800887e:	54f0      	strb	r0, [r6, r3]
 8008880:	e7ef      	b.n	8008862 <BackEndTask+0x1d2>
					if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 8008882:	0013      	movs	r3, r2
 8008884:	2200      	movs	r2, #0
 8008886:	701a      	strb	r2, [r3, #0]
 8008888:	e7f4      	b.n	8008874 <BackEndTask+0x1e4>
				{index_process[port_DMA]=0;}
 800888a:	000b      	movs	r3, r1
 800888c:	2100      	movs	r1, #0
 800888e:	5499      	strb	r1, [r3, r2]
 8008890:	e78b      	b.n	80087aa <BackEndTask+0x11a>
			port_DMA++;
 8008892:	3301      	adds	r3, #1
 8008894:	4a57      	ldr	r2, [pc, #348]	; (80089f4 <BackEndTask+0x364>)
 8008896:	7013      	strb	r3, [r2, #0]
 8008898:	e787      	b.n	80087aa <BackEndTask+0x11a>
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 800889a:	4a59      	ldr	r2, [pc, #356]	; (8008a00 <BackEndTask+0x370>)
 800889c:	5cd3      	ldrb	r3, [r2, r3]
 800889e:	469a      	mov	sl, r3
			port_index = port_number - 1;
 80088a0:	1e5c      	subs	r4, r3, #1
 80088a2:	b2e4      	uxtb	r4, r4
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 80088a4:	4b57      	ldr	r3, [pc, #348]	; (8008a04 <BackEndTask+0x374>)
 80088a6:	5d1f      	ldrb	r7, [r3, r4]
 80088a8:	484c      	ldr	r0, [pc, #304]	; (80089dc <BackEndTask+0x34c>)
 80088aa:	00fb      	lsls	r3, r7, #3
 80088ac:	1bdb      	subs	r3, r3, r7
 80088ae:	00db      	lsls	r3, r3, #3
 80088b0:	00a1      	lsls	r1, r4, #2
 80088b2:	1909      	adds	r1, r1, r4
 80088b4:	00ca      	lsls	r2, r1, #3
 80088b6:	1a52      	subs	r2, r2, r1
 80088b8:	00d2      	lsls	r2, r2, #3
 80088ba:	189b      	adds	r3, r3, r2
 80088bc:	2148      	movs	r1, #72	; 0x48
 80088be:	5419      	strb	r1, [r3, r0]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 80088c0:	18c3      	adds	r3, r0, r3
 80088c2:	225a      	movs	r2, #90	; 0x5a
 80088c4:	705a      	strb	r2, [r3, #1]
			length = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 80088c6:	789d      	ldrb	r5, [r3, #2]
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 80088c8:	4b4f      	ldr	r3, [pc, #316]	; (8008a08 <BackEndTask+0x378>)
 80088ca:	7019      	strb	r1, [r3, #0]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
 80088cc:	705a      	strb	r2, [r3, #1]
			Calculate_CRC_Buffer[2] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 80088ce:	709d      	strb	r5, [r3, #2]
			for(int i=0;i<length;i++)
 80088d0:	2100      	movs	r1, #0
 80088d2:	e00f      	b.n	80088f4 <BackEndTask+0x264>
				Calculate_CRC_Buffer[i+3] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][i + 3];
 80088d4:	1cc8      	adds	r0, r1, #3
 80088d6:	00fb      	lsls	r3, r7, #3
 80088d8:	1bdb      	subs	r3, r3, r7
 80088da:	00db      	lsls	r3, r3, #3
 80088dc:	00a6      	lsls	r6, r4, #2
 80088de:	1936      	adds	r6, r6, r4
 80088e0:	00f2      	lsls	r2, r6, #3
 80088e2:	1b92      	subs	r2, r2, r6
 80088e4:	00d2      	lsls	r2, r2, #3
 80088e6:	189b      	adds	r3, r3, r2
 80088e8:	4a3c      	ldr	r2, [pc, #240]	; (80089dc <BackEndTask+0x34c>)
 80088ea:	18d3      	adds	r3, r2, r3
 80088ec:	5c1a      	ldrb	r2, [r3, r0]
 80088ee:	4b46      	ldr	r3, [pc, #280]	; (8008a08 <BackEndTask+0x378>)
 80088f0:	541a      	strb	r2, [r3, r0]
			for(int i=0;i<length;i++)
 80088f2:	3101      	adds	r1, #1
 80088f4:	428d      	cmp	r5, r1
 80088f6:	dced      	bgt.n	80088d4 <BackEndTask+0x244>
			calculated_crc = CalculateCRC8(Calculate_CRC_Buffer,length + 3);
 80088f8:	1ce9      	adds	r1, r5, #3
 80088fa:	4f43      	ldr	r7, [pc, #268]	; (8008a08 <BackEndTask+0x378>)
 80088fc:	0038      	movs	r0, r7
 80088fe:	f002 ff59 	bl	800b7b4 <CalculateCRC8>
			Message_counter++;
 8008902:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008904:	3301      	adds	r3, #1
 8008906:	873b      	strh	r3, [r7, #56]	; 0x38
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 8008908:	4b3e      	ldr	r3, [pc, #248]	; (8008a04 <BackEndTask+0x374>)
 800890a:	5d1f      	ldrb	r7, [r3, r4]
 800890c:	1cee      	adds	r6, r5, #3
 800890e:	00fb      	lsls	r3, r7, #3
 8008910:	1bdb      	subs	r3, r3, r7
 8008912:	00db      	lsls	r3, r3, #3
 8008914:	00a2      	lsls	r2, r4, #2
 8008916:	1912      	adds	r2, r2, r4
 8008918:	00d1      	lsls	r1, r2, #3
 800891a:	1a89      	subs	r1, r1, r2
 800891c:	00c9      	lsls	r1, r1, #3
 800891e:	185b      	adds	r3, r3, r1
 8008920:	492e      	ldr	r1, [pc, #184]	; (80089dc <BackEndTask+0x34c>)
 8008922:	18cb      	adds	r3, r1, r3
 8008924:	5d9b      	ldrb	r3, [r3, r6]
 8008926:	4283      	cmp	r3, r0
 8008928:	d016      	beq.n	8008958 <BackEndTask+0x2c8>
				Rejected_Messages++;
 800892a:	4a37      	ldr	r2, [pc, #220]	; (8008a08 <BackEndTask+0x378>)
 800892c:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
 800892e:	3301      	adds	r3, #1
 8008930:	8793      	strh	r3, [r2, #60]	; 0x3c
			MSG_Buffer_Index_Start[port_index]++;
 8008932:	4a34      	ldr	r2, [pc, #208]	; (8008a04 <BackEndTask+0x374>)
 8008934:	5d13      	ldrb	r3, [r2, r4]
 8008936:	3301      	adds	r3, #1
 8008938:	b2db      	uxtb	r3, r3
 800893a:	5513      	strb	r3, [r2, r4]
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 800893c:	2b05      	cmp	r3, #5
 800893e:	d03c      	beq.n	80089ba <BackEndTask+0x32a>
			Process_Message_Buffer_Index_Start++;
 8008940:	4a2e      	ldr	r2, [pc, #184]	; (80089fc <BackEndTask+0x36c>)
 8008942:	7813      	ldrb	r3, [r2, #0]
 8008944:	3301      	adds	r3, #1
 8008946:	b2db      	uxtb	r3, r3
 8008948:	7013      	strb	r3, [r2, #0]
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 800894a:	2b05      	cmp	r3, #5
 800894c:	d000      	beq.n	8008950 <BackEndTask+0x2c0>
 800894e:	e732      	b.n	80087b6 <BackEndTask+0x126>
 8008950:	0013      	movs	r3, r2
 8008952:	2200      	movs	r2, #0
 8008954:	701a      	strb	r2, [r3, #0]
 8008956:	e72e      	b.n	80087b6 <BackEndTask+0x126>
				Accepted_Messages++;
 8008958:	4a2b      	ldr	r2, [pc, #172]	; (8008a08 <BackEndTask+0x378>)
 800895a:	8f53      	ldrh	r3, [r2, #58]	; 0x3a
 800895c:	3301      	adds	r3, #1
 800895e:	8753      	strh	r3, [r2, #58]	; 0x3a
				messageLength[port_index] =length;
 8008960:	4b2a      	ldr	r3, [pc, #168]	; (8008a0c <BackEndTask+0x37c>)
 8008962:	551d      	strb	r5, [r3, r4]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 8008964:	00e3      	lsls	r3, r4, #3
 8008966:	4698      	mov	r8, r3
 8008968:	1b18      	subs	r0, r3, r4
 800896a:	00c0      	lsls	r0, r0, #3
 800896c:	4b28      	ldr	r3, [pc, #160]	; (8008a10 <BackEndTask+0x380>)
 800896e:	4699      	mov	r9, r3
 8008970:	4448      	add	r0, r9
 8008972:	00f9      	lsls	r1, r7, #3
 8008974:	1bc9      	subs	r1, r1, r7
 8008976:	00c9      	lsls	r1, r1, #3
 8008978:	00a3      	lsls	r3, r4, #2
 800897a:	191b      	adds	r3, r3, r4
 800897c:	00df      	lsls	r7, r3, #3
 800897e:	1aff      	subs	r7, r7, r3
 8008980:	00ff      	lsls	r7, r7, #3
 8008982:	19c9      	adds	r1, r1, r7
 8008984:	3103      	adds	r1, #3
 8008986:	4b15      	ldr	r3, [pc, #84]	; (80089dc <BackEndTask+0x34c>)
 8008988:	18c9      	adds	r1, r1, r3
 800898a:	002a      	movs	r2, r5
 800898c:	f00a fda0 	bl	80134d0 <memcpy>
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 8008990:	4643      	mov	r3, r8
 8008992:	1b1b      	subs	r3, r3, r4
 8008994:	00db      	lsls	r3, r3, #3
 8008996:	464a      	mov	r2, r9
 8008998:	5c9b      	ldrb	r3, [r3, r2]
 800899a:	4a1e      	ldr	r2, [pc, #120]	; (8008a14 <BackEndTask+0x384>)
 800899c:	7812      	ldrb	r2, [r2, #0]
 800899e:	4293      	cmp	r3, r2
 80089a0:	d003      	beq.n	80089aa <BackEndTask+0x31a>
 80089a2:	2bff      	cmp	r3, #255	; 0xff
 80089a4:	d001      	beq.n	80089aa <BackEndTask+0x31a>
 80089a6:	2bfe      	cmp	r3, #254	; 0xfe
 80089a8:	d103      	bne.n	80089b2 <BackEndTask+0x322>
					NotifyMessagingTask(port_number);
 80089aa:	4650      	mov	r0, sl
 80089ac:	f7ff fae4 	bl	8007f78 <NotifyMessagingTask>
 80089b0:	e7bf      	b.n	8008932 <BackEndTask+0x2a2>
					ForwardReceivedMessage(port_number);
 80089b2:	4650      	mov	r0, sl
 80089b4:	f7ff fd08 	bl	80083c8 <ForwardReceivedMessage>
 80089b8:	e7bb      	b.n	8008932 <BackEndTask+0x2a2>
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 80089ba:	0013      	movs	r3, r2
 80089bc:	2200      	movs	r2, #0
 80089be:	551a      	strb	r2, [r3, r4]
 80089c0:	e7be      	b.n	8008940 <BackEndTask+0x2b0>
 80089c2:	46c0      	nop			; (mov r8, r8)
 80089c4:	200011ec 	.word	0x200011ec
 80089c8:	2000120c 	.word	0x2000120c
 80089cc:	20001204 	.word	0x20001204
 80089d0:	20001a40 	.word	0x20001a40
 80089d4:	20000c5c 	.word	0x20000c5c
 80089d8:	20001794 	.word	0x20001794
 80089dc:	2000121c 	.word	0x2000121c
 80089e0:	20000c58 	.word	0x20000c58
 80089e4:	200011e9 	.word	0x200011e9
 80089e8:	20001e14 	.word	0x20001e14
 80089ec:	200017a2 	.word	0x200017a2
 80089f0:	200017a1 	.word	0x200017a1
 80089f4:	200011e8 	.word	0x200011e8
 80089f8:	20001212 	.word	0x20001212
 80089fc:	20001213 	.word	0x20001213
 8008a00:	20001214 	.word	0x20001214
 8008a04:	2000179c 	.word	0x2000179c
 8008a08:	20001f80 	.word	0x20001f80
 8008a0c:	20000cf8 	.word	0x20000cf8
 8008a10:	20000d38 	.word	0x20000d38
 8008a14:	20000aa0 	.word	0x20000aa0

08008a18 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8008a18:	2001      	movs	r0, #1
 8008a1a:	4770      	bx	lr

08008a1c <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8008a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a1e:	46de      	mov	lr, fp
 8008a20:	4657      	mov	r7, sl
 8008a22:	464e      	mov	r6, r9
 8008a24:	4645      	mov	r5, r8
 8008a26:	b5e0      	push	{r5, r6, r7, lr}
 8008a28:	b08d      	sub	sp, #52	; 0x34
 8008a2a:	4683      	mov	fp, r0
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	469a      	mov	sl, r3
 8008a30:	9306      	str	r3, [sp, #24]
	port =(int8_t )(unsigned )argument;
 8008a32:	b2c3      	uxtb	r3, r0
 8008a34:	9305      	str	r3, [sp, #20]
	HAL_StatusTypeDef status =HAL_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	9307      	str	r3, [sp, #28]
	BOS_Status result =BOS_OK;
 8008a3a:	4699      	mov	r9, r3
 8008a3c:	e064      	b.n	8008b08 <PxMessagingTask+0xec>
				longMessage =1;
 8008a3e:	4aba      	ldr	r2, [pc, #744]	; (8008d28 <PxMessagingTask+0x30c>)
 8008a40:	2101      	movs	r1, #1
 8008a42:	7011      	strb	r1, [r2, #0]
 8008a44:	e07a      	b.n	8008b3c <PxMessagingTask+0x120>
				code =cMessage[port - 1][3 + shift];
 8008a46:	4643      	mov	r3, r8
 8008a48:	1cd9      	adds	r1, r3, #3
 8008a4a:	00e3      	lsls	r3, r4, #3
 8008a4c:	1b1b      	subs	r3, r3, r4
 8008a4e:	00db      	lsls	r3, r3, #3
 8008a50:	48b6      	ldr	r0, [pc, #728]	; (8008d2c <PxMessagingTask+0x310>)
 8008a52:	18c3      	adds	r3, r0, r3
 8008a54:	5c5e      	ldrb	r6, [r3, r1]
 8008a56:	e0a4      	b.n	8008ba2 <PxMessagingTask+0x186>
				BOSMessaging.Acknowledgment =false;
 8008a58:	4bb5      	ldr	r3, [pc, #724]	; (8008d30 <PxMessagingTask+0x314>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008a5e:	212c      	movs	r1, #44	; 0x2c
 8008a60:	4650      	mov	r0, sl
 8008a62:	f7ff fd19 	bl	8008498 <SendMessageToModule>
 8008a66:	e09f      	b.n	8008ba8 <PxMessagingTask+0x18c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008a68:	2bfc      	cmp	r3, #252	; 0xfc
 8008a6a:	d805      	bhi.n	8008a78 <PxMessagingTask+0x5c>
 8008a6c:	4bb1      	ldr	r3, [pc, #708]	; (8008d34 <PxMessagingTask+0x318>)
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	42bb      	cmp	r3, r7
 8008a72:	d001      	beq.n	8008a78 <PxMessagingTask+0x5c>
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d022      	beq.n	8008abe <PxMessagingTask+0xa2>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008a78:	2fff      	cmp	r7, #255	; 0xff
 8008a7a:	d100      	bne.n	8008a7e <PxMessagingTask+0x62>
 8008a7c:	e0c7      	b.n	8008c0e <PxMessagingTask+0x1f2>
				else if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 8008a7e:	2fff      	cmp	r7, #255	; 0xff
 8008a80:	d100      	bne.n	8008a84 <PxMessagingTask+0x68>
 8008a82:	e0e8      	b.n	8008c56 <PxMessagingTask+0x23a>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008a84:	2ffe      	cmp	r7, #254	; 0xfe
 8008a86:	d100      	bne.n	8008a8a <PxMessagingTask+0x6e>
 8008a88:	e0f7      	b.n	8008c7a <PxMessagingTask+0x25e>
				else if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 8008a8a:	2ffe      	cmp	r7, #254	; 0xfe
 8008a8c:	d100      	bne.n	8008a90 <PxMessagingTask+0x74>
 8008a8e:	e133      	b.n	8008cf8 <PxMessagingTask+0x2dc>
				shift +=4;
 8008a90:	4643      	mov	r3, r8
 8008a92:	3304      	adds	r3, #4
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	4698      	mov	r8, r3
				numOfParams =messageLength[port - 1] - shift;
 8008a98:	4ba7      	ldr	r3, [pc, #668]	; (8008d38 <PxMessagingTask+0x31c>)
 8008a9a:	5d1b      	ldrb	r3, [r3, r4]
 8008a9c:	4642      	mov	r2, r8
 8008a9e:	1a9a      	subs	r2, r3, r2
 8008aa0:	b2d2      	uxtb	r2, r2
 8008aa2:	9204      	str	r2, [sp, #16]
				if(result == BOS_OK){
 8008aa4:	464a      	mov	r2, r9
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	d112      	bne.n	8008ad0 <PxMessagingTask+0xb4>
					switch(code){
 8008aaa:	2e2d      	cmp	r6, #45	; 0x2d
 8008aac:	d900      	bls.n	8008ab0 <PxMessagingTask+0x94>
 8008aae:	e14f      	b.n	8008d50 <PxMessagingTask+0x334>
 8008ab0:	d901      	bls.n	8008ab6 <PxMessagingTask+0x9a>
 8008ab2:	f001 fd75 	bl	800a5a0 <PxMessagingTask+0x1b84>
 8008ab6:	00b2      	lsls	r2, r6, #2
 8008ab8:	49a0      	ldr	r1, [pc, #640]	; (8008d3c <PxMessagingTask+0x320>)
 8008aba:	588a      	ldr	r2, [r1, r2]
 8008abc:	4697      	mov	pc, r2
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008abe:	2e10      	cmp	r6, #16
 8008ac0:	d17f      	bne.n	8008bc2 <PxMessagingTask+0x1a6>
 8008ac2:	e7d9      	b.n	8008a78 <PxMessagingTask+0x5c>
				if(code == CODE_UPDATE){ // Remote bootloader update
 8008ac4:	2e19      	cmp	r6, #25
 8008ac6:	d100      	bne.n	8008aca <PxMessagingTask+0xae>
 8008ac8:	e087      	b.n	8008bda <PxMessagingTask+0x1be>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8008aca:	2e1a      	cmp	r6, #26
 8008acc:	d100      	bne.n	8008ad0 <PxMessagingTask+0xb4>
 8008ace:	e08e      	b.n	8008bee <PxMessagingTask+0x1d2>
		if(result == BOS_ERR_UnknownMessage){
 8008ad0:	464b      	mov	r3, r9
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d101      	bne.n	8008ada <PxMessagingTask+0xbe>
 8008ad6:	f001 fd7b 	bl	800a5d0 <PxMessagingTask+0x1bb4>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008ada:	00e0      	lsls	r0, r4, #3
 8008adc:	1b00      	subs	r0, r0, r4
 8008ade:	00c0      	lsls	r0, r0, #3
 8008ae0:	4b92      	ldr	r3, [pc, #584]	; (8008d2c <PxMessagingTask+0x310>)
 8008ae2:	18c0      	adds	r0, r0, r3
 8008ae4:	4e94      	ldr	r6, [pc, #592]	; (8008d38 <PxMessagingTask+0x31c>)
 8008ae6:	5d32      	ldrb	r2, [r6, r4]
 8008ae8:	2100      	movs	r1, #0
 8008aea:	f00a fcfa 	bl	80134e2 <memset>
		messageLength[port - 1] =0;
 8008aee:	2300      	movs	r3, #0
 8008af0:	5533      	strb	r3, [r6, r4]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 8008af2:	4b93      	ldr	r3, [pc, #588]	; (8008d40 <PxMessagingTask+0x324>)
 8008af4:	5d5b      	ldrb	r3, [r3, r5]
 8008af6:	3b02      	subs	r3, #2
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d902      	bls.n	8008b04 <PxMessagingTask+0xe8>
			portStatus[port] =FREE;
 8008afe:	4b90      	ldr	r3, [pc, #576]	; (8008d40 <PxMessagingTask+0x324>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	555a      	strb	r2, [r3, r5]
		taskYIELD();
 8008b04:	f007 f892 	bl	800fc2c <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8008b08:	2101      	movs	r1, #1
 8008b0a:	4249      	negs	r1, r1
 8008b0c:	2001      	movs	r0, #1
 8008b0e:	f006 fdd9 	bl	800f6c4 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 8008b12:	25ff      	movs	r5, #255	; 0xff
 8008b14:	465b      	mov	r3, fp
 8008b16:	401d      	ands	r5, r3
 8008b18:	1e6c      	subs	r4, r5, #1
 8008b1a:	4b87      	ldr	r3, [pc, #540]	; (8008d38 <PxMessagingTask+0x31c>)
 8008b1c:	5d1b      	ldrb	r3, [r3, r4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d0d6      	beq.n	8008ad0 <PxMessagingTask+0xb4>
			if(cMessage[port - 1][2] >> 7){
 8008b22:	00e3      	lsls	r3, r4, #3
 8008b24:	1b1b      	subs	r3, r3, r4
 8008b26:	00db      	lsls	r3, r3, #3
 8008b28:	4a80      	ldr	r2, [pc, #512]	; (8008d2c <PxMessagingTask+0x310>)
 8008b2a:	18d2      	adds	r2, r2, r3
 8008b2c:	7893      	ldrb	r3, [r2, #2]
 8008b2e:	7892      	ldrb	r2, [r2, #2]
 8008b30:	b252      	sxtb	r2, r2
 8008b32:	2a00      	cmp	r2, #0
 8008b34:	db83      	blt.n	8008a3e <PxMessagingTask+0x22>
				longMessage =0;
 8008b36:	4a7c      	ldr	r2, [pc, #496]	; (8008d28 <PxMessagingTask+0x30c>)
 8008b38:	2100      	movs	r1, #0
 8008b3a:	7011      	strb	r1, [r2, #0]
			dst =cMessage[port - 1][0];
 8008b3c:	497b      	ldr	r1, [pc, #492]	; (8008d2c <PxMessagingTask+0x310>)
 8008b3e:	00e2      	lsls	r2, r4, #3
 8008b40:	1b10      	subs	r0, r2, r4
 8008b42:	00c0      	lsls	r0, r0, #3
 8008b44:	5c47      	ldrb	r7, [r0, r1]
			src =cMessage[port - 1][1];
 8008b46:	180a      	adds	r2, r1, r0
 8008b48:	7852      	ldrb	r2, [r2, #1]
 8008b4a:	4692      	mov	sl, r2
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	0011      	movs	r1, r2
 8008b50:	4019      	ands	r1, r3
 8008b52:	4688      	mov	r8, r1
 8008b54:	421a      	tst	r2, r3
 8008b56:	d000      	beq.n	8008b5a <PxMessagingTask+0x13e>
				++shift;
 8008b58:	4690      	mov	r8, r2
			extendCode =(cMessage[port - 1][2] >> 1) & 0x01; 					// 2nd bit Extended code
 8008b5a:	085a      	lsrs	r2, r3, #1
 8008b5c:	4694      	mov	ip, r2
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008b5e:	0899      	lsrs	r1, r3, #2
 8008b60:	2203      	movs	r2, #3
 8008b62:	400a      	ands	r2, r1
 8008b64:	4972      	ldr	r1, [pc, #456]	; (8008d30 <PxMessagingTask+0x314>)
 8008b66:	704a      	strb	r2, [r1, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 8008b68:	091a      	lsrs	r2, r3, #4
 8008b6a:	2601      	movs	r6, #1
 8008b6c:	4032      	ands	r2, r6
 8008b6e:	70ca      	strb	r2, [r1, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 8008b70:	2060      	movs	r0, #96	; 0x60
 8008b72:	4003      	ands	r3, r0
 8008b74:	700b      	strb	r3, [r1, #0]
			if(extendCode == true){
 8008b76:	4663      	mov	r3, ip
 8008b78:	421e      	tst	r6, r3
 8008b7a:	d100      	bne.n	8008b7e <PxMessagingTask+0x162>
 8008b7c:	e763      	b.n	8008a46 <PxMessagingTask+0x2a>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8008b7e:	4643      	mov	r3, r8
 8008b80:	1d19      	adds	r1, r3, #4
 8008b82:	00e3      	lsls	r3, r4, #3
 8008b84:	1b1b      	subs	r3, r3, r4
 8008b86:	00db      	lsls	r3, r3, #3
 8008b88:	4868      	ldr	r0, [pc, #416]	; (8008d2c <PxMessagingTask+0x310>)
 8008b8a:	18c3      	adds	r3, r0, r3
 8008b8c:	5c5e      	ldrb	r6, [r3, r1]
 8008b8e:	0236      	lsls	r6, r6, #8
 8008b90:	4641      	mov	r1, r8
 8008b92:	3103      	adds	r1, #3
 8008b94:	5c5b      	ldrb	r3, [r3, r1]
 8008b96:	18f6      	adds	r6, r6, r3
 8008b98:	b2b6      	uxth	r6, r6
				++shift;
 8008b9a:	4643      	mov	r3, r8
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	4698      	mov	r8, r3
			if(true == BOSMessaging.received_Acknowledgment){
 8008ba2:	2a00      	cmp	r2, #0
 8008ba4:	d000      	beq.n	8008ba8 <PxMessagingTask+0x18c>
 8008ba6:	e757      	b.n	8008a58 <PxMessagingTask+0x3c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008ba8:	1e7b      	subs	r3, r7, #1
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2bfc      	cmp	r3, #252	; 0xfc
 8008bae:	d900      	bls.n	8008bb2 <PxMessagingTask+0x196>
 8008bb0:	e75a      	b.n	8008a68 <PxMessagingTask+0x4c>
 8008bb2:	4a60      	ldr	r2, [pc, #384]	; (8008d34 <PxMessagingTask+0x318>)
 8008bb4:	7812      	ldrb	r2, [r2, #0]
 8008bb6:	42ba      	cmp	r2, r7
 8008bb8:	d100      	bne.n	8008bbc <PxMessagingTask+0x1a0>
 8008bba:	e755      	b.n	8008a68 <PxMessagingTask+0x4c>
 8008bbc:	2a01      	cmp	r2, #1
 8008bbe:	d100      	bne.n	8008bc2 <PxMessagingTask+0x1a6>
 8008bc0:	e752      	b.n	8008a68 <PxMessagingTask+0x4c>
				ForwardReceivedMessage(port);
 8008bc2:	9805      	ldr	r0, [sp, #20]
 8008bc4:	f7ff fc00 	bl	80083c8 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 8008bc8:	4b59      	ldr	r3, [pc, #356]	; (8008d30 <PxMessagingTask+0x314>)
 8008bca:	785b      	ldrb	r3, [r3, #1]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d100      	bne.n	8008bd2 <PxMessagingTask+0x1b6>
 8008bd0:	e778      	b.n	8008ac4 <PxMessagingTask+0xa8>
					indMode =IND_SHORT_BLINK;
 8008bd2:	4b5c      	ldr	r3, [pc, #368]	; (8008d44 <PxMessagingTask+0x328>)
 8008bd4:	2203      	movs	r2, #3
 8008bd6:	701a      	strb	r2, [r3, #0]
 8008bd8:	e774      	b.n	8008ac4 <PxMessagingTask+0xa8>
					Delay_ms(100);
 8008bda:	2064      	movs	r0, #100	; 0x64
 8008bdc:	f007 f988 	bl	800fef0 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8008be0:	2300      	movs	r3, #0
 8008be2:	9a05      	ldr	r2, [sp, #20]
 8008be4:	0039      	movs	r1, r7
 8008be6:	4650      	mov	r0, sl
 8008be8:	f001 fe88 	bl	800a8fc <remoteBootloaderUpdate>
 8008bec:	e770      	b.n	8008ad0 <PxMessagingTask+0xb4>
					Delay_ms(100);
 8008bee:	2064      	movs	r0, #100	; 0x64
 8008bf0:	f007 f97e 	bl	800fef0 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008bf4:	00e3      	lsls	r3, r4, #3
 8008bf6:	1b1b      	subs	r3, r3, r4
 8008bf8:	00db      	lsls	r3, r3, #3
 8008bfa:	4a4c      	ldr	r2, [pc, #304]	; (8008d2c <PxMessagingTask+0x310>)
 8008bfc:	18d3      	adds	r3, r2, r3
 8008bfe:	4642      	mov	r2, r8
 8008c00:	5c9b      	ldrb	r3, [r3, r2]
 8008c02:	9a05      	ldr	r2, [sp, #20]
 8008c04:	0039      	movs	r1, r7
 8008c06:	4650      	mov	r0, sl
 8008c08:	f001 fe78 	bl	800a8fc <remoteBootloaderUpdate>
 8008c0c:	e760      	b.n	8008ad0 <PxMessagingTask+0xb4>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008c0e:	4b4a      	ldr	r3, [pc, #296]	; (8008d38 <PxMessagingTask+0x31c>)
 8008c10:	5d1a      	ldrb	r2, [r3, r4]
 8008c12:	3a01      	subs	r2, #1
 8008c14:	00e3      	lsls	r3, r4, #3
 8008c16:	1b1b      	subs	r3, r3, r4
 8008c18:	00db      	lsls	r3, r3, #3
 8008c1a:	4944      	ldr	r1, [pc, #272]	; (8008d2c <PxMessagingTask+0x310>)
 8008c1c:	18cb      	adds	r3, r1, r3
 8008c1e:	5c9b      	ldrb	r3, [r3, r2]
 8008c20:	4949      	ldr	r1, [pc, #292]	; (8008d48 <PxMessagingTask+0x32c>)
 8008c22:	223e      	movs	r2, #62	; 0x3e
 8008c24:	5c8a      	ldrb	r2, [r1, r2]
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d100      	bne.n	8008c2c <PxMessagingTask+0x210>
 8008c2a:	e728      	b.n	8008a7e <PxMessagingTask+0x62>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008c2c:	223e      	movs	r2, #62	; 0x3e
 8008c2e:	548b      	strb	r3, [r1, r2]
 8008c30:	4a46      	ldr	r2, [pc, #280]	; (8008d4c <PxMessagingTask+0x330>)
 8008c32:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008c34:	9905      	ldr	r1, [sp, #20]
 8008c36:	20ff      	movs	r0, #255	; 0xff
 8008c38:	f7ff fbe6 	bl	8008408 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008c3c:	4b3e      	ldr	r3, [pc, #248]	; (8008d38 <PxMessagingTask+0x31c>)
 8008c3e:	5d1a      	ldrb	r2, [r3, r4]
 8008c40:	3a01      	subs	r2, #1
 8008c42:	00e3      	lsls	r3, r4, #3
 8008c44:	1b1b      	subs	r3, r3, r4
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	4938      	ldr	r1, [pc, #224]	; (8008d2c <PxMessagingTask+0x310>)
 8008c4a:	18cb      	adds	r3, r1, r3
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	5499      	strb	r1, [r3, r2]
					result =BOS_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	4699      	mov	r9, r3
 8008c54:	e716      	b.n	8008a84 <PxMessagingTask+0x68>
				else if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 8008c56:	4b38      	ldr	r3, [pc, #224]	; (8008d38 <PxMessagingTask+0x31c>)
 8008c58:	5d1a      	ldrb	r2, [r3, r4]
 8008c5a:	3a01      	subs	r2, #1
 8008c5c:	00e3      	lsls	r3, r4, #3
 8008c5e:	1b1b      	subs	r3, r3, r4
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	4932      	ldr	r1, [pc, #200]	; (8008d2c <PxMessagingTask+0x310>)
 8008c64:	18cb      	adds	r3, r1, r3
 8008c66:	5c9a      	ldrb	r2, [r3, r2]
 8008c68:	4937      	ldr	r1, [pc, #220]	; (8008d48 <PxMessagingTask+0x32c>)
 8008c6a:	233e      	movs	r3, #62	; 0x3e
 8008c6c:	5ccb      	ldrb	r3, [r1, r3]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d000      	beq.n	8008c74 <PxMessagingTask+0x258>
 8008c72:	e707      	b.n	8008a84 <PxMessagingTask+0x68>
					result =BOS_ERR_MSG_Reflection;
 8008c74:	2303      	movs	r3, #3
 8008c76:	4699      	mov	r9, r3
 8008c78:	e704      	b.n	8008a84 <PxMessagingTask+0x68>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008c7a:	4b2f      	ldr	r3, [pc, #188]	; (8008d38 <PxMessagingTask+0x31c>)
 8008c7c:	5d1a      	ldrb	r2, [r3, r4]
 8008c7e:	3a01      	subs	r2, #1
 8008c80:	00e3      	lsls	r3, r4, #3
 8008c82:	1b1b      	subs	r3, r3, r4
 8008c84:	00db      	lsls	r3, r3, #3
 8008c86:	4929      	ldr	r1, [pc, #164]	; (8008d2c <PxMessagingTask+0x310>)
 8008c88:	18cb      	adds	r3, r1, r3
 8008c8a:	5c9b      	ldrb	r3, [r3, r2]
 8008c8c:	492e      	ldr	r1, [pc, #184]	; (8008d48 <PxMessagingTask+0x32c>)
 8008c8e:	223e      	movs	r2, #62	; 0x3e
 8008c90:	5c8a      	ldrb	r2, [r1, r2]
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d100      	bne.n	8008c98 <PxMessagingTask+0x27c>
 8008c96:	e6f8      	b.n	8008a8a <PxMessagingTask+0x6e>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008c98:	223e      	movs	r2, #62	; 0x3e
 8008c9a:	548b      	strb	r3, [r1, r2]
 8008c9c:	4a2b      	ldr	r2, [pc, #172]	; (8008d4c <PxMessagingTask+0x330>)
 8008c9e:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008ca0:	9905      	ldr	r1, [sp, #20]
 8008ca2:	20fe      	movs	r0, #254	; 0xfe
 8008ca4:	f7ff fbb0 	bl	8008408 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008ca8:	4b23      	ldr	r3, [pc, #140]	; (8008d38 <PxMessagingTask+0x31c>)
 8008caa:	5d18      	ldrb	r0, [r3, r4]
 8008cac:	1e42      	subs	r2, r0, #1
 8008cae:	00e3      	lsls	r3, r4, #3
 8008cb0:	1b1b      	subs	r3, r3, r4
 8008cb2:	00db      	lsls	r3, r3, #3
 8008cb4:	491d      	ldr	r1, [pc, #116]	; (8008d2c <PxMessagingTask+0x310>)
 8008cb6:	18cb      	adds	r3, r1, r3
 8008cb8:	2100      	movs	r1, #0
 8008cba:	5499      	strb	r1, [r3, r2]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8008cbc:	3802      	subs	r0, #2
 8008cbe:	5c1b      	ldrb	r3, [r3, r0]
 8008cc0:	9306      	str	r3, [sp, #24]
					for(i =0; i < temp; i++){
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	46b1      	mov	r9, r6
 8008cc6:	46ac      	mov	ip, r5
 8008cc8:	0005      	movs	r5, r0
 8008cca:	0018      	movs	r0, r3
 8008ccc:	4282      	cmp	r2, r0
 8008cce:	d20e      	bcs.n	8008cee <PxMessagingTask+0x2d2>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8008cd0:	1a29      	subs	r1, r5, r0
 8008cd2:	1851      	adds	r1, r2, r1
 8008cd4:	00e3      	lsls	r3, r4, #3
 8008cd6:	1b1b      	subs	r3, r3, r4
 8008cd8:	00db      	lsls	r3, r3, #3
 8008cda:	4e14      	ldr	r6, [pc, #80]	; (8008d2c <PxMessagingTask+0x310>)
 8008cdc:	18f3      	adds	r3, r6, r3
 8008cde:	5c59      	ldrb	r1, [r3, r1]
 8008ce0:	4b14      	ldr	r3, [pc, #80]	; (8008d34 <PxMessagingTask+0x318>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	4299      	cmp	r1, r3
 8008ce6:	d019      	beq.n	8008d1c <PxMessagingTask+0x300>
					for(i =0; i < temp; i++){
 8008ce8:	3201      	adds	r2, #1
 8008cea:	b2d2      	uxtb	r2, r2
 8008cec:	e7ee      	b.n	8008ccc <PxMessagingTask+0x2b0>
					result =BOS_ERR_WrongID;
 8008cee:	464e      	mov	r6, r9
 8008cf0:	4665      	mov	r5, ip
 8008cf2:	2366      	movs	r3, #102	; 0x66
 8008cf4:	4699      	mov	r9, r3
 8008cf6:	e6cb      	b.n	8008a90 <PxMessagingTask+0x74>
				else if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 8008cf8:	4b0f      	ldr	r3, [pc, #60]	; (8008d38 <PxMessagingTask+0x31c>)
 8008cfa:	5d1a      	ldrb	r2, [r3, r4]
 8008cfc:	3a01      	subs	r2, #1
 8008cfe:	00e3      	lsls	r3, r4, #3
 8008d00:	1b1b      	subs	r3, r3, r4
 8008d02:	00db      	lsls	r3, r3, #3
 8008d04:	4909      	ldr	r1, [pc, #36]	; (8008d2c <PxMessagingTask+0x310>)
 8008d06:	18cb      	adds	r3, r1, r3
 8008d08:	5c9a      	ldrb	r2, [r3, r2]
 8008d0a:	490f      	ldr	r1, [pc, #60]	; (8008d48 <PxMessagingTask+0x32c>)
 8008d0c:	233e      	movs	r3, #62	; 0x3e
 8008d0e:	5ccb      	ldrb	r3, [r1, r3]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d000      	beq.n	8008d16 <PxMessagingTask+0x2fa>
 8008d14:	e6bc      	b.n	8008a90 <PxMessagingTask+0x74>
					result =BOS_ERR_MSG_Reflection;
 8008d16:	2303      	movs	r3, #3
 8008d18:	4699      	mov	r9, r3
 8008d1a:	e6b9      	b.n	8008a90 <PxMessagingTask+0x74>
							result =BOS_OK;
 8008d1c:	464e      	mov	r6, r9
 8008d1e:	4665      	mov	r5, ip
 8008d20:	2300      	movs	r3, #0
 8008d22:	4699      	mov	r9, r3
 8008d24:	e6b4      	b.n	8008a90 <PxMessagingTask+0x74>
 8008d26:	46c0      	nop			; (mov r8, r8)
 8008d28:	20000cf4 	.word	0x20000cf4
 8008d2c:	20000d38 	.word	0x20000d38
 8008d30:	20000b44 	.word	0x20000b44
 8008d34:	20000aa0 	.word	0x20000aa0
 8008d38:	20000cf8 	.word	0x20000cf8
 8008d3c:	08019abc 	.word	0x08019abc
 8008d40:	20000c5c 	.word	0x20000c5c
 8008d44:	200011e7 	.word	0x200011e7
 8008d48:	20001f80 	.word	0x20001f80
 8008d4c:	20000cf0 	.word	0x20000cf0
					switch(code){
 8008d50:	4be4      	ldr	r3, [pc, #912]	; (80090e4 <PxMessagingTask+0x6c8>)
 8008d52:	429e      	cmp	r6, r3
 8008d54:	d001      	beq.n	8008d5a <PxMessagingTask+0x33e>
 8008d56:	f001 fc23 	bl	800a5a0 <PxMessagingTask+0x1b84>
							defalt_data.Local_mac_addr[0]= cMessage[port - 1][0 + shift];
 8008d5a:	2338      	movs	r3, #56	; 0x38
 8008d5c:	4363      	muls	r3, r4
 8008d5e:	4ae2      	ldr	r2, [pc, #904]	; (80090e8 <PxMessagingTask+0x6cc>)
 8008d60:	18d3      	adds	r3, r2, r3
 8008d62:	4642      	mov	r2, r8
 8008d64:	5c99      	ldrb	r1, [r3, r2]
 8008d66:	4ae1      	ldr	r2, [pc, #900]	; (80090ec <PxMessagingTask+0x6d0>)
 8008d68:	7411      	strb	r1, [r2, #16]
							defalt_data.Local_mac_addr[1]= cMessage[port - 1][1 + shift];
 8008d6a:	4641      	mov	r1, r8
 8008d6c:	3101      	adds	r1, #1
 8008d6e:	5c59      	ldrb	r1, [r3, r1]
 8008d70:	7451      	strb	r1, [r2, #17]
							defalt_data.Local_mac_addr[2]= cMessage[port - 1][2 + shift];
 8008d72:	4641      	mov	r1, r8
 8008d74:	3102      	adds	r1, #2
 8008d76:	5c59      	ldrb	r1, [r3, r1]
 8008d78:	7491      	strb	r1, [r2, #18]
							defalt_data.Local_mac_addr[3]= cMessage[port - 1][3 + shift];
 8008d7a:	4641      	mov	r1, r8
 8008d7c:	3103      	adds	r1, #3
 8008d7e:	5c59      	ldrb	r1, [r3, r1]
 8008d80:	74d1      	strb	r1, [r2, #19]
							defalt_data.Local_mac_addr[4]= cMessage[port - 1][4 + shift];
 8008d82:	4641      	mov	r1, r8
 8008d84:	3104      	adds	r1, #4
 8008d86:	5c59      	ldrb	r1, [r3, r1]
 8008d88:	7511      	strb	r1, [r2, #20]
							defalt_data.Local_mac_addr[5]= cMessage[port - 1][5 + shift];
 8008d8a:	4641      	mov	r1, r8
 8008d8c:	3105      	adds	r1, #5
 8008d8e:	5c59      	ldrb	r1, [r3, r1]
 8008d90:	7551      	strb	r1, [r2, #21]
							defalt_data.Remote_mac_addr[0]= cMessage[port - 1][6 + shift];
 8008d92:	4641      	mov	r1, r8
 8008d94:	3106      	adds	r1, #6
 8008d96:	5c59      	ldrb	r1, [r3, r1]
 8008d98:	7591      	strb	r1, [r2, #22]
							defalt_data.Remote_mac_addr[1]= cMessage[port - 1][7 + shift];
 8008d9a:	4641      	mov	r1, r8
 8008d9c:	3107      	adds	r1, #7
 8008d9e:	5c59      	ldrb	r1, [r3, r1]
 8008da0:	75d1      	strb	r1, [r2, #23]
							defalt_data.Remote_mac_addr[2]= cMessage[port - 1][8 + shift];
 8008da2:	4641      	mov	r1, r8
 8008da4:	3108      	adds	r1, #8
 8008da6:	5c59      	ldrb	r1, [r3, r1]
 8008da8:	7611      	strb	r1, [r2, #24]
							defalt_data.Remote_mac_addr[3]= cMessage[port - 1][9 + shift];
 8008daa:	4641      	mov	r1, r8
 8008dac:	3109      	adds	r1, #9
 8008dae:	5c59      	ldrb	r1, [r3, r1]
 8008db0:	7651      	strb	r1, [r2, #25]
							defalt_data.Remote_mac_addr[4]= cMessage[port - 1][10 + shift];
 8008db2:	4641      	mov	r1, r8
 8008db4:	310a      	adds	r1, #10
 8008db6:	5c59      	ldrb	r1, [r3, r1]
 8008db8:	7691      	strb	r1, [r2, #26]
							defalt_data.Remote_mac_addr[5]= cMessage[port - 1][11 + shift];
 8008dba:	4641      	mov	r1, r8
 8008dbc:	310b      	adds	r1, #11
 8008dbe:	5c59      	ldrb	r1, [r3, r1]
 8008dc0:	76d1      	strb	r1, [r2, #27]
							defalt_data.Local_IP[0]= cMessage[port - 1][12 + shift];
 8008dc2:	4641      	mov	r1, r8
 8008dc4:	310c      	adds	r1, #12
 8008dc6:	5c59      	ldrb	r1, [r3, r1]
 8008dc8:	7711      	strb	r1, [r2, #28]
							defalt_data.Local_IP[1]= cMessage[port - 1][13 + shift];
 8008dca:	4641      	mov	r1, r8
 8008dcc:	310d      	adds	r1, #13
 8008dce:	5c59      	ldrb	r1, [r3, r1]
 8008dd0:	7751      	strb	r1, [r2, #29]
							defalt_data.Local_IP[2]= cMessage[port - 1][14 + shift];
 8008dd2:	4641      	mov	r1, r8
 8008dd4:	310e      	adds	r1, #14
 8008dd6:	5c59      	ldrb	r1, [r3, r1]
 8008dd8:	7791      	strb	r1, [r2, #30]
							defalt_data.Local_IP[3]= cMessage[port - 1][15 + shift];
 8008dda:	4641      	mov	r1, r8
 8008ddc:	310f      	adds	r1, #15
 8008dde:	5c59      	ldrb	r1, [r3, r1]
 8008de0:	77d1      	strb	r1, [r2, #31]
							defalt_data.Remote_IP[0]= cMessage[port - 1][16 + shift];
 8008de2:	4641      	mov	r1, r8
 8008de4:	3110      	adds	r1, #16
 8008de6:	5c58      	ldrb	r0, [r3, r1]
 8008de8:	2120      	movs	r1, #32
 8008dea:	5450      	strb	r0, [r2, r1]
							defalt_data.Remote_IP[1]= cMessage[port - 1][17 + shift];
 8008dec:	4641      	mov	r1, r8
 8008dee:	3111      	adds	r1, #17
 8008df0:	5c58      	ldrb	r0, [r3, r1]
 8008df2:	2121      	movs	r1, #33	; 0x21
 8008df4:	5450      	strb	r0, [r2, r1]
							defalt_data.Remote_IP[2]= cMessage[port - 1][18 + shift];
 8008df6:	4641      	mov	r1, r8
 8008df8:	3112      	adds	r1, #18
 8008dfa:	5c58      	ldrb	r0, [r3, r1]
 8008dfc:	2122      	movs	r1, #34	; 0x22
 8008dfe:	5450      	strb	r0, [r2, r1]
							defalt_data.Remote_IP[3]= cMessage[port - 1][19 + shift];
 8008e00:	4641      	mov	r1, r8
 8008e02:	3113      	adds	r1, #19
 8008e04:	5c58      	ldrb	r0, [r3, r1]
 8008e06:	2123      	movs	r1, #35	; 0x23
 8008e08:	5450      	strb	r0, [r2, r1]
							defalt_data.ip_mask[0]= cMessage[port - 1][20 + shift];
 8008e0a:	4641      	mov	r1, r8
 8008e0c:	3114      	adds	r1, #20
 8008e0e:	5c58      	ldrb	r0, [r3, r1]
 8008e10:	2124      	movs	r1, #36	; 0x24
 8008e12:	5450      	strb	r0, [r2, r1]
							defalt_data.ip_mask[1]= cMessage[port - 1][21 + shift];
 8008e14:	4641      	mov	r1, r8
 8008e16:	3115      	adds	r1, #21
 8008e18:	5c58      	ldrb	r0, [r3, r1]
 8008e1a:	2125      	movs	r1, #37	; 0x25
 8008e1c:	5450      	strb	r0, [r2, r1]
							defalt_data.ip_mask[2]= cMessage[port - 1][22 + shift];
 8008e1e:	4641      	mov	r1, r8
 8008e20:	3116      	adds	r1, #22
 8008e22:	5c58      	ldrb	r0, [r3, r1]
 8008e24:	2126      	movs	r1, #38	; 0x26
 8008e26:	5450      	strb	r0, [r2, r1]
							defalt_data.ip_mask[3]= cMessage[port - 1][23 + shift];
 8008e28:	4641      	mov	r1, r8
 8008e2a:	3117      	adds	r1, #23
 8008e2c:	5c58      	ldrb	r0, [r3, r1]
 8008e2e:	2127      	movs	r1, #39	; 0x27
 8008e30:	5450      	strb	r0, [r2, r1]
							defalt_data.ip_dest[0]= cMessage[port - 1][24 + shift];
 8008e32:	4641      	mov	r1, r8
 8008e34:	3118      	adds	r1, #24
 8008e36:	5c58      	ldrb	r0, [r3, r1]
 8008e38:	2128      	movs	r1, #40	; 0x28
 8008e3a:	5450      	strb	r0, [r2, r1]
							defalt_data.ip_dest[1]= cMessage[port - 1][25 + shift];
 8008e3c:	4641      	mov	r1, r8
 8008e3e:	3119      	adds	r1, #25
 8008e40:	5c58      	ldrb	r0, [r3, r1]
 8008e42:	2129      	movs	r1, #41	; 0x29
 8008e44:	5450      	strb	r0, [r2, r1]
							defalt_data.ip_dest[2]= cMessage[port - 1][26 + shift];
 8008e46:	4641      	mov	r1, r8
 8008e48:	311a      	adds	r1, #26
 8008e4a:	5c58      	ldrb	r0, [r3, r1]
 8008e4c:	212a      	movs	r1, #42	; 0x2a
 8008e4e:	5450      	strb	r0, [r2, r1]
							defalt_data.ip_dest[3]= cMessage[port - 1][27 + shift];
 8008e50:	4641      	mov	r1, r8
 8008e52:	311b      	adds	r1, #27
 8008e54:	5c58      	ldrb	r0, [r3, r1]
 8008e56:	212b      	movs	r1, #43	; 0x2b
 8008e58:	5450      	strb	r0, [r2, r1]
							defalt_data.Local_PORT= cMessage[port - 1][28 + shift];
 8008e5a:	4641      	mov	r1, r8
 8008e5c:	311c      	adds	r1, #28
 8008e5e:	5c58      	ldrb	r0, [r3, r1]
 8008e60:	212c      	movs	r1, #44	; 0x2c
 8008e62:	5450      	strb	r0, [r2, r1]
							defalt_data.Remote_PORT= cMessage[port - 1][29 + shift];
 8008e64:	4641      	mov	r1, r8
 8008e66:	311d      	adds	r1, #29
 8008e68:	5c59      	ldrb	r1, [r3, r1]
 8008e6a:	232d      	movs	r3, #45	; 0x2d
 8008e6c:	54d1      	strb	r1, [r2, r3]
							break;
 8008e6e:	e62f      	b.n	8008ad0 <PxMessagingTask+0xb4>
							indMode =IND_PING;
 8008e70:	4b9f      	ldr	r3, [pc, #636]	; (80090f0 <PxMessagingTask+0x6d4>)
 8008e72:	2201      	movs	r2, #1
 8008e74:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008e76:	200a      	movs	r0, #10
 8008e78:	f005 f93a 	bl	800e0f0 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 8008e7c:	4b9d      	ldr	r3, [pc, #628]	; (80090f4 <PxMessagingTask+0x6d8>)
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	2b60      	cmp	r3, #96	; 0x60
 8008e82:	d002      	beq.n	8008e8a <PxMessagingTask+0x46e>
 8008e84:	2b20      	cmp	r3, #32
 8008e86:	d000      	beq.n	8008e8a <PxMessagingTask+0x46e>
 8008e88:	e622      	b.n	8008ad0 <PxMessagingTask+0xb4>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2102      	movs	r1, #2
 8008e8e:	4650      	mov	r0, sl
 8008e90:	f7ff fb02 	bl	8008498 <SendMessageToModule>
 8008e94:	e61c      	b.n	8008ad0 <PxMessagingTask+0xb4>
							if(!moduleAlias[myID][0])
 8008e96:	4b98      	ldr	r3, [pc, #608]	; (80090f8 <PxMessagingTask+0x6dc>)
 8008e98:	781a      	ldrb	r2, [r3, #0]
 8008e9a:	230a      	movs	r3, #10
 8008e9c:	4353      	muls	r3, r2
 8008e9e:	4a97      	ldr	r2, [pc, #604]	; (80090fc <PxMessagingTask+0x6e0>)
 8008ea0:	5c9b      	ldrb	r3, [r3, r2]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d118      	bne.n	8008ed8 <PxMessagingTask+0x4bc>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 8008ea6:	4896      	ldr	r0, [pc, #600]	; (8009100 <PxMessagingTask+0x6e4>)
 8008ea8:	4652      	mov	r2, sl
 8008eaa:	4996      	ldr	r1, [pc, #600]	; (8009104 <PxMessagingTask+0x6e8>)
 8008eac:	3040      	adds	r0, #64	; 0x40
 8008eae:	f00a fd09 	bl	80138c4 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8008eb2:	4e93      	ldr	r6, [pc, #588]	; (8009100 <PxMessagingTask+0x6e4>)
 8008eb4:	3640      	adds	r6, #64	; 0x40
 8008eb6:	0030      	movs	r0, r6
 8008eb8:	f7f7 f92e 	bl	8000118 <strlen>
 8008ebc:	b282      	uxth	r2, r0
 8008ebe:	4b92      	ldr	r3, [pc, #584]	; (8009108 <PxMessagingTask+0x6ec>)
 8008ec0:	7818      	ldrb	r0, [r3, #0]
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	425b      	negs	r3, r3
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	3333      	adds	r3, #51	; 0x33
 8008eca:	0031      	movs	r1, r6
 8008ecc:	f004 ff86 	bl	800dddc <writePxMutex>
							responseStatus =BOS_OK;
 8008ed0:	4b8e      	ldr	r3, [pc, #568]	; (800910c <PxMessagingTask+0x6f0>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	701a      	strb	r2, [r3, #0]
							break;
 8008ed6:	e5fb      	b.n	8008ad0 <PxMessagingTask+0xb4>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 8008ed8:	230a      	movs	r3, #10
 8008eda:	4652      	mov	r2, sl
 8008edc:	4353      	muls	r3, r2
 8008ede:	4a87      	ldr	r2, [pc, #540]	; (80090fc <PxMessagingTask+0x6e0>)
 8008ee0:	189b      	adds	r3, r3, r2
 8008ee2:	4887      	ldr	r0, [pc, #540]	; (8009100 <PxMessagingTask+0x6e4>)
 8008ee4:	4652      	mov	r2, sl
 8008ee6:	498a      	ldr	r1, [pc, #552]	; (8009110 <PxMessagingTask+0x6f4>)
 8008ee8:	3040      	adds	r0, #64	; 0x40
 8008eea:	f00a fceb 	bl	80138c4 <sprintf>
 8008eee:	e7e0      	b.n	8008eb2 <PxMessagingTask+0x496>
							IND_ON();
 8008ef0:	2090      	movs	r0, #144	; 0x90
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	2140      	movs	r1, #64	; 0x40
 8008ef6:	05c0      	lsls	r0, r0, #23
 8008ef8:	f008 fbbb 	bl	8011672 <HAL_GPIO_WritePin>
							break;
 8008efc:	e5e8      	b.n	8008ad0 <PxMessagingTask+0xb4>
							IND_OFF();
 8008efe:	2090      	movs	r0, #144	; 0x90
 8008f00:	2200      	movs	r2, #0
 8008f02:	2140      	movs	r1, #64	; 0x40
 8008f04:	05c0      	lsls	r0, r0, #23
 8008f06:	f008 fbb4 	bl	8011672 <HAL_GPIO_WritePin>
							break;
 8008f0a:	e5e1      	b.n	8008ad0 <PxMessagingTask+0xb4>
							IND_toggle();
 8008f0c:	2090      	movs	r0, #144	; 0x90
 8008f0e:	2140      	movs	r1, #64	; 0x40
 8008f10:	05c0      	lsls	r0, r0, #23
 8008f12:	f008 fbb4 	bl	801167e <HAL_GPIO_TogglePin>
							break;
 8008f16:	e5db      	b.n	8008ad0 <PxMessagingTask+0xb4>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008f18:	4653      	mov	r3, sl
 8008f1a:	021b      	lsls	r3, r3, #8
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	1c90      	adds	r0, r2, #2
 8008f20:	2238      	movs	r2, #56	; 0x38
 8008f22:	4362      	muls	r2, r4
 8008f24:	4970      	ldr	r1, [pc, #448]	; (80090e8 <PxMessagingTask+0x6cc>)
 8008f26:	1889      	adds	r1, r1, r2
 8008f28:	5c0a      	ldrb	r2, [r1, r0]
 8008f2a:	189b      	adds	r3, r3, r2
 8008f2c:	4879      	ldr	r0, [pc, #484]	; (8009114 <PxMessagingTask+0x6f8>)
 8008f2e:	00a6      	lsls	r6, r4, #2
 8008f30:	5383      	strh	r3, [r0, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008f32:	4643      	mov	r3, r8
 8008f34:	5cca      	ldrb	r2, [r1, r3]
 8008f36:	0212      	lsls	r2, r2, #8
 8008f38:	3301      	adds	r3, #1
 8008f3a:	5ccb      	ldrb	r3, [r1, r3]
 8008f3c:	18d2      	adds	r2, r2, r3
 8008f3e:	1980      	adds	r0, r0, r6
 8008f40:	8042      	strh	r2, [r0, #2]
							messageParams[1] =(uint8_t )myPN;
 8008f42:	4b75      	ldr	r3, [pc, #468]	; (8009118 <PxMessagingTask+0x6fc>)
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	4a75      	ldr	r2, [pc, #468]	; (800911c <PxMessagingTask+0x700>)
 8008f48:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 8008f4a:	0a1b      	lsrs	r3, r3, #8
 8008f4c:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8008f4e:	9e05      	ldr	r6, [sp, #20]
 8008f50:	7096      	strb	r6, [r2, #2]
							osDelay(2);
 8008f52:	2002      	movs	r0, #2
 8008f54:	f005 f8cc 	bl	800e0f0 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8008f58:	2303      	movs	r3, #3
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	3308      	adds	r3, #8
 8008f5e:	2200      	movs	r2, #0
 8008f60:	0011      	movs	r1, r2
 8008f62:	0030      	movs	r0, r6
 8008f64:	f7ff f844 	bl	8007ff0 <SendMessageFromPort>
							break;
 8008f68:	e5b2      	b.n	8008ad0 <PxMessagingTask+0xb4>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008f6a:	4653      	mov	r3, sl
 8008f6c:	021b      	lsls	r3, r3, #8
 8008f6e:	4642      	mov	r2, r8
 8008f70:	1c90      	adds	r0, r2, #2
 8008f72:	2238      	movs	r2, #56	; 0x38
 8008f74:	4362      	muls	r2, r4
 8008f76:	495c      	ldr	r1, [pc, #368]	; (80090e8 <PxMessagingTask+0x6cc>)
 8008f78:	1889      	adds	r1, r1, r2
 8008f7a:	5c0a      	ldrb	r2, [r1, r0]
 8008f7c:	189b      	adds	r3, r3, r2
 8008f7e:	4865      	ldr	r0, [pc, #404]	; (8009114 <PxMessagingTask+0x6f8>)
 8008f80:	00a6      	lsls	r6, r4, #2
 8008f82:	5383      	strh	r3, [r0, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008f84:	4643      	mov	r3, r8
 8008f86:	5cca      	ldrb	r2, [r1, r3]
 8008f88:	0212      	lsls	r2, r2, #8
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	5ccb      	ldrb	r3, [r1, r3]
 8008f8e:	18d2      	adds	r2, r2, r3
 8008f90:	1980      	adds	r0, r0, r6
 8008f92:	8042      	strh	r2, [r0, #2]
							responseStatus =BOS_OK;
 8008f94:	4b5d      	ldr	r3, [pc, #372]	; (800910c <PxMessagingTask+0x6f0>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	701a      	strb	r2, [r3, #0]
							break;
 8008f9a:	e599      	b.n	8008ad0 <PxMessagingTask+0xb4>
							ExploreNeighbors(port);
 8008f9c:	9805      	ldr	r0, [sp, #20]
 8008f9e:	f7fa fd8f 	bl	8003ac0 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8008fa2:	4b53      	ldr	r3, [pc, #332]	; (80090f0 <PxMessagingTask+0x6d4>)
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008fa8:	200a      	movs	r0, #10
 8008faa:	f005 f8a1 	bl	800e0f0 <osDelay>
							temp =0;
 8008fae:	464f      	mov	r7, r9
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008fb0:	2601      	movs	r6, #1
 8008fb2:	e001      	b.n	8008fb8 <PxMessagingTask+0x59c>
 8008fb4:	3601      	adds	r6, #1
 8008fb6:	b2f6      	uxtb	r6, r6
 8008fb8:	2e05      	cmp	r6, #5
 8008fba:	d811      	bhi.n	8008fe0 <PxMessagingTask+0x5c4>
								if(neighbors[p - 1][0]){
 8008fbc:	1e73      	subs	r3, r6, #1
 8008fbe:	0099      	lsls	r1, r3, #2
 8008fc0:	4a54      	ldr	r2, [pc, #336]	; (8009114 <PxMessagingTask+0x6f8>)
 8008fc2:	5a8a      	ldrh	r2, [r1, r2]
 8008fc4:	2a00      	cmp	r2, #0
 8008fc6:	d0f5      	beq.n	8008fb4 <PxMessagingTask+0x598>
									messageParams[temp] =p;
 8008fc8:	4a54      	ldr	r2, [pc, #336]	; (800911c <PxMessagingTask+0x700>)
 8008fca:	55d6      	strb	r6, [r2, r7]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008fcc:	1c78      	adds	r0, r7, #1
 8008fce:	4b51      	ldr	r3, [pc, #324]	; (8009114 <PxMessagingTask+0x6f8>)
 8008fd0:	18c9      	adds	r1, r1, r3
 8008fd2:	1880      	adds	r0, r0, r2
 8008fd4:	2204      	movs	r2, #4
 8008fd6:	f00a fa7b 	bl	80134d0 <memcpy>
									temp +=5;
 8008fda:	3705      	adds	r7, #5
 8008fdc:	b2ff      	uxtb	r7, r7
 8008fde:	e7e9      	b.n	8008fb4 <PxMessagingTask+0x598>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 8008fe0:	9706      	str	r7, [sp, #24]
 8008fe2:	b2ba      	uxth	r2, r7
 8008fe4:	210d      	movs	r1, #13
 8008fe6:	4650      	mov	r0, sl
 8008fe8:	f7ff fa56 	bl	8008498 <SendMessageToModule>
							break;
 8008fec:	e570      	b.n	8008ad0 <PxMessagingTask+0xb4>
							temp =numOfParams / 5;
 8008fee:	2105      	movs	r1, #5
 8008ff0:	9804      	ldr	r0, [sp, #16]
 8008ff2:	f7f7 f8ad 	bl	8000150 <__udivsi3>
 8008ff6:	b2c3      	uxtb	r3, r0
 8008ff8:	9306      	str	r3, [sp, #24]
							for(uint8_t k =0; k < temp; k++){
 8008ffa:	464e      	mov	r6, r9
 8008ffc:	4647      	mov	r7, r8
 8008ffe:	46a8      	mov	r8, r5
 8009000:	e018      	b.n	8009034 <PxMessagingTask+0x618>
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8009002:	00b1      	lsls	r1, r6, #2
 8009004:	1989      	adds	r1, r1, r6
 8009006:	187d      	adds	r5, r7, r1
 8009008:	4a37      	ldr	r2, [pc, #220]	; (80090e8 <PxMessagingTask+0x6cc>)
 800900a:	00e3      	lsls	r3, r4, #3
 800900c:	1b18      	subs	r0, r3, r4
 800900e:	00c0      	lsls	r0, r0, #3
 8009010:	1810      	adds	r0, r2, r0
 8009012:	5d40      	ldrb	r0, [r0, r5]
 8009014:	3801      	subs	r0, #1
 8009016:	0080      	lsls	r0, r0, #2
 8009018:	4d41      	ldr	r5, [pc, #260]	; (8009120 <PxMessagingTask+0x704>)
 800901a:	1940      	adds	r0, r0, r5
 800901c:	1c7d      	adds	r5, r7, #1
 800901e:	46ac      	mov	ip, r5
 8009020:	448c      	add	ip, r1
 8009022:	1b19      	subs	r1, r3, r4
 8009024:	00c9      	lsls	r1, r1, #3
 8009026:	4461      	add	r1, ip
 8009028:	1889      	adds	r1, r1, r2
 800902a:	2204      	movs	r2, #4
 800902c:	f00a fa50 	bl	80134d0 <memcpy>
							for(uint8_t k =0; k < temp; k++){
 8009030:	3601      	adds	r6, #1
 8009032:	b2f6      	uxtb	r6, r6
 8009034:	9b06      	ldr	r3, [sp, #24]
 8009036:	429e      	cmp	r6, r3
 8009038:	d3e3      	bcc.n	8009002 <PxMessagingTask+0x5e6>
							responseStatus =BOS_OK;
 800903a:	4645      	mov	r5, r8
 800903c:	4b33      	ldr	r3, [pc, #204]	; (800910c <PxMessagingTask+0x6f0>)
 800903e:	2200      	movs	r2, #0
 8009040:	701a      	strb	r2, [r3, #0]
							break;
 8009042:	e545      	b.n	8008ad0 <PxMessagingTask+0xb4>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8009044:	3601      	adds	r6, #1
 8009046:	b2f6      	uxtb	r6, r6
 8009048:	2e05      	cmp	r6, #5
 800904a:	d813      	bhi.n	8009074 <PxMessagingTask+0x658>
								if(p != port)
 800904c:	42be      	cmp	r6, r7
 800904e:	d0f9      	beq.n	8009044 <PxMessagingTask+0x628>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 8009050:	0030      	movs	r0, r6
 8009052:	f004 fea5 	bl	800dda0 <GetUart>
 8009056:	4643      	mov	r3, r8
 8009058:	199a      	adds	r2, r3, r6
 800905a:	3a01      	subs	r2, #1
 800905c:	00e3      	lsls	r3, r4, #3
 800905e:	1b1b      	subs	r3, r3, r4
 8009060:	00db      	lsls	r3, r3, #3
 8009062:	4921      	ldr	r1, [pc, #132]	; (80090e8 <PxMessagingTask+0x6cc>)
 8009064:	18cb      	adds	r3, r1, r3
 8009066:	5c99      	ldrb	r1, [r3, r2]
 8009068:	f004 ff12 	bl	800de90 <SwapUartPins>
 800906c:	e7ea      	b.n	8009044 <PxMessagingTask+0x628>
					switch(code){
 800906e:	2601      	movs	r6, #1
 8009070:	9f05      	ldr	r7, [sp, #20]
 8009072:	e7e9      	b.n	8009048 <PxMessagingTask+0x62c>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 8009074:	9805      	ldr	r0, [sp, #20]
 8009076:	f004 fe93 	bl	800dda0 <GetUart>
 800907a:	4641      	mov	r1, r8
 800907c:	310a      	adds	r1, #10
 800907e:	2238      	movs	r2, #56	; 0x38
 8009080:	4362      	muls	r2, r4
 8009082:	4b19      	ldr	r3, [pc, #100]	; (80090e8 <PxMessagingTask+0x6cc>)
 8009084:	189b      	adds	r3, r3, r2
 8009086:	5c59      	ldrb	r1, [r3, r1]
 8009088:	f004 ff02 	bl	800de90 <SwapUartPins>
							break;
 800908c:	e520      	b.n	8008ad0 <PxMessagingTask+0xb4>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800908e:	2238      	movs	r2, #56	; 0x38
 8009090:	4362      	muls	r2, r4
 8009092:	4b15      	ldr	r3, [pc, #84]	; (80090e8 <PxMessagingTask+0x6cc>)
 8009094:	189b      	adds	r3, r3, r2
 8009096:	4642      	mov	r2, r8
 8009098:	5c9b      	ldrb	r3, [r3, r2]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d109      	bne.n	80090b2 <PxMessagingTask+0x696>
								myID =cMessage[port - 1][1 + shift];
 800909e:	4641      	mov	r1, r8
 80090a0:	3101      	adds	r1, #1
 80090a2:	2238      	movs	r2, #56	; 0x38
 80090a4:	4362      	muls	r2, r4
 80090a6:	4b10      	ldr	r3, [pc, #64]	; (80090e8 <PxMessagingTask+0x6cc>)
 80090a8:	189b      	adds	r3, r3, r2
 80090aa:	5c5a      	ldrb	r2, [r3, r1]
 80090ac:	4b12      	ldr	r3, [pc, #72]	; (80090f8 <PxMessagingTask+0x6dc>)
 80090ae:	701a      	strb	r2, [r3, #0]
 80090b0:	e50e      	b.n	8008ad0 <PxMessagingTask+0xb4>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d000      	beq.n	80090b8 <PxMessagingTask+0x69c>
 80090b6:	e50b      	b.n	8008ad0 <PxMessagingTask+0xb4>
								messageParams[0] =0; /* change own ID */
 80090b8:	4a18      	ldr	r2, [pc, #96]	; (800911c <PxMessagingTask+0x700>)
 80090ba:	2100      	movs	r1, #0
 80090bc:	7011      	strb	r1, [r2, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80090be:	4643      	mov	r3, r8
 80090c0:	1c58      	adds	r0, r3, #1
 80090c2:	2338      	movs	r3, #56	; 0x38
 80090c4:	4363      	muls	r3, r4
 80090c6:	4e08      	ldr	r6, [pc, #32]	; (80090e8 <PxMessagingTask+0x6cc>)
 80090c8:	18f3      	adds	r3, r6, r3
 80090ca:	5c18      	ldrb	r0, [r3, r0]
 80090cc:	7050      	strb	r0, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80090ce:	4642      	mov	r2, r8
 80090d0:	3202      	adds	r2, #2
 80090d2:	5c98      	ldrb	r0, [r3, r2]
 80090d4:	2303      	movs	r3, #3
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	330d      	adds	r3, #13
 80090da:	000a      	movs	r2, r1
 80090dc:	f7fe ff88 	bl	8007ff0 <SendMessageFromPort>
 80090e0:	e4f6      	b.n	8008ad0 <PxMessagingTask+0xb4>
 80090e2:	46c0      	nop			; (mov r8, r8)
 80090e4:	000005b3 	.word	0x000005b3
 80090e8:	20000d38 	.word	0x20000d38
 80090ec:	20002000 	.word	0x20002000
 80090f0:	200011e7 	.word	0x200011e7
 80090f4:	20000b44 	.word	0x20000b44
 80090f8:	20000aa0 	.word	0x20000aa0
 80090fc:	20000e6c 	.word	0x20000e6c
 8009100:	20001f80 	.word	0x20001f80
 8009104:	0801b5f8 	.word	0x0801b5f8
 8009108:	20000c58 	.word	0x20000c58
 800910c:	20000c6c 	.word	0x20000c6c
 8009110:	0801b60c 	.word	0x0801b60c
 8009114:	200011d0 	.word	0x200011d0
 8009118:	20000030 	.word	0x20000030
 800911c:	20000b6c 	.word	0x20000b6c
 8009120:	200011bc 	.word	0x200011bc
							if(longMessage){
 8009124:	4bbc      	ldr	r3, [pc, #752]	; (8009418 <PxMessagingTask+0x9fc>)
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d011      	beq.n	8009150 <PxMessagingTask+0x734>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800912c:	4ebb      	ldr	r6, [pc, #748]	; (800941c <PxMessagingTask+0xa00>)
 800912e:	8833      	ldrh	r3, [r6, #0]
 8009130:	48bb      	ldr	r0, [pc, #748]	; (8009420 <PxMessagingTask+0xa04>)
 8009132:	1818      	adds	r0, r3, r0
 8009134:	2138      	movs	r1, #56	; 0x38
 8009136:	4361      	muls	r1, r4
 8009138:	4441      	add	r1, r8
 800913a:	4bba      	ldr	r3, [pc, #744]	; (8009424 <PxMessagingTask+0xa08>)
 800913c:	18c9      	adds	r1, r1, r3
 800913e:	9f04      	ldr	r7, [sp, #16]
 8009140:	003a      	movs	r2, r7
 8009142:	f00a f9c5 	bl	80134d0 <memcpy>
								longMessageLastPtr +=numOfParams;
 8009146:	8832      	ldrh	r2, [r6, #0]
 8009148:	46bc      	mov	ip, r7
 800914a:	4462      	add	r2, ip
 800914c:	8032      	strh	r2, [r6, #0]
 800914e:	e4bf      	b.n	8008ad0 <PxMessagingTask+0xb4>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009150:	4eb2      	ldr	r6, [pc, #712]	; (800941c <PxMessagingTask+0xa00>)
 8009152:	8830      	ldrh	r0, [r6, #0]
 8009154:	4bb2      	ldr	r3, [pc, #712]	; (8009420 <PxMessagingTask+0xa04>)
 8009156:	469c      	mov	ip, r3
 8009158:	4460      	add	r0, ip
 800915a:	2138      	movs	r1, #56	; 0x38
 800915c:	4361      	muls	r1, r4
 800915e:	4441      	add	r1, r8
 8009160:	4bb0      	ldr	r3, [pc, #704]	; (8009424 <PxMessagingTask+0xa08>)
 8009162:	18c9      	adds	r1, r1, r3
 8009164:	9b04      	ldr	r3, [sp, #16]
 8009166:	4698      	mov	r8, r3
 8009168:	001a      	movs	r2, r3
 800916a:	f00a f9b1 	bl	80134d0 <memcpy>
								longMessageLastPtr +=numOfParams;
 800916e:	8837      	ldrh	r7, [r6, #0]
 8009170:	4447      	add	r7, r8
 8009172:	b2bf      	uxth	r7, r7
 8009174:	8037      	strh	r7, [r6, #0]
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8009176:	2116      	movs	r1, #22
 8009178:	0038      	movs	r0, r7
 800917a:	f7f6 ffe9 	bl	8000150 <__udivsi3>
 800917e:	4baa      	ldr	r3, [pc, #680]	; (8009428 <PxMessagingTask+0xa0c>)
 8009180:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8009182:	003a      	movs	r2, r7
 8009184:	49a6      	ldr	r1, [pc, #664]	; (8009420 <PxMessagingTask+0xa04>)
 8009186:	48a9      	ldr	r0, [pc, #676]	; (800942c <PxMessagingTask+0xa10>)
 8009188:	f00a f9a2 	bl	80134d0 <memcpy>
								longMessageLastPtr =0;
 800918c:	2300      	movs	r3, #0
 800918e:	8033      	strh	r3, [r6, #0]
 8009190:	e49e      	b.n	8008ad0 <PxMessagingTask+0xb4>
							ReadPortsDirMSG(src);
 8009192:	4650      	mov	r0, sl
 8009194:	f004 fee2 	bl	800df5c <ReadPortsDirMSG>
								break;
 8009198:	e49a      	b.n	8008ad0 <PxMessagingTask+0xb4>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800919a:	1e73      	subs	r3, r6, #1
 800919c:	18b8      	adds	r0, r7, r2
 800919e:	00e1      	lsls	r1, r4, #3
 80091a0:	1b09      	subs	r1, r1, r4
 80091a2:	00c9      	lsls	r1, r1, #3
 80091a4:	4d9f      	ldr	r5, [pc, #636]	; (8009424 <PxMessagingTask+0xa08>)
 80091a6:	1869      	adds	r1, r5, r1
 80091a8:	5c08      	ldrb	r0, [r1, r0]
 80091aa:	3801      	subs	r0, #1
 80091ac:	2180      	movs	r1, #128	; 0x80
 80091ae:	0209      	lsls	r1, r1, #8
 80091b0:	4101      	asrs	r1, r0
 80091b2:	4d9f      	ldr	r5, [pc, #636]	; (8009430 <PxMessagingTask+0xa14>)
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	5b58      	ldrh	r0, [r3, r5]
 80091b8:	4301      	orrs	r1, r0
 80091ba:	5359      	strh	r1, [r3, r5]
							for(p =0; p < numOfParams; p++){
 80091bc:	3201      	adds	r2, #1
 80091be:	b2d2      	uxtb	r2, r2
 80091c0:	4542      	cmp	r2, r8
 80091c2:	d3ea      	bcc.n	800919a <PxMessagingTask+0x77e>
							responseStatus =BOS_OK;
 80091c4:	46b2      	mov	sl, r6
 80091c6:	4665      	mov	r5, ip
 80091c8:	4b9a      	ldr	r3, [pc, #616]	; (8009434 <PxMessagingTask+0xa18>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	701a      	strb	r2, [r3, #0]
							break;
 80091ce:	e47f      	b.n	8008ad0 <PxMessagingTask+0xb4>
					switch(code){
 80091d0:	464a      	mov	r2, r9
 80091d2:	4656      	mov	r6, sl
 80091d4:	46ac      	mov	ip, r5
 80091d6:	4647      	mov	r7, r8
 80091d8:	9b04      	ldr	r3, [sp, #16]
 80091da:	4698      	mov	r8, r3
 80091dc:	e7f0      	b.n	80091c0 <PxMessagingTask+0x7a4>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 80091de:	2338      	movs	r3, #56	; 0x38
 80091e0:	4363      	muls	r3, r4
 80091e2:	4a90      	ldr	r2, [pc, #576]	; (8009424 <PxMessagingTask+0xa08>)
 80091e4:	18d3      	adds	r3, r2, r3
 80091e6:	4642      	mov	r2, r8
 80091e8:	5c9f      	ldrb	r7, [r3, r2]
 80091ea:	063f      	lsls	r7, r7, #24
 80091ec:	3201      	adds	r2, #1
 80091ee:	5c9a      	ldrb	r2, [r3, r2]
 80091f0:	0412      	lsls	r2, r2, #16
 80091f2:	18bf      	adds	r7, r7, r2
 80091f4:	4642      	mov	r2, r8
 80091f6:	3202      	adds	r2, #2
 80091f8:	5c9a      	ldrb	r2, [r3, r2]
 80091fa:	0212      	lsls	r2, r2, #8
 80091fc:	18bf      	adds	r7, r7, r2
 80091fe:	4642      	mov	r2, r8
 8009200:	3203      	adds	r2, #3
 8009202:	5c9a      	ldrb	r2, [r3, r2]
 8009204:	18bf      	adds	r7, r7, r2
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 8009206:	2204      	movs	r2, #4
 8009208:	4694      	mov	ip, r2
 800920a:	44e0      	add	r8, ip
 800920c:	4642      	mov	r2, r8
 800920e:	5c9b      	ldrb	r3, [r3, r2]
 8009210:	2bff      	cmp	r3, #255	; 0xff
 8009212:	d011      	beq.n	8009238 <PxMessagingTask+0x81c>
								for(p =0; p < numOfParams; p++){
 8009214:	464e      	mov	r6, r9
 8009216:	002a      	movs	r2, r5
 8009218:	4645      	mov	r5, r8
 800921a:	9706      	str	r7, [sp, #24]
 800921c:	464f      	mov	r7, r9
 800921e:	4690      	mov	r8, r2
 8009220:	e012      	b.n	8009248 <PxMessagingTask+0x82c>
									UpdateBaudrate(p,temp32);
 8009222:	0039      	movs	r1, r7
 8009224:	0030      	movs	r0, r6
 8009226:	f004 fe29 	bl	800de7c <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800922a:	3601      	adds	r6, #1
 800922c:	b2f6      	uxtb	r6, r6
 800922e:	2e05      	cmp	r6, #5
 8009230:	d9f7      	bls.n	8009222 <PxMessagingTask+0x806>
							temp =temp32 =0;
 8009232:	464b      	mov	r3, r9
 8009234:	9306      	str	r3, [sp, #24]
 8009236:	e44b      	b.n	8008ad0 <PxMessagingTask+0xb4>
								for(p =1; p <= NumOfPorts; p++){
 8009238:	2601      	movs	r6, #1
 800923a:	e7f8      	b.n	800922e <PxMessagingTask+0x812>
										UpdateBaudrate(temp,temp32);
 800923c:	9906      	ldr	r1, [sp, #24]
 800923e:	0038      	movs	r0, r7
 8009240:	f004 fe1c 	bl	800de7c <UpdateBaudrate>
								for(p =0; p < numOfParams; p++){
 8009244:	3601      	adds	r6, #1
 8009246:	b2f6      	uxtb	r6, r6
 8009248:	9b04      	ldr	r3, [sp, #16]
 800924a:	429e      	cmp	r6, r3
 800924c:	d20b      	bcs.n	8009266 <PxMessagingTask+0x84a>
									temp =cMessage[port - 1][4 + shift + p];
 800924e:	1972      	adds	r2, r6, r5
 8009250:	00e3      	lsls	r3, r4, #3
 8009252:	1b1b      	subs	r3, r3, r4
 8009254:	00db      	lsls	r3, r3, #3
 8009256:	4973      	ldr	r1, [pc, #460]	; (8009424 <PxMessagingTask+0xa08>)
 8009258:	18cb      	adds	r3, r1, r3
 800925a:	5c9f      	ldrb	r7, [r3, r2]
									if(temp > 0 && temp <= NumOfPorts){
 800925c:	1e7b      	subs	r3, r7, #1
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b04      	cmp	r3, #4
 8009262:	d8ef      	bhi.n	8009244 <PxMessagingTask+0x828>
 8009264:	e7ea      	b.n	800923c <PxMessagingTask+0x820>
 8009266:	9706      	str	r7, [sp, #24]
 8009268:	4645      	mov	r5, r8
 800926a:	e431      	b.n	8008ad0 <PxMessagingTask+0xb4>
							SaveToRO();
 800926c:	f001 fa24 	bl	800a6b8 <SaveToRO>
							SaveEEportsDir();
 8009270:	f7fa f9cc 	bl	800360c <SaveEEportsDir>
							indMode =IND_PING;
 8009274:	4b70      	ldr	r3, [pc, #448]	; (8009438 <PxMessagingTask+0xa1c>)
 8009276:	2201      	movs	r2, #1
 8009278:	701a      	strb	r2, [r3, #0]
							break;
 800927a:	e429      	b.n	8008ad0 <PxMessagingTask+0xb4>
							ClearEEportsDir();
 800927c:	f7fa faa2 	bl	80037c4 <ClearEEportsDir>
							ClearROtopology();
 8009280:	f001 fb10 	bl	800a8a4 <ClearROtopology>
							osDelay(100);
 8009284:	2064      	movs	r0, #100	; 0x64
 8009286:	f004 ff33 	bl	800e0f0 <osDelay>
							indMode =IND_TOPOLOGY;
 800928a:	4b6b      	ldr	r3, [pc, #428]	; (8009438 <PxMessagingTask+0xa1c>)
 800928c:	2202      	movs	r2, #2
 800928e:	701a      	strb	r2, [r3, #0]
							break;
 8009290:	e41e      	b.n	8008ad0 <PxMessagingTask+0xb4>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009292:	f005 f84b 	bl	800e32c <FreeRTOS_CLIGetOutputBuffer>
 8009296:	0006      	movs	r6, r0
							if(dst == BOS_BROADCAST)
 8009298:	2fff      	cmp	r7, #255	; 0xff
 800929a:	d00f      	beq.n	80092bc <PxMessagingTask+0x8a0>
							else if(dst == BOS_MULTICAST)
 800929c:	2ffe      	cmp	r7, #254	; 0xfe
 800929e:	d01c      	beq.n	80092da <PxMessagingTask+0x8be>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 80092a0:	2138      	movs	r1, #56	; 0x38
 80092a2:	4361      	muls	r1, r4
 80092a4:	4441      	add	r1, r8
 80092a6:	4b5f      	ldr	r3, [pc, #380]	; (8009424 <PxMessagingTask+0xa08>)
 80092a8:	18c9      	adds	r1, r1, r3
 80092aa:	4864      	ldr	r0, [pc, #400]	; (800943c <PxMessagingTask+0xa20>)
 80092ac:	9a04      	ldr	r2, [sp, #16]
 80092ae:	3030      	adds	r0, #48	; 0x30
 80092b0:	f00a f90e 	bl	80134d0 <memcpy>
 80092b4:	9404      	str	r4, [sp, #16]
 80092b6:	46a8      	mov	r8, r5
 80092b8:	0035      	movs	r5, r6
 80092ba:	e021      	b.n	8009300 <PxMessagingTask+0x8e4>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 80092bc:	2138      	movs	r1, #56	; 0x38
 80092be:	4361      	muls	r1, r4
 80092c0:	4441      	add	r1, r8
 80092c2:	4b58      	ldr	r3, [pc, #352]	; (8009424 <PxMessagingTask+0xa08>)
 80092c4:	18c9      	adds	r1, r1, r3
 80092c6:	9a04      	ldr	r2, [sp, #16]
 80092c8:	3a01      	subs	r2, #1
 80092ca:	485c      	ldr	r0, [pc, #368]	; (800943c <PxMessagingTask+0xa20>)
 80092cc:	3030      	adds	r0, #48	; 0x30
 80092ce:	f00a f8ff 	bl	80134d0 <memcpy>
 80092d2:	9404      	str	r4, [sp, #16]
 80092d4:	46a8      	mov	r8, r5
 80092d6:	0035      	movs	r5, r6
 80092d8:	e012      	b.n	8009300 <PxMessagingTask+0x8e4>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 80092da:	2138      	movs	r1, #56	; 0x38
 80092dc:	4361      	muls	r1, r4
 80092de:	4441      	add	r1, r8
 80092e0:	4b50      	ldr	r3, [pc, #320]	; (8009424 <PxMessagingTask+0xa08>)
 80092e2:	18c9      	adds	r1, r1, r3
 80092e4:	9b04      	ldr	r3, [sp, #16]
 80092e6:	9a06      	ldr	r2, [sp, #24]
 80092e8:	1a9a      	subs	r2, r3, r2
 80092ea:	3a02      	subs	r2, #2
 80092ec:	4853      	ldr	r0, [pc, #332]	; (800943c <PxMessagingTask+0xa20>)
 80092ee:	3030      	adds	r0, #48	; 0x30
 80092f0:	f00a f8ee 	bl	80134d0 <memcpy>
 80092f4:	9404      	str	r4, [sp, #16]
 80092f6:	46a8      	mov	r8, r5
 80092f8:	0035      	movs	r5, r6
 80092fa:	e001      	b.n	8009300 <PxMessagingTask+0x8e4>
							} while(xReturned != pdFALSE);
 80092fc:	2c00      	cmp	r4, #0
 80092fe:	d024      	beq.n	800934a <PxMessagingTask+0x92e>
								temp =PcPort;
 8009300:	4f4f      	ldr	r7, [pc, #316]	; (8009440 <PxMessagingTask+0xa24>)
 8009302:	783e      	ldrb	r6, [r7, #0]
								PcPort =port;
 8009304:	9b05      	ldr	r3, [sp, #20]
 8009306:	703b      	strb	r3, [r7, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8009308:	2299      	movs	r2, #153	; 0x99
 800930a:	484c      	ldr	r0, [pc, #304]	; (800943c <PxMessagingTask+0xa20>)
 800930c:	0092      	lsls	r2, r2, #2
 800930e:	0029      	movs	r1, r5
 8009310:	3030      	adds	r0, #48	; 0x30
 8009312:	f004 ffa1 	bl	800e258 <FreeRTOS_CLIProcessCommand>
 8009316:	0004      	movs	r4, r0
								PcPort =temp;
 8009318:	703e      	strb	r6, [r7, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800931a:	4b4a      	ldr	r3, [pc, #296]	; (8009444 <PxMessagingTask+0xa28>)
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	2b60      	cmp	r3, #96	; 0x60
 8009320:	d1ec      	bne.n	80092fc <PxMessagingTask+0x8e0>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 8009322:	0028      	movs	r0, r5
 8009324:	f7f6 fef8 	bl	8000118 <strlen>
 8009328:	0002      	movs	r2, r0
 800932a:	0029      	movs	r1, r5
 800932c:	4846      	ldr	r0, [pc, #280]	; (8009448 <PxMessagingTask+0xa2c>)
 800932e:	f00a f8cf 	bl	80134d0 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 8009332:	0028      	movs	r0, r5
 8009334:	f7f6 fef0 	bl	8000118 <strlen>
 8009338:	b282      	uxth	r2, r0
 800933a:	2118      	movs	r1, #24
 800933c:	4650      	mov	r0, sl
 800933e:	f7ff f8ab 	bl	8008498 <SendMessageToModule>
									osDelay(10);
 8009342:	200a      	movs	r0, #10
 8009344:	f004 fed4 	bl	800e0f0 <osDelay>
 8009348:	e7d8      	b.n	80092fc <PxMessagingTask+0x8e0>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800934a:	9c04      	ldr	r4, [sp, #16]
 800934c:	9606      	str	r6, [sp, #24]
 800934e:	4645      	mov	r5, r8
 8009350:	483a      	ldr	r0, [pc, #232]	; (800943c <PxMessagingTask+0xa20>)
 8009352:	2232      	movs	r2, #50	; 0x32
 8009354:	2100      	movs	r1, #0
 8009356:	3030      	adds	r0, #48	; 0x30
 8009358:	f00a f8c3 	bl	80134e2 <memset>
							break;
 800935c:	f7ff fbb8 	bl	8008ad0 <PxMessagingTask+0xb4>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009360:	f004 ffe4 	bl	800e32c <FreeRTOS_CLIGetOutputBuffer>
 8009364:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8009366:	f7f6 fed7 	bl	8000118 <strlen>
 800936a:	0002      	movs	r2, r0
 800936c:	2100      	movs	r1, #0
 800936e:	0030      	movs	r0, r6
 8009370:	f00a f8b7 	bl	80134e2 <memset>
							if(longMessage){
 8009374:	4b28      	ldr	r3, [pc, #160]	; (8009418 <PxMessagingTask+0x9fc>)
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d011      	beq.n	80093a0 <PxMessagingTask+0x984>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800937c:	4f27      	ldr	r7, [pc, #156]	; (800941c <PxMessagingTask+0xa00>)
 800937e:	8838      	ldrh	r0, [r7, #0]
 8009380:	1830      	adds	r0, r6, r0
 8009382:	2138      	movs	r1, #56	; 0x38
 8009384:	4361      	muls	r1, r4
 8009386:	4441      	add	r1, r8
 8009388:	4b26      	ldr	r3, [pc, #152]	; (8009424 <PxMessagingTask+0xa08>)
 800938a:	18c9      	adds	r1, r1, r3
 800938c:	9e04      	ldr	r6, [sp, #16]
 800938e:	0032      	movs	r2, r6
 8009390:	f00a f89e 	bl	80134d0 <memcpy>
								longMessageLastPtr +=numOfParams;
 8009394:	883a      	ldrh	r2, [r7, #0]
 8009396:	46b4      	mov	ip, r6
 8009398:	4462      	add	r2, ip
 800939a:	803a      	strh	r2, [r7, #0]
 800939c:	f7ff fb98 	bl	8008ad0 <PxMessagingTask+0xb4>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 80093a0:	4f1e      	ldr	r7, [pc, #120]	; (800941c <PxMessagingTask+0xa00>)
 80093a2:	8838      	ldrh	r0, [r7, #0]
 80093a4:	1830      	adds	r0, r6, r0
 80093a6:	2138      	movs	r1, #56	; 0x38
 80093a8:	4361      	muls	r1, r4
 80093aa:	4441      	add	r1, r8
 80093ac:	4b1d      	ldr	r3, [pc, #116]	; (8009424 <PxMessagingTask+0xa08>)
 80093ae:	18c9      	adds	r1, r1, r3
 80093b0:	9a04      	ldr	r2, [sp, #16]
 80093b2:	f00a f88d 	bl	80134d0 <memcpy>
								longMessageLastPtr =0;
 80093b6:	2100      	movs	r1, #0
 80093b8:	8039      	strh	r1, [r7, #0]
								responseStatus =BOS_OK;
 80093ba:	4b1e      	ldr	r3, [pc, #120]	; (8009434 <PxMessagingTask+0xa18>)
 80093bc:	7019      	strb	r1, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 80093be:	000b      	movs	r3, r1
 80093c0:	000a      	movs	r2, r1
 80093c2:	4822      	ldr	r0, [pc, #136]	; (800944c <PxMessagingTask+0xa30>)
 80093c4:	6800      	ldr	r0, [r0, #0]
 80093c6:	f006 f9c3 	bl	800f750 <xTaskGenericNotify>
 80093ca:	f7ff fb81 	bl	8008ad0 <PxMessagingTask+0xb4>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80093ce:	4b20      	ldr	r3, [pc, #128]	; (8009450 <PxMessagingTask+0xa34>)
 80093d0:	4a20      	ldr	r2, [pc, #128]	; (8009454 <PxMessagingTask+0xa38>)
 80093d2:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 80093d4:	4b18      	ldr	r3, [pc, #96]	; (8009438 <PxMessagingTask+0xa1c>)
 80093d6:	2201      	movs	r2, #1
 80093d8:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 80093da:	200a      	movs	r0, #10
 80093dc:	f004 fe88 	bl	800e0f0 <osDelay>
							NVIC_SystemReset();
 80093e0:	f7ff f948 	bl	8008674 <NVIC_SystemReset>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 80093e4:	2338      	movs	r3, #56	; 0x38
 80093e6:	4363      	muls	r3, r4
 80093e8:	4e0e      	ldr	r6, [pc, #56]	; (8009424 <PxMessagingTask+0xa08>)
 80093ea:	18f6      	adds	r6, r6, r3
 80093ec:	4643      	mov	r3, r8
 80093ee:	5cf0      	ldrb	r0, [r6, r3]
 80093f0:	2100      	movs	r1, #0
 80093f2:	9100      	str	r1, [sp, #0]
 80093f4:	2319      	movs	r3, #25
 80093f6:	000a      	movs	r2, r1
 80093f8:	f7fe fdfa 	bl	8007ff0 <SendMessageFromPort>
							osDelay(100);
 80093fc:	2064      	movs	r0, #100	; 0x64
 80093fe:	f004 fe77 	bl	800e0f0 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 8009402:	4643      	mov	r3, r8
 8009404:	5cf3      	ldrb	r3, [r6, r3]
 8009406:	4a14      	ldr	r2, [pc, #80]	; (8009458 <PxMessagingTask+0xa3c>)
 8009408:	7811      	ldrb	r1, [r2, #0]
 800940a:	9a05      	ldr	r2, [sp, #20]
 800940c:	4650      	mov	r0, sl
 800940e:	f001 fa75 	bl	800a8fc <remoteBootloaderUpdate>
							break;
 8009412:	f7ff fb5d 	bl	8008ad0 <PxMessagingTask+0xb4>
 8009416:	46c0      	nop			; (mov r8, r8)
 8009418:	20000cf4 	.word	0x20000cf4
 800941c:	20000cf2 	.word	0x20000cf2
 8009420:	2000209c 	.word	0x2000209c
 8009424:	20000d38 	.word	0x20000d38
 8009428:	20000008 	.word	0x20000008
 800942c:	20000f7c 	.word	0x20000f7c
 8009430:	20002b70 	.word	0x20002b70
 8009434:	20000c6c 	.word	0x20000c6c
 8009438:	200011e7 	.word	0x200011e7
 800943c:	20002000 	.word	0x20002000
 8009440:	20000c58 	.word	0x20000c58
 8009444:	20000b44 	.word	0x20000b44
 8009448:	20000b6c 	.word	0x20000b6c
 800944c:	20001e14 	.word	0x20001e14
 8009450:	20007ff0 	.word	0x20007ff0
 8009454:	deadbeef 	.word	0xdeadbeef
 8009458:	20000aa0 	.word	0x20000aa0
							temp =cMessage[port - 1][11 + shift];
 800945c:	210b      	movs	r1, #11
 800945e:	4441      	add	r1, r8
 8009460:	9108      	str	r1, [sp, #32]
 8009462:	2238      	movs	r2, #56	; 0x38
 8009464:	4362      	muls	r2, r4
 8009466:	4bee      	ldr	r3, [pc, #952]	; (8009820 <PxMessagingTask+0xe04>)
 8009468:	189b      	adds	r3, r3, r2
 800946a:	5c5b      	ldrb	r3, [r3, r1]
 800946c:	9306      	str	r3, [sp, #24]
							if(numOfParams == 15)
 800946e:	9b04      	ldr	r3, [sp, #16]
 8009470:	2b0f      	cmp	r3, #15
 8009472:	d077      	beq.n	8009564 <PxMessagingTask+0xb48>
							if(numOfParams == 17)
 8009474:	9b04      	ldr	r3, [sp, #16]
 8009476:	2b11      	cmp	r3, #17
 8009478:	d07c      	beq.n	8009574 <PxMessagingTask+0xb58>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800947a:	2338      	movs	r3, #56	; 0x38
 800947c:	4363      	muls	r3, r4
 800947e:	4ae8      	ldr	r2, [pc, #928]	; (8009820 <PxMessagingTask+0xe04>)
 8009480:	18d3      	adds	r3, r2, r3
 8009482:	4642      	mov	r2, r8
 8009484:	5c9e      	ldrb	r6, [r3, r2]
 8009486:	0636      	lsls	r6, r6, #24
 8009488:	3201      	adds	r2, #1
 800948a:	9209      	str	r2, [sp, #36]	; 0x24
 800948c:	5c9a      	ldrb	r2, [r3, r2]
 800948e:	0412      	lsls	r2, r2, #16
 8009490:	18b6      	adds	r6, r6, r2
 8009492:	4642      	mov	r2, r8
 8009494:	3202      	adds	r2, #2
 8009496:	920a      	str	r2, [sp, #40]	; 0x28
 8009498:	5c9a      	ldrb	r2, [r3, r2]
 800949a:	0212      	lsls	r2, r2, #8
 800949c:	18b6      	adds	r6, r6, r2
 800949e:	4642      	mov	r2, r8
 80094a0:	3203      	adds	r2, #3
 80094a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80094a4:	5c9a      	ldrb	r2, [r3, r2]
 80094a6:	18b6      	adds	r6, r6, r2
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 80094a8:	2204      	movs	r2, #4
 80094aa:	4442      	add	r2, r8
 80094ac:	4694      	mov	ip, r2
 80094ae:	5c9f      	ldrb	r7, [r3, r2]
 80094b0:	063f      	lsls	r7, r7, #24
 80094b2:	4642      	mov	r2, r8
 80094b4:	3205      	adds	r2, #5
 80094b6:	5c98      	ldrb	r0, [r3, r2]
 80094b8:	0400      	lsls	r0, r0, #16
 80094ba:	1838      	adds	r0, r7, r0
 80094bc:	4641      	mov	r1, r8
 80094be:	3106      	adds	r1, #6
 80094c0:	5c5f      	ldrb	r7, [r3, r1]
 80094c2:	023f      	lsls	r7, r7, #8
 80094c4:	19c7      	adds	r7, r0, r7
 80094c6:	4640      	mov	r0, r8
 80094c8:	3007      	adds	r0, #7
 80094ca:	5c1b      	ldrb	r3, [r3, r0]
 80094cc:	18ff      	adds	r7, r7, r3
							if(temp == false){
 80094ce:	9b06      	ldr	r3, [sp, #24]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d174      	bne.n	80095be <PxMessagingTask+0xba2>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 80094d4:	3338      	adds	r3, #56	; 0x38
 80094d6:	4363      	muls	r3, r4
 80094d8:	4ad1      	ldr	r2, [pc, #836]	; (8009820 <PxMessagingTask+0xe04>)
 80094da:	18d2      	adds	r2, r2, r3
 80094dc:	4643      	mov	r3, r8
 80094de:	3309      	adds	r3, #9
 80094e0:	5cd3      	ldrb	r3, [r2, r3]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d008      	beq.n	80094f8 <PxMessagingTask+0xadc>
 80094e6:	2238      	movs	r2, #56	; 0x38
 80094e8:	4362      	muls	r2, r4
 80094ea:	49cd      	ldr	r1, [pc, #820]	; (8009820 <PxMessagingTask+0xe04>)
 80094ec:	1889      	adds	r1, r1, r2
 80094ee:	4642      	mov	r2, r8
 80094f0:	320a      	adds	r2, #10
 80094f2:	5c8a      	ldrb	r2, [r1, r2]
 80094f4:	2a00      	cmp	r2, #0
 80094f6:	d146      	bne.n	8009586 <PxMessagingTask+0xb6a>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 80094f8:	2238      	movs	r2, #56	; 0x38
 80094fa:	4362      	muls	r2, r4
 80094fc:	4bc8      	ldr	r3, [pc, #800]	; (8009820 <PxMessagingTask+0xe04>)
 80094fe:	189b      	adds	r3, r3, r2
 8009500:	9a08      	ldr	r2, [sp, #32]
 8009502:	5c9b      	ldrb	r3, [r3, r2]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d008      	beq.n	800951a <PxMessagingTask+0xafe>
 8009508:	4642      	mov	r2, r8
 800950a:	320c      	adds	r2, #12
 800950c:	2038      	movs	r0, #56	; 0x38
 800950e:	4360      	muls	r0, r4
 8009510:	49c3      	ldr	r1, [pc, #780]	; (8009820 <PxMessagingTask+0xe04>)
 8009512:	1809      	adds	r1, r1, r0
 8009514:	5c8a      	ldrb	r2, [r1, r2]
 8009516:	2a00      	cmp	r2, #0
 8009518:	d143      	bne.n	80095a2 <PxMessagingTask+0xb86>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800951a:	2338      	movs	r3, #56	; 0x38
 800951c:	4363      	muls	r3, r4
 800951e:	4ac0      	ldr	r2, [pc, #768]	; (8009820 <PxMessagingTask+0xe04>)
 8009520:	18d2      	adds	r2, r2, r3
 8009522:	4643      	mov	r3, r8
 8009524:	330d      	adds	r3, #13
 8009526:	5cd3      	ldrb	r3, [r2, r3]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d101      	bne.n	8009530 <PxMessagingTask+0xb14>
 800952c:	f7ff fad0 	bl	8008ad0 <PxMessagingTask+0xb4>
 8009530:	2238      	movs	r2, #56	; 0x38
 8009532:	4362      	muls	r2, r4
 8009534:	49ba      	ldr	r1, [pc, #744]	; (8009820 <PxMessagingTask+0xe04>)
 8009536:	1889      	adds	r1, r1, r2
 8009538:	4642      	mov	r2, r8
 800953a:	320e      	adds	r2, #14
 800953c:	5c8a      	ldrb	r2, [r1, r2]
 800953e:	2a00      	cmp	r2, #0
 8009540:	d101      	bne.n	8009546 <PxMessagingTask+0xb2a>
 8009542:	f7ff fac5 	bl	8008ad0 <PxMessagingTask+0xb4>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 8009546:	4640      	mov	r0, r8
 8009548:	3008      	adds	r0, #8
 800954a:	2138      	movs	r1, #56	; 0x38
 800954c:	4361      	muls	r1, r4
 800954e:	468c      	mov	ip, r1
 8009550:	49b3      	ldr	r1, [pc, #716]	; (8009820 <PxMessagingTask+0xe04>)
 8009552:	4461      	add	r1, ip
 8009554:	5c08      	ldrb	r0, [r1, r0]
 8009556:	9200      	str	r2, [sp, #0]
 8009558:	003a      	movs	r2, r7
 800955a:	0031      	movs	r1, r6
 800955c:	f7fe fc34 	bl	8007dc8 <SetupDMAStreams>
 8009560:	f7ff fab6 	bl	8008ad0 <PxMessagingTask+0xb4>
								temp =cMessage[port - 1][13 + shift];
 8009564:	0013      	movs	r3, r2
 8009566:	4aae      	ldr	r2, [pc, #696]	; (8009820 <PxMessagingTask+0xe04>)
 8009568:	18d2      	adds	r2, r2, r3
 800956a:	4643      	mov	r3, r8
 800956c:	330d      	adds	r3, #13
 800956e:	5cd3      	ldrb	r3, [r2, r3]
 8009570:	9306      	str	r3, [sp, #24]
 8009572:	e77f      	b.n	8009474 <PxMessagingTask+0xa58>
								temp =cMessage[port - 1][15 + shift];
 8009574:	3327      	adds	r3, #39	; 0x27
 8009576:	4363      	muls	r3, r4
 8009578:	4aa9      	ldr	r2, [pc, #676]	; (8009820 <PxMessagingTask+0xe04>)
 800957a:	18d2      	adds	r2, r2, r3
 800957c:	4643      	mov	r3, r8
 800957e:	330f      	adds	r3, #15
 8009580:	5cd3      	ldrb	r3, [r2, r3]
 8009582:	9306      	str	r3, [sp, #24]
 8009584:	e779      	b.n	800947a <PxMessagingTask+0xa5e>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 8009586:	4641      	mov	r1, r8
 8009588:	3108      	adds	r1, #8
 800958a:	2038      	movs	r0, #56	; 0x38
 800958c:	4360      	muls	r0, r4
 800958e:	4684      	mov	ip, r0
 8009590:	48a3      	ldr	r0, [pc, #652]	; (8009820 <PxMessagingTask+0xe04>)
 8009592:	4460      	add	r0, ip
 8009594:	5c40      	ldrb	r0, [r0, r1]
 8009596:	9200      	str	r2, [sp, #0]
 8009598:	003a      	movs	r2, r7
 800959a:	0031      	movs	r1, r6
 800959c:	f7fe fc14 	bl	8007dc8 <SetupDMAStreams>
 80095a0:	e7aa      	b.n	80094f8 <PxMessagingTask+0xadc>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 80095a2:	4641      	mov	r1, r8
 80095a4:	3108      	adds	r1, #8
 80095a6:	2038      	movs	r0, #56	; 0x38
 80095a8:	4360      	muls	r0, r4
 80095aa:	4684      	mov	ip, r0
 80095ac:	489c      	ldr	r0, [pc, #624]	; (8009820 <PxMessagingTask+0xe04>)
 80095ae:	4460      	add	r0, ip
 80095b0:	5c40      	ldrb	r0, [r0, r1]
 80095b2:	9200      	str	r2, [sp, #0]
 80095b4:	003a      	movs	r2, r7
 80095b6:	0031      	movs	r1, r6
 80095b8:	f7fe fc06 	bl	8007dc8 <SetupDMAStreams>
 80095bc:	e7ad      	b.n	800951a <PxMessagingTask+0xafe>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 80095be:	4667      	mov	r7, ip
 80095c0:	4692      	mov	sl, r2
 80095c2:	4689      	mov	r9, r1
 80095c4:	0006      	movs	r6, r0
 80095c6:	4643      	mov	r3, r8
 80095c8:	3308      	adds	r3, #8
 80095ca:	2238      	movs	r2, #56	; 0x38
 80095cc:	4362      	muls	r2, r4
 80095ce:	4d94      	ldr	r5, [pc, #592]	; (8009820 <PxMessagingTask+0xe04>)
 80095d0:	18ad      	adds	r5, r5, r2
 80095d2:	5ce9      	ldrb	r1, [r5, r3]
 80095d4:	20e4      	movs	r0, #228	; 0xe4
 80095d6:	f002 fa6f 	bl	800bab8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 80095da:	4643      	mov	r3, r8
 80095dc:	5ce9      	ldrb	r1, [r5, r3]
 80095de:	0209      	lsls	r1, r1, #8
 80095e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e2:	5ceb      	ldrb	r3, [r5, r3]
 80095e4:	18c9      	adds	r1, r1, r3
 80095e6:	b289      	uxth	r1, r1
 80095e8:	20e5      	movs	r0, #229	; 0xe5
 80095ea:	f002 fa65 	bl	800bab8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 80095ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095f0:	5ce9      	ldrb	r1, [r5, r3]
 80095f2:	0209      	lsls	r1, r1, #8
 80095f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095f6:	5ceb      	ldrb	r3, [r5, r3]
 80095f8:	18c9      	adds	r1, r1, r3
 80095fa:	b289      	uxth	r1, r1
 80095fc:	20e6      	movs	r0, #230	; 0xe6
 80095fe:	f002 fa5b 	bl	800bab8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 8009602:	5de9      	ldrb	r1, [r5, r7]
 8009604:	0209      	lsls	r1, r1, #8
 8009606:	4653      	mov	r3, sl
 8009608:	5ceb      	ldrb	r3, [r5, r3]
 800960a:	18c9      	adds	r1, r1, r3
 800960c:	b289      	uxth	r1, r1
 800960e:	20e7      	movs	r0, #231	; 0xe7
 8009610:	f002 fa52 	bl	800bab8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 8009614:	464b      	mov	r3, r9
 8009616:	5ce9      	ldrb	r1, [r5, r3]
 8009618:	0209      	lsls	r1, r1, #8
 800961a:	5dab      	ldrb	r3, [r5, r6]
 800961c:	18c9      	adds	r1, r1, r3
 800961e:	b289      	uxth	r1, r1
 8009620:	20e8      	movs	r0, #232	; 0xe8
 8009622:	f002 fa49 	bl	800bab8 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 8009626:	4643      	mov	r3, r8
 8009628:	3309      	adds	r3, #9
 800962a:	5ce9      	ldrb	r1, [r5, r3]
 800962c:	0209      	lsls	r1, r1, #8
 800962e:	3301      	adds	r3, #1
 8009630:	5ceb      	ldrb	r3, [r5, r3]
 8009632:	18c9      	adds	r1, r1, r3
 8009634:	b289      	uxth	r1, r1
 8009636:	20e9      	movs	r0, #233	; 0xe9
 8009638:	f002 fa3e 	bl	800bab8 <EE_WriteVariable>
								if(numOfParams == 19)
 800963c:	9b04      	ldr	r3, [sp, #16]
 800963e:	2b13      	cmp	r3, #19
 8009640:	d004      	beq.n	800964c <PxMessagingTask+0xc30>
								if(numOfParams == 21)
 8009642:	9b04      	ldr	r3, [sp, #16]
 8009644:	2b15      	cmp	r3, #21
 8009646:	d011      	beq.n	800966c <PxMessagingTask+0xc50>
								NVIC_SystemReset();
 8009648:	f7ff f814 	bl	8008674 <NVIC_SystemReset>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800964c:	2238      	movs	r2, #56	; 0x38
 800964e:	4362      	muls	r2, r4
 8009650:	4b73      	ldr	r3, [pc, #460]	; (8009820 <PxMessagingTask+0xe04>)
 8009652:	189b      	adds	r3, r3, r2
 8009654:	9a08      	ldr	r2, [sp, #32]
 8009656:	5c99      	ldrb	r1, [r3, r2]
 8009658:	0209      	lsls	r1, r1, #8
 800965a:	4642      	mov	r2, r8
 800965c:	320c      	adds	r2, #12
 800965e:	5c9b      	ldrb	r3, [r3, r2]
 8009660:	18c9      	adds	r1, r1, r3
 8009662:	b289      	uxth	r1, r1
 8009664:	20ea      	movs	r0, #234	; 0xea
 8009666:	f002 fa27 	bl	800bab8 <EE_WriteVariable>
 800966a:	e7ea      	b.n	8009642 <PxMessagingTask+0xc26>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800966c:	4642      	mov	r2, r8
 800966e:	320d      	adds	r2, #13
 8009670:	3323      	adds	r3, #35	; 0x23
 8009672:	4363      	muls	r3, r4
 8009674:	4c6a      	ldr	r4, [pc, #424]	; (8009820 <PxMessagingTask+0xe04>)
 8009676:	18e4      	adds	r4, r4, r3
 8009678:	5ca1      	ldrb	r1, [r4, r2]
 800967a:	0209      	lsls	r1, r1, #8
 800967c:	4643      	mov	r3, r8
 800967e:	330e      	adds	r3, #14
 8009680:	5ce3      	ldrb	r3, [r4, r3]
 8009682:	18c9      	adds	r1, r1, r3
 8009684:	b289      	uxth	r1, r1
 8009686:	20eb      	movs	r0, #235	; 0xeb
 8009688:	f002 fa16 	bl	800bab8 <EE_WriteVariable>
 800968c:	e7dc      	b.n	8009648 <PxMessagingTask+0xc2c>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800968e:	2338      	movs	r3, #56	; 0x38
 8009690:	4363      	muls	r3, r4
 8009692:	4a63      	ldr	r2, [pc, #396]	; (8009820 <PxMessagingTask+0xe04>)
 8009694:	18d3      	adds	r3, r2, r3
 8009696:	4642      	mov	r2, r8
 8009698:	5c9a      	ldrb	r2, [r3, r2]
 800969a:	0612      	lsls	r2, r2, #24
 800969c:	4641      	mov	r1, r8
 800969e:	3101      	adds	r1, #1
 80096a0:	5c59      	ldrb	r1, [r3, r1]
 80096a2:	0409      	lsls	r1, r1, #16
 80096a4:	1852      	adds	r2, r2, r1
 80096a6:	4641      	mov	r1, r8
 80096a8:	3102      	adds	r1, #2
 80096aa:	5c59      	ldrb	r1, [r3, r1]
 80096ac:	0209      	lsls	r1, r1, #8
 80096ae:	1852      	adds	r2, r2, r1
 80096b0:	4641      	mov	r1, r8
 80096b2:	3103      	adds	r1, #3
 80096b4:	5c59      	ldrb	r1, [r3, r1]
 80096b6:	1852      	adds	r2, r2, r1
 80096b8:	9204      	str	r2, [sp, #16]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 80096ba:	4641      	mov	r1, r8
 80096bc:	1d0a      	adds	r2, r1, #4
 80096be:	5c98      	ldrb	r0, [r3, r2]
 80096c0:	0600      	lsls	r0, r0, #24
 80096c2:	1d4a      	adds	r2, r1, #5
 80096c4:	5c9a      	ldrb	r2, [r3, r2]
 80096c6:	0412      	lsls	r2, r2, #16
 80096c8:	1882      	adds	r2, r0, r2
 80096ca:	3106      	adds	r1, #6
 80096cc:	5c59      	ldrb	r1, [r3, r1]
 80096ce:	0209      	lsls	r1, r1, #8
 80096d0:	1852      	adds	r2, r2, r1
 80096d2:	4641      	mov	r1, r8
 80096d4:	3107      	adds	r1, #7
 80096d6:	5c59      	ldrb	r1, [r3, r1]
 80096d8:	1851      	adds	r1, r2, r1
 80096da:	9108      	str	r1, [sp, #32]
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 80096dc:	4640      	mov	r0, r8
 80096de:	3009      	adds	r0, #9
 80096e0:	4642      	mov	r2, r8
 80096e2:	320b      	adds	r2, #11
 80096e4:	4641      	mov	r1, r8
 80096e6:	310a      	adds	r1, #10
 80096e8:	4647      	mov	r7, r8
 80096ea:	3708      	adds	r7, #8
 80096ec:	4646      	mov	r6, r8
 80096ee:	360c      	adds	r6, #12
 80096f0:	5d9e      	ldrb	r6, [r3, r6]
 80096f2:	5c59      	ldrb	r1, [r3, r1]
 80096f4:	468c      	mov	ip, r1
 80096f6:	5c9a      	ldrb	r2, [r3, r2]
 80096f8:	494a      	ldr	r1, [pc, #296]	; (8009824 <PxMessagingTask+0xe08>)
 80096fa:	7809      	ldrb	r1, [r1, #0]
 80096fc:	5c18      	ldrb	r0, [r3, r0]
 80096fe:	4680      	mov	r8, r0
 8009700:	1e70      	subs	r0, r6, #1
 8009702:	4186      	sbcs	r6, r0
 8009704:	9603      	str	r6, [sp, #12]
 8009706:	9e08      	ldr	r6, [sp, #32]
 8009708:	9602      	str	r6, [sp, #8]
 800970a:	9e04      	ldr	r6, [sp, #16]
 800970c:	9601      	str	r6, [sp, #4]
 800970e:	5ddb      	ldrb	r3, [r3, r7]
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	4663      	mov	r3, ip
 8009714:	4640      	mov	r0, r8
 8009716:	f7fe fee5 	bl	80084e4 <StartScastDMAStream>
							break;
 800971a:	f7ff f9d9 	bl	8008ad0 <PxMessagingTask+0xb4>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800971e:	2138      	movs	r1, #56	; 0x38
 8009720:	4361      	muls	r1, r4
 8009722:	4a3f      	ldr	r2, [pc, #252]	; (8009820 <PxMessagingTask+0xe04>)
 8009724:	1852      	adds	r2, r2, r1
 8009726:	4641      	mov	r1, r8
 8009728:	5c52      	ldrb	r2, [r2, r1]
 800972a:	2a00      	cmp	r2, #0
 800972c:	d000      	beq.n	8009730 <PxMessagingTask+0xd14>
 800972e:	e08f      	b.n	8009850 <PxMessagingTask+0xe34>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8009730:	3102      	adds	r1, #2
 8009732:	2338      	movs	r3, #56	; 0x38
 8009734:	4363      	muls	r3, r4
 8009736:	4a3a      	ldr	r2, [pc, #232]	; (8009820 <PxMessagingTask+0xe04>)
 8009738:	18d2      	adds	r2, r2, r3
 800973a:	5c53      	ldrb	r3, [r2, r1]
 800973c:	061b      	lsls	r3, r3, #24
 800973e:	4641      	mov	r1, r8
 8009740:	3103      	adds	r1, #3
 8009742:	5c51      	ldrb	r1, [r2, r1]
 8009744:	0409      	lsls	r1, r1, #16
 8009746:	185b      	adds	r3, r3, r1
 8009748:	4641      	mov	r1, r8
 800974a:	3104      	adds	r1, #4
 800974c:	5c51      	ldrb	r1, [r2, r1]
 800974e:	0209      	lsls	r1, r1, #8
 8009750:	185b      	adds	r3, r3, r1
 8009752:	4641      	mov	r1, r8
 8009754:	3105      	adds	r1, #5
 8009756:	5c51      	ldrb	r1, [r2, r1]
 8009758:	185b      	adds	r3, r3, r1
								switch(cMessage[port - 1][1 + shift]) // requested format
 800975a:	4641      	mov	r1, r8
 800975c:	3101      	adds	r1, #1
 800975e:	5c52      	ldrb	r2, [r2, r1]
 8009760:	3a01      	subs	r2, #1
 8009762:	b2d1      	uxtb	r1, r2
 8009764:	2907      	cmp	r1, #7
 8009766:	d901      	bls.n	800976c <PxMessagingTask+0xd50>
 8009768:	f7ff f9b2 	bl	8008ad0 <PxMessagingTask+0xb4>
 800976c:	b2d2      	uxtb	r2, r2
 800976e:	0092      	lsls	r2, r2, #2
 8009770:	492d      	ldr	r1, [pc, #180]	; (8009828 <PxMessagingTask+0xe0c>)
 8009772:	588a      	ldr	r2, [r1, r2]
 8009774:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 8009776:	781a      	ldrb	r2, [r3, #0]
 8009778:	4b2c      	ldr	r3, [pc, #176]	; (800982c <PxMessagingTask+0xe10>)
 800977a:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800977c:	2201      	movs	r2, #1
 800977e:	211f      	movs	r1, #31
 8009780:	4650      	mov	r0, sl
 8009782:	f7fe fe89 	bl	8008498 <SendMessageToModule>
										break;
 8009786:	f7ff f9a3 	bl	8008ad0 <PxMessagingTask+0xb4>
										messageParams[0] =*(__IO int8_t* )temp32;
 800978a:	781a      	ldrb	r2, [r3, #0]
 800978c:	4b27      	ldr	r3, [pc, #156]	; (800982c <PxMessagingTask+0xe10>)
 800978e:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 8009790:	2201      	movs	r2, #1
 8009792:	211f      	movs	r1, #31
 8009794:	4650      	mov	r0, sl
 8009796:	f7fe fe7f 	bl	8008498 <SendMessageToModule>
										break;
 800979a:	f7ff f999 	bl	8008ad0 <PxMessagingTask+0xb4>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800979e:	8819      	ldrh	r1, [r3, #0]
 80097a0:	4a22      	ldr	r2, [pc, #136]	; (800982c <PxMessagingTask+0xe10>)
 80097a2:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	0a1b      	lsrs	r3, r3, #8
 80097a8:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 80097aa:	2202      	movs	r2, #2
 80097ac:	211f      	movs	r1, #31
 80097ae:	4650      	mov	r0, sl
 80097b0:	f7fe fe72 	bl	8008498 <SendMessageToModule>
										break;
 80097b4:	f7ff f98c 	bl	8008ad0 <PxMessagingTask+0xb4>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 80097b8:	8819      	ldrh	r1, [r3, #0]
 80097ba:	4a1c      	ldr	r2, [pc, #112]	; (800982c <PxMessagingTask+0xe10>)
 80097bc:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80097be:	881b      	ldrh	r3, [r3, #0]
 80097c0:	b21b      	sxth	r3, r3
 80097c2:	121b      	asrs	r3, r3, #8
 80097c4:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 80097c6:	2202      	movs	r2, #2
 80097c8:	211f      	movs	r1, #31
 80097ca:	4650      	mov	r0, sl
 80097cc:	f7fe fe64 	bl	8008498 <SendMessageToModule>
										break;
 80097d0:	f7ff f97e 	bl	8008ad0 <PxMessagingTask+0xb4>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 80097d4:	6819      	ldr	r1, [r3, #0]
 80097d6:	4a15      	ldr	r2, [pc, #84]	; (800982c <PxMessagingTask+0xe10>)
 80097d8:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 80097da:	6819      	ldr	r1, [r3, #0]
 80097dc:	0a09      	lsrs	r1, r1, #8
 80097de:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 80097e0:	6819      	ldr	r1, [r3, #0]
 80097e2:	0c09      	lsrs	r1, r1, #16
 80097e4:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	0e1b      	lsrs	r3, r3, #24
 80097ea:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 80097ec:	2204      	movs	r2, #4
 80097ee:	211f      	movs	r1, #31
 80097f0:	4650      	mov	r0, sl
 80097f2:	f7fe fe51 	bl	8008498 <SendMessageToModule>
										break;
 80097f6:	f7ff f96b 	bl	8008ad0 <PxMessagingTask+0xb4>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 80097fa:	6819      	ldr	r1, [r3, #0]
 80097fc:	4a0b      	ldr	r2, [pc, #44]	; (800982c <PxMessagingTask+0xe10>)
 80097fe:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009800:	6819      	ldr	r1, [r3, #0]
 8009802:	1209      	asrs	r1, r1, #8
 8009804:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009806:	6819      	ldr	r1, [r3, #0]
 8009808:	1409      	asrs	r1, r1, #16
 800980a:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	0e1b      	lsrs	r3, r3, #24
 8009810:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 8009812:	2204      	movs	r2, #4
 8009814:	211f      	movs	r1, #31
 8009816:	4650      	mov	r0, sl
 8009818:	f7fe fe3e 	bl	8008498 <SendMessageToModule>
										break;
 800981c:	f7ff f958 	bl	8008ad0 <PxMessagingTask+0xb4>
 8009820:	20000d38 	.word	0x20000d38
 8009824:	20000aa0 	.word	0x20000aa0
 8009828:	08019b74 	.word	0x08019b74
 800982c:	20000b6c 	.word	0x20000b6c
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 8009830:	7819      	ldrb	r1, [r3, #0]
 8009832:	4ae2      	ldr	r2, [pc, #904]	; (8009bbc <PxMessagingTask+0x11a0>)
 8009834:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 8009836:	7859      	ldrb	r1, [r3, #1]
 8009838:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800983a:	7899      	ldrb	r1, [r3, #2]
 800983c:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800983e:	78db      	ldrb	r3, [r3, #3]
 8009840:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 8009842:	2208      	movs	r2, #8
 8009844:	211f      	movs	r1, #31
 8009846:	4650      	mov	r0, sl
 8009848:	f7fe fe26 	bl	8008498 <SendMessageToModule>
										break; // You cannot bitwise floats
 800984c:	f7ff f940 	bl	8008ad0 <PxMessagingTask+0xb4>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 8009850:	2a02      	cmp	r2, #2
 8009852:	d01b      	beq.n	800988c <PxMessagingTask+0xe70>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 8009854:	d801      	bhi.n	800985a <PxMessagingTask+0xe3e>
 8009856:	f7ff f93b 	bl	8008ad0 <PxMessagingTask+0xb4>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800985a:	3a04      	subs	r2, #4
 800985c:	0092      	lsls	r2, r2, #2
 800985e:	4bd8      	ldr	r3, [pc, #864]	; (8009bc0 <PxMessagingTask+0x11a4>)
 8009860:	58d1      	ldr	r1, [r2, r3]
 8009862:	220f      	movs	r2, #15
 8009864:	400a      	ands	r2, r1
 8009866:	4bd5      	ldr	r3, [pc, #852]	; (8009bbc <PxMessagingTask+0x11a0>)
 8009868:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800986a:	d100      	bne.n	800986e <PxMessagingTask+0xe52>
 800986c:	e09e      	b.n	80099ac <PxMessagingTask+0xf90>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800986e:	0c09      	lsrs	r1, r1, #16
 8009870:	2380      	movs	r3, #128	; 0x80
 8009872:	059b      	lsls	r3, r3, #22
 8009874:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 8009876:	3a01      	subs	r2, #1
 8009878:	b2d0      	uxtb	r0, r2
 800987a:	2807      	cmp	r0, #7
 800987c:	d901      	bls.n	8009882 <PxMessagingTask+0xe66>
 800987e:	f7ff f927 	bl	8008ad0 <PxMessagingTask+0xb4>
 8009882:	b2d2      	uxtb	r2, r2
 8009884:	0092      	lsls	r2, r2, #2
 8009886:	48cf      	ldr	r0, [pc, #828]	; (8009bc4 <PxMessagingTask+0x11a8>)
 8009888:	5882      	ldr	r2, [r0, r2]
 800988a:	4697      	mov	pc, r2
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800988c:	3b01      	subs	r3, #1
 800988e:	48ce      	ldr	r0, [pc, #824]	; (8009bc8 <PxMessagingTask+0x11ac>)
 8009890:	3236      	adds	r2, #54	; 0x36
 8009892:	4362      	muls	r2, r4
 8009894:	1881      	adds	r1, r0, r2
 8009896:	2600      	movs	r6, #0
 8009898:	54ce      	strb	r6, [r1, r3]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800989a:	4643      	mov	r3, r8
 800989c:	3301      	adds	r3, #1
 800989e:	18d2      	adds	r2, r2, r3
 80098a0:	1810      	adds	r0, r2, r0
 80098a2:	f7fa f815 	bl	80038d0 <IsModuleParameter>
 80098a6:	9006      	str	r0, [sp, #24]
								if(temp == 0){ // Parameter does not exist
 80098a8:	42b0      	cmp	r0, r6
 80098aa:	d013      	beq.n	80098d4 <PxMessagingTask+0xeb8>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 80098ac:	3801      	subs	r0, #1
 80098ae:	4ac7      	ldr	r2, [pc, #796]	; (8009bcc <PxMessagingTask+0x11b0>)
 80098b0:	230c      	movs	r3, #12
 80098b2:	4358      	muls	r0, r3
 80098b4:	5883      	ldr	r3, [r0, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 80098b6:	1812      	adds	r2, r2, r0
 80098b8:	7912      	ldrb	r2, [r2, #4]
 80098ba:	49c0      	ldr	r1, [pc, #768]	; (8009bbc <PxMessagingTask+0x11a0>)
 80098bc:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 80098be:	3a01      	subs	r2, #1
 80098c0:	b2d1      	uxtb	r1, r2
 80098c2:	2907      	cmp	r1, #7
 80098c4:	d901      	bls.n	80098ca <PxMessagingTask+0xeae>
 80098c6:	f7ff f903 	bl	8008ad0 <PxMessagingTask+0xb4>
 80098ca:	b2d2      	uxtb	r2, r2
 80098cc:	0092      	lsls	r2, r2, #2
 80098ce:	49c0      	ldr	r1, [pc, #768]	; (8009bd0 <PxMessagingTask+0x11b4>)
 80098d0:	588a      	ldr	r2, [r1, r2]
 80098d2:	4697      	mov	pc, r2
									SendMessageToModule(src,
 80098d4:	2201      	movs	r2, #1
 80098d6:	211f      	movs	r1, #31
 80098d8:	4650      	mov	r0, sl
 80098da:	f7fe fddd 	bl	8008498 <SendMessageToModule>
 80098de:	f7ff f8f7 	bl	8008ad0 <PxMessagingTask+0xb4>
											messageParams[1] =*(__IO uint8_t* )temp32;
 80098e2:	781a      	ldrb	r2, [r3, #0]
 80098e4:	4bb5      	ldr	r3, [pc, #724]	; (8009bbc <PxMessagingTask+0x11a0>)
 80098e6:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 80098e8:	2202      	movs	r2, #2
 80098ea:	211f      	movs	r1, #31
 80098ec:	4650      	mov	r0, sl
 80098ee:	f7fe fdd3 	bl	8008498 <SendMessageToModule>
											break;
 80098f2:	f7ff f8ed 	bl	8008ad0 <PxMessagingTask+0xb4>
											messageParams[1] =*(__IO int8_t* )temp32;
 80098f6:	781a      	ldrb	r2, [r3, #0]
 80098f8:	4bb0      	ldr	r3, [pc, #704]	; (8009bbc <PxMessagingTask+0x11a0>)
 80098fa:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 80098fc:	2202      	movs	r2, #2
 80098fe:	211f      	movs	r1, #31
 8009900:	4650      	mov	r0, sl
 8009902:	f7fe fdc9 	bl	8008498 <SendMessageToModule>
											break;
 8009906:	f7ff f8e3 	bl	8008ad0 <PxMessagingTask+0xb4>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800990a:	8819      	ldrh	r1, [r3, #0]
 800990c:	4aab      	ldr	r2, [pc, #684]	; (8009bbc <PxMessagingTask+0x11a0>)
 800990e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	0a1b      	lsrs	r3, r3, #8
 8009914:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8009916:	2203      	movs	r2, #3
 8009918:	211f      	movs	r1, #31
 800991a:	4650      	mov	r0, sl
 800991c:	f7fe fdbc 	bl	8008498 <SendMessageToModule>
											break;
 8009920:	f7ff f8d6 	bl	8008ad0 <PxMessagingTask+0xb4>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8009924:	8819      	ldrh	r1, [r3, #0]
 8009926:	4aa5      	ldr	r2, [pc, #660]	; (8009bbc <PxMessagingTask+0x11a0>)
 8009928:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	b21b      	sxth	r3, r3
 800992e:	121b      	asrs	r3, r3, #8
 8009930:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8009932:	2203      	movs	r2, #3
 8009934:	211f      	movs	r1, #31
 8009936:	4650      	mov	r0, sl
 8009938:	f7fe fdae 	bl	8008498 <SendMessageToModule>
											break;
 800993c:	f7ff f8c8 	bl	8008ad0 <PxMessagingTask+0xb4>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8009940:	6819      	ldr	r1, [r3, #0]
 8009942:	4a9e      	ldr	r2, [pc, #632]	; (8009bbc <PxMessagingTask+0x11a0>)
 8009944:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009946:	6819      	ldr	r1, [r3, #0]
 8009948:	0a09      	lsrs	r1, r1, #8
 800994a:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800994c:	6819      	ldr	r1, [r3, #0]
 800994e:	0c09      	lsrs	r1, r1, #16
 8009950:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	0e1b      	lsrs	r3, r3, #24
 8009956:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8009958:	2205      	movs	r2, #5
 800995a:	211f      	movs	r1, #31
 800995c:	4650      	mov	r0, sl
 800995e:	f7fe fd9b 	bl	8008498 <SendMessageToModule>
											break;
 8009962:	f7ff f8b5 	bl	8008ad0 <PxMessagingTask+0xb4>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009966:	6819      	ldr	r1, [r3, #0]
 8009968:	4a94      	ldr	r2, [pc, #592]	; (8009bbc <PxMessagingTask+0x11a0>)
 800996a:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800996c:	6819      	ldr	r1, [r3, #0]
 800996e:	1209      	asrs	r1, r1, #8
 8009970:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009972:	6819      	ldr	r1, [r3, #0]
 8009974:	1409      	asrs	r1, r1, #16
 8009976:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	0e1b      	lsrs	r3, r3, #24
 800997c:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800997e:	2205      	movs	r2, #5
 8009980:	211f      	movs	r1, #31
 8009982:	4650      	mov	r0, sl
 8009984:	f7fe fd88 	bl	8008498 <SendMessageToModule>
											break;
 8009988:	f7ff f8a2 	bl	8008ad0 <PxMessagingTask+0xb4>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800998c:	7819      	ldrb	r1, [r3, #0]
 800998e:	4a8b      	ldr	r2, [pc, #556]	; (8009bbc <PxMessagingTask+0x11a0>)
 8009990:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009992:	7859      	ldrb	r1, [r3, #1]
 8009994:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8009996:	7899      	ldrb	r1, [r3, #2]
 8009998:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800999a:	78db      	ldrb	r3, [r3, #3]
 800999c:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800999e:	2209      	movs	r2, #9
 80099a0:	211f      	movs	r1, #31
 80099a2:	4650      	mov	r0, sl
 80099a4:	f7fe fd78 	bl	8008498 <SendMessageToModule>
											break;
 80099a8:	f7ff f892 	bl	8008ad0 <PxMessagingTask+0xb4>
									SendMessageToModule(src,
 80099ac:	3201      	adds	r2, #1
 80099ae:	211f      	movs	r1, #31
 80099b0:	4650      	mov	r0, sl
 80099b2:	f7fe fd71 	bl	8008498 <SendMessageToModule>
 80099b6:	f7ff f88b 	bl	8008ad0 <PxMessagingTask+0xb4>
											messageParams[1] =*(__IO uint8_t* )temp32;
 80099ba:	781a      	ldrb	r2, [r3, #0]
 80099bc:	4b7f      	ldr	r3, [pc, #508]	; (8009bbc <PxMessagingTask+0x11a0>)
 80099be:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 80099c0:	2202      	movs	r2, #2
 80099c2:	211f      	movs	r1, #31
 80099c4:	4650      	mov	r0, sl
 80099c6:	f7fe fd67 	bl	8008498 <SendMessageToModule>
											break;
 80099ca:	f7ff f881 	bl	8008ad0 <PxMessagingTask+0xb4>
											messageParams[1] =*(__IO int8_t* )temp32;
 80099ce:	781a      	ldrb	r2, [r3, #0]
 80099d0:	4b7a      	ldr	r3, [pc, #488]	; (8009bbc <PxMessagingTask+0x11a0>)
 80099d2:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 80099d4:	2202      	movs	r2, #2
 80099d6:	211f      	movs	r1, #31
 80099d8:	4650      	mov	r0, sl
 80099da:	f7fe fd5d 	bl	8008498 <SendMessageToModule>
											break;
 80099de:	f7ff f877 	bl	8008ad0 <PxMessagingTask+0xb4>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80099e2:	8819      	ldrh	r1, [r3, #0]
 80099e4:	4a75      	ldr	r2, [pc, #468]	; (8009bbc <PxMessagingTask+0x11a0>)
 80099e6:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80099e8:	881b      	ldrh	r3, [r3, #0]
 80099ea:	0a1b      	lsrs	r3, r3, #8
 80099ec:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 80099ee:	2203      	movs	r2, #3
 80099f0:	211f      	movs	r1, #31
 80099f2:	4650      	mov	r0, sl
 80099f4:	f7fe fd50 	bl	8008498 <SendMessageToModule>
											break;
 80099f8:	f7ff f86a 	bl	8008ad0 <PxMessagingTask+0xb4>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 80099fc:	8819      	ldrh	r1, [r3, #0]
 80099fe:	4a6f      	ldr	r2, [pc, #444]	; (8009bbc <PxMessagingTask+0x11a0>)
 8009a00:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009a02:	881b      	ldrh	r3, [r3, #0]
 8009a04:	b21b      	sxth	r3, r3
 8009a06:	121b      	asrs	r3, r3, #8
 8009a08:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8009a0a:	2203      	movs	r2, #3
 8009a0c:	211f      	movs	r1, #31
 8009a0e:	4650      	mov	r0, sl
 8009a10:	f7fe fd42 	bl	8008498 <SendMessageToModule>
											break;
 8009a14:	f7ff f85c 	bl	8008ad0 <PxMessagingTask+0xb4>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8009a18:	6819      	ldr	r1, [r3, #0]
 8009a1a:	4a68      	ldr	r2, [pc, #416]	; (8009bbc <PxMessagingTask+0x11a0>)
 8009a1c:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009a1e:	6819      	ldr	r1, [r3, #0]
 8009a20:	0a09      	lsrs	r1, r1, #8
 8009a22:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009a24:	6819      	ldr	r1, [r3, #0]
 8009a26:	0c09      	lsrs	r1, r1, #16
 8009a28:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	0e1b      	lsrs	r3, r3, #24
 8009a2e:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8009a30:	2205      	movs	r2, #5
 8009a32:	211f      	movs	r1, #31
 8009a34:	4650      	mov	r0, sl
 8009a36:	f7fe fd2f 	bl	8008498 <SendMessageToModule>
											break;
 8009a3a:	f7ff f849 	bl	8008ad0 <PxMessagingTask+0xb4>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009a3e:	6819      	ldr	r1, [r3, #0]
 8009a40:	4a5e      	ldr	r2, [pc, #376]	; (8009bbc <PxMessagingTask+0x11a0>)
 8009a42:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009a44:	6819      	ldr	r1, [r3, #0]
 8009a46:	1209      	asrs	r1, r1, #8
 8009a48:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009a4a:	6819      	ldr	r1, [r3, #0]
 8009a4c:	1409      	asrs	r1, r1, #16
 8009a4e:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	0e1b      	lsrs	r3, r3, #24
 8009a54:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8009a56:	2205      	movs	r2, #5
 8009a58:	211f      	movs	r1, #31
 8009a5a:	4650      	mov	r0, sl
 8009a5c:	f7fe fd1c 	bl	8008498 <SendMessageToModule>
											break;
 8009a60:	f7ff f836 	bl	8008ad0 <PxMessagingTask+0xb4>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 8009a64:	781a      	ldrb	r2, [r3, #0]
 8009a66:	4b55      	ldr	r3, [pc, #340]	; (8009bbc <PxMessagingTask+0x11a0>)
 8009a68:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009a6a:	4a5a      	ldr	r2, [pc, #360]	; (8009bd4 <PxMessagingTask+0x11b8>)
 8009a6c:	188a      	adds	r2, r1, r2
 8009a6e:	7812      	ldrb	r2, [r2, #0]
 8009a70:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8009a72:	4a59      	ldr	r2, [pc, #356]	; (8009bd8 <PxMessagingTask+0x11bc>)
 8009a74:	188a      	adds	r2, r1, r2
 8009a76:	7812      	ldrb	r2, [r2, #0]
 8009a78:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009a7a:	4a58      	ldr	r2, [pc, #352]	; (8009bdc <PxMessagingTask+0x11c0>)
 8009a7c:	4694      	mov	ip, r2
 8009a7e:	4461      	add	r1, ip
 8009a80:	780a      	ldrb	r2, [r1, #0]
 8009a82:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 8009a84:	2209      	movs	r2, #9
 8009a86:	211f      	movs	r1, #31
 8009a88:	4650      	mov	r0, sl
 8009a8a:	f7fe fd05 	bl	8008498 <SendMessageToModule>
											break;
 8009a8e:	f7ff f81f 	bl	8008ad0 <PxMessagingTask+0xb4>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009a92:	4b53      	ldr	r3, [pc, #332]	; (8009be0 <PxMessagingTask+0x11c4>)
 8009a94:	6818      	ldr	r0, [r3, #0]
 8009a96:	6859      	ldr	r1, [r3, #4]
 8009a98:	2202      	movs	r2, #2
 8009a9a:	4252      	negs	r2, r2
 8009a9c:	17d3      	asrs	r3, r2, #31
 8009a9e:	1812      	adds	r2, r2, r0
 8009aa0:	414b      	adcs	r3, r1
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d014      	beq.n	8009ad0 <PxMessagingTask+0x10b4>
							else if(remoteBuffer == REMOTE_MEMORY_ADD) // We requested a memory location
 8009aa6:	0003      	movs	r3, r0
 8009aa8:	430b      	orrs	r3, r1
 8009aaa:	d126      	bne.n	8009afa <PxMessagingTask+0x10de>
								switch(remoteBuffer) // Requested format
 8009aac:	2601      	movs	r6, #1
 8009aae:	4276      	negs	r6, r6
 8009ab0:	17f7      	asrs	r7, r6, #31
 8009ab2:	1836      	adds	r6, r6, r0
 8009ab4:	414f      	adcs	r7, r1
 8009ab6:	2207      	movs	r2, #7
 8009ab8:	2300      	movs	r3, #0
 8009aba:	0030      	movs	r0, r6
 8009abc:	0039      	movs	r1, r7
 8009abe:	f7f6 fd35 	bl	800052c <__aeabi_ulcmp>
 8009ac2:	3001      	adds	r0, #1
 8009ac4:	2801      	cmp	r0, #1
 8009ac6:	d818      	bhi.n	8009afa <PxMessagingTask+0x10de>
 8009ac8:	00b6      	lsls	r6, r6, #2
 8009aca:	4b46      	ldr	r3, [pc, #280]	; (8009be4 <PxMessagingTask+0x11c8>)
 8009acc:	599b      	ldr	r3, [r3, r6]
 8009ace:	469f      	mov	pc, r3
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d101      	bne.n	8009ad8 <PxMessagingTask+0x10bc>
 8009ad4:	2a01      	cmp	r2, #1
 8009ad6:	d8e6      	bhi.n	8009aa6 <PxMessagingTask+0x108a>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 8009ad8:	2238      	movs	r2, #56	; 0x38
 8009ada:	4362      	muls	r2, r4
 8009adc:	4b3a      	ldr	r3, [pc, #232]	; (8009bc8 <PxMessagingTask+0x11ac>)
 8009ade:	189b      	adds	r3, r3, r2
 8009ae0:	4642      	mov	r2, r8
 8009ae2:	5c9b      	ldrb	r3, [r3, r2]
 8009ae4:	4a40      	ldr	r2, [pc, #256]	; (8009be8 <PxMessagingTask+0x11cc>)
 8009ae6:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 8009ae8:	2b08      	cmp	r3, #8
 8009aea:	d806      	bhi.n	8009afa <PxMessagingTask+0x10de>
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4a3f      	ldr	r2, [pc, #252]	; (8009bec <PxMessagingTask+0x11d0>)
 8009af0:	58d3      	ldr	r3, [r2, r3]
 8009af2:	469f      	mov	pc, r3
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 8009af4:	4b3e      	ldr	r3, [pc, #248]	; (8009bf0 <PxMessagingTask+0x11d4>)
 8009af6:	2210      	movs	r2, #16
 8009af8:	701a      	strb	r2, [r3, #0]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 8009afa:	4b3d      	ldr	r3, [pc, #244]	; (8009bf0 <PxMessagingTask+0x11d4>)
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b10      	cmp	r3, #16
 8009b00:	d101      	bne.n	8009b06 <PxMessagingTask+0x10ea>
 8009b02:	f7fe ffe5 	bl	8008ad0 <PxMessagingTask+0xb4>
								responseStatus =BOS_OK;
 8009b06:	4b3a      	ldr	r3, [pc, #232]	; (8009bf0 <PxMessagingTask+0x11d4>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	701a      	strb	r2, [r3, #0]
 8009b0c:	f7fe ffe0 	bl	8008ad0 <PxMessagingTask+0xb4>
										remoteBuffer =cMessage[port - 1][1 + shift];
 8009b10:	4641      	mov	r1, r8
 8009b12:	3101      	adds	r1, #1
 8009b14:	2238      	movs	r2, #56	; 0x38
 8009b16:	4362      	muls	r2, r4
 8009b18:	4b2b      	ldr	r3, [pc, #172]	; (8009bc8 <PxMessagingTask+0x11ac>)
 8009b1a:	189b      	adds	r3, r3, r2
 8009b1c:	5c5a      	ldrb	r2, [r3, r1]
 8009b1e:	4b30      	ldr	r3, [pc, #192]	; (8009be0 <PxMessagingTask+0x11c4>)
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	2200      	movs	r2, #0
 8009b24:	605a      	str	r2, [r3, #4]
										break;
 8009b26:	e7e8      	b.n	8009afa <PxMessagingTask+0x10de>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 8009b28:	4641      	mov	r1, r8
 8009b2a:	3101      	adds	r1, #1
 8009b2c:	2238      	movs	r2, #56	; 0x38
 8009b2e:	4362      	muls	r2, r4
 8009b30:	4b25      	ldr	r3, [pc, #148]	; (8009bc8 <PxMessagingTask+0x11ac>)
 8009b32:	189b      	adds	r3, r3, r2
 8009b34:	565a      	ldrsb	r2, [r3, r1]
 8009b36:	17d1      	asrs	r1, r2, #31
 8009b38:	4b29      	ldr	r3, [pc, #164]	; (8009be0 <PxMessagingTask+0x11c4>)
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	6059      	str	r1, [r3, #4]
										break;
 8009b3e:	e7dc      	b.n	8009afa <PxMessagingTask+0x10de>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 8009b40:	4643      	mov	r3, r8
 8009b42:	1c59      	adds	r1, r3, #1
 8009b44:	2238      	movs	r2, #56	; 0x38
 8009b46:	4362      	muls	r2, r4
 8009b48:	4b1f      	ldr	r3, [pc, #124]	; (8009bc8 <PxMessagingTask+0x11ac>)
 8009b4a:	189b      	adds	r3, r3, r2
 8009b4c:	5c5a      	ldrb	r2, [r3, r1]
 8009b4e:	4641      	mov	r1, r8
 8009b50:	3102      	adds	r1, #2
 8009b52:	5c5b      	ldrb	r3, [r3, r1]
 8009b54:	021b      	lsls	r3, r3, #8
 8009b56:	18d3      	adds	r3, r2, r3
 8009b58:	4a21      	ldr	r2, [pc, #132]	; (8009be0 <PxMessagingTask+0x11c4>)
 8009b5a:	6013      	str	r3, [r2, #0]
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	6053      	str	r3, [r2, #4]
										break;
 8009b60:	e7cb      	b.n	8009afa <PxMessagingTask+0x10de>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 8009b62:	4643      	mov	r3, r8
 8009b64:	1c59      	adds	r1, r3, #1
 8009b66:	2238      	movs	r2, #56	; 0x38
 8009b68:	4362      	muls	r2, r4
 8009b6a:	4b17      	ldr	r3, [pc, #92]	; (8009bc8 <PxMessagingTask+0x11ac>)
 8009b6c:	189b      	adds	r3, r3, r2
 8009b6e:	5c5a      	ldrb	r2, [r3, r1]
 8009b70:	4641      	mov	r1, r8
 8009b72:	3102      	adds	r1, #2
 8009b74:	5c5b      	ldrb	r3, [r3, r1]
 8009b76:	021b      	lsls	r3, r3, #8
 8009b78:	18d3      	adds	r3, r2, r3
 8009b7a:	4a19      	ldr	r2, [pc, #100]	; (8009be0 <PxMessagingTask+0x11c4>)
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	2300      	movs	r3, #0
 8009b80:	6053      	str	r3, [r2, #4]
										break;
 8009b82:	e7ba      	b.n	8009afa <PxMessagingTask+0x10de>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009b84:	4643      	mov	r3, r8
 8009b86:	1c59      	adds	r1, r3, #1
 8009b88:	2338      	movs	r3, #56	; 0x38
 8009b8a:	4363      	muls	r3, r4
 8009b8c:	4a0e      	ldr	r2, [pc, #56]	; (8009bc8 <PxMessagingTask+0x11ac>)
 8009b8e:	18d2      	adds	r2, r2, r3
 8009b90:	5c53      	ldrb	r3, [r2, r1]
 8009b92:	4641      	mov	r1, r8
 8009b94:	3102      	adds	r1, #2
 8009b96:	5c51      	ldrb	r1, [r2, r1]
 8009b98:	0209      	lsls	r1, r1, #8
 8009b9a:	185b      	adds	r3, r3, r1
 8009b9c:	4641      	mov	r1, r8
 8009b9e:	3103      	adds	r1, #3
 8009ba0:	5c51      	ldrb	r1, [r2, r1]
 8009ba2:	0409      	lsls	r1, r1, #16
 8009ba4:	185b      	adds	r3, r3, r1
 8009ba6:	4641      	mov	r1, r8
 8009ba8:	3104      	adds	r1, #4
 8009baa:	5c52      	ldrb	r2, [r2, r1]
 8009bac:	0612      	lsls	r2, r2, #24
 8009bae:	189b      	adds	r3, r3, r2
 8009bb0:	4a0b      	ldr	r2, [pc, #44]	; (8009be0 <PxMessagingTask+0x11c4>)
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	6053      	str	r3, [r2, #4]
										break;
 8009bb8:	e79f      	b.n	8009afa <PxMessagingTask+0x10de>
 8009bba:	46c0      	nop			; (mov r8, r8)
 8009bbc:	20000b6c 	.word	0x20000b6c
 8009bc0:	20000c78 	.word	0x20000c78
 8009bc4:	08019b94 	.word	0x08019b94
 8009bc8:	20000d38 	.word	0x20000d38
 8009bcc:	20000094 	.word	0x20000094
 8009bd0:	08019bb4 	.word	0x08019bb4
 8009bd4:	20000001 	.word	0x20000001
 8009bd8:	20000002 	.word	0x20000002
 8009bdc:	20000003 	.word	0x20000003
 8009be0:	20000c70 	.word	0x20000c70
 8009be4:	08019bd4 	.word	0x08019bd4
 8009be8:	20000032 	.word	0x20000032
 8009bec:	08019bf4 	.word	0x08019bf4
 8009bf0:	20000c6c 	.word	0x20000c6c
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 8009bf4:	4643      	mov	r3, r8
 8009bf6:	1c59      	adds	r1, r3, #1
 8009bf8:	2338      	movs	r3, #56	; 0x38
 8009bfa:	4363      	muls	r3, r4
 8009bfc:	4ad5      	ldr	r2, [pc, #852]	; (8009f54 <PxMessagingTask+0x1538>)
 8009bfe:	18d2      	adds	r2, r2, r3
 8009c00:	5c53      	ldrb	r3, [r2, r1]
 8009c02:	4641      	mov	r1, r8
 8009c04:	3102      	adds	r1, #2
 8009c06:	5c51      	ldrb	r1, [r2, r1]
 8009c08:	0209      	lsls	r1, r1, #8
 8009c0a:	185b      	adds	r3, r3, r1
 8009c0c:	4641      	mov	r1, r8
 8009c0e:	3103      	adds	r1, #3
 8009c10:	5c51      	ldrb	r1, [r2, r1]
 8009c12:	0409      	lsls	r1, r1, #16
 8009c14:	185b      	adds	r3, r3, r1
 8009c16:	4641      	mov	r1, r8
 8009c18:	3104      	adds	r1, #4
 8009c1a:	5c52      	ldrb	r2, [r2, r1]
 8009c1c:	0612      	lsls	r2, r2, #24
 8009c1e:	189b      	adds	r3, r3, r2
 8009c20:	17d9      	asrs	r1, r3, #31
 8009c22:	4acd      	ldr	r2, [pc, #820]	; (8009f58 <PxMessagingTask+0x153c>)
 8009c24:	6013      	str	r3, [r2, #0]
 8009c26:	6051      	str	r1, [r2, #4]
										break;
 8009c28:	e767      	b.n	8009afa <PxMessagingTask+0x10de>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009c2a:	4643      	mov	r3, r8
 8009c2c:	1c59      	adds	r1, r3, #1
 8009c2e:	2338      	movs	r3, #56	; 0x38
 8009c30:	4363      	muls	r3, r4
 8009c32:	4ac8      	ldr	r2, [pc, #800]	; (8009f54 <PxMessagingTask+0x1538>)
 8009c34:	18d2      	adds	r2, r2, r3
 8009c36:	5c53      	ldrb	r3, [r2, r1]
 8009c38:	4641      	mov	r1, r8
 8009c3a:	3102      	adds	r1, #2
 8009c3c:	5c51      	ldrb	r1, [r2, r1]
 8009c3e:	0209      	lsls	r1, r1, #8
 8009c40:	185b      	adds	r3, r3, r1
 8009c42:	4641      	mov	r1, r8
 8009c44:	3103      	adds	r1, #3
 8009c46:	5c51      	ldrb	r1, [r2, r1]
 8009c48:	0409      	lsls	r1, r1, #16
 8009c4a:	185b      	adds	r3, r3, r1
 8009c4c:	4641      	mov	r1, r8
 8009c4e:	3104      	adds	r1, #4
 8009c50:	5c52      	ldrb	r2, [r2, r1]
 8009c52:	0612      	lsls	r2, r2, #24
 8009c54:	189b      	adds	r3, r3, r2
 8009c56:	4ac0      	ldr	r2, [pc, #768]	; (8009f58 <PxMessagingTask+0x153c>)
 8009c58:	6013      	str	r3, [r2, #0]
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	6053      	str	r3, [r2, #4]
										break;
 8009c5e:	e74c      	b.n	8009afa <PxMessagingTask+0x10de>
										remoteBuffer =cMessage[port - 1][shift];
 8009c60:	2238      	movs	r2, #56	; 0x38
 8009c62:	4362      	muls	r2, r4
 8009c64:	4bbb      	ldr	r3, [pc, #748]	; (8009f54 <PxMessagingTask+0x1538>)
 8009c66:	189b      	adds	r3, r3, r2
 8009c68:	4642      	mov	r2, r8
 8009c6a:	5c9a      	ldrb	r2, [r3, r2]
 8009c6c:	4bba      	ldr	r3, [pc, #744]	; (8009f58 <PxMessagingTask+0x153c>)
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	2200      	movs	r2, #0
 8009c72:	605a      	str	r2, [r3, #4]
										break;
 8009c74:	e741      	b.n	8009afa <PxMessagingTask+0x10de>
										remoteBuffer =(int8_t )cMessage[port - 1][shift];
 8009c76:	2238      	movs	r2, #56	; 0x38
 8009c78:	4362      	muls	r2, r4
 8009c7a:	4bb6      	ldr	r3, [pc, #728]	; (8009f54 <PxMessagingTask+0x1538>)
 8009c7c:	189b      	adds	r3, r3, r2
 8009c7e:	4642      	mov	r2, r8
 8009c80:	569a      	ldrsb	r2, [r3, r2]
 8009c82:	17d1      	asrs	r1, r2, #31
 8009c84:	4bb4      	ldr	r3, [pc, #720]	; (8009f58 <PxMessagingTask+0x153c>)
 8009c86:	601a      	str	r2, [r3, #0]
 8009c88:	6059      	str	r1, [r3, #4]
										break;
 8009c8a:	e736      	b.n	8009afa <PxMessagingTask+0x10de>
										remoteBuffer =((uint16_t )cMessage[port - 1][shift] << 0) + ((uint16_t )cMessage[port - 1][1 + shift] << 8);
 8009c8c:	2238      	movs	r2, #56	; 0x38
 8009c8e:	4362      	muls	r2, r4
 8009c90:	4bb0      	ldr	r3, [pc, #704]	; (8009f54 <PxMessagingTask+0x1538>)
 8009c92:	189b      	adds	r3, r3, r2
 8009c94:	4642      	mov	r2, r8
 8009c96:	5c9a      	ldrb	r2, [r3, r2]
 8009c98:	4641      	mov	r1, r8
 8009c9a:	3101      	adds	r1, #1
 8009c9c:	5c5b      	ldrb	r3, [r3, r1]
 8009c9e:	021b      	lsls	r3, r3, #8
 8009ca0:	18d3      	adds	r3, r2, r3
 8009ca2:	4aad      	ldr	r2, [pc, #692]	; (8009f58 <PxMessagingTask+0x153c>)
 8009ca4:	6013      	str	r3, [r2, #0]
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	6053      	str	r3, [r2, #4]
										break;
 8009caa:	e726      	b.n	8009afa <PxMessagingTask+0x10de>
										remoteBuffer =((int16_t )cMessage[port - 1][shift] << 0) + ((int16_t )cMessage[port - 1][1 + shift] << 8);
 8009cac:	2238      	movs	r2, #56	; 0x38
 8009cae:	4362      	muls	r2, r4
 8009cb0:	4ba8      	ldr	r3, [pc, #672]	; (8009f54 <PxMessagingTask+0x1538>)
 8009cb2:	189b      	adds	r3, r3, r2
 8009cb4:	4642      	mov	r2, r8
 8009cb6:	5c9a      	ldrb	r2, [r3, r2]
 8009cb8:	4641      	mov	r1, r8
 8009cba:	3101      	adds	r1, #1
 8009cbc:	5c5b      	ldrb	r3, [r3, r1]
 8009cbe:	021b      	lsls	r3, r3, #8
 8009cc0:	18d3      	adds	r3, r2, r3
 8009cc2:	4aa5      	ldr	r2, [pc, #660]	; (8009f58 <PxMessagingTask+0x153c>)
 8009cc4:	6013      	str	r3, [r2, #0]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	6053      	str	r3, [r2, #4]
										break;
 8009cca:	e716      	b.n	8009afa <PxMessagingTask+0x10de>
										remoteBuffer =((uint32_t )cMessage[port - 1][shift] << 0) + ((uint32_t )cMessage[port - 1][1 + shift] << 8) + ((uint32_t )cMessage[port - 1][2 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 24);
 8009ccc:	2338      	movs	r3, #56	; 0x38
 8009cce:	4363      	muls	r3, r4
 8009cd0:	4aa0      	ldr	r2, [pc, #640]	; (8009f54 <PxMessagingTask+0x1538>)
 8009cd2:	18d2      	adds	r2, r2, r3
 8009cd4:	4643      	mov	r3, r8
 8009cd6:	5cd3      	ldrb	r3, [r2, r3]
 8009cd8:	4641      	mov	r1, r8
 8009cda:	3101      	adds	r1, #1
 8009cdc:	5c51      	ldrb	r1, [r2, r1]
 8009cde:	0209      	lsls	r1, r1, #8
 8009ce0:	185b      	adds	r3, r3, r1
 8009ce2:	4641      	mov	r1, r8
 8009ce4:	3102      	adds	r1, #2
 8009ce6:	5c51      	ldrb	r1, [r2, r1]
 8009ce8:	0409      	lsls	r1, r1, #16
 8009cea:	185b      	adds	r3, r3, r1
 8009cec:	4641      	mov	r1, r8
 8009cee:	3103      	adds	r1, #3
 8009cf0:	5c52      	ldrb	r2, [r2, r1]
 8009cf2:	0612      	lsls	r2, r2, #24
 8009cf4:	189b      	adds	r3, r3, r2
 8009cf6:	4a98      	ldr	r2, [pc, #608]	; (8009f58 <PxMessagingTask+0x153c>)
 8009cf8:	6013      	str	r3, [r2, #0]
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	6053      	str	r3, [r2, #4]
										break;
 8009cfe:	e6fc      	b.n	8009afa <PxMessagingTask+0x10de>
										remoteBuffer =((int32_t )cMessage[port - 1][shift] << 0) + ((int32_t )cMessage[port - 1][1 + shift] << 8) + ((int32_t )cMessage[port - 1][2 + shift] << 16) + ((int32_t )cMessage[port - 1][3 + shift] << 24);
 8009d00:	2338      	movs	r3, #56	; 0x38
 8009d02:	4363      	muls	r3, r4
 8009d04:	4a93      	ldr	r2, [pc, #588]	; (8009f54 <PxMessagingTask+0x1538>)
 8009d06:	18d2      	adds	r2, r2, r3
 8009d08:	4643      	mov	r3, r8
 8009d0a:	5cd3      	ldrb	r3, [r2, r3]
 8009d0c:	4641      	mov	r1, r8
 8009d0e:	3101      	adds	r1, #1
 8009d10:	5c51      	ldrb	r1, [r2, r1]
 8009d12:	0209      	lsls	r1, r1, #8
 8009d14:	185b      	adds	r3, r3, r1
 8009d16:	4641      	mov	r1, r8
 8009d18:	3102      	adds	r1, #2
 8009d1a:	5c51      	ldrb	r1, [r2, r1]
 8009d1c:	0409      	lsls	r1, r1, #16
 8009d1e:	185b      	adds	r3, r3, r1
 8009d20:	4641      	mov	r1, r8
 8009d22:	3103      	adds	r1, #3
 8009d24:	5c52      	ldrb	r2, [r2, r1]
 8009d26:	0612      	lsls	r2, r2, #24
 8009d28:	189b      	adds	r3, r3, r2
 8009d2a:	17d9      	asrs	r1, r3, #31
 8009d2c:	4a8a      	ldr	r2, [pc, #552]	; (8009f58 <PxMessagingTask+0x153c>)
 8009d2e:	6013      	str	r3, [r2, #0]
 8009d30:	6051      	str	r1, [r2, #4]
										break;
 8009d32:	e6e2      	b.n	8009afa <PxMessagingTask+0x10de>
										remoteBuffer =((uint32_t )cMessage[port - 1][shift] << 0) + ((uint32_t )cMessage[port - 1][1 + shift] << 8) + ((uint32_t )cMessage[port - 1][2 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 24);
 8009d34:	2338      	movs	r3, #56	; 0x38
 8009d36:	4363      	muls	r3, r4
 8009d38:	4a86      	ldr	r2, [pc, #536]	; (8009f54 <PxMessagingTask+0x1538>)
 8009d3a:	18d2      	adds	r2, r2, r3
 8009d3c:	4643      	mov	r3, r8
 8009d3e:	5cd3      	ldrb	r3, [r2, r3]
 8009d40:	4641      	mov	r1, r8
 8009d42:	3101      	adds	r1, #1
 8009d44:	5c51      	ldrb	r1, [r2, r1]
 8009d46:	0209      	lsls	r1, r1, #8
 8009d48:	185b      	adds	r3, r3, r1
 8009d4a:	4641      	mov	r1, r8
 8009d4c:	3102      	adds	r1, #2
 8009d4e:	5c51      	ldrb	r1, [r2, r1]
 8009d50:	0409      	lsls	r1, r1, #16
 8009d52:	185b      	adds	r3, r3, r1
 8009d54:	4641      	mov	r1, r8
 8009d56:	3103      	adds	r1, #3
 8009d58:	5c52      	ldrb	r2, [r2, r1]
 8009d5a:	0612      	lsls	r2, r2, #24
 8009d5c:	189b      	adds	r3, r3, r2
 8009d5e:	4a7e      	ldr	r2, [pc, #504]	; (8009f58 <PxMessagingTask+0x153c>)
 8009d60:	6013      	str	r3, [r2, #0]
 8009d62:	2300      	movs	r3, #0
 8009d64:	6053      	str	r3, [r2, #4]
										break;
 8009d66:	e6c8      	b.n	8009afa <PxMessagingTask+0x10de>
							responseStatus =BOS_OK; // Initialize response
 8009d68:	4b7c      	ldr	r3, [pc, #496]	; (8009f5c <PxMessagingTask+0x1540>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 8009d6e:	3238      	adds	r2, #56	; 0x38
 8009d70:	4362      	muls	r2, r4
 8009d72:	4b78      	ldr	r3, [pc, #480]	; (8009f54 <PxMessagingTask+0x1538>)
 8009d74:	189b      	adds	r3, r3, r2
 8009d76:	4642      	mov	r2, r8
 8009d78:	5c9f      	ldrb	r7, [r3, r2]
 8009d7a:	2f00      	cmp	r7, #0
 8009d7c:	d100      	bne.n	8009d80 <PxMessagingTask+0x1364>
 8009d7e:	e16d      	b.n	800a05c <PxMessagingTask+0x1640>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 8009d80:	2f1e      	cmp	r7, #30
 8009d82:	d900      	bls.n	8009d86 <PxMessagingTask+0x136a>
 8009d84:	e154      	b.n	800a030 <PxMessagingTask+0x1614>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE+0x10000; // Get var memory addres
 8009d86:	3f01      	subs	r7, #1
 8009d88:	00ba      	lsls	r2, r7, #2
 8009d8a:	4b75      	ldr	r3, [pc, #468]	; (8009f60 <PxMessagingTask+0x1544>)
 8009d8c:	58d1      	ldr	r1, [r2, r3]
 8009d8e:	0c0b      	lsrs	r3, r1, #16
 8009d90:	4a74      	ldr	r2, [pc, #464]	; (8009f64 <PxMessagingTask+0x1548>)
 8009d92:	4694      	mov	ip, r2
 8009d94:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 8009d96:	4642      	mov	r2, r8
 8009d98:	1c56      	adds	r6, r2, #1
 8009d9a:	9604      	str	r6, [sp, #16]
 8009d9c:	2038      	movs	r0, #56	; 0x38
 8009d9e:	4360      	muls	r0, r4
 8009da0:	4a6c      	ldr	r2, [pc, #432]	; (8009f54 <PxMessagingTask+0x1538>)
 8009da2:	1812      	adds	r2, r2, r0
 8009da4:	5d96      	ldrb	r6, [r2, r6]
 8009da6:	1e72      	subs	r2, r6, #1
 8009da8:	b2d0      	uxtb	r0, r2
 8009daa:	2807      	cmp	r0, #7
 8009dac:	d812      	bhi.n	8009dd4 <PxMessagingTask+0x13b8>
 8009dae:	b2d2      	uxtb	r2, r2
 8009db0:	0092      	lsls	r2, r2, #2
 8009db2:	486d      	ldr	r0, [pc, #436]	; (8009f68 <PxMessagingTask+0x154c>)
 8009db4:	5882      	ldr	r2, [r0, r2]
 8009db6:	4697      	mov	pc, r2
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009db8:	070a      	lsls	r2, r1, #28
 8009dba:	d027      	beq.n	8009e0c <PxMessagingTask+0x13f0>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009dbc:	4a67      	ldr	r2, [pc, #412]	; (8009f5c <PxMessagingTask+0x1540>)
 8009dbe:	7812      	ldrb	r2, [r2, #0]
 8009dc0:	2a12      	cmp	r2, #18
 8009dc2:	d007      	beq.n	8009dd4 <PxMessagingTask+0x13b8>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 8009dc4:	4642      	mov	r2, r8
 8009dc6:	3202      	adds	r2, #2
 8009dc8:	2038      	movs	r0, #56	; 0x38
 8009dca:	4360      	muls	r0, r4
 8009dcc:	4961      	ldr	r1, [pc, #388]	; (8009f54 <PxMessagingTask+0x1538>)
 8009dce:	1809      	adds	r1, r1, r0
 8009dd0:	5c8a      	ldrb	r2, [r1, r2]
 8009dd2:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009dd4:	2338      	movs	r3, #56	; 0x38
 8009dd6:	4363      	muls	r3, r4
 8009dd8:	4a5e      	ldr	r2, [pc, #376]	; (8009f54 <PxMessagingTask+0x1538>)
 8009dda:	18d3      	adds	r3, r2, r3
 8009ddc:	4642      	mov	r2, r8
 8009dde:	5c9a      	ldrb	r2, [r3, r2]
 8009de0:	3a01      	subs	r2, #1
 8009de2:	0090      	lsls	r0, r2, #2
 8009de4:	495e      	ldr	r1, [pc, #376]	; (8009f60 <PxMessagingTask+0x1544>)
 8009de6:	5841      	ldr	r1, [r0, r1]
 8009de8:	200f      	movs	r0, #15
 8009dea:	4008      	ands	r0, r1
 8009dec:	9e04      	ldr	r6, [sp, #16]
 8009dee:	5d9b      	ldrb	r3, [r3, r6]
 8009df0:	4298      	cmp	r0, r3
 8009df2:	d100      	bne.n	8009df6 <PxMessagingTask+0x13da>
 8009df4:	e11f      	b.n	800a036 <PxMessagingTask+0x161a>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 8009df6:	485d      	ldr	r0, [pc, #372]	; (8009f6c <PxMessagingTask+0x1550>)
 8009df8:	4684      	mov	ip, r0
 8009dfa:	4463      	add	r3, ip
 8009dfc:	0092      	lsls	r2, r2, #2
 8009dfe:	400b      	ands	r3, r1
 8009e00:	4957      	ldr	r1, [pc, #348]	; (8009f60 <PxMessagingTask+0x1544>)
 8009e02:	5053      	str	r3, [r2, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 8009e04:	4b55      	ldr	r3, [pc, #340]	; (8009f5c <PxMessagingTask+0x1540>)
 8009e06:	2214      	movs	r2, #20
 8009e08:	701a      	strb	r2, [r3, #0]
 8009e0a:	e114      	b.n	800a036 <PxMessagingTask+0x161a>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 8009e0c:	2001      	movs	r0, #1
 8009e0e:	f009 f92b 	bl	8013068 <malloc>
 8009e12:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009e14:	d005      	beq.n	8009e22 <PxMessagingTask+0x1406>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009e16:	0400      	lsls	r0, r0, #16
 8009e18:	1986      	adds	r6, r0, r6
 8009e1a:	00bf      	lsls	r7, r7, #2
 8009e1c:	4a50      	ldr	r2, [pc, #320]	; (8009f60 <PxMessagingTask+0x1544>)
 8009e1e:	50be      	str	r6, [r7, r2]
 8009e20:	e7cc      	b.n	8009dbc <PxMessagingTask+0x13a0>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009e22:	4a4e      	ldr	r2, [pc, #312]	; (8009f5c <PxMessagingTask+0x1540>)
 8009e24:	2112      	movs	r1, #18
 8009e26:	7011      	strb	r1, [r2, #0]
 8009e28:	e7c8      	b.n	8009dbc <PxMessagingTask+0x13a0>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009e2a:	070a      	lsls	r2, r1, #28
 8009e2c:	d00c      	beq.n	8009e48 <PxMessagingTask+0x142c>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009e2e:	4a4b      	ldr	r2, [pc, #300]	; (8009f5c <PxMessagingTask+0x1540>)
 8009e30:	7812      	ldrb	r2, [r2, #0]
 8009e32:	2a12      	cmp	r2, #18
 8009e34:	d0ce      	beq.n	8009dd4 <PxMessagingTask+0x13b8>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 8009e36:	4642      	mov	r2, r8
 8009e38:	3202      	adds	r2, #2
 8009e3a:	2038      	movs	r0, #56	; 0x38
 8009e3c:	4360      	muls	r0, r4
 8009e3e:	4945      	ldr	r1, [pc, #276]	; (8009f54 <PxMessagingTask+0x1538>)
 8009e40:	1809      	adds	r1, r1, r0
 8009e42:	568a      	ldrsb	r2, [r1, r2]
 8009e44:	701a      	strb	r2, [r3, #0]
 8009e46:	e7c5      	b.n	8009dd4 <PxMessagingTask+0x13b8>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 8009e48:	2001      	movs	r0, #1
 8009e4a:	f009 f90d 	bl	8013068 <malloc>
 8009e4e:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009e50:	d005      	beq.n	8009e5e <PxMessagingTask+0x1442>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009e52:	0400      	lsls	r0, r0, #16
 8009e54:	1986      	adds	r6, r0, r6
 8009e56:	00bf      	lsls	r7, r7, #2
 8009e58:	4a41      	ldr	r2, [pc, #260]	; (8009f60 <PxMessagingTask+0x1544>)
 8009e5a:	50be      	str	r6, [r7, r2]
 8009e5c:	e7e7      	b.n	8009e2e <PxMessagingTask+0x1412>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009e5e:	4a3f      	ldr	r2, [pc, #252]	; (8009f5c <PxMessagingTask+0x1540>)
 8009e60:	2112      	movs	r1, #18
 8009e62:	7011      	strb	r1, [r2, #0]
 8009e64:	e7e3      	b.n	8009e2e <PxMessagingTask+0x1412>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009e66:	070a      	lsls	r2, r1, #28
 8009e68:	d012      	beq.n	8009e90 <PxMessagingTask+0x1474>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009e6a:	4a3c      	ldr	r2, [pc, #240]	; (8009f5c <PxMessagingTask+0x1540>)
 8009e6c:	7812      	ldrb	r2, [r2, #0]
 8009e6e:	2a12      	cmp	r2, #18
 8009e70:	d0b0      	beq.n	8009dd4 <PxMessagingTask+0x13b8>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 8009e72:	4642      	mov	r2, r8
 8009e74:	3202      	adds	r2, #2
 8009e76:	2138      	movs	r1, #56	; 0x38
 8009e78:	4361      	muls	r1, r4
 8009e7a:	4836      	ldr	r0, [pc, #216]	; (8009f54 <PxMessagingTask+0x1538>)
 8009e7c:	1841      	adds	r1, r0, r1
 8009e7e:	5c8a      	ldrb	r2, [r1, r2]
 8009e80:	4640      	mov	r0, r8
 8009e82:	3003      	adds	r0, #3
 8009e84:	5c09      	ldrb	r1, [r1, r0]
 8009e86:	0209      	lsls	r1, r1, #8
 8009e88:	1852      	adds	r2, r2, r1
 8009e8a:	b292      	uxth	r2, r2
 8009e8c:	801a      	strh	r2, [r3, #0]
 8009e8e:	e7a1      	b.n	8009dd4 <PxMessagingTask+0x13b8>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 8009e90:	2002      	movs	r0, #2
 8009e92:	f009 f8e9 	bl	8013068 <malloc>
 8009e96:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009e98:	d005      	beq.n	8009ea6 <PxMessagingTask+0x148a>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009e9a:	0400      	lsls	r0, r0, #16
 8009e9c:	1986      	adds	r6, r0, r6
 8009e9e:	00bf      	lsls	r7, r7, #2
 8009ea0:	4a2f      	ldr	r2, [pc, #188]	; (8009f60 <PxMessagingTask+0x1544>)
 8009ea2:	50be      	str	r6, [r7, r2]
 8009ea4:	e7e1      	b.n	8009e6a <PxMessagingTask+0x144e>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009ea6:	4a2d      	ldr	r2, [pc, #180]	; (8009f5c <PxMessagingTask+0x1540>)
 8009ea8:	2112      	movs	r1, #18
 8009eaa:	7011      	strb	r1, [r2, #0]
 8009eac:	e7dd      	b.n	8009e6a <PxMessagingTask+0x144e>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009eae:	070a      	lsls	r2, r1, #28
 8009eb0:	d012      	beq.n	8009ed8 <PxMessagingTask+0x14bc>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009eb2:	4a2a      	ldr	r2, [pc, #168]	; (8009f5c <PxMessagingTask+0x1540>)
 8009eb4:	7812      	ldrb	r2, [r2, #0]
 8009eb6:	2a12      	cmp	r2, #18
 8009eb8:	d08c      	beq.n	8009dd4 <PxMessagingTask+0x13b8>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 8009eba:	4642      	mov	r2, r8
 8009ebc:	3202      	adds	r2, #2
 8009ebe:	2138      	movs	r1, #56	; 0x38
 8009ec0:	4361      	muls	r1, r4
 8009ec2:	4824      	ldr	r0, [pc, #144]	; (8009f54 <PxMessagingTask+0x1538>)
 8009ec4:	1841      	adds	r1, r0, r1
 8009ec6:	5c8a      	ldrb	r2, [r1, r2]
 8009ec8:	4640      	mov	r0, r8
 8009eca:	3003      	adds	r0, #3
 8009ecc:	5c09      	ldrb	r1, [r1, r0]
 8009ece:	0209      	lsls	r1, r1, #8
 8009ed0:	1852      	adds	r2, r2, r1
 8009ed2:	b212      	sxth	r2, r2
 8009ed4:	801a      	strh	r2, [r3, #0]
 8009ed6:	e77d      	b.n	8009dd4 <PxMessagingTask+0x13b8>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 8009ed8:	2002      	movs	r0, #2
 8009eda:	f009 f8c5 	bl	8013068 <malloc>
 8009ede:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009ee0:	d005      	beq.n	8009eee <PxMessagingTask+0x14d2>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009ee2:	0400      	lsls	r0, r0, #16
 8009ee4:	1986      	adds	r6, r0, r6
 8009ee6:	00bf      	lsls	r7, r7, #2
 8009ee8:	4a1d      	ldr	r2, [pc, #116]	; (8009f60 <PxMessagingTask+0x1544>)
 8009eea:	50be      	str	r6, [r7, r2]
 8009eec:	e7e1      	b.n	8009eb2 <PxMessagingTask+0x1496>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009eee:	4a1b      	ldr	r2, [pc, #108]	; (8009f5c <PxMessagingTask+0x1540>)
 8009ef0:	2112      	movs	r1, #18
 8009ef2:	7011      	strb	r1, [r2, #0]
 8009ef4:	e7dd      	b.n	8009eb2 <PxMessagingTask+0x1496>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009ef6:	070a      	lsls	r2, r1, #28
 8009ef8:	d01c      	beq.n	8009f34 <PxMessagingTask+0x1518>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009efa:	4a18      	ldr	r2, [pc, #96]	; (8009f5c <PxMessagingTask+0x1540>)
 8009efc:	7812      	ldrb	r2, [r2, #0]
 8009efe:	2a12      	cmp	r2, #18
 8009f00:	d100      	bne.n	8009f04 <PxMessagingTask+0x14e8>
 8009f02:	e767      	b.n	8009dd4 <PxMessagingTask+0x13b8>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009f04:	4642      	mov	r2, r8
 8009f06:	3202      	adds	r2, #2
 8009f08:	2138      	movs	r1, #56	; 0x38
 8009f0a:	4361      	muls	r1, r4
 8009f0c:	4811      	ldr	r0, [pc, #68]	; (8009f54 <PxMessagingTask+0x1538>)
 8009f0e:	1841      	adds	r1, r0, r1
 8009f10:	5c8e      	ldrb	r6, [r1, r2]
 8009f12:	4642      	mov	r2, r8
 8009f14:	3203      	adds	r2, #3
 8009f16:	5c88      	ldrb	r0, [r1, r2]
 8009f18:	0200      	lsls	r0, r0, #8
 8009f1a:	1836      	adds	r6, r6, r0
 8009f1c:	4642      	mov	r2, r8
 8009f1e:	3204      	adds	r2, #4
 8009f20:	5c8a      	ldrb	r2, [r1, r2]
 8009f22:	0412      	lsls	r2, r2, #16
 8009f24:	18b2      	adds	r2, r6, r2
 8009f26:	4640      	mov	r0, r8
 8009f28:	3005      	adds	r0, #5
 8009f2a:	5c09      	ldrb	r1, [r1, r0]
 8009f2c:	0609      	lsls	r1, r1, #24
 8009f2e:	1852      	adds	r2, r2, r1
 8009f30:	601a      	str	r2, [r3, #0]
 8009f32:	e74f      	b.n	8009dd4 <PxMessagingTask+0x13b8>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 8009f34:	2004      	movs	r0, #4
 8009f36:	f009 f897 	bl	8013068 <malloc>
 8009f3a:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009f3c:	d005      	beq.n	8009f4a <PxMessagingTask+0x152e>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009f3e:	0400      	lsls	r0, r0, #16
 8009f40:	1986      	adds	r6, r0, r6
 8009f42:	00bf      	lsls	r7, r7, #2
 8009f44:	4a06      	ldr	r2, [pc, #24]	; (8009f60 <PxMessagingTask+0x1544>)
 8009f46:	50be      	str	r6, [r7, r2]
 8009f48:	e7d7      	b.n	8009efa <PxMessagingTask+0x14de>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009f4a:	4a04      	ldr	r2, [pc, #16]	; (8009f5c <PxMessagingTask+0x1540>)
 8009f4c:	2112      	movs	r1, #18
 8009f4e:	7011      	strb	r1, [r2, #0]
 8009f50:	e7d3      	b.n	8009efa <PxMessagingTask+0x14de>
 8009f52:	46c0      	nop			; (mov r8, r8)
 8009f54:	20000d38 	.word	0x20000d38
 8009f58:	20000c70 	.word	0x20000c70
 8009f5c:	20000c6c 	.word	0x20000c6c
 8009f60:	20000c78 	.word	0x20000c78
 8009f64:	20010000 	.word	0x20010000
 8009f68:	08019c18 	.word	0x08019c18
 8009f6c:	0000fff0 	.word	0x0000fff0
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009f70:	070a      	lsls	r2, r1, #28
 8009f72:	d01c      	beq.n	8009fae <PxMessagingTask+0x1592>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009f74:	4ad9      	ldr	r2, [pc, #868]	; (800a2dc <PxMessagingTask+0x18c0>)
 8009f76:	7812      	ldrb	r2, [r2, #0]
 8009f78:	2a12      	cmp	r2, #18
 8009f7a:	d100      	bne.n	8009f7e <PxMessagingTask+0x1562>
 8009f7c:	e72a      	b.n	8009dd4 <PxMessagingTask+0x13b8>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 8009f7e:	4642      	mov	r2, r8
 8009f80:	3202      	adds	r2, #2
 8009f82:	2138      	movs	r1, #56	; 0x38
 8009f84:	4361      	muls	r1, r4
 8009f86:	48d6      	ldr	r0, [pc, #856]	; (800a2e0 <PxMessagingTask+0x18c4>)
 8009f88:	1841      	adds	r1, r0, r1
 8009f8a:	5c88      	ldrb	r0, [r1, r2]
 8009f8c:	4642      	mov	r2, r8
 8009f8e:	3203      	adds	r2, #3
 8009f90:	5c8a      	ldrb	r2, [r1, r2]
 8009f92:	0212      	lsls	r2, r2, #8
 8009f94:	1880      	adds	r0, r0, r2
 8009f96:	4642      	mov	r2, r8
 8009f98:	3204      	adds	r2, #4
 8009f9a:	5c8a      	ldrb	r2, [r1, r2]
 8009f9c:	0412      	lsls	r2, r2, #16
 8009f9e:	1882      	adds	r2, r0, r2
 8009fa0:	4640      	mov	r0, r8
 8009fa2:	3005      	adds	r0, #5
 8009fa4:	5c09      	ldrb	r1, [r1, r0]
 8009fa6:	0609      	lsls	r1, r1, #24
 8009fa8:	1852      	adds	r2, r2, r1
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	e712      	b.n	8009dd4 <PxMessagingTask+0x13b8>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 8009fae:	2004      	movs	r0, #4
 8009fb0:	f009 f85a 	bl	8013068 <malloc>
 8009fb4:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009fb6:	d005      	beq.n	8009fc4 <PxMessagingTask+0x15a8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009fb8:	0400      	lsls	r0, r0, #16
 8009fba:	1986      	adds	r6, r0, r6
 8009fbc:	00bf      	lsls	r7, r7, #2
 8009fbe:	4ac9      	ldr	r2, [pc, #804]	; (800a2e4 <PxMessagingTask+0x18c8>)
 8009fc0:	50be      	str	r6, [r7, r2]
 8009fc2:	e7d7      	b.n	8009f74 <PxMessagingTask+0x1558>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009fc4:	4ac5      	ldr	r2, [pc, #788]	; (800a2dc <PxMessagingTask+0x18c0>)
 8009fc6:	2112      	movs	r1, #18
 8009fc8:	7011      	strb	r1, [r2, #0]
 8009fca:	e7d3      	b.n	8009f74 <PxMessagingTask+0x1558>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009fcc:	070a      	lsls	r2, r1, #28
 8009fce:	d020      	beq.n	800a012 <PxMessagingTask+0x15f6>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL){ // Write remote value
 8009fd0:	4ac2      	ldr	r2, [pc, #776]	; (800a2dc <PxMessagingTask+0x18c0>)
 8009fd2:	7812      	ldrb	r2, [r2, #0]
 8009fd4:	2a12      	cmp	r2, #18
 8009fd6:	d100      	bne.n	8009fda <PxMessagingTask+0x15be>
 8009fd8:	e6fc      	b.n	8009dd4 <PxMessagingTask+0x13b8>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009fda:	4642      	mov	r2, r8
 8009fdc:	3202      	adds	r2, #2
 8009fde:	2138      	movs	r1, #56	; 0x38
 8009fe0:	4361      	muls	r1, r4
 8009fe2:	48bf      	ldr	r0, [pc, #764]	; (800a2e0 <PxMessagingTask+0x18c4>)
 8009fe4:	1841      	adds	r1, r0, r1
 8009fe6:	5c88      	ldrb	r0, [r1, r2]
 8009fe8:	4642      	mov	r2, r8
 8009fea:	3203      	adds	r2, #3
 8009fec:	5c8a      	ldrb	r2, [r1, r2]
 8009fee:	0212      	lsls	r2, r2, #8
 8009ff0:	1880      	adds	r0, r0, r2
 8009ff2:	4642      	mov	r2, r8
 8009ff4:	3204      	adds	r2, #4
 8009ff6:	5c8a      	ldrb	r2, [r1, r2]
 8009ff8:	0412      	lsls	r2, r2, #16
 8009ffa:	1882      	adds	r2, r0, r2
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	3005      	adds	r0, #5
 800a000:	5c09      	ldrb	r1, [r1, r0]
 800a002:	0609      	lsls	r1, r1, #24
 800a004:	1852      	adds	r2, r2, r1
 800a006:	49b8      	ldr	r1, [pc, #736]	; (800a2e8 <PxMessagingTask+0x18cc>)
 800a008:	600a      	str	r2, [r1, #0]
 800a00a:	2000      	movs	r0, #0
 800a00c:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800a00e:	601a      	str	r2, [r3, #0]
 800a010:	e6e0      	b.n	8009dd4 <PxMessagingTask+0x13b8>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800a012:	2004      	movs	r0, #4
 800a014:	f009 f828 	bl	8013068 <malloc>
 800a018:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800a01a:	d005      	beq.n	800a028 <PxMessagingTask+0x160c>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800a01c:	0400      	lsls	r0, r0, #16
 800a01e:	1986      	adds	r6, r0, r6
 800a020:	00bf      	lsls	r7, r7, #2
 800a022:	4ab0      	ldr	r2, [pc, #704]	; (800a2e4 <PxMessagingTask+0x18c8>)
 800a024:	50be      	str	r6, [r7, r2]
 800a026:	e7d3      	b.n	8009fd0 <PxMessagingTask+0x15b4>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800a028:	4aac      	ldr	r2, [pc, #688]	; (800a2dc <PxMessagingTask+0x18c0>)
 800a02a:	2112      	movs	r1, #18
 800a02c:	7011      	strb	r1, [r2, #0]
 800a02e:	e7cf      	b.n	8009fd0 <PxMessagingTask+0x15b4>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800a030:	4baa      	ldr	r3, [pc, #680]	; (800a2dc <PxMessagingTask+0x18c0>)
 800a032:	2213      	movs	r2, #19
 800a034:	701a      	strb	r2, [r3, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 800a036:	4bad      	ldr	r3, [pc, #692]	; (800a2ec <PxMessagingTask+0x18d0>)
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	2b60      	cmp	r3, #96	; 0x60
 800a03c:	d003      	beq.n	800a046 <PxMessagingTask+0x162a>
 800a03e:	2b20      	cmp	r3, #32
 800a040:	d001      	beq.n	800a046 <PxMessagingTask+0x162a>
 800a042:	f7fe fd45 	bl	8008ad0 <PxMessagingTask+0xb4>
								messageParams[0] =responseStatus;
 800a046:	4ba5      	ldr	r3, [pc, #660]	; (800a2dc <PxMessagingTask+0x18c0>)
 800a048:	781a      	ldrb	r2, [r3, #0]
 800a04a:	4ba9      	ldr	r3, [pc, #676]	; (800a2f0 <PxMessagingTask+0x18d4>)
 800a04c:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800a04e:	2201      	movs	r2, #1
 800a050:	2121      	movs	r1, #33	; 0x21
 800a052:	4650      	mov	r0, sl
 800a054:	f7fe fa20 	bl	8008498 <SendMessageToModule>
 800a058:	f7fe fd3a 	bl	8008ad0 <PxMessagingTask+0xb4>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800a05c:	3202      	adds	r2, #2
 800a05e:	2338      	movs	r3, #56	; 0x38
 800a060:	4363      	muls	r3, r4
 800a062:	499f      	ldr	r1, [pc, #636]	; (800a2e0 <PxMessagingTask+0x18c4>)
 800a064:	18cb      	adds	r3, r1, r3
 800a066:	5c9f      	ldrb	r7, [r3, r2]
 800a068:	063f      	lsls	r7, r7, #24
 800a06a:	4642      	mov	r2, r8
 800a06c:	3203      	adds	r2, #3
 800a06e:	5c9a      	ldrb	r2, [r3, r2]
 800a070:	0412      	lsls	r2, r2, #16
 800a072:	18bf      	adds	r7, r7, r2
 800a074:	4642      	mov	r2, r8
 800a076:	3204      	adds	r2, #4
 800a078:	5c9a      	ldrb	r2, [r3, r2]
 800a07a:	0212      	lsls	r2, r2, #8
 800a07c:	18bf      	adds	r7, r7, r2
 800a07e:	4642      	mov	r2, r8
 800a080:	3205      	adds	r2, #5
 800a082:	5c9b      	ldrb	r3, [r3, r2]
 800a084:	18ff      	adds	r7, r7, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800a086:	23e0      	movs	r3, #224	; 0xe0
 800a088:	061b      	lsls	r3, r3, #24
 800a08a:	18fa      	adds	r2, r7, r3
 800a08c:	2380      	movs	r3, #128	; 0x80
 800a08e:	021b      	lsls	r3, r3, #8
 800a090:	429a      	cmp	r2, r3
 800a092:	d300      	bcc.n	800a096 <PxMessagingTask+0x167a>
 800a094:	e08b      	b.n	800a1ae <PxMessagingTask+0x1792>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800a096:	4643      	mov	r3, r8
 800a098:	3301      	adds	r3, #1
 800a09a:	2138      	movs	r1, #56	; 0x38
 800a09c:	4361      	muls	r1, r4
 800a09e:	4a90      	ldr	r2, [pc, #576]	; (800a2e0 <PxMessagingTask+0x18c4>)
 800a0a0:	1852      	adds	r2, r2, r1
 800a0a2:	5cd3      	ldrb	r3, [r2, r3]
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	2a07      	cmp	r2, #7
 800a0aa:	d8c4      	bhi.n	800a036 <PxMessagingTask+0x161a>
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4a90      	ldr	r2, [pc, #576]	; (800a2f4 <PxMessagingTask+0x18d8>)
 800a0b2:	58d3      	ldr	r3, [r2, r3]
 800a0b4:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800a0b6:	4641      	mov	r1, r8
 800a0b8:	3106      	adds	r1, #6
 800a0ba:	2238      	movs	r2, #56	; 0x38
 800a0bc:	4362      	muls	r2, r4
 800a0be:	4b88      	ldr	r3, [pc, #544]	; (800a2e0 <PxMessagingTask+0x18c4>)
 800a0c0:	189b      	adds	r3, r3, r2
 800a0c2:	5c5b      	ldrb	r3, [r3, r1]
 800a0c4:	703b      	strb	r3, [r7, #0]
											break;
 800a0c6:	e7b6      	b.n	800a036 <PxMessagingTask+0x161a>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800a0c8:	4641      	mov	r1, r8
 800a0ca:	3106      	adds	r1, #6
 800a0cc:	2238      	movs	r2, #56	; 0x38
 800a0ce:	4362      	muls	r2, r4
 800a0d0:	4b83      	ldr	r3, [pc, #524]	; (800a2e0 <PxMessagingTask+0x18c4>)
 800a0d2:	189b      	adds	r3, r3, r2
 800a0d4:	565b      	ldrsb	r3, [r3, r1]
 800a0d6:	703b      	strb	r3, [r7, #0]
											break;
 800a0d8:	e7ad      	b.n	800a036 <PxMessagingTask+0x161a>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800a0da:	4643      	mov	r3, r8
 800a0dc:	1d99      	adds	r1, r3, #6
 800a0de:	2338      	movs	r3, #56	; 0x38
 800a0e0:	4363      	muls	r3, r4
 800a0e2:	4a7f      	ldr	r2, [pc, #508]	; (800a2e0 <PxMessagingTask+0x18c4>)
 800a0e4:	18d2      	adds	r2, r2, r3
 800a0e6:	5c53      	ldrb	r3, [r2, r1]
 800a0e8:	4641      	mov	r1, r8
 800a0ea:	3107      	adds	r1, #7
 800a0ec:	5c52      	ldrb	r2, [r2, r1]
 800a0ee:	0212      	lsls	r2, r2, #8
 800a0f0:	189b      	adds	r3, r3, r2
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	803b      	strh	r3, [r7, #0]
											break;
 800a0f6:	e79e      	b.n	800a036 <PxMessagingTask+0x161a>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800a0f8:	4643      	mov	r3, r8
 800a0fa:	1d99      	adds	r1, r3, #6
 800a0fc:	2338      	movs	r3, #56	; 0x38
 800a0fe:	4363      	muls	r3, r4
 800a100:	4a77      	ldr	r2, [pc, #476]	; (800a2e0 <PxMessagingTask+0x18c4>)
 800a102:	18d2      	adds	r2, r2, r3
 800a104:	5c53      	ldrb	r3, [r2, r1]
 800a106:	4641      	mov	r1, r8
 800a108:	3107      	adds	r1, #7
 800a10a:	5c52      	ldrb	r2, [r2, r1]
 800a10c:	0212      	lsls	r2, r2, #8
 800a10e:	189b      	adds	r3, r3, r2
 800a110:	b21b      	sxth	r3, r3
 800a112:	803b      	strh	r3, [r7, #0]
											break;
 800a114:	e78f      	b.n	800a036 <PxMessagingTask+0x161a>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800a116:	4643      	mov	r3, r8
 800a118:	1d99      	adds	r1, r3, #6
 800a11a:	2338      	movs	r3, #56	; 0x38
 800a11c:	4363      	muls	r3, r4
 800a11e:	4a70      	ldr	r2, [pc, #448]	; (800a2e0 <PxMessagingTask+0x18c4>)
 800a120:	18d2      	adds	r2, r2, r3
 800a122:	5c53      	ldrb	r3, [r2, r1]
 800a124:	4641      	mov	r1, r8
 800a126:	3107      	adds	r1, #7
 800a128:	5c51      	ldrb	r1, [r2, r1]
 800a12a:	0209      	lsls	r1, r1, #8
 800a12c:	185b      	adds	r3, r3, r1
 800a12e:	4641      	mov	r1, r8
 800a130:	3108      	adds	r1, #8
 800a132:	5c51      	ldrb	r1, [r2, r1]
 800a134:	0409      	lsls	r1, r1, #16
 800a136:	185b      	adds	r3, r3, r1
 800a138:	4641      	mov	r1, r8
 800a13a:	3109      	adds	r1, #9
 800a13c:	5c52      	ldrb	r2, [r2, r1]
 800a13e:	0612      	lsls	r2, r2, #24
 800a140:	189b      	adds	r3, r3, r2
 800a142:	603b      	str	r3, [r7, #0]
											break;
 800a144:	e777      	b.n	800a036 <PxMessagingTask+0x161a>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800a146:	4643      	mov	r3, r8
 800a148:	1d99      	adds	r1, r3, #6
 800a14a:	2338      	movs	r3, #56	; 0x38
 800a14c:	4363      	muls	r3, r4
 800a14e:	4a64      	ldr	r2, [pc, #400]	; (800a2e0 <PxMessagingTask+0x18c4>)
 800a150:	18d2      	adds	r2, r2, r3
 800a152:	5c53      	ldrb	r3, [r2, r1]
 800a154:	4641      	mov	r1, r8
 800a156:	3107      	adds	r1, #7
 800a158:	5c51      	ldrb	r1, [r2, r1]
 800a15a:	0209      	lsls	r1, r1, #8
 800a15c:	185b      	adds	r3, r3, r1
 800a15e:	4641      	mov	r1, r8
 800a160:	3108      	adds	r1, #8
 800a162:	5c51      	ldrb	r1, [r2, r1]
 800a164:	0409      	lsls	r1, r1, #16
 800a166:	185b      	adds	r3, r3, r1
 800a168:	4641      	mov	r1, r8
 800a16a:	3109      	adds	r1, #9
 800a16c:	5c52      	ldrb	r2, [r2, r1]
 800a16e:	0612      	lsls	r2, r2, #24
 800a170:	189b      	adds	r3, r3, r2
 800a172:	603b      	str	r3, [r7, #0]
											break;
 800a174:	e75f      	b.n	800a036 <PxMessagingTask+0x161a>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800a176:	4643      	mov	r3, r8
 800a178:	1d99      	adds	r1, r3, #6
 800a17a:	2338      	movs	r3, #56	; 0x38
 800a17c:	4363      	muls	r3, r4
 800a17e:	4a58      	ldr	r2, [pc, #352]	; (800a2e0 <PxMessagingTask+0x18c4>)
 800a180:	18d2      	adds	r2, r2, r3
 800a182:	5c53      	ldrb	r3, [r2, r1]
 800a184:	4641      	mov	r1, r8
 800a186:	3107      	adds	r1, #7
 800a188:	5c51      	ldrb	r1, [r2, r1]
 800a18a:	0209      	lsls	r1, r1, #8
 800a18c:	185b      	adds	r3, r3, r1
 800a18e:	4641      	mov	r1, r8
 800a190:	3108      	adds	r1, #8
 800a192:	5c51      	ldrb	r1, [r2, r1]
 800a194:	0409      	lsls	r1, r1, #16
 800a196:	185b      	adds	r3, r3, r1
 800a198:	4641      	mov	r1, r8
 800a19a:	3109      	adds	r1, #9
 800a19c:	5c52      	ldrb	r2, [r2, r1]
 800a19e:	0612      	lsls	r2, r2, #24
 800a1a0:	189b      	adds	r3, r3, r2
 800a1a2:	4a51      	ldr	r2, [pc, #324]	; (800a2e8 <PxMessagingTask+0x18cc>)
 800a1a4:	6013      	str	r3, [r2, #0]
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800a1aa:	603b      	str	r3, [r7, #0]
											break;
 800a1ac:	e743      	b.n	800a036 <PxMessagingTask+0x161a>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800a1ae:	2280      	movs	r2, #128	; 0x80
 800a1b0:	0292      	lsls	r2, r2, #10
 800a1b2:	23f8      	movs	r3, #248	; 0xf8
 800a1b4:	061b      	lsls	r3, r3, #24
 800a1b6:	18fb      	adds	r3, r7, r3
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d303      	bcc.n	800a1c4 <PxMessagingTask+0x17a8>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800a1bc:	4b47      	ldr	r3, [pc, #284]	; (800a2dc <PxMessagingTask+0x18c0>)
 800a1be:	2215      	movs	r2, #21
 800a1c0:	701a      	strb	r2, [r3, #0]
 800a1c2:	e738      	b.n	800a036 <PxMessagingTask+0x161a>
									HAL_FLASH_Unlock();
 800a1c4:	f006 ffec 	bl	80111a0 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800a1c8:	2e22      	cmp	r6, #34	; 0x22
 800a1ca:	d013      	beq.n	800a1f4 <PxMessagingTask+0x17d8>
									if(responseStatus == BOS_OK){
 800a1cc:	4b43      	ldr	r3, [pc, #268]	; (800a2dc <PxMessagingTask+0x18c0>)
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d11b      	bne.n	800a20c <PxMessagingTask+0x17f0>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800a1d4:	4643      	mov	r3, r8
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	2138      	movs	r1, #56	; 0x38
 800a1da:	4361      	muls	r1, r4
 800a1dc:	4a40      	ldr	r2, [pc, #256]	; (800a2e0 <PxMessagingTask+0x18c4>)
 800a1de:	1852      	adds	r2, r2, r1
 800a1e0:	5cd3      	ldrb	r3, [r2, r3]
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	2a07      	cmp	r2, #7
 800a1e8:	d810      	bhi.n	800a20c <PxMessagingTask+0x17f0>
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4a42      	ldr	r2, [pc, #264]	; (800a2f8 <PxMessagingTask+0x18dc>)
 800a1f0:	58d3      	ldr	r3, [r2, r3]
 800a1f2:	469f      	mov	pc, r3
										EraseSector(temp32);
 800a1f4:	0038      	movs	r0, r7
 800a1f6:	f001 fe9b 	bl	800bf30 <EraseSector>
 800a1fa:	e7e7      	b.n	800a1cc <PxMessagingTask+0x17b0>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800a1fc:	883b      	ldrh	r3, [r7, #0]
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	4a3e      	ldr	r2, [pc, #248]	; (800a2fc <PxMessagingTask+0x18e0>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d00c      	beq.n	800a220 <PxMessagingTask+0x1804>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800a206:	4b35      	ldr	r3, [pc, #212]	; (800a2dc <PxMessagingTask+0x18c0>)
 800a208:	2216      	movs	r2, #22
 800a20a:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800a20c:	f006 ffdc 	bl	80111c8 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800a210:	9b07      	ldr	r3, [sp, #28]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d100      	bne.n	800a218 <PxMessagingTask+0x17fc>
 800a216:	e70e      	b.n	800a036 <PxMessagingTask+0x161a>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800a218:	4b30      	ldr	r3, [pc, #192]	; (800a2dc <PxMessagingTask+0x18c0>)
 800a21a:	2216      	movs	r2, #22
 800a21c:	701a      	strb	r2, [r3, #0]
 800a21e:	e70a      	b.n	800a036 <PxMessagingTask+0x161a>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800a220:	4641      	mov	r1, r8
 800a222:	3106      	adds	r1, #6
 800a224:	2238      	movs	r2, #56	; 0x38
 800a226:	4362      	muls	r2, r4
 800a228:	4b2d      	ldr	r3, [pc, #180]	; (800a2e0 <PxMessagingTask+0x18c4>)
 800a22a:	189b      	adds	r3, r3, r2
 800a22c:	5c5a      	ldrb	r2, [r3, r1]
 800a22e:	2300      	movs	r3, #0
 800a230:	492d      	ldr	r1, [pc, #180]	; (800a2e8 <PxMessagingTask+0x18cc>)
 800a232:	600a      	str	r2, [r1, #0]
 800a234:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800a236:	0039      	movs	r1, r7
 800a238:	2001      	movs	r0, #1
 800a23a:	f006 fffb 	bl	8011234 <HAL_FLASH_Program>
 800a23e:	9007      	str	r0, [sp, #28]
													break;
 800a240:	e7e4      	b.n	800a20c <PxMessagingTask+0x17f0>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800a242:	883b      	ldrh	r3, [r7, #0]
 800a244:	b29b      	uxth	r3, r3
 800a246:	4a2d      	ldr	r2, [pc, #180]	; (800a2fc <PxMessagingTask+0x18e0>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d003      	beq.n	800a254 <PxMessagingTask+0x1838>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800a24c:	4b23      	ldr	r3, [pc, #140]	; (800a2dc <PxMessagingTask+0x18c0>)
 800a24e:	2216      	movs	r2, #22
 800a250:	701a      	strb	r2, [r3, #0]
													break;
 800a252:	e7db      	b.n	800a20c <PxMessagingTask+0x17f0>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800a254:	4643      	mov	r3, r8
 800a256:	1d99      	adds	r1, r3, #6
 800a258:	2238      	movs	r2, #56	; 0x38
 800a25a:	4362      	muls	r2, r4
 800a25c:	4b20      	ldr	r3, [pc, #128]	; (800a2e0 <PxMessagingTask+0x18c4>)
 800a25e:	189b      	adds	r3, r3, r2
 800a260:	5c5a      	ldrb	r2, [r3, r1]
 800a262:	4641      	mov	r1, r8
 800a264:	3107      	adds	r1, #7
 800a266:	5c5b      	ldrb	r3, [r3, r1]
 800a268:	021b      	lsls	r3, r3, #8
 800a26a:	18d2      	adds	r2, r2, r3
 800a26c:	2300      	movs	r3, #0
 800a26e:	491e      	ldr	r1, [pc, #120]	; (800a2e8 <PxMessagingTask+0x18cc>)
 800a270:	600a      	str	r2, [r1, #0]
 800a272:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800a274:	0039      	movs	r1, r7
 800a276:	2001      	movs	r0, #1
 800a278:	f006 ffdc 	bl	8011234 <HAL_FLASH_Program>
 800a27c:	9007      	str	r0, [sp, #28]
													break;
 800a27e:	e7c5      	b.n	800a20c <PxMessagingTask+0x17f0>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	3301      	adds	r3, #1
 800a284:	d003      	beq.n	800a28e <PxMessagingTask+0x1872>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800a286:	4b15      	ldr	r3, [pc, #84]	; (800a2dc <PxMessagingTask+0x18c0>)
 800a288:	2216      	movs	r2, #22
 800a28a:	701a      	strb	r2, [r3, #0]
													break;
 800a28c:	e7be      	b.n	800a20c <PxMessagingTask+0x17f0>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);													// TOCHECKLATER
 800a28e:	4643      	mov	r3, r8
 800a290:	1d9a      	adds	r2, r3, #6
 800a292:	2338      	movs	r3, #56	; 0x38
 800a294:	4363      	muls	r3, r4
 800a296:	4912      	ldr	r1, [pc, #72]	; (800a2e0 <PxMessagingTask+0x18c4>)
 800a298:	18cb      	adds	r3, r1, r3
 800a29a:	5c9a      	ldrb	r2, [r3, r2]
 800a29c:	4641      	mov	r1, r8
 800a29e:	3107      	adds	r1, #7
 800a2a0:	5c59      	ldrb	r1, [r3, r1]
 800a2a2:	0209      	lsls	r1, r1, #8
 800a2a4:	1852      	adds	r2, r2, r1
 800a2a6:	4641      	mov	r1, r8
 800a2a8:	3108      	adds	r1, #8
 800a2aa:	5c59      	ldrb	r1, [r3, r1]
 800a2ac:	0409      	lsls	r1, r1, #16
 800a2ae:	1852      	adds	r2, r2, r1
 800a2b0:	4641      	mov	r1, r8
 800a2b2:	3109      	adds	r1, #9
 800a2b4:	5c5b      	ldrb	r3, [r3, r1]
 800a2b6:	061b      	lsls	r3, r3, #24
 800a2b8:	18d2      	adds	r2, r2, r3
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	490a      	ldr	r1, [pc, #40]	; (800a2e8 <PxMessagingTask+0x18cc>)
 800a2be:	600a      	str	r2, [r1, #0]
 800a2c0:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800a2c2:	0039      	movs	r1, r7
 800a2c4:	2002      	movs	r0, #2
 800a2c6:	f006 ffb5 	bl	8011234 <HAL_FLASH_Program>
 800a2ca:	9007      	str	r0, [sp, #28]
													break;
 800a2cc:	e79e      	b.n	800a20c <PxMessagingTask+0x17f0>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	d015      	beq.n	800a300 <PxMessagingTask+0x18e4>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800a2d4:	4b01      	ldr	r3, [pc, #4]	; (800a2dc <PxMessagingTask+0x18c0>)
 800a2d6:	2216      	movs	r2, #22
 800a2d8:	701a      	strb	r2, [r3, #0]
													break;
 800a2da:	e797      	b.n	800a20c <PxMessagingTask+0x17f0>
 800a2dc:	20000c6c 	.word	0x20000c6c
 800a2e0:	20000d38 	.word	0x20000d38
 800a2e4:	20000c78 	.word	0x20000c78
 800a2e8:	20000c70 	.word	0x20000c70
 800a2ec:	20000b44 	.word	0x20000b44
 800a2f0:	20000b6c 	.word	0x20000b6c
 800a2f4:	08019c38 	.word	0x08019c38
 800a2f8:	08019c58 	.word	0x08019c58
 800a2fc:	0000ffff 	.word	0x0000ffff
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800a300:	4643      	mov	r3, r8
 800a302:	1d9a      	adds	r2, r3, #6
 800a304:	2338      	movs	r3, #56	; 0x38
 800a306:	4363      	muls	r3, r4
 800a308:	49b6      	ldr	r1, [pc, #728]	; (800a5e4 <PxMessagingTask+0x1bc8>)
 800a30a:	18cb      	adds	r3, r1, r3
 800a30c:	5c9a      	ldrb	r2, [r3, r2]
 800a30e:	4641      	mov	r1, r8
 800a310:	3107      	adds	r1, #7
 800a312:	5c59      	ldrb	r1, [r3, r1]
 800a314:	0209      	lsls	r1, r1, #8
 800a316:	1852      	adds	r2, r2, r1
 800a318:	4641      	mov	r1, r8
 800a31a:	3108      	adds	r1, #8
 800a31c:	5c59      	ldrb	r1, [r3, r1]
 800a31e:	0409      	lsls	r1, r1, #16
 800a320:	1852      	adds	r2, r2, r1
 800a322:	4641      	mov	r1, r8
 800a324:	3109      	adds	r1, #9
 800a326:	5c5b      	ldrb	r3, [r3, r1]
 800a328:	061b      	lsls	r3, r3, #24
 800a32a:	18d2      	adds	r2, r2, r3
 800a32c:	2300      	movs	r3, #0
 800a32e:	49ae      	ldr	r1, [pc, #696]	; (800a5e8 <PxMessagingTask+0x1bcc>)
 800a330:	600a      	str	r2, [r1, #0]
 800a332:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800a334:	0039      	movs	r1, r7
 800a336:	2003      	movs	r0, #3
 800a338:	f006 ff7c 	bl	8011234 <HAL_FLASH_Program>
 800a33c:	9007      	str	r0, [sp, #28]
													break;
 800a33e:	e765      	b.n	800a20c <PxMessagingTask+0x17f0>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800a340:	2238      	movs	r2, #56	; 0x38
 800a342:	4362      	muls	r2, r4
 800a344:	4ba7      	ldr	r3, [pc, #668]	; (800a5e4 <PxMessagingTask+0x1bc8>)
 800a346:	189b      	adds	r3, r3, r2
 800a348:	4642      	mov	r2, r8
 800a34a:	5c9a      	ldrb	r2, [r3, r2]
 800a34c:	4ba7      	ldr	r3, [pc, #668]	; (800a5ec <PxMessagingTask+0x1bd0>)
 800a34e:	701a      	strb	r2, [r3, #0]
							break;
 800a350:	f7fe fbbe 	bl	8008ad0 <PxMessagingTask+0xb4>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800a354:	4643      	mov	r3, r8
 800a356:	1c59      	adds	r1, r3, #1
 800a358:	2338      	movs	r3, #56	; 0x38
 800a35a:	4363      	muls	r3, r4
 800a35c:	1859      	adds	r1, r3, r1
 800a35e:	48a1      	ldr	r0, [pc, #644]	; (800a5e4 <PxMessagingTask+0x1bc8>)
 800a360:	1809      	adds	r1, r1, r0
 800a362:	9a04      	ldr	r2, [sp, #16]
 800a364:	3a01      	subs	r2, #1
 800a366:	b292      	uxth	r2, r2
 800a368:	18c3      	adds	r3, r0, r3
 800a36a:	4640      	mov	r0, r8
 800a36c:	5c18      	ldrb	r0, [r3, r0]
 800a36e:	230a      	movs	r3, #10
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	f003 fd33 	bl	800dddc <writePxMutex>
							break;
 800a376:	f7fe fbab 	bl	8008ad0 <PxMessagingTask+0xb4>
							switch(cMessage[port - 1][0 + shift]){
 800a37a:	2238      	movs	r2, #56	; 0x38
 800a37c:	4362      	muls	r2, r4
 800a37e:	4b99      	ldr	r3, [pc, #612]	; (800a5e4 <PxMessagingTask+0x1bc8>)
 800a380:	189b      	adds	r3, r3, r2
 800a382:	4642      	mov	r2, r8
 800a384:	5c9b      	ldrb	r3, [r3, r2]
 800a386:	2b01      	cmp	r3, #1
 800a388:	d100      	bne.n	800a38c <PxMessagingTask+0x1970>
 800a38a:	e091      	b.n	800a4b0 <PxMessagingTask+0x1a94>
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d100      	bne.n	800a392 <PxMessagingTask+0x1976>
 800a390:	e0cb      	b.n	800a52a <PxMessagingTask+0x1b0e>
 800a392:	2b00      	cmp	r3, #0
 800a394:	d04f      	beq.n	800a436 <PxMessagingTask+0x1a1a>
							ADCPort =cMessage[port - 1][shift];
 800a396:	00e3      	lsls	r3, r4, #3
 800a398:	1b1b      	subs	r3, r3, r4
 800a39a:	00da      	lsls	r2, r3, #3
 800a39c:	4b91      	ldr	r3, [pc, #580]	; (800a5e4 <PxMessagingTask+0x1bc8>)
 800a39e:	189b      	adds	r3, r3, r2
 800a3a0:	4642      	mov	r2, r8
 800a3a2:	5c98      	ldrb	r0, [r3, r2]
 800a3a4:	4a92      	ldr	r2, [pc, #584]	; (800a5f0 <PxMessagingTask+0x1bd4>)
 800a3a6:	8110      	strh	r0, [r2, #8]
							ADCSide =cMessage[port - 1][shift + 1];
 800a3a8:	4641      	mov	r1, r8
 800a3aa:	3101      	adds	r1, #1
 800a3ac:	5c5b      	ldrb	r3, [r3, r1]
 800a3ae:	8153      	strh	r3, [r2, #10]
							if(0 == ADCSide){
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d100      	bne.n	800a3b6 <PxMessagingTask+0x199a>
 800a3b4:	e0d2      	b.n	800a55c <PxMessagingTask+0x1b40>
							else if(1 == ADCSide){
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d100      	bne.n	800a3bc <PxMessagingTask+0x19a0>
 800a3ba:	e0db      	b.n	800a574 <PxMessagingTask+0x1b58>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800a3bc:	488c      	ldr	r0, [pc, #560]	; (800a5f0 <PxMessagingTask+0x1bd4>)
 800a3be:	0001      	movs	r1, r0
 800a3c0:	3110      	adds	r1, #16
 800a3c2:	3014      	adds	r0, #20
 800a3c4:	f002 fa94 	bl	800c8f0 <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 800a3c8:	00e6      	lsls	r6, r4, #3
 800a3ca:	1b36      	subs	r6, r6, r4
 800a3cc:	00f3      	lsls	r3, r6, #3
 800a3ce:	4e85      	ldr	r6, [pc, #532]	; (800a5e4 <PxMessagingTask+0x1bc8>)
 800a3d0:	18f6      	adds	r6, r6, r3
 800a3d2:	4643      	mov	r3, r8
 800a3d4:	5cf0      	ldrb	r0, [r6, r3]
 800a3d6:	4986      	ldr	r1, [pc, #536]	; (800a5f0 <PxMessagingTask+0x1bd4>)
 800a3d8:	8108      	strh	r0, [r1, #8]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 800a3da:	3118      	adds	r1, #24
 800a3dc:	f002 fb50 	bl	800ca80 <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800a3e0:	4643      	mov	r3, r8
 800a3e2:	3305      	adds	r3, #5
 800a3e4:	5cf3      	ldrb	r3, [r6, r3]
 800a3e6:	4642      	mov	r2, r8
 800a3e8:	3206      	adds	r2, #6
 800a3ea:	5cb2      	ldrb	r2, [r6, r2]
 800a3ec:	0212      	lsls	r2, r2, #8
 800a3ee:	189b      	adds	r3, r3, r2
 800a3f0:	4642      	mov	r2, r8
 800a3f2:	3207      	adds	r2, #7
 800a3f4:	5cb2      	ldrb	r2, [r6, r2]
 800a3f6:	0412      	lsls	r2, r2, #16
 800a3f8:	189b      	adds	r3, r3, r2
 800a3fa:	4642      	mov	r2, r8
 800a3fc:	3208      	adds	r2, #8
 800a3fe:	5cb2      	ldrb	r2, [r6, r2]
 800a400:	0612      	lsls	r2, r2, #24
 800a402:	189b      	adds	r3, r3, r2
 800a404:	4a7b      	ldr	r2, [pc, #492]	; (800a5f4 <PxMessagingTask+0x1bd8>)
 800a406:	2180      	movs	r1, #128	; 0x80
 800a408:	5053      	str	r3, [r2, r1]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800a40a:	4643      	mov	r3, r8
 800a40c:	3309      	adds	r3, #9
 800a40e:	5cf3      	ldrb	r3, [r6, r3]
 800a410:	4641      	mov	r1, r8
 800a412:	310a      	adds	r1, #10
 800a414:	5c71      	ldrb	r1, [r6, r1]
 800a416:	0209      	lsls	r1, r1, #8
 800a418:	185b      	adds	r3, r3, r1
 800a41a:	4641      	mov	r1, r8
 800a41c:	310b      	adds	r1, #11
 800a41e:	5c71      	ldrb	r1, [r6, r1]
 800a420:	0409      	lsls	r1, r1, #16
 800a422:	185b      	adds	r3, r3, r1
 800a424:	4641      	mov	r1, r8
 800a426:	310c      	adds	r1, #12
 800a428:	5c71      	ldrb	r1, [r6, r1]
 800a42a:	0609      	lsls	r1, r1, #24
 800a42c:	185b      	adds	r3, r3, r1
 800a42e:	2184      	movs	r1, #132	; 0x84
 800a430:	5053      	str	r3, [r2, r1]
							break;
 800a432:	f7fe fb4d 	bl	8008ad0 <PxMessagingTask+0xb4>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800a436:	3201      	adds	r2, #1
 800a438:	2338      	movs	r3, #56	; 0x38
 800a43a:	4363      	muls	r3, r4
 800a43c:	4969      	ldr	r1, [pc, #420]	; (800a5e4 <PxMessagingTask+0x1bc8>)
 800a43e:	18cb      	adds	r3, r1, r3
 800a440:	5c9a      	ldrb	r2, [r3, r2]
 800a442:	4641      	mov	r1, r8
 800a444:	3102      	adds	r1, #2
 800a446:	5c59      	ldrb	r1, [r3, r1]
 800a448:	0209      	lsls	r1, r1, #8
 800a44a:	1852      	adds	r2, r2, r1
 800a44c:	4641      	mov	r1, r8
 800a44e:	3103      	adds	r1, #3
 800a450:	5c59      	ldrb	r1, [r3, r1]
 800a452:	0409      	lsls	r1, r1, #16
 800a454:	1852      	adds	r2, r2, r1
 800a456:	4641      	mov	r1, r8
 800a458:	3104      	adds	r1, #4
 800a45a:	5c59      	ldrb	r1, [r3, r1]
 800a45c:	0609      	lsls	r1, r1, #24
 800a45e:	1852      	adds	r2, r2, r1
 800a460:	4964      	ldr	r1, [pc, #400]	; (800a5f4 <PxMessagingTask+0x1bd8>)
 800a462:	664a      	str	r2, [r1, #100]	; 0x64
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800a464:	4642      	mov	r2, r8
 800a466:	3205      	adds	r2, #5
 800a468:	5c98      	ldrb	r0, [r3, r2]
 800a46a:	4642      	mov	r2, r8
 800a46c:	3206      	adds	r2, #6
 800a46e:	5c9a      	ldrb	r2, [r3, r2]
 800a470:	0212      	lsls	r2, r2, #8
 800a472:	1880      	adds	r0, r0, r2
 800a474:	4642      	mov	r2, r8
 800a476:	3207      	adds	r2, #7
 800a478:	5c9a      	ldrb	r2, [r3, r2]
 800a47a:	0412      	lsls	r2, r2, #16
 800a47c:	1880      	adds	r0, r0, r2
 800a47e:	4642      	mov	r2, r8
 800a480:	3208      	adds	r2, #8
 800a482:	5c9a      	ldrb	r2, [r3, r2]
 800a484:	0612      	lsls	r2, r2, #24
 800a486:	1882      	adds	r2, r0, r2
 800a488:	668a      	str	r2, [r1, #104]	; 0x68
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800a48a:	4642      	mov	r2, r8
 800a48c:	3209      	adds	r2, #9
 800a48e:	5c98      	ldrb	r0, [r3, r2]
 800a490:	3201      	adds	r2, #1
 800a492:	5c9a      	ldrb	r2, [r3, r2]
 800a494:	0212      	lsls	r2, r2, #8
 800a496:	1880      	adds	r0, r0, r2
 800a498:	4642      	mov	r2, r8
 800a49a:	320b      	adds	r2, #11
 800a49c:	5c9a      	ldrb	r2, [r3, r2]
 800a49e:	0412      	lsls	r2, r2, #16
 800a4a0:	1882      	adds	r2, r0, r2
 800a4a2:	4640      	mov	r0, r8
 800a4a4:	300c      	adds	r0, #12
 800a4a6:	5c1b      	ldrb	r3, [r3, r0]
 800a4a8:	061b      	lsls	r3, r3, #24
 800a4aa:	18d3      	adds	r3, r2, r3
 800a4ac:	66cb      	str	r3, [r1, #108]	; 0x6c
									break;
 800a4ae:	e772      	b.n	800a396 <PxMessagingTask+0x197a>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800a4b0:	3201      	adds	r2, #1
 800a4b2:	2338      	movs	r3, #56	; 0x38
 800a4b4:	4363      	muls	r3, r4
 800a4b6:	494b      	ldr	r1, [pc, #300]	; (800a5e4 <PxMessagingTask+0x1bc8>)
 800a4b8:	18cb      	adds	r3, r1, r3
 800a4ba:	5c9a      	ldrb	r2, [r3, r2]
 800a4bc:	4641      	mov	r1, r8
 800a4be:	3102      	adds	r1, #2
 800a4c0:	5c59      	ldrb	r1, [r3, r1]
 800a4c2:	0209      	lsls	r1, r1, #8
 800a4c4:	1852      	adds	r2, r2, r1
 800a4c6:	4641      	mov	r1, r8
 800a4c8:	3103      	adds	r1, #3
 800a4ca:	5c59      	ldrb	r1, [r3, r1]
 800a4cc:	0409      	lsls	r1, r1, #16
 800a4ce:	1852      	adds	r2, r2, r1
 800a4d0:	4641      	mov	r1, r8
 800a4d2:	3104      	adds	r1, #4
 800a4d4:	5c59      	ldrb	r1, [r3, r1]
 800a4d6:	0609      	lsls	r1, r1, #24
 800a4d8:	1852      	adds	r2, r2, r1
 800a4da:	4946      	ldr	r1, [pc, #280]	; (800a5f4 <PxMessagingTask+0x1bd8>)
 800a4dc:	670a      	str	r2, [r1, #112]	; 0x70
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800a4de:	4642      	mov	r2, r8
 800a4e0:	3205      	adds	r2, #5
 800a4e2:	5c98      	ldrb	r0, [r3, r2]
 800a4e4:	4642      	mov	r2, r8
 800a4e6:	3206      	adds	r2, #6
 800a4e8:	5c9a      	ldrb	r2, [r3, r2]
 800a4ea:	0212      	lsls	r2, r2, #8
 800a4ec:	1880      	adds	r0, r0, r2
 800a4ee:	4642      	mov	r2, r8
 800a4f0:	3207      	adds	r2, #7
 800a4f2:	5c9a      	ldrb	r2, [r3, r2]
 800a4f4:	0412      	lsls	r2, r2, #16
 800a4f6:	1880      	adds	r0, r0, r2
 800a4f8:	4642      	mov	r2, r8
 800a4fa:	3208      	adds	r2, #8
 800a4fc:	5c9a      	ldrb	r2, [r3, r2]
 800a4fe:	0612      	lsls	r2, r2, #24
 800a500:	1882      	adds	r2, r0, r2
 800a502:	674a      	str	r2, [r1, #116]	; 0x74
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800a504:	4642      	mov	r2, r8
 800a506:	3209      	adds	r2, #9
 800a508:	5c98      	ldrb	r0, [r3, r2]
 800a50a:	3201      	adds	r2, #1
 800a50c:	5c9a      	ldrb	r2, [r3, r2]
 800a50e:	0212      	lsls	r2, r2, #8
 800a510:	1880      	adds	r0, r0, r2
 800a512:	4642      	mov	r2, r8
 800a514:	320b      	adds	r2, #11
 800a516:	5c9a      	ldrb	r2, [r3, r2]
 800a518:	0412      	lsls	r2, r2, #16
 800a51a:	1882      	adds	r2, r0, r2
 800a51c:	4640      	mov	r0, r8
 800a51e:	300c      	adds	r0, #12
 800a520:	5c1b      	ldrb	r3, [r3, r0]
 800a522:	061b      	lsls	r3, r3, #24
 800a524:	18d3      	adds	r3, r2, r3
 800a526:	678b      	str	r3, [r1, #120]	; 0x78
									break;
 800a528:	e735      	b.n	800a396 <PxMessagingTask+0x197a>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800a52a:	4643      	mov	r3, r8
 800a52c:	3301      	adds	r3, #1
 800a52e:	2238      	movs	r2, #56	; 0x38
 800a530:	4362      	muls	r2, r4
 800a532:	492c      	ldr	r1, [pc, #176]	; (800a5e4 <PxMessagingTask+0x1bc8>)
 800a534:	188a      	adds	r2, r1, r2
 800a536:	5cd3      	ldrb	r3, [r2, r3]
 800a538:	4641      	mov	r1, r8
 800a53a:	3102      	adds	r1, #2
 800a53c:	5c51      	ldrb	r1, [r2, r1]
 800a53e:	0209      	lsls	r1, r1, #8
 800a540:	185b      	adds	r3, r3, r1
 800a542:	4641      	mov	r1, r8
 800a544:	3103      	adds	r1, #3
 800a546:	5c51      	ldrb	r1, [r2, r1]
 800a548:	0409      	lsls	r1, r1, #16
 800a54a:	185b      	adds	r3, r3, r1
 800a54c:	4641      	mov	r1, r8
 800a54e:	3104      	adds	r1, #4
 800a550:	5c52      	ldrb	r2, [r2, r1]
 800a552:	0612      	lsls	r2, r2, #24
 800a554:	189b      	adds	r3, r3, r2
 800a556:	4a27      	ldr	r2, [pc, #156]	; (800a5f4 <PxMessagingTask+0x1bd8>)
 800a558:	67d3      	str	r3, [r2, #124]	; 0x7c
 800a55a:	e71c      	b.n	800a396 <PxMessagingTask+0x197a>
								ADCSelectChannel(ADCPort,"top");
 800a55c:	4e26      	ldr	r6, [pc, #152]	; (800a5f8 <PxMessagingTask+0x1bdc>)
 800a55e:	0031      	movs	r1, r6
 800a560:	f002 fb76 	bl	800cc50 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 800a564:	4b22      	ldr	r3, [pc, #136]	; (800a5f0 <PxMessagingTask+0x1bd4>)
 800a566:	001a      	movs	r2, r3
 800a568:	320c      	adds	r2, #12
 800a56a:	7a18      	ldrb	r0, [r3, #8]
 800a56c:	0031      	movs	r1, r6
 800a56e:	f002 fb9f 	bl	800ccb0 <ReadADCChannel>
 800a572:	e723      	b.n	800a3bc <PxMessagingTask+0x19a0>
								ADCSelectChannel(ADCPort,"bottom");
 800a574:	4e21      	ldr	r6, [pc, #132]	; (800a5fc <PxMessagingTask+0x1be0>)
 800a576:	0031      	movs	r1, r6
 800a578:	f002 fb6a 	bl	800cc50 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800a57c:	4b1c      	ldr	r3, [pc, #112]	; (800a5f0 <PxMessagingTask+0x1bd4>)
 800a57e:	001a      	movs	r2, r3
 800a580:	320c      	adds	r2, #12
 800a582:	7a18      	ldrb	r0, [r3, #8]
 800a584:	0031      	movs	r1, r6
 800a586:	f002 fb93 	bl	800ccb0 <ReadADCChannel>
 800a58a:	e717      	b.n	800a3bc <PxMessagingTask+0x19a0>
							ACK_FLAG =1;
 800a58c:	4b1c      	ldr	r3, [pc, #112]	; (800a600 <PxMessagingTask+0x1be4>)
 800a58e:	2201      	movs	r2, #1
 800a590:	701a      	strb	r2, [r3, #0]
							break;
 800a592:	f7fe fa9d 	bl	8008ad0 <PxMessagingTask+0xb4>
							rejected_FLAG =1;
 800a596:	4b1b      	ldr	r3, [pc, #108]	; (800a604 <PxMessagingTask+0x1be8>)
 800a598:	2201      	movs	r2, #1
 800a59a:	701a      	strb	r2, [r3, #0]
							break;
 800a59c:	f7fe fa98 	bl	8008ad0 <PxMessagingTask+0xb4>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800a5a0:	4643      	mov	r3, r8
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	003b      	movs	r3, r7
 800a5a6:	4652      	mov	r2, sl
 800a5a8:	9905      	ldr	r1, [sp, #20]
 800a5aa:	0030      	movs	r0, r6
 800a5ac:	f7fe fa34 	bl	8008a18 <User_MessagingParser>
 800a5b0:	4681      	mov	r9, r0
							if(result == BOS_ERR_UnknownMessage){
 800a5b2:	2801      	cmp	r0, #1
 800a5b4:	d001      	beq.n	800a5ba <PxMessagingTask+0x1b9e>
 800a5b6:	f7fe fa8b 	bl	8008ad0 <PxMessagingTask+0xb4>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800a5ba:	4643      	mov	r3, r8
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	003b      	movs	r3, r7
 800a5c0:	4652      	mov	r2, sl
 800a5c2:	9905      	ldr	r1, [sp, #20]
 800a5c4:	0030      	movs	r0, r6
 800a5c6:	f000 fa55 	bl	800aa74 <Module_MessagingTask>
 800a5ca:	4681      	mov	r9, r0
 800a5cc:	f7fe fa80 	bl	8008ad0 <PxMessagingTask+0xb4>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	4650      	mov	r0, sl
 800a5d6:	f7fd ff5f 	bl	8008498 <SendMessageToModule>
			result =BOS_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	4699      	mov	r9, r3
 800a5de:	f7fe fa7c 	bl	8008ada <PxMessagingTask+0xbe>
 800a5e2:	46c0      	nop			; (mov r8, r8)
 800a5e4:	20000d38 	.word	0x20000d38
 800a5e8:	20000c70 	.word	0x20000c70
 800a5ec:	20000c6c 	.word	0x20000c6c
 800a5f0:	20002080 	.word	0x20002080
 800a5f4:	20002000 	.word	0x20002000
 800a5f8:	0801aaa4 	.word	0x0801aaa4
 800a5fc:	0801aaa8 	.word	0x0801aaa8
 800a600:	200011e6 	.word	0x200011e6
 800a604:	200011e5 	.word	0x200011e5

0800a608 <SystemClock_Config>:
	|												 Private Functions	 														|
   ----------------------------------------------------------------------- 
*/

void SystemClock_Config(void)
{
 800a608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a60a:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a60c:	2401      	movs	r4, #1
 800a60e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a610:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a612:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800a614:	2310      	movs	r3, #16
 800a616:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a618:	2702      	movs	r7, #2
 800a61a:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a61c:	2680      	movs	r6, #128	; 0x80
 800a61e:	0276      	lsls	r6, r6, #9
 800a620:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a622:	2380      	movs	r3, #128	; 0x80
 800a624:	035b      	lsls	r3, r3, #13
 800a626:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800a628:	2500      	movs	r5, #0
 800a62a:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800a62c:	a80d      	add	r0, sp, #52	; 0x34
 800a62e:	f007 f835 	bl	801169c <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800a632:	2307      	movs	r3, #7
 800a634:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a636:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a638:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a63a:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800a63c:	2101      	movs	r1, #1
 800a63e:	a809      	add	r0, sp, #36	; 0x24
 800a640:	f007 fad2 	bl	8011be8 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800a644:	4b1a      	ldr	r3, [pc, #104]	; (800a6b0 <SystemClock_Config+0xa8>)
 800a646:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800a648:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a64a:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a64c:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a64e:	a802      	add	r0, sp, #8
 800a650:	f007 fc60 	bl	8011f14 <HAL_RCCEx_PeriphCLKConfig>
	
	__HAL_RCC_PWR_CLK_ENABLE();
 800a654:	4d17      	ldr	r5, [pc, #92]	; (800a6b4 <SystemClock_Config+0xac>)
 800a656:	69ea      	ldr	r2, [r5, #28]
 800a658:	2180      	movs	r1, #128	; 0x80
 800a65a:	0549      	lsls	r1, r1, #21
 800a65c:	430a      	orrs	r2, r1
 800a65e:	61ea      	str	r2, [r5, #28]
 800a660:	69eb      	ldr	r3, [r5, #28]
 800a662:	400b      	ands	r3, r1
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800a668:	f007 f80e 	bl	8011688 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a66c:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800a66e:	23c0      	movs	r3, #192	; 0xc0
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a674:	a802      	add	r0, sp, #8
 800a676:	f007 fc4d 	bl	8011f14 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800a67a:	f007 fc27 	bl	8011ecc <HAL_RCC_GetHCLKFreq>
 800a67e:	21fa      	movs	r1, #250	; 0xfa
 800a680:	0089      	lsls	r1, r1, #2
 800a682:	f7f5 fd65 	bl	8000150 <__udivsi3>
 800a686:	f005 ff65 	bl	8010554 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800a68a:	2004      	movs	r0, #4
 800a68c:	f005 ff7e 	bl	801058c <HAL_SYSTICK_CLKSourceConfig>
	

	__SYSCFG_CLK_ENABLE();
 800a690:	69ab      	ldr	r3, [r5, #24]
 800a692:	4323      	orrs	r3, r4
 800a694:	61ab      	str	r3, [r5, #24]
 800a696:	69ab      	ldr	r3, [r5, #24]
 800a698:	401c      	ands	r4, r3
 800a69a:	9401      	str	r4, [sp, #4]
 800a69c:	9b01      	ldr	r3, [sp, #4]

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a69e:	2001      	movs	r0, #1
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	4240      	negs	r0, r0
 800a6a6:	f005 ff11 	bl	80104cc <HAL_NVIC_SetPriority>
	
}
 800a6aa:	b01b      	add	sp, #108	; 0x6c
 800a6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ae:	46c0      	nop			; (mov r8, r8)
 800a6b0:	00040003 	.word	0x00040003
 800a6b4:	40021000 	.word	0x40021000

0800a6b8 <SaveToRO>:

/* --- Save array topology and Command Snippets in Flash RO --- 
*/
uint8_t SaveToRO(void)
{
 800a6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6ba:	46ce      	mov	lr, r9
 800a6bc:	4647      	mov	r7, r8
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	9302      	str	r3, [sp, #8]
 800a6c6:	2211      	movs	r2, #17
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	a803      	add	r0, sp, #12
 800a6cc:	f008 ff09 	bl	80134e2 <memset>
	
	HAL_FLASH_Unlock();
 800a6d0:	f006 fd66 	bl	80111a0 <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800a6d4:	4869      	ldr	r0, [pc, #420]	; (800a87c <SaveToRO+0x1c4>)
 800a6d6:	f006 fe13 	bl	8011300 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a6da:	4869      	ldr	r0, [pc, #420]	; (800a880 <SaveToRO+0x1c8>)
 800a6dc:	f006 fd7e 	bl	80111dc <FLASH_WaitForLastOperation>
 800a6e0:	9001      	str	r0, [sp, #4]
 800a6e2:	4680      	mov	r8, r0
	if(FlashStatus != HAL_OK) {
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d10b      	bne.n	800a700 <SaveToRO+0x48>
		return pFlash.ErrorCode;
	} else {			
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a6e8:	4a66      	ldr	r2, [pc, #408]	; (800a884 <SaveToRO+0x1cc>)
 800a6ea:	6913      	ldr	r3, [r2, #16]
 800a6ec:	2102      	movs	r1, #2
 800a6ee:	438b      	bics	r3, r1
 800a6f0:	6113      	str	r3, [r2, #16]
	}	
	
	/* Save number of modules and myID */
	if (myID)
 800a6f2:	4b65      	ldr	r3, [pc, #404]	; (800a888 <SaveToRO+0x1d0>)
 800a6f4:	781a      	ldrb	r2, [r3, #0]
 800a6f6:	2a00      	cmp	r2, #0
 800a6f8:	d10c      	bne.n	800a714 <SaveToRO+0x5c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
					currentAdd += 2;
				}				
			}			
			// Copy the snippet commands buffer. Always an even number. Note the string termination char might be skipped
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800a6fa:	9c01      	ldr	r4, [sp, #4]
 800a6fc:	4e63      	ldr	r6, [pc, #396]	; (800a88c <SaveToRO+0x1d4>)
 800a6fe:	e088      	b.n	800a812 <SaveToRO+0x15a>
		return pFlash.ErrorCode;
 800a700:	4b63      	ldr	r3, [pc, #396]	; (800a890 <SaveToRO+0x1d8>)
 800a702:	69db      	ldr	r3, [r3, #28]
 800a704:	b2db      	uxtb	r3, r3
 800a706:	4698      	mov	r8, r3
	}
	
	HAL_FLASH_Lock();
	
	return result;
}
 800a708:	4640      	mov	r0, r8
 800a70a:	b009      	add	sp, #36	; 0x24
 800a70c:	bcc0      	pop	{r6, r7}
 800a70e:	46b9      	mov	r9, r7
 800a710:	46b0      	mov	r8, r6
 800a712:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800a714:	4b5f      	ldr	r3, [pc, #380]	; (800a894 <SaveToRO+0x1dc>)
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	021b      	lsls	r3, r3, #8
 800a71a:	18d2      	adds	r2, r2, r3
 800a71c:	b292      	uxth	r2, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800a71e:	2300      	movs	r3, #0
 800a720:	4956      	ldr	r1, [pc, #344]	; (800a87c <SaveToRO+0x1c4>)
 800a722:	2001      	movs	r0, #1
 800a724:	f006 fd86 	bl	8011234 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a728:	4855      	ldr	r0, [pc, #340]	; (800a880 <SaveToRO+0x1c8>)
 800a72a:	f006 fd57 	bl	80111dc <FLASH_WaitForLastOperation>
 800a72e:	1e06      	subs	r6, r0, #0
		if (FlashStatus != HAL_OK) {
 800a730:	d107      	bne.n	800a742 <SaveToRO+0x8a>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a732:	4a54      	ldr	r2, [pc, #336]	; (800a884 <SaveToRO+0x1cc>)
 800a734:	6913      	ldr	r3, [r2, #16]
 800a736:	2101      	movs	r1, #1
 800a738:	438b      	bics	r3, r1
 800a73a:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800a73c:	2501      	movs	r5, #1
	uint16_t add = 2, temp = 0;
 800a73e:	2702      	movs	r7, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800a740:	e030      	b.n	800a7a4 <SaveToRO+0xec>
			return pFlash.ErrorCode;
 800a742:	4b53      	ldr	r3, [pc, #332]	; (800a890 <SaveToRO+0x1d8>)
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	b2db      	uxtb	r3, r3
 800a748:	4698      	mov	r8, r3
 800a74a:	e7dd      	b.n	800a708 <SaveToRO+0x50>
						return pFlash.ErrorCode;
 800a74c:	4b50      	ldr	r3, [pc, #320]	; (800a890 <SaveToRO+0x1d8>)
 800a74e:	69db      	ldr	r3, [r3, #28]
 800a750:	b2db      	uxtb	r3, r3
 800a752:	4698      	mov	r8, r3
 800a754:	e7d8      	b.n	800a708 <SaveToRO+0x50>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800a756:	3401      	adds	r4, #1
 800a758:	b2e4      	uxtb	r4, r4
 800a75a:	2c0a      	cmp	r4, #10
 800a75c:	d820      	bhi.n	800a7a0 <SaveToRO+0xe8>
				if (array[i-1][0]) {
 800a75e:	1e69      	subs	r1, r5, #1
 800a760:	2316      	movs	r3, #22
 800a762:	434b      	muls	r3, r1
 800a764:	4a4c      	ldr	r2, [pc, #304]	; (800a898 <SaveToRO+0x1e0>)
 800a766:	5a9b      	ldrh	r3, [r3, r2]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d0f4      	beq.n	800a756 <SaveToRO+0x9e>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800a76c:	008b      	lsls	r3, r1, #2
 800a76e:	185b      	adds	r3, r3, r1
 800a770:	005b      	lsls	r3, r3, #1
 800a772:	185b      	adds	r3, r3, r1
 800a774:	191b      	adds	r3, r3, r4
 800a776:	005b      	lsls	r3, r3, #1
 800a778:	5a9a      	ldrh	r2, [r3, r2]
 800a77a:	4b40      	ldr	r3, [pc, #256]	; (800a87c <SaveToRO+0x1c4>)
 800a77c:	18f9      	adds	r1, r7, r3
 800a77e:	2300      	movs	r3, #0
 800a780:	2001      	movs	r0, #1
 800a782:	f006 fd57 	bl	8011234 <HAL_FLASH_Program>
					add += 2;
 800a786:	3702      	adds	r7, #2
 800a788:	b2bf      	uxth	r7, r7
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a78a:	483d      	ldr	r0, [pc, #244]	; (800a880 <SaveToRO+0x1c8>)
 800a78c:	f006 fd26 	bl	80111dc <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800a790:	2800      	cmp	r0, #0
 800a792:	d1db      	bne.n	800a74c <SaveToRO+0x94>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a794:	4a3b      	ldr	r2, [pc, #236]	; (800a884 <SaveToRO+0x1cc>)
 800a796:	6913      	ldr	r3, [r2, #16]
 800a798:	2101      	movs	r1, #1
 800a79a:	438b      	bics	r3, r1
 800a79c:	6113      	str	r3, [r2, #16]
 800a79e:	e7da      	b.n	800a756 <SaveToRO+0x9e>
		for(uint8_t i=1 ; i<=N ; i++)
 800a7a0:	3501      	adds	r5, #1
 800a7a2:	b2ed      	uxtb	r5, r5
 800a7a4:	4b3b      	ldr	r3, [pc, #236]	; (800a894 <SaveToRO+0x1dc>)
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	42ab      	cmp	r3, r5
 800a7aa:	d3a6      	bcc.n	800a6fa <SaveToRO+0x42>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800a7ac:	0034      	movs	r4, r6
 800a7ae:	e7d4      	b.n	800a75a <SaveToRO+0xa2>
					return pFlash.ErrorCode;
 800a7b0:	4b37      	ldr	r3, [pc, #220]	; (800a890 <SaveToRO+0x1d8>)
 800a7b2:	69db      	ldr	r3, [r3, #28]
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	4698      	mov	r8, r3
 800a7b8:	e7a6      	b.n	800a708 <SaveToRO+0x50>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800a7ba:	4645      	mov	r5, r8
 800a7bc:	00bb      	lsls	r3, r7, #2
 800a7be:	19db      	adds	r3, r3, r7
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	4a36      	ldr	r2, [pc, #216]	; (800a89c <SaveToRO+0x1e4>)
 800a7c4:	18d3      	adds	r3, r2, r3
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	4699      	mov	r9, r3
 800a7ca:	0018      	movs	r0, r3
 800a7cc:	f7f5 fca4 	bl	8000118 <strlen>
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	0840      	lsrs	r0, r0, #1
 800a7d4:	4285      	cmp	r5, r0
 800a7d6:	d21a      	bcs.n	800a80e <SaveToRO+0x156>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800a7d8:	006b      	lsls	r3, r5, #1
 800a7da:	464a      	mov	r2, r9
 800a7dc:	5ad2      	ldrh	r2, [r2, r3]
 800a7de:	2300      	movs	r3, #0
 800a7e0:	0031      	movs	r1, r6
 800a7e2:	2001      	movs	r0, #1
 800a7e4:	f006 fd26 	bl	8011234 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a7e8:	4825      	ldr	r0, [pc, #148]	; (800a880 <SaveToRO+0x1c8>)
 800a7ea:	f006 fcf7 	bl	80111dc <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	d108      	bne.n	800a804 <SaveToRO+0x14c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a7f2:	4a24      	ldr	r2, [pc, #144]	; (800a884 <SaveToRO+0x1cc>)
 800a7f4:	6913      	ldr	r3, [r2, #16]
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	438b      	bics	r3, r1
 800a7fa:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800a7fc:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800a7fe:	3501      	adds	r5, #1
 800a800:	b2ed      	uxtb	r5, r5
 800a802:	e7db      	b.n	800a7bc <SaveToRO+0x104>
					return pFlash.ErrorCode;
 800a804:	4b22      	ldr	r3, [pc, #136]	; (800a890 <SaveToRO+0x1d8>)
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	4698      	mov	r8, r3
 800a80c:	e77c      	b.n	800a708 <SaveToRO+0x50>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800a80e:	3401      	adds	r4, #1
 800a810:	b2e4      	uxtb	r4, r4
 800a812:	4b23      	ldr	r3, [pc, #140]	; (800a8a0 <SaveToRO+0x1e8>)
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	42a3      	cmp	r3, r4
 800a818:	d92d      	bls.n	800a876 <SaveToRO+0x1be>
		if (snippets[s].cond.conditionType) 
 800a81a:	0027      	movs	r7, r4
 800a81c:	00a3      	lsls	r3, r4, #2
 800a81e:	191b      	adds	r3, r3, r4
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	4a1e      	ldr	r2, [pc, #120]	; (800a89c <SaveToRO+0x1e4>)
 800a824:	5c9b      	ldrb	r3, [r3, r2]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d0f1      	beq.n	800a80e <SaveToRO+0x156>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800a82a:	23fe      	movs	r3, #254	; 0xfe
 800a82c:	aa02      	add	r2, sp, #8
 800a82e:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800a830:	00a1      	lsls	r1, r4, #2
 800a832:	1909      	adds	r1, r1, r4
 800a834:	0089      	lsls	r1, r1, #2
 800a836:	4b19      	ldr	r3, [pc, #100]	; (800a89c <SaveToRO+0x1e4>)
 800a838:	18c9      	adds	r1, r1, r3
 800a83a:	2214      	movs	r2, #20
 800a83c:	ab02      	add	r3, sp, #8
 800a83e:	1c58      	adds	r0, r3, #1
 800a840:	f008 fe46 	bl	80134d0 <memcpy>
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800a844:	4645      	mov	r5, r8
 800a846:	2d09      	cmp	r5, #9
 800a848:	d8b7      	bhi.n	800a7ba <SaveToRO+0x102>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800a84a:	006b      	lsls	r3, r5, #1
 800a84c:	aa02      	add	r2, sp, #8
 800a84e:	5ad2      	ldrh	r2, [r2, r3]
 800a850:	2300      	movs	r3, #0
 800a852:	0031      	movs	r1, r6
 800a854:	2001      	movs	r0, #1
 800a856:	f006 fced 	bl	8011234 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a85a:	4809      	ldr	r0, [pc, #36]	; (800a880 <SaveToRO+0x1c8>)
 800a85c:	f006 fcbe 	bl	80111dc <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a860:	2800      	cmp	r0, #0
 800a862:	d1a5      	bne.n	800a7b0 <SaveToRO+0xf8>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a864:	4a07      	ldr	r2, [pc, #28]	; (800a884 <SaveToRO+0x1cc>)
 800a866:	6913      	ldr	r3, [r2, #16]
 800a868:	2101      	movs	r1, #1
 800a86a:	438b      	bics	r3, r1
 800a86c:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800a86e:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800a870:	3501      	adds	r5, #1
 800a872:	b2ed      	uxtb	r5, r5
 800a874:	e7e7      	b.n	800a846 <SaveToRO+0x18e>
	HAL_FLASH_Lock();
 800a876:	f006 fca7 	bl	80111c8 <HAL_FLASH_Lock>
	return result;
 800a87a:	e745      	b.n	800a708 <SaveToRO+0x50>
 800a87c:	0801d800 	.word	0x0801d800
 800a880:	0000c350 	.word	0x0000c350
 800a884:	40022000 	.word	0x40022000
 800a888:	20000aa0 	.word	0x20000aa0
 800a88c:	0801dc00 	.word	0x0801dc00
 800a890:	20006f28 	.word	0x20006f28
 800a894:	20000008 	.word	0x20000008
 800a898:	20000f7c 	.word	0x20000f7c
 800a89c:	200017a8 	.word	0x200017a8
 800a8a0:	200017a4 	.word	0x200017a4

0800a8a4 <ClearROtopology>:

/* --- Clear array topology in SRAM and Flash RO --- 
*/
uint8_t ClearROtopology(void)
{
 800a8a4:	b510      	push	{r4, lr}
	// Clear the array 
	memset(array, 0, sizeof(array));
 800a8a6:	228f      	movs	r2, #143	; 0x8f
 800a8a8:	0092      	lsls	r2, r2, #2
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	4805      	ldr	r0, [pc, #20]	; (800a8c4 <ClearROtopology+0x20>)
 800a8ae:	f008 fe18 	bl	80134e2 <memset>
	N = 1; myID = 0;
 800a8b2:	4b05      	ldr	r3, [pc, #20]	; (800a8c8 <ClearROtopology+0x24>)
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	701a      	strb	r2, [r3, #0]
 800a8b8:	4b04      	ldr	r3, [pc, #16]	; (800a8cc <ClearROtopology+0x28>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	701a      	strb	r2, [r3, #0]
	
	return SaveToRO();
 800a8be:	f7ff fefb 	bl	800a6b8 <SaveToRO>
}
 800a8c2:	bd10      	pop	{r4, pc}
 800a8c4:	20000f7c 	.word	0x20000f7c
 800a8c8:	20000008 	.word	0x20000008
 800a8cc:	20000aa0 	.word	0x20000aa0

0800a8d0 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 800a8d0:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 800a8d2:	f003 fa65 	bl	800dda0 <GetUart>
 800a8d6:	0004      	movs	r4, r0

	huart->Init.BaudRate =57600;
 800a8d8:	23e1      	movs	r3, #225	; 0xe1
 800a8da:	021b      	lsls	r3, r3, #8
 800a8dc:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800a8de:	2380      	movs	r3, #128	; 0x80
 800a8e0:	00db      	lsls	r3, r3, #3
 800a8e2:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a8e4:	2380      	movs	r3, #128	; 0x80
 800a8e6:	015b      	lsls	r3, r3, #5
 800a8e8:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800a8ea:	f008 fa2b 	bl	8012d44 <HAL_UART_Init>

	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800a8ee:	6822      	ldr	r2, [r4, #0]
 800a8f0:	6813      	ldr	r3, [r2, #0]
 800a8f2:	2120      	movs	r1, #32
 800a8f4:	430b      	orrs	r3, r1
 800a8f6:	6013      	str	r3, [r2, #0]
}
 800a8f8:	bd10      	pop	{r4, pc}
	...

0800a8fc <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800a8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8fe:	46c6      	mov	lr, r8
 800a900:	b500      	push	{lr}
 800a902:	b084      	sub	sp, #16
 800a904:	4680      	mov	r8, r0
 800a906:	000e      	movs	r6, r1
 800a908:	0014      	movs	r4, r2
 800a90a:	001f      	movs	r7, r3
	myOutport =FindRoute(myID,dst);
 800a90c:	4b25      	ldr	r3, [pc, #148]	; (800a9a4 <remoteBootloaderUpdate+0xa8>)
 800a90e:	7818      	ldrb	r0, [r3, #0]
 800a910:	f7f9 f9c8 	bl	8003ca4 <FindRoute>
 800a914:	0005      	movs	r5, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a916:	2f00      	cmp	r7, #0
 800a918:	d003      	beq.n	800a922 <remoteBootloaderUpdate+0x26>
 800a91a:	4b22      	ldr	r3, [pc, #136]	; (800a9a4 <remoteBootloaderUpdate+0xa8>)
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	42b3      	cmp	r3, r6
 800a920:	d01b      	beq.n	800a95a <remoteBootloaderUpdate+0x5e>
	if(src == myID){
 800a922:	4b20      	ldr	r3, [pc, #128]	; (800a9a4 <remoteBootloaderUpdate+0xa8>)
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	4543      	cmp	r3, r8
 800a928:	d019      	beq.n	800a95e <remoteBootloaderUpdate+0x62>
	SetupPortForRemoteBootloaderUpdate(inport);
 800a92a:	0020      	movs	r0, r4
 800a92c:	f7ff ffd0 	bl	800a8d0 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 800a930:	0028      	movs	r0, r5
 800a932:	f7ff ffcd 	bl	800a8d0 <SetupPortForRemoteBootloaderUpdate>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 800a936:	4b1b      	ldr	r3, [pc, #108]	; (800a9a4 <remoteBootloaderUpdate+0xa8>)
 800a938:	7819      	ldrb	r1, [r3, #0]
 800a93a:	2300      	movs	r3, #0
 800a93c:	9303      	str	r3, [sp, #12]
 800a93e:	3b01      	subs	r3, #1
 800a940:	9302      	str	r3, [sp, #8]
 800a942:	9301      	str	r3, [sp, #4]
 800a944:	3303      	adds	r3, #3
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	000b      	movs	r3, r1
 800a94a:	002a      	movs	r2, r5
 800a94c:	0020      	movs	r0, r4
 800a94e:	f7fd fdc9 	bl	80084e4 <StartScastDMAStream>
}
 800a952:	b004      	add	sp, #16
 800a954:	bc80      	pop	{r7}
 800a956:	46b8      	mov	r8, r7
 800a958:	bdf0      	pop	{r4, r5, r6, r7, pc}
		myOutport =outport;
 800a95a:	003d      	movs	r5, r7
 800a95c:	e7e1      	b.n	800a922 <remoteBootloaderUpdate+0x26>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a95e:	f003 fce5 	bl	800e32c <FreeRTOS_CLIGetOutputBuffer>
 800a962:	4680      	mov	r8, r0
		if(outport == 0)		// This is a remote module update
 800a964:	2f00      	cmp	r7, #0
 800a966:	d116      	bne.n	800a996 <remoteBootloaderUpdate+0x9a>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 800a968:	4b0f      	ldr	r3, [pc, #60]	; (800a9a8 <remoteBootloaderUpdate+0xac>)
 800a96a:	6819      	ldr	r1, [r3, #0]
 800a96c:	0032      	movs	r2, r6
 800a96e:	f008 ffa9 	bl	80138c4 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 800a972:	4b0e      	ldr	r3, [pc, #56]	; (800a9ac <remoteBootloaderUpdate+0xb0>)
 800a974:	6819      	ldr	r1, [r3, #0]
 800a976:	4640      	mov	r0, r8
 800a978:	f008 ffc4 	bl	8013904 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 800a97c:	4640      	mov	r0, r8
 800a97e:	f7f5 fbcb 	bl	8000118 <strlen>
 800a982:	b282      	uxth	r2, r0
 800a984:	2332      	movs	r3, #50	; 0x32
 800a986:	4641      	mov	r1, r8
 800a988:	0020      	movs	r0, r4
 800a98a:	f003 fa57 	bl	800de3c <writePxITMutex>
		Delay_ms(100);
 800a98e:	2064      	movs	r0, #100	; 0x64
 800a990:	f005 faae 	bl	800fef0 <HAL_Delay>
 800a994:	e7c9      	b.n	800a92a <remoteBootloaderUpdate+0x2e>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 800a996:	4b06      	ldr	r3, [pc, #24]	; (800a9b0 <remoteBootloaderUpdate+0xb4>)
 800a998:	6819      	ldr	r1, [r3, #0]
 800a99a:	003b      	movs	r3, r7
 800a99c:	0032      	movs	r2, r6
 800a99e:	f008 ff91 	bl	80138c4 <sprintf>
 800a9a2:	e7e6      	b.n	800a972 <remoteBootloaderUpdate+0x76>
 800a9a4:	20000aa0 	.word	0x20000aa0
 800a9a8:	2000005c 	.word	0x2000005c
 800a9ac:	20000054 	.word	0x20000054
 800a9b0:	20000058 	.word	0x20000058

0800a9b4 <Module_Peripheral_Init>:

/*-----------------------------------------------------------*/
/* --- H1AR0 module initialization. 
*/
void Module_Peripheral_Init(void)
{
 800a9b4:	b510      	push	{r4, lr}
	/* Array ports */
  MX_USART2_UART_Init();
 800a9b6:	f003 f84d 	bl	800da54 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800a9ba:	f003 f863 	bl	800da84 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800a9be:	f003 f879 	bl	800dab4 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800a9c2:	f003 f88f 	bl	800dae4 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800a9c6:	f003 f8a5 	bl	800db14 <MX_USART6_UART_Init>
	
	/* USB port */
  MX_USART1_UART_Init();
 800a9ca:	f003 f82b 	bl	800da24 <MX_USART1_UART_Init>

  HAL_UART_Receive_DMA(&huart1, UserBufferData, sizeof(UserBufferData));
 800a9ce:	2280      	movs	r2, #128	; 0x80
 800a9d0:	4c04      	ldr	r4, [pc, #16]	; (800a9e4 <Module_Peripheral_Init+0x30>)
 800a9d2:	0052      	lsls	r2, r2, #1
 800a9d4:	4904      	ldr	r1, [pc, #16]	; (800a9e8 <Module_Peripheral_Init+0x34>)
 800a9d6:	0020      	movs	r0, r4
 800a9d8:	f007 fe7c 	bl	80126d4 <HAL_UART_Receive_DMA>
  DMACountUserDataBuffer=&(DMA2_Channel3->CNDTR);
 800a9dc:	4b03      	ldr	r3, [pc, #12]	; (800a9ec <Module_Peripheral_Init+0x38>)
 800a9de:	6723      	str	r3, [r4, #112]	; 0x70
	
}
 800a9e0:	bd10      	pop	{r4, pc}
 800a9e2:	46c0      	nop			; (mov r8, r8)
 800a9e4:	200021d8 	.word	0x200021d8
 800a9e8:	20002254 	.word	0x20002254
 800a9ec:	40020434 	.word	0x40020434

0800a9f0 <RegisterModuleCLICommands>:
/*-----------------------------------------------------------*/

/* --- Register this module CLI Commands 
*/
void RegisterModuleCLICommands(void)
{
 800a9f0:	b510      	push	{r4, lr}
	 FreeRTOS_CLIRegisterCommand(&CLI_Transmit_DataCommandDefinition);
 800a9f2:	4802      	ldr	r0, [pc, #8]	; (800a9fc <RegisterModuleCLICommands+0xc>)
 800a9f4:	f003 fc18 	bl	800e228 <FreeRTOS_CLIRegisterCommand>

}
 800a9f8:	bd10      	pop	{r4, pc}
 800a9fa:	46c0      	nop			; (mov r8, r8)
 800a9fc:	08019c78 	.word	0x08019c78

0800aa00 <GetPort>:

/* --- Get the port for a given UART. 
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART2)
 800aa00:	6803      	ldr	r3, [r0, #0]
 800aa02:	4a0d      	ldr	r2, [pc, #52]	; (800aa38 <GetPort+0x38>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d00d      	beq.n	800aa24 <GetPort+0x24>
			return P1;
	else if (huart->Instance == USART6)
 800aa08:	4a0c      	ldr	r2, [pc, #48]	; (800aa3c <GetPort+0x3c>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d00c      	beq.n	800aa28 <GetPort+0x28>
			return P2;
	else if (huart->Instance == USART3)
 800aa0e:	4a0c      	ldr	r2, [pc, #48]	; (800aa40 <GetPort+0x40>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d00b      	beq.n	800aa2c <GetPort+0x2c>
			return P3;
	else if (huart->Instance == USART4)
 800aa14:	4a0b      	ldr	r2, [pc, #44]	; (800aa44 <GetPort+0x44>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d00a      	beq.n	800aa30 <GetPort+0x30>
			return P4;
	else if (huart->Instance == USART5)
 800aa1a:	4a0b      	ldr	r2, [pc, #44]	; (800aa48 <GetPort+0x48>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d009      	beq.n	800aa34 <GetPort+0x34>
			return P5;
	return 0;
 800aa20:	2000      	movs	r0, #0
}
 800aa22:	4770      	bx	lr
			return P1;
 800aa24:	2001      	movs	r0, #1
 800aa26:	e7fc      	b.n	800aa22 <GetPort+0x22>
			return P2;
 800aa28:	2002      	movs	r0, #2
 800aa2a:	e7fa      	b.n	800aa22 <GetPort+0x22>
			return P3;
 800aa2c:	2003      	movs	r0, #3
 800aa2e:	e7f8      	b.n	800aa22 <GetPort+0x22>
			return P4;
 800aa30:	2004      	movs	r0, #4
 800aa32:	e7f6      	b.n	800aa22 <GetPort+0x22>
			return P5;
 800aa34:	2005      	movs	r0, #5
 800aa36:	e7f4      	b.n	800aa22 <GetPort+0x22>
 800aa38:	40004400 	.word	0x40004400
 800aa3c:	40011400 	.word	0x40011400
 800aa40:	40004800 	.word	0x40004800
 800aa44:	40004c00 	.word	0x40004c00
 800aa48:	40005000 	.word	0x40005000

0800aa4c <TransmitData>:

/* -----------------------------------------------------------------------
	|																APIs	 																 	|
   ----------------------------------------------------------------------- 
*/
Module_Status TransmitData(uint8_t* data,uint16_t Size){
 800aa4c:	b510      	push	{r4, lr}
 800aa4e:	000a      	movs	r2, r1
	Module_Status status=H1AR0_OK;

	if(data!=NULL && Size!=0)
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d00b      	beq.n	800aa6c <TransmitData+0x20>
 800aa54:	2900      	cmp	r1, #0
 800aa56:	d101      	bne.n	800aa5c <TransmitData+0x10>
		HAL_UART_Transmit(&huart1, data, Size, HAL_MAX_DELAY);

	}
	else
	{
		status=H1AR0_ERROR;
 800aa58:	20ff      	movs	r0, #255	; 0xff

	}

	return status;
}
 800aa5a:	bd10      	pop	{r4, pc}
		HAL_UART_Transmit(&huart1, data, Size, HAL_MAX_DELAY);
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	425b      	negs	r3, r3
 800aa60:	0001      	movs	r1, r0
 800aa62:	4803      	ldr	r0, [pc, #12]	; (800aa70 <TransmitData+0x24>)
 800aa64:	f008 f8c4 	bl	8012bf0 <HAL_UART_Transmit>
	Module_Status status=H1AR0_OK;
 800aa68:	2000      	movs	r0, #0
		HAL_UART_Transmit(&huart1, data, Size, HAL_MAX_DELAY);
 800aa6a:	e7f6      	b.n	800aa5a <TransmitData+0xe>
		status=H1AR0_ERROR;
 800aa6c:	20ff      	movs	r0, #255	; 0xff
 800aa6e:	e7f4      	b.n	800aa5a <TransmitData+0xe>
 800aa70:	200021d8 	.word	0x200021d8

0800aa74 <Module_MessagingTask>:
{
 800aa74:	b570      	push	{r4, r5, r6, lr}
 800aa76:	ab04      	add	r3, sp, #16
 800aa78:	781c      	ldrb	r4, [r3, #0]
	switch (code)
 800aa7a:	4a0b      	ldr	r2, [pc, #44]	; (800aaa8 <Module_MessagingTask+0x34>)
 800aa7c:	4290      	cmp	r0, r2
 800aa7e:	d001      	beq.n	800aa84 <Module_MessagingTask+0x10>
			result = H1AR0_ERR_UnknownMessage;
 800aa80:	2001      	movs	r0, #1
}
 800aa82:	bd70      	pop	{r4, r5, r6, pc}
		Size=(uint16_t)cMessage[port - 1][shift];
 800aa84:	3901      	subs	r1, #1
 800aa86:	4d09      	ldr	r5, [pc, #36]	; (800aaac <Module_MessagingTask+0x38>)
 800aa88:	00cb      	lsls	r3, r1, #3
 800aa8a:	1a5a      	subs	r2, r3, r1
 800aa8c:	00d2      	lsls	r2, r2, #3
 800aa8e:	18aa      	adds	r2, r5, r2
 800aa90:	5d12      	ldrb	r2, [r2, r4]
		TransmitData(&cMessage[port - 1][1+shift],Size);
 800aa92:	3401      	adds	r4, #1
 800aa94:	1a5b      	subs	r3, r3, r1
 800aa96:	00d8      	lsls	r0, r3, #3
 800aa98:	1900      	adds	r0, r0, r4
 800aa9a:	1940      	adds	r0, r0, r5
 800aa9c:	0011      	movs	r1, r2
 800aa9e:	f7ff ffd5 	bl	800aa4c <TransmitData>
	Module_Status result = H1AR0_OK;
 800aaa2:	2000      	movs	r0, #0
		break;
 800aaa4:	e7ed      	b.n	800aa82 <Module_MessagingTask+0xe>
 800aaa6:	46c0      	nop			; (mov r8, r8)
 800aaa8:	00000514 	.word	0x00000514
 800aaac:	20000d38 	.word	0x20000d38

0800aab0 <CLI_Transmit_DataCommand>:

/* -----------------------------------------------------------------------
	|															Commands																 	|
   ----------------------------------------------------------------------- 
*/
portBASE_TYPE CLI_Transmit_DataCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 800aab0:	b510      	push	{r4, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	0004      	movs	r4, r0
 800aab6:	0010      	movs	r0, r2
	Module_Status status = H1AR0_OK;;



	static int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	9301      	str	r3, [sp, #4]


	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameterStringLength1 );
 800aabc:	aa01      	add	r2, sp, #4
 800aabe:	2101      	movs	r1, #1
 800aac0:	f003 fc38 	bl	800e334 <FreeRTOS_CLIGetParameter>
 800aac4:	4b0c      	ldr	r3, [pc, #48]	; (800aaf8 <CLI_Transmit_DataCommand+0x48>)
 800aac6:	6758      	str	r0, [r3, #116]	; 0x74


	status=TransmitData(pcParameterString1, xParameterStringLength1);
 800aac8:	9b01      	ldr	r3, [sp, #4]
 800aaca:	b299      	uxth	r1, r3
 800aacc:	f7ff ffbe 	bl	800aa4c <TransmitData>
	if(status == H1AR0_OK)
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d004      	beq.n	800aade <CLI_Transmit_DataCommand+0x2e>
	{
		sprintf((char* )pcWriteBuffer,(char* )pcOKMessage,pcParameterString1);

	}

	else if(status == H1AR0_ERROR)
 800aad4:	28ff      	cmp	r0, #255	; 0xff
 800aad6:	d009      	beq.n	800aaec <CLI_Transmit_DataCommand+0x3c>
		strcpy((char* )pcWriteBuffer,(char* )pcWrongParamsMessage);



	return pdFALSE;
}
 800aad8:	2000      	movs	r0, #0
 800aada:	b002      	add	sp, #8
 800aadc:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcOKMessage,pcParameterString1);
 800aade:	4b06      	ldr	r3, [pc, #24]	; (800aaf8 <CLI_Transmit_DataCommand+0x48>)
 800aae0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800aae2:	4906      	ldr	r1, [pc, #24]	; (800aafc <CLI_Transmit_DataCommand+0x4c>)
 800aae4:	0020      	movs	r0, r4
 800aae6:	f008 feed 	bl	80138c4 <sprintf>
 800aaea:	e7f5      	b.n	800aad8 <CLI_Transmit_DataCommand+0x28>
		strcpy((char* )pcWriteBuffer,(char* )pcWrongParamsMessage);
 800aaec:	2210      	movs	r2, #16
 800aaee:	4904      	ldr	r1, [pc, #16]	; (800ab00 <CLI_Transmit_DataCommand+0x50>)
 800aaf0:	0020      	movs	r0, r4
 800aaf2:	f008 fced 	bl	80134d0 <memcpy>
 800aaf6:	e7ef      	b.n	800aad8 <CLI_Transmit_DataCommand+0x28>
 800aaf8:	200021d8 	.word	0x200021d8
 800aafc:	0801c3ac 	.word	0x0801c3ac
 800ab00:	0801c3d4 	.word	0x0801c3d4

0800ab04 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800ab04:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800ab06:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ab0c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ab0e:	2280      	movs	r2, #128	; 0x80
 800ab10:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ab12:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ab14:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ab16:	3320      	adds	r3, #32
 800ab18:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ab1a:	2380      	movs	r3, #128	; 0x80
 800ab1c:	019b      	lsls	r3, r3, #6
 800ab1e:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800ab20:	f005 fe76 	bl	8010810 <HAL_DMA_Init>
}
 800ab24:	bd10      	pop	{r4, pc}

0800ab26 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800ab26:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800ab28:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ab2a:	2310      	movs	r3, #16
 800ab2c:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ab32:	2280      	movs	r2, #128	; 0x80
 800ab34:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ab36:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ab38:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800ab3a:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ab3c:	2380      	movs	r3, #128	; 0x80
 800ab3e:	019b      	lsls	r3, r3, #6
 800ab40:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800ab42:	f005 fe65 	bl	8010810 <HAL_DMA_Init>
}
 800ab46:	bd10      	pop	{r4, pc}

0800ab48 <DMA_Init>:
{
 800ab48:	b510      	push	{r4, lr}
 800ab4a:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800ab4c:	4b1d      	ldr	r3, [pc, #116]	; (800abc4 <DMA_Init+0x7c>)
 800ab4e:	6959      	ldr	r1, [r3, #20]
 800ab50:	2201      	movs	r2, #1
 800ab52:	4311      	orrs	r1, r2
 800ab54:	6159      	str	r1, [r3, #20]
 800ab56:	6959      	ldr	r1, [r3, #20]
 800ab58:	400a      	ands	r2, r1
 800ab5a:	9200      	str	r2, [sp, #0]
 800ab5c:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800ab5e:	6959      	ldr	r1, [r3, #20]
 800ab60:	2202      	movs	r2, #2
 800ab62:	4311      	orrs	r1, r2
 800ab64:	6159      	str	r1, [r3, #20]
 800ab66:	695b      	ldr	r3, [r3, #20]
 800ab68:	401a      	ands	r2, r3
 800ab6a:	9201      	str	r2, [sp, #4]
 800ab6c:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800ab6e:	4c16      	ldr	r4, [pc, #88]	; (800abc8 <DMA_Init+0x80>)
 800ab70:	4916      	ldr	r1, [pc, #88]	; (800abcc <DMA_Init+0x84>)
 800ab72:	0020      	movs	r0, r4
 800ab74:	f7ff ffc6 	bl	800ab04 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800ab78:	0020      	movs	r0, r4
 800ab7a:	3038      	adds	r0, #56	; 0x38
 800ab7c:	4914      	ldr	r1, [pc, #80]	; (800abd0 <DMA_Init+0x88>)
 800ab7e:	f7ff ffc1 	bl	800ab04 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA2_Channel2);
 800ab82:	0020      	movs	r0, r4
 800ab84:	3070      	adds	r0, #112	; 0x70
 800ab86:	4913      	ldr	r1, [pc, #76]	; (800abd4 <DMA_Init+0x8c>)
 800ab88:	f7ff ffbc 	bl	800ab04 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel5);
 800ab8c:	0020      	movs	r0, r4
 800ab8e:	30a8      	adds	r0, #168	; 0xa8
 800ab90:	4911      	ldr	r1, [pc, #68]	; (800abd8 <DMA_Init+0x90>)
 800ab92:	f7ff ffb7 	bl	800ab04 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel3);
 800ab96:	0020      	movs	r0, r4
 800ab98:	30e0      	adds	r0, #224	; 0xe0
 800ab9a:	4910      	ldr	r1, [pc, #64]	; (800abdc <DMA_Init+0x94>)
 800ab9c:	f7ff ffb2 	bl	800ab04 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800aba0:	4c0f      	ldr	r4, [pc, #60]	; (800abe0 <DMA_Init+0x98>)
 800aba2:	4910      	ldr	r1, [pc, #64]	; (800abe4 <DMA_Init+0x9c>)
 800aba4:	0020      	movs	r0, r4
 800aba6:	f7ff ffbe 	bl	800ab26 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800abaa:	0020      	movs	r0, r4
 800abac:	3038      	adds	r0, #56	; 0x38
 800abae:	490e      	ldr	r1, [pc, #56]	; (800abe8 <DMA_Init+0xa0>)
 800abb0:	f7ff ffb9 	bl	800ab26 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800abb4:	0020      	movs	r0, r4
 800abb6:	3070      	adds	r0, #112	; 0x70
 800abb8:	490c      	ldr	r1, [pc, #48]	; (800abec <DMA_Init+0xa4>)
 800abba:	f7ff ffb4 	bl	800ab26 <DMA_MSG_TX_CH_Init>
}
 800abbe:	b002      	add	sp, #8
 800abc0:	bd10      	pop	{r4, pc}
 800abc2:	46c0      	nop			; (mov r8, r8)
 800abc4:	40021000 	.word	0x40021000
 800abc8:	20002848 	.word	0x20002848
 800abcc:	40020008 	.word	0x40020008
 800abd0:	40020030 	.word	0x40020030
 800abd4:	4002041c 	.word	0x4002041c
 800abd8:	40020058 	.word	0x40020058
 800abdc:	40020430 	.word	0x40020430
 800abe0:	200027a0 	.word	0x200027a0
 800abe4:	4002001c 	.word	0x4002001c
 800abe8:	40020044 	.word	0x40020044
 800abec:	40020080 	.word	0x40020080

0800abf0 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800abf0:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800abf2:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800abf4:	2300      	movs	r3, #0
 800abf6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800abf8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800abfa:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800abfc:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800abfe:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ac00:	3320      	adds	r3, #32
 800ac02:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800ac04:	2380      	movs	r3, #128	; 0x80
 800ac06:	015b      	lsls	r3, r3, #5
 800ac08:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800ac0a:	f005 fe01 	bl	8010810 <HAL_DMA_Init>
}
 800ac0e:	bd10      	pop	{r4, pc}

0800ac10 <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 800ac10:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 800ac12:	1e44      	subs	r4, r0, #1
 800ac14:	00e5      	lsls	r5, r4, #3
 800ac16:	1b28      	subs	r0, r5, r4
 800ac18:	00c0      	lsls	r0, r0, #3
 800ac1a:	4e07      	ldr	r6, [pc, #28]	; (800ac38 <StopStreamDMA+0x28>)
 800ac1c:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800ac1e:	f005 fe4a 	bl	80108b6 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800ac22:	1b2d      	subs	r5, r5, r4
 800ac24:	00ed      	lsls	r5, r5, #3
 800ac26:	59aa      	ldr	r2, [r5, r6]
 800ac28:	2300      	movs	r3, #0
 800ac2a:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800ac2c:	00a4      	lsls	r4, r4, #2
 800ac2e:	4a03      	ldr	r2, [pc, #12]	; (800ac3c <StopStreamDMA+0x2c>)
 800ac30:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 800ac32:	4a03      	ldr	r2, [pc, #12]	; (800ac40 <StopStreamDMA+0x30>)
 800ac34:	50a3      	str	r3, [r4, r2]

}
 800ac36:	bd70      	pop	{r4, r5, r6, pc}
 800ac38:	20002650 	.word	0x20002650
 800ac3c:	200019d0 	.word	0x200019d0
 800ac40:	200019e4 	.word	0x200019e4

0800ac44 <StopMsgDMA>:


/* --- Stop a messaging DMA ---
 */
void StopMsgDMA(uint8_t port){
 800ac44:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800ac46:	1e45      	subs	r5, r0, #1
 800ac48:	00ec      	lsls	r4, r5, #3
 800ac4a:	1b60      	subs	r0, r4, r5
 800ac4c:	00c0      	lsls	r0, r0, #3
 800ac4e:	4e05      	ldr	r6, [pc, #20]	; (800ac64 <StopMsgDMA+0x20>)
 800ac50:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800ac52:	f005 fe30 	bl	80108b6 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800ac56:	1b64      	subs	r4, r4, r5
 800ac58:	00e4      	lsls	r4, r4, #3
 800ac5a:	59a3      	ldr	r3, [r4, r6]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	605a      	str	r2, [r3, #4]
}
 800ac60:	bd70      	pop	{r4, r5, r6, pc}
 800ac62:	46c0      	nop			; (mov r8, r8)
 800ac64:	20002848 	.word	0x20002848

0800ac68 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 800ac68:	b510      	push	{r4, lr}
 800ac6a:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?

	// Stop the messaging DMA
	StopMsgDMA(port);
 800ac6c:	f7ff ffea 	bl	800ac44 <StopMsgDMA>

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
 800ac70:	3c01      	subs	r4, #1
 800ac72:	00e0      	lsls	r0, r4, #3
 800ac74:	1b02      	subs	r2, r0, r4
 800ac76:	00d2      	lsls	r2, r2, #3
 800ac78:	4903      	ldr	r1, [pc, #12]	; (800ac88 <SwitchMsgDMAToStream+0x20>)
 800ac7a:	5851      	ldr	r1, [r2, r1]
 800ac7c:	4b03      	ldr	r3, [pc, #12]	; (800ac8c <SwitchMsgDMAToStream+0x24>)
 800ac7e:	18d0      	adds	r0, r2, r3
 800ac80:	f7ff ffb6 	bl	800abf0 <DMA_STREAM_CH_Init>
}
 800ac84:	bd10      	pop	{r4, pc}
 800ac86:	46c0      	nop			; (mov r8, r8)
 800ac88:	20002848 	.word	0x20002848
 800ac8c:	20002650 	.word	0x20002650

0800ac90 <SetupDMAInterrupts>:
}

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800ac90:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800ac92:	6803      	ldr	r3, [r0, #0]
 800ac94:	4a10      	ldr	r2, [pc, #64]	; (800acd8 <SetupDMAInterrupts+0x48>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d015      	beq.n	800acc6 <SetupDMAInterrupts+0x36>
 800ac9a:	d80a      	bhi.n	800acb2 <SetupDMAInterrupts+0x22>
 800ac9c:	4a0f      	ldr	r2, [pc, #60]	; (800acdc <SetupDMAInterrupts+0x4c>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d110      	bne.n	800acc4 <SetupDMAInterrupts+0x34>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800aca2:	2200      	movs	r2, #0
 800aca4:	2009      	movs	r0, #9
 800aca6:	f005 fc11 	bl	80104cc <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800acaa:	2009      	movs	r0, #9
 800acac:	f005 fc3e 	bl	801052c <HAL_NVIC_EnableIRQ>
			break;
 800acb0:	e008      	b.n	800acc4 <SetupDMAInterrupts+0x34>
	switch ((uint32_t)hDMA->Instance)
 800acb2:	4a0b      	ldr	r2, [pc, #44]	; (800ace0 <SetupDMAInterrupts+0x50>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d006      	beq.n	800acc6 <SetupDMAInterrupts+0x36>
 800acb8:	4a0a      	ldr	r2, [pc, #40]	; (800ace4 <SetupDMAInterrupts+0x54>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d003      	beq.n	800acc6 <SetupDMAInterrupts+0x36>
 800acbe:	4a0a      	ldr	r2, [pc, #40]	; (800ace8 <SetupDMAInterrupts+0x58>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d000      	beq.n	800acc6 <SetupDMAInterrupts+0x36>
			break;
		
		default:
			break;
	}			
}
 800acc4:	bd10      	pop	{r4, pc}
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800acc6:	2200      	movs	r2, #0
 800acc8:	200a      	movs	r0, #10
 800acca:	f005 fbff 	bl	80104cc <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800acce:	200a      	movs	r0, #10
 800acd0:	f005 fc2c 	bl	801052c <HAL_NVIC_EnableIRQ>
}
 800acd4:	e7f6      	b.n	800acc4 <SetupDMAInterrupts+0x34>
 800acd6:	46c0      	nop			; (mov r8, r8)
 800acd8:	4002001c 	.word	0x4002001c
 800acdc:	40020008 	.word	0x40020008
 800ace0:	40020408 	.word	0x40020408
 800ace4:	4002041c 	.word	0x4002041c
 800ace8:	40020030 	.word	0x40020030

0800acec <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800acec:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800acee:	6803      	ldr	r3, [r0, #0]
 800acf0:	4a1b      	ldr	r2, [pc, #108]	; (800ad60 <UnSetupDMAInterrupts+0x74>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d02f      	beq.n	800ad56 <UnSetupDMAInterrupts+0x6a>
 800acf6:	d90e      	bls.n	800ad16 <UnSetupDMAInterrupts+0x2a>
 800acf8:	4a1a      	ldr	r2, [pc, #104]	; (800ad64 <UnSetupDMAInterrupts+0x78>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d02b      	beq.n	800ad56 <UnSetupDMAInterrupts+0x6a>
 800acfe:	d915      	bls.n	800ad2c <UnSetupDMAInterrupts+0x40>
 800ad00:	4a19      	ldr	r2, [pc, #100]	; (800ad68 <UnSetupDMAInterrupts+0x7c>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d020      	beq.n	800ad48 <UnSetupDMAInterrupts+0x5c>
 800ad06:	d923      	bls.n	800ad50 <UnSetupDMAInterrupts+0x64>
 800ad08:	4a18      	ldr	r2, [pc, #96]	; (800ad6c <UnSetupDMAInterrupts+0x80>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d01c      	beq.n	800ad48 <UnSetupDMAInterrupts+0x5c>
 800ad0e:	4a18      	ldr	r2, [pc, #96]	; (800ad70 <UnSetupDMAInterrupts+0x84>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d019      	beq.n	800ad48 <UnSetupDMAInterrupts+0x5c>
 800ad14:	e009      	b.n	800ad2a <UnSetupDMAInterrupts+0x3e>
 800ad16:	4a17      	ldr	r2, [pc, #92]	; (800ad74 <UnSetupDMAInterrupts+0x88>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d103      	bne.n	800ad24 <UnSetupDMAInterrupts+0x38>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800ad1c:	2009      	movs	r0, #9
 800ad1e:	f005 fc0f 	bl	8010540 <HAL_NVIC_DisableIRQ>
			break;
 800ad22:	e002      	b.n	800ad2a <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800ad24:	4a14      	ldr	r2, [pc, #80]	; (800ad78 <UnSetupDMAInterrupts+0x8c>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d015      	beq.n	800ad56 <UnSetupDMAInterrupts+0x6a>
			break;
		
		default:
			break;
	}			
}
 800ad2a:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800ad2c:	4a13      	ldr	r2, [pc, #76]	; (800ad7c <UnSetupDMAInterrupts+0x90>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d00a      	beq.n	800ad48 <UnSetupDMAInterrupts+0x5c>
 800ad32:	d903      	bls.n	800ad3c <UnSetupDMAInterrupts+0x50>
 800ad34:	4a12      	ldr	r2, [pc, #72]	; (800ad80 <UnSetupDMAInterrupts+0x94>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d006      	beq.n	800ad48 <UnSetupDMAInterrupts+0x5c>
 800ad3a:	e7f6      	b.n	800ad2a <UnSetupDMAInterrupts+0x3e>
 800ad3c:	4a11      	ldr	r2, [pc, #68]	; (800ad84 <UnSetupDMAInterrupts+0x98>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d002      	beq.n	800ad48 <UnSetupDMAInterrupts+0x5c>
 800ad42:	4a11      	ldr	r2, [pc, #68]	; (800ad88 <UnSetupDMAInterrupts+0x9c>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d1f0      	bne.n	800ad2a <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800ad48:	200b      	movs	r0, #11
 800ad4a:	f005 fbf9 	bl	8010540 <HAL_NVIC_DisableIRQ>
}
 800ad4e:	e7ec      	b.n	800ad2a <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800ad50:	4a0e      	ldr	r2, [pc, #56]	; (800ad8c <UnSetupDMAInterrupts+0xa0>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d1e9      	bne.n	800ad2a <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800ad56:	200a      	movs	r0, #10
 800ad58:	f005 fbf2 	bl	8010540 <HAL_NVIC_DisableIRQ>
			break;
 800ad5c:	e7e5      	b.n	800ad2a <UnSetupDMAInterrupts+0x3e>
 800ad5e:	46c0      	nop			; (mov r8, r8)
 800ad60:	40020030 	.word	0x40020030
 800ad64:	40020408 	.word	0x40020408
 800ad68:	40020430 	.word	0x40020430
 800ad6c:	40020444 	.word	0x40020444
 800ad70:	40020458 	.word	0x40020458
 800ad74:	40020008 	.word	0x40020008
 800ad78:	4002001c 	.word	0x4002001c
 800ad7c:	4002006c 	.word	0x4002006c
 800ad80:	40020080 	.word	0x40020080
 800ad84:	40020044 	.word	0x40020044
 800ad88:	40020058 	.word	0x40020058
 800ad8c:	4002041c 	.word	0x4002041c

0800ad90 <DMA_MSG_TX_UnSetup>:
{	
 800ad90:	b510      	push	{r4, lr}
 800ad92:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800ad94:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800ad96:	f7ff ffa9 	bl	800acec <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800ad9a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800ada0:	6623      	str	r3, [r4, #96]	; 0x60
}
 800ada2:	bd10      	pop	{r4, pc}

0800ada4 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800ada4:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800ada6:	6803      	ldr	r3, [r0, #0]
 800ada8:	4acc      	ldr	r2, [pc, #816]	; (800b0dc <RemapAndLinkDMAtoUARTRx+0x338>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d100      	bne.n	800adb0 <RemapAndLinkDMAtoUARTRx+0xc>
 800adae:	e0ca      	b.n	800af46 <RemapAndLinkDMAtoUARTRx+0x1a2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800adb0:	4aca      	ldr	r2, [pc, #808]	; (800b0dc <RemapAndLinkDMAtoUARTRx+0x338>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d100      	bne.n	800adb8 <RemapAndLinkDMAtoUARTRx+0x14>
 800adb6:	e0d8      	b.n	800af6a <RemapAndLinkDMAtoUARTRx+0x1c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800adb8:	4ac8      	ldr	r2, [pc, #800]	; (800b0dc <RemapAndLinkDMAtoUARTRx+0x338>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d100      	bne.n	800adc0 <RemapAndLinkDMAtoUARTRx+0x1c>
 800adbe:	e0e5      	b.n	800af8c <RemapAndLinkDMAtoUARTRx+0x1e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800adc0:	4ac6      	ldr	r2, [pc, #792]	; (800b0dc <RemapAndLinkDMAtoUARTRx+0x338>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d100      	bne.n	800adc8 <RemapAndLinkDMAtoUARTRx+0x24>
 800adc6:	e0f2      	b.n	800afae <RemapAndLinkDMAtoUARTRx+0x20a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800adc8:	4ac4      	ldr	r2, [pc, #784]	; (800b0dc <RemapAndLinkDMAtoUARTRx+0x338>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d100      	bne.n	800add0 <RemapAndLinkDMAtoUARTRx+0x2c>
 800adce:	e0ff      	b.n	800afd0 <RemapAndLinkDMAtoUARTRx+0x22c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	}
	else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800add0:	4ac2      	ldr	r2, [pc, #776]	; (800b0dc <RemapAndLinkDMAtoUARTRx+0x338>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d100      	bne.n	800add8 <RemapAndLinkDMAtoUARTRx+0x34>
 800add6:	e10b      	b.n	800aff0 <RemapAndLinkDMAtoUARTRx+0x24c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);
	// USART 2
	}
	else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800add8:	4ac1      	ldr	r2, [pc, #772]	; (800b0e0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d100      	bne.n	800ade0 <RemapAndLinkDMAtoUARTRx+0x3c>
 800adde:	e118      	b.n	800b012 <RemapAndLinkDMAtoUARTRx+0x26e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800ade0:	4abf      	ldr	r2, [pc, #764]	; (800b0e0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d100      	bne.n	800ade8 <RemapAndLinkDMAtoUARTRx+0x44>
 800ade6:	e124      	b.n	800b032 <RemapAndLinkDMAtoUARTRx+0x28e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800ade8:	4abd      	ldr	r2, [pc, #756]	; (800b0e0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d100      	bne.n	800adf0 <RemapAndLinkDMAtoUARTRx+0x4c>
 800adee:	e131      	b.n	800b054 <RemapAndLinkDMAtoUARTRx+0x2b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800adf0:	4abb      	ldr	r2, [pc, #748]	; (800b0e0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d100      	bne.n	800adf8 <RemapAndLinkDMAtoUARTRx+0x54>
 800adf6:	e13e      	b.n	800b076 <RemapAndLinkDMAtoUARTRx+0x2d2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800adf8:	4ab9      	ldr	r2, [pc, #740]	; (800b0e0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d100      	bne.n	800ae00 <RemapAndLinkDMAtoUARTRx+0x5c>
 800adfe:	e14b      	b.n	800b098 <RemapAndLinkDMAtoUARTRx+0x2f4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	}
	else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800ae00:	4ab7      	ldr	r2, [pc, #732]	; (800b0e0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d100      	bne.n	800ae08 <RemapAndLinkDMAtoUARTRx+0x64>
 800ae06:	e157      	b.n	800b0b8 <RemapAndLinkDMAtoUARTRx+0x314>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);
	// USART 3
	}
	else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800ae08:	4ab6      	ldr	r2, [pc, #728]	; (800b0e4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d100      	bne.n	800ae10 <RemapAndLinkDMAtoUARTRx+0x6c>
 800ae0e:	e18b      	b.n	800b128 <RemapAndLinkDMAtoUARTRx+0x384>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800ae10:	4ab4      	ldr	r2, [pc, #720]	; (800b0e4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d100      	bne.n	800ae18 <RemapAndLinkDMAtoUARTRx+0x74>
 800ae16:	e197      	b.n	800b148 <RemapAndLinkDMAtoUARTRx+0x3a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800ae18:	4ab2      	ldr	r2, [pc, #712]	; (800b0e4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d100      	bne.n	800ae20 <RemapAndLinkDMAtoUARTRx+0x7c>
 800ae1e:	e1a4      	b.n	800b16a <RemapAndLinkDMAtoUARTRx+0x3c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800ae20:	4ab0      	ldr	r2, [pc, #704]	; (800b0e4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d100      	bne.n	800ae28 <RemapAndLinkDMAtoUARTRx+0x84>
 800ae26:	e1b1      	b.n	800b18c <RemapAndLinkDMAtoUARTRx+0x3e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800ae28:	4aae      	ldr	r2, [pc, #696]	; (800b0e4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d100      	bne.n	800ae30 <RemapAndLinkDMAtoUARTRx+0x8c>
 800ae2e:	e1be      	b.n	800b1ae <RemapAndLinkDMAtoUARTRx+0x40a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	}
	else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800ae30:	4aac      	ldr	r2, [pc, #688]	; (800b0e4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d100      	bne.n	800ae38 <RemapAndLinkDMAtoUARTRx+0x94>
 800ae36:	e1ca      	b.n	800b1ce <RemapAndLinkDMAtoUARTRx+0x42a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);
	// USART 4
	}
	else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800ae38:	4aab      	ldr	r2, [pc, #684]	; (800b0e8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d100      	bne.n	800ae40 <RemapAndLinkDMAtoUARTRx+0x9c>
 800ae3e:	e1d7      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x44c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800ae40:	4aa9      	ldr	r2, [pc, #676]	; (800b0e8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d100      	bne.n	800ae48 <RemapAndLinkDMAtoUARTRx+0xa4>
 800ae46:	e1e3      	b.n	800b210 <RemapAndLinkDMAtoUARTRx+0x46c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800ae48:	4aa7      	ldr	r2, [pc, #668]	; (800b0e8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d100      	bne.n	800ae50 <RemapAndLinkDMAtoUARTRx+0xac>
 800ae4e:	e1f0      	b.n	800b232 <RemapAndLinkDMAtoUARTRx+0x48e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800ae50:	4aa5      	ldr	r2, [pc, #660]	; (800b0e8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d100      	bne.n	800ae58 <RemapAndLinkDMAtoUARTRx+0xb4>
 800ae56:	e1fd      	b.n	800b254 <RemapAndLinkDMAtoUARTRx+0x4b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800ae58:	4aa3      	ldr	r2, [pc, #652]	; (800b0e8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d100      	bne.n	800ae60 <RemapAndLinkDMAtoUARTRx+0xbc>
 800ae5e:	e20a      	b.n	800b276 <RemapAndLinkDMAtoUARTRx+0x4d2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	}
	else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800ae60:	4aa1      	ldr	r2, [pc, #644]	; (800b0e8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d100      	bne.n	800ae68 <RemapAndLinkDMAtoUARTRx+0xc4>
 800ae66:	e216      	b.n	800b296 <RemapAndLinkDMAtoUARTRx+0x4f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);
	// USART 5
	}
	else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800ae68:	4aa0      	ldr	r2, [pc, #640]	; (800b0ec <RemapAndLinkDMAtoUARTRx+0x348>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d100      	bne.n	800ae70 <RemapAndLinkDMAtoUARTRx+0xcc>
 800ae6e:	e223      	b.n	800b2b8 <RemapAndLinkDMAtoUARTRx+0x514>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800ae70:	4a9e      	ldr	r2, [pc, #632]	; (800b0ec <RemapAndLinkDMAtoUARTRx+0x348>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d100      	bne.n	800ae78 <RemapAndLinkDMAtoUARTRx+0xd4>
 800ae76:	e22f      	b.n	800b2d8 <RemapAndLinkDMAtoUARTRx+0x534>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800ae78:	4a9c      	ldr	r2, [pc, #624]	; (800b0ec <RemapAndLinkDMAtoUARTRx+0x348>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d100      	bne.n	800ae80 <RemapAndLinkDMAtoUARTRx+0xdc>
 800ae7e:	e23c      	b.n	800b2fa <RemapAndLinkDMAtoUARTRx+0x556>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800ae80:	4a9a      	ldr	r2, [pc, #616]	; (800b0ec <RemapAndLinkDMAtoUARTRx+0x348>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d100      	bne.n	800ae88 <RemapAndLinkDMAtoUARTRx+0xe4>
 800ae86:	e249      	b.n	800b31c <RemapAndLinkDMAtoUARTRx+0x578>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800ae88:	4a98      	ldr	r2, [pc, #608]	; (800b0ec <RemapAndLinkDMAtoUARTRx+0x348>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d100      	bne.n	800ae90 <RemapAndLinkDMAtoUARTRx+0xec>
 800ae8e:	e256      	b.n	800b33e <RemapAndLinkDMAtoUARTRx+0x59a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	}
	else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800ae90:	4a96      	ldr	r2, [pc, #600]	; (800b0ec <RemapAndLinkDMAtoUARTRx+0x348>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d100      	bne.n	800ae98 <RemapAndLinkDMAtoUARTRx+0xf4>
 800ae96:	e262      	b.n	800b35e <RemapAndLinkDMAtoUARTRx+0x5ba>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);
	// USART 6
	}
	else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800ae98:	4a95      	ldr	r2, [pc, #596]	; (800b0f0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d100      	bne.n	800aea0 <RemapAndLinkDMAtoUARTRx+0xfc>
 800ae9e:	e26f      	b.n	800b380 <RemapAndLinkDMAtoUARTRx+0x5dc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800aea0:	4a93      	ldr	r2, [pc, #588]	; (800b0f0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d100      	bne.n	800aea8 <RemapAndLinkDMAtoUARTRx+0x104>
 800aea6:	e27b      	b.n	800b3a0 <RemapAndLinkDMAtoUARTRx+0x5fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800aea8:	4a91      	ldr	r2, [pc, #580]	; (800b0f0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d100      	bne.n	800aeb0 <RemapAndLinkDMAtoUARTRx+0x10c>
 800aeae:	e288      	b.n	800b3c2 <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800aeb0:	4a8f      	ldr	r2, [pc, #572]	; (800b0f0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d100      	bne.n	800aeb8 <RemapAndLinkDMAtoUARTRx+0x114>
 800aeb6:	e295      	b.n	800b3e4 <RemapAndLinkDMAtoUARTRx+0x640>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800aeb8:	4a8d      	ldr	r2, [pc, #564]	; (800b0f0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d100      	bne.n	800aec0 <RemapAndLinkDMAtoUARTRx+0x11c>
 800aebe:	e2a2      	b.n	800b406 <RemapAndLinkDMAtoUARTRx+0x662>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	}
	else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800aec0:	4a8b      	ldr	r2, [pc, #556]	; (800b0f0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d100      	bne.n	800aec8 <RemapAndLinkDMAtoUARTRx+0x124>
 800aec6:	e2ae      	b.n	800b426 <RemapAndLinkDMAtoUARTRx+0x682>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);
	// USART 7
	}
	else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800aec8:	4a8a      	ldr	r2, [pc, #552]	; (800b0f4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d100      	bne.n	800aed0 <RemapAndLinkDMAtoUARTRx+0x12c>
 800aece:	e2bb      	b.n	800b448 <RemapAndLinkDMAtoUARTRx+0x6a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800aed0:	4a88      	ldr	r2, [pc, #544]	; (800b0f4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d100      	bne.n	800aed8 <RemapAndLinkDMAtoUARTRx+0x134>
 800aed6:	e2c7      	b.n	800b468 <RemapAndLinkDMAtoUARTRx+0x6c4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800aed8:	4a86      	ldr	r2, [pc, #536]	; (800b0f4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d100      	bne.n	800aee0 <RemapAndLinkDMAtoUARTRx+0x13c>
 800aede:	e2d4      	b.n	800b48a <RemapAndLinkDMAtoUARTRx+0x6e6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800aee0:	4a84      	ldr	r2, [pc, #528]	; (800b0f4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d100      	bne.n	800aee8 <RemapAndLinkDMAtoUARTRx+0x144>
 800aee6:	e2f7      	b.n	800b4d8 <RemapAndLinkDMAtoUARTRx+0x734>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800aee8:	4a82      	ldr	r2, [pc, #520]	; (800b0f4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d100      	bne.n	800aef0 <RemapAndLinkDMAtoUARTRx+0x14c>
 800aeee:	e304      	b.n	800b4fa <RemapAndLinkDMAtoUARTRx+0x756>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	}
	else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800aef0:	4a80      	ldr	r2, [pc, #512]	; (800b0f4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d100      	bne.n	800aef8 <RemapAndLinkDMAtoUARTRx+0x154>
 800aef6:	e310      	b.n	800b51a <RemapAndLinkDMAtoUARTRx+0x776>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);
	// USART 8
	}
	else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800aef8:	4a7f      	ldr	r2, [pc, #508]	; (800b0f8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d100      	bne.n	800af00 <RemapAndLinkDMAtoUARTRx+0x15c>
 800aefe:	e31d      	b.n	800b53c <RemapAndLinkDMAtoUARTRx+0x798>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800af00:	4a7d      	ldr	r2, [pc, #500]	; (800b0f8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d100      	bne.n	800af08 <RemapAndLinkDMAtoUARTRx+0x164>
 800af06:	e328      	b.n	800b55a <RemapAndLinkDMAtoUARTRx+0x7b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800af08:	4a7b      	ldr	r2, [pc, #492]	; (800b0f8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d100      	bne.n	800af10 <RemapAndLinkDMAtoUARTRx+0x16c>
 800af0e:	e335      	b.n	800b57c <RemapAndLinkDMAtoUARTRx+0x7d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800af10:	4a79      	ldr	r2, [pc, #484]	; (800b0f8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d100      	bne.n	800af18 <RemapAndLinkDMAtoUARTRx+0x174>
 800af16:	e342      	b.n	800b59e <RemapAndLinkDMAtoUARTRx+0x7fa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800af18:	4a77      	ldr	r2, [pc, #476]	; (800b0f8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d100      	bne.n	800af20 <RemapAndLinkDMAtoUARTRx+0x17c>
 800af1e:	e34f      	b.n	800b5c0 <RemapAndLinkDMAtoUARTRx+0x81c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	}
	else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800af20:	4a75      	ldr	r2, [pc, #468]	; (800b0f8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d11e      	bne.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800af26:	4b75      	ldr	r3, [pc, #468]	; (800b0fc <RemapAndLinkDMAtoUARTRx+0x358>)
 800af28:	680a      	ldr	r2, [r1, #0]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d11a      	bne.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);
 800af2e:	4a74      	ldr	r2, [pc, #464]	; (800b100 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800af30:	23a8      	movs	r3, #168	; 0xa8
 800af32:	58d4      	ldr	r4, [r2, r3]
 800af34:	4d73      	ldr	r5, [pc, #460]	; (800b104 <RemapAndLinkDMAtoUARTRx+0x360>)
 800af36:	402c      	ands	r4, r5
 800af38:	50d4      	str	r4, [r2, r3]
 800af3a:	58d5      	ldr	r5, [r2, r3]
 800af3c:	24f0      	movs	r4, #240	; 0xf0
 800af3e:	0124      	lsls	r4, r4, #4
 800af40:	432c      	orrs	r4, r5
 800af42:	50d4      	str	r4, [r2, r3]
 800af44:	e00e      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800af46:	4a70      	ldr	r2, [pc, #448]	; (800b108 <RemapAndLinkDMAtoUARTRx+0x364>)
 800af48:	680c      	ldr	r4, [r1, #0]
 800af4a:	4294      	cmp	r4, r2
 800af4c:	d000      	beq.n	800af50 <RemapAndLinkDMAtoUARTRx+0x1ac>
 800af4e:	e72f      	b.n	800adb0 <RemapAndLinkDMAtoUARTRx+0xc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800af50:	4a6e      	ldr	r2, [pc, #440]	; (800b10c <RemapAndLinkDMAtoUARTRx+0x368>)
 800af52:	23a8      	movs	r3, #168	; 0xa8
 800af54:	58d4      	ldr	r4, [r2, r3]
 800af56:	250f      	movs	r5, #15
 800af58:	43ac      	bics	r4, r5
 800af5a:	50d4      	str	r4, [r2, r3]
 800af5c:	58d4      	ldr	r4, [r2, r3]
 800af5e:	3d07      	subs	r5, #7
 800af60:	432c      	orrs	r4, r5
 800af62:	50d4      	str	r4, [r2, r3]
	}
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800af64:	6641      	str	r1, [r0, #100]	; 0x64
 800af66:	6248      	str	r0, [r1, #36]	; 0x24
}
 800af68:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800af6a:	4a69      	ldr	r2, [pc, #420]	; (800b110 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800af6c:	680c      	ldr	r4, [r1, #0]
 800af6e:	4294      	cmp	r4, r2
 800af70:	d000      	beq.n	800af74 <RemapAndLinkDMAtoUARTRx+0x1d0>
 800af72:	e721      	b.n	800adb8 <RemapAndLinkDMAtoUARTRx+0x14>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800af74:	4a65      	ldr	r2, [pc, #404]	; (800b10c <RemapAndLinkDMAtoUARTRx+0x368>)
 800af76:	23a8      	movs	r3, #168	; 0xa8
 800af78:	58d4      	ldr	r4, [r2, r3]
 800af7a:	4d62      	ldr	r5, [pc, #392]	; (800b104 <RemapAndLinkDMAtoUARTRx+0x360>)
 800af7c:	402c      	ands	r4, r5
 800af7e:	50d4      	str	r4, [r2, r3]
 800af80:	58d5      	ldr	r5, [r2, r3]
 800af82:	2480      	movs	r4, #128	; 0x80
 800af84:	0124      	lsls	r4, r4, #4
 800af86:	432c      	orrs	r4, r5
 800af88:	50d4      	str	r4, [r2, r3]
 800af8a:	e7eb      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800af8c:	4a61      	ldr	r2, [pc, #388]	; (800b114 <RemapAndLinkDMAtoUARTRx+0x370>)
 800af8e:	680c      	ldr	r4, [r1, #0]
 800af90:	4294      	cmp	r4, r2
 800af92:	d000      	beq.n	800af96 <RemapAndLinkDMAtoUARTRx+0x1f2>
 800af94:	e714      	b.n	800adc0 <RemapAndLinkDMAtoUARTRx+0x1c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800af96:	4a5d      	ldr	r2, [pc, #372]	; (800b10c <RemapAndLinkDMAtoUARTRx+0x368>)
 800af98:	23a8      	movs	r3, #168	; 0xa8
 800af9a:	58d4      	ldr	r4, [r2, r3]
 800af9c:	4d5e      	ldr	r5, [pc, #376]	; (800b118 <RemapAndLinkDMAtoUARTRx+0x374>)
 800af9e:	402c      	ands	r4, r5
 800afa0:	50d4      	str	r4, [r2, r3]
 800afa2:	58d5      	ldr	r5, [r2, r3]
 800afa4:	2480      	movs	r4, #128	; 0x80
 800afa6:	0324      	lsls	r4, r4, #12
 800afa8:	432c      	orrs	r4, r5
 800afaa:	50d4      	str	r4, [r2, r3]
 800afac:	e7da      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800afae:	4a5b      	ldr	r2, [pc, #364]	; (800b11c <RemapAndLinkDMAtoUARTRx+0x378>)
 800afb0:	680c      	ldr	r4, [r1, #0]
 800afb2:	4294      	cmp	r4, r2
 800afb4:	d000      	beq.n	800afb8 <RemapAndLinkDMAtoUARTRx+0x214>
 800afb6:	e707      	b.n	800adc8 <RemapAndLinkDMAtoUARTRx+0x24>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800afb8:	4a54      	ldr	r2, [pc, #336]	; (800b10c <RemapAndLinkDMAtoUARTRx+0x368>)
 800afba:	23a8      	movs	r3, #168	; 0xa8
 800afbc:	58d4      	ldr	r4, [r2, r3]
 800afbe:	4d58      	ldr	r5, [pc, #352]	; (800b120 <RemapAndLinkDMAtoUARTRx+0x37c>)
 800afc0:	402c      	ands	r4, r5
 800afc2:	50d4      	str	r4, [r2, r3]
 800afc4:	58d5      	ldr	r5, [r2, r3]
 800afc6:	2480      	movs	r4, #128	; 0x80
 800afc8:	0424      	lsls	r4, r4, #16
 800afca:	432c      	orrs	r4, r5
 800afcc:	50d4      	str	r4, [r2, r3]
 800afce:	e7c9      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800afd0:	4a54      	ldr	r2, [pc, #336]	; (800b124 <RemapAndLinkDMAtoUARTRx+0x380>)
 800afd2:	680c      	ldr	r4, [r1, #0]
 800afd4:	4294      	cmp	r4, r2
 800afd6:	d000      	beq.n	800afda <RemapAndLinkDMAtoUARTRx+0x236>
 800afd8:	e6fa      	b.n	800add0 <RemapAndLinkDMAtoUARTRx+0x2c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800afda:	4a49      	ldr	r2, [pc, #292]	; (800b100 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800afdc:	23a8      	movs	r3, #168	; 0xa8
 800afde:	58d4      	ldr	r4, [r2, r3]
 800afe0:	25f0      	movs	r5, #240	; 0xf0
 800afe2:	43ac      	bics	r4, r5
 800afe4:	50d4      	str	r4, [r2, r3]
 800afe6:	58d4      	ldr	r4, [r2, r3]
 800afe8:	3d70      	subs	r5, #112	; 0x70
 800afea:	432c      	orrs	r4, r5
 800afec:	50d4      	str	r4, [r2, r3]
 800afee:	e7b9      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800aff0:	4a42      	ldr	r2, [pc, #264]	; (800b0fc <RemapAndLinkDMAtoUARTRx+0x358>)
 800aff2:	680c      	ldr	r4, [r1, #0]
 800aff4:	4294      	cmp	r4, r2
 800aff6:	d000      	beq.n	800affa <RemapAndLinkDMAtoUARTRx+0x256>
 800aff8:	e6ee      	b.n	800add8 <RemapAndLinkDMAtoUARTRx+0x34>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);
 800affa:	4a41      	ldr	r2, [pc, #260]	; (800b100 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800affc:	23a8      	movs	r3, #168	; 0xa8
 800affe:	58d4      	ldr	r4, [r2, r3]
 800b000:	4d40      	ldr	r5, [pc, #256]	; (800b104 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b002:	402c      	ands	r4, r5
 800b004:	50d4      	str	r4, [r2, r3]
 800b006:	58d5      	ldr	r5, [r2, r3]
 800b008:	2480      	movs	r4, #128	; 0x80
 800b00a:	0124      	lsls	r4, r4, #4
 800b00c:	432c      	orrs	r4, r5
 800b00e:	50d4      	str	r4, [r2, r3]
 800b010:	e7a8      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b012:	4a3d      	ldr	r2, [pc, #244]	; (800b108 <RemapAndLinkDMAtoUARTRx+0x364>)
 800b014:	680c      	ldr	r4, [r1, #0]
 800b016:	4294      	cmp	r4, r2
 800b018:	d000      	beq.n	800b01c <RemapAndLinkDMAtoUARTRx+0x278>
 800b01a:	e6e1      	b.n	800ade0 <RemapAndLinkDMAtoUARTRx+0x3c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800b01c:	4a3b      	ldr	r2, [pc, #236]	; (800b10c <RemapAndLinkDMAtoUARTRx+0x368>)
 800b01e:	23a8      	movs	r3, #168	; 0xa8
 800b020:	58d4      	ldr	r4, [r2, r3]
 800b022:	250f      	movs	r5, #15
 800b024:	43ac      	bics	r4, r5
 800b026:	50d4      	str	r4, [r2, r3]
 800b028:	58d4      	ldr	r4, [r2, r3]
 800b02a:	3d06      	subs	r5, #6
 800b02c:	432c      	orrs	r4, r5
 800b02e:	50d4      	str	r4, [r2, r3]
 800b030:	e798      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800b032:	4a37      	ldr	r2, [pc, #220]	; (800b110 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800b034:	680c      	ldr	r4, [r1, #0]
 800b036:	4294      	cmp	r4, r2
 800b038:	d000      	beq.n	800b03c <RemapAndLinkDMAtoUARTRx+0x298>
 800b03a:	e6d5      	b.n	800ade8 <RemapAndLinkDMAtoUARTRx+0x44>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800b03c:	4a33      	ldr	r2, [pc, #204]	; (800b10c <RemapAndLinkDMAtoUARTRx+0x368>)
 800b03e:	23a8      	movs	r3, #168	; 0xa8
 800b040:	58d4      	ldr	r4, [r2, r3]
 800b042:	4d30      	ldr	r5, [pc, #192]	; (800b104 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b044:	402c      	ands	r4, r5
 800b046:	50d4      	str	r4, [r2, r3]
 800b048:	58d5      	ldr	r5, [r2, r3]
 800b04a:	2490      	movs	r4, #144	; 0x90
 800b04c:	0124      	lsls	r4, r4, #4
 800b04e:	432c      	orrs	r4, r5
 800b050:	50d4      	str	r4, [r2, r3]
 800b052:	e787      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800b054:	4a2f      	ldr	r2, [pc, #188]	; (800b114 <RemapAndLinkDMAtoUARTRx+0x370>)
 800b056:	680c      	ldr	r4, [r1, #0]
 800b058:	4294      	cmp	r4, r2
 800b05a:	d000      	beq.n	800b05e <RemapAndLinkDMAtoUARTRx+0x2ba>
 800b05c:	e6c8      	b.n	800adf0 <RemapAndLinkDMAtoUARTRx+0x4c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800b05e:	4a2b      	ldr	r2, [pc, #172]	; (800b10c <RemapAndLinkDMAtoUARTRx+0x368>)
 800b060:	23a8      	movs	r3, #168	; 0xa8
 800b062:	58d4      	ldr	r4, [r2, r3]
 800b064:	4d2c      	ldr	r5, [pc, #176]	; (800b118 <RemapAndLinkDMAtoUARTRx+0x374>)
 800b066:	402c      	ands	r4, r5
 800b068:	50d4      	str	r4, [r2, r3]
 800b06a:	58d5      	ldr	r5, [r2, r3]
 800b06c:	2490      	movs	r4, #144	; 0x90
 800b06e:	0324      	lsls	r4, r4, #12
 800b070:	432c      	orrs	r4, r5
 800b072:	50d4      	str	r4, [r2, r3]
 800b074:	e776      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800b076:	4a29      	ldr	r2, [pc, #164]	; (800b11c <RemapAndLinkDMAtoUARTRx+0x378>)
 800b078:	680c      	ldr	r4, [r1, #0]
 800b07a:	4294      	cmp	r4, r2
 800b07c:	d000      	beq.n	800b080 <RemapAndLinkDMAtoUARTRx+0x2dc>
 800b07e:	e6bb      	b.n	800adf8 <RemapAndLinkDMAtoUARTRx+0x54>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800b080:	4a22      	ldr	r2, [pc, #136]	; (800b10c <RemapAndLinkDMAtoUARTRx+0x368>)
 800b082:	23a8      	movs	r3, #168	; 0xa8
 800b084:	58d4      	ldr	r4, [r2, r3]
 800b086:	4d26      	ldr	r5, [pc, #152]	; (800b120 <RemapAndLinkDMAtoUARTRx+0x37c>)
 800b088:	402c      	ands	r4, r5
 800b08a:	50d4      	str	r4, [r2, r3]
 800b08c:	58d5      	ldr	r5, [r2, r3]
 800b08e:	2490      	movs	r4, #144	; 0x90
 800b090:	0424      	lsls	r4, r4, #16
 800b092:	432c      	orrs	r4, r5
 800b094:	50d4      	str	r4, [r2, r3]
 800b096:	e765      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800b098:	4a22      	ldr	r2, [pc, #136]	; (800b124 <RemapAndLinkDMAtoUARTRx+0x380>)
 800b09a:	680c      	ldr	r4, [r1, #0]
 800b09c:	4294      	cmp	r4, r2
 800b09e:	d000      	beq.n	800b0a2 <RemapAndLinkDMAtoUARTRx+0x2fe>
 800b0a0:	e6ae      	b.n	800ae00 <RemapAndLinkDMAtoUARTRx+0x5c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800b0a2:	4a17      	ldr	r2, [pc, #92]	; (800b100 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b0a4:	23a8      	movs	r3, #168	; 0xa8
 800b0a6:	58d4      	ldr	r4, [r2, r3]
 800b0a8:	25f0      	movs	r5, #240	; 0xf0
 800b0aa:	43ac      	bics	r4, r5
 800b0ac:	50d4      	str	r4, [r2, r3]
 800b0ae:	58d4      	ldr	r4, [r2, r3]
 800b0b0:	3d60      	subs	r5, #96	; 0x60
 800b0b2:	432c      	orrs	r4, r5
 800b0b4:	50d4      	str	r4, [r2, r3]
 800b0b6:	e755      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800b0b8:	4a10      	ldr	r2, [pc, #64]	; (800b0fc <RemapAndLinkDMAtoUARTRx+0x358>)
 800b0ba:	680c      	ldr	r4, [r1, #0]
 800b0bc:	4294      	cmp	r4, r2
 800b0be:	d000      	beq.n	800b0c2 <RemapAndLinkDMAtoUARTRx+0x31e>
 800b0c0:	e6a2      	b.n	800ae08 <RemapAndLinkDMAtoUARTRx+0x64>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);
 800b0c2:	4a0f      	ldr	r2, [pc, #60]	; (800b100 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b0c4:	23a8      	movs	r3, #168	; 0xa8
 800b0c6:	58d4      	ldr	r4, [r2, r3]
 800b0c8:	4d0e      	ldr	r5, [pc, #56]	; (800b104 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b0ca:	402c      	ands	r4, r5
 800b0cc:	50d4      	str	r4, [r2, r3]
 800b0ce:	58d5      	ldr	r5, [r2, r3]
 800b0d0:	2490      	movs	r4, #144	; 0x90
 800b0d2:	0124      	lsls	r4, r4, #4
 800b0d4:	432c      	orrs	r4, r5
 800b0d6:	50d4      	str	r4, [r2, r3]
 800b0d8:	e744      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800b0da:	46c0      	nop			; (mov r8, r8)
 800b0dc:	40013800 	.word	0x40013800
 800b0e0:	40004400 	.word	0x40004400
 800b0e4:	40004800 	.word	0x40004800
 800b0e8:	40004c00 	.word	0x40004c00
 800b0ec:	40005000 	.word	0x40005000
 800b0f0:	40011400 	.word	0x40011400
 800b0f4:	40011800 	.word	0x40011800
 800b0f8:	40011c00 	.word	0x40011c00
 800b0fc:	40020430 	.word	0x40020430
 800b100:	40020400 	.word	0x40020400
 800b104:	fffff0ff 	.word	0xfffff0ff
 800b108:	40020008 	.word	0x40020008
 800b10c:	40020000 	.word	0x40020000
 800b110:	40020030 	.word	0x40020030
 800b114:	40020058 	.word	0x40020058
 800b118:	fff0ffff 	.word	0xfff0ffff
 800b11c:	4002006c 	.word	0x4002006c
 800b120:	ff0fffff 	.word	0xff0fffff
 800b124:	4002041c 	.word	0x4002041c
	else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b128:	4ae0      	ldr	r2, [pc, #896]	; (800b4ac <RemapAndLinkDMAtoUARTRx+0x708>)
 800b12a:	680c      	ldr	r4, [r1, #0]
 800b12c:	4294      	cmp	r4, r2
 800b12e:	d000      	beq.n	800b132 <RemapAndLinkDMAtoUARTRx+0x38e>
 800b130:	e66e      	b.n	800ae10 <RemapAndLinkDMAtoUARTRx+0x6c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800b132:	4adf      	ldr	r2, [pc, #892]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b134:	23a8      	movs	r3, #168	; 0xa8
 800b136:	58d4      	ldr	r4, [r2, r3]
 800b138:	250f      	movs	r5, #15
 800b13a:	43ac      	bics	r4, r5
 800b13c:	50d4      	str	r4, [r2, r3]
 800b13e:	58d4      	ldr	r4, [r2, r3]
 800b140:	3d05      	subs	r5, #5
 800b142:	432c      	orrs	r4, r5
 800b144:	50d4      	str	r4, [r2, r3]
 800b146:	e70d      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800b148:	4ada      	ldr	r2, [pc, #872]	; (800b4b4 <RemapAndLinkDMAtoUARTRx+0x710>)
 800b14a:	680c      	ldr	r4, [r1, #0]
 800b14c:	4294      	cmp	r4, r2
 800b14e:	d000      	beq.n	800b152 <RemapAndLinkDMAtoUARTRx+0x3ae>
 800b150:	e662      	b.n	800ae18 <RemapAndLinkDMAtoUARTRx+0x74>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800b152:	4ad7      	ldr	r2, [pc, #860]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b154:	23a8      	movs	r3, #168	; 0xa8
 800b156:	58d4      	ldr	r4, [r2, r3]
 800b158:	4dd7      	ldr	r5, [pc, #860]	; (800b4b8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b15a:	402c      	ands	r4, r5
 800b15c:	50d4      	str	r4, [r2, r3]
 800b15e:	58d5      	ldr	r5, [r2, r3]
 800b160:	24a0      	movs	r4, #160	; 0xa0
 800b162:	0124      	lsls	r4, r4, #4
 800b164:	432c      	orrs	r4, r5
 800b166:	50d4      	str	r4, [r2, r3]
 800b168:	e6fc      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800b16a:	4ad4      	ldr	r2, [pc, #848]	; (800b4bc <RemapAndLinkDMAtoUARTRx+0x718>)
 800b16c:	680c      	ldr	r4, [r1, #0]
 800b16e:	4294      	cmp	r4, r2
 800b170:	d000      	beq.n	800b174 <RemapAndLinkDMAtoUARTRx+0x3d0>
 800b172:	e655      	b.n	800ae20 <RemapAndLinkDMAtoUARTRx+0x7c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800b174:	4ace      	ldr	r2, [pc, #824]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b176:	23a8      	movs	r3, #168	; 0xa8
 800b178:	58d4      	ldr	r4, [r2, r3]
 800b17a:	4dd1      	ldr	r5, [pc, #836]	; (800b4c0 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800b17c:	402c      	ands	r4, r5
 800b17e:	50d4      	str	r4, [r2, r3]
 800b180:	58d5      	ldr	r5, [r2, r3]
 800b182:	24a0      	movs	r4, #160	; 0xa0
 800b184:	0324      	lsls	r4, r4, #12
 800b186:	432c      	orrs	r4, r5
 800b188:	50d4      	str	r4, [r2, r3]
 800b18a:	e6eb      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800b18c:	4acd      	ldr	r2, [pc, #820]	; (800b4c4 <RemapAndLinkDMAtoUARTRx+0x720>)
 800b18e:	680c      	ldr	r4, [r1, #0]
 800b190:	4294      	cmp	r4, r2
 800b192:	d000      	beq.n	800b196 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800b194:	e648      	b.n	800ae28 <RemapAndLinkDMAtoUARTRx+0x84>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800b196:	4ac6      	ldr	r2, [pc, #792]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b198:	23a8      	movs	r3, #168	; 0xa8
 800b19a:	58d4      	ldr	r4, [r2, r3]
 800b19c:	4dca      	ldr	r5, [pc, #808]	; (800b4c8 <RemapAndLinkDMAtoUARTRx+0x724>)
 800b19e:	402c      	ands	r4, r5
 800b1a0:	50d4      	str	r4, [r2, r3]
 800b1a2:	58d5      	ldr	r5, [r2, r3]
 800b1a4:	24a0      	movs	r4, #160	; 0xa0
 800b1a6:	0424      	lsls	r4, r4, #16
 800b1a8:	432c      	orrs	r4, r5
 800b1aa:	50d4      	str	r4, [r2, r3]
 800b1ac:	e6da      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800b1ae:	4ac7      	ldr	r2, [pc, #796]	; (800b4cc <RemapAndLinkDMAtoUARTRx+0x728>)
 800b1b0:	680c      	ldr	r4, [r1, #0]
 800b1b2:	4294      	cmp	r4, r2
 800b1b4:	d000      	beq.n	800b1b8 <RemapAndLinkDMAtoUARTRx+0x414>
 800b1b6:	e63b      	b.n	800ae30 <RemapAndLinkDMAtoUARTRx+0x8c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800b1b8:	4ac5      	ldr	r2, [pc, #788]	; (800b4d0 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b1ba:	23a8      	movs	r3, #168	; 0xa8
 800b1bc:	58d4      	ldr	r4, [r2, r3]
 800b1be:	25f0      	movs	r5, #240	; 0xf0
 800b1c0:	43ac      	bics	r4, r5
 800b1c2:	50d4      	str	r4, [r2, r3]
 800b1c4:	58d4      	ldr	r4, [r2, r3]
 800b1c6:	3d50      	subs	r5, #80	; 0x50
 800b1c8:	432c      	orrs	r4, r5
 800b1ca:	50d4      	str	r4, [r2, r3]
 800b1cc:	e6ca      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800b1ce:	4ac1      	ldr	r2, [pc, #772]	; (800b4d4 <RemapAndLinkDMAtoUARTRx+0x730>)
 800b1d0:	680c      	ldr	r4, [r1, #0]
 800b1d2:	4294      	cmp	r4, r2
 800b1d4:	d000      	beq.n	800b1d8 <RemapAndLinkDMAtoUARTRx+0x434>
 800b1d6:	e62f      	b.n	800ae38 <RemapAndLinkDMAtoUARTRx+0x94>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);
 800b1d8:	4abd      	ldr	r2, [pc, #756]	; (800b4d0 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b1da:	23a8      	movs	r3, #168	; 0xa8
 800b1dc:	58d4      	ldr	r4, [r2, r3]
 800b1de:	4db6      	ldr	r5, [pc, #728]	; (800b4b8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b1e0:	402c      	ands	r4, r5
 800b1e2:	50d4      	str	r4, [r2, r3]
 800b1e4:	58d5      	ldr	r5, [r2, r3]
 800b1e6:	24a0      	movs	r4, #160	; 0xa0
 800b1e8:	0124      	lsls	r4, r4, #4
 800b1ea:	432c      	orrs	r4, r5
 800b1ec:	50d4      	str	r4, [r2, r3]
 800b1ee:	e6b9      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800b1f0:	4aae      	ldr	r2, [pc, #696]	; (800b4ac <RemapAndLinkDMAtoUARTRx+0x708>)
 800b1f2:	680c      	ldr	r4, [r1, #0]
 800b1f4:	4294      	cmp	r4, r2
 800b1f6:	d000      	beq.n	800b1fa <RemapAndLinkDMAtoUARTRx+0x456>
 800b1f8:	e622      	b.n	800ae40 <RemapAndLinkDMAtoUARTRx+0x9c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800b1fa:	4aad      	ldr	r2, [pc, #692]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b1fc:	23a8      	movs	r3, #168	; 0xa8
 800b1fe:	58d4      	ldr	r4, [r2, r3]
 800b200:	250f      	movs	r5, #15
 800b202:	43ac      	bics	r4, r5
 800b204:	50d4      	str	r4, [r2, r3]
 800b206:	58d4      	ldr	r4, [r2, r3]
 800b208:	3d04      	subs	r5, #4
 800b20a:	432c      	orrs	r4, r5
 800b20c:	50d4      	str	r4, [r2, r3]
 800b20e:	e6a9      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800b210:	4aa8      	ldr	r2, [pc, #672]	; (800b4b4 <RemapAndLinkDMAtoUARTRx+0x710>)
 800b212:	680c      	ldr	r4, [r1, #0]
 800b214:	4294      	cmp	r4, r2
 800b216:	d000      	beq.n	800b21a <RemapAndLinkDMAtoUARTRx+0x476>
 800b218:	e616      	b.n	800ae48 <RemapAndLinkDMAtoUARTRx+0xa4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800b21a:	4aa5      	ldr	r2, [pc, #660]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b21c:	23a8      	movs	r3, #168	; 0xa8
 800b21e:	58d4      	ldr	r4, [r2, r3]
 800b220:	4da5      	ldr	r5, [pc, #660]	; (800b4b8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b222:	402c      	ands	r4, r5
 800b224:	50d4      	str	r4, [r2, r3]
 800b226:	58d5      	ldr	r5, [r2, r3]
 800b228:	24b0      	movs	r4, #176	; 0xb0
 800b22a:	0124      	lsls	r4, r4, #4
 800b22c:	432c      	orrs	r4, r5
 800b22e:	50d4      	str	r4, [r2, r3]
 800b230:	e698      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800b232:	4aa2      	ldr	r2, [pc, #648]	; (800b4bc <RemapAndLinkDMAtoUARTRx+0x718>)
 800b234:	680c      	ldr	r4, [r1, #0]
 800b236:	4294      	cmp	r4, r2
 800b238:	d000      	beq.n	800b23c <RemapAndLinkDMAtoUARTRx+0x498>
 800b23a:	e609      	b.n	800ae50 <RemapAndLinkDMAtoUARTRx+0xac>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800b23c:	4a9c      	ldr	r2, [pc, #624]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b23e:	23a8      	movs	r3, #168	; 0xa8
 800b240:	58d4      	ldr	r4, [r2, r3]
 800b242:	4d9f      	ldr	r5, [pc, #636]	; (800b4c0 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800b244:	402c      	ands	r4, r5
 800b246:	50d4      	str	r4, [r2, r3]
 800b248:	58d5      	ldr	r5, [r2, r3]
 800b24a:	24b0      	movs	r4, #176	; 0xb0
 800b24c:	0324      	lsls	r4, r4, #12
 800b24e:	432c      	orrs	r4, r5
 800b250:	50d4      	str	r4, [r2, r3]
 800b252:	e687      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800b254:	4a9b      	ldr	r2, [pc, #620]	; (800b4c4 <RemapAndLinkDMAtoUARTRx+0x720>)
 800b256:	680c      	ldr	r4, [r1, #0]
 800b258:	4294      	cmp	r4, r2
 800b25a:	d000      	beq.n	800b25e <RemapAndLinkDMAtoUARTRx+0x4ba>
 800b25c:	e5fc      	b.n	800ae58 <RemapAndLinkDMAtoUARTRx+0xb4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800b25e:	4a94      	ldr	r2, [pc, #592]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b260:	23a8      	movs	r3, #168	; 0xa8
 800b262:	58d4      	ldr	r4, [r2, r3]
 800b264:	4d98      	ldr	r5, [pc, #608]	; (800b4c8 <RemapAndLinkDMAtoUARTRx+0x724>)
 800b266:	402c      	ands	r4, r5
 800b268:	50d4      	str	r4, [r2, r3]
 800b26a:	58d5      	ldr	r5, [r2, r3]
 800b26c:	24b0      	movs	r4, #176	; 0xb0
 800b26e:	0424      	lsls	r4, r4, #16
 800b270:	432c      	orrs	r4, r5
 800b272:	50d4      	str	r4, [r2, r3]
 800b274:	e676      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800b276:	4a95      	ldr	r2, [pc, #596]	; (800b4cc <RemapAndLinkDMAtoUARTRx+0x728>)
 800b278:	680c      	ldr	r4, [r1, #0]
 800b27a:	4294      	cmp	r4, r2
 800b27c:	d000      	beq.n	800b280 <RemapAndLinkDMAtoUARTRx+0x4dc>
 800b27e:	e5ef      	b.n	800ae60 <RemapAndLinkDMAtoUARTRx+0xbc>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800b280:	4a93      	ldr	r2, [pc, #588]	; (800b4d0 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b282:	23a8      	movs	r3, #168	; 0xa8
 800b284:	58d4      	ldr	r4, [r2, r3]
 800b286:	25f0      	movs	r5, #240	; 0xf0
 800b288:	43ac      	bics	r4, r5
 800b28a:	50d4      	str	r4, [r2, r3]
 800b28c:	58d4      	ldr	r4, [r2, r3]
 800b28e:	3d40      	subs	r5, #64	; 0x40
 800b290:	432c      	orrs	r4, r5
 800b292:	50d4      	str	r4, [r2, r3]
 800b294:	e666      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800b296:	4a8f      	ldr	r2, [pc, #572]	; (800b4d4 <RemapAndLinkDMAtoUARTRx+0x730>)
 800b298:	680c      	ldr	r4, [r1, #0]
 800b29a:	4294      	cmp	r4, r2
 800b29c:	d000      	beq.n	800b2a0 <RemapAndLinkDMAtoUARTRx+0x4fc>
 800b29e:	e5e3      	b.n	800ae68 <RemapAndLinkDMAtoUARTRx+0xc4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);
 800b2a0:	4a8b      	ldr	r2, [pc, #556]	; (800b4d0 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b2a2:	23a8      	movs	r3, #168	; 0xa8
 800b2a4:	58d4      	ldr	r4, [r2, r3]
 800b2a6:	4d84      	ldr	r5, [pc, #528]	; (800b4b8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b2a8:	402c      	ands	r4, r5
 800b2aa:	50d4      	str	r4, [r2, r3]
 800b2ac:	58d5      	ldr	r5, [r2, r3]
 800b2ae:	24b0      	movs	r4, #176	; 0xb0
 800b2b0:	0124      	lsls	r4, r4, #4
 800b2b2:	432c      	orrs	r4, r5
 800b2b4:	50d4      	str	r4, [r2, r3]
 800b2b6:	e655      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800b2b8:	4a7c      	ldr	r2, [pc, #496]	; (800b4ac <RemapAndLinkDMAtoUARTRx+0x708>)
 800b2ba:	680c      	ldr	r4, [r1, #0]
 800b2bc:	4294      	cmp	r4, r2
 800b2be:	d000      	beq.n	800b2c2 <RemapAndLinkDMAtoUARTRx+0x51e>
 800b2c0:	e5d6      	b.n	800ae70 <RemapAndLinkDMAtoUARTRx+0xcc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800b2c2:	4a7b      	ldr	r2, [pc, #492]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b2c4:	23a8      	movs	r3, #168	; 0xa8
 800b2c6:	58d4      	ldr	r4, [r2, r3]
 800b2c8:	250f      	movs	r5, #15
 800b2ca:	43ac      	bics	r4, r5
 800b2cc:	50d4      	str	r4, [r2, r3]
 800b2ce:	58d4      	ldr	r4, [r2, r3]
 800b2d0:	3d03      	subs	r5, #3
 800b2d2:	432c      	orrs	r4, r5
 800b2d4:	50d4      	str	r4, [r2, r3]
 800b2d6:	e645      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800b2d8:	4a76      	ldr	r2, [pc, #472]	; (800b4b4 <RemapAndLinkDMAtoUARTRx+0x710>)
 800b2da:	680c      	ldr	r4, [r1, #0]
 800b2dc:	4294      	cmp	r4, r2
 800b2de:	d000      	beq.n	800b2e2 <RemapAndLinkDMAtoUARTRx+0x53e>
 800b2e0:	e5ca      	b.n	800ae78 <RemapAndLinkDMAtoUARTRx+0xd4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800b2e2:	4a73      	ldr	r2, [pc, #460]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b2e4:	23a8      	movs	r3, #168	; 0xa8
 800b2e6:	58d4      	ldr	r4, [r2, r3]
 800b2e8:	4d73      	ldr	r5, [pc, #460]	; (800b4b8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b2ea:	402c      	ands	r4, r5
 800b2ec:	50d4      	str	r4, [r2, r3]
 800b2ee:	58d5      	ldr	r5, [r2, r3]
 800b2f0:	24c0      	movs	r4, #192	; 0xc0
 800b2f2:	0124      	lsls	r4, r4, #4
 800b2f4:	432c      	orrs	r4, r5
 800b2f6:	50d4      	str	r4, [r2, r3]
 800b2f8:	e634      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800b2fa:	4a70      	ldr	r2, [pc, #448]	; (800b4bc <RemapAndLinkDMAtoUARTRx+0x718>)
 800b2fc:	680c      	ldr	r4, [r1, #0]
 800b2fe:	4294      	cmp	r4, r2
 800b300:	d000      	beq.n	800b304 <RemapAndLinkDMAtoUARTRx+0x560>
 800b302:	e5bd      	b.n	800ae80 <RemapAndLinkDMAtoUARTRx+0xdc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800b304:	4a6a      	ldr	r2, [pc, #424]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b306:	23a8      	movs	r3, #168	; 0xa8
 800b308:	58d4      	ldr	r4, [r2, r3]
 800b30a:	4d6d      	ldr	r5, [pc, #436]	; (800b4c0 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800b30c:	402c      	ands	r4, r5
 800b30e:	50d4      	str	r4, [r2, r3]
 800b310:	58d5      	ldr	r5, [r2, r3]
 800b312:	24c0      	movs	r4, #192	; 0xc0
 800b314:	0324      	lsls	r4, r4, #12
 800b316:	432c      	orrs	r4, r5
 800b318:	50d4      	str	r4, [r2, r3]
 800b31a:	e623      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800b31c:	4a69      	ldr	r2, [pc, #420]	; (800b4c4 <RemapAndLinkDMAtoUARTRx+0x720>)
 800b31e:	680c      	ldr	r4, [r1, #0]
 800b320:	4294      	cmp	r4, r2
 800b322:	d000      	beq.n	800b326 <RemapAndLinkDMAtoUARTRx+0x582>
 800b324:	e5b0      	b.n	800ae88 <RemapAndLinkDMAtoUARTRx+0xe4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800b326:	4a62      	ldr	r2, [pc, #392]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b328:	23a8      	movs	r3, #168	; 0xa8
 800b32a:	58d4      	ldr	r4, [r2, r3]
 800b32c:	4d66      	ldr	r5, [pc, #408]	; (800b4c8 <RemapAndLinkDMAtoUARTRx+0x724>)
 800b32e:	402c      	ands	r4, r5
 800b330:	50d4      	str	r4, [r2, r3]
 800b332:	58d5      	ldr	r5, [r2, r3]
 800b334:	24c0      	movs	r4, #192	; 0xc0
 800b336:	0424      	lsls	r4, r4, #16
 800b338:	432c      	orrs	r4, r5
 800b33a:	50d4      	str	r4, [r2, r3]
 800b33c:	e612      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800b33e:	4a63      	ldr	r2, [pc, #396]	; (800b4cc <RemapAndLinkDMAtoUARTRx+0x728>)
 800b340:	680c      	ldr	r4, [r1, #0]
 800b342:	4294      	cmp	r4, r2
 800b344:	d000      	beq.n	800b348 <RemapAndLinkDMAtoUARTRx+0x5a4>
 800b346:	e5a3      	b.n	800ae90 <RemapAndLinkDMAtoUARTRx+0xec>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800b348:	4a61      	ldr	r2, [pc, #388]	; (800b4d0 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b34a:	23a8      	movs	r3, #168	; 0xa8
 800b34c:	58d4      	ldr	r4, [r2, r3]
 800b34e:	25f0      	movs	r5, #240	; 0xf0
 800b350:	43ac      	bics	r4, r5
 800b352:	50d4      	str	r4, [r2, r3]
 800b354:	58d4      	ldr	r4, [r2, r3]
 800b356:	3d30      	subs	r5, #48	; 0x30
 800b358:	432c      	orrs	r4, r5
 800b35a:	50d4      	str	r4, [r2, r3]
 800b35c:	e602      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800b35e:	4a5d      	ldr	r2, [pc, #372]	; (800b4d4 <RemapAndLinkDMAtoUARTRx+0x730>)
 800b360:	680c      	ldr	r4, [r1, #0]
 800b362:	4294      	cmp	r4, r2
 800b364:	d000      	beq.n	800b368 <RemapAndLinkDMAtoUARTRx+0x5c4>
 800b366:	e597      	b.n	800ae98 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);
 800b368:	4a59      	ldr	r2, [pc, #356]	; (800b4d0 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b36a:	23a8      	movs	r3, #168	; 0xa8
 800b36c:	58d4      	ldr	r4, [r2, r3]
 800b36e:	4d52      	ldr	r5, [pc, #328]	; (800b4b8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b370:	402c      	ands	r4, r5
 800b372:	50d4      	str	r4, [r2, r3]
 800b374:	58d5      	ldr	r5, [r2, r3]
 800b376:	24c0      	movs	r4, #192	; 0xc0
 800b378:	0124      	lsls	r4, r4, #4
 800b37a:	432c      	orrs	r4, r5
 800b37c:	50d4      	str	r4, [r2, r3]
 800b37e:	e5f1      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800b380:	4a4a      	ldr	r2, [pc, #296]	; (800b4ac <RemapAndLinkDMAtoUARTRx+0x708>)
 800b382:	680c      	ldr	r4, [r1, #0]
 800b384:	4294      	cmp	r4, r2
 800b386:	d000      	beq.n	800b38a <RemapAndLinkDMAtoUARTRx+0x5e6>
 800b388:	e58a      	b.n	800aea0 <RemapAndLinkDMAtoUARTRx+0xfc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800b38a:	4a49      	ldr	r2, [pc, #292]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b38c:	23a8      	movs	r3, #168	; 0xa8
 800b38e:	58d4      	ldr	r4, [r2, r3]
 800b390:	250f      	movs	r5, #15
 800b392:	43ac      	bics	r4, r5
 800b394:	50d4      	str	r4, [r2, r3]
 800b396:	58d4      	ldr	r4, [r2, r3]
 800b398:	3d02      	subs	r5, #2
 800b39a:	432c      	orrs	r4, r5
 800b39c:	50d4      	str	r4, [r2, r3]
 800b39e:	e5e1      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800b3a0:	4a44      	ldr	r2, [pc, #272]	; (800b4b4 <RemapAndLinkDMAtoUARTRx+0x710>)
 800b3a2:	680c      	ldr	r4, [r1, #0]
 800b3a4:	4294      	cmp	r4, r2
 800b3a6:	d000      	beq.n	800b3aa <RemapAndLinkDMAtoUARTRx+0x606>
 800b3a8:	e57e      	b.n	800aea8 <RemapAndLinkDMAtoUARTRx+0x104>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800b3aa:	4a41      	ldr	r2, [pc, #260]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b3ac:	23a8      	movs	r3, #168	; 0xa8
 800b3ae:	58d4      	ldr	r4, [r2, r3]
 800b3b0:	4d41      	ldr	r5, [pc, #260]	; (800b4b8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b3b2:	402c      	ands	r4, r5
 800b3b4:	50d4      	str	r4, [r2, r3]
 800b3b6:	58d5      	ldr	r5, [r2, r3]
 800b3b8:	24d0      	movs	r4, #208	; 0xd0
 800b3ba:	0124      	lsls	r4, r4, #4
 800b3bc:	432c      	orrs	r4, r5
 800b3be:	50d4      	str	r4, [r2, r3]
 800b3c0:	e5d0      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800b3c2:	4a3e      	ldr	r2, [pc, #248]	; (800b4bc <RemapAndLinkDMAtoUARTRx+0x718>)
 800b3c4:	680c      	ldr	r4, [r1, #0]
 800b3c6:	4294      	cmp	r4, r2
 800b3c8:	d000      	beq.n	800b3cc <RemapAndLinkDMAtoUARTRx+0x628>
 800b3ca:	e571      	b.n	800aeb0 <RemapAndLinkDMAtoUARTRx+0x10c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800b3cc:	4a38      	ldr	r2, [pc, #224]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b3ce:	23a8      	movs	r3, #168	; 0xa8
 800b3d0:	58d4      	ldr	r4, [r2, r3]
 800b3d2:	4d3b      	ldr	r5, [pc, #236]	; (800b4c0 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800b3d4:	402c      	ands	r4, r5
 800b3d6:	50d4      	str	r4, [r2, r3]
 800b3d8:	58d5      	ldr	r5, [r2, r3]
 800b3da:	24d0      	movs	r4, #208	; 0xd0
 800b3dc:	0324      	lsls	r4, r4, #12
 800b3de:	432c      	orrs	r4, r5
 800b3e0:	50d4      	str	r4, [r2, r3]
 800b3e2:	e5bf      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800b3e4:	4a37      	ldr	r2, [pc, #220]	; (800b4c4 <RemapAndLinkDMAtoUARTRx+0x720>)
 800b3e6:	680c      	ldr	r4, [r1, #0]
 800b3e8:	4294      	cmp	r4, r2
 800b3ea:	d000      	beq.n	800b3ee <RemapAndLinkDMAtoUARTRx+0x64a>
 800b3ec:	e564      	b.n	800aeb8 <RemapAndLinkDMAtoUARTRx+0x114>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800b3ee:	4a30      	ldr	r2, [pc, #192]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b3f0:	23a8      	movs	r3, #168	; 0xa8
 800b3f2:	58d4      	ldr	r4, [r2, r3]
 800b3f4:	4d34      	ldr	r5, [pc, #208]	; (800b4c8 <RemapAndLinkDMAtoUARTRx+0x724>)
 800b3f6:	402c      	ands	r4, r5
 800b3f8:	50d4      	str	r4, [r2, r3]
 800b3fa:	58d5      	ldr	r5, [r2, r3]
 800b3fc:	24d0      	movs	r4, #208	; 0xd0
 800b3fe:	0424      	lsls	r4, r4, #16
 800b400:	432c      	orrs	r4, r5
 800b402:	50d4      	str	r4, [r2, r3]
 800b404:	e5ae      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800b406:	4a31      	ldr	r2, [pc, #196]	; (800b4cc <RemapAndLinkDMAtoUARTRx+0x728>)
 800b408:	680c      	ldr	r4, [r1, #0]
 800b40a:	4294      	cmp	r4, r2
 800b40c:	d000      	beq.n	800b410 <RemapAndLinkDMAtoUARTRx+0x66c>
 800b40e:	e557      	b.n	800aec0 <RemapAndLinkDMAtoUARTRx+0x11c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800b410:	4a2f      	ldr	r2, [pc, #188]	; (800b4d0 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b412:	23a8      	movs	r3, #168	; 0xa8
 800b414:	58d4      	ldr	r4, [r2, r3]
 800b416:	25f0      	movs	r5, #240	; 0xf0
 800b418:	43ac      	bics	r4, r5
 800b41a:	50d4      	str	r4, [r2, r3]
 800b41c:	58d4      	ldr	r4, [r2, r3]
 800b41e:	3d20      	subs	r5, #32
 800b420:	432c      	orrs	r4, r5
 800b422:	50d4      	str	r4, [r2, r3]
 800b424:	e59e      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800b426:	4a2b      	ldr	r2, [pc, #172]	; (800b4d4 <RemapAndLinkDMAtoUARTRx+0x730>)
 800b428:	680c      	ldr	r4, [r1, #0]
 800b42a:	4294      	cmp	r4, r2
 800b42c:	d000      	beq.n	800b430 <RemapAndLinkDMAtoUARTRx+0x68c>
 800b42e:	e54b      	b.n	800aec8 <RemapAndLinkDMAtoUARTRx+0x124>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);
 800b430:	4a27      	ldr	r2, [pc, #156]	; (800b4d0 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b432:	23a8      	movs	r3, #168	; 0xa8
 800b434:	58d4      	ldr	r4, [r2, r3]
 800b436:	4d20      	ldr	r5, [pc, #128]	; (800b4b8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b438:	402c      	ands	r4, r5
 800b43a:	50d4      	str	r4, [r2, r3]
 800b43c:	58d5      	ldr	r5, [r2, r3]
 800b43e:	24d0      	movs	r4, #208	; 0xd0
 800b440:	0124      	lsls	r4, r4, #4
 800b442:	432c      	orrs	r4, r5
 800b444:	50d4      	str	r4, [r2, r3]
 800b446:	e58d      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800b448:	4a18      	ldr	r2, [pc, #96]	; (800b4ac <RemapAndLinkDMAtoUARTRx+0x708>)
 800b44a:	680c      	ldr	r4, [r1, #0]
 800b44c:	4294      	cmp	r4, r2
 800b44e:	d000      	beq.n	800b452 <RemapAndLinkDMAtoUARTRx+0x6ae>
 800b450:	e53e      	b.n	800aed0 <RemapAndLinkDMAtoUARTRx+0x12c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800b452:	4a17      	ldr	r2, [pc, #92]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b454:	23a8      	movs	r3, #168	; 0xa8
 800b456:	58d4      	ldr	r4, [r2, r3]
 800b458:	250f      	movs	r5, #15
 800b45a:	43ac      	bics	r4, r5
 800b45c:	50d4      	str	r4, [r2, r3]
 800b45e:	58d4      	ldr	r4, [r2, r3]
 800b460:	3d01      	subs	r5, #1
 800b462:	432c      	orrs	r4, r5
 800b464:	50d4      	str	r4, [r2, r3]
 800b466:	e57d      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800b468:	4a12      	ldr	r2, [pc, #72]	; (800b4b4 <RemapAndLinkDMAtoUARTRx+0x710>)
 800b46a:	680c      	ldr	r4, [r1, #0]
 800b46c:	4294      	cmp	r4, r2
 800b46e:	d000      	beq.n	800b472 <RemapAndLinkDMAtoUARTRx+0x6ce>
 800b470:	e532      	b.n	800aed8 <RemapAndLinkDMAtoUARTRx+0x134>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800b472:	4a0f      	ldr	r2, [pc, #60]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b474:	23a8      	movs	r3, #168	; 0xa8
 800b476:	58d4      	ldr	r4, [r2, r3]
 800b478:	4d0f      	ldr	r5, [pc, #60]	; (800b4b8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b47a:	402c      	ands	r4, r5
 800b47c:	50d4      	str	r4, [r2, r3]
 800b47e:	58d5      	ldr	r5, [r2, r3]
 800b480:	24e0      	movs	r4, #224	; 0xe0
 800b482:	0124      	lsls	r4, r4, #4
 800b484:	432c      	orrs	r4, r5
 800b486:	50d4      	str	r4, [r2, r3]
 800b488:	e56c      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800b48a:	4a0c      	ldr	r2, [pc, #48]	; (800b4bc <RemapAndLinkDMAtoUARTRx+0x718>)
 800b48c:	680c      	ldr	r4, [r1, #0]
 800b48e:	4294      	cmp	r4, r2
 800b490:	d000      	beq.n	800b494 <RemapAndLinkDMAtoUARTRx+0x6f0>
 800b492:	e525      	b.n	800aee0 <RemapAndLinkDMAtoUARTRx+0x13c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800b494:	4a06      	ldr	r2, [pc, #24]	; (800b4b0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b496:	23a8      	movs	r3, #168	; 0xa8
 800b498:	58d4      	ldr	r4, [r2, r3]
 800b49a:	4d09      	ldr	r5, [pc, #36]	; (800b4c0 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800b49c:	402c      	ands	r4, r5
 800b49e:	50d4      	str	r4, [r2, r3]
 800b4a0:	58d5      	ldr	r5, [r2, r3]
 800b4a2:	24e0      	movs	r4, #224	; 0xe0
 800b4a4:	0324      	lsls	r4, r4, #12
 800b4a6:	432c      	orrs	r4, r5
 800b4a8:	50d4      	str	r4, [r2, r3]
 800b4aa:	e55b      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800b4ac:	40020008 	.word	0x40020008
 800b4b0:	40020000 	.word	0x40020000
 800b4b4:	40020030 	.word	0x40020030
 800b4b8:	fffff0ff 	.word	0xfffff0ff
 800b4bc:	40020058 	.word	0x40020058
 800b4c0:	fff0ffff 	.word	0xfff0ffff
 800b4c4:	4002006c 	.word	0x4002006c
 800b4c8:	ff0fffff 	.word	0xff0fffff
 800b4cc:	4002041c 	.word	0x4002041c
 800b4d0:	40020400 	.word	0x40020400
 800b4d4:	40020430 	.word	0x40020430
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800b4d8:	4a41      	ldr	r2, [pc, #260]	; (800b5e0 <RemapAndLinkDMAtoUARTRx+0x83c>)
 800b4da:	680c      	ldr	r4, [r1, #0]
 800b4dc:	4294      	cmp	r4, r2
 800b4de:	d000      	beq.n	800b4e2 <RemapAndLinkDMAtoUARTRx+0x73e>
 800b4e0:	e502      	b.n	800aee8 <RemapAndLinkDMAtoUARTRx+0x144>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800b4e2:	4a40      	ldr	r2, [pc, #256]	; (800b5e4 <RemapAndLinkDMAtoUARTRx+0x840>)
 800b4e4:	23a8      	movs	r3, #168	; 0xa8
 800b4e6:	58d4      	ldr	r4, [r2, r3]
 800b4e8:	4d3f      	ldr	r5, [pc, #252]	; (800b5e8 <RemapAndLinkDMAtoUARTRx+0x844>)
 800b4ea:	402c      	ands	r4, r5
 800b4ec:	50d4      	str	r4, [r2, r3]
 800b4ee:	58d5      	ldr	r5, [r2, r3]
 800b4f0:	24e0      	movs	r4, #224	; 0xe0
 800b4f2:	0424      	lsls	r4, r4, #16
 800b4f4:	432c      	orrs	r4, r5
 800b4f6:	50d4      	str	r4, [r2, r3]
 800b4f8:	e534      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800b4fa:	4a3c      	ldr	r2, [pc, #240]	; (800b5ec <RemapAndLinkDMAtoUARTRx+0x848>)
 800b4fc:	680c      	ldr	r4, [r1, #0]
 800b4fe:	4294      	cmp	r4, r2
 800b500:	d000      	beq.n	800b504 <RemapAndLinkDMAtoUARTRx+0x760>
 800b502:	e4f5      	b.n	800aef0 <RemapAndLinkDMAtoUARTRx+0x14c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800b504:	4a3a      	ldr	r2, [pc, #232]	; (800b5f0 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800b506:	23a8      	movs	r3, #168	; 0xa8
 800b508:	58d4      	ldr	r4, [r2, r3]
 800b50a:	25f0      	movs	r5, #240	; 0xf0
 800b50c:	43ac      	bics	r4, r5
 800b50e:	50d4      	str	r4, [r2, r3]
 800b510:	58d4      	ldr	r4, [r2, r3]
 800b512:	3d10      	subs	r5, #16
 800b514:	432c      	orrs	r4, r5
 800b516:	50d4      	str	r4, [r2, r3]
 800b518:	e524      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800b51a:	4a36      	ldr	r2, [pc, #216]	; (800b5f4 <RemapAndLinkDMAtoUARTRx+0x850>)
 800b51c:	680c      	ldr	r4, [r1, #0]
 800b51e:	4294      	cmp	r4, r2
 800b520:	d000      	beq.n	800b524 <RemapAndLinkDMAtoUARTRx+0x780>
 800b522:	e4e9      	b.n	800aef8 <RemapAndLinkDMAtoUARTRx+0x154>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);
 800b524:	4a32      	ldr	r2, [pc, #200]	; (800b5f0 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800b526:	23a8      	movs	r3, #168	; 0xa8
 800b528:	58d4      	ldr	r4, [r2, r3]
 800b52a:	4d33      	ldr	r5, [pc, #204]	; (800b5f8 <RemapAndLinkDMAtoUARTRx+0x854>)
 800b52c:	402c      	ands	r4, r5
 800b52e:	50d4      	str	r4, [r2, r3]
 800b530:	58d5      	ldr	r5, [r2, r3]
 800b532:	24e0      	movs	r4, #224	; 0xe0
 800b534:	0124      	lsls	r4, r4, #4
 800b536:	432c      	orrs	r4, r5
 800b538:	50d4      	str	r4, [r2, r3]
 800b53a:	e513      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800b53c:	4a2f      	ldr	r2, [pc, #188]	; (800b5fc <RemapAndLinkDMAtoUARTRx+0x858>)
 800b53e:	680c      	ldr	r4, [r1, #0]
 800b540:	4294      	cmp	r4, r2
 800b542:	d000      	beq.n	800b546 <RemapAndLinkDMAtoUARTRx+0x7a2>
 800b544:	e4dc      	b.n	800af00 <RemapAndLinkDMAtoUARTRx+0x15c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800b546:	4a27      	ldr	r2, [pc, #156]	; (800b5e4 <RemapAndLinkDMAtoUARTRx+0x840>)
 800b548:	23a8      	movs	r3, #168	; 0xa8
 800b54a:	58d5      	ldr	r5, [r2, r3]
 800b54c:	260f      	movs	r6, #15
 800b54e:	43b5      	bics	r5, r6
 800b550:	50d5      	str	r5, [r2, r3]
 800b552:	58d4      	ldr	r4, [r2, r3]
 800b554:	4334      	orrs	r4, r6
 800b556:	50d4      	str	r4, [r2, r3]
 800b558:	e504      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800b55a:	4a29      	ldr	r2, [pc, #164]	; (800b600 <RemapAndLinkDMAtoUARTRx+0x85c>)
 800b55c:	680c      	ldr	r4, [r1, #0]
 800b55e:	4294      	cmp	r4, r2
 800b560:	d000      	beq.n	800b564 <RemapAndLinkDMAtoUARTRx+0x7c0>
 800b562:	e4d1      	b.n	800af08 <RemapAndLinkDMAtoUARTRx+0x164>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800b564:	4a1f      	ldr	r2, [pc, #124]	; (800b5e4 <RemapAndLinkDMAtoUARTRx+0x840>)
 800b566:	23a8      	movs	r3, #168	; 0xa8
 800b568:	58d4      	ldr	r4, [r2, r3]
 800b56a:	4d23      	ldr	r5, [pc, #140]	; (800b5f8 <RemapAndLinkDMAtoUARTRx+0x854>)
 800b56c:	402c      	ands	r4, r5
 800b56e:	50d4      	str	r4, [r2, r3]
 800b570:	58d5      	ldr	r5, [r2, r3]
 800b572:	24f0      	movs	r4, #240	; 0xf0
 800b574:	0124      	lsls	r4, r4, #4
 800b576:	432c      	orrs	r4, r5
 800b578:	50d4      	str	r4, [r2, r3]
 800b57a:	e4f3      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800b57c:	4a21      	ldr	r2, [pc, #132]	; (800b604 <RemapAndLinkDMAtoUARTRx+0x860>)
 800b57e:	680c      	ldr	r4, [r1, #0]
 800b580:	4294      	cmp	r4, r2
 800b582:	d000      	beq.n	800b586 <RemapAndLinkDMAtoUARTRx+0x7e2>
 800b584:	e4c4      	b.n	800af10 <RemapAndLinkDMAtoUARTRx+0x16c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800b586:	4a17      	ldr	r2, [pc, #92]	; (800b5e4 <RemapAndLinkDMAtoUARTRx+0x840>)
 800b588:	23a8      	movs	r3, #168	; 0xa8
 800b58a:	58d4      	ldr	r4, [r2, r3]
 800b58c:	4d1e      	ldr	r5, [pc, #120]	; (800b608 <RemapAndLinkDMAtoUARTRx+0x864>)
 800b58e:	402c      	ands	r4, r5
 800b590:	50d4      	str	r4, [r2, r3]
 800b592:	58d5      	ldr	r5, [r2, r3]
 800b594:	24f0      	movs	r4, #240	; 0xf0
 800b596:	0324      	lsls	r4, r4, #12
 800b598:	432c      	orrs	r4, r5
 800b59a:	50d4      	str	r4, [r2, r3]
 800b59c:	e4e2      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800b59e:	4a10      	ldr	r2, [pc, #64]	; (800b5e0 <RemapAndLinkDMAtoUARTRx+0x83c>)
 800b5a0:	680c      	ldr	r4, [r1, #0]
 800b5a2:	4294      	cmp	r4, r2
 800b5a4:	d000      	beq.n	800b5a8 <RemapAndLinkDMAtoUARTRx+0x804>
 800b5a6:	e4b7      	b.n	800af18 <RemapAndLinkDMAtoUARTRx+0x174>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800b5a8:	4a0e      	ldr	r2, [pc, #56]	; (800b5e4 <RemapAndLinkDMAtoUARTRx+0x840>)
 800b5aa:	23a8      	movs	r3, #168	; 0xa8
 800b5ac:	58d4      	ldr	r4, [r2, r3]
 800b5ae:	4d0e      	ldr	r5, [pc, #56]	; (800b5e8 <RemapAndLinkDMAtoUARTRx+0x844>)
 800b5b0:	402c      	ands	r4, r5
 800b5b2:	50d4      	str	r4, [r2, r3]
 800b5b4:	58d5      	ldr	r5, [r2, r3]
 800b5b6:	24f0      	movs	r4, #240	; 0xf0
 800b5b8:	0424      	lsls	r4, r4, #16
 800b5ba:	432c      	orrs	r4, r5
 800b5bc:	50d4      	str	r4, [r2, r3]
 800b5be:	e4d1      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800b5c0:	4a0a      	ldr	r2, [pc, #40]	; (800b5ec <RemapAndLinkDMAtoUARTRx+0x848>)
 800b5c2:	680c      	ldr	r4, [r1, #0]
 800b5c4:	4294      	cmp	r4, r2
 800b5c6:	d000      	beq.n	800b5ca <RemapAndLinkDMAtoUARTRx+0x826>
 800b5c8:	e4aa      	b.n	800af20 <RemapAndLinkDMAtoUARTRx+0x17c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800b5ca:	4a09      	ldr	r2, [pc, #36]	; (800b5f0 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800b5cc:	23a8      	movs	r3, #168	; 0xa8
 800b5ce:	58d5      	ldr	r5, [r2, r3]
 800b5d0:	26f0      	movs	r6, #240	; 0xf0
 800b5d2:	43b5      	bics	r5, r6
 800b5d4:	50d5      	str	r5, [r2, r3]
 800b5d6:	58d4      	ldr	r4, [r2, r3]
 800b5d8:	4334      	orrs	r4, r6
 800b5da:	50d4      	str	r4, [r2, r3]
 800b5dc:	e4c2      	b.n	800af64 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800b5de:	46c0      	nop			; (mov r8, r8)
 800b5e0:	4002006c 	.word	0x4002006c
 800b5e4:	40020000 	.word	0x40020000
 800b5e8:	ff0fffff 	.word	0xff0fffff
 800b5ec:	4002041c 	.word	0x4002041c
 800b5f0:	40020400 	.word	0x40020400
 800b5f4:	40020430 	.word	0x40020430
 800b5f8:	fffff0ff 	.word	0xfffff0ff
 800b5fc:	40020008 	.word	0x40020008
 800b600:	40020030 	.word	0x40020030
 800b604:	40020058 	.word	0x40020058
 800b608:	fff0ffff 	.word	0xfff0ffff

0800b60c <DMA_MSG_RX_Setup>:
{	
 800b60c:	b570      	push	{r4, r5, r6, lr}
 800b60e:	0004      	movs	r4, r0
 800b610:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b612:	f7ff fbc7 	bl	800ada4 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b616:	2100      	movs	r1, #0
 800b618:	0028      	movs	r0, r5
 800b61a:	f7ff fb39 	bl	800ac90 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);	
 800b61e:	0020      	movs	r0, r4
 800b620:	f7ff f9ee 	bl	800aa00 <GetPort>
 800b624:	1e41      	subs	r1, r0, #1
 800b626:	4803      	ldr	r0, [pc, #12]	; (800b634 <DMA_MSG_RX_Setup+0x28>)
 800b628:	1809      	adds	r1, r1, r0
 800b62a:	2201      	movs	r2, #1
 800b62c:	0020      	movs	r0, r4
 800b62e:	f007 f851 	bl	80126d4 <HAL_UART_Receive_DMA>
}
 800b632:	bd70      	pop	{r4, r5, r6, pc}
 800b634:	20001e00 	.word	0x20001e00

0800b638 <SetupMessagingRxDMAs>:
{	
 800b638:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800b63a:	4b17      	ldr	r3, [pc, #92]	; (800b698 <SetupMessagingRxDMAs+0x60>)
 800b63c:	785b      	ldrb	r3, [r3, #1]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d010      	beq.n	800b664 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800b642:	4b15      	ldr	r3, [pc, #84]	; (800b698 <SetupMessagingRxDMAs+0x60>)
 800b644:	789b      	ldrb	r3, [r3, #2]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d011      	beq.n	800b66e <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800b64a:	4b13      	ldr	r3, [pc, #76]	; (800b698 <SetupMessagingRxDMAs+0x60>)
 800b64c:	78db      	ldrb	r3, [r3, #3]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d012      	beq.n	800b678 <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800b652:	4b11      	ldr	r3, [pc, #68]	; (800b698 <SetupMessagingRxDMAs+0x60>)
 800b654:	791b      	ldrb	r3, [r3, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d013      	beq.n	800b682 <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800b65a:	4b0f      	ldr	r3, [pc, #60]	; (800b698 <SetupMessagingRxDMAs+0x60>)
 800b65c:	795b      	ldrb	r3, [r3, #5]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d014      	beq.n	800b68c <SetupMessagingRxDMAs+0x54>
}
 800b662:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800b664:	490d      	ldr	r1, [pc, #52]	; (800b69c <SetupMessagingRxDMAs+0x64>)
 800b666:	480e      	ldr	r0, [pc, #56]	; (800b6a0 <SetupMessagingRxDMAs+0x68>)
 800b668:	f7ff ffd0 	bl	800b60c <DMA_MSG_RX_Setup>
 800b66c:	e7e9      	b.n	800b642 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800b66e:	490d      	ldr	r1, [pc, #52]	; (800b6a4 <SetupMessagingRxDMAs+0x6c>)
 800b670:	480d      	ldr	r0, [pc, #52]	; (800b6a8 <SetupMessagingRxDMAs+0x70>)
 800b672:	f7ff ffcb 	bl	800b60c <DMA_MSG_RX_Setup>
 800b676:	e7e8      	b.n	800b64a <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800b678:	490c      	ldr	r1, [pc, #48]	; (800b6ac <SetupMessagingRxDMAs+0x74>)
 800b67a:	480d      	ldr	r0, [pc, #52]	; (800b6b0 <SetupMessagingRxDMAs+0x78>)
 800b67c:	f7ff ffc6 	bl	800b60c <DMA_MSG_RX_Setup>
 800b680:	e7e7      	b.n	800b652 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800b682:	490c      	ldr	r1, [pc, #48]	; (800b6b4 <SetupMessagingRxDMAs+0x7c>)
 800b684:	480c      	ldr	r0, [pc, #48]	; (800b6b8 <SetupMessagingRxDMAs+0x80>)
 800b686:	f7ff ffc1 	bl	800b60c <DMA_MSG_RX_Setup>
 800b68a:	e7e6      	b.n	800b65a <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800b68c:	490b      	ldr	r1, [pc, #44]	; (800b6bc <SetupMessagingRxDMAs+0x84>)
 800b68e:	480c      	ldr	r0, [pc, #48]	; (800b6c0 <SetupMessagingRxDMAs+0x88>)
 800b690:	f7ff ffbc 	bl	800b60c <DMA_MSG_RX_Setup>
}
 800b694:	e7e5      	b.n	800b662 <SetupMessagingRxDMAs+0x2a>
 800b696:	46c0      	nop			; (mov r8, r8)
 800b698:	20000c5c 	.word	0x20000c5c
 800b69c:	20002848 	.word	0x20002848
 800b6a0:	20002514 	.word	0x20002514
 800b6a4:	20002880 	.word	0x20002880
 800b6a8:	20002354 	.word	0x20002354
 800b6ac:	200028b8 	.word	0x200028b8
 800b6b0:	200024a4 	.word	0x200024a4
 800b6b4:	200028f0 	.word	0x200028f0
 800b6b8:	20002434 	.word	0x20002434
 800b6bc:	20002928 	.word	0x20002928
 800b6c0:	200023c4 	.word	0x200023c4

0800b6c4 <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800b6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6c6:	46c6      	mov	lr, r8
 800b6c8:	b500      	push	{lr}
 800b6ca:	0007      	movs	r7, r0
	StopStreamDMA(port);
 800b6cc:	f7ff faa0 	bl	800ac10 <StopStreamDMA>
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800b6d0:	1e7c      	subs	r4, r7, #1
 800b6d2:	00e5      	lsls	r5, r4, #3
 800b6d4:	1b2e      	subs	r6, r5, r4
 800b6d6:	00f6      	lsls	r6, r6, #3
 800b6d8:	4b11      	ldr	r3, [pc, #68]	; (800b720 <SwitchStreamDMAToMsg+0x5c>)
 800b6da:	18f6      	adds	r6, r6, r3
 800b6dc:	4b11      	ldr	r3, [pc, #68]	; (800b724 <SwitchStreamDMAToMsg+0x60>)
 800b6de:	4698      	mov	r8, r3
 800b6e0:	1b2b      	subs	r3, r5, r4
 800b6e2:	00db      	lsls	r3, r3, #3
 800b6e4:	4642      	mov	r2, r8
 800b6e6:	5899      	ldr	r1, [r3, r2]
 800b6e8:	0030      	movs	r0, r6
 800b6ea:	f7ff fa0b 	bl	800ab04 <DMA_MSG_RX_CH_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800b6ee:	1b2b      	subs	r3, r5, r4
 800b6f0:	00db      	lsls	r3, r3, #3
 800b6f2:	4443      	add	r3, r8
 800b6f4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b6f6:	f7ff f983 	bl	800aa00 <GetPort>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	4a0a      	ldr	r2, [pc, #40]	; (800b728 <SwitchStreamDMAToMsg+0x64>)
 800b6fe:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance = 0;
 800b700:	1b2d      	subs	r5, r5, r4
 800b702:	00ed      	lsls	r5, r5, #3
 800b704:	4642      	mov	r2, r8
 800b706:	50ab      	str	r3, [r5, r2]
	dmaStreamDst[port - 1] = 0;
 800b708:	00a4      	lsls	r4, r4, #2
 800b70a:	4a08      	ldr	r2, [pc, #32]	; (800b72c <SwitchStreamDMAToMsg+0x68>)
 800b70c:	50a3      	str	r3, [r4, r2]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800b70e:	0038      	movs	r0, r7
 800b710:	f002 fb46 	bl	800dda0 <GetUart>
 800b714:	0031      	movs	r1, r6
 800b716:	f7ff ff79 	bl	800b60c <DMA_MSG_RX_Setup>
}
 800b71a:	bc80      	pop	{r7}
 800b71c:	46b8      	mov	r8, r7
 800b71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b720:	20002848 	.word	0x20002848
 800b724:	20002650 	.word	0x20002650
 800b728:	20000c5c 	.word	0x20000c5c
 800b72c:	200019bc 	.word	0x200019bc

0800b730 <DMA_STREAM_Setup>:
{	
 800b730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b732:	0005      	movs	r5, r0
 800b734:	000f      	movs	r7, r1
 800b736:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800b738:	f7ff f962 	bl	800aa00 <GetPort>
	hDMA = &streamDMA[port-1];
 800b73c:	3801      	subs	r0, #1
 800b73e:	00c4      	lsls	r4, r0, #3
 800b740:	1a24      	subs	r4, r4, r0
 800b742:	00e4      	lsls	r4, r4, #3
 800b744:	4809      	ldr	r0, [pc, #36]	; (800b76c <DMA_STREAM_Setup+0x3c>)
 800b746:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800b748:	0021      	movs	r1, r4
 800b74a:	0028      	movs	r0, r5
 800b74c:	f7ff fb2a 	bl	800ada4 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800b750:	2101      	movs	r1, #1
 800b752:	0020      	movs	r0, r4
 800b754:	f7ff fa9c 	bl	800ac90 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800b758:	2369      	movs	r3, #105	; 0x69
 800b75a:	2201      	movs	r2, #1
 800b75c:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800b75e:	6839      	ldr	r1, [r7, #0]
 800b760:	3128      	adds	r1, #40	; 0x28
 800b762:	0032      	movs	r2, r6
 800b764:	0028      	movs	r0, r5
 800b766:	f006 ffb5 	bl	80126d4 <HAL_UART_Receive_DMA>
}
 800b76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b76c:	20002650 	.word	0x20002650

0800b770 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800b770:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800b772:	4807      	ldr	r0, [pc, #28]	; (800b790 <CRC_Init+0x20>)
 800b774:	4b07      	ldr	r3, [pc, #28]	; (800b794 <CRC_Init+0x24>)
 800b776:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800b778:	2310      	movs	r3, #16
 800b77a:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800b77c:	2300      	movs	r3, #0
 800b77e:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800b780:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800b782:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800b784:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800b786:	3303      	adds	r3, #3
 800b788:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800b78a:	f004 ff64 	bl	8010656 <HAL_CRC_Init>
}
 800b78e:	bd10      	pop	{r4, pc}
 800b790:	20002584 	.word	0x20002584
 800b794:	40023000 	.word	0x40023000

0800b798 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800b798:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800b79a:	4a05      	ldr	r2, [pc, #20]	; (800b7b0 <HAL_CRC_MspInit+0x18>)
 800b79c:	6951      	ldr	r1, [r2, #20]
 800b79e:	2340      	movs	r3, #64	; 0x40
 800b7a0:	4319      	orrs	r1, r3
 800b7a2:	6151      	str	r1, [r2, #20]
 800b7a4:	6952      	ldr	r2, [r2, #20]
 800b7a6:	4013      	ands	r3, r2
 800b7a8:	9301      	str	r3, [sp, #4]
 800b7aa:	9b01      	ldr	r3, [sp, #4]
}
 800b7ac:	b002      	add	sp, #8
 800b7ae:	4770      	bx	lr
 800b7b0:	40021000 	.word	0x40021000

0800b7b4 <CalculateCRC8>:
/*
 * calculate CRC8 byte for a data buffer
 */

uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
 800b7b4:	b530      	push	{r4, r5, lr}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	0005      	movs	r5, r0
 800b7ba:	000c      	movs	r4, r1
  uint8_t pTemp;
  uint8_t temp_index;
  uint8_t temp_buffer[4] = {0};
 800b7bc:	2300      	movs	r3, #0
 800b7be:	9301      	str	r3, [sp, #4]

  /* check if the passed variables are null */
  if (NULL!=pBuffer && 0!=size)
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d03d      	beq.n	800b840 <CalculateCRC8+0x8c>
 800b7c4:	2900      	cmp	r1, #0
 800b7c6:	d03d      	beq.n	800b844 <CalculateCRC8+0x90>
  {
	if(size < 4)
 800b7c8:	2903      	cmp	r1, #3
 800b7ca:	d816      	bhi.n	800b7fa <CalculateCRC8+0x46>
	{
		temp_index = 0;
		for(int i=0; i<4; i++)
 800b7cc:	2300      	movs	r3, #0
		temp_index = 0;
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	e001      	b.n	800b7d6 <CalculateCRC8+0x22>
		for(int i=0; i<4; i++)
 800b7d2:	3301      	adds	r3, #1
		{
			temp_buffer[i] = pBuffer[temp_index++];
 800b7d4:	0011      	movs	r1, r2
		for(int i=0; i<4; i++)
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	dc08      	bgt.n	800b7ec <CalculateCRC8+0x38>
			temp_buffer[i] = pBuffer[temp_index++];
 800b7da:	1c4a      	adds	r2, r1, #1
 800b7dc:	b2d2      	uxtb	r2, r2
 800b7de:	5c68      	ldrb	r0, [r5, r1]
 800b7e0:	a901      	add	r1, sp, #4
 800b7e2:	54c8      	strb	r0, [r1, r3]
			if(--size == 0) break;
 800b7e4:	3c01      	subs	r4, #1
 800b7e6:	b2a4      	uxth	r4, r4
 800b7e8:	2c00      	cmp	r4, #0
 800b7ea:	d1f2      	bne.n	800b7d2 <CalculateCRC8+0x1e>
		}
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	a901      	add	r1, sp, #4
 800b7f0:	4816      	ldr	r0, [pc, #88]	; (800b84c <CalculateCRC8+0x98>)
 800b7f2:	f004 ff8b 	bl	801070c <HAL_CRC_Calculate>
 800b7f6:	b2c0      	uxtb	r0, r0
 800b7f8:	e025      	b.n	800b846 <CalculateCRC8+0x92>

	}

	else
	{
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800b7fa:	088a      	lsrs	r2, r1, #2
 800b7fc:	0001      	movs	r1, r0
 800b7fe:	4813      	ldr	r0, [pc, #76]	; (800b84c <CalculateCRC8+0x98>)
 800b800:	f004 ff84 	bl	801070c <HAL_CRC_Calculate>
 800b804:	b2c0      	uxtb	r0, r0
		if ((size%4)!=0)
 800b806:	2203      	movs	r2, #3
 800b808:	0013      	movs	r3, r2
 800b80a:	4023      	ands	r3, r4
 800b80c:	4222      	tst	r2, r4
 800b80e:	d01a      	beq.n	800b846 <CalculateCRC8+0x92>
		{
			temp_index = size - (size%4);
 800b810:	b2e4      	uxtb	r4, r4
 800b812:	4394      	bics	r4, r2
			size %= 4;
			for(int i=0; i<4; i++)
 800b814:	2200      	movs	r2, #0
 800b816:	2a03      	cmp	r2, #3
 800b818:	dc0b      	bgt.n	800b832 <CalculateCRC8+0x7e>
			{
				temp_buffer[i] = pBuffer[temp_index++];
 800b81a:	1c61      	adds	r1, r4, #1
 800b81c:	b2c9      	uxtb	r1, r1
 800b81e:	5d2c      	ldrb	r4, [r5, r4]
 800b820:	a801      	add	r0, sp, #4
 800b822:	5484      	strb	r4, [r0, r2]
				if(--size == 0) break;
 800b824:	3b01      	subs	r3, #1
 800b826:	b29b      	uxth	r3, r3
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d002      	beq.n	800b832 <CalculateCRC8+0x7e>
			for(int i=0; i<4; i++)
 800b82c:	3201      	adds	r2, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800b82e:	000c      	movs	r4, r1
 800b830:	e7f1      	b.n	800b816 <CalculateCRC8+0x62>
			}
		  	pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b832:	2201      	movs	r2, #1
 800b834:	a901      	add	r1, sp, #4
 800b836:	4805      	ldr	r0, [pc, #20]	; (800b84c <CalculateCRC8+0x98>)
 800b838:	f004 ff3e 	bl	80106b8 <HAL_CRC_Accumulate>
 800b83c:	b2c0      	uxtb	r0, r0

		}
	}

	return pTemp;
 800b83e:	e002      	b.n	800b846 <CalculateCRC8+0x92>
  }
  
else
	return 0;
 800b840:	2000      	movs	r0, #0
 800b842:	e000      	b.n	800b846 <CalculateCRC8+0x92>
 800b844:	2000      	movs	r0, #0
}
 800b846:	b003      	add	sp, #12
 800b848:	bd30      	pop	{r4, r5, pc}
 800b84a:	46c0      	nop			; (mov r8, r8)
 800b84c:	20002584 	.word	0x20002584

0800b850 <EE_FindValidPage>:
 *     @arg READ_FROM_VALID_PAGE: read operation from valid page
 *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
 * @retval Valid page number (PAGEA or PAGEB) or NO_VALID_PAGE in case
 *   of no valid page was found
 */
static uint16_t EE_FindValidPage(uint8_t Operation){
 800b850:	0002      	movs	r2, r0
	uint16_t PageStatusA =6, PageStatusB =6;
	
	/* Get PageA actual status */
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b852:	4b13      	ldr	r3, [pc, #76]	; (800b8a0 <EE_FindValidPage+0x50>)
 800b854:	8818      	ldrh	r0, [r3, #0]
 800b856:	b280      	uxth	r0, r0
	
	/* Get PageB actual status */
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b858:	4b12      	ldr	r3, [pc, #72]	; (800b8a4 <EE_FindValidPage+0x54>)
 800b85a:	881b      	ldrh	r3, [r3, #0]
 800b85c:	b29b      	uxth	r3, r3
	
	/* Write or read operation */
	switch(Operation){
 800b85e:	2a00      	cmp	r2, #0
 800b860:	d011      	beq.n	800b886 <EE_FindValidPage+0x36>
 800b862:	2a01      	cmp	r2, #1
 800b864:	d115      	bne.n	800b892 <EE_FindValidPage+0x42>
		case WRITE_IN_VALID_PAGE: /* ---- Write operation ---- */
			if(PageStatusB == VALID_PAGE){
 800b866:	2b00      	cmp	r3, #0
 800b868:	d106      	bne.n	800b878 <EE_FindValidPage+0x28>
				/* PageA receiving data */
				if(PageStatusA == RECEIVE_DATA){
 800b86a:	4a0f      	ldr	r2, [pc, #60]	; (800b8a8 <EE_FindValidPage+0x58>)
 800b86c:	4290      	cmp	r0, r2
 800b86e:	d001      	beq.n	800b874 <EE_FindValidPage+0x24>
					return PAGEA; /* PageA valid */
				}
				else{
					return PAGEB; /* PageB valid */
 800b870:	2002      	movs	r0, #2
 800b872:	e00f      	b.n	800b894 <EE_FindValidPage+0x44>
					return PAGEA; /* PageA valid */
 800b874:	0018      	movs	r0, r3
 800b876:	e00d      	b.n	800b894 <EE_FindValidPage+0x44>
				}
			}
			else if(PageStatusA == VALID_PAGE){
 800b878:	2800      	cmp	r0, #0
 800b87a:	d10c      	bne.n	800b896 <EE_FindValidPage+0x46>
				/* PageB receiving data */
				if(PageStatusB == RECEIVE_DATA){
 800b87c:	4a0a      	ldr	r2, [pc, #40]	; (800b8a8 <EE_FindValidPage+0x58>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d108      	bne.n	800b894 <EE_FindValidPage+0x44>
					return PAGEB; /* PageB valid */
 800b882:	3002      	adds	r0, #2
 800b884:	e006      	b.n	800b894 <EE_FindValidPage+0x44>
			else{
				return NO_VALID_PAGE; /* No valid Page */
			}
			
		case READ_FROM_VALID_PAGE: /* ---- Read operation ---- */
			if(PageStatusA == VALID_PAGE){
 800b886:	2800      	cmp	r0, #0
 800b888:	d004      	beq.n	800b894 <EE_FindValidPage+0x44>
				return PAGEA; /* PageA valid */
			}
			else if(PageStatusB == VALID_PAGE){
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d105      	bne.n	800b89a <EE_FindValidPage+0x4a>
				return PAGEB; /* PageB valid */
 800b88e:	2002      	movs	r0, #2
 800b890:	e000      	b.n	800b894 <EE_FindValidPage+0x44>
	switch(Operation){
 800b892:	2000      	movs	r0, #0
			}
			
		default:
			return PAGEA; /* PageA valid */
	}
}
 800b894:	4770      	bx	lr
				return NO_VALID_PAGE; /* No valid Page */
 800b896:	20ab      	movs	r0, #171	; 0xab
 800b898:	e7fc      	b.n	800b894 <EE_FindValidPage+0x44>
				return NO_VALID_PAGE; /* No valid Page */
 800b89a:	20ab      	movs	r0, #171	; 0xab
 800b89c:	e7fa      	b.n	800b894 <EE_FindValidPage+0x44>
 800b89e:	46c0      	nop			; (mov r8, r8)
 800b8a0:	0801e000 	.word	0x0801e000
 800b8a4:	0801f000 	.word	0x0801f000
 800b8a8:	0000eeee 	.word	0x0000eeee

0800b8ac <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800b8ac:	b570      	push	{r4, r5, r6, lr}
 800b8ae:	0005      	movs	r5, r0
 800b8b0:	000e      	movs	r6, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800b8b2:	f005 fc75 	bl	80111a0 <HAL_FLASH_Unlock>
	
	/* Get valid Page for write operation */
	ValidPage =EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800b8b6:	2001      	movs	r0, #1
 800b8b8:	f7ff ffca 	bl	800b850 <EE_FindValidPage>
 800b8bc:	0003      	movs	r3, r0
	
	/* Check if there is no valid page */
	if(ValidPage == NO_VALID_PAGE){
 800b8be:	28ab      	cmp	r0, #171	; 0xab
 800b8c0:	d03d      	beq.n	800b93e <EE_VerifyPageFullWriteVariable+0x92>
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800b8c2:	4a1f      	ldr	r2, [pc, #124]	; (800b940 <EE_VerifyPageFullWriteVariable+0x94>)
 800b8c4:	1884      	adds	r4, r0, r2
 800b8c6:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800b8c8:	3302      	adds	r3, #2
 800b8ca:	02db      	lsls	r3, r3, #11
 800b8cc:	4a1d      	ldr	r2, [pc, #116]	; (800b944 <EE_VerifyPageFullWriteVariable+0x98>)
 800b8ce:	4694      	mov	ip, r2
 800b8d0:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
 800b8d2:	429c      	cmp	r4, r3
 800b8d4:	d230      	bcs.n	800b938 <EE_VerifyPageFullWriteVariable+0x8c>
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800b8d6:	6822      	ldr	r2, [r4, #0]
 800b8d8:	3201      	adds	r2, #1
 800b8da:	d001      	beq.n	800b8e0 <EE_VerifyPageFullWriteVariable+0x34>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800b8dc:	3404      	adds	r4, #4
 800b8de:	e7f8      	b.n	800b8d2 <EE_VerifyPageFullWriteVariable+0x26>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800b8e0:	0032      	movs	r2, r6
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	0021      	movs	r1, r4
 800b8e6:	2001      	movs	r0, #1
 800b8e8:	f005 fca4 	bl	8011234 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b8ec:	4816      	ldr	r0, [pc, #88]	; (800b948 <EE_VerifyPageFullWriteVariable+0x9c>)
 800b8ee:	f005 fc75 	bl	80111dc <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d003      	beq.n	800b8fe <EE_VerifyPageFullWriteVariable+0x52>
				return pFlash.ErrorCode;
 800b8f6:	4b15      	ldr	r3, [pc, #84]	; (800b94c <EE_VerifyPageFullWriteVariable+0xa0>)
 800b8f8:	69d8      	ldr	r0, [r3, #28]
 800b8fa:	b280      	uxth	r0, r0
 800b8fc:	e01f      	b.n	800b93e <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b8fe:	4a14      	ldr	r2, [pc, #80]	; (800b950 <EE_VerifyPageFullWriteVariable+0xa4>)
 800b900:	6913      	ldr	r3, [r2, #16]
 800b902:	2101      	movs	r1, #1
 800b904:	438b      	bics	r3, r1
 800b906:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b908:	1ca1      	adds	r1, r4, #2
 800b90a:	002a      	movs	r2, r5
 800b90c:	2300      	movs	r3, #0
 800b90e:	2001      	movs	r0, #1
 800b910:	f005 fc90 	bl	8011234 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b914:	480c      	ldr	r0, [pc, #48]	; (800b948 <EE_VerifyPageFullWriteVariable+0x9c>)
 800b916:	f005 fc61 	bl	80111dc <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800b91a:	2800      	cmp	r0, #0
 800b91c:	d003      	beq.n	800b926 <EE_VerifyPageFullWriteVariable+0x7a>
				return pFlash.ErrorCode;
 800b91e:	4b0b      	ldr	r3, [pc, #44]	; (800b94c <EE_VerifyPageFullWriteVariable+0xa0>)
 800b920:	69d8      	ldr	r0, [r3, #28]
 800b922:	b280      	uxth	r0, r0
 800b924:	e00b      	b.n	800b93e <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b926:	4a0a      	ldr	r2, [pc, #40]	; (800b950 <EE_VerifyPageFullWriteVariable+0xa4>)
 800b928:	6913      	ldr	r3, [r2, #16]
 800b92a:	2101      	movs	r1, #1
 800b92c:	438b      	bics	r3, r1
 800b92e:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 800b930:	4b06      	ldr	r3, [pc, #24]	; (800b94c <EE_VerifyPageFullWriteVariable+0xa0>)
 800b932:	69d8      	ldr	r0, [r3, #28]
 800b934:	b280      	uxth	r0, r0
 800b936:	e002      	b.n	800b93e <EE_VerifyPageFullWriteVariable+0x92>
		}
	}
	
	HAL_FLASH_Lock();
 800b938:	f005 fc46 	bl	80111c8 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800b93c:	2080      	movs	r0, #128	; 0x80
}
 800b93e:	bd70      	pop	{r4, r5, r6, pc}
 800b940:	0001003c 	.word	0x0001003c
 800b944:	0801dffe 	.word	0x0801dffe
 800b948:	0000c350 	.word	0x0000c350
 800b94c:	20006f28 	.word	0x20006f28
 800b950:	40022000 	.word	0x40022000

0800b954 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800b954:	b570      	push	{r4, r5, r6, lr}
 800b956:	0005      	movs	r5, r0
 800b958:	000c      	movs	r4, r1
	ValidPage =EE_FindValidPage(READ_FROM_VALID_PAGE);
 800b95a:	2000      	movs	r0, #0
 800b95c:	f7ff ff78 	bl	800b850 <EE_FindValidPage>
 800b960:	0003      	movs	r3, r0
	if(ValidPage == NO_VALID_PAGE){
 800b962:	28ab      	cmp	r0, #171	; 0xab
 800b964:	d016      	beq.n	800b994 <EE_ReadVariable+0x40>
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800b966:	4a0c      	ldr	r2, [pc, #48]	; (800b998 <EE_ReadVariable+0x44>)
 800b968:	1881      	adds	r1, r0, r2
 800b96a:	02c9      	lsls	r1, r1, #11
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800b96c:	3302      	adds	r3, #2
 800b96e:	02db      	lsls	r3, r3, #11
 800b970:	4a0a      	ldr	r2, [pc, #40]	; (800b99c <EE_ReadVariable+0x48>)
 800b972:	4694      	mov	ip, r2
 800b974:	4463      	add	r3, ip
	while(Address > (PageStartAddress + 2)){
 800b976:	1c8a      	adds	r2, r1, #2
 800b978:	429a      	cmp	r2, r3
 800b97a:	d20a      	bcs.n	800b992 <EE_ReadVariable+0x3e>
		AddressValue =(*(__IO uint16_t* )Address);
 800b97c:	881a      	ldrh	r2, [r3, #0]
 800b97e:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 800b980:	42aa      	cmp	r2, r5
 800b982:	d001      	beq.n	800b988 <EE_ReadVariable+0x34>
			Address =Address - 4;
 800b984:	3b04      	subs	r3, #4
 800b986:	e7f6      	b.n	800b976 <EE_ReadVariable+0x22>
			*Data =(*(__IO uint16_t* )(Address - 2));
 800b988:	3b02      	subs	r3, #2
 800b98a:	881b      	ldrh	r3, [r3, #0]
 800b98c:	8023      	strh	r3, [r4, #0]
			ReadStatus =0;
 800b98e:	2000      	movs	r0, #0
			break;
 800b990:	e000      	b.n	800b994 <EE_ReadVariable+0x40>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800b992:	2001      	movs	r0, #1
}
 800b994:	bd70      	pop	{r4, r5, r6, pc}
 800b996:	46c0      	nop			; (mov r8, r8)
 800b998:	0001003c 	.word	0x0001003c
 800b99c:	0801dffe 	.word	0x0801dffe

0800b9a0 <EE_PageTransfer>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_PageTransfer(uint16_t VirtAddress,uint16_t Data){
 800b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a2:	0005      	movs	r5, r0
 800b9a4:	000c      	movs	r4, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800b9a6:	f005 fbfb 	bl	80111a0 <HAL_FLASH_Unlock>
	
	/* Get active Page for read operation */
	ValidPage =EE_FindValidPage(READ_FROM_VALID_PAGE);
 800b9aa:	2000      	movs	r0, #0
 800b9ac:	f7ff ff50 	bl	800b850 <EE_FindValidPage>
	
	if(ValidPage == PAGEB) /* PageB valid */
 800b9b0:	2802      	cmp	r0, #2
 800b9b2:	d013      	beq.n	800b9dc <EE_PageTransfer+0x3c>
		NewPageAddress = PAGEA1_BASE_ADDRESS;
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEB1_BASE_ADDRESS;
	}
	else if(ValidPage == PAGEA) /* PageA valid */
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d000      	beq.n	800b9ba <EE_PageTransfer+0x1a>
 800b9b8:	e06d      	b.n	800ba96 <EE_PageTransfer+0xf6>
	{
		/* New page address where variable will be moved to */
		NewPageAddress = PAGEB1_BASE_ADDRESS;
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800b9ba:	4f38      	ldr	r7, [pc, #224]	; (800ba9c <EE_PageTransfer+0xfc>)
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800b9bc:	4e38      	ldr	r6, [pc, #224]	; (800baa0 <EE_PageTransfer+0x100>)
	else{
		return NO_VALID_PAGE; /* No valid Page */
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800b9be:	4a39      	ldr	r2, [pc, #228]	; (800baa4 <EE_PageTransfer+0x104>)
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	0031      	movs	r1, r6
 800b9c4:	2001      	movs	r0, #1
 800b9c6:	f005 fc35 	bl	8011234 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b9ca:	4837      	ldr	r0, [pc, #220]	; (800baa8 <EE_PageTransfer+0x108>)
 800b9cc:	f005 fc06 	bl	80111dc <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d006      	beq.n	800b9e2 <EE_PageTransfer+0x42>
		return pFlash.ErrorCode;
 800b9d4:	4b35      	ldr	r3, [pc, #212]	; (800baac <EE_PageTransfer+0x10c>)
 800b9d6:	69d8      	ldr	r0, [r3, #28]
 800b9d8:	b280      	uxth	r0, r0
	
	HAL_FLASH_Lock();
	
	/* Return last operation flash status */
	return FlashStatus;
}
 800b9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800b9dc:	4f30      	ldr	r7, [pc, #192]	; (800baa0 <EE_PageTransfer+0x100>)
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800b9de:	4e2f      	ldr	r6, [pc, #188]	; (800ba9c <EE_PageTransfer+0xfc>)
 800b9e0:	e7ed      	b.n	800b9be <EE_PageTransfer+0x1e>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b9e2:	4a33      	ldr	r2, [pc, #204]	; (800bab0 <EE_PageTransfer+0x110>)
 800b9e4:	6913      	ldr	r3, [r2, #16]
 800b9e6:	2101      	movs	r1, #1
 800b9e8:	438b      	bics	r3, r1
 800b9ea:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800b9ec:	0021      	movs	r1, r4
 800b9ee:	0028      	movs	r0, r5
 800b9f0:	f7ff ff5c 	bl	800b8ac <EE_VerifyPageFullWriteVariable>
	if(EepromStatus != HAL_OK){
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	d1f0      	bne.n	800b9da <EE_PageTransfer+0x3a>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b9f8:	2401      	movs	r4, #1
 800b9fa:	e001      	b.n	800ba00 <EE_PageTransfer+0x60>
 800b9fc:	3401      	adds	r4, #1
 800b9fe:	b2a4      	uxth	r4, r4
 800ba00:	2380      	movs	r3, #128	; 0x80
 800ba02:	00db      	lsls	r3, r3, #3
 800ba04:	429c      	cmp	r4, r3
 800ba06:	d80f      	bhi.n	800ba28 <EE_PageTransfer+0x88>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800ba08:	42ac      	cmp	r4, r5
 800ba0a:	d0f7      	beq.n	800b9fc <EE_PageTransfer+0x5c>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800ba0c:	4929      	ldr	r1, [pc, #164]	; (800bab4 <EE_PageTransfer+0x114>)
 800ba0e:	0020      	movs	r0, r4
 800ba10:	f7ff ffa0 	bl	800b954 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800ba14:	2801      	cmp	r0, #1
 800ba16:	d0f1      	beq.n	800b9fc <EE_PageTransfer+0x5c>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800ba18:	4b26      	ldr	r3, [pc, #152]	; (800bab4 <EE_PageTransfer+0x114>)
 800ba1a:	8819      	ldrh	r1, [r3, #0]
 800ba1c:	0020      	movs	r0, r4
 800ba1e:	f7ff ff45 	bl	800b8ac <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d0ea      	beq.n	800b9fc <EE_PageTransfer+0x5c>
 800ba26:	e7d8      	b.n	800b9da <EE_PageTransfer+0x3a>
	FLASH_PageErase(OldPageAddress);
 800ba28:	0038      	movs	r0, r7
 800ba2a:	f005 fc69 	bl	8011300 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ba2e:	481e      	ldr	r0, [pc, #120]	; (800baa8 <EE_PageTransfer+0x108>)
 800ba30:	f005 fbd4 	bl	80111dc <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d003      	beq.n	800ba40 <EE_PageTransfer+0xa0>
		return pFlash.ErrorCode;
 800ba38:	4b1c      	ldr	r3, [pc, #112]	; (800baac <EE_PageTransfer+0x10c>)
 800ba3a:	69d8      	ldr	r0, [r3, #28]
 800ba3c:	b280      	uxth	r0, r0
 800ba3e:	e7cc      	b.n	800b9da <EE_PageTransfer+0x3a>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800ba40:	2380      	movs	r3, #128	; 0x80
 800ba42:	011b      	lsls	r3, r3, #4
 800ba44:	18f8      	adds	r0, r7, r3
 800ba46:	f005 fc5b 	bl	8011300 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ba4a:	4817      	ldr	r0, [pc, #92]	; (800baa8 <EE_PageTransfer+0x108>)
 800ba4c:	f005 fbc6 	bl	80111dc <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800ba50:	2800      	cmp	r0, #0
 800ba52:	d003      	beq.n	800ba5c <EE_PageTransfer+0xbc>
			return pFlash.ErrorCode;
 800ba54:	4b15      	ldr	r3, [pc, #84]	; (800baac <EE_PageTransfer+0x10c>)
 800ba56:	69d8      	ldr	r0, [r3, #28]
 800ba58:	b280      	uxth	r0, r0
 800ba5a:	e7be      	b.n	800b9da <EE_PageTransfer+0x3a>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ba5c:	4a14      	ldr	r2, [pc, #80]	; (800bab0 <EE_PageTransfer+0x110>)
 800ba5e:	6913      	ldr	r3, [r2, #16]
 800ba60:	2102      	movs	r1, #2
 800ba62:	438b      	bics	r3, r1
 800ba64:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800ba66:	2200      	movs	r2, #0
 800ba68:	2300      	movs	r3, #0
 800ba6a:	0031      	movs	r1, r6
 800ba6c:	2001      	movs	r0, #1
 800ba6e:	f005 fbe1 	bl	8011234 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ba72:	480d      	ldr	r0, [pc, #52]	; (800baa8 <EE_PageTransfer+0x108>)
 800ba74:	f005 fbb2 	bl	80111dc <FLASH_WaitForLastOperation>
 800ba78:	1e04      	subs	r4, r0, #0
	if(FlashStatus != HAL_OK){
 800ba7a:	d003      	beq.n	800ba84 <EE_PageTransfer+0xe4>
		return pFlash.ErrorCode;
 800ba7c:	4b0b      	ldr	r3, [pc, #44]	; (800baac <EE_PageTransfer+0x10c>)
 800ba7e:	69d8      	ldr	r0, [r3, #28]
 800ba80:	b280      	uxth	r0, r0
 800ba82:	e7aa      	b.n	800b9da <EE_PageTransfer+0x3a>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ba84:	4a0a      	ldr	r2, [pc, #40]	; (800bab0 <EE_PageTransfer+0x110>)
 800ba86:	6913      	ldr	r3, [r2, #16]
 800ba88:	2101      	movs	r1, #1
 800ba8a:	438b      	bics	r3, r1
 800ba8c:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800ba8e:	f005 fb9b 	bl	80111c8 <HAL_FLASH_Lock>
	return FlashStatus;
 800ba92:	b2a0      	uxth	r0, r4
 800ba94:	e7a1      	b.n	800b9da <EE_PageTransfer+0x3a>
		return NO_VALID_PAGE; /* No valid Page */
 800ba96:	20ab      	movs	r0, #171	; 0xab
 800ba98:	e79f      	b.n	800b9da <EE_PageTransfer+0x3a>
 800ba9a:	46c0      	nop			; (mov r8, r8)
 800ba9c:	0801e000 	.word	0x0801e000
 800baa0:	0801f000 	.word	0x0801f000
 800baa4:	0000eeee 	.word	0x0000eeee
 800baa8:	0000c350 	.word	0x0000c350
 800baac:	20006f28 	.word	0x20006f28
 800bab0:	40022000 	.word	0x40022000
 800bab4:	20002998 	.word	0x20002998

0800bab8 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800bab8:	b570      	push	{r4, r5, r6, lr}
 800baba:	0005      	movs	r5, r0
 800babc:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 800babe:	f005 fb6f 	bl	80111a0 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800bac2:	0031      	movs	r1, r6
 800bac4:	0028      	movs	r0, r5
 800bac6:	f7ff fef1 	bl	800b8ac <EE_VerifyPageFullWriteVariable>
 800baca:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 800bacc:	2880      	cmp	r0, #128	; 0x80
 800bace:	d003      	beq.n	800bad8 <EE_WriteVariable+0x20>
	HAL_FLASH_Lock();
 800bad0:	f005 fb7a 	bl	80111c8 <HAL_FLASH_Lock>
}
 800bad4:	0020      	movs	r0, r4
 800bad6:	bd70      	pop	{r4, r5, r6, pc}
		Status =EE_PageTransfer(VirtAddress,Data);
 800bad8:	0031      	movs	r1, r6
 800bada:	0028      	movs	r0, r5
 800badc:	f7ff ff60 	bl	800b9a0 <EE_PageTransfer>
 800bae0:	0004      	movs	r4, r0
 800bae2:	e7f5      	b.n	800bad0 <EE_WriteVariable+0x18>

0800bae4 <EE_Format>:
uint16_t EE_Format(void){
 800bae4:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800bae6:	f005 fb5b 	bl	80111a0 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800baea:	4829      	ldr	r0, [pc, #164]	; (800bb90 <EE_Format+0xac>)
 800baec:	f005 fc08 	bl	8011300 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800baf0:	4828      	ldr	r0, [pc, #160]	; (800bb94 <EE_Format+0xb0>)
 800baf2:	f005 fb73 	bl	80111dc <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800baf6:	2800      	cmp	r0, #0
 800baf8:	d003      	beq.n	800bb02 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800bafa:	4b27      	ldr	r3, [pc, #156]	; (800bb98 <EE_Format+0xb4>)
 800bafc:	69d8      	ldr	r0, [r3, #28]
 800bafe:	b280      	uxth	r0, r0
}
 800bb00:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bb02:	4826      	ldr	r0, [pc, #152]	; (800bb9c <EE_Format+0xb8>)
 800bb04:	f005 fbfc 	bl	8011300 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb08:	4822      	ldr	r0, [pc, #136]	; (800bb94 <EE_Format+0xb0>)
 800bb0a:	f005 fb67 	bl	80111dc <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d003      	beq.n	800bb1a <EE_Format+0x36>
			return pFlash.ErrorCode;
 800bb12:	4b21      	ldr	r3, [pc, #132]	; (800bb98 <EE_Format+0xb4>)
 800bb14:	69d8      	ldr	r0, [r3, #28]
 800bb16:	b280      	uxth	r0, r0
 800bb18:	e7f2      	b.n	800bb00 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bb1a:	4a21      	ldr	r2, [pc, #132]	; (800bba0 <EE_Format+0xbc>)
 800bb1c:	6913      	ldr	r3, [r2, #16]
 800bb1e:	2102      	movs	r1, #2
 800bb20:	438b      	bics	r3, r1
 800bb22:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bb24:	2200      	movs	r2, #0
 800bb26:	2300      	movs	r3, #0
 800bb28:	4919      	ldr	r1, [pc, #100]	; (800bb90 <EE_Format+0xac>)
 800bb2a:	2001      	movs	r0, #1
 800bb2c:	f005 fb82 	bl	8011234 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb30:	4818      	ldr	r0, [pc, #96]	; (800bb94 <EE_Format+0xb0>)
 800bb32:	f005 fb53 	bl	80111dc <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bb36:	2800      	cmp	r0, #0
 800bb38:	d003      	beq.n	800bb42 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 800bb3a:	4b17      	ldr	r3, [pc, #92]	; (800bb98 <EE_Format+0xb4>)
 800bb3c:	69d8      	ldr	r0, [r3, #28]
 800bb3e:	b280      	uxth	r0, r0
 800bb40:	e7de      	b.n	800bb00 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bb42:	4a17      	ldr	r2, [pc, #92]	; (800bba0 <EE_Format+0xbc>)
 800bb44:	6913      	ldr	r3, [r2, #16]
 800bb46:	2101      	movs	r1, #1
 800bb48:	438b      	bics	r3, r1
 800bb4a:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bb4c:	4815      	ldr	r0, [pc, #84]	; (800bba4 <EE_Format+0xc0>)
 800bb4e:	f005 fbd7 	bl	8011300 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb52:	4810      	ldr	r0, [pc, #64]	; (800bb94 <EE_Format+0xb0>)
 800bb54:	f005 fb42 	bl	80111dc <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d003      	beq.n	800bb64 <EE_Format+0x80>
		return pFlash.ErrorCode;
 800bb5c:	4b0e      	ldr	r3, [pc, #56]	; (800bb98 <EE_Format+0xb4>)
 800bb5e:	69d8      	ldr	r0, [r3, #28]
 800bb60:	b280      	uxth	r0, r0
 800bb62:	e7cd      	b.n	800bb00 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bb64:	4810      	ldr	r0, [pc, #64]	; (800bba8 <EE_Format+0xc4>)
 800bb66:	f005 fbcb 	bl	8011300 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb6a:	480a      	ldr	r0, [pc, #40]	; (800bb94 <EE_Format+0xb0>)
 800bb6c:	f005 fb36 	bl	80111dc <FLASH_WaitForLastOperation>
 800bb70:	1e04      	subs	r4, r0, #0
		if(FlashStatus != HAL_OK){
 800bb72:	d003      	beq.n	800bb7c <EE_Format+0x98>
			return pFlash.ErrorCode;
 800bb74:	4b08      	ldr	r3, [pc, #32]	; (800bb98 <EE_Format+0xb4>)
 800bb76:	69d8      	ldr	r0, [r3, #28]
 800bb78:	b280      	uxth	r0, r0
 800bb7a:	e7c1      	b.n	800bb00 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bb7c:	4a08      	ldr	r2, [pc, #32]	; (800bba0 <EE_Format+0xbc>)
 800bb7e:	6913      	ldr	r3, [r2, #16]
 800bb80:	2101      	movs	r1, #1
 800bb82:	438b      	bics	r3, r1
 800bb84:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800bb86:	f005 fb1f 	bl	80111c8 <HAL_FLASH_Lock>
	return FlashStatus;
 800bb8a:	b2a0      	uxth	r0, r4
 800bb8c:	e7b8      	b.n	800bb00 <EE_Format+0x1c>
 800bb8e:	46c0      	nop			; (mov r8, r8)
 800bb90:	0801e000 	.word	0x0801e000
 800bb94:	0000c350 	.word	0x0000c350
 800bb98:	20006f28 	.word	0x20006f28
 800bb9c:	0801e800 	.word	0x0801e800
 800bba0:	40022000 	.word	0x40022000
 800bba4:	0801f000 	.word	0x0801f000
 800bba8:	0801f800 	.word	0x0801f800

0800bbac <EE_Init>:
uint16_t EE_Init(void){
 800bbac:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 800bbae:	f005 faf7 	bl	80111a0 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800bbb2:	4bbc      	ldr	r3, [pc, #752]	; (800bea4 <EE_Init+0x2f8>)
 800bbb4:	881b      	ldrh	r3, [r3, #0]
 800bbb6:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800bbb8:	4abb      	ldr	r2, [pc, #748]	; (800bea8 <EE_Init+0x2fc>)
 800bbba:	8812      	ldrh	r2, [r2, #0]
 800bbbc:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800bbbe:	49bb      	ldr	r1, [pc, #748]	; (800beac <EE_Init+0x300>)
 800bbc0:	428b      	cmp	r3, r1
 800bbc2:	d100      	bne.n	800bbc6 <EE_Init+0x1a>
 800bbc4:	e072      	b.n	800bcac <EE_Init+0x100>
 800bbc6:	49ba      	ldr	r1, [pc, #744]	; (800beb0 <EE_Init+0x304>)
 800bbc8:	428b      	cmp	r3, r1
 800bbca:	d00f      	beq.n	800bbec <EE_Init+0x40>
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d100      	bne.n	800bbd2 <EE_Init+0x26>
 800bbd0:	e106      	b.n	800bde0 <EE_Init+0x234>
			FlashStatus =EE_Format();
 800bbd2:	f7ff ff87 	bl	800bae4 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bbd6:	48b7      	ldr	r0, [pc, #732]	; (800beb4 <EE_Init+0x308>)
 800bbd8:	f005 fb00 	bl	80111dc <FLASH_WaitForLastOperation>
 800bbdc:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 800bbde:	2d00      	cmp	r5, #0
 800bbe0:	d102      	bne.n	800bbe8 <EE_Init+0x3c>
	HAL_FLASH_Lock();
 800bbe2:	f005 faf1 	bl	80111c8 <HAL_FLASH_Lock>
	return HAL_OK;
 800bbe6:	2500      	movs	r5, #0
}
 800bbe8:	0028      	movs	r0, r5
 800bbea:	bd70      	pop	{r4, r5, r6, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800bbec:	2a00      	cmp	r2, #0
 800bbee:	d00d      	beq.n	800bc0c <EE_Init+0x60>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800bbf0:	4bae      	ldr	r3, [pc, #696]	; (800beac <EE_Init+0x300>)
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d028      	beq.n	800bc48 <EE_Init+0x9c>
				FlashStatus =EE_Format();
 800bbf6:	f7ff ff75 	bl	800bae4 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bbfa:	48ae      	ldr	r0, [pc, #696]	; (800beb4 <EE_Init+0x308>)
 800bbfc:	f005 faee 	bl	80111dc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bc00:	2800      	cmp	r0, #0
 800bc02:	d0ee      	beq.n	800bbe2 <EE_Init+0x36>
					return pFlash.ErrorCode;
 800bc04:	4bac      	ldr	r3, [pc, #688]	; (800beb8 <EE_Init+0x30c>)
 800bc06:	69dd      	ldr	r5, [r3, #28]
 800bc08:	b2ad      	uxth	r5, r5
 800bc0a:	e7ed      	b.n	800bbe8 <EE_Init+0x3c>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bc0c:	48a5      	ldr	r0, [pc, #660]	; (800bea4 <EE_Init+0x2f8>)
 800bc0e:	f005 fb77 	bl	8011300 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc12:	48a8      	ldr	r0, [pc, #672]	; (800beb4 <EE_Init+0x308>)
 800bc14:	f005 fae2 	bl	80111dc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d003      	beq.n	800bc24 <EE_Init+0x78>
					return pFlash.ErrorCode;
 800bc1c:	4ba6      	ldr	r3, [pc, #664]	; (800beb8 <EE_Init+0x30c>)
 800bc1e:	69dd      	ldr	r5, [r3, #28]
 800bc20:	b2ad      	uxth	r5, r5
 800bc22:	e7e1      	b.n	800bbe8 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bc24:	48a5      	ldr	r0, [pc, #660]	; (800bebc <EE_Init+0x310>)
 800bc26:	f005 fb6b 	bl	8011300 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc2a:	48a2      	ldr	r0, [pc, #648]	; (800beb4 <EE_Init+0x308>)
 800bc2c:	f005 fad6 	bl	80111dc <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bc30:	2800      	cmp	r0, #0
 800bc32:	d105      	bne.n	800bc40 <EE_Init+0x94>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bc34:	4aa2      	ldr	r2, [pc, #648]	; (800bec0 <EE_Init+0x314>)
 800bc36:	6913      	ldr	r3, [r2, #16]
 800bc38:	2102      	movs	r1, #2
 800bc3a:	438b      	bics	r3, r1
 800bc3c:	6113      	str	r3, [r2, #16]
 800bc3e:	e7d0      	b.n	800bbe2 <EE_Init+0x36>
						return pFlash.ErrorCode;
 800bc40:	4b9d      	ldr	r3, [pc, #628]	; (800beb8 <EE_Init+0x30c>)
 800bc42:	69dd      	ldr	r5, [r3, #28]
 800bc44:	b2ad      	uxth	r5, r5
 800bc46:	e7cf      	b.n	800bbe8 <EE_Init+0x3c>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bc48:	4896      	ldr	r0, [pc, #600]	; (800bea4 <EE_Init+0x2f8>)
 800bc4a:	f005 fb59 	bl	8011300 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc4e:	4899      	ldr	r0, [pc, #612]	; (800beb4 <EE_Init+0x308>)
 800bc50:	f005 fac4 	bl	80111dc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bc54:	2800      	cmp	r0, #0
 800bc56:	d003      	beq.n	800bc60 <EE_Init+0xb4>
					return pFlash.ErrorCode;
 800bc58:	4b97      	ldr	r3, [pc, #604]	; (800beb8 <EE_Init+0x30c>)
 800bc5a:	69dd      	ldr	r5, [r3, #28]
 800bc5c:	b2ad      	uxth	r5, r5
 800bc5e:	e7c3      	b.n	800bbe8 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bc60:	4896      	ldr	r0, [pc, #600]	; (800bebc <EE_Init+0x310>)
 800bc62:	f005 fb4d 	bl	8011300 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc66:	4893      	ldr	r0, [pc, #588]	; (800beb4 <EE_Init+0x308>)
 800bc68:	f005 fab8 	bl	80111dc <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	d003      	beq.n	800bc78 <EE_Init+0xcc>
						return pFlash.ErrorCode;
 800bc70:	4b91      	ldr	r3, [pc, #580]	; (800beb8 <EE_Init+0x30c>)
 800bc72:	69dd      	ldr	r5, [r3, #28]
 800bc74:	b2ad      	uxth	r5, r5
 800bc76:	e7b7      	b.n	800bbe8 <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bc78:	4a91      	ldr	r2, [pc, #580]	; (800bec0 <EE_Init+0x314>)
 800bc7a:	6913      	ldr	r3, [r2, #16]
 800bc7c:	2102      	movs	r1, #2
 800bc7e:	438b      	bics	r3, r1
 800bc80:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800bc82:	2200      	movs	r2, #0
 800bc84:	2300      	movs	r3, #0
 800bc86:	4988      	ldr	r1, [pc, #544]	; (800bea8 <EE_Init+0x2fc>)
 800bc88:	2001      	movs	r0, #1
 800bc8a:	f005 fad3 	bl	8011234 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc8e:	4889      	ldr	r0, [pc, #548]	; (800beb4 <EE_Init+0x308>)
 800bc90:	f005 faa4 	bl	80111dc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d105      	bne.n	800bca4 <EE_Init+0xf8>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bc98:	4a89      	ldr	r2, [pc, #548]	; (800bec0 <EE_Init+0x314>)
 800bc9a:	6913      	ldr	r3, [r2, #16]
 800bc9c:	2101      	movs	r1, #1
 800bc9e:	438b      	bics	r3, r1
 800bca0:	6113      	str	r3, [r2, #16]
 800bca2:	e79e      	b.n	800bbe2 <EE_Init+0x36>
					return pFlash.ErrorCode;
 800bca4:	4b84      	ldr	r3, [pc, #528]	; (800beb8 <EE_Init+0x30c>)
 800bca6:	69dd      	ldr	r5, [r3, #28]
 800bca8:	b2ad      	uxth	r5, r5
 800bcaa:	e79d      	b.n	800bbe8 <EE_Init+0x3c>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800bcac:	2a00      	cmp	r2, #0
 800bcae:	d02f      	beq.n	800bd10 <EE_Init+0x164>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800bcb0:	4b7f      	ldr	r3, [pc, #508]	; (800beb0 <EE_Init+0x304>)
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d062      	beq.n	800bd7c <EE_Init+0x1d0>
				FlashStatus =EE_Format();
 800bcb6:	f7ff ff15 	bl	800bae4 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bcba:	487e      	ldr	r0, [pc, #504]	; (800beb4 <EE_Init+0x308>)
 800bcbc:	f005 fa8e 	bl	80111dc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	d100      	bne.n	800bcc6 <EE_Init+0x11a>
 800bcc4:	e78d      	b.n	800bbe2 <EE_Init+0x36>
					return pFlash.ErrorCode;
 800bcc6:	4b7c      	ldr	r3, [pc, #496]	; (800beb8 <EE_Init+0x30c>)
 800bcc8:	69dd      	ldr	r5, [r3, #28]
 800bcca:	b2ad      	uxth	r5, r5
 800bccc:	e78c      	b.n	800bbe8 <EE_Init+0x3c>
						x =VarIdx;
 800bcce:	b226      	sxth	r6, r4
 800bcd0:	e00a      	b.n	800bce8 <EE_Init+0x13c>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bcd2:	3401      	adds	r4, #1
 800bcd4:	b2a4      	uxth	r4, r4
 800bcd6:	2380      	movs	r3, #128	; 0x80
 800bcd8:	00db      	lsls	r3, r3, #3
 800bcda:	429c      	cmp	r4, r3
 800bcdc:	d81c      	bhi.n	800bd18 <EE_Init+0x16c>
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800bcde:	4b79      	ldr	r3, [pc, #484]	; (800bec4 <EE_Init+0x318>)
 800bce0:	881b      	ldrh	r3, [r3, #0]
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	42a3      	cmp	r3, r4
 800bce6:	d0f2      	beq.n	800bcce <EE_Init+0x122>
					if(VarIdx != x){
 800bce8:	42b4      	cmp	r4, r6
 800bcea:	d0f2      	beq.n	800bcd2 <EE_Init+0x126>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bcec:	4976      	ldr	r1, [pc, #472]	; (800bec8 <EE_Init+0x31c>)
 800bcee:	0020      	movs	r0, r4
 800bcf0:	f7ff fe30 	bl	800b954 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800bcf4:	2801      	cmp	r0, #1
 800bcf6:	d0ec      	beq.n	800bcd2 <EE_Init+0x126>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800bcf8:	4b73      	ldr	r3, [pc, #460]	; (800bec8 <EE_Init+0x31c>)
 800bcfa:	8819      	ldrh	r1, [r3, #0]
 800bcfc:	0020      	movs	r0, r4
 800bcfe:	f7ff fdd5 	bl	800b8ac <EE_VerifyPageFullWriteVariable>
 800bd02:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd04:	486b      	ldr	r0, [pc, #428]	; (800beb4 <EE_Init+0x308>)
 800bd06:	f005 fa69 	bl	80111dc <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d0e1      	beq.n	800bcd2 <EE_Init+0x126>
 800bd0e:	e76b      	b.n	800bbe8 <EE_Init+0x3c>
	int16_t x =-1;
 800bd10:	2601      	movs	r6, #1
 800bd12:	4276      	negs	r6, r6
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bd14:	2401      	movs	r4, #1
 800bd16:	e7de      	b.n	800bcd6 <EE_Init+0x12a>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bd18:	2200      	movs	r2, #0
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	4961      	ldr	r1, [pc, #388]	; (800bea4 <EE_Init+0x2f8>)
 800bd1e:	2001      	movs	r0, #1
 800bd20:	f005 fa88 	bl	8011234 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd24:	4863      	ldr	r0, [pc, #396]	; (800beb4 <EE_Init+0x308>)
 800bd26:	f005 fa59 	bl	80111dc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d003      	beq.n	800bd36 <EE_Init+0x18a>
					return pFlash.ErrorCode;
 800bd2e:	4b62      	ldr	r3, [pc, #392]	; (800beb8 <EE_Init+0x30c>)
 800bd30:	69dd      	ldr	r5, [r3, #28]
 800bd32:	b2ad      	uxth	r5, r5
 800bd34:	e758      	b.n	800bbe8 <EE_Init+0x3c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bd36:	4a62      	ldr	r2, [pc, #392]	; (800bec0 <EE_Init+0x314>)
 800bd38:	6913      	ldr	r3, [r2, #16]
 800bd3a:	2101      	movs	r1, #1
 800bd3c:	438b      	bics	r3, r1
 800bd3e:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bd40:	4859      	ldr	r0, [pc, #356]	; (800bea8 <EE_Init+0x2fc>)
 800bd42:	f005 fadd 	bl	8011300 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd46:	485b      	ldr	r0, [pc, #364]	; (800beb4 <EE_Init+0x308>)
 800bd48:	f005 fa48 	bl	80111dc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d003      	beq.n	800bd58 <EE_Init+0x1ac>
					return pFlash.ErrorCode;
 800bd50:	4b59      	ldr	r3, [pc, #356]	; (800beb8 <EE_Init+0x30c>)
 800bd52:	69dd      	ldr	r5, [r3, #28]
 800bd54:	b2ad      	uxth	r5, r5
 800bd56:	e747      	b.n	800bbe8 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bd58:	485c      	ldr	r0, [pc, #368]	; (800becc <EE_Init+0x320>)
 800bd5a:	f005 fad1 	bl	8011300 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd5e:	4855      	ldr	r0, [pc, #340]	; (800beb4 <EE_Init+0x308>)
 800bd60:	f005 fa3c 	bl	80111dc <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bd64:	2800      	cmp	r0, #0
 800bd66:	d105      	bne.n	800bd74 <EE_Init+0x1c8>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bd68:	4a55      	ldr	r2, [pc, #340]	; (800bec0 <EE_Init+0x314>)
 800bd6a:	6913      	ldr	r3, [r2, #16]
 800bd6c:	2102      	movs	r1, #2
 800bd6e:	438b      	bics	r3, r1
 800bd70:	6113      	str	r3, [r2, #16]
 800bd72:	e736      	b.n	800bbe2 <EE_Init+0x36>
						return pFlash.ErrorCode;
 800bd74:	4b50      	ldr	r3, [pc, #320]	; (800beb8 <EE_Init+0x30c>)
 800bd76:	69dd      	ldr	r5, [r3, #28]
 800bd78:	b2ad      	uxth	r5, r5
 800bd7a:	e735      	b.n	800bbe8 <EE_Init+0x3c>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bd7c:	484a      	ldr	r0, [pc, #296]	; (800bea8 <EE_Init+0x2fc>)
 800bd7e:	f005 fabf 	bl	8011300 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd82:	484c      	ldr	r0, [pc, #304]	; (800beb4 <EE_Init+0x308>)
 800bd84:	f005 fa2a 	bl	80111dc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d003      	beq.n	800bd94 <EE_Init+0x1e8>
					return pFlash.ErrorCode;
 800bd8c:	4b4a      	ldr	r3, [pc, #296]	; (800beb8 <EE_Init+0x30c>)
 800bd8e:	69dd      	ldr	r5, [r3, #28]
 800bd90:	b2ad      	uxth	r5, r5
 800bd92:	e729      	b.n	800bbe8 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bd94:	484d      	ldr	r0, [pc, #308]	; (800becc <EE_Init+0x320>)
 800bd96:	f005 fab3 	bl	8011300 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd9a:	4846      	ldr	r0, [pc, #280]	; (800beb4 <EE_Init+0x308>)
 800bd9c:	f005 fa1e 	bl	80111dc <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d003      	beq.n	800bdac <EE_Init+0x200>
						return pFlash.ErrorCode;
 800bda4:	4b44      	ldr	r3, [pc, #272]	; (800beb8 <EE_Init+0x30c>)
 800bda6:	69dd      	ldr	r5, [r3, #28]
 800bda8:	b2ad      	uxth	r5, r5
 800bdaa:	e71d      	b.n	800bbe8 <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bdac:	4a44      	ldr	r2, [pc, #272]	; (800bec0 <EE_Init+0x314>)
 800bdae:	6913      	ldr	r3, [r2, #16]
 800bdb0:	2102      	movs	r1, #2
 800bdb2:	438b      	bics	r3, r1
 800bdb4:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	2300      	movs	r3, #0
 800bdba:	493a      	ldr	r1, [pc, #232]	; (800bea4 <EE_Init+0x2f8>)
 800bdbc:	2001      	movs	r0, #1
 800bdbe:	f005 fa39 	bl	8011234 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bdc2:	483c      	ldr	r0, [pc, #240]	; (800beb4 <EE_Init+0x308>)
 800bdc4:	f005 fa0a 	bl	80111dc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	d105      	bne.n	800bdd8 <EE_Init+0x22c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bdcc:	4a3c      	ldr	r2, [pc, #240]	; (800bec0 <EE_Init+0x314>)
 800bdce:	6913      	ldr	r3, [r2, #16]
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	438b      	bics	r3, r1
 800bdd4:	6113      	str	r3, [r2, #16]
 800bdd6:	e704      	b.n	800bbe2 <EE_Init+0x36>
					return pFlash.ErrorCode;
 800bdd8:	4b37      	ldr	r3, [pc, #220]	; (800beb8 <EE_Init+0x30c>)
 800bdda:	69dd      	ldr	r5, [r3, #28]
 800bddc:	b2ad      	uxth	r5, r5
 800bdde:	e703      	b.n	800bbe8 <EE_Init+0x3c>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800bde0:	2a00      	cmp	r2, #0
 800bde2:	d006      	beq.n	800bdf2 <EE_Init+0x246>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800bde4:	4b32      	ldr	r3, [pc, #200]	; (800beb0 <EE_Init+0x304>)
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d00d      	beq.n	800be06 <EE_Init+0x25a>
	int16_t x =-1;
 800bdea:	2601      	movs	r6, #1
 800bdec:	4276      	negs	r6, r6
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bdee:	2401      	movs	r4, #1
 800bdf0:	e02b      	b.n	800be4a <EE_Init+0x29e>
				FlashStatus =EE_Format();
 800bdf2:	f7ff fe77 	bl	800bae4 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bdf6:	482f      	ldr	r0, [pc, #188]	; (800beb4 <EE_Init+0x308>)
 800bdf8:	f005 f9f0 	bl	80111dc <FLASH_WaitForLastOperation>
 800bdfc:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK){
 800bdfe:	2d00      	cmp	r5, #0
 800be00:	d100      	bne.n	800be04 <EE_Init+0x258>
 800be02:	e6ee      	b.n	800bbe2 <EE_Init+0x36>
 800be04:	e6f0      	b.n	800bbe8 <EE_Init+0x3c>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800be06:	4828      	ldr	r0, [pc, #160]	; (800bea8 <EE_Init+0x2fc>)
 800be08:	f005 fa7a 	bl	8011300 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be0c:	4829      	ldr	r0, [pc, #164]	; (800beb4 <EE_Init+0x308>)
 800be0e:	f005 f9e5 	bl	80111dc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800be12:	2800      	cmp	r0, #0
 800be14:	d003      	beq.n	800be1e <EE_Init+0x272>
					return pFlash.ErrorCode;
 800be16:	4b28      	ldr	r3, [pc, #160]	; (800beb8 <EE_Init+0x30c>)
 800be18:	69dd      	ldr	r5, [r3, #28]
 800be1a:	b2ad      	uxth	r5, r5
 800be1c:	e6e4      	b.n	800bbe8 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800be1e:	482b      	ldr	r0, [pc, #172]	; (800becc <EE_Init+0x320>)
 800be20:	f005 fa6e 	bl	8011300 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be24:	4823      	ldr	r0, [pc, #140]	; (800beb4 <EE_Init+0x308>)
 800be26:	f005 f9d9 	bl	80111dc <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d105      	bne.n	800be3a <EE_Init+0x28e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800be2e:	4a24      	ldr	r2, [pc, #144]	; (800bec0 <EE_Init+0x314>)
 800be30:	6913      	ldr	r3, [r2, #16]
 800be32:	2102      	movs	r1, #2
 800be34:	438b      	bics	r3, r1
 800be36:	6113      	str	r3, [r2, #16]
 800be38:	e6d3      	b.n	800bbe2 <EE_Init+0x36>
						return pFlash.ErrorCode;
 800be3a:	4b1f      	ldr	r3, [pc, #124]	; (800beb8 <EE_Init+0x30c>)
 800be3c:	69dd      	ldr	r5, [r3, #28]
 800be3e:	b2ad      	uxth	r5, r5
 800be40:	e6d2      	b.n	800bbe8 <EE_Init+0x3c>
						x =VarIdx;
 800be42:	b226      	sxth	r6, r4
 800be44:	e00a      	b.n	800be5c <EE_Init+0x2b0>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800be46:	3401      	adds	r4, #1
 800be48:	b2a4      	uxth	r4, r4
 800be4a:	2380      	movs	r3, #128	; 0x80
 800be4c:	00db      	lsls	r3, r3, #3
 800be4e:	429c      	cmp	r4, r3
 800be50:	d818      	bhi.n	800be84 <EE_Init+0x2d8>
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800be52:	4b1f      	ldr	r3, [pc, #124]	; (800bed0 <EE_Init+0x324>)
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	b29b      	uxth	r3, r3
 800be58:	42a3      	cmp	r3, r4
 800be5a:	d0f2      	beq.n	800be42 <EE_Init+0x296>
					if(VarIdx != x){
 800be5c:	42b4      	cmp	r4, r6
 800be5e:	d0f2      	beq.n	800be46 <EE_Init+0x29a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800be60:	4919      	ldr	r1, [pc, #100]	; (800bec8 <EE_Init+0x31c>)
 800be62:	0020      	movs	r0, r4
 800be64:	f7ff fd76 	bl	800b954 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800be68:	2801      	cmp	r0, #1
 800be6a:	d0ec      	beq.n	800be46 <EE_Init+0x29a>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800be6c:	4b16      	ldr	r3, [pc, #88]	; (800bec8 <EE_Init+0x31c>)
 800be6e:	8819      	ldrh	r1, [r3, #0]
 800be70:	0020      	movs	r0, r4
 800be72:	f7ff fd1b 	bl	800b8ac <EE_VerifyPageFullWriteVariable>
 800be76:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be78:	480e      	ldr	r0, [pc, #56]	; (800beb4 <EE_Init+0x308>)
 800be7a:	f005 f9af 	bl	80111dc <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800be7e:	2800      	cmp	r0, #0
 800be80:	d0e1      	beq.n	800be46 <EE_Init+0x29a>
 800be82:	e6b1      	b.n	800bbe8 <EE_Init+0x3c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800be84:	2200      	movs	r2, #0
 800be86:	2300      	movs	r3, #0
 800be88:	4907      	ldr	r1, [pc, #28]	; (800bea8 <EE_Init+0x2fc>)
 800be8a:	2001      	movs	r0, #1
 800be8c:	f005 f9d2 	bl	8011234 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be90:	4808      	ldr	r0, [pc, #32]	; (800beb4 <EE_Init+0x308>)
 800be92:	f005 f9a3 	bl	80111dc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800be96:	2800      	cmp	r0, #0
 800be98:	d01c      	beq.n	800bed4 <EE_Init+0x328>
					return pFlash.ErrorCode;
 800be9a:	4b07      	ldr	r3, [pc, #28]	; (800beb8 <EE_Init+0x30c>)
 800be9c:	69dd      	ldr	r5, [r3, #28]
 800be9e:	b2ad      	uxth	r5, r5
 800bea0:	e6a2      	b.n	800bbe8 <EE_Init+0x3c>
 800bea2:	46c0      	nop			; (mov r8, r8)
 800bea4:	0801e000 	.word	0x0801e000
 800bea8:	0801f000 	.word	0x0801f000
 800beac:	0000eeee 	.word	0x0000eeee
 800beb0:	0000ffff 	.word	0x0000ffff
 800beb4:	0000c350 	.word	0x0000c350
 800beb8:	20006f28 	.word	0x20006f28
 800bebc:	0801e800 	.word	0x0801e800
 800bec0:	40022000 	.word	0x40022000
 800bec4:	0801e006 	.word	0x0801e006
 800bec8:	20002998 	.word	0x20002998
 800becc:	0801f800 	.word	0x0801f800
 800bed0:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bed4:	4a11      	ldr	r2, [pc, #68]	; (800bf1c <EE_Init+0x370>)
 800bed6:	6913      	ldr	r3, [r2, #16]
 800bed8:	2101      	movs	r1, #1
 800beda:	438b      	bics	r3, r1
 800bedc:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bede:	4810      	ldr	r0, [pc, #64]	; (800bf20 <EE_Init+0x374>)
 800bee0:	f005 fa0e 	bl	8011300 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bee4:	480f      	ldr	r0, [pc, #60]	; (800bf24 <EE_Init+0x378>)
 800bee6:	f005 f979 	bl	80111dc <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800beea:	2800      	cmp	r0, #0
 800beec:	d003      	beq.n	800bef6 <EE_Init+0x34a>
					return pFlash.ErrorCode;
 800beee:	4b0e      	ldr	r3, [pc, #56]	; (800bf28 <EE_Init+0x37c>)
 800bef0:	69dd      	ldr	r5, [r3, #28]
 800bef2:	b2ad      	uxth	r5, r5
 800bef4:	e678      	b.n	800bbe8 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bef6:	480d      	ldr	r0, [pc, #52]	; (800bf2c <EE_Init+0x380>)
 800bef8:	f005 fa02 	bl	8011300 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800befc:	4809      	ldr	r0, [pc, #36]	; (800bf24 <EE_Init+0x378>)
 800befe:	f005 f96d 	bl	80111dc <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bf02:	2800      	cmp	r0, #0
 800bf04:	d105      	bne.n	800bf12 <EE_Init+0x366>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bf06:	4a05      	ldr	r2, [pc, #20]	; (800bf1c <EE_Init+0x370>)
 800bf08:	6913      	ldr	r3, [r2, #16]
 800bf0a:	2102      	movs	r1, #2
 800bf0c:	438b      	bics	r3, r1
 800bf0e:	6113      	str	r3, [r2, #16]
 800bf10:	e667      	b.n	800bbe2 <EE_Init+0x36>
						return pFlash.ErrorCode;
 800bf12:	4b05      	ldr	r3, [pc, #20]	; (800bf28 <EE_Init+0x37c>)
 800bf14:	69dd      	ldr	r5, [r3, #28]
 800bf16:	b2ad      	uxth	r5, r5
 800bf18:	e666      	b.n	800bbe8 <EE_Init+0x3c>
 800bf1a:	46c0      	nop			; (mov r8, r8)
 800bf1c:	40022000 	.word	0x40022000
 800bf20:	0801e000 	.word	0x0801e000
 800bf24:	0000c350 	.word	0x0000c350
 800bf28:	20006f28 	.word	0x20006f28
 800bf2c:	0801e800 	.word	0x0801e800

0800bf30 <EraseSector>:
	/* Return last operation flash status */
	return FlashStatus;
}

/* Erase sector if force write is requested */
BOS_Status EraseSector(uint32_t sector ) {
 800bf30:	b500      	push	{lr}
 800bf32:	b085      	sub	sp, #20
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800bf34:	2300      	movs	r3, #0
 800bf36:	9301      	str	r3, [sp, #4]
		erase.PageAddress = sector;
 800bf38:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800bf3e:	4669      	mov	r1, sp
 800bf40:	a801      	add	r0, sp, #4
 800bf42:	f005 f9ef 	bl	8011324 <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d102      	bne.n	800bf50 <EraseSector+0x20>
 800bf4a:	9b00      	ldr	r3, [sp, #0]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	d002      	beq.n	800bf56 <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800bf50:	4b02      	ldr	r3, [pc, #8]	; (800bf5c <EraseSector+0x2c>)
 800bf52:	2216      	movs	r2, #22
 800bf54:	701a      	strb	r2, [r3, #0]

	return result;
}
 800bf56:	2000      	movs	r0, #0
 800bf58:	b005      	add	sp, #20
 800bf5a:	bd00      	pop	{pc}
 800bf5c:	20000c6c 	.word	0x20000c6c

0800bf60 <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800bf60:	b500      	push	{lr}
 800bf62:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800bf64:	2340      	movs	r3, #64	; 0x40
 800bf66:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bf68:	3b3f      	subs	r3, #63	; 0x3f
 800bf6a:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bf70:	3303      	adds	r3, #3
 800bf72:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800bf74:	2090      	movs	r0, #144	; 0x90
 800bf76:	a901      	add	r1, sp, #4
 800bf78:	05c0      	lsls	r0, r0, #23
 800bf7a:	f005 fa25 	bl	80113c8 <HAL_GPIO_Init>
}
 800bf7e:	b007      	add	sp, #28
 800bf80:	bd00      	pop	{pc}
	...

0800bf84 <GPIO_Init>:
{
 800bf84:	b500      	push	{lr}
 800bf86:	b087      	sub	sp, #28
    __GPIOC_CLK_ENABLE();
 800bf88:	4b18      	ldr	r3, [pc, #96]	; (800bfec <GPIO_Init+0x68>)
 800bf8a:	6959      	ldr	r1, [r3, #20]
 800bf8c:	2080      	movs	r0, #128	; 0x80
 800bf8e:	0300      	lsls	r0, r0, #12
 800bf90:	4301      	orrs	r1, r0
 800bf92:	6159      	str	r1, [r3, #20]
 800bf94:	695a      	ldr	r2, [r3, #20]
 800bf96:	4002      	ands	r2, r0
 800bf98:	9201      	str	r2, [sp, #4]
 800bf9a:	9a01      	ldr	r2, [sp, #4]
    __GPIOA_CLK_ENABLE();
 800bf9c:	6959      	ldr	r1, [r3, #20]
 800bf9e:	2080      	movs	r0, #128	; 0x80
 800bfa0:	0280      	lsls	r0, r0, #10
 800bfa2:	4301      	orrs	r1, r0
 800bfa4:	6159      	str	r1, [r3, #20]
 800bfa6:	695a      	ldr	r2, [r3, #20]
 800bfa8:	4002      	ands	r2, r0
 800bfaa:	9202      	str	r2, [sp, #8]
 800bfac:	9a02      	ldr	r2, [sp, #8]
    __GPIOD_CLK_ENABLE();
 800bfae:	6959      	ldr	r1, [r3, #20]
 800bfb0:	2080      	movs	r0, #128	; 0x80
 800bfb2:	0340      	lsls	r0, r0, #13
 800bfb4:	4301      	orrs	r1, r0
 800bfb6:	6159      	str	r1, [r3, #20]
 800bfb8:	695a      	ldr	r2, [r3, #20]
 800bfba:	4002      	ands	r2, r0
 800bfbc:	9203      	str	r2, [sp, #12]
 800bfbe:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800bfc0:	6959      	ldr	r1, [r3, #20]
 800bfc2:	2080      	movs	r0, #128	; 0x80
 800bfc4:	02c0      	lsls	r0, r0, #11
 800bfc6:	4301      	orrs	r1, r0
 800bfc8:	6159      	str	r1, [r3, #20]
 800bfca:	695a      	ldr	r2, [r3, #20]
 800bfcc:	4002      	ands	r2, r0
 800bfce:	9204      	str	r2, [sp, #16]
 800bfd0:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800bfd2:	695a      	ldr	r2, [r3, #20]
 800bfd4:	2180      	movs	r1, #128	; 0x80
 800bfd6:	03c9      	lsls	r1, r1, #15
 800bfd8:	430a      	orrs	r2, r1
 800bfda:	615a      	str	r2, [r3, #20]
 800bfdc:	695b      	ldr	r3, [r3, #20]
 800bfde:	400b      	ands	r3, r1
 800bfe0:	9305      	str	r3, [sp, #20]
 800bfe2:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800bfe4:	f7ff ffbc 	bl	800bf60 <IND_LED_Init>
}
 800bfe8:	b007      	add	sp, #28
 800bfea:	bd00      	pop	{pc}
 800bfec:	40021000 	.word	0x40021000

0800bff0 <GetPortGPIOs>:


/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800bff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff2:	000e      	movs	r6, r1
 800bff4:	0017      	movs	r7, r2
 800bff6:	001d      	movs	r5, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800bff8:	f001 fed2 	bl	800dda0 <GetUart>
	
	if (huart == &huart1) 
 800bffc:	4c24      	ldr	r4, [pc, #144]	; (800c090 <GetPortGPIOs+0xa0>)
 800bffe:	42a0      	cmp	r0, r4
 800c000:	d00d      	beq.n	800c01e <GetPortGPIOs+0x2e>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800c002:	4b24      	ldr	r3, [pc, #144]	; (800c094 <GetPortGPIOs+0xa4>)
 800c004:	4298      	cmp	r0, r3
 800c006:	d017      	beq.n	800c038 <GetPortGPIOs+0x48>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800c008:	4b23      	ldr	r3, [pc, #140]	; (800c098 <GetPortGPIOs+0xa8>)
 800c00a:	4298      	cmp	r0, r3
 800c00c:	d01f      	beq.n	800c04e <GetPortGPIOs+0x5e>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800c00e:	4b23      	ldr	r3, [pc, #140]	; (800c09c <GetPortGPIOs+0xac>)
 800c010:	4298      	cmp	r0, r3
 800c012:	d028      	beq.n	800c066 <GetPortGPIOs+0x76>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800c014:	4b22      	ldr	r3, [pc, #136]	; (800c0a0 <GetPortGPIOs+0xb0>)
 800c016:	4298      	cmp	r0, r3
 800c018:	d030      	beq.n	800c07c <GetPortGPIOs+0x8c>
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800c01a:	20ff      	movs	r0, #255	; 0xff
 800c01c:	e00b      	b.n	800c036 <GetPortGPIOs+0x46>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c01e:	2390      	movs	r3, #144	; 0x90
 800c020:	05db      	lsls	r3, r3, #23
 800c022:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800c024:	2280      	movs	r2, #128	; 0x80
 800c026:	0092      	lsls	r2, r2, #2
 800c028:	803a      	strh	r2, [r7, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800c02a:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART1_RX_PIN;
 800c02c:	2380      	movs	r3, #128	; 0x80
 800c02e:	00db      	lsls	r3, r3, #3
 800c030:	9a06      	ldr	r2, [sp, #24]
 800c032:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c034:	2000      	movs	r0, #0
	
	return result;	
}
 800c036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800c038:	2390      	movs	r3, #144	; 0x90
 800c03a:	05db      	lsls	r3, r3, #23
 800c03c:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800c03e:	2204      	movs	r2, #4
 800c040:	803a      	strh	r2, [r7, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800c042:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART2_RX_PIN;
 800c044:	2308      	movs	r3, #8
 800c046:	9a06      	ldr	r2, [sp, #24]
 800c048:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c04a:	2000      	movs	r0, #0
 800c04c:	e7f3      	b.n	800c036 <GetPortGPIOs+0x46>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800c04e:	4b15      	ldr	r3, [pc, #84]	; (800c0a4 <GetPortGPIOs+0xb4>)
 800c050:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800c052:	2280      	movs	r2, #128	; 0x80
 800c054:	00d2      	lsls	r2, r2, #3
 800c056:	803a      	strh	r2, [r7, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800c058:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART3_RX_PIN;
 800c05a:	2380      	movs	r3, #128	; 0x80
 800c05c:	011b      	lsls	r3, r3, #4
 800c05e:	9a06      	ldr	r2, [sp, #24]
 800c060:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c062:	2000      	movs	r0, #0
 800c064:	e7e7      	b.n	800c036 <GetPortGPIOs+0x46>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800c066:	2390      	movs	r3, #144	; 0x90
 800c068:	05db      	lsls	r3, r3, #23
 800c06a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800c06c:	2201      	movs	r2, #1
 800c06e:	803a      	strh	r2, [r7, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800c070:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART4_RX_PIN;
 800c072:	2302      	movs	r3, #2
 800c074:	9a06      	ldr	r2, [sp, #24]
 800c076:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c078:	2000      	movs	r0, #0
 800c07a:	e7dc      	b.n	800c036 <GetPortGPIOs+0x46>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800c07c:	4b09      	ldr	r3, [pc, #36]	; (800c0a4 <GetPortGPIOs+0xb4>)
 800c07e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800c080:	2208      	movs	r2, #8
 800c082:	803a      	strh	r2, [r7, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800c084:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART5_RX_PIN;
 800c086:	2310      	movs	r3, #16
 800c088:	9a06      	ldr	r2, [sp, #24]
 800c08a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c08c:	2000      	movs	r0, #0
 800c08e:	e7d2      	b.n	800c036 <GetPortGPIOs+0x46>
 800c090:	200021d8 	.word	0x200021d8
 800c094:	20002514 	.word	0x20002514
 800c098:	200024a4 	.word	0x200024a4
 800c09c:	20002434 	.word	0x20002434
 800c0a0:	200023c4 	.word	0x200023c4
 800c0a4:	48000400 	.word	0x48000400

0800c0a8 <IsFactoryReset>:
				- P1 TXD is connected to last port RXD    
*/


uint8_t IsFactoryReset(void)
{
 800c0a8:	b530      	push	{r4, r5, lr}
 800c0aa:	b093      	sub	sp, #76	; 0x4c
	uint16_t P1_TX_Pin, P1_RX_Pin, P_last_TX_Pin, P_last_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
  /* Enable all GPIO Ports Clocks */
  __GPIOA_CLK_ENABLE();
 800c0ac:	4b38      	ldr	r3, [pc, #224]	; (800c190 <IsFactoryReset+0xe8>)
 800c0ae:	6959      	ldr	r1, [r3, #20]
 800c0b0:	2080      	movs	r0, #128	; 0x80
 800c0b2:	0280      	lsls	r0, r0, #10
 800c0b4:	4301      	orrs	r1, r0
 800c0b6:	6159      	str	r1, [r3, #20]
 800c0b8:	695a      	ldr	r2, [r3, #20]
 800c0ba:	4002      	ands	r2, r0
 800c0bc:	9203      	str	r2, [sp, #12]
 800c0be:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800c0c0:	6959      	ldr	r1, [r3, #20]
 800c0c2:	2080      	movs	r0, #128	; 0x80
 800c0c4:	02c0      	lsls	r0, r0, #11
 800c0c6:	4301      	orrs	r1, r0
 800c0c8:	6159      	str	r1, [r3, #20]
 800c0ca:	695a      	ldr	r2, [r3, #20]
 800c0cc:	4002      	ands	r2, r0
 800c0ce:	9204      	str	r2, [sp, #16]
 800c0d0:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800c0d2:	6959      	ldr	r1, [r3, #20]
 800c0d4:	2080      	movs	r0, #128	; 0x80
 800c0d6:	0300      	lsls	r0, r0, #12
 800c0d8:	4301      	orrs	r1, r0
 800c0da:	6159      	str	r1, [r3, #20]
 800c0dc:	695a      	ldr	r2, [r3, #20]
 800c0de:	4002      	ands	r2, r0
 800c0e0:	9205      	str	r2, [sp, #20]
 800c0e2:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 800c0e4:	695a      	ldr	r2, [r3, #20]
 800c0e6:	2180      	movs	r1, #128	; 0x80
 800c0e8:	0349      	lsls	r1, r1, #13
 800c0ea:	430a      	orrs	r2, r1
 800c0ec:	615a      	str	r2, [r3, #20]
 800c0ee:	695b      	ldr	r3, [r3, #20]
 800c0f0:	400b      	ands	r3, r1
 800c0f2:	9306      	str	r3, [sp, #24]
 800c0f4:	9b06      	ldr	r3, [sp, #24]
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800c0f6:	ab08      	add	r3, sp, #32
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	ab0b      	add	r3, sp, #44	; 0x2c
 800c0fc:	2222      	movs	r2, #34	; 0x22
 800c0fe:	446a      	add	r2, sp
 800c100:	a90c      	add	r1, sp, #48	; 0x30
 800c102:	2001      	movs	r0, #1
 800c104:	f7ff ff74 	bl	800bff0 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800c108:	ac07      	add	r4, sp, #28
 800c10a:	9400      	str	r4, [sp, #0]
 800c10c:	ab09      	add	r3, sp, #36	; 0x24
 800c10e:	221e      	movs	r2, #30
 800c110:	446a      	add	r2, sp
 800c112:	a90a      	add	r1, sp, #40	; 0x28
 800c114:	2005      	movs	r0, #5
 800c116:	f7ff ff6b 	bl	800bff0 <GetPortGPIOs>
	
	/* TXD of first port */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c11a:	2301      	movs	r3, #1
 800c11c:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c11e:	2500      	movs	r5, #0
 800c120:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800c122:	466b      	mov	r3, sp
 800c124:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c126:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800c128:	a90d      	add	r1, sp, #52	; 0x34
 800c12a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c12c:	f005 f94c 	bl	80113c8 <HAL_GPIO_Init>
	
	/* RXD of last port */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c130:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800c132:	2302      	movs	r3, #2
 800c134:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800c136:	8823      	ldrh	r3, [r4, #0]
 800c138:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800c13a:	a90d      	add	r1, sp, #52	; 0x34
 800c13c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c13e:	f005 f943 	bl	80113c8 <HAL_GPIO_Init>

	
	/* Check for factory reset conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800c142:	466b      	mov	r3, sp
 800c144:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800c146:	2200      	movs	r2, #0
 800c148:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c14a:	f005 fa92 	bl	8011672 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800c14e:	2005      	movs	r0, #5
 800c150:	f001 fc56 	bl	800da00 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800c154:	8821      	ldrh	r1, [r4, #0]
 800c156:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c158:	f005 fa84 	bl	8011664 <HAL_GPIO_ReadPin>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	d006      	beq.n	800c16e <IsFactoryReset+0xc6>
		}
	}

	/* Clear flag for formated EEPROM if it was already set */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800c160:	4b0c      	ldr	r3, [pc, #48]	; (800c194 <IsFactoryReset+0xec>)
 800c162:	2201      	movs	r2, #1
 800c164:	4252      	negs	r2, r2
 800c166:	601a      	str	r2, [r3, #0]
	
	return 0;
 800c168:	2000      	movs	r0, #0
}
 800c16a:	b013      	add	sp, #76	; 0x4c
 800c16c:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800c16e:	2322      	movs	r3, #34	; 0x22
 800c170:	446b      	add	r3, sp
 800c172:	8819      	ldrh	r1, [r3, #0]
 800c174:	2201      	movs	r2, #1
 800c176:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c178:	f005 fa7b 	bl	8011672 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800c17c:	2005      	movs	r0, #5
 800c17e:	f001 fc3f 	bl	800da00 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800c182:	8821      	ldrh	r1, [r4, #0]
 800c184:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c186:	f005 fa6d 	bl	8011664 <HAL_GPIO_ReadPin>
 800c18a:	2801      	cmp	r0, #1
 800c18c:	d1e8      	bne.n	800c160 <IsFactoryReset+0xb8>
 800c18e:	e7ec      	b.n	800c16a <IsFactoryReset+0xc2>
 800c190:	40021000 	.word	0x40021000
 800c194:	20007ff0 	.word	0x20007ff0

0800c198 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800c198:	4770      	bx	lr
	...

0800c19c <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port) {
 800c19c:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800c19e:	4c19      	ldr	r4, [pc, #100]	; (800c204 <CheckForTimedButtonPress+0x68>)
 800c1a0:	00c1      	lsls	r1, r0, #3
 800c1a2:	1809      	adds	r1, r1, r0
 800c1a4:	1861      	adds	r1, r4, r1
 800c1a6:	788a      	ldrb	r2, [r1, #2]
 800c1a8:	78ce      	ldrb	r6, [r1, #3]
			t3 = button[port].pressedX3Sec;
 800c1aa:	790d      	ldrb	r5, [r1, #4]

	/* Convert to ms */
	t1 *= 1000;
 800c1ac:	0151      	lsls	r1, r2, #5
 800c1ae:	1a89      	subs	r1, r1, r2
 800c1b0:	008b      	lsls	r3, r1, #2
 800c1b2:	189b      	adds	r3, r3, r2
 800c1b4:	00db      	lsls	r3, r3, #3
	t2 *= 1000;
 800c1b6:	0172      	lsls	r2, r6, #5
 800c1b8:	1b92      	subs	r2, r2, r6
 800c1ba:	0092      	lsls	r2, r2, #2
 800c1bc:	1992      	adds	r2, r2, r6
 800c1be:	00d2      	lsls	r2, r2, #3
	t3 *= 1000;
 800c1c0:	0169      	lsls	r1, r5, #5
 800c1c2:	1b49      	subs	r1, r1, r5
 800c1c4:	0089      	lsls	r1, r1, #2
 800c1c6:	1949      	adds	r1, r1, r5
 800c1c8:	00c9      	lsls	r1, r1, #3

	if (pressCounter[port] == t1) {
 800c1ca:	0085      	lsls	r5, r0, #2
 800c1cc:	1964      	adds	r4, r4, r5
 800c1ce:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800c1d0:	429c      	cmp	r4, r3
 800c1d2:	d009      	beq.n	800c1e8 <CheckForTimedButtonPress+0x4c>
		button[port].state = PRESSED_FOR_X1_SEC;
	} else if (pressCounter[port] == t2) {
 800c1d4:	4294      	cmp	r4, r2
 800c1d6:	d00e      	beq.n	800c1f6 <CheckForTimedButtonPress+0x5a>
		button[port].state = PRESSED_FOR_X2_SEC;
	} else if (pressCounter[port] == t3) {
 800c1d8:	428c      	cmp	r4, r1
 800c1da:	d10a      	bne.n	800c1f2 <CheckForTimedButtonPress+0x56>
		button[port].state = PRESSED_FOR_X2_SEC;
 800c1dc:	00c3      	lsls	r3, r0, #3
 800c1de:	1818      	adds	r0, r3, r0
 800c1e0:	4b08      	ldr	r3, [pc, #32]	; (800c204 <CheckForTimedButtonPress+0x68>)
 800c1e2:	220a      	movs	r2, #10
 800c1e4:	54c2      	strb	r2, [r0, r3]
 800c1e6:	e004      	b.n	800c1f2 <CheckForTimedButtonPress+0x56>
		button[port].state = PRESSED_FOR_X1_SEC;
 800c1e8:	00c3      	lsls	r3, r0, #3
 800c1ea:	1818      	adds	r0, r3, r0
 800c1ec:	4b05      	ldr	r3, [pc, #20]	; (800c204 <CheckForTimedButtonPress+0x68>)
 800c1ee:	2209      	movs	r2, #9
 800c1f0:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	bd70      	pop	{r4, r5, r6, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 800c1f6:	00c3      	lsls	r3, r0, #3
 800c1f8:	1818      	adds	r0, r3, r0
 800c1fa:	4b02      	ldr	r3, [pc, #8]	; (800c204 <CheckForTimedButtonPress+0x68>)
 800c1fc:	220a      	movs	r2, #10
 800c1fe:	54c2      	strb	r2, [r0, r3]
 800c200:	e7f7      	b.n	800c1f2 <CheckForTimedButtonPress+0x56>
 800c202:	46c0      	nop			; (mov r8, r8)
 800c204:	2000299c 	.word	0x2000299c

0800c208 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port) {
 800c208:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800c20a:	4c19      	ldr	r4, [pc, #100]	; (800c270 <CheckForTimedButtonRelease+0x68>)
 800c20c:	00c1      	lsls	r1, r0, #3
 800c20e:	1809      	adds	r1, r1, r0
 800c210:	1861      	adds	r1, r4, r1
 800c212:	794a      	ldrb	r2, [r1, #5]
 800c214:	798e      	ldrb	r6, [r1, #6]
			t3 = button[port].releasedY3Sec;
 800c216:	79cd      	ldrb	r5, [r1, #7]

	/* Convert to ms */
	t1 *= 1000;
 800c218:	0151      	lsls	r1, r2, #5
 800c21a:	1a89      	subs	r1, r1, r2
 800c21c:	008b      	lsls	r3, r1, #2
 800c21e:	189b      	adds	r3, r3, r2
 800c220:	00db      	lsls	r3, r3, #3
	t2 *= 1000;
 800c222:	0172      	lsls	r2, r6, #5
 800c224:	1b92      	subs	r2, r2, r6
 800c226:	0092      	lsls	r2, r2, #2
 800c228:	1992      	adds	r2, r2, r6
 800c22a:	00d2      	lsls	r2, r2, #3
	t3 *= 1000;
 800c22c:	0169      	lsls	r1, r5, #5
 800c22e:	1b49      	subs	r1, r1, r5
 800c230:	0089      	lsls	r1, r1, #2
 800c232:	1949      	adds	r1, r1, r5
 800c234:	00c9      	lsls	r1, r1, #3

	if (releaseCounter[port] == t1) {
 800c236:	0085      	lsls	r5, r0, #2
 800c238:	1964      	adds	r4, r4, r5
 800c23a:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800c23c:	429c      	cmp	r4, r3
 800c23e:	d009      	beq.n	800c254 <CheckForTimedButtonRelease+0x4c>
		button[port].state = RELEASED_FOR_Y1_SEC;
	} else if (releaseCounter[port] == t2) {
 800c240:	4294      	cmp	r4, r2
 800c242:	d00e      	beq.n	800c262 <CheckForTimedButtonRelease+0x5a>
		button[port].state = RELEASED_FOR_Y2_SEC;
	} else if (releaseCounter[port] == t3) {
 800c244:	428c      	cmp	r4, r1
 800c246:	d10a      	bne.n	800c25e <CheckForTimedButtonRelease+0x56>
		button[port].state = RELEASED_FOR_Y2_SEC;
 800c248:	00c3      	lsls	r3, r0, #3
 800c24a:	1818      	adds	r0, r3, r0
 800c24c:	4b08      	ldr	r3, [pc, #32]	; (800c270 <CheckForTimedButtonRelease+0x68>)
 800c24e:	220d      	movs	r2, #13
 800c250:	54c2      	strb	r2, [r0, r3]
 800c252:	e004      	b.n	800c25e <CheckForTimedButtonRelease+0x56>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800c254:	00c3      	lsls	r3, r0, #3
 800c256:	1818      	adds	r0, r3, r0
 800c258:	4b05      	ldr	r3, [pc, #20]	; (800c270 <CheckForTimedButtonRelease+0x68>)
 800c25a:	220c      	movs	r2, #12
 800c25c:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800c25e:	2000      	movs	r0, #0
 800c260:	bd70      	pop	{r4, r5, r6, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 800c262:	00c3      	lsls	r3, r0, #3
 800c264:	1818      	adds	r0, r3, r0
 800c266:	4b02      	ldr	r3, [pc, #8]	; (800c270 <CheckForTimedButtonRelease+0x68>)
 800c268:	220d      	movs	r2, #13
 800c26a:	54c2      	strb	r2, [r0, r3]
 800c26c:	e7f7      	b.n	800c25e <CheckForTimedButtonRelease+0x56>
 800c26e:	46c0      	nop			; (mov r8, r8)
 800c270:	2000299c 	.word	0x2000299c

0800c274 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800c274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c276:	b08d      	sub	sp, #52	; 0x34
 800c278:	0006      	movs	r6, r0
 800c27a:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800c27c:	4b41      	ldr	r3, [pc, #260]	; (800c384 <AddPortButton+0x110>)
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d157      	bne.n	800c334 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800c284:	4b40      	ldr	r3, [pc, #256]	; (800c388 <AddPortButton+0x114>)
 800c286:	2204      	movs	r2, #4
 800c288:	551a      	strb	r2, [r3, r4]

	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 800c28a:	4b3e      	ldr	r3, [pc, #248]	; (800c384 <AddPortButton+0x110>)
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d15a      	bne.n	800c348 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800c292:	2512      	movs	r5, #18
 800c294:	446d      	add	r5, sp
 800c296:	af04      	add	r7, sp, #16
 800c298:	9700      	str	r7, [sp, #0]
 800c29a:	ab05      	add	r3, sp, #20
 800c29c:	002a      	movs	r2, r5
 800c29e:	a906      	add	r1, sp, #24
 800c2a0:	0020      	movs	r0, r4
 800c2a2:	f7ff fea5 	bl	800bff0 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800c2a6:	882b      	ldrh	r3, [r5, #0]
 800c2a8:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2ae:	2500      	movs	r5, #0
 800c2b0:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800c2b2:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800c2b4:	a907      	add	r1, sp, #28
 800c2b6:	9806      	ldr	r0, [sp, #24]
 800c2b8:	f005 f886 	bl	80113c8 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800c2bc:	883b      	ldrh	r3, [r7, #0]
 800c2be:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c2c0:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c2c2:	2302      	movs	r3, #2
 800c2c4:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800c2c6:	a907      	add	r1, sp, #28
 800c2c8:	9805      	ldr	r0, [sp, #20]
 800c2ca:	f005 f87d 	bl	80113c8 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800c2ce:	00e2      	lsls	r2, r4, #3
 800c2d0:	1912      	adds	r2, r2, r4
 800c2d2:	4b2e      	ldr	r3, [pc, #184]	; (800c38c <AddPortButton+0x118>)
 800c2d4:	189b      	adds	r3, r3, r2
 800c2d6:	705e      	strb	r6, [r3, #1]

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c2d8:	0025      	movs	r5, r4
 800c2da:	353a      	adds	r5, #58	; 0x3a
 800c2dc:	00ad      	lsls	r5, r5, #2
 800c2de:	210e      	movs	r1, #14
 800c2e0:	4469      	add	r1, sp
 800c2e2:	0028      	movs	r0, r5
 800c2e4:	f7ff fb36 	bl	800b954 <EE_ReadVariable>
	if (!res)											// This variable exists
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d133      	bne.n	800c354 <AddPortButton+0xe0>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800c2ec:	230e      	movs	r3, #14
 800c2ee:	446b      	add	r3, sp
 800c2f0:	881b      	ldrh	r3, [r3, #0]
 800c2f2:	0a1a      	lsrs	r2, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800c2f4:	0b1b      	lsrs	r3, r3, #12
 800c2f6:	42a3      	cmp	r3, r4
 800c2f8:	d103      	bne.n	800c302 <AddPortButton+0x8e>
 800c2fa:	230f      	movs	r3, #15
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	42b3      	cmp	r3, r6
 800c300:	d015      	beq.n	800c32e <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800c302:	0321      	lsls	r1, r4, #12
 800c304:	0236      	lsls	r6, r6, #8
 800c306:	4331      	orrs	r1, r6
 800c308:	b289      	uxth	r1, r1
 800c30a:	230e      	movs	r3, #14
 800c30c:	446b      	add	r3, sp
 800c30e:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c310:	0028      	movs	r0, r5
 800c312:	f7ff fbd1 	bl	800bab8 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c316:	1c68      	adds	r0, r5, #1
 800c318:	2100      	movs	r1, #0
 800c31a:	f7ff fbcd 	bl	800bab8 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c31e:	1ca8      	adds	r0, r5, #2
 800c320:	2100      	movs	r1, #0
 800c322:	f7ff fbc9 	bl	800bab8 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c326:	1ce8      	adds	r0, r5, #3
 800c328:	2100      	movs	r1, #0
 800c32a:	f7ff fbc5 	bl	800bab8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	return result;
}
 800c32e:	2000      	movs	r0, #0
 800c330:	b00d      	add	sp, #52	; 0x34
 800c332:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800c334:	008d      	lsls	r5, r1, #2
 800c336:	4b16      	ldr	r3, [pc, #88]	; (800c390 <AddPortButton+0x11c>)
 800c338:	58e8      	ldr	r0, [r5, r3]
 800c33a:	f001 ff27 	bl	800e18c <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800c33e:	4b15      	ldr	r3, [pc, #84]	; (800c394 <AddPortButton+0x120>)
 800c340:	58e8      	ldr	r0, [r5, r3]
 800c342:	f001 ff23 	bl	800e18c <osSemaphoreRelease>
 800c346:	e79d      	b.n	800c284 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 800c348:	0020      	movs	r0, r4
 800c34a:	f001 fd29 	bl	800dda0 <GetUart>
 800c34e:	f006 f8f6 	bl	801253e <HAL_UART_DeInit>
 800c352:	e79e      	b.n	800c292 <AddPortButton+0x1e>
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800c354:	0321      	lsls	r1, r4, #12
 800c356:	0236      	lsls	r6, r6, #8
 800c358:	4331      	orrs	r1, r6
 800c35a:	b289      	uxth	r1, r1
 800c35c:	230e      	movs	r3, #14
 800c35e:	446b      	add	r3, sp
 800c360:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c362:	0028      	movs	r0, r5
 800c364:	f7ff fba8 	bl	800bab8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c368:	1c68      	adds	r0, r5, #1
 800c36a:	2100      	movs	r1, #0
 800c36c:	f7ff fba4 	bl	800bab8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c370:	1ca8      	adds	r0, r5, #2
 800c372:	2100      	movs	r1, #0
 800c374:	f7ff fba0 	bl	800bab8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c378:	1ce8      	adds	r0, r5, #3
 800c37a:	2100      	movs	r1, #0
 800c37c:	f7ff fb9c 	bl	800bab8 <EE_WriteVariable>
 800c380:	e7d5      	b.n	800c32e <AddPortButton+0xba>
 800c382:	46c0      	nop			; (mov r8, r8)
 800c384:	20000b69 	.word	0x20000b69
 800c388:	20000c5c 	.word	0x20000c5c
 800c38c:	2000299c 	.word	0x2000299c
 800c390:	20001e2c 	.word	0x20001e2c
 800c394:	20001e48 	.word	0x20001e48

0800c398 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800c398:	b570      	push	{r4, r5, r6, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	0004      	movs	r4, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800c39e:	4837      	ldr	r0, [pc, #220]	; (800c47c <RemovePortButton+0xe4>)
 800c3a0:	00e1      	lsls	r1, r4, #3
 800c3a2:	1909      	adds	r1, r1, r4
 800c3a4:	1842      	adds	r2, r0, r1
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 800c3aa:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 800c3ac:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800c3ae:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800c3b0:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800c3b2:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800c3b4:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800c3b6:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800c3b8:	71d3      	strb	r3, [r2, #7]

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c3ba:	0025      	movs	r5, r4
 800c3bc:	353a      	adds	r5, #58	; 0x3a
 800c3be:	00ad      	lsls	r5, r5, #2
 800c3c0:	466b      	mov	r3, sp
 800c3c2:	1d99      	adds	r1, r3, #6
 800c3c4:	0028      	movs	r0, r5
 800c3c6:	f7ff fac5 	bl	800b954 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d01e      	beq.n	800c40c <RemovePortButton+0x74>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800c3ce:	0020      	movs	r0, r4
 800c3d0:	f001 fce6 	bl	800dda0 <GetUart>
 800c3d4:	0005      	movs	r5, r0

	if (huart->Instance == USART1) {
 800c3d6:	6803      	ldr	r3, [r0, #0]
 800c3d8:	4a29      	ldr	r2, [pc, #164]	; (800c480 <RemovePortButton+0xe8>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d027      	beq.n	800c42e <RemovePortButton+0x96>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800c3de:	4a29      	ldr	r2, [pc, #164]	; (800c484 <RemovePortButton+0xec>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d032      	beq.n	800c44a <RemovePortButton+0xb2>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800c3e4:	4a28      	ldr	r2, [pc, #160]	; (800c488 <RemovePortButton+0xf0>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d033      	beq.n	800c452 <RemovePortButton+0xba>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800c3ea:	4a28      	ldr	r2, [pc, #160]	; (800c48c <RemovePortButton+0xf4>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d034      	beq.n	800c45a <RemovePortButton+0xc2>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800c3f0:	4a27      	ldr	r2, [pc, #156]	; (800c490 <RemovePortButton+0xf8>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d035      	beq.n	800c462 <RemovePortButton+0xca>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800c3f6:	4a27      	ldr	r2, [pc, #156]	; (800c494 <RemovePortButton+0xfc>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d036      	beq.n	800c46a <RemovePortButton+0xd2>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800c3fc:	4a26      	ldr	r2, [pc, #152]	; (800c498 <RemovePortButton+0x100>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d039      	beq.n	800c476 <RemovePortButton+0xde>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800c402:	4a26      	ldr	r2, [pc, #152]	; (800c49c <RemovePortButton+0x104>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d034      	beq.n	800c472 <RemovePortButton+0xda>
#ifdef _Usart8	
		MX_USART8_UART_Init();
#endif
	} else
		result = BOS_ERROR;
 800c408:	26ff      	movs	r6, #255	; 0xff
 800c40a:	e013      	b.n	800c434 <RemovePortButton+0x9c>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800c40c:	2100      	movs	r1, #0
 800c40e:	0028      	movs	r0, r5
 800c410:	f7ff fb52 	bl	800bab8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c414:	1c68      	adds	r0, r5, #1
 800c416:	2100      	movs	r1, #0
 800c418:	f7ff fb4e 	bl	800bab8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c41c:	1ca8      	adds	r0, r5, #2
 800c41e:	2100      	movs	r1, #0
 800c420:	f7ff fb4a 	bl	800bab8 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c424:	1ce8      	adds	r0, r5, #3
 800c426:	2100      	movs	r1, #0
 800c428:	f7ff fb46 	bl	800bab8 <EE_WriteVariable>
 800c42c:	e7cf      	b.n	800c3ce <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 800c42e:	f001 faf9 	bl	800da24 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800c432:	2600      	movs	r6, #0

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800c434:	4b1a      	ldr	r3, [pc, #104]	; (800c4a0 <RemovePortButton+0x108>)
 800c436:	2200      	movs	r2, #0
 800c438:	551a      	strb	r2, [r3, r4]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800c43a:	3201      	adds	r2, #1
 800c43c:	4919      	ldr	r1, [pc, #100]	; (800c4a4 <RemovePortButton+0x10c>)
 800c43e:	0028      	movs	r0, r5
 800c440:	f006 f8d6 	bl	80125f0 <HAL_UART_Receive_IT>

	return result;
}
 800c444:	0030      	movs	r0, r6
 800c446:	b002      	add	sp, #8
 800c448:	bd70      	pop	{r4, r5, r6, pc}
		MX_USART2_UART_Init();
 800c44a:	f001 fb03 	bl	800da54 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800c44e:	2600      	movs	r6, #0
 800c450:	e7f0      	b.n	800c434 <RemovePortButton+0x9c>
		MX_USART3_UART_Init();
 800c452:	f001 fb17 	bl	800da84 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800c456:	2600      	movs	r6, #0
 800c458:	e7ec      	b.n	800c434 <RemovePortButton+0x9c>
		MX_USART4_UART_Init();
 800c45a:	f001 fb2b 	bl	800dab4 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 800c45e:	2600      	movs	r6, #0
 800c460:	e7e8      	b.n	800c434 <RemovePortButton+0x9c>
		MX_USART5_UART_Init();
 800c462:	f001 fb3f 	bl	800dae4 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 800c466:	2600      	movs	r6, #0
 800c468:	e7e4      	b.n	800c434 <RemovePortButton+0x9c>
		MX_USART6_UART_Init();
 800c46a:	f001 fb53 	bl	800db14 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800c46e:	2600      	movs	r6, #0
 800c470:	e7e0      	b.n	800c434 <RemovePortButton+0x9c>
 800c472:	2600      	movs	r6, #0
 800c474:	e7de      	b.n	800c434 <RemovePortButton+0x9c>
 800c476:	2600      	movs	r6, #0
 800c478:	e7dc      	b.n	800c434 <RemovePortButton+0x9c>
 800c47a:	46c0      	nop			; (mov r8, r8)
 800c47c:	2000299c 	.word	0x2000299c
 800c480:	40013800 	.word	0x40013800
 800c484:	40004400 	.word	0x40004400
 800c488:	40004800 	.word	0x40004800
 800c48c:	40004c00 	.word	0x40004c00
 800c490:	40005000 	.word	0x40005000
 800c494:	40011400 	.word	0x40011400
 800c498:	40011800 	.word	0x40011800
 800c49c:	40011c00 	.word	0x40011c00
 800c4a0:	20000c5c 	.word	0x20000c5c
 800c4a4:	20000cf5 	.word	0x20000cf5

0800c4a8 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800c4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4aa:	46de      	mov	lr, fp
 800c4ac:	4657      	mov	r7, sl
 800c4ae:	464e      	mov	r6, r9
 800c4b0:	4645      	mov	r5, r8
 800c4b2:	b5e0      	push	{r5, r6, r7, lr}
 800c4b4:	b085      	sub	sp, #20
 800c4b6:	0004      	movs	r4, r0
 800c4b8:	469c      	mov	ip, r3
 800c4ba:	9301      	str	r3, [sp, #4]
 800c4bc:	ab0e      	add	r3, sp, #56	; 0x38
 800c4be:	781f      	ldrb	r7, [r3, #0]
 800c4c0:	ab0f      	add	r3, sp, #60	; 0x3c
 800c4c2:	781e      	ldrb	r6, [r3, #0]
 800c4c4:	ab10      	add	r3, sp, #64	; 0x40
 800c4c6:	7818      	ldrb	r0, [r3, #0]
 800c4c8:	4682      	mov	sl, r0
 800c4ca:	ab11      	add	r3, sp, #68	; 0x44
 800c4cc:	7818      	ldrb	r0, [r3, #0]
 800c4ce:	4681      	mov	r9, r0
 800c4d0:	ab12      	add	r3, sp, #72	; 0x48
 800c4d2:	7818      	ldrb	r0, [r3, #0]
 800c4d4:	4680      	mov	r8, r0
 800c4d6:	ab13      	add	r3, sp, #76	; 0x4c
 800c4d8:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800c4da:	00e5      	lsls	r5, r4, #3
 800c4dc:	192d      	adds	r5, r5, r4
 800c4de:	48b9      	ldr	r0, [pc, #740]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c4e0:	1940      	adds	r0, r0, r5
 800c4e2:	7840      	ldrb	r0, [r0, #1]
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d100      	bne.n	800c4ea <SetButtonEvents+0x42>
 800c4e8:	e167      	b.n	800c7ba <SetButtonEvents+0x312>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800c4ea:	00e5      	lsls	r5, r4, #3
 800c4ec:	192d      	adds	r5, r5, r4
 800c4ee:	48b5      	ldr	r0, [pc, #724]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c4f0:	1940      	adds	r0, r0, r5
 800c4f2:	4665      	mov	r5, ip
 800c4f4:	7085      	strb	r5, [r0, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800c4f6:	70c7      	strb	r7, [r0, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800c4f8:	7106      	strb	r6, [r0, #4]
	button[port].releasedY1Sec = released_y1sec;
 800c4fa:	4655      	mov	r5, sl
 800c4fc:	7145      	strb	r5, [r0, #5]
	button[port].releasedY2Sec = released_y2sec;
 800c4fe:	464d      	mov	r5, r9
 800c500:	7185      	strb	r5, [r0, #6]
	button[port].releasedY3Sec = released_y3sec;
 800c502:	4645      	mov	r5, r8
 800c504:	71c5      	strb	r5, [r0, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800c506:	2b01      	cmp	r3, #1
 800c508:	d005      	beq.n	800c516 <SetButtonEvents+0x6e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d000      	beq.n	800c510 <SetButtonEvents+0x68>
 800c50e:	e0d3      	b.n	800c6b8 <SetButtonEvents+0x210>
 800c510:	2900      	cmp	r1, #0
 800c512:	d100      	bne.n	800c516 <SetButtonEvents+0x6e>
 800c514:	e0d0      	b.n	800c6b8 <SetButtonEvents+0x210>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800c516:	00e0      	lsls	r0, r4, #3
 800c518:	1900      	adds	r0, r0, r4
 800c51a:	49aa      	ldr	r1, [pc, #680]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c51c:	1809      	adds	r1, r1, r0
 800c51e:	7a08      	ldrb	r0, [r1, #8]
 800c520:	2501      	movs	r5, #1
 800c522:	4328      	orrs	r0, r5
 800c524:	7208      	strb	r0, [r1, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c526:	2b01      	cmp	r3, #1
 800c528:	d005      	beq.n	800c536 <SetButtonEvents+0x8e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d000      	beq.n	800c530 <SetButtonEvents+0x88>
 800c52e:	e0cf      	b.n	800c6d0 <SetButtonEvents+0x228>
 800c530:	2a00      	cmp	r2, #0
 800c532:	d100      	bne.n	800c536 <SetButtonEvents+0x8e>
 800c534:	e0cc      	b.n	800c6d0 <SetButtonEvents+0x228>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800c536:	00e1      	lsls	r1, r4, #3
 800c538:	1909      	adds	r1, r1, r4
 800c53a:	4aa2      	ldr	r2, [pc, #648]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c53c:	1852      	adds	r2, r2, r1
 800c53e:	7a11      	ldrb	r1, [r2, #8]
 800c540:	2002      	movs	r0, #2
 800c542:	4301      	orrs	r1, r0
 800c544:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c546:	2b01      	cmp	r3, #1
 800c548:	d006      	beq.n	800c558 <SetButtonEvents+0xb0>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d000      	beq.n	800c550 <SetButtonEvents+0xa8>
 800c54e:	e0cb      	b.n	800c6e8 <SetButtonEvents+0x240>
 800c550:	9a01      	ldr	r2, [sp, #4]
 800c552:	2a00      	cmp	r2, #0
 800c554:	d100      	bne.n	800c558 <SetButtonEvents+0xb0>
 800c556:	e0c7      	b.n	800c6e8 <SetButtonEvents+0x240>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800c558:	00e1      	lsls	r1, r4, #3
 800c55a:	1909      	adds	r1, r1, r4
 800c55c:	4a99      	ldr	r2, [pc, #612]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c55e:	1852      	adds	r2, r2, r1
 800c560:	7a11      	ldrb	r1, [r2, #8]
 800c562:	2004      	movs	r0, #4
 800c564:	4301      	orrs	r1, r0
 800c566:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d005      	beq.n	800c578 <SetButtonEvents+0xd0>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d000      	beq.n	800c572 <SetButtonEvents+0xca>
 800c570:	e0c7      	b.n	800c702 <SetButtonEvents+0x25a>
 800c572:	2f00      	cmp	r7, #0
 800c574:	d100      	bne.n	800c578 <SetButtonEvents+0xd0>
 800c576:	e0c4      	b.n	800c702 <SetButtonEvents+0x25a>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800c578:	00e1      	lsls	r1, r4, #3
 800c57a:	1909      	adds	r1, r1, r4
 800c57c:	4a91      	ldr	r2, [pc, #580]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c57e:	1852      	adds	r2, r2, r1
 800c580:	7a11      	ldrb	r1, [r2, #8]
 800c582:	2008      	movs	r0, #8
 800c584:	4301      	orrs	r1, r0
 800c586:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d005      	beq.n	800c598 <SetButtonEvents+0xf0>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d000      	beq.n	800c592 <SetButtonEvents+0xea>
 800c590:	e0c4      	b.n	800c71c <SetButtonEvents+0x274>
 800c592:	2e00      	cmp	r6, #0
 800c594:	d100      	bne.n	800c598 <SetButtonEvents+0xf0>
 800c596:	e0c1      	b.n	800c71c <SetButtonEvents+0x274>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c598:	00e1      	lsls	r1, r4, #3
 800c59a:	1909      	adds	r1, r1, r4
 800c59c:	4a89      	ldr	r2, [pc, #548]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c59e:	1852      	adds	r2, r2, r1
 800c5a0:	7a11      	ldrb	r1, [r2, #8]
 800c5a2:	2010      	movs	r0, #16
 800c5a4:	4301      	orrs	r1, r0
 800c5a6:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d006      	beq.n	800c5ba <SetButtonEvents+0x112>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d000      	beq.n	800c5b2 <SetButtonEvents+0x10a>
 800c5b0:	e0c1      	b.n	800c736 <SetButtonEvents+0x28e>
 800c5b2:	4652      	mov	r2, sl
 800c5b4:	2a00      	cmp	r2, #0
 800c5b6:	d100      	bne.n	800c5ba <SetButtonEvents+0x112>
 800c5b8:	e0bd      	b.n	800c736 <SetButtonEvents+0x28e>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c5ba:	00e1      	lsls	r1, r4, #3
 800c5bc:	1909      	adds	r1, r1, r4
 800c5be:	4a81      	ldr	r2, [pc, #516]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c5c0:	1852      	adds	r2, r2, r1
 800c5c2:	7a11      	ldrb	r1, [r2, #8]
 800c5c4:	2020      	movs	r0, #32
 800c5c6:	4301      	orrs	r1, r0
 800c5c8:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d006      	beq.n	800c5dc <SetButtonEvents+0x134>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d000      	beq.n	800c5d4 <SetButtonEvents+0x12c>
 800c5d2:	e0bd      	b.n	800c750 <SetButtonEvents+0x2a8>
 800c5d4:	464a      	mov	r2, r9
 800c5d6:	2a00      	cmp	r2, #0
 800c5d8:	d100      	bne.n	800c5dc <SetButtonEvents+0x134>
 800c5da:	e0b9      	b.n	800c750 <SetButtonEvents+0x2a8>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c5dc:	00e1      	lsls	r1, r4, #3
 800c5de:	1909      	adds	r1, r1, r4
 800c5e0:	4a78      	ldr	r2, [pc, #480]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c5e2:	1852      	adds	r2, r2, r1
 800c5e4:	7a11      	ldrb	r1, [r2, #8]
 800c5e6:	2040      	movs	r0, #64	; 0x40
 800c5e8:	4301      	orrs	r1, r0
 800c5ea:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d006      	beq.n	800c5fe <SetButtonEvents+0x156>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d000      	beq.n	800c5f6 <SetButtonEvents+0x14e>
 800c5f4:	e0b9      	b.n	800c76a <SetButtonEvents+0x2c2>
 800c5f6:	4642      	mov	r2, r8
 800c5f8:	2a00      	cmp	r2, #0
 800c5fa:	d100      	bne.n	800c5fe <SetButtonEvents+0x156>
 800c5fc:	e0b5      	b.n	800c76a <SetButtonEvents+0x2c2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800c5fe:	00e2      	lsls	r2, r4, #3
 800c600:	1912      	adds	r2, r2, r4
 800c602:	4b70      	ldr	r3, [pc, #448]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c604:	189b      	adds	r3, r3, r2
 800c606:	7a19      	ldrb	r1, [r3, #8]
 800c608:	2280      	movs	r2, #128	; 0x80
 800c60a:	4252      	negs	r2, r2
 800c60c:	430a      	orrs	r2, r1
 800c60e:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	}

	/* Add to EEPROM */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c610:	0025      	movs	r5, r4
 800c612:	353a      	adds	r5, #58	; 0x3a
 800c614:	00ad      	lsls	r5, r5, #2
 800c616:	ab02      	add	r3, sp, #8
 800c618:	1d99      	adds	r1, r3, #6
 800c61a:	0028      	movs	r0, r5
 800c61c:	f7ff f99a 	bl	800b954 <EE_ReadVariable>
	if (!res)											// This variable exists
 800c620:	2800      	cmp	r0, #0
 800c622:	d000      	beq.n	800c626 <SetButtonEvents+0x17e>
 800c624:	e0cb      	b.n	800c7be <SetButtonEvents+0x316>
	{
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800c626:	ab02      	add	r3, sp, #8
 800c628:	3306      	adds	r3, #6
 800c62a:	881b      	ldrh	r3, [r3, #0]
 800c62c:	0a19      	lsrs	r1, r3, #8
		/* Store event flags */
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	00e2      	lsls	r2, r4, #3
 800c632:	1912      	adds	r2, r2, r4
 800c634:	4863      	ldr	r0, [pc, #396]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c636:	1880      	adds	r0, r0, r2
 800c638:	7a02      	ldrb	r2, [r0, #8]
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d000      	beq.n	800c640 <SetButtonEvents+0x198>
 800c63e:	e0a1      	b.n	800c784 <SetButtonEvents+0x2dc>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
		}

		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800c640:	1c6a      	adds	r2, r5, #1
 800c642:	0014      	movs	r4, r2
 800c644:	2306      	movs	r3, #6
 800c646:	aa02      	add	r2, sp, #8
 800c648:	4694      	mov	ip, r2
 800c64a:	4463      	add	r3, ip
 800c64c:	469b      	mov	fp, r3
 800c64e:	0019      	movs	r1, r3
 800c650:	0020      	movs	r0, r4
 800c652:	f7ff f97f 	bl	800b954 <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800c656:	465b      	mov	r3, fp
 800c658:	881a      	ldrh	r2, [r3, #0]
 800c65a:	9b01      	ldr	r3, [sp, #4]
 800c65c:	0219      	lsls	r1, r3, #8
 800c65e:	4653      	mov	r3, sl
 800c660:	430b      	orrs	r3, r1
		if (temp16
 800c662:	429a      	cmp	r2, r3
 800c664:	d000      	beq.n	800c668 <SetButtonEvents+0x1c0>
 800c666:	e095      	b.n	800c794 <SetButtonEvents+0x2ec>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
					((uint16_t) pressed_x1sec << 8)
							| (uint16_t) released_y1sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800c668:	1cac      	adds	r4, r5, #2
 800c66a:	2306      	movs	r3, #6
 800c66c:	aa02      	add	r2, sp, #8
 800c66e:	4694      	mov	ip, r2
 800c670:	4463      	add	r3, ip
 800c672:	469a      	mov	sl, r3
 800c674:	0019      	movs	r1, r3
 800c676:	0020      	movs	r0, r4
 800c678:	f7ff f96c 	bl	800b954 <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800c67c:	4653      	mov	r3, sl
 800c67e:	881a      	ldrh	r2, [r3, #0]
 800c680:	0239      	lsls	r1, r7, #8
 800c682:	464b      	mov	r3, r9
 800c684:	430b      	orrs	r3, r1
		if (temp16
 800c686:	429a      	cmp	r2, r3
 800c688:	d000      	beq.n	800c68c <SetButtonEvents+0x1e4>
 800c68a:	e089      	b.n	800c7a0 <SetButtonEvents+0x2f8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
					((uint16_t) pressed_x2sec << 8)
							| (uint16_t) released_y2sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800c68c:	3503      	adds	r5, #3
 800c68e:	ab02      	add	r3, sp, #8
 800c690:	1d9c      	adds	r4, r3, #6
 800c692:	0021      	movs	r1, r4
 800c694:	0028      	movs	r0, r5
 800c696:	f7ff f95d 	bl	800b954 <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800c69a:	8822      	ldrh	r2, [r4, #0]
 800c69c:	0231      	lsls	r1, r6, #8
 800c69e:	4643      	mov	r3, r8
 800c6a0:	430b      	orrs	r3, r1
		if (temp16
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d000      	beq.n	800c6a8 <SetButtonEvents+0x200>
 800c6a6:	e081      	b.n	800c7ac <SetButtonEvents+0x304>
	}	// TODO - var does not exist after adding button!
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
 800c6a8:	2000      	movs	r0, #0
}
 800c6aa:	b005      	add	sp, #20
 800c6ac:	bcf0      	pop	{r4, r5, r6, r7}
 800c6ae:	46bb      	mov	fp, r7
 800c6b0:	46b2      	mov	sl, r6
 800c6b2:	46a9      	mov	r9, r5
 800c6b4:	46a0      	mov	r8, r4
 800c6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
 800c6b8:	4319      	orrs	r1, r3
 800c6ba:	d000      	beq.n	800c6be <SetButtonEvents+0x216>
 800c6bc:	e733      	b.n	800c526 <SetButtonEvents+0x7e>
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800c6be:	00e0      	lsls	r0, r4, #3
 800c6c0:	1900      	adds	r0, r0, r4
 800c6c2:	4940      	ldr	r1, [pc, #256]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c6c4:	1809      	adds	r1, r1, r0
 800c6c6:	7a08      	ldrb	r0, [r1, #8]
 800c6c8:	2501      	movs	r5, #1
 800c6ca:	43a8      	bics	r0, r5
 800c6cc:	7208      	strb	r0, [r1, #8]
 800c6ce:	e72a      	b.n	800c526 <SetButtonEvents+0x7e>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
 800c6d0:	431a      	orrs	r2, r3
 800c6d2:	d000      	beq.n	800c6d6 <SetButtonEvents+0x22e>
 800c6d4:	e737      	b.n	800c546 <SetButtonEvents+0x9e>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800c6d6:	00e1      	lsls	r1, r4, #3
 800c6d8:	1909      	adds	r1, r1, r4
 800c6da:	4a3a      	ldr	r2, [pc, #232]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c6dc:	1852      	adds	r2, r2, r1
 800c6de:	7a11      	ldrb	r1, [r2, #8]
 800c6e0:	2002      	movs	r0, #2
 800c6e2:	4381      	bics	r1, r0
 800c6e4:	7211      	strb	r1, [r2, #8]
 800c6e6:	e72e      	b.n	800c546 <SetButtonEvents+0x9e>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
 800c6e8:	9a01      	ldr	r2, [sp, #4]
 800c6ea:	431a      	orrs	r2, r3
 800c6ec:	d000      	beq.n	800c6f0 <SetButtonEvents+0x248>
 800c6ee:	e73b      	b.n	800c568 <SetButtonEvents+0xc0>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800c6f0:	00e1      	lsls	r1, r4, #3
 800c6f2:	1909      	adds	r1, r1, r4
 800c6f4:	4a33      	ldr	r2, [pc, #204]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c6f6:	1852      	adds	r2, r2, r1
 800c6f8:	7a11      	ldrb	r1, [r2, #8]
 800c6fa:	2004      	movs	r0, #4
 800c6fc:	4381      	bics	r1, r0
 800c6fe:	7211      	strb	r1, [r2, #8]
 800c700:	e732      	b.n	800c568 <SetButtonEvents+0xc0>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
 800c702:	003a      	movs	r2, r7
 800c704:	431a      	orrs	r2, r3
 800c706:	d000      	beq.n	800c70a <SetButtonEvents+0x262>
 800c708:	e73e      	b.n	800c588 <SetButtonEvents+0xe0>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800c70a:	00e1      	lsls	r1, r4, #3
 800c70c:	1909      	adds	r1, r1, r4
 800c70e:	4a2d      	ldr	r2, [pc, #180]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c710:	1852      	adds	r2, r2, r1
 800c712:	7a11      	ldrb	r1, [r2, #8]
 800c714:	2008      	movs	r0, #8
 800c716:	4381      	bics	r1, r0
 800c718:	7211      	strb	r1, [r2, #8]
 800c71a:	e735      	b.n	800c588 <SetButtonEvents+0xe0>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
 800c71c:	0032      	movs	r2, r6
 800c71e:	431a      	orrs	r2, r3
 800c720:	d000      	beq.n	800c724 <SetButtonEvents+0x27c>
 800c722:	e741      	b.n	800c5a8 <SetButtonEvents+0x100>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c724:	00e1      	lsls	r1, r4, #3
 800c726:	1909      	adds	r1, r1, r4
 800c728:	4a26      	ldr	r2, [pc, #152]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c72a:	1852      	adds	r2, r2, r1
 800c72c:	7a11      	ldrb	r1, [r2, #8]
 800c72e:	2010      	movs	r0, #16
 800c730:	4381      	bics	r1, r0
 800c732:	7211      	strb	r1, [r2, #8]
 800c734:	e738      	b.n	800c5a8 <SetButtonEvents+0x100>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
 800c736:	4652      	mov	r2, sl
 800c738:	431a      	orrs	r2, r3
 800c73a:	d000      	beq.n	800c73e <SetButtonEvents+0x296>
 800c73c:	e745      	b.n	800c5ca <SetButtonEvents+0x122>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c73e:	00e1      	lsls	r1, r4, #3
 800c740:	1909      	adds	r1, r1, r4
 800c742:	4a20      	ldr	r2, [pc, #128]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c744:	1852      	adds	r2, r2, r1
 800c746:	7a11      	ldrb	r1, [r2, #8]
 800c748:	2020      	movs	r0, #32
 800c74a:	4381      	bics	r1, r0
 800c74c:	7211      	strb	r1, [r2, #8]
 800c74e:	e73c      	b.n	800c5ca <SetButtonEvents+0x122>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
 800c750:	464a      	mov	r2, r9
 800c752:	431a      	orrs	r2, r3
 800c754:	d000      	beq.n	800c758 <SetButtonEvents+0x2b0>
 800c756:	e749      	b.n	800c5ec <SetButtonEvents+0x144>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c758:	00e1      	lsls	r1, r4, #3
 800c75a:	1909      	adds	r1, r1, r4
 800c75c:	4a19      	ldr	r2, [pc, #100]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c75e:	1852      	adds	r2, r2, r1
 800c760:	7a11      	ldrb	r1, [r2, #8]
 800c762:	2040      	movs	r0, #64	; 0x40
 800c764:	4381      	bics	r1, r0
 800c766:	7211      	strb	r1, [r2, #8]
 800c768:	e740      	b.n	800c5ec <SetButtonEvents+0x144>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
 800c76a:	4642      	mov	r2, r8
 800c76c:	4313      	orrs	r3, r2
 800c76e:	d000      	beq.n	800c772 <SetButtonEvents+0x2ca>
 800c770:	e74e      	b.n	800c610 <SetButtonEvents+0x168>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800c772:	00e2      	lsls	r2, r4, #3
 800c774:	1912      	adds	r2, r2, r4
 800c776:	4b13      	ldr	r3, [pc, #76]	; (800c7c4 <SetButtonEvents+0x31c>)
 800c778:	189b      	adds	r3, r3, r2
 800c77a:	7a19      	ldrb	r1, [r3, #8]
 800c77c:	227f      	movs	r2, #127	; 0x7f
 800c77e:	400a      	ands	r2, r1
 800c780:	721a      	strb	r2, [r3, #8]
 800c782:	e745      	b.n	800c610 <SetButtonEvents+0x168>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800c784:	0209      	lsls	r1, r1, #8
 800c786:	4311      	orrs	r1, r2
 800c788:	ab02      	add	r3, sp, #8
 800c78a:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c78c:	0028      	movs	r0, r5
 800c78e:	f7ff f993 	bl	800bab8 <EE_WriteVariable>
 800c792:	e755      	b.n	800c640 <SetButtonEvents+0x198>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800c794:	4653      	mov	r3, sl
 800c796:	4319      	orrs	r1, r3
 800c798:	0020      	movs	r0, r4
 800c79a:	f7ff f98d 	bl	800bab8 <EE_WriteVariable>
 800c79e:	e763      	b.n	800c668 <SetButtonEvents+0x1c0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800c7a0:	464b      	mov	r3, r9
 800c7a2:	4319      	orrs	r1, r3
 800c7a4:	0020      	movs	r0, r4
 800c7a6:	f7ff f987 	bl	800bab8 <EE_WriteVariable>
 800c7aa:	e76f      	b.n	800c68c <SetButtonEvents+0x1e4>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800c7ac:	4643      	mov	r3, r8
 800c7ae:	4319      	orrs	r1, r3
 800c7b0:	0028      	movs	r0, r5
 800c7b2:	f7ff f981 	bl	800bab8 <EE_WriteVariable>
	return result;
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	e777      	b.n	800c6aa <SetButtonEvents+0x202>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800c7ba:	200b      	movs	r0, #11
 800c7bc:	e775      	b.n	800c6aa <SetButtonEvents+0x202>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800c7be:	200b      	movs	r0, #11
 800c7c0:	e773      	b.n	800c6aa <SetButtonEvents+0x202>
 800c7c2:	46c0      	nop			; (mov r8, r8)
 800c7c4:	2000299c 	.word	0x2000299c

0800c7c8 <HAL_ADC_MspInit>:
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
		Error_Handler();
	}
	ADC_flag = 1;
}
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800c7c8:	b500      	push	{lr}
 800c7ca:	b089      	sub	sp, #36	; 0x24

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800c7cc:	2214      	movs	r2, #20
 800c7ce:	2100      	movs	r1, #0
 800c7d0:	a803      	add	r0, sp, #12
 800c7d2:	f006 fe86 	bl	80134e2 <memset>
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c7d6:	4b12      	ldr	r3, [pc, #72]	; (800c820 <HAL_ADC_MspInit+0x58>)
 800c7d8:	6999      	ldr	r1, [r3, #24]
 800c7da:	2080      	movs	r0, #128	; 0x80
 800c7dc:	0080      	lsls	r0, r0, #2
 800c7de:	4301      	orrs	r1, r0
 800c7e0:	6199      	str	r1, [r3, #24]
 800c7e2:	699a      	ldr	r2, [r3, #24]
 800c7e4:	4002      	ands	r2, r0
 800c7e6:	9201      	str	r2, [sp, #4]
 800c7e8:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c7ea:	695a      	ldr	r2, [r3, #20]
 800c7ec:	2180      	movs	r1, #128	; 0x80
 800c7ee:	0289      	lsls	r1, r1, #10
 800c7f0:	430a      	orrs	r2, r1
 800c7f2:	615a      	str	r2, [r3, #20]
 800c7f4:	695b      	ldr	r3, [r3, #20]
 800c7f6:	400b      	ands	r3, r1
 800c7f8:	9302      	str	r3, [sp, #8]
 800c7fa:	9b02      	ldr	r3, [sp, #8]
		 PA2     ------> ADC_IN2
		 PA3     ------> ADC_IN3
		 PA4     ------> ADC_IN4
		 PA5     ------> ADC_IN5
		 */
		if(flag_ADC_Select==1){
 800c7fc:	4a09      	ldr	r2, [pc, #36]	; (800c824 <HAL_ADC_MspInit+0x5c>)
 800c7fe:	2368      	movs	r3, #104	; 0x68
 800c800:	5cd3      	ldrb	r3, [r2, r3]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d001      	beq.n	800c80a <HAL_ADC_MspInit+0x42>
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}

}
 800c806:	b009      	add	sp, #36	; 0x24
 800c808:	bd00      	pop	{pc}
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800c80a:	333b      	adds	r3, #59	; 0x3b
 800c80c:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c80e:	3b39      	subs	r3, #57	; 0x39
 800c810:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c812:	3871      	subs	r0, #113	; 0x71
 800c814:	38ff      	subs	r0, #255	; 0xff
 800c816:	a903      	add	r1, sp, #12
 800c818:	05c0      	lsls	r0, r0, #23
 800c81a:	f004 fdd5 	bl	80113c8 <HAL_GPIO_Init>
}
 800c81e:	e7f2      	b.n	800c806 <HAL_ADC_MspInit+0x3e>
 800c820:	40021000 	.word	0x40021000
 800c824:	2000299c 	.word	0x2000299c

0800c828 <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart, char *side) {

	if (huart->Instance == USART2 && side == "top")
 800c828:	6803      	ldr	r3, [r0, #0]
 800c82a:	4a10      	ldr	r2, [pc, #64]	; (800c86c <Get_channel+0x44>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d009      	beq.n	800c844 <Get_channel+0x1c>
		return ADC_CHANNEL_2;
	else if (huart->Instance == USART2 && side == "bottom")
 800c830:	4a0e      	ldr	r2, [pc, #56]	; (800c86c <Get_channel+0x44>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d00b      	beq.n	800c84e <Get_channel+0x26>
		return ADC_CHANNEL_3;
	else if (huart->Instance == USART6 && side == "top")
 800c836:	4a0e      	ldr	r2, [pc, #56]	; (800c870 <Get_channel+0x48>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d00d      	beq.n	800c858 <Get_channel+0x30>
		return ADC_CHANNEL_4;
	else if (huart->Instance == USART6 && side == "bottom")
 800c83c:	4a0c      	ldr	r2, [pc, #48]	; (800c870 <Get_channel+0x48>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d00f      	beq.n	800c862 <Get_channel+0x3a>
		return ADC_CHANNEL_5;
}
 800c842:	4770      	bx	lr
	if (huart->Instance == USART2 && side == "top")
 800c844:	4a0b      	ldr	r2, [pc, #44]	; (800c874 <Get_channel+0x4c>)
 800c846:	4291      	cmp	r1, r2
 800c848:	d1f2      	bne.n	800c830 <Get_channel+0x8>
		return ADC_CHANNEL_2;
 800c84a:	2002      	movs	r0, #2
 800c84c:	e7f9      	b.n	800c842 <Get_channel+0x1a>
	else if (huart->Instance == USART2 && side == "bottom")
 800c84e:	4a0a      	ldr	r2, [pc, #40]	; (800c878 <Get_channel+0x50>)
 800c850:	4291      	cmp	r1, r2
 800c852:	d1f0      	bne.n	800c836 <Get_channel+0xe>
		return ADC_CHANNEL_3;
 800c854:	2003      	movs	r0, #3
 800c856:	e7f4      	b.n	800c842 <Get_channel+0x1a>
	else if (huart->Instance == USART6 && side == "top")
 800c858:	4a06      	ldr	r2, [pc, #24]	; (800c874 <Get_channel+0x4c>)
 800c85a:	4291      	cmp	r1, r2
 800c85c:	d1ee      	bne.n	800c83c <Get_channel+0x14>
		return ADC_CHANNEL_4;
 800c85e:	2004      	movs	r0, #4
 800c860:	e7ef      	b.n	800c842 <Get_channel+0x1a>
	else if (huart->Instance == USART6 && side == "bottom")
 800c862:	4b05      	ldr	r3, [pc, #20]	; (800c878 <Get_channel+0x50>)
 800c864:	4299      	cmp	r1, r3
 800c866:	d1ec      	bne.n	800c842 <Get_channel+0x1a>
		return ADC_CHANNEL_5;
 800c868:	2005      	movs	r0, #5
 800c86a:	e7ea      	b.n	800c842 <Get_channel+0x1a>
 800c86c:	40004400 	.word	0x40004400
 800c870:	40011400 	.word	0x40011400
 800c874:	0801aaa4 	.word	0x0801aaa4
 800c878:	0801aaa8 	.word	0x0801aaa8

0800c87c <Error_Handler>:

void Error_Handler(void) {
 800c87c:	b510      	push	{r4, lr}

	HAL_Delay(100);
 800c87e:	2064      	movs	r0, #100	; 0x64
 800c880:	f003 fb36 	bl	800fef0 <HAL_Delay>

}
 800c884:	bd10      	pop	{r4, pc}
	...

0800c888 <MX_ADC_Init>:
void MX_ADC_Init(void) {
 800c888:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 800c88a:	4816      	ldr	r0, [pc, #88]	; (800c8e4 <MX_ADC_Init+0x5c>)
 800c88c:	4b16      	ldr	r3, [pc, #88]	; (800c8e8 <MX_ADC_Init+0x60>)
 800c88e:	66c3      	str	r3, [r0, #108]	; 0x6c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c890:	2380      	movs	r3, #128	; 0x80
 800c892:	061b      	lsls	r3, r3, #24
 800c894:	6703      	str	r3, [r0, #112]	; 0x70
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c896:	2300      	movs	r3, #0
 800c898:	6743      	str	r3, [r0, #116]	; 0x74
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c89a:	6783      	str	r3, [r0, #120]	; 0x78
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800c89c:	2201      	movs	r2, #1
 800c89e:	67c2      	str	r2, [r0, #124]	; 0x7c
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c8a0:	2180      	movs	r1, #128	; 0x80
 800c8a2:	2404      	movs	r4, #4
 800c8a4:	5044      	str	r4, [r0, r1]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800c8a6:	3104      	adds	r1, #4
 800c8a8:	5043      	str	r3, [r0, r1]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800c8aa:	3104      	adds	r1, #4
 800c8ac:	5043      	str	r3, [r0, r1]
	hadc.Init.ContinuousConvMode = ENABLE;
 800c8ae:	3104      	adds	r1, #4
 800c8b0:	5042      	str	r2, [r0, r1]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800c8b2:	3104      	adds	r1, #4
 800c8b4:	5043      	str	r3, [r0, r1]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c8b6:	3104      	adds	r1, #4
 800c8b8:	24c2      	movs	r4, #194	; 0xc2
 800c8ba:	34ff      	adds	r4, #255	; 0xff
 800c8bc:	5044      	str	r4, [r0, r1]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c8be:	3104      	adds	r1, #4
 800c8c0:	5043      	str	r3, [r0, r1]
	hadc.Init.DMAContinuousRequests = DISABLE;
 800c8c2:	3104      	adds	r1, #4
 800c8c4:	5043      	str	r3, [r0, r1]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c8c6:	33a0      	adds	r3, #160	; 0xa0
 800c8c8:	50c2      	str	r2, [r0, r3]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800c8ca:	306c      	adds	r0, #108	; 0x6c
 800c8cc:	f003 fbea 	bl	80100a4 <HAL_ADC_Init>
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	d104      	bne.n	800c8de <MX_ADC_Init+0x56>
	ADC_flag = 1;
 800c8d4:	4a05      	ldr	r2, [pc, #20]	; (800c8ec <MX_ADC_Init+0x64>)
 800c8d6:	2338      	movs	r3, #56	; 0x38
 800c8d8:	2101      	movs	r1, #1
 800c8da:	54d1      	strb	r1, [r2, r3]
}
 800c8dc:	bd10      	pop	{r4, pc}
		Error_Handler();
 800c8de:	f7ff ffcd 	bl	800c87c <Error_Handler>
 800c8e2:	e7f7      	b.n	800c8d4 <MX_ADC_Init+0x4c>
 800c8e4:	2000299c 	.word	0x2000299c
 800c8e8:	40012400 	.word	0x40012400
 800c8ec:	20002a1c 	.word	0x20002a1c

0800c8f0 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800c8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f2:	46ce      	mov	lr, r9
 800c8f4:	4647      	mov	r7, r8
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	0006      	movs	r6, r0
 800c8fa:	4688      	mov	r8, r1
	if (0 == ADC_flag)
 800c8fc:	4a54      	ldr	r2, [pc, #336]	; (800ca50 <ReadTempAndVref+0x160>)
 800c8fe:	2338      	movs	r3, #56	; 0x38
 800c900:	5cd3      	ldrb	r3, [r2, r3]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d100      	bne.n	800c908 <ReadTempAndVref+0x18>
 800c906:	e094      	b.n	800ca32 <ReadTempAndVref+0x142>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c908:	4951      	ldr	r1, [pc, #324]	; (800ca50 <ReadTempAndVref+0x160>)
 800c90a:	2310      	movs	r3, #16
 800c90c:	63cb      	str	r3, [r1, #60]	; 0x3c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c90e:	2380      	movs	r3, #128	; 0x80
 800c910:	015b      	lsls	r3, r3, #5
 800c912:	640b      	str	r3, [r1, #64]	; 0x40
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c914:	2301      	movs	r3, #1
 800c916:	644b      	str	r3, [r1, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c918:	313c      	adds	r1, #60	; 0x3c
 800c91a:	484e      	ldr	r0, [pc, #312]	; (800ca54 <ReadTempAndVref+0x164>)
 800c91c:	306c      	adds	r0, #108	; 0x6c
 800c91e:	f003 fd2f 	bl	8010380 <HAL_ADC_ConfigChannel>
 800c922:	2800      	cmp	r0, #0
 800c924:	d000      	beq.n	800c928 <ReadTempAndVref+0x38>
 800c926:	e087      	b.n	800ca38 <ReadTempAndVref+0x148>
	HAL_ADC_Start(&hadc);
 800c928:	4c4a      	ldr	r4, [pc, #296]	; (800ca54 <ReadTempAndVref+0x164>)
 800c92a:	346c      	adds	r4, #108	; 0x6c
 800c92c:	0020      	movs	r0, r4
 800c92e:	f003 fc6f 	bl	8010210 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800c932:	2164      	movs	r1, #100	; 0x64
 800c934:	0020      	movs	r0, r4
 800c936:	f003 fcbd 	bl	80102b4 <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800c93a:	0020      	movs	r0, r4
 800c93c:	f003 fd1a 	bl	8010374 <HAL_ADC_GetValue>
 800c940:	b280      	uxth	r0, r0
 800c942:	4d43      	ldr	r5, [pc, #268]	; (800ca50 <ReadTempAndVref+0x160>)
 800c944:	2348      	movs	r3, #72	; 0x48
 800c946:	52e8      	strh	r0, [r5, r3]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800c948:	f7f6 f912 	bl	8002b70 <__aeabi_i2d>
 800c94c:	4a42      	ldr	r2, [pc, #264]	; (800ca58 <ReadTempAndVref+0x168>)
 800c94e:	4b43      	ldr	r3, [pc, #268]	; (800ca5c <ReadTempAndVref+0x16c>)
 800c950:	f7f5 fabc 	bl	8001ecc <__aeabi_dmul>
 800c954:	2200      	movs	r2, #0
 800c956:	4b42      	ldr	r3, [pc, #264]	; (800ca60 <ReadTempAndVref+0x170>)
 800c958:	f7f4 feb6 	bl	80016c8 <__aeabi_ddiv>
 800c95c:	4a41      	ldr	r2, [pc, #260]	; (800ca64 <ReadTempAndVref+0x174>)
 800c95e:	4b42      	ldr	r3, [pc, #264]	; (800ca68 <ReadTempAndVref+0x178>)
 800c960:	f7f5 fd20 	bl	80023a4 <__aeabi_dsub>
 800c964:	4a41      	ldr	r2, [pc, #260]	; (800ca6c <ReadTempAndVref+0x17c>)
 800c966:	4b42      	ldr	r3, [pc, #264]	; (800ca70 <ReadTempAndVref+0x180>)
 800c968:	f7f4 feae 	bl	80016c8 <__aeabi_ddiv>
 800c96c:	2200      	movs	r2, #0
 800c96e:	4b41      	ldr	r3, [pc, #260]	; (800ca74 <ReadTempAndVref+0x184>)
 800c970:	f7f4 fb6e 	bl	8001050 <__aeabi_dadd>
 800c974:	f7f6 f99a 	bl	8002cac <__aeabi_d2f>
 800c978:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 800c97a:	0020      	movs	r0, r4
 800c97c:	f003 fc78 	bl	8010270 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c980:	2310      	movs	r3, #16
 800c982:	63eb      	str	r3, [r5, #60]	; 0x3c
	sConfig.Rank = ADC_RANK_NONE;
 800c984:	4b3c      	ldr	r3, [pc, #240]	; (800ca78 <ReadTempAndVref+0x188>)
 800c986:	642b      	str	r3, [r5, #64]	; 0x40
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c988:	2301      	movs	r3, #1
 800c98a:	646b      	str	r3, [r5, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c98c:	0029      	movs	r1, r5
 800c98e:	313c      	adds	r1, #60	; 0x3c
 800c990:	0020      	movs	r0, r4
 800c992:	f003 fcf5 	bl	8010380 <HAL_ADC_ConfigChannel>
 800c996:	2800      	cmp	r0, #0
 800c998:	d151      	bne.n	800ca3e <ReadTempAndVref+0x14e>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800c99a:	492d      	ldr	r1, [pc, #180]	; (800ca50 <ReadTempAndVref+0x160>)
 800c99c:	2311      	movs	r3, #17
 800c99e:	63cb      	str	r3, [r1, #60]	; 0x3c
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c9a0:	2380      	movs	r3, #128	; 0x80
 800c9a2:	015b      	lsls	r3, r3, #5
 800c9a4:	640b      	str	r3, [r1, #64]	; 0x40
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800c9a6:	2305      	movs	r3, #5
 800c9a8:	644b      	str	r3, [r1, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c9aa:	313c      	adds	r1, #60	; 0x3c
 800c9ac:	4829      	ldr	r0, [pc, #164]	; (800ca54 <ReadTempAndVref+0x164>)
 800c9ae:	306c      	adds	r0, #108	; 0x6c
 800c9b0:	f003 fce6 	bl	8010380 <HAL_ADC_ConfigChannel>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	d145      	bne.n	800ca44 <ReadTempAndVref+0x154>
	HAL_ADC_Start(&hadc);
 800c9b8:	4c26      	ldr	r4, [pc, #152]	; (800ca54 <ReadTempAndVref+0x164>)
 800c9ba:	346c      	adds	r4, #108	; 0x6c
 800c9bc:	0020      	movs	r0, r4
 800c9be:	f003 fc27 	bl	8010210 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800c9c2:	2164      	movs	r1, #100	; 0x64
 800c9c4:	0020      	movs	r0, r4
 800c9c6:	f003 fc75 	bl	80102b4 <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800c9ca:	0020      	movs	r0, r4
 800c9cc:	f003 fcd2 	bl	8010374 <HAL_ADC_GetValue>
 800c9d0:	b283      	uxth	r3, r0
 800c9d2:	4699      	mov	r9, r3
 800c9d4:	4d1e      	ldr	r5, [pc, #120]	; (800ca50 <ReadTempAndVref+0x160>)
 800c9d6:	234a      	movs	r3, #74	; 0x4a
 800c9d8:	464a      	mov	r2, r9
 800c9da:	52ea      	strh	r2, [r5, r3]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800c9dc:	4b27      	ldr	r3, [pc, #156]	; (800ca7c <ReadTempAndVref+0x18c>)
 800c9de:	8818      	ldrh	r0, [r3, #0]
 800c9e0:	f7f6 f8c6 	bl	8002b70 <__aeabi_i2d>
 800c9e4:	4a1c      	ldr	r2, [pc, #112]	; (800ca58 <ReadTempAndVref+0x168>)
 800c9e6:	4b1d      	ldr	r3, [pc, #116]	; (800ca5c <ReadTempAndVref+0x16c>)
 800c9e8:	f7f5 fa70 	bl	8001ecc <__aeabi_dmul>
 800c9ec:	0006      	movs	r6, r0
 800c9ee:	000f      	movs	r7, r1
 800c9f0:	4648      	mov	r0, r9
 800c9f2:	f7f6 f8bd 	bl	8002b70 <__aeabi_i2d>
 800c9f6:	0002      	movs	r2, r0
 800c9f8:	000b      	movs	r3, r1
 800c9fa:	0030      	movs	r0, r6
 800c9fc:	0039      	movs	r1, r7
 800c9fe:	f7f4 fe63 	bl	80016c8 <__aeabi_ddiv>
 800ca02:	f7f6 f953 	bl	8002cac <__aeabi_d2f>
 800ca06:	4643      	mov	r3, r8
 800ca08:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 800ca0a:	0020      	movs	r0, r4
 800ca0c:	f003 fc30 	bl	8010270 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800ca10:	2311      	movs	r3, #17
 800ca12:	63eb      	str	r3, [r5, #60]	; 0x3c
	sConfig.Rank = ADC_RANK_NONE;
 800ca14:	4b18      	ldr	r3, [pc, #96]	; (800ca78 <ReadTempAndVref+0x188>)
 800ca16:	642b      	str	r3, [r5, #64]	; 0x40
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	646b      	str	r3, [r5, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ca1c:	0029      	movs	r1, r5
 800ca1e:	313c      	adds	r1, #60	; 0x3c
 800ca20:	0020      	movs	r0, r4
 800ca22:	f003 fcad 	bl	8010380 <HAL_ADC_ConfigChannel>
 800ca26:	2800      	cmp	r0, #0
 800ca28:	d10f      	bne.n	800ca4a <ReadTempAndVref+0x15a>
}
 800ca2a:	bcc0      	pop	{r6, r7}
 800ca2c:	46b9      	mov	r9, r7
 800ca2e:	46b0      	mov	r8, r6
 800ca30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		MX_ADC_Init();
 800ca32:	f7ff ff29 	bl	800c888 <MX_ADC_Init>
 800ca36:	e767      	b.n	800c908 <ReadTempAndVref+0x18>
		Error_Handler();
 800ca38:	f7ff ff20 	bl	800c87c <Error_Handler>
 800ca3c:	e774      	b.n	800c928 <ReadTempAndVref+0x38>
		Error_Handler();
 800ca3e:	f7ff ff1d 	bl	800c87c <Error_Handler>
 800ca42:	e7aa      	b.n	800c99a <ReadTempAndVref+0xaa>
		Error_Handler();
 800ca44:	f7ff ff1a 	bl	800c87c <Error_Handler>
 800ca48:	e7b6      	b.n	800c9b8 <ReadTempAndVref+0xc8>
		Error_Handler();
 800ca4a:	f7ff ff17 	bl	800c87c <Error_Handler>
}
 800ca4e:	e7ec      	b.n	800ca2a <ReadTempAndVref+0x13a>
 800ca50:	20002a1c 	.word	0x20002a1c
 800ca54:	2000299c 	.word	0x2000299c
 800ca58:	66666666 	.word	0x66666666
 800ca5c:	400a6666 	.word	0x400a6666
 800ca60:	40affe00 	.word	0x40affe00
 800ca64:	28f5c28f 	.word	0x28f5c28f
 800ca68:	3ff68f5c 	.word	0x3ff68f5c
 800ca6c:	33333333 	.word	0x33333333
 800ca70:	40113333 	.word	0x40113333
 800ca74:	40390000 	.word	0x40390000
 800ca78:	00001001 	.word	0x00001001
 800ca7c:	1ffff7ba 	.word	0x1ffff7ba

0800ca80 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800ca80:	b570      	push	{r4, r5, r6, lr}
 800ca82:	b086      	sub	sp, #24
 800ca84:	0004      	movs	r4, r0
 800ca86:	000d      	movs	r5, r1
	if (port == 2 || port == 3) {
 800ca88:	1e83      	subs	r3, r0, #2
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d901      	bls.n	800ca94 <GetReadPrecentage+0x14>
}
 800ca90:	b006      	add	sp, #24
 800ca92:	bd70      	pop	{r4, r5, r6, pc}
		if (0 == ADC_flag) {
 800ca94:	4a4c      	ldr	r2, [pc, #304]	; (800cbc8 <GetReadPrecentage+0x148>)
 800ca96:	2338      	movs	r3, #56	; 0x38
 800ca98:	5cd3      	ldrb	r3, [r2, r3]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d053      	beq.n	800cb46 <GetReadPrecentage+0xc6>
		Channel = Get_channel(GetUart(port), "bottom");
 800ca9e:	0020      	movs	r0, r4
 800caa0:	f001 f97e 	bl	800dda0 <GetUart>
 800caa4:	4949      	ldr	r1, [pc, #292]	; (800cbcc <GetReadPrecentage+0x14c>)
 800caa6:	f7ff febf 	bl	800c828 <Get_channel>
 800caaa:	4947      	ldr	r1, [pc, #284]	; (800cbc8 <GetReadPrecentage+0x148>)
 800caac:	234c      	movs	r3, #76	; 0x4c
 800caae:	54c8      	strb	r0, [r1, r3]
		sConfig.Channel = Channel;
 800cab0:	63c8      	str	r0, [r1, #60]	; 0x3c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800cab2:	2380      	movs	r3, #128	; 0x80
 800cab4:	015b      	lsls	r3, r3, #5
 800cab6:	640b      	str	r3, [r1, #64]	; 0x40
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800cab8:	2301      	movs	r3, #1
 800caba:	644b      	str	r3, [r1, #68]	; 0x44
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cabc:	313c      	adds	r1, #60	; 0x3c
 800cabe:	4844      	ldr	r0, [pc, #272]	; (800cbd0 <GetReadPrecentage+0x150>)
 800cac0:	306c      	adds	r0, #108	; 0x6c
 800cac2:	f003 fc5d 	bl	8010380 <HAL_ADC_ConfigChannel>
 800cac6:	2800      	cmp	r0, #0
 800cac8:	d17a      	bne.n	800cbc0 <GetReadPrecentage+0x140>
		HAL_ADC_Start(&hadc);
 800caca:	4c41      	ldr	r4, [pc, #260]	; (800cbd0 <GetReadPrecentage+0x150>)
 800cacc:	346c      	adds	r4, #108	; 0x6c
 800cace:	0020      	movs	r0, r4
 800cad0:	f003 fb9e 	bl	8010210 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800cad4:	2164      	movs	r1, #100	; 0x64
 800cad6:	0020      	movs	r0, r4
 800cad8:	f003 fbec 	bl	80102b4 <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800cadc:	0020      	movs	r0, r4
 800cade:	f003 fc49 	bl	8010374 <HAL_ADC_GetValue>
 800cae2:	f7f4 fa73 	bl	8000fcc <__aeabi_ui2f>
 800cae6:	4e38      	ldr	r6, [pc, #224]	; (800cbc8 <GetReadPrecentage+0x148>)
 800cae8:	6530      	str	r0, [r6, #80]	; 0x50
		percentage = 3.3 * percentage / 4095;
 800caea:	f7f6 f897 	bl	8002c1c <__aeabi_f2d>
 800caee:	4a39      	ldr	r2, [pc, #228]	; (800cbd4 <GetReadPrecentage+0x154>)
 800caf0:	4b39      	ldr	r3, [pc, #228]	; (800cbd8 <GetReadPrecentage+0x158>)
 800caf2:	f7f5 f9eb 	bl	8001ecc <__aeabi_dmul>
 800caf6:	2200      	movs	r2, #0
 800caf8:	4b38      	ldr	r3, [pc, #224]	; (800cbdc <GetReadPrecentage+0x15c>)
 800cafa:	f7f4 fde5 	bl	80016c8 <__aeabi_ddiv>
 800cafe:	f7f6 f8d5 	bl	8002cac <__aeabi_d2f>
 800cb02:	6530      	str	r0, [r6, #80]	; 0x50
		current = (100 * percentage) / 3.3;
 800cb04:	4936      	ldr	r1, [pc, #216]	; (800cbe0 <GetReadPrecentage+0x160>)
 800cb06:	f7f3 ff6d 	bl	80009e4 <__aeabi_fmul>
 800cb0a:	f7f6 f887 	bl	8002c1c <__aeabi_f2d>
 800cb0e:	4a31      	ldr	r2, [pc, #196]	; (800cbd4 <GetReadPrecentage+0x154>)
 800cb10:	4b31      	ldr	r3, [pc, #196]	; (800cbd8 <GetReadPrecentage+0x158>)
 800cb12:	f7f4 fdd9 	bl	80016c8 <__aeabi_ddiv>
 800cb16:	f7f6 f8c9 	bl	8002cac <__aeabi_d2f>
 800cb1a:	6570      	str	r0, [r6, #84]	; 0x54
		*precentageValue = current;
 800cb1c:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800cb1e:	0020      	movs	r0, r4
 800cb20:	f003 fba6 	bl	8010270 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800cb24:	234c      	movs	r3, #76	; 0x4c
 800cb26:	5cf3      	ldrb	r3, [r6, r3]
 800cb28:	63f3      	str	r3, [r6, #60]	; 0x3c
		sConfig.Rank = ADC_RANK_NONE;
 800cb2a:	4b2e      	ldr	r3, [pc, #184]	; (800cbe4 <GetReadPrecentage+0x164>)
 800cb2c:	6433      	str	r3, [r6, #64]	; 0x40
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	6473      	str	r3, [r6, #68]	; 0x44
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cb32:	0031      	movs	r1, r6
 800cb34:	313c      	adds	r1, #60	; 0x3c
 800cb36:	0020      	movs	r0, r4
 800cb38:	f003 fc22 	bl	8010380 <HAL_ADC_ConfigChannel>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	d0a7      	beq.n	800ca90 <GetReadPrecentage+0x10>
			Error_Handler();
 800cb40:	f7ff fe9c 	bl	800c87c <Error_Handler>
 800cb44:	e7a4      	b.n	800ca90 <GetReadPrecentage+0x10>
			MX_ADC_Init();
 800cb46:	f7ff fe9f 	bl	800c888 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800cb4a:	0020      	movs	r0, r4
 800cb4c:	f001 f928 	bl	800dda0 <GetUart>
 800cb50:	f005 fcf5 	bl	801253e <HAL_UART_DeInit>
			if (port == 3) {
 800cb54:	2c03      	cmp	r4, #3
 800cb56:	d019      	beq.n	800cb8c <GetReadPrecentage+0x10c>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800cb58:	2690      	movs	r6, #144	; 0x90
 800cb5a:	05f6      	lsls	r6, r6, #23
 800cb5c:	2104      	movs	r1, #4
 800cb5e:	0030      	movs	r0, r6
 800cb60:	f004 fcfe 	bl	8011560 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cb64:	2304      	movs	r3, #4
 800cb66:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cb68:	3b03      	subs	r3, #3
 800cb6a:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cb6c:	3302      	adds	r3, #2
 800cb6e:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb70:	a901      	add	r1, sp, #4
 800cb72:	0030      	movs	r0, r6
 800cb74:	f004 fc28 	bl	80113c8 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800cb78:	1e63      	subs	r3, r4, #1
 800cb7a:	4a1b      	ldr	r2, [pc, #108]	; (800cbe8 <GetReadPrecentage+0x168>)
 800cb7c:	2106      	movs	r1, #6
 800cb7e:	54d1      	strb	r1, [r2, r3]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800cb80:	2201      	movs	r2, #1
 800cb82:	3902      	subs	r1, #2
 800cb84:	0030      	movs	r0, r6
 800cb86:	f004 fd74 	bl	8011672 <HAL_GPIO_WritePin>
 800cb8a:	e788      	b.n	800ca9e <GetReadPrecentage+0x1e>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800cb8c:	2690      	movs	r6, #144	; 0x90
 800cb8e:	05f6      	lsls	r6, r6, #23
 800cb90:	2110      	movs	r1, #16
 800cb92:	0030      	movs	r0, r6
 800cb94:	f004 fce4 	bl	8011560 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800cb98:	2310      	movs	r3, #16
 800cb9a:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cb9c:	3b0f      	subs	r3, #15
 800cb9e:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cba0:	3302      	adds	r3, #2
 800cba2:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cba4:	a901      	add	r1, sp, #4
 800cba6:	0030      	movs	r0, r6
 800cba8:	f004 fc0e 	bl	80113c8 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800cbac:	1e63      	subs	r3, r4, #1
 800cbae:	4a0e      	ldr	r2, [pc, #56]	; (800cbe8 <GetReadPrecentage+0x168>)
 800cbb0:	2106      	movs	r1, #6
 800cbb2:	54d1      	strb	r1, [r2, r3]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	310a      	adds	r1, #10
 800cbb8:	0030      	movs	r0, r6
 800cbba:	f004 fd5a 	bl	8011672 <HAL_GPIO_WritePin>
 800cbbe:	e76e      	b.n	800ca9e <GetReadPrecentage+0x1e>
			Error_Handler();
 800cbc0:	f7ff fe5c 	bl	800c87c <Error_Handler>
 800cbc4:	e781      	b.n	800caca <GetReadPrecentage+0x4a>
 800cbc6:	46c0      	nop			; (mov r8, r8)
 800cbc8:	20002a1c 	.word	0x20002a1c
 800cbcc:	0801aaa8 	.word	0x0801aaa8
 800cbd0:	2000299c 	.word	0x2000299c
 800cbd4:	66666666 	.word	0x66666666
 800cbd8:	400a6666 	.word	0x400a6666
 800cbdc:	40affe00 	.word	0x40affe00
 800cbe0:	42c80000 	.word	0x42c80000
 800cbe4:	00001001 	.word	0x00001001
 800cbe8:	20000c5c 	.word	0x20000c5c

0800cbec <Get_Rank>:

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800cbec:	2802      	cmp	r0, #2
 800cbee:	d009      	beq.n	800cc04 <Get_Rank+0x18>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
 800cbf0:	2802      	cmp	r0, #2
 800cbf2:	d00f      	beq.n	800cc14 <Get_Rank+0x28>
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800cbf4:	2803      	cmp	r0, #3
 800cbf6:	d015      	beq.n	800cc24 <Get_Rank+0x38>
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
 800cbf8:	2803      	cmp	r0, #3
 800cbfa:	d01b      	beq.n	800cc34 <Get_Rank+0x48>
		Rank_t = 3;
	return Rank_t;
 800cbfc:	4a11      	ldr	r2, [pc, #68]	; (800cc44 <Get_Rank+0x58>)
 800cbfe:	2358      	movs	r3, #88	; 0x58
 800cc00:	5cd0      	ldrb	r0, [r2, r3]
}
 800cc02:	4770      	bx	lr
	if (Port == 2 && side == "top")
 800cc04:	4b10      	ldr	r3, [pc, #64]	; (800cc48 <Get_Rank+0x5c>)
 800cc06:	4299      	cmp	r1, r3
 800cc08:	d1f2      	bne.n	800cbf0 <Get_Rank+0x4>
		Rank_t = 0;
 800cc0a:	4a0e      	ldr	r2, [pc, #56]	; (800cc44 <Get_Rank+0x58>)
 800cc0c:	2358      	movs	r3, #88	; 0x58
 800cc0e:	2100      	movs	r1, #0
 800cc10:	54d1      	strb	r1, [r2, r3]
 800cc12:	e7f3      	b.n	800cbfc <Get_Rank+0x10>
	else if (Port == 2 && side == "bottom")
 800cc14:	4b0d      	ldr	r3, [pc, #52]	; (800cc4c <Get_Rank+0x60>)
 800cc16:	4299      	cmp	r1, r3
 800cc18:	d1ec      	bne.n	800cbf4 <Get_Rank+0x8>
		Rank_t = 1;
 800cc1a:	4a0a      	ldr	r2, [pc, #40]	; (800cc44 <Get_Rank+0x58>)
 800cc1c:	2358      	movs	r3, #88	; 0x58
 800cc1e:	2101      	movs	r1, #1
 800cc20:	54d1      	strb	r1, [r2, r3]
 800cc22:	e7eb      	b.n	800cbfc <Get_Rank+0x10>
	else if (Port == 3 && side == "top")
 800cc24:	4b08      	ldr	r3, [pc, #32]	; (800cc48 <Get_Rank+0x5c>)
 800cc26:	4299      	cmp	r1, r3
 800cc28:	d1e6      	bne.n	800cbf8 <Get_Rank+0xc>
		Rank_t = 2;
 800cc2a:	4a06      	ldr	r2, [pc, #24]	; (800cc44 <Get_Rank+0x58>)
 800cc2c:	2358      	movs	r3, #88	; 0x58
 800cc2e:	2102      	movs	r1, #2
 800cc30:	54d1      	strb	r1, [r2, r3]
 800cc32:	e7e3      	b.n	800cbfc <Get_Rank+0x10>
	else if (Port == 3 && side == "bottom")
 800cc34:	4b05      	ldr	r3, [pc, #20]	; (800cc4c <Get_Rank+0x60>)
 800cc36:	4299      	cmp	r1, r3
 800cc38:	d1e0      	bne.n	800cbfc <Get_Rank+0x10>
		Rank_t = 3;
 800cc3a:	4a02      	ldr	r2, [pc, #8]	; (800cc44 <Get_Rank+0x58>)
 800cc3c:	2358      	movs	r3, #88	; 0x58
 800cc3e:	2103      	movs	r1, #3
 800cc40:	54d1      	strb	r1, [r2, r3]
 800cc42:	e7db      	b.n	800cbfc <Get_Rank+0x10>
 800cc44:	20002a1c 	.word	0x20002a1c
 800cc48:	0801aaa4 	.word	0x0801aaa4
 800cc4c:	0801aaa8 	.word	0x0801aaa8

0800cc50 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800cc50:	b570      	push	{r4, r5, r6, lr}
 800cc52:	0004      	movs	r4, r0
 800cc54:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800cc56:	1e83      	subs	r3, r0, #2
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d900      	bls.n	800cc60 <ADCSelectChannel+0x10>
}
 800cc5e:	bd70      	pop	{r4, r5, r6, pc}
		flag_ADC_Select=1;
 800cc60:	4a10      	ldr	r2, [pc, #64]	; (800cca4 <ADCSelectChannel+0x54>)
 800cc62:	2368      	movs	r3, #104	; 0x68
 800cc64:	2101      	movs	r1, #1
 800cc66:	54d1      	strb	r1, [r2, r3]
		HAL_UART_DeInit(GetUart(ADC_port));
 800cc68:	f001 f89a 	bl	800dda0 <GetUart>
 800cc6c:	f005 fc67 	bl	801253e <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800cc70:	1e63      	subs	r3, r4, #1
 800cc72:	4a0d      	ldr	r2, [pc, #52]	; (800cca8 <ADCSelectChannel+0x58>)
 800cc74:	2106      	movs	r1, #6
 800cc76:	54d1      	strb	r1, [r2, r3]
		Channel = Get_channel(GetUart(ADC_port), side);
 800cc78:	0020      	movs	r0, r4
 800cc7a:	f001 f891 	bl	800dda0 <GetUart>
 800cc7e:	0029      	movs	r1, r5
 800cc80:	f7ff fdd2 	bl	800c828 <Get_channel>
 800cc84:	4e09      	ldr	r6, [pc, #36]	; (800ccac <ADCSelectChannel+0x5c>)
 800cc86:	234c      	movs	r3, #76	; 0x4c
 800cc88:	54f0      	strb	r0, [r6, r3]
		Rank_t = Get_Rank(ADC_port, side);
 800cc8a:	0029      	movs	r1, r5
 800cc8c:	0020      	movs	r0, r4
 800cc8e:	f7ff ffad 	bl	800cbec <Get_Rank>
 800cc92:	2358      	movs	r3, #88	; 0x58
 800cc94:	54f0      	strb	r0, [r6, r3]
		if (ADC_flag == 0)
 800cc96:	3b20      	subs	r3, #32
 800cc98:	5cf3      	ldrb	r3, [r6, r3]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1df      	bne.n	800cc5e <ADCSelectChannel+0xe>
			MX_ADC_Init();
 800cc9e:	f7ff fdf3 	bl	800c888 <MX_ADC_Init>
}
 800cca2:	e7dc      	b.n	800cc5e <ADCSelectChannel+0xe>
 800cca4:	2000299c 	.word	0x2000299c
 800cca8:	20000c5c 	.word	0x20000c5c
 800ccac:	20002a1c 	.word	0x20002a1c

0800ccb0 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800ccb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccb2:	46c6      	mov	lr, r8
 800ccb4:	b500      	push	{lr}
 800ccb6:	0005      	movs	r5, r0
 800ccb8:	000e      	movs	r6, r1
 800ccba:	0014      	movs	r4, r2
	if (ADC_flag == 1) {
 800ccbc:	4a2d      	ldr	r2, [pc, #180]	; (800cd74 <ReadADCChannel+0xc4>)
 800ccbe:	2338      	movs	r3, #56	; 0x38
 800ccc0:	5cd3      	ldrb	r3, [r2, r3]
 800ccc2:	2b01      	cmp	r3, #1
 800ccc4:	d00c      	beq.n	800cce0 <ReadADCChannel+0x30>
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800ccc6:	4b2b      	ldr	r3, [pc, #172]	; (800cd74 <ReadADCChannel+0xc4>)
 800ccc8:	2258      	movs	r2, #88	; 0x58
 800ccca:	5c9a      	ldrb	r2, [r3, r2]
 800cccc:	0052      	lsls	r2, r2, #1
 800ccce:	189b      	adds	r3, r3, r2
 800ccd0:	225c      	movs	r2, #92	; 0x5c
 800ccd2:	5a98      	ldrh	r0, [r3, r2]
 800ccd4:	f7f4 f97a 	bl	8000fcc <__aeabi_ui2f>
 800ccd8:	6020      	str	r0, [r4, #0]
}
 800ccda:	bc80      	pop	{r7}
 800ccdc:	46b8      	mov	r8, r7
 800ccde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800cce0:	f001 f85e 	bl	800dda0 <GetUart>
 800cce4:	0031      	movs	r1, r6
 800cce6:	f7ff fd9f 	bl	800c828 <Get_channel>
 800ccea:	4f22      	ldr	r7, [pc, #136]	; (800cd74 <ReadADCChannel+0xc4>)
 800ccec:	234c      	movs	r3, #76	; 0x4c
 800ccee:	4698      	mov	r8, r3
 800ccf0:	54f8      	strb	r0, [r7, r3]
		Rank_t = Get_Rank(Port, side);
 800ccf2:	0031      	movs	r1, r6
 800ccf4:	0028      	movs	r0, r5
 800ccf6:	f7ff ff79 	bl	800cbec <Get_Rank>
 800ccfa:	2358      	movs	r3, #88	; 0x58
 800ccfc:	54f8      	strb	r0, [r7, r3]
		sConfig.Channel = Channel;
 800ccfe:	4643      	mov	r3, r8
 800cd00:	5cfb      	ldrb	r3, [r7, r3]
 800cd02:	63fb      	str	r3, [r7, #60]	; 0x3c
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800cd04:	2380      	movs	r3, #128	; 0x80
 800cd06:	015b      	lsls	r3, r3, #5
 800cd08:	643b      	str	r3, [r7, #64]	; 0x40
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800cd0a:	2303      	movs	r3, #3
 800cd0c:	647b      	str	r3, [r7, #68]	; 0x44
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cd0e:	0039      	movs	r1, r7
 800cd10:	313c      	adds	r1, #60	; 0x3c
 800cd12:	4819      	ldr	r0, [pc, #100]	; (800cd78 <ReadADCChannel+0xc8>)
 800cd14:	306c      	adds	r0, #108	; 0x6c
 800cd16:	f003 fb33 	bl	8010380 <HAL_ADC_ConfigChannel>
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	d126      	bne.n	800cd6c <ReadADCChannel+0xbc>
		HAL_ADC_Start(&hadc);
 800cd1e:	4e16      	ldr	r6, [pc, #88]	; (800cd78 <ReadADCChannel+0xc8>)
 800cd20:	366c      	adds	r6, #108	; 0x6c
 800cd22:	0030      	movs	r0, r6
 800cd24:	f003 fa74 	bl	8010210 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800cd28:	2164      	movs	r1, #100	; 0x64
 800cd2a:	0030      	movs	r0, r6
 800cd2c:	f003 fac2 	bl	80102b4 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800cd30:	0030      	movs	r0, r6
 800cd32:	f003 fb1f 	bl	8010374 <HAL_ADC_GetValue>
 800cd36:	4d0f      	ldr	r5, [pc, #60]	; (800cd74 <ReadADCChannel+0xc4>)
 800cd38:	2358      	movs	r3, #88	; 0x58
 800cd3a:	5ceb      	ldrb	r3, [r5, r3]
 800cd3c:	005b      	lsls	r3, r3, #1
 800cd3e:	18eb      	adds	r3, r5, r3
 800cd40:	225c      	movs	r2, #92	; 0x5c
 800cd42:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 800cd44:	0030      	movs	r0, r6
 800cd46:	f003 fa93 	bl	8010270 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800cd4a:	234c      	movs	r3, #76	; 0x4c
 800cd4c:	5ceb      	ldrb	r3, [r5, r3]
 800cd4e:	63eb      	str	r3, [r5, #60]	; 0x3c
		sConfig.Rank = ADC_RANK_NONE;
 800cd50:	4b0a      	ldr	r3, [pc, #40]	; (800cd7c <ReadADCChannel+0xcc>)
 800cd52:	642b      	str	r3, [r5, #64]	; 0x40
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800cd54:	2303      	movs	r3, #3
 800cd56:	646b      	str	r3, [r5, #68]	; 0x44
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cd58:	0029      	movs	r1, r5
 800cd5a:	313c      	adds	r1, #60	; 0x3c
 800cd5c:	0030      	movs	r0, r6
 800cd5e:	f003 fb0f 	bl	8010380 <HAL_ADC_ConfigChannel>
 800cd62:	2800      	cmp	r0, #0
 800cd64:	d0af      	beq.n	800ccc6 <ReadADCChannel+0x16>
			Error_Handler();
 800cd66:	f7ff fd89 	bl	800c87c <Error_Handler>
 800cd6a:	e7ac      	b.n	800ccc6 <ReadADCChannel+0x16>
			Error_Handler();
 800cd6c:	f7ff fd86 	bl	800c87c <Error_Handler>
 800cd70:	e7d5      	b.n	800cd1e <ReadADCChannel+0x6e>
 800cd72:	46c0      	nop			; (mov r8, r8)
 800cd74:	20002a1c 	.word	0x20002a1c
 800cd78:	2000299c 	.word	0x2000299c
 800cd7c:	00001001 	.word	0x00001001

0800cd80 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port) {
}
 800cd80:	4770      	bx	lr

0800cd82 <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port) {
}
 800cd82:	4770      	bx	lr

0800cd84 <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port) {
}
 800cd84:	4770      	bx	lr

0800cd86 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800cd86:	4770      	bx	lr

0800cd88 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType) {
}
 800cd88:	4770      	bx	lr
	...

0800cd8c <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800cd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd8e:	46ce      	mov	lr, r9
 800cd90:	4647      	mov	r7, r8
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b087      	sub	sp, #28
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800cd96:	2401      	movs	r4, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800cd98:	2600      	movs	r6, #0
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	4698      	mov	r8, r3
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800cd9e:	e13a      	b.n	800d016 <CheckAttachedButtons+0x28a>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800cda0:	464b      	mov	r3, r9
 800cda2:	8819      	ldrh	r1, [r3, #0]
 800cda4:	2201      	movs	r2, #1
 800cda6:	9805      	ldr	r0, [sp, #20]
 800cda8:	f004 fc63 	bl	8011672 <HAL_GPIO_WritePin>
				Delay_us(10);
 800cdac:	200a      	movs	r0, #10
 800cdae:	f000 fe15 	bl	800d9dc <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800cdb2:	8839      	ldrh	r1, [r7, #0]
 800cdb4:	9804      	ldr	r0, [sp, #16]
 800cdb6:	f004 fc55 	bl	8011664 <HAL_GPIO_ReadPin>
 800cdba:	4680      	mov	r8, r0
 800cdbc:	e15b      	b.n	800d076 <CheckAttachedButtons+0x2ea>
			switch (button[i].type) {
 800cdbe:	2b04      	cmp	r3, #4
 800cdc0:	d10b      	bne.n	800cdda <CheckAttachedButtons+0x4e>
				if (connected == GPIO_PIN_SET)
 800cdc2:	4643      	mov	r3, r8
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d046      	beq.n	800ce56 <CheckAttachedButtons+0xca>
				else if (connected == GPIO_PIN_RESET)
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d106      	bne.n	800cdda <CheckAttachedButtons+0x4e>
					state = ON;
 800cdcc:	2602      	movs	r6, #2
 800cdce:	e006      	b.n	800cdde <CheckAttachedButtons+0x52>
				if (connected == GPIO_PIN_SET)
 800cdd0:	4643      	mov	r3, r8
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d041      	beq.n	800ce5a <CheckAttachedButtons+0xce>
				else if (connected == GPIO_PIN_RESET)
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d039      	beq.n	800ce4e <CheckAttachedButtons+0xc2>
			if (state == CLOSED || state == ON) {
 800cdda:	2e04      	cmp	r6, #4
 800cddc:	d03e      	beq.n	800ce5c <CheckAttachedButtons+0xd0>
 800cdde:	2e02      	cmp	r6, #2
 800cde0:	d03c      	beq.n	800ce5c <CheckAttachedButtons+0xd0>
			if (state == OPEN || state == OFF) {
 800cde2:	2e03      	cmp	r6, #3
 800cde4:	d04f      	beq.n	800ce86 <CheckAttachedButtons+0xfa>
 800cde6:	2e01      	cmp	r6, #1
 800cde8:	d04d      	beq.n	800ce86 <CheckAttachedButtons+0xfa>
			if (pressCounter[i] < BOS.buttons.debounce) {
 800cdea:	00aa      	lsls	r2, r5, #2
 800cdec:	4bc9      	ldr	r3, [pc, #804]	; (800d114 <CheckAttachedButtons+0x388>)
 800cdee:	189b      	adds	r3, r3, r2
 800cdf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf2:	4ac9      	ldr	r2, [pc, #804]	; (800d118 <CheckAttachedButtons+0x38c>)
 800cdf4:	8812      	ldrh	r2, [r2, #0]
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d200      	bcs.n	800cdfc <CheckAttachedButtons+0x70>
 800cdfa:	e0a9      	b.n	800cf50 <CheckAttachedButtons+0x1c4>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800cdfc:	d077      	beq.n	800ceee <CheckAttachedButtons+0x162>
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800cdfe:	00a9      	lsls	r1, r5, #2
 800ce00:	4bc4      	ldr	r3, [pc, #784]	; (800d114 <CheckAttachedButtons+0x388>)
 800ce02:	185b      	adds	r3, r3, r1
 800ce04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d203      	bcs.n	800ce12 <CheckAttachedButtons+0x86>
					releaseCounter[i] = 0;
 800ce0a:	4bc2      	ldr	r3, [pc, #776]	; (800d114 <CheckAttachedButtons+0x388>)
 800ce0c:	185b      	adds	r3, r3, r1
 800ce0e:	2200      	movs	r2, #0
 800ce10:	651a      	str	r2, [r3, #80]	; 0x50
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800ce12:	00aa      	lsls	r2, r5, #2
 800ce14:	4bbf      	ldr	r3, [pc, #764]	; (800d114 <CheckAttachedButtons+0x388>)
 800ce16:	189b      	adds	r3, r3, r2
 800ce18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1a:	4abf      	ldr	r2, [pc, #764]	; (800d118 <CheckAttachedButtons+0x38c>)
 800ce1c:	8852      	ldrh	r2, [r2, #2]
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d800      	bhi.n	800ce24 <CheckAttachedButtons+0x98>
 800ce22:	e085      	b.n	800cf30 <CheckAttachedButtons+0x1a4>
						&& pressCounter[i] < 500) {
 800ce24:	22fa      	movs	r2, #250	; 0xfa
 800ce26:	0052      	lsls	r2, r2, #1
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d300      	bcc.n	800ce2e <CheckAttachedButtons+0xa2>
 800ce2c:	e080      	b.n	800cf30 <CheckAttachedButtons+0x1a4>
					if (clicked == 0)
 800ce2e:	4abb      	ldr	r2, [pc, #748]	; (800d11c <CheckAttachedButtons+0x390>)
 800ce30:	2365      	movs	r3, #101	; 0x65
 800ce32:	5cd3      	ldrb	r3, [r2, r3]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d164      	bne.n	800cf02 <CheckAttachedButtons+0x176>
						clicked = 1;		// Record a possible single click
 800ce38:	3365      	adds	r3, #101	; 0x65
 800ce3a:	2101      	movs	r1, #1
 800ce3c:	54d1      	strb	r1, [r2, r3]
 800ce3e:	e087      	b.n	800cf50 <CheckAttachedButtons+0x1c4>
				if (connected == GPIO_PIN_SET)
 800ce40:	4643      	mov	r3, r8
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d005      	beq.n	800ce52 <CheckAttachedButtons+0xc6>
				else if (connected == GPIO_PIN_RESET)
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1c7      	bne.n	800cdda <CheckAttachedButtons+0x4e>
					state = OFF;
 800ce4a:	2601      	movs	r6, #1
 800ce4c:	e7c7      	b.n	800cdde <CheckAttachedButtons+0x52>
					state = OPEN;
 800ce4e:	2603      	movs	r6, #3
 800ce50:	e7c5      	b.n	800cdde <CheckAttachedButtons+0x52>
					state = ON;
 800ce52:	2602      	movs	r6, #2
 800ce54:	e7c3      	b.n	800cdde <CheckAttachedButtons+0x52>
					state = OFF;
 800ce56:	4646      	mov	r6, r8
 800ce58:	e7c1      	b.n	800cdde <CheckAttachedButtons+0x52>
					state = CLOSED;
 800ce5a:	2604      	movs	r6, #4
				if (pressCounter[i] < 0xFFFF)
 800ce5c:	00aa      	lsls	r2, r5, #2
 800ce5e:	4bad      	ldr	r3, [pc, #692]	; (800d114 <CheckAttachedButtons+0x388>)
 800ce60:	189b      	adds	r3, r3, r2
 800ce62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce64:	4aae      	ldr	r2, [pc, #696]	; (800d120 <CheckAttachedButtons+0x394>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d807      	bhi.n	800ce7a <CheckAttachedButtons+0xee>
					++pressCounter[i];			// Advance the debounce counter
 800ce6a:	00a9      	lsls	r1, r5, #2
 800ce6c:	4aa9      	ldr	r2, [pc, #676]	; (800d114 <CheckAttachedButtons+0x388>)
 800ce6e:	1852      	adds	r2, r2, r1
 800ce70:	3301      	adds	r3, #1
 800ce72:	6393      	str	r3, [r2, #56]	; 0x38
 800ce74:	e7b5      	b.n	800cde2 <CheckAttachedButtons+0x56>
					state = CLOSED;
 800ce76:	2604      	movs	r6, #4
 800ce78:	e7f0      	b.n	800ce5c <CheckAttachedButtons+0xd0>
					pressCounter[i] = 0;			// Reset debounce counter
 800ce7a:	00aa      	lsls	r2, r5, #2
 800ce7c:	4ba5      	ldr	r3, [pc, #660]	; (800d114 <CheckAttachedButtons+0x388>)
 800ce7e:	189b      	adds	r3, r3, r2
 800ce80:	2200      	movs	r2, #0
 800ce82:	639a      	str	r2, [r3, #56]	; 0x38
 800ce84:	e7ad      	b.n	800cde2 <CheckAttachedButtons+0x56>
				if (releaseCounter[i] < 0xFFFF)
 800ce86:	00aa      	lsls	r2, r5, #2
 800ce88:	4ba2      	ldr	r3, [pc, #648]	; (800d114 <CheckAttachedButtons+0x388>)
 800ce8a:	189b      	adds	r3, r3, r2
 800ce8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce8e:	4aa4      	ldr	r2, [pc, #656]	; (800d120 <CheckAttachedButtons+0x394>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d819      	bhi.n	800cec8 <CheckAttachedButtons+0x13c>
					++releaseCounter[i];		// Advance the debounce counter
 800ce94:	00a9      	lsls	r1, r5, #2
 800ce96:	4a9f      	ldr	r2, [pc, #636]	; (800d114 <CheckAttachedButtons+0x388>)
 800ce98:	1852      	adds	r2, r2, r1
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	6513      	str	r3, [r2, #80]	; 0x50
				if (clicked == 2
 800ce9e:	4a9f      	ldr	r2, [pc, #636]	; (800d11c <CheckAttachedButtons+0x390>)
 800cea0:	2365      	movs	r3, #101	; 0x65
 800cea2:	5cd3      	ldrb	r3, [r2, r3]
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d015      	beq.n	800ced4 <CheckAttachedButtons+0x148>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800cea8:	4b9c      	ldr	r3, [pc, #624]	; (800d11c <CheckAttachedButtons+0x390>)
 800ceaa:	195b      	adds	r3, r3, r5
 800ceac:	2268      	movs	r2, #104	; 0x68
 800ceae:	5c9a      	ldrb	r2, [r3, r2]
 800ceb0:	4b99      	ldr	r3, [pc, #612]	; (800d118 <CheckAttachedButtons+0x38c>)
 800ceb2:	795b      	ldrb	r3, [r3, #5]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d998      	bls.n	800cdea <CheckAttachedButtons+0x5e>
					clicked = 0;
 800ceb8:	4b98      	ldr	r3, [pc, #608]	; (800d11c <CheckAttachedButtons+0x390>)
 800ceba:	2200      	movs	r2, #0
 800cebc:	2165      	movs	r1, #101	; 0x65
 800cebe:	545a      	strb	r2, [r3, r1]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800cec0:	195b      	adds	r3, r3, r5
 800cec2:	3103      	adds	r1, #3
 800cec4:	545a      	strb	r2, [r3, r1]
 800cec6:	e790      	b.n	800cdea <CheckAttachedButtons+0x5e>
					releaseCounter[i] = 0;		// Reset debounce counter
 800cec8:	00aa      	lsls	r2, r5, #2
 800ceca:	4b92      	ldr	r3, [pc, #584]	; (800d114 <CheckAttachedButtons+0x388>)
 800cecc:	189b      	adds	r3, r3, r2
 800cece:	2200      	movs	r2, #0
 800ced0:	651a      	str	r2, [r3, #80]	; 0x50
 800ced2:	e7e4      	b.n	800ce9e <CheckAttachedButtons+0x112>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800ced4:	1953      	adds	r3, r2, r5
 800ced6:	2268      	movs	r2, #104	; 0x68
 800ced8:	5c9b      	ldrb	r3, [r3, r2]
 800ceda:	4a8f      	ldr	r2, [pc, #572]	; (800d118 <CheckAttachedButtons+0x38c>)
 800cedc:	7952      	ldrb	r2, [r2, #5]
 800cede:	4293      	cmp	r3, r2
 800cee0:	d8e2      	bhi.n	800cea8 <CheckAttachedButtons+0x11c>
					++dblCounter[i];
 800cee2:	4a8e      	ldr	r2, [pc, #568]	; (800d11c <CheckAttachedButtons+0x390>)
 800cee4:	1952      	adds	r2, r2, r5
 800cee6:	3301      	adds	r3, #1
 800cee8:	2168      	movs	r1, #104	; 0x68
 800ceea:	5453      	strb	r3, [r2, r1]
 800ceec:	e77d      	b.n	800cdea <CheckAttachedButtons+0x5e>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800ceee:	4989      	ldr	r1, [pc, #548]	; (800d114 <CheckAttachedButtons+0x388>)
 800cef0:	00e8      	lsls	r0, r5, #3
 800cef2:	1940      	adds	r0, r0, r5
 800cef4:	2707      	movs	r7, #7
 800cef6:	5447      	strb	r7, [r0, r1]
					++pressCounter[i];
 800cef8:	00a8      	lsls	r0, r5, #2
 800cefa:	1809      	adds	r1, r1, r0
 800cefc:	3301      	adds	r3, #1
 800cefe:	638b      	str	r3, [r1, #56]	; 0x38
 800cf00:	e77d      	b.n	800cdfe <CheckAttachedButtons+0x72>
					else if (clicked == 2) {
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d124      	bne.n	800cf50 <CheckAttachedButtons+0x1c4>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800cf06:	4b85      	ldr	r3, [pc, #532]	; (800d11c <CheckAttachedButtons+0x390>)
 800cf08:	195b      	adds	r3, r3, r5
 800cf0a:	2268      	movs	r2, #104	; 0x68
 800cf0c:	5c9b      	ldrb	r3, [r3, r2]
 800cf0e:	4a82      	ldr	r2, [pc, #520]	; (800d118 <CheckAttachedButtons+0x38c>)
 800cf10:	7912      	ldrb	r2, [r2, #4]
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d91c      	bls.n	800cf50 <CheckAttachedButtons+0x1c4>
										< BOS.buttons.maxInterClickTime) {
 800cf16:	4a80      	ldr	r2, [pc, #512]	; (800d118 <CheckAttachedButtons+0x38c>)
 800cf18:	7952      	ldrb	r2, [r2, #5]
								&& dblCounter[i]
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d218      	bcs.n	800cf50 <CheckAttachedButtons+0x1c4>
							clicked = 3;	// Record a possible double click
 800cf1e:	4b7f      	ldr	r3, [pc, #508]	; (800d11c <CheckAttachedButtons+0x390>)
 800cf20:	2265      	movs	r2, #101	; 0x65
 800cf22:	2103      	movs	r1, #3
 800cf24:	5499      	strb	r1, [r3, r2]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800cf26:	195b      	adds	r3, r3, r5
 800cf28:	3203      	adds	r2, #3
 800cf2a:	2100      	movs	r1, #0
 800cf2c:	5499      	strb	r1, [r3, r2]
 800cf2e:	e00f      	b.n	800cf50 <CheckAttachedButtons+0x1c4>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800cf30:	3bf5      	subs	r3, #245	; 0xf5
 800cf32:	3bff      	subs	r3, #255	; 0xff
 800cf34:	4a7b      	ldr	r2, [pc, #492]	; (800d124 <CheckAttachedButtons+0x398>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d80a      	bhi.n	800cf50 <CheckAttachedButtons+0x1c4>
					if (clicked)
 800cf3a:	4a78      	ldr	r2, [pc, #480]	; (800d11c <CheckAttachedButtons+0x390>)
 800cf3c:	2365      	movs	r3, #101	; 0x65
 800cf3e:	5cd3      	ldrb	r3, [r2, r3]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d002      	beq.n	800cf4a <CheckAttachedButtons+0x1be>
						clicked = 0;						// Cannot be a click
 800cf44:	2365      	movs	r3, #101	; 0x65
 800cf46:	2100      	movs	r1, #0
 800cf48:	54d1      	strb	r1, [r2, r3]
					CheckForTimedButtonPress(i);
 800cf4a:	0020      	movs	r0, r4
 800cf4c:	f7ff f926 	bl	800c19c <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800cf50:	00aa      	lsls	r2, r5, #2
 800cf52:	4b70      	ldr	r3, [pc, #448]	; (800d114 <CheckAttachedButtons+0x388>)
 800cf54:	189b      	adds	r3, r3, r2
 800cf56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf58:	4a6f      	ldr	r2, [pc, #444]	; (800d118 <CheckAttachedButtons+0x38c>)
 800cf5a:	8812      	ldrh	r2, [r2, #0]
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d340      	bcc.n	800cfe2 <CheckAttachedButtons+0x256>
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800cf60:	d026      	beq.n	800cfb0 <CheckAttachedButtons+0x224>
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800cf62:	00a9      	lsls	r1, r5, #2
 800cf64:	4b6b      	ldr	r3, [pc, #428]	; (800d114 <CheckAttachedButtons+0x388>)
 800cf66:	185b      	adds	r3, r3, r1
 800cf68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d203      	bcs.n	800cf76 <CheckAttachedButtons+0x1ea>
					pressCounter[i] = 0;
 800cf6e:	4b69      	ldr	r3, [pc, #420]	; (800d114 <CheckAttachedButtons+0x388>)
 800cf70:	185b      	adds	r3, r3, r1
 800cf72:	2200      	movs	r2, #0
 800cf74:	639a      	str	r2, [r3, #56]	; 0x38
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800cf76:	00aa      	lsls	r2, r5, #2
 800cf78:	4b66      	ldr	r3, [pc, #408]	; (800d114 <CheckAttachedButtons+0x388>)
 800cf7a:	189b      	adds	r3, r3, r2
 800cf7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf7e:	4a66      	ldr	r2, [pc, #408]	; (800d118 <CheckAttachedButtons+0x38c>)
 800cf80:	8852      	ldrh	r2, [r2, #2]
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d928      	bls.n	800cfd8 <CheckAttachedButtons+0x24c>
						&& releaseCounter[i] < 500) {
 800cf86:	22fa      	movs	r2, #250	; 0xfa
 800cf88:	0052      	lsls	r2, r2, #1
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d224      	bcs.n	800cfd8 <CheckAttachedButtons+0x24c>
					if (clicked == 1) {
 800cf8e:	4a63      	ldr	r2, [pc, #396]	; (800d11c <CheckAttachedButtons+0x390>)
 800cf90:	2365      	movs	r3, #101	; 0x65
 800cf92:	5cd3      	ldrb	r3, [r2, r3]
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d015      	beq.n	800cfc4 <CheckAttachedButtons+0x238>
					} else if (clicked == 3) {
 800cf98:	2b03      	cmp	r3, #3
 800cf9a:	d122      	bne.n	800cfe2 <CheckAttachedButtons+0x256>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800cf9c:	00eb      	lsls	r3, r5, #3
 800cf9e:	195b      	adds	r3, r3, r5
 800cfa0:	4a5c      	ldr	r2, [pc, #368]	; (800d114 <CheckAttachedButtons+0x388>)
 800cfa2:	2106      	movs	r1, #6
 800cfa4:	5499      	strb	r1, [r3, r2]
						clicked = 0;			// Prepare for a single click
 800cfa6:	4a5d      	ldr	r2, [pc, #372]	; (800d11c <CheckAttachedButtons+0x390>)
 800cfa8:	2365      	movs	r3, #101	; 0x65
 800cfaa:	2100      	movs	r1, #0
 800cfac:	54d1      	strb	r1, [r2, r3]
 800cfae:	e018      	b.n	800cfe2 <CheckAttachedButtons+0x256>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800cfb0:	4958      	ldr	r1, [pc, #352]	; (800d114 <CheckAttachedButtons+0x388>)
 800cfb2:	00e8      	lsls	r0, r5, #3
 800cfb4:	1940      	adds	r0, r0, r5
 800cfb6:	2708      	movs	r7, #8
 800cfb8:	5447      	strb	r7, [r0, r1]
					++releaseCounter[i];
 800cfba:	00a8      	lsls	r0, r5, #2
 800cfbc:	1809      	adds	r1, r1, r0
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	650b      	str	r3, [r1, #80]	; 0x50
 800cfc2:	e7ce      	b.n	800cf62 <CheckAttachedButtons+0x1d6>
						button[i].state = CLICKED;// Record a single button click event
 800cfc4:	00eb      	lsls	r3, r5, #3
 800cfc6:	195b      	adds	r3, r3, r5
 800cfc8:	4a52      	ldr	r2, [pc, #328]	; (800d114 <CheckAttachedButtons+0x388>)
 800cfca:	2105      	movs	r1, #5
 800cfcc:	5499      	strb	r1, [r3, r2]
						clicked = 2;			// Prepare for a double click
 800cfce:	4a53      	ldr	r2, [pc, #332]	; (800d11c <CheckAttachedButtons+0x390>)
 800cfd0:	2365      	movs	r3, #101	; 0x65
 800cfd2:	3903      	subs	r1, #3
 800cfd4:	54d1      	strb	r1, [r2, r3]
 800cfd6:	e004      	b.n	800cfe2 <CheckAttachedButtons+0x256>
						&& releaseCounter[i] < 0xFFFF) {
 800cfd8:	3bf5      	subs	r3, #245	; 0xf5
 800cfda:	3bff      	subs	r3, #255	; 0xff
				} else if (releaseCounter[i] >= 500
 800cfdc:	4a51      	ldr	r2, [pc, #324]	; (800d124 <CheckAttachedButtons+0x398>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d90b      	bls.n	800cffa <CheckAttachedButtons+0x26e>
			switch (button[i].state) {
 800cfe2:	00eb      	lsls	r3, r5, #3
 800cfe4:	195b      	adds	r3, r3, r5
 800cfe6:	4a4b      	ldr	r2, [pc, #300]	; (800d114 <CheckAttachedButtons+0x388>)
 800cfe8:	5c9b      	ldrb	r3, [r3, r2]
 800cfea:	3b05      	subs	r3, #5
 800cfec:	b2da      	uxtb	r2, r3
 800cfee:	2a09      	cmp	r2, #9
 800cff0:	d80f      	bhi.n	800d012 <CheckAttachedButtons+0x286>
 800cff2:	0093      	lsls	r3, r2, #2
 800cff4:	4a4c      	ldr	r2, [pc, #304]	; (800d128 <CheckAttachedButtons+0x39c>)
 800cff6:	58d3      	ldr	r3, [r2, r3]
 800cff8:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 800cffa:	0020      	movs	r0, r4
 800cffc:	f7ff f904 	bl	800c208 <CheckForTimedButtonRelease>
 800d000:	e7ef      	b.n	800cfe2 <CheckAttachedButtons+0x256>
				buttonPressedCallback(i);
 800d002:	0020      	movs	r0, r4
 800d004:	f7ff f8c8 	bl	800c198 <buttonPressedCallback>
				button[i].state = NONE;
 800d008:	00eb      	lsls	r3, r5, #3
 800d00a:	195d      	adds	r5, r3, r5
 800d00c:	4b41      	ldr	r3, [pc, #260]	; (800d114 <CheckAttachedButtons+0x388>)
 800d00e:	2200      	movs	r2, #0
 800d010:	54ea      	strb	r2, [r5, r3]
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800d012:	3401      	adds	r4, #1
 800d014:	b2e4      	uxtb	r4, r4
 800d016:	2c05      	cmp	r4, #5
 800d018:	d900      	bls.n	800d01c <CheckAttachedButtons+0x290>
 800d01a:	e10a      	b.n	800d232 <CheckAttachedButtons+0x4a6>
		if (button[i].type)			// Only check defined butons
 800d01c:	0025      	movs	r5, r4
 800d01e:	00e2      	lsls	r2, r4, #3
 800d020:	1912      	adds	r2, r2, r4
 800d022:	4b3c      	ldr	r3, [pc, #240]	; (800d114 <CheckAttachedButtons+0x388>)
 800d024:	189b      	adds	r3, r3, r2
 800d026:	785b      	ldrb	r3, [r3, #1]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d0f2      	beq.n	800d012 <CheckAttachedButtons+0x286>
			if (delayButtonStateReset == false)
 800d02c:	4a3b      	ldr	r2, [pc, #236]	; (800d11c <CheckAttachedButtons+0x390>)
 800d02e:	2364      	movs	r3, #100	; 0x64
 800d030:	5cd3      	ldrb	r3, [r2, r3]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d104      	bne.n	800d040 <CheckAttachedButtons+0x2b4>
				button[i].state = NONE;
 800d036:	00e3      	lsls	r3, r4, #3
 800d038:	191b      	adds	r3, r3, r4
 800d03a:	4a36      	ldr	r2, [pc, #216]	; (800d114 <CheckAttachedButtons+0x388>)
 800d03c:	2100      	movs	r1, #0
 800d03e:	5499      	strb	r1, [r3, r2]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800d040:	230e      	movs	r3, #14
 800d042:	446b      	add	r3, sp
 800d044:	4699      	mov	r9, r3
 800d046:	af03      	add	r7, sp, #12
 800d048:	9700      	str	r7, [sp, #0]
 800d04a:	ab04      	add	r3, sp, #16
 800d04c:	464a      	mov	r2, r9
 800d04e:	a905      	add	r1, sp, #20
 800d050:	0020      	movs	r0, r4
 800d052:	f7fe ffcd 	bl	800bff0 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800d056:	464b      	mov	r3, r9
 800d058:	8819      	ldrh	r1, [r3, #0]
 800d05a:	2200      	movs	r2, #0
 800d05c:	9805      	ldr	r0, [sp, #20]
 800d05e:	f004 fb08 	bl	8011672 <HAL_GPIO_WritePin>
			Delay_us(10);
 800d062:	200a      	movs	r0, #10
 800d064:	f000 fcba 	bl	800d9dc <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800d068:	8839      	ldrh	r1, [r7, #0]
 800d06a:	9804      	ldr	r0, [sp, #16]
 800d06c:	f004 fafa 	bl	8011664 <HAL_GPIO_ReadPin>
 800d070:	2800      	cmp	r0, #0
 800d072:	d100      	bne.n	800d076 <CheckAttachedButtons+0x2ea>
 800d074:	e694      	b.n	800cda0 <CheckAttachedButtons+0x14>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800d076:	230e      	movs	r3, #14
 800d078:	446b      	add	r3, sp
 800d07a:	8819      	ldrh	r1, [r3, #0]
 800d07c:	2200      	movs	r2, #0
 800d07e:	9805      	ldr	r0, [sp, #20]
 800d080:	f004 faf7 	bl	8011672 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800d084:	00ea      	lsls	r2, r5, #3
 800d086:	1952      	adds	r2, r2, r5
 800d088:	4b22      	ldr	r3, [pc, #136]	; (800d114 <CheckAttachedButtons+0x388>)
 800d08a:	189b      	adds	r3, r3, r2
 800d08c:	785b      	ldrb	r3, [r3, #1]
 800d08e:	2b03      	cmp	r3, #3
 800d090:	d100      	bne.n	800d094 <CheckAttachedButtons+0x308>
 800d092:	e6d5      	b.n	800ce40 <CheckAttachedButtons+0xb4>
 800d094:	d900      	bls.n	800d098 <CheckAttachedButtons+0x30c>
 800d096:	e692      	b.n	800cdbe <CheckAttachedButtons+0x32>
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d100      	bne.n	800d09e <CheckAttachedButtons+0x312>
 800d09c:	e698      	b.n	800cdd0 <CheckAttachedButtons+0x44>
 800d09e:	2b02      	cmp	r3, #2
 800d0a0:	d000      	beq.n	800d0a4 <CheckAttachedButtons+0x318>
 800d0a2:	e69a      	b.n	800cdda <CheckAttachedButtons+0x4e>
				if (connected == GPIO_PIN_SET)
 800d0a4:	4643      	mov	r3, r8
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d100      	bne.n	800d0ac <CheckAttachedButtons+0x320>
 800d0aa:	e6e4      	b.n	800ce76 <CheckAttachedButtons+0xea>
				else if (connected == GPIO_PIN_RESET)
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d000      	beq.n	800d0b2 <CheckAttachedButtons+0x326>
 800d0b0:	e693      	b.n	800cdda <CheckAttachedButtons+0x4e>
					state = OPEN;
 800d0b2:	2603      	movs	r6, #3
 800d0b4:	e693      	b.n	800cdde <CheckAttachedButtons+0x52>
				buttonReleasedCallback(i);
 800d0b6:	0020      	movs	r0, r4
 800d0b8:	f7ff fe62 	bl	800cd80 <buttonReleasedCallback>
				button[i].state = NONE;
 800d0bc:	00eb      	lsls	r3, r5, #3
 800d0be:	195d      	adds	r5, r3, r5
 800d0c0:	4b14      	ldr	r3, [pc, #80]	; (800d114 <CheckAttachedButtons+0x388>)
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	54ea      	strb	r2, [r5, r3]
				break;
 800d0c6:	e7a4      	b.n	800d012 <CheckAttachedButtons+0x286>
				if (!delayButtonStateReset
 800d0c8:	4a14      	ldr	r2, [pc, #80]	; (800d11c <CheckAttachedButtons+0x390>)
 800d0ca:	2364      	movs	r3, #100	; 0x64
 800d0cc:	5cd3      	ldrb	r3, [r2, r3]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d19f      	bne.n	800d012 <CheckAttachedButtons+0x286>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800d0d2:	00eb      	lsls	r3, r5, #3
 800d0d4:	195b      	adds	r3, r3, r5
 800d0d6:	4d0f      	ldr	r5, [pc, #60]	; (800d114 <CheckAttachedButtons+0x388>)
 800d0d8:	18ed      	adds	r5, r5, r3
 800d0da:	7a2b      	ldrb	r3, [r5, #8]
 800d0dc:	07db      	lsls	r3, r3, #31
 800d0de:	d598      	bpl.n	800d012 <CheckAttachedButtons+0x286>
					delayButtonStateReset = true;
 800d0e0:	2364      	movs	r3, #100	; 0x64
 800d0e2:	2101      	movs	r1, #1
 800d0e4:	54d1      	strb	r1, [r2, r3]
					buttonClickedCallback(i);
 800d0e6:	0020      	movs	r0, r4
 800d0e8:	f7ff fe4b 	bl	800cd82 <buttonClickedCallback>
 800d0ec:	e791      	b.n	800d012 <CheckAttachedButtons+0x286>
				if (!delayButtonStateReset
 800d0ee:	4a0b      	ldr	r2, [pc, #44]	; (800d11c <CheckAttachedButtons+0x390>)
 800d0f0:	2364      	movs	r3, #100	; 0x64
 800d0f2:	5cd3      	ldrb	r3, [r2, r3]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d18c      	bne.n	800d012 <CheckAttachedButtons+0x286>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800d0f8:	00eb      	lsls	r3, r5, #3
 800d0fa:	195b      	adds	r3, r3, r5
 800d0fc:	4d05      	ldr	r5, [pc, #20]	; (800d114 <CheckAttachedButtons+0x388>)
 800d0fe:	18ed      	adds	r5, r5, r3
 800d100:	7a2b      	ldrb	r3, [r5, #8]
 800d102:	079b      	lsls	r3, r3, #30
 800d104:	d585      	bpl.n	800d012 <CheckAttachedButtons+0x286>
					delayButtonStateReset = true;
 800d106:	2364      	movs	r3, #100	; 0x64
 800d108:	2101      	movs	r1, #1
 800d10a:	54d1      	strb	r1, [r2, r3]
					buttonDblClickedCallback(i);
 800d10c:	0020      	movs	r0, r4
 800d10e:	f7ff fe39 	bl	800cd84 <buttonDblClickedCallback>
 800d112:	e77e      	b.n	800d012 <CheckAttachedButtons+0x286>
 800d114:	2000299c 	.word	0x2000299c
 800d118:	20000b4c 	.word	0x20000b4c
 800d11c:	20002a1c 	.word	0x20002a1c
 800d120:	0000fffe 	.word	0x0000fffe
 800d124:	0000fe0a 	.word	0x0000fe0a
 800d128:	08019c88 	.word	0x08019c88
				if (!delayButtonStateReset
 800d12c:	4a43      	ldr	r2, [pc, #268]	; (800d23c <CheckAttachedButtons+0x4b0>)
 800d12e:	2364      	movs	r3, #100	; 0x64
 800d130:	5cd3      	ldrb	r3, [r2, r3]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d000      	beq.n	800d138 <CheckAttachedButtons+0x3ac>
 800d136:	e76c      	b.n	800d012 <CheckAttachedButtons+0x286>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800d138:	00eb      	lsls	r3, r5, #3
 800d13a:	195b      	adds	r3, r3, r5
 800d13c:	4d40      	ldr	r5, [pc, #256]	; (800d240 <CheckAttachedButtons+0x4b4>)
 800d13e:	18ed      	adds	r5, r5, r3
 800d140:	7a2b      	ldrb	r3, [r5, #8]
 800d142:	075b      	lsls	r3, r3, #29
 800d144:	d400      	bmi.n	800d148 <CheckAttachedButtons+0x3bc>
 800d146:	e764      	b.n	800d012 <CheckAttachedButtons+0x286>
					delayButtonStateReset = true;
 800d148:	2364      	movs	r3, #100	; 0x64
 800d14a:	2101      	movs	r1, #1
 800d14c:	54d1      	strb	r1, [r2, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800d14e:	0020      	movs	r0, r4
 800d150:	f7ff fe19 	bl	800cd86 <buttonPressedForXCallback>
 800d154:	e75d      	b.n	800d012 <CheckAttachedButtons+0x286>
				if (!delayButtonStateReset
 800d156:	4a39      	ldr	r2, [pc, #228]	; (800d23c <CheckAttachedButtons+0x4b0>)
 800d158:	2364      	movs	r3, #100	; 0x64
 800d15a:	5cd3      	ldrb	r3, [r2, r3]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d000      	beq.n	800d162 <CheckAttachedButtons+0x3d6>
 800d160:	e757      	b.n	800d012 <CheckAttachedButtons+0x286>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800d162:	00eb      	lsls	r3, r5, #3
 800d164:	195b      	adds	r3, r3, r5
 800d166:	4d36      	ldr	r5, [pc, #216]	; (800d240 <CheckAttachedButtons+0x4b4>)
 800d168:	18ed      	adds	r5, r5, r3
 800d16a:	7a2b      	ldrb	r3, [r5, #8]
 800d16c:	071b      	lsls	r3, r3, #28
 800d16e:	d400      	bmi.n	800d172 <CheckAttachedButtons+0x3e6>
 800d170:	e74f      	b.n	800d012 <CheckAttachedButtons+0x286>
					delayButtonStateReset = true;
 800d172:	2364      	movs	r3, #100	; 0x64
 800d174:	2101      	movs	r1, #1
 800d176:	54d1      	strb	r1, [r2, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800d178:	3101      	adds	r1, #1
 800d17a:	0020      	movs	r0, r4
 800d17c:	f7ff fe03 	bl	800cd86 <buttonPressedForXCallback>
 800d180:	e747      	b.n	800d012 <CheckAttachedButtons+0x286>
				if (!delayButtonStateReset
 800d182:	4a2e      	ldr	r2, [pc, #184]	; (800d23c <CheckAttachedButtons+0x4b0>)
 800d184:	2364      	movs	r3, #100	; 0x64
 800d186:	5cd3      	ldrb	r3, [r2, r3]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d000      	beq.n	800d18e <CheckAttachedButtons+0x402>
 800d18c:	e741      	b.n	800d012 <CheckAttachedButtons+0x286>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800d18e:	00eb      	lsls	r3, r5, #3
 800d190:	195b      	adds	r3, r3, r5
 800d192:	4d2b      	ldr	r5, [pc, #172]	; (800d240 <CheckAttachedButtons+0x4b4>)
 800d194:	18ed      	adds	r5, r5, r3
 800d196:	7a2b      	ldrb	r3, [r5, #8]
 800d198:	06db      	lsls	r3, r3, #27
 800d19a:	d400      	bmi.n	800d19e <CheckAttachedButtons+0x412>
 800d19c:	e739      	b.n	800d012 <CheckAttachedButtons+0x286>
					delayButtonStateReset = true;
 800d19e:	2364      	movs	r3, #100	; 0x64
 800d1a0:	2101      	movs	r1, #1
 800d1a2:	54d1      	strb	r1, [r2, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800d1a4:	3102      	adds	r1, #2
 800d1a6:	0020      	movs	r0, r4
 800d1a8:	f7ff fded 	bl	800cd86 <buttonPressedForXCallback>
 800d1ac:	e731      	b.n	800d012 <CheckAttachedButtons+0x286>
				if (!delayButtonStateReset
 800d1ae:	4a23      	ldr	r2, [pc, #140]	; (800d23c <CheckAttachedButtons+0x4b0>)
 800d1b0:	2364      	movs	r3, #100	; 0x64
 800d1b2:	5cd3      	ldrb	r3, [r2, r3]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d000      	beq.n	800d1ba <CheckAttachedButtons+0x42e>
 800d1b8:	e72b      	b.n	800d012 <CheckAttachedButtons+0x286>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800d1ba:	00eb      	lsls	r3, r5, #3
 800d1bc:	195b      	adds	r3, r3, r5
 800d1be:	4d20      	ldr	r5, [pc, #128]	; (800d240 <CheckAttachedButtons+0x4b4>)
 800d1c0:	18ed      	adds	r5, r5, r3
 800d1c2:	7a2b      	ldrb	r3, [r5, #8]
 800d1c4:	069b      	lsls	r3, r3, #26
 800d1c6:	d400      	bmi.n	800d1ca <CheckAttachedButtons+0x43e>
 800d1c8:	e723      	b.n	800d012 <CheckAttachedButtons+0x286>
					delayButtonStateReset = true;
 800d1ca:	2364      	movs	r3, #100	; 0x64
 800d1cc:	2101      	movs	r1, #1
 800d1ce:	54d1      	strb	r1, [r2, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800d1d0:	0020      	movs	r0, r4
 800d1d2:	f7ff fdd9 	bl	800cd88 <buttonReleasedForYCallback>
 800d1d6:	e71c      	b.n	800d012 <CheckAttachedButtons+0x286>
				if (!delayButtonStateReset
 800d1d8:	4a18      	ldr	r2, [pc, #96]	; (800d23c <CheckAttachedButtons+0x4b0>)
 800d1da:	2364      	movs	r3, #100	; 0x64
 800d1dc:	5cd3      	ldrb	r3, [r2, r3]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d000      	beq.n	800d1e4 <CheckAttachedButtons+0x458>
 800d1e2:	e716      	b.n	800d012 <CheckAttachedButtons+0x286>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800d1e4:	00eb      	lsls	r3, r5, #3
 800d1e6:	195b      	adds	r3, r3, r5
 800d1e8:	4d15      	ldr	r5, [pc, #84]	; (800d240 <CheckAttachedButtons+0x4b4>)
 800d1ea:	18ed      	adds	r5, r5, r3
 800d1ec:	7a2b      	ldrb	r3, [r5, #8]
 800d1ee:	065b      	lsls	r3, r3, #25
 800d1f0:	d400      	bmi.n	800d1f4 <CheckAttachedButtons+0x468>
 800d1f2:	e70e      	b.n	800d012 <CheckAttachedButtons+0x286>
					delayButtonStateReset = true;
 800d1f4:	2364      	movs	r3, #100	; 0x64
 800d1f6:	2101      	movs	r1, #1
 800d1f8:	54d1      	strb	r1, [r2, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800d1fa:	3101      	adds	r1, #1
 800d1fc:	0020      	movs	r0, r4
 800d1fe:	f7ff fdc3 	bl	800cd88 <buttonReleasedForYCallback>
 800d202:	e706      	b.n	800d012 <CheckAttachedButtons+0x286>
				if (!delayButtonStateReset
 800d204:	4a0d      	ldr	r2, [pc, #52]	; (800d23c <CheckAttachedButtons+0x4b0>)
 800d206:	2364      	movs	r3, #100	; 0x64
 800d208:	5cd3      	ldrb	r3, [r2, r3]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d000      	beq.n	800d210 <CheckAttachedButtons+0x484>
 800d20e:	e700      	b.n	800d012 <CheckAttachedButtons+0x286>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800d210:	00eb      	lsls	r3, r5, #3
 800d212:	195b      	adds	r3, r3, r5
 800d214:	4d0a      	ldr	r5, [pc, #40]	; (800d240 <CheckAttachedButtons+0x4b4>)
 800d216:	18ed      	adds	r5, r5, r3
 800d218:	2308      	movs	r3, #8
 800d21a:	56eb      	ldrsb	r3, [r5, r3]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	db00      	blt.n	800d222 <CheckAttachedButtons+0x496>
 800d220:	e6f7      	b.n	800d012 <CheckAttachedButtons+0x286>
					delayButtonStateReset = true;
 800d222:	2364      	movs	r3, #100	; 0x64
 800d224:	2101      	movs	r1, #1
 800d226:	54d1      	strb	r1, [r2, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800d228:	3102      	adds	r1, #2
 800d22a:	0020      	movs	r0, r4
 800d22c:	f7ff fdac 	bl	800cd88 <buttonReleasedForYCallback>
 800d230:	e6ef      	b.n	800d012 <CheckAttachedButtons+0x286>
}
 800d232:	b007      	add	sp, #28
 800d234:	bcc0      	pop	{r6, r7}
 800d236:	46b9      	mov	r9, r7
 800d238:	46b0      	mov	r8, r6
 800d23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d23c:	20002a1c 	.word	0x20002a1c
 800d240:	2000299c 	.word	0x2000299c

0800d244 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800d244:	f3bf 8f4f 	dsb	sy
 800d248:	4b03      	ldr	r3, [pc, #12]	; (800d258 <NVIC_SystemReset+0x14>)
 800d24a:	4a04      	ldr	r2, [pc, #16]	; (800d25c <NVIC_SystemReset+0x18>)
 800d24c:	60da      	str	r2, [r3, #12]
 800d24e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800d252:	46c0      	nop			; (mov r8, r8)
 800d254:	e7fd      	b.n	800d252 <NVIC_SystemReset+0xe>
 800d256:	46c0      	nop			; (mov r8, r8)
 800d258:	e000ed00 	.word	0xe000ed00
 800d25c:	05fa0004 	.word	0x05fa0004

0800d260 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d260:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d262:	f002 fe37 	bl	800fed4 <HAL_IncTick>
  osSystickHandler();  
 800d266:	f000 ffbd 	bl	800e1e4 <osSystickHandler>

}
 800d26a:	bd10      	pop	{r4, pc}

0800d26c <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800d26c:	b530      	push	{r4, r5, lr}
 800d26e:	b083      	sub	sp, #12
	/* Loop here */
	uint8_t* error_message = "HardFault Error\r\n";
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800d270:	4d09      	ldr	r5, [pc, #36]	; (800d298 <HardFault_Handler+0x2c>)
 800d272:	7828      	ldrb	r0, [r5, #0]
 800d274:	24ff      	movs	r4, #255	; 0xff
 800d276:	9400      	str	r4, [sp, #0]
 800d278:	23ff      	movs	r3, #255	; 0xff
 800d27a:	2211      	movs	r2, #17
 800d27c:	4907      	ldr	r1, [pc, #28]	; (800d29c <HardFault_Handler+0x30>)
 800d27e:	f000 fdad 	bl	800dddc <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d282:	4b07      	ldr	r3, [pc, #28]	; (800d2a0 <HardFault_Handler+0x34>)
 800d284:	6819      	ldr	r1, [r3, #0]
 800d286:	7828      	ldrb	r0, [r5, #0]
 800d288:	9400      	str	r4, [sp, #0]
 800d28a:	23ff      	movs	r3, #255	; 0xff
 800d28c:	220f      	movs	r2, #15
 800d28e:	f000 fda5 	bl	800dddc <writePxMutex>
	NVIC_SystemReset();
 800d292:	f7ff ffd7 	bl	800d244 <NVIC_SystemReset>
 800d296:	46c0      	nop			; (mov r8, r8)
 800d298:	20000c58 	.word	0x20000c58
 800d29c:	0801c444 	.word	0x0801c444
 800d2a0:	200000a0 	.word	0x200000a0

0800d2a4 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d2a4:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d2a6:	4802      	ldr	r0, [pc, #8]	; (800d2b0 <USART1_IRQHandler+0xc>)
 800d2a8:	f005 fe25 	bl	8012ef6 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d2ac:	bd10      	pop	{r4, pc}
 800d2ae:	46c0      	nop			; (mov r8, r8)
 800d2b0:	200021d8 	.word	0x200021d8

0800d2b4 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d2b4:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d2b6:	4802      	ldr	r0, [pc, #8]	; (800d2c0 <USART2_IRQHandler+0xc>)
 800d2b8:	f005 fe1d 	bl	8012ef6 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d2bc:	bd10      	pop	{r4, pc}
 800d2be:	46c0      	nop			; (mov r8, r8)
 800d2c0:	20002514 	.word	0x20002514

0800d2c4 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d2c4:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d2c6:	4806      	ldr	r0, [pc, #24]	; (800d2e0 <USART3_8_IRQHandler+0x1c>)
 800d2c8:	f005 fe15 	bl	8012ef6 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800d2cc:	4805      	ldr	r0, [pc, #20]	; (800d2e4 <USART3_8_IRQHandler+0x20>)
 800d2ce:	f005 fe12 	bl	8012ef6 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800d2d2:	4805      	ldr	r0, [pc, #20]	; (800d2e8 <USART3_8_IRQHandler+0x24>)
 800d2d4:	f005 fe0f 	bl	8012ef6 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d2d8:	4804      	ldr	r0, [pc, #16]	; (800d2ec <USART3_8_IRQHandler+0x28>)
 800d2da:	f005 fe0c 	bl	8012ef6 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d2de:	bd10      	pop	{r4, pc}
 800d2e0:	200024a4 	.word	0x200024a4
 800d2e4:	20002434 	.word	0x20002434
 800d2e8:	200023c4 	.word	0x200023c4
 800d2ec:	20002354 	.word	0x20002354

0800d2f0 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800d2f0:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800d2f2:	2001      	movs	r0, #1
 800d2f4:	f7fa f9fc 	bl	80076f0 <DMA_IRQHandler>
	
}
 800d2f8:	bd10      	pop	{r4, pc}
	...

0800d2fc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800d2fc:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d2fe:	4b0c      	ldr	r3, [pc, #48]	; (800d330 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	06db      	lsls	r3, r3, #27
 800d304:	d40b      	bmi.n	800d31e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800d306:	4b0b      	ldr	r3, [pc, #44]	; (800d334 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	05db      	lsls	r3, r3, #23
 800d30c:	d40b      	bmi.n	800d326 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800d30e:	4b09      	ldr	r3, [pc, #36]	; (800d334 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	06db      	lsls	r3, r3, #27
 800d314:	d506      	bpl.n	800d324 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800d316:	4808      	ldr	r0, [pc, #32]	; (800d338 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800d318:	f003 faf6 	bl	8010908 <HAL_DMA_IRQHandler>
	}
}
 800d31c:	e002      	b.n	800d324 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		DMA_IRQHandler(P3);
 800d31e:	2003      	movs	r0, #3
 800d320:	f7fa f9e6 	bl	80076f0 <DMA_IRQHandler>
}
 800d324:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800d326:	2002      	movs	r0, #2
 800d328:	f7fa f9e2 	bl	80076f0 <DMA_IRQHandler>
 800d32c:	e7fa      	b.n	800d324 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
 800d32e:	46c0      	nop			; (mov r8, r8)
 800d330:	40020400 	.word	0x40020400
 800d334:	40020000 	.word	0x40020000
 800d338:	200027a0 	.word	0x200027a0

0800d33c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800d33c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800d33e:	4b10      	ldr	r3, [pc, #64]	; (800d380 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	05db      	lsls	r3, r3, #23
 800d344:	d40f      	bmi.n	800d366 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2a>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d346:	4b0f      	ldr	r3, [pc, #60]	; (800d384 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x48>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	03db      	lsls	r3, r3, #15
 800d34c:	d40f      	bmi.n	800d36e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);

	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800d34e:	4b0d      	ldr	r3, [pc, #52]	; (800d384 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x48>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	04db      	lsls	r3, r3, #19
 800d354:	d40f      	bmi.n	800d376 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800d356:	4b0b      	ldr	r3, [pc, #44]	; (800d384 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x48>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	01db      	lsls	r3, r3, #7
 800d35c:	d506      	bpl.n	800d36c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x30>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800d35e:	480a      	ldr	r0, [pc, #40]	; (800d388 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
 800d360:	f003 fad2 	bl	8010908 <HAL_DMA_IRQHandler>
	}
}
 800d364:	e002      	b.n	800d36c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x30>
		DMA_IRQHandler(P5);
 800d366:	2005      	movs	r0, #5
 800d368:	f7fa f9c2 	bl	80076f0 <DMA_IRQHandler>
}
 800d36c:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800d36e:	2004      	movs	r0, #4
 800d370:	f7fa f9be 	bl	80076f0 <DMA_IRQHandler>
 800d374:	e7fa      	b.n	800d36c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x30>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800d376:	4805      	ldr	r0, [pc, #20]	; (800d38c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800d378:	f003 fac6 	bl	8010908 <HAL_DMA_IRQHandler>
 800d37c:	e7f6      	b.n	800d36c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x30>
 800d37e:	46c0      	nop			; (mov r8, r8)
 800d380:	40020400 	.word	0x40020400
 800d384:	40020000 	.word	0x40020000
 800d388:	20002810 	.word	0x20002810
 800d38c:	200027d8 	.word	0x200027d8

0800d390 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d390:	b510      	push	{r4, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d396:	2300      	movs	r3, #0
 800d398:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800d39a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d001      	beq.n	800d3a4 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800d3a0:	f7fd fcf6 	bl	800ad90 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800d3a4:	0020      	movs	r0, r4
 800d3a6:	f7fd fb2b 	bl	800aa00 <GetPort>
 800d3aa:	0080      	lsls	r0, r0, #2
 800d3ac:	4b03      	ldr	r3, [pc, #12]	; (800d3bc <HAL_UART_TxCpltCallback+0x2c>)
 800d3ae:	58c0      	ldr	r0, [r0, r3]
 800d3b0:	a901      	add	r1, sp, #4
 800d3b2:	f001 fa5f 	bl	800e874 <xQueueGiveFromISR>
}
 800d3b6:	b002      	add	sp, #8
 800d3b8:	bd10      	pop	{r4, pc}
 800d3ba:	46c0      	nop			; (mov r8, r8)
 800d3bc:	20001e48 	.word	0x20001e48

0800d3c0 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d3c0:	b510      	push	{r4, lr}
 800d3c2:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800d3c4:	2369      	movs	r3, #105	; 0x69
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800d3ca:	f7fd fb19 	bl	800aa00 <GetPort>
	if (portStatus[port] == STREAM) {
 800d3ce:	4b0b      	ldr	r3, [pc, #44]	; (800d3fc <HAL_UART_ErrorCallback+0x3c>)
 800d3d0:	5c1b      	ldrb	r3, [r3, r0]
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	d004      	beq.n	800d3e0 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800d3d6:	3801      	subs	r0, #1
 800d3d8:	4b09      	ldr	r3, [pc, #36]	; (800d400 <HAL_UART_ErrorCallback+0x40>)
 800d3da:	2201      	movs	r2, #1
 800d3dc:	541a      	strb	r2, [r3, r0]
	}	
}
 800d3de:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800d3e0:	3801      	subs	r0, #1
 800d3e2:	0083      	lsls	r3, r0, #2
 800d3e4:	4a07      	ldr	r2, [pc, #28]	; (800d404 <HAL_UART_ErrorCallback+0x44>)
 800d3e6:	589b      	ldr	r3, [r3, r2]
 800d3e8:	6819      	ldr	r1, [r3, #0]
 800d3ea:	3128      	adds	r1, #40	; 0x28
 800d3ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	685a      	ldr	r2, [r3, #4]
 800d3f2:	b292      	uxth	r2, r2
 800d3f4:	0020      	movs	r0, r4
 800d3f6:	f005 f96d 	bl	80126d4 <HAL_UART_Receive_DMA>
 800d3fa:	e7f0      	b.n	800d3de <HAL_UART_ErrorCallback+0x1e>
 800d3fc:	20000c5c 	.word	0x20000c5c
 800d400:	200019f8 	.word	0x200019f8
 800d404:	200019bc 	.word	0x200019bc

0800d408 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800d408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d40a:	46de      	mov	lr, fp
 800d40c:	4657      	mov	r7, sl
 800d40e:	464e      	mov	r6, r9
 800d410:	4645      	mov	r5, r8
 800d412:	b5e0      	push	{r5, r6, r7, lr}
 800d414:	b083      	sub	sp, #12
 800d416:	0004      	movs	r4, r0
	uint8_t port_number = GetPort(huart);
 800d418:	f7fd faf2 	bl	800aa00 <GetPort>
	uint8_t port_index = port_number - 1;
 800d41c:	1e42      	subs	r2, r0, #1
 800d41e:	b2d2      	uxtb	r2, r2
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800d420:	4b68      	ldr	r3, [pc, #416]	; (800d5c4 <HAL_UART_RxCpltCallback+0x1bc>)
 800d422:	5c99      	ldrb	r1, [r3, r2]
 800d424:	290d      	cmp	r1, #13
 800d426:	d030      	beq.n	800d48a <HAL_UART_RxCpltCallback+0x82>

		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
		Activate_CLI_For_First_Time_Flag = 1;

	}
	else if(portStatus[port_number] == CLI)
 800d428:	4b67      	ldr	r3, [pc, #412]	; (800d5c8 <HAL_UART_RxCpltCallback+0x1c0>)
 800d42a:	5c1b      	ldrb	r3, [r3, r0]
 800d42c:	2b03      	cmp	r3, #3
 800d42e:	d050      	beq.n	800d4d2 <HAL_UART_RxCpltCallback+0xca>
	{
		Read_In_CLI_Task_Flag = 1;
	}

	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800d430:	2948      	cmp	r1, #72	; 0x48
 800d432:	d062      	beq.n	800d4fa <HAL_UART_RxCpltCallback+0xf2>
	{
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
	}

	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800d434:	295a      	cmp	r1, #90	; 0x5a
 800d436:	d066      	beq.n	800d506 <HAL_UART_RxCpltCallback+0xfe>
	{
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
	}

	else if(Rx_Data[port_index] != 'Z' && portStatus[port_number] == H_Status)
 800d438:	295a      	cmp	r1, #90	; 0x5a
 800d43a:	d001      	beq.n	800d440 <HAL_UART_RxCpltCallback+0x38>
 800d43c:	2b07      	cmp	r3, #7
 800d43e:	d068      	beq.n	800d512 <HAL_UART_RxCpltCallback+0x10a>
	{
		portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
	}

	else if(portStatus[port_number] == Z_Status)
 800d440:	2b08      	cmp	r3, #8
 800d442:	d06a      	beq.n	800d51a <HAL_UART_RxCpltCallback+0x112>
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
		temp_index[port_index] = 3;
		temp_length[port_index] = Rx_Data[port_index] + 1;
	}

	else if(portStatus[port_number] == MSG)
 800d444:	2b01      	cmp	r3, #1
 800d446:	d147      	bne.n	800d4d8 <HAL_UART_RxCpltCallback+0xd0>
	{
		if(temp_length[port_index] > 1)
 800d448:	4b60      	ldr	r3, [pc, #384]	; (800d5cc <HAL_UART_RxCpltCallback+0x1c4>)
 800d44a:	189b      	adds	r3, r3, r2
 800d44c:	7a1b      	ldrb	r3, [r3, #8]
 800d44e:	469b      	mov	fp, r3
 800d450:	2b01      	cmp	r3, #1
 800d452:	d800      	bhi.n	800d456 <HAL_UART_RxCpltCallback+0x4e>
 800d454:	e079      	b.n	800d54a <HAL_UART_RxCpltCallback+0x142>
		{
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800d456:	4b5e      	ldr	r3, [pc, #376]	; (800d5d0 <HAL_UART_RxCpltCallback+0x1c8>)
 800d458:	5c9e      	ldrb	r6, [r3, r2]
 800d45a:	4b5c      	ldr	r3, [pc, #368]	; (800d5cc <HAL_UART_RxCpltCallback+0x1c4>)
 800d45c:	5c9f      	ldrb	r7, [r3, r2]
 800d45e:	00f0      	lsls	r0, r6, #3
 800d460:	1b80      	subs	r0, r0, r6
 800d462:	00c0      	lsls	r0, r0, #3
 800d464:	0096      	lsls	r6, r2, #2
 800d466:	46b4      	mov	ip, r6
 800d468:	4494      	add	ip, r2
 800d46a:	4666      	mov	r6, ip
 800d46c:	00f6      	lsls	r6, r6, #3
 800d46e:	4665      	mov	r5, ip
 800d470:	1b76      	subs	r6, r6, r5
 800d472:	00f6      	lsls	r6, r6, #3
 800d474:	1980      	adds	r0, r0, r6
 800d476:	4e57      	ldr	r6, [pc, #348]	; (800d5d4 <HAL_UART_RxCpltCallback+0x1cc>)
 800d478:	1830      	adds	r0, r6, r0
 800d47a:	55c1      	strb	r1, [r0, r7]
			temp_index[port_index]++;
 800d47c:	3701      	adds	r7, #1
 800d47e:	549f      	strb	r7, [r3, r2]
			temp_length[port_index]--;
 800d480:	189b      	adds	r3, r3, r2
 800d482:	465d      	mov	r5, fp
 800d484:	3d01      	subs	r5, #1
 800d486:	721d      	strb	r5, [r3, #8]
 800d488:	e026      	b.n	800d4d8 <HAL_UART_RxCpltCallback+0xd0>
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800d48a:	4b4f      	ldr	r3, [pc, #316]	; (800d5c8 <HAL_UART_RxCpltCallback+0x1c0>)
 800d48c:	5c1b      	ldrb	r3, [r3, r0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d1ca      	bne.n	800d428 <HAL_UART_RxCpltCallback+0x20>
		for(int i=0;i<=NumOfPorts;i++) portStatus[i] = FREE; // Free all ports
 800d492:	2300      	movs	r3, #0
 800d494:	e003      	b.n	800d49e <HAL_UART_RxCpltCallback+0x96>
 800d496:	4a4c      	ldr	r2, [pc, #304]	; (800d5c8 <HAL_UART_RxCpltCallback+0x1c0>)
 800d498:	2100      	movs	r1, #0
 800d49a:	54d1      	strb	r1, [r2, r3]
 800d49c:	3301      	adds	r3, #1
 800d49e:	2b05      	cmp	r3, #5
 800d4a0:	ddf9      	ble.n	800d496 <HAL_UART_RxCpltCallback+0x8e>
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800d4a2:	4b49      	ldr	r3, [pc, #292]	; (800d5c8 <HAL_UART_RxCpltCallback+0x1c0>)
 800d4a4:	2203      	movs	r2, #3
 800d4a6:	541a      	strb	r2, [r3, r0]
		PcPort = port_number;
 800d4a8:	4b4b      	ldr	r3, [pc, #300]	; (800d5d8 <HAL_UART_RxCpltCallback+0x1d0>)
 800d4aa:	7018      	strb	r0, [r3, #0]
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800d4ac:	4b4b      	ldr	r3, [pc, #300]	; (800d5dc <HAL_UART_RxCpltCallback+0x1d4>)
 800d4ae:	6818      	ldr	r0, [r3, #0]
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	3a01      	subs	r2, #1
 800d4b4:	2100      	movs	r1, #0
 800d4b6:	f002 f94b 	bl	800f750 <xTaskGenericNotify>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800d4ba:	4b49      	ldr	r3, [pc, #292]	; (800d5e0 <HAL_UART_RxCpltCallback+0x1d8>)
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d003      	beq.n	800d4ca <HAL_UART_RxCpltCallback+0xc2>
		Activate_CLI_For_First_Time_Flag = 1;
 800d4c2:	4b47      	ldr	r3, [pc, #284]	; (800d5e0 <HAL_UART_RxCpltCallback+0x1d8>)
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	701a      	strb	r2, [r3, #0]
 800d4c8:	e006      	b.n	800d4d8 <HAL_UART_RxCpltCallback+0xd0>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800d4ca:	4b46      	ldr	r3, [pc, #280]	; (800d5e4 <HAL_UART_RxCpltCallback+0x1dc>)
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	701a      	strb	r2, [r3, #0]
 800d4d0:	e7f7      	b.n	800d4c2 <HAL_UART_RxCpltCallback+0xba>
		Read_In_CLI_Task_Flag = 1;
 800d4d2:	4b44      	ldr	r3, [pc, #272]	; (800d5e4 <HAL_UART_RxCpltCallback+0x1dc>)
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	701a      	strb	r2, [r3, #0]
			portStatus[port_number] =FREE; // End of receiving message.
		}
	}

//		HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
	HAL_UART_Receive_IT(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800d4d8:	0020      	movs	r0, r4
 800d4da:	f7fd fa91 	bl	800aa00 <GetPort>
 800d4de:	1e41      	subs	r1, r0, #1
 800d4e0:	4838      	ldr	r0, [pc, #224]	; (800d5c4 <HAL_UART_RxCpltCallback+0x1bc>)
 800d4e2:	1809      	adds	r1, r1, r0
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	0020      	movs	r0, r4
 800d4e8:	f005 f882 	bl	80125f0 <HAL_UART_Receive_IT>
}
 800d4ec:	b003      	add	sp, #12
 800d4ee:	bcf0      	pop	{r4, r5, r6, r7}
 800d4f0:	46bb      	mov	fp, r7
 800d4f2:	46b2      	mov	sl, r6
 800d4f4:	46a9      	mov	r9, r5
 800d4f6:	46a0      	mov	r8, r4
 800d4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d19a      	bne.n	800d434 <HAL_UART_RxCpltCallback+0x2c>
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 800d4fe:	4b32      	ldr	r3, [pc, #200]	; (800d5c8 <HAL_UART_RxCpltCallback+0x1c0>)
 800d500:	2207      	movs	r2, #7
 800d502:	541a      	strb	r2, [r3, r0]
 800d504:	e7e8      	b.n	800d4d8 <HAL_UART_RxCpltCallback+0xd0>
	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800d506:	2b07      	cmp	r3, #7
 800d508:	d196      	bne.n	800d438 <HAL_UART_RxCpltCallback+0x30>
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 800d50a:	4b2f      	ldr	r3, [pc, #188]	; (800d5c8 <HAL_UART_RxCpltCallback+0x1c0>)
 800d50c:	2208      	movs	r2, #8
 800d50e:	541a      	strb	r2, [r3, r0]
 800d510:	e7e2      	b.n	800d4d8 <HAL_UART_RxCpltCallback+0xd0>
		portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
 800d512:	4b2d      	ldr	r3, [pc, #180]	; (800d5c8 <HAL_UART_RxCpltCallback+0x1c0>)
 800d514:	2200      	movs	r2, #0
 800d516:	541a      	strb	r2, [r3, r0]
 800d518:	e7de      	b.n	800d4d8 <HAL_UART_RxCpltCallback+0xd0>
		portStatus[port_number] =MSG; // Receive length byte.
 800d51a:	4b2b      	ldr	r3, [pc, #172]	; (800d5c8 <HAL_UART_RxCpltCallback+0x1c0>)
 800d51c:	2501      	movs	r5, #1
 800d51e:	541d      	strb	r5, [r3, r0]
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800d520:	4b2b      	ldr	r3, [pc, #172]	; (800d5d0 <HAL_UART_RxCpltCallback+0x1c8>)
 800d522:	5c98      	ldrb	r0, [r3, r2]
 800d524:	00c3      	lsls	r3, r0, #3
 800d526:	1a1b      	subs	r3, r3, r0
 800d528:	00db      	lsls	r3, r3, #3
 800d52a:	0095      	lsls	r5, r2, #2
 800d52c:	18ad      	adds	r5, r5, r2
 800d52e:	00e8      	lsls	r0, r5, #3
 800d530:	1b40      	subs	r0, r0, r5
 800d532:	00c0      	lsls	r0, r0, #3
 800d534:	181b      	adds	r3, r3, r0
 800d536:	4827      	ldr	r0, [pc, #156]	; (800d5d4 <HAL_UART_RxCpltCallback+0x1cc>)
 800d538:	18c3      	adds	r3, r0, r3
 800d53a:	7099      	strb	r1, [r3, #2]
		temp_index[port_index] = 3;
 800d53c:	4b23      	ldr	r3, [pc, #140]	; (800d5cc <HAL_UART_RxCpltCallback+0x1c4>)
 800d53e:	2003      	movs	r0, #3
 800d540:	5498      	strb	r0, [r3, r2]
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800d542:	3101      	adds	r1, #1
 800d544:	189b      	adds	r3, r3, r2
 800d546:	7219      	strb	r1, [r3, #8]
 800d548:	e7c6      	b.n	800d4d8 <HAL_UART_RxCpltCallback+0xd0>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800d54a:	4b21      	ldr	r3, [pc, #132]	; (800d5d0 <HAL_UART_RxCpltCallback+0x1c8>)
 800d54c:	469c      	mov	ip, r3
 800d54e:	5c9b      	ldrb	r3, [r3, r2]
 800d550:	4f1e      	ldr	r7, [pc, #120]	; (800d5cc <HAL_UART_RxCpltCallback+0x1c4>)
 800d552:	5cbd      	ldrb	r5, [r7, r2]
 800d554:	46a9      	mov	r9, r5
 800d556:	00de      	lsls	r6, r3, #3
 800d558:	1af6      	subs	r6, r6, r3
 800d55a:	00f5      	lsls	r5, r6, #3
 800d55c:	9501      	str	r5, [sp, #4]
 800d55e:	0095      	lsls	r5, r2, #2
 800d560:	46aa      	mov	sl, r5
 800d562:	4492      	add	sl, r2
 800d564:	4655      	mov	r5, sl
 800d566:	00ed      	lsls	r5, r5, #3
 800d568:	4656      	mov	r6, sl
 800d56a:	1bad      	subs	r5, r5, r6
 800d56c:	00ed      	lsls	r5, r5, #3
 800d56e:	46a8      	mov	r8, r5
 800d570:	9d01      	ldr	r5, [sp, #4]
 800d572:	46aa      	mov	sl, r5
 800d574:	44d0      	add	r8, sl
 800d576:	4e17      	ldr	r6, [pc, #92]	; (800d5d4 <HAL_UART_RxCpltCallback+0x1cc>)
 800d578:	4446      	add	r6, r8
 800d57a:	464d      	mov	r5, r9
 800d57c:	5571      	strb	r1, [r6, r5]
			temp_index[port_index]++;
 800d57e:	4649      	mov	r1, r9
 800d580:	3101      	adds	r1, #1
 800d582:	54b9      	strb	r1, [r7, r2]
			temp_length[port_index]--;
 800d584:	18bf      	adds	r7, r7, r2
 800d586:	465d      	mov	r5, fp
 800d588:	3d01      	subs	r5, #1
 800d58a:	723d      	strb	r5, [r7, #8]
			MSG_Buffer_Index_End[port_index]++;
 800d58c:	3301      	adds	r3, #1
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	4661      	mov	r1, ip
 800d592:	548b      	strb	r3, [r1, r2]
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800d594:	2b05      	cmp	r3, #5
 800d596:	d00c      	beq.n	800d5b2 <HAL_UART_RxCpltCallback+0x1aa>
			Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 800d598:	4a13      	ldr	r2, [pc, #76]	; (800d5e8 <HAL_UART_RxCpltCallback+0x1e0>)
 800d59a:	7813      	ldrb	r3, [r2, #0]
 800d59c:	4913      	ldr	r1, [pc, #76]	; (800d5ec <HAL_UART_RxCpltCallback+0x1e4>)
 800d59e:	54c8      	strb	r0, [r1, r3]
			Process_Message_Buffer_Index_End++;
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	7013      	strb	r3, [r2, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800d5a6:	2b05      	cmp	r3, #5
 800d5a8:	d007      	beq.n	800d5ba <HAL_UART_RxCpltCallback+0x1b2>
			portStatus[port_number] =FREE; // End of receiving message.
 800d5aa:	4b07      	ldr	r3, [pc, #28]	; (800d5c8 <HAL_UART_RxCpltCallback+0x1c0>)
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	541a      	strb	r2, [r3, r0]
 800d5b0:	e792      	b.n	800d4d8 <HAL_UART_RxCpltCallback+0xd0>
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800d5b2:	4663      	mov	r3, ip
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	5499      	strb	r1, [r3, r2]
 800d5b8:	e7ee      	b.n	800d598 <HAL_UART_RxCpltCallback+0x190>
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800d5ba:	0013      	movs	r3, r2
 800d5bc:	2200      	movs	r2, #0
 800d5be:	701a      	strb	r2, [r3, #0]
 800d5c0:	e7f3      	b.n	800d5aa <HAL_UART_RxCpltCallback+0x1a2>
 800d5c2:	46c0      	nop			; (mov r8, r8)
 800d5c4:	20001e00 	.word	0x20001e00
 800d5c8:	20000c5c 	.word	0x20000c5c
 800d5cc:	20002a8c 	.word	0x20002a8c
 800d5d0:	20001794 	.word	0x20001794
 800d5d4:	2000121c 	.word	0x2000121c
 800d5d8:	20000c58 	.word	0x20000c58
 800d5dc:	20001e14 	.word	0x20001e14
 800d5e0:	200017a2 	.word	0x200017a2
 800d5e4:	200017a1 	.word	0x200017a1
 800d5e8:	20001212 	.word	0x20001212
 800d5ec:	20001214 	.word	0x20001214

0800d5f0 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

/* Run time stack overflow checking is performed if
 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 function is called if a stack overflow is detected. */
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800d5f0:	b530      	push	{r4, r5, lr}
 800d5f2:	b083      	sub	sp, #12
	(void )pcTaskName;
	(void )pxTask;
	uint8_t* error_message = "Stack Overflow\r\n";
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800d5f4:	4d09      	ldr	r5, [pc, #36]	; (800d61c <vApplicationStackOverflowHook+0x2c>)
 800d5f6:	7828      	ldrb	r0, [r5, #0]
 800d5f8:	24ff      	movs	r4, #255	; 0xff
 800d5fa:	9400      	str	r4, [sp, #0]
 800d5fc:	23ff      	movs	r3, #255	; 0xff
 800d5fe:	2210      	movs	r2, #16
 800d600:	4907      	ldr	r1, [pc, #28]	; (800d620 <vApplicationStackOverflowHook+0x30>)
 800d602:	f000 fbeb 	bl	800dddc <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d606:	4b07      	ldr	r3, [pc, #28]	; (800d624 <vApplicationStackOverflowHook+0x34>)
 800d608:	6819      	ldr	r1, [r3, #0]
 800d60a:	7828      	ldrb	r0, [r5, #0]
 800d60c:	9400      	str	r4, [sp, #0]
 800d60e:	23ff      	movs	r3, #255	; 0xff
 800d610:	220f      	movs	r2, #15
 800d612:	f000 fbe3 	bl	800dddc <writePxMutex>
	NVIC_SystemReset();
 800d616:	f7ff fe15 	bl	800d244 <NVIC_SystemReset>
 800d61a:	46c0      	nop			; (mov r8, r8)
 800d61c:	20000c58 	.word	0x20000c58
 800d620:	0801c458 	.word	0x0801c458
 800d624:	200000a0 	.word	0x200000a0

0800d628 <vApplicationMallocFailedHook>:
 demo application.  If heap_1.c or heap_2.c are used, then the size of the
 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
 to query the size of free heap space that remains (although it does not
 provide information on how the remaining heap might be fragmented). */
void vApplicationMallocFailedHook(void){
 800d628:	b530      	push	{r4, r5, lr}
 800d62a:	b083      	sub	sp, #12
	uint8_t* error_message = "Heap size exceeded\r\n";
	writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800d62c:	4d09      	ldr	r5, [pc, #36]	; (800d654 <vApplicationMallocFailedHook+0x2c>)
 800d62e:	7828      	ldrb	r0, [r5, #0]
 800d630:	24ff      	movs	r4, #255	; 0xff
 800d632:	9400      	str	r4, [sp, #0]
 800d634:	23ff      	movs	r3, #255	; 0xff
 800d636:	2214      	movs	r2, #20
 800d638:	4907      	ldr	r1, [pc, #28]	; (800d658 <vApplicationMallocFailedHook+0x30>)
 800d63a:	f000 fbcf 	bl	800dddc <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d63e:	4b07      	ldr	r3, [pc, #28]	; (800d65c <vApplicationMallocFailedHook+0x34>)
 800d640:	6819      	ldr	r1, [r3, #0]
 800d642:	7828      	ldrb	r0, [r5, #0]
 800d644:	9400      	str	r4, [sp, #0]
 800d646:	23ff      	movs	r3, #255	; 0xff
 800d648:	220f      	movs	r2, #15
 800d64a:	f000 fbc7 	bl	800dddc <writePxMutex>
	NVIC_SystemReset();
 800d64e:	f7ff fdf9 	bl	800d244 <NVIC_SystemReset>
 800d652:	46c0      	nop			; (mov r8, r8)
 800d654:	20000c58 	.word	0x20000c58
 800d658:	0801c46c 	.word	0x0801c46c
 800d65c:	200000a0 	.word	0x200000a0

0800d660 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800d660:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d662:	46d6      	mov	lr, sl
 800d664:	464f      	mov	r7, r9
 800d666:	4646      	mov	r6, r8
 800d668:	b5c0      	push	{r6, r7, lr}
 800d66a:	b08c      	sub	sp, #48	; 0x30
 800d66c:	2500      	movs	r5, #0
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d66e:	ac03      	add	r4, sp, #12
 800d670:	4b35      	ldr	r3, [pc, #212]	; (800d748 <RTC_CalendarConfig+0xe8>)
 800d672:	0022      	movs	r2, r4
 800d674:	cb43      	ldmia	r3!, {r0, r1, r6}
 800d676:	c243      	stmia	r2!, {r0, r1, r6}
 800d678:	466a      	mov	r2, sp
 800d67a:	4b34      	ldr	r3, [pc, #208]	; (800d74c <RTC_CalendarConfig+0xec>)
 800d67c:	cb03      	ldmia	r3!, {r0, r1}
 800d67e:	c203      	stmia	r2!, {r0, r1}
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800d684:	2015      	movs	r0, #21
 800d686:	4468      	add	r0, sp
 800d688:	f005 fcbd 	bl	8013006 <atoi>
 800d68c:	b2c7      	uxtb	r7, r0
  *(comDate + 6) = 0;
 800d68e:	71a5      	strb	r5, [r4, #6]
  day = atoi(comDate + 4);
 800d690:	a804      	add	r0, sp, #16
 800d692:	f005 fcb8 	bl	8013006 <atoi>
 800d696:	b2c6      	uxtb	r6, r0
  *(comDate + 3) = 0;
 800d698:	70e5      	strb	r5, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800d69a:	2400      	movs	r4, #0
 800d69c:	e001      	b.n	800d6a2 <RTC_CalendarConfig+0x42>
 800d69e:	3401      	adds	r4, #1
 800d6a0:	b2e4      	uxtb	r4, r4
 800d6a2:	2c0b      	cmp	r4, #11
 800d6a4:	d80a      	bhi.n	800d6bc <RTC_CalendarConfig+0x5c>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d6a6:	00a3      	lsls	r3, r4, #2
 800d6a8:	4a29      	ldr	r2, [pc, #164]	; (800d750 <RTC_CalendarConfig+0xf0>)
 800d6aa:	5899      	ldr	r1, [r3, r2]
 800d6ac:	a803      	add	r0, sp, #12
 800d6ae:	f7f2 fd29 	bl	8000104 <strcmp>
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	d1f3      	bne.n	800d69e <RTC_CalendarConfig+0x3e>
			month = i + 1;
 800d6b6:	1c65      	adds	r5, r4, #1
 800d6b8:	b2ed      	uxtb	r5, r5
 800d6ba:	e7f0      	b.n	800d69e <RTC_CalendarConfig+0x3e>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800d6bc:	466b      	mov	r3, sp
 800d6be:	1d98      	adds	r0, r3, #6
 800d6c0:	f005 fca1 	bl	8013006 <atoi>
 800d6c4:	b2c3      	uxtb	r3, r0
 800d6c6:	4698      	mov	r8, r3
	*(comDate + 5) = 0;
 800d6c8:	ac03      	add	r4, sp, #12
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	469a      	mov	sl, r3
 800d6ce:	7163      	strb	r3, [r4, #5]
	minutes = atoi(comTime + 3);
 800d6d0:	466b      	mov	r3, sp
 800d6d2:	1cd8      	adds	r0, r3, #3
 800d6d4:	f005 fc97 	bl	8013006 <atoi>
 800d6d8:	b2c3      	uxtb	r3, r0
 800d6da:	4699      	mov	r9, r3
	*(comDate + 2) = 0;
 800d6dc:	4653      	mov	r3, sl
 800d6de:	70a3      	strb	r3, [r4, #2]
	hours = atoi(comTime);
 800d6e0:	4668      	mov	r0, sp
 800d6e2:	f005 fc90 	bl	8013006 <atoi>
 800d6e6:	b2c4      	uxtb	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800d6e8:	a90b      	add	r1, sp, #44	; 0x2c
 800d6ea:	70cf      	strb	r7, [r1, #3]
  sdatestructure.Month = month;
 800d6ec:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800d6ee:	708e      	strb	r6, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	4817      	ldr	r0, [pc, #92]	; (800d754 <RTC_CalendarConfig+0xf4>)
 800d6f8:	f004 fdb6 	bl	8012268 <HAL_RTC_SetDate>
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d11e      	bne.n	800d73e <RTC_CalendarConfig+0xde>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d700:	a906      	add	r1, sp, #24
 800d702:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800d704:	464b      	mov	r3, r9
 800d706:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800d708:	4643      	mov	r3, r8
 800d70a:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d70c:	2300      	movs	r3, #0
 800d70e:	720b      	strb	r3, [r1, #8]
 800d710:	4a11      	ldr	r2, [pc, #68]	; (800d758 <RTC_CalendarConfig+0xf8>)
 800d712:	3018      	adds	r0, #24
 800d714:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d716:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d718:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d71a:	2200      	movs	r2, #0
 800d71c:	480d      	ldr	r0, [pc, #52]	; (800d754 <RTC_CalendarConfig+0xf4>)
 800d71e:	f004 fd25 	bl	801216c <HAL_RTC_SetTime>
 800d722:	1e04      	subs	r4, r0, #0
 800d724:	d10d      	bne.n	800d742 <RTC_CalendarConfig+0xe2>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d726:	4a0d      	ldr	r2, [pc, #52]	; (800d75c <RTC_CalendarConfig+0xfc>)
 800d728:	2101      	movs	r1, #1
 800d72a:	480a      	ldr	r0, [pc, #40]	; (800d754 <RTC_CalendarConfig+0xf4>)
 800d72c:	f004 fe5e 	bl	80123ec <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800d730:	0020      	movs	r0, r4
 800d732:	b00c      	add	sp, #48	; 0x30
 800d734:	bce0      	pop	{r5, r6, r7}
 800d736:	46ba      	mov	sl, r7
 800d738:	46b1      	mov	r9, r6
 800d73a:	46a8      	mov	r8, r5
 800d73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800d73e:	24ff      	movs	r4, #255	; 0xff
 800d740:	e7f6      	b.n	800d730 <RTC_CalendarConfig+0xd0>
		return BOS_ERROR;
 800d742:	24ff      	movs	r4, #255	; 0xff
 800d744:	e7f4      	b.n	800d730 <RTC_CalendarConfig+0xd0>
 800d746:	46c0      	nop			; (mov r8, r8)
 800d748:	08019ed8 	.word	0x08019ed8
 800d74c:	08019efc 	.word	0x08019efc
 800d750:	20000064 	.word	0x20000064
 800d754:	20002a9c 	.word	0x20002a9c
 800d758:	20000b4c 	.word	0x20000b4c
 800d75c:	000032f2 	.word	0x000032f2

0800d760 <RTC_Init>:
{
 800d760:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800d762:	4a1d      	ldr	r2, [pc, #116]	; (800d7d8 <RTC_Init+0x78>)
 800d764:	6a11      	ldr	r1, [r2, #32]
 800d766:	2380      	movs	r3, #128	; 0x80
 800d768:	021b      	lsls	r3, r3, #8
 800d76a:	430b      	orrs	r3, r1
 800d76c:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800d76e:	481b      	ldr	r0, [pc, #108]	; (800d7dc <RTC_Init+0x7c>)
 800d770:	4b1b      	ldr	r3, [pc, #108]	; (800d7e0 <RTC_Init+0x80>)
 800d772:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d774:	2300      	movs	r3, #0
 800d776:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800d778:	227c      	movs	r2, #124	; 0x7c
 800d77a:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800d77c:	4a19      	ldr	r2, [pc, #100]	; (800d7e4 <RTC_Init+0x84>)
 800d77e:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d780:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d782:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d784:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d786:	f004 fc95 	bl	80120b4 <HAL_RTC_Init>
 800d78a:	1e04      	subs	r4, r0, #0
 800d78c:	d121      	bne.n	800d7d2 <RTC_Init+0x72>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800d78e:	2101      	movs	r1, #1
 800d790:	4812      	ldr	r0, [pc, #72]	; (800d7dc <RTC_Init+0x7c>)
 800d792:	f004 fe31 	bl	80123f8 <HAL_RTCEx_BKUPRead>
 800d796:	4b14      	ldr	r3, [pc, #80]	; (800d7e8 <RTC_Init+0x88>)
 800d798:	4298      	cmp	r0, r3
 800d79a:	d110      	bne.n	800d7be <RTC_Init+0x5e>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800d79c:	4b0e      	ldr	r3, [pc, #56]	; (800d7d8 <RTC_Init+0x78>)
 800d79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a0:	011b      	lsls	r3, r3, #4
 800d7a2:	d503      	bpl.n	800d7ac <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800d7a4:	4a0d      	ldr	r2, [pc, #52]	; (800d7dc <RTC_Init+0x7c>)
 800d7a6:	2320      	movs	r3, #32
 800d7a8:	2100      	movs	r1, #0
 800d7aa:	54d1      	strb	r1, [r2, r3]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800d7ac:	4b0a      	ldr	r3, [pc, #40]	; (800d7d8 <RTC_Init+0x78>)
 800d7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b0:	015b      	lsls	r3, r3, #5
 800d7b2:	d506      	bpl.n	800d7c2 <RTC_Init+0x62>
			bootStatus = RESET_BOOT;
 800d7b4:	4a09      	ldr	r2, [pc, #36]	; (800d7dc <RTC_Init+0x7c>)
 800d7b6:	2320      	movs	r3, #32
 800d7b8:	2101      	movs	r1, #1
 800d7ba:	54d1      	strb	r1, [r2, r3]
 800d7bc:	e001      	b.n	800d7c2 <RTC_Init+0x62>
    RTC_CalendarConfig();
 800d7be:	f7ff ff4f 	bl	800d660 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d7c2:	4a05      	ldr	r2, [pc, #20]	; (800d7d8 <RTC_Init+0x78>)
 800d7c4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d7c6:	2380      	movs	r3, #128	; 0x80
 800d7c8:	045b      	lsls	r3, r3, #17
 800d7ca:	430b      	orrs	r3, r1
 800d7cc:	6253      	str	r3, [r2, #36]	; 0x24
}
 800d7ce:	0020      	movs	r0, r4
 800d7d0:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d7d2:	24ff      	movs	r4, #255	; 0xff
 800d7d4:	e7fb      	b.n	800d7ce <RTC_Init+0x6e>
 800d7d6:	46c0      	nop			; (mov r8, r8)
 800d7d8:	40021000 	.word	0x40021000
 800d7dc:	20002a9c 	.word	0x20002a9c
 800d7e0:	40002800 	.word	0x40002800
 800d7e4:	000007cf 	.word	0x000007cf
 800d7e8:	000032f2 	.word	0x000032f2

0800d7ec <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800d7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ee:	46c6      	mov	lr, r8
 800d7f0:	b500      	push	{lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	ac0c      	add	r4, sp, #48	; 0x30
 800d7f6:	7827      	ldrb	r7, [r4, #0]
 800d7f8:	ac0d      	add	r4, sp, #52	; 0x34
 800d7fa:	7824      	ldrb	r4, [r4, #0]
 800d7fc:	46a0      	mov	r8, r4
 800d7fe:	ac0e      	add	r4, sp, #56	; 0x38
 800d800:	7825      	ldrb	r5, [r4, #0]
 800d802:	ac0f      	add	r4, sp, #60	; 0x3c
 800d804:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800d806:	3230      	adds	r2, #48	; 0x30
 800d808:	ac05      	add	r4, sp, #20
 800d80a:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800d80c:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800d80e:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800d810:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d812:	2200      	movs	r2, #0
 800d814:	0021      	movs	r1, r4
 800d816:	4822      	ldr	r0, [pc, #136]	; (800d8a0 <BOS_CalendarConfig+0xb4>)
 800d818:	f004 fd26 	bl	8012268 <HAL_RTC_SetDate>
 800d81c:	2800      	cmp	r0, #0
 800d81e:	d13a      	bne.n	800d896 <BOS_CalendarConfig+0xaa>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d820:	466b      	mov	r3, sp
 800d822:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800d824:	4642      	mov	r2, r8
 800d826:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800d828:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800d82a:	2300      	movs	r3, #0
 800d82c:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_ADD1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
 800d82e:	2d0c      	cmp	r5, #12
 800d830:	d902      	bls.n	800d838 <BOS_CalendarConfig+0x4c>
 800d832:	4b1c      	ldr	r3, [pc, #112]	; (800d8a4 <BOS_CalendarConfig+0xb8>)
 800d834:	2218      	movs	r2, #24
 800d836:	735a      	strb	r2, [r3, #13]
	
	if (AMPM == RTC_AM) {
 800d838:	2e01      	cmp	r6, #1
 800d83a:	d01e      	beq.n	800d87a <BOS_CalendarConfig+0x8e>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800d83c:	2e02      	cmp	r6, #2
 800d83e:	d023      	beq.n	800d888 <BOS_CalendarConfig+0x9c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800d840:	4b18      	ldr	r3, [pc, #96]	; (800d8a4 <BOS_CalendarConfig+0xb8>)
 800d842:	2218      	movs	r2, #24
 800d844:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d846:	2200      	movs	r2, #0
 800d848:	4669      	mov	r1, sp
 800d84a:	4815      	ldr	r0, [pc, #84]	; (800d8a0 <BOS_CalendarConfig+0xb4>)
 800d84c:	f004 fc8e 	bl	801216c <HAL_RTC_SetTime>
 800d850:	1e04      	subs	r4, r0, #0
 800d852:	d122      	bne.n	800d89a <BOS_CalendarConfig+0xae>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800d854:	4a13      	ldr	r2, [pc, #76]	; (800d8a4 <BOS_CalendarConfig+0xb8>)
 800d856:	7b53      	ldrb	r3, [r2, #13]
 800d858:	021b      	lsls	r3, r3, #8
 800d85a:	7911      	ldrb	r1, [r2, #4]
 800d85c:	4319      	orrs	r1, r3
 800d85e:	208d      	movs	r0, #141	; 0x8d
 800d860:	0040      	lsls	r0, r0, #1
 800d862:	f7fe f929 	bl	800bab8 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d866:	4a10      	ldr	r2, [pc, #64]	; (800d8a8 <BOS_CalendarConfig+0xbc>)
 800d868:	2101      	movs	r1, #1
 800d86a:	480d      	ldr	r0, [pc, #52]	; (800d8a0 <BOS_CalendarConfig+0xb4>)
 800d86c:	f004 fdbe 	bl	80123ec <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800d870:	0020      	movs	r0, r4
 800d872:	b006      	add	sp, #24
 800d874:	bc80      	pop	{r7}
 800d876:	46b8      	mov	r8, r7
 800d878:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d87a:	2300      	movs	r3, #0
 800d87c:	466a      	mov	r2, sp
 800d87e:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d880:	4b08      	ldr	r3, [pc, #32]	; (800d8a4 <BOS_CalendarConfig+0xb8>)
 800d882:	220c      	movs	r2, #12
 800d884:	735a      	strb	r2, [r3, #13]
 800d886:	e7de      	b.n	800d846 <BOS_CalendarConfig+0x5a>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800d888:	2340      	movs	r3, #64	; 0x40
 800d88a:	466a      	mov	r2, sp
 800d88c:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d88e:	4b05      	ldr	r3, [pc, #20]	; (800d8a4 <BOS_CalendarConfig+0xb8>)
 800d890:	220c      	movs	r2, #12
 800d892:	735a      	strb	r2, [r3, #13]
 800d894:	e7d7      	b.n	800d846 <BOS_CalendarConfig+0x5a>
		return BOS_ERROR;
 800d896:	24ff      	movs	r4, #255	; 0xff
 800d898:	e7ea      	b.n	800d870 <BOS_CalendarConfig+0x84>
		return BOS_ERROR;
 800d89a:	24ff      	movs	r4, #255	; 0xff
 800d89c:	e7e8      	b.n	800d870 <BOS_CalendarConfig+0x84>
 800d89e:	46c0      	nop			; (mov r8, r8)
 800d8a0:	20002a9c 	.word	0x20002a9c
 800d8a4:	20000b4c 	.word	0x20000b4c
 800d8a8:	000032f2 	.word	0x000032f2

0800d8ac <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800d8ac:	b530      	push	{r4, r5, lr}
 800d8ae:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d8b0:	4d16      	ldr	r5, [pc, #88]	; (800d90c <GetTimeDate+0x60>)
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	a902      	add	r1, sp, #8
 800d8b6:	0028      	movs	r0, r5
 800d8b8:	f004 fd4c 	bl	8012354 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d8bc:	ac07      	add	r4, sp, #28
 800d8be:	2200      	movs	r2, #0
 800d8c0:	0021      	movs	r1, r4
 800d8c2:	0028      	movs	r0, r5
 800d8c4:	f004 fd6e 	bl	80123a4 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800d8c8:	ab02      	add	r3, sp, #8
 800d8ca:	7a1a      	ldrb	r2, [r3, #8]
 800d8cc:	09d2      	lsrs	r2, r2, #7
 800d8ce:	3201      	adds	r2, #1
 800d8d0:	4b0f      	ldr	r3, [pc, #60]	; (800d910 <GetTimeDate+0x64>)
 800d8d2:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d8d4:	9a03      	ldr	r2, [sp, #12]
 800d8d6:	9201      	str	r2, [sp, #4]
 800d8d8:	0852      	lsrs	r2, r2, #1
 800d8da:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800d8dc:	aa02      	add	r2, sp, #8
 800d8de:	7892      	ldrb	r2, [r2, #2]
 800d8e0:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800d8e2:	aa02      	add	r2, sp, #8
 800d8e4:	7852      	ldrb	r2, [r2, #1]
 800d8e6:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800d8e8:	aa02      	add	r2, sp, #8
 800d8ea:	7812      	ldrb	r2, [r2, #0]
 800d8ec:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800d8ee:	78a2      	ldrb	r2, [r4, #2]
 800d8f0:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800d8f2:	7862      	ldrb	r2, [r4, #1]
 800d8f4:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800d8f6:	7822      	ldrb	r2, [r4, #0]
 800d8f8:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d8fa:	78e2      	ldrb	r2, [r4, #3]
 800d8fc:	21fa      	movs	r1, #250	; 0xfa
 800d8fe:	00c9      	lsls	r1, r1, #3
 800d900:	468c      	mov	ip, r1
 800d902:	4462      	add	r2, ip
 800d904:	831a      	strh	r2, [r3, #24]
}
 800d906:	b009      	add	sp, #36	; 0x24
 800d908:	bd30      	pop	{r4, r5, pc}
 800d90a:	46c0      	nop			; (mov r8, r8)
 800d90c:	20002a9c 	.word	0x20002a9c
 800d910:	20000b4c 	.word	0x20000b4c

0800d914 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800d914:	b530      	push	{r4, r5, lr}
 800d916:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800d918:	4a12      	ldr	r2, [pc, #72]	; (800d964 <TIM_USEC_Init+0x50>)
 800d91a:	69d1      	ldr	r1, [r2, #28]
 800d91c:	2080      	movs	r0, #128	; 0x80
 800d91e:	0040      	lsls	r0, r0, #1
 800d920:	4301      	orrs	r1, r0
 800d922:	61d1      	str	r1, [r2, #28]
 800d924:	69d3      	ldr	r3, [r2, #28]
 800d926:	4003      	ands	r3, r0
 800d928:	9301      	str	r3, [sp, #4]
 800d92a:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800d92c:	4c0e      	ldr	r4, [pc, #56]	; (800d968 <TIM_USEC_Init+0x54>)
 800d92e:	4b0f      	ldr	r3, [pc, #60]	; (800d96c <TIM_USEC_Init+0x58>)
 800d930:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d932:	f004 fadf 	bl	8011ef4 <HAL_RCC_GetPCLK1Freq>
 800d936:	490e      	ldr	r1, [pc, #56]	; (800d970 <TIM_USEC_Init+0x5c>)
 800d938:	f7f2 fc0a 	bl	8000150 <__udivsi3>
 800d93c:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d93e:	2500      	movs	r5, #0
 800d940:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800d942:	4b0c      	ldr	r3, [pc, #48]	; (800d974 <TIM_USEC_Init+0x60>)
 800d944:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800d946:	0020      	movs	r0, r4
 800d948:	f004 fdb8 	bl	80124bc <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d94c:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d94e:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d950:	a902      	add	r1, sp, #8
 800d952:	0020      	movs	r0, r4
 800d954:	f004 fdcc 	bl	80124f0 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800d958:	0020      	movs	r0, r4
 800d95a:	f004 fd54 	bl	8012406 <HAL_TIM_Base_Start>
}
 800d95e:	b005      	add	sp, #20
 800d960:	bd30      	pop	{r4, r5, pc}
 800d962:	46c0      	nop			; (mov r8, r8)
 800d964:	40021000 	.word	0x40021000
 800d968:	20002ac0 	.word	0x20002ac0
 800d96c:	40002000 	.word	0x40002000
 800d970:	000f4240 	.word	0x000f4240
 800d974:	0000ffff 	.word	0x0000ffff

0800d978 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800d978:	b530      	push	{r4, r5, lr}
 800d97a:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800d97c:	4a13      	ldr	r2, [pc, #76]	; (800d9cc <TIM_MSEC_Init+0x54>)
 800d97e:	6991      	ldr	r1, [r2, #24]
 800d980:	2080      	movs	r0, #128	; 0x80
 800d982:	0240      	lsls	r0, r0, #9
 800d984:	4301      	orrs	r1, r0
 800d986:	6191      	str	r1, [r2, #24]
 800d988:	6993      	ldr	r3, [r2, #24]
 800d98a:	4003      	ands	r3, r0
 800d98c:	9301      	str	r3, [sp, #4]
 800d98e:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800d990:	4c0f      	ldr	r4, [pc, #60]	; (800d9d0 <TIM_MSEC_Init+0x58>)
 800d992:	4b10      	ldr	r3, [pc, #64]	; (800d9d4 <TIM_MSEC_Init+0x5c>)
 800d994:	63e3      	str	r3, [r4, #60]	; 0x3c
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d996:	f004 faad 	bl	8011ef4 <HAL_RCC_GetPCLK1Freq>
 800d99a:	21fa      	movs	r1, #250	; 0xfa
 800d99c:	0089      	lsls	r1, r1, #2
 800d99e:	f7f2 fbd7 	bl	8000150 <__udivsi3>
 800d9a2:	6420      	str	r0, [r4, #64]	; 0x40
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d9a4:	2500      	movs	r5, #0
 800d9a6:	6465      	str	r5, [r4, #68]	; 0x44
  htim15.Init.Period = 0xFFFF;
 800d9a8:	4b0b      	ldr	r3, [pc, #44]	; (800d9d8 <TIM_MSEC_Init+0x60>)
 800d9aa:	64a3      	str	r3, [r4, #72]	; 0x48
  HAL_TIM_Base_Init(&htim15);
 800d9ac:	343c      	adds	r4, #60	; 0x3c
 800d9ae:	0020      	movs	r0, r4
 800d9b0:	f004 fd84 	bl	80124bc <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d9b4:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d9b6:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d9b8:	a902      	add	r1, sp, #8
 800d9ba:	0020      	movs	r0, r4
 800d9bc:	f004 fd98 	bl	80124f0 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800d9c0:	0020      	movs	r0, r4
 800d9c2:	f004 fd20 	bl	8012406 <HAL_TIM_Base_Start>
}
 800d9c6:	b005      	add	sp, #20
 800d9c8:	bd30      	pop	{r4, r5, pc}
 800d9ca:	46c0      	nop			; (mov r8, r8)
 800d9cc:	40021000 	.word	0x40021000
 800d9d0:	20002ac0 	.word	0x20002ac0
 800d9d4:	40014000 	.word	0x40014000
 800d9d8:	0000ffff 	.word	0x0000ffff

0800d9dc <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800d9dc:	b510      	push	{r4, lr}
 800d9de:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800d9e0:	f002 f930 	bl	800fc44 <vPortEnterCritical>
	
	if (Delay)
 800d9e4:	2c00      	cmp	r4, #0
 800d9e6:	d006      	beq.n	800d9f6 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800d9e8:	4b04      	ldr	r3, [pc, #16]	; (800d9fc <StartMicroDelay+0x20>)
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800d9ee:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d9f0:	1a5b      	subs	r3, r3, r1
 800d9f2:	42a3      	cmp	r3, r4
 800d9f4:	d9fb      	bls.n	800d9ee <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d9f6:	f002 f931 	bl	800fc5c <vPortExitCritical>
}
 800d9fa:	bd10      	pop	{r4, pc}
 800d9fc:	20002ac0 	.word	0x20002ac0

0800da00 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800da00:	b510      	push	{r4, lr}
 800da02:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800da04:	f002 f91e 	bl	800fc44 <vPortEnterCritical>
	
	if (Delay)
 800da08:	2c00      	cmp	r4, #0
 800da0a:	d006      	beq.n	800da1a <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800da0c:	4b04      	ldr	r3, [pc, #16]	; (800da20 <StartMilliDelay+0x20>)
 800da0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da10:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800da12:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800da14:	1a5b      	subs	r3, r3, r1
 800da16:	42a3      	cmp	r3, r4
 800da18:	d9fb      	bls.n	800da12 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800da1a:	f002 f91f 	bl	800fc5c <vPortExitCritical>
}
 800da1e:	bd10      	pop	{r4, pc}
 800da20:	20002ac0 	.word	0x20002ac0

0800da24 <MX_USART1_UART_Init>:
/* USART1 init function */
DMA_HandleTypeDef hdma_usart1_rx;
#ifdef _Usart1

void MX_USART1_UART_Init(void)
{
 800da24:	b510      	push	{r4, lr}
	  huart1.Instance = USART1;
 800da26:	4809      	ldr	r0, [pc, #36]	; (800da4c <MX_USART1_UART_Init+0x28>)
 800da28:	4b09      	ldr	r3, [pc, #36]	; (800da50 <MX_USART1_UART_Init+0x2c>)
 800da2a:	6003      	str	r3, [r0, #0]
	  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800da2c:	23e1      	movs	r3, #225	; 0xe1
 800da2e:	031b      	lsls	r3, r3, #12
 800da30:	6043      	str	r3, [r0, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800da32:	2300      	movs	r3, #0
 800da34:	6083      	str	r3, [r0, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 800da36:	60c3      	str	r3, [r0, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 800da38:	6103      	str	r3, [r0, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 800da3a:	220c      	movs	r2, #12
 800da3c:	6142      	str	r2, [r0, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800da3e:	6183      	str	r3, [r0, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800da40:	61c3      	str	r3, [r0, #28]
	  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800da42:	6203      	str	r3, [r0, #32]
	  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800da44:	6243      	str	r3, [r0, #36]	; 0x24
	  HAL_UART_Init(&huart1);
 800da46:	f005 f97d 	bl	8012d44 <HAL_UART_Init>
}
 800da4a:	bd10      	pop	{r4, pc}
 800da4c:	200021d8 	.word	0x200021d8
 800da50:	40013800 	.word	0x40013800

0800da54 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800da54:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800da56:	4809      	ldr	r0, [pc, #36]	; (800da7c <MX_USART2_UART_Init+0x28>)
 800da58:	4b09      	ldr	r3, [pc, #36]	; (800da80 <MX_USART2_UART_Init+0x2c>)
 800da5a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800da5c:	23e1      	movs	r3, #225	; 0xe1
 800da5e:	031b      	lsls	r3, r3, #12
 800da60:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800da62:	2300      	movs	r3, #0
 800da64:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800da66:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800da68:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800da6a:	220c      	movs	r2, #12
 800da6c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800da6e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800da70:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800da72:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800da74:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800da76:	f005 f965 	bl	8012d44 <HAL_UART_Init>
	#if _P1pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800da7a:	bd10      	pop	{r4, pc}
 800da7c:	20002514 	.word	0x20002514
 800da80:	40004400 	.word	0x40004400

0800da84 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800da84:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800da86:	4809      	ldr	r0, [pc, #36]	; (800daac <MX_USART3_UART_Init+0x28>)
 800da88:	4b09      	ldr	r3, [pc, #36]	; (800dab0 <MX_USART3_UART_Init+0x2c>)
 800da8a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800da8c:	23e1      	movs	r3, #225	; 0xe1
 800da8e:	031b      	lsls	r3, r3, #12
 800da90:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800da92:	2300      	movs	r3, #0
 800da94:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800da96:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800da98:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800da9a:	220c      	movs	r2, #12
 800da9c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800da9e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800daa0:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800daa2:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800daa4:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800daa6:	f005 f94d 	bl	8012d44 <HAL_UART_Init>
	#if _P5pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800daaa:	bd10      	pop	{r4, pc}
 800daac:	200024a4 	.word	0x200024a4
 800dab0:	40004800 	.word	0x40004800

0800dab4 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800dab4:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800dab6:	4809      	ldr	r0, [pc, #36]	; (800dadc <MX_USART4_UART_Init+0x28>)
 800dab8:	4b09      	ldr	r3, [pc, #36]	; (800dae0 <MX_USART4_UART_Init+0x2c>)
 800daba:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dabc:	23e1      	movs	r3, #225	; 0xe1
 800dabe:	031b      	lsls	r3, r3, #12
 800dac0:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800dac2:	2300      	movs	r3, #0
 800dac4:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800dac6:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800dac8:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800daca:	220c      	movs	r2, #12
 800dacc:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dace:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800dad0:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dad2:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dad4:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800dad6:	f005 f935 	bl	8012d44 <HAL_UART_Init>
	#if _P4pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800dada:	bd10      	pop	{r4, pc}
 800dadc:	20002434 	.word	0x20002434
 800dae0:	40004c00 	.word	0x40004c00

0800dae4 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800dae4:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800dae6:	4809      	ldr	r0, [pc, #36]	; (800db0c <MX_USART5_UART_Init+0x28>)
 800dae8:	4b09      	ldr	r3, [pc, #36]	; (800db10 <MX_USART5_UART_Init+0x2c>)
 800daea:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800daec:	23e1      	movs	r3, #225	; 0xe1
 800daee:	031b      	lsls	r3, r3, #12
 800daf0:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800daf2:	2300      	movs	r3, #0
 800daf4:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800daf6:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800daf8:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800dafa:	220c      	movs	r2, #12
 800dafc:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dafe:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800db00:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800db02:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db04:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800db06:	f005 f91d 	bl	8012d44 <HAL_UART_Init>
	#if _P3pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800db0a:	bd10      	pop	{r4, pc}
 800db0c:	200023c4 	.word	0x200023c4
 800db10:	40005000 	.word	0x40005000

0800db14 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800db14:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800db16:	4809      	ldr	r0, [pc, #36]	; (800db3c <MX_USART6_UART_Init+0x28>)
 800db18:	4b09      	ldr	r3, [pc, #36]	; (800db40 <MX_USART6_UART_Init+0x2c>)
 800db1a:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800db1c:	23e1      	movs	r3, #225	; 0xe1
 800db1e:	031b      	lsls	r3, r3, #12
 800db20:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800db22:	2300      	movs	r3, #0
 800db24:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800db26:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800db28:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800db2a:	220c      	movs	r2, #12
 800db2c:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db2e:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800db30:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800db32:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db34:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800db36:	f005 f905 	bl	8012d44 <HAL_UART_Init>
	#if _P2pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800db3a:	bd10      	pop	{r4, pc}
 800db3c:	20002354 	.word	0x20002354
 800db40:	40011400 	.word	0x40011400

0800db44 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800db44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db46:	46c6      	mov	lr, r8
 800db48:	b500      	push	{lr}
 800db4a:	b090      	sub	sp, #64	; 0x40
 800db4c:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800db4e:	6803      	ldr	r3, [r0, #0]
 800db50:	4a88      	ldr	r2, [pc, #544]	; (800dd74 <HAL_UART_MspInit+0x230>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d012      	beq.n	800db7c <HAL_UART_MspInit+0x38>
	    	__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);


	    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
  }
  else if(huart->Instance==USART2)
 800db56:	4a88      	ldr	r2, [pc, #544]	; (800dd78 <HAL_UART_MspInit+0x234>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d053      	beq.n	800dc04 <HAL_UART_MspInit+0xc0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800db5c:	4a87      	ldr	r2, [pc, #540]	; (800dd7c <HAL_UART_MspInit+0x238>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d100      	bne.n	800db64 <HAL_UART_MspInit+0x20>
 800db62:	e07b      	b.n	800dc5c <HAL_UART_MspInit+0x118>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800db64:	4a86      	ldr	r2, [pc, #536]	; (800dd80 <HAL_UART_MspInit+0x23c>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d100      	bne.n	800db6c <HAL_UART_MspInit+0x28>
 800db6a:	e0a7      	b.n	800dcbc <HAL_UART_MspInit+0x178>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800db6c:	4a85      	ldr	r2, [pc, #532]	; (800dd84 <HAL_UART_MspInit+0x240>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d100      	bne.n	800db74 <HAL_UART_MspInit+0x30>
 800db72:	e0d0      	b.n	800dd16 <HAL_UART_MspInit+0x1d2>
    /* Peripheral interrupt init*/
//    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
//    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
//	#endif
//  }
}
 800db74:	b010      	add	sp, #64	; 0x40
 800db76:	bc80      	pop	{r7}
 800db78:	46b8      	mov	r8, r7
 800db7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db7c:	2214      	movs	r2, #20
 800db7e:	2100      	movs	r1, #0
 800db80:	a806      	add	r0, sp, #24
 800db82:	f005 fcae 	bl	80134e2 <memset>
	    __HAL_RCC_USART1_CLK_ENABLE();
 800db86:	4b80      	ldr	r3, [pc, #512]	; (800dd88 <HAL_UART_MspInit+0x244>)
 800db88:	6999      	ldr	r1, [r3, #24]
 800db8a:	2080      	movs	r0, #128	; 0x80
 800db8c:	01c0      	lsls	r0, r0, #7
 800db8e:	4301      	orrs	r1, r0
 800db90:	6199      	str	r1, [r3, #24]
 800db92:	699a      	ldr	r2, [r3, #24]
 800db94:	4002      	ands	r2, r0
 800db96:	9201      	str	r2, [sp, #4]
 800db98:	9a01      	ldr	r2, [sp, #4]
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db9a:	695a      	ldr	r2, [r3, #20]
 800db9c:	2180      	movs	r1, #128	; 0x80
 800db9e:	0289      	lsls	r1, r1, #10
 800dba0:	430a      	orrs	r2, r1
 800dba2:	615a      	str	r2, [r3, #20]
 800dba4:	695b      	ldr	r3, [r3, #20]
 800dba6:	400b      	ands	r3, r1
 800dba8:	9302      	str	r3, [sp, #8]
 800dbaa:	9b02      	ldr	r3, [sp, #8]
	    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800dbac:	23c0      	movs	r3, #192	; 0xc0
 800dbae:	00db      	lsls	r3, r3, #3
 800dbb0:	9306      	str	r3, [sp, #24]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbb2:	2302      	movs	r3, #2
 800dbb4:	9307      	str	r3, [sp, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	9309      	str	r3, [sp, #36]	; 0x24
	    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800dbba:	3b02      	subs	r3, #2
 800dbbc:	930a      	str	r3, [sp, #40]	; 0x28
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dbbe:	2090      	movs	r0, #144	; 0x90
 800dbc0:	a906      	add	r1, sp, #24
 800dbc2:	05c0      	lsls	r0, r0, #23
 800dbc4:	f003 fc00 	bl	80113c8 <HAL_GPIO_Init>
	    hdma_usart1_rx.Instance = DMA2_Channel3;
 800dbc8:	4d70      	ldr	r5, [pc, #448]	; (800dd8c <HAL_UART_MspInit+0x248>)
 800dbca:	4b71      	ldr	r3, [pc, #452]	; (800dd90 <HAL_UART_MspInit+0x24c>)
 800dbcc:	602b      	str	r3, [r5, #0]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	606b      	str	r3, [r5, #4]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800dbd2:	60ab      	str	r3, [r5, #8]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800dbd4:	2280      	movs	r2, #128	; 0x80
 800dbd6:	60ea      	str	r2, [r5, #12]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800dbd8:	612b      	str	r3, [r5, #16]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800dbda:	616b      	str	r3, [r5, #20]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800dbdc:	3a60      	subs	r2, #96	; 0x60
 800dbde:	61aa      	str	r2, [r5, #24]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800dbe0:	61eb      	str	r3, [r5, #28]
	    HAL_DMA_Init(&hdma_usart1_rx);
 800dbe2:	0028      	movs	r0, r5
 800dbe4:	f002 fe14 	bl	8010810 <HAL_DMA_Init>
	    	__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);
 800dbe8:	4a6a      	ldr	r2, [pc, #424]	; (800dd94 <HAL_UART_MspInit+0x250>)
 800dbea:	23a8      	movs	r3, #168	; 0xa8
 800dbec:	58d1      	ldr	r1, [r2, r3]
 800dbee:	486a      	ldr	r0, [pc, #424]	; (800dd98 <HAL_UART_MspInit+0x254>)
 800dbf0:	4001      	ands	r1, r0
 800dbf2:	50d1      	str	r1, [r2, r3]
 800dbf4:	58d0      	ldr	r0, [r2, r3]
 800dbf6:	2180      	movs	r1, #128	; 0x80
 800dbf8:	0109      	lsls	r1, r1, #4
 800dbfa:	4301      	orrs	r1, r0
 800dbfc:	50d1      	str	r1, [r2, r3]
	    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800dbfe:	6665      	str	r5, [r4, #100]	; 0x64
 800dc00:	626c      	str	r4, [r5, #36]	; 0x24
 800dc02:	e7b7      	b.n	800db74 <HAL_UART_MspInit+0x30>
    __USART2_CLK_ENABLE();
 800dc04:	4a60      	ldr	r2, [pc, #384]	; (800dd88 <HAL_UART_MspInit+0x244>)
 800dc06:	69d1      	ldr	r1, [r2, #28]
 800dc08:	2080      	movs	r0, #128	; 0x80
 800dc0a:	0280      	lsls	r0, r0, #10
 800dc0c:	4301      	orrs	r1, r0
 800dc0e:	61d1      	str	r1, [r2, #28]
 800dc10:	69d3      	ldr	r3, [r2, #28]
 800dc12:	4003      	ands	r3, r0
 800dc14:	9303      	str	r3, [sp, #12]
 800dc16:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800dc18:	2304      	movs	r3, #4
 800dc1a:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc1c:	2702      	movs	r7, #2
 800dc1e:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc20:	2401      	movs	r4, #1
 800dc22:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dc24:	2603      	movs	r6, #3
 800dc26:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART2_AF;	
 800dc28:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800dc2a:	2590      	movs	r5, #144	; 0x90
 800dc2c:	05ed      	lsls	r5, r5, #23
 800dc2e:	a90b      	add	r1, sp, #44	; 0x2c
 800dc30:	0028      	movs	r0, r5
 800dc32:	f003 fbc9 	bl	80113c8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800dc36:	2308      	movs	r3, #8
 800dc38:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc3a:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc3c:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dc3e:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART2_AF;
 800dc40:	940f      	str	r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800dc42:	a90b      	add	r1, sp, #44	; 0x2c
 800dc44:	0028      	movs	r0, r5
 800dc46:	f003 fbbf 	bl	80113c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	2101      	movs	r1, #1
 800dc4e:	201c      	movs	r0, #28
 800dc50:	f002 fc3c 	bl	80104cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800dc54:	201c      	movs	r0, #28
 800dc56:	f002 fc69 	bl	801052c <HAL_NVIC_EnableIRQ>
 800dc5a:	e78b      	b.n	800db74 <HAL_UART_MspInit+0x30>
    __USART3_CLK_ENABLE();
 800dc5c:	4a4a      	ldr	r2, [pc, #296]	; (800dd88 <HAL_UART_MspInit+0x244>)
 800dc5e:	69d1      	ldr	r1, [r2, #28]
 800dc60:	2080      	movs	r0, #128	; 0x80
 800dc62:	02c0      	lsls	r0, r0, #11
 800dc64:	4301      	orrs	r1, r0
 800dc66:	61d1      	str	r1, [r2, #28]
 800dc68:	69d3      	ldr	r3, [r2, #28]
 800dc6a:	4003      	ands	r3, r0
 800dc6c:	9304      	str	r3, [sp, #16]
 800dc6e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800dc70:	2380      	movs	r3, #128	; 0x80
 800dc72:	00db      	lsls	r3, r3, #3
 800dc74:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc76:	2302      	movs	r3, #2
 800dc78:	4698      	mov	r8, r3
 800dc7a:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc7c:	2701      	movs	r7, #1
 800dc7e:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dc80:	2603      	movs	r6, #3
 800dc82:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART3_AF;	
 800dc84:	2504      	movs	r5, #4
 800dc86:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800dc88:	4c44      	ldr	r4, [pc, #272]	; (800dd9c <HAL_UART_MspInit+0x258>)
 800dc8a:	a90b      	add	r1, sp, #44	; 0x2c
 800dc8c:	0020      	movs	r0, r4
 800dc8e:	f003 fb9b 	bl	80113c8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800dc92:	2380      	movs	r3, #128	; 0x80
 800dc94:	011b      	lsls	r3, r3, #4
 800dc96:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc98:	4643      	mov	r3, r8
 800dc9a:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc9c:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dc9e:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART3_AF;
 800dca0:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800dca2:	a90b      	add	r1, sp, #44	; 0x2c
 800dca4:	0020      	movs	r0, r4
 800dca6:	f003 fb8f 	bl	80113c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800dcaa:	2200      	movs	r2, #0
 800dcac:	2101      	movs	r1, #1
 800dcae:	201d      	movs	r0, #29
 800dcb0:	f002 fc0c 	bl	80104cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dcb4:	201d      	movs	r0, #29
 800dcb6:	f002 fc39 	bl	801052c <HAL_NVIC_EnableIRQ>
 800dcba:	e75b      	b.n	800db74 <HAL_UART_MspInit+0x30>
    __USART4_CLK_ENABLE();
 800dcbc:	4a32      	ldr	r2, [pc, #200]	; (800dd88 <HAL_UART_MspInit+0x244>)
 800dcbe:	69d1      	ldr	r1, [r2, #28]
 800dcc0:	2080      	movs	r0, #128	; 0x80
 800dcc2:	0300      	lsls	r0, r0, #12
 800dcc4:	4301      	orrs	r1, r0
 800dcc6:	61d1      	str	r1, [r2, #28]
 800dcc8:	69d3      	ldr	r3, [r2, #28]
 800dcca:	4003      	ands	r3, r0
 800dccc:	9305      	str	r3, [sp, #20]
 800dcce:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800dcd0:	2401      	movs	r4, #1
 800dcd2:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcd4:	2502      	movs	r5, #2
 800dcd6:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dcd8:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dcda:	2303      	movs	r3, #3
 800dcdc:	4698      	mov	r8, r3
 800dcde:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART4_AF;	
 800dce0:	2704      	movs	r7, #4
 800dce2:	970f      	str	r7, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800dce4:	2690      	movs	r6, #144	; 0x90
 800dce6:	05f6      	lsls	r6, r6, #23
 800dce8:	a90b      	add	r1, sp, #44	; 0x2c
 800dcea:	0030      	movs	r0, r6
 800dcec:	f003 fb6c 	bl	80113c8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800dcf0:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcf2:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dcf4:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dcf6:	4643      	mov	r3, r8
 800dcf8:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART4_AF;
 800dcfa:	970f      	str	r7, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800dcfc:	a90b      	add	r1, sp, #44	; 0x2c
 800dcfe:	0030      	movs	r0, r6
 800dd00:	f003 fb62 	bl	80113c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800dd04:	2200      	movs	r2, #0
 800dd06:	2101      	movs	r1, #1
 800dd08:	201d      	movs	r0, #29
 800dd0a:	f002 fbdf 	bl	80104cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dd0e:	201d      	movs	r0, #29
 800dd10:	f002 fc0c 	bl	801052c <HAL_NVIC_EnableIRQ>
 800dd14:	e72e      	b.n	800db74 <HAL_UART_MspInit+0x30>
    __USART5_CLK_ENABLE();
 800dd16:	4a1c      	ldr	r2, [pc, #112]	; (800dd88 <HAL_UART_MspInit+0x244>)
 800dd18:	69d1      	ldr	r1, [r2, #28]
 800dd1a:	2080      	movs	r0, #128	; 0x80
 800dd1c:	0340      	lsls	r0, r0, #13
 800dd1e:	4301      	orrs	r1, r0
 800dd20:	61d1      	str	r1, [r2, #28]
 800dd22:	69d3      	ldr	r3, [r2, #28]
 800dd24:	4003      	ands	r3, r0
 800dd26:	9306      	str	r3, [sp, #24]
 800dd28:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800dd2a:	2308      	movs	r3, #8
 800dd2c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd2e:	3b06      	subs	r3, #6
 800dd30:	4698      	mov	r8, r3
 800dd32:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd34:	2701      	movs	r7, #1
 800dd36:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd38:	2603      	movs	r6, #3
 800dd3a:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART5_AF;	
 800dd3c:	2504      	movs	r5, #4
 800dd3e:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800dd40:	4c16      	ldr	r4, [pc, #88]	; (800dd9c <HAL_UART_MspInit+0x258>)
 800dd42:	a90b      	add	r1, sp, #44	; 0x2c
 800dd44:	0020      	movs	r0, r4
 800dd46:	f003 fb3f 	bl	80113c8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800dd4a:	2310      	movs	r3, #16
 800dd4c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd4e:	4643      	mov	r3, r8
 800dd50:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd52:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dd54:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = USART5_AF;
 800dd56:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800dd58:	a90b      	add	r1, sp, #44	; 0x2c
 800dd5a:	0020      	movs	r0, r4
 800dd5c:	f003 fb34 	bl	80113c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800dd60:	2200      	movs	r2, #0
 800dd62:	2101      	movs	r1, #1
 800dd64:	201d      	movs	r0, #29
 800dd66:	f002 fbb1 	bl	80104cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dd6a:	201d      	movs	r0, #29
 800dd6c:	f002 fbde 	bl	801052c <HAL_NVIC_EnableIRQ>
}
 800dd70:	e700      	b.n	800db74 <HAL_UART_MspInit+0x30>
 800dd72:	46c0      	nop			; (mov r8, r8)
 800dd74:	40013800 	.word	0x40013800
 800dd78:	40004400 	.word	0x40004400
 800dd7c:	40004800 	.word	0x40004800
 800dd80:	40004c00 	.word	0x40004c00
 800dd84:	40005000 	.word	0x40005000
 800dd88:	40021000 	.word	0x40021000
 800dd8c:	20002b38 	.word	0x20002b38
 800dd90:	40020430 	.word	0x40020430
 800dd94:	40020400 	.word	0x40020400
 800dd98:	fffff0ff 	.word	0xfffff0ff
 800dd9c:	48000400 	.word	0x48000400

0800dda0 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800dda0:	2805      	cmp	r0, #5
 800dda2:	d80b      	bhi.n	800ddbc <GetUart+0x1c>
 800dda4:	0080      	lsls	r0, r0, #2
 800dda6:	4b07      	ldr	r3, [pc, #28]	; (800ddc4 <GetUart+0x24>)
 800dda8:	581b      	ldr	r3, [r3, r0]
 800ddaa:	469f      	mov	pc, r3
 800ddac:	4806      	ldr	r0, [pc, #24]	; (800ddc8 <GetUart+0x28>)
			return P10uart;
	#endif
		default:
			return 0;
	}		
}
 800ddae:	4770      	bx	lr
			return P3uart;
 800ddb0:	4806      	ldr	r0, [pc, #24]	; (800ddcc <GetUart+0x2c>)
 800ddb2:	e7fc      	b.n	800ddae <GetUart+0xe>
			return P4uart;
 800ddb4:	4806      	ldr	r0, [pc, #24]	; (800ddd0 <GetUart+0x30>)
 800ddb6:	e7fa      	b.n	800ddae <GetUart+0xe>
			return P5uart;
 800ddb8:	4806      	ldr	r0, [pc, #24]	; (800ddd4 <GetUart+0x34>)
 800ddba:	e7f8      	b.n	800ddae <GetUart+0xe>
			return 0;
 800ddbc:	2000      	movs	r0, #0
 800ddbe:	e7f6      	b.n	800ddae <GetUart+0xe>
			return P2uart;
 800ddc0:	4805      	ldr	r0, [pc, #20]	; (800ddd8 <GetUart+0x38>)
 800ddc2:	e7f4      	b.n	800ddae <GetUart+0xe>
 800ddc4:	08019cb0 	.word	0x08019cb0
 800ddc8:	20002514 	.word	0x20002514
 800ddcc:	200024a4 	.word	0x200024a4
 800ddd0:	20002434 	.word	0x20002434
 800ddd4:	200023c4 	.word	0x200023c4
 800ddd8:	20002354 	.word	0x20002354

0800dddc <writePxMutex>:
{
 800dddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddde:	46c6      	mov	lr, r8
 800dde0:	b500      	push	{lr}
 800dde2:	0006      	movs	r6, r0
 800dde4:	000f      	movs	r7, r1
 800dde6:	4690      	mov	r8, r2
 800dde8:	001c      	movs	r4, r3
	if (GetUart(port) != NULL) {
 800ddea:	f7ff ffd9 	bl	800dda0 <GetUart>
 800ddee:	1e05      	subs	r5, r0, #0
 800ddf0:	d01c      	beq.n	800de2c <writePxMutex+0x50>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800ddf2:	00b3      	lsls	r3, r6, #2
 800ddf4:	4a10      	ldr	r2, [pc, #64]	; (800de38 <writePxMutex+0x5c>)
 800ddf6:	5898      	ldr	r0, [r3, r2]
 800ddf8:	0021      	movs	r1, r4
 800ddfa:	f000 f997 	bl	800e12c <osSemaphoreWait>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	d012      	beq.n	800de28 <writePxMutex+0x4c>
	HAL_StatusTypeDef result = HAL_ERROR;
 800de02:	2401      	movs	r4, #1
 800de04:	e013      	b.n	800de2e <writePxMutex+0x52>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800de06:	9b06      	ldr	r3, [sp, #24]
 800de08:	4642      	mov	r2, r8
 800de0a:	0039      	movs	r1, r7
 800de0c:	0028      	movs	r0, r5
 800de0e:	f004 feef 	bl	8012bf0 <HAL_UART_Transmit>
 800de12:	0004      	movs	r4, r0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800de14:	2c00      	cmp	r4, #0
 800de16:	d001      	beq.n	800de1c <writePxMutex+0x40>
 800de18:	2c03      	cmp	r4, #3
 800de1a:	d1f4      	bne.n	800de06 <writePxMutex+0x2a>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800de1c:	00b6      	lsls	r6, r6, #2
 800de1e:	4b06      	ldr	r3, [pc, #24]	; (800de38 <writePxMutex+0x5c>)
 800de20:	58f0      	ldr	r0, [r6, r3]
 800de22:	f000 f9b3 	bl	800e18c <osSemaphoreRelease>
 800de26:	e002      	b.n	800de2e <writePxMutex+0x52>
	HAL_StatusTypeDef result = HAL_ERROR;
 800de28:	2401      	movs	r4, #1
 800de2a:	e7f3      	b.n	800de14 <writePxMutex+0x38>
 800de2c:	2401      	movs	r4, #1
}
 800de2e:	0020      	movs	r0, r4
 800de30:	bc80      	pop	{r7}
 800de32:	46b8      	mov	r8, r7
 800de34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de36:	46c0      	nop			; (mov r8, r8)
 800de38:	20001e48 	.word	0x20001e48

0800de3c <writePxITMutex>:
{
 800de3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de3e:	b083      	sub	sp, #12
 800de40:	0004      	movs	r4, r0
 800de42:	9101      	str	r1, [sp, #4]
 800de44:	0017      	movs	r7, r2
 800de46:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800de48:	f7ff ffaa 	bl	800dda0 <GetUart>
 800de4c:	1e06      	subs	r6, r0, #0
 800de4e:	d00f      	beq.n	800de70 <writePxITMutex+0x34>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800de50:	00a4      	lsls	r4, r4, #2
 800de52:	4b09      	ldr	r3, [pc, #36]	; (800de78 <writePxITMutex+0x3c>)
 800de54:	58e0      	ldr	r0, [r4, r3]
 800de56:	0029      	movs	r1, r5
 800de58:	f000 f968 	bl	800e12c <osSemaphoreWait>
 800de5c:	2800      	cmp	r0, #0
 800de5e:	d001      	beq.n	800de64 <writePxITMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800de60:	2001      	movs	r0, #1
 800de62:	e006      	b.n	800de72 <writePxITMutex+0x36>
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800de64:	003a      	movs	r2, r7
 800de66:	9901      	ldr	r1, [sp, #4]
 800de68:	0030      	movs	r0, r6
 800de6a:	f004 fb84 	bl	8012576 <HAL_UART_Transmit_IT>
 800de6e:	e000      	b.n	800de72 <writePxITMutex+0x36>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800de70:	2001      	movs	r0, #1
}
 800de72:	b003      	add	sp, #12
 800de74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de76:	46c0      	nop			; (mov r8, r8)
 800de78:	20001e48 	.word	0x20001e48

0800de7c <UpdateBaudrate>:
{
 800de7c:	b510      	push	{r4, lr}
 800de7e:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800de80:	f7ff ff8e 	bl	800dda0 <GetUart>
	huart->Init.BaudRate = baudrate;
 800de84:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800de86:	f004 ff5d 	bl	8012d44 <HAL_UART_Init>
}
 800de8a:	2000      	movs	r0, #0
 800de8c:	bd10      	pop	{r4, pc}
	...

0800de90 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800de90:	b510      	push	{r4, lr}
 800de92:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800de94:	d003      	beq.n	800de9e <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800de96:	2901      	cmp	r1, #1
 800de98:	d002      	beq.n	800dea0 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800de9a:	2900      	cmp	r1, #0
 800de9c:	d018      	beq.n	800ded0 <SwapUartPins+0x40>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800de9e:	bd10      	pop	{r4, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800dea0:	f7fc fdae 	bl	800aa00 <GetPort>
 800dea4:	3801      	subs	r0, #1
 800dea6:	2180      	movs	r1, #128	; 0x80
 800dea8:	0209      	lsls	r1, r1, #8
 800deaa:	000b      	movs	r3, r1
 800deac:	4103      	asrs	r3, r0
 800deae:	0018      	movs	r0, r3
 800deb0:	4b13      	ldr	r3, [pc, #76]	; (800df00 <SwapUartPins+0x70>)
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	3b01      	subs	r3, #1
 800deb6:	005b      	lsls	r3, r3, #1
 800deb8:	4a12      	ldr	r2, [pc, #72]	; (800df04 <SwapUartPins+0x74>)
 800deba:	18d3      	adds	r3, r2, r3
 800debc:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800debe:	4302      	orrs	r2, r0
 800dec0:	871a      	strh	r2, [r3, #56]	; 0x38
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800dec2:	2308      	movs	r3, #8
 800dec4:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800dec6:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800dec8:	0020      	movs	r0, r4
 800deca:	f004 ff3b 	bl	8012d44 <HAL_UART_Init>
 800dece:	e7e6      	b.n	800de9e <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800ded0:	f7fc fd96 	bl	800aa00 <GetPort>
 800ded4:	3801      	subs	r0, #1
 800ded6:	2180      	movs	r1, #128	; 0x80
 800ded8:	0209      	lsls	r1, r1, #8
 800deda:	4101      	asrs	r1, r0
 800dedc:	4b08      	ldr	r3, [pc, #32]	; (800df00 <SwapUartPins+0x70>)
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	3b01      	subs	r3, #1
 800dee2:	005b      	lsls	r3, r3, #1
 800dee4:	4a07      	ldr	r2, [pc, #28]	; (800df04 <SwapUartPins+0x74>)
 800dee6:	18d3      	adds	r3, r2, r3
 800dee8:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800deea:	438a      	bics	r2, r1
 800deec:	871a      	strh	r2, [r3, #56]	; 0x38
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800deee:	2308      	movs	r3, #8
 800def0:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800def2:	2300      	movs	r3, #0
 800def4:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800def6:	0020      	movs	r0, r4
 800def8:	f004 ff24 	bl	8012d44 <HAL_UART_Init>
}
 800defc:	e7cf      	b.n	800de9e <SwapUartPins+0xe>
 800defe:	46c0      	nop			; (mov r8, r8)
 800df00:	20000aa0 	.word	0x20000aa0
 800df04:	20002b38 	.word	0x20002b38

0800df08 <ReadPortsDir>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800df08:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800df0a:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800df0c:	2500      	movs	r5, #0
	for (uint8_t i = 1; i <= N; i++) {
 800df0e:	e005      	b.n	800df1c <ReadPortsDir+0x14>
			if (responseStatus != BOS_OK) {
				result = BOS_ERR_NoResponse;
			}
		} else {
			/* Check my own ports */
			for (uint8_t p = 1; p <= NumOfPorts; p++) {
 800df10:	3301      	adds	r3, #1
 800df12:	b2db      	uxtb	r3, r3
 800df14:	2b05      	cmp	r3, #5
 800df16:	d9fb      	bls.n	800df10 <ReadPortsDir+0x8>
	for (uint8_t i = 1; i <= N; i++) {
 800df18:	3401      	adds	r4, #1
 800df1a:	b2e4      	uxtb	r4, r4
 800df1c:	4b0c      	ldr	r3, [pc, #48]	; (800df50 <ReadPortsDir+0x48>)
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	42a3      	cmp	r3, r4
 800df22:	d313      	bcc.n	800df4c <ReadPortsDir+0x44>
		if (i != myID) {
 800df24:	4b0b      	ldr	r3, [pc, #44]	; (800df54 <ReadPortsDir+0x4c>)
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	42a3      	cmp	r3, r4
 800df2a:	d00d      	beq.n	800df48 <ReadPortsDir+0x40>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800df2c:	2200      	movs	r2, #0
 800df2e:	2113      	movs	r1, #19
 800df30:	0020      	movs	r0, r4
 800df32:	f7fa fab1 	bl	8008498 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800df36:	2032      	movs	r0, #50	; 0x32
 800df38:	f7ff fd62 	bl	800da00 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800df3c:	4b06      	ldr	r3, [pc, #24]	; (800df58 <ReadPortsDir+0x50>)
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d0e9      	beq.n	800df18 <ReadPortsDir+0x10>
				result = BOS_ERR_NoResponse;
 800df44:	2502      	movs	r5, #2
 800df46:	e7e7      	b.n	800df18 <ReadPortsDir+0x10>
			for (uint8_t p = 1; p <= NumOfPorts; p++) {
 800df48:	2301      	movs	r3, #1
 800df4a:	e7e3      	b.n	800df14 <ReadPortsDir+0xc>
			}
		}
	}

	return result;
}
 800df4c:	0028      	movs	r0, r5
 800df4e:	bd70      	pop	{r4, r5, r6, pc}
 800df50:	20000008 	.word	0x20000008
 800df54:	20000aa0 	.word	0x20000aa0
 800df58:	20000c6c 	.word	0x20000c6c

0800df5c <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800df5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df5e:	0007      	movs	r7, r0
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
 800df60:	2401      	movs	r4, #1
	uint16_t temp =0;
 800df62:	2600      	movs	r6, #0
	for (int p = 1; p <= NumOfPorts; p++) {
 800df64:	e000      	b.n	800df68 <ReadPortsDirMSG+0xc>
 800df66:	3401      	adds	r4, #1
 800df68:	2c05      	cmp	r4, #5
 800df6a:	dc0d      	bgt.n	800df88 <ReadPortsDirMSG+0x2c>
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800df6c:	b2e5      	uxtb	r5, r4
 800df6e:	0028      	movs	r0, r5
 800df70:	f7ff ff16 	bl	800dda0 <GetUart>
 800df74:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800df76:	2380      	movs	r3, #128	; 0x80
 800df78:	021b      	lsls	r3, r3, #8
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d1f3      	bne.n	800df66 <ReadPortsDirMSG+0xa>
			messageParams[temp++] = p;
 800df7e:	1c73      	adds	r3, r6, #1
 800df80:	4a05      	ldr	r2, [pc, #20]	; (800df98 <ReadPortsDirMSG+0x3c>)
 800df82:	5595      	strb	r5, [r2, r6]
 800df84:	b29e      	uxth	r6, r3
 800df86:	e7ee      	b.n	800df66 <ReadPortsDirMSG+0xa>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800df88:	0032      	movs	r2, r6
 800df8a:	2114      	movs	r1, #20
 800df8c:	0038      	movs	r0, r7
 800df8e:	f7fa fa83 	bl	8008498 <SendMessageToModule>
	return result;
}
 800df92:	2000      	movs	r0, #0
 800df94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df96:	46c0      	nop			; (mov r8, r8)
 800df98:	20000b6c 	.word	0x20000b6c

0800df9c <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800df9c:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800df9e:	2401      	movs	r4, #1
 800dfa0:	e007      	b.n	800dfb2 <UpdateMyPortsDir+0x16>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);
 800dfa2:	0020      	movs	r0, r4
 800dfa4:	f7ff fefc 	bl	800dda0 <GetUart>
 800dfa8:	2101      	movs	r1, #1
 800dfaa:	f7ff ff71 	bl	800de90 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800dfae:	3401      	adds	r4, #1
 800dfb0:	b2e4      	uxtb	r4, r4
 800dfb2:	2c05      	cmp	r4, #5
 800dfb4:	d813      	bhi.n	800dfde <UpdateMyPortsDir+0x42>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800dfb6:	4b0b      	ldr	r3, [pc, #44]	; (800dfe4 <UpdateMyPortsDir+0x48>)
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	3b01      	subs	r3, #1
 800dfbc:	005b      	lsls	r3, r3, #1
 800dfbe:	4a0a      	ldr	r2, [pc, #40]	; (800dfe8 <UpdateMyPortsDir+0x4c>)
 800dfc0:	18d3      	adds	r3, r2, r3
 800dfc2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800dfc4:	1e61      	subs	r1, r4, #1
 800dfc6:	2380      	movs	r3, #128	; 0x80
 800dfc8:	021b      	lsls	r3, r3, #8
 800dfca:	410b      	asrs	r3, r1
 800dfcc:	4213      	tst	r3, r2
 800dfce:	d1e8      	bne.n	800dfa2 <UpdateMyPortsDir+0x6>
			SwapUartPins(GetUart(p), NORMAL);
 800dfd0:	0020      	movs	r0, r4
 800dfd2:	f7ff fee5 	bl	800dda0 <GetUart>
 800dfd6:	2100      	movs	r1, #0
 800dfd8:	f7ff ff5a 	bl	800de90 <SwapUartPins>
 800dfdc:	e7e7      	b.n	800dfae <UpdateMyPortsDir+0x12>
		}
	}

	return result;
}
 800dfde:	2000      	movs	r0, #0
 800dfe0:	bd10      	pop	{r4, pc}
 800dfe2:	46c0      	nop			; (mov r8, r8)
 800dfe4:	20000aa0 	.word	0x20000aa0
 800dfe8:	20002b38 	.word	0x20002b38

0800dfec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800dfec:	4816      	ldr	r0, [pc, #88]	; (800e048 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800dfee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800dff0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800dff2:	e003      	b.n	800dffc <LoopCopyDataInit>

0800dff4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800dff4:	4b15      	ldr	r3, [pc, #84]	; (800e04c <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800dff6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800dff8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800dffa:	3104      	adds	r1, #4

0800dffc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800dffc:	4814      	ldr	r0, [pc, #80]	; (800e050 <LoopForever+0xc>)
  ldr r3, =_edata
 800dffe:	4b15      	ldr	r3, [pc, #84]	; (800e054 <LoopForever+0x10>)
  adds r2, r0, r1
 800e000:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e002:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e004:	d3f6      	bcc.n	800dff4 <CopyDataInit>
  ldr r2, =_sbss
 800e006:	4a14      	ldr	r2, [pc, #80]	; (800e058 <LoopForever+0x14>)
  b LoopFillZerobss
 800e008:	e002      	b.n	800e010 <LoopFillZerobss>

0800e00a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e00a:	2300      	movs	r3, #0
  str  r3, [r2]
 800e00c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e00e:	3204      	adds	r2, #4

0800e010 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e010:	4b12      	ldr	r3, [pc, #72]	; (800e05c <LoopForever+0x18>)
  cmp r2, r3
 800e012:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e014:	d3f9      	bcc.n	800e00a <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e016:	4812      	ldr	r0, [pc, #72]	; (800e060 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e018:	4912      	ldr	r1, [pc, #72]	; (800e064 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e01a:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e01c:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e01e:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e020:	d005      	beq.n	800e02e <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e022:	f000 f82b 	bl	800e07c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e026:	f004 fffb 	bl	8013020 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e02a:	f004 ffe2 	bl	8012ff2 <main>

0800e02e <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e02e:	480e      	ldr	r0, [pc, #56]	; (800e068 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e030:	490e      	ldr	r1, [pc, #56]	; (800e06c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e032:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e034:	480e      	ldr	r0, [pc, #56]	; (800e070 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e036:	490d      	ldr	r1, [pc, #52]	; (800e06c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e038:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e03a:	480e      	ldr	r0, [pc, #56]	; (800e074 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e03c:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e03e:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e040:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e042:	4700      	bx	r0

0800e044 <LoopForever>:


LoopForever:
    b LoopForever
 800e044:	e7fe      	b.n	800e044 <LoopForever>
 800e046:	0000      	.short	0x0000
  ldr   r0, =_estack
 800e048:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e04c:	0801ca9c 	.word	0x0801ca9c
  ldr r0, =_sdata
 800e050:	20000008 	.word	0x20000008
  ldr r3, =_edata
 800e054:	20000a7c 	.word	0x20000a7c
  ldr r2, =_sbss
 800e058:	20000a80 	.word	0x20000a80
  ldr r3, = _ebss
 800e05c:	20006f88 	.word	0x20006f88
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e060:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e064:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e068:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e06c:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e070:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e074:	1fffd800 	.word	0x1fffd800

0800e078 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e078:	e7fe      	b.n	800e078 <ADC1_COMP_IRQHandler>
	...

0800e07c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e07c:	4b11      	ldr	r3, [pc, #68]	; (800e0c4 <SystemInit+0x48>)
 800e07e:	681a      	ldr	r2, [r3, #0]
 800e080:	2101      	movs	r1, #1
 800e082:	430a      	orrs	r2, r1
 800e084:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e086:	685a      	ldr	r2, [r3, #4]
 800e088:	480f      	ldr	r0, [pc, #60]	; (800e0c8 <SystemInit+0x4c>)
 800e08a:	4002      	ands	r2, r0
 800e08c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e08e:	681a      	ldr	r2, [r3, #0]
 800e090:	480e      	ldr	r0, [pc, #56]	; (800e0cc <SystemInit+0x50>)
 800e092:	4002      	ands	r2, r0
 800e094:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	480d      	ldr	r0, [pc, #52]	; (800e0d0 <SystemInit+0x54>)
 800e09a:	4002      	ands	r2, r0
 800e09c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e09e:	685a      	ldr	r2, [r3, #4]
 800e0a0:	480c      	ldr	r0, [pc, #48]	; (800e0d4 <SystemInit+0x58>)
 800e0a2:	4002      	ands	r2, r0
 800e0a4:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a8:	200f      	movs	r0, #15
 800e0aa:	4382      	bics	r2, r0
 800e0ac:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e0ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e0b0:	4809      	ldr	r0, [pc, #36]	; (800e0d8 <SystemInit+0x5c>)
 800e0b2:	4002      	ands	r2, r0
 800e0b4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e0b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0b8:	438a      	bics	r2, r1
 800e0ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e0bc:	2200      	movs	r2, #0
 800e0be:	609a      	str	r2, [r3, #8]

}
 800e0c0:	4770      	bx	lr
 800e0c2:	46c0      	nop			; (mov r8, r8)
 800e0c4:	40021000 	.word	0x40021000
 800e0c8:	08ffb80c 	.word	0x08ffb80c
 800e0cc:	fef6ffff 	.word	0xfef6ffff
 800e0d0:	fffbffff 	.word	0xfffbffff
 800e0d4:	ffc0ffff 	.word	0xffc0ffff
 800e0d8:	fff0feac 	.word	0xfff0feac

0800e0dc <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0dc:	f3ef 8005 	mrs	r0, IPSR


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
 800e0e0:	1e43      	subs	r3, r0, #1
 800e0e2:	4198      	sbcs	r0, r3
}
 800e0e4:	4770      	bx	lr

0800e0e6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e0e6:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800e0e8:	f000 fef2 	bl	800eed0 <vTaskStartScheduler>
  
  return osOK;
}
 800e0ec:	2000      	movs	r0, #0
 800e0ee:	bd10      	pop	{r4, pc}

0800e0f0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e0f0:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e0f2:	2800      	cmp	r0, #0
 800e0f4:	d100      	bne.n	800e0f8 <osDelay+0x8>
 800e0f6:	3001      	adds	r0, #1
 800e0f8:	f000 fffa 	bl	800f0f0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e0fc:	2000      	movs	r0, #0
 800e0fe:	bd10      	pop	{r4, pc}

0800e100 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800e100:	b510      	push	{r4, lr}
 800e102:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800e104:	2901      	cmp	r1, #1
 800e106:	d005      	beq.n	800e114 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800e108:	2100      	movs	r1, #0
 800e10a:	f000 fafd 	bl	800e708 <xQueueCreateCountingSemaphore>
 800e10e:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800e110:	0020      	movs	r0, r4
 800e112:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800e114:	2203      	movs	r2, #3
 800e116:	2100      	movs	r1, #0
 800e118:	f000 fad6 	bl	800e6c8 <xQueueGenericCreate>
 800e11c:	1e04      	subs	r4, r0, #0
 800e11e:	d0f7      	beq.n	800e110 <osSemaphoreCreate+0x10>
 800e120:	2300      	movs	r3, #0
 800e122:	2200      	movs	r2, #0
 800e124:	2100      	movs	r1, #0
 800e126:	f000 faf9 	bl	800e71c <xQueueGenericSend>
    return sema;
 800e12a:	e7f1      	b.n	800e110 <osSemaphoreCreate+0x10>

0800e12c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e12c:	b570      	push	{r4, r5, r6, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	0005      	movs	r5, r0
 800e132:	000e      	movs	r6, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e134:	2300      	movs	r3, #0
 800e136:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800e138:	2800      	cmp	r0, #0
 800e13a:	d01e      	beq.n	800e17a <osSemaphoreWait+0x4e>
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800e13c:	f7ff ffce 	bl	800e0dc <inHandlerMode>
 800e140:	1e04      	subs	r4, r0, #0
 800e142:	d00f      	beq.n	800e164 <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e144:	aa01      	add	r2, sp, #4
 800e146:	2100      	movs	r1, #0
 800e148:	0028      	movs	r0, r5
 800e14a:	f000 fc52 	bl	800e9f2 <xQueueReceiveFromISR>
 800e14e:	2801      	cmp	r0, #1
 800e150:	d115      	bne.n	800e17e <osSemaphoreWait+0x52>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e152:	9c01      	ldr	r4, [sp, #4]
 800e154:	2c00      	cmp	r4, #0
 800e156:	d00d      	beq.n	800e174 <osSemaphoreWait+0x48>
 800e158:	4b0b      	ldr	r3, [pc, #44]	; (800e188 <osSemaphoreWait+0x5c>)
 800e15a:	2280      	movs	r2, #128	; 0x80
 800e15c:	0552      	lsls	r2, r2, #21
 800e15e:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800e160:	2400      	movs	r4, #0
 800e162:	e007      	b.n	800e174 <osSemaphoreWait+0x48>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e164:	2300      	movs	r3, #0
 800e166:	0032      	movs	r2, r6
 800e168:	2100      	movs	r1, #0
 800e16a:	0028      	movs	r0, r5
 800e16c:	f000 fbb2 	bl	800e8d4 <xQueueGenericReceive>
 800e170:	2801      	cmp	r0, #1
 800e172:	d106      	bne.n	800e182 <osSemaphoreWait+0x56>
}
 800e174:	0020      	movs	r0, r4
 800e176:	b002      	add	sp, #8
 800e178:	bd70      	pop	{r4, r5, r6, pc}
    return osErrorParameter;
 800e17a:	2480      	movs	r4, #128	; 0x80
 800e17c:	e7fa      	b.n	800e174 <osSemaphoreWait+0x48>
      return osErrorOS;
 800e17e:	24ff      	movs	r4, #255	; 0xff
 800e180:	e7f8      	b.n	800e174 <osSemaphoreWait+0x48>
    return osErrorOS;
 800e182:	24ff      	movs	r4, #255	; 0xff
 800e184:	e7f6      	b.n	800e174 <osSemaphoreWait+0x48>
 800e186:	46c0      	nop			; (mov r8, r8)
 800e188:	e000ed04 	.word	0xe000ed04

0800e18c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e18c:	b510      	push	{r4, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	0004      	movs	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800e192:	2300      	movs	r3, #0
 800e194:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 800e196:	f7ff ffa1 	bl	800e0dc <inHandlerMode>
 800e19a:	2800      	cmp	r0, #0
 800e19c:	d00e      	beq.n	800e1bc <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e19e:	a901      	add	r1, sp, #4
 800e1a0:	0020      	movs	r0, r4
 800e1a2:	f000 fb67 	bl	800e874 <xQueueGiveFromISR>
 800e1a6:	2801      	cmp	r0, #1
 800e1a8:	d115      	bne.n	800e1d6 <osSemaphoreRelease+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e1aa:	9b01      	ldr	r3, [sp, #4]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d014      	beq.n	800e1da <osSemaphoreRelease+0x4e>
 800e1b0:	4b0b      	ldr	r3, [pc, #44]	; (800e1e0 <osSemaphoreRelease+0x54>)
 800e1b2:	2280      	movs	r2, #128	; 0x80
 800e1b4:	0552      	lsls	r2, r2, #21
 800e1b6:	601a      	str	r2, [r3, #0]
  osStatus result = osOK;
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	e008      	b.n	800e1ce <osSemaphoreRelease+0x42>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e1bc:	2300      	movs	r3, #0
 800e1be:	2200      	movs	r2, #0
 800e1c0:	2100      	movs	r1, #0
 800e1c2:	0020      	movs	r0, r4
 800e1c4:	f000 faaa 	bl	800e71c <xQueueGenericSend>
 800e1c8:	2801      	cmp	r0, #1
 800e1ca:	d002      	beq.n	800e1d2 <osSemaphoreRelease+0x46>
      result = osErrorOS;
 800e1cc:	20ff      	movs	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800e1ce:	b002      	add	sp, #8
 800e1d0:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 800e1d2:	2000      	movs	r0, #0
 800e1d4:	e7fb      	b.n	800e1ce <osSemaphoreRelease+0x42>
      return osErrorOS;
 800e1d6:	20ff      	movs	r0, #255	; 0xff
 800e1d8:	e7f9      	b.n	800e1ce <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800e1da:	2000      	movs	r0, #0
 800e1dc:	e7f7      	b.n	800e1ce <osSemaphoreRelease+0x42>
 800e1de:	46c0      	nop			; (mov r8, r8)
 800e1e0:	e000ed04 	.word	0xe000ed04

0800e1e4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e1e4:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e1e6:	f001 f92b 	bl	800f440 <xTaskGetSchedulerState>
 800e1ea:	2801      	cmp	r0, #1
 800e1ec:	d100      	bne.n	800e1f0 <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800e1ee:	bd10      	pop	{r4, pc}
    xPortSysTickHandler();
 800e1f0:	f001 fd68 	bl	800fcc4 <xPortSysTickHandler>
}
 800e1f4:	e7fb      	b.n	800e1ee <osSystickHandler+0xa>

0800e1f6 <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const int8_t * pcCommandString )
{
 800e1f6:	0003      	movs	r3, r0
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800e1f8:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800e1fa:	2000      	movs	r0, #0

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800e1fc:	e005      	b.n	800e20a <prvGetNumberOfParameters+0x14>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800e1fe:	2901      	cmp	r1, #1
 800e200:	d002      	beq.n	800e208 <prvGetNumberOfParameters+0x12>
			{
				cParameters++;
 800e202:	3001      	adds	r0, #1
 800e204:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800e206:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800e208:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800e20a:	2200      	movs	r2, #0
 800e20c:	569a      	ldrsb	r2, [r3, r2]
 800e20e:	2a00      	cmp	r2, #0
 800e210:	d003      	beq.n	800e21a <prvGetNumberOfParameters+0x24>
		if( ( *pcCommandString ) == ' ' )
 800e212:	2a20      	cmp	r2, #32
 800e214:	d0f3      	beq.n	800e1fe <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800e216:	2100      	movs	r1, #0
 800e218:	e7f6      	b.n	800e208 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800e21a:	2901      	cmp	r1, #1
 800e21c:	d000      	beq.n	800e220 <prvGetNumberOfParameters+0x2a>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800e21e:	4770      	bx	lr
		cParameters--;
 800e220:	3801      	subs	r0, #1
 800e222:	b240      	sxtb	r0, r0
 800e224:	e7fb      	b.n	800e21e <prvGetNumberOfParameters+0x28>
	...

0800e228 <FreeRTOS_CLIRegisterCommand>:
{
 800e228:	b570      	push	{r4, r5, r6, lr}
 800e22a:	0005      	movs	r5, r0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e22c:	2008      	movs	r0, #8
 800e22e:	f001 fdab 	bl	800fd88 <pvPortMalloc>
 800e232:	1e04      	subs	r4, r0, #0
	if( pxNewListItem != NULL )
 800e234:	d00c      	beq.n	800e250 <FreeRTOS_CLIRegisterCommand+0x28>
		taskENTER_CRITICAL();
 800e236:	f001 fd05 	bl	800fc44 <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e23a:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800e23c:	2300      	movs	r3, #0
 800e23e:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800e240:	4b04      	ldr	r3, [pc, #16]	; (800e254 <FreeRTOS_CLIRegisterCommand+0x2c>)
 800e242:	681a      	ldr	r2, [r3, #0]
 800e244:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800e246:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800e248:	f001 fd08 	bl	800fc5c <vPortExitCritical>
		xReturn = pdPASS;
 800e24c:	2001      	movs	r0, #1
}
 800e24e:	bd70      	pop	{r4, r5, r6, pc}
portBASE_TYPE xReturn = pdFAIL;
 800e250:	2000      	movs	r0, #0
	return xReturn;
 800e252:	e7fc      	b.n	800e24e <FreeRTOS_CLIRegisterCommand+0x26>
 800e254:	200000b8 	.word	0x200000b8

0800e258 <FreeRTOS_CLIProcessCommand>:
{
 800e258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e25a:	46ce      	mov	lr, r9
 800e25c:	4647      	mov	r7, r8
 800e25e:	b580      	push	{r7, lr}
 800e260:	0006      	movs	r6, r0
 800e262:	4688      	mov	r8, r1
 800e264:	4691      	mov	r9, r2
	if( pxCommand == NULL )
 800e266:	4b2d      	ldr	r3, [pc, #180]	; (800e31c <FreeRTOS_CLIProcessCommand+0xc4>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d018      	beq.n	800e2a0 <FreeRTOS_CLIProcessCommand+0x48>
portBASE_TYPE xReturn = pdTRUE;
 800e26e:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e270:	4b2a      	ldr	r3, [pc, #168]	; (800e31c <FreeRTOS_CLIProcessCommand+0xc4>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d001      	beq.n	800e27c <FreeRTOS_CLIProcessCommand+0x24>
 800e278:	2c00      	cmp	r4, #0
 800e27a:	d03e      	beq.n	800e2fa <FreeRTOS_CLIProcessCommand+0xa2>
	else if( pxCommand != NULL )
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d045      	beq.n	800e30c <FreeRTOS_CLIProcessCommand+0xb4>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	0032      	movs	r2, r6
 800e286:	4649      	mov	r1, r9
 800e288:	4640      	mov	r0, r8
 800e28a:	4798      	blx	r3
 800e28c:	1e04      	subs	r4, r0, #0
		if( xReturn == pdFALSE )
 800e28e:	d102      	bne.n	800e296 <FreeRTOS_CLIProcessCommand+0x3e>
			pxCommand = NULL;
 800e290:	4b22      	ldr	r3, [pc, #136]	; (800e31c <FreeRTOS_CLIProcessCommand+0xc4>)
 800e292:	2200      	movs	r2, #0
 800e294:	601a      	str	r2, [r3, #0]
}
 800e296:	0020      	movs	r0, r4
 800e298:	bcc0      	pop	{r6, r7}
 800e29a:	46b9      	mov	r9, r7
 800e29c:	46b0      	mov	r8, r6
 800e29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e2a0:	4b1f      	ldr	r3, [pc, #124]	; (800e320 <FreeRTOS_CLIProcessCommand+0xc8>)
 800e2a2:	4a1e      	ldr	r2, [pc, #120]	; (800e31c <FreeRTOS_CLIProcessCommand+0xc4>)
 800e2a4:	3304      	adds	r3, #4
 800e2a6:	6013      	str	r3, [r2, #0]
 800e2a8:	e008      	b.n	800e2bc <FreeRTOS_CLIProcessCommand+0x64>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e2aa:	0021      	movs	r1, r4
 800e2ac:	0030      	movs	r0, r6
 800e2ae:	f005 fb4c 	bl	801394a <strncmp>
 800e2b2:	1e04      	subs	r4, r0, #0
 800e2b4:	d012      	beq.n	800e2dc <FreeRTOS_CLIProcessCommand+0x84>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e2b6:	686a      	ldr	r2, [r5, #4]
 800e2b8:	4b18      	ldr	r3, [pc, #96]	; (800e31c <FreeRTOS_CLIProcessCommand+0xc4>)
 800e2ba:	601a      	str	r2, [r3, #0]
 800e2bc:	4b17      	ldr	r3, [pc, #92]	; (800e31c <FreeRTOS_CLIProcessCommand+0xc4>)
 800e2be:	681d      	ldr	r5, [r3, #0]
 800e2c0:	2d00      	cmp	r5, #0
 800e2c2:	d018      	beq.n	800e2f6 <FreeRTOS_CLIProcessCommand+0x9e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e2c4:	682f      	ldr	r7, [r5, #0]
 800e2c6:	683c      	ldr	r4, [r7, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e2c8:	0020      	movs	r0, r4
 800e2ca:	f7f1 ff25 	bl	8000118 <strlen>
 800e2ce:	0002      	movs	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e2d0:	5633      	ldrsb	r3, [r6, r0]
 800e2d2:	2b20      	cmp	r3, #32
 800e2d4:	d0e9      	beq.n	800e2aa <FreeRTOS_CLIProcessCommand+0x52>
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d1ed      	bne.n	800e2b6 <FreeRTOS_CLIProcessCommand+0x5e>
 800e2da:	e7e6      	b.n	800e2aa <FreeRTOS_CLIProcessCommand+0x52>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e2dc:	250c      	movs	r5, #12
 800e2de:	577d      	ldrsb	r5, [r7, r5]
 800e2e0:	2d00      	cmp	r5, #0
 800e2e2:	da01      	bge.n	800e2e8 <FreeRTOS_CLIProcessCommand+0x90>
portBASE_TYPE xReturn = pdTRUE;
 800e2e4:	2401      	movs	r4, #1
 800e2e6:	e7c3      	b.n	800e270 <FreeRTOS_CLIProcessCommand+0x18>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800e2e8:	0030      	movs	r0, r6
 800e2ea:	f7ff ff84 	bl	800e1f6 <prvGetNumberOfParameters>
 800e2ee:	4285      	cmp	r5, r0
 800e2f0:	d1be      	bne.n	800e270 <FreeRTOS_CLIProcessCommand+0x18>
portBASE_TYPE xReturn = pdTRUE;
 800e2f2:	3401      	adds	r4, #1
 800e2f4:	e7bc      	b.n	800e270 <FreeRTOS_CLIProcessCommand+0x18>
 800e2f6:	2401      	movs	r4, #1
 800e2f8:	e7ba      	b.n	800e270 <FreeRTOS_CLIProcessCommand+0x18>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e2fa:	464a      	mov	r2, r9
 800e2fc:	4909      	ldr	r1, [pc, #36]	; (800e324 <FreeRTOS_CLIProcessCommand+0xcc>)
 800e2fe:	4640      	mov	r0, r8
 800e300:	f005 fb35 	bl	801396e <strncpy>
		pxCommand = NULL;
 800e304:	4b05      	ldr	r3, [pc, #20]	; (800e31c <FreeRTOS_CLIProcessCommand+0xc4>)
 800e306:	2200      	movs	r2, #0
 800e308:	601a      	str	r2, [r3, #0]
 800e30a:	e7c4      	b.n	800e296 <FreeRTOS_CLIProcessCommand+0x3e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e30c:	464a      	mov	r2, r9
 800e30e:	4906      	ldr	r1, [pc, #24]	; (800e328 <FreeRTOS_CLIProcessCommand+0xd0>)
 800e310:	4640      	mov	r0, r8
 800e312:	f005 fb2c 	bl	801396e <strncpy>
		xReturn = pdFALSE;
 800e316:	2400      	movs	r4, #0
	return xReturn;
 800e318:	e7bd      	b.n	800e296 <FreeRTOS_CLIProcessCommand+0x3e>
 800e31a:	46c0      	nop			; (mov r8, r8)
 800e31c:	20002ba8 	.word	0x20002ba8
 800e320:	200000b8 	.word	0x200000b8
 800e324:	0801c494 	.word	0x0801c494
 800e328:	0801c4ec 	.word	0x0801c4ec

0800e32c <FreeRTOS_CLIGetOutputBuffer>:
}
 800e32c:	4800      	ldr	r0, [pc, #0]	; (800e330 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800e32e:	4770      	bx	lr
 800e330:	20002bbc 	.word	0x20002bbc

0800e334 <FreeRTOS_CLIGetParameter>:
{
 800e334:	b510      	push	{r4, lr}
 800e336:	0014      	movs	r4, r2
	*pxParameterStringLength = 0;
 800e338:	2300      	movs	r3, #0
 800e33a:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800e33c:	2200      	movs	r2, #0
	while( uxParametersFound < uxWantedParameter )
 800e33e:	e011      	b.n	800e364 <FreeRTOS_CLIGetParameter+0x30>
			pcCommandString++;
 800e340:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e342:	2300      	movs	r3, #0
 800e344:	56c3      	ldrsb	r3, [r0, r3]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d001      	beq.n	800e34e <FreeRTOS_CLIGetParameter+0x1a>
 800e34a:	2b20      	cmp	r3, #32
 800e34c:	d1f8      	bne.n	800e340 <FreeRTOS_CLIGetParameter+0xc>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e34e:	2300      	movs	r3, #0
 800e350:	56c3      	ldrsb	r3, [r0, r3]
 800e352:	2b20      	cmp	r3, #32
 800e354:	d101      	bne.n	800e35a <FreeRTOS_CLIGetParameter+0x26>
			pcCommandString++;
 800e356:	3001      	adds	r0, #1
 800e358:	e7f9      	b.n	800e34e <FreeRTOS_CLIGetParameter+0x1a>
		if( *pcCommandString != 0x00 )
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d017      	beq.n	800e38e <FreeRTOS_CLIGetParameter+0x5a>
			uxParametersFound++;
 800e35e:	3201      	adds	r2, #1
			if( uxParametersFound == uxWantedParameter )
 800e360:	4291      	cmp	r1, r2
 800e362:	d012      	beq.n	800e38a <FreeRTOS_CLIGetParameter+0x56>
	while( uxParametersFound < uxWantedParameter )
 800e364:	428a      	cmp	r2, r1
 800e366:	d3ec      	bcc.n	800e342 <FreeRTOS_CLIGetParameter+0xe>
const int8_t *pcReturn = NULL;
 800e368:	2000      	movs	r0, #0
}
 800e36a:	bd10      	pop	{r4, pc}
					( *pxParameterStringLength )++;
 800e36c:	6823      	ldr	r3, [r4, #0]
 800e36e:	3301      	adds	r3, #1
 800e370:	6023      	str	r3, [r4, #0]
					pcCommandString++;
 800e372:	3201      	adds	r2, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e374:	2300      	movs	r3, #0
 800e376:	56d3      	ldrsb	r3, [r2, r3]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d001      	beq.n	800e380 <FreeRTOS_CLIGetParameter+0x4c>
 800e37c:	2b20      	cmp	r3, #32
 800e37e:	d1f5      	bne.n	800e36c <FreeRTOS_CLIGetParameter+0x38>
				if( *pxParameterStringLength == 0 )
 800e380:	6823      	ldr	r3, [r4, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d1f1      	bne.n	800e36a <FreeRTOS_CLIGetParameter+0x36>
					pcReturn = NULL;
 800e386:	2000      	movs	r0, #0
	return pcReturn;
 800e388:	e7ef      	b.n	800e36a <FreeRTOS_CLIGetParameter+0x36>
 800e38a:	0002      	movs	r2, r0
 800e38c:	e7f2      	b.n	800e374 <FreeRTOS_CLIGetParameter+0x40>
const int8_t *pcReturn = NULL;
 800e38e:	2000      	movs	r0, #0
 800e390:	e7eb      	b.n	800e36a <FreeRTOS_CLIGetParameter+0x36>
	...

0800e394 <prvHelpCommand>:
{
 800e394:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e396:	b083      	sub	sp, #12
 800e398:	0007      	movs	r7, r0
 800e39a:	000e      	movs	r6, r1
 800e39c:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e3a2:	aa01      	add	r2, sp, #4
 800e3a4:	2101      	movs	r1, #1
 800e3a6:	f7ff ffc5 	bl	800e334 <FreeRTOS_CLIGetParameter>
 800e3aa:	1e04      	subs	r4, r0, #0
 800e3ac:	4b31      	ldr	r3, [pc, #196]	; (800e474 <prvHelpCommand+0xe0>)
 800e3ae:	6058      	str	r0, [r3, #4]
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800e3b0:	d021      	beq.n	800e3f6 <prvHelpCommand+0x62>
 800e3b2:	2206      	movs	r2, #6
 800e3b4:	4930      	ldr	r1, [pc, #192]	; (800e478 <prvHelpCommand+0xe4>)
 800e3b6:	f005 fac8 	bl	801394a <strncmp>
 800e3ba:	1e05      	subs	r5, r0, #0
 800e3bc:	d11b      	bne.n	800e3f6 <prvHelpCommand+0x62>
		if( str == NumOfParamsHelpStrings )
 800e3be:	4b2d      	ldr	r3, [pc, #180]	; (800e474 <prvHelpCommand+0xe0>)
 800e3c0:	7a1b      	ldrb	r3, [r3, #8]
 800e3c2:	2b07      	cmp	r3, #7
 800e3c4:	d00f      	beq.n	800e3e6 <prvHelpCommand+0x52>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e3c6:	4a2b      	ldr	r2, [pc, #172]	; (800e474 <prvHelpCommand+0xe0>)
 800e3c8:	7a13      	ldrb	r3, [r2, #8]
 800e3ca:	1c5c      	adds	r4, r3, #1
 800e3cc:	b2e4      	uxtb	r4, r4
 800e3ce:	7214      	strb	r4, [r2, #8]
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	4a2a      	ldr	r2, [pc, #168]	; (800e47c <prvHelpCommand+0xe8>)
 800e3d4:	5899      	ldr	r1, [r3, r2]
 800e3d6:	0032      	movs	r2, r6
 800e3d8:	0038      	movs	r0, r7
 800e3da:	f005 fac8 	bl	801396e <strncpy>
		if( str == NumOfParamsHelpStrings )
 800e3de:	2c07      	cmp	r4, #7
 800e3e0:	d005      	beq.n	800e3ee <prvHelpCommand+0x5a>
			xReturn = pdTRUE;
 800e3e2:	2501      	movs	r5, #1
 800e3e4:	e009      	b.n	800e3fa <prvHelpCommand+0x66>
			str = 0;
 800e3e6:	4b23      	ldr	r3, [pc, #140]	; (800e474 <prvHelpCommand+0xe0>)
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	721a      	strb	r2, [r3, #8]
 800e3ec:	e7eb      	b.n	800e3c6 <prvHelpCommand+0x32>
			xReturn = pdFALSE; str = 0;
 800e3ee:	4b21      	ldr	r3, [pc, #132]	; (800e474 <prvHelpCommand+0xe0>)
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	721a      	strb	r2, [r3, #8]
 800e3f4:	e001      	b.n	800e3fa <prvHelpCommand+0x66>
	else if (pcParameterString1 == NULL)
 800e3f6:	2c00      	cmp	r4, #0
 800e3f8:	d002      	beq.n	800e400 <prvHelpCommand+0x6c>
}
 800e3fa:	0028      	movs	r0, r5
 800e3fc:	b003      	add	sp, #12
 800e3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800e400:	4b1c      	ldr	r3, [pc, #112]	; (800e474 <prvHelpCommand+0xe0>)
 800e402:	68db      	ldr	r3, [r3, #12]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d023      	beq.n	800e450 <prvHelpCommand+0xbc>
		if (counter > numOfBosCommands) {
 800e408:	4b1a      	ldr	r3, [pc, #104]	; (800e474 <prvHelpCommand+0xe0>)
 800e40a:	7c1c      	ldrb	r4, [r3, #16]
 800e40c:	4b1c      	ldr	r3, [pc, #112]	; (800e480 <prvHelpCommand+0xec>)
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	429c      	cmp	r4, r3
 800e412:	d924      	bls.n	800e45e <prvHelpCommand+0xca>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800e414:	4b17      	ldr	r3, [pc, #92]	; (800e474 <prvHelpCommand+0xe0>)
 800e416:	68db      	ldr	r3, [r3, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	6859      	ldr	r1, [r3, #4]
 800e41c:	0032      	movs	r2, r6
 800e41e:	3a08      	subs	r2, #8
 800e420:	0038      	movs	r0, r7
 800e422:	3008      	adds	r0, #8
 800e424:	f005 faa3 	bl	801396e <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800e428:	1c78      	adds	r0, r7, #1
 800e42a:	4916      	ldr	r1, [pc, #88]	; (800e484 <prvHelpCommand+0xf0>)
 800e42c:	f005 fa85 	bl	801393a <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800e430:	2328      	movs	r3, #40	; 0x28
 800e432:	703b      	strb	r3, [r7, #0]
 800e434:	3301      	adds	r3, #1
 800e436:	71bb      	strb	r3, [r7, #6]
 800e438:	3b09      	subs	r3, #9
 800e43a:	71fb      	strb	r3, [r7, #7]
		pxCommand = pxCommand->pxNext;
 800e43c:	4b0d      	ldr	r3, [pc, #52]	; (800e474 <prvHelpCommand+0xe0>)
 800e43e:	68da      	ldr	r2, [r3, #12]
 800e440:	6852      	ldr	r2, [r2, #4]
 800e442:	60da      	str	r2, [r3, #12]
		counter++;
 800e444:	3401      	adds	r4, #1
 800e446:	741c      	strb	r4, [r3, #16]
		if( pxCommand == NULL )
 800e448:	2a00      	cmp	r2, #0
 800e44a:	d011      	beq.n	800e470 <prvHelpCommand+0xdc>
			xReturn = pdTRUE;
 800e44c:	2501      	movs	r5, #1
	return xReturn;
 800e44e:	e7d4      	b.n	800e3fa <prvHelpCommand+0x66>
			pxCommand = &xRegisteredCommands;
 800e450:	4a08      	ldr	r2, [pc, #32]	; (800e474 <prvHelpCommand+0xe0>)
 800e452:	4b0d      	ldr	r3, [pc, #52]	; (800e488 <prvHelpCommand+0xf4>)
 800e454:	3304      	adds	r3, #4
 800e456:	60d3      	str	r3, [r2, #12]
			counter = 1;
 800e458:	2301      	movs	r3, #1
 800e45a:	7413      	strb	r3, [r2, #16]
 800e45c:	e7d4      	b.n	800e408 <prvHelpCommand+0x74>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800e45e:	4b05      	ldr	r3, [pc, #20]	; (800e474 <prvHelpCommand+0xe0>)
 800e460:	68db      	ldr	r3, [r3, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	6859      	ldr	r1, [r3, #4]
 800e466:	0032      	movs	r2, r6
 800e468:	0038      	movs	r0, r7
 800e46a:	f005 fa80 	bl	801396e <strncpy>
 800e46e:	e7e5      	b.n	800e43c <prvHelpCommand+0xa8>
			xReturn = pdFALSE;
 800e470:	2500      	movs	r5, #0
 800e472:	e7c2      	b.n	800e3fa <prvHelpCommand+0x66>
 800e474:	20002ba8 	.word	0x20002ba8
 800e478:	0801b034 	.word	0x0801b034
 800e47c:	20000034 	.word	0x20000034
 800e480:	200011e4 	.word	0x200011e4
 800e484:	080197b2 	.word	0x080197b2
 800e488:	200000b8 	.word	0x200000b8

0800e48c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e48c:	0003      	movs	r3, r0
 800e48e:	3308      	adds	r3, #8
 800e490:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e492:	2201      	movs	r2, #1
 800e494:	4252      	negs	r2, r2
 800e496:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e498:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e49a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e49c:	2300      	movs	r3, #0
 800e49e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e4a0:	4770      	bx	lr

0800e4a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e4a6:	4770      	bx	lr

0800e4a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e4a8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e4aa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e4ac:	689a      	ldr	r2, [r3, #8]
 800e4ae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e4b0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e4b2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e4b4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e4b6:	6803      	ldr	r3, [r0, #0]
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	6003      	str	r3, [r0, #0]
}
 800e4bc:	4770      	bx	lr

0800e4be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e4be:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e4c0:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e4c2:	1c63      	adds	r3, r4, #1
 800e4c4:	d010      	beq.n	800e4e8 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4c6:	0003      	movs	r3, r0
 800e4c8:	3308      	adds	r3, #8
 800e4ca:	001a      	movs	r2, r3
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	681d      	ldr	r5, [r3, #0]
 800e4d0:	42a5      	cmp	r5, r4
 800e4d2:	d9fa      	bls.n	800e4ca <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e4d4:	6853      	ldr	r3, [r2, #4]
 800e4d6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e4d8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e4da:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e4dc:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e4de:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e4e0:	6803      	ldr	r3, [r0, #0]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	6003      	str	r3, [r0, #0]
}
 800e4e6:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800e4e8:	6902      	ldr	r2, [r0, #16]
 800e4ea:	e7f3      	b.n	800e4d4 <vListInsert+0x16>

0800e4ec <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e4ec:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e4ee:	6841      	ldr	r1, [r0, #4]
 800e4f0:	6882      	ldr	r2, [r0, #8]
 800e4f2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e4f4:	6841      	ldr	r1, [r0, #4]
 800e4f6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e4f8:	685a      	ldr	r2, [r3, #4]
 800e4fa:	4282      	cmp	r2, r0
 800e4fc:	d005      	beq.n	800e50a <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e4fe:	2200      	movs	r2, #0
 800e500:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	1e50      	subs	r0, r2, #1
 800e506:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800e508:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e50a:	6882      	ldr	r2, [r0, #8]
 800e50c:	605a      	str	r2, [r3, #4]
 800e50e:	e7f6      	b.n	800e4fe <uxListRemove+0x12>

0800e510 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e510:	b510      	push	{r4, lr}
 800e512:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e514:	f001 fb96 	bl	800fc44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e518:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e51a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d004      	beq.n	800e52a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800e520:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800e522:	f001 fb9b 	bl	800fc5c <vPortExitCritical>

	return xReturn;
}
 800e526:	0020      	movs	r0, r4
 800e528:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800e52a:	2401      	movs	r4, #1
 800e52c:	e7f9      	b.n	800e522 <prvIsQueueFull+0x12>

0800e52e <prvIsQueueEmpty>:
{
 800e52e:	b510      	push	{r4, lr}
 800e530:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800e532:	f001 fb87 	bl	800fc44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e536:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d104      	bne.n	800e546 <prvIsQueueEmpty+0x18>
			xReturn = pdTRUE;
 800e53c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800e53e:	f001 fb8d 	bl	800fc5c <vPortExitCritical>
}
 800e542:	0020      	movs	r0, r4
 800e544:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800e546:	2400      	movs	r4, #0
 800e548:	e7f9      	b.n	800e53e <prvIsQueueEmpty+0x10>

0800e54a <prvCopyDataToQueue>:
{
 800e54a:	b570      	push	{r4, r5, r6, lr}
 800e54c:	0004      	movs	r4, r0
 800e54e:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e550:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e552:	2a00      	cmp	r2, #0
 800e554:	d10d      	bne.n	800e572 <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e556:	6803      	ldr	r3, [r0, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d004      	beq.n	800e566 <prvCopyDataToQueue+0x1c>
BaseType_t xReturn = pdFALSE;
 800e55c:	2000      	movs	r0, #0
	++( pxQueue->uxMessagesWaiting );
 800e55e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e560:	3301      	adds	r3, #1
 800e562:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800e564:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e566:	6840      	ldr	r0, [r0, #4]
 800e568:	f000 ffba 	bl	800f4e0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800e56c:	2300      	movs	r3, #0
 800e56e:	6063      	str	r3, [r4, #4]
 800e570:	e7f5      	b.n	800e55e <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800e572:	2d00      	cmp	r5, #0
 800e574:	d10e      	bne.n	800e594 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e576:	6880      	ldr	r0, [r0, #8]
 800e578:	f004 ffaa 	bl	80134d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e57c:	68a3      	ldr	r3, [r4, #8]
 800e57e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e580:	4694      	mov	ip, r2
 800e582:	4463      	add	r3, ip
 800e584:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e586:	6862      	ldr	r2, [r4, #4]
 800e588:	4293      	cmp	r3, r2
 800e58a:	d31e      	bcc.n	800e5ca <prvCopyDataToQueue+0x80>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e58c:	6823      	ldr	r3, [r4, #0]
 800e58e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800e590:	0028      	movs	r0, r5
 800e592:	e7e4      	b.n	800e55e <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e594:	68c0      	ldr	r0, [r0, #12]
 800e596:	f004 ff9b 	bl	80134d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e59a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e59c:	425a      	negs	r2, r3
 800e59e:	68e1      	ldr	r1, [r4, #12]
 800e5a0:	1acb      	subs	r3, r1, r3
 800e5a2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e5a4:	6821      	ldr	r1, [r4, #0]
 800e5a6:	428b      	cmp	r3, r1
 800e5a8:	d203      	bcs.n	800e5b2 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e5aa:	6863      	ldr	r3, [r4, #4]
 800e5ac:	469c      	mov	ip, r3
 800e5ae:	4462      	add	r2, ip
 800e5b0:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800e5b2:	2d02      	cmp	r5, #2
 800e5b4:	d001      	beq.n	800e5ba <prvCopyDataToQueue+0x70>
BaseType_t xReturn = pdFALSE;
 800e5b6:	2000      	movs	r0, #0
 800e5b8:	e7d1      	b.n	800e55e <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d006      	beq.n	800e5ce <prvCopyDataToQueue+0x84>
				--( pxQueue->uxMessagesWaiting );
 800e5c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e5c2:	3b01      	subs	r3, #1
 800e5c4:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
 800e5c6:	2000      	movs	r0, #0
 800e5c8:	e7c9      	b.n	800e55e <prvCopyDataToQueue+0x14>
 800e5ca:	0028      	movs	r0, r5
 800e5cc:	e7c7      	b.n	800e55e <prvCopyDataToQueue+0x14>
 800e5ce:	2000      	movs	r0, #0
 800e5d0:	e7c5      	b.n	800e55e <prvCopyDataToQueue+0x14>

0800e5d2 <prvCopyDataFromQueue>:
{
 800e5d2:	b510      	push	{r4, lr}
 800e5d4:	0003      	movs	r3, r0
 800e5d6:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e5d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e5da:	2a00      	cmp	r2, #0
 800e5dc:	d00a      	beq.n	800e5f4 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e5de:	68d9      	ldr	r1, [r3, #12]
 800e5e0:	1889      	adds	r1, r1, r2
 800e5e2:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e5e4:	685c      	ldr	r4, [r3, #4]
 800e5e6:	42a1      	cmp	r1, r4
 800e5e8:	d301      	bcc.n	800e5ee <prvCopyDataFromQueue+0x1c>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e5ea:	6819      	ldr	r1, [r3, #0]
 800e5ec:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e5ee:	68d9      	ldr	r1, [r3, #12]
 800e5f0:	f004 ff6e 	bl	80134d0 <memcpy>
}
 800e5f4:	bd10      	pop	{r4, pc}

0800e5f6 <prvUnlockQueue>:
{
 800e5f6:	b510      	push	{r4, lr}
 800e5f8:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800e5fa:	f001 fb23 	bl	800fc44 <vPortEnterCritical>
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e5fe:	e002      	b.n	800e606 <prvUnlockQueue+0x10>
			--( pxQueue->xTxLock );
 800e600:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e602:	3b01      	subs	r3, #1
 800e604:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e606:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e608:	2b00      	cmp	r3, #0
 800e60a:	dd0b      	ble.n	800e624 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e60c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d008      	beq.n	800e624 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e612:	0020      	movs	r0, r4
 800e614:	3024      	adds	r0, #36	; 0x24
 800e616:	f000 fe9d 	bl	800f354 <xTaskRemoveFromEventList>
 800e61a:	2800      	cmp	r0, #0
 800e61c:	d0f0      	beq.n	800e600 <prvUnlockQueue+0xa>
						vTaskMissedYield();
 800e61e:	f000 ff09 	bl	800f434 <vTaskMissedYield>
 800e622:	e7ed      	b.n	800e600 <prvUnlockQueue+0xa>
		pxQueue->xTxLock = queueUNLOCKED;
 800e624:	2301      	movs	r3, #1
 800e626:	425b      	negs	r3, r3
 800e628:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
 800e62a:	f001 fb17 	bl	800fc5c <vPortExitCritical>
	taskENTER_CRITICAL();
 800e62e:	f001 fb09 	bl	800fc44 <vPortEnterCritical>
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e632:	e002      	b.n	800e63a <prvUnlockQueue+0x44>
				--( pxQueue->xRxLock );
 800e634:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e636:	3b01      	subs	r3, #1
 800e638:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e63a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	dd0b      	ble.n	800e658 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e640:	6923      	ldr	r3, [r4, #16]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d008      	beq.n	800e658 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e646:	0020      	movs	r0, r4
 800e648:	3010      	adds	r0, #16
 800e64a:	f000 fe83 	bl	800f354 <xTaskRemoveFromEventList>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d0f0      	beq.n	800e634 <prvUnlockQueue+0x3e>
					vTaskMissedYield();
 800e652:	f000 feef 	bl	800f434 <vTaskMissedYield>
 800e656:	e7ed      	b.n	800e634 <prvUnlockQueue+0x3e>
		pxQueue->xRxLock = queueUNLOCKED;
 800e658:	2301      	movs	r3, #1
 800e65a:	425b      	negs	r3, r3
 800e65c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800e65e:	f001 fafd 	bl	800fc5c <vPortExitCritical>
}
 800e662:	bd10      	pop	{r4, pc}

0800e664 <xQueueGenericReset>:
{
 800e664:	b570      	push	{r4, r5, r6, lr}
 800e666:	0004      	movs	r4, r0
 800e668:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800e66a:	f001 faeb 	bl	800fc44 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e66e:	6822      	ldr	r2, [r4, #0]
 800e670:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e672:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e674:	0001      	movs	r1, r0
 800e676:	4359      	muls	r1, r3
 800e678:	1851      	adds	r1, r2, r1
 800e67a:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e67c:	2100      	movs	r1, #0
 800e67e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e680:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e682:	3b01      	subs	r3, #1
 800e684:	4343      	muls	r3, r0
 800e686:	18d3      	adds	r3, r2, r3
 800e688:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e68a:	2301      	movs	r3, #1
 800e68c:	425b      	negs	r3, r3
 800e68e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800e690:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800e692:	2d00      	cmp	r5, #0
 800e694:	d10f      	bne.n	800e6b6 <xQueueGenericReset+0x52>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e696:	6923      	ldr	r3, [r4, #16]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d103      	bne.n	800e6a4 <xQueueGenericReset+0x40>
	taskEXIT_CRITICAL();
 800e69c:	f001 fade 	bl	800fc5c <vPortExitCritical>
}
 800e6a0:	2001      	movs	r0, #1
 800e6a2:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e6a4:	0020      	movs	r0, r4
 800e6a6:	3010      	adds	r0, #16
 800e6a8:	f000 fe54 	bl	800f354 <xTaskRemoveFromEventList>
 800e6ac:	2801      	cmp	r0, #1
 800e6ae:	d1f5      	bne.n	800e69c <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 800e6b0:	f001 fabc 	bl	800fc2c <vPortYield>
 800e6b4:	e7f2      	b.n	800e69c <xQueueGenericReset+0x38>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e6b6:	0020      	movs	r0, r4
 800e6b8:	3010      	adds	r0, #16
 800e6ba:	f7ff fee7 	bl	800e48c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e6be:	0020      	movs	r0, r4
 800e6c0:	3024      	adds	r0, #36	; 0x24
 800e6c2:	f7ff fee3 	bl	800e48c <vListInitialise>
 800e6c6:	e7e9      	b.n	800e69c <xQueueGenericReset+0x38>

0800e6c8 <xQueueGenericCreate>:
{
 800e6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ca:	0006      	movs	r6, r0
 800e6cc:	000d      	movs	r5, r1
 800e6ce:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e6d0:	2900      	cmp	r1, #0
 800e6d2:	d013      	beq.n	800e6fc <xQueueGenericCreate+0x34>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6d4:	4348      	muls	r0, r1
 800e6d6:	3001      	adds	r0, #1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e6d8:	3054      	adds	r0, #84	; 0x54
 800e6da:	f001 fb55 	bl	800fd88 <pvPortMalloc>
 800e6de:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e6e0:	d00a      	beq.n	800e6f8 <xQueueGenericCreate+0x30>
		if( uxItemSize == ( UBaseType_t ) 0 )
 800e6e2:	2d00      	cmp	r5, #0
 800e6e4:	d10c      	bne.n	800e700 <xQueueGenericCreate+0x38>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e6e6:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800e6e8:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800e6ea:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e6ec:	2101      	movs	r1, #1
 800e6ee:	0020      	movs	r0, r4
 800e6f0:	f7ff ffb8 	bl	800e664 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800e6f4:	2350      	movs	r3, #80	; 0x50
 800e6f6:	54e7      	strb	r7, [r4, r3]
}
 800e6f8:	0020      	movs	r0, r4
 800e6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xQueueSizeInBytes = ( size_t ) 0;
 800e6fc:	0008      	movs	r0, r1
 800e6fe:	e7eb      	b.n	800e6d8 <xQueueGenericCreate+0x10>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800e700:	0003      	movs	r3, r0
 800e702:	3354      	adds	r3, #84	; 0x54
 800e704:	6003      	str	r3, [r0, #0]
 800e706:	e7ef      	b.n	800e6e8 <xQueueGenericCreate+0x20>

0800e708 <xQueueCreateCountingSemaphore>:
	{
 800e708:	b510      	push	{r4, lr}
 800e70a:	000c      	movs	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e70c:	2202      	movs	r2, #2
 800e70e:	2100      	movs	r1, #0
 800e710:	f7ff ffda 	bl	800e6c8 <xQueueGenericCreate>
		if( xHandle != NULL )
 800e714:	2800      	cmp	r0, #0
 800e716:	d000      	beq.n	800e71a <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e718:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800e71a:	bd10      	pop	{r4, pc}

0800e71c <xQueueGenericSend>:
{
 800e71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e71e:	b085      	sub	sp, #20
 800e720:	0004      	movs	r4, r0
 800e722:	000d      	movs	r5, r1
 800e724:	9201      	str	r2, [sp, #4]
 800e726:	001e      	movs	r6, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e728:	2700      	movs	r7, #0
 800e72a:	e02e      	b.n	800e78a <xQueueGenericSend+0x6e>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e72c:	0032      	movs	r2, r6
 800e72e:	0029      	movs	r1, r5
 800e730:	0020      	movs	r0, r4
 800e732:	f7ff ff0a 	bl	800e54a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d106      	bne.n	800e74a <xQueueGenericSend+0x2e>
					else if( xYieldRequired != pdFALSE )
 800e73c:	2800      	cmp	r0, #0
 800e73e:	d10d      	bne.n	800e75c <xQueueGenericSend+0x40>
				taskEXIT_CRITICAL();
 800e740:	f001 fa8c 	bl	800fc5c <vPortExitCritical>
				return pdPASS;
 800e744:	2001      	movs	r0, #1
}
 800e746:	b005      	add	sp, #20
 800e748:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800e74a:	0020      	movs	r0, r4
 800e74c:	3024      	adds	r0, #36	; 0x24
 800e74e:	f000 fe01 	bl	800f354 <xTaskRemoveFromEventList>
 800e752:	2801      	cmp	r0, #1
 800e754:	d1f4      	bne.n	800e740 <xQueueGenericSend+0x24>
							queueYIELD_IF_USING_PREEMPTION();
 800e756:	f001 fa69 	bl	800fc2c <vPortYield>
 800e75a:	e7f1      	b.n	800e740 <xQueueGenericSend+0x24>
						queueYIELD_IF_USING_PREEMPTION();
 800e75c:	f001 fa66 	bl	800fc2c <vPortYield>
 800e760:	e7ee      	b.n	800e740 <xQueueGenericSend+0x24>
					taskEXIT_CRITICAL();
 800e762:	f001 fa7b 	bl	800fc5c <vPortExitCritical>
					return errQUEUE_FULL;
 800e766:	2000      	movs	r0, #0
 800e768:	e7ed      	b.n	800e746 <xQueueGenericSend+0x2a>
					vTaskSetTimeOutState( &xTimeOut );
 800e76a:	a802      	add	r0, sp, #8
 800e76c:	f000 fe2a 	bl	800f3c4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e770:	3701      	adds	r7, #1
 800e772:	e017      	b.n	800e7a4 <xQueueGenericSend+0x88>
		prvLockQueue( pxQueue );
 800e774:	2300      	movs	r3, #0
 800e776:	6463      	str	r3, [r4, #68]	; 0x44
 800e778:	e01d      	b.n	800e7b6 <xQueueGenericSend+0x9a>
 800e77a:	2300      	movs	r3, #0
 800e77c:	64a3      	str	r3, [r4, #72]	; 0x48
 800e77e:	e01d      	b.n	800e7bc <xQueueGenericSend+0xa0>
				prvUnlockQueue( pxQueue );
 800e780:	0020      	movs	r0, r4
 800e782:	f7ff ff38 	bl	800e5f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e786:	f000 fc51 	bl	800f02c <xTaskResumeAll>
		taskENTER_CRITICAL();
 800e78a:	f001 fa5b 	bl	800fc44 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e78e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800e790:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e792:	4298      	cmp	r0, r3
 800e794:	d3ca      	bcc.n	800e72c <xQueueGenericSend+0x10>
 800e796:	2e02      	cmp	r6, #2
 800e798:	d0c8      	beq.n	800e72c <xQueueGenericSend+0x10>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e79a:	9b01      	ldr	r3, [sp, #4]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d0e0      	beq.n	800e762 <xQueueGenericSend+0x46>
				else if( xEntryTimeSet == pdFALSE )
 800e7a0:	2f00      	cmp	r7, #0
 800e7a2:	d0e2      	beq.n	800e76a <xQueueGenericSend+0x4e>
		taskEXIT_CRITICAL();
 800e7a4:	f001 fa5a 	bl	800fc5c <vPortExitCritical>
		vTaskSuspendAll();
 800e7a8:	f000 fbb8 	bl	800ef1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e7ac:	f001 fa4a 	bl	800fc44 <vPortEnterCritical>
 800e7b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e7b2:	1c4b      	adds	r3, r1, #1
 800e7b4:	d0de      	beq.n	800e774 <xQueueGenericSend+0x58>
 800e7b6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e7b8:	1c4b      	adds	r3, r1, #1
 800e7ba:	d0de      	beq.n	800e77a <xQueueGenericSend+0x5e>
 800e7bc:	f001 fa4e 	bl	800fc5c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e7c0:	a901      	add	r1, sp, #4
 800e7c2:	a802      	add	r0, sp, #8
 800e7c4:	f000 fe0a 	bl	800f3dc <xTaskCheckForTimeOut>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d113      	bne.n	800e7f4 <xQueueGenericSend+0xd8>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e7cc:	0020      	movs	r0, r4
 800e7ce:	f7ff fe9f 	bl	800e510 <prvIsQueueFull>
 800e7d2:	2800      	cmp	r0, #0
 800e7d4:	d0d4      	beq.n	800e780 <xQueueGenericSend+0x64>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e7d6:	0020      	movs	r0, r4
 800e7d8:	3010      	adds	r0, #16
 800e7da:	9901      	ldr	r1, [sp, #4]
 800e7dc:	f000 fd8c 	bl	800f2f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e7e0:	0020      	movs	r0, r4
 800e7e2:	f7ff ff08 	bl	800e5f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e7e6:	f000 fc21 	bl	800f02c <xTaskResumeAll>
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	d1cd      	bne.n	800e78a <xQueueGenericSend+0x6e>
					portYIELD_WITHIN_API();
 800e7ee:	f001 fa1d 	bl	800fc2c <vPortYield>
 800e7f2:	e7ca      	b.n	800e78a <xQueueGenericSend+0x6e>
			prvUnlockQueue( pxQueue );
 800e7f4:	0020      	movs	r0, r4
 800e7f6:	f7ff fefe 	bl	800e5f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e7fa:	f000 fc17 	bl	800f02c <xTaskResumeAll>
			return errQUEUE_FULL;
 800e7fe:	2000      	movs	r0, #0
 800e800:	e7a1      	b.n	800e746 <xQueueGenericSend+0x2a>

0800e802 <xQueueGenericSendFromISR>:
{
 800e802:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e804:	b083      	sub	sp, #12
 800e806:	0004      	movs	r4, r0
 800e808:	000e      	movs	r6, r1
 800e80a:	9201      	str	r2, [sp, #4]
 800e80c:	001d      	movs	r5, r3
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e80e:	f001 fa2f 	bl	800fc70 <ulSetInterruptMaskFromISR>
 800e812:	0007      	movs	r7, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e814:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e816:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e818:	4293      	cmp	r3, r2
 800e81a:	d308      	bcc.n	800e82e <xQueueGenericSendFromISR+0x2c>
 800e81c:	2d02      	cmp	r5, #2
 800e81e:	d006      	beq.n	800e82e <xQueueGenericSendFromISR+0x2c>
			xReturn = errQUEUE_FULL;
 800e820:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e822:	0038      	movs	r0, r7
 800e824:	f001 fa29 	bl	800fc7a <vClearInterruptMaskFromISR>
}
 800e828:	0020      	movs	r0, r4
 800e82a:	b003      	add	sp, #12
 800e82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e82e:	002a      	movs	r2, r5
 800e830:	0031      	movs	r1, r6
 800e832:	0020      	movs	r0, r4
 800e834:	f7ff fe89 	bl	800e54a <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e838:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e83a:	3301      	adds	r3, #1
 800e83c:	d004      	beq.n	800e848 <xQueueGenericSendFromISR+0x46>
				++( pxQueue->xTxLock );
 800e83e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e840:	3301      	adds	r3, #1
 800e842:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e844:	2401      	movs	r4, #1
 800e846:	e7ec      	b.n	800e822 <xQueueGenericSendFromISR+0x20>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d101      	bne.n	800e852 <xQueueGenericSendFromISR+0x50>
			xReturn = pdPASS;
 800e84e:	2401      	movs	r4, #1
 800e850:	e7e7      	b.n	800e822 <xQueueGenericSendFromISR+0x20>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e852:	0020      	movs	r0, r4
 800e854:	3024      	adds	r0, #36	; 0x24
 800e856:	f000 fd7d 	bl	800f354 <xTaskRemoveFromEventList>
 800e85a:	2800      	cmp	r0, #0
 800e85c:	d006      	beq.n	800e86c <xQueueGenericSendFromISR+0x6a>
							if( pxHigherPriorityTaskWoken != NULL )
 800e85e:	9a01      	ldr	r2, [sp, #4]
 800e860:	2a00      	cmp	r2, #0
 800e862:	d005      	beq.n	800e870 <xQueueGenericSendFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e864:	2301      	movs	r3, #1
 800e866:	6013      	str	r3, [r2, #0]
			xReturn = pdPASS;
 800e868:	2401      	movs	r4, #1
 800e86a:	e7da      	b.n	800e822 <xQueueGenericSendFromISR+0x20>
 800e86c:	2401      	movs	r4, #1
 800e86e:	e7d8      	b.n	800e822 <xQueueGenericSendFromISR+0x20>
 800e870:	2401      	movs	r4, #1
 800e872:	e7d6      	b.n	800e822 <xQueueGenericSendFromISR+0x20>

0800e874 <xQueueGiveFromISR>:
{
 800e874:	b570      	push	{r4, r5, r6, lr}
 800e876:	0004      	movs	r4, r0
 800e878:	000e      	movs	r6, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e87a:	f001 f9f9 	bl	800fc70 <ulSetInterruptMaskFromISR>
 800e87e:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e880:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e882:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e884:	4293      	cmp	r3, r2
 800e886:	d21b      	bcs.n	800e8c0 <xQueueGiveFromISR+0x4c>
			++( pxQueue->uxMessagesWaiting );
 800e888:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e88a:	3301      	adds	r3, #1
 800e88c:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e88e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e890:	3301      	adds	r3, #1
 800e892:	d004      	beq.n	800e89e <xQueueGiveFromISR+0x2a>
				++( pxQueue->xTxLock );
 800e894:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e896:	3301      	adds	r3, #1
 800e898:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e89a:	2401      	movs	r4, #1
 800e89c:	e011      	b.n	800e8c2 <xQueueGiveFromISR+0x4e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e89e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d101      	bne.n	800e8a8 <xQueueGiveFromISR+0x34>
			xReturn = pdPASS;
 800e8a4:	2401      	movs	r4, #1
 800e8a6:	e00c      	b.n	800e8c2 <xQueueGiveFromISR+0x4e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8a8:	0020      	movs	r0, r4
 800e8aa:	3024      	adds	r0, #36	; 0x24
 800e8ac:	f000 fd52 	bl	800f354 <xTaskRemoveFromEventList>
 800e8b0:	2800      	cmp	r0, #0
 800e8b2:	d00b      	beq.n	800e8cc <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 800e8b4:	2e00      	cmp	r6, #0
 800e8b6:	d00b      	beq.n	800e8d0 <xQueueGiveFromISR+0x5c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	6033      	str	r3, [r6, #0]
			xReturn = pdPASS;
 800e8bc:	2401      	movs	r4, #1
 800e8be:	e000      	b.n	800e8c2 <xQueueGiveFromISR+0x4e>
			xReturn = errQUEUE_FULL;
 800e8c0:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e8c2:	0028      	movs	r0, r5
 800e8c4:	f001 f9d9 	bl	800fc7a <vClearInterruptMaskFromISR>
}
 800e8c8:	0020      	movs	r0, r4
 800e8ca:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800e8cc:	2401      	movs	r4, #1
 800e8ce:	e7f8      	b.n	800e8c2 <xQueueGiveFromISR+0x4e>
 800e8d0:	2401      	movs	r4, #1
 800e8d2:	e7f6      	b.n	800e8c2 <xQueueGiveFromISR+0x4e>

0800e8d4 <xQueueGenericReceive>:
{
 800e8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8d6:	b085      	sub	sp, #20
 800e8d8:	0004      	movs	r4, r0
 800e8da:	000e      	movs	r6, r1
 800e8dc:	9201      	str	r2, [sp, #4]
 800e8de:	001d      	movs	r5, r3
BaseType_t xEntryTimeSet = pdFALSE;
 800e8e0:	2700      	movs	r7, #0
 800e8e2:	e04a      	b.n	800e97a <xQueueGenericReceive+0xa6>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800e8e4:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e8e6:	0031      	movs	r1, r6
 800e8e8:	0020      	movs	r0, r4
 800e8ea:	f7ff fe72 	bl	800e5d2 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800e8ee:	2d00      	cmp	r5, #0
 800e8f0:	d11a      	bne.n	800e928 <xQueueGenericReceive+0x54>
					--( pxQueue->uxMessagesWaiting );
 800e8f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e8f4:	3b01      	subs	r3, #1
 800e8f6:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e8f8:	6823      	ldr	r3, [r4, #0]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d007      	beq.n	800e90e <xQueueGenericReceive+0x3a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8fe:	6923      	ldr	r3, [r4, #16]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d108      	bne.n	800e916 <xQueueGenericReceive+0x42>
				taskEXIT_CRITICAL();
 800e904:	f001 f9aa 	bl	800fc5c <vPortExitCritical>
				return pdPASS;
 800e908:	2001      	movs	r0, #1
}
 800e90a:	b005      	add	sp, #20
 800e90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e90e:	f000 fecb 	bl	800f6a8 <pvTaskIncrementMutexHeldCount>
 800e912:	6060      	str	r0, [r4, #4]
 800e914:	e7f3      	b.n	800e8fe <xQueueGenericReceive+0x2a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e916:	0020      	movs	r0, r4
 800e918:	3010      	adds	r0, #16
 800e91a:	f000 fd1b 	bl	800f354 <xTaskRemoveFromEventList>
 800e91e:	2801      	cmp	r0, #1
 800e920:	d1f0      	bne.n	800e904 <xQueueGenericReceive+0x30>
							queueYIELD_IF_USING_PREEMPTION();
 800e922:	f001 f983 	bl	800fc2c <vPortYield>
 800e926:	e7ed      	b.n	800e904 <xQueueGenericReceive+0x30>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800e928:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e92a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d0e9      	beq.n	800e904 <xQueueGenericReceive+0x30>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e930:	0020      	movs	r0, r4
 800e932:	3024      	adds	r0, #36	; 0x24
 800e934:	f000 fd0e 	bl	800f354 <xTaskRemoveFromEventList>
 800e938:	2800      	cmp	r0, #0
 800e93a:	d0e3      	beq.n	800e904 <xQueueGenericReceive+0x30>
							queueYIELD_IF_USING_PREEMPTION();
 800e93c:	f001 f976 	bl	800fc2c <vPortYield>
 800e940:	e7e0      	b.n	800e904 <xQueueGenericReceive+0x30>
					taskEXIT_CRITICAL();
 800e942:	f001 f98b 	bl	800fc5c <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e946:	2000      	movs	r0, #0
 800e948:	e7df      	b.n	800e90a <xQueueGenericReceive+0x36>
					vTaskSetTimeOutState( &xTimeOut );
 800e94a:	a802      	add	r0, sp, #8
 800e94c:	f000 fd3a 	bl	800f3c4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e950:	3701      	adds	r7, #1
 800e952:	e01c      	b.n	800e98e <xQueueGenericReceive+0xba>
		prvLockQueue( pxQueue );
 800e954:	2300      	movs	r3, #0
 800e956:	6463      	str	r3, [r4, #68]	; 0x44
 800e958:	e022      	b.n	800e9a0 <xQueueGenericReceive+0xcc>
 800e95a:	2300      	movs	r3, #0
 800e95c:	64a3      	str	r3, [r4, #72]	; 0x48
 800e95e:	e022      	b.n	800e9a6 <xQueueGenericReceive+0xd2>
						taskENTER_CRITICAL();
 800e960:	f001 f970 	bl	800fc44 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e964:	6860      	ldr	r0, [r4, #4]
 800e966:	f000 fd7d 	bl	800f464 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800e96a:	f001 f977 	bl	800fc5c <vPortExitCritical>
 800e96e:	e02a      	b.n	800e9c6 <xQueueGenericReceive+0xf2>
				prvUnlockQueue( pxQueue );
 800e970:	0020      	movs	r0, r4
 800e972:	f7ff fe40 	bl	800e5f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e976:	f000 fb59 	bl	800f02c <xTaskResumeAll>
		taskENTER_CRITICAL();
 800e97a:	f001 f963 	bl	800fc44 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e97e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e980:	2b00      	cmp	r3, #0
 800e982:	d1af      	bne.n	800e8e4 <xQueueGenericReceive+0x10>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e984:	9b01      	ldr	r3, [sp, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d0db      	beq.n	800e942 <xQueueGenericReceive+0x6e>
				else if( xEntryTimeSet == pdFALSE )
 800e98a:	2f00      	cmp	r7, #0
 800e98c:	d0dd      	beq.n	800e94a <xQueueGenericReceive+0x76>
		taskEXIT_CRITICAL();
 800e98e:	f001 f965 	bl	800fc5c <vPortExitCritical>
		vTaskSuspendAll();
 800e992:	f000 fac3 	bl	800ef1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e996:	f001 f955 	bl	800fc44 <vPortEnterCritical>
 800e99a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e99c:	3301      	adds	r3, #1
 800e99e:	d0d9      	beq.n	800e954 <xQueueGenericReceive+0x80>
 800e9a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	d0d9      	beq.n	800e95a <xQueueGenericReceive+0x86>
 800e9a6:	f001 f959 	bl	800fc5c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9aa:	a901      	add	r1, sp, #4
 800e9ac:	a802      	add	r0, sp, #8
 800e9ae:	f000 fd15 	bl	800f3dc <xTaskCheckForTimeOut>
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	d116      	bne.n	800e9e4 <xQueueGenericReceive+0x110>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9b6:	0020      	movs	r0, r4
 800e9b8:	f7ff fdb9 	bl	800e52e <prvIsQueueEmpty>
 800e9bc:	2800      	cmp	r0, #0
 800e9be:	d0d7      	beq.n	800e970 <xQueueGenericReceive+0x9c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e9c0:	6823      	ldr	r3, [r4, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d0cc      	beq.n	800e960 <xQueueGenericReceive+0x8c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e9c6:	0020      	movs	r0, r4
 800e9c8:	3024      	adds	r0, #36	; 0x24
 800e9ca:	9901      	ldr	r1, [sp, #4]
 800e9cc:	f000 fc94 	bl	800f2f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e9d0:	0020      	movs	r0, r4
 800e9d2:	f7ff fe10 	bl	800e5f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e9d6:	f000 fb29 	bl	800f02c <xTaskResumeAll>
 800e9da:	2800      	cmp	r0, #0
 800e9dc:	d1cd      	bne.n	800e97a <xQueueGenericReceive+0xa6>
					portYIELD_WITHIN_API();
 800e9de:	f001 f925 	bl	800fc2c <vPortYield>
 800e9e2:	e7ca      	b.n	800e97a <xQueueGenericReceive+0xa6>
			prvUnlockQueue( pxQueue );
 800e9e4:	0020      	movs	r0, r4
 800e9e6:	f7ff fe06 	bl	800e5f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9ea:	f000 fb1f 	bl	800f02c <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	e78b      	b.n	800e90a <xQueueGenericReceive+0x36>

0800e9f2 <xQueueReceiveFromISR>:
{
 800e9f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9f4:	0004      	movs	r4, r0
 800e9f6:	000e      	movs	r6, r1
 800e9f8:	0017      	movs	r7, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e9fa:	f001 f939 	bl	800fc70 <ulSetInterruptMaskFromISR>
 800e9fe:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d105      	bne.n	800ea12 <xQueueReceiveFromISR+0x20>
			xReturn = pdFAIL;
 800ea06:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ea08:	0028      	movs	r0, r5
 800ea0a:	f001 f936 	bl	800fc7a <vClearInterruptMaskFromISR>
}
 800ea0e:	0020      	movs	r0, r4
 800ea10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ea12:	0031      	movs	r1, r6
 800ea14:	0020      	movs	r0, r4
 800ea16:	f7ff fddc 	bl	800e5d2 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800ea1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea1c:	3b01      	subs	r3, #1
 800ea1e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800ea20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ea22:	3301      	adds	r3, #1
 800ea24:	d004      	beq.n	800ea30 <xQueueReceiveFromISR+0x3e>
				++( pxQueue->xRxLock );
 800ea26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ea28:	3301      	adds	r3, #1
 800ea2a:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800ea2c:	2401      	movs	r4, #1
 800ea2e:	e7eb      	b.n	800ea08 <xQueueReceiveFromISR+0x16>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea30:	6923      	ldr	r3, [r4, #16]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d101      	bne.n	800ea3a <xQueueReceiveFromISR+0x48>
			xReturn = pdPASS;
 800ea36:	2401      	movs	r4, #1
 800ea38:	e7e6      	b.n	800ea08 <xQueueReceiveFromISR+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea3a:	0020      	movs	r0, r4
 800ea3c:	3010      	adds	r0, #16
 800ea3e:	f000 fc89 	bl	800f354 <xTaskRemoveFromEventList>
 800ea42:	2800      	cmp	r0, #0
 800ea44:	d005      	beq.n	800ea52 <xQueueReceiveFromISR+0x60>
						if( pxHigherPriorityTaskWoken != NULL )
 800ea46:	2f00      	cmp	r7, #0
 800ea48:	d005      	beq.n	800ea56 <xQueueReceiveFromISR+0x64>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800ea4e:	2401      	movs	r4, #1
 800ea50:	e7da      	b.n	800ea08 <xQueueReceiveFromISR+0x16>
 800ea52:	2401      	movs	r4, #1
 800ea54:	e7d8      	b.n	800ea08 <xQueueReceiveFromISR+0x16>
 800ea56:	2401      	movs	r4, #1
 800ea58:	e7d6      	b.n	800ea08 <xQueueReceiveFromISR+0x16>
	...

0800ea5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ea5c:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea5e:	2300      	movs	r3, #0
 800ea60:	2b07      	cmp	r3, #7
 800ea62:	d80a      	bhi.n	800ea7a <vQueueAddToRegistry+0x1e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ea64:	00da      	lsls	r2, r3, #3
 800ea66:	4c05      	ldr	r4, [pc, #20]	; (800ea7c <vQueueAddToRegistry+0x20>)
 800ea68:	5912      	ldr	r2, [r2, r4]
 800ea6a:	2a00      	cmp	r2, #0
 800ea6c:	d001      	beq.n	800ea72 <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea6e:	3301      	adds	r3, #1
 800ea70:	e7f6      	b.n	800ea60 <vQueueAddToRegistry+0x4>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ea72:	00db      	lsls	r3, r3, #3
 800ea74:	5119      	str	r1, [r3, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ea76:	18e3      	adds	r3, r4, r3
 800ea78:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ea7a:	bd10      	pop	{r4, pc}
 800ea7c:	20002e20 	.word	0x20002e20

0800ea80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800ea80:	b570      	push	{r4, r5, r6, lr}
 800ea82:	0004      	movs	r4, r0
 800ea84:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ea86:	f001 f8dd 	bl	800fc44 <vPortEnterCritical>
 800ea8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	d00b      	beq.n	800eaa8 <vQueueWaitForMessageRestricted+0x28>
 800ea90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ea92:	3301      	adds	r3, #1
 800ea94:	d00b      	beq.n	800eaae <vQueueWaitForMessageRestricted+0x2e>
 800ea96:	f001 f8e1 	bl	800fc5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ea9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d009      	beq.n	800eab4 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eaa0:	0020      	movs	r0, r4
 800eaa2:	f7ff fda8 	bl	800e5f6 <prvUnlockQueue>
	}
 800eaa6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	6463      	str	r3, [r4, #68]	; 0x44
 800eaac:	e7f0      	b.n	800ea90 <vQueueWaitForMessageRestricted+0x10>
 800eaae:	2300      	movs	r3, #0
 800eab0:	64a3      	str	r3, [r4, #72]	; 0x48
 800eab2:	e7f0      	b.n	800ea96 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eab4:	0020      	movs	r0, r4
 800eab6:	3024      	adds	r0, #36	; 0x24
 800eab8:	0029      	movs	r1, r5
 800eaba:	f000 fc39 	bl	800f330 <vTaskPlaceOnEventListRestricted>
 800eabe:	e7ef      	b.n	800eaa0 <vQueueWaitForMessageRestricted+0x20>

0800eac0 <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 800eac0:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800eac2:	e001      	b.n	800eac8 <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 800eac4:	3001      	adds	r0, #1
			ulCount++;
 800eac6:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800eac8:	7802      	ldrb	r2, [r0, #0]
 800eaca:	2aa5      	cmp	r2, #165	; 0xa5
 800eacc:	d0fa      	beq.n	800eac4 <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800eace:	0898      	lsrs	r0, r3, #2

		return ( uint16_t ) ulCount;
 800ead0:	b280      	uxth	r0, r0
	}
 800ead2:	4770      	bx	lr

0800ead4 <prvListTaskWithinSingleList>:
	{
 800ead4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ead6:	46de      	mov	lr, fp
 800ead8:	4657      	mov	r7, sl
 800eada:	464e      	mov	r6, r9
 800eadc:	4645      	mov	r5, r8
 800eade:	b5e0      	push	{r5, r6, r7, lr}
 800eae0:	4681      	mov	r9, r0
 800eae2:	000e      	movs	r6, r1
 800eae4:	4690      	mov	r8, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800eae6:	680f      	ldr	r7, [r1, #0]
 800eae8:	2f00      	cmp	r7, #0
 800eaea:	d039      	beq.n	800eb60 <prvListTaskWithinSingleList+0x8c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800eaec:	684b      	ldr	r3, [r1, #4]
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	604b      	str	r3, [r1, #4]
 800eaf2:	2208      	movs	r2, #8
 800eaf4:	4692      	mov	sl, r2
 800eaf6:	448a      	add	sl, r1
 800eaf8:	4553      	cmp	r3, sl
 800eafa:	d004      	beq.n	800eb06 <prvListTaskWithinSingleList+0x32>
 800eafc:	6873      	ldr	r3, [r6, #4]
 800eafe:	68db      	ldr	r3, [r3, #12]
 800eb00:	469b      	mov	fp, r3
	UBaseType_t uxTask = 0;
 800eb02:	2700      	movs	r7, #0
 800eb04:	e010      	b.n	800eb28 <prvListTaskWithinSingleList+0x54>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	604b      	str	r3, [r1, #4]
 800eb0a:	e7f7      	b.n	800eafc <prvListTaskWithinSingleList+0x28>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	6073      	str	r3, [r6, #4]
 800eb10:	e00f      	b.n	800eb32 <prvListTaskWithinSingleList+0x5e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800eb12:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800eb14:	6163      	str	r3, [r4, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800eb16:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800eb18:	61a3      	str	r3, [r4, #24]
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800eb1a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800eb1c:	f7ff ffd0 	bl	800eac0 <prvTaskCheckFreeStackSpace>
 800eb20:	83a0      	strh	r0, [r4, #28]
				uxTask++;
 800eb22:	3701      	adds	r7, #1
			} while( pxNextTCB != pxFirstTCB );
 800eb24:	45ab      	cmp	fp, r5
 800eb26:	d01b      	beq.n	800eb60 <prvListTaskWithinSingleList+0x8c>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800eb28:	6873      	ldr	r3, [r6, #4]
 800eb2a:	685b      	ldr	r3, [r3, #4]
 800eb2c:	6073      	str	r3, [r6, #4]
 800eb2e:	459a      	cmp	sl, r3
 800eb30:	d0ec      	beq.n	800eb0c <prvListTaskWithinSingleList+0x38>
 800eb32:	6873      	ldr	r3, [r6, #4]
 800eb34:	68dd      	ldr	r5, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800eb36:	017c      	lsls	r4, r7, #5
 800eb38:	444c      	add	r4, r9
 800eb3a:	6025      	str	r5, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800eb3c:	002b      	movs	r3, r5
 800eb3e:	3334      	adds	r3, #52	; 0x34
 800eb40:	6063      	str	r3, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800eb42:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800eb44:	60a3      	str	r3, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800eb46:	4643      	mov	r3, r8
 800eb48:	7323      	strb	r3, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800eb4a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800eb4c:	6123      	str	r3, [r4, #16]
					if( eState == eSuspended )
 800eb4e:	4643      	mov	r3, r8
 800eb50:	2b03      	cmp	r3, #3
 800eb52:	d1de      	bne.n	800eb12 <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800eb54:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d0db      	beq.n	800eb12 <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800eb5a:	2302      	movs	r3, #2
 800eb5c:	7323      	strb	r3, [r4, #12]
 800eb5e:	e7d8      	b.n	800eb12 <prvListTaskWithinSingleList+0x3e>
	}
 800eb60:	0038      	movs	r0, r7
 800eb62:	bcf0      	pop	{r4, r5, r6, r7}
 800eb64:	46bb      	mov	fp, r7
 800eb66:	46b2      	mov	sl, r6
 800eb68:	46a9      	mov	r9, r5
 800eb6a:	46a0      	mov	r8, r4
 800eb6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb70 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb70:	4b08      	ldr	r3, [pc, #32]	; (800eb94 <prvResetNextTaskUnblockTime+0x24>)
 800eb72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d104      	bne.n	800eb84 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eb7a:	4b07      	ldr	r3, [pc, #28]	; (800eb98 <prvResetNextTaskUnblockTime+0x28>)
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	4252      	negs	r2, r2
 800eb80:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 800eb82:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800eb84:	4b03      	ldr	r3, [pc, #12]	; (800eb94 <prvResetNextTaskUnblockTime+0x24>)
 800eb86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800eb8c:	685a      	ldr	r2, [r3, #4]
 800eb8e:	4b02      	ldr	r3, [pc, #8]	; (800eb98 <prvResetNextTaskUnblockTime+0x28>)
 800eb90:	601a      	str	r2, [r3, #0]
}
 800eb92:	e7f6      	b.n	800eb82 <prvResetNextTaskUnblockTime+0x12>
 800eb94:	20002e60 	.word	0x20002e60
 800eb98:	200000c4 	.word	0x200000c4

0800eb9c <prvDeleteTCB>:
	{
 800eb9c:	b510      	push	{r4, lr}
 800eb9e:	0004      	movs	r4, r0
			vPortFreeAligned( pxTCB->pxStack );
 800eba0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800eba2:	f001 f955 	bl	800fe50 <vPortFree>
		vPortFree( pxTCB );
 800eba6:	0020      	movs	r0, r4
 800eba8:	f001 f952 	bl	800fe50 <vPortFree>
	}
 800ebac:	bd10      	pop	{r4, pc}

0800ebae <prvAllocateTCBAndStack>:
{
 800ebae:	b570      	push	{r4, r5, r6, lr}
 800ebb0:	0005      	movs	r5, r0
 800ebb2:	1e0c      	subs	r4, r1, #0
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebb4:	d010      	beq.n	800ebd8 <prvAllocateTCBAndStack+0x2a>
		if( pxStack != NULL )
 800ebb6:	2c00      	cmp	r4, #0
 800ebb8:	d017      	beq.n	800ebea <prvAllocateTCBAndStack+0x3c>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800ebba:	2060      	movs	r0, #96	; 0x60
 800ebbc:	f001 f8e4 	bl	800fd88 <pvPortMalloc>
 800ebc0:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800ebc2:	d00e      	beq.n	800ebe2 <prvAllocateTCBAndStack+0x34>
				pxNewTCB->pxStack = pxStack;
 800ebc4:	6304      	str	r4, [r0, #48]	; 0x30
	if( pxNewTCB != NULL )
 800ebc6:	2e00      	cmp	r6, #0
 800ebc8:	d004      	beq.n	800ebd4 <prvAllocateTCBAndStack+0x26>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800ebca:	00aa      	lsls	r2, r5, #2
 800ebcc:	21a5      	movs	r1, #165	; 0xa5
 800ebce:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800ebd0:	f004 fc87 	bl	80134e2 <memset>
}
 800ebd4:	0030      	movs	r0, r6
 800ebd6:	bd70      	pop	{r4, r5, r6, pc}
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebd8:	0080      	lsls	r0, r0, #2
 800ebda:	f001 f8d5 	bl	800fd88 <pvPortMalloc>
 800ebde:	0004      	movs	r4, r0
 800ebe0:	e7e9      	b.n	800ebb6 <prvAllocateTCBAndStack+0x8>
				vPortFree( pxStack );
 800ebe2:	0020      	movs	r0, r4
 800ebe4:	f001 f934 	bl	800fe50 <vPortFree>
 800ebe8:	e7ed      	b.n	800ebc6 <prvAllocateTCBAndStack+0x18>
			pxNewTCB = NULL;
 800ebea:	0026      	movs	r6, r4
	return pxNewTCB;
 800ebec:	e7f2      	b.n	800ebd4 <prvAllocateTCBAndStack+0x26>

0800ebee <prvInitialiseTCBVariables>:
{
 800ebee:	b570      	push	{r4, r5, r6, lr}
 800ebf0:	0005      	movs	r5, r0
 800ebf2:	0016      	movs	r6, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	2b0c      	cmp	r3, #12
 800ebf8:	d808      	bhi.n	800ec0c <prvInitialiseTCBVariables+0x1e>
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800ebfa:	5cc8      	ldrb	r0, [r1, r3]
 800ebfc:	18ec      	adds	r4, r5, r3
 800ebfe:	3434      	adds	r4, #52	; 0x34
 800ec00:	7020      	strb	r0, [r4, #0]
		if( pcName[ x ] == 0x00 )
 800ec02:	5cc8      	ldrb	r0, [r1, r3]
 800ec04:	2800      	cmp	r0, #0
 800ec06:	d001      	beq.n	800ec0c <prvInitialiseTCBVariables+0x1e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ec08:	3301      	adds	r3, #1
 800ec0a:	e7f4      	b.n	800ebf6 <prvInitialiseTCBVariables+0x8>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ec0c:	2340      	movs	r3, #64	; 0x40
 800ec0e:	2200      	movs	r2, #0
 800ec10:	54ea      	strb	r2, [r5, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ec12:	2e06      	cmp	r6, #6
 800ec14:	d900      	bls.n	800ec18 <prvInitialiseTCBVariables+0x2a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ec16:	2606      	movs	r6, #6
	pxTCB->uxPriority = uxPriority;
 800ec18:	62ee      	str	r6, [r5, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800ec1a:	64ee      	str	r6, [r5, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800ec1c:	2400      	movs	r4, #0
 800ec1e:	652c      	str	r4, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800ec20:	1d28      	adds	r0, r5, #4
 800ec22:	f7ff fc3e 	bl	800e4a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800ec26:	0028      	movs	r0, r5
 800ec28:	3018      	adds	r0, #24
 800ec2a:	f7ff fc3a 	bl	800e4a2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800ec2e:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec30:	2207      	movs	r2, #7
 800ec32:	1b96      	subs	r6, r2, r6
 800ec34:	61ae      	str	r6, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800ec36:	626d      	str	r5, [r5, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800ec38:	656c      	str	r4, [r5, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800ec3a:	65ac      	str	r4, [r5, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800ec3c:	235c      	movs	r3, #92	; 0x5c
 800ec3e:	54ec      	strb	r4, [r5, r3]
}
 800ec40:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ec44 <prvInitialiseTaskLists>:
{
 800ec44:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec46:	2400      	movs	r4, #0
 800ec48:	e007      	b.n	800ec5a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ec4a:	00a3      	lsls	r3, r4, #2
 800ec4c:	191b      	adds	r3, r3, r4
 800ec4e:	0098      	lsls	r0, r3, #2
 800ec50:	4b0f      	ldr	r3, [pc, #60]	; (800ec90 <prvInitialiseTaskLists+0x4c>)
 800ec52:	18c0      	adds	r0, r0, r3
 800ec54:	f7ff fc1a 	bl	800e48c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec58:	3401      	adds	r4, #1
 800ec5a:	2c06      	cmp	r4, #6
 800ec5c:	d9f5      	bls.n	800ec4a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800ec5e:	4c0d      	ldr	r4, [pc, #52]	; (800ec94 <prvInitialiseTaskLists+0x50>)
 800ec60:	0026      	movs	r6, r4
 800ec62:	362c      	adds	r6, #44	; 0x2c
 800ec64:	0030      	movs	r0, r6
 800ec66:	f7ff fc11 	bl	800e48c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ec6a:	0025      	movs	r5, r4
 800ec6c:	3540      	adds	r5, #64	; 0x40
 800ec6e:	0028      	movs	r0, r5
 800ec70:	f7ff fc0c 	bl	800e48c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ec74:	0020      	movs	r0, r4
 800ec76:	3014      	adds	r0, #20
 800ec78:	f7ff fc08 	bl	800e48c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800ec7c:	0020      	movs	r0, r4
 800ec7e:	3054      	adds	r0, #84	; 0x54
 800ec80:	f7ff fc04 	bl	800e48c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800ec84:	0020      	movs	r0, r4
 800ec86:	f7ff fc01 	bl	800e48c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800ec8a:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec8c:	66a5      	str	r5, [r4, #104]	; 0x68
}
 800ec8e:	bd70      	pop	{r4, r5, r6, pc}
 800ec90:	20002f00 	.word	0x20002f00
 800ec94:	20002e60 	.word	0x20002e60

0800ec98 <prvAddCurrentTaskToDelayedList>:
{
 800ec98:	b510      	push	{r4, lr}
 800ec9a:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800ec9c:	4b0c      	ldr	r3, [pc, #48]	; (800ecd0 <prvAddCurrentTaskToDelayedList+0x38>)
 800ec9e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800eca0:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800eca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eca4:	4283      	cmp	r3, r0
 800eca6:	d906      	bls.n	800ecb6 <prvAddCurrentTaskToDelayedList+0x1e>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800eca8:	4b09      	ldr	r3, [pc, #36]	; (800ecd0 <prvAddCurrentTaskToDelayedList+0x38>)
 800ecaa:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800ecac:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ecae:	3104      	adds	r1, #4
 800ecb0:	f7ff fc05 	bl	800e4be <vListInsert>
}
 800ecb4:	bd10      	pop	{r4, pc}
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ecb6:	4b06      	ldr	r3, [pc, #24]	; (800ecd0 <prvAddCurrentTaskToDelayedList+0x38>)
 800ecb8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ecba:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ecbc:	3104      	adds	r1, #4
 800ecbe:	f7ff fbfe 	bl	800e4be <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800ecc2:	4b04      	ldr	r3, [pc, #16]	; (800ecd4 <prvAddCurrentTaskToDelayedList+0x3c>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	42a3      	cmp	r3, r4
 800ecc8:	d9f4      	bls.n	800ecb4 <prvAddCurrentTaskToDelayedList+0x1c>
			xNextTaskUnblockTime = xTimeToWake;
 800ecca:	4b02      	ldr	r3, [pc, #8]	; (800ecd4 <prvAddCurrentTaskToDelayedList+0x3c>)
 800eccc:	601c      	str	r4, [r3, #0]
}
 800ecce:	e7f1      	b.n	800ecb4 <prvAddCurrentTaskToDelayedList+0x1c>
 800ecd0:	20002e60 	.word	0x20002e60
 800ecd4:	200000c4 	.word	0x200000c4

0800ecd8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800ecd8:	b510      	push	{r4, lr}
 800ecda:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800ecdc:	f004 fe2d 	bl	801393a <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ece0:	0020      	movs	r0, r4
 800ece2:	f7f1 fa19 	bl	8000118 <strlen>
 800ece6:	e002      	b.n	800ecee <prvWriteNameToBuffer+0x16>
		{
			pcBuffer[ x ] = ' ';
 800ece8:	2320      	movs	r3, #32
 800ecea:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ecec:	3001      	adds	r0, #1
 800ecee:	280b      	cmp	r0, #11
 800ecf0:	ddfa      	ble.n	800ece8 <prvWriteNameToBuffer+0x10>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800ecf2:	1820      	adds	r0, r4, r0
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800ecf8:	bd10      	pop	{r4, pc}
	...

0800ecfc <xTaskGenericCreate>:
{
 800ecfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecfe:	46ce      	mov	lr, r9
 800ed00:	b500      	push	{lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	9003      	str	r0, [sp, #12]
 800ed06:	000f      	movs	r7, r1
 800ed08:	0015      	movs	r5, r2
 800ed0a:	001e      	movs	r6, r3
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 800ed0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ed0e:	0010      	movs	r0, r2
 800ed10:	f7ff ff4d 	bl	800ebae <prvAllocateTCBAndStack>
 800ed14:	1e04      	subs	r4, r0, #0
	if( pxNewTCB != NULL )
 800ed16:	d05c      	beq.n	800edd2 <xTaskGenericCreate+0xd6>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800ed18:	4b32      	ldr	r3, [pc, #200]	; (800ede4 <xTaskGenericCreate+0xe8>)
 800ed1a:	18eb      	adds	r3, r5, r3
 800ed1c:	009b      	lsls	r3, r3, #2
 800ed1e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800ed20:	4694      	mov	ip, r2
 800ed22:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ed24:	2207      	movs	r2, #7
 800ed26:	4393      	bics	r3, r2
 800ed28:	4699      	mov	r9, r3
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 800ed2a:	9500      	str	r5, [sp, #0]
 800ed2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed30:	0039      	movs	r1, r7
 800ed32:	f7ff ff5c 	bl	800ebee <prvInitialiseTCBVariables>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ed36:	0032      	movs	r2, r6
 800ed38:	9903      	ldr	r1, [sp, #12]
 800ed3a:	4648      	mov	r0, r9
 800ed3c:	f000 ff4a 	bl	800fbd4 <pxPortInitialiseStack>
 800ed40:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800ed42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d000      	beq.n	800ed4a <xTaskGenericCreate+0x4e>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ed48:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800ed4a:	f000 ff7b 	bl	800fc44 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800ed4e:	4b26      	ldr	r3, [pc, #152]	; (800ede8 <xTaskGenericCreate+0xec>)
 800ed50:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ed52:	3201      	adds	r2, #1
 800ed54:	675a      	str	r2, [r3, #116]	; 0x74
			if( pxCurrentTCB == NULL )
 800ed56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00c      	beq.n	800ed76 <xTaskGenericCreate+0x7a>
				if( xSchedulerRunning == pdFALSE )
 800ed5c:	4b22      	ldr	r3, [pc, #136]	; (800ede8 <xTaskGenericCreate+0xec>)
 800ed5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d10d      	bne.n	800ed80 <xTaskGenericCreate+0x84>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800ed64:	4b20      	ldr	r3, [pc, #128]	; (800ede8 <xTaskGenericCreate+0xec>)
 800ed66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d807      	bhi.n	800ed80 <xTaskGenericCreate+0x84>
						pxCurrentTCB = pxNewTCB;
 800ed70:	4b1d      	ldr	r3, [pc, #116]	; (800ede8 <xTaskGenericCreate+0xec>)
 800ed72:	66dc      	str	r4, [r3, #108]	; 0x6c
 800ed74:	e004      	b.n	800ed80 <xTaskGenericCreate+0x84>
				pxCurrentTCB =  pxNewTCB;
 800ed76:	4b1c      	ldr	r3, [pc, #112]	; (800ede8 <xTaskGenericCreate+0xec>)
 800ed78:	66dc      	str	r4, [r3, #108]	; 0x6c
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ed7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d021      	beq.n	800edc4 <xTaskGenericCreate+0xc8>
			uxTaskNumber++;
 800ed80:	4a19      	ldr	r2, [pc, #100]	; (800ede8 <xTaskGenericCreate+0xec>)
 800ed82:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 800ed84:	3301      	adds	r3, #1
 800ed86:	67d3      	str	r3, [r2, #124]	; 0x7c
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ed88:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800ed8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ed8c:	4a17      	ldr	r2, [pc, #92]	; (800edec <xTaskGenericCreate+0xf0>)
 800ed8e:	6812      	ldr	r2, [r2, #0]
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d901      	bls.n	800ed98 <xTaskGenericCreate+0x9c>
 800ed94:	4a15      	ldr	r2, [pc, #84]	; (800edec <xTaskGenericCreate+0xf0>)
 800ed96:	6013      	str	r3, [r2, #0]
 800ed98:	1d21      	adds	r1, r4, #4
 800ed9a:	0098      	lsls	r0, r3, #2
 800ed9c:	18c0      	adds	r0, r0, r3
 800ed9e:	0080      	lsls	r0, r0, #2
 800eda0:	4b13      	ldr	r3, [pc, #76]	; (800edf0 <xTaskGenericCreate+0xf4>)
 800eda2:	18c0      	adds	r0, r0, r3
 800eda4:	f7ff fb80 	bl	800e4a8 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800eda8:	f000 ff58 	bl	800fc5c <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800edac:	4b0e      	ldr	r3, [pc, #56]	; (800ede8 <xTaskGenericCreate+0xec>)
 800edae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d014      	beq.n	800edde <xTaskGenericCreate+0xe2>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800edb4:	4b0c      	ldr	r3, [pc, #48]	; (800ede8 <xTaskGenericCreate+0xec>)
 800edb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d304      	bcc.n	800edca <xTaskGenericCreate+0xce>
			xReturn = pdPASS;
 800edc0:	2001      	movs	r0, #1
	return xReturn;
 800edc2:	e008      	b.n	800edd6 <xTaskGenericCreate+0xda>
					prvInitialiseTaskLists();
 800edc4:	f7ff ff3e 	bl	800ec44 <prvInitialiseTaskLists>
 800edc8:	e7da      	b.n	800ed80 <xTaskGenericCreate+0x84>
				taskYIELD_IF_USING_PREEMPTION();
 800edca:	f000 ff2f 	bl	800fc2c <vPortYield>
			xReturn = pdPASS;
 800edce:	2001      	movs	r0, #1
 800edd0:	e001      	b.n	800edd6 <xTaskGenericCreate+0xda>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800edd2:	2001      	movs	r0, #1
 800edd4:	4240      	negs	r0, r0
}
 800edd6:	b004      	add	sp, #16
 800edd8:	bc80      	pop	{r7}
 800edda:	46b9      	mov	r9, r7
 800eddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800edde:	2001      	movs	r0, #1
 800ede0:	e7f9      	b.n	800edd6 <xTaskGenericCreate+0xda>
 800ede2:	46c0      	nop			; (mov r8, r8)
 800ede4:	3fffffff 	.word	0x3fffffff
 800ede8:	20002e60 	.word	0x20002e60
 800edec:	20002ee0 	.word	0x20002ee0
 800edf0:	20002f00 	.word	0x20002f00

0800edf4 <uxTaskPriorityGet>:
	{
 800edf4:	b510      	push	{r4, lr}
 800edf6:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800edf8:	f000 ff24 	bl	800fc44 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800edfc:	2c00      	cmp	r4, #0
 800edfe:	d004      	beq.n	800ee0a <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800ee00:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800ee02:	f000 ff2b 	bl	800fc5c <vPortExitCritical>
	}
 800ee06:	0020      	movs	r0, r4
 800ee08:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800ee0a:	4b01      	ldr	r3, [pc, #4]	; (800ee10 <uxTaskPriorityGet+0x1c>)
 800ee0c:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800ee0e:	e7f7      	b.n	800ee00 <uxTaskPriorityGet+0xc>
 800ee10:	20002e60 	.word	0x20002e60

0800ee14 <vTaskPrioritySet>:
	{
 800ee14:	b570      	push	{r4, r5, r6, lr}
 800ee16:	0004      	movs	r4, r0
 800ee18:	000d      	movs	r5, r1
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ee1a:	2906      	cmp	r1, #6
 800ee1c:	d900      	bls.n	800ee20 <vTaskPrioritySet+0xc>
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ee1e:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800ee20:	f000 ff10 	bl	800fc44 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ee24:	2c00      	cmp	r4, #0
 800ee26:	d00e      	beq.n	800ee46 <vTaskPrioritySet+0x32>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800ee28:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800ee2a:	4295      	cmp	r5, r2
 800ee2c:	d027      	beq.n	800ee7e <vTaskPrioritySet+0x6a>
				if( uxNewPriority > uxCurrentBasePriority )
 800ee2e:	d90d      	bls.n	800ee4c <vTaskPrioritySet+0x38>
					if( pxTCB != pxCurrentTCB )
 800ee30:	4b24      	ldr	r3, [pc, #144]	; (800eec4 <vTaskPrioritySet+0xb0>)
 800ee32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee34:	42a3      	cmp	r3, r4
 800ee36:	d025      	beq.n	800ee84 <vTaskPrioritySet+0x70>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800ee38:	4b22      	ldr	r3, [pc, #136]	; (800eec4 <vTaskPrioritySet+0xb0>)
 800ee3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee3e:	42ab      	cmp	r3, r5
 800ee40:	d922      	bls.n	800ee88 <vTaskPrioritySet+0x74>
	BaseType_t xYieldRequired = pdFALSE;
 800ee42:	2600      	movs	r6, #0
 800ee44:	e007      	b.n	800ee56 <vTaskPrioritySet+0x42>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ee46:	4b1f      	ldr	r3, [pc, #124]	; (800eec4 <vTaskPrioritySet+0xb0>)
 800ee48:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800ee4a:	e7ed      	b.n	800ee28 <vTaskPrioritySet+0x14>
				else if( pxTCB == pxCurrentTCB )
 800ee4c:	4b1d      	ldr	r3, [pc, #116]	; (800eec4 <vTaskPrioritySet+0xb0>)
 800ee4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee50:	42a3      	cmp	r3, r4
 800ee52:	d01b      	beq.n	800ee8c <vTaskPrioritySet+0x78>
	BaseType_t xYieldRequired = pdFALSE;
 800ee54:	2600      	movs	r6, #0
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ee56:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800ee58:	4282      	cmp	r2, r0
 800ee5a:	d019      	beq.n	800ee90 <vTaskPrioritySet+0x7c>
					pxTCB->uxBasePriority = uxNewPriority;
 800ee5c:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee5e:	69a3      	ldr	r3, [r4, #24]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	db02      	blt.n	800ee6a <vTaskPrioritySet+0x56>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee64:	2107      	movs	r1, #7
 800ee66:	1b4d      	subs	r5, r1, r5
 800ee68:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ee6a:	0083      	lsls	r3, r0, #2
 800ee6c:	181b      	adds	r3, r3, r0
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	4a15      	ldr	r2, [pc, #84]	; (800eec8 <vTaskPrioritySet+0xb4>)
 800ee72:	189b      	adds	r3, r3, r2
 800ee74:	6962      	ldr	r2, [r4, #20]
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d00c      	beq.n	800ee94 <vTaskPrioritySet+0x80>
				if( xYieldRequired == pdTRUE )
 800ee7a:	2e01      	cmp	r6, #1
 800ee7c:	d01e      	beq.n	800eebc <vTaskPrioritySet+0xa8>
		taskEXIT_CRITICAL();
 800ee7e:	f000 feed 	bl	800fc5c <vPortExitCritical>
	}
 800ee82:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800ee84:	2600      	movs	r6, #0
 800ee86:	e7e6      	b.n	800ee56 <vTaskPrioritySet+0x42>
							xYieldRequired = pdTRUE;
 800ee88:	2601      	movs	r6, #1
 800ee8a:	e7e4      	b.n	800ee56 <vTaskPrioritySet+0x42>
					xYieldRequired = pdTRUE;
 800ee8c:	2601      	movs	r6, #1
 800ee8e:	e7e2      	b.n	800ee56 <vTaskPrioritySet+0x42>
						pxTCB->uxPriority = uxNewPriority;
 800ee90:	62e5      	str	r5, [r4, #44]	; 0x2c
 800ee92:	e7e3      	b.n	800ee5c <vTaskPrioritySet+0x48>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ee94:	1d25      	adds	r5, r4, #4
 800ee96:	0028      	movs	r0, r5
 800ee98:	f7ff fb28 	bl	800e4ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ee9e:	4a0b      	ldr	r2, [pc, #44]	; (800eecc <vTaskPrioritySet+0xb8>)
 800eea0:	6812      	ldr	r2, [r2, #0]
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d901      	bls.n	800eeaa <vTaskPrioritySet+0x96>
 800eea6:	4a09      	ldr	r2, [pc, #36]	; (800eecc <vTaskPrioritySet+0xb8>)
 800eea8:	6013      	str	r3, [r2, #0]
 800eeaa:	0098      	lsls	r0, r3, #2
 800eeac:	18c0      	adds	r0, r0, r3
 800eeae:	0080      	lsls	r0, r0, #2
 800eeb0:	4b05      	ldr	r3, [pc, #20]	; (800eec8 <vTaskPrioritySet+0xb4>)
 800eeb2:	18c0      	adds	r0, r0, r3
 800eeb4:	0029      	movs	r1, r5
 800eeb6:	f7ff faf7 	bl	800e4a8 <vListInsertEnd>
 800eeba:	e7de      	b.n	800ee7a <vTaskPrioritySet+0x66>
					taskYIELD_IF_USING_PREEMPTION();
 800eebc:	f000 feb6 	bl	800fc2c <vPortYield>
 800eec0:	e7dd      	b.n	800ee7e <vTaskPrioritySet+0x6a>
 800eec2:	46c0      	nop			; (mov r8, r8)
 800eec4:	20002e60 	.word	0x20002e60
 800eec8:	20002f00 	.word	0x20002f00
 800eecc:	20002ee0 	.word	0x20002ee0

0800eed0 <vTaskStartScheduler>:
{
 800eed0:	b500      	push	{lr}
 800eed2:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800eed4:	2300      	movs	r3, #0
 800eed6:	9303      	str	r3, [sp, #12]
 800eed8:	9302      	str	r3, [sp, #8]
 800eeda:	9301      	str	r3, [sp, #4]
 800eedc:	9300      	str	r3, [sp, #0]
 800eede:	2296      	movs	r2, #150	; 0x96
 800eee0:	490b      	ldr	r1, [pc, #44]	; (800ef10 <vTaskStartScheduler+0x40>)
 800eee2:	480c      	ldr	r0, [pc, #48]	; (800ef14 <vTaskStartScheduler+0x44>)
 800eee4:	f7ff ff0a 	bl	800ecfc <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800eee8:	2801      	cmp	r0, #1
 800eeea:	d003      	beq.n	800eef4 <vTaskStartScheduler+0x24>
	if( xReturn == pdPASS )
 800eeec:	2801      	cmp	r0, #1
 800eeee:	d004      	beq.n	800eefa <vTaskStartScheduler+0x2a>
}
 800eef0:	b005      	add	sp, #20
 800eef2:	bd00      	pop	{pc}
			xReturn = xTimerCreateTimerTask();
 800eef4:	f000 fcde 	bl	800f8b4 <xTimerCreateTimerTask>
 800eef8:	e7f8      	b.n	800eeec <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800eefa:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800eefc:	4b06      	ldr	r3, [pc, #24]	; (800ef18 <vTaskStartScheduler+0x48>)
 800eefe:	2201      	movs	r2, #1
 800ef00:	679a      	str	r2, [r3, #120]	; 0x78
		xTickCount = ( TickType_t ) 0U;
 800ef02:	2200      	movs	r2, #0
 800ef04:	671a      	str	r2, [r3, #112]	; 0x70
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ef06:	f7f8 ff1b 	bl	8007d40 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800ef0a:	f000 fe75 	bl	800fbf8 <xPortStartScheduler>
}
 800ef0e:	e7ef      	b.n	800eef0 <vTaskStartScheduler+0x20>
 800ef10:	0801c5c0 	.word	0x0801c5c0
 800ef14:	0800f171 	.word	0x0800f171
 800ef18:	20002e60 	.word	0x20002e60

0800ef1c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800ef1c:	4a02      	ldr	r2, [pc, #8]	; (800ef28 <vTaskSuspendAll+0xc>)
 800ef1e:	6893      	ldr	r3, [r2, #8]
 800ef20:	3301      	adds	r3, #1
 800ef22:	6093      	str	r3, [r2, #8]
}
 800ef24:	4770      	bx	lr
 800ef26:	46c0      	nop			; (mov r8, r8)
 800ef28:	20002ee0 	.word	0x20002ee0

0800ef2c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800ef2c:	4b01      	ldr	r3, [pc, #4]	; (800ef34 <xTaskGetTickCount+0x8>)
 800ef2e:	6f18      	ldr	r0, [r3, #112]	; 0x70
}
 800ef30:	4770      	bx	lr
 800ef32:	46c0      	nop			; (mov r8, r8)
 800ef34:	20002e60 	.word	0x20002e60

0800ef38 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800ef38:	4b01      	ldr	r3, [pc, #4]	; (800ef40 <xTaskGetTickCountFromISR+0x8>)
 800ef3a:	6f18      	ldr	r0, [r3, #112]	; 0x70
}
 800ef3c:	4770      	bx	lr
 800ef3e:	46c0      	nop			; (mov r8, r8)
 800ef40:	20002e60 	.word	0x20002e60

0800ef44 <xTaskIncrementTick>:
{
 800ef44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef46:	4b35      	ldr	r3, [pc, #212]	; (800f01c <xTaskIncrementTick+0xd8>)
 800ef48:	689b      	ldr	r3, [r3, #8]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d15a      	bne.n	800f004 <xTaskIncrementTick+0xc0>
		++xTickCount;
 800ef4e:	4b34      	ldr	r3, [pc, #208]	; (800f020 <xTaskIncrementTick+0xdc>)
 800ef50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ef52:	3201      	adds	r2, #1
 800ef54:	671a      	str	r2, [r3, #112]	; 0x70
			const TickType_t xConstTickCount = xTickCount;
 800ef56:	6f1f      	ldr	r7, [r3, #112]	; 0x70
			if( xConstTickCount == ( TickType_t ) 0U )
 800ef58:	2f00      	cmp	r7, #0
 800ef5a:	d010      	beq.n	800ef7e <xTaskIncrementTick+0x3a>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800ef5c:	4b31      	ldr	r3, [pc, #196]	; (800f024 <xTaskIncrementTick+0xe0>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	42bb      	cmp	r3, r7
 800ef62:	d945      	bls.n	800eff0 <xTaskIncrementTick+0xac>
BaseType_t xSwitchRequired = pdFALSE;
 800ef64:	2600      	movs	r6, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ef66:	4b2e      	ldr	r3, [pc, #184]	; (800f020 <xTaskIncrementTick+0xdc>)
 800ef68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef6c:	0093      	lsls	r3, r2, #2
 800ef6e:	189b      	adds	r3, r3, r2
 800ef70:	009a      	lsls	r2, r3, #2
 800ef72:	4b2d      	ldr	r3, [pc, #180]	; (800f028 <xTaskIncrementTick+0xe4>)
 800ef74:	58d3      	ldr	r3, [r2, r3]
 800ef76:	2b01      	cmp	r3, #1
 800ef78:	d949      	bls.n	800f00e <xTaskIncrementTick+0xca>
				xSwitchRequired = pdTRUE;
 800ef7a:	2601      	movs	r6, #1
 800ef7c:	e047      	b.n	800f00e <xTaskIncrementTick+0xca>
				taskSWITCH_DELAYED_LISTS();
 800ef7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef80:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800ef82:	6299      	str	r1, [r3, #40]	; 0x28
 800ef84:	669a      	str	r2, [r3, #104]	; 0x68
 800ef86:	4a25      	ldr	r2, [pc, #148]	; (800f01c <xTaskIncrementTick+0xd8>)
 800ef88:	68d3      	ldr	r3, [r2, #12]
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	60d3      	str	r3, [r2, #12]
 800ef8e:	f7ff fdef 	bl	800eb70 <prvResetNextTaskUnblockTime>
 800ef92:	e7e3      	b.n	800ef5c <xTaskIncrementTick+0x18>
								xSwitchRequired = pdTRUE;
 800ef94:	2601      	movs	r6, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef96:	4b22      	ldr	r3, [pc, #136]	; (800f020 <xTaskIncrementTick+0xdc>)
 800ef98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d029      	beq.n	800eff4 <xTaskIncrementTick+0xb0>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800efa0:	4b1f      	ldr	r3, [pc, #124]	; (800f020 <xTaskIncrementTick+0xdc>)
 800efa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efa4:	68db      	ldr	r3, [r3, #12]
 800efa6:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800efa8:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800efaa:	429f      	cmp	r7, r3
 800efac:	d327      	bcc.n	800effe <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800efae:	1d25      	adds	r5, r4, #4
 800efb0:	0028      	movs	r0, r5
 800efb2:	f7ff fa9b 	bl	800e4ec <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800efb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d003      	beq.n	800efc4 <xTaskIncrementTick+0x80>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800efbc:	0020      	movs	r0, r4
 800efbe:	3018      	adds	r0, #24
 800efc0:	f7ff fa94 	bl	800e4ec <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800efc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800efc6:	4b15      	ldr	r3, [pc, #84]	; (800f01c <xTaskIncrementTick+0xd8>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d901      	bls.n	800efd2 <xTaskIncrementTick+0x8e>
 800efce:	4b13      	ldr	r3, [pc, #76]	; (800f01c <xTaskIncrementTick+0xd8>)
 800efd0:	601a      	str	r2, [r3, #0]
 800efd2:	0093      	lsls	r3, r2, #2
 800efd4:	189b      	adds	r3, r3, r2
 800efd6:	0098      	lsls	r0, r3, #2
 800efd8:	4b13      	ldr	r3, [pc, #76]	; (800f028 <xTaskIncrementTick+0xe4>)
 800efda:	18c0      	adds	r0, r0, r3
 800efdc:	0029      	movs	r1, r5
 800efde:	f7ff fa63 	bl	800e4a8 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800efe2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800efe4:	4b0e      	ldr	r3, [pc, #56]	; (800f020 <xTaskIncrementTick+0xdc>)
 800efe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efea:	429a      	cmp	r2, r3
 800efec:	d2d2      	bcs.n	800ef94 <xTaskIncrementTick+0x50>
 800efee:	e7d2      	b.n	800ef96 <xTaskIncrementTick+0x52>
BaseType_t xSwitchRequired = pdFALSE;
 800eff0:	2600      	movs	r6, #0
 800eff2:	e7d0      	b.n	800ef96 <xTaskIncrementTick+0x52>
						xNextTaskUnblockTime = portMAX_DELAY;
 800eff4:	4b0b      	ldr	r3, [pc, #44]	; (800f024 <xTaskIncrementTick+0xe0>)
 800eff6:	2201      	movs	r2, #1
 800eff8:	4252      	negs	r2, r2
 800effa:	601a      	str	r2, [r3, #0]
						break;
 800effc:	e7b3      	b.n	800ef66 <xTaskIncrementTick+0x22>
							xNextTaskUnblockTime = xItemValue;
 800effe:	4a09      	ldr	r2, [pc, #36]	; (800f024 <xTaskIncrementTick+0xe0>)
 800f000:	6013      	str	r3, [r2, #0]
							break;
 800f002:	e7b0      	b.n	800ef66 <xTaskIncrementTick+0x22>
		++uxPendedTicks;
 800f004:	4a05      	ldr	r2, [pc, #20]	; (800f01c <xTaskIncrementTick+0xd8>)
 800f006:	6913      	ldr	r3, [r2, #16]
 800f008:	3301      	adds	r3, #1
 800f00a:	6113      	str	r3, [r2, #16]
BaseType_t xSwitchRequired = pdFALSE;
 800f00c:	2600      	movs	r6, #0
		if( xYieldPending != pdFALSE )
 800f00e:	4b03      	ldr	r3, [pc, #12]	; (800f01c <xTaskIncrementTick+0xd8>)
 800f010:	695b      	ldr	r3, [r3, #20]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d000      	beq.n	800f018 <xTaskIncrementTick+0xd4>
			xSwitchRequired = pdTRUE;
 800f016:	2601      	movs	r6, #1
}
 800f018:	0030      	movs	r0, r6
 800f01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f01c:	20002ee0 	.word	0x20002ee0
 800f020:	20002e60 	.word	0x20002e60
 800f024:	200000c4 	.word	0x200000c4
 800f028:	20002f00 	.word	0x20002f00

0800f02c <xTaskResumeAll>:
{
 800f02c:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 800f02e:	f000 fe09 	bl	800fc44 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f032:	4b2c      	ldr	r3, [pc, #176]	; (800f0e4 <xTaskResumeAll+0xb8>)
 800f034:	689a      	ldr	r2, [r3, #8]
 800f036:	3a01      	subs	r2, #1
 800f038:	609a      	str	r2, [r3, #8]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f03a:	689b      	ldr	r3, [r3, #8]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d14b      	bne.n	800f0d8 <xTaskResumeAll+0xac>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f040:	4b29      	ldr	r3, [pc, #164]	; (800f0e8 <xTaskResumeAll+0xbc>)
 800f042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f044:	2b00      	cmp	r3, #0
 800f046:	d10f      	bne.n	800f068 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 800f048:	2400      	movs	r4, #0
 800f04a:	e046      	b.n	800f0da <xTaskResumeAll+0xae>
					prvAddTaskToReadyList( pxTCB );
 800f04c:	0098      	lsls	r0, r3, #2
 800f04e:	18c0      	adds	r0, r0, r3
 800f050:	0080      	lsls	r0, r0, #2
 800f052:	4b26      	ldr	r3, [pc, #152]	; (800f0ec <xTaskResumeAll+0xc0>)
 800f054:	18c0      	adds	r0, r0, r3
 800f056:	0029      	movs	r1, r5
 800f058:	f7ff fa26 	bl	800e4a8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f05c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f05e:	4b22      	ldr	r3, [pc, #136]	; (800f0e8 <xTaskResumeAll+0xbc>)
 800f060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f064:	429a      	cmp	r2, r3
 800f066:	d216      	bcs.n	800f096 <xTaskResumeAll+0x6a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f068:	4b1f      	ldr	r3, [pc, #124]	; (800f0e8 <xTaskResumeAll+0xbc>)
 800f06a:	695b      	ldr	r3, [r3, #20]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d016      	beq.n	800f09e <xTaskResumeAll+0x72>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f070:	4b1d      	ldr	r3, [pc, #116]	; (800f0e8 <xTaskResumeAll+0xbc>)
 800f072:	6a1b      	ldr	r3, [r3, #32]
 800f074:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f076:	0020      	movs	r0, r4
 800f078:	3018      	adds	r0, #24
 800f07a:	f7ff fa37 	bl	800e4ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f07e:	1d25      	adds	r5, r4, #4
 800f080:	0028      	movs	r0, r5
 800f082:	f7ff fa33 	bl	800e4ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f086:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f088:	4a16      	ldr	r2, [pc, #88]	; (800f0e4 <xTaskResumeAll+0xb8>)
 800f08a:	6812      	ldr	r2, [r2, #0]
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d9dd      	bls.n	800f04c <xTaskResumeAll+0x20>
 800f090:	4a14      	ldr	r2, [pc, #80]	; (800f0e4 <xTaskResumeAll+0xb8>)
 800f092:	6013      	str	r3, [r2, #0]
 800f094:	e7da      	b.n	800f04c <xTaskResumeAll+0x20>
						xYieldPending = pdTRUE;
 800f096:	4b13      	ldr	r3, [pc, #76]	; (800f0e4 <xTaskResumeAll+0xb8>)
 800f098:	2201      	movs	r2, #1
 800f09a:	615a      	str	r2, [r3, #20]
 800f09c:	e7e4      	b.n	800f068 <xTaskResumeAll+0x3c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f09e:	4b11      	ldr	r3, [pc, #68]	; (800f0e4 <xTaskResumeAll+0xb8>)
 800f0a0:	691b      	ldr	r3, [r3, #16]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d109      	bne.n	800f0ba <xTaskResumeAll+0x8e>
				if( xYieldPending == pdTRUE )
 800f0a6:	4b0f      	ldr	r3, [pc, #60]	; (800f0e4 <xTaskResumeAll+0xb8>)
 800f0a8:	695c      	ldr	r4, [r3, #20]
 800f0aa:	2c01      	cmp	r4, #1
 800f0ac:	d011      	beq.n	800f0d2 <xTaskResumeAll+0xa6>
BaseType_t xAlreadyYielded = pdFALSE;
 800f0ae:	2400      	movs	r4, #0
 800f0b0:	e013      	b.n	800f0da <xTaskResumeAll+0xae>
						--uxPendedTicks;
 800f0b2:	4a0c      	ldr	r2, [pc, #48]	; (800f0e4 <xTaskResumeAll+0xb8>)
 800f0b4:	6913      	ldr	r3, [r2, #16]
 800f0b6:	3b01      	subs	r3, #1
 800f0b8:	6113      	str	r3, [r2, #16]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f0ba:	4b0a      	ldr	r3, [pc, #40]	; (800f0e4 <xTaskResumeAll+0xb8>)
 800f0bc:	691b      	ldr	r3, [r3, #16]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d0f1      	beq.n	800f0a6 <xTaskResumeAll+0x7a>
						if( xTaskIncrementTick() != pdFALSE )
 800f0c2:	f7ff ff3f 	bl	800ef44 <xTaskIncrementTick>
 800f0c6:	2800      	cmp	r0, #0
 800f0c8:	d0f3      	beq.n	800f0b2 <xTaskResumeAll+0x86>
							xYieldPending = pdTRUE;
 800f0ca:	4b06      	ldr	r3, [pc, #24]	; (800f0e4 <xTaskResumeAll+0xb8>)
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	615a      	str	r2, [r3, #20]
 800f0d0:	e7ef      	b.n	800f0b2 <xTaskResumeAll+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800f0d2:	f000 fdab 	bl	800fc2c <vPortYield>
 800f0d6:	e000      	b.n	800f0da <xTaskResumeAll+0xae>
BaseType_t xAlreadyYielded = pdFALSE;
 800f0d8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f0da:	f000 fdbf 	bl	800fc5c <vPortExitCritical>
}
 800f0de:	0020      	movs	r0, r4
 800f0e0:	bd70      	pop	{r4, r5, r6, pc}
 800f0e2:	46c0      	nop			; (mov r8, r8)
 800f0e4:	20002ee0 	.word	0x20002ee0
 800f0e8:	20002e60 	.word	0x20002e60
 800f0ec:	20002f00 	.word	0x20002f00

0800f0f0 <vTaskDelay>:
	{
 800f0f0:	b510      	push	{r4, lr}
 800f0f2:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f0f4:	d00f      	beq.n	800f116 <vTaskDelay+0x26>
			vTaskSuspendAll();
 800f0f6:	f7ff ff11 	bl	800ef1c <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800f0fa:	4b08      	ldr	r3, [pc, #32]	; (800f11c <vTaskDelay+0x2c>)
 800f0fc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f0fe:	1904      	adds	r4, r0, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f100:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f102:	3004      	adds	r0, #4
 800f104:	f7ff f9f2 	bl	800e4ec <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f108:	0020      	movs	r0, r4
 800f10a:	f7ff fdc5 	bl	800ec98 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800f10e:	f7ff ff8d 	bl	800f02c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800f112:	2800      	cmp	r0, #0
 800f114:	d101      	bne.n	800f11a <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
 800f116:	f000 fd89 	bl	800fc2c <vPortYield>
	}
 800f11a:	bd10      	pop	{r4, pc}
 800f11c:	20002e60 	.word	0x20002e60

0800f120 <prvCheckTasksWaitingTermination>:
{
 800f120:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f122:	4b11      	ldr	r3, [pc, #68]	; (800f168 <prvCheckTasksWaitingTermination+0x48>)
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d01c      	beq.n	800f164 <prvCheckTasksWaitingTermination+0x44>
			vTaskSuspendAll();
 800f12a:	f7ff fef7 	bl	800ef1c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f12e:	4b0f      	ldr	r3, [pc, #60]	; (800f16c <prvCheckTasksWaitingTermination+0x4c>)
 800f130:	6d5c      	ldr	r4, [r3, #84]	; 0x54
			( void ) xTaskResumeAll();
 800f132:	f7ff ff7b 	bl	800f02c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800f136:	2c00      	cmp	r4, #0
 800f138:	d0f3      	beq.n	800f122 <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
 800f13a:	f000 fd83 	bl	800fc44 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f13e:	4c0b      	ldr	r4, [pc, #44]	; (800f16c <prvCheckTasksWaitingTermination+0x4c>)
 800f140:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f142:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f144:	1d28      	adds	r0, r5, #4
 800f146:	f7ff f9d1 	bl	800e4ec <uxListRemove>
					--uxCurrentNumberOfTasks;
 800f14a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800f14c:	3b01      	subs	r3, #1
 800f14e:	6763      	str	r3, [r4, #116]	; 0x74
					--uxTasksDeleted;
 800f150:	4a05      	ldr	r2, [pc, #20]	; (800f168 <prvCheckTasksWaitingTermination+0x48>)
 800f152:	6853      	ldr	r3, [r2, #4]
 800f154:	3b01      	subs	r3, #1
 800f156:	6053      	str	r3, [r2, #4]
				taskEXIT_CRITICAL();
 800f158:	f000 fd80 	bl	800fc5c <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 800f15c:	0028      	movs	r0, r5
 800f15e:	f7ff fd1d 	bl	800eb9c <prvDeleteTCB>
 800f162:	e7de      	b.n	800f122 <prvCheckTasksWaitingTermination+0x2>
}
 800f164:	bd70      	pop	{r4, r5, r6, pc}
 800f166:	46c0      	nop			; (mov r8, r8)
 800f168:	20002ee0 	.word	0x20002ee0
 800f16c:	20002e60 	.word	0x20002e60

0800f170 <prvIdleTask>:
{
 800f170:	b510      	push	{r4, lr}
		prvCheckTasksWaitingTermination();
 800f172:	f7ff ffd5 	bl	800f120 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f176:	4b03      	ldr	r3, [pc, #12]	; (800f184 <prvIdleTask+0x14>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	2b01      	cmp	r3, #1
 800f17c:	d9f9      	bls.n	800f172 <prvIdleTask+0x2>
				taskYIELD();
 800f17e:	f000 fd55 	bl	800fc2c <vPortYield>
 800f182:	e7f6      	b.n	800f172 <prvIdleTask+0x2>
 800f184:	20002f00 	.word	0x20002f00

0800f188 <uxTaskGetSystemState>:
	{
 800f188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f18a:	0006      	movs	r6, r0
 800f18c:	000c      	movs	r4, r1
 800f18e:	0015      	movs	r5, r2
		vTaskSuspendAll();
 800f190:	f7ff fec4 	bl	800ef1c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f194:	4b1e      	ldr	r3, [pc, #120]	; (800f210 <uxTaskGetSystemState+0x88>)
 800f196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f198:	42a3      	cmp	r3, r4
 800f19a:	d833      	bhi.n	800f204 <uxTaskGetSystemState+0x7c>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f19c:	2707      	movs	r7, #7
 800f19e:	2400      	movs	r4, #0
					uxQueue--;
 800f1a0:	3f01      	subs	r7, #1
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f1a2:	0160      	lsls	r0, r4, #5
 800f1a4:	00b9      	lsls	r1, r7, #2
 800f1a6:	19c9      	adds	r1, r1, r7
 800f1a8:	0089      	lsls	r1, r1, #2
 800f1aa:	4b1a      	ldr	r3, [pc, #104]	; (800f214 <uxTaskGetSystemState+0x8c>)
 800f1ac:	18c9      	adds	r1, r1, r3
 800f1ae:	1830      	adds	r0, r6, r0
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	f7ff fc8f 	bl	800ead4 <prvListTaskWithinSingleList>
 800f1b6:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1b8:	2f00      	cmp	r7, #0
 800f1ba:	d1f1      	bne.n	800f1a0 <uxTaskGetSystemState+0x18>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f1bc:	0160      	lsls	r0, r4, #5
 800f1be:	4f14      	ldr	r7, [pc, #80]	; (800f210 <uxTaskGetSystemState+0x88>)
 800f1c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1c2:	1830      	adds	r0, r6, r0
 800f1c4:	2202      	movs	r2, #2
 800f1c6:	f7ff fc85 	bl	800ead4 <prvListTaskWithinSingleList>
 800f1ca:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f1cc:	0160      	lsls	r0, r4, #5
 800f1ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f1d0:	1830      	adds	r0, r6, r0
 800f1d2:	2202      	movs	r2, #2
 800f1d4:	f7ff fc7e 	bl	800ead4 <prvListTaskWithinSingleList>
 800f1d8:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f1da:	0160      	lsls	r0, r4, #5
 800f1dc:	0039      	movs	r1, r7
 800f1de:	3154      	adds	r1, #84	; 0x54
 800f1e0:	1830      	adds	r0, r6, r0
 800f1e2:	2204      	movs	r2, #4
 800f1e4:	f7ff fc76 	bl	800ead4 <prvListTaskWithinSingleList>
 800f1e8:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f1ea:	0160      	lsls	r0, r4, #5
 800f1ec:	1830      	adds	r0, r6, r0
 800f1ee:	2203      	movs	r2, #3
 800f1f0:	0039      	movs	r1, r7
 800f1f2:	f7ff fc6f 	bl	800ead4 <prvListTaskWithinSingleList>
 800f1f6:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800f1f8:	2d00      	cmp	r5, #0
 800f1fa:	d004      	beq.n	800f206 <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f1fc:	f7f8 fdb0 	bl	8007d60 <ulMainGetRunTimeCounterValue>
 800f200:	6028      	str	r0, [r5, #0]
 800f202:	e000      	b.n	800f206 <uxTaskGetSystemState+0x7e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f204:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 800f206:	f7ff ff11 	bl	800f02c <xTaskResumeAll>
	}
 800f20a:	0020      	movs	r0, r4
 800f20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f20e:	46c0      	nop			; (mov r8, r8)
 800f210:	20002e60 	.word	0x20002e60
 800f214:	20002f00 	.word	0x20002f00

0800f218 <vTaskSwitchContext>:
{
 800f218:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f21a:	4b33      	ldr	r3, [pc, #204]	; (800f2e8 <vTaskSwitchContext+0xd0>)
 800f21c:	689b      	ldr	r3, [r3, #8]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d003      	beq.n	800f22a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800f222:	4b31      	ldr	r3, [pc, #196]	; (800f2e8 <vTaskSwitchContext+0xd0>)
 800f224:	2201      	movs	r2, #1
 800f226:	615a      	str	r2, [r3, #20]
}
 800f228:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800f22a:	4c2f      	ldr	r4, [pc, #188]	; (800f2e8 <vTaskSwitchContext+0xd0>)
 800f22c:	2300      	movs	r3, #0
 800f22e:	6163      	str	r3, [r4, #20]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f230:	f7f8 fd96 	bl	8007d60 <ulMainGetRunTimeCounterValue>
 800f234:	61a0      	str	r0, [r4, #24]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f236:	69e3      	ldr	r3, [r4, #28]
 800f238:	4298      	cmp	r0, r3
 800f23a:	d906      	bls.n	800f24a <vTaskSwitchContext+0x32>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f23c:	4a2b      	ldr	r2, [pc, #172]	; (800f2ec <vTaskSwitchContext+0xd4>)
 800f23e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800f240:	1ac3      	subs	r3, r0, r3
 800f242:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800f244:	468c      	mov	ip, r1
 800f246:	4463      	add	r3, ip
 800f248:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800f24a:	4b27      	ldr	r3, [pc, #156]	; (800f2e8 <vTaskSwitchContext+0xd0>)
 800f24c:	61d8      	str	r0, [r3, #28]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f24e:	4b27      	ldr	r3, [pc, #156]	; (800f2ec <vTaskSwitchContext+0xd4>)
 800f250:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f252:	6812      	ldr	r2, [r2, #0]
 800f254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f258:	429a      	cmp	r2, r3
 800f25a:	d90f      	bls.n	800f27c <vTaskSwitchContext+0x64>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800f25c:	4b23      	ldr	r3, [pc, #140]	; (800f2ec <vTaskSwitchContext+0xd4>)
 800f25e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f260:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f262:	2214      	movs	r2, #20
 800f264:	4922      	ldr	r1, [pc, #136]	; (800f2f0 <vTaskSwitchContext+0xd8>)
 800f266:	f004 f925 	bl	80134b4 <memcmp>
 800f26a:	2800      	cmp	r0, #0
 800f26c:	d011      	beq.n	800f292 <vTaskSwitchContext+0x7a>
 800f26e:	4b1f      	ldr	r3, [pc, #124]	; (800f2ec <vTaskSwitchContext+0xd4>)
 800f270:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f272:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f274:	3134      	adds	r1, #52	; 0x34
 800f276:	f7fe f9bb 	bl	800d5f0 <vApplicationStackOverflowHook>
 800f27a:	e00a      	b.n	800f292 <vTaskSwitchContext+0x7a>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f27c:	4b1b      	ldr	r3, [pc, #108]	; (800f2ec <vTaskSwitchContext+0xd4>)
 800f27e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f280:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f282:	3134      	adds	r1, #52	; 0x34
 800f284:	f7fe f9b4 	bl	800d5f0 <vApplicationStackOverflowHook>
 800f288:	e7e8      	b.n	800f25c <vTaskSwitchContext+0x44>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f28a:	4a17      	ldr	r2, [pc, #92]	; (800f2e8 <vTaskSwitchContext+0xd0>)
 800f28c:	6813      	ldr	r3, [r2, #0]
 800f28e:	3b01      	subs	r3, #1
 800f290:	6013      	str	r3, [r2, #0]
 800f292:	4b15      	ldr	r3, [pc, #84]	; (800f2e8 <vTaskSwitchContext+0xd0>)
 800f294:	681a      	ldr	r2, [r3, #0]
 800f296:	0093      	lsls	r3, r2, #2
 800f298:	189b      	adds	r3, r3, r2
 800f29a:	009b      	lsls	r3, r3, #2
 800f29c:	4a15      	ldr	r2, [pc, #84]	; (800f2f4 <vTaskSwitchContext+0xdc>)
 800f29e:	589b      	ldr	r3, [r3, r2]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d0f2      	beq.n	800f28a <vTaskSwitchContext+0x72>
 800f2a4:	4b10      	ldr	r3, [pc, #64]	; (800f2e8 <vTaskSwitchContext+0xd0>)
 800f2a6:	6819      	ldr	r1, [r3, #0]
 800f2a8:	0014      	movs	r4, r2
 800f2aa:	008b      	lsls	r3, r1, #2
 800f2ac:	185a      	adds	r2, r3, r1
 800f2ae:	0092      	lsls	r2, r2, #2
 800f2b0:	18a2      	adds	r2, r4, r2
 800f2b2:	6850      	ldr	r0, [r2, #4]
 800f2b4:	6840      	ldr	r0, [r0, #4]
 800f2b6:	6050      	str	r0, [r2, #4]
 800f2b8:	185b      	adds	r3, r3, r1
 800f2ba:	009b      	lsls	r3, r3, #2
 800f2bc:	3308      	adds	r3, #8
 800f2be:	191b      	adds	r3, r3, r4
 800f2c0:	4298      	cmp	r0, r3
 800f2c2:	d009      	beq.n	800f2d8 <vTaskSwitchContext+0xc0>
 800f2c4:	008b      	lsls	r3, r1, #2
 800f2c6:	1859      	adds	r1, r3, r1
 800f2c8:	0089      	lsls	r1, r1, #2
 800f2ca:	4b0a      	ldr	r3, [pc, #40]	; (800f2f4 <vTaskSwitchContext+0xdc>)
 800f2cc:	1859      	adds	r1, r3, r1
 800f2ce:	684b      	ldr	r3, [r1, #4]
 800f2d0:	68da      	ldr	r2, [r3, #12]
 800f2d2:	4b06      	ldr	r3, [pc, #24]	; (800f2ec <vTaskSwitchContext+0xd4>)
 800f2d4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800f2d6:	e7a7      	b.n	800f228 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f2d8:	6840      	ldr	r0, [r0, #4]
 800f2da:	008b      	lsls	r3, r1, #2
 800f2dc:	185b      	adds	r3, r3, r1
 800f2de:	009b      	lsls	r3, r3, #2
 800f2e0:	18e3      	adds	r3, r4, r3
 800f2e2:	6058      	str	r0, [r3, #4]
 800f2e4:	e7ee      	b.n	800f2c4 <vTaskSwitchContext+0xac>
 800f2e6:	46c0      	nop			; (mov r8, r8)
 800f2e8:	20002ee0 	.word	0x20002ee0
 800f2ec:	20002e60 	.word	0x20002e60
 800f2f0:	08019cd8 	.word	0x08019cd8
 800f2f4:	20002f00 	.word	0x20002f00

0800f2f8 <vTaskPlaceOnEventList>:
{
 800f2f8:	b570      	push	{r4, r5, r6, lr}
 800f2fa:	000c      	movs	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f2fc:	4d0b      	ldr	r5, [pc, #44]	; (800f32c <vTaskPlaceOnEventList+0x34>)
 800f2fe:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800f300:	3118      	adds	r1, #24
 800f302:	f7ff f8dc 	bl	800e4be <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f306:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800f308:	3004      	adds	r0, #4
 800f30a:	f7ff f8ef 	bl	800e4ec <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800f30e:	1c63      	adds	r3, r4, #1
 800f310:	d005      	beq.n	800f31e <vTaskPlaceOnEventList+0x26>
			xTimeToWake = xTickCount + xTicksToWait;
 800f312:	4b06      	ldr	r3, [pc, #24]	; (800f32c <vTaskPlaceOnEventList+0x34>)
 800f314:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f316:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f318:	f7ff fcbe 	bl	800ec98 <prvAddCurrentTaskToDelayedList>
}
 800f31c:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f31e:	4803      	ldr	r0, [pc, #12]	; (800f32c <vTaskPlaceOnEventList+0x34>)
 800f320:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800f322:	3104      	adds	r1, #4
 800f324:	f7ff f8c0 	bl	800e4a8 <vListInsertEnd>
 800f328:	e7f8      	b.n	800f31c <vTaskPlaceOnEventList+0x24>
 800f32a:	46c0      	nop			; (mov r8, r8)
 800f32c:	20002e60 	.word	0x20002e60

0800f330 <vTaskPlaceOnEventListRestricted>:
	{
 800f330:	b570      	push	{r4, r5, r6, lr}
 800f332:	000c      	movs	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f334:	4d06      	ldr	r5, [pc, #24]	; (800f350 <vTaskPlaceOnEventListRestricted+0x20>)
 800f336:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800f338:	3118      	adds	r1, #24
 800f33a:	f7ff f8b5 	bl	800e4a8 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f33e:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800f340:	3004      	adds	r0, #4
 800f342:	f7ff f8d3 	bl	800e4ec <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800f346:	6f28      	ldr	r0, [r5, #112]	; 0x70
 800f348:	1900      	adds	r0, r0, r4
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f34a:	f7ff fca5 	bl	800ec98 <prvAddCurrentTaskToDelayedList>
	}
 800f34e:	bd70      	pop	{r4, r5, r6, pc}
 800f350:	20002e60 	.word	0x20002e60

0800f354 <xTaskRemoveFromEventList>:
{
 800f354:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f356:	68c3      	ldr	r3, [r0, #12]
 800f358:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f35a:	0025      	movs	r5, r4
 800f35c:	3518      	adds	r5, #24
 800f35e:	0028      	movs	r0, r5
 800f360:	f7ff f8c4 	bl	800e4ec <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f364:	4b14      	ldr	r3, [pc, #80]	; (800f3b8 <xTaskRemoveFromEventList+0x64>)
 800f366:	689b      	ldr	r3, [r3, #8]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d11d      	bne.n	800f3a8 <xTaskRemoveFromEventList+0x54>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800f36c:	1d25      	adds	r5, r4, #4
 800f36e:	0028      	movs	r0, r5
 800f370:	f7ff f8bc 	bl	800e4ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f374:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f376:	4a10      	ldr	r2, [pc, #64]	; (800f3b8 <xTaskRemoveFromEventList+0x64>)
 800f378:	6812      	ldr	r2, [r2, #0]
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d901      	bls.n	800f382 <xTaskRemoveFromEventList+0x2e>
 800f37e:	4a0e      	ldr	r2, [pc, #56]	; (800f3b8 <xTaskRemoveFromEventList+0x64>)
 800f380:	6013      	str	r3, [r2, #0]
 800f382:	0098      	lsls	r0, r3, #2
 800f384:	18c0      	adds	r0, r0, r3
 800f386:	0080      	lsls	r0, r0, #2
 800f388:	4b0c      	ldr	r3, [pc, #48]	; (800f3bc <xTaskRemoveFromEventList+0x68>)
 800f38a:	18c0      	adds	r0, r0, r3
 800f38c:	0029      	movs	r1, r5
 800f38e:	f7ff f88b 	bl	800e4a8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f392:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f394:	4b0a      	ldr	r3, [pc, #40]	; (800f3c0 <xTaskRemoveFromEventList+0x6c>)
 800f396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d90a      	bls.n	800f3b4 <xTaskRemoveFromEventList+0x60>
		xYieldPending = pdTRUE;
 800f39e:	4b06      	ldr	r3, [pc, #24]	; (800f3b8 <xTaskRemoveFromEventList+0x64>)
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	615a      	str	r2, [r3, #20]
		xReturn = pdTRUE;
 800f3a4:	2001      	movs	r0, #1
}
 800f3a6:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f3a8:	4805      	ldr	r0, [pc, #20]	; (800f3c0 <xTaskRemoveFromEventList+0x6c>)
 800f3aa:	0029      	movs	r1, r5
 800f3ac:	3014      	adds	r0, #20
 800f3ae:	f7ff f87b 	bl	800e4a8 <vListInsertEnd>
 800f3b2:	e7ee      	b.n	800f392 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800f3b4:	2000      	movs	r0, #0
	return xReturn;
 800f3b6:	e7f6      	b.n	800f3a6 <xTaskRemoveFromEventList+0x52>
 800f3b8:	20002ee0 	.word	0x20002ee0
 800f3bc:	20002f00 	.word	0x20002f00
 800f3c0:	20002e60 	.word	0x20002e60

0800f3c4 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f3c4:	4b03      	ldr	r3, [pc, #12]	; (800f3d4 <vTaskSetTimeOutState+0x10>)
 800f3c6:	68db      	ldr	r3, [r3, #12]
 800f3c8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f3ca:	4b03      	ldr	r3, [pc, #12]	; (800f3d8 <vTaskSetTimeOutState+0x14>)
 800f3cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3ce:	6043      	str	r3, [r0, #4]
}
 800f3d0:	4770      	bx	lr
 800f3d2:	46c0      	nop			; (mov r8, r8)
 800f3d4:	20002ee0 	.word	0x20002ee0
 800f3d8:	20002e60 	.word	0x20002e60

0800f3dc <xTaskCheckForTimeOut>:
{
 800f3dc:	b570      	push	{r4, r5, r6, lr}
 800f3de:	0004      	movs	r4, r0
 800f3e0:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800f3e2:	f000 fc2f 	bl	800fc44 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f3e6:	4b11      	ldr	r3, [pc, #68]	; (800f42c <xTaskCheckForTimeOut+0x50>)
 800f3e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
			if( *pxTicksToWait == portMAX_DELAY )
 800f3ea:	682b      	ldr	r3, [r5, #0]
 800f3ec:	1c59      	adds	r1, r3, #1
 800f3ee:	d015      	beq.n	800f41c <xTaskCheckForTimeOut+0x40>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f3f0:	490f      	ldr	r1, [pc, #60]	; (800f430 <xTaskCheckForTimeOut+0x54>)
 800f3f2:	68c9      	ldr	r1, [r1, #12]
 800f3f4:	6820      	ldr	r0, [r4, #0]
 800f3f6:	4288      	cmp	r0, r1
 800f3f8:	d002      	beq.n	800f400 <xTaskCheckForTimeOut+0x24>
 800f3fa:	6861      	ldr	r1, [r4, #4]
 800f3fc:	4291      	cmp	r1, r2
 800f3fe:	d912      	bls.n	800f426 <xTaskCheckForTimeOut+0x4a>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f400:	6861      	ldr	r1, [r4, #4]
 800f402:	1a50      	subs	r0, r2, r1
 800f404:	4283      	cmp	r3, r0
 800f406:	d801      	bhi.n	800f40c <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
 800f408:	2401      	movs	r4, #1
 800f40a:	e008      	b.n	800f41e <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800f40c:	1a8a      	subs	r2, r1, r2
 800f40e:	18d3      	adds	r3, r2, r3
 800f410:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800f412:	0020      	movs	r0, r4
 800f414:	f7ff ffd6 	bl	800f3c4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800f418:	2400      	movs	r4, #0
 800f41a:	e000      	b.n	800f41e <xTaskCheckForTimeOut+0x42>
				xReturn = pdFALSE;
 800f41c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f41e:	f000 fc1d 	bl	800fc5c <vPortExitCritical>
}
 800f422:	0020      	movs	r0, r4
 800f424:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800f426:	2401      	movs	r4, #1
 800f428:	e7f9      	b.n	800f41e <xTaskCheckForTimeOut+0x42>
 800f42a:	46c0      	nop			; (mov r8, r8)
 800f42c:	20002e60 	.word	0x20002e60
 800f430:	20002ee0 	.word	0x20002ee0

0800f434 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f434:	4b01      	ldr	r3, [pc, #4]	; (800f43c <vTaskMissedYield+0x8>)
 800f436:	2201      	movs	r2, #1
 800f438:	615a      	str	r2, [r3, #20]
}
 800f43a:	4770      	bx	lr
 800f43c:	20002ee0 	.word	0x20002ee0

0800f440 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f440:	4b06      	ldr	r3, [pc, #24]	; (800f45c <xTaskGetSchedulerState+0x1c>)
 800f442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f444:	2b00      	cmp	r3, #0
 800f446:	d007      	beq.n	800f458 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f448:	4b05      	ldr	r3, [pc, #20]	; (800f460 <xTaskGetSchedulerState+0x20>)
 800f44a:	689b      	ldr	r3, [r3, #8]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d001      	beq.n	800f454 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 800f450:	2000      	movs	r0, #0
		return xReturn;
 800f452:	e002      	b.n	800f45a <xTaskGetSchedulerState+0x1a>
				xReturn = taskSCHEDULER_RUNNING;
 800f454:	2002      	movs	r0, #2
 800f456:	e000      	b.n	800f45a <xTaskGetSchedulerState+0x1a>
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f458:	2001      	movs	r0, #1
	}
 800f45a:	4770      	bx	lr
 800f45c:	20002e60 	.word	0x20002e60
 800f460:	20002ee0 	.word	0x20002ee0

0800f464 <vTaskPriorityInherit>:
	{
 800f464:	b570      	push	{r4, r5, r6, lr}
 800f466:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f468:	d01a      	beq.n	800f4a0 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f46a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f46c:	4b19      	ldr	r3, [pc, #100]	; (800f4d4 <vTaskPriorityInherit+0x70>)
 800f46e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f472:	429a      	cmp	r2, r3
 800f474:	d214      	bcs.n	800f4a0 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f476:	6983      	ldr	r3, [r0, #24]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	db05      	blt.n	800f488 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f47c:	4b15      	ldr	r3, [pc, #84]	; (800f4d4 <vTaskPriorityInherit+0x70>)
 800f47e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f482:	2307      	movs	r3, #7
 800f484:	1a5b      	subs	r3, r3, r1
 800f486:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f488:	0093      	lsls	r3, r2, #2
 800f48a:	189b      	adds	r3, r3, r2
 800f48c:	009b      	lsls	r3, r3, #2
 800f48e:	4a12      	ldr	r2, [pc, #72]	; (800f4d8 <vTaskPriorityInherit+0x74>)
 800f490:	189b      	adds	r3, r3, r2
 800f492:	6962      	ldr	r2, [r4, #20]
 800f494:	429a      	cmp	r2, r3
 800f496:	d004      	beq.n	800f4a2 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f498:	4b0e      	ldr	r3, [pc, #56]	; (800f4d4 <vTaskPriorityInherit+0x70>)
 800f49a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f49e:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800f4a0:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f4a2:	1d25      	adds	r5, r4, #4
 800f4a4:	0028      	movs	r0, r5
 800f4a6:	f7ff f821 	bl	800e4ec <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f4aa:	4b0a      	ldr	r3, [pc, #40]	; (800f4d4 <vTaskPriorityInherit+0x70>)
 800f4ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4b0:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f4b2:	4a0a      	ldr	r2, [pc, #40]	; (800f4dc <vTaskPriorityInherit+0x78>)
 800f4b4:	6812      	ldr	r2, [r2, #0]
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d808      	bhi.n	800f4cc <vTaskPriorityInherit+0x68>
 800f4ba:	0098      	lsls	r0, r3, #2
 800f4bc:	18c0      	adds	r0, r0, r3
 800f4be:	0080      	lsls	r0, r0, #2
 800f4c0:	4b05      	ldr	r3, [pc, #20]	; (800f4d8 <vTaskPriorityInherit+0x74>)
 800f4c2:	18c0      	adds	r0, r0, r3
 800f4c4:	0029      	movs	r1, r5
 800f4c6:	f7fe ffef 	bl	800e4a8 <vListInsertEnd>
	}
 800f4ca:	e7e9      	b.n	800f4a0 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800f4cc:	4a03      	ldr	r2, [pc, #12]	; (800f4dc <vTaskPriorityInherit+0x78>)
 800f4ce:	6013      	str	r3, [r2, #0]
 800f4d0:	e7f3      	b.n	800f4ba <vTaskPriorityInherit+0x56>
 800f4d2:	46c0      	nop			; (mov r8, r8)
 800f4d4:	20002e60 	.word	0x20002e60
 800f4d8:	20002f00 	.word	0x20002f00
 800f4dc:	20002ee0 	.word	0x20002ee0

0800f4e0 <xTaskPriorityDisinherit>:
	{
 800f4e0:	b570      	push	{r4, r5, r6, lr}
 800f4e2:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f4e4:	d023      	beq.n	800f52e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800f4e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f4e8:	3b01      	subs	r3, #1
 800f4ea:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f4ec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f4ee:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800f4f0:	428a      	cmp	r2, r1
 800f4f2:	d01e      	beq.n	800f532 <xTaskPriorityDisinherit+0x52>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d001      	beq.n	800f4fc <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800f4f8:	2000      	movs	r0, #0
	}
 800f4fa:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f4fc:	1d05      	adds	r5, r0, #4
 800f4fe:	0028      	movs	r0, r5
 800f500:	f7fe fff4 	bl	800e4ec <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f504:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f506:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f508:	2207      	movs	r2, #7
 800f50a:	1ad2      	subs	r2, r2, r3
 800f50c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f50e:	4a0a      	ldr	r2, [pc, #40]	; (800f538 <xTaskPriorityDisinherit+0x58>)
 800f510:	6812      	ldr	r2, [r2, #0]
 800f512:	4293      	cmp	r3, r2
 800f514:	d901      	bls.n	800f51a <xTaskPriorityDisinherit+0x3a>
 800f516:	4a08      	ldr	r2, [pc, #32]	; (800f538 <xTaskPriorityDisinherit+0x58>)
 800f518:	6013      	str	r3, [r2, #0]
 800f51a:	0098      	lsls	r0, r3, #2
 800f51c:	18c0      	adds	r0, r0, r3
 800f51e:	0080      	lsls	r0, r0, #2
 800f520:	4b06      	ldr	r3, [pc, #24]	; (800f53c <xTaskPriorityDisinherit+0x5c>)
 800f522:	18c0      	adds	r0, r0, r3
 800f524:	0029      	movs	r1, r5
 800f526:	f7fe ffbf 	bl	800e4a8 <vListInsertEnd>
					xReturn = pdTRUE;
 800f52a:	2001      	movs	r0, #1
 800f52c:	e7e5      	b.n	800f4fa <xTaskPriorityDisinherit+0x1a>
	BaseType_t xReturn = pdFALSE;
 800f52e:	2000      	movs	r0, #0
 800f530:	e7e3      	b.n	800f4fa <xTaskPriorityDisinherit+0x1a>
 800f532:	2000      	movs	r0, #0
 800f534:	e7e1      	b.n	800f4fa <xTaskPriorityDisinherit+0x1a>
 800f536:	46c0      	nop			; (mov r8, r8)
 800f538:	20002ee0 	.word	0x20002ee0
 800f53c:	20002f00 	.word	0x20002f00

0800f540 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f540:	b570      	push	{r4, r5, r6, lr}
 800f542:	b084      	sub	sp, #16
 800f544:	0005      	movs	r5, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f546:	2300      	movs	r3, #0
 800f548:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f54a:	4b29      	ldr	r3, [pc, #164]	; (800f5f0 <vTaskList+0xb0>)
 800f54c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800f54e:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f550:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800f552:	0140      	lsls	r0, r0, #5
 800f554:	f000 fc18 	bl	800fd88 <pvPortMalloc>
 800f558:	1e04      	subs	r4, r0, #0

		if( pxTaskStatusArray != NULL )
 800f55a:	d047      	beq.n	800f5ec <vTaskList+0xac>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f55c:	9903      	ldr	r1, [sp, #12]
 800f55e:	2200      	movs	r2, #0
 800f560:	f7ff fe12 	bl	800f188 <uxTaskGetSystemState>
 800f564:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800f566:	2300      	movs	r3, #0
 800f568:	9302      	str	r3, [sp, #8]
 800f56a:	e023      	b.n	800f5b4 <vTaskList+0x74>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f56c:	2b02      	cmp	r3, #2
 800f56e:	d136      	bne.n	800f5de <vTaskList+0x9e>
				{
					case eReady:		cStatus = tskREADY_CHAR;
										break;

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800f570:	2642      	movs	r6, #66	; 0x42
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f572:	9b02      	ldr	r3, [sp, #8]
 800f574:	015b      	lsls	r3, r3, #5
 800f576:	18e3      	adds	r3, r4, r3
 800f578:	6859      	ldr	r1, [r3, #4]
 800f57a:	0028      	movs	r0, r5
 800f57c:	f7ff fbac 	bl	800ecd8 <prvWriteNameToBuffer>
 800f580:	0005      	movs	r5, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f582:	9b02      	ldr	r3, [sp, #8]
 800f584:	015b      	lsls	r3, r3, #5
 800f586:	18e3      	adds	r3, r4, r3
 800f588:	691b      	ldr	r3, [r3, #16]
 800f58a:	9a02      	ldr	r2, [sp, #8]
 800f58c:	0152      	lsls	r2, r2, #5
 800f58e:	18a2      	adds	r2, r4, r2
 800f590:	8b91      	ldrh	r1, [r2, #28]
 800f592:	9a02      	ldr	r2, [sp, #8]
 800f594:	0152      	lsls	r2, r2, #5
 800f596:	18a2      	adds	r2, r4, r2
 800f598:	6892      	ldr	r2, [r2, #8]
 800f59a:	9201      	str	r2, [sp, #4]
 800f59c:	9100      	str	r1, [sp, #0]
 800f59e:	0032      	movs	r2, r6
 800f5a0:	4914      	ldr	r1, [pc, #80]	; (800f5f4 <vTaskList+0xb4>)
 800f5a2:	f004 f98f 	bl	80138c4 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800f5a6:	0028      	movs	r0, r5
 800f5a8:	f7f0 fdb6 	bl	8000118 <strlen>
 800f5ac:	182d      	adds	r5, r5, r0
			for( x = 0; x < uxArraySize; x++ )
 800f5ae:	9b02      	ldr	r3, [sp, #8]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	9302      	str	r3, [sp, #8]
 800f5b4:	9a02      	ldr	r2, [sp, #8]
 800f5b6:	9b03      	ldr	r3, [sp, #12]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d214      	bcs.n	800f5e6 <vTaskList+0xa6>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f5bc:	9b02      	ldr	r3, [sp, #8]
 800f5be:	015b      	lsls	r3, r3, #5
 800f5c0:	18e3      	adds	r3, r4, r3
 800f5c2:	7b1b      	ldrb	r3, [r3, #12]
 800f5c4:	2b03      	cmp	r3, #3
 800f5c6:	d008      	beq.n	800f5da <vTaskList+0x9a>
 800f5c8:	d803      	bhi.n	800f5d2 <vTaskList+0x92>
 800f5ca:	2b01      	cmp	r3, #1
 800f5cc:	d1ce      	bne.n	800f56c <vTaskList+0x2c>
 800f5ce:	2652      	movs	r6, #82	; 0x52
 800f5d0:	e7cf      	b.n	800f572 <vTaskList+0x32>
 800f5d2:	2b04      	cmp	r3, #4
 800f5d4:	d105      	bne.n	800f5e2 <vTaskList+0xa2>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800f5d6:	2644      	movs	r6, #68	; 0x44
 800f5d8:	e7cb      	b.n	800f572 <vTaskList+0x32>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800f5da:	2653      	movs	r6, #83	; 0x53
 800f5dc:	e7c9      	b.n	800f572 <vTaskList+0x32>
										cStatus = 0x00;
 800f5de:	2600      	movs	r6, #0
 800f5e0:	e7c7      	b.n	800f572 <vTaskList+0x32>
 800f5e2:	2600      	movs	r6, #0
 800f5e4:	e7c5      	b.n	800f572 <vTaskList+0x32>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f5e6:	0020      	movs	r0, r4
 800f5e8:	f000 fc32 	bl	800fe50 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f5ec:	b004      	add	sp, #16
 800f5ee:	bd70      	pop	{r4, r5, r6, pc}
 800f5f0:	20002e60 	.word	0x20002e60
 800f5f4:	0801c5c8 	.word	0x0801c5c8

0800f5f8 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800f5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5fa:	b087      	sub	sp, #28
 800f5fc:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f5fe:	2300      	movs	r3, #0
 800f600:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f602:	4b26      	ldr	r3, [pc, #152]	; (800f69c <vTaskGetRunTimeStats+0xa4>)
 800f604:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800f606:	9205      	str	r2, [sp, #20]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f608:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800f60a:	0140      	lsls	r0, r0, #5
 800f60c:	f000 fbbc 	bl	800fd88 <pvPortMalloc>
 800f610:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800f612:	d040      	beq.n	800f696 <vTaskGetRunTimeStats+0x9e>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f614:	9905      	ldr	r1, [sp, #20]
 800f616:	aa03      	add	r2, sp, #12
 800f618:	f7ff fdb6 	bl	800f188 <uxTaskGetSystemState>
 800f61c:	9005      	str	r0, [sp, #20]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800f61e:	2164      	movs	r1, #100	; 0x64
 800f620:	9803      	ldr	r0, [sp, #12]
 800f622:	f7f0 fd95 	bl	8000150 <__udivsi3>
 800f626:	9003      	str	r0, [sp, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800f628:	2800      	cmp	r0, #0
 800f62a:	d031      	beq.n	800f690 <vTaskGetRunTimeStats+0x98>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800f62c:	2300      	movs	r3, #0
 800f62e:	9304      	str	r3, [sp, #16]
 800f630:	e00d      	b.n	800f64e <vTaskGetRunTimeStats+0x56>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800f632:	9b04      	ldr	r3, [sp, #16]
 800f634:	015b      	lsls	r3, r3, #5
 800f636:	18f3      	adds	r3, r6, r3
 800f638:	699a      	ldr	r2, [r3, #24]
 800f63a:	4919      	ldr	r1, [pc, #100]	; (800f6a0 <vTaskGetRunTimeStats+0xa8>)
 800f63c:	f004 f942 	bl	80138c4 <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800f640:	0020      	movs	r0, r4
 800f642:	f7f0 fd69 	bl	8000118 <strlen>
 800f646:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800f648:	9b04      	ldr	r3, [sp, #16]
 800f64a:	3301      	adds	r3, #1
 800f64c:	9304      	str	r3, [sp, #16]
 800f64e:	9a04      	ldr	r2, [sp, #16]
 800f650:	9b05      	ldr	r3, [sp, #20]
 800f652:	429a      	cmp	r2, r3
 800f654:	d21c      	bcs.n	800f690 <vTaskGetRunTimeStats+0x98>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f656:	9b04      	ldr	r3, [sp, #16]
 800f658:	015b      	lsls	r3, r3, #5
 800f65a:	18f3      	adds	r3, r6, r3
 800f65c:	699d      	ldr	r5, [r3, #24]
 800f65e:	9f03      	ldr	r7, [sp, #12]
 800f660:	0039      	movs	r1, r7
 800f662:	0028      	movs	r0, r5
 800f664:	f7f0 fd74 	bl	8000150 <__udivsi3>
 800f668:	9001      	str	r0, [sp, #4]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f66a:	9a04      	ldr	r2, [sp, #16]
 800f66c:	0152      	lsls	r2, r2, #5
 800f66e:	18b2      	adds	r2, r6, r2
 800f670:	6851      	ldr	r1, [r2, #4]
 800f672:	0020      	movs	r0, r4
 800f674:	f7ff fb30 	bl	800ecd8 <prvWriteNameToBuffer>
 800f678:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800f67a:	42bd      	cmp	r5, r7
 800f67c:	d3d9      	bcc.n	800f632 <vTaskGetRunTimeStats+0x3a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f67e:	9b04      	ldr	r3, [sp, #16]
 800f680:	015b      	lsls	r3, r3, #5
 800f682:	18f3      	adds	r3, r6, r3
 800f684:	699a      	ldr	r2, [r3, #24]
 800f686:	9b01      	ldr	r3, [sp, #4]
 800f688:	4906      	ldr	r1, [pc, #24]	; (800f6a4 <vTaskGetRunTimeStats+0xac>)
 800f68a:	f004 f91b 	bl	80138c4 <sprintf>
 800f68e:	e7d7      	b.n	800f640 <vTaskGetRunTimeStats+0x48>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f690:	0030      	movs	r0, r6
 800f692:	f000 fbdd 	bl	800fe50 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f696:	b007      	add	sp, #28
 800f698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f69a:	46c0      	nop			; (mov r8, r8)
 800f69c:	20002e60 	.word	0x20002e60
 800f6a0:	0801c5e4 	.word	0x0801c5e4
 800f6a4:	0801c5d8 	.word	0x0801c5d8

0800f6a8 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f6a8:	4b05      	ldr	r3, [pc, #20]	; (800f6c0 <pvTaskIncrementMutexHeldCount+0x18>)
 800f6aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d004      	beq.n	800f6ba <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f6b0:	4b03      	ldr	r3, [pc, #12]	; (800f6c0 <pvTaskIncrementMutexHeldCount+0x18>)
 800f6b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f6b4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f6ba:	4b01      	ldr	r3, [pc, #4]	; (800f6c0 <pvTaskIncrementMutexHeldCount+0x18>)
 800f6bc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
	}
 800f6be:	4770      	bx	lr
 800f6c0:	20002e60 	.word	0x20002e60

0800f6c4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f6c4:	b570      	push	{r4, r5, r6, lr}
 800f6c6:	0004      	movs	r4, r0
 800f6c8:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f6ca:	f000 fabb 	bl	800fc44 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f6ce:	4b1f      	ldr	r3, [pc, #124]	; (800f74c <ulTaskNotifyTake+0x88>)
 800f6d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d106      	bne.n	800f6e6 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800f6d8:	4b1c      	ldr	r3, [pc, #112]	; (800f74c <ulTaskNotifyTake+0x88>)
 800f6da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f6dc:	235c      	movs	r3, #92	; 0x5c
 800f6de:	2101      	movs	r1, #1
 800f6e0:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800f6e2:	2d00      	cmp	r5, #0
 800f6e4:	d117      	bne.n	800f716 <ulTaskNotifyTake+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f6e6:	f000 fab9 	bl	800fc5c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f6ea:	f000 faab 	bl	800fc44 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f6ee:	4b17      	ldr	r3, [pc, #92]	; (800f74c <ulTaskNotifyTake+0x88>)
 800f6f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6f2:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800f6f4:	2d00      	cmp	r5, #0
 800f6f6:	d005      	beq.n	800f704 <ulTaskNotifyTake+0x40>
			{
				if( xClearCountOnExit != pdFALSE )
 800f6f8:	2c00      	cmp	r4, #0
 800f6fa:	d021      	beq.n	800f740 <ulTaskNotifyTake+0x7c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f6fc:	4b13      	ldr	r3, [pc, #76]	; (800f74c <ulTaskNotifyTake+0x88>)
 800f6fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f700:	2200      	movs	r2, #0
 800f702:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800f704:	4b11      	ldr	r3, [pc, #68]	; (800f74c <ulTaskNotifyTake+0x88>)
 800f706:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f708:	235c      	movs	r3, #92	; 0x5c
 800f70a:	2100      	movs	r1, #0
 800f70c:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800f70e:	f000 faa5 	bl	800fc5c <vPortExitCritical>

		return ulReturn;
	}
 800f712:	0028      	movs	r0, r5
 800f714:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f716:	4b0d      	ldr	r3, [pc, #52]	; (800f74c <ulTaskNotifyTake+0x88>)
 800f718:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f71a:	3004      	adds	r0, #4
 800f71c:	f7fe fee6 	bl	800e4ec <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800f720:	1c6b      	adds	r3, r5, #1
 800f722:	d007      	beq.n	800f734 <ulTaskNotifyTake+0x70>
							xTimeToWake = xTickCount + xTicksToWait;
 800f724:	4b09      	ldr	r3, [pc, #36]	; (800f74c <ulTaskNotifyTake+0x88>)
 800f726:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f728:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f72a:	f7ff fab5 	bl	800ec98 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800f72e:	f000 fa7d 	bl	800fc2c <vPortYield>
 800f732:	e7d8      	b.n	800f6e6 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f734:	4805      	ldr	r0, [pc, #20]	; (800f74c <ulTaskNotifyTake+0x88>)
 800f736:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800f738:	3104      	adds	r1, #4
 800f73a:	f7fe feb5 	bl	800e4a8 <vListInsertEnd>
 800f73e:	e7f6      	b.n	800f72e <ulTaskNotifyTake+0x6a>
					( pxCurrentTCB->ulNotifiedValue )--;
 800f740:	4b02      	ldr	r3, [pc, #8]	; (800f74c <ulTaskNotifyTake+0x88>)
 800f742:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f744:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f746:	3b01      	subs	r3, #1
 800f748:	6593      	str	r3, [r2, #88]	; 0x58
 800f74a:	e7db      	b.n	800f704 <ulTaskNotifyTake+0x40>
 800f74c:	20002e60 	.word	0x20002e60

0800f750 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f752:	0005      	movs	r5, r0
 800f754:	000f      	movs	r7, r1
 800f756:	0014      	movs	r4, r2
 800f758:	001e      	movs	r6, r3
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800f75a:	f000 fa73 	bl	800fc44 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f75e:	2e00      	cmp	r6, #0
 800f760:	d001      	beq.n	800f766 <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f762:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800f764:	6033      	str	r3, [r6, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800f766:	225c      	movs	r2, #92	; 0x5c
 800f768:	5cab      	ldrb	r3, [r5, r2]
 800f76a:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800f76c:	2102      	movs	r1, #2
 800f76e:	54a9      	strb	r1, [r5, r2]

			switch( eAction )
 800f770:	2c03      	cmp	r4, #3
 800f772:	d01e      	beq.n	800f7b2 <xTaskGenericNotify+0x62>
 800f774:	d80a      	bhi.n	800f78c <xTaskGenericNotify+0x3c>
 800f776:	2c01      	cmp	r4, #1
 800f778:	d016      	beq.n	800f7a8 <xTaskGenericNotify+0x58>
 800f77a:	2c02      	cmp	r4, #2
 800f77c:	d104      	bne.n	800f788 <xTaskGenericNotify+0x38>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f77e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800f780:	3201      	adds	r2, #1
 800f782:	65aa      	str	r2, [r5, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f784:	2401      	movs	r4, #1
					break;
 800f786:	e009      	b.n	800f79c <xTaskGenericNotify+0x4c>
			switch( eAction )
 800f788:	2401      	movs	r4, #1
 800f78a:	e007      	b.n	800f79c <xTaskGenericNotify+0x4c>
 800f78c:	2c04      	cmp	r4, #4
 800f78e:	d104      	bne.n	800f79a <xTaskGenericNotify+0x4a>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800f790:	2b02      	cmp	r3, #2
 800f792:	d011      	beq.n	800f7b8 <xTaskGenericNotify+0x68>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f794:	65af      	str	r7, [r5, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f796:	2401      	movs	r4, #1
 800f798:	e000      	b.n	800f79c <xTaskGenericNotify+0x4c>
			switch( eAction )
 800f79a:	2401      	movs	r4, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d00d      	beq.n	800f7bc <xTaskGenericNotify+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f7a0:	f000 fa5c 	bl	800fc5c <vPortExitCritical>

		return xReturn;
	}
 800f7a4:	0020      	movs	r0, r4
 800f7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 800f7a8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f7aa:	430f      	orrs	r7, r1
 800f7ac:	65af      	str	r7, [r5, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f7ae:	2401      	movs	r4, #1
					break;
 800f7b0:	e7f4      	b.n	800f79c <xTaskGenericNotify+0x4c>
					pxTCB->ulNotifiedValue = ulValue;
 800f7b2:	65af      	str	r7, [r5, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f7b4:	2401      	movs	r4, #1
					break;
 800f7b6:	e7f1      	b.n	800f79c <xTaskGenericNotify+0x4c>
						xReturn = pdFAIL;
 800f7b8:	2400      	movs	r4, #0
 800f7ba:	e7ef      	b.n	800f79c <xTaskGenericNotify+0x4c>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f7bc:	1d2e      	adds	r6, r5, #4
 800f7be:	0030      	movs	r0, r6
 800f7c0:	f7fe fe94 	bl	800e4ec <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f7c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f7c6:	4a0b      	ldr	r2, [pc, #44]	; (800f7f4 <xTaskGenericNotify+0xa4>)
 800f7c8:	6812      	ldr	r2, [r2, #0]
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d901      	bls.n	800f7d2 <xTaskGenericNotify+0x82>
 800f7ce:	4a09      	ldr	r2, [pc, #36]	; (800f7f4 <xTaskGenericNotify+0xa4>)
 800f7d0:	6013      	str	r3, [r2, #0]
 800f7d2:	0098      	lsls	r0, r3, #2
 800f7d4:	18c0      	adds	r0, r0, r3
 800f7d6:	0080      	lsls	r0, r0, #2
 800f7d8:	4b07      	ldr	r3, [pc, #28]	; (800f7f8 <xTaskGenericNotify+0xa8>)
 800f7da:	18c0      	adds	r0, r0, r3
 800f7dc:	0031      	movs	r1, r6
 800f7de:	f7fe fe63 	bl	800e4a8 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f7e2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800f7e4:	4b05      	ldr	r3, [pc, #20]	; (800f7fc <xTaskGenericNotify+0xac>)
 800f7e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d9d8      	bls.n	800f7a0 <xTaskGenericNotify+0x50>
					taskYIELD_IF_USING_PREEMPTION();
 800f7ee:	f000 fa1d 	bl	800fc2c <vPortYield>
 800f7f2:	e7d5      	b.n	800f7a0 <xTaskGenericNotify+0x50>
 800f7f4:	20002ee0 	.word	0x20002ee0
 800f7f8:	20002f00 	.word	0x20002f00
 800f7fc:	20002e60 	.word	0x20002e60

0800f800 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f800:	4b06      	ldr	r3, [pc, #24]	; (800f81c <prvGetNextExpireTime+0x1c>)
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	6811      	ldr	r1, [r2, #0]
 800f806:	424b      	negs	r3, r1
 800f808:	414b      	adcs	r3, r1
 800f80a:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d102      	bne.n	800f816 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f810:	68d3      	ldr	r3, [r2, #12]
 800f812:	6818      	ldr	r0, [r3, #0]
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
	}

	return xNextExpireTime;
}
 800f814:	4770      	bx	lr
		xNextExpireTime = ( TickType_t ) 0U;
 800f816:	2000      	movs	r0, #0
	return xNextExpireTime;
 800f818:	e7fc      	b.n	800f814 <prvGetNextExpireTime+0x14>
 800f81a:	46c0      	nop			; (mov r8, r8)
 800f81c:	20002f8c 	.word	0x20002f8c

0800f820 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f820:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f822:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f824:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f826:	4291      	cmp	r1, r2
 800f828:	d80c      	bhi.n	800f844 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f82a:	1ad2      	subs	r2, r2, r3
 800f82c:	6983      	ldr	r3, [r0, #24]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d301      	bcc.n	800f836 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f832:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800f834:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f836:	1d01      	adds	r1, r0, #4
 800f838:	4b09      	ldr	r3, [pc, #36]	; (800f860 <prvInsertTimerInActiveList+0x40>)
 800f83a:	6858      	ldr	r0, [r3, #4]
 800f83c:	f7fe fe3f 	bl	800e4be <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f840:	2000      	movs	r0, #0
 800f842:	e7f7      	b.n	800f834 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f844:	429a      	cmp	r2, r3
 800f846:	d201      	bcs.n	800f84c <prvInsertTimerInActiveList+0x2c>
 800f848:	4299      	cmp	r1, r3
 800f84a:	d206      	bcs.n	800f85a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f84c:	1d01      	adds	r1, r0, #4
 800f84e:	4b04      	ldr	r3, [pc, #16]	; (800f860 <prvInsertTimerInActiveList+0x40>)
 800f850:	6818      	ldr	r0, [r3, #0]
 800f852:	f7fe fe34 	bl	800e4be <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f856:	2000      	movs	r0, #0
 800f858:	e7ec      	b.n	800f834 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800f85a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800f85c:	e7ea      	b.n	800f834 <prvInsertTimerInActiveList+0x14>
 800f85e:	46c0      	nop			; (mov r8, r8)
 800f860:	20002f8c 	.word	0x20002f8c

0800f864 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f864:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f866:	f000 f9ed 	bl	800fc44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f86a:	4b10      	ldr	r3, [pc, #64]	; (800f8ac <prvCheckForValidListAndQueue+0x48>)
 800f86c:	689b      	ldr	r3, [r3, #8]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d002      	beq.n	800f878 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f872:	f000 f9f3 	bl	800fc5c <vPortExitCritical>
}
 800f876:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800f878:	4c0c      	ldr	r4, [pc, #48]	; (800f8ac <prvCheckForValidListAndQueue+0x48>)
 800f87a:	0026      	movs	r6, r4
 800f87c:	360c      	adds	r6, #12
 800f87e:	0030      	movs	r0, r6
 800f880:	f7fe fe04 	bl	800e48c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f884:	0025      	movs	r5, r4
 800f886:	3520      	adds	r5, #32
 800f888:	0028      	movs	r0, r5
 800f88a:	f7fe fdff 	bl	800e48c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f88e:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f890:	6065      	str	r5, [r4, #4]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f892:	2200      	movs	r2, #0
 800f894:	2110      	movs	r1, #16
 800f896:	2004      	movs	r0, #4
 800f898:	f7fe ff16 	bl	800e6c8 <xQueueGenericCreate>
 800f89c:	60a0      	str	r0, [r4, #8]
				if( xTimerQueue != NULL )
 800f89e:	2800      	cmp	r0, #0
 800f8a0:	d0e7      	beq.n	800f872 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f8a2:	4903      	ldr	r1, [pc, #12]	; (800f8b0 <prvCheckForValidListAndQueue+0x4c>)
 800f8a4:	f7ff f8da 	bl	800ea5c <vQueueAddToRegistry>
 800f8a8:	e7e3      	b.n	800f872 <prvCheckForValidListAndQueue+0xe>
 800f8aa:	46c0      	nop			; (mov r8, r8)
 800f8ac:	20002f8c 	.word	0x20002f8c
 800f8b0:	0801c5f0 	.word	0x0801c5f0

0800f8b4 <xTimerCreateTimerTask>:
{
 800f8b4:	b500      	push	{lr}
 800f8b6:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800f8b8:	f7ff ffd4 	bl	800f864 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f8bc:	4b09      	ldr	r3, [pc, #36]	; (800f8e4 <xTimerCreateTimerTask+0x30>)
 800f8be:	689b      	ldr	r3, [r3, #8]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d00d      	beq.n	800f8e0 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	9303      	str	r3, [sp, #12]
 800f8c8:	9302      	str	r3, [sp, #8]
 800f8ca:	9301      	str	r3, [sp, #4]
 800f8cc:	3303      	adds	r3, #3
 800f8ce:	9300      	str	r3, [sp, #0]
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	2296      	movs	r2, #150	; 0x96
 800f8d4:	4904      	ldr	r1, [pc, #16]	; (800f8e8 <xTimerCreateTimerTask+0x34>)
 800f8d6:	4805      	ldr	r0, [pc, #20]	; (800f8ec <xTimerCreateTimerTask+0x38>)
 800f8d8:	f7ff fa10 	bl	800ecfc <xTaskGenericCreate>
}
 800f8dc:	b005      	add	sp, #20
 800f8de:	bd00      	pop	{pc}
BaseType_t xReturn = pdFAIL;
 800f8e0:	2000      	movs	r0, #0
	return xReturn;
 800f8e2:	e7fb      	b.n	800f8dc <xTimerCreateTimerTask+0x28>
 800f8e4:	20002f8c 	.word	0x20002f8c
 800f8e8:	0801c5f8 	.word	0x0801c5f8
 800f8ec:	0800fb61 	.word	0x0800fb61

0800f8f0 <xTimerCreate>:
{
 800f8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8f2:	b083      	sub	sp, #12
 800f8f4:	0007      	movs	r7, r0
 800f8f6:	000d      	movs	r5, r1
 800f8f8:	0016      	movs	r6, r2
 800f8fa:	9301      	str	r3, [sp, #4]
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800f8fc:	2900      	cmp	r1, #0
 800f8fe:	d011      	beq.n	800f924 <xTimerCreate+0x34>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f900:	202c      	movs	r0, #44	; 0x2c
 800f902:	f000 fa41 	bl	800fd88 <pvPortMalloc>
 800f906:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800f908:	d00d      	beq.n	800f926 <xTimerCreate+0x36>
			prvCheckForValidListAndQueue();
 800f90a:	f7ff ffab 	bl	800f864 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800f90e:	6027      	str	r7, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f910:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800f912:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800f914:	9b01      	ldr	r3, [sp, #4]
 800f916:	6223      	str	r3, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f918:	9b08      	ldr	r3, [sp, #32]
 800f91a:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f91c:	1d20      	adds	r0, r4, #4
 800f91e:	f7fe fdc0 	bl	800e4a2 <vListInitialiseItem>
			traceTIMER_CREATE( pxNewTimer );
 800f922:	e000      	b.n	800f926 <xTimerCreate+0x36>
		pxNewTimer = NULL;
 800f924:	2400      	movs	r4, #0
}
 800f926:	0020      	movs	r0, r4
 800f928:	b003      	add	sp, #12
 800f92a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f92c <xTimerGenericCommand>:
{
 800f92c:	b530      	push	{r4, r5, lr}
 800f92e:	b085      	sub	sp, #20
 800f930:	0004      	movs	r4, r0
 800f932:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800f934:	4b12      	ldr	r3, [pc, #72]	; (800f980 <xTimerGenericCommand+0x54>)
 800f936:	6898      	ldr	r0, [r3, #8]
 800f938:	2800      	cmp	r0, #0
 800f93a:	d01f      	beq.n	800f97c <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800f93c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f93e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f940:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f942:	2905      	cmp	r1, #5
 800f944:	dc13      	bgt.n	800f96e <xTimerGenericCommand+0x42>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f946:	f7ff fd7b 	bl	800f440 <xTaskGetSchedulerState>
 800f94a:	2802      	cmp	r0, #2
 800f94c:	d007      	beq.n	800f95e <xTimerGenericCommand+0x32>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f94e:	4b0c      	ldr	r3, [pc, #48]	; (800f980 <xTimerGenericCommand+0x54>)
 800f950:	6898      	ldr	r0, [r3, #8]
 800f952:	2300      	movs	r3, #0
 800f954:	2200      	movs	r2, #0
 800f956:	4669      	mov	r1, sp
 800f958:	f7fe fee0 	bl	800e71c <xQueueGenericSend>
 800f95c:	e00c      	b.n	800f978 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f95e:	4b08      	ldr	r3, [pc, #32]	; (800f980 <xTimerGenericCommand+0x54>)
 800f960:	6898      	ldr	r0, [r3, #8]
 800f962:	2300      	movs	r3, #0
 800f964:	9a08      	ldr	r2, [sp, #32]
 800f966:	4669      	mov	r1, sp
 800f968:	f7fe fed8 	bl	800e71c <xQueueGenericSend>
 800f96c:	e004      	b.n	800f978 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f96e:	2300      	movs	r3, #0
 800f970:	002a      	movs	r2, r5
 800f972:	4669      	mov	r1, sp
 800f974:	f7fe ff45 	bl	800e802 <xQueueGenericSendFromISR>
}
 800f978:	b005      	add	sp, #20
 800f97a:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800f97c:	2000      	movs	r0, #0
	return xReturn;
 800f97e:	e7fb      	b.n	800f978 <xTimerGenericCommand+0x4c>
 800f980:	20002f8c 	.word	0x20002f8c

0800f984 <prvSwitchTimerLists>:
{
 800f984:	b570      	push	{r4, r5, r6, lr}
 800f986:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f988:	4b15      	ldr	r3, [pc, #84]	; (800f9e0 <prvSwitchTimerLists+0x5c>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	681a      	ldr	r2, [r3, #0]
 800f98e:	2a00      	cmp	r2, #0
 800f990:	d020      	beq.n	800f9d4 <prvSwitchTimerLists+0x50>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f996:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f998:	1d25      	adds	r5, r4, #4
 800f99a:	0028      	movs	r0, r5
 800f99c:	f7fe fda6 	bl	800e4ec <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9a0:	0020      	movs	r0, r4
 800f9a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9a4:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f9a6:	69e3      	ldr	r3, [r4, #28]
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d1ed      	bne.n	800f988 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f9ac:	69a3      	ldr	r3, [r4, #24]
 800f9ae:	199b      	adds	r3, r3, r6
			if( xReloadTime > xNextExpireTime )
 800f9b0:	429e      	cmp	r6, r3
 800f9b2:	d207      	bcs.n	800f9c4 <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f9b4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f9b6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f9b8:	4b09      	ldr	r3, [pc, #36]	; (800f9e0 <prvSwitchTimerLists+0x5c>)
 800f9ba:	6818      	ldr	r0, [r3, #0]
 800f9bc:	0029      	movs	r1, r5
 800f9be:	f7fe fd7e 	bl	800e4be <vListInsert>
 800f9c2:	e7e1      	b.n	800f988 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	9300      	str	r3, [sp, #0]
 800f9c8:	0032      	movs	r2, r6
 800f9ca:	2100      	movs	r1, #0
 800f9cc:	0020      	movs	r0, r4
 800f9ce:	f7ff ffad 	bl	800f92c <xTimerGenericCommand>
 800f9d2:	e7d9      	b.n	800f988 <prvSwitchTimerLists+0x4>
	pxCurrentTimerList = pxOverflowTimerList;
 800f9d4:	4a02      	ldr	r2, [pc, #8]	; (800f9e0 <prvSwitchTimerLists+0x5c>)
 800f9d6:	6851      	ldr	r1, [r2, #4]
 800f9d8:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f9da:	6053      	str	r3, [r2, #4]
}
 800f9dc:	b002      	add	sp, #8
 800f9de:	bd70      	pop	{r4, r5, r6, pc}
 800f9e0:	20002f8c 	.word	0x20002f8c

0800f9e4 <prvSampleTimeNow>:
{
 800f9e4:	b570      	push	{r4, r5, r6, lr}
 800f9e6:	0005      	movs	r5, r0
	xTimeNow = xTaskGetTickCount();
 800f9e8:	f7ff faa0 	bl	800ef2c <xTaskGetTickCount>
 800f9ec:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800f9ee:	4b07      	ldr	r3, [pc, #28]	; (800fa0c <prvSampleTimeNow+0x28>)
 800f9f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9f2:	4283      	cmp	r3, r0
 800f9f4:	d805      	bhi.n	800fa02 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800f9fa:	4b04      	ldr	r3, [pc, #16]	; (800fa0c <prvSampleTimeNow+0x28>)
 800f9fc:	635c      	str	r4, [r3, #52]	; 0x34
}
 800f9fe:	0020      	movs	r0, r4
 800fa00:	bd70      	pop	{r4, r5, r6, pc}
		prvSwitchTimerLists();
 800fa02:	f7ff ffbf 	bl	800f984 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fa06:	2301      	movs	r3, #1
 800fa08:	602b      	str	r3, [r5, #0]
 800fa0a:	e7f6      	b.n	800f9fa <prvSampleTimeNow+0x16>
 800fa0c:	20002f8c 	.word	0x20002f8c

0800fa10 <prvProcessExpiredTimer>:
{
 800fa10:	b570      	push	{r4, r5, r6, lr}
 800fa12:	b082      	sub	sp, #8
 800fa14:	0005      	movs	r5, r0
 800fa16:	000e      	movs	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa18:	4b0f      	ldr	r3, [pc, #60]	; (800fa58 <prvProcessExpiredTimer+0x48>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa20:	1d20      	adds	r0, r4, #4
 800fa22:	f7fe fd63 	bl	800e4ec <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fa26:	69e3      	ldr	r3, [r4, #28]
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d004      	beq.n	800fa36 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa2e:	0020      	movs	r0, r4
 800fa30:	4798      	blx	r3
}
 800fa32:	b002      	add	sp, #8
 800fa34:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800fa36:	69a3      	ldr	r3, [r4, #24]
 800fa38:	1959      	adds	r1, r3, r5
 800fa3a:	002b      	movs	r3, r5
 800fa3c:	0032      	movs	r2, r6
 800fa3e:	0020      	movs	r0, r4
 800fa40:	f7ff feee 	bl	800f820 <prvInsertTimerInActiveList>
 800fa44:	2801      	cmp	r0, #1
 800fa46:	d1f1      	bne.n	800fa2c <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa48:	2300      	movs	r3, #0
 800fa4a:	9300      	str	r3, [sp, #0]
 800fa4c:	002a      	movs	r2, r5
 800fa4e:	2100      	movs	r1, #0
 800fa50:	0020      	movs	r0, r4
 800fa52:	f7ff ff6b 	bl	800f92c <xTimerGenericCommand>
			( void ) xResult;
 800fa56:	e7e9      	b.n	800fa2c <prvProcessExpiredTimer+0x1c>
 800fa58:	20002f8c 	.word	0x20002f8c

0800fa5c <prvProcessTimerOrBlockTask>:
{
 800fa5c:	b570      	push	{r4, r5, r6, lr}
 800fa5e:	b082      	sub	sp, #8
 800fa60:	0004      	movs	r4, r0
 800fa62:	000e      	movs	r6, r1
	vTaskSuspendAll();
 800fa64:	f7ff fa5a 	bl	800ef1c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fa68:	a801      	add	r0, sp, #4
 800fa6a:	f7ff ffbb 	bl	800f9e4 <prvSampleTimeNow>
 800fa6e:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800fa70:	9b01      	ldr	r3, [sp, #4]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d118      	bne.n	800faa8 <prvProcessTimerOrBlockTask+0x4c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fa76:	2e00      	cmp	r6, #0
 800fa78:	d101      	bne.n	800fa7e <prvProcessTimerOrBlockTask+0x22>
 800fa7a:	42a0      	cmp	r0, r4
 800fa7c:	d20a      	bcs.n	800fa94 <prvProcessTimerOrBlockTask+0x38>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800fa7e:	1b61      	subs	r1, r4, r5
 800fa80:	4b0b      	ldr	r3, [pc, #44]	; (800fab0 <prvProcessTimerOrBlockTask+0x54>)
 800fa82:	6898      	ldr	r0, [r3, #8]
 800fa84:	f7fe fffc 	bl	800ea80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fa88:	f7ff fad0 	bl	800f02c <xTaskResumeAll>
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	d008      	beq.n	800faa2 <prvProcessTimerOrBlockTask+0x46>
}
 800fa90:	b002      	add	sp, #8
 800fa92:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
 800fa94:	f7ff faca 	bl	800f02c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fa98:	0029      	movs	r1, r5
 800fa9a:	0020      	movs	r0, r4
 800fa9c:	f7ff ffb8 	bl	800fa10 <prvProcessExpiredTimer>
 800faa0:	e7f6      	b.n	800fa90 <prvProcessTimerOrBlockTask+0x34>
					portYIELD_WITHIN_API();
 800faa2:	f000 f8c3 	bl	800fc2c <vPortYield>
 800faa6:	e7f3      	b.n	800fa90 <prvProcessTimerOrBlockTask+0x34>
			( void ) xTaskResumeAll();
 800faa8:	f7ff fac0 	bl	800f02c <xTaskResumeAll>
}
 800faac:	e7f0      	b.n	800fa90 <prvProcessTimerOrBlockTask+0x34>
 800faae:	46c0      	nop			; (mov r8, r8)
 800fab0:	20002f8c 	.word	0x20002f8c

0800fab4 <prvProcessReceivedCommands>:
{
 800fab4:	b510      	push	{r4, lr}
 800fab6:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fab8:	e002      	b.n	800fac0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800faba:	9b04      	ldr	r3, [sp, #16]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	da10      	bge.n	800fae2 <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fac0:	4b25      	ldr	r3, [pc, #148]	; (800fb58 <prvProcessReceivedCommands+0xa4>)
 800fac2:	6898      	ldr	r0, [r3, #8]
 800fac4:	2300      	movs	r3, #0
 800fac6:	2200      	movs	r2, #0
 800fac8:	a904      	add	r1, sp, #16
 800faca:	f7fe ff03 	bl	800e8d4 <xQueueGenericReceive>
 800face:	2800      	cmp	r0, #0
 800fad0:	d040      	beq.n	800fb54 <prvProcessReceivedCommands+0xa0>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fad2:	9b04      	ldr	r3, [sp, #16]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	daf0      	bge.n	800faba <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fad8:	9b05      	ldr	r3, [sp, #20]
 800fada:	9907      	ldr	r1, [sp, #28]
 800fadc:	9806      	ldr	r0, [sp, #24]
 800fade:	4798      	blx	r3
 800fae0:	e7eb      	b.n	800faba <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fae2:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800fae4:	6963      	ldr	r3, [r4, #20]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d002      	beq.n	800faf0 <prvProcessReceivedCommands+0x3c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800faea:	1d20      	adds	r0, r4, #4
 800faec:	f7fe fcfe 	bl	800e4ec <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800faf0:	a803      	add	r0, sp, #12
 800faf2:	f7ff ff77 	bl	800f9e4 <prvSampleTimeNow>
 800faf6:	0002      	movs	r2, r0
			switch( xMessage.xMessageID )
 800faf8:	9904      	ldr	r1, [sp, #16]
 800fafa:	2909      	cmp	r1, #9
 800fafc:	d8e0      	bhi.n	800fac0 <prvProcessReceivedCommands+0xc>
 800fafe:	0089      	lsls	r1, r1, #2
 800fb00:	4b16      	ldr	r3, [pc, #88]	; (800fb5c <prvProcessReceivedCommands+0xa8>)
 800fb02:	585b      	ldr	r3, [r3, r1]
 800fb04:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800fb06:	9905      	ldr	r1, [sp, #20]
 800fb08:	69a3      	ldr	r3, [r4, #24]
 800fb0a:	469c      	mov	ip, r3
 800fb0c:	4461      	add	r1, ip
 800fb0e:	9b05      	ldr	r3, [sp, #20]
 800fb10:	0020      	movs	r0, r4
 800fb12:	f7ff fe85 	bl	800f820 <prvInsertTimerInActiveList>
 800fb16:	2801      	cmp	r0, #1
 800fb18:	d1d2      	bne.n	800fac0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb1a:	0020      	movs	r0, r4
 800fb1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb1e:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fb20:	69e3      	ldr	r3, [r4, #28]
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	d1cc      	bne.n	800fac0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fb26:	9a05      	ldr	r2, [sp, #20]
 800fb28:	69a3      	ldr	r3, [r4, #24]
 800fb2a:	469c      	mov	ip, r3
 800fb2c:	4462      	add	r2, ip
 800fb2e:	2300      	movs	r3, #0
 800fb30:	9300      	str	r3, [sp, #0]
 800fb32:	2100      	movs	r1, #0
 800fb34:	0020      	movs	r0, r4
 800fb36:	f7ff fef9 	bl	800f92c <xTimerGenericCommand>
							( void ) xResult;
 800fb3a:	e7c1      	b.n	800fac0 <prvProcessReceivedCommands+0xc>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fb3c:	9905      	ldr	r1, [sp, #20]
 800fb3e:	61a1      	str	r1, [r4, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fb40:	1809      	adds	r1, r1, r0
 800fb42:	0003      	movs	r3, r0
 800fb44:	0020      	movs	r0, r4
 800fb46:	f7ff fe6b 	bl	800f820 <prvInsertTimerInActiveList>
					break;
 800fb4a:	e7b9      	b.n	800fac0 <prvProcessReceivedCommands+0xc>
					vPortFree( pxTimer );
 800fb4c:	0020      	movs	r0, r4
 800fb4e:	f000 f97f 	bl	800fe50 <vPortFree>
					break;
 800fb52:	e7b5      	b.n	800fac0 <prvProcessReceivedCommands+0xc>
}
 800fb54:	b008      	add	sp, #32
 800fb56:	bd10      	pop	{r4, pc}
 800fb58:	20002f8c 	.word	0x20002f8c
 800fb5c:	08019cec 	.word	0x08019cec

0800fb60 <prvTimerTask>:
{
 800fb60:	b500      	push	{lr}
 800fb62:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb64:	a801      	add	r0, sp, #4
 800fb66:	f7ff fe4b 	bl	800f800 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fb6a:	9901      	ldr	r1, [sp, #4]
 800fb6c:	f7ff ff76 	bl	800fa5c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800fb70:	f7ff ffa0 	bl	800fab4 <prvProcessReceivedCommands>
	for( ;; )
 800fb74:	e7f6      	b.n	800fb64 <prvTimerTask+0x4>

0800fb76 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800fb76:	b510      	push	{r4, lr}
 800fb78:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 800fb7a:	f000 f863 	bl	800fc44 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800fb7e:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800fb80:	f000 f86c 	bl	800fc5c <vPortExitCritical>

	return pvReturn;
}
 800fb84:	0020      	movs	r0, r4
 800fb86:	bd10      	pop	{r4, pc}

0800fb88 <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 800fb88:	b672      	cpsid	i
	for( ;; );
 800fb8a:	e7fe      	b.n	800fb8a <prvTaskExitError+0x2>

0800fb8c <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800fb8c:	4a06      	ldr	r2, [pc, #24]	; (800fba8 <pxCurrentTCBConst2>)
 800fb8e:	6813      	ldr	r3, [r2, #0]
 800fb90:	6818      	ldr	r0, [r3, #0]
 800fb92:	3020      	adds	r0, #32
 800fb94:	f380 8809 	msr	PSP, r0
 800fb98:	2002      	movs	r0, #2
 800fb9a:	f380 8814 	msr	CONTROL, r0
 800fb9e:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800fba0:	46ae      	mov	lr, r5
 800fba2:	b662      	cpsie	i
 800fba4:	bd00      	pop	{pc}
 800fba6:	46c0      	nop			; (mov r8, r8)

0800fba8 <pxCurrentTCBConst2>:
 800fba8:	20002ecc 	.word	0x20002ecc

0800fbac <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800fbac:	b510      	push	{r4, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fbae:	4b06      	ldr	r3, [pc, #24]	; (800fbc8 <prvSetupTimerInterrupt+0x1c>)
 800fbb0:	6818      	ldr	r0, [r3, #0]
 800fbb2:	21fa      	movs	r1, #250	; 0xfa
 800fbb4:	0089      	lsls	r1, r1, #2
 800fbb6:	f7f0 facb 	bl	8000150 <__udivsi3>
 800fbba:	3801      	subs	r0, #1
 800fbbc:	4b03      	ldr	r3, [pc, #12]	; (800fbcc <prvSetupTimerInterrupt+0x20>)
 800fbbe:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800fbc0:	4b03      	ldr	r3, [pc, #12]	; (800fbd0 <prvSetupTimerInterrupt+0x24>)
 800fbc2:	2207      	movs	r2, #7
 800fbc4:	601a      	str	r2, [r3, #0]
}
 800fbc6:	bd10      	pop	{r4, pc}
 800fbc8:	200000a4 	.word	0x200000a4
 800fbcc:	e000e014 	.word	0xe000e014
 800fbd0:	e000e010 	.word	0xe000e010

0800fbd4 <pxPortInitialiseStack>:
{
 800fbd4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fbd6:	1f03      	subs	r3, r0, #4
 800fbd8:	2480      	movs	r4, #128	; 0x80
 800fbda:	0464      	lsls	r4, r4, #17
 800fbdc:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800fbde:	3b04      	subs	r3, #4
 800fbe0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fbe2:	3b04      	subs	r3, #4
 800fbe4:	4902      	ldr	r1, [pc, #8]	; (800fbf0 <pxPortInitialiseStack+0x1c>)
 800fbe6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fbe8:	3b14      	subs	r3, #20
 800fbea:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800fbec:	3840      	subs	r0, #64	; 0x40
}
 800fbee:	bd10      	pop	{r4, pc}
 800fbf0:	0800fb89 	.word	0x0800fb89

0800fbf4 <SVC_Handler>:
}
 800fbf4:	4770      	bx	lr
	...

0800fbf8 <xPortStartScheduler>:
{
 800fbf8:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800fbfa:	4b0a      	ldr	r3, [pc, #40]	; (800fc24 <xPortStartScheduler+0x2c>)
 800fbfc:	6819      	ldr	r1, [r3, #0]
 800fbfe:	22ff      	movs	r2, #255	; 0xff
 800fc00:	0412      	lsls	r2, r2, #16
 800fc02:	430a      	orrs	r2, r1
 800fc04:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800fc06:	6819      	ldr	r1, [r3, #0]
 800fc08:	22ff      	movs	r2, #255	; 0xff
 800fc0a:	0612      	lsls	r2, r2, #24
 800fc0c:	430a      	orrs	r2, r1
 800fc0e:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
 800fc10:	f7ff ffcc 	bl	800fbac <prvSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800fc14:	4b04      	ldr	r3, [pc, #16]	; (800fc28 <xPortStartScheduler+0x30>)
 800fc16:	2200      	movs	r2, #0
 800fc18:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800fc1a:	f7ff ffb7 	bl	800fb8c <vPortStartFirstTask>
	prvTaskExitError();
 800fc1e:	f7ff ffb3 	bl	800fb88 <prvTaskExitError>
 800fc22:	46c0      	nop			; (mov r8, r8)
 800fc24:	e000ed20 	.word	0xe000ed20
 800fc28:	200000c8 	.word	0x200000c8

0800fc2c <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800fc2c:	4b04      	ldr	r3, [pc, #16]	; (800fc40 <vPortYield+0x14>)
 800fc2e:	2280      	movs	r2, #128	; 0x80
 800fc30:	0552      	lsls	r2, r2, #21
 800fc32:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800fc34:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800fc38:	f3bf 8f6f 	isb	sy
}
 800fc3c:	4770      	bx	lr
 800fc3e:	46c0      	nop			; (mov r8, r8)
 800fc40:	e000ed04 	.word	0xe000ed04

0800fc44 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800fc44:	b672      	cpsid	i
    uxCriticalNesting++;
 800fc46:	4a04      	ldr	r2, [pc, #16]	; (800fc58 <vPortEnterCritical+0x14>)
 800fc48:	6813      	ldr	r3, [r2, #0]
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800fc4e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800fc52:	f3bf 8f6f 	isb	sy
}
 800fc56:	4770      	bx	lr
 800fc58:	200000c8 	.word	0x200000c8

0800fc5c <vPortExitCritical>:
    uxCriticalNesting--;
 800fc5c:	4a03      	ldr	r2, [pc, #12]	; (800fc6c <vPortExitCritical+0x10>)
 800fc5e:	6813      	ldr	r3, [r2, #0]
 800fc60:	3b01      	subs	r3, #1
 800fc62:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d100      	bne.n	800fc6a <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 800fc68:	b662      	cpsie	i
}
 800fc6a:	4770      	bx	lr
 800fc6c:	200000c8 	.word	0x200000c8

0800fc70 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800fc70:	f3ef 8010 	mrs	r0, PRIMASK
 800fc74:	b672      	cpsid	i
 800fc76:	4770      	bx	lr
}
 800fc78:	2000      	movs	r0, #0

0800fc7a <vClearInterruptMaskFromISR>:
	__asm volatile(
 800fc7a:	f380 8810 	msr	PRIMASK, r0
 800fc7e:	4770      	bx	lr

0800fc80 <PendSV_Handler>:
	__asm volatile
 800fc80:	f3ef 8009 	mrs	r0, PSP
 800fc84:	4b0e      	ldr	r3, [pc, #56]	; (800fcc0 <pxCurrentTCBConst>)
 800fc86:	681a      	ldr	r2, [r3, #0]
 800fc88:	3820      	subs	r0, #32
 800fc8a:	6010      	str	r0, [r2, #0]
 800fc8c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800fc8e:	4644      	mov	r4, r8
 800fc90:	464d      	mov	r5, r9
 800fc92:	4656      	mov	r6, sl
 800fc94:	465f      	mov	r7, fp
 800fc96:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800fc98:	b508      	push	{r3, lr}
 800fc9a:	b672      	cpsid	i
 800fc9c:	f7ff fabc 	bl	800f218 <vTaskSwitchContext>
 800fca0:	b662      	cpsie	i
 800fca2:	bc0c      	pop	{r2, r3}
 800fca4:	6811      	ldr	r1, [r2, #0]
 800fca6:	6808      	ldr	r0, [r1, #0]
 800fca8:	3010      	adds	r0, #16
 800fcaa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800fcac:	46a0      	mov	r8, r4
 800fcae:	46a9      	mov	r9, r5
 800fcb0:	46b2      	mov	sl, r6
 800fcb2:	46bb      	mov	fp, r7
 800fcb4:	f380 8809 	msr	PSP, r0
 800fcb8:	3820      	subs	r0, #32
 800fcba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800fcbc:	4718      	bx	r3
 800fcbe:	46c0      	nop			; (mov r8, r8)

0800fcc0 <pxCurrentTCBConst>:
 800fcc0:	20002ecc 	.word	0x20002ecc

0800fcc4 <xPortSysTickHandler>:
{
 800fcc4:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800fcc6:	f7ff ffd3 	bl	800fc70 <ulSetInterruptMaskFromISR>
 800fcca:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800fccc:	f7ff f93a 	bl	800ef44 <xTaskIncrementTick>
 800fcd0:	2800      	cmp	r0, #0
 800fcd2:	d003      	beq.n	800fcdc <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800fcd4:	4b03      	ldr	r3, [pc, #12]	; (800fce4 <xPortSysTickHandler+0x20>)
 800fcd6:	2280      	movs	r2, #128	; 0x80
 800fcd8:	0552      	lsls	r2, r2, #21
 800fcda:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800fcdc:	0020      	movs	r0, r4
 800fcde:	f7ff ffcc 	bl	800fc7a <vClearInterruptMaskFromISR>
}
 800fce2:	bd10      	pop	{r4, pc}
 800fce4:	e000ed04 	.word	0xe000ed04

0800fce8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fce8:	b510      	push	{r4, lr}
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
 800fcea:	4a10      	ldr	r2, [pc, #64]	; (800fd2c <prvHeapInit+0x44>)

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fcec:	0753      	lsls	r3, r2, #29
 800fcee:	d01a      	beq.n	800fd26 <prvHeapInit+0x3e>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800fcf0:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fcf2:	2307      	movs	r3, #7
 800fcf4:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800fcf6:	4b0e      	ldr	r3, [pc, #56]	; (800fd30 <prvHeapInit+0x48>)
 800fcf8:	1a5b      	subs	r3, r3, r1
 800fcfa:	189b      	adds	r3, r3, r2
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fcfc:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) ulAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fcfe:	490d      	ldr	r1, [pc, #52]	; (800fd34 <prvHeapInit+0x4c>)
 800fd00:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fd02:	2000      	movs	r0, #0
 800fd04:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fd06:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800fd08:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fd0a:	2407      	movs	r4, #7
 800fd0c:	43a3      	bics	r3, r4
	pxEnd = ( void * ) ulAddress;
 800fd0e:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 800fd10:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fd12:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800fd14:	1a98      	subs	r0, r3, r2
 800fd16:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fd18:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd1a:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd1c:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fd1e:	2380      	movs	r3, #128	; 0x80
 800fd20:	061b      	lsls	r3, r3, #24
 800fd22:	614b      	str	r3, [r1, #20]
}
 800fd24:	bd10      	pop	{r4, pc}
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fd26:	4b02      	ldr	r3, [pc, #8]	; (800fd30 <prvHeapInit+0x48>)
 800fd28:	e7e9      	b.n	800fcfe <prvHeapInit+0x16>
 800fd2a:	46c0      	nop			; (mov r8, r8)
 800fd2c:	20002fdc 	.word	0x20002fdc
 800fd30:	00003f48 	.word	0x00003f48
 800fd34:	20002fc4 	.word	0x20002fc4

0800fd38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fd38:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fd3a:	4b12      	ldr	r3, [pc, #72]	; (800fd84 <prvInsertBlockIntoFreeList+0x4c>)
 800fd3c:	001a      	movs	r2, r3
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	4283      	cmp	r3, r0
 800fd42:	d3fb      	bcc.n	800fd3c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fd44:	6851      	ldr	r1, [r2, #4]
 800fd46:	1854      	adds	r4, r2, r1
 800fd48:	4284      	cmp	r4, r0
 800fd4a:	d008      	beq.n	800fd5e <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fd4c:	6841      	ldr	r1, [r0, #4]
 800fd4e:	1844      	adds	r4, r0, r1
 800fd50:	42a3      	cmp	r3, r4
 800fd52:	d009      	beq.n	800fd68 <prvInsertBlockIntoFreeList+0x30>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fd54:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fd56:	4290      	cmp	r0, r2
 800fd58:	d000      	beq.n	800fd5c <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fd5a:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd5c:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fd5e:	6840      	ldr	r0, [r0, #4]
 800fd60:	1809      	adds	r1, r1, r0
 800fd62:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800fd64:	0010      	movs	r0, r2
 800fd66:	e7f1      	b.n	800fd4c <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fd68:	4c06      	ldr	r4, [pc, #24]	; (800fd84 <prvInsertBlockIntoFreeList+0x4c>)
 800fd6a:	68a4      	ldr	r4, [r4, #8]
 800fd6c:	42a3      	cmp	r3, r4
 800fd6e:	d006      	beq.n	800fd7e <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	18c9      	adds	r1, r1, r3
 800fd74:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fd76:	6813      	ldr	r3, [r2, #0]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	6003      	str	r3, [r0, #0]
 800fd7c:	e7eb      	b.n	800fd56 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fd7e:	6004      	str	r4, [r0, #0]
 800fd80:	e7e9      	b.n	800fd56 <prvInsertBlockIntoFreeList+0x1e>
 800fd82:	46c0      	nop			; (mov r8, r8)
 800fd84:	20002fc4 	.word	0x20002fc4

0800fd88 <pvPortMalloc>:
{
 800fd88:	b570      	push	{r4, r5, r6, lr}
 800fd8a:	0005      	movs	r5, r0
	vTaskSuspendAll();
 800fd8c:	f7ff f8c6 	bl	800ef1c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800fd90:	4b2e      	ldr	r3, [pc, #184]	; (800fe4c <pvPortMalloc+0xc4>)
 800fd92:	689b      	ldr	r3, [r3, #8]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d014      	beq.n	800fdc2 <pvPortMalloc+0x3a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fd98:	4b2c      	ldr	r3, [pc, #176]	; (800fe4c <pvPortMalloc+0xc4>)
 800fd9a:	695b      	ldr	r3, [r3, #20]
 800fd9c:	422b      	tst	r3, r5
 800fd9e:	d113      	bne.n	800fdc8 <pvPortMalloc+0x40>
			if( xWantedSize > 0 )
 800fda0:	2d00      	cmp	r5, #0
 800fda2:	d005      	beq.n	800fdb0 <pvPortMalloc+0x28>
				xWantedSize += xHeapStructSize;
 800fda4:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fda6:	076b      	lsls	r3, r5, #29
 800fda8:	d002      	beq.n	800fdb0 <pvPortMalloc+0x28>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fdaa:	2307      	movs	r3, #7
 800fdac:	439d      	bics	r5, r3
 800fdae:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fdb0:	2d00      	cmp	r5, #0
 800fdb2:	d010      	beq.n	800fdd6 <pvPortMalloc+0x4e>
 800fdb4:	4b25      	ldr	r3, [pc, #148]	; (800fe4c <pvPortMalloc+0xc4>)
 800fdb6:	691b      	ldr	r3, [r3, #16]
 800fdb8:	42ab      	cmp	r3, r5
 800fdba:	d310      	bcc.n	800fdde <pvPortMalloc+0x56>
				pxBlock = xStart.pxNextFreeBlock;
 800fdbc:	4a23      	ldr	r2, [pc, #140]	; (800fe4c <pvPortMalloc+0xc4>)
 800fdbe:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fdc0:	e013      	b.n	800fdea <pvPortMalloc+0x62>
			prvHeapInit();
 800fdc2:	f7ff ff91 	bl	800fce8 <prvHeapInit>
 800fdc6:	e7e7      	b.n	800fd98 <pvPortMalloc+0x10>
	( void ) xTaskResumeAll();
 800fdc8:	f7ff f930 	bl	800f02c <xTaskResumeAll>
void *pvReturn = NULL;
 800fdcc:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 800fdce:	f7fd fc2b 	bl	800d628 <vApplicationMallocFailedHook>
}
 800fdd2:	0030      	movs	r0, r6
 800fdd4:	bd70      	pop	{r4, r5, r6, pc}
	( void ) xTaskResumeAll();
 800fdd6:	f7ff f929 	bl	800f02c <xTaskResumeAll>
void *pvReturn = NULL;
 800fdda:	2600      	movs	r6, #0
 800fddc:	e7f7      	b.n	800fdce <pvPortMalloc+0x46>
	( void ) xTaskResumeAll();
 800fdde:	f7ff f925 	bl	800f02c <xTaskResumeAll>
void *pvReturn = NULL;
 800fde2:	2600      	movs	r6, #0
 800fde4:	e7f3      	b.n	800fdce <pvPortMalloc+0x46>
					pxPreviousBlock = pxBlock;
 800fde6:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800fde8:	001c      	movs	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fdea:	6863      	ldr	r3, [r4, #4]
 800fdec:	42ab      	cmp	r3, r5
 800fdee:	d202      	bcs.n	800fdf6 <pvPortMalloc+0x6e>
 800fdf0:	6823      	ldr	r3, [r4, #0]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d1f7      	bne.n	800fde6 <pvPortMalloc+0x5e>
				if( pxBlock != pxEnd )
 800fdf6:	4b15      	ldr	r3, [pc, #84]	; (800fe4c <pvPortMalloc+0xc4>)
 800fdf8:	689b      	ldr	r3, [r3, #8]
 800fdfa:	42a3      	cmp	r3, r4
 800fdfc:	d01c      	beq.n	800fe38 <pvPortMalloc+0xb0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fdfe:	6816      	ldr	r6, [r2, #0]
 800fe00:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fe02:	6823      	ldr	r3, [r4, #0]
 800fe04:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fe06:	6863      	ldr	r3, [r4, #4]
 800fe08:	1b5b      	subs	r3, r3, r5
 800fe0a:	2b10      	cmp	r3, #16
 800fe0c:	d818      	bhi.n	800fe40 <pvPortMalloc+0xb8>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fe0e:	6861      	ldr	r1, [r4, #4]
 800fe10:	4a0e      	ldr	r2, [pc, #56]	; (800fe4c <pvPortMalloc+0xc4>)
 800fe12:	6913      	ldr	r3, [r2, #16]
 800fe14:	1a5b      	subs	r3, r3, r1
 800fe16:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fe18:	68d2      	ldr	r2, [r2, #12]
 800fe1a:	4293      	cmp	r3, r2
 800fe1c:	d201      	bcs.n	800fe22 <pvPortMalloc+0x9a>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fe1e:	4a0b      	ldr	r2, [pc, #44]	; (800fe4c <pvPortMalloc+0xc4>)
 800fe20:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fe22:	4b0a      	ldr	r3, [pc, #40]	; (800fe4c <pvPortMalloc+0xc4>)
 800fe24:	695b      	ldr	r3, [r3, #20]
 800fe26:	430b      	orrs	r3, r1
 800fe28:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800fe2e:	f7ff f8fd 	bl	800f02c <xTaskResumeAll>
		if( pvReturn == NULL )
 800fe32:	2e00      	cmp	r6, #0
 800fe34:	d1cd      	bne.n	800fdd2 <pvPortMalloc+0x4a>
 800fe36:	e7ca      	b.n	800fdce <pvPortMalloc+0x46>
	( void ) xTaskResumeAll();
 800fe38:	f7ff f8f8 	bl	800f02c <xTaskResumeAll>
void *pvReturn = NULL;
 800fe3c:	2600      	movs	r6, #0
 800fe3e:	e7c6      	b.n	800fdce <pvPortMalloc+0x46>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fe40:	1960      	adds	r0, r4, r5
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fe42:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fe44:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800fe46:	f7ff ff77 	bl	800fd38 <prvInsertBlockIntoFreeList>
 800fe4a:	e7e0      	b.n	800fe0e <pvPortMalloc+0x86>
 800fe4c:	20002fc4 	.word	0x20002fc4

0800fe50 <vPortFree>:
{
 800fe50:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800fe52:	2800      	cmp	r0, #0
 800fe54:	d009      	beq.n	800fe6a <vPortFree+0x1a>
		puc -= xHeapStructSize;
 800fe56:	0005      	movs	r5, r0
 800fe58:	3d08      	subs	r5, #8
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fe5a:	686b      	ldr	r3, [r5, #4]
 800fe5c:	4a0b      	ldr	r2, [pc, #44]	; (800fe8c <vPortFree+0x3c>)
 800fe5e:	6952      	ldr	r2, [r2, #20]
 800fe60:	421a      	tst	r2, r3
 800fe62:	d002      	beq.n	800fe6a <vPortFree+0x1a>
			if( pxLink->pxNextFreeBlock == NULL )
 800fe64:	6829      	ldr	r1, [r5, #0]
 800fe66:	2900      	cmp	r1, #0
 800fe68:	d000      	beq.n	800fe6c <vPortFree+0x1c>
}
 800fe6a:	bd70      	pop	{r4, r5, r6, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fe6c:	4393      	bics	r3, r2
 800fe6e:	606b      	str	r3, [r5, #4]
				vTaskSuspendAll();
 800fe70:	f7ff f854 	bl	800ef1c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fe74:	686b      	ldr	r3, [r5, #4]
 800fe76:	4a05      	ldr	r2, [pc, #20]	; (800fe8c <vPortFree+0x3c>)
 800fe78:	6911      	ldr	r1, [r2, #16]
 800fe7a:	468c      	mov	ip, r1
 800fe7c:	4463      	add	r3, ip
 800fe7e:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fe80:	0028      	movs	r0, r5
 800fe82:	f7ff ff59 	bl	800fd38 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800fe86:	f7ff f8d1 	bl	800f02c <xTaskResumeAll>
}
 800fe8a:	e7ee      	b.n	800fe6a <vPortFree+0x1a>
 800fe8c:	20002fc4 	.word	0x20002fc4

0800fe90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fe90:	b510      	push	{r4, lr}
 800fe92:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800fe94:	f002 f81a 	bl	8011ecc <HAL_RCC_GetHCLKFreq>
 800fe98:	21fa      	movs	r1, #250	; 0xfa
 800fe9a:	0089      	lsls	r1, r1, #2
 800fe9c:	f7f0 f958 	bl	8000150 <__udivsi3>
 800fea0:	f000 fb58 	bl	8010554 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800fea4:	2001      	movs	r0, #1
 800fea6:	2200      	movs	r2, #0
 800fea8:	0021      	movs	r1, r4
 800feaa:	4240      	negs	r0, r0
 800feac:	f000 fb0e 	bl	80104cc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800feb0:	2000      	movs	r0, #0
 800feb2:	bd10      	pop	{r4, pc}

0800feb4 <HAL_Init>:
{
 800feb4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800feb6:	4a06      	ldr	r2, [pc, #24]	; (800fed0 <HAL_Init+0x1c>)
 800feb8:	6813      	ldr	r3, [r2, #0]
 800feba:	2110      	movs	r1, #16
 800febc:	430b      	orrs	r3, r1
 800febe:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800fec0:	2000      	movs	r0, #0
 800fec2:	f7ff ffe5 	bl	800fe90 <HAL_InitTick>
  HAL_MspInit();
 800fec6:	f001 fbde 	bl	8011686 <HAL_MspInit>
}
 800feca:	2000      	movs	r0, #0
 800fecc:	bd10      	pop	{r4, pc}
 800fece:	46c0      	nop			; (mov r8, r8)
 800fed0:	40022000 	.word	0x40022000

0800fed4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800fed4:	4a02      	ldr	r2, [pc, #8]	; (800fee0 <HAL_IncTick+0xc>)
 800fed6:	6813      	ldr	r3, [r2, #0]
 800fed8:	3301      	adds	r3, #1
 800feda:	6013      	str	r3, [r2, #0]
}
 800fedc:	4770      	bx	lr
 800fede:	46c0      	nop			; (mov r8, r8)
 800fee0:	20006f24 	.word	0x20006f24

0800fee4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800fee4:	4b01      	ldr	r3, [pc, #4]	; (800feec <HAL_GetTick+0x8>)
 800fee6:	6818      	ldr	r0, [r3, #0]
}
 800fee8:	4770      	bx	lr
 800feea:	46c0      	nop			; (mov r8, r8)
 800feec:	20006f24 	.word	0x20006f24

0800fef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800fef0:	b510      	push	{r4, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800fef6:	f7ff fff5 	bl	800fee4 <HAL_GetTick>
 800fefa:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800fefc:	f7ff fff2 	bl	800fee4 <HAL_GetTick>
 800ff00:	1b00      	subs	r0, r0, r4
 800ff02:	9b01      	ldr	r3, [sp, #4]
 800ff04:	4298      	cmp	r0, r3
 800ff06:	d3f9      	bcc.n	800fefc <HAL_Delay+0xc>
  {
  }
}
 800ff08:	b002      	add	sp, #8
 800ff0a:	bd10      	pop	{r4, pc}

0800ff0c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800ff0c:	4b01      	ldr	r3, [pc, #4]	; (800ff14 <HAL_GetREVID+0x8>)
 800ff0e:	6818      	ldr	r0, [r3, #0]
 800ff10:	0c00      	lsrs	r0, r0, #16
}
 800ff12:	4770      	bx	lr
 800ff14:	40015800 	.word	0x40015800

0800ff18 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800ff18:	4b02      	ldr	r3, [pc, #8]	; (800ff24 <HAL_GetDEVID+0xc>)
 800ff1a:	6818      	ldr	r0, [r3, #0]
 800ff1c:	0500      	lsls	r0, r0, #20
 800ff1e:	0d00      	lsrs	r0, r0, #20
}
 800ff20:	4770      	bx	lr
 800ff22:	46c0      	nop			; (mov r8, r8)
 800ff24:	40015800 	.word	0x40015800

0800ff28 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800ff28:	b570      	push	{r4, r5, r6, lr}
 800ff2a:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800ff2c:	6803      	ldr	r3, [r0, #0]
 800ff2e:	689a      	ldr	r2, [r3, #8]
 800ff30:	0752      	lsls	r2, r2, #29
 800ff32:	d521      	bpl.n	800ff78 <ADC_ConversionStop+0x50>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800ff34:	689a      	ldr	r2, [r3, #8]
 800ff36:	0752      	lsls	r2, r2, #29
 800ff38:	d506      	bpl.n	800ff48 <ADC_ConversionStop+0x20>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800ff3a:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800ff3c:	0792      	lsls	r2, r2, #30
 800ff3e:	d403      	bmi.n	800ff48 <ADC_ConversionStop+0x20>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800ff40:	689a      	ldr	r2, [r3, #8]
 800ff42:	2110      	movs	r1, #16
 800ff44:	430a      	orrs	r2, r1
 800ff46:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800ff48:	f7ff ffcc 	bl	800fee4 <HAL_GetTick>
 800ff4c:	0005      	movs	r5, r0
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800ff4e:	6823      	ldr	r3, [r4, #0]
 800ff50:	689b      	ldr	r3, [r3, #8]
 800ff52:	075b      	lsls	r3, r3, #29
 800ff54:	d50e      	bpl.n	800ff74 <ADC_ConversionStop+0x4c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800ff56:	f7ff ffc5 	bl	800fee4 <HAL_GetTick>
 800ff5a:	1b40      	subs	r0, r0, r5
 800ff5c:	2802      	cmp	r0, #2
 800ff5e:	d9f6      	bls.n	800ff4e <ADC_ConversionStop+0x26>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ff60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ff62:	2210      	movs	r2, #16
 800ff64:	4313      	orrs	r3, r2
 800ff66:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ff68:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ff6a:	3a0f      	subs	r2, #15
 800ff6c:	4313      	orrs	r3, r2
 800ff6e:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 800ff70:	2001      	movs	r0, #1
 800ff72:	e002      	b.n	800ff7a <ADC_ConversionStop+0x52>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800ff74:	2000      	movs	r0, #0
 800ff76:	e000      	b.n	800ff7a <ADC_ConversionStop+0x52>
 800ff78:	2000      	movs	r0, #0
}
 800ff7a:	bd70      	pop	{r4, r5, r6, pc}

0800ff7c <ADC_Disable>:
{
 800ff7c:	b570      	push	{r4, r5, r6, lr}
 800ff7e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ff80:	6802      	ldr	r2, [r0, #0]
 800ff82:	6891      	ldr	r1, [r2, #8]
 800ff84:	2303      	movs	r3, #3
 800ff86:	400b      	ands	r3, r1
 800ff88:	2b01      	cmp	r3, #1
 800ff8a:	d001      	beq.n	800ff90 <ADC_Disable+0x14>
  return HAL_OK;
 800ff8c:	2000      	movs	r0, #0
}
 800ff8e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ff90:	6813      	ldr	r3, [r2, #0]
 800ff92:	07db      	lsls	r3, r3, #31
 800ff94:	d402      	bmi.n	800ff9c <ADC_Disable+0x20>
 800ff96:	68d3      	ldr	r3, [r2, #12]
 800ff98:	041b      	lsls	r3, r3, #16
 800ff9a:	d52d      	bpl.n	800fff8 <ADC_Disable+0x7c>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800ff9c:	6891      	ldr	r1, [r2, #8]
 800ff9e:	2305      	movs	r3, #5
 800ffa0:	400b      	ands	r3, r1
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	d009      	beq.n	800ffba <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ffa6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ffa8:	2210      	movs	r2, #16
 800ffaa:	4313      	orrs	r3, r2
 800ffac:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ffae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ffb0:	3a0f      	subs	r2, #15
 800ffb2:	4313      	orrs	r3, r2
 800ffb4:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800ffb6:	2001      	movs	r0, #1
 800ffb8:	e7e9      	b.n	800ff8e <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 800ffba:	6893      	ldr	r3, [r2, #8]
 800ffbc:	2102      	movs	r1, #2
 800ffbe:	430b      	orrs	r3, r1
 800ffc0:	6093      	str	r3, [r2, #8]
 800ffc2:	6823      	ldr	r3, [r4, #0]
 800ffc4:	2203      	movs	r2, #3
 800ffc6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800ffc8:	f7ff ff8c 	bl	800fee4 <HAL_GetTick>
 800ffcc:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800ffce:	6823      	ldr	r3, [r4, #0]
 800ffd0:	689b      	ldr	r3, [r3, #8]
 800ffd2:	07db      	lsls	r3, r3, #31
 800ffd4:	d50e      	bpl.n	800fff4 <ADC_Disable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ffd6:	f7ff ff85 	bl	800fee4 <HAL_GetTick>
 800ffda:	1b40      	subs	r0, r0, r5
 800ffdc:	2802      	cmp	r0, #2
 800ffde:	d9f6      	bls.n	800ffce <ADC_Disable+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ffe0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ffe2:	2210      	movs	r2, #16
 800ffe4:	4313      	orrs	r3, r2
 800ffe6:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ffe8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ffea:	3a0f      	subs	r2, #15
 800ffec:	4313      	orrs	r3, r2
 800ffee:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800fff0:	2001      	movs	r0, #1
 800fff2:	e7cc      	b.n	800ff8e <ADC_Disable+0x12>
  return HAL_OK;
 800fff4:	2000      	movs	r0, #0
 800fff6:	e7ca      	b.n	800ff8e <ADC_Disable+0x12>
 800fff8:	2000      	movs	r0, #0
 800fffa:	e7c8      	b.n	800ff8e <ADC_Disable+0x12>

0800fffc <ADC_Enable>:
{
 800fffc:	b530      	push	{r4, r5, lr}
 800fffe:	b083      	sub	sp, #12
 8010000:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8010002:	2300      	movs	r3, #0
 8010004:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010006:	6803      	ldr	r3, [r0, #0]
 8010008:	6899      	ldr	r1, [r3, #8]
 801000a:	2203      	movs	r2, #3
 801000c:	400a      	ands	r2, r1
 801000e:	2a01      	cmp	r2, #1
 8010010:	d014      	beq.n	801003c <ADC_Enable+0x40>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8010012:	6899      	ldr	r1, [r3, #8]
 8010014:	4a20      	ldr	r2, [pc, #128]	; (8010098 <ADC_Enable+0x9c>)
 8010016:	4211      	tst	r1, r2
 8010018:	d118      	bne.n	801004c <ADC_Enable+0x50>
    __HAL_ADC_ENABLE(hadc);
 801001a:	689a      	ldr	r2, [r3, #8]
 801001c:	2101      	movs	r1, #1
 801001e:	430a      	orrs	r2, r1
 8010020:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8010022:	4b1e      	ldr	r3, [pc, #120]	; (801009c <ADC_Enable+0xa0>)
 8010024:	6818      	ldr	r0, [r3, #0]
 8010026:	491e      	ldr	r1, [pc, #120]	; (80100a0 <ADC_Enable+0xa4>)
 8010028:	f7f0 f892 	bl	8000150 <__udivsi3>
 801002c:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 801002e:	9b01      	ldr	r3, [sp, #4]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d016      	beq.n	8010062 <ADC_Enable+0x66>
      wait_loop_index--;
 8010034:	9b01      	ldr	r3, [sp, #4]
 8010036:	3b01      	subs	r3, #1
 8010038:	9301      	str	r3, [sp, #4]
 801003a:	e7f8      	b.n	801002e <ADC_Enable+0x32>
  if (ADC_IS_ENABLE(hadc) == RESET)
 801003c:	681a      	ldr	r2, [r3, #0]
 801003e:	07d2      	lsls	r2, r2, #31
 8010040:	d427      	bmi.n	8010092 <ADC_Enable+0x96>
 8010042:	68da      	ldr	r2, [r3, #12]
 8010044:	0412      	lsls	r2, r2, #16
 8010046:	d5e4      	bpl.n	8010012 <ADC_Enable+0x16>
  return HAL_OK;
 8010048:	2000      	movs	r0, #0
 801004a:	e008      	b.n	801005e <ADC_Enable+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801004c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801004e:	2210      	movs	r2, #16
 8010050:	4313      	orrs	r3, r2
 8010052:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010054:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010056:	3a0f      	subs	r2, #15
 8010058:	4313      	orrs	r3, r2
 801005a:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 801005c:	2001      	movs	r0, #1
}
 801005e:	b003      	add	sp, #12
 8010060:	bd30      	pop	{r4, r5, pc}
    tickstart = HAL_GetTick();
 8010062:	f7ff ff3f 	bl	800fee4 <HAL_GetTick>
 8010066:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8010068:	6823      	ldr	r3, [r4, #0]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	07db      	lsls	r3, r3, #31
 801006e:	d40e      	bmi.n	801008e <ADC_Enable+0x92>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8010070:	f7ff ff38 	bl	800fee4 <HAL_GetTick>
 8010074:	1b40      	subs	r0, r0, r5
 8010076:	2802      	cmp	r0, #2
 8010078:	d9f6      	bls.n	8010068 <ADC_Enable+0x6c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801007a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801007c:	2210      	movs	r2, #16
 801007e:	4313      	orrs	r3, r2
 8010080:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010082:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010084:	3a0f      	subs	r2, #15
 8010086:	4313      	orrs	r3, r2
 8010088:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 801008a:	2001      	movs	r0, #1
 801008c:	e7e7      	b.n	801005e <ADC_Enable+0x62>
  return HAL_OK;
 801008e:	2000      	movs	r0, #0
 8010090:	e7e5      	b.n	801005e <ADC_Enable+0x62>
 8010092:	2000      	movs	r0, #0
 8010094:	e7e3      	b.n	801005e <ADC_Enable+0x62>
 8010096:	46c0      	nop			; (mov r8, r8)
 8010098:	80000017 	.word	0x80000017
 801009c:	200000a4 	.word	0x200000a4
 80100a0:	000f4240 	.word	0x000f4240

080100a4 <HAL_ADC_Init>:
{
 80100a4:	b570      	push	{r4, r5, r6, lr}
 80100a6:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80100a8:	d100      	bne.n	80100ac <HAL_ADC_Init+0x8>
 80100aa:	e0a9      	b.n	8010200 <HAL_ADC_Init+0x15c>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80100ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d07f      	beq.n	80101b2 <HAL_ADC_Init+0x10e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80100b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80100b4:	06db      	lsls	r3, r3, #27
 80100b6:	d500      	bpl.n	80100ba <HAL_ADC_Init+0x16>
 80100b8:	e09c      	b.n	80101f4 <HAL_ADC_Init+0x150>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80100ba:	6822      	ldr	r2, [r4, #0]
 80100bc:	6891      	ldr	r1, [r2, #8]
 80100be:	2004      	movs	r0, #4
 80100c0:	0005      	movs	r5, r0
 80100c2:	400d      	ands	r5, r1
      (tmp_hal_status == HAL_OK)                                &&
 80100c4:	4208      	tst	r0, r1
 80100c6:	d000      	beq.n	80100ca <HAL_ADC_Init+0x26>
 80100c8:	e094      	b.n	80101f4 <HAL_ADC_Init+0x150>
    ADC_STATE_CLR_SET(hadc->State,
 80100ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80100cc:	4b4d      	ldr	r3, [pc, #308]	; (8010204 <HAL_ADC_Init+0x160>)
 80100ce:	4019      	ands	r1, r3
 80100d0:	3306      	adds	r3, #6
 80100d2:	33ff      	adds	r3, #255	; 0xff
 80100d4:	4319      	orrs	r1, r3
 80100d6:	6461      	str	r1, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80100d8:	6891      	ldr	r1, [r2, #8]
 80100da:	3301      	adds	r3, #1
 80100dc:	400b      	ands	r3, r1
 80100de:	2b01      	cmp	r3, #1
 80100e0:	d06d      	beq.n	80101be <HAL_ADC_Init+0x11a>
      MODIFY_REG(hadc->Instance->CFGR1,
 80100e2:	68d3      	ldr	r3, [r2, #12]
 80100e4:	2118      	movs	r1, #24
 80100e6:	438b      	bics	r3, r1
 80100e8:	68a1      	ldr	r1, [r4, #8]
 80100ea:	430b      	orrs	r3, r1
 80100ec:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80100ee:	6822      	ldr	r2, [r4, #0]
 80100f0:	6913      	ldr	r3, [r2, #16]
 80100f2:	009b      	lsls	r3, r3, #2
 80100f4:	089b      	lsrs	r3, r3, #2
 80100f6:	6861      	ldr	r1, [r4, #4]
 80100f8:	430b      	orrs	r3, r1
 80100fa:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80100fc:	6822      	ldr	r2, [r4, #0]
 80100fe:	68d3      	ldr	r3, [r2, #12]
 8010100:	4941      	ldr	r1, [pc, #260]	; (8010208 <HAL_ADC_Init+0x164>)
 8010102:	400b      	ands	r3, r1
 8010104:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010106:	69a3      	ldr	r3, [r4, #24]
 8010108:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 801010a:	69e2      	ldr	r2, [r4, #28]
 801010c:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 801010e:	4313      	orrs	r3, r2
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010110:	6a21      	ldr	r1, [r4, #32]
 8010112:	034a      	lsls	r2, r1, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8010114:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8010116:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010118:	2a01      	cmp	r2, #1
 801011a:	d057      	beq.n	80101cc <HAL_ADC_Init+0x128>
 801011c:	2280      	movs	r2, #128	; 0x80
 801011e:	0152      	lsls	r2, r2, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010120:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8010122:	68e2      	ldr	r2, [r4, #12]
 8010124:	4313      	orrs	r3, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010126:	6922      	ldr	r2, [r4, #16]
 8010128:	2a02      	cmp	r2, #2
 801012a:	d051      	beq.n	80101d0 <HAL_ADC_Init+0x12c>
                 hadc->Init.DataAlign                                   |
 801012c:	432b      	orrs	r3, r5
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 801012e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010130:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010132:	4313      	orrs	r3, r2
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010134:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010136:	2a01      	cmp	r2, #1
 8010138:	d04c      	beq.n	80101d4 <HAL_ADC_Init+0x130>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801013a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801013c:	21c2      	movs	r1, #194	; 0xc2
 801013e:	31ff      	adds	r1, #255	; 0xff
 8010140:	428a      	cmp	r2, r1
 8010142:	d002      	beq.n	801014a <HAL_ADC_Init+0xa6>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8010144:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010146:	430a      	orrs	r2, r1
 8010148:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 801014a:	6821      	ldr	r1, [r4, #0]
 801014c:	68ca      	ldr	r2, [r1, #12]
 801014e:	431a      	orrs	r2, r3
 8010150:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010152:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010154:	2180      	movs	r1, #128	; 0x80
 8010156:	0549      	lsls	r1, r1, #21
 8010158:	428a      	cmp	r2, r1
 801015a:	d00d      	beq.n	8010178 <HAL_ADC_Init+0xd4>
 801015c:	2a01      	cmp	r2, #1
 801015e:	d00b      	beq.n	8010178 <HAL_ADC_Init+0xd4>
 8010160:	2a02      	cmp	r2, #2
 8010162:	d009      	beq.n	8010178 <HAL_ADC_Init+0xd4>
 8010164:	2a03      	cmp	r2, #3
 8010166:	d007      	beq.n	8010178 <HAL_ADC_Init+0xd4>
 8010168:	2a04      	cmp	r2, #4
 801016a:	d005      	beq.n	8010178 <HAL_ADC_Init+0xd4>
 801016c:	2a05      	cmp	r2, #5
 801016e:	d003      	beq.n	8010178 <HAL_ADC_Init+0xd4>
 8010170:	2a06      	cmp	r2, #6
 8010172:	d001      	beq.n	8010178 <HAL_ADC_Init+0xd4>
 8010174:	2a07      	cmp	r2, #7
 8010176:	d10a      	bne.n	801018e <HAL_ADC_Init+0xea>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010178:	6820      	ldr	r0, [r4, #0]
 801017a:	6941      	ldr	r1, [r0, #20]
 801017c:	2207      	movs	r2, #7
 801017e:	4391      	bics	r1, r2
 8010180:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8010182:	6820      	ldr	r0, [r4, #0]
 8010184:	6941      	ldr	r1, [r0, #20]
 8010186:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010188:	402a      	ands	r2, r5
 801018a:	430a      	orrs	r2, r1
 801018c:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 801018e:	6822      	ldr	r2, [r4, #0]
 8010190:	68d2      	ldr	r2, [r2, #12]
 8010192:	491e      	ldr	r1, [pc, #120]	; (801020c <HAL_ADC_Init+0x168>)
 8010194:	400a      	ands	r2, r1
 8010196:	429a      	cmp	r2, r3
 8010198:	d022      	beq.n	80101e0 <HAL_ADC_Init+0x13c>
      ADC_STATE_CLR_SET(hadc->State,
 801019a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801019c:	2212      	movs	r2, #18
 801019e:	4393      	bics	r3, r2
 80101a0:	3a02      	subs	r2, #2
 80101a2:	4313      	orrs	r3, r2
 80101a4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80101a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80101a8:	3a0f      	subs	r2, #15
 80101aa:	4313      	orrs	r3, r2
 80101ac:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80101ae:	2001      	movs	r0, #1
 80101b0:	e025      	b.n	80101fe <HAL_ADC_Init+0x15a>
    ADC_CLEAR_ERRORCODE(hadc);
 80101b2:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 80101b4:	2240      	movs	r2, #64	; 0x40
 80101b6:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80101b8:	f7fc fb06 	bl	800c7c8 <HAL_ADC_MspInit>
 80101bc:	e779      	b.n	80100b2 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80101be:	6813      	ldr	r3, [r2, #0]
 80101c0:	07db      	lsls	r3, r3, #31
 80101c2:	d49b      	bmi.n	80100fc <HAL_ADC_Init+0x58>
 80101c4:	68d3      	ldr	r3, [r2, #12]
 80101c6:	041b      	lsls	r3, r3, #16
 80101c8:	d498      	bmi.n	80100fc <HAL_ADC_Init+0x58>
 80101ca:	e78a      	b.n	80100e2 <HAL_ADC_Init+0x3e>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80101cc:	002a      	movs	r2, r5
 80101ce:	e7a7      	b.n	8010120 <HAL_ADC_Init+0x7c>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80101d0:	2504      	movs	r5, #4
 80101d2:	e7ab      	b.n	801012c <HAL_ADC_Init+0x88>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 80101d4:	2900      	cmp	r1, #0
 80101d6:	d1b0      	bne.n	801013a <HAL_ADC_Init+0x96>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80101d8:	2280      	movs	r2, #128	; 0x80
 80101da:	0252      	lsls	r2, r2, #9
 80101dc:	4313      	orrs	r3, r2
 80101de:	e7ac      	b.n	801013a <HAL_ADC_Init+0x96>
      ADC_CLEAR_ERRORCODE(hadc);
 80101e0:	2300      	movs	r3, #0
 80101e2:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80101e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80101e6:	2203      	movs	r2, #3
 80101e8:	4393      	bics	r3, r2
 80101ea:	3a02      	subs	r2, #2
 80101ec:	4313      	orrs	r3, r2
 80101ee:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80101f0:	2000      	movs	r0, #0
 80101f2:	e004      	b.n	80101fe <HAL_ADC_Init+0x15a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80101f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80101f6:	2210      	movs	r2, #16
 80101f8:	4313      	orrs	r3, r2
 80101fa:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80101fc:	2001      	movs	r0, #1
}
 80101fe:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010200:	2001      	movs	r0, #1
 8010202:	e7fc      	b.n	80101fe <HAL_ADC_Init+0x15a>
 8010204:	fffffefd 	.word	0xfffffefd
 8010208:	fffe0219 	.word	0xfffe0219
 801020c:	833fffe7 	.word	0x833fffe7

08010210 <HAL_ADC_Start>:
{
 8010210:	b510      	push	{r4, lr}
 8010212:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010214:	6803      	ldr	r3, [r0, #0]
 8010216:	689b      	ldr	r3, [r3, #8]
 8010218:	075b      	lsls	r3, r3, #29
 801021a:	d423      	bmi.n	8010264 <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 801021c:	2340      	movs	r3, #64	; 0x40
 801021e:	5cc3      	ldrb	r3, [r0, r3]
 8010220:	2b01      	cmp	r3, #1
 8010222:	d021      	beq.n	8010268 <HAL_ADC_Start+0x58>
 8010224:	2340      	movs	r3, #64	; 0x40
 8010226:	2201      	movs	r2, #1
 8010228:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 801022a:	69c3      	ldr	r3, [r0, #28]
 801022c:	2b01      	cmp	r3, #1
 801022e:	d114      	bne.n	801025a <HAL_ADC_Start+0x4a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010230:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8010232:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010234:	4a0d      	ldr	r2, [pc, #52]	; (801026c <HAL_ADC_Start+0x5c>)
 8010236:	401a      	ands	r2, r3
 8010238:	2380      	movs	r3, #128	; 0x80
 801023a:	005b      	lsls	r3, r3, #1
 801023c:	4313      	orrs	r3, r2
 801023e:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8010240:	2300      	movs	r3, #0
 8010242:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8010244:	2240      	movs	r2, #64	; 0x40
 8010246:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010248:	6823      	ldr	r3, [r4, #0]
 801024a:	3a24      	subs	r2, #36	; 0x24
 801024c:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 801024e:	6822      	ldr	r2, [r4, #0]
 8010250:	6893      	ldr	r3, [r2, #8]
 8010252:	2104      	movs	r1, #4
 8010254:	430b      	orrs	r3, r1
 8010256:	6093      	str	r3, [r2, #8]
}
 8010258:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 801025a:	f7ff fecf 	bl	800fffc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 801025e:	2800      	cmp	r0, #0
 8010260:	d1fa      	bne.n	8010258 <HAL_ADC_Start+0x48>
 8010262:	e7e6      	b.n	8010232 <HAL_ADC_Start+0x22>
    tmp_hal_status = HAL_BUSY;
 8010264:	2002      	movs	r0, #2
 8010266:	e7f7      	b.n	8010258 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8010268:	2002      	movs	r0, #2
 801026a:	e7f5      	b.n	8010258 <HAL_ADC_Start+0x48>
 801026c:	fffff0fe 	.word	0xfffff0fe

08010270 <HAL_ADC_Stop>:
{ 
 8010270:	b510      	push	{r4, lr}
 8010272:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8010274:	2340      	movs	r3, #64	; 0x40
 8010276:	5cc3      	ldrb	r3, [r0, r3]
 8010278:	2b01      	cmp	r3, #1
 801027a:	d017      	beq.n	80102ac <HAL_ADC_Stop+0x3c>
 801027c:	2340      	movs	r3, #64	; 0x40
 801027e:	2201      	movs	r2, #1
 8010280:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8010282:	f7ff fe51 	bl	800ff28 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8010286:	2800      	cmp	r0, #0
 8010288:	d003      	beq.n	8010292 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 801028a:	2340      	movs	r3, #64	; 0x40
 801028c:	2200      	movs	r2, #0
 801028e:	54e2      	strb	r2, [r4, r3]
}
 8010290:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8010292:	0020      	movs	r0, r4
 8010294:	f7ff fe72 	bl	800ff7c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8010298:	2800      	cmp	r0, #0
 801029a:	d1f6      	bne.n	801028a <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 801029c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801029e:	4a04      	ldr	r2, [pc, #16]	; (80102b0 <HAL_ADC_Stop+0x40>)
 80102a0:	4013      	ands	r3, r2
 80102a2:	3204      	adds	r2, #4
 80102a4:	32ff      	adds	r2, #255	; 0xff
 80102a6:	4313      	orrs	r3, r2
 80102a8:	6463      	str	r3, [r4, #68]	; 0x44
 80102aa:	e7ee      	b.n	801028a <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 80102ac:	2002      	movs	r0, #2
 80102ae:	e7ef      	b.n	8010290 <HAL_ADC_Stop+0x20>
 80102b0:	fffffefe 	.word	0xfffffefe

080102b4 <HAL_ADC_PollForConversion>:
{
 80102b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102b6:	0004      	movs	r4, r0
 80102b8:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80102ba:	6946      	ldr	r6, [r0, #20]
 80102bc:	2e08      	cmp	r6, #8
 80102be:	d004      	beq.n	80102ca <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80102c0:	6803      	ldr	r3, [r0, #0]
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	07db      	lsls	r3, r3, #31
 80102c6:	d419      	bmi.n	80102fc <HAL_ADC_PollForConversion+0x48>
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80102c8:	260c      	movs	r6, #12
  tickstart = HAL_GetTick();
 80102ca:	f7ff fe0b 	bl	800fee4 <HAL_GetTick>
 80102ce:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80102d0:	6823      	ldr	r3, [r4, #0]
 80102d2:	681a      	ldr	r2, [r3, #0]
 80102d4:	4216      	tst	r6, r2
 80102d6:	d11a      	bne.n	801030e <HAL_ADC_PollForConversion+0x5a>
    if(Timeout != HAL_MAX_DELAY)
 80102d8:	1c6b      	adds	r3, r5, #1
 80102da:	d0f9      	beq.n	80102d0 <HAL_ADC_PollForConversion+0x1c>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80102dc:	2d00      	cmp	r5, #0
 80102de:	d004      	beq.n	80102ea <HAL_ADC_PollForConversion+0x36>
 80102e0:	f7ff fe00 	bl	800fee4 <HAL_GetTick>
 80102e4:	1bc0      	subs	r0, r0, r7
 80102e6:	42a8      	cmp	r0, r5
 80102e8:	d9f2      	bls.n	80102d0 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80102ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80102ec:	2204      	movs	r2, #4
 80102ee:	4313      	orrs	r3, r2
 80102f0:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80102f2:	2340      	movs	r3, #64	; 0x40
 80102f4:	2200      	movs	r2, #0
 80102f6:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 80102f8:	2003      	movs	r0, #3
 80102fa:	e02d      	b.n	8010358 <HAL_ADC_PollForConversion+0xa4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80102fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80102fe:	2220      	movs	r2, #32
 8010300:	4313      	orrs	r3, r2
 8010302:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8010304:	2340      	movs	r3, #64	; 0x40
 8010306:	2200      	movs	r2, #0
 8010308:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 801030a:	2001      	movs	r0, #1
 801030c:	e024      	b.n	8010358 <HAL_ADC_PollForConversion+0xa4>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801030e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010310:	2280      	movs	r2, #128	; 0x80
 8010312:	0092      	lsls	r2, r2, #2
 8010314:	430a      	orrs	r2, r1
 8010316:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010318:	68d9      	ldr	r1, [r3, #12]
 801031a:	22c0      	movs	r2, #192	; 0xc0
 801031c:	0112      	lsls	r2, r2, #4
 801031e:	4211      	tst	r1, r2
 8010320:	d113      	bne.n	801034a <HAL_ADC_PollForConversion+0x96>
 8010322:	6a22      	ldr	r2, [r4, #32]
 8010324:	2a00      	cmp	r2, #0
 8010326:	d110      	bne.n	801034a <HAL_ADC_PollForConversion+0x96>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010328:	681a      	ldr	r2, [r3, #0]
 801032a:	0712      	lsls	r2, r2, #28
 801032c:	d50d      	bpl.n	801034a <HAL_ADC_PollForConversion+0x96>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801032e:	689a      	ldr	r2, [r3, #8]
 8010330:	0752      	lsls	r2, r2, #29
 8010332:	d412      	bmi.n	801035a <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010334:	685a      	ldr	r2, [r3, #4]
 8010336:	210c      	movs	r1, #12
 8010338:	438a      	bics	r2, r1
 801033a:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 801033c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801033e:	4a0c      	ldr	r2, [pc, #48]	; (8010370 <HAL_ADC_PollForConversion+0xbc>)
 8010340:	4013      	ands	r3, r2
 8010342:	3204      	adds	r2, #4
 8010344:	32ff      	adds	r2, #255	; 0xff
 8010346:	4313      	orrs	r3, r2
 8010348:	6463      	str	r3, [r4, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 801034a:	69a3      	ldr	r3, [r4, #24]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d10d      	bne.n	801036c <HAL_ADC_PollForConversion+0xb8>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8010350:	6823      	ldr	r3, [r4, #0]
 8010352:	220c      	movs	r2, #12
 8010354:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8010356:	2000      	movs	r0, #0
}
 8010358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801035a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801035c:	2220      	movs	r2, #32
 801035e:	4313      	orrs	r3, r2
 8010360:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010362:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010364:	3a1f      	subs	r2, #31
 8010366:	4313      	orrs	r3, r2
 8010368:	64a3      	str	r3, [r4, #72]	; 0x48
 801036a:	e7ee      	b.n	801034a <HAL_ADC_PollForConversion+0x96>
  return HAL_OK;
 801036c:	2000      	movs	r0, #0
 801036e:	e7f3      	b.n	8010358 <HAL_ADC_PollForConversion+0xa4>
 8010370:	fffffefe 	.word	0xfffffefe

08010374 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8010374:	6803      	ldr	r3, [r0, #0]
 8010376:	2208      	movs	r2, #8
 8010378:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 801037a:	6803      	ldr	r3, [r0, #0]
 801037c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 801037e:	4770      	bx	lr

08010380 <HAL_ADC_ConfigChannel>:
{
 8010380:	b530      	push	{r4, r5, lr}
 8010382:	b083      	sub	sp, #12
 8010384:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8010386:	2300      	movs	r3, #0
 8010388:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 801038a:	3340      	adds	r3, #64	; 0x40
 801038c:	5cc3      	ldrb	r3, [r0, r3]
 801038e:	2b01      	cmp	r3, #1
 8010390:	d100      	bne.n	8010394 <HAL_ADC_ConfigChannel+0x14>
 8010392:	e08a      	b.n	80104aa <HAL_ADC_ConfigChannel+0x12a>
 8010394:	2340      	movs	r3, #64	; 0x40
 8010396:	2201      	movs	r2, #1
 8010398:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801039a:	6803      	ldr	r3, [r0, #0]
 801039c:	689a      	ldr	r2, [r3, #8]
 801039e:	0752      	lsls	r2, r2, #29
 80103a0:	d475      	bmi.n	801048e <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 80103a2:	4a43      	ldr	r2, [pc, #268]	; (80104b0 <HAL_ADC_ConfigChannel+0x130>)
 80103a4:	6848      	ldr	r0, [r1, #4]
 80103a6:	4290      	cmp	r0, r2
 80103a8:	d056      	beq.n	8010458 <HAL_ADC_ConfigChannel+0xd8>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80103aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80103ac:	2001      	movs	r0, #1
 80103ae:	680d      	ldr	r5, [r1, #0]
 80103b0:	40a8      	lsls	r0, r5
 80103b2:	4302      	orrs	r2, r0
 80103b4:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80103b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80103b8:	2280      	movs	r2, #128	; 0x80
 80103ba:	0552      	lsls	r2, r2, #21
 80103bc:	4293      	cmp	r3, r2
 80103be:	d01e      	beq.n	80103fe <HAL_ADC_ConfigChannel+0x7e>
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	d01c      	beq.n	80103fe <HAL_ADC_ConfigChannel+0x7e>
 80103c4:	2b02      	cmp	r3, #2
 80103c6:	d01a      	beq.n	80103fe <HAL_ADC_ConfigChannel+0x7e>
 80103c8:	2b03      	cmp	r3, #3
 80103ca:	d018      	beq.n	80103fe <HAL_ADC_ConfigChannel+0x7e>
 80103cc:	2b04      	cmp	r3, #4
 80103ce:	d016      	beq.n	80103fe <HAL_ADC_ConfigChannel+0x7e>
 80103d0:	2b05      	cmp	r3, #5
 80103d2:	d014      	beq.n	80103fe <HAL_ADC_ConfigChannel+0x7e>
 80103d4:	2b06      	cmp	r3, #6
 80103d6:	d012      	beq.n	80103fe <HAL_ADC_ConfigChannel+0x7e>
 80103d8:	2b07      	cmp	r3, #7
 80103da:	d010      	beq.n	80103fe <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80103dc:	6822      	ldr	r2, [r4, #0]
 80103de:	6950      	ldr	r0, [r2, #20]
 80103e0:	2307      	movs	r3, #7
 80103e2:	4003      	ands	r3, r0
 80103e4:	6888      	ldr	r0, [r1, #8]
 80103e6:	4298      	cmp	r0, r3
 80103e8:	d009      	beq.n	80103fe <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80103ea:	6950      	ldr	r0, [r2, #20]
 80103ec:	2307      	movs	r3, #7
 80103ee:	4398      	bics	r0, r3
 80103f0:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80103f2:	6820      	ldr	r0, [r4, #0]
 80103f4:	6942      	ldr	r2, [r0, #20]
 80103f6:	688d      	ldr	r5, [r1, #8]
 80103f8:	402b      	ands	r3, r5
 80103fa:	4313      	orrs	r3, r2
 80103fc:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80103fe:	680b      	ldr	r3, [r1, #0]
 8010400:	001a      	movs	r2, r3
 8010402:	3a10      	subs	r2, #16
 8010404:	2a02      	cmp	r2, #2
 8010406:	d84c      	bhi.n	80104a2 <HAL_ADC_ConfigChannel+0x122>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010408:	4a2a      	ldr	r2, [pc, #168]	; (80104b4 <HAL_ADC_ConfigChannel+0x134>)
 801040a:	6812      	ldr	r2, [r2, #0]
 801040c:	2b10      	cmp	r3, #16
 801040e:	d00e      	beq.n	801042e <HAL_ADC_ConfigChannel+0xae>
 8010410:	2b11      	cmp	r3, #17
 8010412:	d009      	beq.n	8010428 <HAL_ADC_ConfigChannel+0xa8>
 8010414:	2380      	movs	r3, #128	; 0x80
 8010416:	045b      	lsls	r3, r3, #17
 8010418:	4313      	orrs	r3, r2
 801041a:	4a26      	ldr	r2, [pc, #152]	; (80104b4 <HAL_ADC_ConfigChannel+0x134>)
 801041c:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801041e:	680b      	ldr	r3, [r1, #0]
 8010420:	2b10      	cmp	r3, #16
 8010422:	d007      	beq.n	8010434 <HAL_ADC_ConfigChannel+0xb4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010424:	2000      	movs	r0, #0
 8010426:	e037      	b.n	8010498 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010428:	2380      	movs	r3, #128	; 0x80
 801042a:	03db      	lsls	r3, r3, #15
 801042c:	e7f4      	b.n	8010418 <HAL_ADC_ConfigChannel+0x98>
 801042e:	2380      	movs	r3, #128	; 0x80
 8010430:	041b      	lsls	r3, r3, #16
 8010432:	e7f1      	b.n	8010418 <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8010434:	4b20      	ldr	r3, [pc, #128]	; (80104b8 <HAL_ADC_ConfigChannel+0x138>)
 8010436:	6818      	ldr	r0, [r3, #0]
 8010438:	4920      	ldr	r1, [pc, #128]	; (80104bc <HAL_ADC_ConfigChannel+0x13c>)
 801043a:	f7ef fe89 	bl	8000150 <__udivsi3>
 801043e:	0083      	lsls	r3, r0, #2
 8010440:	181b      	adds	r3, r3, r0
 8010442:	005b      	lsls	r3, r3, #1
 8010444:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8010446:	e002      	b.n	801044e <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8010448:	9b01      	ldr	r3, [sp, #4]
 801044a:	3b01      	subs	r3, #1
 801044c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 801044e:	9b01      	ldr	r3, [sp, #4]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d1f9      	bne.n	8010448 <HAL_ADC_ConfigChannel+0xc8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010454:	2000      	movs	r0, #0
 8010456:	e01f      	b.n	8010498 <HAL_ADC_ConfigChannel+0x118>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801045a:	2001      	movs	r0, #1
 801045c:	680d      	ldr	r5, [r1, #0]
 801045e:	40a8      	lsls	r0, r5
 8010460:	4382      	bics	r2, r0
 8010462:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010464:	680b      	ldr	r3, [r1, #0]
 8010466:	001a      	movs	r2, r3
 8010468:	3a10      	subs	r2, #16
 801046a:	2a02      	cmp	r2, #2
 801046c:	d81b      	bhi.n	80104a6 <HAL_ADC_ConfigChannel+0x126>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801046e:	4a11      	ldr	r2, [pc, #68]	; (80104b4 <HAL_ADC_ConfigChannel+0x134>)
 8010470:	6812      	ldr	r2, [r2, #0]
 8010472:	2b10      	cmp	r3, #16
 8010474:	d009      	beq.n	801048a <HAL_ADC_ConfigChannel+0x10a>
 8010476:	2b11      	cmp	r3, #17
 8010478:	d005      	beq.n	8010486 <HAL_ADC_ConfigChannel+0x106>
 801047a:	4b11      	ldr	r3, [pc, #68]	; (80104c0 <HAL_ADC_ConfigChannel+0x140>)
 801047c:	4013      	ands	r3, r2
 801047e:	4a0d      	ldr	r2, [pc, #52]	; (80104b4 <HAL_ADC_ConfigChannel+0x134>)
 8010480:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010482:	2000      	movs	r0, #0
 8010484:	e008      	b.n	8010498 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010486:	4b0f      	ldr	r3, [pc, #60]	; (80104c4 <HAL_ADC_ConfigChannel+0x144>)
 8010488:	e7f8      	b.n	801047c <HAL_ADC_ConfigChannel+0xfc>
 801048a:	4b0f      	ldr	r3, [pc, #60]	; (80104c8 <HAL_ADC_ConfigChannel+0x148>)
 801048c:	e7f6      	b.n	801047c <HAL_ADC_ConfigChannel+0xfc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801048e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010490:	2220      	movs	r2, #32
 8010492:	4313      	orrs	r3, r2
 8010494:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010496:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8010498:	2340      	movs	r3, #64	; 0x40
 801049a:	2200      	movs	r2, #0
 801049c:	54e2      	strb	r2, [r4, r3]
}
 801049e:	b003      	add	sp, #12
 80104a0:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80104a2:	2000      	movs	r0, #0
 80104a4:	e7f8      	b.n	8010498 <HAL_ADC_ConfigChannel+0x118>
 80104a6:	2000      	movs	r0, #0
 80104a8:	e7f6      	b.n	8010498 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 80104aa:	2002      	movs	r0, #2
 80104ac:	e7f7      	b.n	801049e <HAL_ADC_ConfigChannel+0x11e>
 80104ae:	46c0      	nop			; (mov r8, r8)
 80104b0:	00001001 	.word	0x00001001
 80104b4:	40012708 	.word	0x40012708
 80104b8:	200000a4 	.word	0x200000a4
 80104bc:	000f4240 	.word	0x000f4240
 80104c0:	feffffff 	.word	0xfeffffff
 80104c4:	ffbfffff 	.word	0xffbfffff
 80104c8:	ff7fffff 	.word	0xff7fffff

080104cc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80104cc:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 80104ce:	2800      	cmp	r0, #0
 80104d0:	db11      	blt.n	80104f6 <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80104d2:	0883      	lsrs	r3, r0, #2
 80104d4:	4d13      	ldr	r5, [pc, #76]	; (8010524 <HAL_NVIC_SetPriority+0x58>)
 80104d6:	33c0      	adds	r3, #192	; 0xc0
 80104d8:	009b      	lsls	r3, r3, #2
 80104da:	595c      	ldr	r4, [r3, r5]
 80104dc:	2203      	movs	r2, #3
 80104de:	4010      	ands	r0, r2
 80104e0:	00c0      	lsls	r0, r0, #3
 80104e2:	32fc      	adds	r2, #252	; 0xfc
 80104e4:	0016      	movs	r6, r2
 80104e6:	4086      	lsls	r6, r0
 80104e8:	43b4      	bics	r4, r6
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80104ea:	0189      	lsls	r1, r1, #6
 80104ec:	400a      	ands	r2, r1
 80104ee:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80104f0:	4322      	orrs	r2, r4
 80104f2:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80104f4:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80104f6:	230f      	movs	r3, #15
 80104f8:	4003      	ands	r3, r0
 80104fa:	3b08      	subs	r3, #8
 80104fc:	089b      	lsrs	r3, r3, #2
 80104fe:	3306      	adds	r3, #6
 8010500:	009b      	lsls	r3, r3, #2
 8010502:	4a09      	ldr	r2, [pc, #36]	; (8010528 <HAL_NVIC_SetPriority+0x5c>)
 8010504:	4694      	mov	ip, r2
 8010506:	4463      	add	r3, ip
 8010508:	685d      	ldr	r5, [r3, #4]
 801050a:	2403      	movs	r4, #3
 801050c:	4020      	ands	r0, r4
 801050e:	00c0      	lsls	r0, r0, #3
 8010510:	22ff      	movs	r2, #255	; 0xff
 8010512:	0014      	movs	r4, r2
 8010514:	4084      	lsls	r4, r0
 8010516:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010518:	0189      	lsls	r1, r1, #6
 801051a:	400a      	ands	r2, r1
 801051c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801051e:	432a      	orrs	r2, r5
 8010520:	605a      	str	r2, [r3, #4]
 8010522:	e7e7      	b.n	80104f4 <HAL_NVIC_SetPriority+0x28>
 8010524:	e000e100 	.word	0xe000e100
 8010528:	e000ed00 	.word	0xe000ed00

0801052c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 801052c:	231f      	movs	r3, #31
 801052e:	4018      	ands	r0, r3
 8010530:	3b1e      	subs	r3, #30
 8010532:	4083      	lsls	r3, r0
 8010534:	4a01      	ldr	r2, [pc, #4]	; (801053c <HAL_NVIC_EnableIRQ+0x10>)
 8010536:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010538:	4770      	bx	lr
 801053a:	46c0      	nop			; (mov r8, r8)
 801053c:	e000e100 	.word	0xe000e100

08010540 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010540:	231f      	movs	r3, #31
 8010542:	4018      	ands	r0, r3
 8010544:	3b1e      	subs	r3, #30
 8010546:	4083      	lsls	r3, r0
 8010548:	4901      	ldr	r1, [pc, #4]	; (8010550 <HAL_NVIC_DisableIRQ+0x10>)
 801054a:	2280      	movs	r2, #128	; 0x80
 801054c:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 801054e:	4770      	bx	lr
 8010550:	e000e100 	.word	0xe000e100

08010554 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010554:	3801      	subs	r0, #1
 8010556:	2380      	movs	r3, #128	; 0x80
 8010558:	045b      	lsls	r3, r3, #17
 801055a:	4298      	cmp	r0, r3
 801055c:	d20f      	bcs.n	801057e <HAL_SYSTICK_Config+0x2a>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801055e:	4a09      	ldr	r2, [pc, #36]	; (8010584 <HAL_SYSTICK_Config+0x30>)
 8010560:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010562:	4809      	ldr	r0, [pc, #36]	; (8010588 <HAL_SYSTICK_Config+0x34>)
 8010564:	6a03      	ldr	r3, [r0, #32]
 8010566:	021b      	lsls	r3, r3, #8
 8010568:	0a1b      	lsrs	r3, r3, #8
 801056a:	21c0      	movs	r1, #192	; 0xc0
 801056c:	0609      	lsls	r1, r1, #24
 801056e:	430b      	orrs	r3, r1
 8010570:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010572:	2300      	movs	r3, #0
 8010574:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010576:	3307      	adds	r3, #7
 8010578:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801057a:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 801057c:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 801057e:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8010580:	e7fc      	b.n	801057c <HAL_SYSTICK_Config+0x28>
 8010582:	46c0      	nop			; (mov r8, r8)
 8010584:	e000e010 	.word	0xe000e010
 8010588:	e000ed00 	.word	0xe000ed00

0801058c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 801058c:	2804      	cmp	r0, #4
 801058e:	d005      	beq.n	801059c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8010590:	4a05      	ldr	r2, [pc, #20]	; (80105a8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010592:	6813      	ldr	r3, [r2, #0]
 8010594:	2104      	movs	r1, #4
 8010596:	438b      	bics	r3, r1
 8010598:	6013      	str	r3, [r2, #0]
  }
}
 801059a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 801059c:	4a02      	ldr	r2, [pc, #8]	; (80105a8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 801059e:	6813      	ldr	r3, [r2, #0]
 80105a0:	2104      	movs	r1, #4
 80105a2:	430b      	orrs	r3, r1
 80105a4:	6013      	str	r3, [r2, #0]
 80105a6:	e7f8      	b.n	801059a <HAL_SYSTICK_CLKSourceConfig+0xe>
 80105a8:	e000e010 	.word	0xe000e010

080105ac <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80105ac:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 80105ae:	2500      	movs	r5, #0
 80105b0:	e00e      	b.n	80105d0 <CRC_Handle_8+0x24>
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 80105b2:	00ac      	lsls	r4, r5, #2
 80105b4:	5d0b      	ldrb	r3, [r1, r4]
 80105b6:	061b      	lsls	r3, r3, #24
 80105b8:	190c      	adds	r4, r1, r4
 80105ba:	7866      	ldrb	r6, [r4, #1]
 80105bc:	0436      	lsls	r6, r6, #16
 80105be:	4333      	orrs	r3, r6
 80105c0:	78a6      	ldrb	r6, [r4, #2]
 80105c2:	0236      	lsls	r6, r6, #8
 80105c4:	4333      	orrs	r3, r6
 80105c6:	78e6      	ldrb	r6, [r4, #3]
 80105c8:	6804      	ldr	r4, [r0, #0]
 80105ca:	4333      	orrs	r3, r6
 80105cc:	6023      	str	r3, [r4, #0]
   for(i = 0; i < (BufferLength/4); i++)
 80105ce:	3501      	adds	r5, #1
 80105d0:	0893      	lsrs	r3, r2, #2
 80105d2:	42ab      	cmp	r3, r5
 80105d4:	d8ed      	bhi.n	80105b2 <CRC_Handle_8+0x6>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 80105d6:	2303      	movs	r3, #3
 80105d8:	001c      	movs	r4, r3
 80105da:	4014      	ands	r4, r2
 80105dc:	4213      	tst	r3, r2
 80105de:	d005      	beq.n	80105ec <CRC_Handle_8+0x40>
   {
     if  (BufferLength%4 == 1)
 80105e0:	2c01      	cmp	r4, #1
 80105e2:	d006      	beq.n	80105f2 <CRC_Handle_8+0x46>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 80105e4:	2c02      	cmp	r4, #2
 80105e6:	d009      	beq.n	80105fc <CRC_Handle_8+0x50>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
     }
     if  (BufferLength%4 == 3)
 80105e8:	2c03      	cmp	r4, #3
 80105ea:	d010      	beq.n	801060e <CRC_Handle_8+0x62>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80105ec:	6803      	ldr	r3, [r0, #0]
 80105ee:	6818      	ldr	r0, [r3, #0]
}
 80105f0:	bd70      	pop	{r4, r5, r6, pc}
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 80105f2:	00ab      	lsls	r3, r5, #2
 80105f4:	5ccb      	ldrb	r3, [r1, r3]
 80105f6:	6802      	ldr	r2, [r0, #0]
 80105f8:	7013      	strb	r3, [r2, #0]
 80105fa:	e7f3      	b.n	80105e4 <CRC_Handle_8+0x38>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80105fc:	00ab      	lsls	r3, r5, #2
 80105fe:	5cca      	ldrb	r2, [r1, r3]
 8010600:	0212      	lsls	r2, r2, #8
 8010602:	18cb      	adds	r3, r1, r3
 8010604:	785b      	ldrb	r3, [r3, #1]
 8010606:	4313      	orrs	r3, r2
 8010608:	6802      	ldr	r2, [r0, #0]
 801060a:	8013      	strh	r3, [r2, #0]
 801060c:	e7ec      	b.n	80105e8 <CRC_Handle_8+0x3c>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 801060e:	00ad      	lsls	r5, r5, #2
 8010610:	5d4a      	ldrb	r2, [r1, r5]
 8010612:	0212      	lsls	r2, r2, #8
 8010614:	194d      	adds	r5, r1, r5
 8010616:	786b      	ldrb	r3, [r5, #1]
 8010618:	4313      	orrs	r3, r2
 801061a:	6802      	ldr	r2, [r0, #0]
 801061c:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 801061e:	78ab      	ldrb	r3, [r5, #2]
 8010620:	6802      	ldr	r2, [r0, #0]
 8010622:	7013      	strb	r3, [r2, #0]
 8010624:	e7e2      	b.n	80105ec <CRC_Handle_8+0x40>

08010626 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010626:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8010628:	2500      	movs	r5, #0
 801062a:	e008      	b.n	801063e <CRC_Handle_16+0x18>
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 801062c:	00ac      	lsls	r4, r5, #2
 801062e:	5b0b      	ldrh	r3, [r1, r4]
 8010630:	041b      	lsls	r3, r3, #16
 8010632:	190c      	adds	r4, r1, r4
 8010634:	8866      	ldrh	r6, [r4, #2]
 8010636:	6804      	ldr	r4, [r0, #0]
 8010638:	4333      	orrs	r3, r6
 801063a:	6023      	str	r3, [r4, #0]
  for(i = 0; i < (BufferLength/2); i++)
 801063c:	3501      	adds	r5, #1
 801063e:	0853      	lsrs	r3, r2, #1
 8010640:	42ab      	cmp	r3, r5
 8010642:	d8f3      	bhi.n	801062c <CRC_Handle_16+0x6>
  }
  if ((BufferLength%2) != 0)
 8010644:	07d3      	lsls	r3, r2, #31
 8010646:	d503      	bpl.n	8010650 <CRC_Handle_16+0x2a>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8010648:	00ad      	lsls	r5, r5, #2
 801064a:	5a6b      	ldrh	r3, [r5, r1]
 801064c:	6802      	ldr	r2, [r0, #0]
 801064e:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010650:	6803      	ldr	r3, [r0, #0]
 8010652:	6818      	ldr	r0, [r3, #0]
}
 8010654:	bd70      	pop	{r4, r5, r6, pc}

08010656 <HAL_CRC_Init>:
{
 8010656:	b510      	push	{r4, lr}
 8010658:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 801065a:	d029      	beq.n	80106b0 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 801065c:	7f43      	ldrb	r3, [r0, #29]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d01e      	beq.n	80106a0 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010662:	2302      	movs	r3, #2
 8010664:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010666:	0020      	movs	r0, r4
 8010668:	f000 f8a8 	bl	80107bc <HAL_CRCEx_Init>
 801066c:	2800      	cmp	r0, #0
 801066e:	d121      	bne.n	80106b4 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8010670:	7963      	ldrb	r3, [r4, #5]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d118      	bne.n	80106a8 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8010676:	6823      	ldr	r3, [r4, #0]
 8010678:	2201      	movs	r2, #1
 801067a:	4252      	negs	r2, r2
 801067c:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 801067e:	6822      	ldr	r2, [r4, #0]
 8010680:	6893      	ldr	r3, [r2, #8]
 8010682:	2160      	movs	r1, #96	; 0x60
 8010684:	438b      	bics	r3, r1
 8010686:	6961      	ldr	r1, [r4, #20]
 8010688:	430b      	orrs	r3, r1
 801068a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 801068c:	6822      	ldr	r2, [r4, #0]
 801068e:	6893      	ldr	r3, [r2, #8]
 8010690:	2180      	movs	r1, #128	; 0x80
 8010692:	438b      	bics	r3, r1
 8010694:	69a1      	ldr	r1, [r4, #24]
 8010696:	430b      	orrs	r3, r1
 8010698:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 801069a:	2301      	movs	r3, #1
 801069c:	7763      	strb	r3, [r4, #29]
}
 801069e:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80106a0:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80106a2:	f7fb f879 	bl	800b798 <HAL_CRC_MspInit>
 80106a6:	e7dc      	b.n	8010662 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80106a8:	6823      	ldr	r3, [r4, #0]
 80106aa:	6922      	ldr	r2, [r4, #16]
 80106ac:	611a      	str	r2, [r3, #16]
 80106ae:	e7e6      	b.n	801067e <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 80106b0:	2001      	movs	r0, #1
 80106b2:	e7f4      	b.n	801069e <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 80106b4:	2001      	movs	r0, #1
 80106b6:	e7f2      	b.n	801069e <HAL_CRC_Init+0x48>

080106b8 <HAL_CRC_Accumulate>:
{
 80106b8:	b570      	push	{r4, r5, r6, lr}
 80106ba:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80106bc:	7f03      	ldrb	r3, [r0, #28]
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d022      	beq.n	8010708 <HAL_CRC_Accumulate+0x50>
 80106c2:	2301      	movs	r3, #1
 80106c4:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80106c6:	3301      	adds	r3, #1
 80106c8:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 80106ca:	6a03      	ldr	r3, [r0, #32]
 80106cc:	2b02      	cmp	r3, #2
 80106ce:	d018      	beq.n	8010702 <HAL_CRC_Accumulate+0x4a>
 80106d0:	2b03      	cmp	r3, #3
 80106d2:	d011      	beq.n	80106f8 <HAL_CRC_Accumulate+0x40>
 80106d4:	2b01      	cmp	r3, #1
 80106d6:	d011      	beq.n	80106fc <HAL_CRC_Accumulate+0x44>
 80106d8:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 80106da:	2301      	movs	r3, #1
 80106dc:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80106de:	2300      	movs	r3, #0
 80106e0:	7723      	strb	r3, [r4, #28]
}
 80106e2:	bd70      	pop	{r4, r5, r6, pc}
        hcrc->Instance->DR = pBuffer[index];
 80106e4:	6820      	ldr	r0, [r4, #0]
 80106e6:	009d      	lsls	r5, r3, #2
 80106e8:	586d      	ldr	r5, [r5, r1]
 80106ea:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 80106ec:	3301      	adds	r3, #1
 80106ee:	4293      	cmp	r3, r2
 80106f0:	d3f8      	bcc.n	80106e4 <HAL_CRC_Accumulate+0x2c>
      temp = hcrc->Instance->DR;
 80106f2:	6823      	ldr	r3, [r4, #0]
 80106f4:	6818      	ldr	r0, [r3, #0]
      break;
 80106f6:	e7f0      	b.n	80106da <HAL_CRC_Accumulate+0x22>
  switch (hcrc->InputDataFormat)
 80106f8:	2300      	movs	r3, #0
 80106fa:	e7f8      	b.n	80106ee <HAL_CRC_Accumulate+0x36>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80106fc:	f7ff ff56 	bl	80105ac <CRC_Handle_8>
      break;
 8010700:	e7eb      	b.n	80106da <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010702:	f7ff ff90 	bl	8010626 <CRC_Handle_16>
      break;
 8010706:	e7e8      	b.n	80106da <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 8010708:	2002      	movs	r0, #2
 801070a:	e7ea      	b.n	80106e2 <HAL_CRC_Accumulate+0x2a>

0801070c <HAL_CRC_Calculate>:
{
 801070c:	b570      	push	{r4, r5, r6, lr}
 801070e:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010710:	7f03      	ldrb	r3, [r0, #28]
 8010712:	2b01      	cmp	r3, #1
 8010714:	d028      	beq.n	8010768 <HAL_CRC_Calculate+0x5c>
 8010716:	2501      	movs	r5, #1
 8010718:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 801071a:	2302      	movs	r3, #2
 801071c:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 801071e:	6800      	ldr	r0, [r0, #0]
 8010720:	6883      	ldr	r3, [r0, #8]
 8010722:	432b      	orrs	r3, r5
 8010724:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8010726:	6a23      	ldr	r3, [r4, #32]
 8010728:	2b02      	cmp	r3, #2
 801072a:	d019      	beq.n	8010760 <HAL_CRC_Calculate+0x54>
 801072c:	2b03      	cmp	r3, #3
 801072e:	d011      	beq.n	8010754 <HAL_CRC_Calculate+0x48>
 8010730:	2b01      	cmp	r3, #1
 8010732:	d011      	beq.n	8010758 <HAL_CRC_Calculate+0x4c>
 8010734:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 8010736:	2301      	movs	r3, #1
 8010738:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 801073a:	2300      	movs	r3, #0
 801073c:	7723      	strb	r3, [r4, #28]
}
 801073e:	bd70      	pop	{r4, r5, r6, pc}
        hcrc->Instance->DR = pBuffer[index];
 8010740:	6820      	ldr	r0, [r4, #0]
 8010742:	009d      	lsls	r5, r3, #2
 8010744:	586d      	ldr	r5, [r5, r1]
 8010746:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010748:	3301      	adds	r3, #1
 801074a:	4293      	cmp	r3, r2
 801074c:	d3f8      	bcc.n	8010740 <HAL_CRC_Calculate+0x34>
      temp = hcrc->Instance->DR;
 801074e:	6823      	ldr	r3, [r4, #0]
 8010750:	6818      	ldr	r0, [r3, #0]
      break;
 8010752:	e7f0      	b.n	8010736 <HAL_CRC_Calculate+0x2a>
  switch (hcrc->InputDataFormat)
 8010754:	2300      	movs	r3, #0
 8010756:	e7f8      	b.n	801074a <HAL_CRC_Calculate+0x3e>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010758:	0020      	movs	r0, r4
 801075a:	f7ff ff27 	bl	80105ac <CRC_Handle_8>
      break;
 801075e:	e7ea      	b.n	8010736 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010760:	0020      	movs	r0, r4
 8010762:	f7ff ff60 	bl	8010626 <CRC_Handle_16>
      break;
 8010766:	e7e6      	b.n	8010736 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8010768:	2002      	movs	r0, #2
 801076a:	e7e8      	b.n	801073e <HAL_CRC_Calculate+0x32>

0801076c <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 801076c:	b510      	push	{r4, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 801076e:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010770:	e000      	b.n	8010774 <HAL_CRCEx_Polynomial_Set+0x8>
 8010772:	001c      	movs	r4, r3
 8010774:	2301      	movs	r3, #1
 8010776:	40a3      	lsls	r3, r4
 8010778:	4219      	tst	r1, r3
 801077a:	d103      	bne.n	8010784 <HAL_CRCEx_Polynomial_Set+0x18>
 801077c:	1e63      	subs	r3, r4, #1
 801077e:	2c00      	cmp	r4, #0
 8010780:	d1f7      	bne.n	8010772 <HAL_CRCEx_Polynomial_Set+0x6>
 8010782:	001c      	movs	r4, r3
  {}

  switch (PolyLength)
 8010784:	2a10      	cmp	r2, #16
 8010786:	d011      	beq.n	80107ac <HAL_CRCEx_Polynomial_Set+0x40>
 8010788:	2a18      	cmp	r2, #24
 801078a:	d00b      	beq.n	80107a4 <HAL_CRCEx_Polynomial_Set+0x38>
 801078c:	2a08      	cmp	r2, #8
 801078e:	d011      	beq.n	80107b4 <HAL_CRCEx_Polynomial_Set+0x48>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010790:	6803      	ldr	r3, [r0, #0]
 8010792:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010794:	6801      	ldr	r1, [r0, #0]
 8010796:	688b      	ldr	r3, [r1, #8]
 8010798:	2018      	movs	r0, #24
 801079a:	4383      	bics	r3, r0
 801079c:	431a      	orrs	r2, r3
 801079e:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 80107a0:	2000      	movs	r0, #0
}
 80107a2:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 80107a4:	2c06      	cmp	r4, #6
 80107a6:	d9f3      	bls.n	8010790 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 80107a8:	2001      	movs	r0, #1
 80107aa:	e7fa      	b.n	80107a2 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_8B)
 80107ac:	2c07      	cmp	r4, #7
 80107ae:	d9ef      	bls.n	8010790 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 80107b0:	2001      	movs	r0, #1
 80107b2:	e7f6      	b.n	80107a2 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_16B)
 80107b4:	2c0f      	cmp	r4, #15
 80107b6:	d9eb      	bls.n	8010790 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 80107b8:	2001      	movs	r0, #1
 80107ba:	e7f2      	b.n	80107a2 <HAL_CRCEx_Polynomial_Set+0x36>

080107bc <HAL_CRCEx_Init>:
{
 80107bc:	b510      	push	{r4, lr}
 80107be:	0003      	movs	r3, r0
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80107c0:	7900      	ldrb	r0, [r0, #4]
 80107c2:	2800      	cmp	r0, #0
 80107c4:	d108      	bne.n	80107d8 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80107c6:	681a      	ldr	r2, [r3, #0]
 80107c8:	4908      	ldr	r1, [pc, #32]	; (80107ec <HAL_CRCEx_Init+0x30>)
 80107ca:	6151      	str	r1, [r2, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80107cc:	681a      	ldr	r2, [r3, #0]
 80107ce:	6893      	ldr	r3, [r2, #8]
 80107d0:	2118      	movs	r1, #24
 80107d2:	438b      	bics	r3, r1
 80107d4:	6093      	str	r3, [r2, #8]
}
 80107d6:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80107d8:	68da      	ldr	r2, [r3, #12]
 80107da:	6899      	ldr	r1, [r3, #8]
 80107dc:	0018      	movs	r0, r3
 80107de:	f7ff ffc5 	bl	801076c <HAL_CRCEx_Polynomial_Set>
 80107e2:	2800      	cmp	r0, #0
 80107e4:	d0f7      	beq.n	80107d6 <HAL_CRCEx_Init+0x1a>
      return HAL_ERROR;
 80107e6:	2001      	movs	r0, #1
 80107e8:	e7f5      	b.n	80107d6 <HAL_CRCEx_Init+0x1a>
 80107ea:	46c0      	nop			; (mov r8, r8)
 80107ec:	04c11db7 	.word	0x04c11db7

080107f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80107f0:	b510      	push	{r4, lr}
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80107f2:	6804      	ldr	r4, [r0, #0]
 80107f4:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80107f6:	6843      	ldr	r3, [r0, #4]
 80107f8:	2b10      	cmp	r3, #16
 80107fa:	d004      	beq.n	8010806 <DMA_SetConfig+0x16>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80107fc:	6803      	ldr	r3, [r0, #0]
 80107fe:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010800:	6803      	ldr	r3, [r0, #0]
 8010802:	60da      	str	r2, [r3, #12]
  }
}
 8010804:	bd10      	pop	{r4, pc}
    hdma->Instance->CPAR = DstAddress;
 8010806:	6803      	ldr	r3, [r0, #0]
 8010808:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 801080a:	6803      	ldr	r3, [r0, #0]
 801080c:	60d9      	str	r1, [r3, #12]
 801080e:	e7f9      	b.n	8010804 <DMA_SetConfig+0x14>

08010810 <HAL_DMA_Init>:
{ 
 8010810:	b530      	push	{r4, r5, lr}
  if(hdma == NULL)
 8010812:	2800      	cmp	r0, #0
 8010814:	d022      	beq.n	801085c <HAL_DMA_Init+0x4c>
  if(hdma->State == HAL_DMA_STATE_RESET)
 8010816:	2321      	movs	r3, #33	; 0x21
 8010818:	5cc3      	ldrb	r3, [r0, r3]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d102      	bne.n	8010824 <HAL_DMA_Init+0x14>
    hdma->Lock = HAL_UNLOCKED;
 801081e:	3320      	adds	r3, #32
 8010820:	2200      	movs	r2, #0
 8010822:	54c2      	strb	r2, [r0, r3]
  hdma->State = HAL_DMA_STATE_BUSY;
 8010824:	2121      	movs	r1, #33	; 0x21
 8010826:	2302      	movs	r3, #2
 8010828:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 801082a:	6804      	ldr	r4, [r0, #0]
 801082c:	6823      	ldr	r3, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 801082e:	4a0c      	ldr	r2, [pc, #48]	; (8010860 <HAL_DMA_Init+0x50>)
 8010830:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8010832:	6843      	ldr	r3, [r0, #4]
 8010834:	6885      	ldr	r5, [r0, #8]
 8010836:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010838:	68c5      	ldr	r5, [r0, #12]
 801083a:	432b      	orrs	r3, r5
 801083c:	6905      	ldr	r5, [r0, #16]
 801083e:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010840:	6945      	ldr	r5, [r0, #20]
 8010842:	432b      	orrs	r3, r5
 8010844:	6985      	ldr	r5, [r0, #24]
 8010846:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010848:	69c5      	ldr	r5, [r0, #28]
 801084a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 801084c:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 801084e:	6023      	str	r3, [r4, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010850:	2300      	movs	r3, #0
 8010852:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->State  = HAL_DMA_STATE_READY;
 8010854:	3301      	adds	r3, #1
 8010856:	5443      	strb	r3, [r0, r1]
  return HAL_OK;
 8010858:	2000      	movs	r0, #0
}  
 801085a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 801085c:	2001      	movs	r0, #1
 801085e:	e7fc      	b.n	801085a <HAL_DMA_Init+0x4a>
 8010860:	ffffc00f 	.word	0xffffc00f

08010864 <HAL_DMA_Start_IT>:
{
 8010864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010866:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8010868:	2020      	movs	r0, #32
 801086a:	5c20      	ldrb	r0, [r4, r0]
 801086c:	2801      	cmp	r0, #1
 801086e:	d020      	beq.n	80108b2 <HAL_DMA_Start_IT+0x4e>
 8010870:	2501      	movs	r5, #1
 8010872:	2020      	movs	r0, #32
 8010874:	5425      	strb	r5, [r4, r0]
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010876:	2602      	movs	r6, #2
 8010878:	3001      	adds	r0, #1
 801087a:	5426      	strb	r6, [r4, r0]
  __HAL_DMA_DISABLE(hdma);
 801087c:	6827      	ldr	r7, [r4, #0]
 801087e:	6838      	ldr	r0, [r7, #0]
 8010880:	43a8      	bics	r0, r5
 8010882:	6038      	str	r0, [r7, #0]
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010884:	0020      	movs	r0, r4
 8010886:	f7ff ffb3 	bl	80107f0 <DMA_SetConfig>
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 801088a:	6822      	ldr	r2, [r4, #0]
 801088c:	6813      	ldr	r3, [r2, #0]
 801088e:	4333      	orrs	r3, r6
 8010890:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8010892:	6822      	ldr	r2, [r4, #0]
 8010894:	6813      	ldr	r3, [r2, #0]
 8010896:	2104      	movs	r1, #4
 8010898:	430b      	orrs	r3, r1
 801089a:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 801089c:	6822      	ldr	r2, [r4, #0]
 801089e:	6813      	ldr	r3, [r2, #0]
 80108a0:	3104      	adds	r1, #4
 80108a2:	430b      	orrs	r3, r1
 80108a4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 80108a6:	6822      	ldr	r2, [r4, #0]
 80108a8:	6813      	ldr	r3, [r2, #0]
 80108aa:	432b      	orrs	r3, r5
 80108ac:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 80108ae:	2000      	movs	r0, #0
} 
 80108b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 80108b2:	2002      	movs	r0, #2
 80108b4:	e7fc      	b.n	80108b0 <HAL_DMA_Start_IT+0x4c>

080108b6 <HAL_DMA_Abort>:
{
 80108b6:	b570      	push	{r4, r5, r6, lr}
 80108b8:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80108ba:	6802      	ldr	r2, [r0, #0]
 80108bc:	6813      	ldr	r3, [r2, #0]
 80108be:	2101      	movs	r1, #1
 80108c0:	438b      	bics	r3, r1
 80108c2:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80108c4:	f7ff fb0e 	bl	800fee4 <HAL_GetTick>
 80108c8:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80108ca:	6823      	ldr	r3, [r4, #0]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	07db      	lsls	r3, r3, #31
 80108d0:	d511      	bpl.n	80108f6 <HAL_DMA_Abort+0x40>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80108d2:	f7ff fb07 	bl	800fee4 <HAL_GetTick>
 80108d6:	1b40      	subs	r0, r0, r5
 80108d8:	23fa      	movs	r3, #250	; 0xfa
 80108da:	009b      	lsls	r3, r3, #2
 80108dc:	4298      	cmp	r0, r3
 80108de:	d9f4      	bls.n	80108ca <HAL_DMA_Abort+0x14>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80108e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108e2:	2220      	movs	r2, #32
 80108e4:	4313      	orrs	r3, r2
 80108e6:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80108e8:	2321      	movs	r3, #33	; 0x21
 80108ea:	2103      	movs	r1, #3
 80108ec:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 80108ee:	2300      	movs	r3, #0
 80108f0:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 80108f2:	2003      	movs	r0, #3
 80108f4:	e006      	b.n	8010904 <HAL_DMA_Abort+0x4e>
  hdma->State = HAL_DMA_STATE_READY; 
 80108f6:	2321      	movs	r3, #33	; 0x21
 80108f8:	2201      	movs	r2, #1
 80108fa:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 80108fc:	3b01      	subs	r3, #1
 80108fe:	2200      	movs	r2, #0
 8010900:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8010902:	2000      	movs	r0, #0
}
 8010904:	bd70      	pop	{r4, r5, r6, pc}
	...

08010908 <HAL_DMA_IRQHandler>:
{        
 8010908:	b510      	push	{r4, lr}
 801090a:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801090c:	6802      	ldr	r2, [r0, #0]
 801090e:	4bb6      	ldr	r3, [pc, #728]	; (8010be8 <HAL_DMA_IRQHandler+0x2e0>)
 8010910:	429a      	cmp	r2, r3
 8010912:	d800      	bhi.n	8010916 <HAL_DMA_IRQHandler+0xe>
 8010914:	e083      	b.n	8010a1e <HAL_DMA_IRQHandler+0x116>
 8010916:	4bb5      	ldr	r3, [pc, #724]	; (8010bec <HAL_DMA_IRQHandler+0x2e4>)
 8010918:	6819      	ldr	r1, [r3, #0]
 801091a:	4bb5      	ldr	r3, [pc, #724]	; (8010bf0 <HAL_DMA_IRQHandler+0x2e8>)
 801091c:	429a      	cmp	r2, r3
 801091e:	d023      	beq.n	8010968 <HAL_DMA_IRQHandler+0x60>
 8010920:	4bb4      	ldr	r3, [pc, #720]	; (8010bf4 <HAL_DMA_IRQHandler+0x2ec>)
 8010922:	429a      	cmp	r2, r3
 8010924:	d063      	beq.n	80109ee <HAL_DMA_IRQHandler+0xe6>
 8010926:	4bb4      	ldr	r3, [pc, #720]	; (8010bf8 <HAL_DMA_IRQHandler+0x2f0>)
 8010928:	429a      	cmp	r2, r3
 801092a:	d062      	beq.n	80109f2 <HAL_DMA_IRQHandler+0xea>
 801092c:	4bb3      	ldr	r3, [pc, #716]	; (8010bfc <HAL_DMA_IRQHandler+0x2f4>)
 801092e:	429a      	cmp	r2, r3
 8010930:	d062      	beq.n	80109f8 <HAL_DMA_IRQHandler+0xf0>
 8010932:	4bb3      	ldr	r3, [pc, #716]	; (8010c00 <HAL_DMA_IRQHandler+0x2f8>)
 8010934:	429a      	cmp	r2, r3
 8010936:	d062      	beq.n	80109fe <HAL_DMA_IRQHandler+0xf6>
 8010938:	4bb2      	ldr	r3, [pc, #712]	; (8010c04 <HAL_DMA_IRQHandler+0x2fc>)
 801093a:	429a      	cmp	r2, r3
 801093c:	d062      	beq.n	8010a04 <HAL_DMA_IRQHandler+0xfc>
 801093e:	4baa      	ldr	r3, [pc, #680]	; (8010be8 <HAL_DMA_IRQHandler+0x2e0>)
 8010940:	429a      	cmp	r2, r3
 8010942:	d062      	beq.n	8010a0a <HAL_DMA_IRQHandler+0x102>
 8010944:	4bb0      	ldr	r3, [pc, #704]	; (8010c08 <HAL_DMA_IRQHandler+0x300>)
 8010946:	429a      	cmp	r2, r3
 8010948:	d062      	beq.n	8010a10 <HAL_DMA_IRQHandler+0x108>
 801094a:	4bb0      	ldr	r3, [pc, #704]	; (8010c0c <HAL_DMA_IRQHandler+0x304>)
 801094c:	429a      	cmp	r2, r3
 801094e:	d061      	beq.n	8010a14 <HAL_DMA_IRQHandler+0x10c>
 8010950:	4baf      	ldr	r3, [pc, #700]	; (8010c10 <HAL_DMA_IRQHandler+0x308>)
 8010952:	429a      	cmp	r2, r3
 8010954:	d060      	beq.n	8010a18 <HAL_DMA_IRQHandler+0x110>
 8010956:	4baf      	ldr	r3, [pc, #700]	; (8010c14 <HAL_DMA_IRQHandler+0x30c>)
 8010958:	429a      	cmp	r2, r3
 801095a:	d002      	beq.n	8010962 <HAL_DMA_IRQHandler+0x5a>
 801095c:	2380      	movs	r3, #128	; 0x80
 801095e:	031b      	lsls	r3, r3, #12
 8010960:	e003      	b.n	801096a <HAL_DMA_IRQHandler+0x62>
 8010962:	2380      	movs	r3, #128	; 0x80
 8010964:	021b      	lsls	r3, r3, #8
 8010966:	e000      	b.n	801096a <HAL_DMA_IRQHandler+0x62>
 8010968:	2308      	movs	r3, #8
 801096a:	400b      	ands	r3, r1
 801096c:	1e59      	subs	r1, r3, #1
 801096e:	418b      	sbcs	r3, r1
 8010970:	b2db      	uxtb	r3, r3
 8010972:	2b00      	cmp	r3, #0
 8010974:	d100      	bne.n	8010978 <HAL_DMA_IRQHandler+0x70>
 8010976:	e0ae      	b.n	8010ad6 <HAL_DMA_IRQHandler+0x1ce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010978:	6813      	ldr	r3, [r2, #0]
 801097a:	071b      	lsls	r3, r3, #28
 801097c:	d400      	bmi.n	8010980 <HAL_DMA_IRQHandler+0x78>
 801097e:	e0aa      	b.n	8010ad6 <HAL_DMA_IRQHandler+0x1ce>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010980:	6813      	ldr	r3, [r2, #0]
 8010982:	2108      	movs	r1, #8
 8010984:	438b      	bics	r3, r1
 8010986:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010988:	6823      	ldr	r3, [r4, #0]
 801098a:	4a97      	ldr	r2, [pc, #604]	; (8010be8 <HAL_DMA_IRQHandler+0x2e0>)
 801098c:	4293      	cmp	r3, r2
 801098e:	d800      	bhi.n	8010992 <HAL_DMA_IRQHandler+0x8a>
 8010990:	e0ee      	b.n	8010b70 <HAL_DMA_IRQHandler+0x268>
 8010992:	4a97      	ldr	r2, [pc, #604]	; (8010bf0 <HAL_DMA_IRQHandler+0x2e8>)
 8010994:	4293      	cmp	r3, r2
 8010996:	d100      	bne.n	801099a <HAL_DMA_IRQHandler+0x92>
 8010998:	e08b      	b.n	8010ab2 <HAL_DMA_IRQHandler+0x1aa>
 801099a:	4a96      	ldr	r2, [pc, #600]	; (8010bf4 <HAL_DMA_IRQHandler+0x2ec>)
 801099c:	4293      	cmp	r3, r2
 801099e:	d100      	bne.n	80109a2 <HAL_DMA_IRQHandler+0x9a>
 80109a0:	e0ce      	b.n	8010b40 <HAL_DMA_IRQHandler+0x238>
 80109a2:	4a95      	ldr	r2, [pc, #596]	; (8010bf8 <HAL_DMA_IRQHandler+0x2f0>)
 80109a4:	4293      	cmp	r3, r2
 80109a6:	d100      	bne.n	80109aa <HAL_DMA_IRQHandler+0xa2>
 80109a8:	e0cc      	b.n	8010b44 <HAL_DMA_IRQHandler+0x23c>
 80109aa:	4a94      	ldr	r2, [pc, #592]	; (8010bfc <HAL_DMA_IRQHandler+0x2f4>)
 80109ac:	4293      	cmp	r3, r2
 80109ae:	d100      	bne.n	80109b2 <HAL_DMA_IRQHandler+0xaa>
 80109b0:	e0cb      	b.n	8010b4a <HAL_DMA_IRQHandler+0x242>
 80109b2:	4a93      	ldr	r2, [pc, #588]	; (8010c00 <HAL_DMA_IRQHandler+0x2f8>)
 80109b4:	4293      	cmp	r3, r2
 80109b6:	d100      	bne.n	80109ba <HAL_DMA_IRQHandler+0xb2>
 80109b8:	e0ca      	b.n	8010b50 <HAL_DMA_IRQHandler+0x248>
 80109ba:	4a92      	ldr	r2, [pc, #584]	; (8010c04 <HAL_DMA_IRQHandler+0x2fc>)
 80109bc:	4293      	cmp	r3, r2
 80109be:	d100      	bne.n	80109c2 <HAL_DMA_IRQHandler+0xba>
 80109c0:	e0c9      	b.n	8010b56 <HAL_DMA_IRQHandler+0x24e>
 80109c2:	4a89      	ldr	r2, [pc, #548]	; (8010be8 <HAL_DMA_IRQHandler+0x2e0>)
 80109c4:	4293      	cmp	r3, r2
 80109c6:	d100      	bne.n	80109ca <HAL_DMA_IRQHandler+0xc2>
 80109c8:	e0c8      	b.n	8010b5c <HAL_DMA_IRQHandler+0x254>
 80109ca:	4a8f      	ldr	r2, [pc, #572]	; (8010c08 <HAL_DMA_IRQHandler+0x300>)
 80109cc:	4293      	cmp	r3, r2
 80109ce:	d100      	bne.n	80109d2 <HAL_DMA_IRQHandler+0xca>
 80109d0:	e0c7      	b.n	8010b62 <HAL_DMA_IRQHandler+0x25a>
 80109d2:	4a8e      	ldr	r2, [pc, #568]	; (8010c0c <HAL_DMA_IRQHandler+0x304>)
 80109d4:	4293      	cmp	r3, r2
 80109d6:	d100      	bne.n	80109da <HAL_DMA_IRQHandler+0xd2>
 80109d8:	e0c5      	b.n	8010b66 <HAL_DMA_IRQHandler+0x25e>
 80109da:	4a8d      	ldr	r2, [pc, #564]	; (8010c10 <HAL_DMA_IRQHandler+0x308>)
 80109dc:	4293      	cmp	r3, r2
 80109de:	d100      	bne.n	80109e2 <HAL_DMA_IRQHandler+0xda>
 80109e0:	e0c3      	b.n	8010b6a <HAL_DMA_IRQHandler+0x262>
 80109e2:	4a8c      	ldr	r2, [pc, #560]	; (8010c14 <HAL_DMA_IRQHandler+0x30c>)
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d061      	beq.n	8010aac <HAL_DMA_IRQHandler+0x1a4>
 80109e8:	2280      	movs	r2, #128	; 0x80
 80109ea:	0312      	lsls	r2, r2, #12
 80109ec:	e062      	b.n	8010ab4 <HAL_DMA_IRQHandler+0x1ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80109ee:	2380      	movs	r3, #128	; 0x80
 80109f0:	e7bb      	b.n	801096a <HAL_DMA_IRQHandler+0x62>
 80109f2:	2380      	movs	r3, #128	; 0x80
 80109f4:	011b      	lsls	r3, r3, #4
 80109f6:	e7b8      	b.n	801096a <HAL_DMA_IRQHandler+0x62>
 80109f8:	2380      	movs	r3, #128	; 0x80
 80109fa:	021b      	lsls	r3, r3, #8
 80109fc:	e7b5      	b.n	801096a <HAL_DMA_IRQHandler+0x62>
 80109fe:	2380      	movs	r3, #128	; 0x80
 8010a00:	031b      	lsls	r3, r3, #12
 8010a02:	e7b2      	b.n	801096a <HAL_DMA_IRQHandler+0x62>
 8010a04:	2380      	movs	r3, #128	; 0x80
 8010a06:	041b      	lsls	r3, r3, #16
 8010a08:	e7af      	b.n	801096a <HAL_DMA_IRQHandler+0x62>
 8010a0a:	2380      	movs	r3, #128	; 0x80
 8010a0c:	051b      	lsls	r3, r3, #20
 8010a0e:	e7ac      	b.n	801096a <HAL_DMA_IRQHandler+0x62>
 8010a10:	2308      	movs	r3, #8
 8010a12:	e7aa      	b.n	801096a <HAL_DMA_IRQHandler+0x62>
 8010a14:	2380      	movs	r3, #128	; 0x80
 8010a16:	e7a8      	b.n	801096a <HAL_DMA_IRQHandler+0x62>
 8010a18:	2380      	movs	r3, #128	; 0x80
 8010a1a:	011b      	lsls	r3, r3, #4
 8010a1c:	e7a5      	b.n	801096a <HAL_DMA_IRQHandler+0x62>
 8010a1e:	4b7e      	ldr	r3, [pc, #504]	; (8010c18 <HAL_DMA_IRQHandler+0x310>)
 8010a20:	6819      	ldr	r1, [r3, #0]
 8010a22:	4b73      	ldr	r3, [pc, #460]	; (8010bf0 <HAL_DMA_IRQHandler+0x2e8>)
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d023      	beq.n	8010a70 <HAL_DMA_IRQHandler+0x168>
 8010a28:	4b72      	ldr	r3, [pc, #456]	; (8010bf4 <HAL_DMA_IRQHandler+0x2ec>)
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d026      	beq.n	8010a7c <HAL_DMA_IRQHandler+0x174>
 8010a2e:	4b72      	ldr	r3, [pc, #456]	; (8010bf8 <HAL_DMA_IRQHandler+0x2f0>)
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d025      	beq.n	8010a80 <HAL_DMA_IRQHandler+0x178>
 8010a34:	4b71      	ldr	r3, [pc, #452]	; (8010bfc <HAL_DMA_IRQHandler+0x2f4>)
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d025      	beq.n	8010a86 <HAL_DMA_IRQHandler+0x17e>
 8010a3a:	4b71      	ldr	r3, [pc, #452]	; (8010c00 <HAL_DMA_IRQHandler+0x2f8>)
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d025      	beq.n	8010a8c <HAL_DMA_IRQHandler+0x184>
 8010a40:	4b70      	ldr	r3, [pc, #448]	; (8010c04 <HAL_DMA_IRQHandler+0x2fc>)
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d025      	beq.n	8010a92 <HAL_DMA_IRQHandler+0x18a>
 8010a46:	4b68      	ldr	r3, [pc, #416]	; (8010be8 <HAL_DMA_IRQHandler+0x2e0>)
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d025      	beq.n	8010a98 <HAL_DMA_IRQHandler+0x190>
 8010a4c:	4b6e      	ldr	r3, [pc, #440]	; (8010c08 <HAL_DMA_IRQHandler+0x300>)
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d025      	beq.n	8010a9e <HAL_DMA_IRQHandler+0x196>
 8010a52:	4b6e      	ldr	r3, [pc, #440]	; (8010c0c <HAL_DMA_IRQHandler+0x304>)
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d024      	beq.n	8010aa2 <HAL_DMA_IRQHandler+0x19a>
 8010a58:	4b6d      	ldr	r3, [pc, #436]	; (8010c10 <HAL_DMA_IRQHandler+0x308>)
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d023      	beq.n	8010aa6 <HAL_DMA_IRQHandler+0x19e>
 8010a5e:	4b6d      	ldr	r3, [pc, #436]	; (8010c14 <HAL_DMA_IRQHandler+0x30c>)
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d002      	beq.n	8010a6a <HAL_DMA_IRQHandler+0x162>
 8010a64:	2380      	movs	r3, #128	; 0x80
 8010a66:	031b      	lsls	r3, r3, #12
 8010a68:	e003      	b.n	8010a72 <HAL_DMA_IRQHandler+0x16a>
 8010a6a:	2380      	movs	r3, #128	; 0x80
 8010a6c:	021b      	lsls	r3, r3, #8
 8010a6e:	e000      	b.n	8010a72 <HAL_DMA_IRQHandler+0x16a>
 8010a70:	2308      	movs	r3, #8
 8010a72:	400b      	ands	r3, r1
 8010a74:	1e59      	subs	r1, r3, #1
 8010a76:	418b      	sbcs	r3, r1
 8010a78:	b2db      	uxtb	r3, r3
 8010a7a:	e77a      	b.n	8010972 <HAL_DMA_IRQHandler+0x6a>
 8010a7c:	2380      	movs	r3, #128	; 0x80
 8010a7e:	e7f8      	b.n	8010a72 <HAL_DMA_IRQHandler+0x16a>
 8010a80:	2380      	movs	r3, #128	; 0x80
 8010a82:	011b      	lsls	r3, r3, #4
 8010a84:	e7f5      	b.n	8010a72 <HAL_DMA_IRQHandler+0x16a>
 8010a86:	2380      	movs	r3, #128	; 0x80
 8010a88:	021b      	lsls	r3, r3, #8
 8010a8a:	e7f2      	b.n	8010a72 <HAL_DMA_IRQHandler+0x16a>
 8010a8c:	2380      	movs	r3, #128	; 0x80
 8010a8e:	031b      	lsls	r3, r3, #12
 8010a90:	e7ef      	b.n	8010a72 <HAL_DMA_IRQHandler+0x16a>
 8010a92:	2380      	movs	r3, #128	; 0x80
 8010a94:	041b      	lsls	r3, r3, #16
 8010a96:	e7ec      	b.n	8010a72 <HAL_DMA_IRQHandler+0x16a>
 8010a98:	2380      	movs	r3, #128	; 0x80
 8010a9a:	051b      	lsls	r3, r3, #20
 8010a9c:	e7e9      	b.n	8010a72 <HAL_DMA_IRQHandler+0x16a>
 8010a9e:	2308      	movs	r3, #8
 8010aa0:	e7e7      	b.n	8010a72 <HAL_DMA_IRQHandler+0x16a>
 8010aa2:	2380      	movs	r3, #128	; 0x80
 8010aa4:	e7e5      	b.n	8010a72 <HAL_DMA_IRQHandler+0x16a>
 8010aa6:	2380      	movs	r3, #128	; 0x80
 8010aa8:	011b      	lsls	r3, r3, #4
 8010aaa:	e7e2      	b.n	8010a72 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010aac:	2280      	movs	r2, #128	; 0x80
 8010aae:	0212      	lsls	r2, r2, #8
 8010ab0:	e000      	b.n	8010ab4 <HAL_DMA_IRQHandler+0x1ac>
 8010ab2:	2208      	movs	r2, #8
 8010ab4:	4b4d      	ldr	r3, [pc, #308]	; (8010bec <HAL_DMA_IRQHandler+0x2e4>)
 8010ab6:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010ab8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010aba:	2201      	movs	r2, #1
 8010abc:	4313      	orrs	r3, r2
 8010abe:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010ac0:	2321      	movs	r3, #33	; 0x21
 8010ac2:	3203      	adds	r2, #3
 8010ac4:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8010ac6:	3b01      	subs	r3, #1
 8010ac8:	2200      	movs	r2, #0
 8010aca:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010acc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d001      	beq.n	8010ad6 <HAL_DMA_IRQHandler+0x1ce>
        hdma->XferErrorCallback(hdma);
 8010ad2:	0020      	movs	r0, r4
 8010ad4:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010ad6:	6822      	ldr	r2, [r4, #0]
 8010ad8:	4b43      	ldr	r3, [pc, #268]	; (8010be8 <HAL_DMA_IRQHandler+0x2e0>)
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d800      	bhi.n	8010ae0 <HAL_DMA_IRQHandler+0x1d8>
 8010ade:	e105      	b.n	8010cec <HAL_DMA_IRQHandler+0x3e4>
 8010ae0:	4b42      	ldr	r3, [pc, #264]	; (8010bec <HAL_DMA_IRQHandler+0x2e4>)
 8010ae2:	6819      	ldr	r1, [r3, #0]
 8010ae4:	4b42      	ldr	r3, [pc, #264]	; (8010bf0 <HAL_DMA_IRQHandler+0x2e8>)
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d100      	bne.n	8010aec <HAL_DMA_IRQHandler+0x1e4>
 8010aea:	e0a1      	b.n	8010c30 <HAL_DMA_IRQHandler+0x328>
 8010aec:	4b41      	ldr	r3, [pc, #260]	; (8010bf4 <HAL_DMA_IRQHandler+0x2ec>)
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d100      	bne.n	8010af4 <HAL_DMA_IRQHandler+0x1ec>
 8010af2:	e0e3      	b.n	8010cbc <HAL_DMA_IRQHandler+0x3b4>
 8010af4:	4b40      	ldr	r3, [pc, #256]	; (8010bf8 <HAL_DMA_IRQHandler+0x2f0>)
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d100      	bne.n	8010afc <HAL_DMA_IRQHandler+0x1f4>
 8010afa:	e0e1      	b.n	8010cc0 <HAL_DMA_IRQHandler+0x3b8>
 8010afc:	4b3f      	ldr	r3, [pc, #252]	; (8010bfc <HAL_DMA_IRQHandler+0x2f4>)
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d100      	bne.n	8010b04 <HAL_DMA_IRQHandler+0x1fc>
 8010b02:	e0e0      	b.n	8010cc6 <HAL_DMA_IRQHandler+0x3be>
 8010b04:	4b3e      	ldr	r3, [pc, #248]	; (8010c00 <HAL_DMA_IRQHandler+0x2f8>)
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d100      	bne.n	8010b0c <HAL_DMA_IRQHandler+0x204>
 8010b0a:	e0df      	b.n	8010ccc <HAL_DMA_IRQHandler+0x3c4>
 8010b0c:	4b3d      	ldr	r3, [pc, #244]	; (8010c04 <HAL_DMA_IRQHandler+0x2fc>)
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d100      	bne.n	8010b14 <HAL_DMA_IRQHandler+0x20c>
 8010b12:	e0de      	b.n	8010cd2 <HAL_DMA_IRQHandler+0x3ca>
 8010b14:	4b34      	ldr	r3, [pc, #208]	; (8010be8 <HAL_DMA_IRQHandler+0x2e0>)
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d100      	bne.n	8010b1c <HAL_DMA_IRQHandler+0x214>
 8010b1a:	e0dd      	b.n	8010cd8 <HAL_DMA_IRQHandler+0x3d0>
 8010b1c:	4b3a      	ldr	r3, [pc, #232]	; (8010c08 <HAL_DMA_IRQHandler+0x300>)
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d100      	bne.n	8010b24 <HAL_DMA_IRQHandler+0x21c>
 8010b22:	e0dc      	b.n	8010cde <HAL_DMA_IRQHandler+0x3d6>
 8010b24:	4b39      	ldr	r3, [pc, #228]	; (8010c0c <HAL_DMA_IRQHandler+0x304>)
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d100      	bne.n	8010b2c <HAL_DMA_IRQHandler+0x224>
 8010b2a:	e0da      	b.n	8010ce2 <HAL_DMA_IRQHandler+0x3da>
 8010b2c:	4b38      	ldr	r3, [pc, #224]	; (8010c10 <HAL_DMA_IRQHandler+0x308>)
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d100      	bne.n	8010b34 <HAL_DMA_IRQHandler+0x22c>
 8010b32:	e0d8      	b.n	8010ce6 <HAL_DMA_IRQHandler+0x3de>
 8010b34:	4b37      	ldr	r3, [pc, #220]	; (8010c14 <HAL_DMA_IRQHandler+0x30c>)
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d077      	beq.n	8010c2a <HAL_DMA_IRQHandler+0x322>
 8010b3a:	2380      	movs	r3, #128	; 0x80
 8010b3c:	02db      	lsls	r3, r3, #11
 8010b3e:	e078      	b.n	8010c32 <HAL_DMA_IRQHandler+0x32a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010b40:	2280      	movs	r2, #128	; 0x80
 8010b42:	e7b7      	b.n	8010ab4 <HAL_DMA_IRQHandler+0x1ac>
 8010b44:	2280      	movs	r2, #128	; 0x80
 8010b46:	0112      	lsls	r2, r2, #4
 8010b48:	e7b4      	b.n	8010ab4 <HAL_DMA_IRQHandler+0x1ac>
 8010b4a:	2280      	movs	r2, #128	; 0x80
 8010b4c:	0212      	lsls	r2, r2, #8
 8010b4e:	e7b1      	b.n	8010ab4 <HAL_DMA_IRQHandler+0x1ac>
 8010b50:	2280      	movs	r2, #128	; 0x80
 8010b52:	0312      	lsls	r2, r2, #12
 8010b54:	e7ae      	b.n	8010ab4 <HAL_DMA_IRQHandler+0x1ac>
 8010b56:	2280      	movs	r2, #128	; 0x80
 8010b58:	0412      	lsls	r2, r2, #16
 8010b5a:	e7ab      	b.n	8010ab4 <HAL_DMA_IRQHandler+0x1ac>
 8010b5c:	2280      	movs	r2, #128	; 0x80
 8010b5e:	0512      	lsls	r2, r2, #20
 8010b60:	e7a8      	b.n	8010ab4 <HAL_DMA_IRQHandler+0x1ac>
 8010b62:	2208      	movs	r2, #8
 8010b64:	e7a6      	b.n	8010ab4 <HAL_DMA_IRQHandler+0x1ac>
 8010b66:	2280      	movs	r2, #128	; 0x80
 8010b68:	e7a4      	b.n	8010ab4 <HAL_DMA_IRQHandler+0x1ac>
 8010b6a:	2280      	movs	r2, #128	; 0x80
 8010b6c:	0112      	lsls	r2, r2, #4
 8010b6e:	e7a1      	b.n	8010ab4 <HAL_DMA_IRQHandler+0x1ac>
 8010b70:	4a1f      	ldr	r2, [pc, #124]	; (8010bf0 <HAL_DMA_IRQHandler+0x2e8>)
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d023      	beq.n	8010bbe <HAL_DMA_IRQHandler+0x2b6>
 8010b76:	4a1f      	ldr	r2, [pc, #124]	; (8010bf4 <HAL_DMA_IRQHandler+0x2ec>)
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	d024      	beq.n	8010bc6 <HAL_DMA_IRQHandler+0x2be>
 8010b7c:	4a1e      	ldr	r2, [pc, #120]	; (8010bf8 <HAL_DMA_IRQHandler+0x2f0>)
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	d023      	beq.n	8010bca <HAL_DMA_IRQHandler+0x2c2>
 8010b82:	4a1e      	ldr	r2, [pc, #120]	; (8010bfc <HAL_DMA_IRQHandler+0x2f4>)
 8010b84:	4293      	cmp	r3, r2
 8010b86:	d023      	beq.n	8010bd0 <HAL_DMA_IRQHandler+0x2c8>
 8010b88:	4a1d      	ldr	r2, [pc, #116]	; (8010c00 <HAL_DMA_IRQHandler+0x2f8>)
 8010b8a:	4293      	cmp	r3, r2
 8010b8c:	d023      	beq.n	8010bd6 <HAL_DMA_IRQHandler+0x2ce>
 8010b8e:	4a1d      	ldr	r2, [pc, #116]	; (8010c04 <HAL_DMA_IRQHandler+0x2fc>)
 8010b90:	4293      	cmp	r3, r2
 8010b92:	d023      	beq.n	8010bdc <HAL_DMA_IRQHandler+0x2d4>
 8010b94:	4a14      	ldr	r2, [pc, #80]	; (8010be8 <HAL_DMA_IRQHandler+0x2e0>)
 8010b96:	4293      	cmp	r3, r2
 8010b98:	d023      	beq.n	8010be2 <HAL_DMA_IRQHandler+0x2da>
 8010b9a:	4a1b      	ldr	r2, [pc, #108]	; (8010c08 <HAL_DMA_IRQHandler+0x300>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d03d      	beq.n	8010c1c <HAL_DMA_IRQHandler+0x314>
 8010ba0:	4a1a      	ldr	r2, [pc, #104]	; (8010c0c <HAL_DMA_IRQHandler+0x304>)
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	d03c      	beq.n	8010c20 <HAL_DMA_IRQHandler+0x318>
 8010ba6:	4a1a      	ldr	r2, [pc, #104]	; (8010c10 <HAL_DMA_IRQHandler+0x308>)
 8010ba8:	4293      	cmp	r3, r2
 8010baa:	d03b      	beq.n	8010c24 <HAL_DMA_IRQHandler+0x31c>
 8010bac:	4a19      	ldr	r2, [pc, #100]	; (8010c14 <HAL_DMA_IRQHandler+0x30c>)
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	d002      	beq.n	8010bb8 <HAL_DMA_IRQHandler+0x2b0>
 8010bb2:	2280      	movs	r2, #128	; 0x80
 8010bb4:	0312      	lsls	r2, r2, #12
 8010bb6:	e003      	b.n	8010bc0 <HAL_DMA_IRQHandler+0x2b8>
 8010bb8:	2280      	movs	r2, #128	; 0x80
 8010bba:	0212      	lsls	r2, r2, #8
 8010bbc:	e000      	b.n	8010bc0 <HAL_DMA_IRQHandler+0x2b8>
 8010bbe:	2208      	movs	r2, #8
 8010bc0:	4b15      	ldr	r3, [pc, #84]	; (8010c18 <HAL_DMA_IRQHandler+0x310>)
 8010bc2:	605a      	str	r2, [r3, #4]
 8010bc4:	e778      	b.n	8010ab8 <HAL_DMA_IRQHandler+0x1b0>
 8010bc6:	2280      	movs	r2, #128	; 0x80
 8010bc8:	e7fa      	b.n	8010bc0 <HAL_DMA_IRQHandler+0x2b8>
 8010bca:	2280      	movs	r2, #128	; 0x80
 8010bcc:	0112      	lsls	r2, r2, #4
 8010bce:	e7f7      	b.n	8010bc0 <HAL_DMA_IRQHandler+0x2b8>
 8010bd0:	2280      	movs	r2, #128	; 0x80
 8010bd2:	0212      	lsls	r2, r2, #8
 8010bd4:	e7f4      	b.n	8010bc0 <HAL_DMA_IRQHandler+0x2b8>
 8010bd6:	2280      	movs	r2, #128	; 0x80
 8010bd8:	0312      	lsls	r2, r2, #12
 8010bda:	e7f1      	b.n	8010bc0 <HAL_DMA_IRQHandler+0x2b8>
 8010bdc:	2280      	movs	r2, #128	; 0x80
 8010bde:	0412      	lsls	r2, r2, #16
 8010be0:	e7ee      	b.n	8010bc0 <HAL_DMA_IRQHandler+0x2b8>
 8010be2:	2280      	movs	r2, #128	; 0x80
 8010be4:	0512      	lsls	r2, r2, #20
 8010be6:	e7eb      	b.n	8010bc0 <HAL_DMA_IRQHandler+0x2b8>
 8010be8:	40020080 	.word	0x40020080
 8010bec:	40020400 	.word	0x40020400
 8010bf0:	40020008 	.word	0x40020008
 8010bf4:	4002001c 	.word	0x4002001c
 8010bf8:	40020030 	.word	0x40020030
 8010bfc:	40020044 	.word	0x40020044
 8010c00:	40020058 	.word	0x40020058
 8010c04:	4002006c 	.word	0x4002006c
 8010c08:	40020408 	.word	0x40020408
 8010c0c:	4002041c 	.word	0x4002041c
 8010c10:	40020430 	.word	0x40020430
 8010c14:	40020444 	.word	0x40020444
 8010c18:	40020000 	.word	0x40020000
 8010c1c:	2208      	movs	r2, #8
 8010c1e:	e7cf      	b.n	8010bc0 <HAL_DMA_IRQHandler+0x2b8>
 8010c20:	2280      	movs	r2, #128	; 0x80
 8010c22:	e7cd      	b.n	8010bc0 <HAL_DMA_IRQHandler+0x2b8>
 8010c24:	2280      	movs	r2, #128	; 0x80
 8010c26:	0112      	lsls	r2, r2, #4
 8010c28:	e7ca      	b.n	8010bc0 <HAL_DMA_IRQHandler+0x2b8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010c2a:	2380      	movs	r3, #128	; 0x80
 8010c2c:	01db      	lsls	r3, r3, #7
 8010c2e:	e000      	b.n	8010c32 <HAL_DMA_IRQHandler+0x32a>
 8010c30:	2304      	movs	r3, #4
 8010c32:	400b      	ands	r3, r1
 8010c34:	1e59      	subs	r1, r3, #1
 8010c36:	418b      	sbcs	r3, r1
 8010c38:	b2db      	uxtb	r3, r3
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d100      	bne.n	8010c40 <HAL_DMA_IRQHandler+0x338>
 8010c3e:	e0aa      	b.n	8010d96 <HAL_DMA_IRQHandler+0x48e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010c40:	6813      	ldr	r3, [r2, #0]
 8010c42:	075b      	lsls	r3, r3, #29
 8010c44:	d400      	bmi.n	8010c48 <HAL_DMA_IRQHandler+0x340>
 8010c46:	e0a6      	b.n	8010d96 <HAL_DMA_IRQHandler+0x48e>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010c48:	6813      	ldr	r3, [r2, #0]
 8010c4a:	069b      	lsls	r3, r3, #26
 8010c4c:	d403      	bmi.n	8010c56 <HAL_DMA_IRQHandler+0x34e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010c4e:	6813      	ldr	r3, [r2, #0]
 8010c50:	2104      	movs	r1, #4
 8010c52:	438b      	bics	r3, r1
 8010c54:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010c56:	6823      	ldr	r3, [r4, #0]
 8010c58:	4a98      	ldr	r2, [pc, #608]	; (8010ebc <HAL_DMA_IRQHandler+0x5b4>)
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d800      	bhi.n	8010c60 <HAL_DMA_IRQHandler+0x358>
 8010c5e:	e0e7      	b.n	8010e30 <HAL_DMA_IRQHandler+0x528>
 8010c60:	4a97      	ldr	r2, [pc, #604]	; (8010ec0 <HAL_DMA_IRQHandler+0x5b8>)
 8010c62:	4293      	cmp	r3, r2
 8010c64:	d100      	bne.n	8010c68 <HAL_DMA_IRQHandler+0x360>
 8010c66:	e08b      	b.n	8010d80 <HAL_DMA_IRQHandler+0x478>
 8010c68:	4a96      	ldr	r2, [pc, #600]	; (8010ec4 <HAL_DMA_IRQHandler+0x5bc>)
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	d100      	bne.n	8010c70 <HAL_DMA_IRQHandler+0x368>
 8010c6e:	e0c7      	b.n	8010e00 <HAL_DMA_IRQHandler+0x4f8>
 8010c70:	4a95      	ldr	r2, [pc, #596]	; (8010ec8 <HAL_DMA_IRQHandler+0x5c0>)
 8010c72:	4293      	cmp	r3, r2
 8010c74:	d100      	bne.n	8010c78 <HAL_DMA_IRQHandler+0x370>
 8010c76:	e0c5      	b.n	8010e04 <HAL_DMA_IRQHandler+0x4fc>
 8010c78:	4a94      	ldr	r2, [pc, #592]	; (8010ecc <HAL_DMA_IRQHandler+0x5c4>)
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	d100      	bne.n	8010c80 <HAL_DMA_IRQHandler+0x378>
 8010c7e:	e0c4      	b.n	8010e0a <HAL_DMA_IRQHandler+0x502>
 8010c80:	4a93      	ldr	r2, [pc, #588]	; (8010ed0 <HAL_DMA_IRQHandler+0x5c8>)
 8010c82:	4293      	cmp	r3, r2
 8010c84:	d100      	bne.n	8010c88 <HAL_DMA_IRQHandler+0x380>
 8010c86:	e0c3      	b.n	8010e10 <HAL_DMA_IRQHandler+0x508>
 8010c88:	4a92      	ldr	r2, [pc, #584]	; (8010ed4 <HAL_DMA_IRQHandler+0x5cc>)
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	d100      	bne.n	8010c90 <HAL_DMA_IRQHandler+0x388>
 8010c8e:	e0c2      	b.n	8010e16 <HAL_DMA_IRQHandler+0x50e>
 8010c90:	4a8a      	ldr	r2, [pc, #552]	; (8010ebc <HAL_DMA_IRQHandler+0x5b4>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d100      	bne.n	8010c98 <HAL_DMA_IRQHandler+0x390>
 8010c96:	e0c1      	b.n	8010e1c <HAL_DMA_IRQHandler+0x514>
 8010c98:	4a8f      	ldr	r2, [pc, #572]	; (8010ed8 <HAL_DMA_IRQHandler+0x5d0>)
 8010c9a:	4293      	cmp	r3, r2
 8010c9c:	d100      	bne.n	8010ca0 <HAL_DMA_IRQHandler+0x398>
 8010c9e:	e0c0      	b.n	8010e22 <HAL_DMA_IRQHandler+0x51a>
 8010ca0:	4a8e      	ldr	r2, [pc, #568]	; (8010edc <HAL_DMA_IRQHandler+0x5d4>)
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d100      	bne.n	8010ca8 <HAL_DMA_IRQHandler+0x3a0>
 8010ca6:	e0be      	b.n	8010e26 <HAL_DMA_IRQHandler+0x51e>
 8010ca8:	4a8d      	ldr	r2, [pc, #564]	; (8010ee0 <HAL_DMA_IRQHandler+0x5d8>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d100      	bne.n	8010cb0 <HAL_DMA_IRQHandler+0x3a8>
 8010cae:	e0bc      	b.n	8010e2a <HAL_DMA_IRQHandler+0x522>
 8010cb0:	4a8c      	ldr	r2, [pc, #560]	; (8010ee4 <HAL_DMA_IRQHandler+0x5dc>)
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d061      	beq.n	8010d7a <HAL_DMA_IRQHandler+0x472>
 8010cb6:	2280      	movs	r2, #128	; 0x80
 8010cb8:	02d2      	lsls	r2, r2, #11
 8010cba:	e062      	b.n	8010d82 <HAL_DMA_IRQHandler+0x47a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010cbc:	2340      	movs	r3, #64	; 0x40
 8010cbe:	e7b8      	b.n	8010c32 <HAL_DMA_IRQHandler+0x32a>
 8010cc0:	2380      	movs	r3, #128	; 0x80
 8010cc2:	00db      	lsls	r3, r3, #3
 8010cc4:	e7b5      	b.n	8010c32 <HAL_DMA_IRQHandler+0x32a>
 8010cc6:	2380      	movs	r3, #128	; 0x80
 8010cc8:	01db      	lsls	r3, r3, #7
 8010cca:	e7b2      	b.n	8010c32 <HAL_DMA_IRQHandler+0x32a>
 8010ccc:	2380      	movs	r3, #128	; 0x80
 8010cce:	02db      	lsls	r3, r3, #11
 8010cd0:	e7af      	b.n	8010c32 <HAL_DMA_IRQHandler+0x32a>
 8010cd2:	2380      	movs	r3, #128	; 0x80
 8010cd4:	03db      	lsls	r3, r3, #15
 8010cd6:	e7ac      	b.n	8010c32 <HAL_DMA_IRQHandler+0x32a>
 8010cd8:	2380      	movs	r3, #128	; 0x80
 8010cda:	04db      	lsls	r3, r3, #19
 8010cdc:	e7a9      	b.n	8010c32 <HAL_DMA_IRQHandler+0x32a>
 8010cde:	2304      	movs	r3, #4
 8010ce0:	e7a7      	b.n	8010c32 <HAL_DMA_IRQHandler+0x32a>
 8010ce2:	2340      	movs	r3, #64	; 0x40
 8010ce4:	e7a5      	b.n	8010c32 <HAL_DMA_IRQHandler+0x32a>
 8010ce6:	2380      	movs	r3, #128	; 0x80
 8010ce8:	00db      	lsls	r3, r3, #3
 8010cea:	e7a2      	b.n	8010c32 <HAL_DMA_IRQHandler+0x32a>
 8010cec:	4b7e      	ldr	r3, [pc, #504]	; (8010ee8 <HAL_DMA_IRQHandler+0x5e0>)
 8010cee:	6819      	ldr	r1, [r3, #0]
 8010cf0:	4b73      	ldr	r3, [pc, #460]	; (8010ec0 <HAL_DMA_IRQHandler+0x5b8>)
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d023      	beq.n	8010d3e <HAL_DMA_IRQHandler+0x436>
 8010cf6:	4b73      	ldr	r3, [pc, #460]	; (8010ec4 <HAL_DMA_IRQHandler+0x5bc>)
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d026      	beq.n	8010d4a <HAL_DMA_IRQHandler+0x442>
 8010cfc:	4b72      	ldr	r3, [pc, #456]	; (8010ec8 <HAL_DMA_IRQHandler+0x5c0>)
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d025      	beq.n	8010d4e <HAL_DMA_IRQHandler+0x446>
 8010d02:	4b72      	ldr	r3, [pc, #456]	; (8010ecc <HAL_DMA_IRQHandler+0x5c4>)
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d025      	beq.n	8010d54 <HAL_DMA_IRQHandler+0x44c>
 8010d08:	4b71      	ldr	r3, [pc, #452]	; (8010ed0 <HAL_DMA_IRQHandler+0x5c8>)
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d025      	beq.n	8010d5a <HAL_DMA_IRQHandler+0x452>
 8010d0e:	4b71      	ldr	r3, [pc, #452]	; (8010ed4 <HAL_DMA_IRQHandler+0x5cc>)
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d025      	beq.n	8010d60 <HAL_DMA_IRQHandler+0x458>
 8010d14:	4b69      	ldr	r3, [pc, #420]	; (8010ebc <HAL_DMA_IRQHandler+0x5b4>)
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d025      	beq.n	8010d66 <HAL_DMA_IRQHandler+0x45e>
 8010d1a:	4b6f      	ldr	r3, [pc, #444]	; (8010ed8 <HAL_DMA_IRQHandler+0x5d0>)
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d025      	beq.n	8010d6c <HAL_DMA_IRQHandler+0x464>
 8010d20:	4b6e      	ldr	r3, [pc, #440]	; (8010edc <HAL_DMA_IRQHandler+0x5d4>)
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d024      	beq.n	8010d70 <HAL_DMA_IRQHandler+0x468>
 8010d26:	4b6e      	ldr	r3, [pc, #440]	; (8010ee0 <HAL_DMA_IRQHandler+0x5d8>)
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	d023      	beq.n	8010d74 <HAL_DMA_IRQHandler+0x46c>
 8010d2c:	4b6d      	ldr	r3, [pc, #436]	; (8010ee4 <HAL_DMA_IRQHandler+0x5dc>)
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d002      	beq.n	8010d38 <HAL_DMA_IRQHandler+0x430>
 8010d32:	2380      	movs	r3, #128	; 0x80
 8010d34:	02db      	lsls	r3, r3, #11
 8010d36:	e003      	b.n	8010d40 <HAL_DMA_IRQHandler+0x438>
 8010d38:	2380      	movs	r3, #128	; 0x80
 8010d3a:	01db      	lsls	r3, r3, #7
 8010d3c:	e000      	b.n	8010d40 <HAL_DMA_IRQHandler+0x438>
 8010d3e:	2304      	movs	r3, #4
 8010d40:	400b      	ands	r3, r1
 8010d42:	1e59      	subs	r1, r3, #1
 8010d44:	418b      	sbcs	r3, r1
 8010d46:	b2db      	uxtb	r3, r3
 8010d48:	e777      	b.n	8010c3a <HAL_DMA_IRQHandler+0x332>
 8010d4a:	2340      	movs	r3, #64	; 0x40
 8010d4c:	e7f8      	b.n	8010d40 <HAL_DMA_IRQHandler+0x438>
 8010d4e:	2380      	movs	r3, #128	; 0x80
 8010d50:	00db      	lsls	r3, r3, #3
 8010d52:	e7f5      	b.n	8010d40 <HAL_DMA_IRQHandler+0x438>
 8010d54:	2380      	movs	r3, #128	; 0x80
 8010d56:	01db      	lsls	r3, r3, #7
 8010d58:	e7f2      	b.n	8010d40 <HAL_DMA_IRQHandler+0x438>
 8010d5a:	2380      	movs	r3, #128	; 0x80
 8010d5c:	02db      	lsls	r3, r3, #11
 8010d5e:	e7ef      	b.n	8010d40 <HAL_DMA_IRQHandler+0x438>
 8010d60:	2380      	movs	r3, #128	; 0x80
 8010d62:	03db      	lsls	r3, r3, #15
 8010d64:	e7ec      	b.n	8010d40 <HAL_DMA_IRQHandler+0x438>
 8010d66:	2380      	movs	r3, #128	; 0x80
 8010d68:	04db      	lsls	r3, r3, #19
 8010d6a:	e7e9      	b.n	8010d40 <HAL_DMA_IRQHandler+0x438>
 8010d6c:	2304      	movs	r3, #4
 8010d6e:	e7e7      	b.n	8010d40 <HAL_DMA_IRQHandler+0x438>
 8010d70:	2340      	movs	r3, #64	; 0x40
 8010d72:	e7e5      	b.n	8010d40 <HAL_DMA_IRQHandler+0x438>
 8010d74:	2380      	movs	r3, #128	; 0x80
 8010d76:	00db      	lsls	r3, r3, #3
 8010d78:	e7e2      	b.n	8010d40 <HAL_DMA_IRQHandler+0x438>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010d7a:	2280      	movs	r2, #128	; 0x80
 8010d7c:	01d2      	lsls	r2, r2, #7
 8010d7e:	e000      	b.n	8010d82 <HAL_DMA_IRQHandler+0x47a>
 8010d80:	2204      	movs	r2, #4
 8010d82:	4b5a      	ldr	r3, [pc, #360]	; (8010eec <HAL_DMA_IRQHandler+0x5e4>)
 8010d84:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010d86:	2321      	movs	r3, #33	; 0x21
 8010d88:	2211      	movs	r2, #17
 8010d8a:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010d8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d001      	beq.n	8010d96 <HAL_DMA_IRQHandler+0x48e>
        hdma->XferHalfCpltCallback(hdma);
 8010d92:	0020      	movs	r0, r4
 8010d94:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010d96:	6822      	ldr	r2, [r4, #0]
 8010d98:	4b48      	ldr	r3, [pc, #288]	; (8010ebc <HAL_DMA_IRQHandler+0x5b4>)
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d800      	bhi.n	8010da0 <HAL_DMA_IRQHandler+0x498>
 8010d9e:	e105      	b.n	8010fac <HAL_DMA_IRQHandler+0x6a4>
 8010da0:	4b52      	ldr	r3, [pc, #328]	; (8010eec <HAL_DMA_IRQHandler+0x5e4>)
 8010da2:	6819      	ldr	r1, [r3, #0]
 8010da4:	4b46      	ldr	r3, [pc, #280]	; (8010ec0 <HAL_DMA_IRQHandler+0x5b8>)
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d100      	bne.n	8010dac <HAL_DMA_IRQHandler+0x4a4>
 8010daa:	e0a1      	b.n	8010ef0 <HAL_DMA_IRQHandler+0x5e8>
 8010dac:	4b45      	ldr	r3, [pc, #276]	; (8010ec4 <HAL_DMA_IRQHandler+0x5bc>)
 8010dae:	429a      	cmp	r2, r3
 8010db0:	d100      	bne.n	8010db4 <HAL_DMA_IRQHandler+0x4ac>
 8010db2:	e0e3      	b.n	8010f7c <HAL_DMA_IRQHandler+0x674>
 8010db4:	4b44      	ldr	r3, [pc, #272]	; (8010ec8 <HAL_DMA_IRQHandler+0x5c0>)
 8010db6:	429a      	cmp	r2, r3
 8010db8:	d100      	bne.n	8010dbc <HAL_DMA_IRQHandler+0x4b4>
 8010dba:	e0e1      	b.n	8010f80 <HAL_DMA_IRQHandler+0x678>
 8010dbc:	4b43      	ldr	r3, [pc, #268]	; (8010ecc <HAL_DMA_IRQHandler+0x5c4>)
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d100      	bne.n	8010dc4 <HAL_DMA_IRQHandler+0x4bc>
 8010dc2:	e0e0      	b.n	8010f86 <HAL_DMA_IRQHandler+0x67e>
 8010dc4:	4b42      	ldr	r3, [pc, #264]	; (8010ed0 <HAL_DMA_IRQHandler+0x5c8>)
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d100      	bne.n	8010dcc <HAL_DMA_IRQHandler+0x4c4>
 8010dca:	e0df      	b.n	8010f8c <HAL_DMA_IRQHandler+0x684>
 8010dcc:	4b41      	ldr	r3, [pc, #260]	; (8010ed4 <HAL_DMA_IRQHandler+0x5cc>)
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d100      	bne.n	8010dd4 <HAL_DMA_IRQHandler+0x4cc>
 8010dd2:	e0de      	b.n	8010f92 <HAL_DMA_IRQHandler+0x68a>
 8010dd4:	4b39      	ldr	r3, [pc, #228]	; (8010ebc <HAL_DMA_IRQHandler+0x5b4>)
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d100      	bne.n	8010ddc <HAL_DMA_IRQHandler+0x4d4>
 8010dda:	e0dd      	b.n	8010f98 <HAL_DMA_IRQHandler+0x690>
 8010ddc:	4b3e      	ldr	r3, [pc, #248]	; (8010ed8 <HAL_DMA_IRQHandler+0x5d0>)
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d100      	bne.n	8010de4 <HAL_DMA_IRQHandler+0x4dc>
 8010de2:	e0dc      	b.n	8010f9e <HAL_DMA_IRQHandler+0x696>
 8010de4:	4b3d      	ldr	r3, [pc, #244]	; (8010edc <HAL_DMA_IRQHandler+0x5d4>)
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d100      	bne.n	8010dec <HAL_DMA_IRQHandler+0x4e4>
 8010dea:	e0da      	b.n	8010fa2 <HAL_DMA_IRQHandler+0x69a>
 8010dec:	4b3c      	ldr	r3, [pc, #240]	; (8010ee0 <HAL_DMA_IRQHandler+0x5d8>)
 8010dee:	429a      	cmp	r2, r3
 8010df0:	d100      	bne.n	8010df4 <HAL_DMA_IRQHandler+0x4ec>
 8010df2:	e0d8      	b.n	8010fa6 <HAL_DMA_IRQHandler+0x69e>
 8010df4:	4b3b      	ldr	r3, [pc, #236]	; (8010ee4 <HAL_DMA_IRQHandler+0x5dc>)
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d05d      	beq.n	8010eb6 <HAL_DMA_IRQHandler+0x5ae>
 8010dfa:	2380      	movs	r3, #128	; 0x80
 8010dfc:	029b      	lsls	r3, r3, #10
 8010dfe:	e078      	b.n	8010ef2 <HAL_DMA_IRQHandler+0x5ea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010e00:	2240      	movs	r2, #64	; 0x40
 8010e02:	e7be      	b.n	8010d82 <HAL_DMA_IRQHandler+0x47a>
 8010e04:	2280      	movs	r2, #128	; 0x80
 8010e06:	00d2      	lsls	r2, r2, #3
 8010e08:	e7bb      	b.n	8010d82 <HAL_DMA_IRQHandler+0x47a>
 8010e0a:	2280      	movs	r2, #128	; 0x80
 8010e0c:	01d2      	lsls	r2, r2, #7
 8010e0e:	e7b8      	b.n	8010d82 <HAL_DMA_IRQHandler+0x47a>
 8010e10:	2280      	movs	r2, #128	; 0x80
 8010e12:	02d2      	lsls	r2, r2, #11
 8010e14:	e7b5      	b.n	8010d82 <HAL_DMA_IRQHandler+0x47a>
 8010e16:	2280      	movs	r2, #128	; 0x80
 8010e18:	03d2      	lsls	r2, r2, #15
 8010e1a:	e7b2      	b.n	8010d82 <HAL_DMA_IRQHandler+0x47a>
 8010e1c:	2280      	movs	r2, #128	; 0x80
 8010e1e:	04d2      	lsls	r2, r2, #19
 8010e20:	e7af      	b.n	8010d82 <HAL_DMA_IRQHandler+0x47a>
 8010e22:	2204      	movs	r2, #4
 8010e24:	e7ad      	b.n	8010d82 <HAL_DMA_IRQHandler+0x47a>
 8010e26:	2240      	movs	r2, #64	; 0x40
 8010e28:	e7ab      	b.n	8010d82 <HAL_DMA_IRQHandler+0x47a>
 8010e2a:	2280      	movs	r2, #128	; 0x80
 8010e2c:	00d2      	lsls	r2, r2, #3
 8010e2e:	e7a8      	b.n	8010d82 <HAL_DMA_IRQHandler+0x47a>
 8010e30:	4a23      	ldr	r2, [pc, #140]	; (8010ec0 <HAL_DMA_IRQHandler+0x5b8>)
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d023      	beq.n	8010e7e <HAL_DMA_IRQHandler+0x576>
 8010e36:	4a23      	ldr	r2, [pc, #140]	; (8010ec4 <HAL_DMA_IRQHandler+0x5bc>)
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	d024      	beq.n	8010e86 <HAL_DMA_IRQHandler+0x57e>
 8010e3c:	4a22      	ldr	r2, [pc, #136]	; (8010ec8 <HAL_DMA_IRQHandler+0x5c0>)
 8010e3e:	4293      	cmp	r3, r2
 8010e40:	d023      	beq.n	8010e8a <HAL_DMA_IRQHandler+0x582>
 8010e42:	4a22      	ldr	r2, [pc, #136]	; (8010ecc <HAL_DMA_IRQHandler+0x5c4>)
 8010e44:	4293      	cmp	r3, r2
 8010e46:	d023      	beq.n	8010e90 <HAL_DMA_IRQHandler+0x588>
 8010e48:	4a21      	ldr	r2, [pc, #132]	; (8010ed0 <HAL_DMA_IRQHandler+0x5c8>)
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d023      	beq.n	8010e96 <HAL_DMA_IRQHandler+0x58e>
 8010e4e:	4a21      	ldr	r2, [pc, #132]	; (8010ed4 <HAL_DMA_IRQHandler+0x5cc>)
 8010e50:	4293      	cmp	r3, r2
 8010e52:	d023      	beq.n	8010e9c <HAL_DMA_IRQHandler+0x594>
 8010e54:	4a19      	ldr	r2, [pc, #100]	; (8010ebc <HAL_DMA_IRQHandler+0x5b4>)
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d023      	beq.n	8010ea2 <HAL_DMA_IRQHandler+0x59a>
 8010e5a:	4a1f      	ldr	r2, [pc, #124]	; (8010ed8 <HAL_DMA_IRQHandler+0x5d0>)
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	d023      	beq.n	8010ea8 <HAL_DMA_IRQHandler+0x5a0>
 8010e60:	4a1e      	ldr	r2, [pc, #120]	; (8010edc <HAL_DMA_IRQHandler+0x5d4>)
 8010e62:	4293      	cmp	r3, r2
 8010e64:	d022      	beq.n	8010eac <HAL_DMA_IRQHandler+0x5a4>
 8010e66:	4a1e      	ldr	r2, [pc, #120]	; (8010ee0 <HAL_DMA_IRQHandler+0x5d8>)
 8010e68:	4293      	cmp	r3, r2
 8010e6a:	d021      	beq.n	8010eb0 <HAL_DMA_IRQHandler+0x5a8>
 8010e6c:	4a1d      	ldr	r2, [pc, #116]	; (8010ee4 <HAL_DMA_IRQHandler+0x5dc>)
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	d002      	beq.n	8010e78 <HAL_DMA_IRQHandler+0x570>
 8010e72:	2280      	movs	r2, #128	; 0x80
 8010e74:	02d2      	lsls	r2, r2, #11
 8010e76:	e003      	b.n	8010e80 <HAL_DMA_IRQHandler+0x578>
 8010e78:	2280      	movs	r2, #128	; 0x80
 8010e7a:	01d2      	lsls	r2, r2, #7
 8010e7c:	e000      	b.n	8010e80 <HAL_DMA_IRQHandler+0x578>
 8010e7e:	2204      	movs	r2, #4
 8010e80:	4b19      	ldr	r3, [pc, #100]	; (8010ee8 <HAL_DMA_IRQHandler+0x5e0>)
 8010e82:	605a      	str	r2, [r3, #4]
 8010e84:	e77f      	b.n	8010d86 <HAL_DMA_IRQHandler+0x47e>
 8010e86:	2240      	movs	r2, #64	; 0x40
 8010e88:	e7fa      	b.n	8010e80 <HAL_DMA_IRQHandler+0x578>
 8010e8a:	2280      	movs	r2, #128	; 0x80
 8010e8c:	00d2      	lsls	r2, r2, #3
 8010e8e:	e7f7      	b.n	8010e80 <HAL_DMA_IRQHandler+0x578>
 8010e90:	2280      	movs	r2, #128	; 0x80
 8010e92:	01d2      	lsls	r2, r2, #7
 8010e94:	e7f4      	b.n	8010e80 <HAL_DMA_IRQHandler+0x578>
 8010e96:	2280      	movs	r2, #128	; 0x80
 8010e98:	02d2      	lsls	r2, r2, #11
 8010e9a:	e7f1      	b.n	8010e80 <HAL_DMA_IRQHandler+0x578>
 8010e9c:	2280      	movs	r2, #128	; 0x80
 8010e9e:	03d2      	lsls	r2, r2, #15
 8010ea0:	e7ee      	b.n	8010e80 <HAL_DMA_IRQHandler+0x578>
 8010ea2:	2280      	movs	r2, #128	; 0x80
 8010ea4:	04d2      	lsls	r2, r2, #19
 8010ea6:	e7eb      	b.n	8010e80 <HAL_DMA_IRQHandler+0x578>
 8010ea8:	2204      	movs	r2, #4
 8010eaa:	e7e9      	b.n	8010e80 <HAL_DMA_IRQHandler+0x578>
 8010eac:	2240      	movs	r2, #64	; 0x40
 8010eae:	e7e7      	b.n	8010e80 <HAL_DMA_IRQHandler+0x578>
 8010eb0:	2280      	movs	r2, #128	; 0x80
 8010eb2:	00d2      	lsls	r2, r2, #3
 8010eb4:	e7e4      	b.n	8010e80 <HAL_DMA_IRQHandler+0x578>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010eb6:	2380      	movs	r3, #128	; 0x80
 8010eb8:	019b      	lsls	r3, r3, #6
 8010eba:	e01a      	b.n	8010ef2 <HAL_DMA_IRQHandler+0x5ea>
 8010ebc:	40020080 	.word	0x40020080
 8010ec0:	40020008 	.word	0x40020008
 8010ec4:	4002001c 	.word	0x4002001c
 8010ec8:	40020030 	.word	0x40020030
 8010ecc:	40020044 	.word	0x40020044
 8010ed0:	40020058 	.word	0x40020058
 8010ed4:	4002006c 	.word	0x4002006c
 8010ed8:	40020408 	.word	0x40020408
 8010edc:	4002041c 	.word	0x4002041c
 8010ee0:	40020430 	.word	0x40020430
 8010ee4:	40020444 	.word	0x40020444
 8010ee8:	40020000 	.word	0x40020000
 8010eec:	40020400 	.word	0x40020400
 8010ef0:	2302      	movs	r3, #2
 8010ef2:	400b      	ands	r3, r1
 8010ef4:	1e59      	subs	r1, r3, #1
 8010ef6:	418b      	sbcs	r3, r1
 8010ef8:	b2db      	uxtb	r3, r3
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d100      	bne.n	8010f00 <HAL_DMA_IRQHandler+0x5f8>
 8010efe:	e0af      	b.n	8011060 <HAL_DMA_IRQHandler+0x758>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010f00:	6813      	ldr	r3, [r2, #0]
 8010f02:	079b      	lsls	r3, r3, #30
 8010f04:	d400      	bmi.n	8010f08 <HAL_DMA_IRQHandler+0x600>
 8010f06:	e0ab      	b.n	8011060 <HAL_DMA_IRQHandler+0x758>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010f08:	6813      	ldr	r3, [r2, #0]
 8010f0a:	069b      	lsls	r3, r3, #26
 8010f0c:	d403      	bmi.n	8010f16 <HAL_DMA_IRQHandler+0x60e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8010f0e:	6813      	ldr	r3, [r2, #0]
 8010f10:	2102      	movs	r1, #2
 8010f12:	438b      	bics	r3, r1
 8010f14:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010f16:	6823      	ldr	r3, [r4, #0]
 8010f18:	4a7f      	ldr	r2, [pc, #508]	; (8011118 <HAL_DMA_IRQHandler+0x810>)
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d800      	bhi.n	8010f20 <HAL_DMA_IRQHandler+0x618>
 8010f1e:	e0b8      	b.n	8011092 <HAL_DMA_IRQHandler+0x78a>
 8010f20:	4a7e      	ldr	r2, [pc, #504]	; (801111c <HAL_DMA_IRQHandler+0x814>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d100      	bne.n	8010f28 <HAL_DMA_IRQHandler+0x620>
 8010f26:	e08b      	b.n	8011040 <HAL_DMA_IRQHandler+0x738>
 8010f28:	4a7d      	ldr	r2, [pc, #500]	; (8011120 <HAL_DMA_IRQHandler+0x818>)
 8010f2a:	4293      	cmp	r3, r2
 8010f2c:	d100      	bne.n	8010f30 <HAL_DMA_IRQHandler+0x628>
 8010f2e:	e098      	b.n	8011062 <HAL_DMA_IRQHandler+0x75a>
 8010f30:	4a7c      	ldr	r2, [pc, #496]	; (8011124 <HAL_DMA_IRQHandler+0x81c>)
 8010f32:	4293      	cmp	r3, r2
 8010f34:	d100      	bne.n	8010f38 <HAL_DMA_IRQHandler+0x630>
 8010f36:	e096      	b.n	8011066 <HAL_DMA_IRQHandler+0x75e>
 8010f38:	4a7b      	ldr	r2, [pc, #492]	; (8011128 <HAL_DMA_IRQHandler+0x820>)
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	d100      	bne.n	8010f40 <HAL_DMA_IRQHandler+0x638>
 8010f3e:	e095      	b.n	801106c <HAL_DMA_IRQHandler+0x764>
 8010f40:	4a7a      	ldr	r2, [pc, #488]	; (801112c <HAL_DMA_IRQHandler+0x824>)
 8010f42:	4293      	cmp	r3, r2
 8010f44:	d100      	bne.n	8010f48 <HAL_DMA_IRQHandler+0x640>
 8010f46:	e094      	b.n	8011072 <HAL_DMA_IRQHandler+0x76a>
 8010f48:	4a79      	ldr	r2, [pc, #484]	; (8011130 <HAL_DMA_IRQHandler+0x828>)
 8010f4a:	4293      	cmp	r3, r2
 8010f4c:	d100      	bne.n	8010f50 <HAL_DMA_IRQHandler+0x648>
 8010f4e:	e093      	b.n	8011078 <HAL_DMA_IRQHandler+0x770>
 8010f50:	4a71      	ldr	r2, [pc, #452]	; (8011118 <HAL_DMA_IRQHandler+0x810>)
 8010f52:	4293      	cmp	r3, r2
 8010f54:	d100      	bne.n	8010f58 <HAL_DMA_IRQHandler+0x650>
 8010f56:	e092      	b.n	801107e <HAL_DMA_IRQHandler+0x776>
 8010f58:	4a76      	ldr	r2, [pc, #472]	; (8011134 <HAL_DMA_IRQHandler+0x82c>)
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d100      	bne.n	8010f60 <HAL_DMA_IRQHandler+0x658>
 8010f5e:	e091      	b.n	8011084 <HAL_DMA_IRQHandler+0x77c>
 8010f60:	4a75      	ldr	r2, [pc, #468]	; (8011138 <HAL_DMA_IRQHandler+0x830>)
 8010f62:	4293      	cmp	r3, r2
 8010f64:	d100      	bne.n	8010f68 <HAL_DMA_IRQHandler+0x660>
 8010f66:	e08f      	b.n	8011088 <HAL_DMA_IRQHandler+0x780>
 8010f68:	4a74      	ldr	r2, [pc, #464]	; (801113c <HAL_DMA_IRQHandler+0x834>)
 8010f6a:	4293      	cmp	r3, r2
 8010f6c:	d100      	bne.n	8010f70 <HAL_DMA_IRQHandler+0x668>
 8010f6e:	e08d      	b.n	801108c <HAL_DMA_IRQHandler+0x784>
 8010f70:	4a73      	ldr	r2, [pc, #460]	; (8011140 <HAL_DMA_IRQHandler+0x838>)
 8010f72:	4293      	cmp	r3, r2
 8010f74:	d061      	beq.n	801103a <HAL_DMA_IRQHandler+0x732>
 8010f76:	2280      	movs	r2, #128	; 0x80
 8010f78:	0292      	lsls	r2, r2, #10
 8010f7a:	e062      	b.n	8011042 <HAL_DMA_IRQHandler+0x73a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010f7c:	2320      	movs	r3, #32
 8010f7e:	e7b8      	b.n	8010ef2 <HAL_DMA_IRQHandler+0x5ea>
 8010f80:	2380      	movs	r3, #128	; 0x80
 8010f82:	009b      	lsls	r3, r3, #2
 8010f84:	e7b5      	b.n	8010ef2 <HAL_DMA_IRQHandler+0x5ea>
 8010f86:	2380      	movs	r3, #128	; 0x80
 8010f88:	019b      	lsls	r3, r3, #6
 8010f8a:	e7b2      	b.n	8010ef2 <HAL_DMA_IRQHandler+0x5ea>
 8010f8c:	2380      	movs	r3, #128	; 0x80
 8010f8e:	029b      	lsls	r3, r3, #10
 8010f90:	e7af      	b.n	8010ef2 <HAL_DMA_IRQHandler+0x5ea>
 8010f92:	2380      	movs	r3, #128	; 0x80
 8010f94:	039b      	lsls	r3, r3, #14
 8010f96:	e7ac      	b.n	8010ef2 <HAL_DMA_IRQHandler+0x5ea>
 8010f98:	2380      	movs	r3, #128	; 0x80
 8010f9a:	049b      	lsls	r3, r3, #18
 8010f9c:	e7a9      	b.n	8010ef2 <HAL_DMA_IRQHandler+0x5ea>
 8010f9e:	2302      	movs	r3, #2
 8010fa0:	e7a7      	b.n	8010ef2 <HAL_DMA_IRQHandler+0x5ea>
 8010fa2:	2320      	movs	r3, #32
 8010fa4:	e7a5      	b.n	8010ef2 <HAL_DMA_IRQHandler+0x5ea>
 8010fa6:	2380      	movs	r3, #128	; 0x80
 8010fa8:	009b      	lsls	r3, r3, #2
 8010faa:	e7a2      	b.n	8010ef2 <HAL_DMA_IRQHandler+0x5ea>
 8010fac:	4b65      	ldr	r3, [pc, #404]	; (8011144 <HAL_DMA_IRQHandler+0x83c>)
 8010fae:	6819      	ldr	r1, [r3, #0]
 8010fb0:	4b5a      	ldr	r3, [pc, #360]	; (801111c <HAL_DMA_IRQHandler+0x814>)
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d023      	beq.n	8010ffe <HAL_DMA_IRQHandler+0x6f6>
 8010fb6:	4b5a      	ldr	r3, [pc, #360]	; (8011120 <HAL_DMA_IRQHandler+0x818>)
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d026      	beq.n	801100a <HAL_DMA_IRQHandler+0x702>
 8010fbc:	4b59      	ldr	r3, [pc, #356]	; (8011124 <HAL_DMA_IRQHandler+0x81c>)
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d025      	beq.n	801100e <HAL_DMA_IRQHandler+0x706>
 8010fc2:	4b59      	ldr	r3, [pc, #356]	; (8011128 <HAL_DMA_IRQHandler+0x820>)
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d025      	beq.n	8011014 <HAL_DMA_IRQHandler+0x70c>
 8010fc8:	4b58      	ldr	r3, [pc, #352]	; (801112c <HAL_DMA_IRQHandler+0x824>)
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d025      	beq.n	801101a <HAL_DMA_IRQHandler+0x712>
 8010fce:	4b58      	ldr	r3, [pc, #352]	; (8011130 <HAL_DMA_IRQHandler+0x828>)
 8010fd0:	429a      	cmp	r2, r3
 8010fd2:	d025      	beq.n	8011020 <HAL_DMA_IRQHandler+0x718>
 8010fd4:	4b50      	ldr	r3, [pc, #320]	; (8011118 <HAL_DMA_IRQHandler+0x810>)
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d025      	beq.n	8011026 <HAL_DMA_IRQHandler+0x71e>
 8010fda:	4b56      	ldr	r3, [pc, #344]	; (8011134 <HAL_DMA_IRQHandler+0x82c>)
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d025      	beq.n	801102c <HAL_DMA_IRQHandler+0x724>
 8010fe0:	4b55      	ldr	r3, [pc, #340]	; (8011138 <HAL_DMA_IRQHandler+0x830>)
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d024      	beq.n	8011030 <HAL_DMA_IRQHandler+0x728>
 8010fe6:	4b55      	ldr	r3, [pc, #340]	; (801113c <HAL_DMA_IRQHandler+0x834>)
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d023      	beq.n	8011034 <HAL_DMA_IRQHandler+0x72c>
 8010fec:	4b54      	ldr	r3, [pc, #336]	; (8011140 <HAL_DMA_IRQHandler+0x838>)
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d002      	beq.n	8010ff8 <HAL_DMA_IRQHandler+0x6f0>
 8010ff2:	2380      	movs	r3, #128	; 0x80
 8010ff4:	029b      	lsls	r3, r3, #10
 8010ff6:	e003      	b.n	8011000 <HAL_DMA_IRQHandler+0x6f8>
 8010ff8:	2380      	movs	r3, #128	; 0x80
 8010ffa:	019b      	lsls	r3, r3, #6
 8010ffc:	e000      	b.n	8011000 <HAL_DMA_IRQHandler+0x6f8>
 8010ffe:	2302      	movs	r3, #2
 8011000:	400b      	ands	r3, r1
 8011002:	1e59      	subs	r1, r3, #1
 8011004:	418b      	sbcs	r3, r1
 8011006:	b2db      	uxtb	r3, r3
 8011008:	e777      	b.n	8010efa <HAL_DMA_IRQHandler+0x5f2>
 801100a:	2320      	movs	r3, #32
 801100c:	e7f8      	b.n	8011000 <HAL_DMA_IRQHandler+0x6f8>
 801100e:	2380      	movs	r3, #128	; 0x80
 8011010:	009b      	lsls	r3, r3, #2
 8011012:	e7f5      	b.n	8011000 <HAL_DMA_IRQHandler+0x6f8>
 8011014:	2380      	movs	r3, #128	; 0x80
 8011016:	019b      	lsls	r3, r3, #6
 8011018:	e7f2      	b.n	8011000 <HAL_DMA_IRQHandler+0x6f8>
 801101a:	2380      	movs	r3, #128	; 0x80
 801101c:	029b      	lsls	r3, r3, #10
 801101e:	e7ef      	b.n	8011000 <HAL_DMA_IRQHandler+0x6f8>
 8011020:	2380      	movs	r3, #128	; 0x80
 8011022:	039b      	lsls	r3, r3, #14
 8011024:	e7ec      	b.n	8011000 <HAL_DMA_IRQHandler+0x6f8>
 8011026:	2380      	movs	r3, #128	; 0x80
 8011028:	049b      	lsls	r3, r3, #18
 801102a:	e7e9      	b.n	8011000 <HAL_DMA_IRQHandler+0x6f8>
 801102c:	2302      	movs	r3, #2
 801102e:	e7e7      	b.n	8011000 <HAL_DMA_IRQHandler+0x6f8>
 8011030:	2320      	movs	r3, #32
 8011032:	e7e5      	b.n	8011000 <HAL_DMA_IRQHandler+0x6f8>
 8011034:	2380      	movs	r3, #128	; 0x80
 8011036:	009b      	lsls	r3, r3, #2
 8011038:	e7e2      	b.n	8011000 <HAL_DMA_IRQHandler+0x6f8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801103a:	2280      	movs	r2, #128	; 0x80
 801103c:	0192      	lsls	r2, r2, #6
 801103e:	e000      	b.n	8011042 <HAL_DMA_IRQHandler+0x73a>
 8011040:	2202      	movs	r2, #2
 8011042:	4b41      	ldr	r3, [pc, #260]	; (8011148 <HAL_DMA_IRQHandler+0x840>)
 8011044:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8011046:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011048:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 801104a:	2321      	movs	r3, #33	; 0x21
 801104c:	2201      	movs	r2, #1
 801104e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011050:	3b01      	subs	r3, #1
 8011052:	2200      	movs	r2, #0
 8011054:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011058:	2b00      	cmp	r3, #0
 801105a:	d001      	beq.n	8011060 <HAL_DMA_IRQHandler+0x758>
        hdma->XferCpltCallback(hdma);
 801105c:	0020      	movs	r0, r4
 801105e:	4798      	blx	r3
}  
 8011060:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011062:	2220      	movs	r2, #32
 8011064:	e7ed      	b.n	8011042 <HAL_DMA_IRQHandler+0x73a>
 8011066:	2280      	movs	r2, #128	; 0x80
 8011068:	0092      	lsls	r2, r2, #2
 801106a:	e7ea      	b.n	8011042 <HAL_DMA_IRQHandler+0x73a>
 801106c:	2280      	movs	r2, #128	; 0x80
 801106e:	0192      	lsls	r2, r2, #6
 8011070:	e7e7      	b.n	8011042 <HAL_DMA_IRQHandler+0x73a>
 8011072:	2280      	movs	r2, #128	; 0x80
 8011074:	0292      	lsls	r2, r2, #10
 8011076:	e7e4      	b.n	8011042 <HAL_DMA_IRQHandler+0x73a>
 8011078:	2280      	movs	r2, #128	; 0x80
 801107a:	0392      	lsls	r2, r2, #14
 801107c:	e7e1      	b.n	8011042 <HAL_DMA_IRQHandler+0x73a>
 801107e:	2280      	movs	r2, #128	; 0x80
 8011080:	0492      	lsls	r2, r2, #18
 8011082:	e7de      	b.n	8011042 <HAL_DMA_IRQHandler+0x73a>
 8011084:	2202      	movs	r2, #2
 8011086:	e7dc      	b.n	8011042 <HAL_DMA_IRQHandler+0x73a>
 8011088:	2220      	movs	r2, #32
 801108a:	e7da      	b.n	8011042 <HAL_DMA_IRQHandler+0x73a>
 801108c:	2280      	movs	r2, #128	; 0x80
 801108e:	0092      	lsls	r2, r2, #2
 8011090:	e7d7      	b.n	8011042 <HAL_DMA_IRQHandler+0x73a>
 8011092:	4a22      	ldr	r2, [pc, #136]	; (801111c <HAL_DMA_IRQHandler+0x814>)
 8011094:	4293      	cmp	r3, r2
 8011096:	d023      	beq.n	80110e0 <HAL_DMA_IRQHandler+0x7d8>
 8011098:	4a21      	ldr	r2, [pc, #132]	; (8011120 <HAL_DMA_IRQHandler+0x818>)
 801109a:	4293      	cmp	r3, r2
 801109c:	d024      	beq.n	80110e8 <HAL_DMA_IRQHandler+0x7e0>
 801109e:	4a21      	ldr	r2, [pc, #132]	; (8011124 <HAL_DMA_IRQHandler+0x81c>)
 80110a0:	4293      	cmp	r3, r2
 80110a2:	d023      	beq.n	80110ec <HAL_DMA_IRQHandler+0x7e4>
 80110a4:	4a20      	ldr	r2, [pc, #128]	; (8011128 <HAL_DMA_IRQHandler+0x820>)
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d023      	beq.n	80110f2 <HAL_DMA_IRQHandler+0x7ea>
 80110aa:	4a20      	ldr	r2, [pc, #128]	; (801112c <HAL_DMA_IRQHandler+0x824>)
 80110ac:	4293      	cmp	r3, r2
 80110ae:	d023      	beq.n	80110f8 <HAL_DMA_IRQHandler+0x7f0>
 80110b0:	4a1f      	ldr	r2, [pc, #124]	; (8011130 <HAL_DMA_IRQHandler+0x828>)
 80110b2:	4293      	cmp	r3, r2
 80110b4:	d023      	beq.n	80110fe <HAL_DMA_IRQHandler+0x7f6>
 80110b6:	4a18      	ldr	r2, [pc, #96]	; (8011118 <HAL_DMA_IRQHandler+0x810>)
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d023      	beq.n	8011104 <HAL_DMA_IRQHandler+0x7fc>
 80110bc:	4a1d      	ldr	r2, [pc, #116]	; (8011134 <HAL_DMA_IRQHandler+0x82c>)
 80110be:	4293      	cmp	r3, r2
 80110c0:	d023      	beq.n	801110a <HAL_DMA_IRQHandler+0x802>
 80110c2:	4a1d      	ldr	r2, [pc, #116]	; (8011138 <HAL_DMA_IRQHandler+0x830>)
 80110c4:	4293      	cmp	r3, r2
 80110c6:	d022      	beq.n	801110e <HAL_DMA_IRQHandler+0x806>
 80110c8:	4a1c      	ldr	r2, [pc, #112]	; (801113c <HAL_DMA_IRQHandler+0x834>)
 80110ca:	4293      	cmp	r3, r2
 80110cc:	d021      	beq.n	8011112 <HAL_DMA_IRQHandler+0x80a>
 80110ce:	4a1c      	ldr	r2, [pc, #112]	; (8011140 <HAL_DMA_IRQHandler+0x838>)
 80110d0:	4293      	cmp	r3, r2
 80110d2:	d002      	beq.n	80110da <HAL_DMA_IRQHandler+0x7d2>
 80110d4:	2280      	movs	r2, #128	; 0x80
 80110d6:	0292      	lsls	r2, r2, #10
 80110d8:	e003      	b.n	80110e2 <HAL_DMA_IRQHandler+0x7da>
 80110da:	2280      	movs	r2, #128	; 0x80
 80110dc:	0192      	lsls	r2, r2, #6
 80110de:	e000      	b.n	80110e2 <HAL_DMA_IRQHandler+0x7da>
 80110e0:	2202      	movs	r2, #2
 80110e2:	4b18      	ldr	r3, [pc, #96]	; (8011144 <HAL_DMA_IRQHandler+0x83c>)
 80110e4:	605a      	str	r2, [r3, #4]
 80110e6:	e7ae      	b.n	8011046 <HAL_DMA_IRQHandler+0x73e>
 80110e8:	2220      	movs	r2, #32
 80110ea:	e7fa      	b.n	80110e2 <HAL_DMA_IRQHandler+0x7da>
 80110ec:	2280      	movs	r2, #128	; 0x80
 80110ee:	0092      	lsls	r2, r2, #2
 80110f0:	e7f7      	b.n	80110e2 <HAL_DMA_IRQHandler+0x7da>
 80110f2:	2280      	movs	r2, #128	; 0x80
 80110f4:	0192      	lsls	r2, r2, #6
 80110f6:	e7f4      	b.n	80110e2 <HAL_DMA_IRQHandler+0x7da>
 80110f8:	2280      	movs	r2, #128	; 0x80
 80110fa:	0292      	lsls	r2, r2, #10
 80110fc:	e7f1      	b.n	80110e2 <HAL_DMA_IRQHandler+0x7da>
 80110fe:	2280      	movs	r2, #128	; 0x80
 8011100:	0392      	lsls	r2, r2, #14
 8011102:	e7ee      	b.n	80110e2 <HAL_DMA_IRQHandler+0x7da>
 8011104:	2280      	movs	r2, #128	; 0x80
 8011106:	0492      	lsls	r2, r2, #18
 8011108:	e7eb      	b.n	80110e2 <HAL_DMA_IRQHandler+0x7da>
 801110a:	2202      	movs	r2, #2
 801110c:	e7e9      	b.n	80110e2 <HAL_DMA_IRQHandler+0x7da>
 801110e:	2220      	movs	r2, #32
 8011110:	e7e7      	b.n	80110e2 <HAL_DMA_IRQHandler+0x7da>
 8011112:	2280      	movs	r2, #128	; 0x80
 8011114:	0092      	lsls	r2, r2, #2
 8011116:	e7e4      	b.n	80110e2 <HAL_DMA_IRQHandler+0x7da>
 8011118:	40020080 	.word	0x40020080
 801111c:	40020008 	.word	0x40020008
 8011120:	4002001c 	.word	0x4002001c
 8011124:	40020030 	.word	0x40020030
 8011128:	40020044 	.word	0x40020044
 801112c:	40020058 	.word	0x40020058
 8011130:	4002006c 	.word	0x4002006c
 8011134:	40020408 	.word	0x40020408
 8011138:	4002041c 	.word	0x4002041c
 801113c:	40020430 	.word	0x40020430
 8011140:	40020444 	.word	0x40020444
 8011144:	40020000 	.word	0x40020000
 8011148:	40020400 	.word	0x40020400

0801114c <FLASH_Program_HalfWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 801114c:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801114e:	4b05      	ldr	r3, [pc, #20]	; (8011164 <FLASH_Program_HalfWord+0x18>)
 8011150:	2200      	movs	r2, #0
 8011152:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011154:	4a04      	ldr	r2, [pc, #16]	; (8011168 <FLASH_Program_HalfWord+0x1c>)
 8011156:	6913      	ldr	r3, [r2, #16]
 8011158:	2401      	movs	r4, #1
 801115a:	4323      	orrs	r3, r4
 801115c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 801115e:	8001      	strh	r1, [r0, #0]
}
 8011160:	bd10      	pop	{r4, pc}
 8011162:	46c0      	nop			; (mov r8, r8)
 8011164:	20006f28 	.word	0x20006f28
 8011168:	40022000 	.word	0x40022000

0801116c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 801116c:	4b0a      	ldr	r3, [pc, #40]	; (8011198 <FLASH_SetErrorCode+0x2c>)
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	06db      	lsls	r3, r3, #27
 8011172:	d504      	bpl.n	801117e <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011174:	4a09      	ldr	r2, [pc, #36]	; (801119c <FLASH_SetErrorCode+0x30>)
 8011176:	69d3      	ldr	r3, [r2, #28]
 8011178:	2102      	movs	r1, #2
 801117a:	430b      	orrs	r3, r1
 801117c:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801117e:	4b06      	ldr	r3, [pc, #24]	; (8011198 <FLASH_SetErrorCode+0x2c>)
 8011180:	68db      	ldr	r3, [r3, #12]
 8011182:	075b      	lsls	r3, r3, #29
 8011184:	d504      	bpl.n	8011190 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8011186:	4a05      	ldr	r2, [pc, #20]	; (801119c <FLASH_SetErrorCode+0x30>)
 8011188:	69d3      	ldr	r3, [r2, #28]
 801118a:	2101      	movs	r1, #1
 801118c:	430b      	orrs	r3, r1
 801118e:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8011190:	4b01      	ldr	r3, [pc, #4]	; (8011198 <FLASH_SetErrorCode+0x2c>)
 8011192:	2214      	movs	r2, #20
 8011194:	60da      	str	r2, [r3, #12]
}  
 8011196:	4770      	bx	lr
 8011198:	40022000 	.word	0x40022000
 801119c:	20006f28 	.word	0x20006f28

080111a0 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80111a0:	4b06      	ldr	r3, [pc, #24]	; (80111bc <HAL_FLASH_Unlock+0x1c>)
 80111a2:	691b      	ldr	r3, [r3, #16]
 80111a4:	061b      	lsls	r3, r3, #24
 80111a6:	d506      	bpl.n	80111b6 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80111a8:	4b04      	ldr	r3, [pc, #16]	; (80111bc <HAL_FLASH_Unlock+0x1c>)
 80111aa:	4a05      	ldr	r2, [pc, #20]	; (80111c0 <HAL_FLASH_Unlock+0x20>)
 80111ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80111ae:	4a05      	ldr	r2, [pc, #20]	; (80111c4 <HAL_FLASH_Unlock+0x24>)
 80111b0:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 80111b2:	2000      	movs	r0, #0
}
 80111b4:	4770      	bx	lr
    return HAL_ERROR;
 80111b6:	2001      	movs	r0, #1
 80111b8:	e7fc      	b.n	80111b4 <HAL_FLASH_Unlock+0x14>
 80111ba:	46c0      	nop			; (mov r8, r8)
 80111bc:	40022000 	.word	0x40022000
 80111c0:	45670123 	.word	0x45670123
 80111c4:	cdef89ab 	.word	0xcdef89ab

080111c8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80111c8:	4a03      	ldr	r2, [pc, #12]	; (80111d8 <HAL_FLASH_Lock+0x10>)
 80111ca:	6913      	ldr	r3, [r2, #16]
 80111cc:	2180      	movs	r1, #128	; 0x80
 80111ce:	430b      	orrs	r3, r1
 80111d0:	6113      	str	r3, [r2, #16]
}
 80111d2:	2000      	movs	r0, #0
 80111d4:	4770      	bx	lr
 80111d6:	46c0      	nop			; (mov r8, r8)
 80111d8:	40022000 	.word	0x40022000

080111dc <FLASH_WaitForLastOperation>:
{
 80111dc:	b570      	push	{r4, r5, r6, lr}
 80111de:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80111e0:	f7fe fe80 	bl	800fee4 <HAL_GetTick>
 80111e4:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80111e6:	4b12      	ldr	r3, [pc, #72]	; (8011230 <FLASH_WaitForLastOperation+0x54>)
 80111e8:	68db      	ldr	r3, [r3, #12]
 80111ea:	07db      	lsls	r3, r3, #31
 80111ec:	d50a      	bpl.n	8011204 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 80111ee:	1c63      	adds	r3, r4, #1
 80111f0:	d0f9      	beq.n	80111e6 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80111f2:	2c00      	cmp	r4, #0
 80111f4:	d004      	beq.n	8011200 <FLASH_WaitForLastOperation+0x24>
 80111f6:	f7fe fe75 	bl	800fee4 <HAL_GetTick>
 80111fa:	1b40      	subs	r0, r0, r5
 80111fc:	42a0      	cmp	r0, r4
 80111fe:	d9f2      	bls.n	80111e6 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8011200:	2003      	movs	r0, #3
 8011202:	e00f      	b.n	8011224 <FLASH_WaitForLastOperation+0x48>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011204:	4b0a      	ldr	r3, [pc, #40]	; (8011230 <FLASH_WaitForLastOperation+0x54>)
 8011206:	68db      	ldr	r3, [r3, #12]
 8011208:	069b      	lsls	r3, r3, #26
 801120a:	d502      	bpl.n	8011212 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801120c:	4b08      	ldr	r3, [pc, #32]	; (8011230 <FLASH_WaitForLastOperation+0x54>)
 801120e:	2220      	movs	r2, #32
 8011210:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011212:	4b07      	ldr	r3, [pc, #28]	; (8011230 <FLASH_WaitForLastOperation+0x54>)
 8011214:	68db      	ldr	r3, [r3, #12]
 8011216:	06db      	lsls	r3, r3, #27
 8011218:	d405      	bmi.n	8011226 <FLASH_WaitForLastOperation+0x4a>
 801121a:	4b05      	ldr	r3, [pc, #20]	; (8011230 <FLASH_WaitForLastOperation+0x54>)
 801121c:	68db      	ldr	r3, [r3, #12]
 801121e:	075b      	lsls	r3, r3, #29
 8011220:	d401      	bmi.n	8011226 <FLASH_WaitForLastOperation+0x4a>
  return HAL_OK;
 8011222:	2000      	movs	r0, #0
}
 8011224:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 8011226:	f7ff ffa1 	bl	801116c <FLASH_SetErrorCode>
    return HAL_ERROR;
 801122a:	2001      	movs	r0, #1
 801122c:	e7fa      	b.n	8011224 <FLASH_WaitForLastOperation+0x48>
 801122e:	46c0      	nop			; (mov r8, r8)
 8011230:	40022000 	.word	0x40022000

08011234 <HAL_FLASH_Program>:
{
 8011234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011236:	46ce      	mov	lr, r9
 8011238:	4647      	mov	r7, r8
 801123a:	b580      	push	{r7, lr}
 801123c:	0005      	movs	r5, r0
 801123e:	000e      	movs	r6, r1
 8011240:	4690      	mov	r8, r2
 8011242:	001f      	movs	r7, r3
  __HAL_LOCK(&pFlash);
 8011244:	4b22      	ldr	r3, [pc, #136]	; (80112d0 <HAL_FLASH_Program+0x9c>)
 8011246:	7e1b      	ldrb	r3, [r3, #24]
 8011248:	2b01      	cmp	r3, #1
 801124a:	d03e      	beq.n	80112ca <HAL_FLASH_Program+0x96>
 801124c:	4b20      	ldr	r3, [pc, #128]	; (80112d0 <HAL_FLASH_Program+0x9c>)
 801124e:	2201      	movs	r2, #1
 8011250:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011252:	4820      	ldr	r0, [pc, #128]	; (80112d4 <HAL_FLASH_Program+0xa0>)
 8011254:	f7ff ffc2 	bl	80111dc <FLASH_WaitForLastOperation>
 8011258:	1e04      	subs	r4, r0, #0
  if(status == HAL_OK)
 801125a:	d12f      	bne.n	80112bc <HAL_FLASH_Program+0x88>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 801125c:	2d01      	cmp	r5, #1
 801125e:	d007      	beq.n	8011270 <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8011260:	2d02      	cmp	r5, #2
 8011262:	d002      	beq.n	801126a <HAL_FLASH_Program+0x36>
      nbiterations = 4;
 8011264:	2304      	movs	r3, #4
 8011266:	4699      	mov	r9, r3
    for (index = 0; index < nbiterations; index++)
 8011268:	e01d      	b.n	80112a6 <HAL_FLASH_Program+0x72>
      nbiterations = 2;
 801126a:	2302      	movs	r3, #2
 801126c:	4699      	mov	r9, r3
 801126e:	e01a      	b.n	80112a6 <HAL_FLASH_Program+0x72>
      nbiterations = 1;
 8011270:	2301      	movs	r3, #1
 8011272:	4699      	mov	r9, r3
 8011274:	e017      	b.n	80112a6 <HAL_FLASH_Program+0x72>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011276:	2220      	movs	r2, #32
 8011278:	1ad2      	subs	r2, r2, r3
 801127a:	0039      	movs	r1, r7
 801127c:	4091      	lsls	r1, r2
 801127e:	000a      	movs	r2, r1
 8011280:	4641      	mov	r1, r8
 8011282:	40d9      	lsrs	r1, r3
 8011284:	4311      	orrs	r1, r2
 8011286:	b289      	uxth	r1, r1
 8011288:	1980      	adds	r0, r0, r6
 801128a:	f7ff ff5f 	bl	801114c <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801128e:	4811      	ldr	r0, [pc, #68]	; (80112d4 <HAL_FLASH_Program+0xa0>)
 8011290:	f7ff ffa4 	bl	80111dc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8011294:	4a10      	ldr	r2, [pc, #64]	; (80112d8 <HAL_FLASH_Program+0xa4>)
 8011296:	6913      	ldr	r3, [r2, #16]
 8011298:	2101      	movs	r1, #1
 801129a:	438b      	bics	r3, r1
 801129c:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 801129e:	2800      	cmp	r0, #0
 80112a0:	d10c      	bne.n	80112bc <HAL_FLASH_Program+0x88>
    for (index = 0; index < nbiterations; index++)
 80112a2:	3401      	adds	r4, #1
 80112a4:	b2e4      	uxtb	r4, r4
 80112a6:	454c      	cmp	r4, r9
 80112a8:	d208      	bcs.n	80112bc <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80112aa:	0060      	lsls	r0, r4, #1
 80112ac:	0123      	lsls	r3, r4, #4
 80112ae:	2220      	movs	r2, #32
 80112b0:	4252      	negs	r2, r2
 80112b2:	189a      	adds	r2, r3, r2
 80112b4:	d4df      	bmi.n	8011276 <HAL_FLASH_Program+0x42>
 80112b6:	0039      	movs	r1, r7
 80112b8:	40d1      	lsrs	r1, r2
 80112ba:	e7e4      	b.n	8011286 <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 80112bc:	4b04      	ldr	r3, [pc, #16]	; (80112d0 <HAL_FLASH_Program+0x9c>)
 80112be:	2200      	movs	r2, #0
 80112c0:	761a      	strb	r2, [r3, #24]
}
 80112c2:	bcc0      	pop	{r6, r7}
 80112c4:	46b9      	mov	r9, r7
 80112c6:	46b0      	mov	r8, r6
 80112c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80112ca:	2002      	movs	r0, #2
 80112cc:	e7f9      	b.n	80112c2 <HAL_FLASH_Program+0x8e>
 80112ce:	46c0      	nop			; (mov r8, r8)
 80112d0:	20006f28 	.word	0x20006f28
 80112d4:	0000c350 	.word	0x0000c350
 80112d8:	40022000 	.word	0x40022000

080112dc <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80112dc:	4b06      	ldr	r3, [pc, #24]	; (80112f8 <FLASH_MassErase+0x1c>)
 80112de:	2200      	movs	r2, #0
 80112e0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80112e2:	4b06      	ldr	r3, [pc, #24]	; (80112fc <FLASH_MassErase+0x20>)
 80112e4:	691a      	ldr	r2, [r3, #16]
 80112e6:	2104      	movs	r1, #4
 80112e8:	430a      	orrs	r2, r1
 80112ea:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80112ec:	691a      	ldr	r2, [r3, #16]
 80112ee:	313c      	adds	r1, #60	; 0x3c
 80112f0:	430a      	orrs	r2, r1
 80112f2:	611a      	str	r2, [r3, #16]
}
 80112f4:	4770      	bx	lr
 80112f6:	46c0      	nop			; (mov r8, r8)
 80112f8:	20006f28 	.word	0x20006f28
 80112fc:	40022000 	.word	0x40022000

08011300 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011300:	4b06      	ldr	r3, [pc, #24]	; (801131c <FLASH_PageErase+0x1c>)
 8011302:	2200      	movs	r2, #0
 8011304:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011306:	4b06      	ldr	r3, [pc, #24]	; (8011320 <FLASH_PageErase+0x20>)
 8011308:	691a      	ldr	r2, [r3, #16]
 801130a:	2102      	movs	r1, #2
 801130c:	430a      	orrs	r2, r1
 801130e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8011310:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011312:	691a      	ldr	r2, [r3, #16]
 8011314:	313e      	adds	r1, #62	; 0x3e
 8011316:	430a      	orrs	r2, r1
 8011318:	611a      	str	r2, [r3, #16]
}
 801131a:	4770      	bx	lr
 801131c:	20006f28 	.word	0x20006f28
 8011320:	40022000 	.word	0x40022000

08011324 <HAL_FLASHEx_Erase>:
{
 8011324:	b570      	push	{r4, r5, r6, lr}
 8011326:	0005      	movs	r5, r0
 8011328:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 801132a:	4b24      	ldr	r3, [pc, #144]	; (80113bc <HAL_FLASHEx_Erase+0x98>)
 801132c:	7e1b      	ldrb	r3, [r3, #24]
 801132e:	2b01      	cmp	r3, #1
 8011330:	d041      	beq.n	80113b6 <HAL_FLASHEx_Erase+0x92>
 8011332:	4b22      	ldr	r3, [pc, #136]	; (80113bc <HAL_FLASHEx_Erase+0x98>)
 8011334:	2201      	movs	r2, #1
 8011336:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011338:	6803      	ldr	r3, [r0, #0]
 801133a:	2b01      	cmp	r3, #1
 801133c:	d022      	beq.n	8011384 <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801133e:	4820      	ldr	r0, [pc, #128]	; (80113c0 <HAL_FLASHEx_Erase+0x9c>)
 8011340:	f7ff ff4c 	bl	80111dc <FLASH_WaitForLastOperation>
 8011344:	2800      	cmp	r0, #0
 8011346:	d131      	bne.n	80113ac <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFF;
 8011348:	2301      	movs	r3, #1
 801134a:	425b      	negs	r3, r3
 801134c:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 801134e:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011350:	3001      	adds	r0, #1
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011352:	68ab      	ldr	r3, [r5, #8]
 8011354:	02db      	lsls	r3, r3, #11
 8011356:	686a      	ldr	r2, [r5, #4]
 8011358:	4694      	mov	ip, r2
 801135a:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 801135c:	42a3      	cmp	r3, r4
 801135e:	d926      	bls.n	80113ae <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8011360:	0020      	movs	r0, r4
 8011362:	f7ff ffcd 	bl	8011300 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011366:	4816      	ldr	r0, [pc, #88]	; (80113c0 <HAL_FLASHEx_Erase+0x9c>)
 8011368:	f7ff ff38 	bl	80111dc <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 801136c:	4a15      	ldr	r2, [pc, #84]	; (80113c4 <HAL_FLASHEx_Erase+0xa0>)
 801136e:	6913      	ldr	r3, [r2, #16]
 8011370:	2102      	movs	r1, #2
 8011372:	438b      	bics	r3, r1
 8011374:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8011376:	2800      	cmp	r0, #0
 8011378:	d116      	bne.n	80113a8 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 801137a:	2380      	movs	r3, #128	; 0x80
 801137c:	011b      	lsls	r3, r3, #4
 801137e:	469c      	mov	ip, r3
 8011380:	4464      	add	r4, ip
 8011382:	e7e6      	b.n	8011352 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011384:	480e      	ldr	r0, [pc, #56]	; (80113c0 <HAL_FLASHEx_Erase+0x9c>)
 8011386:	f7ff ff29 	bl	80111dc <FLASH_WaitForLastOperation>
 801138a:	2800      	cmp	r0, #0
 801138c:	d001      	beq.n	8011392 <HAL_FLASHEx_Erase+0x6e>
  HAL_StatusTypeDef status = HAL_ERROR;
 801138e:	2001      	movs	r0, #1
 8011390:	e00d      	b.n	80113ae <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 8011392:	f7ff ffa3 	bl	80112dc <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011396:	480a      	ldr	r0, [pc, #40]	; (80113c0 <HAL_FLASHEx_Erase+0x9c>)
 8011398:	f7ff ff20 	bl	80111dc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 801139c:	4a09      	ldr	r2, [pc, #36]	; (80113c4 <HAL_FLASHEx_Erase+0xa0>)
 801139e:	6913      	ldr	r3, [r2, #16]
 80113a0:	2104      	movs	r1, #4
 80113a2:	438b      	bics	r3, r1
 80113a4:	6113      	str	r3, [r2, #16]
 80113a6:	e002      	b.n	80113ae <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 80113a8:	6034      	str	r4, [r6, #0]
            break;
 80113aa:	e000      	b.n	80113ae <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 80113ac:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80113ae:	4b03      	ldr	r3, [pc, #12]	; (80113bc <HAL_FLASHEx_Erase+0x98>)
 80113b0:	2200      	movs	r2, #0
 80113b2:	761a      	strb	r2, [r3, #24]
}
 80113b4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 80113b6:	2002      	movs	r0, #2
 80113b8:	e7fc      	b.n	80113b4 <HAL_FLASHEx_Erase+0x90>
 80113ba:	46c0      	nop			; (mov r8, r8)
 80113bc:	20006f28 	.word	0x20006f28
 80113c0:	0000c350 	.word	0x0000c350
 80113c4:	40022000 	.word	0x40022000

080113c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80113c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113ca:	46c6      	mov	lr, r8
 80113cc:	b500      	push	{lr}
 80113ce:	b082      	sub	sp, #8
  uint32_t position = 0x00;
 80113d0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 80113d2:	e033      	b.n	801143c <HAL_GPIO_Init+0x74>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80113d4:	2604      	movs	r6, #4
 80113d6:	e000      	b.n	80113da <HAL_GPIO_Init+0x12>
 80113d8:	2600      	movs	r6, #0
 80113da:	40a6      	lsls	r6, r4
 80113dc:	0034      	movs	r4, r6
 80113de:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80113e0:	3202      	adds	r2, #2
 80113e2:	0092      	lsls	r2, r2, #2
 80113e4:	4e57      	ldr	r6, [pc, #348]	; (8011544 <HAL_GPIO_Init+0x17c>)
 80113e6:	5194      	str	r4, [r2, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80113e8:	4a57      	ldr	r2, [pc, #348]	; (8011548 <HAL_GPIO_Init+0x180>)
 80113ea:	6814      	ldr	r4, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80113ec:	43ea      	mvns	r2, r5
 80113ee:	0026      	movs	r6, r4
 80113f0:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80113f2:	684f      	ldr	r7, [r1, #4]
 80113f4:	03ff      	lsls	r7, r7, #15
 80113f6:	d501      	bpl.n	80113fc <HAL_GPIO_Init+0x34>
        {
          SET_BIT(temp, iocurrent); 
 80113f8:	432c      	orrs	r4, r5
 80113fa:	0026      	movs	r6, r4
        }
        EXTI->IMR = temp;
 80113fc:	4c52      	ldr	r4, [pc, #328]	; (8011548 <HAL_GPIO_Init+0x180>)
 80113fe:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8011400:	6864      	ldr	r4, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8011402:	0026      	movs	r6, r4
 8011404:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011406:	684f      	ldr	r7, [r1, #4]
 8011408:	03bf      	lsls	r7, r7, #14
 801140a:	d501      	bpl.n	8011410 <HAL_GPIO_Init+0x48>
        { 
          SET_BIT(temp, iocurrent); 
 801140c:	432c      	orrs	r4, r5
 801140e:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 8011410:	4c4d      	ldr	r4, [pc, #308]	; (8011548 <HAL_GPIO_Init+0x180>)
 8011412:	6066      	str	r6, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011414:	68a4      	ldr	r4, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011416:	0026      	movs	r6, r4
 8011418:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801141a:	684f      	ldr	r7, [r1, #4]
 801141c:	02ff      	lsls	r7, r7, #11
 801141e:	d501      	bpl.n	8011424 <HAL_GPIO_Init+0x5c>
        {
          SET_BIT(temp, iocurrent); 
 8011420:	432c      	orrs	r4, r5
 8011422:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 8011424:	4c48      	ldr	r4, [pc, #288]	; (8011548 <HAL_GPIO_Init+0x180>)
 8011426:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8011428:	68e4      	ldr	r4, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 801142a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801142c:	684e      	ldr	r6, [r1, #4]
 801142e:	02b6      	lsls	r6, r6, #10
 8011430:	d501      	bpl.n	8011436 <HAL_GPIO_Init+0x6e>
        {
          SET_BIT(temp, iocurrent); 
 8011432:	002a      	movs	r2, r5
 8011434:	4322      	orrs	r2, r4
        }
        EXTI->FTSR = temp;
 8011436:	4c44      	ldr	r4, [pc, #272]	; (8011548 <HAL_GPIO_Init+0x180>)
 8011438:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 801143a:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 801143c:	680c      	ldr	r4, [r1, #0]
 801143e:	0022      	movs	r2, r4
 8011440:	40da      	lsrs	r2, r3
 8011442:	d07a      	beq.n	801153a <HAL_GPIO_Init+0x172>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011444:	2201      	movs	r2, #1
 8011446:	409a      	lsls	r2, r3
 8011448:	0025      	movs	r5, r4
 801144a:	4015      	ands	r5, r2
    if(iocurrent)
 801144c:	4214      	tst	r4, r2
 801144e:	d0f4      	beq.n	801143a <HAL_GPIO_Init+0x72>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011450:	684a      	ldr	r2, [r1, #4]
 8011452:	2a02      	cmp	r2, #2
 8011454:	d001      	beq.n	801145a <HAL_GPIO_Init+0x92>
 8011456:	2a12      	cmp	r2, #18
 8011458:	d10e      	bne.n	8011478 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3];
 801145a:	08da      	lsrs	r2, r3, #3
 801145c:	3208      	adds	r2, #8
 801145e:	0092      	lsls	r2, r2, #2
 8011460:	5816      	ldr	r6, [r2, r0]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8011462:	2407      	movs	r4, #7
 8011464:	401c      	ands	r4, r3
 8011466:	00a4      	lsls	r4, r4, #2
 8011468:	270f      	movs	r7, #15
 801146a:	40a7      	lsls	r7, r4
 801146c:	43be      	bics	r6, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 801146e:	690f      	ldr	r7, [r1, #16]
 8011470:	40a7      	lsls	r7, r4
 8011472:	003c      	movs	r4, r7
 8011474:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3] = temp;
 8011476:	5014      	str	r4, [r2, r0]
      temp = GPIOx->MODER;
 8011478:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 801147a:	005c      	lsls	r4, r3, #1
 801147c:	2203      	movs	r2, #3
 801147e:	0016      	movs	r6, r2
 8011480:	40a6      	lsls	r6, r4
 8011482:	46b4      	mov	ip, r6
 8011484:	43f6      	mvns	r6, r6
 8011486:	46b0      	mov	r8, r6
 8011488:	4666      	mov	r6, ip
 801148a:	43b7      	bics	r7, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801148c:	684e      	ldr	r6, [r1, #4]
 801148e:	4032      	ands	r2, r6
 8011490:	40a2      	lsls	r2, r4
 8011492:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8011494:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011496:	684a      	ldr	r2, [r1, #4]
 8011498:	1e57      	subs	r7, r2, #1
 801149a:	2f01      	cmp	r7, #1
 801149c:	d903      	bls.n	80114a6 <HAL_GPIO_Init+0xde>
 801149e:	2a11      	cmp	r2, #17
 80114a0:	d001      	beq.n	80114a6 <HAL_GPIO_Init+0xde>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80114a2:	2a12      	cmp	r2, #18
 80114a4:	d111      	bne.n	80114ca <HAL_GPIO_Init+0x102>
        temp = GPIOx->OSPEEDR; 
 80114a6:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80114a8:	4642      	mov	r2, r8
 80114aa:	4017      	ands	r7, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80114ac:	68ca      	ldr	r2, [r1, #12]
 80114ae:	40a2      	lsls	r2, r4
 80114b0:	433a      	orrs	r2, r7
        GPIOx->OSPEEDR = temp;
 80114b2:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 80114b4:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80114b6:	2201      	movs	r2, #1
 80114b8:	0016      	movs	r6, r2
 80114ba:	409e      	lsls	r6, r3
 80114bc:	43b7      	bics	r7, r6
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80114be:	684e      	ldr	r6, [r1, #4]
 80114c0:	0936      	lsrs	r6, r6, #4
 80114c2:	4032      	ands	r2, r6
 80114c4:	409a      	lsls	r2, r3
 80114c6:	433a      	orrs	r2, r7
        GPIOx->OTYPER = temp;
 80114c8:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80114ca:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80114cc:	4646      	mov	r6, r8
 80114ce:	4032      	ands	r2, r6
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80114d0:	688e      	ldr	r6, [r1, #8]
 80114d2:	40a6      	lsls	r6, r4
 80114d4:	4316      	orrs	r6, r2
      GPIOx->PUPDR = temp;
 80114d6:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80114d8:	684a      	ldr	r2, [r1, #4]
 80114da:	00d2      	lsls	r2, r2, #3
 80114dc:	d5ad      	bpl.n	801143a <HAL_GPIO_Init+0x72>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80114de:	4c1b      	ldr	r4, [pc, #108]	; (801154c <HAL_GPIO_Init+0x184>)
 80114e0:	69a6      	ldr	r6, [r4, #24]
 80114e2:	2201      	movs	r2, #1
 80114e4:	4316      	orrs	r6, r2
 80114e6:	61a6      	str	r6, [r4, #24]
 80114e8:	69a4      	ldr	r4, [r4, #24]
 80114ea:	4022      	ands	r2, r4
 80114ec:	9201      	str	r2, [sp, #4]
 80114ee:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80114f0:	089a      	lsrs	r2, r3, #2
 80114f2:	1c94      	adds	r4, r2, #2
 80114f4:	00a4      	lsls	r4, r4, #2
 80114f6:	4e13      	ldr	r6, [pc, #76]	; (8011544 <HAL_GPIO_Init+0x17c>)
 80114f8:	59a7      	ldr	r7, [r4, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80114fa:	2603      	movs	r6, #3
 80114fc:	401e      	ands	r6, r3
 80114fe:	00b4      	lsls	r4, r6, #2
 8011500:	260f      	movs	r6, #15
 8011502:	40a6      	lsls	r6, r4
 8011504:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011506:	2690      	movs	r6, #144	; 0x90
 8011508:	05f6      	lsls	r6, r6, #23
 801150a:	42b0      	cmp	r0, r6
 801150c:	d100      	bne.n	8011510 <HAL_GPIO_Init+0x148>
 801150e:	e763      	b.n	80113d8 <HAL_GPIO_Init+0x10>
 8011510:	4e0f      	ldr	r6, [pc, #60]	; (8011550 <HAL_GPIO_Init+0x188>)
 8011512:	42b0      	cmp	r0, r6
 8011514:	d00b      	beq.n	801152e <HAL_GPIO_Init+0x166>
 8011516:	4e0f      	ldr	r6, [pc, #60]	; (8011554 <HAL_GPIO_Init+0x18c>)
 8011518:	42b0      	cmp	r0, r6
 801151a:	d00a      	beq.n	8011532 <HAL_GPIO_Init+0x16a>
 801151c:	4e0e      	ldr	r6, [pc, #56]	; (8011558 <HAL_GPIO_Init+0x190>)
 801151e:	42b0      	cmp	r0, r6
 8011520:	d009      	beq.n	8011536 <HAL_GPIO_Init+0x16e>
 8011522:	4e0e      	ldr	r6, [pc, #56]	; (801155c <HAL_GPIO_Init+0x194>)
 8011524:	42b0      	cmp	r0, r6
 8011526:	d100      	bne.n	801152a <HAL_GPIO_Init+0x162>
 8011528:	e754      	b.n	80113d4 <HAL_GPIO_Init+0xc>
 801152a:	2605      	movs	r6, #5
 801152c:	e755      	b.n	80113da <HAL_GPIO_Init+0x12>
 801152e:	2601      	movs	r6, #1
 8011530:	e753      	b.n	80113da <HAL_GPIO_Init+0x12>
 8011532:	2602      	movs	r6, #2
 8011534:	e751      	b.n	80113da <HAL_GPIO_Init+0x12>
 8011536:	2603      	movs	r6, #3
 8011538:	e74f      	b.n	80113da <HAL_GPIO_Init+0x12>
  } 
}
 801153a:	b002      	add	sp, #8
 801153c:	bc80      	pop	{r7}
 801153e:	46b8      	mov	r8, r7
 8011540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011542:	46c0      	nop			; (mov r8, r8)
 8011544:	40010000 	.word	0x40010000
 8011548:	40010400 	.word	0x40010400
 801154c:	40021000 	.word	0x40021000
 8011550:	48000400 	.word	0x48000400
 8011554:	48000800 	.word	0x48000800
 8011558:	48000c00 	.word	0x48000c00
 801155c:	48001000 	.word	0x48001000

08011560 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011562:	46ce      	mov	lr, r9
 8011564:	4647      	mov	r7, r8
 8011566:	b580      	push	{r7, lr}
  uint32_t position = 0x00;
 8011568:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 801156a:	e006      	b.n	801157a <HAL_GPIO_DeInit+0x1a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 801156c:	2604      	movs	r6, #4
 801156e:	e000      	b.n	8011572 <HAL_GPIO_DeInit+0x12>
 8011570:	2600      	movs	r6, #0
 8011572:	4096      	lsls	r6, r2
 8011574:	42a6      	cmp	r6, r4
 8011576:	d050      	beq.n	801161a <HAL_GPIO_DeInit+0xba>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8011578:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 801157a:	000a      	movs	r2, r1
 801157c:	40da      	lsrs	r2, r3
 801157e:	d061      	beq.n	8011644 <HAL_GPIO_DeInit+0xe4>
    iocurrent = (GPIO_Pin) & (1 << position);
 8011580:	2201      	movs	r2, #1
 8011582:	409a      	lsls	r2, r3
 8011584:	000f      	movs	r7, r1
 8011586:	4017      	ands	r7, r2
    if (iocurrent)
 8011588:	4211      	tst	r1, r2
 801158a:	d0f5      	beq.n	8011578 <HAL_GPIO_DeInit+0x18>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 801158c:	6804      	ldr	r4, [r0, #0]
 801158e:	005d      	lsls	r5, r3, #1
 8011590:	2203      	movs	r2, #3
 8011592:	4691      	mov	r9, r2
 8011594:	0016      	movs	r6, r2
 8011596:	40ae      	lsls	r6, r5
 8011598:	46b4      	mov	ip, r6
 801159a:	43b4      	bics	r4, r6
 801159c:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801159e:	08dd      	lsrs	r5, r3, #3
 80115a0:	3508      	adds	r5, #8
 80115a2:	00ad      	lsls	r5, r5, #2
 80115a4:	582a      	ldr	r2, [r5, r0]
 80115a6:	4690      	mov	r8, r2
 80115a8:	2407      	movs	r4, #7
 80115aa:	401c      	ands	r4, r3
 80115ac:	00a4      	lsls	r4, r4, #2
 80115ae:	260f      	movs	r6, #15
 80115b0:	0032      	movs	r2, r6
 80115b2:	40a2      	lsls	r2, r4
 80115b4:	0014      	movs	r4, r2
 80115b6:	4642      	mov	r2, r8
 80115b8:	43a2      	bics	r2, r4
 80115ba:	502a      	str	r2, [r5, r0]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80115bc:	6884      	ldr	r4, [r0, #8]
 80115be:	4662      	mov	r2, ip
 80115c0:	4394      	bics	r4, r2
 80115c2:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 80115c4:	6844      	ldr	r4, [r0, #4]
 80115c6:	2501      	movs	r5, #1
 80115c8:	409d      	lsls	r5, r3
 80115ca:	43ac      	bics	r4, r5
 80115cc:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80115ce:	68c4      	ldr	r4, [r0, #12]
 80115d0:	4394      	bics	r4, r2
 80115d2:	60c4      	str	r4, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 80115d4:	089d      	lsrs	r5, r3, #2
 80115d6:	1cac      	adds	r4, r5, #2
 80115d8:	00a4      	lsls	r4, r4, #2
 80115da:	4a1c      	ldr	r2, [pc, #112]	; (801164c <HAL_GPIO_DeInit+0xec>)
 80115dc:	58a4      	ldr	r4, [r4, r2]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80115de:	464a      	mov	r2, r9
 80115e0:	401a      	ands	r2, r3
 80115e2:	0092      	lsls	r2, r2, #2
 80115e4:	4096      	lsls	r6, r2
 80115e6:	46b4      	mov	ip, r6
 80115e8:	4034      	ands	r4, r6
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80115ea:	2690      	movs	r6, #144	; 0x90
 80115ec:	05f6      	lsls	r6, r6, #23
 80115ee:	42b0      	cmp	r0, r6
 80115f0:	d0be      	beq.n	8011570 <HAL_GPIO_DeInit+0x10>
 80115f2:	4e17      	ldr	r6, [pc, #92]	; (8011650 <HAL_GPIO_DeInit+0xf0>)
 80115f4:	42b0      	cmp	r0, r6
 80115f6:	d00a      	beq.n	801160e <HAL_GPIO_DeInit+0xae>
 80115f8:	4e16      	ldr	r6, [pc, #88]	; (8011654 <HAL_GPIO_DeInit+0xf4>)
 80115fa:	42b0      	cmp	r0, r6
 80115fc:	d009      	beq.n	8011612 <HAL_GPIO_DeInit+0xb2>
 80115fe:	4e16      	ldr	r6, [pc, #88]	; (8011658 <HAL_GPIO_DeInit+0xf8>)
 8011600:	42b0      	cmp	r0, r6
 8011602:	d008      	beq.n	8011616 <HAL_GPIO_DeInit+0xb6>
 8011604:	4e15      	ldr	r6, [pc, #84]	; (801165c <HAL_GPIO_DeInit+0xfc>)
 8011606:	42b0      	cmp	r0, r6
 8011608:	d0b0      	beq.n	801156c <HAL_GPIO_DeInit+0xc>
 801160a:	2605      	movs	r6, #5
 801160c:	e7b1      	b.n	8011572 <HAL_GPIO_DeInit+0x12>
 801160e:	2601      	movs	r6, #1
 8011610:	e7af      	b.n	8011572 <HAL_GPIO_DeInit+0x12>
 8011612:	2602      	movs	r6, #2
 8011614:	e7ad      	b.n	8011572 <HAL_GPIO_DeInit+0x12>
 8011616:	2603      	movs	r6, #3
 8011618:	e7ab      	b.n	8011572 <HAL_GPIO_DeInit+0x12>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 801161a:	4e0c      	ldr	r6, [pc, #48]	; (801164c <HAL_GPIO_DeInit+0xec>)
 801161c:	3502      	adds	r5, #2
 801161e:	00aa      	lsls	r2, r5, #2
 8011620:	5994      	ldr	r4, [r2, r6]
 8011622:	4665      	mov	r5, ip
 8011624:	43ac      	bics	r4, r5
 8011626:	5194      	str	r4, [r2, r6]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8011628:	4a0d      	ldr	r2, [pc, #52]	; (8011660 <HAL_GPIO_DeInit+0x100>)
 801162a:	6814      	ldr	r4, [r2, #0]
 801162c:	43bc      	bics	r4, r7
 801162e:	6014      	str	r4, [r2, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8011630:	6854      	ldr	r4, [r2, #4]
 8011632:	43bc      	bics	r4, r7
 8011634:	6054      	str	r4, [r2, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8011636:	6894      	ldr	r4, [r2, #8]
 8011638:	43bc      	bics	r4, r7
 801163a:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 801163c:	68d4      	ldr	r4, [r2, #12]
 801163e:	43bc      	bics	r4, r7
 8011640:	60d4      	str	r4, [r2, #12]
 8011642:	e799      	b.n	8011578 <HAL_GPIO_DeInit+0x18>
  }
}
 8011644:	bcc0      	pop	{r6, r7}
 8011646:	46b9      	mov	r9, r7
 8011648:	46b0      	mov	r8, r6
 801164a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801164c:	40010000 	.word	0x40010000
 8011650:	48000400 	.word	0x48000400
 8011654:	48000800 	.word	0x48000800
 8011658:	48000c00 	.word	0x48000c00
 801165c:	48001000 	.word	0x48001000
 8011660:	40010400 	.word	0x40010400

08011664 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011664:	6903      	ldr	r3, [r0, #16]
 8011666:	420b      	tst	r3, r1
 8011668:	d001      	beq.n	801166e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 801166a:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 801166c:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 801166e:	2000      	movs	r0, #0
 8011670:	e7fc      	b.n	801166c <HAL_GPIO_ReadPin+0x8>

08011672 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011672:	2a00      	cmp	r2, #0
 8011674:	d001      	beq.n	801167a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011676:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8011678:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801167a:	6281      	str	r1, [r0, #40]	; 0x28
}
 801167c:	e7fc      	b.n	8011678 <HAL_GPIO_WritePin+0x6>

0801167e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 801167e:	6943      	ldr	r3, [r0, #20]
 8011680:	4059      	eors	r1, r3
 8011682:	6141      	str	r1, [r0, #20]
}
 8011684:	4770      	bx	lr

08011686 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8011686:	4770      	bx	lr

08011688 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8011688:	4a03      	ldr	r2, [pc, #12]	; (8011698 <HAL_PWR_EnableBkUpAccess+0x10>)
 801168a:	6811      	ldr	r1, [r2, #0]
 801168c:	2380      	movs	r3, #128	; 0x80
 801168e:	005b      	lsls	r3, r3, #1
 8011690:	430b      	orrs	r3, r1
 8011692:	6013      	str	r3, [r2, #0]
}
 8011694:	4770      	bx	lr
 8011696:	46c0      	nop			; (mov r8, r8)
 8011698:	40007000 	.word	0x40007000

0801169c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801169c:	b530      	push	{r4, r5, lr}
 801169e:	b083      	sub	sp, #12
 80116a0:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80116a2:	6803      	ldr	r3, [r0, #0]
 80116a4:	07db      	lsls	r3, r3, #31
 80116a6:	d534      	bpl.n	8011712 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80116a8:	4bc1      	ldr	r3, [pc, #772]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 80116aa:	685a      	ldr	r2, [r3, #4]
 80116ac:	230c      	movs	r3, #12
 80116ae:	4013      	ands	r3, r2
 80116b0:	2b04      	cmp	r3, #4
 80116b2:	d026      	beq.n	8011702 <HAL_RCC_OscConfig+0x66>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80116b4:	4bbe      	ldr	r3, [pc, #760]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 80116b6:	685a      	ldr	r2, [r3, #4]
 80116b8:	230c      	movs	r3, #12
 80116ba:	4013      	ands	r3, r2
 80116bc:	2b08      	cmp	r3, #8
 80116be:	d108      	bne.n	80116d2 <HAL_RCC_OscConfig+0x36>
 80116c0:	4bbb      	ldr	r3, [pc, #748]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 80116c2:	685b      	ldr	r3, [r3, #4]
 80116c4:	22c0      	movs	r2, #192	; 0xc0
 80116c6:	0252      	lsls	r2, r2, #9
 80116c8:	4013      	ands	r3, r2
 80116ca:	2280      	movs	r2, #128	; 0x80
 80116cc:	0252      	lsls	r2, r2, #9
 80116ce:	4293      	cmp	r3, r2
 80116d0:	d017      	beq.n	8011702 <HAL_RCC_OscConfig+0x66>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80116d2:	4bb7      	ldr	r3, [pc, #732]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 80116d4:	681a      	ldr	r2, [r3, #0]
 80116d6:	49b7      	ldr	r1, [pc, #732]	; (80119b4 <HAL_RCC_OscConfig+0x318>)
 80116d8:	400a      	ands	r2, r1
 80116da:	601a      	str	r2, [r3, #0]
 80116dc:	681a      	ldr	r2, [r3, #0]
 80116de:	49b6      	ldr	r1, [pc, #728]	; (80119b8 <HAL_RCC_OscConfig+0x31c>)
 80116e0:	400a      	ands	r2, r1
 80116e2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80116e4:	f7fe fbfe 	bl	800fee4 <HAL_GetTick>
 80116e8:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80116ea:	4bb1      	ldr	r3, [pc, #708]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	039b      	lsls	r3, r3, #14
 80116f0:	d536      	bpl.n	8011760 <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80116f2:	f7fe fbf7 	bl	800fee4 <HAL_GetTick>
 80116f6:	1b40      	subs	r0, r0, r5
 80116f8:	2864      	cmp	r0, #100	; 0x64
 80116fa:	d9f6      	bls.n	80116ea <HAL_RCC_OscConfig+0x4e>
        {
          return HAL_TIMEOUT;
 80116fc:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80116fe:	b003      	add	sp, #12
 8011700:	bd30      	pop	{r4, r5, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011702:	4bab      	ldr	r3, [pc, #684]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	039b      	lsls	r3, r3, #14
 8011708:	d503      	bpl.n	8011712 <HAL_RCC_OscConfig+0x76>
 801170a:	6863      	ldr	r3, [r4, #4]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d100      	bne.n	8011712 <HAL_RCC_OscConfig+0x76>
 8011710:	e256      	b.n	8011bc0 <HAL_RCC_OscConfig+0x524>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011712:	6823      	ldr	r3, [r4, #0]
 8011714:	079b      	lsls	r3, r3, #30
 8011716:	d400      	bmi.n	801171a <HAL_RCC_OscConfig+0x7e>
 8011718:	e087      	b.n	801182a <HAL_RCC_OscConfig+0x18e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 801171a:	4ba5      	ldr	r3, [pc, #660]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	220c      	movs	r2, #12
 8011720:	421a      	tst	r2, r3
 8011722:	d072      	beq.n	801180a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011724:	4ba2      	ldr	r3, [pc, #648]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 8011726:	685a      	ldr	r2, [r3, #4]
 8011728:	230c      	movs	r3, #12
 801172a:	4013      	ands	r3, r2
 801172c:	2b08      	cmp	r3, #8
 801172e:	d063      	beq.n	80117f8 <HAL_RCC_OscConfig+0x15c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011730:	68e3      	ldr	r3, [r4, #12]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d100      	bne.n	8011738 <HAL_RCC_OscConfig+0x9c>
 8011736:	e09a      	b.n	801186e <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_ENABLE();
 8011738:	4a9d      	ldr	r2, [pc, #628]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 801173a:	6813      	ldr	r3, [r2, #0]
 801173c:	2101      	movs	r1, #1
 801173e:	430b      	orrs	r3, r1
 8011740:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011742:	f7fe fbcf 	bl	800fee4 <HAL_GetTick>
 8011746:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011748:	4b99      	ldr	r3, [pc, #612]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	079b      	lsls	r3, r3, #30
 801174e:	d500      	bpl.n	8011752 <HAL_RCC_OscConfig+0xb6>
 8011750:	e084      	b.n	801185c <HAL_RCC_OscConfig+0x1c0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011752:	f7fe fbc7 	bl	800fee4 <HAL_GetTick>
 8011756:	1b40      	subs	r0, r0, r5
 8011758:	2864      	cmp	r0, #100	; 0x64
 801175a:	d9f5      	bls.n	8011748 <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
 801175c:	2003      	movs	r0, #3
 801175e:	e7ce      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011760:	6863      	ldr	r3, [r4, #4]
 8011762:	2b01      	cmp	r3, #1
 8011764:	d00b      	beq.n	801177e <HAL_RCC_OscConfig+0xe2>
 8011766:	2b00      	cmp	r3, #0
 8011768:	d120      	bne.n	80117ac <HAL_RCC_OscConfig+0x110>
 801176a:	4b91      	ldr	r3, [pc, #580]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 801176c:	681a      	ldr	r2, [r3, #0]
 801176e:	4991      	ldr	r1, [pc, #580]	; (80119b4 <HAL_RCC_OscConfig+0x318>)
 8011770:	400a      	ands	r2, r1
 8011772:	601a      	str	r2, [r3, #0]
 8011774:	681a      	ldr	r2, [r3, #0]
 8011776:	4990      	ldr	r1, [pc, #576]	; (80119b8 <HAL_RCC_OscConfig+0x31c>)
 8011778:	400a      	ands	r2, r1
 801177a:	601a      	str	r2, [r3, #0]
 801177c:	e005      	b.n	801178a <HAL_RCC_OscConfig+0xee>
 801177e:	4a8c      	ldr	r2, [pc, #560]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 8011780:	6811      	ldr	r1, [r2, #0]
 8011782:	2380      	movs	r3, #128	; 0x80
 8011784:	025b      	lsls	r3, r3, #9
 8011786:	430b      	orrs	r3, r1
 8011788:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801178a:	6863      	ldr	r3, [r4, #4]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d025      	beq.n	80117dc <HAL_RCC_OscConfig+0x140>
        tickstart = HAL_GetTick();
 8011790:	f7fe fba8 	bl	800fee4 <HAL_GetTick>
 8011794:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011796:	4b86      	ldr	r3, [pc, #536]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	039b      	lsls	r3, r3, #14
 801179c:	d4b9      	bmi.n	8011712 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801179e:	f7fe fba1 	bl	800fee4 <HAL_GetTick>
 80117a2:	1b40      	subs	r0, r0, r5
 80117a4:	2864      	cmp	r0, #100	; 0x64
 80117a6:	d9f6      	bls.n	8011796 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80117a8:	2003      	movs	r0, #3
 80117aa:	e7a8      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80117ac:	2b05      	cmp	r3, #5
 80117ae:	d009      	beq.n	80117c4 <HAL_RCC_OscConfig+0x128>
 80117b0:	4b7f      	ldr	r3, [pc, #508]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 80117b2:	681a      	ldr	r2, [r3, #0]
 80117b4:	497f      	ldr	r1, [pc, #508]	; (80119b4 <HAL_RCC_OscConfig+0x318>)
 80117b6:	400a      	ands	r2, r1
 80117b8:	601a      	str	r2, [r3, #0]
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	497e      	ldr	r1, [pc, #504]	; (80119b8 <HAL_RCC_OscConfig+0x31c>)
 80117be:	400a      	ands	r2, r1
 80117c0:	601a      	str	r2, [r3, #0]
 80117c2:	e7e2      	b.n	801178a <HAL_RCC_OscConfig+0xee>
 80117c4:	4b7a      	ldr	r3, [pc, #488]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 80117c6:	6819      	ldr	r1, [r3, #0]
 80117c8:	2280      	movs	r2, #128	; 0x80
 80117ca:	02d2      	lsls	r2, r2, #11
 80117cc:	430a      	orrs	r2, r1
 80117ce:	601a      	str	r2, [r3, #0]
 80117d0:	6819      	ldr	r1, [r3, #0]
 80117d2:	2280      	movs	r2, #128	; 0x80
 80117d4:	0252      	lsls	r2, r2, #9
 80117d6:	430a      	orrs	r2, r1
 80117d8:	601a      	str	r2, [r3, #0]
 80117da:	e7d6      	b.n	801178a <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 80117dc:	f7fe fb82 	bl	800fee4 <HAL_GetTick>
 80117e0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80117e2:	4b73      	ldr	r3, [pc, #460]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	039b      	lsls	r3, r3, #14
 80117e8:	d593      	bpl.n	8011712 <HAL_RCC_OscConfig+0x76>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80117ea:	f7fe fb7b 	bl	800fee4 <HAL_GetTick>
 80117ee:	1b40      	subs	r0, r0, r5
 80117f0:	2864      	cmp	r0, #100	; 0x64
 80117f2:	d9f6      	bls.n	80117e2 <HAL_RCC_OscConfig+0x146>
            return HAL_TIMEOUT;
 80117f4:	2003      	movs	r0, #3
 80117f6:	e782      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80117f8:	4b6d      	ldr	r3, [pc, #436]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 80117fa:	685b      	ldr	r3, [r3, #4]
 80117fc:	22c0      	movs	r2, #192	; 0xc0
 80117fe:	0252      	lsls	r2, r2, #9
 8011800:	4013      	ands	r3, r2
 8011802:	2280      	movs	r2, #128	; 0x80
 8011804:	0212      	lsls	r2, r2, #8
 8011806:	4293      	cmp	r3, r2
 8011808:	d192      	bne.n	8011730 <HAL_RCC_OscConfig+0x94>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801180a:	4b69      	ldr	r3, [pc, #420]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	079b      	lsls	r3, r3, #30
 8011810:	d503      	bpl.n	801181a <HAL_RCC_OscConfig+0x17e>
 8011812:	68e3      	ldr	r3, [r4, #12]
 8011814:	2b01      	cmp	r3, #1
 8011816:	d000      	beq.n	801181a <HAL_RCC_OscConfig+0x17e>
 8011818:	e1d4      	b.n	8011bc4 <HAL_RCC_OscConfig+0x528>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801181a:	4965      	ldr	r1, [pc, #404]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 801181c:	680b      	ldr	r3, [r1, #0]
 801181e:	22f8      	movs	r2, #248	; 0xf8
 8011820:	4393      	bics	r3, r2
 8011822:	6922      	ldr	r2, [r4, #16]
 8011824:	00d2      	lsls	r2, r2, #3
 8011826:	4313      	orrs	r3, r2
 8011828:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801182a:	6823      	ldr	r3, [r4, #0]
 801182c:	071b      	lsls	r3, r3, #28
 801182e:	d544      	bpl.n	80118ba <HAL_RCC_OscConfig+0x21e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011830:	6a23      	ldr	r3, [r4, #32]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d02e      	beq.n	8011894 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_LSI_ENABLE();
 8011836:	4a5e      	ldr	r2, [pc, #376]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 8011838:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801183a:	2101      	movs	r1, #1
 801183c:	430b      	orrs	r3, r1
 801183e:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011840:	f7fe fb50 	bl	800fee4 <HAL_GetTick>
 8011844:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011846:	4b5a      	ldr	r3, [pc, #360]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 8011848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801184a:	079b      	lsls	r3, r3, #30
 801184c:	d435      	bmi.n	80118ba <HAL_RCC_OscConfig+0x21e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801184e:	f7fe fb49 	bl	800fee4 <HAL_GetTick>
 8011852:	1b40      	subs	r0, r0, r5
 8011854:	2864      	cmp	r0, #100	; 0x64
 8011856:	d9f6      	bls.n	8011846 <HAL_RCC_OscConfig+0x1aa>
          return HAL_TIMEOUT;
 8011858:	2003      	movs	r0, #3
 801185a:	e750      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801185c:	4954      	ldr	r1, [pc, #336]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 801185e:	680b      	ldr	r3, [r1, #0]
 8011860:	22f8      	movs	r2, #248	; 0xf8
 8011862:	4393      	bics	r3, r2
 8011864:	6922      	ldr	r2, [r4, #16]
 8011866:	00d2      	lsls	r2, r2, #3
 8011868:	4313      	orrs	r3, r2
 801186a:	600b      	str	r3, [r1, #0]
 801186c:	e7dd      	b.n	801182a <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_DISABLE();
 801186e:	4a50      	ldr	r2, [pc, #320]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 8011870:	6813      	ldr	r3, [r2, #0]
 8011872:	2101      	movs	r1, #1
 8011874:	438b      	bics	r3, r1
 8011876:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011878:	f7fe fb34 	bl	800fee4 <HAL_GetTick>
 801187c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801187e:	4b4c      	ldr	r3, [pc, #304]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	079b      	lsls	r3, r3, #30
 8011884:	d5d1      	bpl.n	801182a <HAL_RCC_OscConfig+0x18e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011886:	f7fe fb2d 	bl	800fee4 <HAL_GetTick>
 801188a:	1b40      	subs	r0, r0, r5
 801188c:	2864      	cmp	r0, #100	; 0x64
 801188e:	d9f6      	bls.n	801187e <HAL_RCC_OscConfig+0x1e2>
            return HAL_TIMEOUT;
 8011890:	2003      	movs	r0, #3
 8011892:	e734      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSI_DISABLE();
 8011894:	4a46      	ldr	r2, [pc, #280]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 8011896:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011898:	2101      	movs	r1, #1
 801189a:	438b      	bics	r3, r1
 801189c:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801189e:	f7fe fb21 	bl	800fee4 <HAL_GetTick>
 80118a2:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80118a4:	4b42      	ldr	r3, [pc, #264]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 80118a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118a8:	079b      	lsls	r3, r3, #30
 80118aa:	d506      	bpl.n	80118ba <HAL_RCC_OscConfig+0x21e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80118ac:	f7fe fb1a 	bl	800fee4 <HAL_GetTick>
 80118b0:	1b40      	subs	r0, r0, r5
 80118b2:	2864      	cmp	r0, #100	; 0x64
 80118b4:	d9f6      	bls.n	80118a4 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 80118b6:	2003      	movs	r0, #3
 80118b8:	e721      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80118ba:	6823      	ldr	r3, [r4, #0]
 80118bc:	075b      	lsls	r3, r3, #29
 80118be:	d440      	bmi.n	8011942 <HAL_RCC_OscConfig+0x2a6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80118c0:	6823      	ldr	r3, [r4, #0]
 80118c2:	06db      	lsls	r3, r3, #27
 80118c4:	d512      	bpl.n	80118ec <HAL_RCC_OscConfig+0x250>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80118c6:	6963      	ldr	r3, [r4, #20]
 80118c8:	2b01      	cmp	r3, #1
 80118ca:	d100      	bne.n	80118ce <HAL_RCC_OscConfig+0x232>
 80118cc:	e0c7      	b.n	8011a5e <HAL_RCC_OscConfig+0x3c2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80118ce:	3305      	adds	r3, #5
 80118d0:	d000      	beq.n	80118d4 <HAL_RCC_OscConfig+0x238>
 80118d2:	e0e4      	b.n	8011a9e <HAL_RCC_OscConfig+0x402>
      __HAL_RCC_HSI14ADC_ENABLE();
 80118d4:	4a36      	ldr	r2, [pc, #216]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 80118d6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80118d8:	2104      	movs	r1, #4
 80118da:	438b      	bics	r3, r1
 80118dc:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80118de:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80118e0:	31f4      	adds	r1, #244	; 0xf4
 80118e2:	438b      	bics	r3, r1
 80118e4:	69a1      	ldr	r1, [r4, #24]
 80118e6:	00c9      	lsls	r1, r1, #3
 80118e8:	430b      	orrs	r3, r1
 80118ea:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80118ec:	6823      	ldr	r3, [r4, #0]
 80118ee:	069b      	lsls	r3, r3, #26
 80118f0:	d400      	bmi.n	80118f4 <HAL_RCC_OscConfig+0x258>
 80118f2:	e0fb      	b.n	8011aec <HAL_RCC_OscConfig+0x450>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80118f4:	4b2e      	ldr	r3, [pc, #184]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 80118f6:	685a      	ldr	r2, [r3, #4]
 80118f8:	230c      	movs	r3, #12
 80118fa:	4013      	ands	r3, r2
 80118fc:	2b0c      	cmp	r3, #12
 80118fe:	d100      	bne.n	8011902 <HAL_RCC_OscConfig+0x266>
 8011900:	e0ed      	b.n	8011ade <HAL_RCC_OscConfig+0x442>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011902:	4b2b      	ldr	r3, [pc, #172]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 8011904:	685a      	ldr	r2, [r3, #4]
 8011906:	230c      	movs	r3, #12
 8011908:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801190a:	2b08      	cmp	r3, #8
 801190c:	d100      	bne.n	8011910 <HAL_RCC_OscConfig+0x274>
 801190e:	e0de      	b.n	8011ace <HAL_RCC_OscConfig+0x432>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011910:	69e3      	ldr	r3, [r4, #28]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d100      	bne.n	8011918 <HAL_RCC_OscConfig+0x27c>
 8011916:	e107      	b.n	8011b28 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_HSI48_ENABLE();
 8011918:	4a25      	ldr	r2, [pc, #148]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 801191a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801191c:	2380      	movs	r3, #128	; 0x80
 801191e:	025b      	lsls	r3, r3, #9
 8011920:	430b      	orrs	r3, r1
 8011922:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011924:	f7fe fade 	bl	800fee4 <HAL_GetTick>
 8011928:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801192a:	4b21      	ldr	r3, [pc, #132]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 801192c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801192e:	03db      	lsls	r3, r3, #15
 8011930:	d500      	bpl.n	8011934 <HAL_RCC_OscConfig+0x298>
 8011932:	e0db      	b.n	8011aec <HAL_RCC_OscConfig+0x450>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011934:	f7fe fad6 	bl	800fee4 <HAL_GetTick>
 8011938:	1b40      	subs	r0, r0, r5
 801193a:	2864      	cmp	r0, #100	; 0x64
 801193c:	d9f5      	bls.n	801192a <HAL_RCC_OscConfig+0x28e>
            return HAL_TIMEOUT;
 801193e:	2003      	movs	r0, #3
 8011940:	e6dd      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_PWR_CLK_ENABLE();
 8011942:	4a1b      	ldr	r2, [pc, #108]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 8011944:	69d1      	ldr	r1, [r2, #28]
 8011946:	2080      	movs	r0, #128	; 0x80
 8011948:	0540      	lsls	r0, r0, #21
 801194a:	4301      	orrs	r1, r0
 801194c:	61d1      	str	r1, [r2, #28]
 801194e:	69d3      	ldr	r3, [r2, #28]
 8011950:	4003      	ands	r3, r0
 8011952:	9301      	str	r3, [sp, #4]
 8011954:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011956:	4a19      	ldr	r2, [pc, #100]	; (80119bc <HAL_RCC_OscConfig+0x320>)
 8011958:	6811      	ldr	r1, [r2, #0]
 801195a:	2380      	movs	r3, #128	; 0x80
 801195c:	005b      	lsls	r3, r3, #1
 801195e:	430b      	orrs	r3, r1
 8011960:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8011962:	f7fe fabf 	bl	800fee4 <HAL_GetTick>
 8011966:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011968:	4b14      	ldr	r3, [pc, #80]	; (80119bc <HAL_RCC_OscConfig+0x320>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	05db      	lsls	r3, r3, #23
 801196e:	d406      	bmi.n	801197e <HAL_RCC_OscConfig+0x2e2>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8011970:	f7fe fab8 	bl	800fee4 <HAL_GetTick>
 8011974:	1b40      	subs	r0, r0, r5
 8011976:	2864      	cmp	r0, #100	; 0x64
 8011978:	d9f6      	bls.n	8011968 <HAL_RCC_OscConfig+0x2cc>
        return HAL_TIMEOUT;
 801197a:	2003      	movs	r0, #3
 801197c:	e6bf      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 801197e:	4b0c      	ldr	r3, [pc, #48]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 8011980:	6a1a      	ldr	r2, [r3, #32]
 8011982:	2101      	movs	r1, #1
 8011984:	438a      	bics	r2, r1
 8011986:	621a      	str	r2, [r3, #32]
 8011988:	6a1a      	ldr	r2, [r3, #32]
 801198a:	3103      	adds	r1, #3
 801198c:	438a      	bics	r2, r1
 801198e:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 8011990:	f7fe faa8 	bl	800fee4 <HAL_GetTick>
 8011994:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011996:	4b06      	ldr	r3, [pc, #24]	; (80119b0 <HAL_RCC_OscConfig+0x314>)
 8011998:	6a1b      	ldr	r3, [r3, #32]
 801199a:	079b      	lsls	r3, r3, #30
 801199c:	d512      	bpl.n	80119c4 <HAL_RCC_OscConfig+0x328>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801199e:	f7fe faa1 	bl	800fee4 <HAL_GetTick>
 80119a2:	1b40      	subs	r0, r0, r5
 80119a4:	4b06      	ldr	r3, [pc, #24]	; (80119c0 <HAL_RCC_OscConfig+0x324>)
 80119a6:	4298      	cmp	r0, r3
 80119a8:	d9f5      	bls.n	8011996 <HAL_RCC_OscConfig+0x2fa>
        return HAL_TIMEOUT;
 80119aa:	2003      	movs	r0, #3
 80119ac:	e6a7      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
 80119ae:	46c0      	nop			; (mov r8, r8)
 80119b0:	40021000 	.word	0x40021000
 80119b4:	fffeffff 	.word	0xfffeffff
 80119b8:	fffbffff 	.word	0xfffbffff
 80119bc:	40007000 	.word	0x40007000
 80119c0:	00001388 	.word	0x00001388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80119c4:	68a3      	ldr	r3, [r4, #8]
 80119c6:	2b01      	cmp	r3, #1
 80119c8:	d00b      	beq.n	80119e2 <HAL_RCC_OscConfig+0x346>
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d121      	bne.n	8011a12 <HAL_RCC_OscConfig+0x376>
 80119ce:	4b81      	ldr	r3, [pc, #516]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 80119d0:	6a1a      	ldr	r2, [r3, #32]
 80119d2:	2101      	movs	r1, #1
 80119d4:	438a      	bics	r2, r1
 80119d6:	621a      	str	r2, [r3, #32]
 80119d8:	6a1a      	ldr	r2, [r3, #32]
 80119da:	3103      	adds	r1, #3
 80119dc:	438a      	bics	r2, r1
 80119de:	621a      	str	r2, [r3, #32]
 80119e0:	e004      	b.n	80119ec <HAL_RCC_OscConfig+0x350>
 80119e2:	4a7c      	ldr	r2, [pc, #496]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 80119e4:	6a13      	ldr	r3, [r2, #32]
 80119e6:	2101      	movs	r1, #1
 80119e8:	430b      	orrs	r3, r1
 80119ea:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80119ec:	68a3      	ldr	r3, [r4, #8]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d025      	beq.n	8011a3e <HAL_RCC_OscConfig+0x3a2>
      tickstart = HAL_GetTick();
 80119f2:	f7fe fa77 	bl	800fee4 <HAL_GetTick>
 80119f6:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80119f8:	4b76      	ldr	r3, [pc, #472]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 80119fa:	6a1b      	ldr	r3, [r3, #32]
 80119fc:	079b      	lsls	r3, r3, #30
 80119fe:	d500      	bpl.n	8011a02 <HAL_RCC_OscConfig+0x366>
 8011a00:	e75e      	b.n	80118c0 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011a02:	f7fe fa6f 	bl	800fee4 <HAL_GetTick>
 8011a06:	1b40      	subs	r0, r0, r5
 8011a08:	4b73      	ldr	r3, [pc, #460]	; (8011bd8 <HAL_RCC_OscConfig+0x53c>)
 8011a0a:	4298      	cmp	r0, r3
 8011a0c:	d9f4      	bls.n	80119f8 <HAL_RCC_OscConfig+0x35c>
          return HAL_TIMEOUT;
 8011a0e:	2003      	movs	r0, #3
 8011a10:	e675      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011a12:	2b05      	cmp	r3, #5
 8011a14:	d009      	beq.n	8011a2a <HAL_RCC_OscConfig+0x38e>
 8011a16:	4b6f      	ldr	r3, [pc, #444]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011a18:	6a1a      	ldr	r2, [r3, #32]
 8011a1a:	2101      	movs	r1, #1
 8011a1c:	438a      	bics	r2, r1
 8011a1e:	621a      	str	r2, [r3, #32]
 8011a20:	6a1a      	ldr	r2, [r3, #32]
 8011a22:	3103      	adds	r1, #3
 8011a24:	438a      	bics	r2, r1
 8011a26:	621a      	str	r2, [r3, #32]
 8011a28:	e7e0      	b.n	80119ec <HAL_RCC_OscConfig+0x350>
 8011a2a:	4b6a      	ldr	r3, [pc, #424]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011a2c:	6a1a      	ldr	r2, [r3, #32]
 8011a2e:	2104      	movs	r1, #4
 8011a30:	430a      	orrs	r2, r1
 8011a32:	621a      	str	r2, [r3, #32]
 8011a34:	6a1a      	ldr	r2, [r3, #32]
 8011a36:	3903      	subs	r1, #3
 8011a38:	430a      	orrs	r2, r1
 8011a3a:	621a      	str	r2, [r3, #32]
 8011a3c:	e7d6      	b.n	80119ec <HAL_RCC_OscConfig+0x350>
      tickstart = HAL_GetTick();
 8011a3e:	f7fe fa51 	bl	800fee4 <HAL_GetTick>
 8011a42:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011a44:	4b63      	ldr	r3, [pc, #396]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011a46:	6a1b      	ldr	r3, [r3, #32]
 8011a48:	079b      	lsls	r3, r3, #30
 8011a4a:	d400      	bmi.n	8011a4e <HAL_RCC_OscConfig+0x3b2>
 8011a4c:	e738      	b.n	80118c0 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011a4e:	f7fe fa49 	bl	800fee4 <HAL_GetTick>
 8011a52:	1b40      	subs	r0, r0, r5
 8011a54:	4b60      	ldr	r3, [pc, #384]	; (8011bd8 <HAL_RCC_OscConfig+0x53c>)
 8011a56:	4298      	cmp	r0, r3
 8011a58:	d9f4      	bls.n	8011a44 <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 8011a5a:	2003      	movs	r0, #3
 8011a5c:	e64f      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011a5e:	4b5d      	ldr	r3, [pc, #372]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a62:	2104      	movs	r1, #4
 8011a64:	430a      	orrs	r2, r1
 8011a66:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8011a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a6a:	3903      	subs	r1, #3
 8011a6c:	430a      	orrs	r2, r1
 8011a6e:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011a70:	f7fe fa38 	bl	800fee4 <HAL_GetTick>
 8011a74:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011a76:	4b57      	ldr	r3, [pc, #348]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a7a:	079b      	lsls	r3, r3, #30
 8011a7c:	d406      	bmi.n	8011a8c <HAL_RCC_OscConfig+0x3f0>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011a7e:	f7fe fa31 	bl	800fee4 <HAL_GetTick>
 8011a82:	1b40      	subs	r0, r0, r5
 8011a84:	2864      	cmp	r0, #100	; 0x64
 8011a86:	d9f6      	bls.n	8011a76 <HAL_RCC_OscConfig+0x3da>
          return HAL_TIMEOUT;
 8011a88:	2003      	movs	r0, #3
 8011a8a:	e638      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011a8c:	4951      	ldr	r1, [pc, #324]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011a8e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8011a90:	22f8      	movs	r2, #248	; 0xf8
 8011a92:	4393      	bics	r3, r2
 8011a94:	69a2      	ldr	r2, [r4, #24]
 8011a96:	00d2      	lsls	r2, r2, #3
 8011a98:	4313      	orrs	r3, r2
 8011a9a:	634b      	str	r3, [r1, #52]	; 0x34
 8011a9c:	e726      	b.n	80118ec <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011a9e:	4b4d      	ldr	r3, [pc, #308]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011aa2:	2104      	movs	r1, #4
 8011aa4:	430a      	orrs	r2, r1
 8011aa6:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8011aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011aaa:	3903      	subs	r1, #3
 8011aac:	438a      	bics	r2, r1
 8011aae:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011ab0:	f7fe fa18 	bl	800fee4 <HAL_GetTick>
 8011ab4:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011ab6:	4b47      	ldr	r3, [pc, #284]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aba:	079b      	lsls	r3, r3, #30
 8011abc:	d400      	bmi.n	8011ac0 <HAL_RCC_OscConfig+0x424>
 8011abe:	e715      	b.n	80118ec <HAL_RCC_OscConfig+0x250>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011ac0:	f7fe fa10 	bl	800fee4 <HAL_GetTick>
 8011ac4:	1b40      	subs	r0, r0, r5
 8011ac6:	2864      	cmp	r0, #100	; 0x64
 8011ac8:	d9f5      	bls.n	8011ab6 <HAL_RCC_OscConfig+0x41a>
          return HAL_TIMEOUT;
 8011aca:	2003      	movs	r0, #3
 8011acc:	e617      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011ace:	4b41      	ldr	r3, [pc, #260]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011ad0:	685b      	ldr	r3, [r3, #4]
 8011ad2:	22c0      	movs	r2, #192	; 0xc0
 8011ad4:	0252      	lsls	r2, r2, #9
 8011ad6:	4013      	ands	r3, r2
 8011ad8:	4293      	cmp	r3, r2
 8011ada:	d000      	beq.n	8011ade <HAL_RCC_OscConfig+0x442>
 8011adc:	e718      	b.n	8011910 <HAL_RCC_OscConfig+0x274>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8011ade:	4b3d      	ldr	r3, [pc, #244]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ae2:	03db      	lsls	r3, r3, #15
 8011ae4:	d502      	bpl.n	8011aec <HAL_RCC_OscConfig+0x450>
 8011ae6:	69e3      	ldr	r3, [r4, #28]
 8011ae8:	2b01      	cmp	r3, #1
 8011aea:	d16d      	bne.n	8011bc8 <HAL_RCC_OscConfig+0x52c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d06c      	beq.n	8011bcc <HAL_RCC_OscConfig+0x530>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011af2:	4a38      	ldr	r2, [pc, #224]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011af4:	6851      	ldr	r1, [r2, #4]
 8011af6:	220c      	movs	r2, #12
 8011af8:	400a      	ands	r2, r1
 8011afa:	2a08      	cmp	r2, #8
 8011afc:	d068      	beq.n	8011bd0 <HAL_RCC_OscConfig+0x534>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011afe:	2b02      	cmp	r3, #2
 8011b00:	d025      	beq.n	8011b4e <HAL_RCC_OscConfig+0x4b2>
        __HAL_RCC_PLL_DISABLE();
 8011b02:	4a34      	ldr	r2, [pc, #208]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011b04:	6813      	ldr	r3, [r2, #0]
 8011b06:	4935      	ldr	r1, [pc, #212]	; (8011bdc <HAL_RCC_OscConfig+0x540>)
 8011b08:	400b      	ands	r3, r1
 8011b0a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011b0c:	f7fe f9ea 	bl	800fee4 <HAL_GetTick>
 8011b10:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011b12:	4b30      	ldr	r3, [pc, #192]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	019b      	lsls	r3, r3, #6
 8011b18:	d550      	bpl.n	8011bbc <HAL_RCC_OscConfig+0x520>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011b1a:	f7fe f9e3 	bl	800fee4 <HAL_GetTick>
 8011b1e:	1b00      	subs	r0, r0, r4
 8011b20:	2864      	cmp	r0, #100	; 0x64
 8011b22:	d9f6      	bls.n	8011b12 <HAL_RCC_OscConfig+0x476>
            return HAL_TIMEOUT;
 8011b24:	2003      	movs	r0, #3
 8011b26:	e5ea      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI48_DISABLE();
 8011b28:	4a2a      	ldr	r2, [pc, #168]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011b2a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011b2c:	492c      	ldr	r1, [pc, #176]	; (8011be0 <HAL_RCC_OscConfig+0x544>)
 8011b2e:	400b      	ands	r3, r1
 8011b30:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011b32:	f7fe f9d7 	bl	800fee4 <HAL_GetTick>
 8011b36:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011b38:	4b26      	ldr	r3, [pc, #152]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b3c:	03db      	lsls	r3, r3, #15
 8011b3e:	d5d5      	bpl.n	8011aec <HAL_RCC_OscConfig+0x450>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011b40:	f7fe f9d0 	bl	800fee4 <HAL_GetTick>
 8011b44:	1b40      	subs	r0, r0, r5
 8011b46:	2864      	cmp	r0, #100	; 0x64
 8011b48:	d9f6      	bls.n	8011b38 <HAL_RCC_OscConfig+0x49c>
            return HAL_TIMEOUT;
 8011b4a:	2003      	movs	r0, #3
 8011b4c:	e5d7      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_DISABLE();
 8011b4e:	4a21      	ldr	r2, [pc, #132]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011b50:	6813      	ldr	r3, [r2, #0]
 8011b52:	4922      	ldr	r1, [pc, #136]	; (8011bdc <HAL_RCC_OscConfig+0x540>)
 8011b54:	400b      	ands	r3, r1
 8011b56:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011b58:	f7fe f9c4 	bl	800fee4 <HAL_GetTick>
 8011b5c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011b5e:	4b1d      	ldr	r3, [pc, #116]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	019b      	lsls	r3, r3, #6
 8011b64:	d506      	bpl.n	8011b74 <HAL_RCC_OscConfig+0x4d8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011b66:	f7fe f9bd 	bl	800fee4 <HAL_GetTick>
 8011b6a:	1b40      	subs	r0, r0, r5
 8011b6c:	2864      	cmp	r0, #100	; 0x64
 8011b6e:	d9f6      	bls.n	8011b5e <HAL_RCC_OscConfig+0x4c2>
            return HAL_TIMEOUT;
 8011b70:	2003      	movs	r0, #3
 8011b72:	e5c4      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011b74:	4b17      	ldr	r3, [pc, #92]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b78:	210f      	movs	r1, #15
 8011b7a:	438a      	bics	r2, r1
 8011b7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011b7e:	430a      	orrs	r2, r1
 8011b80:	62da      	str	r2, [r3, #44]	; 0x2c
 8011b82:	685a      	ldr	r2, [r3, #4]
 8011b84:	4917      	ldr	r1, [pc, #92]	; (8011be4 <HAL_RCC_OscConfig+0x548>)
 8011b86:	400a      	ands	r2, r1
 8011b88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011b8a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011b8c:	4301      	orrs	r1, r0
 8011b8e:	430a      	orrs	r2, r1
 8011b90:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8011b92:	6819      	ldr	r1, [r3, #0]
 8011b94:	2280      	movs	r2, #128	; 0x80
 8011b96:	0452      	lsls	r2, r2, #17
 8011b98:	430a      	orrs	r2, r1
 8011b9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011b9c:	f7fe f9a2 	bl	800fee4 <HAL_GetTick>
 8011ba0:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011ba2:	4b0c      	ldr	r3, [pc, #48]	; (8011bd4 <HAL_RCC_OscConfig+0x538>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	019b      	lsls	r3, r3, #6
 8011ba8:	d406      	bmi.n	8011bb8 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011baa:	f7fe f99b 	bl	800fee4 <HAL_GetTick>
 8011bae:	1b00      	subs	r0, r0, r4
 8011bb0:	2864      	cmp	r0, #100	; 0x64
 8011bb2:	d9f6      	bls.n	8011ba2 <HAL_RCC_OscConfig+0x506>
            return HAL_TIMEOUT;
 8011bb4:	2003      	movs	r0, #3
 8011bb6:	e5a2      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 8011bb8:	2000      	movs	r0, #0
 8011bba:	e5a0      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
 8011bbc:	2000      	movs	r0, #0
 8011bbe:	e59e      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8011bc0:	2001      	movs	r0, #1
 8011bc2:	e59c      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8011bc4:	2001      	movs	r0, #1
 8011bc6:	e59a      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8011bc8:	2001      	movs	r0, #1
 8011bca:	e598      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 8011bcc:	2000      	movs	r0, #0
 8011bce:	e596      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
      return HAL_ERROR;
 8011bd0:	2001      	movs	r0, #1
 8011bd2:	e594      	b.n	80116fe <HAL_RCC_OscConfig+0x62>
 8011bd4:	40021000 	.word	0x40021000
 8011bd8:	00001388 	.word	0x00001388
 8011bdc:	feffffff 	.word	0xfeffffff
 8011be0:	fffeffff 	.word	0xfffeffff
 8011be4:	ffc27fff 	.word	0xffc27fff

08011be8 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011be8:	b570      	push	{r4, r5, r6, lr}
 8011bea:	0004      	movs	r4, r0
 8011bec:	000d      	movs	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011bee:	4b8e      	ldr	r3, [pc, #568]	; (8011e28 <HAL_RCC_ClockConfig+0x240>)
 8011bf0:	681a      	ldr	r2, [r3, #0]
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	4013      	ands	r3, r2
 8011bf6:	428b      	cmp	r3, r1
 8011bf8:	d300      	bcc.n	8011bfc <HAL_RCC_ClockConfig+0x14>
 8011bfa:	e081      	b.n	8011d00 <HAL_RCC_ClockConfig+0x118>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011bfc:	498a      	ldr	r1, [pc, #552]	; (8011e28 <HAL_RCC_ClockConfig+0x240>)
 8011bfe:	680b      	ldr	r3, [r1, #0]
 8011c00:	2201      	movs	r2, #1
 8011c02:	4393      	bics	r3, r2
 8011c04:	432b      	orrs	r3, r5
 8011c06:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011c08:	680b      	ldr	r3, [r1, #0]
 8011c0a:	401a      	ands	r2, r3
 8011c0c:	42aa      	cmp	r2, r5
 8011c0e:	d000      	beq.n	8011c12 <HAL_RCC_ClockConfig+0x2a>
 8011c10:	e101      	b.n	8011e16 <HAL_RCC_ClockConfig+0x22e>
    {
      return HAL_ERROR;
    }
    
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011c12:	6803      	ldr	r3, [r0, #0]
 8011c14:	079b      	lsls	r3, r3, #30
 8011c16:	d506      	bpl.n	8011c26 <HAL_RCC_ClockConfig+0x3e>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011c18:	4a84      	ldr	r2, [pc, #528]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011c1a:	6853      	ldr	r3, [r2, #4]
 8011c1c:	21f0      	movs	r1, #240	; 0xf0
 8011c1e:	438b      	bics	r3, r1
 8011c20:	6881      	ldr	r1, [r0, #8]
 8011c22:	430b      	orrs	r3, r1
 8011c24:	6053      	str	r3, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011c26:	6823      	ldr	r3, [r4, #0]
 8011c28:	07db      	lsls	r3, r3, #31
 8011c2a:	d400      	bmi.n	8011c2e <HAL_RCC_ClockConfig+0x46>
 8011c2c:	e0e4      	b.n	8011df8 <HAL_RCC_ClockConfig+0x210>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011c2e:	6863      	ldr	r3, [r4, #4]
 8011c30:	2b01      	cmp	r3, #1
 8011c32:	d009      	beq.n	8011c48 <HAL_RCC_ClockConfig+0x60>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011c34:	2b02      	cmp	r3, #2
 8011c36:	d02a      	beq.n	8011c8e <HAL_RCC_ClockConfig+0xa6>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011c38:	2b03      	cmp	r3, #3
 8011c3a:	d02e      	beq.n	8011c9a <HAL_RCC_ClockConfig+0xb2>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011c3c:	4a7b      	ldr	r2, [pc, #492]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011c3e:	6812      	ldr	r2, [r2, #0]
 8011c40:	0792      	lsls	r2, r2, #30
 8011c42:	d406      	bmi.n	8011c52 <HAL_RCC_ClockConfig+0x6a>
        {
          return HAL_ERROR;
 8011c44:	2001      	movs	r0, #1
 8011c46:	e0e5      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011c48:	4a78      	ldr	r2, [pc, #480]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011c4a:	6812      	ldr	r2, [r2, #0]
 8011c4c:	0392      	lsls	r2, r2, #14
 8011c4e:	d400      	bmi.n	8011c52 <HAL_RCC_ClockConfig+0x6a>
 8011c50:	e0e3      	b.n	8011e1a <HAL_RCC_ClockConfig+0x232>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011c52:	4976      	ldr	r1, [pc, #472]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011c54:	684a      	ldr	r2, [r1, #4]
 8011c56:	2003      	movs	r0, #3
 8011c58:	4382      	bics	r2, r0
 8011c5a:	4313      	orrs	r3, r2
 8011c5c:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011c5e:	f7fe f941 	bl	800fee4 <HAL_GetTick>
 8011c62:	0005      	movs	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011c64:	6863      	ldr	r3, [r4, #4]
 8011c66:	2b01      	cmp	r3, #1
 8011c68:	d01d      	beq.n	8011ca6 <HAL_RCC_ClockConfig+0xbe>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011c6a:	2b02      	cmp	r3, #2
 8011c6c:	d02a      	beq.n	8011cc4 <HAL_RCC_ClockConfig+0xdc>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011c6e:	2b03      	cmp	r3, #3
 8011c70:	d037      	beq.n	8011ce2 <HAL_RCC_ClockConfig+0xfa>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011c72:	4b6e      	ldr	r3, [pc, #440]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011c74:	685b      	ldr	r3, [r3, #4]
 8011c76:	220c      	movs	r2, #12
 8011c78:	421a      	tst	r2, r3
 8011c7a:	d100      	bne.n	8011c7e <HAL_RCC_ClockConfig+0x96>
 8011c7c:	e0bc      	b.n	8011df8 <HAL_RCC_ClockConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011c7e:	f7fe f931 	bl	800fee4 <HAL_GetTick>
 8011c82:	1b40      	subs	r0, r0, r5
 8011c84:	4b6a      	ldr	r3, [pc, #424]	; (8011e30 <HAL_RCC_ClockConfig+0x248>)
 8011c86:	4298      	cmp	r0, r3
 8011c88:	d9f3      	bls.n	8011c72 <HAL_RCC_ClockConfig+0x8a>
          {
            return HAL_TIMEOUT;
 8011c8a:	2003      	movs	r0, #3
 8011c8c:	e0c2      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011c8e:	4a67      	ldr	r2, [pc, #412]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011c90:	6812      	ldr	r2, [r2, #0]
 8011c92:	0192      	lsls	r2, r2, #6
 8011c94:	d4dd      	bmi.n	8011c52 <HAL_RCC_ClockConfig+0x6a>
          return HAL_ERROR;
 8011c96:	2001      	movs	r0, #1
 8011c98:	e0bc      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011c9a:	4a64      	ldr	r2, [pc, #400]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011c9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011c9e:	03d2      	lsls	r2, r2, #15
 8011ca0:	d4d7      	bmi.n	8011c52 <HAL_RCC_ClockConfig+0x6a>
          return HAL_ERROR;
 8011ca2:	2001      	movs	r0, #1
 8011ca4:	e0b6      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011ca6:	4b61      	ldr	r3, [pc, #388]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011ca8:	685a      	ldr	r2, [r3, #4]
 8011caa:	230c      	movs	r3, #12
 8011cac:	4013      	ands	r3, r2
 8011cae:	2b04      	cmp	r3, #4
 8011cb0:	d100      	bne.n	8011cb4 <HAL_RCC_ClockConfig+0xcc>
 8011cb2:	e0a1      	b.n	8011df8 <HAL_RCC_ClockConfig+0x210>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011cb4:	f7fe f916 	bl	800fee4 <HAL_GetTick>
 8011cb8:	1b40      	subs	r0, r0, r5
 8011cba:	4a5d      	ldr	r2, [pc, #372]	; (8011e30 <HAL_RCC_ClockConfig+0x248>)
 8011cbc:	4290      	cmp	r0, r2
 8011cbe:	d9f2      	bls.n	8011ca6 <HAL_RCC_ClockConfig+0xbe>
            return HAL_TIMEOUT;
 8011cc0:	2003      	movs	r0, #3
 8011cc2:	e0a7      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011cc4:	4b59      	ldr	r3, [pc, #356]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011cc6:	685a      	ldr	r2, [r3, #4]
 8011cc8:	230c      	movs	r3, #12
 8011cca:	4013      	ands	r3, r2
 8011ccc:	2b08      	cmp	r3, #8
 8011cce:	d100      	bne.n	8011cd2 <HAL_RCC_ClockConfig+0xea>
 8011cd0:	e092      	b.n	8011df8 <HAL_RCC_ClockConfig+0x210>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011cd2:	f7fe f907 	bl	800fee4 <HAL_GetTick>
 8011cd6:	1b40      	subs	r0, r0, r5
 8011cd8:	4b55      	ldr	r3, [pc, #340]	; (8011e30 <HAL_RCC_ClockConfig+0x248>)
 8011cda:	4298      	cmp	r0, r3
 8011cdc:	d9f2      	bls.n	8011cc4 <HAL_RCC_ClockConfig+0xdc>
            return HAL_TIMEOUT;
 8011cde:	2003      	movs	r0, #3
 8011ce0:	e098      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011ce2:	4b52      	ldr	r3, [pc, #328]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011ce4:	685a      	ldr	r2, [r3, #4]
 8011ce6:	230c      	movs	r3, #12
 8011ce8:	4013      	ands	r3, r2
 8011cea:	2b0c      	cmp	r3, #12
 8011cec:	d100      	bne.n	8011cf0 <HAL_RCC_ClockConfig+0x108>
 8011cee:	e083      	b.n	8011df8 <HAL_RCC_ClockConfig+0x210>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011cf0:	f7fe f8f8 	bl	800fee4 <HAL_GetTick>
 8011cf4:	1b40      	subs	r0, r0, r5
 8011cf6:	4b4e      	ldr	r3, [pc, #312]	; (8011e30 <HAL_RCC_ClockConfig+0x248>)
 8011cf8:	4298      	cmp	r0, r3
 8011cfa:	d9f2      	bls.n	8011ce2 <HAL_RCC_ClockConfig+0xfa>
            return HAL_TIMEOUT;
 8011cfc:	2003      	movs	r0, #3
 8011cfe:	e089      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011d00:	6803      	ldr	r3, [r0, #0]
 8011d02:	079b      	lsls	r3, r3, #30
 8011d04:	d506      	bpl.n	8011d14 <HAL_RCC_ClockConfig+0x12c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011d06:	4a49      	ldr	r2, [pc, #292]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011d08:	6853      	ldr	r3, [r2, #4]
 8011d0a:	21f0      	movs	r1, #240	; 0xf0
 8011d0c:	438b      	bics	r3, r1
 8011d0e:	6881      	ldr	r1, [r0, #8]
 8011d10:	430b      	orrs	r3, r1
 8011d12:	6053      	str	r3, [r2, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011d14:	6823      	ldr	r3, [r4, #0]
 8011d16:	07db      	lsls	r3, r3, #31
 8011d18:	d564      	bpl.n	8011de4 <HAL_RCC_ClockConfig+0x1fc>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011d1a:	6863      	ldr	r3, [r4, #4]
 8011d1c:	2b01      	cmp	r3, #1
 8011d1e:	d009      	beq.n	8011d34 <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011d20:	2b02      	cmp	r3, #2
 8011d22:	d029      	beq.n	8011d78 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011d24:	2b03      	cmp	r3, #3
 8011d26:	d02d      	beq.n	8011d84 <HAL_RCC_ClockConfig+0x19c>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011d28:	4a40      	ldr	r2, [pc, #256]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011d2a:	6812      	ldr	r2, [r2, #0]
 8011d2c:	0792      	lsls	r2, r2, #30
 8011d2e:	d406      	bmi.n	8011d3e <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_ERROR;
 8011d30:	2001      	movs	r0, #1
 8011d32:	e06f      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011d34:	4a3d      	ldr	r2, [pc, #244]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011d36:	6812      	ldr	r2, [r2, #0]
 8011d38:	0392      	lsls	r2, r2, #14
 8011d3a:	d400      	bmi.n	8011d3e <HAL_RCC_ClockConfig+0x156>
 8011d3c:	e06f      	b.n	8011e1e <HAL_RCC_ClockConfig+0x236>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011d3e:	493b      	ldr	r1, [pc, #236]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011d40:	684a      	ldr	r2, [r1, #4]
 8011d42:	2003      	movs	r0, #3
 8011d44:	4382      	bics	r2, r0
 8011d46:	4313      	orrs	r3, r2
 8011d48:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011d4a:	f7fe f8cb 	bl	800fee4 <HAL_GetTick>
 8011d4e:	0006      	movs	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011d50:	6863      	ldr	r3, [r4, #4]
 8011d52:	2b01      	cmp	r3, #1
 8011d54:	d01c      	beq.n	8011d90 <HAL_RCC_ClockConfig+0x1a8>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011d56:	2b02      	cmp	r3, #2
 8011d58:	d028      	beq.n	8011dac <HAL_RCC_ClockConfig+0x1c4>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011d5a:	2b03      	cmp	r3, #3
 8011d5c:	d034      	beq.n	8011dc8 <HAL_RCC_ClockConfig+0x1e0>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011d5e:	4b33      	ldr	r3, [pc, #204]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	220c      	movs	r2, #12
 8011d64:	421a      	tst	r2, r3
 8011d66:	d03d      	beq.n	8011de4 <HAL_RCC_ClockConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d68:	f7fe f8bc 	bl	800fee4 <HAL_GetTick>
 8011d6c:	1b80      	subs	r0, r0, r6
 8011d6e:	4b30      	ldr	r3, [pc, #192]	; (8011e30 <HAL_RCC_ClockConfig+0x248>)
 8011d70:	4298      	cmp	r0, r3
 8011d72:	d9f4      	bls.n	8011d5e <HAL_RCC_ClockConfig+0x176>
          {
            return HAL_TIMEOUT;
 8011d74:	2003      	movs	r0, #3
 8011d76:	e04d      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011d78:	4a2c      	ldr	r2, [pc, #176]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011d7a:	6812      	ldr	r2, [r2, #0]
 8011d7c:	0192      	lsls	r2, r2, #6
 8011d7e:	d4de      	bmi.n	8011d3e <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8011d80:	2001      	movs	r0, #1
 8011d82:	e047      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011d84:	4a29      	ldr	r2, [pc, #164]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011d86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011d88:	03d2      	lsls	r2, r2, #15
 8011d8a:	d4d8      	bmi.n	8011d3e <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8011d8c:	2001      	movs	r0, #1
 8011d8e:	e041      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011d90:	4b26      	ldr	r3, [pc, #152]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011d92:	685a      	ldr	r2, [r3, #4]
 8011d94:	230c      	movs	r3, #12
 8011d96:	4013      	ands	r3, r2
 8011d98:	2b04      	cmp	r3, #4
 8011d9a:	d023      	beq.n	8011de4 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d9c:	f7fe f8a2 	bl	800fee4 <HAL_GetTick>
 8011da0:	1b80      	subs	r0, r0, r6
 8011da2:	4a23      	ldr	r2, [pc, #140]	; (8011e30 <HAL_RCC_ClockConfig+0x248>)
 8011da4:	4290      	cmp	r0, r2
 8011da6:	d9f3      	bls.n	8011d90 <HAL_RCC_ClockConfig+0x1a8>
            return HAL_TIMEOUT;
 8011da8:	2003      	movs	r0, #3
 8011daa:	e033      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011dac:	4b1f      	ldr	r3, [pc, #124]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011dae:	685a      	ldr	r2, [r3, #4]
 8011db0:	230c      	movs	r3, #12
 8011db2:	4013      	ands	r3, r2
 8011db4:	2b08      	cmp	r3, #8
 8011db6:	d015      	beq.n	8011de4 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011db8:	f7fe f894 	bl	800fee4 <HAL_GetTick>
 8011dbc:	1b80      	subs	r0, r0, r6
 8011dbe:	4b1c      	ldr	r3, [pc, #112]	; (8011e30 <HAL_RCC_ClockConfig+0x248>)
 8011dc0:	4298      	cmp	r0, r3
 8011dc2:	d9f3      	bls.n	8011dac <HAL_RCC_ClockConfig+0x1c4>
            return HAL_TIMEOUT;
 8011dc4:	2003      	movs	r0, #3
 8011dc6:	e025      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011dc8:	4b18      	ldr	r3, [pc, #96]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011dca:	685a      	ldr	r2, [r3, #4]
 8011dcc:	230c      	movs	r3, #12
 8011dce:	4013      	ands	r3, r2
 8011dd0:	2b0c      	cmp	r3, #12
 8011dd2:	d007      	beq.n	8011de4 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011dd4:	f7fe f886 	bl	800fee4 <HAL_GetTick>
 8011dd8:	1b80      	subs	r0, r0, r6
 8011dda:	4b15      	ldr	r3, [pc, #84]	; (8011e30 <HAL_RCC_ClockConfig+0x248>)
 8011ddc:	4298      	cmp	r0, r3
 8011dde:	d9f3      	bls.n	8011dc8 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
 8011de0:	2003      	movs	r0, #3
 8011de2:	e017      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011de4:	4910      	ldr	r1, [pc, #64]	; (8011e28 <HAL_RCC_ClockConfig+0x240>)
 8011de6:	680b      	ldr	r3, [r1, #0]
 8011de8:	2201      	movs	r2, #1
 8011dea:	4393      	bics	r3, r2
 8011dec:	432b      	orrs	r3, r5
 8011dee:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011df0:	680b      	ldr	r3, [r1, #0]
 8011df2:	401a      	ands	r2, r3
 8011df4:	42aa      	cmp	r2, r5
 8011df6:	d114      	bne.n	8011e22 <HAL_RCC_ClockConfig+0x23a>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011df8:	6823      	ldr	r3, [r4, #0]
 8011dfa:	075b      	lsls	r3, r3, #29
 8011dfc:	d506      	bpl.n	8011e0c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8011dfe:	4a0b      	ldr	r2, [pc, #44]	; (8011e2c <HAL_RCC_ClockConfig+0x244>)
 8011e00:	6853      	ldr	r3, [r2, #4]
 8011e02:	490c      	ldr	r1, [pc, #48]	; (8011e34 <HAL_RCC_ClockConfig+0x24c>)
 8011e04:	400b      	ands	r3, r1
 8011e06:	68e1      	ldr	r1, [r4, #12]
 8011e08:	430b      	orrs	r3, r1
 8011e0a:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8011e0c:	2000      	movs	r0, #0
 8011e0e:	f7fe f83f 	bl	800fe90 <HAL_InitTick>
  
  return HAL_OK;
 8011e12:	2000      	movs	r0, #0
}
 8011e14:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8011e16:	2001      	movs	r0, #1
 8011e18:	e7fc      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
          return HAL_ERROR;
 8011e1a:	2001      	movs	r0, #1
 8011e1c:	e7fa      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
          return HAL_ERROR;
 8011e1e:	2001      	movs	r0, #1
 8011e20:	e7f8      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
      return HAL_ERROR;
 8011e22:	2001      	movs	r0, #1
 8011e24:	e7f6      	b.n	8011e14 <HAL_RCC_ClockConfig+0x22c>
 8011e26:	46c0      	nop			; (mov r8, r8)
 8011e28:	40022000 	.word	0x40022000
 8011e2c:	40021000 	.word	0x40021000
 8011e30:	00001388 	.word	0x00001388
 8011e34:	fffff8ff 	.word	0xfffff8ff

08011e38 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011e38:	b510      	push	{r4, lr}
 8011e3a:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011e3c:	aa04      	add	r2, sp, #16
 8011e3e:	4b1e      	ldr	r3, [pc, #120]	; (8011eb8 <HAL_RCC_GetSysClockFreq+0x80>)
 8011e40:	cb13      	ldmia	r3!, {r0, r1, r4}
 8011e42:	c213      	stmia	r2!, {r0, r1, r4}
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	6013      	str	r3, [r2, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011e48:	466a      	mov	r2, sp
 8011e4a:	4b1c      	ldr	r3, [pc, #112]	; (8011ebc <HAL_RCC_GetSysClockFreq+0x84>)
 8011e4c:	cb13      	ldmia	r3!, {r0, r1, r4}
 8011e4e:	c213      	stmia	r2!, {r0, r1, r4}
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8011e54:	4b1a      	ldr	r3, [pc, #104]	; (8011ec0 <HAL_RCC_GetSysClockFreq+0x88>)
 8011e56:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011e58:	230c      	movs	r3, #12
 8011e5a:	4013      	ands	r3, r2
 8011e5c:	2b08      	cmp	r3, #8
 8011e5e:	d004      	beq.n	8011e6a <HAL_RCC_GetSysClockFreq+0x32>
 8011e60:	2b0c      	cmp	r3, #12
 8011e62:	d126      	bne.n	8011eb2 <HAL_RCC_GetSysClockFreq+0x7a>
      break;
    }
#if defined(RCC_CR2_HSI48ON)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8011e64:	4817      	ldr	r0, [pc, #92]	; (8011ec4 <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011e66:	b008      	add	sp, #32
 8011e68:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8011e6a:	0c91      	lsrs	r1, r2, #18
 8011e6c:	230f      	movs	r3, #15
 8011e6e:	4019      	ands	r1, r3
 8011e70:	a804      	add	r0, sp, #16
 8011e72:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8011e74:	4912      	ldr	r1, [pc, #72]	; (8011ec0 <HAL_RCC_GetSysClockFreq+0x88>)
 8011e76:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8011e78:	400b      	ands	r3, r1
 8011e7a:	4669      	mov	r1, sp
 8011e7c:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8011e7e:	23c0      	movs	r3, #192	; 0xc0
 8011e80:	025b      	lsls	r3, r3, #9
 8011e82:	401a      	ands	r2, r3
 8011e84:	2380      	movs	r3, #128	; 0x80
 8011e86:	025b      	lsls	r3, r3, #9
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d008      	beq.n	8011e9e <HAL_RCC_GetSysClockFreq+0x66>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8011e8c:	23c0      	movs	r3, #192	; 0xc0
 8011e8e:	025b      	lsls	r3, r3, #9
 8011e90:	429a      	cmp	r2, r3
 8011e92:	d009      	beq.n	8011ea8 <HAL_RCC_GetSysClockFreq+0x70>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8011e94:	480c      	ldr	r0, [pc, #48]	; (8011ec8 <HAL_RCC_GetSysClockFreq+0x90>)
 8011e96:	f7ee f95b 	bl	8000150 <__udivsi3>
 8011e9a:	4360      	muls	r0, r4
 8011e9c:	e7e3      	b.n	8011e66 <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8011e9e:	480a      	ldr	r0, [pc, #40]	; (8011ec8 <HAL_RCC_GetSysClockFreq+0x90>)
 8011ea0:	f7ee f956 	bl	8000150 <__udivsi3>
 8011ea4:	4360      	muls	r0, r4
 8011ea6:	e7de      	b.n	8011e66 <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8011ea8:	4806      	ldr	r0, [pc, #24]	; (8011ec4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8011eaa:	f7ee f951 	bl	8000150 <__udivsi3>
 8011eae:	4360      	muls	r0, r4
 8011eb0:	e7d9      	b.n	8011e66 <HAL_RCC_GetSysClockFreq+0x2e>
  switch (tmpreg & RCC_CFGR_SWS)
 8011eb2:	4805      	ldr	r0, [pc, #20]	; (8011ec8 <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 8011eb4:	e7d7      	b.n	8011e66 <HAL_RCC_GetSysClockFreq+0x2e>
 8011eb6:	46c0      	nop			; (mov r8, r8)
 8011eb8:	0801c600 	.word	0x0801c600
 8011ebc:	0801c614 	.word	0x0801c614
 8011ec0:	40021000 	.word	0x40021000
 8011ec4:	02dc6c00 	.word	0x02dc6c00
 8011ec8:	007a1200 	.word	0x007a1200

08011ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011ecc:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011ece:	f7ff ffb3 	bl	8011e38 <HAL_RCC_GetSysClockFreq>
 8011ed2:	4b05      	ldr	r3, [pc, #20]	; (8011ee8 <HAL_RCC_GetHCLKFreq+0x1c>)
 8011ed4:	685a      	ldr	r2, [r3, #4]
 8011ed6:	0912      	lsrs	r2, r2, #4
 8011ed8:	230f      	movs	r3, #15
 8011eda:	4013      	ands	r3, r2
 8011edc:	4a03      	ldr	r2, [pc, #12]	; (8011eec <HAL_RCC_GetHCLKFreq+0x20>)
 8011ede:	5cd3      	ldrb	r3, [r2, r3]
 8011ee0:	40d8      	lsrs	r0, r3
 8011ee2:	4b03      	ldr	r3, [pc, #12]	; (8011ef0 <HAL_RCC_GetHCLKFreq+0x24>)
 8011ee4:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8011ee6:	bd10      	pop	{r4, pc}
 8011ee8:	40021000 	.word	0x40021000
 8011eec:	08019d14 	.word	0x08019d14
 8011ef0:	200000a4 	.word	0x200000a4

08011ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011ef4:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8011ef6:	f7ff ffe9 	bl	8011ecc <HAL_RCC_GetHCLKFreq>
 8011efa:	4b04      	ldr	r3, [pc, #16]	; (8011f0c <HAL_RCC_GetPCLK1Freq+0x18>)
 8011efc:	685a      	ldr	r2, [r3, #4]
 8011efe:	0a12      	lsrs	r2, r2, #8
 8011f00:	2307      	movs	r3, #7
 8011f02:	4013      	ands	r3, r2
 8011f04:	4a02      	ldr	r2, [pc, #8]	; (8011f10 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8011f06:	5cd3      	ldrb	r3, [r2, r3]
 8011f08:	40d8      	lsrs	r0, r3
}    
 8011f0a:	bd10      	pop	{r4, pc}
 8011f0c:	40021000 	.word	0x40021000
 8011f10:	08019d14 	.word	0x08019d14

08011f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011f14:	b530      	push	{r4, r5, lr}
 8011f16:	b083      	sub	sp, #12
 8011f18:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011f1a:	6803      	ldr	r3, [r0, #0]
 8011f1c:	03db      	lsls	r3, r3, #15
 8011f1e:	d507      	bpl.n	8011f30 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011f20:	4b41      	ldr	r3, [pc, #260]	; (8012028 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011f22:	6a1b      	ldr	r3, [r3, #32]
 8011f24:	6842      	ldr	r2, [r0, #4]
 8011f26:	4053      	eors	r3, r2
 8011f28:	22c0      	movs	r2, #192	; 0xc0
 8011f2a:	0092      	lsls	r2, r2, #2
 8011f2c:	4213      	tst	r3, r2
 8011f2e:	d134      	bne.n	8011f9a <HAL_RCCEx_PeriphCLKConfig+0x86>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011f30:	6823      	ldr	r3, [r4, #0]
 8011f32:	07db      	lsls	r3, r3, #31
 8011f34:	d506      	bpl.n	8011f44 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011f36:	4a3c      	ldr	r2, [pc, #240]	; (8012028 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011f38:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011f3a:	2103      	movs	r1, #3
 8011f3c:	438b      	bics	r3, r1
 8011f3e:	68a1      	ldr	r1, [r4, #8]
 8011f40:	430b      	orrs	r3, r1
 8011f42:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011f44:	6823      	ldr	r3, [r4, #0]
 8011f46:	079b      	lsls	r3, r3, #30
 8011f48:	d506      	bpl.n	8011f58 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011f4a:	4a37      	ldr	r2, [pc, #220]	; (8012028 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011f4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011f4e:	4937      	ldr	r1, [pc, #220]	; (801202c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8011f50:	400b      	ands	r3, r1
 8011f52:	68e1      	ldr	r1, [r4, #12]
 8011f54:	430b      	orrs	r3, r1
 8011f56:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011f58:	6823      	ldr	r3, [r4, #0]
 8011f5a:	035b      	lsls	r3, r3, #13
 8011f5c:	d506      	bpl.n	8011f6c <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011f5e:	4a32      	ldr	r2, [pc, #200]	; (8012028 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011f60:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011f62:	4933      	ldr	r1, [pc, #204]	; (8012030 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8011f64:	400b      	ands	r3, r1
 8011f66:	6921      	ldr	r1, [r4, #16]
 8011f68:	430b      	orrs	r3, r1
 8011f6a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011f6c:	6823      	ldr	r3, [r4, #0]
 8011f6e:	069b      	lsls	r3, r3, #26
 8011f70:	d506      	bpl.n	8011f80 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011f72:	4a2d      	ldr	r2, [pc, #180]	; (8012028 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011f74:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011f76:	2110      	movs	r1, #16
 8011f78:	438b      	bics	r3, r1
 8011f7a:	6961      	ldr	r1, [r4, #20]
 8011f7c:	430b      	orrs	r3, r1
 8011f7e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011f80:	6823      	ldr	r3, [r4, #0]
 8011f82:	055b      	lsls	r3, r3, #21
 8011f84:	d54e      	bpl.n	8012024 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011f86:	4a28      	ldr	r2, [pc, #160]	; (8012028 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011f88:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011f8a:	2140      	movs	r1, #64	; 0x40
 8011f8c:	438b      	bics	r3, r1
 8011f8e:	69a1      	ldr	r1, [r4, #24]
 8011f90:	430b      	orrs	r3, r1
 8011f92:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8011f94:	2000      	movs	r0, #0
}
 8011f96:	b003      	add	sp, #12
 8011f98:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8011f9a:	4a23      	ldr	r2, [pc, #140]	; (8012028 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011f9c:	69d1      	ldr	r1, [r2, #28]
 8011f9e:	2080      	movs	r0, #128	; 0x80
 8011fa0:	0540      	lsls	r0, r0, #21
 8011fa2:	4301      	orrs	r1, r0
 8011fa4:	61d1      	str	r1, [r2, #28]
 8011fa6:	69d3      	ldr	r3, [r2, #28]
 8011fa8:	4003      	ands	r3, r0
 8011faa:	9301      	str	r3, [sp, #4]
 8011fac:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011fae:	4a21      	ldr	r2, [pc, #132]	; (8012034 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011fb0:	6811      	ldr	r1, [r2, #0]
 8011fb2:	2380      	movs	r3, #128	; 0x80
 8011fb4:	005b      	lsls	r3, r3, #1
 8011fb6:	430b      	orrs	r3, r1
 8011fb8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8011fba:	f7fd ff93 	bl	800fee4 <HAL_GetTick>
 8011fbe:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011fc0:	4b1c      	ldr	r3, [pc, #112]	; (8012034 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	05db      	lsls	r3, r3, #23
 8011fc6:	d406      	bmi.n	8011fd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011fc8:	f7fd ff8c 	bl	800fee4 <HAL_GetTick>
 8011fcc:	1b40      	subs	r0, r0, r5
 8011fce:	2864      	cmp	r0, #100	; 0x64
 8011fd0:	d9f6      	bls.n	8011fc0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          return HAL_TIMEOUT;
 8011fd2:	2003      	movs	r0, #3
 8011fd4:	e7df      	b.n	8011f96 <HAL_RCCEx_PeriphCLKConfig+0x82>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011fd6:	4b14      	ldr	r3, [pc, #80]	; (8012028 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011fd8:	6a18      	ldr	r0, [r3, #32]
 8011fda:	4a17      	ldr	r2, [pc, #92]	; (8012038 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8011fdc:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8011fde:	6a1d      	ldr	r5, [r3, #32]
 8011fe0:	2180      	movs	r1, #128	; 0x80
 8011fe2:	0249      	lsls	r1, r1, #9
 8011fe4:	4329      	orrs	r1, r5
 8011fe6:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011fe8:	6a19      	ldr	r1, [r3, #32]
 8011fea:	4d14      	ldr	r5, [pc, #80]	; (801203c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8011fec:	4029      	ands	r1, r5
 8011fee:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8011ff0:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8011ff2:	0783      	lsls	r3, r0, #30
 8011ff4:	d407      	bmi.n	8012006 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8011ff6:	4a0c      	ldr	r2, [pc, #48]	; (8012028 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011ff8:	6a13      	ldr	r3, [r2, #32]
 8011ffa:	490f      	ldr	r1, [pc, #60]	; (8012038 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8011ffc:	400b      	ands	r3, r1
 8011ffe:	6861      	ldr	r1, [r4, #4]
 8012000:	430b      	orrs	r3, r1
 8012002:	6213      	str	r3, [r2, #32]
 8012004:	e794      	b.n	8011f30 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        tickstart = HAL_GetTick();
 8012006:	f7fd ff6d 	bl	800fee4 <HAL_GetTick>
 801200a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801200c:	4b06      	ldr	r3, [pc, #24]	; (8012028 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801200e:	6a1b      	ldr	r3, [r3, #32]
 8012010:	079b      	lsls	r3, r3, #30
 8012012:	d4f0      	bmi.n	8011ff6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012014:	f7fd ff66 	bl	800fee4 <HAL_GetTick>
 8012018:	1b40      	subs	r0, r0, r5
 801201a:	4b09      	ldr	r3, [pc, #36]	; (8012040 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 801201c:	4298      	cmp	r0, r3
 801201e:	d9f5      	bls.n	801200c <HAL_RCCEx_PeriphCLKConfig+0xf8>
            return HAL_TIMEOUT;
 8012020:	2003      	movs	r0, #3
 8012022:	e7b8      	b.n	8011f96 <HAL_RCCEx_PeriphCLKConfig+0x82>
  return HAL_OK;
 8012024:	2000      	movs	r0, #0
 8012026:	e7b6      	b.n	8011f96 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8012028:	40021000 	.word	0x40021000
 801202c:	fffcffff 	.word	0xfffcffff
 8012030:	fff3ffff 	.word	0xfff3ffff
 8012034:	40007000 	.word	0x40007000
 8012038:	fffffcff 	.word	0xfffffcff
 801203c:	fffeffff 	.word	0xfffeffff
 8012040:	00001388 	.word	0x00001388

08012044 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012044:	4770      	bx	lr

08012046 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8012046:	b570      	push	{r4, r5, r6, lr}
 8012048:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801204a:	6802      	ldr	r2, [r0, #0]
 801204c:	68d3      	ldr	r3, [r2, #12]
 801204e:	21a0      	movs	r1, #160	; 0xa0
 8012050:	438b      	bics	r3, r1
 8012052:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8012054:	f7fd ff46 	bl	800fee4 <HAL_GetTick>
 8012058:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801205a:	6823      	ldr	r3, [r4, #0]
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	069b      	lsls	r3, r3, #26
 8012060:	d408      	bmi.n	8012074 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012062:	f7fd ff3f 	bl	800fee4 <HAL_GetTick>
 8012066:	1b40      	subs	r0, r0, r5
 8012068:	23fa      	movs	r3, #250	; 0xfa
 801206a:	009b      	lsls	r3, r3, #2
 801206c:	4298      	cmp	r0, r3
 801206e:	d9f4      	bls.n	801205a <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8012070:	2003      	movs	r0, #3
 8012072:	e000      	b.n	8012076 <HAL_RTC_WaitForSynchro+0x30>
    } 
  }

  return HAL_OK;
 8012074:	2000      	movs	r0, #0
}
 8012076:	bd70      	pop	{r4, r5, r6, pc}

08012078 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8012078:	b570      	push	{r4, r5, r6, lr}
 801207a:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801207c:	6803      	ldr	r3, [r0, #0]
 801207e:	68da      	ldr	r2, [r3, #12]
 8012080:	0652      	lsls	r2, r2, #25
 8012082:	d501      	bpl.n	8012088 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8012084:	2000      	movs	r0, #0
}
 8012086:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012088:	2201      	movs	r2, #1
 801208a:	4252      	negs	r2, r2
 801208c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 801208e:	f7fd ff29 	bl	800fee4 <HAL_GetTick>
 8012092:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012094:	6823      	ldr	r3, [r4, #0]
 8012096:	68db      	ldr	r3, [r3, #12]
 8012098:	065b      	lsls	r3, r3, #25
 801209a:	d408      	bmi.n	80120ae <RTC_EnterInitMode+0x36>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801209c:	f7fd ff22 	bl	800fee4 <HAL_GetTick>
 80120a0:	1b40      	subs	r0, r0, r5
 80120a2:	22fa      	movs	r2, #250	; 0xfa
 80120a4:	0092      	lsls	r2, r2, #2
 80120a6:	4290      	cmp	r0, r2
 80120a8:	d9f4      	bls.n	8012094 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80120aa:	2003      	movs	r0, #3
 80120ac:	e7eb      	b.n	8012086 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 80120ae:	2000      	movs	r0, #0
 80120b0:	e7e9      	b.n	8012086 <RTC_EnterInitMode+0xe>
	...

080120b4 <HAL_RTC_Init>:
{
 80120b4:	b570      	push	{r4, r5, r6, lr}
 80120b6:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 80120b8:	d046      	beq.n	8012148 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80120ba:	7f43      	ldrb	r3, [r0, #29]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d013      	beq.n	80120e8 <HAL_RTC_Init+0x34>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80120c0:	2302      	movs	r3, #2
 80120c2:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80120c4:	6823      	ldr	r3, [r4, #0]
 80120c6:	22ca      	movs	r2, #202	; 0xca
 80120c8:	625a      	str	r2, [r3, #36]	; 0x24
 80120ca:	6823      	ldr	r3, [r4, #0]
 80120cc:	3a77      	subs	r2, #119	; 0x77
 80120ce:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80120d0:	0020      	movs	r0, r4
 80120d2:	f7ff ffd1 	bl	8012078 <RTC_EnterInitMode>
 80120d6:	2800      	cmp	r0, #0
 80120d8:	d00a      	beq.n	80120f0 <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80120da:	6823      	ldr	r3, [r4, #0]
 80120dc:	22ff      	movs	r2, #255	; 0xff
 80120de:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80120e0:	2304      	movs	r3, #4
 80120e2:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80120e4:	2001      	movs	r0, #1
}
 80120e6:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80120e8:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80120ea:	f7ff ffab 	bl	8012044 <HAL_RTC_MspInit>
 80120ee:	e7e7      	b.n	80120c0 <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80120f0:	6822      	ldr	r2, [r4, #0]
 80120f2:	6893      	ldr	r3, [r2, #8]
 80120f4:	4915      	ldr	r1, [pc, #84]	; (801214c <HAL_RTC_Init+0x98>)
 80120f6:	400b      	ands	r3, r1
 80120f8:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80120fa:	6821      	ldr	r1, [r4, #0]
 80120fc:	688a      	ldr	r2, [r1, #8]
 80120fe:	6863      	ldr	r3, [r4, #4]
 8012100:	6925      	ldr	r5, [r4, #16]
 8012102:	432b      	orrs	r3, r5
 8012104:	6965      	ldr	r5, [r4, #20]
 8012106:	432b      	orrs	r3, r5
 8012108:	4313      	orrs	r3, r2
 801210a:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801210c:	6823      	ldr	r3, [r4, #0]
 801210e:	68e2      	ldr	r2, [r4, #12]
 8012110:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012112:	6821      	ldr	r1, [r4, #0]
 8012114:	690b      	ldr	r3, [r1, #16]
 8012116:	68a2      	ldr	r2, [r4, #8]
 8012118:	0412      	lsls	r2, r2, #16
 801211a:	4313      	orrs	r3, r2
 801211c:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 801211e:	6822      	ldr	r2, [r4, #0]
 8012120:	68d3      	ldr	r3, [r2, #12]
 8012122:	2180      	movs	r1, #128	; 0x80
 8012124:	438b      	bics	r3, r1
 8012126:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8012128:	6822      	ldr	r2, [r4, #0]
 801212a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801212c:	4908      	ldr	r1, [pc, #32]	; (8012150 <HAL_RTC_Init+0x9c>)
 801212e:	400b      	ands	r3, r1
 8012130:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8012132:	6822      	ldr	r2, [r4, #0]
 8012134:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012136:	69a1      	ldr	r1, [r4, #24]
 8012138:	430b      	orrs	r3, r1
 801213a:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801213c:	6823      	ldr	r3, [r4, #0]
 801213e:	22ff      	movs	r2, #255	; 0xff
 8012140:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8012142:	2301      	movs	r3, #1
 8012144:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8012146:	e7ce      	b.n	80120e6 <HAL_RTC_Init+0x32>
     return HAL_ERROR;
 8012148:	2001      	movs	r0, #1
 801214a:	e7cc      	b.n	80120e6 <HAL_RTC_Init+0x32>
 801214c:	ff8fffbf 	.word	0xff8fffbf
 8012150:	fffbffff 	.word	0xfffbffff

08012154 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8012154:	2300      	movs	r3, #0
  
  while(Value >= 10)
 8012156:	e002      	b.n	801215e <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8012158:	3301      	adds	r3, #1
    Value -= 10;
 801215a:	380a      	subs	r0, #10
 801215c:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 801215e:	2809      	cmp	r0, #9
 8012160:	d8fa      	bhi.n	8012158 <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8012162:	011b      	lsls	r3, r3, #4
 8012164:	b2db      	uxtb	r3, r3
 8012166:	4318      	orrs	r0, r3
}
 8012168:	4770      	bx	lr
	...

0801216c <HAL_RTC_SetTime>:
{
 801216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801216e:	0004      	movs	r4, r0
 8012170:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8012172:	7f03      	ldrb	r3, [r0, #28]
 8012174:	2b01      	cmp	r3, #1
 8012176:	d100      	bne.n	801217a <HAL_RTC_SetTime+0xe>
 8012178:	e070      	b.n	801225c <HAL_RTC_SetTime+0xf0>
 801217a:	2301      	movs	r3, #1
 801217c:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 801217e:	3301      	adds	r3, #1
 8012180:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8012182:	2a00      	cmp	r2, #0
 8012184:	d142      	bne.n	801220c <HAL_RTC_SetTime+0xa0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012186:	6803      	ldr	r3, [r0, #0]
 8012188:	689b      	ldr	r3, [r3, #8]
 801218a:	065b      	lsls	r3, r3, #25
 801218c:	d401      	bmi.n	8012192 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 801218e:	2300      	movs	r3, #0
 8012190:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012192:	7830      	ldrb	r0, [r6, #0]
 8012194:	f7ff ffde 	bl	8012154 <RTC_ByteToBcd2>
 8012198:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 801219a:	7870      	ldrb	r0, [r6, #1]
 801219c:	f7ff ffda 	bl	8012154 <RTC_ByteToBcd2>
 80121a0:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80121a2:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80121a4:	78b0      	ldrb	r0, [r6, #2]
 80121a6:	f7ff ffd5 	bl	8012154 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80121aa:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));  
 80121ac:	7a30      	ldrb	r0, [r6, #8]
 80121ae:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80121b0:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80121b2:	6823      	ldr	r3, [r4, #0]
 80121b4:	22ca      	movs	r2, #202	; 0xca
 80121b6:	625a      	str	r2, [r3, #36]	; 0x24
 80121b8:	6823      	ldr	r3, [r4, #0]
 80121ba:	3a77      	subs	r2, #119	; 0x77
 80121bc:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80121be:	0020      	movs	r0, r4
 80121c0:	f7ff ff5a 	bl	8012078 <RTC_EnterInitMode>
 80121c4:	1e07      	subs	r7, r0, #0
 80121c6:	d132      	bne.n	801222e <HAL_RTC_SetTime+0xc2>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80121c8:	6823      	ldr	r3, [r4, #0]
 80121ca:	4825      	ldr	r0, [pc, #148]	; (8012260 <HAL_RTC_SetTime+0xf4>)
 80121cc:	4005      	ands	r5, r0
 80121ce:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80121d0:	6822      	ldr	r2, [r4, #0]
 80121d2:	6893      	ldr	r3, [r2, #8]
 80121d4:	4923      	ldr	r1, [pc, #140]	; (8012264 <HAL_RTC_SetTime+0xf8>)
 80121d6:	400b      	ands	r3, r1
 80121d8:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80121da:	6821      	ldr	r1, [r4, #0]
 80121dc:	688b      	ldr	r3, [r1, #8]
 80121de:	68f2      	ldr	r2, [r6, #12]
 80121e0:	6930      	ldr	r0, [r6, #16]
 80121e2:	4302      	orrs	r2, r0
 80121e4:	4313      	orrs	r3, r2
 80121e6:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80121e8:	6822      	ldr	r2, [r4, #0]
 80121ea:	68d3      	ldr	r3, [r2, #12]
 80121ec:	2180      	movs	r1, #128	; 0x80
 80121ee:	438b      	bics	r3, r1
 80121f0:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80121f2:	6823      	ldr	r3, [r4, #0]
 80121f4:	689b      	ldr	r3, [r3, #8]
 80121f6:	069b      	lsls	r3, r3, #26
 80121f8:	d522      	bpl.n	8012240 <HAL_RTC_SetTime+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80121fa:	6823      	ldr	r3, [r4, #0]
 80121fc:	22ff      	movs	r2, #255	; 0xff
 80121fe:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8012200:	2301      	movs	r3, #1
 8012202:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8012204:	2300      	movs	r3, #0
 8012206:	7723      	strb	r3, [r4, #28]
}
 8012208:	0038      	movs	r0, r7
 801220a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801220c:	6803      	ldr	r3, [r0, #0]
 801220e:	689b      	ldr	r3, [r3, #8]
 8012210:	065b      	lsls	r3, r3, #25
 8012212:	d401      	bmi.n	8012218 <HAL_RTC_SetTime+0xac>
      sTime->TimeFormat = 0x00;
 8012214:	2300      	movs	r3, #0
 8012216:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012218:	7835      	ldrb	r5, [r6, #0]
 801221a:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 801221c:	7870      	ldrb	r0, [r6, #1]
 801221e:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012220:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8012222:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012224:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8012226:	7a30      	ldrb	r0, [r6, #8]
 8012228:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801222a:	4305      	orrs	r5, r0
 801222c:	e7c1      	b.n	80121b2 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801222e:	6823      	ldr	r3, [r4, #0]
 8012230:	22ff      	movs	r2, #255	; 0xff
 8012232:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012234:	2304      	movs	r3, #4
 8012236:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012238:	2300      	movs	r3, #0
 801223a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 801223c:	2701      	movs	r7, #1
 801223e:	e7e3      	b.n	8012208 <HAL_RTC_SetTime+0x9c>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012240:	0020      	movs	r0, r4
 8012242:	f7ff ff00 	bl	8012046 <HAL_RTC_WaitForSynchro>
 8012246:	2800      	cmp	r0, #0
 8012248:	d0d7      	beq.n	80121fa <HAL_RTC_SetTime+0x8e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801224a:	6823      	ldr	r3, [r4, #0]
 801224c:	22ff      	movs	r2, #255	; 0xff
 801224e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012250:	2304      	movs	r3, #4
 8012252:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012254:	2300      	movs	r3, #0
 8012256:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012258:	2701      	movs	r7, #1
 801225a:	e7d5      	b.n	8012208 <HAL_RTC_SetTime+0x9c>
  __HAL_LOCK(hrtc);
 801225c:	2702      	movs	r7, #2
 801225e:	e7d3      	b.n	8012208 <HAL_RTC_SetTime+0x9c>
 8012260:	007f7f7f 	.word	0x007f7f7f
 8012264:	fffbffff 	.word	0xfffbffff

08012268 <HAL_RTC_SetDate>:
{
 8012268:	b570      	push	{r4, r5, r6, lr}
 801226a:	0004      	movs	r4, r0
 801226c:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 801226e:	7f03      	ldrb	r3, [r0, #28]
 8012270:	2b01      	cmp	r3, #1
 8012272:	d061      	beq.n	8012338 <HAL_RTC_SetDate+0xd0>
 8012274:	2301      	movs	r3, #1
 8012276:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8012278:	3301      	adds	r3, #1
 801227a:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 801227c:	2a00      	cmp	r2, #0
 801227e:	d106      	bne.n	801228e <HAL_RTC_SetDate+0x26>
 8012280:	784b      	ldrb	r3, [r1, #1]
 8012282:	06d9      	lsls	r1, r3, #27
 8012284:	d503      	bpl.n	801228e <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8012286:	2110      	movs	r1, #16
 8012288:	438b      	bics	r3, r1
 801228a:	330a      	adds	r3, #10
 801228c:	7073      	strb	r3, [r6, #1]
  if(Format == RTC_FORMAT_BIN)
 801228e:	2a00      	cmp	r2, #0
 8012290:	d130      	bne.n	80122f4 <HAL_RTC_SetDate+0x8c>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012292:	78f0      	ldrb	r0, [r6, #3]
 8012294:	f7ff ff5e 	bl	8012154 <RTC_ByteToBcd2>
 8012298:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 801229a:	7870      	ldrb	r0, [r6, #1]
 801229c:	f7ff ff5a 	bl	8012154 <RTC_ByteToBcd2>
 80122a0:	0200      	lsls	r0, r0, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80122a2:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80122a4:	78b0      	ldrb	r0, [r6, #2]
 80122a6:	f7ff ff55 	bl	8012154 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80122aa:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));   
 80122ac:	7830      	ldrb	r0, [r6, #0]
 80122ae:	0340      	lsls	r0, r0, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80122b0:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80122b2:	6823      	ldr	r3, [r4, #0]
 80122b4:	22ca      	movs	r2, #202	; 0xca
 80122b6:	625a      	str	r2, [r3, #36]	; 0x24
 80122b8:	6823      	ldr	r3, [r4, #0]
 80122ba:	3a77      	subs	r2, #119	; 0x77
 80122bc:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80122be:	0020      	movs	r0, r4
 80122c0:	f7ff feda 	bl	8012078 <RTC_EnterInitMode>
 80122c4:	1e06      	subs	r6, r0, #0
 80122c6:	d120      	bne.n	801230a <HAL_RTC_SetDate+0xa2>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80122c8:	6823      	ldr	r3, [r4, #0]
 80122ca:	481c      	ldr	r0, [pc, #112]	; (801233c <HAL_RTC_SetDate+0xd4>)
 80122cc:	4005      	ands	r5, r0
 80122ce:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80122d0:	6822      	ldr	r2, [r4, #0]
 80122d2:	68d3      	ldr	r3, [r2, #12]
 80122d4:	2180      	movs	r1, #128	; 0x80
 80122d6:	438b      	bics	r3, r1
 80122d8:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80122da:	6823      	ldr	r3, [r4, #0]
 80122dc:	689b      	ldr	r3, [r3, #8]
 80122de:	069b      	lsls	r3, r3, #26
 80122e0:	d51c      	bpl.n	801231c <HAL_RTC_SetDate+0xb4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80122e2:	6823      	ldr	r3, [r4, #0]
 80122e4:	22ff      	movs	r2, #255	; 0xff
 80122e6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80122e8:	2301      	movs	r3, #1
 80122ea:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80122ec:	2300      	movs	r3, #0
 80122ee:	7723      	strb	r3, [r4, #28]
}
 80122f0:	0030      	movs	r0, r6
 80122f2:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 80122f4:	7870      	ldrb	r0, [r6, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 80122f6:	78b2      	ldrb	r2, [r6, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80122f8:	78f5      	ldrb	r5, [r6, #3]
 80122fa:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80122fc:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80122fe:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8) | \
 8012300:	4315      	orrs	r5, r2
                  (((uint32_t)sDate->WeekDay) << 13));  
 8012302:	7830      	ldrb	r0, [r6, #0]
 8012304:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012306:	4305      	orrs	r5, r0
 8012308:	e7d3      	b.n	80122b2 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801230a:	6823      	ldr	r3, [r4, #0]
 801230c:	22ff      	movs	r2, #255	; 0xff
 801230e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012310:	2304      	movs	r3, #4
 8012312:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012314:	2300      	movs	r3, #0
 8012316:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012318:	2601      	movs	r6, #1
 801231a:	e7e9      	b.n	80122f0 <HAL_RTC_SetDate+0x88>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801231c:	0020      	movs	r0, r4
 801231e:	f7ff fe92 	bl	8012046 <HAL_RTC_WaitForSynchro>
 8012322:	2800      	cmp	r0, #0
 8012324:	d0dd      	beq.n	80122e2 <HAL_RTC_SetDate+0x7a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012326:	6823      	ldr	r3, [r4, #0]
 8012328:	22ff      	movs	r2, #255	; 0xff
 801232a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801232c:	2304      	movs	r3, #4
 801232e:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012330:	2300      	movs	r3, #0
 8012332:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012334:	2601      	movs	r6, #1
 8012336:	e7db      	b.n	80122f0 <HAL_RTC_SetDate+0x88>
 __HAL_LOCK(hrtc);
 8012338:	2602      	movs	r6, #2
 801233a:	e7d9      	b.n	80122f0 <HAL_RTC_SetDate+0x88>
 801233c:	00ffff3f 	.word	0x00ffff3f

08012340 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012340:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012342:	0900      	lsrs	r0, r0, #4
 8012344:	0083      	lsls	r3, r0, #2
 8012346:	181b      	adds	r3, r3, r0
 8012348:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801234a:	200f      	movs	r0, #15
 801234c:	4010      	ands	r0, r2
 801234e:	18c0      	adds	r0, r0, r3
 8012350:	b2c0      	uxtb	r0, r0
}
 8012352:	4770      	bx	lr

08012354 <HAL_RTC_GetTime>:
{
 8012354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012356:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012358:	6803      	ldr	r3, [r0, #0]
 801235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801235c:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 801235e:	6803      	ldr	r3, [r0, #0]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	490f      	ldr	r1, [pc, #60]	; (80123a0 <HAL_RTC_GetTime+0x4c>)
 8012364:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8012366:	0c1d      	lsrs	r5, r3, #16
 8012368:	203f      	movs	r0, #63	; 0x3f
 801236a:	4028      	ands	r0, r5
 801236c:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 801236e:	0a1e      	lsrs	r6, r3, #8
 8012370:	277f      	movs	r7, #127	; 0x7f
 8012372:	403e      	ands	r6, r7
 8012374:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8012376:	401f      	ands	r7, r3
 8012378:	70a7      	strb	r7, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 801237a:	2140      	movs	r1, #64	; 0x40
 801237c:	4029      	ands	r1, r5
 801237e:	7221      	strb	r1, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 8012380:	2a00      	cmp	r2, #0
 8012382:	d10a      	bne.n	801239a <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012384:	f7ff ffdc 	bl	8012340 <RTC_Bcd2ToByte>
 8012388:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801238a:	0030      	movs	r0, r6
 801238c:	f7ff ffd8 	bl	8012340 <RTC_Bcd2ToByte>
 8012390:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8012392:	0038      	movs	r0, r7
 8012394:	f7ff ffd4 	bl	8012340 <RTC_Bcd2ToByte>
 8012398:	70a0      	strb	r0, [r4, #2]
}
 801239a:	2000      	movs	r0, #0
 801239c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801239e:	46c0      	nop			; (mov r8, r8)
 80123a0:	007f7f7f 	.word	0x007f7f7f

080123a4 <HAL_RTC_GetDate>:
{
 80123a4:	b570      	push	{r4, r5, r6, lr}
 80123a6:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80123a8:	6803      	ldr	r3, [r0, #0]
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	490e      	ldr	r1, [pc, #56]	; (80123e8 <HAL_RTC_GetDate+0x44>)
 80123ae:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80123b0:	0c18      	lsrs	r0, r3, #16
 80123b2:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80123b4:	0a19      	lsrs	r1, r3, #8
 80123b6:	261f      	movs	r6, #31
 80123b8:	400e      	ands	r6, r1
 80123ba:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80123bc:	253f      	movs	r5, #63	; 0x3f
 80123be:	401d      	ands	r5, r3
 80123c0:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80123c2:	0b5b      	lsrs	r3, r3, #13
 80123c4:	2107      	movs	r1, #7
 80123c6:	400b      	ands	r3, r1
 80123c8:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 80123ca:	2a00      	cmp	r2, #0
 80123cc:	d10a      	bne.n	80123e4 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80123ce:	f7ff ffb7 	bl	8012340 <RTC_Bcd2ToByte>
 80123d2:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80123d4:	0030      	movs	r0, r6
 80123d6:	f7ff ffb3 	bl	8012340 <RTC_Bcd2ToByte>
 80123da:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80123dc:	0028      	movs	r0, r5
 80123de:	f7ff ffaf 	bl	8012340 <RTC_Bcd2ToByte>
 80123e2:	70a0      	strb	r0, [r4, #2]
}
 80123e4:	2000      	movs	r0, #0
 80123e6:	bd70      	pop	{r4, r5, r6, pc}
 80123e8:	00ffff3f 	.word	0x00ffff3f

080123ec <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80123ec:	6803      	ldr	r3, [r0, #0]
 80123ee:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80123f0:	0089      	lsls	r1, r1, #2
 80123f2:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80123f4:	600a      	str	r2, [r1, #0]
}
 80123f6:	4770      	bx	lr

080123f8 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80123f8:	6803      	ldr	r3, [r0, #0]
 80123fa:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80123fc:	0089      	lsls	r1, r1, #2
 80123fe:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8012400:	6808      	ldr	r0, [r1, #0]
}
 8012402:	4770      	bx	lr

08012404 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012404:	4770      	bx	lr

08012406 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012406:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8012408:	2239      	movs	r2, #57	; 0x39
 801240a:	2302      	movs	r3, #2
 801240c:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801240e:	6804      	ldr	r4, [r0, #0]
 8012410:	6823      	ldr	r3, [r4, #0]
 8012412:	2101      	movs	r1, #1
 8012414:	430b      	orrs	r3, r1
 8012416:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8012418:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 801241a:	2000      	movs	r0, #0
 801241c:	bd10      	pop	{r4, pc}
	...

08012420 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8012420:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012422:	4a1f      	ldr	r2, [pc, #124]	; (80124a0 <TIM_Base_SetConfig+0x80>)
 8012424:	4290      	cmp	r0, r2
 8012426:	d006      	beq.n	8012436 <TIM_Base_SetConfig+0x16>
 8012428:	2280      	movs	r2, #128	; 0x80
 801242a:	05d2      	lsls	r2, r2, #23
 801242c:	4290      	cmp	r0, r2
 801242e:	d002      	beq.n	8012436 <TIM_Base_SetConfig+0x16>
 8012430:	4a1c      	ldr	r2, [pc, #112]	; (80124a4 <TIM_Base_SetConfig+0x84>)
 8012432:	4290      	cmp	r0, r2
 8012434:	d103      	bne.n	801243e <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012436:	2270      	movs	r2, #112	; 0x70
 8012438:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801243a:	684a      	ldr	r2, [r1, #4]
 801243c:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801243e:	4a18      	ldr	r2, [pc, #96]	; (80124a0 <TIM_Base_SetConfig+0x80>)
 8012440:	4290      	cmp	r0, r2
 8012442:	d012      	beq.n	801246a <TIM_Base_SetConfig+0x4a>
 8012444:	2280      	movs	r2, #128	; 0x80
 8012446:	05d2      	lsls	r2, r2, #23
 8012448:	4290      	cmp	r0, r2
 801244a:	d00e      	beq.n	801246a <TIM_Base_SetConfig+0x4a>
 801244c:	4a15      	ldr	r2, [pc, #84]	; (80124a4 <TIM_Base_SetConfig+0x84>)
 801244e:	4290      	cmp	r0, r2
 8012450:	d00b      	beq.n	801246a <TIM_Base_SetConfig+0x4a>
 8012452:	4a15      	ldr	r2, [pc, #84]	; (80124a8 <TIM_Base_SetConfig+0x88>)
 8012454:	4290      	cmp	r0, r2
 8012456:	d008      	beq.n	801246a <TIM_Base_SetConfig+0x4a>
 8012458:	4a14      	ldr	r2, [pc, #80]	; (80124ac <TIM_Base_SetConfig+0x8c>)
 801245a:	4290      	cmp	r0, r2
 801245c:	d005      	beq.n	801246a <TIM_Base_SetConfig+0x4a>
 801245e:	4a14      	ldr	r2, [pc, #80]	; (80124b0 <TIM_Base_SetConfig+0x90>)
 8012460:	4290      	cmp	r0, r2
 8012462:	d002      	beq.n	801246a <TIM_Base_SetConfig+0x4a>
 8012464:	4a13      	ldr	r2, [pc, #76]	; (80124b4 <TIM_Base_SetConfig+0x94>)
 8012466:	4290      	cmp	r0, r2
 8012468:	d103      	bne.n	8012472 <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801246a:	4a13      	ldr	r2, [pc, #76]	; (80124b8 <TIM_Base_SetConfig+0x98>)
 801246c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801246e:	68ca      	ldr	r2, [r1, #12]
 8012470:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8012472:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012474:	688b      	ldr	r3, [r1, #8]
 8012476:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012478:	680b      	ldr	r3, [r1, #0]
 801247a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801247c:	4b08      	ldr	r3, [pc, #32]	; (80124a0 <TIM_Base_SetConfig+0x80>)
 801247e:	4298      	cmp	r0, r3
 8012480:	d008      	beq.n	8012494 <TIM_Base_SetConfig+0x74>
 8012482:	4b0a      	ldr	r3, [pc, #40]	; (80124ac <TIM_Base_SetConfig+0x8c>)
 8012484:	4298      	cmp	r0, r3
 8012486:	d005      	beq.n	8012494 <TIM_Base_SetConfig+0x74>
 8012488:	4b09      	ldr	r3, [pc, #36]	; (80124b0 <TIM_Base_SetConfig+0x90>)
 801248a:	4298      	cmp	r0, r3
 801248c:	d002      	beq.n	8012494 <TIM_Base_SetConfig+0x74>
 801248e:	4b09      	ldr	r3, [pc, #36]	; (80124b4 <TIM_Base_SetConfig+0x94>)
 8012490:	4298      	cmp	r0, r3
 8012492:	d101      	bne.n	8012498 <TIM_Base_SetConfig+0x78>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012494:	690b      	ldr	r3, [r1, #16]
 8012496:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8012498:	2301      	movs	r3, #1
 801249a:	6143      	str	r3, [r0, #20]
}
 801249c:	4770      	bx	lr
 801249e:	46c0      	nop			; (mov r8, r8)
 80124a0:	40012c00 	.word	0x40012c00
 80124a4:	40000400 	.word	0x40000400
 80124a8:	40002000 	.word	0x40002000
 80124ac:	40014000 	.word	0x40014000
 80124b0:	40014400 	.word	0x40014400
 80124b4:	40014800 	.word	0x40014800
 80124b8:	fffffcff 	.word	0xfffffcff

080124bc <HAL_TIM_Base_Init>:
{
 80124bc:	b570      	push	{r4, r5, r6, lr}
 80124be:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80124c0:	d014      	beq.n	80124ec <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80124c2:	2339      	movs	r3, #57	; 0x39
 80124c4:	5cc3      	ldrb	r3, [r0, r3]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d00a      	beq.n	80124e0 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80124ca:	2539      	movs	r5, #57	; 0x39
 80124cc:	2302      	movs	r3, #2
 80124ce:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80124d0:	0021      	movs	r1, r4
 80124d2:	c901      	ldmia	r1!, {r0}
 80124d4:	f7ff ffa4 	bl	8012420 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80124d8:	2301      	movs	r3, #1
 80124da:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80124dc:	2000      	movs	r0, #0
}
 80124de:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80124e0:	3338      	adds	r3, #56	; 0x38
 80124e2:	2200      	movs	r2, #0
 80124e4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80124e6:	f7ff ff8d 	bl	8012404 <HAL_TIM_Base_MspInit>
 80124ea:	e7ee      	b.n	80124ca <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80124ec:	2001      	movs	r0, #1
 80124ee:	e7f6      	b.n	80124de <HAL_TIM_Base_Init+0x22>

080124f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80124f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80124f2:	2338      	movs	r3, #56	; 0x38
 80124f4:	5cc3      	ldrb	r3, [r0, r3]
 80124f6:	2b01      	cmp	r3, #1
 80124f8:	d01e      	beq.n	8012538 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80124fa:	2238      	movs	r2, #56	; 0x38
 80124fc:	2501      	movs	r5, #1
 80124fe:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8012500:	2439      	movs	r4, #57	; 0x39
 8012502:	2302      	movs	r3, #2
 8012504:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012506:	6806      	ldr	r6, [r0, #0]
 8012508:	6873      	ldr	r3, [r6, #4]
 801250a:	2770      	movs	r7, #112	; 0x70
 801250c:	43bb      	bics	r3, r7
 801250e:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012510:	6806      	ldr	r6, [r0, #0]
 8012512:	6873      	ldr	r3, [r6, #4]
 8012514:	680f      	ldr	r7, [r1, #0]
 8012516:	433b      	orrs	r3, r7
 8012518:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801251a:	6806      	ldr	r6, [r0, #0]
 801251c:	68b3      	ldr	r3, [r6, #8]
 801251e:	2780      	movs	r7, #128	; 0x80
 8012520:	43bb      	bics	r3, r7
 8012522:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012524:	6806      	ldr	r6, [r0, #0]
 8012526:	68b3      	ldr	r3, [r6, #8]
 8012528:	6849      	ldr	r1, [r1, #4]
 801252a:	430b      	orrs	r3, r1
 801252c:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 801252e:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8012530:	2300      	movs	r3, #0
 8012532:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8012534:	2000      	movs	r0, #0
}
 8012536:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8012538:	2002      	movs	r0, #2
 801253a:	e7fc      	b.n	8012536 <HAL_TIMEx_MasterConfigSynchronization+0x46>

0801253c <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 801253c:	4770      	bx	lr

0801253e <HAL_UART_DeInit>:
{
 801253e:	b570      	push	{r4, r5, r6, lr}
 8012540:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012542:	d016      	beq.n	8012572 <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 8012544:	2669      	movs	r6, #105	; 0x69
 8012546:	2302      	movs	r3, #2
 8012548:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 801254a:	6802      	ldr	r2, [r0, #0]
 801254c:	6813      	ldr	r3, [r2, #0]
 801254e:	2101      	movs	r1, #1
 8012550:	438b      	bics	r3, r1
 8012552:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8012554:	6803      	ldr	r3, [r0, #0]
 8012556:	2500      	movs	r5, #0
 8012558:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 801255a:	6803      	ldr	r3, [r0, #0]
 801255c:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 801255e:	6803      	ldr	r3, [r0, #0]
 8012560:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8012562:	f7ff ffeb 	bl	801253c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012566:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8012568:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 801256a:	2368      	movs	r3, #104	; 0x68
 801256c:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 801256e:	2000      	movs	r0, #0
}
 8012570:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8012572:	2001      	movs	r0, #1
 8012574:	e7fc      	b.n	8012570 <HAL_UART_DeInit+0x32>

08012576 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012576:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012578:	2369      	movs	r3, #105	; 0x69
 801257a:	5cc3      	ldrb	r3, [r0, r3]
 801257c:	2b01      	cmp	r3, #1
 801257e:	d003      	beq.n	8012588 <HAL_UART_Transmit_IT+0x12>
 8012580:	2369      	movs	r3, #105	; 0x69
 8012582:	5cc3      	ldrb	r3, [r0, r3]
 8012584:	2b22      	cmp	r3, #34	; 0x22
 8012586:	d12b      	bne.n	80125e0 <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 8012588:	2900      	cmp	r1, #0
 801258a:	d02b      	beq.n	80125e4 <HAL_UART_Transmit_IT+0x6e>
 801258c:	2a00      	cmp	r2, #0
 801258e:	d02b      	beq.n	80125e8 <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012590:	2368      	movs	r3, #104	; 0x68
 8012592:	5cc3      	ldrb	r3, [r0, r3]
 8012594:	2b01      	cmp	r3, #1
 8012596:	d029      	beq.n	80125ec <HAL_UART_Transmit_IT+0x76>
 8012598:	2368      	movs	r3, #104	; 0x68
 801259a:	2401      	movs	r4, #1
 801259c:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 801259e:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 80125a0:	3b18      	subs	r3, #24
 80125a2:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 80125a4:	3302      	adds	r3, #2
 80125a6:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125a8:	2300      	movs	r3, #0
 80125aa:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80125ac:	3369      	adds	r3, #105	; 0x69
 80125ae:	5cc3      	ldrb	r3, [r0, r3]
 80125b0:	2b22      	cmp	r3, #34	; 0x22
 80125b2:	d011      	beq.n	80125d8 <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80125b4:	2369      	movs	r3, #105	; 0x69
 80125b6:	2212      	movs	r2, #18
 80125b8:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80125ba:	6802      	ldr	r2, [r0, #0]
 80125bc:	6893      	ldr	r3, [r2, #8]
 80125be:	2101      	movs	r1, #1
 80125c0:	430b      	orrs	r3, r1
 80125c2:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80125c4:	2368      	movs	r3, #104	; 0x68
 80125c6:	2200      	movs	r2, #0
 80125c8:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80125ca:	6802      	ldr	r2, [r0, #0]
 80125cc:	6813      	ldr	r3, [r2, #0]
 80125ce:	317f      	adds	r1, #127	; 0x7f
 80125d0:	430b      	orrs	r3, r1
 80125d2:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 80125d4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80125d6:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80125d8:	3347      	adds	r3, #71	; 0x47
 80125da:	2232      	movs	r2, #50	; 0x32
 80125dc:	54c2      	strb	r2, [r0, r3]
 80125de:	e7ec      	b.n	80125ba <HAL_UART_Transmit_IT+0x44>
    return HAL_BUSY;
 80125e0:	2002      	movs	r0, #2
 80125e2:	e7f8      	b.n	80125d6 <HAL_UART_Transmit_IT+0x60>
      return HAL_ERROR;
 80125e4:	2001      	movs	r0, #1
 80125e6:	e7f6      	b.n	80125d6 <HAL_UART_Transmit_IT+0x60>
 80125e8:	2001      	movs	r0, #1
 80125ea:	e7f4      	b.n	80125d6 <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 80125ec:	2002      	movs	r0, #2
 80125ee:	e7f2      	b.n	80125d6 <HAL_UART_Transmit_IT+0x60>

080125f0 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80125f0:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80125f2:	2369      	movs	r3, #105	; 0x69
 80125f4:	5cc3      	ldrb	r3, [r0, r3]
 80125f6:	2b01      	cmp	r3, #1
 80125f8:	d003      	beq.n	8012602 <HAL_UART_Receive_IT+0x12>
 80125fa:	2369      	movs	r3, #105	; 0x69
 80125fc:	5cc3      	ldrb	r3, [r0, r3]
 80125fe:	2b12      	cmp	r3, #18
 8012600:	d15d      	bne.n	80126be <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 8012602:	2900      	cmp	r1, #0
 8012604:	d05d      	beq.n	80126c2 <HAL_UART_Receive_IT+0xd2>
 8012606:	2a00      	cmp	r2, #0
 8012608:	d05d      	beq.n	80126c6 <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801260a:	2368      	movs	r3, #104	; 0x68
 801260c:	5cc3      	ldrb	r3, [r0, r3]
 801260e:	2b01      	cmp	r3, #1
 8012610:	d05b      	beq.n	80126ca <HAL_UART_Receive_IT+0xda>
 8012612:	2368      	movs	r3, #104	; 0x68
 8012614:	2401      	movs	r4, #1
 8012616:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 8012618:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 801261a:	3b10      	subs	r3, #16
 801261c:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 801261e:	3302      	adds	r3, #2
 8012620:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012622:	6883      	ldr	r3, [r0, #8]
 8012624:	2280      	movs	r2, #128	; 0x80
 8012626:	0152      	lsls	r2, r2, #5
 8012628:	4293      	cmp	r3, r2
 801262a:	d008      	beq.n	801263e <HAL_UART_Receive_IT+0x4e>
 801262c:	2b00      	cmp	r3, #0
 801262e:	d115      	bne.n	801265c <HAL_UART_Receive_IT+0x6c>
 8012630:	6903      	ldr	r3, [r0, #16]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d10e      	bne.n	8012654 <HAL_UART_Receive_IT+0x64>
 8012636:	335c      	adds	r3, #92	; 0x5c
 8012638:	22ff      	movs	r2, #255	; 0xff
 801263a:	52c2      	strh	r2, [r0, r3]
 801263c:	e012      	b.n	8012664 <HAL_UART_Receive_IT+0x74>
 801263e:	6903      	ldr	r3, [r0, #16]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d103      	bne.n	801264c <HAL_UART_Receive_IT+0x5c>
 8012644:	335c      	adds	r3, #92	; 0x5c
 8012646:	4a22      	ldr	r2, [pc, #136]	; (80126d0 <HAL_UART_Receive_IT+0xe0>)
 8012648:	52c2      	strh	r2, [r0, r3]
 801264a:	e00b      	b.n	8012664 <HAL_UART_Receive_IT+0x74>
 801264c:	235c      	movs	r3, #92	; 0x5c
 801264e:	22ff      	movs	r2, #255	; 0xff
 8012650:	52c2      	strh	r2, [r0, r3]
 8012652:	e007      	b.n	8012664 <HAL_UART_Receive_IT+0x74>
 8012654:	235c      	movs	r3, #92	; 0x5c
 8012656:	227f      	movs	r2, #127	; 0x7f
 8012658:	52c2      	strh	r2, [r0, r3]
 801265a:	e003      	b.n	8012664 <HAL_UART_Receive_IT+0x74>
 801265c:	2280      	movs	r2, #128	; 0x80
 801265e:	0552      	lsls	r2, r2, #21
 8012660:	4293      	cmp	r3, r2
 8012662:	d01d      	beq.n	80126a0 <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012664:	2300      	movs	r3, #0
 8012666:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012668:	3369      	adds	r3, #105	; 0x69
 801266a:	5cc3      	ldrb	r3, [r0, r3]
 801266c:	2b12      	cmp	r3, #18
 801266e:	d022      	beq.n	80126b6 <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012670:	2369      	movs	r3, #105	; 0x69
 8012672:	2222      	movs	r2, #34	; 0x22
 8012674:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012676:	6802      	ldr	r2, [r0, #0]
 8012678:	6811      	ldr	r1, [r2, #0]
 801267a:	2380      	movs	r3, #128	; 0x80
 801267c:	005b      	lsls	r3, r3, #1
 801267e:	430b      	orrs	r3, r1
 8012680:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012682:	6802      	ldr	r2, [r0, #0]
 8012684:	6893      	ldr	r3, [r2, #8]
 8012686:	2101      	movs	r1, #1
 8012688:	430b      	orrs	r3, r1
 801268a:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801268c:	2368      	movs	r3, #104	; 0x68
 801268e:	2200      	movs	r2, #0
 8012690:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012692:	6802      	ldr	r2, [r0, #0]
 8012694:	6813      	ldr	r3, [r2, #0]
 8012696:	311f      	adds	r1, #31
 8012698:	430b      	orrs	r3, r1
 801269a:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 801269c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 801269e:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 80126a0:	6903      	ldr	r3, [r0, #16]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d103      	bne.n	80126ae <HAL_UART_Receive_IT+0xbe>
 80126a6:	335c      	adds	r3, #92	; 0x5c
 80126a8:	227f      	movs	r2, #127	; 0x7f
 80126aa:	52c2      	strh	r2, [r0, r3]
 80126ac:	e7da      	b.n	8012664 <HAL_UART_Receive_IT+0x74>
 80126ae:	235c      	movs	r3, #92	; 0x5c
 80126b0:	223f      	movs	r2, #63	; 0x3f
 80126b2:	52c2      	strh	r2, [r0, r3]
 80126b4:	e7d6      	b.n	8012664 <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80126b6:	3357      	adds	r3, #87	; 0x57
 80126b8:	2232      	movs	r2, #50	; 0x32
 80126ba:	54c2      	strb	r2, [r0, r3]
 80126bc:	e7db      	b.n	8012676 <HAL_UART_Receive_IT+0x86>
    return HAL_BUSY;
 80126be:	2002      	movs	r0, #2
 80126c0:	e7ed      	b.n	801269e <HAL_UART_Receive_IT+0xae>
      return HAL_ERROR;
 80126c2:	2001      	movs	r0, #1
 80126c4:	e7eb      	b.n	801269e <HAL_UART_Receive_IT+0xae>
 80126c6:	2001      	movs	r0, #1
 80126c8:	e7e9      	b.n	801269e <HAL_UART_Receive_IT+0xae>
    __HAL_LOCK(huart);
 80126ca:	2002      	movs	r0, #2
 80126cc:	e7e7      	b.n	801269e <HAL_UART_Receive_IT+0xae>
 80126ce:	46c0      	nop			; (mov r8, r8)
 80126d0:	000001ff 	.word	0x000001ff

080126d4 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80126d4:	b510      	push	{r4, lr}
 80126d6:	0004      	movs	r4, r0
 80126d8:	0008      	movs	r0, r1
 80126da:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80126dc:	2269      	movs	r2, #105	; 0x69
 80126de:	5ca2      	ldrb	r2, [r4, r2]
 80126e0:	2a01      	cmp	r2, #1
 80126e2:	d003      	beq.n	80126ec <HAL_UART_Receive_DMA+0x18>
 80126e4:	2269      	movs	r2, #105	; 0x69
 80126e6:	5ca2      	ldrb	r2, [r4, r2]
 80126e8:	2a12      	cmp	r2, #18
 80126ea:	d133      	bne.n	8012754 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 80126ec:	2800      	cmp	r0, #0
 80126ee:	d033      	beq.n	8012758 <HAL_UART_Receive_DMA+0x84>
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d033      	beq.n	801275c <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80126f4:	2268      	movs	r2, #104	; 0x68
 80126f6:	5ca2      	ldrb	r2, [r4, r2]
 80126f8:	2a01      	cmp	r2, #1
 80126fa:	d031      	beq.n	8012760 <HAL_UART_Receive_DMA+0x8c>
 80126fc:	2268      	movs	r2, #104	; 0x68
 80126fe:	2101      	movs	r1, #1
 8012700:	54a1      	strb	r1, [r4, r2]

    huart->pRxBuffPtr = pData;
 8012702:	6560      	str	r0, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8012704:	3a10      	subs	r2, #16
 8012706:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012708:	2200      	movs	r2, #0
 801270a:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801270c:	3269      	adds	r2, #105	; 0x69
 801270e:	5ca2      	ldrb	r2, [r4, r2]
 8012710:	2a12      	cmp	r2, #18
 8012712:	d01b      	beq.n	801274c <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012714:	2269      	movs	r2, #105	; 0x69
 8012716:	2122      	movs	r1, #34	; 0x22
 8012718:	54a1      	strb	r1, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801271a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801271c:	4911      	ldr	r1, [pc, #68]	; (8012764 <HAL_UART_Receive_DMA+0x90>)
 801271e:	6291      	str	r1, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012720:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012722:	4911      	ldr	r1, [pc, #68]	; (8012768 <HAL_UART_Receive_DMA+0x94>)
 8012724:	62d1      	str	r1, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012726:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012728:	4910      	ldr	r1, [pc, #64]	; (801276c <HAL_UART_Receive_DMA+0x98>)
 801272a:	6311      	str	r1, [r2, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801272c:	6821      	ldr	r1, [r4, #0]
 801272e:	3124      	adds	r1, #36	; 0x24
 8012730:	0002      	movs	r2, r0
 8012732:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8012734:	f7fe f896 	bl	8010864 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8012738:	6822      	ldr	r2, [r4, #0]
 801273a:	6893      	ldr	r3, [r2, #8]
 801273c:	2140      	movs	r1, #64	; 0x40
 801273e:	430b      	orrs	r3, r1
 8012740:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 8012742:	2368      	movs	r3, #104	; 0x68
 8012744:	2200      	movs	r2, #0
 8012746:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8012748:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 801274a:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801274c:	3257      	adds	r2, #87	; 0x57
 801274e:	3131      	adds	r1, #49	; 0x31
 8012750:	54a1      	strb	r1, [r4, r2]
 8012752:	e7e2      	b.n	801271a <HAL_UART_Receive_DMA+0x46>
    return HAL_BUSY;
 8012754:	2002      	movs	r0, #2
 8012756:	e7f8      	b.n	801274a <HAL_UART_Receive_DMA+0x76>
      return HAL_ERROR;
 8012758:	2001      	movs	r0, #1
 801275a:	e7f6      	b.n	801274a <HAL_UART_Receive_DMA+0x76>
 801275c:	2001      	movs	r0, #1
 801275e:	e7f4      	b.n	801274a <HAL_UART_Receive_DMA+0x76>
    __HAL_LOCK(huart);
 8012760:	2002      	movs	r0, #2
 8012762:	e7f2      	b.n	801274a <HAL_UART_Receive_DMA+0x76>
 8012764:	08012771 	.word	0x08012771
 8012768:	080127ad 	.word	0x080127ad
 801276c:	080127b7 	.word	0x080127b7

08012770 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012770:	b510      	push	{r4, lr}
 8012772:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012774:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	069b      	lsls	r3, r3, #26
 801277c:	d40e      	bmi.n	801279c <UART_DMAReceiveCplt+0x2c>
  {
    huart->RxXferCount = 0;
 801277e:	235a      	movs	r3, #90	; 0x5a
 8012780:	2200      	movs	r2, #0
 8012782:	52c2      	strh	r2, [r0, r3]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012784:	6802      	ldr	r2, [r0, #0]
 8012786:	6893      	ldr	r3, [r2, #8]
 8012788:	2140      	movs	r1, #64	; 0x40
 801278a:	438b      	bics	r3, r1
 801278c:	6093      	str	r3, [r2, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801278e:	2369      	movs	r3, #105	; 0x69
 8012790:	5cc3      	ldrb	r3, [r0, r3]
 8012792:	2b32      	cmp	r3, #50	; 0x32
 8012794:	d005      	beq.n	80127a2 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012796:	2369      	movs	r3, #105	; 0x69
 8012798:	2201      	movs	r2, #1
 801279a:	54c2      	strb	r2, [r0, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 801279c:	f7fa fe34 	bl	800d408 <HAL_UART_RxCpltCallback>
}
 80127a0:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 80127a2:	3337      	adds	r3, #55	; 0x37
 80127a4:	2212      	movs	r2, #18
 80127a6:	54c2      	strb	r2, [r0, r3]
 80127a8:	e7f8      	b.n	801279c <UART_DMAReceiveCplt+0x2c>

080127aa <HAL_UART_RxHalfCpltCallback>:
}
 80127aa:	4770      	bx	lr

080127ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80127ac:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80127ae:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_RxHalfCpltCallback(huart);
 80127b0:	f7ff fffb 	bl	80127aa <HAL_UART_RxHalfCpltCallback>
}
 80127b4:	bd10      	pop	{r4, pc}

080127b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80127b6:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80127b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 80127ba:	2300      	movs	r3, #0
 80127bc:	225a      	movs	r2, #90	; 0x5a
 80127be:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 80127c0:	3a08      	subs	r2, #8
 80127c2:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 80127c4:	3369      	adds	r3, #105	; 0x69
 80127c6:	3a51      	subs	r2, #81	; 0x51
 80127c8:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80127ca:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80127cc:	320f      	adds	r2, #15
 80127ce:	4313      	orrs	r3, r2
 80127d0:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80127d2:	f7fa fdf5 	bl	800d3c0 <HAL_UART_ErrorCallback>
}
 80127d6:	bd10      	pop	{r4, pc}

080127d8 <UART_SetConfig>:
{
 80127d8:	b570      	push	{r4, r5, r6, lr}
 80127da:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80127dc:	6883      	ldr	r3, [r0, #8]
 80127de:	6902      	ldr	r2, [r0, #16]
 80127e0:	4313      	orrs	r3, r2
 80127e2:	6942      	ldr	r2, [r0, #20]
 80127e4:	4313      	orrs	r3, r2
 80127e6:	69c2      	ldr	r2, [r0, #28]
 80127e8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80127ea:	6801      	ldr	r1, [r0, #0]
 80127ec:	680a      	ldr	r2, [r1, #0]
 80127ee:	4886      	ldr	r0, [pc, #536]	; (8012a08 <UART_SetConfig+0x230>)
 80127f0:	4002      	ands	r2, r0
 80127f2:	4313      	orrs	r3, r2
 80127f4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80127f6:	6822      	ldr	r2, [r4, #0]
 80127f8:	6853      	ldr	r3, [r2, #4]
 80127fa:	4984      	ldr	r1, [pc, #528]	; (8012a0c <UART_SetConfig+0x234>)
 80127fc:	400b      	ands	r3, r1
 80127fe:	68e1      	ldr	r1, [r4, #12]
 8012800:	430b      	orrs	r3, r1
 8012802:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012804:	69a2      	ldr	r2, [r4, #24]
 8012806:	6a23      	ldr	r3, [r4, #32]
 8012808:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801280a:	6821      	ldr	r1, [r4, #0]
 801280c:	688b      	ldr	r3, [r1, #8]
 801280e:	4880      	ldr	r0, [pc, #512]	; (8012a10 <UART_SetConfig+0x238>)
 8012810:	4003      	ands	r3, r0
 8012812:	4313      	orrs	r3, r2
 8012814:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012816:	6826      	ldr	r6, [r4, #0]
 8012818:	4b7e      	ldr	r3, [pc, #504]	; (8012a14 <UART_SetConfig+0x23c>)
 801281a:	429e      	cmp	r6, r3
 801281c:	d01a      	beq.n	8012854 <UART_SetConfig+0x7c>
 801281e:	4b7e      	ldr	r3, [pc, #504]	; (8012a18 <UART_SetConfig+0x240>)
 8012820:	429e      	cmp	r6, r3
 8012822:	d040      	beq.n	80128a6 <UART_SetConfig+0xce>
 8012824:	4b7d      	ldr	r3, [pc, #500]	; (8012a1c <UART_SetConfig+0x244>)
 8012826:	429e      	cmp	r6, r3
 8012828:	d055      	beq.n	80128d6 <UART_SetConfig+0xfe>
 801282a:	4b7d      	ldr	r3, [pc, #500]	; (8012a20 <UART_SetConfig+0x248>)
 801282c:	429e      	cmp	r6, r3
 801282e:	d100      	bne.n	8012832 <UART_SetConfig+0x5a>
 8012830:	e083      	b.n	801293a <UART_SetConfig+0x162>
 8012832:	4b7c      	ldr	r3, [pc, #496]	; (8012a24 <UART_SetConfig+0x24c>)
 8012834:	429e      	cmp	r6, r3
 8012836:	d100      	bne.n	801283a <UART_SetConfig+0x62>
 8012838:	e081      	b.n	801293e <UART_SetConfig+0x166>
 801283a:	4b7b      	ldr	r3, [pc, #492]	; (8012a28 <UART_SetConfig+0x250>)
 801283c:	429e      	cmp	r6, r3
 801283e:	d100      	bne.n	8012842 <UART_SetConfig+0x6a>
 8012840:	e07f      	b.n	8012942 <UART_SetConfig+0x16a>
 8012842:	4b7a      	ldr	r3, [pc, #488]	; (8012a2c <UART_SetConfig+0x254>)
 8012844:	429e      	cmp	r6, r3
 8012846:	d100      	bne.n	801284a <UART_SetConfig+0x72>
 8012848:	e07d      	b.n	8012946 <UART_SetConfig+0x16e>
 801284a:	4b79      	ldr	r3, [pc, #484]	; (8012a30 <UART_SetConfig+0x258>)
 801284c:	429e      	cmp	r6, r3
 801284e:	d05a      	beq.n	8012906 <UART_SetConfig+0x12e>
 8012850:	2510      	movs	r5, #16
 8012852:	e00b      	b.n	801286c <UART_SetConfig+0x94>
 8012854:	4b77      	ldr	r3, [pc, #476]	; (8012a34 <UART_SetConfig+0x25c>)
 8012856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012858:	2303      	movs	r3, #3
 801285a:	4013      	ands	r3, r2
 801285c:	2b02      	cmp	r3, #2
 801285e:	d054      	beq.n	801290a <UART_SetConfig+0x132>
 8012860:	d81d      	bhi.n	801289e <UART_SetConfig+0xc6>
 8012862:	2b00      	cmp	r3, #0
 8012864:	d053      	beq.n	801290e <UART_SetConfig+0x136>
 8012866:	2b01      	cmp	r3, #1
 8012868:	d153      	bne.n	8012912 <UART_SetConfig+0x13a>
 801286a:	2504      	movs	r5, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801286c:	2380      	movs	r3, #128	; 0x80
 801286e:	021b      	lsls	r3, r3, #8
 8012870:	69e2      	ldr	r2, [r4, #28]
 8012872:	429a      	cmp	r2, r3
 8012874:	d069      	beq.n	801294a <UART_SetConfig+0x172>
    switch (clocksource)
 8012876:	2d04      	cmp	r5, #4
 8012878:	d100      	bne.n	801287c <UART_SetConfig+0xa4>
 801287a:	e0b9      	b.n	80129f0 <UART_SetConfig+0x218>
 801287c:	d900      	bls.n	8012880 <UART_SetConfig+0xa8>
 801287e:	e09f      	b.n	80129c0 <UART_SetConfig+0x1e8>
 8012880:	2d00      	cmp	r5, #0
 8012882:	d100      	bne.n	8012886 <UART_SetConfig+0xae>
 8012884:	e0aa      	b.n	80129dc <UART_SetConfig+0x204>
 8012886:	2d02      	cmp	r5, #2
 8012888:	d000      	beq.n	801288c <UART_SetConfig+0xb4>
 801288a:	e097      	b.n	80129bc <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 801288c:	6861      	ldr	r1, [r4, #4]
 801288e:	486a      	ldr	r0, [pc, #424]	; (8012a38 <UART_SetConfig+0x260>)
 8012890:	f7ed fc5e 	bl	8000150 <__udivsi3>
 8012894:	0400      	lsls	r0, r0, #16
 8012896:	0c00      	lsrs	r0, r0, #16
 8012898:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801289a:	2500      	movs	r5, #0
        break;
 801289c:	e07b      	b.n	8012996 <UART_SetConfig+0x1be>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801289e:	2b03      	cmp	r3, #3
 80128a0:	d139      	bne.n	8012916 <UART_SetConfig+0x13e>
 80128a2:	2502      	movs	r5, #2
 80128a4:	e7e2      	b.n	801286c <UART_SetConfig+0x94>
 80128a6:	4b63      	ldr	r3, [pc, #396]	; (8012a34 <UART_SetConfig+0x25c>)
 80128a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128aa:	22c0      	movs	r2, #192	; 0xc0
 80128ac:	0292      	lsls	r2, r2, #10
 80128ae:	4013      	ands	r3, r2
 80128b0:	2280      	movs	r2, #128	; 0x80
 80128b2:	0292      	lsls	r2, r2, #10
 80128b4:	4293      	cmp	r3, r2
 80128b6:	d030      	beq.n	801291a <UART_SetConfig+0x142>
 80128b8:	d807      	bhi.n	80128ca <UART_SetConfig+0xf2>
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d02f      	beq.n	801291e <UART_SetConfig+0x146>
 80128be:	2280      	movs	r2, #128	; 0x80
 80128c0:	0252      	lsls	r2, r2, #9
 80128c2:	4293      	cmp	r3, r2
 80128c4:	d12d      	bne.n	8012922 <UART_SetConfig+0x14a>
 80128c6:	2504      	movs	r5, #4
 80128c8:	e7d0      	b.n	801286c <UART_SetConfig+0x94>
 80128ca:	22c0      	movs	r2, #192	; 0xc0
 80128cc:	0292      	lsls	r2, r2, #10
 80128ce:	4293      	cmp	r3, r2
 80128d0:	d129      	bne.n	8012926 <UART_SetConfig+0x14e>
 80128d2:	2502      	movs	r5, #2
 80128d4:	e7ca      	b.n	801286c <UART_SetConfig+0x94>
 80128d6:	4b57      	ldr	r3, [pc, #348]	; (8012a34 <UART_SetConfig+0x25c>)
 80128d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128da:	22c0      	movs	r2, #192	; 0xc0
 80128dc:	0312      	lsls	r2, r2, #12
 80128de:	4013      	ands	r3, r2
 80128e0:	2280      	movs	r2, #128	; 0x80
 80128e2:	0312      	lsls	r2, r2, #12
 80128e4:	4293      	cmp	r3, r2
 80128e6:	d020      	beq.n	801292a <UART_SetConfig+0x152>
 80128e8:	d807      	bhi.n	80128fa <UART_SetConfig+0x122>
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d01f      	beq.n	801292e <UART_SetConfig+0x156>
 80128ee:	2280      	movs	r2, #128	; 0x80
 80128f0:	02d2      	lsls	r2, r2, #11
 80128f2:	4293      	cmp	r3, r2
 80128f4:	d11d      	bne.n	8012932 <UART_SetConfig+0x15a>
 80128f6:	2504      	movs	r5, #4
 80128f8:	e7b8      	b.n	801286c <UART_SetConfig+0x94>
 80128fa:	22c0      	movs	r2, #192	; 0xc0
 80128fc:	0312      	lsls	r2, r2, #12
 80128fe:	4293      	cmp	r3, r2
 8012900:	d119      	bne.n	8012936 <UART_SetConfig+0x15e>
 8012902:	2502      	movs	r5, #2
 8012904:	e7b2      	b.n	801286c <UART_SetConfig+0x94>
 8012906:	2500      	movs	r5, #0
 8012908:	e7b0      	b.n	801286c <UART_SetConfig+0x94>
 801290a:	2508      	movs	r5, #8
 801290c:	e7ae      	b.n	801286c <UART_SetConfig+0x94>
 801290e:	2500      	movs	r5, #0
 8012910:	e7ac      	b.n	801286c <UART_SetConfig+0x94>
 8012912:	2510      	movs	r5, #16
 8012914:	e7aa      	b.n	801286c <UART_SetConfig+0x94>
 8012916:	2510      	movs	r5, #16
 8012918:	e7a8      	b.n	801286c <UART_SetConfig+0x94>
 801291a:	2508      	movs	r5, #8
 801291c:	e7a6      	b.n	801286c <UART_SetConfig+0x94>
 801291e:	2500      	movs	r5, #0
 8012920:	e7a4      	b.n	801286c <UART_SetConfig+0x94>
 8012922:	2510      	movs	r5, #16
 8012924:	e7a2      	b.n	801286c <UART_SetConfig+0x94>
 8012926:	2510      	movs	r5, #16
 8012928:	e7a0      	b.n	801286c <UART_SetConfig+0x94>
 801292a:	2508      	movs	r5, #8
 801292c:	e79e      	b.n	801286c <UART_SetConfig+0x94>
 801292e:	2500      	movs	r5, #0
 8012930:	e79c      	b.n	801286c <UART_SetConfig+0x94>
 8012932:	2510      	movs	r5, #16
 8012934:	e79a      	b.n	801286c <UART_SetConfig+0x94>
 8012936:	2510      	movs	r5, #16
 8012938:	e798      	b.n	801286c <UART_SetConfig+0x94>
 801293a:	2500      	movs	r5, #0
 801293c:	e796      	b.n	801286c <UART_SetConfig+0x94>
 801293e:	2500      	movs	r5, #0
 8012940:	e794      	b.n	801286c <UART_SetConfig+0x94>
 8012942:	2500      	movs	r5, #0
 8012944:	e792      	b.n	801286c <UART_SetConfig+0x94>
 8012946:	2500      	movs	r5, #0
 8012948:	e790      	b.n	801286c <UART_SetConfig+0x94>
    switch (clocksource)
 801294a:	2d04      	cmp	r5, #4
 801294c:	d02d      	beq.n	80129aa <UART_SetConfig+0x1d2>
 801294e:	d80d      	bhi.n	801296c <UART_SetConfig+0x194>
 8012950:	2d00      	cmp	r5, #0
 8012952:	d022      	beq.n	801299a <UART_SetConfig+0x1c2>
 8012954:	2d02      	cmp	r5, #2
 8012956:	d106      	bne.n	8012966 <UART_SetConfig+0x18e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012958:	6861      	ldr	r1, [r4, #4]
 801295a:	4838      	ldr	r0, [pc, #224]	; (8012a3c <UART_SetConfig+0x264>)
 801295c:	f7ed fbf8 	bl	8000150 <__udivsi3>
 8012960:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012962:	2500      	movs	r5, #0
        break;
 8012964:	e00e      	b.n	8012984 <UART_SetConfig+0x1ac>
    switch (clocksource)
 8012966:	2501      	movs	r5, #1
 8012968:	2000      	movs	r0, #0
 801296a:	e00b      	b.n	8012984 <UART_SetConfig+0x1ac>
 801296c:	2d08      	cmp	r5, #8
 801296e:	d107      	bne.n	8012980 <UART_SetConfig+0x1a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012970:	6861      	ldr	r1, [r4, #4]
 8012972:	2080      	movs	r0, #128	; 0x80
 8012974:	0240      	lsls	r0, r0, #9
 8012976:	f7ed fbeb 	bl	8000150 <__udivsi3>
 801297a:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801297c:	2500      	movs	r5, #0
        break;
 801297e:	e001      	b.n	8012984 <UART_SetConfig+0x1ac>
    switch (clocksource)
 8012980:	2501      	movs	r5, #1
 8012982:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8012984:	230f      	movs	r3, #15
 8012986:	0002      	movs	r2, r0
 8012988:	439a      	bics	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 801298a:	1040      	asrs	r0, r0, #1
 801298c:	3b08      	subs	r3, #8
 801298e:	4018      	ands	r0, r3
 8012990:	4310      	orrs	r0, r2
    huart->Instance->BRR = brrtemp;
 8012992:	6823      	ldr	r3, [r4, #0]
 8012994:	60d8      	str	r0, [r3, #12]
}
 8012996:	0028      	movs	r0, r5
 8012998:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801299a:	f7ff faab 	bl	8011ef4 <HAL_RCC_GetPCLK1Freq>
 801299e:	0040      	lsls	r0, r0, #1
 80129a0:	6861      	ldr	r1, [r4, #4]
 80129a2:	f7ed fbd5 	bl	8000150 <__udivsi3>
 80129a6:	b280      	uxth	r0, r0
        break;
 80129a8:	e7ec      	b.n	8012984 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80129aa:	f7ff fa45 	bl	8011e38 <HAL_RCC_GetSysClockFreq>
 80129ae:	0040      	lsls	r0, r0, #1
 80129b0:	6861      	ldr	r1, [r4, #4]
 80129b2:	f7ed fbcd 	bl	8000150 <__udivsi3>
 80129b6:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80129b8:	2500      	movs	r5, #0
        break;
 80129ba:	e7e3      	b.n	8012984 <UART_SetConfig+0x1ac>
    switch (clocksource)
 80129bc:	2501      	movs	r5, #1
 80129be:	e7ea      	b.n	8012996 <UART_SetConfig+0x1be>
 80129c0:	2d08      	cmp	r5, #8
 80129c2:	d109      	bne.n	80129d8 <UART_SetConfig+0x200>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80129c4:	6861      	ldr	r1, [r4, #4]
 80129c6:	2080      	movs	r0, #128	; 0x80
 80129c8:	0200      	lsls	r0, r0, #8
 80129ca:	f7ed fbc1 	bl	8000150 <__udivsi3>
 80129ce:	0400      	lsls	r0, r0, #16
 80129d0:	0c00      	lsrs	r0, r0, #16
 80129d2:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80129d4:	2500      	movs	r5, #0
        break;
 80129d6:	e7de      	b.n	8012996 <UART_SetConfig+0x1be>
    switch (clocksource)
 80129d8:	2501      	movs	r5, #1
 80129da:	e7dc      	b.n	8012996 <UART_SetConfig+0x1be>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80129dc:	f7ff fa8a 	bl	8011ef4 <HAL_RCC_GetPCLK1Freq>
 80129e0:	6861      	ldr	r1, [r4, #4]
 80129e2:	f7ed fbb5 	bl	8000150 <__udivsi3>
 80129e6:	6823      	ldr	r3, [r4, #0]
 80129e8:	0400      	lsls	r0, r0, #16
 80129ea:	0c00      	lsrs	r0, r0, #16
 80129ec:	60d8      	str	r0, [r3, #12]
        break;
 80129ee:	e7d2      	b.n	8012996 <UART_SetConfig+0x1be>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80129f0:	f7ff fa22 	bl	8011e38 <HAL_RCC_GetSysClockFreq>
 80129f4:	6861      	ldr	r1, [r4, #4]
 80129f6:	f7ed fbab 	bl	8000150 <__udivsi3>
 80129fa:	6823      	ldr	r3, [r4, #0]
 80129fc:	0400      	lsls	r0, r0, #16
 80129fe:	0c00      	lsrs	r0, r0, #16
 8012a00:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012a02:	2500      	movs	r5, #0
        break;
 8012a04:	e7c7      	b.n	8012996 <UART_SetConfig+0x1be>
 8012a06:	46c0      	nop			; (mov r8, r8)
 8012a08:	efff69f3 	.word	0xefff69f3
 8012a0c:	ffffcfff 	.word	0xffffcfff
 8012a10:	fffff4ff 	.word	0xfffff4ff
 8012a14:	40013800 	.word	0x40013800
 8012a18:	40004400 	.word	0x40004400
 8012a1c:	40004800 	.word	0x40004800
 8012a20:	40004c00 	.word	0x40004c00
 8012a24:	40005000 	.word	0x40005000
 8012a28:	40011400 	.word	0x40011400
 8012a2c:	40011800 	.word	0x40011800
 8012a30:	40011c00 	.word	0x40011c00
 8012a34:	40021000 	.word	0x40021000
 8012a38:	007a1200 	.word	0x007a1200
 8012a3c:	00f42400 	.word	0x00f42400

08012a40 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012a40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012a42:	07db      	lsls	r3, r3, #31
 8012a44:	d506      	bpl.n	8012a54 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012a46:	6802      	ldr	r2, [r0, #0]
 8012a48:	6853      	ldr	r3, [r2, #4]
 8012a4a:	492c      	ldr	r1, [pc, #176]	; (8012afc <UART_AdvFeatureConfig+0xbc>)
 8012a4c:	400b      	ands	r3, r1
 8012a4e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8012a50:	430b      	orrs	r3, r1
 8012a52:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012a54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012a56:	079b      	lsls	r3, r3, #30
 8012a58:	d506      	bpl.n	8012a68 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012a5a:	6802      	ldr	r2, [r0, #0]
 8012a5c:	6853      	ldr	r3, [r2, #4]
 8012a5e:	4928      	ldr	r1, [pc, #160]	; (8012b00 <UART_AdvFeatureConfig+0xc0>)
 8012a60:	400b      	ands	r3, r1
 8012a62:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8012a64:	430b      	orrs	r3, r1
 8012a66:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012a68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012a6a:	075b      	lsls	r3, r3, #29
 8012a6c:	d506      	bpl.n	8012a7c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012a6e:	6802      	ldr	r2, [r0, #0]
 8012a70:	6853      	ldr	r3, [r2, #4]
 8012a72:	4924      	ldr	r1, [pc, #144]	; (8012b04 <UART_AdvFeatureConfig+0xc4>)
 8012a74:	400b      	ands	r3, r1
 8012a76:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012a78:	430b      	orrs	r3, r1
 8012a7a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012a7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012a7e:	071b      	lsls	r3, r3, #28
 8012a80:	d506      	bpl.n	8012a90 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012a82:	6802      	ldr	r2, [r0, #0]
 8012a84:	6853      	ldr	r3, [r2, #4]
 8012a86:	4920      	ldr	r1, [pc, #128]	; (8012b08 <UART_AdvFeatureConfig+0xc8>)
 8012a88:	400b      	ands	r3, r1
 8012a8a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8012a8c:	430b      	orrs	r3, r1
 8012a8e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012a90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012a92:	06db      	lsls	r3, r3, #27
 8012a94:	d506      	bpl.n	8012aa4 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012a96:	6802      	ldr	r2, [r0, #0]
 8012a98:	6893      	ldr	r3, [r2, #8]
 8012a9a:	491c      	ldr	r1, [pc, #112]	; (8012b0c <UART_AdvFeatureConfig+0xcc>)
 8012a9c:	400b      	ands	r3, r1
 8012a9e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8012aa0:	430b      	orrs	r3, r1
 8012aa2:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012aa4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012aa6:	069b      	lsls	r3, r3, #26
 8012aa8:	d506      	bpl.n	8012ab8 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012aaa:	6802      	ldr	r2, [r0, #0]
 8012aac:	6893      	ldr	r3, [r2, #8]
 8012aae:	4918      	ldr	r1, [pc, #96]	; (8012b10 <UART_AdvFeatureConfig+0xd0>)
 8012ab0:	400b      	ands	r3, r1
 8012ab2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8012ab4:	430b      	orrs	r3, r1
 8012ab6:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012ab8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012aba:	065b      	lsls	r3, r3, #25
 8012abc:	d50b      	bpl.n	8012ad6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012abe:	6802      	ldr	r2, [r0, #0]
 8012ac0:	6853      	ldr	r3, [r2, #4]
 8012ac2:	4914      	ldr	r1, [pc, #80]	; (8012b14 <UART_AdvFeatureConfig+0xd4>)
 8012ac4:	400b      	ands	r3, r1
 8012ac6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8012ac8:	430b      	orrs	r3, r1
 8012aca:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012acc:	2380      	movs	r3, #128	; 0x80
 8012ace:	035b      	lsls	r3, r3, #13
 8012ad0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d00a      	beq.n	8012aec <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012ad6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012ad8:	061b      	lsls	r3, r3, #24
 8012ada:	d506      	bpl.n	8012aea <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012adc:	6802      	ldr	r2, [r0, #0]
 8012ade:	6853      	ldr	r3, [r2, #4]
 8012ae0:	490d      	ldr	r1, [pc, #52]	; (8012b18 <UART_AdvFeatureConfig+0xd8>)
 8012ae2:	400b      	ands	r3, r1
 8012ae4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8012ae6:	430b      	orrs	r3, r1
 8012ae8:	6053      	str	r3, [r2, #4]
}
 8012aea:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012aec:	6802      	ldr	r2, [r0, #0]
 8012aee:	6853      	ldr	r3, [r2, #4]
 8012af0:	490a      	ldr	r1, [pc, #40]	; (8012b1c <UART_AdvFeatureConfig+0xdc>)
 8012af2:	400b      	ands	r3, r1
 8012af4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8012af6:	430b      	orrs	r3, r1
 8012af8:	6053      	str	r3, [r2, #4]
 8012afa:	e7ec      	b.n	8012ad6 <UART_AdvFeatureConfig+0x96>
 8012afc:	fffdffff 	.word	0xfffdffff
 8012b00:	fffeffff 	.word	0xfffeffff
 8012b04:	fffbffff 	.word	0xfffbffff
 8012b08:	ffff7fff 	.word	0xffff7fff
 8012b0c:	ffffefff 	.word	0xffffefff
 8012b10:	ffffdfff 	.word	0xffffdfff
 8012b14:	ffefffff 	.word	0xffefffff
 8012b18:	fff7ffff 	.word	0xfff7ffff
 8012b1c:	ff9fffff 	.word	0xff9fffff

08012b20 <UART_WaitOnFlagUntilTimeout>:
{
 8012b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b22:	46c6      	mov	lr, r8
 8012b24:	b500      	push	{lr}
 8012b26:	0007      	movs	r7, r0
 8012b28:	000c      	movs	r4, r1
 8012b2a:	0016      	movs	r6, r2
 8012b2c:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8012b2e:	f7fd f9d9 	bl	800fee4 <HAL_GetTick>
 8012b32:	4680      	mov	r8, r0
  if(Status == RESET)
 8012b34:	2e00      	cmp	r6, #0
 8012b36:	d029      	beq.n	8012b8c <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	69da      	ldr	r2, [r3, #28]
 8012b3c:	4022      	ands	r2, r4
 8012b3e:	42a2      	cmp	r2, r4
 8012b40:	d152      	bne.n	8012be8 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8012b42:	1c6b      	adds	r3, r5, #1
 8012b44:	d0f8      	beq.n	8012b38 <UART_WaitOnFlagUntilTimeout+0x18>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012b46:	2d00      	cmp	r5, #0
 8012b48:	d005      	beq.n	8012b56 <UART_WaitOnFlagUntilTimeout+0x36>
 8012b4a:	f7fd f9cb 	bl	800fee4 <HAL_GetTick>
 8012b4e:	4643      	mov	r3, r8
 8012b50:	1ac0      	subs	r0, r0, r3
 8012b52:	42a8      	cmp	r0, r5
 8012b54:	d9f0      	bls.n	8012b38 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012b56:	683a      	ldr	r2, [r7, #0]
 8012b58:	6813      	ldr	r3, [r2, #0]
 8012b5a:	2180      	movs	r1, #128	; 0x80
 8012b5c:	438b      	bics	r3, r1
 8012b5e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012b60:	683a      	ldr	r2, [r7, #0]
 8012b62:	6813      	ldr	r3, [r2, #0]
 8012b64:	3960      	subs	r1, #96	; 0x60
 8012b66:	438b      	bics	r3, r1
 8012b68:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012b6a:	683a      	ldr	r2, [r7, #0]
 8012b6c:	6813      	ldr	r3, [r2, #0]
 8012b6e:	491f      	ldr	r1, [pc, #124]	; (8012bec <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012b70:	400b      	ands	r3, r1
 8012b72:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012b74:	6839      	ldr	r1, [r7, #0]
 8012b76:	688b      	ldr	r3, [r1, #8]
 8012b78:	2201      	movs	r2, #1
 8012b7a:	4393      	bics	r3, r2
 8012b7c:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012b7e:	2369      	movs	r3, #105	; 0x69
 8012b80:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 8012b82:	3b01      	subs	r3, #1
 8012b84:	2200      	movs	r2, #0
 8012b86:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8012b88:	2003      	movs	r0, #3
 8012b8a:	e02a      	b.n	8012be2 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	69d9      	ldr	r1, [r3, #28]
 8012b90:	4021      	ands	r1, r4
 8012b92:	42a1      	cmp	r1, r4
 8012b94:	d024      	beq.n	8012be0 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8012b96:	1c6b      	adds	r3, r5, #1
 8012b98:	d0f8      	beq.n	8012b8c <UART_WaitOnFlagUntilTimeout+0x6c>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012b9a:	2d00      	cmp	r5, #0
 8012b9c:	d005      	beq.n	8012baa <UART_WaitOnFlagUntilTimeout+0x8a>
 8012b9e:	f7fd f9a1 	bl	800fee4 <HAL_GetTick>
 8012ba2:	4643      	mov	r3, r8
 8012ba4:	1ac0      	subs	r0, r0, r3
 8012ba6:	42a8      	cmp	r0, r5
 8012ba8:	d9f0      	bls.n	8012b8c <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012baa:	683a      	ldr	r2, [r7, #0]
 8012bac:	6813      	ldr	r3, [r2, #0]
 8012bae:	2180      	movs	r1, #128	; 0x80
 8012bb0:	438b      	bics	r3, r1
 8012bb2:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012bb4:	683a      	ldr	r2, [r7, #0]
 8012bb6:	6813      	ldr	r3, [r2, #0]
 8012bb8:	3960      	subs	r1, #96	; 0x60
 8012bba:	438b      	bics	r3, r1
 8012bbc:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012bbe:	683a      	ldr	r2, [r7, #0]
 8012bc0:	6813      	ldr	r3, [r2, #0]
 8012bc2:	490a      	ldr	r1, [pc, #40]	; (8012bec <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012bc4:	400b      	ands	r3, r1
 8012bc6:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012bc8:	6839      	ldr	r1, [r7, #0]
 8012bca:	688b      	ldr	r3, [r1, #8]
 8012bcc:	2201      	movs	r2, #1
 8012bce:	4393      	bics	r3, r2
 8012bd0:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012bd2:	2369      	movs	r3, #105	; 0x69
 8012bd4:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 8012bd6:	3b01      	subs	r3, #1
 8012bd8:	2200      	movs	r2, #0
 8012bda:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8012bdc:	2003      	movs	r0, #3
 8012bde:	e000      	b.n	8012be2 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8012be0:	0030      	movs	r0, r6
}
 8012be2:	bc80      	pop	{r7}
 8012be4:	46b8      	mov	r8, r7
 8012be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8012be8:	2000      	movs	r0, #0
 8012bea:	e7fa      	b.n	8012be2 <UART_WaitOnFlagUntilTimeout+0xc2>
 8012bec:	fffffeff 	.word	0xfffffeff

08012bf0 <HAL_UART_Transmit>:
{
 8012bf0:	b570      	push	{r4, r5, r6, lr}
 8012bf2:	0004      	movs	r4, r0
 8012bf4:	000d      	movs	r5, r1
 8012bf6:	001e      	movs	r6, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012bf8:	2369      	movs	r3, #105	; 0x69
 8012bfa:	5cc3      	ldrb	r3, [r0, r3]
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	d003      	beq.n	8012c08 <HAL_UART_Transmit+0x18>
 8012c00:	2369      	movs	r3, #105	; 0x69
 8012c02:	5cc3      	ldrb	r3, [r0, r3]
 8012c04:	2b22      	cmp	r3, #34	; 0x22
 8012c06:	d154      	bne.n	8012cb2 <HAL_UART_Transmit+0xc2>
    if((pData == NULL ) || (Size == 0))
 8012c08:	2d00      	cmp	r5, #0
 8012c0a:	d054      	beq.n	8012cb6 <HAL_UART_Transmit+0xc6>
 8012c0c:	2a00      	cmp	r2, #0
 8012c0e:	d054      	beq.n	8012cba <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8012c10:	2368      	movs	r3, #104	; 0x68
 8012c12:	5ce3      	ldrb	r3, [r4, r3]
 8012c14:	2b01      	cmp	r3, #1
 8012c16:	d052      	beq.n	8012cbe <HAL_UART_Transmit+0xce>
 8012c18:	2368      	movs	r3, #104	; 0x68
 8012c1a:	2101      	movs	r1, #1
 8012c1c:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012c22:	3369      	adds	r3, #105	; 0x69
 8012c24:	5ce3      	ldrb	r3, [r4, r3]
 8012c26:	2b22      	cmp	r3, #34	; 0x22
 8012c28:	d007      	beq.n	8012c3a <HAL_UART_Transmit+0x4a>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012c2a:	2369      	movs	r3, #105	; 0x69
 8012c2c:	2112      	movs	r1, #18
 8012c2e:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8012c30:	2350      	movs	r3, #80	; 0x50
 8012c32:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8012c34:	3302      	adds	r3, #2
 8012c36:	52e2      	strh	r2, [r4, r3]
    while(huart->TxXferCount > 0)
 8012c38:	e007      	b.n	8012c4a <HAL_UART_Transmit+0x5a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012c3a:	3347      	adds	r3, #71	; 0x47
 8012c3c:	3131      	adds	r1, #49	; 0x31
 8012c3e:	54e1      	strb	r1, [r4, r3]
 8012c40:	e7f6      	b.n	8012c30 <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8012c42:	782b      	ldrb	r3, [r5, #0]
 8012c44:	6822      	ldr	r2, [r4, #0]
 8012c46:	8513      	strh	r3, [r2, #40]	; 0x28
 8012c48:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0)
 8012c4a:	2252      	movs	r2, #82	; 0x52
 8012c4c:	5aa2      	ldrh	r2, [r4, r2]
 8012c4e:	2a00      	cmp	r2, #0
 8012c50:	d019      	beq.n	8012c86 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8012c52:	3a01      	subs	r2, #1
 8012c54:	2152      	movs	r1, #82	; 0x52
 8012c56:	5262      	strh	r2, [r4, r1]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8012c58:	0033      	movs	r3, r6
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	312e      	adds	r1, #46	; 0x2e
 8012c5e:	0020      	movs	r0, r4
 8012c60:	f7ff ff5e 	bl	8012b20 <UART_WaitOnFlagUntilTimeout>
 8012c64:	2800      	cmp	r0, #0
 8012c66:	d12c      	bne.n	8012cc2 <HAL_UART_Transmit+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012c68:	2380      	movs	r3, #128	; 0x80
 8012c6a:	015b      	lsls	r3, r3, #5
 8012c6c:	68a2      	ldr	r2, [r4, #8]
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	d1e7      	bne.n	8012c42 <HAL_UART_Transmit+0x52>
 8012c72:	6923      	ldr	r3, [r4, #16]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d1e4      	bne.n	8012c42 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012c78:	882b      	ldrh	r3, [r5, #0]
 8012c7a:	05db      	lsls	r3, r3, #23
 8012c7c:	0ddb      	lsrs	r3, r3, #23
 8012c7e:	6822      	ldr	r2, [r4, #0]
 8012c80:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8012c82:	3502      	adds	r5, #2
 8012c84:	e7e1      	b.n	8012c4a <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8012c86:	0033      	movs	r3, r6
 8012c88:	2140      	movs	r1, #64	; 0x40
 8012c8a:	0020      	movs	r0, r4
 8012c8c:	f7ff ff48 	bl	8012b20 <UART_WaitOnFlagUntilTimeout>
 8012c90:	2800      	cmp	r0, #0
 8012c92:	d118      	bne.n	8012cc6 <HAL_UART_Transmit+0xd6>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012c94:	2369      	movs	r3, #105	; 0x69
 8012c96:	5ce3      	ldrb	r3, [r4, r3]
 8012c98:	2b32      	cmp	r3, #50	; 0x32
 8012c9a:	d006      	beq.n	8012caa <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8012c9c:	2369      	movs	r3, #105	; 0x69
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8012ca2:	2368      	movs	r3, #104	; 0x68
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012ca8:	e004      	b.n	8012cb4 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012caa:	3337      	adds	r3, #55	; 0x37
 8012cac:	2222      	movs	r2, #34	; 0x22
 8012cae:	54e2      	strb	r2, [r4, r3]
 8012cb0:	e7f7      	b.n	8012ca2 <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 8012cb2:	2002      	movs	r0, #2
}
 8012cb4:	bd70      	pop	{r4, r5, r6, pc}
      return  HAL_ERROR;
 8012cb6:	2001      	movs	r0, #1
 8012cb8:	e7fc      	b.n	8012cb4 <HAL_UART_Transmit+0xc4>
 8012cba:	2001      	movs	r0, #1
 8012cbc:	e7fa      	b.n	8012cb4 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8012cbe:	2002      	movs	r0, #2
 8012cc0:	e7f8      	b.n	8012cb4 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8012cc2:	2003      	movs	r0, #3
 8012cc4:	e7f6      	b.n	8012cb4 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8012cc6:	2003      	movs	r0, #3
 8012cc8:	e7f4      	b.n	8012cb4 <HAL_UART_Transmit+0xc4>
	...

08012ccc <UART_CheckIdleState>:
{
 8012ccc:	b510      	push	{r4, lr}
 8012cce:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012cd4:	6803      	ldr	r3, [r0, #0]
 8012cd6:	4a18      	ldr	r2, [pc, #96]	; (8012d38 <UART_CheckIdleState+0x6c>)
 8012cd8:	4293      	cmp	r3, r2
 8012cda:	d005      	beq.n	8012ce8 <UART_CheckIdleState+0x1c>
 8012cdc:	4a17      	ldr	r2, [pc, #92]	; (8012d3c <UART_CheckIdleState+0x70>)
 8012cde:	4293      	cmp	r3, r2
 8012ce0:	d002      	beq.n	8012ce8 <UART_CheckIdleState+0x1c>
 8012ce2:	4a17      	ldr	r2, [pc, #92]	; (8012d40 <UART_CheckIdleState+0x74>)
 8012ce4:	4293      	cmp	r3, r2
 8012ce6:	d106      	bne.n	8012cf6 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	071b      	lsls	r3, r3, #28
 8012cec:	d40b      	bmi.n	8012d06 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012cee:	6823      	ldr	r3, [r4, #0]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	075b      	lsls	r3, r3, #29
 8012cf4:	d413      	bmi.n	8012d1e <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8012cf6:	2369      	movs	r3, #105	; 0x69
 8012cf8:	2201      	movs	r2, #1
 8012cfa:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8012cfc:	3b01      	subs	r3, #1
 8012cfe:	2200      	movs	r2, #0
 8012d00:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8012d02:	2000      	movs	r0, #0
}
 8012d04:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012d06:	23fa      	movs	r3, #250	; 0xfa
 8012d08:	2180      	movs	r1, #128	; 0x80
 8012d0a:	009b      	lsls	r3, r3, #2
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	0389      	lsls	r1, r1, #14
 8012d10:	0020      	movs	r0, r4
 8012d12:	f7ff ff05 	bl	8012b20 <UART_WaitOnFlagUntilTimeout>
 8012d16:	2800      	cmp	r0, #0
 8012d18:	d0e9      	beq.n	8012cee <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8012d1a:	2003      	movs	r0, #3
 8012d1c:	e7f2      	b.n	8012d04 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012d1e:	23fa      	movs	r3, #250	; 0xfa
 8012d20:	2180      	movs	r1, #128	; 0x80
 8012d22:	009b      	lsls	r3, r3, #2
 8012d24:	2200      	movs	r2, #0
 8012d26:	03c9      	lsls	r1, r1, #15
 8012d28:	0020      	movs	r0, r4
 8012d2a:	f7ff fef9 	bl	8012b20 <UART_WaitOnFlagUntilTimeout>
 8012d2e:	2800      	cmp	r0, #0
 8012d30:	d0e1      	beq.n	8012cf6 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8012d32:	2003      	movs	r0, #3
 8012d34:	e7e6      	b.n	8012d04 <UART_CheckIdleState+0x38>
 8012d36:	46c0      	nop			; (mov r8, r8)
 8012d38:	40013800 	.word	0x40013800
 8012d3c:	40004400 	.word	0x40004400
 8012d40:	40004800 	.word	0x40004800

08012d44 <HAL_UART_Init>:
{
 8012d44:	b510      	push	{r4, lr}
 8012d46:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012d48:	d030      	beq.n	8012dac <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8012d4a:	2369      	movs	r3, #105	; 0x69
 8012d4c:	5cc3      	ldrb	r3, [r0, r3]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d022      	beq.n	8012d98 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8012d52:	2369      	movs	r3, #105	; 0x69
 8012d54:	2202      	movs	r2, #2
 8012d56:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8012d58:	6822      	ldr	r2, [r4, #0]
 8012d5a:	6813      	ldr	r3, [r2, #0]
 8012d5c:	2101      	movs	r1, #1
 8012d5e:	438b      	bics	r3, r1
 8012d60:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012d62:	0020      	movs	r0, r4
 8012d64:	f7ff fd38 	bl	80127d8 <UART_SetConfig>
 8012d68:	2801      	cmp	r0, #1
 8012d6a:	d014      	beq.n	8012d96 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d118      	bne.n	8012da4 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012d72:	6822      	ldr	r2, [r4, #0]
 8012d74:	6853      	ldr	r3, [r2, #4]
 8012d76:	490e      	ldr	r1, [pc, #56]	; (8012db0 <HAL_UART_Init+0x6c>)
 8012d78:	400b      	ands	r3, r1
 8012d7a:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8012d7c:	6822      	ldr	r2, [r4, #0]
 8012d7e:	6893      	ldr	r3, [r2, #8]
 8012d80:	212a      	movs	r1, #42	; 0x2a
 8012d82:	438b      	bics	r3, r1
 8012d84:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8012d86:	6822      	ldr	r2, [r4, #0]
 8012d88:	6813      	ldr	r3, [r2, #0]
 8012d8a:	3929      	subs	r1, #41	; 0x29
 8012d8c:	430b      	orrs	r3, r1
 8012d8e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8012d90:	0020      	movs	r0, r4
 8012d92:	f7ff ff9b 	bl	8012ccc <UART_CheckIdleState>
}
 8012d96:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8012d98:	3368      	adds	r3, #104	; 0x68
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8012d9e:	f7fa fed1 	bl	800db44 <HAL_UART_MspInit>
 8012da2:	e7d6      	b.n	8012d52 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8012da4:	0020      	movs	r0, r4
 8012da6:	f7ff fe4b 	bl	8012a40 <UART_AdvFeatureConfig>
 8012daa:	e7e2      	b.n	8012d72 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8012dac:	2001      	movs	r0, #1
 8012dae:	e7f2      	b.n	8012d96 <HAL_UART_Init+0x52>
 8012db0:	ffffb7ff 	.word	0xffffb7ff

08012db4 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012db4:	2369      	movs	r3, #105	; 0x69
 8012db6:	5cc3      	ldrb	r3, [r0, r3]
 8012db8:	2b12      	cmp	r3, #18
 8012dba:	d003      	beq.n	8012dc4 <UART_Transmit_IT+0x10>
 8012dbc:	2369      	movs	r3, #105	; 0x69
 8012dbe:	5cc3      	ldrb	r3, [r0, r3]
 8012dc0:	2b32      	cmp	r3, #50	; 0x32
 8012dc2:	d12d      	bne.n	8012e20 <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 8012dc4:	2352      	movs	r3, #82	; 0x52
 8012dc6:	5ac3      	ldrh	r3, [r0, r3]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d10b      	bne.n	8012de4 <UART_Transmit_IT+0x30>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012dcc:	6802      	ldr	r2, [r0, #0]
 8012dce:	6813      	ldr	r3, [r2, #0]
 8012dd0:	2180      	movs	r1, #128	; 0x80
 8012dd2:	438b      	bics	r3, r1
 8012dd4:	6013      	str	r3, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012dd6:	6802      	ldr	r2, [r0, #0]
 8012dd8:	6813      	ldr	r3, [r2, #0]
 8012dda:	3940      	subs	r1, #64	; 0x40
 8012ddc:	430b      	orrs	r3, r1
 8012dde:	6013      	str	r3, [r2, #0]

      return HAL_OK;
 8012de0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012de2:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012de4:	2380      	movs	r3, #128	; 0x80
 8012de6:	015b      	lsls	r3, r3, #5
 8012de8:	6882      	ldr	r2, [r0, #8]
 8012dea:	429a      	cmp	r2, r3
 8012dec:	d00b      	beq.n	8012e06 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8012dee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012df0:	1c5a      	adds	r2, r3, #1
 8012df2:	64c2      	str	r2, [r0, #76]	; 0x4c
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	6802      	ldr	r2, [r0, #0]
 8012df8:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8012dfa:	2252      	movs	r2, #82	; 0x52
 8012dfc:	5a83      	ldrh	r3, [r0, r2]
 8012dfe:	3b01      	subs	r3, #1
 8012e00:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8012e02:	2000      	movs	r0, #0
 8012e04:	e7ed      	b.n	8012de2 <UART_Transmit_IT+0x2e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012e06:	6903      	ldr	r3, [r0, #16]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d1f0      	bne.n	8012dee <UART_Transmit_IT+0x3a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012e0c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012e0e:	881b      	ldrh	r3, [r3, #0]
 8012e10:	05db      	lsls	r3, r3, #23
 8012e12:	0ddb      	lsrs	r3, r3, #23
 8012e14:	6802      	ldr	r2, [r0, #0]
 8012e16:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8012e18:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012e1a:	3302      	adds	r3, #2
 8012e1c:	64c3      	str	r3, [r0, #76]	; 0x4c
 8012e1e:	e7ec      	b.n	8012dfa <UART_Transmit_IT+0x46>
    return HAL_BUSY;
 8012e20:	2002      	movs	r0, #2
 8012e22:	e7de      	b.n	8012de2 <UART_Transmit_IT+0x2e>

08012e24 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012e24:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012e26:	6802      	ldr	r2, [r0, #0]
 8012e28:	6813      	ldr	r3, [r2, #0]
 8012e2a:	2140      	movs	r1, #64	; 0x40
 8012e2c:	438b      	bics	r3, r1
 8012e2e:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012e30:	2369      	movs	r3, #105	; 0x69
 8012e32:	5cc3      	ldrb	r3, [r0, r3]
 8012e34:	2b32      	cmp	r3, #50	; 0x32
 8012e36:	d00a      	beq.n	8012e4e <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012e38:	6801      	ldr	r1, [r0, #0]
 8012e3a:	688b      	ldr	r3, [r1, #8]
 8012e3c:	2201      	movs	r2, #1
 8012e3e:	4393      	bics	r3, r2
 8012e40:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8012e42:	2369      	movs	r3, #105	; 0x69
 8012e44:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8012e46:	f7fa faa3 	bl	800d390 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8012e4a:	2000      	movs	r0, #0
 8012e4c:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8012e4e:	3337      	adds	r3, #55	; 0x37
 8012e50:	2222      	movs	r2, #34	; 0x22
 8012e52:	54c2      	strb	r2, [r0, r3]
 8012e54:	e7f7      	b.n	8012e46 <UART_EndTransmit_IT+0x22>
	...

08012e58 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8012e58:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 8012e5a:	235c      	movs	r3, #92	; 0x5c
 8012e5c:	5ac3      	ldrh	r3, [r0, r3]

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012e5e:	2269      	movs	r2, #105	; 0x69
 8012e60:	5c82      	ldrb	r2, [r0, r2]
 8012e62:	2a22      	cmp	r2, #34	; 0x22
 8012e64:	d003      	beq.n	8012e6e <UART_Receive_IT+0x16>
 8012e66:	2269      	movs	r2, #105	; 0x69
 8012e68:	5c82      	ldrb	r2, [r0, r2]
 8012e6a:	2a32      	cmp	r2, #50	; 0x32
 8012e6c:	d13c      	bne.n	8012ee8 <UART_Receive_IT+0x90>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012e6e:	2280      	movs	r2, #128	; 0x80
 8012e70:	0152      	lsls	r2, r2, #5
 8012e72:	6881      	ldr	r1, [r0, #8]
 8012e74:	4291      	cmp	r1, r2
 8012e76:	d027      	beq.n	8012ec8 <UART_Receive_IT+0x70>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012e78:	6802      	ldr	r2, [r0, #0]
 8012e7a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8012e7c:	b2db      	uxtb	r3, r3
 8012e7e:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8012e80:	1c4c      	adds	r4, r1, #1
 8012e82:	6544      	str	r4, [r0, #84]	; 0x54
 8012e84:	4013      	ands	r3, r2
 8012e86:	700b      	strb	r3, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8012e88:	225a      	movs	r2, #90	; 0x5a
 8012e8a:	5a83      	ldrh	r3, [r0, r2]
 8012e8c:	3b01      	subs	r3, #1
 8012e8e:	b29b      	uxth	r3, r3
 8012e90:	5283      	strh	r3, [r0, r2]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d12a      	bne.n	8012eec <UART_Receive_IT+0x94>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012e96:	6802      	ldr	r2, [r0, #0]
 8012e98:	6813      	ldr	r3, [r2, #0]
 8012e9a:	2120      	movs	r1, #32
 8012e9c:	438b      	bics	r3, r1
 8012e9e:	6013      	str	r3, [r2, #0]

      /* Check if a transmit Process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012ea0:	2369      	movs	r3, #105	; 0x69
 8012ea2:	5cc3      	ldrb	r3, [r0, r3]
 8012ea4:	2b32      	cmp	r3, #50	; 0x32
 8012ea6:	d01b      	beq.n	8012ee0 <UART_Receive_IT+0x88>
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012ea8:	6802      	ldr	r2, [r0, #0]
 8012eaa:	6813      	ldr	r3, [r2, #0]
 8012eac:	4910      	ldr	r1, [pc, #64]	; (8012ef0 <UART_Receive_IT+0x98>)
 8012eae:	400b      	ands	r3, r1
 8012eb0:	6013      	str	r3, [r2, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012eb2:	6801      	ldr	r1, [r0, #0]
 8012eb4:	688b      	ldr	r3, [r1, #8]
 8012eb6:	2201      	movs	r2, #1
 8012eb8:	4393      	bics	r3, r2
 8012eba:	608b      	str	r3, [r1, #8]

        huart->State = HAL_UART_STATE_READY;
 8012ebc:	2369      	movs	r3, #105	; 0x69
 8012ebe:	54c2      	strb	r2, [r0, r3]
      }

      HAL_UART_RxCpltCallback(huart);
 8012ec0:	f7fa faa2 	bl	800d408 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8012ec4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012ec6:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012ec8:	6902      	ldr	r2, [r0, #16]
 8012eca:	2a00      	cmp	r2, #0
 8012ecc:	d1d4      	bne.n	8012e78 <UART_Receive_IT+0x20>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8012ece:	6802      	ldr	r2, [r0, #0]
 8012ed0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8012ed2:	4013      	ands	r3, r2
 8012ed4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8012ed6:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8012ed8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8012eda:	3302      	adds	r3, #2
 8012edc:	6543      	str	r3, [r0, #84]	; 0x54
 8012ede:	e7d3      	b.n	8012e88 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8012ee0:	3337      	adds	r3, #55	; 0x37
 8012ee2:	2212      	movs	r2, #18
 8012ee4:	54c2      	strb	r2, [r0, r3]
 8012ee6:	e7eb      	b.n	8012ec0 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8012ee8:	2002      	movs	r0, #2
 8012eea:	e7ec      	b.n	8012ec6 <UART_Receive_IT+0x6e>
    return HAL_OK;
 8012eec:	2000      	movs	r0, #0
 8012eee:	e7ea      	b.n	8012ec6 <UART_Receive_IT+0x6e>
 8012ef0:	fffffeff 	.word	0xfffffeff

08012ef4 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8012ef4:	4770      	bx	lr

08012ef6 <HAL_UART_IRQHandler>:
{
 8012ef6:	b510      	push	{r4, lr}
 8012ef8:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8012efa:	6803      	ldr	r3, [r0, #0]
 8012efc:	69da      	ldr	r2, [r3, #28]
 8012efe:	07d2      	lsls	r2, r2, #31
 8012f00:	d509      	bpl.n	8012f16 <HAL_UART_IRQHandler+0x20>
 8012f02:	681a      	ldr	r2, [r3, #0]
 8012f04:	05d2      	lsls	r2, r2, #23
 8012f06:	d506      	bpl.n	8012f16 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8012f08:	2201      	movs	r2, #1
 8012f0a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012f0c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012f0e:	4313      	orrs	r3, r2
 8012f10:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012f12:	2369      	movs	r3, #105	; 0x69
 8012f14:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012f16:	6823      	ldr	r3, [r4, #0]
 8012f18:	69da      	ldr	r2, [r3, #28]
 8012f1a:	0792      	lsls	r2, r2, #30
 8012f1c:	d50b      	bpl.n	8012f36 <HAL_UART_IRQHandler+0x40>
 8012f1e:	689a      	ldr	r2, [r3, #8]
 8012f20:	07d2      	lsls	r2, r2, #31
 8012f22:	d508      	bpl.n	8012f36 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8012f24:	2202      	movs	r2, #2
 8012f26:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012f28:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012f2a:	3202      	adds	r2, #2
 8012f2c:	4313      	orrs	r3, r2
 8012f2e:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012f30:	2369      	movs	r3, #105	; 0x69
 8012f32:	3a03      	subs	r2, #3
 8012f34:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012f36:	6823      	ldr	r3, [r4, #0]
 8012f38:	69da      	ldr	r2, [r3, #28]
 8012f3a:	0752      	lsls	r2, r2, #29
 8012f3c:	d50b      	bpl.n	8012f56 <HAL_UART_IRQHandler+0x60>
 8012f3e:	689a      	ldr	r2, [r3, #8]
 8012f40:	07d2      	lsls	r2, r2, #31
 8012f42:	d508      	bpl.n	8012f56 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8012f44:	2204      	movs	r2, #4
 8012f46:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012f48:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012f4a:	3a02      	subs	r2, #2
 8012f4c:	4313      	orrs	r3, r2
 8012f4e:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012f50:	2369      	movs	r3, #105	; 0x69
 8012f52:	3a01      	subs	r2, #1
 8012f54:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012f56:	6823      	ldr	r3, [r4, #0]
 8012f58:	69da      	ldr	r2, [r3, #28]
 8012f5a:	0712      	lsls	r2, r2, #28
 8012f5c:	d50a      	bpl.n	8012f74 <HAL_UART_IRQHandler+0x7e>
 8012f5e:	689a      	ldr	r2, [r3, #8]
 8012f60:	07d2      	lsls	r2, r2, #31
 8012f62:	d507      	bpl.n	8012f74 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8012f64:	2208      	movs	r2, #8
 8012f66:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012f68:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012f6a:	4313      	orrs	r3, r2
 8012f6c:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012f6e:	2369      	movs	r3, #105	; 0x69
 8012f70:	3a07      	subs	r2, #7
 8012f72:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012f74:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d11c      	bne.n	8012fb4 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8012f7a:	6823      	ldr	r3, [r4, #0]
 8012f7c:	69da      	ldr	r2, [r3, #28]
 8012f7e:	02d2      	lsls	r2, r2, #11
 8012f80:	d502      	bpl.n	8012f88 <HAL_UART_IRQHandler+0x92>
 8012f82:	689a      	ldr	r2, [r3, #8]
 8012f84:	0252      	lsls	r2, r2, #9
 8012f86:	d419      	bmi.n	8012fbc <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8012f88:	6823      	ldr	r3, [r4, #0]
 8012f8a:	69da      	ldr	r2, [r3, #28]
 8012f8c:	0692      	lsls	r2, r2, #26
 8012f8e:	d502      	bpl.n	8012f96 <HAL_UART_IRQHandler+0xa0>
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	069b      	lsls	r3, r3, #26
 8012f94:	d41c      	bmi.n	8012fd0 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8012f96:	6823      	ldr	r3, [r4, #0]
 8012f98:	69da      	ldr	r2, [r3, #28]
 8012f9a:	0612      	lsls	r2, r2, #24
 8012f9c:	d502      	bpl.n	8012fa4 <HAL_UART_IRQHandler+0xae>
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	061b      	lsls	r3, r3, #24
 8012fa2:	d41e      	bmi.n	8012fe2 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8012fa4:	6823      	ldr	r3, [r4, #0]
 8012fa6:	69da      	ldr	r2, [r3, #28]
 8012fa8:	0652      	lsls	r2, r2, #25
 8012faa:	d502      	bpl.n	8012fb2 <HAL_UART_IRQHandler+0xbc>
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	065b      	lsls	r3, r3, #25
 8012fb0:	d41b      	bmi.n	8012fea <HAL_UART_IRQHandler+0xf4>
}
 8012fb2:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8012fb4:	0020      	movs	r0, r4
 8012fb6:	f7fa fa03 	bl	800d3c0 <HAL_UART_ErrorCallback>
 8012fba:	e7de      	b.n	8012f7a <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8012fbc:	2280      	movs	r2, #128	; 0x80
 8012fbe:	0352      	lsls	r2, r2, #13
 8012fc0:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8012fc2:	2369      	movs	r3, #105	; 0x69
 8012fc4:	2201      	movs	r2, #1
 8012fc6:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8012fc8:	0020      	movs	r0, r4
 8012fca:	f7ff ff93 	bl	8012ef4 <HAL_UARTEx_WakeupCallback>
 8012fce:	e7db      	b.n	8012f88 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8012fd0:	0020      	movs	r0, r4
 8012fd2:	f7ff ff41 	bl	8012e58 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012fd6:	6822      	ldr	r2, [r4, #0]
 8012fd8:	6993      	ldr	r3, [r2, #24]
 8012fda:	2108      	movs	r1, #8
 8012fdc:	430b      	orrs	r3, r1
 8012fde:	6193      	str	r3, [r2, #24]
 8012fe0:	e7d9      	b.n	8012f96 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8012fe2:	0020      	movs	r0, r4
 8012fe4:	f7ff fee6 	bl	8012db4 <UART_Transmit_IT>
 8012fe8:	e7dc      	b.n	8012fa4 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8012fea:	0020      	movs	r0, r4
 8012fec:	f7ff ff1a 	bl	8012e24 <UART_EndTransmit_IT>
}
 8012ff0:	e7df      	b.n	8012fb2 <HAL_UART_IRQHandler+0xbc>

08012ff2 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8012ff2:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8012ff4:	f7f0 fd58 	bl	8003aa8 <Module_Init>

	//Don't place your code here.
	for(;;){}
 8012ff8:	e7fe      	b.n	8012ff8 <main+0x6>

08012ffa <UserTask>:

/* User Task */
void UserTask(void *argument){

	// put your code here, to run repeatedly.
	while(1){
 8012ffa:	e7fe      	b.n	8012ffa <UserTask>

08012ffc <atof>:
 8012ffc:	b510      	push	{r4, lr}
 8012ffe:	2100      	movs	r1, #0
 8013000:	f001 faf6 	bl	80145f0 <strtod>
 8013004:	bd10      	pop	{r4, pc}

08013006 <atoi>:
 8013006:	b510      	push	{r4, lr}
 8013008:	220a      	movs	r2, #10
 801300a:	2100      	movs	r1, #0
 801300c:	f001 fbc6 	bl	801479c <strtol>
 8013010:	bd10      	pop	{r4, pc}

08013012 <atol>:
 8013012:	b510      	push	{r4, lr}
 8013014:	220a      	movs	r2, #10
 8013016:	2100      	movs	r1, #0
 8013018:	f001 fbc0 	bl	801479c <strtol>
 801301c:	bd10      	pop	{r4, pc}
	...

08013020 <__libc_init_array>:
 8013020:	b570      	push	{r4, r5, r6, lr}
 8013022:	2600      	movs	r6, #0
 8013024:	4d0c      	ldr	r5, [pc, #48]	; (8013058 <__libc_init_array+0x38>)
 8013026:	4c0d      	ldr	r4, [pc, #52]	; (801305c <__libc_init_array+0x3c>)
 8013028:	1b64      	subs	r4, r4, r5
 801302a:	10a4      	asrs	r4, r4, #2
 801302c:	42a6      	cmp	r6, r4
 801302e:	d109      	bne.n	8013044 <__libc_init_array+0x24>
 8013030:	2600      	movs	r6, #0
 8013032:	f006 fb29 	bl	8019688 <_init>
 8013036:	4d0a      	ldr	r5, [pc, #40]	; (8013060 <__libc_init_array+0x40>)
 8013038:	4c0a      	ldr	r4, [pc, #40]	; (8013064 <__libc_init_array+0x44>)
 801303a:	1b64      	subs	r4, r4, r5
 801303c:	10a4      	asrs	r4, r4, #2
 801303e:	42a6      	cmp	r6, r4
 8013040:	d105      	bne.n	801304e <__libc_init_array+0x2e>
 8013042:	bd70      	pop	{r4, r5, r6, pc}
 8013044:	00b3      	lsls	r3, r6, #2
 8013046:	58eb      	ldr	r3, [r5, r3]
 8013048:	4798      	blx	r3
 801304a:	3601      	adds	r6, #1
 801304c:	e7ee      	b.n	801302c <__libc_init_array+0xc>
 801304e:	00b3      	lsls	r3, r6, #2
 8013050:	58eb      	ldr	r3, [r5, r3]
 8013052:	4798      	blx	r3
 8013054:	3601      	adds	r6, #1
 8013056:	e7f2      	b.n	801303e <__libc_init_array+0x1e>
 8013058:	0801ca88 	.word	0x0801ca88
 801305c:	0801ca88 	.word	0x0801ca88
 8013060:	0801ca88 	.word	0x0801ca88
 8013064:	0801ca90 	.word	0x0801ca90

08013068 <malloc>:
 8013068:	b510      	push	{r4, lr}
 801306a:	4b03      	ldr	r3, [pc, #12]	; (8013078 <malloc+0x10>)
 801306c:	0001      	movs	r1, r0
 801306e:	6818      	ldr	r0, [r3, #0]
 8013070:	f000 f80e 	bl	8013090 <_malloc_r>
 8013074:	bd10      	pop	{r4, pc}
 8013076:	46c0      	nop			; (mov r8, r8)
 8013078:	200000cc 	.word	0x200000cc

0801307c <free>:
 801307c:	b510      	push	{r4, lr}
 801307e:	4b03      	ldr	r3, [pc, #12]	; (801308c <free+0x10>)
 8013080:	0001      	movs	r1, r0
 8013082:	6818      	ldr	r0, [r3, #0]
 8013084:	f003 fcfe 	bl	8016a84 <_free_r>
 8013088:	bd10      	pop	{r4, pc}
 801308a:	46c0      	nop			; (mov r8, r8)
 801308c:	200000cc 	.word	0x200000cc

08013090 <_malloc_r>:
 8013090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013092:	000d      	movs	r5, r1
 8013094:	b087      	sub	sp, #28
 8013096:	350b      	adds	r5, #11
 8013098:	9001      	str	r0, [sp, #4]
 801309a:	2d16      	cmp	r5, #22
 801309c:	d908      	bls.n	80130b0 <_malloc_r+0x20>
 801309e:	2207      	movs	r2, #7
 80130a0:	4395      	bics	r5, r2
 80130a2:	d506      	bpl.n	80130b2 <_malloc_r+0x22>
 80130a4:	230c      	movs	r3, #12
 80130a6:	9a01      	ldr	r2, [sp, #4]
 80130a8:	6013      	str	r3, [r2, #0]
 80130aa:	2000      	movs	r0, #0
 80130ac:	b007      	add	sp, #28
 80130ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130b0:	2510      	movs	r5, #16
 80130b2:	42a9      	cmp	r1, r5
 80130b4:	d8f6      	bhi.n	80130a4 <_malloc_r+0x14>
 80130b6:	9801      	ldr	r0, [sp, #4]
 80130b8:	f000 fa1c 	bl	80134f4 <__malloc_lock>
 80130bc:	23fc      	movs	r3, #252	; 0xfc
 80130be:	48bd      	ldr	r0, [pc, #756]	; (80133b4 <_malloc_r+0x324>)
 80130c0:	005b      	lsls	r3, r3, #1
 80130c2:	429d      	cmp	r5, r3
 80130c4:	d21a      	bcs.n	80130fc <_malloc_r+0x6c>
 80130c6:	002a      	movs	r2, r5
 80130c8:	3208      	adds	r2, #8
 80130ca:	1882      	adds	r2, r0, r2
 80130cc:	0011      	movs	r1, r2
 80130ce:	6854      	ldr	r4, [r2, #4]
 80130d0:	3908      	subs	r1, #8
 80130d2:	08eb      	lsrs	r3, r5, #3
 80130d4:	428c      	cmp	r4, r1
 80130d6:	d103      	bne.n	80130e0 <_malloc_r+0x50>
 80130d8:	68d4      	ldr	r4, [r2, #12]
 80130da:	3302      	adds	r3, #2
 80130dc:	42a2      	cmp	r2, r4
 80130de:	d023      	beq.n	8013128 <_malloc_r+0x98>
 80130e0:	2303      	movs	r3, #3
 80130e2:	6862      	ldr	r2, [r4, #4]
 80130e4:	68a1      	ldr	r1, [r4, #8]
 80130e6:	439a      	bics	r2, r3
 80130e8:	0013      	movs	r3, r2
 80130ea:	68e2      	ldr	r2, [r4, #12]
 80130ec:	18e3      	adds	r3, r4, r3
 80130ee:	60ca      	str	r2, [r1, #12]
 80130f0:	6091      	str	r1, [r2, #8]
 80130f2:	2201      	movs	r2, #1
 80130f4:	6859      	ldr	r1, [r3, #4]
 80130f6:	430a      	orrs	r2, r1
 80130f8:	605a      	str	r2, [r3, #4]
 80130fa:	e02b      	b.n	8013154 <_malloc_r+0xc4>
 80130fc:	233f      	movs	r3, #63	; 0x3f
 80130fe:	0a6a      	lsrs	r2, r5, #9
 8013100:	d003      	beq.n	801310a <_malloc_r+0x7a>
 8013102:	2a04      	cmp	r2, #4
 8013104:	d82c      	bhi.n	8013160 <_malloc_r+0xd0>
 8013106:	09ab      	lsrs	r3, r5, #6
 8013108:	3338      	adds	r3, #56	; 0x38
 801310a:	2203      	movs	r2, #3
 801310c:	4694      	mov	ip, r2
 801310e:	00d9      	lsls	r1, r3, #3
 8013110:	1809      	adds	r1, r1, r0
 8013112:	68cc      	ldr	r4, [r1, #12]
 8013114:	428c      	cmp	r4, r1
 8013116:	d006      	beq.n	8013126 <_malloc_r+0x96>
 8013118:	4666      	mov	r6, ip
 801311a:	6862      	ldr	r2, [r4, #4]
 801311c:	43b2      	bics	r2, r6
 801311e:	1b57      	subs	r7, r2, r5
 8013120:	2f0f      	cmp	r7, #15
 8013122:	dd35      	ble.n	8013190 <_malloc_r+0x100>
 8013124:	3b01      	subs	r3, #1
 8013126:	3301      	adds	r3, #1
 8013128:	6904      	ldr	r4, [r0, #16]
 801312a:	49a3      	ldr	r1, [pc, #652]	; (80133b8 <_malloc_r+0x328>)
 801312c:	428c      	cmp	r4, r1
 801312e:	d056      	beq.n	80131de <_malloc_r+0x14e>
 8013130:	2203      	movs	r2, #3
 8013132:	6866      	ldr	r6, [r4, #4]
 8013134:	4396      	bics	r6, r2
 8013136:	0032      	movs	r2, r6
 8013138:	1b76      	subs	r6, r6, r5
 801313a:	2e0f      	cmp	r6, #15
 801313c:	dd36      	ble.n	80131ac <_malloc_r+0x11c>
 801313e:	2701      	movs	r7, #1
 8013140:	1963      	adds	r3, r4, r5
 8013142:	433d      	orrs	r5, r7
 8013144:	4337      	orrs	r7, r6
 8013146:	6065      	str	r5, [r4, #4]
 8013148:	6143      	str	r3, [r0, #20]
 801314a:	6103      	str	r3, [r0, #16]
 801314c:	60d9      	str	r1, [r3, #12]
 801314e:	6099      	str	r1, [r3, #8]
 8013150:	605f      	str	r7, [r3, #4]
 8013152:	50a6      	str	r6, [r4, r2]
 8013154:	9801      	ldr	r0, [sp, #4]
 8013156:	f000 f9d5 	bl	8013504 <__malloc_unlock>
 801315a:	0020      	movs	r0, r4
 801315c:	3008      	adds	r0, #8
 801315e:	e7a5      	b.n	80130ac <_malloc_r+0x1c>
 8013160:	2a14      	cmp	r2, #20
 8013162:	d802      	bhi.n	801316a <_malloc_r+0xda>
 8013164:	0013      	movs	r3, r2
 8013166:	335b      	adds	r3, #91	; 0x5b
 8013168:	e7cf      	b.n	801310a <_malloc_r+0x7a>
 801316a:	2a54      	cmp	r2, #84	; 0x54
 801316c:	d802      	bhi.n	8013174 <_malloc_r+0xe4>
 801316e:	0b2b      	lsrs	r3, r5, #12
 8013170:	336e      	adds	r3, #110	; 0x6e
 8013172:	e7ca      	b.n	801310a <_malloc_r+0x7a>
 8013174:	23aa      	movs	r3, #170	; 0xaa
 8013176:	005b      	lsls	r3, r3, #1
 8013178:	429a      	cmp	r2, r3
 801317a:	d802      	bhi.n	8013182 <_malloc_r+0xf2>
 801317c:	0beb      	lsrs	r3, r5, #15
 801317e:	3377      	adds	r3, #119	; 0x77
 8013180:	e7c3      	b.n	801310a <_malloc_r+0x7a>
 8013182:	498e      	ldr	r1, [pc, #568]	; (80133bc <_malloc_r+0x32c>)
 8013184:	237e      	movs	r3, #126	; 0x7e
 8013186:	428a      	cmp	r2, r1
 8013188:	d8bf      	bhi.n	801310a <_malloc_r+0x7a>
 801318a:	0cab      	lsrs	r3, r5, #18
 801318c:	337c      	adds	r3, #124	; 0x7c
 801318e:	e7bc      	b.n	801310a <_malloc_r+0x7a>
 8013190:	68e6      	ldr	r6, [r4, #12]
 8013192:	2f00      	cmp	r7, #0
 8013194:	db08      	blt.n	80131a8 <_malloc_r+0x118>
 8013196:	68a3      	ldr	r3, [r4, #8]
 8013198:	60de      	str	r6, [r3, #12]
 801319a:	60b3      	str	r3, [r6, #8]
 801319c:	2301      	movs	r3, #1
 801319e:	18a2      	adds	r2, r4, r2
 80131a0:	6851      	ldr	r1, [r2, #4]
 80131a2:	430b      	orrs	r3, r1
 80131a4:	6053      	str	r3, [r2, #4]
 80131a6:	e7d5      	b.n	8013154 <_malloc_r+0xc4>
 80131a8:	0034      	movs	r4, r6
 80131aa:	e7b3      	b.n	8013114 <_malloc_r+0x84>
 80131ac:	6141      	str	r1, [r0, #20]
 80131ae:	6101      	str	r1, [r0, #16]
 80131b0:	2e00      	cmp	r6, #0
 80131b2:	daf3      	bge.n	801319c <_malloc_r+0x10c>
 80131b4:	6841      	ldr	r1, [r0, #4]
 80131b6:	468c      	mov	ip, r1
 80131b8:	2180      	movs	r1, #128	; 0x80
 80131ba:	0089      	lsls	r1, r1, #2
 80131bc:	428a      	cmp	r2, r1
 80131be:	d300      	bcc.n	80131c2 <_malloc_r+0x132>
 80131c0:	e089      	b.n	80132d6 <_malloc_r+0x246>
 80131c2:	0956      	lsrs	r6, r2, #5
 80131c4:	08d1      	lsrs	r1, r2, #3
 80131c6:	2201      	movs	r2, #1
 80131c8:	40b2      	lsls	r2, r6
 80131ca:	4666      	mov	r6, ip
 80131cc:	00c9      	lsls	r1, r1, #3
 80131ce:	4332      	orrs	r2, r6
 80131d0:	6042      	str	r2, [r0, #4]
 80131d2:	1808      	adds	r0, r1, r0
 80131d4:	6882      	ldr	r2, [r0, #8]
 80131d6:	60e0      	str	r0, [r4, #12]
 80131d8:	60a2      	str	r2, [r4, #8]
 80131da:	6084      	str	r4, [r0, #8]
 80131dc:	60d4      	str	r4, [r2, #12]
 80131de:	2201      	movs	r2, #1
 80131e0:	4874      	ldr	r0, [pc, #464]	; (80133b4 <_malloc_r+0x324>)
 80131e2:	1099      	asrs	r1, r3, #2
 80131e4:	408a      	lsls	r2, r1
 80131e6:	6841      	ldr	r1, [r0, #4]
 80131e8:	4291      	cmp	r1, r2
 80131ea:	d325      	bcc.n	8013238 <_malloc_r+0x1a8>
 80131ec:	420a      	tst	r2, r1
 80131ee:	d105      	bne.n	80131fc <_malloc_r+0x16c>
 80131f0:	2403      	movs	r4, #3
 80131f2:	43a3      	bics	r3, r4
 80131f4:	0052      	lsls	r2, r2, #1
 80131f6:	3304      	adds	r3, #4
 80131f8:	420a      	tst	r2, r1
 80131fa:	d0fb      	beq.n	80131f4 <_malloc_r+0x164>
 80131fc:	00d9      	lsls	r1, r3, #3
 80131fe:	1841      	adds	r1, r0, r1
 8013200:	468c      	mov	ip, r1
 8013202:	9302      	str	r3, [sp, #8]
 8013204:	68cc      	ldr	r4, [r1, #12]
 8013206:	428c      	cmp	r4, r1
 8013208:	d000      	beq.n	801320c <_malloc_r+0x17c>
 801320a:	e09b      	b.n	8013344 <_malloc_r+0x2b4>
 801320c:	2603      	movs	r6, #3
 801320e:	9c02      	ldr	r4, [sp, #8]
 8013210:	3108      	adds	r1, #8
 8013212:	3401      	adds	r4, #1
 8013214:	9402      	str	r4, [sp, #8]
 8013216:	4234      	tst	r4, r6
 8013218:	d1f4      	bne.n	8013204 <_malloc_r+0x174>
 801321a:	2103      	movs	r1, #3
 801321c:	420b      	tst	r3, r1
 801321e:	d000      	beq.n	8013222 <_malloc_r+0x192>
 8013220:	e0b7      	b.n	8013392 <_malloc_r+0x302>
 8013222:	6843      	ldr	r3, [r0, #4]
 8013224:	4393      	bics	r3, r2
 8013226:	6043      	str	r3, [r0, #4]
 8013228:	4b62      	ldr	r3, [pc, #392]	; (80133b4 <_malloc_r+0x324>)
 801322a:	0052      	lsls	r2, r2, #1
 801322c:	6859      	ldr	r1, [r3, #4]
 801322e:	4291      	cmp	r1, r2
 8013230:	d302      	bcc.n	8013238 <_malloc_r+0x1a8>
 8013232:	2a00      	cmp	r2, #0
 8013234:	d000      	beq.n	8013238 <_malloc_r+0x1a8>
 8013236:	e0bb      	b.n	80133b0 <_malloc_r+0x320>
 8013238:	2303      	movs	r3, #3
 801323a:	6886      	ldr	r6, [r0, #8]
 801323c:	6872      	ldr	r2, [r6, #4]
 801323e:	439a      	bics	r2, r3
 8013240:	9202      	str	r2, [sp, #8]
 8013242:	42aa      	cmp	r2, r5
 8013244:	d303      	bcc.n	801324e <_malloc_r+0x1be>
 8013246:	1b51      	subs	r1, r2, r5
 8013248:	290f      	cmp	r1, #15
 801324a:	dd00      	ble.n	801324e <_malloc_r+0x1be>
 801324c:	e123      	b.n	8013496 <_malloc_r+0x406>
 801324e:	9b02      	ldr	r3, [sp, #8]
 8013250:	2008      	movs	r0, #8
 8013252:	18f3      	adds	r3, r6, r3
 8013254:	9303      	str	r3, [sp, #12]
 8013256:	4b5a      	ldr	r3, [pc, #360]	; (80133c0 <_malloc_r+0x330>)
 8013258:	681f      	ldr	r7, [r3, #0]
 801325a:	f002 fd19 	bl	8015c90 <sysconf>
 801325e:	4b59      	ldr	r3, [pc, #356]	; (80133c4 <_malloc_r+0x334>)
 8013260:	3710      	adds	r7, #16
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	197f      	adds	r7, r7, r5
 8013266:	9004      	str	r0, [sp, #16]
 8013268:	3301      	adds	r3, #1
 801326a:	d003      	beq.n	8013274 <_malloc_r+0x1e4>
 801326c:	3f01      	subs	r7, #1
 801326e:	183f      	adds	r7, r7, r0
 8013270:	4243      	negs	r3, r0
 8013272:	401f      	ands	r7, r3
 8013274:	0039      	movs	r1, r7
 8013276:	9801      	ldr	r0, [sp, #4]
 8013278:	f000 fb12 	bl	80138a0 <_sbrk_r>
 801327c:	0004      	movs	r4, r0
 801327e:	1c43      	adds	r3, r0, #1
 8013280:	d100      	bne.n	8013284 <_malloc_r+0x1f4>
 8013282:	e0df      	b.n	8013444 <_malloc_r+0x3b4>
 8013284:	9b03      	ldr	r3, [sp, #12]
 8013286:	4283      	cmp	r3, r0
 8013288:	d903      	bls.n	8013292 <_malloc_r+0x202>
 801328a:	4b4a      	ldr	r3, [pc, #296]	; (80133b4 <_malloc_r+0x324>)
 801328c:	429e      	cmp	r6, r3
 801328e:	d000      	beq.n	8013292 <_malloc_r+0x202>
 8013290:	e0d8      	b.n	8013444 <_malloc_r+0x3b4>
 8013292:	4b4d      	ldr	r3, [pc, #308]	; (80133c8 <_malloc_r+0x338>)
 8013294:	9903      	ldr	r1, [sp, #12]
 8013296:	681a      	ldr	r2, [r3, #0]
 8013298:	18ba      	adds	r2, r7, r2
 801329a:	601a      	str	r2, [r3, #0]
 801329c:	9b04      	ldr	r3, [sp, #16]
 801329e:	3b01      	subs	r3, #1
 80132a0:	42a1      	cmp	r1, r4
 80132a2:	d000      	beq.n	80132a6 <_malloc_r+0x216>
 80132a4:	e096      	b.n	80133d4 <_malloc_r+0x344>
 80132a6:	4219      	tst	r1, r3
 80132a8:	d000      	beq.n	80132ac <_malloc_r+0x21c>
 80132aa:	e093      	b.n	80133d4 <_malloc_r+0x344>
 80132ac:	2601      	movs	r6, #1
 80132ae:	4b41      	ldr	r3, [pc, #260]	; (80133b4 <_malloc_r+0x324>)
 80132b0:	9a02      	ldr	r2, [sp, #8]
 80132b2:	689b      	ldr	r3, [r3, #8]
 80132b4:	19d7      	adds	r7, r2, r7
 80132b6:	433e      	orrs	r6, r7
 80132b8:	605e      	str	r6, [r3, #4]
 80132ba:	4b43      	ldr	r3, [pc, #268]	; (80133c8 <_malloc_r+0x338>)
 80132bc:	4a43      	ldr	r2, [pc, #268]	; (80133cc <_malloc_r+0x33c>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	6811      	ldr	r1, [r2, #0]
 80132c2:	428b      	cmp	r3, r1
 80132c4:	d900      	bls.n	80132c8 <_malloc_r+0x238>
 80132c6:	6013      	str	r3, [r2, #0]
 80132c8:	4a41      	ldr	r2, [pc, #260]	; (80133d0 <_malloc_r+0x340>)
 80132ca:	6811      	ldr	r1, [r2, #0]
 80132cc:	428b      	cmp	r3, r1
 80132ce:	d800      	bhi.n	80132d2 <_malloc_r+0x242>
 80132d0:	e0b8      	b.n	8013444 <_malloc_r+0x3b4>
 80132d2:	6013      	str	r3, [r2, #0]
 80132d4:	e0b6      	b.n	8013444 <_malloc_r+0x3b4>
 80132d6:	0a56      	lsrs	r6, r2, #9
 80132d8:	2e04      	cmp	r6, #4
 80132da:	d811      	bhi.n	8013300 <_malloc_r+0x270>
 80132dc:	0991      	lsrs	r1, r2, #6
 80132de:	3138      	adds	r1, #56	; 0x38
 80132e0:	00cf      	lsls	r7, r1, #3
 80132e2:	183f      	adds	r7, r7, r0
 80132e4:	68be      	ldr	r6, [r7, #8]
 80132e6:	42b7      	cmp	r7, r6
 80132e8:	d125      	bne.n	8013336 <_malloc_r+0x2a6>
 80132ea:	2201      	movs	r2, #1
 80132ec:	1089      	asrs	r1, r1, #2
 80132ee:	408a      	lsls	r2, r1
 80132f0:	4661      	mov	r1, ip
 80132f2:	430a      	orrs	r2, r1
 80132f4:	6042      	str	r2, [r0, #4]
 80132f6:	60e7      	str	r7, [r4, #12]
 80132f8:	60a6      	str	r6, [r4, #8]
 80132fa:	60bc      	str	r4, [r7, #8]
 80132fc:	60f4      	str	r4, [r6, #12]
 80132fe:	e76e      	b.n	80131de <_malloc_r+0x14e>
 8013300:	2e14      	cmp	r6, #20
 8013302:	d802      	bhi.n	801330a <_malloc_r+0x27a>
 8013304:	0031      	movs	r1, r6
 8013306:	315b      	adds	r1, #91	; 0x5b
 8013308:	e7ea      	b.n	80132e0 <_malloc_r+0x250>
 801330a:	2e54      	cmp	r6, #84	; 0x54
 801330c:	d802      	bhi.n	8013314 <_malloc_r+0x284>
 801330e:	0b11      	lsrs	r1, r2, #12
 8013310:	316e      	adds	r1, #110	; 0x6e
 8013312:	e7e5      	b.n	80132e0 <_malloc_r+0x250>
 8013314:	21aa      	movs	r1, #170	; 0xaa
 8013316:	0049      	lsls	r1, r1, #1
 8013318:	428e      	cmp	r6, r1
 801331a:	d802      	bhi.n	8013322 <_malloc_r+0x292>
 801331c:	0bd1      	lsrs	r1, r2, #15
 801331e:	3177      	adds	r1, #119	; 0x77
 8013320:	e7de      	b.n	80132e0 <_malloc_r+0x250>
 8013322:	4f26      	ldr	r7, [pc, #152]	; (80133bc <_malloc_r+0x32c>)
 8013324:	217e      	movs	r1, #126	; 0x7e
 8013326:	42be      	cmp	r6, r7
 8013328:	d8da      	bhi.n	80132e0 <_malloc_r+0x250>
 801332a:	0c91      	lsrs	r1, r2, #18
 801332c:	317c      	adds	r1, #124	; 0x7c
 801332e:	e7d7      	b.n	80132e0 <_malloc_r+0x250>
 8013330:	68b6      	ldr	r6, [r6, #8]
 8013332:	42b7      	cmp	r7, r6
 8013334:	d004      	beq.n	8013340 <_malloc_r+0x2b0>
 8013336:	2003      	movs	r0, #3
 8013338:	6871      	ldr	r1, [r6, #4]
 801333a:	4381      	bics	r1, r0
 801333c:	4291      	cmp	r1, r2
 801333e:	d8f7      	bhi.n	8013330 <_malloc_r+0x2a0>
 8013340:	68f7      	ldr	r7, [r6, #12]
 8013342:	e7d8      	b.n	80132f6 <_malloc_r+0x266>
 8013344:	2703      	movs	r7, #3
 8013346:	6866      	ldr	r6, [r4, #4]
 8013348:	43be      	bics	r6, r7
 801334a:	9603      	str	r6, [sp, #12]
 801334c:	1b77      	subs	r7, r6, r5
 801334e:	68e6      	ldr	r6, [r4, #12]
 8013350:	2f0f      	cmp	r7, #15
 8013352:	dd10      	ble.n	8013376 <_malloc_r+0x2e6>
 8013354:	2201      	movs	r2, #1
 8013356:	68a1      	ldr	r1, [r4, #8]
 8013358:	1963      	adds	r3, r4, r5
 801335a:	4315      	orrs	r5, r2
 801335c:	6065      	str	r5, [r4, #4]
 801335e:	60ce      	str	r6, [r1, #12]
 8013360:	60b1      	str	r1, [r6, #8]
 8013362:	6143      	str	r3, [r0, #20]
 8013364:	6103      	str	r3, [r0, #16]
 8013366:	4814      	ldr	r0, [pc, #80]	; (80133b8 <_malloc_r+0x328>)
 8013368:	433a      	orrs	r2, r7
 801336a:	60d8      	str	r0, [r3, #12]
 801336c:	6098      	str	r0, [r3, #8]
 801336e:	605a      	str	r2, [r3, #4]
 8013370:	9b03      	ldr	r3, [sp, #12]
 8013372:	50e7      	str	r7, [r4, r3]
 8013374:	e6ee      	b.n	8013154 <_malloc_r+0xc4>
 8013376:	2f00      	cmp	r7, #0
 8013378:	db09      	blt.n	801338e <_malloc_r+0x2fe>
 801337a:	9b03      	ldr	r3, [sp, #12]
 801337c:	18e1      	adds	r1, r4, r3
 801337e:	2301      	movs	r3, #1
 8013380:	684a      	ldr	r2, [r1, #4]
 8013382:	4313      	orrs	r3, r2
 8013384:	604b      	str	r3, [r1, #4]
 8013386:	68a3      	ldr	r3, [r4, #8]
 8013388:	60de      	str	r6, [r3, #12]
 801338a:	60b3      	str	r3, [r6, #8]
 801338c:	e6e2      	b.n	8013154 <_malloc_r+0xc4>
 801338e:	0034      	movs	r4, r6
 8013390:	e739      	b.n	8013206 <_malloc_r+0x176>
 8013392:	2108      	movs	r1, #8
 8013394:	4249      	negs	r1, r1
 8013396:	448c      	add	ip, r1
 8013398:	4661      	mov	r1, ip
 801339a:	6889      	ldr	r1, [r1, #8]
 801339c:	3b01      	subs	r3, #1
 801339e:	4561      	cmp	r1, ip
 80133a0:	d100      	bne.n	80133a4 <_malloc_r+0x314>
 80133a2:	e73a      	b.n	801321a <_malloc_r+0x18a>
 80133a4:	e740      	b.n	8013228 <_malloc_r+0x198>
 80133a6:	3304      	adds	r3, #4
 80133a8:	0052      	lsls	r2, r2, #1
 80133aa:	420a      	tst	r2, r1
 80133ac:	d0fb      	beq.n	80133a6 <_malloc_r+0x316>
 80133ae:	e725      	b.n	80131fc <_malloc_r+0x16c>
 80133b0:	9b02      	ldr	r3, [sp, #8]
 80133b2:	e7fa      	b.n	80133aa <_malloc_r+0x31a>
 80133b4:	200004f8 	.word	0x200004f8
 80133b8:	20000500 	.word	0x20000500
 80133bc:	00000554 	.word	0x00000554
 80133c0:	20006f78 	.word	0x20006f78
 80133c4:	20000900 	.word	0x20000900
 80133c8:	20006f48 	.word	0x20006f48
 80133cc:	20006f70 	.word	0x20006f70
 80133d0:	20006f74 	.word	0x20006f74
 80133d4:	4934      	ldr	r1, [pc, #208]	; (80134a8 <_malloc_r+0x418>)
 80133d6:	6808      	ldr	r0, [r1, #0]
 80133d8:	3001      	adds	r0, #1
 80133da:	d141      	bne.n	8013460 <_malloc_r+0x3d0>
 80133dc:	600c      	str	r4, [r1, #0]
 80133de:	2207      	movs	r2, #7
 80133e0:	0021      	movs	r1, r4
 80133e2:	4011      	ands	r1, r2
 80133e4:	2000      	movs	r0, #0
 80133e6:	9103      	str	r1, [sp, #12]
 80133e8:	4214      	tst	r4, r2
 80133ea:	d002      	beq.n	80133f2 <_malloc_r+0x362>
 80133ec:	3008      	adds	r0, #8
 80133ee:	1a40      	subs	r0, r0, r1
 80133f0:	1824      	adds	r4, r4, r0
 80133f2:	19e2      	adds	r2, r4, r7
 80133f4:	9205      	str	r2, [sp, #20]
 80133f6:	9f05      	ldr	r7, [sp, #20]
 80133f8:	9a04      	ldr	r2, [sp, #16]
 80133fa:	401f      	ands	r7, r3
 80133fc:	1810      	adds	r0, r2, r0
 80133fe:	1bc7      	subs	r7, r0, r7
 8013400:	401f      	ands	r7, r3
 8013402:	0039      	movs	r1, r7
 8013404:	9801      	ldr	r0, [sp, #4]
 8013406:	f000 fa4b 	bl	80138a0 <_sbrk_r>
 801340a:	1c43      	adds	r3, r0, #1
 801340c:	d108      	bne.n	8013420 <_malloc_r+0x390>
 801340e:	9f03      	ldr	r7, [sp, #12]
 8013410:	9805      	ldr	r0, [sp, #20]
 8013412:	2f00      	cmp	r7, #0
 8013414:	d004      	beq.n	8013420 <_malloc_r+0x390>
 8013416:	0038      	movs	r0, r7
 8013418:	2700      	movs	r7, #0
 801341a:	9b05      	ldr	r3, [sp, #20]
 801341c:	3808      	subs	r0, #8
 801341e:	1818      	adds	r0, r3, r0
 8013420:	4a22      	ldr	r2, [pc, #136]	; (80134ac <_malloc_r+0x41c>)
 8013422:	1b00      	subs	r0, r0, r4
 8013424:	6813      	ldr	r3, [r2, #0]
 8013426:	19db      	adds	r3, r3, r7
 8013428:	6013      	str	r3, [r2, #0]
 801342a:	2201      	movs	r2, #1
 801342c:	4b20      	ldr	r3, [pc, #128]	; (80134b0 <_malloc_r+0x420>)
 801342e:	19c7      	adds	r7, r0, r7
 8013430:	4317      	orrs	r7, r2
 8013432:	609c      	str	r4, [r3, #8]
 8013434:	6067      	str	r7, [r4, #4]
 8013436:	429e      	cmp	r6, r3
 8013438:	d100      	bne.n	801343c <_malloc_r+0x3ac>
 801343a:	e73e      	b.n	80132ba <_malloc_r+0x22a>
 801343c:	9b02      	ldr	r3, [sp, #8]
 801343e:	2b0f      	cmp	r3, #15
 8013440:	d814      	bhi.n	801346c <_malloc_r+0x3dc>
 8013442:	6062      	str	r2, [r4, #4]
 8013444:	2203      	movs	r2, #3
 8013446:	4b1a      	ldr	r3, [pc, #104]	; (80134b0 <_malloc_r+0x420>)
 8013448:	689b      	ldr	r3, [r3, #8]
 801344a:	685b      	ldr	r3, [r3, #4]
 801344c:	4393      	bics	r3, r2
 801344e:	1b59      	subs	r1, r3, r5
 8013450:	42ab      	cmp	r3, r5
 8013452:	d301      	bcc.n	8013458 <_malloc_r+0x3c8>
 8013454:	290f      	cmp	r1, #15
 8013456:	dc1e      	bgt.n	8013496 <_malloc_r+0x406>
 8013458:	9801      	ldr	r0, [sp, #4]
 801345a:	f000 f853 	bl	8013504 <__malloc_unlock>
 801345e:	e624      	b.n	80130aa <_malloc_r+0x1a>
 8013460:	9903      	ldr	r1, [sp, #12]
 8013462:	1a61      	subs	r1, r4, r1
 8013464:	1889      	adds	r1, r1, r2
 8013466:	4a11      	ldr	r2, [pc, #68]	; (80134ac <_malloc_r+0x41c>)
 8013468:	6011      	str	r1, [r2, #0]
 801346a:	e7b8      	b.n	80133de <_malloc_r+0x34e>
 801346c:	2107      	movs	r1, #7
 801346e:	9b02      	ldr	r3, [sp, #8]
 8013470:	3b0c      	subs	r3, #12
 8013472:	438b      	bics	r3, r1
 8013474:	6871      	ldr	r1, [r6, #4]
 8013476:	400a      	ands	r2, r1
 8013478:	2105      	movs	r1, #5
 801347a:	431a      	orrs	r2, r3
 801347c:	6072      	str	r2, [r6, #4]
 801347e:	18f2      	adds	r2, r6, r3
 8013480:	6051      	str	r1, [r2, #4]
 8013482:	6091      	str	r1, [r2, #8]
 8013484:	2b0f      	cmp	r3, #15
 8013486:	d800      	bhi.n	801348a <_malloc_r+0x3fa>
 8013488:	e717      	b.n	80132ba <_malloc_r+0x22a>
 801348a:	0031      	movs	r1, r6
 801348c:	9801      	ldr	r0, [sp, #4]
 801348e:	3108      	adds	r1, #8
 8013490:	f003 faf8 	bl	8016a84 <_free_r>
 8013494:	e711      	b.n	80132ba <_malloc_r+0x22a>
 8013496:	2201      	movs	r2, #1
 8013498:	0013      	movs	r3, r2
 801349a:	4805      	ldr	r0, [pc, #20]	; (80134b0 <_malloc_r+0x420>)
 801349c:	432b      	orrs	r3, r5
 801349e:	6884      	ldr	r4, [r0, #8]
 80134a0:	6063      	str	r3, [r4, #4]
 80134a2:	1963      	adds	r3, r4, r5
 80134a4:	6083      	str	r3, [r0, #8]
 80134a6:	e626      	b.n	80130f6 <_malloc_r+0x66>
 80134a8:	20000900 	.word	0x20000900
 80134ac:	20006f48 	.word	0x20006f48
 80134b0:	200004f8 	.word	0x200004f8

080134b4 <memcmp>:
 80134b4:	b530      	push	{r4, r5, lr}
 80134b6:	2400      	movs	r4, #0
 80134b8:	3901      	subs	r1, #1
 80134ba:	42a2      	cmp	r2, r4
 80134bc:	d101      	bne.n	80134c2 <memcmp+0xe>
 80134be:	2000      	movs	r0, #0
 80134c0:	e005      	b.n	80134ce <memcmp+0x1a>
 80134c2:	5d03      	ldrb	r3, [r0, r4]
 80134c4:	3401      	adds	r4, #1
 80134c6:	5d0d      	ldrb	r5, [r1, r4]
 80134c8:	42ab      	cmp	r3, r5
 80134ca:	d0f6      	beq.n	80134ba <memcmp+0x6>
 80134cc:	1b58      	subs	r0, r3, r5
 80134ce:	bd30      	pop	{r4, r5, pc}

080134d0 <memcpy>:
 80134d0:	2300      	movs	r3, #0
 80134d2:	b510      	push	{r4, lr}
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d100      	bne.n	80134da <memcpy+0xa>
 80134d8:	bd10      	pop	{r4, pc}
 80134da:	5ccc      	ldrb	r4, [r1, r3]
 80134dc:	54c4      	strb	r4, [r0, r3]
 80134de:	3301      	adds	r3, #1
 80134e0:	e7f8      	b.n	80134d4 <memcpy+0x4>

080134e2 <memset>:
 80134e2:	0003      	movs	r3, r0
 80134e4:	1882      	adds	r2, r0, r2
 80134e6:	4293      	cmp	r3, r2
 80134e8:	d100      	bne.n	80134ec <memset+0xa>
 80134ea:	4770      	bx	lr
 80134ec:	7019      	strb	r1, [r3, #0]
 80134ee:	3301      	adds	r3, #1
 80134f0:	e7f9      	b.n	80134e6 <memset+0x4>
	...

080134f4 <__malloc_lock>:
 80134f4:	b510      	push	{r4, lr}
 80134f6:	4802      	ldr	r0, [pc, #8]	; (8013500 <__malloc_lock+0xc>)
 80134f8:	f003 fef8 	bl	80172ec <__retarget_lock_acquire_recursive>
 80134fc:	bd10      	pop	{r4, pc}
 80134fe:	46c0      	nop			; (mov r8, r8)
 8013500:	20006f7d 	.word	0x20006f7d

08013504 <__malloc_unlock>:
 8013504:	b510      	push	{r4, lr}
 8013506:	4802      	ldr	r0, [pc, #8]	; (8013510 <__malloc_unlock+0xc>)
 8013508:	f003 fef1 	bl	80172ee <__retarget_lock_release_recursive>
 801350c:	bd10      	pop	{r4, pc}
 801350e:	46c0      	nop			; (mov r8, r8)
 8013510:	20006f7d 	.word	0x20006f7d

08013514 <rand>:
 8013514:	4b09      	ldr	r3, [pc, #36]	; (801353c <rand+0x28>)
 8013516:	b510      	push	{r4, lr}
 8013518:	681c      	ldr	r4, [r3, #0]
 801351a:	4a09      	ldr	r2, [pc, #36]	; (8013540 <rand+0x2c>)
 801351c:	34a8      	adds	r4, #168	; 0xa8
 801351e:	6820      	ldr	r0, [r4, #0]
 8013520:	6861      	ldr	r1, [r4, #4]
 8013522:	4b08      	ldr	r3, [pc, #32]	; (8013544 <rand+0x30>)
 8013524:	f7ed f82c 	bl	8000580 <__aeabi_lmul>
 8013528:	2201      	movs	r2, #1
 801352a:	2300      	movs	r3, #0
 801352c:	1880      	adds	r0, r0, r2
 801352e:	4159      	adcs	r1, r3
 8013530:	6020      	str	r0, [r4, #0]
 8013532:	6061      	str	r1, [r4, #4]
 8013534:	0048      	lsls	r0, r1, #1
 8013536:	0840      	lsrs	r0, r0, #1
 8013538:	bd10      	pop	{r4, pc}
 801353a:	46c0      	nop			; (mov r8, r8)
 801353c:	200000cc 	.word	0x200000cc
 8013540:	4c957f2d 	.word	0x4c957f2d
 8013544:	5851f42d 	.word	0x5851f42d

08013548 <realloc>:
 8013548:	b510      	push	{r4, lr}
 801354a:	4b03      	ldr	r3, [pc, #12]	; (8013558 <realloc+0x10>)
 801354c:	000a      	movs	r2, r1
 801354e:	0001      	movs	r1, r0
 8013550:	6818      	ldr	r0, [r3, #0]
 8013552:	f000 f803 	bl	801355c <_realloc_r>
 8013556:	bd10      	pop	{r4, pc}
 8013558:	200000cc 	.word	0x200000cc

0801355c <_realloc_r>:
 801355c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801355e:	b087      	sub	sp, #28
 8013560:	1e0c      	subs	r4, r1, #0
 8013562:	9002      	str	r0, [sp, #8]
 8013564:	9205      	str	r2, [sp, #20]
 8013566:	d106      	bne.n	8013576 <_realloc_r+0x1a>
 8013568:	0011      	movs	r1, r2
 801356a:	f7ff fd91 	bl	8013090 <_malloc_r>
 801356e:	0007      	movs	r7, r0
 8013570:	0038      	movs	r0, r7
 8013572:	b007      	add	sp, #28
 8013574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013576:	9802      	ldr	r0, [sp, #8]
 8013578:	f7ff ffbc 	bl	80134f4 <__malloc_lock>
 801357c:	9b05      	ldr	r3, [sp, #20]
 801357e:	330b      	adds	r3, #11
 8013580:	2b16      	cmp	r3, #22
 8013582:	d908      	bls.n	8013596 <_realloc_r+0x3a>
 8013584:	2207      	movs	r2, #7
 8013586:	4393      	bics	r3, r2
 8013588:	9301      	str	r3, [sp, #4]
 801358a:	d506      	bpl.n	801359a <_realloc_r+0x3e>
 801358c:	230c      	movs	r3, #12
 801358e:	9a02      	ldr	r2, [sp, #8]
 8013590:	2700      	movs	r7, #0
 8013592:	6013      	str	r3, [r2, #0]
 8013594:	e7ec      	b.n	8013570 <_realloc_r+0x14>
 8013596:	2310      	movs	r3, #16
 8013598:	9301      	str	r3, [sp, #4]
 801359a:	9b01      	ldr	r3, [sp, #4]
 801359c:	9a05      	ldr	r2, [sp, #20]
 801359e:	4293      	cmp	r3, r2
 80135a0:	d3f4      	bcc.n	801358c <_realloc_r+0x30>
 80135a2:	0023      	movs	r3, r4
 80135a4:	3b08      	subs	r3, #8
 80135a6:	685f      	ldr	r7, [r3, #4]
 80135a8:	9304      	str	r3, [sp, #16]
 80135aa:	003a      	movs	r2, r7
 80135ac:	2303      	movs	r3, #3
 80135ae:	439a      	bics	r2, r3
 80135b0:	9b01      	ldr	r3, [sp, #4]
 80135b2:	9203      	str	r2, [sp, #12]
 80135b4:	4293      	cmp	r3, r2
 80135b6:	dc00      	bgt.n	80135ba <_realloc_r+0x5e>
 80135b8:	e167      	b.n	801388a <_realloc_r+0x32e>
 80135ba:	9b04      	ldr	r3, [sp, #16]
 80135bc:	48b7      	ldr	r0, [pc, #732]	; (801389c <_realloc_r+0x340>)
 80135be:	189b      	adds	r3, r3, r2
 80135c0:	6882      	ldr	r2, [r0, #8]
 80135c2:	4694      	mov	ip, r2
 80135c4:	685a      	ldr	r2, [r3, #4]
 80135c6:	459c      	cmp	ip, r3
 80135c8:	d006      	beq.n	80135d8 <_realloc_r+0x7c>
 80135ca:	2501      	movs	r5, #1
 80135cc:	0011      	movs	r1, r2
 80135ce:	43a9      	bics	r1, r5
 80135d0:	1859      	adds	r1, r3, r1
 80135d2:	6849      	ldr	r1, [r1, #4]
 80135d4:	4229      	tst	r1, r5
 80135d6:	d126      	bne.n	8013626 <_realloc_r+0xca>
 80135d8:	2103      	movs	r1, #3
 80135da:	438a      	bics	r2, r1
 80135dc:	9903      	ldr	r1, [sp, #12]
 80135de:	188e      	adds	r6, r1, r2
 80135e0:	9901      	ldr	r1, [sp, #4]
 80135e2:	459c      	cmp	ip, r3
 80135e4:	d117      	bne.n	8013616 <_realloc_r+0xba>
 80135e6:	3110      	adds	r1, #16
 80135e8:	42b1      	cmp	r1, r6
 80135ea:	dc1e      	bgt.n	801362a <_realloc_r+0xce>
 80135ec:	9b01      	ldr	r3, [sp, #4]
 80135ee:	9a04      	ldr	r2, [sp, #16]
 80135f0:	469c      	mov	ip, r3
 80135f2:	1af6      	subs	r6, r6, r3
 80135f4:	2301      	movs	r3, #1
 80135f6:	4462      	add	r2, ip
 80135f8:	431e      	orrs	r6, r3
 80135fa:	6082      	str	r2, [r0, #8]
 80135fc:	6056      	str	r6, [r2, #4]
 80135fe:	0022      	movs	r2, r4
 8013600:	3a08      	subs	r2, #8
 8013602:	6851      	ldr	r1, [r2, #4]
 8013604:	9802      	ldr	r0, [sp, #8]
 8013606:	400b      	ands	r3, r1
 8013608:	4661      	mov	r1, ip
 801360a:	430b      	orrs	r3, r1
 801360c:	6053      	str	r3, [r2, #4]
 801360e:	f7ff ff79 	bl	8013504 <__malloc_unlock>
 8013612:	0027      	movs	r7, r4
 8013614:	e7ac      	b.n	8013570 <_realloc_r+0x14>
 8013616:	42b1      	cmp	r1, r6
 8013618:	dc07      	bgt.n	801362a <_realloc_r+0xce>
 801361a:	68da      	ldr	r2, [r3, #12]
 801361c:	689b      	ldr	r3, [r3, #8]
 801361e:	60da      	str	r2, [r3, #12]
 8013620:	6093      	str	r3, [r2, #8]
 8013622:	9d04      	ldr	r5, [sp, #16]
 8013624:	e07f      	b.n	8013726 <_realloc_r+0x1ca>
 8013626:	2200      	movs	r2, #0
 8013628:	0013      	movs	r3, r2
 801362a:	07f9      	lsls	r1, r7, #31
 801362c:	d500      	bpl.n	8013630 <_realloc_r+0xd4>
 801362e:	e0e2      	b.n	80137f6 <_realloc_r+0x29a>
 8013630:	0021      	movs	r1, r4
 8013632:	3908      	subs	r1, #8
 8013634:	680d      	ldr	r5, [r1, #0]
 8013636:	9904      	ldr	r1, [sp, #16]
 8013638:	1b4d      	subs	r5, r1, r5
 801363a:	2103      	movs	r1, #3
 801363c:	686f      	ldr	r7, [r5, #4]
 801363e:	438f      	bics	r7, r1
 8013640:	9903      	ldr	r1, [sp, #12]
 8013642:	187f      	adds	r7, r7, r1
 8013644:	2b00      	cmp	r3, #0
 8013646:	d100      	bne.n	801364a <_realloc_r+0xee>
 8013648:	e0a0      	b.n	801378c <_realloc_r+0x230>
 801364a:	19d6      	adds	r6, r2, r7
 801364c:	459c      	cmp	ip, r3
 801364e:	d149      	bne.n	80136e4 <_realloc_r+0x188>
 8013650:	9b01      	ldr	r3, [sp, #4]
 8013652:	3310      	adds	r3, #16
 8013654:	42b3      	cmp	r3, r6
 8013656:	dd00      	ble.n	801365a <_realloc_r+0xfe>
 8013658:	e098      	b.n	801378c <_realloc_r+0x230>
 801365a:	68aa      	ldr	r2, [r5, #8]
 801365c:	68eb      	ldr	r3, [r5, #12]
 801365e:	002f      	movs	r7, r5
 8013660:	60d3      	str	r3, [r2, #12]
 8013662:	609a      	str	r2, [r3, #8]
 8013664:	000a      	movs	r2, r1
 8013666:	3a04      	subs	r2, #4
 8013668:	3708      	adds	r7, #8
 801366a:	2a24      	cmp	r2, #36	; 0x24
 801366c:	d835      	bhi.n	80136da <_realloc_r+0x17e>
 801366e:	003b      	movs	r3, r7
 8013670:	2a13      	cmp	r2, #19
 8013672:	d908      	bls.n	8013686 <_realloc_r+0x12a>
 8013674:	6823      	ldr	r3, [r4, #0]
 8013676:	60ab      	str	r3, [r5, #8]
 8013678:	6863      	ldr	r3, [r4, #4]
 801367a:	60eb      	str	r3, [r5, #12]
 801367c:	2a1b      	cmp	r2, #27
 801367e:	d81a      	bhi.n	80136b6 <_realloc_r+0x15a>
 8013680:	002b      	movs	r3, r5
 8013682:	3408      	adds	r4, #8
 8013684:	3310      	adds	r3, #16
 8013686:	6822      	ldr	r2, [r4, #0]
 8013688:	601a      	str	r2, [r3, #0]
 801368a:	6862      	ldr	r2, [r4, #4]
 801368c:	605a      	str	r2, [r3, #4]
 801368e:	68a2      	ldr	r2, [r4, #8]
 8013690:	609a      	str	r2, [r3, #8]
 8013692:	9b01      	ldr	r3, [sp, #4]
 8013694:	18ea      	adds	r2, r5, r3
 8013696:	4b81      	ldr	r3, [pc, #516]	; (801389c <_realloc_r+0x340>)
 8013698:	609a      	str	r2, [r3, #8]
 801369a:	9b01      	ldr	r3, [sp, #4]
 801369c:	1af6      	subs	r6, r6, r3
 801369e:	2301      	movs	r3, #1
 80136a0:	431e      	orrs	r6, r3
 80136a2:	6056      	str	r6, [r2, #4]
 80136a4:	686a      	ldr	r2, [r5, #4]
 80136a6:	4013      	ands	r3, r2
 80136a8:	9a01      	ldr	r2, [sp, #4]
 80136aa:	4313      	orrs	r3, r2
 80136ac:	606b      	str	r3, [r5, #4]
 80136ae:	9802      	ldr	r0, [sp, #8]
 80136b0:	f7ff ff28 	bl	8013504 <__malloc_unlock>
 80136b4:	e75c      	b.n	8013570 <_realloc_r+0x14>
 80136b6:	68a3      	ldr	r3, [r4, #8]
 80136b8:	612b      	str	r3, [r5, #16]
 80136ba:	68e3      	ldr	r3, [r4, #12]
 80136bc:	616b      	str	r3, [r5, #20]
 80136be:	2a24      	cmp	r2, #36	; 0x24
 80136c0:	d003      	beq.n	80136ca <_realloc_r+0x16e>
 80136c2:	002b      	movs	r3, r5
 80136c4:	3410      	adds	r4, #16
 80136c6:	3318      	adds	r3, #24
 80136c8:	e7dd      	b.n	8013686 <_realloc_r+0x12a>
 80136ca:	6923      	ldr	r3, [r4, #16]
 80136cc:	61ab      	str	r3, [r5, #24]
 80136ce:	002b      	movs	r3, r5
 80136d0:	6962      	ldr	r2, [r4, #20]
 80136d2:	3320      	adds	r3, #32
 80136d4:	61ea      	str	r2, [r5, #28]
 80136d6:	3418      	adds	r4, #24
 80136d8:	e7d5      	b.n	8013686 <_realloc_r+0x12a>
 80136da:	0021      	movs	r1, r4
 80136dc:	0038      	movs	r0, r7
 80136de:	f003 fe24 	bl	801732a <memmove>
 80136e2:	e7d6      	b.n	8013692 <_realloc_r+0x136>
 80136e4:	9a01      	ldr	r2, [sp, #4]
 80136e6:	42b2      	cmp	r2, r6
 80136e8:	dc50      	bgt.n	801378c <_realloc_r+0x230>
 80136ea:	0028      	movs	r0, r5
 80136ec:	68da      	ldr	r2, [r3, #12]
 80136ee:	689b      	ldr	r3, [r3, #8]
 80136f0:	3008      	adds	r0, #8
 80136f2:	60da      	str	r2, [r3, #12]
 80136f4:	6093      	str	r3, [r2, #8]
 80136f6:	68aa      	ldr	r2, [r5, #8]
 80136f8:	68eb      	ldr	r3, [r5, #12]
 80136fa:	60d3      	str	r3, [r2, #12]
 80136fc:	609a      	str	r2, [r3, #8]
 80136fe:	9a03      	ldr	r2, [sp, #12]
 8013700:	3a04      	subs	r2, #4
 8013702:	2a24      	cmp	r2, #36	; 0x24
 8013704:	d83e      	bhi.n	8013784 <_realloc_r+0x228>
 8013706:	2a13      	cmp	r2, #19
 8013708:	d907      	bls.n	801371a <_realloc_r+0x1be>
 801370a:	6823      	ldr	r3, [r4, #0]
 801370c:	60ab      	str	r3, [r5, #8]
 801370e:	6863      	ldr	r3, [r4, #4]
 8013710:	60eb      	str	r3, [r5, #12]
 8013712:	2a1b      	cmp	r2, #27
 8013714:	d824      	bhi.n	8013760 <_realloc_r+0x204>
 8013716:	3408      	adds	r4, #8
 8013718:	3008      	adds	r0, #8
 801371a:	6823      	ldr	r3, [r4, #0]
 801371c:	6003      	str	r3, [r0, #0]
 801371e:	6863      	ldr	r3, [r4, #4]
 8013720:	6043      	str	r3, [r0, #4]
 8013722:	68a3      	ldr	r3, [r4, #8]
 8013724:	6083      	str	r3, [r0, #8]
 8013726:	9b01      	ldr	r3, [sp, #4]
 8013728:	6868      	ldr	r0, [r5, #4]
 801372a:	1af4      	subs	r4, r6, r3
 801372c:	2301      	movs	r3, #1
 801372e:	19aa      	adds	r2, r5, r6
 8013730:	4018      	ands	r0, r3
 8013732:	2c0f      	cmp	r4, #15
 8013734:	d800      	bhi.n	8013738 <_realloc_r+0x1dc>
 8013736:	e0aa      	b.n	801388e <_realloc_r+0x332>
 8013738:	9901      	ldr	r1, [sp, #4]
 801373a:	9e01      	ldr	r6, [sp, #4]
 801373c:	1869      	adds	r1, r5, r1
 801373e:	4330      	orrs	r0, r6
 8013740:	431c      	orrs	r4, r3
 8013742:	6068      	str	r0, [r5, #4]
 8013744:	604c      	str	r4, [r1, #4]
 8013746:	6850      	ldr	r0, [r2, #4]
 8013748:	3108      	adds	r1, #8
 801374a:	4303      	orrs	r3, r0
 801374c:	6053      	str	r3, [r2, #4]
 801374e:	9802      	ldr	r0, [sp, #8]
 8013750:	f003 f998 	bl	8016a84 <_free_r>
 8013754:	9802      	ldr	r0, [sp, #8]
 8013756:	3508      	adds	r5, #8
 8013758:	f7ff fed4 	bl	8013504 <__malloc_unlock>
 801375c:	002f      	movs	r7, r5
 801375e:	e707      	b.n	8013570 <_realloc_r+0x14>
 8013760:	68a3      	ldr	r3, [r4, #8]
 8013762:	612b      	str	r3, [r5, #16]
 8013764:	68e3      	ldr	r3, [r4, #12]
 8013766:	616b      	str	r3, [r5, #20]
 8013768:	2a24      	cmp	r2, #36	; 0x24
 801376a:	d003      	beq.n	8013774 <_realloc_r+0x218>
 801376c:	0028      	movs	r0, r5
 801376e:	3410      	adds	r4, #16
 8013770:	3018      	adds	r0, #24
 8013772:	e7d2      	b.n	801371a <_realloc_r+0x1be>
 8013774:	0028      	movs	r0, r5
 8013776:	6923      	ldr	r3, [r4, #16]
 8013778:	3020      	adds	r0, #32
 801377a:	61ab      	str	r3, [r5, #24]
 801377c:	6963      	ldr	r3, [r4, #20]
 801377e:	3418      	adds	r4, #24
 8013780:	61eb      	str	r3, [r5, #28]
 8013782:	e7ca      	b.n	801371a <_realloc_r+0x1be>
 8013784:	0021      	movs	r1, r4
 8013786:	f003 fdd0 	bl	801732a <memmove>
 801378a:	e7cc      	b.n	8013726 <_realloc_r+0x1ca>
 801378c:	9b01      	ldr	r3, [sp, #4]
 801378e:	42bb      	cmp	r3, r7
 8013790:	dc31      	bgt.n	80137f6 <_realloc_r+0x29a>
 8013792:	0028      	movs	r0, r5
 8013794:	68aa      	ldr	r2, [r5, #8]
 8013796:	68eb      	ldr	r3, [r5, #12]
 8013798:	3008      	adds	r0, #8
 801379a:	60d3      	str	r3, [r2, #12]
 801379c:	609a      	str	r2, [r3, #8]
 801379e:	9a03      	ldr	r2, [sp, #12]
 80137a0:	3a04      	subs	r2, #4
 80137a2:	2a24      	cmp	r2, #36	; 0x24
 80137a4:	d823      	bhi.n	80137ee <_realloc_r+0x292>
 80137a6:	2a13      	cmp	r2, #19
 80137a8:	d907      	bls.n	80137ba <_realloc_r+0x25e>
 80137aa:	6823      	ldr	r3, [r4, #0]
 80137ac:	60ab      	str	r3, [r5, #8]
 80137ae:	6863      	ldr	r3, [r4, #4]
 80137b0:	60eb      	str	r3, [r5, #12]
 80137b2:	2a1b      	cmp	r2, #27
 80137b4:	d809      	bhi.n	80137ca <_realloc_r+0x26e>
 80137b6:	3408      	adds	r4, #8
 80137b8:	3008      	adds	r0, #8
 80137ba:	6823      	ldr	r3, [r4, #0]
 80137bc:	6003      	str	r3, [r0, #0]
 80137be:	6863      	ldr	r3, [r4, #4]
 80137c0:	6043      	str	r3, [r0, #4]
 80137c2:	68a3      	ldr	r3, [r4, #8]
 80137c4:	6083      	str	r3, [r0, #8]
 80137c6:	003e      	movs	r6, r7
 80137c8:	e7ad      	b.n	8013726 <_realloc_r+0x1ca>
 80137ca:	68a3      	ldr	r3, [r4, #8]
 80137cc:	612b      	str	r3, [r5, #16]
 80137ce:	68e3      	ldr	r3, [r4, #12]
 80137d0:	616b      	str	r3, [r5, #20]
 80137d2:	2a24      	cmp	r2, #36	; 0x24
 80137d4:	d003      	beq.n	80137de <_realloc_r+0x282>
 80137d6:	0028      	movs	r0, r5
 80137d8:	3410      	adds	r4, #16
 80137da:	3018      	adds	r0, #24
 80137dc:	e7ed      	b.n	80137ba <_realloc_r+0x25e>
 80137de:	0028      	movs	r0, r5
 80137e0:	6923      	ldr	r3, [r4, #16]
 80137e2:	3020      	adds	r0, #32
 80137e4:	61ab      	str	r3, [r5, #24]
 80137e6:	6963      	ldr	r3, [r4, #20]
 80137e8:	3418      	adds	r4, #24
 80137ea:	61eb      	str	r3, [r5, #28]
 80137ec:	e7e5      	b.n	80137ba <_realloc_r+0x25e>
 80137ee:	0021      	movs	r1, r4
 80137f0:	f003 fd9b 	bl	801732a <memmove>
 80137f4:	e7e7      	b.n	80137c6 <_realloc_r+0x26a>
 80137f6:	9905      	ldr	r1, [sp, #20]
 80137f8:	9802      	ldr	r0, [sp, #8]
 80137fa:	f7ff fc49 	bl	8013090 <_malloc_r>
 80137fe:	1e07      	subs	r7, r0, #0
 8013800:	d100      	bne.n	8013804 <_realloc_r+0x2a8>
 8013802:	e754      	b.n	80136ae <_realloc_r+0x152>
 8013804:	0023      	movs	r3, r4
 8013806:	2201      	movs	r2, #1
 8013808:	3b08      	subs	r3, #8
 801380a:	685b      	ldr	r3, [r3, #4]
 801380c:	4393      	bics	r3, r2
 801380e:	9a04      	ldr	r2, [sp, #16]
 8013810:	18d3      	adds	r3, r2, r3
 8013812:	0002      	movs	r2, r0
 8013814:	3a08      	subs	r2, #8
 8013816:	4293      	cmp	r3, r2
 8013818:	d105      	bne.n	8013826 <_realloc_r+0x2ca>
 801381a:	685e      	ldr	r6, [r3, #4]
 801381c:	2303      	movs	r3, #3
 801381e:	439e      	bics	r6, r3
 8013820:	9b03      	ldr	r3, [sp, #12]
 8013822:	18f6      	adds	r6, r6, r3
 8013824:	e6fd      	b.n	8013622 <_realloc_r+0xc6>
 8013826:	9a03      	ldr	r2, [sp, #12]
 8013828:	3a04      	subs	r2, #4
 801382a:	2a24      	cmp	r2, #36	; 0x24
 801382c:	d829      	bhi.n	8013882 <_realloc_r+0x326>
 801382e:	0003      	movs	r3, r0
 8013830:	0021      	movs	r1, r4
 8013832:	2a13      	cmp	r2, #19
 8013834:	d908      	bls.n	8013848 <_realloc_r+0x2ec>
 8013836:	6823      	ldr	r3, [r4, #0]
 8013838:	6003      	str	r3, [r0, #0]
 801383a:	6863      	ldr	r3, [r4, #4]
 801383c:	6043      	str	r3, [r0, #4]
 801383e:	2a1b      	cmp	r2, #27
 8013840:	d80d      	bhi.n	801385e <_realloc_r+0x302>
 8013842:	0003      	movs	r3, r0
 8013844:	3108      	adds	r1, #8
 8013846:	3308      	adds	r3, #8
 8013848:	680a      	ldr	r2, [r1, #0]
 801384a:	601a      	str	r2, [r3, #0]
 801384c:	684a      	ldr	r2, [r1, #4]
 801384e:	605a      	str	r2, [r3, #4]
 8013850:	688a      	ldr	r2, [r1, #8]
 8013852:	609a      	str	r2, [r3, #8]
 8013854:	0021      	movs	r1, r4
 8013856:	9802      	ldr	r0, [sp, #8]
 8013858:	f003 f914 	bl	8016a84 <_free_r>
 801385c:	e727      	b.n	80136ae <_realloc_r+0x152>
 801385e:	68a3      	ldr	r3, [r4, #8]
 8013860:	6083      	str	r3, [r0, #8]
 8013862:	68e3      	ldr	r3, [r4, #12]
 8013864:	60c3      	str	r3, [r0, #12]
 8013866:	2a24      	cmp	r2, #36	; 0x24
 8013868:	d003      	beq.n	8013872 <_realloc_r+0x316>
 801386a:	0003      	movs	r3, r0
 801386c:	3110      	adds	r1, #16
 801386e:	3310      	adds	r3, #16
 8013870:	e7ea      	b.n	8013848 <_realloc_r+0x2ec>
 8013872:	6923      	ldr	r3, [r4, #16]
 8013874:	3118      	adds	r1, #24
 8013876:	6103      	str	r3, [r0, #16]
 8013878:	0003      	movs	r3, r0
 801387a:	6962      	ldr	r2, [r4, #20]
 801387c:	3318      	adds	r3, #24
 801387e:	6142      	str	r2, [r0, #20]
 8013880:	e7e2      	b.n	8013848 <_realloc_r+0x2ec>
 8013882:	0021      	movs	r1, r4
 8013884:	f003 fd51 	bl	801732a <memmove>
 8013888:	e7e4      	b.n	8013854 <_realloc_r+0x2f8>
 801388a:	9e03      	ldr	r6, [sp, #12]
 801388c:	e6c9      	b.n	8013622 <_realloc_r+0xc6>
 801388e:	4306      	orrs	r6, r0
 8013890:	606e      	str	r6, [r5, #4]
 8013892:	6851      	ldr	r1, [r2, #4]
 8013894:	430b      	orrs	r3, r1
 8013896:	6053      	str	r3, [r2, #4]
 8013898:	e75c      	b.n	8013754 <_realloc_r+0x1f8>
 801389a:	46c0      	nop			; (mov r8, r8)
 801389c:	200004f8 	.word	0x200004f8

080138a0 <_sbrk_r>:
 80138a0:	2300      	movs	r3, #0
 80138a2:	b570      	push	{r4, r5, r6, lr}
 80138a4:	4d06      	ldr	r5, [pc, #24]	; (80138c0 <_sbrk_r+0x20>)
 80138a6:	0004      	movs	r4, r0
 80138a8:	0008      	movs	r0, r1
 80138aa:	602b      	str	r3, [r5, #0]
 80138ac:	f005 fed2 	bl	8019654 <_sbrk>
 80138b0:	1c43      	adds	r3, r0, #1
 80138b2:	d103      	bne.n	80138bc <_sbrk_r+0x1c>
 80138b4:	682b      	ldr	r3, [r5, #0]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d000      	beq.n	80138bc <_sbrk_r+0x1c>
 80138ba:	6023      	str	r3, [r4, #0]
 80138bc:	bd70      	pop	{r4, r5, r6, pc}
 80138be:	46c0      	nop			; (mov r8, r8)
 80138c0:	20006f80 	.word	0x20006f80

080138c4 <sprintf>:
 80138c4:	b40e      	push	{r1, r2, r3}
 80138c6:	b500      	push	{lr}
 80138c8:	490b      	ldr	r1, [pc, #44]	; (80138f8 <sprintf+0x34>)
 80138ca:	b09c      	sub	sp, #112	; 0x70
 80138cc:	ab1d      	add	r3, sp, #116	; 0x74
 80138ce:	9002      	str	r0, [sp, #8]
 80138d0:	9006      	str	r0, [sp, #24]
 80138d2:	9107      	str	r1, [sp, #28]
 80138d4:	9104      	str	r1, [sp, #16]
 80138d6:	4809      	ldr	r0, [pc, #36]	; (80138fc <sprintf+0x38>)
 80138d8:	4909      	ldr	r1, [pc, #36]	; (8013900 <sprintf+0x3c>)
 80138da:	cb04      	ldmia	r3!, {r2}
 80138dc:	9105      	str	r1, [sp, #20]
 80138de:	6800      	ldr	r0, [r0, #0]
 80138e0:	a902      	add	r1, sp, #8
 80138e2:	9301      	str	r3, [sp, #4]
 80138e4:	f000 ff66 	bl	80147b4 <_svfprintf_r>
 80138e8:	2300      	movs	r3, #0
 80138ea:	9a02      	ldr	r2, [sp, #8]
 80138ec:	7013      	strb	r3, [r2, #0]
 80138ee:	b01c      	add	sp, #112	; 0x70
 80138f0:	bc08      	pop	{r3}
 80138f2:	b003      	add	sp, #12
 80138f4:	4718      	bx	r3
 80138f6:	46c0      	nop			; (mov r8, r8)
 80138f8:	7fffffff 	.word	0x7fffffff
 80138fc:	200000cc 	.word	0x200000cc
 8013900:	ffff0208 	.word	0xffff0208

08013904 <strcat>:
 8013904:	0002      	movs	r2, r0
 8013906:	b510      	push	{r4, lr}
 8013908:	7813      	ldrb	r3, [r2, #0]
 801390a:	0014      	movs	r4, r2
 801390c:	3201      	adds	r2, #1
 801390e:	2b00      	cmp	r3, #0
 8013910:	d1fa      	bne.n	8013908 <strcat+0x4>
 8013912:	5cca      	ldrb	r2, [r1, r3]
 8013914:	54e2      	strb	r2, [r4, r3]
 8013916:	3301      	adds	r3, #1
 8013918:	2a00      	cmp	r2, #0
 801391a:	d1fa      	bne.n	8013912 <strcat+0xe>
 801391c:	bd10      	pop	{r4, pc}

0801391e <strchr>:
 801391e:	b2c9      	uxtb	r1, r1
 8013920:	7803      	ldrb	r3, [r0, #0]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d004      	beq.n	8013930 <strchr+0x12>
 8013926:	428b      	cmp	r3, r1
 8013928:	d100      	bne.n	801392c <strchr+0xe>
 801392a:	4770      	bx	lr
 801392c:	3001      	adds	r0, #1
 801392e:	e7f7      	b.n	8013920 <strchr+0x2>
 8013930:	424b      	negs	r3, r1
 8013932:	4159      	adcs	r1, r3
 8013934:	4249      	negs	r1, r1
 8013936:	4008      	ands	r0, r1
 8013938:	e7f7      	b.n	801392a <strchr+0xc>

0801393a <strcpy>:
 801393a:	0003      	movs	r3, r0
 801393c:	780a      	ldrb	r2, [r1, #0]
 801393e:	3101      	adds	r1, #1
 8013940:	701a      	strb	r2, [r3, #0]
 8013942:	3301      	adds	r3, #1
 8013944:	2a00      	cmp	r2, #0
 8013946:	d1f9      	bne.n	801393c <strcpy+0x2>
 8013948:	4770      	bx	lr

0801394a <strncmp>:
 801394a:	b530      	push	{r4, r5, lr}
 801394c:	0005      	movs	r5, r0
 801394e:	1e10      	subs	r0, r2, #0
 8013950:	d008      	beq.n	8013964 <strncmp+0x1a>
 8013952:	2400      	movs	r4, #0
 8013954:	3a01      	subs	r2, #1
 8013956:	5d2b      	ldrb	r3, [r5, r4]
 8013958:	5d08      	ldrb	r0, [r1, r4]
 801395a:	4283      	cmp	r3, r0
 801395c:	d101      	bne.n	8013962 <strncmp+0x18>
 801395e:	4294      	cmp	r4, r2
 8013960:	d101      	bne.n	8013966 <strncmp+0x1c>
 8013962:	1a18      	subs	r0, r3, r0
 8013964:	bd30      	pop	{r4, r5, pc}
 8013966:	3401      	adds	r4, #1
 8013968:	2b00      	cmp	r3, #0
 801396a:	d1f4      	bne.n	8013956 <strncmp+0xc>
 801396c:	e7f9      	b.n	8013962 <strncmp+0x18>

0801396e <strncpy>:
 801396e:	0003      	movs	r3, r0
 8013970:	b530      	push	{r4, r5, lr}
 8013972:	001d      	movs	r5, r3
 8013974:	2a00      	cmp	r2, #0
 8013976:	d006      	beq.n	8013986 <strncpy+0x18>
 8013978:	780c      	ldrb	r4, [r1, #0]
 801397a:	3a01      	subs	r2, #1
 801397c:	3301      	adds	r3, #1
 801397e:	702c      	strb	r4, [r5, #0]
 8013980:	3101      	adds	r1, #1
 8013982:	2c00      	cmp	r4, #0
 8013984:	d1f5      	bne.n	8013972 <strncpy+0x4>
 8013986:	2100      	movs	r1, #0
 8013988:	189a      	adds	r2, r3, r2
 801398a:	4293      	cmp	r3, r2
 801398c:	d100      	bne.n	8013990 <strncpy+0x22>
 801398e:	bd30      	pop	{r4, r5, pc}
 8013990:	7019      	strb	r1, [r3, #0]
 8013992:	3301      	adds	r3, #1
 8013994:	e7f9      	b.n	801398a <strncpy+0x1c>
	...

08013998 <sulp>:
 8013998:	b570      	push	{r4, r5, r6, lr}
 801399a:	0016      	movs	r6, r2
 801399c:	000d      	movs	r5, r1
 801399e:	f004 f80b 	bl	80179b8 <__ulp>
 80139a2:	2e00      	cmp	r6, #0
 80139a4:	d00d      	beq.n	80139c2 <sulp+0x2a>
 80139a6:	236b      	movs	r3, #107	; 0x6b
 80139a8:	006a      	lsls	r2, r5, #1
 80139aa:	0d52      	lsrs	r2, r2, #21
 80139ac:	1a9b      	subs	r3, r3, r2
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	dd07      	ble.n	80139c2 <sulp+0x2a>
 80139b2:	2400      	movs	r4, #0
 80139b4:	4a03      	ldr	r2, [pc, #12]	; (80139c4 <sulp+0x2c>)
 80139b6:	051b      	lsls	r3, r3, #20
 80139b8:	189d      	adds	r5, r3, r2
 80139ba:	002b      	movs	r3, r5
 80139bc:	0022      	movs	r2, r4
 80139be:	f7ee fa85 	bl	8001ecc <__aeabi_dmul>
 80139c2:	bd70      	pop	{r4, r5, r6, pc}
 80139c4:	3ff00000 	.word	0x3ff00000

080139c8 <_strtod_l>:
 80139c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139ca:	001d      	movs	r5, r3
 80139cc:	2300      	movs	r3, #0
 80139ce:	b0a5      	sub	sp, #148	; 0x94
 80139d0:	9320      	str	r3, [sp, #128]	; 0x80
 80139d2:	4bac      	ldr	r3, [pc, #688]	; (8013c84 <_strtod_l+0x2bc>)
 80139d4:	9005      	str	r0, [sp, #20]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	9108      	str	r1, [sp, #32]
 80139da:	0018      	movs	r0, r3
 80139dc:	9307      	str	r3, [sp, #28]
 80139de:	921b      	str	r2, [sp, #108]	; 0x6c
 80139e0:	f7ec fb9a 	bl	8000118 <strlen>
 80139e4:	2600      	movs	r6, #0
 80139e6:	0004      	movs	r4, r0
 80139e8:	2700      	movs	r7, #0
 80139ea:	9b08      	ldr	r3, [sp, #32]
 80139ec:	931f      	str	r3, [sp, #124]	; 0x7c
 80139ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80139f0:	7813      	ldrb	r3, [r2, #0]
 80139f2:	2b2b      	cmp	r3, #43	; 0x2b
 80139f4:	d058      	beq.n	8013aa8 <_strtod_l+0xe0>
 80139f6:	d844      	bhi.n	8013a82 <_strtod_l+0xba>
 80139f8:	2b0d      	cmp	r3, #13
 80139fa:	d83d      	bhi.n	8013a78 <_strtod_l+0xb0>
 80139fc:	2b08      	cmp	r3, #8
 80139fe:	d83d      	bhi.n	8013a7c <_strtod_l+0xb4>
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d047      	beq.n	8013a94 <_strtod_l+0xcc>
 8013a04:	2300      	movs	r3, #0
 8013a06:	930e      	str	r3, [sp, #56]	; 0x38
 8013a08:	2200      	movs	r2, #0
 8013a0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013a0c:	920a      	str	r2, [sp, #40]	; 0x28
 8013a0e:	9306      	str	r3, [sp, #24]
 8013a10:	781b      	ldrb	r3, [r3, #0]
 8013a12:	2b30      	cmp	r3, #48	; 0x30
 8013a14:	d000      	beq.n	8013a18 <_strtod_l+0x50>
 8013a16:	e07f      	b.n	8013b18 <_strtod_l+0x150>
 8013a18:	9b06      	ldr	r3, [sp, #24]
 8013a1a:	3220      	adds	r2, #32
 8013a1c:	785b      	ldrb	r3, [r3, #1]
 8013a1e:	4393      	bics	r3, r2
 8013a20:	2b58      	cmp	r3, #88	; 0x58
 8013a22:	d000      	beq.n	8013a26 <_strtod_l+0x5e>
 8013a24:	e06e      	b.n	8013b04 <_strtod_l+0x13c>
 8013a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a28:	9502      	str	r5, [sp, #8]
 8013a2a:	9301      	str	r3, [sp, #4]
 8013a2c:	ab20      	add	r3, sp, #128	; 0x80
 8013a2e:	9300      	str	r3, [sp, #0]
 8013a30:	4a95      	ldr	r2, [pc, #596]	; (8013c88 <_strtod_l+0x2c0>)
 8013a32:	ab21      	add	r3, sp, #132	; 0x84
 8013a34:	9805      	ldr	r0, [sp, #20]
 8013a36:	a91f      	add	r1, sp, #124	; 0x7c
 8013a38:	f003 f940 	bl	8016cbc <__gethex>
 8013a3c:	2307      	movs	r3, #7
 8013a3e:	0005      	movs	r5, r0
 8013a40:	0004      	movs	r4, r0
 8013a42:	401d      	ands	r5, r3
 8013a44:	4218      	tst	r0, r3
 8013a46:	d006      	beq.n	8013a56 <_strtod_l+0x8e>
 8013a48:	2d06      	cmp	r5, #6
 8013a4a:	d12f      	bne.n	8013aac <_strtod_l+0xe4>
 8013a4c:	9b06      	ldr	r3, [sp, #24]
 8013a4e:	3301      	adds	r3, #1
 8013a50:	931f      	str	r3, [sp, #124]	; 0x7c
 8013a52:	2300      	movs	r3, #0
 8013a54:	930e      	str	r3, [sp, #56]	; 0x38
 8013a56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d002      	beq.n	8013a62 <_strtod_l+0x9a>
 8013a5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013a60:	601a      	str	r2, [r3, #0]
 8013a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d01c      	beq.n	8013aa2 <_strtod_l+0xda>
 8013a68:	2380      	movs	r3, #128	; 0x80
 8013a6a:	0032      	movs	r2, r6
 8013a6c:	061b      	lsls	r3, r3, #24
 8013a6e:	18fb      	adds	r3, r7, r3
 8013a70:	0010      	movs	r0, r2
 8013a72:	0019      	movs	r1, r3
 8013a74:	b025      	add	sp, #148	; 0x94
 8013a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a78:	2b20      	cmp	r3, #32
 8013a7a:	d1c3      	bne.n	8013a04 <_strtod_l+0x3c>
 8013a7c:	3201      	adds	r2, #1
 8013a7e:	921f      	str	r2, [sp, #124]	; 0x7c
 8013a80:	e7b5      	b.n	80139ee <_strtod_l+0x26>
 8013a82:	2b2d      	cmp	r3, #45	; 0x2d
 8013a84:	d1be      	bne.n	8013a04 <_strtod_l+0x3c>
 8013a86:	3b2c      	subs	r3, #44	; 0x2c
 8013a88:	930e      	str	r3, [sp, #56]	; 0x38
 8013a8a:	1c53      	adds	r3, r2, #1
 8013a8c:	931f      	str	r3, [sp, #124]	; 0x7c
 8013a8e:	7853      	ldrb	r3, [r2, #1]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d1b9      	bne.n	8013a08 <_strtod_l+0x40>
 8013a94:	9b08      	ldr	r3, [sp, #32]
 8013a96:	931f      	str	r3, [sp, #124]	; 0x7c
 8013a98:	2300      	movs	r3, #0
 8013a9a:	930e      	str	r3, [sp, #56]	; 0x38
 8013a9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d1dc      	bne.n	8013a5c <_strtod_l+0x94>
 8013aa2:	0032      	movs	r2, r6
 8013aa4:	003b      	movs	r3, r7
 8013aa6:	e7e3      	b.n	8013a70 <_strtod_l+0xa8>
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	e7ed      	b.n	8013a88 <_strtod_l+0xc0>
 8013aac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013aae:	2a00      	cmp	r2, #0
 8013ab0:	d007      	beq.n	8013ac2 <_strtod_l+0xfa>
 8013ab2:	2135      	movs	r1, #53	; 0x35
 8013ab4:	a822      	add	r0, sp, #136	; 0x88
 8013ab6:	f004 f880 	bl	8017bba <__copybits>
 8013aba:	9920      	ldr	r1, [sp, #128]	; 0x80
 8013abc:	9805      	ldr	r0, [sp, #20]
 8013abe:	f003 fc6f 	bl	80173a0 <_Bfree>
 8013ac2:	1e68      	subs	r0, r5, #1
 8013ac4:	2804      	cmp	r0, #4
 8013ac6:	d806      	bhi.n	8013ad6 <_strtod_l+0x10e>
 8013ac8:	f7ec fb2e 	bl	8000128 <__gnu_thumb1_case_uqi>
 8013acc:	1816030b 	.word	0x1816030b
 8013ad0:	0b          	.byte	0x0b
 8013ad1:	00          	.byte	0x00
 8013ad2:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8013ad4:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8013ad6:	0723      	lsls	r3, r4, #28
 8013ad8:	d5bd      	bpl.n	8013a56 <_strtod_l+0x8e>
 8013ada:	2380      	movs	r3, #128	; 0x80
 8013adc:	061b      	lsls	r3, r3, #24
 8013ade:	431f      	orrs	r7, r3
 8013ae0:	e7b9      	b.n	8013a56 <_strtod_l+0x8e>
 8013ae2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013ae4:	4a69      	ldr	r2, [pc, #420]	; (8013c8c <_strtod_l+0x2c4>)
 8013ae6:	496a      	ldr	r1, [pc, #424]	; (8013c90 <_strtod_l+0x2c8>)
 8013ae8:	401a      	ands	r2, r3
 8013aea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013aec:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8013aee:	185b      	adds	r3, r3, r1
 8013af0:	051b      	lsls	r3, r3, #20
 8013af2:	431a      	orrs	r2, r3
 8013af4:	0017      	movs	r7, r2
 8013af6:	e7ee      	b.n	8013ad6 <_strtod_l+0x10e>
 8013af8:	4f66      	ldr	r7, [pc, #408]	; (8013c94 <_strtod_l+0x2cc>)
 8013afa:	e7ec      	b.n	8013ad6 <_strtod_l+0x10e>
 8013afc:	2601      	movs	r6, #1
 8013afe:	4f66      	ldr	r7, [pc, #408]	; (8013c98 <_strtod_l+0x2d0>)
 8013b00:	4276      	negs	r6, r6
 8013b02:	e7e8      	b.n	8013ad6 <_strtod_l+0x10e>
 8013b04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013b06:	1c5a      	adds	r2, r3, #1
 8013b08:	921f      	str	r2, [sp, #124]	; 0x7c
 8013b0a:	785b      	ldrb	r3, [r3, #1]
 8013b0c:	2b30      	cmp	r3, #48	; 0x30
 8013b0e:	d0f9      	beq.n	8013b04 <_strtod_l+0x13c>
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d0a0      	beq.n	8013a56 <_strtod_l+0x8e>
 8013b14:	2301      	movs	r3, #1
 8013b16:	930a      	str	r3, [sp, #40]	; 0x28
 8013b18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013b1a:	220a      	movs	r2, #10
 8013b1c:	9310      	str	r3, [sp, #64]	; 0x40
 8013b1e:	2300      	movs	r3, #0
 8013b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8013b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b24:	9309      	str	r3, [sp, #36]	; 0x24
 8013b26:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8013b28:	7805      	ldrb	r5, [r0, #0]
 8013b2a:	002b      	movs	r3, r5
 8013b2c:	3b30      	subs	r3, #48	; 0x30
 8013b2e:	b2d9      	uxtb	r1, r3
 8013b30:	2909      	cmp	r1, #9
 8013b32:	d927      	bls.n	8013b84 <_strtod_l+0x1bc>
 8013b34:	0022      	movs	r2, r4
 8013b36:	9907      	ldr	r1, [sp, #28]
 8013b38:	f7ff ff07 	bl	801394a <strncmp>
 8013b3c:	2800      	cmp	r0, #0
 8013b3e:	d033      	beq.n	8013ba8 <_strtod_l+0x1e0>
 8013b40:	2000      	movs	r0, #0
 8013b42:	002b      	movs	r3, r5
 8013b44:	4684      	mov	ip, r0
 8013b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b48:	900c      	str	r0, [sp, #48]	; 0x30
 8013b4a:	9206      	str	r2, [sp, #24]
 8013b4c:	2220      	movs	r2, #32
 8013b4e:	0019      	movs	r1, r3
 8013b50:	4391      	bics	r1, r2
 8013b52:	000a      	movs	r2, r1
 8013b54:	2100      	movs	r1, #0
 8013b56:	9107      	str	r1, [sp, #28]
 8013b58:	2a45      	cmp	r2, #69	; 0x45
 8013b5a:	d000      	beq.n	8013b5e <_strtod_l+0x196>
 8013b5c:	e0c5      	b.n	8013cea <_strtod_l+0x322>
 8013b5e:	9b06      	ldr	r3, [sp, #24]
 8013b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013b62:	4303      	orrs	r3, r0
 8013b64:	4313      	orrs	r3, r2
 8013b66:	428b      	cmp	r3, r1
 8013b68:	d094      	beq.n	8013a94 <_strtod_l+0xcc>
 8013b6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013b6c:	9308      	str	r3, [sp, #32]
 8013b6e:	3301      	adds	r3, #1
 8013b70:	931f      	str	r3, [sp, #124]	; 0x7c
 8013b72:	9b08      	ldr	r3, [sp, #32]
 8013b74:	785b      	ldrb	r3, [r3, #1]
 8013b76:	2b2b      	cmp	r3, #43	; 0x2b
 8013b78:	d076      	beq.n	8013c68 <_strtod_l+0x2a0>
 8013b7a:	000c      	movs	r4, r1
 8013b7c:	2b2d      	cmp	r3, #45	; 0x2d
 8013b7e:	d179      	bne.n	8013c74 <_strtod_l+0x2ac>
 8013b80:	2401      	movs	r4, #1
 8013b82:	e072      	b.n	8013c6a <_strtod_l+0x2a2>
 8013b84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013b86:	2908      	cmp	r1, #8
 8013b88:	dc09      	bgt.n	8013b9e <_strtod_l+0x1d6>
 8013b8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013b8c:	4351      	muls	r1, r2
 8013b8e:	185b      	adds	r3, r3, r1
 8013b90:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b94:	3001      	adds	r0, #1
 8013b96:	3301      	adds	r3, #1
 8013b98:	9309      	str	r3, [sp, #36]	; 0x24
 8013b9a:	901f      	str	r0, [sp, #124]	; 0x7c
 8013b9c:	e7c3      	b.n	8013b26 <_strtod_l+0x15e>
 8013b9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013ba0:	4351      	muls	r1, r2
 8013ba2:	185b      	adds	r3, r3, r1
 8013ba4:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ba6:	e7f4      	b.n	8013b92 <_strtod_l+0x1ca>
 8013ba8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013bac:	191c      	adds	r4, r3, r4
 8013bae:	941f      	str	r4, [sp, #124]	; 0x7c
 8013bb0:	7823      	ldrb	r3, [r4, #0]
 8013bb2:	2a00      	cmp	r2, #0
 8013bb4:	d039      	beq.n	8013c2a <_strtod_l+0x262>
 8013bb6:	900c      	str	r0, [sp, #48]	; 0x30
 8013bb8:	9206      	str	r2, [sp, #24]
 8013bba:	001a      	movs	r2, r3
 8013bbc:	3a30      	subs	r2, #48	; 0x30
 8013bbe:	2a09      	cmp	r2, #9
 8013bc0:	d912      	bls.n	8013be8 <_strtod_l+0x220>
 8013bc2:	2201      	movs	r2, #1
 8013bc4:	4694      	mov	ip, r2
 8013bc6:	e7c1      	b.n	8013b4c <_strtod_l+0x184>
 8013bc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013bca:	3001      	adds	r0, #1
 8013bcc:	1c5a      	adds	r2, r3, #1
 8013bce:	921f      	str	r2, [sp, #124]	; 0x7c
 8013bd0:	785b      	ldrb	r3, [r3, #1]
 8013bd2:	2b30      	cmp	r3, #48	; 0x30
 8013bd4:	d0f8      	beq.n	8013bc8 <_strtod_l+0x200>
 8013bd6:	001a      	movs	r2, r3
 8013bd8:	3a31      	subs	r2, #49	; 0x31
 8013bda:	2a08      	cmp	r2, #8
 8013bdc:	d83f      	bhi.n	8013c5e <_strtod_l+0x296>
 8013bde:	900c      	str	r0, [sp, #48]	; 0x30
 8013be0:	2000      	movs	r0, #0
 8013be2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013be4:	9006      	str	r0, [sp, #24]
 8013be6:	9210      	str	r2, [sp, #64]	; 0x40
 8013be8:	001a      	movs	r2, r3
 8013bea:	1c41      	adds	r1, r0, #1
 8013bec:	3a30      	subs	r2, #48	; 0x30
 8013bee:	2b30      	cmp	r3, #48	; 0x30
 8013bf0:	d015      	beq.n	8013c1e <_strtod_l+0x256>
 8013bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013bf4:	185b      	adds	r3, r3, r1
 8013bf6:	210a      	movs	r1, #10
 8013bf8:	930c      	str	r3, [sp, #48]	; 0x30
 8013bfa:	9b06      	ldr	r3, [sp, #24]
 8013bfc:	18c4      	adds	r4, r0, r3
 8013bfe:	42a3      	cmp	r3, r4
 8013c00:	d115      	bne.n	8013c2e <_strtod_l+0x266>
 8013c02:	9906      	ldr	r1, [sp, #24]
 8013c04:	9b06      	ldr	r3, [sp, #24]
 8013c06:	3101      	adds	r1, #1
 8013c08:	1809      	adds	r1, r1, r0
 8013c0a:	181b      	adds	r3, r3, r0
 8013c0c:	9106      	str	r1, [sp, #24]
 8013c0e:	2b08      	cmp	r3, #8
 8013c10:	dc1b      	bgt.n	8013c4a <_strtod_l+0x282>
 8013c12:	230a      	movs	r3, #10
 8013c14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013c16:	434b      	muls	r3, r1
 8013c18:	2100      	movs	r1, #0
 8013c1a:	18d3      	adds	r3, r2, r3
 8013c1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013c20:	0008      	movs	r0, r1
 8013c22:	1c5a      	adds	r2, r3, #1
 8013c24:	921f      	str	r2, [sp, #124]	; 0x7c
 8013c26:	785b      	ldrb	r3, [r3, #1]
 8013c28:	e7c7      	b.n	8013bba <_strtod_l+0x1f2>
 8013c2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c2c:	e7d1      	b.n	8013bd2 <_strtod_l+0x20a>
 8013c2e:	2b08      	cmp	r3, #8
 8013c30:	dc04      	bgt.n	8013c3c <_strtod_l+0x274>
 8013c32:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013c34:	434d      	muls	r5, r1
 8013c36:	950b      	str	r5, [sp, #44]	; 0x2c
 8013c38:	3301      	adds	r3, #1
 8013c3a:	e7e0      	b.n	8013bfe <_strtod_l+0x236>
 8013c3c:	1c5d      	adds	r5, r3, #1
 8013c3e:	2d10      	cmp	r5, #16
 8013c40:	dcfa      	bgt.n	8013c38 <_strtod_l+0x270>
 8013c42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013c44:	434d      	muls	r5, r1
 8013c46:	950f      	str	r5, [sp, #60]	; 0x3c
 8013c48:	e7f6      	b.n	8013c38 <_strtod_l+0x270>
 8013c4a:	9b06      	ldr	r3, [sp, #24]
 8013c4c:	2100      	movs	r1, #0
 8013c4e:	2b10      	cmp	r3, #16
 8013c50:	dce5      	bgt.n	8013c1e <_strtod_l+0x256>
 8013c52:	230a      	movs	r3, #10
 8013c54:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013c56:	4343      	muls	r3, r0
 8013c58:	18d3      	adds	r3, r2, r3
 8013c5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8013c5c:	e7df      	b.n	8013c1e <_strtod_l+0x256>
 8013c5e:	2200      	movs	r2, #0
 8013c60:	920c      	str	r2, [sp, #48]	; 0x30
 8013c62:	9206      	str	r2, [sp, #24]
 8013c64:	3201      	adds	r2, #1
 8013c66:	e7ad      	b.n	8013bc4 <_strtod_l+0x1fc>
 8013c68:	2400      	movs	r4, #0
 8013c6a:	9b08      	ldr	r3, [sp, #32]
 8013c6c:	3302      	adds	r3, #2
 8013c6e:	931f      	str	r3, [sp, #124]	; 0x7c
 8013c70:	9b08      	ldr	r3, [sp, #32]
 8013c72:	789b      	ldrb	r3, [r3, #2]
 8013c74:	001a      	movs	r2, r3
 8013c76:	3a30      	subs	r2, #48	; 0x30
 8013c78:	2a09      	cmp	r2, #9
 8013c7a:	d913      	bls.n	8013ca4 <_strtod_l+0x2dc>
 8013c7c:	9a08      	ldr	r2, [sp, #32]
 8013c7e:	921f      	str	r2, [sp, #124]	; 0x7c
 8013c80:	2200      	movs	r2, #0
 8013c82:	e031      	b.n	8013ce8 <_strtod_l+0x320>
 8013c84:	0801c8b4 	.word	0x0801c8b4
 8013c88:	0801c72c 	.word	0x0801c72c
 8013c8c:	ffefffff 	.word	0xffefffff
 8013c90:	00000433 	.word	0x00000433
 8013c94:	7ff00000 	.word	0x7ff00000
 8013c98:	7fffffff 	.word	0x7fffffff
 8013c9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013c9e:	1c5a      	adds	r2, r3, #1
 8013ca0:	921f      	str	r2, [sp, #124]	; 0x7c
 8013ca2:	785b      	ldrb	r3, [r3, #1]
 8013ca4:	2b30      	cmp	r3, #48	; 0x30
 8013ca6:	d0f9      	beq.n	8013c9c <_strtod_l+0x2d4>
 8013ca8:	2200      	movs	r2, #0
 8013caa:	9207      	str	r2, [sp, #28]
 8013cac:	001a      	movs	r2, r3
 8013cae:	3a31      	subs	r2, #49	; 0x31
 8013cb0:	2a08      	cmp	r2, #8
 8013cb2:	d81a      	bhi.n	8013cea <_strtod_l+0x322>
 8013cb4:	3b30      	subs	r3, #48	; 0x30
 8013cb6:	001a      	movs	r2, r3
 8013cb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013cba:	9307      	str	r3, [sp, #28]
 8013cbc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013cbe:	1c59      	adds	r1, r3, #1
 8013cc0:	911f      	str	r1, [sp, #124]	; 0x7c
 8013cc2:	785b      	ldrb	r3, [r3, #1]
 8013cc4:	001d      	movs	r5, r3
 8013cc6:	3d30      	subs	r5, #48	; 0x30
 8013cc8:	2d09      	cmp	r5, #9
 8013cca:	d939      	bls.n	8013d40 <_strtod_l+0x378>
 8013ccc:	9d07      	ldr	r5, [sp, #28]
 8013cce:	1b49      	subs	r1, r1, r5
 8013cd0:	4db0      	ldr	r5, [pc, #704]	; (8013f94 <_strtod_l+0x5cc>)
 8013cd2:	9507      	str	r5, [sp, #28]
 8013cd4:	2908      	cmp	r1, #8
 8013cd6:	dc03      	bgt.n	8013ce0 <_strtod_l+0x318>
 8013cd8:	9207      	str	r2, [sp, #28]
 8013cda:	42aa      	cmp	r2, r5
 8013cdc:	dd00      	ble.n	8013ce0 <_strtod_l+0x318>
 8013cde:	9507      	str	r5, [sp, #28]
 8013ce0:	2c00      	cmp	r4, #0
 8013ce2:	d002      	beq.n	8013cea <_strtod_l+0x322>
 8013ce4:	9a07      	ldr	r2, [sp, #28]
 8013ce6:	4252      	negs	r2, r2
 8013ce8:	9207      	str	r2, [sp, #28]
 8013cea:	9a06      	ldr	r2, [sp, #24]
 8013cec:	2a00      	cmp	r2, #0
 8013cee:	d14b      	bne.n	8013d88 <_strtod_l+0x3c0>
 8013cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013cf2:	4310      	orrs	r0, r2
 8013cf4:	d000      	beq.n	8013cf8 <_strtod_l+0x330>
 8013cf6:	e6ae      	b.n	8013a56 <_strtod_l+0x8e>
 8013cf8:	4662      	mov	r2, ip
 8013cfa:	2a00      	cmp	r2, #0
 8013cfc:	d000      	beq.n	8013d00 <_strtod_l+0x338>
 8013cfe:	e6c9      	b.n	8013a94 <_strtod_l+0xcc>
 8013d00:	2b69      	cmp	r3, #105	; 0x69
 8013d02:	d025      	beq.n	8013d50 <_strtod_l+0x388>
 8013d04:	dc21      	bgt.n	8013d4a <_strtod_l+0x382>
 8013d06:	2b49      	cmp	r3, #73	; 0x49
 8013d08:	d022      	beq.n	8013d50 <_strtod_l+0x388>
 8013d0a:	2b4e      	cmp	r3, #78	; 0x4e
 8013d0c:	d000      	beq.n	8013d10 <_strtod_l+0x348>
 8013d0e:	e6c1      	b.n	8013a94 <_strtod_l+0xcc>
 8013d10:	49a1      	ldr	r1, [pc, #644]	; (8013f98 <_strtod_l+0x5d0>)
 8013d12:	a81f      	add	r0, sp, #124	; 0x7c
 8013d14:	f003 fa20 	bl	8017158 <__match>
 8013d18:	2800      	cmp	r0, #0
 8013d1a:	d100      	bne.n	8013d1e <_strtod_l+0x356>
 8013d1c:	e6ba      	b.n	8013a94 <_strtod_l+0xcc>
 8013d1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013d20:	781b      	ldrb	r3, [r3, #0]
 8013d22:	2b28      	cmp	r3, #40	; 0x28
 8013d24:	d12a      	bne.n	8013d7c <_strtod_l+0x3b4>
 8013d26:	499d      	ldr	r1, [pc, #628]	; (8013f9c <_strtod_l+0x5d4>)
 8013d28:	aa22      	add	r2, sp, #136	; 0x88
 8013d2a:	a81f      	add	r0, sp, #124	; 0x7c
 8013d2c:	f003 fa28 	bl	8017180 <__hexnan>
 8013d30:	2805      	cmp	r0, #5
 8013d32:	d123      	bne.n	8013d7c <_strtod_l+0x3b4>
 8013d34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013d36:	4a9a      	ldr	r2, [pc, #616]	; (8013fa0 <_strtod_l+0x5d8>)
 8013d38:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8013d3a:	431a      	orrs	r2, r3
 8013d3c:	0017      	movs	r7, r2
 8013d3e:	e68a      	b.n	8013a56 <_strtod_l+0x8e>
 8013d40:	210a      	movs	r1, #10
 8013d42:	434a      	muls	r2, r1
 8013d44:	18d2      	adds	r2, r2, r3
 8013d46:	3a30      	subs	r2, #48	; 0x30
 8013d48:	e7b8      	b.n	8013cbc <_strtod_l+0x2f4>
 8013d4a:	2b6e      	cmp	r3, #110	; 0x6e
 8013d4c:	d0e0      	beq.n	8013d10 <_strtod_l+0x348>
 8013d4e:	e6a1      	b.n	8013a94 <_strtod_l+0xcc>
 8013d50:	4994      	ldr	r1, [pc, #592]	; (8013fa4 <_strtod_l+0x5dc>)
 8013d52:	a81f      	add	r0, sp, #124	; 0x7c
 8013d54:	f003 fa00 	bl	8017158 <__match>
 8013d58:	2800      	cmp	r0, #0
 8013d5a:	d100      	bne.n	8013d5e <_strtod_l+0x396>
 8013d5c:	e69a      	b.n	8013a94 <_strtod_l+0xcc>
 8013d5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013d60:	4991      	ldr	r1, [pc, #580]	; (8013fa8 <_strtod_l+0x5e0>)
 8013d62:	3b01      	subs	r3, #1
 8013d64:	a81f      	add	r0, sp, #124	; 0x7c
 8013d66:	931f      	str	r3, [sp, #124]	; 0x7c
 8013d68:	f003 f9f6 	bl	8017158 <__match>
 8013d6c:	2800      	cmp	r0, #0
 8013d6e:	d102      	bne.n	8013d76 <_strtod_l+0x3ae>
 8013d70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013d72:	3301      	adds	r3, #1
 8013d74:	931f      	str	r3, [sp, #124]	; 0x7c
 8013d76:	2600      	movs	r6, #0
 8013d78:	4f89      	ldr	r7, [pc, #548]	; (8013fa0 <_strtod_l+0x5d8>)
 8013d7a:	e66c      	b.n	8013a56 <_strtod_l+0x8e>
 8013d7c:	488b      	ldr	r0, [pc, #556]	; (8013fac <_strtod_l+0x5e4>)
 8013d7e:	f003 ff93 	bl	8017ca8 <nan>
 8013d82:	0006      	movs	r6, r0
 8013d84:	000f      	movs	r7, r1
 8013d86:	e666      	b.n	8013a56 <_strtod_l+0x8e>
 8013d88:	9b07      	ldr	r3, [sp, #28]
 8013d8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d8c:	1a9b      	subs	r3, r3, r2
 8013d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8013d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d101      	bne.n	8013d9a <_strtod_l+0x3d2>
 8013d96:	9b06      	ldr	r3, [sp, #24]
 8013d98:	9309      	str	r3, [sp, #36]	; 0x24
 8013d9a:	9c06      	ldr	r4, [sp, #24]
 8013d9c:	2c10      	cmp	r4, #16
 8013d9e:	dd00      	ble.n	8013da2 <_strtod_l+0x3da>
 8013da0:	2410      	movs	r4, #16
 8013da2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013da4:	f7ee ff14 	bl	8002bd0 <__aeabi_ui2d>
 8013da8:	9b06      	ldr	r3, [sp, #24]
 8013daa:	0006      	movs	r6, r0
 8013dac:	000f      	movs	r7, r1
 8013dae:	2b09      	cmp	r3, #9
 8013db0:	dd15      	ble.n	8013dde <_strtod_l+0x416>
 8013db2:	0022      	movs	r2, r4
 8013db4:	4b7e      	ldr	r3, [pc, #504]	; (8013fb0 <_strtod_l+0x5e8>)
 8013db6:	3a09      	subs	r2, #9
 8013db8:	00d2      	lsls	r2, r2, #3
 8013dba:	189b      	adds	r3, r3, r2
 8013dbc:	681a      	ldr	r2, [r3, #0]
 8013dbe:	685b      	ldr	r3, [r3, #4]
 8013dc0:	f7ee f884 	bl	8001ecc <__aeabi_dmul>
 8013dc4:	0006      	movs	r6, r0
 8013dc6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013dc8:	000f      	movs	r7, r1
 8013dca:	f7ee ff01 	bl	8002bd0 <__aeabi_ui2d>
 8013dce:	0002      	movs	r2, r0
 8013dd0:	000b      	movs	r3, r1
 8013dd2:	0030      	movs	r0, r6
 8013dd4:	0039      	movs	r1, r7
 8013dd6:	f7ed f93b 	bl	8001050 <__aeabi_dadd>
 8013dda:	0006      	movs	r6, r0
 8013ddc:	000f      	movs	r7, r1
 8013dde:	9b06      	ldr	r3, [sp, #24]
 8013de0:	2b0f      	cmp	r3, #15
 8013de2:	dc39      	bgt.n	8013e58 <_strtod_l+0x490>
 8013de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d100      	bne.n	8013dec <_strtod_l+0x424>
 8013dea:	e634      	b.n	8013a56 <_strtod_l+0x8e>
 8013dec:	dd24      	ble.n	8013e38 <_strtod_l+0x470>
 8013dee:	2b16      	cmp	r3, #22
 8013df0:	dc09      	bgt.n	8013e06 <_strtod_l+0x43e>
 8013df2:	496f      	ldr	r1, [pc, #444]	; (8013fb0 <_strtod_l+0x5e8>)
 8013df4:	00db      	lsls	r3, r3, #3
 8013df6:	18c9      	adds	r1, r1, r3
 8013df8:	0032      	movs	r2, r6
 8013dfa:	6808      	ldr	r0, [r1, #0]
 8013dfc:	6849      	ldr	r1, [r1, #4]
 8013dfe:	003b      	movs	r3, r7
 8013e00:	f7ee f864 	bl	8001ecc <__aeabi_dmul>
 8013e04:	e7bd      	b.n	8013d82 <_strtod_l+0x3ba>
 8013e06:	2325      	movs	r3, #37	; 0x25
 8013e08:	9a06      	ldr	r2, [sp, #24]
 8013e0a:	1a9b      	subs	r3, r3, r2
 8013e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e0e:	4293      	cmp	r3, r2
 8013e10:	db22      	blt.n	8013e58 <_strtod_l+0x490>
 8013e12:	240f      	movs	r4, #15
 8013e14:	9b06      	ldr	r3, [sp, #24]
 8013e16:	4d66      	ldr	r5, [pc, #408]	; (8013fb0 <_strtod_l+0x5e8>)
 8013e18:	1ae4      	subs	r4, r4, r3
 8013e1a:	00e1      	lsls	r1, r4, #3
 8013e1c:	1869      	adds	r1, r5, r1
 8013e1e:	0032      	movs	r2, r6
 8013e20:	6808      	ldr	r0, [r1, #0]
 8013e22:	6849      	ldr	r1, [r1, #4]
 8013e24:	003b      	movs	r3, r7
 8013e26:	f7ee f851 	bl	8001ecc <__aeabi_dmul>
 8013e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e2c:	1b1c      	subs	r4, r3, r4
 8013e2e:	00e4      	lsls	r4, r4, #3
 8013e30:	192c      	adds	r4, r5, r4
 8013e32:	6822      	ldr	r2, [r4, #0]
 8013e34:	6863      	ldr	r3, [r4, #4]
 8013e36:	e7e3      	b.n	8013e00 <_strtod_l+0x438>
 8013e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e3a:	3316      	adds	r3, #22
 8013e3c:	db0c      	blt.n	8013e58 <_strtod_l+0x490>
 8013e3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e40:	9a07      	ldr	r2, [sp, #28]
 8013e42:	0030      	movs	r0, r6
 8013e44:	1a9a      	subs	r2, r3, r2
 8013e46:	4b5a      	ldr	r3, [pc, #360]	; (8013fb0 <_strtod_l+0x5e8>)
 8013e48:	00d2      	lsls	r2, r2, #3
 8013e4a:	189b      	adds	r3, r3, r2
 8013e4c:	0039      	movs	r1, r7
 8013e4e:	681a      	ldr	r2, [r3, #0]
 8013e50:	685b      	ldr	r3, [r3, #4]
 8013e52:	f7ed fc39 	bl	80016c8 <__aeabi_ddiv>
 8013e56:	e794      	b.n	8013d82 <_strtod_l+0x3ba>
 8013e58:	9b06      	ldr	r3, [sp, #24]
 8013e5a:	1b1c      	subs	r4, r3, r4
 8013e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e5e:	18e4      	adds	r4, r4, r3
 8013e60:	2c00      	cmp	r4, #0
 8013e62:	dd72      	ble.n	8013f4a <_strtod_l+0x582>
 8013e64:	230f      	movs	r3, #15
 8013e66:	0021      	movs	r1, r4
 8013e68:	4019      	ands	r1, r3
 8013e6a:	421c      	tst	r4, r3
 8013e6c:	d00a      	beq.n	8013e84 <_strtod_l+0x4bc>
 8013e6e:	00cb      	lsls	r3, r1, #3
 8013e70:	494f      	ldr	r1, [pc, #316]	; (8013fb0 <_strtod_l+0x5e8>)
 8013e72:	0032      	movs	r2, r6
 8013e74:	18c9      	adds	r1, r1, r3
 8013e76:	6808      	ldr	r0, [r1, #0]
 8013e78:	6849      	ldr	r1, [r1, #4]
 8013e7a:	003b      	movs	r3, r7
 8013e7c:	f7ee f826 	bl	8001ecc <__aeabi_dmul>
 8013e80:	0006      	movs	r6, r0
 8013e82:	000f      	movs	r7, r1
 8013e84:	230f      	movs	r3, #15
 8013e86:	439c      	bics	r4, r3
 8013e88:	d04a      	beq.n	8013f20 <_strtod_l+0x558>
 8013e8a:	3326      	adds	r3, #38	; 0x26
 8013e8c:	33ff      	adds	r3, #255	; 0xff
 8013e8e:	429c      	cmp	r4, r3
 8013e90:	dd22      	ble.n	8013ed8 <_strtod_l+0x510>
 8013e92:	2300      	movs	r3, #0
 8013e94:	9306      	str	r3, [sp, #24]
 8013e96:	9307      	str	r3, [sp, #28]
 8013e98:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8013e9c:	2322      	movs	r3, #34	; 0x22
 8013e9e:	2600      	movs	r6, #0
 8013ea0:	9a05      	ldr	r2, [sp, #20]
 8013ea2:	4f3f      	ldr	r7, [pc, #252]	; (8013fa0 <_strtod_l+0x5d8>)
 8013ea4:	6013      	str	r3, [r2, #0]
 8013ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ea8:	42b3      	cmp	r3, r6
 8013eaa:	d100      	bne.n	8013eae <_strtod_l+0x4e6>
 8013eac:	e5d3      	b.n	8013a56 <_strtod_l+0x8e>
 8013eae:	9920      	ldr	r1, [sp, #128]	; 0x80
 8013eb0:	9805      	ldr	r0, [sp, #20]
 8013eb2:	f003 fa75 	bl	80173a0 <_Bfree>
 8013eb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013eb8:	9805      	ldr	r0, [sp, #20]
 8013eba:	f003 fa71 	bl	80173a0 <_Bfree>
 8013ebe:	9907      	ldr	r1, [sp, #28]
 8013ec0:	9805      	ldr	r0, [sp, #20]
 8013ec2:	f003 fa6d 	bl	80173a0 <_Bfree>
 8013ec6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013ec8:	9805      	ldr	r0, [sp, #20]
 8013eca:	f003 fa69 	bl	80173a0 <_Bfree>
 8013ece:	9906      	ldr	r1, [sp, #24]
 8013ed0:	9805      	ldr	r0, [sp, #20]
 8013ed2:	f003 fa65 	bl	80173a0 <_Bfree>
 8013ed6:	e5be      	b.n	8013a56 <_strtod_l+0x8e>
 8013ed8:	2300      	movs	r3, #0
 8013eda:	0030      	movs	r0, r6
 8013edc:	0039      	movs	r1, r7
 8013ede:	4d35      	ldr	r5, [pc, #212]	; (8013fb4 <_strtod_l+0x5ec>)
 8013ee0:	1124      	asrs	r4, r4, #4
 8013ee2:	9308      	str	r3, [sp, #32]
 8013ee4:	2c01      	cmp	r4, #1
 8013ee6:	dc1e      	bgt.n	8013f26 <_strtod_l+0x55e>
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d001      	beq.n	8013ef0 <_strtod_l+0x528>
 8013eec:	0006      	movs	r6, r0
 8013eee:	000f      	movs	r7, r1
 8013ef0:	4b31      	ldr	r3, [pc, #196]	; (8013fb8 <_strtod_l+0x5f0>)
 8013ef2:	0032      	movs	r2, r6
 8013ef4:	18ff      	adds	r7, r7, r3
 8013ef6:	9b08      	ldr	r3, [sp, #32]
 8013ef8:	00dd      	lsls	r5, r3, #3
 8013efa:	4b2e      	ldr	r3, [pc, #184]	; (8013fb4 <_strtod_l+0x5ec>)
 8013efc:	195d      	adds	r5, r3, r5
 8013efe:	6828      	ldr	r0, [r5, #0]
 8013f00:	6869      	ldr	r1, [r5, #4]
 8013f02:	003b      	movs	r3, r7
 8013f04:	f7ed ffe2 	bl	8001ecc <__aeabi_dmul>
 8013f08:	4b25      	ldr	r3, [pc, #148]	; (8013fa0 <_strtod_l+0x5d8>)
 8013f0a:	4a2c      	ldr	r2, [pc, #176]	; (8013fbc <_strtod_l+0x5f4>)
 8013f0c:	0006      	movs	r6, r0
 8013f0e:	400b      	ands	r3, r1
 8013f10:	4293      	cmp	r3, r2
 8013f12:	d8be      	bhi.n	8013e92 <_strtod_l+0x4ca>
 8013f14:	4a2a      	ldr	r2, [pc, #168]	; (8013fc0 <_strtod_l+0x5f8>)
 8013f16:	4293      	cmp	r3, r2
 8013f18:	d913      	bls.n	8013f42 <_strtod_l+0x57a>
 8013f1a:	2601      	movs	r6, #1
 8013f1c:	4f29      	ldr	r7, [pc, #164]	; (8013fc4 <_strtod_l+0x5fc>)
 8013f1e:	4276      	negs	r6, r6
 8013f20:	2300      	movs	r3, #0
 8013f22:	9308      	str	r3, [sp, #32]
 8013f24:	e087      	b.n	8014036 <_strtod_l+0x66e>
 8013f26:	2201      	movs	r2, #1
 8013f28:	4214      	tst	r4, r2
 8013f2a:	d004      	beq.n	8013f36 <_strtod_l+0x56e>
 8013f2c:	682a      	ldr	r2, [r5, #0]
 8013f2e:	686b      	ldr	r3, [r5, #4]
 8013f30:	f7ed ffcc 	bl	8001ecc <__aeabi_dmul>
 8013f34:	2301      	movs	r3, #1
 8013f36:	9a08      	ldr	r2, [sp, #32]
 8013f38:	1064      	asrs	r4, r4, #1
 8013f3a:	3201      	adds	r2, #1
 8013f3c:	9208      	str	r2, [sp, #32]
 8013f3e:	3508      	adds	r5, #8
 8013f40:	e7d0      	b.n	8013ee4 <_strtod_l+0x51c>
 8013f42:	23d4      	movs	r3, #212	; 0xd4
 8013f44:	049b      	lsls	r3, r3, #18
 8013f46:	18cf      	adds	r7, r1, r3
 8013f48:	e7ea      	b.n	8013f20 <_strtod_l+0x558>
 8013f4a:	2c00      	cmp	r4, #0
 8013f4c:	d0e8      	beq.n	8013f20 <_strtod_l+0x558>
 8013f4e:	4264      	negs	r4, r4
 8013f50:	220f      	movs	r2, #15
 8013f52:	0023      	movs	r3, r4
 8013f54:	4013      	ands	r3, r2
 8013f56:	4214      	tst	r4, r2
 8013f58:	d00a      	beq.n	8013f70 <_strtod_l+0x5a8>
 8013f5a:	00da      	lsls	r2, r3, #3
 8013f5c:	4b14      	ldr	r3, [pc, #80]	; (8013fb0 <_strtod_l+0x5e8>)
 8013f5e:	0030      	movs	r0, r6
 8013f60:	189b      	adds	r3, r3, r2
 8013f62:	0039      	movs	r1, r7
 8013f64:	681a      	ldr	r2, [r3, #0]
 8013f66:	685b      	ldr	r3, [r3, #4]
 8013f68:	f7ed fbae 	bl	80016c8 <__aeabi_ddiv>
 8013f6c:	0006      	movs	r6, r0
 8013f6e:	000f      	movs	r7, r1
 8013f70:	1124      	asrs	r4, r4, #4
 8013f72:	d0d5      	beq.n	8013f20 <_strtod_l+0x558>
 8013f74:	2c1f      	cmp	r4, #31
 8013f76:	dd27      	ble.n	8013fc8 <_strtod_l+0x600>
 8013f78:	2300      	movs	r3, #0
 8013f7a:	9306      	str	r3, [sp, #24]
 8013f7c:	9307      	str	r3, [sp, #28]
 8013f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f80:	9309      	str	r3, [sp, #36]	; 0x24
 8013f82:	2322      	movs	r3, #34	; 0x22
 8013f84:	9a05      	ldr	r2, [sp, #20]
 8013f86:	2600      	movs	r6, #0
 8013f88:	6013      	str	r3, [r2, #0]
 8013f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f8c:	2700      	movs	r7, #0
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d18d      	bne.n	8013eae <_strtod_l+0x4e6>
 8013f92:	e560      	b.n	8013a56 <_strtod_l+0x8e>
 8013f94:	00004e1f 	.word	0x00004e1f
 8013f98:	0801c78d 	.word	0x0801c78d
 8013f9c:	0801c740 	.word	0x0801c740
 8013fa0:	7ff00000 	.word	0x7ff00000
 8013fa4:	0801c785 	.word	0x0801c785
 8013fa8:	0801c7db 	.word	0x0801c7db
 8013fac:	0801ca5f 	.word	0x0801ca5f
 8013fb0:	0801c950 	.word	0x0801c950
 8013fb4:	0801c928 	.word	0x0801c928
 8013fb8:	fcb00000 	.word	0xfcb00000
 8013fbc:	7ca00000 	.word	0x7ca00000
 8013fc0:	7c900000 	.word	0x7c900000
 8013fc4:	7fefffff 	.word	0x7fefffff
 8013fc8:	2310      	movs	r3, #16
 8013fca:	0022      	movs	r2, r4
 8013fcc:	401a      	ands	r2, r3
 8013fce:	9208      	str	r2, [sp, #32]
 8013fd0:	421c      	tst	r4, r3
 8013fd2:	d001      	beq.n	8013fd8 <_strtod_l+0x610>
 8013fd4:	335a      	adds	r3, #90	; 0x5a
 8013fd6:	9308      	str	r3, [sp, #32]
 8013fd8:	0030      	movs	r0, r6
 8013fda:	0039      	movs	r1, r7
 8013fdc:	2300      	movs	r3, #0
 8013fde:	4dc5      	ldr	r5, [pc, #788]	; (80142f4 <_strtod_l+0x92c>)
 8013fe0:	2201      	movs	r2, #1
 8013fe2:	4214      	tst	r4, r2
 8013fe4:	d004      	beq.n	8013ff0 <_strtod_l+0x628>
 8013fe6:	682a      	ldr	r2, [r5, #0]
 8013fe8:	686b      	ldr	r3, [r5, #4]
 8013fea:	f7ed ff6f 	bl	8001ecc <__aeabi_dmul>
 8013fee:	2301      	movs	r3, #1
 8013ff0:	1064      	asrs	r4, r4, #1
 8013ff2:	3508      	adds	r5, #8
 8013ff4:	2c00      	cmp	r4, #0
 8013ff6:	d1f3      	bne.n	8013fe0 <_strtod_l+0x618>
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d001      	beq.n	8014000 <_strtod_l+0x638>
 8013ffc:	0006      	movs	r6, r0
 8013ffe:	000f      	movs	r7, r1
 8014000:	9b08      	ldr	r3, [sp, #32]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d00f      	beq.n	8014026 <_strtod_l+0x65e>
 8014006:	236b      	movs	r3, #107	; 0x6b
 8014008:	007a      	lsls	r2, r7, #1
 801400a:	0d52      	lsrs	r2, r2, #21
 801400c:	0039      	movs	r1, r7
 801400e:	1a9b      	subs	r3, r3, r2
 8014010:	2b00      	cmp	r3, #0
 8014012:	dd08      	ble.n	8014026 <_strtod_l+0x65e>
 8014014:	2b1f      	cmp	r3, #31
 8014016:	dc00      	bgt.n	801401a <_strtod_l+0x652>
 8014018:	e124      	b.n	8014264 <_strtod_l+0x89c>
 801401a:	2600      	movs	r6, #0
 801401c:	2b34      	cmp	r3, #52	; 0x34
 801401e:	dc00      	bgt.n	8014022 <_strtod_l+0x65a>
 8014020:	e119      	b.n	8014256 <_strtod_l+0x88e>
 8014022:	27dc      	movs	r7, #220	; 0xdc
 8014024:	04bf      	lsls	r7, r7, #18
 8014026:	2200      	movs	r2, #0
 8014028:	2300      	movs	r3, #0
 801402a:	0030      	movs	r0, r6
 801402c:	0039      	movs	r1, r7
 801402e:	f7ec fa15 	bl	800045c <__aeabi_dcmpeq>
 8014032:	2800      	cmp	r0, #0
 8014034:	d1a0      	bne.n	8013f78 <_strtod_l+0x5b0>
 8014036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801403a:	9300      	str	r3, [sp, #0]
 801403c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801403e:	9b06      	ldr	r3, [sp, #24]
 8014040:	9805      	ldr	r0, [sp, #20]
 8014042:	f003 f9fb 	bl	801743c <__s2b>
 8014046:	900b      	str	r0, [sp, #44]	; 0x2c
 8014048:	2800      	cmp	r0, #0
 801404a:	d100      	bne.n	801404e <_strtod_l+0x686>
 801404c:	e721      	b.n	8013e92 <_strtod_l+0x4ca>
 801404e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014050:	9907      	ldr	r1, [sp, #28]
 8014052:	17da      	asrs	r2, r3, #31
 8014054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014056:	1a5b      	subs	r3, r3, r1
 8014058:	401a      	ands	r2, r3
 801405a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801405c:	9215      	str	r2, [sp, #84]	; 0x54
 801405e:	43db      	mvns	r3, r3
 8014060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014062:	17db      	asrs	r3, r3, #31
 8014064:	401a      	ands	r2, r3
 8014066:	2300      	movs	r3, #0
 8014068:	921a      	str	r2, [sp, #104]	; 0x68
 801406a:	9306      	str	r3, [sp, #24]
 801406c:	9307      	str	r3, [sp, #28]
 801406e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014070:	9805      	ldr	r0, [sp, #20]
 8014072:	6859      	ldr	r1, [r3, #4]
 8014074:	f003 f96c 	bl	8017350 <_Balloc>
 8014078:	9009      	str	r0, [sp, #36]	; 0x24
 801407a:	2800      	cmp	r0, #0
 801407c:	d100      	bne.n	8014080 <_strtod_l+0x6b8>
 801407e:	e70d      	b.n	8013e9c <_strtod_l+0x4d4>
 8014080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014082:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014084:	691b      	ldr	r3, [r3, #16]
 8014086:	310c      	adds	r1, #12
 8014088:	1c9a      	adds	r2, r3, #2
 801408a:	0092      	lsls	r2, r2, #2
 801408c:	300c      	adds	r0, #12
 801408e:	930c      	str	r3, [sp, #48]	; 0x30
 8014090:	f7ff fa1e 	bl	80134d0 <memcpy>
 8014094:	ab22      	add	r3, sp, #136	; 0x88
 8014096:	9301      	str	r3, [sp, #4]
 8014098:	ab21      	add	r3, sp, #132	; 0x84
 801409a:	9300      	str	r3, [sp, #0]
 801409c:	0032      	movs	r2, r6
 801409e:	003b      	movs	r3, r7
 80140a0:	9805      	ldr	r0, [sp, #20]
 80140a2:	9612      	str	r6, [sp, #72]	; 0x48
 80140a4:	9713      	str	r7, [sp, #76]	; 0x4c
 80140a6:	f003 fcfb 	bl	8017aa0 <__d2b>
 80140aa:	9020      	str	r0, [sp, #128]	; 0x80
 80140ac:	2800      	cmp	r0, #0
 80140ae:	d100      	bne.n	80140b2 <_strtod_l+0x6ea>
 80140b0:	e6f4      	b.n	8013e9c <_strtod_l+0x4d4>
 80140b2:	2101      	movs	r1, #1
 80140b4:	9805      	ldr	r0, [sp, #20]
 80140b6:	f003 fa55 	bl	8017564 <__i2b>
 80140ba:	9007      	str	r0, [sp, #28]
 80140bc:	2800      	cmp	r0, #0
 80140be:	d100      	bne.n	80140c2 <_strtod_l+0x6fa>
 80140c0:	e6ec      	b.n	8013e9c <_strtod_l+0x4d4>
 80140c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80140c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80140c6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80140c8:	1ad4      	subs	r4, r2, r3
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	db01      	blt.n	80140d2 <_strtod_l+0x70a>
 80140ce:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80140d0:	195d      	adds	r5, r3, r5
 80140d2:	9908      	ldr	r1, [sp, #32]
 80140d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80140d6:	1a5b      	subs	r3, r3, r1
 80140d8:	2136      	movs	r1, #54	; 0x36
 80140da:	189b      	adds	r3, r3, r2
 80140dc:	1a8a      	subs	r2, r1, r2
 80140de:	4986      	ldr	r1, [pc, #536]	; (80142f8 <_strtod_l+0x930>)
 80140e0:	2001      	movs	r0, #1
 80140e2:	468c      	mov	ip, r1
 80140e4:	2100      	movs	r1, #0
 80140e6:	3b01      	subs	r3, #1
 80140e8:	9110      	str	r1, [sp, #64]	; 0x40
 80140ea:	9014      	str	r0, [sp, #80]	; 0x50
 80140ec:	4563      	cmp	r3, ip
 80140ee:	da07      	bge.n	8014100 <_strtod_l+0x738>
 80140f0:	4661      	mov	r1, ip
 80140f2:	1ac9      	subs	r1, r1, r3
 80140f4:	1a52      	subs	r2, r2, r1
 80140f6:	291f      	cmp	r1, #31
 80140f8:	dd00      	ble.n	80140fc <_strtod_l+0x734>
 80140fa:	e0b8      	b.n	801426e <_strtod_l+0x8a6>
 80140fc:	4088      	lsls	r0, r1
 80140fe:	9014      	str	r0, [sp, #80]	; 0x50
 8014100:	18ab      	adds	r3, r5, r2
 8014102:	930c      	str	r3, [sp, #48]	; 0x30
 8014104:	18a4      	adds	r4, r4, r2
 8014106:	9b08      	ldr	r3, [sp, #32]
 8014108:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801410a:	191c      	adds	r4, r3, r4
 801410c:	002b      	movs	r3, r5
 801410e:	4295      	cmp	r5, r2
 8014110:	dd00      	ble.n	8014114 <_strtod_l+0x74c>
 8014112:	0013      	movs	r3, r2
 8014114:	42a3      	cmp	r3, r4
 8014116:	dd00      	ble.n	801411a <_strtod_l+0x752>
 8014118:	0023      	movs	r3, r4
 801411a:	2b00      	cmp	r3, #0
 801411c:	dd04      	ble.n	8014128 <_strtod_l+0x760>
 801411e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014120:	1ae4      	subs	r4, r4, r3
 8014122:	1ad2      	subs	r2, r2, r3
 8014124:	920c      	str	r2, [sp, #48]	; 0x30
 8014126:	1aed      	subs	r5, r5, r3
 8014128:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801412a:	2b00      	cmp	r3, #0
 801412c:	dd17      	ble.n	801415e <_strtod_l+0x796>
 801412e:	001a      	movs	r2, r3
 8014130:	9907      	ldr	r1, [sp, #28]
 8014132:	9805      	ldr	r0, [sp, #20]
 8014134:	f003 fadc 	bl	80176f0 <__pow5mult>
 8014138:	9007      	str	r0, [sp, #28]
 801413a:	2800      	cmp	r0, #0
 801413c:	d100      	bne.n	8014140 <_strtod_l+0x778>
 801413e:	e6ad      	b.n	8013e9c <_strtod_l+0x4d4>
 8014140:	0001      	movs	r1, r0
 8014142:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014144:	9805      	ldr	r0, [sp, #20]
 8014146:	f003 fa23 	bl	8017590 <__multiply>
 801414a:	900f      	str	r0, [sp, #60]	; 0x3c
 801414c:	2800      	cmp	r0, #0
 801414e:	d100      	bne.n	8014152 <_strtod_l+0x78a>
 8014150:	e6a4      	b.n	8013e9c <_strtod_l+0x4d4>
 8014152:	9920      	ldr	r1, [sp, #128]	; 0x80
 8014154:	9805      	ldr	r0, [sp, #20]
 8014156:	f003 f923 	bl	80173a0 <_Bfree>
 801415a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801415c:	9320      	str	r3, [sp, #128]	; 0x80
 801415e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014160:	2b00      	cmp	r3, #0
 8014162:	dd00      	ble.n	8014166 <_strtod_l+0x79e>
 8014164:	e089      	b.n	801427a <_strtod_l+0x8b2>
 8014166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014168:	2b00      	cmp	r3, #0
 801416a:	dd08      	ble.n	801417e <_strtod_l+0x7b6>
 801416c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801416e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014170:	9805      	ldr	r0, [sp, #20]
 8014172:	f003 fabd 	bl	80176f0 <__pow5mult>
 8014176:	9009      	str	r0, [sp, #36]	; 0x24
 8014178:	2800      	cmp	r0, #0
 801417a:	d100      	bne.n	801417e <_strtod_l+0x7b6>
 801417c:	e68e      	b.n	8013e9c <_strtod_l+0x4d4>
 801417e:	2c00      	cmp	r4, #0
 8014180:	dd08      	ble.n	8014194 <_strtod_l+0x7cc>
 8014182:	0022      	movs	r2, r4
 8014184:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014186:	9805      	ldr	r0, [sp, #20]
 8014188:	f003 faf4 	bl	8017774 <__lshift>
 801418c:	9009      	str	r0, [sp, #36]	; 0x24
 801418e:	2800      	cmp	r0, #0
 8014190:	d100      	bne.n	8014194 <_strtod_l+0x7cc>
 8014192:	e683      	b.n	8013e9c <_strtod_l+0x4d4>
 8014194:	2d00      	cmp	r5, #0
 8014196:	dd08      	ble.n	80141aa <_strtod_l+0x7e2>
 8014198:	002a      	movs	r2, r5
 801419a:	9907      	ldr	r1, [sp, #28]
 801419c:	9805      	ldr	r0, [sp, #20]
 801419e:	f003 fae9 	bl	8017774 <__lshift>
 80141a2:	9007      	str	r0, [sp, #28]
 80141a4:	2800      	cmp	r0, #0
 80141a6:	d100      	bne.n	80141aa <_strtod_l+0x7e2>
 80141a8:	e678      	b.n	8013e9c <_strtod_l+0x4d4>
 80141aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80141ac:	9920      	ldr	r1, [sp, #128]	; 0x80
 80141ae:	9805      	ldr	r0, [sp, #20]
 80141b0:	f003 fb6a 	bl	8017888 <__mdiff>
 80141b4:	9006      	str	r0, [sp, #24]
 80141b6:	2800      	cmp	r0, #0
 80141b8:	d100      	bne.n	80141bc <_strtod_l+0x7f4>
 80141ba:	e66f      	b.n	8013e9c <_strtod_l+0x4d4>
 80141bc:	2200      	movs	r2, #0
 80141be:	68c3      	ldr	r3, [r0, #12]
 80141c0:	9907      	ldr	r1, [sp, #28]
 80141c2:	60c2      	str	r2, [r0, #12]
 80141c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80141c6:	f003 fb43 	bl	8017850 <__mcmp>
 80141ca:	2800      	cmp	r0, #0
 80141cc:	da5f      	bge.n	801428e <_strtod_l+0x8c6>
 80141ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141d0:	4333      	orrs	r3, r6
 80141d2:	d000      	beq.n	80141d6 <_strtod_l+0x80e>
 80141d4:	e08a      	b.n	80142ec <_strtod_l+0x924>
 80141d6:	033b      	lsls	r3, r7, #12
 80141d8:	d000      	beq.n	80141dc <_strtod_l+0x814>
 80141da:	e087      	b.n	80142ec <_strtod_l+0x924>
 80141dc:	22d6      	movs	r2, #214	; 0xd6
 80141de:	4b47      	ldr	r3, [pc, #284]	; (80142fc <_strtod_l+0x934>)
 80141e0:	04d2      	lsls	r2, r2, #19
 80141e2:	403b      	ands	r3, r7
 80141e4:	4293      	cmp	r3, r2
 80141e6:	d800      	bhi.n	80141ea <_strtod_l+0x822>
 80141e8:	e080      	b.n	80142ec <_strtod_l+0x924>
 80141ea:	9b06      	ldr	r3, [sp, #24]
 80141ec:	695b      	ldr	r3, [r3, #20]
 80141ee:	930a      	str	r3, [sp, #40]	; 0x28
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d104      	bne.n	80141fe <_strtod_l+0x836>
 80141f4:	9b06      	ldr	r3, [sp, #24]
 80141f6:	691b      	ldr	r3, [r3, #16]
 80141f8:	930a      	str	r3, [sp, #40]	; 0x28
 80141fa:	2b01      	cmp	r3, #1
 80141fc:	dd76      	ble.n	80142ec <_strtod_l+0x924>
 80141fe:	9906      	ldr	r1, [sp, #24]
 8014200:	2201      	movs	r2, #1
 8014202:	9805      	ldr	r0, [sp, #20]
 8014204:	f003 fab6 	bl	8017774 <__lshift>
 8014208:	9907      	ldr	r1, [sp, #28]
 801420a:	9006      	str	r0, [sp, #24]
 801420c:	f003 fb20 	bl	8017850 <__mcmp>
 8014210:	2800      	cmp	r0, #0
 8014212:	dd6b      	ble.n	80142ec <_strtod_l+0x924>
 8014214:	9908      	ldr	r1, [sp, #32]
 8014216:	003b      	movs	r3, r7
 8014218:	4a38      	ldr	r2, [pc, #224]	; (80142fc <_strtod_l+0x934>)
 801421a:	2900      	cmp	r1, #0
 801421c:	d100      	bne.n	8014220 <_strtod_l+0x858>
 801421e:	e092      	b.n	8014346 <_strtod_l+0x97e>
 8014220:	0011      	movs	r1, r2
 8014222:	20d6      	movs	r0, #214	; 0xd6
 8014224:	4039      	ands	r1, r7
 8014226:	04c0      	lsls	r0, r0, #19
 8014228:	4281      	cmp	r1, r0
 801422a:	dd00      	ble.n	801422e <_strtod_l+0x866>
 801422c:	e08b      	b.n	8014346 <_strtod_l+0x97e>
 801422e:	23dc      	movs	r3, #220	; 0xdc
 8014230:	049b      	lsls	r3, r3, #18
 8014232:	4299      	cmp	r1, r3
 8014234:	dc00      	bgt.n	8014238 <_strtod_l+0x870>
 8014236:	e6a4      	b.n	8013f82 <_strtod_l+0x5ba>
 8014238:	0030      	movs	r0, r6
 801423a:	0039      	movs	r1, r7
 801423c:	2200      	movs	r2, #0
 801423e:	4b30      	ldr	r3, [pc, #192]	; (8014300 <_strtod_l+0x938>)
 8014240:	f7ed fe44 	bl	8001ecc <__aeabi_dmul>
 8014244:	0006      	movs	r6, r0
 8014246:	000f      	movs	r7, r1
 8014248:	4308      	orrs	r0, r1
 801424a:	d000      	beq.n	801424e <_strtod_l+0x886>
 801424c:	e62f      	b.n	8013eae <_strtod_l+0x4e6>
 801424e:	2322      	movs	r3, #34	; 0x22
 8014250:	9a05      	ldr	r2, [sp, #20]
 8014252:	6013      	str	r3, [r2, #0]
 8014254:	e62b      	b.n	8013eae <_strtod_l+0x4e6>
 8014256:	234b      	movs	r3, #75	; 0x4b
 8014258:	1a9a      	subs	r2, r3, r2
 801425a:	3b4c      	subs	r3, #76	; 0x4c
 801425c:	4093      	lsls	r3, r2
 801425e:	4019      	ands	r1, r3
 8014260:	000f      	movs	r7, r1
 8014262:	e6e0      	b.n	8014026 <_strtod_l+0x65e>
 8014264:	2201      	movs	r2, #1
 8014266:	4252      	negs	r2, r2
 8014268:	409a      	lsls	r2, r3
 801426a:	4016      	ands	r6, r2
 801426c:	e6db      	b.n	8014026 <_strtod_l+0x65e>
 801426e:	4925      	ldr	r1, [pc, #148]	; (8014304 <_strtod_l+0x93c>)
 8014270:	1acb      	subs	r3, r1, r3
 8014272:	0001      	movs	r1, r0
 8014274:	4099      	lsls	r1, r3
 8014276:	9110      	str	r1, [sp, #64]	; 0x40
 8014278:	e741      	b.n	80140fe <_strtod_l+0x736>
 801427a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801427c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801427e:	9805      	ldr	r0, [sp, #20]
 8014280:	f003 fa78 	bl	8017774 <__lshift>
 8014284:	9020      	str	r0, [sp, #128]	; 0x80
 8014286:	2800      	cmp	r0, #0
 8014288:	d000      	beq.n	801428c <_strtod_l+0x8c4>
 801428a:	e76c      	b.n	8014166 <_strtod_l+0x79e>
 801428c:	e606      	b.n	8013e9c <_strtod_l+0x4d4>
 801428e:	970c      	str	r7, [sp, #48]	; 0x30
 8014290:	2800      	cmp	r0, #0
 8014292:	d176      	bne.n	8014382 <_strtod_l+0x9ba>
 8014294:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014296:	033b      	lsls	r3, r7, #12
 8014298:	0b1b      	lsrs	r3, r3, #12
 801429a:	2a00      	cmp	r2, #0
 801429c:	d038      	beq.n	8014310 <_strtod_l+0x948>
 801429e:	4a1a      	ldr	r2, [pc, #104]	; (8014308 <_strtod_l+0x940>)
 80142a0:	4293      	cmp	r3, r2
 80142a2:	d138      	bne.n	8014316 <_strtod_l+0x94e>
 80142a4:	2201      	movs	r2, #1
 80142a6:	9b08      	ldr	r3, [sp, #32]
 80142a8:	4252      	negs	r2, r2
 80142aa:	0031      	movs	r1, r6
 80142ac:	0010      	movs	r0, r2
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d00b      	beq.n	80142ca <_strtod_l+0x902>
 80142b2:	24d4      	movs	r4, #212	; 0xd4
 80142b4:	4b11      	ldr	r3, [pc, #68]	; (80142fc <_strtod_l+0x934>)
 80142b6:	0010      	movs	r0, r2
 80142b8:	403b      	ands	r3, r7
 80142ba:	04e4      	lsls	r4, r4, #19
 80142bc:	42a3      	cmp	r3, r4
 80142be:	d804      	bhi.n	80142ca <_strtod_l+0x902>
 80142c0:	306c      	adds	r0, #108	; 0x6c
 80142c2:	0d1b      	lsrs	r3, r3, #20
 80142c4:	1ac3      	subs	r3, r0, r3
 80142c6:	409a      	lsls	r2, r3
 80142c8:	0010      	movs	r0, r2
 80142ca:	4281      	cmp	r1, r0
 80142cc:	d123      	bne.n	8014316 <_strtod_l+0x94e>
 80142ce:	4b0f      	ldr	r3, [pc, #60]	; (801430c <_strtod_l+0x944>)
 80142d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80142d2:	429a      	cmp	r2, r3
 80142d4:	d102      	bne.n	80142dc <_strtod_l+0x914>
 80142d6:	1c4b      	adds	r3, r1, #1
 80142d8:	d100      	bne.n	80142dc <_strtod_l+0x914>
 80142da:	e5df      	b.n	8013e9c <_strtod_l+0x4d4>
 80142dc:	4b07      	ldr	r3, [pc, #28]	; (80142fc <_strtod_l+0x934>)
 80142de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80142e0:	2600      	movs	r6, #0
 80142e2:	401a      	ands	r2, r3
 80142e4:	0013      	movs	r3, r2
 80142e6:	2280      	movs	r2, #128	; 0x80
 80142e8:	0352      	lsls	r2, r2, #13
 80142ea:	189f      	adds	r7, r3, r2
 80142ec:	9b08      	ldr	r3, [sp, #32]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d1a2      	bne.n	8014238 <_strtod_l+0x870>
 80142f2:	e5dc      	b.n	8013eae <_strtod_l+0x4e6>
 80142f4:	0801c758 	.word	0x0801c758
 80142f8:	fffffc02 	.word	0xfffffc02
 80142fc:	7ff00000 	.word	0x7ff00000
 8014300:	39500000 	.word	0x39500000
 8014304:	fffffbe2 	.word	0xfffffbe2
 8014308:	000fffff 	.word	0x000fffff
 801430c:	7fefffff 	.word	0x7fefffff
 8014310:	4333      	orrs	r3, r6
 8014312:	d100      	bne.n	8014316 <_strtod_l+0x94e>
 8014314:	e77e      	b.n	8014214 <_strtod_l+0x84c>
 8014316:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014318:	2b00      	cmp	r3, #0
 801431a:	d01d      	beq.n	8014358 <_strtod_l+0x990>
 801431c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801431e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014320:	4213      	tst	r3, r2
 8014322:	d0e3      	beq.n	80142ec <_strtod_l+0x924>
 8014324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014326:	0030      	movs	r0, r6
 8014328:	0039      	movs	r1, r7
 801432a:	9a08      	ldr	r2, [sp, #32]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d017      	beq.n	8014360 <_strtod_l+0x998>
 8014330:	f7ff fb32 	bl	8013998 <sulp>
 8014334:	0002      	movs	r2, r0
 8014336:	000b      	movs	r3, r1
 8014338:	9812      	ldr	r0, [sp, #72]	; 0x48
 801433a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801433c:	f7ec fe88 	bl	8001050 <__aeabi_dadd>
 8014340:	0006      	movs	r6, r0
 8014342:	000f      	movs	r7, r1
 8014344:	e7d2      	b.n	80142ec <_strtod_l+0x924>
 8014346:	2601      	movs	r6, #1
 8014348:	4013      	ands	r3, r2
 801434a:	4a99      	ldr	r2, [pc, #612]	; (80145b0 <_strtod_l+0xbe8>)
 801434c:	4276      	negs	r6, r6
 801434e:	189b      	adds	r3, r3, r2
 8014350:	4a98      	ldr	r2, [pc, #608]	; (80145b4 <_strtod_l+0xbec>)
 8014352:	431a      	orrs	r2, r3
 8014354:	0017      	movs	r7, r2
 8014356:	e7c9      	b.n	80142ec <_strtod_l+0x924>
 8014358:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801435a:	4233      	tst	r3, r6
 801435c:	d0c6      	beq.n	80142ec <_strtod_l+0x924>
 801435e:	e7e1      	b.n	8014324 <_strtod_l+0x95c>
 8014360:	f7ff fb1a 	bl	8013998 <sulp>
 8014364:	0002      	movs	r2, r0
 8014366:	000b      	movs	r3, r1
 8014368:	9812      	ldr	r0, [sp, #72]	; 0x48
 801436a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801436c:	f7ee f81a 	bl	80023a4 <__aeabi_dsub>
 8014370:	2200      	movs	r2, #0
 8014372:	2300      	movs	r3, #0
 8014374:	0006      	movs	r6, r0
 8014376:	000f      	movs	r7, r1
 8014378:	f7ec f870 	bl	800045c <__aeabi_dcmpeq>
 801437c:	2800      	cmp	r0, #0
 801437e:	d0b5      	beq.n	80142ec <_strtod_l+0x924>
 8014380:	e5ff      	b.n	8013f82 <_strtod_l+0x5ba>
 8014382:	9907      	ldr	r1, [sp, #28]
 8014384:	9806      	ldr	r0, [sp, #24]
 8014386:	f003 fbef 	bl	8017b68 <__ratio>
 801438a:	2380      	movs	r3, #128	; 0x80
 801438c:	2200      	movs	r2, #0
 801438e:	05db      	lsls	r3, r3, #23
 8014390:	0004      	movs	r4, r0
 8014392:	000d      	movs	r5, r1
 8014394:	f7ec f872 	bl	800047c <__aeabi_dcmple>
 8014398:	2800      	cmp	r0, #0
 801439a:	d075      	beq.n	8014488 <_strtod_l+0xac0>
 801439c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d047      	beq.n	8014432 <_strtod_l+0xa6a>
 80143a2:	2300      	movs	r3, #0
 80143a4:	4c84      	ldr	r4, [pc, #528]	; (80145b8 <_strtod_l+0xbf0>)
 80143a6:	2500      	movs	r5, #0
 80143a8:	9310      	str	r3, [sp, #64]	; 0x40
 80143aa:	9411      	str	r4, [sp, #68]	; 0x44
 80143ac:	4c82      	ldr	r4, [pc, #520]	; (80145b8 <_strtod_l+0xbf0>)
 80143ae:	4a83      	ldr	r2, [pc, #524]	; (80145bc <_strtod_l+0xbf4>)
 80143b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143b2:	4013      	ands	r3, r2
 80143b4:	9314      	str	r3, [sp, #80]	; 0x50
 80143b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80143b8:	4b81      	ldr	r3, [pc, #516]	; (80145c0 <_strtod_l+0xbf8>)
 80143ba:	429a      	cmp	r2, r3
 80143bc:	d000      	beq.n	80143c0 <_strtod_l+0x9f8>
 80143be:	e0ac      	b.n	801451a <_strtod_l+0xb52>
 80143c0:	4a80      	ldr	r2, [pc, #512]	; (80145c4 <_strtod_l+0xbfc>)
 80143c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143c4:	4694      	mov	ip, r2
 80143c6:	4463      	add	r3, ip
 80143c8:	001f      	movs	r7, r3
 80143ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80143cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80143ce:	0030      	movs	r0, r6
 80143d0:	0039      	movs	r1, r7
 80143d2:	920c      	str	r2, [sp, #48]	; 0x30
 80143d4:	930d      	str	r3, [sp, #52]	; 0x34
 80143d6:	f003 faef 	bl	80179b8 <__ulp>
 80143da:	0002      	movs	r2, r0
 80143dc:	000b      	movs	r3, r1
 80143de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80143e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80143e2:	f7ed fd73 	bl	8001ecc <__aeabi_dmul>
 80143e6:	0032      	movs	r2, r6
 80143e8:	003b      	movs	r3, r7
 80143ea:	f7ec fe31 	bl	8001050 <__aeabi_dadd>
 80143ee:	4a73      	ldr	r2, [pc, #460]	; (80145bc <_strtod_l+0xbf4>)
 80143f0:	4b75      	ldr	r3, [pc, #468]	; (80145c8 <_strtod_l+0xc00>)
 80143f2:	0006      	movs	r6, r0
 80143f4:	400a      	ands	r2, r1
 80143f6:	429a      	cmp	r2, r3
 80143f8:	d95e      	bls.n	80144b8 <_strtod_l+0xaf0>
 80143fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80143fc:	4b73      	ldr	r3, [pc, #460]	; (80145cc <_strtod_l+0xc04>)
 80143fe:	429a      	cmp	r2, r3
 8014400:	d103      	bne.n	801440a <_strtod_l+0xa42>
 8014402:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014404:	3301      	adds	r3, #1
 8014406:	d100      	bne.n	801440a <_strtod_l+0xa42>
 8014408:	e548      	b.n	8013e9c <_strtod_l+0x4d4>
 801440a:	2601      	movs	r6, #1
 801440c:	4f6f      	ldr	r7, [pc, #444]	; (80145cc <_strtod_l+0xc04>)
 801440e:	4276      	negs	r6, r6
 8014410:	9920      	ldr	r1, [sp, #128]	; 0x80
 8014412:	9805      	ldr	r0, [sp, #20]
 8014414:	f002 ffc4 	bl	80173a0 <_Bfree>
 8014418:	9909      	ldr	r1, [sp, #36]	; 0x24
 801441a:	9805      	ldr	r0, [sp, #20]
 801441c:	f002 ffc0 	bl	80173a0 <_Bfree>
 8014420:	9907      	ldr	r1, [sp, #28]
 8014422:	9805      	ldr	r0, [sp, #20]
 8014424:	f002 ffbc 	bl	80173a0 <_Bfree>
 8014428:	9906      	ldr	r1, [sp, #24]
 801442a:	9805      	ldr	r0, [sp, #20]
 801442c:	f002 ffb8 	bl	80173a0 <_Bfree>
 8014430:	e61d      	b.n	801406e <_strtod_l+0x6a6>
 8014432:	2e00      	cmp	r6, #0
 8014434:	d11c      	bne.n	8014470 <_strtod_l+0xaa8>
 8014436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014438:	031b      	lsls	r3, r3, #12
 801443a:	d11f      	bne.n	801447c <_strtod_l+0xab4>
 801443c:	2200      	movs	r2, #0
 801443e:	0020      	movs	r0, r4
 8014440:	0029      	movs	r1, r5
 8014442:	4b5d      	ldr	r3, [pc, #372]	; (80145b8 <_strtod_l+0xbf0>)
 8014444:	f7ec f810 	bl	8000468 <__aeabi_dcmplt>
 8014448:	2800      	cmp	r0, #0
 801444a:	d11a      	bne.n	8014482 <_strtod_l+0xaba>
 801444c:	0020      	movs	r0, r4
 801444e:	0029      	movs	r1, r5
 8014450:	2200      	movs	r2, #0
 8014452:	4b5f      	ldr	r3, [pc, #380]	; (80145d0 <_strtod_l+0xc08>)
 8014454:	f7ed fd3a 	bl	8001ecc <__aeabi_dmul>
 8014458:	0005      	movs	r5, r0
 801445a:	000c      	movs	r4, r1
 801445c:	2380      	movs	r3, #128	; 0x80
 801445e:	061b      	lsls	r3, r3, #24
 8014460:	18e3      	adds	r3, r4, r3
 8014462:	951c      	str	r5, [sp, #112]	; 0x70
 8014464:	931d      	str	r3, [sp, #116]	; 0x74
 8014466:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014468:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801446a:	9210      	str	r2, [sp, #64]	; 0x40
 801446c:	9311      	str	r3, [sp, #68]	; 0x44
 801446e:	e79e      	b.n	80143ae <_strtod_l+0x9e6>
 8014470:	2e01      	cmp	r6, #1
 8014472:	d103      	bne.n	801447c <_strtod_l+0xab4>
 8014474:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014476:	2b00      	cmp	r3, #0
 8014478:	d100      	bne.n	801447c <_strtod_l+0xab4>
 801447a:	e582      	b.n	8013f82 <_strtod_l+0x5ba>
 801447c:	2300      	movs	r3, #0
 801447e:	4c55      	ldr	r4, [pc, #340]	; (80145d4 <_strtod_l+0xc0c>)
 8014480:	e791      	b.n	80143a6 <_strtod_l+0x9de>
 8014482:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014484:	4c52      	ldr	r4, [pc, #328]	; (80145d0 <_strtod_l+0xc08>)
 8014486:	e7e9      	b.n	801445c <_strtod_l+0xa94>
 8014488:	2200      	movs	r2, #0
 801448a:	0020      	movs	r0, r4
 801448c:	0029      	movs	r1, r5
 801448e:	4b50      	ldr	r3, [pc, #320]	; (80145d0 <_strtod_l+0xc08>)
 8014490:	f7ed fd1c 	bl	8001ecc <__aeabi_dmul>
 8014494:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014496:	0005      	movs	r5, r0
 8014498:	000b      	movs	r3, r1
 801449a:	000c      	movs	r4, r1
 801449c:	2a00      	cmp	r2, #0
 801449e:	d107      	bne.n	80144b0 <_strtod_l+0xae8>
 80144a0:	2280      	movs	r2, #128	; 0x80
 80144a2:	0612      	lsls	r2, r2, #24
 80144a4:	188b      	adds	r3, r1, r2
 80144a6:	9016      	str	r0, [sp, #88]	; 0x58
 80144a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80144aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80144ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144ae:	e7dc      	b.n	801446a <_strtod_l+0xaa2>
 80144b0:	0002      	movs	r2, r0
 80144b2:	9216      	str	r2, [sp, #88]	; 0x58
 80144b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80144b6:	e7f8      	b.n	80144aa <_strtod_l+0xae2>
 80144b8:	23d4      	movs	r3, #212	; 0xd4
 80144ba:	049b      	lsls	r3, r3, #18
 80144bc:	18cf      	adds	r7, r1, r3
 80144be:	9b08      	ldr	r3, [sp, #32]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d1a5      	bne.n	8014410 <_strtod_l+0xa48>
 80144c4:	4b3d      	ldr	r3, [pc, #244]	; (80145bc <_strtod_l+0xbf4>)
 80144c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80144c8:	403b      	ands	r3, r7
 80144ca:	429a      	cmp	r2, r3
 80144cc:	d1a0      	bne.n	8014410 <_strtod_l+0xa48>
 80144ce:	0028      	movs	r0, r5
 80144d0:	0021      	movs	r1, r4
 80144d2:	f7ec f8b9 	bl	8000648 <__aeabi_d2lz>
 80144d6:	f7ec f8f3 	bl	80006c0 <__aeabi_l2d>
 80144da:	0002      	movs	r2, r0
 80144dc:	000b      	movs	r3, r1
 80144de:	0028      	movs	r0, r5
 80144e0:	0021      	movs	r1, r4
 80144e2:	f7ed ff5f 	bl	80023a4 <__aeabi_dsub>
 80144e6:	033b      	lsls	r3, r7, #12
 80144e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80144ea:	0b1b      	lsrs	r3, r3, #12
 80144ec:	4333      	orrs	r3, r6
 80144ee:	4313      	orrs	r3, r2
 80144f0:	0004      	movs	r4, r0
 80144f2:	000d      	movs	r5, r1
 80144f4:	4a38      	ldr	r2, [pc, #224]	; (80145d8 <_strtod_l+0xc10>)
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d055      	beq.n	80145a6 <_strtod_l+0xbde>
 80144fa:	4b38      	ldr	r3, [pc, #224]	; (80145dc <_strtod_l+0xc14>)
 80144fc:	f7eb ffb4 	bl	8000468 <__aeabi_dcmplt>
 8014500:	2800      	cmp	r0, #0
 8014502:	d000      	beq.n	8014506 <_strtod_l+0xb3e>
 8014504:	e4d3      	b.n	8013eae <_strtod_l+0x4e6>
 8014506:	0020      	movs	r0, r4
 8014508:	0029      	movs	r1, r5
 801450a:	4a35      	ldr	r2, [pc, #212]	; (80145e0 <_strtod_l+0xc18>)
 801450c:	4b30      	ldr	r3, [pc, #192]	; (80145d0 <_strtod_l+0xc08>)
 801450e:	f7eb ffbf 	bl	8000490 <__aeabi_dcmpgt>
 8014512:	2800      	cmp	r0, #0
 8014514:	d100      	bne.n	8014518 <_strtod_l+0xb50>
 8014516:	e77b      	b.n	8014410 <_strtod_l+0xa48>
 8014518:	e4c9      	b.n	8013eae <_strtod_l+0x4e6>
 801451a:	9b08      	ldr	r3, [sp, #32]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d02b      	beq.n	8014578 <_strtod_l+0xbb0>
 8014520:	23d4      	movs	r3, #212	; 0xd4
 8014522:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014524:	04db      	lsls	r3, r3, #19
 8014526:	429a      	cmp	r2, r3
 8014528:	d826      	bhi.n	8014578 <_strtod_l+0xbb0>
 801452a:	0028      	movs	r0, r5
 801452c:	0021      	movs	r1, r4
 801452e:	4a2d      	ldr	r2, [pc, #180]	; (80145e4 <_strtod_l+0xc1c>)
 8014530:	4b2d      	ldr	r3, [pc, #180]	; (80145e8 <_strtod_l+0xc20>)
 8014532:	f7eb ffa3 	bl	800047c <__aeabi_dcmple>
 8014536:	2800      	cmp	r0, #0
 8014538:	d017      	beq.n	801456a <_strtod_l+0xba2>
 801453a:	0028      	movs	r0, r5
 801453c:	0021      	movs	r1, r4
 801453e:	f7ec f865 	bl	800060c <__aeabi_d2uiz>
 8014542:	2800      	cmp	r0, #0
 8014544:	d100      	bne.n	8014548 <_strtod_l+0xb80>
 8014546:	3001      	adds	r0, #1
 8014548:	f7ee fb42 	bl	8002bd0 <__aeabi_ui2d>
 801454c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801454e:	0005      	movs	r5, r0
 8014550:	000b      	movs	r3, r1
 8014552:	000c      	movs	r4, r1
 8014554:	2a00      	cmp	r2, #0
 8014556:	d122      	bne.n	801459e <_strtod_l+0xbd6>
 8014558:	2280      	movs	r2, #128	; 0x80
 801455a:	0612      	lsls	r2, r2, #24
 801455c:	188b      	adds	r3, r1, r2
 801455e:	9018      	str	r0, [sp, #96]	; 0x60
 8014560:	9319      	str	r3, [sp, #100]	; 0x64
 8014562:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014564:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014566:	9210      	str	r2, [sp, #64]	; 0x40
 8014568:	9311      	str	r3, [sp, #68]	; 0x44
 801456a:	22d6      	movs	r2, #214	; 0xd6
 801456c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801456e:	04d2      	lsls	r2, r2, #19
 8014570:	189b      	adds	r3, r3, r2
 8014572:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014574:	1a9b      	subs	r3, r3, r2
 8014576:	9311      	str	r3, [sp, #68]	; 0x44
 8014578:	9812      	ldr	r0, [sp, #72]	; 0x48
 801457a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801457c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801457e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8014580:	f003 fa1a 	bl	80179b8 <__ulp>
 8014584:	0002      	movs	r2, r0
 8014586:	000b      	movs	r3, r1
 8014588:	0030      	movs	r0, r6
 801458a:	0039      	movs	r1, r7
 801458c:	f7ed fc9e 	bl	8001ecc <__aeabi_dmul>
 8014590:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014592:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014594:	f7ec fd5c 	bl	8001050 <__aeabi_dadd>
 8014598:	0006      	movs	r6, r0
 801459a:	000f      	movs	r7, r1
 801459c:	e78f      	b.n	80144be <_strtod_l+0xaf6>
 801459e:	0002      	movs	r2, r0
 80145a0:	9218      	str	r2, [sp, #96]	; 0x60
 80145a2:	9319      	str	r3, [sp, #100]	; 0x64
 80145a4:	e7dd      	b.n	8014562 <_strtod_l+0xb9a>
 80145a6:	4b11      	ldr	r3, [pc, #68]	; (80145ec <_strtod_l+0xc24>)
 80145a8:	f7eb ff5e 	bl	8000468 <__aeabi_dcmplt>
 80145ac:	e7b1      	b.n	8014512 <_strtod_l+0xb4a>
 80145ae:	46c0      	nop			; (mov r8, r8)
 80145b0:	fff00000 	.word	0xfff00000
 80145b4:	000fffff 	.word	0x000fffff
 80145b8:	3ff00000 	.word	0x3ff00000
 80145bc:	7ff00000 	.word	0x7ff00000
 80145c0:	7fe00000 	.word	0x7fe00000
 80145c4:	fcb00000 	.word	0xfcb00000
 80145c8:	7c9fffff 	.word	0x7c9fffff
 80145cc:	7fefffff 	.word	0x7fefffff
 80145d0:	3fe00000 	.word	0x3fe00000
 80145d4:	bff00000 	.word	0xbff00000
 80145d8:	94a03595 	.word	0x94a03595
 80145dc:	3fdfffff 	.word	0x3fdfffff
 80145e0:	35afe535 	.word	0x35afe535
 80145e4:	ffc00000 	.word	0xffc00000
 80145e8:	41dfffff 	.word	0x41dfffff
 80145ec:	3fcfffff 	.word	0x3fcfffff

080145f0 <strtod>:
 80145f0:	b510      	push	{r4, lr}
 80145f2:	000a      	movs	r2, r1
 80145f4:	0001      	movs	r1, r0
 80145f6:	4803      	ldr	r0, [pc, #12]	; (8014604 <strtod+0x14>)
 80145f8:	4b03      	ldr	r3, [pc, #12]	; (8014608 <strtod+0x18>)
 80145fa:	6800      	ldr	r0, [r0, #0]
 80145fc:	f7ff f9e4 	bl	80139c8 <_strtod_l>
 8014600:	bd10      	pop	{r4, pc}
 8014602:	46c0      	nop			; (mov r8, r8)
 8014604:	200000cc 	.word	0x200000cc
 8014608:	20000910 	.word	0x20000910

0801460c <strtok>:
 801460c:	4b03      	ldr	r3, [pc, #12]	; (801461c <strtok+0x10>)
 801460e:	b510      	push	{r4, lr}
 8014610:	681a      	ldr	r2, [r3, #0]
 8014612:	2301      	movs	r3, #1
 8014614:	325c      	adds	r2, #92	; 0x5c
 8014616:	f000 f803 	bl	8014620 <__strtok_r>
 801461a:	bd10      	pop	{r4, pc}
 801461c:	200000cc 	.word	0x200000cc

08014620 <__strtok_r>:
 8014620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014622:	2800      	cmp	r0, #0
 8014624:	d102      	bne.n	801462c <__strtok_r+0xc>
 8014626:	6810      	ldr	r0, [r2, #0]
 8014628:	2800      	cmp	r0, #0
 801462a:	d013      	beq.n	8014654 <__strtok_r+0x34>
 801462c:	0004      	movs	r4, r0
 801462e:	0020      	movs	r0, r4
 8014630:	000e      	movs	r6, r1
 8014632:	7805      	ldrb	r5, [r0, #0]
 8014634:	3401      	adds	r4, #1
 8014636:	7837      	ldrb	r7, [r6, #0]
 8014638:	2f00      	cmp	r7, #0
 801463a:	d104      	bne.n	8014646 <__strtok_r+0x26>
 801463c:	2d00      	cmp	r5, #0
 801463e:	d10f      	bne.n	8014660 <__strtok_r+0x40>
 8014640:	0028      	movs	r0, r5
 8014642:	6015      	str	r5, [r2, #0]
 8014644:	e006      	b.n	8014654 <__strtok_r+0x34>
 8014646:	3601      	adds	r6, #1
 8014648:	42bd      	cmp	r5, r7
 801464a:	d1f4      	bne.n	8014636 <__strtok_r+0x16>
 801464c:	2b00      	cmp	r3, #0
 801464e:	d1ee      	bne.n	801462e <__strtok_r+0xe>
 8014650:	6014      	str	r4, [r2, #0]
 8014652:	7003      	strb	r3, [r0, #0]
 8014654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014656:	002f      	movs	r7, r5
 8014658:	e00f      	b.n	801467a <__strtok_r+0x5a>
 801465a:	3301      	adds	r3, #1
 801465c:	2e00      	cmp	r6, #0
 801465e:	d104      	bne.n	801466a <__strtok_r+0x4a>
 8014660:	0023      	movs	r3, r4
 8014662:	3401      	adds	r4, #1
 8014664:	781d      	ldrb	r5, [r3, #0]
 8014666:	0027      	movs	r7, r4
 8014668:	000b      	movs	r3, r1
 801466a:	781e      	ldrb	r6, [r3, #0]
 801466c:	42b5      	cmp	r5, r6
 801466e:	d1f4      	bne.n	801465a <__strtok_r+0x3a>
 8014670:	2d00      	cmp	r5, #0
 8014672:	d0f0      	beq.n	8014656 <__strtok_r+0x36>
 8014674:	2300      	movs	r3, #0
 8014676:	3c01      	subs	r4, #1
 8014678:	7023      	strb	r3, [r4, #0]
 801467a:	6017      	str	r7, [r2, #0]
 801467c:	e7ea      	b.n	8014654 <__strtok_r+0x34>
	...

08014680 <_strtol_l.constprop.0>:
 8014680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014682:	b087      	sub	sp, #28
 8014684:	001e      	movs	r6, r3
 8014686:	9005      	str	r0, [sp, #20]
 8014688:	9101      	str	r1, [sp, #4]
 801468a:	9202      	str	r2, [sp, #8]
 801468c:	2b01      	cmp	r3, #1
 801468e:	d045      	beq.n	801471c <_strtol_l.constprop.0+0x9c>
 8014690:	000b      	movs	r3, r1
 8014692:	2e24      	cmp	r6, #36	; 0x24
 8014694:	d842      	bhi.n	801471c <_strtol_l.constprop.0+0x9c>
 8014696:	4a3f      	ldr	r2, [pc, #252]	; (8014794 <_strtol_l.constprop.0+0x114>)
 8014698:	2108      	movs	r1, #8
 801469a:	4694      	mov	ip, r2
 801469c:	001a      	movs	r2, r3
 801469e:	4660      	mov	r0, ip
 80146a0:	7814      	ldrb	r4, [r2, #0]
 80146a2:	3301      	adds	r3, #1
 80146a4:	5d00      	ldrb	r0, [r0, r4]
 80146a6:	001d      	movs	r5, r3
 80146a8:	0007      	movs	r7, r0
 80146aa:	400f      	ands	r7, r1
 80146ac:	4208      	tst	r0, r1
 80146ae:	d1f5      	bne.n	801469c <_strtol_l.constprop.0+0x1c>
 80146b0:	2c2d      	cmp	r4, #45	; 0x2d
 80146b2:	d13a      	bne.n	801472a <_strtol_l.constprop.0+0xaa>
 80146b4:	2701      	movs	r7, #1
 80146b6:	781c      	ldrb	r4, [r3, #0]
 80146b8:	1c95      	adds	r5, r2, #2
 80146ba:	2e00      	cmp	r6, #0
 80146bc:	d065      	beq.n	801478a <_strtol_l.constprop.0+0x10a>
 80146be:	2e10      	cmp	r6, #16
 80146c0:	d109      	bne.n	80146d6 <_strtol_l.constprop.0+0x56>
 80146c2:	2c30      	cmp	r4, #48	; 0x30
 80146c4:	d107      	bne.n	80146d6 <_strtol_l.constprop.0+0x56>
 80146c6:	2220      	movs	r2, #32
 80146c8:	782b      	ldrb	r3, [r5, #0]
 80146ca:	4393      	bics	r3, r2
 80146cc:	2b58      	cmp	r3, #88	; 0x58
 80146ce:	d157      	bne.n	8014780 <_strtol_l.constprop.0+0x100>
 80146d0:	2610      	movs	r6, #16
 80146d2:	786c      	ldrb	r4, [r5, #1]
 80146d4:	3502      	adds	r5, #2
 80146d6:	4b30      	ldr	r3, [pc, #192]	; (8014798 <_strtol_l.constprop.0+0x118>)
 80146d8:	0031      	movs	r1, r6
 80146da:	18fb      	adds	r3, r7, r3
 80146dc:	0018      	movs	r0, r3
 80146de:	9303      	str	r3, [sp, #12]
 80146e0:	f7eb fdbc 	bl	800025c <__aeabi_uidivmod>
 80146e4:	2300      	movs	r3, #0
 80146e6:	2201      	movs	r2, #1
 80146e8:	4684      	mov	ip, r0
 80146ea:	0018      	movs	r0, r3
 80146ec:	9104      	str	r1, [sp, #16]
 80146ee:	4252      	negs	r2, r2
 80146f0:	0021      	movs	r1, r4
 80146f2:	3930      	subs	r1, #48	; 0x30
 80146f4:	2909      	cmp	r1, #9
 80146f6:	d81d      	bhi.n	8014734 <_strtol_l.constprop.0+0xb4>
 80146f8:	000c      	movs	r4, r1
 80146fa:	42a6      	cmp	r6, r4
 80146fc:	dd28      	ble.n	8014750 <_strtol_l.constprop.0+0xd0>
 80146fe:	2b00      	cmp	r3, #0
 8014700:	db24      	blt.n	801474c <_strtol_l.constprop.0+0xcc>
 8014702:	0013      	movs	r3, r2
 8014704:	4584      	cmp	ip, r0
 8014706:	d306      	bcc.n	8014716 <_strtol_l.constprop.0+0x96>
 8014708:	d102      	bne.n	8014710 <_strtol_l.constprop.0+0x90>
 801470a:	9904      	ldr	r1, [sp, #16]
 801470c:	42a1      	cmp	r1, r4
 801470e:	db02      	blt.n	8014716 <_strtol_l.constprop.0+0x96>
 8014710:	2301      	movs	r3, #1
 8014712:	4370      	muls	r0, r6
 8014714:	1820      	adds	r0, r4, r0
 8014716:	782c      	ldrb	r4, [r5, #0]
 8014718:	3501      	adds	r5, #1
 801471a:	e7e9      	b.n	80146f0 <_strtol_l.constprop.0+0x70>
 801471c:	f002 f944 	bl	80169a8 <__errno>
 8014720:	2316      	movs	r3, #22
 8014722:	6003      	str	r3, [r0, #0]
 8014724:	2000      	movs	r0, #0
 8014726:	b007      	add	sp, #28
 8014728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801472a:	2c2b      	cmp	r4, #43	; 0x2b
 801472c:	d1c5      	bne.n	80146ba <_strtol_l.constprop.0+0x3a>
 801472e:	781c      	ldrb	r4, [r3, #0]
 8014730:	1c95      	adds	r5, r2, #2
 8014732:	e7c2      	b.n	80146ba <_strtol_l.constprop.0+0x3a>
 8014734:	0021      	movs	r1, r4
 8014736:	3941      	subs	r1, #65	; 0x41
 8014738:	2919      	cmp	r1, #25
 801473a:	d801      	bhi.n	8014740 <_strtol_l.constprop.0+0xc0>
 801473c:	3c37      	subs	r4, #55	; 0x37
 801473e:	e7dc      	b.n	80146fa <_strtol_l.constprop.0+0x7a>
 8014740:	0021      	movs	r1, r4
 8014742:	3961      	subs	r1, #97	; 0x61
 8014744:	2919      	cmp	r1, #25
 8014746:	d803      	bhi.n	8014750 <_strtol_l.constprop.0+0xd0>
 8014748:	3c57      	subs	r4, #87	; 0x57
 801474a:	e7d6      	b.n	80146fa <_strtol_l.constprop.0+0x7a>
 801474c:	0013      	movs	r3, r2
 801474e:	e7e2      	b.n	8014716 <_strtol_l.constprop.0+0x96>
 8014750:	2b00      	cmp	r3, #0
 8014752:	da09      	bge.n	8014768 <_strtol_l.constprop.0+0xe8>
 8014754:	2322      	movs	r3, #34	; 0x22
 8014756:	9a05      	ldr	r2, [sp, #20]
 8014758:	9803      	ldr	r0, [sp, #12]
 801475a:	6013      	str	r3, [r2, #0]
 801475c:	9b02      	ldr	r3, [sp, #8]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d0e1      	beq.n	8014726 <_strtol_l.constprop.0+0xa6>
 8014762:	1e6b      	subs	r3, r5, #1
 8014764:	9301      	str	r3, [sp, #4]
 8014766:	e007      	b.n	8014778 <_strtol_l.constprop.0+0xf8>
 8014768:	2f00      	cmp	r7, #0
 801476a:	d000      	beq.n	801476e <_strtol_l.constprop.0+0xee>
 801476c:	4240      	negs	r0, r0
 801476e:	9a02      	ldr	r2, [sp, #8]
 8014770:	2a00      	cmp	r2, #0
 8014772:	d0d8      	beq.n	8014726 <_strtol_l.constprop.0+0xa6>
 8014774:	2b00      	cmp	r3, #0
 8014776:	d1f4      	bne.n	8014762 <_strtol_l.constprop.0+0xe2>
 8014778:	9b02      	ldr	r3, [sp, #8]
 801477a:	9a01      	ldr	r2, [sp, #4]
 801477c:	601a      	str	r2, [r3, #0]
 801477e:	e7d2      	b.n	8014726 <_strtol_l.constprop.0+0xa6>
 8014780:	2430      	movs	r4, #48	; 0x30
 8014782:	2e00      	cmp	r6, #0
 8014784:	d1a7      	bne.n	80146d6 <_strtol_l.constprop.0+0x56>
 8014786:	3608      	adds	r6, #8
 8014788:	e7a5      	b.n	80146d6 <_strtol_l.constprop.0+0x56>
 801478a:	2c30      	cmp	r4, #48	; 0x30
 801478c:	d09b      	beq.n	80146c6 <_strtol_l.constprop.0+0x46>
 801478e:	260a      	movs	r6, #10
 8014790:	e7a1      	b.n	80146d6 <_strtol_l.constprop.0+0x56>
 8014792:	46c0      	nop			; (mov r8, r8)
 8014794:	0801c626 	.word	0x0801c626
 8014798:	7fffffff 	.word	0x7fffffff

0801479c <strtol>:
 801479c:	b510      	push	{r4, lr}
 801479e:	0013      	movs	r3, r2
 80147a0:	000a      	movs	r2, r1
 80147a2:	0001      	movs	r1, r0
 80147a4:	4802      	ldr	r0, [pc, #8]	; (80147b0 <strtol+0x14>)
 80147a6:	6800      	ldr	r0, [r0, #0]
 80147a8:	f7ff ff6a 	bl	8014680 <_strtol_l.constprop.0>
 80147ac:	bd10      	pop	{r4, pc}
 80147ae:	46c0      	nop			; (mov r8, r8)
 80147b0:	200000cc 	.word	0x200000cc

080147b4 <_svfprintf_r>:
 80147b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147b6:	b0d9      	sub	sp, #356	; 0x164
 80147b8:	001c      	movs	r4, r3
 80147ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80147bc:	9208      	str	r2, [sp, #32]
 80147be:	900a      	str	r0, [sp, #40]	; 0x28
 80147c0:	f002 fd8e 	bl	80172e0 <_localeconv_r>
 80147c4:	6803      	ldr	r3, [r0, #0]
 80147c6:	0018      	movs	r0, r3
 80147c8:	931c      	str	r3, [sp, #112]	; 0x70
 80147ca:	f7eb fca5 	bl	8000118 <strlen>
 80147ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147d0:	9016      	str	r0, [sp, #88]	; 0x58
 80147d2:	899b      	ldrh	r3, [r3, #12]
 80147d4:	061b      	lsls	r3, r3, #24
 80147d6:	d518      	bpl.n	801480a <_svfprintf_r+0x56>
 80147d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147da:	691b      	ldr	r3, [r3, #16]
 80147dc:	9309      	str	r3, [sp, #36]	; 0x24
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d113      	bne.n	801480a <_svfprintf_r+0x56>
 80147e2:	2140      	movs	r1, #64	; 0x40
 80147e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80147e6:	f7fe fc53 	bl	8013090 <_malloc_r>
 80147ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147ec:	6018      	str	r0, [r3, #0]
 80147ee:	6118      	str	r0, [r3, #16]
 80147f0:	2800      	cmp	r0, #0
 80147f2:	d107      	bne.n	8014804 <_svfprintf_r+0x50>
 80147f4:	230c      	movs	r3, #12
 80147f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80147f8:	6013      	str	r3, [r2, #0]
 80147fa:	3b0d      	subs	r3, #13
 80147fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80147fe:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014800:	b059      	add	sp, #356	; 0x164
 8014802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014804:	2340      	movs	r3, #64	; 0x40
 8014806:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014808:	6153      	str	r3, [r2, #20]
 801480a:	2300      	movs	r3, #0
 801480c:	2200      	movs	r2, #0
 801480e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014810:	932d      	str	r3, [sp, #180]	; 0xb4
 8014812:	930e      	str	r3, [sp, #56]	; 0x38
 8014814:	2300      	movs	r3, #0
 8014816:	9214      	str	r2, [sp, #80]	; 0x50
 8014818:	9315      	str	r3, [sp, #84]	; 0x54
 801481a:	2300      	movs	r3, #0
 801481c:	af2f      	add	r7, sp, #188	; 0xbc
 801481e:	972c      	str	r7, [sp, #176]	; 0xb0
 8014820:	931f      	str	r3, [sp, #124]	; 0x7c
 8014822:	931e      	str	r3, [sp, #120]	; 0x78
 8014824:	9312      	str	r3, [sp, #72]	; 0x48
 8014826:	931b      	str	r3, [sp, #108]	; 0x6c
 8014828:	931d      	str	r3, [sp, #116]	; 0x74
 801482a:	9317      	str	r3, [sp, #92]	; 0x5c
 801482c:	9d08      	ldr	r5, [sp, #32]
 801482e:	782b      	ldrb	r3, [r5, #0]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d002      	beq.n	801483a <_svfprintf_r+0x86>
 8014834:	2b25      	cmp	r3, #37	; 0x25
 8014836:	d000      	beq.n	801483a <_svfprintf_r+0x86>
 8014838:	e092      	b.n	8014960 <_svfprintf_r+0x1ac>
 801483a:	9b08      	ldr	r3, [sp, #32]
 801483c:	1aee      	subs	r6, r5, r3
 801483e:	429d      	cmp	r5, r3
 8014840:	d017      	beq.n	8014872 <_svfprintf_r+0xbe>
 8014842:	603b      	str	r3, [r7, #0]
 8014844:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014846:	607e      	str	r6, [r7, #4]
 8014848:	199b      	adds	r3, r3, r6
 801484a:	932e      	str	r3, [sp, #184]	; 0xb8
 801484c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801484e:	3708      	adds	r7, #8
 8014850:	9309      	str	r3, [sp, #36]	; 0x24
 8014852:	3301      	adds	r3, #1
 8014854:	932d      	str	r3, [sp, #180]	; 0xb4
 8014856:	2b07      	cmp	r3, #7
 8014858:	dd08      	ble.n	801486c <_svfprintf_r+0xb8>
 801485a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801485c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801485e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014860:	f003 fa28 	bl	8017cb4 <__ssprint_r>
 8014864:	2800      	cmp	r0, #0
 8014866:	d000      	beq.n	801486a <_svfprintf_r+0xb6>
 8014868:	e1cf      	b.n	8014c0a <_svfprintf_r+0x456>
 801486a:	af2f      	add	r7, sp, #188	; 0xbc
 801486c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801486e:	199b      	adds	r3, r3, r6
 8014870:	9317      	str	r3, [sp, #92]	; 0x5c
 8014872:	782b      	ldrb	r3, [r5, #0]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d101      	bne.n	801487c <_svfprintf_r+0xc8>
 8014878:	f001 f9bc 	bl	8015bf4 <_svfprintf_r+0x1440>
 801487c:	221b      	movs	r2, #27
 801487e:	2300      	movs	r3, #0
 8014880:	a91e      	add	r1, sp, #120	; 0x78
 8014882:	1852      	adds	r2, r2, r1
 8014884:	7013      	strb	r3, [r2, #0]
 8014886:	2201      	movs	r2, #1
 8014888:	001e      	movs	r6, r3
 801488a:	4252      	negs	r2, r2
 801488c:	3501      	adds	r5, #1
 801488e:	9209      	str	r2, [sp, #36]	; 0x24
 8014890:	9318      	str	r3, [sp, #96]	; 0x60
 8014892:	1c6b      	adds	r3, r5, #1
 8014894:	9313      	str	r3, [sp, #76]	; 0x4c
 8014896:	782b      	ldrb	r3, [r5, #0]
 8014898:	930f      	str	r3, [sp, #60]	; 0x3c
 801489a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801489c:	3820      	subs	r0, #32
 801489e:	285a      	cmp	r0, #90	; 0x5a
 80148a0:	d901      	bls.n	80148a6 <_svfprintf_r+0xf2>
 80148a2:	f000 fe1f 	bl	80154e4 <_svfprintf_r+0xd30>
 80148a6:	f7eb fc49 	bl	800013c <__gnu_thumb1_case_uhi>
 80148aa:	0078      	.short	0x0078
 80148ac:	061d061d 	.word	0x061d061d
 80148b0:	061d0082 	.word	0x061d0082
 80148b4:	061d061d 	.word	0x061d061d
 80148b8:	061d005d 	.word	0x061d005d
 80148bc:	0084061d 	.word	0x0084061d
 80148c0:	061d008c 	.word	0x061d008c
 80148c4:	0091008a 	.word	0x0091008a
 80148c8:	00b2061d 	.word	0x00b2061d
 80148cc:	00b400b4 	.word	0x00b400b4
 80148d0:	00b400b4 	.word	0x00b400b4
 80148d4:	00b400b4 	.word	0x00b400b4
 80148d8:	00b400b4 	.word	0x00b400b4
 80148dc:	061d00b4 	.word	0x061d00b4
 80148e0:	061d061d 	.word	0x061d061d
 80148e4:	061d061d 	.word	0x061d061d
 80148e8:	061d061d 	.word	0x061d061d
 80148ec:	061d013b 	.word	0x061d013b
 80148f0:	00f400e0 	.word	0x00f400e0
 80148f4:	013b013b 	.word	0x013b013b
 80148f8:	061d013b 	.word	0x061d013b
 80148fc:	061d061d 	.word	0x061d061d
 8014900:	00c7061d 	.word	0x00c7061d
 8014904:	061d061d 	.word	0x061d061d
 8014908:	061d04d3 	.word	0x061d04d3
 801490c:	061d061d 	.word	0x061d061d
 8014910:	061d0517 	.word	0x061d0517
 8014914:	061d0537 	.word	0x061d0537
 8014918:	0564061d 	.word	0x0564061d
 801491c:	061d061d 	.word	0x061d061d
 8014920:	061d061d 	.word	0x061d061d
 8014924:	061d061d 	.word	0x061d061d
 8014928:	061d061d 	.word	0x061d061d
 801492c:	061d013b 	.word	0x061d013b
 8014930:	00f600e0 	.word	0x00f600e0
 8014934:	013b013b 	.word	0x013b013b
 8014938:	00c9013b 	.word	0x00c9013b
 801493c:	00dc00f6 	.word	0x00dc00f6
 8014940:	00d5061d 	.word	0x00d5061d
 8014944:	04b3061d 	.word	0x04b3061d
 8014948:	050604d5 	.word	0x050604d5
 801494c:	061d00dc 	.word	0x061d00dc
 8014950:	00800517 	.word	0x00800517
 8014954:	061d0539 	.word	0x061d0539
 8014958:	0584061d 	.word	0x0584061d
 801495c:	0080061d 	.word	0x0080061d
 8014960:	3501      	adds	r5, #1
 8014962:	e764      	b.n	801482e <_svfprintf_r+0x7a>
 8014964:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014966:	f002 fcbb 	bl	80172e0 <_localeconv_r>
 801496a:	6843      	ldr	r3, [r0, #4]
 801496c:	0018      	movs	r0, r3
 801496e:	931d      	str	r3, [sp, #116]	; 0x74
 8014970:	f7eb fbd2 	bl	8000118 <strlen>
 8014974:	901b      	str	r0, [sp, #108]	; 0x6c
 8014976:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014978:	f002 fcb2 	bl	80172e0 <_localeconv_r>
 801497c:	6883      	ldr	r3, [r0, #8]
 801497e:	9312      	str	r3, [sp, #72]	; 0x48
 8014980:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014982:	2b00      	cmp	r3, #0
 8014984:	d011      	beq.n	80149aa <_svfprintf_r+0x1f6>
 8014986:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014988:	2b00      	cmp	r3, #0
 801498a:	d00e      	beq.n	80149aa <_svfprintf_r+0x1f6>
 801498c:	781b      	ldrb	r3, [r3, #0]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d00b      	beq.n	80149aa <_svfprintf_r+0x1f6>
 8014992:	2380      	movs	r3, #128	; 0x80
 8014994:	00db      	lsls	r3, r3, #3
 8014996:	431e      	orrs	r6, r3
 8014998:	e007      	b.n	80149aa <_svfprintf_r+0x1f6>
 801499a:	231b      	movs	r3, #27
 801499c:	aa1e      	add	r2, sp, #120	; 0x78
 801499e:	189b      	adds	r3, r3, r2
 80149a0:	781a      	ldrb	r2, [r3, #0]
 80149a2:	2a00      	cmp	r2, #0
 80149a4:	d101      	bne.n	80149aa <_svfprintf_r+0x1f6>
 80149a6:	3220      	adds	r2, #32
 80149a8:	701a      	strb	r2, [r3, #0]
 80149aa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80149ac:	e771      	b.n	8014892 <_svfprintf_r+0xde>
 80149ae:	2301      	movs	r3, #1
 80149b0:	e7f1      	b.n	8014996 <_svfprintf_r+0x1e2>
 80149b2:	cc08      	ldmia	r4!, {r3}
 80149b4:	9318      	str	r3, [sp, #96]	; 0x60
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	daf7      	bge.n	80149aa <_svfprintf_r+0x1f6>
 80149ba:	425b      	negs	r3, r3
 80149bc:	9318      	str	r3, [sp, #96]	; 0x60
 80149be:	2304      	movs	r3, #4
 80149c0:	e7e9      	b.n	8014996 <_svfprintf_r+0x1e2>
 80149c2:	231b      	movs	r3, #27
 80149c4:	aa1e      	add	r2, sp, #120	; 0x78
 80149c6:	189b      	adds	r3, r3, r2
 80149c8:	222b      	movs	r2, #43	; 0x2b
 80149ca:	e7ed      	b.n	80149a8 <_svfprintf_r+0x1f4>
 80149cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80149ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80149d0:	7812      	ldrb	r2, [r2, #0]
 80149d2:	3301      	adds	r3, #1
 80149d4:	920f      	str	r2, [sp, #60]	; 0x3c
 80149d6:	2a2a      	cmp	r2, #42	; 0x2a
 80149d8:	d010      	beq.n	80149fc <_svfprintf_r+0x248>
 80149da:	2200      	movs	r2, #0
 80149dc:	9209      	str	r2, [sp, #36]	; 0x24
 80149de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80149e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80149e2:	3a30      	subs	r2, #48	; 0x30
 80149e4:	2a09      	cmp	r2, #9
 80149e6:	d900      	bls.n	80149ea <_svfprintf_r+0x236>
 80149e8:	e757      	b.n	801489a <_svfprintf_r+0xe6>
 80149ea:	210a      	movs	r1, #10
 80149ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149ee:	4348      	muls	r0, r1
 80149f0:	1882      	adds	r2, r0, r2
 80149f2:	9209      	str	r2, [sp, #36]	; 0x24
 80149f4:	781a      	ldrb	r2, [r3, #0]
 80149f6:	3301      	adds	r3, #1
 80149f8:	920f      	str	r2, [sp, #60]	; 0x3c
 80149fa:	e7f0      	b.n	80149de <_svfprintf_r+0x22a>
 80149fc:	cc04      	ldmia	r4!, {r2}
 80149fe:	9209      	str	r2, [sp, #36]	; 0x24
 8014a00:	2a00      	cmp	r2, #0
 8014a02:	da02      	bge.n	8014a0a <_svfprintf_r+0x256>
 8014a04:	2201      	movs	r2, #1
 8014a06:	4252      	negs	r2, r2
 8014a08:	9209      	str	r2, [sp, #36]	; 0x24
 8014a0a:	9313      	str	r3, [sp, #76]	; 0x4c
 8014a0c:	e7cd      	b.n	80149aa <_svfprintf_r+0x1f6>
 8014a0e:	2380      	movs	r3, #128	; 0x80
 8014a10:	e7c1      	b.n	8014996 <_svfprintf_r+0x1e2>
 8014a12:	2200      	movs	r2, #0
 8014a14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a16:	9218      	str	r2, [sp, #96]	; 0x60
 8014a18:	210a      	movs	r1, #10
 8014a1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014a1c:	434a      	muls	r2, r1
 8014a1e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014a20:	3930      	subs	r1, #48	; 0x30
 8014a22:	188a      	adds	r2, r1, r2
 8014a24:	9218      	str	r2, [sp, #96]	; 0x60
 8014a26:	001a      	movs	r2, r3
 8014a28:	7812      	ldrb	r2, [r2, #0]
 8014a2a:	3301      	adds	r3, #1
 8014a2c:	920f      	str	r2, [sp, #60]	; 0x3c
 8014a2e:	3a30      	subs	r2, #48	; 0x30
 8014a30:	9313      	str	r3, [sp, #76]	; 0x4c
 8014a32:	2a09      	cmp	r2, #9
 8014a34:	d9f0      	bls.n	8014a18 <_svfprintf_r+0x264>
 8014a36:	e730      	b.n	801489a <_svfprintf_r+0xe6>
 8014a38:	2308      	movs	r3, #8
 8014a3a:	e7ac      	b.n	8014996 <_svfprintf_r+0x1e2>
 8014a3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a3e:	781b      	ldrb	r3, [r3, #0]
 8014a40:	2b68      	cmp	r3, #104	; 0x68
 8014a42:	d105      	bne.n	8014a50 <_svfprintf_r+0x29c>
 8014a44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a46:	3301      	adds	r3, #1
 8014a48:	9313      	str	r3, [sp, #76]	; 0x4c
 8014a4a:	2380      	movs	r3, #128	; 0x80
 8014a4c:	009b      	lsls	r3, r3, #2
 8014a4e:	e7a2      	b.n	8014996 <_svfprintf_r+0x1e2>
 8014a50:	2340      	movs	r3, #64	; 0x40
 8014a52:	e7a0      	b.n	8014996 <_svfprintf_r+0x1e2>
 8014a54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a56:	781b      	ldrb	r3, [r3, #0]
 8014a58:	2b6c      	cmp	r3, #108	; 0x6c
 8014a5a:	d104      	bne.n	8014a66 <_svfprintf_r+0x2b2>
 8014a5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a5e:	3301      	adds	r3, #1
 8014a60:	9313      	str	r3, [sp, #76]	; 0x4c
 8014a62:	2320      	movs	r3, #32
 8014a64:	e797      	b.n	8014996 <_svfprintf_r+0x1e2>
 8014a66:	2310      	movs	r3, #16
 8014a68:	e795      	b.n	8014996 <_svfprintf_r+0x1e2>
 8014a6a:	0022      	movs	r2, r4
 8014a6c:	ca08      	ldmia	r2!, {r3}
 8014a6e:	a83f      	add	r0, sp, #252	; 0xfc
 8014a70:	920d      	str	r2, [sp, #52]	; 0x34
 8014a72:	221b      	movs	r2, #27
 8014a74:	7003      	strb	r3, [r0, #0]
 8014a76:	2300      	movs	r3, #0
 8014a78:	a91e      	add	r1, sp, #120	; 0x78
 8014a7a:	1852      	adds	r2, r2, r1
 8014a7c:	7013      	strb	r3, [r2, #0]
 8014a7e:	930c      	str	r3, [sp, #48]	; 0x30
 8014a80:	3301      	adds	r3, #1
 8014a82:	9309      	str	r3, [sp, #36]	; 0x24
 8014a84:	2300      	movs	r3, #0
 8014a86:	9008      	str	r0, [sp, #32]
 8014a88:	001d      	movs	r5, r3
 8014a8a:	9319      	str	r3, [sp, #100]	; 0x64
 8014a8c:	9310      	str	r3, [sp, #64]	; 0x40
 8014a8e:	9311      	str	r3, [sp, #68]	; 0x44
 8014a90:	e1f1      	b.n	8014e76 <_svfprintf_r+0x6c2>
 8014a92:	2310      	movs	r3, #16
 8014a94:	431e      	orrs	r6, r3
 8014a96:	06b3      	lsls	r3, r6, #26
 8014a98:	d531      	bpl.n	8014afe <_svfprintf_r+0x34a>
 8014a9a:	2307      	movs	r3, #7
 8014a9c:	3407      	adds	r4, #7
 8014a9e:	439c      	bics	r4, r3
 8014aa0:	0022      	movs	r2, r4
 8014aa2:	ca18      	ldmia	r2!, {r3, r4}
 8014aa4:	9306      	str	r3, [sp, #24]
 8014aa6:	9407      	str	r4, [sp, #28]
 8014aa8:	920d      	str	r2, [sp, #52]	; 0x34
 8014aaa:	9a07      	ldr	r2, [sp, #28]
 8014aac:	2301      	movs	r3, #1
 8014aae:	2a00      	cmp	r2, #0
 8014ab0:	da0b      	bge.n	8014aca <_svfprintf_r+0x316>
 8014ab2:	9c06      	ldr	r4, [sp, #24]
 8014ab4:	9d07      	ldr	r5, [sp, #28]
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	4261      	negs	r1, r4
 8014aba:	41aa      	sbcs	r2, r5
 8014abc:	9106      	str	r1, [sp, #24]
 8014abe:	9207      	str	r2, [sp, #28]
 8014ac0:	221b      	movs	r2, #27
 8014ac2:	a91e      	add	r1, sp, #120	; 0x78
 8014ac4:	1852      	adds	r2, r2, r1
 8014ac6:	212d      	movs	r1, #45	; 0x2d
 8014ac8:	7011      	strb	r1, [r2, #0]
 8014aca:	9907      	ldr	r1, [sp, #28]
 8014acc:	9a06      	ldr	r2, [sp, #24]
 8014ace:	430a      	orrs	r2, r1
 8014ad0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014ad2:	3101      	adds	r1, #1
 8014ad4:	d101      	bne.n	8014ada <_svfprintf_r+0x326>
 8014ad6:	f001 f89a 	bl	8015c0e <_svfprintf_r+0x145a>
 8014ada:	2180      	movs	r1, #128	; 0x80
 8014adc:	0035      	movs	r5, r6
 8014ade:	438d      	bics	r5, r1
 8014ae0:	2a00      	cmp	r2, #0
 8014ae2:	d001      	beq.n	8014ae8 <_svfprintf_r+0x334>
 8014ae4:	f001 f898 	bl	8015c18 <_svfprintf_r+0x1464>
 8014ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014aea:	2a00      	cmp	r2, #0
 8014aec:	d101      	bne.n	8014af2 <_svfprintf_r+0x33e>
 8014aee:	f000 fcec 	bl	80154ca <_svfprintf_r+0xd16>
 8014af2:	2b01      	cmp	r3, #1
 8014af4:	d001      	beq.n	8014afa <_svfprintf_r+0x346>
 8014af6:	f001 f893 	bl	8015c20 <_svfprintf_r+0x146c>
 8014afa:	f000 fc7e 	bl	80153fa <_svfprintf_r+0xc46>
 8014afe:	0022      	movs	r2, r4
 8014b00:	ca08      	ldmia	r2!, {r3}
 8014b02:	920d      	str	r2, [sp, #52]	; 0x34
 8014b04:	06f2      	lsls	r2, r6, #27
 8014b06:	d503      	bpl.n	8014b10 <_svfprintf_r+0x35c>
 8014b08:	9306      	str	r3, [sp, #24]
 8014b0a:	17db      	asrs	r3, r3, #31
 8014b0c:	9307      	str	r3, [sp, #28]
 8014b0e:	e7cc      	b.n	8014aaa <_svfprintf_r+0x2f6>
 8014b10:	0672      	lsls	r2, r6, #25
 8014b12:	d501      	bpl.n	8014b18 <_svfprintf_r+0x364>
 8014b14:	b21b      	sxth	r3, r3
 8014b16:	e7f7      	b.n	8014b08 <_svfprintf_r+0x354>
 8014b18:	05b2      	lsls	r2, r6, #22
 8014b1a:	d5f5      	bpl.n	8014b08 <_svfprintf_r+0x354>
 8014b1c:	b25b      	sxtb	r3, r3
 8014b1e:	e7f3      	b.n	8014b08 <_svfprintf_r+0x354>
 8014b20:	2307      	movs	r3, #7
 8014b22:	3407      	adds	r4, #7
 8014b24:	439c      	bics	r4, r3
 8014b26:	0022      	movs	r2, r4
 8014b28:	ca18      	ldmia	r2!, {r3, r4}
 8014b2a:	920d      	str	r2, [sp, #52]	; 0x34
 8014b2c:	2201      	movs	r2, #1
 8014b2e:	9314      	str	r3, [sp, #80]	; 0x50
 8014b30:	9415      	str	r4, [sp, #84]	; 0x54
 8014b32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b34:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8014b36:	005c      	lsls	r4, r3, #1
 8014b38:	0864      	lsrs	r4, r4, #1
 8014b3a:	0028      	movs	r0, r5
 8014b3c:	0021      	movs	r1, r4
 8014b3e:	4b3e      	ldr	r3, [pc, #248]	; (8014c38 <_svfprintf_r+0x484>)
 8014b40:	4252      	negs	r2, r2
 8014b42:	f7ed ffc1 	bl	8002ac8 <__aeabi_dcmpun>
 8014b46:	2800      	cmp	r0, #0
 8014b48:	d126      	bne.n	8014b98 <_svfprintf_r+0x3e4>
 8014b4a:	2201      	movs	r2, #1
 8014b4c:	0028      	movs	r0, r5
 8014b4e:	0021      	movs	r1, r4
 8014b50:	4b39      	ldr	r3, [pc, #228]	; (8014c38 <_svfprintf_r+0x484>)
 8014b52:	4252      	negs	r2, r2
 8014b54:	f7eb fc92 	bl	800047c <__aeabi_dcmple>
 8014b58:	2800      	cmp	r0, #0
 8014b5a:	d11d      	bne.n	8014b98 <_svfprintf_r+0x3e4>
 8014b5c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8014b5e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8014b60:	2200      	movs	r2, #0
 8014b62:	2300      	movs	r3, #0
 8014b64:	f7eb fc80 	bl	8000468 <__aeabi_dcmplt>
 8014b68:	2800      	cmp	r0, #0
 8014b6a:	d004      	beq.n	8014b76 <_svfprintf_r+0x3c2>
 8014b6c:	231b      	movs	r3, #27
 8014b6e:	aa1e      	add	r2, sp, #120	; 0x78
 8014b70:	189b      	adds	r3, r3, r2
 8014b72:	222d      	movs	r2, #45	; 0x2d
 8014b74:	701a      	strb	r2, [r3, #0]
 8014b76:	4b31      	ldr	r3, [pc, #196]	; (8014c3c <_svfprintf_r+0x488>)
 8014b78:	9308      	str	r3, [sp, #32]
 8014b7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b7c:	2b47      	cmp	r3, #71	; 0x47
 8014b7e:	dd01      	ble.n	8014b84 <_svfprintf_r+0x3d0>
 8014b80:	4b2f      	ldr	r3, [pc, #188]	; (8014c40 <_svfprintf_r+0x48c>)
 8014b82:	9308      	str	r3, [sp, #32]
 8014b84:	2380      	movs	r3, #128	; 0x80
 8014b86:	439e      	bics	r6, r3
 8014b88:	2300      	movs	r3, #0
 8014b8a:	930c      	str	r3, [sp, #48]	; 0x30
 8014b8c:	3303      	adds	r3, #3
 8014b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8014b90:	2300      	movs	r3, #0
 8014b92:	9319      	str	r3, [sp, #100]	; 0x64
 8014b94:	f001 f873 	bl	8015c7e <_svfprintf_r+0x14ca>
 8014b98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014b9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b9c:	0010      	movs	r0, r2
 8014b9e:	0019      	movs	r1, r3
 8014ba0:	f7ed ff92 	bl	8002ac8 <__aeabi_dcmpun>
 8014ba4:	2800      	cmp	r0, #0
 8014ba6:	d00e      	beq.n	8014bc6 <_svfprintf_r+0x412>
 8014ba8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	da04      	bge.n	8014bb8 <_svfprintf_r+0x404>
 8014bae:	231b      	movs	r3, #27
 8014bb0:	aa1e      	add	r2, sp, #120	; 0x78
 8014bb2:	189b      	adds	r3, r3, r2
 8014bb4:	222d      	movs	r2, #45	; 0x2d
 8014bb6:	701a      	strb	r2, [r3, #0]
 8014bb8:	4b22      	ldr	r3, [pc, #136]	; (8014c44 <_svfprintf_r+0x490>)
 8014bba:	9308      	str	r3, [sp, #32]
 8014bbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014bbe:	2b47      	cmp	r3, #71	; 0x47
 8014bc0:	dde0      	ble.n	8014b84 <_svfprintf_r+0x3d0>
 8014bc2:	4b21      	ldr	r3, [pc, #132]	; (8014c48 <_svfprintf_r+0x494>)
 8014bc4:	e7dd      	b.n	8014b82 <_svfprintf_r+0x3ce>
 8014bc6:	2320      	movs	r3, #32
 8014bc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014bca:	439a      	bics	r2, r3
 8014bcc:	9210      	str	r2, [sp, #64]	; 0x40
 8014bce:	2a41      	cmp	r2, #65	; 0x41
 8014bd0:	d123      	bne.n	8014c1a <_svfprintf_r+0x466>
 8014bd2:	2230      	movs	r2, #48	; 0x30
 8014bd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014bd6:	ab25      	add	r3, sp, #148	; 0x94
 8014bd8:	701a      	strb	r2, [r3, #0]
 8014bda:	3248      	adds	r2, #72	; 0x48
 8014bdc:	2961      	cmp	r1, #97	; 0x61
 8014bde:	d000      	beq.n	8014be2 <_svfprintf_r+0x42e>
 8014be0:	3a20      	subs	r2, #32
 8014be2:	705a      	strb	r2, [r3, #1]
 8014be4:	2302      	movs	r3, #2
 8014be6:	431e      	orrs	r6, r3
 8014be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bea:	2b63      	cmp	r3, #99	; 0x63
 8014bec:	dd2e      	ble.n	8014c4c <_svfprintf_r+0x498>
 8014bee:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014bf0:	1c59      	adds	r1, r3, #1
 8014bf2:	f7fe fa4d 	bl	8013090 <_malloc_r>
 8014bf6:	9008      	str	r0, [sp, #32]
 8014bf8:	2800      	cmp	r0, #0
 8014bfa:	d000      	beq.n	8014bfe <_svfprintf_r+0x44a>
 8014bfc:	e221      	b.n	8015042 <_svfprintf_r+0x88e>
 8014bfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c00:	899a      	ldrh	r2, [r3, #12]
 8014c02:	2340      	movs	r3, #64	; 0x40
 8014c04:	4313      	orrs	r3, r2
 8014c06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014c08:	8193      	strh	r3, [r2, #12]
 8014c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c0c:	899b      	ldrh	r3, [r3, #12]
 8014c0e:	065b      	lsls	r3, r3, #25
 8014c10:	d400      	bmi.n	8014c14 <_svfprintf_r+0x460>
 8014c12:	e5f4      	b.n	80147fe <_svfprintf_r+0x4a>
 8014c14:	2301      	movs	r3, #1
 8014c16:	425b      	negs	r3, r3
 8014c18:	e5f0      	b.n	80147fc <_svfprintf_r+0x48>
 8014c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c1c:	900c      	str	r0, [sp, #48]	; 0x30
 8014c1e:	3301      	adds	r3, #1
 8014c20:	d100      	bne.n	8014c24 <_svfprintf_r+0x470>
 8014c22:	e211      	b.n	8015048 <_svfprintf_r+0x894>
 8014c24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c26:	2b47      	cmp	r3, #71	; 0x47
 8014c28:	d114      	bne.n	8014c54 <_svfprintf_r+0x4a0>
 8014c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d111      	bne.n	8014c54 <_svfprintf_r+0x4a0>
 8014c30:	3301      	adds	r3, #1
 8014c32:	9309      	str	r3, [sp, #36]	; 0x24
 8014c34:	e00e      	b.n	8014c54 <_svfprintf_r+0x4a0>
 8014c36:	46c0      	nop			; (mov r8, r8)
 8014c38:	7fefffff 	.word	0x7fefffff
 8014c3c:	0801c780 	.word	0x0801c780
 8014c40:	0801c784 	.word	0x0801c784
 8014c44:	0801c788 	.word	0x0801c788
 8014c48:	0801c78c 	.word	0x0801c78c
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8014c50:	ab3f      	add	r3, sp, #252	; 0xfc
 8014c52:	9308      	str	r3, [sp, #32]
 8014c54:	2380      	movs	r3, #128	; 0x80
 8014c56:	005b      	lsls	r3, r3, #1
 8014c58:	4333      	orrs	r3, r6
 8014c5a:	931a      	str	r3, [sp, #104]	; 0x68
 8014c5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c5e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	db00      	blt.n	8014c66 <_svfprintf_r+0x4b2>
 8014c64:	e1f2      	b.n	801504c <_svfprintf_r+0x898>
 8014c66:	2280      	movs	r2, #128	; 0x80
 8014c68:	0612      	lsls	r2, r2, #24
 8014c6a:	4694      	mov	ip, r2
 8014c6c:	4463      	add	r3, ip
 8014c6e:	930e      	str	r3, [sp, #56]	; 0x38
 8014c70:	232d      	movs	r3, #45	; 0x2d
 8014c72:	9322      	str	r3, [sp, #136]	; 0x88
 8014c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c76:	2b41      	cmp	r3, #65	; 0x41
 8014c78:	d000      	beq.n	8014c7c <_svfprintf_r+0x4c8>
 8014c7a:	e200      	b.n	801507e <_svfprintf_r+0x8ca>
 8014c7c:	0028      	movs	r0, r5
 8014c7e:	aa26      	add	r2, sp, #152	; 0x98
 8014c80:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014c82:	f002 ffdf 	bl	8017c44 <frexp>
 8014c86:	23ff      	movs	r3, #255	; 0xff
 8014c88:	2200      	movs	r2, #0
 8014c8a:	059b      	lsls	r3, r3, #22
 8014c8c:	f7ed f91e 	bl	8001ecc <__aeabi_dmul>
 8014c90:	2200      	movs	r2, #0
 8014c92:	2300      	movs	r3, #0
 8014c94:	0004      	movs	r4, r0
 8014c96:	000d      	movs	r5, r1
 8014c98:	f7eb fbe0 	bl	800045c <__aeabi_dcmpeq>
 8014c9c:	2800      	cmp	r0, #0
 8014c9e:	d001      	beq.n	8014ca4 <_svfprintf_r+0x4f0>
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	9326      	str	r3, [sp, #152]	; 0x98
 8014ca4:	4bd4      	ldr	r3, [pc, #848]	; (8014ff8 <_svfprintf_r+0x844>)
 8014ca6:	9319      	str	r3, [sp, #100]	; 0x64
 8014ca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014caa:	2b61      	cmp	r3, #97	; 0x61
 8014cac:	d001      	beq.n	8014cb2 <_svfprintf_r+0x4fe>
 8014cae:	4bd3      	ldr	r3, [pc, #844]	; (8014ffc <_svfprintf_r+0x848>)
 8014cb0:	9319      	str	r3, [sp, #100]	; 0x64
 8014cb2:	9b08      	ldr	r3, [sp, #32]
 8014cb4:	930e      	str	r3, [sp, #56]	; 0x38
 8014cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cb8:	3b01      	subs	r3, #1
 8014cba:	9311      	str	r3, [sp, #68]	; 0x44
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	4bd0      	ldr	r3, [pc, #832]	; (8015000 <_svfprintf_r+0x84c>)
 8014cc0:	0020      	movs	r0, r4
 8014cc2:	0029      	movs	r1, r5
 8014cc4:	f7ed f902 	bl	8001ecc <__aeabi_dmul>
 8014cc8:	000d      	movs	r5, r1
 8014cca:	0004      	movs	r4, r0
 8014ccc:	f7ed ff1a 	bl	8002b04 <__aeabi_d2iz>
 8014cd0:	9021      	str	r0, [sp, #132]	; 0x84
 8014cd2:	f7ed ff4d 	bl	8002b70 <__aeabi_i2d>
 8014cd6:	0002      	movs	r2, r0
 8014cd8:	000b      	movs	r3, r1
 8014cda:	0020      	movs	r0, r4
 8014cdc:	0029      	movs	r1, r5
 8014cde:	f7ed fb61 	bl	80023a4 <__aeabi_dsub>
 8014ce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ce4:	000d      	movs	r5, r1
 8014ce6:	001a      	movs	r2, r3
 8014ce8:	3201      	adds	r2, #1
 8014cea:	9921      	ldr	r1, [sp, #132]	; 0x84
 8014cec:	920e      	str	r2, [sp, #56]	; 0x38
 8014cee:	9223      	str	r2, [sp, #140]	; 0x8c
 8014cf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014cf2:	0004      	movs	r4, r0
 8014cf4:	5c52      	ldrb	r2, [r2, r1]
 8014cf6:	701a      	strb	r2, [r3, #0]
 8014cf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014cfa:	9320      	str	r3, [sp, #128]	; 0x80
 8014cfc:	3301      	adds	r3, #1
 8014cfe:	d00a      	beq.n	8014d16 <_svfprintf_r+0x562>
 8014d00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d02:	2200      	movs	r2, #0
 8014d04:	3b01      	subs	r3, #1
 8014d06:	9311      	str	r3, [sp, #68]	; 0x44
 8014d08:	0020      	movs	r0, r4
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	0029      	movs	r1, r5
 8014d0e:	f7eb fba5 	bl	800045c <__aeabi_dcmpeq>
 8014d12:	2800      	cmp	r0, #0
 8014d14:	d0d2      	beq.n	8014cbc <_svfprintf_r+0x508>
 8014d16:	2200      	movs	r2, #0
 8014d18:	0020      	movs	r0, r4
 8014d1a:	0029      	movs	r1, r5
 8014d1c:	4bb9      	ldr	r3, [pc, #740]	; (8015004 <_svfprintf_r+0x850>)
 8014d1e:	f7eb fbb7 	bl	8000490 <__aeabi_dcmpgt>
 8014d22:	2800      	cmp	r0, #0
 8014d24:	d10c      	bne.n	8014d40 <_svfprintf_r+0x58c>
 8014d26:	2200      	movs	r2, #0
 8014d28:	0020      	movs	r0, r4
 8014d2a:	0029      	movs	r1, r5
 8014d2c:	4bb5      	ldr	r3, [pc, #724]	; (8015004 <_svfprintf_r+0x850>)
 8014d2e:	f7eb fb95 	bl	800045c <__aeabi_dcmpeq>
 8014d32:	2800      	cmp	r0, #0
 8014d34:	d100      	bne.n	8014d38 <_svfprintf_r+0x584>
 8014d36:	e19c      	b.n	8015072 <_svfprintf_r+0x8be>
 8014d38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d3a:	07db      	lsls	r3, r3, #31
 8014d3c:	d400      	bmi.n	8014d40 <_svfprintf_r+0x58c>
 8014d3e:	e198      	b.n	8015072 <_svfprintf_r+0x8be>
 8014d40:	2030      	movs	r0, #48	; 0x30
 8014d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d44:	932a      	str	r3, [sp, #168]	; 0xa8
 8014d46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014d48:	7bda      	ldrb	r2, [r3, #15]
 8014d4a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014d4c:	3b01      	subs	r3, #1
 8014d4e:	932a      	str	r3, [sp, #168]	; 0xa8
 8014d50:	7819      	ldrb	r1, [r3, #0]
 8014d52:	4291      	cmp	r1, r2
 8014d54:	d100      	bne.n	8014d58 <_svfprintf_r+0x5a4>
 8014d56:	e17c      	b.n	8015052 <_svfprintf_r+0x89e>
 8014d58:	1c4a      	adds	r2, r1, #1
 8014d5a:	b2d2      	uxtb	r2, r2
 8014d5c:	2939      	cmp	r1, #57	; 0x39
 8014d5e:	d101      	bne.n	8014d64 <_svfprintf_r+0x5b0>
 8014d60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014d62:	7a92      	ldrb	r2, [r2, #10]
 8014d64:	701a      	strb	r2, [r3, #0]
 8014d66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014d68:	9a08      	ldr	r2, [sp, #32]
 8014d6a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8014d6c:	1a9b      	subs	r3, r3, r2
 8014d6e:	930e      	str	r3, [sp, #56]	; 0x38
 8014d70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d72:	2b47      	cmp	r3, #71	; 0x47
 8014d74:	d000      	beq.n	8014d78 <_svfprintf_r+0x5c4>
 8014d76:	e1d0      	b.n	801511a <_svfprintf_r+0x966>
 8014d78:	1ceb      	adds	r3, r5, #3
 8014d7a:	db03      	blt.n	8014d84 <_svfprintf_r+0x5d0>
 8014d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d7e:	42ab      	cmp	r3, r5
 8014d80:	db00      	blt.n	8014d84 <_svfprintf_r+0x5d0>
 8014d82:	e1f8      	b.n	8015176 <_svfprintf_r+0x9c2>
 8014d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d86:	3b02      	subs	r3, #2
 8014d88:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d8a:	223c      	movs	r2, #60	; 0x3c
 8014d8c:	466b      	mov	r3, sp
 8014d8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014d90:	189b      	adds	r3, r3, r2
 8014d92:	1e6c      	subs	r4, r5, #1
 8014d94:	3a1c      	subs	r2, #28
 8014d96:	2000      	movs	r0, #0
 8014d98:	781b      	ldrb	r3, [r3, #0]
 8014d9a:	9426      	str	r4, [sp, #152]	; 0x98
 8014d9c:	4391      	bics	r1, r2
 8014d9e:	2941      	cmp	r1, #65	; 0x41
 8014da0:	d102      	bne.n	8014da8 <_svfprintf_r+0x5f4>
 8014da2:	330f      	adds	r3, #15
 8014da4:	b2db      	uxtb	r3, r3
 8014da6:	3001      	adds	r0, #1
 8014da8:	a928      	add	r1, sp, #160	; 0xa0
 8014daa:	700b      	strb	r3, [r1, #0]
 8014dac:	232b      	movs	r3, #43	; 0x2b
 8014dae:	2c00      	cmp	r4, #0
 8014db0:	da02      	bge.n	8014db8 <_svfprintf_r+0x604>
 8014db2:	2401      	movs	r4, #1
 8014db4:	3302      	adds	r3, #2
 8014db6:	1b64      	subs	r4, r4, r5
 8014db8:	704b      	strb	r3, [r1, #1]
 8014dba:	2c09      	cmp	r4, #9
 8014dbc:	dc00      	bgt.n	8014dc0 <_svfprintf_r+0x60c>
 8014dbe:	e1c6      	b.n	801514e <_svfprintf_r+0x99a>
 8014dc0:	2337      	movs	r3, #55	; 0x37
 8014dc2:	250a      	movs	r5, #10
 8014dc4:	aa1e      	add	r2, sp, #120	; 0x78
 8014dc6:	189b      	adds	r3, r3, r2
 8014dc8:	9310      	str	r3, [sp, #64]	; 0x40
 8014dca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014dcc:	0020      	movs	r0, r4
 8014dce:	9309      	str	r3, [sp, #36]	; 0x24
 8014dd0:	0029      	movs	r1, r5
 8014dd2:	3b01      	subs	r3, #1
 8014dd4:	9310      	str	r3, [sp, #64]	; 0x40
 8014dd6:	f7eb fb2b 	bl	8000430 <__aeabi_idivmod>
 8014dda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ddc:	3130      	adds	r1, #48	; 0x30
 8014dde:	7019      	strb	r1, [r3, #0]
 8014de0:	0020      	movs	r0, r4
 8014de2:	0029      	movs	r1, r5
 8014de4:	9411      	str	r4, [sp, #68]	; 0x44
 8014de6:	f7eb fa3d 	bl	8000264 <__divsi3>
 8014dea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014dec:	0004      	movs	r4, r0
 8014dee:	2b63      	cmp	r3, #99	; 0x63
 8014df0:	dceb      	bgt.n	8014dca <_svfprintf_r+0x616>
 8014df2:	212a      	movs	r1, #42	; 0x2a
 8014df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014df6:	a81e      	add	r0, sp, #120	; 0x78
 8014df8:	1e9a      	subs	r2, r3, #2
 8014dfa:	1809      	adds	r1, r1, r0
 8014dfc:	2037      	movs	r0, #55	; 0x37
 8014dfe:	0013      	movs	r3, r2
 8014e00:	3430      	adds	r4, #48	; 0x30
 8014e02:	7014      	strb	r4, [r2, #0]
 8014e04:	ac1e      	add	r4, sp, #120	; 0x78
 8014e06:	1900      	adds	r0, r0, r4
 8014e08:	4283      	cmp	r3, r0
 8014e0a:	d200      	bcs.n	8014e0e <_svfprintf_r+0x65a>
 8014e0c:	e19a      	b.n	8015144 <_svfprintf_r+0x990>
 8014e0e:	2300      	movs	r3, #0
 8014e10:	4282      	cmp	r2, r0
 8014e12:	d804      	bhi.n	8014e1e <_svfprintf_r+0x66a>
 8014e14:	aa1e      	add	r2, sp, #120	; 0x78
 8014e16:	3339      	adds	r3, #57	; 0x39
 8014e18:	189b      	adds	r3, r3, r2
 8014e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e1c:	1a9b      	subs	r3, r3, r2
 8014e1e:	222a      	movs	r2, #42	; 0x2a
 8014e20:	a91e      	add	r1, sp, #120	; 0x78
 8014e22:	1852      	adds	r2, r2, r1
 8014e24:	18d3      	adds	r3, r2, r3
 8014e26:	aa28      	add	r2, sp, #160	; 0xa0
 8014e28:	1a9b      	subs	r3, r3, r2
 8014e2a:	931e      	str	r3, [sp, #120]	; 0x78
 8014e2c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e30:	4694      	mov	ip, r2
 8014e32:	4463      	add	r3, ip
 8014e34:	9309      	str	r3, [sp, #36]	; 0x24
 8014e36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e38:	2b01      	cmp	r3, #1
 8014e3a:	dc01      	bgt.n	8014e40 <_svfprintf_r+0x68c>
 8014e3c:	07f3      	lsls	r3, r6, #31
 8014e3e:	d504      	bpl.n	8014e4a <_svfprintf_r+0x696>
 8014e40:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e44:	4694      	mov	ip, r2
 8014e46:	4463      	add	r3, ip
 8014e48:	9309      	str	r3, [sp, #36]	; 0x24
 8014e4a:	2280      	movs	r2, #128	; 0x80
 8014e4c:	4b6e      	ldr	r3, [pc, #440]	; (8015008 <_svfprintf_r+0x854>)
 8014e4e:	0052      	lsls	r2, r2, #1
 8014e50:	4033      	ands	r3, r6
 8014e52:	431a      	orrs	r2, r3
 8014e54:	2300      	movs	r3, #0
 8014e56:	001d      	movs	r5, r3
 8014e58:	921a      	str	r2, [sp, #104]	; 0x68
 8014e5a:	9310      	str	r3, [sp, #64]	; 0x40
 8014e5c:	9311      	str	r3, [sp, #68]	; 0x44
 8014e5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014e60:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8014e62:	9319      	str	r3, [sp, #100]	; 0x64
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d006      	beq.n	8014e76 <_svfprintf_r+0x6c2>
 8014e68:	231b      	movs	r3, #27
 8014e6a:	aa1e      	add	r2, sp, #120	; 0x78
 8014e6c:	189b      	adds	r3, r3, r2
 8014e6e:	222d      	movs	r2, #45	; 0x2d
 8014e70:	701a      	strb	r2, [r3, #0]
 8014e72:	2300      	movs	r3, #0
 8014e74:	9319      	str	r3, [sp, #100]	; 0x64
 8014e76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e7a:	931a      	str	r3, [sp, #104]	; 0x68
 8014e7c:	4293      	cmp	r3, r2
 8014e7e:	da00      	bge.n	8014e82 <_svfprintf_r+0x6ce>
 8014e80:	921a      	str	r2, [sp, #104]	; 0x68
 8014e82:	231b      	movs	r3, #27
 8014e84:	aa1e      	add	r2, sp, #120	; 0x78
 8014e86:	189b      	adds	r3, r3, r2
 8014e88:	781b      	ldrb	r3, [r3, #0]
 8014e8a:	1e5a      	subs	r2, r3, #1
 8014e8c:	4193      	sbcs	r3, r2
 8014e8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014e90:	18d3      	adds	r3, r2, r3
 8014e92:	931a      	str	r3, [sp, #104]	; 0x68
 8014e94:	0032      	movs	r2, r6
 8014e96:	2302      	movs	r3, #2
 8014e98:	401a      	ands	r2, r3
 8014e9a:	9220      	str	r2, [sp, #128]	; 0x80
 8014e9c:	421e      	tst	r6, r3
 8014e9e:	d002      	beq.n	8014ea6 <_svfprintf_r+0x6f2>
 8014ea0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014ea2:	3302      	adds	r3, #2
 8014ea4:	931a      	str	r3, [sp, #104]	; 0x68
 8014ea6:	2384      	movs	r3, #132	; 0x84
 8014ea8:	0032      	movs	r2, r6
 8014eaa:	401a      	ands	r2, r3
 8014eac:	9221      	str	r2, [sp, #132]	; 0x84
 8014eae:	421e      	tst	r6, r3
 8014eb0:	d120      	bne.n	8014ef4 <_svfprintf_r+0x740>
 8014eb2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014eb4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014eb6:	1a9c      	subs	r4, r3, r2
 8014eb8:	2c00      	cmp	r4, #0
 8014eba:	dd1b      	ble.n	8014ef4 <_svfprintf_r+0x740>
 8014ebc:	0039      	movs	r1, r7
 8014ebe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014ec0:	4852      	ldr	r0, [pc, #328]	; (801500c <_svfprintf_r+0x858>)
 8014ec2:	9322      	str	r3, [sp, #136]	; 0x88
 8014ec4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014ec6:	3301      	adds	r3, #1
 8014ec8:	3108      	adds	r1, #8
 8014eca:	6038      	str	r0, [r7, #0]
 8014ecc:	2c10      	cmp	r4, #16
 8014ece:	dd00      	ble.n	8014ed2 <_svfprintf_r+0x71e>
 8014ed0:	e319      	b.n	8015506 <_svfprintf_r+0xd52>
 8014ed2:	607c      	str	r4, [r7, #4]
 8014ed4:	18a4      	adds	r4, r4, r2
 8014ed6:	000f      	movs	r7, r1
 8014ed8:	942e      	str	r4, [sp, #184]	; 0xb8
 8014eda:	932d      	str	r3, [sp, #180]	; 0xb4
 8014edc:	2b07      	cmp	r3, #7
 8014ede:	dd09      	ble.n	8014ef4 <_svfprintf_r+0x740>
 8014ee0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ee2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014ee4:	aa2c      	add	r2, sp, #176	; 0xb0
 8014ee6:	f002 fee5 	bl	8017cb4 <__ssprint_r>
 8014eea:	2800      	cmp	r0, #0
 8014eec:	d001      	beq.n	8014ef2 <_svfprintf_r+0x73e>
 8014eee:	f000 fe60 	bl	8015bb2 <_svfprintf_r+0x13fe>
 8014ef2:	af2f      	add	r7, sp, #188	; 0xbc
 8014ef4:	231b      	movs	r3, #27
 8014ef6:	aa1e      	add	r2, sp, #120	; 0x78
 8014ef8:	189b      	adds	r3, r3, r2
 8014efa:	781a      	ldrb	r2, [r3, #0]
 8014efc:	2a00      	cmp	r2, #0
 8014efe:	d017      	beq.n	8014f30 <_svfprintf_r+0x77c>
 8014f00:	603b      	str	r3, [r7, #0]
 8014f02:	2301      	movs	r3, #1
 8014f04:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014f06:	607b      	str	r3, [r7, #4]
 8014f08:	0013      	movs	r3, r2
 8014f0a:	3301      	adds	r3, #1
 8014f0c:	932e      	str	r3, [sp, #184]	; 0xb8
 8014f0e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014f10:	3708      	adds	r7, #8
 8014f12:	9322      	str	r3, [sp, #136]	; 0x88
 8014f14:	3301      	adds	r3, #1
 8014f16:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f18:	2b07      	cmp	r3, #7
 8014f1a:	dd09      	ble.n	8014f30 <_svfprintf_r+0x77c>
 8014f1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f20:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f22:	f002 fec7 	bl	8017cb4 <__ssprint_r>
 8014f26:	2800      	cmp	r0, #0
 8014f28:	d001      	beq.n	8014f2e <_svfprintf_r+0x77a>
 8014f2a:	f000 fe42 	bl	8015bb2 <_svfprintf_r+0x13fe>
 8014f2e:	af2f      	add	r7, sp, #188	; 0xbc
 8014f30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d019      	beq.n	8014f6a <_svfprintf_r+0x7b6>
 8014f36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014f38:	9320      	str	r3, [sp, #128]	; 0x80
 8014f3a:	ab25      	add	r3, sp, #148	; 0x94
 8014f3c:	603b      	str	r3, [r7, #0]
 8014f3e:	2302      	movs	r3, #2
 8014f40:	607b      	str	r3, [r7, #4]
 8014f42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014f44:	3708      	adds	r7, #8
 8014f46:	3302      	adds	r3, #2
 8014f48:	932e      	str	r3, [sp, #184]	; 0xb8
 8014f4a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014f4c:	9320      	str	r3, [sp, #128]	; 0x80
 8014f4e:	3301      	adds	r3, #1
 8014f50:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f52:	2b07      	cmp	r3, #7
 8014f54:	dd09      	ble.n	8014f6a <_svfprintf_r+0x7b6>
 8014f56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f5a:	aa2c      	add	r2, sp, #176	; 0xb0
 8014f5c:	f002 feaa 	bl	8017cb4 <__ssprint_r>
 8014f60:	2800      	cmp	r0, #0
 8014f62:	d001      	beq.n	8014f68 <_svfprintf_r+0x7b4>
 8014f64:	f000 fe25 	bl	8015bb2 <_svfprintf_r+0x13fe>
 8014f68:	af2f      	add	r7, sp, #188	; 0xbc
 8014f6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f6c:	2b80      	cmp	r3, #128	; 0x80
 8014f6e:	d120      	bne.n	8014fb2 <_svfprintf_r+0x7fe>
 8014f70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014f72:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014f74:	1a9c      	subs	r4, r3, r2
 8014f76:	2c00      	cmp	r4, #0
 8014f78:	dd1b      	ble.n	8014fb2 <_svfprintf_r+0x7fe>
 8014f7a:	0039      	movs	r1, r7
 8014f7c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014f7e:	4824      	ldr	r0, [pc, #144]	; (8015010 <_svfprintf_r+0x85c>)
 8014f80:	9320      	str	r3, [sp, #128]	; 0x80
 8014f82:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014f84:	3301      	adds	r3, #1
 8014f86:	3108      	adds	r1, #8
 8014f88:	6038      	str	r0, [r7, #0]
 8014f8a:	2c10      	cmp	r4, #16
 8014f8c:	dd00      	ble.n	8014f90 <_svfprintf_r+0x7dc>
 8014f8e:	e2cd      	b.n	801552c <_svfprintf_r+0xd78>
 8014f90:	607c      	str	r4, [r7, #4]
 8014f92:	18a4      	adds	r4, r4, r2
 8014f94:	000f      	movs	r7, r1
 8014f96:	942e      	str	r4, [sp, #184]	; 0xb8
 8014f98:	932d      	str	r3, [sp, #180]	; 0xb4
 8014f9a:	2b07      	cmp	r3, #7
 8014f9c:	dd09      	ble.n	8014fb2 <_svfprintf_r+0x7fe>
 8014f9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014fa0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014fa2:	aa2c      	add	r2, sp, #176	; 0xb0
 8014fa4:	f002 fe86 	bl	8017cb4 <__ssprint_r>
 8014fa8:	2800      	cmp	r0, #0
 8014faa:	d001      	beq.n	8014fb0 <_svfprintf_r+0x7fc>
 8014fac:	f000 fe01 	bl	8015bb2 <_svfprintf_r+0x13fe>
 8014fb0:	af2f      	add	r7, sp, #188	; 0xbc
 8014fb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014fb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fb6:	1a9c      	subs	r4, r3, r2
 8014fb8:	2c00      	cmp	r4, #0
 8014fba:	dd2b      	ble.n	8015014 <_svfprintf_r+0x860>
 8014fbc:	0039      	movs	r1, r7
 8014fbe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014fc0:	4813      	ldr	r0, [pc, #76]	; (8015010 <_svfprintf_r+0x85c>)
 8014fc2:	9319      	str	r3, [sp, #100]	; 0x64
 8014fc4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014fc6:	3301      	adds	r3, #1
 8014fc8:	3108      	adds	r1, #8
 8014fca:	6038      	str	r0, [r7, #0]
 8014fcc:	2c10      	cmp	r4, #16
 8014fce:	dd00      	ble.n	8014fd2 <_svfprintf_r+0x81e>
 8014fd0:	e2bf      	b.n	8015552 <_svfprintf_r+0xd9e>
 8014fd2:	18a2      	adds	r2, r4, r2
 8014fd4:	607c      	str	r4, [r7, #4]
 8014fd6:	922e      	str	r2, [sp, #184]	; 0xb8
 8014fd8:	000f      	movs	r7, r1
 8014fda:	932d      	str	r3, [sp, #180]	; 0xb4
 8014fdc:	2b07      	cmp	r3, #7
 8014fde:	dd19      	ble.n	8015014 <_svfprintf_r+0x860>
 8014fe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014fe2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014fe4:	aa2c      	add	r2, sp, #176	; 0xb0
 8014fe6:	f002 fe65 	bl	8017cb4 <__ssprint_r>
 8014fea:	2800      	cmp	r0, #0
 8014fec:	d001      	beq.n	8014ff2 <_svfprintf_r+0x83e>
 8014fee:	f000 fde0 	bl	8015bb2 <_svfprintf_r+0x13fe>
 8014ff2:	af2f      	add	r7, sp, #188	; 0xbc
 8014ff4:	e00e      	b.n	8015014 <_svfprintf_r+0x860>
 8014ff6:	46c0      	nop			; (mov r8, r8)
 8014ff8:	0801c790 	.word	0x0801c790
 8014ffc:	0801c7a1 	.word	0x0801c7a1
 8015000:	40300000 	.word	0x40300000
 8015004:	3fe00000 	.word	0x3fe00000
 8015008:	fffffbff 	.word	0xfffffbff
 801500c:	0801c7b4 	.word	0x0801c7b4
 8015010:	0801c7c4 	.word	0x0801c7c4
 8015014:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015016:	9319      	str	r3, [sp, #100]	; 0x64
 8015018:	05f3      	lsls	r3, r6, #23
 801501a:	d500      	bpl.n	801501e <_svfprintf_r+0x86a>
 801501c:	e2b2      	b.n	8015584 <_svfprintf_r+0xdd0>
 801501e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015020:	9b08      	ldr	r3, [sp, #32]
 8015022:	4694      	mov	ip, r2
 8015024:	603b      	str	r3, [r7, #0]
 8015026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015028:	607b      	str	r3, [r7, #4]
 801502a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801502c:	4463      	add	r3, ip
 801502e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015030:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015032:	9308      	str	r3, [sp, #32]
 8015034:	3301      	adds	r3, #1
 8015036:	932d      	str	r3, [sp, #180]	; 0xb4
 8015038:	2b07      	cmp	r3, #7
 801503a:	dd00      	ble.n	801503e <_svfprintf_r+0x88a>
 801503c:	e393      	b.n	8015766 <_svfprintf_r+0xfb2>
 801503e:	3708      	adds	r7, #8
 8015040:	e2e7      	b.n	8015612 <_svfprintf_r+0xe5e>
 8015042:	9b08      	ldr	r3, [sp, #32]
 8015044:	930c      	str	r3, [sp, #48]	; 0x30
 8015046:	e605      	b.n	8014c54 <_svfprintf_r+0x4a0>
 8015048:	2306      	movs	r3, #6
 801504a:	e5f2      	b.n	8014c32 <_svfprintf_r+0x47e>
 801504c:	930e      	str	r3, [sp, #56]	; 0x38
 801504e:	2300      	movs	r3, #0
 8015050:	e60f      	b.n	8014c72 <_svfprintf_r+0x4be>
 8015052:	7018      	strb	r0, [r3, #0]
 8015054:	e679      	b.n	8014d4a <_svfprintf_r+0x596>
 8015056:	7018      	strb	r0, [r3, #0]
 8015058:	3301      	adds	r3, #1
 801505a:	1aca      	subs	r2, r1, r3
 801505c:	d5fb      	bpl.n	8015056 <_svfprintf_r+0x8a2>
 801505e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015060:	2300      	movs	r3, #0
 8015062:	3201      	adds	r2, #1
 8015064:	db01      	blt.n	801506a <_svfprintf_r+0x8b6>
 8015066:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015068:	3301      	adds	r3, #1
 801506a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801506c:	18d3      	adds	r3, r2, r3
 801506e:	9323      	str	r3, [sp, #140]	; 0x8c
 8015070:	e679      	b.n	8014d66 <_svfprintf_r+0x5b2>
 8015072:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015074:	9920      	ldr	r1, [sp, #128]	; 0x80
 8015076:	2030      	movs	r0, #48	; 0x30
 8015078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801507a:	1851      	adds	r1, r2, r1
 801507c:	e7ed      	b.n	801505a <_svfprintf_r+0x8a6>
 801507e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015080:	2303      	movs	r3, #3
 8015082:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015084:	2a46      	cmp	r2, #70	; 0x46
 8015086:	d006      	beq.n	8015096 <_svfprintf_r+0x8e2>
 8015088:	0014      	movs	r4, r2
 801508a:	3c45      	subs	r4, #69	; 0x45
 801508c:	4262      	negs	r2, r4
 801508e:	4154      	adcs	r4, r2
 8015090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015092:	3b01      	subs	r3, #1
 8015094:	1914      	adds	r4, r2, r4
 8015096:	aa2a      	add	r2, sp, #168	; 0xa8
 8015098:	9204      	str	r2, [sp, #16]
 801509a:	aa27      	add	r2, sp, #156	; 0x9c
 801509c:	9203      	str	r2, [sp, #12]
 801509e:	aa26      	add	r2, sp, #152	; 0x98
 80150a0:	9202      	str	r2, [sp, #8]
 80150a2:	9300      	str	r3, [sp, #0]
 80150a4:	002a      	movs	r2, r5
 80150a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150aa:	9401      	str	r4, [sp, #4]
 80150ac:	f000 fe9c 	bl	8015de8 <_dtoa_r>
 80150b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80150b2:	9008      	str	r0, [sp, #32]
 80150b4:	2b47      	cmp	r3, #71	; 0x47
 80150b6:	d103      	bne.n	80150c0 <_svfprintf_r+0x90c>
 80150b8:	07f3      	lsls	r3, r6, #31
 80150ba:	d401      	bmi.n	80150c0 <_svfprintf_r+0x90c>
 80150bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80150be:	e653      	b.n	8014d68 <_svfprintf_r+0x5b4>
 80150c0:	9b08      	ldr	r3, [sp, #32]
 80150c2:	191b      	adds	r3, r3, r4
 80150c4:	9311      	str	r3, [sp, #68]	; 0x44
 80150c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80150c8:	2b46      	cmp	r3, #70	; 0x46
 80150ca:	d113      	bne.n	80150f4 <_svfprintf_r+0x940>
 80150cc:	9b08      	ldr	r3, [sp, #32]
 80150ce:	781b      	ldrb	r3, [r3, #0]
 80150d0:	2b30      	cmp	r3, #48	; 0x30
 80150d2:	d10a      	bne.n	80150ea <_svfprintf_r+0x936>
 80150d4:	2200      	movs	r2, #0
 80150d6:	2300      	movs	r3, #0
 80150d8:	0028      	movs	r0, r5
 80150da:	990e      	ldr	r1, [sp, #56]	; 0x38
 80150dc:	f7eb f9be 	bl	800045c <__aeabi_dcmpeq>
 80150e0:	2800      	cmp	r0, #0
 80150e2:	d102      	bne.n	80150ea <_svfprintf_r+0x936>
 80150e4:	2301      	movs	r3, #1
 80150e6:	1b1c      	subs	r4, r3, r4
 80150e8:	9426      	str	r4, [sp, #152]	; 0x98
 80150ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80150ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80150ee:	4694      	mov	ip, r2
 80150f0:	4463      	add	r3, ip
 80150f2:	9311      	str	r3, [sp, #68]	; 0x44
 80150f4:	2200      	movs	r2, #0
 80150f6:	2300      	movs	r3, #0
 80150f8:	0028      	movs	r0, r5
 80150fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80150fc:	f7eb f9ae 	bl	800045c <__aeabi_dcmpeq>
 8015100:	2800      	cmp	r0, #0
 8015102:	d001      	beq.n	8015108 <_svfprintf_r+0x954>
 8015104:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015106:	932a      	str	r3, [sp, #168]	; 0xa8
 8015108:	2230      	movs	r2, #48	; 0x30
 801510a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801510c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801510e:	4299      	cmp	r1, r3
 8015110:	d9d4      	bls.n	80150bc <_svfprintf_r+0x908>
 8015112:	1c59      	adds	r1, r3, #1
 8015114:	912a      	str	r1, [sp, #168]	; 0xa8
 8015116:	701a      	strb	r2, [r3, #0]
 8015118:	e7f7      	b.n	801510a <_svfprintf_r+0x956>
 801511a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801511c:	2b46      	cmp	r3, #70	; 0x46
 801511e:	d000      	beq.n	8015122 <_svfprintf_r+0x96e>
 8015120:	e633      	b.n	8014d8a <_svfprintf_r+0x5d6>
 8015122:	2201      	movs	r2, #1
 8015124:	0033      	movs	r3, r6
 8015126:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015128:	4013      	ands	r3, r2
 801512a:	430b      	orrs	r3, r1
 801512c:	2d00      	cmp	r5, #0
 801512e:	dd1c      	ble.n	801516a <_svfprintf_r+0x9b6>
 8015130:	2b00      	cmp	r3, #0
 8015132:	d046      	beq.n	80151c2 <_svfprintf_r+0xa0e>
 8015134:	000a      	movs	r2, r1
 8015136:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015138:	18eb      	adds	r3, r5, r3
 801513a:	18d3      	adds	r3, r2, r3
 801513c:	9309      	str	r3, [sp, #36]	; 0x24
 801513e:	2366      	movs	r3, #102	; 0x66
 8015140:	930f      	str	r3, [sp, #60]	; 0x3c
 8015142:	e023      	b.n	801518c <_svfprintf_r+0x9d8>
 8015144:	781c      	ldrb	r4, [r3, #0]
 8015146:	3301      	adds	r3, #1
 8015148:	700c      	strb	r4, [r1, #0]
 801514a:	3101      	adds	r1, #1
 801514c:	e65c      	b.n	8014e08 <_svfprintf_r+0x654>
 801514e:	222a      	movs	r2, #42	; 0x2a
 8015150:	ab1e      	add	r3, sp, #120	; 0x78
 8015152:	18d2      	adds	r2, r2, r3
 8015154:	2800      	cmp	r0, #0
 8015156:	d104      	bne.n	8015162 <_svfprintf_r+0x9ae>
 8015158:	2330      	movs	r3, #48	; 0x30
 801515a:	222b      	movs	r2, #43	; 0x2b
 801515c:	708b      	strb	r3, [r1, #2]
 801515e:	ab1e      	add	r3, sp, #120	; 0x78
 8015160:	18d2      	adds	r2, r2, r3
 8015162:	3430      	adds	r4, #48	; 0x30
 8015164:	1c53      	adds	r3, r2, #1
 8015166:	7014      	strb	r4, [r2, #0]
 8015168:	e65d      	b.n	8014e26 <_svfprintf_r+0x672>
 801516a:	2b00      	cmp	r3, #0
 801516c:	d02b      	beq.n	80151c6 <_svfprintf_r+0xa12>
 801516e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015170:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015172:	3301      	adds	r3, #1
 8015174:	e7e1      	b.n	801513a <_svfprintf_r+0x986>
 8015176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015178:	429d      	cmp	r5, r3
 801517a:	db15      	blt.n	80151a8 <_svfprintf_r+0x9f4>
 801517c:	2367      	movs	r3, #103	; 0x67
 801517e:	9509      	str	r5, [sp, #36]	; 0x24
 8015180:	930f      	str	r3, [sp, #60]	; 0x3c
 8015182:	07f3      	lsls	r3, r6, #31
 8015184:	d502      	bpl.n	801518c <_svfprintf_r+0x9d8>
 8015186:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015188:	18eb      	adds	r3, r5, r3
 801518a:	9309      	str	r3, [sp, #36]	; 0x24
 801518c:	2380      	movs	r3, #128	; 0x80
 801518e:	0032      	movs	r2, r6
 8015190:	00db      	lsls	r3, r3, #3
 8015192:	401a      	ands	r2, r3
 8015194:	9211      	str	r2, [sp, #68]	; 0x44
 8015196:	2200      	movs	r2, #0
 8015198:	9210      	str	r2, [sp, #64]	; 0x40
 801519a:	421e      	tst	r6, r3
 801519c:	d100      	bne.n	80151a0 <_svfprintf_r+0x9ec>
 801519e:	e65e      	b.n	8014e5e <_svfprintf_r+0x6aa>
 80151a0:	4295      	cmp	r5, r2
 80151a2:	dc32      	bgt.n	801520a <_svfprintf_r+0xa56>
 80151a4:	9211      	str	r2, [sp, #68]	; 0x44
 80151a6:	e65a      	b.n	8014e5e <_svfprintf_r+0x6aa>
 80151a8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80151aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80151ac:	4694      	mov	ip, r2
 80151ae:	4463      	add	r3, ip
 80151b0:	9309      	str	r3, [sp, #36]	; 0x24
 80151b2:	2367      	movs	r3, #103	; 0x67
 80151b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80151b6:	2d00      	cmp	r5, #0
 80151b8:	dce8      	bgt.n	801518c <_svfprintf_r+0x9d8>
 80151ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151bc:	1b58      	subs	r0, r3, r5
 80151be:	1c43      	adds	r3, r0, #1
 80151c0:	e7e3      	b.n	801518a <_svfprintf_r+0x9d6>
 80151c2:	9509      	str	r5, [sp, #36]	; 0x24
 80151c4:	e7bb      	b.n	801513e <_svfprintf_r+0x98a>
 80151c6:	2366      	movs	r3, #102	; 0x66
 80151c8:	9209      	str	r2, [sp, #36]	; 0x24
 80151ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80151cc:	e7de      	b.n	801518c <_svfprintf_r+0x9d8>
 80151ce:	42ab      	cmp	r3, r5
 80151d0:	da0e      	bge.n	80151f0 <_svfprintf_r+0xa3c>
 80151d2:	1aed      	subs	r5, r5, r3
 80151d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80151d6:	785b      	ldrb	r3, [r3, #1]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d012      	beq.n	8015202 <_svfprintf_r+0xa4e>
 80151dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80151de:	3301      	adds	r3, #1
 80151e0:	9311      	str	r3, [sp, #68]	; 0x44
 80151e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80151e4:	3301      	adds	r3, #1
 80151e6:	9312      	str	r3, [sp, #72]	; 0x48
 80151e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80151ea:	781b      	ldrb	r3, [r3, #0]
 80151ec:	2bff      	cmp	r3, #255	; 0xff
 80151ee:	d1ee      	bne.n	80151ce <_svfprintf_r+0xa1a>
 80151f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80151f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80151f4:	189b      	adds	r3, r3, r2
 80151f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80151f8:	4353      	muls	r3, r2
 80151fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151fc:	189b      	adds	r3, r3, r2
 80151fe:	9309      	str	r3, [sp, #36]	; 0x24
 8015200:	e62d      	b.n	8014e5e <_svfprintf_r+0x6aa>
 8015202:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015204:	3301      	adds	r3, #1
 8015206:	9310      	str	r3, [sp, #64]	; 0x40
 8015208:	e7ee      	b.n	80151e8 <_svfprintf_r+0xa34>
 801520a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801520c:	9311      	str	r3, [sp, #68]	; 0x44
 801520e:	e7eb      	b.n	80151e8 <_svfprintf_r+0xa34>
 8015210:	1d23      	adds	r3, r4, #4
 8015212:	930d      	str	r3, [sp, #52]	; 0x34
 8015214:	06b3      	lsls	r3, r6, #26
 8015216:	d509      	bpl.n	801522c <_svfprintf_r+0xa78>
 8015218:	6823      	ldr	r3, [r4, #0]
 801521a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801521c:	601a      	str	r2, [r3, #0]
 801521e:	17d2      	asrs	r2, r2, #31
 8015220:	605a      	str	r2, [r3, #4]
 8015222:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015224:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015226:	9308      	str	r3, [sp, #32]
 8015228:	f7ff fb00 	bl	801482c <_svfprintf_r+0x78>
 801522c:	06f3      	lsls	r3, r6, #27
 801522e:	d503      	bpl.n	8015238 <_svfprintf_r+0xa84>
 8015230:	6823      	ldr	r3, [r4, #0]
 8015232:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015234:	601a      	str	r2, [r3, #0]
 8015236:	e7f4      	b.n	8015222 <_svfprintf_r+0xa6e>
 8015238:	0673      	lsls	r3, r6, #25
 801523a:	d503      	bpl.n	8015244 <_svfprintf_r+0xa90>
 801523c:	6823      	ldr	r3, [r4, #0]
 801523e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015240:	801a      	strh	r2, [r3, #0]
 8015242:	e7ee      	b.n	8015222 <_svfprintf_r+0xa6e>
 8015244:	05b3      	lsls	r3, r6, #22
 8015246:	d5f3      	bpl.n	8015230 <_svfprintf_r+0xa7c>
 8015248:	6823      	ldr	r3, [r4, #0]
 801524a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801524c:	701a      	strb	r2, [r3, #0]
 801524e:	e7e8      	b.n	8015222 <_svfprintf_r+0xa6e>
 8015250:	2310      	movs	r3, #16
 8015252:	431e      	orrs	r6, r3
 8015254:	2320      	movs	r3, #32
 8015256:	0030      	movs	r0, r6
 8015258:	4018      	ands	r0, r3
 801525a:	421e      	tst	r6, r3
 801525c:	d00f      	beq.n	801527e <_svfprintf_r+0xaca>
 801525e:	3b19      	subs	r3, #25
 8015260:	3407      	adds	r4, #7
 8015262:	439c      	bics	r4, r3
 8015264:	0022      	movs	r2, r4
 8015266:	ca18      	ldmia	r2!, {r3, r4}
 8015268:	9306      	str	r3, [sp, #24]
 801526a:	9407      	str	r4, [sp, #28]
 801526c:	920d      	str	r2, [sp, #52]	; 0x34
 801526e:	4bc2      	ldr	r3, [pc, #776]	; (8015578 <_svfprintf_r+0xdc4>)
 8015270:	401e      	ands	r6, r3
 8015272:	2300      	movs	r3, #0
 8015274:	221b      	movs	r2, #27
 8015276:	a91e      	add	r1, sp, #120	; 0x78
 8015278:	1852      	adds	r2, r2, r1
 801527a:	2100      	movs	r1, #0
 801527c:	e424      	b.n	8014ac8 <_svfprintf_r+0x314>
 801527e:	0022      	movs	r2, r4
 8015280:	ca08      	ldmia	r2!, {r3}
 8015282:	0031      	movs	r1, r6
 8015284:	920d      	str	r2, [sp, #52]	; 0x34
 8015286:	2210      	movs	r2, #16
 8015288:	4011      	ands	r1, r2
 801528a:	4216      	tst	r6, r2
 801528c:	d002      	beq.n	8015294 <_svfprintf_r+0xae0>
 801528e:	9306      	str	r3, [sp, #24]
 8015290:	9007      	str	r0, [sp, #28]
 8015292:	e7ec      	b.n	801526e <_svfprintf_r+0xaba>
 8015294:	2240      	movs	r2, #64	; 0x40
 8015296:	0030      	movs	r0, r6
 8015298:	4010      	ands	r0, r2
 801529a:	4216      	tst	r6, r2
 801529c:	d003      	beq.n	80152a6 <_svfprintf_r+0xaf2>
 801529e:	b29b      	uxth	r3, r3
 80152a0:	9306      	str	r3, [sp, #24]
 80152a2:	9107      	str	r1, [sp, #28]
 80152a4:	e7e3      	b.n	801526e <_svfprintf_r+0xaba>
 80152a6:	2280      	movs	r2, #128	; 0x80
 80152a8:	0031      	movs	r1, r6
 80152aa:	0092      	lsls	r2, r2, #2
 80152ac:	4011      	ands	r1, r2
 80152ae:	4216      	tst	r6, r2
 80152b0:	d0f6      	beq.n	80152a0 <_svfprintf_r+0xaec>
 80152b2:	b2db      	uxtb	r3, r3
 80152b4:	e7eb      	b.n	801528e <_svfprintf_r+0xada>
 80152b6:	0023      	movs	r3, r4
 80152b8:	cb04      	ldmia	r3!, {r2}
 80152ba:	a925      	add	r1, sp, #148	; 0x94
 80152bc:	9206      	str	r2, [sp, #24]
 80152be:	2230      	movs	r2, #48	; 0x30
 80152c0:	930d      	str	r3, [sp, #52]	; 0x34
 80152c2:	2300      	movs	r3, #0
 80152c4:	700a      	strb	r2, [r1, #0]
 80152c6:	3248      	adds	r2, #72	; 0x48
 80152c8:	704a      	strb	r2, [r1, #1]
 80152ca:	49ac      	ldr	r1, [pc, #688]	; (801557c <_svfprintf_r+0xdc8>)
 80152cc:	9307      	str	r3, [sp, #28]
 80152ce:	3302      	adds	r3, #2
 80152d0:	431e      	orrs	r6, r3
 80152d2:	911f      	str	r1, [sp, #124]	; 0x7c
 80152d4:	920f      	str	r2, [sp, #60]	; 0x3c
 80152d6:	e7cd      	b.n	8015274 <_svfprintf_r+0xac0>
 80152d8:	0023      	movs	r3, r4
 80152da:	cb04      	ldmia	r3!, {r2}
 80152dc:	2400      	movs	r4, #0
 80152de:	930d      	str	r3, [sp, #52]	; 0x34
 80152e0:	231b      	movs	r3, #27
 80152e2:	9208      	str	r2, [sp, #32]
 80152e4:	aa1e      	add	r2, sp, #120	; 0x78
 80152e6:	189b      	adds	r3, r3, r2
 80152e8:	701c      	strb	r4, [r3, #0]
 80152ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152ec:	3301      	adds	r3, #1
 80152ee:	d00e      	beq.n	801530e <_svfprintf_r+0xb5a>
 80152f0:	0021      	movs	r1, r4
 80152f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80152f4:	9808      	ldr	r0, [sp, #32]
 80152f6:	f002 f80d 	bl	8017314 <memchr>
 80152fa:	900c      	str	r0, [sp, #48]	; 0x30
 80152fc:	42a0      	cmp	r0, r4
 80152fe:	d100      	bne.n	8015302 <_svfprintf_r+0xb4e>
 8015300:	e0fe      	b.n	8015500 <_svfprintf_r+0xd4c>
 8015302:	9a08      	ldr	r2, [sp, #32]
 8015304:	1a83      	subs	r3, r0, r2
 8015306:	9309      	str	r3, [sp, #36]	; 0x24
 8015308:	0023      	movs	r3, r4
 801530a:	940c      	str	r4, [sp, #48]	; 0x30
 801530c:	e441      	b.n	8014b92 <_svfprintf_r+0x3de>
 801530e:	9808      	ldr	r0, [sp, #32]
 8015310:	f7ea ff02 	bl	8000118 <strlen>
 8015314:	9009      	str	r0, [sp, #36]	; 0x24
 8015316:	e7f7      	b.n	8015308 <_svfprintf_r+0xb54>
 8015318:	2310      	movs	r3, #16
 801531a:	431e      	orrs	r6, r3
 801531c:	2320      	movs	r3, #32
 801531e:	0030      	movs	r0, r6
 8015320:	4018      	ands	r0, r3
 8015322:	421e      	tst	r6, r3
 8015324:	d009      	beq.n	801533a <_svfprintf_r+0xb86>
 8015326:	3b19      	subs	r3, #25
 8015328:	3407      	adds	r4, #7
 801532a:	439c      	bics	r4, r3
 801532c:	0022      	movs	r2, r4
 801532e:	ca18      	ldmia	r2!, {r3, r4}
 8015330:	9306      	str	r3, [sp, #24]
 8015332:	9407      	str	r4, [sp, #28]
 8015334:	920d      	str	r2, [sp, #52]	; 0x34
 8015336:	2301      	movs	r3, #1
 8015338:	e79c      	b.n	8015274 <_svfprintf_r+0xac0>
 801533a:	0022      	movs	r2, r4
 801533c:	ca08      	ldmia	r2!, {r3}
 801533e:	0031      	movs	r1, r6
 8015340:	920d      	str	r2, [sp, #52]	; 0x34
 8015342:	2210      	movs	r2, #16
 8015344:	4011      	ands	r1, r2
 8015346:	4216      	tst	r6, r2
 8015348:	d002      	beq.n	8015350 <_svfprintf_r+0xb9c>
 801534a:	9306      	str	r3, [sp, #24]
 801534c:	9007      	str	r0, [sp, #28]
 801534e:	e7f2      	b.n	8015336 <_svfprintf_r+0xb82>
 8015350:	2240      	movs	r2, #64	; 0x40
 8015352:	0030      	movs	r0, r6
 8015354:	4010      	ands	r0, r2
 8015356:	4216      	tst	r6, r2
 8015358:	d003      	beq.n	8015362 <_svfprintf_r+0xbae>
 801535a:	b29b      	uxth	r3, r3
 801535c:	9306      	str	r3, [sp, #24]
 801535e:	9107      	str	r1, [sp, #28]
 8015360:	e7e9      	b.n	8015336 <_svfprintf_r+0xb82>
 8015362:	2280      	movs	r2, #128	; 0x80
 8015364:	0031      	movs	r1, r6
 8015366:	0092      	lsls	r2, r2, #2
 8015368:	4011      	ands	r1, r2
 801536a:	4216      	tst	r6, r2
 801536c:	d0f6      	beq.n	801535c <_svfprintf_r+0xba8>
 801536e:	b2db      	uxtb	r3, r3
 8015370:	e7eb      	b.n	801534a <_svfprintf_r+0xb96>
 8015372:	4b83      	ldr	r3, [pc, #524]	; (8015580 <_svfprintf_r+0xdcc>)
 8015374:	0030      	movs	r0, r6
 8015376:	931f      	str	r3, [sp, #124]	; 0x7c
 8015378:	2320      	movs	r3, #32
 801537a:	4018      	ands	r0, r3
 801537c:	421e      	tst	r6, r3
 801537e:	d01a      	beq.n	80153b6 <_svfprintf_r+0xc02>
 8015380:	3b19      	subs	r3, #25
 8015382:	3407      	adds	r4, #7
 8015384:	439c      	bics	r4, r3
 8015386:	0022      	movs	r2, r4
 8015388:	ca18      	ldmia	r2!, {r3, r4}
 801538a:	9306      	str	r3, [sp, #24]
 801538c:	9407      	str	r4, [sp, #28]
 801538e:	920d      	str	r2, [sp, #52]	; 0x34
 8015390:	07f3      	lsls	r3, r6, #31
 8015392:	d50a      	bpl.n	80153aa <_svfprintf_r+0xbf6>
 8015394:	9b06      	ldr	r3, [sp, #24]
 8015396:	9a07      	ldr	r2, [sp, #28]
 8015398:	4313      	orrs	r3, r2
 801539a:	d006      	beq.n	80153aa <_svfprintf_r+0xbf6>
 801539c:	2230      	movs	r2, #48	; 0x30
 801539e:	ab25      	add	r3, sp, #148	; 0x94
 80153a0:	701a      	strb	r2, [r3, #0]
 80153a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80153a4:	705a      	strb	r2, [r3, #1]
 80153a6:	2302      	movs	r3, #2
 80153a8:	431e      	orrs	r6, r3
 80153aa:	4b73      	ldr	r3, [pc, #460]	; (8015578 <_svfprintf_r+0xdc4>)
 80153ac:	401e      	ands	r6, r3
 80153ae:	2302      	movs	r3, #2
 80153b0:	e760      	b.n	8015274 <_svfprintf_r+0xac0>
 80153b2:	4b72      	ldr	r3, [pc, #456]	; (801557c <_svfprintf_r+0xdc8>)
 80153b4:	e7de      	b.n	8015374 <_svfprintf_r+0xbc0>
 80153b6:	0022      	movs	r2, r4
 80153b8:	ca08      	ldmia	r2!, {r3}
 80153ba:	0031      	movs	r1, r6
 80153bc:	920d      	str	r2, [sp, #52]	; 0x34
 80153be:	2210      	movs	r2, #16
 80153c0:	4011      	ands	r1, r2
 80153c2:	4216      	tst	r6, r2
 80153c4:	d002      	beq.n	80153cc <_svfprintf_r+0xc18>
 80153c6:	9306      	str	r3, [sp, #24]
 80153c8:	9007      	str	r0, [sp, #28]
 80153ca:	e7e1      	b.n	8015390 <_svfprintf_r+0xbdc>
 80153cc:	2240      	movs	r2, #64	; 0x40
 80153ce:	0030      	movs	r0, r6
 80153d0:	4010      	ands	r0, r2
 80153d2:	4216      	tst	r6, r2
 80153d4:	d003      	beq.n	80153de <_svfprintf_r+0xc2a>
 80153d6:	b29b      	uxth	r3, r3
 80153d8:	9306      	str	r3, [sp, #24]
 80153da:	9107      	str	r1, [sp, #28]
 80153dc:	e7d8      	b.n	8015390 <_svfprintf_r+0xbdc>
 80153de:	2280      	movs	r2, #128	; 0x80
 80153e0:	0031      	movs	r1, r6
 80153e2:	0092      	lsls	r2, r2, #2
 80153e4:	4011      	ands	r1, r2
 80153e6:	4216      	tst	r6, r2
 80153e8:	d0f6      	beq.n	80153d8 <_svfprintf_r+0xc24>
 80153ea:	b2db      	uxtb	r3, r3
 80153ec:	e7eb      	b.n	80153c6 <_svfprintf_r+0xc12>
 80153ee:	9b07      	ldr	r3, [sp, #28]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d10b      	bne.n	801540c <_svfprintf_r+0xc58>
 80153f4:	9b06      	ldr	r3, [sp, #24]
 80153f6:	2b09      	cmp	r3, #9
 80153f8:	d808      	bhi.n	801540c <_svfprintf_r+0xc58>
 80153fa:	20e7      	movs	r0, #231	; 0xe7
 80153fc:	ab1e      	add	r3, sp, #120	; 0x78
 80153fe:	18c0      	adds	r0, r0, r3
 8015400:	9b06      	ldr	r3, [sp, #24]
 8015402:	3330      	adds	r3, #48	; 0x30
 8015404:	7003      	strb	r3, [r0, #0]
 8015406:	9008      	str	r0, [sp, #32]
 8015408:	f000 fc30 	bl	8015c6c <_svfprintf_r+0x14b8>
 801540c:	2480      	movs	r4, #128	; 0x80
 801540e:	2300      	movs	r3, #0
 8015410:	00e4      	lsls	r4, r4, #3
 8015412:	930e      	str	r3, [sp, #56]	; 0x38
 8015414:	a858      	add	r0, sp, #352	; 0x160
 8015416:	402c      	ands	r4, r5
 8015418:	1e43      	subs	r3, r0, #1
 801541a:	9308      	str	r3, [sp, #32]
 801541c:	220a      	movs	r2, #10
 801541e:	9806      	ldr	r0, [sp, #24]
 8015420:	9907      	ldr	r1, [sp, #28]
 8015422:	2300      	movs	r3, #0
 8015424:	f7eb f88c 	bl	8000540 <__aeabi_uldivmod>
 8015428:	9b08      	ldr	r3, [sp, #32]
 801542a:	3230      	adds	r2, #48	; 0x30
 801542c:	701a      	strb	r2, [r3, #0]
 801542e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015430:	3301      	adds	r3, #1
 8015432:	930e      	str	r3, [sp, #56]	; 0x38
 8015434:	2c00      	cmp	r4, #0
 8015436:	d01d      	beq.n	8015474 <_svfprintf_r+0xcc0>
 8015438:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801543a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801543c:	781b      	ldrb	r3, [r3, #0]
 801543e:	429a      	cmp	r2, r3
 8015440:	d118      	bne.n	8015474 <_svfprintf_r+0xcc0>
 8015442:	2aff      	cmp	r2, #255	; 0xff
 8015444:	d016      	beq.n	8015474 <_svfprintf_r+0xcc0>
 8015446:	9b07      	ldr	r3, [sp, #28]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d102      	bne.n	8015452 <_svfprintf_r+0xc9e>
 801544c:	9b06      	ldr	r3, [sp, #24]
 801544e:	2b09      	cmp	r3, #9
 8015450:	d910      	bls.n	8015474 <_svfprintf_r+0xcc0>
 8015452:	9b08      	ldr	r3, [sp, #32]
 8015454:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015456:	991d      	ldr	r1, [sp, #116]	; 0x74
 8015458:	1a9b      	subs	r3, r3, r2
 801545a:	0018      	movs	r0, r3
 801545c:	9308      	str	r3, [sp, #32]
 801545e:	f7fe fa86 	bl	801396e <strncpy>
 8015462:	2200      	movs	r2, #0
 8015464:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015466:	920e      	str	r2, [sp, #56]	; 0x38
 8015468:	785b      	ldrb	r3, [r3, #1]
 801546a:	1e5a      	subs	r2, r3, #1
 801546c:	4193      	sbcs	r3, r2
 801546e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015470:	18d3      	adds	r3, r2, r3
 8015472:	9312      	str	r3, [sp, #72]	; 0x48
 8015474:	2300      	movs	r3, #0
 8015476:	9806      	ldr	r0, [sp, #24]
 8015478:	9907      	ldr	r1, [sp, #28]
 801547a:	220a      	movs	r2, #10
 801547c:	f7eb f860 	bl	8000540 <__aeabi_uldivmod>
 8015480:	9b07      	ldr	r3, [sp, #28]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d103      	bne.n	801548e <_svfprintf_r+0xcda>
 8015486:	9b06      	ldr	r3, [sp, #24]
 8015488:	2b09      	cmp	r3, #9
 801548a:	d800      	bhi.n	801548e <_svfprintf_r+0xcda>
 801548c:	e3ee      	b.n	8015c6c <_svfprintf_r+0x14b8>
 801548e:	9006      	str	r0, [sp, #24]
 8015490:	9107      	str	r1, [sp, #28]
 8015492:	9808      	ldr	r0, [sp, #32]
 8015494:	e7c0      	b.n	8015418 <_svfprintf_r+0xc64>
 8015496:	200f      	movs	r0, #15
 8015498:	ab58      	add	r3, sp, #352	; 0x160
 801549a:	9308      	str	r3, [sp, #32]
 801549c:	9b08      	ldr	r3, [sp, #32]
 801549e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80154a0:	3b01      	subs	r3, #1
 80154a2:	9308      	str	r3, [sp, #32]
 80154a4:	9b06      	ldr	r3, [sp, #24]
 80154a6:	4003      	ands	r3, r0
 80154a8:	5cd3      	ldrb	r3, [r2, r3]
 80154aa:	9a08      	ldr	r2, [sp, #32]
 80154ac:	7013      	strb	r3, [r2, #0]
 80154ae:	9b07      	ldr	r3, [sp, #28]
 80154b0:	0719      	lsls	r1, r3, #28
 80154b2:	9b06      	ldr	r3, [sp, #24]
 80154b4:	091a      	lsrs	r2, r3, #4
 80154b6:	9b07      	ldr	r3, [sp, #28]
 80154b8:	4311      	orrs	r1, r2
 80154ba:	091b      	lsrs	r3, r3, #4
 80154bc:	9307      	str	r3, [sp, #28]
 80154be:	000b      	movs	r3, r1
 80154c0:	9a07      	ldr	r2, [sp, #28]
 80154c2:	9106      	str	r1, [sp, #24]
 80154c4:	4313      	orrs	r3, r2
 80154c6:	d1e9      	bne.n	801549c <_svfprintf_r+0xce8>
 80154c8:	e3d0      	b.n	8015c6c <_svfprintf_r+0x14b8>
 80154ca:	aa58      	add	r2, sp, #352	; 0x160
 80154cc:	9208      	str	r2, [sp, #32]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d000      	beq.n	80154d4 <_svfprintf_r+0xd20>
 80154d2:	e3cb      	b.n	8015c6c <_svfprintf_r+0x14b8>
 80154d4:	07f3      	lsls	r3, r6, #31
 80154d6:	d400      	bmi.n	80154da <_svfprintf_r+0xd26>
 80154d8:	e3c8      	b.n	8015c6c <_svfprintf_r+0x14b8>
 80154da:	20e7      	movs	r0, #231	; 0xe7
 80154dc:	ab1e      	add	r3, sp, #120	; 0x78
 80154de:	18c0      	adds	r0, r0, r3
 80154e0:	2330      	movs	r3, #48	; 0x30
 80154e2:	e78f      	b.n	8015404 <_svfprintf_r+0xc50>
 80154e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d100      	bne.n	80154ec <_svfprintf_r+0xd38>
 80154ea:	e383      	b.n	8015bf4 <_svfprintf_r+0x1440>
 80154ec:	221b      	movs	r2, #27
 80154ee:	a83f      	add	r0, sp, #252	; 0xfc
 80154f0:	7003      	strb	r3, [r0, #0]
 80154f2:	2300      	movs	r3, #0
 80154f4:	a91e      	add	r1, sp, #120	; 0x78
 80154f6:	1852      	adds	r2, r2, r1
 80154f8:	7013      	strb	r3, [r2, #0]
 80154fa:	940d      	str	r4, [sp, #52]	; 0x34
 80154fc:	f7ff fabf 	bl	8014a7e <_svfprintf_r+0x2ca>
 8015500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015502:	f7ff fb46 	bl	8014b92 <_svfprintf_r+0x3de>
 8015506:	2010      	movs	r0, #16
 8015508:	1812      	adds	r2, r2, r0
 801550a:	6078      	str	r0, [r7, #4]
 801550c:	922e      	str	r2, [sp, #184]	; 0xb8
 801550e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015510:	2b07      	cmp	r3, #7
 8015512:	dd08      	ble.n	8015526 <_svfprintf_r+0xd72>
 8015514:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015516:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015518:	aa2c      	add	r2, sp, #176	; 0xb0
 801551a:	f002 fbcb 	bl	8017cb4 <__ssprint_r>
 801551e:	2800      	cmp	r0, #0
 8015520:	d000      	beq.n	8015524 <_svfprintf_r+0xd70>
 8015522:	e346      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 8015524:	a92f      	add	r1, sp, #188	; 0xbc
 8015526:	000f      	movs	r7, r1
 8015528:	3c10      	subs	r4, #16
 801552a:	e4c7      	b.n	8014ebc <_svfprintf_r+0x708>
 801552c:	2010      	movs	r0, #16
 801552e:	1812      	adds	r2, r2, r0
 8015530:	6078      	str	r0, [r7, #4]
 8015532:	922e      	str	r2, [sp, #184]	; 0xb8
 8015534:	932d      	str	r3, [sp, #180]	; 0xb4
 8015536:	2b07      	cmp	r3, #7
 8015538:	dd08      	ble.n	801554c <_svfprintf_r+0xd98>
 801553a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801553c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801553e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015540:	f002 fbb8 	bl	8017cb4 <__ssprint_r>
 8015544:	2800      	cmp	r0, #0
 8015546:	d000      	beq.n	801554a <_svfprintf_r+0xd96>
 8015548:	e333      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 801554a:	a92f      	add	r1, sp, #188	; 0xbc
 801554c:	000f      	movs	r7, r1
 801554e:	3c10      	subs	r4, #16
 8015550:	e513      	b.n	8014f7a <_svfprintf_r+0x7c6>
 8015552:	2010      	movs	r0, #16
 8015554:	1812      	adds	r2, r2, r0
 8015556:	6078      	str	r0, [r7, #4]
 8015558:	922e      	str	r2, [sp, #184]	; 0xb8
 801555a:	932d      	str	r3, [sp, #180]	; 0xb4
 801555c:	2b07      	cmp	r3, #7
 801555e:	dd08      	ble.n	8015572 <_svfprintf_r+0xdbe>
 8015560:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015562:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015564:	aa2c      	add	r2, sp, #176	; 0xb0
 8015566:	f002 fba5 	bl	8017cb4 <__ssprint_r>
 801556a:	2800      	cmp	r0, #0
 801556c:	d000      	beq.n	8015570 <_svfprintf_r+0xdbc>
 801556e:	e320      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 8015570:	a92f      	add	r1, sp, #188	; 0xbc
 8015572:	000f      	movs	r7, r1
 8015574:	3c10      	subs	r4, #16
 8015576:	e521      	b.n	8014fbc <_svfprintf_r+0x808>
 8015578:	fffffbff 	.word	0xfffffbff
 801557c:	0801c790 	.word	0x0801c790
 8015580:	0801c7a1 	.word	0x0801c7a1
 8015584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015586:	2b65      	cmp	r3, #101	; 0x65
 8015588:	dc00      	bgt.n	801558c <_svfprintf_r+0xdd8>
 801558a:	e257      	b.n	8015a3c <_svfprintf_r+0x1288>
 801558c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801558e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015590:	2200      	movs	r2, #0
 8015592:	2300      	movs	r3, #0
 8015594:	f7ea ff62 	bl	800045c <__aeabi_dcmpeq>
 8015598:	2800      	cmp	r0, #0
 801559a:	d07c      	beq.n	8015696 <_svfprintf_r+0xee2>
 801559c:	4b80      	ldr	r3, [pc, #512]	; (80157a0 <_svfprintf_r+0xfec>)
 801559e:	603b      	str	r3, [r7, #0]
 80155a0:	2301      	movs	r3, #1
 80155a2:	607b      	str	r3, [r7, #4]
 80155a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80155a6:	3708      	adds	r7, #8
 80155a8:	3301      	adds	r3, #1
 80155aa:	932e      	str	r3, [sp, #184]	; 0xb8
 80155ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80155ae:	9308      	str	r3, [sp, #32]
 80155b0:	3301      	adds	r3, #1
 80155b2:	932d      	str	r3, [sp, #180]	; 0xb4
 80155b4:	2b07      	cmp	r3, #7
 80155b6:	dd08      	ble.n	80155ca <_svfprintf_r+0xe16>
 80155b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155bc:	aa2c      	add	r2, sp, #176	; 0xb0
 80155be:	f002 fb79 	bl	8017cb4 <__ssprint_r>
 80155c2:	2800      	cmp	r0, #0
 80155c4:	d000      	beq.n	80155c8 <_svfprintf_r+0xe14>
 80155c6:	e2f4      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 80155c8:	af2f      	add	r7, sp, #188	; 0xbc
 80155ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80155cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80155ce:	4293      	cmp	r3, r2
 80155d0:	db01      	blt.n	80155d6 <_svfprintf_r+0xe22>
 80155d2:	07f3      	lsls	r3, r6, #31
 80155d4:	d51d      	bpl.n	8015612 <_svfprintf_r+0xe5e>
 80155d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80155d8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80155da:	4694      	mov	ip, r2
 80155dc:	603b      	str	r3, [r7, #0]
 80155de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80155e0:	607b      	str	r3, [r7, #4]
 80155e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80155e4:	3708      	adds	r7, #8
 80155e6:	4463      	add	r3, ip
 80155e8:	932e      	str	r3, [sp, #184]	; 0xb8
 80155ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80155ec:	9308      	str	r3, [sp, #32]
 80155ee:	3301      	adds	r3, #1
 80155f0:	932d      	str	r3, [sp, #180]	; 0xb4
 80155f2:	2b07      	cmp	r3, #7
 80155f4:	dd08      	ble.n	8015608 <_svfprintf_r+0xe54>
 80155f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155fa:	aa2c      	add	r2, sp, #176	; 0xb0
 80155fc:	f002 fb5a 	bl	8017cb4 <__ssprint_r>
 8015600:	2800      	cmp	r0, #0
 8015602:	d000      	beq.n	8015606 <_svfprintf_r+0xe52>
 8015604:	e2d5      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 8015606:	af2f      	add	r7, sp, #188	; 0xbc
 8015608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801560a:	2510      	movs	r5, #16
 801560c:	1e5c      	subs	r4, r3, #1
 801560e:	2c00      	cmp	r4, #0
 8015610:	dc2f      	bgt.n	8015672 <_svfprintf_r+0xebe>
 8015612:	0773      	lsls	r3, r6, #29
 8015614:	d500      	bpl.n	8015618 <_svfprintf_r+0xe64>
 8015616:	e2ae      	b.n	8015b76 <_svfprintf_r+0x13c2>
 8015618:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801561a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801561c:	4293      	cmp	r3, r2
 801561e:	da00      	bge.n	8015622 <_svfprintf_r+0xe6e>
 8015620:	0013      	movs	r3, r2
 8015622:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015624:	18d3      	adds	r3, r2, r3
 8015626:	9317      	str	r3, [sp, #92]	; 0x5c
 8015628:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801562a:	9308      	str	r3, [sp, #32]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d007      	beq.n	8015640 <_svfprintf_r+0xe8c>
 8015630:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015632:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015634:	aa2c      	add	r2, sp, #176	; 0xb0
 8015636:	f002 fb3d 	bl	8017cb4 <__ssprint_r>
 801563a:	2800      	cmp	r0, #0
 801563c:	d000      	beq.n	8015640 <_svfprintf_r+0xe8c>
 801563e:	e2b8      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 8015640:	2300      	movs	r3, #0
 8015642:	932d      	str	r3, [sp, #180]	; 0xb4
 8015644:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015646:	2b00      	cmp	r3, #0
 8015648:	d000      	beq.n	801564c <_svfprintf_r+0xe98>
 801564a:	e2ce      	b.n	8015bea <_svfprintf_r+0x1436>
 801564c:	af2f      	add	r7, sp, #188	; 0xbc
 801564e:	e5e8      	b.n	8015222 <_svfprintf_r+0xa6e>
 8015650:	3210      	adds	r2, #16
 8015652:	607d      	str	r5, [r7, #4]
 8015654:	922e      	str	r2, [sp, #184]	; 0xb8
 8015656:	932d      	str	r3, [sp, #180]	; 0xb4
 8015658:	2b07      	cmp	r3, #7
 801565a:	dd08      	ble.n	801566e <_svfprintf_r+0xeba>
 801565c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801565e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015660:	aa2c      	add	r2, sp, #176	; 0xb0
 8015662:	f002 fb27 	bl	8017cb4 <__ssprint_r>
 8015666:	2800      	cmp	r0, #0
 8015668:	d000      	beq.n	801566c <_svfprintf_r+0xeb8>
 801566a:	e2a2      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 801566c:	a92f      	add	r1, sp, #188	; 0xbc
 801566e:	000f      	movs	r7, r1
 8015670:	3c10      	subs	r4, #16
 8015672:	0039      	movs	r1, r7
 8015674:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015676:	484b      	ldr	r0, [pc, #300]	; (80157a4 <_svfprintf_r+0xff0>)
 8015678:	9308      	str	r3, [sp, #32]
 801567a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801567c:	3301      	adds	r3, #1
 801567e:	3108      	adds	r1, #8
 8015680:	6038      	str	r0, [r7, #0]
 8015682:	2c10      	cmp	r4, #16
 8015684:	dce4      	bgt.n	8015650 <_svfprintf_r+0xe9c>
 8015686:	607c      	str	r4, [r7, #4]
 8015688:	18a4      	adds	r4, r4, r2
 801568a:	000f      	movs	r7, r1
 801568c:	942e      	str	r4, [sp, #184]	; 0xb8
 801568e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015690:	2b07      	cmp	r3, #7
 8015692:	ddbe      	ble.n	8015612 <_svfprintf_r+0xe5e>
 8015694:	e067      	b.n	8015766 <_svfprintf_r+0xfb2>
 8015696:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015698:	2b00      	cmp	r3, #0
 801569a:	dd00      	ble.n	801569e <_svfprintf_r+0xeea>
 801569c:	e084      	b.n	80157a8 <_svfprintf_r+0xff4>
 801569e:	4b40      	ldr	r3, [pc, #256]	; (80157a0 <_svfprintf_r+0xfec>)
 80156a0:	603b      	str	r3, [r7, #0]
 80156a2:	2301      	movs	r3, #1
 80156a4:	607b      	str	r3, [r7, #4]
 80156a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80156a8:	3708      	adds	r7, #8
 80156aa:	3301      	adds	r3, #1
 80156ac:	932e      	str	r3, [sp, #184]	; 0xb8
 80156ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156b0:	9309      	str	r3, [sp, #36]	; 0x24
 80156b2:	3301      	adds	r3, #1
 80156b4:	932d      	str	r3, [sp, #180]	; 0xb4
 80156b6:	2b07      	cmp	r3, #7
 80156b8:	dd08      	ble.n	80156cc <_svfprintf_r+0xf18>
 80156ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156be:	aa2c      	add	r2, sp, #176	; 0xb0
 80156c0:	f002 faf8 	bl	8017cb4 <__ssprint_r>
 80156c4:	2800      	cmp	r0, #0
 80156c6:	d000      	beq.n	80156ca <_svfprintf_r+0xf16>
 80156c8:	e273      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 80156ca:	af2f      	add	r7, sp, #188	; 0xbc
 80156cc:	9926      	ldr	r1, [sp, #152]	; 0x98
 80156ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80156d0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80156d2:	430b      	orrs	r3, r1
 80156d4:	2101      	movs	r1, #1
 80156d6:	4031      	ands	r1, r6
 80156d8:	430b      	orrs	r3, r1
 80156da:	d09a      	beq.n	8015612 <_svfprintf_r+0xe5e>
 80156dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80156de:	603b      	str	r3, [r7, #0]
 80156e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80156e2:	607b      	str	r3, [r7, #4]
 80156e4:	189a      	adds	r2, r3, r2
 80156e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156e8:	922e      	str	r2, [sp, #184]	; 0xb8
 80156ea:	9309      	str	r3, [sp, #36]	; 0x24
 80156ec:	3301      	adds	r3, #1
 80156ee:	932d      	str	r3, [sp, #180]	; 0xb4
 80156f0:	3708      	adds	r7, #8
 80156f2:	2b07      	cmp	r3, #7
 80156f4:	dd08      	ble.n	8015708 <_svfprintf_r+0xf54>
 80156f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156fa:	aa2c      	add	r2, sp, #176	; 0xb0
 80156fc:	f002 fada 	bl	8017cb4 <__ssprint_r>
 8015700:	2800      	cmp	r0, #0
 8015702:	d000      	beq.n	8015706 <_svfprintf_r+0xf52>
 8015704:	e255      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 8015706:	af2f      	add	r7, sp, #188	; 0xbc
 8015708:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801570a:	2c00      	cmp	r4, #0
 801570c:	da1a      	bge.n	8015744 <_svfprintf_r+0xf90>
 801570e:	0039      	movs	r1, r7
 8015710:	2510      	movs	r5, #16
 8015712:	4264      	negs	r4, r4
 8015714:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015716:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8015718:	9309      	str	r3, [sp, #36]	; 0x24
 801571a:	1c5a      	adds	r2, r3, #1
 801571c:	4b21      	ldr	r3, [pc, #132]	; (80157a4 <_svfprintf_r+0xff0>)
 801571e:	3708      	adds	r7, #8
 8015720:	600b      	str	r3, [r1, #0]
 8015722:	2c10      	cmp	r4, #16
 8015724:	dc29      	bgt.n	801577a <_svfprintf_r+0xfc6>
 8015726:	604c      	str	r4, [r1, #4]
 8015728:	1824      	adds	r4, r4, r0
 801572a:	942e      	str	r4, [sp, #184]	; 0xb8
 801572c:	922d      	str	r2, [sp, #180]	; 0xb4
 801572e:	2a07      	cmp	r2, #7
 8015730:	dd08      	ble.n	8015744 <_svfprintf_r+0xf90>
 8015732:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015734:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015736:	aa2c      	add	r2, sp, #176	; 0xb0
 8015738:	f002 fabc 	bl	8017cb4 <__ssprint_r>
 801573c:	2800      	cmp	r0, #0
 801573e:	d000      	beq.n	8015742 <_svfprintf_r+0xf8e>
 8015740:	e237      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 8015742:	af2f      	add	r7, sp, #188	; 0xbc
 8015744:	9b08      	ldr	r3, [sp, #32]
 8015746:	603b      	str	r3, [r7, #0]
 8015748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801574a:	607b      	str	r3, [r7, #4]
 801574c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801574e:	001a      	movs	r2, r3
 8015750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015752:	469c      	mov	ip, r3
 8015754:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015756:	4462      	add	r2, ip
 8015758:	922e      	str	r2, [sp, #184]	; 0xb8
 801575a:	1c5a      	adds	r2, r3, #1
 801575c:	9308      	str	r3, [sp, #32]
 801575e:	922d      	str	r2, [sp, #180]	; 0xb4
 8015760:	2a07      	cmp	r2, #7
 8015762:	dc00      	bgt.n	8015766 <_svfprintf_r+0xfb2>
 8015764:	e46b      	b.n	801503e <_svfprintf_r+0x88a>
 8015766:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015768:	980a      	ldr	r0, [sp, #40]	; 0x28
 801576a:	aa2c      	add	r2, sp, #176	; 0xb0
 801576c:	f002 faa2 	bl	8017cb4 <__ssprint_r>
 8015770:	2800      	cmp	r0, #0
 8015772:	d000      	beq.n	8015776 <_svfprintf_r+0xfc2>
 8015774:	e21d      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 8015776:	af2f      	add	r7, sp, #188	; 0xbc
 8015778:	e74b      	b.n	8015612 <_svfprintf_r+0xe5e>
 801577a:	3010      	adds	r0, #16
 801577c:	604d      	str	r5, [r1, #4]
 801577e:	902e      	str	r0, [sp, #184]	; 0xb8
 8015780:	922d      	str	r2, [sp, #180]	; 0xb4
 8015782:	2a07      	cmp	r2, #7
 8015784:	dd08      	ble.n	8015798 <_svfprintf_r+0xfe4>
 8015786:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015788:	980a      	ldr	r0, [sp, #40]	; 0x28
 801578a:	aa2c      	add	r2, sp, #176	; 0xb0
 801578c:	f002 fa92 	bl	8017cb4 <__ssprint_r>
 8015790:	2800      	cmp	r0, #0
 8015792:	d000      	beq.n	8015796 <_svfprintf_r+0xfe2>
 8015794:	e20d      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 8015796:	af2f      	add	r7, sp, #188	; 0xbc
 8015798:	0039      	movs	r1, r7
 801579a:	3c10      	subs	r4, #16
 801579c:	e7ba      	b.n	8015714 <_svfprintf_r+0xf60>
 801579e:	46c0      	nop			; (mov r8, r8)
 80157a0:	0801c7b2 	.word	0x0801c7b2
 80157a4:	0801c7c4 	.word	0x0801c7c4
 80157a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80157aa:	002c      	movs	r4, r5
 80157ac:	429d      	cmp	r5, r3
 80157ae:	dd00      	ble.n	80157b2 <_svfprintf_r+0xffe>
 80157b0:	001c      	movs	r4, r3
 80157b2:	2c00      	cmp	r4, #0
 80157b4:	dd15      	ble.n	80157e2 <_svfprintf_r+0x102e>
 80157b6:	9b08      	ldr	r3, [sp, #32]
 80157b8:	607c      	str	r4, [r7, #4]
 80157ba:	603b      	str	r3, [r7, #0]
 80157bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80157be:	3708      	adds	r7, #8
 80157c0:	18e3      	adds	r3, r4, r3
 80157c2:	932e      	str	r3, [sp, #184]	; 0xb8
 80157c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80157c6:	9309      	str	r3, [sp, #36]	; 0x24
 80157c8:	3301      	adds	r3, #1
 80157ca:	932d      	str	r3, [sp, #180]	; 0xb4
 80157cc:	2b07      	cmp	r3, #7
 80157ce:	dd08      	ble.n	80157e2 <_svfprintf_r+0x102e>
 80157d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80157d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80157d4:	aa2c      	add	r2, sp, #176	; 0xb0
 80157d6:	f002 fa6d 	bl	8017cb4 <__ssprint_r>
 80157da:	2800      	cmp	r0, #0
 80157dc:	d000      	beq.n	80157e0 <_svfprintf_r+0x102c>
 80157de:	e1e8      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 80157e0:	af2f      	add	r7, sp, #188	; 0xbc
 80157e2:	43e3      	mvns	r3, r4
 80157e4:	17db      	asrs	r3, r3, #31
 80157e6:	401c      	ands	r4, r3
 80157e8:	1b2c      	subs	r4, r5, r4
 80157ea:	2c00      	cmp	r4, #0
 80157ec:	dd1a      	ble.n	8015824 <_svfprintf_r+0x1070>
 80157ee:	0039      	movs	r1, r7
 80157f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80157f2:	48ca      	ldr	r0, [pc, #808]	; (8015b1c <_svfprintf_r+0x1368>)
 80157f4:	9309      	str	r3, [sp, #36]	; 0x24
 80157f6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80157f8:	3301      	adds	r3, #1
 80157fa:	3108      	adds	r1, #8
 80157fc:	6038      	str	r0, [r7, #0]
 80157fe:	2c10      	cmp	r4, #16
 8015800:	dd00      	ble.n	8015804 <_svfprintf_r+0x1050>
 8015802:	e089      	b.n	8015918 <_svfprintf_r+0x1164>
 8015804:	607c      	str	r4, [r7, #4]
 8015806:	18a4      	adds	r4, r4, r2
 8015808:	000f      	movs	r7, r1
 801580a:	942e      	str	r4, [sp, #184]	; 0xb8
 801580c:	932d      	str	r3, [sp, #180]	; 0xb4
 801580e:	2b07      	cmp	r3, #7
 8015810:	dd08      	ble.n	8015824 <_svfprintf_r+0x1070>
 8015812:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015814:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015816:	aa2c      	add	r2, sp, #176	; 0xb0
 8015818:	f002 fa4c 	bl	8017cb4 <__ssprint_r>
 801581c:	2800      	cmp	r0, #0
 801581e:	d000      	beq.n	8015822 <_svfprintf_r+0x106e>
 8015820:	e1c7      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 8015822:	af2f      	add	r7, sp, #188	; 0xbc
 8015824:	9b08      	ldr	r3, [sp, #32]
 8015826:	195d      	adds	r5, r3, r5
 8015828:	0573      	lsls	r3, r6, #21
 801582a:	d50d      	bpl.n	8015848 <_svfprintf_r+0x1094>
 801582c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801582e:	2b00      	cmp	r3, #0
 8015830:	d000      	beq.n	8015834 <_svfprintf_r+0x1080>
 8015832:	e084      	b.n	801593e <_svfprintf_r+0x118a>
 8015834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015836:	2b00      	cmp	r3, #0
 8015838:	d000      	beq.n	801583c <_svfprintf_r+0x1088>
 801583a:	e083      	b.n	8015944 <_svfprintf_r+0x1190>
 801583c:	9b08      	ldr	r3, [sp, #32]
 801583e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015840:	189b      	adds	r3, r3, r2
 8015842:	429d      	cmp	r5, r3
 8015844:	d900      	bls.n	8015848 <_svfprintf_r+0x1094>
 8015846:	001d      	movs	r5, r3
 8015848:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801584a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801584c:	4293      	cmp	r3, r2
 801584e:	db01      	blt.n	8015854 <_svfprintf_r+0x10a0>
 8015850:	07f3      	lsls	r3, r6, #31
 8015852:	d518      	bpl.n	8015886 <_svfprintf_r+0x10d2>
 8015854:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015856:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015858:	4694      	mov	ip, r2
 801585a:	603b      	str	r3, [r7, #0]
 801585c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801585e:	607b      	str	r3, [r7, #4]
 8015860:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015862:	3708      	adds	r7, #8
 8015864:	4463      	add	r3, ip
 8015866:	932e      	str	r3, [sp, #184]	; 0xb8
 8015868:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801586a:	9309      	str	r3, [sp, #36]	; 0x24
 801586c:	3301      	adds	r3, #1
 801586e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015870:	2b07      	cmp	r3, #7
 8015872:	dd08      	ble.n	8015886 <_svfprintf_r+0x10d2>
 8015874:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015876:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015878:	aa2c      	add	r2, sp, #176	; 0xb0
 801587a:	f002 fa1b 	bl	8017cb4 <__ssprint_r>
 801587e:	2800      	cmp	r0, #0
 8015880:	d000      	beq.n	8015884 <_svfprintf_r+0x10d0>
 8015882:	e196      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 8015884:	af2f      	add	r7, sp, #188	; 0xbc
 8015886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015888:	9808      	ldr	r0, [sp, #32]
 801588a:	469c      	mov	ip, r3
 801588c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801588e:	4460      	add	r0, ip
 8015890:	1b40      	subs	r0, r0, r5
 8015892:	1a9c      	subs	r4, r3, r2
 8015894:	4284      	cmp	r4, r0
 8015896:	dd00      	ble.n	801589a <_svfprintf_r+0x10e6>
 8015898:	0004      	movs	r4, r0
 801589a:	2c00      	cmp	r4, #0
 801589c:	dd14      	ble.n	80158c8 <_svfprintf_r+0x1114>
 801589e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80158a0:	603d      	str	r5, [r7, #0]
 80158a2:	191b      	adds	r3, r3, r4
 80158a4:	932e      	str	r3, [sp, #184]	; 0xb8
 80158a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80158a8:	607c      	str	r4, [r7, #4]
 80158aa:	9308      	str	r3, [sp, #32]
 80158ac:	3301      	adds	r3, #1
 80158ae:	932d      	str	r3, [sp, #180]	; 0xb4
 80158b0:	3708      	adds	r7, #8
 80158b2:	2b07      	cmp	r3, #7
 80158b4:	dd08      	ble.n	80158c8 <_svfprintf_r+0x1114>
 80158b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80158b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80158ba:	aa2c      	add	r2, sp, #176	; 0xb0
 80158bc:	f002 f9fa 	bl	8017cb4 <__ssprint_r>
 80158c0:	2800      	cmp	r0, #0
 80158c2:	d000      	beq.n	80158c6 <_svfprintf_r+0x1112>
 80158c4:	e175      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 80158c6:	af2f      	add	r7, sp, #188	; 0xbc
 80158c8:	43e3      	mvns	r3, r4
 80158ca:	17db      	asrs	r3, r3, #31
 80158cc:	401c      	ands	r4, r3
 80158ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80158d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158d2:	2510      	movs	r5, #16
 80158d4:	1a9b      	subs	r3, r3, r2
 80158d6:	1b1c      	subs	r4, r3, r4
 80158d8:	2c00      	cmp	r4, #0
 80158da:	dc00      	bgt.n	80158de <_svfprintf_r+0x112a>
 80158dc:	e699      	b.n	8015612 <_svfprintf_r+0xe5e>
 80158de:	0039      	movs	r1, r7
 80158e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80158e2:	488e      	ldr	r0, [pc, #568]	; (8015b1c <_svfprintf_r+0x1368>)
 80158e4:	9308      	str	r3, [sp, #32]
 80158e6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80158e8:	3301      	adds	r3, #1
 80158ea:	3108      	adds	r1, #8
 80158ec:	6038      	str	r0, [r7, #0]
 80158ee:	2c10      	cmp	r4, #16
 80158f0:	dc00      	bgt.n	80158f4 <_svfprintf_r+0x1140>
 80158f2:	e6c8      	b.n	8015686 <_svfprintf_r+0xed2>
 80158f4:	3210      	adds	r2, #16
 80158f6:	607d      	str	r5, [r7, #4]
 80158f8:	922e      	str	r2, [sp, #184]	; 0xb8
 80158fa:	932d      	str	r3, [sp, #180]	; 0xb4
 80158fc:	2b07      	cmp	r3, #7
 80158fe:	dd08      	ble.n	8015912 <_svfprintf_r+0x115e>
 8015900:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015902:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015904:	aa2c      	add	r2, sp, #176	; 0xb0
 8015906:	f002 f9d5 	bl	8017cb4 <__ssprint_r>
 801590a:	2800      	cmp	r0, #0
 801590c:	d000      	beq.n	8015910 <_svfprintf_r+0x115c>
 801590e:	e150      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 8015910:	a92f      	add	r1, sp, #188	; 0xbc
 8015912:	000f      	movs	r7, r1
 8015914:	3c10      	subs	r4, #16
 8015916:	e7e2      	b.n	80158de <_svfprintf_r+0x112a>
 8015918:	2010      	movs	r0, #16
 801591a:	1812      	adds	r2, r2, r0
 801591c:	6078      	str	r0, [r7, #4]
 801591e:	922e      	str	r2, [sp, #184]	; 0xb8
 8015920:	932d      	str	r3, [sp, #180]	; 0xb4
 8015922:	2b07      	cmp	r3, #7
 8015924:	dd08      	ble.n	8015938 <_svfprintf_r+0x1184>
 8015926:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015928:	980a      	ldr	r0, [sp, #40]	; 0x28
 801592a:	aa2c      	add	r2, sp, #176	; 0xb0
 801592c:	f002 f9c2 	bl	8017cb4 <__ssprint_r>
 8015930:	2800      	cmp	r0, #0
 8015932:	d000      	beq.n	8015936 <_svfprintf_r+0x1182>
 8015934:	e13d      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 8015936:	a92f      	add	r1, sp, #188	; 0xbc
 8015938:	000f      	movs	r7, r1
 801593a:	3c10      	subs	r4, #16
 801593c:	e757      	b.n	80157ee <_svfprintf_r+0x103a>
 801593e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015940:	2b00      	cmp	r3, #0
 8015942:	d061      	beq.n	8015a08 <_svfprintf_r+0x1254>
 8015944:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015946:	3b01      	subs	r3, #1
 8015948:	9310      	str	r3, [sp, #64]	; 0x40
 801594a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801594c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801594e:	4694      	mov	ip, r2
 8015950:	603b      	str	r3, [r7, #0]
 8015952:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015954:	607b      	str	r3, [r7, #4]
 8015956:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015958:	3708      	adds	r7, #8
 801595a:	4463      	add	r3, ip
 801595c:	932e      	str	r3, [sp, #184]	; 0xb8
 801595e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015960:	9309      	str	r3, [sp, #36]	; 0x24
 8015962:	3301      	adds	r3, #1
 8015964:	932d      	str	r3, [sp, #180]	; 0xb4
 8015966:	2b07      	cmp	r3, #7
 8015968:	dd08      	ble.n	801597c <_svfprintf_r+0x11c8>
 801596a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801596c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801596e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015970:	f002 f9a0 	bl	8017cb4 <__ssprint_r>
 8015974:	2800      	cmp	r0, #0
 8015976:	d000      	beq.n	801597a <_svfprintf_r+0x11c6>
 8015978:	e11b      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 801597a:	af2f      	add	r7, sp, #188	; 0xbc
 801597c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801597e:	9b08      	ldr	r3, [sp, #32]
 8015980:	189b      	adds	r3, r3, r2
 8015982:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015984:	1b5b      	subs	r3, r3, r5
 8015986:	7814      	ldrb	r4, [r2, #0]
 8015988:	429c      	cmp	r4, r3
 801598a:	dd00      	ble.n	801598e <_svfprintf_r+0x11da>
 801598c:	001c      	movs	r4, r3
 801598e:	2c00      	cmp	r4, #0
 8015990:	dd14      	ble.n	80159bc <_svfprintf_r+0x1208>
 8015992:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015994:	603d      	str	r5, [r7, #0]
 8015996:	18e3      	adds	r3, r4, r3
 8015998:	932e      	str	r3, [sp, #184]	; 0xb8
 801599a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801599c:	607c      	str	r4, [r7, #4]
 801599e:	9309      	str	r3, [sp, #36]	; 0x24
 80159a0:	3301      	adds	r3, #1
 80159a2:	932d      	str	r3, [sp, #180]	; 0xb4
 80159a4:	3708      	adds	r7, #8
 80159a6:	2b07      	cmp	r3, #7
 80159a8:	dd08      	ble.n	80159bc <_svfprintf_r+0x1208>
 80159aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80159ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80159ae:	aa2c      	add	r2, sp, #176	; 0xb0
 80159b0:	f002 f980 	bl	8017cb4 <__ssprint_r>
 80159b4:	2800      	cmp	r0, #0
 80159b6:	d000      	beq.n	80159ba <_svfprintf_r+0x1206>
 80159b8:	e0fb      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 80159ba:	af2f      	add	r7, sp, #188	; 0xbc
 80159bc:	43e3      	mvns	r3, r4
 80159be:	17db      	asrs	r3, r3, #31
 80159c0:	401c      	ands	r4, r3
 80159c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80159c4:	781b      	ldrb	r3, [r3, #0]
 80159c6:	1b1c      	subs	r4, r3, r4
 80159c8:	2c00      	cmp	r4, #0
 80159ca:	dd19      	ble.n	8015a00 <_svfprintf_r+0x124c>
 80159cc:	0039      	movs	r1, r7
 80159ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80159d0:	4852      	ldr	r0, [pc, #328]	; (8015b1c <_svfprintf_r+0x1368>)
 80159d2:	9309      	str	r3, [sp, #36]	; 0x24
 80159d4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80159d6:	3301      	adds	r3, #1
 80159d8:	3108      	adds	r1, #8
 80159da:	6038      	str	r0, [r7, #0]
 80159dc:	2c10      	cmp	r4, #16
 80159de:	dc1a      	bgt.n	8015a16 <_svfprintf_r+0x1262>
 80159e0:	607c      	str	r4, [r7, #4]
 80159e2:	1914      	adds	r4, r2, r4
 80159e4:	000f      	movs	r7, r1
 80159e6:	942e      	str	r4, [sp, #184]	; 0xb8
 80159e8:	932d      	str	r3, [sp, #180]	; 0xb4
 80159ea:	2b07      	cmp	r3, #7
 80159ec:	dd08      	ble.n	8015a00 <_svfprintf_r+0x124c>
 80159ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80159f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80159f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80159f4:	f002 f95e 	bl	8017cb4 <__ssprint_r>
 80159f8:	2800      	cmp	r0, #0
 80159fa:	d000      	beq.n	80159fe <_svfprintf_r+0x124a>
 80159fc:	e0d9      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 80159fe:	af2f      	add	r7, sp, #188	; 0xbc
 8015a00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015a02:	781b      	ldrb	r3, [r3, #0]
 8015a04:	18ed      	adds	r5, r5, r3
 8015a06:	e711      	b.n	801582c <_svfprintf_r+0x1078>
 8015a08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015a0a:	3b01      	subs	r3, #1
 8015a0c:	9312      	str	r3, [sp, #72]	; 0x48
 8015a0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015a10:	3b01      	subs	r3, #1
 8015a12:	9311      	str	r3, [sp, #68]	; 0x44
 8015a14:	e799      	b.n	801594a <_svfprintf_r+0x1196>
 8015a16:	2010      	movs	r0, #16
 8015a18:	1812      	adds	r2, r2, r0
 8015a1a:	6078      	str	r0, [r7, #4]
 8015a1c:	922e      	str	r2, [sp, #184]	; 0xb8
 8015a1e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015a20:	2b07      	cmp	r3, #7
 8015a22:	dd08      	ble.n	8015a36 <_svfprintf_r+0x1282>
 8015a24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a26:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a28:	aa2c      	add	r2, sp, #176	; 0xb0
 8015a2a:	f002 f943 	bl	8017cb4 <__ssprint_r>
 8015a2e:	2800      	cmp	r0, #0
 8015a30:	d000      	beq.n	8015a34 <_svfprintf_r+0x1280>
 8015a32:	e0be      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 8015a34:	a92f      	add	r1, sp, #188	; 0xbc
 8015a36:	000f      	movs	r7, r1
 8015a38:	3c10      	subs	r4, #16
 8015a3a:	e7c7      	b.n	80159cc <_svfprintf_r+0x1218>
 8015a3c:	003c      	movs	r4, r7
 8015a3e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015a40:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015a42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015a44:	9309      	str	r3, [sp, #36]	; 0x24
 8015a46:	3101      	adds	r1, #1
 8015a48:	3301      	adds	r3, #1
 8015a4a:	3408      	adds	r4, #8
 8015a4c:	2a01      	cmp	r2, #1
 8015a4e:	dc03      	bgt.n	8015a58 <_svfprintf_r+0x12a4>
 8015a50:	2201      	movs	r2, #1
 8015a52:	4216      	tst	r6, r2
 8015a54:	d100      	bne.n	8015a58 <_svfprintf_r+0x12a4>
 8015a56:	e089      	b.n	8015b6c <_svfprintf_r+0x13b8>
 8015a58:	9a08      	ldr	r2, [sp, #32]
 8015a5a:	912e      	str	r1, [sp, #184]	; 0xb8
 8015a5c:	603a      	str	r2, [r7, #0]
 8015a5e:	2201      	movs	r2, #1
 8015a60:	932d      	str	r3, [sp, #180]	; 0xb4
 8015a62:	607a      	str	r2, [r7, #4]
 8015a64:	2b07      	cmp	r3, #7
 8015a66:	dd08      	ble.n	8015a7a <_svfprintf_r+0x12c6>
 8015a68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a6c:	aa2c      	add	r2, sp, #176	; 0xb0
 8015a6e:	f002 f921 	bl	8017cb4 <__ssprint_r>
 8015a72:	2800      	cmp	r0, #0
 8015a74:	d000      	beq.n	8015a78 <_svfprintf_r+0x12c4>
 8015a76:	e09c      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 8015a78:	ac2f      	add	r4, sp, #188	; 0xbc
 8015a7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015a7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015a7e:	4694      	mov	ip, r2
 8015a80:	6023      	str	r3, [r4, #0]
 8015a82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015a84:	6063      	str	r3, [r4, #4]
 8015a86:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015a88:	3408      	adds	r4, #8
 8015a8a:	4463      	add	r3, ip
 8015a8c:	932e      	str	r3, [sp, #184]	; 0xb8
 8015a8e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015a90:	9309      	str	r3, [sp, #36]	; 0x24
 8015a92:	3301      	adds	r3, #1
 8015a94:	932d      	str	r3, [sp, #180]	; 0xb4
 8015a96:	2b07      	cmp	r3, #7
 8015a98:	dd08      	ble.n	8015aac <_svfprintf_r+0x12f8>
 8015a9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015a9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a9e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015aa0:	f002 f908 	bl	8017cb4 <__ssprint_r>
 8015aa4:	2800      	cmp	r0, #0
 8015aa6:	d000      	beq.n	8015aaa <_svfprintf_r+0x12f6>
 8015aa8:	e083      	b.n	8015bb2 <_svfprintf_r+0x13fe>
 8015aaa:	ac2f      	add	r4, sp, #188	; 0xbc
 8015aac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015aae:	2200      	movs	r2, #0
 8015ab0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015ab2:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015ab4:	1e5d      	subs	r5, r3, #1
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	f7ea fcd0 	bl	800045c <__aeabi_dcmpeq>
 8015abc:	2800      	cmp	r0, #0
 8015abe:	d12f      	bne.n	8015b20 <_svfprintf_r+0x136c>
 8015ac0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015ac2:	9808      	ldr	r0, [sp, #32]
 8015ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8015ac6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015ac8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015aca:	1c59      	adds	r1, r3, #1
 8015acc:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ad0:	3001      	adds	r0, #1
 8015ad2:	3b01      	subs	r3, #1
 8015ad4:	189b      	adds	r3, r3, r2
 8015ad6:	6020      	str	r0, [r4, #0]
 8015ad8:	6065      	str	r5, [r4, #4]
 8015ada:	932e      	str	r3, [sp, #184]	; 0xb8
 8015adc:	912d      	str	r1, [sp, #180]	; 0xb4
 8015ade:	3408      	adds	r4, #8
 8015ae0:	2907      	cmp	r1, #7
 8015ae2:	dd07      	ble.n	8015af4 <_svfprintf_r+0x1340>
 8015ae4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ae6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ae8:	aa2c      	add	r2, sp, #176	; 0xb0
 8015aea:	f002 f8e3 	bl	8017cb4 <__ssprint_r>
 8015aee:	2800      	cmp	r0, #0
 8015af0:	d15f      	bne.n	8015bb2 <_svfprintf_r+0x13fe>
 8015af2:	ac2f      	add	r4, sp, #188	; 0xbc
 8015af4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015af6:	ab28      	add	r3, sp, #160	; 0xa0
 8015af8:	4694      	mov	ip, r2
 8015afa:	6023      	str	r3, [r4, #0]
 8015afc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015afe:	6063      	str	r3, [r4, #4]
 8015b00:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015b02:	4463      	add	r3, ip
 8015b04:	932e      	str	r3, [sp, #184]	; 0xb8
 8015b06:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015b08:	9308      	str	r3, [sp, #32]
 8015b0a:	3301      	adds	r3, #1
 8015b0c:	932d      	str	r3, [sp, #180]	; 0xb4
 8015b0e:	2b07      	cmp	r3, #7
 8015b10:	dd00      	ble.n	8015b14 <_svfprintf_r+0x1360>
 8015b12:	e628      	b.n	8015766 <_svfprintf_r+0xfb2>
 8015b14:	3408      	adds	r4, #8
 8015b16:	0027      	movs	r7, r4
 8015b18:	e57b      	b.n	8015612 <_svfprintf_r+0xe5e>
 8015b1a:	46c0      	nop			; (mov r8, r8)
 8015b1c:	0801c7c4 	.word	0x0801c7c4
 8015b20:	2710      	movs	r7, #16
 8015b22:	2d00      	cmp	r5, #0
 8015b24:	dde6      	ble.n	8015af4 <_svfprintf_r+0x1340>
 8015b26:	0021      	movs	r1, r4
 8015b28:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015b2a:	4857      	ldr	r0, [pc, #348]	; (8015c88 <_svfprintf_r+0x14d4>)
 8015b2c:	9308      	str	r3, [sp, #32]
 8015b2e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015b30:	3301      	adds	r3, #1
 8015b32:	3108      	adds	r1, #8
 8015b34:	6020      	str	r0, [r4, #0]
 8015b36:	2d10      	cmp	r5, #16
 8015b38:	dc07      	bgt.n	8015b4a <_svfprintf_r+0x1396>
 8015b3a:	6065      	str	r5, [r4, #4]
 8015b3c:	000c      	movs	r4, r1
 8015b3e:	18ad      	adds	r5, r5, r2
 8015b40:	952e      	str	r5, [sp, #184]	; 0xb8
 8015b42:	932d      	str	r3, [sp, #180]	; 0xb4
 8015b44:	2b07      	cmp	r3, #7
 8015b46:	ddd5      	ble.n	8015af4 <_svfprintf_r+0x1340>
 8015b48:	e7cc      	b.n	8015ae4 <_svfprintf_r+0x1330>
 8015b4a:	3210      	adds	r2, #16
 8015b4c:	6067      	str	r7, [r4, #4]
 8015b4e:	922e      	str	r2, [sp, #184]	; 0xb8
 8015b50:	932d      	str	r3, [sp, #180]	; 0xb4
 8015b52:	2b07      	cmp	r3, #7
 8015b54:	dd07      	ble.n	8015b66 <_svfprintf_r+0x13b2>
 8015b56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015b58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b5a:	aa2c      	add	r2, sp, #176	; 0xb0
 8015b5c:	f002 f8aa 	bl	8017cb4 <__ssprint_r>
 8015b60:	2800      	cmp	r0, #0
 8015b62:	d126      	bne.n	8015bb2 <_svfprintf_r+0x13fe>
 8015b64:	a92f      	add	r1, sp, #188	; 0xbc
 8015b66:	000c      	movs	r4, r1
 8015b68:	3d10      	subs	r5, #16
 8015b6a:	e7dc      	b.n	8015b26 <_svfprintf_r+0x1372>
 8015b6c:	9808      	ldr	r0, [sp, #32]
 8015b6e:	912e      	str	r1, [sp, #184]	; 0xb8
 8015b70:	c705      	stmia	r7!, {r0, r2}
 8015b72:	932d      	str	r3, [sp, #180]	; 0xb4
 8015b74:	e7e6      	b.n	8015b44 <_svfprintf_r+0x1390>
 8015b76:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015b78:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015b7a:	2510      	movs	r5, #16
 8015b7c:	1a9c      	subs	r4, r3, r2
 8015b7e:	2c00      	cmp	r4, #0
 8015b80:	dc00      	bgt.n	8015b84 <_svfprintf_r+0x13d0>
 8015b82:	e549      	b.n	8015618 <_svfprintf_r+0xe64>
 8015b84:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015b86:	4941      	ldr	r1, [pc, #260]	; (8015c8c <_svfprintf_r+0x14d8>)
 8015b88:	9308      	str	r3, [sp, #32]
 8015b8a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015b8c:	3301      	adds	r3, #1
 8015b8e:	6039      	str	r1, [r7, #0]
 8015b90:	2c10      	cmp	r4, #16
 8015b92:	dc19      	bgt.n	8015bc8 <_svfprintf_r+0x1414>
 8015b94:	607c      	str	r4, [r7, #4]
 8015b96:	18a4      	adds	r4, r4, r2
 8015b98:	942e      	str	r4, [sp, #184]	; 0xb8
 8015b9a:	932d      	str	r3, [sp, #180]	; 0xb4
 8015b9c:	2b07      	cmp	r3, #7
 8015b9e:	dc00      	bgt.n	8015ba2 <_svfprintf_r+0x13ee>
 8015ba0:	e53a      	b.n	8015618 <_svfprintf_r+0xe64>
 8015ba2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ba4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ba6:	aa2c      	add	r2, sp, #176	; 0xb0
 8015ba8:	f002 f884 	bl	8017cb4 <__ssprint_r>
 8015bac:	2800      	cmp	r0, #0
 8015bae:	d100      	bne.n	8015bb2 <_svfprintf_r+0x13fe>
 8015bb0:	e532      	b.n	8015618 <_svfprintf_r+0xe64>
 8015bb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d101      	bne.n	8015bbc <_svfprintf_r+0x1408>
 8015bb8:	f7ff f827 	bl	8014c0a <_svfprintf_r+0x456>
 8015bbc:	0019      	movs	r1, r3
 8015bbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015bc0:	f000 ff60 	bl	8016a84 <_free_r>
 8015bc4:	f7ff f821 	bl	8014c0a <_svfprintf_r+0x456>
 8015bc8:	3210      	adds	r2, #16
 8015bca:	607d      	str	r5, [r7, #4]
 8015bcc:	922e      	str	r2, [sp, #184]	; 0xb8
 8015bce:	932d      	str	r3, [sp, #180]	; 0xb4
 8015bd0:	3708      	adds	r7, #8
 8015bd2:	2b07      	cmp	r3, #7
 8015bd4:	dd07      	ble.n	8015be6 <_svfprintf_r+0x1432>
 8015bd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015bd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015bda:	aa2c      	add	r2, sp, #176	; 0xb0
 8015bdc:	f002 f86a 	bl	8017cb4 <__ssprint_r>
 8015be0:	2800      	cmp	r0, #0
 8015be2:	d1e6      	bne.n	8015bb2 <_svfprintf_r+0x13fe>
 8015be4:	af2f      	add	r7, sp, #188	; 0xbc
 8015be6:	3c10      	subs	r4, #16
 8015be8:	e7cc      	b.n	8015b84 <_svfprintf_r+0x13d0>
 8015bea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015bec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015bee:	f000 ff49 	bl	8016a84 <_free_r>
 8015bf2:	e52b      	b.n	801564c <_svfprintf_r+0xe98>
 8015bf4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015bf6:	9306      	str	r3, [sp, #24]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d101      	bne.n	8015c00 <_svfprintf_r+0x144c>
 8015bfc:	f7ff f805 	bl	8014c0a <_svfprintf_r+0x456>
 8015c00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c02:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c04:	aa2c      	add	r2, sp, #176	; 0xb0
 8015c06:	f002 f855 	bl	8017cb4 <__ssprint_r>
 8015c0a:	f7fe fffe 	bl	8014c0a <_svfprintf_r+0x456>
 8015c0e:	0035      	movs	r5, r6
 8015c10:	2a00      	cmp	r2, #0
 8015c12:	d101      	bne.n	8015c18 <_svfprintf_r+0x1464>
 8015c14:	f7fe ff6d 	bl	8014af2 <_svfprintf_r+0x33e>
 8015c18:	2b01      	cmp	r3, #1
 8015c1a:	d101      	bne.n	8015c20 <_svfprintf_r+0x146c>
 8015c1c:	f7ff fbe7 	bl	80153ee <_svfprintf_r+0xc3a>
 8015c20:	2b02      	cmp	r3, #2
 8015c22:	d100      	bne.n	8015c26 <_svfprintf_r+0x1472>
 8015c24:	e437      	b.n	8015496 <_svfprintf_r+0xce2>
 8015c26:	2607      	movs	r6, #7
 8015c28:	ab58      	add	r3, sp, #352	; 0x160
 8015c2a:	9308      	str	r3, [sp, #32]
 8015c2c:	9a08      	ldr	r2, [sp, #32]
 8015c2e:	0013      	movs	r3, r2
 8015c30:	3b01      	subs	r3, #1
 8015c32:	9308      	str	r3, [sp, #32]
 8015c34:	9b06      	ldr	r3, [sp, #24]
 8015c36:	9908      	ldr	r1, [sp, #32]
 8015c38:	4033      	ands	r3, r6
 8015c3a:	3330      	adds	r3, #48	; 0x30
 8015c3c:	700b      	strb	r3, [r1, #0]
 8015c3e:	9907      	ldr	r1, [sp, #28]
 8015c40:	074c      	lsls	r4, r1, #29
 8015c42:	9906      	ldr	r1, [sp, #24]
 8015c44:	08c8      	lsrs	r0, r1, #3
 8015c46:	9907      	ldr	r1, [sp, #28]
 8015c48:	4304      	orrs	r4, r0
 8015c4a:	08c9      	lsrs	r1, r1, #3
 8015c4c:	9107      	str	r1, [sp, #28]
 8015c4e:	0021      	movs	r1, r4
 8015c50:	9807      	ldr	r0, [sp, #28]
 8015c52:	9406      	str	r4, [sp, #24]
 8015c54:	4301      	orrs	r1, r0
 8015c56:	d1e9      	bne.n	8015c2c <_svfprintf_r+0x1478>
 8015c58:	07e9      	lsls	r1, r5, #31
 8015c5a:	d507      	bpl.n	8015c6c <_svfprintf_r+0x14b8>
 8015c5c:	2b30      	cmp	r3, #48	; 0x30
 8015c5e:	d005      	beq.n	8015c6c <_svfprintf_r+0x14b8>
 8015c60:	2330      	movs	r3, #48	; 0x30
 8015c62:	9808      	ldr	r0, [sp, #32]
 8015c64:	3801      	subs	r0, #1
 8015c66:	7003      	strb	r3, [r0, #0]
 8015c68:	1e93      	subs	r3, r2, #2
 8015c6a:	9308      	str	r3, [sp, #32]
 8015c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c6e:	9a08      	ldr	r2, [sp, #32]
 8015c70:	9319      	str	r3, [sp, #100]	; 0x64
 8015c72:	ab58      	add	r3, sp, #352	; 0x160
 8015c74:	1a9b      	subs	r3, r3, r2
 8015c76:	9309      	str	r3, [sp, #36]	; 0x24
 8015c78:	2300      	movs	r3, #0
 8015c7a:	002e      	movs	r6, r5
 8015c7c:	930c      	str	r3, [sp, #48]	; 0x30
 8015c7e:	001d      	movs	r5, r3
 8015c80:	9310      	str	r3, [sp, #64]	; 0x40
 8015c82:	9311      	str	r3, [sp, #68]	; 0x44
 8015c84:	f7ff f8f7 	bl	8014e76 <_svfprintf_r+0x6c2>
 8015c88:	0801c7c4 	.word	0x0801c7c4
 8015c8c:	0801c7b4 	.word	0x0801c7b4

08015c90 <sysconf>:
 8015c90:	2380      	movs	r3, #128	; 0x80
 8015c92:	b510      	push	{r4, lr}
 8015c94:	015b      	lsls	r3, r3, #5
 8015c96:	2808      	cmp	r0, #8
 8015c98:	d004      	beq.n	8015ca4 <sysconf+0x14>
 8015c9a:	f000 fe85 	bl	80169a8 <__errno>
 8015c9e:	2316      	movs	r3, #22
 8015ca0:	6003      	str	r3, [r0, #0]
 8015ca2:	3b17      	subs	r3, #23
 8015ca4:	0018      	movs	r0, r3
 8015ca6:	bd10      	pop	{r4, pc}

08015ca8 <register_fini>:
 8015ca8:	4b03      	ldr	r3, [pc, #12]	; (8015cb8 <register_fini+0x10>)
 8015caa:	b510      	push	{r4, lr}
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d002      	beq.n	8015cb6 <register_fini+0xe>
 8015cb0:	4802      	ldr	r0, [pc, #8]	; (8015cbc <register_fini+0x14>)
 8015cb2:	f000 f805 	bl	8015cc0 <atexit>
 8015cb6:	bd10      	pop	{r4, pc}
 8015cb8:	00000000 	.word	0x00000000
 8015cbc:	080169b5 	.word	0x080169b5

08015cc0 <atexit>:
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	b510      	push	{r4, lr}
 8015cc4:	0001      	movs	r1, r0
 8015cc6:	001a      	movs	r2, r3
 8015cc8:	0018      	movs	r0, r3
 8015cca:	f002 f881 	bl	8017dd0 <__register_exitproc>
 8015cce:	bd10      	pop	{r4, pc}

08015cd0 <quorem>:
 8015cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cd2:	0006      	movs	r6, r0
 8015cd4:	690b      	ldr	r3, [r1, #16]
 8015cd6:	6932      	ldr	r2, [r6, #16]
 8015cd8:	b087      	sub	sp, #28
 8015cda:	2000      	movs	r0, #0
 8015cdc:	9103      	str	r1, [sp, #12]
 8015cde:	429a      	cmp	r2, r3
 8015ce0:	db65      	blt.n	8015dae <quorem+0xde>
 8015ce2:	3b01      	subs	r3, #1
 8015ce4:	009c      	lsls	r4, r3, #2
 8015ce6:	9300      	str	r3, [sp, #0]
 8015ce8:	000b      	movs	r3, r1
 8015cea:	3314      	adds	r3, #20
 8015cec:	9305      	str	r3, [sp, #20]
 8015cee:	191b      	adds	r3, r3, r4
 8015cf0:	9304      	str	r3, [sp, #16]
 8015cf2:	0033      	movs	r3, r6
 8015cf4:	3314      	adds	r3, #20
 8015cf6:	9302      	str	r3, [sp, #8]
 8015cf8:	191c      	adds	r4, r3, r4
 8015cfa:	9b04      	ldr	r3, [sp, #16]
 8015cfc:	6827      	ldr	r7, [r4, #0]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	0038      	movs	r0, r7
 8015d02:	1c5d      	adds	r5, r3, #1
 8015d04:	0029      	movs	r1, r5
 8015d06:	9301      	str	r3, [sp, #4]
 8015d08:	f7ea fa22 	bl	8000150 <__udivsi3>
 8015d0c:	9001      	str	r0, [sp, #4]
 8015d0e:	42af      	cmp	r7, r5
 8015d10:	d324      	bcc.n	8015d5c <quorem+0x8c>
 8015d12:	2500      	movs	r5, #0
 8015d14:	46ac      	mov	ip, r5
 8015d16:	9802      	ldr	r0, [sp, #8]
 8015d18:	9f05      	ldr	r7, [sp, #20]
 8015d1a:	cf08      	ldmia	r7!, {r3}
 8015d1c:	9a01      	ldr	r2, [sp, #4]
 8015d1e:	b299      	uxth	r1, r3
 8015d20:	4351      	muls	r1, r2
 8015d22:	0c1b      	lsrs	r3, r3, #16
 8015d24:	4353      	muls	r3, r2
 8015d26:	1949      	adds	r1, r1, r5
 8015d28:	0c0a      	lsrs	r2, r1, #16
 8015d2a:	189b      	adds	r3, r3, r2
 8015d2c:	6802      	ldr	r2, [r0, #0]
 8015d2e:	b289      	uxth	r1, r1
 8015d30:	b292      	uxth	r2, r2
 8015d32:	4462      	add	r2, ip
 8015d34:	1a52      	subs	r2, r2, r1
 8015d36:	6801      	ldr	r1, [r0, #0]
 8015d38:	0c1d      	lsrs	r5, r3, #16
 8015d3a:	0c09      	lsrs	r1, r1, #16
 8015d3c:	b29b      	uxth	r3, r3
 8015d3e:	1acb      	subs	r3, r1, r3
 8015d40:	1411      	asrs	r1, r2, #16
 8015d42:	185b      	adds	r3, r3, r1
 8015d44:	1419      	asrs	r1, r3, #16
 8015d46:	b292      	uxth	r2, r2
 8015d48:	041b      	lsls	r3, r3, #16
 8015d4a:	431a      	orrs	r2, r3
 8015d4c:	9b04      	ldr	r3, [sp, #16]
 8015d4e:	468c      	mov	ip, r1
 8015d50:	c004      	stmia	r0!, {r2}
 8015d52:	42bb      	cmp	r3, r7
 8015d54:	d2e1      	bcs.n	8015d1a <quorem+0x4a>
 8015d56:	6823      	ldr	r3, [r4, #0]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d030      	beq.n	8015dbe <quorem+0xee>
 8015d5c:	0030      	movs	r0, r6
 8015d5e:	9903      	ldr	r1, [sp, #12]
 8015d60:	f001 fd76 	bl	8017850 <__mcmp>
 8015d64:	2800      	cmp	r0, #0
 8015d66:	db21      	blt.n	8015dac <quorem+0xdc>
 8015d68:	0030      	movs	r0, r6
 8015d6a:	2400      	movs	r4, #0
 8015d6c:	9b01      	ldr	r3, [sp, #4]
 8015d6e:	9903      	ldr	r1, [sp, #12]
 8015d70:	3301      	adds	r3, #1
 8015d72:	9301      	str	r3, [sp, #4]
 8015d74:	3014      	adds	r0, #20
 8015d76:	3114      	adds	r1, #20
 8015d78:	6803      	ldr	r3, [r0, #0]
 8015d7a:	c920      	ldmia	r1!, {r5}
 8015d7c:	b29a      	uxth	r2, r3
 8015d7e:	1914      	adds	r4, r2, r4
 8015d80:	b2aa      	uxth	r2, r5
 8015d82:	1aa2      	subs	r2, r4, r2
 8015d84:	0c1b      	lsrs	r3, r3, #16
 8015d86:	0c2d      	lsrs	r5, r5, #16
 8015d88:	1414      	asrs	r4, r2, #16
 8015d8a:	1b5b      	subs	r3, r3, r5
 8015d8c:	191b      	adds	r3, r3, r4
 8015d8e:	141c      	asrs	r4, r3, #16
 8015d90:	b292      	uxth	r2, r2
 8015d92:	041b      	lsls	r3, r3, #16
 8015d94:	4313      	orrs	r3, r2
 8015d96:	c008      	stmia	r0!, {r3}
 8015d98:	9b04      	ldr	r3, [sp, #16]
 8015d9a:	428b      	cmp	r3, r1
 8015d9c:	d2ec      	bcs.n	8015d78 <quorem+0xa8>
 8015d9e:	9b00      	ldr	r3, [sp, #0]
 8015da0:	9a02      	ldr	r2, [sp, #8]
 8015da2:	009b      	lsls	r3, r3, #2
 8015da4:	18d3      	adds	r3, r2, r3
 8015da6:	681a      	ldr	r2, [r3, #0]
 8015da8:	2a00      	cmp	r2, #0
 8015daa:	d015      	beq.n	8015dd8 <quorem+0x108>
 8015dac:	9801      	ldr	r0, [sp, #4]
 8015dae:	b007      	add	sp, #28
 8015db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015db2:	6823      	ldr	r3, [r4, #0]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d106      	bne.n	8015dc6 <quorem+0xf6>
 8015db8:	9b00      	ldr	r3, [sp, #0]
 8015dba:	3b01      	subs	r3, #1
 8015dbc:	9300      	str	r3, [sp, #0]
 8015dbe:	9b02      	ldr	r3, [sp, #8]
 8015dc0:	3c04      	subs	r4, #4
 8015dc2:	42a3      	cmp	r3, r4
 8015dc4:	d3f5      	bcc.n	8015db2 <quorem+0xe2>
 8015dc6:	9b00      	ldr	r3, [sp, #0]
 8015dc8:	6133      	str	r3, [r6, #16]
 8015dca:	e7c7      	b.n	8015d5c <quorem+0x8c>
 8015dcc:	681a      	ldr	r2, [r3, #0]
 8015dce:	2a00      	cmp	r2, #0
 8015dd0:	d106      	bne.n	8015de0 <quorem+0x110>
 8015dd2:	9a00      	ldr	r2, [sp, #0]
 8015dd4:	3a01      	subs	r2, #1
 8015dd6:	9200      	str	r2, [sp, #0]
 8015dd8:	9a02      	ldr	r2, [sp, #8]
 8015dda:	3b04      	subs	r3, #4
 8015ddc:	429a      	cmp	r2, r3
 8015dde:	d3f5      	bcc.n	8015dcc <quorem+0xfc>
 8015de0:	9b00      	ldr	r3, [sp, #0]
 8015de2:	6133      	str	r3, [r6, #16]
 8015de4:	e7e2      	b.n	8015dac <quorem+0xdc>
	...

08015de8 <_dtoa_r>:
 8015de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dea:	0014      	movs	r4, r2
 8015dec:	001d      	movs	r5, r3
 8015dee:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8015df0:	b09d      	sub	sp, #116	; 0x74
 8015df2:	9408      	str	r4, [sp, #32]
 8015df4:	9509      	str	r5, [sp, #36]	; 0x24
 8015df6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8015df8:	9004      	str	r0, [sp, #16]
 8015dfa:	2900      	cmp	r1, #0
 8015dfc:	d009      	beq.n	8015e12 <_dtoa_r+0x2a>
 8015dfe:	2301      	movs	r3, #1
 8015e00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015e02:	4093      	lsls	r3, r2
 8015e04:	604a      	str	r2, [r1, #4]
 8015e06:	608b      	str	r3, [r1, #8]
 8015e08:	f001 faca 	bl	80173a0 <_Bfree>
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	9a04      	ldr	r2, [sp, #16]
 8015e10:	6413      	str	r3, [r2, #64]	; 0x40
 8015e12:	2d00      	cmp	r5, #0
 8015e14:	da1e      	bge.n	8015e54 <_dtoa_r+0x6c>
 8015e16:	2301      	movs	r3, #1
 8015e18:	6033      	str	r3, [r6, #0]
 8015e1a:	006b      	lsls	r3, r5, #1
 8015e1c:	085b      	lsrs	r3, r3, #1
 8015e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8015e20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015e22:	4bb6      	ldr	r3, [pc, #728]	; (80160fc <_dtoa_r+0x314>)
 8015e24:	4ab5      	ldr	r2, [pc, #724]	; (80160fc <_dtoa_r+0x314>)
 8015e26:	403b      	ands	r3, r7
 8015e28:	4293      	cmp	r3, r2
 8015e2a:	d116      	bne.n	8015e5a <_dtoa_r+0x72>
 8015e2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015e2e:	4bb4      	ldr	r3, [pc, #720]	; (8016100 <_dtoa_r+0x318>)
 8015e30:	6013      	str	r3, [r2, #0]
 8015e32:	033a      	lsls	r2, r7, #12
 8015e34:	0b12      	lsrs	r2, r2, #12
 8015e36:	4314      	orrs	r4, r2
 8015e38:	d101      	bne.n	8015e3e <_dtoa_r+0x56>
 8015e3a:	f000 fd9e 	bl	801697a <_dtoa_r+0xb92>
 8015e3e:	48b1      	ldr	r0, [pc, #708]	; (8016104 <_dtoa_r+0x31c>)
 8015e40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015e42:	9006      	str	r0, [sp, #24]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d002      	beq.n	8015e4e <_dtoa_r+0x66>
 8015e48:	4baf      	ldr	r3, [pc, #700]	; (8016108 <_dtoa_r+0x320>)
 8015e4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015e4c:	6013      	str	r3, [r2, #0]
 8015e4e:	9806      	ldr	r0, [sp, #24]
 8015e50:	b01d      	add	sp, #116	; 0x74
 8015e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e54:	2300      	movs	r3, #0
 8015e56:	6033      	str	r3, [r6, #0]
 8015e58:	e7e2      	b.n	8015e20 <_dtoa_r+0x38>
 8015e5a:	9a08      	ldr	r2, [sp, #32]
 8015e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e5e:	9210      	str	r2, [sp, #64]	; 0x40
 8015e60:	9311      	str	r3, [sp, #68]	; 0x44
 8015e62:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015e64:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015e66:	2200      	movs	r2, #0
 8015e68:	2300      	movs	r3, #0
 8015e6a:	f7ea faf7 	bl	800045c <__aeabi_dcmpeq>
 8015e6e:	1e06      	subs	r6, r0, #0
 8015e70:	d009      	beq.n	8015e86 <_dtoa_r+0x9e>
 8015e72:	2301      	movs	r3, #1
 8015e74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015e76:	6013      	str	r3, [r2, #0]
 8015e78:	4ba4      	ldr	r3, [pc, #656]	; (801610c <_dtoa_r+0x324>)
 8015e7a:	9306      	str	r3, [sp, #24]
 8015e7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d0e5      	beq.n	8015e4e <_dtoa_r+0x66>
 8015e82:	4ba3      	ldr	r3, [pc, #652]	; (8016110 <_dtoa_r+0x328>)
 8015e84:	e7e1      	b.n	8015e4a <_dtoa_r+0x62>
 8015e86:	ab1a      	add	r3, sp, #104	; 0x68
 8015e88:	9301      	str	r3, [sp, #4]
 8015e8a:	ab1b      	add	r3, sp, #108	; 0x6c
 8015e8c:	9300      	str	r3, [sp, #0]
 8015e8e:	9804      	ldr	r0, [sp, #16]
 8015e90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015e92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e94:	f001 fe04 	bl	8017aa0 <__d2b>
 8015e98:	007b      	lsls	r3, r7, #1
 8015e9a:	9005      	str	r0, [sp, #20]
 8015e9c:	0d5b      	lsrs	r3, r3, #21
 8015e9e:	d100      	bne.n	8015ea2 <_dtoa_r+0xba>
 8015ea0:	e07c      	b.n	8015f9c <_dtoa_r+0x1b4>
 8015ea2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015ea4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015ea6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015ea8:	4c9a      	ldr	r4, [pc, #616]	; (8016114 <_dtoa_r+0x32c>)
 8015eaa:	0312      	lsls	r2, r2, #12
 8015eac:	0b12      	lsrs	r2, r2, #12
 8015eae:	4314      	orrs	r4, r2
 8015eb0:	0021      	movs	r1, r4
 8015eb2:	4a99      	ldr	r2, [pc, #612]	; (8016118 <_dtoa_r+0x330>)
 8015eb4:	9617      	str	r6, [sp, #92]	; 0x5c
 8015eb6:	189f      	adds	r7, r3, r2
 8015eb8:	2200      	movs	r2, #0
 8015eba:	4b98      	ldr	r3, [pc, #608]	; (801611c <_dtoa_r+0x334>)
 8015ebc:	f7ec fa72 	bl	80023a4 <__aeabi_dsub>
 8015ec0:	4a97      	ldr	r2, [pc, #604]	; (8016120 <_dtoa_r+0x338>)
 8015ec2:	4b98      	ldr	r3, [pc, #608]	; (8016124 <_dtoa_r+0x33c>)
 8015ec4:	f7ec f802 	bl	8001ecc <__aeabi_dmul>
 8015ec8:	4a97      	ldr	r2, [pc, #604]	; (8016128 <_dtoa_r+0x340>)
 8015eca:	4b98      	ldr	r3, [pc, #608]	; (801612c <_dtoa_r+0x344>)
 8015ecc:	f7eb f8c0 	bl	8001050 <__aeabi_dadd>
 8015ed0:	0004      	movs	r4, r0
 8015ed2:	0038      	movs	r0, r7
 8015ed4:	000d      	movs	r5, r1
 8015ed6:	f7ec fe4b 	bl	8002b70 <__aeabi_i2d>
 8015eda:	4a95      	ldr	r2, [pc, #596]	; (8016130 <_dtoa_r+0x348>)
 8015edc:	4b95      	ldr	r3, [pc, #596]	; (8016134 <_dtoa_r+0x34c>)
 8015ede:	f7eb fff5 	bl	8001ecc <__aeabi_dmul>
 8015ee2:	0002      	movs	r2, r0
 8015ee4:	000b      	movs	r3, r1
 8015ee6:	0020      	movs	r0, r4
 8015ee8:	0029      	movs	r1, r5
 8015eea:	f7eb f8b1 	bl	8001050 <__aeabi_dadd>
 8015eee:	0004      	movs	r4, r0
 8015ef0:	000d      	movs	r5, r1
 8015ef2:	f7ec fe07 	bl	8002b04 <__aeabi_d2iz>
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	9003      	str	r0, [sp, #12]
 8015efa:	2300      	movs	r3, #0
 8015efc:	0020      	movs	r0, r4
 8015efe:	0029      	movs	r1, r5
 8015f00:	f7ea fab2 	bl	8000468 <__aeabi_dcmplt>
 8015f04:	2800      	cmp	r0, #0
 8015f06:	d00b      	beq.n	8015f20 <_dtoa_r+0x138>
 8015f08:	9803      	ldr	r0, [sp, #12]
 8015f0a:	f7ec fe31 	bl	8002b70 <__aeabi_i2d>
 8015f0e:	002b      	movs	r3, r5
 8015f10:	0022      	movs	r2, r4
 8015f12:	f7ea faa3 	bl	800045c <__aeabi_dcmpeq>
 8015f16:	4243      	negs	r3, r0
 8015f18:	4158      	adcs	r0, r3
 8015f1a:	9b03      	ldr	r3, [sp, #12]
 8015f1c:	1a1b      	subs	r3, r3, r0
 8015f1e:	9303      	str	r3, [sp, #12]
 8015f20:	2301      	movs	r3, #1
 8015f22:	9315      	str	r3, [sp, #84]	; 0x54
 8015f24:	9b03      	ldr	r3, [sp, #12]
 8015f26:	2b16      	cmp	r3, #22
 8015f28:	d80f      	bhi.n	8015f4a <_dtoa_r+0x162>
 8015f2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015f2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015f2e:	00da      	lsls	r2, r3, #3
 8015f30:	4b81      	ldr	r3, [pc, #516]	; (8016138 <_dtoa_r+0x350>)
 8015f32:	189b      	adds	r3, r3, r2
 8015f34:	681a      	ldr	r2, [r3, #0]
 8015f36:	685b      	ldr	r3, [r3, #4]
 8015f38:	f7ea fa96 	bl	8000468 <__aeabi_dcmplt>
 8015f3c:	2800      	cmp	r0, #0
 8015f3e:	d049      	beq.n	8015fd4 <_dtoa_r+0x1ec>
 8015f40:	9b03      	ldr	r3, [sp, #12]
 8015f42:	3b01      	subs	r3, #1
 8015f44:	9303      	str	r3, [sp, #12]
 8015f46:	2300      	movs	r3, #0
 8015f48:	9315      	str	r3, [sp, #84]	; 0x54
 8015f4a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015f4c:	1bdf      	subs	r7, r3, r7
 8015f4e:	2300      	movs	r3, #0
 8015f50:	930a      	str	r3, [sp, #40]	; 0x28
 8015f52:	003b      	movs	r3, r7
 8015f54:	3b01      	subs	r3, #1
 8015f56:	930c      	str	r3, [sp, #48]	; 0x30
 8015f58:	d504      	bpl.n	8015f64 <_dtoa_r+0x17c>
 8015f5a:	2301      	movs	r3, #1
 8015f5c:	1bdb      	subs	r3, r3, r7
 8015f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8015f60:	2300      	movs	r3, #0
 8015f62:	930c      	str	r3, [sp, #48]	; 0x30
 8015f64:	9b03      	ldr	r3, [sp, #12]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	db36      	blt.n	8015fd8 <_dtoa_r+0x1f0>
 8015f6a:	9a03      	ldr	r2, [sp, #12]
 8015f6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f6e:	4694      	mov	ip, r2
 8015f70:	4463      	add	r3, ip
 8015f72:	930c      	str	r3, [sp, #48]	; 0x30
 8015f74:	2300      	movs	r3, #0
 8015f76:	9214      	str	r2, [sp, #80]	; 0x50
 8015f78:	930d      	str	r3, [sp, #52]	; 0x34
 8015f7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015f7c:	2401      	movs	r4, #1
 8015f7e:	2b09      	cmp	r3, #9
 8015f80:	d867      	bhi.n	8016052 <_dtoa_r+0x26a>
 8015f82:	2b05      	cmp	r3, #5
 8015f84:	dd02      	ble.n	8015f8c <_dtoa_r+0x1a4>
 8015f86:	2400      	movs	r4, #0
 8015f88:	3b04      	subs	r3, #4
 8015f8a:	9322      	str	r3, [sp, #136]	; 0x88
 8015f8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015f8e:	1e98      	subs	r0, r3, #2
 8015f90:	2803      	cmp	r0, #3
 8015f92:	d867      	bhi.n	8016064 <_dtoa_r+0x27c>
 8015f94:	f7ea f8c8 	bl	8000128 <__gnu_thumb1_case_uqi>
 8015f98:	5b363829 	.word	0x5b363829
 8015f9c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015f9e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015fa0:	189e      	adds	r6, r3, r2
 8015fa2:	4b66      	ldr	r3, [pc, #408]	; (801613c <_dtoa_r+0x354>)
 8015fa4:	18f2      	adds	r2, r6, r3
 8015fa6:	2a20      	cmp	r2, #32
 8015fa8:	dd0f      	ble.n	8015fca <_dtoa_r+0x1e2>
 8015faa:	2340      	movs	r3, #64	; 0x40
 8015fac:	0038      	movs	r0, r7
 8015fae:	1a9b      	subs	r3, r3, r2
 8015fb0:	4098      	lsls	r0, r3
 8015fb2:	4b63      	ldr	r3, [pc, #396]	; (8016140 <_dtoa_r+0x358>)
 8015fb4:	18f3      	adds	r3, r6, r3
 8015fb6:	40dc      	lsrs	r4, r3
 8015fb8:	4320      	orrs	r0, r4
 8015fba:	f7ec fe09 	bl	8002bd0 <__aeabi_ui2d>
 8015fbe:	2301      	movs	r3, #1
 8015fc0:	4c60      	ldr	r4, [pc, #384]	; (8016144 <_dtoa_r+0x35c>)
 8015fc2:	1e77      	subs	r7, r6, #1
 8015fc4:	1909      	adds	r1, r1, r4
 8015fc6:	9317      	str	r3, [sp, #92]	; 0x5c
 8015fc8:	e776      	b.n	8015eb8 <_dtoa_r+0xd0>
 8015fca:	2320      	movs	r3, #32
 8015fcc:	0020      	movs	r0, r4
 8015fce:	1a9b      	subs	r3, r3, r2
 8015fd0:	4098      	lsls	r0, r3
 8015fd2:	e7f2      	b.n	8015fba <_dtoa_r+0x1d2>
 8015fd4:	9015      	str	r0, [sp, #84]	; 0x54
 8015fd6:	e7b8      	b.n	8015f4a <_dtoa_r+0x162>
 8015fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fda:	9a03      	ldr	r2, [sp, #12]
 8015fdc:	1a9b      	subs	r3, r3, r2
 8015fde:	930a      	str	r3, [sp, #40]	; 0x28
 8015fe0:	4253      	negs	r3, r2
 8015fe2:	930d      	str	r3, [sp, #52]	; 0x34
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	9314      	str	r3, [sp, #80]	; 0x50
 8015fe8:	e7c7      	b.n	8015f7a <_dtoa_r+0x192>
 8015fea:	2300      	movs	r3, #0
 8015fec:	930f      	str	r3, [sp, #60]	; 0x3c
 8015fee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015ff0:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ff2:	9307      	str	r3, [sp, #28]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	dc13      	bgt.n	8016020 <_dtoa_r+0x238>
 8015ff8:	2301      	movs	r3, #1
 8015ffa:	001a      	movs	r2, r3
 8015ffc:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ffe:	9307      	str	r3, [sp, #28]
 8016000:	9223      	str	r2, [sp, #140]	; 0x8c
 8016002:	e00d      	b.n	8016020 <_dtoa_r+0x238>
 8016004:	2301      	movs	r3, #1
 8016006:	e7f1      	b.n	8015fec <_dtoa_r+0x204>
 8016008:	2300      	movs	r3, #0
 801600a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801600c:	930f      	str	r3, [sp, #60]	; 0x3c
 801600e:	4694      	mov	ip, r2
 8016010:	9b03      	ldr	r3, [sp, #12]
 8016012:	4463      	add	r3, ip
 8016014:	930b      	str	r3, [sp, #44]	; 0x2c
 8016016:	3301      	adds	r3, #1
 8016018:	9307      	str	r3, [sp, #28]
 801601a:	2b00      	cmp	r3, #0
 801601c:	dc00      	bgt.n	8016020 <_dtoa_r+0x238>
 801601e:	2301      	movs	r3, #1
 8016020:	2200      	movs	r2, #0
 8016022:	9904      	ldr	r1, [sp, #16]
 8016024:	644a      	str	r2, [r1, #68]	; 0x44
 8016026:	3204      	adds	r2, #4
 8016028:	0010      	movs	r0, r2
 801602a:	9904      	ldr	r1, [sp, #16]
 801602c:	3014      	adds	r0, #20
 801602e:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8016030:	4298      	cmp	r0, r3
 8016032:	d91b      	bls.n	801606c <_dtoa_r+0x284>
 8016034:	9804      	ldr	r0, [sp, #16]
 8016036:	f001 f98b 	bl	8017350 <_Balloc>
 801603a:	9006      	str	r0, [sp, #24]
 801603c:	2800      	cmp	r0, #0
 801603e:	d11a      	bne.n	8016076 <_dtoa_r+0x28e>
 8016040:	21d5      	movs	r1, #213	; 0xd5
 8016042:	0002      	movs	r2, r0
 8016044:	4b40      	ldr	r3, [pc, #256]	; (8016148 <_dtoa_r+0x360>)
 8016046:	0049      	lsls	r1, r1, #1
 8016048:	4840      	ldr	r0, [pc, #256]	; (801614c <_dtoa_r+0x364>)
 801604a:	f001 ff03 	bl	8017e54 <__assert_func>
 801604e:	2301      	movs	r3, #1
 8016050:	e7db      	b.n	801600a <_dtoa_r+0x222>
 8016052:	2300      	movs	r3, #0
 8016054:	940f      	str	r4, [sp, #60]	; 0x3c
 8016056:	9322      	str	r3, [sp, #136]	; 0x88
 8016058:	3b01      	subs	r3, #1
 801605a:	930b      	str	r3, [sp, #44]	; 0x2c
 801605c:	9307      	str	r3, [sp, #28]
 801605e:	2200      	movs	r2, #0
 8016060:	3313      	adds	r3, #19
 8016062:	e7cd      	b.n	8016000 <_dtoa_r+0x218>
 8016064:	2301      	movs	r3, #1
 8016066:	930f      	str	r3, [sp, #60]	; 0x3c
 8016068:	3b02      	subs	r3, #2
 801606a:	e7f6      	b.n	801605a <_dtoa_r+0x272>
 801606c:	9804      	ldr	r0, [sp, #16]
 801606e:	3101      	adds	r1, #1
 8016070:	6441      	str	r1, [r0, #68]	; 0x44
 8016072:	0052      	lsls	r2, r2, #1
 8016074:	e7d8      	b.n	8016028 <_dtoa_r+0x240>
 8016076:	9b04      	ldr	r3, [sp, #16]
 8016078:	9a06      	ldr	r2, [sp, #24]
 801607a:	641a      	str	r2, [r3, #64]	; 0x40
 801607c:	9b07      	ldr	r3, [sp, #28]
 801607e:	2b0e      	cmp	r3, #14
 8016080:	d900      	bls.n	8016084 <_dtoa_r+0x29c>
 8016082:	e0de      	b.n	8016242 <_dtoa_r+0x45a>
 8016084:	2c00      	cmp	r4, #0
 8016086:	d100      	bne.n	801608a <_dtoa_r+0x2a2>
 8016088:	e0db      	b.n	8016242 <_dtoa_r+0x45a>
 801608a:	9b03      	ldr	r3, [sp, #12]
 801608c:	2b00      	cmp	r3, #0
 801608e:	dd61      	ble.n	8016154 <_dtoa_r+0x36c>
 8016090:	001a      	movs	r2, r3
 8016092:	210f      	movs	r1, #15
 8016094:	4b28      	ldr	r3, [pc, #160]	; (8016138 <_dtoa_r+0x350>)
 8016096:	400a      	ands	r2, r1
 8016098:	00d2      	lsls	r2, r2, #3
 801609a:	189b      	adds	r3, r3, r2
 801609c:	681d      	ldr	r5, [r3, #0]
 801609e:	685e      	ldr	r6, [r3, #4]
 80160a0:	9b03      	ldr	r3, [sp, #12]
 80160a2:	2702      	movs	r7, #2
 80160a4:	111c      	asrs	r4, r3, #4
 80160a6:	05db      	lsls	r3, r3, #23
 80160a8:	d50a      	bpl.n	80160c0 <_dtoa_r+0x2d8>
 80160aa:	4b29      	ldr	r3, [pc, #164]	; (8016150 <_dtoa_r+0x368>)
 80160ac:	400c      	ands	r4, r1
 80160ae:	6a1a      	ldr	r2, [r3, #32]
 80160b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160b2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80160b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80160b6:	f7eb fb07 	bl	80016c8 <__aeabi_ddiv>
 80160ba:	9008      	str	r0, [sp, #32]
 80160bc:	9109      	str	r1, [sp, #36]	; 0x24
 80160be:	3701      	adds	r7, #1
 80160c0:	4b23      	ldr	r3, [pc, #140]	; (8016150 <_dtoa_r+0x368>)
 80160c2:	930e      	str	r3, [sp, #56]	; 0x38
 80160c4:	2c00      	cmp	r4, #0
 80160c6:	d108      	bne.n	80160da <_dtoa_r+0x2f2>
 80160c8:	9808      	ldr	r0, [sp, #32]
 80160ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80160cc:	002a      	movs	r2, r5
 80160ce:	0033      	movs	r3, r6
 80160d0:	f7eb fafa 	bl	80016c8 <__aeabi_ddiv>
 80160d4:	9008      	str	r0, [sp, #32]
 80160d6:	9109      	str	r1, [sp, #36]	; 0x24
 80160d8:	e057      	b.n	801618a <_dtoa_r+0x3a2>
 80160da:	2301      	movs	r3, #1
 80160dc:	421c      	tst	r4, r3
 80160de:	d009      	beq.n	80160f4 <_dtoa_r+0x30c>
 80160e0:	18ff      	adds	r7, r7, r3
 80160e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160e4:	0028      	movs	r0, r5
 80160e6:	681a      	ldr	r2, [r3, #0]
 80160e8:	685b      	ldr	r3, [r3, #4]
 80160ea:	0031      	movs	r1, r6
 80160ec:	f7eb feee 	bl	8001ecc <__aeabi_dmul>
 80160f0:	0005      	movs	r5, r0
 80160f2:	000e      	movs	r6, r1
 80160f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160f6:	1064      	asrs	r4, r4, #1
 80160f8:	3308      	adds	r3, #8
 80160fa:	e7e2      	b.n	80160c2 <_dtoa_r+0x2da>
 80160fc:	7ff00000 	.word	0x7ff00000
 8016100:	0000270f 	.word	0x0000270f
 8016104:	0801c7d4 	.word	0x0801c7d4
 8016108:	0801c7d7 	.word	0x0801c7d7
 801610c:	0801c7b2 	.word	0x0801c7b2
 8016110:	0801c7b3 	.word	0x0801c7b3
 8016114:	3ff00000 	.word	0x3ff00000
 8016118:	fffffc01 	.word	0xfffffc01
 801611c:	3ff80000 	.word	0x3ff80000
 8016120:	636f4361 	.word	0x636f4361
 8016124:	3fd287a7 	.word	0x3fd287a7
 8016128:	8b60c8b3 	.word	0x8b60c8b3
 801612c:	3fc68a28 	.word	0x3fc68a28
 8016130:	509f79fb 	.word	0x509f79fb
 8016134:	3fd34413 	.word	0x3fd34413
 8016138:	0801c950 	.word	0x0801c950
 801613c:	00000432 	.word	0x00000432
 8016140:	00000412 	.word	0x00000412
 8016144:	fe100000 	.word	0xfe100000
 8016148:	0801c7e1 	.word	0x0801c7e1
 801614c:	0801c7f2 	.word	0x0801c7f2
 8016150:	0801c928 	.word	0x0801c928
 8016154:	9b03      	ldr	r3, [sp, #12]
 8016156:	2702      	movs	r7, #2
 8016158:	2b00      	cmp	r3, #0
 801615a:	d016      	beq.n	801618a <_dtoa_r+0x3a2>
 801615c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801615e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016160:	425c      	negs	r4, r3
 8016162:	230f      	movs	r3, #15
 8016164:	4ad4      	ldr	r2, [pc, #848]	; (80164b8 <_dtoa_r+0x6d0>)
 8016166:	4023      	ands	r3, r4
 8016168:	00db      	lsls	r3, r3, #3
 801616a:	18d3      	adds	r3, r2, r3
 801616c:	681a      	ldr	r2, [r3, #0]
 801616e:	685b      	ldr	r3, [r3, #4]
 8016170:	f7eb feac 	bl	8001ecc <__aeabi_dmul>
 8016174:	2601      	movs	r6, #1
 8016176:	2300      	movs	r3, #0
 8016178:	9008      	str	r0, [sp, #32]
 801617a:	9109      	str	r1, [sp, #36]	; 0x24
 801617c:	4dcf      	ldr	r5, [pc, #828]	; (80164bc <_dtoa_r+0x6d4>)
 801617e:	1124      	asrs	r4, r4, #4
 8016180:	2c00      	cmp	r4, #0
 8016182:	d000      	beq.n	8016186 <_dtoa_r+0x39e>
 8016184:	e08d      	b.n	80162a2 <_dtoa_r+0x4ba>
 8016186:	2b00      	cmp	r3, #0
 8016188:	d1a4      	bne.n	80160d4 <_dtoa_r+0x2ec>
 801618a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801618c:	2b00      	cmp	r3, #0
 801618e:	d100      	bne.n	8016192 <_dtoa_r+0x3aa>
 8016190:	e092      	b.n	80162b8 <_dtoa_r+0x4d0>
 8016192:	9c08      	ldr	r4, [sp, #32]
 8016194:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016196:	2200      	movs	r2, #0
 8016198:	0020      	movs	r0, r4
 801619a:	0029      	movs	r1, r5
 801619c:	4bc8      	ldr	r3, [pc, #800]	; (80164c0 <_dtoa_r+0x6d8>)
 801619e:	f7ea f963 	bl	8000468 <__aeabi_dcmplt>
 80161a2:	2800      	cmp	r0, #0
 80161a4:	d100      	bne.n	80161a8 <_dtoa_r+0x3c0>
 80161a6:	e087      	b.n	80162b8 <_dtoa_r+0x4d0>
 80161a8:	9b07      	ldr	r3, [sp, #28]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d100      	bne.n	80161b0 <_dtoa_r+0x3c8>
 80161ae:	e083      	b.n	80162b8 <_dtoa_r+0x4d0>
 80161b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	dd41      	ble.n	801623a <_dtoa_r+0x452>
 80161b6:	9b03      	ldr	r3, [sp, #12]
 80161b8:	2200      	movs	r2, #0
 80161ba:	3b01      	subs	r3, #1
 80161bc:	930e      	str	r3, [sp, #56]	; 0x38
 80161be:	0020      	movs	r0, r4
 80161c0:	0029      	movs	r1, r5
 80161c2:	4bc0      	ldr	r3, [pc, #768]	; (80164c4 <_dtoa_r+0x6dc>)
 80161c4:	f7eb fe82 	bl	8001ecc <__aeabi_dmul>
 80161c8:	9008      	str	r0, [sp, #32]
 80161ca:	9109      	str	r1, [sp, #36]	; 0x24
 80161cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80161ce:	3701      	adds	r7, #1
 80161d0:	0038      	movs	r0, r7
 80161d2:	9c08      	ldr	r4, [sp, #32]
 80161d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80161d6:	f7ec fccb 	bl	8002b70 <__aeabi_i2d>
 80161da:	0022      	movs	r2, r4
 80161dc:	002b      	movs	r3, r5
 80161de:	f7eb fe75 	bl	8001ecc <__aeabi_dmul>
 80161e2:	2200      	movs	r2, #0
 80161e4:	4bb8      	ldr	r3, [pc, #736]	; (80164c8 <_dtoa_r+0x6e0>)
 80161e6:	f7ea ff33 	bl	8001050 <__aeabi_dadd>
 80161ea:	9012      	str	r0, [sp, #72]	; 0x48
 80161ec:	9113      	str	r1, [sp, #76]	; 0x4c
 80161ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80161f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80161f2:	9208      	str	r2, [sp, #32]
 80161f4:	9309      	str	r3, [sp, #36]	; 0x24
 80161f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80161f8:	4ab4      	ldr	r2, [pc, #720]	; (80164cc <_dtoa_r+0x6e4>)
 80161fa:	189f      	adds	r7, r3, r2
 80161fc:	9709      	str	r7, [sp, #36]	; 0x24
 80161fe:	2e00      	cmp	r6, #0
 8016200:	d15e      	bne.n	80162c0 <_dtoa_r+0x4d8>
 8016202:	2200      	movs	r2, #0
 8016204:	0020      	movs	r0, r4
 8016206:	0029      	movs	r1, r5
 8016208:	4bb1      	ldr	r3, [pc, #708]	; (80164d0 <_dtoa_r+0x6e8>)
 801620a:	f7ec f8cb 	bl	80023a4 <__aeabi_dsub>
 801620e:	003b      	movs	r3, r7
 8016210:	9a08      	ldr	r2, [sp, #32]
 8016212:	0004      	movs	r4, r0
 8016214:	000d      	movs	r5, r1
 8016216:	f7ea f93b 	bl	8000490 <__aeabi_dcmpgt>
 801621a:	2800      	cmp	r0, #0
 801621c:	d000      	beq.n	8016220 <_dtoa_r+0x438>
 801621e:	e2a3      	b.n	8016768 <_dtoa_r+0x980>
 8016220:	48ac      	ldr	r0, [pc, #688]	; (80164d4 <_dtoa_r+0x6ec>)
 8016222:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016224:	4684      	mov	ip, r0
 8016226:	4461      	add	r1, ip
 8016228:	000b      	movs	r3, r1
 801622a:	0020      	movs	r0, r4
 801622c:	0029      	movs	r1, r5
 801622e:	9a08      	ldr	r2, [sp, #32]
 8016230:	f7ea f91a 	bl	8000468 <__aeabi_dcmplt>
 8016234:	2800      	cmp	r0, #0
 8016236:	d000      	beq.n	801623a <_dtoa_r+0x452>
 8016238:	e294      	b.n	8016764 <_dtoa_r+0x97c>
 801623a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801623c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801623e:	9308      	str	r3, [sp, #32]
 8016240:	9409      	str	r4, [sp, #36]	; 0x24
 8016242:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016244:	2b00      	cmp	r3, #0
 8016246:	da00      	bge.n	801624a <_dtoa_r+0x462>
 8016248:	e16a      	b.n	8016520 <_dtoa_r+0x738>
 801624a:	9a03      	ldr	r2, [sp, #12]
 801624c:	2a0e      	cmp	r2, #14
 801624e:	dd00      	ble.n	8016252 <_dtoa_r+0x46a>
 8016250:	e166      	b.n	8016520 <_dtoa_r+0x738>
 8016252:	4b99      	ldr	r3, [pc, #612]	; (80164b8 <_dtoa_r+0x6d0>)
 8016254:	00d2      	lsls	r2, r2, #3
 8016256:	189b      	adds	r3, r3, r2
 8016258:	681e      	ldr	r6, [r3, #0]
 801625a:	685f      	ldr	r7, [r3, #4]
 801625c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801625e:	2b00      	cmp	r3, #0
 8016260:	db00      	blt.n	8016264 <_dtoa_r+0x47c>
 8016262:	e0d7      	b.n	8016414 <_dtoa_r+0x62c>
 8016264:	9b07      	ldr	r3, [sp, #28]
 8016266:	2b00      	cmp	r3, #0
 8016268:	dd00      	ble.n	801626c <_dtoa_r+0x484>
 801626a:	e0d3      	b.n	8016414 <_dtoa_r+0x62c>
 801626c:	d000      	beq.n	8016270 <_dtoa_r+0x488>
 801626e:	e278      	b.n	8016762 <_dtoa_r+0x97a>
 8016270:	2200      	movs	r2, #0
 8016272:	0030      	movs	r0, r6
 8016274:	0039      	movs	r1, r7
 8016276:	4b96      	ldr	r3, [pc, #600]	; (80164d0 <_dtoa_r+0x6e8>)
 8016278:	f7eb fe28 	bl	8001ecc <__aeabi_dmul>
 801627c:	9a08      	ldr	r2, [sp, #32]
 801627e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016280:	f7ea f910 	bl	80004a4 <__aeabi_dcmpge>
 8016284:	9e07      	ldr	r6, [sp, #28]
 8016286:	0037      	movs	r7, r6
 8016288:	2800      	cmp	r0, #0
 801628a:	d000      	beq.n	801628e <_dtoa_r+0x4a6>
 801628c:	e24f      	b.n	801672e <_dtoa_r+0x946>
 801628e:	9b06      	ldr	r3, [sp, #24]
 8016290:	9a06      	ldr	r2, [sp, #24]
 8016292:	3301      	adds	r3, #1
 8016294:	9308      	str	r3, [sp, #32]
 8016296:	2331      	movs	r3, #49	; 0x31
 8016298:	7013      	strb	r3, [r2, #0]
 801629a:	9b03      	ldr	r3, [sp, #12]
 801629c:	3301      	adds	r3, #1
 801629e:	9303      	str	r3, [sp, #12]
 80162a0:	e24a      	b.n	8016738 <_dtoa_r+0x950>
 80162a2:	4234      	tst	r4, r6
 80162a4:	d005      	beq.n	80162b2 <_dtoa_r+0x4ca>
 80162a6:	682a      	ldr	r2, [r5, #0]
 80162a8:	686b      	ldr	r3, [r5, #4]
 80162aa:	f7eb fe0f 	bl	8001ecc <__aeabi_dmul>
 80162ae:	0033      	movs	r3, r6
 80162b0:	3701      	adds	r7, #1
 80162b2:	1064      	asrs	r4, r4, #1
 80162b4:	3508      	adds	r5, #8
 80162b6:	e763      	b.n	8016180 <_dtoa_r+0x398>
 80162b8:	9b03      	ldr	r3, [sp, #12]
 80162ba:	9e07      	ldr	r6, [sp, #28]
 80162bc:	930e      	str	r3, [sp, #56]	; 0x38
 80162be:	e787      	b.n	80161d0 <_dtoa_r+0x3e8>
 80162c0:	4b7d      	ldr	r3, [pc, #500]	; (80164b8 <_dtoa_r+0x6d0>)
 80162c2:	1e72      	subs	r2, r6, #1
 80162c4:	00d2      	lsls	r2, r2, #3
 80162c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80162c8:	189b      	adds	r3, r3, r2
 80162ca:	681a      	ldr	r2, [r3, #0]
 80162cc:	685b      	ldr	r3, [r3, #4]
 80162ce:	2900      	cmp	r1, #0
 80162d0:	d04e      	beq.n	8016370 <_dtoa_r+0x588>
 80162d2:	2000      	movs	r0, #0
 80162d4:	4980      	ldr	r1, [pc, #512]	; (80164d8 <_dtoa_r+0x6f0>)
 80162d6:	f7eb f9f7 	bl	80016c8 <__aeabi_ddiv>
 80162da:	9a08      	ldr	r2, [sp, #32]
 80162dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162de:	f7ec f861 	bl	80023a4 <__aeabi_dsub>
 80162e2:	9b06      	ldr	r3, [sp, #24]
 80162e4:	9012      	str	r0, [sp, #72]	; 0x48
 80162e6:	9113      	str	r1, [sp, #76]	; 0x4c
 80162e8:	9316      	str	r3, [sp, #88]	; 0x58
 80162ea:	18f3      	adds	r3, r6, r3
 80162ec:	9319      	str	r3, [sp, #100]	; 0x64
 80162ee:	0020      	movs	r0, r4
 80162f0:	0029      	movs	r1, r5
 80162f2:	f7ec fc07 	bl	8002b04 <__aeabi_d2iz>
 80162f6:	9018      	str	r0, [sp, #96]	; 0x60
 80162f8:	f7ec fc3a 	bl	8002b70 <__aeabi_i2d>
 80162fc:	0002      	movs	r2, r0
 80162fe:	000b      	movs	r3, r1
 8016300:	0020      	movs	r0, r4
 8016302:	0029      	movs	r1, r5
 8016304:	f7ec f84e 	bl	80023a4 <__aeabi_dsub>
 8016308:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801630a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801630c:	3301      	adds	r3, #1
 801630e:	9308      	str	r3, [sp, #32]
 8016310:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016312:	3430      	adds	r4, #48	; 0x30
 8016314:	701c      	strb	r4, [r3, #0]
 8016316:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016318:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801631a:	0006      	movs	r6, r0
 801631c:	000f      	movs	r7, r1
 801631e:	f7ea f8a3 	bl	8000468 <__aeabi_dcmplt>
 8016322:	2800      	cmp	r0, #0
 8016324:	d16c      	bne.n	8016400 <_dtoa_r+0x618>
 8016326:	0032      	movs	r2, r6
 8016328:	003b      	movs	r3, r7
 801632a:	2000      	movs	r0, #0
 801632c:	4964      	ldr	r1, [pc, #400]	; (80164c0 <_dtoa_r+0x6d8>)
 801632e:	f7ec f839 	bl	80023a4 <__aeabi_dsub>
 8016332:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016334:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016336:	f7ea f897 	bl	8000468 <__aeabi_dcmplt>
 801633a:	2800      	cmp	r0, #0
 801633c:	d000      	beq.n	8016340 <_dtoa_r+0x558>
 801633e:	e0cf      	b.n	80164e0 <_dtoa_r+0x6f8>
 8016340:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016342:	9a08      	ldr	r2, [sp, #32]
 8016344:	4293      	cmp	r3, r2
 8016346:	d100      	bne.n	801634a <_dtoa_r+0x562>
 8016348:	e777      	b.n	801623a <_dtoa_r+0x452>
 801634a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801634c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801634e:	2200      	movs	r2, #0
 8016350:	4b5c      	ldr	r3, [pc, #368]	; (80164c4 <_dtoa_r+0x6dc>)
 8016352:	f7eb fdbb 	bl	8001ecc <__aeabi_dmul>
 8016356:	4b5b      	ldr	r3, [pc, #364]	; (80164c4 <_dtoa_r+0x6dc>)
 8016358:	9012      	str	r0, [sp, #72]	; 0x48
 801635a:	9113      	str	r1, [sp, #76]	; 0x4c
 801635c:	2200      	movs	r2, #0
 801635e:	0030      	movs	r0, r6
 8016360:	0039      	movs	r1, r7
 8016362:	f7eb fdb3 	bl	8001ecc <__aeabi_dmul>
 8016366:	9b08      	ldr	r3, [sp, #32]
 8016368:	0004      	movs	r4, r0
 801636a:	000d      	movs	r5, r1
 801636c:	9316      	str	r3, [sp, #88]	; 0x58
 801636e:	e7be      	b.n	80162ee <_dtoa_r+0x506>
 8016370:	9808      	ldr	r0, [sp, #32]
 8016372:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016374:	f7eb fdaa 	bl	8001ecc <__aeabi_dmul>
 8016378:	9f06      	ldr	r7, [sp, #24]
 801637a:	9012      	str	r0, [sp, #72]	; 0x48
 801637c:	9113      	str	r1, [sp, #76]	; 0x4c
 801637e:	19bb      	adds	r3, r7, r6
 8016380:	9316      	str	r3, [sp, #88]	; 0x58
 8016382:	0029      	movs	r1, r5
 8016384:	0020      	movs	r0, r4
 8016386:	f7ec fbbd 	bl	8002b04 <__aeabi_d2iz>
 801638a:	9008      	str	r0, [sp, #32]
 801638c:	f7ec fbf0 	bl	8002b70 <__aeabi_i2d>
 8016390:	000b      	movs	r3, r1
 8016392:	0002      	movs	r2, r0
 8016394:	0029      	movs	r1, r5
 8016396:	0020      	movs	r0, r4
 8016398:	f7ec f804 	bl	80023a4 <__aeabi_dsub>
 801639c:	9b08      	ldr	r3, [sp, #32]
 801639e:	0004      	movs	r4, r0
 80163a0:	3330      	adds	r3, #48	; 0x30
 80163a2:	703b      	strb	r3, [r7, #0]
 80163a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80163a6:	3701      	adds	r7, #1
 80163a8:	000d      	movs	r5, r1
 80163aa:	429f      	cmp	r7, r3
 80163ac:	d12b      	bne.n	8016406 <_dtoa_r+0x61e>
 80163ae:	9812      	ldr	r0, [sp, #72]	; 0x48
 80163b0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80163b2:	9b06      	ldr	r3, [sp, #24]
 80163b4:	2200      	movs	r2, #0
 80163b6:	199b      	adds	r3, r3, r6
 80163b8:	9308      	str	r3, [sp, #32]
 80163ba:	4b47      	ldr	r3, [pc, #284]	; (80164d8 <_dtoa_r+0x6f0>)
 80163bc:	f7ea fe48 	bl	8001050 <__aeabi_dadd>
 80163c0:	0002      	movs	r2, r0
 80163c2:	000b      	movs	r3, r1
 80163c4:	0020      	movs	r0, r4
 80163c6:	0029      	movs	r1, r5
 80163c8:	f7ea f862 	bl	8000490 <__aeabi_dcmpgt>
 80163cc:	2800      	cmp	r0, #0
 80163ce:	d000      	beq.n	80163d2 <_dtoa_r+0x5ea>
 80163d0:	e086      	b.n	80164e0 <_dtoa_r+0x6f8>
 80163d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80163d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80163d6:	2000      	movs	r0, #0
 80163d8:	493f      	ldr	r1, [pc, #252]	; (80164d8 <_dtoa_r+0x6f0>)
 80163da:	f7eb ffe3 	bl	80023a4 <__aeabi_dsub>
 80163de:	0002      	movs	r2, r0
 80163e0:	000b      	movs	r3, r1
 80163e2:	0020      	movs	r0, r4
 80163e4:	0029      	movs	r1, r5
 80163e6:	f7ea f83f 	bl	8000468 <__aeabi_dcmplt>
 80163ea:	2800      	cmp	r0, #0
 80163ec:	d100      	bne.n	80163f0 <_dtoa_r+0x608>
 80163ee:	e724      	b.n	801623a <_dtoa_r+0x452>
 80163f0:	9b08      	ldr	r3, [sp, #32]
 80163f2:	001a      	movs	r2, r3
 80163f4:	3a01      	subs	r2, #1
 80163f6:	9208      	str	r2, [sp, #32]
 80163f8:	7812      	ldrb	r2, [r2, #0]
 80163fa:	2a30      	cmp	r2, #48	; 0x30
 80163fc:	d0f8      	beq.n	80163f0 <_dtoa_r+0x608>
 80163fe:	9308      	str	r3, [sp, #32]
 8016400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016402:	9303      	str	r3, [sp, #12]
 8016404:	e046      	b.n	8016494 <_dtoa_r+0x6ac>
 8016406:	2200      	movs	r2, #0
 8016408:	4b2e      	ldr	r3, [pc, #184]	; (80164c4 <_dtoa_r+0x6dc>)
 801640a:	f7eb fd5f 	bl	8001ecc <__aeabi_dmul>
 801640e:	0004      	movs	r4, r0
 8016410:	000d      	movs	r5, r1
 8016412:	e7b6      	b.n	8016382 <_dtoa_r+0x59a>
 8016414:	9b06      	ldr	r3, [sp, #24]
 8016416:	9a06      	ldr	r2, [sp, #24]
 8016418:	930a      	str	r3, [sp, #40]	; 0x28
 801641a:	9b07      	ldr	r3, [sp, #28]
 801641c:	9c08      	ldr	r4, [sp, #32]
 801641e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016420:	3b01      	subs	r3, #1
 8016422:	189b      	adds	r3, r3, r2
 8016424:	930b      	str	r3, [sp, #44]	; 0x2c
 8016426:	0032      	movs	r2, r6
 8016428:	003b      	movs	r3, r7
 801642a:	0020      	movs	r0, r4
 801642c:	0029      	movs	r1, r5
 801642e:	f7eb f94b 	bl	80016c8 <__aeabi_ddiv>
 8016432:	f7ec fb67 	bl	8002b04 <__aeabi_d2iz>
 8016436:	9007      	str	r0, [sp, #28]
 8016438:	f7ec fb9a 	bl	8002b70 <__aeabi_i2d>
 801643c:	0032      	movs	r2, r6
 801643e:	003b      	movs	r3, r7
 8016440:	f7eb fd44 	bl	8001ecc <__aeabi_dmul>
 8016444:	0002      	movs	r2, r0
 8016446:	000b      	movs	r3, r1
 8016448:	0020      	movs	r0, r4
 801644a:	0029      	movs	r1, r5
 801644c:	f7eb ffaa 	bl	80023a4 <__aeabi_dsub>
 8016450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016452:	001a      	movs	r2, r3
 8016454:	3201      	adds	r2, #1
 8016456:	920a      	str	r2, [sp, #40]	; 0x28
 8016458:	9208      	str	r2, [sp, #32]
 801645a:	9a07      	ldr	r2, [sp, #28]
 801645c:	3230      	adds	r2, #48	; 0x30
 801645e:	701a      	strb	r2, [r3, #0]
 8016460:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016462:	429a      	cmp	r2, r3
 8016464:	d14f      	bne.n	8016506 <_dtoa_r+0x71e>
 8016466:	0002      	movs	r2, r0
 8016468:	000b      	movs	r3, r1
 801646a:	f7ea fdf1 	bl	8001050 <__aeabi_dadd>
 801646e:	0032      	movs	r2, r6
 8016470:	003b      	movs	r3, r7
 8016472:	0004      	movs	r4, r0
 8016474:	000d      	movs	r5, r1
 8016476:	f7ea f80b 	bl	8000490 <__aeabi_dcmpgt>
 801647a:	2800      	cmp	r0, #0
 801647c:	d12e      	bne.n	80164dc <_dtoa_r+0x6f4>
 801647e:	0032      	movs	r2, r6
 8016480:	003b      	movs	r3, r7
 8016482:	0020      	movs	r0, r4
 8016484:	0029      	movs	r1, r5
 8016486:	f7e9 ffe9 	bl	800045c <__aeabi_dcmpeq>
 801648a:	2800      	cmp	r0, #0
 801648c:	d002      	beq.n	8016494 <_dtoa_r+0x6ac>
 801648e:	9b07      	ldr	r3, [sp, #28]
 8016490:	07db      	lsls	r3, r3, #31
 8016492:	d423      	bmi.n	80164dc <_dtoa_r+0x6f4>
 8016494:	9804      	ldr	r0, [sp, #16]
 8016496:	9905      	ldr	r1, [sp, #20]
 8016498:	f000 ff82 	bl	80173a0 <_Bfree>
 801649c:	2300      	movs	r3, #0
 801649e:	9a08      	ldr	r2, [sp, #32]
 80164a0:	9803      	ldr	r0, [sp, #12]
 80164a2:	7013      	strb	r3, [r2, #0]
 80164a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80164a6:	3001      	adds	r0, #1
 80164a8:	6018      	str	r0, [r3, #0]
 80164aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d100      	bne.n	80164b2 <_dtoa_r+0x6ca>
 80164b0:	e4cd      	b.n	8015e4e <_dtoa_r+0x66>
 80164b2:	601a      	str	r2, [r3, #0]
 80164b4:	e4cb      	b.n	8015e4e <_dtoa_r+0x66>
 80164b6:	46c0      	nop			; (mov r8, r8)
 80164b8:	0801c950 	.word	0x0801c950
 80164bc:	0801c928 	.word	0x0801c928
 80164c0:	3ff00000 	.word	0x3ff00000
 80164c4:	40240000 	.word	0x40240000
 80164c8:	401c0000 	.word	0x401c0000
 80164cc:	fcc00000 	.word	0xfcc00000
 80164d0:	40140000 	.word	0x40140000
 80164d4:	7cc00000 	.word	0x7cc00000
 80164d8:	3fe00000 	.word	0x3fe00000
 80164dc:	9b03      	ldr	r3, [sp, #12]
 80164de:	930e      	str	r3, [sp, #56]	; 0x38
 80164e0:	9b08      	ldr	r3, [sp, #32]
 80164e2:	9308      	str	r3, [sp, #32]
 80164e4:	3b01      	subs	r3, #1
 80164e6:	781a      	ldrb	r2, [r3, #0]
 80164e8:	2a39      	cmp	r2, #57	; 0x39
 80164ea:	d108      	bne.n	80164fe <_dtoa_r+0x716>
 80164ec:	9a06      	ldr	r2, [sp, #24]
 80164ee:	429a      	cmp	r2, r3
 80164f0:	d1f7      	bne.n	80164e2 <_dtoa_r+0x6fa>
 80164f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80164f4:	9906      	ldr	r1, [sp, #24]
 80164f6:	3201      	adds	r2, #1
 80164f8:	920e      	str	r2, [sp, #56]	; 0x38
 80164fa:	2230      	movs	r2, #48	; 0x30
 80164fc:	700a      	strb	r2, [r1, #0]
 80164fe:	781a      	ldrb	r2, [r3, #0]
 8016500:	3201      	adds	r2, #1
 8016502:	701a      	strb	r2, [r3, #0]
 8016504:	e77c      	b.n	8016400 <_dtoa_r+0x618>
 8016506:	2200      	movs	r2, #0
 8016508:	4ba7      	ldr	r3, [pc, #668]	; (80167a8 <_dtoa_r+0x9c0>)
 801650a:	f7eb fcdf 	bl	8001ecc <__aeabi_dmul>
 801650e:	2200      	movs	r2, #0
 8016510:	2300      	movs	r3, #0
 8016512:	0004      	movs	r4, r0
 8016514:	000d      	movs	r5, r1
 8016516:	f7e9 ffa1 	bl	800045c <__aeabi_dcmpeq>
 801651a:	2800      	cmp	r0, #0
 801651c:	d083      	beq.n	8016426 <_dtoa_r+0x63e>
 801651e:	e7b9      	b.n	8016494 <_dtoa_r+0x6ac>
 8016520:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8016522:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016524:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016526:	2f00      	cmp	r7, #0
 8016528:	d012      	beq.n	8016550 <_dtoa_r+0x768>
 801652a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801652c:	2a01      	cmp	r2, #1
 801652e:	dc6e      	bgt.n	801660e <_dtoa_r+0x826>
 8016530:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016532:	2a00      	cmp	r2, #0
 8016534:	d065      	beq.n	8016602 <_dtoa_r+0x81a>
 8016536:	4a9d      	ldr	r2, [pc, #628]	; (80167ac <_dtoa_r+0x9c4>)
 8016538:	189b      	adds	r3, r3, r2
 801653a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801653c:	2101      	movs	r1, #1
 801653e:	18d2      	adds	r2, r2, r3
 8016540:	920a      	str	r2, [sp, #40]	; 0x28
 8016542:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016544:	9804      	ldr	r0, [sp, #16]
 8016546:	18d3      	adds	r3, r2, r3
 8016548:	930c      	str	r3, [sp, #48]	; 0x30
 801654a:	f001 f80b 	bl	8017564 <__i2b>
 801654e:	0007      	movs	r7, r0
 8016550:	2c00      	cmp	r4, #0
 8016552:	dd0e      	ble.n	8016572 <_dtoa_r+0x78a>
 8016554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016556:	2b00      	cmp	r3, #0
 8016558:	dd0b      	ble.n	8016572 <_dtoa_r+0x78a>
 801655a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801655c:	0023      	movs	r3, r4
 801655e:	4294      	cmp	r4, r2
 8016560:	dd00      	ble.n	8016564 <_dtoa_r+0x77c>
 8016562:	0013      	movs	r3, r2
 8016564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016566:	1ae4      	subs	r4, r4, r3
 8016568:	1ad2      	subs	r2, r2, r3
 801656a:	920a      	str	r2, [sp, #40]	; 0x28
 801656c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801656e:	1ad3      	subs	r3, r2, r3
 8016570:	930c      	str	r3, [sp, #48]	; 0x30
 8016572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016574:	2b00      	cmp	r3, #0
 8016576:	d01e      	beq.n	80165b6 <_dtoa_r+0x7ce>
 8016578:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801657a:	2b00      	cmp	r3, #0
 801657c:	d05c      	beq.n	8016638 <_dtoa_r+0x850>
 801657e:	2d00      	cmp	r5, #0
 8016580:	dd10      	ble.n	80165a4 <_dtoa_r+0x7bc>
 8016582:	0039      	movs	r1, r7
 8016584:	002a      	movs	r2, r5
 8016586:	9804      	ldr	r0, [sp, #16]
 8016588:	f001 f8b2 	bl	80176f0 <__pow5mult>
 801658c:	9a05      	ldr	r2, [sp, #20]
 801658e:	0001      	movs	r1, r0
 8016590:	0007      	movs	r7, r0
 8016592:	9804      	ldr	r0, [sp, #16]
 8016594:	f000 fffc 	bl	8017590 <__multiply>
 8016598:	0006      	movs	r6, r0
 801659a:	9905      	ldr	r1, [sp, #20]
 801659c:	9804      	ldr	r0, [sp, #16]
 801659e:	f000 feff 	bl	80173a0 <_Bfree>
 80165a2:	9605      	str	r6, [sp, #20]
 80165a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165a6:	1b5a      	subs	r2, r3, r5
 80165a8:	42ab      	cmp	r3, r5
 80165aa:	d004      	beq.n	80165b6 <_dtoa_r+0x7ce>
 80165ac:	9905      	ldr	r1, [sp, #20]
 80165ae:	9804      	ldr	r0, [sp, #16]
 80165b0:	f001 f89e 	bl	80176f0 <__pow5mult>
 80165b4:	9005      	str	r0, [sp, #20]
 80165b6:	2101      	movs	r1, #1
 80165b8:	9804      	ldr	r0, [sp, #16]
 80165ba:	f000 ffd3 	bl	8017564 <__i2b>
 80165be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80165c0:	0006      	movs	r6, r0
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	dd3a      	ble.n	801663c <_dtoa_r+0x854>
 80165c6:	001a      	movs	r2, r3
 80165c8:	0001      	movs	r1, r0
 80165ca:	9804      	ldr	r0, [sp, #16]
 80165cc:	f001 f890 	bl	80176f0 <__pow5mult>
 80165d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80165d2:	0006      	movs	r6, r0
 80165d4:	2500      	movs	r5, #0
 80165d6:	2b01      	cmp	r3, #1
 80165d8:	dc38      	bgt.n	801664c <_dtoa_r+0x864>
 80165da:	2500      	movs	r5, #0
 80165dc:	9b08      	ldr	r3, [sp, #32]
 80165de:	42ab      	cmp	r3, r5
 80165e0:	d130      	bne.n	8016644 <_dtoa_r+0x85c>
 80165e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165e4:	031b      	lsls	r3, r3, #12
 80165e6:	42ab      	cmp	r3, r5
 80165e8:	d12c      	bne.n	8016644 <_dtoa_r+0x85c>
 80165ea:	4b71      	ldr	r3, [pc, #452]	; (80167b0 <_dtoa_r+0x9c8>)
 80165ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80165ee:	4213      	tst	r3, r2
 80165f0:	d028      	beq.n	8016644 <_dtoa_r+0x85c>
 80165f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165f4:	3501      	adds	r5, #1
 80165f6:	3301      	adds	r3, #1
 80165f8:	930a      	str	r3, [sp, #40]	; 0x28
 80165fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165fc:	3301      	adds	r3, #1
 80165fe:	930c      	str	r3, [sp, #48]	; 0x30
 8016600:	e020      	b.n	8016644 <_dtoa_r+0x85c>
 8016602:	2336      	movs	r3, #54	; 0x36
 8016604:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016606:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016608:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801660a:	1a9b      	subs	r3, r3, r2
 801660c:	e795      	b.n	801653a <_dtoa_r+0x752>
 801660e:	9b07      	ldr	r3, [sp, #28]
 8016610:	1e5d      	subs	r5, r3, #1
 8016612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016614:	42ab      	cmp	r3, r5
 8016616:	db07      	blt.n	8016628 <_dtoa_r+0x840>
 8016618:	1b5d      	subs	r5, r3, r5
 801661a:	9b07      	ldr	r3, [sp, #28]
 801661c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801661e:	2b00      	cmp	r3, #0
 8016620:	da8b      	bge.n	801653a <_dtoa_r+0x752>
 8016622:	1ae4      	subs	r4, r4, r3
 8016624:	2300      	movs	r3, #0
 8016626:	e788      	b.n	801653a <_dtoa_r+0x752>
 8016628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801662a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801662c:	1aeb      	subs	r3, r5, r3
 801662e:	18d3      	adds	r3, r2, r3
 8016630:	950d      	str	r5, [sp, #52]	; 0x34
 8016632:	9314      	str	r3, [sp, #80]	; 0x50
 8016634:	2500      	movs	r5, #0
 8016636:	e7f0      	b.n	801661a <_dtoa_r+0x832>
 8016638:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801663a:	e7b7      	b.n	80165ac <_dtoa_r+0x7c4>
 801663c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801663e:	2500      	movs	r5, #0
 8016640:	2b01      	cmp	r3, #1
 8016642:	ddca      	ble.n	80165da <_dtoa_r+0x7f2>
 8016644:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016646:	2001      	movs	r0, #1
 8016648:	2b00      	cmp	r3, #0
 801664a:	d008      	beq.n	801665e <_dtoa_r+0x876>
 801664c:	6933      	ldr	r3, [r6, #16]
 801664e:	3303      	adds	r3, #3
 8016650:	009b      	lsls	r3, r3, #2
 8016652:	18f3      	adds	r3, r6, r3
 8016654:	6858      	ldr	r0, [r3, #4]
 8016656:	f000 ff3d 	bl	80174d4 <__hi0bits>
 801665a:	2320      	movs	r3, #32
 801665c:	1a18      	subs	r0, r3, r0
 801665e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016660:	221f      	movs	r2, #31
 8016662:	1818      	adds	r0, r3, r0
 8016664:	0003      	movs	r3, r0
 8016666:	4013      	ands	r3, r2
 8016668:	4210      	tst	r0, r2
 801666a:	d046      	beq.n	80166fa <_dtoa_r+0x912>
 801666c:	3201      	adds	r2, #1
 801666e:	1ad2      	subs	r2, r2, r3
 8016670:	2a04      	cmp	r2, #4
 8016672:	dd3f      	ble.n	80166f4 <_dtoa_r+0x90c>
 8016674:	221c      	movs	r2, #28
 8016676:	1ad3      	subs	r3, r2, r3
 8016678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801667a:	18e4      	adds	r4, r4, r3
 801667c:	18d2      	adds	r2, r2, r3
 801667e:	920a      	str	r2, [sp, #40]	; 0x28
 8016680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016682:	18d3      	adds	r3, r2, r3
 8016684:	930c      	str	r3, [sp, #48]	; 0x30
 8016686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016688:	2b00      	cmp	r3, #0
 801668a:	dd05      	ble.n	8016698 <_dtoa_r+0x8b0>
 801668c:	001a      	movs	r2, r3
 801668e:	9905      	ldr	r1, [sp, #20]
 8016690:	9804      	ldr	r0, [sp, #16]
 8016692:	f001 f86f 	bl	8017774 <__lshift>
 8016696:	9005      	str	r0, [sp, #20]
 8016698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801669a:	2b00      	cmp	r3, #0
 801669c:	dd05      	ble.n	80166aa <_dtoa_r+0x8c2>
 801669e:	0031      	movs	r1, r6
 80166a0:	001a      	movs	r2, r3
 80166a2:	9804      	ldr	r0, [sp, #16]
 80166a4:	f001 f866 	bl	8017774 <__lshift>
 80166a8:	0006      	movs	r6, r0
 80166aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d026      	beq.n	80166fe <_dtoa_r+0x916>
 80166b0:	0031      	movs	r1, r6
 80166b2:	9805      	ldr	r0, [sp, #20]
 80166b4:	f001 f8cc 	bl	8017850 <__mcmp>
 80166b8:	2800      	cmp	r0, #0
 80166ba:	da20      	bge.n	80166fe <_dtoa_r+0x916>
 80166bc:	9b03      	ldr	r3, [sp, #12]
 80166be:	220a      	movs	r2, #10
 80166c0:	3b01      	subs	r3, #1
 80166c2:	9303      	str	r3, [sp, #12]
 80166c4:	9905      	ldr	r1, [sp, #20]
 80166c6:	2300      	movs	r3, #0
 80166c8:	9804      	ldr	r0, [sp, #16]
 80166ca:	f000 fe73 	bl	80173b4 <__multadd>
 80166ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80166d0:	9005      	str	r0, [sp, #20]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d100      	bne.n	80166d8 <_dtoa_r+0x8f0>
 80166d6:	e15a      	b.n	801698e <_dtoa_r+0xba6>
 80166d8:	2300      	movs	r3, #0
 80166da:	0039      	movs	r1, r7
 80166dc:	220a      	movs	r2, #10
 80166de:	9804      	ldr	r0, [sp, #16]
 80166e0:	f000 fe68 	bl	80173b4 <__multadd>
 80166e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166e6:	0007      	movs	r7, r0
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	dc47      	bgt.n	801677c <_dtoa_r+0x994>
 80166ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80166ee:	2b02      	cmp	r3, #2
 80166f0:	dc0d      	bgt.n	801670e <_dtoa_r+0x926>
 80166f2:	e043      	b.n	801677c <_dtoa_r+0x994>
 80166f4:	2a04      	cmp	r2, #4
 80166f6:	d0c6      	beq.n	8016686 <_dtoa_r+0x89e>
 80166f8:	0013      	movs	r3, r2
 80166fa:	331c      	adds	r3, #28
 80166fc:	e7bc      	b.n	8016678 <_dtoa_r+0x890>
 80166fe:	9b07      	ldr	r3, [sp, #28]
 8016700:	2b00      	cmp	r3, #0
 8016702:	dc35      	bgt.n	8016770 <_dtoa_r+0x988>
 8016704:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016706:	2b02      	cmp	r3, #2
 8016708:	dd32      	ble.n	8016770 <_dtoa_r+0x988>
 801670a:	9b07      	ldr	r3, [sp, #28]
 801670c:	930b      	str	r3, [sp, #44]	; 0x2c
 801670e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016710:	2b00      	cmp	r3, #0
 8016712:	d10c      	bne.n	801672e <_dtoa_r+0x946>
 8016714:	0031      	movs	r1, r6
 8016716:	2205      	movs	r2, #5
 8016718:	9804      	ldr	r0, [sp, #16]
 801671a:	f000 fe4b 	bl	80173b4 <__multadd>
 801671e:	0006      	movs	r6, r0
 8016720:	0001      	movs	r1, r0
 8016722:	9805      	ldr	r0, [sp, #20]
 8016724:	f001 f894 	bl	8017850 <__mcmp>
 8016728:	2800      	cmp	r0, #0
 801672a:	dd00      	ble.n	801672e <_dtoa_r+0x946>
 801672c:	e5af      	b.n	801628e <_dtoa_r+0x4a6>
 801672e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016730:	43db      	mvns	r3, r3
 8016732:	9303      	str	r3, [sp, #12]
 8016734:	9b06      	ldr	r3, [sp, #24]
 8016736:	9308      	str	r3, [sp, #32]
 8016738:	2500      	movs	r5, #0
 801673a:	0031      	movs	r1, r6
 801673c:	9804      	ldr	r0, [sp, #16]
 801673e:	f000 fe2f 	bl	80173a0 <_Bfree>
 8016742:	2f00      	cmp	r7, #0
 8016744:	d100      	bne.n	8016748 <_dtoa_r+0x960>
 8016746:	e6a5      	b.n	8016494 <_dtoa_r+0x6ac>
 8016748:	2d00      	cmp	r5, #0
 801674a:	d005      	beq.n	8016758 <_dtoa_r+0x970>
 801674c:	42bd      	cmp	r5, r7
 801674e:	d003      	beq.n	8016758 <_dtoa_r+0x970>
 8016750:	0029      	movs	r1, r5
 8016752:	9804      	ldr	r0, [sp, #16]
 8016754:	f000 fe24 	bl	80173a0 <_Bfree>
 8016758:	0039      	movs	r1, r7
 801675a:	9804      	ldr	r0, [sp, #16]
 801675c:	f000 fe20 	bl	80173a0 <_Bfree>
 8016760:	e698      	b.n	8016494 <_dtoa_r+0x6ac>
 8016762:	2600      	movs	r6, #0
 8016764:	0037      	movs	r7, r6
 8016766:	e7e2      	b.n	801672e <_dtoa_r+0x946>
 8016768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801676a:	0037      	movs	r7, r6
 801676c:	9303      	str	r3, [sp, #12]
 801676e:	e58e      	b.n	801628e <_dtoa_r+0x4a6>
 8016770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016772:	2b00      	cmp	r3, #0
 8016774:	d100      	bne.n	8016778 <_dtoa_r+0x990>
 8016776:	e0c2      	b.n	80168fe <_dtoa_r+0xb16>
 8016778:	9b07      	ldr	r3, [sp, #28]
 801677a:	930b      	str	r3, [sp, #44]	; 0x2c
 801677c:	2c00      	cmp	r4, #0
 801677e:	dd05      	ble.n	801678c <_dtoa_r+0x9a4>
 8016780:	0039      	movs	r1, r7
 8016782:	0022      	movs	r2, r4
 8016784:	9804      	ldr	r0, [sp, #16]
 8016786:	f000 fff5 	bl	8017774 <__lshift>
 801678a:	0007      	movs	r7, r0
 801678c:	0038      	movs	r0, r7
 801678e:	2d00      	cmp	r5, #0
 8016790:	d021      	beq.n	80167d6 <_dtoa_r+0x9ee>
 8016792:	6879      	ldr	r1, [r7, #4]
 8016794:	9804      	ldr	r0, [sp, #16]
 8016796:	f000 fddb 	bl	8017350 <_Balloc>
 801679a:	1e04      	subs	r4, r0, #0
 801679c:	d10e      	bne.n	80167bc <_dtoa_r+0x9d4>
 801679e:	0002      	movs	r2, r0
 80167a0:	4b04      	ldr	r3, [pc, #16]	; (80167b4 <_dtoa_r+0x9cc>)
 80167a2:	4905      	ldr	r1, [pc, #20]	; (80167b8 <_dtoa_r+0x9d0>)
 80167a4:	e450      	b.n	8016048 <_dtoa_r+0x260>
 80167a6:	46c0      	nop			; (mov r8, r8)
 80167a8:	40240000 	.word	0x40240000
 80167ac:	00000433 	.word	0x00000433
 80167b0:	7ff00000 	.word	0x7ff00000
 80167b4:	0801c7e1 	.word	0x0801c7e1
 80167b8:	000002ea 	.word	0x000002ea
 80167bc:	0039      	movs	r1, r7
 80167be:	693b      	ldr	r3, [r7, #16]
 80167c0:	310c      	adds	r1, #12
 80167c2:	1c9a      	adds	r2, r3, #2
 80167c4:	0092      	lsls	r2, r2, #2
 80167c6:	300c      	adds	r0, #12
 80167c8:	f7fc fe82 	bl	80134d0 <memcpy>
 80167cc:	2201      	movs	r2, #1
 80167ce:	0021      	movs	r1, r4
 80167d0:	9804      	ldr	r0, [sp, #16]
 80167d2:	f000 ffcf 	bl	8017774 <__lshift>
 80167d6:	9b06      	ldr	r3, [sp, #24]
 80167d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80167da:	9307      	str	r3, [sp, #28]
 80167dc:	3b01      	subs	r3, #1
 80167de:	189b      	adds	r3, r3, r2
 80167e0:	2201      	movs	r2, #1
 80167e2:	003d      	movs	r5, r7
 80167e4:	0007      	movs	r7, r0
 80167e6:	930e      	str	r3, [sp, #56]	; 0x38
 80167e8:	9b08      	ldr	r3, [sp, #32]
 80167ea:	4013      	ands	r3, r2
 80167ec:	930d      	str	r3, [sp, #52]	; 0x34
 80167ee:	0031      	movs	r1, r6
 80167f0:	9805      	ldr	r0, [sp, #20]
 80167f2:	f7ff fa6d 	bl	8015cd0 <quorem>
 80167f6:	0029      	movs	r1, r5
 80167f8:	0004      	movs	r4, r0
 80167fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80167fc:	9805      	ldr	r0, [sp, #20]
 80167fe:	f001 f827 	bl	8017850 <__mcmp>
 8016802:	003a      	movs	r2, r7
 8016804:	900c      	str	r0, [sp, #48]	; 0x30
 8016806:	0031      	movs	r1, r6
 8016808:	9804      	ldr	r0, [sp, #16]
 801680a:	f001 f83d 	bl	8017888 <__mdiff>
 801680e:	68c3      	ldr	r3, [r0, #12]
 8016810:	3430      	adds	r4, #48	; 0x30
 8016812:	930f      	str	r3, [sp, #60]	; 0x3c
 8016814:	2301      	movs	r3, #1
 8016816:	930a      	str	r3, [sp, #40]	; 0x28
 8016818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801681a:	9008      	str	r0, [sp, #32]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d104      	bne.n	801682a <_dtoa_r+0xa42>
 8016820:	0001      	movs	r1, r0
 8016822:	9805      	ldr	r0, [sp, #20]
 8016824:	f001 f814 	bl	8017850 <__mcmp>
 8016828:	900a      	str	r0, [sp, #40]	; 0x28
 801682a:	9908      	ldr	r1, [sp, #32]
 801682c:	9804      	ldr	r0, [sp, #16]
 801682e:	f000 fdb7 	bl	80173a0 <_Bfree>
 8016832:	9b07      	ldr	r3, [sp, #28]
 8016834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016836:	3301      	adds	r3, #1
 8016838:	9308      	str	r3, [sp, #32]
 801683a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801683c:	4313      	orrs	r3, r2
 801683e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016840:	4313      	orrs	r3, r2
 8016842:	d109      	bne.n	8016858 <_dtoa_r+0xa70>
 8016844:	2c39      	cmp	r4, #57	; 0x39
 8016846:	d022      	beq.n	801688e <_dtoa_r+0xaa6>
 8016848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801684a:	2b00      	cmp	r3, #0
 801684c:	dd01      	ble.n	8016852 <_dtoa_r+0xa6a>
 801684e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016850:	3431      	adds	r4, #49	; 0x31
 8016852:	9b07      	ldr	r3, [sp, #28]
 8016854:	701c      	strb	r4, [r3, #0]
 8016856:	e770      	b.n	801673a <_dtoa_r+0x952>
 8016858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801685a:	2b00      	cmp	r3, #0
 801685c:	db04      	blt.n	8016868 <_dtoa_r+0xa80>
 801685e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016860:	4313      	orrs	r3, r2
 8016862:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016864:	4313      	orrs	r3, r2
 8016866:	d11e      	bne.n	80168a6 <_dtoa_r+0xabe>
 8016868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801686a:	2b00      	cmp	r3, #0
 801686c:	ddf1      	ble.n	8016852 <_dtoa_r+0xa6a>
 801686e:	9905      	ldr	r1, [sp, #20]
 8016870:	2201      	movs	r2, #1
 8016872:	9804      	ldr	r0, [sp, #16]
 8016874:	f000 ff7e 	bl	8017774 <__lshift>
 8016878:	0031      	movs	r1, r6
 801687a:	9005      	str	r0, [sp, #20]
 801687c:	f000 ffe8 	bl	8017850 <__mcmp>
 8016880:	2800      	cmp	r0, #0
 8016882:	dc02      	bgt.n	801688a <_dtoa_r+0xaa2>
 8016884:	d1e5      	bne.n	8016852 <_dtoa_r+0xa6a>
 8016886:	07e3      	lsls	r3, r4, #31
 8016888:	d5e3      	bpl.n	8016852 <_dtoa_r+0xa6a>
 801688a:	2c39      	cmp	r4, #57	; 0x39
 801688c:	d1df      	bne.n	801684e <_dtoa_r+0xa66>
 801688e:	2339      	movs	r3, #57	; 0x39
 8016890:	9a07      	ldr	r2, [sp, #28]
 8016892:	7013      	strb	r3, [r2, #0]
 8016894:	9b08      	ldr	r3, [sp, #32]
 8016896:	9308      	str	r3, [sp, #32]
 8016898:	3b01      	subs	r3, #1
 801689a:	781a      	ldrb	r2, [r3, #0]
 801689c:	2a39      	cmp	r2, #57	; 0x39
 801689e:	d063      	beq.n	8016968 <_dtoa_r+0xb80>
 80168a0:	3201      	adds	r2, #1
 80168a2:	701a      	strb	r2, [r3, #0]
 80168a4:	e749      	b.n	801673a <_dtoa_r+0x952>
 80168a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	dd03      	ble.n	80168b4 <_dtoa_r+0xacc>
 80168ac:	2c39      	cmp	r4, #57	; 0x39
 80168ae:	d0ee      	beq.n	801688e <_dtoa_r+0xaa6>
 80168b0:	3401      	adds	r4, #1
 80168b2:	e7ce      	b.n	8016852 <_dtoa_r+0xa6a>
 80168b4:	9b07      	ldr	r3, [sp, #28]
 80168b6:	9a07      	ldr	r2, [sp, #28]
 80168b8:	701c      	strb	r4, [r3, #0]
 80168ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80168bc:	4293      	cmp	r3, r2
 80168be:	d03e      	beq.n	801693e <_dtoa_r+0xb56>
 80168c0:	2300      	movs	r3, #0
 80168c2:	220a      	movs	r2, #10
 80168c4:	9905      	ldr	r1, [sp, #20]
 80168c6:	9804      	ldr	r0, [sp, #16]
 80168c8:	f000 fd74 	bl	80173b4 <__multadd>
 80168cc:	2300      	movs	r3, #0
 80168ce:	9005      	str	r0, [sp, #20]
 80168d0:	220a      	movs	r2, #10
 80168d2:	0029      	movs	r1, r5
 80168d4:	9804      	ldr	r0, [sp, #16]
 80168d6:	42bd      	cmp	r5, r7
 80168d8:	d106      	bne.n	80168e8 <_dtoa_r+0xb00>
 80168da:	f000 fd6b 	bl	80173b4 <__multadd>
 80168de:	0005      	movs	r5, r0
 80168e0:	0007      	movs	r7, r0
 80168e2:	9b08      	ldr	r3, [sp, #32]
 80168e4:	9307      	str	r3, [sp, #28]
 80168e6:	e782      	b.n	80167ee <_dtoa_r+0xa06>
 80168e8:	f000 fd64 	bl	80173b4 <__multadd>
 80168ec:	0039      	movs	r1, r7
 80168ee:	0005      	movs	r5, r0
 80168f0:	2300      	movs	r3, #0
 80168f2:	220a      	movs	r2, #10
 80168f4:	9804      	ldr	r0, [sp, #16]
 80168f6:	f000 fd5d 	bl	80173b4 <__multadd>
 80168fa:	0007      	movs	r7, r0
 80168fc:	e7f1      	b.n	80168e2 <_dtoa_r+0xafa>
 80168fe:	9b07      	ldr	r3, [sp, #28]
 8016900:	930b      	str	r3, [sp, #44]	; 0x2c
 8016902:	2500      	movs	r5, #0
 8016904:	0031      	movs	r1, r6
 8016906:	9805      	ldr	r0, [sp, #20]
 8016908:	f7ff f9e2 	bl	8015cd0 <quorem>
 801690c:	9b06      	ldr	r3, [sp, #24]
 801690e:	3030      	adds	r0, #48	; 0x30
 8016910:	5558      	strb	r0, [r3, r5]
 8016912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016914:	3501      	adds	r5, #1
 8016916:	0004      	movs	r4, r0
 8016918:	42ab      	cmp	r3, r5
 801691a:	dd07      	ble.n	801692c <_dtoa_r+0xb44>
 801691c:	2300      	movs	r3, #0
 801691e:	220a      	movs	r2, #10
 8016920:	9905      	ldr	r1, [sp, #20]
 8016922:	9804      	ldr	r0, [sp, #16]
 8016924:	f000 fd46 	bl	80173b4 <__multadd>
 8016928:	9005      	str	r0, [sp, #20]
 801692a:	e7eb      	b.n	8016904 <_dtoa_r+0xb1c>
 801692c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801692e:	2001      	movs	r0, #1
 8016930:	2b00      	cmp	r3, #0
 8016932:	dd00      	ble.n	8016936 <_dtoa_r+0xb4e>
 8016934:	0018      	movs	r0, r3
 8016936:	2500      	movs	r5, #0
 8016938:	9b06      	ldr	r3, [sp, #24]
 801693a:	181b      	adds	r3, r3, r0
 801693c:	9308      	str	r3, [sp, #32]
 801693e:	9905      	ldr	r1, [sp, #20]
 8016940:	2201      	movs	r2, #1
 8016942:	9804      	ldr	r0, [sp, #16]
 8016944:	f000 ff16 	bl	8017774 <__lshift>
 8016948:	0031      	movs	r1, r6
 801694a:	9005      	str	r0, [sp, #20]
 801694c:	f000 ff80 	bl	8017850 <__mcmp>
 8016950:	2800      	cmp	r0, #0
 8016952:	dc9f      	bgt.n	8016894 <_dtoa_r+0xaac>
 8016954:	d101      	bne.n	801695a <_dtoa_r+0xb72>
 8016956:	07e3      	lsls	r3, r4, #31
 8016958:	d49c      	bmi.n	8016894 <_dtoa_r+0xaac>
 801695a:	9b08      	ldr	r3, [sp, #32]
 801695c:	9308      	str	r3, [sp, #32]
 801695e:	3b01      	subs	r3, #1
 8016960:	781a      	ldrb	r2, [r3, #0]
 8016962:	2a30      	cmp	r2, #48	; 0x30
 8016964:	d0fa      	beq.n	801695c <_dtoa_r+0xb74>
 8016966:	e6e8      	b.n	801673a <_dtoa_r+0x952>
 8016968:	9a06      	ldr	r2, [sp, #24]
 801696a:	429a      	cmp	r2, r3
 801696c:	d193      	bne.n	8016896 <_dtoa_r+0xaae>
 801696e:	9b03      	ldr	r3, [sp, #12]
 8016970:	3301      	adds	r3, #1
 8016972:	9303      	str	r3, [sp, #12]
 8016974:	2331      	movs	r3, #49	; 0x31
 8016976:	7013      	strb	r3, [r2, #0]
 8016978:	e6df      	b.n	801673a <_dtoa_r+0x952>
 801697a:	4b09      	ldr	r3, [pc, #36]	; (80169a0 <_dtoa_r+0xbb8>)
 801697c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801697e:	9306      	str	r3, [sp, #24]
 8016980:	4b08      	ldr	r3, [pc, #32]	; (80169a4 <_dtoa_r+0xbbc>)
 8016982:	2a00      	cmp	r2, #0
 8016984:	d001      	beq.n	801698a <_dtoa_r+0xba2>
 8016986:	f7ff fa60 	bl	8015e4a <_dtoa_r+0x62>
 801698a:	f7ff fa60 	bl	8015e4e <_dtoa_r+0x66>
 801698e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016990:	2b00      	cmp	r3, #0
 8016992:	dcb6      	bgt.n	8016902 <_dtoa_r+0xb1a>
 8016994:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016996:	2b02      	cmp	r3, #2
 8016998:	dd00      	ble.n	801699c <_dtoa_r+0xbb4>
 801699a:	e6b8      	b.n	801670e <_dtoa_r+0x926>
 801699c:	e7b1      	b.n	8016902 <_dtoa_r+0xb1a>
 801699e:	46c0      	nop			; (mov r8, r8)
 80169a0:	0801c7d8 	.word	0x0801c7d8
 80169a4:	0801c7e0 	.word	0x0801c7e0

080169a8 <__errno>:
 80169a8:	4b01      	ldr	r3, [pc, #4]	; (80169b0 <__errno+0x8>)
 80169aa:	6818      	ldr	r0, [r3, #0]
 80169ac:	4770      	bx	lr
 80169ae:	46c0      	nop			; (mov r8, r8)
 80169b0:	200000cc 	.word	0x200000cc

080169b4 <__libc_fini_array>:
 80169b4:	b570      	push	{r4, r5, r6, lr}
 80169b6:	4d07      	ldr	r5, [pc, #28]	; (80169d4 <__libc_fini_array+0x20>)
 80169b8:	4c07      	ldr	r4, [pc, #28]	; (80169d8 <__libc_fini_array+0x24>)
 80169ba:	1b64      	subs	r4, r4, r5
 80169bc:	10a4      	asrs	r4, r4, #2
 80169be:	2c00      	cmp	r4, #0
 80169c0:	d102      	bne.n	80169c8 <__libc_fini_array+0x14>
 80169c2:	f002 fe67 	bl	8019694 <_fini>
 80169c6:	bd70      	pop	{r4, r5, r6, pc}
 80169c8:	3c01      	subs	r4, #1
 80169ca:	00a3      	lsls	r3, r4, #2
 80169cc:	58eb      	ldr	r3, [r5, r3]
 80169ce:	4798      	blx	r3
 80169d0:	e7f5      	b.n	80169be <__libc_fini_array+0xa>
 80169d2:	46c0      	nop			; (mov r8, r8)
 80169d4:	0801ca90 	.word	0x0801ca90
 80169d8:	0801ca94 	.word	0x0801ca94

080169dc <_malloc_trim_r>:
 80169dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80169de:	0004      	movs	r4, r0
 80169e0:	2008      	movs	r0, #8
 80169e2:	000d      	movs	r5, r1
 80169e4:	f7ff f954 	bl	8015c90 <sysconf>
 80169e8:	0006      	movs	r6, r0
 80169ea:	0020      	movs	r0, r4
 80169ec:	f7fc fd82 	bl	80134f4 <__malloc_lock>
 80169f0:	2203      	movs	r2, #3
 80169f2:	4f21      	ldr	r7, [pc, #132]	; (8016a78 <_malloc_trim_r+0x9c>)
 80169f4:	0031      	movs	r1, r6
 80169f6:	68bb      	ldr	r3, [r7, #8]
 80169f8:	685b      	ldr	r3, [r3, #4]
 80169fa:	4393      	bics	r3, r2
 80169fc:	1b58      	subs	r0, r3, r5
 80169fe:	3811      	subs	r0, #17
 8016a00:	1980      	adds	r0, r0, r6
 8016a02:	9301      	str	r3, [sp, #4]
 8016a04:	f7e9 fba4 	bl	8000150 <__udivsi3>
 8016a08:	1e45      	subs	r5, r0, #1
 8016a0a:	4375      	muls	r5, r6
 8016a0c:	42ae      	cmp	r6, r5
 8016a0e:	dd04      	ble.n	8016a1a <_malloc_trim_r+0x3e>
 8016a10:	0020      	movs	r0, r4
 8016a12:	f7fc fd77 	bl	8013504 <__malloc_unlock>
 8016a16:	2000      	movs	r0, #0
 8016a18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016a1a:	2100      	movs	r1, #0
 8016a1c:	0020      	movs	r0, r4
 8016a1e:	f7fc ff3f 	bl	80138a0 <_sbrk_r>
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	9a01      	ldr	r2, [sp, #4]
 8016a26:	189b      	adds	r3, r3, r2
 8016a28:	4298      	cmp	r0, r3
 8016a2a:	d1f1      	bne.n	8016a10 <_malloc_trim_r+0x34>
 8016a2c:	0020      	movs	r0, r4
 8016a2e:	4269      	negs	r1, r5
 8016a30:	f7fc ff36 	bl	80138a0 <_sbrk_r>
 8016a34:	1c43      	adds	r3, r0, #1
 8016a36:	d110      	bne.n	8016a5a <_malloc_trim_r+0x7e>
 8016a38:	2100      	movs	r1, #0
 8016a3a:	0020      	movs	r0, r4
 8016a3c:	f7fc ff30 	bl	80138a0 <_sbrk_r>
 8016a40:	68ba      	ldr	r2, [r7, #8]
 8016a42:	1a81      	subs	r1, r0, r2
 8016a44:	290f      	cmp	r1, #15
 8016a46:	dde3      	ble.n	8016a10 <_malloc_trim_r+0x34>
 8016a48:	4b0c      	ldr	r3, [pc, #48]	; (8016a7c <_malloc_trim_r+0xa0>)
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	1ac0      	subs	r0, r0, r3
 8016a4e:	4b0c      	ldr	r3, [pc, #48]	; (8016a80 <_malloc_trim_r+0xa4>)
 8016a50:	6018      	str	r0, [r3, #0]
 8016a52:	2301      	movs	r3, #1
 8016a54:	430b      	orrs	r3, r1
 8016a56:	6053      	str	r3, [r2, #4]
 8016a58:	e7da      	b.n	8016a10 <_malloc_trim_r+0x34>
 8016a5a:	2601      	movs	r6, #1
 8016a5c:	9b01      	ldr	r3, [sp, #4]
 8016a5e:	68ba      	ldr	r2, [r7, #8]
 8016a60:	1b5b      	subs	r3, r3, r5
 8016a62:	4333      	orrs	r3, r6
 8016a64:	6053      	str	r3, [r2, #4]
 8016a66:	4b06      	ldr	r3, [pc, #24]	; (8016a80 <_malloc_trim_r+0xa4>)
 8016a68:	0020      	movs	r0, r4
 8016a6a:	681a      	ldr	r2, [r3, #0]
 8016a6c:	1b55      	subs	r5, r2, r5
 8016a6e:	601d      	str	r5, [r3, #0]
 8016a70:	f7fc fd48 	bl	8013504 <__malloc_unlock>
 8016a74:	0030      	movs	r0, r6
 8016a76:	e7cf      	b.n	8016a18 <_malloc_trim_r+0x3c>
 8016a78:	200004f8 	.word	0x200004f8
 8016a7c:	20000900 	.word	0x20000900
 8016a80:	20006f48 	.word	0x20006f48

08016a84 <_free_r>:
 8016a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016a86:	1e0d      	subs	r5, r1, #0
 8016a88:	9001      	str	r0, [sp, #4]
 8016a8a:	d02d      	beq.n	8016ae8 <_free_r+0x64>
 8016a8c:	f7fc fd32 	bl	80134f4 <__malloc_lock>
 8016a90:	2301      	movs	r3, #1
 8016a92:	0029      	movs	r1, r5
 8016a94:	469c      	mov	ip, r3
 8016a96:	3908      	subs	r1, #8
 8016a98:	684f      	ldr	r7, [r1, #4]
 8016a9a:	4662      	mov	r2, ip
 8016a9c:	003b      	movs	r3, r7
 8016a9e:	4666      	mov	r6, ip
 8016aa0:	4393      	bics	r3, r2
 8016aa2:	18c8      	adds	r0, r1, r3
 8016aa4:	6845      	ldr	r5, [r0, #4]
 8016aa6:	3202      	adds	r2, #2
 8016aa8:	4395      	bics	r5, r2
 8016aaa:	4a4a      	ldr	r2, [pc, #296]	; (8016bd4 <_free_r+0x150>)
 8016aac:	4037      	ands	r7, r6
 8016aae:	6896      	ldr	r6, [r2, #8]
 8016ab0:	4286      	cmp	r6, r0
 8016ab2:	d11a      	bne.n	8016aea <_free_r+0x66>
 8016ab4:	195b      	adds	r3, r3, r5
 8016ab6:	2f00      	cmp	r7, #0
 8016ab8:	d106      	bne.n	8016ac8 <_free_r+0x44>
 8016aba:	6808      	ldr	r0, [r1, #0]
 8016abc:	1a09      	subs	r1, r1, r0
 8016abe:	688d      	ldr	r5, [r1, #8]
 8016ac0:	181b      	adds	r3, r3, r0
 8016ac2:	68c8      	ldr	r0, [r1, #12]
 8016ac4:	60e8      	str	r0, [r5, #12]
 8016ac6:	6085      	str	r5, [r0, #8]
 8016ac8:	2001      	movs	r0, #1
 8016aca:	4318      	orrs	r0, r3
 8016acc:	6048      	str	r0, [r1, #4]
 8016ace:	6091      	str	r1, [r2, #8]
 8016ad0:	4a41      	ldr	r2, [pc, #260]	; (8016bd8 <_free_r+0x154>)
 8016ad2:	6812      	ldr	r2, [r2, #0]
 8016ad4:	429a      	cmp	r2, r3
 8016ad6:	d804      	bhi.n	8016ae2 <_free_r+0x5e>
 8016ad8:	4b40      	ldr	r3, [pc, #256]	; (8016bdc <_free_r+0x158>)
 8016ada:	9801      	ldr	r0, [sp, #4]
 8016adc:	6819      	ldr	r1, [r3, #0]
 8016ade:	f7ff ff7d 	bl	80169dc <_malloc_trim_r>
 8016ae2:	9801      	ldr	r0, [sp, #4]
 8016ae4:	f7fc fd0e 	bl	8013504 <__malloc_unlock>
 8016ae8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8016aea:	2600      	movs	r6, #0
 8016aec:	6045      	str	r5, [r0, #4]
 8016aee:	42b7      	cmp	r7, r6
 8016af0:	d109      	bne.n	8016b06 <_free_r+0x82>
 8016af2:	680f      	ldr	r7, [r1, #0]
 8016af4:	4c3a      	ldr	r4, [pc, #232]	; (8016be0 <_free_r+0x15c>)
 8016af6:	1bc9      	subs	r1, r1, r7
 8016af8:	19db      	adds	r3, r3, r7
 8016afa:	688f      	ldr	r7, [r1, #8]
 8016afc:	42a7      	cmp	r7, r4
 8016afe:	d02c      	beq.n	8016b5a <_free_r+0xd6>
 8016b00:	68cc      	ldr	r4, [r1, #12]
 8016b02:	60fc      	str	r4, [r7, #12]
 8016b04:	60a7      	str	r7, [r4, #8]
 8016b06:	1947      	adds	r7, r0, r5
 8016b08:	687c      	ldr	r4, [r7, #4]
 8016b0a:	2701      	movs	r7, #1
 8016b0c:	423c      	tst	r4, r7
 8016b0e:	d10b      	bne.n	8016b28 <_free_r+0xa4>
 8016b10:	195b      	adds	r3, r3, r5
 8016b12:	6885      	ldr	r5, [r0, #8]
 8016b14:	2e00      	cmp	r6, #0
 8016b16:	d122      	bne.n	8016b5e <_free_r+0xda>
 8016b18:	4c31      	ldr	r4, [pc, #196]	; (8016be0 <_free_r+0x15c>)
 8016b1a:	42a5      	cmp	r5, r4
 8016b1c:	d11f      	bne.n	8016b5e <_free_r+0xda>
 8016b1e:	003e      	movs	r6, r7
 8016b20:	6151      	str	r1, [r2, #20]
 8016b22:	6111      	str	r1, [r2, #16]
 8016b24:	60cd      	str	r5, [r1, #12]
 8016b26:	608d      	str	r5, [r1, #8]
 8016b28:	2501      	movs	r5, #1
 8016b2a:	0028      	movs	r0, r5
 8016b2c:	4318      	orrs	r0, r3
 8016b2e:	6048      	str	r0, [r1, #4]
 8016b30:	50cb      	str	r3, [r1, r3]
 8016b32:	2e00      	cmp	r6, #0
 8016b34:	d1d5      	bne.n	8016ae2 <_free_r+0x5e>
 8016b36:	2080      	movs	r0, #128	; 0x80
 8016b38:	0080      	lsls	r0, r0, #2
 8016b3a:	4283      	cmp	r3, r0
 8016b3c:	d213      	bcs.n	8016b66 <_free_r+0xe2>
 8016b3e:	08d8      	lsrs	r0, r3, #3
 8016b40:	095b      	lsrs	r3, r3, #5
 8016b42:	409d      	lsls	r5, r3
 8016b44:	6853      	ldr	r3, [r2, #4]
 8016b46:	00c0      	lsls	r0, r0, #3
 8016b48:	431d      	orrs	r5, r3
 8016b4a:	6055      	str	r5, [r2, #4]
 8016b4c:	1882      	adds	r2, r0, r2
 8016b4e:	6893      	ldr	r3, [r2, #8]
 8016b50:	60ca      	str	r2, [r1, #12]
 8016b52:	608b      	str	r3, [r1, #8]
 8016b54:	6091      	str	r1, [r2, #8]
 8016b56:	60d9      	str	r1, [r3, #12]
 8016b58:	e7c3      	b.n	8016ae2 <_free_r+0x5e>
 8016b5a:	4666      	mov	r6, ip
 8016b5c:	e7d3      	b.n	8016b06 <_free_r+0x82>
 8016b5e:	68c0      	ldr	r0, [r0, #12]
 8016b60:	60e8      	str	r0, [r5, #12]
 8016b62:	6085      	str	r5, [r0, #8]
 8016b64:	e7e0      	b.n	8016b28 <_free_r+0xa4>
 8016b66:	0a5d      	lsrs	r5, r3, #9
 8016b68:	2d04      	cmp	r5, #4
 8016b6a:	d812      	bhi.n	8016b92 <_free_r+0x10e>
 8016b6c:	0998      	lsrs	r0, r3, #6
 8016b6e:	3038      	adds	r0, #56	; 0x38
 8016b70:	00c6      	lsls	r6, r0, #3
 8016b72:	18b6      	adds	r6, r6, r2
 8016b74:	68b5      	ldr	r5, [r6, #8]
 8016b76:	2703      	movs	r7, #3
 8016b78:	42ae      	cmp	r6, r5
 8016b7a:	d125      	bne.n	8016bc8 <_free_r+0x144>
 8016b7c:	2301      	movs	r3, #1
 8016b7e:	1080      	asrs	r0, r0, #2
 8016b80:	4083      	lsls	r3, r0
 8016b82:	6850      	ldr	r0, [r2, #4]
 8016b84:	4303      	orrs	r3, r0
 8016b86:	6053      	str	r3, [r2, #4]
 8016b88:	60ce      	str	r6, [r1, #12]
 8016b8a:	608d      	str	r5, [r1, #8]
 8016b8c:	60b1      	str	r1, [r6, #8]
 8016b8e:	60e9      	str	r1, [r5, #12]
 8016b90:	e7a7      	b.n	8016ae2 <_free_r+0x5e>
 8016b92:	2d14      	cmp	r5, #20
 8016b94:	d802      	bhi.n	8016b9c <_free_r+0x118>
 8016b96:	0028      	movs	r0, r5
 8016b98:	305b      	adds	r0, #91	; 0x5b
 8016b9a:	e7e9      	b.n	8016b70 <_free_r+0xec>
 8016b9c:	2d54      	cmp	r5, #84	; 0x54
 8016b9e:	d802      	bhi.n	8016ba6 <_free_r+0x122>
 8016ba0:	0b18      	lsrs	r0, r3, #12
 8016ba2:	306e      	adds	r0, #110	; 0x6e
 8016ba4:	e7e4      	b.n	8016b70 <_free_r+0xec>
 8016ba6:	20aa      	movs	r0, #170	; 0xaa
 8016ba8:	0040      	lsls	r0, r0, #1
 8016baa:	4285      	cmp	r5, r0
 8016bac:	d802      	bhi.n	8016bb4 <_free_r+0x130>
 8016bae:	0bd8      	lsrs	r0, r3, #15
 8016bb0:	3077      	adds	r0, #119	; 0x77
 8016bb2:	e7dd      	b.n	8016b70 <_free_r+0xec>
 8016bb4:	4e0b      	ldr	r6, [pc, #44]	; (8016be4 <_free_r+0x160>)
 8016bb6:	207e      	movs	r0, #126	; 0x7e
 8016bb8:	42b5      	cmp	r5, r6
 8016bba:	d8d9      	bhi.n	8016b70 <_free_r+0xec>
 8016bbc:	0c98      	lsrs	r0, r3, #18
 8016bbe:	307c      	adds	r0, #124	; 0x7c
 8016bc0:	e7d6      	b.n	8016b70 <_free_r+0xec>
 8016bc2:	68ad      	ldr	r5, [r5, #8]
 8016bc4:	42ae      	cmp	r6, r5
 8016bc6:	d003      	beq.n	8016bd0 <_free_r+0x14c>
 8016bc8:	686a      	ldr	r2, [r5, #4]
 8016bca:	43ba      	bics	r2, r7
 8016bcc:	429a      	cmp	r2, r3
 8016bce:	d8f8      	bhi.n	8016bc2 <_free_r+0x13e>
 8016bd0:	68ee      	ldr	r6, [r5, #12]
 8016bd2:	e7d9      	b.n	8016b88 <_free_r+0x104>
 8016bd4:	200004f8 	.word	0x200004f8
 8016bd8:	20000904 	.word	0x20000904
 8016bdc:	20006f78 	.word	0x20006f78
 8016be0:	20000500 	.word	0x20000500
 8016be4:	00000554 	.word	0x00000554

08016be8 <rshift>:
 8016be8:	0002      	movs	r2, r0
 8016bea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bec:	6904      	ldr	r4, [r0, #16]
 8016bee:	3214      	adds	r2, #20
 8016bf0:	0013      	movs	r3, r2
 8016bf2:	b085      	sub	sp, #20
 8016bf4:	114f      	asrs	r7, r1, #5
 8016bf6:	42bc      	cmp	r4, r7
 8016bf8:	dd31      	ble.n	8016c5e <rshift+0x76>
 8016bfa:	00bb      	lsls	r3, r7, #2
 8016bfc:	18d3      	adds	r3, r2, r3
 8016bfe:	261f      	movs	r6, #31
 8016c00:	9301      	str	r3, [sp, #4]
 8016c02:	000b      	movs	r3, r1
 8016c04:	00a5      	lsls	r5, r4, #2
 8016c06:	4033      	ands	r3, r6
 8016c08:	1955      	adds	r5, r2, r5
 8016c0a:	9302      	str	r3, [sp, #8]
 8016c0c:	4231      	tst	r1, r6
 8016c0e:	d10c      	bne.n	8016c2a <rshift+0x42>
 8016c10:	0016      	movs	r6, r2
 8016c12:	9901      	ldr	r1, [sp, #4]
 8016c14:	428d      	cmp	r5, r1
 8016c16:	d838      	bhi.n	8016c8a <rshift+0xa2>
 8016c18:	9901      	ldr	r1, [sp, #4]
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	3903      	subs	r1, #3
 8016c1e:	428d      	cmp	r5, r1
 8016c20:	d301      	bcc.n	8016c26 <rshift+0x3e>
 8016c22:	1be3      	subs	r3, r4, r7
 8016c24:	009b      	lsls	r3, r3, #2
 8016c26:	18d3      	adds	r3, r2, r3
 8016c28:	e019      	b.n	8016c5e <rshift+0x76>
 8016c2a:	2120      	movs	r1, #32
 8016c2c:	9b02      	ldr	r3, [sp, #8]
 8016c2e:	9e01      	ldr	r6, [sp, #4]
 8016c30:	1acb      	subs	r3, r1, r3
 8016c32:	9303      	str	r3, [sp, #12]
 8016c34:	ce02      	ldmia	r6!, {r1}
 8016c36:	9b02      	ldr	r3, [sp, #8]
 8016c38:	4694      	mov	ip, r2
 8016c3a:	40d9      	lsrs	r1, r3
 8016c3c:	9100      	str	r1, [sp, #0]
 8016c3e:	42b5      	cmp	r5, r6
 8016c40:	d816      	bhi.n	8016c70 <rshift+0x88>
 8016c42:	9e01      	ldr	r6, [sp, #4]
 8016c44:	2300      	movs	r3, #0
 8016c46:	3601      	adds	r6, #1
 8016c48:	42b5      	cmp	r5, r6
 8016c4a:	d302      	bcc.n	8016c52 <rshift+0x6a>
 8016c4c:	1be3      	subs	r3, r4, r7
 8016c4e:	009b      	lsls	r3, r3, #2
 8016c50:	3b04      	subs	r3, #4
 8016c52:	9900      	ldr	r1, [sp, #0]
 8016c54:	18d3      	adds	r3, r2, r3
 8016c56:	6019      	str	r1, [r3, #0]
 8016c58:	2900      	cmp	r1, #0
 8016c5a:	d000      	beq.n	8016c5e <rshift+0x76>
 8016c5c:	3304      	adds	r3, #4
 8016c5e:	1a99      	subs	r1, r3, r2
 8016c60:	1089      	asrs	r1, r1, #2
 8016c62:	6101      	str	r1, [r0, #16]
 8016c64:	4293      	cmp	r3, r2
 8016c66:	d101      	bne.n	8016c6c <rshift+0x84>
 8016c68:	2300      	movs	r3, #0
 8016c6a:	6143      	str	r3, [r0, #20]
 8016c6c:	b005      	add	sp, #20
 8016c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c70:	6833      	ldr	r3, [r6, #0]
 8016c72:	9903      	ldr	r1, [sp, #12]
 8016c74:	408b      	lsls	r3, r1
 8016c76:	9900      	ldr	r1, [sp, #0]
 8016c78:	4319      	orrs	r1, r3
 8016c7a:	4663      	mov	r3, ip
 8016c7c:	c302      	stmia	r3!, {r1}
 8016c7e:	469c      	mov	ip, r3
 8016c80:	ce02      	ldmia	r6!, {r1}
 8016c82:	9b02      	ldr	r3, [sp, #8]
 8016c84:	40d9      	lsrs	r1, r3
 8016c86:	9100      	str	r1, [sp, #0]
 8016c88:	e7d9      	b.n	8016c3e <rshift+0x56>
 8016c8a:	c908      	ldmia	r1!, {r3}
 8016c8c:	c608      	stmia	r6!, {r3}
 8016c8e:	e7c1      	b.n	8016c14 <rshift+0x2c>

08016c90 <__hexdig_fun>:
 8016c90:	0002      	movs	r2, r0
 8016c92:	3a30      	subs	r2, #48	; 0x30
 8016c94:	0003      	movs	r3, r0
 8016c96:	2a09      	cmp	r2, #9
 8016c98:	d802      	bhi.n	8016ca0 <__hexdig_fun+0x10>
 8016c9a:	3b20      	subs	r3, #32
 8016c9c:	b2d8      	uxtb	r0, r3
 8016c9e:	4770      	bx	lr
 8016ca0:	0002      	movs	r2, r0
 8016ca2:	3a61      	subs	r2, #97	; 0x61
 8016ca4:	2a05      	cmp	r2, #5
 8016ca6:	d801      	bhi.n	8016cac <__hexdig_fun+0x1c>
 8016ca8:	3b47      	subs	r3, #71	; 0x47
 8016caa:	e7f7      	b.n	8016c9c <__hexdig_fun+0xc>
 8016cac:	001a      	movs	r2, r3
 8016cae:	3a41      	subs	r2, #65	; 0x41
 8016cb0:	2000      	movs	r0, #0
 8016cb2:	2a05      	cmp	r2, #5
 8016cb4:	d8f3      	bhi.n	8016c9e <__hexdig_fun+0xe>
 8016cb6:	3b27      	subs	r3, #39	; 0x27
 8016cb8:	e7f0      	b.n	8016c9c <__hexdig_fun+0xc>
	...

08016cbc <__gethex>:
 8016cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cbe:	b08d      	sub	sp, #52	; 0x34
 8016cc0:	930a      	str	r3, [sp, #40]	; 0x28
 8016cc2:	4bbf      	ldr	r3, [pc, #764]	; (8016fc0 <__gethex+0x304>)
 8016cc4:	9005      	str	r0, [sp, #20]
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	9109      	str	r1, [sp, #36]	; 0x24
 8016cca:	0018      	movs	r0, r3
 8016ccc:	9202      	str	r2, [sp, #8]
 8016cce:	9307      	str	r3, [sp, #28]
 8016cd0:	f7e9 fa22 	bl	8000118 <strlen>
 8016cd4:	2202      	movs	r2, #2
 8016cd6:	9b07      	ldr	r3, [sp, #28]
 8016cd8:	4252      	negs	r2, r2
 8016cda:	181b      	adds	r3, r3, r0
 8016cdc:	3b01      	subs	r3, #1
 8016cde:	781b      	ldrb	r3, [r3, #0]
 8016ce0:	9003      	str	r0, [sp, #12]
 8016ce2:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ce6:	6819      	ldr	r1, [r3, #0]
 8016ce8:	1c8b      	adds	r3, r1, #2
 8016cea:	1a52      	subs	r2, r2, r1
 8016cec:	18d1      	adds	r1, r2, r3
 8016cee:	9301      	str	r3, [sp, #4]
 8016cf0:	9108      	str	r1, [sp, #32]
 8016cf2:	9901      	ldr	r1, [sp, #4]
 8016cf4:	3301      	adds	r3, #1
 8016cf6:	7808      	ldrb	r0, [r1, #0]
 8016cf8:	2830      	cmp	r0, #48	; 0x30
 8016cfa:	d0f7      	beq.n	8016cec <__gethex+0x30>
 8016cfc:	f7ff ffc8 	bl	8016c90 <__hexdig_fun>
 8016d00:	2300      	movs	r3, #0
 8016d02:	001c      	movs	r4, r3
 8016d04:	9304      	str	r3, [sp, #16]
 8016d06:	4298      	cmp	r0, r3
 8016d08:	d11f      	bne.n	8016d4a <__gethex+0x8e>
 8016d0a:	9a03      	ldr	r2, [sp, #12]
 8016d0c:	9907      	ldr	r1, [sp, #28]
 8016d0e:	9801      	ldr	r0, [sp, #4]
 8016d10:	f7fc fe1b 	bl	801394a <strncmp>
 8016d14:	0007      	movs	r7, r0
 8016d16:	42a0      	cmp	r0, r4
 8016d18:	d000      	beq.n	8016d1c <__gethex+0x60>
 8016d1a:	e06b      	b.n	8016df4 <__gethex+0x138>
 8016d1c:	9b01      	ldr	r3, [sp, #4]
 8016d1e:	9a03      	ldr	r2, [sp, #12]
 8016d20:	5c98      	ldrb	r0, [r3, r2]
 8016d22:	189d      	adds	r5, r3, r2
 8016d24:	f7ff ffb4 	bl	8016c90 <__hexdig_fun>
 8016d28:	2301      	movs	r3, #1
 8016d2a:	9304      	str	r3, [sp, #16]
 8016d2c:	42a0      	cmp	r0, r4
 8016d2e:	d030      	beq.n	8016d92 <__gethex+0xd6>
 8016d30:	9501      	str	r5, [sp, #4]
 8016d32:	9b01      	ldr	r3, [sp, #4]
 8016d34:	7818      	ldrb	r0, [r3, #0]
 8016d36:	2830      	cmp	r0, #48	; 0x30
 8016d38:	d009      	beq.n	8016d4e <__gethex+0x92>
 8016d3a:	f7ff ffa9 	bl	8016c90 <__hexdig_fun>
 8016d3e:	4242      	negs	r2, r0
 8016d40:	4142      	adcs	r2, r0
 8016d42:	2301      	movs	r3, #1
 8016d44:	002c      	movs	r4, r5
 8016d46:	9204      	str	r2, [sp, #16]
 8016d48:	9308      	str	r3, [sp, #32]
 8016d4a:	9d01      	ldr	r5, [sp, #4]
 8016d4c:	e004      	b.n	8016d58 <__gethex+0x9c>
 8016d4e:	9b01      	ldr	r3, [sp, #4]
 8016d50:	3301      	adds	r3, #1
 8016d52:	9301      	str	r3, [sp, #4]
 8016d54:	e7ed      	b.n	8016d32 <__gethex+0x76>
 8016d56:	3501      	adds	r5, #1
 8016d58:	7828      	ldrb	r0, [r5, #0]
 8016d5a:	f7ff ff99 	bl	8016c90 <__hexdig_fun>
 8016d5e:	1e07      	subs	r7, r0, #0
 8016d60:	d1f9      	bne.n	8016d56 <__gethex+0x9a>
 8016d62:	0028      	movs	r0, r5
 8016d64:	9a03      	ldr	r2, [sp, #12]
 8016d66:	9907      	ldr	r1, [sp, #28]
 8016d68:	f7fc fdef 	bl	801394a <strncmp>
 8016d6c:	2800      	cmp	r0, #0
 8016d6e:	d10e      	bne.n	8016d8e <__gethex+0xd2>
 8016d70:	2c00      	cmp	r4, #0
 8016d72:	d107      	bne.n	8016d84 <__gethex+0xc8>
 8016d74:	9b03      	ldr	r3, [sp, #12]
 8016d76:	18ed      	adds	r5, r5, r3
 8016d78:	002c      	movs	r4, r5
 8016d7a:	7828      	ldrb	r0, [r5, #0]
 8016d7c:	f7ff ff88 	bl	8016c90 <__hexdig_fun>
 8016d80:	2800      	cmp	r0, #0
 8016d82:	d102      	bne.n	8016d8a <__gethex+0xce>
 8016d84:	1b64      	subs	r4, r4, r5
 8016d86:	00a7      	lsls	r7, r4, #2
 8016d88:	e003      	b.n	8016d92 <__gethex+0xd6>
 8016d8a:	3501      	adds	r5, #1
 8016d8c:	e7f5      	b.n	8016d7a <__gethex+0xbe>
 8016d8e:	2c00      	cmp	r4, #0
 8016d90:	d1f8      	bne.n	8016d84 <__gethex+0xc8>
 8016d92:	2220      	movs	r2, #32
 8016d94:	782b      	ldrb	r3, [r5, #0]
 8016d96:	002e      	movs	r6, r5
 8016d98:	4393      	bics	r3, r2
 8016d9a:	2b50      	cmp	r3, #80	; 0x50
 8016d9c:	d11d      	bne.n	8016dda <__gethex+0x11e>
 8016d9e:	786b      	ldrb	r3, [r5, #1]
 8016da0:	2b2b      	cmp	r3, #43	; 0x2b
 8016da2:	d02c      	beq.n	8016dfe <__gethex+0x142>
 8016da4:	2b2d      	cmp	r3, #45	; 0x2d
 8016da6:	d02e      	beq.n	8016e06 <__gethex+0x14a>
 8016da8:	2300      	movs	r3, #0
 8016daa:	1c6e      	adds	r6, r5, #1
 8016dac:	9306      	str	r3, [sp, #24]
 8016dae:	7830      	ldrb	r0, [r6, #0]
 8016db0:	f7ff ff6e 	bl	8016c90 <__hexdig_fun>
 8016db4:	1e43      	subs	r3, r0, #1
 8016db6:	b2db      	uxtb	r3, r3
 8016db8:	2b18      	cmp	r3, #24
 8016dba:	d82b      	bhi.n	8016e14 <__gethex+0x158>
 8016dbc:	3810      	subs	r0, #16
 8016dbe:	0004      	movs	r4, r0
 8016dc0:	7870      	ldrb	r0, [r6, #1]
 8016dc2:	f7ff ff65 	bl	8016c90 <__hexdig_fun>
 8016dc6:	1e43      	subs	r3, r0, #1
 8016dc8:	b2db      	uxtb	r3, r3
 8016dca:	3601      	adds	r6, #1
 8016dcc:	2b18      	cmp	r3, #24
 8016dce:	d91c      	bls.n	8016e0a <__gethex+0x14e>
 8016dd0:	9b06      	ldr	r3, [sp, #24]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d000      	beq.n	8016dd8 <__gethex+0x11c>
 8016dd6:	4264      	negs	r4, r4
 8016dd8:	193f      	adds	r7, r7, r4
 8016dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ddc:	601e      	str	r6, [r3, #0]
 8016dde:	9b04      	ldr	r3, [sp, #16]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d019      	beq.n	8016e18 <__gethex+0x15c>
 8016de4:	2600      	movs	r6, #0
 8016de6:	9b08      	ldr	r3, [sp, #32]
 8016de8:	42b3      	cmp	r3, r6
 8016dea:	d100      	bne.n	8016dee <__gethex+0x132>
 8016dec:	3606      	adds	r6, #6
 8016dee:	0030      	movs	r0, r6
 8016df0:	b00d      	add	sp, #52	; 0x34
 8016df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016df4:	2301      	movs	r3, #1
 8016df6:	2700      	movs	r7, #0
 8016df8:	9d01      	ldr	r5, [sp, #4]
 8016dfa:	9304      	str	r3, [sp, #16]
 8016dfc:	e7c9      	b.n	8016d92 <__gethex+0xd6>
 8016dfe:	2300      	movs	r3, #0
 8016e00:	9306      	str	r3, [sp, #24]
 8016e02:	1cae      	adds	r6, r5, #2
 8016e04:	e7d3      	b.n	8016dae <__gethex+0xf2>
 8016e06:	2301      	movs	r3, #1
 8016e08:	e7fa      	b.n	8016e00 <__gethex+0x144>
 8016e0a:	230a      	movs	r3, #10
 8016e0c:	435c      	muls	r4, r3
 8016e0e:	1824      	adds	r4, r4, r0
 8016e10:	3c10      	subs	r4, #16
 8016e12:	e7d5      	b.n	8016dc0 <__gethex+0x104>
 8016e14:	002e      	movs	r6, r5
 8016e16:	e7e0      	b.n	8016dda <__gethex+0x11e>
 8016e18:	9b01      	ldr	r3, [sp, #4]
 8016e1a:	9904      	ldr	r1, [sp, #16]
 8016e1c:	1aeb      	subs	r3, r5, r3
 8016e1e:	3b01      	subs	r3, #1
 8016e20:	2b07      	cmp	r3, #7
 8016e22:	dc0a      	bgt.n	8016e3a <__gethex+0x17e>
 8016e24:	9805      	ldr	r0, [sp, #20]
 8016e26:	f000 fa93 	bl	8017350 <_Balloc>
 8016e2a:	1e04      	subs	r4, r0, #0
 8016e2c:	d108      	bne.n	8016e40 <__gethex+0x184>
 8016e2e:	0002      	movs	r2, r0
 8016e30:	21de      	movs	r1, #222	; 0xde
 8016e32:	4b64      	ldr	r3, [pc, #400]	; (8016fc4 <__gethex+0x308>)
 8016e34:	4864      	ldr	r0, [pc, #400]	; (8016fc8 <__gethex+0x30c>)
 8016e36:	f001 f80d 	bl	8017e54 <__assert_func>
 8016e3a:	3101      	adds	r1, #1
 8016e3c:	105b      	asrs	r3, r3, #1
 8016e3e:	e7ef      	b.n	8016e20 <__gethex+0x164>
 8016e40:	0003      	movs	r3, r0
 8016e42:	3314      	adds	r3, #20
 8016e44:	9304      	str	r3, [sp, #16]
 8016e46:	9309      	str	r3, [sp, #36]	; 0x24
 8016e48:	2300      	movs	r3, #0
 8016e4a:	001e      	movs	r6, r3
 8016e4c:	9306      	str	r3, [sp, #24]
 8016e4e:	9b01      	ldr	r3, [sp, #4]
 8016e50:	42ab      	cmp	r3, r5
 8016e52:	d340      	bcc.n	8016ed6 <__gethex+0x21a>
 8016e54:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016e56:	9b04      	ldr	r3, [sp, #16]
 8016e58:	c540      	stmia	r5!, {r6}
 8016e5a:	1aed      	subs	r5, r5, r3
 8016e5c:	10ad      	asrs	r5, r5, #2
 8016e5e:	0030      	movs	r0, r6
 8016e60:	6125      	str	r5, [r4, #16]
 8016e62:	f000 fb37 	bl	80174d4 <__hi0bits>
 8016e66:	9b02      	ldr	r3, [sp, #8]
 8016e68:	016d      	lsls	r5, r5, #5
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	1a2e      	subs	r6, r5, r0
 8016e6e:	9301      	str	r3, [sp, #4]
 8016e70:	429e      	cmp	r6, r3
 8016e72:	dd5a      	ble.n	8016f2a <__gethex+0x26e>
 8016e74:	1af6      	subs	r6, r6, r3
 8016e76:	0031      	movs	r1, r6
 8016e78:	0020      	movs	r0, r4
 8016e7a:	f000 febf 	bl	8017bfc <__any_on>
 8016e7e:	1e05      	subs	r5, r0, #0
 8016e80:	d016      	beq.n	8016eb0 <__gethex+0x1f4>
 8016e82:	2501      	movs	r5, #1
 8016e84:	211f      	movs	r1, #31
 8016e86:	0028      	movs	r0, r5
 8016e88:	1e73      	subs	r3, r6, #1
 8016e8a:	4019      	ands	r1, r3
 8016e8c:	4088      	lsls	r0, r1
 8016e8e:	0001      	movs	r1, r0
 8016e90:	115a      	asrs	r2, r3, #5
 8016e92:	9804      	ldr	r0, [sp, #16]
 8016e94:	0092      	lsls	r2, r2, #2
 8016e96:	5812      	ldr	r2, [r2, r0]
 8016e98:	420a      	tst	r2, r1
 8016e9a:	d009      	beq.n	8016eb0 <__gethex+0x1f4>
 8016e9c:	42ab      	cmp	r3, r5
 8016e9e:	dd06      	ble.n	8016eae <__gethex+0x1f2>
 8016ea0:	0020      	movs	r0, r4
 8016ea2:	1eb1      	subs	r1, r6, #2
 8016ea4:	f000 feaa 	bl	8017bfc <__any_on>
 8016ea8:	3502      	adds	r5, #2
 8016eaa:	2800      	cmp	r0, #0
 8016eac:	d100      	bne.n	8016eb0 <__gethex+0x1f4>
 8016eae:	2502      	movs	r5, #2
 8016eb0:	0031      	movs	r1, r6
 8016eb2:	0020      	movs	r0, r4
 8016eb4:	f7ff fe98 	bl	8016be8 <rshift>
 8016eb8:	19bf      	adds	r7, r7, r6
 8016eba:	9b02      	ldr	r3, [sp, #8]
 8016ebc:	689b      	ldr	r3, [r3, #8]
 8016ebe:	9303      	str	r3, [sp, #12]
 8016ec0:	42bb      	cmp	r3, r7
 8016ec2:	da42      	bge.n	8016f4a <__gethex+0x28e>
 8016ec4:	0021      	movs	r1, r4
 8016ec6:	9805      	ldr	r0, [sp, #20]
 8016ec8:	f000 fa6a 	bl	80173a0 <_Bfree>
 8016ecc:	2300      	movs	r3, #0
 8016ece:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016ed0:	26a3      	movs	r6, #163	; 0xa3
 8016ed2:	6013      	str	r3, [r2, #0]
 8016ed4:	e78b      	b.n	8016dee <__gethex+0x132>
 8016ed6:	1e6b      	subs	r3, r5, #1
 8016ed8:	9308      	str	r3, [sp, #32]
 8016eda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016edc:	781b      	ldrb	r3, [r3, #0]
 8016ede:	4293      	cmp	r3, r2
 8016ee0:	d014      	beq.n	8016f0c <__gethex+0x250>
 8016ee2:	9b06      	ldr	r3, [sp, #24]
 8016ee4:	2b20      	cmp	r3, #32
 8016ee6:	d104      	bne.n	8016ef2 <__gethex+0x236>
 8016ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016eea:	c340      	stmia	r3!, {r6}
 8016eec:	2600      	movs	r6, #0
 8016eee:	9309      	str	r3, [sp, #36]	; 0x24
 8016ef0:	9606      	str	r6, [sp, #24]
 8016ef2:	9b08      	ldr	r3, [sp, #32]
 8016ef4:	7818      	ldrb	r0, [r3, #0]
 8016ef6:	f7ff fecb 	bl	8016c90 <__hexdig_fun>
 8016efa:	230f      	movs	r3, #15
 8016efc:	4018      	ands	r0, r3
 8016efe:	9b06      	ldr	r3, [sp, #24]
 8016f00:	9d08      	ldr	r5, [sp, #32]
 8016f02:	4098      	lsls	r0, r3
 8016f04:	3304      	adds	r3, #4
 8016f06:	4306      	orrs	r6, r0
 8016f08:	9306      	str	r3, [sp, #24]
 8016f0a:	e7a0      	b.n	8016e4e <__gethex+0x192>
 8016f0c:	2301      	movs	r3, #1
 8016f0e:	9a03      	ldr	r2, [sp, #12]
 8016f10:	1a9d      	subs	r5, r3, r2
 8016f12:	9b08      	ldr	r3, [sp, #32]
 8016f14:	195d      	adds	r5, r3, r5
 8016f16:	9b01      	ldr	r3, [sp, #4]
 8016f18:	429d      	cmp	r5, r3
 8016f1a:	d3e2      	bcc.n	8016ee2 <__gethex+0x226>
 8016f1c:	0028      	movs	r0, r5
 8016f1e:	9907      	ldr	r1, [sp, #28]
 8016f20:	f7fc fd13 	bl	801394a <strncmp>
 8016f24:	2800      	cmp	r0, #0
 8016f26:	d1dc      	bne.n	8016ee2 <__gethex+0x226>
 8016f28:	e791      	b.n	8016e4e <__gethex+0x192>
 8016f2a:	9b01      	ldr	r3, [sp, #4]
 8016f2c:	2500      	movs	r5, #0
 8016f2e:	429e      	cmp	r6, r3
 8016f30:	dac3      	bge.n	8016eba <__gethex+0x1fe>
 8016f32:	1b9e      	subs	r6, r3, r6
 8016f34:	0021      	movs	r1, r4
 8016f36:	0032      	movs	r2, r6
 8016f38:	9805      	ldr	r0, [sp, #20]
 8016f3a:	f000 fc1b 	bl	8017774 <__lshift>
 8016f3e:	0003      	movs	r3, r0
 8016f40:	3314      	adds	r3, #20
 8016f42:	0004      	movs	r4, r0
 8016f44:	1bbf      	subs	r7, r7, r6
 8016f46:	9304      	str	r3, [sp, #16]
 8016f48:	e7b7      	b.n	8016eba <__gethex+0x1fe>
 8016f4a:	9b02      	ldr	r3, [sp, #8]
 8016f4c:	685e      	ldr	r6, [r3, #4]
 8016f4e:	42be      	cmp	r6, r7
 8016f50:	dd71      	ble.n	8017036 <__gethex+0x37a>
 8016f52:	9b01      	ldr	r3, [sp, #4]
 8016f54:	1bf6      	subs	r6, r6, r7
 8016f56:	42b3      	cmp	r3, r6
 8016f58:	dc38      	bgt.n	8016fcc <__gethex+0x310>
 8016f5a:	9b02      	ldr	r3, [sp, #8]
 8016f5c:	68db      	ldr	r3, [r3, #12]
 8016f5e:	2b02      	cmp	r3, #2
 8016f60:	d026      	beq.n	8016fb0 <__gethex+0x2f4>
 8016f62:	2b03      	cmp	r3, #3
 8016f64:	d028      	beq.n	8016fb8 <__gethex+0x2fc>
 8016f66:	2b01      	cmp	r3, #1
 8016f68:	d119      	bne.n	8016f9e <__gethex+0x2e2>
 8016f6a:	9b01      	ldr	r3, [sp, #4]
 8016f6c:	42b3      	cmp	r3, r6
 8016f6e:	d116      	bne.n	8016f9e <__gethex+0x2e2>
 8016f70:	2b01      	cmp	r3, #1
 8016f72:	d10d      	bne.n	8016f90 <__gethex+0x2d4>
 8016f74:	9b02      	ldr	r3, [sp, #8]
 8016f76:	2662      	movs	r6, #98	; 0x62
 8016f78:	685b      	ldr	r3, [r3, #4]
 8016f7a:	9301      	str	r3, [sp, #4]
 8016f7c:	9a01      	ldr	r2, [sp, #4]
 8016f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f80:	601a      	str	r2, [r3, #0]
 8016f82:	2301      	movs	r3, #1
 8016f84:	9a04      	ldr	r2, [sp, #16]
 8016f86:	6123      	str	r3, [r4, #16]
 8016f88:	6013      	str	r3, [r2, #0]
 8016f8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016f8c:	601c      	str	r4, [r3, #0]
 8016f8e:	e72e      	b.n	8016dee <__gethex+0x132>
 8016f90:	9901      	ldr	r1, [sp, #4]
 8016f92:	0020      	movs	r0, r4
 8016f94:	3901      	subs	r1, #1
 8016f96:	f000 fe31 	bl	8017bfc <__any_on>
 8016f9a:	2800      	cmp	r0, #0
 8016f9c:	d1ea      	bne.n	8016f74 <__gethex+0x2b8>
 8016f9e:	0021      	movs	r1, r4
 8016fa0:	9805      	ldr	r0, [sp, #20]
 8016fa2:	f000 f9fd 	bl	80173a0 <_Bfree>
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016faa:	2650      	movs	r6, #80	; 0x50
 8016fac:	6013      	str	r3, [r2, #0]
 8016fae:	e71e      	b.n	8016dee <__gethex+0x132>
 8016fb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d1f3      	bne.n	8016f9e <__gethex+0x2e2>
 8016fb6:	e7dd      	b.n	8016f74 <__gethex+0x2b8>
 8016fb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d1da      	bne.n	8016f74 <__gethex+0x2b8>
 8016fbe:	e7ee      	b.n	8016f9e <__gethex+0x2e2>
 8016fc0:	0801c8b4 	.word	0x0801c8b4
 8016fc4:	0801c7e1 	.word	0x0801c7e1
 8016fc8:	0801c84d 	.word	0x0801c84d
 8016fcc:	1e77      	subs	r7, r6, #1
 8016fce:	2d00      	cmp	r5, #0
 8016fd0:	d12f      	bne.n	8017032 <__gethex+0x376>
 8016fd2:	2f00      	cmp	r7, #0
 8016fd4:	d004      	beq.n	8016fe0 <__gethex+0x324>
 8016fd6:	0039      	movs	r1, r7
 8016fd8:	0020      	movs	r0, r4
 8016fda:	f000 fe0f 	bl	8017bfc <__any_on>
 8016fde:	0005      	movs	r5, r0
 8016fe0:	231f      	movs	r3, #31
 8016fe2:	117a      	asrs	r2, r7, #5
 8016fe4:	401f      	ands	r7, r3
 8016fe6:	3b1e      	subs	r3, #30
 8016fe8:	40bb      	lsls	r3, r7
 8016fea:	9904      	ldr	r1, [sp, #16]
 8016fec:	0092      	lsls	r2, r2, #2
 8016fee:	5852      	ldr	r2, [r2, r1]
 8016ff0:	421a      	tst	r2, r3
 8016ff2:	d001      	beq.n	8016ff8 <__gethex+0x33c>
 8016ff4:	2302      	movs	r3, #2
 8016ff6:	431d      	orrs	r5, r3
 8016ff8:	9b01      	ldr	r3, [sp, #4]
 8016ffa:	0031      	movs	r1, r6
 8016ffc:	1b9b      	subs	r3, r3, r6
 8016ffe:	2602      	movs	r6, #2
 8017000:	0020      	movs	r0, r4
 8017002:	9301      	str	r3, [sp, #4]
 8017004:	f7ff fdf0 	bl	8016be8 <rshift>
 8017008:	9b02      	ldr	r3, [sp, #8]
 801700a:	685f      	ldr	r7, [r3, #4]
 801700c:	2d00      	cmp	r5, #0
 801700e:	d041      	beq.n	8017094 <__gethex+0x3d8>
 8017010:	9b02      	ldr	r3, [sp, #8]
 8017012:	68db      	ldr	r3, [r3, #12]
 8017014:	2b02      	cmp	r3, #2
 8017016:	d010      	beq.n	801703a <__gethex+0x37e>
 8017018:	2b03      	cmp	r3, #3
 801701a:	d012      	beq.n	8017042 <__gethex+0x386>
 801701c:	2b01      	cmp	r3, #1
 801701e:	d106      	bne.n	801702e <__gethex+0x372>
 8017020:	07aa      	lsls	r2, r5, #30
 8017022:	d504      	bpl.n	801702e <__gethex+0x372>
 8017024:	9a04      	ldr	r2, [sp, #16]
 8017026:	6810      	ldr	r0, [r2, #0]
 8017028:	4305      	orrs	r5, r0
 801702a:	421d      	tst	r5, r3
 801702c:	d10c      	bne.n	8017048 <__gethex+0x38c>
 801702e:	2310      	movs	r3, #16
 8017030:	e02f      	b.n	8017092 <__gethex+0x3d6>
 8017032:	2501      	movs	r5, #1
 8017034:	e7d4      	b.n	8016fe0 <__gethex+0x324>
 8017036:	2601      	movs	r6, #1
 8017038:	e7e8      	b.n	801700c <__gethex+0x350>
 801703a:	2301      	movs	r3, #1
 801703c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801703e:	1a9b      	subs	r3, r3, r2
 8017040:	9313      	str	r3, [sp, #76]	; 0x4c
 8017042:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017044:	2b00      	cmp	r3, #0
 8017046:	d0f2      	beq.n	801702e <__gethex+0x372>
 8017048:	6923      	ldr	r3, [r4, #16]
 801704a:	2000      	movs	r0, #0
 801704c:	9303      	str	r3, [sp, #12]
 801704e:	009b      	lsls	r3, r3, #2
 8017050:	9304      	str	r3, [sp, #16]
 8017052:	0023      	movs	r3, r4
 8017054:	9a04      	ldr	r2, [sp, #16]
 8017056:	3314      	adds	r3, #20
 8017058:	1899      	adds	r1, r3, r2
 801705a:	681a      	ldr	r2, [r3, #0]
 801705c:	1c55      	adds	r5, r2, #1
 801705e:	d01e      	beq.n	801709e <__gethex+0x3e2>
 8017060:	3201      	adds	r2, #1
 8017062:	601a      	str	r2, [r3, #0]
 8017064:	0023      	movs	r3, r4
 8017066:	3314      	adds	r3, #20
 8017068:	2e02      	cmp	r6, #2
 801706a:	d140      	bne.n	80170ee <__gethex+0x432>
 801706c:	9a02      	ldr	r2, [sp, #8]
 801706e:	9901      	ldr	r1, [sp, #4]
 8017070:	6812      	ldr	r2, [r2, #0]
 8017072:	3a01      	subs	r2, #1
 8017074:	428a      	cmp	r2, r1
 8017076:	d10b      	bne.n	8017090 <__gethex+0x3d4>
 8017078:	114a      	asrs	r2, r1, #5
 801707a:	211f      	movs	r1, #31
 801707c:	9801      	ldr	r0, [sp, #4]
 801707e:	0092      	lsls	r2, r2, #2
 8017080:	4001      	ands	r1, r0
 8017082:	2001      	movs	r0, #1
 8017084:	0005      	movs	r5, r0
 8017086:	408d      	lsls	r5, r1
 8017088:	58d3      	ldr	r3, [r2, r3]
 801708a:	422b      	tst	r3, r5
 801708c:	d000      	beq.n	8017090 <__gethex+0x3d4>
 801708e:	2601      	movs	r6, #1
 8017090:	2320      	movs	r3, #32
 8017092:	431e      	orrs	r6, r3
 8017094:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017096:	601c      	str	r4, [r3, #0]
 8017098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801709a:	601f      	str	r7, [r3, #0]
 801709c:	e6a7      	b.n	8016dee <__gethex+0x132>
 801709e:	c301      	stmia	r3!, {r0}
 80170a0:	4299      	cmp	r1, r3
 80170a2:	d8da      	bhi.n	801705a <__gethex+0x39e>
 80170a4:	9b03      	ldr	r3, [sp, #12]
 80170a6:	68a2      	ldr	r2, [r4, #8]
 80170a8:	4293      	cmp	r3, r2
 80170aa:	db17      	blt.n	80170dc <__gethex+0x420>
 80170ac:	6863      	ldr	r3, [r4, #4]
 80170ae:	9805      	ldr	r0, [sp, #20]
 80170b0:	1c59      	adds	r1, r3, #1
 80170b2:	f000 f94d 	bl	8017350 <_Balloc>
 80170b6:	1e05      	subs	r5, r0, #0
 80170b8:	d103      	bne.n	80170c2 <__gethex+0x406>
 80170ba:	0002      	movs	r2, r0
 80170bc:	2184      	movs	r1, #132	; 0x84
 80170be:	4b1c      	ldr	r3, [pc, #112]	; (8017130 <__gethex+0x474>)
 80170c0:	e6b8      	b.n	8016e34 <__gethex+0x178>
 80170c2:	0021      	movs	r1, r4
 80170c4:	6923      	ldr	r3, [r4, #16]
 80170c6:	310c      	adds	r1, #12
 80170c8:	1c9a      	adds	r2, r3, #2
 80170ca:	0092      	lsls	r2, r2, #2
 80170cc:	300c      	adds	r0, #12
 80170ce:	f7fc f9ff 	bl	80134d0 <memcpy>
 80170d2:	0021      	movs	r1, r4
 80170d4:	9805      	ldr	r0, [sp, #20]
 80170d6:	f000 f963 	bl	80173a0 <_Bfree>
 80170da:	002c      	movs	r4, r5
 80170dc:	6923      	ldr	r3, [r4, #16]
 80170de:	1c5a      	adds	r2, r3, #1
 80170e0:	6122      	str	r2, [r4, #16]
 80170e2:	2201      	movs	r2, #1
 80170e4:	3304      	adds	r3, #4
 80170e6:	009b      	lsls	r3, r3, #2
 80170e8:	18e3      	adds	r3, r4, r3
 80170ea:	605a      	str	r2, [r3, #4]
 80170ec:	e7ba      	b.n	8017064 <__gethex+0x3a8>
 80170ee:	6922      	ldr	r2, [r4, #16]
 80170f0:	9903      	ldr	r1, [sp, #12]
 80170f2:	428a      	cmp	r2, r1
 80170f4:	dd09      	ble.n	801710a <__gethex+0x44e>
 80170f6:	2101      	movs	r1, #1
 80170f8:	0020      	movs	r0, r4
 80170fa:	f7ff fd75 	bl	8016be8 <rshift>
 80170fe:	9b02      	ldr	r3, [sp, #8]
 8017100:	3701      	adds	r7, #1
 8017102:	689b      	ldr	r3, [r3, #8]
 8017104:	42bb      	cmp	r3, r7
 8017106:	dac2      	bge.n	801708e <__gethex+0x3d2>
 8017108:	e6dc      	b.n	8016ec4 <__gethex+0x208>
 801710a:	221f      	movs	r2, #31
 801710c:	9d01      	ldr	r5, [sp, #4]
 801710e:	9901      	ldr	r1, [sp, #4]
 8017110:	2601      	movs	r6, #1
 8017112:	4015      	ands	r5, r2
 8017114:	4211      	tst	r1, r2
 8017116:	d0bb      	beq.n	8017090 <__gethex+0x3d4>
 8017118:	9a04      	ldr	r2, [sp, #16]
 801711a:	189b      	adds	r3, r3, r2
 801711c:	3b04      	subs	r3, #4
 801711e:	6818      	ldr	r0, [r3, #0]
 8017120:	f000 f9d8 	bl	80174d4 <__hi0bits>
 8017124:	2320      	movs	r3, #32
 8017126:	1b5d      	subs	r5, r3, r5
 8017128:	42a8      	cmp	r0, r5
 801712a:	dbe4      	blt.n	80170f6 <__gethex+0x43a>
 801712c:	e7b0      	b.n	8017090 <__gethex+0x3d4>
 801712e:	46c0      	nop			; (mov r8, r8)
 8017130:	0801c7e1 	.word	0x0801c7e1

08017134 <L_shift>:
 8017134:	2308      	movs	r3, #8
 8017136:	b570      	push	{r4, r5, r6, lr}
 8017138:	2520      	movs	r5, #32
 801713a:	1a9a      	subs	r2, r3, r2
 801713c:	0092      	lsls	r2, r2, #2
 801713e:	1aad      	subs	r5, r5, r2
 8017140:	6843      	ldr	r3, [r0, #4]
 8017142:	6806      	ldr	r6, [r0, #0]
 8017144:	001c      	movs	r4, r3
 8017146:	40ac      	lsls	r4, r5
 8017148:	40d3      	lsrs	r3, r2
 801714a:	4334      	orrs	r4, r6
 801714c:	6004      	str	r4, [r0, #0]
 801714e:	6043      	str	r3, [r0, #4]
 8017150:	3004      	adds	r0, #4
 8017152:	4288      	cmp	r0, r1
 8017154:	d3f4      	bcc.n	8017140 <L_shift+0xc>
 8017156:	bd70      	pop	{r4, r5, r6, pc}

08017158 <__match>:
 8017158:	b530      	push	{r4, r5, lr}
 801715a:	6803      	ldr	r3, [r0, #0]
 801715c:	780c      	ldrb	r4, [r1, #0]
 801715e:	3301      	adds	r3, #1
 8017160:	2c00      	cmp	r4, #0
 8017162:	d102      	bne.n	801716a <__match+0x12>
 8017164:	6003      	str	r3, [r0, #0]
 8017166:	2001      	movs	r0, #1
 8017168:	bd30      	pop	{r4, r5, pc}
 801716a:	781a      	ldrb	r2, [r3, #0]
 801716c:	0015      	movs	r5, r2
 801716e:	3d41      	subs	r5, #65	; 0x41
 8017170:	2d19      	cmp	r5, #25
 8017172:	d800      	bhi.n	8017176 <__match+0x1e>
 8017174:	3220      	adds	r2, #32
 8017176:	3101      	adds	r1, #1
 8017178:	42a2      	cmp	r2, r4
 801717a:	d0ef      	beq.n	801715c <__match+0x4>
 801717c:	2000      	movs	r0, #0
 801717e:	e7f3      	b.n	8017168 <__match+0x10>

08017180 <__hexnan>:
 8017180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017182:	680b      	ldr	r3, [r1, #0]
 8017184:	b08b      	sub	sp, #44	; 0x2c
 8017186:	9201      	str	r2, [sp, #4]
 8017188:	9901      	ldr	r1, [sp, #4]
 801718a:	115a      	asrs	r2, r3, #5
 801718c:	0092      	lsls	r2, r2, #2
 801718e:	188a      	adds	r2, r1, r2
 8017190:	9202      	str	r2, [sp, #8]
 8017192:	0019      	movs	r1, r3
 8017194:	221f      	movs	r2, #31
 8017196:	4011      	ands	r1, r2
 8017198:	9008      	str	r0, [sp, #32]
 801719a:	9106      	str	r1, [sp, #24]
 801719c:	4213      	tst	r3, r2
 801719e:	d002      	beq.n	80171a6 <__hexnan+0x26>
 80171a0:	9b02      	ldr	r3, [sp, #8]
 80171a2:	3304      	adds	r3, #4
 80171a4:	9302      	str	r3, [sp, #8]
 80171a6:	9b02      	ldr	r3, [sp, #8]
 80171a8:	2500      	movs	r5, #0
 80171aa:	1f1e      	subs	r6, r3, #4
 80171ac:	0037      	movs	r7, r6
 80171ae:	0034      	movs	r4, r6
 80171b0:	9b08      	ldr	r3, [sp, #32]
 80171b2:	6035      	str	r5, [r6, #0]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	9507      	str	r5, [sp, #28]
 80171b8:	9305      	str	r3, [sp, #20]
 80171ba:	9503      	str	r5, [sp, #12]
 80171bc:	9b05      	ldr	r3, [sp, #20]
 80171be:	3301      	adds	r3, #1
 80171c0:	9309      	str	r3, [sp, #36]	; 0x24
 80171c2:	9b05      	ldr	r3, [sp, #20]
 80171c4:	785b      	ldrb	r3, [r3, #1]
 80171c6:	9304      	str	r3, [sp, #16]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d028      	beq.n	801721e <__hexnan+0x9e>
 80171cc:	9804      	ldr	r0, [sp, #16]
 80171ce:	f7ff fd5f 	bl	8016c90 <__hexdig_fun>
 80171d2:	2800      	cmp	r0, #0
 80171d4:	d154      	bne.n	8017280 <__hexnan+0x100>
 80171d6:	9b04      	ldr	r3, [sp, #16]
 80171d8:	2b20      	cmp	r3, #32
 80171da:	d819      	bhi.n	8017210 <__hexnan+0x90>
 80171dc:	9b03      	ldr	r3, [sp, #12]
 80171de:	9a07      	ldr	r2, [sp, #28]
 80171e0:	4293      	cmp	r3, r2
 80171e2:	dd12      	ble.n	801720a <__hexnan+0x8a>
 80171e4:	42bc      	cmp	r4, r7
 80171e6:	d206      	bcs.n	80171f6 <__hexnan+0x76>
 80171e8:	2d07      	cmp	r5, #7
 80171ea:	dc04      	bgt.n	80171f6 <__hexnan+0x76>
 80171ec:	002a      	movs	r2, r5
 80171ee:	0039      	movs	r1, r7
 80171f0:	0020      	movs	r0, r4
 80171f2:	f7ff ff9f 	bl	8017134 <L_shift>
 80171f6:	9b01      	ldr	r3, [sp, #4]
 80171f8:	2508      	movs	r5, #8
 80171fa:	429c      	cmp	r4, r3
 80171fc:	d905      	bls.n	801720a <__hexnan+0x8a>
 80171fe:	1f27      	subs	r7, r4, #4
 8017200:	2500      	movs	r5, #0
 8017202:	003c      	movs	r4, r7
 8017204:	9b03      	ldr	r3, [sp, #12]
 8017206:	603d      	str	r5, [r7, #0]
 8017208:	9307      	str	r3, [sp, #28]
 801720a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801720c:	9305      	str	r3, [sp, #20]
 801720e:	e7d5      	b.n	80171bc <__hexnan+0x3c>
 8017210:	9b04      	ldr	r3, [sp, #16]
 8017212:	2b29      	cmp	r3, #41	; 0x29
 8017214:	d159      	bne.n	80172ca <__hexnan+0x14a>
 8017216:	9b05      	ldr	r3, [sp, #20]
 8017218:	9a08      	ldr	r2, [sp, #32]
 801721a:	3302      	adds	r3, #2
 801721c:	6013      	str	r3, [r2, #0]
 801721e:	9b03      	ldr	r3, [sp, #12]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d052      	beq.n	80172ca <__hexnan+0x14a>
 8017224:	42bc      	cmp	r4, r7
 8017226:	d206      	bcs.n	8017236 <__hexnan+0xb6>
 8017228:	2d07      	cmp	r5, #7
 801722a:	dc04      	bgt.n	8017236 <__hexnan+0xb6>
 801722c:	002a      	movs	r2, r5
 801722e:	0039      	movs	r1, r7
 8017230:	0020      	movs	r0, r4
 8017232:	f7ff ff7f 	bl	8017134 <L_shift>
 8017236:	9b01      	ldr	r3, [sp, #4]
 8017238:	429c      	cmp	r4, r3
 801723a:	d935      	bls.n	80172a8 <__hexnan+0x128>
 801723c:	001a      	movs	r2, r3
 801723e:	0023      	movs	r3, r4
 8017240:	cb02      	ldmia	r3!, {r1}
 8017242:	c202      	stmia	r2!, {r1}
 8017244:	429e      	cmp	r6, r3
 8017246:	d2fb      	bcs.n	8017240 <__hexnan+0xc0>
 8017248:	9b02      	ldr	r3, [sp, #8]
 801724a:	1c61      	adds	r1, r4, #1
 801724c:	1eda      	subs	r2, r3, #3
 801724e:	2304      	movs	r3, #4
 8017250:	4291      	cmp	r1, r2
 8017252:	d805      	bhi.n	8017260 <__hexnan+0xe0>
 8017254:	9b02      	ldr	r3, [sp, #8]
 8017256:	3b04      	subs	r3, #4
 8017258:	1b1b      	subs	r3, r3, r4
 801725a:	089b      	lsrs	r3, r3, #2
 801725c:	3301      	adds	r3, #1
 801725e:	009b      	lsls	r3, r3, #2
 8017260:	9a01      	ldr	r2, [sp, #4]
 8017262:	18d3      	adds	r3, r2, r3
 8017264:	2200      	movs	r2, #0
 8017266:	c304      	stmia	r3!, {r2}
 8017268:	429e      	cmp	r6, r3
 801726a:	d2fc      	bcs.n	8017266 <__hexnan+0xe6>
 801726c:	6833      	ldr	r3, [r6, #0]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d104      	bne.n	801727c <__hexnan+0xfc>
 8017272:	9b01      	ldr	r3, [sp, #4]
 8017274:	429e      	cmp	r6, r3
 8017276:	d126      	bne.n	80172c6 <__hexnan+0x146>
 8017278:	2301      	movs	r3, #1
 801727a:	6033      	str	r3, [r6, #0]
 801727c:	2005      	movs	r0, #5
 801727e:	e025      	b.n	80172cc <__hexnan+0x14c>
 8017280:	9b03      	ldr	r3, [sp, #12]
 8017282:	3501      	adds	r5, #1
 8017284:	3301      	adds	r3, #1
 8017286:	9303      	str	r3, [sp, #12]
 8017288:	2d08      	cmp	r5, #8
 801728a:	dd06      	ble.n	801729a <__hexnan+0x11a>
 801728c:	9b01      	ldr	r3, [sp, #4]
 801728e:	429c      	cmp	r4, r3
 8017290:	d9bb      	bls.n	801720a <__hexnan+0x8a>
 8017292:	2300      	movs	r3, #0
 8017294:	2501      	movs	r5, #1
 8017296:	3c04      	subs	r4, #4
 8017298:	6023      	str	r3, [r4, #0]
 801729a:	220f      	movs	r2, #15
 801729c:	6823      	ldr	r3, [r4, #0]
 801729e:	4010      	ands	r0, r2
 80172a0:	011b      	lsls	r3, r3, #4
 80172a2:	4318      	orrs	r0, r3
 80172a4:	6020      	str	r0, [r4, #0]
 80172a6:	e7b0      	b.n	801720a <__hexnan+0x8a>
 80172a8:	9b06      	ldr	r3, [sp, #24]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d0de      	beq.n	801726c <__hexnan+0xec>
 80172ae:	2120      	movs	r1, #32
 80172b0:	9a06      	ldr	r2, [sp, #24]
 80172b2:	9b02      	ldr	r3, [sp, #8]
 80172b4:	1a89      	subs	r1, r1, r2
 80172b6:	2201      	movs	r2, #1
 80172b8:	4252      	negs	r2, r2
 80172ba:	40ca      	lsrs	r2, r1
 80172bc:	3b04      	subs	r3, #4
 80172be:	6819      	ldr	r1, [r3, #0]
 80172c0:	400a      	ands	r2, r1
 80172c2:	601a      	str	r2, [r3, #0]
 80172c4:	e7d2      	b.n	801726c <__hexnan+0xec>
 80172c6:	3e04      	subs	r6, #4
 80172c8:	e7d0      	b.n	801726c <__hexnan+0xec>
 80172ca:	2004      	movs	r0, #4
 80172cc:	b00b      	add	sp, #44	; 0x2c
 80172ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080172d0 <__locale_mb_cur_max>:
 80172d0:	2394      	movs	r3, #148	; 0x94
 80172d2:	4a02      	ldr	r2, [pc, #8]	; (80172dc <__locale_mb_cur_max+0xc>)
 80172d4:	005b      	lsls	r3, r3, #1
 80172d6:	5cd0      	ldrb	r0, [r2, r3]
 80172d8:	4770      	bx	lr
 80172da:	46c0      	nop			; (mov r8, r8)
 80172dc:	20000910 	.word	0x20000910

080172e0 <_localeconv_r>:
 80172e0:	4800      	ldr	r0, [pc, #0]	; (80172e4 <_localeconv_r+0x4>)
 80172e2:	4770      	bx	lr
 80172e4:	20000a00 	.word	0x20000a00

080172e8 <__retarget_lock_init_recursive>:
 80172e8:	4770      	bx	lr

080172ea <__retarget_lock_close_recursive>:
 80172ea:	4770      	bx	lr

080172ec <__retarget_lock_acquire_recursive>:
 80172ec:	4770      	bx	lr

080172ee <__retarget_lock_release_recursive>:
 80172ee:	4770      	bx	lr

080172f0 <__ascii_mbtowc>:
 80172f0:	b082      	sub	sp, #8
 80172f2:	2900      	cmp	r1, #0
 80172f4:	d100      	bne.n	80172f8 <__ascii_mbtowc+0x8>
 80172f6:	a901      	add	r1, sp, #4
 80172f8:	1e10      	subs	r0, r2, #0
 80172fa:	d006      	beq.n	801730a <__ascii_mbtowc+0x1a>
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d006      	beq.n	801730e <__ascii_mbtowc+0x1e>
 8017300:	7813      	ldrb	r3, [r2, #0]
 8017302:	600b      	str	r3, [r1, #0]
 8017304:	7810      	ldrb	r0, [r2, #0]
 8017306:	1e43      	subs	r3, r0, #1
 8017308:	4198      	sbcs	r0, r3
 801730a:	b002      	add	sp, #8
 801730c:	4770      	bx	lr
 801730e:	2002      	movs	r0, #2
 8017310:	4240      	negs	r0, r0
 8017312:	e7fa      	b.n	801730a <__ascii_mbtowc+0x1a>

08017314 <memchr>:
 8017314:	b2c9      	uxtb	r1, r1
 8017316:	1882      	adds	r2, r0, r2
 8017318:	4290      	cmp	r0, r2
 801731a:	d101      	bne.n	8017320 <memchr+0xc>
 801731c:	2000      	movs	r0, #0
 801731e:	4770      	bx	lr
 8017320:	7803      	ldrb	r3, [r0, #0]
 8017322:	428b      	cmp	r3, r1
 8017324:	d0fb      	beq.n	801731e <memchr+0xa>
 8017326:	3001      	adds	r0, #1
 8017328:	e7f6      	b.n	8017318 <memchr+0x4>

0801732a <memmove>:
 801732a:	b510      	push	{r4, lr}
 801732c:	4288      	cmp	r0, r1
 801732e:	d902      	bls.n	8017336 <memmove+0xc>
 8017330:	188b      	adds	r3, r1, r2
 8017332:	4298      	cmp	r0, r3
 8017334:	d303      	bcc.n	801733e <memmove+0x14>
 8017336:	2300      	movs	r3, #0
 8017338:	e007      	b.n	801734a <memmove+0x20>
 801733a:	5c8b      	ldrb	r3, [r1, r2]
 801733c:	5483      	strb	r3, [r0, r2]
 801733e:	3a01      	subs	r2, #1
 8017340:	d2fb      	bcs.n	801733a <memmove+0x10>
 8017342:	bd10      	pop	{r4, pc}
 8017344:	5ccc      	ldrb	r4, [r1, r3]
 8017346:	54c4      	strb	r4, [r0, r3]
 8017348:	3301      	adds	r3, #1
 801734a:	429a      	cmp	r2, r3
 801734c:	d1fa      	bne.n	8017344 <memmove+0x1a>
 801734e:	e7f8      	b.n	8017342 <memmove+0x18>

08017350 <_Balloc>:
 8017350:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017352:	b570      	push	{r4, r5, r6, lr}
 8017354:	0006      	movs	r6, r0
 8017356:	000c      	movs	r4, r1
 8017358:	2b00      	cmp	r3, #0
 801735a:	d012      	beq.n	8017382 <_Balloc+0x32>
 801735c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 801735e:	00a3      	lsls	r3, r4, #2
 8017360:	18d3      	adds	r3, r2, r3
 8017362:	6818      	ldr	r0, [r3, #0]
 8017364:	2800      	cmp	r0, #0
 8017366:	d115      	bne.n	8017394 <_Balloc+0x44>
 8017368:	2101      	movs	r1, #1
 801736a:	000d      	movs	r5, r1
 801736c:	40a5      	lsls	r5, r4
 801736e:	1d6a      	adds	r2, r5, #5
 8017370:	0030      	movs	r0, r6
 8017372:	0092      	lsls	r2, r2, #2
 8017374:	f000 fd8c 	bl	8017e90 <_calloc_r>
 8017378:	2800      	cmp	r0, #0
 801737a:	d009      	beq.n	8017390 <_Balloc+0x40>
 801737c:	6044      	str	r4, [r0, #4]
 801737e:	6085      	str	r5, [r0, #8]
 8017380:	e00a      	b.n	8017398 <_Balloc+0x48>
 8017382:	2221      	movs	r2, #33	; 0x21
 8017384:	2104      	movs	r1, #4
 8017386:	f000 fd83 	bl	8017e90 <_calloc_r>
 801738a:	64f0      	str	r0, [r6, #76]	; 0x4c
 801738c:	2800      	cmp	r0, #0
 801738e:	d1e5      	bne.n	801735c <_Balloc+0xc>
 8017390:	2000      	movs	r0, #0
 8017392:	bd70      	pop	{r4, r5, r6, pc}
 8017394:	6802      	ldr	r2, [r0, #0]
 8017396:	601a      	str	r2, [r3, #0]
 8017398:	2300      	movs	r3, #0
 801739a:	6103      	str	r3, [r0, #16]
 801739c:	60c3      	str	r3, [r0, #12]
 801739e:	e7f8      	b.n	8017392 <_Balloc+0x42>

080173a0 <_Bfree>:
 80173a0:	2900      	cmp	r1, #0
 80173a2:	d006      	beq.n	80173b2 <_Bfree+0x12>
 80173a4:	684b      	ldr	r3, [r1, #4]
 80173a6:	009a      	lsls	r2, r3, #2
 80173a8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80173aa:	189b      	adds	r3, r3, r2
 80173ac:	681a      	ldr	r2, [r3, #0]
 80173ae:	600a      	str	r2, [r1, #0]
 80173b0:	6019      	str	r1, [r3, #0]
 80173b2:	4770      	bx	lr

080173b4 <__multadd>:
 80173b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80173b6:	000e      	movs	r6, r1
 80173b8:	9001      	str	r0, [sp, #4]
 80173ba:	000c      	movs	r4, r1
 80173bc:	001d      	movs	r5, r3
 80173be:	2000      	movs	r0, #0
 80173c0:	690f      	ldr	r7, [r1, #16]
 80173c2:	3614      	adds	r6, #20
 80173c4:	6833      	ldr	r3, [r6, #0]
 80173c6:	3001      	adds	r0, #1
 80173c8:	b299      	uxth	r1, r3
 80173ca:	4351      	muls	r1, r2
 80173cc:	0c1b      	lsrs	r3, r3, #16
 80173ce:	4353      	muls	r3, r2
 80173d0:	1949      	adds	r1, r1, r5
 80173d2:	0c0d      	lsrs	r5, r1, #16
 80173d4:	195b      	adds	r3, r3, r5
 80173d6:	0c1d      	lsrs	r5, r3, #16
 80173d8:	b289      	uxth	r1, r1
 80173da:	041b      	lsls	r3, r3, #16
 80173dc:	185b      	adds	r3, r3, r1
 80173de:	c608      	stmia	r6!, {r3}
 80173e0:	4287      	cmp	r7, r0
 80173e2:	dcef      	bgt.n	80173c4 <__multadd+0x10>
 80173e4:	2d00      	cmp	r5, #0
 80173e6:	d022      	beq.n	801742e <__multadd+0x7a>
 80173e8:	68a3      	ldr	r3, [r4, #8]
 80173ea:	42bb      	cmp	r3, r7
 80173ec:	dc19      	bgt.n	8017422 <__multadd+0x6e>
 80173ee:	6863      	ldr	r3, [r4, #4]
 80173f0:	9801      	ldr	r0, [sp, #4]
 80173f2:	1c59      	adds	r1, r3, #1
 80173f4:	f7ff ffac 	bl	8017350 <_Balloc>
 80173f8:	1e06      	subs	r6, r0, #0
 80173fa:	d105      	bne.n	8017408 <__multadd+0x54>
 80173fc:	0002      	movs	r2, r0
 80173fe:	21b5      	movs	r1, #181	; 0xb5
 8017400:	4b0c      	ldr	r3, [pc, #48]	; (8017434 <__multadd+0x80>)
 8017402:	480d      	ldr	r0, [pc, #52]	; (8017438 <__multadd+0x84>)
 8017404:	f000 fd26 	bl	8017e54 <__assert_func>
 8017408:	0021      	movs	r1, r4
 801740a:	6923      	ldr	r3, [r4, #16]
 801740c:	310c      	adds	r1, #12
 801740e:	1c9a      	adds	r2, r3, #2
 8017410:	0092      	lsls	r2, r2, #2
 8017412:	300c      	adds	r0, #12
 8017414:	f7fc f85c 	bl	80134d0 <memcpy>
 8017418:	0021      	movs	r1, r4
 801741a:	9801      	ldr	r0, [sp, #4]
 801741c:	f7ff ffc0 	bl	80173a0 <_Bfree>
 8017420:	0034      	movs	r4, r6
 8017422:	1d3b      	adds	r3, r7, #4
 8017424:	009b      	lsls	r3, r3, #2
 8017426:	18e3      	adds	r3, r4, r3
 8017428:	605d      	str	r5, [r3, #4]
 801742a:	1c7b      	adds	r3, r7, #1
 801742c:	6123      	str	r3, [r4, #16]
 801742e:	0020      	movs	r0, r4
 8017430:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017432:	46c0      	nop			; (mov r8, r8)
 8017434:	0801c7e1 	.word	0x0801c7e1
 8017438:	0801c8c8 	.word	0x0801c8c8

0801743c <__s2b>:
 801743c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801743e:	0006      	movs	r6, r0
 8017440:	0018      	movs	r0, r3
 8017442:	000c      	movs	r4, r1
 8017444:	3008      	adds	r0, #8
 8017446:	2109      	movs	r1, #9
 8017448:	9301      	str	r3, [sp, #4]
 801744a:	0015      	movs	r5, r2
 801744c:	f7e8 ff0a 	bl	8000264 <__divsi3>
 8017450:	2301      	movs	r3, #1
 8017452:	2100      	movs	r1, #0
 8017454:	4283      	cmp	r3, r0
 8017456:	db0a      	blt.n	801746e <__s2b+0x32>
 8017458:	0030      	movs	r0, r6
 801745a:	f7ff ff79 	bl	8017350 <_Balloc>
 801745e:	1e01      	subs	r1, r0, #0
 8017460:	d108      	bne.n	8017474 <__s2b+0x38>
 8017462:	0002      	movs	r2, r0
 8017464:	4b19      	ldr	r3, [pc, #100]	; (80174cc <__s2b+0x90>)
 8017466:	481a      	ldr	r0, [pc, #104]	; (80174d0 <__s2b+0x94>)
 8017468:	31ce      	adds	r1, #206	; 0xce
 801746a:	f000 fcf3 	bl	8017e54 <__assert_func>
 801746e:	005b      	lsls	r3, r3, #1
 8017470:	3101      	adds	r1, #1
 8017472:	e7ef      	b.n	8017454 <__s2b+0x18>
 8017474:	9b08      	ldr	r3, [sp, #32]
 8017476:	6143      	str	r3, [r0, #20]
 8017478:	2301      	movs	r3, #1
 801747a:	6103      	str	r3, [r0, #16]
 801747c:	2d09      	cmp	r5, #9
 801747e:	dd18      	ble.n	80174b2 <__s2b+0x76>
 8017480:	0023      	movs	r3, r4
 8017482:	3309      	adds	r3, #9
 8017484:	001f      	movs	r7, r3
 8017486:	9300      	str	r3, [sp, #0]
 8017488:	1964      	adds	r4, r4, r5
 801748a:	783b      	ldrb	r3, [r7, #0]
 801748c:	220a      	movs	r2, #10
 801748e:	0030      	movs	r0, r6
 8017490:	3b30      	subs	r3, #48	; 0x30
 8017492:	f7ff ff8f 	bl	80173b4 <__multadd>
 8017496:	3701      	adds	r7, #1
 8017498:	0001      	movs	r1, r0
 801749a:	42a7      	cmp	r7, r4
 801749c:	d1f5      	bne.n	801748a <__s2b+0x4e>
 801749e:	002c      	movs	r4, r5
 80174a0:	9b00      	ldr	r3, [sp, #0]
 80174a2:	3c08      	subs	r4, #8
 80174a4:	191c      	adds	r4, r3, r4
 80174a6:	002f      	movs	r7, r5
 80174a8:	9b01      	ldr	r3, [sp, #4]
 80174aa:	429f      	cmp	r7, r3
 80174ac:	db04      	blt.n	80174b8 <__s2b+0x7c>
 80174ae:	0008      	movs	r0, r1
 80174b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80174b2:	2509      	movs	r5, #9
 80174b4:	340a      	adds	r4, #10
 80174b6:	e7f6      	b.n	80174a6 <__s2b+0x6a>
 80174b8:	1b63      	subs	r3, r4, r5
 80174ba:	5ddb      	ldrb	r3, [r3, r7]
 80174bc:	220a      	movs	r2, #10
 80174be:	0030      	movs	r0, r6
 80174c0:	3b30      	subs	r3, #48	; 0x30
 80174c2:	f7ff ff77 	bl	80173b4 <__multadd>
 80174c6:	3701      	adds	r7, #1
 80174c8:	0001      	movs	r1, r0
 80174ca:	e7ed      	b.n	80174a8 <__s2b+0x6c>
 80174cc:	0801c7e1 	.word	0x0801c7e1
 80174d0:	0801c8c8 	.word	0x0801c8c8

080174d4 <__hi0bits>:
 80174d4:	0003      	movs	r3, r0
 80174d6:	0c02      	lsrs	r2, r0, #16
 80174d8:	2000      	movs	r0, #0
 80174da:	4282      	cmp	r2, r0
 80174dc:	d101      	bne.n	80174e2 <__hi0bits+0xe>
 80174de:	041b      	lsls	r3, r3, #16
 80174e0:	3010      	adds	r0, #16
 80174e2:	0e1a      	lsrs	r2, r3, #24
 80174e4:	d101      	bne.n	80174ea <__hi0bits+0x16>
 80174e6:	3008      	adds	r0, #8
 80174e8:	021b      	lsls	r3, r3, #8
 80174ea:	0f1a      	lsrs	r2, r3, #28
 80174ec:	d101      	bne.n	80174f2 <__hi0bits+0x1e>
 80174ee:	3004      	adds	r0, #4
 80174f0:	011b      	lsls	r3, r3, #4
 80174f2:	0f9a      	lsrs	r2, r3, #30
 80174f4:	d101      	bne.n	80174fa <__hi0bits+0x26>
 80174f6:	3002      	adds	r0, #2
 80174f8:	009b      	lsls	r3, r3, #2
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	db03      	blt.n	8017506 <__hi0bits+0x32>
 80174fe:	3001      	adds	r0, #1
 8017500:	005b      	lsls	r3, r3, #1
 8017502:	d400      	bmi.n	8017506 <__hi0bits+0x32>
 8017504:	2020      	movs	r0, #32
 8017506:	4770      	bx	lr

08017508 <__lo0bits>:
 8017508:	6803      	ldr	r3, [r0, #0]
 801750a:	0002      	movs	r2, r0
 801750c:	2107      	movs	r1, #7
 801750e:	0018      	movs	r0, r3
 8017510:	4008      	ands	r0, r1
 8017512:	420b      	tst	r3, r1
 8017514:	d00d      	beq.n	8017532 <__lo0bits+0x2a>
 8017516:	3906      	subs	r1, #6
 8017518:	2000      	movs	r0, #0
 801751a:	420b      	tst	r3, r1
 801751c:	d105      	bne.n	801752a <__lo0bits+0x22>
 801751e:	3002      	adds	r0, #2
 8017520:	4203      	tst	r3, r0
 8017522:	d003      	beq.n	801752c <__lo0bits+0x24>
 8017524:	40cb      	lsrs	r3, r1
 8017526:	0008      	movs	r0, r1
 8017528:	6013      	str	r3, [r2, #0]
 801752a:	4770      	bx	lr
 801752c:	089b      	lsrs	r3, r3, #2
 801752e:	6013      	str	r3, [r2, #0]
 8017530:	e7fb      	b.n	801752a <__lo0bits+0x22>
 8017532:	b299      	uxth	r1, r3
 8017534:	2900      	cmp	r1, #0
 8017536:	d101      	bne.n	801753c <__lo0bits+0x34>
 8017538:	2010      	movs	r0, #16
 801753a:	0c1b      	lsrs	r3, r3, #16
 801753c:	b2d9      	uxtb	r1, r3
 801753e:	2900      	cmp	r1, #0
 8017540:	d101      	bne.n	8017546 <__lo0bits+0x3e>
 8017542:	3008      	adds	r0, #8
 8017544:	0a1b      	lsrs	r3, r3, #8
 8017546:	0719      	lsls	r1, r3, #28
 8017548:	d101      	bne.n	801754e <__lo0bits+0x46>
 801754a:	3004      	adds	r0, #4
 801754c:	091b      	lsrs	r3, r3, #4
 801754e:	0799      	lsls	r1, r3, #30
 8017550:	d101      	bne.n	8017556 <__lo0bits+0x4e>
 8017552:	3002      	adds	r0, #2
 8017554:	089b      	lsrs	r3, r3, #2
 8017556:	07d9      	lsls	r1, r3, #31
 8017558:	d4e9      	bmi.n	801752e <__lo0bits+0x26>
 801755a:	3001      	adds	r0, #1
 801755c:	085b      	lsrs	r3, r3, #1
 801755e:	d1e6      	bne.n	801752e <__lo0bits+0x26>
 8017560:	2020      	movs	r0, #32
 8017562:	e7e2      	b.n	801752a <__lo0bits+0x22>

08017564 <__i2b>:
 8017564:	b510      	push	{r4, lr}
 8017566:	000c      	movs	r4, r1
 8017568:	2101      	movs	r1, #1
 801756a:	f7ff fef1 	bl	8017350 <_Balloc>
 801756e:	2800      	cmp	r0, #0
 8017570:	d106      	bne.n	8017580 <__i2b+0x1c>
 8017572:	21a0      	movs	r1, #160	; 0xa0
 8017574:	0002      	movs	r2, r0
 8017576:	4b04      	ldr	r3, [pc, #16]	; (8017588 <__i2b+0x24>)
 8017578:	4804      	ldr	r0, [pc, #16]	; (801758c <__i2b+0x28>)
 801757a:	0049      	lsls	r1, r1, #1
 801757c:	f000 fc6a 	bl	8017e54 <__assert_func>
 8017580:	2301      	movs	r3, #1
 8017582:	6144      	str	r4, [r0, #20]
 8017584:	6103      	str	r3, [r0, #16]
 8017586:	bd10      	pop	{r4, pc}
 8017588:	0801c7e1 	.word	0x0801c7e1
 801758c:	0801c8c8 	.word	0x0801c8c8

08017590 <__multiply>:
 8017590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017592:	690b      	ldr	r3, [r1, #16]
 8017594:	0014      	movs	r4, r2
 8017596:	6912      	ldr	r2, [r2, #16]
 8017598:	000d      	movs	r5, r1
 801759a:	b089      	sub	sp, #36	; 0x24
 801759c:	4293      	cmp	r3, r2
 801759e:	da01      	bge.n	80175a4 <__multiply+0x14>
 80175a0:	0025      	movs	r5, r4
 80175a2:	000c      	movs	r4, r1
 80175a4:	692f      	ldr	r7, [r5, #16]
 80175a6:	6926      	ldr	r6, [r4, #16]
 80175a8:	6869      	ldr	r1, [r5, #4]
 80175aa:	19bb      	adds	r3, r7, r6
 80175ac:	9302      	str	r3, [sp, #8]
 80175ae:	68ab      	ldr	r3, [r5, #8]
 80175b0:	19ba      	adds	r2, r7, r6
 80175b2:	4293      	cmp	r3, r2
 80175b4:	da00      	bge.n	80175b8 <__multiply+0x28>
 80175b6:	3101      	adds	r1, #1
 80175b8:	f7ff feca 	bl	8017350 <_Balloc>
 80175bc:	9001      	str	r0, [sp, #4]
 80175be:	2800      	cmp	r0, #0
 80175c0:	d106      	bne.n	80175d0 <__multiply+0x40>
 80175c2:	215e      	movs	r1, #94	; 0x5e
 80175c4:	0002      	movs	r2, r0
 80175c6:	4b48      	ldr	r3, [pc, #288]	; (80176e8 <__multiply+0x158>)
 80175c8:	4848      	ldr	r0, [pc, #288]	; (80176ec <__multiply+0x15c>)
 80175ca:	31ff      	adds	r1, #255	; 0xff
 80175cc:	f000 fc42 	bl	8017e54 <__assert_func>
 80175d0:	9b01      	ldr	r3, [sp, #4]
 80175d2:	2200      	movs	r2, #0
 80175d4:	3314      	adds	r3, #20
 80175d6:	469c      	mov	ip, r3
 80175d8:	19bb      	adds	r3, r7, r6
 80175da:	009b      	lsls	r3, r3, #2
 80175dc:	4463      	add	r3, ip
 80175de:	9303      	str	r3, [sp, #12]
 80175e0:	4663      	mov	r3, ip
 80175e2:	9903      	ldr	r1, [sp, #12]
 80175e4:	428b      	cmp	r3, r1
 80175e6:	d32c      	bcc.n	8017642 <__multiply+0xb2>
 80175e8:	002b      	movs	r3, r5
 80175ea:	0022      	movs	r2, r4
 80175ec:	3314      	adds	r3, #20
 80175ee:	00bf      	lsls	r7, r7, #2
 80175f0:	3214      	adds	r2, #20
 80175f2:	9306      	str	r3, [sp, #24]
 80175f4:	00b6      	lsls	r6, r6, #2
 80175f6:	19db      	adds	r3, r3, r7
 80175f8:	9304      	str	r3, [sp, #16]
 80175fa:	1993      	adds	r3, r2, r6
 80175fc:	9307      	str	r3, [sp, #28]
 80175fe:	2304      	movs	r3, #4
 8017600:	9305      	str	r3, [sp, #20]
 8017602:	002b      	movs	r3, r5
 8017604:	9904      	ldr	r1, [sp, #16]
 8017606:	3315      	adds	r3, #21
 8017608:	9200      	str	r2, [sp, #0]
 801760a:	4299      	cmp	r1, r3
 801760c:	d305      	bcc.n	801761a <__multiply+0x8a>
 801760e:	1b4b      	subs	r3, r1, r5
 8017610:	3b15      	subs	r3, #21
 8017612:	089b      	lsrs	r3, r3, #2
 8017614:	3301      	adds	r3, #1
 8017616:	009b      	lsls	r3, r3, #2
 8017618:	9305      	str	r3, [sp, #20]
 801761a:	9b07      	ldr	r3, [sp, #28]
 801761c:	9a00      	ldr	r2, [sp, #0]
 801761e:	429a      	cmp	r2, r3
 8017620:	d311      	bcc.n	8017646 <__multiply+0xb6>
 8017622:	9b02      	ldr	r3, [sp, #8]
 8017624:	2b00      	cmp	r3, #0
 8017626:	dd06      	ble.n	8017636 <__multiply+0xa6>
 8017628:	9b03      	ldr	r3, [sp, #12]
 801762a:	3b04      	subs	r3, #4
 801762c:	9303      	str	r3, [sp, #12]
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	9300      	str	r3, [sp, #0]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d053      	beq.n	80176de <__multiply+0x14e>
 8017636:	9b01      	ldr	r3, [sp, #4]
 8017638:	9a02      	ldr	r2, [sp, #8]
 801763a:	0018      	movs	r0, r3
 801763c:	611a      	str	r2, [r3, #16]
 801763e:	b009      	add	sp, #36	; 0x24
 8017640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017642:	c304      	stmia	r3!, {r2}
 8017644:	e7cd      	b.n	80175e2 <__multiply+0x52>
 8017646:	9b00      	ldr	r3, [sp, #0]
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	b298      	uxth	r0, r3
 801764c:	2800      	cmp	r0, #0
 801764e:	d01b      	beq.n	8017688 <__multiply+0xf8>
 8017650:	4667      	mov	r7, ip
 8017652:	2400      	movs	r4, #0
 8017654:	9e06      	ldr	r6, [sp, #24]
 8017656:	ce02      	ldmia	r6!, {r1}
 8017658:	683a      	ldr	r2, [r7, #0]
 801765a:	b28b      	uxth	r3, r1
 801765c:	4343      	muls	r3, r0
 801765e:	b292      	uxth	r2, r2
 8017660:	189b      	adds	r3, r3, r2
 8017662:	191b      	adds	r3, r3, r4
 8017664:	0c0c      	lsrs	r4, r1, #16
 8017666:	4344      	muls	r4, r0
 8017668:	683a      	ldr	r2, [r7, #0]
 801766a:	0c11      	lsrs	r1, r2, #16
 801766c:	1861      	adds	r1, r4, r1
 801766e:	0c1c      	lsrs	r4, r3, #16
 8017670:	1909      	adds	r1, r1, r4
 8017672:	0c0c      	lsrs	r4, r1, #16
 8017674:	b29b      	uxth	r3, r3
 8017676:	0409      	lsls	r1, r1, #16
 8017678:	430b      	orrs	r3, r1
 801767a:	c708      	stmia	r7!, {r3}
 801767c:	9b04      	ldr	r3, [sp, #16]
 801767e:	42b3      	cmp	r3, r6
 8017680:	d8e9      	bhi.n	8017656 <__multiply+0xc6>
 8017682:	4663      	mov	r3, ip
 8017684:	9a05      	ldr	r2, [sp, #20]
 8017686:	509c      	str	r4, [r3, r2]
 8017688:	9b00      	ldr	r3, [sp, #0]
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	0c1e      	lsrs	r6, r3, #16
 801768e:	d020      	beq.n	80176d2 <__multiply+0x142>
 8017690:	4663      	mov	r3, ip
 8017692:	002c      	movs	r4, r5
 8017694:	4660      	mov	r0, ip
 8017696:	2700      	movs	r7, #0
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	3414      	adds	r4, #20
 801769c:	6822      	ldr	r2, [r4, #0]
 801769e:	b29b      	uxth	r3, r3
 80176a0:	b291      	uxth	r1, r2
 80176a2:	4371      	muls	r1, r6
 80176a4:	6802      	ldr	r2, [r0, #0]
 80176a6:	0c12      	lsrs	r2, r2, #16
 80176a8:	1889      	adds	r1, r1, r2
 80176aa:	19cf      	adds	r7, r1, r7
 80176ac:	0439      	lsls	r1, r7, #16
 80176ae:	430b      	orrs	r3, r1
 80176b0:	6003      	str	r3, [r0, #0]
 80176b2:	cc02      	ldmia	r4!, {r1}
 80176b4:	6843      	ldr	r3, [r0, #4]
 80176b6:	0c09      	lsrs	r1, r1, #16
 80176b8:	4371      	muls	r1, r6
 80176ba:	b29b      	uxth	r3, r3
 80176bc:	0c3f      	lsrs	r7, r7, #16
 80176be:	18cb      	adds	r3, r1, r3
 80176c0:	9a04      	ldr	r2, [sp, #16]
 80176c2:	19db      	adds	r3, r3, r7
 80176c4:	0c1f      	lsrs	r7, r3, #16
 80176c6:	3004      	adds	r0, #4
 80176c8:	42a2      	cmp	r2, r4
 80176ca:	d8e7      	bhi.n	801769c <__multiply+0x10c>
 80176cc:	4662      	mov	r2, ip
 80176ce:	9905      	ldr	r1, [sp, #20]
 80176d0:	5053      	str	r3, [r2, r1]
 80176d2:	9b00      	ldr	r3, [sp, #0]
 80176d4:	3304      	adds	r3, #4
 80176d6:	9300      	str	r3, [sp, #0]
 80176d8:	2304      	movs	r3, #4
 80176da:	449c      	add	ip, r3
 80176dc:	e79d      	b.n	801761a <__multiply+0x8a>
 80176de:	9b02      	ldr	r3, [sp, #8]
 80176e0:	3b01      	subs	r3, #1
 80176e2:	9302      	str	r3, [sp, #8]
 80176e4:	e79d      	b.n	8017622 <__multiply+0x92>
 80176e6:	46c0      	nop			; (mov r8, r8)
 80176e8:	0801c7e1 	.word	0x0801c7e1
 80176ec:	0801c8c8 	.word	0x0801c8c8

080176f0 <__pow5mult>:
 80176f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176f2:	2303      	movs	r3, #3
 80176f4:	0015      	movs	r5, r2
 80176f6:	0007      	movs	r7, r0
 80176f8:	000e      	movs	r6, r1
 80176fa:	401a      	ands	r2, r3
 80176fc:	421d      	tst	r5, r3
 80176fe:	d008      	beq.n	8017712 <__pow5mult+0x22>
 8017700:	491a      	ldr	r1, [pc, #104]	; (801776c <__pow5mult+0x7c>)
 8017702:	3a01      	subs	r2, #1
 8017704:	0092      	lsls	r2, r2, #2
 8017706:	5852      	ldr	r2, [r2, r1]
 8017708:	2300      	movs	r3, #0
 801770a:	0031      	movs	r1, r6
 801770c:	f7ff fe52 	bl	80173b4 <__multadd>
 8017710:	0006      	movs	r6, r0
 8017712:	10ad      	asrs	r5, r5, #2
 8017714:	d027      	beq.n	8017766 <__pow5mult+0x76>
 8017716:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8017718:	2c00      	cmp	r4, #0
 801771a:	d107      	bne.n	801772c <__pow5mult+0x3c>
 801771c:	0038      	movs	r0, r7
 801771e:	4914      	ldr	r1, [pc, #80]	; (8017770 <__pow5mult+0x80>)
 8017720:	f7ff ff20 	bl	8017564 <__i2b>
 8017724:	2300      	movs	r3, #0
 8017726:	0004      	movs	r4, r0
 8017728:	64b8      	str	r0, [r7, #72]	; 0x48
 801772a:	6003      	str	r3, [r0, #0]
 801772c:	2301      	movs	r3, #1
 801772e:	421d      	tst	r5, r3
 8017730:	d00a      	beq.n	8017748 <__pow5mult+0x58>
 8017732:	0031      	movs	r1, r6
 8017734:	0022      	movs	r2, r4
 8017736:	0038      	movs	r0, r7
 8017738:	f7ff ff2a 	bl	8017590 <__multiply>
 801773c:	0031      	movs	r1, r6
 801773e:	9001      	str	r0, [sp, #4]
 8017740:	0038      	movs	r0, r7
 8017742:	f7ff fe2d 	bl	80173a0 <_Bfree>
 8017746:	9e01      	ldr	r6, [sp, #4]
 8017748:	106d      	asrs	r5, r5, #1
 801774a:	d00c      	beq.n	8017766 <__pow5mult+0x76>
 801774c:	6820      	ldr	r0, [r4, #0]
 801774e:	2800      	cmp	r0, #0
 8017750:	d107      	bne.n	8017762 <__pow5mult+0x72>
 8017752:	0022      	movs	r2, r4
 8017754:	0021      	movs	r1, r4
 8017756:	0038      	movs	r0, r7
 8017758:	f7ff ff1a 	bl	8017590 <__multiply>
 801775c:	2300      	movs	r3, #0
 801775e:	6020      	str	r0, [r4, #0]
 8017760:	6003      	str	r3, [r0, #0]
 8017762:	0004      	movs	r4, r0
 8017764:	e7e2      	b.n	801772c <__pow5mult+0x3c>
 8017766:	0030      	movs	r0, r6
 8017768:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801776a:	46c0      	nop			; (mov r8, r8)
 801776c:	0801ca18 	.word	0x0801ca18
 8017770:	00000271 	.word	0x00000271

08017774 <__lshift>:
 8017774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017776:	000c      	movs	r4, r1
 8017778:	0017      	movs	r7, r2
 801777a:	6923      	ldr	r3, [r4, #16]
 801777c:	1155      	asrs	r5, r2, #5
 801777e:	b087      	sub	sp, #28
 8017780:	18eb      	adds	r3, r5, r3
 8017782:	9302      	str	r3, [sp, #8]
 8017784:	3301      	adds	r3, #1
 8017786:	9301      	str	r3, [sp, #4]
 8017788:	6849      	ldr	r1, [r1, #4]
 801778a:	68a3      	ldr	r3, [r4, #8]
 801778c:	9004      	str	r0, [sp, #16]
 801778e:	9a01      	ldr	r2, [sp, #4]
 8017790:	4293      	cmp	r3, r2
 8017792:	db10      	blt.n	80177b6 <__lshift+0x42>
 8017794:	9804      	ldr	r0, [sp, #16]
 8017796:	f7ff fddb 	bl	8017350 <_Balloc>
 801779a:	2300      	movs	r3, #0
 801779c:	0002      	movs	r2, r0
 801779e:	0006      	movs	r6, r0
 80177a0:	0019      	movs	r1, r3
 80177a2:	3214      	adds	r2, #20
 80177a4:	4298      	cmp	r0, r3
 80177a6:	d10c      	bne.n	80177c2 <__lshift+0x4e>
 80177a8:	21da      	movs	r1, #218	; 0xda
 80177aa:	0002      	movs	r2, r0
 80177ac:	4b26      	ldr	r3, [pc, #152]	; (8017848 <__lshift+0xd4>)
 80177ae:	4827      	ldr	r0, [pc, #156]	; (801784c <__lshift+0xd8>)
 80177b0:	31ff      	adds	r1, #255	; 0xff
 80177b2:	f000 fb4f 	bl	8017e54 <__assert_func>
 80177b6:	3101      	adds	r1, #1
 80177b8:	005b      	lsls	r3, r3, #1
 80177ba:	e7e8      	b.n	801778e <__lshift+0x1a>
 80177bc:	0098      	lsls	r0, r3, #2
 80177be:	5011      	str	r1, [r2, r0]
 80177c0:	3301      	adds	r3, #1
 80177c2:	42ab      	cmp	r3, r5
 80177c4:	dbfa      	blt.n	80177bc <__lshift+0x48>
 80177c6:	43eb      	mvns	r3, r5
 80177c8:	17db      	asrs	r3, r3, #31
 80177ca:	401d      	ands	r5, r3
 80177cc:	211f      	movs	r1, #31
 80177ce:	0023      	movs	r3, r4
 80177d0:	0038      	movs	r0, r7
 80177d2:	00ad      	lsls	r5, r5, #2
 80177d4:	1955      	adds	r5, r2, r5
 80177d6:	6922      	ldr	r2, [r4, #16]
 80177d8:	3314      	adds	r3, #20
 80177da:	0092      	lsls	r2, r2, #2
 80177dc:	4008      	ands	r0, r1
 80177de:	4684      	mov	ip, r0
 80177e0:	189a      	adds	r2, r3, r2
 80177e2:	420f      	tst	r7, r1
 80177e4:	d02a      	beq.n	801783c <__lshift+0xc8>
 80177e6:	3101      	adds	r1, #1
 80177e8:	1a09      	subs	r1, r1, r0
 80177ea:	9105      	str	r1, [sp, #20]
 80177ec:	2100      	movs	r1, #0
 80177ee:	9503      	str	r5, [sp, #12]
 80177f0:	4667      	mov	r7, ip
 80177f2:	6818      	ldr	r0, [r3, #0]
 80177f4:	40b8      	lsls	r0, r7
 80177f6:	4301      	orrs	r1, r0
 80177f8:	9803      	ldr	r0, [sp, #12]
 80177fa:	c002      	stmia	r0!, {r1}
 80177fc:	cb02      	ldmia	r3!, {r1}
 80177fe:	9003      	str	r0, [sp, #12]
 8017800:	9805      	ldr	r0, [sp, #20]
 8017802:	40c1      	lsrs	r1, r0
 8017804:	429a      	cmp	r2, r3
 8017806:	d8f3      	bhi.n	80177f0 <__lshift+0x7c>
 8017808:	0020      	movs	r0, r4
 801780a:	3015      	adds	r0, #21
 801780c:	2304      	movs	r3, #4
 801780e:	4282      	cmp	r2, r0
 8017810:	d304      	bcc.n	801781c <__lshift+0xa8>
 8017812:	1b13      	subs	r3, r2, r4
 8017814:	3b15      	subs	r3, #21
 8017816:	089b      	lsrs	r3, r3, #2
 8017818:	3301      	adds	r3, #1
 801781a:	009b      	lsls	r3, r3, #2
 801781c:	50e9      	str	r1, [r5, r3]
 801781e:	2900      	cmp	r1, #0
 8017820:	d002      	beq.n	8017828 <__lshift+0xb4>
 8017822:	9b02      	ldr	r3, [sp, #8]
 8017824:	3302      	adds	r3, #2
 8017826:	9301      	str	r3, [sp, #4]
 8017828:	9b01      	ldr	r3, [sp, #4]
 801782a:	9804      	ldr	r0, [sp, #16]
 801782c:	3b01      	subs	r3, #1
 801782e:	0021      	movs	r1, r4
 8017830:	6133      	str	r3, [r6, #16]
 8017832:	f7ff fdb5 	bl	80173a0 <_Bfree>
 8017836:	0030      	movs	r0, r6
 8017838:	b007      	add	sp, #28
 801783a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801783c:	cb02      	ldmia	r3!, {r1}
 801783e:	c502      	stmia	r5!, {r1}
 8017840:	429a      	cmp	r2, r3
 8017842:	d8fb      	bhi.n	801783c <__lshift+0xc8>
 8017844:	e7f0      	b.n	8017828 <__lshift+0xb4>
 8017846:	46c0      	nop			; (mov r8, r8)
 8017848:	0801c7e1 	.word	0x0801c7e1
 801784c:	0801c8c8 	.word	0x0801c8c8

08017850 <__mcmp>:
 8017850:	6902      	ldr	r2, [r0, #16]
 8017852:	690b      	ldr	r3, [r1, #16]
 8017854:	b530      	push	{r4, r5, lr}
 8017856:	0004      	movs	r4, r0
 8017858:	1ad0      	subs	r0, r2, r3
 801785a:	429a      	cmp	r2, r3
 801785c:	d10d      	bne.n	801787a <__mcmp+0x2a>
 801785e:	009b      	lsls	r3, r3, #2
 8017860:	3414      	adds	r4, #20
 8017862:	3114      	adds	r1, #20
 8017864:	18e2      	adds	r2, r4, r3
 8017866:	18c9      	adds	r1, r1, r3
 8017868:	3a04      	subs	r2, #4
 801786a:	3904      	subs	r1, #4
 801786c:	6815      	ldr	r5, [r2, #0]
 801786e:	680b      	ldr	r3, [r1, #0]
 8017870:	429d      	cmp	r5, r3
 8017872:	d003      	beq.n	801787c <__mcmp+0x2c>
 8017874:	2001      	movs	r0, #1
 8017876:	429d      	cmp	r5, r3
 8017878:	d303      	bcc.n	8017882 <__mcmp+0x32>
 801787a:	bd30      	pop	{r4, r5, pc}
 801787c:	4294      	cmp	r4, r2
 801787e:	d3f3      	bcc.n	8017868 <__mcmp+0x18>
 8017880:	e7fb      	b.n	801787a <__mcmp+0x2a>
 8017882:	4240      	negs	r0, r0
 8017884:	e7f9      	b.n	801787a <__mcmp+0x2a>
	...

08017888 <__mdiff>:
 8017888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801788a:	000e      	movs	r6, r1
 801788c:	0007      	movs	r7, r0
 801788e:	0011      	movs	r1, r2
 8017890:	0030      	movs	r0, r6
 8017892:	b087      	sub	sp, #28
 8017894:	0014      	movs	r4, r2
 8017896:	f7ff ffdb 	bl	8017850 <__mcmp>
 801789a:	1e05      	subs	r5, r0, #0
 801789c:	d110      	bne.n	80178c0 <__mdiff+0x38>
 801789e:	0001      	movs	r1, r0
 80178a0:	0038      	movs	r0, r7
 80178a2:	f7ff fd55 	bl	8017350 <_Balloc>
 80178a6:	1e02      	subs	r2, r0, #0
 80178a8:	d104      	bne.n	80178b4 <__mdiff+0x2c>
 80178aa:	4b40      	ldr	r3, [pc, #256]	; (80179ac <__mdiff+0x124>)
 80178ac:	4940      	ldr	r1, [pc, #256]	; (80179b0 <__mdiff+0x128>)
 80178ae:	4841      	ldr	r0, [pc, #260]	; (80179b4 <__mdiff+0x12c>)
 80178b0:	f000 fad0 	bl	8017e54 <__assert_func>
 80178b4:	2301      	movs	r3, #1
 80178b6:	6145      	str	r5, [r0, #20]
 80178b8:	6103      	str	r3, [r0, #16]
 80178ba:	0010      	movs	r0, r2
 80178bc:	b007      	add	sp, #28
 80178be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178c0:	2301      	movs	r3, #1
 80178c2:	9301      	str	r3, [sp, #4]
 80178c4:	2800      	cmp	r0, #0
 80178c6:	db04      	blt.n	80178d2 <__mdiff+0x4a>
 80178c8:	0023      	movs	r3, r4
 80178ca:	0034      	movs	r4, r6
 80178cc:	001e      	movs	r6, r3
 80178ce:	2300      	movs	r3, #0
 80178d0:	9301      	str	r3, [sp, #4]
 80178d2:	0038      	movs	r0, r7
 80178d4:	6861      	ldr	r1, [r4, #4]
 80178d6:	f7ff fd3b 	bl	8017350 <_Balloc>
 80178da:	1e02      	subs	r2, r0, #0
 80178dc:	d103      	bne.n	80178e6 <__mdiff+0x5e>
 80178de:	2190      	movs	r1, #144	; 0x90
 80178e0:	4b32      	ldr	r3, [pc, #200]	; (80179ac <__mdiff+0x124>)
 80178e2:	0089      	lsls	r1, r1, #2
 80178e4:	e7e3      	b.n	80178ae <__mdiff+0x26>
 80178e6:	9b01      	ldr	r3, [sp, #4]
 80178e8:	2700      	movs	r7, #0
 80178ea:	60c3      	str	r3, [r0, #12]
 80178ec:	6920      	ldr	r0, [r4, #16]
 80178ee:	3414      	adds	r4, #20
 80178f0:	9401      	str	r4, [sp, #4]
 80178f2:	9b01      	ldr	r3, [sp, #4]
 80178f4:	0084      	lsls	r4, r0, #2
 80178f6:	191b      	adds	r3, r3, r4
 80178f8:	0034      	movs	r4, r6
 80178fa:	9302      	str	r3, [sp, #8]
 80178fc:	6933      	ldr	r3, [r6, #16]
 80178fe:	3414      	adds	r4, #20
 8017900:	0099      	lsls	r1, r3, #2
 8017902:	1863      	adds	r3, r4, r1
 8017904:	9303      	str	r3, [sp, #12]
 8017906:	0013      	movs	r3, r2
 8017908:	3314      	adds	r3, #20
 801790a:	469c      	mov	ip, r3
 801790c:	9305      	str	r3, [sp, #20]
 801790e:	9b01      	ldr	r3, [sp, #4]
 8017910:	9304      	str	r3, [sp, #16]
 8017912:	9b04      	ldr	r3, [sp, #16]
 8017914:	cc02      	ldmia	r4!, {r1}
 8017916:	cb20      	ldmia	r3!, {r5}
 8017918:	9304      	str	r3, [sp, #16]
 801791a:	b2ab      	uxth	r3, r5
 801791c:	19df      	adds	r7, r3, r7
 801791e:	b28b      	uxth	r3, r1
 8017920:	1afb      	subs	r3, r7, r3
 8017922:	0c09      	lsrs	r1, r1, #16
 8017924:	0c2d      	lsrs	r5, r5, #16
 8017926:	1a6d      	subs	r5, r5, r1
 8017928:	1419      	asrs	r1, r3, #16
 801792a:	186d      	adds	r5, r5, r1
 801792c:	4661      	mov	r1, ip
 801792e:	142f      	asrs	r7, r5, #16
 8017930:	b29b      	uxth	r3, r3
 8017932:	042d      	lsls	r5, r5, #16
 8017934:	432b      	orrs	r3, r5
 8017936:	c108      	stmia	r1!, {r3}
 8017938:	9b03      	ldr	r3, [sp, #12]
 801793a:	468c      	mov	ip, r1
 801793c:	42a3      	cmp	r3, r4
 801793e:	d8e8      	bhi.n	8017912 <__mdiff+0x8a>
 8017940:	0031      	movs	r1, r6
 8017942:	9c03      	ldr	r4, [sp, #12]
 8017944:	3115      	adds	r1, #21
 8017946:	2304      	movs	r3, #4
 8017948:	428c      	cmp	r4, r1
 801794a:	d304      	bcc.n	8017956 <__mdiff+0xce>
 801794c:	1ba3      	subs	r3, r4, r6
 801794e:	3b15      	subs	r3, #21
 8017950:	089b      	lsrs	r3, r3, #2
 8017952:	3301      	adds	r3, #1
 8017954:	009b      	lsls	r3, r3, #2
 8017956:	9901      	ldr	r1, [sp, #4]
 8017958:	18cc      	adds	r4, r1, r3
 801795a:	9905      	ldr	r1, [sp, #20]
 801795c:	0026      	movs	r6, r4
 801795e:	18cb      	adds	r3, r1, r3
 8017960:	469c      	mov	ip, r3
 8017962:	9902      	ldr	r1, [sp, #8]
 8017964:	428e      	cmp	r6, r1
 8017966:	d310      	bcc.n	801798a <__mdiff+0x102>
 8017968:	9e02      	ldr	r6, [sp, #8]
 801796a:	1ee1      	subs	r1, r4, #3
 801796c:	2500      	movs	r5, #0
 801796e:	428e      	cmp	r6, r1
 8017970:	d304      	bcc.n	801797c <__mdiff+0xf4>
 8017972:	0031      	movs	r1, r6
 8017974:	3103      	adds	r1, #3
 8017976:	1b0c      	subs	r4, r1, r4
 8017978:	08a4      	lsrs	r4, r4, #2
 801797a:	00a5      	lsls	r5, r4, #2
 801797c:	195b      	adds	r3, r3, r5
 801797e:	3b04      	subs	r3, #4
 8017980:	6819      	ldr	r1, [r3, #0]
 8017982:	2900      	cmp	r1, #0
 8017984:	d00f      	beq.n	80179a6 <__mdiff+0x11e>
 8017986:	6110      	str	r0, [r2, #16]
 8017988:	e797      	b.n	80178ba <__mdiff+0x32>
 801798a:	ce02      	ldmia	r6!, {r1}
 801798c:	b28d      	uxth	r5, r1
 801798e:	19ed      	adds	r5, r5, r7
 8017990:	0c0f      	lsrs	r7, r1, #16
 8017992:	1429      	asrs	r1, r5, #16
 8017994:	1879      	adds	r1, r7, r1
 8017996:	140f      	asrs	r7, r1, #16
 8017998:	b2ad      	uxth	r5, r5
 801799a:	0409      	lsls	r1, r1, #16
 801799c:	430d      	orrs	r5, r1
 801799e:	4661      	mov	r1, ip
 80179a0:	c120      	stmia	r1!, {r5}
 80179a2:	468c      	mov	ip, r1
 80179a4:	e7dd      	b.n	8017962 <__mdiff+0xda>
 80179a6:	3801      	subs	r0, #1
 80179a8:	e7e9      	b.n	801797e <__mdiff+0xf6>
 80179aa:	46c0      	nop			; (mov r8, r8)
 80179ac:	0801c7e1 	.word	0x0801c7e1
 80179b0:	00000232 	.word	0x00000232
 80179b4:	0801c8c8 	.word	0x0801c8c8

080179b8 <__ulp>:
 80179b8:	4b0f      	ldr	r3, [pc, #60]	; (80179f8 <__ulp+0x40>)
 80179ba:	4019      	ands	r1, r3
 80179bc:	4b0f      	ldr	r3, [pc, #60]	; (80179fc <__ulp+0x44>)
 80179be:	18c9      	adds	r1, r1, r3
 80179c0:	2900      	cmp	r1, #0
 80179c2:	dd04      	ble.n	80179ce <__ulp+0x16>
 80179c4:	2200      	movs	r2, #0
 80179c6:	000b      	movs	r3, r1
 80179c8:	0010      	movs	r0, r2
 80179ca:	0019      	movs	r1, r3
 80179cc:	4770      	bx	lr
 80179ce:	4249      	negs	r1, r1
 80179d0:	2200      	movs	r2, #0
 80179d2:	2300      	movs	r3, #0
 80179d4:	1509      	asrs	r1, r1, #20
 80179d6:	2913      	cmp	r1, #19
 80179d8:	dc04      	bgt.n	80179e4 <__ulp+0x2c>
 80179da:	2080      	movs	r0, #128	; 0x80
 80179dc:	0300      	lsls	r0, r0, #12
 80179de:	4108      	asrs	r0, r1
 80179e0:	0003      	movs	r3, r0
 80179e2:	e7f1      	b.n	80179c8 <__ulp+0x10>
 80179e4:	3914      	subs	r1, #20
 80179e6:	2001      	movs	r0, #1
 80179e8:	291e      	cmp	r1, #30
 80179ea:	dc02      	bgt.n	80179f2 <__ulp+0x3a>
 80179ec:	2080      	movs	r0, #128	; 0x80
 80179ee:	0600      	lsls	r0, r0, #24
 80179f0:	40c8      	lsrs	r0, r1
 80179f2:	0002      	movs	r2, r0
 80179f4:	e7e8      	b.n	80179c8 <__ulp+0x10>
 80179f6:	46c0      	nop			; (mov r8, r8)
 80179f8:	7ff00000 	.word	0x7ff00000
 80179fc:	fcc00000 	.word	0xfcc00000

08017a00 <__b2d>:
 8017a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017a02:	0006      	movs	r6, r0
 8017a04:	6903      	ldr	r3, [r0, #16]
 8017a06:	3614      	adds	r6, #20
 8017a08:	009b      	lsls	r3, r3, #2
 8017a0a:	18f3      	adds	r3, r6, r3
 8017a0c:	1f1d      	subs	r5, r3, #4
 8017a0e:	682c      	ldr	r4, [r5, #0]
 8017a10:	000f      	movs	r7, r1
 8017a12:	0020      	movs	r0, r4
 8017a14:	9301      	str	r3, [sp, #4]
 8017a16:	f7ff fd5d 	bl	80174d4 <__hi0bits>
 8017a1a:	2320      	movs	r3, #32
 8017a1c:	1a1b      	subs	r3, r3, r0
 8017a1e:	491f      	ldr	r1, [pc, #124]	; (8017a9c <__b2d+0x9c>)
 8017a20:	603b      	str	r3, [r7, #0]
 8017a22:	280a      	cmp	r0, #10
 8017a24:	dc16      	bgt.n	8017a54 <__b2d+0x54>
 8017a26:	230b      	movs	r3, #11
 8017a28:	0027      	movs	r7, r4
 8017a2a:	1a1b      	subs	r3, r3, r0
 8017a2c:	40df      	lsrs	r7, r3
 8017a2e:	4339      	orrs	r1, r7
 8017a30:	469c      	mov	ip, r3
 8017a32:	000b      	movs	r3, r1
 8017a34:	2100      	movs	r1, #0
 8017a36:	42ae      	cmp	r6, r5
 8017a38:	d202      	bcs.n	8017a40 <__b2d+0x40>
 8017a3a:	9901      	ldr	r1, [sp, #4]
 8017a3c:	3908      	subs	r1, #8
 8017a3e:	6809      	ldr	r1, [r1, #0]
 8017a40:	3015      	adds	r0, #21
 8017a42:	4084      	lsls	r4, r0
 8017a44:	4660      	mov	r0, ip
 8017a46:	40c1      	lsrs	r1, r0
 8017a48:	430c      	orrs	r4, r1
 8017a4a:	0022      	movs	r2, r4
 8017a4c:	0010      	movs	r0, r2
 8017a4e:	0019      	movs	r1, r3
 8017a50:	b003      	add	sp, #12
 8017a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a54:	2700      	movs	r7, #0
 8017a56:	42ae      	cmp	r6, r5
 8017a58:	d202      	bcs.n	8017a60 <__b2d+0x60>
 8017a5a:	9d01      	ldr	r5, [sp, #4]
 8017a5c:	3d08      	subs	r5, #8
 8017a5e:	682f      	ldr	r7, [r5, #0]
 8017a60:	230b      	movs	r3, #11
 8017a62:	425b      	negs	r3, r3
 8017a64:	469c      	mov	ip, r3
 8017a66:	4484      	add	ip, r0
 8017a68:	280b      	cmp	r0, #11
 8017a6a:	d013      	beq.n	8017a94 <__b2d+0x94>
 8017a6c:	4663      	mov	r3, ip
 8017a6e:	2020      	movs	r0, #32
 8017a70:	409c      	lsls	r4, r3
 8017a72:	1ac0      	subs	r0, r0, r3
 8017a74:	003b      	movs	r3, r7
 8017a76:	40c3      	lsrs	r3, r0
 8017a78:	431c      	orrs	r4, r3
 8017a7a:	4321      	orrs	r1, r4
 8017a7c:	000b      	movs	r3, r1
 8017a7e:	2100      	movs	r1, #0
 8017a80:	42b5      	cmp	r5, r6
 8017a82:	d901      	bls.n	8017a88 <__b2d+0x88>
 8017a84:	3d04      	subs	r5, #4
 8017a86:	6829      	ldr	r1, [r5, #0]
 8017a88:	4664      	mov	r4, ip
 8017a8a:	40c1      	lsrs	r1, r0
 8017a8c:	40a7      	lsls	r7, r4
 8017a8e:	430f      	orrs	r7, r1
 8017a90:	003a      	movs	r2, r7
 8017a92:	e7db      	b.n	8017a4c <__b2d+0x4c>
 8017a94:	4321      	orrs	r1, r4
 8017a96:	000b      	movs	r3, r1
 8017a98:	e7fa      	b.n	8017a90 <__b2d+0x90>
 8017a9a:	46c0      	nop			; (mov r8, r8)
 8017a9c:	3ff00000 	.word	0x3ff00000

08017aa0 <__d2b>:
 8017aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017aa2:	2101      	movs	r1, #1
 8017aa4:	0014      	movs	r4, r2
 8017aa6:	001e      	movs	r6, r3
 8017aa8:	9f08      	ldr	r7, [sp, #32]
 8017aaa:	f7ff fc51 	bl	8017350 <_Balloc>
 8017aae:	1e05      	subs	r5, r0, #0
 8017ab0:	d105      	bne.n	8017abe <__d2b+0x1e>
 8017ab2:	0002      	movs	r2, r0
 8017ab4:	4b26      	ldr	r3, [pc, #152]	; (8017b50 <__d2b+0xb0>)
 8017ab6:	4927      	ldr	r1, [pc, #156]	; (8017b54 <__d2b+0xb4>)
 8017ab8:	4827      	ldr	r0, [pc, #156]	; (8017b58 <__d2b+0xb8>)
 8017aba:	f000 f9cb 	bl	8017e54 <__assert_func>
 8017abe:	0333      	lsls	r3, r6, #12
 8017ac0:	0076      	lsls	r6, r6, #1
 8017ac2:	0b1b      	lsrs	r3, r3, #12
 8017ac4:	0d76      	lsrs	r6, r6, #21
 8017ac6:	d124      	bne.n	8017b12 <__d2b+0x72>
 8017ac8:	9301      	str	r3, [sp, #4]
 8017aca:	2c00      	cmp	r4, #0
 8017acc:	d027      	beq.n	8017b1e <__d2b+0x7e>
 8017ace:	4668      	mov	r0, sp
 8017ad0:	9400      	str	r4, [sp, #0]
 8017ad2:	f7ff fd19 	bl	8017508 <__lo0bits>
 8017ad6:	9c00      	ldr	r4, [sp, #0]
 8017ad8:	2800      	cmp	r0, #0
 8017ada:	d01e      	beq.n	8017b1a <__d2b+0x7a>
 8017adc:	9b01      	ldr	r3, [sp, #4]
 8017ade:	2120      	movs	r1, #32
 8017ae0:	001a      	movs	r2, r3
 8017ae2:	1a09      	subs	r1, r1, r0
 8017ae4:	408a      	lsls	r2, r1
 8017ae6:	40c3      	lsrs	r3, r0
 8017ae8:	4322      	orrs	r2, r4
 8017aea:	616a      	str	r2, [r5, #20]
 8017aec:	9301      	str	r3, [sp, #4]
 8017aee:	9c01      	ldr	r4, [sp, #4]
 8017af0:	61ac      	str	r4, [r5, #24]
 8017af2:	1e63      	subs	r3, r4, #1
 8017af4:	419c      	sbcs	r4, r3
 8017af6:	3401      	adds	r4, #1
 8017af8:	612c      	str	r4, [r5, #16]
 8017afa:	2e00      	cmp	r6, #0
 8017afc:	d018      	beq.n	8017b30 <__d2b+0x90>
 8017afe:	4b17      	ldr	r3, [pc, #92]	; (8017b5c <__d2b+0xbc>)
 8017b00:	18f6      	adds	r6, r6, r3
 8017b02:	2335      	movs	r3, #53	; 0x35
 8017b04:	1836      	adds	r6, r6, r0
 8017b06:	1a18      	subs	r0, r3, r0
 8017b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b0a:	603e      	str	r6, [r7, #0]
 8017b0c:	6018      	str	r0, [r3, #0]
 8017b0e:	0028      	movs	r0, r5
 8017b10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017b12:	2280      	movs	r2, #128	; 0x80
 8017b14:	0352      	lsls	r2, r2, #13
 8017b16:	4313      	orrs	r3, r2
 8017b18:	e7d6      	b.n	8017ac8 <__d2b+0x28>
 8017b1a:	616c      	str	r4, [r5, #20]
 8017b1c:	e7e7      	b.n	8017aee <__d2b+0x4e>
 8017b1e:	a801      	add	r0, sp, #4
 8017b20:	f7ff fcf2 	bl	8017508 <__lo0bits>
 8017b24:	2401      	movs	r4, #1
 8017b26:	9b01      	ldr	r3, [sp, #4]
 8017b28:	612c      	str	r4, [r5, #16]
 8017b2a:	616b      	str	r3, [r5, #20]
 8017b2c:	3020      	adds	r0, #32
 8017b2e:	e7e4      	b.n	8017afa <__d2b+0x5a>
 8017b30:	4b0b      	ldr	r3, [pc, #44]	; (8017b60 <__d2b+0xc0>)
 8017b32:	18c0      	adds	r0, r0, r3
 8017b34:	4b0b      	ldr	r3, [pc, #44]	; (8017b64 <__d2b+0xc4>)
 8017b36:	6038      	str	r0, [r7, #0]
 8017b38:	18e3      	adds	r3, r4, r3
 8017b3a:	009b      	lsls	r3, r3, #2
 8017b3c:	18eb      	adds	r3, r5, r3
 8017b3e:	6958      	ldr	r0, [r3, #20]
 8017b40:	f7ff fcc8 	bl	80174d4 <__hi0bits>
 8017b44:	0164      	lsls	r4, r4, #5
 8017b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b48:	1a24      	subs	r4, r4, r0
 8017b4a:	601c      	str	r4, [r3, #0]
 8017b4c:	e7df      	b.n	8017b0e <__d2b+0x6e>
 8017b4e:	46c0      	nop			; (mov r8, r8)
 8017b50:	0801c7e1 	.word	0x0801c7e1
 8017b54:	0000030a 	.word	0x0000030a
 8017b58:	0801c8c8 	.word	0x0801c8c8
 8017b5c:	fffffbcd 	.word	0xfffffbcd
 8017b60:	fffffbce 	.word	0xfffffbce
 8017b64:	3fffffff 	.word	0x3fffffff

08017b68 <__ratio>:
 8017b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b6a:	b087      	sub	sp, #28
 8017b6c:	000f      	movs	r7, r1
 8017b6e:	a904      	add	r1, sp, #16
 8017b70:	0006      	movs	r6, r0
 8017b72:	f7ff ff45 	bl	8017a00 <__b2d>
 8017b76:	9000      	str	r0, [sp, #0]
 8017b78:	9101      	str	r1, [sp, #4]
 8017b7a:	9c00      	ldr	r4, [sp, #0]
 8017b7c:	9d01      	ldr	r5, [sp, #4]
 8017b7e:	0038      	movs	r0, r7
 8017b80:	a905      	add	r1, sp, #20
 8017b82:	f7ff ff3d 	bl	8017a00 <__b2d>
 8017b86:	9002      	str	r0, [sp, #8]
 8017b88:	9103      	str	r1, [sp, #12]
 8017b8a:	9a02      	ldr	r2, [sp, #8]
 8017b8c:	9b03      	ldr	r3, [sp, #12]
 8017b8e:	6931      	ldr	r1, [r6, #16]
 8017b90:	6938      	ldr	r0, [r7, #16]
 8017b92:	9e05      	ldr	r6, [sp, #20]
 8017b94:	1a08      	subs	r0, r1, r0
 8017b96:	9904      	ldr	r1, [sp, #16]
 8017b98:	0140      	lsls	r0, r0, #5
 8017b9a:	1b89      	subs	r1, r1, r6
 8017b9c:	1841      	adds	r1, r0, r1
 8017b9e:	0508      	lsls	r0, r1, #20
 8017ba0:	2900      	cmp	r1, #0
 8017ba2:	dd07      	ble.n	8017bb4 <__ratio+0x4c>
 8017ba4:	9901      	ldr	r1, [sp, #4]
 8017ba6:	1845      	adds	r5, r0, r1
 8017ba8:	0020      	movs	r0, r4
 8017baa:	0029      	movs	r1, r5
 8017bac:	f7e9 fd8c 	bl	80016c8 <__aeabi_ddiv>
 8017bb0:	b007      	add	sp, #28
 8017bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017bb4:	9903      	ldr	r1, [sp, #12]
 8017bb6:	1a0b      	subs	r3, r1, r0
 8017bb8:	e7f6      	b.n	8017ba8 <__ratio+0x40>

08017bba <__copybits>:
 8017bba:	b570      	push	{r4, r5, r6, lr}
 8017bbc:	0014      	movs	r4, r2
 8017bbe:	0005      	movs	r5, r0
 8017bc0:	3901      	subs	r1, #1
 8017bc2:	6913      	ldr	r3, [r2, #16]
 8017bc4:	1149      	asrs	r1, r1, #5
 8017bc6:	3101      	adds	r1, #1
 8017bc8:	0089      	lsls	r1, r1, #2
 8017bca:	3414      	adds	r4, #20
 8017bcc:	009b      	lsls	r3, r3, #2
 8017bce:	1841      	adds	r1, r0, r1
 8017bd0:	18e3      	adds	r3, r4, r3
 8017bd2:	42a3      	cmp	r3, r4
 8017bd4:	d80d      	bhi.n	8017bf2 <__copybits+0x38>
 8017bd6:	0014      	movs	r4, r2
 8017bd8:	3411      	adds	r4, #17
 8017bda:	2500      	movs	r5, #0
 8017bdc:	429c      	cmp	r4, r3
 8017bde:	d803      	bhi.n	8017be8 <__copybits+0x2e>
 8017be0:	1a9b      	subs	r3, r3, r2
 8017be2:	3b11      	subs	r3, #17
 8017be4:	089b      	lsrs	r3, r3, #2
 8017be6:	009d      	lsls	r5, r3, #2
 8017be8:	2300      	movs	r3, #0
 8017bea:	1940      	adds	r0, r0, r5
 8017bec:	4281      	cmp	r1, r0
 8017bee:	d803      	bhi.n	8017bf8 <__copybits+0x3e>
 8017bf0:	bd70      	pop	{r4, r5, r6, pc}
 8017bf2:	cc40      	ldmia	r4!, {r6}
 8017bf4:	c540      	stmia	r5!, {r6}
 8017bf6:	e7ec      	b.n	8017bd2 <__copybits+0x18>
 8017bf8:	c008      	stmia	r0!, {r3}
 8017bfa:	e7f7      	b.n	8017bec <__copybits+0x32>

08017bfc <__any_on>:
 8017bfc:	0002      	movs	r2, r0
 8017bfe:	6900      	ldr	r0, [r0, #16]
 8017c00:	b510      	push	{r4, lr}
 8017c02:	3214      	adds	r2, #20
 8017c04:	114b      	asrs	r3, r1, #5
 8017c06:	4298      	cmp	r0, r3
 8017c08:	db13      	blt.n	8017c32 <__any_on+0x36>
 8017c0a:	dd0c      	ble.n	8017c26 <__any_on+0x2a>
 8017c0c:	241f      	movs	r4, #31
 8017c0e:	0008      	movs	r0, r1
 8017c10:	4020      	ands	r0, r4
 8017c12:	4221      	tst	r1, r4
 8017c14:	d007      	beq.n	8017c26 <__any_on+0x2a>
 8017c16:	0099      	lsls	r1, r3, #2
 8017c18:	588c      	ldr	r4, [r1, r2]
 8017c1a:	0021      	movs	r1, r4
 8017c1c:	40c1      	lsrs	r1, r0
 8017c1e:	4081      	lsls	r1, r0
 8017c20:	2001      	movs	r0, #1
 8017c22:	428c      	cmp	r4, r1
 8017c24:	d104      	bne.n	8017c30 <__any_on+0x34>
 8017c26:	009b      	lsls	r3, r3, #2
 8017c28:	18d3      	adds	r3, r2, r3
 8017c2a:	4293      	cmp	r3, r2
 8017c2c:	d803      	bhi.n	8017c36 <__any_on+0x3a>
 8017c2e:	2000      	movs	r0, #0
 8017c30:	bd10      	pop	{r4, pc}
 8017c32:	0003      	movs	r3, r0
 8017c34:	e7f7      	b.n	8017c26 <__any_on+0x2a>
 8017c36:	3b04      	subs	r3, #4
 8017c38:	6819      	ldr	r1, [r3, #0]
 8017c3a:	2900      	cmp	r1, #0
 8017c3c:	d0f5      	beq.n	8017c2a <__any_on+0x2e>
 8017c3e:	2001      	movs	r0, #1
 8017c40:	e7f6      	b.n	8017c30 <__any_on+0x34>
	...

08017c44 <frexp>:
 8017c44:	b570      	push	{r4, r5, r6, lr}
 8017c46:	0014      	movs	r4, r2
 8017c48:	2500      	movs	r5, #0
 8017c4a:	6025      	str	r5, [r4, #0]
 8017c4c:	4d10      	ldr	r5, [pc, #64]	; (8017c90 <frexp+0x4c>)
 8017c4e:	004b      	lsls	r3, r1, #1
 8017c50:	000a      	movs	r2, r1
 8017c52:	085b      	lsrs	r3, r3, #1
 8017c54:	42ab      	cmp	r3, r5
 8017c56:	dc1a      	bgt.n	8017c8e <frexp+0x4a>
 8017c58:	001d      	movs	r5, r3
 8017c5a:	4305      	orrs	r5, r0
 8017c5c:	d017      	beq.n	8017c8e <frexp+0x4a>
 8017c5e:	4d0d      	ldr	r5, [pc, #52]	; (8017c94 <frexp+0x50>)
 8017c60:	4229      	tst	r1, r5
 8017c62:	d109      	bne.n	8017c78 <frexp+0x34>
 8017c64:	2200      	movs	r2, #0
 8017c66:	4b0c      	ldr	r3, [pc, #48]	; (8017c98 <frexp+0x54>)
 8017c68:	f7ea f930 	bl	8001ecc <__aeabi_dmul>
 8017c6c:	2536      	movs	r5, #54	; 0x36
 8017c6e:	000a      	movs	r2, r1
 8017c70:	004b      	lsls	r3, r1, #1
 8017c72:	426d      	negs	r5, r5
 8017c74:	085b      	lsrs	r3, r3, #1
 8017c76:	6025      	str	r5, [r4, #0]
 8017c78:	4d08      	ldr	r5, [pc, #32]	; (8017c9c <frexp+0x58>)
 8017c7a:	151b      	asrs	r3, r3, #20
 8017c7c:	195b      	adds	r3, r3, r5
 8017c7e:	6825      	ldr	r5, [r4, #0]
 8017c80:	18eb      	adds	r3, r5, r3
 8017c82:	6023      	str	r3, [r4, #0]
 8017c84:	4b06      	ldr	r3, [pc, #24]	; (8017ca0 <frexp+0x5c>)
 8017c86:	401a      	ands	r2, r3
 8017c88:	4b06      	ldr	r3, [pc, #24]	; (8017ca4 <frexp+0x60>)
 8017c8a:	4313      	orrs	r3, r2
 8017c8c:	0019      	movs	r1, r3
 8017c8e:	bd70      	pop	{r4, r5, r6, pc}
 8017c90:	7fefffff 	.word	0x7fefffff
 8017c94:	7ff00000 	.word	0x7ff00000
 8017c98:	43500000 	.word	0x43500000
 8017c9c:	fffffc02 	.word	0xfffffc02
 8017ca0:	800fffff 	.word	0x800fffff
 8017ca4:	3fe00000 	.word	0x3fe00000

08017ca8 <nan>:
 8017ca8:	2000      	movs	r0, #0
 8017caa:	4901      	ldr	r1, [pc, #4]	; (8017cb0 <nan+0x8>)
 8017cac:	4770      	bx	lr
 8017cae:	46c0      	nop			; (mov r8, r8)
 8017cb0:	7ff80000 	.word	0x7ff80000

08017cb4 <__ssprint_r>:
 8017cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cb6:	6893      	ldr	r3, [r2, #8]
 8017cb8:	b087      	sub	sp, #28
 8017cba:	000c      	movs	r4, r1
 8017cbc:	0017      	movs	r7, r2
 8017cbe:	9002      	str	r0, [sp, #8]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d065      	beq.n	8017d90 <__ssprint_r+0xdc>
 8017cc4:	6813      	ldr	r3, [r2, #0]
 8017cc6:	9303      	str	r3, [sp, #12]
 8017cc8:	2300      	movs	r3, #0
 8017cca:	9305      	str	r3, [sp, #20]
 8017ccc:	9301      	str	r3, [sp, #4]
 8017cce:	9b01      	ldr	r3, [sp, #4]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d02d      	beq.n	8017d30 <__ssprint_r+0x7c>
 8017cd4:	68a6      	ldr	r6, [r4, #8]
 8017cd6:	429e      	cmp	r6, r3
 8017cd8:	d849      	bhi.n	8017d6e <__ssprint_r+0xba>
 8017cda:	2390      	movs	r3, #144	; 0x90
 8017cdc:	89a2      	ldrh	r2, [r4, #12]
 8017cde:	00db      	lsls	r3, r3, #3
 8017ce0:	421a      	tst	r2, r3
 8017ce2:	d041      	beq.n	8017d68 <__ssprint_r+0xb4>
 8017ce4:	2003      	movs	r0, #3
 8017ce6:	6921      	ldr	r1, [r4, #16]
 8017ce8:	6823      	ldr	r3, [r4, #0]
 8017cea:	1a5b      	subs	r3, r3, r1
 8017cec:	9304      	str	r3, [sp, #16]
 8017cee:	6963      	ldr	r3, [r4, #20]
 8017cf0:	4343      	muls	r3, r0
 8017cf2:	0fdd      	lsrs	r5, r3, #31
 8017cf4:	18ed      	adds	r5, r5, r3
 8017cf6:	9b04      	ldr	r3, [sp, #16]
 8017cf8:	9801      	ldr	r0, [sp, #4]
 8017cfa:	3301      	adds	r3, #1
 8017cfc:	181b      	adds	r3, r3, r0
 8017cfe:	106d      	asrs	r5, r5, #1
 8017d00:	42ab      	cmp	r3, r5
 8017d02:	d900      	bls.n	8017d06 <__ssprint_r+0x52>
 8017d04:	001d      	movs	r5, r3
 8017d06:	0553      	lsls	r3, r2, #21
 8017d08:	d546      	bpl.n	8017d98 <__ssprint_r+0xe4>
 8017d0a:	0029      	movs	r1, r5
 8017d0c:	9802      	ldr	r0, [sp, #8]
 8017d0e:	f7fb f9bf 	bl	8013090 <_malloc_r>
 8017d12:	1e06      	subs	r6, r0, #0
 8017d14:	d116      	bne.n	8017d44 <__ssprint_r+0x90>
 8017d16:	230c      	movs	r3, #12
 8017d18:	9a02      	ldr	r2, [sp, #8]
 8017d1a:	2001      	movs	r0, #1
 8017d1c:	6013      	str	r3, [r2, #0]
 8017d1e:	2340      	movs	r3, #64	; 0x40
 8017d20:	89a2      	ldrh	r2, [r4, #12]
 8017d22:	4240      	negs	r0, r0
 8017d24:	4313      	orrs	r3, r2
 8017d26:	81a3      	strh	r3, [r4, #12]
 8017d28:	2300      	movs	r3, #0
 8017d2a:	60bb      	str	r3, [r7, #8]
 8017d2c:	607b      	str	r3, [r7, #4]
 8017d2e:	e031      	b.n	8017d94 <__ssprint_r+0xe0>
 8017d30:	9b03      	ldr	r3, [sp, #12]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	9305      	str	r3, [sp, #20]
 8017d36:	9b03      	ldr	r3, [sp, #12]
 8017d38:	685b      	ldr	r3, [r3, #4]
 8017d3a:	9301      	str	r3, [sp, #4]
 8017d3c:	9b03      	ldr	r3, [sp, #12]
 8017d3e:	3308      	adds	r3, #8
 8017d40:	9303      	str	r3, [sp, #12]
 8017d42:	e7c4      	b.n	8017cce <__ssprint_r+0x1a>
 8017d44:	9a04      	ldr	r2, [sp, #16]
 8017d46:	6921      	ldr	r1, [r4, #16]
 8017d48:	f7fb fbc2 	bl	80134d0 <memcpy>
 8017d4c:	89a3      	ldrh	r3, [r4, #12]
 8017d4e:	4a18      	ldr	r2, [pc, #96]	; (8017db0 <__ssprint_r+0xfc>)
 8017d50:	401a      	ands	r2, r3
 8017d52:	2380      	movs	r3, #128	; 0x80
 8017d54:	4313      	orrs	r3, r2
 8017d56:	81a3      	strh	r3, [r4, #12]
 8017d58:	9b04      	ldr	r3, [sp, #16]
 8017d5a:	6126      	str	r6, [r4, #16]
 8017d5c:	18f6      	adds	r6, r6, r3
 8017d5e:	6026      	str	r6, [r4, #0]
 8017d60:	6165      	str	r5, [r4, #20]
 8017d62:	9e01      	ldr	r6, [sp, #4]
 8017d64:	1aed      	subs	r5, r5, r3
 8017d66:	60a5      	str	r5, [r4, #8]
 8017d68:	9b01      	ldr	r3, [sp, #4]
 8017d6a:	429e      	cmp	r6, r3
 8017d6c:	d900      	bls.n	8017d70 <__ssprint_r+0xbc>
 8017d6e:	9e01      	ldr	r6, [sp, #4]
 8017d70:	0032      	movs	r2, r6
 8017d72:	9905      	ldr	r1, [sp, #20]
 8017d74:	6820      	ldr	r0, [r4, #0]
 8017d76:	f7ff fad8 	bl	801732a <memmove>
 8017d7a:	68a3      	ldr	r3, [r4, #8]
 8017d7c:	9a01      	ldr	r2, [sp, #4]
 8017d7e:	1b9b      	subs	r3, r3, r6
 8017d80:	60a3      	str	r3, [r4, #8]
 8017d82:	6823      	ldr	r3, [r4, #0]
 8017d84:	199e      	adds	r6, r3, r6
 8017d86:	68bb      	ldr	r3, [r7, #8]
 8017d88:	6026      	str	r6, [r4, #0]
 8017d8a:	1a9b      	subs	r3, r3, r2
 8017d8c:	60bb      	str	r3, [r7, #8]
 8017d8e:	d1cf      	bne.n	8017d30 <__ssprint_r+0x7c>
 8017d90:	2000      	movs	r0, #0
 8017d92:	6078      	str	r0, [r7, #4]
 8017d94:	b007      	add	sp, #28
 8017d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d98:	002a      	movs	r2, r5
 8017d9a:	9802      	ldr	r0, [sp, #8]
 8017d9c:	f7fb fbde 	bl	801355c <_realloc_r>
 8017da0:	1e06      	subs	r6, r0, #0
 8017da2:	d1d9      	bne.n	8017d58 <__ssprint_r+0xa4>
 8017da4:	6921      	ldr	r1, [r4, #16]
 8017da6:	9802      	ldr	r0, [sp, #8]
 8017da8:	f7fe fe6c 	bl	8016a84 <_free_r>
 8017dac:	e7b3      	b.n	8017d16 <__ssprint_r+0x62>
 8017dae:	46c0      	nop			; (mov r8, r8)
 8017db0:	fffffb7f 	.word	0xfffffb7f

08017db4 <__ascii_wctomb>:
 8017db4:	0003      	movs	r3, r0
 8017db6:	1e08      	subs	r0, r1, #0
 8017db8:	d005      	beq.n	8017dc6 <__ascii_wctomb+0x12>
 8017dba:	2aff      	cmp	r2, #255	; 0xff
 8017dbc:	d904      	bls.n	8017dc8 <__ascii_wctomb+0x14>
 8017dbe:	228a      	movs	r2, #138	; 0x8a
 8017dc0:	2001      	movs	r0, #1
 8017dc2:	601a      	str	r2, [r3, #0]
 8017dc4:	4240      	negs	r0, r0
 8017dc6:	4770      	bx	lr
 8017dc8:	2001      	movs	r0, #1
 8017dca:	700a      	strb	r2, [r1, #0]
 8017dcc:	e7fb      	b.n	8017dc6 <__ascii_wctomb+0x12>
	...

08017dd0 <__register_exitproc>:
 8017dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017dd2:	4f1e      	ldr	r7, [pc, #120]	; (8017e4c <__register_exitproc+0x7c>)
 8017dd4:	0004      	movs	r4, r0
 8017dd6:	6838      	ldr	r0, [r7, #0]
 8017dd8:	0016      	movs	r6, r2
 8017dda:	9100      	str	r1, [sp, #0]
 8017ddc:	9301      	str	r3, [sp, #4]
 8017dde:	f7ff fa85 	bl	80172ec <__retarget_lock_acquire_recursive>
 8017de2:	4b1b      	ldr	r3, [pc, #108]	; (8017e50 <__register_exitproc+0x80>)
 8017de4:	6819      	ldr	r1, [r3, #0]
 8017de6:	000b      	movs	r3, r1
 8017de8:	33fc      	adds	r3, #252	; 0xfc
 8017dea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017dec:	2a00      	cmp	r2, #0
 8017dee:	d103      	bne.n	8017df8 <__register_exitproc+0x28>
 8017df0:	000a      	movs	r2, r1
 8017df2:	324d      	adds	r2, #77	; 0x4d
 8017df4:	32ff      	adds	r2, #255	; 0xff
 8017df6:	64da      	str	r2, [r3, #76]	; 0x4c
 8017df8:	6853      	ldr	r3, [r2, #4]
 8017dfa:	6838      	ldr	r0, [r7, #0]
 8017dfc:	2b1f      	cmp	r3, #31
 8017dfe:	dd04      	ble.n	8017e0a <__register_exitproc+0x3a>
 8017e00:	f7ff fa75 	bl	80172ee <__retarget_lock_release_recursive>
 8017e04:	2001      	movs	r0, #1
 8017e06:	4240      	negs	r0, r0
 8017e08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017e0a:	2c00      	cmp	r4, #0
 8017e0c:	d014      	beq.n	8017e38 <__register_exitproc+0x68>
 8017e0e:	0099      	lsls	r1, r3, #2
 8017e10:	1851      	adds	r1, r2, r1
 8017e12:	000f      	movs	r7, r1
 8017e14:	3788      	adds	r7, #136	; 0x88
 8017e16:	603e      	str	r6, [r7, #0]
 8017e18:	2701      	movs	r7, #1
 8017e1a:	0016      	movs	r6, r2
 8017e1c:	409f      	lsls	r7, r3
 8017e1e:	3685      	adds	r6, #133	; 0x85
 8017e20:	36ff      	adds	r6, #255	; 0xff
 8017e22:	6875      	ldr	r5, [r6, #4]
 8017e24:	31fc      	adds	r1, #252	; 0xfc
 8017e26:	433d      	orrs	r5, r7
 8017e28:	6075      	str	r5, [r6, #4]
 8017e2a:	9d01      	ldr	r5, [sp, #4]
 8017e2c:	60cd      	str	r5, [r1, #12]
 8017e2e:	2c02      	cmp	r4, #2
 8017e30:	d102      	bne.n	8017e38 <__register_exitproc+0x68>
 8017e32:	68b1      	ldr	r1, [r6, #8]
 8017e34:	430f      	orrs	r7, r1
 8017e36:	60b7      	str	r7, [r6, #8]
 8017e38:	1c59      	adds	r1, r3, #1
 8017e3a:	6051      	str	r1, [r2, #4]
 8017e3c:	3302      	adds	r3, #2
 8017e3e:	9900      	ldr	r1, [sp, #0]
 8017e40:	009b      	lsls	r3, r3, #2
 8017e42:	5099      	str	r1, [r3, r2]
 8017e44:	f7ff fa53 	bl	80172ee <__retarget_lock_release_recursive>
 8017e48:	2000      	movs	r0, #0
 8017e4a:	e7dd      	b.n	8017e08 <__register_exitproc+0x38>
 8017e4c:	20000908 	.word	0x20000908
 8017e50:	0801c728 	.word	0x0801c728

08017e54 <__assert_func>:
 8017e54:	b530      	push	{r4, r5, lr}
 8017e56:	0014      	movs	r4, r2
 8017e58:	001a      	movs	r2, r3
 8017e5a:	4b09      	ldr	r3, [pc, #36]	; (8017e80 <__assert_func+0x2c>)
 8017e5c:	0005      	movs	r5, r0
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	b085      	sub	sp, #20
 8017e62:	68d8      	ldr	r0, [r3, #12]
 8017e64:	4b07      	ldr	r3, [pc, #28]	; (8017e84 <__assert_func+0x30>)
 8017e66:	2c00      	cmp	r4, #0
 8017e68:	d101      	bne.n	8017e6e <__assert_func+0x1a>
 8017e6a:	4b07      	ldr	r3, [pc, #28]	; (8017e88 <__assert_func+0x34>)
 8017e6c:	001c      	movs	r4, r3
 8017e6e:	9301      	str	r3, [sp, #4]
 8017e70:	9100      	str	r1, [sp, #0]
 8017e72:	002b      	movs	r3, r5
 8017e74:	4905      	ldr	r1, [pc, #20]	; (8017e8c <__assert_func+0x38>)
 8017e76:	9402      	str	r4, [sp, #8]
 8017e78:	f000 f85a 	bl	8017f30 <fiprintf>
 8017e7c:	f000 fe36 	bl	8018aec <abort>
 8017e80:	200000cc 	.word	0x200000cc
 8017e84:	0801ca24 	.word	0x0801ca24
 8017e88:	0801ca5f 	.word	0x0801ca5f
 8017e8c:	0801ca31 	.word	0x0801ca31

08017e90 <_calloc_r>:
 8017e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e92:	2500      	movs	r5, #0
 8017e94:	000e      	movs	r6, r1
 8017e96:	0c0c      	lsrs	r4, r1, #16
 8017e98:	0c13      	lsrs	r3, r2, #16
 8017e9a:	42ac      	cmp	r4, r5
 8017e9c:	d133      	bne.n	8017f06 <_calloc_r+0x76>
 8017e9e:	42ab      	cmp	r3, r5
 8017ea0:	d121      	bne.n	8017ee6 <_calloc_r+0x56>
 8017ea2:	b2b6      	uxth	r6, r6
 8017ea4:	b291      	uxth	r1, r2
 8017ea6:	4371      	muls	r1, r6
 8017ea8:	f7fb f8f2 	bl	8013090 <_malloc_r>
 8017eac:	1e04      	subs	r4, r0, #0
 8017eae:	d033      	beq.n	8017f18 <_calloc_r+0x88>
 8017eb0:	0003      	movs	r3, r0
 8017eb2:	3b08      	subs	r3, #8
 8017eb4:	685a      	ldr	r2, [r3, #4]
 8017eb6:	2303      	movs	r3, #3
 8017eb8:	439a      	bics	r2, r3
 8017eba:	3a04      	subs	r2, #4
 8017ebc:	2a24      	cmp	r2, #36	; 0x24
 8017ebe:	d832      	bhi.n	8017f26 <_calloc_r+0x96>
 8017ec0:	0003      	movs	r3, r0
 8017ec2:	2a13      	cmp	r2, #19
 8017ec4:	d90a      	bls.n	8017edc <_calloc_r+0x4c>
 8017ec6:	6005      	str	r5, [r0, #0]
 8017ec8:	6045      	str	r5, [r0, #4]
 8017eca:	3308      	adds	r3, #8
 8017ecc:	2a1b      	cmp	r2, #27
 8017ece:	d905      	bls.n	8017edc <_calloc_r+0x4c>
 8017ed0:	6085      	str	r5, [r0, #8]
 8017ed2:	60c5      	str	r5, [r0, #12]
 8017ed4:	2a24      	cmp	r2, #36	; 0x24
 8017ed6:	d021      	beq.n	8017f1c <_calloc_r+0x8c>
 8017ed8:	0003      	movs	r3, r0
 8017eda:	3310      	adds	r3, #16
 8017edc:	2200      	movs	r2, #0
 8017ede:	601a      	str	r2, [r3, #0]
 8017ee0:	605a      	str	r2, [r3, #4]
 8017ee2:	609a      	str	r2, [r3, #8]
 8017ee4:	e018      	b.n	8017f18 <_calloc_r+0x88>
 8017ee6:	1c1c      	adds	r4, r3, #0
 8017ee8:	1c31      	adds	r1, r6, #0
 8017eea:	b2b6      	uxth	r6, r6
 8017eec:	b292      	uxth	r2, r2
 8017eee:	b289      	uxth	r1, r1
 8017ef0:	4372      	muls	r2, r6
 8017ef2:	b2a3      	uxth	r3, r4
 8017ef4:	434b      	muls	r3, r1
 8017ef6:	0c11      	lsrs	r1, r2, #16
 8017ef8:	185b      	adds	r3, r3, r1
 8017efa:	0c19      	lsrs	r1, r3, #16
 8017efc:	d107      	bne.n	8017f0e <_calloc_r+0x7e>
 8017efe:	0419      	lsls	r1, r3, #16
 8017f00:	b292      	uxth	r2, r2
 8017f02:	4311      	orrs	r1, r2
 8017f04:	e7d0      	b.n	8017ea8 <_calloc_r+0x18>
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d101      	bne.n	8017f0e <_calloc_r+0x7e>
 8017f0a:	1c11      	adds	r1, r2, #0
 8017f0c:	e7ed      	b.n	8017eea <_calloc_r+0x5a>
 8017f0e:	f7fe fd4b 	bl	80169a8 <__errno>
 8017f12:	230c      	movs	r3, #12
 8017f14:	2400      	movs	r4, #0
 8017f16:	6003      	str	r3, [r0, #0]
 8017f18:	0020      	movs	r0, r4
 8017f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f1c:	0003      	movs	r3, r0
 8017f1e:	6105      	str	r5, [r0, #16]
 8017f20:	3318      	adds	r3, #24
 8017f22:	6145      	str	r5, [r0, #20]
 8017f24:	e7da      	b.n	8017edc <_calloc_r+0x4c>
 8017f26:	2100      	movs	r1, #0
 8017f28:	f7fb fadb 	bl	80134e2 <memset>
 8017f2c:	e7f4      	b.n	8017f18 <_calloc_r+0x88>
	...

08017f30 <fiprintf>:
 8017f30:	b40e      	push	{r1, r2, r3}
 8017f32:	b503      	push	{r0, r1, lr}
 8017f34:	0001      	movs	r1, r0
 8017f36:	ab03      	add	r3, sp, #12
 8017f38:	4804      	ldr	r0, [pc, #16]	; (8017f4c <fiprintf+0x1c>)
 8017f3a:	cb04      	ldmia	r3!, {r2}
 8017f3c:	6800      	ldr	r0, [r0, #0]
 8017f3e:	9301      	str	r3, [sp, #4]
 8017f40:	f000 f83a 	bl	8017fb8 <_vfiprintf_r>
 8017f44:	b002      	add	sp, #8
 8017f46:	bc08      	pop	{r3}
 8017f48:	b003      	add	sp, #12
 8017f4a:	4718      	bx	r3
 8017f4c:	200000cc 	.word	0x200000cc

08017f50 <__sprint_r>:
 8017f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f52:	b085      	sub	sp, #20
 8017f54:	9001      	str	r0, [sp, #4]
 8017f56:	6890      	ldr	r0, [r2, #8]
 8017f58:	000d      	movs	r5, r1
 8017f5a:	0014      	movs	r4, r2
 8017f5c:	2800      	cmp	r0, #0
 8017f5e:	d102      	bne.n	8017f66 <__sprint_r+0x16>
 8017f60:	6050      	str	r0, [r2, #4]
 8017f62:	b005      	add	sp, #20
 8017f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f66:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8017f68:	049b      	lsls	r3, r3, #18
 8017f6a:	d521      	bpl.n	8017fb0 <__sprint_r+0x60>
 8017f6c:	6817      	ldr	r7, [r2, #0]
 8017f6e:	2600      	movs	r6, #0
 8017f70:	683b      	ldr	r3, [r7, #0]
 8017f72:	9302      	str	r3, [sp, #8]
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	9300      	str	r3, [sp, #0]
 8017f78:	089b      	lsrs	r3, r3, #2
 8017f7a:	9303      	str	r3, [sp, #12]
 8017f7c:	9b03      	ldr	r3, [sp, #12]
 8017f7e:	42b3      	cmp	r3, r6
 8017f80:	dc0b      	bgt.n	8017f9a <__sprint_r+0x4a>
 8017f82:	2303      	movs	r3, #3
 8017f84:	9800      	ldr	r0, [sp, #0]
 8017f86:	3708      	adds	r7, #8
 8017f88:	4398      	bics	r0, r3
 8017f8a:	68a3      	ldr	r3, [r4, #8]
 8017f8c:	1a18      	subs	r0, r3, r0
 8017f8e:	60a0      	str	r0, [r4, #8]
 8017f90:	d1ed      	bne.n	8017f6e <__sprint_r+0x1e>
 8017f92:	2300      	movs	r3, #0
 8017f94:	60a3      	str	r3, [r4, #8]
 8017f96:	6063      	str	r3, [r4, #4]
 8017f98:	e7e3      	b.n	8017f62 <__sprint_r+0x12>
 8017f9a:	9902      	ldr	r1, [sp, #8]
 8017f9c:	00b3      	lsls	r3, r6, #2
 8017f9e:	58c9      	ldr	r1, [r1, r3]
 8017fa0:	002a      	movs	r2, r5
 8017fa2:	9801      	ldr	r0, [sp, #4]
 8017fa4:	f000 ff20 	bl	8018de8 <_fputwc_r>
 8017fa8:	1c43      	adds	r3, r0, #1
 8017faa:	d0f2      	beq.n	8017f92 <__sprint_r+0x42>
 8017fac:	3601      	adds	r6, #1
 8017fae:	e7e5      	b.n	8017f7c <__sprint_r+0x2c>
 8017fb0:	9801      	ldr	r0, [sp, #4]
 8017fb2:	f000 ff43 	bl	8018e3c <__sfvwrite_r>
 8017fb6:	e7ec      	b.n	8017f92 <__sprint_r+0x42>

08017fb8 <_vfiprintf_r>:
 8017fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fba:	b0c3      	sub	sp, #268	; 0x10c
 8017fbc:	000f      	movs	r7, r1
 8017fbe:	001c      	movs	r4, r3
 8017fc0:	001e      	movs	r6, r3
 8017fc2:	9006      	str	r0, [sp, #24]
 8017fc4:	9207      	str	r2, [sp, #28]
 8017fc6:	2800      	cmp	r0, #0
 8017fc8:	d005      	beq.n	8017fd6 <_vfiprintf_r+0x1e>
 8017fca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017fcc:	9303      	str	r3, [sp, #12]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d101      	bne.n	8017fd6 <_vfiprintf_r+0x1e>
 8017fd2:	f000 fea1 	bl	8018d18 <__sinit>
 8017fd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017fd8:	07db      	lsls	r3, r3, #31
 8017fda:	d405      	bmi.n	8017fe8 <_vfiprintf_r+0x30>
 8017fdc:	89bb      	ldrh	r3, [r7, #12]
 8017fde:	059b      	lsls	r3, r3, #22
 8017fe0:	d402      	bmi.n	8017fe8 <_vfiprintf_r+0x30>
 8017fe2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017fe4:	f7ff f982 	bl	80172ec <__retarget_lock_acquire_recursive>
 8017fe8:	230c      	movs	r3, #12
 8017fea:	5efa      	ldrsh	r2, [r7, r3]
 8017fec:	2380      	movs	r3, #128	; 0x80
 8017fee:	019b      	lsls	r3, r3, #6
 8017ff0:	421a      	tst	r2, r3
 8017ff2:	d105      	bne.n	8018000 <_vfiprintf_r+0x48>
 8017ff4:	4313      	orrs	r3, r2
 8017ff6:	81bb      	strh	r3, [r7, #12]
 8017ff8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017ffa:	4ba3      	ldr	r3, [pc, #652]	; (8018288 <_vfiprintf_r+0x2d0>)
 8017ffc:	4013      	ands	r3, r2
 8017ffe:	667b      	str	r3, [r7, #100]	; 0x64
 8018000:	89bb      	ldrh	r3, [r7, #12]
 8018002:	071b      	lsls	r3, r3, #28
 8018004:	d502      	bpl.n	801800c <_vfiprintf_r+0x54>
 8018006:	693b      	ldr	r3, [r7, #16]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d115      	bne.n	8018038 <_vfiprintf_r+0x80>
 801800c:	0039      	movs	r1, r7
 801800e:	9806      	ldr	r0, [sp, #24]
 8018010:	f000 fd08 	bl	8018a24 <__swsetup_r>
 8018014:	2800      	cmp	r0, #0
 8018016:	d00f      	beq.n	8018038 <_vfiprintf_r+0x80>
 8018018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801801a:	07db      	lsls	r3, r3, #31
 801801c:	d505      	bpl.n	801802a <_vfiprintf_r+0x72>
 801801e:	2301      	movs	r3, #1
 8018020:	425b      	negs	r3, r3
 8018022:	9308      	str	r3, [sp, #32]
 8018024:	9808      	ldr	r0, [sp, #32]
 8018026:	b043      	add	sp, #268	; 0x10c
 8018028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801802a:	89bb      	ldrh	r3, [r7, #12]
 801802c:	059b      	lsls	r3, r3, #22
 801802e:	d4f6      	bmi.n	801801e <_vfiprintf_r+0x66>
 8018030:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8018032:	f7ff f95c 	bl	80172ee <__retarget_lock_release_recursive>
 8018036:	e7f2      	b.n	801801e <_vfiprintf_r+0x66>
 8018038:	231a      	movs	r3, #26
 801803a:	89ba      	ldrh	r2, [r7, #12]
 801803c:	4013      	ands	r3, r2
 801803e:	2b0a      	cmp	r3, #10
 8018040:	d113      	bne.n	801806a <_vfiprintf_r+0xb2>
 8018042:	210e      	movs	r1, #14
 8018044:	5e7b      	ldrsh	r3, [r7, r1]
 8018046:	2b00      	cmp	r3, #0
 8018048:	db0f      	blt.n	801806a <_vfiprintf_r+0xb2>
 801804a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801804c:	07db      	lsls	r3, r3, #31
 801804e:	d404      	bmi.n	801805a <_vfiprintf_r+0xa2>
 8018050:	0593      	lsls	r3, r2, #22
 8018052:	d402      	bmi.n	801805a <_vfiprintf_r+0xa2>
 8018054:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8018056:	f7ff f94a 	bl	80172ee <__retarget_lock_release_recursive>
 801805a:	0023      	movs	r3, r4
 801805c:	0039      	movs	r1, r7
 801805e:	9a07      	ldr	r2, [sp, #28]
 8018060:	9806      	ldr	r0, [sp, #24]
 8018062:	f000 fc9b 	bl	801899c <__sbprintf>
 8018066:	9008      	str	r0, [sp, #32]
 8018068:	e7dc      	b.n	8018024 <_vfiprintf_r+0x6c>
 801806a:	2300      	movs	r3, #0
 801806c:	aa19      	add	r2, sp, #100	; 0x64
 801806e:	9216      	str	r2, [sp, #88]	; 0x58
 8018070:	9318      	str	r3, [sp, #96]	; 0x60
 8018072:	9317      	str	r3, [sp, #92]	; 0x5c
 8018074:	9203      	str	r2, [sp, #12]
 8018076:	930c      	str	r3, [sp, #48]	; 0x30
 8018078:	930d      	str	r3, [sp, #52]	; 0x34
 801807a:	930e      	str	r3, [sp, #56]	; 0x38
 801807c:	930f      	str	r3, [sp, #60]	; 0x3c
 801807e:	9308      	str	r3, [sp, #32]
 8018080:	9c07      	ldr	r4, [sp, #28]
 8018082:	7823      	ldrb	r3, [r4, #0]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d002      	beq.n	801808e <_vfiprintf_r+0xd6>
 8018088:	2b25      	cmp	r3, #37	; 0x25
 801808a:	d000      	beq.n	801808e <_vfiprintf_r+0xd6>
 801808c:	e089      	b.n	80181a2 <_vfiprintf_r+0x1ea>
 801808e:	9b07      	ldr	r3, [sp, #28]
 8018090:	1ae5      	subs	r5, r4, r3
 8018092:	429c      	cmp	r4, r3
 8018094:	d011      	beq.n	80180ba <_vfiprintf_r+0x102>
 8018096:	9b03      	ldr	r3, [sp, #12]
 8018098:	9a07      	ldr	r2, [sp, #28]
 801809a:	c324      	stmia	r3!, {r2, r5}
 801809c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801809e:	195b      	adds	r3, r3, r5
 80180a0:	9318      	str	r3, [sp, #96]	; 0x60
 80180a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80180a4:	9304      	str	r3, [sp, #16]
 80180a6:	3301      	adds	r3, #1
 80180a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80180aa:	2b07      	cmp	r3, #7
 80180ac:	dc7b      	bgt.n	80181a6 <_vfiprintf_r+0x1ee>
 80180ae:	9b03      	ldr	r3, [sp, #12]
 80180b0:	3308      	adds	r3, #8
 80180b2:	9303      	str	r3, [sp, #12]
 80180b4:	9b08      	ldr	r3, [sp, #32]
 80180b6:	195b      	adds	r3, r3, r5
 80180b8:	9308      	str	r3, [sp, #32]
 80180ba:	7823      	ldrb	r3, [r4, #0]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d101      	bne.n	80180c4 <_vfiprintf_r+0x10c>
 80180c0:	f000 fc29 	bl	8018916 <_vfiprintf_r+0x95e>
 80180c4:	2200      	movs	r2, #0
 80180c6:	a914      	add	r1, sp, #80	; 0x50
 80180c8:	70ca      	strb	r2, [r1, #3]
 80180ca:	2101      	movs	r1, #1
 80180cc:	1c63      	adds	r3, r4, #1
 80180ce:	250a      	movs	r5, #10
 80180d0:	0014      	movs	r4, r2
 80180d2:	4249      	negs	r1, r1
 80180d4:	9105      	str	r1, [sp, #20]
 80180d6:	9209      	str	r2, [sp, #36]	; 0x24
 80180d8:	1c5a      	adds	r2, r3, #1
 80180da:	781b      	ldrb	r3, [r3, #0]
 80180dc:	9207      	str	r2, [sp, #28]
 80180de:	0018      	movs	r0, r3
 80180e0:	3820      	subs	r0, #32
 80180e2:	285a      	cmp	r0, #90	; 0x5a
 80180e4:	d900      	bls.n	80180e8 <_vfiprintf_r+0x130>
 80180e6:	e376      	b.n	80187d6 <_vfiprintf_r+0x81e>
 80180e8:	f7e8 f828 	bl	800013c <__gnu_thumb1_case_uhi>
 80180ec:	037500a2 	.word	0x037500a2
 80180f0:	00ab0375 	.word	0x00ab0375
 80180f4:	03750375 	.word	0x03750375
 80180f8:	00870375 	.word	0x00870375
 80180fc:	03750375 	.word	0x03750375
 8018100:	00b500ad 	.word	0x00b500ad
 8018104:	00b30375 	.word	0x00b30375
 8018108:	037500b9 	.word	0x037500b9
 801810c:	00df00dd 	.word	0x00df00dd
 8018110:	00df00df 	.word	0x00df00df
 8018114:	00df00df 	.word	0x00df00df
 8018118:	00df00df 	.word	0x00df00df
 801811c:	00df00df 	.word	0x00df00df
 8018120:	03750375 	.word	0x03750375
 8018124:	03750375 	.word	0x03750375
 8018128:	03750375 	.word	0x03750375
 801812c:	03750375 	.word	0x03750375
 8018130:	01070375 	.word	0x01070375
 8018134:	037501f9 	.word	0x037501f9
 8018138:	03750375 	.word	0x03750375
 801813c:	03750375 	.word	0x03750375
 8018140:	03750375 	.word	0x03750375
 8018144:	03750375 	.word	0x03750375
 8018148:	02570375 	.word	0x02570375
 801814c:	03750375 	.word	0x03750375
 8018150:	02980375 	.word	0x02980375
 8018154:	02b10375 	.word	0x02b10375
 8018158:	03750375 	.word	0x03750375
 801815c:	037502ec 	.word	0x037502ec
 8018160:	03750375 	.word	0x03750375
 8018164:	03750375 	.word	0x03750375
 8018168:	03750375 	.word	0x03750375
 801816c:	03750375 	.word	0x03750375
 8018170:	01070375 	.word	0x01070375
 8018174:	037501fb 	.word	0x037501fb
 8018178:	03750375 	.word	0x03750375
 801817c:	01fb00f0 	.word	0x01fb00f0
 8018180:	03750103 	.word	0x03750103
 8018184:	037500fc 	.word	0x037500fc
 8018188:	0259023a 	.word	0x0259023a
 801818c:	01030288 	.word	0x01030288
 8018190:	02980375 	.word	0x02980375
 8018194:	02b300a9 	.word	0x02b300a9
 8018198:	03750375 	.word	0x03750375
 801819c:	03750067 	.word	0x03750067
 80181a0:	00a9      	.short	0x00a9
 80181a2:	3401      	adds	r4, #1
 80181a4:	e76d      	b.n	8018082 <_vfiprintf_r+0xca>
 80181a6:	0039      	movs	r1, r7
 80181a8:	9806      	ldr	r0, [sp, #24]
 80181aa:	aa16      	add	r2, sp, #88	; 0x58
 80181ac:	f7ff fed0 	bl	8017f50 <__sprint_r>
 80181b0:	2800      	cmp	r0, #0
 80181b2:	d000      	beq.n	80181b6 <_vfiprintf_r+0x1fe>
 80181b4:	e38e      	b.n	80188d4 <_vfiprintf_r+0x91c>
 80181b6:	ab19      	add	r3, sp, #100	; 0x64
 80181b8:	e77b      	b.n	80180b2 <_vfiprintf_r+0xfa>
 80181ba:	4a34      	ldr	r2, [pc, #208]	; (801828c <_vfiprintf_r+0x2d4>)
 80181bc:	0020      	movs	r0, r4
 80181be:	920c      	str	r2, [sp, #48]	; 0x30
 80181c0:	2220      	movs	r2, #32
 80181c2:	4010      	ands	r0, r2
 80181c4:	4214      	tst	r4, r2
 80181c6:	d100      	bne.n	80181ca <_vfiprintf_r+0x212>
 80181c8:	e27e      	b.n	80186c8 <_vfiprintf_r+0x710>
 80181ca:	3a19      	subs	r2, #25
 80181cc:	3607      	adds	r6, #7
 80181ce:	4396      	bics	r6, r2
 80181d0:	0030      	movs	r0, r6
 80181d2:	c806      	ldmia	r0!, {r1, r2}
 80181d4:	9100      	str	r1, [sp, #0]
 80181d6:	9201      	str	r2, [sp, #4]
 80181d8:	9004      	str	r0, [sp, #16]
 80181da:	07e2      	lsls	r2, r4, #31
 80181dc:	d509      	bpl.n	80181f2 <_vfiprintf_r+0x23a>
 80181de:	9a00      	ldr	r2, [sp, #0]
 80181e0:	9901      	ldr	r1, [sp, #4]
 80181e2:	430a      	orrs	r2, r1
 80181e4:	d005      	beq.n	80181f2 <_vfiprintf_r+0x23a>
 80181e6:	aa15      	add	r2, sp, #84	; 0x54
 80181e8:	2130      	movs	r1, #48	; 0x30
 80181ea:	7053      	strb	r3, [r2, #1]
 80181ec:	2302      	movs	r3, #2
 80181ee:	7011      	strb	r1, [r2, #0]
 80181f0:	431c      	orrs	r4, r3
 80181f2:	4b27      	ldr	r3, [pc, #156]	; (8018290 <_vfiprintf_r+0x2d8>)
 80181f4:	401c      	ands	r4, r3
 80181f6:	2302      	movs	r3, #2
 80181f8:	e1e1      	b.n	80185be <_vfiprintf_r+0x606>
 80181fa:	9806      	ldr	r0, [sp, #24]
 80181fc:	f7ff f870 	bl	80172e0 <_localeconv_r>
 8018200:	6843      	ldr	r3, [r0, #4]
 8018202:	0018      	movs	r0, r3
 8018204:	930f      	str	r3, [sp, #60]	; 0x3c
 8018206:	f7e7 ff87 	bl	8000118 <strlen>
 801820a:	900e      	str	r0, [sp, #56]	; 0x38
 801820c:	9806      	ldr	r0, [sp, #24]
 801820e:	f7ff f867 	bl	80172e0 <_localeconv_r>
 8018212:	6883      	ldr	r3, [r0, #8]
 8018214:	930d      	str	r3, [sp, #52]	; 0x34
 8018216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018218:	2b00      	cmp	r3, #0
 801821a:	d010      	beq.n	801823e <_vfiprintf_r+0x286>
 801821c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801821e:	2b00      	cmp	r3, #0
 8018220:	d00d      	beq.n	801823e <_vfiprintf_r+0x286>
 8018222:	781b      	ldrb	r3, [r3, #0]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d00a      	beq.n	801823e <_vfiprintf_r+0x286>
 8018228:	2380      	movs	r3, #128	; 0x80
 801822a:	00db      	lsls	r3, r3, #3
 801822c:	431c      	orrs	r4, r3
 801822e:	e006      	b.n	801823e <_vfiprintf_r+0x286>
 8018230:	ab14      	add	r3, sp, #80	; 0x50
 8018232:	78da      	ldrb	r2, [r3, #3]
 8018234:	3303      	adds	r3, #3
 8018236:	2a00      	cmp	r2, #0
 8018238:	d101      	bne.n	801823e <_vfiprintf_r+0x286>
 801823a:	3220      	adds	r2, #32
 801823c:	701a      	strb	r2, [r3, #0]
 801823e:	9b07      	ldr	r3, [sp, #28]
 8018240:	e74a      	b.n	80180d8 <_vfiprintf_r+0x120>
 8018242:	2301      	movs	r3, #1
 8018244:	e7f2      	b.n	801822c <_vfiprintf_r+0x274>
 8018246:	ce08      	ldmia	r6!, {r3}
 8018248:	9309      	str	r3, [sp, #36]	; 0x24
 801824a:	2b00      	cmp	r3, #0
 801824c:	daf7      	bge.n	801823e <_vfiprintf_r+0x286>
 801824e:	425b      	negs	r3, r3
 8018250:	9309      	str	r3, [sp, #36]	; 0x24
 8018252:	2304      	movs	r3, #4
 8018254:	e7ea      	b.n	801822c <_vfiprintf_r+0x274>
 8018256:	222b      	movs	r2, #43	; 0x2b
 8018258:	ab14      	add	r3, sp, #80	; 0x50
 801825a:	70da      	strb	r2, [r3, #3]
 801825c:	e7ef      	b.n	801823e <_vfiprintf_r+0x286>
 801825e:	9b07      	ldr	r3, [sp, #28]
 8018260:	1c5a      	adds	r2, r3, #1
 8018262:	781b      	ldrb	r3, [r3, #0]
 8018264:	2b2a      	cmp	r3, #42	; 0x2a
 8018266:	d015      	beq.n	8018294 <_vfiprintf_r+0x2dc>
 8018268:	2100      	movs	r1, #0
 801826a:	9105      	str	r1, [sp, #20]
 801826c:	0019      	movs	r1, r3
 801826e:	3930      	subs	r1, #48	; 0x30
 8018270:	9207      	str	r2, [sp, #28]
 8018272:	2909      	cmp	r1, #9
 8018274:	d900      	bls.n	8018278 <_vfiprintf_r+0x2c0>
 8018276:	e732      	b.n	80180de <_vfiprintf_r+0x126>
 8018278:	9805      	ldr	r0, [sp, #20]
 801827a:	4368      	muls	r0, r5
 801827c:	1843      	adds	r3, r0, r1
 801827e:	9305      	str	r3, [sp, #20]
 8018280:	7813      	ldrb	r3, [r2, #0]
 8018282:	3201      	adds	r2, #1
 8018284:	e7f2      	b.n	801826c <_vfiprintf_r+0x2b4>
 8018286:	46c0      	nop			; (mov r8, r8)
 8018288:	ffffdfff 	.word	0xffffdfff
 801828c:	0801c790 	.word	0x0801c790
 8018290:	fffffbff 	.word	0xfffffbff
 8018294:	ce08      	ldmia	r6!, {r3}
 8018296:	9305      	str	r3, [sp, #20]
 8018298:	2b00      	cmp	r3, #0
 801829a:	da02      	bge.n	80182a2 <_vfiprintf_r+0x2ea>
 801829c:	2301      	movs	r3, #1
 801829e:	425b      	negs	r3, r3
 80182a0:	9305      	str	r3, [sp, #20]
 80182a2:	9207      	str	r2, [sp, #28]
 80182a4:	e7cb      	b.n	801823e <_vfiprintf_r+0x286>
 80182a6:	2380      	movs	r3, #128	; 0x80
 80182a8:	e7c0      	b.n	801822c <_vfiprintf_r+0x274>
 80182aa:	2100      	movs	r1, #0
 80182ac:	9a07      	ldr	r2, [sp, #28]
 80182ae:	9109      	str	r1, [sp, #36]	; 0x24
 80182b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80182b2:	3b30      	subs	r3, #48	; 0x30
 80182b4:	4369      	muls	r1, r5
 80182b6:	185b      	adds	r3, r3, r1
 80182b8:	9309      	str	r3, [sp, #36]	; 0x24
 80182ba:	0013      	movs	r3, r2
 80182bc:	781b      	ldrb	r3, [r3, #0]
 80182be:	3201      	adds	r2, #1
 80182c0:	0019      	movs	r1, r3
 80182c2:	3930      	subs	r1, #48	; 0x30
 80182c4:	9207      	str	r2, [sp, #28]
 80182c6:	2909      	cmp	r1, #9
 80182c8:	d9f2      	bls.n	80182b0 <_vfiprintf_r+0x2f8>
 80182ca:	e708      	b.n	80180de <_vfiprintf_r+0x126>
 80182cc:	9b07      	ldr	r3, [sp, #28]
 80182ce:	781b      	ldrb	r3, [r3, #0]
 80182d0:	2b68      	cmp	r3, #104	; 0x68
 80182d2:	d105      	bne.n	80182e0 <_vfiprintf_r+0x328>
 80182d4:	9b07      	ldr	r3, [sp, #28]
 80182d6:	3301      	adds	r3, #1
 80182d8:	9307      	str	r3, [sp, #28]
 80182da:	2380      	movs	r3, #128	; 0x80
 80182dc:	009b      	lsls	r3, r3, #2
 80182de:	e7a5      	b.n	801822c <_vfiprintf_r+0x274>
 80182e0:	2340      	movs	r3, #64	; 0x40
 80182e2:	e7a3      	b.n	801822c <_vfiprintf_r+0x274>
 80182e4:	9b07      	ldr	r3, [sp, #28]
 80182e6:	781b      	ldrb	r3, [r3, #0]
 80182e8:	2b6c      	cmp	r3, #108	; 0x6c
 80182ea:	d104      	bne.n	80182f6 <_vfiprintf_r+0x33e>
 80182ec:	9b07      	ldr	r3, [sp, #28]
 80182ee:	3301      	adds	r3, #1
 80182f0:	9307      	str	r3, [sp, #28]
 80182f2:	2320      	movs	r3, #32
 80182f4:	e79a      	b.n	801822c <_vfiprintf_r+0x274>
 80182f6:	2310      	movs	r3, #16
 80182f8:	e798      	b.n	801822c <_vfiprintf_r+0x274>
 80182fa:	0032      	movs	r2, r6
 80182fc:	2600      	movs	r6, #0
 80182fe:	ca08      	ldmia	r2!, {r3}
 8018300:	ad29      	add	r5, sp, #164	; 0xa4
 8018302:	702b      	strb	r3, [r5, #0]
 8018304:	ab14      	add	r3, sp, #80	; 0x50
 8018306:	70de      	strb	r6, [r3, #3]
 8018308:	2301      	movs	r3, #1
 801830a:	9204      	str	r2, [sp, #16]
 801830c:	9305      	str	r3, [sp, #20]
 801830e:	960b      	str	r6, [sp, #44]	; 0x2c
 8018310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018312:	9a05      	ldr	r2, [sp, #20]
 8018314:	930a      	str	r3, [sp, #40]	; 0x28
 8018316:	4293      	cmp	r3, r2
 8018318:	da00      	bge.n	801831c <_vfiprintf_r+0x364>
 801831a:	920a      	str	r2, [sp, #40]	; 0x28
 801831c:	ab14      	add	r3, sp, #80	; 0x50
 801831e:	3303      	adds	r3, #3
 8018320:	781b      	ldrb	r3, [r3, #0]
 8018322:	1e5a      	subs	r2, r3, #1
 8018324:	4193      	sbcs	r3, r2
 8018326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018328:	18d3      	adds	r3, r2, r3
 801832a:	930a      	str	r3, [sp, #40]	; 0x28
 801832c:	0022      	movs	r2, r4
 801832e:	2302      	movs	r3, #2
 8018330:	401a      	ands	r2, r3
 8018332:	9210      	str	r2, [sp, #64]	; 0x40
 8018334:	421c      	tst	r4, r3
 8018336:	d002      	beq.n	801833e <_vfiprintf_r+0x386>
 8018338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801833a:	3302      	adds	r3, #2
 801833c:	930a      	str	r3, [sp, #40]	; 0x28
 801833e:	2384      	movs	r3, #132	; 0x84
 8018340:	0022      	movs	r2, r4
 8018342:	401a      	ands	r2, r3
 8018344:	9211      	str	r2, [sp, #68]	; 0x44
 8018346:	421c      	tst	r4, r3
 8018348:	d122      	bne.n	8018390 <_vfiprintf_r+0x3d8>
 801834a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801834c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801834e:	1a9e      	subs	r6, r3, r2
 8018350:	2e00      	cmp	r6, #0
 8018352:	dd1d      	ble.n	8018390 <_vfiprintf_r+0x3d8>
 8018354:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018356:	9903      	ldr	r1, [sp, #12]
 8018358:	469c      	mov	ip, r3
 801835a:	48d0      	ldr	r0, [pc, #832]	; (801869c <_vfiprintf_r+0x6e4>)
 801835c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801835e:	9a03      	ldr	r2, [sp, #12]
 8018360:	9312      	str	r3, [sp, #72]	; 0x48
 8018362:	3108      	adds	r1, #8
 8018364:	3301      	adds	r3, #1
 8018366:	6010      	str	r0, [r2, #0]
 8018368:	2e10      	cmp	r6, #16
 801836a:	dd00      	ble.n	801836e <_vfiprintf_r+0x3b6>
 801836c:	e240      	b.n	80187f0 <_vfiprintf_r+0x838>
 801836e:	6056      	str	r6, [r2, #4]
 8018370:	4466      	add	r6, ip
 8018372:	9618      	str	r6, [sp, #96]	; 0x60
 8018374:	9317      	str	r3, [sp, #92]	; 0x5c
 8018376:	9103      	str	r1, [sp, #12]
 8018378:	2b07      	cmp	r3, #7
 801837a:	dd09      	ble.n	8018390 <_vfiprintf_r+0x3d8>
 801837c:	0039      	movs	r1, r7
 801837e:	9806      	ldr	r0, [sp, #24]
 8018380:	aa16      	add	r2, sp, #88	; 0x58
 8018382:	f7ff fde5 	bl	8017f50 <__sprint_r>
 8018386:	2800      	cmp	r0, #0
 8018388:	d000      	beq.n	801838c <_vfiprintf_r+0x3d4>
 801838a:	e2a3      	b.n	80188d4 <_vfiprintf_r+0x91c>
 801838c:	ab19      	add	r3, sp, #100	; 0x64
 801838e:	9303      	str	r3, [sp, #12]
 8018390:	ab14      	add	r3, sp, #80	; 0x50
 8018392:	1cda      	adds	r2, r3, #3
 8018394:	78db      	ldrb	r3, [r3, #3]
 8018396:	2b00      	cmp	r3, #0
 8018398:	d012      	beq.n	80183c0 <_vfiprintf_r+0x408>
 801839a:	9903      	ldr	r1, [sp, #12]
 801839c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801839e:	600a      	str	r2, [r1, #0]
 80183a0:	2201      	movs	r2, #1
 80183a2:	9312      	str	r3, [sp, #72]	; 0x48
 80183a4:	604a      	str	r2, [r1, #4]
 80183a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80183a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80183aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80183ac:	3201      	adds	r2, #1
 80183ae:	3301      	adds	r3, #1
 80183b0:	9218      	str	r2, [sp, #96]	; 0x60
 80183b2:	9317      	str	r3, [sp, #92]	; 0x5c
 80183b4:	2b07      	cmp	r3, #7
 80183b6:	dd00      	ble.n	80183ba <_vfiprintf_r+0x402>
 80183b8:	e22d      	b.n	8018816 <_vfiprintf_r+0x85e>
 80183ba:	000b      	movs	r3, r1
 80183bc:	3308      	adds	r3, #8
 80183be:	9303      	str	r3, [sp, #12]
 80183c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d013      	beq.n	80183ee <_vfiprintf_r+0x436>
 80183c6:	9903      	ldr	r1, [sp, #12]
 80183c8:	aa15      	add	r2, sp, #84	; 0x54
 80183ca:	600a      	str	r2, [r1, #0]
 80183cc:	2202      	movs	r2, #2
 80183ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80183d0:	604a      	str	r2, [r1, #4]
 80183d2:	9310      	str	r3, [sp, #64]	; 0x40
 80183d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80183d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80183d8:	3202      	adds	r2, #2
 80183da:	9312      	str	r3, [sp, #72]	; 0x48
 80183dc:	3301      	adds	r3, #1
 80183de:	9218      	str	r2, [sp, #96]	; 0x60
 80183e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80183e2:	2b07      	cmp	r3, #7
 80183e4:	dd00      	ble.n	80183e8 <_vfiprintf_r+0x430>
 80183e6:	e21f      	b.n	8018828 <_vfiprintf_r+0x870>
 80183e8:	000b      	movs	r3, r1
 80183ea:	3308      	adds	r3, #8
 80183ec:	9303      	str	r3, [sp, #12]
 80183ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80183f0:	2b80      	cmp	r3, #128	; 0x80
 80183f2:	d122      	bne.n	801843a <_vfiprintf_r+0x482>
 80183f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80183f8:	1a9e      	subs	r6, r3, r2
 80183fa:	2e00      	cmp	r6, #0
 80183fc:	dd1d      	ble.n	801843a <_vfiprintf_r+0x482>
 80183fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018400:	9903      	ldr	r1, [sp, #12]
 8018402:	469c      	mov	ip, r3
 8018404:	48a6      	ldr	r0, [pc, #664]	; (80186a0 <_vfiprintf_r+0x6e8>)
 8018406:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018408:	9a03      	ldr	r2, [sp, #12]
 801840a:	9310      	str	r3, [sp, #64]	; 0x40
 801840c:	3108      	adds	r1, #8
 801840e:	3301      	adds	r3, #1
 8018410:	6010      	str	r0, [r2, #0]
 8018412:	2e10      	cmp	r6, #16
 8018414:	dd00      	ble.n	8018418 <_vfiprintf_r+0x460>
 8018416:	e210      	b.n	801883a <_vfiprintf_r+0x882>
 8018418:	6056      	str	r6, [r2, #4]
 801841a:	4466      	add	r6, ip
 801841c:	9618      	str	r6, [sp, #96]	; 0x60
 801841e:	9317      	str	r3, [sp, #92]	; 0x5c
 8018420:	9103      	str	r1, [sp, #12]
 8018422:	2b07      	cmp	r3, #7
 8018424:	dd09      	ble.n	801843a <_vfiprintf_r+0x482>
 8018426:	0039      	movs	r1, r7
 8018428:	9806      	ldr	r0, [sp, #24]
 801842a:	aa16      	add	r2, sp, #88	; 0x58
 801842c:	f7ff fd90 	bl	8017f50 <__sprint_r>
 8018430:	2800      	cmp	r0, #0
 8018432:	d000      	beq.n	8018436 <_vfiprintf_r+0x47e>
 8018434:	e24e      	b.n	80188d4 <_vfiprintf_r+0x91c>
 8018436:	ab19      	add	r3, sp, #100	; 0x64
 8018438:	9303      	str	r3, [sp, #12]
 801843a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801843c:	9a05      	ldr	r2, [sp, #20]
 801843e:	1a9e      	subs	r6, r3, r2
 8018440:	2e00      	cmp	r6, #0
 8018442:	dd1d      	ble.n	8018480 <_vfiprintf_r+0x4c8>
 8018444:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018446:	9903      	ldr	r1, [sp, #12]
 8018448:	469c      	mov	ip, r3
 801844a:	4895      	ldr	r0, [pc, #596]	; (80186a0 <_vfiprintf_r+0x6e8>)
 801844c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801844e:	9a03      	ldr	r2, [sp, #12]
 8018450:	930b      	str	r3, [sp, #44]	; 0x2c
 8018452:	3108      	adds	r1, #8
 8018454:	3301      	adds	r3, #1
 8018456:	6010      	str	r0, [r2, #0]
 8018458:	2e10      	cmp	r6, #16
 801845a:	dd00      	ble.n	801845e <_vfiprintf_r+0x4a6>
 801845c:	e200      	b.n	8018860 <_vfiprintf_r+0x8a8>
 801845e:	6056      	str	r6, [r2, #4]
 8018460:	4466      	add	r6, ip
 8018462:	9618      	str	r6, [sp, #96]	; 0x60
 8018464:	9317      	str	r3, [sp, #92]	; 0x5c
 8018466:	9103      	str	r1, [sp, #12]
 8018468:	2b07      	cmp	r3, #7
 801846a:	dd09      	ble.n	8018480 <_vfiprintf_r+0x4c8>
 801846c:	0039      	movs	r1, r7
 801846e:	9806      	ldr	r0, [sp, #24]
 8018470:	aa16      	add	r2, sp, #88	; 0x58
 8018472:	f7ff fd6d 	bl	8017f50 <__sprint_r>
 8018476:	2800      	cmp	r0, #0
 8018478:	d000      	beq.n	801847c <_vfiprintf_r+0x4c4>
 801847a:	e22b      	b.n	80188d4 <_vfiprintf_r+0x91c>
 801847c:	ab19      	add	r3, sp, #100	; 0x64
 801847e:	9303      	str	r3, [sp, #12]
 8018480:	9b03      	ldr	r3, [sp, #12]
 8018482:	9a05      	ldr	r2, [sp, #20]
 8018484:	601d      	str	r5, [r3, #0]
 8018486:	605a      	str	r2, [r3, #4]
 8018488:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801848a:	0010      	movs	r0, r2
 801848c:	469c      	mov	ip, r3
 801848e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018490:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018492:	4460      	add	r0, ip
 8018494:	9305      	str	r3, [sp, #20]
 8018496:	3301      	adds	r3, #1
 8018498:	9018      	str	r0, [sp, #96]	; 0x60
 801849a:	9317      	str	r3, [sp, #92]	; 0x5c
 801849c:	2b07      	cmp	r3, #7
 801849e:	dd00      	ble.n	80184a2 <_vfiprintf_r+0x4ea>
 80184a0:	e1f1      	b.n	8018886 <_vfiprintf_r+0x8ce>
 80184a2:	9b03      	ldr	r3, [sp, #12]
 80184a4:	3308      	adds	r3, #8
 80184a6:	0762      	lsls	r2, r4, #29
 80184a8:	d500      	bpl.n	80184ac <_vfiprintf_r+0x4f4>
 80184aa:	e1f5      	b.n	8018898 <_vfiprintf_r+0x8e0>
 80184ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80184b0:	4293      	cmp	r3, r2
 80184b2:	da00      	bge.n	80184b6 <_vfiprintf_r+0x4fe>
 80184b4:	0013      	movs	r3, r2
 80184b6:	9a08      	ldr	r2, [sp, #32]
 80184b8:	18d3      	adds	r3, r2, r3
 80184ba:	9308      	str	r3, [sp, #32]
 80184bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80184be:	9303      	str	r3, [sp, #12]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d007      	beq.n	80184d4 <_vfiprintf_r+0x51c>
 80184c4:	0039      	movs	r1, r7
 80184c6:	9806      	ldr	r0, [sp, #24]
 80184c8:	aa16      	add	r2, sp, #88	; 0x58
 80184ca:	f7ff fd41 	bl	8017f50 <__sprint_r>
 80184ce:	2800      	cmp	r0, #0
 80184d0:	d000      	beq.n	80184d4 <_vfiprintf_r+0x51c>
 80184d2:	e1ff      	b.n	80188d4 <_vfiprintf_r+0x91c>
 80184d4:	2300      	movs	r3, #0
 80184d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80184d8:	ab19      	add	r3, sp, #100	; 0x64
 80184da:	9303      	str	r3, [sp, #12]
 80184dc:	e049      	b.n	8018572 <_vfiprintf_r+0x5ba>
 80184de:	2310      	movs	r3, #16
 80184e0:	431c      	orrs	r4, r3
 80184e2:	06a3      	lsls	r3, r4, #26
 80184e4:	d52b      	bpl.n	801853e <_vfiprintf_r+0x586>
 80184e6:	2307      	movs	r3, #7
 80184e8:	3607      	adds	r6, #7
 80184ea:	439e      	bics	r6, r3
 80184ec:	0031      	movs	r1, r6
 80184ee:	c90c      	ldmia	r1!, {r2, r3}
 80184f0:	9200      	str	r2, [sp, #0]
 80184f2:	9301      	str	r3, [sp, #4]
 80184f4:	9104      	str	r1, [sp, #16]
 80184f6:	9a01      	ldr	r2, [sp, #4]
 80184f8:	2301      	movs	r3, #1
 80184fa:	2a00      	cmp	r2, #0
 80184fc:	da09      	bge.n	8018512 <_vfiprintf_r+0x55a>
 80184fe:	9d00      	ldr	r5, [sp, #0]
 8018500:	9e01      	ldr	r6, [sp, #4]
 8018502:	2200      	movs	r2, #0
 8018504:	4269      	negs	r1, r5
 8018506:	41b2      	sbcs	r2, r6
 8018508:	9100      	str	r1, [sp, #0]
 801850a:	9201      	str	r2, [sp, #4]
 801850c:	212d      	movs	r1, #45	; 0x2d
 801850e:	aa14      	add	r2, sp, #80	; 0x50
 8018510:	70d1      	strb	r1, [r2, #3]
 8018512:	9901      	ldr	r1, [sp, #4]
 8018514:	9a00      	ldr	r2, [sp, #0]
 8018516:	430a      	orrs	r2, r1
 8018518:	9905      	ldr	r1, [sp, #20]
 801851a:	3101      	adds	r1, #1
 801851c:	d100      	bne.n	8018520 <_vfiprintf_r+0x568>
 801851e:	e209      	b.n	8018934 <_vfiprintf_r+0x97c>
 8018520:	2180      	movs	r1, #128	; 0x80
 8018522:	0020      	movs	r0, r4
 8018524:	4388      	bics	r0, r1
 8018526:	900a      	str	r0, [sp, #40]	; 0x28
 8018528:	2a00      	cmp	r2, #0
 801852a:	d000      	beq.n	801852e <_vfiprintf_r+0x576>
 801852c:	e206      	b.n	801893c <_vfiprintf_r+0x984>
 801852e:	9a05      	ldr	r2, [sp, #20]
 8018530:	2a00      	cmp	r2, #0
 8018532:	d100      	bne.n	8018536 <_vfiprintf_r+0x57e>
 8018534:	e143      	b.n	80187be <_vfiprintf_r+0x806>
 8018536:	2b01      	cmp	r3, #1
 8018538:	d000      	beq.n	801853c <_vfiprintf_r+0x584>
 801853a:	e202      	b.n	8018942 <_vfiprintf_r+0x98a>
 801853c:	e0e6      	b.n	801870c <_vfiprintf_r+0x754>
 801853e:	0032      	movs	r2, r6
 8018540:	ca08      	ldmia	r2!, {r3}
 8018542:	9204      	str	r2, [sp, #16]
 8018544:	06e2      	lsls	r2, r4, #27
 8018546:	d503      	bpl.n	8018550 <_vfiprintf_r+0x598>
 8018548:	9300      	str	r3, [sp, #0]
 801854a:	17db      	asrs	r3, r3, #31
 801854c:	9301      	str	r3, [sp, #4]
 801854e:	e7d2      	b.n	80184f6 <_vfiprintf_r+0x53e>
 8018550:	0662      	lsls	r2, r4, #25
 8018552:	d501      	bpl.n	8018558 <_vfiprintf_r+0x5a0>
 8018554:	b21b      	sxth	r3, r3
 8018556:	e7f7      	b.n	8018548 <_vfiprintf_r+0x590>
 8018558:	05a2      	lsls	r2, r4, #22
 801855a:	d5f5      	bpl.n	8018548 <_vfiprintf_r+0x590>
 801855c:	b25b      	sxtb	r3, r3
 801855e:	e7f3      	b.n	8018548 <_vfiprintf_r+0x590>
 8018560:	1d33      	adds	r3, r6, #4
 8018562:	9304      	str	r3, [sp, #16]
 8018564:	06a3      	lsls	r3, r4, #26
 8018566:	d506      	bpl.n	8018576 <_vfiprintf_r+0x5be>
 8018568:	6833      	ldr	r3, [r6, #0]
 801856a:	9a08      	ldr	r2, [sp, #32]
 801856c:	601a      	str	r2, [r3, #0]
 801856e:	17d2      	asrs	r2, r2, #31
 8018570:	605a      	str	r2, [r3, #4]
 8018572:	9e04      	ldr	r6, [sp, #16]
 8018574:	e584      	b.n	8018080 <_vfiprintf_r+0xc8>
 8018576:	06e3      	lsls	r3, r4, #27
 8018578:	d503      	bpl.n	8018582 <_vfiprintf_r+0x5ca>
 801857a:	6833      	ldr	r3, [r6, #0]
 801857c:	9a08      	ldr	r2, [sp, #32]
 801857e:	601a      	str	r2, [r3, #0]
 8018580:	e7f7      	b.n	8018572 <_vfiprintf_r+0x5ba>
 8018582:	0663      	lsls	r3, r4, #25
 8018584:	d503      	bpl.n	801858e <_vfiprintf_r+0x5d6>
 8018586:	6833      	ldr	r3, [r6, #0]
 8018588:	9a08      	ldr	r2, [sp, #32]
 801858a:	801a      	strh	r2, [r3, #0]
 801858c:	e7f1      	b.n	8018572 <_vfiprintf_r+0x5ba>
 801858e:	05a3      	lsls	r3, r4, #22
 8018590:	d5f3      	bpl.n	801857a <_vfiprintf_r+0x5c2>
 8018592:	6833      	ldr	r3, [r6, #0]
 8018594:	9a08      	ldr	r2, [sp, #32]
 8018596:	701a      	strb	r2, [r3, #0]
 8018598:	e7eb      	b.n	8018572 <_vfiprintf_r+0x5ba>
 801859a:	2310      	movs	r3, #16
 801859c:	431c      	orrs	r4, r3
 801859e:	2320      	movs	r3, #32
 80185a0:	0020      	movs	r0, r4
 80185a2:	4018      	ands	r0, r3
 80185a4:	421c      	tst	r4, r3
 80185a6:	d00d      	beq.n	80185c4 <_vfiprintf_r+0x60c>
 80185a8:	3b19      	subs	r3, #25
 80185aa:	3607      	adds	r6, #7
 80185ac:	439e      	bics	r6, r3
 80185ae:	0031      	movs	r1, r6
 80185b0:	c90c      	ldmia	r1!, {r2, r3}
 80185b2:	9200      	str	r2, [sp, #0]
 80185b4:	9301      	str	r3, [sp, #4]
 80185b6:	9104      	str	r1, [sp, #16]
 80185b8:	4b3a      	ldr	r3, [pc, #232]	; (80186a4 <_vfiprintf_r+0x6ec>)
 80185ba:	401c      	ands	r4, r3
 80185bc:	2300      	movs	r3, #0
 80185be:	2100      	movs	r1, #0
 80185c0:	aa14      	add	r2, sp, #80	; 0x50
 80185c2:	e7a5      	b.n	8018510 <_vfiprintf_r+0x558>
 80185c4:	0032      	movs	r2, r6
 80185c6:	ca08      	ldmia	r2!, {r3}
 80185c8:	0021      	movs	r1, r4
 80185ca:	9204      	str	r2, [sp, #16]
 80185cc:	2210      	movs	r2, #16
 80185ce:	4011      	ands	r1, r2
 80185d0:	4214      	tst	r4, r2
 80185d2:	d002      	beq.n	80185da <_vfiprintf_r+0x622>
 80185d4:	9300      	str	r3, [sp, #0]
 80185d6:	9001      	str	r0, [sp, #4]
 80185d8:	e7ee      	b.n	80185b8 <_vfiprintf_r+0x600>
 80185da:	2240      	movs	r2, #64	; 0x40
 80185dc:	0020      	movs	r0, r4
 80185de:	4010      	ands	r0, r2
 80185e0:	4214      	tst	r4, r2
 80185e2:	d003      	beq.n	80185ec <_vfiprintf_r+0x634>
 80185e4:	b29b      	uxth	r3, r3
 80185e6:	9300      	str	r3, [sp, #0]
 80185e8:	9101      	str	r1, [sp, #4]
 80185ea:	e7e5      	b.n	80185b8 <_vfiprintf_r+0x600>
 80185ec:	2280      	movs	r2, #128	; 0x80
 80185ee:	0021      	movs	r1, r4
 80185f0:	0092      	lsls	r2, r2, #2
 80185f2:	4011      	ands	r1, r2
 80185f4:	4214      	tst	r4, r2
 80185f6:	d0f6      	beq.n	80185e6 <_vfiprintf_r+0x62e>
 80185f8:	b2db      	uxtb	r3, r3
 80185fa:	e7eb      	b.n	80185d4 <_vfiprintf_r+0x61c>
 80185fc:	0033      	movs	r3, r6
 80185fe:	2130      	movs	r1, #48	; 0x30
 8018600:	cb04      	ldmia	r3!, {r2}
 8018602:	9304      	str	r3, [sp, #16]
 8018604:	2300      	movs	r3, #0
 8018606:	9200      	str	r2, [sp, #0]
 8018608:	aa15      	add	r2, sp, #84	; 0x54
 801860a:	7011      	strb	r1, [r2, #0]
 801860c:	3148      	adds	r1, #72	; 0x48
 801860e:	7051      	strb	r1, [r2, #1]
 8018610:	4a25      	ldr	r2, [pc, #148]	; (80186a8 <_vfiprintf_r+0x6f0>)
 8018612:	9301      	str	r3, [sp, #4]
 8018614:	3302      	adds	r3, #2
 8018616:	431c      	orrs	r4, r3
 8018618:	920c      	str	r2, [sp, #48]	; 0x30
 801861a:	e7d0      	b.n	80185be <_vfiprintf_r+0x606>
 801861c:	0033      	movs	r3, r6
 801861e:	2600      	movs	r6, #0
 8018620:	cb20      	ldmia	r3!, {r5}
 8018622:	9304      	str	r3, [sp, #16]
 8018624:	ab14      	add	r3, sp, #80	; 0x50
 8018626:	70de      	strb	r6, [r3, #3]
 8018628:	9b05      	ldr	r3, [sp, #20]
 801862a:	3301      	adds	r3, #1
 801862c:	d00a      	beq.n	8018644 <_vfiprintf_r+0x68c>
 801862e:	0031      	movs	r1, r6
 8018630:	0028      	movs	r0, r5
 8018632:	9a05      	ldr	r2, [sp, #20]
 8018634:	f7fe fe6e 	bl	8017314 <memchr>
 8018638:	900b      	str	r0, [sp, #44]	; 0x2c
 801863a:	42b0      	cmp	r0, r6
 801863c:	d100      	bne.n	8018640 <_vfiprintf_r+0x688>
 801863e:	e667      	b.n	8018310 <_vfiprintf_r+0x358>
 8018640:	1b43      	subs	r3, r0, r5
 8018642:	e663      	b.n	801830c <_vfiprintf_r+0x354>
 8018644:	0028      	movs	r0, r5
 8018646:	f7e7 fd67 	bl	8000118 <strlen>
 801864a:	9005      	str	r0, [sp, #20]
 801864c:	e65f      	b.n	801830e <_vfiprintf_r+0x356>
 801864e:	2310      	movs	r3, #16
 8018650:	431c      	orrs	r4, r3
 8018652:	2320      	movs	r3, #32
 8018654:	0020      	movs	r0, r4
 8018656:	4018      	ands	r0, r3
 8018658:	421c      	tst	r4, r3
 801865a:	d009      	beq.n	8018670 <_vfiprintf_r+0x6b8>
 801865c:	3b19      	subs	r3, #25
 801865e:	3607      	adds	r6, #7
 8018660:	439e      	bics	r6, r3
 8018662:	0031      	movs	r1, r6
 8018664:	c90c      	ldmia	r1!, {r2, r3}
 8018666:	9200      	str	r2, [sp, #0]
 8018668:	9301      	str	r3, [sp, #4]
 801866a:	9104      	str	r1, [sp, #16]
 801866c:	2301      	movs	r3, #1
 801866e:	e7a6      	b.n	80185be <_vfiprintf_r+0x606>
 8018670:	0033      	movs	r3, r6
 8018672:	cb04      	ldmia	r3!, {r2}
 8018674:	0021      	movs	r1, r4
 8018676:	9304      	str	r3, [sp, #16]
 8018678:	2310      	movs	r3, #16
 801867a:	4019      	ands	r1, r3
 801867c:	421c      	tst	r4, r3
 801867e:	d003      	beq.n	8018688 <_vfiprintf_r+0x6d0>
 8018680:	9200      	str	r2, [sp, #0]
 8018682:	9001      	str	r0, [sp, #4]
 8018684:	3b0f      	subs	r3, #15
 8018686:	e79a      	b.n	80185be <_vfiprintf_r+0x606>
 8018688:	2340      	movs	r3, #64	; 0x40
 801868a:	0020      	movs	r0, r4
 801868c:	4018      	ands	r0, r3
 801868e:	421c      	tst	r4, r3
 8018690:	d00c      	beq.n	80186ac <_vfiprintf_r+0x6f4>
 8018692:	b293      	uxth	r3, r2
 8018694:	9300      	str	r3, [sp, #0]
 8018696:	9101      	str	r1, [sp, #4]
 8018698:	e7e8      	b.n	801866c <_vfiprintf_r+0x6b4>
 801869a:	46c0      	nop			; (mov r8, r8)
 801869c:	0801ca60 	.word	0x0801ca60
 80186a0:	0801ca70 	.word	0x0801ca70
 80186a4:	fffffbff 	.word	0xfffffbff
 80186a8:	0801c790 	.word	0x0801c790
 80186ac:	2380      	movs	r3, #128	; 0x80
 80186ae:	0021      	movs	r1, r4
 80186b0:	009b      	lsls	r3, r3, #2
 80186b2:	4019      	ands	r1, r3
 80186b4:	421c      	tst	r4, r3
 80186b6:	d003      	beq.n	80186c0 <_vfiprintf_r+0x708>
 80186b8:	b2d3      	uxtb	r3, r2
 80186ba:	9300      	str	r3, [sp, #0]
 80186bc:	9001      	str	r0, [sp, #4]
 80186be:	e7d5      	b.n	801866c <_vfiprintf_r+0x6b4>
 80186c0:	9200      	str	r2, [sp, #0]
 80186c2:	e7e8      	b.n	8018696 <_vfiprintf_r+0x6de>
 80186c4:	4ab3      	ldr	r2, [pc, #716]	; (8018994 <_vfiprintf_r+0x9dc>)
 80186c6:	e579      	b.n	80181bc <_vfiprintf_r+0x204>
 80186c8:	0031      	movs	r1, r6
 80186ca:	c904      	ldmia	r1!, {r2}
 80186cc:	0025      	movs	r5, r4
 80186ce:	9104      	str	r1, [sp, #16]
 80186d0:	2110      	movs	r1, #16
 80186d2:	400d      	ands	r5, r1
 80186d4:	420c      	tst	r4, r1
 80186d6:	d002      	beq.n	80186de <_vfiprintf_r+0x726>
 80186d8:	9200      	str	r2, [sp, #0]
 80186da:	9001      	str	r0, [sp, #4]
 80186dc:	e57d      	b.n	80181da <_vfiprintf_r+0x222>
 80186de:	2140      	movs	r1, #64	; 0x40
 80186e0:	0020      	movs	r0, r4
 80186e2:	4008      	ands	r0, r1
 80186e4:	420c      	tst	r4, r1
 80186e6:	d003      	beq.n	80186f0 <_vfiprintf_r+0x738>
 80186e8:	b292      	uxth	r2, r2
 80186ea:	9200      	str	r2, [sp, #0]
 80186ec:	9501      	str	r5, [sp, #4]
 80186ee:	e574      	b.n	80181da <_vfiprintf_r+0x222>
 80186f0:	2180      	movs	r1, #128	; 0x80
 80186f2:	0025      	movs	r5, r4
 80186f4:	0089      	lsls	r1, r1, #2
 80186f6:	400d      	ands	r5, r1
 80186f8:	420c      	tst	r4, r1
 80186fa:	d0f6      	beq.n	80186ea <_vfiprintf_r+0x732>
 80186fc:	b2d2      	uxtb	r2, r2
 80186fe:	e7eb      	b.n	80186d8 <_vfiprintf_r+0x720>
 8018700:	9b01      	ldr	r3, [sp, #4]
 8018702:	2b00      	cmp	r3, #0
 8018704:	d109      	bne.n	801871a <_vfiprintf_r+0x762>
 8018706:	9b00      	ldr	r3, [sp, #0]
 8018708:	2b09      	cmp	r3, #9
 801870a:	d806      	bhi.n	801871a <_vfiprintf_r+0x762>
 801870c:	25b7      	movs	r5, #183	; 0xb7
 801870e:	ab14      	add	r3, sp, #80	; 0x50
 8018710:	18ed      	adds	r5, r5, r3
 8018712:	9b00      	ldr	r3, [sp, #0]
 8018714:	3330      	adds	r3, #48	; 0x30
 8018716:	702b      	strb	r3, [r5, #0]
 8018718:	e134      	b.n	8018984 <_vfiprintf_r+0x9cc>
 801871a:	2680      	movs	r6, #128	; 0x80
 801871c:	2400      	movs	r4, #0
 801871e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018720:	00f6      	lsls	r6, r6, #3
 8018722:	ad42      	add	r5, sp, #264	; 0x108
 8018724:	401e      	ands	r6, r3
 8018726:	220a      	movs	r2, #10
 8018728:	9800      	ldr	r0, [sp, #0]
 801872a:	9901      	ldr	r1, [sp, #4]
 801872c:	2300      	movs	r3, #0
 801872e:	f7e7 ff07 	bl	8000540 <__aeabi_uldivmod>
 8018732:	3d01      	subs	r5, #1
 8018734:	3230      	adds	r2, #48	; 0x30
 8018736:	702a      	strb	r2, [r5, #0]
 8018738:	3401      	adds	r4, #1
 801873a:	2e00      	cmp	r6, #0
 801873c:	d01a      	beq.n	8018774 <_vfiprintf_r+0x7bc>
 801873e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018740:	781b      	ldrb	r3, [r3, #0]
 8018742:	42a3      	cmp	r3, r4
 8018744:	d116      	bne.n	8018774 <_vfiprintf_r+0x7bc>
 8018746:	2cff      	cmp	r4, #255	; 0xff
 8018748:	d014      	beq.n	8018774 <_vfiprintf_r+0x7bc>
 801874a:	9b01      	ldr	r3, [sp, #4]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d102      	bne.n	8018756 <_vfiprintf_r+0x79e>
 8018750:	9b00      	ldr	r3, [sp, #0]
 8018752:	2b09      	cmp	r3, #9
 8018754:	d90e      	bls.n	8018774 <_vfiprintf_r+0x7bc>
 8018756:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018758:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801875a:	1aed      	subs	r5, r5, r3
 801875c:	001a      	movs	r2, r3
 801875e:	0028      	movs	r0, r5
 8018760:	f7fb f905 	bl	801396e <strncpy>
 8018764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018766:	2400      	movs	r4, #0
 8018768:	785b      	ldrb	r3, [r3, #1]
 801876a:	1e5a      	subs	r2, r3, #1
 801876c:	4193      	sbcs	r3, r2
 801876e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018770:	18d3      	adds	r3, r2, r3
 8018772:	930d      	str	r3, [sp, #52]	; 0x34
 8018774:	2300      	movs	r3, #0
 8018776:	9800      	ldr	r0, [sp, #0]
 8018778:	9901      	ldr	r1, [sp, #4]
 801877a:	220a      	movs	r2, #10
 801877c:	f7e7 fee0 	bl	8000540 <__aeabi_uldivmod>
 8018780:	9b01      	ldr	r3, [sp, #4]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d103      	bne.n	801878e <_vfiprintf_r+0x7d6>
 8018786:	9b00      	ldr	r3, [sp, #0]
 8018788:	2b09      	cmp	r3, #9
 801878a:	d800      	bhi.n	801878e <_vfiprintf_r+0x7d6>
 801878c:	e0fa      	b.n	8018984 <_vfiprintf_r+0x9cc>
 801878e:	9000      	str	r0, [sp, #0]
 8018790:	9101      	str	r1, [sp, #4]
 8018792:	e7c8      	b.n	8018726 <_vfiprintf_r+0x76e>
 8018794:	200f      	movs	r0, #15
 8018796:	9b00      	ldr	r3, [sp, #0]
 8018798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801879a:	4003      	ands	r3, r0
 801879c:	5cd3      	ldrb	r3, [r2, r3]
 801879e:	3d01      	subs	r5, #1
 80187a0:	702b      	strb	r3, [r5, #0]
 80187a2:	9b01      	ldr	r3, [sp, #4]
 80187a4:	0719      	lsls	r1, r3, #28
 80187a6:	9b00      	ldr	r3, [sp, #0]
 80187a8:	091a      	lsrs	r2, r3, #4
 80187aa:	9b01      	ldr	r3, [sp, #4]
 80187ac:	4311      	orrs	r1, r2
 80187ae:	091b      	lsrs	r3, r3, #4
 80187b0:	9301      	str	r3, [sp, #4]
 80187b2:	000b      	movs	r3, r1
 80187b4:	9a01      	ldr	r2, [sp, #4]
 80187b6:	9100      	str	r1, [sp, #0]
 80187b8:	4313      	orrs	r3, r2
 80187ba:	d1ec      	bne.n	8018796 <_vfiprintf_r+0x7de>
 80187bc:	e0e2      	b.n	8018984 <_vfiprintf_r+0x9cc>
 80187be:	ad42      	add	r5, sp, #264	; 0x108
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d000      	beq.n	80187c6 <_vfiprintf_r+0x80e>
 80187c4:	e0de      	b.n	8018984 <_vfiprintf_r+0x9cc>
 80187c6:	07e3      	lsls	r3, r4, #31
 80187c8:	d400      	bmi.n	80187cc <_vfiprintf_r+0x814>
 80187ca:	e0db      	b.n	8018984 <_vfiprintf_r+0x9cc>
 80187cc:	25b7      	movs	r5, #183	; 0xb7
 80187ce:	ab14      	add	r3, sp, #80	; 0x50
 80187d0:	18ed      	adds	r5, r5, r3
 80187d2:	2330      	movs	r3, #48	; 0x30
 80187d4:	e79f      	b.n	8018716 <_vfiprintf_r+0x75e>
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d100      	bne.n	80187dc <_vfiprintf_r+0x824>
 80187da:	e09c      	b.n	8018916 <_vfiprintf_r+0x95e>
 80187dc:	ad29      	add	r5, sp, #164	; 0xa4
 80187de:	702b      	strb	r3, [r5, #0]
 80187e0:	2300      	movs	r3, #0
 80187e2:	aa14      	add	r2, sp, #80	; 0x50
 80187e4:	70d3      	strb	r3, [r2, #3]
 80187e6:	2201      	movs	r2, #1
 80187e8:	9604      	str	r6, [sp, #16]
 80187ea:	9205      	str	r2, [sp, #20]
 80187ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80187ee:	e58f      	b.n	8018310 <_vfiprintf_r+0x358>
 80187f0:	2010      	movs	r0, #16
 80187f2:	6050      	str	r0, [r2, #4]
 80187f4:	4662      	mov	r2, ip
 80187f6:	1812      	adds	r2, r2, r0
 80187f8:	9218      	str	r2, [sp, #96]	; 0x60
 80187fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80187fc:	2b07      	cmp	r3, #7
 80187fe:	dd07      	ble.n	8018810 <_vfiprintf_r+0x858>
 8018800:	0039      	movs	r1, r7
 8018802:	9806      	ldr	r0, [sp, #24]
 8018804:	aa16      	add	r2, sp, #88	; 0x58
 8018806:	f7ff fba3 	bl	8017f50 <__sprint_r>
 801880a:	2800      	cmp	r0, #0
 801880c:	d162      	bne.n	80188d4 <_vfiprintf_r+0x91c>
 801880e:	a919      	add	r1, sp, #100	; 0x64
 8018810:	3e10      	subs	r6, #16
 8018812:	9103      	str	r1, [sp, #12]
 8018814:	e59e      	b.n	8018354 <_vfiprintf_r+0x39c>
 8018816:	0039      	movs	r1, r7
 8018818:	9806      	ldr	r0, [sp, #24]
 801881a:	aa16      	add	r2, sp, #88	; 0x58
 801881c:	f7ff fb98 	bl	8017f50 <__sprint_r>
 8018820:	2800      	cmp	r0, #0
 8018822:	d157      	bne.n	80188d4 <_vfiprintf_r+0x91c>
 8018824:	ab19      	add	r3, sp, #100	; 0x64
 8018826:	e5ca      	b.n	80183be <_vfiprintf_r+0x406>
 8018828:	0039      	movs	r1, r7
 801882a:	9806      	ldr	r0, [sp, #24]
 801882c:	aa16      	add	r2, sp, #88	; 0x58
 801882e:	f7ff fb8f 	bl	8017f50 <__sprint_r>
 8018832:	2800      	cmp	r0, #0
 8018834:	d14e      	bne.n	80188d4 <_vfiprintf_r+0x91c>
 8018836:	ab19      	add	r3, sp, #100	; 0x64
 8018838:	e5d8      	b.n	80183ec <_vfiprintf_r+0x434>
 801883a:	2010      	movs	r0, #16
 801883c:	6050      	str	r0, [r2, #4]
 801883e:	4662      	mov	r2, ip
 8018840:	1812      	adds	r2, r2, r0
 8018842:	9218      	str	r2, [sp, #96]	; 0x60
 8018844:	9317      	str	r3, [sp, #92]	; 0x5c
 8018846:	2b07      	cmp	r3, #7
 8018848:	dd07      	ble.n	801885a <_vfiprintf_r+0x8a2>
 801884a:	0039      	movs	r1, r7
 801884c:	9806      	ldr	r0, [sp, #24]
 801884e:	aa16      	add	r2, sp, #88	; 0x58
 8018850:	f7ff fb7e 	bl	8017f50 <__sprint_r>
 8018854:	2800      	cmp	r0, #0
 8018856:	d13d      	bne.n	80188d4 <_vfiprintf_r+0x91c>
 8018858:	a919      	add	r1, sp, #100	; 0x64
 801885a:	3e10      	subs	r6, #16
 801885c:	9103      	str	r1, [sp, #12]
 801885e:	e5ce      	b.n	80183fe <_vfiprintf_r+0x446>
 8018860:	2010      	movs	r0, #16
 8018862:	6050      	str	r0, [r2, #4]
 8018864:	4662      	mov	r2, ip
 8018866:	1812      	adds	r2, r2, r0
 8018868:	9218      	str	r2, [sp, #96]	; 0x60
 801886a:	9317      	str	r3, [sp, #92]	; 0x5c
 801886c:	2b07      	cmp	r3, #7
 801886e:	dd07      	ble.n	8018880 <_vfiprintf_r+0x8c8>
 8018870:	0039      	movs	r1, r7
 8018872:	9806      	ldr	r0, [sp, #24]
 8018874:	aa16      	add	r2, sp, #88	; 0x58
 8018876:	f7ff fb6b 	bl	8017f50 <__sprint_r>
 801887a:	2800      	cmp	r0, #0
 801887c:	d12a      	bne.n	80188d4 <_vfiprintf_r+0x91c>
 801887e:	a919      	add	r1, sp, #100	; 0x64
 8018880:	3e10      	subs	r6, #16
 8018882:	9103      	str	r1, [sp, #12]
 8018884:	e5de      	b.n	8018444 <_vfiprintf_r+0x48c>
 8018886:	0039      	movs	r1, r7
 8018888:	9806      	ldr	r0, [sp, #24]
 801888a:	aa16      	add	r2, sp, #88	; 0x58
 801888c:	f7ff fb60 	bl	8017f50 <__sprint_r>
 8018890:	2800      	cmp	r0, #0
 8018892:	d11f      	bne.n	80188d4 <_vfiprintf_r+0x91c>
 8018894:	ab19      	add	r3, sp, #100	; 0x64
 8018896:	e606      	b.n	80184a6 <_vfiprintf_r+0x4ee>
 8018898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801889a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801889c:	2510      	movs	r5, #16
 801889e:	1a54      	subs	r4, r2, r1
 80188a0:	2c00      	cmp	r4, #0
 80188a2:	dc00      	bgt.n	80188a6 <_vfiprintf_r+0x8ee>
 80188a4:	e602      	b.n	80184ac <_vfiprintf_r+0x4f4>
 80188a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80188a8:	483b      	ldr	r0, [pc, #236]	; (8018998 <_vfiprintf_r+0x9e0>)
 80188aa:	9203      	str	r2, [sp, #12]
 80188ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 80188ae:	3201      	adds	r2, #1
 80188b0:	6018      	str	r0, [r3, #0]
 80188b2:	2c10      	cmp	r4, #16
 80188b4:	dc1e      	bgt.n	80188f4 <_vfiprintf_r+0x93c>
 80188b6:	605c      	str	r4, [r3, #4]
 80188b8:	1864      	adds	r4, r4, r1
 80188ba:	9418      	str	r4, [sp, #96]	; 0x60
 80188bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80188be:	2a07      	cmp	r2, #7
 80188c0:	dc00      	bgt.n	80188c4 <_vfiprintf_r+0x90c>
 80188c2:	e5f3      	b.n	80184ac <_vfiprintf_r+0x4f4>
 80188c4:	0039      	movs	r1, r7
 80188c6:	9806      	ldr	r0, [sp, #24]
 80188c8:	aa16      	add	r2, sp, #88	; 0x58
 80188ca:	f7ff fb41 	bl	8017f50 <__sprint_r>
 80188ce:	2800      	cmp	r0, #0
 80188d0:	d100      	bne.n	80188d4 <_vfiprintf_r+0x91c>
 80188d2:	e5eb      	b.n	80184ac <_vfiprintf_r+0x4f4>
 80188d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80188d6:	07db      	lsls	r3, r3, #31
 80188d8:	d405      	bmi.n	80188e6 <_vfiprintf_r+0x92e>
 80188da:	89bb      	ldrh	r3, [r7, #12]
 80188dc:	059b      	lsls	r3, r3, #22
 80188de:	d402      	bmi.n	80188e6 <_vfiprintf_r+0x92e>
 80188e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80188e2:	f7fe fd04 	bl	80172ee <__retarget_lock_release_recursive>
 80188e6:	89bb      	ldrh	r3, [r7, #12]
 80188e8:	065b      	lsls	r3, r3, #25
 80188ea:	d401      	bmi.n	80188f0 <_vfiprintf_r+0x938>
 80188ec:	f7ff fb9a 	bl	8018024 <_vfiprintf_r+0x6c>
 80188f0:	f7ff fb95 	bl	801801e <_vfiprintf_r+0x66>
 80188f4:	3110      	adds	r1, #16
 80188f6:	605d      	str	r5, [r3, #4]
 80188f8:	9118      	str	r1, [sp, #96]	; 0x60
 80188fa:	9217      	str	r2, [sp, #92]	; 0x5c
 80188fc:	3308      	adds	r3, #8
 80188fe:	2a07      	cmp	r2, #7
 8018900:	dd07      	ble.n	8018912 <_vfiprintf_r+0x95a>
 8018902:	0039      	movs	r1, r7
 8018904:	9806      	ldr	r0, [sp, #24]
 8018906:	aa16      	add	r2, sp, #88	; 0x58
 8018908:	f7ff fb22 	bl	8017f50 <__sprint_r>
 801890c:	2800      	cmp	r0, #0
 801890e:	d1e1      	bne.n	80188d4 <_vfiprintf_r+0x91c>
 8018910:	ab19      	add	r3, sp, #100	; 0x64
 8018912:	3c10      	subs	r4, #16
 8018914:	e7c7      	b.n	80188a6 <_vfiprintf_r+0x8ee>
 8018916:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018918:	9300      	str	r3, [sp, #0]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d102      	bne.n	8018924 <_vfiprintf_r+0x96c>
 801891e:	2300      	movs	r3, #0
 8018920:	9317      	str	r3, [sp, #92]	; 0x5c
 8018922:	e7d7      	b.n	80188d4 <_vfiprintf_r+0x91c>
 8018924:	0039      	movs	r1, r7
 8018926:	9806      	ldr	r0, [sp, #24]
 8018928:	aa16      	add	r2, sp, #88	; 0x58
 801892a:	f7ff fb11 	bl	8017f50 <__sprint_r>
 801892e:	2800      	cmp	r0, #0
 8018930:	d0f5      	beq.n	801891e <_vfiprintf_r+0x966>
 8018932:	e7cf      	b.n	80188d4 <_vfiprintf_r+0x91c>
 8018934:	940a      	str	r4, [sp, #40]	; 0x28
 8018936:	2a00      	cmp	r2, #0
 8018938:	d100      	bne.n	801893c <_vfiprintf_r+0x984>
 801893a:	e5fc      	b.n	8018536 <_vfiprintf_r+0x57e>
 801893c:	2b01      	cmp	r3, #1
 801893e:	d100      	bne.n	8018942 <_vfiprintf_r+0x98a>
 8018940:	e6de      	b.n	8018700 <_vfiprintf_r+0x748>
 8018942:	ad42      	add	r5, sp, #264	; 0x108
 8018944:	2b02      	cmp	r3, #2
 8018946:	d100      	bne.n	801894a <_vfiprintf_r+0x992>
 8018948:	e724      	b.n	8018794 <_vfiprintf_r+0x7dc>
 801894a:	2607      	movs	r6, #7
 801894c:	9901      	ldr	r1, [sp, #4]
 801894e:	9b00      	ldr	r3, [sp, #0]
 8018950:	074c      	lsls	r4, r1, #29
 8018952:	9900      	ldr	r1, [sp, #0]
 8018954:	4033      	ands	r3, r6
 8018956:	08c8      	lsrs	r0, r1, #3
 8018958:	9901      	ldr	r1, [sp, #4]
 801895a:	4304      	orrs	r4, r0
 801895c:	08c9      	lsrs	r1, r1, #3
 801895e:	9101      	str	r1, [sp, #4]
 8018960:	0021      	movs	r1, r4
 8018962:	9801      	ldr	r0, [sp, #4]
 8018964:	002a      	movs	r2, r5
 8018966:	3330      	adds	r3, #48	; 0x30
 8018968:	3d01      	subs	r5, #1
 801896a:	702b      	strb	r3, [r5, #0]
 801896c:	9400      	str	r4, [sp, #0]
 801896e:	4301      	orrs	r1, r0
 8018970:	d1ec      	bne.n	801894c <_vfiprintf_r+0x994>
 8018972:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018974:	07c9      	lsls	r1, r1, #31
 8018976:	d505      	bpl.n	8018984 <_vfiprintf_r+0x9cc>
 8018978:	2b30      	cmp	r3, #48	; 0x30
 801897a:	d003      	beq.n	8018984 <_vfiprintf_r+0x9cc>
 801897c:	2330      	movs	r3, #48	; 0x30
 801897e:	3d01      	subs	r5, #1
 8018980:	702b      	strb	r3, [r5, #0]
 8018982:	1e95      	subs	r5, r2, #2
 8018984:	9b05      	ldr	r3, [sp, #20]
 8018986:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018988:	930b      	str	r3, [sp, #44]	; 0x2c
 801898a:	ab42      	add	r3, sp, #264	; 0x108
 801898c:	1b5b      	subs	r3, r3, r5
 801898e:	9305      	str	r3, [sp, #20]
 8018990:	e4be      	b.n	8018310 <_vfiprintf_r+0x358>
 8018992:	46c0      	nop			; (mov r8, r8)
 8018994:	0801c7a1 	.word	0x0801c7a1
 8018998:	0801ca60 	.word	0x0801ca60

0801899c <__sbprintf>:
 801899c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801899e:	0015      	movs	r5, r2
 80189a0:	2202      	movs	r2, #2
 80189a2:	4c1e      	ldr	r4, [pc, #120]	; (8018a1c <__sbprintf+0x80>)
 80189a4:	001f      	movs	r7, r3
 80189a6:	898b      	ldrh	r3, [r1, #12]
 80189a8:	44a5      	add	sp, r4
 80189aa:	4393      	bics	r3, r2
 80189ac:	466a      	mov	r2, sp
 80189ae:	8193      	strh	r3, [r2, #12]
 80189b0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80189b2:	0006      	movs	r6, r0
 80189b4:	9319      	str	r3, [sp, #100]	; 0x64
 80189b6:	89cb      	ldrh	r3, [r1, #14]
 80189b8:	a816      	add	r0, sp, #88	; 0x58
 80189ba:	81d3      	strh	r3, [r2, #14]
 80189bc:	69cb      	ldr	r3, [r1, #28]
 80189be:	000c      	movs	r4, r1
 80189c0:	9307      	str	r3, [sp, #28]
 80189c2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80189c4:	9309      	str	r3, [sp, #36]	; 0x24
 80189c6:	ab1a      	add	r3, sp, #104	; 0x68
 80189c8:	9300      	str	r3, [sp, #0]
 80189ca:	9304      	str	r3, [sp, #16]
 80189cc:	2380      	movs	r3, #128	; 0x80
 80189ce:	00db      	lsls	r3, r3, #3
 80189d0:	9302      	str	r3, [sp, #8]
 80189d2:	9305      	str	r3, [sp, #20]
 80189d4:	2300      	movs	r3, #0
 80189d6:	9306      	str	r3, [sp, #24]
 80189d8:	f7fe fc86 	bl	80172e8 <__retarget_lock_init_recursive>
 80189dc:	002a      	movs	r2, r5
 80189de:	003b      	movs	r3, r7
 80189e0:	4669      	mov	r1, sp
 80189e2:	0030      	movs	r0, r6
 80189e4:	f7ff fae8 	bl	8017fb8 <_vfiprintf_r>
 80189e8:	1e05      	subs	r5, r0, #0
 80189ea:	db07      	blt.n	80189fc <__sbprintf+0x60>
 80189ec:	4669      	mov	r1, sp
 80189ee:	0030      	movs	r0, r6
 80189f0:	f000 f91c 	bl	8018c2c <_fflush_r>
 80189f4:	2800      	cmp	r0, #0
 80189f6:	d001      	beq.n	80189fc <__sbprintf+0x60>
 80189f8:	2501      	movs	r5, #1
 80189fa:	426d      	negs	r5, r5
 80189fc:	466b      	mov	r3, sp
 80189fe:	899a      	ldrh	r2, [r3, #12]
 8018a00:	2340      	movs	r3, #64	; 0x40
 8018a02:	421a      	tst	r2, r3
 8018a04:	d002      	beq.n	8018a0c <__sbprintf+0x70>
 8018a06:	89a2      	ldrh	r2, [r4, #12]
 8018a08:	4313      	orrs	r3, r2
 8018a0a:	81a3      	strh	r3, [r4, #12]
 8018a0c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018a0e:	f7fe fc6c 	bl	80172ea <__retarget_lock_close_recursive>
 8018a12:	0028      	movs	r0, r5
 8018a14:	4b02      	ldr	r3, [pc, #8]	; (8018a20 <__sbprintf+0x84>)
 8018a16:	449d      	add	sp, r3
 8018a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a1a:	46c0      	nop			; (mov r8, r8)
 8018a1c:	fffffb94 	.word	0xfffffb94
 8018a20:	0000046c 	.word	0x0000046c

08018a24 <__swsetup_r>:
 8018a24:	4b30      	ldr	r3, [pc, #192]	; (8018ae8 <__swsetup_r+0xc4>)
 8018a26:	b570      	push	{r4, r5, r6, lr}
 8018a28:	0005      	movs	r5, r0
 8018a2a:	6818      	ldr	r0, [r3, #0]
 8018a2c:	000c      	movs	r4, r1
 8018a2e:	2800      	cmp	r0, #0
 8018a30:	d004      	beq.n	8018a3c <__swsetup_r+0x18>
 8018a32:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d101      	bne.n	8018a3c <__swsetup_r+0x18>
 8018a38:	f000 f96e 	bl	8018d18 <__sinit>
 8018a3c:	230c      	movs	r3, #12
 8018a3e:	5ee2      	ldrsh	r2, [r4, r3]
 8018a40:	b293      	uxth	r3, r2
 8018a42:	0711      	lsls	r1, r2, #28
 8018a44:	d423      	bmi.n	8018a8e <__swsetup_r+0x6a>
 8018a46:	06d9      	lsls	r1, r3, #27
 8018a48:	d407      	bmi.n	8018a5a <__swsetup_r+0x36>
 8018a4a:	2309      	movs	r3, #9
 8018a4c:	2001      	movs	r0, #1
 8018a4e:	602b      	str	r3, [r5, #0]
 8018a50:	3337      	adds	r3, #55	; 0x37
 8018a52:	4313      	orrs	r3, r2
 8018a54:	81a3      	strh	r3, [r4, #12]
 8018a56:	4240      	negs	r0, r0
 8018a58:	bd70      	pop	{r4, r5, r6, pc}
 8018a5a:	075b      	lsls	r3, r3, #29
 8018a5c:	d513      	bpl.n	8018a86 <__swsetup_r+0x62>
 8018a5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018a60:	2900      	cmp	r1, #0
 8018a62:	d008      	beq.n	8018a76 <__swsetup_r+0x52>
 8018a64:	0023      	movs	r3, r4
 8018a66:	3340      	adds	r3, #64	; 0x40
 8018a68:	4299      	cmp	r1, r3
 8018a6a:	d002      	beq.n	8018a72 <__swsetup_r+0x4e>
 8018a6c:	0028      	movs	r0, r5
 8018a6e:	f7fe f809 	bl	8016a84 <_free_r>
 8018a72:	2300      	movs	r3, #0
 8018a74:	6323      	str	r3, [r4, #48]	; 0x30
 8018a76:	2224      	movs	r2, #36	; 0x24
 8018a78:	89a3      	ldrh	r3, [r4, #12]
 8018a7a:	4393      	bics	r3, r2
 8018a7c:	81a3      	strh	r3, [r4, #12]
 8018a7e:	2300      	movs	r3, #0
 8018a80:	6063      	str	r3, [r4, #4]
 8018a82:	6923      	ldr	r3, [r4, #16]
 8018a84:	6023      	str	r3, [r4, #0]
 8018a86:	2308      	movs	r3, #8
 8018a88:	89a2      	ldrh	r2, [r4, #12]
 8018a8a:	4313      	orrs	r3, r2
 8018a8c:	81a3      	strh	r3, [r4, #12]
 8018a8e:	6923      	ldr	r3, [r4, #16]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d10b      	bne.n	8018aac <__swsetup_r+0x88>
 8018a94:	21a0      	movs	r1, #160	; 0xa0
 8018a96:	2280      	movs	r2, #128	; 0x80
 8018a98:	89a3      	ldrh	r3, [r4, #12]
 8018a9a:	0089      	lsls	r1, r1, #2
 8018a9c:	0092      	lsls	r2, r2, #2
 8018a9e:	400b      	ands	r3, r1
 8018aa0:	4293      	cmp	r3, r2
 8018aa2:	d003      	beq.n	8018aac <__swsetup_r+0x88>
 8018aa4:	0021      	movs	r1, r4
 8018aa6:	0028      	movs	r0, r5
 8018aa8:	f000 fb84 	bl	80191b4 <__smakebuf_r>
 8018aac:	220c      	movs	r2, #12
 8018aae:	5ea3      	ldrsh	r3, [r4, r2]
 8018ab0:	2001      	movs	r0, #1
 8018ab2:	001a      	movs	r2, r3
 8018ab4:	b299      	uxth	r1, r3
 8018ab6:	4002      	ands	r2, r0
 8018ab8:	4203      	tst	r3, r0
 8018aba:	d00f      	beq.n	8018adc <__swsetup_r+0xb8>
 8018abc:	2200      	movs	r2, #0
 8018abe:	60a2      	str	r2, [r4, #8]
 8018ac0:	6962      	ldr	r2, [r4, #20]
 8018ac2:	4252      	negs	r2, r2
 8018ac4:	61a2      	str	r2, [r4, #24]
 8018ac6:	2000      	movs	r0, #0
 8018ac8:	6922      	ldr	r2, [r4, #16]
 8018aca:	4282      	cmp	r2, r0
 8018acc:	d1c4      	bne.n	8018a58 <__swsetup_r+0x34>
 8018ace:	060a      	lsls	r2, r1, #24
 8018ad0:	d5c2      	bpl.n	8018a58 <__swsetup_r+0x34>
 8018ad2:	2240      	movs	r2, #64	; 0x40
 8018ad4:	4313      	orrs	r3, r2
 8018ad6:	81a3      	strh	r3, [r4, #12]
 8018ad8:	3801      	subs	r0, #1
 8018ada:	e7bd      	b.n	8018a58 <__swsetup_r+0x34>
 8018adc:	0788      	lsls	r0, r1, #30
 8018ade:	d400      	bmi.n	8018ae2 <__swsetup_r+0xbe>
 8018ae0:	6962      	ldr	r2, [r4, #20]
 8018ae2:	60a2      	str	r2, [r4, #8]
 8018ae4:	e7ef      	b.n	8018ac6 <__swsetup_r+0xa2>
 8018ae6:	46c0      	nop			; (mov r8, r8)
 8018ae8:	200000cc 	.word	0x200000cc

08018aec <abort>:
 8018aec:	2006      	movs	r0, #6
 8018aee:	b510      	push	{r4, lr}
 8018af0:	f000 fbd0 	bl	8019294 <raise>
 8018af4:	2001      	movs	r0, #1
 8018af6:	f000 fdc5 	bl	8019684 <_exit>
	...

08018afc <__sflush_r>:
 8018afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018afe:	230c      	movs	r3, #12
 8018b00:	5eca      	ldrsh	r2, [r1, r3]
 8018b02:	000c      	movs	r4, r1
 8018b04:	0005      	movs	r5, r0
 8018b06:	b291      	uxth	r1, r2
 8018b08:	0713      	lsls	r3, r2, #28
 8018b0a:	d467      	bmi.n	8018bdc <__sflush_r+0xe0>
 8018b0c:	2380      	movs	r3, #128	; 0x80
 8018b0e:	011b      	lsls	r3, r3, #4
 8018b10:	4313      	orrs	r3, r2
 8018b12:	6862      	ldr	r2, [r4, #4]
 8018b14:	81a3      	strh	r3, [r4, #12]
 8018b16:	2a00      	cmp	r2, #0
 8018b18:	dc04      	bgt.n	8018b24 <__sflush_r+0x28>
 8018b1a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8018b1c:	2a00      	cmp	r2, #0
 8018b1e:	dc01      	bgt.n	8018b24 <__sflush_r+0x28>
 8018b20:	2000      	movs	r0, #0
 8018b22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018b24:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8018b26:	2f00      	cmp	r7, #0
 8018b28:	d0fa      	beq.n	8018b20 <__sflush_r+0x24>
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	2180      	movs	r1, #128	; 0x80
 8018b2e:	682e      	ldr	r6, [r5, #0]
 8018b30:	602a      	str	r2, [r5, #0]
 8018b32:	001a      	movs	r2, r3
 8018b34:	0149      	lsls	r1, r1, #5
 8018b36:	400a      	ands	r2, r1
 8018b38:	420b      	tst	r3, r1
 8018b3a:	d038      	beq.n	8018bae <__sflush_r+0xb2>
 8018b3c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8018b3e:	89a3      	ldrh	r3, [r4, #12]
 8018b40:	075b      	lsls	r3, r3, #29
 8018b42:	d506      	bpl.n	8018b52 <__sflush_r+0x56>
 8018b44:	6863      	ldr	r3, [r4, #4]
 8018b46:	1ac0      	subs	r0, r0, r3
 8018b48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d001      	beq.n	8018b52 <__sflush_r+0x56>
 8018b4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018b50:	1ac0      	subs	r0, r0, r3
 8018b52:	0002      	movs	r2, r0
 8018b54:	69e1      	ldr	r1, [r4, #28]
 8018b56:	2300      	movs	r3, #0
 8018b58:	0028      	movs	r0, r5
 8018b5a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8018b5c:	47b8      	blx	r7
 8018b5e:	89a1      	ldrh	r1, [r4, #12]
 8018b60:	1c43      	adds	r3, r0, #1
 8018b62:	d106      	bne.n	8018b72 <__sflush_r+0x76>
 8018b64:	682b      	ldr	r3, [r5, #0]
 8018b66:	2b1d      	cmp	r3, #29
 8018b68:	d835      	bhi.n	8018bd6 <__sflush_r+0xda>
 8018b6a:	4a2e      	ldr	r2, [pc, #184]	; (8018c24 <__sflush_r+0x128>)
 8018b6c:	40da      	lsrs	r2, r3
 8018b6e:	07d3      	lsls	r3, r2, #31
 8018b70:	d531      	bpl.n	8018bd6 <__sflush_r+0xda>
 8018b72:	2200      	movs	r2, #0
 8018b74:	4b2c      	ldr	r3, [pc, #176]	; (8018c28 <__sflush_r+0x12c>)
 8018b76:	6062      	str	r2, [r4, #4]
 8018b78:	400b      	ands	r3, r1
 8018b7a:	6922      	ldr	r2, [r4, #16]
 8018b7c:	b21b      	sxth	r3, r3
 8018b7e:	81a3      	strh	r3, [r4, #12]
 8018b80:	6022      	str	r2, [r4, #0]
 8018b82:	04db      	lsls	r3, r3, #19
 8018b84:	d505      	bpl.n	8018b92 <__sflush_r+0x96>
 8018b86:	1c43      	adds	r3, r0, #1
 8018b88:	d102      	bne.n	8018b90 <__sflush_r+0x94>
 8018b8a:	682b      	ldr	r3, [r5, #0]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d100      	bne.n	8018b92 <__sflush_r+0x96>
 8018b90:	6520      	str	r0, [r4, #80]	; 0x50
 8018b92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018b94:	602e      	str	r6, [r5, #0]
 8018b96:	2900      	cmp	r1, #0
 8018b98:	d0c2      	beq.n	8018b20 <__sflush_r+0x24>
 8018b9a:	0023      	movs	r3, r4
 8018b9c:	3340      	adds	r3, #64	; 0x40
 8018b9e:	4299      	cmp	r1, r3
 8018ba0:	d002      	beq.n	8018ba8 <__sflush_r+0xac>
 8018ba2:	0028      	movs	r0, r5
 8018ba4:	f7fd ff6e 	bl	8016a84 <_free_r>
 8018ba8:	2000      	movs	r0, #0
 8018baa:	6320      	str	r0, [r4, #48]	; 0x30
 8018bac:	e7b9      	b.n	8018b22 <__sflush_r+0x26>
 8018bae:	2301      	movs	r3, #1
 8018bb0:	0028      	movs	r0, r5
 8018bb2:	69e1      	ldr	r1, [r4, #28]
 8018bb4:	47b8      	blx	r7
 8018bb6:	1c43      	adds	r3, r0, #1
 8018bb8:	d1c1      	bne.n	8018b3e <__sflush_r+0x42>
 8018bba:	682b      	ldr	r3, [r5, #0]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d0be      	beq.n	8018b3e <__sflush_r+0x42>
 8018bc0:	2b1d      	cmp	r3, #29
 8018bc2:	d001      	beq.n	8018bc8 <__sflush_r+0xcc>
 8018bc4:	2b16      	cmp	r3, #22
 8018bc6:	d101      	bne.n	8018bcc <__sflush_r+0xd0>
 8018bc8:	602e      	str	r6, [r5, #0]
 8018bca:	e7a9      	b.n	8018b20 <__sflush_r+0x24>
 8018bcc:	2340      	movs	r3, #64	; 0x40
 8018bce:	89a2      	ldrh	r2, [r4, #12]
 8018bd0:	4313      	orrs	r3, r2
 8018bd2:	81a3      	strh	r3, [r4, #12]
 8018bd4:	e7a5      	b.n	8018b22 <__sflush_r+0x26>
 8018bd6:	2340      	movs	r3, #64	; 0x40
 8018bd8:	430b      	orrs	r3, r1
 8018bda:	e7fa      	b.n	8018bd2 <__sflush_r+0xd6>
 8018bdc:	6927      	ldr	r7, [r4, #16]
 8018bde:	2f00      	cmp	r7, #0
 8018be0:	d09e      	beq.n	8018b20 <__sflush_r+0x24>
 8018be2:	6823      	ldr	r3, [r4, #0]
 8018be4:	6027      	str	r7, [r4, #0]
 8018be6:	1bdb      	subs	r3, r3, r7
 8018be8:	9301      	str	r3, [sp, #4]
 8018bea:	2300      	movs	r3, #0
 8018bec:	078a      	lsls	r2, r1, #30
 8018bee:	d100      	bne.n	8018bf2 <__sflush_r+0xf6>
 8018bf0:	6963      	ldr	r3, [r4, #20]
 8018bf2:	60a3      	str	r3, [r4, #8]
 8018bf4:	9b01      	ldr	r3, [sp, #4]
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	dc00      	bgt.n	8018bfc <__sflush_r+0x100>
 8018bfa:	e791      	b.n	8018b20 <__sflush_r+0x24>
 8018bfc:	003a      	movs	r2, r7
 8018bfe:	0028      	movs	r0, r5
 8018c00:	9b01      	ldr	r3, [sp, #4]
 8018c02:	69e1      	ldr	r1, [r4, #28]
 8018c04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018c06:	47b0      	blx	r6
 8018c08:	2800      	cmp	r0, #0
 8018c0a:	dc06      	bgt.n	8018c1a <__sflush_r+0x11e>
 8018c0c:	2340      	movs	r3, #64	; 0x40
 8018c0e:	2001      	movs	r0, #1
 8018c10:	89a2      	ldrh	r2, [r4, #12]
 8018c12:	4240      	negs	r0, r0
 8018c14:	4313      	orrs	r3, r2
 8018c16:	81a3      	strh	r3, [r4, #12]
 8018c18:	e783      	b.n	8018b22 <__sflush_r+0x26>
 8018c1a:	9b01      	ldr	r3, [sp, #4]
 8018c1c:	183f      	adds	r7, r7, r0
 8018c1e:	1a1b      	subs	r3, r3, r0
 8018c20:	9301      	str	r3, [sp, #4]
 8018c22:	e7e7      	b.n	8018bf4 <__sflush_r+0xf8>
 8018c24:	20400001 	.word	0x20400001
 8018c28:	fffff7ff 	.word	0xfffff7ff

08018c2c <_fflush_r>:
 8018c2c:	b570      	push	{r4, r5, r6, lr}
 8018c2e:	0005      	movs	r5, r0
 8018c30:	000c      	movs	r4, r1
 8018c32:	2800      	cmp	r0, #0
 8018c34:	d004      	beq.n	8018c40 <_fflush_r+0x14>
 8018c36:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d101      	bne.n	8018c40 <_fflush_r+0x14>
 8018c3c:	f000 f86c 	bl	8018d18 <__sinit>
 8018c40:	220c      	movs	r2, #12
 8018c42:	5ea3      	ldrsh	r3, [r4, r2]
 8018c44:	1e1e      	subs	r6, r3, #0
 8018c46:	d015      	beq.n	8018c74 <_fflush_r+0x48>
 8018c48:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018c4a:	07d2      	lsls	r2, r2, #31
 8018c4c:	d404      	bmi.n	8018c58 <_fflush_r+0x2c>
 8018c4e:	059b      	lsls	r3, r3, #22
 8018c50:	d402      	bmi.n	8018c58 <_fflush_r+0x2c>
 8018c52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c54:	f7fe fb4a 	bl	80172ec <__retarget_lock_acquire_recursive>
 8018c58:	0021      	movs	r1, r4
 8018c5a:	0028      	movs	r0, r5
 8018c5c:	f7ff ff4e 	bl	8018afc <__sflush_r>
 8018c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c62:	0006      	movs	r6, r0
 8018c64:	07db      	lsls	r3, r3, #31
 8018c66:	d405      	bmi.n	8018c74 <_fflush_r+0x48>
 8018c68:	89a3      	ldrh	r3, [r4, #12]
 8018c6a:	059b      	lsls	r3, r3, #22
 8018c6c:	d402      	bmi.n	8018c74 <_fflush_r+0x48>
 8018c6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c70:	f7fe fb3d 	bl	80172ee <__retarget_lock_release_recursive>
 8018c74:	0030      	movs	r0, r6
 8018c76:	bd70      	pop	{r4, r5, r6, pc}

08018c78 <std>:
 8018c78:	2300      	movs	r3, #0
 8018c7a:	b510      	push	{r4, lr}
 8018c7c:	0004      	movs	r4, r0
 8018c7e:	6003      	str	r3, [r0, #0]
 8018c80:	6043      	str	r3, [r0, #4]
 8018c82:	6083      	str	r3, [r0, #8]
 8018c84:	8181      	strh	r1, [r0, #12]
 8018c86:	6643      	str	r3, [r0, #100]	; 0x64
 8018c88:	0019      	movs	r1, r3
 8018c8a:	81c2      	strh	r2, [r0, #14]
 8018c8c:	6103      	str	r3, [r0, #16]
 8018c8e:	2208      	movs	r2, #8
 8018c90:	6143      	str	r3, [r0, #20]
 8018c92:	6183      	str	r3, [r0, #24]
 8018c94:	305c      	adds	r0, #92	; 0x5c
 8018c96:	f7fa fc24 	bl	80134e2 <memset>
 8018c9a:	0020      	movs	r0, r4
 8018c9c:	4b06      	ldr	r3, [pc, #24]	; (8018cb8 <std+0x40>)
 8018c9e:	61e4      	str	r4, [r4, #28]
 8018ca0:	6223      	str	r3, [r4, #32]
 8018ca2:	4b06      	ldr	r3, [pc, #24]	; (8018cbc <std+0x44>)
 8018ca4:	3058      	adds	r0, #88	; 0x58
 8018ca6:	6263      	str	r3, [r4, #36]	; 0x24
 8018ca8:	4b05      	ldr	r3, [pc, #20]	; (8018cc0 <std+0x48>)
 8018caa:	62a3      	str	r3, [r4, #40]	; 0x28
 8018cac:	4b05      	ldr	r3, [pc, #20]	; (8018cc4 <std+0x4c>)
 8018cae:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018cb0:	f7fe fb1a 	bl	80172e8 <__retarget_lock_init_recursive>
 8018cb4:	bd10      	pop	{r4, pc}
 8018cb6:	46c0      	nop			; (mov r8, r8)
 8018cb8:	080192d5 	.word	0x080192d5
 8018cbc:	080192fd 	.word	0x080192fd
 8018cc0:	08019335 	.word	0x08019335
 8018cc4:	08019361 	.word	0x08019361

08018cc8 <_cleanup_r>:
 8018cc8:	b510      	push	{r4, lr}
 8018cca:	4902      	ldr	r1, [pc, #8]	; (8018cd4 <_cleanup_r+0xc>)
 8018ccc:	f000 fa1e 	bl	801910c <_fwalk_reent>
 8018cd0:	bd10      	pop	{r4, pc}
 8018cd2:	46c0      	nop			; (mov r8, r8)
 8018cd4:	0801948d 	.word	0x0801948d

08018cd8 <__sfp_lock_acquire>:
 8018cd8:	b510      	push	{r4, lr}
 8018cda:	4802      	ldr	r0, [pc, #8]	; (8018ce4 <__sfp_lock_acquire+0xc>)
 8018cdc:	f7fe fb06 	bl	80172ec <__retarget_lock_acquire_recursive>
 8018ce0:	bd10      	pop	{r4, pc}
 8018ce2:	46c0      	nop			; (mov r8, r8)
 8018ce4:	20006f7e 	.word	0x20006f7e

08018ce8 <__sfp_lock_release>:
 8018ce8:	b510      	push	{r4, lr}
 8018cea:	4802      	ldr	r0, [pc, #8]	; (8018cf4 <__sfp_lock_release+0xc>)
 8018cec:	f7fe faff 	bl	80172ee <__retarget_lock_release_recursive>
 8018cf0:	bd10      	pop	{r4, pc}
 8018cf2:	46c0      	nop			; (mov r8, r8)
 8018cf4:	20006f7e 	.word	0x20006f7e

08018cf8 <__sinit_lock_acquire>:
 8018cf8:	b510      	push	{r4, lr}
 8018cfa:	4802      	ldr	r0, [pc, #8]	; (8018d04 <__sinit_lock_acquire+0xc>)
 8018cfc:	f7fe faf6 	bl	80172ec <__retarget_lock_acquire_recursive>
 8018d00:	bd10      	pop	{r4, pc}
 8018d02:	46c0      	nop			; (mov r8, r8)
 8018d04:	20006f7f 	.word	0x20006f7f

08018d08 <__sinit_lock_release>:
 8018d08:	b510      	push	{r4, lr}
 8018d0a:	4802      	ldr	r0, [pc, #8]	; (8018d14 <__sinit_lock_release+0xc>)
 8018d0c:	f7fe faef 	bl	80172ee <__retarget_lock_release_recursive>
 8018d10:	bd10      	pop	{r4, pc}
 8018d12:	46c0      	nop			; (mov r8, r8)
 8018d14:	20006f7f 	.word	0x20006f7f

08018d18 <__sinit>:
 8018d18:	b510      	push	{r4, lr}
 8018d1a:	0004      	movs	r4, r0
 8018d1c:	f7ff ffec 	bl	8018cf8 <__sinit_lock_acquire>
 8018d20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018d22:	2a00      	cmp	r2, #0
 8018d24:	d002      	beq.n	8018d2c <__sinit+0x14>
 8018d26:	f7ff ffef 	bl	8018d08 <__sinit_lock_release>
 8018d2a:	bd10      	pop	{r4, pc}
 8018d2c:	4b0e      	ldr	r3, [pc, #56]	; (8018d68 <__sinit+0x50>)
 8018d2e:	2103      	movs	r1, #3
 8018d30:	63e3      	str	r3, [r4, #60]	; 0x3c
 8018d32:	23b8      	movs	r3, #184	; 0xb8
 8018d34:	009b      	lsls	r3, r3, #2
 8018d36:	50e2      	str	r2, [r4, r3]
 8018d38:	3304      	adds	r3, #4
 8018d3a:	50e1      	str	r1, [r4, r3]
 8018d3c:	3308      	adds	r3, #8
 8018d3e:	18e1      	adds	r1, r4, r3
 8018d40:	3b04      	subs	r3, #4
 8018d42:	50e1      	str	r1, [r4, r3]
 8018d44:	6860      	ldr	r0, [r4, #4]
 8018d46:	2104      	movs	r1, #4
 8018d48:	f7ff ff96 	bl	8018c78 <std>
 8018d4c:	2201      	movs	r2, #1
 8018d4e:	2109      	movs	r1, #9
 8018d50:	68a0      	ldr	r0, [r4, #8]
 8018d52:	f7ff ff91 	bl	8018c78 <std>
 8018d56:	2202      	movs	r2, #2
 8018d58:	2112      	movs	r1, #18
 8018d5a:	68e0      	ldr	r0, [r4, #12]
 8018d5c:	f7ff ff8c 	bl	8018c78 <std>
 8018d60:	2301      	movs	r3, #1
 8018d62:	63a3      	str	r3, [r4, #56]	; 0x38
 8018d64:	e7df      	b.n	8018d26 <__sinit+0xe>
 8018d66:	46c0      	nop			; (mov r8, r8)
 8018d68:	08018cc9 	.word	0x08018cc9

08018d6c <__fputwc>:
 8018d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d6e:	b085      	sub	sp, #20
 8018d70:	000e      	movs	r6, r1
 8018d72:	0015      	movs	r5, r2
 8018d74:	9001      	str	r0, [sp, #4]
 8018d76:	f7fe faab 	bl	80172d0 <__locale_mb_cur_max>
 8018d7a:	0004      	movs	r4, r0
 8018d7c:	2801      	cmp	r0, #1
 8018d7e:	d119      	bne.n	8018db4 <__fputwc+0x48>
 8018d80:	1e73      	subs	r3, r6, #1
 8018d82:	2bfe      	cmp	r3, #254	; 0xfe
 8018d84:	d816      	bhi.n	8018db4 <__fputwc+0x48>
 8018d86:	ab02      	add	r3, sp, #8
 8018d88:	711e      	strb	r6, [r3, #4]
 8018d8a:	2700      	movs	r7, #0
 8018d8c:	42a7      	cmp	r7, r4
 8018d8e:	d020      	beq.n	8018dd2 <__fputwc+0x66>
 8018d90:	ab03      	add	r3, sp, #12
 8018d92:	5dd9      	ldrb	r1, [r3, r7]
 8018d94:	68ab      	ldr	r3, [r5, #8]
 8018d96:	3b01      	subs	r3, #1
 8018d98:	60ab      	str	r3, [r5, #8]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	da04      	bge.n	8018da8 <__fputwc+0x3c>
 8018d9e:	69aa      	ldr	r2, [r5, #24]
 8018da0:	4293      	cmp	r3, r2
 8018da2:	db19      	blt.n	8018dd8 <__fputwc+0x6c>
 8018da4:	290a      	cmp	r1, #10
 8018da6:	d017      	beq.n	8018dd8 <__fputwc+0x6c>
 8018da8:	682b      	ldr	r3, [r5, #0]
 8018daa:	1c5a      	adds	r2, r3, #1
 8018dac:	602a      	str	r2, [r5, #0]
 8018dae:	7019      	strb	r1, [r3, #0]
 8018db0:	3701      	adds	r7, #1
 8018db2:	e7eb      	b.n	8018d8c <__fputwc+0x20>
 8018db4:	002b      	movs	r3, r5
 8018db6:	0032      	movs	r2, r6
 8018db8:	9801      	ldr	r0, [sp, #4]
 8018dba:	335c      	adds	r3, #92	; 0x5c
 8018dbc:	a903      	add	r1, sp, #12
 8018dbe:	f000 fb27 	bl	8019410 <_wcrtomb_r>
 8018dc2:	0004      	movs	r4, r0
 8018dc4:	1c43      	adds	r3, r0, #1
 8018dc6:	d1e0      	bne.n	8018d8a <__fputwc+0x1e>
 8018dc8:	2340      	movs	r3, #64	; 0x40
 8018dca:	0006      	movs	r6, r0
 8018dcc:	89aa      	ldrh	r2, [r5, #12]
 8018dce:	4313      	orrs	r3, r2
 8018dd0:	81ab      	strh	r3, [r5, #12]
 8018dd2:	0030      	movs	r0, r6
 8018dd4:	b005      	add	sp, #20
 8018dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018dd8:	002a      	movs	r2, r5
 8018dda:	9801      	ldr	r0, [sp, #4]
 8018ddc:	f000 fac6 	bl	801936c <__swbuf_r>
 8018de0:	1c43      	adds	r3, r0, #1
 8018de2:	d1e5      	bne.n	8018db0 <__fputwc+0x44>
 8018de4:	0006      	movs	r6, r0
 8018de6:	e7f4      	b.n	8018dd2 <__fputwc+0x66>

08018de8 <_fputwc_r>:
 8018de8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8018dea:	b570      	push	{r4, r5, r6, lr}
 8018dec:	0005      	movs	r5, r0
 8018dee:	000e      	movs	r6, r1
 8018df0:	0014      	movs	r4, r2
 8018df2:	07db      	lsls	r3, r3, #31
 8018df4:	d405      	bmi.n	8018e02 <_fputwc_r+0x1a>
 8018df6:	8993      	ldrh	r3, [r2, #12]
 8018df8:	059b      	lsls	r3, r3, #22
 8018dfa:	d402      	bmi.n	8018e02 <_fputwc_r+0x1a>
 8018dfc:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8018dfe:	f7fe fa75 	bl	80172ec <__retarget_lock_acquire_recursive>
 8018e02:	230c      	movs	r3, #12
 8018e04:	5ee2      	ldrsh	r2, [r4, r3]
 8018e06:	2380      	movs	r3, #128	; 0x80
 8018e08:	019b      	lsls	r3, r3, #6
 8018e0a:	421a      	tst	r2, r3
 8018e0c:	d104      	bne.n	8018e18 <_fputwc_r+0x30>
 8018e0e:	431a      	orrs	r2, r3
 8018e10:	81a2      	strh	r2, [r4, #12]
 8018e12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018e14:	4313      	orrs	r3, r2
 8018e16:	6663      	str	r3, [r4, #100]	; 0x64
 8018e18:	0028      	movs	r0, r5
 8018e1a:	0022      	movs	r2, r4
 8018e1c:	0031      	movs	r1, r6
 8018e1e:	f7ff ffa5 	bl	8018d6c <__fputwc>
 8018e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018e24:	0005      	movs	r5, r0
 8018e26:	07db      	lsls	r3, r3, #31
 8018e28:	d405      	bmi.n	8018e36 <_fputwc_r+0x4e>
 8018e2a:	89a3      	ldrh	r3, [r4, #12]
 8018e2c:	059b      	lsls	r3, r3, #22
 8018e2e:	d402      	bmi.n	8018e36 <_fputwc_r+0x4e>
 8018e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e32:	f7fe fa5c 	bl	80172ee <__retarget_lock_release_recursive>
 8018e36:	0028      	movs	r0, r5
 8018e38:	bd70      	pop	{r4, r5, r6, pc}
	...

08018e3c <__sfvwrite_r>:
 8018e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e3e:	6893      	ldr	r3, [r2, #8]
 8018e40:	b087      	sub	sp, #28
 8018e42:	000c      	movs	r4, r1
 8018e44:	0017      	movs	r7, r2
 8018e46:	9003      	str	r0, [sp, #12]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d102      	bne.n	8018e52 <__sfvwrite_r+0x16>
 8018e4c:	2000      	movs	r0, #0
 8018e4e:	b007      	add	sp, #28
 8018e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e52:	898b      	ldrh	r3, [r1, #12]
 8018e54:	071b      	lsls	r3, r3, #28
 8018e56:	d559      	bpl.n	8018f0c <__sfvwrite_r+0xd0>
 8018e58:	690b      	ldr	r3, [r1, #16]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d056      	beq.n	8018f0c <__sfvwrite_r+0xd0>
 8018e5e:	683b      	ldr	r3, [r7, #0]
 8018e60:	2202      	movs	r2, #2
 8018e62:	9302      	str	r3, [sp, #8]
 8018e64:	89a3      	ldrh	r3, [r4, #12]
 8018e66:	0018      	movs	r0, r3
 8018e68:	4010      	ands	r0, r2
 8018e6a:	4213      	tst	r3, r2
 8018e6c:	d175      	bne.n	8018f5a <__sfvwrite_r+0x11e>
 8018e6e:	2201      	movs	r2, #1
 8018e70:	2101      	movs	r1, #1
 8018e72:	401a      	ands	r2, r3
 8018e74:	420b      	tst	r3, r1
 8018e76:	d100      	bne.n	8018e7a <__sfvwrite_r+0x3e>
 8018e78:	e0ad      	b.n	8018fd6 <__sfvwrite_r+0x19a>
 8018e7a:	0006      	movs	r6, r0
 8018e7c:	9001      	str	r0, [sp, #4]
 8018e7e:	9004      	str	r0, [sp, #16]
 8018e80:	9b04      	ldr	r3, [sp, #16]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d100      	bne.n	8018e88 <__sfvwrite_r+0x4c>
 8018e86:	e116      	b.n	80190b6 <__sfvwrite_r+0x27a>
 8018e88:	2800      	cmp	r0, #0
 8018e8a:	d10c      	bne.n	8018ea6 <__sfvwrite_r+0x6a>
 8018e8c:	001a      	movs	r2, r3
 8018e8e:	210a      	movs	r1, #10
 8018e90:	0030      	movs	r0, r6
 8018e92:	f7fe fa3f 	bl	8017314 <memchr>
 8018e96:	9b04      	ldr	r3, [sp, #16]
 8018e98:	3301      	adds	r3, #1
 8018e9a:	9301      	str	r3, [sp, #4]
 8018e9c:	2800      	cmp	r0, #0
 8018e9e:	d002      	beq.n	8018ea6 <__sfvwrite_r+0x6a>
 8018ea0:	3001      	adds	r0, #1
 8018ea2:	1b83      	subs	r3, r0, r6
 8018ea4:	9301      	str	r3, [sp, #4]
 8018ea6:	9b01      	ldr	r3, [sp, #4]
 8018ea8:	9a04      	ldr	r2, [sp, #16]
 8018eaa:	9305      	str	r3, [sp, #20]
 8018eac:	4293      	cmp	r3, r2
 8018eae:	d900      	bls.n	8018eb2 <__sfvwrite_r+0x76>
 8018eb0:	9205      	str	r2, [sp, #20]
 8018eb2:	6820      	ldr	r0, [r4, #0]
 8018eb4:	6922      	ldr	r2, [r4, #16]
 8018eb6:	6963      	ldr	r3, [r4, #20]
 8018eb8:	4290      	cmp	r0, r2
 8018eba:	d800      	bhi.n	8018ebe <__sfvwrite_r+0x82>
 8018ebc:	e104      	b.n	80190c8 <__sfvwrite_r+0x28c>
 8018ebe:	68a2      	ldr	r2, [r4, #8]
 8018ec0:	189d      	adds	r5, r3, r2
 8018ec2:	9a05      	ldr	r2, [sp, #20]
 8018ec4:	42aa      	cmp	r2, r5
 8018ec6:	dc00      	bgt.n	8018eca <__sfvwrite_r+0x8e>
 8018ec8:	e0fe      	b.n	80190c8 <__sfvwrite_r+0x28c>
 8018eca:	0031      	movs	r1, r6
 8018ecc:	002a      	movs	r2, r5
 8018ece:	f7fe fa2c 	bl	801732a <memmove>
 8018ed2:	6823      	ldr	r3, [r4, #0]
 8018ed4:	0021      	movs	r1, r4
 8018ed6:	195b      	adds	r3, r3, r5
 8018ed8:	9803      	ldr	r0, [sp, #12]
 8018eda:	6023      	str	r3, [r4, #0]
 8018edc:	f7ff fea6 	bl	8018c2c <_fflush_r>
 8018ee0:	2800      	cmp	r0, #0
 8018ee2:	d173      	bne.n	8018fcc <__sfvwrite_r+0x190>
 8018ee4:	9b01      	ldr	r3, [sp, #4]
 8018ee6:	2001      	movs	r0, #1
 8018ee8:	1b5b      	subs	r3, r3, r5
 8018eea:	9301      	str	r3, [sp, #4]
 8018eec:	d105      	bne.n	8018efa <__sfvwrite_r+0xbe>
 8018eee:	0021      	movs	r1, r4
 8018ef0:	9803      	ldr	r0, [sp, #12]
 8018ef2:	f7ff fe9b 	bl	8018c2c <_fflush_r>
 8018ef6:	2800      	cmp	r0, #0
 8018ef8:	d168      	bne.n	8018fcc <__sfvwrite_r+0x190>
 8018efa:	9b04      	ldr	r3, [sp, #16]
 8018efc:	1976      	adds	r6, r6, r5
 8018efe:	1b5b      	subs	r3, r3, r5
 8018f00:	9304      	str	r3, [sp, #16]
 8018f02:	68bb      	ldr	r3, [r7, #8]
 8018f04:	1b5d      	subs	r5, r3, r5
 8018f06:	60bd      	str	r5, [r7, #8]
 8018f08:	d1ba      	bne.n	8018e80 <__sfvwrite_r+0x44>
 8018f0a:	e79f      	b.n	8018e4c <__sfvwrite_r+0x10>
 8018f0c:	0021      	movs	r1, r4
 8018f0e:	9803      	ldr	r0, [sp, #12]
 8018f10:	f7ff fd88 	bl	8018a24 <__swsetup_r>
 8018f14:	2800      	cmp	r0, #0
 8018f16:	d0a2      	beq.n	8018e5e <__sfvwrite_r+0x22>
 8018f18:	2001      	movs	r0, #1
 8018f1a:	4240      	negs	r0, r0
 8018f1c:	e797      	b.n	8018e4e <__sfvwrite_r+0x12>
 8018f1e:	9b02      	ldr	r3, [sp, #8]
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	9301      	str	r3, [sp, #4]
 8018f24:	9b02      	ldr	r3, [sp, #8]
 8018f26:	685d      	ldr	r5, [r3, #4]
 8018f28:	3308      	adds	r3, #8
 8018f2a:	9302      	str	r3, [sp, #8]
 8018f2c:	2d00      	cmp	r5, #0
 8018f2e:	d0f6      	beq.n	8018f1e <__sfvwrite_r+0xe2>
 8018f30:	4a72      	ldr	r2, [pc, #456]	; (80190fc <__sfvwrite_r+0x2c0>)
 8018f32:	002b      	movs	r3, r5
 8018f34:	4295      	cmp	r5, r2
 8018f36:	d900      	bls.n	8018f3a <__sfvwrite_r+0xfe>
 8018f38:	0013      	movs	r3, r2
 8018f3a:	9a01      	ldr	r2, [sp, #4]
 8018f3c:	69e1      	ldr	r1, [r4, #28]
 8018f3e:	9803      	ldr	r0, [sp, #12]
 8018f40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018f42:	47b0      	blx	r6
 8018f44:	2800      	cmp	r0, #0
 8018f46:	dd41      	ble.n	8018fcc <__sfvwrite_r+0x190>
 8018f48:	9b01      	ldr	r3, [sp, #4]
 8018f4a:	1a2d      	subs	r5, r5, r0
 8018f4c:	181b      	adds	r3, r3, r0
 8018f4e:	9301      	str	r3, [sp, #4]
 8018f50:	68bb      	ldr	r3, [r7, #8]
 8018f52:	1a18      	subs	r0, r3, r0
 8018f54:	60b8      	str	r0, [r7, #8]
 8018f56:	d1e9      	bne.n	8018f2c <__sfvwrite_r+0xf0>
 8018f58:	e778      	b.n	8018e4c <__sfvwrite_r+0x10>
 8018f5a:	2300      	movs	r3, #0
 8018f5c:	001d      	movs	r5, r3
 8018f5e:	9301      	str	r3, [sp, #4]
 8018f60:	e7e4      	b.n	8018f2c <__sfvwrite_r+0xf0>
 8018f62:	9b02      	ldr	r3, [sp, #8]
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	9304      	str	r3, [sp, #16]
 8018f68:	9b02      	ldr	r3, [sp, #8]
 8018f6a:	685b      	ldr	r3, [r3, #4]
 8018f6c:	9301      	str	r3, [sp, #4]
 8018f6e:	9b02      	ldr	r3, [sp, #8]
 8018f70:	3308      	adds	r3, #8
 8018f72:	9302      	str	r3, [sp, #8]
 8018f74:	9b01      	ldr	r3, [sp, #4]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d0f3      	beq.n	8018f62 <__sfvwrite_r+0x126>
 8018f7a:	2380      	movs	r3, #128	; 0x80
 8018f7c:	89a2      	ldrh	r2, [r4, #12]
 8018f7e:	009b      	lsls	r3, r3, #2
 8018f80:	6820      	ldr	r0, [r4, #0]
 8018f82:	68a5      	ldr	r5, [r4, #8]
 8018f84:	421a      	tst	r2, r3
 8018f86:	d064      	beq.n	8019052 <__sfvwrite_r+0x216>
 8018f88:	9b01      	ldr	r3, [sp, #4]
 8018f8a:	429d      	cmp	r5, r3
 8018f8c:	d838      	bhi.n	8019000 <__sfvwrite_r+0x1c4>
 8018f8e:	2390      	movs	r3, #144	; 0x90
 8018f90:	00db      	lsls	r3, r3, #3
 8018f92:	421a      	tst	r2, r3
 8018f94:	d034      	beq.n	8019000 <__sfvwrite_r+0x1c4>
 8018f96:	6921      	ldr	r1, [r4, #16]
 8018f98:	1a43      	subs	r3, r0, r1
 8018f9a:	2003      	movs	r0, #3
 8018f9c:	9305      	str	r3, [sp, #20]
 8018f9e:	6963      	ldr	r3, [r4, #20]
 8018fa0:	4358      	muls	r0, r3
 8018fa2:	9b05      	ldr	r3, [sp, #20]
 8018fa4:	0fc6      	lsrs	r6, r0, #31
 8018fa6:	1836      	adds	r6, r6, r0
 8018fa8:	9801      	ldr	r0, [sp, #4]
 8018faa:	3301      	adds	r3, #1
 8018fac:	181b      	adds	r3, r3, r0
 8018fae:	1076      	asrs	r6, r6, #1
 8018fb0:	42b3      	cmp	r3, r6
 8018fb2:	d900      	bls.n	8018fb6 <__sfvwrite_r+0x17a>
 8018fb4:	001e      	movs	r6, r3
 8018fb6:	0553      	lsls	r3, r2, #21
 8018fb8:	d53c      	bpl.n	8019034 <__sfvwrite_r+0x1f8>
 8018fba:	0031      	movs	r1, r6
 8018fbc:	9803      	ldr	r0, [sp, #12]
 8018fbe:	f7fa f867 	bl	8013090 <_malloc_r>
 8018fc2:	1e05      	subs	r5, r0, #0
 8018fc4:	d10a      	bne.n	8018fdc <__sfvwrite_r+0x1a0>
 8018fc6:	230c      	movs	r3, #12
 8018fc8:	9a03      	ldr	r2, [sp, #12]
 8018fca:	6013      	str	r3, [r2, #0]
 8018fcc:	2340      	movs	r3, #64	; 0x40
 8018fce:	89a2      	ldrh	r2, [r4, #12]
 8018fd0:	4313      	orrs	r3, r2
 8018fd2:	81a3      	strh	r3, [r4, #12]
 8018fd4:	e7a0      	b.n	8018f18 <__sfvwrite_r+0xdc>
 8018fd6:	9204      	str	r2, [sp, #16]
 8018fd8:	9201      	str	r2, [sp, #4]
 8018fda:	e7cb      	b.n	8018f74 <__sfvwrite_r+0x138>
 8018fdc:	9a05      	ldr	r2, [sp, #20]
 8018fde:	6921      	ldr	r1, [r4, #16]
 8018fe0:	f7fa fa76 	bl	80134d0 <memcpy>
 8018fe4:	89a3      	ldrh	r3, [r4, #12]
 8018fe6:	4a46      	ldr	r2, [pc, #280]	; (8019100 <__sfvwrite_r+0x2c4>)
 8018fe8:	401a      	ands	r2, r3
 8018fea:	2380      	movs	r3, #128	; 0x80
 8018fec:	4313      	orrs	r3, r2
 8018fee:	81a3      	strh	r3, [r4, #12]
 8018ff0:	9b05      	ldr	r3, [sp, #20]
 8018ff2:	6125      	str	r5, [r4, #16]
 8018ff4:	18ed      	adds	r5, r5, r3
 8018ff6:	6025      	str	r5, [r4, #0]
 8018ff8:	6166      	str	r6, [r4, #20]
 8018ffa:	9d01      	ldr	r5, [sp, #4]
 8018ffc:	1af6      	subs	r6, r6, r3
 8018ffe:	60a6      	str	r6, [r4, #8]
 8019000:	9e01      	ldr	r6, [sp, #4]
 8019002:	42b5      	cmp	r5, r6
 8019004:	d900      	bls.n	8019008 <__sfvwrite_r+0x1cc>
 8019006:	0035      	movs	r5, r6
 8019008:	002a      	movs	r2, r5
 801900a:	9904      	ldr	r1, [sp, #16]
 801900c:	6820      	ldr	r0, [r4, #0]
 801900e:	f7fe f98c 	bl	801732a <memmove>
 8019012:	68a3      	ldr	r3, [r4, #8]
 8019014:	1b5b      	subs	r3, r3, r5
 8019016:	60a3      	str	r3, [r4, #8]
 8019018:	6823      	ldr	r3, [r4, #0]
 801901a:	195d      	adds	r5, r3, r5
 801901c:	6025      	str	r5, [r4, #0]
 801901e:	9b04      	ldr	r3, [sp, #16]
 8019020:	199b      	adds	r3, r3, r6
 8019022:	9304      	str	r3, [sp, #16]
 8019024:	9b01      	ldr	r3, [sp, #4]
 8019026:	1b9b      	subs	r3, r3, r6
 8019028:	9301      	str	r3, [sp, #4]
 801902a:	68bb      	ldr	r3, [r7, #8]
 801902c:	1b9e      	subs	r6, r3, r6
 801902e:	60be      	str	r6, [r7, #8]
 8019030:	d1a0      	bne.n	8018f74 <__sfvwrite_r+0x138>
 8019032:	e70b      	b.n	8018e4c <__sfvwrite_r+0x10>
 8019034:	0032      	movs	r2, r6
 8019036:	9803      	ldr	r0, [sp, #12]
 8019038:	f7fa fa90 	bl	801355c <_realloc_r>
 801903c:	1e05      	subs	r5, r0, #0
 801903e:	d1d7      	bne.n	8018ff0 <__sfvwrite_r+0x1b4>
 8019040:	6921      	ldr	r1, [r4, #16]
 8019042:	9803      	ldr	r0, [sp, #12]
 8019044:	f7fd fd1e 	bl	8016a84 <_free_r>
 8019048:	2280      	movs	r2, #128	; 0x80
 801904a:	89a3      	ldrh	r3, [r4, #12]
 801904c:	4393      	bics	r3, r2
 801904e:	81a3      	strh	r3, [r4, #12]
 8019050:	e7b9      	b.n	8018fc6 <__sfvwrite_r+0x18a>
 8019052:	6923      	ldr	r3, [r4, #16]
 8019054:	4283      	cmp	r3, r0
 8019056:	d303      	bcc.n	8019060 <__sfvwrite_r+0x224>
 8019058:	6966      	ldr	r6, [r4, #20]
 801905a:	9b01      	ldr	r3, [sp, #4]
 801905c:	429e      	cmp	r6, r3
 801905e:	d917      	bls.n	8019090 <__sfvwrite_r+0x254>
 8019060:	9b01      	ldr	r3, [sp, #4]
 8019062:	429d      	cmp	r5, r3
 8019064:	d900      	bls.n	8019068 <__sfvwrite_r+0x22c>
 8019066:	001d      	movs	r5, r3
 8019068:	002a      	movs	r2, r5
 801906a:	9904      	ldr	r1, [sp, #16]
 801906c:	f7fe f95d 	bl	801732a <memmove>
 8019070:	68a3      	ldr	r3, [r4, #8]
 8019072:	6822      	ldr	r2, [r4, #0]
 8019074:	1b5b      	subs	r3, r3, r5
 8019076:	1952      	adds	r2, r2, r5
 8019078:	002e      	movs	r6, r5
 801907a:	60a3      	str	r3, [r4, #8]
 801907c:	6022      	str	r2, [r4, #0]
 801907e:	2b00      	cmp	r3, #0
 8019080:	d1cd      	bne.n	801901e <__sfvwrite_r+0x1e2>
 8019082:	0021      	movs	r1, r4
 8019084:	9803      	ldr	r0, [sp, #12]
 8019086:	f7ff fdd1 	bl	8018c2c <_fflush_r>
 801908a:	2800      	cmp	r0, #0
 801908c:	d0c7      	beq.n	801901e <__sfvwrite_r+0x1e2>
 801908e:	e79d      	b.n	8018fcc <__sfvwrite_r+0x190>
 8019090:	9a01      	ldr	r2, [sp, #4]
 8019092:	4b1c      	ldr	r3, [pc, #112]	; (8019104 <__sfvwrite_r+0x2c8>)
 8019094:	0010      	movs	r0, r2
 8019096:	429a      	cmp	r2, r3
 8019098:	d900      	bls.n	801909c <__sfvwrite_r+0x260>
 801909a:	481b      	ldr	r0, [pc, #108]	; (8019108 <__sfvwrite_r+0x2cc>)
 801909c:	0031      	movs	r1, r6
 801909e:	f7e7 f8e1 	bl	8000264 <__divsi3>
 80190a2:	0033      	movs	r3, r6
 80190a4:	9a04      	ldr	r2, [sp, #16]
 80190a6:	4343      	muls	r3, r0
 80190a8:	69e1      	ldr	r1, [r4, #28]
 80190aa:	9803      	ldr	r0, [sp, #12]
 80190ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80190ae:	47a8      	blx	r5
 80190b0:	1e06      	subs	r6, r0, #0
 80190b2:	dcb4      	bgt.n	801901e <__sfvwrite_r+0x1e2>
 80190b4:	e78a      	b.n	8018fcc <__sfvwrite_r+0x190>
 80190b6:	9b02      	ldr	r3, [sp, #8]
 80190b8:	2000      	movs	r0, #0
 80190ba:	681e      	ldr	r6, [r3, #0]
 80190bc:	685b      	ldr	r3, [r3, #4]
 80190be:	9304      	str	r3, [sp, #16]
 80190c0:	9b02      	ldr	r3, [sp, #8]
 80190c2:	3308      	adds	r3, #8
 80190c4:	9302      	str	r3, [sp, #8]
 80190c6:	e6db      	b.n	8018e80 <__sfvwrite_r+0x44>
 80190c8:	9a05      	ldr	r2, [sp, #20]
 80190ca:	4293      	cmp	r3, r2
 80190cc:	dc08      	bgt.n	80190e0 <__sfvwrite_r+0x2a4>
 80190ce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80190d0:	0032      	movs	r2, r6
 80190d2:	69e1      	ldr	r1, [r4, #28]
 80190d4:	9803      	ldr	r0, [sp, #12]
 80190d6:	47a8      	blx	r5
 80190d8:	1e05      	subs	r5, r0, #0
 80190da:	dd00      	ble.n	80190de <__sfvwrite_r+0x2a2>
 80190dc:	e702      	b.n	8018ee4 <__sfvwrite_r+0xa8>
 80190de:	e775      	b.n	8018fcc <__sfvwrite_r+0x190>
 80190e0:	9a05      	ldr	r2, [sp, #20]
 80190e2:	0031      	movs	r1, r6
 80190e4:	f7fe f921 	bl	801732a <memmove>
 80190e8:	9a05      	ldr	r2, [sp, #20]
 80190ea:	68a3      	ldr	r3, [r4, #8]
 80190ec:	0015      	movs	r5, r2
 80190ee:	1a9b      	subs	r3, r3, r2
 80190f0:	60a3      	str	r3, [r4, #8]
 80190f2:	6823      	ldr	r3, [r4, #0]
 80190f4:	189b      	adds	r3, r3, r2
 80190f6:	6023      	str	r3, [r4, #0]
 80190f8:	e6f4      	b.n	8018ee4 <__sfvwrite_r+0xa8>
 80190fa:	46c0      	nop			; (mov r8, r8)
 80190fc:	7ffffc00 	.word	0x7ffffc00
 8019100:	fffffb7f 	.word	0xfffffb7f
 8019104:	7ffffffe 	.word	0x7ffffffe
 8019108:	7fffffff 	.word	0x7fffffff

0801910c <_fwalk_reent>:
 801910c:	23b8      	movs	r3, #184	; 0xb8
 801910e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019110:	0006      	movs	r6, r0
 8019112:	2700      	movs	r7, #0
 8019114:	009b      	lsls	r3, r3, #2
 8019116:	9101      	str	r1, [sp, #4]
 8019118:	18c4      	adds	r4, r0, r3
 801911a:	6863      	ldr	r3, [r4, #4]
 801911c:	68a5      	ldr	r5, [r4, #8]
 801911e:	9300      	str	r3, [sp, #0]
 8019120:	9b00      	ldr	r3, [sp, #0]
 8019122:	3b01      	subs	r3, #1
 8019124:	9300      	str	r3, [sp, #0]
 8019126:	d504      	bpl.n	8019132 <_fwalk_reent+0x26>
 8019128:	6824      	ldr	r4, [r4, #0]
 801912a:	2c00      	cmp	r4, #0
 801912c:	d1f5      	bne.n	801911a <_fwalk_reent+0xe>
 801912e:	0038      	movs	r0, r7
 8019130:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019132:	89ab      	ldrh	r3, [r5, #12]
 8019134:	2b01      	cmp	r3, #1
 8019136:	d908      	bls.n	801914a <_fwalk_reent+0x3e>
 8019138:	220e      	movs	r2, #14
 801913a:	5eab      	ldrsh	r3, [r5, r2]
 801913c:	3301      	adds	r3, #1
 801913e:	d004      	beq.n	801914a <_fwalk_reent+0x3e>
 8019140:	0029      	movs	r1, r5
 8019142:	0030      	movs	r0, r6
 8019144:	9b01      	ldr	r3, [sp, #4]
 8019146:	4798      	blx	r3
 8019148:	4307      	orrs	r7, r0
 801914a:	3568      	adds	r5, #104	; 0x68
 801914c:	e7e8      	b.n	8019120 <_fwalk_reent+0x14>
	...

08019150 <__swhatbuf_r>:
 8019150:	b570      	push	{r4, r5, r6, lr}
 8019152:	000e      	movs	r6, r1
 8019154:	001d      	movs	r5, r3
 8019156:	230e      	movs	r3, #14
 8019158:	5ec9      	ldrsh	r1, [r1, r3]
 801915a:	0014      	movs	r4, r2
 801915c:	b096      	sub	sp, #88	; 0x58
 801915e:	2900      	cmp	r1, #0
 8019160:	da0c      	bge.n	801917c <__swhatbuf_r+0x2c>
 8019162:	230c      	movs	r3, #12
 8019164:	5ef1      	ldrsh	r1, [r6, r3]
 8019166:	2280      	movs	r2, #128	; 0x80
 8019168:	2300      	movs	r3, #0
 801916a:	0008      	movs	r0, r1
 801916c:	602b      	str	r3, [r5, #0]
 801916e:	4010      	ands	r0, r2
 8019170:	4211      	tst	r1, r2
 8019172:	d117      	bne.n	80191a4 <__swhatbuf_r+0x54>
 8019174:	2380      	movs	r3, #128	; 0x80
 8019176:	00db      	lsls	r3, r3, #3
 8019178:	6023      	str	r3, [r4, #0]
 801917a:	e016      	b.n	80191aa <__swhatbuf_r+0x5a>
 801917c:	466a      	mov	r2, sp
 801917e:	f000 f9e5 	bl	801954c <_fstat_r>
 8019182:	2800      	cmp	r0, #0
 8019184:	dbed      	blt.n	8019162 <__swhatbuf_r+0x12>
 8019186:	23f0      	movs	r3, #240	; 0xf0
 8019188:	9901      	ldr	r1, [sp, #4]
 801918a:	021b      	lsls	r3, r3, #8
 801918c:	4019      	ands	r1, r3
 801918e:	4b08      	ldr	r3, [pc, #32]	; (80191b0 <__swhatbuf_r+0x60>)
 8019190:	2080      	movs	r0, #128	; 0x80
 8019192:	18c9      	adds	r1, r1, r3
 8019194:	424b      	negs	r3, r1
 8019196:	4159      	adcs	r1, r3
 8019198:	2380      	movs	r3, #128	; 0x80
 801919a:	00db      	lsls	r3, r3, #3
 801919c:	6029      	str	r1, [r5, #0]
 801919e:	0100      	lsls	r0, r0, #4
 80191a0:	6023      	str	r3, [r4, #0]
 80191a2:	e002      	b.n	80191aa <__swhatbuf_r+0x5a>
 80191a4:	2240      	movs	r2, #64	; 0x40
 80191a6:	0018      	movs	r0, r3
 80191a8:	6022      	str	r2, [r4, #0]
 80191aa:	b016      	add	sp, #88	; 0x58
 80191ac:	bd70      	pop	{r4, r5, r6, pc}
 80191ae:	46c0      	nop			; (mov r8, r8)
 80191b0:	ffffe000 	.word	0xffffe000

080191b4 <__smakebuf_r>:
 80191b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80191b6:	2602      	movs	r6, #2
 80191b8:	898b      	ldrh	r3, [r1, #12]
 80191ba:	0005      	movs	r5, r0
 80191bc:	000c      	movs	r4, r1
 80191be:	4233      	tst	r3, r6
 80191c0:	d006      	beq.n	80191d0 <__smakebuf_r+0x1c>
 80191c2:	0023      	movs	r3, r4
 80191c4:	3343      	adds	r3, #67	; 0x43
 80191c6:	6023      	str	r3, [r4, #0]
 80191c8:	6123      	str	r3, [r4, #16]
 80191ca:	2301      	movs	r3, #1
 80191cc:	6163      	str	r3, [r4, #20]
 80191ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80191d0:	466a      	mov	r2, sp
 80191d2:	ab01      	add	r3, sp, #4
 80191d4:	f7ff ffbc 	bl	8019150 <__swhatbuf_r>
 80191d8:	9900      	ldr	r1, [sp, #0]
 80191da:	0007      	movs	r7, r0
 80191dc:	0028      	movs	r0, r5
 80191de:	f7f9 ff57 	bl	8013090 <_malloc_r>
 80191e2:	2800      	cmp	r0, #0
 80191e4:	d108      	bne.n	80191f8 <__smakebuf_r+0x44>
 80191e6:	220c      	movs	r2, #12
 80191e8:	5ea3      	ldrsh	r3, [r4, r2]
 80191ea:	059a      	lsls	r2, r3, #22
 80191ec:	d4ef      	bmi.n	80191ce <__smakebuf_r+0x1a>
 80191ee:	2203      	movs	r2, #3
 80191f0:	4393      	bics	r3, r2
 80191f2:	431e      	orrs	r6, r3
 80191f4:	81a6      	strh	r6, [r4, #12]
 80191f6:	e7e4      	b.n	80191c2 <__smakebuf_r+0xe>
 80191f8:	4b0f      	ldr	r3, [pc, #60]	; (8019238 <__smakebuf_r+0x84>)
 80191fa:	63eb      	str	r3, [r5, #60]	; 0x3c
 80191fc:	2380      	movs	r3, #128	; 0x80
 80191fe:	89a2      	ldrh	r2, [r4, #12]
 8019200:	6020      	str	r0, [r4, #0]
 8019202:	4313      	orrs	r3, r2
 8019204:	81a3      	strh	r3, [r4, #12]
 8019206:	9b00      	ldr	r3, [sp, #0]
 8019208:	6120      	str	r0, [r4, #16]
 801920a:	6163      	str	r3, [r4, #20]
 801920c:	9b01      	ldr	r3, [sp, #4]
 801920e:	2b00      	cmp	r3, #0
 8019210:	d00d      	beq.n	801922e <__smakebuf_r+0x7a>
 8019212:	0028      	movs	r0, r5
 8019214:	230e      	movs	r3, #14
 8019216:	5ee1      	ldrsh	r1, [r4, r3]
 8019218:	f000 f9aa 	bl	8019570 <_isatty_r>
 801921c:	2800      	cmp	r0, #0
 801921e:	d006      	beq.n	801922e <__smakebuf_r+0x7a>
 8019220:	2203      	movs	r2, #3
 8019222:	89a3      	ldrh	r3, [r4, #12]
 8019224:	4393      	bics	r3, r2
 8019226:	001a      	movs	r2, r3
 8019228:	2301      	movs	r3, #1
 801922a:	4313      	orrs	r3, r2
 801922c:	81a3      	strh	r3, [r4, #12]
 801922e:	89a0      	ldrh	r0, [r4, #12]
 8019230:	4307      	orrs	r7, r0
 8019232:	81a7      	strh	r7, [r4, #12]
 8019234:	e7cb      	b.n	80191ce <__smakebuf_r+0x1a>
 8019236:	46c0      	nop			; (mov r8, r8)
 8019238:	08018cc9 	.word	0x08018cc9

0801923c <_raise_r>:
 801923c:	b570      	push	{r4, r5, r6, lr}
 801923e:	0004      	movs	r4, r0
 8019240:	000d      	movs	r5, r1
 8019242:	291f      	cmp	r1, #31
 8019244:	d904      	bls.n	8019250 <_raise_r+0x14>
 8019246:	2316      	movs	r3, #22
 8019248:	6003      	str	r3, [r0, #0]
 801924a:	2001      	movs	r0, #1
 801924c:	4240      	negs	r0, r0
 801924e:	bd70      	pop	{r4, r5, r6, pc}
 8019250:	23b7      	movs	r3, #183	; 0xb7
 8019252:	009b      	lsls	r3, r3, #2
 8019254:	58c3      	ldr	r3, [r0, r3]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d004      	beq.n	8019264 <_raise_r+0x28>
 801925a:	008a      	lsls	r2, r1, #2
 801925c:	189b      	adds	r3, r3, r2
 801925e:	681a      	ldr	r2, [r3, #0]
 8019260:	2a00      	cmp	r2, #0
 8019262:	d108      	bne.n	8019276 <_raise_r+0x3a>
 8019264:	0020      	movs	r0, r4
 8019266:	f000 f831 	bl	80192cc <_getpid_r>
 801926a:	002a      	movs	r2, r5
 801926c:	0001      	movs	r1, r0
 801926e:	0020      	movs	r0, r4
 8019270:	f000 f81a 	bl	80192a8 <_kill_r>
 8019274:	e7eb      	b.n	801924e <_raise_r+0x12>
 8019276:	2000      	movs	r0, #0
 8019278:	2a01      	cmp	r2, #1
 801927a:	d0e8      	beq.n	801924e <_raise_r+0x12>
 801927c:	1c51      	adds	r1, r2, #1
 801927e:	d103      	bne.n	8019288 <_raise_r+0x4c>
 8019280:	2316      	movs	r3, #22
 8019282:	3001      	adds	r0, #1
 8019284:	6023      	str	r3, [r4, #0]
 8019286:	e7e2      	b.n	801924e <_raise_r+0x12>
 8019288:	2400      	movs	r4, #0
 801928a:	0028      	movs	r0, r5
 801928c:	601c      	str	r4, [r3, #0]
 801928e:	4790      	blx	r2
 8019290:	0020      	movs	r0, r4
 8019292:	e7dc      	b.n	801924e <_raise_r+0x12>

08019294 <raise>:
 8019294:	b510      	push	{r4, lr}
 8019296:	4b03      	ldr	r3, [pc, #12]	; (80192a4 <raise+0x10>)
 8019298:	0001      	movs	r1, r0
 801929a:	6818      	ldr	r0, [r3, #0]
 801929c:	f7ff ffce 	bl	801923c <_raise_r>
 80192a0:	bd10      	pop	{r4, pc}
 80192a2:	46c0      	nop			; (mov r8, r8)
 80192a4:	200000cc 	.word	0x200000cc

080192a8 <_kill_r>:
 80192a8:	2300      	movs	r3, #0
 80192aa:	b570      	push	{r4, r5, r6, lr}
 80192ac:	4d06      	ldr	r5, [pc, #24]	; (80192c8 <_kill_r+0x20>)
 80192ae:	0004      	movs	r4, r0
 80192b0:	0008      	movs	r0, r1
 80192b2:	0011      	movs	r1, r2
 80192b4:	602b      	str	r3, [r5, #0]
 80192b6:	f000 f9b5 	bl	8019624 <_kill>
 80192ba:	1c43      	adds	r3, r0, #1
 80192bc:	d103      	bne.n	80192c6 <_kill_r+0x1e>
 80192be:	682b      	ldr	r3, [r5, #0]
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d000      	beq.n	80192c6 <_kill_r+0x1e>
 80192c4:	6023      	str	r3, [r4, #0]
 80192c6:	bd70      	pop	{r4, r5, r6, pc}
 80192c8:	20006f80 	.word	0x20006f80

080192cc <_getpid_r>:
 80192cc:	b510      	push	{r4, lr}
 80192ce:	f000 f999 	bl	8019604 <_getpid>
 80192d2:	bd10      	pop	{r4, pc}

080192d4 <__sread>:
 80192d4:	b570      	push	{r4, r5, r6, lr}
 80192d6:	000c      	movs	r4, r1
 80192d8:	250e      	movs	r5, #14
 80192da:	5f49      	ldrsh	r1, [r1, r5]
 80192dc:	f000 f96e 	bl	80195bc <_read_r>
 80192e0:	2800      	cmp	r0, #0
 80192e2:	db03      	blt.n	80192ec <__sread+0x18>
 80192e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80192e6:	181b      	adds	r3, r3, r0
 80192e8:	6523      	str	r3, [r4, #80]	; 0x50
 80192ea:	bd70      	pop	{r4, r5, r6, pc}
 80192ec:	89a3      	ldrh	r3, [r4, #12]
 80192ee:	4a02      	ldr	r2, [pc, #8]	; (80192f8 <__sread+0x24>)
 80192f0:	4013      	ands	r3, r2
 80192f2:	81a3      	strh	r3, [r4, #12]
 80192f4:	e7f9      	b.n	80192ea <__sread+0x16>
 80192f6:	46c0      	nop			; (mov r8, r8)
 80192f8:	ffffefff 	.word	0xffffefff

080192fc <__swrite>:
 80192fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192fe:	001f      	movs	r7, r3
 8019300:	898b      	ldrh	r3, [r1, #12]
 8019302:	0005      	movs	r5, r0
 8019304:	000c      	movs	r4, r1
 8019306:	0016      	movs	r6, r2
 8019308:	05db      	lsls	r3, r3, #23
 801930a:	d505      	bpl.n	8019318 <__swrite+0x1c>
 801930c:	230e      	movs	r3, #14
 801930e:	5ec9      	ldrsh	r1, [r1, r3]
 8019310:	2200      	movs	r2, #0
 8019312:	2302      	movs	r3, #2
 8019314:	f000 f93e 	bl	8019594 <_lseek_r>
 8019318:	89a3      	ldrh	r3, [r4, #12]
 801931a:	4a05      	ldr	r2, [pc, #20]	; (8019330 <__swrite+0x34>)
 801931c:	0028      	movs	r0, r5
 801931e:	4013      	ands	r3, r2
 8019320:	81a3      	strh	r3, [r4, #12]
 8019322:	0032      	movs	r2, r6
 8019324:	230e      	movs	r3, #14
 8019326:	5ee1      	ldrsh	r1, [r4, r3]
 8019328:	003b      	movs	r3, r7
 801932a:	f000 f889 	bl	8019440 <_write_r>
 801932e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019330:	ffffefff 	.word	0xffffefff

08019334 <__sseek>:
 8019334:	b570      	push	{r4, r5, r6, lr}
 8019336:	000c      	movs	r4, r1
 8019338:	250e      	movs	r5, #14
 801933a:	5f49      	ldrsh	r1, [r1, r5]
 801933c:	f000 f92a 	bl	8019594 <_lseek_r>
 8019340:	89a3      	ldrh	r3, [r4, #12]
 8019342:	1c42      	adds	r2, r0, #1
 8019344:	d103      	bne.n	801934e <__sseek+0x1a>
 8019346:	4a05      	ldr	r2, [pc, #20]	; (801935c <__sseek+0x28>)
 8019348:	4013      	ands	r3, r2
 801934a:	81a3      	strh	r3, [r4, #12]
 801934c:	bd70      	pop	{r4, r5, r6, pc}
 801934e:	2280      	movs	r2, #128	; 0x80
 8019350:	0152      	lsls	r2, r2, #5
 8019352:	4313      	orrs	r3, r2
 8019354:	81a3      	strh	r3, [r4, #12]
 8019356:	6520      	str	r0, [r4, #80]	; 0x50
 8019358:	e7f8      	b.n	801934c <__sseek+0x18>
 801935a:	46c0      	nop			; (mov r8, r8)
 801935c:	ffffefff 	.word	0xffffefff

08019360 <__sclose>:
 8019360:	b510      	push	{r4, lr}
 8019362:	230e      	movs	r3, #14
 8019364:	5ec9      	ldrsh	r1, [r1, r3]
 8019366:	f000 f87f 	bl	8019468 <_close_r>
 801936a:	bd10      	pop	{r4, pc}

0801936c <__swbuf_r>:
 801936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801936e:	0006      	movs	r6, r0
 8019370:	000d      	movs	r5, r1
 8019372:	0014      	movs	r4, r2
 8019374:	2800      	cmp	r0, #0
 8019376:	d004      	beq.n	8019382 <__swbuf_r+0x16>
 8019378:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801937a:	2b00      	cmp	r3, #0
 801937c:	d101      	bne.n	8019382 <__swbuf_r+0x16>
 801937e:	f7ff fccb 	bl	8018d18 <__sinit>
 8019382:	69a3      	ldr	r3, [r4, #24]
 8019384:	60a3      	str	r3, [r4, #8]
 8019386:	89a3      	ldrh	r3, [r4, #12]
 8019388:	071b      	lsls	r3, r3, #28
 801938a:	d52e      	bpl.n	80193ea <__swbuf_r+0x7e>
 801938c:	6923      	ldr	r3, [r4, #16]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d02b      	beq.n	80193ea <__swbuf_r+0x7e>
 8019392:	230c      	movs	r3, #12
 8019394:	5ee2      	ldrsh	r2, [r4, r3]
 8019396:	2380      	movs	r3, #128	; 0x80
 8019398:	019b      	lsls	r3, r3, #6
 801939a:	b2ef      	uxtb	r7, r5
 801939c:	b2ed      	uxtb	r5, r5
 801939e:	421a      	tst	r2, r3
 80193a0:	d02c      	beq.n	80193fc <__swbuf_r+0x90>
 80193a2:	6823      	ldr	r3, [r4, #0]
 80193a4:	6922      	ldr	r2, [r4, #16]
 80193a6:	1a98      	subs	r0, r3, r2
 80193a8:	6963      	ldr	r3, [r4, #20]
 80193aa:	4283      	cmp	r3, r0
 80193ac:	dc05      	bgt.n	80193ba <__swbuf_r+0x4e>
 80193ae:	0021      	movs	r1, r4
 80193b0:	0030      	movs	r0, r6
 80193b2:	f7ff fc3b 	bl	8018c2c <_fflush_r>
 80193b6:	2800      	cmp	r0, #0
 80193b8:	d11d      	bne.n	80193f6 <__swbuf_r+0x8a>
 80193ba:	68a3      	ldr	r3, [r4, #8]
 80193bc:	3001      	adds	r0, #1
 80193be:	3b01      	subs	r3, #1
 80193c0:	60a3      	str	r3, [r4, #8]
 80193c2:	6823      	ldr	r3, [r4, #0]
 80193c4:	1c5a      	adds	r2, r3, #1
 80193c6:	6022      	str	r2, [r4, #0]
 80193c8:	701f      	strb	r7, [r3, #0]
 80193ca:	6963      	ldr	r3, [r4, #20]
 80193cc:	4283      	cmp	r3, r0
 80193ce:	d004      	beq.n	80193da <__swbuf_r+0x6e>
 80193d0:	89a3      	ldrh	r3, [r4, #12]
 80193d2:	07db      	lsls	r3, r3, #31
 80193d4:	d507      	bpl.n	80193e6 <__swbuf_r+0x7a>
 80193d6:	2d0a      	cmp	r5, #10
 80193d8:	d105      	bne.n	80193e6 <__swbuf_r+0x7a>
 80193da:	0021      	movs	r1, r4
 80193dc:	0030      	movs	r0, r6
 80193de:	f7ff fc25 	bl	8018c2c <_fflush_r>
 80193e2:	2800      	cmp	r0, #0
 80193e4:	d107      	bne.n	80193f6 <__swbuf_r+0x8a>
 80193e6:	0028      	movs	r0, r5
 80193e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193ea:	0021      	movs	r1, r4
 80193ec:	0030      	movs	r0, r6
 80193ee:	f7ff fb19 	bl	8018a24 <__swsetup_r>
 80193f2:	2800      	cmp	r0, #0
 80193f4:	d0cd      	beq.n	8019392 <__swbuf_r+0x26>
 80193f6:	2501      	movs	r5, #1
 80193f8:	426d      	negs	r5, r5
 80193fa:	e7f4      	b.n	80193e6 <__swbuf_r+0x7a>
 80193fc:	4313      	orrs	r3, r2
 80193fe:	81a3      	strh	r3, [r4, #12]
 8019400:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019402:	4b02      	ldr	r3, [pc, #8]	; (801940c <__swbuf_r+0xa0>)
 8019404:	4013      	ands	r3, r2
 8019406:	6663      	str	r3, [r4, #100]	; 0x64
 8019408:	e7cb      	b.n	80193a2 <__swbuf_r+0x36>
 801940a:	46c0      	nop			; (mov r8, r8)
 801940c:	ffffdfff 	.word	0xffffdfff

08019410 <_wcrtomb_r>:
 8019410:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019412:	001d      	movs	r5, r3
 8019414:	4b09      	ldr	r3, [pc, #36]	; (801943c <_wcrtomb_r+0x2c>)
 8019416:	0004      	movs	r4, r0
 8019418:	33e0      	adds	r3, #224	; 0xe0
 801941a:	681e      	ldr	r6, [r3, #0]
 801941c:	002b      	movs	r3, r5
 801941e:	2900      	cmp	r1, #0
 8019420:	d101      	bne.n	8019426 <_wcrtomb_r+0x16>
 8019422:	000a      	movs	r2, r1
 8019424:	a901      	add	r1, sp, #4
 8019426:	0020      	movs	r0, r4
 8019428:	47b0      	blx	r6
 801942a:	1c43      	adds	r3, r0, #1
 801942c:	d103      	bne.n	8019436 <_wcrtomb_r+0x26>
 801942e:	2300      	movs	r3, #0
 8019430:	602b      	str	r3, [r5, #0]
 8019432:	338a      	adds	r3, #138	; 0x8a
 8019434:	6023      	str	r3, [r4, #0]
 8019436:	b004      	add	sp, #16
 8019438:	bd70      	pop	{r4, r5, r6, pc}
 801943a:	46c0      	nop			; (mov r8, r8)
 801943c:	20000910 	.word	0x20000910

08019440 <_write_r>:
 8019440:	b570      	push	{r4, r5, r6, lr}
 8019442:	0004      	movs	r4, r0
 8019444:	0008      	movs	r0, r1
 8019446:	0011      	movs	r1, r2
 8019448:	001a      	movs	r2, r3
 801944a:	2300      	movs	r3, #0
 801944c:	4d05      	ldr	r5, [pc, #20]	; (8019464 <_write_r+0x24>)
 801944e:	602b      	str	r3, [r5, #0]
 8019450:	f000 f910 	bl	8019674 <_write>
 8019454:	1c43      	adds	r3, r0, #1
 8019456:	d103      	bne.n	8019460 <_write_r+0x20>
 8019458:	682b      	ldr	r3, [r5, #0]
 801945a:	2b00      	cmp	r3, #0
 801945c:	d000      	beq.n	8019460 <_write_r+0x20>
 801945e:	6023      	str	r3, [r4, #0]
 8019460:	bd70      	pop	{r4, r5, r6, pc}
 8019462:	46c0      	nop			; (mov r8, r8)
 8019464:	20006f80 	.word	0x20006f80

08019468 <_close_r>:
 8019468:	2300      	movs	r3, #0
 801946a:	b570      	push	{r4, r5, r6, lr}
 801946c:	4d06      	ldr	r5, [pc, #24]	; (8019488 <_close_r+0x20>)
 801946e:	0004      	movs	r4, r0
 8019470:	0008      	movs	r0, r1
 8019472:	602b      	str	r3, [r5, #0]
 8019474:	f000 f8b6 	bl	80195e4 <_close>
 8019478:	1c43      	adds	r3, r0, #1
 801947a:	d103      	bne.n	8019484 <_close_r+0x1c>
 801947c:	682b      	ldr	r3, [r5, #0]
 801947e:	2b00      	cmp	r3, #0
 8019480:	d000      	beq.n	8019484 <_close_r+0x1c>
 8019482:	6023      	str	r3, [r4, #0]
 8019484:	bd70      	pop	{r4, r5, r6, pc}
 8019486:	46c0      	nop			; (mov r8, r8)
 8019488:	20006f80 	.word	0x20006f80

0801948c <_fclose_r>:
 801948c:	b570      	push	{r4, r5, r6, lr}
 801948e:	0005      	movs	r5, r0
 8019490:	1e0c      	subs	r4, r1, #0
 8019492:	d102      	bne.n	801949a <_fclose_r+0xe>
 8019494:	2600      	movs	r6, #0
 8019496:	0030      	movs	r0, r6
 8019498:	bd70      	pop	{r4, r5, r6, pc}
 801949a:	2800      	cmp	r0, #0
 801949c:	d004      	beq.n	80194a8 <_fclose_r+0x1c>
 801949e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d101      	bne.n	80194a8 <_fclose_r+0x1c>
 80194a4:	f7ff fc38 	bl	8018d18 <__sinit>
 80194a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80194aa:	07db      	lsls	r3, r3, #31
 80194ac:	d405      	bmi.n	80194ba <_fclose_r+0x2e>
 80194ae:	89a3      	ldrh	r3, [r4, #12]
 80194b0:	059b      	lsls	r3, r3, #22
 80194b2:	d402      	bmi.n	80194ba <_fclose_r+0x2e>
 80194b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80194b6:	f7fd ff19 	bl	80172ec <__retarget_lock_acquire_recursive>
 80194ba:	220c      	movs	r2, #12
 80194bc:	5ea3      	ldrsh	r3, [r4, r2]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d109      	bne.n	80194d6 <_fclose_r+0x4a>
 80194c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80194c4:	3301      	adds	r3, #1
 80194c6:	0016      	movs	r6, r2
 80194c8:	401e      	ands	r6, r3
 80194ca:	421a      	tst	r2, r3
 80194cc:	d1e2      	bne.n	8019494 <_fclose_r+0x8>
 80194ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80194d0:	f7fd ff0d 	bl	80172ee <__retarget_lock_release_recursive>
 80194d4:	e7df      	b.n	8019496 <_fclose_r+0xa>
 80194d6:	0021      	movs	r1, r4
 80194d8:	0028      	movs	r0, r5
 80194da:	f7ff fb0f 	bl	8018afc <__sflush_r>
 80194de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80194e0:	0006      	movs	r6, r0
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d006      	beq.n	80194f4 <_fclose_r+0x68>
 80194e6:	0028      	movs	r0, r5
 80194e8:	69e1      	ldr	r1, [r4, #28]
 80194ea:	4798      	blx	r3
 80194ec:	2800      	cmp	r0, #0
 80194ee:	da01      	bge.n	80194f4 <_fclose_r+0x68>
 80194f0:	2601      	movs	r6, #1
 80194f2:	4276      	negs	r6, r6
 80194f4:	89a3      	ldrh	r3, [r4, #12]
 80194f6:	061b      	lsls	r3, r3, #24
 80194f8:	d503      	bpl.n	8019502 <_fclose_r+0x76>
 80194fa:	0028      	movs	r0, r5
 80194fc:	6921      	ldr	r1, [r4, #16]
 80194fe:	f7fd fac1 	bl	8016a84 <_free_r>
 8019502:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019504:	2900      	cmp	r1, #0
 8019506:	d008      	beq.n	801951a <_fclose_r+0x8e>
 8019508:	0023      	movs	r3, r4
 801950a:	3340      	adds	r3, #64	; 0x40
 801950c:	4299      	cmp	r1, r3
 801950e:	d002      	beq.n	8019516 <_fclose_r+0x8a>
 8019510:	0028      	movs	r0, r5
 8019512:	f7fd fab7 	bl	8016a84 <_free_r>
 8019516:	2300      	movs	r3, #0
 8019518:	6323      	str	r3, [r4, #48]	; 0x30
 801951a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801951c:	2900      	cmp	r1, #0
 801951e:	d004      	beq.n	801952a <_fclose_r+0x9e>
 8019520:	0028      	movs	r0, r5
 8019522:	f7fd faaf 	bl	8016a84 <_free_r>
 8019526:	2300      	movs	r3, #0
 8019528:	6463      	str	r3, [r4, #68]	; 0x44
 801952a:	f7ff fbd5 	bl	8018cd8 <__sfp_lock_acquire>
 801952e:	2300      	movs	r3, #0
 8019530:	81a3      	strh	r3, [r4, #12]
 8019532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019534:	07db      	lsls	r3, r3, #31
 8019536:	d402      	bmi.n	801953e <_fclose_r+0xb2>
 8019538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801953a:	f7fd fed8 	bl	80172ee <__retarget_lock_release_recursive>
 801953e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019540:	f7fd fed3 	bl	80172ea <__retarget_lock_close_recursive>
 8019544:	f7ff fbd0 	bl	8018ce8 <__sfp_lock_release>
 8019548:	e7a5      	b.n	8019496 <_fclose_r+0xa>
	...

0801954c <_fstat_r>:
 801954c:	2300      	movs	r3, #0
 801954e:	b570      	push	{r4, r5, r6, lr}
 8019550:	4d06      	ldr	r5, [pc, #24]	; (801956c <_fstat_r+0x20>)
 8019552:	0004      	movs	r4, r0
 8019554:	0008      	movs	r0, r1
 8019556:	0011      	movs	r1, r2
 8019558:	602b      	str	r3, [r5, #0]
 801955a:	f000 f84b 	bl	80195f4 <_fstat>
 801955e:	1c43      	adds	r3, r0, #1
 8019560:	d103      	bne.n	801956a <_fstat_r+0x1e>
 8019562:	682b      	ldr	r3, [r5, #0]
 8019564:	2b00      	cmp	r3, #0
 8019566:	d000      	beq.n	801956a <_fstat_r+0x1e>
 8019568:	6023      	str	r3, [r4, #0]
 801956a:	bd70      	pop	{r4, r5, r6, pc}
 801956c:	20006f80 	.word	0x20006f80

08019570 <_isatty_r>:
 8019570:	2300      	movs	r3, #0
 8019572:	b570      	push	{r4, r5, r6, lr}
 8019574:	4d06      	ldr	r5, [pc, #24]	; (8019590 <_isatty_r+0x20>)
 8019576:	0004      	movs	r4, r0
 8019578:	0008      	movs	r0, r1
 801957a:	602b      	str	r3, [r5, #0]
 801957c:	f000 f84a 	bl	8019614 <_isatty>
 8019580:	1c43      	adds	r3, r0, #1
 8019582:	d103      	bne.n	801958c <_isatty_r+0x1c>
 8019584:	682b      	ldr	r3, [r5, #0]
 8019586:	2b00      	cmp	r3, #0
 8019588:	d000      	beq.n	801958c <_isatty_r+0x1c>
 801958a:	6023      	str	r3, [r4, #0]
 801958c:	bd70      	pop	{r4, r5, r6, pc}
 801958e:	46c0      	nop			; (mov r8, r8)
 8019590:	20006f80 	.word	0x20006f80

08019594 <_lseek_r>:
 8019594:	b570      	push	{r4, r5, r6, lr}
 8019596:	0004      	movs	r4, r0
 8019598:	0008      	movs	r0, r1
 801959a:	0011      	movs	r1, r2
 801959c:	001a      	movs	r2, r3
 801959e:	2300      	movs	r3, #0
 80195a0:	4d05      	ldr	r5, [pc, #20]	; (80195b8 <_lseek_r+0x24>)
 80195a2:	602b      	str	r3, [r5, #0]
 80195a4:	f000 f846 	bl	8019634 <_lseek>
 80195a8:	1c43      	adds	r3, r0, #1
 80195aa:	d103      	bne.n	80195b4 <_lseek_r+0x20>
 80195ac:	682b      	ldr	r3, [r5, #0]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d000      	beq.n	80195b4 <_lseek_r+0x20>
 80195b2:	6023      	str	r3, [r4, #0]
 80195b4:	bd70      	pop	{r4, r5, r6, pc}
 80195b6:	46c0      	nop			; (mov r8, r8)
 80195b8:	20006f80 	.word	0x20006f80

080195bc <_read_r>:
 80195bc:	b570      	push	{r4, r5, r6, lr}
 80195be:	0004      	movs	r4, r0
 80195c0:	0008      	movs	r0, r1
 80195c2:	0011      	movs	r1, r2
 80195c4:	001a      	movs	r2, r3
 80195c6:	2300      	movs	r3, #0
 80195c8:	4d05      	ldr	r5, [pc, #20]	; (80195e0 <_read_r+0x24>)
 80195ca:	602b      	str	r3, [r5, #0]
 80195cc:	f000 f83a 	bl	8019644 <_read>
 80195d0:	1c43      	adds	r3, r0, #1
 80195d2:	d103      	bne.n	80195dc <_read_r+0x20>
 80195d4:	682b      	ldr	r3, [r5, #0]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d000      	beq.n	80195dc <_read_r+0x20>
 80195da:	6023      	str	r3, [r4, #0]
 80195dc:	bd70      	pop	{r4, r5, r6, pc}
 80195de:	46c0      	nop			; (mov r8, r8)
 80195e0:	20006f80 	.word	0x20006f80

080195e4 <_close>:
 80195e4:	2258      	movs	r2, #88	; 0x58
 80195e6:	2001      	movs	r0, #1
 80195e8:	4b01      	ldr	r3, [pc, #4]	; (80195f0 <_close+0xc>)
 80195ea:	4240      	negs	r0, r0
 80195ec:	601a      	str	r2, [r3, #0]
 80195ee:	4770      	bx	lr
 80195f0:	20006f80 	.word	0x20006f80

080195f4 <_fstat>:
 80195f4:	2258      	movs	r2, #88	; 0x58
 80195f6:	2001      	movs	r0, #1
 80195f8:	4b01      	ldr	r3, [pc, #4]	; (8019600 <_fstat+0xc>)
 80195fa:	4240      	negs	r0, r0
 80195fc:	601a      	str	r2, [r3, #0]
 80195fe:	4770      	bx	lr
 8019600:	20006f80 	.word	0x20006f80

08019604 <_getpid>:
 8019604:	2258      	movs	r2, #88	; 0x58
 8019606:	2001      	movs	r0, #1
 8019608:	4b01      	ldr	r3, [pc, #4]	; (8019610 <_getpid+0xc>)
 801960a:	4240      	negs	r0, r0
 801960c:	601a      	str	r2, [r3, #0]
 801960e:	4770      	bx	lr
 8019610:	20006f80 	.word	0x20006f80

08019614 <_isatty>:
 8019614:	2258      	movs	r2, #88	; 0x58
 8019616:	4b02      	ldr	r3, [pc, #8]	; (8019620 <_isatty+0xc>)
 8019618:	2000      	movs	r0, #0
 801961a:	601a      	str	r2, [r3, #0]
 801961c:	4770      	bx	lr
 801961e:	46c0      	nop			; (mov r8, r8)
 8019620:	20006f80 	.word	0x20006f80

08019624 <_kill>:
 8019624:	2258      	movs	r2, #88	; 0x58
 8019626:	2001      	movs	r0, #1
 8019628:	4b01      	ldr	r3, [pc, #4]	; (8019630 <_kill+0xc>)
 801962a:	4240      	negs	r0, r0
 801962c:	601a      	str	r2, [r3, #0]
 801962e:	4770      	bx	lr
 8019630:	20006f80 	.word	0x20006f80

08019634 <_lseek>:
 8019634:	2258      	movs	r2, #88	; 0x58
 8019636:	2001      	movs	r0, #1
 8019638:	4b01      	ldr	r3, [pc, #4]	; (8019640 <_lseek+0xc>)
 801963a:	4240      	negs	r0, r0
 801963c:	601a      	str	r2, [r3, #0]
 801963e:	4770      	bx	lr
 8019640:	20006f80 	.word	0x20006f80

08019644 <_read>:
 8019644:	2258      	movs	r2, #88	; 0x58
 8019646:	2001      	movs	r0, #1
 8019648:	4b01      	ldr	r3, [pc, #4]	; (8019650 <_read+0xc>)
 801964a:	4240      	negs	r0, r0
 801964c:	601a      	str	r2, [r3, #0]
 801964e:	4770      	bx	lr
 8019650:	20006f80 	.word	0x20006f80

08019654 <_sbrk>:
 8019654:	4a05      	ldr	r2, [pc, #20]	; (801966c <_sbrk+0x18>)
 8019656:	0003      	movs	r3, r0
 8019658:	6811      	ldr	r1, [r2, #0]
 801965a:	2900      	cmp	r1, #0
 801965c:	d101      	bne.n	8019662 <_sbrk+0xe>
 801965e:	4904      	ldr	r1, [pc, #16]	; (8019670 <_sbrk+0x1c>)
 8019660:	6011      	str	r1, [r2, #0]
 8019662:	6810      	ldr	r0, [r2, #0]
 8019664:	18c3      	adds	r3, r0, r3
 8019666:	6013      	str	r3, [r2, #0]
 8019668:	4770      	bx	lr
 801966a:	46c0      	nop			; (mov r8, r8)
 801966c:	20006f84 	.word	0x20006f84
 8019670:	20006f88 	.word	0x20006f88

08019674 <_write>:
 8019674:	2258      	movs	r2, #88	; 0x58
 8019676:	2001      	movs	r0, #1
 8019678:	4b01      	ldr	r3, [pc, #4]	; (8019680 <_write+0xc>)
 801967a:	4240      	negs	r0, r0
 801967c:	601a      	str	r2, [r3, #0]
 801967e:	4770      	bx	lr
 8019680:	20006f80 	.word	0x20006f80

08019684 <_exit>:
 8019684:	e7fe      	b.n	8019684 <_exit>
	...

08019688 <_init>:
 8019688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801968a:	46c0      	nop			; (mov r8, r8)
 801968c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801968e:	bc08      	pop	{r3}
 8019690:	469e      	mov	lr, r3
 8019692:	4770      	bx	lr

08019694 <_fini>:
 8019694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019696:	46c0      	nop			; (mov r8, r8)
 8019698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801969a:	bc08      	pop	{r3}
 801969c:	469e      	mov	lr, r3
 801969e:	4770      	bx	lr
